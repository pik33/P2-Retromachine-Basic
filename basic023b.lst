00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic023b.p2asm"
00000                 | con
00000                 | 	_clkfreq = 337000000
00000                 | 	_clkmode = 21844219
00000                 | 	HEAPSIZE = 256000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 23
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getivar = 17
00000                 | 	fun_getuvar = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1023
00000                 | 	maxstack = 512
00000                 | 	maxfor = 128
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 337000000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $14d50fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 A8 A6 80 FF 
00420 007 00 F0 65 FD | 	hubset	##21844216
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a A8 A6 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##21844219
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 1B 0B 8A FF 
00440 00f 14 80 6C FC | 	wrlong	##337000000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 90 30 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 31 63 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 30 61 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 31 61 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 62 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 60 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 30 61 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 31 63 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec C0 F2 02 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed D8 F0 02 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 C8 DA 06 00 | 	long	@objmem
007d0 0f3             | ptr__Audio093b_8_sc_spin2_dat__
007d0 0f3 D8 DF 02 00 | 	long	@_Audio093b_8_sc_spin2_dat_
007d4 0f4             | ptr___system__dat__
007d4 0f4 B8 E3 02 00 | 	long	@__system__dat_
007d8 0f5             | ptr__dat__
007d8 0f5 14 5D 02 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 F8 EA 02 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 4C 7E 02 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 04 08 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 FC A5 02 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa B4 A3 02 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 8C B5 02 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 84 7F 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' 
00804                 | ' 
00804                 | ' '----------------------------------- this is the end of the main loop ------------------------------------------------------------------
00804                 | ' 
00804                 | ' sub housekeeper
00804                 | _housekeeper
00804                 | ' 
00804                 | ' do
00804                 | LR__0001
00804                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
00804     45 E4 05 F1 | 	add	objptr, #69
00808                 | LR__0002
00808     F2 12 02 FB | 	rdlong	arg01, objptr
0080c     01 12 0E F2 | 	cmp	arg01, #1 wz
00810     F4 FF 9F 5D |  if_ne	jmp	#LR__0002
00814     51 00 00 FF 
00818     F3 E5 05 F1 | 	add	objptr, ##41971
0081c     F2 12 02 FB | 	rdlong	arg01, objptr
00820     01 12 06 F1 | 	add	arg01, #1
00824     F2 12 62 FC | 	wrlong	arg01, objptr
00828     52 00 00 FF 
0082c     38 E4 85 F1 | 	sub	objptr, ##42040
00830     80 00 B0 FD | 	call	#_gethdi
00834     05 12 06 F6 | 	mov	arg01, #5
00838     B0 5D B1 FD | 	call	#__system___waitms
0083c     52 00 00 FF 
00840     38 E4 05 F1 | 	add	objptr, ##42040
00844     F2 12 02 FB | 	rdlong	arg01, objptr
00848     01 12 06 F1 | 	add	arg01, #1
0084c     F2 12 62 FC | 	wrlong	arg01, objptr
00850     52 00 00 FF 
00854     38 E4 85 F1 | 	sub	objptr, ##42040
00858     58 00 B0 FD | 	call	#_gethdi
0085c     05 12 06 F6 | 	mov	arg01, #5
00860     88 5D B1 FD | 	call	#__system___waitms
00864     52 00 00 FF 
00868     38 E4 05 F1 | 	add	objptr, ##42040
0086c     F2 12 02 FB | 	rdlong	arg01, objptr
00870     01 12 06 F1 | 	add	arg01, #1
00874     F2 12 62 FC | 	wrlong	arg01, objptr
00878     52 00 00 FF 
0087c     38 E4 85 F1 | 	sub	objptr, ##42040
00880     30 00 B0 FD | 	call	#_gethdi
00884     05 12 06 F6 | 	mov	arg01, #5
00888     60 5D B1 FD | 	call	#__system___waitms
0088c     52 00 00 FF 
00890     38 E4 05 F1 | 	add	objptr, ##42040
00894     F2 12 02 FB | 	rdlong	arg01, objptr
00898     01 12 06 F1 | 	add	arg01, #1
0089c     F2 12 62 FC | 	wrlong	arg01, objptr
008a0     52 00 00 FF 
008a4     38 E4 85 F1 | 	sub	objptr, ##42040
008a8     08 00 B0 FD | 	call	#_gethdi
008ac     54 FF 9F FD | 	jmp	#LR__0001
008b0                 | _housekeeper_ret
008b0     2D 00 64 FD | 	ret
008b4                 | 
008b4                 | ' 
008b4                 | ' 
008b4                 | ' sub gethdi
008b4                 | _gethdi
008b4     03 4A 05 F6 | 	mov	COUNT_, #3
008b8     A8 00 A0 FD | 	call	#pushregs_
008bc                 | '   x := mouse_xacc
008bc     14 00 00 FF 
008c0     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
008c4     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
008c8                 | '   y := mouse_yacc
008c8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008cc     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
008d0     51 00 00 FF 
008d4     B0 E5 05 F1 | 	add	objptr, ##41904
008d8     F2 14 62 FC | 	wrlong	arg02, objptr
008dc     04 E4 05 F1 | 	add	objptr, #4
008e0     F2 12 62 FC | 	wrlong	arg01, objptr
008e4                 | '   x := 0
008e4                 | '   y := mouse_zacc
008e4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008e8     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
008ec     08 E4 05 F1 | 	add	objptr, #8
008f0     F2 FA 61 FC | 	wrlong	result1, objptr
008f4                 | '   return mouse_bstate&7
008f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
008f8     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
008fc     14 00 00 FF 
00900     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
00904     07 FA 05 F5 | 	and	result1, #7
00908     04 E4 85 F1 | 	sub	objptr, #4
0090c     F2 FA 61 FC | 	wrlong	result1, objptr
00910     51 00 00 FF 
00914     B8 E5 85 F1 | 	sub	objptr, ##41912
00918     00 1E 06 F6 | 	mov	local01, #0
0091c                 | ' 
0091c                 | '   mousex,mousey=kbm.mouse_xy()
0091c                 | '   dummy,mousew=kbm.mouse_scroll()
0091c                 | '   mousek=kbm.mouse_buttons()
0091c                 | '   
0091c                 | '   i=0:
0091c                 | '   for j=0 to 6
0091c     00 20 06 F6 | 	mov	local02, #0
00920                 | LR__0010
00920                 | '     if kbm.hidpad_id(j)>0 then
00920     10 13 02 F6 | 	mov	arg01, local02
00924     70 53 B1 FD | 	call	#_usbnew_spin2_hidpad_id
00928     01 FA 55 F2 | 	cmps	result1, #1 wc
0092c     8C 00 90 CD |  if_b	jmp	#LR__0011
00930     10 13 02 F6 | 	mov	arg01, local02
00934     00 14 06 F6 | 	mov	arg02, #0
00938     C0 53 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0093c     FD 22 02 F6 | 	mov	local03, result1
00940     10 13 02 F6 | 	mov	arg01, local02
00944     01 14 06 F6 | 	mov	arg02, #1
00948     B0 53 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
0094c     60 00 00 FF 
00950     00 22 06 F1 | 	add	local03, ##49152
00954     0F 22 46 F0 | 	shr	local03, #15
00958     01 14 06 F6 | 	mov	arg02, #1
0095c     11 15 02 F1 | 	add	arg02, local03
00960     60 00 00 FF 
00964     00 FA 05 F1 | 	add	result1, ##49152
00968     0F FA 45 F0 | 	shr	result1, #15
0096c     01 12 06 F6 | 	mov	arg01, #1
00970     FD 12 02 F1 | 	add	arg01, result1
00974     0F 23 02 F6 | 	mov	local03, local01
00978     02 22 66 F0 | 	shl	local03, #2
0097c     51 00 00 FF 
00980     C0 E5 05 F1 | 	add	objptr, ##41920
00984     F2 22 02 F1 | 	add	local03, objptr
00988     02 12 66 F0 | 	shl	arg01, #2
0098c     09 15 02 F1 | 	add	arg02, arg01
00990     11 15 62 FC | 	wrlong	arg02, local03
00994     0F 23 02 F6 | 	mov	local03, local01
00998     02 22 66 F0 | 	shl	local03, #2
0099c     1C E4 05 F1 | 	add	objptr, #28
009a0     F2 22 02 F1 | 	add	local03, objptr
009a4     10 13 02 F6 | 	mov	arg01, local02
009a8     51 00 00 FF 
009ac     DC E5 85 F1 | 	sub	objptr, ##41948
009b0     14 53 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
009b4     11 FB 61 FC | 	wrlong	result1, local03
009b8     01 1E 06 F1 | 	add	local01, #1
009bc                 | LR__0011
009bc     01 20 06 F1 | 	add	local02, #1
009c0     07 20 16 F2 | 	cmp	local02, #7 wc
009c4     58 FF 9F CD |  if_b	jmp	#LR__0010
009c8     97 22 48 FB | 	callpa	#(@LR__0013-@LR__0012)>>2,fcache_load_ptr_
009cc                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
009cc                 | LR__0012
009cc     07 1E 16 F2 | 	cmp	local01, #7 wc
009d0     3C 00 90 3D |  if_ae	jmp	#LR__0014
009d4     0F 23 02 F6 | 	mov	local03, local01
009d8     02 22 66 F0 | 	shl	local03, #2
009dc     51 00 00 FF 
009e0     C0 E5 05 F1 | 	add	objptr, ##41920
009e4     F2 22 02 F1 | 	add	local03, objptr
009e8     11 01 68 FC | 	wrlong	#0, local03
009ec     0F 23 02 F6 | 	mov	local03, local01
009f0     02 22 66 F0 | 	shl	local03, #2
009f4     1C E4 05 F1 | 	add	objptr, #28
009f8     F2 22 02 F1 | 	add	local03, objptr
009fc     11 01 68 FC | 	wrlong	#0, local03
00a00     01 1E 06 F1 | 	add	local01, #1
00a04     51 00 00 FF 
00a08     DC E5 85 F1 | 	sub	objptr, ##41948
00a0c     BC FF 9F FD | 	jmp	#LR__0012
00a10                 | LR__0013
00a10                 | LR__0014
00a10     A7 F0 03 F6 | 	mov	ptra, fp
00a14     B2 00 A0 FD | 	call	#popregs_
00a18                 | _gethdi_ret
00a18     2D 00 64 FD | 	ret
00a1c                 | 
00a1c                 | ' 
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' '----------------------------------- The line interpreter/tokenizer --------------------------------------------------------------------
00a1c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
00a1c                 | ' 
00a1c                 | ' sub interpret
00a1c                 | _interpret
00a1c     21 4A 05 F6 | 	mov	COUNT_, #33
00a20     A8 00 A0 FD | 	call	#pushregs_
00a24     01 00 00 FF 
00a28     48 F0 07 F1 | 	add	ptra, ##584
00a2c     2D 00 00 FF 
00a30     E0 E5 05 F1 | 	add	objptr, ##23520
00a34     F2 1E 02 FB | 	rdlong	local01, objptr
00a38     04 E4 05 F1 | 	add	objptr, #4
00a3c     F2 1E 62 FC | 	wrlong	local01, objptr
00a40     04 E4 05 F1 | 	add	objptr, #4
00a44     FF FF FF FF 
00a48     F2 FE 6B FC | 	wrlong	##-1, objptr
00a4c     00 20 06 F6 | 	mov	local02, #0
00a50     13 00 00 FF 
00a54     58 E4 05 F1 | 	add	objptr, ##9816
00a58     F2 00 68 FC | 	wrlong	#0, objptr
00a5c     41 00 00 FF 
00a60     40 E4 85 F1 | 	sub	objptr, ##33344
00a64     00 22 06 F6 | 	mov	local03, #0
00a68                 | LR__0020
00a68                 | ' 
00a68                 | ' ' ---------------------------------------------------  Pass 1: Split the line to parts, detect and concatenate strings
00a68                 | ' 
00a68                 | ' fullline$=line$: cont=-1  : linenum=0 : lineptr=0 : err=0
00a68                 | ' 
00a68                 | ' 108 for i=0 to 125: separators(i)=0 :next i
00a68     00 24 06 F6 | 	mov	local04, #0
00a6c     20 4E 05 F1 | 	add	fp, #32
00a70     97 0E 48 FB | 	callpa	#(@LR__0022-@LR__0021)>>2,fcache_load_ptr_
00a74                 | LR__0021
00a74     12 27 02 F6 | 	mov	local05, local04
00a78     02 26 66 F0 | 	shl	local05, #2
00a7c     A7 26 02 F1 | 	add	local05, fp
00a80     13 01 68 FC | 	wrlong	#0, local05
00a84     01 24 06 F1 | 	add	local04, #1
00a88     7E 24 56 F2 | 	cmps	local04, #126 wc
00a8c     E4 FF 9F CD |  if_b	jmp	#LR__0021
00a90                 | LR__0022
00a90     20 4E 85 F1 | 	sub	fp, #32
00a94                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
00a94     00 24 06 F6 | 	mov	local04, #0
00a98     2B 00 00 FF 
00a9c     D0 E5 05 F1 | 	add	objptr, ##22480
00aa0     97 20 48 FB | 	callpa	#(@LR__0024-@LR__0023)>>2,fcache_load_ptr_
00aa4                 | LR__0023
00aa4     12 1F 02 F6 | 	mov	local01, local04
00aa8     03 1E 66 F0 | 	shl	local01, #3
00aac     F2 1E 02 F1 | 	add	local01, objptr
00ab0     29 01 00 FF 
00ab4     6A 17 06 F6 | 	mov	arg03, ##@LR__4087
00ab8     0F 17 62 FC | 	wrlong	arg03, local01
00abc     12 1F 02 F6 | 	mov	local01, local04
00ac0     03 1E 66 F0 | 	shl	local01, #3
00ac4     F2 28 02 F6 | 	mov	local06, objptr
00ac8     F2 1E 02 F1 | 	add	local01, objptr
00acc     00 2A 06 F6 | 	mov	local07, #0
00ad0     04 1E 06 F1 | 	add	local01, #4
00ad4     0F 01 68 FC | 	wrlong	#0, local01
00ad8     01 24 06 F1 | 	add	local04, #1
00adc     7E 24 56 F2 | 	cmps	local04, #126 wc
00ae0     C0 FF 9F CD |  if_b	jmp	#LR__0023
00ae4                 | LR__0024
00ae4     02 00 00 FF 
00ae8     10 E4 05 F1 | 	add	objptr, ##1040
00aec     F2 12 02 FB | 	rdlong	arg01, objptr
00af0     2D 00 00 FF 
00af4     E0 E5 85 F1 | 	sub	objptr, ##23520
00af8     40 7C B1 FD | 	call	#__system__RTrim_S
00afc     FD 12 02 F6 | 	mov	arg01, result1
00b00     78 7B B1 FD | 	call	#__system__LTrim_S
00b04     2D 00 00 FF 
00b08     E0 E5 05 F1 | 	add	objptr, ##23520
00b0c     F2 FA 61 FC | 	wrlong	result1, objptr
00b10     29 01 00 FF 
00b14     6B 1F 06 F6 | 	mov	local01, ##@LR__4088
00b18     24 00 00 FF 
00b1c     88 E4 05 F1 | 	add	objptr, ##18568
00b20     F2 1E 62 FC | 	wrlong	local01, objptr
00b24     24 00 00 FF 
00b28     88 E4 85 F1 | 	sub	objptr, ##18568
00b2c     F2 12 02 FB | 	rdlong	arg01, objptr
00b30     2D 00 00 FF 
00b34     E0 E5 85 F1 | 	sub	objptr, ##23520
00b38     09 2D 02 F6 | 	mov	local08, arg01
00b3c     97 06 48 FB | 	callpa	#(@LR__0026-@LR__0025)>>2,fcache_load_ptr_
00b40                 | LR__0025
00b40     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b44     01 2C 06 51 |  if_ne	add	local08, #1
00b48     F4 FF 9F 5D |  if_ne	jmp	#LR__0025
00b4c                 | LR__0026
00b4c     09 2D 8A F1 | 	sub	local08, arg01 wz
00b50     52 00 00 FF 
00b54     6C E4 05 F1 | 	add	objptr, ##42092
00b58     F2 2C 62 FC | 	wrlong	local08, objptr
00b5c                 | ' if l=0 then goto 101
00b5c     52 00 00 FF 
00b60     6C E4 85 F1 | 	sub	objptr, ##42092
00b64     88 1D 90 AD |  if_e	jmp	#LR__0126
00b68     52 00 00 FF 
00b6c     70 E4 05 F1 | 	add	objptr, ##42096
00b70     F2 00 68 FC | 	wrlong	#0, objptr
00b74                 | ' ' before we split the line, we have to find colons that are inside a string,,,,
00b74                 | ' for i=1 to len(line$)
00b74     01 24 06 F6 | 	mov	local04, #1
00b78     24 00 00 FF 
00b7c     90 E4 85 F1 | 	sub	objptr, ##18576
00b80     F2 12 02 FB | 	rdlong	arg01, objptr
00b84     2D 00 00 FF 
00b88     E0 E5 85 F1 | 	sub	objptr, ##23520
00b8c     09 2D 02 F6 | 	mov	local08, arg01
00b90     97 06 48 FB | 	callpa	#(@LR__0028-@LR__0027)>>2,fcache_load_ptr_
00b94                 | LR__0027
00b94     16 FB C9 FA | 	rdbyte	result1, local08 wz
00b98     01 2C 06 51 |  if_ne	add	local08, #1
00b9c     F4 FF 9F 5D |  if_ne	jmp	#LR__0027
00ba0                 | LR__0028
00ba0     09 2D 82 F1 | 	sub	local08, arg01
00ba4     16 2F 02 F6 | 	mov	local09, local08
00ba8     01 2E 06 F1 | 	add	local09, #1
00bac                 | LR__0029
00bac     17 25 52 F2 | 	cmps	local04, local09 wc
00bb0     00 01 90 3D |  if_ae	jmp	#LR__0032
00bb4                 | ' 
00bb4                 | '   if mid$(line$,i,1)="""" andalso d=0 then 
00bb4     2D 00 00 FF 
00bb8     E0 E5 05 F1 | 	add	objptr, ##23520
00bbc     F2 12 02 FB | 	rdlong	arg01, objptr
00bc0     2D 00 00 FF 
00bc4     E0 E5 85 F1 | 	sub	objptr, ##23520
00bc8     12 15 02 F6 | 	mov	arg02, local04
00bcc     01 16 06 F6 | 	mov	arg03, #1
00bd0     4C 78 B1 FD | 	call	#__system__Mid_S
00bd4     FD 12 02 F6 | 	mov	arg01, result1
00bd8     29 01 00 FF 
00bdc     6C 15 06 F6 | 	mov	arg02, ##@LR__4089
00be0     3C 57 B1 FD | 	call	#__system___string_cmp
00be4     00 FA 0D F2 | 	cmp	result1, #0 wz
00be8     2C 00 90 5D |  if_ne	jmp	#LR__0030
00bec     52 00 00 FF 
00bf0     70 E4 05 F1 | 	add	objptr, ##42096
00bf4     F2 26 0A FB | 	rdlong	local05, objptr wz
00bf8     52 00 00 FF 
00bfc     70 E4 85 F1 | 	sub	objptr, ##42096
00c00     52 00 00 AF 
00c04     70 E4 05 A1 |  if_e	add	objptr, ##42096
00c08     F2 02 68 AC |  if_e	wrlong	#1, objptr
00c0c     52 00 00 AF 
00c10     70 E4 85 A1 |  if_e	sub	objptr, ##42096
00c14     60 00 90 AD |  if_e	jmp	#LR__0031
00c18                 | LR__0030
00c18     2D 00 00 FF 
00c1c     E0 E5 05 F1 | 	add	objptr, ##23520
00c20     F2 12 02 FB | 	rdlong	arg01, objptr
00c24     2D 00 00 FF 
00c28     E0 E5 85 F1 | 	sub	objptr, ##23520
00c2c     12 15 02 F6 | 	mov	arg02, local04
00c30     01 16 06 F6 | 	mov	arg03, #1
00c34     E8 77 B1 FD | 	call	#__system__Mid_S
00c38     FD 12 02 F6 | 	mov	arg01, result1
00c3c     29 01 00 FF 
00c40     6E 15 06 F6 | 	mov	arg02, ##@LR__4090
00c44     D8 56 B1 FD | 	call	#__system___string_cmp
00c48     00 FA 0D F2 | 	cmp	result1, #0 wz
00c4c     52 00 00 AF 
00c50     70 E4 05 A1 |  if_e	add	objptr, ##42096
00c54     F2 26 02 AB |  if_e	rdlong	local05, objptr
00c58     52 00 00 AF 
00c5c     70 E4 85 A1 |  if_e	sub	objptr, ##42096
00c60     01 26 0E A2 |  if_e	cmp	local05, #1 wz
00c64     52 00 00 AF 
00c68     70 E4 05 A1 |  if_e	add	objptr, ##42096
00c6c     F2 00 68 AC |  if_e	wrlong	#0, objptr
00c70     52 00 00 AF 
00c74     70 E4 85 A1 |  if_e	sub	objptr, ##42096
00c78                 | LR__0031
00c78     12 1F 02 F6 | 	mov	local01, local04
00c7c     03 1E 66 F0 | 	shl	local01, #3
00c80     2B 00 00 FF 
00c84     D0 E5 05 F1 | 	add	objptr, ##22480
00c88     F2 28 02 F6 | 	mov	local06, objptr
00c8c     F2 1E 02 F1 | 	add	local01, objptr
00c90     26 00 00 FF 
00c94     A0 E4 05 F1 | 	add	objptr, ##19616
00c98     F2 2A 02 FB | 	rdlong	local07, objptr
00c9c     52 00 00 FF 
00ca0     70 E4 85 F1 | 	sub	objptr, ##42096
00ca4     04 1E 06 F1 | 	add	local01, #4
00ca8     0F 2B 62 FC | 	wrlong	local07, local01
00cac     01 24 06 F1 | 	add	local04, #1
00cb0     F8 FE 9F FD | 	jmp	#LR__0029
00cb4                 | LR__0032
00cb4     01 24 06 F6 | 	mov	local04, #1
00cb8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop
00cb8                 | LR__0033
00cb8     2D 00 00 FF 
00cbc     E0 E5 05 F1 | 	add	objptr, ##23520
00cc0     F2 12 02 FB | 	rdlong	arg01, objptr
00cc4     2D 00 00 FF 
00cc8     E0 E5 85 F1 | 	sub	objptr, ##23520
00ccc     12 15 02 F6 | 	mov	arg02, local04
00cd0     01 16 06 F6 | 	mov	arg03, #1
00cd4     48 77 B1 FD | 	call	#__system__Mid_S
00cd8     FD 12 02 F6 | 	mov	arg01, result1
00cdc     29 01 00 FF 
00ce0     70 31 06 F6 | 	mov	local10, ##@LR__4091
00ce4     18 15 02 F6 | 	mov	arg02, local10
00ce8     34 56 B1 FD | 	call	#__system___string_cmp
00cec     00 FA 0D F2 | 	cmp	result1, #0 wz
00cf0     34 00 90 5D |  if_ne	jmp	#LR__0034
00cf4     12 29 02 F6 | 	mov	local06, local04
00cf8     03 28 66 F0 | 	shl	local06, #3
00cfc     2B 00 00 FF 
00d00     D0 E5 05 F1 | 	add	objptr, ##22480
00d04     F2 2A 02 F6 | 	mov	local07, objptr
00d08     F2 28 02 F1 | 	add	local06, objptr
00d0c     04 28 06 F1 | 	add	local06, #4
00d10     14 33 02 FB | 	rdlong	local11, local06
00d14     04 28 86 F1 | 	sub	local06, #4
00d18     19 35 0A F6 | 	mov	local12, local11 wz
00d1c     2B 00 00 FF 
00d20     D0 E5 85 F1 | 	sub	objptr, ##22480
00d24     24 00 90 AD |  if_e	jmp	#LR__0035
00d28                 | LR__0034
00d28     52 00 00 FF 
00d2c     6C E4 05 F1 | 	add	objptr, ##42092
00d30     F2 36 02 FB | 	rdlong	local13, objptr
00d34     52 00 00 FF 
00d38     6C E4 85 F1 | 	sub	objptr, ##42092
00d3c     1B 39 02 F6 | 	mov	local14, local13
00d40     1C 25 52 F2 | 	cmps	local04, local14 wc
00d44     01 24 06 C1 |  if_b	add	local04, #1
00d48     6C FF 9F CD |  if_b	jmp	#LR__0033
00d4c                 | LR__0035
00d4c                 | ' 
00d4c                 | ' 'let d=instr(1,line$,":"): if d>0 andalso d<len(line$) andalso lparts(d).token=0  then let rest$=trim$(right$(line$,len(line$)-d)):line$=trim$(left$(line$,d-1)) else rest$=""  
00d4c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 
00d4c     52 00 00 FF 
00d50     6C E4 05 F1 | 	add	objptr, ##42092
00d54     F2 1E 02 FB | 	rdlong	local01, objptr
00d58     52 00 00 FF 
00d5c     6C E4 85 F1 | 	sub	objptr, ##42092
00d60     0F 25 52 F2 | 	cmps	local04, local01 wc
00d64     A4 00 90 3D |  if_ae	jmp	#LR__0038
00d68     2D 00 00 FF 
00d6c     E0 E5 05 F1 | 	add	objptr, ##23520
00d70     F2 2A 02 FB | 	rdlong	local07, objptr
00d74     2D 00 00 FF 
00d78     E0 E5 85 F1 | 	sub	objptr, ##23520
00d7c     15 13 02 F6 | 	mov	arg01, local07
00d80     09 2D 02 F6 | 	mov	local08, arg01
00d84     97 06 48 FB | 	callpa	#(@LR__0037-@LR__0036)>>2,fcache_load_ptr_
00d88                 | LR__0036
00d88     16 FB C9 FA | 	rdbyte	result1, local08 wz
00d8c     01 2C 06 51 |  if_ne	add	local08, #1
00d90     F4 FF 9F 5D |  if_ne	jmp	#LR__0036
00d94                 | LR__0037
00d94     09 2D 82 F1 | 	sub	local08, arg01
00d98     16 15 02 F6 | 	mov	arg02, local08
00d9c     12 15 82 F1 | 	sub	arg02, local04
00da0     15 13 02 F6 | 	mov	arg01, local07
00da4     E8 75 B1 FD | 	call	#__system__Right_S
00da8     FD 12 02 F6 | 	mov	arg01, result1
00dac     8C 79 B1 FD | 	call	#__system__RTrim_S
00db0     FD 12 02 F6 | 	mov	arg01, result1
00db4     C4 78 B1 FD | 	call	#__system__LTrim_S
00db8     52 00 00 FF 
00dbc     74 E4 05 F1 | 	add	objptr, ##42100
00dc0     F2 FA 61 FC | 	wrlong	result1, objptr
00dc4     24 00 00 FF 
00dc8     94 E4 85 F1 | 	sub	objptr, ##18580
00dcc     F2 12 02 FB | 	rdlong	arg01, objptr
00dd0     2D 00 00 FF 
00dd4     E0 E5 85 F1 | 	sub	objptr, ##23520
00dd8     01 24 86 F1 | 	sub	local04, #1
00ddc     12 15 02 F6 | 	mov	arg02, local04
00de0     24 75 B1 FD | 	call	#__system__Left_S
00de4     FD 12 02 F6 | 	mov	arg01, result1
00de8     50 79 B1 FD | 	call	#__system__RTrim_S
00dec     FD 12 02 F6 | 	mov	arg01, result1
00df0     88 78 B1 FD | 	call	#__system__LTrim_S
00df4     2D 00 00 FF 
00df8     E0 E5 05 F1 | 	add	objptr, ##23520
00dfc     F2 FA 61 FC | 	wrlong	result1, objptr
00e00     2D 00 00 FF 
00e04     E0 E5 85 F1 | 	sub	objptr, ##23520
00e08     1C 00 90 FD | 	jmp	#LR__0039
00e0c                 | LR__0038
00e0c     29 01 00 FF 
00e10     72 1F 06 F6 | 	mov	local01, ##@LR__4092
00e14     52 00 00 FF 
00e18     74 E4 05 F1 | 	add	objptr, ##42100
00e1c     F2 1E 62 FC | 	wrlong	local01, objptr
00e20     52 00 00 FF 
00e24     74 E4 85 F1 | 	sub	objptr, ##42100
00e28                 | LR__0039
00e28                 | ' 'print "line$=";line$
00e28                 | ' 'print "rest$=";rest$
00e28                 | ' 
00e28                 | ' 
00e28                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not last part
00e28     2D 00 00 FF 
00e2c     E8 E5 05 F1 | 	add	objptr, ##23528
00e30     F2 1E 02 FB | 	rdlong	local01, objptr
00e34     2D 00 00 FF 
00e38     E8 E5 85 F1 | 	sub	objptr, ##23528
00e3c     FF FF 7F FF 
00e40     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00e44     3C 00 90 5D |  if_ne	jmp	#LR__0040
00e48     52 00 00 FF 
00e4c     74 E4 05 F1 | 	add	objptr, ##42100
00e50     F2 12 02 FB | 	rdlong	arg01, objptr
00e54     52 00 00 FF 
00e58     74 E4 85 F1 | 	sub	objptr, ##42100
00e5c     29 01 00 FF 
00e60     73 15 06 F6 | 	mov	arg02, ##@LR__4093
00e64     B8 54 B1 FD | 	call	#__system___string_cmp
00e68     00 FA 0D F2 | 	cmp	result1, #0 wz
00e6c     2D 00 00 5F 
00e70     E8 E5 05 51 |  if_ne	add	objptr, ##23528
00e74     F2 00 68 5C |  if_ne	wrlong	#0, objptr
00e78     2D 00 00 5F 
00e7c     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
00e80     08 01 90 5D |  if_ne	jmp	#LR__0044
00e84                 | LR__0040
00e84                 | ' if cont=-1 andalso rest$="" then cont=3 : goto 107		' this is the first AND last part
00e84     2D 00 00 FF 
00e88     E8 E5 05 F1 | 	add	objptr, ##23528
00e8c     F2 1E 02 FB | 	rdlong	local01, objptr
00e90     2D 00 00 FF 
00e94     E8 E5 85 F1 | 	sub	objptr, ##23528
00e98     FF FF 7F FF 
00e9c     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
00ea0     3C 00 90 5D |  if_ne	jmp	#LR__0041
00ea4     52 00 00 FF 
00ea8     74 E4 05 F1 | 	add	objptr, ##42100
00eac     F2 12 02 FB | 	rdlong	arg01, objptr
00eb0     52 00 00 FF 
00eb4     74 E4 85 F1 | 	sub	objptr, ##42100
00eb8     29 01 00 FF 
00ebc     74 15 06 F6 | 	mov	arg02, ##@LR__4094
00ec0     5C 54 B1 FD | 	call	#__system___string_cmp
00ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
00ec8     2D 00 00 AF 
00ecc     E8 E5 05 A1 |  if_e	add	objptr, ##23528
00ed0     F2 06 68 AC |  if_e	wrlong	#3, objptr
00ed4     2D 00 00 AF 
00ed8     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
00edc     AC 00 90 AD |  if_e	jmp	#LR__0044
00ee0                 | LR__0041
00ee0                 | ' if cont=4 andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
00ee0     2D 00 00 FF 
00ee4     E8 E5 05 F1 | 	add	objptr, ##23528
00ee8     F2 1E 02 FB | 	rdlong	local01, objptr
00eec     2D 00 00 FF 
00ef0     E8 E5 85 F1 | 	sub	objptr, ##23528
00ef4     04 1E 0E F2 | 	cmp	local01, #4 wz
00ef8     3C 00 90 5D |  if_ne	jmp	#LR__0042
00efc     52 00 00 FF 
00f00     74 E4 05 F1 | 	add	objptr, ##42100
00f04     F2 12 02 FB | 	rdlong	arg01, objptr
00f08     52 00 00 FF 
00f0c     74 E4 85 F1 | 	sub	objptr, ##42100
00f10     29 01 00 FF 
00f14     75 15 06 F6 | 	mov	arg02, ##@LR__4095
00f18     04 54 B1 FD | 	call	#__system___string_cmp
00f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
00f20     2D 00 00 5F 
00f24     E8 E5 05 51 |  if_ne	add	objptr, ##23528
00f28     F2 02 68 5C |  if_ne	wrlong	#1, objptr
00f2c     2D 00 00 5F 
00f30     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
00f34     54 00 90 5D |  if_ne	jmp	#LR__0044
00f38                 | LR__0042
00f38                 | ' if cont=4 andalso rest$="" then cont=2 :goto 107		' this is the last, and not the first, part
00f38     2D 00 00 FF 
00f3c     E8 E5 05 F1 | 	add	objptr, ##23528
00f40     F2 1E 02 FB | 	rdlong	local01, objptr
00f44     2D 00 00 FF 
00f48     E8 E5 85 F1 | 	sub	objptr, ##23528
00f4c     04 1E 0E F2 | 	cmp	local01, #4 wz
00f50     38 00 90 5D |  if_ne	jmp	#LR__0043
00f54     52 00 00 FF 
00f58     74 E4 05 F1 | 	add	objptr, ##42100
00f5c     F2 12 02 FB | 	rdlong	arg01, objptr
00f60     52 00 00 FF 
00f64     74 E4 85 F1 | 	sub	objptr, ##42100
00f68     29 01 00 FF 
00f6c     76 15 06 F6 | 	mov	arg02, ##@LR__4096
00f70     AC 53 B1 FD | 	call	#__system___string_cmp
00f74     00 FA 0D F2 | 	cmp	result1, #0 wz
00f78     2D 00 00 AF 
00f7c     E8 E5 05 A1 |  if_e	add	objptr, ##23528
00f80     F2 04 68 AC |  if_e	wrlong	#2, objptr
00f84     2D 00 00 AF 
00f88     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
00f8c                 | LR__0043
00f8c                 | LR__0044
00f8c     20 4E 05 F1 | 	add	fp, #32
00f90     A7 00 68 FC | 	wrlong	#0, fp
00f94     20 4E 85 F1 | 	sub	fp, #32
00f98     00 24 06 F6 | 	mov	local04, #0
00f9c     01 3A 06 F6 | 	mov	local15, #1
00fa0                 | ' 
00fa0                 | ' ' 1b: find separators
00fa0                 | ' 
00fa0                 | ' 107
00fa0                 | ' separators(0)=0
00fa0                 | ' i=0: j=1 : do: i+=1 : let c$=mid$(line$,i,1) 
00fa0                 | LR__0045
00fa0     01 24 06 F1 | 	add	local04, #1
00fa4     2D 00 00 FF 
00fa8     E0 E5 05 F1 | 	add	objptr, ##23520
00fac     F2 12 02 FB | 	rdlong	arg01, objptr
00fb0     2D 00 00 FF 
00fb4     E0 E5 85 F1 | 	sub	objptr, ##23520
00fb8     12 15 02 F6 | 	mov	arg02, local04
00fbc     01 16 06 F6 | 	mov	arg03, #1
00fc0     5C 74 B1 FD | 	call	#__system__Mid_S
00fc4     52 00 00 FF 
00fc8     78 E4 05 F1 | 	add	objptr, ##42104
00fcc     F2 FA 61 FC | 	wrlong	result1, objptr
00fd0                 | ' if isseparator(c$) then separators(j)=i: j+=1 
00fd0     FD 12 02 F6 | 	mov	arg01, result1
00fd4     52 00 00 FF 
00fd8     78 E4 85 F1 | 	sub	objptr, ##42104
00fdc     1C 1C B0 FD | 	call	#_isseparator
00fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
00fe4     1C 00 90 AD |  if_e	jmp	#LR__0046
00fe8     1D 27 02 F6 | 	mov	local05, local15
00fec     02 26 66 F0 | 	shl	local05, #2
00ff0     20 4E 05 F1 | 	add	fp, #32
00ff4     A7 26 02 F1 | 	add	local05, fp
00ff8     13 25 62 FC | 	wrlong	local04, local05
00ffc     01 3A 06 F1 | 	add	local15, #1
01000     20 4E 85 F1 | 	sub	fp, #32
01004                 | LR__0046
01004     52 00 00 FF 
01008     6C E4 05 F1 | 	add	objptr, ##42092
0100c     F2 1E 02 FB | 	rdlong	local01, objptr
01010     52 00 00 FF 
01014     6C E4 85 F1 | 	sub	objptr, ##42092
01018     0F 25 5A F2 | 	cmps	local04, local01 wcz
0101c     80 FF 9F ED |  if_be	jmp	#LR__0045
01020     1D 27 02 F6 | 	mov	local05, local15
01024     02 26 66 F0 | 	shl	local05, #2
01028     20 4E 05 F1 | 	add	fp, #32
0102c     A7 26 02 F1 | 	add	local05, fp
01030     13 25 62 FC | 	wrlong	local04, local05
01034     00 3C 06 F6 | 	mov	local16, #0
01038                 | ' for i=0 to j-1 
01038     00 24 06 F6 | 	mov	local04, #0
0103c     1D 3F 02 F6 | 	mov	local17, local15
01040     20 4E 85 F1 | 	sub	fp, #32
01044                 | LR__0047
01044     1F 25 52 F2 | 	cmps	local04, local17 wc
01048     88 01 90 3D |  if_ae	jmp	#LR__0051
0104c     12 27 02 F6 | 	mov	local05, local04
01050     02 26 66 F0 | 	shl	local05, #2
01054     20 4E 05 F1 | 	add	fp, #32
01058     A7 26 02 F1 | 	add	local05, fp
0105c     13 29 02 FB | 	rdlong	local06, local05
01060     52 00 00 FF 
01064     80 E4 05 F1 | 	add	objptr, ##42112
01068     F2 28 62 FC | 	wrlong	local06, objptr
0106c     12 27 02 F6 | 	mov	local05, local04
01070     01 26 06 F1 | 	add	local05, #1
01074     02 26 66 F0 | 	shl	local05, #2
01078     A7 30 02 F6 | 	mov	local10, fp
0107c     A7 26 02 F1 | 	add	local05, fp
01080     13 29 02 FB | 	rdlong	local06, local05
01084     04 E4 05 F1 | 	add	objptr, #4
01088     F2 28 62 FC | 	wrlong	local06, objptr
0108c                 | '   if p1>0 then let p$=mid$(line$,p1,1):  if   p$<>"" then lparts(k).part$=p$ : k+=1 
0108c     04 E4 85 F1 | 	sub	objptr, #4
01090     F2 1E 02 FB | 	rdlong	local01, objptr
01094     52 00 00 FF 
01098     80 E4 85 F1 | 	sub	objptr, ##42112
0109c     01 1E 56 F2 | 	cmps	local01, #1 wc
010a0     20 4E 85 F1 | 	sub	fp, #32
010a4     84 00 90 CD |  if_b	jmp	#LR__0049
010a8     2D 00 00 FF 
010ac     E0 E5 05 F1 | 	add	objptr, ##23520
010b0     F2 12 02 FB | 	rdlong	arg01, objptr
010b4     24 00 00 FF 
010b8     A0 E4 05 F1 | 	add	objptr, ##18592
010bc     F2 14 02 FB | 	rdlong	arg02, objptr
010c0     52 00 00 FF 
010c4     80 E4 85 F1 | 	sub	objptr, ##42112
010c8     01 16 06 F6 | 	mov	arg03, #1
010cc     50 73 B1 FD | 	call	#__system__Mid_S
010d0     52 00 00 FF 
010d4     88 E4 05 F1 | 	add	objptr, ##42120
010d8     F2 FA 61 FC | 	wrlong	result1, objptr
010dc     52 00 00 FF 
010e0     88 E4 85 F1 | 	sub	objptr, ##42120
010e4     FD 12 02 F6 | 	mov	arg01, result1
010e8     29 01 00 FF 
010ec     77 15 06 F6 | 	mov	arg02, ##@LR__4097
010f0     2C 52 B1 FD | 	call	#__system___string_cmp
010f4     00 FA 0D F2 | 	cmp	result1, #0 wz
010f8     30 00 90 AD |  if_e	jmp	#LR__0048
010fc     1E 31 02 F6 | 	mov	local10, local16
01100     03 30 66 F0 | 	shl	local10, #3
01104     2B 00 00 FF 
01108     D0 E5 05 F1 | 	add	objptr, ##22480
0110c     F2 30 02 F1 | 	add	local10, objptr
01110     26 00 00 FF 
01114     B8 E4 05 F1 | 	add	objptr, ##19640
01118     F2 2A 02 FB | 	rdlong	local07, objptr
0111c     52 00 00 FF 
01120     88 E4 85 F1 | 	sub	objptr, ##42120
01124     18 2B 62 FC | 	wrlong	local07, local10
01128     01 3C 06 F1 | 	add	local16, #1
0112c                 | LR__0048
0112c                 | LR__0049
0112c     2D 00 00 FF 
01130     E0 E5 05 F1 | 	add	objptr, ##23520
01134     F2 12 02 FB | 	rdlong	arg01, objptr
01138     24 00 00 FF 
0113c     A0 E4 05 F1 | 	add	objptr, ##18592
01140     F2 14 02 FB | 	rdlong	arg02, objptr
01144     01 14 06 F1 | 	add	arg02, #1
01148     04 E4 05 F1 | 	add	objptr, #4
0114c     F2 16 02 FB | 	rdlong	arg03, objptr
01150     04 E4 85 F1 | 	sub	objptr, #4
01154     F2 32 02 FB | 	rdlong	local11, objptr
01158     52 00 00 FF 
0115c     80 E4 85 F1 | 	sub	objptr, ##42112
01160     19 35 02 F6 | 	mov	local12, local11
01164     1A 17 82 F1 | 	sub	arg03, local12
01168     01 16 86 F1 | 	sub	arg03, #1
0116c     B0 72 B1 FD | 	call	#__system__Mid_S
01170     52 00 00 FF 
01174     88 E4 05 F1 | 	add	objptr, ##42120
01178     F2 FA 61 FC | 	wrlong	result1, objptr
0117c     52 00 00 FF 
01180     88 E4 85 F1 | 	sub	objptr, ##42120
01184     FD 12 02 F6 | 	mov	arg01, result1
01188     29 01 00 FF 
0118c     78 15 06 F6 | 	mov	arg02, ##@LR__4098
01190     8C 51 B1 FD | 	call	#__system___string_cmp
01194     00 FA 0D F2 | 	cmp	result1, #0 wz
01198     30 00 90 AD |  if_e	jmp	#LR__0050
0119c     1E 31 02 F6 | 	mov	local10, local16
011a0     03 30 66 F0 | 	shl	local10, #3
011a4     2B 00 00 FF 
011a8     D0 E5 05 F1 | 	add	objptr, ##22480
011ac     F2 30 02 F1 | 	add	local10, objptr
011b0     26 00 00 FF 
011b4     B8 E4 05 F1 | 	add	objptr, ##19640
011b8     F2 2A 02 FB | 	rdlong	local07, objptr
011bc     52 00 00 FF 
011c0     88 E4 85 F1 | 	sub	objptr, ##42120
011c4     18 2B 62 FC | 	wrlong	local07, local10
011c8     01 3C 06 F1 | 	add	local16, #1
011cc                 | LR__0050
011cc     01 24 06 F1 | 	add	local04, #1
011d0     70 FE 9F FD | 	jmp	#LR__0047
011d4                 | LR__0051
011d4     00 24 06 F6 | 	mov	local04, #0
011d8                 | ' 
011d8                 | ' ' 1d : find strings
011d8                 | ' 
011d8                 | ' i=0
011d8                 | ' do
011d8                 | LR__0052
011d8                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
011d8     12 29 02 F6 | 	mov	local06, local04
011dc     03 28 66 F0 | 	shl	local06, #3
011e0     2B 00 00 FF 
011e4     D0 E5 05 F1 | 	add	objptr, ##22480
011e8     F2 28 02 F1 | 	add	local06, objptr
011ec     14 13 02 FB | 	rdlong	arg01, local06
011f0     29 01 00 FF 
011f4     79 15 06 F6 | 	mov	arg02, ##@LR__4099
011f8     2B 00 00 FF 
011fc     D0 E5 85 F1 | 	sub	objptr, ##22480
01200     1C 51 B1 FD | 	call	#__system___string_cmp
01204     00 FA 0D F2 | 	cmp	result1, #0 wz
01208     01 24 06 51 |  if_ne	add	local04, #1
0120c     50 01 90 5D |  if_ne	jmp	#LR__0057
01210     12 41 02 F6 | 	mov	local18, local04
01214                 | LR__0053
01214     12 31 02 F6 | 	mov	local10, local04
01218     01 30 06 F1 | 	add	local10, #1
0121c     03 30 66 F0 | 	shl	local10, #3
01220     2B 00 00 FF 
01224     D0 E5 05 F1 | 	add	objptr, ##22480
01228     F2 30 02 F1 | 	add	local10, objptr
0122c     18 33 02 FB | 	rdlong	local11, local10
01230     26 00 00 FF 
01234     B8 E4 05 F1 | 	add	objptr, ##19640
01238     F2 32 62 FC | 	wrlong	local11, objptr
0123c     20 31 02 F6 | 	mov	local10, local18
01240     03 30 66 F0 | 	shl	local10, #3
01244     26 00 00 FF 
01248     B8 E4 85 F1 | 	sub	objptr, ##19640
0124c     F2 30 02 F1 | 	add	local10, objptr
01250     20 39 02 F6 | 	mov	local14, local18
01254     03 38 66 F0 | 	shl	local14, #3
01258     F2 38 02 F1 | 	add	local14, objptr
0125c     1C 13 02 FB | 	rdlong	arg01, local14
01260     2B 00 00 FF 
01264     D0 E5 85 F1 | 	sub	objptr, ##22480
01268     19 35 02 F6 | 	mov	local12, local11
0126c     1A 15 02 F6 | 	mov	arg02, local12
01270     E0 50 B1 FD | 	call	#__system___string_concat
01274     18 FB 61 FC | 	wrlong	result1, local10
01278     12 3B 02 F6 | 	mov	local15, local04
0127c     01 3A 06 F1 | 	add	local15, #1
01280     1E 43 02 F6 | 	mov	local19, local16
01284     01 42 06 F1 | 	add	local19, #1
01288     97 3C 48 FB | 	callpa	#(@LR__0055-@LR__0054)>>2,fcache_load_ptr_
0128c                 | LR__0054
0128c     21 3B 52 F2 | 	cmps	local15, local19 wc
01290     70 00 90 3D |  if_ae	jmp	#LR__0056
01294     1D 29 02 F6 | 	mov	local06, local15
01298     01 28 06 F1 | 	add	local06, #1
0129c     03 28 66 F0 | 	shl	local06, #3
012a0     2B 00 00 FF 
012a4     D0 E5 05 F1 | 	add	objptr, ##22480
012a8     F2 28 02 F1 | 	add	local06, objptr
012ac     14 1F 02 FB | 	rdlong	local01, local06
012b0     1D 2B 02 F6 | 	mov	local07, local15
012b4     01 2A 06 F1 | 	add	local07, #1
012b8     03 2A 66 F0 | 	shl	local07, #3
012bc     F2 2A 02 F1 | 	add	local07, objptr
012c0     04 2A 06 F1 | 	add	local07, #4
012c4     15 27 02 FB | 	rdlong	local05, local07
012c8     1D 2B 02 F6 | 	mov	local07, local15
012cc     03 2A 66 F0 | 	shl	local07, #3
012d0     F2 34 02 F6 | 	mov	local12, objptr
012d4     F2 2A 02 F1 | 	add	local07, objptr
012d8     15 1F 62 FC | 	wrlong	local01, local07
012dc     1D 33 02 F6 | 	mov	local11, local15
012e0     19 37 02 F6 | 	mov	local13, local11
012e4     03 36 66 F0 | 	shl	local13, #3
012e8     F2 36 02 F1 | 	add	local13, objptr
012ec     04 36 06 F1 | 	add	local13, #4
012f0     1B 27 62 FC | 	wrlong	local05, local13
012f4     01 3A 06 F1 | 	add	local15, #1
012f8     2B 00 00 FF 
012fc     D0 E5 85 F1 | 	sub	objptr, ##22480
01300     88 FF 9F FD | 	jmp	#LR__0054
01304                 | LR__0055
01304                 | LR__0056
01304     01 3C 86 F1 | 	sub	local16, #1
01308     52 00 00 FF 
0130c     88 E4 05 F1 | 	add	objptr, ##42120
01310     F2 12 02 FB | 	rdlong	arg01, objptr
01314     52 00 00 FF 
01318     88 E4 85 F1 | 	sub	objptr, ##42120
0131c     29 01 00 FF 
01320     7B 15 06 F6 | 	mov	arg02, ##@LR__4100
01324     F8 4F B1 FD | 	call	#__system___string_cmp
01328     00 FA 0D F2 | 	cmp	result1, #0 wz
0132c     1E 25 52 52 |  if_ne	cmps	local04, local16 wc
01330     E0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0053
01334                 | '   if p$<>"""" then k+=1:i+=1
01334     52 00 00 FF 
01338     88 E4 05 F1 | 	add	objptr, ##42120
0133c     F2 12 02 FB | 	rdlong	arg01, objptr
01340     52 00 00 FF 
01344     88 E4 85 F1 | 	sub	objptr, ##42120
01348     29 01 00 FF 
0134c     7D 15 06 F6 | 	mov	arg02, ##@LR__4101
01350     CC 4F B1 FD | 	call	#__system___string_cmp
01354     00 FA 0D F2 | 	cmp	result1, #0 wz
01358     01 3C 06 51 |  if_ne	add	local16, #1
0135c     01 24 06 51 |  if_ne	add	local04, #1
01360                 | LR__0057
01360     1E 25 52 F2 | 	cmps	local04, local16 wc
01364     70 FE 9F CD |  if_b	jmp	#LR__0052
01368     00 24 06 F6 | 	mov	local04, #0
0136c                 | ' 
0136c                 | ' ' 1e : concatenate strings if "" detected between
0136c                 | '  
0136c                 | ' i=0 : do
0136c                 | LR__0058
0136c                 | '  if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
0136c     12 29 02 F6 | 	mov	local06, local04
01370     03 28 66 F0 | 	shl	local06, #3
01374     2B 00 00 FF 
01378     D0 E5 05 F1 | 	add	objptr, ##22480
0137c     F2 28 02 F1 | 	add	local06, objptr
01380     14 13 02 FB | 	rdlong	arg01, local06
01384     01 14 06 F6 | 	mov	arg02, #1
01388     2B 00 00 FF 
0138c     D0 E5 85 F1 | 	sub	objptr, ##22480
01390     FC 6F B1 FD | 	call	#__system__Right_S
01394     FD 12 02 F6 | 	mov	arg01, result1
01398     29 01 00 FF 
0139c     7F 15 06 F6 | 	mov	arg02, ##@LR__4102
013a0     7C 4F B1 FD | 	call	#__system___string_cmp
013a4     00 FA 0D F2 | 	cmp	result1, #0 wz
013a8     78 01 90 5D |  if_ne	jmp	#LR__0064
013ac     12 2B 02 F6 | 	mov	local07, local04
013b0     01 2A 06 F1 | 	add	local07, #1
013b4     03 2A 66 F0 | 	shl	local07, #3
013b8     2B 00 00 FF 
013bc     D0 E5 05 F1 | 	add	objptr, ##22480
013c0     F2 34 02 F6 | 	mov	local12, objptr
013c4     F2 2A 02 F1 | 	add	local07, objptr
013c8     15 13 02 FB | 	rdlong	arg01, local07
013cc     01 14 06 F6 | 	mov	arg02, #1
013d0     2B 00 00 FF 
013d4     D0 E5 85 F1 | 	sub	objptr, ##22480
013d8     2C 6F B1 FD | 	call	#__system__Left_S
013dc     FD 12 02 F6 | 	mov	arg01, result1
013e0     29 01 00 FF 
013e4     81 15 06 F6 | 	mov	arg02, ##@LR__4103
013e8     34 4F B1 FD | 	call	#__system___string_cmp
013ec     00 FA 0D F2 | 	cmp	result1, #0 wz
013f0     30 01 90 5D |  if_ne	jmp	#LR__0064
013f4     12 31 02 F6 | 	mov	local10, local04
013f8     03 30 66 F0 | 	shl	local10, #3
013fc     2B 00 00 FF 
01400     D0 E5 05 F1 | 	add	objptr, ##22480
01404     F2 30 02 F1 | 	add	local10, objptr
01408     12 39 02 F6 | 	mov	local14, local04
0140c     03 38 66 F0 | 	shl	local14, #3
01410     F2 38 02 F1 | 	add	local14, objptr
01414     1C 2B 02 FB | 	rdlong	local07, local14
01418     12 37 02 F6 | 	mov	local13, local04
0141c     01 36 06 F1 | 	add	local13, #1
01420     03 36 66 F0 | 	shl	local13, #3
01424     F2 36 02 F1 | 	add	local13, objptr
01428     1B 35 02 FB | 	rdlong	local12, local13
0142c     12 45 02 F6 | 	mov	local20, local04
01430     01 44 06 F1 | 	add	local20, #1
01434     22 47 02 F6 | 	mov	local21, local20
01438     03 46 66 F0 | 	shl	local21, #3
0143c     F2 48 02 F6 | 	mov	local22, objptr
01440     F2 46 02 F1 | 	add	local21, objptr
01444     23 13 02 FB | 	rdlong	arg01, local21
01448     2B 00 00 FF 
0144c     D0 E5 85 F1 | 	sub	objptr, ##22480
01450     09 2D 02 F6 | 	mov	local08, arg01
01454     97 06 48 FB | 	callpa	#(@LR__0060-@LR__0059)>>2,fcache_load_ptr_
01458                 | LR__0059
01458     16 FB C9 FA | 	rdbyte	result1, local08 wz
0145c     01 2C 06 51 |  if_ne	add	local08, #1
01460     F4 FF 9F 5D |  if_ne	jmp	#LR__0059
01464                 | LR__0060
01464     09 2D 82 F1 | 	sub	local08, arg01
01468     16 33 02 F6 | 	mov	local11, local08
0146c     01 32 86 F1 | 	sub	local11, #1
01470     1A 13 02 F6 | 	mov	arg01, local12
01474     19 15 02 F6 | 	mov	arg02, local11
01478     14 6F B1 FD | 	call	#__system__Right_S
0147c     FD 34 02 F6 | 	mov	local12, result1
01480     15 13 02 F6 | 	mov	arg01, local07
01484     1A 15 02 F6 | 	mov	arg02, local12
01488     C8 4E B1 FD | 	call	#__system___string_concat
0148c     18 FB 61 FC | 	wrlong	result1, local10
01490                 | '    for j=i+1 to k: lparts(j)=lparts(j+1): next j  
01490     12 3B 02 F6 | 	mov	local15, local04
01494     01 3A 06 F1 | 	add	local15, #1
01498     1E 4B 02 F6 | 	mov	local23, local16
0149c     01 4A 06 F1 | 	add	local23, #1
014a0     97 3C 48 FB | 	callpa	#(@LR__0062-@LR__0061)>>2,fcache_load_ptr_
014a4                 | LR__0061
014a4     25 3B 52 F2 | 	cmps	local15, local23 wc
014a8     70 00 90 3D |  if_ae	jmp	#LR__0063
014ac     1D 29 02 F6 | 	mov	local06, local15
014b0     01 28 06 F1 | 	add	local06, #1
014b4     03 28 66 F0 | 	shl	local06, #3
014b8     2B 00 00 FF 
014bc     D0 E5 05 F1 | 	add	objptr, ##22480
014c0     F2 28 02 F1 | 	add	local06, objptr
014c4     14 1F 02 FB | 	rdlong	local01, local06
014c8     1D 2B 02 F6 | 	mov	local07, local15
014cc     01 2A 06 F1 | 	add	local07, #1
014d0     03 2A 66 F0 | 	shl	local07, #3
014d4     F2 2A 02 F1 | 	add	local07, objptr
014d8     04 2A 06 F1 | 	add	local07, #4
014dc     15 27 02 FB | 	rdlong	local05, local07
014e0     1D 2B 02 F6 | 	mov	local07, local15
014e4     03 2A 66 F0 | 	shl	local07, #3
014e8     F2 34 02 F6 | 	mov	local12, objptr
014ec     F2 2A 02 F1 | 	add	local07, objptr
014f0     15 1F 62 FC | 	wrlong	local01, local07
014f4     1D 33 02 F6 | 	mov	local11, local15
014f8     19 37 02 F6 | 	mov	local13, local11
014fc     03 36 66 F0 | 	shl	local13, #3
01500     F2 36 02 F1 | 	add	local13, objptr
01504     04 36 06 F1 | 	add	local13, #4
01508     1B 27 62 FC | 	wrlong	local05, local13
0150c     01 3A 06 F1 | 	add	local15, #1
01510     2B 00 00 FF 
01514     D0 E5 85 F1 | 	sub	objptr, ##22480
01518     88 FF 9F FD | 	jmp	#LR__0061
0151c                 | LR__0062
0151c                 | LR__0063
0151c     01 24 86 F1 | 	sub	local04, #1
01520     01 3C 86 F1 | 	sub	local16, #1
01524                 | LR__0064
01524     01 24 06 F1 | 	add	local04, #1
01528     1E 25 52 F2 | 	cmps	local04, local16 wc
0152c     3C FE 9F CD |  if_b	jmp	#LR__0058
01530     00 24 06 F6 | 	mov	local04, #0
01534                 | '  
01534                 | ' ' 1e2: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
01534                 | '  
01534                 | ' i=0 : do
01534                 | LR__0065
01534     12 31 02 F6 | 	mov	local10, local04
01538     03 30 66 F0 | 	shl	local10, #3
0153c     2B 00 00 FF 
01540     D0 E5 05 F1 | 	add	objptr, ##22480
01544     F2 30 02 F1 | 	add	local10, objptr
01548     18 2B 02 FB | 	rdlong	local07, local10
0154c     26 00 00 FF 
01550     C0 E4 05 F1 | 	add	objptr, ##19648
01554     F2 2A 62 FC | 	wrlong	local07, objptr
01558     12 31 02 F6 | 	mov	local10, local04
0155c     01 30 06 F1 | 	add	local10, #1
01560     03 30 66 F0 | 	shl	local10, #3
01564     26 00 00 FF 
01568     C0 E4 85 F1 | 	sub	objptr, ##19648
0156c     F2 30 02 F1 | 	add	local10, objptr
01570     18 2B 02 FB | 	rdlong	local07, local10
01574     26 00 00 FF 
01578     C4 E4 05 F1 | 	add	objptr, ##19652
0157c     F2 2A 62 FC | 	wrlong	local07, objptr
01580                 | '   if ((s1$=">" orelse s1$=">" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
01580     04 E4 85 F1 | 	sub	objptr, #4
01584     F2 12 02 FB | 	rdlong	arg01, objptr
01588     52 00 00 FF 
0158c     90 E4 85 F1 | 	sub	objptr, ##42128
01590     29 01 00 FF 
01594     83 15 06 F6 | 	mov	arg02, ##@LR__4104
01598     84 4D B1 FD | 	call	#__system___string_cmp
0159c     00 FA 0D F2 | 	cmp	result1, #0 wz
015a0     04 01 90 AD |  if_e	jmp	#LR__0066
015a4     52 00 00 FF 
015a8     90 E4 05 F1 | 	add	objptr, ##42128
015ac     F2 12 02 FB | 	rdlong	arg01, objptr
015b0     52 00 00 FF 
015b4     90 E4 85 F1 | 	sub	objptr, ##42128
015b8     29 01 00 FF 
015bc     85 15 06 F6 | 	mov	arg02, ##@LR__4105
015c0     5C 4D B1 FD | 	call	#__system___string_cmp
015c4     FD 26 0A F6 | 	mov	local05, result1 wz
015c8     DC 00 90 AD |  if_e	jmp	#LR__0066
015cc     52 00 00 FF 
015d0     90 E4 05 F1 | 	add	objptr, ##42128
015d4     F2 12 02 FB | 	rdlong	arg01, objptr
015d8     52 00 00 FF 
015dc     90 E4 85 F1 | 	sub	objptr, ##42128
015e0     29 01 00 FF 
015e4     87 15 06 F6 | 	mov	arg02, ##@LR__4106
015e8     34 4D B1 FD | 	call	#__system___string_cmp
015ec     00 FA 0D F2 | 	cmp	result1, #0 wz
015f0     B4 00 90 AD |  if_e	jmp	#LR__0066
015f4     52 00 00 FF 
015f8     90 E4 05 F1 | 	add	objptr, ##42128
015fc     F2 12 02 FB | 	rdlong	arg01, objptr
01600     52 00 00 FF 
01604     90 E4 85 F1 | 	sub	objptr, ##42128
01608     29 01 00 FF 
0160c     89 35 06 F6 | 	mov	local12, ##@LR__4107
01610     1A 15 02 F6 | 	mov	arg02, local12
01614     08 4D B1 FD | 	call	#__system___string_cmp
01618     00 FA 0D F2 | 	cmp	result1, #0 wz
0161c     88 00 90 AD |  if_e	jmp	#LR__0066
01620     52 00 00 FF 
01624     90 E4 05 F1 | 	add	objptr, ##42128
01628     F2 12 02 FB | 	rdlong	arg01, objptr
0162c     52 00 00 FF 
01630     90 E4 85 F1 | 	sub	objptr, ##42128
01634     29 01 00 FF 
01638     8B 33 06 F6 | 	mov	local11, ##@LR__4108
0163c     19 35 02 F6 | 	mov	local12, local11
01640     1A 15 02 F6 | 	mov	arg02, local12
01644     D8 4C B1 FD | 	call	#__system___string_cmp
01648     00 FA 0D F2 | 	cmp	result1, #0 wz
0164c     58 00 90 AD |  if_e	jmp	#LR__0066
01650     52 00 00 FF 
01654     90 E4 05 F1 | 	add	objptr, ##42128
01658     F2 12 02 FB | 	rdlong	arg01, objptr
0165c     52 00 00 FF 
01660     90 E4 85 F1 | 	sub	objptr, ##42128
01664     29 01 00 FF 
01668     8D 33 06 F6 | 	mov	local11, ##@LR__4109
0166c     19 15 02 F6 | 	mov	arg02, local11
01670     AC 4C B1 FD | 	call	#__system___string_cmp
01674     FD 34 0A F6 | 	mov	local12, result1 wz
01678     2C 00 90 AD |  if_e	jmp	#LR__0066
0167c     52 00 00 FF 
01680     90 E4 05 F1 | 	add	objptr, ##42128
01684     F2 12 02 FB | 	rdlong	arg01, objptr
01688     52 00 00 FF 
0168c     90 E4 85 F1 | 	sub	objptr, ##42128
01690     29 01 00 FF 
01694     8F 39 06 F6 | 	mov	local14, ##@LR__4110
01698     1C 15 02 F6 | 	mov	arg02, local14
0169c     80 4C B1 FD | 	call	#__system___string_cmp
016a0     FD 32 0A F6 | 	mov	local11, result1 wz
016a4     30 00 90 5D |  if_ne	jmp	#LR__0067
016a8                 | LR__0066
016a8     52 00 00 FF 
016ac     94 E4 05 F1 | 	add	objptr, ##42132
016b0     F2 12 02 FB | 	rdlong	arg01, objptr
016b4     52 00 00 FF 
016b8     94 E4 85 F1 | 	sub	objptr, ##42132
016bc     29 01 00 FF 
016c0     91 4D 06 F6 | 	mov	local24, ##@LR__4111
016c4     26 37 02 F6 | 	mov	local13, local24
016c8     1B 15 02 F6 | 	mov	arg02, local13
016cc     50 4C B1 FD | 	call	#__system___string_cmp
016d0     FD 38 0A F6 | 	mov	local14, result1 wz
016d4     18 01 90 AD |  if_e	jmp	#LR__0070
016d8                 | LR__0067
016d8     52 00 00 FF 
016dc     90 E4 05 F1 | 	add	objptr, ##42128
016e0     F2 12 02 FB | 	rdlong	arg01, objptr
016e4     52 00 00 FF 
016e8     90 E4 85 F1 | 	sub	objptr, ##42128
016ec     29 01 00 FF 
016f0     93 4D 06 F6 | 	mov	local24, ##@LR__4112
016f4     26 15 02 F6 | 	mov	arg02, local24
016f8     24 4C B1 FD | 	call	#__system___string_cmp
016fc     FD 36 0A F6 | 	mov	local13, result1 wz
01700     30 00 90 5D |  if_ne	jmp	#LR__0068
01704     52 00 00 FF 
01708     94 E4 05 F1 | 	add	objptr, ##42132
0170c     F2 12 02 FB | 	rdlong	arg01, objptr
01710     52 00 00 FF 
01714     94 E4 85 F1 | 	sub	objptr, ##42132
01718     29 01 00 FF 
0171c     95 47 06 F6 | 	mov	local21, ##@LR__4113
01720     23 45 02 F6 | 	mov	local20, local21
01724     22 15 02 F6 | 	mov	arg02, local20
01728     F4 4B B1 FD | 	call	#__system___string_cmp
0172c     FD 4C 0A F6 | 	mov	local24, result1 wz
01730     BC 00 90 AD |  if_e	jmp	#LR__0070
01734                 | LR__0068
01734     52 00 00 FF 
01738     90 E4 05 F1 | 	add	objptr, ##42128
0173c     F2 12 02 FB | 	rdlong	arg01, objptr
01740     52 00 00 FF 
01744     90 E4 85 F1 | 	sub	objptr, ##42128
01748     29 01 00 FF 
0174c     97 47 06 F6 | 	mov	local21, ##@LR__4114
01750     23 15 02 F6 | 	mov	arg02, local21
01754     C8 4B B1 FD | 	call	#__system___string_cmp
01758     FD 44 0A F6 | 	mov	local20, result1 wz
0175c     30 00 90 5D |  if_ne	jmp	#LR__0069
01760     52 00 00 FF 
01764     94 E4 05 F1 | 	add	objptr, ##42132
01768     F2 12 02 FB | 	rdlong	arg01, objptr
0176c     52 00 00 FF 
01770     94 E4 85 F1 | 	sub	objptr, ##42132
01774     29 01 00 FF 
01778     99 4F 06 F6 | 	mov	local25, ##@LR__4115
0177c     27 49 02 F6 | 	mov	local22, local25
01780     24 15 02 F6 | 	mov	arg02, local22
01784     98 4B B1 FD | 	call	#__system___string_cmp
01788     FD 46 0A F6 | 	mov	local21, result1 wz
0178c     60 00 90 AD |  if_e	jmp	#LR__0070
01790                 | LR__0069
01790     52 00 00 FF 
01794     90 E4 05 F1 | 	add	objptr, ##42128
01798     F2 12 02 FB | 	rdlong	arg01, objptr
0179c     52 00 00 FF 
017a0     90 E4 85 F1 | 	sub	objptr, ##42128
017a4     29 01 00 FF 
017a8     9B 51 06 F6 | 	mov	local26, ##@LR__4116
017ac     28 4F 02 F6 | 	mov	local25, local26
017b0     27 15 02 F6 | 	mov	arg02, local25
017b4     68 4B B1 FD | 	call	#__system___string_cmp
017b8     FD 48 0A F6 | 	mov	local22, result1 wz
017bc     10 01 90 5D |  if_ne	jmp	#LR__0074
017c0     52 00 00 FF 
017c4     94 E4 05 F1 | 	add	objptr, ##42132
017c8     F2 12 02 FB | 	rdlong	arg01, objptr
017cc     52 00 00 FF 
017d0     94 E4 85 F1 | 	sub	objptr, ##42132
017d4     29 01 00 FF 
017d8     9D 53 06 F6 | 	mov	local27, ##@LR__4117
017dc     29 51 02 F6 | 	mov	local26, local27
017e0     28 15 02 F6 | 	mov	arg02, local26
017e4     38 4B B1 FD | 	call	#__system___string_cmp
017e8     FD 4E 0A F6 | 	mov	local25, result1 wz
017ec     E0 00 90 5D |  if_ne	jmp	#LR__0074
017f0                 | LR__0070
017f0     12 31 02 F6 | 	mov	local10, local04
017f4     03 30 66 F0 | 	shl	local10, #3
017f8     2B 00 00 FF 
017fc     D0 E5 05 F1 | 	add	objptr, ##22480
01800     F2 30 02 F1 | 	add	local10, objptr
01804     26 00 00 FF 
01808     C0 E4 05 F1 | 	add	objptr, ##19648
0180c     F2 12 02 FB | 	rdlong	arg01, objptr
01810     04 E4 05 F1 | 	add	objptr, #4
01814     F2 32 02 FB | 	rdlong	local11, objptr
01818     52 00 00 FF 
0181c     94 E4 85 F1 | 	sub	objptr, ##42132
01820     19 35 02 F6 | 	mov	local12, local11
01824     1A 15 02 F6 | 	mov	arg02, local12
01828     28 4B B1 FD | 	call	#__system___string_concat
0182c     18 FB 61 FC | 	wrlong	result1, local10
01830                 | '     lparts(i).part$=s1$+s2$
01830                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
01830     12 3B 02 F6 | 	mov	local15, local04
01834     01 3A 06 F1 | 	add	local15, #1
01838     1E 55 02 F6 | 	mov	local28, local16
0183c     01 54 06 F1 | 	add	local28, #1
01840     97 42 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
01844                 | LR__0071
01844     2A 3B 52 F2 | 	cmps	local15, local28 wc
01848     7C 00 90 3D |  if_ae	jmp	#LR__0073
0184c     1D 29 02 F6 | 	mov	local06, local15
01850     01 28 06 F1 | 	add	local06, #1
01854     03 28 66 F0 | 	shl	local06, #3
01858     2B 00 00 FF 
0185c     D0 E5 05 F1 | 	add	objptr, ##22480
01860     F2 28 02 F1 | 	add	local06, objptr
01864     14 1F 02 FB | 	rdlong	local01, local06
01868     1D 2B 02 F6 | 	mov	local07, local15
0186c     01 2A 06 F1 | 	add	local07, #1
01870     03 2A 66 F0 | 	shl	local07, #3
01874     F2 2A 02 F1 | 	add	local07, objptr
01878     04 2A 06 F1 | 	add	local07, #4
0187c     15 27 02 FB | 	rdlong	local05, local07
01880     1D 2B 02 F6 | 	mov	local07, local15
01884     03 2A 66 F0 | 	shl	local07, #3
01888     F2 34 02 F6 | 	mov	local12, objptr
0188c     F2 2A 02 F1 | 	add	local07, objptr
01890     15 1F 62 FC | 	wrlong	local01, local07
01894     1D 33 02 F6 | 	mov	local11, local15
01898     19 39 02 F6 | 	mov	local14, local11
0189c     1C 37 02 F6 | 	mov	local13, local14
018a0     03 36 66 F0 | 	shl	local13, #3
018a4     F2 4C 02 F6 | 	mov	local24, objptr
018a8     F2 36 02 F1 | 	add	local13, objptr
018ac     04 36 06 F1 | 	add	local13, #4
018b0     1B 27 62 FC | 	wrlong	local05, local13
018b4     04 36 86 F1 | 	sub	local13, #4
018b8     01 3A 06 F1 | 	add	local15, #1
018bc     2B 00 00 FF 
018c0     D0 E5 85 F1 | 	sub	objptr, ##22480
018c4     7C FF 9F FD | 	jmp	#LR__0071
018c8                 | LR__0072
018c8                 | LR__0073
018c8     01 24 86 F1 | 	sub	local04, #1
018cc     01 3C 86 F1 | 	sub	local16, #1
018d0                 | LR__0074
018d0     01 24 06 F1 | 	add	local04, #1
018d4     1E 25 52 F2 | 	cmps	local04, local16 wc
018d8     58 FC 9F CD |  if_b	jmp	#LR__0065
018dc                 | '  
018dc                 | ' ' 1f : now remove parts that are spaces
018dc                 | ' 
018dc                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
018dc     00 24 06 F6 | 	mov	local04, #0
018e0     1E 57 02 F6 | 	mov	local29, local16
018e4     01 56 06 F1 | 	add	local29, #1
018e8                 | LR__0075
018e8     2B 25 52 F2 | 	cmps	local04, local29 wc
018ec     50 00 90 3D |  if_ae	jmp	#LR__0076
018f0     12 31 02 F6 | 	mov	local10, local04
018f4     03 30 66 F0 | 	shl	local10, #3
018f8     2B 00 00 FF 
018fc     D0 E5 05 F1 | 	add	objptr, ##22480
01900     F2 30 02 F1 | 	add	local10, objptr
01904     12 35 02 F6 | 	mov	local12, local04
01908     1A 33 02 F6 | 	mov	local11, local12
0190c     19 39 02 F6 | 	mov	local14, local11
01910     03 38 66 F0 | 	shl	local14, #3
01914     F2 36 02 F6 | 	mov	local13, objptr
01918     F2 38 02 F1 | 	add	local14, objptr
0191c     1C 13 02 FB | 	rdlong	arg01, local14
01920     2B 00 00 FF 
01924     D0 E5 85 F1 | 	sub	objptr, ##22480
01928     10 6E B1 FD | 	call	#__system__RTrim_S
0192c     FD 12 02 F6 | 	mov	arg01, result1
01930     48 6D B1 FD | 	call	#__system__LTrim_S
01934     18 FB 61 FC | 	wrlong	result1, local10
01938     01 24 06 F1 | 	add	local04, #1
0193c     A8 FF 9F FD | 	jmp	#LR__0075
01940                 | LR__0076
01940     00 24 06 F6 | 	mov	local04, #0
01944     97 8A 48 FB | 	callpa	#(@LR__0083-@LR__0077)>>2,fcache_load_ptr_
01948                 | ' 
01948                 | ' i=0
01948                 | ' do 
01948                 | LR__0077
01948                 | '   if len(lparts(i).part$)=0 then 
01948     12 29 02 F6 | 	mov	local06, local04
0194c     03 28 66 F0 | 	shl	local06, #3
01950     2B 00 00 FF 
01954     D0 E5 05 F1 | 	add	objptr, ##22480
01958     F2 2A 02 F6 | 	mov	local07, objptr
0195c     F2 28 02 F1 | 	add	local06, objptr
01960     14 13 02 FB | 	rdlong	arg01, local06
01964     2B 00 00 FF 
01968     D0 E5 85 F1 | 	sub	objptr, ##22480
0196c     09 2D 02 F6 | 	mov	local08, arg01
01970                 | LR__0078
01970     16 FB C9 FA | 	rdbyte	result1, local08 wz
01974     01 2C 06 51 |  if_ne	add	local08, #1
01978     F4 FF 9F 5D |  if_ne	jmp	#LR__0078
0197c     09 2D 8A F1 | 	sub	local08, arg01 wz
01980     C4 00 90 5D |  if_ne	jmp	#LR__0082
01984                 | '     if i=k-1 then k-=1  :  exit
01984     1E 1F 02 F6 | 	mov	local01, local16
01988     01 1E 86 F1 | 	sub	local01, #1
0198c     0F 25 0A F2 | 	cmp	local04, local01 wz
01990     01 3C 86 A1 |  if_e	sub	local16, #1
01994     C4 00 90 AD |  if_e	jmp	#LR__0084
01998                 | '     if i<k-1 then 
01998     1E 1F 02 F6 | 	mov	local01, local16
0199c     01 1E 86 F1 | 	sub	local01, #1
019a0     0F 25 52 F2 | 	cmps	local04, local01 wc
019a4     A0 00 90 3D |  if_ae	jmp	#LR__0081
019a8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
019a8     12 3B 02 F6 | 	mov	local15, local04
019ac     1E 59 02 F6 | 	mov	local30, local16
019b0     01 58 86 F1 | 	sub	local30, #1
019b4                 | LR__0079
019b4     2C 3B 52 F2 | 	cmps	local15, local30 wc
019b8     80 00 90 3D |  if_ae	jmp	#LR__0080
019bc     1D 29 02 F6 | 	mov	local06, local15
019c0     01 28 06 F1 | 	add	local06, #1
019c4     03 28 66 F0 | 	shl	local06, #3
019c8     2B 00 00 FF 
019cc     D0 E5 05 F1 | 	add	objptr, ##22480
019d0     F2 28 02 F1 | 	add	local06, objptr
019d4     14 1F 02 FB | 	rdlong	local01, local06
019d8     1D 2B 02 F6 | 	mov	local07, local15
019dc     01 2A 06 F1 | 	add	local07, #1
019e0     03 2A 66 F0 | 	shl	local07, #3
019e4     F2 2A 02 F1 | 	add	local07, objptr
019e8     04 2A 06 F1 | 	add	local07, #4
019ec     15 27 02 FB | 	rdlong	local05, local07
019f0     1D 31 02 F6 | 	mov	local10, local15
019f4     18 2B 02 F6 | 	mov	local07, local10
019f8     03 2A 66 F0 | 	shl	local07, #3
019fc     F2 34 02 F6 | 	mov	local12, objptr
01a00     F2 2A 02 F1 | 	add	local07, objptr
01a04     15 1F 62 FC | 	wrlong	local01, local07
01a08     1D 33 02 F6 | 	mov	local11, local15
01a0c     19 39 02 F6 | 	mov	local14, local11
01a10     1C 37 02 F6 | 	mov	local13, local14
01a14     03 36 66 F0 | 	shl	local13, #3
01a18     F2 4C 02 F6 | 	mov	local24, objptr
01a1c     F2 36 02 F1 | 	add	local13, objptr
01a20     04 36 06 F1 | 	add	local13, #4
01a24     1B 27 62 FC | 	wrlong	local05, local13
01a28     04 36 86 F1 | 	sub	local13, #4
01a2c     01 3A 06 F1 | 	add	local15, #1
01a30     2B 00 00 FF 
01a34     D0 E5 85 F1 | 	sub	objptr, ##22480
01a38     78 FF 9F FD | 	jmp	#LR__0079
01a3c                 | LR__0080
01a3c     01 3C 86 F1 | 	sub	local16, #1
01a40                 | '       if i>0 then i-=1 
01a40     01 24 56 F2 | 	cmps	local04, #1 wc
01a44     01 24 86 31 |  if_ae	sub	local04, #1
01a48                 | LR__0081
01a48                 | LR__0082
01a48     01 24 06 F1 | 	add	local04, #1
01a4c     1E 1F 02 F6 | 	mov	local01, local16
01a50     01 1E 86 F1 | 	sub	local01, #1
01a54     0F 25 5A F2 | 	cmps	local04, local01 wcz
01a58     EC FE 9F ED |  if_be	jmp	#LR__0077
01a5c                 | LR__0083
01a5c                 | LR__0084
01a5c                 | ' 
01a5c                 | ' ' 1g: lowercase all that is not a string
01a5c                 | ' 
01a5c                 | ' for j=0 to k-1
01a5c     00 3A 06 F6 | 	mov	local15, #0
01a60     1E 5B 02 F6 | 	mov	local31, local16
01a64                 | LR__0085
01a64     2D 3B 52 F2 | 	cmps	local15, local31 wc
01a68     D0 00 90 3D |  if_ae	jmp	#LR__0088
01a6c                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
01a6c     1D 29 02 F6 | 	mov	local06, local15
01a70     03 28 66 F0 | 	shl	local06, #3
01a74     2B 00 00 FF 
01a78     D0 E5 05 F1 | 	add	objptr, ##22480
01a7c     F2 2A 02 F6 | 	mov	local07, objptr
01a80     F2 28 02 F1 | 	add	local06, objptr
01a84     14 13 02 FB | 	rdlong	arg01, local06
01a88     01 14 06 F6 | 	mov	arg02, #1
01a8c     2B 00 00 FF 
01a90     D0 E5 85 F1 | 	sub	objptr, ##22480
01a94     70 68 B1 FD | 	call	#__system__Left_S
01a98     FD 12 02 F6 | 	mov	arg01, result1
01a9c     29 01 00 FF 
01aa0     9F 15 06 F6 | 	mov	arg02, ##@LR__4118
01aa4     78 48 B1 FD | 	call	#__system___string_cmp
01aa8     00 FA 0D F2 | 	cmp	result1, #0 wz
01aac     44 00 90 5D |  if_ne	jmp	#LR__0086
01ab0     1D 2B 02 F6 | 	mov	local07, local15
01ab4     03 2A 66 F0 | 	shl	local07, #3
01ab8     2B 00 00 FF 
01abc     D0 E5 05 F1 | 	add	objptr, ##22480
01ac0     F2 34 02 F6 | 	mov	local12, objptr
01ac4     F2 2A 02 F1 | 	add	local07, objptr
01ac8     15 13 02 FB | 	rdlong	arg01, local07
01acc     01 14 06 F6 | 	mov	arg02, #1
01ad0     2B 00 00 FF 
01ad4     D0 E5 85 F1 | 	sub	objptr, ##22480
01ad8     B4 68 B1 FD | 	call	#__system__Right_S
01adc     FD 12 02 F6 | 	mov	arg01, result1
01ae0     29 01 00 FF 
01ae4     A1 15 06 F6 | 	mov	arg02, ##@LR__4119
01ae8     34 48 B1 FD | 	call	#__system___string_cmp
01aec     00 FA 0D F2 | 	cmp	result1, #0 wz
01af0     40 00 90 AD |  if_e	jmp	#LR__0087
01af4                 | LR__0086
01af4     1D 31 02 F6 | 	mov	local10, local15
01af8     03 30 66 F0 | 	shl	local10, #3
01afc     2B 00 00 FF 
01b00     D0 E5 05 F1 | 	add	objptr, ##22480
01b04     F2 30 02 F1 | 	add	local10, objptr
01b08     1D 35 02 F6 | 	mov	local12, local15
01b0c     1A 33 02 F6 | 	mov	local11, local12
01b10     19 39 02 F6 | 	mov	local14, local11
01b14     03 38 66 F0 | 	shl	local14, #3
01b18     F2 36 02 F6 | 	mov	local13, objptr
01b1c     F2 38 02 F1 | 	add	local14, objptr
01b20     1C 13 02 FB | 	rdlong	arg01, local14
01b24     2B 00 00 FF 
01b28     D0 E5 85 F1 | 	sub	objptr, ##22480
01b2c     8C 6A B1 FD | 	call	#__system__LCase_S
01b30     18 FB 61 FC | 	wrlong	result1, local10
01b34                 | LR__0087
01b34     01 3A 06 F1 | 	add	local15, #1
01b38     28 FF 9F FD | 	jmp	#LR__0085
01b3c                 | LR__0088
01b3c                 | ' 
01b3c                 | ' '                                                         for i=0 to k-1 : print lparts(i).part$,: next i : print
01b3c                 | ' 
01b3c                 | ' for i=0 to k: lparts(i).token=-1: next i
01b3c     00 24 06 F6 | 	mov	local04, #0
01b40     1E 5D 02 F6 | 	mov	local32, local16
01b44     01 5C 06 F1 | 	add	local32, #1
01b48     97 1C 48 FB | 	callpa	#(@LR__0090-@LR__0089)>>2,fcache_load_ptr_
01b4c                 | LR__0089
01b4c     2E 25 52 F2 | 	cmps	local04, local32 wc
01b50     30 00 90 3D |  if_ae	jmp	#LR__0091
01b54     12 31 02 F6 | 	mov	local10, local04
01b58     03 30 66 F0 | 	shl	local10, #3
01b5c     2B 00 00 FF 
01b60     D0 E5 05 F1 | 	add	objptr, ##22480
01b64     F2 30 02 F1 | 	add	local10, objptr
01b68     04 30 06 F1 | 	add	local10, #4
01b6c     FF FF FF FF 
01b70     18 FF 6B FC | 	wrlong	##-1, local10
01b74     01 24 06 F1 | 	add	local04, #1
01b78     2B 00 00 FF 
01b7c     D0 E5 85 F1 | 	sub	objptr, ##22480
01b80     C8 FF 9F FD | 	jmp	#LR__0089
01b84                 | LR__0090
01b84                 | LR__0091
01b84                 | ' 
01b84                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
01b84                 | ' 
01b84                 | ' if len(lparts(0).part$)=0 then goto 101				' empty line, nothing to do
01b84     2B 00 00 FF 
01b88     D0 E5 05 F1 | 	add	objptr, ##22480
01b8c     F2 12 02 FB | 	rdlong	arg01, objptr
01b90     2B 00 00 FF 
01b94     D0 E5 85 F1 | 	sub	objptr, ##22480
01b98     09 2D 02 F6 | 	mov	local08, arg01
01b9c     97 06 48 FB | 	callpa	#(@LR__0093-@LR__0092)>>2,fcache_load_ptr_
01ba0                 | LR__0092
01ba0     16 FB C9 FA | 	rdbyte	result1, local08 wz
01ba4     01 2C 06 51 |  if_ne	add	local08, #1
01ba8     F4 FF 9F 5D |  if_ne	jmp	#LR__0092
01bac                 | LR__0093
01bac     09 2D 8A F1 | 	sub	local08, arg01 wz
01bb0     3C 0D 90 AD |  if_e	jmp	#LR__0126
01bb4                 | ' 
01bb4                 | ' ' 2a find part types 
01bb4                 | ' 
01bb4                 | ' for i=0 to k-1
01bb4     00 24 06 F6 | 	mov	local04, #0
01bb8     1E 5F 02 F6 | 	mov	local33, local16
01bbc                 | LR__0094
01bbc     2F 25 52 F2 | 	cmps	local04, local33 wc
01bc0     9C 05 90 3D |  if_ae	jmp	#LR__0103
01bc4     12 31 02 F6 | 	mov	local10, local04
01bc8     03 30 66 F0 | 	shl	local10, #3
01bcc     2B 00 00 FF 
01bd0     D0 E5 05 F1 | 	add	objptr, ##22480
01bd4     F2 30 02 F1 | 	add	local10, objptr
01bd8     12 33 02 F6 | 	mov	local11, local04
01bdc     19 39 02 F6 | 	mov	local14, local11
01be0     1C 37 02 F6 | 	mov	local13, local14
01be4     03 36 66 F0 | 	shl	local13, #3
01be8     F2 4C 02 F6 | 	mov	local24, objptr
01bec     F2 36 02 F1 | 	add	local13, objptr
01bf0     1B 13 02 FB | 	rdlong	arg01, local13
01bf4     2B 00 00 FF 
01bf8     D0 E5 85 F1 | 	sub	objptr, ##22480
01bfc     FC 0F B0 FD | 	call	#_isseparator
01c00     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c04     04 30 06 F1 | 	add	local10, #4
01c08     18 FB 61 FC | 	wrlong	result1, local10
01c0c                 | ' lparts(i).token=isseparator(lparts(i).part$): if lparts(i).token>0 then goto 102
01c0c     12 31 02 F6 | 	mov	local10, local04
01c10     03 30 66 F0 | 	shl	local10, #3
01c14     2B 00 00 FF 
01c18     D0 E5 05 F1 | 	add	objptr, ##22480
01c1c     F2 30 02 F1 | 	add	local10, objptr
01c20     04 30 06 F1 | 	add	local10, #4
01c24     18 35 02 FB | 	rdlong	local12, local10
01c28     01 34 56 F2 | 	cmps	local12, #1 wc
01c2c     2B 00 00 FF 
01c30     D0 E5 85 F1 | 	sub	objptr, ##22480
01c34     20 05 90 3D |  if_ae	jmp	#LR__0102
01c38     12 31 02 F6 | 	mov	local10, local04
01c3c     03 30 66 F0 | 	shl	local10, #3
01c40     2B 00 00 FF 
01c44     D0 E5 05 F1 | 	add	objptr, ##22480
01c48     F2 30 02 F1 | 	add	local10, objptr
01c4c     12 33 02 F6 | 	mov	local11, local04
01c50     19 39 02 F6 | 	mov	local14, local11
01c54     1C 37 02 F6 | 	mov	local13, local14
01c58     03 36 66 F0 | 	shl	local13, #3
01c5c     F2 4C 02 F6 | 	mov	local24, objptr
01c60     F2 36 02 F1 | 	add	local13, objptr
01c64     1B 13 02 FB | 	rdlong	arg01, local13
01c68     2B 00 00 FF 
01c6c     D0 E5 85 F1 | 	sub	objptr, ##22480
01c70     A8 0C B0 FD | 	call	#_isoperator
01c74     FD FA E1 F8 | 	getbyte	result1, result1, #0
01c78     04 30 06 F1 | 	add	local10, #4
01c7c     18 FB 61 FC | 	wrlong	result1, local10
01c80                 | ' lparts(i).token=isoperator(lparts(i).part$): if lparts(i).token>0 then goto 102
01c80     12 31 02 F6 | 	mov	local10, local04
01c84     03 30 66 F0 | 	shl	local10, #3
01c88     2B 00 00 FF 
01c8c     D0 E5 05 F1 | 	add	objptr, ##22480
01c90     F2 30 02 F1 | 	add	local10, objptr
01c94     04 30 06 F1 | 	add	local10, #4
01c98     18 35 02 FB | 	rdlong	local12, local10
01c9c     01 34 56 F2 | 	cmps	local12, #1 wc
01ca0     2B 00 00 FF 
01ca4     D0 E5 85 F1 | 	sub	objptr, ##22480
01ca8     AC 04 90 3D |  if_ae	jmp	#LR__0102
01cac     12 31 02 F6 | 	mov	local10, local04
01cb0     03 30 66 F0 | 	shl	local10, #3
01cb4     2B 00 00 FF 
01cb8     D0 E5 05 F1 | 	add	objptr, ##22480
01cbc     F2 30 02 F1 | 	add	local10, objptr
01cc0     12 33 02 F6 | 	mov	local11, local04
01cc4     19 39 02 F6 | 	mov	local14, local11
01cc8     1C 37 02 F6 | 	mov	local13, local14
01ccc     03 36 66 F0 | 	shl	local13, #3
01cd0     F2 4C 02 F6 | 	mov	local24, objptr
01cd4     F2 36 02 F1 | 	add	local13, objptr
01cd8     1B 13 02 FB | 	rdlong	arg01, local13
01cdc     2B 00 00 FF 
01ce0     D0 E5 85 F1 | 	sub	objptr, ##22480
01ce4                 | ' 
01ce4                 | ' select case s
01ce4     2A 01 00 FF 
01ce8     6A 14 06 F6 | 	mov	arg02, ##@LR__4176
01cec     30 46 B1 FD | 	call	#__system___string_cmp
01cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
01cf4     1B FA 05 A6 |  if_e	mov	result1, #27
01cf8     00 FA 05 56 |  if_ne	mov	result1, #0
01cfc     FD FA E1 F8 | 	getbyte	result1, result1, #0
01d00     04 30 06 F1 | 	add	local10, #4
01d04     18 FB 61 FC | 	wrlong	result1, local10
01d08                 | ' lparts(i).token=isassign(lparts(i).part$) : if lparts(i).token>0 then goto 102
01d08     12 31 02 F6 | 	mov	local10, local04
01d0c     03 30 66 F0 | 	shl	local10, #3
01d10     2B 00 00 FF 
01d14     D0 E5 05 F1 | 	add	objptr, ##22480
01d18     F2 30 02 F1 | 	add	local10, objptr
01d1c     04 30 06 F1 | 	add	local10, #4
01d20     18 35 02 FB | 	rdlong	local12, local10
01d24     01 34 56 F2 | 	cmps	local12, #1 wc
01d28     2B 00 00 FF 
01d2c     D0 E5 85 F1 | 	sub	objptr, ##22480
01d30     24 04 90 3D |  if_ae	jmp	#LR__0102
01d34     12 31 02 F6 | 	mov	local10, local04
01d38     03 30 66 F0 | 	shl	local10, #3
01d3c     2B 00 00 FF 
01d40     D0 E5 05 F1 | 	add	objptr, ##22480
01d44     F2 30 02 F1 | 	add	local10, objptr
01d48     12 33 02 F6 | 	mov	local11, local04
01d4c     19 39 02 F6 | 	mov	local14, local11
01d50     1C 37 02 F6 | 	mov	local13, local14
01d54     03 36 66 F0 | 	shl	local13, #3
01d58     F2 4C 02 F6 | 	mov	local24, objptr
01d5c     F2 36 02 F1 | 	add	local13, objptr
01d60     1B 13 02 FB | 	rdlong	arg01, local13
01d64     2B 00 00 FF 
01d68     D0 E5 85 F1 | 	sub	objptr, ##22480
01d6c     8C 10 B0 FD | 	call	#_iscommand
01d70     FD FA E1 F8 | 	getbyte	result1, result1, #0
01d74     04 30 06 F1 | 	add	local10, #4
01d78     18 FB 61 FC | 	wrlong	result1, local10
01d7c                 | ' lparts(i).token=iscommand(lparts(i).part$): if lparts(i).token>0 then goto 102
01d7c     12 31 02 F6 | 	mov	local10, local04
01d80     03 30 66 F0 | 	shl	local10, #3
01d84     2B 00 00 FF 
01d88     D0 E5 05 F1 | 	add	objptr, ##22480
01d8c     F2 30 02 F1 | 	add	local10, objptr
01d90     04 30 06 F1 | 	add	local10, #4
01d94     18 35 02 FB | 	rdlong	local12, local10
01d98     01 34 56 F2 | 	cmps	local12, #1 wc
01d9c     2B 00 00 FF 
01da0     D0 E5 85 F1 | 	sub	objptr, ##22480
01da4     B0 03 90 3D |  if_ae	jmp	#LR__0102
01da8     12 31 02 F6 | 	mov	local10, local04
01dac     03 30 66 F0 | 	shl	local10, #3
01db0     2B 00 00 FF 
01db4     D0 E5 05 F1 | 	add	objptr, ##22480
01db8     F2 30 02 F1 | 	add	local10, objptr
01dbc     12 33 02 F6 | 	mov	local11, local04
01dc0     19 39 02 F6 | 	mov	local14, local11
01dc4     1C 37 02 F6 | 	mov	local13, local14
01dc8     03 36 66 F0 | 	shl	local13, #3
01dcc     F2 4C 02 F6 | 	mov	local24, objptr
01dd0     F2 36 02 F1 | 	add	local13, objptr
01dd4     1B 13 02 FB | 	rdlong	arg01, local13
01dd8     2B 00 00 FF 
01ddc     D0 E5 85 F1 | 	sub	objptr, ##22480
01de0     58 16 B0 FD | 	call	#_isfunction
01de4     FD FA E1 F8 | 	getbyte	result1, result1, #0
01de8     04 30 06 F1 | 	add	local10, #4
01dec     18 FB 61 FC | 	wrlong	result1, local10
01df0                 | ' lparts(i).token=isfunction(lparts(i).part$): if lparts(i).token>0 then goto 102
01df0     12 31 02 F6 | 	mov	local10, local04
01df4     03 30 66 F0 | 	shl	local10, #3
01df8     2B 00 00 FF 
01dfc     D0 E5 05 F1 | 	add	objptr, ##22480
01e00     F2 30 02 F1 | 	add	local10, objptr
01e04     04 30 06 F1 | 	add	local10, #4
01e08     18 35 02 FB | 	rdlong	local12, local10
01e0c     01 34 56 F2 | 	cmps	local12, #1 wc
01e10     2B 00 00 FF 
01e14     D0 E5 85 F1 | 	sub	objptr, ##22480
01e18     3C 03 90 3D |  if_ae	jmp	#LR__0102
01e1c     12 29 02 F6 | 	mov	local06, local04
01e20     03 28 66 F0 | 	shl	local06, #3
01e24     2B 00 00 FF 
01e28     D0 E5 05 F1 | 	add	objptr, ##22480
01e2c     F2 28 02 F1 | 	add	local06, objptr
01e30     14 13 02 FB | 	rdlong	arg01, local06
01e34     2B 00 00 FF 
01e38     D0 E5 85 F1 | 	sub	objptr, ##22480
01e3c     30 1A B0 FD | 	call	#_isnum
01e40     FD 1E 02 F6 | 	mov	local01, result1
01e44     52 00 00 FF 
01e48     98 E4 05 F1 | 	add	objptr, ##42136
01e4c     F2 1E 62 FC | 	wrlong	local01, objptr
01e50     12 29 02 F6 | 	mov	local06, local04
01e54     03 28 66 F0 | 	shl	local06, #3
01e58     26 00 00 FF 
01e5c     C8 E4 85 F1 | 	sub	objptr, ##19656
01e60     F2 28 02 F1 | 	add	local06, objptr
01e64     14 13 02 FB | 	rdlong	arg01, local06
01e68     2B 00 00 FF 
01e6c     D0 E5 85 F1 | 	sub	objptr, ##22480
01e70     D4 1C B0 FD | 	call	#_isint
01e74     FD 1E 02 F6 | 	mov	local01, result1
01e78     52 00 00 FF 
01e7c     9C E4 05 F1 | 	add	objptr, ##42140
01e80     F2 1E 62 FC | 	wrlong	local01, objptr
01e84     12 29 02 F6 | 	mov	local06, local04
01e88     03 28 66 F0 | 	shl	local06, #3
01e8c     26 00 00 FF 
01e90     CC E4 85 F1 | 	sub	objptr, ##19660
01e94     F2 2A 02 F6 | 	mov	local07, objptr
01e98     F2 28 02 F1 | 	add	local06, objptr
01e9c     14 13 02 FB | 	rdlong	arg01, local06
01ea0     2B 00 00 FF 
01ea4     D0 E5 85 F1 | 	sub	objptr, ##22480
01ea8     F4 1D B0 FD | 	call	#_isdec
01eac     52 00 00 FF 
01eb0     A0 E4 05 F1 | 	add	objptr, ##42144
01eb4     F2 FA 61 FC | 	wrlong	result1, objptr
01eb8                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal : goto 102 					' pure decimal for line num
01eb8     08 E4 85 F1 | 	sub	objptr, #8
01ebc     F2 1E 0A FB | 	rdlong	local01, objptr wz
01ec0     52 00 00 FF 
01ec4     98 E4 85 F1 | 	sub	objptr, ##42136
01ec8     60 00 90 AD |  if_e	jmp	#LR__0095
01ecc     52 00 00 FF 
01ed0     9C E4 05 F1 | 	add	objptr, ##42140
01ed4     F2 30 0A FB | 	rdlong	local10, objptr wz
01ed8     52 00 00 FF 
01edc     9C E4 85 F1 | 	sub	objptr, ##42140
01ee0     48 00 90 AD |  if_e	jmp	#LR__0095
01ee4     52 00 00 FF 
01ee8     A0 E4 05 F1 | 	add	objptr, ##42144
01eec     F2 34 0A FB | 	rdlong	local12, objptr wz
01ef0     52 00 00 FF 
01ef4     A0 E4 85 F1 | 	sub	objptr, ##42144
01ef8     30 00 90 AD |  if_e	jmp	#LR__0095
01efc     12 27 02 F6 | 	mov	local05, local04
01f00     13 31 02 F6 | 	mov	local10, local05
01f04     03 30 66 F0 | 	shl	local10, #3
01f08     2B 00 00 FF 
01f0c     D0 E5 05 F1 | 	add	objptr, ##22480
01f10     F2 30 02 F1 | 	add	local10, objptr
01f14     04 30 06 F1 | 	add	local10, #4
01f18     01 00 80 FF 
01f1c     18 01 68 FC | 	wrlong	##512, local10
01f20     2B 00 00 FF 
01f24     D0 E5 85 F1 | 	sub	objptr, ##22480
01f28     2C 02 90 FD | 	jmp	#LR__0102
01f2c                 | LR__0095
01f2c                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer : goto 102 				' integer
01f2c     52 00 00 FF 
01f30     98 E4 05 F1 | 	add	objptr, ##42136
01f34     F2 1E 0A FB | 	rdlong	local01, objptr wz
01f38     52 00 00 FF 
01f3c     98 E4 85 F1 | 	sub	objptr, ##42136
01f40     64 00 90 AD |  if_e	jmp	#LR__0096
01f44     52 00 00 FF 
01f48     9C E4 05 F1 | 	add	objptr, ##42140
01f4c     F2 30 0A FB | 	rdlong	local10, objptr wz
01f50     52 00 00 FF 
01f54     9C E4 85 F1 | 	sub	objptr, ##42140
01f58     52 00 00 5F 
01f5c     A0 E4 05 51 |  if_ne	add	objptr, ##42144
01f60     F2 34 02 5B |  if_ne	rdlong	local12, objptr
01f64     52 00 00 5F 
01f68     A0 E4 85 51 |  if_ne	sub	objptr, ##42144
01f6c     1A 2B 22 56 |  if_ne	not	local07, local12
01f70     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01f74     30 00 90 AD |  if_e	jmp	#LR__0096
01f78     12 27 02 F6 | 	mov	local05, local04
01f7c     13 31 02 F6 | 	mov	local10, local05
01f80     03 30 66 F0 | 	shl	local10, #3
01f84     2B 00 00 FF 
01f88     D0 E5 05 F1 | 	add	objptr, ##22480
01f8c     F2 30 02 F1 | 	add	local10, objptr
01f90     04 30 06 F1 | 	add	local10, #4
01f94     01 00 80 FF 
01f98     18 03 68 FC | 	wrlong	##513, local10
01f9c     2B 00 00 FF 
01fa0     D0 E5 85 F1 | 	sub	objptr, ##22480
01fa4     B0 01 90 FD | 	jmp	#LR__0102
01fa8                 | LR__0096
01fa8                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float :goto 102 				' float
01fa8     52 00 00 FF 
01fac     98 E4 05 F1 | 	add	objptr, ##42136
01fb0     F2 1E 0A FB | 	rdlong	local01, objptr wz
01fb4     52 00 00 FF 
01fb8     98 E4 85 F1 | 	sub	objptr, ##42136
01fbc     52 00 00 5F 
01fc0     9C E4 05 51 |  if_ne	add	objptr, ##42140
01fc4     F2 30 02 5B |  if_ne	rdlong	local10, objptr
01fc8     52 00 00 5F 
01fcc     9C E4 85 51 |  if_ne	sub	objptr, ##42140
01fd0     18 31 22 56 |  if_ne	not	local10, local10
01fd4     00 30 0E 52 |  if_ne	cmp	local10, #0 wz
01fd8     52 00 00 5F 
01fdc     A0 E4 05 51 |  if_ne	add	objptr, ##42144
01fe0     F2 34 02 5B |  if_ne	rdlong	local12, objptr
01fe4     52 00 00 5F 
01fe8     A0 E4 85 51 |  if_ne	sub	objptr, ##42144
01fec     1A 2B 22 56 |  if_ne	not	local07, local12
01ff0     00 2A 0E 52 |  if_ne	cmp	local07, #0 wz
01ff4     30 00 90 AD |  if_e	jmp	#LR__0097
01ff8     12 27 02 F6 | 	mov	local05, local04
01ffc     13 31 02 F6 | 	mov	local10, local05
02000     03 30 66 F0 | 	shl	local10, #3
02004     2B 00 00 FF 
02008     D0 E5 05 F1 | 	add	objptr, ##22480
0200c     F2 30 02 F1 | 	add	local10, objptr
02010     04 30 06 F1 | 	add	local10, #4
02014     01 00 80 FF 
02018     18 05 68 FC | 	wrlong	##514, local10
0201c     2B 00 00 FF 
02020     D0 E5 85 F1 | 	sub	objptr, ##22480
02024     30 01 90 FD | 	jmp	#LR__0102
02028                 | LR__0097
02028                 | ' 
02028                 | ' if isstring(lparts(i).part$) then 
02028     12 29 02 F6 | 	mov	local06, local04
0202c     03 28 66 F0 | 	shl	local06, #3
02030     2B 00 00 FF 
02034     D0 E5 05 F1 | 	add	objptr, ##22480
02038     F2 28 02 F1 | 	add	local06, objptr
0203c     14 13 02 FB | 	rdlong	arg01, local06
02040     2B 00 00 FF 
02044     D0 E5 85 F1 | 	sub	objptr, ##22480
02048     14 1D B0 FD | 	call	#_isstring
0204c     00 FA 0D F2 | 	cmp	result1, #0 wz
02050     A8 00 90 AD |  if_e	jmp	#LR__0100
02054     12 31 02 F6 | 	mov	local10, local04
02058     03 30 66 F0 | 	shl	local10, #3
0205c     2B 00 00 FF 
02060     D0 E5 05 F1 | 	add	objptr, ##22480
02064     F2 30 02 F1 | 	add	local10, objptr
02068     04 30 06 F1 | 	add	local10, #4
0206c     01 00 80 FF 
02070     18 07 68 FC | 	wrlong	##515, local10
02074     12 27 02 F6 | 	mov	local05, local04
02078     13 31 02 F6 | 	mov	local10, local05
0207c     03 30 66 F0 | 	shl	local10, #3
02080     F2 30 02 F1 | 	add	local10, objptr
02084     12 39 02 F6 | 	mov	local14, local04
02088     03 38 66 F0 | 	shl	local14, #3
0208c     F2 38 02 F1 | 	add	local14, objptr
02090     1C 2B 02 FB | 	rdlong	local07, local14
02094     02 34 06 F6 | 	mov	local12, #2
02098     12 4D 02 F6 | 	mov	local24, local04
0209c     26 45 02 F6 | 	mov	local20, local24
020a0     22 47 02 F6 | 	mov	local21, local20
020a4     03 46 66 F0 | 	shl	local21, #3
020a8     F2 48 02 F6 | 	mov	local22, objptr
020ac     F2 46 02 F1 | 	add	local21, objptr
020b0     23 13 02 FB | 	rdlong	arg01, local21
020b4     2B 00 00 FF 
020b8     D0 E5 85 F1 | 	sub	objptr, ##22480
020bc     09 2D 02 F6 | 	mov	local08, arg01
020c0     97 06 48 FB | 	callpa	#(@LR__0099-@LR__0098)>>2,fcache_load_ptr_
020c4                 | LR__0098
020c4     16 FB C9 FA | 	rdbyte	result1, local08 wz
020c8     01 2C 06 51 |  if_ne	add	local08, #1
020cc     F4 FF 9F 5D |  if_ne	jmp	#LR__0098
020d0                 | LR__0099
020d0     09 2D 82 F1 | 	sub	local08, arg01
020d4     16 37 02 F6 | 	mov	local13, local08
020d8     1B 39 02 F6 | 	mov	local14, local13
020dc     02 38 86 F1 | 	sub	local14, #2
020e0     1C 33 02 F6 | 	mov	local11, local14
020e4     15 13 02 F6 | 	mov	arg01, local07
020e8     1A 15 02 F6 | 	mov	arg02, local12
020ec     19 17 02 F6 | 	mov	arg03, local11
020f0     2C 63 B1 FD | 	call	#__system__Mid_S
020f4     18 FB 61 FC | 	wrlong	result1, local10
020f8     5C 00 90 FD | 	jmp	#LR__0102
020fc                 | LR__0100
020fc                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
020fc     12 27 02 F6 | 	mov	local05, local04
02100     13 29 02 F6 | 	mov	local06, local05
02104     03 28 66 F0 | 	shl	local06, #3
02108     2B 00 00 FF 
0210c     D0 E5 05 F1 | 	add	objptr, ##22480
02110     F2 28 02 F1 | 	add	local06, objptr
02114     14 13 02 FB | 	rdlong	arg01, local06
02118     2B 00 00 FF 
0211c     D0 E5 85 F1 | 	sub	objptr, ##22480
02120     D8 14 B0 FD | 	call	#_isname
02124     00 FA 0D F2 | 	cmp	result1, #0 wz
02128     2C 00 90 AD |  if_e	jmp	#LR__0101
0212c     12 27 02 F6 | 	mov	local05, local04
02130     13 31 02 F6 | 	mov	local10, local05
02134     03 30 66 F0 | 	shl	local10, #3
02138     2B 00 00 FF 
0213c     D0 E5 05 F1 | 	add	objptr, ##22480
02140     F2 30 02 F1 | 	add	local10, objptr
02144     04 30 06 F1 | 	add	local10, #4
02148     01 00 80 FF 
0214c     18 09 68 FC | 	wrlong	##516, local10
02150     2B 00 00 FF 
02154     D0 E5 85 F1 | 	sub	objptr, ##22480
02158                 | LR__0101
02158                 | LR__0102
02158     01 24 06 F1 | 	add	local04, #1
0215c     5C FA 9F FD | 	jmp	#LR__0094
02160                 | LR__0103
02160     1E 31 02 F6 | 	mov	local10, local16
02164     03 30 66 F0 | 	shl	local10, #3
02168     2B 00 00 FF 
0216c     D0 E5 05 F1 | 	add	objptr, ##22480
02170     F2 30 02 F1 | 	add	local10, objptr
02174     04 30 06 F1 | 	add	local10, #4
02178     18 FD 6B FC | 	wrlong	#510, local10
0217c     1E 31 02 F6 | 	mov	local10, local16
02180     03 30 66 F0 | 	shl	local10, #3
02184     F2 30 02 F1 | 	add	local10, objptr
02188     29 01 00 FF 
0218c     A3 2B 06 F6 | 	mov	local07, ##@LR__4120
02190     18 2B 62 FC | 	wrlong	local07, local10
02194     10 00 00 FF 
02198     54 E4 05 F1 | 	add	objptr, ##8276
0219c     F2 3C 62 FC | 	wrlong	local16, objptr
021a0                 | ' 
021a0                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
021a0                 | ' 
021a0                 | '  '                                      					 	for i=0 to k: print lparts(i).token,lparts(i).part$ : next i
021a0                 | ' 
021a0                 | ' ' process the case when simple load or save is called without ""
021a0                 | ' 
021a0                 | ' if (lparts(0).part$="load" orelse lparts(0).part$="save" orelse lparts(0).part$="brun") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then lparts(1).token=token_string
021a0     10 00 00 FF 
021a4     54 E4 85 F1 | 	sub	objptr, ##8276
021a8     F2 12 02 FB | 	rdlong	arg01, objptr
021ac     2B 00 00 FF 
021b0     D0 E5 85 F1 | 	sub	objptr, ##22480
021b4     29 01 00 FF 
021b8     A4 15 06 F6 | 	mov	arg02, ##@LR__4121
021bc     60 41 B1 FD | 	call	#__system___string_cmp
021c0     00 FA 0D F2 | 	cmp	result1, #0 wz
021c4     50 00 90 AD |  if_e	jmp	#LR__0104
021c8     2B 00 00 FF 
021cc     D0 E5 05 F1 | 	add	objptr, ##22480
021d0     F2 12 02 FB | 	rdlong	arg01, objptr
021d4     2B 00 00 FF 
021d8     D0 E5 85 F1 | 	sub	objptr, ##22480
021dc     29 01 00 FF 
021e0     A9 15 06 F6 | 	mov	arg02, ##@LR__4122
021e4     38 41 B1 FD | 	call	#__system___string_cmp
021e8     00 FA 0D F2 | 	cmp	result1, #0 wz
021ec     28 00 90 AD |  if_e	jmp	#LR__0104
021f0     2B 00 00 FF 
021f4     D0 E5 05 F1 | 	add	objptr, ##22480
021f8     F2 12 02 FB | 	rdlong	arg01, objptr
021fc     2B 00 00 FF 
02200     D0 E5 85 F1 | 	sub	objptr, ##22480
02204     29 01 00 FF 
02208     AE 15 06 F6 | 	mov	arg02, ##@LR__4123
0220c     10 41 B1 FD | 	call	#__system___string_cmp
02210     00 FA 0D F2 | 	cmp	result1, #0 wz
02214     50 00 90 5D |  if_ne	jmp	#LR__0105
02218                 | LR__0104
02218     2B 00 00 FF 
0221c     DC E5 05 F1 | 	add	objptr, ##22492
02220     F2 28 02 FB | 	rdlong	local06, objptr
02224     2B 00 00 FF 
02228     DC E5 85 F1 | 	sub	objptr, ##22492
0222c     01 00 00 FF 
02230     04 28 0E F2 | 	cmp	local06, ##516 wz
02234     2B 00 00 AF 
02238     E4 E5 05 A1 |  if_e	add	objptr, ##22500
0223c     F2 32 02 AB |  if_e	rdlong	local11, objptr
02240     2B 00 00 AF 
02244     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
02248     19 35 02 A6 |  if_e	mov	local12, local11
0224c     FE 35 0E A2 |  if_e	cmp	local12, #510 wz
02250     2B 00 00 AF 
02254     DC E5 05 A1 |  if_e	add	objptr, ##22492
02258     01 00 80 AF 
0225c     F2 06 68 AC |  if_e	wrlong	##515, objptr
02260     2B 00 00 AF 
02264     DC E5 85 A1 |  if_e	sub	objptr, ##22492
02268                 | LR__0105
02268                 | ' if (lparts(0).part$="mouse" orelse lparts(0).part$="cursor" orelse lparts(0).part$="click") andalso lparts(1).token=token_name andalso lparts(2).token=token_end then 
02268     2B 00 00 FF 
0226c     D0 E5 05 F1 | 	add	objptr, ##22480
02270     F2 12 02 FB | 	rdlong	arg01, objptr
02274     2B 00 00 FF 
02278     D0 E5 85 F1 | 	sub	objptr, ##22480
0227c     29 01 00 FF 
02280     B3 31 06 F6 | 	mov	local10, ##@LR__4124
02284     18 15 02 F6 | 	mov	arg02, local10
02288     94 40 B1 FD | 	call	#__system___string_cmp
0228c     00 FA 0D F2 | 	cmp	result1, #0 wz
02290     5C 00 90 AD |  if_e	jmp	#LR__0106
02294     2B 00 00 FF 
02298     D0 E5 05 F1 | 	add	objptr, ##22480
0229c     F2 12 02 FB | 	rdlong	arg01, objptr
022a0     2B 00 00 FF 
022a4     D0 E5 85 F1 | 	sub	objptr, ##22480
022a8     29 01 00 FF 
022ac     B9 31 06 F6 | 	mov	local10, ##@LR__4125
022b0     18 15 02 F6 | 	mov	arg02, local10
022b4     68 40 B1 FD | 	call	#__system___string_cmp
022b8     00 FA 0D F2 | 	cmp	result1, #0 wz
022bc     30 00 90 AD |  if_e	jmp	#LR__0106
022c0     2B 00 00 FF 
022c4     D0 E5 05 F1 | 	add	objptr, ##22480
022c8     F2 12 02 FB | 	rdlong	arg01, objptr
022cc     2B 00 00 FF 
022d0     D0 E5 85 F1 | 	sub	objptr, ##22480
022d4     29 01 00 FF 
022d8     C0 2B 06 F6 | 	mov	local07, ##@LR__4126
022dc     15 29 02 F6 | 	mov	local06, local07
022e0     14 15 02 F6 | 	mov	arg02, local06
022e4     38 40 B1 FD | 	call	#__system___string_cmp
022e8     FD 30 0A F6 | 	mov	local10, result1 wz
022ec     E4 00 90 5D |  if_ne	jmp	#LR__0109
022f0                 | LR__0106
022f0     2B 00 00 FF 
022f4     DC E5 05 F1 | 	add	objptr, ##22492
022f8     F2 2A 02 FB | 	rdlong	local07, objptr
022fc     2B 00 00 FF 
02300     DC E5 85 F1 | 	sub	objptr, ##22492
02304     15 29 02 F6 | 	mov	local06, local07
02308     01 00 00 FF 
0230c     04 28 0E F2 | 	cmp	local06, ##516 wz
02310     2B 00 00 AF 
02314     E4 E5 05 A1 |  if_e	add	objptr, ##22500
02318     F2 32 02 AB |  if_e	rdlong	local11, objptr
0231c     2B 00 00 AF 
02320     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
02324     19 35 02 A6 |  if_e	mov	local12, local11
02328     FE 35 0E A2 |  if_e	cmp	local12, #510 wz
0232c     A4 00 90 5D |  if_ne	jmp	#LR__0109
02330                 | '   if lparts(1).part$="on" then lparts(1).part$="1" :lparts(1).token=token_decimal
02330     2B 00 00 FF 
02334     D8 E5 05 F1 | 	add	objptr, ##22488
02338     F2 12 02 FB | 	rdlong	arg01, objptr
0233c     2B 00 00 FF 
02340     D8 E5 85 F1 | 	sub	objptr, ##22488
02344     29 01 00 FF 
02348     C6 15 06 F6 | 	mov	arg02, ##@LR__4127
0234c     D0 3F B1 FD | 	call	#__system___string_cmp
02350     00 FA 0D F2 | 	cmp	result1, #0 wz
02354     28 00 90 5D |  if_ne	jmp	#LR__0107
02358     29 01 00 FF 
0235c     C9 1F 06 F6 | 	mov	local01, ##@LR__4128
02360     2B 00 00 FF 
02364     D8 E5 05 F1 | 	add	objptr, ##22488
02368     F2 1E 62 FC | 	wrlong	local01, objptr
0236c     04 E4 05 F1 | 	add	objptr, #4
02370     01 00 80 FF 
02374     F2 00 68 FC | 	wrlong	##512, objptr
02378     2B 00 00 FF 
0237c     DC E5 85 F1 | 	sub	objptr, ##22492
02380                 | LR__0107
02380                 | '   if lparts(1).part$="off" then lparts(1).part$="0" :lparts(1).token=token_decimal
02380     2B 00 00 FF 
02384     D8 E5 05 F1 | 	add	objptr, ##22488
02388     F2 12 02 FB | 	rdlong	arg01, objptr
0238c     2B 00 00 FF 
02390     D8 E5 85 F1 | 	sub	objptr, ##22488
02394     29 01 00 FF 
02398     CB 31 06 F6 | 	mov	local10, ##@LR__4129
0239c     18 15 02 F6 | 	mov	arg02, local10
023a0     7C 3F B1 FD | 	call	#__system___string_cmp
023a4     00 FA 0D F2 | 	cmp	result1, #0 wz
023a8     28 00 90 5D |  if_ne	jmp	#LR__0108
023ac     29 01 00 FF 
023b0     CF 1F 06 F6 | 	mov	local01, ##@LR__4130
023b4     2B 00 00 FF 
023b8     D8 E5 05 F1 | 	add	objptr, ##22488
023bc     F2 1E 62 FC | 	wrlong	local01, objptr
023c0     04 E4 05 F1 | 	add	objptr, #4
023c4     01 00 80 FF 
023c8     F2 00 68 FC | 	wrlong	##512, objptr
023cc     2B 00 00 FF 
023d0     DC E5 85 F1 | 	sub	objptr, ##22492
023d4                 | LR__0108
023d4                 | LR__0109
023d4                 | ' 
023d4                 | ' '2b determine a type of the line
023d4                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
023d4     2B 00 00 FF 
023d8     D0 E5 05 F1 | 	add	objptr, ##22480
023dc     F2 12 02 FB | 	rdlong	arg01, objptr
023e0     2B 00 00 FF 
023e4     D0 E5 85 F1 | 	sub	objptr, ##22480
023e8     B4 18 B0 FD | 	call	#_isdec
023ec     00 FA 0D F2 | 	cmp	result1, #0 wz
023f0     20 00 90 AD |  if_e	jmp	#LR__0110
023f4     2B 00 00 FF 
023f8     D0 E5 05 F1 | 	add	objptr, ##22480
023fc     F2 12 02 FB | 	rdlong	arg01, objptr
02400     2B 00 00 FF 
02404     D0 E5 85 F1 | 	sub	objptr, ##22480
02408     00 14 06 F6 | 	mov	arg02, #0
0240c     70 6E B1 FD | 	call	#__system____builtin_atoi
02410     FD 20 02 F6 | 	mov	local02, result1
02414                 | LR__0110
02414                 | ' 
02414                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104
02414     01 20 16 F2 | 	cmp	local02, #1 wc
02418     2C 00 90 CD |  if_b	jmp	#LR__0111
0241c     01 3C 0E F2 | 	cmp	local16, #1 wz
02420     2D 00 00 AF 
02424     E8 E5 05 A1 |  if_e	add	objptr, ##23528
02428     F2 1E 02 AB |  if_e	rdlong	local01, objptr
0242c     2D 00 00 AF 
02430     E8 E5 85 A1 |  if_e	sub	objptr, ##23528
02434     03 1E 0E A2 |  if_e	cmp	local01, #3 wz
02438     0C 00 90 5D |  if_ne	jmp	#LR__0111
0243c     10 13 02 F6 | 	mov	arg01, local02
02440     80 19 B0 FD | 	call	#_deleteline
02444     C8 04 90 FD | 	jmp	#LR__0127
02448                 | LR__0111
02448                 | ' 
02448                 | ' if linenum>0  andalso (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  
02448     01 20 16 F2 | 	cmp	local02, #1 wc
0244c     E0 00 90 CD |  if_b	jmp	#LR__0114
02450     2D 00 00 FF 
02454     E8 E5 05 F1 | 	add	objptr, ##23528
02458     F2 1E 0A FB | 	rdlong	local01, objptr wz
0245c     2D 00 00 FF 
02460     E8 E5 85 F1 | 	sub	objptr, ##23528
02464     20 00 90 AD |  if_e	jmp	#LR__0112
02468     2D 00 00 FF 
0246c     E8 E5 05 F1 | 	add	objptr, ##23528
02470     F2 28 02 FB | 	rdlong	local06, objptr
02474     2D 00 00 FF 
02478     E8 E5 85 F1 | 	sub	objptr, ##23528
0247c     14 31 02 F6 | 	mov	local10, local06
02480     03 30 0E F2 | 	cmp	local10, #3 wz
02484     A8 00 90 5D |  if_ne	jmp	#LR__0114
02488                 | LR__0112
02488     2B 00 00 FF 
0248c     E4 E5 05 F1 | 	add	objptr, ##22500
02490     F2 34 02 FB | 	rdlong	local12, objptr
02494     2B 00 00 FF 
02498     E4 E5 85 F1 | 	sub	objptr, ##22500
0249c     1A 2B 02 F6 | 	mov	local07, local12
024a0     1B 2A 0E F2 | 	cmp	local07, #27 wz
024a4     88 00 90 AD |  if_e	jmp	#LR__0114
024a8     2D 00 00 FF 
024ac     E8 E5 05 F1 | 	add	objptr, ##23528
024b0     F2 16 02 FB | 	rdlong	arg03, objptr
024b4     2D 00 00 FF 
024b8     E8 E5 85 F1 | 	sub	objptr, ##23528
024bc     10 13 02 F6 | 	mov	arg01, local02
024c0     00 14 06 F6 | 	mov	arg02, #0
024c4     84 2B B0 FD | 	call	#_compile
024c8     FD 22 0A F6 | 	mov	local03, result1 wz
024cc                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
024cc                 | '   if err<>0 then printerror(err): goto 104
024cc     0C 00 90 AD |  if_e	jmp	#LR__0113
024d0     11 13 02 F6 | 	mov	arg01, local03
024d4     00 09 B1 FD | 	call	#_printerror
024d8     34 04 90 FD | 	jmp	#LR__0127
024dc                 | LR__0113
024dc                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
024dc     52 00 00 FF 
024e0     74 E4 05 F1 | 	add	objptr, ##42100
024e4     F2 12 02 FB | 	rdlong	arg01, objptr
024e8     52 00 00 FF 
024ec     74 E4 85 F1 | 	sub	objptr, ##42100
024f0     29 01 00 FF 
024f4     D1 15 06 F6 | 	mov	arg02, ##@LR__4131
024f8     24 3E B1 FD | 	call	#__system___string_cmp
024fc     00 FA 0D F2 | 	cmp	result1, #0 wz
02500     0C 04 90 AD |  if_e	jmp	#LR__0127
02504     52 00 00 FF 
02508     74 E4 05 F1 | 	add	objptr, ##42100
0250c     F2 1E 02 FB | 	rdlong	local01, objptr
02510     24 00 00 FF 
02514     94 E4 85 F1 | 	sub	objptr, ##18580
02518     F2 1E 62 FC | 	wrlong	local01, objptr
0251c     08 E4 05 F1 | 	add	objptr, #8
02520     F2 08 68 FC | 	wrlong	#4, objptr
02524     2D 00 00 FF 
02528     E8 E5 85 F1 | 	sub	objptr, ##23528
0252c     38 E5 9F FD | 	jmp	#LR__0020
02530                 | LR__0114
02530                 | '       							
02530                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 
02530     01 20 16 F2 | 	cmp	local02, #1 wc
02534     E4 00 90 CD |  if_b	jmp	#LR__0117
02538     2D 00 00 FF 
0253c     E8 E5 05 F1 | 	add	objptr, ##23528
02540     F2 1E 02 FB | 	rdlong	local01, objptr
02544     2D 00 00 FF 
02548     E8 E5 85 F1 | 	sub	objptr, ##23528
0254c     01 1E 0E F2 | 	cmp	local01, #1 wz
02550     20 00 90 AD |  if_e	jmp	#LR__0115
02554     2D 00 00 FF 
02558     E8 E5 05 F1 | 	add	objptr, ##23528
0255c     F2 28 02 FB | 	rdlong	local06, objptr
02560     2D 00 00 FF 
02564     E8 E5 85 F1 | 	sub	objptr, ##23528
02568     14 31 02 F6 | 	mov	local10, local06
0256c     02 30 0E F2 | 	cmp	local10, #2 wz
02570     A8 00 90 5D |  if_ne	jmp	#LR__0117
02574                 | LR__0115
02574     2B 00 00 FF 
02578     DC E5 05 F1 | 	add	objptr, ##22492
0257c     F2 34 02 FB | 	rdlong	local12, objptr
02580     2B 00 00 FF 
02584     DC E5 85 F1 | 	sub	objptr, ##22492
02588     1A 2B 02 F6 | 	mov	local07, local12
0258c     1B 2A 0E F2 | 	cmp	local07, #27 wz
02590     88 00 90 AD |  if_e	jmp	#LR__0117
02594     2D 00 00 FF 
02598     E8 E5 05 F1 | 	add	objptr, ##23528
0259c     F2 16 02 FB | 	rdlong	arg03, objptr
025a0     2D 00 00 FF 
025a4     E8 E5 85 F1 | 	sub	objptr, ##23528
025a8     10 13 02 F6 | 	mov	arg01, local02
025ac     00 14 06 F6 | 	mov	arg02, #0
025b0     98 2A B0 FD | 	call	#_compile
025b4     FD 22 0A F6 | 	mov	local03, result1 wz
025b8                 | '   err= compile(linenum,0,cont) ': print "called compile with cont=";cont, "line$=";line$
025b8                 | '   if err<>0 then printerror(err): goto 104
025b8     0C 00 90 AD |  if_e	jmp	#LR__0116
025bc     11 13 02 F6 | 	mov	arg01, local03
025c0     14 08 B1 FD | 	call	#_printerror
025c4     48 03 90 FD | 	jmp	#LR__0127
025c8                 | LR__0116
025c8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
025c8     52 00 00 FF 
025cc     74 E4 05 F1 | 	add	objptr, ##42100
025d0     F2 12 02 FB | 	rdlong	arg01, objptr
025d4     52 00 00 FF 
025d8     74 E4 85 F1 | 	sub	objptr, ##42100
025dc     29 01 00 FF 
025e0     D2 15 06 F6 | 	mov	arg02, ##@LR__4132
025e4     38 3D B1 FD | 	call	#__system___string_cmp
025e8     00 FA 0D F2 | 	cmp	result1, #0 wz
025ec     20 03 90 AD |  if_e	jmp	#LR__0127
025f0     52 00 00 FF 
025f4     74 E4 05 F1 | 	add	objptr, ##42100
025f8     F2 1E 02 FB | 	rdlong	local01, objptr
025fc     24 00 00 FF 
02600     94 E4 85 F1 | 	sub	objptr, ##18580
02604     F2 1E 62 FC | 	wrlong	local01, objptr
02608     08 E4 05 F1 | 	add	objptr, #8
0260c     F2 08 68 FC | 	wrlong	#4, objptr
02610     2D 00 00 FF 
02614     E8 E5 85 F1 | 	sub	objptr, ##23528
02618     4C E4 9F FD | 	jmp	#LR__0020
0261c                 | LR__0117
0261c                 | ' 							 
0261c                 | ' if linenum>0 andalso (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  
0261c     01 20 16 F2 | 	cmp	local02, #1 wc
02620     C0 00 90 CD |  if_b	jmp	#LR__0118
02624     2D 00 00 FF 
02628     E8 E5 05 F1 | 	add	objptr, ##23528
0262c     F2 1E 0A FB | 	rdlong	local01, objptr wz
02630     2D 00 00 FF 
02634     E8 E5 85 F1 | 	sub	objptr, ##23528
02638     2D 00 00 5F 
0263c     E8 E5 05 51 |  if_ne	add	objptr, ##23528
02640     F2 28 02 5B |  if_ne	rdlong	local06, objptr
02644     2D 00 00 5F 
02648     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
0264c     03 28 0E 52 |  if_ne	cmp	local06, #3 wz
02650     2B 00 00 AF 
02654     E4 E5 05 A1 |  if_e	add	objptr, ##22500
02658     F2 34 02 AB |  if_e	rdlong	local12, objptr
0265c     2B 00 00 AF 
02660     E4 E5 85 A1 |  if_e	sub	objptr, ##22500
02664     1A 2B 02 A6 |  if_e	mov	local07, local12
02668     1B 2A 0E A2 |  if_e	cmp	local07, #27 wz
0266c     74 00 90 5D |  if_ne	jmp	#LR__0118
02670     2D 00 00 FF 
02674     E8 E5 05 F1 | 	add	objptr, ##23528
02678     F2 16 02 FB | 	rdlong	arg03, objptr
0267c     2D 00 00 FF 
02680     E8 E5 85 F1 | 	sub	objptr, ##23528
02684     10 13 02 F6 | 	mov	arg01, local02
02688     00 14 06 F6 | 	mov	arg02, #0
0268c     8C 2A B0 FD | 	call	#_compile_assign
02690                 | '   compile_assign(linenum,0,cont)': print "called compile_assign with cont=";cont, "line$=";line$
02690                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
02690     52 00 00 FF 
02694     74 E4 05 F1 | 	add	objptr, ##42100
02698     F2 12 02 FB | 	rdlong	arg01, objptr
0269c     52 00 00 FF 
026a0     74 E4 85 F1 | 	sub	objptr, ##42100
026a4     29 01 00 FF 
026a8     D3 15 06 F6 | 	mov	arg02, ##@LR__4133
026ac     70 3C B1 FD | 	call	#__system___string_cmp
026b0     00 FA 0D F2 | 	cmp	result1, #0 wz
026b4     58 02 90 AD |  if_e	jmp	#LR__0127
026b8     52 00 00 FF 
026bc     74 E4 05 F1 | 	add	objptr, ##42100
026c0     F2 1E 02 FB | 	rdlong	local01, objptr
026c4     24 00 00 FF 
026c8     94 E4 85 F1 | 	sub	objptr, ##18580
026cc     F2 1E 62 FC | 	wrlong	local01, objptr
026d0     08 E4 05 F1 | 	add	objptr, #8
026d4     F2 08 68 FC | 	wrlong	#4, objptr
026d8     2D 00 00 FF 
026dc     E8 E5 85 F1 | 	sub	objptr, ##23528
026e0     84 E3 9F FD | 	jmp	#LR__0020
026e4                 | LR__0118
026e4                 | '     							 
026e4                 | ' if linenum>0 andalso (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 
026e4     01 20 16 F2 | 	cmp	local02, #1 wc
026e8     C0 00 90 CD |  if_b	jmp	#LR__0119
026ec     2D 00 00 FF 
026f0     E8 E5 05 F1 | 	add	objptr, ##23528
026f4     F2 1E 02 FB | 	rdlong	local01, objptr
026f8     2D 00 00 FF 
026fc     E8 E5 85 F1 | 	sub	objptr, ##23528
02700     01 1E 0E F2 | 	cmp	local01, #1 wz
02704     2D 00 00 5F 
02708     E8 E5 05 51 |  if_ne	add	objptr, ##23528
0270c     F2 30 02 5B |  if_ne	rdlong	local10, objptr
02710     2D 00 00 5F 
02714     E8 E5 85 51 |  if_ne	sub	objptr, ##23528
02718     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
0271c     2B 00 00 AF 
02720     DC E5 05 A1 |  if_e	add	objptr, ##22492
02724     F2 34 02 AB |  if_e	rdlong	local12, objptr
02728     2B 00 00 AF 
0272c     DC E5 85 A1 |  if_e	sub	objptr, ##22492
02730     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
02734     74 00 90 5D |  if_ne	jmp	#LR__0119
02738     2D 00 00 FF 
0273c     E8 E5 05 F1 | 	add	objptr, ##23528
02740     F2 16 02 FB | 	rdlong	arg03, objptr
02744     2D 00 00 FF 
02748     E8 E5 85 F1 | 	sub	objptr, ##23528
0274c     10 13 02 F6 | 	mov	arg01, local02
02750     00 14 06 F6 | 	mov	arg02, #0
02754     C4 29 B0 FD | 	call	#_compile_assign
02758                 | '   compile_assign(linenum,0,cont) ': print "called compile_assign with cont=";cont, "line$=";line$
02758                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								'<-- TODO: add a line to a program
02758     52 00 00 FF 
0275c     74 E4 05 F1 | 	add	objptr, ##42100
02760     F2 12 02 FB | 	rdlong	arg01, objptr
02764     52 00 00 FF 
02768     74 E4 85 F1 | 	sub	objptr, ##42100
0276c     29 01 00 FF 
02770     D4 15 06 F6 | 	mov	arg02, ##@LR__4134
02774     A8 3B B1 FD | 	call	#__system___string_cmp
02778     00 FA 0D F2 | 	cmp	result1, #0 wz
0277c     90 01 90 AD |  if_e	jmp	#LR__0127
02780     52 00 00 FF 
02784     74 E4 05 F1 | 	add	objptr, ##42100
02788     F2 1E 02 FB | 	rdlong	local01, objptr
0278c     24 00 00 FF 
02790     94 E4 85 F1 | 	sub	objptr, ##18580
02794     F2 1E 62 FC | 	wrlong	local01, objptr
02798     08 E4 05 F1 | 	add	objptr, #8
0279c     F2 08 68 FC | 	wrlong	#4, objptr
027a0     2D 00 00 FF 
027a4     E8 E5 85 F1 | 	sub	objptr, ##23528
027a8     BC E2 9F FD | 	jmp	#LR__0020
027ac                 | LR__0119
027ac                 | ' 
027ac                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_eq then compile_assign(0) : goto 103    					' assign a variable
027ac     2B 00 00 FF 
027b0     D4 E5 05 F1 | 	add	objptr, ##22484
027b4     F2 1E 02 FB | 	rdlong	local01, objptr
027b8     2B 00 00 FF 
027bc     D4 E5 85 F1 | 	sub	objptr, ##22484
027c0     01 00 00 FF 
027c4     04 1E 0E F2 | 	cmp	local01, ##516 wz
027c8     2B 00 00 AF 
027cc     DC E5 05 A1 |  if_e	add	objptr, ##22492
027d0     F2 30 02 AB |  if_e	rdlong	local10, objptr
027d4     2B 00 00 AF 
027d8     DC E5 85 A1 |  if_e	sub	objptr, ##22492
027dc     1B 30 0E A2 |  if_e	cmp	local10, #27 wz
027e0     14 00 90 5D |  if_ne	jmp	#LR__0120
027e4     00 12 06 F6 | 	mov	arg01, #0
027e8     00 14 06 F6 | 	mov	arg02, #0
027ec     00 16 06 F6 | 	mov	arg03, #0
027f0     28 29 B0 FD | 	call	#_compile_assign
027f4     90 00 90 FD | 	jmp	#LR__0122
027f8                 | LR__0120
027f8                 | ' if lparts(0).token=token_name andalso lparts(1).token=token_rpar then print " User functions and arrays not yet implemented" : goto 101
027f8     2B 00 00 FF 
027fc     D4 E5 05 F1 | 	add	objptr, ##22484
02800     F2 1E 02 FB | 	rdlong	local01, objptr
02804     2B 00 00 FF 
02808     D4 E5 85 F1 | 	sub	objptr, ##22484
0280c     01 00 00 FF 
02810     04 1E 0E F2 | 	cmp	local01, ##516 wz
02814     2B 00 00 AF 
02818     DC E5 05 A1 |  if_e	add	objptr, ##22492
0281c     F2 30 02 AB |  if_e	rdlong	local10, objptr
02820     2B 00 00 AF 
02824     DC E5 85 A1 |  if_e	sub	objptr, ##22492
02828     14 30 0E A2 |  if_e	cmp	local10, #20 wz
0282c     44 00 90 5D |  if_ne	jmp	#LR__0121
02830     00 12 06 F6 | 	mov	arg01, #0
02834     70 8F B1 FD | 	call	#__system___getiolock_0372
02838     FD 12 02 F6 | 	mov	arg01, result1
0283c     B8 3A B1 FD | 	call	#__system___lockmem
02840     29 01 00 FF 
02844     D5 15 06 F6 | 	mov	arg02, ##@LR__4135
02848     00 12 06 F6 | 	mov	arg01, #0
0284c     00 16 06 F6 | 	mov	arg03, #0
02850     98 47 B1 FD | 	call	#__system___basic_print_string
02854     00 12 06 F6 | 	mov	arg01, #0
02858     0A 14 06 F6 | 	mov	arg02, #10
0285c     00 16 06 F6 | 	mov	arg03, #0
02860     30 47 B1 FD | 	call	#__system___basic_print_char
02864     00 12 06 F6 | 	mov	arg01, #0
02868     3C 8F B1 FD | 	call	#__system___getiolock_0372
0286c     FD 00 68 FC | 	wrlong	#0, result1
02870     7C 00 90 FD | 	jmp	#LR__0126
02874                 | LR__0121
02874     00 12 06 F6 | 	mov	arg01, #0
02878     00 14 06 F6 | 	mov	arg02, #0
0287c     00 16 06 F6 | 	mov	arg03, #0
02880     C8 27 B0 FD | 	call	#_compile
02884     FD 22 02 F6 | 	mov	local03, result1
02888                 | LR__0122
02888                 | ' 
02888                 | ' ' if we are here, this is not a program line to add, so try to execute this
02888                 | ' 
02888                 | ' err=compile(0) : '' execute(0) ' print "  this is a command to execute"  ''' param=line to compile
02888                 | ' 103  'for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, : next i
02888                 | ' if err=0 then execute_line() else printerror(err)
02888     00 22 0E F2 | 	cmp	local03, #0 wz
0288c     0C 00 90 5D |  if_ne	jmp	#LR__0123
02890     00 12 06 F6 | 	mov	arg01, #0
02894     74 61 B0 FD | 	call	#_execute_line
02898     08 00 90 FD | 	jmp	#LR__0124
0289c                 | LR__0123
0289c     11 13 02 F6 | 	mov	arg01, local03
028a0     34 05 B1 FD | 	call	#_printerror
028a4                 | LR__0124
028a4                 | ' if rest$<>"" then line$=rest$:  goto 108 
028a4     52 00 00 FF 
028a8     74 E4 05 F1 | 	add	objptr, ##42100
028ac     F2 12 02 FB | 	rdlong	arg01, objptr
028b0     52 00 00 FF 
028b4     74 E4 85 F1 | 	sub	objptr, ##42100
028b8     2A 01 00 FF 
028bc     04 14 06 F6 | 	mov	arg02, ##@LR__4136
028c0     5C 3A B1 FD | 	call	#__system___string_cmp
028c4     00 FA 0D F2 | 	cmp	result1, #0 wz
028c8     24 00 90 AD |  if_e	jmp	#LR__0125
028cc     52 00 00 FF 
028d0     74 E4 05 F1 | 	add	objptr, ##42100
028d4     F2 1E 02 FB | 	rdlong	local01, objptr
028d8     24 00 00 FF 
028dc     94 E4 85 F1 | 	sub	objptr, ##18580
028e0     F2 1E 62 FC | 	wrlong	local01, objptr
028e4     2D 00 00 FF 
028e8     E0 E5 85 F1 | 	sub	objptr, ##23520
028ec     78 E1 9F FD | 	jmp	#LR__0020
028f0                 | LR__0125
028f0                 | LR__0126
028f0     2A 01 00 FF 
028f4     05 12 06 F6 | 	mov	arg01, ##@LR__4137
028f8                 | ' 
028f8                 | ' write(text)
028f8     D8 29 B1 FD | 	call	#_hg010b_spin2_write
028fc                 | ' crlf
028fc     34 2B B1 FD | 	call	#_hg010b_spin2_crlf
02900     2A 01 00 FF 
02904     06 12 06 F6 | 	mov	arg01, ##@LR__4138
02908                 | ' 
02908                 | ' write(text)
02908     C8 29 B1 FD | 	call	#_hg010b_spin2_write
0290c                 | ' crlf
0290c     24 2B B1 FD | 	call	#_hg010b_spin2_crlf
02910                 | LR__0127
02910     A7 F0 03 F6 | 	mov	ptra, fp
02914     B2 00 A0 FD | 	call	#popregs_
02918                 | _interpret_ret
02918     2D 00 64 FD | 	ret
0291c                 | 
0291c                 | ' 
0291c                 | ' 
0291c                 | ' '------------------------------ Helper functions for the tokenizer -------------------------------------------
0291c                 | ' 
0291c                 | ' function isoperator(s as string) as ubyte
0291c                 | _isoperator
0291c     01 4A 05 F6 | 	mov	COUNT_, #1
02920     A8 00 A0 FD | 	call	#pushregs_
02924                 | ' 
02924                 | ' select case s
02924     09 1F 02 F6 | 	mov	local01, arg01
02928     2A 01 00 FF 
0292c     0C 14 06 F6 | 	mov	arg02, ##@LR__4139
02930     0F 13 02 F6 | 	mov	arg01, local01
02934     E8 39 B1 FD | 	call	#__system___string_cmp
02938     00 FA 0D F2 | 	cmp	result1, #0 wz
0293c     FC 01 90 AD |  if_e	jmp	#LR__0130
02940     2A 01 00 FF 
02944     0E 14 06 F6 | 	mov	arg02, ##@LR__4140
02948     0F 13 02 F6 | 	mov	arg01, local01
0294c     D0 39 B1 FD | 	call	#__system___string_cmp
02950     00 FA 0D F2 | 	cmp	result1, #0 wz
02954     EC 01 90 AD |  if_e	jmp	#LR__0131
02958     2A 01 00 FF 
0295c     10 14 06 F6 | 	mov	arg02, ##@LR__4141
02960     0F 13 02 F6 | 	mov	arg01, local01
02964     B8 39 B1 FD | 	call	#__system___string_cmp
02968     00 FA 0D F2 | 	cmp	result1, #0 wz
0296c     DC 01 90 AD |  if_e	jmp	#LR__0132
02970     2A 01 00 FF 
02974     13 14 06 F6 | 	mov	arg02, ##@LR__4142
02978     0F 13 02 F6 | 	mov	arg01, local01
0297c     A0 39 B1 FD | 	call	#__system___string_cmp
02980     00 FA 0D F2 | 	cmp	result1, #0 wz
02984     CC 01 90 AD |  if_e	jmp	#LR__0133
02988     2A 01 00 FF 
0298c     17 14 06 F6 | 	mov	arg02, ##@LR__4143
02990     0F 13 02 F6 | 	mov	arg01, local01
02994     88 39 B1 FD | 	call	#__system___string_cmp
02998     00 FA 0D F2 | 	cmp	result1, #0 wz
0299c     BC 01 90 AD |  if_e	jmp	#LR__0134
029a0     2A 01 00 FF 
029a4     19 14 06 F6 | 	mov	arg02, ##@LR__4144
029a8     0F 13 02 F6 | 	mov	arg01, local01
029ac     70 39 B1 FD | 	call	#__system___string_cmp
029b0     00 FA 0D F2 | 	cmp	result1, #0 wz
029b4     AC 01 90 AD |  if_e	jmp	#LR__0135
029b8     2A 01 00 FF 
029bc     1B 14 06 F6 | 	mov	arg02, ##@LR__4145
029c0     0F 13 02 F6 | 	mov	arg01, local01
029c4     58 39 B1 FD | 	call	#__system___string_cmp
029c8     00 FA 0D F2 | 	cmp	result1, #0 wz
029cc     9C 01 90 AD |  if_e	jmp	#LR__0136
029d0     2A 01 00 FF 
029d4     1F 14 06 F6 | 	mov	arg02, ##@LR__4146
029d8     0F 13 02 F6 | 	mov	arg01, local01
029dc     40 39 B1 FD | 	call	#__system___string_cmp
029e0     00 FA 0D F2 | 	cmp	result1, #0 wz
029e4     8C 01 90 AD |  if_e	jmp	#LR__0137
029e8     2A 01 00 FF 
029ec     23 14 06 F6 | 	mov	arg02, ##@LR__4147
029f0     0F 13 02 F6 | 	mov	arg01, local01
029f4     28 39 B1 FD | 	call	#__system___string_cmp
029f8     00 FA 0D F2 | 	cmp	result1, #0 wz
029fc     7C 01 90 AD |  if_e	jmp	#LR__0138
02a00     2A 01 00 FF 
02a04     27 14 06 F6 | 	mov	arg02, ##@LR__4148
02a08     0F 13 02 F6 | 	mov	arg01, local01
02a0c     10 39 B1 FD | 	call	#__system___string_cmp
02a10     00 FA 0D F2 | 	cmp	result1, #0 wz
02a14     6C 01 90 AD |  if_e	jmp	#LR__0139
02a18     2A 01 00 FF 
02a1c     2B 14 06 F6 | 	mov	arg02, ##@LR__4149
02a20     0F 13 02 F6 | 	mov	arg01, local01
02a24     F8 38 B1 FD | 	call	#__system___string_cmp
02a28     00 FA 0D F2 | 	cmp	result1, #0 wz
02a2c     5C 01 90 AD |  if_e	jmp	#LR__0140
02a30     2A 01 00 FF 
02a34     2F 14 06 F6 | 	mov	arg02, ##@LR__4150
02a38     0F 13 02 F6 | 	mov	arg01, local01
02a3c     E0 38 B1 FD | 	call	#__system___string_cmp
02a40     00 FA 0D F2 | 	cmp	result1, #0 wz
02a44     4C 01 90 AD |  if_e	jmp	#LR__0141
02a48     2A 01 00 FF 
02a4c     31 14 06 F6 | 	mov	arg02, ##@LR__4151
02a50     0F 13 02 F6 | 	mov	arg01, local01
02a54     C8 38 B1 FD | 	call	#__system___string_cmp
02a58     00 FA 0D F2 | 	cmp	result1, #0 wz
02a5c     3C 01 90 AD |  if_e	jmp	#LR__0142
02a60     2A 01 00 FF 
02a64     35 14 06 F6 | 	mov	arg02, ##@LR__4152
02a68     0F 13 02 F6 | 	mov	arg01, local01
02a6c     B0 38 B1 FD | 	call	#__system___string_cmp
02a70     00 FA 0D F2 | 	cmp	result1, #0 wz
02a74     2C 01 90 AD |  if_e	jmp	#LR__0143
02a78     2A 01 00 FF 
02a7c     37 14 06 F6 | 	mov	arg02, ##@LR__4153
02a80     0F 13 02 F6 | 	mov	arg01, local01
02a84     98 38 B1 FD | 	call	#__system___string_cmp
02a88     00 FA 0D F2 | 	cmp	result1, #0 wz
02a8c     1C 01 90 AD |  if_e	jmp	#LR__0144
02a90     2A 01 00 FF 
02a94     39 14 06 F6 | 	mov	arg02, ##@LR__4154
02a98     0F 13 02 F6 | 	mov	arg01, local01
02a9c     80 38 B1 FD | 	call	#__system___string_cmp
02aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
02aa4     0C 01 90 AD |  if_e	jmp	#LR__0145
02aa8     2A 01 00 FF 
02aac     3C 14 06 F6 | 	mov	arg02, ##@LR__4155
02ab0     0F 13 02 F6 | 	mov	arg01, local01
02ab4     68 38 B1 FD | 	call	#__system___string_cmp
02ab8     00 FA 0D F2 | 	cmp	result1, #0 wz
02abc     FC 00 90 AD |  if_e	jmp	#LR__0146
02ac0     2A 01 00 FF 
02ac4     3F 14 06 F6 | 	mov	arg02, ##@LR__4156
02ac8     0F 13 02 F6 | 	mov	arg01, local01
02acc     50 38 B1 FD | 	call	#__system___string_cmp
02ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ad4     EC 00 90 AD |  if_e	jmp	#LR__0147
02ad8     2A 01 00 FF 
02adc     41 14 06 F6 | 	mov	arg02, ##@LR__4157
02ae0     0F 13 02 F6 | 	mov	arg01, local01
02ae4     38 38 B1 FD | 	call	#__system___string_cmp
02ae8     00 FA 0D F2 | 	cmp	result1, #0 wz
02aec     DC 00 90 AD |  if_e	jmp	#LR__0148
02af0     2A 01 00 FF 
02af4     43 14 06 F6 | 	mov	arg02, ##@LR__4158
02af8     0F 13 02 F6 | 	mov	arg01, local01
02afc     20 38 B1 FD | 	call	#__system___string_cmp
02b00     00 FA 0D F2 | 	cmp	result1, #0 wz
02b04     CC 00 90 AD |  if_e	jmp	#LR__0149
02b08     2A 01 00 FF 
02b0c     46 14 06 F6 | 	mov	arg02, ##@LR__4159
02b10     0F 13 02 F6 | 	mov	arg01, local01
02b14     08 38 B1 FD | 	call	#__system___string_cmp
02b18     00 FA 0D F2 | 	cmp	result1, #0 wz
02b1c     BC 00 90 AD |  if_e	jmp	#LR__0150
02b20     2A 01 00 FF 
02b24     49 14 06 F6 | 	mov	arg02, ##@LR__4160
02b28     0F 13 02 F6 | 	mov	arg01, local01
02b2c     F0 37 B1 FD | 	call	#__system___string_cmp
02b30     00 FA 0D F2 | 	cmp	result1, #0 wz
02b34     AC 00 90 AD |  if_e	jmp	#LR__0151
02b38     B0 00 90 FD | 	jmp	#LR__0152
02b3c                 | LR__0130
02b3c     01 FA 05 F6 | 	mov	result1, #1
02b40     AC 00 90 FD | 	jmp	#LR__0153
02b44                 | LR__0131
02b44     02 FA 05 F6 | 	mov	result1, #2
02b48     A4 00 90 FD | 	jmp	#LR__0153
02b4c                 | LR__0132
02b4c     03 FA 05 F6 | 	mov	result1, #3
02b50     9C 00 90 FD | 	jmp	#LR__0153
02b54                 | LR__0133
02b54     04 FA 05 F6 | 	mov	result1, #4
02b58     94 00 90 FD | 	jmp	#LR__0153
02b5c                 | LR__0134
02b5c     05 FA 05 F6 | 	mov	result1, #5
02b60     8C 00 90 FD | 	jmp	#LR__0153
02b64                 | LR__0135
02b64     06 FA 05 F6 | 	mov	result1, #6
02b68     84 00 90 FD | 	jmp	#LR__0153
02b6c                 | LR__0136
02b6c     07 FA 05 F6 | 	mov	result1, #7
02b70     7C 00 90 FD | 	jmp	#LR__0153
02b74                 | LR__0137
02b74     08 FA 05 F6 | 	mov	result1, #8
02b78     74 00 90 FD | 	jmp	#LR__0153
02b7c                 | LR__0138
02b7c     09 FA 05 F6 | 	mov	result1, #9
02b80     6C 00 90 FD | 	jmp	#LR__0153
02b84                 | LR__0139
02b84     0A FA 05 F6 | 	mov	result1, #10
02b88     64 00 90 FD | 	jmp	#LR__0153
02b8c                 | LR__0140
02b8c     0B FA 05 F6 | 	mov	result1, #11
02b90     5C 00 90 FD | 	jmp	#LR__0153
02b94                 | LR__0141
02b94     0C FA 05 F6 | 	mov	result1, #12
02b98     54 00 90 FD | 	jmp	#LR__0153
02b9c                 | LR__0142
02b9c     0D FA 05 F6 | 	mov	result1, #13
02ba0     4C 00 90 FD | 	jmp	#LR__0153
02ba4                 | LR__0143
02ba4     0E FA 05 F6 | 	mov	result1, #14
02ba8     44 00 90 FD | 	jmp	#LR__0153
02bac                 | LR__0144
02bac     1B FA 05 F6 | 	mov	result1, #27
02bb0     3C 00 90 FD | 	jmp	#LR__0153
02bb4                 | LR__0145
02bb4     27 FA 05 F6 | 	mov	result1, #39
02bb8     34 00 90 FD | 	jmp	#LR__0153
02bbc                 | LR__0146
02bbc     26 FA 05 F6 | 	mov	result1, #38
02bc0     2C 00 90 FD | 	jmp	#LR__0153
02bc4                 | LR__0147
02bc4     10 FA 05 F6 | 	mov	result1, #16
02bc8     24 00 90 FD | 	jmp	#LR__0153
02bcc                 | LR__0148
02bcc     0F FA 05 F6 | 	mov	result1, #15
02bd0     1C 00 90 FD | 	jmp	#LR__0153
02bd4                 | LR__0149
02bd4     2A FA 05 F6 | 	mov	result1, #42
02bd8     14 00 90 FD | 	jmp	#LR__0153
02bdc                 | LR__0150
02bdc     28 FA 05 F6 | 	mov	result1, #40
02be0     0C 00 90 FD | 	jmp	#LR__0153
02be4                 | LR__0151
02be4     29 FA 05 F6 | 	mov	result1, #41
02be8     04 00 90 FD | 	jmp	#LR__0153
02bec                 | LR__0152
02bec     00 FA 05 F6 | 	mov	result1, #0
02bf0                 | LR__0153
02bf0     A7 F0 03 F6 | 	mov	ptra, fp
02bf4     B2 00 A0 FD | 	call	#popregs_
02bf8                 | _isoperator_ret
02bf8     2D 00 64 FD | 	ret
02bfc                 | 
02bfc                 | ' 
02bfc                 | ' function isseparator(s as string) as ubyte
02bfc                 | _isseparator
02bfc     01 4A 05 F6 | 	mov	COUNT_, #1
02c00     A8 00 A0 FD | 	call	#pushregs_
02c04                 | ' 
02c04                 | ' select case s
02c04     09 1F 02 F6 | 	mov	local01, arg01
02c08     2A 01 00 FF 
02c0c     4C 14 06 F6 | 	mov	arg02, ##@LR__4161
02c10     0F 13 02 F6 | 	mov	arg01, local01
02c14     08 37 B1 FD | 	call	#__system___string_cmp
02c18     00 FA 0D F2 | 	cmp	result1, #0 wz
02c1c     54 01 90 AD |  if_e	jmp	#LR__0160
02c20     2A 01 00 FF 
02c24     4E 14 06 F6 | 	mov	arg02, ##@LR__4162
02c28     0F 13 02 F6 | 	mov	arg01, local01
02c2c     F0 36 B1 FD | 	call	#__system___string_cmp
02c30     00 FA 0D F2 | 	cmp	result1, #0 wz
02c34     44 01 90 AD |  if_e	jmp	#LR__0161
02c38     2A 01 00 FF 
02c3c     50 14 06 F6 | 	mov	arg02, ##@LR__4163
02c40     0F 13 02 F6 | 	mov	arg01, local01
02c44     D8 36 B1 FD | 	call	#__system___string_cmp
02c48     00 FA 0D F2 | 	cmp	result1, #0 wz
02c4c     34 01 90 AD |  if_e	jmp	#LR__0162
02c50     2A 01 00 FF 
02c54     52 14 06 F6 | 	mov	arg02, ##@LR__4164
02c58     0F 13 02 F6 | 	mov	arg01, local01
02c5c     C0 36 B1 FD | 	call	#__system___string_cmp
02c60     00 FA 0D F2 | 	cmp	result1, #0 wz
02c64     24 01 90 AD |  if_e	jmp	#LR__0163
02c68     2A 01 00 FF 
02c6c     54 14 06 F6 | 	mov	arg02, ##@LR__4165
02c70     0F 13 02 F6 | 	mov	arg01, local01
02c74     A8 36 B1 FD | 	call	#__system___string_cmp
02c78     00 FA 0D F2 | 	cmp	result1, #0 wz
02c7c     14 01 90 AD |  if_e	jmp	#LR__0164
02c80     2A 01 00 FF 
02c84     56 14 06 F6 | 	mov	arg02, ##@LR__4166
02c88     0F 13 02 F6 | 	mov	arg01, local01
02c8c     90 36 B1 FD | 	call	#__system___string_cmp
02c90     00 FA 0D F2 | 	cmp	result1, #0 wz
02c94     04 01 90 AD |  if_e	jmp	#LR__0165
02c98     2A 01 00 FF 
02c9c     58 14 06 F6 | 	mov	arg02, ##@LR__4167
02ca0     0F 13 02 F6 | 	mov	arg01, local01
02ca4     78 36 B1 FD | 	call	#__system___string_cmp
02ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cac     F4 00 90 AD |  if_e	jmp	#LR__0166
02cb0     2A 01 00 FF 
02cb4     5A 14 06 F6 | 	mov	arg02, ##@LR__4168
02cb8     0F 13 02 F6 | 	mov	arg01, local01
02cbc     60 36 B1 FD | 	call	#__system___string_cmp
02cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
02cc4     E4 00 90 AD |  if_e	jmp	#LR__0167
02cc8     2A 01 00 FF 
02ccc     5C 14 06 F6 | 	mov	arg02, ##@LR__4169
02cd0     0F 13 02 F6 | 	mov	arg01, local01
02cd4     48 36 B1 FD | 	call	#__system___string_cmp
02cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cdc     D4 00 90 AD |  if_e	jmp	#LR__0168
02ce0     2A 01 00 FF 
02ce4     5E 14 06 F6 | 	mov	arg02, ##@LR__4170
02ce8     0F 13 02 F6 | 	mov	arg01, local01
02cec     30 36 B1 FD | 	call	#__system___string_cmp
02cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
02cf4     C4 00 90 AD |  if_e	jmp	#LR__0169
02cf8     2A 01 00 FF 
02cfc     60 14 06 F6 | 	mov	arg02, ##@LR__4171
02d00     0F 13 02 F6 | 	mov	arg01, local01
02d04     18 36 B1 FD | 	call	#__system___string_cmp
02d08     00 FA 0D F2 | 	cmp	result1, #0 wz
02d0c     B4 00 90 AD |  if_e	jmp	#LR__0170
02d10     2A 01 00 FF 
02d14     62 14 06 F6 | 	mov	arg02, ##@LR__4172
02d18     0F 13 02 F6 | 	mov	arg01, local01
02d1c     00 36 B1 FD | 	call	#__system___string_cmp
02d20     00 FA 0D F2 | 	cmp	result1, #0 wz
02d24     A4 00 90 AD |  if_e	jmp	#LR__0171
02d28     2A 01 00 FF 
02d2c     64 14 06 F6 | 	mov	arg02, ##@LR__4173
02d30     0F 13 02 F6 | 	mov	arg01, local01
02d34     E8 35 B1 FD | 	call	#__system___string_cmp
02d38     00 FA 0D F2 | 	cmp	result1, #0 wz
02d3c     94 00 90 AD |  if_e	jmp	#LR__0172
02d40     2A 01 00 FF 
02d44     66 14 06 F6 | 	mov	arg02, ##@LR__4174
02d48     0F 13 02 F6 | 	mov	arg01, local01
02d4c     D0 35 B1 FD | 	call	#__system___string_cmp
02d50     00 FA 0D F2 | 	cmp	result1, #0 wz
02d54     84 00 90 AD |  if_e	jmp	#LR__0173
02d58     2A 01 00 FF 
02d5c     68 14 06 F6 | 	mov	arg02, ##@LR__4175
02d60     0F 13 02 F6 | 	mov	arg01, local01
02d64     B8 35 B1 FD | 	call	#__system___string_cmp
02d68     00 FA 0D F2 | 	cmp	result1, #0 wz
02d6c     74 00 90 AD |  if_e	jmp	#LR__0174
02d70     78 00 90 FD | 	jmp	#LR__0175
02d74                 | LR__0160
02d74     01 FA 05 F6 | 	mov	result1, #1
02d78     74 00 90 FD | 	jmp	#LR__0176
02d7c                 | LR__0161
02d7c     02 FA 05 F6 | 	mov	result1, #2
02d80     6C 00 90 FD | 	jmp	#LR__0176
02d84                 | LR__0162
02d84     1B FA 05 F6 | 	mov	result1, #27
02d88     64 00 90 FD | 	jmp	#LR__0176
02d8c                 | LR__0163
02d8c     11 FA 05 F6 | 	mov	result1, #17
02d90     5C 00 90 FD | 	jmp	#LR__0176
02d94                 | LR__0164
02d94     05 FA 05 F6 | 	mov	result1, #5
02d98     54 00 90 FD | 	jmp	#LR__0176
02d9c                 | LR__0165
02d9c     06 FA 05 F6 | 	mov	result1, #6
02da0     4C 00 90 FD | 	jmp	#LR__0176
02da4                 | LR__0166
02da4     12 FA 05 F6 | 	mov	result1, #18
02da8     44 00 90 FD | 	jmp	#LR__0176
02dac                 | LR__0167
02dac     13 FA 05 F6 | 	mov	result1, #19
02db0     3C 00 90 FD | 	jmp	#LR__0176
02db4                 | LR__0168
02db4     0C FA 05 F6 | 	mov	result1, #12
02db8     34 00 90 FD | 	jmp	#LR__0176
02dbc                 | LR__0169
02dbc     14 FA 05 F6 | 	mov	result1, #20
02dc0     2C 00 90 FD | 	jmp	#LR__0176
02dc4                 | LR__0170
02dc4     15 FA 05 F6 | 	mov	result1, #21
02dc8     24 00 90 FD | 	jmp	#LR__0176
02dcc                 | LR__0171
02dcc     16 FA 05 F6 | 	mov	result1, #22
02dd0     1C 00 90 FD | 	jmp	#LR__0176
02dd4                 | LR__0172
02dd4     FF FB 05 F6 | 	mov	result1, #511
02dd8     14 00 90 FD | 	jmp	#LR__0176
02ddc                 | LR__0173
02ddc     0F FA 05 F6 | 	mov	result1, #15
02de0     0C 00 90 FD | 	jmp	#LR__0176
02de4                 | LR__0174
02de4     10 FA 05 F6 | 	mov	result1, #16
02de8     04 00 90 FD | 	jmp	#LR__0176
02dec                 | LR__0175
02dec     00 FA 05 F6 | 	mov	result1, #0
02df0                 | LR__0176
02df0     A7 F0 03 F6 | 	mov	ptra, fp
02df4     B2 00 A0 FD | 	call	#popregs_
02df8                 | _isseparator_ret
02df8     2D 00 64 FD | 	ret
02dfc                 | 
02dfc                 | ' 
02dfc                 | ' 
02dfc                 | ' function iscommand(s as string) as ubyte
02dfc                 | _iscommand
02dfc     01 4A 05 F6 | 	mov	COUNT_, #1
02e00     A8 00 A0 FD | 	call	#pushregs_
02e04                 | ' 
02e04                 | ' select case s
02e04     09 1F 02 F6 | 	mov	local01, arg01
02e08     2A 01 00 FF 
02e0c     6C 14 06 F6 | 	mov	arg02, ##@LR__4177
02e10     0F 13 02 F6 | 	mov	arg01, local01
02e14     08 35 B1 FD | 	call	#__system___string_cmp
02e18     00 FA 0D F2 | 	cmp	result1, #0 wz
02e1c     84 04 90 AD |  if_e	jmp	#LR__0180
02e20     2A 01 00 FF 
02e24     70 14 06 F6 | 	mov	arg02, ##@LR__4178
02e28     0F 13 02 F6 | 	mov	arg01, local01
02e2c     F0 34 B1 FD | 	call	#__system___string_cmp
02e30     00 FA 0D F2 | 	cmp	result1, #0 wz
02e34     74 04 90 AD |  if_e	jmp	#LR__0181
02e38     2A 01 00 FF 
02e3c     74 14 06 F6 | 	mov	arg02, ##@LR__4179
02e40     0F 13 02 F6 | 	mov	arg01, local01
02e44     D8 34 B1 FD | 	call	#__system___string_cmp
02e48     00 FA 0D F2 | 	cmp	result1, #0 wz
02e4c     64 04 90 AD |  if_e	jmp	#LR__0182
02e50     2A 01 00 FF 
02e54     79 14 06 F6 | 	mov	arg02, ##@LR__4180
02e58     0F 13 02 F6 | 	mov	arg01, local01
02e5c     C0 34 B1 FD | 	call	#__system___string_cmp
02e60     00 FA 0D F2 | 	cmp	result1, #0 wz
02e64     54 04 90 AD |  if_e	jmp	#LR__0183
02e68     2A 01 00 FF 
02e6c     7E 14 06 F6 | 	mov	arg02, ##@LR__4181
02e70     0F 13 02 F6 | 	mov	arg01, local01
02e74     A8 34 B1 FD | 	call	#__system___string_cmp
02e78     00 FA 0D F2 | 	cmp	result1, #0 wz
02e7c     44 04 90 AD |  if_e	jmp	#LR__0184
02e80     2A 01 00 FF 
02e84     84 14 06 F6 | 	mov	arg02, ##@LR__4182
02e88     0F 13 02 F6 | 	mov	arg01, local01
02e8c     90 34 B1 FD | 	call	#__system___string_cmp
02e90     00 FA 0D F2 | 	cmp	result1, #0 wz
02e94     34 04 90 AD |  if_e	jmp	#LR__0185
02e98     2A 01 00 FF 
02e9c     8B 14 06 F6 | 	mov	arg02, ##@LR__4183
02ea0     0F 13 02 F6 | 	mov	arg01, local01
02ea4     78 34 B1 FD | 	call	#__system___string_cmp
02ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
02eac     24 04 90 AD |  if_e	jmp	#LR__0186
02eb0     2A 01 00 FF 
02eb4     93 14 06 F6 | 	mov	arg02, ##@LR__4184
02eb8     0F 13 02 F6 | 	mov	arg01, local01
02ebc     60 34 B1 FD | 	call	#__system___string_cmp
02ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec4     14 04 90 AD |  if_e	jmp	#LR__0187
02ec8     2A 01 00 FF 
02ecc     97 14 06 F6 | 	mov	arg02, ##@LR__4185
02ed0     0F 13 02 F6 | 	mov	arg01, local01
02ed4     48 34 B1 FD | 	call	#__system___string_cmp
02ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
02edc     04 04 90 AD |  if_e	jmp	#LR__0188
02ee0     2A 01 00 FF 
02ee4     9D 14 06 F6 | 	mov	arg02, ##@LR__4186
02ee8     0F 13 02 F6 | 	mov	arg01, local01
02eec     30 34 B1 FD | 	call	#__system___string_cmp
02ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ef4     F4 03 90 AD |  if_e	jmp	#LR__0189
02ef8     2A 01 00 FF 
02efc     A3 14 06 F6 | 	mov	arg02, ##@LR__4187
02f00     0F 13 02 F6 | 	mov	arg01, local01
02f04     18 34 B1 FD | 	call	#__system___string_cmp
02f08     00 FA 0D F2 | 	cmp	result1, #0 wz
02f0c     E4 03 90 AD |  if_e	jmp	#LR__0190
02f10     2A 01 00 FF 
02f14     A9 14 06 F6 | 	mov	arg02, ##@LR__4188
02f18     0F 13 02 F6 | 	mov	arg01, local01
02f1c     00 34 B1 FD | 	call	#__system___string_cmp
02f20     00 FA 0D F2 | 	cmp	result1, #0 wz
02f24     D4 03 90 AD |  if_e	jmp	#LR__0191
02f28     2A 01 00 FF 
02f2c     AE 14 06 F6 | 	mov	arg02, ##@LR__4189
02f30     0F 13 02 F6 | 	mov	arg01, local01
02f34     E8 33 B1 FD | 	call	#__system___string_cmp
02f38     00 FA 0D F2 | 	cmp	result1, #0 wz
02f3c     C4 03 90 AD |  if_e	jmp	#LR__0192
02f40     2A 01 00 FF 
02f44     B2 14 06 F6 | 	mov	arg02, ##@LR__4190
02f48     0F 13 02 F6 | 	mov	arg01, local01
02f4c     D0 33 B1 FD | 	call	#__system___string_cmp
02f50     00 FA 0D F2 | 	cmp	result1, #0 wz
02f54     B4 03 90 AD |  if_e	jmp	#LR__0193
02f58     2A 01 00 FF 
02f5c     B7 14 06 F6 | 	mov	arg02, ##@LR__4191
02f60     0F 13 02 F6 | 	mov	arg01, local01
02f64     B8 33 B1 FD | 	call	#__system___string_cmp
02f68     00 FA 0D F2 | 	cmp	result1, #0 wz
02f6c     A4 03 90 AD |  if_e	jmp	#LR__0194
02f70     2A 01 00 FF 
02f74     BD 14 06 F6 | 	mov	arg02, ##@LR__4192
02f78     0F 13 02 F6 | 	mov	arg01, local01
02f7c     A0 33 B1 FD | 	call	#__system___string_cmp
02f80     00 FA 0D F2 | 	cmp	result1, #0 wz
02f84     94 03 90 AD |  if_e	jmp	#LR__0195
02f88     2A 01 00 FF 
02f8c     C2 14 06 F6 | 	mov	arg02, ##@LR__4193
02f90     0F 13 02 F6 | 	mov	arg01, local01
02f94     88 33 B1 FD | 	call	#__system___string_cmp
02f98     00 FA 0D F2 | 	cmp	result1, #0 wz
02f9c     84 03 90 AD |  if_e	jmp	#LR__0196
02fa0     2A 01 00 FF 
02fa4     C7 14 06 F6 | 	mov	arg02, ##@LR__4194
02fa8     0F 13 02 F6 | 	mov	arg01, local01
02fac     70 33 B1 FD | 	call	#__system___string_cmp
02fb0     00 FA 0D F2 | 	cmp	result1, #0 wz
02fb4     74 03 90 AD |  if_e	jmp	#LR__0197
02fb8     2A 01 00 FF 
02fbc     CC 14 06 F6 | 	mov	arg02, ##@LR__4195
02fc0     0F 13 02 F6 | 	mov	arg01, local01
02fc4     58 33 B1 FD | 	call	#__system___string_cmp
02fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
02fcc     64 03 90 AD |  if_e	jmp	#LR__0198
02fd0     2A 01 00 FF 
02fd4     D5 14 06 F6 | 	mov	arg02, ##@LR__4196
02fd8     0F 13 02 F6 | 	mov	arg01, local01
02fdc     40 33 B1 FD | 	call	#__system___string_cmp
02fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
02fe4     54 03 90 AD |  if_e	jmp	#LR__0199
02fe8     2A 01 00 FF 
02fec     DC 14 06 F6 | 	mov	arg02, ##@LR__4197
02ff0     0F 13 02 F6 | 	mov	arg01, local01
02ff4     28 33 B1 FD | 	call	#__system___string_cmp
02ff8     00 FA 0D F2 | 	cmp	result1, #0 wz
02ffc     44 03 90 AD |  if_e	jmp	#LR__0200
03000     2A 01 00 FF 
03004     E4 14 06 F6 | 	mov	arg02, ##@LR__4198
03008     0F 13 02 F6 | 	mov	arg01, local01
0300c     10 33 B1 FD | 	call	#__system___string_cmp
03010     00 FA 0D F2 | 	cmp	result1, #0 wz
03014     34 03 90 AD |  if_e	jmp	#LR__0201
03018     2A 01 00 FF 
0301c     E7 14 06 F6 | 	mov	arg02, ##@LR__4199
03020     0F 13 02 F6 | 	mov	arg01, local01
03024     F8 32 B1 FD | 	call	#__system___string_cmp
03028     00 FA 0D F2 | 	cmp	result1, #0 wz
0302c     24 03 90 AD |  if_e	jmp	#LR__0202
03030     2A 01 00 FF 
03034     EC 14 06 F6 | 	mov	arg02, ##@LR__4200
03038     0F 13 02 F6 | 	mov	arg01, local01
0303c     E0 32 B1 FD | 	call	#__system___string_cmp
03040     00 FA 0D F2 | 	cmp	result1, #0 wz
03044     14 03 90 AD |  if_e	jmp	#LR__0203
03048     2A 01 00 FF 
0304c     F1 14 06 F6 | 	mov	arg02, ##@LR__4201
03050     0F 13 02 F6 | 	mov	arg01, local01
03054     C8 32 B1 FD | 	call	#__system___string_cmp
03058     00 FA 0D F2 | 	cmp	result1, #0 wz
0305c     04 03 90 AD |  if_e	jmp	#LR__0204
03060     2A 01 00 FF 
03064     F6 14 06 F6 | 	mov	arg02, ##@LR__4202
03068     0F 13 02 F6 | 	mov	arg01, local01
0306c     B0 32 B1 FD | 	call	#__system___string_cmp
03070     00 FA 0D F2 | 	cmp	result1, #0 wz
03074     F4 02 90 AD |  if_e	jmp	#LR__0205
03078     2A 01 00 FF 
0307c     FA 14 06 F6 | 	mov	arg02, ##@LR__4203
03080     0F 13 02 F6 | 	mov	arg01, local01
03084     98 32 B1 FD | 	call	#__system___string_cmp
03088     00 FA 0D F2 | 	cmp	result1, #0 wz
0308c     E4 02 90 AD |  if_e	jmp	#LR__0206
03090     2A 01 00 FF 
03094     FE 14 06 F6 | 	mov	arg02, ##@LR__4204
03098     0F 13 02 F6 | 	mov	arg01, local01
0309c     80 32 B1 FD | 	call	#__system___string_cmp
030a0     00 FA 0D F2 | 	cmp	result1, #0 wz
030a4     D4 02 90 AD |  if_e	jmp	#LR__0207
030a8     2A 01 00 FF 
030ac     03 15 06 F6 | 	mov	arg02, ##@LR__4205
030b0     0F 13 02 F6 | 	mov	arg01, local01
030b4     68 32 B1 FD | 	call	#__system___string_cmp
030b8     00 FA 0D F2 | 	cmp	result1, #0 wz
030bc     C4 02 90 AD |  if_e	jmp	#LR__0208
030c0     2A 01 00 FF 
030c4     09 15 06 F6 | 	mov	arg02, ##@LR__4206
030c8     0F 13 02 F6 | 	mov	arg01, local01
030cc     50 32 B1 FD | 	call	#__system___string_cmp
030d0     00 FA 0D F2 | 	cmp	result1, #0 wz
030d4     B4 02 90 AD |  if_e	jmp	#LR__0209
030d8     2A 01 00 FF 
030dc     0D 15 06 F6 | 	mov	arg02, ##@LR__4207
030e0     0F 13 02 F6 | 	mov	arg01, local01
030e4     38 32 B1 FD | 	call	#__system___string_cmp
030e8     00 FA 0D F2 | 	cmp	result1, #0 wz
030ec     A4 02 90 AD |  if_e	jmp	#LR__0210
030f0     2A 01 00 FF 
030f4     12 15 06 F6 | 	mov	arg02, ##@LR__4208
030f8     0F 13 02 F6 | 	mov	arg01, local01
030fc     20 32 B1 FD | 	call	#__system___string_cmp
03100     00 FA 0D F2 | 	cmp	result1, #0 wz
03104     94 02 90 AD |  if_e	jmp	#LR__0211
03108     2A 01 00 FF 
0310c     17 15 06 F6 | 	mov	arg02, ##@LR__4209
03110     0F 13 02 F6 | 	mov	arg01, local01
03114     08 32 B1 FD | 	call	#__system___string_cmp
03118     00 FA 0D F2 | 	cmp	result1, #0 wz
0311c     84 02 90 AD |  if_e	jmp	#LR__0212
03120     2A 01 00 FF 
03124     1D 15 06 F6 | 	mov	arg02, ##@LR__4210
03128     0F 13 02 F6 | 	mov	arg01, local01
0312c     F0 31 B1 FD | 	call	#__system___string_cmp
03130     00 FA 0D F2 | 	cmp	result1, #0 wz
03134     74 02 90 AD |  if_e	jmp	#LR__0213
03138     2A 01 00 FF 
0313c     24 15 06 F6 | 	mov	arg02, ##@LR__4211
03140     0F 13 02 F6 | 	mov	arg01, local01
03144     D8 31 B1 FD | 	call	#__system___string_cmp
03148     00 FA 0D F2 | 	cmp	result1, #0 wz
0314c     64 02 90 AD |  if_e	jmp	#LR__0214
03150     2A 01 00 FF 
03154     2A 15 06 F6 | 	mov	arg02, ##@LR__4212
03158     0F 13 02 F6 | 	mov	arg01, local01
0315c     C0 31 B1 FD | 	call	#__system___string_cmp
03160     00 FA 0D F2 | 	cmp	result1, #0 wz
03164     54 02 90 AD |  if_e	jmp	#LR__0215
03168     2A 01 00 FF 
0316c     34 15 06 F6 | 	mov	arg02, ##@LR__4213
03170     0F 13 02 F6 | 	mov	arg01, local01
03174     A8 31 B1 FD | 	call	#__system___string_cmp
03178     00 FA 0D F2 | 	cmp	result1, #0 wz
0317c     44 02 90 AD |  if_e	jmp	#LR__0216
03180     2A 01 00 FF 
03184     3B 15 06 F6 | 	mov	arg02, ##@LR__4214
03188     0F 13 02 F6 | 	mov	arg01, local01
0318c     90 31 B1 FD | 	call	#__system___string_cmp
03190     00 FA 0D F2 | 	cmp	result1, #0 wz
03194     34 02 90 AD |  if_e	jmp	#LR__0217
03198     2A 01 00 FF 
0319c     45 15 06 F6 | 	mov	arg02, ##@LR__4215
031a0     0F 13 02 F6 | 	mov	arg01, local01
031a4     78 31 B1 FD | 	call	#__system___string_cmp
031a8     00 FA 0D F2 | 	cmp	result1, #0 wz
031ac     24 02 90 AD |  if_e	jmp	#LR__0218
031b0     2A 01 00 FF 
031b4     4A 15 06 F6 | 	mov	arg02, ##@LR__4216
031b8     0F 13 02 F6 | 	mov	arg01, local01
031bc     60 31 B1 FD | 	call	#__system___string_cmp
031c0     00 FA 0D F2 | 	cmp	result1, #0 wz
031c4     14 02 90 AD |  if_e	jmp	#LR__0219
031c8     2A 01 00 FF 
031cc     4E 15 06 F6 | 	mov	arg02, ##@LR__4217
031d0     0F 13 02 F6 | 	mov	arg01, local01
031d4     48 31 B1 FD | 	call	#__system___string_cmp
031d8     00 FA 0D F2 | 	cmp	result1, #0 wz
031dc     04 02 90 AD |  if_e	jmp	#LR__0220
031e0     2A 01 00 FF 
031e4     54 15 06 F6 | 	mov	arg02, ##@LR__4218
031e8     0F 13 02 F6 | 	mov	arg01, local01
031ec     30 31 B1 FD | 	call	#__system___string_cmp
031f0     00 FA 0D F2 | 	cmp	result1, #0 wz
031f4     F4 01 90 AD |  if_e	jmp	#LR__0221
031f8     2A 01 00 FF 
031fc     5A 15 06 F6 | 	mov	arg02, ##@LR__4219
03200     0F 13 02 F6 | 	mov	arg01, local01
03204     18 31 B1 FD | 	call	#__system___string_cmp
03208     00 FA 0D F2 | 	cmp	result1, #0 wz
0320c     E4 01 90 AD |  if_e	jmp	#LR__0222
03210     2A 01 00 FF 
03214     60 15 06 F6 | 	mov	arg02, ##@LR__4220
03218     0F 13 02 F6 | 	mov	arg01, local01
0321c     00 31 B1 FD | 	call	#__system___string_cmp
03220     00 FA 0D F2 | 	cmp	result1, #0 wz
03224     D4 01 90 AD |  if_e	jmp	#LR__0223
03228     2A 01 00 FF 
0322c     69 15 06 F6 | 	mov	arg02, ##@LR__4221
03230     0F 13 02 F6 | 	mov	arg01, local01
03234     E8 30 B1 FD | 	call	#__system___string_cmp
03238     00 FA 0D F2 | 	cmp	result1, #0 wz
0323c     C4 01 90 AD |  if_e	jmp	#LR__0224
03240     2A 01 00 FF 
03244     6F 15 06 F6 | 	mov	arg02, ##@LR__4222
03248     0F 13 02 F6 | 	mov	arg01, local01
0324c     D0 30 B1 FD | 	call	#__system___string_cmp
03250     00 FA 0D F2 | 	cmp	result1, #0 wz
03254     B4 01 90 AD |  if_e	jmp	#LR__0225
03258     2A 01 00 FF 
0325c     75 15 06 F6 | 	mov	arg02, ##@LR__4223
03260     0F 13 02 F6 | 	mov	arg01, local01
03264     B8 30 B1 FD | 	call	#__system___string_cmp
03268     00 FA 0D F2 | 	cmp	result1, #0 wz
0326c     A4 01 90 AD |  if_e	jmp	#LR__0226
03270     2A 01 00 FF 
03274     7E 15 06 F6 | 	mov	arg02, ##@LR__4224
03278     0F 13 02 F6 | 	mov	arg01, local01
0327c     A0 30 B1 FD | 	call	#__system___string_cmp
03280     00 FA 0D F2 | 	cmp	result1, #0 wz
03284     94 01 90 AD |  if_e	jmp	#LR__0227
03288     2A 01 00 FF 
0328c     88 15 06 F6 | 	mov	arg02, ##@LR__4225
03290     0F 13 02 F6 | 	mov	arg01, local01
03294     88 30 B1 FD | 	call	#__system___string_cmp
03298     00 FA 0D F2 | 	cmp	result1, #0 wz
0329c     84 01 90 AD |  if_e	jmp	#LR__0228
032a0     88 01 90 FD | 	jmp	#LR__0229
032a4                 | LR__0180
032a4     40 FA 05 F6 | 	mov	result1, #64
032a8     84 01 90 FD | 	jmp	#LR__0230
032ac                 | LR__0181
032ac     41 FA 05 F6 | 	mov	result1, #65
032b0     7C 01 90 FD | 	jmp	#LR__0230
032b4                 | LR__0182
032b4     42 FA 05 F6 | 	mov	result1, #66
032b8     74 01 90 FD | 	jmp	#LR__0230
032bc                 | LR__0183
032bc     43 FA 05 F6 | 	mov	result1, #67
032c0     6C 01 90 FD | 	jmp	#LR__0230
032c4                 | LR__0184
032c4     44 FA 05 F6 | 	mov	result1, #68
032c8     64 01 90 FD | 	jmp	#LR__0230
032cc                 | LR__0185
032cc     45 FA 05 F6 | 	mov	result1, #69
032d0     5C 01 90 FD | 	jmp	#LR__0230
032d4                 | LR__0186
032d4     46 FA 05 F6 | 	mov	result1, #70
032d8     54 01 90 FD | 	jmp	#LR__0230
032dc                 | LR__0187
032dc     47 FA 05 F6 | 	mov	result1, #71
032e0     4C 01 90 FD | 	jmp	#LR__0230
032e4                 | LR__0188
032e4     48 FA 05 F6 | 	mov	result1, #72
032e8     44 01 90 FD | 	jmp	#LR__0230
032ec                 | LR__0189
032ec     49 FA 05 F6 | 	mov	result1, #73
032f0     3C 01 90 FD | 	jmp	#LR__0230
032f4                 | LR__0190
032f4     44 FA 05 F6 | 	mov	result1, #68
032f8     34 01 90 FD | 	jmp	#LR__0230
032fc                 | LR__0191
032fc     4C FA 05 F6 | 	mov	result1, #76
03300     2C 01 90 FD | 	jmp	#LR__0230
03304                 | LR__0192
03304     4D FA 05 F6 | 	mov	result1, #77
03308     24 01 90 FD | 	jmp	#LR__0230
0330c                 | LR__0193
0330c     4E FA 05 F6 | 	mov	result1, #78
03310     1C 01 90 FD | 	jmp	#LR__0230
03314                 | LR__0194
03314     50 FA 05 F6 | 	mov	result1, #80
03318     14 01 90 FD | 	jmp	#LR__0230
0331c                 | LR__0195
0331c     51 FA 05 F6 | 	mov	result1, #81
03320     0C 01 90 FD | 	jmp	#LR__0230
03324                 | LR__0196
03324     52 FA 05 F6 | 	mov	result1, #82
03328     04 01 90 FD | 	jmp	#LR__0230
0332c                 | LR__0197
0332c     59 FA 05 F6 | 	mov	result1, #89
03330     FC 00 90 FD | 	jmp	#LR__0230
03334                 | LR__0198
03334     55 FA 05 F6 | 	mov	result1, #85
03338     F4 00 90 FD | 	jmp	#LR__0230
0333c                 | LR__0199
0333c     56 FA 05 F6 | 	mov	result1, #86
03340     EC 00 90 FD | 	jmp	#LR__0230
03344                 | LR__0200
03344     57 FA 05 F6 | 	mov	result1, #87
03348     E4 00 90 FD | 	jmp	#LR__0230
0334c                 | LR__0201
0334c     58 FA 05 F6 | 	mov	result1, #88
03350     DC 00 90 FD | 	jmp	#LR__0230
03354                 | LR__0202
03354     5A FA 05 F6 | 	mov	result1, #90
03358     D4 00 90 FD | 	jmp	#LR__0230
0335c                 | LR__0203
0335c     5B FA 05 F6 | 	mov	result1, #91
03360     CC 00 90 FD | 	jmp	#LR__0230
03364                 | LR__0204
03364     5C FA 05 F6 | 	mov	result1, #92
03368     C4 00 90 FD | 	jmp	#LR__0230
0336c                 | LR__0205
0336c     5D FA 05 F6 | 	mov	result1, #93
03370     BC 00 90 FD | 	jmp	#LR__0230
03374                 | LR__0206
03374     4A FA 05 F6 | 	mov	result1, #74
03378     B4 00 90 FD | 	jmp	#LR__0230
0337c                 | LR__0207
0337c     4B FA 05 F6 | 	mov	result1, #75
03380     AC 00 90 FD | 	jmp	#LR__0230
03384                 | LR__0208
03384     5E FA 05 F6 | 	mov	result1, #94
03388     A4 00 90 FD | 	jmp	#LR__0230
0338c                 | LR__0209
0338c     5F FA 05 F6 | 	mov	result1, #95
03390     9C 00 90 FD | 	jmp	#LR__0230
03394                 | LR__0210
03394     60 FA 05 F6 | 	mov	result1, #96
03398     94 00 90 FD | 	jmp	#LR__0230
0339c                 | LR__0211
0339c     61 FA 05 F6 | 	mov	result1, #97
033a0     8C 00 90 FD | 	jmp	#LR__0230
033a4                 | LR__0212
033a4     63 FA 05 F6 | 	mov	result1, #99
033a8     84 00 90 FD | 	jmp	#LR__0230
033ac                 | LR__0213
033ac     68 FA 05 F6 | 	mov	result1, #104
033b0     7C 00 90 FD | 	jmp	#LR__0230
033b4                 | LR__0214
033b4     69 FA 05 F6 | 	mov	result1, #105
033b8     74 00 90 FD | 	jmp	#LR__0230
033bc                 | LR__0215
033bc     6C FA 05 F6 | 	mov	result1, #108
033c0     6C 00 90 FD | 	jmp	#LR__0230
033c4                 | LR__0216
033c4     6D FA 05 F6 | 	mov	result1, #109
033c8     64 00 90 FD | 	jmp	#LR__0230
033cc                 | LR__0217
033cc     70 FA 05 F6 | 	mov	result1, #112
033d0     5C 00 90 FD | 	jmp	#LR__0230
033d4                 | LR__0218
033d4     71 FA 05 F6 | 	mov	result1, #113
033d8     54 00 90 FD | 	jmp	#LR__0230
033dc                 | LR__0219
033dc     72 FA 05 F6 | 	mov	result1, #114
033e0     4C 00 90 FD | 	jmp	#LR__0230
033e4                 | LR__0220
033e4     79 FA 05 F6 | 	mov	result1, #121
033e8     44 00 90 FD | 	jmp	#LR__0230
033ec                 | LR__0221
033ec     77 FA 05 F6 | 	mov	result1, #119
033f0     3C 00 90 FD | 	jmp	#LR__0230
033f4                 | LR__0222
033f4     78 FA 05 F6 | 	mov	result1, #120
033f8     34 00 90 FD | 	jmp	#LR__0230
033fc                 | LR__0223
033fc     7C FA 05 F6 | 	mov	result1, #124
03400     2C 00 90 FD | 	jmp	#LR__0230
03404                 | LR__0224
03404     7D FA 05 F6 | 	mov	result1, #125
03408     24 00 90 FD | 	jmp	#LR__0230
0340c                 | LR__0225
0340c     7E FA 05 F6 | 	mov	result1, #126
03410     1C 00 90 FD | 	jmp	#LR__0230
03414                 | LR__0226
03414     7F FA 05 F6 | 	mov	result1, #127
03418     14 00 90 FD | 	jmp	#LR__0230
0341c                 | LR__0227
0341c     80 FA 05 F6 | 	mov	result1, #128
03420     0C 00 90 FD | 	jmp	#LR__0230
03424                 | LR__0228
03424     81 FA 05 F6 | 	mov	result1, #129
03428     04 00 90 FD | 	jmp	#LR__0230
0342c                 | LR__0229
0342c     00 FA 05 F6 | 	mov	result1, #0
03430                 | LR__0230
03430     A7 F0 03 F6 | 	mov	ptra, fp
03434     B2 00 A0 FD | 	call	#popregs_
03438                 | _iscommand_ret
03438     2D 00 64 FD | 	ret
0343c                 | 
0343c                 | ' 
0343c                 | ' function isfunction(s as string) as ubyte
0343c                 | _isfunction
0343c     01 4A 05 F6 | 	mov	COUNT_, #1
03440     A8 00 A0 FD | 	call	#pushregs_
03444                 | ' 
03444                 | ' select case s
03444     09 1F 02 F6 | 	mov	local01, arg01
03448     2A 01 00 FF 
0344c     91 15 06 F6 | 	mov	arg02, ##@LR__4226
03450     0F 13 02 F6 | 	mov	arg01, local01
03454     C8 2E B1 FD | 	call	#__system___string_cmp
03458     00 FA 0D F2 | 	cmp	result1, #0 wz
0345c     24 01 90 AD |  if_e	jmp	#LR__0240
03460     2A 01 00 FF 
03464     95 15 06 F6 | 	mov	arg02, ##@LR__4227
03468     0F 13 02 F6 | 	mov	arg01, local01
0346c     B0 2E B1 FD | 	call	#__system___string_cmp
03470     00 FA 0D F2 | 	cmp	result1, #0 wz
03474     14 01 90 AD |  if_e	jmp	#LR__0241
03478     2A 01 00 FF 
0347c     9C 15 06 F6 | 	mov	arg02, ##@LR__4228
03480     0F 13 02 F6 | 	mov	arg01, local01
03484     98 2E B1 FD | 	call	#__system___string_cmp
03488     00 FA 0D F2 | 	cmp	result1, #0 wz
0348c     04 01 90 AD |  if_e	jmp	#LR__0242
03490     2A 01 00 FF 
03494     A3 15 06 F6 | 	mov	arg02, ##@LR__4229
03498     0F 13 02 F6 | 	mov	arg01, local01
0349c     80 2E B1 FD | 	call	#__system___string_cmp
034a0     00 FA 0D F2 | 	cmp	result1, #0 wz
034a4     F4 00 90 AD |  if_e	jmp	#LR__0243
034a8     2A 01 00 FF 
034ac     AA 15 06 F6 | 	mov	arg02, ##@LR__4230
034b0     0F 13 02 F6 | 	mov	arg01, local01
034b4     68 2E B1 FD | 	call	#__system___string_cmp
034b8     00 FA 0D F2 | 	cmp	result1, #0 wz
034bc     E4 00 90 AD |  if_e	jmp	#LR__0244
034c0     2A 01 00 FF 
034c4     B1 15 06 F6 | 	mov	arg02, ##@LR__4231
034c8     0F 13 02 F6 | 	mov	arg01, local01
034cc     50 2E B1 FD | 	call	#__system___string_cmp
034d0     00 FA 0D F2 | 	cmp	result1, #0 wz
034d4     D4 00 90 AD |  if_e	jmp	#LR__0245
034d8     2A 01 00 FF 
034dc     B9 15 06 F6 | 	mov	arg02, ##@LR__4232
034e0     0F 13 02 F6 | 	mov	arg01, local01
034e4     38 2E B1 FD | 	call	#__system___string_cmp
034e8     00 FA 0D F2 | 	cmp	result1, #0 wz
034ec     C4 00 90 AD |  if_e	jmp	#LR__0246
034f0     2A 01 00 FF 
034f4     BD 15 06 F6 | 	mov	arg02, ##@LR__4233
034f8     0F 13 02 F6 | 	mov	arg01, local01
034fc     20 2E B1 FD | 	call	#__system___string_cmp
03500     00 FA 0D F2 | 	cmp	result1, #0 wz
03504     B4 00 90 AD |  if_e	jmp	#LR__0247
03508     2A 01 00 FF 
0350c     C3 15 06 F6 | 	mov	arg02, ##@LR__4234
03510     0F 13 02 F6 | 	mov	arg01, local01
03514     08 2E B1 FD | 	call	#__system___string_cmp
03518     00 FA 0D F2 | 	cmp	result1, #0 wz
0351c     A4 00 90 AD |  if_e	jmp	#LR__0248
03520     2A 01 00 FF 
03524     C9 15 06 F6 | 	mov	arg02, ##@LR__4235
03528     0F 13 02 F6 | 	mov	arg01, local01
0352c     F0 2D B1 FD | 	call	#__system___string_cmp
03530     00 FA 0D F2 | 	cmp	result1, #0 wz
03534     94 00 90 AD |  if_e	jmp	#LR__0249
03538     2A 01 00 FF 
0353c     D2 15 06 F6 | 	mov	arg02, ##@LR__4236
03540     0F 13 02 F6 | 	mov	arg01, local01
03544     D8 2D B1 FD | 	call	#__system___string_cmp
03548     00 FA 0D F2 | 	cmp	result1, #0 wz
0354c     84 00 90 AD |  if_e	jmp	#LR__0250
03550     2A 01 00 FF 
03554     D8 15 06 F6 | 	mov	arg02, ##@LR__4237
03558     0F 13 02 F6 | 	mov	arg01, local01
0355c     C0 2D B1 FD | 	call	#__system___string_cmp
03560     00 FA 0D F2 | 	cmp	result1, #0 wz
03564     74 00 90 AD |  if_e	jmp	#LR__0251
03568     2A 01 00 FF 
0356c     E0 15 06 F6 | 	mov	arg02, ##@LR__4238
03570     0F 13 02 F6 | 	mov	arg01, local01
03574     A8 2D B1 FD | 	call	#__system___string_cmp
03578     00 FA 0D F2 | 	cmp	result1, #0 wz
0357c     64 00 90 AD |  if_e	jmp	#LR__0252
03580     68 00 90 FD | 	jmp	#LR__0253
03584                 | LR__0240
03584     54 FA 05 F6 | 	mov	result1, #84
03588     64 00 90 FD | 	jmp	#LR__0254
0358c                 | LR__0241
0358c     64 FA 05 F6 | 	mov	result1, #100
03590     5C 00 90 FD | 	jmp	#LR__0254
03594                 | LR__0242
03594     65 FA 05 F6 | 	mov	result1, #101
03598     54 00 90 FD | 	jmp	#LR__0254
0359c                 | LR__0243
0359c     66 FA 05 F6 | 	mov	result1, #102
035a0     4C 00 90 FD | 	jmp	#LR__0254
035a4                 | LR__0244
035a4     67 FA 05 F6 | 	mov	result1, #103
035a8     44 00 90 FD | 	jmp	#LR__0254
035ac                 | LR__0245
035ac     62 FA 05 F6 | 	mov	result1, #98
035b0     3C 00 90 FD | 	jmp	#LR__0254
035b4                 | LR__0246
035b4     6B FA 05 F6 | 	mov	result1, #107
035b8     34 00 90 FD | 	jmp	#LR__0254
035bc                 | LR__0247
035bc     6A FA 05 F6 | 	mov	result1, #106
035c0     2C 00 90 FD | 	jmp	#LR__0254
035c4                 | LR__0248
035c4     6E FA 05 F6 | 	mov	result1, #110
035c8     24 00 90 FD | 	jmp	#LR__0254
035cc                 | LR__0249
035cc     6F FA 05 F6 | 	mov	result1, #111
035d0     1C 00 90 FD | 	jmp	#LR__0254
035d4                 | LR__0250
035d4     76 FA 05 F6 | 	mov	result1, #118
035d8     14 00 90 FD | 	jmp	#LR__0254
035dc                 | LR__0251
035dc     7B FA 05 F6 | 	mov	result1, #123
035e0     0C 00 90 FD | 	jmp	#LR__0254
035e4                 | LR__0252
035e4     7A FA 05 F6 | 	mov	result1, #122
035e8     04 00 90 FD | 	jmp	#LR__0254
035ec                 | LR__0253
035ec     00 FA 05 F6 | 	mov	result1, #0
035f0                 | LR__0254
035f0     A7 F0 03 F6 | 	mov	ptra, fp
035f4     B2 00 A0 FD | 	call	#popregs_
035f8                 | _isfunction_ret
035f8     2D 00 64 FD | 	ret
035fc                 | 
035fc                 | ' 
035fc                 | ' function isname(s as string) as boolean
035fc                 | _isname
035fc     0D 4A 05 F6 | 	mov	COUNT_, #13
03600     A8 00 A0 FD | 	call	#pushregs_
03604     09 1F 02 F6 | 	mov	local01, arg01
03608     09 21 02 F6 | 	mov	local02, arg01
0360c     97 06 48 FB | 	callpa	#(@LR__0261-@LR__0260)>>2,fcache_load_ptr_
03610                 | LR__0260
03610     10 FB C9 FA | 	rdbyte	result1, local02 wz
03614     01 20 06 51 |  if_ne	add	local02, #1
03618     F4 FF 9F 5D |  if_ne	jmp	#LR__0260
0361c                 | LR__0261
0361c     09 21 82 F1 | 	sub	local02, arg01
03620     10 FB 01 F6 | 	mov	result1, local02
03624     FD 22 0A F6 | 	mov	local03, result1 wz
03628     00 FA 05 A6 |  if_e	mov	result1, #0
0362c     34 02 90 AD |  if_e	jmp	#LR__0273
03630     0F 13 02 F6 | 	mov	arg01, local01
03634     01 14 06 F6 | 	mov	arg02, #1
03638     01 16 06 F6 | 	mov	arg03, #1
0363c     E0 4D B1 FD | 	call	#__system__Mid_S
03640     FD 24 02 F6 | 	mov	local04, result1
03644                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
03644     2A 01 00 FF 
03648     E6 15 06 F6 | 	mov	arg02, ##@LR__4239
0364c     12 13 02 F6 | 	mov	arg01, local04
03650     CC 2C B1 FD | 	call	#__system___string_cmp
03654     00 FA 55 F2 | 	cmps	result1, #0 wc
03658     18 00 90 CD |  if_b	jmp	#LR__0262
0365c     2A 01 00 FF 
03660     E8 15 06 F6 | 	mov	arg02, ##@LR__4240
03664     12 13 02 F6 | 	mov	arg01, local04
03668     B4 2C B1 FD | 	call	#__system___string_cmp
0366c     01 FA 55 F2 | 	cmps	result1, #1 wc
03670     1C 00 90 CD |  if_b	jmp	#LR__0263
03674                 | LR__0262
03674     2A 01 00 FF 
03678     EA 15 06 F6 | 	mov	arg02, ##@LR__4241
0367c     12 13 02 F6 | 	mov	arg01, local04
03680     9C 2C B1 FD | 	call	#__system___string_cmp
03684     00 FA 0D F2 | 	cmp	result1, #0 wz
03688     00 FA 05 56 |  if_ne	mov	result1, #0
0368c     D4 01 90 5D |  if_ne	jmp	#LR__0273
03690                 | LR__0263
03690                 | ' if l>2 then 
03690     03 22 56 F2 | 	cmps	local03, #3 wc
03694     C8 01 90 CD |  if_b	jmp	#LR__0272
03698                 | '   for i=2 to l
03698     02 26 06 F6 | 	mov	local05, #2
0369c     11 29 02 F6 | 	mov	local06, local03
036a0     01 28 06 F1 | 	add	local06, #1
036a4                 | LR__0264
036a4     14 27 52 F2 | 	cmps	local05, local06 wc
036a8     B4 01 90 3D |  if_ae	jmp	#LR__0271
036ac     0F 13 02 F6 | 	mov	arg01, local01
036b0     13 15 02 F6 | 	mov	arg02, local05
036b4     01 16 06 F6 | 	mov	arg03, #1
036b8     64 4D B1 FD | 	call	#__system__Mid_S
036bc     FD 24 02 F6 | 	mov	local04, result1
036c0                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false
036c0     11 27 52 F2 | 	cmps	local05, local03 wc
036c4     9C 00 90 3D |  if_ae	jmp	#LR__0267
036c8     2A 01 00 FF 
036cc     EC 15 06 F6 | 	mov	arg02, ##@LR__4242
036d0     12 13 02 F6 | 	mov	arg01, local04
036d4     48 2C B1 FD | 	call	#__system___string_cmp
036d8     00 FA 55 F2 | 	cmps	result1, #0 wc
036dc     18 00 90 CD |  if_b	jmp	#LR__0265
036e0     2A 01 00 FF 
036e4     EE 15 06 F6 | 	mov	arg02, ##@LR__4243
036e8     12 13 02 F6 | 	mov	arg01, local04
036ec     30 2C B1 FD | 	call	#__system___string_cmp
036f0     01 FA 55 F2 | 	cmps	result1, #1 wc
036f4     6C 00 90 CD |  if_b	jmp	#LR__0267
036f8                 | LR__0265
036f8     2A 01 00 FF 
036fc     F0 15 06 F6 | 	mov	arg02, ##@LR__4244
03700     12 13 02 F6 | 	mov	arg01, local04
03704     18 2C B1 FD | 	call	#__system___string_cmp
03708     00 FA 55 F2 | 	cmps	result1, #0 wc
0370c     18 00 90 CD |  if_b	jmp	#LR__0266
03710     2A 01 00 FF 
03714     F2 15 06 F6 | 	mov	arg02, ##@LR__4245
03718     12 13 02 F6 | 	mov	arg01, local04
0371c     00 2C B1 FD | 	call	#__system___string_cmp
03720     01 FA 55 F2 | 	cmps	result1, #1 wc
03724     3C 00 90 CD |  if_b	jmp	#LR__0267
03728                 | LR__0266
03728     2A 01 00 FF 
0372c     F4 2B 06 F6 | 	mov	local07, ##@LR__4246
03730     12 13 02 F6 | 	mov	arg01, local04
03734     15 15 02 F6 | 	mov	arg02, local07
03738     E4 2B B1 FD | 	call	#__system___string_cmp
0373c     00 FA 0D F2 | 	cmp	result1, #0 wz
03740     20 00 90 AD |  if_e	jmp	#LR__0267
03744     2A 01 00 FF 
03748     F6 2D 06 F6 | 	mov	local08, ##@LR__4247
0374c     12 13 02 F6 | 	mov	arg01, local04
03750     16 15 02 F6 | 	mov	arg02, local08
03754     C8 2B B1 FD | 	call	#__system___string_cmp
03758     FD 2E 0A F6 | 	mov	local09, result1 wz
0375c     00 FA 05 56 |  if_ne	mov	result1, #0
03760     00 01 90 5D |  if_ne	jmp	#LR__0273
03764                 | LR__0267
03764                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
03764     11 27 0A F2 | 	cmp	local05, local03 wz
03768     EC 00 90 5D |  if_ne	jmp	#LR__0270
0376c     2A 01 00 FF 
03770     F8 31 06 F6 | 	mov	local10, ##@LR__4248
03774     12 13 02 F6 | 	mov	arg01, local04
03778     18 15 02 F6 | 	mov	arg02, local10
0377c     A0 2B B1 FD | 	call	#__system___string_cmp
03780     FD 32 02 F6 | 	mov	local11, result1
03784     00 32 56 F2 | 	cmps	local11, #0 wc
03788     1C 00 90 CD |  if_b	jmp	#LR__0268
0378c     2A 01 00 FF 
03790     FA 15 06 F6 | 	mov	arg02, ##@LR__4249
03794     12 13 02 F6 | 	mov	arg01, local04
03798     84 2B B1 FD | 	call	#__system___string_cmp
0379c     FD 30 02 F6 | 	mov	local10, result1
037a0     01 30 56 F2 | 	cmps	local10, #1 wc
037a4     B0 00 90 CD |  if_b	jmp	#LR__0270
037a8                 | LR__0268
037a8     2A 01 00 FF 
037ac     FC 15 06 F6 | 	mov	arg02, ##@LR__4250
037b0     12 13 02 F6 | 	mov	arg01, local04
037b4     68 2B B1 FD | 	call	#__system___string_cmp
037b8     00 FA 55 F2 | 	cmps	result1, #0 wc
037bc     1C 00 90 CD |  if_b	jmp	#LR__0269
037c0     2A 01 00 FF 
037c4     FE 2F 06 F6 | 	mov	local09, ##@LR__4251
037c8     12 13 02 F6 | 	mov	arg01, local04
037cc     17 15 02 F6 | 	mov	arg02, local09
037d0     4C 2B B1 FD | 	call	#__system___string_cmp
037d4     01 FA 55 F2 | 	cmps	result1, #1 wc
037d8     7C 00 90 CD |  if_b	jmp	#LR__0270
037dc                 | LR__0269
037dc     2B 01 00 FF 
037e0     00 2E 06 F6 | 	mov	local09, ##@LR__4252
037e4     12 13 02 F6 | 	mov	arg01, local04
037e8     17 15 02 F6 | 	mov	arg02, local09
037ec     30 2B B1 FD | 	call	#__system___string_cmp
037f0     00 FA 4D F2 | 	cmps	result1, #0 wz
037f4     60 00 90 AD |  if_e	jmp	#LR__0270
037f8     2B 01 00 FF 
037fc     02 2C 06 F6 | 	mov	local08, ##@LR__4253
03800     12 13 02 F6 | 	mov	arg01, local04
03804     16 15 02 F6 | 	mov	arg02, local08
03808     14 2B B1 FD | 	call	#__system___string_cmp
0380c     FD 2E 0A F6 | 	mov	local09, result1 wz
03810     44 00 90 AD |  if_e	jmp	#LR__0270
03814     2B 01 00 FF 
03818     04 34 06 F6 | 	mov	local12, ##@LR__4254
0381c     1A 2D 02 F6 | 	mov	local08, local12
03820     12 13 02 F6 | 	mov	arg01, local04
03824     16 15 02 F6 | 	mov	arg02, local08
03828     F4 2A B1 FD | 	call	#__system___string_cmp
0382c     FD 2A 0A F6 | 	mov	local07, result1 wz
03830     24 00 90 AD |  if_e	jmp	#LR__0270
03834     2B 01 00 FF 
03838     06 36 06 F6 | 	mov	local13, ##@LR__4255
0383c     1B 35 02 F6 | 	mov	local12, local13
03840     12 13 02 F6 | 	mov	arg01, local04
03844     1A 15 02 F6 | 	mov	arg02, local12
03848     D4 2A B1 FD | 	call	#__system___string_cmp
0384c     FD 2C 0A F6 | 	mov	local08, result1 wz
03850     00 FA 05 56 |  if_ne	mov	result1, #0
03854     0C 00 90 5D |  if_ne	jmp	#LR__0273
03858                 | LR__0270
03858     01 26 06 F1 | 	add	local05, #1
0385c     44 FE 9F FD | 	jmp	#LR__0264
03860                 | LR__0271
03860                 | LR__0272
03860                 | ' return true
03860     01 FA 65 F6 | 	neg	result1, #1
03864                 | LR__0273
03864     A7 F0 03 F6 | 	mov	ptra, fp
03868     B2 00 A0 FD | 	call	#popregs_
0386c                 | _isname_ret
0386c     2D 00 64 FD | 	ret
03870                 | 
03870                 | ' 
03870                 | ' function isnum(s as string) as boolean
03870                 | _isnum
03870     0D 4A 05 F6 | 	mov	COUNT_, #13
03874     A8 00 A0 FD | 	call	#pushregs_
03878     09 1F 02 F6 | 	mov	local01, arg01
0387c     00 20 06 F6 | 	mov	local02, #0
03880     00 22 06 F6 | 	mov	local03, #0
03884     0F 13 02 F6 | 	mov	arg01, local01
03888     09 25 02 F6 | 	mov	local04, arg01
0388c     97 06 48 FB | 	callpa	#(@LR__0281-@LR__0280)>>2,fcache_load_ptr_
03890                 | LR__0280
03890     12 FB C9 FA | 	rdbyte	result1, local04 wz
03894     01 24 06 51 |  if_ne	add	local04, #1
03898     F4 FF 9F 5D |  if_ne	jmp	#LR__0280
0389c                 | LR__0281
0389c     09 25 82 F1 | 	sub	local04, arg01
038a0     12 FB 01 F6 | 	mov	result1, local04
038a4     FD 26 0A F6 | 	mov	local05, result1 wz
038a8     00 FA 05 A6 |  if_e	mov	result1, #0
038ac     8C 02 90 AD |  if_e	jmp	#LR__0292
038b0     0F 13 02 F6 | 	mov	arg01, local01
038b4     01 14 06 F6 | 	mov	arg02, #1
038b8     01 16 06 F6 | 	mov	arg03, #1
038bc     60 4B B1 FD | 	call	#__system__Mid_S
038c0     FD 28 02 F6 | 	mov	local06, result1
038c4                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
038c4     2B 01 00 FF 
038c8     08 14 06 F6 | 	mov	arg02, ##@LR__4256
038cc     14 13 02 F6 | 	mov	arg01, local06
038d0     4C 2A B1 FD | 	call	#__system___string_cmp
038d4     00 FA 55 F2 | 	cmps	result1, #0 wc
038d8     18 00 90 CD |  if_b	jmp	#LR__0282
038dc     2B 01 00 FF 
038e0     0A 14 06 F6 | 	mov	arg02, ##@LR__4257
038e4     14 13 02 F6 | 	mov	arg01, local06
038e8     34 2A B1 FD | 	call	#__system___string_cmp
038ec     01 FA 55 F2 | 	cmps	result1, #1 wc
038f0     78 00 90 CD |  if_b	jmp	#LR__0283
038f4                 | LR__0282
038f4     2B 01 00 FF 
038f8     0C 14 06 F6 | 	mov	arg02, ##@LR__4258
038fc     14 13 02 F6 | 	mov	arg01, local06
03900     1C 2A B1 FD | 	call	#__system___string_cmp
03904     00 FA 0D F2 | 	cmp	result1, #0 wz
03908     60 00 90 AD |  if_e	jmp	#LR__0283
0390c     2B 01 00 FF 
03910     0E 2A 06 F6 | 	mov	local07, ##@LR__4259
03914     14 13 02 F6 | 	mov	arg01, local06
03918     15 15 02 F6 | 	mov	arg02, local07
0391c     00 2A B1 FD | 	call	#__system___string_cmp
03920     00 FA 0D F2 | 	cmp	result1, #0 wz
03924     44 00 90 AD |  if_e	jmp	#LR__0283
03928     2B 01 00 FF 
0392c     10 2C 06 F6 | 	mov	local08, ##@LR__4260
03930     16 2B 02 F6 | 	mov	local07, local08
03934     14 13 02 F6 | 	mov	arg01, local06
03938     15 15 02 F6 | 	mov	arg02, local07
0393c     E0 29 B1 FD | 	call	#__system___string_cmp
03940     00 FA 4D F2 | 	cmps	result1, #0 wz
03944     24 00 90 AD |  if_e	jmp	#LR__0283
03948     2B 01 00 FF 
0394c     12 2E 06 F6 | 	mov	local09, ##@LR__4261
03950     17 2D 02 F6 | 	mov	local08, local09
03954     14 13 02 F6 | 	mov	arg01, local06
03958     16 15 02 F6 | 	mov	arg02, local08
0395c     C0 29 B1 FD | 	call	#__system___string_cmp
03960     FD 2A 0A F6 | 	mov	local07, result1 wz
03964     00 FA 05 56 |  if_ne	mov	result1, #0
03968     D0 01 90 5D |  if_ne	jmp	#LR__0292
0396c                 | LR__0283
0396c                 | ' if m$="." then ds=1
0396c     2B 01 00 FF 
03970     14 14 06 F6 | 	mov	arg02, ##@LR__4262
03974     14 13 02 F6 | 	mov	arg01, local06
03978     A4 29 B1 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     01 20 06 A6 |  if_e	mov	local02, #1
03984                 | ' if l>1 then 
03984     02 26 56 F2 | 	cmps	local05, #2 wc
03988     AC 01 90 CD |  if_b	jmp	#LR__0291
0398c                 | '   for i=2 to l
0398c     02 30 06 F6 | 	mov	local10, #2
03990     13 33 02 F6 | 	mov	local11, local05
03994     01 32 06 F1 | 	add	local11, #1
03998                 | LR__0284
03998     19 31 52 F2 | 	cmps	local10, local11 wc
0399c     98 01 90 3D |  if_ae	jmp	#LR__0290
039a0     0F 13 02 F6 | 	mov	arg01, local01
039a4     18 15 02 F6 | 	mov	arg02, local10
039a8     01 16 06 F6 | 	mov	arg03, #1
039ac     70 4A B1 FD | 	call	#__system__Mid_S
039b0     FD 28 02 F6 | 	mov	local06, result1
039b4                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." andalso m$<>"E" andalso m$<>"e" andalso m$<>"-" then return false
039b4     2B 01 00 FF 
039b8     16 14 06 F6 | 	mov	arg02, ##@LR__4263
039bc     14 13 02 F6 | 	mov	arg01, local06
039c0     5C 29 B1 FD | 	call	#__system___string_cmp
039c4     00 FA 55 F2 | 	cmps	result1, #0 wc
039c8     18 00 90 CD |  if_b	jmp	#LR__0285
039cc     2B 01 00 FF 
039d0     18 14 06 F6 | 	mov	arg02, ##@LR__4264
039d4     14 13 02 F6 | 	mov	arg01, local06
039d8     44 29 B1 FD | 	call	#__system___string_cmp
039dc     01 FA 55 F2 | 	cmps	result1, #1 wc
039e0     98 00 90 CD |  if_b	jmp	#LR__0286
039e4                 | LR__0285
039e4     2B 01 00 FF 
039e8     1A 14 06 F6 | 	mov	arg02, ##@LR__4265
039ec     14 13 02 F6 | 	mov	arg01, local06
039f0     2C 29 B1 FD | 	call	#__system___string_cmp
039f4     00 FA 0D F2 | 	cmp	result1, #0 wz
039f8     80 00 90 AD |  if_e	jmp	#LR__0286
039fc     2B 01 00 FF 
03a00     1C 2A 06 F6 | 	mov	local07, ##@LR__4266
03a04     14 13 02 F6 | 	mov	arg01, local06
03a08     15 15 02 F6 | 	mov	arg02, local07
03a0c     10 29 B1 FD | 	call	#__system___string_cmp
03a10     00 FA 4D F2 | 	cmps	result1, #0 wz
03a14     64 00 90 AD |  if_e	jmp	#LR__0286
03a18     2B 01 00 FF 
03a1c     1E 2C 06 F6 | 	mov	local08, ##@LR__4267
03a20     16 2B 02 F6 | 	mov	local07, local08
03a24     14 13 02 F6 | 	mov	arg01, local06
03a28     15 15 02 F6 | 	mov	arg02, local07
03a2c     F0 28 B1 FD | 	call	#__system___string_cmp
03a30     FD 34 0A F6 | 	mov	local12, result1 wz
03a34     44 00 90 AD |  if_e	jmp	#LR__0286
03a38     2B 01 00 FF 
03a3c     20 2E 06 F6 | 	mov	local09, ##@LR__4268
03a40     17 2D 02 F6 | 	mov	local08, local09
03a44     14 13 02 F6 | 	mov	arg01, local06
03a48     16 15 02 F6 | 	mov	arg02, local08
03a4c     D0 28 B1 FD | 	call	#__system___string_cmp
03a50     FD 2A 0A F6 | 	mov	local07, result1 wz
03a54     24 00 90 AD |  if_e	jmp	#LR__0286
03a58     2B 01 00 FF 
03a5c     22 36 06 F6 | 	mov	local13, ##@LR__4269
03a60     1B 2F 02 F6 | 	mov	local09, local13
03a64     14 13 02 F6 | 	mov	arg01, local06
03a68     17 15 02 F6 | 	mov	arg02, local09
03a6c     B0 28 B1 FD | 	call	#__system___string_cmp
03a70     FD 2C 0A F6 | 	mov	local08, result1 wz
03a74     00 FA 05 56 |  if_ne	mov	result1, #0
03a78     C0 00 90 5D |  if_ne	jmp	#LR__0292
03a7c                 | LR__0286
03a7c                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
03a7c     2B 01 00 FF 
03a80     24 14 06 F6 | 	mov	arg02, ##@LR__4270
03a84     14 13 02 F6 | 	mov	arg01, local06
03a88     94 28 B1 FD | 	call	#__system___string_cmp
03a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a90     38 00 90 5D |  if_ne	jmp	#LR__0287
03a94     18 15 02 F6 | 	mov	arg02, local10
03a98     01 14 86 F1 | 	sub	arg02, #1
03a9c     0F 13 02 F6 | 	mov	arg01, local01
03aa0     01 16 06 F6 | 	mov	arg03, #1
03aa4     78 49 B1 FD | 	call	#__system__Mid_S
03aa8     FD 12 02 F6 | 	mov	arg01, result1
03aac     0C 4B B1 FD | 	call	#__system__LCase_S
03ab0     FD 12 02 F6 | 	mov	arg01, result1
03ab4     2B 01 00 FF 
03ab8     26 14 06 F6 | 	mov	arg02, ##@LR__4271
03abc     60 28 B1 FD | 	call	#__system___string_cmp
03ac0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ac4     00 FA 05 56 |  if_ne	mov	result1, #0
03ac8     70 00 90 5D |  if_ne	jmp	#LR__0292
03acc                 | LR__0287
03acc                 | '     if m$="." then ds+=1: if ds>1 then return false
03acc     2B 01 00 FF 
03ad0     28 14 06 F6 | 	mov	arg02, ##@LR__4272
03ad4     14 13 02 F6 | 	mov	arg01, local06
03ad8     44 28 B1 FD | 	call	#__system___string_cmp
03adc     00 FA 0D F2 | 	cmp	result1, #0 wz
03ae0     01 20 06 A1 |  if_e	add	local02, #1
03ae4     02 20 56 A2 |  if_e	cmps	local02, #2 wc
03ae8     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
03aec     4C 00 90 2D |  if_nc_and_z	jmp	#LR__0292
03af0                 | '     if m$="E" orelse m$="e" then es+=1: if es>1 then return false
03af0     2B 01 00 FF 
03af4     2A 14 06 F6 | 	mov	arg02, ##@LR__4273
03af8     14 13 02 F6 | 	mov	arg01, local06
03afc     20 28 B1 FD | 	call	#__system___string_cmp
03b00     00 FA 4D F2 | 	cmps	result1, #0 wz
03b04     18 00 90 AD |  if_e	jmp	#LR__0288
03b08     2B 01 00 FF 
03b0c     2C 14 06 F6 | 	mov	arg02, ##@LR__4274
03b10     14 13 02 F6 | 	mov	arg01, local06
03b14     08 28 B1 FD | 	call	#__system___string_cmp
03b18     00 FA 4D F2 | 	cmps	result1, #0 wz
03b1c     10 00 90 5D |  if_ne	jmp	#LR__0289
03b20                 | LR__0288
03b20     01 22 06 F1 | 	add	local03, #1
03b24     02 22 56 F2 | 	cmps	local03, #2 wc
03b28     00 FA 05 36 |  if_ae	mov	result1, #0
03b2c     0C 00 90 3D |  if_ae	jmp	#LR__0292
03b30                 | LR__0289
03b30     01 30 06 F1 | 	add	local10, #1
03b34     60 FE 9F FD | 	jmp	#LR__0284
03b38                 | LR__0290
03b38                 | LR__0291
03b38                 | ' return true
03b38     01 FA 65 F6 | 	neg	result1, #1
03b3c                 | LR__0292
03b3c     A7 F0 03 F6 | 	mov	ptra, fp
03b40     B2 00 A0 FD | 	call	#popregs_
03b44                 | _isnum_ret
03b44     2D 00 64 FD | 	ret
03b48                 | 
03b48                 | '   
03b48                 | ' function isint(s as string) as boolean
03b48                 | _isint
03b48     05 4A 05 F6 | 	mov	COUNT_, #5
03b4c     A8 00 A0 FD | 	call	#pushregs_
03b50     09 1F 02 F6 | 	mov	local01, arg01
03b54     09 21 02 F6 | 	mov	local02, arg01
03b58     97 06 48 FB | 	callpa	#(@LR__0301-@LR__0300)>>2,fcache_load_ptr_
03b5c                 | LR__0300
03b5c     10 FB C9 FA | 	rdbyte	result1, local02 wz
03b60     01 20 06 51 |  if_ne	add	local02, #1
03b64     F4 FF 9F 5D |  if_ne	jmp	#LR__0300
03b68                 | LR__0301
03b68     09 21 82 F1 | 	sub	local02, arg01
03b6c     10 FB 01 F6 | 	mov	result1, local02
03b70     FD 20 0A F6 | 	mov	local02, result1 wz
03b74     00 FA 05 A6 |  if_e	mov	result1, #0
03b78     18 01 90 AD |  if_e	jmp	#LR__0309
03b7c     0F 13 02 F6 | 	mov	arg01, local01
03b80     01 14 06 F6 | 	mov	arg02, #1
03b84     01 16 06 F6 | 	mov	arg03, #1
03b88     94 48 B1 FD | 	call	#__system__Mid_S
03b8c     FD 22 02 F6 | 	mov	local03, result1
03b90                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
03b90     2B 01 00 FF 
03b94     2E 14 06 F6 | 	mov	arg02, ##@LR__4275
03b98     11 13 02 F6 | 	mov	arg01, local03
03b9c     80 27 B1 FD | 	call	#__system___string_cmp
03ba0     00 FA 55 F2 | 	cmps	result1, #0 wc
03ba4     18 00 90 CD |  if_b	jmp	#LR__0302
03ba8     2B 01 00 FF 
03bac     30 14 06 F6 | 	mov	arg02, ##@LR__4276
03bb0     11 13 02 F6 | 	mov	arg01, local03
03bb4     68 27 B1 FD | 	call	#__system___string_cmp
03bb8     01 FA 55 F2 | 	cmps	result1, #1 wc
03bbc     4C 00 90 CD |  if_b	jmp	#LR__0303
03bc0                 | LR__0302
03bc0     2B 01 00 FF 
03bc4     32 14 06 F6 | 	mov	arg02, ##@LR__4277
03bc8     11 13 02 F6 | 	mov	arg01, local03
03bcc     50 27 B1 FD | 	call	#__system___string_cmp
03bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
03bd4     34 00 90 AD |  if_e	jmp	#LR__0303
03bd8     2B 01 00 FF 
03bdc     34 14 06 F6 | 	mov	arg02, ##@LR__4278
03be0     11 13 02 F6 | 	mov	arg01, local03
03be4     38 27 B1 FD | 	call	#__system___string_cmp
03be8     00 FA 0D F2 | 	cmp	result1, #0 wz
03bec     1C 00 90 AD |  if_e	jmp	#LR__0303
03bf0     2B 01 00 FF 
03bf4     36 14 06 F6 | 	mov	arg02, ##@LR__4279
03bf8     11 13 02 F6 | 	mov	arg01, local03
03bfc     20 27 B1 FD | 	call	#__system___string_cmp
03c00     00 FA 0D F2 | 	cmp	result1, #0 wz
03c04     00 FA 05 56 |  if_ne	mov	result1, #0
03c08     88 00 90 5D |  if_ne	jmp	#LR__0309
03c0c                 | LR__0303
03c0c                 | ' 
03c0c                 | ' if l>1 then 
03c0c     02 20 56 F2 | 	cmps	local02, #2 wc
03c10     7C 00 90 CD |  if_b	jmp	#LR__0308
03c14                 | '   for i=2 to l
03c14     02 24 06 F6 | 	mov	local04, #2
03c18     10 27 02 F6 | 	mov	local05, local02
03c1c     01 26 06 F1 | 	add	local05, #1
03c20                 | LR__0304
03c20     13 25 52 F2 | 	cmps	local04, local05 wc
03c24     68 00 90 3D |  if_ae	jmp	#LR__0307
03c28     0F 13 02 F6 | 	mov	arg01, local01
03c2c     12 15 02 F6 | 	mov	arg02, local04
03c30     01 16 06 F6 | 	mov	arg03, #1
03c34     E8 47 B1 FD | 	call	#__system__Mid_S
03c38     FD 22 02 F6 | 	mov	local03, result1
03c3c                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03c3c     2B 01 00 FF 
03c40     38 14 06 F6 | 	mov	arg02, ##@LR__4280
03c44     11 13 02 F6 | 	mov	arg01, local03
03c48     D4 26 B1 FD | 	call	#__system___string_cmp
03c4c     00 FA 55 F2 | 	cmps	result1, #0 wc
03c50     18 00 90 CD |  if_b	jmp	#LR__0305
03c54     2B 01 00 FF 
03c58     3A 14 06 F6 | 	mov	arg02, ##@LR__4281
03c5c     11 13 02 F6 | 	mov	arg01, local03
03c60     BC 26 B1 FD | 	call	#__system___string_cmp
03c64     01 FA 55 F2 | 	cmps	result1, #1 wc
03c68     1C 00 90 CD |  if_b	jmp	#LR__0306
03c6c                 | LR__0305
03c6c     2B 01 00 FF 
03c70     3C 14 06 F6 | 	mov	arg02, ##@LR__4282
03c74     11 13 02 F6 | 	mov	arg01, local03
03c78     A4 26 B1 FD | 	call	#__system___string_cmp
03c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
03c80     00 FA 05 56 |  if_ne	mov	result1, #0
03c84     0C 00 90 5D |  if_ne	jmp	#LR__0309
03c88                 | LR__0306
03c88     01 24 06 F1 | 	add	local04, #1
03c8c     90 FF 9F FD | 	jmp	#LR__0304
03c90                 | LR__0307
03c90                 | LR__0308
03c90                 | ' return true
03c90     01 FA 65 F6 | 	neg	result1, #1
03c94                 | LR__0309
03c94     A7 F0 03 F6 | 	mov	ptra, fp
03c98     B2 00 A0 FD | 	call	#popregs_
03c9c                 | _isint_ret
03c9c     2D 00 64 FD | 	ret
03ca0                 | 
03ca0                 | ' 
03ca0                 | ' function isdec(s as string) as boolean
03ca0                 | _isdec
03ca0     05 4A 05 F6 | 	mov	COUNT_, #5
03ca4     A8 00 A0 FD | 	call	#pushregs_
03ca8     09 1F 02 F6 | 	mov	local01, arg01
03cac     09 21 02 F6 | 	mov	local02, arg01
03cb0     97 06 48 FB | 	callpa	#(@LR__0311-@LR__0310)>>2,fcache_load_ptr_
03cb4                 | LR__0310
03cb4     10 FB C9 FA | 	rdbyte	result1, local02 wz
03cb8     01 20 06 51 |  if_ne	add	local02, #1
03cbc     F4 FF 9F 5D |  if_ne	jmp	#LR__0310
03cc0                 | LR__0311
03cc0     09 21 82 F1 | 	sub	local02, arg01
03cc4     10 FB 01 F6 | 	mov	result1, local02
03cc8     FD 20 0A F6 | 	mov	local02, result1 wz
03ccc     00 FA 05 A6 |  if_e	mov	result1, #0
03cd0     80 00 90 AD |  if_e	jmp	#LR__0316
03cd4                 | ' for i=1 to l
03cd4     01 22 06 F6 | 	mov	local03, #1
03cd8     10 25 02 F6 | 	mov	local04, local02
03cdc     01 24 06 F1 | 	add	local04, #1
03ce0                 | LR__0312
03ce0     12 23 52 F2 | 	cmps	local03, local04 wc
03ce4     68 00 90 3D |  if_ae	jmp	#LR__0315
03ce8     0F 13 02 F6 | 	mov	arg01, local01
03cec     11 15 02 F6 | 	mov	arg02, local03
03cf0     01 16 06 F6 | 	mov	arg03, #1
03cf4     28 47 B1 FD | 	call	#__system__Mid_S
03cf8     FD 26 02 F6 | 	mov	local05, result1
03cfc                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
03cfc     2B 01 00 FF 
03d00     3E 14 06 F6 | 	mov	arg02, ##@LR__4283
03d04     13 13 02 F6 | 	mov	arg01, local05
03d08     14 26 B1 FD | 	call	#__system___string_cmp
03d0c     00 FA 55 F2 | 	cmps	result1, #0 wc
03d10     18 00 90 CD |  if_b	jmp	#LR__0313
03d14     2B 01 00 FF 
03d18     40 14 06 F6 | 	mov	arg02, ##@LR__4284
03d1c     13 13 02 F6 | 	mov	arg01, local05
03d20     FC 25 B1 FD | 	call	#__system___string_cmp
03d24     01 FA 55 F2 | 	cmps	result1, #1 wc
03d28     1C 00 90 CD |  if_b	jmp	#LR__0314
03d2c                 | LR__0313
03d2c     2B 01 00 FF 
03d30     42 14 06 F6 | 	mov	arg02, ##@LR__4285
03d34     13 13 02 F6 | 	mov	arg01, local05
03d38     E4 25 B1 FD | 	call	#__system___string_cmp
03d3c     00 FA 0D F2 | 	cmp	result1, #0 wz
03d40     00 FA 05 56 |  if_ne	mov	result1, #0
03d44     0C 00 90 5D |  if_ne	jmp	#LR__0316
03d48                 | LR__0314
03d48     01 22 06 F1 | 	add	local03, #1
03d4c     90 FF 9F FD | 	jmp	#LR__0312
03d50                 | LR__0315
03d50                 | ' return true
03d50     01 FA 65 F6 | 	neg	result1, #1
03d54                 | LR__0316
03d54     A7 F0 03 F6 | 	mov	ptra, fp
03d58     B2 00 A0 FD | 	call	#popregs_
03d5c                 | _isdec_ret
03d5c     2D 00 64 FD | 	ret
03d60                 | 
03d60                 | ' 
03d60                 | ' function isstring(s as string) as boolean
03d60                 | _isstring
03d60     01 4A 05 F6 | 	mov	COUNT_, #1
03d64     A8 00 A0 FD | 	call	#pushregs_
03d68                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
03d68     09 1F 02 F6 | 	mov	local01, arg01
03d6c     01 14 06 F6 | 	mov	arg02, #1
03d70     94 45 B1 FD | 	call	#__system__Left_S
03d74     FD 12 02 F6 | 	mov	arg01, result1
03d78     2B 01 00 FF 
03d7c     44 14 06 F6 | 	mov	arg02, ##@LR__4286
03d80     9C 25 B1 FD | 	call	#__system___string_cmp
03d84     00 FA 4D F2 | 	cmps	result1, #0 wz
03d88     28 00 90 5D |  if_ne	jmp	#LR__0320
03d8c     0F 13 02 F6 | 	mov	arg01, local01
03d90     01 14 06 F6 | 	mov	arg02, #1
03d94     F8 45 B1 FD | 	call	#__system__Right_S
03d98     FD 12 02 F6 | 	mov	arg01, result1
03d9c     2B 01 00 FF 
03da0     46 14 06 F6 | 	mov	arg02, ##@LR__4287
03da4     78 25 B1 FD | 	call	#__system___string_cmp
03da8     00 FA 4D F2 | 	cmps	result1, #0 wz
03dac     01 FA 65 A6 |  if_e	neg	result1, #1
03db0     04 00 90 AD |  if_e	jmp	#LR__0321
03db4                 | LR__0320
03db4     00 FA 05 F6 | 	mov	result1, #0
03db8                 | LR__0321
03db8     A7 F0 03 F6 | 	mov	ptra, fp
03dbc     B2 00 A0 FD | 	call	#popregs_
03dc0                 | _isstring_ret
03dc0     2D 00 64 FD | 	ret
03dc4                 | 
03dc4                 | ' 
03dc4                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
03dc4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03dc4                 | ' 
03dc4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03dc4                 | ' '----------------------Reverse Polish notation precompiler -----------------------------------------------------------------------------
03dc4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
03dc4                 | ' 
03dc4                 | ' '----- delete a line from a program
03dc4                 | ' 
03dc4                 | ' function deleteline(aline as ulong) as integer
03dc4                 | _deleteline
03dc4     03 4A 05 F6 | 	mov	COUNT_, #3
03dc8     A8 00 A0 FD | 	call	#pushregs_
03dcc     2C F0 07 F1 | 	add	ptra, #44
03dd0     04 4E 05 F1 | 	add	fp, #4
03dd4     A7 12 62 FC | 	wrlong	arg01, fp
03dd8     41 00 00 FF 
03ddc     48 E4 05 F1 | 	add	objptr, ##33352
03de0     F2 1E 02 FB | 	rdlong	local01, objptr
03de4     0C 4E 05 F1 | 	add	fp, #12
03de8     A7 1E 62 FC | 	wrlong	local01, fp
03dec     10 4E 85 F1 | 	sub	fp, #16
03df0                 | ' 
03df0                 | ' 
03df0                 | ' searchptr=programstart
03df0                 | ' 
03df0                 | ' do
03df0     35 00 00 FF 
03df4     88 E5 85 F1 | 	sub	objptr, ##27528
03df8                 | LR__0330
03df8     14 4E 05 F1 | 	add	fp, #20
03dfc     A7 12 02 F6 | 	mov	arg01, fp
03e00     04 4E 85 F1 | 	sub	fp, #4
03e04     A7 14 02 FB | 	rdlong	arg02, fp
03e08     10 4E 85 F1 | 	sub	fp, #16
03e0c     18 16 06 F6 | 	mov	arg03, #24
03e10     F8 19 B1 FD | 	call	#_psram_spin2_read1
03e14     10 4E 05 F1 | 	add	fp, #16
03e18     A7 1E 02 FB | 	rdlong	local01, fp
03e1c     08 4E 85 F1 | 	sub	fp, #8
03e20     A7 1E 62 FC | 	wrlong	local01, fp
03e24     20 4E 05 F1 | 	add	fp, #32
03e28     A7 1E 02 FB | 	rdlong	local01, fp
03e2c     18 4E 85 F1 | 	sub	fp, #24
03e30     A7 1E 62 FC | 	wrlong	local01, fp
03e34     04 4E 05 F1 | 	add	fp, #4
03e38     A7 1E 02 FB | 	rdlong	local01, fp
03e3c     10 4E 85 F1 | 	sub	fp, #16
03e40     A7 16 02 FB | 	rdlong	arg03, fp
03e44     04 4E 85 F1 | 	sub	fp, #4
03e48     0B 1F 12 F2 | 	cmp	local01, arg03 wc
03e4c     28 4E 05 C1 |  if_b	add	fp, #40
03e50     A7 20 02 CB |  if_b	rdlong	local02, fp
03e54     28 4E 85 C1 |  if_b	sub	fp, #40
03e58     FF FF 3F CF 
03e5c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
03e60     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0330
03e64     0B 00 00 FF 
03e68     C0 E4 85 F1 | 	sub	objptr, ##5824
03e6c                 | ' 
03e6c                 | ' 
03e6c                 | ' if header(0)<>aline then return -1
03e6c     14 4E 05 F1 | 	add	fp, #20
03e70     A7 1E 02 FB | 	rdlong	local01, fp
03e74     10 4E 85 F1 | 	sub	fp, #16
03e78     A7 22 02 FB | 	rdlong	local03, fp
03e7c     04 4E 85 F1 | 	sub	fp, #4
03e80     11 1F 0A F2 | 	cmp	local01, local03 wz
03e84     01 FA 65 56 |  if_ne	neg	result1, #1
03e88     4C 03 90 5D |  if_ne	jmp	#LR__0336
03e8c     08 4E 05 F1 | 	add	fp, #8
03e90     A7 12 02 FB | 	rdlong	arg01, fp
03e94     08 4E 85 F1 | 	sub	fp, #8
03e98     01 14 66 F6 | 	neg	arg02, #1
03e9c     01 16 06 F6 | 	mov	arg03, #1
03ea0     00 18 06 F6 | 	mov	arg04, #0
03ea4     0B 00 00 FF 
03ea8     C0 E4 05 F1 | 	add	objptr, ##5824
03eac                 | '     return fill(addr, pattern, count, listPtr, 4)
03eac     04 1A 06 F6 | 	mov	arg05, #4
03eb0     90 1A B1 FD | 	call	#_psram_spin2_fill
03eb4     0B 00 00 FF 
03eb8     C0 E4 85 F1 | 	sub	objptr, ##5824
03ebc                 | ' 
03ebc                 | ' pslpoke(lineptr2,$FFFF_FFFF) ' flag the deleted line
03ebc                 | ' 
03ebc                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is one and only line in the program
03ebc     28 4E 05 F1 | 	add	fp, #40
03ec0     A7 1E 02 FB | 	rdlong	local01, fp
03ec4     28 4E 85 F1 | 	sub	fp, #40
03ec8     FF FF 3F FF 
03ecc     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03ed0     24 4E 05 A1 |  if_e	add	fp, #36
03ed4     A7 22 02 AB |  if_e	rdlong	local03, fp
03ed8     24 4E 85 A1 |  if_e	sub	fp, #36
03edc     FF FF 7F AF 
03ee0     FF 23 0E A2 |  if_e	cmp	local03, ##-1 wz
03ee4     90 00 90 5D |  if_ne	jmp	#LR__0331
03ee8     41 00 00 FF 
03eec     48 E4 05 F1 | 	add	objptr, ##33352
03ef0     F2 00 68 FC | 	wrlong	#0, objptr
03ef4     07 00 00 FF 
03ef8     28 E4 85 F1 | 	sub	objptr, ##3624
03efc     F2 00 68 FC | 	wrlong	#0, objptr
03f00     07 00 00 FF 
03f04     2C E4 05 F1 | 	add	objptr, ##3628
03f08     F2 00 68 FC | 	wrlong	#0, objptr
03f0c     04 E4 05 F1 | 	add	objptr, #4
03f10     FF FF FF FF 
03f14     F2 FE 6B FC | 	wrlong	##-1, objptr
03f18     00 12 06 F6 | 	mov	arg01, #0
03f1c     10 E4 85 F1 | 	sub	objptr, #16
03f20     F2 00 68 FC | 	wrlong	#0, objptr
03f24     01 14 66 F6 | 	neg	arg02, #1
03f28     01 16 06 F6 | 	mov	arg03, #1
03f2c     00 18 06 F6 | 	mov	arg04, #0
03f30     35 00 00 FF 
03f34     80 E5 85 F1 | 	sub	objptr, ##27520
03f38                 | '     return fill(addr, pattern, count, listPtr, 4)
03f38     04 1A 06 F6 | 	mov	arg05, #4
03f3c     04 1A B1 FD | 	call	#_psram_spin2_fill
03f40     10 12 06 F6 | 	mov	arg01, #16
03f44     01 14 66 F6 | 	neg	arg02, #1
03f48     01 16 06 F6 | 	mov	arg03, #1
03f4c     00 18 06 F6 | 	mov	arg04, #0
03f50                 | '     return fill(addr, pattern, count, listPtr, 4)
03f50     04 1A 06 F6 | 	mov	arg05, #4
03f54     EC 19 B1 FD | 	call	#_psram_spin2_fill
03f58     14 12 06 F6 | 	mov	arg01, #20
03f5c     1E 14 CE F9 | 	bmask	arg02, #30
03f60     01 16 06 F6 | 	mov	arg03, #1
03f64     00 18 06 F6 | 	mov	arg04, #0
03f68                 | '     return fill(addr, pattern, count, listPtr, 4)
03f68     04 1A 06 F6 | 	mov	arg05, #4
03f6c     D4 19 B1 FD | 	call	#_psram_spin2_fill
03f70     0B 00 00 FF 
03f74     C0 E4 85 F1 | 	sub	objptr, ##5824
03f78                 | LR__0331
03f78                 | ' 
03f78                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' this is the last, and not first, line of the program
03f78     28 4E 05 F1 | 	add	fp, #40
03f7c     A7 1E 02 FB | 	rdlong	local01, fp
03f80     28 4E 85 F1 | 	sub	fp, #40
03f84     FF FF 3F FF 
03f88     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
03f8c     88 00 90 5D |  if_ne	jmp	#LR__0332
03f90     24 4E 05 F1 | 	add	fp, #36
03f94     A7 22 02 FB | 	rdlong	local03, fp
03f98     24 4E 85 F1 | 	sub	fp, #36
03f9c     FF FF 7F FF 
03fa0     FF 23 0E F2 | 	cmp	local03, ##-1 wz
03fa4     70 00 90 AD |  if_e	jmp	#LR__0332
03fa8     24 4E 05 F1 | 	add	fp, #36
03fac     A7 12 02 FB | 	rdlong	arg01, fp
03fb0     24 4E 85 F1 | 	sub	fp, #36
03fb4     14 12 06 F1 | 	add	arg01, #20
03fb8     1E 14 CE F9 | 	bmask	arg02, #30
03fbc     01 16 06 F6 | 	mov	arg03, #1
03fc0     00 18 06 F6 | 	mov	arg04, #0
03fc4     0B 00 00 FF 
03fc8     C0 E4 05 F1 | 	add	objptr, ##5824
03fcc                 | '     return fill(addr, pattern, count, listPtr, 4)
03fcc     04 1A 06 F6 | 	mov	arg05, #4
03fd0     70 19 B1 FD | 	call	#_psram_spin2_fill
03fd4     24 4E 05 F1 | 	add	fp, #36
03fd8     A7 1E 02 FB | 	rdlong	local01, fp
03fdc     35 00 00 FF 
03fe0     90 E5 05 F1 | 	add	objptr, ##27536
03fe4     F2 1E 62 FC | 	wrlong	local01, objptr
03fe8     41 00 00 FF 
03fec     50 E4 85 F1 | 	sub	objptr, ##33360
03ff0     A7 12 02 FB | 	rdlong	arg01, fp
03ff4     24 4E 85 F1 | 	sub	fp, #36
03ff8     98 EF B0 FD | 	call	#_pslpeek
03ffc     41 00 00 FF 
04000     4C E4 05 F1 | 	add	objptr, ##33356
04004     F2 FA 61 FC | 	wrlong	result1, objptr
04008     41 00 00 FF 
0400c     4C E4 85 F1 | 	sub	objptr, ##33356
04010                 | '   pslpoke(header(4)+20,$7FFF_FFFF) ' unlink the previous line
04010                 | '   lastlineptr=header(4)            ' keep last line pointer to avoid searching while sequentially adding a new line
04010                 | '   lastline=pslpeek(header(4))
04010                 | '   return 0
04010     00 FA 05 F6 | 	mov	result1, #0
04014     C0 01 90 FD | 	jmp	#LR__0336
04018                 | LR__0332
04018                 | ' 
04018                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then ' this is the first line, but not the last
04018     28 4E 05 F1 | 	add	fp, #40
0401c     A7 1E 02 FB | 	rdlong	local01, fp
04020     28 4E 85 F1 | 	sub	fp, #40
04024     FF FF 3F FF 
04028     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
0402c     6C 00 90 AD |  if_e	jmp	#LR__0333
04030     24 4E 05 F1 | 	add	fp, #36
04034     A7 22 02 FB | 	rdlong	local03, fp
04038     24 4E 85 F1 | 	sub	fp, #36
0403c     FF FF 7F FF 
04040     FF 23 0E F2 | 	cmp	local03, ##-1 wz
04044     54 00 90 5D |  if_ne	jmp	#LR__0333
04048     28 4E 05 F1 | 	add	fp, #40
0404c     A7 12 02 FB | 	rdlong	arg01, fp
04050     28 4E 85 F1 | 	sub	fp, #40
04054     10 12 06 F1 | 	add	arg01, #16
04058     01 14 66 F6 | 	neg	arg02, #1
0405c     01 16 06 F6 | 	mov	arg03, #1
04060     00 18 06 F6 | 	mov	arg04, #0
04064     0B 00 00 FF 
04068     C0 E4 05 F1 | 	add	objptr, ##5824
0406c                 | '     return fill(addr, pattern, count, listPtr, 4)
0406c     04 1A 06 F6 | 	mov	arg05, #4
04070     D0 18 B1 FD | 	call	#_psram_spin2_fill
04074     28 4E 05 F1 | 	add	fp, #40
04078     A7 1E 02 FB | 	rdlong	local01, fp
0407c     28 4E 85 F1 | 	sub	fp, #40
04080     35 00 00 FF 
04084     88 E5 05 F1 | 	add	objptr, ##27528
04088     F2 1E 62 FC | 	wrlong	local01, objptr
0408c     41 00 00 FF 
04090     48 E4 85 F1 | 	sub	objptr, ##33352
04094                 | ' '   print "deleted first line"
04094                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
04094                 | '   programstart=header(5) ' adjust the program start to point on the first new line
04094                 | '   return 0
04094     00 FA 05 F6 | 	mov	result1, #0
04098     3C 01 90 FD | 	jmp	#LR__0336
0409c                 | LR__0333
0409c                 | ' 
0409c                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then ' the line is not first and not last
0409c     28 4E 05 F1 | 	add	fp, #40
040a0     A7 1E 02 FB | 	rdlong	local01, fp
040a4     28 4E 85 F1 | 	sub	fp, #40
040a8     FF FF 3F FF 
040ac     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
040b0     24 4E 05 51 |  if_ne	add	fp, #36
040b4     A7 22 02 5B |  if_ne	rdlong	local03, fp
040b8     24 4E 85 51 |  if_ne	sub	fp, #36
040bc     FF FF 7F 5F 
040c0     FF 23 0E 52 |  if_ne	cmp	local03, ##-1 wz
040c4     68 00 90 AD |  if_e	jmp	#LR__0334
040c8     28 4E 05 F1 | 	add	fp, #40
040cc     A7 12 02 FB | 	rdlong	arg01, fp
040d0     10 12 06 F1 | 	add	arg01, #16
040d4     04 4E 85 F1 | 	sub	fp, #4
040d8     A7 14 02 FB | 	rdlong	arg02, fp
040dc     24 4E 85 F1 | 	sub	fp, #36
040e0     01 16 06 F6 | 	mov	arg03, #1
040e4     00 18 06 F6 | 	mov	arg04, #0
040e8     0B 00 00 FF 
040ec     C0 E4 05 F1 | 	add	objptr, ##5824
040f0                 | '     return fill(addr, pattern, count, listPtr, 4)
040f0     04 1A 06 F6 | 	mov	arg05, #4
040f4     4C 18 B1 FD | 	call	#_psram_spin2_fill
040f8     24 4E 05 F1 | 	add	fp, #36
040fc     A7 12 02 FB | 	rdlong	arg01, fp
04100     14 12 06 F1 | 	add	arg01, #20
04104     04 4E 05 F1 | 	add	fp, #4
04108     A7 14 02 FB | 	rdlong	arg02, fp
0410c     28 4E 85 F1 | 	sub	fp, #40
04110     01 16 06 F6 | 	mov	arg03, #1
04114     00 18 06 F6 | 	mov	arg04, #0
04118                 | '     return fill(addr, pattern, count, listPtr, 4)
04118     04 1A 06 F6 | 	mov	arg05, #4
0411c     24 18 B1 FD | 	call	#_psram_spin2_fill
04120     0B 00 00 FF 
04124     C0 E4 85 F1 | 	sub	objptr, ##5824
04128                 | '    pslpoke(header(5)+16,header(4))  
04128                 | '    pslpoke(header(4)+20, header(5))
04128                 | '    return 0
04128     00 FA 05 F6 | 	mov	result1, #0
0412c     A8 00 90 FD | 	jmp	#LR__0336
04130                 | LR__0334
04130     10 4E 05 F1 | 	add	fp, #16
04134     A7 1E 02 FB | 	rdlong	local01, fp
04138     08 4E 85 F1 | 	sub	fp, #8
0413c     A7 1E 62 FC | 	wrlong	local01, fp
04140     41 00 00 FF 
04144     48 E4 05 F1 | 	add	objptr, ##33352
04148     F2 1E 02 FB | 	rdlong	local01, objptr
0414c     08 4E 05 F1 | 	add	fp, #8
04150     A7 1E 62 FC | 	wrlong	local01, fp
04154     10 4E 85 F1 | 	sub	fp, #16
04158                 | ' 
04158                 | ' 
04158                 | ' 
04158                 | ' ' now find if the deleted line was a target for goto and replace fast_goto with find_goto
04158                 | ' 
04158                 | ' lineptr2=searchptr
04158                 | ' searchptr=programstart
04158                 | ' 
04158                 | ' do
04158     35 00 00 FF 
0415c     88 E5 85 F1 | 	sub	objptr, ##27528
04160                 | LR__0335
04160     14 4E 05 F1 | 	add	fp, #20
04164     A7 12 02 F6 | 	mov	arg01, fp
04168     04 4E 85 F1 | 	sub	fp, #4
0416c     A7 14 02 FB | 	rdlong	arg02, fp
04170     10 4E 85 F1 | 	sub	fp, #16
04174     18 16 06 F6 | 	mov	arg03, #24
04178     90 16 B1 FD | 	call	#_psram_spin2_read1
0417c     10 4E 05 F1 | 	add	fp, #16
04180     A7 1E 02 FB | 	rdlong	local01, fp
04184     08 4E 85 F1 | 	sub	fp, #8
04188     A7 1E 62 FC | 	wrlong	local01, fp
0418c     20 4E 05 F1 | 	add	fp, #32
04190     A7 1E 02 FB | 	rdlong	local01, fp
04194     18 4E 85 F1 | 	sub	fp, #24
04198     A7 1E 62 FC | 	wrlong	local01, fp
0419c     04 4E 05 F1 | 	add	fp, #4
041a0     A7 1E 02 FB | 	rdlong	local01, fp
041a4     10 4E 85 F1 | 	sub	fp, #16
041a8     A7 22 02 FB | 	rdlong	local03, fp
041ac     04 4E 85 F1 | 	sub	fp, #4
041b0     11 1F 12 F2 | 	cmp	local01, local03 wc
041b4     28 4E 05 C1 |  if_b	add	fp, #40
041b8     A7 20 02 CB |  if_b	rdlong	local02, fp
041bc     28 4E 85 C1 |  if_b	sub	fp, #40
041c0     FF FF 3F CF 
041c4     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
041c8     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0335
041cc     0B 00 00 FF 
041d0     C0 E4 85 F1 | 	sub	objptr, ##5824
041d4     00 FA 05 F6 | 	mov	result1, #0
041d8                 | LR__0336
041d8     A7 F0 03 F6 | 	mov	ptra, fp
041dc     B2 00 A0 FD | 	call	#popregs_
041e0                 | _deleteline_ret
041e0     2D 00 64 FD | 	ret
041e4                 | 
041e4                 | ' 
041e4                 | ' sub save_line
041e4                 | _save_line
041e4     03 4A 05 F6 | 	mov	COUNT_, #3
041e8     A8 00 A0 FD | 	call	#pushregs_
041ec     41 00 00 FF 
041f0     40 E4 05 F1 | 	add	objptr, ##33344
041f4     F2 16 02 FB | 	rdlong	arg03, objptr
041f8     01 16 06 F1 | 	add	arg03, #1
041fc     05 00 00 FF 
04200     18 E4 85 F1 | 	sub	objptr, ##2584
04204     F2 14 02 FB | 	rdlong	arg02, objptr
04208     0B 15 02 FD | 	qmul	arg02, arg03
0420c     0E 00 00 FF 
04210     44 E4 85 F1 | 	sub	objptr, ##7236
04214     F2 12 02 FB | 	rdlong	arg01, objptr
04218     2D 00 00 FF 
0421c     E4 E5 85 F1 | 	sub	objptr, ##23524
04220     09 1F 02 F6 | 	mov	local01, arg01
04224     18 20 62 FD | 	getqx	local02
04228     97 06 48 FB | 	callpa	#(@LR__0341-@LR__0340)>>2,fcache_load_ptr_
0422c                 | LR__0340
0422c     0F FB C9 FA | 	rdbyte	result1, local01 wz
04230     01 1E 06 51 |  if_ne	add	local01, #1
04234     F4 FF 9F 5D |  if_ne	jmp	#LR__0340
04238                 | LR__0341
04238     09 1F 82 F1 | 	sub	local01, arg01
0423c     03 1E CE F7 | 	test	local01, #3 wz
04240     02 1E 46 50 |  if_ne	shr	local01, #2
04244     01 1E 06 51 |  if_ne	add	local01, #1
04248     02 1E 66 50 |  if_ne	shl	local01, #2
0424c     10 23 02 F6 | 	mov	local03, local02
04250     0F 23 02 F1 | 	add	local03, local01
04254     3A 00 00 FF 
04258     20 E4 05 F1 | 	add	objptr, ##29728
0425c     F2 16 02 FB | 	rdlong	arg03, objptr
04260     10 17 02 F1 | 	add	arg03, local02
04264     04 00 00 FF 
04268     28 E4 05 F1 | 	add	objptr, ##2088
0426c     F2 16 62 FC | 	wrlong	arg03, objptr
04270     04 E4 05 F1 | 	add	objptr, #4
04274     F2 1E 62 FC | 	wrlong	local01, objptr
04278     0C E4 85 F1 | 	sub	objptr, #12
0427c     F2 12 02 F6 | 	mov	arg01, objptr
04280     04 00 00 FF 
04284     20 E4 85 F1 | 	sub	objptr, ##2080
04288     F2 14 02 FB | 	rdlong	arg02, objptr
0428c     10 17 02 F6 | 	mov	arg03, local02
04290     2E 00 00 FF 
04294     60 E5 85 F1 | 	sub	objptr, ##23904
04298     0C 16 B1 FD | 	call	#_psram_spin2_write
0429c     22 00 00 FF 
042a0     24 E5 05 F1 | 	add	objptr, ##17700
042a4     F2 12 02 FB | 	rdlong	arg01, objptr
042a8     0C 00 00 FF 
042ac     3C E4 05 F1 | 	add	objptr, ##6204
042b0     F2 14 02 FB | 	rdlong	arg02, objptr
042b4     10 15 02 F1 | 	add	arg02, local02
042b8     0F 17 02 F6 | 	mov	arg03, local01
042bc     2E 00 00 FF 
042c0     60 E5 85 F1 | 	sub	objptr, ##23904
042c4     E0 15 B1 FD | 	call	#_psram_spin2_write
042c8     2E 00 00 FF 
042cc     60 E5 05 F1 | 	add	objptr, ##23904
042d0     F2 1E 02 FB | 	rdlong	local01, objptr
042d4     11 1F 02 F1 | 	add	local01, local03
042d8     F2 1E 62 FC | 	wrlong	local01, objptr
042dc     3A 00 00 FF 
042e0     20 E4 85 F1 | 	sub	objptr, ##29728
042e4     A7 F0 03 F6 | 	mov	ptra, fp
042e8     B2 00 A0 FD | 	call	#popregs_
042ec                 | _save_line_ret
042ec     2D 00 64 FD | 	ret
042f0                 | 
042f0                 | ' 
042f0                 | ' 
042f0                 | ' function insertline(aline as ulong) as integer
042f0                 | _insertline
042f0     02 4A 05 F6 | 	mov	COUNT_, #2
042f4     A8 00 A0 FD | 	call	#pushregs_
042f8     28 F0 07 F1 | 	add	ptra, #40
042fc     04 4E 05 F1 | 	add	fp, #4
04300     A7 12 62 FC | 	wrlong	arg01, fp
04304     41 00 00 FF 
04308     48 E4 05 F1 | 	add	objptr, ##33352
0430c     F2 1E 02 FB | 	rdlong	local01, objptr
04310     04 4E 05 F1 | 	add	fp, #4
04314     A7 1E 62 FC | 	wrlong	local01, fp
04318     08 4E 85 F1 | 	sub	fp, #8
0431c                 | ' 
0431c                 | ' do
0431c     35 00 00 FF 
04320     88 E5 85 F1 | 	sub	objptr, ##27528
04324                 | LR__0350
04324     10 4E 05 F1 | 	add	fp, #16
04328     A7 12 02 F6 | 	mov	arg01, fp
0432c     08 4E 85 F1 | 	sub	fp, #8
04330     A7 14 02 FB | 	rdlong	arg02, fp
04334     08 4E 85 F1 | 	sub	fp, #8
04338     18 16 06 F6 | 	mov	arg03, #24
0433c     CC 14 B1 FD | 	call	#_psram_spin2_read1
04340     08 4E 05 F1 | 	add	fp, #8
04344     A7 1E 02 FB | 	rdlong	local01, fp
04348     04 4E 05 F1 | 	add	fp, #4
0434c     A7 1E 62 FC | 	wrlong	local01, fp
04350     18 4E 05 F1 | 	add	fp, #24
04354     A7 1E 02 FB | 	rdlong	local01, fp
04358     1C 4E 85 F1 | 	sub	fp, #28
0435c     A7 1E 62 FC | 	wrlong	local01, fp
04360     08 4E 05 F1 | 	add	fp, #8
04364     A7 1E 02 FB | 	rdlong	local01, fp
04368     0C 4E 85 F1 | 	sub	fp, #12
0436c     A7 16 02 FB | 	rdlong	arg03, fp
04370     04 4E 85 F1 | 	sub	fp, #4
04374     0B 1F 12 F2 | 	cmp	local01, arg03 wc
04378     24 4E 05 C1 |  if_b	add	fp, #36
0437c     A7 20 02 CB |  if_b	rdlong	local02, fp
04380     24 4E 85 C1 |  if_b	sub	fp, #36
04384     FF FF 3F CF 
04388     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0438c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0350
04390     0B 00 00 FF 
04394     C0 E4 85 F1 | 	sub	objptr, ##5824
04398                 | ' 
04398                 | ' if header(0)=aline then return -1 ' delete it first
04398     10 4E 05 F1 | 	add	fp, #16
0439c     A7 1E 02 FB | 	rdlong	local01, fp
043a0     0C 4E 85 F1 | 	sub	fp, #12
043a4     A7 20 02 FB | 	rdlong	local02, fp
043a8     04 4E 85 F1 | 	sub	fp, #4
043ac     10 1F 0A F2 | 	cmp	local01, local02 wz
043b0     01 FA 65 A6 |  if_e	neg	result1, #1
043b4     74 01 90 AD |  if_e	jmp	#LR__0353
043b8                 | ' if header(0)<aline then return -2 ' end of program reached
043b8     10 4E 05 F1 | 	add	fp, #16
043bc     A7 1E 02 FB | 	rdlong	local01, fp
043c0     0C 4E 85 F1 | 	sub	fp, #12
043c4     A7 16 02 FB | 	rdlong	arg03, fp
043c8     04 4E 85 F1 | 	sub	fp, #4
043cc     0B 1F 12 F2 | 	cmp	local01, arg03 wc
043d0     02 FA 65 C6 |  if_b	neg	result1, #2
043d4     54 01 90 CD |  if_b	jmp	#LR__0353
043d8                 | ' 
043d8                 | ' if  header(4)=$FFFF_FFFF then ' this is one first line in the program so the inserted line will be new first
043d8     20 4E 05 F1 | 	add	fp, #32
043dc     A7 1E 02 FB | 	rdlong	local01, fp
043e0     20 4E 85 F1 | 	sub	fp, #32
043e4     FF FF 7F FF 
043e8     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
043ec     84 00 90 5D |  if_ne	jmp	#LR__0351
043f0     3A 00 00 FF 
043f4     20 E4 05 F1 | 	add	objptr, ##29728
043f8     F2 1E 02 FB | 	rdlong	local01, objptr
043fc     07 00 00 FF 
04400     28 E4 05 F1 | 	add	objptr, ##3624
04404     F2 1E 62 FC | 	wrlong	local01, objptr
04408     0C 4E 05 F1 | 	add	fp, #12
0440c     A7 12 02 FB | 	rdlong	arg01, fp
04410     0C 4E 85 F1 | 	sub	fp, #12
04414     10 12 06 F1 | 	add	arg01, #16
04418     07 00 00 FF 
0441c     28 E4 85 F1 | 	sub	objptr, ##3624
04420     F2 14 02 FB | 	rdlong	arg02, objptr
04424     01 16 06 F6 | 	mov	arg03, #1
04428     00 18 06 F6 | 	mov	arg04, #0
0442c     2E 00 00 FF 
04430     60 E5 85 F1 | 	sub	objptr, ##23904
04434                 | '     return fill(addr, pattern, count, listPtr, 4)
04434     04 1A 06 F6 | 	mov	arg05, #4
04438     08 15 B1 FD | 	call	#_psram_spin2_fill
0443c     32 00 00 FF 
04440     90 E5 05 F1 | 	add	objptr, ##26000
04444     FF FF FF FF 
04448     F2 FE 6B FC | 	wrlong	##-1, objptr
0444c     0C 4E 05 F1 | 	add	fp, #12
04450     A7 1E 02 FB | 	rdlong	local01, fp
04454     0C 4E 85 F1 | 	sub	fp, #12
04458     04 E4 05 F1 | 	add	objptr, #4
0445c     F2 1E 62 FC | 	wrlong	local01, objptr
04460     3E 00 00 FF 
04464     54 E4 85 F1 | 	sub	objptr, ##31828
04468     78 FD BF FD | 	call	#_save_line
0446c                 | '   programstart=programptr
0446c                 | '   pslpoke(lineptr2+16,programptr)
0446c                 | '   ucompiledline(4)=$FFFF_FFFF
0446c                 | '   ucompiledline(5)=lineptr2
0446c                 | '   save_line
0446c                 | '   return 0
0446c     00 FA 05 F6 | 	mov	result1, #0
04470     B8 00 90 FD | 	jmp	#LR__0353
04474                 | LR__0351
04474                 | ' 
04474                 | ' if header(4)<>$FFFF_FFFF then ' this is not first line of the program. It doesn't matter if it is last as we will insert it before
04474     20 4E 05 F1 | 	add	fp, #32
04478     A7 1E 02 FB | 	rdlong	local01, fp
0447c     20 4E 85 F1 | 	sub	fp, #32
04480     FF FF 7F FF 
04484     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
04488     9C 00 90 AD |  if_e	jmp	#LR__0352
0448c     20 4E 05 F1 | 	add	fp, #32
04490     A7 1E 02 FB | 	rdlong	local01, fp
04494     3E 00 00 FF 
04498     50 E4 05 F1 | 	add	objptr, ##31824
0449c     F2 1E 62 FC | 	wrlong	local01, objptr
044a0     14 4E 85 F1 | 	sub	fp, #20
044a4     A7 1E 02 FB | 	rdlong	local01, fp
044a8     04 E4 05 F1 | 	add	objptr, #4
044ac     F2 1E 62 FC | 	wrlong	local01, objptr
044b0     A7 12 02 FB | 	rdlong	arg01, fp
044b4     0C 4E 85 F1 | 	sub	fp, #12
044b8     10 12 06 F1 | 	add	arg01, #16
044bc     04 00 00 FF 
044c0     34 E4 85 F1 | 	sub	objptr, ##2100
044c4     F2 14 02 FB | 	rdlong	arg02, objptr
044c8     01 16 06 F6 | 	mov	arg03, #1
044cc     00 18 06 F6 | 	mov	arg04, #0
044d0     2E 00 00 FF 
044d4     60 E5 85 F1 | 	sub	objptr, ##23904
044d8                 | '     return fill(addr, pattern, count, listPtr, 4)
044d8     04 1A 06 F6 | 	mov	arg05, #4
044dc     64 14 B1 FD | 	call	#_psram_spin2_fill
044e0     20 4E 05 F1 | 	add	fp, #32
044e4     A7 12 02 FB | 	rdlong	arg01, fp
044e8     20 4E 85 F1 | 	sub	fp, #32
044ec     14 12 06 F1 | 	add	arg01, #20
044f0     2E 00 00 FF 
044f4     60 E5 05 F1 | 	add	objptr, ##23904
044f8     F2 14 02 FB | 	rdlong	arg02, objptr
044fc     01 16 06 F6 | 	mov	arg03, #1
04500     00 18 06 F6 | 	mov	arg04, #0
04504     2E 00 00 FF 
04508     60 E5 85 F1 | 	sub	objptr, ##23904
0450c                 | '     return fill(addr, pattern, count, listPtr, 4)
0450c     04 1A 06 F6 | 	mov	arg05, #4
04510     30 14 B1 FD | 	call	#_psram_spin2_fill
04514     0B 00 00 FF 
04518     C0 E4 85 F1 | 	sub	objptr, ##5824
0451c     C4 FC BF FD | 	call	#_save_line
04520                 | '   ucompiledline(4)=header(4)
04520                 | '   ucompiledline(5)=lineptr2
04520                 | '   pslpoke(lineptr2+16,programptr)
04520                 | '   pslpoke(header(4)+20,programptr)
04520                 | '   save_line
04520                 | '   return 0
04520     00 FA 05 F6 | 	mov	result1, #0
04524     04 00 90 FD | 	jmp	#LR__0353
04528                 | LR__0352
04528     00 FA 05 F6 | 	mov	result1, #0
0452c                 | LR__0353
0452c     A7 F0 03 F6 | 	mov	ptra, fp
04530     B2 00 A0 FD | 	call	#popregs_
04534                 | _insertline_ret
04534     2D 00 64 FD | 	ret
04538                 | 
04538                 | ' 
04538                 | ' sub add_line_at_end(aline) 
04538                 | _add_line_at_end
04538     41 00 00 FF 
0453c     4C E4 05 F1 | 	add	objptr, ##33356
04540     F2 12 62 FC | 	wrlong	arg01, objptr
04544     04 E4 05 F1 | 	add	objptr, #4
04548     F2 14 02 FB | 	rdlong	arg02, objptr
0454c     03 00 00 FF 
04550     00 E4 85 F1 | 	sub	objptr, ##1536
04554     F2 14 62 FC | 	wrlong	arg02, objptr
04558     03 00 00 FF 
0455c     00 E4 05 F1 | 	add	objptr, ##1536
04560     F2 12 02 FB | 	rdlong	arg01, objptr
04564     14 12 06 F1 | 	add	arg01, #20
04568     07 00 00 FF 
0456c     30 E4 85 F1 | 	sub	objptr, ##3632
04570     F2 14 02 FB | 	rdlong	arg02, objptr
04574     01 16 06 F6 | 	mov	arg03, #1
04578     00 18 06 F6 | 	mov	arg04, #0
0457c     2E 00 00 FF 
04580     60 E5 85 F1 | 	sub	objptr, ##23904
04584                 | '     return fill(addr, pattern, count, listPtr, 4)
04584     04 1A 06 F6 | 	mov	arg05, #4
04588     B8 13 B1 FD | 	call	#_psram_spin2_fill
0458c     2E 00 00 FF 
04590     60 E5 05 F1 | 	add	objptr, ##23904
04594     F2 14 02 FB | 	rdlong	arg02, objptr
04598     07 00 00 FF 
0459c     30 E4 05 F1 | 	add	objptr, ##3632
045a0     F2 14 62 FC | 	wrlong	arg02, objptr
045a4     02 00 00 FF 
045a8     FC E5 85 F1 | 	sub	objptr, ##1532
045ac     FF FF BF FF 
045b0     F2 FE 6B FC | 	wrlong	##2147483647, objptr
045b4                 | ' 
045b4                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
045b4                 | ' if programptr=0 then ucompiledline(4)=$FFFFFFFF ' that is the first line
045b4     04 00 00 FF 
045b8     34 E4 85 F1 | 	sub	objptr, ##2100
045bc     F2 14 0A FB | 	rdlong	arg02, objptr wz
045c0     3A 00 00 FF 
045c4     20 E4 85 F1 | 	sub	objptr, ##29728
045c8     3E 00 00 AF 
045cc     50 E4 05 A1 |  if_e	add	objptr, ##31824
045d0     FF FF FF AF 
045d4     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
045d8     3E 00 00 AF 
045dc     50 E4 85 A1 |  if_e	sub	objptr, ##31824
045e0     00 FC BF FD | 	call	#_save_line
045e4     3A 00 00 FF 
045e8     20 E4 05 F1 | 	add	objptr, ##29728
045ec     F2 12 02 FB | 	rdlong	arg01, objptr
045f0     01 14 66 F6 | 	neg	arg02, #1
045f4     01 16 06 F6 | 	mov	arg03, #1
045f8     00 18 06 F6 | 	mov	arg04, #0
045fc     2E 00 00 FF 
04600     60 E5 85 F1 | 	sub	objptr, ##23904
04604                 | '     return fill(addr, pattern, count, listPtr, 4)
04604     04 1A 06 F6 | 	mov	arg05, #4
04608     38 13 B1 FD | 	call	#_psram_spin2_fill
0460c     0B 00 00 FF 
04610     C0 E4 85 F1 | 	sub	objptr, ##5824
04614                 | _add_line_at_end_ret
04614     2D 00 64 FD | 	ret
04618                 | 
04618                 | ' 
04618                 | ' function compile_immediate(linetype as ulong) as integer
04618                 | _compile_immediate
04618     09 4A 05 F6 | 	mov	COUNT_, #9
0461c     A8 00 A0 FD | 	call	#pushregs_
04620                 | _compile_immediate_enter
04620     09 25 0A F6 | 	mov	local04, arg01 wz
04624     00 26 06 F6 | 	mov	local05, #0
04628     00 28 06 F6 | 	mov	local06, #0
0462c                 | ' 
0462c                 | ' ' linetype=cont+1, linetype=0 immediate
0462c                 | ' '  : 1: this is the first part of the line that will continue
0462c                 | ' ' 2 - this is the continuation of the line
0462c                 | ' ' 3 - this is the last continued line
0462c                 | ' ' 4 - this is the one and only part
0462c                 | ' 
0462c                 | ' err=0
0462c                 | ' cmd=0
0462c                 | ' if linetype=0 then cmd=lparts(0).token : ct=1 : lineptr=0 
0462c     2C 00 90 5D |  if_ne	jmp	#LR__0360
04630     2B 00 00 FF 
04634     D4 E5 05 F1 | 	add	objptr, ##22484
04638     F2 28 02 FB | 	rdlong	local06, objptr
0463c     02 00 00 FF 
04640     34 E4 05 F1 | 	add	objptr, ##1076
04644     F2 02 68 FC | 	wrlong	#1, objptr
04648     13 00 00 FF 
0464c     38 E4 05 F1 | 	add	objptr, ##9784
04650     F2 00 68 FC | 	wrlong	#0, objptr
04654     41 00 00 FF 
04658     40 E4 85 F1 | 	sub	objptr, ##33344
0465c                 | LR__0360
0465c                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 ' don't set lineptr
0465c     02 24 0E F2 | 	cmp	local04, #2 wz
04660     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04664     2B 00 00 AF 
04668     D4 E5 05 A1 |  if_e	add	objptr, ##22484
0466c     F2 28 02 AB |  if_e	rdlong	local06, objptr
04670     02 00 00 AF 
04674     34 E4 05 A1 |  if_e	add	objptr, ##1076
04678     F2 02 68 AC |  if_e	wrlong	#1, objptr
0467c     2E 00 00 AF 
04680     08 E4 85 A1 |  if_e	sub	objptr, ##23560
04684                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
04684     04 24 0E F2 | 	cmp	local04, #4 wz
04688     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
0468c     2C 00 90 5D |  if_ne	jmp	#LR__0361
04690     2B 00 00 FF 
04694     DC E5 05 F1 | 	add	objptr, ##22492
04698     F2 28 02 FB | 	rdlong	local06, objptr
0469c     02 00 00 FF 
046a0     2C E4 05 F1 | 	add	objptr, ##1068
046a4     F2 04 68 FC | 	wrlong	#2, objptr
046a8     13 00 00 FF 
046ac     38 E4 05 F1 | 	add	objptr, ##9784
046b0     F2 04 68 FC | 	wrlong	#2, objptr
046b4     41 00 00 FF 
046b8     40 E4 85 F1 | 	sub	objptr, ##33344
046bc                 | LR__0361
046bc                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 ' continued after if/else
046bc     05 24 0E F2 | 	cmp	local04, #5 wz
046c0     40 00 90 5D |  if_ne	jmp	#LR__0362
046c4     2E 00 00 FF 
046c8     08 E4 05 F1 | 	add	objptr, ##23560
046cc     F2 2A 02 FB | 	rdlong	local07, objptr
046d0     15 29 02 F6 | 	mov	local06, local07
046d4     03 28 66 F0 | 	shl	local06, #3
046d8     02 00 00 FF 
046dc     38 E4 85 F1 | 	sub	objptr, ##1080
046e0     F2 28 02 F1 | 	add	local06, objptr
046e4     04 28 06 F1 | 	add	local06, #4
046e8     14 29 02 FB | 	rdlong	local06, local06
046ec     01 2A 06 F1 | 	add	local07, #1
046f0     02 00 00 FF 
046f4     38 E4 05 F1 | 	add	objptr, ##1080
046f8     F2 2A 62 FC | 	wrlong	local07, objptr
046fc     2E 00 00 FF 
04700     08 E4 85 F1 | 	sub	objptr, ##23560
04704                 | LR__0362
04704     00 2C 06 F6 | 	mov	local08, #0
04708                 | ' vars=0
04708                 | ' 'print  "In compile_immediate cmd=:", cmd
04708                 | ' 451 select case cmd
04708     40 28 0E F2 | 	cmp	local06, #64 wz
0470c     41 28 0E 52 |  if_ne	cmp	local06, #65 wz
04710     08 03 90 AD |  if_e	jmp	#LR__0407
04714     4C 28 0E F2 | 	cmp	local06, #76 wz
04718     6C 01 90 AD |  if_e	jmp	#LR__0363
0471c     4D 28 0E F2 | 	cmp	local06, #77 wz
04720     F8 02 90 AD |  if_e	jmp	#LR__0407
04724     42 28 0E F2 | 	cmp	local06, #66 wz
04728     68 01 90 AD |  if_e	jmp	#LR__0364
0472c     43 28 0E F2 | 	cmp	local06, #67 wz
04730     6C 01 90 AD |  if_e	jmp	#LR__0365
04734     45 28 0E F2 | 	cmp	local06, #69 wz
04738     70 01 90 AD |  if_e	jmp	#LR__0366
0473c     46 28 0E F2 | 	cmp	local06, #70 wz
04740     74 01 90 AD |  if_e	jmp	#LR__0367
04744     47 28 0E F2 | 	cmp	local06, #71 wz
04748     78 01 90 AD |  if_e	jmp	#LR__0368
0474c     48 28 0E F2 | 	cmp	local06, #72 wz
04750     7C 01 90 AD |  if_e	jmp	#LR__0369
04754     49 28 0E F2 | 	cmp	local06, #73 wz
04758     80 01 90 AD |  if_e	jmp	#LR__0370
0475c     44 28 0E F2 | 	cmp	local06, #68 wz
04760     84 01 90 AD |  if_e	jmp	#LR__0371
04764     4E 28 0E F2 | 	cmp	local06, #78 wz
04768     88 01 90 AD |  if_e	jmp	#LR__0372
0476c     50 28 0E F2 | 	cmp	local06, #80 wz
04770     9C 01 90 AD |  if_e	jmp	#LR__0374
04774     51 28 0E F2 | 	cmp	local06, #81 wz
04778     9C 01 90 AD |  if_e	jmp	#LR__0375
0477c     52 28 0E F2 | 	cmp	local06, #82 wz
04780     9C 01 90 AD |  if_e	jmp	#LR__0376
04784     59 28 0E F2 | 	cmp	local06, #89 wz
04788     9C 01 90 AD |  if_e	jmp	#LR__0377
0478c     55 28 0E F2 | 	cmp	local06, #85 wz
04790     9C 01 90 AD |  if_e	jmp	#LR__0378
04794     56 28 0E F2 | 	cmp	local06, #86 wz
04798     9C 01 90 AD |  if_e	jmp	#LR__0379
0479c     57 28 0E F2 | 	cmp	local06, #87 wz
047a0     70 28 0E 52 |  if_ne	cmp	local06, #112 wz
047a4     74 02 90 AD |  if_e	jmp	#LR__0407
047a8     58 28 0E F2 | 	cmp	local06, #88 wz
047ac     90 01 90 AD |  if_e	jmp	#LR__0380
047b0     4A 28 0E F2 | 	cmp	local06, #74 wz
047b4     90 01 90 AD |  if_e	jmp	#LR__0381
047b8     4B 28 0E F2 | 	cmp	local06, #75 wz
047bc     90 01 90 AD |  if_e	jmp	#LR__0382
047c0     5A 28 0E F2 | 	cmp	local06, #90 wz
047c4     90 01 90 AD |  if_e	jmp	#LR__0383
047c8     5C 28 0E F2 | 	cmp	local06, #92 wz
047cc     90 01 90 AD |  if_e	jmp	#LR__0384
047d0     5D 28 0E F2 | 	cmp	local06, #93 wz
047d4     44 02 90 AD |  if_e	jmp	#LR__0407
047d8     5E 28 0E F2 | 	cmp	local06, #94 wz
047dc     8C 01 90 AD |  if_e	jmp	#LR__0385
047e0     5F 28 0E F2 | 	cmp	local06, #95 wz
047e4     8C 01 90 AD |  if_e	jmp	#LR__0386
047e8     60 28 0E F2 | 	cmp	local06, #96 wz
047ec     8C 01 90 AD |  if_e	jmp	#LR__0387
047f0     61 28 0E F2 | 	cmp	local06, #97 wz
047f4     8C 01 90 AD |  if_e	jmp	#LR__0388
047f8     63 28 0E F2 | 	cmp	local06, #99 wz
047fc     8C 01 90 AD |  if_e	jmp	#LR__0389
04800     68 28 0E F2 | 	cmp	local06, #104 wz
04804     8C 01 90 AD |  if_e	jmp	#LR__0390
04808     69 28 0E F2 | 	cmp	local06, #105 wz
0480c     8C 01 90 AD |  if_e	jmp	#LR__0391
04810     6D 28 0E F2 | 	cmp	local06, #109 wz
04814     8C 01 90 AD |  if_e	jmp	#LR__0392
04818     6C 28 0E F2 | 	cmp	local06, #108 wz
0481c     8C 01 90 AD |  if_e	jmp	#LR__0393
04820     71 28 0E F2 | 	cmp	local06, #113 wz
04824     8C 01 90 AD |  if_e	jmp	#LR__0394
04828     79 28 0E F2 | 	cmp	local06, #121 wz
0482c     8C 01 90 AD |  if_e	jmp	#LR__0395
04830     77 28 0E F2 | 	cmp	local06, #119 wz
04834     8C 01 90 AD |  if_e	jmp	#LR__0396
04838     78 28 0E F2 | 	cmp	local06, #120 wz
0483c     8C 01 90 AD |  if_e	jmp	#LR__0397
04840     7C 28 0E F2 | 	cmp	local06, #124 wz
04844     8C 01 90 AD |  if_e	jmp	#LR__0398
04848     7D 28 0E F2 | 	cmp	local06, #125 wz
0484c     8C 01 90 AD |  if_e	jmp	#LR__0399
04850     7E 28 0E F2 | 	cmp	local06, #126 wz
04854     8C 01 90 AD |  if_e	jmp	#LR__0400
04858     7F 28 0E F2 | 	cmp	local06, #127 wz
0485c     8C 01 90 AD |  if_e	jmp	#LR__0401
04860     80 28 0E F2 | 	cmp	local06, #128 wz
04864     8C 01 90 AD |  if_e	jmp	#LR__0402
04868     72 28 0E F2 | 	cmp	local06, #114 wz
0486c     8C 01 90 AD |  if_e	jmp	#LR__0403
04870     81 28 0E F2 | 	cmp	local06, #129 wz
04874     8C 01 90 AD |  if_e	jmp	#LR__0404
04878     01 00 00 FF 
0487c     04 28 0E F2 | 	cmp	local06, ##516 wz
04880     88 01 90 AD |  if_e	jmp	#LR__0405
04884     8C 01 90 FD | 	jmp	#LR__0406
04888                 | LR__0363
04888     90 0F B0 FD | 	call	#_compile_fun_varp
0488c     FD 2C 02 F6 | 	mov	local08, result1
04890     88 01 90 FD | 	jmp	#LR__0407
04894                 | LR__0364
04894     A4 0B B0 FD | 	call	#_compile_fun_2p
04898     FD 26 02 F6 | 	mov	local05, result1
0489c     7C 01 90 FD | 	jmp	#LR__0407
048a0                 | LR__0365
048a0     98 0B B0 FD | 	call	#_compile_fun_2p
048a4     FD 26 02 F6 | 	mov	local05, result1
048a8     70 01 90 FD | 	jmp	#LR__0407
048ac                 | LR__0366
048ac     00 0C B0 FD | 	call	#_compile_fun_3p
048b0     FD 26 02 F6 | 	mov	local05, result1
048b4     64 01 90 FD | 	jmp	#LR__0407
048b8                 | LR__0367
048b8     F4 0B B0 FD | 	call	#_compile_fun_3p
048bc     FD 26 02 F6 | 	mov	local05, result1
048c0     58 01 90 FD | 	jmp	#LR__0407
048c4                 | LR__0368
048c4     B4 0C B0 FD | 	call	#_compile_fun_4p
048c8     FD 26 02 F6 | 	mov	local05, result1
048cc     4C 01 90 FD | 	jmp	#LR__0407
048d0                 | LR__0369
048d0     A8 0C B0 FD | 	call	#_compile_fun_4p
048d4     FD 26 02 F6 | 	mov	local05, result1
048d8     40 01 90 FD | 	jmp	#LR__0407
048dc                 | LR__0370
048dc     80 2D B0 FD | 	call	#_expr
048e0                 | ' 
048e0                 | ' 
048e0                 | ' expr()
048e0                 | ' return 0
048e0     00 26 06 F6 | 	mov	local05, #0
048e4     34 01 90 FD | 	jmp	#LR__0407
048e8                 | LR__0371
048e8     5C 10 B0 FD | 	call	#_compile_print
048ec     FD 26 02 F6 | 	mov	local05, result1
048f0     E4 01 90 FD | 	jmp	#LR__0408
048f4                 | LR__0372
048f4     01 24 16 F2 | 	cmp	local04, #1 wc
048f8     08 00 90 CD |  if_b	jmp	#LR__0373
048fc     00 2A B0 FD | 	call	#_compile_goto
04900     D4 01 90 FD | 	jmp	#LR__0408
04904                 | LR__0373
04904     19 12 06 F6 | 	mov	arg01, #25
04908     CC E4 B0 FD | 	call	#_printerror
0490c     C8 01 90 FD | 	jmp	#LR__0408
04910                 | LR__0374
04910     4C 2D B0 FD | 	call	#_expr
04914                 | ' 
04914                 | ' 
04914                 | ' expr()
04914                 | ' return 0
04914     04 01 90 FD | 	jmp	#LR__0407
04918                 | LR__0375
04918     44 2D B0 FD | 	call	#_expr
0491c                 | ' 
0491c                 | ' 
0491c                 | ' expr()
0491c                 | ' return 0
0491c     FC 00 90 FD | 	jmp	#LR__0407
04920                 | LR__0376
04920     3C 2D B0 FD | 	call	#_expr
04924                 | ' 
04924                 | ' 
04924                 | ' expr()
04924                 | ' return 0
04924     F4 00 90 FD | 	jmp	#LR__0407
04928                 | LR__0377
04928     34 2D B0 FD | 	call	#_expr
0492c                 | ' 
0492c                 | ' 
0492c                 | ' expr()
0492c                 | ' return 0
0492c     EC 00 90 FD | 	jmp	#LR__0407
04930                 | LR__0378
04930     94 0F B0 FD | 	call	#_compile_int_fun_2p
04934     E4 00 90 FD | 	jmp	#LR__0407
04938                 | LR__0379
04938     18 0A B0 FD | 	call	#_compile_converttoint
0493c                 | ' return err
0493c     DC 00 90 FD | 	jmp	#LR__0407
04940                 | LR__0380
04940     DC 16 B0 FD | 	call	#_compile_if
04944     90 01 90 FD | 	jmp	#LR__0408
04948                 | LR__0381
04948     18 20 B0 FD | 	call	#_compile_for
0494c     88 01 90 FD | 	jmp	#LR__0408
04950                 | LR__0382
04950     FC 27 B0 FD | 	call	#_compile_next
04954     80 01 90 FD | 	jmp	#LR__0408
04958                 | LR__0383
04958     04 18 B0 FD | 	call	#_compile_else
0495c     78 01 90 FD | 	jmp	#LR__0408
04960                 | LR__0384
04960     D8 0A B0 FD | 	call	#_compile_fun_2p
04964     FD 26 02 F6 | 	mov	local05, result1
04968     B0 00 90 FD | 	jmp	#LR__0407
0496c                 | LR__0385
0496c     F0 2C B0 FD | 	call	#_expr
04970                 | ' 
04970                 | ' 
04970                 | ' expr()
04970                 | ' return 0
04970     A8 00 90 FD | 	jmp	#LR__0407
04974                 | LR__0386
04974     E8 2C B0 FD | 	call	#_expr
04978                 | ' 
04978                 | ' 
04978                 | ' expr()
04978                 | ' return 0
04978     A0 00 90 FD | 	jmp	#LR__0407
0497c                 | LR__0387
0497c     E0 2C B0 FD | 	call	#_expr
04980                 | ' 
04980                 | ' 
04980                 | ' expr()
04980                 | ' return 0
04980     98 00 90 FD | 	jmp	#LR__0407
04984                 | LR__0388
04984     D8 2C B0 FD | 	call	#_expr
04988                 | ' 
04988                 | ' 
04988                 | ' expr()
04988                 | ' return 0
04988     90 00 90 FD | 	jmp	#LR__0407
0498c                 | LR__0389
0498c     D0 2C B0 FD | 	call	#_expr
04990                 | ' 
04990                 | ' 
04990                 | ' expr()
04990                 | ' return 0
04990     88 00 90 FD | 	jmp	#LR__0407
04994                 | LR__0390
04994     C8 2C B0 FD | 	call	#_expr
04998                 | ' 
04998                 | ' 
04998                 | ' expr()
04998                 | ' return 0
04998     80 00 90 FD | 	jmp	#LR__0407
0499c                 | LR__0391
0499c     C0 2C B0 FD | 	call	#_expr
049a0                 | ' 
049a0                 | ' 
049a0                 | ' expr()
049a0                 | ' return 0
049a0     78 00 90 FD | 	jmp	#LR__0407
049a4                 | LR__0392
049a4     08 0B B0 FD | 	call	#_compile_fun_3p
049a8     70 00 90 FD | 	jmp	#LR__0407
049ac                 | LR__0393
049ac     F0 0C B0 FD | 	call	#_compile_fun_5p
049b0     68 00 90 FD | 	jmp	#LR__0407
049b4                 | LR__0394
049b4     C4 0B B0 FD | 	call	#_compile_fun_4p
049b8     60 00 90 FD | 	jmp	#LR__0407
049bc                 | LR__0395
049bc     7C 0A B0 FD | 	call	#_compile_fun_2p
049c0     58 00 90 FD | 	jmp	#LR__0407
049c4                 | LR__0396
049c4     74 0A B0 FD | 	call	#_compile_fun_2p
049c8     50 00 90 FD | 	jmp	#LR__0407
049cc                 | LR__0397
049cc     6C 0A B0 FD | 	call	#_compile_fun_2p
049d0     48 00 90 FD | 	jmp	#LR__0407
049d4                 | LR__0398
049d4     88 2C B0 FD | 	call	#_expr
049d8                 | ' 
049d8                 | ' 
049d8                 | ' expr()
049d8                 | ' return 0
049d8     40 00 90 FD | 	jmp	#LR__0407
049dc                 | LR__0399
049dc     80 2C B0 FD | 	call	#_expr
049e0                 | ' 
049e0                 | ' 
049e0                 | ' expr()
049e0                 | ' return 0
049e0     38 00 90 FD | 	jmp	#LR__0407
049e4                 | LR__0400
049e4     78 2C B0 FD | 	call	#_expr
049e8                 | ' 
049e8                 | ' 
049e8                 | ' expr()
049e8                 | ' return 0
049e8     30 00 90 FD | 	jmp	#LR__0407
049ec                 | LR__0401
049ec     8C 0B B0 FD | 	call	#_compile_fun_4p
049f0     28 00 90 FD | 	jmp	#LR__0407
049f4                 | LR__0402
049f4     68 2C B0 FD | 	call	#_expr
049f8                 | ' 
049f8                 | ' 
049f8                 | ' expr()
049f8                 | ' return 0
049f8     20 00 90 FD | 	jmp	#LR__0407
049fc                 | LR__0403
049fc     88 18 B0 FD | 	call	#_compile_dim
04a00     D4 00 90 FD | 	jmp	#LR__0408
04a04                 | LR__0404
04a04     34 0A B0 FD | 	call	#_compile_fun_2p
04a08     10 00 90 FD | 	jmp	#LR__0407
04a0c                 | LR__0405
04a0c     20 01 B0 FD | 	call	#_compile_array_assign
04a10     C4 00 90 FD | 	jmp	#LR__0408
04a14                 | LR__0406
04a14     80 08 B0 FD | 	call	#_compile_unknown
04a18     BC 00 90 FD | 	jmp	#LR__0408
04a1c                 | LR__0407
04a1c     14 23 02 F6 | 	mov	local03, local06
04a20     16 1F 02 F6 | 	mov	local01, local08
04a24     0F 2B 02 F6 | 	mov	local07, local01
04a28     10 2F 02 F6 | 	mov	local09, local02
04a2c     11 1F 02 F6 | 	mov	local01, local03
04a30     41 00 00 FF 
04a34     40 E4 05 F1 | 	add	objptr, ##33344
04a38     F2 2C 02 FB | 	rdlong	local08, objptr
04a3c     16 29 02 F6 | 	mov	local06, local08
04a40     01 28 66 F0 | 	shl	local06, #1
04a44     16 29 02 F1 | 	add	local06, local08
04a48     02 28 66 F0 | 	shl	local06, #2
04a4c     03 00 00 FF 
04a50     00 E4 85 F1 | 	sub	objptr, ##1536
04a54     F2 28 02 F1 | 	add	local06, objptr
04a58     14 2B 62 FC | 	wrlong	local07, local06
04a5c     03 00 00 FF 
04a60     00 E4 05 F1 | 	add	objptr, ##1536
04a64     F2 2C 02 FB | 	rdlong	local08, objptr
04a68     16 2B 02 F6 | 	mov	local07, local08
04a6c     01 2A 66 F0 | 	shl	local07, #1
04a70     16 2B 02 F1 | 	add	local07, local08
04a74     02 2A 66 F0 | 	shl	local07, #2
04a78     03 00 00 FF 
04a7c     00 E4 85 F1 | 	sub	objptr, ##1536
04a80     F2 2A 02 F1 | 	add	local07, objptr
04a84     04 2A 06 F1 | 	add	local07, #4
04a88     15 2F 62 FC | 	wrlong	local09, local07
04a8c     03 00 00 FF 
04a90     00 E4 05 F1 | 	add	objptr, ##1536
04a94     F2 2E 02 FB | 	rdlong	local09, objptr
04a98     17 2D 02 F6 | 	mov	local08, local09
04a9c     01 2C 66 F0 | 	shl	local08, #1
04aa0     17 2D 02 F1 | 	add	local08, local09
04aa4     02 2C 66 F0 | 	shl	local08, #2
04aa8     03 00 00 FF 
04aac     00 E4 85 F1 | 	sub	objptr, ##1536
04ab0     F2 2C 02 F1 | 	add	local08, objptr
04ab4     08 2C 06 F1 | 	add	local08, #8
04ab8     16 1F 62 FC | 	wrlong	local01, local08
04abc     03 00 00 FF 
04ac0     00 E4 05 F1 | 	add	objptr, ##1536
04ac4     F2 2A 02 FB | 	rdlong	local07, objptr
04ac8     01 2A 06 F1 | 	add	local07, #1
04acc     F2 2A 62 FC | 	wrlong	local07, objptr
04ad0     41 00 00 FF 
04ad4     40 E4 85 F1 | 	sub	objptr, ##33344
04ad8                 | LR__0408
04ad8                 | ' 
04ad8                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
04ad8                 | ' 450 if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end ' end token if the last part or imm
04ad8     00 24 0E F2 | 	cmp	local04, #0 wz
04adc     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04ae0     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
04ae4     38 00 90 5D |  if_ne	jmp	#LR__0409
04ae8     41 00 00 FF 
04aec     40 E4 05 F1 | 	add	objptr, ##33344
04af0     F2 2E 02 FB | 	rdlong	local09, objptr
04af4     17 1F 02 F6 | 	mov	local01, local09
04af8     01 1E 66 F0 | 	shl	local01, #1
04afc     17 1F 02 F1 | 	add	local01, local09
04b00     02 1E 66 F0 | 	shl	local01, #2
04b04     03 00 00 FF 
04b08     00 E4 85 F1 | 	sub	objptr, ##1536
04b0c     F2 1E 02 F1 | 	add	local01, objptr
04b10     08 1E 06 F1 | 	add	local01, #8
04b14     0F FD 6B FC | 	wrlong	#510, local01
04b18     3E 00 00 FF 
04b1c     40 E4 85 F1 | 	sub	objptr, ##31808
04b20                 | LR__0409
04b20                 | ' 
04b20                 | ' ' print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
04b20                 | ' return err
04b20     13 FB 01 F6 | 	mov	result1, local05
04b24     A7 F0 03 F6 | 	mov	ptra, fp
04b28     B2 00 A0 FD | 	call	#popregs_
04b2c                 | _compile_immediate_ret
04b2c     2D 00 64 FD | 	ret
04b30                 | 
04b30                 | ' 
04b30                 | ' sub compile_array_assign
04b30                 | _compile_array_assign
04b30     0A 4A 05 F6 | 	mov	COUNT_, #10
04b34     A8 00 A0 FD | 	call	#pushregs_
04b38     00 24 06 F6 | 	mov	local04, #0
04b3c     2E 00 00 FF 
04b40     08 E4 05 F1 | 	add	objptr, ##23560
04b44     F2 26 02 FB | 	rdlong	local05, objptr
04b48     13 FB 01 F6 | 	mov	result1, local05
04b4c     01 FA 85 F1 | 	sub	result1, #1
04b50     03 FA 65 F0 | 	shl	result1, #3
04b54     02 00 00 FF 
04b58     38 E4 85 F1 | 	sub	objptr, ##1080
04b5c     F2 FA 01 F1 | 	add	result1, objptr
04b60     FD 28 02 FB | 	rdlong	local06, result1
04b64                 | ' numpar=0
04b64                 | ' 'print "In array_assign, lparts(ct).token=",lparts(ct).token,lparts(ct).part$
04b64                 | ' ' todo here: recognize params and t1.result.twowords=numpar
04b64                 | ' varname$=lparts(ct-1).part$' : print "In array_assign, varname$=";varname$
04b64                 | ' if lparts(ct).token=token_lpar then
04b64     03 26 66 F0 | 	shl	local05, #3
04b68     F2 26 02 F1 | 	add	local05, objptr
04b6c     04 26 06 F1 | 	add	local05, #4
04b70     13 27 02 FB | 	rdlong	local05, local05
04b74     15 26 0E F2 | 	cmp	local05, #21 wz
04b78     2B 00 00 FF 
04b7c     D0 E5 85 F1 | 	sub	objptr, ##22480
04b80     D4 01 90 5D |  if_ne	jmp	#LR__0414
04b84     2E 00 00 FF 
04b88     08 E4 05 F1 | 	add	objptr, ##23560
04b8c     F2 2A 02 FB | 	rdlong	local07, objptr
04b90     01 2A 06 F1 | 	add	local07, #1
04b94     F2 2A 62 FC | 	wrlong	local07, objptr
04b98     2E 00 00 FF 
04b9c     08 E4 85 F1 | 	sub	objptr, ##23560
04ba0                 | '   ct+=1 											' omit this lpar, this is for expr list
04ba0                 | '   do
04ba0                 | LR__0410
04ba0     BC 2A B0 FD | 	call	#_expr
04ba4     2E 00 00 FF 
04ba8     08 E4 05 F1 | 	add	objptr, ##23560
04bac     F2 26 02 FB | 	rdlong	local05, objptr
04bb0     01 26 06 F1 | 	add	local05, #1
04bb4     F2 26 62 FC | 	wrlong	local05, objptr
04bb8     01 24 06 F1 | 	add	local04, #1
04bbc     01 26 86 F1 | 	sub	local05, #1
04bc0     03 26 66 F0 | 	shl	local05, #3
04bc4     02 00 00 FF 
04bc8     38 E4 85 F1 | 	sub	objptr, ##1080
04bcc     F2 26 02 F1 | 	add	local05, objptr
04bd0     04 26 06 F1 | 	add	local05, #4
04bd4     13 2B 02 FB | 	rdlong	local07, local05
04bd8     14 2A 0E F2 | 	cmp	local07, #20 wz
04bdc     2B 00 00 FF 
04be0     D0 E5 85 F1 | 	sub	objptr, ##22480
04be4     34 00 90 AD |  if_e	jmp	#LR__0411
04be8     2E 00 00 FF 
04bec     08 E4 05 F1 | 	add	objptr, ##23560
04bf0     F2 2A 02 FB | 	rdlong	local07, objptr
04bf4     03 2A 66 F0 | 	shl	local07, #3
04bf8     02 00 00 FF 
04bfc     38 E4 85 F1 | 	sub	objptr, ##1080
04c00     F2 2A 02 F1 | 	add	local07, objptr
04c04     04 2A 06 F1 | 	add	local07, #4
04c08     15 2B 02 FB | 	rdlong	local07, local07
04c0c     FE 2B 0E F2 | 	cmp	local07, #510 wz
04c10     2B 00 00 FF 
04c14     D0 E5 85 F1 | 	sub	objptr, ##22480
04c18     84 FF 9F 5D |  if_ne	jmp	#LR__0410
04c1c                 | LR__0411
04c1c     2E 00 00 FF 
04c20     08 E4 05 F1 | 	add	objptr, ##23560
04c24     F2 2A 02 FB | 	rdlong	local07, objptr
04c28     01 2A 06 F1 | 	add	local07, #1
04c2c     F2 2A 62 FC | 	wrlong	local07, objptr
04c30     2E 00 00 FF 
04c34     08 E4 85 F1 | 	sub	objptr, ##23560
04c38     24 2A B0 FD | 	call	#_expr
04c3c     01 2C 66 F6 | 	neg	local08, #1
04c40     00 2E 06 F6 | 	mov	local09, #0
04c44                 | ' '   print "in array_assign, rpar found, numpar=",numpar
04c44                 | '  'if lparts(ct).token=token_end then print "in getfun, end found, numpar=",numpar
04c44                 | ' 'if lparts(ct).token<>token_eq then print "in array_assign,= expected" else print "in array_assign,= found"
04c44                 | ' ct+=1 : expr()
04c44                 | ' ' now find the vae
04c44                 | ' 
04c44                 | ' j=-1 : i=0 : do : 
04c44                 | LR__0412
04c44                 | '   if variables(i).name=varname$ then j=i: exit loop
04c44     17 27 02 F6 | 	mov	local05, local09
04c48     04 26 66 F0 | 	shl	local05, #4
04c4c     0B 00 00 FF 
04c50     CC E5 05 F1 | 	add	objptr, ##6092
04c54     F2 26 02 F1 | 	add	local05, objptr
04c58     13 13 02 FB | 	rdlong	arg01, local05
04c5c     14 15 02 F6 | 	mov	arg02, local06
04c60     0B 00 00 FF 
04c64     CC E5 85 F1 | 	sub	objptr, ##6092
04c68     B4 16 B1 FD | 	call	#__system___string_cmp
04c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c70     17 2D 02 A6 |  if_e	mov	local08, local09
04c74     20 00 90 AD |  if_e	jmp	#LR__0413
04c78     01 2E 06 F1 | 	add	local09, #1
04c7c     2B 00 00 FF 
04c80     CC E5 05 F1 | 	add	objptr, ##22476
04c84     F2 2A 02 FB | 	rdlong	local07, objptr
04c88     2B 00 00 FF 
04c8c     CC E5 85 F1 | 	sub	objptr, ##22476
04c90     15 2F 5A F2 | 	cmps	local09, local07 wcz
04c94     AC FF 9F ED |  if_be	jmp	#LR__0412
04c98                 | LR__0413
04c98     16 1F 02 F6 | 	mov	local01, local08
04c9c     12 21 02 F6 | 	mov	local02, local04
04ca0     17 22 06 F6 | 	mov	local03, #23
04ca4     0F 2B 02 F6 | 	mov	local07, local01
04ca8     10 31 02 F6 | 	mov	local10, local02
04cac     11 2D 02 F6 | 	mov	local08, local03
04cb0     41 00 00 FF 
04cb4     40 E4 05 F1 | 	add	objptr, ##33344
04cb8     F2 1E 02 FB | 	rdlong	local01, objptr
04cbc     0F 2F 02 F6 | 	mov	local09, local01
04cc0     01 2E 66 F0 | 	shl	local09, #1
04cc4     0F 2F 02 F1 | 	add	local09, local01
04cc8     02 2E 66 F0 | 	shl	local09, #2
04ccc     03 00 00 FF 
04cd0     00 E4 85 F1 | 	sub	objptr, ##1536
04cd4     F2 2E 02 F1 | 	add	local09, objptr
04cd8     17 2B 62 FC | 	wrlong	local07, local09
04cdc     03 00 00 FF 
04ce0     00 E4 05 F1 | 	add	objptr, ##1536
04ce4     F2 1E 02 FB | 	rdlong	local01, objptr
04ce8     0F 2F 02 F6 | 	mov	local09, local01
04cec     01 2E 66 F0 | 	shl	local09, #1
04cf0     0F 2F 02 F1 | 	add	local09, local01
04cf4     02 2E 66 F0 | 	shl	local09, #2
04cf8     03 00 00 FF 
04cfc     00 E4 85 F1 | 	sub	objptr, ##1536
04d00     F2 2E 02 F1 | 	add	local09, objptr
04d04     04 2E 06 F1 | 	add	local09, #4
04d08     17 31 62 FC | 	wrlong	local10, local09
04d0c     03 00 00 FF 
04d10     00 E4 05 F1 | 	add	objptr, ##1536
04d14     F2 30 02 FB | 	rdlong	local10, objptr
04d18     18 1F 02 F6 | 	mov	local01, local10
04d1c     01 1E 66 F0 | 	shl	local01, #1
04d20     18 1F 02 F1 | 	add	local01, local10
04d24     02 1E 66 F0 | 	shl	local01, #2
04d28     03 00 00 FF 
04d2c     00 E4 85 F1 | 	sub	objptr, ##1536
04d30     F2 1E 02 F1 | 	add	local01, objptr
04d34     08 1E 06 F1 | 	add	local01, #8
04d38     0F 2D 62 FC | 	wrlong	local08, local01
04d3c     03 00 00 FF 
04d40     00 E4 05 F1 | 	add	objptr, ##1536
04d44     F2 2A 02 FB | 	rdlong	local07, objptr
04d48     01 2A 06 F1 | 	add	local07, #1
04d4c     F2 2A 62 FC | 	wrlong	local07, objptr
04d50     41 00 00 FF 
04d54     40 E4 85 F1 | 	sub	objptr, ##33344
04d58                 | LR__0414
04d58     A7 F0 03 F6 | 	mov	ptra, fp
04d5c     B2 00 A0 FD | 	call	#popregs_
04d60                 | _compile_array_assign_ret
04d60     2D 00 64 FD | 	ret
04d64                 | 
04d64                 | ' 
04d64                 | ' 
04d64                 | ' sub compile_immediate_assign(linetype as ulong)
04d64                 | _compile_immediate_assign
04d64     09 4A 05 F6 | 	mov	COUNT_, #9
04d68     A8 00 A0 FD | 	call	#pushregs_
04d6c     09 25 0A F6 | 	mov	local04, arg01 wz
04d70     FF 22 06 F6 | 	mov	local03, #255
04d74     01 26 66 F6 | 	neg	local05, #1
04d78                 | ' 
04d78                 | ' t1.result_type=result_error : t1.result.uresult=0
04d78                 | ' i=-1: j=-1
04d78                 | ' 
04d78                 | ' if linetype=0 then varname2$=lparts(0).part$: ct=2 : lineptr=0 
04d78     2C 00 90 5D |  if_ne	jmp	#LR__0420
04d7c     2B 00 00 FF 
04d80     D0 E5 05 F1 | 	add	objptr, ##22480
04d84     F2 28 02 FB | 	rdlong	local06, objptr
04d88     02 00 00 FF 
04d8c     38 E4 05 F1 | 	add	objptr, ##1080
04d90     F2 04 68 FC | 	wrlong	#2, objptr
04d94     13 00 00 FF 
04d98     38 E4 05 F1 | 	add	objptr, ##9784
04d9c     F2 00 68 FC | 	wrlong	#0, objptr
04da0     41 00 00 FF 
04da4     40 E4 85 F1 | 	sub	objptr, ##33344
04da8                 | LR__0420
04da8                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
04da8     02 24 0E F2 | 	cmp	local04, #2 wz
04dac     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
04db0     2B 00 00 AF 
04db4     D0 E5 05 A1 |  if_e	add	objptr, ##22480
04db8     F2 28 02 AB |  if_e	rdlong	local06, objptr
04dbc     02 00 00 AF 
04dc0     38 E4 05 A1 |  if_e	add	objptr, ##1080
04dc4     F2 04 68 AC |  if_e	wrlong	#2, objptr
04dc8     2E 00 00 AF 
04dcc     08 E4 85 A1 |  if_e	sub	objptr, ##23560
04dd0                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
04dd0     04 24 0E F2 | 	cmp	local04, #4 wz
04dd4     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
04dd8     2C 00 90 5D |  if_ne	jmp	#LR__0421
04ddc     2B 00 00 FF 
04de0     D8 E5 05 F1 | 	add	objptr, ##22488
04de4     F2 28 02 FB | 	rdlong	local06, objptr
04de8     02 00 00 FF 
04dec     30 E4 05 F1 | 	add	objptr, ##1072
04df0     F2 06 68 FC | 	wrlong	#3, objptr
04df4     13 00 00 FF 
04df8     38 E4 05 F1 | 	add	objptr, ##9784
04dfc     F2 04 68 FC | 	wrlong	#2, objptr
04e00     41 00 00 FF 
04e04     40 E4 85 F1 | 	sub	objptr, ##33344
04e08                 | LR__0421
04e08                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
04e08     05 24 0E F2 | 	cmp	local04, #5 wz
04e0c     3C 00 90 5D |  if_ne	jmp	#LR__0422
04e10     2E 00 00 FF 
04e14     08 E4 05 F1 | 	add	objptr, ##23560
04e18     F2 FA 01 FB | 	rdlong	result1, objptr
04e1c     FD 28 02 F6 | 	mov	local06, result1
04e20     03 28 66 F0 | 	shl	local06, #3
04e24     02 00 00 FF 
04e28     38 E4 85 F1 | 	sub	objptr, ##1080
04e2c     F2 28 02 F1 | 	add	local06, objptr
04e30     14 29 02 FB | 	rdlong	local06, local06
04e34     02 FA 05 F1 | 	add	result1, #2
04e38     02 00 00 FF 
04e3c     38 E4 05 F1 | 	add	objptr, ##1080
04e40     F2 FA 61 FC | 	wrlong	result1, objptr
04e44     2E 00 00 FF 
04e48     08 E4 85 F1 | 	sub	objptr, ##23560
04e4c                 | LR__0422
04e4c     14 13 02 F6 | 	mov	arg01, local06
04e50     01 14 06 F6 | 	mov	arg02, #1
04e54     38 35 B1 FD | 	call	#__system__Right_S
04e58     04 28 B0 FD | 	call	#_expr
04e5c                 | '  
04e5c                 | ' 'print "Called compile immediate assign with linetype",linetype, "varname=",varname2$, "lineptr=", lineptr
04e5c                 | ' 
04e5c                 | ' suffix2$=right$(varname2$,1)
04e5c                 | ' expr()
04e5c                 | ' 
04e5c                 | ' 
04e5c                 | ' if varnum>0 then
04e5c     2B 00 00 FF 
04e60     CC E5 05 F1 | 	add	objptr, ##22476
04e64     F2 2A 02 FB | 	rdlong	local07, objptr
04e68     2B 00 00 FF 
04e6c     CC E5 85 F1 | 	sub	objptr, ##22476
04e70     01 2A 56 F2 | 	cmps	local07, #1 wc
04e74     58 00 90 CD |  if_b	jmp	#LR__0425
04e78                 | '   for i=0 to varnum-1
04e78     00 2C 06 F6 | 	mov	local08, #0
04e7c     2B 00 00 FF 
04e80     CC E5 05 F1 | 	add	objptr, ##22476
04e84     F2 2E 02 FB | 	rdlong	local09, objptr
04e88     2B 00 00 FF 
04e8c     CC E5 85 F1 | 	sub	objptr, ##22476
04e90                 | LR__0423
04e90     17 2D 52 F2 | 	cmps	local08, local09 wc
04e94     38 00 90 3D |  if_ae	jmp	#LR__0424
04e98                 | '     if variables(i).name=varname2$ then j=i : exit
04e98     16 2B 02 F6 | 	mov	local07, local08
04e9c     04 2A 66 F0 | 	shl	local07, #4
04ea0     0B 00 00 FF 
04ea4     CC E5 05 F1 | 	add	objptr, ##6092
04ea8     F2 2A 02 F1 | 	add	local07, objptr
04eac     15 13 02 FB | 	rdlong	arg01, local07
04eb0     14 15 02 F6 | 	mov	arg02, local06
04eb4     0B 00 00 FF 
04eb8     CC E5 85 F1 | 	sub	objptr, ##6092
04ebc     60 14 B1 FD | 	call	#__system___string_cmp
04ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ec4     16 27 02 A6 |  if_e	mov	local05, local08
04ec8     01 2C 06 51 |  if_ne	add	local08, #1
04ecc     C0 FF 9F 5D |  if_ne	jmp	#LR__0423
04ed0                 | LR__0424
04ed0                 | LR__0425
04ed0                 | ' if  j=-1 andalso varnum<maxvars then   
04ed0     FF FF 7F FF 
04ed4     FF 27 0E F2 | 	cmp	local05, ##-1 wz
04ed8     60 00 90 5D |  if_ne	jmp	#LR__0426
04edc     2B 00 00 FF 
04ee0     CC E5 05 F1 | 	add	objptr, ##22476
04ee4     F2 2A 02 FB | 	rdlong	local07, objptr
04ee8     2B 00 00 FF 
04eec     CC E5 85 F1 | 	sub	objptr, ##22476
04ef0     01 00 00 FF 
04ef4     FF 2B 56 F2 | 	cmps	local07, ##1023 wc
04ef8     40 00 90 3D |  if_ae	jmp	#LR__0426
04efc     2B 00 00 FF 
04f00     CC E5 05 F1 | 	add	objptr, ##22476
04f04     F2 2E 02 FB | 	rdlong	local09, objptr
04f08     04 2E 66 F0 | 	shl	local09, #4
04f0c     20 00 00 FF 
04f10     00 E4 85 F1 | 	sub	objptr, ##16384
04f14     F2 2E 02 F1 | 	add	local09, objptr
04f18     17 29 62 FC | 	wrlong	local06, local09
04f1c     20 00 00 FF 
04f20     00 E4 05 F1 | 	add	objptr, ##16384
04f24     F2 2A 02 FB | 	rdlong	local07, objptr
04f28     15 27 02 F6 | 	mov	local05, local07
04f2c     01 2A 06 F1 | 	add	local07, #1
04f30     F2 2A 62 FC | 	wrlong	local07, objptr
04f34     2B 00 00 FF 
04f38     CC E5 85 F1 | 	sub	objptr, ##22476
04f3c                 | LR__0426
04f3c     13 1F 02 F6 | 	mov	local01, local05
04f40     17 22 06 F6 | 	mov	local03, #23
04f44     0F 2B 02 F6 | 	mov	local07, local01
04f48     10 2F 02 F6 | 	mov	local09, local02
04f4c     11 1F 02 F6 | 	mov	local01, local03
04f50     41 00 00 FF 
04f54     40 E4 05 F1 | 	add	objptr, ##33344
04f58     F2 2C 02 FB | 	rdlong	local08, objptr
04f5c     16 29 02 F6 | 	mov	local06, local08
04f60     01 28 66 F0 | 	shl	local06, #1
04f64     16 29 02 F1 | 	add	local06, local08
04f68     02 28 66 F0 | 	shl	local06, #2
04f6c     03 00 00 FF 
04f70     00 E4 85 F1 | 	sub	objptr, ##1536
04f74     F2 28 02 F1 | 	add	local06, objptr
04f78     14 2B 62 FC | 	wrlong	local07, local06
04f7c     03 00 00 FF 
04f80     00 E4 05 F1 | 	add	objptr, ##1536
04f84     F2 2C 02 FB | 	rdlong	local08, objptr
04f88     16 2B 02 F6 | 	mov	local07, local08
04f8c     01 2A 66 F0 | 	shl	local07, #1
04f90     16 2B 02 F1 | 	add	local07, local08
04f94     02 2A 66 F0 | 	shl	local07, #2
04f98     03 00 00 FF 
04f9c     00 E4 85 F1 | 	sub	objptr, ##1536
04fa0     F2 2A 02 F1 | 	add	local07, objptr
04fa4     04 2A 06 F1 | 	add	local07, #4
04fa8     15 2F 62 FC | 	wrlong	local09, local07
04fac     03 00 00 FF 
04fb0     00 E4 05 F1 | 	add	objptr, ##1536
04fb4     F2 2E 02 FB | 	rdlong	local09, objptr
04fb8     17 2D 02 F6 | 	mov	local08, local09
04fbc     01 2C 66 F0 | 	shl	local08, #1
04fc0     17 2D 02 F1 | 	add	local08, local09
04fc4     02 2C 66 F0 | 	shl	local08, #2
04fc8     03 00 00 FF 
04fcc     00 E4 85 F1 | 	sub	objptr, ##1536
04fd0     F2 2C 02 F1 | 	add	local08, objptr
04fd4     08 2C 06 F1 | 	add	local08, #8
04fd8     16 1F 62 FC | 	wrlong	local01, local08
04fdc     03 00 00 FF 
04fe0     00 E4 05 F1 | 	add	objptr, ##1536
04fe4     F2 2A 02 FB | 	rdlong	local07, objptr
04fe8     01 2A 06 F1 | 	add	local07, #1
04fec     F2 2A 62 FC | 	wrlong	local07, objptr
04ff0     41 00 00 FF 
04ff4     40 E4 85 F1 | 	sub	objptr, ##33344
04ff8                 | ' t1.result.uresult=j: t1.result_type=fun_assign  
04ff8                 | ' 
04ff8                 | ' 
04ff8                 | ' 
04ff8                 | ' 
04ff8                 | ' 
04ff8                 | ' 
04ff8                 | ' compiledline(lineptr)=t1:  lineptr+=1 
04ff8                 | '  if linetype=0 orelse linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
04ff8     00 24 0E F2 | 	cmp	local04, #0 wz
04ffc     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
05000     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
05004     38 00 90 5D |  if_ne	jmp	#LR__0427
05008     41 00 00 FF 
0500c     40 E4 05 F1 | 	add	objptr, ##33344
05010     F2 1E 02 FB | 	rdlong	local01, objptr
05014     0F 2F 02 F6 | 	mov	local09, local01
05018     01 2E 66 F0 | 	shl	local09, #1
0501c     0F 2F 02 F1 | 	add	local09, local01
05020     02 2E 66 F0 | 	shl	local09, #2
05024     03 00 00 FF 
05028     00 E4 85 F1 | 	sub	objptr, ##1536
0502c     F2 2E 02 F1 | 	add	local09, objptr
05030     08 2E 06 F1 | 	add	local09, #8
05034     17 FD 6B FC | 	wrlong	#510, local09
05038     3E 00 00 FF 
0503c     40 E4 85 F1 | 	sub	objptr, ##31808
05040                 | LR__0427
05040     A7 F0 03 F6 | 	mov	ptra, fp
05044     B2 00 A0 FD | 	call	#popregs_
05048                 | _compile_immediate_assign_ret
05048     2D 00 64 FD | 	ret
0504c                 | 
0504c                 | ' 
0504c                 | ' ' ------------------ compile the line that is calling a command 
0504c                 | ' 
0504c                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)
0504c                 | _compile
0504c     04 4A 05 F6 | 	mov	COUNT_, #4
05050     A8 00 A0 FD | 	call	#pushregs_
05054     09 1F 0A F6 | 	mov	local01, arg01 wz
05058     0A 21 02 F6 | 	mov	local02, arg02
0505c     0B 23 02 F6 | 	mov	local03, arg03
05060                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
05060                 | ' ' num_minor bit 31: the line is goto target. If deleted, a proper record(s) has to be added to goto list
05060                 | '  
05060                 | ' '  print "called compile with line= "; alinemajor;" and cont= "; cont 
05060                 | ' if alinemajor=0 then err=compile_immediate(0) : return err  
05060     0C 00 90 5D |  if_ne	jmp	#LR__0430
05064     00 12 06 F6 | 	mov	arg01, #0
05068     AC F5 BF FD | 	call	#_compile_immediate
0506c     A0 00 90 FD | 	jmp	#LR__0437
05070                 | LR__0430
05070     3E 00 00 FF 
05074     40 E4 05 F1 | 	add	objptr, ##31808
05078     F2 1E 62 FC | 	wrlong	local01, objptr
0507c     04 E4 05 F1 | 	add	objptr, #4
05080     F2 20 62 FC | 	wrlong	local02, objptr
05084     3E 00 00 FF 
05088     44 E4 85 F1 | 	sub	objptr, ##31812
0508c     11 13 02 F6 | 	mov	arg01, local03
05090     01 12 06 F1 | 	add	arg01, #1
05094     80 F5 BF FD | 	call	#_compile_immediate
05098     FD 24 0A F6 | 	mov	local04, result1 wz
0509c                 | ' 
0509c                 | ' ucompiledline(0)=alinemajor
0509c                 | ' ucompiledline(1)=alineminor
0509c                 | ' 
0509c                 | ' 
0509c                 | ' ' cont: 0: this is the first part of the line that will continue
0509c                 | ' ' 1 - this is the continuation of the line
0509c                 | ' ' 2 - this is the last continued line
0509c                 | ' ' 3 - this is the ome and only part
0509c                 | ' 
0509c                 | ' 
0509c                 | ' err=compile_immediate(cont+1) 
0509c                 | ' if err=0 then
0509c     6C 00 90 5D |  if_ne	jmp	#LR__0436
050a0                 | '   if cont=3 orelse cont=2 then 
050a0     03 22 0E F2 | 	cmp	local03, #3 wz
050a4     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
050a8     60 00 90 5D |  if_ne	jmp	#LR__0435
050ac                 | '     if alinemajor >lastline then 
050ac     41 00 00 FF 
050b0     4C E4 05 F1 | 	add	objptr, ##33356
050b4     F2 16 02 FB | 	rdlong	arg03, objptr
050b8     41 00 00 FF 
050bc     4C E4 85 F1 | 	sub	objptr, ##33356
050c0     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
050c4     0C 00 90 ED |  if_be	jmp	#LR__0431
050c8     0F 13 02 F6 | 	mov	arg01, local01
050cc     68 F4 BF FD | 	call	#_add_line_at_end
050d0     38 00 90 FD | 	jmp	#LR__0434
050d4                 | LR__0431
050d4     0F 13 02 F6 | 	mov	arg01, local01
050d8     E8 EC BF FD | 	call	#_deleteline
050dc                 | '       deleteline(alinemajor)  
050dc                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor) ' yes I know that's not optimal    
050dc     41 00 00 FF 
050e0     4C E4 05 F1 | 	add	objptr, ##33356
050e4     F2 16 02 FB | 	rdlong	arg03, objptr
050e8     41 00 00 FF 
050ec     4C E4 85 F1 | 	sub	objptr, ##33356
050f0     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
050f4     0C 00 90 ED |  if_be	jmp	#LR__0432
050f8     0F 13 02 F6 | 	mov	arg01, local01
050fc     38 F4 BF FD | 	call	#_add_line_at_end
05100     08 00 90 FD | 	jmp	#LR__0433
05104                 | LR__0432
05104     0F 13 02 F6 | 	mov	arg01, local01
05108     E4 F1 BF FD | 	call	#_insertline
0510c                 | LR__0433
0510c                 | LR__0434
0510c                 | LR__0435
0510c                 | LR__0436
0510c                 | ' return err
0510c     12 FB 01 F6 | 	mov	result1, local04
05110                 | LR__0437
05110     A7 F0 03 F6 | 	mov	ptra, fp
05114     B2 00 A0 FD | 	call	#popregs_
05118                 | _compile_ret
05118     2D 00 64 FD | 	ret
0511c                 | 
0511c                 | ' 
0511c                 | ' ' ------------------ compile the line that is assigning to a variable
0511c                 | ' 
0511c                 | ' sub compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  
0511c                 | _compile_assign
0511c     03 4A 05 F6 | 	mov	COUNT_, #3
05120     A8 00 A0 FD | 	call	#pushregs_
05124     09 1F 0A F6 | 	mov	local01, arg01 wz
05128     0A 21 02 F6 | 	mov	local02, arg02
0512c     0B 23 02 F6 | 	mov	local03, arg03
05130                 | ' 
05130                 | ' '  print "called compile_assign  with line= "; alinemajor;" and cont= "; cont 
05130                 | ' if alinemajor=0 then compile_immediate_assign(0) : return  
05130     0C 00 90 5D |  if_ne	jmp	#LR__0440
05134     00 12 06 F6 | 	mov	arg01, #0
05138     28 FC BF FD | 	call	#_compile_immediate_assign
0513c     94 00 90 FD | 	jmp	#LR__0446
05140                 | LR__0440
05140     3E 00 00 FF 
05144     40 E4 05 F1 | 	add	objptr, ##31808
05148     F2 1E 62 FC | 	wrlong	local01, objptr
0514c     04 E4 05 F1 | 	add	objptr, #4
05150     F2 20 62 FC | 	wrlong	local02, objptr
05154     3E 00 00 FF 
05158     44 E4 85 F1 | 	sub	objptr, ##31812
0515c     11 13 02 F6 | 	mov	arg01, local03
05160     01 12 06 F1 | 	add	arg01, #1
05164     FC FB BF FD | 	call	#_compile_immediate_assign
05168                 | ' 
05168                 | ' ucompiledline(0)=alinemajor
05168                 | ' ucompiledline(1)=alineminor
05168                 | ' 
05168                 | ' compile_immediate_assign(cont+1) 
05168                 | ' 
05168                 | ' if cont=3 orelse cont=2 then 
05168     03 22 0E F2 | 	cmp	local03, #3 wz
0516c     02 22 0E 52 |  if_ne	cmp	local03, #2 wz
05170     60 00 90 5D |  if_ne	jmp	#LR__0445
05174                 | '   if alinemajor >lastline then 
05174     41 00 00 FF 
05178     4C E4 05 F1 | 	add	objptr, ##33356
0517c     F2 16 02 FB | 	rdlong	arg03, objptr
05180     41 00 00 FF 
05184     4C E4 85 F1 | 	sub	objptr, ##33356
05188     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
0518c     0C 00 90 ED |  if_be	jmp	#LR__0441
05190     0F 13 02 F6 | 	mov	arg01, local01
05194     A0 F3 BF FD | 	call	#_add_line_at_end
05198     38 00 90 FD | 	jmp	#LR__0444
0519c                 | LR__0441
0519c     0F 13 02 F6 | 	mov	arg01, local01
051a0     20 EC BF FD | 	call	#_deleteline
051a4                 | '     deleteline(alinemajor)  
051a4                 | '     if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
051a4     41 00 00 FF 
051a8     4C E4 05 F1 | 	add	objptr, ##33356
051ac     F2 16 02 FB | 	rdlong	arg03, objptr
051b0     41 00 00 FF 
051b4     4C E4 85 F1 | 	sub	objptr, ##33356
051b8     0B 1F 1A F2 | 	cmp	local01, arg03 wcz
051bc     0C 00 90 ED |  if_be	jmp	#LR__0442
051c0     0F 13 02 F6 | 	mov	arg01, local01
051c4     70 F3 BF FD | 	call	#_add_line_at_end
051c8     08 00 90 FD | 	jmp	#LR__0443
051cc                 | LR__0442
051cc     0F 13 02 F6 | 	mov	arg01, local01
051d0     1C F1 BF FD | 	call	#_insertline
051d4                 | LR__0443
051d4                 | LR__0444
051d4                 | LR__0445
051d4                 | LR__0446
051d4     A7 F0 03 F6 | 	mov	ptra, fp
051d8     B2 00 A0 FD | 	call	#popregs_
051dc                 | _compile_assign_ret
051dc     2D 00 64 FD | 	ret
051e0                 | 
051e0                 | ' 
051e0                 | ' sub compile_error(errno)
051e0                 | _compile_error
051e0     FF 04 06 F6 | 	mov	_var03, #255
051e4     01 07 02 F6 | 	mov	_var04, _var02
051e8     02 09 02 F6 | 	mov	_var05, _var03
051ec     41 00 00 FF 
051f0     40 E4 05 F1 | 	add	objptr, ##33344
051f4     F2 0A 02 FB | 	rdlong	_var06, objptr
051f8     05 0D 02 F6 | 	mov	_var07, _var06
051fc     01 0C 66 F0 | 	shl	_var07, #1
05200     05 0D 02 F1 | 	add	_var07, _var06
05204     02 0C 66 F0 | 	shl	_var07, #2
05208     03 00 00 FF 
0520c     00 E4 85 F1 | 	sub	objptr, ##1536
05210     F2 0C 02 F1 | 	add	_var07, objptr
05214     06 13 62 FC | 	wrlong	arg01, _var07
05218     03 00 00 FF 
0521c     00 E4 05 F1 | 	add	objptr, ##1536
05220     F2 0C 02 FB | 	rdlong	_var07, objptr
05224     06 0B 02 F6 | 	mov	_var06, _var07
05228     01 0A 66 F0 | 	shl	_var06, #1
0522c     06 0B 02 F1 | 	add	_var06, _var07
05230     02 0A 66 F0 | 	shl	_var06, #2
05234     03 00 00 FF 
05238     00 E4 85 F1 | 	sub	objptr, ##1536
0523c     F2 0A 02 F1 | 	add	_var06, objptr
05240     04 0A 06 F1 | 	add	_var06, #4
05244     05 07 62 FC | 	wrlong	_var04, _var06
05248     03 00 00 FF 
0524c     00 E4 05 F1 | 	add	objptr, ##1536
05250     F2 0C 02 FB | 	rdlong	_var07, objptr
05254     06 0B 02 F6 | 	mov	_var06, _var07
05258     01 0A 66 F0 | 	shl	_var06, #1
0525c     06 0B 02 F1 | 	add	_var06, _var07
05260     02 0A 66 F0 | 	shl	_var06, #2
05264     03 00 00 FF 
05268     00 E4 85 F1 | 	sub	objptr, ##1536
0526c     F2 0A 02 F1 | 	add	_var06, objptr
05270     08 0A 06 F1 | 	add	_var06, #8
05274     05 09 62 FC | 	wrlong	_var05, _var06
05278     03 00 00 FF 
0527c     00 E4 05 F1 | 	add	objptr, ##1536
05280     F2 12 02 FB | 	rdlong	arg01, objptr
05284     01 12 06 F1 | 	add	arg01, #1
05288     F2 12 62 FC | 	wrlong	arg01, objptr
0528c     41 00 00 FF 
05290     40 E4 85 F1 | 	sub	objptr, ##33344
05294                 | _compile_error_ret
05294     2D 00 64 FD | 	ret
05298                 | 
05298                 | ' 
05298                 | ' 
05298                 | ' sub compile_unknown() 
05298                 | _compile_unknown
05298     FF 04 06 F6 | 	mov	_var03, #255
0529c     17 00 06 F6 | 	mov	_var01, #23
052a0     01 07 02 F6 | 	mov	_var04, _var02
052a4     02 01 02 F6 | 	mov	_var01, _var03
052a8     41 00 00 FF 
052ac     40 E4 05 F1 | 	add	objptr, ##33344
052b0     F2 08 02 FB | 	rdlong	_var05, objptr
052b4     04 0B 02 F6 | 	mov	_var06, _var05
052b8     01 0A 66 F0 | 	shl	_var06, #1
052bc     04 0B 02 F1 | 	add	_var06, _var05
052c0     02 0A 66 F0 | 	shl	_var06, #2
052c4     03 00 00 FF 
052c8     00 E4 85 F1 | 	sub	objptr, ##1536
052cc     F2 0A 02 F1 | 	add	_var06, objptr
052d0     05 2F 68 FC | 	wrlong	#23, _var06
052d4     03 00 00 FF 
052d8     00 E4 05 F1 | 	add	objptr, ##1536
052dc     F2 0A 02 FB | 	rdlong	_var06, objptr
052e0     05 09 02 F6 | 	mov	_var05, _var06
052e4     01 08 66 F0 | 	shl	_var05, #1
052e8     05 09 02 F1 | 	add	_var05, _var06
052ec     02 08 66 F0 | 	shl	_var05, #2
052f0     03 00 00 FF 
052f4     00 E4 85 F1 | 	sub	objptr, ##1536
052f8     F2 08 02 F1 | 	add	_var05, objptr
052fc     04 08 06 F1 | 	add	_var05, #4
05300     04 07 62 FC | 	wrlong	_var04, _var05
05304     03 00 00 FF 
05308     00 E4 05 F1 | 	add	objptr, ##1536
0530c     F2 0A 02 FB | 	rdlong	_var06, objptr
05310     05 09 02 F6 | 	mov	_var05, _var06
05314     01 08 66 F0 | 	shl	_var05, #1
05318     05 09 02 F1 | 	add	_var05, _var06
0531c     02 08 66 F0 | 	shl	_var05, #2
05320     03 00 00 FF 
05324     00 E4 85 F1 | 	sub	objptr, ##1536
05328     F2 08 02 F1 | 	add	_var05, objptr
0532c     08 08 06 F1 | 	add	_var05, #8
05330     04 01 62 FC | 	wrlong	_var01, _var05
05334     03 00 00 FF 
05338     00 E4 05 F1 | 	add	objptr, ##1536
0533c     F2 0A 02 FB | 	rdlong	_var06, objptr
05340     01 0A 06 F1 | 	add	_var06, #1
05344     F2 0A 62 FC | 	wrlong	_var06, objptr
05348     41 00 00 FF 
0534c     40 E4 85 F1 | 	sub	objptr, ##33344
05350                 | _compile_unknown_ret
05350     2D 00 64 FD | 	ret
05354                 | 
05354                 | ' 
05354                 | ' function compile_converttoint() as integer
05354                 | _compile_converttoint
05354     06 4A 05 F6 | 	mov	COUNT_, #6
05358     A8 00 A0 FD | 	call	#pushregs_
0535c     00 1E 06 F6 | 	mov	local01, #0
05360     FC 22 B0 FD | 	call	#_expr
05364     FD 24 0A F6 | 	mov	local04, result1 wz
05368                 | ' err=0
05368                 | ' t1.result.uresult=0
05368                 | ' err=expr()
05368                 | ' if err=0 then
05368     C0 00 90 5D |  if_ne	jmp	#LR__0450
0536c     16 22 06 F6 | 	mov	local03, #22
05370     0F 27 02 F6 | 	mov	local05, local01
05374     10 29 02 F6 | 	mov	local06, local02
05378     11 25 02 F6 | 	mov	local04, local03
0537c     41 00 00 FF 
05380     40 E4 05 F1 | 	add	objptr, ##33344
05384     F2 1E 02 FB | 	rdlong	local01, objptr
05388     0F FB 01 F6 | 	mov	result1, local01
0538c     01 FA 65 F0 | 	shl	result1, #1
05390     0F FB 01 F1 | 	add	result1, local01
05394     02 FA 65 F0 | 	shl	result1, #2
05398     03 00 00 FF 
0539c     00 E4 85 F1 | 	sub	objptr, ##1536
053a0     F2 FA 01 F1 | 	add	result1, objptr
053a4     FD 26 62 FC | 	wrlong	local05, result1
053a8     03 00 00 FF 
053ac     00 E4 05 F1 | 	add	objptr, ##1536
053b0     F2 26 02 FB | 	rdlong	local05, objptr
053b4     13 1F 02 F6 | 	mov	local01, local05
053b8     01 1E 66 F0 | 	shl	local01, #1
053bc     13 1F 02 F1 | 	add	local01, local05
053c0     02 1E 66 F0 | 	shl	local01, #2
053c4     03 00 00 FF 
053c8     00 E4 85 F1 | 	sub	objptr, ##1536
053cc     F2 1E 02 F1 | 	add	local01, objptr
053d0     04 1E 06 F1 | 	add	local01, #4
053d4     0F 29 62 FC | 	wrlong	local06, local01
053d8     03 00 00 FF 
053dc     00 E4 05 F1 | 	add	objptr, ##1536
053e0     F2 28 02 FB | 	rdlong	local06, objptr
053e4     14 27 02 F6 | 	mov	local05, local06
053e8     01 26 66 F0 | 	shl	local05, #1
053ec     14 27 02 F1 | 	add	local05, local06
053f0     02 26 66 F0 | 	shl	local05, #2
053f4     03 00 00 FF 
053f8     00 E4 85 F1 | 	sub	objptr, ##1536
053fc     F2 26 02 F1 | 	add	local05, objptr
05400     08 26 06 F1 | 	add	local05, #8
05404     13 25 62 FC | 	wrlong	local04, local05
05408     03 00 00 FF 
0540c     00 E4 05 F1 | 	add	objptr, ##1536
05410     F2 26 02 FB | 	rdlong	local05, objptr
05414     01 26 06 F1 | 	add	local05, #1
05418     F2 26 62 FC | 	wrlong	local05, objptr
0541c     41 00 00 FF 
05420     40 E4 85 F1 | 	sub	objptr, ##33344
05424                 | '   t1.result_type=fun_converttoint
05424                 | '   compiledline(lineptr)=t1: lineptr+=1 
05424                 | '   return 0
05424     00 FA 05 F6 | 	mov	result1, #0
05428     04 00 90 FD | 	jmp	#LR__0451
0542c                 | LR__0450
0542c                 | '   return err
0542c     12 FB 01 F6 | 	mov	result1, local04
05430                 | LR__0451
05430     A7 F0 03 F6 | 	mov	ptra, fp
05434     B2 00 A0 FD | 	call	#popregs_
05438                 | _compile_converttoint_ret
05438     2D 00 64 FD | 	ret
0543c                 | 
0543c                 | ' 
0543c                 | ' 
0543c                 | ' function compile_fun_2p() as ulong
0543c                 | _compile_fun_2p
0543c     01 4A 05 F6 | 	mov	COUNT_, #1
05440     A8 00 A0 FD | 	call	#pushregs_
05444     18 22 B0 FD | 	call	#_expr
05448                 | ' 
05448                 | ' expr()
05448                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05448     2E 00 00 FF 
0544c     08 E4 05 F1 | 	add	objptr, ##23560
05450     F2 1E 02 FB | 	rdlong	local01, objptr
05454     03 1E 66 F0 | 	shl	local01, #3
05458     02 00 00 FF 
0545c     38 E4 85 F1 | 	sub	objptr, ##1080
05460     F2 1E 02 F1 | 	add	local01, objptr
05464     04 1E 06 F1 | 	add	local01, #4
05468     0F 1F 02 FB | 	rdlong	local01, local01
0546c     11 1E 0E F2 | 	cmp	local01, #17 wz
05470     2B 00 00 FF 
05474     D0 E5 85 F1 | 	sub	objptr, ##22480
05478     15 FA 05 56 |  if_ne	mov	result1, #21
0547c     24 00 90 5D |  if_ne	jmp	#LR__0460
05480     2E 00 00 FF 
05484     08 E4 05 F1 | 	add	objptr, ##23560
05488     F2 1E 02 FB | 	rdlong	local01, objptr
0548c     01 1E 06 F1 | 	add	local01, #1
05490     F2 1E 62 FC | 	wrlong	local01, objptr
05494     2E 00 00 FF 
05498     08 E4 85 F1 | 	sub	objptr, ##23560
0549c     C0 21 B0 FD | 	call	#_expr
054a0     00 FA 05 F6 | 	mov	result1, #0
054a4                 | LR__0460
054a4     A7 F0 03 F6 | 	mov	ptra, fp
054a8     B2 00 A0 FD | 	call	#popregs_
054ac                 | _compile_fun_2p_ret
054ac     2D 00 64 FD | 	ret
054b0                 | 
054b0                 | ' 
054b0                 | ' function compile_fun_3p() as ulong
054b0                 | _compile_fun_3p
054b0     01 4A 05 F6 | 	mov	COUNT_, #1
054b4     A8 00 A0 FD | 	call	#pushregs_
054b8     A4 21 B0 FD | 	call	#_expr
054bc                 | ' 
054bc                 | ' expr()
054bc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
054bc     2E 00 00 FF 
054c0     08 E4 05 F1 | 	add	objptr, ##23560
054c4     F2 1E 02 FB | 	rdlong	local01, objptr
054c8     03 1E 66 F0 | 	shl	local01, #3
054cc     02 00 00 FF 
054d0     38 E4 85 F1 | 	sub	objptr, ##1080
054d4     F2 1E 02 F1 | 	add	local01, objptr
054d8     04 1E 06 F1 | 	add	local01, #4
054dc     0F 1F 02 FB | 	rdlong	local01, local01
054e0     11 1E 0E F2 | 	cmp	local01, #17 wz
054e4     2B 00 00 FF 
054e8     D0 E5 85 F1 | 	sub	objptr, ##22480
054ec     15 FA 05 56 |  if_ne	mov	result1, #21
054f0     7C 00 90 5D |  if_ne	jmp	#LR__0470
054f4     2E 00 00 FF 
054f8     08 E4 05 F1 | 	add	objptr, ##23560
054fc     F2 1E 02 FB | 	rdlong	local01, objptr
05500     01 1E 06 F1 | 	add	local01, #1
05504     F2 1E 62 FC | 	wrlong	local01, objptr
05508     2E 00 00 FF 
0550c     08 E4 85 F1 | 	sub	objptr, ##23560
05510     4C 21 B0 FD | 	call	#_expr
05514                 | ' expr()
05514                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05514     2E 00 00 FF 
05518     08 E4 05 F1 | 	add	objptr, ##23560
0551c     F2 1E 02 FB | 	rdlong	local01, objptr
05520     03 1E 66 F0 | 	shl	local01, #3
05524     02 00 00 FF 
05528     38 E4 85 F1 | 	sub	objptr, ##1080
0552c     F2 1E 02 F1 | 	add	local01, objptr
05530     04 1E 06 F1 | 	add	local01, #4
05534     0F 1F 02 FB | 	rdlong	local01, local01
05538     11 1E 0E F2 | 	cmp	local01, #17 wz
0553c     2B 00 00 FF 
05540     D0 E5 85 F1 | 	sub	objptr, ##22480
05544     15 FA 05 56 |  if_ne	mov	result1, #21
05548     24 00 90 5D |  if_ne	jmp	#LR__0470
0554c     2E 00 00 FF 
05550     08 E4 05 F1 | 	add	objptr, ##23560
05554     F2 1E 02 FB | 	rdlong	local01, objptr
05558     01 1E 06 F1 | 	add	local01, #1
0555c     F2 1E 62 FC | 	wrlong	local01, objptr
05560     2E 00 00 FF 
05564     08 E4 85 F1 | 	sub	objptr, ##23560
05568     F4 20 B0 FD | 	call	#_expr
0556c     00 FA 05 F6 | 	mov	result1, #0
05570                 | LR__0470
05570     A7 F0 03 F6 | 	mov	ptra, fp
05574     B2 00 A0 FD | 	call	#popregs_
05578                 | _compile_fun_3p_ret
05578     2D 00 64 FD | 	ret
0557c                 | 
0557c                 | ' 
0557c                 | ' function compile_fun_4p() as ulong
0557c                 | _compile_fun_4p
0557c     01 4A 05 F6 | 	mov	COUNT_, #1
05580     A8 00 A0 FD | 	call	#pushregs_
05584     D8 20 B0 FD | 	call	#_expr
05588                 | ' 
05588                 | ' expr()
05588                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05588     2E 00 00 FF 
0558c     08 E4 05 F1 | 	add	objptr, ##23560
05590     F2 1E 02 FB | 	rdlong	local01, objptr
05594     03 1E 66 F0 | 	shl	local01, #3
05598     02 00 00 FF 
0559c     38 E4 85 F1 | 	sub	objptr, ##1080
055a0     F2 1E 02 F1 | 	add	local01, objptr
055a4     04 1E 06 F1 | 	add	local01, #4
055a8     0F 1F 02 FB | 	rdlong	local01, local01
055ac     11 1E 0E F2 | 	cmp	local01, #17 wz
055b0     2B 00 00 FF 
055b4     D0 E5 85 F1 | 	sub	objptr, ##22480
055b8     15 FA 05 56 |  if_ne	mov	result1, #21
055bc     D4 00 90 5D |  if_ne	jmp	#LR__0480
055c0     2E 00 00 FF 
055c4     08 E4 05 F1 | 	add	objptr, ##23560
055c8     F2 1E 02 FB | 	rdlong	local01, objptr
055cc     01 1E 06 F1 | 	add	local01, #1
055d0     F2 1E 62 FC | 	wrlong	local01, objptr
055d4     2E 00 00 FF 
055d8     08 E4 85 F1 | 	sub	objptr, ##23560
055dc     80 20 B0 FD | 	call	#_expr
055e0                 | ' expr()
055e0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
055e0     2E 00 00 FF 
055e4     08 E4 05 F1 | 	add	objptr, ##23560
055e8     F2 1E 02 FB | 	rdlong	local01, objptr
055ec     03 1E 66 F0 | 	shl	local01, #3
055f0     02 00 00 FF 
055f4     38 E4 85 F1 | 	sub	objptr, ##1080
055f8     F2 1E 02 F1 | 	add	local01, objptr
055fc     04 1E 06 F1 | 	add	local01, #4
05600     0F 1F 02 FB | 	rdlong	local01, local01
05604     11 1E 0E F2 | 	cmp	local01, #17 wz
05608     2B 00 00 FF 
0560c     D0 E5 85 F1 | 	sub	objptr, ##22480
05610     15 FA 05 56 |  if_ne	mov	result1, #21
05614     7C 00 90 5D |  if_ne	jmp	#LR__0480
05618     2E 00 00 FF 
0561c     08 E4 05 F1 | 	add	objptr, ##23560
05620     F2 1E 02 FB | 	rdlong	local01, objptr
05624     01 1E 06 F1 | 	add	local01, #1
05628     F2 1E 62 FC | 	wrlong	local01, objptr
0562c     2E 00 00 FF 
05630     08 E4 85 F1 | 	sub	objptr, ##23560
05634     28 20 B0 FD | 	call	#_expr
05638                 | ' expr()
05638                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05638     2E 00 00 FF 
0563c     08 E4 05 F1 | 	add	objptr, ##23560
05640     F2 1E 02 FB | 	rdlong	local01, objptr
05644     03 1E 66 F0 | 	shl	local01, #3
05648     02 00 00 FF 
0564c     38 E4 85 F1 | 	sub	objptr, ##1080
05650     F2 1E 02 F1 | 	add	local01, objptr
05654     04 1E 06 F1 | 	add	local01, #4
05658     0F 1F 02 FB | 	rdlong	local01, local01
0565c     11 1E 0E F2 | 	cmp	local01, #17 wz
05660     2B 00 00 FF 
05664     D0 E5 85 F1 | 	sub	objptr, ##22480
05668     15 FA 05 56 |  if_ne	mov	result1, #21
0566c     24 00 90 5D |  if_ne	jmp	#LR__0480
05670     2E 00 00 FF 
05674     08 E4 05 F1 | 	add	objptr, ##23560
05678     F2 1E 02 FB | 	rdlong	local01, objptr
0567c     01 1E 06 F1 | 	add	local01, #1
05680     F2 1E 62 FC | 	wrlong	local01, objptr
05684     2E 00 00 FF 
05688     08 E4 85 F1 | 	sub	objptr, ##23560
0568c     D0 1F B0 FD | 	call	#_expr
05690     00 FA 05 F6 | 	mov	result1, #0
05694                 | LR__0480
05694     A7 F0 03 F6 | 	mov	ptra, fp
05698     B2 00 A0 FD | 	call	#popregs_
0569c                 | _compile_fun_4p_ret
0569c     2D 00 64 FD | 	ret
056a0                 | 
056a0                 | ' 
056a0                 | ' 
056a0                 | ' function compile_fun_5p() as ulong
056a0                 | _compile_fun_5p
056a0     01 4A 05 F6 | 	mov	COUNT_, #1
056a4     A8 00 A0 FD | 	call	#pushregs_
056a8     B4 1F B0 FD | 	call	#_expr
056ac                 | ' 
056ac                 | ' expr()
056ac                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
056ac     2E 00 00 FF 
056b0     08 E4 05 F1 | 	add	objptr, ##23560
056b4     F2 1E 02 FB | 	rdlong	local01, objptr
056b8     03 1E 66 F0 | 	shl	local01, #3
056bc     02 00 00 FF 
056c0     38 E4 85 F1 | 	sub	objptr, ##1080
056c4     F2 1E 02 F1 | 	add	local01, objptr
056c8     04 1E 06 F1 | 	add	local01, #4
056cc     0F 1F 02 FB | 	rdlong	local01, local01
056d0     11 1E 0E F2 | 	cmp	local01, #17 wz
056d4     2B 00 00 FF 
056d8     D0 E5 85 F1 | 	sub	objptr, ##22480
056dc     15 FA 05 56 |  if_ne	mov	result1, #21
056e0     2C 01 90 5D |  if_ne	jmp	#LR__0490
056e4     2E 00 00 FF 
056e8     08 E4 05 F1 | 	add	objptr, ##23560
056ec     F2 1E 02 FB | 	rdlong	local01, objptr
056f0     01 1E 06 F1 | 	add	local01, #1
056f4     F2 1E 62 FC | 	wrlong	local01, objptr
056f8     2E 00 00 FF 
056fc     08 E4 85 F1 | 	sub	objptr, ##23560
05700     5C 1F B0 FD | 	call	#_expr
05704                 | ' expr()
05704                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
05704     2E 00 00 FF 
05708     08 E4 05 F1 | 	add	objptr, ##23560
0570c     F2 1E 02 FB | 	rdlong	local01, objptr
05710     03 1E 66 F0 | 	shl	local01, #3
05714     02 00 00 FF 
05718     38 E4 85 F1 | 	sub	objptr, ##1080
0571c     F2 1E 02 F1 | 	add	local01, objptr
05720     04 1E 06 F1 | 	add	local01, #4
05724     0F 1F 02 FB | 	rdlong	local01, local01
05728     11 1E 0E F2 | 	cmp	local01, #17 wz
0572c     2B 00 00 FF 
05730     D0 E5 85 F1 | 	sub	objptr, ##22480
05734     15 FA 05 56 |  if_ne	mov	result1, #21
05738     D4 00 90 5D |  if_ne	jmp	#LR__0490
0573c     2E 00 00 FF 
05740     08 E4 05 F1 | 	add	objptr, ##23560
05744     F2 1E 02 FB | 	rdlong	local01, objptr
05748     01 1E 06 F1 | 	add	local01, #1
0574c     F2 1E 62 FC | 	wrlong	local01, objptr
05750     2E 00 00 FF 
05754     08 E4 85 F1 | 	sub	objptr, ##23560
05758     04 1F B0 FD | 	call	#_expr
0575c                 | ' expr()
0575c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0575c     2E 00 00 FF 
05760     08 E4 05 F1 | 	add	objptr, ##23560
05764     F2 1E 02 FB | 	rdlong	local01, objptr
05768     03 1E 66 F0 | 	shl	local01, #3
0576c     02 00 00 FF 
05770     38 E4 85 F1 | 	sub	objptr, ##1080
05774     F2 1E 02 F1 | 	add	local01, objptr
05778     04 1E 06 F1 | 	add	local01, #4
0577c     0F 1F 02 FB | 	rdlong	local01, local01
05780     11 1E 0E F2 | 	cmp	local01, #17 wz
05784     2B 00 00 FF 
05788     D0 E5 85 F1 | 	sub	objptr, ##22480
0578c     15 FA 05 56 |  if_ne	mov	result1, #21
05790     7C 00 90 5D |  if_ne	jmp	#LR__0490
05794     2E 00 00 FF 
05798     08 E4 05 F1 | 	add	objptr, ##23560
0579c     F2 1E 02 FB | 	rdlong	local01, objptr
057a0     01 1E 06 F1 | 	add	local01, #1
057a4     F2 1E 62 FC | 	wrlong	local01, objptr
057a8     2E 00 00 FF 
057ac     08 E4 85 F1 | 	sub	objptr, ##23560
057b0     AC 1E B0 FD | 	call	#_expr
057b4                 | ' expr()
057b4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
057b4     2E 00 00 FF 
057b8     08 E4 05 F1 | 	add	objptr, ##23560
057bc     F2 1E 02 FB | 	rdlong	local01, objptr
057c0     03 1E 66 F0 | 	shl	local01, #3
057c4     02 00 00 FF 
057c8     38 E4 85 F1 | 	sub	objptr, ##1080
057cc     F2 1E 02 F1 | 	add	local01, objptr
057d0     04 1E 06 F1 | 	add	local01, #4
057d4     0F 1F 02 FB | 	rdlong	local01, local01
057d8     11 1E 0E F2 | 	cmp	local01, #17 wz
057dc     2B 00 00 FF 
057e0     D0 E5 85 F1 | 	sub	objptr, ##22480
057e4     15 FA 05 56 |  if_ne	mov	result1, #21
057e8     24 00 90 5D |  if_ne	jmp	#LR__0490
057ec     2E 00 00 FF 
057f0     08 E4 05 F1 | 	add	objptr, ##23560
057f4     F2 1E 02 FB | 	rdlong	local01, objptr
057f8     01 1E 06 F1 | 	add	local01, #1
057fc     F2 1E 62 FC | 	wrlong	local01, objptr
05800     2E 00 00 FF 
05804     08 E4 85 F1 | 	sub	objptr, ##23560
05808     54 1E B0 FD | 	call	#_expr
0580c     00 FA 05 F6 | 	mov	result1, #0
05810                 | LR__0490
05810     A7 F0 03 F6 | 	mov	ptra, fp
05814     B2 00 A0 FD | 	call	#popregs_
05818                 | _compile_fun_5p_ret
05818     2D 00 64 FD | 	ret
0581c                 | 
0581c                 | ' 
0581c                 | ' function compile_fun_varp() as ulong ' parameter # on top of the stack
0581c                 | _compile_fun_varp
0581c     02 4A 05 F6 | 	mov	COUNT_, #2
05820     A8 00 A0 FD | 	call	#pushregs_
05824     00 1E 06 F6 | 	mov	local01, #0
05828                 | ' i=0
05828                 | ' if lparts(ct).token<>token_end then
05828     2E 00 00 FF 
0582c     08 E4 05 F1 | 	add	objptr, ##23560
05830     F2 20 02 FB | 	rdlong	local02, objptr
05834     03 20 66 F0 | 	shl	local02, #3
05838     02 00 00 FF 
0583c     38 E4 85 F1 | 	sub	objptr, ##1080
05840     F2 20 02 F1 | 	add	local02, objptr
05844     04 20 06 F1 | 	add	local02, #4
05848     10 21 02 FB | 	rdlong	local02, local02
0584c     FE 21 0E F2 | 	cmp	local02, #510 wz
05850     2B 00 00 FF 
05854     D0 E5 85 F1 | 	sub	objptr, ##22480
05858     5C 00 90 AD |  if_e	jmp	#LR__0502
0585c                 | '   do
0585c                 | LR__0500
0585c     00 1E B0 FD | 	call	#_expr
05860     01 1E 06 F1 | 	add	local01, #1
05864                 | '   expr()
05864                 | '    i+=1
05864                 | '    if lparts(ct).token<> token_comma then exit loop else ct+=1
05864     2E 00 00 FF 
05868     08 E4 05 F1 | 	add	objptr, ##23560
0586c     F2 20 02 FB | 	rdlong	local02, objptr
05870     03 20 66 F0 | 	shl	local02, #3
05874     02 00 00 FF 
05878     38 E4 85 F1 | 	sub	objptr, ##1080
0587c     F2 20 02 F1 | 	add	local02, objptr
05880     04 20 06 F1 | 	add	local02, #4
05884     10 21 02 FB | 	rdlong	local02, local02
05888     11 20 0E F2 | 	cmp	local02, #17 wz
0588c     2B 00 00 FF 
05890     D0 E5 85 F1 | 	sub	objptr, ##22480
05894     20 00 90 5D |  if_ne	jmp	#LR__0501
05898     2E 00 00 FF 
0589c     08 E4 05 F1 | 	add	objptr, ##23560
058a0     F2 20 02 FB | 	rdlong	local02, objptr
058a4     01 20 06 F1 | 	add	local02, #1
058a8     F2 20 62 FC | 	wrlong	local02, objptr
058ac     2E 00 00 FF 
058b0     08 E4 85 F1 | 	sub	objptr, ##23560
058b4     A4 FF 9F FD | 	jmp	#LR__0500
058b8                 | LR__0501
058b8                 | LR__0502
058b8                 | ' return i
058b8     0F FB 01 F6 | 	mov	result1, local01
058bc     A7 F0 03 F6 | 	mov	ptra, fp
058c0     B2 00 A0 FD | 	call	#popregs_
058c4                 | _compile_fun_varp_ret
058c4     2D 00 64 FD | 	ret
058c8                 | 
058c8                 | ' 
058c8                 | ' 
058c8                 | ' function compile_int_fun_2p() as ulong
058c8                 | _compile_int_fun_2p
058c8     01 4A 05 F6 | 	mov	COUNT_, #1
058cc     A8 00 A0 FD | 	call	#pushregs_
058d0     80 FA BF FD | 	call	#_compile_converttoint
058d4     FD 1E 02 F6 | 	mov	local01, result1
058d8                 | ' err=compile_converttoint() : if err>0 then return err
058d8     01 1E 56 F2 | 	cmps	local01, #1 wc
058dc     0F FB 01 36 |  if_ae	mov	result1, local01
058e0     58 00 90 3D |  if_ae	jmp	#LR__0510
058e4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
058e4     2E 00 00 FF 
058e8     08 E4 05 F1 | 	add	objptr, ##23560
058ec     F2 1E 02 FB | 	rdlong	local01, objptr
058f0     03 1E 66 F0 | 	shl	local01, #3
058f4     02 00 00 FF 
058f8     38 E4 85 F1 | 	sub	objptr, ##1080
058fc     F2 1E 02 F1 | 	add	local01, objptr
05900     04 1E 06 F1 | 	add	local01, #4
05904     0F 1F 02 FB | 	rdlong	local01, local01
05908     11 1E 0E F2 | 	cmp	local01, #17 wz
0590c     2B 00 00 FF 
05910     D0 E5 85 F1 | 	sub	objptr, ##22480
05914     15 FA 05 56 |  if_ne	mov	result1, #21
05918     20 00 90 5D |  if_ne	jmp	#LR__0510
0591c     2E 00 00 FF 
05920     08 E4 05 F1 | 	add	objptr, ##23560
05924     F2 1E 02 FB | 	rdlong	local01, objptr
05928     01 1E 06 F1 | 	add	local01, #1
0592c     F2 1E 62 FC | 	wrlong	local01, objptr
05930     2E 00 00 FF 
05934     08 E4 85 F1 | 	sub	objptr, ##23560
05938     18 FA BF FD | 	call	#_compile_converttoint
0593c                 | ' err=compile_converttoint() 
0593c                 | ' return err
0593c                 | LR__0510
0593c     A7 F0 03 F6 | 	mov	ptra, fp
05940     B2 00 A0 FD | 	call	#popregs_
05944                 | _compile_int_fun_2p_ret
05944     2D 00 64 FD | 	ret
05948                 | 
05948                 | ' 
05948                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
05948                 | _compile_print
05948     0B 4A 05 F6 | 	mov	COUNT_, #11
0594c     A8 00 A0 FD | 	call	#pushregs_
05950     00 1E 06 F6 | 	mov	local01, #0
05954     1D 22 06 F6 | 	mov	local03, #29
05958                 | ' t1.result.uresult=0 : t1.result_type=result_uint
05958                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
05958     2E 00 00 FF 
0595c     08 E4 05 F1 | 	add	objptr, ##23560
05960     F2 24 02 FB | 	rdlong	local04, objptr
05964     03 24 66 F0 | 	shl	local04, #3
05968     02 00 00 FF 
0596c     38 E4 85 F1 | 	sub	objptr, ##1080
05970     F2 24 02 F1 | 	add	local04, objptr
05974     04 24 06 F1 | 	add	local04, #4
05978     12 25 02 FB | 	rdlong	local04, local04
0597c     FE 25 0E F2 | 	cmp	local04, #510 wz
05980     2B 00 00 FF 
05984     D0 E5 85 F1 | 	sub	objptr, ##22480
05988     68 01 90 5D |  if_ne	jmp	#LR__0520
0598c     20 22 06 F6 | 	mov	local03, #32
05990     0F 27 02 F6 | 	mov	local05, local01
05994     10 29 02 F6 | 	mov	local06, local02
05998     11 2B 02 F6 | 	mov	local07, local03
0599c     41 00 00 FF 
059a0     40 E4 05 F1 | 	add	objptr, ##33344
059a4     F2 2C 02 FB | 	rdlong	local08, objptr
059a8     16 2F 02 F6 | 	mov	local09, local08
059ac     01 2E 66 F0 | 	shl	local09, #1
059b0     16 2F 02 F1 | 	add	local09, local08
059b4     02 2E 66 F0 | 	shl	local09, #2
059b8     03 00 00 FF 
059bc     00 E4 85 F1 | 	sub	objptr, ##1536
059c0     F2 2E 02 F1 | 	add	local09, objptr
059c4     17 27 62 FC | 	wrlong	local05, local09
059c8     03 00 00 FF 
059cc     00 E4 05 F1 | 	add	objptr, ##1536
059d0     F2 26 02 FB | 	rdlong	local05, objptr
059d4     13 31 02 F6 | 	mov	local10, local05
059d8     01 30 66 F0 | 	shl	local10, #1
059dc     13 31 02 F1 | 	add	local10, local05
059e0     02 30 66 F0 | 	shl	local10, #2
059e4     03 00 00 FF 
059e8     00 E4 85 F1 | 	sub	objptr, ##1536
059ec     F2 30 02 F1 | 	add	local10, objptr
059f0     04 30 06 F1 | 	add	local10, #4
059f4     18 29 62 FC | 	wrlong	local06, local10
059f8     03 00 00 FF 
059fc     00 E4 05 F1 | 	add	objptr, ##1536
05a00     F2 26 02 FB | 	rdlong	local05, objptr
05a04     13 33 02 F6 | 	mov	local11, local05
05a08     01 32 66 F0 | 	shl	local11, #1
05a0c     13 33 02 F1 | 	add	local11, local05
05a10     02 32 66 F0 | 	shl	local11, #2
05a14     03 00 00 FF 
05a18     00 E4 85 F1 | 	sub	objptr, ##1536
05a1c     F2 32 02 F1 | 	add	local11, objptr
05a20     08 32 06 F1 | 	add	local11, #8
05a24     19 2B 62 FC | 	wrlong	local07, local11
05a28     03 00 00 FF 
05a2c     00 E4 05 F1 | 	add	objptr, ##1536
05a30     F2 26 02 FB | 	rdlong	local05, objptr
05a34     01 26 06 F1 | 	add	local05, #1
05a38     F2 26 62 FC | 	wrlong	local05, objptr
05a3c     44 22 06 F6 | 	mov	local03, #68
05a40     0F 27 02 F6 | 	mov	local05, local01
05a44     10 29 02 F6 | 	mov	local06, local02
05a48     11 2B 02 F6 | 	mov	local07, local03
05a4c     F2 2C 02 FB | 	rdlong	local08, objptr
05a50     16 2F 02 F6 | 	mov	local09, local08
05a54     01 2E 66 F0 | 	shl	local09, #1
05a58     16 2F 02 F1 | 	add	local09, local08
05a5c     02 2E 66 F0 | 	shl	local09, #2
05a60     03 00 00 FF 
05a64     00 E4 85 F1 | 	sub	objptr, ##1536
05a68     F2 2E 02 F1 | 	add	local09, objptr
05a6c     17 27 62 FC | 	wrlong	local05, local09
05a70     03 00 00 FF 
05a74     00 E4 05 F1 | 	add	objptr, ##1536
05a78     F2 32 02 FB | 	rdlong	local11, objptr
05a7c     19 31 02 F6 | 	mov	local10, local11
05a80     01 30 66 F0 | 	shl	local10, #1
05a84     19 31 02 F1 | 	add	local10, local11
05a88     02 30 66 F0 | 	shl	local10, #2
05a8c     03 00 00 FF 
05a90     00 E4 85 F1 | 	sub	objptr, ##1536
05a94     F2 30 02 F1 | 	add	local10, objptr
05a98     04 30 06 F1 | 	add	local10, #4
05a9c     18 29 62 FC | 	wrlong	local06, local10
05aa0     03 00 00 FF 
05aa4     00 E4 05 F1 | 	add	objptr, ##1536
05aa8     F2 30 02 FB | 	rdlong	local10, objptr
05aac     18 33 02 F6 | 	mov	local11, local10
05ab0     01 32 66 F0 | 	shl	local11, #1
05ab4     18 33 02 F1 | 	add	local11, local10
05ab8     02 32 66 F0 | 	shl	local11, #2
05abc     03 00 00 FF 
05ac0     00 E4 85 F1 | 	sub	objptr, ##1536
05ac4     F2 32 02 F1 | 	add	local11, objptr
05ac8     08 32 06 F1 | 	add	local11, #8
05acc     19 2B 62 FC | 	wrlong	local07, local11
05ad0     03 00 00 FF 
05ad4     00 E4 05 F1 | 	add	objptr, ##1536
05ad8     F2 26 02 FB | 	rdlong	local05, objptr
05adc     01 26 06 F1 | 	add	local05, #1
05ae0     F2 26 62 FC | 	wrlong	local05, objptr
05ae4     41 00 00 FF 
05ae8     40 E4 85 F1 | 	sub	objptr, ##33344
05aec     00 FA 05 F6 | 	mov	result1, #0
05af0     20 05 90 FD | 	jmp	#LR__0527
05af4                 | LR__0520
05af4                 | ' do
05af4                 | LR__0521
05af4     68 1B B0 FD | 	call	#_expr
05af8                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
05af8                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05af8     2E 00 00 FF 
05afc     08 E4 05 F1 | 	add	objptr, ##23560
05b00     F2 24 02 FB | 	rdlong	local04, objptr
05b04     03 24 66 F0 | 	shl	local04, #3
05b08     02 00 00 FF 
05b0c     38 E4 85 F1 | 	sub	objptr, ##1080
05b10     F2 24 02 F1 | 	add	local04, objptr
05b14     04 24 06 F1 | 	add	local04, #4
05b18     12 2D 02 FB | 	rdlong	local08, local04
05b1c     11 2C 0E F2 | 	cmp	local08, #17 wz
05b20     2B 00 00 FF 
05b24     D0 E5 85 F1 | 	sub	objptr, ##22480
05b28     60 01 90 5D |  if_ne	jmp	#LR__0522
05b2c     21 22 06 F6 | 	mov	local03, #33
05b30     0F 27 02 F6 | 	mov	local05, local01
05b34     10 29 02 F6 | 	mov	local06, local02
05b38     11 2B 02 F6 | 	mov	local07, local03
05b3c     41 00 00 FF 
05b40     40 E4 05 F1 | 	add	objptr, ##33344
05b44     F2 2C 02 FB | 	rdlong	local08, objptr
05b48     16 2F 02 F6 | 	mov	local09, local08
05b4c     01 2E 66 F0 | 	shl	local09, #1
05b50     16 2F 02 F1 | 	add	local09, local08
05b54     02 2E 66 F0 | 	shl	local09, #2
05b58     03 00 00 FF 
05b5c     00 E4 85 F1 | 	sub	objptr, ##1536
05b60     F2 2E 02 F1 | 	add	local09, objptr
05b64     17 27 62 FC | 	wrlong	local05, local09
05b68     03 00 00 FF 
05b6c     00 E4 05 F1 | 	add	objptr, ##1536
05b70     F2 32 02 FB | 	rdlong	local11, objptr
05b74     19 31 02 F6 | 	mov	local10, local11
05b78     01 30 66 F0 | 	shl	local10, #1
05b7c     19 31 02 F1 | 	add	local10, local11
05b80     02 30 66 F0 | 	shl	local10, #2
05b84     03 00 00 FF 
05b88     00 E4 85 F1 | 	sub	objptr, ##1536
05b8c     F2 30 02 F1 | 	add	local10, objptr
05b90     04 30 06 F1 | 	add	local10, #4
05b94     18 29 62 FC | 	wrlong	local06, local10
05b98     03 00 00 FF 
05b9c     00 E4 05 F1 | 	add	objptr, ##1536
05ba0     F2 26 02 FB | 	rdlong	local05, objptr
05ba4     13 33 02 F6 | 	mov	local11, local05
05ba8     01 32 66 F0 | 	shl	local11, #1
05bac     13 33 02 F1 | 	add	local11, local05
05bb0     02 32 66 F0 | 	shl	local11, #2
05bb4     03 00 00 FF 
05bb8     00 E4 85 F1 | 	sub	objptr, ##1536
05bbc     F2 32 02 F1 | 	add	local11, objptr
05bc0     08 32 06 F1 | 	add	local11, #8
05bc4     19 2B 62 FC | 	wrlong	local07, local11
05bc8     03 00 00 FF 
05bcc     00 E4 05 F1 | 	add	objptr, ##1536
05bd0     F2 26 02 FB | 	rdlong	local05, objptr
05bd4     01 26 06 F1 | 	add	local05, #1
05bd8     F2 26 62 FC | 	wrlong	local05, objptr
05bdc     44 22 06 F6 | 	mov	local03, #68
05be0     0F 27 02 F6 | 	mov	local05, local01
05be4     10 29 02 F6 | 	mov	local06, local02
05be8     11 2B 02 F6 | 	mov	local07, local03
05bec     F2 2C 02 FB | 	rdlong	local08, objptr
05bf0     16 2F 02 F6 | 	mov	local09, local08
05bf4     01 2E 66 F0 | 	shl	local09, #1
05bf8     16 2F 02 F1 | 	add	local09, local08
05bfc     02 2E 66 F0 | 	shl	local09, #2
05c00     03 00 00 FF 
05c04     00 E4 85 F1 | 	sub	objptr, ##1536
05c08     F2 2E 02 F1 | 	add	local09, objptr
05c0c     17 27 62 FC | 	wrlong	local05, local09
05c10     03 00 00 FF 
05c14     00 E4 05 F1 | 	add	objptr, ##1536
05c18     F2 32 02 FB | 	rdlong	local11, objptr
05c1c     19 31 02 F6 | 	mov	local10, local11
05c20     01 30 66 F0 | 	shl	local10, #1
05c24     19 31 02 F1 | 	add	local10, local11
05c28     02 30 66 F0 | 	shl	local10, #2
05c2c     03 00 00 FF 
05c30     00 E4 85 F1 | 	sub	objptr, ##1536
05c34     F2 30 02 F1 | 	add	local10, objptr
05c38     04 30 06 F1 | 	add	local10, #4
05c3c     18 29 62 FC | 	wrlong	local06, local10
05c40     03 00 00 FF 
05c44     00 E4 05 F1 | 	add	objptr, ##1536
05c48     F2 30 02 FB | 	rdlong	local10, objptr
05c4c     18 33 02 F6 | 	mov	local11, local10
05c50     01 32 66 F0 | 	shl	local11, #1
05c54     18 33 02 F1 | 	add	local11, local10
05c58     02 32 66 F0 | 	shl	local11, #2
05c5c     03 00 00 FF 
05c60     00 E4 85 F1 | 	sub	objptr, ##1536
05c64     F2 32 02 F1 | 	add	local11, objptr
05c68     08 32 06 F1 | 	add	local11, #8
05c6c     19 2B 62 FC | 	wrlong	local07, local11
05c70     03 00 00 FF 
05c74     00 E4 05 F1 | 	add	objptr, ##1536
05c78     F2 26 02 FB | 	rdlong	local05, objptr
05c7c     01 26 06 F1 | 	add	local05, #1
05c80     F2 26 62 FC | 	wrlong	local05, objptr
05c84     41 00 00 FF 
05c88     40 E4 85 F1 | 	sub	objptr, ##33344
05c8c                 | LR__0522
05c8c                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05c8c     2E 00 00 FF 
05c90     08 E4 05 F1 | 	add	objptr, ##23560
05c94     F2 24 02 FB | 	rdlong	local04, objptr
05c98     03 24 66 F0 | 	shl	local04, #3
05c9c     02 00 00 FF 
05ca0     38 E4 85 F1 | 	sub	objptr, ##1080
05ca4     F2 24 02 F1 | 	add	local04, objptr
05ca8     04 24 06 F1 | 	add	local04, #4
05cac     12 2D 02 FB | 	rdlong	local08, local04
05cb0     12 2C 0E F2 | 	cmp	local08, #18 wz
05cb4     2B 00 00 FF 
05cb8     D0 E5 85 F1 | 	sub	objptr, ##22480
05cbc     60 01 90 5D |  if_ne	jmp	#LR__0523
05cc0     22 22 06 F6 | 	mov	local03, #34
05cc4     0F 27 02 F6 | 	mov	local05, local01
05cc8     10 29 02 F6 | 	mov	local06, local02
05ccc     11 2B 02 F6 | 	mov	local07, local03
05cd0     41 00 00 FF 
05cd4     40 E4 05 F1 | 	add	objptr, ##33344
05cd8     F2 2C 02 FB | 	rdlong	local08, objptr
05cdc     16 2F 02 F6 | 	mov	local09, local08
05ce0     01 2E 66 F0 | 	shl	local09, #1
05ce4     16 2F 02 F1 | 	add	local09, local08
05ce8     02 2E 66 F0 | 	shl	local09, #2
05cec     03 00 00 FF 
05cf0     00 E4 85 F1 | 	sub	objptr, ##1536
05cf4     F2 2E 02 F1 | 	add	local09, objptr
05cf8     17 27 62 FC | 	wrlong	local05, local09
05cfc     03 00 00 FF 
05d00     00 E4 05 F1 | 	add	objptr, ##1536
05d04     F2 32 02 FB | 	rdlong	local11, objptr
05d08     19 31 02 F6 | 	mov	local10, local11
05d0c     01 30 66 F0 | 	shl	local10, #1
05d10     19 31 02 F1 | 	add	local10, local11
05d14     02 30 66 F0 | 	shl	local10, #2
05d18     03 00 00 FF 
05d1c     00 E4 85 F1 | 	sub	objptr, ##1536
05d20     F2 30 02 F1 | 	add	local10, objptr
05d24     04 30 06 F1 | 	add	local10, #4
05d28     18 29 62 FC | 	wrlong	local06, local10
05d2c     03 00 00 FF 
05d30     00 E4 05 F1 | 	add	objptr, ##1536
05d34     F2 26 02 FB | 	rdlong	local05, objptr
05d38     13 33 02 F6 | 	mov	local11, local05
05d3c     01 32 66 F0 | 	shl	local11, #1
05d40     13 33 02 F1 | 	add	local11, local05
05d44     02 32 66 F0 | 	shl	local11, #2
05d48     03 00 00 FF 
05d4c     00 E4 85 F1 | 	sub	objptr, ##1536
05d50     F2 32 02 F1 | 	add	local11, objptr
05d54     08 32 06 F1 | 	add	local11, #8
05d58     19 2B 62 FC | 	wrlong	local07, local11
05d5c     03 00 00 FF 
05d60     00 E4 05 F1 | 	add	objptr, ##1536
05d64     F2 26 02 FB | 	rdlong	local05, objptr
05d68     01 26 06 F1 | 	add	local05, #1
05d6c     F2 26 62 FC | 	wrlong	local05, objptr
05d70     44 22 06 F6 | 	mov	local03, #68
05d74     0F 27 02 F6 | 	mov	local05, local01
05d78     10 29 02 F6 | 	mov	local06, local02
05d7c     11 2B 02 F6 | 	mov	local07, local03
05d80     F2 2C 02 FB | 	rdlong	local08, objptr
05d84     16 2F 02 F6 | 	mov	local09, local08
05d88     01 2E 66 F0 | 	shl	local09, #1
05d8c     16 2F 02 F1 | 	add	local09, local08
05d90     02 2E 66 F0 | 	shl	local09, #2
05d94     03 00 00 FF 
05d98     00 E4 85 F1 | 	sub	objptr, ##1536
05d9c     F2 2E 02 F1 | 	add	local09, objptr
05da0     17 27 62 FC | 	wrlong	local05, local09
05da4     03 00 00 FF 
05da8     00 E4 05 F1 | 	add	objptr, ##1536
05dac     F2 32 02 FB | 	rdlong	local11, objptr
05db0     19 31 02 F6 | 	mov	local10, local11
05db4     01 30 66 F0 | 	shl	local10, #1
05db8     19 31 02 F1 | 	add	local10, local11
05dbc     02 30 66 F0 | 	shl	local10, #2
05dc0     03 00 00 FF 
05dc4     00 E4 85 F1 | 	sub	objptr, ##1536
05dc8     F2 30 02 F1 | 	add	local10, objptr
05dcc     04 30 06 F1 | 	add	local10, #4
05dd0     18 29 62 FC | 	wrlong	local06, local10
05dd4     03 00 00 FF 
05dd8     00 E4 05 F1 | 	add	objptr, ##1536
05ddc     F2 30 02 FB | 	rdlong	local10, objptr
05de0     18 33 02 F6 | 	mov	local11, local10
05de4     01 32 66 F0 | 	shl	local11, #1
05de8     18 33 02 F1 | 	add	local11, local10
05dec     02 32 66 F0 | 	shl	local11, #2
05df0     03 00 00 FF 
05df4     00 E4 85 F1 | 	sub	objptr, ##1536
05df8     F2 32 02 F1 | 	add	local11, objptr
05dfc     08 32 06 F1 | 	add	local11, #8
05e00     19 2B 62 FC | 	wrlong	local07, local11
05e04     03 00 00 FF 
05e08     00 E4 05 F1 | 	add	objptr, ##1536
05e0c     F2 26 02 FB | 	rdlong	local05, objptr
05e10     01 26 06 F1 | 	add	local05, #1
05e14     F2 26 62 FC | 	wrlong	local05, objptr
05e18     41 00 00 FF 
05e1c     40 E4 85 F1 | 	sub	objptr, ##33344
05e20                 | LR__0523
05e20                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
05e20     2E 00 00 FF 
05e24     08 E4 05 F1 | 	add	objptr, ##23560
05e28     F2 24 02 FB | 	rdlong	local04, objptr
05e2c     03 24 66 F0 | 	shl	local04, #3
05e30     02 00 00 FF 
05e34     38 E4 85 F1 | 	sub	objptr, ##1080
05e38     F2 24 02 F1 | 	add	local04, objptr
05e3c     04 24 06 F1 | 	add	local04, #4
05e40     12 2D 02 FB | 	rdlong	local08, local04
05e44     FE 2D 0E F2 | 	cmp	local08, #510 wz
05e48     2B 00 00 FF 
05e4c     D0 E5 85 F1 | 	sub	objptr, ##22480
05e50     B8 00 90 5D |  if_ne	jmp	#LR__0524
05e54     44 22 06 F6 | 	mov	local03, #68
05e58     0F 27 02 F6 | 	mov	local05, local01
05e5c     10 29 02 F6 | 	mov	local06, local02
05e60     11 2B 02 F6 | 	mov	local07, local03
05e64     41 00 00 FF 
05e68     40 E4 05 F1 | 	add	objptr, ##33344
05e6c     F2 2C 02 FB | 	rdlong	local08, objptr
05e70     16 2F 02 F6 | 	mov	local09, local08
05e74     01 2E 66 F0 | 	shl	local09, #1
05e78     16 2F 02 F1 | 	add	local09, local08
05e7c     02 2E 66 F0 | 	shl	local09, #2
05e80     03 00 00 FF 
05e84     00 E4 85 F1 | 	sub	objptr, ##1536
05e88     F2 2E 02 F1 | 	add	local09, objptr
05e8c     17 27 62 FC | 	wrlong	local05, local09
05e90     03 00 00 FF 
05e94     00 E4 05 F1 | 	add	objptr, ##1536
05e98     F2 32 02 FB | 	rdlong	local11, objptr
05e9c     19 31 02 F6 | 	mov	local10, local11
05ea0     01 30 66 F0 | 	shl	local10, #1
05ea4     19 31 02 F1 | 	add	local10, local11
05ea8     02 30 66 F0 | 	shl	local10, #2
05eac     03 00 00 FF 
05eb0     00 E4 85 F1 | 	sub	objptr, ##1536
05eb4     F2 30 02 F1 | 	add	local10, objptr
05eb8     04 30 06 F1 | 	add	local10, #4
05ebc     18 29 62 FC | 	wrlong	local06, local10
05ec0     03 00 00 FF 
05ec4     00 E4 05 F1 | 	add	objptr, ##1536
05ec8     F2 30 02 FB | 	rdlong	local10, objptr
05ecc     18 33 02 F6 | 	mov	local11, local10
05ed0     01 32 66 F0 | 	shl	local11, #1
05ed4     18 33 02 F1 | 	add	local11, local10
05ed8     02 32 66 F0 | 	shl	local11, #2
05edc     03 00 00 FF 
05ee0     00 E4 85 F1 | 	sub	objptr, ##1536
05ee4     F2 32 02 F1 | 	add	local11, objptr
05ee8     08 32 06 F1 | 	add	local11, #8
05eec     19 2B 62 FC | 	wrlong	local07, local11
05ef0     03 00 00 FF 
05ef4     00 E4 05 F1 | 	add	objptr, ##1536
05ef8     F2 26 02 FB | 	rdlong	local05, objptr
05efc     01 26 06 F1 | 	add	local05, #1
05f00     F2 26 62 FC | 	wrlong	local05, objptr
05f04     41 00 00 FF 
05f08     40 E4 85 F1 | 	sub	objptr, ##33344
05f0c                 | LR__0524
05f0c                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then  return 22
05f0c     2E 00 00 FF 
05f10     08 E4 05 F1 | 	add	objptr, ##23560
05f14     F2 24 02 FB | 	rdlong	local04, objptr
05f18     03 24 66 F0 | 	shl	local04, #3
05f1c     02 00 00 FF 
05f20     38 E4 85 F1 | 	sub	objptr, ##1080
05f24     F2 24 02 F1 | 	add	local04, objptr
05f28     04 24 06 F1 | 	add	local04, #4
05f2c     12 2D 02 FB | 	rdlong	local08, local04
05f30     11 2C 0E F2 | 	cmp	local08, #17 wz
05f34     2B 00 00 FF 
05f38     D0 E5 85 F1 | 	sub	objptr, ##22480
05f3c     6C 00 90 AD |  if_e	jmp	#LR__0525
05f40     2E 00 00 FF 
05f44     08 E4 05 F1 | 	add	objptr, ##23560
05f48     F2 2C 02 FB | 	rdlong	local08, objptr
05f4c     03 2C 66 F0 | 	shl	local08, #3
05f50     02 00 00 FF 
05f54     38 E4 85 F1 | 	sub	objptr, ##1080
05f58     F2 2C 02 F1 | 	add	local08, objptr
05f5c     04 2C 06 F1 | 	add	local08, #4
05f60     16 2D 02 FB | 	rdlong	local08, local08
05f64     12 2C 0E F2 | 	cmp	local08, #18 wz
05f68     2B 00 00 FF 
05f6c     D0 E5 85 F1 | 	sub	objptr, ##22480
05f70     38 00 90 AD |  if_e	jmp	#LR__0525
05f74     2E 00 00 FF 
05f78     08 E4 05 F1 | 	add	objptr, ##23560
05f7c     F2 32 02 FB | 	rdlong	local11, objptr
05f80     03 32 66 F0 | 	shl	local11, #3
05f84     02 00 00 FF 
05f88     38 E4 85 F1 | 	sub	objptr, ##1080
05f8c     F2 32 02 F1 | 	add	local11, objptr
05f90     04 32 06 F1 | 	add	local11, #4
05f94     19 33 02 FB | 	rdlong	local11, local11
05f98     FE 33 0E F2 | 	cmp	local11, #510 wz
05f9c     2B 00 00 FF 
05fa0     D0 E5 85 F1 | 	sub	objptr, ##22480
05fa4     16 FA 05 56 |  if_ne	mov	result1, #22
05fa8     68 00 90 5D |  if_ne	jmp	#LR__0527
05fac                 | LR__0525
05fac     2E 00 00 FF 
05fb0     08 E4 05 F1 | 	add	objptr, ##23560
05fb4     F2 24 02 FB | 	rdlong	local04, objptr
05fb8     01 24 06 F1 | 	add	local04, #1
05fbc     F2 24 62 FC | 	wrlong	local04, objptr
05fc0     03 24 66 F0 | 	shl	local04, #3
05fc4     02 00 00 FF 
05fc8     38 E4 85 F1 | 	sub	objptr, ##1080
05fcc     F2 24 02 F1 | 	add	local04, objptr
05fd0     04 24 06 F1 | 	add	local04, #4
05fd4     12 2D 02 FB | 	rdlong	local08, local04
05fd8     FE 2D 0E F2 | 	cmp	local08, #510 wz
05fdc     2B 00 00 FF 
05fe0     D0 E5 85 F1 | 	sub	objptr, ##22480
05fe4     28 00 90 AD |  if_e	jmp	#LR__0526
05fe8     2E 00 00 FF 
05fec     08 E4 05 F1 | 	add	objptr, ##23560
05ff0     F2 32 02 FB | 	rdlong	local11, objptr
05ff4     0E 00 00 FF 
05ff8     1C E4 05 F1 | 	add	objptr, ##7196
05ffc     F2 30 02 FB | 	rdlong	local10, objptr
06000     3C 00 00 FF 
06004     24 E4 85 F1 | 	sub	objptr, ##30756
06008     18 33 52 F2 | 	cmps	local11, local10 wc
0600c     E4 FA 9F CD |  if_b	jmp	#LR__0521
06010                 | LR__0526
06010                 | ' return 0
06010     00 FA 05 F6 | 	mov	result1, #0
06014                 | LR__0527
06014     A7 F0 03 F6 | 	mov	ptra, fp
06018     B2 00 A0 FD | 	call	#popregs_
0601c                 | _compile_print_ret
0601c     2D 00 64 FD | 	ret
06020                 | 
06020                 | ' 
06020                 | ' function compile_if() as ulong  
06020                 | _compile_if
06020     05 4A 05 F6 | 	mov	COUNT_, #5
06024     A8 00 A0 FD | 	call	#pushregs_
06028                 | _compile_if_enter
06028     28 F3 BF FD | 	call	#_compile_converttoint
0602c                 | ' return err
0602c     2E 00 00 FF 
06030     08 E4 05 F1 | 	add	objptr, ##23560
06034     F2 FA 01 FB | 	rdlong	result1, objptr
06038     01 FA 05 F1 | 	add	result1, #1
0603c     F2 FA 61 FC | 	wrlong	result1, objptr
06040     58 22 06 F6 | 	mov	local03, #88
06044     0F 25 02 F6 | 	mov	local04, local01
06048     10 27 02 F6 | 	mov	local05, local02
0604c     11 1F 02 F6 | 	mov	local01, local03
06050     13 00 00 FF 
06054     38 E4 05 F1 | 	add	objptr, ##9784
06058     F2 12 02 FB | 	rdlong	arg01, objptr
0605c     09 FB 01 F6 | 	mov	result1, arg01
06060     01 FA 65 F0 | 	shl	result1, #1
06064     09 FB 01 F1 | 	add	result1, arg01
06068     02 FA 65 F0 | 	shl	result1, #2
0606c     03 00 00 FF 
06070     00 E4 85 F1 | 	sub	objptr, ##1536
06074     F2 FA 01 F1 | 	add	result1, objptr
06078     FD 24 62 FC | 	wrlong	local04, result1
0607c     03 00 00 FF 
06080     00 E4 05 F1 | 	add	objptr, ##1536
06084     F2 12 02 FB | 	rdlong	arg01, objptr
06088     09 25 02 F6 | 	mov	local04, arg01
0608c     01 24 66 F0 | 	shl	local04, #1
06090     09 25 02 F1 | 	add	local04, arg01
06094     02 24 66 F0 | 	shl	local04, #2
06098     03 00 00 FF 
0609c     00 E4 85 F1 | 	sub	objptr, ##1536
060a0     F2 24 02 F1 | 	add	local04, objptr
060a4     04 24 06 F1 | 	add	local04, #4
060a8     12 27 62 FC | 	wrlong	local05, local04
060ac     03 00 00 FF 
060b0     00 E4 05 F1 | 	add	objptr, ##1536
060b4     F2 24 02 FB | 	rdlong	local04, objptr
060b8     12 27 02 F6 | 	mov	local05, local04
060bc     01 26 66 F0 | 	shl	local05, #1
060c0     12 27 02 F1 | 	add	local05, local04
060c4     02 26 66 F0 | 	shl	local05, #2
060c8     03 00 00 FF 
060cc     00 E4 85 F1 | 	sub	objptr, ##1536
060d0     F2 26 02 F1 | 	add	local05, objptr
060d4     08 26 06 F1 | 	add	local05, #8
060d8     13 1F 62 FC | 	wrlong	local01, local05
060dc     03 00 00 FF 
060e0     00 E4 05 F1 | 	add	objptr, ##1536
060e4     F2 24 02 FB | 	rdlong	local04, objptr
060e8     01 24 06 F1 | 	add	local04, #1
060ec     F2 24 62 FC | 	wrlong	local04, objptr
060f0                 | ' 
060f0                 | ' 'print "In compile_if"
060f0                 | ' compile_int_fun_1p()
060f0                 | ' cmd=lparts(ct).token : ct+=1
060f0                 | ' 'print cmd ' : if cmd<> token_then then print "Expected then" else print "Found then"
060f0                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
060f0                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
060f0     13 00 00 FF 
060f4     38 E4 85 F1 | 	sub	objptr, ##9784
060f8     F2 26 02 FB | 	rdlong	local05, objptr
060fc     01 26 06 F1 | 	add	local05, #1
06100     03 26 66 F0 | 	shl	local05, #3
06104     02 00 00 FF 
06108     38 E4 85 F1 | 	sub	objptr, ##1080
0610c     F2 26 02 F1 | 	add	local05, objptr
06110     13 13 02 FB | 	rdlong	arg01, local05
06114     2B 00 00 FF 
06118     D0 E5 85 F1 | 	sub	objptr, ##22480
0611c                 | ' 
0611c                 | ' select case s
0611c     2A 01 00 FF 
06120     6A 14 06 F6 | 	mov	arg02, ##@LR__4176
06124     F8 01 B1 FD | 	call	#__system___string_cmp
06128     00 FA 0D F2 | 	cmp	result1, #0 wz
0612c     1B FA 05 A6 |  if_e	mov	result1, #27
06130     00 FA 05 56 |  if_ne	mov	result1, #0
06134     00 FA 0D F2 | 	cmp	result1, #0 wz
06138     0C 00 90 AD |  if_e	jmp	#LR__0530
0613c     05 12 06 F6 | 	mov	arg01, #5
06140     20 EC BF FD | 	call	#_compile_immediate_assign
06144     08 00 90 FD | 	jmp	#LR__0531
06148                 | LR__0530
06148     05 12 06 F6 | 	mov	arg01, #5
0614c     C8 E4 BF FD | 	call	#_compile_immediate
06150                 | LR__0531
06150                 | ' 
06150                 | ' 
06150                 | ' return 0
06150     00 FA 05 F6 | 	mov	result1, #0
06154     A7 F0 03 F6 | 	mov	ptra, fp
06158     B2 00 A0 FD | 	call	#popregs_
0615c                 | _compile_if_ret
0615c     2D 00 64 FD | 	ret
06160                 | 
06160                 | ' 
06160                 | ' function compile_else() as ulong  
06160                 | _compile_else
06160     05 4A 05 F6 | 	mov	COUNT_, #5
06164     A8 00 A0 FD | 	call	#pushregs_
06168                 | _compile_else_enter
06168     5A 22 06 F6 | 	mov	local03, #90
0616c     0F 25 02 F6 | 	mov	local04, local01
06170     10 27 02 F6 | 	mov	local05, local02
06174     11 1F 02 F6 | 	mov	local01, local03
06178     41 00 00 FF 
0617c     40 E4 05 F1 | 	add	objptr, ##33344
06180     F2 12 02 FB | 	rdlong	arg01, objptr
06184     09 FB 01 F6 | 	mov	result1, arg01
06188     01 FA 65 F0 | 	shl	result1, #1
0618c     09 FB 01 F1 | 	add	result1, arg01
06190     02 FA 65 F0 | 	shl	result1, #2
06194     03 00 00 FF 
06198     00 E4 85 F1 | 	sub	objptr, ##1536
0619c     F2 FA 01 F1 | 	add	result1, objptr
061a0     FD 24 62 FC | 	wrlong	local04, result1
061a4     03 00 00 FF 
061a8     00 E4 05 F1 | 	add	objptr, ##1536
061ac     F2 FA 01 FB | 	rdlong	result1, objptr
061b0     FD 24 02 F6 | 	mov	local04, result1
061b4     01 24 66 F0 | 	shl	local04, #1
061b8     FD 24 02 F1 | 	add	local04, result1
061bc     02 24 66 F0 | 	shl	local04, #2
061c0     03 00 00 FF 
061c4     00 E4 85 F1 | 	sub	objptr, ##1536
061c8     F2 24 02 F1 | 	add	local04, objptr
061cc     04 24 06 F1 | 	add	local04, #4
061d0     12 27 62 FC | 	wrlong	local05, local04
061d4     03 00 00 FF 
061d8     00 E4 05 F1 | 	add	objptr, ##1536
061dc     F2 24 02 FB | 	rdlong	local04, objptr
061e0     12 27 02 F6 | 	mov	local05, local04
061e4     01 26 66 F0 | 	shl	local05, #1
061e8     12 27 02 F1 | 	add	local05, local04
061ec     02 26 66 F0 | 	shl	local05, #2
061f0     03 00 00 FF 
061f4     00 E4 85 F1 | 	sub	objptr, ##1536
061f8     F2 26 02 F1 | 	add	local05, objptr
061fc     08 26 06 F1 | 	add	local05, #8
06200     13 1F 62 FC | 	wrlong	local01, local05
06204     03 00 00 FF 
06208     00 E4 05 F1 | 	add	objptr, ##1536
0620c     F2 24 02 FB | 	rdlong	local04, objptr
06210     01 24 06 F1 | 	add	local04, #1
06214     F2 24 62 FC | 	wrlong	local04, objptr
06218                 | ' 
06218                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
06218                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_immediate(5)
06218     13 00 00 FF 
0621c     38 E4 85 F1 | 	sub	objptr, ##9784
06220     F2 26 02 FB | 	rdlong	local05, objptr
06224     01 26 06 F1 | 	add	local05, #1
06228     03 26 66 F0 | 	shl	local05, #3
0622c     02 00 00 FF 
06230     38 E4 85 F1 | 	sub	objptr, ##1080
06234     F2 26 02 F1 | 	add	local05, objptr
06238     13 13 02 FB | 	rdlong	arg01, local05
0623c     2B 00 00 FF 
06240     D0 E5 85 F1 | 	sub	objptr, ##22480
06244                 | ' 
06244                 | ' select case s
06244     2A 01 00 FF 
06248     6A 14 06 F6 | 	mov	arg02, ##@LR__4176
0624c     D0 00 B1 FD | 	call	#__system___string_cmp
06250     00 FA 0D F2 | 	cmp	result1, #0 wz
06254     1B FA 05 A6 |  if_e	mov	result1, #27
06258     00 FA 05 56 |  if_ne	mov	result1, #0
0625c     00 FA 0D F2 | 	cmp	result1, #0 wz
06260     0C 00 90 AD |  if_e	jmp	#LR__0540
06264     05 12 06 F6 | 	mov	arg01, #5
06268     F8 EA BF FD | 	call	#_compile_immediate_assign
0626c     08 00 90 FD | 	jmp	#LR__0541
06270                 | LR__0540
06270     05 12 06 F6 | 	mov	arg01, #5
06274     A0 E3 BF FD | 	call	#_compile_immediate
06278                 | LR__0541
06278                 | ' 
06278                 | ' 
06278                 | ' return 0
06278     00 FA 05 F6 | 	mov	result1, #0
0627c     A7 F0 03 F6 | 	mov	ptra, fp
06280     B2 00 A0 FD | 	call	#popregs_
06284                 | _compile_else_ret
06284     2D 00 64 FD | 	ret
06288                 | 
06288                 | ' 
06288                 | ' 
06288                 | ' function compile_dim() as ulong  
06288                 | _compile_dim
06288     11 4A 05 F6 | 	mov	COUNT_, #17
0628c     A8 00 A0 FD | 	call	#pushregs_
06290     01 1E 06 F6 | 	mov	local01, #1
06294     01 20 06 F6 | 	mov	local02, #1
06298     01 22 06 F6 | 	mov	local03, #1
0629c                 | ' 
0629c                 | ' dims(0)=1: dims(1)=1: dims(2)=1
0629c                 | ' 
0629c                 | ' if isname(lparts(ct).part$) then 
0629c     2E 00 00 FF 
062a0     08 E4 05 F1 | 	add	objptr, ##23560
062a4     F2 14 02 FB | 	rdlong	arg02, objptr
062a8     03 14 66 F0 | 	shl	arg02, #3
062ac     02 00 00 FF 
062b0     38 E4 85 F1 | 	sub	objptr, ##1080
062b4     F2 14 02 F1 | 	add	arg02, objptr
062b8     0A 13 02 FB | 	rdlong	arg01, arg02
062bc     2B 00 00 FF 
062c0     D0 E5 85 F1 | 	sub	objptr, ##22480
062c4     34 D3 BF FD | 	call	#_isname
062c8     00 FA 0D F2 | 	cmp	result1, #0 wz
062cc     30 05 90 AD |  if_e	jmp	#LR__0574
062d0     2E 00 00 FF 
062d4     08 E4 05 F1 | 	add	objptr, ##23560
062d8     F2 24 02 FB | 	rdlong	local04, objptr
062dc     03 24 66 F0 | 	shl	local04, #3
062e0     02 00 00 FF 
062e4     38 E4 85 F1 | 	sub	objptr, ##1080
062e8     F2 24 02 F1 | 	add	local04, objptr
062ec     12 27 02 FB | 	rdlong	local05, local04
062f0     01 28 66 F6 | 	neg	local06, #1
062f4                 | '   varname2$=lparts(ct).part$ 
062f4                 | '   j=-1
062f4                 | '   if varnum>0 then
062f4     04 E4 85 F1 | 	sub	objptr, #4
062f8     F2 2A 02 FB | 	rdlong	local07, objptr
062fc     2B 00 00 FF 
06300     CC E5 85 F1 | 	sub	objptr, ##22476
06304     01 2A 56 F2 | 	cmps	local07, #1 wc
06308     58 00 90 CD |  if_b	jmp	#LR__0552
0630c                 | '  '   print "in dim, varnum=";varnum
0630c                 | '     for i=0 to varnum-1
0630c     00 2C 06 F6 | 	mov	local08, #0
06310     2B 00 00 FF 
06314     CC E5 05 F1 | 	add	objptr, ##22476
06318     F2 2E 02 FB | 	rdlong	local09, objptr
0631c     2B 00 00 FF 
06320     CC E5 85 F1 | 	sub	objptr, ##22476
06324                 | LR__0550
06324     17 2D 52 F2 | 	cmps	local08, local09 wc
06328     38 00 90 3D |  if_ae	jmp	#LR__0551
0632c                 | '       if variables(i).name=varname2$ then j=i : exit
0632c     16 25 02 F6 | 	mov	local04, local08
06330     04 24 66 F0 | 	shl	local04, #4
06334     0B 00 00 FF 
06338     CC E5 05 F1 | 	add	objptr, ##6092
0633c     F2 24 02 F1 | 	add	local04, objptr
06340     12 13 02 FB | 	rdlong	arg01, local04
06344     13 15 02 F6 | 	mov	arg02, local05
06348     0B 00 00 FF 
0634c     CC E5 85 F1 | 	sub	objptr, ##6092
06350     CC FF B0 FD | 	call	#__system___string_cmp
06354     00 FA 0D F2 | 	cmp	result1, #0 wz
06358     16 29 02 A6 |  if_e	mov	local06, local08
0635c     01 2C 06 51 |  if_ne	add	local08, #1
06360     C0 FF 9F 5D |  if_ne	jmp	#LR__0550
06364                 | LR__0551
06364                 | LR__0552
06364                 | '   if j<>-1 then printerror (42) : return 42
06364     FF FF 7F FF 
06368     FF 29 0E F2 | 	cmp	local06, ##-1 wz
0636c     10 00 90 AD |  if_e	jmp	#LR__0553
06370     2A 12 06 F6 | 	mov	arg01, #42
06374     60 CA B0 FD | 	call	#_printerror
06378     2A FA 05 F6 | 	mov	result1, #42
0637c     D8 05 90 FD | 	jmp	#LR__0576
06380                 | LR__0553
06380                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then printerror(43) : return 43
06380     2E 00 00 FF 
06384     08 E4 05 F1 | 	add	objptr, ##23560
06388     F2 14 02 FB | 	rdlong	arg02, objptr
0638c     01 14 06 F1 | 	add	arg02, #1
06390     03 14 66 F0 | 	shl	arg02, #3
06394     02 00 00 FF 
06398     38 E4 85 F1 | 	sub	objptr, ##1080
0639c     F2 14 02 F1 | 	add	arg02, objptr
063a0     0A 13 02 FB | 	rdlong	arg01, arg02
063a4     2B 01 00 FF 
063a8     48 14 06 F6 | 	mov	arg02, ##@LR__4288
063ac     2B 00 00 FF 
063b0     D0 E5 85 F1 | 	sub	objptr, ##22480
063b4     68 FF B0 FD | 	call	#__system___string_cmp
063b8     00 FA 0D F2 | 	cmp	result1, #0 wz
063bc     50 00 90 AD |  if_e	jmp	#LR__0554
063c0     2E 00 00 FF 
063c4     08 E4 05 F1 | 	add	objptr, ##23560
063c8     F2 2E 02 FB | 	rdlong	local09, objptr
063cc     01 2E 06 F1 | 	add	local09, #1
063d0     03 2E 66 F0 | 	shl	local09, #3
063d4     02 00 00 FF 
063d8     38 E4 85 F1 | 	sub	objptr, ##1080
063dc     F2 2E 02 F1 | 	add	local09, objptr
063e0     17 13 02 FB | 	rdlong	arg01, local09
063e4     2B 01 00 FF 
063e8     4A 14 06 F6 | 	mov	arg02, ##@LR__4289
063ec     2B 00 00 FF 
063f0     D0 E5 85 F1 | 	sub	objptr, ##22480
063f4     28 FF B0 FD | 	call	#__system___string_cmp
063f8     00 FA 0D F2 | 	cmp	result1, #0 wz
063fc     10 00 90 AD |  if_e	jmp	#LR__0554
06400     2B 12 06 F6 | 	mov	arg01, #43
06404     D0 C9 B0 FD | 	call	#_printerror
06408     2B FA 05 F6 | 	mov	result1, #43
0640c     48 05 90 FD | 	jmp	#LR__0576
06410                 | LR__0554
06410                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350
06410     2E 00 00 FF 
06414     08 E4 05 F1 | 	add	objptr, ##23560
06418     F2 14 02 FB | 	rdlong	arg02, objptr
0641c     01 14 06 F1 | 	add	arg02, #1
06420     03 14 66 F0 | 	shl	arg02, #3
06424     02 00 00 FF 
06428     38 E4 85 F1 | 	sub	objptr, ##1080
0642c     F2 14 02 F1 | 	add	arg02, objptr
06430     0A 13 02 FB | 	rdlong	arg01, arg02
06434     2B 01 00 FF 
06438     4D 14 06 F6 | 	mov	arg02, ##@LR__4290
0643c     2B 00 00 FF 
06440     D0 E5 85 F1 | 	sub	objptr, ##22480
06444     D8 FE B0 FD | 	call	#__system___string_cmp
06448     00 FA 0D F2 | 	cmp	result1, #0 wz
0644c     2E 00 00 AF 
06450     08 E4 05 A1 |  if_e	add	objptr, ##23560
06454     F2 30 02 AB |  if_e	rdlong	local10, objptr
06458     2E 00 00 AF 
0645c     08 E4 85 A1 |  if_e	sub	objptr, ##23560
06460     01 30 06 A1 |  if_e	add	local10, #1
06464     7C 01 90 AD |  if_e	jmp	#LR__0560
06468     2E 00 00 FF 
0646c     08 E4 05 F1 | 	add	objptr, ##23560
06470     F2 30 02 FB | 	rdlong	local10, objptr
06474     2E 00 00 FF 
06478     08 E4 85 F1 | 	sub	objptr, ##23560
0647c     02 30 06 F1 | 	add	local10, #2
06480     00 32 06 F6 | 	mov	local11, #0
06484                 | '   l=ct+2 : m=0 : do
06484                 | LR__0555
06484                 | '    ' print "in dim, lparts: ";lparts(l).part$, isdec(lparts(l).part$)
06484                 | '     if isdec(lparts(l).part$) then 
06484     18 25 02 F6 | 	mov	local04, local10
06488     03 24 66 F0 | 	shl	local04, #3
0648c     2B 00 00 FF 
06490     D0 E5 05 F1 | 	add	objptr, ##22480
06494     F2 24 02 F1 | 	add	local04, objptr
06498     12 13 02 FB | 	rdlong	arg01, local04
0649c     2B 00 00 FF 
064a0     D0 E5 85 F1 | 	sub	objptr, ##22480
064a4     F8 D7 BF FD | 	call	#_isdec
064a8     00 FA 0D F2 | 	cmp	result1, #0 wz
064ac     44 00 90 AD |  if_e	jmp	#LR__0556
064b0     19 35 02 F6 | 	mov	local12, local11
064b4     0F 35 06 F1 | 	add	local12, #local01
064b8     18 2F 02 F6 | 	mov	local09, local10
064bc     03 2E 66 F0 | 	shl	local09, #3
064c0     2B 00 00 FF 
064c4     D0 E5 05 F1 | 	add	objptr, ##22480
064c8     F2 2E 02 F1 | 	add	local09, objptr
064cc     17 13 02 FB | 	rdlong	arg01, local09
064d0     00 14 06 F6 | 	mov	arg02, #0
064d4     2B 00 00 FF 
064d8     D0 E5 85 F1 | 	sub	objptr, ##22480
064dc     A0 2D B1 FD | 	call	#__system____builtin_atoi
064e0     FD 36 02 F6 | 	mov	local13, result1
064e4                 | 	'.live	local13
064e4                 | 	'.live	local12
064e4     00 34 8E F9 | 	altd	local12, #0
064e8     1B 35 02 F6 | 	mov	local12, local13
064ec     01 32 06 F1 | 	add	local11, #1
064f0     10 00 90 FD | 	jmp	#LR__0557
064f4                 | LR__0556
064f4     11 12 06 F6 | 	mov	arg01, #17
064f8     DC C8 B0 FD | 	call	#_printerror
064fc                 | '       printerror (17)  : return(17)
064fc     11 FA 05 F6 | 	mov	result1, #17
06500     54 04 90 FD | 	jmp	#LR__0576
06504                 | LR__0557
06504                 | '     if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then printerror (44)  : return(44)
06504     18 25 02 F6 | 	mov	local04, local10
06508     01 24 06 F1 | 	add	local04, #1
0650c     03 24 66 F0 | 	shl	local04, #3
06510     2B 00 00 FF 
06514     D0 E5 05 F1 | 	add	objptr, ##22480
06518     F2 24 02 F1 | 	add	local04, objptr
0651c     12 13 02 FB | 	rdlong	arg01, local04
06520     2B 01 00 FF 
06524     50 14 06 F6 | 	mov	arg02, ##@LR__4291
06528     2B 00 00 FF 
0652c     D0 E5 85 F1 | 	sub	objptr, ##22480
06530     EC FD B0 FD | 	call	#__system___string_cmp
06534     00 FA 0D F2 | 	cmp	result1, #0 wz
06538     48 00 90 AD |  if_e	jmp	#LR__0558
0653c     18 37 02 F6 | 	mov	local13, local10
06540     01 36 06 F1 | 	add	local13, #1
06544     03 36 66 F0 | 	shl	local13, #3
06548     2B 00 00 FF 
0654c     D0 E5 05 F1 | 	add	objptr, ##22480
06550     F2 36 02 F1 | 	add	local13, objptr
06554     1B 13 02 FB | 	rdlong	arg01, local13
06558     2B 01 00 FF 
0655c     52 14 06 F6 | 	mov	arg02, ##@LR__4292
06560     2B 00 00 FF 
06564     D0 E5 85 F1 | 	sub	objptr, ##22480
06568     B4 FD B0 FD | 	call	#__system___string_cmp
0656c     00 FA 0D F2 | 	cmp	result1, #0 wz
06570     10 00 90 AD |  if_e	jmp	#LR__0558
06574     2C 12 06 F6 | 	mov	arg01, #44
06578     5C C8 B0 FD | 	call	#_printerror
0657c     2C FA 05 F6 | 	mov	result1, #44
06580     D4 03 90 FD | 	jmp	#LR__0576
06584                 | LR__0558
06584     02 30 06 F1 | 	add	local10, #2
06588     18 25 02 F6 | 	mov	local04, local10
0658c     01 24 86 F1 | 	sub	local04, #1
06590     03 24 66 F0 | 	shl	local04, #3
06594     2B 00 00 FF 
06598     D0 E5 05 F1 | 	add	objptr, ##22480
0659c     F2 24 02 F1 | 	add	local04, objptr
065a0     12 13 02 FB | 	rdlong	arg01, local04
065a4     2B 01 00 FF 
065a8     54 14 06 F6 | 	mov	arg02, ##@LR__4293
065ac     2B 00 00 FF 
065b0     D0 E5 85 F1 | 	sub	objptr, ##22480
065b4     68 FD B0 FD | 	call	#__system___string_cmp
065b8     00 FA 0D F2 | 	cmp	result1, #0 wz
065bc     03 32 56 52 |  if_ne	cmps	local11, #3 wc
065c0     C0 FE 9F 4D |  if_c_and_nz	jmp	#LR__0555
065c4                 | '   if m>3 then printerror(45): return(45)
065c4     04 32 56 F2 | 	cmps	local11, #4 wc
065c8     10 00 90 CD |  if_b	jmp	#LR__0559
065cc     2D 12 06 F6 | 	mov	arg01, #45
065d0     04 C8 B0 FD | 	call	#_printerror
065d4     2D FA 05 F6 | 	mov	result1, #45
065d8     7C 03 90 FD | 	jmp	#LR__0576
065dc                 | LR__0559
065dc     00 39 06 F6 | 	mov	local14, #256
065e0     0C 3A 06 F6 | 	mov	local15, #12
065e4                 | LR__0560
065e4                 | '  ''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''' print lparts(l-1).part$,lparts(l).part$, lparts(l+1).part$
065e4                 | '   arraytype=array_no_type : esize=12
065e4                 | ' 1350 
065e4                 | '   if lparts(l).part$="as" then
065e4     18 25 02 F6 | 	mov	local04, local10
065e8     03 24 66 F0 | 	shl	local04, #3
065ec     2B 00 00 FF 
065f0     D0 E5 05 F1 | 	add	objptr, ##22480
065f4     F2 24 02 F1 | 	add	local04, objptr
065f8     12 13 02 FB | 	rdlong	arg01, local04
065fc     2B 01 00 FF 
06600     56 14 06 F6 | 	mov	arg02, ##@LR__4294
06604     2B 00 00 FF 
06608     D0 E5 85 F1 | 	sub	objptr, ##22480
0660c     10 FD B0 FD | 	call	#__system___string_cmp
06610     00 FA 0D F2 | 	cmp	result1, #0 wz
06614     F8 01 90 5D |  if_ne	jmp	#LR__0575
06618                 | '     select case lparts(l+1).part$
06618     18 35 02 F6 | 	mov	local12, local10
0661c     01 34 06 F1 | 	add	local12, #1
06620     03 34 66 F0 | 	shl	local12, #3
06624     2B 00 00 FF 
06628     D0 E5 05 F1 | 	add	objptr, ##22480
0662c     F2 34 02 F1 | 	add	local12, objptr
06630     1A 3D 02 FB | 	rdlong	local16, local12
06634     2B 01 00 FF 
06638     59 14 06 F6 | 	mov	arg02, ##@LR__4295
0663c     1E 13 02 F6 | 	mov	arg01, local16
06640     2B 00 00 FF 
06644     D0 E5 85 F1 | 	sub	objptr, ##22480
06648     D4 FC B0 FD | 	call	#__system___string_cmp
0664c     00 FA 0D F2 | 	cmp	result1, #0 wz
06650     0C 01 90 AD |  if_e	jmp	#LR__0561
06654     2B 01 00 FF 
06658     5E 14 06 F6 | 	mov	arg02, ##@LR__4296
0665c     1E 13 02 F6 | 	mov	arg01, local16
06660     BC FC B0 FD | 	call	#__system___string_cmp
06664     00 FA 0D F2 | 	cmp	result1, #0 wz
06668     00 01 90 AD |  if_e	jmp	#LR__0562
0666c     2B 01 00 FF 
06670     64 14 06 F6 | 	mov	arg02, ##@LR__4297
06674     1E 13 02 F6 | 	mov	arg01, local16
06678     A4 FC B0 FD | 	call	#__system___string_cmp
0667c     00 FA 0D F2 | 	cmp	result1, #0 wz
06680     F4 00 90 AD |  if_e	jmp	#LR__0563
06684     2B 01 00 FF 
06688     6A 14 06 F6 | 	mov	arg02, ##@LR__4298
0668c     1E 13 02 F6 | 	mov	arg01, local16
06690     8C FC B0 FD | 	call	#__system___string_cmp
06694     00 FA 0D F2 | 	cmp	result1, #0 wz
06698     E8 00 90 AD |  if_e	jmp	#LR__0564
0669c     2B 01 00 FF 
066a0     71 14 06 F6 | 	mov	arg02, ##@LR__4299
066a4     1E 13 02 F6 | 	mov	arg01, local16
066a8     74 FC B0 FD | 	call	#__system___string_cmp
066ac     00 FA 0D F2 | 	cmp	result1, #0 wz
066b0     DC 00 90 AD |  if_e	jmp	#LR__0565
066b4     2B 01 00 FF 
066b8     76 14 06 F6 | 	mov	arg02, ##@LR__4300
066bc     1E 13 02 F6 | 	mov	arg01, local16
066c0     5C FC B0 FD | 	call	#__system___string_cmp
066c4     00 FA 0D F2 | 	cmp	result1, #0 wz
066c8     D0 00 90 AD |  if_e	jmp	#LR__0566
066cc     2B 01 00 FF 
066d0     7E 14 06 F6 | 	mov	arg02, ##@LR__4301
066d4     1E 13 02 F6 | 	mov	arg01, local16
066d8     44 FC B0 FD | 	call	#__system___string_cmp
066dc     00 FA 0D F2 | 	cmp	result1, #0 wz
066e0     C4 00 90 AD |  if_e	jmp	#LR__0567
066e4     2B 01 00 FF 
066e8     84 14 06 F6 | 	mov	arg02, ##@LR__4302
066ec     1E 13 02 F6 | 	mov	arg01, local16
066f0     2C FC B0 FD | 	call	#__system___string_cmp
066f4     00 FA 0D F2 | 	cmp	result1, #0 wz
066f8     B8 00 90 AD |  if_e	jmp	#LR__0568
066fc     2B 01 00 FF 
06700     8A 14 06 F6 | 	mov	arg02, ##@LR__4303
06704     1E 13 02 F6 | 	mov	arg01, local16
06708     14 FC B0 FD | 	call	#__system___string_cmp
0670c     00 FA 0D F2 | 	cmp	result1, #0 wz
06710     AC 00 90 AD |  if_e	jmp	#LR__0569
06714     2B 01 00 FF 
06718     91 14 06 F6 | 	mov	arg02, ##@LR__4304
0671c     1E 13 02 F6 | 	mov	arg01, local16
06720     FC FB B0 FD | 	call	#__system___string_cmp
06724     00 FA 0D F2 | 	cmp	result1, #0 wz
06728     A0 00 90 AD |  if_e	jmp	#LR__0570
0672c     2B 01 00 FF 
06730     98 14 06 F6 | 	mov	arg02, ##@LR__4305
06734     1E 13 02 F6 | 	mov	arg01, local16
06738     E4 FB B0 FD | 	call	#__system___string_cmp
0673c     00 FA 0D F2 | 	cmp	result1, #0 wz
06740     94 00 90 AD |  if_e	jmp	#LR__0571
06744     2B 01 00 FF 
06748     9F 14 06 F6 | 	mov	arg02, ##@LR__4306
0674c     1E 13 02 F6 | 	mov	arg01, local16
06750     CC FB B0 FD | 	call	#__system___string_cmp
06754     00 FA 0D F2 | 	cmp	result1, #0 wz
06758     88 00 90 AD |  if_e	jmp	#LR__0572
0675c     90 00 90 FD | 	jmp	#LR__0573
06760                 | LR__0561
06760     01 39 06 F6 | 	mov	local14, #257
06764     01 3A 06 F6 | 	mov	local15, #1
06768     A4 00 90 FD | 	jmp	#LR__0575
0676c                 | LR__0562
0676c     02 39 06 F6 | 	mov	local14, #258
06770     01 3A 06 F6 | 	mov	local15, #1
06774     98 00 90 FD | 	jmp	#LR__0575
06778                 | LR__0563
06778     03 39 06 F6 | 	mov	local14, #259
0677c     02 3A 06 F6 | 	mov	local15, #2
06780     8C 00 90 FD | 	jmp	#LR__0575
06784                 | LR__0564
06784     04 39 06 F6 | 	mov	local14, #260
06788     02 3A 06 F6 | 	mov	local15, #2
0678c     80 00 90 FD | 	jmp	#LR__0575
06790                 | LR__0565
06790     05 39 06 F6 | 	mov	local14, #261
06794     04 3A 06 F6 | 	mov	local15, #4
06798     74 00 90 FD | 	jmp	#LR__0575
0679c                 | LR__0566
0679c     05 39 06 F6 | 	mov	local14, #261
067a0     04 3A 06 F6 | 	mov	local15, #4
067a4     68 00 90 FD | 	jmp	#LR__0575
067a8                 | LR__0567
067a8     06 39 06 F6 | 	mov	local14, #262
067ac     04 3A 06 F6 | 	mov	local15, #4
067b0     5C 00 90 FD | 	jmp	#LR__0575
067b4                 | LR__0568
067b4     07 39 06 F6 | 	mov	local14, #263
067b8     08 3A 06 F6 | 	mov	local15, #8
067bc     50 00 90 FD | 	jmp	#LR__0575
067c0                 | LR__0569
067c0     08 39 06 F6 | 	mov	local14, #264
067c4     08 3A 06 F6 | 	mov	local15, #8
067c8     44 00 90 FD | 	jmp	#LR__0575
067cc                 | LR__0570
067cc     09 39 06 F6 | 	mov	local14, #265
067d0     04 3A 06 F6 | 	mov	local15, #4
067d4     38 00 90 FD | 	jmp	#LR__0575
067d8                 | LR__0571
067d8     0A 39 06 F6 | 	mov	local14, #266
067dc     08 3A 06 F6 | 	mov	local15, #8
067e0     2C 00 90 FD | 	jmp	#LR__0575
067e4                 | LR__0572
067e4     0B 39 06 F6 | 	mov	local14, #267
067e8     04 3A 06 F6 | 	mov	local15, #4
067ec     20 00 90 FD | 	jmp	#LR__0575
067f0                 | LR__0573
067f0     2F 12 06 F6 | 	mov	arg01, #47
067f4     E0 C5 B0 FD | 	call	#_printerror
067f8     2F FA 05 F6 | 	mov	result1, #47
067fc     58 01 90 FD | 	jmp	#LR__0576
06800                 | LR__0574
06800     2E 12 06 F6 | 	mov	arg01, #46
06804     D0 C5 B0 FD | 	call	#_printerror
06808                 | '   printerror(46): return 46
06808     2E FA 05 F6 | 	mov	result1, #46
0680c     48 01 90 FD | 	jmp	#LR__0576
06810                 | LR__0575
06810     0F 3B 02 FD | 	qmul	local15, local01
06814     18 2A 62 FD | 	getqx	local07
06818     10 2B 02 FD | 	qmul	local07, local02
0681c     18 3C 62 FD | 	getqx	local16
06820     11 3D 02 FD | 	qmul	local16, local03
06824     52 00 00 FF 
06828     3C E4 05 F1 | 	add	objptr, ##42044
0682c     F2 3E 02 FB | 	rdlong	local17, objptr
06830     1C 15 02 F6 | 	mov	arg02, local14
06834     01 16 06 F6 | 	mov	arg03, #1
06838     00 18 06 F6 | 	mov	arg04, #0
0683c                 | '     return fill(addr, pattern, count, listPtr, 4)
0683c     04 1A 06 F6 | 	mov	arg05, #4
06840     18 3C 62 FD | 	getqx	local16
06844     1E 3F 82 F1 | 	sub	local17, local16
06848     10 3E 86 F1 | 	sub	local17, #16
0684c     F2 3E 62 FC | 	wrlong	local17, objptr
06850     1F 13 02 F6 | 	mov	arg01, local17
06854     46 00 00 FF 
06858     7C E5 85 F1 | 	sub	objptr, ##36220
0685c     E4 F0 B0 FD | 	call	#_psram_spin2_fill
06860     1F 13 02 F6 | 	mov	arg01, local17
06864     02 12 06 F1 | 	add	arg01, #2
06868     1D 15 02 F6 | 	mov	arg02, local15
0686c     01 16 06 F6 | 	mov	arg03, #1
06870     00 18 06 F6 | 	mov	arg04, #0
06874                 | '     return fill(addr, pattern, count, listPtr, 1)
06874     01 1A 06 F6 | 	mov	arg05, #1
06878     C8 F0 B0 FD | 	call	#_psram_spin2_fill
0687c     1F 13 02 F6 | 	mov	arg01, local17
06880     04 12 06 F1 | 	add	arg01, #4
06884     0F 15 02 F6 | 	mov	arg02, local01
06888     01 16 06 F6 | 	mov	arg03, #1
0688c     00 18 06 F6 | 	mov	arg04, #0
06890                 | '     return fill(addr, pattern, count, listPtr, 4)
06890     04 1A 06 F6 | 	mov	arg05, #4
06894     AC F0 B0 FD | 	call	#_psram_spin2_fill
06898     1F 13 02 F6 | 	mov	arg01, local17
0689c     08 12 06 F1 | 	add	arg01, #8
068a0     10 15 02 F6 | 	mov	arg02, local02
068a4     01 16 06 F6 | 	mov	arg03, #1
068a8     00 18 06 F6 | 	mov	arg04, #0
068ac                 | '     return fill(addr, pattern, count, listPtr, 4)
068ac     04 1A 06 F6 | 	mov	arg05, #4
068b0     90 F0 B0 FD | 	call	#_psram_spin2_fill
068b4     1F 13 02 F6 | 	mov	arg01, local17
068b8     0C 12 06 F1 | 	add	arg01, #12
068bc     11 15 02 F6 | 	mov	arg02, local03
068c0     01 16 06 F6 | 	mov	arg03, #1
068c4     00 18 06 F6 | 	mov	arg04, #0
068c8                 | '     return fill(addr, pattern, count, listPtr, 4)
068c8     04 1A 06 F6 | 	mov	arg05, #4
068cc     74 F0 B0 FD | 	call	#_psram_spin2_fill
068d0     20 00 00 FF 
068d4     0C E5 05 F1 | 	add	objptr, ##16652
068d8     F2 24 02 FB | 	rdlong	local04, objptr
068dc     04 24 66 F0 | 	shl	local04, #4
068e0     20 00 00 FF 
068e4     00 E4 85 F1 | 	sub	objptr, ##16384
068e8     F2 24 02 F1 | 	add	local04, objptr
068ec     12 27 62 FC | 	wrlong	local05, local04
068f0     20 00 00 FF 
068f4     00 E4 05 F1 | 	add	objptr, ##16384
068f8     F2 24 02 FB | 	rdlong	local04, objptr
068fc     04 24 66 F0 | 	shl	local04, #4
06900     20 00 00 FF 
06904     00 E4 85 F1 | 	sub	objptr, ##16384
06908     F2 24 02 F1 | 	add	local04, objptr
0690c     04 24 06 F1 | 	add	local04, #4
06910     12 3F 62 FC | 	wrlong	local17, local04
06914     20 00 00 FF 
06918     00 E4 05 F1 | 	add	objptr, ##16384
0691c     F2 24 02 FB | 	rdlong	local04, objptr
06920     04 24 66 F0 | 	shl	local04, #4
06924     20 00 00 FF 
06928     00 E4 85 F1 | 	sub	objptr, ##16384
0692c     F2 24 02 F1 | 	add	local04, objptr
06930     0C 24 06 F1 | 	add	local04, #12
06934     12 39 62 FC | 	wrlong	local14, local04
06938     20 00 00 FF 
0693c     00 E4 05 F1 | 	add	objptr, ##16384
06940     F2 2A 02 FB | 	rdlong	local07, objptr
06944     01 2A 06 F1 | 	add	local07, #1
06948     F2 2A 62 FC | 	wrlong	local07, objptr
0694c     2B 00 00 FF 
06950     CC E5 85 F1 | 	sub	objptr, ##22476
06954                 | ' 'print dims(0),dims(1),dims(2),arraytype
06954                 | ' 
06954                 | ' arraysize=esize*dims(0)*dims(1)*dims(2)
06954                 | ' arrayptr=memtop-arraysize-16
06954                 | ' memtop=arrayptr
06954                 | ' 
06954                 | ' pslpoke arrayptr,arraytype
06954                 | ' pspoke arrayptr+2,esize
06954                 | ' pslpoke arrayptr+4,dims(0)
06954                 | ' pslpoke arrayptr+8,dims(1)
06954                 | ' pslpoke arrayptr+12,dims(2)
06954                 | ' 
06954                 | ' variables(varnum).name=varname2$
06954                 | ' variables(varnum).value.uresult=arrayptr
06954                 | ' variables(varnum).vartype=arraytype
06954                 | ' varnum+=1
06954                 | ' 
06954                 | ' return 0
06954     00 FA 05 F6 | 	mov	result1, #0
06958                 | LR__0576
06958     A7 F0 03 F6 | 	mov	ptra, fp
0695c     B2 00 A0 FD | 	call	#popregs_
06960                 | _compile_dim_ret
06960     2D 00 64 FD | 	ret
06964                 | 
06964                 | ' 
06964                 | ' 
06964                 | ' function compile_for() as ulong  
06964                 | _compile_for
06964     07 4A 05 F6 | 	mov	COUNT_, #7
06968     A8 00 A0 FD | 	call	#pushregs_
0696c                 | ' 
0696c                 | ' 
0696c                 | ' 
0696c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else compile_error(32) : return 32
0696c     2E 00 00 FF 
06970     08 E4 05 F1 | 	add	objptr, ##23560
06974     F2 14 02 FB | 	rdlong	arg02, objptr
06978     01 14 06 F1 | 	add	arg02, #1
0697c     03 14 66 F0 | 	shl	arg02, #3
06980     02 00 00 FF 
06984     38 E4 85 F1 | 	sub	objptr, ##1080
06988     F2 14 02 F1 | 	add	arg02, objptr
0698c     0A 13 02 FB | 	rdlong	arg01, arg02
06990     2B 00 00 FF 
06994     D0 E5 85 F1 | 	sub	objptr, ##22480
06998                 | ' 
06998                 | ' select case s
06998     2A 01 00 FF 
0699c     6A 14 06 F6 | 	mov	arg02, ##@LR__4176
069a0     7C F9 B0 FD | 	call	#__system___string_cmp
069a4     00 FA 0D F2 | 	cmp	result1, #0 wz
069a8     1B FA 05 A6 |  if_e	mov	result1, #27
069ac     00 FA 05 56 |  if_ne	mov	result1, #0
069b0     00 FA 0D F2 | 	cmp	result1, #0 wz
069b4     0C 00 90 AD |  if_e	jmp	#LR__0580
069b8     05 12 06 F6 | 	mov	arg01, #5
069bc     A4 E3 BF FD | 	call	#_compile_immediate_assign
069c0     10 00 90 FD | 	jmp	#LR__0581
069c4                 | LR__0580
069c4     20 12 06 F6 | 	mov	arg01, #32
069c8     14 E8 BF FD | 	call	#_compile_error
069cc     20 FA 05 F6 | 	mov	result1, #32
069d0     AC 02 90 FD | 	jmp	#LR__0586
069d4                 | LR__0581
069d4     41 00 00 FF 
069d8     40 E4 05 F1 | 	add	objptr, ##33344
069dc     F2 12 02 FB | 	rdlong	arg01, objptr
069e0     09 25 02 F6 | 	mov	local04, arg01
069e4     01 24 86 F1 | 	sub	local04, #1
069e8     12 15 02 F6 | 	mov	arg02, local04
069ec     01 14 66 F0 | 	shl	arg02, #1
069f0     12 15 02 F1 | 	add	arg02, local04
069f4     02 14 66 F0 | 	shl	arg02, #2
069f8     03 00 00 FF 
069fc     00 E4 85 F1 | 	sub	objptr, ##1536
06a00     F2 14 02 F1 | 	add	arg02, objptr
06a04     0A 1F 02 FB | 	rdlong	local01, arg02
06a08     04 14 06 F1 | 	add	arg02, #4
06a0c     0A 27 02 FB | 	rdlong	local05, arg02
06a10     01 12 86 F1 | 	sub	arg01, #1
06a14     09 29 02 F6 | 	mov	local06, arg01
06a18     01 28 66 F0 | 	shl	local06, #1
06a1c     09 29 02 F1 | 	add	local06, arg01
06a20     02 28 66 F0 | 	shl	local06, #2
06a24     F2 28 02 F1 | 	add	local06, objptr
06a28     08 28 06 F1 | 	add	local06, #8
06a2c     14 13 02 FB | 	rdlong	arg01, local06
06a30     13 21 02 F6 | 	mov	local02, local05
06a34     09 23 02 F6 | 	mov	local03, arg01
06a38                 | ' '' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
06a38                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then compile_error(34) : return 34
06a38     17 22 0E F2 | 	cmp	local03, #23 wz
06a3c     3E 00 00 FF 
06a40     40 E4 85 F1 | 	sub	objptr, ##31808
06a44     10 00 90 AD |  if_e	jmp	#LR__0582
06a48     22 12 06 F6 | 	mov	arg01, #34
06a4c     90 E7 BF FD | 	call	#_compile_error
06a50     22 FA 05 F6 | 	mov	result1, #34
06a54     28 02 90 FD | 	jmp	#LR__0586
06a58                 | LR__0582
06a58     0F 2B 02 F6 | 	mov	local07, local01
06a5c                 | ' varnum=t1.result.uresult
06a5c                 | ' if lparts(ct).part$<>"to" then  compile_error(33) : return 33
06a5c     2E 00 00 FF 
06a60     08 E4 05 F1 | 	add	objptr, ##23560
06a64     F2 24 02 FB | 	rdlong	local04, objptr
06a68     03 24 66 F0 | 	shl	local04, #3
06a6c     02 00 00 FF 
06a70     38 E4 85 F1 | 	sub	objptr, ##1080
06a74     F2 24 02 F1 | 	add	local04, objptr
06a78     12 13 02 FB | 	rdlong	arg01, local04
06a7c     2B 01 00 FF 
06a80     A6 14 06 F6 | 	mov	arg02, ##@LR__4307
06a84     2B 00 00 FF 
06a88     D0 E5 85 F1 | 	sub	objptr, ##22480
06a8c     90 F8 B0 FD | 	call	#__system___string_cmp
06a90     00 FA 0D F2 | 	cmp	result1, #0 wz
06a94     10 00 90 AD |  if_e	jmp	#LR__0583
06a98     21 12 06 F6 | 	mov	arg01, #33
06a9c     40 E7 BF FD | 	call	#_compile_error
06aa0     21 FA 05 F6 | 	mov	result1, #33
06aa4     D8 01 90 FD | 	jmp	#LR__0586
06aa8                 | LR__0583
06aa8     2E 00 00 FF 
06aac     08 E4 05 F1 | 	add	objptr, ##23560
06ab0     F2 28 02 FB | 	rdlong	local06, objptr
06ab4     01 28 06 F1 | 	add	local06, #1
06ab8     F2 28 62 FC | 	wrlong	local06, objptr
06abc     2E 00 00 FF 
06ac0     08 E4 85 F1 | 	sub	objptr, ##23560
06ac4     98 0B B0 FD | 	call	#_expr
06ac8                 | ' ct+=1
06ac8                 | ' expr()  ' there is "to" value pushed on the stack
06ac8                 | ' if lparts(ct).part$="step" then 
06ac8     2E 00 00 FF 
06acc     08 E4 05 F1 | 	add	objptr, ##23560
06ad0     F2 24 02 FB | 	rdlong	local04, objptr
06ad4     03 24 66 F0 | 	shl	local04, #3
06ad8     02 00 00 FF 
06adc     38 E4 85 F1 | 	sub	objptr, ##1080
06ae0     F2 24 02 F1 | 	add	local04, objptr
06ae4     12 13 02 FB | 	rdlong	arg01, local04
06ae8     2B 01 00 FF 
06aec     A9 14 06 F6 | 	mov	arg02, ##@LR__4308
06af0     2B 00 00 FF 
06af4     D0 E5 85 F1 | 	sub	objptr, ##22480
06af8     24 F8 B0 FD | 	call	#__system___string_cmp
06afc     00 FA 0D F2 | 	cmp	result1, #0 wz
06b00     24 00 90 5D |  if_ne	jmp	#LR__0584
06b04     2E 00 00 FF 
06b08     08 E4 05 F1 | 	add	objptr, ##23560
06b0c     F2 28 02 FB | 	rdlong	local06, objptr
06b10     01 28 06 F1 | 	add	local06, #1
06b14     F2 28 62 FC | 	wrlong	local06, objptr
06b18     2E 00 00 FF 
06b1c     08 E4 85 F1 | 	sub	objptr, ##23560
06b20     3C 0B B0 FD | 	call	#_expr
06b24     78 00 90 FD | 	jmp	#LR__0585
06b28                 | LR__0584
06b28     41 00 00 FF 
06b2c     40 E4 05 F1 | 	add	objptr, ##33344
06b30     F2 28 02 FB | 	rdlong	local06, objptr
06b34     14 27 02 F6 | 	mov	local05, local06
06b38     01 26 66 F0 | 	shl	local05, #1
06b3c     14 27 02 F1 | 	add	local05, local06
06b40     02 26 66 F0 | 	shl	local05, #2
06b44     03 00 00 FF 
06b48     00 E4 85 F1 | 	sub	objptr, ##1536
06b4c     F2 26 02 F1 | 	add	local05, objptr
06b50     08 26 06 F1 | 	add	local05, #8
06b54     13 39 68 FC | 	wrlong	#28, local05
06b58     03 00 00 FF 
06b5c     00 E4 05 F1 | 	add	objptr, ##1536
06b60     F2 28 02 FB | 	rdlong	local06, objptr
06b64     14 27 02 F6 | 	mov	local05, local06
06b68     01 26 66 F0 | 	shl	local05, #1
06b6c     14 27 02 F1 | 	add	local05, local06
06b70     02 26 66 F0 | 	shl	local05, #2
06b74     03 00 00 FF 
06b78     00 E4 85 F1 | 	sub	objptr, ##1536
06b7c     F2 26 02 F1 | 	add	local05, objptr
06b80     13 03 68 FC | 	wrlong	#1, local05
06b84     03 00 00 FF 
06b88     00 E4 05 F1 | 	add	objptr, ##1536
06b8c     F2 28 02 FB | 	rdlong	local06, objptr
06b90     01 28 06 F1 | 	add	local06, #1
06b94     F2 28 62 FC | 	wrlong	local06, objptr
06b98     41 00 00 FF 
06b9c     40 E4 85 F1 | 	sub	objptr, ##33344
06ba0                 | LR__0585
06ba0     41 00 00 FF 
06ba4     40 E4 05 F1 | 	add	objptr, ##33344
06ba8     F2 28 02 FB | 	rdlong	local06, objptr
06bac     14 27 02 F6 | 	mov	local05, local06
06bb0     01 26 66 F0 | 	shl	local05, #1
06bb4     14 27 02 F1 | 	add	local05, local06
06bb8     02 26 66 F0 | 	shl	local05, #2
06bbc     03 00 00 FF 
06bc0     00 E4 85 F1 | 	sub	objptr, ##1536
06bc4     F2 26 02 F1 | 	add	local05, objptr
06bc8     08 26 06 F1 | 	add	local05, #8
06bcc     13 39 68 FC | 	wrlong	#28, local05
06bd0     03 00 00 FF 
06bd4     00 E4 05 F1 | 	add	objptr, ##1536
06bd8     F2 28 02 FB | 	rdlong	local06, objptr
06bdc     14 27 02 F6 | 	mov	local05, local06
06be0     01 26 66 F0 | 	shl	local05, #1
06be4     14 27 02 F1 | 	add	local05, local06
06be8     02 26 66 F0 | 	shl	local05, #2
06bec     03 00 00 FF 
06bf0     00 E4 85 F1 | 	sub	objptr, ##1536
06bf4     F2 26 02 F1 | 	add	local05, objptr
06bf8     13 2B 62 FC | 	wrlong	local07, local05
06bfc     03 00 00 FF 
06c00     00 E4 05 F1 | 	add	objptr, ##1536
06c04     F2 2A 02 FB | 	rdlong	local07, objptr
06c08     01 2A 06 F1 | 	add	local07, #1
06c0c     F2 2A 62 FC | 	wrlong	local07, objptr
06c10     15 29 02 F6 | 	mov	local06, local07
06c14     01 28 66 F0 | 	shl	local06, #1
06c18     15 29 02 F1 | 	add	local06, local07
06c1c     02 28 66 F0 | 	shl	local06, #2
06c20     03 00 00 FF 
06c24     00 E4 85 F1 | 	sub	objptr, ##1536
06c28     F2 28 02 F1 | 	add	local06, objptr
06c2c     08 28 06 F1 | 	add	local06, #8
06c30     14 95 68 FC | 	wrlong	#74, local06
06c34     03 00 00 FF 
06c38     00 E4 05 F1 | 	add	objptr, ##1536
06c3c     F2 2A 02 FB | 	rdlong	local07, objptr
06c40     15 29 02 F6 | 	mov	local06, local07
06c44     01 28 66 F0 | 	shl	local06, #1
06c48     15 29 02 F1 | 	add	local06, local07
06c4c     02 28 66 F0 | 	shl	local06, #2
06c50     03 00 00 FF 
06c54     00 E4 85 F1 | 	sub	objptr, ##1536
06c58     F2 28 02 F1 | 	add	local06, objptr
06c5c     14 01 68 FC | 	wrlong	#0, local06
06c60     03 00 00 FF 
06c64     00 E4 05 F1 | 	add	objptr, ##1536
06c68     F2 2A 02 FB | 	rdlong	local07, objptr
06c6c     01 2A 06 F1 | 	add	local07, #1
06c70     F2 2A 62 FC | 	wrlong	local07, objptr
06c74     41 00 00 FF 
06c78     40 E4 85 F1 | 	sub	objptr, ##33344
06c7c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
06c7c                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
06c7c                 | ' 
06c7c                 | ' 
06c7c                 | ' return 0
06c7c     00 FA 05 F6 | 	mov	result1, #0
06c80                 | LR__0586
06c80     A7 F0 03 F6 | 	mov	ptra, fp
06c84     B2 00 A0 FD | 	call	#popregs_
06c88                 | _compile_for_ret
06c88     2D 00 64 FD | 	ret
06c8c                 | 
06c8c                 | ' 
06c8c                 | ' 
06c8c                 | ' sub do_for()
06c8c                 | _do_for
06c8c     05 4A 05 F6 | 	mov	COUNT_, #5
06c90     A8 00 A0 FD | 	call	#pushregs_
06c94     50 00 00 FF 
06c98     9C E5 05 F1 | 	add	objptr, ##41372
06c9c     F2 24 02 FB | 	rdlong	local04, objptr
06ca0     01 24 06 F1 | 	add	local04, #1
06ca4     F2 24 62 FC | 	wrlong	local04, objptr
06ca8     50 00 00 FF 
06cac     9C E5 85 F1 | 	sub	objptr, ##41372
06cb0     5C 1E B0 FD | 	call	#_pop
06cb4     FD 1E 02 F6 | 	mov	local01, result1
06cb8     FE 20 02 F6 | 	mov	local02, result2
06cbc     FF 22 02 F6 | 	mov	local03, result3
06cc0     50 00 00 FF 
06cc4     9C E5 05 F1 | 	add	objptr, ##41372
06cc8     F2 24 02 FB | 	rdlong	local04, objptr
06ccc     12 27 02 F6 | 	mov	local05, local04
06cd0     02 26 66 F0 | 	shl	local05, #2
06cd4     12 27 02 F1 | 	add	local05, local04
06cd8     02 26 66 F0 | 	shl	local05, #2
06cdc     07 00 00 FF 
06ce0     40 E5 85 F1 | 	sub	objptr, ##3904
06ce4     F2 26 02 F1 | 	add	local05, objptr
06ce8     08 26 06 F1 | 	add	local05, #8
06cec     13 1F 62 FC | 	wrlong	local01, local05
06cf0     49 00 00 FF 
06cf4     5C E4 85 F1 | 	sub	objptr, ##37468
06cf8     14 1E B0 FD | 	call	#_pop
06cfc     FD 1E 02 F6 | 	mov	local01, result1
06d00     FE 20 02 F6 | 	mov	local02, result2
06d04     FF 22 02 F6 | 	mov	local03, result3
06d08     50 00 00 FF 
06d0c     9C E5 05 F1 | 	add	objptr, ##41372
06d10     F2 24 02 FB | 	rdlong	local04, objptr
06d14     12 27 02 F6 | 	mov	local05, local04
06d18     02 26 66 F0 | 	shl	local05, #2
06d1c     12 27 02 F1 | 	add	local05, local04
06d20     02 26 66 F0 | 	shl	local05, #2
06d24     07 00 00 FF 
06d28     40 E5 85 F1 | 	sub	objptr, ##3904
06d2c     F2 26 02 F1 | 	add	local05, objptr
06d30     0C 26 06 F1 | 	add	local05, #12
06d34     13 1F 62 FC | 	wrlong	local01, local05
06d38     49 00 00 FF 
06d3c     5C E4 85 F1 | 	sub	objptr, ##37468
06d40     CC 1D B0 FD | 	call	#_pop
06d44     FD 1E 02 F6 | 	mov	local01, result1
06d48     FE 20 02 F6 | 	mov	local02, result2
06d4c     FF 22 02 F6 | 	mov	local03, result3
06d50     50 00 00 FF 
06d54     9C E5 05 F1 | 	add	objptr, ##41372
06d58     F2 24 02 FB | 	rdlong	local04, objptr
06d5c     12 27 02 F6 | 	mov	local05, local04
06d60     02 26 66 F0 | 	shl	local05, #2
06d64     12 27 02 F1 | 	add	local05, local04
06d68     02 26 66 F0 | 	shl	local05, #2
06d6c     07 00 00 FF 
06d70     40 E5 85 F1 | 	sub	objptr, ##3904
06d74     F2 26 02 F1 | 	add	local05, objptr
06d78     10 26 06 F1 | 	add	local05, #16
06d7c     13 1F 62 FC | 	wrlong	local01, local05
06d80                 | ' fortop+=1
06d80                 | ' 'i=-1: do: i+=1 : loop until fortable(i).varnum= -1 orelse i>= maxfor
06d80                 | ' 'if i> maxfor then printerror(36) : return
06d80                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
06d80                 | ' t1=pop() : fortable(fortop).stepval=t1.result.iresult
06d80                 | ' t1=pop() : fortable(fortop).endval=t1.result.iresult
06d80                 | ' if compiledline(lineptr_e).result_type=token_end then
06d80     08 00 00 FF 
06d84     18 E4 85 F1 | 	sub	objptr, ##4120
06d88     F2 1E 02 FB | 	rdlong	local01, objptr
06d8c     0F 27 02 F6 | 	mov	local05, local01
06d90     01 26 66 F0 | 	shl	local05, #1
06d94     0F 27 02 F1 | 	add	local05, local01
06d98     02 26 66 F0 | 	shl	local05, #2
06d9c     03 00 00 FF 
06da0     04 E4 85 F1 | 	sub	objptr, ##1540
06da4     F2 26 02 F1 | 	add	local05, objptr
06da8     08 26 06 F1 | 	add	local05, #8
06dac     13 27 02 FB | 	rdlong	local05, local05
06db0     FE 27 0E F2 | 	cmp	local05, #510 wz
06db4     3E 00 00 FF 
06db8     40 E4 85 F1 | 	sub	objptr, ##31808
06dbc     70 00 90 5D |  if_ne	jmp	#LR__0590
06dc0     50 00 00 FF 
06dc4     9C E5 05 F1 | 	add	objptr, ##41372
06dc8     F2 1E 02 FB | 	rdlong	local01, objptr
06dcc     0F 27 02 F6 | 	mov	local05, local01
06dd0     02 26 66 F0 | 	shl	local05, #2
06dd4     0F 27 02 F1 | 	add	local05, local01
06dd8     02 26 66 F0 | 	shl	local05, #2
06ddc     07 00 00 FF 
06de0     40 E5 85 F1 | 	sub	objptr, ##3904
06de4     F2 26 02 F1 | 	add	local05, objptr
06de8     07 00 00 FF 
06dec     18 E5 05 F1 | 	add	objptr, ##3864
06df0     F2 1E 02 FB | 	rdlong	local01, objptr
06df4     13 1F 62 FC | 	wrlong	local01, local05
06df8     28 E4 05 F1 | 	add	objptr, #40
06dfc     F2 1E 02 FB | 	rdlong	local01, objptr
06e00     0F 27 02 F6 | 	mov	local05, local01
06e04     02 26 66 F0 | 	shl	local05, #2
06e08     0F 27 02 F1 | 	add	local05, local01
06e0c     02 26 66 F0 | 	shl	local05, #2
06e10     07 00 00 FF 
06e14     40 E5 85 F1 | 	sub	objptr, ##3904
06e18     F2 26 02 F1 | 	add	local05, objptr
06e1c     04 26 06 F1 | 	add	local05, #4
06e20     13 01 68 FC | 	wrlong	#0, local05
06e24     49 00 00 FF 
06e28     5C E4 85 F1 | 	sub	objptr, ##37468
06e2c     7C 00 90 FD | 	jmp	#LR__0591
06e30                 | LR__0590
06e30     50 00 00 FF 
06e34     9C E5 05 F1 | 	add	objptr, ##41372
06e38     F2 1E 02 FB | 	rdlong	local01, objptr
06e3c     0F 27 02 F6 | 	mov	local05, local01
06e40     02 26 66 F0 | 	shl	local05, #2
06e44     0F 27 02 F1 | 	add	local05, local01
06e48     02 26 66 F0 | 	shl	local05, #2
06e4c     07 00 00 FF 
06e50     40 E5 85 F1 | 	sub	objptr, ##3904
06e54     F2 26 02 F1 | 	add	local05, objptr
06e58     07 00 00 FF 
06e5c     20 E5 05 F1 | 	add	objptr, ##3872
06e60     F2 1E 02 FB | 	rdlong	local01, objptr
06e64     13 1F 62 FC | 	wrlong	local01, local05
06e68     20 E4 05 F1 | 	add	objptr, #32
06e6c     F2 1E 02 FB | 	rdlong	local01, objptr
06e70     0F 27 02 F6 | 	mov	local05, local01
06e74     02 26 66 F0 | 	shl	local05, #2
06e78     0F 27 02 F1 | 	add	local05, local01
06e7c     02 26 66 F0 | 	shl	local05, #2
06e80     07 00 00 FF 
06e84     40 E5 85 F1 | 	sub	objptr, ##3904
06e88     F2 26 02 F1 | 	add	local05, objptr
06e8c     08 00 00 FF 
06e90     18 E4 85 F1 | 	sub	objptr, ##4120
06e94     F2 1E 02 FB | 	rdlong	local01, objptr
06e98     41 00 00 FF 
06e9c     44 E4 85 F1 | 	sub	objptr, ##33348
06ea0     01 1E 06 F1 | 	add	local01, #1
06ea4     04 26 06 F1 | 	add	local05, #4
06ea8     13 1F 62 FC | 	wrlong	local01, local05
06eac                 | LR__0591
06eac     A7 F0 03 F6 | 	mov	ptra, fp
06eb0     B2 00 A0 FD | 	call	#popregs_
06eb4                 | _do_for_ret
06eb4     2D 00 64 FD | 	ret
06eb8                 | 
06eb8                 | ' 
06eb8                 | ' ' now do_next todo
06eb8                 | ' 
06eb8                 | ' sub do_next()
06eb8                 | _do_next
06eb8     04 4A 05 F6 | 	mov	COUNT_, #4
06ebc     A8 00 A0 FD | 	call	#pushregs_
06ec0     4C 1C B0 FD | 	call	#_pop
06ec4     FD 1E 02 F6 | 	mov	local01, result1
06ec8     FE 20 02 F6 | 	mov	local02, result2
06ecc     FF 22 02 F6 | 	mov	local03, result3
06ed0                 | ' 
06ed0                 | ' t1=pop() :varnum=t1.result.uresult
06ed0                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
06ed0     50 00 00 FF 
06ed4     9C E5 05 F1 | 	add	objptr, ##41372
06ed8     F2 12 02 FB | 	rdlong	arg01, objptr
06edc     09 25 02 F6 | 	mov	local04, arg01
06ee0     02 24 66 F0 | 	shl	local04, #2
06ee4     09 25 02 F1 | 	add	local04, arg01
06ee8     02 24 66 F0 | 	shl	local04, #2
06eec     07 00 00 FF 
06ef0     40 E5 85 F1 | 	sub	objptr, ##3904
06ef4     F2 24 02 F1 | 	add	local04, objptr
06ef8     08 24 06 F1 | 	add	local04, #8
06efc     12 25 02 FB | 	rdlong	local04, local04
06f00     0F 25 0A F2 | 	cmp	local04, local01 wz
06f04     49 00 00 FF 
06f08     5C E4 85 F1 | 	sub	objptr, ##37468
06f0c     0C 00 90 AD |  if_e	jmp	#LR__0600
06f10     25 12 06 F6 | 	mov	arg01, #37
06f14     C0 BE B0 FD | 	call	#_printerror
06f18     28 02 90 FD | 	jmp	#LR__0604
06f1c                 | LR__0600
06f1c     50 00 00 FF 
06f20     9C E5 05 F1 | 	add	objptr, ##41372
06f24     F2 12 02 FB | 	rdlong	arg01, objptr
06f28     09 25 02 F6 | 	mov	local04, arg01
06f2c     02 24 66 F0 | 	shl	local04, #2
06f30     09 25 02 F1 | 	add	local04, arg01
06f34     02 24 66 F0 | 	shl	local04, #2
06f38     07 00 00 FF 
06f3c     40 E5 85 F1 | 	sub	objptr, ##3904
06f40     F2 24 02 F1 | 	add	local04, objptr
06f44     0C 24 06 F1 | 	add	local04, #12
06f48     12 25 02 FB | 	rdlong	local04, local04
06f4c     0F 13 02 F6 | 	mov	arg01, local01
06f50     04 12 66 F0 | 	shl	arg01, #4
06f54     3D 00 00 FF 
06f58     90 E4 85 F1 | 	sub	objptr, ##31376
06f5c     F2 12 02 F1 | 	add	arg01, objptr
06f60     0F FF 01 F6 | 	mov	result3, local01
06f64     04 FE 65 F0 | 	shl	result3, #4
06f68     F2 FE 01 F1 | 	add	result3, objptr
06f6c     04 FE 05 F1 | 	add	result3, #4
06f70     FF FE 01 FB | 	rdlong	result3, result3
06f74     12 FF 01 F1 | 	add	result3, local04
06f78     04 12 06 F1 | 	add	arg01, #4
06f7c     09 FF 61 FC | 	wrlong	result3, arg01
06f80                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
06f80                 | ' if fortable(fortop).stepval>=0 then
06f80     44 00 00 FF 
06f84     D0 E5 05 F1 | 	add	objptr, ##35280
06f88     F2 12 02 FB | 	rdlong	arg01, objptr
06f8c     09 25 02 F6 | 	mov	local04, arg01
06f90     02 24 66 F0 | 	shl	local04, #2
06f94     09 25 02 F1 | 	add	local04, arg01
06f98     02 24 66 F0 | 	shl	local04, #2
06f9c     07 00 00 FF 
06fa0     40 E5 85 F1 | 	sub	objptr, ##3904
06fa4     F2 24 02 F1 | 	add	local04, objptr
06fa8     0C 24 06 F1 | 	add	local04, #12
06fac     12 25 02 FB | 	rdlong	local04, local04
06fb0     00 24 56 F2 | 	cmps	local04, #0 wc
06fb4     49 00 00 FF 
06fb8     5C E4 85 F1 | 	sub	objptr, ##37468
06fbc     78 00 90 CD |  if_b	jmp	#LR__0601
06fc0                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
06fc0     04 1E 66 F0 | 	shl	local01, #4
06fc4     0B 00 00 FF 
06fc8     CC E5 05 F1 | 	add	objptr, ##6092
06fcc     F2 1E 02 F1 | 	add	local01, objptr
06fd0     44 00 00 FF 
06fd4     D0 E5 05 F1 | 	add	objptr, ##35280
06fd8     F2 24 02 FB | 	rdlong	local04, objptr
06fdc     12 13 02 F6 | 	mov	arg01, local04
06fe0     02 12 66 F0 | 	shl	arg01, #2
06fe4     12 13 02 F1 | 	add	arg01, local04
06fe8     02 12 66 F0 | 	shl	arg01, #2
06fec     07 00 00 FF 
06ff0     40 E5 85 F1 | 	sub	objptr, ##3904
06ff4     F2 12 02 F1 | 	add	arg01, objptr
06ff8     04 1E 06 F1 | 	add	local01, #4
06ffc     0F 25 02 FB | 	rdlong	local04, local01
07000     10 12 06 F1 | 	add	arg01, #16
07004     09 13 02 FB | 	rdlong	arg01, arg01
07008     09 25 5A F2 | 	cmps	local04, arg01 wcz
0700c     49 00 00 FF 
07010     5C E4 85 F1 | 	sub	objptr, ##37468
07014     9C 00 90 ED |  if_be	jmp	#LR__0603
07018     50 00 00 FF 
0701c     9C E5 05 F1 | 	add	objptr, ##41372
07020     F2 24 02 FB | 	rdlong	local04, objptr
07024     01 24 86 F1 | 	sub	local04, #1
07028     F2 24 62 FC | 	wrlong	local04, objptr
0702c     50 00 00 FF 
07030     9C E5 85 F1 | 	sub	objptr, ##41372
07034     0C 01 90 FD | 	jmp	#LR__0604
07038                 | LR__0601
07038                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
07038     0F 13 02 F6 | 	mov	arg01, local01
0703c     04 12 66 F0 | 	shl	arg01, #4
07040     0B 00 00 FF 
07044     CC E5 05 F1 | 	add	objptr, ##6092
07048     F2 12 02 F1 | 	add	arg01, objptr
0704c     44 00 00 FF 
07050     D0 E5 05 F1 | 	add	objptr, ##35280
07054     F2 24 02 FB | 	rdlong	local04, objptr
07058     12 1F 02 F6 | 	mov	local01, local04
0705c     02 1E 66 F0 | 	shl	local01, #2
07060     12 1F 02 F1 | 	add	local01, local04
07064     02 1E 66 F0 | 	shl	local01, #2
07068     07 00 00 FF 
0706c     40 E5 85 F1 | 	sub	objptr, ##3904
07070     F2 1E 02 F1 | 	add	local01, objptr
07074     04 12 06 F1 | 	add	arg01, #4
07078     09 13 02 FB | 	rdlong	arg01, arg01
0707c     10 1E 06 F1 | 	add	local01, #16
07080     0F 1F 02 FB | 	rdlong	local01, local01
07084     0F 13 52 F2 | 	cmps	arg01, local01 wc
07088     49 00 00 FF 
0708c     5C E4 85 F1 | 	sub	objptr, ##37468
07090     20 00 90 3D |  if_ae	jmp	#LR__0602
07094     50 00 00 FF 
07098     9C E5 05 F1 | 	add	objptr, ##41372
0709c     F2 24 02 FB | 	rdlong	local04, objptr
070a0     01 24 86 F1 | 	sub	local04, #1
070a4     F2 24 62 FC | 	wrlong	local04, objptr
070a8     50 00 00 FF 
070ac     9C E5 85 F1 | 	sub	objptr, ##41372
070b0     90 00 90 FD | 	jmp	#LR__0604
070b4                 | LR__0602
070b4                 | LR__0603
070b4     50 00 00 FF 
070b8     9C E5 05 F1 | 	add	objptr, ##41372
070bc     F2 1E 02 FB | 	rdlong	local01, objptr
070c0     0F 25 02 F6 | 	mov	local04, local01
070c4     02 24 66 F0 | 	shl	local04, #2
070c8     0F 25 02 F1 | 	add	local04, local01
070cc     02 24 66 F0 | 	shl	local04, #2
070d0     07 00 00 FF 
070d4     40 E5 85 F1 | 	sub	objptr, ##3904
070d8     F2 24 02 F1 | 	add	local04, objptr
070dc     12 25 02 FB | 	rdlong	local04, local04
070e0     07 00 00 FF 
070e4     18 E5 05 F1 | 	add	objptr, ##3864
070e8     F2 24 62 FC | 	wrlong	local04, objptr
070ec     28 E4 05 F1 | 	add	objptr, #40
070f0     F2 1E 02 FB | 	rdlong	local01, objptr
070f4     0F 25 02 F6 | 	mov	local04, local01
070f8     02 24 66 F0 | 	shl	local04, #2
070fc     0F 25 02 F1 | 	add	local04, local01
07100     02 24 66 F0 | 	shl	local04, #2
07104     07 00 00 FF 
07108     40 E5 85 F1 | 	sub	objptr, ##3904
0710c     F2 24 02 F1 | 	add	local04, objptr
07110     04 24 06 F1 | 	add	local04, #4
07114     12 25 02 FB | 	rdlong	local04, local04
07118     07 00 00 FF 
0711c     1C E5 05 F1 | 	add	objptr, ##3868
07120     F2 24 62 FC | 	wrlong	local04, objptr
07124     0F 00 00 FF 
07128     38 E5 85 F1 | 	sub	objptr, ##7992
0712c     F2 24 02 FB | 	rdlong	local04, objptr
07130     01 24 86 F1 | 	sub	local04, #1
07134     04 E4 05 F1 | 	add	objptr, #4
07138     F2 24 62 FC | 	wrlong	local04, objptr
0713c     41 00 00 FF 
07140     44 E4 85 F1 | 	sub	objptr, ##33348
07144                 | LR__0604
07144     A7 F0 03 F6 | 	mov	ptra, fp
07148     B2 00 A0 FD | 	call	#popregs_
0714c                 | _do_next_ret
0714c     2D 00 64 FD | 	ret
07150                 | 
07150                 | ' 
07150                 | ' 
07150                 | ' function compile_next() as ulong
07150                 | _compile_next
07150     04 4A 05 F6 | 	mov	COUNT_, #4
07154     A8 00 A0 FD | 	call	#pushregs_
07158     2E 00 00 FF 
0715c     08 E4 05 F1 | 	add	objptr, ##23560
07160     F2 12 02 FB | 	rdlong	arg01, objptr
07164     03 12 66 F0 | 	shl	arg01, #3
07168     02 00 00 FF 
0716c     38 E4 85 F1 | 	sub	objptr, ##1080
07170     F2 12 02 F1 | 	add	arg01, objptr
07174     09 1F 02 FB | 	rdlong	local01, arg01
07178                 | ' 
07178                 | ' varname$=lparts(ct).part$ 
07178                 | ' 'suffix$=right$(varname$,1)
07178                 | ' 'if varname$="" orelse suffix$="$" orelse suffix$="!" orelse suffix$="#" then  compile_error(34) : printerror(34) : return 34
07178                 | ' if varnum=0 then compile_error(35)  : return 35
07178     04 E4 85 F1 | 	sub	objptr, #4
0717c     F2 14 0A FB | 	rdlong	arg02, objptr wz
07180     2B 00 00 FF 
07184     CC E5 85 F1 | 	sub	objptr, ##22476
07188     10 00 90 5D |  if_ne	jmp	#LR__0610
0718c     23 12 06 F6 | 	mov	arg01, #35
07190     4C E0 BF FD | 	call	#_compile_error
07194     23 FA 05 F6 | 	mov	result1, #35
07198     58 01 90 FD | 	jmp	#LR__0614
0719c                 | LR__0610
0719c     01 20 66 F6 | 	neg	local02, #1
071a0                 | ' j=-1
071a0                 | ' for i=0 to varnum-1
071a0     00 22 06 F6 | 	mov	local03, #0
071a4     2B 00 00 FF 
071a8     CC E5 05 F1 | 	add	objptr, ##22476
071ac     F2 24 02 FB | 	rdlong	local04, objptr
071b0     2B 00 00 FF 
071b4     CC E5 85 F1 | 	sub	objptr, ##22476
071b8                 | LR__0611
071b8     12 23 12 F2 | 	cmp	local03, local04 wc
071bc     38 00 90 3D |  if_ae	jmp	#LR__0612
071c0                 | '   if variables(i).name=varname$ then j=i : exit
071c0     11 15 02 F6 | 	mov	arg02, local03
071c4     04 14 66 F0 | 	shl	arg02, #4
071c8     0B 00 00 FF 
071cc     CC E5 05 F1 | 	add	objptr, ##6092
071d0     F2 14 02 F1 | 	add	arg02, objptr
071d4     0A 13 02 FB | 	rdlong	arg01, arg02
071d8     0F 15 02 F6 | 	mov	arg02, local01
071dc     0B 00 00 FF 
071e0     CC E5 85 F1 | 	sub	objptr, ##6092
071e4     38 F1 B0 FD | 	call	#__system___string_cmp
071e8     00 FA 0D F2 | 	cmp	result1, #0 wz
071ec     11 21 02 A6 |  if_e	mov	local02, local03
071f0     01 22 06 51 |  if_ne	add	local03, #1
071f4     C0 FF 9F 5D |  if_ne	jmp	#LR__0611
071f8                 | LR__0612
071f8                 | ' if j=-1 then compile_error(35) : return 35
071f8     FF FF 7F FF 
071fc     FF 21 0E F2 | 	cmp	local02, ##-1 wz
07200     10 00 90 5D |  if_ne	jmp	#LR__0613
07204     23 12 06 F6 | 	mov	arg01, #35
07208     D4 DF BF FD | 	call	#_compile_error
0720c     23 FA 05 F6 | 	mov	result1, #35
07210     E0 00 90 FD | 	jmp	#LR__0614
07214                 | LR__0613
07214     41 00 00 FF 
07218     40 E4 05 F1 | 	add	objptr, ##33344
0721c     F2 24 02 FB | 	rdlong	local04, objptr
07220     12 23 02 F6 | 	mov	local03, local04
07224     01 22 66 F0 | 	shl	local03, #1
07228     12 23 02 F1 | 	add	local03, local04
0722c     02 22 66 F0 | 	shl	local03, #2
07230     03 00 00 FF 
07234     00 E4 85 F1 | 	sub	objptr, ##1536
07238     F2 22 02 F1 | 	add	local03, objptr
0723c     08 22 06 F1 | 	add	local03, #8
07240     11 39 68 FC | 	wrlong	#28, local03
07244     03 00 00 FF 
07248     00 E4 05 F1 | 	add	objptr, ##1536
0724c     F2 24 02 FB | 	rdlong	local04, objptr
07250     12 23 02 F6 | 	mov	local03, local04
07254     01 22 66 F0 | 	shl	local03, #1
07258     12 23 02 F1 | 	add	local03, local04
0725c     02 22 66 F0 | 	shl	local03, #2
07260     03 00 00 FF 
07264     00 E4 85 F1 | 	sub	objptr, ##1536
07268     F2 22 02 F1 | 	add	local03, objptr
0726c     11 21 62 FC | 	wrlong	local02, local03
07270     03 00 00 FF 
07274     00 E4 05 F1 | 	add	objptr, ##1536
07278     F2 24 02 FB | 	rdlong	local04, objptr
0727c     01 24 06 F1 | 	add	local04, #1
07280     F2 24 62 FC | 	wrlong	local04, objptr
07284     12 23 02 F6 | 	mov	local03, local04
07288     01 22 66 F0 | 	shl	local03, #1
0728c     12 23 02 F1 | 	add	local03, local04
07290     02 22 66 F0 | 	shl	local03, #2
07294     03 00 00 FF 
07298     00 E4 85 F1 | 	sub	objptr, ##1536
0729c     F2 22 02 F1 | 	add	local03, objptr
072a0     08 22 06 F1 | 	add	local03, #8
072a4     11 97 68 FC | 	wrlong	#75, local03
072a8     03 00 00 FF 
072ac     00 E4 05 F1 | 	add	objptr, ##1536
072b0     F2 24 02 FB | 	rdlong	local04, objptr
072b4     12 23 02 F6 | 	mov	local03, local04
072b8     01 22 66 F0 | 	shl	local03, #1
072bc     12 23 02 F1 | 	add	local03, local04
072c0     02 22 66 F0 | 	shl	local03, #2
072c4     03 00 00 FF 
072c8     00 E4 85 F1 | 	sub	objptr, ##1536
072cc     F2 22 02 F1 | 	add	local03, objptr
072d0     11 01 68 FC | 	wrlong	#0, local03
072d4     03 00 00 FF 
072d8     00 E4 05 F1 | 	add	objptr, ##1536
072dc     F2 24 02 FB | 	rdlong	local04, objptr
072e0     01 24 06 F1 | 	add	local04, #1
072e4     F2 24 62 FC | 	wrlong	local04, objptr
072e8     41 00 00 FF 
072ec     40 E4 85 F1 | 	sub	objptr, ##33344
072f0                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
072f0                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
072f0                 | ' return 0
072f0     00 FA 05 F6 | 	mov	result1, #0
072f4                 | LR__0614
072f4     A7 F0 03 F6 | 	mov	ptra, fp
072f8     B2 00 A0 FD | 	call	#popregs_
072fc                 | _compile_next_ret
072fc     2D 00 64 FD | 	ret
07300                 | 
07300                 | ' 
07300                 | ' 
07300                 | ' ' next: we  have to find the variable in the table, compile pushvar, then next
07300                 | ' ' do_for: push its own pointer, varnum, step, end on the for stack. var init is already compiled before
07300                 | ' ' do_next: find the entry with the varnum. Add step to varnum. Compare to the end. If step>0, check >, else check <. If not end, goto forptr (how?) 
07300                 | ' 
07300                 | ' 
07300                 | ' function compile_goto( ) as ulong
07300                 | _compile_goto
07300     03 4A 05 F6 | 	mov	COUNT_, #3
07304     A8 00 A0 FD | 	call	#pushregs_
07308     28 F0 07 F1 | 	add	ptra, #40
0730c                 | ' 
0730c                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 
0730c     2E 00 00 FF 
07310     08 E4 05 F1 | 	add	objptr, ##23560
07314     F2 16 02 FB | 	rdlong	arg03, objptr
07318     03 16 66 F0 | 	shl	arg03, #3
0731c     02 00 00 FF 
07320     38 E4 85 F1 | 	sub	objptr, ##1080
07324     F2 16 02 F1 | 	add	arg03, objptr
07328     04 16 06 F1 | 	add	arg03, #4
0732c     0B 17 02 FB | 	rdlong	arg03, arg03
07330     01 00 00 FF 
07334     00 16 0E F2 | 	cmp	arg03, ##512 wz
07338     2B 00 00 FF 
0733c     D0 E5 85 F1 | 	sub	objptr, ##22480
07340     CC 02 90 5D |  if_ne	jmp	#LR__0625
07344     2E 00 00 FF 
07348     08 E4 05 F1 | 	add	objptr, ##23560
0734c     F2 16 02 FB | 	rdlong	arg03, objptr
07350     01 16 06 F1 | 	add	arg03, #1
07354     03 16 66 F0 | 	shl	arg03, #3
07358     02 00 00 FF 
0735c     38 E4 85 F1 | 	sub	objptr, ##1080
07360     F2 16 02 F1 | 	add	arg03, objptr
07364     04 16 06 F1 | 	add	arg03, #4
07368     0B 17 02 FB | 	rdlong	arg03, arg03
0736c     FE 17 0E F2 | 	cmp	arg03, #510 wz
07370     2B 00 00 FF 
07374     D0 E5 85 F1 | 	sub	objptr, ##22480
07378     94 02 90 5D |  if_ne	jmp	#LR__0625
0737c     2E 00 00 FF 
07380     08 E4 05 F1 | 	add	objptr, ##23560
07384     F2 16 02 FB | 	rdlong	arg03, objptr
07388     03 16 66 F0 | 	shl	arg03, #3
0738c     02 00 00 FF 
07390     38 E4 85 F1 | 	sub	objptr, ##1080
07394     F2 16 02 F1 | 	add	arg03, objptr
07398     0B 13 02 FB | 	rdlong	arg01, arg03
0739c     00 14 06 F6 | 	mov	arg02, #0
073a0     2B 00 00 FF 
073a4     D0 E5 85 F1 | 	sub	objptr, ##22480
073a8     D4 1E B1 FD | 	call	#__system____builtin_atoi
073ac     04 4E 05 F1 | 	add	fp, #4
073b0     A7 FA 61 FC | 	wrlong	result1, fp
073b4     41 00 00 FF 
073b8     40 E4 05 F1 | 	add	objptr, ##33344
073bc     F2 1E 02 FB | 	rdlong	local01, objptr
073c0     0F 21 02 F6 | 	mov	local02, local01
073c4     01 20 66 F0 | 	shl	local02, #1
073c8     0F 21 02 F1 | 	add	local02, local01
073cc     02 20 66 F0 | 	shl	local02, #2
073d0     03 00 00 FF 
073d4     00 E4 85 F1 | 	sub	objptr, ##1536
073d8     F2 20 02 F1 | 	add	local02, objptr
073dc     08 20 06 F1 | 	add	local02, #8
073e0     10 9D 68 FC | 	wrlong	#78, local02
073e4     03 00 00 FF 
073e8     08 E4 05 F1 | 	add	objptr, ##1544
073ec     F2 22 02 FB | 	rdlong	local03, objptr
073f0     41 00 00 FF 
073f4     48 E4 85 F1 | 	sub	objptr, ##33352
073f8     04 4E 05 F1 | 	add	fp, #4
073fc     A7 22 62 FC | 	wrlong	local03, fp
07400     08 4E 85 F1 | 	sub	fp, #8
07404                 | ' 
07404                 | '   gotoline=val%(lparts(ct).part$) 
07404                 | '   compiledline(lineptr).result_type=token_fast_goto
07404                 | ' ' now find a pointer to goto
07404                 | '   gotoptr=programstart
07404                 | '   do
07404                 | LR__0620
07404     10 4E 05 F1 | 	add	fp, #16
07408     A7 12 02 F6 | 	mov	arg01, fp
0740c     08 4E 85 F1 | 	sub	fp, #8
07410     A7 14 02 FB | 	rdlong	arg02, fp
07414     08 4E 85 F1 | 	sub	fp, #8
07418     18 16 06 F6 | 	mov	arg03, #24
0741c     0B 00 00 FF 
07420     C0 E4 05 F1 | 	add	objptr, ##5824
07424     E4 E3 B0 FD | 	call	#_psram_spin2_read1
07428     0B 00 00 FF 
0742c     C0 E4 85 F1 | 	sub	objptr, ##5824
07430                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
07430                 | '     if gotoheader(0)<>$FFFFFFFF then
07430     10 4E 05 F1 | 	add	fp, #16
07434     A7 22 02 FB | 	rdlong	local03, fp
07438     10 4E 85 F1 | 	sub	fp, #16
0743c     FF FF 7F FF 
07440     FF 23 0E F2 | 	cmp	local03, ##-1 wz
07444     24 00 90 AD |  if_e	jmp	#LR__0621
07448     08 4E 05 F1 | 	add	fp, #8
0744c     A7 22 02 FB | 	rdlong	local03, fp
07450     04 4E 05 F1 | 	add	fp, #4
07454     A7 22 62 FC | 	wrlong	local03, fp
07458     18 4E 05 F1 | 	add	fp, #24
0745c     A7 22 02 FB | 	rdlong	local03, fp
07460     1C 4E 85 F1 | 	sub	fp, #28
07464     A7 22 62 FC | 	wrlong	local03, fp
07468     08 4E 85 F1 | 	sub	fp, #8
0746c                 | LR__0621
0746c     24 4E 05 F1 | 	add	fp, #36
07470     A7 22 02 FB | 	rdlong	local03, fp
07474     24 4E 85 F1 | 	sub	fp, #36
07478     FF FF 3F FF 
0747c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
07480     10 4E 05 51 |  if_ne	add	fp, #16
07484     A7 1E 02 5B |  if_ne	rdlong	local01, fp
07488     10 4E 85 51 |  if_ne	sub	fp, #16
0748c     FF FF 7F 5F 
07490     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
07494     1C 00 90 AD |  if_e	jmp	#LR__0622
07498     10 4E 05 F1 | 	add	fp, #16
0749c     A7 22 02 FB | 	rdlong	local03, fp
074a0     0C 4E 85 F1 | 	sub	fp, #12
074a4     A7 20 02 FB | 	rdlong	local02, fp
074a8     04 4E 85 F1 | 	sub	fp, #4
074ac     10 23 0A F2 | 	cmp	local03, local02 wz
074b0     50 FF 9F 5D |  if_ne	jmp	#LR__0620
074b4                 | LR__0622
074b4                 | '   if gotoheader(0)=gotoline then
074b4     10 4E 05 F1 | 	add	fp, #16
074b8     A7 22 02 FB | 	rdlong	local03, fp
074bc     0C 4E 85 F1 | 	sub	fp, #12
074c0     A7 1E 02 FB | 	rdlong	local01, fp
074c4     04 4E 85 F1 | 	sub	fp, #4
074c8     0F 23 0A F2 | 	cmp	local03, local01 wz
074cc     7C 00 90 5D |  if_ne	jmp	#LR__0623
074d0     41 00 00 FF 
074d4     40 E4 05 F1 | 	add	objptr, ##33344
074d8     F2 1E 02 FB | 	rdlong	local01, objptr
074dc     0F 21 02 F6 | 	mov	local02, local01
074e0     01 20 66 F0 | 	shl	local02, #1
074e4     0F 21 02 F1 | 	add	local02, local01
074e8     02 20 66 F0 | 	shl	local02, #2
074ec     03 00 00 FF 
074f0     00 E4 85 F1 | 	sub	objptr, ##1536
074f4     F2 20 02 F1 | 	add	local02, objptr
074f8     0C 4E 05 F1 | 	add	fp, #12
074fc     A7 22 02 FB | 	rdlong	local03, fp
07500     10 23 62 FC | 	wrlong	local03, local02
07504     03 00 00 FF 
07508     00 E4 05 F1 | 	add	objptr, ##1536
0750c     F2 1E 02 FB | 	rdlong	local01, objptr
07510     0F 21 02 F6 | 	mov	local02, local01
07514     01 20 66 F0 | 	shl	local02, #1
07518     0F 21 02 F1 | 	add	local02, local01
0751c     02 20 66 F0 | 	shl	local02, #2
07520     03 00 00 FF 
07524     00 E4 85 F1 | 	sub	objptr, ##1536
07528     F2 20 02 F1 | 	add	local02, objptr
0752c     08 4E 85 F1 | 	sub	fp, #8
07530     A7 22 02 FB | 	rdlong	local03, fp
07534     04 4E 85 F1 | 	sub	fp, #4
07538     04 20 06 F1 | 	add	local02, #4
0753c     10 23 62 FC | 	wrlong	local03, local02
07540     3E 00 00 FF 
07544     40 E4 85 F1 | 	sub	objptr, ##31808
07548     A4 00 90 FD | 	jmp	#LR__0624
0754c                 | LR__0623
0754c     41 00 00 FF 
07550     40 E4 05 F1 | 	add	objptr, ##33344
07554     F2 1E 02 FB | 	rdlong	local01, objptr
07558     0F 21 02 F6 | 	mov	local02, local01
0755c     01 20 66 F0 | 	shl	local02, #1
07560     0F 21 02 F1 | 	add	local02, local01
07564     02 20 66 F0 | 	shl	local02, #2
07568     03 00 00 FF 
0756c     00 E4 85 F1 | 	sub	objptr, ##1536
07570     F2 20 02 F1 | 	add	local02, objptr
07574     00 00 C0 FF 
07578     10 01 68 FC | 	wrlong	##-2147483648, local02
0757c     03 00 00 FF 
07580     00 E4 05 F1 | 	add	objptr, ##1536
07584     F2 1E 02 FB | 	rdlong	local01, objptr
07588     0F 21 02 F6 | 	mov	local02, local01
0758c     01 20 66 F0 | 	shl	local02, #1
07590     0F 21 02 F1 | 	add	local02, local01
07594     02 20 66 F0 | 	shl	local02, #2
07598     03 00 00 FF 
0759c     00 E4 85 F1 | 	sub	objptr, ##1536
075a0     F2 20 02 F1 | 	add	local02, objptr
075a4     04 4E 05 F1 | 	add	fp, #4
075a8     A7 22 02 FB | 	rdlong	local03, fp
075ac     04 4E 85 F1 | 	sub	fp, #4
075b0     04 20 06 F1 | 	add	local02, #4
075b4     10 23 62 FC | 	wrlong	local03, local02
075b8     03 00 00 FF 
075bc     00 E4 05 F1 | 	add	objptr, ##1536
075c0     F2 1E 02 FB | 	rdlong	local01, objptr
075c4     0F 21 02 F6 | 	mov	local02, local01
075c8     01 20 66 F0 | 	shl	local02, #1
075cc     0F 21 02 F1 | 	add	local02, local01
075d0     02 20 66 F0 | 	shl	local02, #2
075d4     03 00 00 FF 
075d8     00 E4 85 F1 | 	sub	objptr, ##1536
075dc     F2 20 02 F1 | 	add	local02, objptr
075e0     08 20 06 F1 | 	add	local02, #8
075e4     10 A7 68 FC | 	wrlong	#83, local02
075e8     3E 00 00 FF 
075ec     40 E4 85 F1 | 	sub	objptr, ##31808
075f0                 | LR__0624
075f0     41 00 00 FF 
075f4     40 E4 05 F1 | 	add	objptr, ##33344
075f8     F2 22 02 FB | 	rdlong	local03, objptr
075fc     01 22 06 F1 | 	add	local03, #1
07600     F2 22 62 FC | 	wrlong	local03, objptr
07604     41 00 00 FF 
07608     40 E4 85 F1 | 	sub	objptr, ##33344
0760c     40 00 90 FD | 	jmp	#LR__0626
07610                 | LR__0625
07610                 | '    print "We have a slow goto, todo  "
07610     00 12 06 F6 | 	mov	arg01, #0
07614     90 41 B1 FD | 	call	#__system___getiolock_0372
07618     FD 12 02 F6 | 	mov	arg01, result1
0761c     D8 EC B0 FD | 	call	#__system___lockmem
07620     2B 01 00 FF 
07624     AE 14 06 F6 | 	mov	arg02, ##@LR__4309
07628     00 12 06 F6 | 	mov	arg01, #0
0762c     00 16 06 F6 | 	mov	arg03, #0
07630     B8 F9 B0 FD | 	call	#__system___basic_print_string
07634     00 12 06 F6 | 	mov	arg01, #0
07638     0A 14 06 F6 | 	mov	arg02, #10
0763c     00 16 06 F6 | 	mov	arg03, #0
07640     50 F9 B0 FD | 	call	#__system___basic_print_char
07644     00 12 06 F6 | 	mov	arg01, #0
07648     5C 41 B1 FD | 	call	#__system___getiolock_0372
0764c     FD 00 68 FC | 	wrlong	#0, result1
07650                 | LR__0626
07650                 | ' ' if not, there is a slow goto. Call converttoint to get an int value from expression, then do_slow_goto
07650                 | ' ' Do_slow_goto searches a line pointer list to find the linenum and pointer, then do the goto  
07650                 | ' return 0
07650     00 FA 05 F6 | 	mov	result1, #0
07654     A7 F0 03 F6 | 	mov	ptra, fp
07658     B2 00 A0 FD | 	call	#popregs_
0765c                 | _compile_goto_ret
0765c     2D 00 64 FD | 	ret
07660                 | 
07660                 | ' 
07660                 | ' 
07660                 | ' 
07660                 | ' 
07660                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07660                 | ' '------------------------------ End of the precompiler  --------------------------------------------------------------------------------
07660                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07660                 | ' 
07660                 | ' 
07660                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07660                 | ' '---------------------------- Compile time expression decoder/evaluator ----------------------------------------------------------------
07660                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07660                 | ' 
07660                 | ' 
07660                 | ' function expr() as integer 
07660                 | _expr
07660     07 4A 05 F6 | 	mov	COUNT_, #7
07664     A8 00 A0 FD | 	call	#pushregs_
07668                 | _expr_enter
07668     2E 00 00 FF 
0766c     08 E4 05 F1 | 	add	objptr, ##23560
07670     F2 24 02 FB | 	rdlong	local04, objptr
07674     03 24 66 F0 | 	shl	local04, #3
07678     02 00 00 FF 
0767c     38 E4 85 F1 | 	sub	objptr, ##1080
07680     F2 24 02 F1 | 	add	local04, objptr
07684     04 24 06 F1 | 	add	local04, #4
07688     12 27 02 FB | 	rdlong	local05, local04
0768c                 | ' 
0768c                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0768c     FE 27 0E F2 | 	cmp	local05, #510 wz
07690     2B 00 00 FF 
07694     D0 E5 85 F1 | 	sub	objptr, ##22480
07698     C4 00 90 5D |  if_ne	jmp	#LR__0630
0769c     1D 1E 06 F6 | 	mov	local01, #29
076a0     FF 22 06 F6 | 	mov	local03, #255
076a4     0F 29 02 F6 | 	mov	local06, local01
076a8     10 2B 02 F6 | 	mov	local07, local02
076ac     11 1F 02 F6 | 	mov	local01, local03
076b0     41 00 00 FF 
076b4     40 E4 05 F1 | 	add	objptr, ##33344
076b8     F2 26 02 FB | 	rdlong	local05, objptr
076bc     13 25 02 F6 | 	mov	local04, local05
076c0     01 24 66 F0 | 	shl	local04, #1
076c4     13 25 02 F1 | 	add	local04, local05
076c8     02 24 66 F0 | 	shl	local04, #2
076cc     03 00 00 FF 
076d0     00 E4 85 F1 | 	sub	objptr, ##1536
076d4     F2 24 02 F1 | 	add	local04, objptr
076d8     12 29 62 FC | 	wrlong	local06, local04
076dc     03 00 00 FF 
076e0     00 E4 05 F1 | 	add	objptr, ##1536
076e4     F2 28 02 FB | 	rdlong	local06, objptr
076e8     14 27 02 F6 | 	mov	local05, local06
076ec     01 26 66 F0 | 	shl	local05, #1
076f0     14 27 02 F1 | 	add	local05, local06
076f4     02 26 66 F0 | 	shl	local05, #2
076f8     03 00 00 FF 
076fc     00 E4 85 F1 | 	sub	objptr, ##1536
07700     F2 26 02 F1 | 	add	local05, objptr
07704     04 26 06 F1 | 	add	local05, #4
07708     13 2B 62 FC | 	wrlong	local07, local05
0770c     03 00 00 FF 
07710     00 E4 05 F1 | 	add	objptr, ##1536
07714     F2 2A 02 FB | 	rdlong	local07, objptr
07718     15 29 02 F6 | 	mov	local06, local07
0771c     01 28 66 F0 | 	shl	local06, #1
07720     15 29 02 F1 | 	add	local06, local07
07724     02 28 66 F0 | 	shl	local06, #2
07728     03 00 00 FF 
0772c     00 E4 85 F1 | 	sub	objptr, ##1536
07730     F2 28 02 F1 | 	add	local06, objptr
07734     08 28 06 F1 | 	add	local06, #8
07738     14 1F 62 FC | 	wrlong	local01, local06
0773c     03 00 00 FF 
07740     00 E4 05 F1 | 	add	objptr, ##1536
07744     F2 28 02 FB | 	rdlong	local06, objptr
07748     01 28 06 F1 | 	add	local06, #1
0774c     F2 28 62 FC | 	wrlong	local06, objptr
07750     41 00 00 FF 
07754     40 E4 85 F1 | 	sub	objptr, ##33344
07758     1D FA 05 F6 | 	mov	result1, #29
0775c     54 01 90 FD | 	jmp	#LR__0633
07760                 | LR__0630
07760     00 1E 06 F6 | 	mov	local01, #0
07764     58 01 B0 FD | 	call	#_addsub
07768     2E 00 00 FF 
0776c     08 E4 05 F1 | 	add	objptr, ##23560
07770     F2 24 02 FB | 	rdlong	local04, objptr
07774     03 24 66 F0 | 	shl	local04, #3
07778     02 00 00 FF 
0777c     38 E4 85 F1 | 	sub	objptr, ##1080
07780     F2 24 02 F1 | 	add	local04, objptr
07784     04 24 06 F1 | 	add	local04, #4
07788     12 27 02 FB | 	rdlong	local05, local04
0778c                 | ' t3.result.uresult=0
0778c                 | ' rt=addsub()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
0778c                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
0778c                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0778c     2B 00 00 FF 
07790     D0 E5 85 F1 | 	sub	objptr, ##22480
07794                 | LR__0631
07794     1B 26 0E F2 | 	cmp	local05, #27 wz
07798     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
0779c     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
077a0     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
077a4     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
077a8     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
077ac     00 01 90 5D |  if_ne	jmp	#LR__0632
077b0     2E 00 00 FF 
077b4     08 E4 05 F1 | 	add	objptr, ##23560
077b8     F2 28 02 FB | 	rdlong	local06, objptr
077bc     01 28 06 F1 | 	add	local06, #1
077c0     F2 28 62 FC | 	wrlong	local06, objptr
077c4     2E 00 00 FF 
077c8     08 E4 85 F1 | 	sub	objptr, ##23560
077cc     F0 00 B0 FD | 	call	#_addsub
077d0     13 23 02 F6 | 	mov	local03, local05
077d4     0F 29 02 F6 | 	mov	local06, local01
077d8     10 2B 02 F6 | 	mov	local07, local02
077dc     11 27 02 F6 | 	mov	local05, local03
077e0     41 00 00 FF 
077e4     40 E4 05 F1 | 	add	objptr, ##33344
077e8     F2 24 02 FB | 	rdlong	local04, objptr
077ec     12 FB 01 F6 | 	mov	result1, local04
077f0     01 FA 65 F0 | 	shl	result1, #1
077f4     12 FB 01 F1 | 	add	result1, local04
077f8     02 FA 65 F0 | 	shl	result1, #2
077fc     03 00 00 FF 
07800     00 E4 85 F1 | 	sub	objptr, ##1536
07804     F2 FA 01 F1 | 	add	result1, objptr
07808     FD 28 62 FC | 	wrlong	local06, result1
0780c     03 00 00 FF 
07810     00 E4 05 F1 | 	add	objptr, ##1536
07814     F2 28 02 FB | 	rdlong	local06, objptr
07818     14 25 02 F6 | 	mov	local04, local06
0781c     01 24 66 F0 | 	shl	local04, #1
07820     14 25 02 F1 | 	add	local04, local06
07824     02 24 66 F0 | 	shl	local04, #2
07828     03 00 00 FF 
0782c     00 E4 85 F1 | 	sub	objptr, ##1536
07830     F2 24 02 F1 | 	add	local04, objptr
07834     04 24 06 F1 | 	add	local04, #4
07838     12 2B 62 FC | 	wrlong	local07, local04
0783c     03 00 00 FF 
07840     00 E4 05 F1 | 	add	objptr, ##1536
07844     F2 2A 02 FB | 	rdlong	local07, objptr
07848     15 29 02 F6 | 	mov	local06, local07
0784c     01 28 66 F0 | 	shl	local06, #1
07850     15 29 02 F1 | 	add	local06, local07
07854     02 28 66 F0 | 	shl	local06, #2
07858     03 00 00 FF 
0785c     00 E4 85 F1 | 	sub	objptr, ##1536
07860     F2 28 02 F1 | 	add	local06, objptr
07864     08 28 06 F1 | 	add	local06, #8
07868     14 27 62 FC | 	wrlong	local05, local06
0786c     03 00 00 FF 
07870     00 E4 05 F1 | 	add	objptr, ##1536
07874     F2 28 02 FB | 	rdlong	local06, objptr
07878     01 28 06 F1 | 	add	local06, #1
0787c     F2 28 62 FC | 	wrlong	local06, objptr
07880     13 00 00 FF 
07884     38 E4 85 F1 | 	sub	objptr, ##9784
07888     F2 24 02 FB | 	rdlong	local04, objptr
0788c     03 24 66 F0 | 	shl	local04, #3
07890     02 00 00 FF 
07894     38 E4 85 F1 | 	sub	objptr, ##1080
07898     F2 24 02 F1 | 	add	local04, objptr
0789c     04 24 06 F1 | 	add	local04, #4
078a0     12 27 02 FB | 	rdlong	local05, local04
078a4     2B 00 00 FF 
078a8     D0 E5 85 F1 | 	sub	objptr, ##22480
078ac     E4 FE 9F FD | 	jmp	#LR__0631
078b0                 | LR__0632
078b0                 | ' return 0  
078b0     00 FA 05 F6 | 	mov	result1, #0
078b4                 | LR__0633
078b4     A7 F0 03 F6 | 	mov	ptra, fp
078b8     B2 00 A0 FD | 	call	#popregs_
078bc                 | _expr_ret
078bc     2D 00 64 FD | 	ret
078c0                 | 
078c0                 | ' 
078c0                 | ' 
078c0                 | ' '' todo: use propre ops. At getvar and getconst level we know the rt. If both are ints, do int op. If one are float, compile converttofloat, do float op. If both strings, call string op. If string ant int combined, compile err
078c0                 | ' 
078c0                 | ' function addsub() as integer 
078c0                 | _addsub
078c0     07 4A 05 F6 | 	mov	COUNT_, #7
078c4     A8 00 A0 FD | 	call	#pushregs_
078c8                 | _addsub_enter
078c8     00 1E 06 F6 | 	mov	local01, #0
078cc     50 01 B0 FD | 	call	#_muldiv
078d0     2E 00 00 FF 
078d4     08 E4 05 F1 | 	add	objptr, ##23560
078d8     F2 24 02 FB | 	rdlong	local04, objptr
078dc     03 24 66 F0 | 	shl	local04, #3
078e0     02 00 00 FF 
078e4     38 E4 85 F1 | 	sub	objptr, ##1080
078e8     F2 24 02 F1 | 	add	local04, objptr
078ec     04 24 06 F1 | 	add	local04, #4
078f0     12 27 02 FB | 	rdlong	local05, local04
078f4                 | ' t3.result.uresult=0
078f4                 | ' muldiv()             			' call higher priority operator check. It will itself call getval/getvar if no multiplies or divides
078f4                 | ' op = lparts(ct).token				' that idea is from github adamdunkels/ubasic
078f4                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
078f4     2B 00 00 FF 
078f8     D0 E5 85 F1 | 	sub	objptr, ##22480
078fc                 | LR__0640
078fc     01 26 0E F2 | 	cmp	local05, #1 wz
07900     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
07904     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
07908     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
0790c     00 01 90 5D |  if_ne	jmp	#LR__0641
07910     2E 00 00 FF 
07914     08 E4 05 F1 | 	add	objptr, ##23560
07918     F2 24 02 FB | 	rdlong	local04, objptr
0791c     01 24 06 F1 | 	add	local04, #1
07920     F2 24 62 FC | 	wrlong	local04, objptr
07924     2E 00 00 FF 
07928     08 E4 85 F1 | 	sub	objptr, ##23560
0792c     F0 00 B0 FD | 	call	#_muldiv
07930     13 23 02 F6 | 	mov	local03, local05
07934     0F 29 02 F6 | 	mov	local06, local01
07938     10 2B 02 F6 | 	mov	local07, local02
0793c     11 27 02 F6 | 	mov	local05, local03
07940     41 00 00 FF 
07944     40 E4 05 F1 | 	add	objptr, ##33344
07948     F2 24 02 FB | 	rdlong	local04, objptr
0794c     12 FB 01 F6 | 	mov	result1, local04
07950     01 FA 65 F0 | 	shl	result1, #1
07954     12 FB 01 F1 | 	add	result1, local04
07958     02 FA 65 F0 | 	shl	result1, #2
0795c     03 00 00 FF 
07960     00 E4 85 F1 | 	sub	objptr, ##1536
07964     F2 FA 01 F1 | 	add	result1, objptr
07968     FD 28 62 FC | 	wrlong	local06, result1
0796c     03 00 00 FF 
07970     00 E4 05 F1 | 	add	objptr, ##1536
07974     F2 28 02 FB | 	rdlong	local06, objptr
07978     14 25 02 F6 | 	mov	local04, local06
0797c     01 24 66 F0 | 	shl	local04, #1
07980     14 25 02 F1 | 	add	local04, local06
07984     02 24 66 F0 | 	shl	local04, #2
07988     03 00 00 FF 
0798c     00 E4 85 F1 | 	sub	objptr, ##1536
07990     F2 24 02 F1 | 	add	local04, objptr
07994     04 24 06 F1 | 	add	local04, #4
07998     12 2B 62 FC | 	wrlong	local07, local04
0799c     03 00 00 FF 
079a0     00 E4 05 F1 | 	add	objptr, ##1536
079a4     F2 2A 02 FB | 	rdlong	local07, objptr
079a8     15 29 02 F6 | 	mov	local06, local07
079ac     01 28 66 F0 | 	shl	local06, #1
079b0     15 29 02 F1 | 	add	local06, local07
079b4     02 28 66 F0 | 	shl	local06, #2
079b8     03 00 00 FF 
079bc     00 E4 85 F1 | 	sub	objptr, ##1536
079c0     F2 28 02 F1 | 	add	local06, objptr
079c4     08 28 06 F1 | 	add	local06, #8
079c8     14 27 62 FC | 	wrlong	local05, local06
079cc     03 00 00 FF 
079d0     00 E4 05 F1 | 	add	objptr, ##1536
079d4     F2 28 02 FB | 	rdlong	local06, objptr
079d8     01 28 06 F1 | 	add	local06, #1
079dc     F2 28 62 FC | 	wrlong	local06, objptr
079e0     13 00 00 FF 
079e4     38 E4 85 F1 | 	sub	objptr, ##9784
079e8     F2 24 02 FB | 	rdlong	local04, objptr
079ec     03 24 66 F0 | 	shl	local04, #3
079f0     02 00 00 FF 
079f4     38 E4 85 F1 | 	sub	objptr, ##1080
079f8     F2 24 02 F1 | 	add	local04, objptr
079fc     04 24 06 F1 | 	add	local04, #4
07a00     12 27 02 FB | 	rdlong	local05, local04
07a04     2B 00 00 FF 
07a08     D0 E5 85 F1 | 	sub	objptr, ##22480
07a0c     EC FE 9F FD | 	jmp	#LR__0640
07a10                 | LR__0641
07a10                 | '   return 0
07a10     00 FA 05 F6 | 	mov	result1, #0
07a14     A7 F0 03 F6 | 	mov	ptra, fp
07a18     B2 00 A0 FD | 	call	#popregs_
07a1c                 | _addsub_ret
07a1c     2D 00 64 FD | 	ret
07a20                 | 
07a20                 | ' 
07a20                 | ' sub muldiv()
07a20                 | _muldiv
07a20     08 4A 05 F6 | 	mov	COUNT_, #8
07a24     A8 00 A0 FD | 	call	#pushregs_
07a28                 | _muldiv_enter
07a28     00 1E 06 F6 | 	mov	local01, #0
07a2c     58 01 B0 FD | 	call	#_getvalue
07a30     2E 00 00 FF 
07a34     08 E4 05 F1 | 	add	objptr, ##23560
07a38     F2 24 02 FB | 	rdlong	local04, objptr
07a3c     03 24 66 F0 | 	shl	local04, #3
07a40     02 00 00 FF 
07a44     38 E4 85 F1 | 	sub	objptr, ##1080
07a48     F2 24 02 F1 | 	add	local04, objptr
07a4c     04 24 06 F1 | 	add	local04, #4
07a50     12 27 02 FB | 	rdlong	local05, local04
07a54                 | ' t3.result.uresult=0
07a54                 | ' getvalue()    
07a54                 | ' op = lparts(ct).token
07a54                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
07a54     2B 00 00 FF 
07a58     D0 E5 85 F1 | 	sub	objptr, ##22480
07a5c                 | LR__0650
07a5c     05 26 0E F2 | 	cmp	local05, #5 wz
07a60     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
07a64     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
07a68     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
07a6c     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
07a70     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
07a74     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
07a78     00 01 90 5D |  if_ne	jmp	#LR__0651
07a7c     2E 00 00 FF 
07a80     08 E4 05 F1 | 	add	objptr, ##23560
07a84     F2 24 02 FB | 	rdlong	local04, objptr
07a88     01 24 06 F1 | 	add	local04, #1
07a8c     F2 24 62 FC | 	wrlong	local04, objptr
07a90     2E 00 00 FF 
07a94     08 E4 85 F1 | 	sub	objptr, ##23560
07a98     EC 00 B0 FD | 	call	#_getvalue
07a9c     13 23 02 F6 | 	mov	local03, local05
07aa0     0F 29 02 F6 | 	mov	local06, local01
07aa4     10 2B 02 F6 | 	mov	local07, local02
07aa8     11 27 02 F6 | 	mov	local05, local03
07aac     41 00 00 FF 
07ab0     40 E4 05 F1 | 	add	objptr, ##33344
07ab4     F2 24 02 FB | 	rdlong	local04, objptr
07ab8     12 2D 02 F6 | 	mov	local08, local04
07abc     01 2C 66 F0 | 	shl	local08, #1
07ac0     12 2D 02 F1 | 	add	local08, local04
07ac4     02 2C 66 F0 | 	shl	local08, #2
07ac8     03 00 00 FF 
07acc     00 E4 85 F1 | 	sub	objptr, ##1536
07ad0     F2 2C 02 F1 | 	add	local08, objptr
07ad4     16 29 62 FC | 	wrlong	local06, local08
07ad8     03 00 00 FF 
07adc     00 E4 05 F1 | 	add	objptr, ##1536
07ae0     F2 2C 02 FB | 	rdlong	local08, objptr
07ae4     16 29 02 F6 | 	mov	local06, local08
07ae8     01 28 66 F0 | 	shl	local06, #1
07aec     16 29 02 F1 | 	add	local06, local08
07af0     02 28 66 F0 | 	shl	local06, #2
07af4     03 00 00 FF 
07af8     00 E4 85 F1 | 	sub	objptr, ##1536
07afc     F2 28 02 F1 | 	add	local06, objptr
07b00     04 28 06 F1 | 	add	local06, #4
07b04     14 2B 62 FC | 	wrlong	local07, local06
07b08     03 00 00 FF 
07b0c     00 E4 05 F1 | 	add	objptr, ##1536
07b10     F2 2C 02 FB | 	rdlong	local08, objptr
07b14     16 2B 02 F6 | 	mov	local07, local08
07b18     01 2A 66 F0 | 	shl	local07, #1
07b1c     16 2B 02 F1 | 	add	local07, local08
07b20     02 2A 66 F0 | 	shl	local07, #2
07b24     03 00 00 FF 
07b28     00 E4 85 F1 | 	sub	objptr, ##1536
07b2c     F2 2A 02 F1 | 	add	local07, objptr
07b30     08 2A 06 F1 | 	add	local07, #8
07b34     15 27 62 FC | 	wrlong	local05, local07
07b38     03 00 00 FF 
07b3c     00 E4 05 F1 | 	add	objptr, ##1536
07b40     F2 28 02 FB | 	rdlong	local06, objptr
07b44     01 28 06 F1 | 	add	local06, #1
07b48     F2 28 62 FC | 	wrlong	local06, objptr
07b4c     13 00 00 FF 
07b50     38 E4 85 F1 | 	sub	objptr, ##9784
07b54     F2 24 02 FB | 	rdlong	local04, objptr
07b58     03 24 66 F0 | 	shl	local04, #3
07b5c     02 00 00 FF 
07b60     38 E4 85 F1 | 	sub	objptr, ##1080
07b64     F2 24 02 F1 | 	add	local04, objptr
07b68     04 24 06 F1 | 	add	local04, #4
07b6c     12 27 02 FB | 	rdlong	local05, local04
07b70     2B 00 00 FF 
07b74     D0 E5 85 F1 | 	sub	objptr, ##22480
07b78     E0 FE 9F FD | 	jmp	#LR__0650
07b7c                 | LR__0651
07b7c     A7 F0 03 F6 | 	mov	ptra, fp
07b80     B2 00 A0 FD | 	call	#popregs_
07b84                 | _muldiv_ret
07b84     2D 00 64 FD | 	ret
07b88                 | 
07b88                 | ' 
07b88                 | ' sub getvalue() 
07b88                 | _getvalue
07b88     0B 4A 05 F6 | 	mov	COUNT_, #11
07b8c     A8 00 A0 FD | 	call	#pushregs_
07b90                 | _getvalue_enter
07b90     01 24 06 F6 | 	mov	local04, #1
07b94     00 1E 06 F6 | 	mov	local01, #0
07b98     1D 22 06 F6 | 	mov	local03, #29
07b9c     2E 00 00 FF 
07ba0     08 E4 05 F1 | 	add	objptr, ##23560
07ba4     F2 16 02 FB | 	rdlong	arg03, objptr
07ba8     03 16 66 F0 | 	shl	arg03, #3
07bac     02 00 00 FF 
07bb0     38 E4 85 F1 | 	sub	objptr, ##1080
07bb4     F2 16 02 F1 | 	add	arg03, objptr
07bb8     04 16 06 F1 | 	add	arg03, #4
07bbc     0B 27 02 FB | 	rdlong	local05, arg03
07bc0                 | ' m=1
07bc0                 | ' t1.result.uresult=0: t1.result_type=result_uint
07bc0                 | ' op=lparts(ct).token
07bc0                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token
07bc0     02 26 0E F2 | 	cmp	local05, #2 wz
07bc4     2B 00 00 FF 
07bc8     D0 E5 85 F1 | 	sub	objptr, ##22480
07bcc     38 00 90 5D |  if_ne	jmp	#LR__0660
07bd0     01 24 66 F6 | 	neg	local04, #1
07bd4     2E 00 00 FF 
07bd8     08 E4 05 F1 | 	add	objptr, ##23560
07bdc     F2 26 02 FB | 	rdlong	local05, objptr
07be0     01 26 06 F1 | 	add	local05, #1
07be4     F2 26 62 FC | 	wrlong	local05, objptr
07be8     03 26 66 F0 | 	shl	local05, #3
07bec     02 00 00 FF 
07bf0     38 E4 85 F1 | 	sub	objptr, ##1080
07bf4     F2 26 02 F1 | 	add	local05, objptr
07bf8     04 26 06 F1 | 	add	local05, #4
07bfc     13 27 02 FB | 	rdlong	local05, local05
07c00     2B 00 00 FF 
07c04     D0 E5 85 F1 | 	sub	objptr, ##22480
07c08                 | LR__0660
07c08                 | ' select case op
07c08     01 00 00 FF 
07c0c     00 26 0E F2 | 	cmp	local05, ##512 wz
07c10     3C 00 90 AD |  if_e	jmp	#LR__0661
07c14     01 00 00 FF 
07c18     01 26 0E F2 | 	cmp	local05, ##513 wz
07c1c     88 01 90 AD |  if_e	jmp	#LR__0664
07c20     01 00 00 FF 
07c24     02 26 0E F2 | 	cmp	local05, ##514 wz
07c28     84 02 90 AD |  if_e	jmp	#LR__0665
07c2c     01 00 00 FF 
07c30     03 26 0E F2 | 	cmp	local05, ##515 wz
07c34     E8 03 90 AD |  if_e	jmp	#LR__0668
07c38     01 00 00 FF 
07c3c     04 26 0E F2 | 	cmp	local05, ##516 wz
07c40     E0 05 90 AD |  if_e	jmp	#LR__0673
07c44     15 26 0E F2 | 	cmp	local05, #21 wz
07c48     00 06 90 AD |  if_e	jmp	#LR__0674
07c4c     70 06 90 FD | 	jmp	#LR__0675
07c50                 | LR__0661
07c50                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_uint ' todo token_int64
07c50     01 24 0E F2 | 	cmp	local04, #1 wz
07c54     3C 00 90 5D |  if_ne	jmp	#LR__0662
07c58     2E 00 00 FF 
07c5c     08 E4 05 F1 | 	add	objptr, ##23560
07c60     F2 26 02 FB | 	rdlong	local05, objptr
07c64     03 26 66 F0 | 	shl	local05, #3
07c68     02 00 00 FF 
07c6c     38 E4 85 F1 | 	sub	objptr, ##1080
07c70     F2 26 02 F1 | 	add	local05, objptr
07c74     13 13 02 FB | 	rdlong	arg01, local05
07c78     00 14 06 F6 | 	mov	arg02, #0
07c7c     2B 00 00 FF 
07c80     D0 E5 85 F1 | 	sub	objptr, ##22480
07c84     F8 15 B1 FD | 	call	#__system____builtin_atoi
07c88     FD 24 02 FD | 	qmul	local04, result1
07c8c     18 1E 62 FD | 	getqx	local01
07c90     1D 22 06 F6 | 	mov	local03, #29
07c94                 | LR__0662
07c94                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int ' todo token_int64
07c94     FF FF 7F FF 
07c98     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07c9c     3C 00 90 5D |  if_ne	jmp	#LR__0663
07ca0     2E 00 00 FF 
07ca4     08 E4 05 F1 | 	add	objptr, ##23560
07ca8     F2 26 02 FB | 	rdlong	local05, objptr
07cac     03 26 66 F0 | 	shl	local05, #3
07cb0     02 00 00 FF 
07cb4     38 E4 85 F1 | 	sub	objptr, ##1080
07cb8     F2 26 02 F1 | 	add	local05, objptr
07cbc     13 13 02 FB | 	rdlong	arg01, local05
07cc0     00 14 06 F6 | 	mov	arg02, #0
07cc4     2B 00 00 FF 
07cc8     D0 E5 85 F1 | 	sub	objptr, ##22480
07ccc     B0 15 B1 FD | 	call	#__system____builtin_atoi
07cd0     FD 24 02 FD | 	qmul	local04, result1
07cd4     18 1E 62 FD | 	getqx	local01
07cd8     1C 22 06 F6 | 	mov	local03, #28
07cdc                 | LR__0663
07cdc     0F 29 02 F6 | 	mov	local06, local01
07ce0     10 2B 02 F6 | 	mov	local07, local02
07ce4     11 27 02 F6 | 	mov	local05, local03
07ce8     41 00 00 FF 
07cec     40 E4 05 F1 | 	add	objptr, ##33344
07cf0     F2 1E 02 FB | 	rdlong	local01, objptr
07cf4     0F 25 02 F6 | 	mov	local04, local01
07cf8     01 24 66 F0 | 	shl	local04, #1
07cfc     0F 25 02 F1 | 	add	local04, local01
07d00     02 24 66 F0 | 	shl	local04, #2
07d04     03 00 00 FF 
07d08     00 E4 85 F1 | 	sub	objptr, ##1536
07d0c     F2 24 02 F1 | 	add	local04, objptr
07d10     12 29 62 FC | 	wrlong	local06, local04
07d14     03 00 00 FF 
07d18     00 E4 05 F1 | 	add	objptr, ##1536
07d1c     F2 28 02 FB | 	rdlong	local06, objptr
07d20     14 1F 02 F6 | 	mov	local01, local06
07d24     01 1E 66 F0 | 	shl	local01, #1
07d28     14 1F 02 F1 | 	add	local01, local06
07d2c     02 1E 66 F0 | 	shl	local01, #2
07d30     03 00 00 FF 
07d34     00 E4 85 F1 | 	sub	objptr, ##1536
07d38     F2 1E 02 F1 | 	add	local01, objptr
07d3c     04 1E 06 F1 | 	add	local01, #4
07d40     0F 2B 62 FC | 	wrlong	local07, local01
07d44     03 00 00 FF 
07d48     00 E4 05 F1 | 	add	objptr, ##1536
07d4c     F2 2A 02 FB | 	rdlong	local07, objptr
07d50     15 29 02 F6 | 	mov	local06, local07
07d54     01 28 66 F0 | 	shl	local06, #1
07d58     15 29 02 F1 | 	add	local06, local07
07d5c     02 28 66 F0 | 	shl	local06, #2
07d60     03 00 00 FF 
07d64     00 E4 85 F1 | 	sub	objptr, ##1536
07d68     F2 28 02 F1 | 	add	local06, objptr
07d6c     08 28 06 F1 | 	add	local06, #8
07d70     14 27 62 FC | 	wrlong	local05, local06
07d74     03 00 00 FF 
07d78     00 E4 05 F1 | 	add	objptr, ##1536
07d7c     F2 28 02 FB | 	rdlong	local06, objptr
07d80     01 28 06 F1 | 	add	local06, #1
07d84     F2 28 62 FC | 	wrlong	local06, objptr
07d88     13 00 00 FF 
07d8c     38 E4 85 F1 | 	sub	objptr, ##9784
07d90     F2 28 02 FB | 	rdlong	local06, objptr
07d94     01 28 06 F1 | 	add	local06, #1
07d98     F2 28 62 FC | 	wrlong	local06, objptr
07d9c     2E 00 00 FF 
07da0     08 E4 85 F1 | 	sub	objptr, ##23560
07da4     3C 05 90 FD | 	jmp	#LR__0676
07da8                 | LR__0664
07da8     2E 00 00 FF 
07dac     08 E4 05 F1 | 	add	objptr, ##23560
07db0     F2 28 02 FB | 	rdlong	local06, objptr
07db4     03 28 66 F0 | 	shl	local06, #3
07db8     02 00 00 FF 
07dbc     38 E4 85 F1 | 	sub	objptr, ##1080
07dc0     F2 28 02 F1 | 	add	local06, objptr
07dc4     14 13 02 FB | 	rdlong	arg01, local06
07dc8     00 14 06 F6 | 	mov	arg02, #0
07dcc     2B 00 00 FF 
07dd0     D0 E5 85 F1 | 	sub	objptr, ##22480
07dd4     A8 14 B1 FD | 	call	#__system____builtin_atoi
07dd8     FD 24 02 FD | 	qmul	local04, result1
07ddc     41 00 00 FF 
07de0     40 E4 05 F1 | 	add	objptr, ##33344
07de4     F2 28 02 FB | 	rdlong	local06, objptr
07de8     14 2D 02 F6 | 	mov	local08, local06
07dec     01 2C 66 F0 | 	shl	local08, #1
07df0     14 2D 02 F1 | 	add	local08, local06
07df4     02 2C 66 F0 | 	shl	local08, #2
07df8     03 00 00 FF 
07dfc     00 E4 85 F1 | 	sub	objptr, ##1536
07e00     F2 2C 02 F1 | 	add	local08, objptr
07e04     03 00 00 FF 
07e08     00 E4 05 F1 | 	add	objptr, ##1536
07e0c     18 1E 62 FD | 	getqx	local01
07e10     1C 22 06 F6 | 	mov	local03, #28
07e14     0F 29 02 F6 | 	mov	local06, local01
07e18     10 2B 02 F6 | 	mov	local07, local02
07e1c     16 29 62 FC | 	wrlong	local06, local08
07e20     11 2D 02 F6 | 	mov	local08, local03
07e24     F2 28 02 FB | 	rdlong	local06, objptr
07e28     14 27 02 F6 | 	mov	local05, local06
07e2c     01 26 66 F0 | 	shl	local05, #1
07e30     14 27 02 F1 | 	add	local05, local06
07e34     02 26 66 F0 | 	shl	local05, #2
07e38     03 00 00 FF 
07e3c     00 E4 85 F1 | 	sub	objptr, ##1536
07e40     F2 26 02 F1 | 	add	local05, objptr
07e44     04 26 06 F1 | 	add	local05, #4
07e48     13 2B 62 FC | 	wrlong	local07, local05
07e4c     03 00 00 FF 
07e50     00 E4 05 F1 | 	add	objptr, ##1536
07e54     F2 2A 02 FB | 	rdlong	local07, objptr
07e58     15 29 02 F6 | 	mov	local06, local07
07e5c     01 28 66 F0 | 	shl	local06, #1
07e60     15 29 02 F1 | 	add	local06, local07
07e64     02 28 66 F0 | 	shl	local06, #2
07e68     03 00 00 FF 
07e6c     00 E4 85 F1 | 	sub	objptr, ##1536
07e70     F2 28 02 F1 | 	add	local06, objptr
07e74     08 28 06 F1 | 	add	local06, #8
07e78     14 2D 62 FC | 	wrlong	local08, local06
07e7c     03 00 00 FF 
07e80     00 E4 05 F1 | 	add	objptr, ##1536
07e84     F2 28 02 FB | 	rdlong	local06, objptr
07e88     01 28 06 F1 | 	add	local06, #1
07e8c     F2 28 62 FC | 	wrlong	local06, objptr
07e90     13 00 00 FF 
07e94     38 E4 85 F1 | 	sub	objptr, ##9784
07e98     F2 28 02 FB | 	rdlong	local06, objptr
07e9c     01 28 06 F1 | 	add	local06, #1
07ea0     F2 28 62 FC | 	wrlong	local06, objptr
07ea4     2E 00 00 FF 
07ea8     08 E4 85 F1 | 	sub	objptr, ##23560
07eac     34 04 90 FD | 	jmp	#LR__0676
07eb0                 | LR__0665
07eb0                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
07eb0     01 24 0E F2 | 	cmp	local04, #1 wz
07eb4     48 00 90 5D |  if_ne	jmp	#LR__0666
07eb8     00 C0 1F FF 
07ebc     00 28 06 F6 | 	mov	local06, ##1065353216
07ec0     2E 00 00 FF 
07ec4     08 E4 05 F1 | 	add	objptr, ##23560
07ec8     F2 2C 02 FB | 	rdlong	local08, objptr
07ecc     03 2C 66 F0 | 	shl	local08, #3
07ed0     02 00 00 FF 
07ed4     38 E4 85 F1 | 	sub	objptr, ##1080
07ed8     F2 2C 02 F1 | 	add	local08, objptr
07edc     16 13 02 FB | 	rdlong	arg01, local08
07ee0     2B 00 00 FF 
07ee4     D0 E5 85 F1 | 	sub	objptr, ##22480
07ee8     04 15 B1 FD | 	call	#__system____builtin_atof
07eec     FD 14 02 F6 | 	mov	arg02, result1
07ef0     14 13 02 F6 | 	mov	arg01, local06
07ef4     10 0D B1 FD | 	call	#__system___float_mul
07ef8     FD 1E 02 F6 | 	mov	local01, result1
07efc     1E 22 06 F6 | 	mov	local03, #30
07f00                 | LR__0666
07f00                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
07f00     FF FF 7F FF 
07f04     FF 25 0E F2 | 	cmp	local04, ##-1 wz
07f08     48 00 90 5D |  if_ne	jmp	#LR__0667
07f0c     00 C0 5F FF 
07f10     00 28 06 F6 | 	mov	local06, ##-1082130432
07f14     2E 00 00 FF 
07f18     08 E4 05 F1 | 	add	objptr, ##23560
07f1c     F2 2C 02 FB | 	rdlong	local08, objptr
07f20     03 2C 66 F0 | 	shl	local08, #3
07f24     02 00 00 FF 
07f28     38 E4 85 F1 | 	sub	objptr, ##1080
07f2c     F2 2C 02 F1 | 	add	local08, objptr
07f30     16 13 02 FB | 	rdlong	arg01, local08
07f34     2B 00 00 FF 
07f38     D0 E5 85 F1 | 	sub	objptr, ##22480
07f3c     B0 14 B1 FD | 	call	#__system____builtin_atof
07f40     FD 14 02 F6 | 	mov	arg02, result1
07f44     14 13 02 F6 | 	mov	arg01, local06
07f48     BC 0C B1 FD | 	call	#__system___float_mul
07f4c     FD 1E 02 F6 | 	mov	local01, result1
07f50     1E 22 06 F6 | 	mov	local03, #30
07f54                 | LR__0667
07f54     0F 29 02 F6 | 	mov	local06, local01
07f58     10 2B 02 F6 | 	mov	local07, local02
07f5c     11 27 02 F6 | 	mov	local05, local03
07f60     41 00 00 FF 
07f64     40 E4 05 F1 | 	add	objptr, ##33344
07f68     F2 1E 02 FB | 	rdlong	local01, objptr
07f6c     0F 2D 02 F6 | 	mov	local08, local01
07f70     01 2C 66 F0 | 	shl	local08, #1
07f74     0F 2D 02 F1 | 	add	local08, local01
07f78     02 2C 66 F0 | 	shl	local08, #2
07f7c     03 00 00 FF 
07f80     00 E4 85 F1 | 	sub	objptr, ##1536
07f84     F2 2C 02 F1 | 	add	local08, objptr
07f88     16 29 62 FC | 	wrlong	local06, local08
07f8c     03 00 00 FF 
07f90     00 E4 05 F1 | 	add	objptr, ##1536
07f94     F2 2C 02 FB | 	rdlong	local08, objptr
07f98     16 29 02 F6 | 	mov	local06, local08
07f9c     01 28 66 F0 | 	shl	local06, #1
07fa0     16 29 02 F1 | 	add	local06, local08
07fa4     02 28 66 F0 | 	shl	local06, #2
07fa8     03 00 00 FF 
07fac     00 E4 85 F1 | 	sub	objptr, ##1536
07fb0     F2 28 02 F1 | 	add	local06, objptr
07fb4     04 28 06 F1 | 	add	local06, #4
07fb8     14 2B 62 FC | 	wrlong	local07, local06
07fbc     03 00 00 FF 
07fc0     00 E4 05 F1 | 	add	objptr, ##1536
07fc4     F2 2C 02 FB | 	rdlong	local08, objptr
07fc8     16 2B 02 F6 | 	mov	local07, local08
07fcc     01 2A 66 F0 | 	shl	local07, #1
07fd0     16 2B 02 F1 | 	add	local07, local08
07fd4     02 2A 66 F0 | 	shl	local07, #2
07fd8     03 00 00 FF 
07fdc     00 E4 85 F1 | 	sub	objptr, ##1536
07fe0     F2 2A 02 F1 | 	add	local07, objptr
07fe4     08 2A 06 F1 | 	add	local07, #8
07fe8     15 27 62 FC | 	wrlong	local05, local07
07fec     03 00 00 FF 
07ff0     00 E4 05 F1 | 	add	objptr, ##1536
07ff4     F2 28 02 FB | 	rdlong	local06, objptr
07ff8     01 28 06 F1 | 	add	local06, #1
07ffc     F2 28 62 FC | 	wrlong	local06, objptr
08000     13 00 00 FF 
08004     38 E4 85 F1 | 	sub	objptr, ##9784
08008     F2 28 02 FB | 	rdlong	local06, objptr
0800c     01 28 06 F1 | 	add	local06, #1
08010     F2 28 62 FC | 	wrlong	local06, objptr
08014     2E 00 00 FF 
08018     08 E4 85 F1 | 	sub	objptr, ##23560
0801c     C4 02 90 FD | 	jmp	#LR__0676
08020                 | LR__0668
08020     1F 22 06 F6 | 	mov	local03, #31
08024     2E 00 00 FF 
08028     08 E4 05 F1 | 	add	objptr, ##23560
0802c     F2 16 02 FB | 	rdlong	arg03, objptr
08030     03 16 66 F0 | 	shl	arg03, #3
08034     02 00 00 FF 
08038     38 E4 85 F1 | 	sub	objptr, ##1080
0803c     F2 16 02 F1 | 	add	arg03, objptr
08040     0B 13 02 FB | 	rdlong	arg01, arg03
08044     2B 00 00 FF 
08048     D0 E5 85 F1 | 	sub	objptr, ##22480
0804c     09 2F 02 F6 | 	mov	local09, arg01
08050     97 06 48 FB | 	callpa	#(@LR__0670-@LR__0669)>>2,fcache_load_ptr_
08054                 | LR__0669
08054     17 FB C9 FA | 	rdbyte	result1, local09 wz
08058     01 2E 06 51 |  if_ne	add	local09, #1
0805c     F4 FF 9F 5D |  if_ne	jmp	#LR__0669
08060                 | LR__0670
08060     09 2F 82 F1 | 	sub	local09, arg01
08064     17 FB 01 F6 | 	mov	result1, local09
08068     52 00 00 FF 
0806c     6C E4 05 F1 | 	add	objptr, ##42092
08070     F2 FA 61 FC | 	wrlong	result1, objptr
08074     30 E4 85 F1 | 	sub	objptr, #48
08078     F2 12 02 FB | 	rdlong	arg01, objptr
0807c     FD 12 82 F1 | 	sub	arg01, result1
08080     04 12 86 F1 | 	sub	arg01, #4
08084     03 12 26 F5 | 	andn	arg01, #3
08088     F2 12 62 FC | 	wrlong	arg01, objptr
0808c     30 E4 05 F1 | 	add	objptr, #48
08090     F2 14 02 FB | 	rdlong	arg02, objptr
08094     01 16 06 F6 | 	mov	arg03, #1
08098     00 18 06 F6 | 	mov	arg04, #0
0809c     46 00 00 FF 
080a0     AC E5 85 F1 | 	sub	objptr, ##36268
080a4                 | '     return fill(addr, pattern, count, listPtr, 4)
080a4     04 1A 06 F6 | 	mov	arg05, #4
080a8     98 D8 B0 FD | 	call	#_psram_spin2_fill
080ac                 | '     pslpoke memtop,l
080ac                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
080ac     01 30 06 F6 | 	mov	local10, #1
080b0     46 00 00 FF 
080b4     AC E5 05 F1 | 	add	objptr, ##36268
080b8     F2 32 02 FB | 	rdlong	local11, objptr
080bc     52 00 00 FF 
080c0     6C E4 85 F1 | 	sub	objptr, ##42092
080c4     01 32 06 F1 | 	add	local11, #1
080c8                 | LR__0671
080c8     19 31 52 F2 | 	cmps	local10, local11 wc
080cc     78 00 90 3D |  if_ae	jmp	#LR__0672
080d0     52 00 00 FF 
080d4     3C E4 05 F1 | 	add	objptr, ##42044
080d8     F2 2A 02 FB | 	rdlong	local07, objptr
080dc     03 2A 06 F1 | 	add	local07, #3
080e0     18 2B 02 F1 | 	add	local07, local10
080e4     24 00 00 FF 
080e8     34 E4 85 F1 | 	sub	objptr, ##18484
080ec     F2 2C 02 FB | 	rdlong	local08, objptr
080f0     03 2C 66 F0 | 	shl	local08, #3
080f4     02 00 00 FF 
080f8     38 E4 85 F1 | 	sub	objptr, ##1080
080fc     F2 2C 02 F1 | 	add	local08, objptr
08100     16 13 02 FB | 	rdlong	arg01, local08
08104     18 15 02 F6 | 	mov	arg02, local10
08108     01 16 06 F6 | 	mov	arg03, #1
0810c     2B 00 00 FF 
08110     D0 E5 85 F1 | 	sub	objptr, ##22480
08114     08 03 B1 FD | 	call	#__system__Mid_S
08118     FD 14 C2 FA | 	rdbyte	arg02, result1
0811c     15 13 02 F6 | 	mov	arg01, local07
08120     01 16 06 F6 | 	mov	arg03, #1
08124     00 18 06 F6 | 	mov	arg04, #0
08128     0B 00 00 FF 
0812c     C0 E4 05 F1 | 	add	objptr, ##5824
08130                 | '     return fill(addr, pattern, count, listPtr, 1)
08130     01 1A 06 F6 | 	mov	arg05, #1
08134     0C D8 B0 FD | 	call	#_psram_spin2_fill
08138     0B 00 00 FF 
0813c     C0 E4 85 F1 | 	sub	objptr, ##5824
08140     01 30 06 F1 | 	add	local10, #1
08144     80 FF 9F FD | 	jmp	#LR__0671
08148                 | LR__0672
08148     52 00 00 FF 
0814c     3C E4 05 F1 | 	add	objptr, ##42044
08150     F2 1E 02 FB | 	rdlong	local01, objptr
08154     2B 22 06 F6 | 	mov	local03, #43
08158     0F 29 02 F6 | 	mov	local06, local01
0815c     10 2B 02 F6 | 	mov	local07, local02
08160     11 33 02 F6 | 	mov	local11, local03
08164     10 00 00 FF 
08168     FC E5 85 F1 | 	sub	objptr, ##8700
0816c     F2 30 02 FB | 	rdlong	local10, objptr
08170     18 2D 02 F6 | 	mov	local08, local10
08174     01 2C 66 F0 | 	shl	local08, #1
08178     18 2D 02 F1 | 	add	local08, local10
0817c     02 2C 66 F0 | 	shl	local08, #2
08180     03 00 00 FF 
08184     00 E4 85 F1 | 	sub	objptr, ##1536
08188     F2 2C 02 F1 | 	add	local08, objptr
0818c     16 29 62 FC | 	wrlong	local06, local08
08190     03 00 00 FF 
08194     00 E4 05 F1 | 	add	objptr, ##1536
08198     F2 30 02 FB | 	rdlong	local10, objptr
0819c     18 2D 02 F6 | 	mov	local08, local10
081a0     01 2C 66 F0 | 	shl	local08, #1
081a4     18 2D 02 F1 | 	add	local08, local10
081a8     02 2C 66 F0 | 	shl	local08, #2
081ac     03 00 00 FF 
081b0     00 E4 85 F1 | 	sub	objptr, ##1536
081b4     F2 2C 02 F1 | 	add	local08, objptr
081b8     04 2C 06 F1 | 	add	local08, #4
081bc     16 2B 62 FC | 	wrlong	local07, local08
081c0     03 00 00 FF 
081c4     00 E4 05 F1 | 	add	objptr, ##1536
081c8     F2 30 02 FB | 	rdlong	local10, objptr
081cc     18 2D 02 F6 | 	mov	local08, local10
081d0     01 2C 66 F0 | 	shl	local08, #1
081d4     18 2D 02 F1 | 	add	local08, local10
081d8     02 2C 66 F0 | 	shl	local08, #2
081dc     03 00 00 FF 
081e0     00 E4 85 F1 | 	sub	objptr, ##1536
081e4     F2 2C 02 F1 | 	add	local08, objptr
081e8     08 2C 06 F1 | 	add	local08, #8
081ec     16 33 62 FC | 	wrlong	local11, local08
081f0     03 00 00 FF 
081f4     00 E4 05 F1 | 	add	objptr, ##1536
081f8     F2 28 02 FB | 	rdlong	local06, objptr
081fc     01 28 06 F1 | 	add	local06, #1
08200     F2 28 62 FC | 	wrlong	local06, objptr
08204     13 00 00 FF 
08208     38 E4 85 F1 | 	sub	objptr, ##9784
0820c     F2 28 02 FB | 	rdlong	local06, objptr
08210     01 28 06 F1 | 	add	local06, #1
08214     F2 28 62 FC | 	wrlong	local06, objptr
08218     2E 00 00 FF 
0821c     08 E4 85 F1 | 	sub	objptr, ##23560
08220     C0 00 90 FD | 	jmp	#LR__0676
08224                 | LR__0673
08224     12 13 02 F6 | 	mov	arg01, local04
08228     B8 03 B0 FD | 	call	#_getvar
0822c     2E 00 00 FF 
08230     08 E4 05 F1 | 	add	objptr, ##23560
08234     F2 28 02 FB | 	rdlong	local06, objptr
08238     01 28 06 F1 | 	add	local06, #1
0823c     F2 28 62 FC | 	wrlong	local06, objptr
08240     2E 00 00 FF 
08244     08 E4 85 F1 | 	sub	objptr, ##23560
08248     98 00 90 FD | 	jmp	#LR__0676
0824c                 | LR__0674
0824c     2E 00 00 FF 
08250     08 E4 05 F1 | 	add	objptr, ##23560
08254     F2 28 02 FB | 	rdlong	local06, objptr
08258     01 28 06 F1 | 	add	local06, #1
0825c     F2 28 62 FC | 	wrlong	local06, objptr
08260     2E 00 00 FF 
08264     08 E4 85 F1 | 	sub	objptr, ##23560
08268     F4 F3 BF FD | 	call	#_expr
0826c                 | '     ct+=1
0826c                 | '     expr() 
0826c                 | '     if lparts(ct).token=token_rpar then ct+=1
0826c     2E 00 00 FF 
08270     08 E4 05 F1 | 	add	objptr, ##23560
08274     F2 32 02 FB | 	rdlong	local11, objptr
08278     03 32 66 F0 | 	shl	local11, #3
0827c     02 00 00 FF 
08280     38 E4 85 F1 | 	sub	objptr, ##1080
08284     F2 32 02 F1 | 	add	local11, objptr
08288     04 32 06 F1 | 	add	local11, #4
0828c     19 33 02 FB | 	rdlong	local11, local11
08290     14 32 0E F2 | 	cmp	local11, #20 wz
08294     2B 00 00 FF 
08298     D0 E5 85 F1 | 	sub	objptr, ##22480
0829c     44 00 90 5D |  if_ne	jmp	#LR__0676
082a0     2E 00 00 FF 
082a4     08 E4 05 F1 | 	add	objptr, ##23560
082a8     F2 28 02 FB | 	rdlong	local06, objptr
082ac     01 28 06 F1 | 	add	local06, #1
082b0     F2 28 62 FC | 	wrlong	local06, objptr
082b4     2E 00 00 FF 
082b8     08 E4 85 F1 | 	sub	objptr, ##23560
082bc     24 00 90 FD | 	jmp	#LR__0676
082c0                 | LR__0675
082c0     12 13 02 F6 | 	mov	arg01, local04
082c4     28 00 B0 FD | 	call	#_getfun
082c8     2E 00 00 FF 
082cc     08 E4 05 F1 | 	add	objptr, ##23560
082d0     F2 28 02 FB | 	rdlong	local06, objptr
082d4     01 28 06 F1 | 	add	local06, #1
082d8     F2 28 62 FC | 	wrlong	local06, objptr
082dc     2E 00 00 FF 
082e0     08 E4 85 F1 | 	sub	objptr, ##23560
082e4                 | LR__0676
082e4     A7 F0 03 F6 | 	mov	ptra, fp
082e8     B2 00 A0 FD | 	call	#popregs_
082ec                 | _getvalue_ret
082ec     2D 00 64 FD | 	ret
082f0                 | 
082f0                 | ' 
082f0                 | ' sub getfun(m as integer) ' todo - functions return type, todo" fun can have expr list after it
082f0                 | _getfun
082f0     0A 4A 05 F6 | 	mov	COUNT_, #10
082f4     A8 00 A0 FD | 	call	#pushregs_
082f8                 | _getfun_enter
082f8     09 25 02 F6 | 	mov	local04, arg01
082fc     2E 00 00 FF 
08300     08 E4 05 F1 | 	add	objptr, ##23560
08304     F2 26 02 FB | 	rdlong	local05, objptr
08308     13 29 02 F6 | 	mov	local06, local05
0830c     00 2A 06 F6 | 	mov	local07, #0
08310                 | '  ' if lparts(ct+1).token=token_lpar then oldct=ct: ct+=1: expr()
08310                 | ' oldct=ct
08310                 | ' numpar=0
08310                 | '   
08310                 | ' if lparts(ct+1).token=token_lpar then
08310     01 26 06 F1 | 	add	local05, #1
08314     03 26 66 F0 | 	shl	local05, #3
08318     02 00 00 FF 
0831c     38 E4 85 F1 | 	sub	objptr, ##1080
08320     F2 26 02 F1 | 	add	local05, objptr
08324     04 26 06 F1 | 	add	local05, #4
08328     13 27 02 FB | 	rdlong	local05, local05
0832c     15 26 0E F2 | 	cmp	local05, #21 wz
08330     2B 00 00 FF 
08334     D0 E5 85 F1 | 	sub	objptr, ##22480
08338     08 01 90 5D |  if_ne	jmp	#LR__0684
0833c     2E 00 00 FF 
08340     08 E4 05 F1 | 	add	objptr, ##23560
08344     F2 2C 02 FB | 	rdlong	local08, objptr
08348     01 2C 06 F1 | 	add	local08, #1
0834c     F2 2C 62 FC | 	wrlong	local08, objptr
08350     2E 00 00 FF 
08354     08 E4 85 F1 | 	sub	objptr, ##23560
08358                 | '   ct+=1 											' omit this lpar, this is for expr list
08358                 | '   do
08358                 | LR__0680
08358     2E 00 00 FF 
0835c     08 E4 05 F1 | 	add	objptr, ##23560
08360     F2 26 02 FB | 	rdlong	local05, objptr
08364     01 26 06 F1 | 	add	local05, #1
08368     F2 26 62 FC | 	wrlong	local05, objptr
0836c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0836c                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
0836c     03 26 66 F0 | 	shl	local05, #3
08370     02 00 00 FF 
08374     38 E4 85 F1 | 	sub	objptr, ##1080
08378     F2 26 02 F1 | 	add	local05, objptr
0837c     04 26 06 F1 | 	add	local05, #4
08380     13 2D 02 FB | 	rdlong	local08, local05
08384     15 2C 0E F2 | 	cmp	local08, #21 wz
08388     2B 00 00 FF 
0838c     D0 E5 85 F1 | 	sub	objptr, ##22480
08390     40 00 90 5D |  if_ne	jmp	#LR__0681
08394     2E 00 00 FF 
08398     08 E4 05 F1 | 	add	objptr, ##23560
0839c     F2 2C 02 FB | 	rdlong	local08, objptr
083a0     01 2C 06 F1 | 	add	local08, #1
083a4     F2 2C 62 FC | 	wrlong	local08, objptr
083a8     2E 00 00 FF 
083ac     08 E4 85 F1 | 	sub	objptr, ##23560
083b0     AC F2 BF FD | 	call	#_expr
083b4     2E 00 00 FF 
083b8     08 E4 05 F1 | 	add	objptr, ##23560
083bc     F2 2C 02 FB | 	rdlong	local08, objptr
083c0     01 2C 06 F1 | 	add	local08, #1
083c4     F2 2C 62 FC | 	wrlong	local08, objptr
083c8     2E 00 00 FF 
083cc     08 E4 85 F1 | 	sub	objptr, ##23560
083d0     04 00 90 FD | 	jmp	#LR__0682
083d4                 | LR__0681
083d4     88 F2 BF FD | 	call	#_expr
083d8                 | LR__0682
083d8     01 2A 06 F1 | 	add	local07, #1
083dc     2E 00 00 FF 
083e0     08 E4 05 F1 | 	add	objptr, ##23560
083e4     F2 26 02 FB | 	rdlong	local05, objptr
083e8     03 26 66 F0 | 	shl	local05, #3
083ec     02 00 00 FF 
083f0     38 E4 85 F1 | 	sub	objptr, ##1080
083f4     F2 26 02 F1 | 	add	local05, objptr
083f8     04 26 06 F1 | 	add	local05, #4
083fc     13 2D 02 FB | 	rdlong	local08, local05
08400     14 2C 0E F2 | 	cmp	local08, #20 wz
08404     2B 00 00 FF 
08408     D0 E5 85 F1 | 	sub	objptr, ##22480
0840c     34 00 90 AD |  if_e	jmp	#LR__0683
08410     2E 00 00 FF 
08414     08 E4 05 F1 | 	add	objptr, ##23560
08418     F2 2C 02 FB | 	rdlong	local08, objptr
0841c     03 2C 66 F0 | 	shl	local08, #3
08420     02 00 00 FF 
08424     38 E4 85 F1 | 	sub	objptr, ##1080
08428     F2 2C 02 F1 | 	add	local08, objptr
0842c     04 2C 06 F1 | 	add	local08, #4
08430     16 2D 02 FB | 	rdlong	local08, local08
08434     FE 2D 0E F2 | 	cmp	local08, #510 wz
08438     2B 00 00 FF 
0843c     D0 E5 85 F1 | 	sub	objptr, ##22480
08440     14 FF 9F 5D |  if_ne	jmp	#LR__0680
08444                 | LR__0683
08444                 | LR__0684
08444     15 1F 02 F6 | 	mov	local01, local07
08448     03 28 66 F0 | 	shl	local06, #3
0844c     2B 00 00 FF 
08450     D0 E5 05 F1 | 	add	objptr, ##22480
08454     F2 28 02 F1 | 	add	local06, objptr
08458     04 28 06 F1 | 	add	local06, #4
0845c     14 23 02 FB | 	rdlong	local03, local06
08460     0F 2D 02 F6 | 	mov	local08, local01
08464     10 2B 02 F6 | 	mov	local07, local02
08468     11 29 02 F6 | 	mov	local06, local03
0846c     15 00 00 FF 
08470     70 E4 05 F1 | 	add	objptr, ##10864
08474     F2 26 02 FB | 	rdlong	local05, objptr
08478     13 13 02 F6 | 	mov	arg01, local05
0847c     01 12 66 F0 | 	shl	arg01, #1
08480     13 13 02 F1 | 	add	arg01, local05
08484     02 12 66 F0 | 	shl	arg01, #2
08488     03 00 00 FF 
0848c     00 E4 85 F1 | 	sub	objptr, ##1536
08490     F2 12 02 F1 | 	add	arg01, objptr
08494     09 2D 62 FC | 	wrlong	local08, arg01
08498     03 00 00 FF 
0849c     00 E4 05 F1 | 	add	objptr, ##1536
084a0     F2 2C 02 FB | 	rdlong	local08, objptr
084a4     16 2F 02 F6 | 	mov	local09, local08
084a8     01 2E 66 F0 | 	shl	local09, #1
084ac     16 2F 02 F1 | 	add	local09, local08
084b0     02 2E 66 F0 | 	shl	local09, #2
084b4     03 00 00 FF 
084b8     00 E4 85 F1 | 	sub	objptr, ##1536
084bc     F2 2E 02 F1 | 	add	local09, objptr
084c0     04 2E 06 F1 | 	add	local09, #4
084c4     17 2B 62 FC | 	wrlong	local07, local09
084c8     03 00 00 FF 
084cc     00 E4 05 F1 | 	add	objptr, ##1536
084d0     F2 2C 02 FB | 	rdlong	local08, objptr
084d4     16 31 02 F6 | 	mov	local10, local08
084d8     01 30 66 F0 | 	shl	local10, #1
084dc     16 31 02 F1 | 	add	local10, local08
084e0     02 30 66 F0 | 	shl	local10, #2
084e4     03 00 00 FF 
084e8     00 E4 85 F1 | 	sub	objptr, ##1536
084ec     F2 30 02 F1 | 	add	local10, objptr
084f0     08 30 06 F1 | 	add	local10, #8
084f4     18 29 62 FC | 	wrlong	local06, local10
084f8     03 00 00 FF 
084fc     00 E4 05 F1 | 	add	objptr, ##1536
08500     F2 2C 02 FB | 	rdlong	local08, objptr
08504     01 2C 06 F1 | 	add	local08, #1
08508     F2 2C 62 FC | 	wrlong	local08, objptr
0850c     41 00 00 FF 
08510     40 E4 85 F1 | 	sub	objptr, ##33344
08514                 | ' 
08514                 | ' t2.result.uresult=numpar
08514                 | ' 
08514                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
08514                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
08514                 | ' 
08514                 | '   
08514                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
08514     FF FF 7F FF 
08518     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0851c     B8 00 90 5D |  if_ne	jmp	#LR__0685
08520     15 22 06 F6 | 	mov	local03, #21
08524     0F 2D 02 F6 | 	mov	local08, local01
08528     10 2B 02 F6 | 	mov	local07, local02
0852c     11 29 02 F6 | 	mov	local06, local03
08530     41 00 00 FF 
08534     40 E4 05 F1 | 	add	objptr, ##33344
08538     F2 26 02 FB | 	rdlong	local05, objptr
0853c     13 13 02 F6 | 	mov	arg01, local05
08540     01 12 66 F0 | 	shl	arg01, #1
08544     13 13 02 F1 | 	add	arg01, local05
08548     02 12 66 F0 | 	shl	arg01, #2
0854c     03 00 00 FF 
08550     00 E4 85 F1 | 	sub	objptr, ##1536
08554     F2 12 02 F1 | 	add	arg01, objptr
08558     09 2D 62 FC | 	wrlong	local08, arg01
0855c     03 00 00 FF 
08560     00 E4 05 F1 | 	add	objptr, ##1536
08564     F2 30 02 FB | 	rdlong	local10, objptr
08568     18 2F 02 F6 | 	mov	local09, local10
0856c     01 2E 66 F0 | 	shl	local09, #1
08570     18 2F 02 F1 | 	add	local09, local10
08574     02 2E 66 F0 | 	shl	local09, #2
08578     03 00 00 FF 
0857c     00 E4 85 F1 | 	sub	objptr, ##1536
08580     F2 2E 02 F1 | 	add	local09, objptr
08584     04 2E 06 F1 | 	add	local09, #4
08588     17 2B 62 FC | 	wrlong	local07, local09
0858c     03 00 00 FF 
08590     00 E4 05 F1 | 	add	objptr, ##1536
08594     F2 2E 02 FB | 	rdlong	local09, objptr
08598     17 31 02 F6 | 	mov	local10, local09
0859c     01 30 66 F0 | 	shl	local10, #1
085a0     17 31 02 F1 | 	add	local10, local09
085a4     02 30 66 F0 | 	shl	local10, #2
085a8     03 00 00 FF 
085ac     00 E4 85 F1 | 	sub	objptr, ##1536
085b0     F2 30 02 F1 | 	add	local10, objptr
085b4     08 30 06 F1 | 	add	local10, #8
085b8     18 29 62 FC | 	wrlong	local06, local10
085bc     03 00 00 FF 
085c0     00 E4 05 F1 | 	add	objptr, ##1536
085c4     F2 2C 02 FB | 	rdlong	local08, objptr
085c8     01 2C 06 F1 | 	add	local08, #1
085cc     F2 2C 62 FC | 	wrlong	local08, objptr
085d0     41 00 00 FF 
085d4     40 E4 85 F1 | 	sub	objptr, ##33344
085d8                 | LR__0685
085d8     A7 F0 03 F6 | 	mov	ptra, fp
085dc     B2 00 A0 FD | 	call	#popregs_
085e0                 | _getfun_ret
085e0     2D 00 64 FD | 	ret
085e4                 | 
085e4                 | '   
085e4                 | '   
085e4                 | ' sub getvar(m as integer) 
085e4                 | _getvar
085e4     0A 4A 05 F6 | 	mov	COUNT_, #10
085e8     A8 00 A0 FD | 	call	#pushregs_
085ec                 | _getvar_enter
085ec     09 25 02 F6 | 	mov	local04, arg01
085f0     2E 00 00 FF 
085f4     08 E4 05 F1 | 	add	objptr, ##23560
085f8     F2 14 02 FB | 	rdlong	arg02, objptr
085fc     03 14 66 F0 | 	shl	arg02, #3
08600     02 00 00 FF 
08604     38 E4 85 F1 | 	sub	objptr, ##1080
08608     F2 14 02 F1 | 	add	arg02, objptr
0860c     0A 27 02 FB | 	rdlong	local05, arg02
08610     13 13 02 F6 | 	mov	arg01, local05
08614     01 14 06 F6 | 	mov	arg02, #1
08618     2B 00 00 FF 
0861c     D0 E5 85 F1 | 	sub	objptr, ##22480
08620     6C FD B0 FD | 	call	#__system__Right_S
08624     FD 28 02 F6 | 	mov	local06, result1
08628     01 2A 66 F6 | 	neg	local07, #1
0862c                 | ' 
0862c                 | ' varname$=lparts(ct).part$
0862c                 | ' suffix$=right$(varname$,1)
0862c                 | ' j=-1
0862c                 | ' 
0862c                 | ' for i=0 to varnum-1
0862c     00 2C 06 F6 | 	mov	local08, #0
08630     2B 00 00 FF 
08634     CC E5 05 F1 | 	add	objptr, ##22476
08638     F2 2E 02 FB | 	rdlong	local09, objptr
0863c     2B 00 00 FF 
08640     CC E5 85 F1 | 	sub	objptr, ##22476
08644                 | LR__0690
08644     17 2D 52 F2 | 	cmps	local08, local09 wc
08648     38 00 90 3D |  if_ae	jmp	#LR__0691
0864c                 | '   if variables(i).name=varname$ then j=i : exit
0864c     16 15 02 F6 | 	mov	arg02, local08
08650     04 14 66 F0 | 	shl	arg02, #4
08654     0B 00 00 FF 
08658     CC E5 05 F1 | 	add	objptr, ##6092
0865c     F2 14 02 F1 | 	add	arg02, objptr
08660     0A 13 02 FB | 	rdlong	arg01, arg02
08664     13 15 02 F6 | 	mov	arg02, local05
08668     0B 00 00 FF 
0866c     CC E5 85 F1 | 	sub	objptr, ##6092
08670     AC DC B0 FD | 	call	#__system___string_cmp
08674     00 FA 0D F2 | 	cmp	result1, #0 wz
08678     16 2B 02 A6 |  if_e	mov	local07, local08
0867c     01 2C 06 51 |  if_ne	add	local08, #1
08680     C0 FF 9F 5D |  if_ne	jmp	#LR__0690
08684                 | LR__0691
08684                 | ' if  j=-1 andalso varnum<maxvars then   
08684     FF FF 7F FF 
08688     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0868c     A8 00 90 5D |  if_ne	jmp	#LR__0692
08690     2B 00 00 FF 
08694     CC E5 05 F1 | 	add	objptr, ##22476
08698     F2 2E 02 FB | 	rdlong	local09, objptr
0869c     2B 00 00 FF 
086a0     CC E5 85 F1 | 	sub	objptr, ##22476
086a4     01 00 00 FF 
086a8     FF 2F 56 F2 | 	cmps	local09, ##1023 wc
086ac     88 00 90 3D |  if_ae	jmp	#LR__0692
086b0     2B 00 00 FF 
086b4     CC E5 05 F1 | 	add	objptr, ##22476
086b8     F2 2E 02 FB | 	rdlong	local09, objptr
086bc     04 2E 66 F0 | 	shl	local09, #4
086c0     20 00 00 FF 
086c4     00 E4 85 F1 | 	sub	objptr, ##16384
086c8     F2 2E 02 F1 | 	add	local09, objptr
086cc     17 27 62 FC | 	wrlong	local05, local09
086d0     20 00 00 FF 
086d4     00 E4 05 F1 | 	add	objptr, ##16384
086d8     F2 2E 02 FB | 	rdlong	local09, objptr
086dc     04 2E 66 F0 | 	shl	local09, #4
086e0     20 00 00 FF 
086e4     00 E4 85 F1 | 	sub	objptr, ##16384
086e8     F2 2E 02 F1 | 	add	local09, objptr
086ec     04 2E 06 F1 | 	add	local09, #4
086f0     17 01 68 FC | 	wrlong	#0, local09
086f4     20 00 00 FF 
086f8     00 E4 05 F1 | 	add	objptr, ##16384
086fc     F2 2E 02 FB | 	rdlong	local09, objptr
08700     04 2E 66 F0 | 	shl	local09, #4
08704     20 00 00 FF 
08708     00 E4 85 F1 | 	sub	objptr, ##16384
0870c     F2 2E 02 F1 | 	add	local09, objptr
08710     0C 2E 06 F1 | 	add	local09, #12
08714     17 39 68 FC | 	wrlong	#28, local09
08718     20 00 00 FF 
0871c     00 E4 05 F1 | 	add	objptr, ##16384
08720     F2 2E 02 FB | 	rdlong	local09, objptr
08724     17 2B 02 F6 | 	mov	local07, local09
08728     01 2E 06 F1 | 	add	local09, #1
0872c     F2 2E 62 FC | 	wrlong	local09, objptr
08730     2B 00 00 FF 
08734     CC E5 85 F1 | 	sub	objptr, ##22476
08738                 | LR__0692
08738     00 2E 06 F6 | 	mov	local09, #0
0873c                 | ' numpar=0
0873c                 | ' ' check if it is an array
0873c                 | ' 
0873c                 | ' if lparts(ct+1).token=token_lpar then
0873c     2E 00 00 FF 
08740     08 E4 05 F1 | 	add	objptr, ##23560
08744     F2 2C 02 FB | 	rdlong	local08, objptr
08748     01 2C 06 F1 | 	add	local08, #1
0874c     03 2C 66 F0 | 	shl	local08, #3
08750     02 00 00 FF 
08754     38 E4 85 F1 | 	sub	objptr, ##1080
08758     F2 2C 02 F1 | 	add	local08, objptr
0875c     04 2C 06 F1 | 	add	local08, #4
08760     16 2D 02 FB | 	rdlong	local08, local08
08764     15 2C 0E F2 | 	cmp	local08, #21 wz
08768     2B 00 00 FF 
0876c     D0 E5 85 F1 | 	sub	objptr, ##22480
08770     08 01 90 5D |  if_ne	jmp	#LR__0697
08774     2E 00 00 FF 
08778     08 E4 05 F1 | 	add	objptr, ##23560
0877c     F2 30 02 FB | 	rdlong	local10, objptr
08780     01 30 06 F1 | 	add	local10, #1
08784     F2 30 62 FC | 	wrlong	local10, objptr
08788     2E 00 00 FF 
0878c     08 E4 85 F1 | 	sub	objptr, ##23560
08790                 | '   ct+=1 											' omit this lpar, this is for expr list
08790                 | '   do
08790                 | LR__0693
08790     2E 00 00 FF 
08794     08 E4 05 F1 | 	add	objptr, ##23560
08798     F2 2C 02 FB | 	rdlong	local08, objptr
0879c     01 2C 06 F1 | 	add	local08, #1
087a0     F2 2C 62 FC | 	wrlong	local08, objptr
087a4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
087a4                 | '     if lparts(ct).token=token_lpar then ct+=1 : expr() : ct+=1 else expr()
087a4     03 2C 66 F0 | 	shl	local08, #3
087a8     02 00 00 FF 
087ac     38 E4 85 F1 | 	sub	objptr, ##1080
087b0     F2 2C 02 F1 | 	add	local08, objptr
087b4     04 2C 06 F1 | 	add	local08, #4
087b8     16 31 02 FB | 	rdlong	local10, local08
087bc     15 30 0E F2 | 	cmp	local10, #21 wz
087c0     2B 00 00 FF 
087c4     D0 E5 85 F1 | 	sub	objptr, ##22480
087c8     40 00 90 5D |  if_ne	jmp	#LR__0694
087cc     2E 00 00 FF 
087d0     08 E4 05 F1 | 	add	objptr, ##23560
087d4     F2 30 02 FB | 	rdlong	local10, objptr
087d8     01 30 06 F1 | 	add	local10, #1
087dc     F2 30 62 FC | 	wrlong	local10, objptr
087e0     2E 00 00 FF 
087e4     08 E4 85 F1 | 	sub	objptr, ##23560
087e8     74 EE BF FD | 	call	#_expr
087ec     2E 00 00 FF 
087f0     08 E4 05 F1 | 	add	objptr, ##23560
087f4     F2 30 02 FB | 	rdlong	local10, objptr
087f8     01 30 06 F1 | 	add	local10, #1
087fc     F2 30 62 FC | 	wrlong	local10, objptr
08800     2E 00 00 FF 
08804     08 E4 85 F1 | 	sub	objptr, ##23560
08808     04 00 90 FD | 	jmp	#LR__0695
0880c                 | LR__0694
0880c     50 EE BF FD | 	call	#_expr
08810                 | LR__0695
08810     01 2E 06 F1 | 	add	local09, #1
08814     2E 00 00 FF 
08818     08 E4 05 F1 | 	add	objptr, ##23560
0881c     F2 2C 02 FB | 	rdlong	local08, objptr
08820     03 2C 66 F0 | 	shl	local08, #3
08824     02 00 00 FF 
08828     38 E4 85 F1 | 	sub	objptr, ##1080
0882c     F2 2C 02 F1 | 	add	local08, objptr
08830     04 2C 06 F1 | 	add	local08, #4
08834     16 31 02 FB | 	rdlong	local10, local08
08838     14 30 0E F2 | 	cmp	local10, #20 wz
0883c     2B 00 00 FF 
08840     D0 E5 85 F1 | 	sub	objptr, ##22480
08844     34 00 90 AD |  if_e	jmp	#LR__0696
08848     2E 00 00 FF 
0884c     08 E4 05 F1 | 	add	objptr, ##23560
08850     F2 30 02 FB | 	rdlong	local10, objptr
08854     03 30 66 F0 | 	shl	local10, #3
08858     02 00 00 FF 
0885c     38 E4 85 F1 | 	sub	objptr, ##1080
08860     F2 30 02 F1 | 	add	local10, objptr
08864     04 30 06 F1 | 	add	local10, #4
08868     18 31 02 FB | 	rdlong	local10, local10
0886c     FE 31 0E F2 | 	cmp	local10, #510 wz
08870     2B 00 00 FF 
08874     D0 E5 85 F1 | 	sub	objptr, ##22480
08878     14 FF 9F 5D |  if_ne	jmp	#LR__0693
0887c                 | LR__0696
0887c                 | LR__0697
0887c     17 21 02 F6 | 	mov	local02, local09
08880     11 22 06 F6 | 	mov	local03, #17
08884     15 1F 02 F6 | 	mov	local01, local07
08888     0F 31 02 F6 | 	mov	local10, local01
0888c     10 2F 02 F6 | 	mov	local09, local02
08890     11 2D 02 F6 | 	mov	local08, local03
08894     41 00 00 FF 
08898     40 E4 05 F1 | 	add	objptr, ##33344
0889c     F2 2A 02 FB | 	rdlong	local07, objptr
088a0     15 29 02 F6 | 	mov	local06, local07
088a4     01 28 66 F0 | 	shl	local06, #1
088a8     15 29 02 F1 | 	add	local06, local07
088ac     02 28 66 F0 | 	shl	local06, #2
088b0     03 00 00 FF 
088b4     00 E4 85 F1 | 	sub	objptr, ##1536
088b8     F2 28 02 F1 | 	add	local06, objptr
088bc     14 31 62 FC | 	wrlong	local10, local06
088c0     03 00 00 FF 
088c4     00 E4 05 F1 | 	add	objptr, ##1536
088c8     F2 30 02 FB | 	rdlong	local10, objptr
088cc     18 27 02 F6 | 	mov	local05, local10
088d0     01 26 66 F0 | 	shl	local05, #1
088d4     18 27 02 F1 | 	add	local05, local10
088d8     02 26 66 F0 | 	shl	local05, #2
088dc     03 00 00 FF 
088e0     00 E4 85 F1 | 	sub	objptr, ##1536
088e4     F2 26 02 F1 | 	add	local05, objptr
088e8     04 26 06 F1 | 	add	local05, #4
088ec     13 2F 62 FC | 	wrlong	local09, local05
088f0     03 00 00 FF 
088f4     00 E4 05 F1 | 	add	objptr, ##1536
088f8     F2 30 02 FB | 	rdlong	local10, objptr
088fc     18 FB 01 F6 | 	mov	result1, local10
08900     01 FA 65 F0 | 	shl	result1, #1
08904     18 FB 01 F1 | 	add	result1, local10
08908     02 FA 65 F0 | 	shl	result1, #2
0890c     03 00 00 FF 
08910     00 E4 85 F1 | 	sub	objptr, ##1536
08914     F2 FA 01 F1 | 	add	result1, objptr
08918     08 FA 05 F1 | 	add	result1, #8
0891c     FD 2C 62 FC | 	wrlong	local08, result1
08920     03 00 00 FF 
08924     00 E4 05 F1 | 	add	objptr, ##1536
08928     F2 30 02 FB | 	rdlong	local10, objptr
0892c     01 30 06 F1 | 	add	local10, #1
08930     F2 30 62 FC | 	wrlong	local10, objptr
08934     41 00 00 FF 
08938     40 E4 85 F1 | 	sub	objptr, ##33344
0893c                 | ' 
0893c                 | ' t2.result.twowords(1)=numpar
0893c                 | ' 
0893c                 | ' 
0893c                 | ' 
0893c                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0893c                 | ' 
0893c                 | ' 
0893c                 | '  
0893c                 | ' 
0893c                 | ' 701 
0893c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0893c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0893c     FF FF 7F FF 
08940     FF 25 0E F2 | 	cmp	local04, ##-1 wz
08944     B8 00 90 5D |  if_ne	jmp	#LR__0698
08948     15 22 06 F6 | 	mov	local03, #21
0894c     0F 31 02 F6 | 	mov	local10, local01
08950     10 2F 02 F6 | 	mov	local09, local02
08954     11 2D 02 F6 | 	mov	local08, local03
08958     41 00 00 FF 
0895c     40 E4 05 F1 | 	add	objptr, ##33344
08960     F2 2A 02 FB | 	rdlong	local07, objptr
08964     15 29 02 F6 | 	mov	local06, local07
08968     01 28 66 F0 | 	shl	local06, #1
0896c     15 29 02 F1 | 	add	local06, local07
08970     02 28 66 F0 | 	shl	local06, #2
08974     03 00 00 FF 
08978     00 E4 85 F1 | 	sub	objptr, ##1536
0897c     F2 28 02 F1 | 	add	local06, objptr
08980     14 31 62 FC | 	wrlong	local10, local06
08984     03 00 00 FF 
08988     00 E4 05 F1 | 	add	objptr, ##1536
0898c     F2 1E 02 FB | 	rdlong	local01, objptr
08990     0F 27 02 F6 | 	mov	local05, local01
08994     01 26 66 F0 | 	shl	local05, #1
08998     0F 27 02 F1 | 	add	local05, local01
0899c     02 26 66 F0 | 	shl	local05, #2
089a0     03 00 00 FF 
089a4     00 E4 85 F1 | 	sub	objptr, ##1536
089a8     F2 26 02 F1 | 	add	local05, objptr
089ac     04 26 06 F1 | 	add	local05, #4
089b0     13 2F 62 FC | 	wrlong	local09, local05
089b4     03 00 00 FF 
089b8     00 E4 05 F1 | 	add	objptr, ##1536
089bc     F2 1E 02 FB | 	rdlong	local01, objptr
089c0     0F FB 01 F6 | 	mov	result1, local01
089c4     01 FA 65 F0 | 	shl	result1, #1
089c8     0F FB 01 F1 | 	add	result1, local01
089cc     02 FA 65 F0 | 	shl	result1, #2
089d0     03 00 00 FF 
089d4     00 E4 85 F1 | 	sub	objptr, ##1536
089d8     F2 FA 01 F1 | 	add	result1, objptr
089dc     08 FA 05 F1 | 	add	result1, #8
089e0     FD 2C 62 FC | 	wrlong	local08, result1
089e4     03 00 00 FF 
089e8     00 E4 05 F1 | 	add	objptr, ##1536
089ec     F2 30 02 FB | 	rdlong	local10, objptr
089f0     01 30 06 F1 | 	add	local10, #1
089f4     F2 30 62 FC | 	wrlong	local10, objptr
089f8     41 00 00 FF 
089fc     40 E4 85 F1 | 	sub	objptr, ##33344
08a00                 | LR__0698
08a00     A7 F0 03 F6 | 	mov	ptra, fp
08a04     B2 00 A0 FD | 	call	#popregs_
08a08                 | _getvar_ret
08a08     2D 00 64 FD | 	ret
08a0c                 | 
08a0c                 | ' 
08a0c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08a0c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
08a0c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08a0c                 | ' 
08a0c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08a0c                 | ' '--------------------------------------------- Runtime functions ------------------------------------------------------------------------ 
08a0c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
08a0c                 | ' 
08a0c                 | ' function execute_line (astart=0 as integer) as integer
08a0c                 | _execute_line
08a0c     04 4A 05 F6 | 	mov	COUNT_, #4
08a10     A8 00 A0 FD | 	call	#pushregs_
08a14     50 00 00 FF 
08a18     78 E5 05 F1 | 	add	objptr, ##41336
08a1c     F2 00 68 FC | 	wrlong	#0, objptr
08a20                 | ' runptr2=0
08a20                 | ' for lineptr_e=astart to lineptr-1
08a20     0F 00 00 FF 
08a24     34 E5 85 F1 | 	sub	objptr, ##7988
08a28     F2 12 62 FC | 	wrlong	arg01, objptr
08a2c     04 E4 85 F1 | 	sub	objptr, #4
08a30     F2 1E 02 FB | 	rdlong	local01, objptr
08a34     41 00 00 FF 
08a38     40 E4 85 F1 | 	sub	objptr, ##33344
08a3c                 | LR__0700
08a3c     41 00 00 FF 
08a40     44 E4 05 F1 | 	add	objptr, ##33348
08a44     F2 FA 01 FB | 	rdlong	result1, objptr
08a48     41 00 00 FF 
08a4c     44 E4 85 F1 | 	sub	objptr, ##33348
08a50     0F FB 51 F2 | 	cmps	result1, local01 wc
08a54     98 00 90 3D |  if_ae	jmp	#LR__0701
08a58     41 00 00 FF 
08a5c     44 E4 05 F1 | 	add	objptr, ##33348
08a60     F2 FA 01 FB | 	rdlong	result1, objptr
08a64     FD 20 02 F6 | 	mov	local02, result1
08a68     01 20 66 F0 | 	shl	local02, #1
08a6c     FD 20 02 F1 | 	add	local02, result1
08a70     02 20 66 F0 | 	shl	local02, #2
08a74     03 00 00 FF 
08a78     04 E4 85 F1 | 	sub	objptr, ##1540
08a7c     F2 20 02 F1 | 	add	local02, objptr
08a80     08 20 06 F1 | 	add	local02, #8
08a84     10 21 02 FB | 	rdlong	local02, local02
08a88     10 21 E2 F8 | 	getbyte	local02, local02, #0
08a8c     02 20 66 F0 | 	shl	local02, #2
08a90     04 00 00 FF 
08a94     1C E4 85 F1 | 	sub	objptr, ##2076
08a98     F2 20 02 F1 | 	add	local02, objptr
08a9c     10 21 02 FB | 	rdlong	local02, local02
08aa0     10 23 02 F6 | 	mov	local03, local02
08aa4     13 20 46 F7 | 	zerox	local02, #19
08aa8     14 22 46 F0 | 	shr	local03, #20
08aac     02 22 66 F0 | 	shl	local03, #2
08ab0     ED 22 02 F1 | 	add	local03, __methods__
08ab4     11 23 02 FB | 	rdlong	local03, local03
08ab8     3A 00 00 FF 
08abc     24 E4 85 F1 | 	sub	objptr, ##29732
08ac0     F2 24 02 F6 | 	mov	local04, objptr
08ac4     10 E5 01 F6 | 	mov	objptr, local02
08ac8     2D 22 62 FD | 	call	local03
08acc     12 E5 01 F6 | 	mov	objptr, local04
08ad0     41 00 00 FF 
08ad4     44 E4 05 F1 | 	add	objptr, ##33348
08ad8     F2 24 02 FB | 	rdlong	local04, objptr
08adc     01 24 06 F1 | 	add	local04, #1
08ae0     F2 24 62 FC | 	wrlong	local04, objptr
08ae4     41 00 00 FF 
08ae8     44 E4 85 F1 | 	sub	objptr, ##33348
08aec     4C FF 9F FD | 	jmp	#LR__0700
08af0                 | LR__0701
08af0                 | ' return runptr2
08af0     50 00 00 FF 
08af4     78 E5 05 F1 | 	add	objptr, ##41336
08af8     F2 FA 01 FB | 	rdlong	result1, objptr
08afc     50 00 00 FF 
08b00     78 E5 85 F1 | 	sub	objptr, ##41336
08b04     A7 F0 03 F6 | 	mov	ptra, fp
08b08     B2 00 A0 FD | 	call	#popregs_
08b0c                 | _execute_line_ret
08b0c     2D 00 64 FD | 	ret
08b10                 | 
08b10                 | ' 
08b10                 | ' 
08b10                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
08b10                 | ' 
08b10                 | ' function pop() as expr_result
08b10                 | _pop
08b10                 | ' 
08b10                 | ' if stackpointer=0 then
08b10     3A 00 00 FF 
08b14     1C E4 05 F1 | 	add	objptr, ##29724
08b18     F2 FA 09 FB | 	rdlong	result1, objptr wz
08b1c     3A 00 00 FF 
08b20     1C E4 85 F1 | 	sub	objptr, ##29724
08b24     FF 04 06 A6 |  if_e	mov	_var03, #255
08b28     18 00 06 A6 |  if_e	mov	_var01, #24
08b2c     68 00 90 AD |  if_e	jmp	#LR__0710
08b30     3A 00 00 FF 
08b34     1C E4 05 F1 | 	add	objptr, ##29724
08b38     F2 FA 01 FB | 	rdlong	result1, objptr
08b3c     01 FA 85 F1 | 	sub	result1, #1
08b40     F2 FA 61 FC | 	wrlong	result1, objptr
08b44     FD FE 01 F6 | 	mov	result3, result1
08b48     01 FE 65 F0 | 	shl	result3, #1
08b4c     FD FE 01 F1 | 	add	result3, result1
08b50     02 FE 65 F0 | 	shl	result3, #2
08b54     0C 00 00 FF 
08b58     0C E4 85 F1 | 	sub	objptr, ##6156
08b5c     F2 FE 01 F1 | 	add	result3, objptr
08b60     FF 00 02 FB | 	rdlong	_var01, result3
08b64     04 FE 05 F1 | 	add	result3, #4
08b68     FF FE 01 FB | 	rdlong	result3, result3
08b6c     FD FC 01 F6 | 	mov	result2, result1
08b70     01 FC 65 F0 | 	shl	result2, #1
08b74     FD FC 01 F1 | 	add	result2, result1
08b78     02 FC 65 F0 | 	shl	result2, #2
08b7c     F2 FC 01 F1 | 	add	result2, objptr
08b80     08 FC 05 F1 | 	add	result2, #8
08b84     FE FA 01 FB | 	rdlong	result1, result2
08b88     FF 02 02 F6 | 	mov	_var02, result3
08b8c     FD 04 02 F6 | 	mov	_var03, result1
08b90     2E 00 00 FF 
08b94     10 E4 85 F1 | 	sub	objptr, ##23568
08b98                 | LR__0710
08b98                 | ' return t1
08b98     01 FD 01 F6 | 	mov	result2, _var02
08b9c     02 FF 01 F6 | 	mov	result3, _var03
08ba0     00 FB 01 F6 | 	mov	result1, _var01
08ba4                 | _pop_ret
08ba4     2D 00 64 FD | 	ret
08ba8                 | 
08ba8                 | ' 
08ba8                 | ' sub push(t1 as expr_result )
08ba8                 | _push
08ba8                 | ' 
08ba8                 | ' 'print "In push: "; t1.result_type
08ba8                 | ' 'print "In push: "; t1.result.uresult
08ba8                 | ' 
08ba8                 | ' if stackpointer<maxstack then 
08ba8     3A 00 00 FF 
08bac     1C E4 05 F1 | 	add	objptr, ##29724
08bb0     F2 00 02 FB | 	rdlong	_var01, objptr
08bb4     3A 00 00 FF 
08bb8     1C E4 85 F1 | 	sub	objptr, ##29724
08bbc     01 00 00 FF 
08bc0     00 00 56 F2 | 	cmps	_var01, ##512 wc
08bc4     BC 00 90 3D |  if_ae	jmp	#LR__0720
08bc8     09 01 02 FB | 	rdlong	_var01, arg01
08bcc     04 12 06 F1 | 	add	arg01, #4
08bd0     09 03 02 FB | 	rdlong	_var02, arg01
08bd4     04 12 06 F1 | 	add	arg01, #4
08bd8     09 13 02 FB | 	rdlong	arg01, arg01
08bdc     3A 00 00 FF 
08be0     1C E4 05 F1 | 	add	objptr, ##29724
08be4     F2 04 02 FB | 	rdlong	_var03, objptr
08be8     02 07 02 F6 | 	mov	_var04, _var03
08bec     01 06 66 F0 | 	shl	_var04, #1
08bf0     02 07 02 F1 | 	add	_var04, _var03
08bf4     02 06 66 F0 | 	shl	_var04, #2
08bf8     0C 00 00 FF 
08bfc     0C E4 85 F1 | 	sub	objptr, ##6156
08c00     F2 06 02 F1 | 	add	_var04, objptr
08c04     03 01 62 FC | 	wrlong	_var01, _var04
08c08     0C 00 00 FF 
08c0c     0C E4 05 F1 | 	add	objptr, ##6156
08c10     F2 06 02 FB | 	rdlong	_var04, objptr
08c14     03 05 02 F6 | 	mov	_var03, _var04
08c18     01 04 66 F0 | 	shl	_var03, #1
08c1c     03 05 02 F1 | 	add	_var03, _var04
08c20     02 04 66 F0 | 	shl	_var03, #2
08c24     0C 00 00 FF 
08c28     0C E4 85 F1 | 	sub	objptr, ##6156
08c2c     F2 04 02 F1 | 	add	_var03, objptr
08c30     04 04 06 F1 | 	add	_var03, #4
08c34     02 03 62 FC | 	wrlong	_var02, _var03
08c38     0C 00 00 FF 
08c3c     0C E4 05 F1 | 	add	objptr, ##6156
08c40     F2 06 02 FB | 	rdlong	_var04, objptr
08c44     03 05 02 F6 | 	mov	_var03, _var04
08c48     01 04 66 F0 | 	shl	_var03, #1
08c4c     03 05 02 F1 | 	add	_var03, _var04
08c50     02 04 66 F0 | 	shl	_var03, #2
08c54     0C 00 00 FF 
08c58     0C E4 85 F1 | 	sub	objptr, ##6156
08c5c     F2 04 02 F1 | 	add	_var03, objptr
08c60     08 04 06 F1 | 	add	_var03, #8
08c64     02 13 62 FC | 	wrlong	arg01, _var03
08c68     0C 00 00 FF 
08c6c     0C E4 05 F1 | 	add	objptr, ##6156
08c70     F2 00 02 FB | 	rdlong	_var01, objptr
08c74     01 00 06 F1 | 	add	_var01, #1
08c78     F2 00 62 FC | 	wrlong	_var01, objptr
08c7c     3A 00 00 FF 
08c80     1C E4 85 F1 | 	sub	objptr, ##29724
08c84                 | LR__0720
08c84                 | _push_ret
08c84     2D 00 64 FD | 	ret
08c88                 | 
08c88                 | ' 
08c88                 | ' ' ------------------ push a variable on the stack as an independent operation called by execute_line 
08c88                 | ' 
08c88                 | ' sub do_push
08c88                 | _do_push
08c88                 | ' if stackpointer<maxstack then 
08c88     3A 00 00 FF 
08c8c     1C E4 05 F1 | 	add	objptr, ##29724
08c90     F2 00 02 FB | 	rdlong	_var01, objptr
08c94     3A 00 00 FF 
08c98     1C E4 85 F1 | 	sub	objptr, ##29724
08c9c     01 00 00 FF 
08ca0     00 00 56 F2 | 	cmps	_var01, ##512 wc
08ca4     F8 00 90 3D |  if_ae	jmp	#LR__0730
08ca8     41 00 00 FF 
08cac     44 E4 05 F1 | 	add	objptr, ##33348
08cb0     F2 02 02 FB | 	rdlong	_var02, objptr
08cb4     01 05 02 F6 | 	mov	_var03, _var02
08cb8     01 04 66 F0 | 	shl	_var03, #1
08cbc     01 05 02 F1 | 	add	_var03, _var02
08cc0     02 04 66 F0 | 	shl	_var03, #2
08cc4     03 00 00 FF 
08cc8     04 E4 85 F1 | 	sub	objptr, ##1540
08ccc     F2 04 02 F1 | 	add	_var03, objptr
08cd0     02 01 02 FB | 	rdlong	_var01, _var03
08cd4     04 04 06 F1 | 	add	_var03, #4
08cd8     02 07 02 FB | 	rdlong	_var04, _var03
08cdc     01 05 02 F6 | 	mov	_var03, _var02
08ce0     01 04 66 F0 | 	shl	_var03, #1
08ce4     01 05 02 F1 | 	add	_var03, _var02
08ce8     02 04 66 F0 | 	shl	_var03, #2
08cec     F2 04 02 F1 | 	add	_var03, objptr
08cf0     08 04 06 F1 | 	add	_var03, #8
08cf4     02 03 02 FB | 	rdlong	_var02, _var03
08cf8     04 00 00 FF 
08cfc     24 E4 85 F1 | 	sub	objptr, ##2084
08d00     F2 04 02 FB | 	rdlong	_var03, objptr
08d04     02 09 02 F6 | 	mov	_var05, _var03
08d08     01 08 66 F0 | 	shl	_var05, #1
08d0c     02 09 02 F1 | 	add	_var05, _var03
08d10     02 08 66 F0 | 	shl	_var05, #2
08d14     0C 00 00 FF 
08d18     0C E4 85 F1 | 	sub	objptr, ##6156
08d1c     F2 08 02 F1 | 	add	_var05, objptr
08d20     04 01 62 FC | 	wrlong	_var01, _var05
08d24     0C 00 00 FF 
08d28     0C E4 05 F1 | 	add	objptr, ##6156
08d2c     F2 08 02 FB | 	rdlong	_var05, objptr
08d30     04 05 02 F6 | 	mov	_var03, _var05
08d34     01 04 66 F0 | 	shl	_var03, #1
08d38     04 05 02 F1 | 	add	_var03, _var05
08d3c     02 04 66 F0 | 	shl	_var03, #2
08d40     0C 00 00 FF 
08d44     0C E4 85 F1 | 	sub	objptr, ##6156
08d48     F2 04 02 F1 | 	add	_var03, objptr
08d4c     04 04 06 F1 | 	add	_var03, #4
08d50     02 07 62 FC | 	wrlong	_var04, _var03
08d54     0C 00 00 FF 
08d58     0C E4 05 F1 | 	add	objptr, ##6156
08d5c     F2 08 02 FB | 	rdlong	_var05, objptr
08d60     04 07 02 F6 | 	mov	_var04, _var05
08d64     01 06 66 F0 | 	shl	_var04, #1
08d68     04 07 02 F1 | 	add	_var04, _var05
08d6c     02 06 66 F0 | 	shl	_var04, #2
08d70     0C 00 00 FF 
08d74     0C E4 85 F1 | 	sub	objptr, ##6156
08d78     F2 06 02 F1 | 	add	_var04, objptr
08d7c     08 06 06 F1 | 	add	_var04, #8
08d80     03 03 62 FC | 	wrlong	_var02, _var04
08d84     0C 00 00 FF 
08d88     0C E4 05 F1 | 	add	objptr, ##6156
08d8c     F2 00 02 FB | 	rdlong	_var01, objptr
08d90     01 00 06 F1 | 	add	_var01, #1
08d94     F2 00 62 FC | 	wrlong	_var01, objptr
08d98     3A 00 00 FF 
08d9c     1C E4 85 F1 | 	sub	objptr, ##29724
08da0                 | LR__0730
08da0                 | _do_push_ret
08da0     2D 00 64 FD | 	ret
08da4                 | 
08da4                 | ' 
08da4                 | '   
08da4                 | ' sub csave_block(address as ulong)
08da4                 | _csave_block
08da4     09 01 02 F6 | 	mov	_var01, arg01
08da8                 | ' 
08da8                 | ' ' let it be 1k blocks=256 longs=8 kbits=32 k samples
08da8                 | ' ' we enter it at the state of playing 1 kHz header tone
08da8                 | ' 
08da8                 | ' for i=0 to 63 step 2
08da8     00 02 06 F6 | 	mov	_var02, #0
08dac                 | LR__0740
08dac                 | '   do: loop until lpeek(base+32*7)>32768
08dac     2D 00 00 FF 
08db0     D4 E5 05 F1 | 	add	objptr, ##23508
08db4     97 0C 48 FB | 	callpa	#(@LR__0742-@LR__0741)>>2,fcache_load_ptr_
08db8                 | LR__0741
08db8     F2 12 02 FB | 	rdlong	arg01, objptr
08dbc     E0 12 06 F1 | 	add	arg01, #224
08dc0     09 FB 01 FB | 	rdlong	result1, arg01
08dc4     40 00 00 FF 
08dc8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
08dcc     E8 FF 9F CD |  if_b	jmp	#LR__0741
08dd0                 | LR__0742
08dd0     00 13 02 F6 | 	mov	arg01, _var01
08dd4     01 05 02 F6 | 	mov	_var03, _var02
08dd8     02 04 66 F0 | 	shl	_var03, #2
08ddc     02 13 02 F1 | 	add	arg01, _var03
08de0     09 07 02 FB | 	rdlong	_var04, arg01
08de4     24 00 00 FF 
08de8     B8 E4 05 F1 | 	add	objptr, ##18616
08dec     F2 06 62 FC | 	wrlong	_var04, objptr
08df0     52 00 00 FF 
08df4     8C E4 85 F1 | 	sub	objptr, ##42124
08df8                 | '   q=lpeek(address+4*i)
08df8                 | '      for bit=0 to 31
08df8     00 08 06 F6 | 	mov	_var05, #0
08dfc     97 84 48 FB | 	callpa	#(@LR__0747-@LR__0743)>>2,fcache_load_ptr_
08e00                 | LR__0743
08e00                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
08e00     52 00 00 FF 
08e04     8C E4 05 F1 | 	add	objptr, ##42124
08e08     F2 06 02 FB | 	rdlong	_var04, objptr
08e0c     52 00 00 FF 
08e10     8C E4 85 F1 | 	sub	objptr, ##42124
08e14     04 05 C2 F9 | 	decod	_var03, _var05
08e18     02 07 CA F7 | 	test	_var04, _var03 wz
08e1c     60 00 90 AD |  if_e	jmp	#LR__0744
08e20     04 05 02 F6 | 	mov	_var03, _var05
08e24     02 04 66 F0 | 	shl	_var03, #2
08e28     4E 00 00 FF 
08e2c     70 E4 05 F1 | 	add	objptr, ##40048
08e30     F2 04 02 F1 | 	add	_var03, objptr
08e34     02 FF 48 FC | 	wrbyte	#127, _var03
08e38     04 05 02 F6 | 	mov	_var03, _var05
08e3c     02 04 66 F0 | 	shl	_var03, #2
08e40     01 04 06 F1 | 	add	_var03, #1
08e44     F2 04 02 F1 | 	add	_var03, objptr
08e48     02 01 49 FC | 	wrbyte	#128, _var03
08e4c     04 05 02 F6 | 	mov	_var03, _var05
08e50     02 04 66 F0 | 	shl	_var03, #2
08e54     02 04 06 F1 | 	add	_var03, #2
08e58     F2 04 02 F1 | 	add	_var03, objptr
08e5c     02 FF 48 FC | 	wrbyte	#127, _var03
08e60     04 05 02 F6 | 	mov	_var03, _var05
08e64     02 04 66 F0 | 	shl	_var03, #2
08e68     03 04 06 F1 | 	add	_var03, #3
08e6c     F2 04 02 F1 | 	add	_var03, objptr
08e70     02 01 49 FC | 	wrbyte	#128, _var03
08e74     4E 00 00 FF 
08e78     70 E4 85 F1 | 	sub	objptr, ##40048
08e7c     5C 00 90 FD | 	jmp	#LR__0745
08e80                 | LR__0744
08e80     04 05 02 F6 | 	mov	_var03, _var05
08e84     02 04 66 F0 | 	shl	_var03, #2
08e88     4E 00 00 FF 
08e8c     70 E4 05 F1 | 	add	objptr, ##40048
08e90     F2 04 02 F1 | 	add	_var03, objptr
08e94     02 01 49 FC | 	wrbyte	#128, _var03
08e98     04 05 02 F6 | 	mov	_var03, _var05
08e9c     02 04 66 F0 | 	shl	_var03, #2
08ea0     01 04 06 F1 | 	add	_var03, #1
08ea4     F2 04 02 F1 | 	add	_var03, objptr
08ea8     02 01 49 FC | 	wrbyte	#128, _var03
08eac     04 05 02 F6 | 	mov	_var03, _var05
08eb0     02 04 66 F0 | 	shl	_var03, #2
08eb4     02 04 06 F1 | 	add	_var03, #2
08eb8     F2 04 02 F1 | 	add	_var03, objptr
08ebc     02 FF 48 FC | 	wrbyte	#127, _var03
08ec0     04 05 02 F6 | 	mov	_var03, _var05
08ec4     02 04 66 F0 | 	shl	_var03, #2
08ec8     03 04 06 F1 | 	add	_var03, #3
08ecc     F2 04 02 F1 | 	add	_var03, objptr
08ed0     02 FF 48 FC | 	wrbyte	#127, _var03
08ed4     4E 00 00 FF 
08ed8     70 E4 85 F1 | 	sub	objptr, ##40048
08edc                 | LR__0745
08edc     01 08 06 F1 | 	add	_var05, #1
08ee0     20 08 56 F2 | 	cmps	_var05, #32 wc
08ee4     18 FF 9F CD |  if_b	jmp	#LR__0743
08ee8                 | '   do: loop until lpeek(base+32*7)<32768
08ee8     2D 00 00 FF 
08eec     D4 E5 05 F1 | 	add	objptr, ##23508
08ef0                 | LR__0746
08ef0     F2 12 02 FB | 	rdlong	arg01, objptr
08ef4     E0 12 06 F1 | 	add	arg01, #224
08ef8     09 FB 01 FB | 	rdlong	result1, arg01
08efc     40 00 00 FF 
08f00     00 FA 55 F2 | 	cmps	result1, ##32768 wc
08f04     E8 FF 9F 3D |  if_ae	jmp	#LR__0746
08f08                 | LR__0747
08f08     00 13 02 F6 | 	mov	arg01, _var01
08f0c     04 12 06 F1 | 	add	arg01, #4
08f10     01 05 02 F6 | 	mov	_var03, _var02
08f14     02 04 66 F0 | 	shl	_var03, #2
08f18     02 13 02 F1 | 	add	arg01, _var03
08f1c     09 07 02 FB | 	rdlong	_var04, arg01
08f20     24 00 00 FF 
08f24     B8 E4 05 F1 | 	add	objptr, ##18616
08f28     F2 06 62 FC | 	wrlong	_var04, objptr
08f2c     52 00 00 FF 
08f30     8C E4 85 F1 | 	sub	objptr, ##42124
08f34                 | '   q=lpeek(address+4+4*i)
08f34                 | '      for bit=0 to 31
08f34     00 08 06 F6 | 	mov	_var05, #0
08f38     97 94 48 FB | 	callpa	#(@LR__0751-@LR__0748)>>2,fcache_load_ptr_
08f3c                 | LR__0748
08f3c                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
08f3c     52 00 00 FF 
08f40     8C E4 05 F1 | 	add	objptr, ##42124
08f44     F2 06 02 FB | 	rdlong	_var04, objptr
08f48     52 00 00 FF 
08f4c     8C E4 85 F1 | 	sub	objptr, ##42124
08f50     04 05 C2 F9 | 	decod	_var03, _var05
08f54     02 07 CA F7 | 	test	_var04, _var03 wz
08f58     80 00 90 AD |  if_e	jmp	#LR__0749
08f5c     04 0B 02 F6 | 	mov	_var06, _var05
08f60     02 0A 66 F0 | 	shl	_var06, #2
08f64     80 04 06 F6 | 	mov	_var03, #128
08f68     05 05 02 F1 | 	add	_var03, _var06
08f6c     4E 00 00 FF 
08f70     70 E4 05 F1 | 	add	objptr, ##40048
08f74     F2 04 02 F1 | 	add	_var03, objptr
08f78     02 FF 48 FC | 	wrbyte	#127, _var03
08f7c     04 0B 02 F6 | 	mov	_var06, _var05
08f80     02 0A 66 F0 | 	shl	_var06, #2
08f84     80 04 06 F6 | 	mov	_var03, #128
08f88     05 05 02 F1 | 	add	_var03, _var06
08f8c     01 04 06 F1 | 	add	_var03, #1
08f90     F2 04 02 F1 | 	add	_var03, objptr
08f94     02 01 49 FC | 	wrbyte	#128, _var03
08f98     04 0B 02 F6 | 	mov	_var06, _var05
08f9c     02 0A 66 F0 | 	shl	_var06, #2
08fa0     80 04 06 F6 | 	mov	_var03, #128
08fa4     05 05 02 F1 | 	add	_var03, _var06
08fa8     02 04 06 F1 | 	add	_var03, #2
08fac     F2 04 02 F1 | 	add	_var03, objptr
08fb0     02 FF 48 FC | 	wrbyte	#127, _var03
08fb4     04 0B 02 F6 | 	mov	_var06, _var05
08fb8     02 0A 66 F0 | 	shl	_var06, #2
08fbc     80 04 06 F6 | 	mov	_var03, #128
08fc0     05 05 02 F1 | 	add	_var03, _var06
08fc4     03 04 06 F1 | 	add	_var03, #3
08fc8     F2 04 02 F1 | 	add	_var03, objptr
08fcc     02 01 49 FC | 	wrbyte	#128, _var03
08fd0     4E 00 00 FF 
08fd4     70 E4 85 F1 | 	sub	objptr, ##40048
08fd8     7C 00 90 FD | 	jmp	#LR__0750
08fdc                 | LR__0749
08fdc     04 0B 02 F6 | 	mov	_var06, _var05
08fe0     02 0A 66 F0 | 	shl	_var06, #2
08fe4     80 04 06 F6 | 	mov	_var03, #128
08fe8     05 05 02 F1 | 	add	_var03, _var06
08fec     4E 00 00 FF 
08ff0     70 E4 05 F1 | 	add	objptr, ##40048
08ff4     F2 04 02 F1 | 	add	_var03, objptr
08ff8     02 01 49 FC | 	wrbyte	#128, _var03
08ffc     04 0B 02 F6 | 	mov	_var06, _var05
09000     02 0A 66 F0 | 	shl	_var06, #2
09004     80 04 06 F6 | 	mov	_var03, #128
09008     05 05 02 F1 | 	add	_var03, _var06
0900c     01 04 06 F1 | 	add	_var03, #1
09010     F2 04 02 F1 | 	add	_var03, objptr
09014     02 01 49 FC | 	wrbyte	#128, _var03
09018     04 0B 02 F6 | 	mov	_var06, _var05
0901c     02 0A 66 F0 | 	shl	_var06, #2
09020     80 04 06 F6 | 	mov	_var03, #128
09024     05 05 02 F1 | 	add	_var03, _var06
09028     02 04 06 F1 | 	add	_var03, #2
0902c     F2 04 02 F1 | 	add	_var03, objptr
09030     02 FF 48 FC | 	wrbyte	#127, _var03
09034     04 0B 02 F6 | 	mov	_var06, _var05
09038     02 0A 66 F0 | 	shl	_var06, #2
0903c     80 04 06 F6 | 	mov	_var03, #128
09040     05 05 02 F1 | 	add	_var03, _var06
09044     03 04 06 F1 | 	add	_var03, #3
09048     F2 04 02 F1 | 	add	_var03, objptr
0904c     02 FF 48 FC | 	wrbyte	#127, _var03
09050     4E 00 00 FF 
09054     70 E4 85 F1 | 	sub	objptr, ##40048
09058                 | LR__0750
09058     01 08 06 F1 | 	add	_var05, #1
0905c     20 08 56 F2 | 	cmps	_var05, #32 wc
09060     D8 FE 9F CD |  if_b	jmp	#LR__0748
09064                 | LR__0751
09064     02 02 06 F1 | 	add	_var02, #2
09068     40 02 56 F2 | 	cmps	_var02, #64 wc
0906c     3C FD 9F CD |  if_b	jmp	#LR__0740
09070                 | ' do: loop until lpeek(base+32*7)>32768
09070     2D 00 00 FF 
09074     D4 E5 05 F1 | 	add	objptr, ##23508
09078     97 84 48 FB | 	callpa	#(@LR__0760-@LR__0752)>>2,fcache_load_ptr_
0907c                 | LR__0752
0907c     F2 12 02 FB | 	rdlong	arg01, objptr
09080     E0 12 06 F1 | 	add	arg01, #224
09084     09 FB 01 FB | 	rdlong	result1, arg01
09088     40 00 00 FF 
0908c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
09090     E8 FF 9F CD |  if_b	jmp	#LR__0752
09094     2D 00 00 FF 
09098     D4 E5 85 F1 | 	sub	objptr, ##23508
0909c                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0909c     00 02 06 F6 | 	mov	_var02, #0
090a0                 | LR__0753
090a0     01 07 52 F6 | 	abs	_var04, _var02 wc
090a4     07 06 06 F5 | 	and	_var04, #7
090a8     03 07 82 F6 | 	negc	_var04, _var04
090ac     04 06 56 F2 | 	cmps	_var04, #4 wc
090b0     20 00 90 3D |  if_ae	jmp	#LR__0754
090b4     01 0B 02 F6 | 	mov	_var06, _var02
090b8     4E 00 00 FF 
090bc     70 E4 05 F1 | 	add	objptr, ##40048
090c0     F2 0A 02 F1 | 	add	_var06, objptr
090c4     05 FF 48 FC | 	wrbyte	#127, _var06
090c8     4E 00 00 FF 
090cc     70 E4 85 F1 | 	sub	objptr, ##40048
090d0     1C 00 90 FD | 	jmp	#LR__0755
090d4                 | LR__0754
090d4     01 0B 02 F6 | 	mov	_var06, _var02
090d8     4E 00 00 FF 
090dc     70 E4 05 F1 | 	add	objptr, ##40048
090e0     F2 0A 02 F1 | 	add	_var06, objptr
090e4     05 01 49 FC | 	wrbyte	#128, _var06
090e8     4E 00 00 FF 
090ec     70 E4 85 F1 | 	sub	objptr, ##40048
090f0                 | LR__0755
090f0     01 02 06 F1 | 	add	_var02, #1
090f4     80 02 56 F2 | 	cmps	_var02, #128 wc
090f8     A4 FF 9F CD |  if_b	jmp	#LR__0753
090fc                 | ' 
090fc                 | ' do: loop until lpeek(base+32*7)<32768
090fc     2D 00 00 FF 
09100     D4 E5 05 F1 | 	add	objptr, ##23508
09104                 | LR__0756
09104     F2 12 02 FB | 	rdlong	arg01, objptr
09108     E0 12 06 F1 | 	add	arg01, #224
0910c     09 FB 01 FB | 	rdlong	result1, arg01
09110     40 00 00 FF 
09114     00 FA 55 F2 | 	cmps	result1, ##32768 wc
09118     E8 FF 9F 3D |  if_ae	jmp	#LR__0756
0911c     2D 00 00 FF 
09120     D4 E5 85 F1 | 	sub	objptr, ##23508
09124                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09124     80 02 06 F6 | 	mov	_var02, #128
09128                 | LR__0757
09128     01 07 52 F6 | 	abs	_var04, _var02 wc
0912c     07 06 06 F5 | 	and	_var04, #7
09130     03 07 82 F6 | 	negc	_var04, _var04
09134     04 06 56 F2 | 	cmps	_var04, #4 wc
09138     20 00 90 3D |  if_ae	jmp	#LR__0758
0913c     01 0B 02 F6 | 	mov	_var06, _var02
09140     4E 00 00 FF 
09144     70 E4 05 F1 | 	add	objptr, ##40048
09148     F2 0A 02 F1 | 	add	_var06, objptr
0914c     05 FF 48 FC | 	wrbyte	#127, _var06
09150     4E 00 00 FF 
09154     70 E4 85 F1 | 	sub	objptr, ##40048
09158     1C 00 90 FD | 	jmp	#LR__0759
0915c                 | LR__0758
0915c     01 0B 02 F6 | 	mov	_var06, _var02
09160     4E 00 00 FF 
09164     70 E4 05 F1 | 	add	objptr, ##40048
09168     F2 0A 02 F1 | 	add	_var06, objptr
0916c     05 01 49 FC | 	wrbyte	#128, _var06
09170     4E 00 00 FF 
09174     70 E4 85 F1 | 	sub	objptr, ##40048
09178                 | LR__0759
09178     01 02 06 F1 | 	add	_var02, #1
0917c     00 03 16 F2 | 	cmp	_var02, #256 wc
09180     A4 FF 9F CD |  if_b	jmp	#LR__0757
09184                 | LR__0760
09184                 | _csave_block_ret
09184     2D 00 64 FD | 	ret
09188                 | 
09188                 | ' 
09188                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
09188                 | _csave_addtoblock
09188     04 4A 05 F6 | 	mov	COUNT_, #4
0918c     A8 00 A0 FD | 	call	#pushregs_
09190     09 1F 02 F6 | 	mov	local01, arg01
09194                 | ' 
09194                 | ' 
09194                 | ' if force=0 then
09194     07 14 4E F7 | 	zerox	arg02, #7 wz
09198     78 00 90 5D |  if_ne	jmp	#LR__0770
0919c     50 00 00 FF 
091a0     70 E5 05 F1 | 	add	objptr, ##41328
091a4     F2 14 02 FB | 	rdlong	arg02, objptr
091a8     02 00 00 FF 
091ac     00 E4 85 F1 | 	sub	objptr, ##1024
091b0     F2 14 02 F1 | 	add	arg02, objptr
091b4     0A 1F 42 FC | 	wrbyte	local01, arg02
091b8     02 00 00 FF 
091bc     00 E4 05 F1 | 	add	objptr, ##1024
091c0     F2 1E 02 FB | 	rdlong	local01, objptr
091c4     01 1E 06 F1 | 	add	local01, #1
091c8     F2 1E 62 FC | 	wrlong	local01, objptr
091cc                 | '   block(blockptr)=d
091cc                 | '   blockptr+=1
091cc                 | '   if blockptr>=255 then
091cc     50 00 00 FF 
091d0     70 E5 85 F1 | 	sub	objptr, ##41328
091d4     FF 1E 16 F2 | 	cmp	local01, #255 wc
091d8     E4 00 90 CD |  if_b	jmp	#LR__0774
091dc     4E 00 00 FF 
091e0     70 E5 05 F1 | 	add	objptr, ##40304
091e4     F2 12 02 F6 | 	mov	arg01, objptr
091e8     4E 00 00 FF 
091ec     70 E5 85 F1 | 	sub	objptr, ##40304
091f0     B0 FB BF FD | 	call	#_csave_block
091f4     50 00 00 FF 
091f8     70 E5 05 F1 | 	add	objptr, ##41328
091fc     F2 00 68 FC | 	wrlong	#0, objptr
09200     50 00 00 FF 
09204     70 E5 85 F1 | 	sub	objptr, ##41328
09208     2C 13 06 F6 | 	mov	arg01, #300
0920c     DC D3 B0 FD | 	call	#__system___waitms
09210     AC 00 90 FD | 	jmp	#LR__0774
09214                 | LR__0770
09214     50 00 00 FF 
09218     70 E5 05 F1 | 	add	objptr, ##41328
0921c     F2 20 02 FB | 	rdlong	local02, objptr
09220     02 00 00 FF 
09224     00 E4 85 F1 | 	sub	objptr, ##1024
09228     F2 20 02 F1 | 	add	local02, objptr
0922c     10 1F 42 FC | 	wrbyte	local01, local02
09230                 | '   block(blockptr)=d
09230                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
09230     02 00 00 FF 
09234     00 E4 05 F1 | 	add	objptr, ##1024
09238     F2 22 02 FB | 	rdlong	local03, objptr
0923c     50 00 00 FF 
09240     70 E5 85 F1 | 	sub	objptr, ##41328
09244     FF 22 16 F2 | 	cmp	local03, #255 wc
09248     40 00 90 3D |  if_ae	jmp	#LR__0773
0924c     50 00 00 FF 
09250     70 E5 05 F1 | 	add	objptr, ##41328
09254     F2 24 02 FB | 	rdlong	local04, objptr
09258     50 00 00 FF 
0925c     70 E5 85 F1 | 	sub	objptr, ##41328
09260                 | LR__0771
09260     00 25 56 F2 | 	cmps	local04, #256 wc
09264     24 00 90 3D |  if_ae	jmp	#LR__0772
09268     12 21 02 F6 | 	mov	local02, local04
0926c     4E 00 00 FF 
09270     70 E5 05 F1 | 	add	objptr, ##40304
09274     F2 20 02 F1 | 	add	local02, objptr
09278     10 01 48 FC | 	wrbyte	#0, local02
0927c     01 24 06 F1 | 	add	local04, #1
09280     4E 00 00 FF 
09284     70 E5 85 F1 | 	sub	objptr, ##40304
09288     D4 FF 9F FD | 	jmp	#LR__0771
0928c                 | LR__0772
0928c                 | LR__0773
0928c     4E 00 00 FF 
09290     70 E5 05 F1 | 	add	objptr, ##40304
09294     F2 12 02 F6 | 	mov	arg01, objptr
09298     4E 00 00 FF 
0929c     70 E5 85 F1 | 	sub	objptr, ##40304
092a0     00 FB BF FD | 	call	#_csave_block
092a4     50 00 00 FF 
092a8     70 E5 05 F1 | 	add	objptr, ##41328
092ac     F2 00 68 FC | 	wrlong	#0, objptr
092b0     50 00 00 FF 
092b4     70 E5 85 F1 | 	sub	objptr, ##41328
092b8     2C 13 06 F6 | 	mov	arg01, #300
092bc     2C D3 B0 FD | 	call	#__system___waitms
092c0                 | LR__0774
092c0     A7 F0 03 F6 | 	mov	ptra, fp
092c4     B2 00 A0 FD | 	call	#popregs_
092c8                 | _csave_addtoblock_ret
092c8     2D 00 64 FD | 	ret
092cc                 | 
092cc                 | ' 
092cc                 | ' sub test_csave
092cc                 | _test_csave
092cc     04 4A 05 F6 | 	mov	COUNT_, #4
092d0     A8 00 A0 FD | 	call	#pushregs_
092d4     C0 F0 07 F1 | 	add	ptra, #192
092d8                 | ' 'dim fileheader,savestart, saveptr as ulong
092d8                 | ' 
092d8                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
092d8     41 00 00 FF 
092dc     48 E4 05 F1 | 	add	objptr, ##33352
092e0     F2 12 02 FB | 	rdlong	arg01, objptr
092e4     41 00 00 FF 
092e8     48 E4 85 F1 | 	sub	objptr, ##33352
092ec     A4 9C B0 FD | 	call	#_pslpeek
092f0     FF FF 7F FF 
092f4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
092f8     0C 00 90 5D |  if_ne	jmp	#LR__0780
092fc     1B 12 06 F6 | 	mov	arg01, #27
09300     D4 9A B0 FD | 	call	#_printerror
09304     0C 03 90 FD | 	jmp	#LR__0792
09308                 | LR__0780
09308     04 F8 BF FD | 	call	#_pop
0930c     FF 1E 02 F6 | 	mov	local01, result3
09310     90 4E 05 F1 | 	add	fp, #144
09314     A7 FA 61 FC | 	wrlong	result1, fp
09318     04 4E 05 F1 | 	add	fp, #4
0931c     A7 FC 61 FC | 	wrlong	result2, fp
09320     04 4E 05 F1 | 	add	fp, #4
09324     A7 1E 62 FC | 	wrlong	local01, fp
09328                 | ' t1=pop()
09328                 | ' if t1.result_type<>result_string then name$="noname.bas" else name$=t1.result.sresult
09328     98 4E 85 F1 | 	sub	fp, #152
0932c     1F 1E 0E F2 | 	cmp	local01, #31 wz
09330     2B 01 00 5F 
09334     CA 1E 06 56 |  if_ne	mov	local01, ##@LR__4310
09338     8C 4E 05 51 |  if_ne	add	fp, #140
0933c     A7 1E 62 5C |  if_ne	wrlong	local01, fp
09340     8C 4E 85 51 |  if_ne	sub	fp, #140
09344     90 4E 05 A1 |  if_e	add	fp, #144
09348     A7 1E 02 AB |  if_e	rdlong	local01, fp
0934c     04 4E 85 A1 |  if_e	sub	fp, #4
09350     A7 1E 62 AC |  if_e	wrlong	local01, fp
09354     8C 4E 85 A1 |  if_e	sub	fp, #140
09358                 | ' 
09358                 | ' ' prepare 1 kHz header wave
09358                 | ' 
09358                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
09358     A7 00 68 FC | 	wrlong	#0, fp
0935c     97 34 48 FB | 	callpa	#(@LR__0784-@LR__0781)>>2,fcache_load_ptr_
09360                 | LR__0781
09360     A7 1E 02 FB | 	rdlong	local01, fp
09364     0F 1F 52 F6 | 	abs	local01, local01 wc
09368     07 1E 06 F5 | 	and	local01, #7
0936c     0F 1F 82 F6 | 	negc	local01, local01
09370     04 1E 56 F2 | 	cmps	local01, #4 wc
09374     20 00 90 3D |  if_ae	jmp	#LR__0782
09378     A7 1E 02 FB | 	rdlong	local01, fp
0937c     4E 00 00 FF 
09380     70 E4 05 F1 | 	add	objptr, ##40048
09384     F2 1E 02 F1 | 	add	local01, objptr
09388     0F FF 48 FC | 	wrbyte	#127, local01
0938c     4E 00 00 FF 
09390     70 E4 85 F1 | 	sub	objptr, ##40048
09394     1C 00 90 FD | 	jmp	#LR__0783
09398                 | LR__0782
09398     A7 1E 02 FB | 	rdlong	local01, fp
0939c     4E 00 00 FF 
093a0     70 E4 05 F1 | 	add	objptr, ##40048
093a4     F2 1E 02 F1 | 	add	local01, objptr
093a8     0F 01 49 FC | 	wrbyte	#128, local01
093ac     4E 00 00 FF 
093b0     70 E4 85 F1 | 	sub	objptr, ##40048
093b4                 | LR__0783
093b4     A7 1E 02 FB | 	rdlong	local01, fp
093b8     01 1E 06 F1 | 	add	local01, #1
093bc     A7 1E 62 FC | 	wrlong	local01, fp
093c0     00 1F 56 F2 | 	cmps	local01, #256 wc
093c4     98 FF 9F CD |  if_b	jmp	#LR__0781
093c8                 | LR__0784
093c8     4E 00 00 FF 
093cc     70 E4 05 F1 | 	add	objptr, ##40048
093d0     F2 14 02 F6 | 	mov	arg02, objptr
093d4     07 12 06 F6 | 	mov	arg01, #7
093d8     0F 00 00 FF 
093dc     40 17 06 F6 | 	mov	arg03, ##8000
093e0     0E 18 C6 F9 | 	decod	arg04, #14
093e4     00 1B 06 F6 | 	mov	arg05, #256
093e8     00 1C 06 F6 | 	mov	arg06, #0
093ec     42 00 00 FF 
093f0     B0 E5 85 F1 | 	sub	objptr, ##34224
093f4     68 CB B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
093f8     0B 00 00 FF 
093fc     C0 E4 85 F1 | 	sub	objptr, ##5824
09400     05 00 00 FF 
09404     B8 13 06 F6 | 	mov	arg01, ##3000
09408     E0 D1 B0 FD | 	call	#__system___waitms
0940c     50 00 00 FF 
09410     70 E5 05 F1 | 	add	objptr, ##41328
09414     F2 00 68 FC | 	wrlong	#0, objptr
09418     50 00 00 FF 
0941c     70 E5 85 F1 | 	sub	objptr, ##41328
09420     72 12 06 F6 | 	mov	arg01, #114
09424     00 14 06 F6 | 	mov	arg02, #0
09428     5C FD BF FD | 	call	#_csave_addtoblock
0942c     62 12 06 F6 | 	mov	arg01, #98
09430     00 14 06 F6 | 	mov	arg02, #0
09434     50 FD BF FD | 	call	#_csave_addtoblock
09438     61 12 06 F6 | 	mov	arg01, #97
0943c     00 14 06 F6 | 	mov	arg02, #0
09440     44 FD BF FD | 	call	#_csave_addtoblock
09444     0D 12 06 F6 | 	mov	arg01, #13
09448     00 14 06 F6 | 	mov	arg02, #0
0944c     38 FD BF FD | 	call	#_csave_addtoblock
09450                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
09450                 | ' waitms 3000 
09450                 | ' 
09450                 | ' blockptr=0
09450                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
09450                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
09450     A7 02 68 FC | 	wrlong	#1, fp
09454     8C 4E 05 F1 | 	add	fp, #140
09458     A7 12 02 FB | 	rdlong	arg01, fp
0945c     8C 4E 85 F1 | 	sub	fp, #140
09460     09 21 02 F6 | 	mov	local02, arg01
09464     97 06 48 FB | 	callpa	#(@LR__0786-@LR__0785)>>2,fcache_load_ptr_
09468                 | LR__0785
09468     10 FB C9 FA | 	rdbyte	result1, local02 wz
0946c     01 20 06 51 |  if_ne	add	local02, #1
09470     F4 FF 9F 5D |  if_ne	jmp	#LR__0785
09474                 | LR__0786
09474     09 21 82 F1 | 	sub	local02, arg01
09478     10 23 02 F6 | 	mov	local03, local02
0947c     01 22 06 F1 | 	add	local03, #1
09480                 | LR__0787
09480     A7 1E 02 FB | 	rdlong	local01, fp
09484     11 1F 52 F2 | 	cmps	local01, local03 wc
09488     34 00 90 3D |  if_ae	jmp	#LR__0788
0948c     8C 4E 05 F1 | 	add	fp, #140
09490     A7 12 02 FB | 	rdlong	arg01, fp
09494     8C 4E 85 F1 | 	sub	fp, #140
09498     A7 14 02 FB | 	rdlong	arg02, fp
0949c     01 16 06 F6 | 	mov	arg03, #1
094a0     7C EF B0 FD | 	call	#__system__Mid_S
094a4     FD 12 C2 FA | 	rdbyte	arg01, result1
094a8     00 14 06 F6 | 	mov	arg02, #0
094ac     D8 FC BF FD | 	call	#_csave_addtoblock
094b0     A7 1E 02 FB | 	rdlong	local01, fp
094b4     01 1E 06 F1 | 	add	local01, #1
094b8     A7 1E 62 FC | 	wrlong	local01, fp
094bc     C0 FF 9F FD | 	jmp	#LR__0787
094c0                 | LR__0788
094c0     00 12 06 F6 | 	mov	arg01, #0
094c4     00 14 06 F6 | 	mov	arg02, #0
094c8     BC FC BF FD | 	call	#_csave_addtoblock
094cc     72 12 06 F6 | 	mov	arg01, #114
094d0     00 14 06 F6 | 	mov	arg02, #0
094d4     B0 FC BF FD | 	call	#_csave_addtoblock
094d8     62 12 06 F6 | 	mov	arg01, #98
094dc     00 14 06 F6 | 	mov	arg02, #0
094e0     A4 FC BF FD | 	call	#_csave_addtoblock
094e4     73 12 06 F6 | 	mov	arg01, #115
094e8     00 14 06 F6 | 	mov	arg02, #0
094ec     98 FC BF FD | 	call	#_csave_addtoblock
094f0     0D 12 06 F6 | 	mov	arg01, #13
094f4     00 14 06 F6 | 	mov	arg02, #0
094f8     8C FC BF FD | 	call	#_csave_addtoblock
094fc     41 00 00 FF 
09500     48 E4 05 F1 | 	add	objptr, ##33352
09504     F2 1E 02 FB | 	rdlong	local01, objptr
09508     41 00 00 FF 
0950c     48 E4 85 F1 | 	sub	objptr, ##33352
09510     9C 4E 05 F1 | 	add	fp, #156
09514     A7 1E 62 FC | 	wrlong	local01, fp
09518     9C 4E 85 F1 | 	sub	fp, #156
0951c                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0951c                 | ' 
0951c                 | ' saveptr=programstart
0951c                 | ' do
0951c                 | LR__0789
0951c     A0 4E 05 F1 | 	add	fp, #160
09520     A7 12 02 F6 | 	mov	arg01, fp
09524     04 4E 85 F1 | 	sub	fp, #4
09528     A7 14 02 FB | 	rdlong	arg02, fp
0952c     9C 4E 85 F1 | 	sub	fp, #156
09530     18 16 06 F6 | 	mov	arg03, #24
09534     0B 00 00 FF 
09538     C0 E4 05 F1 | 	add	objptr, ##5824
0953c     CC C2 B0 FD | 	call	#_psram_spin2_read1
09540     0C 4E 05 F1 | 	add	fp, #12
09544     A7 12 02 F6 | 	mov	arg01, fp
09548     9C 4E 05 F1 | 	add	fp, #156
0954c     A7 14 02 FB | 	rdlong	arg02, fp
09550     04 4E 05 F1 | 	add	fp, #4
09554     A7 16 02 FB | 	rdlong	arg03, fp
09558     AC 4E 85 F1 | 	sub	fp, #172
0955c     AC C2 B0 FD | 	call	#_psram_spin2_read1
09560     0B 00 00 FF 
09564     C0 E4 85 F1 | 	sub	objptr, ##5824
09568     AC 4E 05 F1 | 	add	fp, #172
0956c     A7 12 02 FB | 	rdlong	arg01, fp
09570     AC 4E 85 F1 | 	sub	fp, #172
09574     00 14 06 F6 | 	mov	arg02, #0
09578     0C FC BF FD | 	call	#_csave_addtoblock
0957c                 | '   psram.read1(varptr(header(0)),saveptr,24)
0957c                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0957c                 | '   csave_addtoblock(header(3),0) ' that's always <255
0957c                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)    :next i
0957c     A7 00 68 FC | 	wrlong	#0, fp
09580     AC 4E 05 F1 | 	add	fp, #172
09584     A7 24 02 FB | 	rdlong	local04, fp
09588     AC 4E 85 F1 | 	sub	fp, #172
0958c                 | LR__0790
0958c     A7 1E 02 FB | 	rdlong	local01, fp
09590     12 1F 52 F2 | 	cmps	local01, local04 wc
09594     2C 00 90 3D |  if_ae	jmp	#LR__0791
09598     A7 22 02 FB | 	rdlong	local03, fp
0959c     0C 4E 05 F1 | 	add	fp, #12
095a0     A7 22 02 F1 | 	add	local03, fp
095a4     11 13 C2 FA | 	rdbyte	arg01, local03
095a8     00 14 06 F6 | 	mov	arg02, #0
095ac     0C 4E 85 F1 | 	sub	fp, #12
095b0     D4 FB BF FD | 	call	#_csave_addtoblock
095b4     A7 22 02 FB | 	rdlong	local03, fp
095b8     01 22 06 F1 | 	add	local03, #1
095bc     A7 22 62 FC | 	wrlong	local03, fp
095c0     C8 FF 9F FD | 	jmp	#LR__0790
095c4                 | LR__0791
095c4     B4 4E 05 F1 | 	add	fp, #180
095c8     A7 1E 02 FB | 	rdlong	local01, fp
095cc     18 4E 85 F1 | 	sub	fp, #24
095d0     A7 1E 62 FC | 	wrlong	local01, fp
095d4     18 4E 05 F1 | 	add	fp, #24
095d8     A7 1E 02 FB | 	rdlong	local01, fp
095dc     B4 4E 85 F1 | 	sub	fp, #180
095e0     FF FF 3F FF 
095e4     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
095e8     30 FF 9F 5D |  if_ne	jmp	#LR__0789
095ec     00 12 06 F6 | 	mov	arg01, #0
095f0     01 14 06 F6 | 	mov	arg02, #1
095f4     90 FB BF FD | 	call	#_csave_addtoblock
095f8     2D 00 00 FF 
095fc     D4 E5 05 F1 | 	add	objptr, ##23508
09600     F2 12 02 FB | 	rdlong	arg01, objptr
09604     2D 00 00 FF 
09608     D4 E5 85 F1 | 	sub	objptr, ##23508
0960c     F4 12 06 F1 | 	add	arg01, #244
09610     09 01 58 FC | 	wrword	#0, arg01
09614                 | LR__0792
09614     A7 F0 03 F6 | 	mov	ptra, fp
09618     B2 00 A0 FD | 	call	#popregs_
0961c                 | _test_csave_ret
0961c     2D 00 64 FD | 	ret
09620                 | 
09620                 | ' 
09620                 | ' ' ----------------- Save the program
09620                 | ' 
09620                 | ' sub do_save                           ''' <------------------------ TODO vartables has to be saved too! Or maybe o
09620                 | _do_save
09620     02 4A 05 F6 | 	mov	COUNT_, #2
09624     A8 00 A0 FD | 	call	#pushregs_
09628     01 00 00 FF 
0962c     BC F0 07 F1 | 	add	ptra, ##700
09630     01 00 00 FF 
09634     10 4E 05 F1 | 	add	fp, ##528
09638     B1 B0 86 FF 
0963c     A7 E4 68 FC | 	wrlong	##224486002, fp
09640     01 00 00 FF 
09644     10 4E 85 F1 | 	sub	fp, ##528
09648     C4 F4 BF FD | 	call	#_pop
0964c     FF 16 02 F6 | 	mov	arg03, result3
09650     A7 FA 61 FC | 	wrlong	result1, fp
09654     04 4E 05 F1 | 	add	fp, #4
09658     A7 FC 61 FC | 	wrlong	result2, fp
0965c     04 4E 05 F1 | 	add	fp, #4
09660     A7 16 62 FC | 	wrlong	arg03, fp
09664     08 4E 85 F1 | 	sub	fp, #8
09668                 | ' 
09668                 | ' fileheader=$0D616272' rba+ver'
09668                 | ' 
09668                 | ' t1=pop() 
09668                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
09668     41 00 00 FF 
0966c     48 E4 05 F1 | 	add	objptr, ##33352
09670     F2 12 02 FB | 	rdlong	arg01, objptr
09674     41 00 00 FF 
09678     48 E4 85 F1 | 	sub	objptr, ##33352
0967c     14 99 B0 FD | 	call	#_pslpeek
09680     FF FF 7F FF 
09684     FF FB 0D F2 | 	cmp	result1, ##-1 wz
09688     0C 00 90 5D |  if_ne	jmp	#LR__0800
0968c     1B 12 06 F6 | 	mov	arg01, #27
09690     44 97 B0 FD | 	call	#_printerror
09694     68 02 90 FD | 	jmp	#LR__0806
09698                 | LR__0800
09698                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
09698     08 4E 05 F1 | 	add	fp, #8
0969c     A7 16 02 FB | 	rdlong	arg03, fp
096a0     08 4E 85 F1 | 	sub	fp, #8
096a4     2B 16 0E F2 | 	cmp	arg03, #43 wz
096a8     18 00 90 5D |  if_ne	jmp	#LR__0801
096ac     A7 12 02 FB | 	rdlong	arg01, fp
096b0     48 11 B0 FD | 	call	#_convertstring
096b4     A7 FA 61 FC | 	wrlong	result1, fp
096b8     08 4E 05 F1 | 	add	fp, #8
096bc     A7 3E 68 FC | 	wrlong	#31, fp
096c0     08 4E 85 F1 | 	sub	fp, #8
096c4                 | LR__0801
096c4                 | ' if t1.result_type=result_string then
096c4     08 4E 05 F1 | 	add	fp, #8
096c8     A7 1E 02 FB | 	rdlong	local01, fp
096cc     08 4E 85 F1 | 	sub	fp, #8
096d0     1F 1E 0E F2 | 	cmp	local01, #31 wz
096d4     28 02 90 5D |  if_ne	jmp	#LR__0805
096d8                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas"
096d8     A7 12 02 FB | 	rdlong	arg01, fp
096dc     2B 01 00 FF 
096e0     D5 14 06 F6 | 	mov	arg02, ##@LR__4311
096e4     38 CC B0 FD | 	call	#__system___string_cmp
096e8     00 FA 0D F2 | 	cmp	result1, #0 wz
096ec     2B 01 00 AF 
096f0     D6 1E 06 A6 |  if_e	mov	local01, ##@LR__4312
096f4     A7 1E 62 AC |  if_e	wrlong	local01, fp
096f8                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
096f8     09 12 06 F6 | 	mov	arg01, #9
096fc     D8 16 B1 FD | 	call	#__system__close
09700     09 1E 06 F6 | 	mov	local01, #9
09704     49 00 00 FF 
09708     58 E4 05 F1 | 	add	objptr, ##37464
0970c     F2 12 02 FB | 	rdlong	arg01, objptr
09710     49 00 00 FF 
09714     58 E4 85 F1 | 	sub	objptr, ##37464
09718     2B 01 00 FF 
0971c     E1 14 06 F6 | 	mov	arg02, ##@LR__4313
09720     30 CC B0 FD | 	call	#__system___string_concat
09724     FD 12 02 F6 | 	mov	arg01, result1
09728     A7 14 02 FB | 	rdlong	arg02, fp
0972c     24 CC B0 FD | 	call	#__system___string_concat
09730     FD 14 02 F6 | 	mov	arg02, result1
09734     0F 13 02 F6 | 	mov	arg01, local01
09738     0D 16 06 F6 | 	mov	arg03, #13
0973c     BC D7 B0 FD | 	call	#__system___basic_open_string
09740     01 00 00 FF 
09744     0C 4E 05 F1 | 	add	fp, ##524
09748     A7 0A 68 FC | 	wrlong	#5, fp
0974c     41 00 00 FF 
09750     48 E4 05 F1 | 	add	objptr, ##33352
09754     F2 1E 02 FB | 	rdlong	local01, objptr
09758     41 00 00 FF 
0975c     48 E4 85 F1 | 	sub	objptr, ##33352
09760     0C 4E 05 F1 | 	add	fp, #12
09764     A7 1E 62 FC | 	wrlong	local01, fp
09768     01 00 00 FF 
0976c     18 4E 85 F1 | 	sub	fp, ##536
09770                 | ' '  put #9,1,fileheader,1
09770                 | '   i=5
09770                 | '   saveptr=programstart
09770                 | '   do
09770                 | LR__0802
09770     01 00 00 FF 
09774     1C 4E 05 F1 | 	add	fp, ##540
09778     A7 12 02 F6 | 	mov	arg01, fp
0977c     04 4E 85 F1 | 	sub	fp, #4
09780     A7 14 02 FB | 	rdlong	arg02, fp
09784     01 00 00 FF 
09788     18 4E 85 F1 | 	sub	fp, ##536
0978c     18 16 06 F6 | 	mov	arg03, #24
09790     0B 00 00 FF 
09794     C0 E4 05 F1 | 	add	objptr, ##5824
09798     70 C0 B0 FD | 	call	#_psram_spin2_read1
0979c     01 00 00 FF 
097a0     34 4E 05 F1 | 	add	fp, ##564
097a4     A7 12 02 F6 | 	mov	arg01, fp
097a8     10 4E 85 F1 | 	sub	fp, #16
097ac     A7 14 02 FB | 	rdlong	arg02, fp
097b0     04 4E 05 F1 | 	add	fp, #4
097b4     A7 16 02 FB | 	rdlong	arg03, fp
097b8     01 00 00 FF 
097bc     28 4E 85 F1 | 	sub	fp, ##552
097c0     48 C0 B0 FD | 	call	#_psram_spin2_read1
097c4     0B 00 00 FF 
097c8     C0 E4 85 F1 | 	sub	objptr, ##5824
097cc     2B 01 00 FF 
097d0     E3 1E 06 F6 | 	mov	local01, ##@LR__4314
097d4     01 00 00 FF 
097d8     B4 4E 05 F1 | 	add	fp, ##692
097dc     A7 1E 62 FC | 	wrlong	local01, fp
097e0                 | '     psram.read1(varptr(header(0)),saveptr,24)
097e0                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
097e0                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
097e0     A8 4E 85 F1 | 	sub	fp, #168
097e4     A7 02 68 FC | 	wrlong	#1, fp
097e8     1C 4E 05 F1 | 	add	fp, #28
097ec     A7 20 02 FB | 	rdlong	local02, fp
097f0     01 00 00 FF 
097f4     28 4E 85 F1 | 	sub	fp, ##552
097f8     01 20 06 F1 | 	add	local02, #1
097fc                 | LR__0803
097fc     01 00 00 FF 
09800     0C 4E 05 F1 | 	add	fp, ##524
09804     A7 1E 02 FB | 	rdlong	local01, fp
09808     01 00 00 FF 
0980c     0C 4E 85 F1 | 	sub	fp, ##524
09810     10 1F 52 F2 | 	cmps	local01, local02 wc
09814     64 00 90 3D |  if_ae	jmp	#LR__0804
09818     01 00 00 FF 
0981c     B4 4E 05 F1 | 	add	fp, ##692
09820     A7 1E 02 FB | 	rdlong	local01, fp
09824     A8 4E 85 F1 | 	sub	fp, #168
09828     A7 16 02 FB | 	rdlong	arg03, fp
0982c     01 16 86 F1 | 	sub	arg03, #1
09830     28 4E 05 F1 | 	add	fp, #40
09834     A7 16 02 F1 | 	add	arg03, fp
09838     0B 13 C2 FA | 	rdbyte	arg01, arg03
0983c     01 00 00 FF 
09840     34 4E 85 F1 | 	sub	fp, ##564
09844     84 EC B0 FD | 	call	#__system__Chr_S
09848     FD 14 02 F6 | 	mov	arg02, result1
0984c     0F 13 02 F6 | 	mov	arg01, local01
09850     00 CB B0 FD | 	call	#__system___string_concat
09854     01 00 00 FF 
09858     B4 4E 05 F1 | 	add	fp, ##692
0985c     A7 FA 61 FC | 	wrlong	result1, fp
09860     A8 4E 85 F1 | 	sub	fp, #168
09864     A7 1E 02 FB | 	rdlong	local01, fp
09868     01 1E 06 F1 | 	add	local01, #1
0986c     A7 1E 62 FC | 	wrlong	local01, fp
09870     01 00 00 FF 
09874     0C 4E 85 F1 | 	sub	fp, ##524
09878     80 FF 9F FD | 	jmp	#LR__0803
0987c                 | LR__0804
0987c                 | '  '   put #9,i,header(3),1 : i+=4
0987c                 | '  '   put #9,i,linebuf(0),header(3) : i+=header(3)
0987c                 | '      print #9, saveline$
0987c     09 12 06 F6 | 	mov	arg01, #9
09880     24 1F B1 FD | 	call	#__system___getiolock_0372
09884     FD 12 02 F6 | 	mov	arg01, result1
09888     6C CA B0 FD | 	call	#__system___lockmem
0988c     01 00 00 FF 
09890     B4 4E 05 F1 | 	add	fp, ##692
09894     A7 14 02 FB | 	rdlong	arg02, fp
09898     01 00 00 FF 
0989c     B4 4E 85 F1 | 	sub	fp, ##692
098a0     09 12 06 F6 | 	mov	arg01, #9
098a4     00 16 06 F6 | 	mov	arg03, #0
098a8     40 D7 B0 FD | 	call	#__system___basic_print_string
098ac     09 12 06 F6 | 	mov	arg01, #9
098b0     0A 14 06 F6 | 	mov	arg02, #10
098b4     00 16 06 F6 | 	mov	arg03, #0
098b8     D8 D6 B0 FD | 	call	#__system___basic_print_char
098bc     09 12 06 F6 | 	mov	arg01, #9
098c0     E4 1E B1 FD | 	call	#__system___getiolock_0372
098c4     FD 00 68 FC | 	wrlong	#0, result1
098c8     01 00 00 FF 
098cc     30 4E 05 F1 | 	add	fp, ##560
098d0     A7 1E 02 FB | 	rdlong	local01, fp
098d4     18 4E 85 F1 | 	sub	fp, #24
098d8     A7 1E 62 FC | 	wrlong	local01, fp
098dc     18 4E 05 F1 | 	add	fp, #24
098e0     A7 1E 02 FB | 	rdlong	local01, fp
098e4     01 00 00 FF 
098e8     30 4E 85 F1 | 	sub	fp, ##560
098ec     FF FF 3F FF 
098f0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
098f4     78 FE 9F 5D |  if_ne	jmp	#LR__0802
098f8                 | '   close #9  
098f8     09 12 06 F6 | 	mov	arg01, #9
098fc     D8 14 B1 FD | 	call	#__system__close
09900                 | LR__0805
09900                 | LR__0806
09900     A7 F0 03 F6 | 	mov	ptra, fp
09904     B2 00 A0 FD | 	call	#popregs_
09908                 | _do_save_ret
09908     2D 00 64 FD | 	ret
0990c                 | 
0990c                 | ' 
0990c                 | ' '----------------- Load the program
0990c                 | ' 'lo todo: errors while loading
0990c                 | ' sub do_load
0990c                 | _do_load
0990c     01 4A 05 F6 | 	mov	COUNT_, #1
09910     A8 00 A0 FD | 	call	#pushregs_
09914     A4 F0 07 F1 | 	add	ptra, #164
09918     A0 4E 05 F1 | 	add	fp, #160
0991c     A7 12 02 F6 | 	mov	arg01, fp
09920     80 4E 85 F1 | 	sub	fp, #128
09924     A7 14 02 F6 | 	mov	arg02, fp
09928     20 4E 85 F1 | 	sub	fp, #32
0992c     09 15 62 FC | 	wrlong	arg02, arg01
09930     DC F1 BF FD | 	call	#_pop
09934     FF 1A 02 F6 | 	mov	arg05, result3
09938     A7 FA 61 FC | 	wrlong	result1, fp
0993c     04 4E 05 F1 | 	add	fp, #4
09940     A7 FC 61 FC | 	wrlong	result2, fp
09944     04 4E 05 F1 | 	add	fp, #4
09948     A7 1A 62 FC | 	wrlong	arg05, fp
0994c                 | ' 
0994c                 | ' lpoke varptr(line2$),varptr(line2)
0994c                 | ' t1=pop() 
0994c                 | ' 'print "popped "; t1.result.uresult, t1.result_type
0994c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
0994c     08 4E 85 F1 | 	sub	fp, #8
09950     2B 1A 0E F2 | 	cmp	arg05, #43 wz
09954     18 00 90 5D |  if_ne	jmp	#LR__0810
09958     A7 12 02 FB | 	rdlong	arg01, fp
0995c     9C 0E B0 FD | 	call	#_convertstring
09960     A7 FA 61 FC | 	wrlong	result1, fp
09964     08 4E 05 F1 | 	add	fp, #8
09968     A7 3E 68 FC | 	wrlong	#31, fp
0996c     08 4E 85 F1 | 	sub	fp, #8
09970                 | LR__0810
09970                 | ' if t1.result_type=result_string then
09970     08 4E 05 F1 | 	add	fp, #8
09974     A7 1E 02 FB | 	rdlong	local01, fp
09978     08 4E 85 F1 | 	sub	fp, #8
0997c     1F 1E 0E F2 | 	cmp	local01, #31 wz
09980     40 03 90 5D |  if_ne	jmp	#LR__0817
09984     10 09 B0 FD | 	call	#_do_new
09988                 | '   do_new
09988                 | '   if t1.result.sresult="" then t1.result.sresult="noname.bas" 
09988     A7 12 02 FB | 	rdlong	arg01, fp
0998c     2B 01 00 FF 
09990     E4 14 06 F6 | 	mov	arg02, ##@LR__4315
09994     88 C9 B0 FD | 	call	#__system___string_cmp
09998     00 FA 0D F2 | 	cmp	result1, #0 wz
0999c     2B 01 00 AF 
099a0     E5 1E 06 A6 |  if_e	mov	local01, ##@LR__4316
099a4     A7 1E 62 AC |  if_e	wrlong	local01, fp
099a8                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
099a8     09 12 06 F6 | 	mov	arg01, #9
099ac     28 14 B1 FD | 	call	#__system__close
099b0     09 1E 06 F6 | 	mov	local01, #9
099b4     49 00 00 FF 
099b8     58 E4 05 F1 | 	add	objptr, ##37464
099bc     F2 12 02 FB | 	rdlong	arg01, objptr
099c0     49 00 00 FF 
099c4     58 E4 85 F1 | 	sub	objptr, ##37464
099c8     2B 01 00 FF 
099cc     F0 14 06 F6 | 	mov	arg02, ##@LR__4317
099d0     80 C9 B0 FD | 	call	#__system___string_concat
099d4     FD 12 02 F6 | 	mov	arg01, result1
099d8     A7 14 02 FB | 	rdlong	arg02, fp
099dc     74 C9 B0 FD | 	call	#__system___string_concat
099e0     FD 14 02 F6 | 	mov	arg02, result1
099e4     0F 13 02 F6 | 	mov	arg01, local01
099e8     00 16 06 F6 | 	mov	arg03, #0
099ec     0C D5 B0 FD | 	call	#__system___basic_open_string
099f0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
099f4     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
099f8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
099fc     10 4E 05 F1 | 	add	fp, #16
09a00     A7 FA 61 FC | 	wrlong	result1, fp
09a04                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
09a04     10 4E 85 F1 | 	sub	fp, #16
09a08     9C 00 90 AD |  if_e	jmp	#LR__0811
09a0c     00 12 06 F6 | 	mov	arg01, #0
09a10     94 1D B1 FD | 	call	#__system___getiolock_0372
09a14     FD 12 02 F6 | 	mov	arg01, result1
09a18     DC C8 B0 FD | 	call	#__system___lockmem
09a1c     2B 01 00 FF 
09a20     F2 14 06 F6 | 	mov	arg02, ##@LR__4318
09a24     00 12 06 F6 | 	mov	arg01, #0
09a28     00 16 06 F6 | 	mov	arg03, #0
09a2c     BC D5 B0 FD | 	call	#__system___basic_print_string
09a30     10 4E 05 F1 | 	add	fp, #16
09a34     A7 14 02 FB | 	rdlong	arg02, fp
09a38     10 4E 85 F1 | 	sub	fp, #16
09a3c     00 12 06 F6 | 	mov	arg01, #0
09a40     00 16 06 F6 | 	mov	arg03, #0
09a44     0A 18 06 F6 | 	mov	arg04, #10
09a48     E4 D5 B0 FD | 	call	#__system___basic_print_integer
09a4c     2B 01 00 FF 
09a50     00 15 06 F6 | 	mov	arg02, ##@LR__4319
09a54     00 12 06 F6 | 	mov	arg01, #0
09a58     00 16 06 F6 | 	mov	arg03, #0
09a5c     8C D5 B0 FD | 	call	#__system___basic_print_string
09a60     10 4E 05 F1 | 	add	fp, #16
09a64     A7 12 02 FB | 	rdlong	arg01, fp
09a68     10 4E 85 F1 | 	sub	fp, #16
09a6c     84 ED B0 FD | 	call	#__system___strerror
09a70     FD 14 02 F6 | 	mov	arg02, result1
09a74     00 12 06 F6 | 	mov	arg01, #0
09a78     00 16 06 F6 | 	mov	arg03, #0
09a7c     6C D5 B0 FD | 	call	#__system___basic_print_string
09a80     00 12 06 F6 | 	mov	arg01, #0
09a84     0A 14 06 F6 | 	mov	arg02, #10
09a88     00 16 06 F6 | 	mov	arg03, #0
09a8c     04 D5 B0 FD | 	call	#__system___basic_print_char
09a90     00 12 06 F6 | 	mov	arg01, #0
09a94     10 1D B1 FD | 	call	#__system___getiolock_0372
09a98     FD 00 68 FC | 	wrlong	#0, result1
09a9c     09 12 06 F6 | 	mov	arg01, #9
09aa0     34 13 B1 FD | 	call	#__system__close
09aa4     24 02 90 FD | 	jmp	#LR__0819
09aa8                 | LR__0811
09aa8     0C 4E 05 F1 | 	add	fp, #12
09aac     A7 0A 68 FC | 	wrlong	#5, fp
09ab0                 | '   i=5
09ab0                 | '   get #9,1,header,1
09ab0     0C 4E 05 F1 | 	add	fp, #12
09ab4     A7 16 02 F6 | 	mov	arg03, fp
09ab8     18 4E 85 F1 | 	sub	fp, #24
09abc     09 12 06 F6 | 	mov	arg01, #9
09ac0     01 14 06 F6 | 	mov	arg02, #1
09ac4     01 18 06 F6 | 	mov	arg04, #1
09ac8     04 1A 06 F6 | 	mov	arg05, #4
09acc     2C D6 B0 FD | 	call	#__system___basic_get
09ad0                 | '   
09ad0                 | '   if header<>$0D616272 then 
09ad0     18 4E 05 F1 | 	add	fp, #24
09ad4     A7 1E 02 FB | 	rdlong	local01, fp
09ad8     18 4E 85 F1 | 	sub	fp, #24
09adc     B1 B0 06 FF 
09ae0     72 1E 0E F2 | 	cmp	local01, ##224486002 wz
09ae4     F0 00 90 AD |  if_e	jmp	#LR__0814
09ae8                 | '     close #9: open currentdir$+"/"+t1.result.sresult for input as #9
09ae8     09 12 06 F6 | 	mov	arg01, #9
09aec     E8 12 B1 FD | 	call	#__system__close
09af0     09 1E 06 F6 | 	mov	local01, #9
09af4     49 00 00 FF 
09af8     58 E4 05 F1 | 	add	objptr, ##37464
09afc     F2 12 02 FB | 	rdlong	arg01, objptr
09b00     49 00 00 FF 
09b04     58 E4 85 F1 | 	sub	objptr, ##37464
09b08     2B 01 00 FF 
09b0c     03 15 06 F6 | 	mov	arg02, ##@LR__4320
09b10     40 C8 B0 FD | 	call	#__system___string_concat
09b14     FD 12 02 F6 | 	mov	arg01, result1
09b18     A7 14 02 FB | 	rdlong	arg02, fp
09b1c     34 C8 B0 FD | 	call	#__system___string_concat
09b20     FD 14 02 F6 | 	mov	arg02, result1
09b24     0F 13 02 F6 | 	mov	arg01, local01
09b28     00 16 06 F6 | 	mov	arg03, #0
09b2c     CC D3 B0 FD | 	call	#__system___basic_open_string
09b30                 | '     do
09b30                 | LR__0812
09b30     09 12 06 F6 | 	mov	arg01, #9
09b34     CC C9 B0 FD | 	call	#__system___basic_read_line
09b38     2D 00 00 FF 
09b3c     E0 E5 05 F1 | 	add	objptr, ##23520
09b40     F2 FA 61 FC | 	wrlong	result1, objptr
09b44                 | '       if left$(line$,1) >="0" andalso left$(line$,1)<="9" then interpret
09b44     2D 00 00 FF 
09b48     E0 E5 85 F1 | 	sub	objptr, ##23520
09b4c     FD 12 02 F6 | 	mov	arg01, result1
09b50     01 14 06 F6 | 	mov	arg02, #1
09b54     B0 E7 B0 FD | 	call	#__system__Left_S
09b58     FD 12 02 F6 | 	mov	arg01, result1
09b5c     2B 01 00 FF 
09b60     05 15 06 F6 | 	mov	arg02, ##@LR__4321
09b64     B8 C7 B0 FD | 	call	#__system___string_cmp
09b68     00 FA 55 F2 | 	cmps	result1, #0 wc
09b6c     34 00 90 CD |  if_b	jmp	#LR__0813
09b70     2D 00 00 FF 
09b74     E0 E5 05 F1 | 	add	objptr, ##23520
09b78     F2 12 02 FB | 	rdlong	arg01, objptr
09b7c     2D 00 00 FF 
09b80     E0 E5 85 F1 | 	sub	objptr, ##23520
09b84     01 14 06 F6 | 	mov	arg02, #1
09b88     7C E7 B0 FD | 	call	#__system__Left_S
09b8c     FD 12 02 F6 | 	mov	arg01, result1
09b90     2B 01 00 FF 
09b94     07 15 06 F6 | 	mov	arg02, ##@LR__4322
09b98     84 C7 B0 FD | 	call	#__system___string_cmp
09b9c     01 FA 55 F2 | 	cmps	result1, #1 wc
09ba0     78 6E BF CD |  if_b	call	#_interpret
09ba4                 | LR__0813
09ba4     2D 00 00 FF 
09ba8     E0 E5 05 F1 | 	add	objptr, ##23520
09bac     F2 12 02 FB | 	rdlong	arg01, objptr
09bb0     2D 00 00 FF 
09bb4     E0 E5 85 F1 | 	sub	objptr, ##23520
09bb8     2B 01 00 FF 
09bbc     09 15 06 F6 | 	mov	arg02, ##@LR__4323
09bc0     5C C7 B0 FD | 	call	#__system___string_cmp
09bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
09bc8     64 FF 9F 5D |  if_ne	jmp	#LR__0812
09bcc                 | '     close #9
09bcc     09 12 06 F6 | 	mov	arg01, #9
09bd0     04 12 B1 FD | 	call	#__system__close
09bd4     F4 00 90 FD | 	jmp	#LR__0818
09bd8                 | LR__0814
09bd8                 | '   'printerror(26) : close #9 : return
09bd8                 | '     do
09bd8                 | LR__0815
09bd8                 | '       get #9,i,linelength,1,amount : i+=4 : line2(linelength)=0
09bd8     0C 4E 05 F1 | 	add	fp, #12
09bdc     A7 14 02 FB | 	rdlong	arg02, fp
09be0     10 4E 05 F1 | 	add	fp, #16
09be4     A7 16 02 F6 | 	mov	arg03, fp
09be8     1C 4E 85 F1 | 	sub	fp, #28
09bec     09 12 06 F6 | 	mov	arg01, #9
09bf0     01 18 06 F6 | 	mov	arg04, #1
09bf4     04 1A 06 F6 | 	mov	arg05, #4
09bf8     00 D5 B0 FD | 	call	#__system___basic_get
09bfc     14 4E 05 F1 | 	add	fp, #20
09c00     A7 FA 61 FC | 	wrlong	result1, fp
09c04     08 4E 85 F1 | 	sub	fp, #8
09c08     A7 1E 02 FB | 	rdlong	local01, fp
09c0c     04 1E 06 F1 | 	add	local01, #4
09c10     A7 1E 62 FC | 	wrlong	local01, fp
09c14     10 4E 05 F1 | 	add	fp, #16
09c18     A7 1E 02 FB | 	rdlong	local01, fp
09c1c     04 4E 05 F1 | 	add	fp, #4
09c20     A7 1E 02 F1 | 	add	local01, fp
09c24     0F 01 48 FC | 	wrbyte	#0, local01
09c28                 | '       if amount=1 then  
09c28     0C 4E 85 F1 | 	sub	fp, #12
09c2c     A7 1E 02 FB | 	rdlong	local01, fp
09c30     14 4E 85 F1 | 	sub	fp, #20
09c34     01 1E 0E F2 | 	cmp	local01, #1 wz
09c38     68 00 90 5D |  if_ne	jmp	#LR__0816
09c3c                 | '         get #9,i,line2(0),linelength : i+=linelength
09c3c     0C 4E 05 F1 | 	add	fp, #12
09c40     A7 14 02 FB | 	rdlong	arg02, fp
09c44     14 4E 05 F1 | 	add	fp, #20
09c48     A7 16 02 F6 | 	mov	arg03, fp
09c4c     04 4E 85 F1 | 	sub	fp, #4
09c50     A7 18 02 FB | 	rdlong	arg04, fp
09c54     1C 4E 85 F1 | 	sub	fp, #28
09c58     09 12 06 F6 | 	mov	arg01, #9
09c5c     01 1A 06 F6 | 	mov	arg05, #1
09c60     98 D4 B0 FD | 	call	#__system___basic_get
09c64     0C 4E 05 F1 | 	add	fp, #12
09c68     A7 1E 02 FB | 	rdlong	local01, fp
09c6c     10 4E 05 F1 | 	add	fp, #16
09c70     A7 1A 02 FB | 	rdlong	arg05, fp
09c74     0D 1F 02 F1 | 	add	local01, arg05
09c78     10 4E 85 F1 | 	sub	fp, #16
09c7c     A7 1E 62 FC | 	wrlong	local01, fp
09c80     94 4E 05 F1 | 	add	fp, #148
09c84     A7 1E 02 FB | 	rdlong	local01, fp
09c88     A0 4E 85 F1 | 	sub	fp, #160
09c8c     2D 00 00 FF 
09c90     E0 E5 05 F1 | 	add	objptr, ##23520
09c94     F2 1E 62 FC | 	wrlong	local01, objptr
09c98     2D 00 00 FF 
09c9c     E0 E5 85 F1 | 	sub	objptr, ##23520
09ca0     78 6D BF FD | 	call	#_interpret
09ca4                 | LR__0816
09ca4     14 4E 05 F1 | 	add	fp, #20
09ca8     A7 1E 02 FB | 	rdlong	local01, fp
09cac     14 4E 85 F1 | 	sub	fp, #20
09cb0     01 1E 56 F2 | 	cmps	local01, #1 wc
09cb4     20 FF 9F 3D |  if_ae	jmp	#LR__0815
09cb8                 | '     close #9 
09cb8     09 12 06 F6 | 	mov	arg01, #9
09cbc     18 11 B1 FD | 	call	#__system__close
09cc0     08 00 90 FD | 	jmp	#LR__0818
09cc4                 | LR__0817
09cc4     1E 12 06 F6 | 	mov	arg01, #30
09cc8     0C 91 B0 FD | 	call	#_printerror
09ccc                 | LR__0818
09ccc                 | LR__0819
09ccc     A7 F0 03 F6 | 	mov	ptra, fp
09cd0     B2 00 A0 FD | 	call	#popregs_
09cd4                 | _do_load_ret
09cd4     2D 00 64 FD | 	ret
09cd8                 | 
09cd8                 | ' 
09cd8                 | ' '----------------- Run the program 
09cd8                 | ' 
09cd8                 | ' '' line header: linenum major, linenum minor, list start, list length, prev ptr, next ptr
09cd8                 | ' 
09cd8                 | ' sub do_run
09cd8                 | _do_run
09cd8     01 4A 05 F6 | 	mov	COUNT_, #1
09cdc     A8 00 A0 FD | 	call	#pushregs_
09ce0     41 00 00 FF 
09ce4     48 E4 05 F1 | 	add	objptr, ##33352
09ce8     F2 1C 02 FB | 	rdlong	arg06, objptr
09cec     0F 00 00 FF 
09cf0     2C E5 05 F1 | 	add	objptr, ##7980
09cf4     F2 1C 62 FC | 	wrlong	arg06, objptr
09cf8     04 E4 05 F1 | 	add	objptr, #4
09cfc     F2 00 68 FC | 	wrlong	#0, objptr
09d00     04 E4 05 F1 | 	add	objptr, #4
09d04     FF FF FF FF 
09d08     F2 FE 6B FC | 	wrlong	##-1, objptr
09d0c                 | ' if inrun>0 then 
09d0c     04 E4 05 F1 | 	add	objptr, #4
09d10     F2 1C 02 FB | 	rdlong	arg06, objptr
09d14     50 00 00 FF 
09d18     80 E5 85 F1 | 	sub	objptr, ##41344
09d1c     01 1C 16 F2 | 	cmp	arg06, #1 wc
09d20     30 00 90 CD |  if_b	jmp	#LR__0820
09d24     50 00 00 FF 
09d28     84 E5 05 F1 | 	add	objptr, ##41348
09d2c     F2 12 02 F6 | 	mov	arg01, objptr
09d30     10 E4 85 F1 | 	sub	objptr, #16
09d34     F2 14 02 FB | 	rdlong	arg02, objptr
09d38     18 16 06 F6 | 	mov	arg03, #24
09d3c     45 00 00 FF 
09d40     B4 E4 85 F1 | 	sub	objptr, ##35508
09d44     C4 BA B0 FD | 	call	#_psram_spin2_read1
09d48     0B 00 00 FF 
09d4c     C0 E4 85 F1 | 	sub	objptr, ##5824
09d50                 | '   psram.read1(varptr(runheader),runptr,24)  
09d50                 | '   return
09d50     9C 02 90 FD | 	jmp	#LR__0826
09d54                 | LR__0820
09d54     50 00 00 FF 
09d58     80 E5 05 F1 | 	add	objptr, ##41344
09d5c     F2 02 68 FC | 	wrlong	#1, objptr
09d60     04 E4 05 F1 | 	add	objptr, #4
09d64     F2 12 02 F6 | 	mov	arg01, objptr
09d68     10 E4 85 F1 | 	sub	objptr, #16
09d6c     F2 14 02 FB | 	rdlong	arg02, objptr
09d70     18 16 06 F6 | 	mov	arg03, #24
09d74     45 00 00 FF 
09d78     B4 E4 85 F1 | 	sub	objptr, ##35508
09d7c     8C BA B0 FD | 	call	#_psram_spin2_read1
09d80                 | ' inrun=1
09d80                 | ' psram.read1(varptr(runheader),runptr,24) 
09d80                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
09d80     45 00 00 FF 
09d84     C4 E4 05 F1 | 	add	objptr, ##35524
09d88     F2 1E 02 FB | 	rdlong	local01, objptr
09d8c     50 00 00 FF 
09d90     84 E5 85 F1 | 	sub	objptr, ##41348
09d94     FF FF 7F FF 
09d98     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
09d9c     50 00 00 AF 
09da0     80 E5 05 A1 |  if_e	add	objptr, ##41344
09da4     F2 00 68 AC |  if_e	wrlong	#0, objptr
09da8     50 00 00 AF 
09dac     80 E5 85 A1 |  if_e	sub	objptr, ##41344
09db0     3C 02 90 AD |  if_e	jmp	#LR__0826
09db4                 | ' do 
09db4                 | LR__0821
09db4                 | '   if runptr<>oldrunptr then
09db4     50 00 00 FF 
09db8     74 E5 05 F1 | 	add	objptr, ##41332
09dbc     F2 1E 02 FB | 	rdlong	local01, objptr
09dc0     08 E4 05 F1 | 	add	objptr, #8
09dc4     F2 1C 02 FB | 	rdlong	arg06, objptr
09dc8     50 00 00 FF 
09dcc     7C E5 85 F1 | 	sub	objptr, ##41340
09dd0     0E 1F 0A F2 | 	cmp	local01, arg06 wz
09dd4     CC 00 90 AD |  if_e	jmp	#LR__0822
09dd8     50 00 00 FF 
09ddc     84 E5 05 F1 | 	add	objptr, ##41348
09de0     F2 12 02 F6 | 	mov	arg01, objptr
09de4     10 E4 85 F1 | 	sub	objptr, #16
09de8     F2 14 02 FB | 	rdlong	arg02, objptr
09dec     18 16 06 F6 | 	mov	arg03, #24
09df0     45 00 00 FF 
09df4     B4 E4 85 F1 | 	sub	objptr, ##35508
09df8     10 BA B0 FD | 	call	#_psram_spin2_read1
09dfc     32 00 00 FF 
09e00     80 E5 05 F1 | 	add	objptr, ##25984
09e04     F2 12 02 F6 | 	mov	arg01, objptr
09e08     12 00 00 FF 
09e0c     34 E5 05 F1 | 	add	objptr, ##9524
09e10     F2 14 02 FB | 	rdlong	arg02, objptr
09e14     14 00 00 FF 
09e18     4C E5 85 F1 | 	sub	objptr, ##10572
09e1c     F2 1E 02 FB | 	rdlong	local01, objptr
09e20     01 1E 66 F0 | 	shl	local01, #1
09e24     0F 15 02 F1 | 	add	arg02, local01
09e28     14 00 00 FF 
09e2c     64 E5 05 F1 | 	add	objptr, ##10596
09e30     F2 16 02 FB | 	rdlong	arg03, objptr
09e34     18 E4 85 F1 | 	sub	objptr, #24
09e38     F2 1E 02 FB | 	rdlong	local01, objptr
09e3c     0F 17 82 F1 | 	sub	arg03, local01
09e40     45 00 00 FF 
09e44     B4 E4 85 F1 | 	sub	objptr, ##35508
09e48     C0 B9 B0 FD | 	call	#_psram_spin2_read1
09e4c     45 00 00 FF 
09e50     CC E4 05 F1 | 	add	objptr, ##35532
09e54     F2 1E 02 FB | 	rdlong	local01, objptr
09e58     18 E4 85 F1 | 	sub	objptr, #24
09e5c     F2 1C 02 FB | 	rdlong	arg06, objptr
09e60     0E 1F 82 F1 | 	sub	local01, arg06
09e64     14 00 00 FF 
09e68     4C E5 85 F1 | 	sub	objptr, ##10572
09e6c     F2 1C 02 FB | 	rdlong	arg06, objptr
09e70     0E 1F 12 FD | 	qdiv	local01, arg06
09e74     05 00 00 FF 
09e78     18 E4 05 F1 | 	add	objptr, ##2584
09e7c     18 1E 62 FD | 	getqx	local01
09e80     03 1E 86 F1 | 	sub	local01, #3
09e84     F2 1E 62 FC | 	wrlong	local01, objptr
09e88     0F 00 00 FF 
09e8c     34 E5 05 F1 | 	add	objptr, ##7988
09e90     F2 1E 02 FB | 	rdlong	local01, objptr
09e94     08 E4 05 F1 | 	add	objptr, #8
09e98     F2 1E 62 FC | 	wrlong	local01, objptr
09e9c     50 00 00 FF 
09ea0     7C E5 85 F1 | 	sub	objptr, ##41340
09ea4                 | LR__0822
09ea4     50 00 00 FF 
09ea8     98 E5 05 F1 | 	add	objptr, ##41368
09eac     F2 1E 02 FB | 	rdlong	local01, objptr
09eb0     24 E4 85 F1 | 	sub	objptr, #36
09eb4     F2 1E 62 FC | 	wrlong	local01, objptr
09eb8     04 E4 05 F1 | 	add	objptr, #4
09ebc     F2 12 02 FB | 	rdlong	arg01, objptr
09ec0     50 00 00 FF 
09ec4     78 E5 85 F1 | 	sub	objptr, ##41336
09ec8     40 EB BF FD | 	call	#_execute_line
09ecc     50 00 00 FF 
09ed0     78 E5 05 F1 | 	add	objptr, ##41336
09ed4     F2 FA 61 FC | 	wrlong	result1, objptr
09ed8     04 E4 85 F1 | 	sub	objptr, #4
09edc     F2 1E 02 FB | 	rdlong	local01, objptr
09ee0     50 00 00 FF 
09ee4     74 E5 85 F1 | 	sub	objptr, ##41332
09ee8     FF FF 3F FF 
09eec     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09ef0     0C 00 90 AD |  if_e	jmp	#LR__0823
09ef4     A4 BC B0 FD | 	call	#_usbnew_spin2_get_key
09ef8     06 FB 0D F2 | 	cmp	result1, #262 wz
09efc     B4 FE 9F 5D |  if_ne	jmp	#LR__0821
09f00                 | LR__0823
09f00                 | ' if runheader(5)<>$7FFF_FFFF then 
09f00     50 00 00 FF 
09f04     98 E5 05 F1 | 	add	objptr, ##41368
09f08     F2 1E 02 FB | 	rdlong	local01, objptr
09f0c     50 00 00 FF 
09f10     98 E5 85 F1 | 	sub	objptr, ##41368
09f14     FF FF 3F FF 
09f18     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
09f1c     BC 00 90 AD |  if_e	jmp	#LR__0825
09f20                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len)  
09f20     50 00 00 FF 
09f24     A4 E5 05 F1 | 	add	objptr, ##41380
09f28     F2 1E 02 FB | 	rdlong	local01, objptr
09f2c     50 00 00 FF 
09f30     A4 E5 85 F1 | 	sub	objptr, ##41380
09f34     01 1E 0E F2 | 	cmp	local01, #1 wz
09f38     3C 00 90 5D |  if_ne	jmp	#LR__0824
09f3c     52 00 00 FF 
09f40     48 E4 05 F1 | 	add	objptr, ##42056
09f44     F2 14 02 FB | 	rdlong	arg02, objptr
09f48     04 E4 85 F1 | 	sub	objptr, #4
09f4c     F2 1A 02 FB | 	rdlong	arg05, objptr
09f50     07 12 06 F6 | 	mov	arg01, #7
09f54     56 00 00 FF 
09f58     44 16 06 F6 | 	mov	arg03, ##44100
09f5c     0E 18 C6 F9 | 	decod	arg04, #14
09f60     01 1C 66 F6 | 	neg	arg06, #1
09f64     46 00 00 FF 
09f68     84 E5 85 F1 | 	sub	objptr, ##36228
09f6c     54 BF B0 FD | 	call	#_Audio093b_8_sc_spin2_play
09f70     0B 00 00 FF 
09f74     C0 E4 85 F1 | 	sub	objptr, ##5824
09f78                 | LR__0824
09f78                 | '   print "Stopped at line ";runheader(0)
09f78     00 12 06 F6 | 	mov	arg01, #0
09f7c     28 18 B1 FD | 	call	#__system___getiolock_0372
09f80     FD 12 02 F6 | 	mov	arg01, result1
09f84     70 C3 B0 FD | 	call	#__system___lockmem
09f88     2B 01 00 FF 
09f8c     0A 15 06 F6 | 	mov	arg02, ##@LR__4324
09f90     00 12 06 F6 | 	mov	arg01, #0
09f94     00 16 06 F6 | 	mov	arg03, #0
09f98     50 D0 B0 FD | 	call	#__system___basic_print_string
09f9c     50 00 00 FF 
09fa0     84 E5 05 F1 | 	add	objptr, ##41348
09fa4     F2 14 02 FB | 	rdlong	arg02, objptr
09fa8     50 00 00 FF 
09fac     84 E5 85 F1 | 	sub	objptr, ##41348
09fb0     00 12 06 F6 | 	mov	arg01, #0
09fb4     00 16 06 F6 | 	mov	arg03, #0
09fb8     0A 18 06 F6 | 	mov	arg04, #10
09fbc     B0 D0 B0 FD | 	call	#__system___basic_print_unsigned
09fc0     00 12 06 F6 | 	mov	arg01, #0
09fc4     0A 14 06 F6 | 	mov	arg02, #10
09fc8     00 16 06 F6 | 	mov	arg03, #0
09fcc     C4 CF B0 FD | 	call	#__system___basic_print_char
09fd0     00 12 06 F6 | 	mov	arg01, #0
09fd4     D0 17 B1 FD | 	call	#__system___getiolock_0372
09fd8     FD 00 68 FC | 	wrlong	#0, result1
09fdc                 | LR__0825
09fdc     50 00 00 FF 
09fe0     80 E5 05 F1 | 	add	objptr, ##41344
09fe4     F2 00 68 FC | 	wrlong	#0, objptr
09fe8     50 00 00 FF 
09fec     80 E5 85 F1 | 	sub	objptr, ##41344
09ff0                 | LR__0826
09ff0     A7 F0 03 F6 | 	mov	ptra, fp
09ff4     B2 00 A0 FD | 	call	#popregs_
09ff8                 | _do_run_ret
09ff8     2D 00 64 FD | 	ret
09ffc                 | 
09ffc                 | ' 
09ffc                 | ' ' ---------------  List the program. Todo: it should accept parameters and do "more"
09ffc                 | ' 
09ffc                 | ' sub do_list
09ffc                 | _do_list
09ffc     02 4A 05 F6 | 	mov	COUNT_, #2
0a000     A8 00 A0 FD | 	call	#pushregs_
0a004     B8 F0 07 F1 | 	add	ptra, #184
0a008     04 4E 05 F1 | 	add	fp, #4
0a00c     A7 00 68 FC | 	wrlong	#0, fp
0a010     04 4E 05 F1 | 	add	fp, #4
0a014     FF FF BF FF 
0a018     A7 FE 6B FC | 	wrlong	##2147483647, fp
0a01c     08 4E 85 F1 | 	sub	fp, #8
0a020     41 00 00 FF 
0a024     44 E4 05 F1 | 	add	objptr, ##33348
0a028     F2 1E 02 FB | 	rdlong	local01, objptr
0a02c     0F 17 02 F6 | 	mov	arg03, local01
0a030     01 16 66 F0 | 	shl	arg03, #1
0a034     0F 17 02 F1 | 	add	arg03, local01
0a038     02 16 66 F0 | 	shl	arg03, #2
0a03c     03 00 00 FF 
0a040     04 E4 85 F1 | 	sub	objptr, ##1540
0a044     F2 16 02 F1 | 	add	arg03, objptr
0a048     0B 17 02 FB | 	rdlong	arg03, arg03
0a04c     A7 16 62 FC | 	wrlong	arg03, fp
0a050                 | ' 
0a050                 | ' startline=0 : endline=$7FFFFFFF
0a050                 | ' numpar=compiledline(lineptr_e).result.uresult
0a050                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
0a050     01 16 0E F2 | 	cmp	arg03, #1 wz
0a054     3E 00 00 FF 
0a058     40 E4 85 F1 | 	sub	objptr, ##31808
0a05c     3C 00 90 5D |  if_ne	jmp	#LR__0830
0a060     AC EA BF FD | 	call	#_pop
0a064     FF 1E 02 F6 | 	mov	local01, result3
0a068     0C 4E 05 F1 | 	add	fp, #12
0a06c     A7 FA 61 FC | 	wrlong	result1, fp
0a070     04 4E 05 F1 | 	add	fp, #4
0a074     A7 FC 61 FC | 	wrlong	result2, fp
0a078     04 4E 05 F1 | 	add	fp, #4
0a07c     A7 1E 62 FC | 	wrlong	local01, fp
0a080     08 4E 85 F1 | 	sub	fp, #8
0a084     A7 12 02 F6 | 	mov	arg01, fp
0a088     0C 4E 85 F1 | 	sub	fp, #12
0a08c     B8 4A B0 FD | 	call	#_converttoint
0a090     04 4E 05 F1 | 	add	fp, #4
0a094     A7 FA 61 FC | 	wrlong	result1, fp
0a098     04 4E 85 F1 | 	sub	fp, #4
0a09c                 | LR__0830
0a09c                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
0a09c     A7 16 02 FB | 	rdlong	arg03, fp
0a0a0     02 16 0E F2 | 	cmp	arg03, #2 wz
0a0a4     7C 00 90 5D |  if_ne	jmp	#LR__0831
0a0a8     64 EA BF FD | 	call	#_pop
0a0ac     FF 1E 02 F6 | 	mov	local01, result3
0a0b0     0C 4E 05 F1 | 	add	fp, #12
0a0b4     A7 FA 61 FC | 	wrlong	result1, fp
0a0b8     04 4E 05 F1 | 	add	fp, #4
0a0bc     A7 FC 61 FC | 	wrlong	result2, fp
0a0c0     04 4E 05 F1 | 	add	fp, #4
0a0c4     A7 1E 62 FC | 	wrlong	local01, fp
0a0c8     08 4E 85 F1 | 	sub	fp, #8
0a0cc     A7 12 02 F6 | 	mov	arg01, fp
0a0d0     0C 4E 85 F1 | 	sub	fp, #12
0a0d4     70 4A B0 FD | 	call	#_converttoint
0a0d8     FD 1E 02 F6 | 	mov	local01, result1
0a0dc     08 4E 05 F1 | 	add	fp, #8
0a0e0     A7 1E 62 FC | 	wrlong	local01, fp
0a0e4     08 4E 85 F1 | 	sub	fp, #8
0a0e8     24 EA BF FD | 	call	#_pop
0a0ec     FF 1E 02 F6 | 	mov	local01, result3
0a0f0     0C 4E 05 F1 | 	add	fp, #12
0a0f4     A7 FA 61 FC | 	wrlong	result1, fp
0a0f8     04 4E 05 F1 | 	add	fp, #4
0a0fc     A7 FC 61 FC | 	wrlong	result2, fp
0a100     04 4E 05 F1 | 	add	fp, #4
0a104     A7 1E 62 FC | 	wrlong	local01, fp
0a108     08 4E 85 F1 | 	sub	fp, #8
0a10c     A7 12 02 F6 | 	mov	arg01, fp
0a110     0C 4E 85 F1 | 	sub	fp, #12
0a114     30 4A B0 FD | 	call	#_converttoint
0a118     04 4E 05 F1 | 	add	fp, #4
0a11c     A7 FA 61 FC | 	wrlong	result1, fp
0a120     04 4E 85 F1 | 	sub	fp, #4
0a124                 | LR__0831
0a124                 | ' 
0a124                 | ' 
0a124                 | ' print
0a124     00 12 06 F6 | 	mov	arg01, #0
0a128     7C 16 B1 FD | 	call	#__system___getiolock_0372
0a12c     FD 12 02 F6 | 	mov	arg01, result1
0a130     C4 C1 B0 FD | 	call	#__system___lockmem
0a134     00 12 06 F6 | 	mov	arg01, #0
0a138     0A 14 06 F6 | 	mov	arg02, #10
0a13c     00 16 06 F6 | 	mov	arg03, #0
0a140     50 CE B0 FD | 	call	#__system___basic_print_char
0a144     00 12 06 F6 | 	mov	arg01, #0
0a148     5C 16 B1 FD | 	call	#__system___getiolock_0372
0a14c     FD 00 68 FC | 	wrlong	#0, result1
0a150     41 00 00 FF 
0a154     48 E4 05 F1 | 	add	objptr, ##33352
0a158     F2 20 02 FB | 	rdlong	local02, objptr
0a15c     11 00 00 FF 
0a160     60 E4 05 F1 | 	add	objptr, ##8800
0a164     F2 20 62 FC | 	wrlong	local02, objptr
0a168     52 00 00 FF 
0a16c     A8 E4 85 F1 | 	sub	objptr, ##42152
0a170                 | ' do 
0a170                 | LR__0832
0a170     20 4E 05 F1 | 	add	fp, #32
0a174     A7 12 02 F6 | 	mov	arg01, fp
0a178     20 4E 85 F1 | 	sub	fp, #32
0a17c     52 00 00 FF 
0a180     A8 E4 05 F1 | 	add	objptr, ##42152
0a184     F2 14 02 FB | 	rdlong	arg02, objptr
0a188     18 16 06 F6 | 	mov	arg03, #24
0a18c     46 00 00 FF 
0a190     E8 E5 85 F1 | 	sub	objptr, ##36328
0a194     74 B6 B0 FD | 	call	#_psram_spin2_read1
0a198     0B 00 00 FF 
0a19c     C0 E4 85 F1 | 	sub	objptr, ##5824
0a1a0                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart
0a1a0                 | '   if header(0)<> $FFFFFFFF then
0a1a0     20 4E 05 F1 | 	add	fp, #32
0a1a4     A7 20 02 FB | 	rdlong	local02, fp
0a1a8     20 4E 85 F1 | 	sub	fp, #32
0a1ac     FF FF 7F FF 
0a1b0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
0a1b4     A8 00 90 AD |  if_e	jmp	#LR__0834
0a1b8     38 4E 05 F1 | 	add	fp, #56
0a1bc     3F 16 06 F6 | 	mov	arg03, #63
0a1c0     28 16 62 FD | 	setq	arg03
0a1c4     A7 00 68 FC | 	wrlong	#0, fp
0a1c8     A7 12 02 F6 | 	mov	arg01, fp
0a1cc     10 4E 85 F1 | 	sub	fp, #16
0a1d0     A7 14 02 FB | 	rdlong	arg02, fp
0a1d4     04 4E 05 F1 | 	add	fp, #4
0a1d8     A7 16 02 FB | 	rdlong	arg03, fp
0a1dc     2C 4E 85 F1 | 	sub	fp, #44
0a1e0     0B 00 00 FF 
0a1e4     C0 E4 05 F1 | 	add	objptr, ##5824
0a1e8     20 B6 B0 FD | 	call	#_psram_spin2_read1
0a1ec     0B 00 00 FF 
0a1f0     C0 E4 85 F1 | 	sub	objptr, ##5824
0a1f4                 | '     longfill(linebuf,0,64)
0a1f4                 | '     psram.read1(varptr(linebuf),header(2),header(3))
0a1f4                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
0a1f4     20 4E 05 F1 | 	add	fp, #32
0a1f8     A7 20 02 FB | 	rdlong	local02, fp
0a1fc     1C 4E 85 F1 | 	sub	fp, #28
0a200     A7 1E 02 FB | 	rdlong	local01, fp
0a204     04 4E 85 F1 | 	sub	fp, #4
0a208     0F 21 52 F2 | 	cmps	local02, local01 wc
0a20c     30 00 90 CD |  if_b	jmp	#LR__0833
0a210     20 4E 05 F1 | 	add	fp, #32
0a214     A7 20 02 FB | 	rdlong	local02, fp
0a218     18 4E 85 F1 | 	sub	fp, #24
0a21c     A7 16 02 FB | 	rdlong	arg03, fp
0a220     08 4E 85 F1 | 	sub	fp, #8
0a224     0B 21 5A F2 | 	cmps	local02, arg03 wcz
0a228     14 00 90 1D |  if_a	jmp	#LR__0833
0a22c     38 4E 05 F1 | 	add	fp, #56
0a230     A7 12 02 F6 | 	mov	arg01, fp
0a234     38 4E 85 F1 | 	sub	fp, #56
0a238                 | ' 
0a238                 | ' write(text)
0a238     98 B0 B0 FD | 	call	#_hg010b_spin2_write
0a23c                 | ' crlf
0a23c     F4 B1 B0 FD | 	call	#_hg010b_spin2_crlf
0a240                 | LR__0833
0a240     34 4E 05 F1 | 	add	fp, #52
0a244     A7 20 02 FB | 	rdlong	local02, fp
0a248     34 4E 85 F1 | 	sub	fp, #52
0a24c     52 00 00 FF 
0a250     A8 E4 05 F1 | 	add	objptr, ##42152
0a254     F2 20 62 FC | 	wrlong	local02, objptr
0a258     52 00 00 FF 
0a25c     A8 E4 85 F1 | 	sub	objptr, ##42152
0a260                 | LR__0834
0a260     34 4E 05 F1 | 	add	fp, #52
0a264     A7 20 02 FB | 	rdlong	local02, fp
0a268     34 4E 85 F1 | 	sub	fp, #52
0a26c     FF FF 3F FF 
0a270     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0a274     20 4E 05 51 |  if_ne	add	fp, #32
0a278     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0a27c     20 4E 85 51 |  if_ne	sub	fp, #32
0a280     FF FF 7F 5F 
0a284     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a288     E4 FE 9F 5D |  if_ne	jmp	#LR__0832
0a28c     A7 F0 03 F6 | 	mov	ptra, fp
0a290     B2 00 A0 FD | 	call	#popregs_
0a294                 | _do_list_ret
0a294     2D 00 64 FD | 	ret
0a298                 | 
0a298                 | ' 
0a298                 | ' '---------------- Clear the program
0a298                 | ' 
0a298                 | ' sub do_new
0a298                 | _do_new
0a298     03 4A 05 F6 | 	mov	COUNT_, #3
0a29c     A8 00 A0 FD | 	call	#pushregs_
0a2a0     00 12 06 F6 | 	mov	arg01, #0
0a2a4     01 14 66 F6 | 	neg	arg02, #1
0a2a8     01 16 06 F6 | 	mov	arg03, #1
0a2ac     00 18 06 F6 | 	mov	arg04, #0
0a2b0     0B 00 00 FF 
0a2b4     C0 E4 05 F1 | 	add	objptr, ##5824
0a2b8                 | '     return fill(addr, pattern, count, listPtr, 4)
0a2b8     04 1A 06 F6 | 	mov	arg05, #4
0a2bc     84 B6 B0 FD | 	call	#_psram_spin2_fill
0a2c0     20 00 00 FF 
0a2c4     0C E5 05 F1 | 	add	objptr, ##16652
0a2c8     F2 00 68 FC | 	wrlong	#0, objptr
0a2cc     15 00 00 FF 
0a2d0     7C E4 05 F1 | 	add	objptr, ##10876
0a2d4     F2 00 68 FC | 	wrlong	#0, objptr
0a2d8     0F 00 00 FF 
0a2dc     2C E5 05 F1 | 	add	objptr, ##7980
0a2e0     F2 00 68 FC | 	wrlong	#0, objptr
0a2e4     04 E4 05 F1 | 	add	objptr, #4
0a2e8     F2 00 68 FC | 	wrlong	#0, objptr
0a2ec     16 00 00 FF 
0a2f0     5C E5 85 F1 | 	sub	objptr, ##11612
0a2f4     F2 00 68 FC | 	wrlong	#0, objptr
0a2f8     07 00 00 FF 
0a2fc     24 E4 05 F1 | 	add	objptr, ##3620
0a300     F2 00 68 FC | 	wrlong	#0, objptr
0a304     07 00 00 FF 
0a308     20 E4 85 F1 | 	sub	objptr, ##3616
0a30c     F2 00 68 FC | 	wrlong	#0, objptr
0a310     0F 00 00 FF 
0a314     34 E4 05 F1 | 	add	objptr, ##7732
0a318     F2 00 68 FC | 	wrlong	#0, objptr
0a31c     08 00 00 FF 
0a320     08 E4 85 F1 | 	sub	objptr, ##4104
0a324     F2 00 68 FC | 	wrlong	#0, objptr
0a328     04 E4 05 F1 | 	add	objptr, #4
0a32c     FF FF FF FF 
0a330     F2 FE 6B FC | 	wrlong	##-1, objptr
0a334     0F 00 00 FF 
0a338     4C E5 05 F1 | 	add	objptr, ##8012
0a33c     F2 00 68 FC | 	wrlong	#0, objptr
0a340                 | ' 
0a340                 | ' pslpoke(0,$FFFFFFFF)
0a340                 | ' varnum=0
0a340                 | ' programstart=0 :runptr=0 : runptr2=0
0a340                 | ' stackpointer=0
0a340                 | ' lineptr=0 
0a340                 | ' programptr=0 : stringptr=0
0a340                 | ' lastline=0 : lastlineptr=-1 :fortop=0
0a340                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
0a340     00 1E 06 F6 | 	mov	local01, #0
0a344     07 00 00 FF 
0a348     40 E5 85 F1 | 	sub	objptr, ##3904
0a34c     97 16 48 FB | 	callpa	#(@LR__0841-@LR__0840)>>2,fcache_load_ptr_
0a350                 | LR__0840
0a350     0F 21 02 F6 | 	mov	local02, local01
0a354     02 20 66 F0 | 	shl	local02, #2
0a358     0F 21 02 F1 | 	add	local02, local01
0a35c     02 20 66 F0 | 	shl	local02, #2
0a360     F2 20 02 F1 | 	add	local02, objptr
0a364     08 20 06 F1 | 	add	local02, #8
0a368     FF FF FF FF 
0a36c     10 FF 6B FC | 	wrlong	##-1, local02
0a370     01 1E 06 F1 | 	add	local01, #1
0a374     81 1E 56 F2 | 	cmps	local01, #129 wc
0a378     D4 FF 9F CD |  if_b	jmp	#LR__0840
0a37c                 | LR__0841
0a37c     49 00 00 FF 
0a380     5C E4 85 F1 | 	sub	objptr, ##37468
0a384                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i))
0a384     00 1E 06 F6 | 	mov	local01, #0
0a388                 | LR__0842
0a388     0F 21 02 F6 | 	mov	local02, local01
0a38c     02 20 66 F0 | 	shl	local02, #2
0a390     51 00 00 FF 
0a394     F8 E5 05 F1 | 	add	objptr, ##41976
0a398     F2 20 02 F1 | 	add	local02, objptr
0a39c     10 21 0A FB | 	rdlong	local02, local02 wz
0a3a0     51 00 00 FF 
0a3a4     F8 E5 85 F1 | 	sub	objptr, ##41976
0a3a8     34 00 90 AD |  if_e	jmp	#LR__0843
0a3ac     0F 13 02 F6 | 	mov	arg01, local01
0a3b0     00 14 06 F6 | 	mov	arg02, #0
0a3b4     00 16 06 F6 | 	mov	arg03, #0
0a3b8     A4 9F B0 FD | 	call	#_hg010b_spin2_setspritesize
0a3bc     0F 21 02 F6 | 	mov	local02, local01
0a3c0     02 20 66 F0 | 	shl	local02, #2
0a3c4     51 00 00 FF 
0a3c8     F8 E5 05 F1 | 	add	objptr, ##41976
0a3cc     F2 20 02 F1 | 	add	local02, objptr
0a3d0     10 13 02 FB | 	rdlong	arg01, local02
0a3d4     51 00 00 FF 
0a3d8     F8 E5 85 F1 | 	sub	objptr, ##41976
0a3dc     B8 F9 B0 FD | 	call	#__system___gc_free
0a3e0                 | LR__0843
0a3e0     F2 22 02 FB | 	rdlong	local03, objptr
0a3e4     52 00 00 FF 
0a3e8     3C E4 05 F1 | 	add	objptr, ##42044
0a3ec     F2 22 62 FC | 	wrlong	local03, objptr
0a3f0     52 00 00 FF 
0a3f4     3C E4 85 F1 | 	sub	objptr, ##42044
0a3f8     11 12 06 F6 | 	mov	arg01, #17
0a3fc     08 14 06 F6 | 	mov	arg02, #8
0a400     10 16 06 F6 | 	mov	arg03, #16
0a404     58 9F B0 FD | 	call	#_hg010b_spin2_setspritesize
0a408     01 1E 06 F1 | 	add	local01, #1
0a40c     10 1E 56 F2 | 	cmps	local01, #16 wc
0a410     74 FF 9F CD |  if_b	jmp	#LR__0842
0a414     A7 F0 03 F6 | 	mov	ptra, fp
0a418     B2 00 A0 FD | 	call	#popregs_
0a41c                 | _do_new_ret
0a41c     2D 00 64 FD | 	ret
0a420                 | 
0a420                 | ' 
0a420                 | ' '----------------------- goto
0a420                 | ' sub do_fast_goto
0a420                 | _do_fast_goto
0a420     02 4A 05 F6 | 	mov	COUNT_, #2
0a424     A8 00 A0 FD | 	call	#pushregs_
0a428                 | _do_fast_goto_enter
0a428     41 00 00 FF 
0a42c     44 E4 05 F1 | 	add	objptr, ##33348
0a430     F2 12 02 FB | 	rdlong	arg01, objptr
0a434     09 1F 02 F6 | 	mov	local01, arg01
0a438     01 1E 66 F0 | 	shl	local01, #1
0a43c     09 1F 02 F1 | 	add	local01, arg01
0a440     02 1E 66 F0 | 	shl	local01, #2
0a444     03 00 00 FF 
0a448     04 E4 85 F1 | 	sub	objptr, ##1540
0a44c     F2 1E 02 F1 | 	add	local01, objptr
0a450     0F 21 02 FB | 	rdlong	local02, local01
0a454     10 13 02 F6 | 	mov	arg01, local02
0a458     3E 00 00 FF 
0a45c     40 E4 85 F1 | 	sub	objptr, ##31808
0a460     30 8B B0 FD | 	call	#_pslpeek
0a464     FD 12 02 F6 | 	mov	arg01, result1
0a468                 | ' 
0a468                 | ' testptr=compiledline(lineptr_e).result.uresult
0a468                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
0a468                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
0a468     41 00 00 FF 
0a46c     44 E4 05 F1 | 	add	objptr, ##33348
0a470     F2 FA 01 FB | 	rdlong	result1, objptr
0a474     FD 1E 02 F6 | 	mov	local01, result1
0a478     01 1E 66 F0 | 	shl	local01, #1
0a47c     FD 1E 02 F1 | 	add	local01, result1
0a480     02 1E 66 F0 | 	shl	local01, #2
0a484     03 00 00 FF 
0a488     04 E4 85 F1 | 	sub	objptr, ##1540
0a48c     F2 1E 02 F1 | 	add	local01, objptr
0a490     04 1E 06 F1 | 	add	local01, #4
0a494     0F 1F 02 FB | 	rdlong	local01, local01
0a498     0F 13 0A F2 | 	cmp	arg01, local01 wz
0a49c     3E 00 00 FF 
0a4a0     40 E4 85 F1 | 	sub	objptr, ##31808
0a4a4     58 00 90 5D |  if_ne	jmp	#LR__0850
0a4a8     50 00 00 FF 
0a4ac     74 E5 05 F1 | 	add	objptr, ##41332
0a4b0     F2 20 62 FC | 	wrlong	local02, objptr
0a4b4     0F 00 00 FF 
0a4b8     34 E5 85 F1 | 	sub	objptr, ##7988
0a4bc     F2 20 02 FB | 	rdlong	local02, objptr
0a4c0     01 20 86 F1 | 	sub	local02, #1
0a4c4     04 E4 05 F1 | 	add	objptr, #4
0a4c8     F2 20 62 FC | 	wrlong	local02, objptr
0a4cc                 | '   runptr=testptr
0a4cc                 | '   lineptr_e=lineptr-1
0a4cc                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
0a4cc     0F 00 00 FF 
0a4d0     54 E5 05 F1 | 	add	objptr, ##8020
0a4d4     F2 20 02 FB | 	rdlong	local02, objptr
0a4d8     50 00 00 FF 
0a4dc     98 E5 85 F1 | 	sub	objptr, ##41368
0a4e0     FF FF 3F FF 
0a4e4     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
0a4e8     50 00 00 AF 
0a4ec     98 E5 05 A1 |  if_e	add	objptr, ##41368
0a4f0     F2 00 68 AC |  if_e	wrlong	#0, objptr
0a4f4     50 00 00 AF 
0a4f8     98 E5 85 A1 |  if_e	sub	objptr, ##41368
0a4fc     04 00 90 FD | 	jmp	#LR__0851
0a500                 | LR__0850
0a500     0C 00 B0 FD | 	call	#_do_find_goto
0a504                 | LR__0851
0a504     A7 F0 03 F6 | 	mov	ptra, fp
0a508     B2 00 A0 FD | 	call	#popregs_
0a50c                 | _do_fast_goto_ret
0a50c     2D 00 64 FD | 	ret
0a510                 | 
0a510                 | ' 
0a510                 | ' 
0a510                 | ' 
0a510                 | ' 
0a510                 | ' sub do_find_goto
0a510                 | _do_find_goto
0a510     03 4A 05 F6 | 	mov	COUNT_, #3
0a514     A8 00 A0 FD | 	call	#pushregs_
0a518     24 F0 07 F1 | 	add	ptra, #36
0a51c                 | _do_find_goto_enter
0a51c     41 00 00 FF 
0a520     44 E4 05 F1 | 	add	objptr, ##33348
0a524     F2 1E 02 FB | 	rdlong	local01, objptr
0a528     0F 21 02 F6 | 	mov	local02, local01
0a52c     01 20 66 F0 | 	shl	local02, #1
0a530     0F 21 02 F1 | 	add	local02, local01
0a534     02 20 66 F0 | 	shl	local02, #2
0a538     03 00 00 FF 
0a53c     04 E4 85 F1 | 	sub	objptr, ##1540
0a540     F2 20 02 F1 | 	add	local02, objptr
0a544     04 20 06 F1 | 	add	local02, #4
0a548     10 21 02 FB | 	rdlong	local02, local02
0a54c     A7 20 62 FC | 	wrlong	local02, fp
0a550     03 00 00 FF 
0a554     08 E4 05 F1 | 	add	objptr, ##1544
0a558     F2 22 02 FB | 	rdlong	local03, objptr
0a55c     41 00 00 FF 
0a560     48 E4 85 F1 | 	sub	objptr, ##33352
0a564     04 4E 05 F1 | 	add	fp, #4
0a568     A7 22 62 FC | 	wrlong	local03, fp
0a56c     04 4E 85 F1 | 	sub	fp, #4
0a570                 | ' 
0a570                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
0a570                 | '  ' print "find goto"                                                                     'print gotoline 
0a570                 | ' gotoptr=programstart
0a570                 | ' do
0a570                 | LR__0860
0a570     0C 4E 05 F1 | 	add	fp, #12
0a574     A7 12 02 F6 | 	mov	arg01, fp
0a578     08 4E 85 F1 | 	sub	fp, #8
0a57c     A7 14 02 FB | 	rdlong	arg02, fp
0a580     04 4E 85 F1 | 	sub	fp, #4
0a584     18 16 06 F6 | 	mov	arg03, #24
0a588     0B 00 00 FF 
0a58c     C0 E4 05 F1 | 	add	objptr, ##5824
0a590     78 B2 B0 FD | 	call	#_psram_spin2_read1
0a594     0B 00 00 FF 
0a598     C0 E4 85 F1 | 	sub	objptr, ##5824
0a59c                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
0a59c                 | '   if gotoheader(0)<>$FFFFFFFF then
0a59c     0C 4E 05 F1 | 	add	fp, #12
0a5a0     A7 22 02 FB | 	rdlong	local03, fp
0a5a4     0C 4E 85 F1 | 	sub	fp, #12
0a5a8     FF FF 7F FF 
0a5ac     FF 23 0E F2 | 	cmp	local03, ##-1 wz
0a5b0     24 00 90 AD |  if_e	jmp	#LR__0861
0a5b4     04 4E 05 F1 | 	add	fp, #4
0a5b8     A7 22 02 FB | 	rdlong	local03, fp
0a5bc     04 4E 05 F1 | 	add	fp, #4
0a5c0     A7 22 62 FC | 	wrlong	local03, fp
0a5c4     18 4E 05 F1 | 	add	fp, #24
0a5c8     A7 22 02 FB | 	rdlong	local03, fp
0a5cc     1C 4E 85 F1 | 	sub	fp, #28
0a5d0     A7 22 62 FC | 	wrlong	local03, fp
0a5d4     04 4E 85 F1 | 	sub	fp, #4
0a5d8                 | LR__0861
0a5d8     20 4E 05 F1 | 	add	fp, #32
0a5dc     A7 22 02 FB | 	rdlong	local03, fp
0a5e0     20 4E 85 F1 | 	sub	fp, #32
0a5e4     FF FF 3F FF 
0a5e8     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0a5ec     0C 4E 05 51 |  if_ne	add	fp, #12
0a5f0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0a5f4     0C 4E 85 51 |  if_ne	sub	fp, #12
0a5f8     FF FF 7F 5F 
0a5fc     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
0a600     18 00 90 AD |  if_e	jmp	#LR__0862
0a604     0C 4E 05 F1 | 	add	fp, #12
0a608     A7 22 02 FB | 	rdlong	local03, fp
0a60c     0C 4E 85 F1 | 	sub	fp, #12
0a610     A7 20 02 FB | 	rdlong	local02, fp
0a614     10 23 0A F2 | 	cmp	local03, local02 wz
0a618     54 FF 9F 5D |  if_ne	jmp	#LR__0860
0a61c                 | LR__0862
0a61c                 | ' 
0a61c                 | ' if gotoheader(0)=gotoline then
0a61c     0C 4E 05 F1 | 	add	fp, #12
0a620     A7 22 02 FB | 	rdlong	local03, fp
0a624     0C 4E 85 F1 | 	sub	fp, #12
0a628     A7 1E 02 FB | 	rdlong	local01, fp
0a62c     0F 23 0A F2 | 	cmp	local03, local01 wz
0a630     D8 00 90 5D |  if_ne	jmp	#LR__0863
0a634     41 00 00 FF 
0a638     44 E4 05 F1 | 	add	objptr, ##33348
0a63c     F2 1E 02 FB | 	rdlong	local01, objptr
0a640     0F 21 02 F6 | 	mov	local02, local01
0a644     01 20 66 F0 | 	shl	local02, #1
0a648     0F 21 02 F1 | 	add	local02, local01
0a64c     02 20 66 F0 | 	shl	local02, #2
0a650     03 00 00 FF 
0a654     04 E4 85 F1 | 	sub	objptr, ##1540
0a658     F2 20 02 F1 | 	add	local02, objptr
0a65c     08 4E 05 F1 | 	add	fp, #8
0a660     A7 22 02 FB | 	rdlong	local03, fp
0a664     10 23 62 FC | 	wrlong	local03, local02
0a668     03 00 00 FF 
0a66c     04 E4 05 F1 | 	add	objptr, ##1540
0a670     F2 1E 02 FB | 	rdlong	local01, objptr
0a674     0F 21 02 F6 | 	mov	local02, local01
0a678     01 20 66 F0 | 	shl	local02, #1
0a67c     0F 21 02 F1 | 	add	local02, local01
0a680     02 20 66 F0 | 	shl	local02, #2
0a684     03 00 00 FF 
0a688     04 E4 85 F1 | 	sub	objptr, ##1540
0a68c     F2 20 02 F1 | 	add	local02, objptr
0a690     08 20 06 F1 | 	add	local02, #8
0a694     10 9D 68 FC | 	wrlong	#78, local02
0a698     03 00 00 FF 
0a69c     04 E4 05 F1 | 	add	objptr, ##1540
0a6a0     F2 20 02 FB | 	rdlong	local02, objptr
0a6a4     10 13 02 F6 | 	mov	arg01, local02
0a6a8     01 12 66 F0 | 	shl	arg01, #1
0a6ac     10 13 02 F1 | 	add	arg01, local02
0a6b0     02 12 66 F0 | 	shl	arg01, #2
0a6b4     03 00 00 FF 
0a6b8     04 E4 85 F1 | 	sub	objptr, ##1540
0a6bc     F2 12 02 F1 | 	add	arg01, objptr
0a6c0     12 00 00 FF 
0a6c4     3C E5 05 F1 | 	add	objptr, ##9532
0a6c8     F2 14 02 FB | 	rdlong	arg02, objptr
0a6cc     02 22 06 F6 | 	mov	local03, #2
0a6d0     10 23 02 F1 | 	add	local03, local02
0a6d4     14 00 00 FF 
0a6d8     54 E5 85 F1 | 	sub	objptr, ##10580
0a6dc     F2 16 02 FB | 	rdlong	arg03, objptr
0a6e0     0B 23 02 FD | 	qmul	local03, arg03
0a6e4     08 4E 85 F1 | 	sub	fp, #8
0a6e8     30 00 00 FF 
0a6ec     68 E5 85 F1 | 	sub	objptr, ##24936
0a6f0     18 22 62 FD | 	getqx	local03
0a6f4     11 15 02 F1 | 	add	arg02, local03
0a6f8     AC B1 B0 FD | 	call	#_psram_spin2_write
0a6fc     0B 00 00 FF 
0a700     C0 E4 85 F1 | 	sub	objptr, ##5824
0a704     18 FD BF FD | 	call	#_do_fast_goto
0a708     08 00 90 FD | 	jmp	#LR__0864
0a70c                 | LR__0863
0a70c     26 12 06 F6 | 	mov	arg01, #38
0a710     C4 86 B0 FD | 	call	#_printerror
0a714                 | LR__0864
0a714     A7 F0 03 F6 | 	mov	ptra, fp
0a718     B2 00 A0 FD | 	call	#popregs_
0a71c                 | _do_find_goto_ret
0a71c     2D 00 64 FD | 	ret
0a720                 | 
0a720                 | ' 
0a720                 | ' sub do_slow_goto
0a720                 | _do_slow_goto
0a720                 | _do_slow_goto_ret
0a720     2D 00 64 FD | 	ret
0a724                 | 
0a724                 | ' 
0a724                 | ' '----------------------- Error processing
0a724                 | ' 
0a724                 | ' sub do_error
0a724                 | _do_error
0a724     01 4A 05 F6 | 	mov	COUNT_, #1
0a728     A8 00 A0 FD | 	call	#pushregs_
0a72c     41 00 00 FF 
0a730     44 E4 05 F1 | 	add	objptr, ##33348
0a734     F2 18 02 FB | 	rdlong	arg04, objptr
0a738     0C 17 02 F6 | 	mov	arg03, arg04
0a73c     01 16 66 F0 | 	shl	arg03, #1
0a740     0C 17 02 F1 | 	add	arg03, arg04
0a744     02 16 66 F0 | 	shl	arg03, #2
0a748     03 00 00 FF 
0a74c     04 E4 85 F1 | 	sub	objptr, ##1540
0a750     F2 16 02 F1 | 	add	arg03, objptr
0a754     0B 1F 02 FB | 	rdlong	local01, arg03
0a758                 | ' r=compiledline(lineptr_e).result.uresult
0a758                 | ' print "Error ";r;": ";errors$(r)
0a758     00 12 06 F6 | 	mov	arg01, #0
0a75c     3E 00 00 FF 
0a760     40 E4 85 F1 | 	sub	objptr, ##31808
0a764     40 10 B1 FD | 	call	#__system___getiolock_0372
0a768     FD 12 02 F6 | 	mov	arg01, result1
0a76c     88 BB B0 FD | 	call	#__system___lockmem
0a770     2B 01 00 FF 
0a774     1B 15 06 F6 | 	mov	arg02, ##@LR__4325
0a778     00 12 06 F6 | 	mov	arg01, #0
0a77c     00 16 06 F6 | 	mov	arg03, #0
0a780     68 C8 B0 FD | 	call	#__system___basic_print_string
0a784     00 12 06 F6 | 	mov	arg01, #0
0a788     0F 15 02 F6 | 	mov	arg02, local01
0a78c     00 16 06 F6 | 	mov	arg03, #0
0a790     0A 18 06 F6 | 	mov	arg04, #10
0a794     D8 C8 B0 FD | 	call	#__system___basic_print_unsigned
0a798     2B 01 00 FF 
0a79c     22 15 06 F6 | 	mov	arg02, ##@LR__4326
0a7a0     00 12 06 F6 | 	mov	arg01, #0
0a7a4     00 16 06 F6 | 	mov	arg03, #0
0a7a8     40 C8 B0 FD | 	call	#__system___basic_print_string
0a7ac     02 1E 66 F0 | 	shl	local01, #2
0a7b0     3C 00 00 FF 
0a7b4     40 E4 05 F1 | 	add	objptr, ##30784
0a7b8     F2 1E 02 F1 | 	add	local01, objptr
0a7bc     0F 15 02 FB | 	rdlong	arg02, local01
0a7c0     00 12 06 F6 | 	mov	arg01, #0
0a7c4     00 16 06 F6 | 	mov	arg03, #0
0a7c8     3C 00 00 FF 
0a7cc     40 E4 85 F1 | 	sub	objptr, ##30784
0a7d0     18 C8 B0 FD | 	call	#__system___basic_print_string
0a7d4     00 12 06 F6 | 	mov	arg01, #0
0a7d8     0A 14 06 F6 | 	mov	arg02, #10
0a7dc     00 16 06 F6 | 	mov	arg03, #0
0a7e0     B0 C7 B0 FD | 	call	#__system___basic_print_char
0a7e4     00 12 06 F6 | 	mov	arg01, #0
0a7e8     BC 0F B1 FD | 	call	#__system___getiolock_0372
0a7ec     FD 00 68 FC | 	wrlong	#0, result1
0a7f0     A7 F0 03 F6 | 	mov	ptra, fp
0a7f4     B2 00 A0 FD | 	call	#popregs_
0a7f8                 | _do_error_ret
0a7f8     2D 00 64 FD | 	ret
0a7fc                 | 
0a7fc                 | ' 
0a7fc                 | ' 
0a7fc                 | ' '------------------ Assigning to a variable  
0a7fc                 | ' 
0a7fc                 | ' function  convertstring(psaddr as ulong) as string
0a7fc                 | _convertstring
0a7fc     04 4A 05 F6 | 	mov	COUNT_, #4
0a800     A8 00 A0 FD | 	call	#pushregs_
0a804     09 1F 02 F6 | 	mov	local01, arg01
0a808     88 87 B0 FD | 	call	#_pslpeek
0a80c     FD 20 02 F6 | 	mov	local02, result1
0a810     2B 01 00 FF 
0a814     25 23 06 F6 | 	mov	local03, ##@LR__4327
0a818                 | ' 'print "in convertstring: psaddr=";psaddr
0a818                 | ' l=pslpeek(psaddr)
0a818                 | ' 'print "in convertstring: len=";l
0a818                 | ' s="" 
0a818                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0a818     01 24 06 F6 | 	mov	local04, #1
0a81c     01 20 06 F1 | 	add	local02, #1
0a820                 | LR__0870
0a820     10 25 52 F2 | 	cmps	local04, local02 wc
0a824     30 00 90 3D |  if_ae	jmp	#LR__0871
0a828     0F 13 02 F6 | 	mov	arg01, local01
0a82c     03 12 06 F1 | 	add	arg01, #3
0a830     12 13 02 F1 | 	add	arg01, local04
0a834     04 87 B0 FD | 	call	#_pspeek
0a838     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0a83c     8C DC B0 FD | 	call	#__system__Chr_S
0a840     FD 14 02 F6 | 	mov	arg02, result1
0a844     11 13 02 F6 | 	mov	arg01, local03
0a848     08 BB B0 FD | 	call	#__system___string_concat
0a84c     FD 22 02 F6 | 	mov	local03, result1
0a850     01 24 06 F1 | 	add	local04, #1
0a854     C8 FF 9F FD | 	jmp	#LR__0870
0a858                 | LR__0871
0a858                 | ' 'print "in convertstring: str=";s
0a858                 | ' return s
0a858     11 FB 01 F6 | 	mov	result1, local03
0a85c     A7 F0 03 F6 | 	mov	ptra, fp
0a860     B2 00 A0 FD | 	call	#popregs_
0a864                 | _convertstring_ret
0a864     2D 00 64 FD | 	ret
0a868                 | 
0a868                 | ' 
0a868                 | ' sub do_assign
0a868                 | _do_assign
0a868     05 4A 05 F6 | 	mov	COUNT_, #5
0a86c     A8 00 A0 FD | 	call	#pushregs_
0a870     44 F0 07 F1 | 	add	ptra, #68
0a874     41 00 00 FF 
0a878     44 E4 05 F1 | 	add	objptr, ##33348
0a87c     F2 16 02 FB | 	rdlong	arg03, objptr
0a880     0B 15 02 F6 | 	mov	arg02, arg03
0a884     01 14 66 F0 | 	shl	arg02, #1
0a888     0B 15 02 F1 | 	add	arg02, arg03
0a88c     02 14 66 F0 | 	shl	arg02, #2
0a890     03 00 00 FF 
0a894     04 E4 85 F1 | 	sub	objptr, ##1540
0a898     F2 14 02 F1 | 	add	arg02, objptr
0a89c     0A 15 02 FB | 	rdlong	arg02, arg02
0a8a0     18 4E 05 F1 | 	add	fp, #24
0a8a4     A7 14 62 FC | 	wrlong	arg02, fp
0a8a8                 | ' 
0a8a8                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
0a8a8                 | ' 
0a8a8                 | ' if variables(varnum).vartype<array_no_type then 
0a8a8     18 4E 85 F1 | 	sub	fp, #24
0a8ac     04 14 66 F0 | 	shl	arg02, #4
0a8b0     32 00 00 FF 
0a8b4     74 E4 85 F1 | 	sub	objptr, ##25716
0a8b8     F2 14 02 F1 | 	add	arg02, objptr
0a8bc     0C 14 06 F1 | 	add	arg02, #12
0a8c0     0A 17 02 FB | 	rdlong	arg03, arg02
0a8c4     00 17 16 F2 | 	cmp	arg03, #256 wc
0a8c8     0B 00 00 FF 
0a8cc     CC E5 85 F1 | 	sub	objptr, ##6092
0a8d0     18 01 90 3D |  if_ae	jmp	#LR__0880
0a8d4     38 E2 BF FD | 	call	#_pop
0a8d8     A7 FA 61 FC | 	wrlong	result1, fp
0a8dc     04 4E 05 F1 | 	add	fp, #4
0a8e0     A7 FC 61 FC | 	wrlong	result2, fp
0a8e4     04 4E 05 F1 | 	add	fp, #4
0a8e8     A7 FE 61 FC | 	wrlong	result3, fp
0a8ec     08 4E 85 F1 | 	sub	fp, #8
0a8f0     A7 16 02 FB | 	rdlong	arg03, fp
0a8f4     04 4E 05 F1 | 	add	fp, #4
0a8f8     A7 14 02 FB | 	rdlong	arg02, fp
0a8fc     14 4E 05 F1 | 	add	fp, #20
0a900     A7 12 02 FB | 	rdlong	arg01, fp
0a904     04 12 66 F0 | 	shl	arg01, #4
0a908     0B 00 00 FF 
0a90c     CC E5 05 F1 | 	add	objptr, ##6092
0a910     F2 12 02 F1 | 	add	arg01, objptr
0a914     04 12 06 F1 | 	add	arg01, #4
0a918     09 17 62 FC | 	wrlong	arg03, arg01
0a91c     A7 16 02 FB | 	rdlong	arg03, fp
0a920     04 16 66 F0 | 	shl	arg03, #4
0a924     F2 16 02 F1 | 	add	arg03, objptr
0a928     08 16 06 F1 | 	add	arg03, #8
0a92c     0B 15 62 FC | 	wrlong	arg02, arg03
0a930     A7 16 02 FB | 	rdlong	arg03, fp
0a934     04 16 66 F0 | 	shl	arg03, #4
0a938     F2 16 02 F1 | 	add	arg03, objptr
0a93c     10 4E 85 F1 | 	sub	fp, #16
0a940     A7 14 02 FB | 	rdlong	arg02, fp
0a944     0C 16 06 F1 | 	add	arg03, #12
0a948     0B 15 62 FC | 	wrlong	arg02, arg03
0a94c                 | '   t1=pop() 
0a94c                 | ' 'print "In do_assign value to assign=";t1.result.uresult, "type to assign=";t1.result_type  
0a94c                 | '    variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
0a94c                 | '   if variables(varnum).vartype<>result_string2 then return
0a94c     10 4E 05 F1 | 	add	fp, #16
0a950     A7 16 02 FB | 	rdlong	arg03, fp
0a954     18 4E 85 F1 | 	sub	fp, #24
0a958     04 16 66 F0 | 	shl	arg03, #4
0a95c     F2 16 02 F1 | 	add	arg03, objptr
0a960     0C 16 06 F1 | 	add	arg03, #12
0a964     0B 17 02 FB | 	rdlong	arg03, arg03
0a968     2B 16 0E F2 | 	cmp	arg03, #43 wz
0a96c     0B 00 00 FF 
0a970     CC E5 85 F1 | 	sub	objptr, ##6092
0a974     9C 05 90 5D |  if_ne	jmp	#LR__0901
0a978     18 4E 05 F1 | 	add	fp, #24
0a97c     A7 16 02 FB | 	rdlong	arg03, fp
0a980     0B 1F 02 F6 | 	mov	local01, arg03
0a984     04 1E 66 F0 | 	shl	local01, #4
0a988     0B 00 00 FF 
0a98c     CC E5 05 F1 | 	add	objptr, ##6092
0a990     F2 1E 02 F1 | 	add	local01, objptr
0a994     18 4E 85 F1 | 	sub	fp, #24
0a998     04 16 66 F0 | 	shl	arg03, #4
0a99c     F2 16 02 F1 | 	add	arg03, objptr
0a9a0     04 16 06 F1 | 	add	arg03, #4
0a9a4     0B 13 02 FB | 	rdlong	arg01, arg03
0a9a8     0B 00 00 FF 
0a9ac     CC E5 85 F1 | 	sub	objptr, ##6092
0a9b0     48 FE BF FD | 	call	#_convertstring
0a9b4     04 1E 06 F1 | 	add	local01, #4
0a9b8     0F FB 61 FC | 	wrlong	result1, local01
0a9bc     18 4E 05 F1 | 	add	fp, #24
0a9c0     A7 1E 02 FB | 	rdlong	local01, fp
0a9c4     18 4E 85 F1 | 	sub	fp, #24
0a9c8     04 1E 66 F0 | 	shl	local01, #4
0a9cc     0B 00 00 FF 
0a9d0     CC E5 05 F1 | 	add	objptr, ##6092
0a9d4     F2 1E 02 F1 | 	add	local01, objptr
0a9d8     0C 1E 06 F1 | 	add	local01, #12
0a9dc     0F 3F 68 FC | 	wrlong	#31, local01
0a9e0                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
0a9e0                 | '   variables(varnum).vartype=result_string
0a9e0                 | '   return
0a9e0     0B 00 00 FF 
0a9e4     CC E5 85 F1 | 	sub	objptr, ##6092
0a9e8     28 05 90 FD | 	jmp	#LR__0901
0a9ec                 | LR__0880
0a9ec                 | ' for i=0 to 2 : arrid(i)=0 : next i
0a9ec     1C 4E 05 F1 | 	add	fp, #28
0a9f0     A7 00 68 FC | 	wrlong	#0, fp
0a9f4     97 16 48 FB | 	callpa	#(@LR__0882-@LR__0881)>>2,fcache_load_ptr_
0a9f8                 | LR__0881
0a9f8     A7 1E 02 FB | 	rdlong	local01, fp
0a9fc     02 1E 66 F0 | 	shl	local01, #2
0aa00     18 4E 05 F1 | 	add	fp, #24
0aa04     A7 1E 02 F1 | 	add	local01, fp
0aa08     0F 01 68 FC | 	wrlong	#0, local01
0aa0c     18 4E 85 F1 | 	sub	fp, #24
0aa10     A7 1E 02 FB | 	rdlong	local01, fp
0aa14     01 1E 06 F1 | 	add	local01, #1
0aa18     A7 1E 62 FC | 	wrlong	local01, fp
0aa1c     03 1E 16 F2 | 	cmp	local01, #3 wc
0aa20     D4 FF 9F CD |  if_b	jmp	#LR__0881
0aa24                 | LR__0882
0aa24     41 00 00 FF 
0aa28     44 E4 05 F1 | 	add	objptr, ##33348
0aa2c     F2 16 02 FB | 	rdlong	arg03, objptr
0aa30     0B 1F 02 F6 | 	mov	local01, arg03
0aa34     01 1E 66 F0 | 	shl	local01, #1
0aa38     0B 1F 02 F1 | 	add	local01, arg03
0aa3c     02 1E 66 F0 | 	shl	local01, #2
0aa40     03 00 00 FF 
0aa44     04 E4 85 F1 | 	sub	objptr, ##1540
0aa48     F2 1E 02 F1 | 	add	local01, objptr
0aa4c     04 1E 06 F1 | 	add	local01, #4
0aa50     0F 21 02 FB | 	rdlong	local02, local01
0aa54     04 4E 05 F1 | 	add	fp, #4
0aa58     A7 20 62 FC | 	wrlong	local02, fp
0aa5c     20 4E 85 F1 | 	sub	fp, #32
0aa60     3E 00 00 FF 
0aa64     40 E4 85 F1 | 	sub	objptr, ##31808
0aa68     A4 E0 BF FD | 	call	#_pop
0aa6c     A7 FA 61 FC | 	wrlong	result1, fp
0aa70     04 4E 05 F1 | 	add	fp, #4
0aa74     A7 FC 61 FC | 	wrlong	result2, fp
0aa78     04 4E 05 F1 | 	add	fp, #4
0aa7c     A7 FE 61 FC | 	wrlong	result3, fp
0aa80                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
0aa80                 | ' t1=pop() ' var value
0aa80                 | ' if numpar>0 then
0aa80     18 4E 05 F1 | 	add	fp, #24
0aa84     A7 22 02 FB | 	rdlong	local03, fp
0aa88     20 4E 85 F1 | 	sub	fp, #32
0aa8c     01 22 16 F2 | 	cmp	local03, #1 wc
0aa90     70 00 90 CD |  if_b	jmp	#LR__0885
0aa94                 | '   for i=numpar to 1 step -1
0aa94     20 4E 05 F1 | 	add	fp, #32
0aa98     A7 24 0A FB | 	rdlong	local04, fp wz
0aa9c     04 4E 85 F1 | 	sub	fp, #4
0aaa0     A7 24 62 FC | 	wrlong	local04, fp
0aaa4     1C 4E 85 F1 | 	sub	fp, #28
0aaa8     58 00 90 AD |  if_e	jmp	#LR__0884
0aaac                 | LR__0883
0aaac     60 E0 BF FD | 	call	#_pop
0aab0     0C 4E 05 F1 | 	add	fp, #12
0aab4     A7 FA 61 FC | 	wrlong	result1, fp
0aab8     04 4E 05 F1 | 	add	fp, #4
0aabc     A7 FC 61 FC | 	wrlong	result2, fp
0aac0     04 4E 05 F1 | 	add	fp, #4
0aac4     A7 FE 61 FC | 	wrlong	result3, fp
0aac8     08 4E 05 F1 | 	add	fp, #8
0aacc     A7 22 02 FB | 	rdlong	local03, fp
0aad0     01 22 86 F1 | 	sub	local03, #1
0aad4     02 22 66 F0 | 	shl	local03, #2
0aad8     18 4E 05 F1 | 	add	fp, #24
0aadc     A7 22 02 F1 | 	add	local03, fp
0aae0     28 4E 85 F1 | 	sub	fp, #40
0aae4     A7 24 02 FB | 	rdlong	local04, fp
0aae8     11 25 62 FC | 	wrlong	local04, local03
0aaec     10 4E 05 F1 | 	add	fp, #16
0aaf0     A7 24 02 FB | 	rdlong	local04, fp
0aaf4     01 24 8E F1 | 	sub	local04, #1 wz
0aaf8     A7 24 62 FC | 	wrlong	local04, fp
0aafc     1C 4E 85 F1 | 	sub	fp, #28
0ab00     A8 FF 9F 5D |  if_ne	jmp	#LR__0883
0ab04                 | LR__0884
0ab04                 | LR__0885
0ab04     18 4E 05 F1 | 	add	fp, #24
0ab08     A7 1E 02 FB | 	rdlong	local01, fp
0ab0c     04 1E 66 F0 | 	shl	local01, #4
0ab10     0B 00 00 FF 
0ab14     CC E5 05 F1 | 	add	objptr, ##6092
0ab18     F2 1E 02 F1 | 	add	local01, objptr
0ab1c     04 1E 06 F1 | 	add	local01, #4
0ab20     0F 13 02 FB | 	rdlong	arg01, local01
0ab24     0C 4E 05 F1 | 	add	fp, #12
0ab28     A7 12 62 FC | 	wrlong	arg01, fp
0ab2c     24 4E 85 F1 | 	sub	fp, #36
0ab30     0B 00 00 FF 
0ab34     CC E5 85 F1 | 	sub	objptr, ##6092
0ab38     58 84 B0 FD | 	call	#_pslpeek
0ab3c     FD 24 32 F9 | 	getword	local04, result1, #0
0ab40     28 4E 05 F1 | 	add	fp, #40
0ab44     A7 24 62 FC | 	wrlong	local04, fp
0ab48     04 4E 85 F1 | 	sub	fp, #4
0ab4c     A7 12 02 FB | 	rdlong	arg01, fp
0ab50     24 4E 85 F1 | 	sub	fp, #36
0ab54     02 12 06 F1 | 	add	arg01, #2
0ab58     E0 83 B0 FD | 	call	#_pspeek
0ab5c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0ab60     2C 4E 05 F1 | 	add	fp, #44
0ab64     A7 FA 61 FC | 	wrlong	result1, fp
0ab68     08 4E 85 F1 | 	sub	fp, #8
0ab6c     A7 12 02 FB | 	rdlong	arg01, fp
0ab70     09 25 02 F6 | 	mov	local04, arg01
0ab74     10 24 06 F1 | 	add	local04, #16
0ab78     24 4E 85 F1 | 	sub	fp, #36
0ab7c     04 12 06 F1 | 	add	arg01, #4
0ab80     10 84 B0 FD | 	call	#_pslpeek
0ab84     FD 1E 02 F6 | 	mov	local01, result1
0ab88     38 4E 05 F1 | 	add	fp, #56
0ab8c     A7 20 02 FB | 	rdlong	local02, fp
0ab90     10 1F 02 FD | 	qmul	local01, local02
0ab94     04 4E 85 F1 | 	sub	fp, #4
0ab98     A7 22 02 FB | 	rdlong	local03, fp
0ab9c     10 4E 85 F1 | 	sub	fp, #16
0aba0     A7 12 02 FB | 	rdlong	arg01, fp
0aba4     24 4E 85 F1 | 	sub	fp, #36
0aba8     08 12 06 F1 | 	add	arg01, #8
0abac     18 20 62 FD | 	getqx	local02
0abb0     10 23 02 F1 | 	add	local03, local02
0abb4     DC 83 B0 FD | 	call	#_pslpeek
0abb8     FD 20 02 F6 | 	mov	local02, result1
0abbc     24 4E 05 F1 | 	add	fp, #36
0abc0     A7 12 02 FB | 	rdlong	arg01, fp
0abc4     24 4E 85 F1 | 	sub	fp, #36
0abc8     04 12 06 F1 | 	add	arg01, #4
0abcc     C4 83 B0 FD | 	call	#_pslpeek
0abd0     FD 20 02 FD | 	qmul	local02, result1
0abd4     3C 4E 05 F1 | 	add	fp, #60
0abd8     A7 20 02 FB | 	rdlong	local02, fp
0abdc     18 1E 62 FD | 	getqx	local01
0abe0     10 1F 02 FD | 	qmul	local01, local02
0abe4     10 4E 85 F1 | 	sub	fp, #16
0abe8     A7 20 02 FB | 	rdlong	local02, fp
0abec     18 1E 62 FD | 	getqx	local01
0abf0     0F 23 02 F1 | 	add	local03, local01
0abf4     11 21 02 FD | 	qmul	local02, local03
0abf8     04 4E 05 F1 | 	add	fp, #4
0abfc                 | ' esize=pspeek(arrptr+2)
0abfc                 | ' 'print " in do_assign, pslpeek(arrptr+4)="; pslpeek(arrptr+4)
0abfc                 | ' 'print " in do_assign, pslpeek(arrptr+8)="; pslpeek(arrptr+8)
0abfc                 | ' 'print " in do_assign, pslpeek(arrptr+12)="; pslpeek(arrptr+12)
0abfc                 | ' 
0abfc                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
0abfc                 | ' select case arrtype
0abfc     18 22 62 FD | 	getqx	local03
0ac00     11 25 02 F1 | 	add	local04, local03
0ac04     A7 24 62 FC | 	wrlong	local04, fp
0ac08     08 4E 85 F1 | 	sub	fp, #8
0ac0c     A7 26 02 FB | 	rdlong	local05, fp
0ac10     28 4E 85 F1 | 	sub	fp, #40
0ac14     00 27 86 F1 | 	sub	local05, #256
0ac18     0C 26 26 F3 | 	fle	local05, #12
0ac1c     30 26 62 FD | 	jmprel	local05
0ac20                 | LR__0886
0ac20     30 00 90 FD | 	jmp	#LR__0887
0ac24     58 00 90 FD | 	jmp	#LR__0888
0ac28     88 00 90 FD | 	jmp	#LR__0889
0ac2c     B8 00 90 FD | 	jmp	#LR__0890
0ac30     10 01 90 FD | 	jmp	#LR__0891
0ac34     68 01 90 FD | 	jmp	#LR__0892
0ac38     98 01 90 FD | 	jmp	#LR__0893
0ac3c     C8 01 90 FD | 	jmp	#LR__0894
0ac40     F8 01 90 FD | 	jmp	#LR__0895
0ac44     28 02 90 FD | 	jmp	#LR__0896
0ac48     58 02 90 FD | 	jmp	#LR__0897
0ac4c     88 02 90 FD | 	jmp	#LR__0898
0ac50     B8 02 90 FD | 	jmp	#LR__0899
0ac54                 | LR__0887
0ac54     A7 12 02 F6 | 	mov	arg01, fp
0ac58     30 4E 05 F1 | 	add	fp, #48
0ac5c     A7 14 02 FB | 	rdlong	arg02, fp
0ac60     30 4E 85 F1 | 	sub	fp, #48
0ac64     0C 16 06 F6 | 	mov	arg03, #12
0ac68     0B 00 00 FF 
0ac6c     C0 E4 05 F1 | 	add	objptr, ##5824
0ac70     34 AC B0 FD | 	call	#_psram_spin2_write
0ac74     0B 00 00 FF 
0ac78     C0 E4 85 F1 | 	sub	objptr, ##5824
0ac7c     94 02 90 FD | 	jmp	#LR__0900
0ac80                 | LR__0888
0ac80     30 4E 05 F1 | 	add	fp, #48
0ac84     A7 12 02 FB | 	rdlong	arg01, fp
0ac88     30 4E 85 F1 | 	sub	fp, #48
0ac8c     A7 14 02 FB | 	rdlong	arg02, fp
0ac90     01 16 06 F6 | 	mov	arg03, #1
0ac94     00 18 06 F6 | 	mov	arg04, #0
0ac98     0B 00 00 FF 
0ac9c     C0 E4 05 F1 | 	add	objptr, ##5824
0aca0                 | '     return fill(addr, pattern, count, listPtr, 1)
0aca0     01 1A 06 F6 | 	mov	arg05, #1
0aca4     9C AC B0 FD | 	call	#_psram_spin2_fill
0aca8     0B 00 00 FF 
0acac     C0 E4 85 F1 | 	sub	objptr, ##5824
0acb0     60 02 90 FD | 	jmp	#LR__0900
0acb4                 | LR__0889
0acb4     30 4E 05 F1 | 	add	fp, #48
0acb8     A7 12 02 FB | 	rdlong	arg01, fp
0acbc     30 4E 85 F1 | 	sub	fp, #48
0acc0     A7 14 02 FB | 	rdlong	arg02, fp
0acc4     01 16 06 F6 | 	mov	arg03, #1
0acc8     00 18 06 F6 | 	mov	arg04, #0
0accc     0B 00 00 FF 
0acd0     C0 E4 05 F1 | 	add	objptr, ##5824
0acd4                 | '     return fill(addr, pattern, count, listPtr, 1)
0acd4     01 1A 06 F6 | 	mov	arg05, #1
0acd8     68 AC B0 FD | 	call	#_psram_spin2_fill
0acdc     0B 00 00 FF 
0ace0     C0 E4 85 F1 | 	sub	objptr, ##5824
0ace4     2C 02 90 FD | 	jmp	#LR__0900
0ace8                 | LR__0890
0ace8     30 4E 05 F1 | 	add	fp, #48
0acec     A7 12 02 FB | 	rdlong	arg01, fp
0acf0     30 4E 85 F1 | 	sub	fp, #48
0acf4     A7 14 02 FB | 	rdlong	arg02, fp
0acf8     01 16 06 F6 | 	mov	arg03, #1
0acfc     00 18 06 F6 | 	mov	arg04, #0
0ad00     0B 00 00 FF 
0ad04     C0 E4 05 F1 | 	add	objptr, ##5824
0ad08                 | '     return fill(addr, pattern, count, listPtr, 1)
0ad08     01 1A 06 F6 | 	mov	arg05, #1
0ad0c     34 AC B0 FD | 	call	#_psram_spin2_fill
0ad10     30 4E 05 F1 | 	add	fp, #48
0ad14     A7 12 02 FB | 	rdlong	arg01, fp
0ad18     30 4E 85 F1 | 	sub	fp, #48
0ad1c     01 12 06 F1 | 	add	arg01, #1
0ad20     A7 14 02 FB | 	rdlong	arg02, fp
0ad24     08 14 46 F0 | 	shr	arg02, #8
0ad28     01 16 06 F6 | 	mov	arg03, #1
0ad2c     00 18 06 F6 | 	mov	arg04, #0
0ad30                 | '     return fill(addr, pattern, count, listPtr, 1)
0ad30     01 1A 06 F6 | 	mov	arg05, #1
0ad34     0C AC B0 FD | 	call	#_psram_spin2_fill
0ad38     0B 00 00 FF 
0ad3c     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad40     D0 01 90 FD | 	jmp	#LR__0900
0ad44                 | LR__0891
0ad44     30 4E 05 F1 | 	add	fp, #48
0ad48     A7 12 02 FB | 	rdlong	arg01, fp
0ad4c     30 4E 85 F1 | 	sub	fp, #48
0ad50     A7 14 02 FB | 	rdlong	arg02, fp
0ad54     01 16 06 F6 | 	mov	arg03, #1
0ad58     00 18 06 F6 | 	mov	arg04, #0
0ad5c     0B 00 00 FF 
0ad60     C0 E4 05 F1 | 	add	objptr, ##5824
0ad64                 | '     return fill(addr, pattern, count, listPtr, 1)
0ad64     01 1A 06 F6 | 	mov	arg05, #1
0ad68     D8 AB B0 FD | 	call	#_psram_spin2_fill
0ad6c     30 4E 05 F1 | 	add	fp, #48
0ad70     A7 12 02 FB | 	rdlong	arg01, fp
0ad74     30 4E 85 F1 | 	sub	fp, #48
0ad78     01 12 06 F1 | 	add	arg01, #1
0ad7c     A7 14 02 FB | 	rdlong	arg02, fp
0ad80     08 14 46 F0 | 	shr	arg02, #8
0ad84     01 16 06 F6 | 	mov	arg03, #1
0ad88     00 18 06 F6 | 	mov	arg04, #0
0ad8c                 | '     return fill(addr, pattern, count, listPtr, 1)
0ad8c     01 1A 06 F6 | 	mov	arg05, #1
0ad90     B0 AB B0 FD | 	call	#_psram_spin2_fill
0ad94     0B 00 00 FF 
0ad98     C0 E4 85 F1 | 	sub	objptr, ##5824
0ad9c     74 01 90 FD | 	jmp	#LR__0900
0ada0                 | LR__0892
0ada0     30 4E 05 F1 | 	add	fp, #48
0ada4     A7 12 02 FB | 	rdlong	arg01, fp
0ada8     30 4E 85 F1 | 	sub	fp, #48
0adac     A7 14 02 FB | 	rdlong	arg02, fp
0adb0     01 16 06 F6 | 	mov	arg03, #1
0adb4     00 18 06 F6 | 	mov	arg04, #0
0adb8     0B 00 00 FF 
0adbc     C0 E4 05 F1 | 	add	objptr, ##5824
0adc0                 | '     return fill(addr, pattern, count, listPtr, 4)
0adc0     04 1A 06 F6 | 	mov	arg05, #4
0adc4     7C AB B0 FD | 	call	#_psram_spin2_fill
0adc8     0B 00 00 FF 
0adcc     C0 E4 85 F1 | 	sub	objptr, ##5824
0add0     40 01 90 FD | 	jmp	#LR__0900
0add4                 | LR__0893
0add4     30 4E 05 F1 | 	add	fp, #48
0add8     A7 12 02 FB | 	rdlong	arg01, fp
0addc     30 4E 85 F1 | 	sub	fp, #48
0ade0     A7 14 02 FB | 	rdlong	arg02, fp
0ade4     01 16 06 F6 | 	mov	arg03, #1
0ade8     00 18 06 F6 | 	mov	arg04, #0
0adec     0B 00 00 FF 
0adf0     C0 E4 05 F1 | 	add	objptr, ##5824
0adf4                 | '     return fill(addr, pattern, count, listPtr, 4)
0adf4     04 1A 06 F6 | 	mov	arg05, #4
0adf8     48 AB B0 FD | 	call	#_psram_spin2_fill
0adfc     0B 00 00 FF 
0ae00     C0 E4 85 F1 | 	sub	objptr, ##5824
0ae04     0C 01 90 FD | 	jmp	#LR__0900
0ae08                 | LR__0894
0ae08     30 4E 05 F1 | 	add	fp, #48
0ae0c     A7 12 02 FB | 	rdlong	arg01, fp
0ae10     30 4E 85 F1 | 	sub	fp, #48
0ae14     A7 14 02 FB | 	rdlong	arg02, fp
0ae18     01 16 06 F6 | 	mov	arg03, #1
0ae1c     00 18 06 F6 | 	mov	arg04, #0
0ae20     0B 00 00 FF 
0ae24     C0 E4 05 F1 | 	add	objptr, ##5824
0ae28                 | '     return fill(addr, pattern, count, listPtr, 4)
0ae28     04 1A 06 F6 | 	mov	arg05, #4
0ae2c     14 AB B0 FD | 	call	#_psram_spin2_fill
0ae30     0B 00 00 FF 
0ae34     C0 E4 85 F1 | 	sub	objptr, ##5824
0ae38     D8 00 90 FD | 	jmp	#LR__0900
0ae3c                 | LR__0895
0ae3c     30 4E 05 F1 | 	add	fp, #48
0ae40     A7 12 02 FB | 	rdlong	arg01, fp
0ae44     30 4E 85 F1 | 	sub	fp, #48
0ae48     A7 14 02 FB | 	rdlong	arg02, fp
0ae4c     01 16 06 F6 | 	mov	arg03, #1
0ae50     00 18 06 F6 | 	mov	arg04, #0
0ae54     0B 00 00 FF 
0ae58     C0 E4 05 F1 | 	add	objptr, ##5824
0ae5c                 | '     return fill(addr, pattern, count, listPtr, 4)
0ae5c     04 1A 06 F6 | 	mov	arg05, #4
0ae60     E0 AA B0 FD | 	call	#_psram_spin2_fill
0ae64     0B 00 00 FF 
0ae68     C0 E4 85 F1 | 	sub	objptr, ##5824
0ae6c     A4 00 90 FD | 	jmp	#LR__0900
0ae70                 | LR__0896
0ae70     30 4E 05 F1 | 	add	fp, #48
0ae74     A7 12 02 FB | 	rdlong	arg01, fp
0ae78     30 4E 85 F1 | 	sub	fp, #48
0ae7c     A7 14 02 FB | 	rdlong	arg02, fp
0ae80     01 16 06 F6 | 	mov	arg03, #1
0ae84     00 18 06 F6 | 	mov	arg04, #0
0ae88     0B 00 00 FF 
0ae8c     C0 E4 05 F1 | 	add	objptr, ##5824
0ae90                 | '     return fill(addr, pattern, count, listPtr, 4)
0ae90     04 1A 06 F6 | 	mov	arg05, #4
0ae94     AC AA B0 FD | 	call	#_psram_spin2_fill
0ae98     0B 00 00 FF 
0ae9c     C0 E4 85 F1 | 	sub	objptr, ##5824
0aea0     70 00 90 FD | 	jmp	#LR__0900
0aea4                 | LR__0897
0aea4     30 4E 05 F1 | 	add	fp, #48
0aea8     A7 12 02 FB | 	rdlong	arg01, fp
0aeac     30 4E 85 F1 | 	sub	fp, #48
0aeb0     A7 14 02 FB | 	rdlong	arg02, fp
0aeb4     01 16 06 F6 | 	mov	arg03, #1
0aeb8     00 18 06 F6 | 	mov	arg04, #0
0aebc     0B 00 00 FF 
0aec0     C0 E4 05 F1 | 	add	objptr, ##5824
0aec4                 | '     return fill(addr, pattern, count, listPtr, 4)
0aec4     04 1A 06 F6 | 	mov	arg05, #4
0aec8     78 AA B0 FD | 	call	#_psram_spin2_fill
0aecc     0B 00 00 FF 
0aed0     C0 E4 85 F1 | 	sub	objptr, ##5824
0aed4     3C 00 90 FD | 	jmp	#LR__0900
0aed8                 | LR__0898
0aed8     30 4E 05 F1 | 	add	fp, #48
0aedc     A7 12 02 FB | 	rdlong	arg01, fp
0aee0     30 4E 85 F1 | 	sub	fp, #48
0aee4     A7 14 02 FB | 	rdlong	arg02, fp
0aee8     01 16 06 F6 | 	mov	arg03, #1
0aeec     00 18 06 F6 | 	mov	arg04, #0
0aef0     0B 00 00 FF 
0aef4     C0 E4 05 F1 | 	add	objptr, ##5824
0aef8                 | '     return fill(addr, pattern, count, listPtr, 4)
0aef8     04 1A 06 F6 | 	mov	arg05, #4
0aefc     44 AA B0 FD | 	call	#_psram_spin2_fill
0af00     0B 00 00 FF 
0af04     C0 E4 85 F1 | 	sub	objptr, ##5824
0af08     08 00 90 FD | 	jmp	#LR__0900
0af0c                 | LR__0899
0af0c     2F 12 06 F6 | 	mov	arg01, #47
0af10     C4 7E B0 FD | 	call	#_printerror
0af14                 | LR__0900
0af14                 | LR__0901
0af14     A7 F0 03 F6 | 	mov	ptra, fp
0af18     B2 00 A0 FD | 	call	#popregs_
0af1c                 | _do_assign_ret
0af1c     2D 00 64 FD | 	ret
0af20                 | 
0af20                 | ' 
0af20                 | ' 
0af20                 | ' ' --------------------- Read a variable and push to the stack
0af20                 | ' 
0af20                 | ' ' getvar : fun_getvar, var#, numpar. Var, if array, has array type and a pointer
0af20                 | ' 
0af20                 | ' sub do_getvar
0af20                 | _do_getvar
0af20     04 4A 05 F6 | 	mov	COUNT_, #4
0af24     A8 00 A0 FD | 	call	#pushregs_
0af28     3C F0 07 F1 | 	add	ptra, #60
0af2c                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
0af2c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
0af2c     41 00 00 FF 
0af30     44 E4 05 F1 | 	add	objptr, ##33348
0af34     F2 1E 02 FB | 	rdlong	local01, objptr
0af38     0F 17 02 F6 | 	mov	arg03, local01
0af3c     01 16 66 F0 | 	shl	arg03, #1
0af40     0F 17 02 F1 | 	add	arg03, local01
0af44     02 16 66 F0 | 	shl	arg03, #2
0af48     03 00 00 FF 
0af4c     04 E4 85 F1 | 	sub	objptr, ##1540
0af50     F2 16 02 F1 | 	add	arg03, objptr
0af54     04 16 06 F1 | 	add	arg03, #4
0af58     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0af5c     3E 00 00 FF 
0af60     40 E4 85 F1 | 	sub	objptr, ##31808
0af64     C4 00 90 5D |  if_ne	jmp	#LR__0911
0af68     41 00 00 FF 
0af6c     44 E4 05 F1 | 	add	objptr, ##33348
0af70     F2 1E 02 FB | 	rdlong	local01, objptr
0af74     0F 13 02 F6 | 	mov	arg01, local01
0af78     01 12 66 F0 | 	shl	arg01, #1
0af7c     0F 13 02 F1 | 	add	arg01, local01
0af80     02 12 66 F0 | 	shl	arg01, #2
0af84     03 00 00 FF 
0af88     04 E4 85 F1 | 	sub	objptr, ##1540
0af8c     F2 12 02 F1 | 	add	arg01, objptr
0af90     09 1F 02 FB | 	rdlong	local01, arg01
0af94     04 1E 66 F0 | 	shl	local01, #4
0af98     32 00 00 FF 
0af9c     74 E4 85 F1 | 	sub	objptr, ##25716
0afa0     F2 1E 02 F1 | 	add	local01, objptr
0afa4     04 1E 06 F1 | 	add	local01, #4
0afa8     0F 13 02 FB | 	rdlong	arg01, local01
0afac     04 1E 06 F1 | 	add	local01, #4
0afb0     0F 1F 02 FB | 	rdlong	local01, local01
0afb4     A7 12 62 FC | 	wrlong	arg01, fp
0afb8     04 4E 05 F1 | 	add	fp, #4
0afbc     A7 1E 62 FC | 	wrlong	local01, fp
0afc0     35 00 00 FF 
0afc4     78 E4 05 F1 | 	add	objptr, ##27256
0afc8     F2 1E 02 FB | 	rdlong	local01, objptr
0afcc     0F 13 02 F6 | 	mov	arg01, local01
0afd0     01 12 66 F0 | 	shl	arg01, #1
0afd4     0F 13 02 F1 | 	add	arg01, local01
0afd8     02 12 66 F0 | 	shl	arg01, #2
0afdc     03 00 00 FF 
0afe0     04 E4 85 F1 | 	sub	objptr, ##1540
0afe4     F2 12 02 F1 | 	add	arg01, objptr
0afe8     09 1F 02 FB | 	rdlong	local01, arg01
0afec     04 1E 66 F0 | 	shl	local01, #4
0aff0     32 00 00 FF 
0aff4     74 E4 85 F1 | 	sub	objptr, ##25716
0aff8     F2 1E 02 F1 | 	add	local01, objptr
0affc     0C 1E 06 F1 | 	add	local01, #12
0b000     0F 1F 02 FB | 	rdlong	local01, local01
0b004     04 4E 05 F1 | 	add	fp, #4
0b008     A7 1E 62 FC | 	wrlong	local01, fp
0b00c                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
0b00c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
0b00c                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
0b00c     08 4E 85 F1 | 	sub	fp, #8
0b010     00 1F 16 F2 | 	cmp	local01, #256 wc
0b014     0B 00 00 FF 
0b018     CC E5 85 F1 | 	sub	objptr, ##6092
0b01c     0C 00 90 3D |  if_ae	jmp	#LR__0910
0b020     A7 12 02 F6 | 	mov	arg01, fp
0b024     80 DB BF FD | 	call	#_push
0b028     88 04 90 FD | 	jmp	#LR__0932
0b02c                 | LR__0910
0b02c                 | LR__0911
0b02c     41 00 00 FF 
0b030     44 E4 05 F1 | 	add	objptr, ##33348
0b034     F2 16 02 FB | 	rdlong	arg03, objptr
0b038     0B 15 02 F6 | 	mov	arg02, arg03
0b03c     01 14 66 F0 | 	shl	arg02, #1
0b040     0B 15 02 F1 | 	add	arg02, arg03
0b044     02 14 66 F0 | 	shl	arg02, #2
0b048     03 00 00 FF 
0b04c     04 E4 85 F1 | 	sub	objptr, ##1540
0b050     F2 14 02 F1 | 	add	arg02, objptr
0b054     0A 17 02 FB | 	rdlong	arg03, arg02
0b058     04 16 66 F0 | 	shl	arg03, #4
0b05c     32 00 00 FF 
0b060     74 E4 85 F1 | 	sub	objptr, ##25716
0b064     F2 16 02 F1 | 	add	arg03, objptr
0b068     04 16 06 F1 | 	add	arg03, #4
0b06c     0B 13 02 FB | 	rdlong	arg01, arg03
0b070     0C 4E 05 F1 | 	add	fp, #12
0b074     A7 12 62 FC | 	wrlong	arg01, fp
0b078     0C 4E 85 F1 | 	sub	fp, #12
0b07c     0B 00 00 FF 
0b080     CC E5 85 F1 | 	sub	objptr, ##6092
0b084     0C 7F B0 FD | 	call	#_pslpeek
0b088     FD FA 31 F9 | 	getword	result1, result1, #0
0b08c     10 4E 05 F1 | 	add	fp, #16
0b090     A7 FA 61 FC | 	wrlong	result1, fp
0b094     41 00 00 FF 
0b098     44 E4 05 F1 | 	add	objptr, ##33348
0b09c     F2 16 02 FB | 	rdlong	arg03, objptr
0b0a0     0B 15 02 F6 | 	mov	arg02, arg03
0b0a4     01 14 66 F0 | 	shl	arg02, #1
0b0a8     0B 15 02 F1 | 	add	arg02, arg03
0b0ac     02 14 66 F0 | 	shl	arg02, #2
0b0b0     03 00 00 FF 
0b0b4     04 E4 85 F1 | 	sub	objptr, ##1540
0b0b8     F2 14 02 F1 | 	add	arg02, objptr
0b0bc     04 14 06 F1 | 	add	arg02, #4
0b0c0     0A 17 02 FB | 	rdlong	arg03, arg02
0b0c4     04 4E 05 F1 | 	add	fp, #4
0b0c8     A7 16 62 FC | 	wrlong	arg03, fp
0b0cc     08 4E 85 F1 | 	sub	fp, #8
0b0d0     A7 12 02 FB | 	rdlong	arg01, fp
0b0d4     0C 4E 85 F1 | 	sub	fp, #12
0b0d8     02 12 06 F1 | 	add	arg01, #2
0b0dc     3E 00 00 FF 
0b0e0     40 E4 85 F1 | 	sub	objptr, ##31808
0b0e4     54 7E B0 FD | 	call	#_pspeek
0b0e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
0b0ec     18 4E 05 F1 | 	add	fp, #24
0b0f0     A7 FA 61 FC | 	wrlong	result1, fp
0b0f4     0C 4E 85 F1 | 	sub	fp, #12
0b0f8     A7 12 02 FB | 	rdlong	arg01, fp
0b0fc     0C 4E 85 F1 | 	sub	fp, #12
0b100     04 12 06 F1 | 	add	arg01, #4
0b104     8C 7E B0 FD | 	call	#_pslpeek
0b108     1C 4E 05 F1 | 	add	fp, #28
0b10c     A7 FA 61 FC | 	wrlong	result1, fp
0b110     10 4E 85 F1 | 	sub	fp, #16
0b114     A7 12 02 FB | 	rdlong	arg01, fp
0b118     0C 4E 85 F1 | 	sub	fp, #12
0b11c     08 12 06 F1 | 	add	arg01, #8
0b120     70 7E B0 FD | 	call	#_pslpeek
0b124     20 4E 05 F1 | 	add	fp, #32
0b128     A7 FA 61 FC | 	wrlong	result1, fp
0b12c     14 4E 85 F1 | 	sub	fp, #20
0b130     A7 12 02 FB | 	rdlong	arg01, fp
0b134     0C 4E 85 F1 | 	sub	fp, #12
0b138     0C 12 06 F1 | 	add	arg01, #12
0b13c     54 7E B0 FD | 	call	#_pslpeek
0b140     24 4E 05 F1 | 	add	fp, #36
0b144     A7 FA 61 FC | 	wrlong	result1, fp
0b148                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
0b148                 | ' esize=pspeek(arrptr+2)
0b148                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
0b148                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
0b148                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
0b148                 | ' if numpar>2 then t1=pop() : i3=t1.result.uresult   else i3=0 
0b148     10 4E 85 F1 | 	sub	fp, #16
0b14c     A7 16 02 FB | 	rdlong	arg03, fp
0b150     14 4E 85 F1 | 	sub	fp, #20
0b154     03 16 16 F2 | 	cmp	arg03, #3 wc
0b158     30 00 90 CD |  if_b	jmp	#LR__0912
0b15c     B0 D9 BF FD | 	call	#_pop
0b160     A7 FA 61 FC | 	wrlong	result1, fp
0b164     04 4E 05 F1 | 	add	fp, #4
0b168     A7 FC 61 FC | 	wrlong	result2, fp
0b16c     04 4E 05 F1 | 	add	fp, #4
0b170     A7 FE 61 FC | 	wrlong	result3, fp
0b174     08 4E 85 F1 | 	sub	fp, #8
0b178     A7 16 02 FB | 	rdlong	arg03, fp
0b17c     30 4E 05 F1 | 	add	fp, #48
0b180     A7 16 62 FC | 	wrlong	arg03, fp
0b184     30 4E 85 F1 | 	sub	fp, #48
0b188     0C 00 90 FD | 	jmp	#LR__0913
0b18c                 | LR__0912
0b18c     30 4E 05 F1 | 	add	fp, #48
0b190     A7 00 68 FC | 	wrlong	#0, fp
0b194     30 4E 85 F1 | 	sub	fp, #48
0b198                 | LR__0913
0b198                 | ' if numpar>1 then t1=pop() : i2=t1.result.uresult   else i2=0 
0b198     14 4E 05 F1 | 	add	fp, #20
0b19c     A7 16 02 FB | 	rdlong	arg03, fp
0b1a0     14 4E 85 F1 | 	sub	fp, #20
0b1a4     02 16 16 F2 | 	cmp	arg03, #2 wc
0b1a8     30 00 90 CD |  if_b	jmp	#LR__0914
0b1ac     60 D9 BF FD | 	call	#_pop
0b1b0     A7 FA 61 FC | 	wrlong	result1, fp
0b1b4     04 4E 05 F1 | 	add	fp, #4
0b1b8     A7 FC 61 FC | 	wrlong	result2, fp
0b1bc     04 4E 05 F1 | 	add	fp, #4
0b1c0     A7 FE 61 FC | 	wrlong	result3, fp
0b1c4     08 4E 85 F1 | 	sub	fp, #8
0b1c8     A7 16 02 FB | 	rdlong	arg03, fp
0b1cc     2C 4E 05 F1 | 	add	fp, #44
0b1d0     A7 16 62 FC | 	wrlong	arg03, fp
0b1d4     2C 4E 85 F1 | 	sub	fp, #44
0b1d8     0C 00 90 FD | 	jmp	#LR__0915
0b1dc                 | LR__0914
0b1dc     2C 4E 05 F1 | 	add	fp, #44
0b1e0     A7 00 68 FC | 	wrlong	#0, fp
0b1e4     2C 4E 85 F1 | 	sub	fp, #44
0b1e8                 | LR__0915
0b1e8                 | ' if numpar>0 then t1=pop() : i1=t1.result.uresult   else i1=0 
0b1e8     14 4E 05 F1 | 	add	fp, #20
0b1ec     A7 16 02 FB | 	rdlong	arg03, fp
0b1f0     14 4E 85 F1 | 	sub	fp, #20
0b1f4     01 16 16 F2 | 	cmp	arg03, #1 wc
0b1f8     30 00 90 CD |  if_b	jmp	#LR__0916
0b1fc     10 D9 BF FD | 	call	#_pop
0b200     A7 FA 61 FC | 	wrlong	result1, fp
0b204     04 4E 05 F1 | 	add	fp, #4
0b208     A7 FC 61 FC | 	wrlong	result2, fp
0b20c     04 4E 05 F1 | 	add	fp, #4
0b210     A7 FE 61 FC | 	wrlong	result3, fp
0b214     08 4E 85 F1 | 	sub	fp, #8
0b218     A7 16 02 FB | 	rdlong	arg03, fp
0b21c     28 4E 05 F1 | 	add	fp, #40
0b220     A7 16 62 FC | 	wrlong	arg03, fp
0b224     28 4E 85 F1 | 	sub	fp, #40
0b228     0C 00 90 FD | 	jmp	#LR__0917
0b22c                 | LR__0916
0b22c     28 4E 05 F1 | 	add	fp, #40
0b230     A7 00 68 FC | 	wrlong	#0, fp
0b234     28 4E 85 F1 | 	sub	fp, #40
0b238                 | LR__0917
0b238     0C 4E 05 F1 | 	add	fp, #12
0b23c     A7 20 02 FB | 	rdlong	local02, fp
0b240     1C 4E 05 F1 | 	add	fp, #28
0b244     A7 22 02 FB | 	rdlong	local03, fp
0b248     04 4E 05 F1 | 	add	fp, #4
0b24c     A7 FE 01 FB | 	rdlong	result3, fp
0b250     10 4E 85 F1 | 	sub	fp, #16
0b254     A7 FC 01 FB | 	rdlong	result2, fp
0b258     FE FE 01 FD | 	qmul	result3, result2
0b25c     10 20 06 F1 | 	add	local02, #16
0b260     14 4E 05 F1 | 	add	fp, #20
0b264     A7 FE 01 FB | 	rdlong	result3, fp
0b268     18 FA 61 FD | 	getqx	result1
0b26c     FE FE 01 FD | 	qmul	result3, result2
0b270     FD 22 02 F1 | 	add	local03, result1
0b274     10 4E 85 F1 | 	sub	fp, #16
0b278     A7 FC 01 FB | 	rdlong	result2, fp
0b27c     18 FE 61 FD | 	getqx	result3
0b280     FE FE 01 FD | 	qmul	result3, result2
0b284     08 4E 85 F1 | 	sub	fp, #8
0b288     A7 FC 01 FB | 	rdlong	result2, fp
0b28c     18 FE 61 FD | 	getqx	result3
0b290     FF 22 02 F1 | 	add	local03, result3
0b294     FE 22 02 FD | 	qmul	local03, result2
0b298     1C 4E 05 F1 | 	add	fp, #28
0b29c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
0b29c                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize ': print "arrptr=",arrptr,"varidx=",varidx,"memtop=",memtop,"bufptr=",v.buf_ptr
0b29c                 | ' 
0b29c                 | ' select case vartype
0b29c     18 FE 61 FD | 	getqx	result3
0b2a0     FF 20 02 F1 | 	add	local02, result3
0b2a4     A7 20 62 FC | 	wrlong	local02, fp
0b2a8     24 4E 85 F1 | 	sub	fp, #36
0b2ac     A7 24 02 FB | 	rdlong	local04, fp
0b2b0     10 4E 85 F1 | 	sub	fp, #16
0b2b4     00 25 86 F1 | 	sub	local04, #256
0b2b8     0C 24 26 F3 | 	fle	local04, #12
0b2bc     30 24 62 FD | 	jmprel	local04
0b2c0                 | LR__0918
0b2c0     30 00 90 FD | 	jmp	#LR__0919
0b2c4     58 00 90 FD | 	jmp	#LR__0920
0b2c8     8C 00 90 FD | 	jmp	#LR__0921
0b2cc     AC 00 90 FD | 	jmp	#LR__0922
0b2d0     E8 00 90 FD | 	jmp	#LR__0923
0b2d4     08 01 90 FD | 	jmp	#LR__0924
0b2d8     24 01 90 FD | 	jmp	#LR__0925
0b2dc     40 01 90 FD | 	jmp	#LR__0926
0b2e0     50 01 90 FD | 	jmp	#LR__0927
0b2e4     60 01 90 FD | 	jmp	#LR__0928
0b2e8     7C 01 90 FD | 	jmp	#LR__0929
0b2ec     8C 01 90 FD | 	jmp	#LR__0930
0b2f0     B8 01 90 FD | 	jmp	#LR__0931
0b2f4                 | LR__0919
0b2f4     A7 12 02 F6 | 	mov	arg01, fp
0b2f8     34 4E 05 F1 | 	add	fp, #52
0b2fc     A7 14 02 FB | 	rdlong	arg02, fp
0b300     34 4E 85 F1 | 	sub	fp, #52
0b304     0C 16 06 F6 | 	mov	arg03, #12
0b308     0B 00 00 FF 
0b30c     C0 E4 05 F1 | 	add	objptr, ##5824
0b310     F8 A4 B0 FD | 	call	#_psram_spin2_read1
0b314     0B 00 00 FF 
0b318     C0 E4 85 F1 | 	sub	objptr, ##5824
0b31c     8C 01 90 FD | 	jmp	#LR__0931
0b320                 | LR__0920
0b320     08 4E 05 F1 | 	add	fp, #8
0b324     A7 38 68 FC | 	wrlong	#28, fp
0b328     2C 4E 05 F1 | 	add	fp, #44
0b32c     A7 12 02 FB | 	rdlong	arg01, fp
0b330     34 4E 85 F1 | 	sub	fp, #52
0b334     04 7C B0 FD | 	call	#_pspeek
0b338     FD FA E1 F8 | 	getbyte	result1, result1, #0
0b33c     A7 FA 61 FC | 	wrlong	result1, fp
0b340     80 FA 15 F2 | 	cmp	result1, #128 wc
0b344     00 1F 66 36 |  if_ae	neg	local01, #256
0b348     A7 22 02 3B |  if_ae	rdlong	local03, fp
0b34c     11 1F 42 35 |  if_ae	or	local01, local03
0b350     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0b354     54 01 90 FD | 	jmp	#LR__0931
0b358                 | LR__0921
0b358     08 4E 05 F1 | 	add	fp, #8
0b35c     A7 3A 68 FC | 	wrlong	#29, fp
0b360     2C 4E 05 F1 | 	add	fp, #44
0b364     A7 12 02 FB | 	rdlong	arg01, fp
0b368     34 4E 85 F1 | 	sub	fp, #52
0b36c     CC 7B B0 FD | 	call	#_pspeek
0b370     FD FA E1 F8 | 	getbyte	result1, result1, #0
0b374     A7 FA 61 FC | 	wrlong	result1, fp
0b378     30 01 90 FD | 	jmp	#LR__0931
0b37c                 | LR__0922
0b37c     08 4E 05 F1 | 	add	fp, #8
0b380     A7 38 68 FC | 	wrlong	#28, fp
0b384     2C 4E 05 F1 | 	add	fp, #44
0b388     A7 12 02 FB | 	rdlong	arg01, fp
0b38c     34 4E 85 F1 | 	sub	fp, #52
0b390     00 7C B0 FD | 	call	#_pslpeek
0b394     FD FA 31 F9 | 	getword	result1, result1, #0
0b398     A7 FA 61 FC | 	wrlong	result1, fp
0b39c     40 00 00 FF 
0b3a0     00 FA 15 F2 | 	cmp	result1, ##32768 wc
0b3a4     FF 7F 00 3F 
0b3a8     00 1F 06 36 |  if_ae	mov	local01, ##16776960
0b3ac     A7 22 02 3B |  if_ae	rdlong	local03, fp
0b3b0     11 1F 42 35 |  if_ae	or	local01, local03
0b3b4     A7 1E 62 3C |  if_ae	wrlong	local01, fp
0b3b8     F0 00 90 FD | 	jmp	#LR__0931
0b3bc                 | LR__0923
0b3bc     08 4E 05 F1 | 	add	fp, #8
0b3c0     A7 3A 68 FC | 	wrlong	#29, fp
0b3c4     2C 4E 05 F1 | 	add	fp, #44
0b3c8     A7 12 02 FB | 	rdlong	arg01, fp
0b3cc     34 4E 85 F1 | 	sub	fp, #52
0b3d0     C0 7B B0 FD | 	call	#_pslpeek
0b3d4     FD FA 31 F9 | 	getword	result1, result1, #0
0b3d8     A7 FA 61 FC | 	wrlong	result1, fp
0b3dc     CC 00 90 FD | 	jmp	#LR__0931
0b3e0                 | LR__0924
0b3e0     08 4E 05 F1 | 	add	fp, #8
0b3e4     A7 38 68 FC | 	wrlong	#28, fp
0b3e8     2C 4E 05 F1 | 	add	fp, #44
0b3ec     A7 12 02 FB | 	rdlong	arg01, fp
0b3f0     34 4E 85 F1 | 	sub	fp, #52
0b3f4     9C 7B B0 FD | 	call	#_pslpeek
0b3f8     A7 FA 61 FC | 	wrlong	result1, fp
0b3fc     AC 00 90 FD | 	jmp	#LR__0931
0b400                 | LR__0925
0b400     08 4E 05 F1 | 	add	fp, #8
0b404     A7 3A 68 FC | 	wrlong	#29, fp
0b408     2C 4E 05 F1 | 	add	fp, #44
0b40c     A7 12 02 FB | 	rdlong	arg01, fp
0b410     34 4E 85 F1 | 	sub	fp, #52
0b414     7C 7B B0 FD | 	call	#_pslpeek
0b418     A7 FA 61 FC | 	wrlong	result1, fp
0b41c     8C 00 90 FD | 	jmp	#LR__0931
0b420                 | LR__0926
0b420     08 4E 05 F1 | 	add	fp, #8
0b424     A7 FE 69 FC | 	wrlong	#255, fp
0b428     08 4E 85 F1 | 	sub	fp, #8
0b42c     A7 60 68 FC | 	wrlong	#48, fp
0b430     78 00 90 FD | 	jmp	#LR__0931
0b434                 | LR__0927
0b434     08 4E 05 F1 | 	add	fp, #8
0b438     A7 FE 69 FC | 	wrlong	#255, fp
0b43c     08 4E 85 F1 | 	sub	fp, #8
0b440     A7 60 68 FC | 	wrlong	#48, fp
0b444     64 00 90 FD | 	jmp	#LR__0931
0b448                 | LR__0928
0b448     08 4E 05 F1 | 	add	fp, #8
0b44c     A7 3C 68 FC | 	wrlong	#30, fp
0b450     2C 4E 05 F1 | 	add	fp, #44
0b454     A7 12 02 FB | 	rdlong	arg01, fp
0b458     34 4E 85 F1 | 	sub	fp, #52
0b45c     34 7B B0 FD | 	call	#_pslpeek
0b460     A7 FA 61 FC | 	wrlong	result1, fp
0b464     44 00 90 FD | 	jmp	#LR__0931
0b468                 | LR__0929
0b468     08 4E 05 F1 | 	add	fp, #8
0b46c     A7 FE 69 FC | 	wrlong	#255, fp
0b470     08 4E 85 F1 | 	sub	fp, #8
0b474     A7 60 68 FC | 	wrlong	#48, fp
0b478     30 00 90 FD | 	jmp	#LR__0931
0b47c                 | LR__0930
0b47c     08 4E 05 F1 | 	add	fp, #8
0b480     A7 3E 68 FC | 	wrlong	#31, fp
0b484     2C 4E 05 F1 | 	add	fp, #44
0b488     A7 12 02 FB | 	rdlong	arg01, fp
0b48c     34 4E 85 F1 | 	sub	fp, #52
0b490     00 7B B0 FD | 	call	#_pslpeek
0b494     A7 FA 61 FC | 	wrlong	result1, fp
0b498     00 04 00 FF 
0b49c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0b4a0     08 4E 05 31 |  if_ae	add	fp, #8
0b4a4     A7 56 68 3C |  if_ae	wrlong	#43, fp
0b4a8     08 4E 85 31 |  if_ae	sub	fp, #8
0b4ac                 | LR__0931
0b4ac     A7 12 02 F6 | 	mov	arg01, fp
0b4b0     F4 D6 BF FD | 	call	#_push
0b4b4                 | LR__0932
0b4b4     A7 F0 03 F6 | 	mov	ptra, fp
0b4b8     B2 00 A0 FD | 	call	#popregs_
0b4bc                 | _do_getvar_ret
0b4bc     2D 00 64 FD | 	ret
0b4c0                 | 
0b4c0                 | ' 
0b4c0                 | ' '------------------------ Operators 
0b4c0                 | ' 
0b4c0                 | ' sub do_plus 
0b4c0                 | _do_plus
0b4c0     05 4A 05 F6 | 	mov	COUNT_, #5
0b4c4     A8 00 A0 FD | 	call	#pushregs_
0b4c8     18 F0 07 F1 | 	add	ptra, #24
0b4cc     40 D6 BF FD | 	call	#_pop
0b4d0     FD 1E 02 F6 | 	mov	local01, result1
0b4d4     FE 20 02 F6 | 	mov	local02, result2
0b4d8     FF 22 02 F6 | 	mov	local03, result3
0b4dc     0C 4E 05 F1 | 	add	fp, #12
0b4e0     A7 1E 62 FC | 	wrlong	local01, fp
0b4e4     04 4E 05 F1 | 	add	fp, #4
0b4e8     A7 20 62 FC | 	wrlong	local02, fp
0b4ec     04 4E 05 F1 | 	add	fp, #4
0b4f0     A7 22 62 FC | 	wrlong	local03, fp
0b4f4     14 4E 85 F1 | 	sub	fp, #20
0b4f8     14 D6 BF FD | 	call	#_pop
0b4fc     FF 22 02 F6 | 	mov	local03, result3
0b500     A7 FA 61 FC | 	wrlong	result1, fp
0b504     04 4E 05 F1 | 	add	fp, #4
0b508     A7 FC 61 FC | 	wrlong	result2, fp
0b50c     04 4E 05 F1 | 	add	fp, #4
0b510     A7 22 62 FC | 	wrlong	local03, fp
0b514                 | ' 
0b514                 | ' t2=pop()
0b514                 | ' t1=pop()
0b514                 | ' 
0b514                 | ' 
0b514                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
0b514     08 4E 85 F1 | 	sub	fp, #8
0b518     1D 22 0E F2 | 	cmp	local03, #29 wz
0b51c     14 4E 05 A1 |  if_e	add	fp, #20
0b520     A7 24 02 AB |  if_e	rdlong	local04, fp
0b524     14 4E 85 A1 |  if_e	sub	fp, #20
0b528     12 23 02 A6 |  if_e	mov	local03, local04
0b52c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b530     1C 00 90 5D |  if_ne	jmp	#LR__0940
0b534     A7 1E 02 FB | 	rdlong	local01, fp
0b538     0C 4E 05 F1 | 	add	fp, #12
0b53c     A7 20 02 FB | 	rdlong	local02, fp
0b540     0C 4E 85 F1 | 	sub	fp, #12
0b544     10 1F 02 F1 | 	add	local01, local02
0b548     A7 1E 62 FC | 	wrlong	local01, fp
0b54c     48 04 90 FD | 	jmp	#LR__0955
0b550                 | LR__0940
0b550                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
0b550     08 4E 05 F1 | 	add	fp, #8
0b554     A7 1E 02 FB | 	rdlong	local01, fp
0b558     08 4E 85 F1 | 	sub	fp, #8
0b55c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b560     14 4E 05 A1 |  if_e	add	fp, #20
0b564     A7 24 02 AB |  if_e	rdlong	local04, fp
0b568     14 4E 85 A1 |  if_e	sub	fp, #20
0b56c     12 23 02 A6 |  if_e	mov	local03, local04
0b570     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b574     28 00 90 5D |  if_ne	jmp	#LR__0941
0b578     A7 1E 02 FB | 	rdlong	local01, fp
0b57c     0C 4E 05 F1 | 	add	fp, #12
0b580     A7 20 02 FB | 	rdlong	local02, fp
0b584     0C 4E 85 F1 | 	sub	fp, #12
0b588     10 1F 02 F1 | 	add	local01, local02
0b58c     A7 1E 62 FC | 	wrlong	local01, fp
0b590     08 4E 05 F1 | 	add	fp, #8
0b594     A7 38 68 FC | 	wrlong	#28, fp
0b598     08 4E 85 F1 | 	sub	fp, #8
0b59c     F8 03 90 FD | 	jmp	#LR__0955
0b5a0                 | LR__0941
0b5a0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0b5a0     08 4E 05 F1 | 	add	fp, #8
0b5a4     A7 1E 02 FB | 	rdlong	local01, fp
0b5a8     08 4E 85 F1 | 	sub	fp, #8
0b5ac     1D 1E 0E F2 | 	cmp	local01, #29 wz
0b5b0     14 4E 05 A1 |  if_e	add	fp, #20
0b5b4     A7 24 02 AB |  if_e	rdlong	local04, fp
0b5b8     14 4E 85 A1 |  if_e	sub	fp, #20
0b5bc     12 23 02 A6 |  if_e	mov	local03, local04
0b5c0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b5c4     30 00 90 5D |  if_ne	jmp	#LR__0942
0b5c8     A7 12 02 FB | 	rdlong	arg01, fp
0b5cc     0C D3 B0 FD | 	call	#__system___float_fromuns
0b5d0     FD 12 02 F6 | 	mov	arg01, result1
0b5d4     0C 4E 05 F1 | 	add	fp, #12
0b5d8     A7 14 02 FB | 	rdlong	arg02, fp
0b5dc     0C 4E 85 F1 | 	sub	fp, #12
0b5e0     2C D3 B0 FD | 	call	#__system___float_add
0b5e4     A7 FA 61 FC | 	wrlong	result1, fp
0b5e8     08 4E 05 F1 | 	add	fp, #8
0b5ec     A7 3C 68 FC | 	wrlong	#30, fp
0b5f0     08 4E 85 F1 | 	sub	fp, #8
0b5f4     A0 03 90 FD | 	jmp	#LR__0955
0b5f8                 | LR__0942
0b5f8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
0b5f8     08 4E 05 F1 | 	add	fp, #8
0b5fc     A7 1E 02 FB | 	rdlong	local01, fp
0b600     08 4E 85 F1 | 	sub	fp, #8
0b604     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b608     14 4E 05 A1 |  if_e	add	fp, #20
0b60c     A7 24 02 AB |  if_e	rdlong	local04, fp
0b610     14 4E 85 A1 |  if_e	sub	fp, #20
0b614     12 23 02 A6 |  if_e	mov	local03, local04
0b618     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b61c     1C 00 90 5D |  if_ne	jmp	#LR__0943
0b620     A7 1E 02 FB | 	rdlong	local01, fp
0b624     0C 4E 05 F1 | 	add	fp, #12
0b628     A7 20 02 FB | 	rdlong	local02, fp
0b62c     0C 4E 85 F1 | 	sub	fp, #12
0b630     10 1F 02 F1 | 	add	local01, local02
0b634     A7 1E 62 FC | 	wrlong	local01, fp
0b638     5C 03 90 FD | 	jmp	#LR__0955
0b63c                 | LR__0943
0b63c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
0b63c     08 4E 05 F1 | 	add	fp, #8
0b640     A7 1E 02 FB | 	rdlong	local01, fp
0b644     08 4E 85 F1 | 	sub	fp, #8
0b648     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b64c     14 4E 05 A1 |  if_e	add	fp, #20
0b650     A7 24 02 AB |  if_e	rdlong	local04, fp
0b654     14 4E 85 A1 |  if_e	sub	fp, #20
0b658     12 23 02 A6 |  if_e	mov	local03, local04
0b65c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b660     1C 00 90 5D |  if_ne	jmp	#LR__0944
0b664     A7 1E 02 FB | 	rdlong	local01, fp
0b668     0C 4E 05 F1 | 	add	fp, #12
0b66c     A7 20 02 FB | 	rdlong	local02, fp
0b670     0C 4E 85 F1 | 	sub	fp, #12
0b674     10 1F 02 F1 | 	add	local01, local02
0b678     A7 1E 62 FC | 	wrlong	local01, fp
0b67c     18 03 90 FD | 	jmp	#LR__0955
0b680                 | LR__0944
0b680                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
0b680     08 4E 05 F1 | 	add	fp, #8
0b684     A7 1E 02 FB | 	rdlong	local01, fp
0b688     08 4E 85 F1 | 	sub	fp, #8
0b68c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0b690     14 4E 05 A1 |  if_e	add	fp, #20
0b694     A7 24 02 AB |  if_e	rdlong	local04, fp
0b698     14 4E 85 A1 |  if_e	sub	fp, #20
0b69c     12 23 02 A6 |  if_e	mov	local03, local04
0b6a0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0b6a4     40 00 90 5D |  if_ne	jmp	#LR__0945
0b6a8     A7 12 02 FB | 	rdlong	arg01, fp
0b6ac     09 13 52 F6 | 	abs	arg01, arg01 wc
0b6b0     1F 26 C6 C9 |  if_b	decod	local05, #31
0b6b4     00 26 06 36 |  if_ae	mov	local05, #0
0b6b8     20 D2 B0 FD | 	call	#__system___float_fromuns
0b6bc     13 FB 61 F5 | 	xor	result1, local05
0b6c0     FD 12 02 F6 | 	mov	arg01, result1
0b6c4     0C 4E 05 F1 | 	add	fp, #12
0b6c8     A7 14 02 FB | 	rdlong	arg02, fp
0b6cc     0C 4E 85 F1 | 	sub	fp, #12
0b6d0     3C D2 B0 FD | 	call	#__system___float_add
0b6d4     A7 FA 61 FC | 	wrlong	result1, fp
0b6d8     08 4E 05 F1 | 	add	fp, #8
0b6dc     A7 3C 68 FC | 	wrlong	#30, fp
0b6e0     08 4E 85 F1 | 	sub	fp, #8
0b6e4     B0 02 90 FD | 	jmp	#LR__0955
0b6e8                 | LR__0945
0b6e8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
0b6e8     08 4E 05 F1 | 	add	fp, #8
0b6ec     A7 1E 02 FB | 	rdlong	local01, fp
0b6f0     08 4E 85 F1 | 	sub	fp, #8
0b6f4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b6f8     14 4E 05 A1 |  if_e	add	fp, #20
0b6fc     A7 24 02 AB |  if_e	rdlong	local04, fp
0b700     14 4E 85 A1 |  if_e	sub	fp, #20
0b704     12 23 02 A6 |  if_e	mov	local03, local04
0b708     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0b70c     28 00 90 5D |  if_ne	jmp	#LR__0946
0b710     A7 1E 02 FB | 	rdlong	local01, fp
0b714     0C 4E 05 F1 | 	add	fp, #12
0b718     A7 12 02 FB | 	rdlong	arg01, fp
0b71c     0C 4E 85 F1 | 	sub	fp, #12
0b720     B8 D1 B0 FD | 	call	#__system___float_fromuns
0b724     FD 14 02 F6 | 	mov	arg02, result1
0b728     0F 13 02 F6 | 	mov	arg01, local01
0b72c     E0 D1 B0 FD | 	call	#__system___float_add
0b730     A7 FA 61 FC | 	wrlong	result1, fp
0b734     60 02 90 FD | 	jmp	#LR__0955
0b738                 | LR__0946
0b738                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
0b738     08 4E 05 F1 | 	add	fp, #8
0b73c     A7 1E 02 FB | 	rdlong	local01, fp
0b740     08 4E 85 F1 | 	sub	fp, #8
0b744     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b748     14 4E 05 A1 |  if_e	add	fp, #20
0b74c     A7 24 02 AB |  if_e	rdlong	local04, fp
0b750     14 4E 85 A1 |  if_e	sub	fp, #20
0b754     12 23 02 A6 |  if_e	mov	local03, local04
0b758     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0b75c     38 00 90 5D |  if_ne	jmp	#LR__0947
0b760     A7 1E 02 FB | 	rdlong	local01, fp
0b764     0C 4E 05 F1 | 	add	fp, #12
0b768     A7 12 02 FB | 	rdlong	arg01, fp
0b76c     0C 4E 85 F1 | 	sub	fp, #12
0b770     09 13 52 F6 | 	abs	arg01, arg01 wc
0b774     1F 26 C6 C9 |  if_b	decod	local05, #31
0b778     00 26 06 36 |  if_ae	mov	local05, #0
0b77c     5C D1 B0 FD | 	call	#__system___float_fromuns
0b780     13 FB 61 F5 | 	xor	result1, local05
0b784     FD 14 02 F6 | 	mov	arg02, result1
0b788     0F 13 02 F6 | 	mov	arg01, local01
0b78c     80 D1 B0 FD | 	call	#__system___float_add
0b790     A7 FA 61 FC | 	wrlong	result1, fp
0b794     00 02 90 FD | 	jmp	#LR__0955
0b798                 | LR__0947
0b798                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
0b798     08 4E 05 F1 | 	add	fp, #8
0b79c     A7 1E 02 FB | 	rdlong	local01, fp
0b7a0     08 4E 85 F1 | 	sub	fp, #8
0b7a4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0b7a8     14 4E 05 A1 |  if_e	add	fp, #20
0b7ac     A7 24 02 AB |  if_e	rdlong	local04, fp
0b7b0     14 4E 85 A1 |  if_e	sub	fp, #20
0b7b4     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
0b7b8     1C 00 90 5D |  if_ne	jmp	#LR__0948
0b7bc     A7 12 02 FB | 	rdlong	arg01, fp
0b7c0     0C 4E 05 F1 | 	add	fp, #12
0b7c4     A7 14 02 FB | 	rdlong	arg02, fp
0b7c8     0C 4E 85 F1 | 	sub	fp, #12
0b7cc     40 D1 B0 FD | 	call	#__system___float_add
0b7d0     A7 FA 61 FC | 	wrlong	result1, fp
0b7d4     C0 01 90 FD | 	jmp	#LR__0955
0b7d8                 | LR__0948
0b7d8                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0b7d8     08 4E 05 F1 | 	add	fp, #8
0b7dc     A7 1E 02 FB | 	rdlong	local01, fp
0b7e0     08 4E 85 F1 | 	sub	fp, #8
0b7e4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b7e8     24 00 90 5D |  if_ne	jmp	#LR__0949
0b7ec     14 4E 05 F1 | 	add	fp, #20
0b7f0     A7 22 02 FB | 	rdlong	local03, fp
0b7f4     14 4E 85 F1 | 	sub	fp, #20
0b7f8     1F 22 0E F2 | 	cmp	local03, #31 wz
0b7fc     A7 04 68 5C |  if_ne	wrlong	#2, fp
0b800     08 4E 05 51 |  if_ne	add	fp, #8
0b804     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0b808     08 4E 85 51 |  if_ne	sub	fp, #8
0b80c     88 01 90 5D |  if_ne	jmp	#LR__0955
0b810                 | LR__0949
0b810                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
0b810     14 4E 05 F1 | 	add	fp, #20
0b814     A7 1E 02 FB | 	rdlong	local01, fp
0b818     14 4E 85 F1 | 	sub	fp, #20
0b81c     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b820     24 00 90 5D |  if_ne	jmp	#LR__0950
0b824     08 4E 05 F1 | 	add	fp, #8
0b828     A7 22 02 FB | 	rdlong	local03, fp
0b82c     08 4E 85 F1 | 	sub	fp, #8
0b830     1F 22 0E F2 | 	cmp	local03, #31 wz
0b834     A7 04 68 5C |  if_ne	wrlong	#2, fp
0b838     08 4E 05 51 |  if_ne	add	fp, #8
0b83c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0b840     08 4E 85 51 |  if_ne	sub	fp, #8
0b844     50 01 90 5D |  if_ne	jmp	#LR__0955
0b848                 | LR__0950
0b848                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
0b848     08 4E 05 F1 | 	add	fp, #8
0b84c     A7 1E 02 FB | 	rdlong	local01, fp
0b850     08 4E 85 F1 | 	sub	fp, #8
0b854     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b858     14 4E 05 A1 |  if_e	add	fp, #20
0b85c     A7 22 02 AB |  if_e	rdlong	local03, fp
0b860     14 4E 85 A1 |  if_e	sub	fp, #20
0b864     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0b868     1C 00 90 5D |  if_ne	jmp	#LR__0951
0b86c     A7 12 02 FB | 	rdlong	arg01, fp
0b870     0C 4E 05 F1 | 	add	fp, #12
0b874     A7 14 02 FB | 	rdlong	arg02, fp
0b878     0C 4E 85 F1 | 	sub	fp, #12
0b87c     D4 AA B0 FD | 	call	#__system___string_concat
0b880     A7 FA 61 FC | 	wrlong	result1, fp
0b884     10 01 90 FD | 	jmp	#LR__0955
0b888                 | LR__0951
0b888                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
0b888     08 4E 05 F1 | 	add	fp, #8
0b88c     A7 1E 02 FB | 	rdlong	local01, fp
0b890     08 4E 85 F1 | 	sub	fp, #8
0b894     2B 1E 0E F2 | 	cmp	local01, #43 wz
0b898     14 4E 05 A1 |  if_e	add	fp, #20
0b89c     A7 22 02 AB |  if_e	rdlong	local03, fp
0b8a0     14 4E 85 A1 |  if_e	sub	fp, #20
0b8a4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0b8a8     30 00 90 5D |  if_ne	jmp	#LR__0952
0b8ac     A7 12 02 FB | 	rdlong	arg01, fp
0b8b0     48 EF BF FD | 	call	#_convertstring
0b8b4     FD 12 02 F6 | 	mov	arg01, result1
0b8b8     0C 4E 05 F1 | 	add	fp, #12
0b8bc     A7 14 02 FB | 	rdlong	arg02, fp
0b8c0     0C 4E 85 F1 | 	sub	fp, #12
0b8c4     8C AA B0 FD | 	call	#__system___string_concat
0b8c8     A7 FA 61 FC | 	wrlong	result1, fp
0b8cc     08 4E 05 F1 | 	add	fp, #8
0b8d0     A7 3E 68 FC | 	wrlong	#31, fp
0b8d4     08 4E 85 F1 | 	sub	fp, #8
0b8d8     BC 00 90 FD | 	jmp	#LR__0955
0b8dc                 | LR__0952
0b8dc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
0b8dc     08 4E 05 F1 | 	add	fp, #8
0b8e0     A7 1E 02 FB | 	rdlong	local01, fp
0b8e4     08 4E 85 F1 | 	sub	fp, #8
0b8e8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0b8ec     14 4E 05 A1 |  if_e	add	fp, #20
0b8f0     A7 22 02 AB |  if_e	rdlong	local03, fp
0b8f4     14 4E 85 A1 |  if_e	sub	fp, #20
0b8f8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0b8fc     28 00 90 5D |  if_ne	jmp	#LR__0953
0b900     A7 1E 02 FB | 	rdlong	local01, fp
0b904     0C 4E 05 F1 | 	add	fp, #12
0b908     A7 12 02 FB | 	rdlong	arg01, fp
0b90c     0C 4E 85 F1 | 	sub	fp, #12
0b910     E8 EE BF FD | 	call	#_convertstring
0b914     FD 14 02 F6 | 	mov	arg02, result1
0b918     0F 13 02 F6 | 	mov	arg01, local01
0b91c     34 AA B0 FD | 	call	#__system___string_concat
0b920     A7 FA 61 FC | 	wrlong	result1, fp
0b924     70 00 90 FD | 	jmp	#LR__0955
0b928                 | LR__0953
0b928                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
0b928     08 4E 05 F1 | 	add	fp, #8
0b92c     A7 1E 02 FB | 	rdlong	local01, fp
0b930     08 4E 85 F1 | 	sub	fp, #8
0b934     2B 1E 0E F2 | 	cmp	local01, #43 wz
0b938     14 4E 05 A1 |  if_e	add	fp, #20
0b93c     A7 22 02 AB |  if_e	rdlong	local03, fp
0b940     14 4E 85 A1 |  if_e	sub	fp, #20
0b944     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0b948     3C 00 90 5D |  if_ne	jmp	#LR__0954
0b94c     A7 12 02 FB | 	rdlong	arg01, fp
0b950     A8 EE BF FD | 	call	#_convertstring
0b954     FD 1E 02 F6 | 	mov	local01, result1
0b958     0C 4E 05 F1 | 	add	fp, #12
0b95c     A7 12 02 FB | 	rdlong	arg01, fp
0b960     0C 4E 85 F1 | 	sub	fp, #12
0b964     94 EE BF FD | 	call	#_convertstring
0b968     FD 14 02 F6 | 	mov	arg02, result1
0b96c     0F 13 02 F6 | 	mov	arg01, local01
0b970     E0 A9 B0 FD | 	call	#__system___string_concat
0b974     A7 FA 61 FC | 	wrlong	result1, fp
0b978     08 4E 05 F1 | 	add	fp, #8
0b97c     A7 3E 68 FC | 	wrlong	#31, fp
0b980     08 4E 85 F1 | 	sub	fp, #8
0b984     10 00 90 FD | 	jmp	#LR__0955
0b988                 | LR__0954
0b988     A7 08 68 FC | 	wrlong	#4, fp
0b98c     08 4E 05 F1 | 	add	fp, #8
0b990     A7 FE 69 FC | 	wrlong	#255, fp
0b994     08 4E 85 F1 | 	sub	fp, #8
0b998                 | LR__0955
0b998     A7 12 02 F6 | 	mov	arg01, fp
0b99c     08 D2 BF FD | 	call	#_push
0b9a0     A7 F0 03 F6 | 	mov	ptra, fp
0b9a4     B2 00 A0 FD | 	call	#popregs_
0b9a8                 | _do_plus_ret
0b9a8     2D 00 64 FD | 	ret
0b9ac                 | 
0b9ac                 | ' 
0b9ac                 | ' sub do_minus
0b9ac                 | _do_minus
0b9ac     05 4A 05 F6 | 	mov	COUNT_, #5
0b9b0     A8 00 A0 FD | 	call	#pushregs_
0b9b4     18 F0 07 F1 | 	add	ptra, #24
0b9b8     54 D1 BF FD | 	call	#_pop
0b9bc     FD 1E 02 F6 | 	mov	local01, result1
0b9c0     FE 20 02 F6 | 	mov	local02, result2
0b9c4     FF 22 02 F6 | 	mov	local03, result3
0b9c8     0C 4E 05 F1 | 	add	fp, #12
0b9cc     A7 1E 62 FC | 	wrlong	local01, fp
0b9d0     04 4E 05 F1 | 	add	fp, #4
0b9d4     A7 20 62 FC | 	wrlong	local02, fp
0b9d8     04 4E 05 F1 | 	add	fp, #4
0b9dc     A7 22 62 FC | 	wrlong	local03, fp
0b9e0     14 4E 85 F1 | 	sub	fp, #20
0b9e4     28 D1 BF FD | 	call	#_pop
0b9e8     FF 22 02 F6 | 	mov	local03, result3
0b9ec     A7 FA 61 FC | 	wrlong	result1, fp
0b9f0     04 4E 05 F1 | 	add	fp, #4
0b9f4     A7 FC 61 FC | 	wrlong	result2, fp
0b9f8     04 4E 05 F1 | 	add	fp, #4
0b9fc     A7 22 62 FC | 	wrlong	local03, fp
0ba00                 | ' 
0ba00                 | ' t2=pop()
0ba00                 | ' t1=pop()
0ba00                 | ' 
0ba00                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
0ba00     08 4E 85 F1 | 	sub	fp, #8
0ba04     1D 22 0E F2 | 	cmp	local03, #29 wz
0ba08     14 4E 05 A1 |  if_e	add	fp, #20
0ba0c     A7 24 02 AB |  if_e	rdlong	local04, fp
0ba10     14 4E 85 A1 |  if_e	sub	fp, #20
0ba14     12 23 02 A6 |  if_e	mov	local03, local04
0ba18     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ba1c     5C 00 90 5D |  if_ne	jmp	#LR__0961
0ba20                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
0ba20     0C 4E 05 F1 | 	add	fp, #12
0ba24     A7 1E 02 FB | 	rdlong	local01, fp
0ba28     0C 4E 85 F1 | 	sub	fp, #12
0ba2c     A7 22 02 FB | 	rdlong	local03, fp
0ba30     11 1F 12 F2 | 	cmp	local01, local03 wc
0ba34     1C 00 90 3D |  if_ae	jmp	#LR__0960
0ba38     A7 1E 02 FB | 	rdlong	local01, fp
0ba3c     0C 4E 05 F1 | 	add	fp, #12
0ba40     A7 20 02 FB | 	rdlong	local02, fp
0ba44     0C 4E 85 F1 | 	sub	fp, #12
0ba48     10 1F 82 F1 | 	sub	local01, local02
0ba4c     A7 1E 62 FC | 	wrlong	local01, fp
0ba50     F4 02 90 FD | 	jmp	#LR__0970
0ba54                 | LR__0960
0ba54     A7 1E 02 FB | 	rdlong	local01, fp
0ba58     0C 4E 05 F1 | 	add	fp, #12
0ba5c     A7 20 02 FB | 	rdlong	local02, fp
0ba60     0C 4E 85 F1 | 	sub	fp, #12
0ba64     10 1F 82 F1 | 	sub	local01, local02
0ba68     A7 1E 62 FC | 	wrlong	local01, fp
0ba6c     08 4E 05 F1 | 	add	fp, #8
0ba70     A7 38 68 FC | 	wrlong	#28, fp
0ba74     08 4E 85 F1 | 	sub	fp, #8
0ba78     CC 02 90 FD | 	jmp	#LR__0970
0ba7c                 | LR__0961
0ba7c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
0ba7c     08 4E 05 F1 | 	add	fp, #8
0ba80     A7 1E 02 FB | 	rdlong	local01, fp
0ba84     08 4E 85 F1 | 	sub	fp, #8
0ba88     1D 1E 0E F2 | 	cmp	local01, #29 wz
0ba8c     14 4E 05 A1 |  if_e	add	fp, #20
0ba90     A7 24 02 AB |  if_e	rdlong	local04, fp
0ba94     14 4E 85 A1 |  if_e	sub	fp, #20
0ba98     12 23 02 A6 |  if_e	mov	local03, local04
0ba9c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0baa0     28 00 90 5D |  if_ne	jmp	#LR__0962
0baa4     A7 1E 02 FB | 	rdlong	local01, fp
0baa8     0C 4E 05 F1 | 	add	fp, #12
0baac     A7 20 02 FB | 	rdlong	local02, fp
0bab0     0C 4E 85 F1 | 	sub	fp, #12
0bab4     10 1F 82 F1 | 	sub	local01, local02
0bab8     A7 1E 62 FC | 	wrlong	local01, fp
0babc     08 4E 05 F1 | 	add	fp, #8
0bac0     A7 38 68 FC | 	wrlong	#28, fp
0bac4     08 4E 85 F1 | 	sub	fp, #8
0bac8     7C 02 90 FD | 	jmp	#LR__0970
0bacc                 | LR__0962
0bacc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0bacc     08 4E 05 F1 | 	add	fp, #8
0bad0     A7 1E 02 FB | 	rdlong	local01, fp
0bad4     08 4E 85 F1 | 	sub	fp, #8
0bad8     1D 1E 0E F2 | 	cmp	local01, #29 wz
0badc     14 4E 05 A1 |  if_e	add	fp, #20
0bae0     A7 24 02 AB |  if_e	rdlong	local04, fp
0bae4     14 4E 85 A1 |  if_e	sub	fp, #20
0bae8     12 23 02 A6 |  if_e	mov	local03, local04
0baec     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0baf0     34 00 90 5D |  if_ne	jmp	#LR__0963
0baf4     A7 12 02 FB | 	rdlong	arg01, fp
0baf8     E0 CD B0 FD | 	call	#__system___float_fromuns
0bafc     FD 12 02 F6 | 	mov	arg01, result1
0bb00     0C 4E 05 F1 | 	add	fp, #12
0bb04     A7 14 02 FB | 	rdlong	arg02, fp
0bb08     0C 4E 85 F1 | 	sub	fp, #12
0bb0c     1F 14 E6 F4 | 	bitnot	arg02, #31
0bb10     FC CD B0 FD | 	call	#__system___float_add
0bb14     A7 FA 61 FC | 	wrlong	result1, fp
0bb18     08 4E 05 F1 | 	add	fp, #8
0bb1c     A7 3C 68 FC | 	wrlong	#30, fp
0bb20     08 4E 85 F1 | 	sub	fp, #8
0bb24     20 02 90 FD | 	jmp	#LR__0970
0bb28                 | LR__0963
0bb28                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
0bb28     08 4E 05 F1 | 	add	fp, #8
0bb2c     A7 1E 02 FB | 	rdlong	local01, fp
0bb30     08 4E 85 F1 | 	sub	fp, #8
0bb34     1C 1E 0E F2 | 	cmp	local01, #28 wz
0bb38     14 4E 05 A1 |  if_e	add	fp, #20
0bb3c     A7 24 02 AB |  if_e	rdlong	local04, fp
0bb40     14 4E 85 A1 |  if_e	sub	fp, #20
0bb44     12 23 02 A6 |  if_e	mov	local03, local04
0bb48     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bb4c     1C 00 90 5D |  if_ne	jmp	#LR__0964
0bb50     A7 1E 02 FB | 	rdlong	local01, fp
0bb54     0C 4E 05 F1 | 	add	fp, #12
0bb58     A7 20 02 FB | 	rdlong	local02, fp
0bb5c     0C 4E 85 F1 | 	sub	fp, #12
0bb60     10 1F 82 F1 | 	sub	local01, local02
0bb64     A7 1E 62 FC | 	wrlong	local01, fp
0bb68     DC 01 90 FD | 	jmp	#LR__0970
0bb6c                 | LR__0964
0bb6c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
0bb6c     08 4E 05 F1 | 	add	fp, #8
0bb70     A7 1E 02 FB | 	rdlong	local01, fp
0bb74     08 4E 85 F1 | 	sub	fp, #8
0bb78     1C 1E 0E F2 | 	cmp	local01, #28 wz
0bb7c     14 4E 05 A1 |  if_e	add	fp, #20
0bb80     A7 24 02 AB |  if_e	rdlong	local04, fp
0bb84     14 4E 85 A1 |  if_e	sub	fp, #20
0bb88     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0bb8c     1C 00 90 5D |  if_ne	jmp	#LR__0965
0bb90     A7 1E 02 FB | 	rdlong	local01, fp
0bb94     0C 4E 05 F1 | 	add	fp, #12
0bb98     A7 20 02 FB | 	rdlong	local02, fp
0bb9c     0C 4E 85 F1 | 	sub	fp, #12
0bba0     10 1F 82 F1 | 	sub	local01, local02
0bba4     A7 1E 62 FC | 	wrlong	local01, fp
0bba8     9C 01 90 FD | 	jmp	#LR__0970
0bbac                 | LR__0965
0bbac                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
0bbac     08 4E 05 F1 | 	add	fp, #8
0bbb0     A7 1E 02 FB | 	rdlong	local01, fp
0bbb4     08 4E 85 F1 | 	sub	fp, #8
0bbb8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0bbbc     14 4E 05 A1 |  if_e	add	fp, #20
0bbc0     A7 22 02 AB |  if_e	rdlong	local03, fp
0bbc4     14 4E 85 A1 |  if_e	sub	fp, #20
0bbc8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bbcc     44 00 90 5D |  if_ne	jmp	#LR__0966
0bbd0     A7 12 02 FB | 	rdlong	arg01, fp
0bbd4     09 13 52 F6 | 	abs	arg01, arg01 wc
0bbd8     1F 26 C6 C9 |  if_b	decod	local05, #31
0bbdc     00 26 06 36 |  if_ae	mov	local05, #0
0bbe0     F8 CC B0 FD | 	call	#__system___float_fromuns
0bbe4     13 FB 61 F5 | 	xor	result1, local05
0bbe8     FD 12 02 F6 | 	mov	arg01, result1
0bbec     0C 4E 05 F1 | 	add	fp, #12
0bbf0     A7 14 02 FB | 	rdlong	arg02, fp
0bbf4     0C 4E 85 F1 | 	sub	fp, #12
0bbf8     1F 14 E6 F4 | 	bitnot	arg02, #31
0bbfc     10 CD B0 FD | 	call	#__system___float_add
0bc00     A7 FA 61 FC | 	wrlong	result1, fp
0bc04     08 4E 05 F1 | 	add	fp, #8
0bc08     A7 3C 68 FC | 	wrlong	#30, fp
0bc0c     08 4E 85 F1 | 	sub	fp, #8
0bc10     34 01 90 FD | 	jmp	#LR__0970
0bc14                 | LR__0966
0bc14                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
0bc14     08 4E 05 F1 | 	add	fp, #8
0bc18     A7 1E 02 FB | 	rdlong	local01, fp
0bc1c     08 4E 85 F1 | 	sub	fp, #8
0bc20     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bc24     14 4E 05 A1 |  if_e	add	fp, #20
0bc28     A7 22 02 AB |  if_e	rdlong	local03, fp
0bc2c     14 4E 85 A1 |  if_e	sub	fp, #20
0bc30     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bc34     2C 00 90 5D |  if_ne	jmp	#LR__0967
0bc38     A7 1E 02 FB | 	rdlong	local01, fp
0bc3c     0C 4E 05 F1 | 	add	fp, #12
0bc40     A7 12 02 FB | 	rdlong	arg01, fp
0bc44     0C 4E 85 F1 | 	sub	fp, #12
0bc48     90 CC B0 FD | 	call	#__system___float_fromuns
0bc4c     FD 14 02 F6 | 	mov	arg02, result1
0bc50     0F 13 02 F6 | 	mov	arg01, local01
0bc54     1F 14 E6 F4 | 	bitnot	arg02, #31
0bc58     B4 CC B0 FD | 	call	#__system___float_add
0bc5c     A7 FA 61 FC | 	wrlong	result1, fp
0bc60     E4 00 90 FD | 	jmp	#LR__0970
0bc64                 | LR__0967
0bc64                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
0bc64     08 4E 05 F1 | 	add	fp, #8
0bc68     A7 1E 02 FB | 	rdlong	local01, fp
0bc6c     08 4E 85 F1 | 	sub	fp, #8
0bc70     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bc74     14 4E 05 A1 |  if_e	add	fp, #20
0bc78     A7 22 02 AB |  if_e	rdlong	local03, fp
0bc7c     14 4E 85 A1 |  if_e	sub	fp, #20
0bc80     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0bc84     3C 00 90 5D |  if_ne	jmp	#LR__0968
0bc88     A7 1E 02 FB | 	rdlong	local01, fp
0bc8c     0C 4E 05 F1 | 	add	fp, #12
0bc90     A7 12 02 FB | 	rdlong	arg01, fp
0bc94     0C 4E 85 F1 | 	sub	fp, #12
0bc98     09 13 52 F6 | 	abs	arg01, arg01 wc
0bc9c     1F 26 C6 C9 |  if_b	decod	local05, #31
0bca0     00 26 06 36 |  if_ae	mov	local05, #0
0bca4     34 CC B0 FD | 	call	#__system___float_fromuns
0bca8     13 FB 61 F5 | 	xor	result1, local05
0bcac     FD 14 02 F6 | 	mov	arg02, result1
0bcb0     0F 13 02 F6 | 	mov	arg01, local01
0bcb4     1F 14 E6 F4 | 	bitnot	arg02, #31
0bcb8     54 CC B0 FD | 	call	#__system___float_add
0bcbc     A7 FA 61 FC | 	wrlong	result1, fp
0bcc0     84 00 90 FD | 	jmp	#LR__0970
0bcc4                 | LR__0968
0bcc4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
0bcc4     08 4E 05 F1 | 	add	fp, #8
0bcc8     A7 1E 02 FB | 	rdlong	local01, fp
0bccc     08 4E 85 F1 | 	sub	fp, #8
0bcd0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0bcd4     14 4E 05 A1 |  if_e	add	fp, #20
0bcd8     A7 22 02 AB |  if_e	rdlong	local03, fp
0bcdc     14 4E 85 A1 |  if_e	sub	fp, #20
0bce0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0bce4     20 00 90 5D |  if_ne	jmp	#LR__0969
0bce8     A7 12 02 FB | 	rdlong	arg01, fp
0bcec     0C 4E 05 F1 | 	add	fp, #12
0bcf0     A7 14 02 FB | 	rdlong	arg02, fp
0bcf4     0C 4E 85 F1 | 	sub	fp, #12
0bcf8     1F 14 E6 F4 | 	bitnot	arg02, #31
0bcfc     10 CC B0 FD | 	call	#__system___float_add
0bd00     A7 FA 61 FC | 	wrlong	result1, fp
0bd04     40 00 90 FD | 	jmp	#LR__0970
0bd08                 | LR__0969
0bd08                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
0bd08     08 4E 05 F1 | 	add	fp, #8
0bd0c     A7 1E 02 FB | 	rdlong	local01, fp
0bd10     08 4E 85 F1 | 	sub	fp, #8
0bd14     1F 1E 0E F2 | 	cmp	local01, #31 wz
0bd18     14 4E 05 51 |  if_ne	add	fp, #20
0bd1c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0bd20     14 4E 85 51 |  if_ne	sub	fp, #20
0bd24     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0bd28     A7 06 68 AC |  if_e	wrlong	#3, fp
0bd2c     08 4E 05 A1 |  if_e	add	fp, #8
0bd30     A7 FE 69 AC |  if_e	wrlong	#255, fp
0bd34     08 4E 85 A1 |  if_e	sub	fp, #8
0bd38     A7 0A 68 5C |  if_ne	wrlong	#5, fp
0bd3c     08 4E 05 51 |  if_ne	add	fp, #8
0bd40     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0bd44     08 4E 85 51 |  if_ne	sub	fp, #8
0bd48                 | LR__0970
0bd48     A7 12 02 F6 | 	mov	arg01, fp
0bd4c     58 CE BF FD | 	call	#_push
0bd50     A7 F0 03 F6 | 	mov	ptra, fp
0bd54     B2 00 A0 FD | 	call	#popregs_
0bd58                 | _do_minus_ret
0bd58     2D 00 64 FD | 	ret
0bd5c                 | 
0bd5c                 | ' 
0bd5c                 | ' sub do_and 
0bd5c                 | _do_and
0bd5c     03 4A 05 F6 | 	mov	COUNT_, #3
0bd60     A8 00 A0 FD | 	call	#pushregs_
0bd64     18 F0 07 F1 | 	add	ptra, #24
0bd68     A4 CD BF FD | 	call	#_pop
0bd6c     FD 12 02 F6 | 	mov	arg01, result1
0bd70     FE 1E 02 F6 | 	mov	local01, result2
0bd74     FF 20 02 F6 | 	mov	local02, result3
0bd78     0C 4E 05 F1 | 	add	fp, #12
0bd7c     A7 12 62 FC | 	wrlong	arg01, fp
0bd80     04 4E 05 F1 | 	add	fp, #4
0bd84     A7 1E 62 FC | 	wrlong	local01, fp
0bd88     04 4E 05 F1 | 	add	fp, #4
0bd8c     A7 20 62 FC | 	wrlong	local02, fp
0bd90     14 4E 85 F1 | 	sub	fp, #20
0bd94     78 CD BF FD | 	call	#_pop
0bd98     FF 22 02 F6 | 	mov	local03, result3
0bd9c     A7 FA 61 FC | 	wrlong	result1, fp
0bda0     04 4E 05 F1 | 	add	fp, #4
0bda4     A7 FC 61 FC | 	wrlong	result2, fp
0bda8     04 4E 05 F1 | 	add	fp, #4
0bdac     A7 22 62 FC | 	wrlong	local03, fp
0bdb0                 | ' 
0bdb0                 | ' t2=pop()
0bdb0                 | ' t1=pop()
0bdb0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0bdb0     08 4E 85 F1 | 	sub	fp, #8
0bdb4     1C 22 0E F2 | 	cmp	local03, #28 wz
0bdb8     A7 22 02 AB |  if_e	rdlong	local03, fp
0bdbc     A7 22 62 AC |  if_e	wrlong	local03, fp
0bdc0     08 4E 05 A1 |  if_e	add	fp, #8
0bdc4     A7 3A 68 AC |  if_e	wrlong	#29, fp
0bdc8     08 4E 85 A1 |  if_e	sub	fp, #8
0bdcc                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0bdcc     14 4E 05 F1 | 	add	fp, #20
0bdd0     A7 22 02 FB | 	rdlong	local03, fp
0bdd4     14 4E 85 F1 | 	sub	fp, #20
0bdd8     1C 22 0E F2 | 	cmp	local03, #28 wz
0bddc     18 00 90 5D |  if_ne	jmp	#LR__0980
0bde0     0C 4E 05 F1 | 	add	fp, #12
0bde4     A7 22 02 FB | 	rdlong	local03, fp
0bde8     A7 22 62 FC | 	wrlong	local03, fp
0bdec     08 4E 05 F1 | 	add	fp, #8
0bdf0     A7 3A 68 FC | 	wrlong	#29, fp
0bdf4     14 4E 85 F1 | 	sub	fp, #20
0bdf8                 | LR__0980
0bdf8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
0bdf8     08 4E 05 F1 | 	add	fp, #8
0bdfc     A7 22 02 FB | 	rdlong	local03, fp
0be00     08 4E 85 F1 | 	sub	fp, #8
0be04     1F 22 0E F2 | 	cmp	local03, #31 wz
0be08     14 4E 05 51 |  if_ne	add	fp, #20
0be0c     A7 20 02 5B |  if_ne	rdlong	local02, fp
0be10     14 4E 85 51 |  if_ne	sub	fp, #20
0be14     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0be18     08 4E 05 51 |  if_ne	add	fp, #8
0be1c     A7 22 02 5B |  if_ne	rdlong	local03, fp
0be20     08 4E 85 51 |  if_ne	sub	fp, #8
0be24     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0be28     14 4E 05 51 |  if_ne	add	fp, #20
0be2c     14 4E 85 51 |  if_ne	sub	fp, #20
0be30     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0be34     A7 0C 68 AC |  if_e	wrlong	#6, fp
0be38     08 4E 05 A1 |  if_e	add	fp, #8
0be3c     A7 FE 69 AC |  if_e	wrlong	#255, fp
0be40     08 4E 85 A1 |  if_e	sub	fp, #8
0be44     18 00 90 AD |  if_e	jmp	#LR__0981
0be48     A7 22 02 FB | 	rdlong	local03, fp
0be4c     0C 4E 05 F1 | 	add	fp, #12
0be50     A7 1E 02 FB | 	rdlong	local01, fp
0be54     0C 4E 85 F1 | 	sub	fp, #12
0be58     0F 23 02 F5 | 	and	local03, local01
0be5c     A7 22 62 FC | 	wrlong	local03, fp
0be60                 | LR__0981
0be60     A7 12 02 F6 | 	mov	arg01, fp
0be64     40 CD BF FD | 	call	#_push
0be68     A7 F0 03 F6 | 	mov	ptra, fp
0be6c     B2 00 A0 FD | 	call	#popregs_
0be70                 | _do_and_ret
0be70     2D 00 64 FD | 	ret
0be74                 | 
0be74                 | ' 
0be74                 | ' sub do_or 
0be74                 | _do_or
0be74     03 4A 05 F6 | 	mov	COUNT_, #3
0be78     A8 00 A0 FD | 	call	#pushregs_
0be7c     18 F0 07 F1 | 	add	ptra, #24
0be80     8C CC BF FD | 	call	#_pop
0be84     FD 12 02 F6 | 	mov	arg01, result1
0be88     FE 1E 02 F6 | 	mov	local01, result2
0be8c     FF 20 02 F6 | 	mov	local02, result3
0be90     0C 4E 05 F1 | 	add	fp, #12
0be94     A7 12 62 FC | 	wrlong	arg01, fp
0be98     04 4E 05 F1 | 	add	fp, #4
0be9c     A7 1E 62 FC | 	wrlong	local01, fp
0bea0     04 4E 05 F1 | 	add	fp, #4
0bea4     A7 20 62 FC | 	wrlong	local02, fp
0bea8     14 4E 85 F1 | 	sub	fp, #20
0beac     60 CC BF FD | 	call	#_pop
0beb0     FF 22 02 F6 | 	mov	local03, result3
0beb4     A7 FA 61 FC | 	wrlong	result1, fp
0beb8     04 4E 05 F1 | 	add	fp, #4
0bebc     A7 FC 61 FC | 	wrlong	result2, fp
0bec0     04 4E 05 F1 | 	add	fp, #4
0bec4     A7 22 62 FC | 	wrlong	local03, fp
0bec8                 | ' 
0bec8                 | ' t2=pop()
0bec8                 | ' t1=pop()
0bec8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0bec8     08 4E 85 F1 | 	sub	fp, #8
0becc     1C 22 0E F2 | 	cmp	local03, #28 wz
0bed0     A7 22 02 AB |  if_e	rdlong	local03, fp
0bed4     A7 22 62 AC |  if_e	wrlong	local03, fp
0bed8     08 4E 05 A1 |  if_e	add	fp, #8
0bedc     A7 3A 68 AC |  if_e	wrlong	#29, fp
0bee0     08 4E 85 A1 |  if_e	sub	fp, #8
0bee4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0bee4     14 4E 05 F1 | 	add	fp, #20
0bee8     A7 22 02 FB | 	rdlong	local03, fp
0beec     14 4E 85 F1 | 	sub	fp, #20
0bef0     1C 22 0E F2 | 	cmp	local03, #28 wz
0bef4     18 00 90 5D |  if_ne	jmp	#LR__0990
0bef8     0C 4E 05 F1 | 	add	fp, #12
0befc     A7 22 02 FB | 	rdlong	local03, fp
0bf00     A7 22 62 FC | 	wrlong	local03, fp
0bf04     08 4E 05 F1 | 	add	fp, #8
0bf08     A7 3A 68 FC | 	wrlong	#29, fp
0bf0c     14 4E 85 F1 | 	sub	fp, #20
0bf10                 | LR__0990
0bf10                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
0bf10     08 4E 05 F1 | 	add	fp, #8
0bf14     A7 22 02 FB | 	rdlong	local03, fp
0bf18     08 4E 85 F1 | 	sub	fp, #8
0bf1c     1F 22 0E F2 | 	cmp	local03, #31 wz
0bf20     14 4E 05 51 |  if_ne	add	fp, #20
0bf24     A7 20 02 5B |  if_ne	rdlong	local02, fp
0bf28     14 4E 85 51 |  if_ne	sub	fp, #20
0bf2c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0bf30     08 4E 05 51 |  if_ne	add	fp, #8
0bf34     A7 22 02 5B |  if_ne	rdlong	local03, fp
0bf38     08 4E 85 51 |  if_ne	sub	fp, #8
0bf3c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0bf40     14 4E 05 51 |  if_ne	add	fp, #20
0bf44     14 4E 85 51 |  if_ne	sub	fp, #20
0bf48     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0bf4c     A7 0C 68 AC |  if_e	wrlong	#6, fp
0bf50     08 4E 05 A1 |  if_e	add	fp, #8
0bf54     A7 FE 69 AC |  if_e	wrlong	#255, fp
0bf58     08 4E 85 A1 |  if_e	sub	fp, #8
0bf5c     18 00 90 AD |  if_e	jmp	#LR__0991
0bf60     A7 22 02 FB | 	rdlong	local03, fp
0bf64     0C 4E 05 F1 | 	add	fp, #12
0bf68     A7 1E 02 FB | 	rdlong	local01, fp
0bf6c     0C 4E 85 F1 | 	sub	fp, #12
0bf70     0F 23 42 F5 | 	or	local03, local01
0bf74     A7 22 62 FC | 	wrlong	local03, fp
0bf78                 | LR__0991
0bf78     A7 12 02 F6 | 	mov	arg01, fp
0bf7c     28 CC BF FD | 	call	#_push
0bf80     A7 F0 03 F6 | 	mov	ptra, fp
0bf84     B2 00 A0 FD | 	call	#popregs_
0bf88                 | _do_or_ret
0bf88     2D 00 64 FD | 	ret
0bf8c                 | 
0bf8c                 | ' 
0bf8c                 | ' sub do_mul
0bf8c                 | _do_mul
0bf8c     05 4A 05 F6 | 	mov	COUNT_, #5
0bf90     A8 00 A0 FD | 	call	#pushregs_
0bf94     18 F0 07 F1 | 	add	ptra, #24
0bf98     74 CB BF FD | 	call	#_pop
0bf9c     FD 1E 02 F6 | 	mov	local01, result1
0bfa0     FE 20 02 F6 | 	mov	local02, result2
0bfa4     FF 22 02 F6 | 	mov	local03, result3
0bfa8     0C 4E 05 F1 | 	add	fp, #12
0bfac     A7 1E 62 FC | 	wrlong	local01, fp
0bfb0     04 4E 05 F1 | 	add	fp, #4
0bfb4     A7 20 62 FC | 	wrlong	local02, fp
0bfb8     04 4E 05 F1 | 	add	fp, #4
0bfbc     A7 22 62 FC | 	wrlong	local03, fp
0bfc0     14 4E 85 F1 | 	sub	fp, #20
0bfc4     48 CB BF FD | 	call	#_pop
0bfc8     FF 22 02 F6 | 	mov	local03, result3
0bfcc     A7 FA 61 FC | 	wrlong	result1, fp
0bfd0     04 4E 05 F1 | 	add	fp, #4
0bfd4     A7 FC 61 FC | 	wrlong	result2, fp
0bfd8     04 4E 05 F1 | 	add	fp, #4
0bfdc     A7 22 62 FC | 	wrlong	local03, fp
0bfe0                 | ' 
0bfe0                 | ' t2=pop()
0bfe0                 | ' t1=pop()
0bfe0                 | ' 
0bfe0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
0bfe0     08 4E 85 F1 | 	sub	fp, #8
0bfe4     1D 22 0E F2 | 	cmp	local03, #29 wz
0bfe8     14 4E 05 A1 |  if_e	add	fp, #20
0bfec     A7 24 02 AB |  if_e	rdlong	local04, fp
0bff0     14 4E 85 A1 |  if_e	sub	fp, #20
0bff4     12 23 02 A6 |  if_e	mov	local03, local04
0bff8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0bffc     20 00 90 5D |  if_ne	jmp	#LR__1000
0c000     A7 20 02 FB | 	rdlong	local02, fp
0c004     0C 4E 05 F1 | 	add	fp, #12
0c008     A7 22 02 FB | 	rdlong	local03, fp
0c00c     11 21 02 FD | 	qmul	local02, local03
0c010     0C 4E 85 F1 | 	sub	fp, #12
0c014     18 1E 62 FD | 	getqx	local01
0c018     A7 1E 62 FC | 	wrlong	local01, fp
0c01c     C4 02 90 FD | 	jmp	#LR__1009
0c020                 | LR__1000
0c020                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
0c020     08 4E 05 F1 | 	add	fp, #8
0c024     A7 1E 02 FB | 	rdlong	local01, fp
0c028     08 4E 85 F1 | 	sub	fp, #8
0c02c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c030     14 4E 05 A1 |  if_e	add	fp, #20
0c034     A7 24 02 AB |  if_e	rdlong	local04, fp
0c038     14 4E 85 A1 |  if_e	sub	fp, #20
0c03c     12 23 02 A6 |  if_e	mov	local03, local04
0c040     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c044     2C 00 90 5D |  if_ne	jmp	#LR__1001
0c048     A7 20 02 FB | 	rdlong	local02, fp
0c04c     0C 4E 05 F1 | 	add	fp, #12
0c050     A7 22 02 FB | 	rdlong	local03, fp
0c054     11 21 02 FD | 	qmul	local02, local03
0c058     0C 4E 85 F1 | 	sub	fp, #12
0c05c     18 1E 62 FD | 	getqx	local01
0c060     A7 1E 62 FC | 	wrlong	local01, fp
0c064     08 4E 05 F1 | 	add	fp, #8
0c068     A7 38 68 FC | 	wrlong	#28, fp
0c06c     08 4E 85 F1 | 	sub	fp, #8
0c070     70 02 90 FD | 	jmp	#LR__1009
0c074                 | LR__1001
0c074                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0c074     08 4E 05 F1 | 	add	fp, #8
0c078     A7 1E 02 FB | 	rdlong	local01, fp
0c07c     08 4E 85 F1 | 	sub	fp, #8
0c080     1D 1E 0E F2 | 	cmp	local01, #29 wz
0c084     14 4E 05 A1 |  if_e	add	fp, #20
0c088     A7 24 02 AB |  if_e	rdlong	local04, fp
0c08c     14 4E 85 A1 |  if_e	sub	fp, #20
0c090     12 23 02 A6 |  if_e	mov	local03, local04
0c094     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c098     30 00 90 5D |  if_ne	jmp	#LR__1002
0c09c     A7 12 02 FB | 	rdlong	arg01, fp
0c0a0     38 C8 B0 FD | 	call	#__system___float_fromuns
0c0a4     FD 12 02 F6 | 	mov	arg01, result1
0c0a8     0C 4E 05 F1 | 	add	fp, #12
0c0ac     A7 14 02 FB | 	rdlong	arg02, fp
0c0b0     0C 4E 85 F1 | 	sub	fp, #12
0c0b4     50 CB B0 FD | 	call	#__system___float_mul
0c0b8     A7 FA 61 FC | 	wrlong	result1, fp
0c0bc     08 4E 05 F1 | 	add	fp, #8
0c0c0     A7 3C 68 FC | 	wrlong	#30, fp
0c0c4     08 4E 85 F1 | 	sub	fp, #8
0c0c8     18 02 90 FD | 	jmp	#LR__1009
0c0cc                 | LR__1002
0c0cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
0c0cc     08 4E 05 F1 | 	add	fp, #8
0c0d0     A7 1E 02 FB | 	rdlong	local01, fp
0c0d4     08 4E 85 F1 | 	sub	fp, #8
0c0d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c0dc     14 4E 05 A1 |  if_e	add	fp, #20
0c0e0     A7 24 02 AB |  if_e	rdlong	local04, fp
0c0e4     14 4E 85 A1 |  if_e	sub	fp, #20
0c0e8     12 23 02 A6 |  if_e	mov	local03, local04
0c0ec     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c0f0     20 00 90 5D |  if_ne	jmp	#LR__1003
0c0f4     A7 20 02 FB | 	rdlong	local02, fp
0c0f8     0C 4E 05 F1 | 	add	fp, #12
0c0fc     A7 22 02 FB | 	rdlong	local03, fp
0c100     11 21 02 FD | 	qmul	local02, local03
0c104     0C 4E 85 F1 | 	sub	fp, #12
0c108     18 1E 62 FD | 	getqx	local01
0c10c     A7 1E 62 FC | 	wrlong	local01, fp
0c110     D0 01 90 FD | 	jmp	#LR__1009
0c114                 | LR__1003
0c114                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
0c114     08 4E 05 F1 | 	add	fp, #8
0c118     A7 1E 02 FB | 	rdlong	local01, fp
0c11c     08 4E 85 F1 | 	sub	fp, #8
0c120     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c124     14 4E 05 A1 |  if_e	add	fp, #20
0c128     A7 24 02 AB |  if_e	rdlong	local04, fp
0c12c     14 4E 85 A1 |  if_e	sub	fp, #20
0c130     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
0c134     20 00 90 5D |  if_ne	jmp	#LR__1004
0c138     A7 20 02 FB | 	rdlong	local02, fp
0c13c     0C 4E 05 F1 | 	add	fp, #12
0c140     A7 22 02 FB | 	rdlong	local03, fp
0c144     11 21 02 FD | 	qmul	local02, local03
0c148     0C 4E 85 F1 | 	sub	fp, #12
0c14c     18 1E 62 FD | 	getqx	local01
0c150     A7 1E 62 FC | 	wrlong	local01, fp
0c154     8C 01 90 FD | 	jmp	#LR__1009
0c158                 | LR__1004
0c158                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
0c158     08 4E 05 F1 | 	add	fp, #8
0c15c     A7 1E 02 FB | 	rdlong	local01, fp
0c160     08 4E 85 F1 | 	sub	fp, #8
0c164     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c168     14 4E 05 A1 |  if_e	add	fp, #20
0c16c     A7 22 02 AB |  if_e	rdlong	local03, fp
0c170     14 4E 85 A1 |  if_e	sub	fp, #20
0c174     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c178     40 00 90 5D |  if_ne	jmp	#LR__1005
0c17c     A7 12 02 FB | 	rdlong	arg01, fp
0c180     09 13 52 F6 | 	abs	arg01, arg01 wc
0c184     1F 26 C6 C9 |  if_b	decod	local05, #31
0c188     00 26 06 36 |  if_ae	mov	local05, #0
0c18c     4C C7 B0 FD | 	call	#__system___float_fromuns
0c190     13 FB 61 F5 | 	xor	result1, local05
0c194     FD 12 02 F6 | 	mov	arg01, result1
0c198     0C 4E 05 F1 | 	add	fp, #12
0c19c     A7 14 02 FB | 	rdlong	arg02, fp
0c1a0     0C 4E 85 F1 | 	sub	fp, #12
0c1a4     60 CA B0 FD | 	call	#__system___float_mul
0c1a8     A7 FA 61 FC | 	wrlong	result1, fp
0c1ac     08 4E 05 F1 | 	add	fp, #8
0c1b0     A7 3C 68 FC | 	wrlong	#30, fp
0c1b4     08 4E 85 F1 | 	sub	fp, #8
0c1b8     28 01 90 FD | 	jmp	#LR__1009
0c1bc                 | LR__1005
0c1bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
0c1bc     08 4E 05 F1 | 	add	fp, #8
0c1c0     A7 1E 02 FB | 	rdlong	local01, fp
0c1c4     08 4E 85 F1 | 	sub	fp, #8
0c1c8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c1cc     14 4E 05 A1 |  if_e	add	fp, #20
0c1d0     A7 22 02 AB |  if_e	rdlong	local03, fp
0c1d4     14 4E 85 A1 |  if_e	sub	fp, #20
0c1d8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0c1dc     28 00 90 5D |  if_ne	jmp	#LR__1006
0c1e0     A7 1E 02 FB | 	rdlong	local01, fp
0c1e4     0C 4E 05 F1 | 	add	fp, #12
0c1e8     A7 12 02 FB | 	rdlong	arg01, fp
0c1ec     0C 4E 85 F1 | 	sub	fp, #12
0c1f0     E8 C6 B0 FD | 	call	#__system___float_fromuns
0c1f4     FD 14 02 F6 | 	mov	arg02, result1
0c1f8     0F 13 02 F6 | 	mov	arg01, local01
0c1fc     08 CA B0 FD | 	call	#__system___float_mul
0c200     A7 FA 61 FC | 	wrlong	result1, fp
0c204     DC 00 90 FD | 	jmp	#LR__1009
0c208                 | LR__1006
0c208                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
0c208     08 4E 05 F1 | 	add	fp, #8
0c20c     A7 1E 02 FB | 	rdlong	local01, fp
0c210     08 4E 85 F1 | 	sub	fp, #8
0c214     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c218     14 4E 05 A1 |  if_e	add	fp, #20
0c21c     A7 22 02 AB |  if_e	rdlong	local03, fp
0c220     14 4E 85 A1 |  if_e	sub	fp, #20
0c224     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0c228     38 00 90 5D |  if_ne	jmp	#LR__1007
0c22c     A7 1E 02 FB | 	rdlong	local01, fp
0c230     0C 4E 05 F1 | 	add	fp, #12
0c234     A7 12 02 FB | 	rdlong	arg01, fp
0c238     0C 4E 85 F1 | 	sub	fp, #12
0c23c     09 13 52 F6 | 	abs	arg01, arg01 wc
0c240     1F 26 C6 C9 |  if_b	decod	local05, #31
0c244     00 26 06 36 |  if_ae	mov	local05, #0
0c248     90 C6 B0 FD | 	call	#__system___float_fromuns
0c24c     13 FB 61 F5 | 	xor	result1, local05
0c250     FD 14 02 F6 | 	mov	arg02, result1
0c254     0F 13 02 F6 | 	mov	arg01, local01
0c258     AC C9 B0 FD | 	call	#__system___float_mul
0c25c     A7 FA 61 FC | 	wrlong	result1, fp
0c260     80 00 90 FD | 	jmp	#LR__1009
0c264                 | LR__1007
0c264                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
0c264     08 4E 05 F1 | 	add	fp, #8
0c268     A7 1E 02 FB | 	rdlong	local01, fp
0c26c     08 4E 85 F1 | 	sub	fp, #8
0c270     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c274     14 4E 05 A1 |  if_e	add	fp, #20
0c278     A7 22 02 AB |  if_e	rdlong	local03, fp
0c27c     14 4E 85 A1 |  if_e	sub	fp, #20
0c280     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0c284     1C 00 90 5D |  if_ne	jmp	#LR__1008
0c288     A7 12 02 FB | 	rdlong	arg01, fp
0c28c     0C 4E 05 F1 | 	add	fp, #12
0c290     A7 14 02 FB | 	rdlong	arg02, fp
0c294     0C 4E 85 F1 | 	sub	fp, #12
0c298     6C C9 B0 FD | 	call	#__system___float_mul
0c29c     A7 FA 61 FC | 	wrlong	result1, fp
0c2a0     40 00 90 FD | 	jmp	#LR__1009
0c2a4                 | LR__1008
0c2a4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
0c2a4     08 4E 05 F1 | 	add	fp, #8
0c2a8     A7 1E 02 FB | 	rdlong	local01, fp
0c2ac     08 4E 85 F1 | 	sub	fp, #8
0c2b0     1F 1E 0E F2 | 	cmp	local01, #31 wz
0c2b4     14 4E 05 51 |  if_ne	add	fp, #20
0c2b8     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c2bc     14 4E 85 51 |  if_ne	sub	fp, #20
0c2c0     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
0c2c4     A7 10 68 AC |  if_e	wrlong	#8, fp
0c2c8     08 4E 05 A1 |  if_e	add	fp, #8
0c2cc     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c2d0     08 4E 85 A1 |  if_e	sub	fp, #8
0c2d4     A7 12 68 5C |  if_ne	wrlong	#9, fp
0c2d8     08 4E 05 51 |  if_ne	add	fp, #8
0c2dc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0c2e0     08 4E 85 51 |  if_ne	sub	fp, #8
0c2e4                 | LR__1009
0c2e4     A7 12 02 F6 | 	mov	arg01, fp
0c2e8     BC C8 BF FD | 	call	#_push
0c2ec     A7 F0 03 F6 | 	mov	ptra, fp
0c2f0     B2 00 A0 FD | 	call	#popregs_
0c2f4                 | _do_mul_ret
0c2f4     2D 00 64 FD | 	ret
0c2f8                 | 
0c2f8                 | ' 
0c2f8                 | ' sub do_div 
0c2f8                 | _do_div
0c2f8     01 4A 05 F6 | 	mov	COUNT_, #1
0c2fc     A8 00 A0 FD | 	call	#pushregs_
0c300     18 F0 07 F1 | 	add	ptra, #24
0c304     08 C8 BF FD | 	call	#_pop
0c308     FD 62 02 F6 | 	mov	muldivb_, result1
0c30c     FE 60 02 F6 | 	mov	muldiva_, result2
0c310     FF 1E 02 F6 | 	mov	local01, result3
0c314     0C 4E 05 F1 | 	add	fp, #12
0c318     A7 62 62 FC | 	wrlong	muldivb_, fp
0c31c     04 4E 05 F1 | 	add	fp, #4
0c320     A7 60 62 FC | 	wrlong	muldiva_, fp
0c324     04 4E 05 F1 | 	add	fp, #4
0c328     A7 1E 62 FC | 	wrlong	local01, fp
0c32c     14 4E 85 F1 | 	sub	fp, #20
0c330     DC C7 BF FD | 	call	#_pop
0c334     A7 FA 61 FC | 	wrlong	result1, fp
0c338     04 4E 05 F1 | 	add	fp, #4
0c33c     A7 FC 61 FC | 	wrlong	result2, fp
0c340     04 4E 05 F1 | 	add	fp, #4
0c344     A7 FE 61 FC | 	wrlong	result3, fp
0c348                 | ' 
0c348                 | ' t2=pop()
0c348                 | ' t1=pop()
0c348                 | ' 
0c348                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
0c348     08 4E 85 F1 | 	sub	fp, #8
0c34c     1F FE 0D F2 | 	cmp	result3, #31 wz
0c350     14 4E 05 51 |  if_ne	add	fp, #20
0c354     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0c358     14 4E 85 51 |  if_ne	sub	fp, #20
0c35c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0c360     A7 14 68 AC |  if_e	wrlong	#10, fp
0c364     08 4E 05 A1 |  if_e	add	fp, #8
0c368     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c36c     08 4E 85 A1 |  if_e	sub	fp, #8
0c370     90 01 90 AD |  if_e	jmp	#LR__1016
0c374                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0c374     08 4E 05 F1 | 	add	fp, #8
0c378     A7 62 02 FB | 	rdlong	muldivb_, fp
0c37c     08 4E 85 F1 | 	sub	fp, #8
0c380     1E 62 0E F2 | 	cmp	muldivb_, #30 wz
0c384     1C 00 90 5D |  if_ne	jmp	#LR__1010
0c388     08 4E 05 F1 | 	add	fp, #8
0c38c     A7 38 68 FC | 	wrlong	#28, fp
0c390     08 4E 85 F1 | 	sub	fp, #8
0c394     A7 12 02 FB | 	rdlong	arg01, fp
0c398     00 14 06 F6 | 	mov	arg02, #0
0c39c     30 CD B0 FD | 	call	#__system___float_tointeger
0c3a0     A7 FA 61 FC | 	wrlong	result1, fp
0c3a4                 | LR__1010
0c3a4                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0c3a4     14 4E 05 F1 | 	add	fp, #20
0c3a8     A7 62 02 FB | 	rdlong	muldivb_, fp
0c3ac     14 4E 85 F1 | 	sub	fp, #20
0c3b0     1E 62 0E F2 | 	cmp	muldivb_, #30 wz
0c3b4     28 00 90 5D |  if_ne	jmp	#LR__1011
0c3b8     14 4E 05 F1 | 	add	fp, #20
0c3bc     A7 38 68 FC | 	wrlong	#28, fp
0c3c0     08 4E 85 F1 | 	sub	fp, #8
0c3c4     A7 12 02 FB | 	rdlong	arg01, fp
0c3c8     0C 4E 85 F1 | 	sub	fp, #12
0c3cc     00 14 06 F6 | 	mov	arg02, #0
0c3d0     FC CC B0 FD | 	call	#__system___float_tointeger
0c3d4     0C 4E 05 F1 | 	add	fp, #12
0c3d8     A7 FA 61 FC | 	wrlong	result1, fp
0c3dc     0C 4E 85 F1 | 	sub	fp, #12
0c3e0                 | LR__1011
0c3e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
0c3e0     08 4E 05 F1 | 	add	fp, #8
0c3e4     A7 62 02 FB | 	rdlong	muldivb_, fp
0c3e8     08 4E 85 F1 | 	sub	fp, #8
0c3ec     1D 62 0E F2 | 	cmp	muldivb_, #29 wz
0c3f0     14 4E 05 A1 |  if_e	add	fp, #20
0c3f4     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c3f8     14 4E 85 A1 |  if_e	sub	fp, #20
0c3fc     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c400     20 00 90 5D |  if_ne	jmp	#LR__1012
0c404     0C 4E 05 F1 | 	add	fp, #12
0c408     A7 1E 02 FB | 	rdlong	local01, fp
0c40c     0C 4E 85 F1 | 	sub	fp, #12
0c410     A7 62 02 FB | 	rdlong	muldivb_, fp
0c414     0F 63 12 FD | 	qdiv	muldivb_, local01
0c418     18 1E 62 FD | 	getqx	local01
0c41c     A7 1E 62 FC | 	wrlong	local01, fp
0c420     E0 00 90 FD | 	jmp	#LR__1016
0c424                 | LR__1012
0c424                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
0c424     08 4E 05 F1 | 	add	fp, #8
0c428     A7 62 02 FB | 	rdlong	muldivb_, fp
0c42c     08 4E 85 F1 | 	sub	fp, #8
0c430     1D 62 0E F2 | 	cmp	muldivb_, #29 wz
0c434     14 4E 05 A1 |  if_e	add	fp, #20
0c438     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c43c     14 4E 85 A1 |  if_e	sub	fp, #20
0c440     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c444     2C 00 90 5D |  if_ne	jmp	#LR__1013
0c448     0C 4E 05 F1 | 	add	fp, #12
0c44c     A7 1E 02 FB | 	rdlong	local01, fp
0c450     0C 4E 85 F1 | 	sub	fp, #12
0c454     A7 62 02 FB | 	rdlong	muldivb_, fp
0c458     0F 63 12 FD | 	qdiv	muldivb_, local01
0c45c     18 1E 62 FD | 	getqx	local01
0c460     A7 1E 62 FC | 	wrlong	local01, fp
0c464     08 4E 05 F1 | 	add	fp, #8
0c468     A7 38 68 FC | 	wrlong	#28, fp
0c46c     08 4E 85 F1 | 	sub	fp, #8
0c470     90 00 90 FD | 	jmp	#LR__1016
0c474                 | LR__1013
0c474                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
0c474     08 4E 05 F1 | 	add	fp, #8
0c478     A7 62 02 FB | 	rdlong	muldivb_, fp
0c47c     08 4E 85 F1 | 	sub	fp, #8
0c480     1C 62 0E F2 | 	cmp	muldivb_, #28 wz
0c484     14 4E 05 A1 |  if_e	add	fp, #20
0c488     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c48c     14 4E 85 A1 |  if_e	sub	fp, #20
0c490     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c494     1C 00 90 5D |  if_ne	jmp	#LR__1014
0c498     A7 60 02 FB | 	rdlong	muldiva_, fp
0c49c     0C 4E 05 F1 | 	add	fp, #12
0c4a0     A7 62 02 FB | 	rdlong	muldivb_, fp
0c4a4     0C 4E 85 F1 | 	sub	fp, #12
0c4a8     BA 00 A0 FD | 	call	#divide_
0c4ac     A7 62 62 FC | 	wrlong	muldivb_, fp
0c4b0     50 00 90 FD | 	jmp	#LR__1016
0c4b4                 | LR__1014
0c4b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
0c4b4     08 4E 05 F1 | 	add	fp, #8
0c4b8     A7 62 02 FB | 	rdlong	muldivb_, fp
0c4bc     08 4E 85 F1 | 	sub	fp, #8
0c4c0     1C 62 0E F2 | 	cmp	muldivb_, #28 wz
0c4c4     14 4E 05 A1 |  if_e	add	fp, #20
0c4c8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c4cc     14 4E 85 A1 |  if_e	sub	fp, #20
0c4d0     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c4d4     1C 00 90 5D |  if_ne	jmp	#LR__1015
0c4d8     A7 60 02 FB | 	rdlong	muldiva_, fp
0c4dc     0C 4E 05 F1 | 	add	fp, #12
0c4e0     A7 62 02 FB | 	rdlong	muldivb_, fp
0c4e4     0C 4E 85 F1 | 	sub	fp, #12
0c4e8     BA 00 A0 FD | 	call	#divide_
0c4ec     A7 62 62 FC | 	wrlong	muldivb_, fp
0c4f0     10 00 90 FD | 	jmp	#LR__1016
0c4f4                 | LR__1015
0c4f4     A7 16 68 FC | 	wrlong	#11, fp
0c4f8     08 4E 05 F1 | 	add	fp, #8
0c4fc     A7 FE 69 FC | 	wrlong	#255, fp
0c500     08 4E 85 F1 | 	sub	fp, #8
0c504                 | LR__1016
0c504     A7 12 02 F6 | 	mov	arg01, fp
0c508     9C C6 BF FD | 	call	#_push
0c50c     A7 F0 03 F6 | 	mov	ptra, fp
0c510     B2 00 A0 FD | 	call	#popregs_
0c514                 | _do_div_ret
0c514     2D 00 64 FD | 	ret
0c518                 | 
0c518                 | ' 
0c518                 | ' sub do_fdiv 
0c518                 | _do_fdiv
0c518     02 4A 05 F6 | 	mov	COUNT_, #2
0c51c     A8 00 A0 FD | 	call	#pushregs_
0c520     18 F0 07 F1 | 	add	ptra, #24
0c524     E8 C5 BF FD | 	call	#_pop
0c528     FD 14 02 F6 | 	mov	arg02, result1
0c52c     FE 12 02 F6 | 	mov	arg01, result2
0c530     FF 1E 02 F6 | 	mov	local01, result3
0c534     0C 4E 05 F1 | 	add	fp, #12
0c538     A7 14 62 FC | 	wrlong	arg02, fp
0c53c     04 4E 05 F1 | 	add	fp, #4
0c540     A7 12 62 FC | 	wrlong	arg01, fp
0c544     04 4E 05 F1 | 	add	fp, #4
0c548     A7 1E 62 FC | 	wrlong	local01, fp
0c54c     14 4E 85 F1 | 	sub	fp, #20
0c550     BC C5 BF FD | 	call	#_pop
0c554     A7 FA 61 FC | 	wrlong	result1, fp
0c558     04 4E 05 F1 | 	add	fp, #4
0c55c     A7 FC 61 FC | 	wrlong	result2, fp
0c560     04 4E 05 F1 | 	add	fp, #4
0c564     A7 FE 61 FC | 	wrlong	result3, fp
0c568                 | ' 
0c568                 | ' t2=pop()
0c568                 | ' t1=pop()
0c568                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
0c568     08 4E 85 F1 | 	sub	fp, #8
0c56c     1F FE 0D F2 | 	cmp	result3, #31 wz
0c570     14 4E 05 51 |  if_ne	add	fp, #20
0c574     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0c578     14 4E 85 51 |  if_ne	sub	fp, #20
0c57c     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0c580     A7 14 68 AC |  if_e	wrlong	#10, fp
0c584     08 4E 05 A1 |  if_e	add	fp, #8
0c588     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c58c     08 4E 85 A1 |  if_e	sub	fp, #8
0c590     38 01 90 AD |  if_e	jmp	#LR__1025
0c594                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0c594     08 4E 05 F1 | 	add	fp, #8
0c598     A7 14 02 FB | 	rdlong	arg02, fp
0c59c     08 4E 85 F1 | 	sub	fp, #8
0c5a0     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c5a4     28 00 90 5D |  if_ne	jmp	#LR__1020
0c5a8     08 4E 05 F1 | 	add	fp, #8
0c5ac     A7 3C 68 FC | 	wrlong	#30, fp
0c5b0     08 4E 85 F1 | 	sub	fp, #8
0c5b4     A7 12 02 FB | 	rdlong	arg01, fp
0c5b8     09 13 52 F6 | 	abs	arg01, arg01 wc
0c5bc     1F 20 C6 C9 |  if_b	decod	local02, #31
0c5c0     00 20 06 36 |  if_ae	mov	local02, #0
0c5c4     14 C3 B0 FD | 	call	#__system___float_fromuns
0c5c8     10 FB 61 F5 | 	xor	result1, local02
0c5cc     A7 FA 61 FC | 	wrlong	result1, fp
0c5d0                 | LR__1020
0c5d0                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
0c5d0     08 4E 05 F1 | 	add	fp, #8
0c5d4     A7 14 02 FB | 	rdlong	arg02, fp
0c5d8     08 4E 85 F1 | 	sub	fp, #8
0c5dc     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c5e0     18 00 90 5D |  if_ne	jmp	#LR__1021
0c5e4     08 4E 05 F1 | 	add	fp, #8
0c5e8     A7 3C 68 FC | 	wrlong	#30, fp
0c5ec     08 4E 85 F1 | 	sub	fp, #8
0c5f0     A7 12 02 FB | 	rdlong	arg01, fp
0c5f4     E4 C2 B0 FD | 	call	#__system___float_fromuns
0c5f8     A7 FA 61 FC | 	wrlong	result1, fp
0c5fc                 | LR__1021
0c5fc                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0c5fc     14 4E 05 F1 | 	add	fp, #20
0c600     A7 14 02 FB | 	rdlong	arg02, fp
0c604     14 4E 85 F1 | 	sub	fp, #20
0c608     1C 14 0E F2 | 	cmp	arg02, #28 wz
0c60c     34 00 90 5D |  if_ne	jmp	#LR__1022
0c610     14 4E 05 F1 | 	add	fp, #20
0c614     A7 3C 68 FC | 	wrlong	#30, fp
0c618     08 4E 85 F1 | 	sub	fp, #8
0c61c     A7 12 02 FB | 	rdlong	arg01, fp
0c620     0C 4E 85 F1 | 	sub	fp, #12
0c624     09 13 52 F6 | 	abs	arg01, arg01 wc
0c628     1F 20 C6 C9 |  if_b	decod	local02, #31
0c62c     00 20 06 36 |  if_ae	mov	local02, #0
0c630     A8 C2 B0 FD | 	call	#__system___float_fromuns
0c634     10 FB 61 F5 | 	xor	result1, local02
0c638     0C 4E 05 F1 | 	add	fp, #12
0c63c     A7 FA 61 FC | 	wrlong	result1, fp
0c640     0C 4E 85 F1 | 	sub	fp, #12
0c644                 | LR__1022
0c644                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0c644     14 4E 05 F1 | 	add	fp, #20
0c648     A7 14 02 FB | 	rdlong	arg02, fp
0c64c     14 4E 85 F1 | 	sub	fp, #20
0c650     1D 14 0E F2 | 	cmp	arg02, #29 wz
0c654     24 00 90 5D |  if_ne	jmp	#LR__1023
0c658     14 4E 05 F1 | 	add	fp, #20
0c65c     A7 3C 68 FC | 	wrlong	#30, fp
0c660     08 4E 85 F1 | 	sub	fp, #8
0c664     A7 12 02 FB | 	rdlong	arg01, fp
0c668     0C 4E 85 F1 | 	sub	fp, #12
0c66c     6C C2 B0 FD | 	call	#__system___float_fromuns
0c670     0C 4E 05 F1 | 	add	fp, #12
0c674     A7 FA 61 FC | 	wrlong	result1, fp
0c678     0C 4E 85 F1 | 	sub	fp, #12
0c67c                 | LR__1023
0c67c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
0c67c     08 4E 05 F1 | 	add	fp, #8
0c680     A7 14 02 FB | 	rdlong	arg02, fp
0c684     08 4E 85 F1 | 	sub	fp, #8
0c688     1E 14 0E F2 | 	cmp	arg02, #30 wz
0c68c     14 4E 05 A1 |  if_e	add	fp, #20
0c690     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c694     14 4E 85 A1 |  if_e	sub	fp, #20
0c698     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0c69c     1C 00 90 5D |  if_ne	jmp	#LR__1024
0c6a0     A7 12 02 FB | 	rdlong	arg01, fp
0c6a4     0C 4E 05 F1 | 	add	fp, #12
0c6a8     A7 14 02 FB | 	rdlong	arg02, fp
0c6ac     0C 4E 85 F1 | 	sub	fp, #12
0c6b0     58 C7 B0 FD | 	call	#__system___float_div
0c6b4     A7 FA 61 FC | 	wrlong	result1, fp
0c6b8     10 00 90 FD | 	jmp	#LR__1025
0c6bc                 | LR__1024
0c6bc     A7 16 68 FC | 	wrlong	#11, fp
0c6c0     08 4E 05 F1 | 	add	fp, #8
0c6c4     A7 FE 69 FC | 	wrlong	#255, fp
0c6c8     08 4E 85 F1 | 	sub	fp, #8
0c6cc                 | LR__1025
0c6cc     A7 12 02 F6 | 	mov	arg01, fp
0c6d0     D4 C4 BF FD | 	call	#_push
0c6d4     A7 F0 03 F6 | 	mov	ptra, fp
0c6d8     B2 00 A0 FD | 	call	#popregs_
0c6dc                 | _do_fdiv_ret
0c6dc     2D 00 64 FD | 	ret
0c6e0                 | 
0c6e0                 | ' 
0c6e0                 | ' 
0c6e0                 | ' sub do_mod 
0c6e0                 | _do_mod
0c6e0     01 4A 05 F6 | 	mov	COUNT_, #1
0c6e4     A8 00 A0 FD | 	call	#pushregs_
0c6e8     18 F0 07 F1 | 	add	ptra, #24
0c6ec     20 C4 BF FD | 	call	#_pop
0c6f0     FD 62 02 F6 | 	mov	muldivb_, result1
0c6f4     FE 60 02 F6 | 	mov	muldiva_, result2
0c6f8     FF 1E 02 F6 | 	mov	local01, result3
0c6fc     0C 4E 05 F1 | 	add	fp, #12
0c700     A7 62 62 FC | 	wrlong	muldivb_, fp
0c704     04 4E 05 F1 | 	add	fp, #4
0c708     A7 60 62 FC | 	wrlong	muldiva_, fp
0c70c     04 4E 05 F1 | 	add	fp, #4
0c710     A7 1E 62 FC | 	wrlong	local01, fp
0c714     14 4E 85 F1 | 	sub	fp, #20
0c718     F4 C3 BF FD | 	call	#_pop
0c71c     A7 FA 61 FC | 	wrlong	result1, fp
0c720     04 4E 05 F1 | 	add	fp, #4
0c724     A7 FC 61 FC | 	wrlong	result2, fp
0c728     04 4E 05 F1 | 	add	fp, #4
0c72c     A7 FE 61 FC | 	wrlong	result3, fp
0c730                 | ' 
0c730                 | ' t2=pop()
0c730                 | ' t1=pop()
0c730                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
0c730     08 4E 85 F1 | 	sub	fp, #8
0c734     1F FE 0D F2 | 	cmp	result3, #31 wz
0c738     14 4E 05 51 |  if_ne	add	fp, #20
0c73c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
0c740     14 4E 85 51 |  if_ne	sub	fp, #20
0c744     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
0c748     A7 14 68 AC |  if_e	wrlong	#10, fp
0c74c     08 4E 05 A1 |  if_e	add	fp, #8
0c750     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c754     08 4E 85 A1 |  if_e	sub	fp, #8
0c758     90 01 90 AD |  if_e	jmp	#LR__1036
0c75c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
0c75c     08 4E 05 F1 | 	add	fp, #8
0c760     A7 62 02 FB | 	rdlong	muldivb_, fp
0c764     08 4E 85 F1 | 	sub	fp, #8
0c768     1E 62 0E F2 | 	cmp	muldivb_, #30 wz
0c76c     1C 00 90 5D |  if_ne	jmp	#LR__1030
0c770     08 4E 05 F1 | 	add	fp, #8
0c774     A7 38 68 FC | 	wrlong	#28, fp
0c778     08 4E 85 F1 | 	sub	fp, #8
0c77c     A7 12 02 FB | 	rdlong	arg01, fp
0c780     00 14 06 F6 | 	mov	arg02, #0
0c784     48 C9 B0 FD | 	call	#__system___float_tointeger
0c788     A7 FA 61 FC | 	wrlong	result1, fp
0c78c                 | LR__1030
0c78c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
0c78c     14 4E 05 F1 | 	add	fp, #20
0c790     A7 62 02 FB | 	rdlong	muldivb_, fp
0c794     14 4E 85 F1 | 	sub	fp, #20
0c798     1E 62 0E F2 | 	cmp	muldivb_, #30 wz
0c79c     28 00 90 5D |  if_ne	jmp	#LR__1031
0c7a0     14 4E 05 F1 | 	add	fp, #20
0c7a4     A7 38 68 FC | 	wrlong	#28, fp
0c7a8     08 4E 85 F1 | 	sub	fp, #8
0c7ac     A7 12 02 FB | 	rdlong	arg01, fp
0c7b0     0C 4E 85 F1 | 	sub	fp, #12
0c7b4     00 14 06 F6 | 	mov	arg02, #0
0c7b8     14 C9 B0 FD | 	call	#__system___float_tointeger
0c7bc     0C 4E 05 F1 | 	add	fp, #12
0c7c0     A7 FA 61 FC | 	wrlong	result1, fp
0c7c4     0C 4E 85 F1 | 	sub	fp, #12
0c7c8                 | LR__1031
0c7c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
0c7c8     08 4E 05 F1 | 	add	fp, #8
0c7cc     A7 62 02 FB | 	rdlong	muldivb_, fp
0c7d0     08 4E 85 F1 | 	sub	fp, #8
0c7d4     1D 62 0E F2 | 	cmp	muldivb_, #29 wz
0c7d8     14 4E 05 A1 |  if_e	add	fp, #20
0c7dc     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c7e0     14 4E 85 A1 |  if_e	sub	fp, #20
0c7e4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c7e8     20 00 90 5D |  if_ne	jmp	#LR__1032
0c7ec     0C 4E 05 F1 | 	add	fp, #12
0c7f0     A7 1E 02 FB | 	rdlong	local01, fp
0c7f4     0C 4E 85 F1 | 	sub	fp, #12
0c7f8     A7 62 02 FB | 	rdlong	muldivb_, fp
0c7fc     0F 63 12 FD | 	qdiv	muldivb_, local01
0c800     19 1E 62 FD | 	getqy	local01
0c804     A7 1E 62 FC | 	wrlong	local01, fp
0c808     E0 00 90 FD | 	jmp	#LR__1036
0c80c                 | LR__1032
0c80c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
0c80c     08 4E 05 F1 | 	add	fp, #8
0c810     A7 62 02 FB | 	rdlong	muldivb_, fp
0c814     08 4E 85 F1 | 	sub	fp, #8
0c818     1D 62 0E F2 | 	cmp	muldivb_, #29 wz
0c81c     14 4E 05 A1 |  if_e	add	fp, #20
0c820     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c824     14 4E 85 A1 |  if_e	sub	fp, #20
0c828     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c82c     2C 00 90 5D |  if_ne	jmp	#LR__1033
0c830     0C 4E 05 F1 | 	add	fp, #12
0c834     A7 1E 02 FB | 	rdlong	local01, fp
0c838     0C 4E 85 F1 | 	sub	fp, #12
0c83c     A7 62 02 FB | 	rdlong	muldivb_, fp
0c840     0F 63 12 FD | 	qdiv	muldivb_, local01
0c844     19 1E 62 FD | 	getqy	local01
0c848     A7 1E 62 FC | 	wrlong	local01, fp
0c84c     08 4E 05 F1 | 	add	fp, #8
0c850     A7 38 68 FC | 	wrlong	#28, fp
0c854     08 4E 85 F1 | 	sub	fp, #8
0c858     90 00 90 FD | 	jmp	#LR__1036
0c85c                 | LR__1033
0c85c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
0c85c     08 4E 05 F1 | 	add	fp, #8
0c860     A7 62 02 FB | 	rdlong	muldivb_, fp
0c864     08 4E 85 F1 | 	sub	fp, #8
0c868     1C 62 0E F2 | 	cmp	muldivb_, #28 wz
0c86c     14 4E 05 A1 |  if_e	add	fp, #20
0c870     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c874     14 4E 85 A1 |  if_e	sub	fp, #20
0c878     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
0c87c     1C 00 90 5D |  if_ne	jmp	#LR__1034
0c880     A7 60 02 FB | 	rdlong	muldiva_, fp
0c884     0C 4E 05 F1 | 	add	fp, #12
0c888     A7 62 02 FB | 	rdlong	muldivb_, fp
0c88c     0C 4E 85 F1 | 	sub	fp, #12
0c890     BA 00 A0 FD | 	call	#divide_
0c894     A7 60 62 FC | 	wrlong	muldiva_, fp
0c898     50 00 90 FD | 	jmp	#LR__1036
0c89c                 | LR__1034
0c89c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
0c89c     08 4E 05 F1 | 	add	fp, #8
0c8a0     A7 62 02 FB | 	rdlong	muldivb_, fp
0c8a4     08 4E 85 F1 | 	sub	fp, #8
0c8a8     1C 62 0E F2 | 	cmp	muldivb_, #28 wz
0c8ac     14 4E 05 A1 |  if_e	add	fp, #20
0c8b0     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c8b4     14 4E 85 A1 |  if_e	sub	fp, #20
0c8b8     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
0c8bc     1C 00 90 5D |  if_ne	jmp	#LR__1035
0c8c0     A7 60 02 FB | 	rdlong	muldiva_, fp
0c8c4     0C 4E 05 F1 | 	add	fp, #12
0c8c8     A7 62 02 FB | 	rdlong	muldivb_, fp
0c8cc     0C 4E 85 F1 | 	sub	fp, #12
0c8d0     BA 00 A0 FD | 	call	#divide_
0c8d4     A7 60 62 FC | 	wrlong	muldiva_, fp
0c8d8     10 00 90 FD | 	jmp	#LR__1036
0c8dc                 | LR__1035
0c8dc     A7 16 68 FC | 	wrlong	#11, fp
0c8e0     08 4E 05 F1 | 	add	fp, #8
0c8e4     A7 FE 69 FC | 	wrlong	#255, fp
0c8e8     08 4E 85 F1 | 	sub	fp, #8
0c8ec                 | LR__1036
0c8ec     A7 12 02 F6 | 	mov	arg01, fp
0c8f0     B4 C2 BF FD | 	call	#_push
0c8f4     A7 F0 03 F6 | 	mov	ptra, fp
0c8f8     B2 00 A0 FD | 	call	#popregs_
0c8fc                 | _do_mod_ret
0c8fc     2D 00 64 FD | 	ret
0c900                 | 
0c900                 | ' 
0c900                 | ' sub do_shl 
0c900                 | _do_shl
0c900     03 4A 05 F6 | 	mov	COUNT_, #3
0c904     A8 00 A0 FD | 	call	#pushregs_
0c908     18 F0 07 F1 | 	add	ptra, #24
0c90c     00 C2 BF FD | 	call	#_pop
0c910     FD 12 02 F6 | 	mov	arg01, result1
0c914     FE 1E 02 F6 | 	mov	local01, result2
0c918     FF 20 02 F6 | 	mov	local02, result3
0c91c     0C 4E 05 F1 | 	add	fp, #12
0c920     A7 12 62 FC | 	wrlong	arg01, fp
0c924     04 4E 05 F1 | 	add	fp, #4
0c928     A7 1E 62 FC | 	wrlong	local01, fp
0c92c     04 4E 05 F1 | 	add	fp, #4
0c930     A7 20 62 FC | 	wrlong	local02, fp
0c934     14 4E 85 F1 | 	sub	fp, #20
0c938     D4 C1 BF FD | 	call	#_pop
0c93c     FF 22 02 F6 | 	mov	local03, result3
0c940     A7 FA 61 FC | 	wrlong	result1, fp
0c944     04 4E 05 F1 | 	add	fp, #4
0c948     A7 FC 61 FC | 	wrlong	result2, fp
0c94c     04 4E 05 F1 | 	add	fp, #4
0c950     A7 22 62 FC | 	wrlong	local03, fp
0c954                 | ' 
0c954                 | ' t2=pop()
0c954                 | ' t1=pop()
0c954                 | ' 
0c954                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0c954     08 4E 85 F1 | 	sub	fp, #8
0c958     1C 22 0E F2 | 	cmp	local03, #28 wz
0c95c     A7 22 02 AB |  if_e	rdlong	local03, fp
0c960     A7 22 62 AC |  if_e	wrlong	local03, fp
0c964     08 4E 05 A1 |  if_e	add	fp, #8
0c968     A7 3A 68 AC |  if_e	wrlong	#29, fp
0c96c     08 4E 85 A1 |  if_e	sub	fp, #8
0c970                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0c970     14 4E 05 F1 | 	add	fp, #20
0c974     A7 22 02 FB | 	rdlong	local03, fp
0c978     14 4E 85 F1 | 	sub	fp, #20
0c97c     1C 22 0E F2 | 	cmp	local03, #28 wz
0c980     18 00 90 5D |  if_ne	jmp	#LR__1040
0c984     0C 4E 05 F1 | 	add	fp, #12
0c988     A7 22 02 FB | 	rdlong	local03, fp
0c98c     A7 22 62 FC | 	wrlong	local03, fp
0c990     08 4E 05 F1 | 	add	fp, #8
0c994     A7 3A 68 FC | 	wrlong	#29, fp
0c998     14 4E 85 F1 | 	sub	fp, #20
0c99c                 | LR__1040
0c99c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
0c99c     08 4E 05 F1 | 	add	fp, #8
0c9a0     A7 22 02 FB | 	rdlong	local03, fp
0c9a4     08 4E 85 F1 | 	sub	fp, #8
0c9a8     1F 22 0E F2 | 	cmp	local03, #31 wz
0c9ac     14 4E 05 51 |  if_ne	add	fp, #20
0c9b0     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c9b4     14 4E 85 51 |  if_ne	sub	fp, #20
0c9b8     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0c9bc     08 4E 05 51 |  if_ne	add	fp, #8
0c9c0     A7 22 02 5B |  if_ne	rdlong	local03, fp
0c9c4     08 4E 85 51 |  if_ne	sub	fp, #8
0c9c8     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0c9cc     14 4E 05 51 |  if_ne	add	fp, #20
0c9d0     14 4E 85 51 |  if_ne	sub	fp, #20
0c9d4     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0c9d8     A7 0C 68 AC |  if_e	wrlong	#6, fp
0c9dc     08 4E 05 A1 |  if_e	add	fp, #8
0c9e0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0c9e4     08 4E 85 A1 |  if_e	sub	fp, #8
0c9e8     18 00 90 AD |  if_e	jmp	#LR__1041
0c9ec     A7 22 02 FB | 	rdlong	local03, fp
0c9f0     0C 4E 05 F1 | 	add	fp, #12
0c9f4     A7 1E 02 FB | 	rdlong	local01, fp
0c9f8     0C 4E 85 F1 | 	sub	fp, #12
0c9fc     0F 23 62 F0 | 	shl	local03, local01
0ca00     A7 22 62 FC | 	wrlong	local03, fp
0ca04                 | LR__1041
0ca04     A7 12 02 F6 | 	mov	arg01, fp
0ca08     9C C1 BF FD | 	call	#_push
0ca0c     A7 F0 03 F6 | 	mov	ptra, fp
0ca10     B2 00 A0 FD | 	call	#popregs_
0ca14                 | _do_shl_ret
0ca14     2D 00 64 FD | 	ret
0ca18                 | 
0ca18                 | ' 
0ca18                 | ' sub do_shr 
0ca18                 | _do_shr
0ca18     03 4A 05 F6 | 	mov	COUNT_, #3
0ca1c     A8 00 A0 FD | 	call	#pushregs_
0ca20     18 F0 07 F1 | 	add	ptra, #24
0ca24     E8 C0 BF FD | 	call	#_pop
0ca28     FD 12 02 F6 | 	mov	arg01, result1
0ca2c     FE 1E 02 F6 | 	mov	local01, result2
0ca30     FF 20 02 F6 | 	mov	local02, result3
0ca34     0C 4E 05 F1 | 	add	fp, #12
0ca38     A7 12 62 FC | 	wrlong	arg01, fp
0ca3c     04 4E 05 F1 | 	add	fp, #4
0ca40     A7 1E 62 FC | 	wrlong	local01, fp
0ca44     04 4E 05 F1 | 	add	fp, #4
0ca48     A7 20 62 FC | 	wrlong	local02, fp
0ca4c     14 4E 85 F1 | 	sub	fp, #20
0ca50     BC C0 BF FD | 	call	#_pop
0ca54     FF 22 02 F6 | 	mov	local03, result3
0ca58     A7 FA 61 FC | 	wrlong	result1, fp
0ca5c     04 4E 05 F1 | 	add	fp, #4
0ca60     A7 FC 61 FC | 	wrlong	result2, fp
0ca64     04 4E 05 F1 | 	add	fp, #4
0ca68     A7 22 62 FC | 	wrlong	local03, fp
0ca6c                 | ' t2=pop()
0ca6c                 | ' t1=pop()
0ca6c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
0ca6c     08 4E 85 F1 | 	sub	fp, #8
0ca70     1C 22 0E F2 | 	cmp	local03, #28 wz
0ca74     A7 22 02 AB |  if_e	rdlong	local03, fp
0ca78     A7 22 62 AC |  if_e	wrlong	local03, fp
0ca7c     08 4E 05 A1 |  if_e	add	fp, #8
0ca80     A7 3A 68 AC |  if_e	wrlong	#29, fp
0ca84     08 4E 85 A1 |  if_e	sub	fp, #8
0ca88                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
0ca88     14 4E 05 F1 | 	add	fp, #20
0ca8c     A7 22 02 FB | 	rdlong	local03, fp
0ca90     14 4E 85 F1 | 	sub	fp, #20
0ca94     1C 22 0E F2 | 	cmp	local03, #28 wz
0ca98     18 00 90 5D |  if_ne	jmp	#LR__1050
0ca9c     0C 4E 05 F1 | 	add	fp, #12
0caa0     A7 22 02 FB | 	rdlong	local03, fp
0caa4     A7 22 62 FC | 	wrlong	local03, fp
0caa8     08 4E 05 F1 | 	add	fp, #8
0caac     A7 3A 68 FC | 	wrlong	#29, fp
0cab0     14 4E 85 F1 | 	sub	fp, #20
0cab4                 | LR__1050
0cab4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
0cab4     08 4E 05 F1 | 	add	fp, #8
0cab8     A7 22 02 FB | 	rdlong	local03, fp
0cabc     08 4E 85 F1 | 	sub	fp, #8
0cac0     1F 22 0E F2 | 	cmp	local03, #31 wz
0cac4     14 4E 05 51 |  if_ne	add	fp, #20
0cac8     A7 20 02 5B |  if_ne	rdlong	local02, fp
0cacc     14 4E 85 51 |  if_ne	sub	fp, #20
0cad0     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
0cad4     08 4E 05 51 |  if_ne	add	fp, #8
0cad8     A7 22 02 5B |  if_ne	rdlong	local03, fp
0cadc     08 4E 85 51 |  if_ne	sub	fp, #8
0cae0     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
0cae4     14 4E 05 51 |  if_ne	add	fp, #20
0cae8     14 4E 85 51 |  if_ne	sub	fp, #20
0caec     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
0caf0     A7 0C 68 AC |  if_e	wrlong	#6, fp
0caf4     08 4E 05 A1 |  if_e	add	fp, #8
0caf8     A7 FE 69 AC |  if_e	wrlong	#255, fp
0cafc     08 4E 85 A1 |  if_e	sub	fp, #8
0cb00     18 00 90 AD |  if_e	jmp	#LR__1051
0cb04     A7 22 02 FB | 	rdlong	local03, fp
0cb08     0C 4E 05 F1 | 	add	fp, #12
0cb0c     A7 1E 02 FB | 	rdlong	local01, fp
0cb10     0C 4E 85 F1 | 	sub	fp, #12
0cb14     0F 23 42 F0 | 	shr	local03, local01
0cb18     A7 22 62 FC | 	wrlong	local03, fp
0cb1c                 | LR__1051
0cb1c     A7 12 02 F6 | 	mov	arg01, fp
0cb20     84 C0 BF FD | 	call	#_push
0cb24     A7 F0 03 F6 | 	mov	ptra, fp
0cb28     B2 00 A0 FD | 	call	#popregs_
0cb2c                 | _do_shr_ret
0cb2c     2D 00 64 FD | 	ret
0cb30                 | 
0cb30                 | ' 
0cb30                 | ' sub do_power 
0cb30                 | _do_power
0cb30     02 4A 05 F6 | 	mov	COUNT_, #2
0cb34     A8 00 A0 FD | 	call	#pushregs_
0cb38     18 F0 07 F1 | 	add	ptra, #24
0cb3c     D0 BF BF FD | 	call	#_pop
0cb40     FD 14 02 F6 | 	mov	arg02, result1
0cb44     FE 12 02 F6 | 	mov	arg01, result2
0cb48     FF 1E 02 F6 | 	mov	local01, result3
0cb4c     0C 4E 05 F1 | 	add	fp, #12
0cb50     A7 14 62 FC | 	wrlong	arg02, fp
0cb54     04 4E 05 F1 | 	add	fp, #4
0cb58     A7 12 62 FC | 	wrlong	arg01, fp
0cb5c     04 4E 05 F1 | 	add	fp, #4
0cb60     A7 1E 62 FC | 	wrlong	local01, fp
0cb64     14 4E 85 F1 | 	sub	fp, #20
0cb68     A4 BF BF FD | 	call	#_pop
0cb6c     A7 FA 61 FC | 	wrlong	result1, fp
0cb70     04 4E 05 F1 | 	add	fp, #4
0cb74     A7 FC 61 FC | 	wrlong	result2, fp
0cb78     04 4E 05 F1 | 	add	fp, #4
0cb7c     A7 FE 61 FC | 	wrlong	result3, fp
0cb80                 | ' t2=pop()
0cb80                 | ' t1=pop()
0cb80                 | ' 
0cb80                 | ' 
0cb80                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
0cb80     08 4E 85 F1 | 	sub	fp, #8
0cb84     1F FE 0D F2 | 	cmp	result3, #31 wz
0cb88     14 4E 05 51 |  if_ne	add	fp, #20
0cb8c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0cb90     14 4E 85 51 |  if_ne	sub	fp, #20
0cb94     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
0cb98     A7 18 68 AC |  if_e	wrlong	#12, fp
0cb9c     08 4E 05 A1 |  if_e	add	fp, #8
0cba0     A7 FE 69 AC |  if_e	wrlong	#255, fp
0cba4     08 4E 85 A1 |  if_e	sub	fp, #8
0cba8     38 01 90 AD |  if_e	jmp	#LR__1065
0cbac                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
0cbac     08 4E 05 F1 | 	add	fp, #8
0cbb0     A7 14 02 FB | 	rdlong	arg02, fp
0cbb4     08 4E 85 F1 | 	sub	fp, #8
0cbb8     1C 14 0E F2 | 	cmp	arg02, #28 wz
0cbbc     28 00 90 5D |  if_ne	jmp	#LR__1060
0cbc0     08 4E 05 F1 | 	add	fp, #8
0cbc4     A7 3C 68 FC | 	wrlong	#30, fp
0cbc8     08 4E 85 F1 | 	sub	fp, #8
0cbcc     A7 12 02 FB | 	rdlong	arg01, fp
0cbd0     09 13 52 F6 | 	abs	arg01, arg01 wc
0cbd4     1F 20 C6 C9 |  if_b	decod	local02, #31
0cbd8     00 20 06 36 |  if_ae	mov	local02, #0
0cbdc     FC BC B0 FD | 	call	#__system___float_fromuns
0cbe0     10 FB 61 F5 | 	xor	result1, local02
0cbe4     A7 FA 61 FC | 	wrlong	result1, fp
0cbe8                 | LR__1060
0cbe8                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
0cbe8     08 4E 05 F1 | 	add	fp, #8
0cbec     A7 14 02 FB | 	rdlong	arg02, fp
0cbf0     08 4E 85 F1 | 	sub	fp, #8
0cbf4     1D 14 0E F2 | 	cmp	arg02, #29 wz
0cbf8     18 00 90 5D |  if_ne	jmp	#LR__1061
0cbfc     08 4E 05 F1 | 	add	fp, #8
0cc00     A7 3C 68 FC | 	wrlong	#30, fp
0cc04     08 4E 85 F1 | 	sub	fp, #8
0cc08     A7 12 02 FB | 	rdlong	arg01, fp
0cc0c     CC BC B0 FD | 	call	#__system___float_fromuns
0cc10     A7 FA 61 FC | 	wrlong	result1, fp
0cc14                 | LR__1061
0cc14                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
0cc14     14 4E 05 F1 | 	add	fp, #20
0cc18     A7 14 02 FB | 	rdlong	arg02, fp
0cc1c     14 4E 85 F1 | 	sub	fp, #20
0cc20     1C 14 0E F2 | 	cmp	arg02, #28 wz
0cc24     34 00 90 5D |  if_ne	jmp	#LR__1062
0cc28     14 4E 05 F1 | 	add	fp, #20
0cc2c     A7 3C 68 FC | 	wrlong	#30, fp
0cc30     08 4E 85 F1 | 	sub	fp, #8
0cc34     A7 12 02 FB | 	rdlong	arg01, fp
0cc38     0C 4E 85 F1 | 	sub	fp, #12
0cc3c     09 13 52 F6 | 	abs	arg01, arg01 wc
0cc40     1F 20 C6 C9 |  if_b	decod	local02, #31
0cc44     00 20 06 36 |  if_ae	mov	local02, #0
0cc48     90 BC B0 FD | 	call	#__system___float_fromuns
0cc4c     10 FB 61 F5 | 	xor	result1, local02
0cc50     0C 4E 05 F1 | 	add	fp, #12
0cc54     A7 FA 61 FC | 	wrlong	result1, fp
0cc58     0C 4E 85 F1 | 	sub	fp, #12
0cc5c                 | LR__1062
0cc5c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
0cc5c     14 4E 05 F1 | 	add	fp, #20
0cc60     A7 14 02 FB | 	rdlong	arg02, fp
0cc64     14 4E 85 F1 | 	sub	fp, #20
0cc68     1D 14 0E F2 | 	cmp	arg02, #29 wz
0cc6c     24 00 90 5D |  if_ne	jmp	#LR__1063
0cc70     14 4E 05 F1 | 	add	fp, #20
0cc74     A7 3C 68 FC | 	wrlong	#30, fp
0cc78     08 4E 85 F1 | 	sub	fp, #8
0cc7c     A7 12 02 FB | 	rdlong	arg01, fp
0cc80     0C 4E 85 F1 | 	sub	fp, #12
0cc84     54 BC B0 FD | 	call	#__system___float_fromuns
0cc88     0C 4E 05 F1 | 	add	fp, #12
0cc8c     A7 FA 61 FC | 	wrlong	result1, fp
0cc90     0C 4E 85 F1 | 	sub	fp, #12
0cc94                 | LR__1063
0cc94                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
0cc94     08 4E 05 F1 | 	add	fp, #8
0cc98     A7 14 02 FB | 	rdlong	arg02, fp
0cc9c     08 4E 85 F1 | 	sub	fp, #8
0cca0     1E 14 0E F2 | 	cmp	arg02, #30 wz
0cca4     14 4E 05 A1 |  if_e	add	fp, #20
0cca8     A7 1E 02 AB |  if_e	rdlong	local01, fp
0ccac     14 4E 85 A1 |  if_e	sub	fp, #20
0ccb0     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
0ccb4     1C 00 90 5D |  if_ne	jmp	#LR__1064
0ccb8     A7 12 02 FB | 	rdlong	arg01, fp
0ccbc     0C 4E 05 F1 | 	add	fp, #12
0ccc0     A7 14 02 FB | 	rdlong	arg02, fp
0ccc4     0C 4E 85 F1 | 	sub	fp, #12
0ccc8     A8 CB B0 FD | 	call	#__system____builtin_powf
0cccc     A7 FA 61 FC | 	wrlong	result1, fp
0ccd0     10 00 90 FD | 	jmp	#LR__1065
0ccd4                 | LR__1064
0ccd4     A7 1A 68 FC | 	wrlong	#13, fp
0ccd8     08 4E 05 F1 | 	add	fp, #8
0ccdc     A7 FE 69 FC | 	wrlong	#255, fp
0cce0     08 4E 85 F1 | 	sub	fp, #8
0cce4                 | LR__1065
0cce4     A7 12 02 F6 | 	mov	arg01, fp
0cce8     BC BE BF FD | 	call	#_push
0ccec     A7 F0 03 F6 | 	mov	ptra, fp
0ccf0     B2 00 A0 FD | 	call	#popregs_
0ccf4                 | _do_power_ret
0ccf4     2D 00 64 FD | 	ret
0ccf8                 | 
0ccf8                 | ' 
0ccf8                 | ' 
0ccf8                 | ' sub do_eq
0ccf8                 | _do_eq
0ccf8     05 4A 05 F6 | 	mov	COUNT_, #5
0ccfc     A8 00 A0 FD | 	call	#pushregs_
0cd00     18 F0 07 F1 | 	add	ptra, #24
0cd04     08 BE BF FD | 	call	#_pop
0cd08     FD 1E 02 F6 | 	mov	local01, result1
0cd0c     FE 20 02 F6 | 	mov	local02, result2
0cd10     FF 22 02 F6 | 	mov	local03, result3
0cd14     0C 4E 05 F1 | 	add	fp, #12
0cd18     A7 1E 62 FC | 	wrlong	local01, fp
0cd1c     04 4E 05 F1 | 	add	fp, #4
0cd20     A7 20 62 FC | 	wrlong	local02, fp
0cd24     04 4E 05 F1 | 	add	fp, #4
0cd28     A7 22 62 FC | 	wrlong	local03, fp
0cd2c     14 4E 85 F1 | 	sub	fp, #20
0cd30     DC BD BF FD | 	call	#_pop
0cd34     FF 22 02 F6 | 	mov	local03, result3
0cd38     A7 FA 61 FC | 	wrlong	result1, fp
0cd3c     04 4E 05 F1 | 	add	fp, #4
0cd40     A7 FC 61 FC | 	wrlong	result2, fp
0cd44     04 4E 05 F1 | 	add	fp, #4
0cd48     A7 22 62 FC | 	wrlong	local03, fp
0cd4c                 | ' t2=pop()
0cd4c                 | ' t1=pop()
0cd4c                 | ' 
0cd4c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
0cd4c     08 4E 85 F1 | 	sub	fp, #8
0cd50     1F 22 0E F2 | 	cmp	local03, #31 wz
0cd54     14 4E 05 A1 |  if_e	add	fp, #20
0cd58     A7 24 02 AB |  if_e	rdlong	local04, fp
0cd5c     14 4E 85 A1 |  if_e	sub	fp, #20
0cd60     12 23 02 A6 |  if_e	mov	local03, local04
0cd64     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0cd68     28 00 90 5D |  if_ne	jmp	#LR__1070
0cd6c     00 1E 06 F6 | 	mov	local01, #0
0cd70     A7 12 02 FB | 	rdlong	arg01, fp
0cd74     0C 4E 05 F1 | 	add	fp, #12
0cd78     A7 14 02 FB | 	rdlong	arg02, fp
0cd7c     0C 4E 85 F1 | 	sub	fp, #12
0cd80     9C 95 B0 FD | 	call	#__system___string_cmp
0cd84     00 FA 0D F2 | 	cmp	result1, #0 wz
0cd88     00 1E 26 A6 |  if_e	not	local01, #0
0cd8c     A7 1E 62 FC | 	wrlong	local01, fp
0cd90     1C 04 90 FD | 	jmp	#LR__1083
0cd94                 | LR__1070
0cd94                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
0cd94     08 4E 05 F1 | 	add	fp, #8
0cd98     A7 1E 02 FB | 	rdlong	local01, fp
0cd9c     08 4E 85 F1 | 	sub	fp, #8
0cda0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cda4     14 4E 05 A1 |  if_e	add	fp, #20
0cda8     A7 24 02 AB |  if_e	rdlong	local04, fp
0cdac     14 4E 85 A1 |  if_e	sub	fp, #20
0cdb0     12 23 02 A6 |  if_e	mov	local03, local04
0cdb4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cdb8     2C 00 90 5D |  if_ne	jmp	#LR__1071
0cdbc     00 1E 06 F6 | 	mov	local01, #0
0cdc0     A7 12 02 FB | 	rdlong	arg01, fp
0cdc4     0C 4E 05 F1 | 	add	fp, #12
0cdc8     A7 14 02 FB | 	rdlong	arg02, fp
0cdcc     0C 4E 85 F1 | 	sub	fp, #12
0cdd0     01 16 06 F6 | 	mov	arg03, #1
0cdd4     64 C2 B0 FD | 	call	#__system___float_cmp
0cdd8     00 FA 0D F2 | 	cmp	result1, #0 wz
0cddc     00 1E 26 A6 |  if_e	not	local01, #0
0cde0     A7 1E 62 FC | 	wrlong	local01, fp
0cde4     C8 03 90 FD | 	jmp	#LR__1083
0cde8                 | LR__1071
0cde8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
0cde8     08 4E 05 F1 | 	add	fp, #8
0cdec     A7 1E 02 FB | 	rdlong	local01, fp
0cdf0     08 4E 85 F1 | 	sub	fp, #8
0cdf4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0cdf8     14 4E 05 A1 |  if_e	add	fp, #20
0cdfc     A7 24 02 AB |  if_e	rdlong	local04, fp
0ce00     14 4E 85 A1 |  if_e	sub	fp, #20
0ce04     12 23 02 A6 |  if_e	mov	local03, local04
0ce08     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ce0c     48 00 90 5D |  if_ne	jmp	#LR__1072
0ce10     00 1E 06 F6 | 	mov	local01, #0
0ce14     A7 20 02 FB | 	rdlong	local02, fp
0ce18     0C 4E 05 F1 | 	add	fp, #12
0ce1c     A7 12 02 FB | 	rdlong	arg01, fp
0ce20     0C 4E 85 F1 | 	sub	fp, #12
0ce24     09 13 52 F6 | 	abs	arg01, arg01 wc
0ce28     1F 26 C6 C9 |  if_b	decod	local05, #31
0ce2c     00 26 06 36 |  if_ae	mov	local05, #0
0ce30     A8 BA B0 FD | 	call	#__system___float_fromuns
0ce34     13 FB 61 F5 | 	xor	result1, local05
0ce38     FD 14 02 F6 | 	mov	arg02, result1
0ce3c     10 13 02 F6 | 	mov	arg01, local02
0ce40     01 16 06 F6 | 	mov	arg03, #1
0ce44     F4 C1 B0 FD | 	call	#__system___float_cmp
0ce48     00 FA 0D F2 | 	cmp	result1, #0 wz
0ce4c     00 1E 26 A6 |  if_e	not	local01, #0
0ce50     A7 1E 62 FC | 	wrlong	local01, fp
0ce54     58 03 90 FD | 	jmp	#LR__1083
0ce58                 | LR__1072
0ce58                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
0ce58     08 4E 05 F1 | 	add	fp, #8
0ce5c     A7 1E 02 FB | 	rdlong	local01, fp
0ce60     08 4E 85 F1 | 	sub	fp, #8
0ce64     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ce68     14 4E 05 A1 |  if_e	add	fp, #20
0ce6c     A7 24 02 AB |  if_e	rdlong	local04, fp
0ce70     14 4E 85 A1 |  if_e	sub	fp, #20
0ce74     12 23 02 A6 |  if_e	mov	local03, local04
0ce78     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0ce7c     38 00 90 5D |  if_ne	jmp	#LR__1073
0ce80     00 1E 06 F6 | 	mov	local01, #0
0ce84     A7 20 02 FB | 	rdlong	local02, fp
0ce88     0C 4E 05 F1 | 	add	fp, #12
0ce8c     A7 12 02 FB | 	rdlong	arg01, fp
0ce90     0C 4E 85 F1 | 	sub	fp, #12
0ce94     44 BA B0 FD | 	call	#__system___float_fromuns
0ce98     FD 14 02 F6 | 	mov	arg02, result1
0ce9c     10 13 02 F6 | 	mov	arg01, local02
0cea0     01 16 06 F6 | 	mov	arg03, #1
0cea4     94 C1 B0 FD | 	call	#__system___float_cmp
0cea8     00 FA 0D F2 | 	cmp	result1, #0 wz
0ceac     00 1E 26 A6 |  if_e	not	local01, #0
0ceb0     A7 1E 62 FC | 	wrlong	local01, fp
0ceb4     F8 02 90 FD | 	jmp	#LR__1083
0ceb8                 | LR__1073
0ceb8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
0ceb8     08 4E 05 F1 | 	add	fp, #8
0cebc     A7 1E 02 FB | 	rdlong	local01, fp
0cec0     08 4E 85 F1 | 	sub	fp, #8
0cec4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cec8     14 4E 05 A1 |  if_e	add	fp, #20
0cecc     A7 24 02 AB |  if_e	rdlong	local04, fp
0ced0     14 4E 85 A1 |  if_e	sub	fp, #20
0ced4     12 23 02 A6 |  if_e	mov	local03, local04
0ced8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cedc     44 00 90 5D |  if_ne	jmp	#LR__1074
0cee0     00 1E 06 F6 | 	mov	local01, #0
0cee4     A7 12 02 FB | 	rdlong	arg01, fp
0cee8     09 13 52 F6 | 	abs	arg01, arg01 wc
0ceec     1F 26 C6 C9 |  if_b	decod	local05, #31
0cef0     00 26 06 36 |  if_ae	mov	local05, #0
0cef4     E4 B9 B0 FD | 	call	#__system___float_fromuns
0cef8     13 FB 61 F5 | 	xor	result1, local05
0cefc     FD 12 02 F6 | 	mov	arg01, result1
0cf00     0C 4E 05 F1 | 	add	fp, #12
0cf04     A7 14 02 FB | 	rdlong	arg02, fp
0cf08     0C 4E 85 F1 | 	sub	fp, #12
0cf0c     01 16 06 F6 | 	mov	arg03, #1
0cf10     28 C1 B0 FD | 	call	#__system___float_cmp
0cf14     00 FA 0D F2 | 	cmp	result1, #0 wz
0cf18     00 1E 26 A6 |  if_e	not	local01, #0
0cf1c     A7 1E 62 FC | 	wrlong	local01, fp
0cf20     8C 02 90 FD | 	jmp	#LR__1083
0cf24                 | LR__1074
0cf24                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
0cf24     08 4E 05 F1 | 	add	fp, #8
0cf28     A7 1E 02 FB | 	rdlong	local01, fp
0cf2c     08 4E 85 F1 | 	sub	fp, #8
0cf30     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cf34     14 4E 05 A1 |  if_e	add	fp, #20
0cf38     A7 24 02 AB |  if_e	rdlong	local04, fp
0cf3c     14 4E 85 A1 |  if_e	sub	fp, #20
0cf40     12 23 02 A6 |  if_e	mov	local03, local04
0cf44     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0cf48     24 00 90 5D |  if_ne	jmp	#LR__1075
0cf4c     00 1E 06 F6 | 	mov	local01, #0
0cf50     A7 20 02 FB | 	rdlong	local02, fp
0cf54     0C 4E 05 F1 | 	add	fp, #12
0cf58     A7 22 02 FB | 	rdlong	local03, fp
0cf5c     0C 4E 85 F1 | 	sub	fp, #12
0cf60     11 21 0A F2 | 	cmp	local02, local03 wz
0cf64     01 1E 66 A6 |  if_e	neg	local01, #1
0cf68     A7 1E 62 FC | 	wrlong	local01, fp
0cf6c     40 02 90 FD | 	jmp	#LR__1083
0cf70                 | LR__1075
0cf70                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
0cf70     08 4E 05 F1 | 	add	fp, #8
0cf74     A7 1E 02 FB | 	rdlong	local01, fp
0cf78     08 4E 85 F1 | 	sub	fp, #8
0cf7c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cf80     14 4E 05 A1 |  if_e	add	fp, #20
0cf84     A7 24 02 AB |  if_e	rdlong	local04, fp
0cf88     14 4E 85 A1 |  if_e	sub	fp, #20
0cf8c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0cf90     24 00 90 5D |  if_ne	jmp	#LR__1076
0cf94     00 1E 06 F6 | 	mov	local01, #0
0cf98     A7 20 02 FB | 	rdlong	local02, fp
0cf9c     0C 4E 05 F1 | 	add	fp, #12
0cfa0     A7 22 02 FB | 	rdlong	local03, fp
0cfa4     0C 4E 85 F1 | 	sub	fp, #12
0cfa8     11 21 0A F2 | 	cmp	local02, local03 wz
0cfac     01 1E 66 A6 |  if_e	neg	local01, #1
0cfb0     A7 1E 62 FC | 	wrlong	local01, fp
0cfb4     F8 01 90 FD | 	jmp	#LR__1083
0cfb8                 | LR__1076
0cfb8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
0cfb8     08 4E 05 F1 | 	add	fp, #8
0cfbc     A7 1E 02 FB | 	rdlong	local01, fp
0cfc0     08 4E 85 F1 | 	sub	fp, #8
0cfc4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0cfc8     14 4E 05 A1 |  if_e	add	fp, #20
0cfcc     A7 22 02 AB |  if_e	rdlong	local03, fp
0cfd0     14 4E 85 A1 |  if_e	sub	fp, #20
0cfd4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0cfd8     34 00 90 5D |  if_ne	jmp	#LR__1077
0cfdc     00 1E 06 F6 | 	mov	local01, #0
0cfe0     A7 12 02 FB | 	rdlong	arg01, fp
0cfe4     F4 B8 B0 FD | 	call	#__system___float_fromuns
0cfe8     FD 12 02 F6 | 	mov	arg01, result1
0cfec     0C 4E 05 F1 | 	add	fp, #12
0cff0     A7 14 02 FB | 	rdlong	arg02, fp
0cff4     0C 4E 85 F1 | 	sub	fp, #12
0cff8     01 16 06 F6 | 	mov	arg03, #1
0cffc     3C C0 B0 FD | 	call	#__system___float_cmp
0d000     00 FA 0D F2 | 	cmp	result1, #0 wz
0d004     00 1E 26 A6 |  if_e	not	local01, #0
0d008     A7 1E 62 FC | 	wrlong	local01, fp
0d00c     A0 01 90 FD | 	jmp	#LR__1083
0d010                 | LR__1077
0d010                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
0d010     08 4E 05 F1 | 	add	fp, #8
0d014     A7 1E 02 FB | 	rdlong	local01, fp
0d018     08 4E 85 F1 | 	sub	fp, #8
0d01c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d020     14 4E 05 A1 |  if_e	add	fp, #20
0d024     A7 22 02 AB |  if_e	rdlong	local03, fp
0d028     14 4E 85 A1 |  if_e	sub	fp, #20
0d02c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d030     24 00 90 5D |  if_ne	jmp	#LR__1078
0d034     00 1E 06 F6 | 	mov	local01, #0
0d038     A7 20 02 FB | 	rdlong	local02, fp
0d03c     0C 4E 05 F1 | 	add	fp, #12
0d040     A7 22 02 FB | 	rdlong	local03, fp
0d044     0C 4E 85 F1 | 	sub	fp, #12
0d048     11 21 0A F2 | 	cmp	local02, local03 wz
0d04c     01 1E 66 A6 |  if_e	neg	local01, #1
0d050     A7 1E 62 FC | 	wrlong	local01, fp
0d054     58 01 90 FD | 	jmp	#LR__1083
0d058                 | LR__1078
0d058                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
0d058     08 4E 05 F1 | 	add	fp, #8
0d05c     A7 1E 02 FB | 	rdlong	local01, fp
0d060     08 4E 85 F1 | 	sub	fp, #8
0d064     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d068     14 4E 05 A1 |  if_e	add	fp, #20
0d06c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d070     14 4E 85 A1 |  if_e	sub	fp, #20
0d074     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d078     24 00 90 5D |  if_ne	jmp	#LR__1079
0d07c     00 1E 06 F6 | 	mov	local01, #0
0d080     A7 20 02 FB | 	rdlong	local02, fp
0d084     0C 4E 05 F1 | 	add	fp, #12
0d088     A7 22 02 FB | 	rdlong	local03, fp
0d08c     0C 4E 85 F1 | 	sub	fp, #12
0d090     11 21 0A F2 | 	cmp	local02, local03 wz
0d094     01 1E 66 A6 |  if_e	neg	local01, #1
0d098     A7 1E 62 FC | 	wrlong	local01, fp
0d09c     10 01 90 FD | 	jmp	#LR__1083
0d0a0                 | LR__1079
0d0a0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
0d0a0     08 4E 05 F1 | 	add	fp, #8
0d0a4     A7 1E 02 FB | 	rdlong	local01, fp
0d0a8     08 4E 85 F1 | 	sub	fp, #8
0d0ac     2B 1E 0E F2 | 	cmp	local01, #43 wz
0d0b0     14 4E 05 A1 |  if_e	add	fp, #20
0d0b4     A7 22 02 AB |  if_e	rdlong	local03, fp
0d0b8     14 4E 85 A1 |  if_e	sub	fp, #20
0d0bc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d0c0     30 00 90 5D |  if_ne	jmp	#LR__1080
0d0c4     00 1E 06 F6 | 	mov	local01, #0
0d0c8     A7 12 02 FB | 	rdlong	arg01, fp
0d0cc     2C D7 BF FD | 	call	#_convertstring
0d0d0     FD 12 02 F6 | 	mov	arg01, result1
0d0d4     0C 4E 05 F1 | 	add	fp, #12
0d0d8     A7 14 02 FB | 	rdlong	arg02, fp
0d0dc     0C 4E 85 F1 | 	sub	fp, #12
0d0e0     3C 92 B0 FD | 	call	#__system___string_cmp
0d0e4     00 FA 0D F2 | 	cmp	result1, #0 wz
0d0e8     00 1E 26 A6 |  if_e	not	local01, #0
0d0ec     A7 1E 62 FC | 	wrlong	local01, fp
0d0f0     BC 00 90 FD | 	jmp	#LR__1083
0d0f4                 | LR__1080
0d0f4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
0d0f4     08 4E 05 F1 | 	add	fp, #8
0d0f8     A7 1E 02 FB | 	rdlong	local01, fp
0d0fc     08 4E 85 F1 | 	sub	fp, #8
0d100     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d104     14 4E 05 A1 |  if_e	add	fp, #20
0d108     A7 22 02 AB |  if_e	rdlong	local03, fp
0d10c     14 4E 85 A1 |  if_e	sub	fp, #20
0d110     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0d114     34 00 90 5D |  if_ne	jmp	#LR__1081
0d118     00 1E 06 F6 | 	mov	local01, #0
0d11c     A7 20 02 FB | 	rdlong	local02, fp
0d120     0C 4E 05 F1 | 	add	fp, #12
0d124     A7 12 02 FB | 	rdlong	arg01, fp
0d128     0C 4E 85 F1 | 	sub	fp, #12
0d12c     CC D6 BF FD | 	call	#_convertstring
0d130     FD 14 02 F6 | 	mov	arg02, result1
0d134     10 13 02 F6 | 	mov	arg01, local02
0d138     E4 91 B0 FD | 	call	#__system___string_cmp
0d13c     00 FA 0D F2 | 	cmp	result1, #0 wz
0d140     00 1E 26 A6 |  if_e	not	local01, #0
0d144     A7 1E 62 FC | 	wrlong	local01, fp
0d148     64 00 90 FD | 	jmp	#LR__1083
0d14c                 | LR__1081
0d14c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
0d14c     08 4E 05 F1 | 	add	fp, #8
0d150     A7 1E 02 FB | 	rdlong	local01, fp
0d154     08 4E 85 F1 | 	sub	fp, #8
0d158     2B 1E 0E F2 | 	cmp	local01, #43 wz
0d15c     14 4E 05 A1 |  if_e	add	fp, #20
0d160     A7 22 02 AB |  if_e	rdlong	local03, fp
0d164     14 4E 85 A1 |  if_e	sub	fp, #20
0d168     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0d16c     3C 00 90 5D |  if_ne	jmp	#LR__1082
0d170     00 1E 06 F6 | 	mov	local01, #0
0d174     A7 12 02 FB | 	rdlong	arg01, fp
0d178     80 D6 BF FD | 	call	#_convertstring
0d17c     FD 20 02 F6 | 	mov	local02, result1
0d180     0C 4E 05 F1 | 	add	fp, #12
0d184     A7 12 02 FB | 	rdlong	arg01, fp
0d188     0C 4E 85 F1 | 	sub	fp, #12
0d18c     6C D6 BF FD | 	call	#_convertstring
0d190     FD 14 02 F6 | 	mov	arg02, result1
0d194     10 13 02 F6 | 	mov	arg01, local02
0d198     84 91 B0 FD | 	call	#__system___string_cmp
0d19c     00 FA 0D F2 | 	cmp	result1, #0 wz
0d1a0     00 1E 26 A6 |  if_e	not	local01, #0
0d1a4     A7 1E 62 FC | 	wrlong	local01, fp
0d1a8     04 00 90 FD | 	jmp	#LR__1083
0d1ac                 | LR__1082
0d1ac     A7 00 68 FC | 	wrlong	#0, fp
0d1b0                 | LR__1083
0d1b0     08 4E 05 F1 | 	add	fp, #8
0d1b4     A7 38 68 FC | 	wrlong	#28, fp
0d1b8     08 4E 85 F1 | 	sub	fp, #8
0d1bc     A7 12 02 F6 | 	mov	arg01, fp
0d1c0     E4 B9 BF FD | 	call	#_push
0d1c4     A7 F0 03 F6 | 	mov	ptra, fp
0d1c8     B2 00 A0 FD | 	call	#popregs_
0d1cc                 | _do_eq_ret
0d1cc     2D 00 64 FD | 	ret
0d1d0                 | 
0d1d0                 | ' 
0d1d0                 | ' sub do_gt
0d1d0                 | _do_gt
0d1d0     05 4A 05 F6 | 	mov	COUNT_, #5
0d1d4     A8 00 A0 FD | 	call	#pushregs_
0d1d8     18 F0 07 F1 | 	add	ptra, #24
0d1dc     30 B9 BF FD | 	call	#_pop
0d1e0     FD 1E 02 F6 | 	mov	local01, result1
0d1e4     FE 20 02 F6 | 	mov	local02, result2
0d1e8     FF 22 02 F6 | 	mov	local03, result3
0d1ec     0C 4E 05 F1 | 	add	fp, #12
0d1f0     A7 1E 62 FC | 	wrlong	local01, fp
0d1f4     04 4E 05 F1 | 	add	fp, #4
0d1f8     A7 20 62 FC | 	wrlong	local02, fp
0d1fc     04 4E 05 F1 | 	add	fp, #4
0d200     A7 22 62 FC | 	wrlong	local03, fp
0d204     14 4E 85 F1 | 	sub	fp, #20
0d208     04 B9 BF FD | 	call	#_pop
0d20c     FF 22 02 F6 | 	mov	local03, result3
0d210     A7 FA 61 FC | 	wrlong	result1, fp
0d214     04 4E 05 F1 | 	add	fp, #4
0d218     A7 FC 61 FC | 	wrlong	result2, fp
0d21c     04 4E 05 F1 | 	add	fp, #4
0d220     A7 22 62 FC | 	wrlong	local03, fp
0d224                 | ' t2=pop()
0d224                 | ' t1=pop()
0d224                 | ' 
0d224                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
0d224     08 4E 85 F1 | 	sub	fp, #8
0d228     1F 22 0E F2 | 	cmp	local03, #31 wz
0d22c     14 4E 05 A1 |  if_e	add	fp, #20
0d230     A7 24 02 AB |  if_e	rdlong	local04, fp
0d234     14 4E 85 A1 |  if_e	sub	fp, #20
0d238     12 23 02 A6 |  if_e	mov	local03, local04
0d23c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d240     28 00 90 5D |  if_ne	jmp	#LR__1090
0d244     00 1E 06 F6 | 	mov	local01, #0
0d248     A7 12 02 FB | 	rdlong	arg01, fp
0d24c     0C 4E 05 F1 | 	add	fp, #12
0d250     A7 14 02 FB | 	rdlong	arg02, fp
0d254     0C 4E 85 F1 | 	sub	fp, #12
0d258     C4 90 B0 FD | 	call	#__system___string_cmp
0d25c     01 FA 55 F2 | 	cmps	result1, #1 wc
0d260     00 1E 26 36 |  if_ae	not	local01, #0
0d264     A7 1E 62 FC | 	wrlong	local01, fp
0d268     1C 04 90 FD | 	jmp	#LR__1103
0d26c                 | LR__1090
0d26c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
0d26c     08 4E 05 F1 | 	add	fp, #8
0d270     A7 1E 02 FB | 	rdlong	local01, fp
0d274     08 4E 85 F1 | 	sub	fp, #8
0d278     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d27c     14 4E 05 A1 |  if_e	add	fp, #20
0d280     A7 24 02 AB |  if_e	rdlong	local04, fp
0d284     14 4E 85 A1 |  if_e	sub	fp, #20
0d288     12 23 02 A6 |  if_e	mov	local03, local04
0d28c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d290     2C 00 90 5D |  if_ne	jmp	#LR__1091
0d294     00 1E 06 F6 | 	mov	local01, #0
0d298     A7 12 02 FB | 	rdlong	arg01, fp
0d29c     0C 4E 05 F1 | 	add	fp, #12
0d2a0     A7 14 02 FB | 	rdlong	arg02, fp
0d2a4     0C 4E 85 F1 | 	sub	fp, #12
0d2a8     01 16 66 F6 | 	neg	arg03, #1
0d2ac     8C BD B0 FD | 	call	#__system___float_cmp
0d2b0     01 FA 55 F2 | 	cmps	result1, #1 wc
0d2b4     00 1E 26 36 |  if_ae	not	local01, #0
0d2b8     A7 1E 62 FC | 	wrlong	local01, fp
0d2bc     C8 03 90 FD | 	jmp	#LR__1103
0d2c0                 | LR__1091
0d2c0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
0d2c0     08 4E 05 F1 | 	add	fp, #8
0d2c4     A7 1E 02 FB | 	rdlong	local01, fp
0d2c8     08 4E 85 F1 | 	sub	fp, #8
0d2cc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d2d0     14 4E 05 A1 |  if_e	add	fp, #20
0d2d4     A7 24 02 AB |  if_e	rdlong	local04, fp
0d2d8     14 4E 85 A1 |  if_e	sub	fp, #20
0d2dc     12 23 02 A6 |  if_e	mov	local03, local04
0d2e0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d2e4     48 00 90 5D |  if_ne	jmp	#LR__1092
0d2e8     00 1E 06 F6 | 	mov	local01, #0
0d2ec     A7 20 02 FB | 	rdlong	local02, fp
0d2f0     0C 4E 05 F1 | 	add	fp, #12
0d2f4     A7 12 02 FB | 	rdlong	arg01, fp
0d2f8     0C 4E 85 F1 | 	sub	fp, #12
0d2fc     09 13 52 F6 | 	abs	arg01, arg01 wc
0d300     1F 26 C6 C9 |  if_b	decod	local05, #31
0d304     00 26 06 36 |  if_ae	mov	local05, #0
0d308     D0 B5 B0 FD | 	call	#__system___float_fromuns
0d30c     13 FB 61 F5 | 	xor	result1, local05
0d310     FD 14 02 F6 | 	mov	arg02, result1
0d314     10 13 02 F6 | 	mov	arg01, local02
0d318     01 16 66 F6 | 	neg	arg03, #1
0d31c     1C BD B0 FD | 	call	#__system___float_cmp
0d320     01 FA 55 F2 | 	cmps	result1, #1 wc
0d324     00 1E 26 36 |  if_ae	not	local01, #0
0d328     A7 1E 62 FC | 	wrlong	local01, fp
0d32c     58 03 90 FD | 	jmp	#LR__1103
0d330                 | LR__1092
0d330                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
0d330     08 4E 05 F1 | 	add	fp, #8
0d334     A7 1E 02 FB | 	rdlong	local01, fp
0d338     08 4E 85 F1 | 	sub	fp, #8
0d33c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d340     14 4E 05 A1 |  if_e	add	fp, #20
0d344     A7 24 02 AB |  if_e	rdlong	local04, fp
0d348     14 4E 85 A1 |  if_e	sub	fp, #20
0d34c     12 23 02 A6 |  if_e	mov	local03, local04
0d350     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d354     38 00 90 5D |  if_ne	jmp	#LR__1093
0d358     00 1E 06 F6 | 	mov	local01, #0
0d35c     A7 20 02 FB | 	rdlong	local02, fp
0d360     0C 4E 05 F1 | 	add	fp, #12
0d364     A7 12 02 FB | 	rdlong	arg01, fp
0d368     0C 4E 85 F1 | 	sub	fp, #12
0d36c     6C B5 B0 FD | 	call	#__system___float_fromuns
0d370     FD 14 02 F6 | 	mov	arg02, result1
0d374     10 13 02 F6 | 	mov	arg01, local02
0d378     01 16 66 F6 | 	neg	arg03, #1
0d37c     BC BC B0 FD | 	call	#__system___float_cmp
0d380     01 FA 55 F2 | 	cmps	result1, #1 wc
0d384     00 1E 26 36 |  if_ae	not	local01, #0
0d388     A7 1E 62 FC | 	wrlong	local01, fp
0d38c     F8 02 90 FD | 	jmp	#LR__1103
0d390                 | LR__1093
0d390                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
0d390     08 4E 05 F1 | 	add	fp, #8
0d394     A7 1E 02 FB | 	rdlong	local01, fp
0d398     08 4E 85 F1 | 	sub	fp, #8
0d39c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d3a0     14 4E 05 A1 |  if_e	add	fp, #20
0d3a4     A7 24 02 AB |  if_e	rdlong	local04, fp
0d3a8     14 4E 85 A1 |  if_e	sub	fp, #20
0d3ac     12 23 02 A6 |  if_e	mov	local03, local04
0d3b0     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d3b4     44 00 90 5D |  if_ne	jmp	#LR__1094
0d3b8     00 1E 06 F6 | 	mov	local01, #0
0d3bc     A7 12 02 FB | 	rdlong	arg01, fp
0d3c0     09 13 52 F6 | 	abs	arg01, arg01 wc
0d3c4     1F 26 C6 C9 |  if_b	decod	local05, #31
0d3c8     00 26 06 36 |  if_ae	mov	local05, #0
0d3cc     0C B5 B0 FD | 	call	#__system___float_fromuns
0d3d0     13 FB 61 F5 | 	xor	result1, local05
0d3d4     FD 12 02 F6 | 	mov	arg01, result1
0d3d8     0C 4E 05 F1 | 	add	fp, #12
0d3dc     A7 14 02 FB | 	rdlong	arg02, fp
0d3e0     0C 4E 85 F1 | 	sub	fp, #12
0d3e4     01 16 66 F6 | 	neg	arg03, #1
0d3e8     50 BC B0 FD | 	call	#__system___float_cmp
0d3ec     01 FA 55 F2 | 	cmps	result1, #1 wc
0d3f0     00 1E 26 36 |  if_ae	not	local01, #0
0d3f4     A7 1E 62 FC | 	wrlong	local01, fp
0d3f8     8C 02 90 FD | 	jmp	#LR__1103
0d3fc                 | LR__1094
0d3fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
0d3fc     08 4E 05 F1 | 	add	fp, #8
0d400     A7 1E 02 FB | 	rdlong	local01, fp
0d404     08 4E 85 F1 | 	sub	fp, #8
0d408     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d40c     14 4E 05 A1 |  if_e	add	fp, #20
0d410     A7 24 02 AB |  if_e	rdlong	local04, fp
0d414     14 4E 85 A1 |  if_e	sub	fp, #20
0d418     12 23 02 A6 |  if_e	mov	local03, local04
0d41c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d420     24 00 90 5D |  if_ne	jmp	#LR__1095
0d424     00 1E 06 F6 | 	mov	local01, #0
0d428     A7 20 02 FB | 	rdlong	local02, fp
0d42c     0C 4E 05 F1 | 	add	fp, #12
0d430     A7 22 02 FB | 	rdlong	local03, fp
0d434     0C 4E 85 F1 | 	sub	fp, #12
0d438     11 21 5A F2 | 	cmps	local02, local03 wcz
0d43c     01 1E 66 16 |  if_a	neg	local01, #1
0d440     A7 1E 62 FC | 	wrlong	local01, fp
0d444     40 02 90 FD | 	jmp	#LR__1103
0d448                 | LR__1095
0d448                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
0d448     08 4E 05 F1 | 	add	fp, #8
0d44c     A7 1E 02 FB | 	rdlong	local01, fp
0d450     08 4E 85 F1 | 	sub	fp, #8
0d454     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d458     14 4E 05 A1 |  if_e	add	fp, #20
0d45c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d460     14 4E 85 A1 |  if_e	sub	fp, #20
0d464     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d468     24 00 90 5D |  if_ne	jmp	#LR__1096
0d46c     00 1E 06 F6 | 	mov	local01, #0
0d470     A7 20 02 FB | 	rdlong	local02, fp
0d474     0C 4E 05 F1 | 	add	fp, #12
0d478     A7 22 02 FB | 	rdlong	local03, fp
0d47c     0C 4E 85 F1 | 	sub	fp, #12
0d480     11 21 5A F2 | 	cmps	local02, local03 wcz
0d484     01 1E 66 16 |  if_a	neg	local01, #1
0d488     A7 1E 62 FC | 	wrlong	local01, fp
0d48c     F8 01 90 FD | 	jmp	#LR__1103
0d490                 | LR__1096
0d490                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
0d490     08 4E 05 F1 | 	add	fp, #8
0d494     A7 1E 02 FB | 	rdlong	local01, fp
0d498     08 4E 85 F1 | 	sub	fp, #8
0d49c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d4a0     14 4E 05 A1 |  if_e	add	fp, #20
0d4a4     A7 22 02 AB |  if_e	rdlong	local03, fp
0d4a8     14 4E 85 A1 |  if_e	sub	fp, #20
0d4ac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d4b0     34 00 90 5D |  if_ne	jmp	#LR__1097
0d4b4     00 1E 06 F6 | 	mov	local01, #0
0d4b8     A7 12 02 FB | 	rdlong	arg01, fp
0d4bc     1C B4 B0 FD | 	call	#__system___float_fromuns
0d4c0     FD 12 02 F6 | 	mov	arg01, result1
0d4c4     0C 4E 05 F1 | 	add	fp, #12
0d4c8     A7 14 02 FB | 	rdlong	arg02, fp
0d4cc     0C 4E 85 F1 | 	sub	fp, #12
0d4d0     01 16 66 F6 | 	neg	arg03, #1
0d4d4     64 BB B0 FD | 	call	#__system___float_cmp
0d4d8     01 FA 55 F2 | 	cmps	result1, #1 wc
0d4dc     00 1E 26 36 |  if_ae	not	local01, #0
0d4e0     A7 1E 62 FC | 	wrlong	local01, fp
0d4e4     A0 01 90 FD | 	jmp	#LR__1103
0d4e8                 | LR__1097
0d4e8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
0d4e8     08 4E 05 F1 | 	add	fp, #8
0d4ec     A7 1E 02 FB | 	rdlong	local01, fp
0d4f0     08 4E 85 F1 | 	sub	fp, #8
0d4f4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d4f8     14 4E 05 A1 |  if_e	add	fp, #20
0d4fc     A7 22 02 AB |  if_e	rdlong	local03, fp
0d500     14 4E 85 A1 |  if_e	sub	fp, #20
0d504     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d508     24 00 90 5D |  if_ne	jmp	#LR__1098
0d50c     00 1E 06 F6 | 	mov	local01, #0
0d510     A7 20 02 FB | 	rdlong	local02, fp
0d514     0C 4E 05 F1 | 	add	fp, #12
0d518     A7 22 02 FB | 	rdlong	local03, fp
0d51c     0C 4E 85 F1 | 	sub	fp, #12
0d520     11 21 5A F2 | 	cmps	local02, local03 wcz
0d524     01 1E 66 16 |  if_a	neg	local01, #1
0d528     A7 1E 62 FC | 	wrlong	local01, fp
0d52c     58 01 90 FD | 	jmp	#LR__1103
0d530                 | LR__1098
0d530                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
0d530     08 4E 05 F1 | 	add	fp, #8
0d534     A7 1E 02 FB | 	rdlong	local01, fp
0d538     08 4E 85 F1 | 	sub	fp, #8
0d53c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d540     14 4E 05 A1 |  if_e	add	fp, #20
0d544     A7 22 02 AB |  if_e	rdlong	local03, fp
0d548     14 4E 85 A1 |  if_e	sub	fp, #20
0d54c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d550     24 00 90 5D |  if_ne	jmp	#LR__1099
0d554     00 1E 06 F6 | 	mov	local01, #0
0d558     A7 20 02 FB | 	rdlong	local02, fp
0d55c     0C 4E 05 F1 | 	add	fp, #12
0d560     A7 22 02 FB | 	rdlong	local03, fp
0d564     0C 4E 85 F1 | 	sub	fp, #12
0d568     11 21 1A F2 | 	cmp	local02, local03 wcz
0d56c     01 1E 66 16 |  if_a	neg	local01, #1
0d570     A7 1E 62 FC | 	wrlong	local01, fp
0d574     10 01 90 FD | 	jmp	#LR__1103
0d578                 | LR__1099
0d578                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
0d578     08 4E 05 F1 | 	add	fp, #8
0d57c     A7 1E 02 FB | 	rdlong	local01, fp
0d580     08 4E 85 F1 | 	sub	fp, #8
0d584     2B 1E 0E F2 | 	cmp	local01, #43 wz
0d588     14 4E 05 A1 |  if_e	add	fp, #20
0d58c     A7 22 02 AB |  if_e	rdlong	local03, fp
0d590     14 4E 85 A1 |  if_e	sub	fp, #20
0d594     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d598     30 00 90 5D |  if_ne	jmp	#LR__1100
0d59c     00 1E 06 F6 | 	mov	local01, #0
0d5a0     A7 12 02 FB | 	rdlong	arg01, fp
0d5a4     54 D2 BF FD | 	call	#_convertstring
0d5a8     FD 12 02 F6 | 	mov	arg01, result1
0d5ac     0C 4E 05 F1 | 	add	fp, #12
0d5b0     A7 14 02 FB | 	rdlong	arg02, fp
0d5b4     0C 4E 85 F1 | 	sub	fp, #12
0d5b8     64 8D B0 FD | 	call	#__system___string_cmp
0d5bc     01 FA 55 F2 | 	cmps	result1, #1 wc
0d5c0     00 1E 26 36 |  if_ae	not	local01, #0
0d5c4     A7 1E 62 FC | 	wrlong	local01, fp
0d5c8     BC 00 90 FD | 	jmp	#LR__1103
0d5cc                 | LR__1100
0d5cc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
0d5cc     08 4E 05 F1 | 	add	fp, #8
0d5d0     A7 1E 02 FB | 	rdlong	local01, fp
0d5d4     08 4E 85 F1 | 	sub	fp, #8
0d5d8     1F 1E 0E F2 | 	cmp	local01, #31 wz
0d5dc     14 4E 05 A1 |  if_e	add	fp, #20
0d5e0     A7 22 02 AB |  if_e	rdlong	local03, fp
0d5e4     14 4E 85 A1 |  if_e	sub	fp, #20
0d5e8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0d5ec     34 00 90 5D |  if_ne	jmp	#LR__1101
0d5f0     00 1E 06 F6 | 	mov	local01, #0
0d5f4     A7 20 02 FB | 	rdlong	local02, fp
0d5f8     0C 4E 05 F1 | 	add	fp, #12
0d5fc     A7 12 02 FB | 	rdlong	arg01, fp
0d600     0C 4E 85 F1 | 	sub	fp, #12
0d604     F4 D1 BF FD | 	call	#_convertstring
0d608     FD 14 02 F6 | 	mov	arg02, result1
0d60c     10 13 02 F6 | 	mov	arg01, local02
0d610     0C 8D B0 FD | 	call	#__system___string_cmp
0d614     01 FA 55 F2 | 	cmps	result1, #1 wc
0d618     00 1E 26 36 |  if_ae	not	local01, #0
0d61c     A7 1E 62 FC | 	wrlong	local01, fp
0d620     64 00 90 FD | 	jmp	#LR__1103
0d624                 | LR__1101
0d624                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
0d624     08 4E 05 F1 | 	add	fp, #8
0d628     A7 1E 02 FB | 	rdlong	local01, fp
0d62c     08 4E 85 F1 | 	sub	fp, #8
0d630     2B 1E 0E F2 | 	cmp	local01, #43 wz
0d634     14 4E 05 A1 |  if_e	add	fp, #20
0d638     A7 22 02 AB |  if_e	rdlong	local03, fp
0d63c     14 4E 85 A1 |  if_e	sub	fp, #20
0d640     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0d644     3C 00 90 5D |  if_ne	jmp	#LR__1102
0d648     00 1E 06 F6 | 	mov	local01, #0
0d64c     A7 12 02 FB | 	rdlong	arg01, fp
0d650     A8 D1 BF FD | 	call	#_convertstring
0d654     FD 20 02 F6 | 	mov	local02, result1
0d658     0C 4E 05 F1 | 	add	fp, #12
0d65c     A7 12 02 FB | 	rdlong	arg01, fp
0d660     0C 4E 85 F1 | 	sub	fp, #12
0d664     94 D1 BF FD | 	call	#_convertstring
0d668     FD 14 02 F6 | 	mov	arg02, result1
0d66c     10 13 02 F6 | 	mov	arg01, local02
0d670     AC 8C B0 FD | 	call	#__system___string_cmp
0d674     01 FA 55 F2 | 	cmps	result1, #1 wc
0d678     00 1E 26 36 |  if_ae	not	local01, #0
0d67c     A7 1E 62 FC | 	wrlong	local01, fp
0d680     04 00 90 FD | 	jmp	#LR__1103
0d684                 | LR__1102
0d684     A7 00 68 FC | 	wrlong	#0, fp
0d688                 | LR__1103
0d688     08 4E 05 F1 | 	add	fp, #8
0d68c     A7 38 68 FC | 	wrlong	#28, fp
0d690     08 4E 85 F1 | 	sub	fp, #8
0d694     A7 12 02 F6 | 	mov	arg01, fp
0d698     0C B5 BF FD | 	call	#_push
0d69c     A7 F0 03 F6 | 	mov	ptra, fp
0d6a0     B2 00 A0 FD | 	call	#popregs_
0d6a4                 | _do_gt_ret
0d6a4     2D 00 64 FD | 	ret
0d6a8                 | 
0d6a8                 | ' 
0d6a8                 | ' sub do_lt
0d6a8                 | _do_lt
0d6a8     05 4A 05 F6 | 	mov	COUNT_, #5
0d6ac     A8 00 A0 FD | 	call	#pushregs_
0d6b0     18 F0 07 F1 | 	add	ptra, #24
0d6b4     58 B4 BF FD | 	call	#_pop
0d6b8     FD 1E 02 F6 | 	mov	local01, result1
0d6bc     FE 20 02 F6 | 	mov	local02, result2
0d6c0     FF 22 02 F6 | 	mov	local03, result3
0d6c4     0C 4E 05 F1 | 	add	fp, #12
0d6c8     A7 1E 62 FC | 	wrlong	local01, fp
0d6cc     04 4E 05 F1 | 	add	fp, #4
0d6d0     A7 20 62 FC | 	wrlong	local02, fp
0d6d4     04 4E 05 F1 | 	add	fp, #4
0d6d8     A7 22 62 FC | 	wrlong	local03, fp
0d6dc     14 4E 85 F1 | 	sub	fp, #20
0d6e0     2C B4 BF FD | 	call	#_pop
0d6e4     FF 22 02 F6 | 	mov	local03, result3
0d6e8     A7 FA 61 FC | 	wrlong	result1, fp
0d6ec     04 4E 05 F1 | 	add	fp, #4
0d6f0     A7 FC 61 FC | 	wrlong	result2, fp
0d6f4     04 4E 05 F1 | 	add	fp, #4
0d6f8     A7 22 62 FC | 	wrlong	local03, fp
0d6fc                 | ' t2=pop()
0d6fc                 | ' t1=pop()
0d6fc                 | ' 
0d6fc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
0d6fc     08 4E 85 F1 | 	sub	fp, #8
0d700     1F 22 0E F2 | 	cmp	local03, #31 wz
0d704     14 4E 05 A1 |  if_e	add	fp, #20
0d708     A7 24 02 AB |  if_e	rdlong	local04, fp
0d70c     14 4E 85 A1 |  if_e	sub	fp, #20
0d710     12 23 02 A6 |  if_e	mov	local03, local04
0d714     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0d718     28 00 90 5D |  if_ne	jmp	#LR__1110
0d71c     00 1E 06 F6 | 	mov	local01, #0
0d720     A7 12 02 FB | 	rdlong	arg01, fp
0d724     0C 4E 05 F1 | 	add	fp, #12
0d728     A7 14 02 FB | 	rdlong	arg02, fp
0d72c     0C 4E 85 F1 | 	sub	fp, #12
0d730     EC 8B B0 FD | 	call	#__system___string_cmp
0d734     00 FA 55 F2 | 	cmps	result1, #0 wc
0d738     00 1E 26 C6 |  if_b	not	local01, #0
0d73c     A7 1E 62 FC | 	wrlong	local01, fp
0d740     0C 04 90 FD | 	jmp	#LR__1123
0d744                 | LR__1110
0d744                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
0d744     08 4E 05 F1 | 	add	fp, #8
0d748     A7 1E 02 FB | 	rdlong	local01, fp
0d74c     08 4E 85 F1 | 	sub	fp, #8
0d750     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d754     14 4E 05 A1 |  if_e	add	fp, #20
0d758     A7 24 02 AB |  if_e	rdlong	local04, fp
0d75c     14 4E 85 A1 |  if_e	sub	fp, #20
0d760     12 23 02 A6 |  if_e	mov	local03, local04
0d764     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d768     2C 00 90 5D |  if_ne	jmp	#LR__1111
0d76c     00 1E 06 F6 | 	mov	local01, #0
0d770     A7 12 02 FB | 	rdlong	arg01, fp
0d774     0C 4E 05 F1 | 	add	fp, #12
0d778     A7 14 02 FB | 	rdlong	arg02, fp
0d77c     0C 4E 85 F1 | 	sub	fp, #12
0d780     01 16 06 F6 | 	mov	arg03, #1
0d784     B4 B8 B0 FD | 	call	#__system___float_cmp
0d788     00 FA 55 F2 | 	cmps	result1, #0 wc
0d78c     00 1E 26 C6 |  if_b	not	local01, #0
0d790     A7 1E 62 FC | 	wrlong	local01, fp
0d794     B8 03 90 FD | 	jmp	#LR__1123
0d798                 | LR__1111
0d798                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
0d798     08 4E 05 F1 | 	add	fp, #8
0d79c     A7 1E 02 FB | 	rdlong	local01, fp
0d7a0     08 4E 85 F1 | 	sub	fp, #8
0d7a4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d7a8     14 4E 05 A1 |  if_e	add	fp, #20
0d7ac     A7 24 02 AB |  if_e	rdlong	local04, fp
0d7b0     14 4E 85 A1 |  if_e	sub	fp, #20
0d7b4     12 23 02 A6 |  if_e	mov	local03, local04
0d7b8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d7bc     48 00 90 5D |  if_ne	jmp	#LR__1112
0d7c0     00 1E 06 F6 | 	mov	local01, #0
0d7c4     A7 20 02 FB | 	rdlong	local02, fp
0d7c8     0C 4E 05 F1 | 	add	fp, #12
0d7cc     A7 12 02 FB | 	rdlong	arg01, fp
0d7d0     0C 4E 85 F1 | 	sub	fp, #12
0d7d4     09 13 52 F6 | 	abs	arg01, arg01 wc
0d7d8     1F 26 C6 C9 |  if_b	decod	local05, #31
0d7dc     00 26 06 36 |  if_ae	mov	local05, #0
0d7e0     F8 B0 B0 FD | 	call	#__system___float_fromuns
0d7e4     13 FB 61 F5 | 	xor	result1, local05
0d7e8     FD 14 02 F6 | 	mov	arg02, result1
0d7ec     10 13 02 F6 | 	mov	arg01, local02
0d7f0     01 16 06 F6 | 	mov	arg03, #1
0d7f4     44 B8 B0 FD | 	call	#__system___float_cmp
0d7f8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d7fc     00 1E 26 C6 |  if_b	not	local01, #0
0d800     A7 1E 62 FC | 	wrlong	local01, fp
0d804     48 03 90 FD | 	jmp	#LR__1123
0d808                 | LR__1112
0d808                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
0d808     08 4E 05 F1 | 	add	fp, #8
0d80c     A7 1E 02 FB | 	rdlong	local01, fp
0d810     08 4E 85 F1 | 	sub	fp, #8
0d814     1E 1E 0E F2 | 	cmp	local01, #30 wz
0d818     14 4E 05 A1 |  if_e	add	fp, #20
0d81c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d820     14 4E 85 A1 |  if_e	sub	fp, #20
0d824     12 23 02 A6 |  if_e	mov	local03, local04
0d828     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0d82c     38 00 90 5D |  if_ne	jmp	#LR__1113
0d830     00 1E 06 F6 | 	mov	local01, #0
0d834     A7 20 02 FB | 	rdlong	local02, fp
0d838     0C 4E 05 F1 | 	add	fp, #12
0d83c     A7 12 02 FB | 	rdlong	arg01, fp
0d840     0C 4E 85 F1 | 	sub	fp, #12
0d844     94 B0 B0 FD | 	call	#__system___float_fromuns
0d848     FD 14 02 F6 | 	mov	arg02, result1
0d84c     10 13 02 F6 | 	mov	arg01, local02
0d850     01 16 06 F6 | 	mov	arg03, #1
0d854     E4 B7 B0 FD | 	call	#__system___float_cmp
0d858     00 FA 55 F2 | 	cmps	result1, #0 wc
0d85c     00 1E 26 C6 |  if_b	not	local01, #0
0d860     A7 1E 62 FC | 	wrlong	local01, fp
0d864     E8 02 90 FD | 	jmp	#LR__1123
0d868                 | LR__1113
0d868                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
0d868     08 4E 05 F1 | 	add	fp, #8
0d86c     A7 1E 02 FB | 	rdlong	local01, fp
0d870     08 4E 85 F1 | 	sub	fp, #8
0d874     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d878     14 4E 05 A1 |  if_e	add	fp, #20
0d87c     A7 24 02 AB |  if_e	rdlong	local04, fp
0d880     14 4E 85 A1 |  if_e	sub	fp, #20
0d884     12 23 02 A6 |  if_e	mov	local03, local04
0d888     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d88c     44 00 90 5D |  if_ne	jmp	#LR__1114
0d890     00 1E 06 F6 | 	mov	local01, #0
0d894     A7 12 02 FB | 	rdlong	arg01, fp
0d898     09 13 52 F6 | 	abs	arg01, arg01 wc
0d89c     1F 26 C6 C9 |  if_b	decod	local05, #31
0d8a0     00 26 06 36 |  if_ae	mov	local05, #0
0d8a4     34 B0 B0 FD | 	call	#__system___float_fromuns
0d8a8     13 FB 61 F5 | 	xor	result1, local05
0d8ac     FD 12 02 F6 | 	mov	arg01, result1
0d8b0     0C 4E 05 F1 | 	add	fp, #12
0d8b4     A7 14 02 FB | 	rdlong	arg02, fp
0d8b8     0C 4E 85 F1 | 	sub	fp, #12
0d8bc     01 16 06 F6 | 	mov	arg03, #1
0d8c0     78 B7 B0 FD | 	call	#__system___float_cmp
0d8c4     00 FA 55 F2 | 	cmps	result1, #0 wc
0d8c8     00 1E 26 C6 |  if_b	not	local01, #0
0d8cc     A7 1E 62 FC | 	wrlong	local01, fp
0d8d0     7C 02 90 FD | 	jmp	#LR__1123
0d8d4                 | LR__1114
0d8d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
0d8d4     08 4E 05 F1 | 	add	fp, #8
0d8d8     A7 1E 02 FB | 	rdlong	local01, fp
0d8dc     08 4E 85 F1 | 	sub	fp, #8
0d8e0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d8e4     14 4E 05 A1 |  if_e	add	fp, #20
0d8e8     A7 24 02 AB |  if_e	rdlong	local04, fp
0d8ec     14 4E 85 A1 |  if_e	sub	fp, #20
0d8f0     12 23 02 A6 |  if_e	mov	local03, local04
0d8f4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d8f8     20 00 90 5D |  if_ne	jmp	#LR__1115
0d8fc     A7 20 02 FB | 	rdlong	local02, fp
0d900     0C 4E 05 F1 | 	add	fp, #12
0d904     A7 22 02 FB | 	rdlong	local03, fp
0d908     0C 4E 85 F1 | 	sub	fp, #12
0d90c     11 21 52 F2 | 	cmps	local02, local03 wc
0d910     0F 1F A2 F1 | 	subx	local01, local01
0d914     A7 1E 62 FC | 	wrlong	local01, fp
0d918     34 02 90 FD | 	jmp	#LR__1123
0d91c                 | LR__1115
0d91c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
0d91c     08 4E 05 F1 | 	add	fp, #8
0d920     A7 1E 02 FB | 	rdlong	local01, fp
0d924     08 4E 85 F1 | 	sub	fp, #8
0d928     1C 1E 0E F2 | 	cmp	local01, #28 wz
0d92c     14 4E 05 A1 |  if_e	add	fp, #20
0d930     A7 24 02 AB |  if_e	rdlong	local04, fp
0d934     14 4E 85 A1 |  if_e	sub	fp, #20
0d938     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0d93c     20 00 90 5D |  if_ne	jmp	#LR__1116
0d940     A7 20 02 FB | 	rdlong	local02, fp
0d944     0C 4E 05 F1 | 	add	fp, #12
0d948     A7 22 02 FB | 	rdlong	local03, fp
0d94c     0C 4E 85 F1 | 	sub	fp, #12
0d950     11 21 52 F2 | 	cmps	local02, local03 wc
0d954     0F 1F A2 F1 | 	subx	local01, local01
0d958     A7 1E 62 FC | 	wrlong	local01, fp
0d95c     F0 01 90 FD | 	jmp	#LR__1123
0d960                 | LR__1116
0d960                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
0d960     08 4E 05 F1 | 	add	fp, #8
0d964     A7 1E 02 FB | 	rdlong	local01, fp
0d968     08 4E 85 F1 | 	sub	fp, #8
0d96c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d970     14 4E 05 A1 |  if_e	add	fp, #20
0d974     A7 22 02 AB |  if_e	rdlong	local03, fp
0d978     14 4E 85 A1 |  if_e	sub	fp, #20
0d97c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0d980     34 00 90 5D |  if_ne	jmp	#LR__1117
0d984     00 1E 06 F6 | 	mov	local01, #0
0d988     A7 12 02 FB | 	rdlong	arg01, fp
0d98c     4C AF B0 FD | 	call	#__system___float_fromuns
0d990     FD 12 02 F6 | 	mov	arg01, result1
0d994     0C 4E 05 F1 | 	add	fp, #12
0d998     A7 14 02 FB | 	rdlong	arg02, fp
0d99c     0C 4E 85 F1 | 	sub	fp, #12
0d9a0     01 16 06 F6 | 	mov	arg03, #1
0d9a4     94 B6 B0 FD | 	call	#__system___float_cmp
0d9a8     00 FA 55 F2 | 	cmps	result1, #0 wc
0d9ac     00 1E 26 C6 |  if_b	not	local01, #0
0d9b0     A7 1E 62 FC | 	wrlong	local01, fp
0d9b4     98 01 90 FD | 	jmp	#LR__1123
0d9b8                 | LR__1117
0d9b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
0d9b8     08 4E 05 F1 | 	add	fp, #8
0d9bc     A7 1E 02 FB | 	rdlong	local01, fp
0d9c0     08 4E 85 F1 | 	sub	fp, #8
0d9c4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0d9c8     14 4E 05 A1 |  if_e	add	fp, #20
0d9cc     A7 22 02 AB |  if_e	rdlong	local03, fp
0d9d0     14 4E 85 A1 |  if_e	sub	fp, #20
0d9d4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0d9d8     20 00 90 5D |  if_ne	jmp	#LR__1118
0d9dc     A7 20 02 FB | 	rdlong	local02, fp
0d9e0     0C 4E 05 F1 | 	add	fp, #12
0d9e4     A7 22 02 FB | 	rdlong	local03, fp
0d9e8     0C 4E 85 F1 | 	sub	fp, #12
0d9ec     11 21 52 F2 | 	cmps	local02, local03 wc
0d9f0     0F 1F A2 F1 | 	subx	local01, local01
0d9f4     A7 1E 62 FC | 	wrlong	local01, fp
0d9f8     54 01 90 FD | 	jmp	#LR__1123
0d9fc                 | LR__1118
0d9fc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
0d9fc     08 4E 05 F1 | 	add	fp, #8
0da00     A7 1E 02 FB | 	rdlong	local01, fp
0da04     08 4E 85 F1 | 	sub	fp, #8
0da08     1D 1E 0E F2 | 	cmp	local01, #29 wz
0da0c     14 4E 05 A1 |  if_e	add	fp, #20
0da10     A7 22 02 AB |  if_e	rdlong	local03, fp
0da14     14 4E 85 A1 |  if_e	sub	fp, #20
0da18     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0da1c     20 00 90 5D |  if_ne	jmp	#LR__1119
0da20     A7 20 02 FB | 	rdlong	local02, fp
0da24     0C 4E 05 F1 | 	add	fp, #12
0da28     A7 22 02 FB | 	rdlong	local03, fp
0da2c     0C 4E 85 F1 | 	sub	fp, #12
0da30     11 21 12 F2 | 	cmp	local02, local03 wc
0da34     0F 1F A2 F1 | 	subx	local01, local01
0da38     A7 1E 62 FC | 	wrlong	local01, fp
0da3c     10 01 90 FD | 	jmp	#LR__1123
0da40                 | LR__1119
0da40                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
0da40     08 4E 05 F1 | 	add	fp, #8
0da44     A7 1E 02 FB | 	rdlong	local01, fp
0da48     08 4E 85 F1 | 	sub	fp, #8
0da4c     2B 1E 0E F2 | 	cmp	local01, #43 wz
0da50     14 4E 05 A1 |  if_e	add	fp, #20
0da54     A7 22 02 AB |  if_e	rdlong	local03, fp
0da58     14 4E 85 A1 |  if_e	sub	fp, #20
0da5c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0da60     30 00 90 5D |  if_ne	jmp	#LR__1120
0da64     00 1E 06 F6 | 	mov	local01, #0
0da68     A7 12 02 FB | 	rdlong	arg01, fp
0da6c     8C CD BF FD | 	call	#_convertstring
0da70     FD 12 02 F6 | 	mov	arg01, result1
0da74     0C 4E 05 F1 | 	add	fp, #12
0da78     A7 14 02 FB | 	rdlong	arg02, fp
0da7c     0C 4E 85 F1 | 	sub	fp, #12
0da80     9C 88 B0 FD | 	call	#__system___string_cmp
0da84     00 FA 55 F2 | 	cmps	result1, #0 wc
0da88     00 1E 26 C6 |  if_b	not	local01, #0
0da8c     A7 1E 62 FC | 	wrlong	local01, fp
0da90     BC 00 90 FD | 	jmp	#LR__1123
0da94                 | LR__1120
0da94                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
0da94     08 4E 05 F1 | 	add	fp, #8
0da98     A7 1E 02 FB | 	rdlong	local01, fp
0da9c     08 4E 85 F1 | 	sub	fp, #8
0daa0     1F 1E 0E F2 | 	cmp	local01, #31 wz
0daa4     14 4E 05 A1 |  if_e	add	fp, #20
0daa8     A7 22 02 AB |  if_e	rdlong	local03, fp
0daac     14 4E 85 A1 |  if_e	sub	fp, #20
0dab0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0dab4     34 00 90 5D |  if_ne	jmp	#LR__1121
0dab8     00 1E 06 F6 | 	mov	local01, #0
0dabc     A7 20 02 FB | 	rdlong	local02, fp
0dac0     0C 4E 05 F1 | 	add	fp, #12
0dac4     A7 12 02 FB | 	rdlong	arg01, fp
0dac8     0C 4E 85 F1 | 	sub	fp, #12
0dacc     2C CD BF FD | 	call	#_convertstring
0dad0     FD 14 02 F6 | 	mov	arg02, result1
0dad4     10 13 02 F6 | 	mov	arg01, local02
0dad8     44 88 B0 FD | 	call	#__system___string_cmp
0dadc     00 FA 55 F2 | 	cmps	result1, #0 wc
0dae0     00 1E 26 C6 |  if_b	not	local01, #0
0dae4     A7 1E 62 FC | 	wrlong	local01, fp
0dae8     64 00 90 FD | 	jmp	#LR__1123
0daec                 | LR__1121
0daec                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
0daec     08 4E 05 F1 | 	add	fp, #8
0daf0     A7 1E 02 FB | 	rdlong	local01, fp
0daf4     08 4E 85 F1 | 	sub	fp, #8
0daf8     2B 1E 0E F2 | 	cmp	local01, #43 wz
0dafc     14 4E 05 A1 |  if_e	add	fp, #20
0db00     A7 22 02 AB |  if_e	rdlong	local03, fp
0db04     14 4E 85 A1 |  if_e	sub	fp, #20
0db08     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0db0c     3C 00 90 5D |  if_ne	jmp	#LR__1122
0db10     00 1E 06 F6 | 	mov	local01, #0
0db14     A7 12 02 FB | 	rdlong	arg01, fp
0db18     E0 CC BF FD | 	call	#_convertstring
0db1c     FD 20 02 F6 | 	mov	local02, result1
0db20     0C 4E 05 F1 | 	add	fp, #12
0db24     A7 12 02 FB | 	rdlong	arg01, fp
0db28     0C 4E 85 F1 | 	sub	fp, #12
0db2c     CC CC BF FD | 	call	#_convertstring
0db30     FD 14 02 F6 | 	mov	arg02, result1
0db34     10 13 02 F6 | 	mov	arg01, local02
0db38     E4 87 B0 FD | 	call	#__system___string_cmp
0db3c     00 FA 55 F2 | 	cmps	result1, #0 wc
0db40     00 1E 26 C6 |  if_b	not	local01, #0
0db44     A7 1E 62 FC | 	wrlong	local01, fp
0db48     04 00 90 FD | 	jmp	#LR__1123
0db4c                 | LR__1122
0db4c     A7 00 68 FC | 	wrlong	#0, fp
0db50                 | LR__1123
0db50     08 4E 05 F1 | 	add	fp, #8
0db54     A7 38 68 FC | 	wrlong	#28, fp
0db58     08 4E 85 F1 | 	sub	fp, #8
0db5c     A7 12 02 F6 | 	mov	arg01, fp
0db60     44 B0 BF FD | 	call	#_push
0db64     A7 F0 03 F6 | 	mov	ptra, fp
0db68     B2 00 A0 FD | 	call	#popregs_
0db6c                 | _do_lt_ret
0db6c     2D 00 64 FD | 	ret
0db70                 | 
0db70                 | ' 
0db70                 | ' sub do_ge
0db70                 | _do_ge
0db70     05 4A 05 F6 | 	mov	COUNT_, #5
0db74     A8 00 A0 FD | 	call	#pushregs_
0db78     18 F0 07 F1 | 	add	ptra, #24
0db7c     90 AF BF FD | 	call	#_pop
0db80     FD 1E 02 F6 | 	mov	local01, result1
0db84     FE 20 02 F6 | 	mov	local02, result2
0db88     FF 22 02 F6 | 	mov	local03, result3
0db8c     0C 4E 05 F1 | 	add	fp, #12
0db90     A7 1E 62 FC | 	wrlong	local01, fp
0db94     04 4E 05 F1 | 	add	fp, #4
0db98     A7 20 62 FC | 	wrlong	local02, fp
0db9c     04 4E 05 F1 | 	add	fp, #4
0dba0     A7 22 62 FC | 	wrlong	local03, fp
0dba4     14 4E 85 F1 | 	sub	fp, #20
0dba8     64 AF BF FD | 	call	#_pop
0dbac     FF 22 02 F6 | 	mov	local03, result3
0dbb0     A7 FA 61 FC | 	wrlong	result1, fp
0dbb4     04 4E 05 F1 | 	add	fp, #4
0dbb8     A7 FC 61 FC | 	wrlong	result2, fp
0dbbc     04 4E 05 F1 | 	add	fp, #4
0dbc0     A7 22 62 FC | 	wrlong	local03, fp
0dbc4                 | ' t2=pop()
0dbc4                 | ' t1=pop()
0dbc4                 | ' 
0dbc4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
0dbc4     08 4E 85 F1 | 	sub	fp, #8
0dbc8     1F 22 0E F2 | 	cmp	local03, #31 wz
0dbcc     14 4E 05 A1 |  if_e	add	fp, #20
0dbd0     A7 24 02 AB |  if_e	rdlong	local04, fp
0dbd4     14 4E 85 A1 |  if_e	sub	fp, #20
0dbd8     12 23 02 A6 |  if_e	mov	local03, local04
0dbdc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0dbe0     28 00 90 5D |  if_ne	jmp	#LR__1130
0dbe4     00 1E 06 F6 | 	mov	local01, #0
0dbe8     A7 12 02 FB | 	rdlong	arg01, fp
0dbec     0C 4E 05 F1 | 	add	fp, #12
0dbf0     A7 14 02 FB | 	rdlong	arg02, fp
0dbf4     0C 4E 85 F1 | 	sub	fp, #12
0dbf8     24 87 B0 FD | 	call	#__system___string_cmp
0dbfc     00 FA 55 F2 | 	cmps	result1, #0 wc
0dc00     00 1E 26 36 |  if_ae	not	local01, #0
0dc04     A7 1E 62 FC | 	wrlong	local01, fp
0dc08     1C 04 90 FD | 	jmp	#LR__1143
0dc0c                 | LR__1130
0dc0c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
0dc0c     08 4E 05 F1 | 	add	fp, #8
0dc10     A7 1E 02 FB | 	rdlong	local01, fp
0dc14     08 4E 85 F1 | 	sub	fp, #8
0dc18     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dc1c     14 4E 05 A1 |  if_e	add	fp, #20
0dc20     A7 24 02 AB |  if_e	rdlong	local04, fp
0dc24     14 4E 85 A1 |  if_e	sub	fp, #20
0dc28     12 23 02 A6 |  if_e	mov	local03, local04
0dc2c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dc30     2C 00 90 5D |  if_ne	jmp	#LR__1131
0dc34     00 1E 06 F6 | 	mov	local01, #0
0dc38     A7 12 02 FB | 	rdlong	arg01, fp
0dc3c     0C 4E 05 F1 | 	add	fp, #12
0dc40     A7 14 02 FB | 	rdlong	arg02, fp
0dc44     0C 4E 85 F1 | 	sub	fp, #12
0dc48     01 16 66 F6 | 	neg	arg03, #1
0dc4c     EC B3 B0 FD | 	call	#__system___float_cmp
0dc50     00 FA 55 F2 | 	cmps	result1, #0 wc
0dc54     00 1E 26 36 |  if_ae	not	local01, #0
0dc58     A7 1E 62 FC | 	wrlong	local01, fp
0dc5c     C8 03 90 FD | 	jmp	#LR__1143
0dc60                 | LR__1131
0dc60                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
0dc60     08 4E 05 F1 | 	add	fp, #8
0dc64     A7 1E 02 FB | 	rdlong	local01, fp
0dc68     08 4E 85 F1 | 	sub	fp, #8
0dc6c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dc70     14 4E 05 A1 |  if_e	add	fp, #20
0dc74     A7 24 02 AB |  if_e	rdlong	local04, fp
0dc78     14 4E 85 A1 |  if_e	sub	fp, #20
0dc7c     12 23 02 A6 |  if_e	mov	local03, local04
0dc80     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dc84     48 00 90 5D |  if_ne	jmp	#LR__1132
0dc88     00 1E 06 F6 | 	mov	local01, #0
0dc8c     A7 20 02 FB | 	rdlong	local02, fp
0dc90     0C 4E 05 F1 | 	add	fp, #12
0dc94     A7 12 02 FB | 	rdlong	arg01, fp
0dc98     0C 4E 85 F1 | 	sub	fp, #12
0dc9c     09 13 52 F6 | 	abs	arg01, arg01 wc
0dca0     1F 26 C6 C9 |  if_b	decod	local05, #31
0dca4     00 26 06 36 |  if_ae	mov	local05, #0
0dca8     30 AC B0 FD | 	call	#__system___float_fromuns
0dcac     13 FB 61 F5 | 	xor	result1, local05
0dcb0     FD 14 02 F6 | 	mov	arg02, result1
0dcb4     10 13 02 F6 | 	mov	arg01, local02
0dcb8     01 16 66 F6 | 	neg	arg03, #1
0dcbc     7C B3 B0 FD | 	call	#__system___float_cmp
0dcc0     00 FA 55 F2 | 	cmps	result1, #0 wc
0dcc4     00 1E 26 36 |  if_ae	not	local01, #0
0dcc8     A7 1E 62 FC | 	wrlong	local01, fp
0dccc     58 03 90 FD | 	jmp	#LR__1143
0dcd0                 | LR__1132
0dcd0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
0dcd0     08 4E 05 F1 | 	add	fp, #8
0dcd4     A7 1E 02 FB | 	rdlong	local01, fp
0dcd8     08 4E 85 F1 | 	sub	fp, #8
0dcdc     1E 1E 0E F2 | 	cmp	local01, #30 wz
0dce0     14 4E 05 A1 |  if_e	add	fp, #20
0dce4     A7 24 02 AB |  if_e	rdlong	local04, fp
0dce8     14 4E 85 A1 |  if_e	sub	fp, #20
0dcec     12 23 02 A6 |  if_e	mov	local03, local04
0dcf0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0dcf4     38 00 90 5D |  if_ne	jmp	#LR__1133
0dcf8     00 1E 06 F6 | 	mov	local01, #0
0dcfc     A7 20 02 FB | 	rdlong	local02, fp
0dd00     0C 4E 05 F1 | 	add	fp, #12
0dd04     A7 12 02 FB | 	rdlong	arg01, fp
0dd08     0C 4E 85 F1 | 	sub	fp, #12
0dd0c     CC AB B0 FD | 	call	#__system___float_fromuns
0dd10     FD 14 02 F6 | 	mov	arg02, result1
0dd14     10 13 02 F6 | 	mov	arg01, local02
0dd18     01 16 66 F6 | 	neg	arg03, #1
0dd1c     1C B3 B0 FD | 	call	#__system___float_cmp
0dd20     00 FA 55 F2 | 	cmps	result1, #0 wc
0dd24     00 1E 26 36 |  if_ae	not	local01, #0
0dd28     A7 1E 62 FC | 	wrlong	local01, fp
0dd2c     F8 02 90 FD | 	jmp	#LR__1143
0dd30                 | LR__1133
0dd30                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
0dd30     08 4E 05 F1 | 	add	fp, #8
0dd34     A7 1E 02 FB | 	rdlong	local01, fp
0dd38     08 4E 85 F1 | 	sub	fp, #8
0dd3c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dd40     14 4E 05 A1 |  if_e	add	fp, #20
0dd44     A7 24 02 AB |  if_e	rdlong	local04, fp
0dd48     14 4E 85 A1 |  if_e	sub	fp, #20
0dd4c     12 23 02 A6 |  if_e	mov	local03, local04
0dd50     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0dd54     44 00 90 5D |  if_ne	jmp	#LR__1134
0dd58     00 1E 06 F6 | 	mov	local01, #0
0dd5c     A7 12 02 FB | 	rdlong	arg01, fp
0dd60     09 13 52 F6 | 	abs	arg01, arg01 wc
0dd64     1F 26 C6 C9 |  if_b	decod	local05, #31
0dd68     00 26 06 36 |  if_ae	mov	local05, #0
0dd6c     6C AB B0 FD | 	call	#__system___float_fromuns
0dd70     13 FB 61 F5 | 	xor	result1, local05
0dd74     FD 12 02 F6 | 	mov	arg01, result1
0dd78     0C 4E 05 F1 | 	add	fp, #12
0dd7c     A7 14 02 FB | 	rdlong	arg02, fp
0dd80     0C 4E 85 F1 | 	sub	fp, #12
0dd84     01 16 66 F6 | 	neg	arg03, #1
0dd88     B0 B2 B0 FD | 	call	#__system___float_cmp
0dd8c     00 FA 55 F2 | 	cmps	result1, #0 wc
0dd90     00 1E 26 36 |  if_ae	not	local01, #0
0dd94     A7 1E 62 FC | 	wrlong	local01, fp
0dd98     8C 02 90 FD | 	jmp	#LR__1143
0dd9c                 | LR__1134
0dd9c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
0dd9c     08 4E 05 F1 | 	add	fp, #8
0dda0     A7 1E 02 FB | 	rdlong	local01, fp
0dda4     08 4E 85 F1 | 	sub	fp, #8
0dda8     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ddac     14 4E 05 A1 |  if_e	add	fp, #20
0ddb0     A7 24 02 AB |  if_e	rdlong	local04, fp
0ddb4     14 4E 85 A1 |  if_e	sub	fp, #20
0ddb8     12 23 02 A6 |  if_e	mov	local03, local04
0ddbc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0ddc0     24 00 90 5D |  if_ne	jmp	#LR__1135
0ddc4     00 1E 06 F6 | 	mov	local01, #0
0ddc8     A7 20 02 FB | 	rdlong	local02, fp
0ddcc     0C 4E 05 F1 | 	add	fp, #12
0ddd0     A7 22 02 FB | 	rdlong	local03, fp
0ddd4     0C 4E 85 F1 | 	sub	fp, #12
0ddd8     11 21 52 F2 | 	cmps	local02, local03 wc
0dddc     01 1E 66 36 |  if_ae	neg	local01, #1
0dde0     A7 1E 62 FC | 	wrlong	local01, fp
0dde4     40 02 90 FD | 	jmp	#LR__1143
0dde8                 | LR__1135
0dde8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
0dde8     08 4E 05 F1 | 	add	fp, #8
0ddec     A7 1E 02 FB | 	rdlong	local01, fp
0ddf0     08 4E 85 F1 | 	sub	fp, #8
0ddf4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ddf8     14 4E 05 A1 |  if_e	add	fp, #20
0ddfc     A7 24 02 AB |  if_e	rdlong	local04, fp
0de00     14 4E 85 A1 |  if_e	sub	fp, #20
0de04     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0de08     24 00 90 5D |  if_ne	jmp	#LR__1136
0de0c     00 1E 06 F6 | 	mov	local01, #0
0de10     A7 20 02 FB | 	rdlong	local02, fp
0de14     0C 4E 05 F1 | 	add	fp, #12
0de18     A7 22 02 FB | 	rdlong	local03, fp
0de1c     0C 4E 85 F1 | 	sub	fp, #12
0de20     11 21 52 F2 | 	cmps	local02, local03 wc
0de24     01 1E 66 36 |  if_ae	neg	local01, #1
0de28     A7 1E 62 FC | 	wrlong	local01, fp
0de2c     F8 01 90 FD | 	jmp	#LR__1143
0de30                 | LR__1136
0de30                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
0de30     08 4E 05 F1 | 	add	fp, #8
0de34     A7 1E 02 FB | 	rdlong	local01, fp
0de38     08 4E 85 F1 | 	sub	fp, #8
0de3c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0de40     14 4E 05 A1 |  if_e	add	fp, #20
0de44     A7 22 02 AB |  if_e	rdlong	local03, fp
0de48     14 4E 85 A1 |  if_e	sub	fp, #20
0de4c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0de50     34 00 90 5D |  if_ne	jmp	#LR__1137
0de54     00 1E 06 F6 | 	mov	local01, #0
0de58     A7 12 02 FB | 	rdlong	arg01, fp
0de5c     7C AA B0 FD | 	call	#__system___float_fromuns
0de60     FD 12 02 F6 | 	mov	arg01, result1
0de64     0C 4E 05 F1 | 	add	fp, #12
0de68     A7 14 02 FB | 	rdlong	arg02, fp
0de6c     0C 4E 85 F1 | 	sub	fp, #12
0de70     01 16 66 F6 | 	neg	arg03, #1
0de74     C4 B1 B0 FD | 	call	#__system___float_cmp
0de78     00 FA 55 F2 | 	cmps	result1, #0 wc
0de7c     00 1E 26 36 |  if_ae	not	local01, #0
0de80     A7 1E 62 FC | 	wrlong	local01, fp
0de84     A0 01 90 FD | 	jmp	#LR__1143
0de88                 | LR__1137
0de88                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
0de88     08 4E 05 F1 | 	add	fp, #8
0de8c     A7 1E 02 FB | 	rdlong	local01, fp
0de90     08 4E 85 F1 | 	sub	fp, #8
0de94     1D 1E 0E F2 | 	cmp	local01, #29 wz
0de98     14 4E 05 A1 |  if_e	add	fp, #20
0de9c     A7 22 02 AB |  if_e	rdlong	local03, fp
0dea0     14 4E 85 A1 |  if_e	sub	fp, #20
0dea4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0dea8     24 00 90 5D |  if_ne	jmp	#LR__1138
0deac     00 1E 06 F6 | 	mov	local01, #0
0deb0     A7 20 02 FB | 	rdlong	local02, fp
0deb4     0C 4E 05 F1 | 	add	fp, #12
0deb8     A7 22 02 FB | 	rdlong	local03, fp
0debc     0C 4E 85 F1 | 	sub	fp, #12
0dec0     11 21 52 F2 | 	cmps	local02, local03 wc
0dec4     01 1E 66 36 |  if_ae	neg	local01, #1
0dec8     A7 1E 62 FC | 	wrlong	local01, fp
0decc     58 01 90 FD | 	jmp	#LR__1143
0ded0                 | LR__1138
0ded0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
0ded0     08 4E 05 F1 | 	add	fp, #8
0ded4     A7 1E 02 FB | 	rdlong	local01, fp
0ded8     08 4E 85 F1 | 	sub	fp, #8
0dedc     1D 1E 0E F2 | 	cmp	local01, #29 wz
0dee0     14 4E 05 A1 |  if_e	add	fp, #20
0dee4     A7 22 02 AB |  if_e	rdlong	local03, fp
0dee8     14 4E 85 A1 |  if_e	sub	fp, #20
0deec     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0def0     24 00 90 5D |  if_ne	jmp	#LR__1139
0def4     00 1E 06 F6 | 	mov	local01, #0
0def8     A7 20 02 FB | 	rdlong	local02, fp
0defc     0C 4E 05 F1 | 	add	fp, #12
0df00     A7 22 02 FB | 	rdlong	local03, fp
0df04     0C 4E 85 F1 | 	sub	fp, #12
0df08     11 21 12 F2 | 	cmp	local02, local03 wc
0df0c     01 1E 66 36 |  if_ae	neg	local01, #1
0df10     A7 1E 62 FC | 	wrlong	local01, fp
0df14     10 01 90 FD | 	jmp	#LR__1143
0df18                 | LR__1139
0df18                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
0df18     08 4E 05 F1 | 	add	fp, #8
0df1c     A7 1E 02 FB | 	rdlong	local01, fp
0df20     08 4E 85 F1 | 	sub	fp, #8
0df24     2B 1E 0E F2 | 	cmp	local01, #43 wz
0df28     14 4E 05 A1 |  if_e	add	fp, #20
0df2c     A7 22 02 AB |  if_e	rdlong	local03, fp
0df30     14 4E 85 A1 |  if_e	sub	fp, #20
0df34     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0df38     30 00 90 5D |  if_ne	jmp	#LR__1140
0df3c     00 1E 06 F6 | 	mov	local01, #0
0df40     A7 12 02 FB | 	rdlong	arg01, fp
0df44     B4 C8 BF FD | 	call	#_convertstring
0df48     FD 12 02 F6 | 	mov	arg01, result1
0df4c     0C 4E 05 F1 | 	add	fp, #12
0df50     A7 14 02 FB | 	rdlong	arg02, fp
0df54     0C 4E 85 F1 | 	sub	fp, #12
0df58     C4 83 B0 FD | 	call	#__system___string_cmp
0df5c     00 FA 55 F2 | 	cmps	result1, #0 wc
0df60     00 1E 26 36 |  if_ae	not	local01, #0
0df64     A7 1E 62 FC | 	wrlong	local01, fp
0df68     BC 00 90 FD | 	jmp	#LR__1143
0df6c                 | LR__1140
0df6c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
0df6c     08 4E 05 F1 | 	add	fp, #8
0df70     A7 1E 02 FB | 	rdlong	local01, fp
0df74     08 4E 85 F1 | 	sub	fp, #8
0df78     1F 1E 0E F2 | 	cmp	local01, #31 wz
0df7c     14 4E 05 A1 |  if_e	add	fp, #20
0df80     A7 22 02 AB |  if_e	rdlong	local03, fp
0df84     14 4E 85 A1 |  if_e	sub	fp, #20
0df88     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0df8c     34 00 90 5D |  if_ne	jmp	#LR__1141
0df90     00 1E 06 F6 | 	mov	local01, #0
0df94     A7 20 02 FB | 	rdlong	local02, fp
0df98     0C 4E 05 F1 | 	add	fp, #12
0df9c     A7 12 02 FB | 	rdlong	arg01, fp
0dfa0     0C 4E 85 F1 | 	sub	fp, #12
0dfa4     54 C8 BF FD | 	call	#_convertstring
0dfa8     FD 14 02 F6 | 	mov	arg02, result1
0dfac     10 13 02 F6 | 	mov	arg01, local02
0dfb0     6C 83 B0 FD | 	call	#__system___string_cmp
0dfb4     00 FA 55 F2 | 	cmps	result1, #0 wc
0dfb8     00 1E 26 36 |  if_ae	not	local01, #0
0dfbc     A7 1E 62 FC | 	wrlong	local01, fp
0dfc0     64 00 90 FD | 	jmp	#LR__1143
0dfc4                 | LR__1141
0dfc4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
0dfc4     08 4E 05 F1 | 	add	fp, #8
0dfc8     A7 1E 02 FB | 	rdlong	local01, fp
0dfcc     08 4E 85 F1 | 	sub	fp, #8
0dfd0     2B 1E 0E F2 | 	cmp	local01, #43 wz
0dfd4     14 4E 05 A1 |  if_e	add	fp, #20
0dfd8     A7 22 02 AB |  if_e	rdlong	local03, fp
0dfdc     14 4E 85 A1 |  if_e	sub	fp, #20
0dfe0     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0dfe4     3C 00 90 5D |  if_ne	jmp	#LR__1142
0dfe8     00 1E 06 F6 | 	mov	local01, #0
0dfec     A7 12 02 FB | 	rdlong	arg01, fp
0dff0     08 C8 BF FD | 	call	#_convertstring
0dff4     FD 20 02 F6 | 	mov	local02, result1
0dff8     0C 4E 05 F1 | 	add	fp, #12
0dffc     A7 12 02 FB | 	rdlong	arg01, fp
0e000     0C 4E 85 F1 | 	sub	fp, #12
0e004     F4 C7 BF FD | 	call	#_convertstring
0e008     FD 14 02 F6 | 	mov	arg02, result1
0e00c     10 13 02 F6 | 	mov	arg01, local02
0e010     0C 83 B0 FD | 	call	#__system___string_cmp
0e014     00 FA 55 F2 | 	cmps	result1, #0 wc
0e018     00 1E 26 36 |  if_ae	not	local01, #0
0e01c     A7 1E 62 FC | 	wrlong	local01, fp
0e020     04 00 90 FD | 	jmp	#LR__1143
0e024                 | LR__1142
0e024     A7 00 68 FC | 	wrlong	#0, fp
0e028                 | LR__1143
0e028     08 4E 05 F1 | 	add	fp, #8
0e02c     A7 38 68 FC | 	wrlong	#28, fp
0e030     08 4E 85 F1 | 	sub	fp, #8
0e034     A7 12 02 F6 | 	mov	arg01, fp
0e038     6C AB BF FD | 	call	#_push
0e03c     A7 F0 03 F6 | 	mov	ptra, fp
0e040     B2 00 A0 FD | 	call	#popregs_
0e044                 | _do_ge_ret
0e044     2D 00 64 FD | 	ret
0e048                 | 
0e048                 | ' 
0e048                 | ' sub do_le
0e048                 | _do_le
0e048     05 4A 05 F6 | 	mov	COUNT_, #5
0e04c     A8 00 A0 FD | 	call	#pushregs_
0e050     18 F0 07 F1 | 	add	ptra, #24
0e054     B8 AA BF FD | 	call	#_pop
0e058     FD 1E 02 F6 | 	mov	local01, result1
0e05c     FE 20 02 F6 | 	mov	local02, result2
0e060     FF 22 02 F6 | 	mov	local03, result3
0e064     0C 4E 05 F1 | 	add	fp, #12
0e068     A7 1E 62 FC | 	wrlong	local01, fp
0e06c     04 4E 05 F1 | 	add	fp, #4
0e070     A7 20 62 FC | 	wrlong	local02, fp
0e074     04 4E 05 F1 | 	add	fp, #4
0e078     A7 22 62 FC | 	wrlong	local03, fp
0e07c     14 4E 85 F1 | 	sub	fp, #20
0e080     8C AA BF FD | 	call	#_pop
0e084     FF 22 02 F6 | 	mov	local03, result3
0e088     A7 FA 61 FC | 	wrlong	result1, fp
0e08c     04 4E 05 F1 | 	add	fp, #4
0e090     A7 FC 61 FC | 	wrlong	result2, fp
0e094     04 4E 05 F1 | 	add	fp, #4
0e098     A7 22 62 FC | 	wrlong	local03, fp
0e09c                 | ' t2=pop()
0e09c                 | ' t1=pop()
0e09c                 | ' 
0e09c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
0e09c     08 4E 85 F1 | 	sub	fp, #8
0e0a0     1F 22 0E F2 | 	cmp	local03, #31 wz
0e0a4     14 4E 05 A1 |  if_e	add	fp, #20
0e0a8     A7 24 02 AB |  if_e	rdlong	local04, fp
0e0ac     14 4E 85 A1 |  if_e	sub	fp, #20
0e0b0     12 23 02 A6 |  if_e	mov	local03, local04
0e0b4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0e0b8     28 00 90 5D |  if_ne	jmp	#LR__1150
0e0bc     00 1E 06 F6 | 	mov	local01, #0
0e0c0     A7 12 02 FB | 	rdlong	arg01, fp
0e0c4     0C 4E 05 F1 | 	add	fp, #12
0e0c8     A7 14 02 FB | 	rdlong	arg02, fp
0e0cc     0C 4E 85 F1 | 	sub	fp, #12
0e0d0     4C 82 B0 FD | 	call	#__system___string_cmp
0e0d4     01 FA 55 F2 | 	cmps	result1, #1 wc
0e0d8     00 1E 26 C6 |  if_b	not	local01, #0
0e0dc     A7 1E 62 FC | 	wrlong	local01, fp
0e0e0     1C 04 90 FD | 	jmp	#LR__1163
0e0e4                 | LR__1150
0e0e4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
0e0e4     08 4E 05 F1 | 	add	fp, #8
0e0e8     A7 1E 02 FB | 	rdlong	local01, fp
0e0ec     08 4E 85 F1 | 	sub	fp, #8
0e0f0     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e0f4     14 4E 05 A1 |  if_e	add	fp, #20
0e0f8     A7 24 02 AB |  if_e	rdlong	local04, fp
0e0fc     14 4E 85 A1 |  if_e	sub	fp, #20
0e100     12 23 02 A6 |  if_e	mov	local03, local04
0e104     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e108     2C 00 90 5D |  if_ne	jmp	#LR__1151
0e10c     00 1E 06 F6 | 	mov	local01, #0
0e110     A7 12 02 FB | 	rdlong	arg01, fp
0e114     0C 4E 05 F1 | 	add	fp, #12
0e118     A7 14 02 FB | 	rdlong	arg02, fp
0e11c     0C 4E 85 F1 | 	sub	fp, #12
0e120     01 16 06 F6 | 	mov	arg03, #1
0e124     14 AF B0 FD | 	call	#__system___float_cmp
0e128     01 FA 55 F2 | 	cmps	result1, #1 wc
0e12c     00 1E 26 C6 |  if_b	not	local01, #0
0e130     A7 1E 62 FC | 	wrlong	local01, fp
0e134     C8 03 90 FD | 	jmp	#LR__1163
0e138                 | LR__1151
0e138                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
0e138     08 4E 05 F1 | 	add	fp, #8
0e13c     A7 1E 02 FB | 	rdlong	local01, fp
0e140     08 4E 85 F1 | 	sub	fp, #8
0e144     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e148     14 4E 05 A1 |  if_e	add	fp, #20
0e14c     A7 24 02 AB |  if_e	rdlong	local04, fp
0e150     14 4E 85 A1 |  if_e	sub	fp, #20
0e154     12 23 02 A6 |  if_e	mov	local03, local04
0e158     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e15c     48 00 90 5D |  if_ne	jmp	#LR__1152
0e160     00 1E 06 F6 | 	mov	local01, #0
0e164     A7 20 02 FB | 	rdlong	local02, fp
0e168     0C 4E 05 F1 | 	add	fp, #12
0e16c     A7 12 02 FB | 	rdlong	arg01, fp
0e170     0C 4E 85 F1 | 	sub	fp, #12
0e174     09 13 52 F6 | 	abs	arg01, arg01 wc
0e178     1F 26 C6 C9 |  if_b	decod	local05, #31
0e17c     00 26 06 36 |  if_ae	mov	local05, #0
0e180     58 A7 B0 FD | 	call	#__system___float_fromuns
0e184     13 FB 61 F5 | 	xor	result1, local05
0e188     FD 14 02 F6 | 	mov	arg02, result1
0e18c     10 13 02 F6 | 	mov	arg01, local02
0e190     01 16 06 F6 | 	mov	arg03, #1
0e194     A4 AE B0 FD | 	call	#__system___float_cmp
0e198     01 FA 55 F2 | 	cmps	result1, #1 wc
0e19c     00 1E 26 C6 |  if_b	not	local01, #0
0e1a0     A7 1E 62 FC | 	wrlong	local01, fp
0e1a4     58 03 90 FD | 	jmp	#LR__1163
0e1a8                 | LR__1152
0e1a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
0e1a8     08 4E 05 F1 | 	add	fp, #8
0e1ac     A7 1E 02 FB | 	rdlong	local01, fp
0e1b0     08 4E 85 F1 | 	sub	fp, #8
0e1b4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e1b8     14 4E 05 A1 |  if_e	add	fp, #20
0e1bc     A7 24 02 AB |  if_e	rdlong	local04, fp
0e1c0     14 4E 85 A1 |  if_e	sub	fp, #20
0e1c4     12 23 02 A6 |  if_e	mov	local03, local04
0e1c8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e1cc     38 00 90 5D |  if_ne	jmp	#LR__1153
0e1d0     00 1E 06 F6 | 	mov	local01, #0
0e1d4     A7 20 02 FB | 	rdlong	local02, fp
0e1d8     0C 4E 05 F1 | 	add	fp, #12
0e1dc     A7 12 02 FB | 	rdlong	arg01, fp
0e1e0     0C 4E 85 F1 | 	sub	fp, #12
0e1e4     F4 A6 B0 FD | 	call	#__system___float_fromuns
0e1e8     FD 14 02 F6 | 	mov	arg02, result1
0e1ec     10 13 02 F6 | 	mov	arg01, local02
0e1f0     01 16 06 F6 | 	mov	arg03, #1
0e1f4     44 AE B0 FD | 	call	#__system___float_cmp
0e1f8     01 FA 55 F2 | 	cmps	result1, #1 wc
0e1fc     00 1E 26 C6 |  if_b	not	local01, #0
0e200     A7 1E 62 FC | 	wrlong	local01, fp
0e204     F8 02 90 FD | 	jmp	#LR__1163
0e208                 | LR__1153
0e208                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
0e208     08 4E 05 F1 | 	add	fp, #8
0e20c     A7 1E 02 FB | 	rdlong	local01, fp
0e210     08 4E 85 F1 | 	sub	fp, #8
0e214     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e218     14 4E 05 A1 |  if_e	add	fp, #20
0e21c     A7 24 02 AB |  if_e	rdlong	local04, fp
0e220     14 4E 85 A1 |  if_e	sub	fp, #20
0e224     12 23 02 A6 |  if_e	mov	local03, local04
0e228     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e22c     44 00 90 5D |  if_ne	jmp	#LR__1154
0e230     00 1E 06 F6 | 	mov	local01, #0
0e234     A7 12 02 FB | 	rdlong	arg01, fp
0e238     09 13 52 F6 | 	abs	arg01, arg01 wc
0e23c     1F 26 C6 C9 |  if_b	decod	local05, #31
0e240     00 26 06 36 |  if_ae	mov	local05, #0
0e244     94 A6 B0 FD | 	call	#__system___float_fromuns
0e248     13 FB 61 F5 | 	xor	result1, local05
0e24c     FD 12 02 F6 | 	mov	arg01, result1
0e250     0C 4E 05 F1 | 	add	fp, #12
0e254     A7 14 02 FB | 	rdlong	arg02, fp
0e258     0C 4E 85 F1 | 	sub	fp, #12
0e25c     01 16 06 F6 | 	mov	arg03, #1
0e260     D8 AD B0 FD | 	call	#__system___float_cmp
0e264     01 FA 55 F2 | 	cmps	result1, #1 wc
0e268     00 1E 26 C6 |  if_b	not	local01, #0
0e26c     A7 1E 62 FC | 	wrlong	local01, fp
0e270     8C 02 90 FD | 	jmp	#LR__1163
0e274                 | LR__1154
0e274                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
0e274     08 4E 05 F1 | 	add	fp, #8
0e278     A7 1E 02 FB | 	rdlong	local01, fp
0e27c     08 4E 85 F1 | 	sub	fp, #8
0e280     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e284     14 4E 05 A1 |  if_e	add	fp, #20
0e288     A7 24 02 AB |  if_e	rdlong	local04, fp
0e28c     14 4E 85 A1 |  if_e	sub	fp, #20
0e290     12 23 02 A6 |  if_e	mov	local03, local04
0e294     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e298     24 00 90 5D |  if_ne	jmp	#LR__1155
0e29c     00 1E 06 F6 | 	mov	local01, #0
0e2a0     A7 20 02 FB | 	rdlong	local02, fp
0e2a4     0C 4E 05 F1 | 	add	fp, #12
0e2a8     A7 22 02 FB | 	rdlong	local03, fp
0e2ac     0C 4E 85 F1 | 	sub	fp, #12
0e2b0     11 21 5A F2 | 	cmps	local02, local03 wcz
0e2b4     01 1E 66 E6 |  if_be	neg	local01, #1
0e2b8     A7 1E 62 FC | 	wrlong	local01, fp
0e2bc     40 02 90 FD | 	jmp	#LR__1163
0e2c0                 | LR__1155
0e2c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
0e2c0     08 4E 05 F1 | 	add	fp, #8
0e2c4     A7 1E 02 FB | 	rdlong	local01, fp
0e2c8     08 4E 85 F1 | 	sub	fp, #8
0e2cc     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e2d0     14 4E 05 A1 |  if_e	add	fp, #20
0e2d4     A7 24 02 AB |  if_e	rdlong	local04, fp
0e2d8     14 4E 85 A1 |  if_e	sub	fp, #20
0e2dc     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0e2e0     24 00 90 5D |  if_ne	jmp	#LR__1156
0e2e4     00 1E 06 F6 | 	mov	local01, #0
0e2e8     A7 20 02 FB | 	rdlong	local02, fp
0e2ec     0C 4E 05 F1 | 	add	fp, #12
0e2f0     A7 22 02 FB | 	rdlong	local03, fp
0e2f4     0C 4E 85 F1 | 	sub	fp, #12
0e2f8     11 21 5A F2 | 	cmps	local02, local03 wcz
0e2fc     01 1E 66 E6 |  if_be	neg	local01, #1
0e300     A7 1E 62 FC | 	wrlong	local01, fp
0e304     F8 01 90 FD | 	jmp	#LR__1163
0e308                 | LR__1156
0e308                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
0e308     08 4E 05 F1 | 	add	fp, #8
0e30c     A7 1E 02 FB | 	rdlong	local01, fp
0e310     08 4E 85 F1 | 	sub	fp, #8
0e314     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e318     14 4E 05 A1 |  if_e	add	fp, #20
0e31c     A7 22 02 AB |  if_e	rdlong	local03, fp
0e320     14 4E 85 A1 |  if_e	sub	fp, #20
0e324     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e328     34 00 90 5D |  if_ne	jmp	#LR__1157
0e32c     00 1E 06 F6 | 	mov	local01, #0
0e330     A7 12 02 FB | 	rdlong	arg01, fp
0e334     A4 A5 B0 FD | 	call	#__system___float_fromuns
0e338     FD 12 02 F6 | 	mov	arg01, result1
0e33c     0C 4E 05 F1 | 	add	fp, #12
0e340     A7 14 02 FB | 	rdlong	arg02, fp
0e344     0C 4E 85 F1 | 	sub	fp, #12
0e348     01 16 06 F6 | 	mov	arg03, #1
0e34c     EC AC B0 FD | 	call	#__system___float_cmp
0e350     01 FA 55 F2 | 	cmps	result1, #1 wc
0e354     00 1E 26 C6 |  if_b	not	local01, #0
0e358     A7 1E 62 FC | 	wrlong	local01, fp
0e35c     A0 01 90 FD | 	jmp	#LR__1163
0e360                 | LR__1157
0e360                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
0e360     08 4E 05 F1 | 	add	fp, #8
0e364     A7 1E 02 FB | 	rdlong	local01, fp
0e368     08 4E 85 F1 | 	sub	fp, #8
0e36c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e370     14 4E 05 A1 |  if_e	add	fp, #20
0e374     A7 22 02 AB |  if_e	rdlong	local03, fp
0e378     14 4E 85 A1 |  if_e	sub	fp, #20
0e37c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e380     24 00 90 5D |  if_ne	jmp	#LR__1158
0e384     00 1E 06 F6 | 	mov	local01, #0
0e388     A7 20 02 FB | 	rdlong	local02, fp
0e38c     0C 4E 05 F1 | 	add	fp, #12
0e390     A7 22 02 FB | 	rdlong	local03, fp
0e394     0C 4E 85 F1 | 	sub	fp, #12
0e398     11 21 5A F2 | 	cmps	local02, local03 wcz
0e39c     01 1E 66 E6 |  if_be	neg	local01, #1
0e3a0     A7 1E 62 FC | 	wrlong	local01, fp
0e3a4     58 01 90 FD | 	jmp	#LR__1163
0e3a8                 | LR__1158
0e3a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
0e3a8     08 4E 05 F1 | 	add	fp, #8
0e3ac     A7 1E 02 FB | 	rdlong	local01, fp
0e3b0     08 4E 85 F1 | 	sub	fp, #8
0e3b4     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e3b8     14 4E 05 A1 |  if_e	add	fp, #20
0e3bc     A7 22 02 AB |  if_e	rdlong	local03, fp
0e3c0     14 4E 85 A1 |  if_e	sub	fp, #20
0e3c4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e3c8     24 00 90 5D |  if_ne	jmp	#LR__1159
0e3cc     00 1E 06 F6 | 	mov	local01, #0
0e3d0     A7 20 02 FB | 	rdlong	local02, fp
0e3d4     0C 4E 05 F1 | 	add	fp, #12
0e3d8     A7 22 02 FB | 	rdlong	local03, fp
0e3dc     0C 4E 85 F1 | 	sub	fp, #12
0e3e0     11 21 1A F2 | 	cmp	local02, local03 wcz
0e3e4     01 1E 66 E6 |  if_be	neg	local01, #1
0e3e8     A7 1E 62 FC | 	wrlong	local01, fp
0e3ec     10 01 90 FD | 	jmp	#LR__1163
0e3f0                 | LR__1159
0e3f0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
0e3f0     08 4E 05 F1 | 	add	fp, #8
0e3f4     A7 1E 02 FB | 	rdlong	local01, fp
0e3f8     08 4E 85 F1 | 	sub	fp, #8
0e3fc     2B 1E 0E F2 | 	cmp	local01, #43 wz
0e400     14 4E 05 A1 |  if_e	add	fp, #20
0e404     A7 22 02 AB |  if_e	rdlong	local03, fp
0e408     14 4E 85 A1 |  if_e	sub	fp, #20
0e40c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0e410     30 00 90 5D |  if_ne	jmp	#LR__1160
0e414     00 1E 06 F6 | 	mov	local01, #0
0e418     A7 12 02 FB | 	rdlong	arg01, fp
0e41c     DC C3 BF FD | 	call	#_convertstring
0e420     FD 12 02 F6 | 	mov	arg01, result1
0e424     0C 4E 05 F1 | 	add	fp, #12
0e428     A7 14 02 FB | 	rdlong	arg02, fp
0e42c     0C 4E 85 F1 | 	sub	fp, #12
0e430     EC 7E B0 FD | 	call	#__system___string_cmp
0e434     01 FA 55 F2 | 	cmps	result1, #1 wc
0e438     00 1E 26 C6 |  if_b	not	local01, #0
0e43c     A7 1E 62 FC | 	wrlong	local01, fp
0e440     BC 00 90 FD | 	jmp	#LR__1163
0e444                 | LR__1160
0e444                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
0e444     08 4E 05 F1 | 	add	fp, #8
0e448     A7 1E 02 FB | 	rdlong	local01, fp
0e44c     08 4E 85 F1 | 	sub	fp, #8
0e450     1F 1E 0E F2 | 	cmp	local01, #31 wz
0e454     14 4E 05 A1 |  if_e	add	fp, #20
0e458     A7 22 02 AB |  if_e	rdlong	local03, fp
0e45c     14 4E 85 A1 |  if_e	sub	fp, #20
0e460     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0e464     34 00 90 5D |  if_ne	jmp	#LR__1161
0e468     00 1E 06 F6 | 	mov	local01, #0
0e46c     A7 20 02 FB | 	rdlong	local02, fp
0e470     0C 4E 05 F1 | 	add	fp, #12
0e474     A7 12 02 FB | 	rdlong	arg01, fp
0e478     0C 4E 85 F1 | 	sub	fp, #12
0e47c     7C C3 BF FD | 	call	#_convertstring
0e480     FD 14 02 F6 | 	mov	arg02, result1
0e484     10 13 02 F6 | 	mov	arg01, local02
0e488     94 7E B0 FD | 	call	#__system___string_cmp
0e48c     01 FA 55 F2 | 	cmps	result1, #1 wc
0e490     00 1E 26 C6 |  if_b	not	local01, #0
0e494     A7 1E 62 FC | 	wrlong	local01, fp
0e498     64 00 90 FD | 	jmp	#LR__1163
0e49c                 | LR__1161
0e49c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
0e49c     08 4E 05 F1 | 	add	fp, #8
0e4a0     A7 1E 02 FB | 	rdlong	local01, fp
0e4a4     08 4E 85 F1 | 	sub	fp, #8
0e4a8     2B 1E 0E F2 | 	cmp	local01, #43 wz
0e4ac     14 4E 05 A1 |  if_e	add	fp, #20
0e4b0     A7 22 02 AB |  if_e	rdlong	local03, fp
0e4b4     14 4E 85 A1 |  if_e	sub	fp, #20
0e4b8     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0e4bc     3C 00 90 5D |  if_ne	jmp	#LR__1162
0e4c0     00 1E 06 F6 | 	mov	local01, #0
0e4c4     A7 12 02 FB | 	rdlong	arg01, fp
0e4c8     30 C3 BF FD | 	call	#_convertstring
0e4cc     FD 20 02 F6 | 	mov	local02, result1
0e4d0     0C 4E 05 F1 | 	add	fp, #12
0e4d4     A7 12 02 FB | 	rdlong	arg01, fp
0e4d8     0C 4E 85 F1 | 	sub	fp, #12
0e4dc     1C C3 BF FD | 	call	#_convertstring
0e4e0     FD 14 02 F6 | 	mov	arg02, result1
0e4e4     10 13 02 F6 | 	mov	arg01, local02
0e4e8     34 7E B0 FD | 	call	#__system___string_cmp
0e4ec     01 FA 55 F2 | 	cmps	result1, #1 wc
0e4f0     00 1E 26 C6 |  if_b	not	local01, #0
0e4f4     A7 1E 62 FC | 	wrlong	local01, fp
0e4f8     04 00 90 FD | 	jmp	#LR__1163
0e4fc                 | LR__1162
0e4fc     A7 00 68 FC | 	wrlong	#0, fp
0e500                 | LR__1163
0e500     08 4E 05 F1 | 	add	fp, #8
0e504     A7 38 68 FC | 	wrlong	#28, fp
0e508     08 4E 85 F1 | 	sub	fp, #8
0e50c     A7 12 02 F6 | 	mov	arg01, fp
0e510     94 A6 BF FD | 	call	#_push
0e514     A7 F0 03 F6 | 	mov	ptra, fp
0e518     B2 00 A0 FD | 	call	#popregs_
0e51c                 | _do_le_ret
0e51c     2D 00 64 FD | 	ret
0e520                 | 
0e520                 | ' 
0e520                 | ' 
0e520                 | ' sub do_ne
0e520                 | _do_ne
0e520     05 4A 05 F6 | 	mov	COUNT_, #5
0e524     A8 00 A0 FD | 	call	#pushregs_
0e528     18 F0 07 F1 | 	add	ptra, #24
0e52c     E0 A5 BF FD | 	call	#_pop
0e530     FD 1E 02 F6 | 	mov	local01, result1
0e534     FE 20 02 F6 | 	mov	local02, result2
0e538     FF 22 02 F6 | 	mov	local03, result3
0e53c     0C 4E 05 F1 | 	add	fp, #12
0e540     A7 1E 62 FC | 	wrlong	local01, fp
0e544     04 4E 05 F1 | 	add	fp, #4
0e548     A7 20 62 FC | 	wrlong	local02, fp
0e54c     04 4E 05 F1 | 	add	fp, #4
0e550     A7 22 62 FC | 	wrlong	local03, fp
0e554     14 4E 85 F1 | 	sub	fp, #20
0e558     B4 A5 BF FD | 	call	#_pop
0e55c     FF 22 02 F6 | 	mov	local03, result3
0e560     A7 FA 61 FC | 	wrlong	result1, fp
0e564     04 4E 05 F1 | 	add	fp, #4
0e568     A7 FC 61 FC | 	wrlong	result2, fp
0e56c     04 4E 05 F1 | 	add	fp, #4
0e570     A7 22 62 FC | 	wrlong	local03, fp
0e574                 | ' t2=pop()
0e574                 | ' t1=pop()
0e574                 | ' 
0e574                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
0e574     08 4E 85 F1 | 	sub	fp, #8
0e578     1F 22 0E F2 | 	cmp	local03, #31 wz
0e57c     14 4E 05 A1 |  if_e	add	fp, #20
0e580     A7 24 02 AB |  if_e	rdlong	local04, fp
0e584     14 4E 85 A1 |  if_e	sub	fp, #20
0e588     12 23 02 A6 |  if_e	mov	local03, local04
0e58c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0e590     28 00 90 5D |  if_ne	jmp	#LR__1170
0e594     00 1E 06 F6 | 	mov	local01, #0
0e598     A7 12 02 FB | 	rdlong	arg01, fp
0e59c     0C 4E 05 F1 | 	add	fp, #12
0e5a0     A7 14 02 FB | 	rdlong	arg02, fp
0e5a4     0C 4E 85 F1 | 	sub	fp, #12
0e5a8     74 7D B0 FD | 	call	#__system___string_cmp
0e5ac     00 FA 0D F2 | 	cmp	result1, #0 wz
0e5b0     00 1E 26 56 |  if_ne	not	local01, #0
0e5b4     A7 1E 62 FC | 	wrlong	local01, fp
0e5b8     1C 04 90 FD | 	jmp	#LR__1183
0e5bc                 | LR__1170
0e5bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
0e5bc     08 4E 05 F1 | 	add	fp, #8
0e5c0     A7 1E 02 FB | 	rdlong	local01, fp
0e5c4     08 4E 85 F1 | 	sub	fp, #8
0e5c8     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e5cc     14 4E 05 A1 |  if_e	add	fp, #20
0e5d0     A7 24 02 AB |  if_e	rdlong	local04, fp
0e5d4     14 4E 85 A1 |  if_e	sub	fp, #20
0e5d8     12 23 02 A6 |  if_e	mov	local03, local04
0e5dc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e5e0     2C 00 90 5D |  if_ne	jmp	#LR__1171
0e5e4     00 1E 06 F6 | 	mov	local01, #0
0e5e8     A7 12 02 FB | 	rdlong	arg01, fp
0e5ec     0C 4E 05 F1 | 	add	fp, #12
0e5f0     A7 14 02 FB | 	rdlong	arg02, fp
0e5f4     0C 4E 85 F1 | 	sub	fp, #12
0e5f8     01 16 06 F6 | 	mov	arg03, #1
0e5fc     3C AA B0 FD | 	call	#__system___float_cmp
0e600     00 FA 0D F2 | 	cmp	result1, #0 wz
0e604     00 1E 26 56 |  if_ne	not	local01, #0
0e608     A7 1E 62 FC | 	wrlong	local01, fp
0e60c     C8 03 90 FD | 	jmp	#LR__1183
0e610                 | LR__1171
0e610                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
0e610     08 4E 05 F1 | 	add	fp, #8
0e614     A7 1E 02 FB | 	rdlong	local01, fp
0e618     08 4E 85 F1 | 	sub	fp, #8
0e61c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e620     14 4E 05 A1 |  if_e	add	fp, #20
0e624     A7 24 02 AB |  if_e	rdlong	local04, fp
0e628     14 4E 85 A1 |  if_e	sub	fp, #20
0e62c     12 23 02 A6 |  if_e	mov	local03, local04
0e630     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e634     48 00 90 5D |  if_ne	jmp	#LR__1172
0e638     00 1E 06 F6 | 	mov	local01, #0
0e63c     A7 20 02 FB | 	rdlong	local02, fp
0e640     0C 4E 05 F1 | 	add	fp, #12
0e644     A7 12 02 FB | 	rdlong	arg01, fp
0e648     0C 4E 85 F1 | 	sub	fp, #12
0e64c     09 13 52 F6 | 	abs	arg01, arg01 wc
0e650     1F 26 C6 C9 |  if_b	decod	local05, #31
0e654     00 26 06 36 |  if_ae	mov	local05, #0
0e658     80 A2 B0 FD | 	call	#__system___float_fromuns
0e65c     13 FB 61 F5 | 	xor	result1, local05
0e660     FD 14 02 F6 | 	mov	arg02, result1
0e664     10 13 02 F6 | 	mov	arg01, local02
0e668     01 16 06 F6 | 	mov	arg03, #1
0e66c     CC A9 B0 FD | 	call	#__system___float_cmp
0e670     00 FA 0D F2 | 	cmp	result1, #0 wz
0e674     00 1E 26 56 |  if_ne	not	local01, #0
0e678     A7 1E 62 FC | 	wrlong	local01, fp
0e67c     58 03 90 FD | 	jmp	#LR__1183
0e680                 | LR__1172
0e680                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
0e680     08 4E 05 F1 | 	add	fp, #8
0e684     A7 1E 02 FB | 	rdlong	local01, fp
0e688     08 4E 85 F1 | 	sub	fp, #8
0e68c     1E 1E 0E F2 | 	cmp	local01, #30 wz
0e690     14 4E 05 A1 |  if_e	add	fp, #20
0e694     A7 24 02 AB |  if_e	rdlong	local04, fp
0e698     14 4E 85 A1 |  if_e	sub	fp, #20
0e69c     12 23 02 A6 |  if_e	mov	local03, local04
0e6a0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e6a4     38 00 90 5D |  if_ne	jmp	#LR__1173
0e6a8     00 1E 06 F6 | 	mov	local01, #0
0e6ac     A7 20 02 FB | 	rdlong	local02, fp
0e6b0     0C 4E 05 F1 | 	add	fp, #12
0e6b4     A7 12 02 FB | 	rdlong	arg01, fp
0e6b8     0C 4E 85 F1 | 	sub	fp, #12
0e6bc     1C A2 B0 FD | 	call	#__system___float_fromuns
0e6c0     FD 14 02 F6 | 	mov	arg02, result1
0e6c4     10 13 02 F6 | 	mov	arg01, local02
0e6c8     01 16 06 F6 | 	mov	arg03, #1
0e6cc     6C A9 B0 FD | 	call	#__system___float_cmp
0e6d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0e6d4     00 1E 26 56 |  if_ne	not	local01, #0
0e6d8     A7 1E 62 FC | 	wrlong	local01, fp
0e6dc     F8 02 90 FD | 	jmp	#LR__1183
0e6e0                 | LR__1173
0e6e0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
0e6e0     08 4E 05 F1 | 	add	fp, #8
0e6e4     A7 1E 02 FB | 	rdlong	local01, fp
0e6e8     08 4E 85 F1 | 	sub	fp, #8
0e6ec     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e6f0     14 4E 05 A1 |  if_e	add	fp, #20
0e6f4     A7 24 02 AB |  if_e	rdlong	local04, fp
0e6f8     14 4E 85 A1 |  if_e	sub	fp, #20
0e6fc     12 23 02 A6 |  if_e	mov	local03, local04
0e700     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e704     44 00 90 5D |  if_ne	jmp	#LR__1174
0e708     00 1E 06 F6 | 	mov	local01, #0
0e70c     A7 12 02 FB | 	rdlong	arg01, fp
0e710     09 13 52 F6 | 	abs	arg01, arg01 wc
0e714     1F 26 C6 C9 |  if_b	decod	local05, #31
0e718     00 26 06 36 |  if_ae	mov	local05, #0
0e71c     BC A1 B0 FD | 	call	#__system___float_fromuns
0e720     13 FB 61 F5 | 	xor	result1, local05
0e724     FD 12 02 F6 | 	mov	arg01, result1
0e728     0C 4E 05 F1 | 	add	fp, #12
0e72c     A7 14 02 FB | 	rdlong	arg02, fp
0e730     0C 4E 85 F1 | 	sub	fp, #12
0e734     01 16 06 F6 | 	mov	arg03, #1
0e738     00 A9 B0 FD | 	call	#__system___float_cmp
0e73c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e740     00 1E 26 56 |  if_ne	not	local01, #0
0e744     A7 1E 62 FC | 	wrlong	local01, fp
0e748     8C 02 90 FD | 	jmp	#LR__1183
0e74c                 | LR__1174
0e74c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
0e74c     08 4E 05 F1 | 	add	fp, #8
0e750     A7 1E 02 FB | 	rdlong	local01, fp
0e754     08 4E 85 F1 | 	sub	fp, #8
0e758     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e75c     14 4E 05 A1 |  if_e	add	fp, #20
0e760     A7 24 02 AB |  if_e	rdlong	local04, fp
0e764     14 4E 85 A1 |  if_e	sub	fp, #20
0e768     12 23 02 A6 |  if_e	mov	local03, local04
0e76c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e770     24 00 90 5D |  if_ne	jmp	#LR__1175
0e774     00 1E 06 F6 | 	mov	local01, #0
0e778     A7 20 02 FB | 	rdlong	local02, fp
0e77c     0C 4E 05 F1 | 	add	fp, #12
0e780     A7 22 02 FB | 	rdlong	local03, fp
0e784     0C 4E 85 F1 | 	sub	fp, #12
0e788     11 21 0A F2 | 	cmp	local02, local03 wz
0e78c     01 1E 66 56 |  if_ne	neg	local01, #1
0e790     A7 1E 62 FC | 	wrlong	local01, fp
0e794     40 02 90 FD | 	jmp	#LR__1183
0e798                 | LR__1175
0e798                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
0e798     08 4E 05 F1 | 	add	fp, #8
0e79c     A7 1E 02 FB | 	rdlong	local01, fp
0e7a0     08 4E 85 F1 | 	sub	fp, #8
0e7a4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0e7a8     14 4E 05 A1 |  if_e	add	fp, #20
0e7ac     A7 24 02 AB |  if_e	rdlong	local04, fp
0e7b0     14 4E 85 A1 |  if_e	sub	fp, #20
0e7b4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
0e7b8     24 00 90 5D |  if_ne	jmp	#LR__1176
0e7bc     00 1E 06 F6 | 	mov	local01, #0
0e7c0     A7 20 02 FB | 	rdlong	local02, fp
0e7c4     0C 4E 05 F1 | 	add	fp, #12
0e7c8     A7 22 02 FB | 	rdlong	local03, fp
0e7cc     0C 4E 85 F1 | 	sub	fp, #12
0e7d0     11 21 0A F2 | 	cmp	local02, local03 wz
0e7d4     01 1E 66 56 |  if_ne	neg	local01, #1
0e7d8     A7 1E 62 FC | 	wrlong	local01, fp
0e7dc     F8 01 90 FD | 	jmp	#LR__1183
0e7e0                 | LR__1176
0e7e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
0e7e0     08 4E 05 F1 | 	add	fp, #8
0e7e4     A7 1E 02 FB | 	rdlong	local01, fp
0e7e8     08 4E 85 F1 | 	sub	fp, #8
0e7ec     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e7f0     14 4E 05 A1 |  if_e	add	fp, #20
0e7f4     A7 22 02 AB |  if_e	rdlong	local03, fp
0e7f8     14 4E 85 A1 |  if_e	sub	fp, #20
0e7fc     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
0e800     34 00 90 5D |  if_ne	jmp	#LR__1177
0e804     00 1E 06 F6 | 	mov	local01, #0
0e808     A7 12 02 FB | 	rdlong	arg01, fp
0e80c     CC A0 B0 FD | 	call	#__system___float_fromuns
0e810     FD 12 02 F6 | 	mov	arg01, result1
0e814     0C 4E 05 F1 | 	add	fp, #12
0e818     A7 14 02 FB | 	rdlong	arg02, fp
0e81c     0C 4E 85 F1 | 	sub	fp, #12
0e820     01 16 06 F6 | 	mov	arg03, #1
0e824     14 A8 B0 FD | 	call	#__system___float_cmp
0e828     00 FA 0D F2 | 	cmp	result1, #0 wz
0e82c     00 1E 26 56 |  if_ne	not	local01, #0
0e830     A7 1E 62 FC | 	wrlong	local01, fp
0e834     A0 01 90 FD | 	jmp	#LR__1183
0e838                 | LR__1177
0e838                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
0e838     08 4E 05 F1 | 	add	fp, #8
0e83c     A7 1E 02 FB | 	rdlong	local01, fp
0e840     08 4E 85 F1 | 	sub	fp, #8
0e844     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e848     14 4E 05 A1 |  if_e	add	fp, #20
0e84c     A7 22 02 AB |  if_e	rdlong	local03, fp
0e850     14 4E 85 A1 |  if_e	sub	fp, #20
0e854     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
0e858     24 00 90 5D |  if_ne	jmp	#LR__1178
0e85c     00 1E 06 F6 | 	mov	local01, #0
0e860     A7 20 02 FB | 	rdlong	local02, fp
0e864     0C 4E 05 F1 | 	add	fp, #12
0e868     A7 22 02 FB | 	rdlong	local03, fp
0e86c     0C 4E 85 F1 | 	sub	fp, #12
0e870     11 21 0A F2 | 	cmp	local02, local03 wz
0e874     01 1E 66 56 |  if_ne	neg	local01, #1
0e878     A7 1E 62 FC | 	wrlong	local01, fp
0e87c     58 01 90 FD | 	jmp	#LR__1183
0e880                 | LR__1178
0e880                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
0e880     08 4E 05 F1 | 	add	fp, #8
0e884     A7 1E 02 FB | 	rdlong	local01, fp
0e888     08 4E 85 F1 | 	sub	fp, #8
0e88c     1D 1E 0E F2 | 	cmp	local01, #29 wz
0e890     14 4E 05 A1 |  if_e	add	fp, #20
0e894     A7 22 02 AB |  if_e	rdlong	local03, fp
0e898     14 4E 85 A1 |  if_e	sub	fp, #20
0e89c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
0e8a0     24 00 90 5D |  if_ne	jmp	#LR__1179
0e8a4     00 1E 06 F6 | 	mov	local01, #0
0e8a8     A7 20 02 FB | 	rdlong	local02, fp
0e8ac     0C 4E 05 F1 | 	add	fp, #12
0e8b0     A7 22 02 FB | 	rdlong	local03, fp
0e8b4     0C 4E 85 F1 | 	sub	fp, #12
0e8b8     11 21 0A F2 | 	cmp	local02, local03 wz
0e8bc     01 1E 66 56 |  if_ne	neg	local01, #1
0e8c0     A7 1E 62 FC | 	wrlong	local01, fp
0e8c4     10 01 90 FD | 	jmp	#LR__1183
0e8c8                 | LR__1179
0e8c8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
0e8c8     08 4E 05 F1 | 	add	fp, #8
0e8cc     A7 1E 02 FB | 	rdlong	local01, fp
0e8d0     08 4E 85 F1 | 	sub	fp, #8
0e8d4     2B 1E 0E F2 | 	cmp	local01, #43 wz
0e8d8     14 4E 05 A1 |  if_e	add	fp, #20
0e8dc     A7 22 02 AB |  if_e	rdlong	local03, fp
0e8e0     14 4E 85 A1 |  if_e	sub	fp, #20
0e8e4     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
0e8e8     30 00 90 5D |  if_ne	jmp	#LR__1180
0e8ec     00 1E 06 F6 | 	mov	local01, #0
0e8f0     A7 12 02 FB | 	rdlong	arg01, fp
0e8f4     04 BF BF FD | 	call	#_convertstring
0e8f8     FD 12 02 F6 | 	mov	arg01, result1
0e8fc     0C 4E 05 F1 | 	add	fp, #12
0e900     A7 14 02 FB | 	rdlong	arg02, fp
0e904     0C 4E 85 F1 | 	sub	fp, #12
0e908     14 7A B0 FD | 	call	#__system___string_cmp
0e90c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e910     00 1E 26 56 |  if_ne	not	local01, #0
0e914     A7 1E 62 FC | 	wrlong	local01, fp
0e918     BC 00 90 FD | 	jmp	#LR__1183
0e91c                 | LR__1180
0e91c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
0e91c     08 4E 05 F1 | 	add	fp, #8
0e920     A7 1E 02 FB | 	rdlong	local01, fp
0e924     08 4E 85 F1 | 	sub	fp, #8
0e928     1F 1E 0E F2 | 	cmp	local01, #31 wz
0e92c     14 4E 05 A1 |  if_e	add	fp, #20
0e930     A7 22 02 AB |  if_e	rdlong	local03, fp
0e934     14 4E 85 A1 |  if_e	sub	fp, #20
0e938     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0e93c     34 00 90 5D |  if_ne	jmp	#LR__1181
0e940     00 1E 06 F6 | 	mov	local01, #0
0e944     A7 20 02 FB | 	rdlong	local02, fp
0e948     0C 4E 05 F1 | 	add	fp, #12
0e94c     A7 12 02 FB | 	rdlong	arg01, fp
0e950     0C 4E 85 F1 | 	sub	fp, #12
0e954     A4 BE BF FD | 	call	#_convertstring
0e958     FD 14 02 F6 | 	mov	arg02, result1
0e95c     10 13 02 F6 | 	mov	arg01, local02
0e960     BC 79 B0 FD | 	call	#__system___string_cmp
0e964     00 FA 0D F2 | 	cmp	result1, #0 wz
0e968     00 1E 26 56 |  if_ne	not	local01, #0
0e96c     A7 1E 62 FC | 	wrlong	local01, fp
0e970     64 00 90 FD | 	jmp	#LR__1183
0e974                 | LR__1181
0e974                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
0e974     08 4E 05 F1 | 	add	fp, #8
0e978     A7 1E 02 FB | 	rdlong	local01, fp
0e97c     08 4E 85 F1 | 	sub	fp, #8
0e980     2B 1E 0E F2 | 	cmp	local01, #43 wz
0e984     14 4E 05 A1 |  if_e	add	fp, #20
0e988     A7 22 02 AB |  if_e	rdlong	local03, fp
0e98c     14 4E 85 A1 |  if_e	sub	fp, #20
0e990     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
0e994     3C 00 90 5D |  if_ne	jmp	#LR__1182
0e998     00 1E 06 F6 | 	mov	local01, #0
0e99c     A7 12 02 FB | 	rdlong	arg01, fp
0e9a0     58 BE BF FD | 	call	#_convertstring
0e9a4     FD 20 02 F6 | 	mov	local02, result1
0e9a8     0C 4E 05 F1 | 	add	fp, #12
0e9ac     A7 12 02 FB | 	rdlong	arg01, fp
0e9b0     0C 4E 85 F1 | 	sub	fp, #12
0e9b4     44 BE BF FD | 	call	#_convertstring
0e9b8     FD 14 02 F6 | 	mov	arg02, result1
0e9bc     10 13 02 F6 | 	mov	arg01, local02
0e9c0     5C 79 B0 FD | 	call	#__system___string_cmp
0e9c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0e9c8     00 1E 26 56 |  if_ne	not	local01, #0
0e9cc     A7 1E 62 FC | 	wrlong	local01, fp
0e9d0     04 00 90 FD | 	jmp	#LR__1183
0e9d4                 | LR__1182
0e9d4     A7 00 68 FC | 	wrlong	#0, fp
0e9d8                 | LR__1183
0e9d8     08 4E 05 F1 | 	add	fp, #8
0e9dc     A7 38 68 FC | 	wrlong	#28, fp
0e9e0     08 4E 85 F1 | 	sub	fp, #8
0e9e4     A7 12 02 F6 | 	mov	arg01, fp
0e9e8     BC A1 BF FD | 	call	#_push
0e9ec     A7 F0 03 F6 | 	mov	ptra, fp
0e9f0     B2 00 A0 FD | 	call	#popregs_
0e9f4                 | _do_ne_ret
0e9f4     2D 00 64 FD | 	ret
0e9f8                 | 
0e9f8                 | ' 
0e9f8                 | ' 
0e9f8                 | ' 
0e9f8                 | ' ' -------------------   convert a variable on the top of stack to integer
0e9f8                 | ' 
0e9f8                 | ' sub do_converttoint
0e9f8                 | _do_converttoint
0e9f8     02 4A 05 F6 | 	mov	COUNT_, #2
0e9fc     A8 00 A0 FD | 	call	#pushregs_
0ea00     18 F0 07 F1 | 	add	ptra, #24
0ea04     08 A1 BF FD | 	call	#_pop
0ea08     FE 1E 02 F6 | 	mov	local01, result2
0ea0c     FF 20 02 F6 | 	mov	local02, result3
0ea10     A7 FA 61 FC | 	wrlong	result1, fp
0ea14     04 4E 05 F1 | 	add	fp, #4
0ea18     A7 1E 62 FC | 	wrlong	local01, fp
0ea1c     04 4E 05 F1 | 	add	fp, #4
0ea20     A7 20 62 FC | 	wrlong	local02, fp
0ea24                 | ' t1=pop() 
0ea24                 | ' select case t1.result_type
0ea24     08 4E 85 F1 | 	sub	fp, #8
0ea28     1C 20 0E F2 | 	cmp	local02, #28 wz
0ea2c     24 00 90 AD |  if_e	jmp	#LR__1190
0ea30     1D 20 0E F2 | 	cmp	local02, #29 wz
0ea34     38 00 90 AD |  if_e	jmp	#LR__1191
0ea38     1E 20 0E F2 | 	cmp	local02, #30 wz
0ea3c     4C 00 90 AD |  if_e	jmp	#LR__1192
0ea40     1F 20 0E F2 | 	cmp	local02, #31 wz
0ea44     68 00 90 AD |  if_e	jmp	#LR__1193
0ea48     FF 20 0E F2 | 	cmp	local02, #255 wz
0ea4c     8C 00 90 AD |  if_e	jmp	#LR__1194
0ea50     A8 00 90 FD | 	jmp	#LR__1195
0ea54                 | LR__1190
0ea54     A7 20 02 FB | 	rdlong	local02, fp
0ea58     0C 4E 05 F1 | 	add	fp, #12
0ea5c     A7 20 62 FC | 	wrlong	local02, fp
0ea60     04 4E 05 F1 | 	add	fp, #4
0ea64     A7 38 68 FC | 	wrlong	#28, fp
0ea68     10 4E 85 F1 | 	sub	fp, #16
0ea6c     A0 00 90 FD | 	jmp	#LR__1196
0ea70                 | LR__1191
0ea70     A7 20 02 FB | 	rdlong	local02, fp
0ea74     0C 4E 05 F1 | 	add	fp, #12
0ea78     A7 20 62 FC | 	wrlong	local02, fp
0ea7c     04 4E 05 F1 | 	add	fp, #4
0ea80     A7 38 68 FC | 	wrlong	#28, fp
0ea84     10 4E 85 F1 | 	sub	fp, #16
0ea88     84 00 90 FD | 	jmp	#LR__1196
0ea8c                 | LR__1192
0ea8c     A7 12 02 FB | 	rdlong	arg01, fp
0ea90     01 14 06 F6 | 	mov	arg02, #1
0ea94     38 A6 B0 FD | 	call	#__system___float_tointeger
0ea98     0C 4E 05 F1 | 	add	fp, #12
0ea9c     A7 FA 61 FC | 	wrlong	result1, fp
0eaa0     04 4E 05 F1 | 	add	fp, #4
0eaa4     A7 38 68 FC | 	wrlong	#28, fp
0eaa8     10 4E 85 F1 | 	sub	fp, #16
0eaac     60 00 90 FD | 	jmp	#LR__1196
0eab0                 | LR__1193
0eab0     A7 12 02 FB | 	rdlong	arg01, fp
0eab4     38 A9 B0 FD | 	call	#__system____builtin_atof
0eab8     FD 12 02 F6 | 	mov	arg01, result1
0eabc     00 14 06 F6 | 	mov	arg02, #0
0eac0     0C A6 B0 FD | 	call	#__system___float_tointeger
0eac4     0C 4E 05 F1 | 	add	fp, #12
0eac8     A7 FA 61 FC | 	wrlong	result1, fp
0eacc     04 4E 05 F1 | 	add	fp, #4
0ead0     A7 38 68 FC | 	wrlong	#28, fp
0ead4     10 4E 85 F1 | 	sub	fp, #16
0ead8     34 00 90 FD | 	jmp	#LR__1196
0eadc                 | LR__1194
0eadc     0C 4E 05 F1 | 	add	fp, #12
0eae0     A7 00 68 FC | 	wrlong	#0, fp
0eae4     0C 4E 85 F1 | 	sub	fp, #12
0eae8     A7 20 02 FB | 	rdlong	local02, fp
0eaec     10 4E 05 F1 | 	add	fp, #16
0eaf0     A7 20 62 FC | 	wrlong	local02, fp
0eaf4     10 4E 85 F1 | 	sub	fp, #16
0eaf8     14 00 90 FD | 	jmp	#LR__1196
0eafc                 | LR__1195
0eafc     0C 4E 05 F1 | 	add	fp, #12
0eb00     A7 00 68 FC | 	wrlong	#0, fp
0eb04     04 4E 05 F1 | 	add	fp, #4
0eb08     A7 02 68 FC | 	wrlong	#1, fp
0eb0c     10 4E 85 F1 | 	sub	fp, #16
0eb10                 | LR__1196
0eb10     0C 4E 05 F1 | 	add	fp, #12
0eb14     A7 20 02 FB | 	rdlong	local02, fp
0eb18     0C 4E 85 F1 | 	sub	fp, #12
0eb1c     A7 20 62 FC | 	wrlong	local02, fp
0eb20     10 4E 05 F1 | 	add	fp, #16
0eb24     A7 20 02 FB | 	rdlong	local02, fp
0eb28     08 4E 85 F1 | 	sub	fp, #8
0eb2c     A7 20 62 FC | 	wrlong	local02, fp
0eb30     08 4E 85 F1 | 	sub	fp, #8
0eb34     A7 12 02 F6 | 	mov	arg01, fp
0eb38     6C A0 BF FD | 	call	#_push
0eb3c     A7 F0 03 F6 | 	mov	ptra, fp
0eb40     B2 00 A0 FD | 	call	#popregs_
0eb44                 | _do_converttoint_ret
0eb44     2D 00 64 FD | 	ret
0eb48                 | 
0eb48                 | ' 
0eb48                 | ' function converttoint (t1 as expr_result) as integer
0eb48                 | _converttoint
0eb48     02 4A 05 F6 | 	mov	COUNT_, #2
0eb4c     A8 00 A0 FD | 	call	#pushregs_
0eb50     09 1F 02 F6 | 	mov	local01, arg01
0eb54                 | ' 
0eb54                 | ' select case t1.result_type
0eb54     08 1E 06 F1 | 	add	local01, #8
0eb58     0F 21 02 FB | 	rdlong	local02, local01
0eb5c     08 1E 86 F1 | 	sub	local01, #8
0eb60     1C 20 86 F1 | 	sub	local02, #28
0eb64     04 20 26 F3 | 	fle	local02, #4
0eb68     30 20 62 FD | 	jmprel	local02
0eb6c                 | LR__1200
0eb6c     10 00 90 FD | 	jmp	#LR__1201
0eb70     14 00 90 FD | 	jmp	#LR__1202
0eb74     18 00 90 FD | 	jmp	#LR__1203
0eb78     24 00 90 FD | 	jmp	#LR__1204
0eb7c     38 00 90 FD | 	jmp	#LR__1205
0eb80                 | LR__1201
0eb80     0F FB 01 FB | 	rdlong	result1, local01
0eb84     34 00 90 FD | 	jmp	#LR__1206
0eb88                 | LR__1202
0eb88     0F FB 01 FB | 	rdlong	result1, local01
0eb8c     2C 00 90 FD | 	jmp	#LR__1206
0eb90                 | LR__1203
0eb90     0F 13 02 FB | 	rdlong	arg01, local01
0eb94     01 14 06 F6 | 	mov	arg02, #1
0eb98     34 A5 B0 FD | 	call	#__system___float_tointeger
0eb9c     1C 00 90 FD | 	jmp	#LR__1206
0eba0                 | LR__1204
0eba0     0F 13 02 FB | 	rdlong	arg01, local01
0eba4     48 A8 B0 FD | 	call	#__system____builtin_atof
0eba8     FD 12 02 F6 | 	mov	arg01, result1
0ebac     00 14 06 F6 | 	mov	arg02, #0
0ebb0     1C A5 B0 FD | 	call	#__system___float_tointeger
0ebb4     04 00 90 FD | 	jmp	#LR__1206
0ebb8                 | LR__1205
0ebb8     00 FA 05 F6 | 	mov	result1, #0
0ebbc                 | LR__1206
0ebbc     A7 F0 03 F6 | 	mov	ptra, fp
0ebc0     B2 00 A0 FD | 	call	#popregs_
0ebc4                 | _converttoint_ret
0ebc4     2D 00 64 FD | 	ret
0ebc8                 | 
0ebc8                 | ' 
0ebc8                 | ' sub do_rnd
0ebc8                 | _do_rnd
0ebc8     01 4A 05 F6 | 	mov	COUNT_, #1
0ebcc     A8 00 A0 FD | 	call	#pushregs_
0ebd0     10 F0 07 F1 | 	add	ptra, #16
0ebd4     41 00 00 FF 
0ebd8     44 E4 05 F1 | 	add	objptr, ##33348
0ebdc     F2 1E 02 FB | 	rdlong	local01, objptr
0ebe0     0F 17 02 F6 | 	mov	arg03, local01
0ebe4     01 16 66 F0 | 	shl	arg03, #1
0ebe8     0F 17 02 F1 | 	add	arg03, local01
0ebec     02 16 66 F0 | 	shl	arg03, #2
0ebf0     03 00 00 FF 
0ebf4     04 E4 85 F1 | 	sub	objptr, ##1540
0ebf8     F2 16 02 F1 | 	add	arg03, objptr
0ebfc     0B 17 02 FB | 	rdlong	arg03, arg03
0ec00     0C 4E 05 F1 | 	add	fp, #12
0ec04     A7 16 62 FC | 	wrlong	arg03, fp
0ec08                 | ' 
0ec08                 | ' numpar=compiledline(lineptr_e).result.uresult
0ec08                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
0ec08     0C 4E 85 F1 | 	sub	fp, #12
0ec0c     02 16 16 F2 | 	cmp	arg03, #2 wc
0ec10     3E 00 00 FF 
0ec14     40 E4 85 F1 | 	sub	objptr, ##31808
0ec18     3C 00 90 CD |  if_b	jmp	#LR__1210
0ec1c     00 12 06 F6 | 	mov	arg01, #0
0ec20     84 CB B0 FD | 	call	#__system___getiolock_0372
0ec24     FD 12 02 F6 | 	mov	arg01, result1
0ec28     CC 76 B0 FD | 	call	#__system___lockmem
0ec2c     2B 01 00 FF 
0ec30     26 15 06 F6 | 	mov	arg02, ##@LR__4328
0ec34     00 12 06 F6 | 	mov	arg01, #0
0ec38     00 16 06 F6 | 	mov	arg03, #0
0ec3c     AC 83 B0 FD | 	call	#__system___basic_print_string
0ec40     00 12 06 F6 | 	mov	arg01, #0
0ec44     60 CB B0 FD | 	call	#__system___getiolock_0372
0ec48     FD 00 68 FC | 	wrlong	#0, result1
0ec4c     27 12 06 F6 | 	mov	arg01, #39
0ec50     84 41 B0 FD | 	call	#_printerror
0ec54     2C 01 90 FD | 	jmp	#LR__1217
0ec58                 | LR__1210
0ec58                 | ' if numpar=0 then
0ec58     0C 4E 05 F1 | 	add	fp, #12
0ec5c     A7 FE 09 FB | 	rdlong	result3, fp wz
0ec60     0C 4E 85 F1 | 	sub	fp, #12
0ec64     20 00 90 5D |  if_ne	jmp	#LR__1211
0ec68     08 4E 05 F1 | 	add	fp, #8
0ec6c     A7 3A 68 FC | 	wrlong	#29, fp
0ec70     08 4E 85 F1 | 	sub	fp, #8
0ec74     1B FA 61 FD | 	getrnd	result1
0ec78     A7 FA 61 FC | 	wrlong	result1, fp
0ec7c     A7 12 02 F6 | 	mov	arg01, fp
0ec80     24 9F BF FD | 	call	#_push
0ec84     FC 00 90 FD | 	jmp	#LR__1216
0ec88                 | LR__1211
0ec88     84 9E BF FD | 	call	#_pop
0ec8c     A7 FA 61 FC | 	wrlong	result1, fp
0ec90     04 4E 05 F1 | 	add	fp, #4
0ec94     A7 FC 61 FC | 	wrlong	result2, fp
0ec98     04 4E 05 F1 | 	add	fp, #4
0ec9c     A7 FE 61 FC | 	wrlong	result3, fp
0eca0                 | '   t1=pop()
0eca0                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
0eca0     08 4E 85 F1 | 	sub	fp, #8
0eca4     1C FE 0D F2 | 	cmp	result3, #28 wz
0eca8     08 4E 05 51 |  if_ne	add	fp, #8
0ecac     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ecb0     08 4E 85 51 |  if_ne	sub	fp, #8
0ecb4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0ecb8     2C 00 90 5D |  if_ne	jmp	#LR__1212
0ecbc     1B FA 61 FD | 	getrnd	result1
0ecc0     A7 1E 02 FB | 	rdlong	local01, fp
0ecc4     0F FB 11 FD | 	qdiv	result1, local01
0ecc8     A7 12 02 F6 | 	mov	arg01, fp
0eccc     19 1E 62 FD | 	getqy	local01
0ecd0     A7 1E 62 FC | 	wrlong	local01, fp
0ecd4     08 4E 05 F1 | 	add	fp, #8
0ecd8     A7 3A 68 FC | 	wrlong	#29, fp
0ecdc     08 4E 85 F1 | 	sub	fp, #8
0ece0     C4 9E BF FD | 	call	#_push
0ece4     9C 00 90 FD | 	jmp	#LR__1215
0ece8                 | LR__1212
0ece8     08 4E 05 F1 | 	add	fp, #8
0ecec     A7 1E 02 FB | 	rdlong	local01, fp
0ecf0     08 4E 85 F1 | 	sub	fp, #8
0ecf4     1E 1E 0E F2 | 	cmp	local01, #30 wz
0ecf8     48 00 90 5D |  if_ne	jmp	#LR__1213
0ecfc     A7 12 02 FB | 	rdlong	arg01, fp
0ed00     00 C0 24 FF 
0ed04     00 14 06 F6 | 	mov	arg02, ##1233125376
0ed08     00 A1 B0 FD | 	call	#__system___float_div
0ed0c     FD 1E 02 F6 | 	mov	local01, result1
0ed10     1B 12 62 FD | 	getrnd	arg01
0ed14     74 13 06 F4 | 	bitl	arg01, #372
0ed18     C0 9B B0 FD | 	call	#__system___float_fromuns
0ed1c     FD 14 02 F6 | 	mov	arg02, result1
0ed20     0F 13 02 F6 | 	mov	arg01, local01
0ed24     E0 9E B0 FD | 	call	#__system___float_mul
0ed28     A7 FA 61 FC | 	wrlong	result1, fp
0ed2c     08 4E 05 F1 | 	add	fp, #8
0ed30     A7 3C 68 FC | 	wrlong	#30, fp
0ed34     08 4E 85 F1 | 	sub	fp, #8
0ed38     A7 12 02 F6 | 	mov	arg01, fp
0ed3c     68 9E BF FD | 	call	#_push
0ed40     40 00 90 FD | 	jmp	#LR__1214
0ed44                 | LR__1213
0ed44                 | '     print "rnd: "; : printerror(40) 
0ed44     00 12 06 F6 | 	mov	arg01, #0
0ed48     5C CA B0 FD | 	call	#__system___getiolock_0372
0ed4c     FD 12 02 F6 | 	mov	arg01, result1
0ed50     A4 75 B0 FD | 	call	#__system___lockmem
0ed54     2B 01 00 FF 
0ed58     2C 15 06 F6 | 	mov	arg02, ##@LR__4329
0ed5c     00 12 06 F6 | 	mov	arg01, #0
0ed60     00 16 06 F6 | 	mov	arg03, #0
0ed64     84 82 B0 FD | 	call	#__system___basic_print_string
0ed68     00 12 06 F6 | 	mov	arg01, #0
0ed6c     38 CA B0 FD | 	call	#__system___getiolock_0372
0ed70     FD 00 68 FC | 	wrlong	#0, result1
0ed74     28 12 06 F6 | 	mov	arg01, #40
0ed78     5C 40 B0 FD | 	call	#_printerror
0ed7c     A7 12 02 F6 | 	mov	arg01, fp
0ed80     24 9E BF FD | 	call	#_push
0ed84                 | LR__1214
0ed84                 | LR__1215
0ed84                 | LR__1216
0ed84                 | LR__1217
0ed84     A7 F0 03 F6 | 	mov	ptra, fp
0ed88     B2 00 A0 FD | 	call	#popregs_
0ed8c                 | _do_rnd_ret
0ed8c     2D 00 64 FD | 	ret
0ed90                 | 
0ed90                 | ' 
0ed90                 | ' sub do_sin
0ed90                 | _do_sin
0ed90     03 4A 05 F6 | 	mov	COUNT_, #3
0ed94     A8 00 A0 FD | 	call	#pushregs_
0ed98     10 F0 07 F1 | 	add	ptra, #16
0ed9c     41 00 00 FF 
0eda0     44 E4 05 F1 | 	add	objptr, ##33348
0eda4     F2 1E 02 FB | 	rdlong	local01, objptr
0eda8     0F 17 02 F6 | 	mov	arg03, local01
0edac     01 16 66 F0 | 	shl	arg03, #1
0edb0     0F 17 02 F1 | 	add	arg03, local01
0edb4     02 16 66 F0 | 	shl	arg03, #2
0edb8     03 00 00 FF 
0edbc     04 E4 85 F1 | 	sub	objptr, ##1540
0edc0     F2 16 02 F1 | 	add	arg03, objptr
0edc4     0B 17 02 FB | 	rdlong	arg03, arg03
0edc8     0C 4E 05 F1 | 	add	fp, #12
0edcc     A7 16 62 FC | 	wrlong	arg03, fp
0edd0                 | ' 
0edd0                 | ' numpar=compiledline(lineptr_e).result.uresult
0edd0                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
0edd0     0C 4E 85 F1 | 	sub	fp, #12
0edd4     02 16 16 F2 | 	cmp	arg03, #2 wc
0edd8     3E 00 00 FF 
0eddc     40 E4 85 F1 | 	sub	objptr, ##31808
0ede0     0C 4E 05 C1 |  if_b	add	fp, #12
0ede4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0ede8     0C 4E 85 C1 |  if_b	sub	fp, #12
0edec     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1220
0edf0     00 12 06 F6 | 	mov	arg01, #0
0edf4     B0 C9 B0 FD | 	call	#__system___getiolock_0372
0edf8     FD 12 02 F6 | 	mov	arg01, result1
0edfc     F8 74 B0 FD | 	call	#__system___lockmem
0ee00     2B 01 00 FF 
0ee04     32 15 06 F6 | 	mov	arg02, ##@LR__4330
0ee08     00 12 06 F6 | 	mov	arg01, #0
0ee0c     00 16 06 F6 | 	mov	arg03, #0
0ee10     D8 81 B0 FD | 	call	#__system___basic_print_string
0ee14     00 12 06 F6 | 	mov	arg01, #0
0ee18     8C C9 B0 FD | 	call	#__system___getiolock_0372
0ee1c     FD 00 68 FC | 	wrlong	#0, result1
0ee20     27 12 06 F6 | 	mov	arg01, #39
0ee24     B0 3F B0 FD | 	call	#_printerror
0ee28     40 01 90 FD | 	jmp	#LR__1225
0ee2c                 | LR__1220
0ee2c     E0 9C BF FD | 	call	#_pop
0ee30     A7 FA 61 FC | 	wrlong	result1, fp
0ee34     04 4E 05 F1 | 	add	fp, #4
0ee38     A7 FC 61 FC | 	wrlong	result2, fp
0ee3c     04 4E 05 F1 | 	add	fp, #4
0ee40     A7 FE 61 FC | 	wrlong	result3, fp
0ee44                 | ' t1=pop()
0ee44                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then
0ee44     08 4E 85 F1 | 	sub	fp, #8
0ee48     1C FE 0D F2 | 	cmp	result3, #28 wz
0ee4c     08 4E 05 51 |  if_ne	add	fp, #8
0ee50     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0ee54     08 4E 85 51 |  if_ne	sub	fp, #8
0ee58     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0ee5c     70 00 90 5D |  if_ne	jmp	#LR__1221
0ee60     A7 1E 02 FB | 	rdlong	local01, fp
0ee64     0F 1F 52 F6 | 	abs	local01, local01 wc
0ee68     68 1F 16 FD | 	qdiv	local01, #360
0ee6c     87 24 20 FF 
0ee70     DB 21 06 F6 | 	mov	local02, ##1078530011
0ee74     19 1E 62 FD | 	getqy	local01
0ee78     0F 13 82 F6 | 	negc	arg01, local01
0ee7c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ee80     1F 22 C6 C9 |  if_b	decod	local03, #31
0ee84     00 22 06 36 |  if_ae	mov	local03, #0
0ee88     50 9A B0 FD | 	call	#__system___float_fromuns
0ee8c     11 FB 61 F5 | 	xor	result1, local03
0ee90     FD 12 02 F6 | 	mov	arg01, result1
0ee94     00 9A 21 FF 
0ee98     00 14 06 F6 | 	mov	arg02, ##1127481344
0ee9c     6C 9F B0 FD | 	call	#__system___float_div
0eea0     FD 14 02 F6 | 	mov	arg02, result1
0eea4     10 13 02 F6 | 	mov	arg01, local02
0eea8     5C 9D B0 FD | 	call	#__system___float_mul
0eeac     FD 12 02 F6 | 	mov	arg01, result1
0eeb0     90 A6 B0 FD | 	call	#__system____builtin_sinf
0eeb4     A7 FA 61 FC | 	wrlong	result1, fp
0eeb8     08 4E 05 F1 | 	add	fp, #8
0eebc     A7 3C 68 FC | 	wrlong	#30, fp
0eec0     08 4E 85 F1 | 	sub	fp, #8
0eec4     A7 12 02 F6 | 	mov	arg01, fp
0eec8     DC 9C BF FD | 	call	#_push
0eecc     9C 00 90 FD | 	jmp	#LR__1224
0eed0                 | LR__1221
0eed0     08 4E 05 F1 | 	add	fp, #8
0eed4     A7 20 02 FB | 	rdlong	local02, fp
0eed8     08 4E 85 F1 | 	sub	fp, #8
0eedc     1E 20 0E F2 | 	cmp	local02, #30 wz
0eee0     48 00 90 5D |  if_ne	jmp	#LR__1222
0eee4     87 24 20 FF 
0eee8     DB 21 06 F6 | 	mov	local02, ##1078530011
0eeec     A7 12 02 FB | 	rdlong	arg01, fp
0eef0     00 9A 21 FF 
0eef4     00 14 06 F6 | 	mov	arg02, ##1127481344
0eef8     10 9F B0 FD | 	call	#__system___float_div
0eefc     FD 14 02 F6 | 	mov	arg02, result1
0ef00     10 13 02 F6 | 	mov	arg01, local02
0ef04     00 9D B0 FD | 	call	#__system___float_mul
0ef08     FD 12 02 F6 | 	mov	arg01, result1
0ef0c     34 A6 B0 FD | 	call	#__system____builtin_sinf
0ef10     A7 FA 61 FC | 	wrlong	result1, fp
0ef14     08 4E 05 F1 | 	add	fp, #8
0ef18     A7 3C 68 FC | 	wrlong	#30, fp
0ef1c     08 4E 85 F1 | 	sub	fp, #8
0ef20     A7 12 02 F6 | 	mov	arg01, fp
0ef24     80 9C BF FD | 	call	#_push
0ef28     40 00 90 FD | 	jmp	#LR__1223
0ef2c                 | LR__1222
0ef2c                 | '   print "sin: "; : printerror(40) 
0ef2c     00 12 06 F6 | 	mov	arg01, #0
0ef30     74 C8 B0 FD | 	call	#__system___getiolock_0372
0ef34     FD 12 02 F6 | 	mov	arg01, result1
0ef38     BC 73 B0 FD | 	call	#__system___lockmem
0ef3c     2B 01 00 FF 
0ef40     38 15 06 F6 | 	mov	arg02, ##@LR__4331
0ef44     00 12 06 F6 | 	mov	arg01, #0
0ef48     00 16 06 F6 | 	mov	arg03, #0
0ef4c     9C 80 B0 FD | 	call	#__system___basic_print_string
0ef50     00 12 06 F6 | 	mov	arg01, #0
0ef54     50 C8 B0 FD | 	call	#__system___getiolock_0372
0ef58     FD 00 68 FC | 	wrlong	#0, result1
0ef5c     28 12 06 F6 | 	mov	arg01, #40
0ef60     74 3E B0 FD | 	call	#_printerror
0ef64     A7 12 02 F6 | 	mov	arg01, fp
0ef68     3C 9C BF FD | 	call	#_push
0ef6c                 | LR__1223
0ef6c                 | LR__1224
0ef6c                 | LR__1225
0ef6c     A7 F0 03 F6 | 	mov	ptra, fp
0ef70     B2 00 A0 FD | 	call	#popregs_
0ef74                 | _do_sin_ret
0ef74     2D 00 64 FD | 	ret
0ef78                 | 
0ef78                 | ' 
0ef78                 | ' sub do_stick
0ef78                 | _do_stick
0ef78     01 4A 05 F6 | 	mov	COUNT_, #1
0ef7c     A8 00 A0 FD | 	call	#pushregs_
0ef80     10 F0 07 F1 | 	add	ptra, #16
0ef84     41 00 00 FF 
0ef88     44 E4 05 F1 | 	add	objptr, ##33348
0ef8c     F2 1E 02 FB | 	rdlong	local01, objptr
0ef90     0F 17 02 F6 | 	mov	arg03, local01
0ef94     01 16 66 F0 | 	shl	arg03, #1
0ef98     0F 17 02 F1 | 	add	arg03, local01
0ef9c     02 16 66 F0 | 	shl	arg03, #2
0efa0     03 00 00 FF 
0efa4     04 E4 85 F1 | 	sub	objptr, ##1540
0efa8     F2 16 02 F1 | 	add	arg03, objptr
0efac     0B 17 02 FB | 	rdlong	arg03, arg03
0efb0     0C 4E 05 F1 | 	add	fp, #12
0efb4     A7 16 62 FC | 	wrlong	arg03, fp
0efb8                 | ' 
0efb8                 | ' numpar=compiledline(lineptr_e).result.uresult
0efb8                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
0efb8     0C 4E 85 F1 | 	sub	fp, #12
0efbc     02 16 16 F2 | 	cmp	arg03, #2 wc
0efc0     3E 00 00 FF 
0efc4     40 E4 85 F1 | 	sub	objptr, ##31808
0efc8     3C 00 90 CD |  if_b	jmp	#LR__1230
0efcc     00 12 06 F6 | 	mov	arg01, #0
0efd0     D4 C7 B0 FD | 	call	#__system___getiolock_0372
0efd4     FD 12 02 F6 | 	mov	arg01, result1
0efd8     1C 73 B0 FD | 	call	#__system___lockmem
0efdc     2B 01 00 FF 
0efe0     3E 15 06 F6 | 	mov	arg02, ##@LR__4332
0efe4     00 12 06 F6 | 	mov	arg01, #0
0efe8     00 16 06 F6 | 	mov	arg03, #0
0efec     FC 7F B0 FD | 	call	#__system___basic_print_string
0eff0     00 12 06 F6 | 	mov	arg01, #0
0eff4     B0 C7 B0 FD | 	call	#__system___getiolock_0372
0eff8     FD 00 68 FC | 	wrlong	#0, result1
0effc     27 12 06 F6 | 	mov	arg01, #39
0f000     D4 3D B0 FD | 	call	#_printerror
0f004     E8 00 90 FD | 	jmp	#LR__1234
0f008                 | LR__1230
0f008                 | ' 
0f008                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
0f008     0C 4E 05 F1 | 	add	fp, #12
0f00c     A7 FE 09 FB | 	rdlong	result3, fp wz
0f010     0C 4E 85 F1 | 	sub	fp, #12
0f014     30 00 90 5D |  if_ne	jmp	#LR__1231
0f018     51 00 00 FF 
0f01c     C0 E5 05 F1 | 	add	objptr, ##41920
0f020     F2 1E 02 FB | 	rdlong	local01, objptr
0f024     51 00 00 FF 
0f028     C0 E5 85 F1 | 	sub	objptr, ##41920
0f02c     A7 1E 62 FC | 	wrlong	local01, fp
0f030     08 4E 05 F1 | 	add	fp, #8
0f034     A7 3A 68 FC | 	wrlong	#29, fp
0f038     08 4E 85 F1 | 	sub	fp, #8
0f03c     A7 12 02 F6 | 	mov	arg01, fp
0f040     64 9B BF FD | 	call	#_push
0f044     A8 00 90 FD | 	jmp	#LR__1234
0f048                 | LR__1231
0f048     C4 9A BF FD | 	call	#_pop
0f04c     A7 FA 61 FC | 	wrlong	result1, fp
0f050     04 4E 05 F1 | 	add	fp, #4
0f054     A7 FC 61 FC | 	wrlong	result2, fp
0f058     04 4E 05 F1 | 	add	fp, #4
0f05c     A7 FE 61 FC | 	wrlong	result3, fp
0f060                 | ' 
0f060                 | ' t1=pop()
0f060                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0f060     08 4E 85 F1 | 	sub	fp, #8
0f064     1C FE 0D F2 | 	cmp	result3, #28 wz
0f068     08 4E 05 51 |  if_ne	add	fp, #8
0f06c     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f070     08 4E 85 51 |  if_ne	sub	fp, #8
0f074     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f078     6C 00 90 5D |  if_ne	jmp	#LR__1233
0f07c     A7 1E 02 FB | 	rdlong	local01, fp
0f080     52 00 00 FF 
0f084     8C E4 05 F1 | 	add	objptr, ##42124
0f088     F2 1E 62 FC | 	wrlong	local01, objptr
0f08c                 | '   q=t1.result.uresult
0f08c                 | '   if q<7 then 
0f08c     52 00 00 FF 
0f090     8C E4 85 F1 | 	sub	objptr, ##42124
0f094     07 1E 56 F2 | 	cmps	local01, #7 wc
0f098     40 00 90 3D |  if_ae	jmp	#LR__1232
0f09c     52 00 00 FF 
0f0a0     8C E4 05 F1 | 	add	objptr, ##42124
0f0a4     F2 1E 02 FB | 	rdlong	local01, objptr
0f0a8     02 1E 66 F0 | 	shl	local01, #2
0f0ac     CC E4 85 F1 | 	sub	objptr, #204
0f0b0     F2 1E 02 F1 | 	add	local01, objptr
0f0b4     0F 1F 02 FB | 	rdlong	local01, local01
0f0b8     A7 1E 62 FC | 	wrlong	local01, fp
0f0bc     08 4E 05 F1 | 	add	fp, #8
0f0c0     A7 3A 68 FC | 	wrlong	#29, fp
0f0c4     08 4E 85 F1 | 	sub	fp, #8
0f0c8     A7 12 02 F6 | 	mov	arg01, fp
0f0cc     51 00 00 FF 
0f0d0     C0 E5 85 F1 | 	sub	objptr, ##41920
0f0d4     D0 9A BF FD | 	call	#_push
0f0d8                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
0f0d8     14 00 90 FD | 	jmp	#LR__1234
0f0dc                 | LR__1232
0f0dc     29 12 06 F6 | 	mov	arg01, #41
0f0e0     F4 3C B0 FD | 	call	#_printerror
0f0e4                 | '      printerror(41) : return
0f0e4     08 00 90 FD | 	jmp	#LR__1234
0f0e8                 | LR__1233
0f0e8     29 12 06 F6 | 	mov	arg01, #41
0f0ec     E8 3C B0 FD | 	call	#_printerror
0f0f0                 | LR__1234
0f0f0     A7 F0 03 F6 | 	mov	ptra, fp
0f0f4     B2 00 A0 FD | 	call	#popregs_
0f0f8                 | _do_stick_ret
0f0f8     2D 00 64 FD | 	ret
0f0fc                 | 
0f0fc                 | ' 
0f0fc                 | ' sub do_strig
0f0fc                 | _do_strig
0f0fc     01 4A 05 F6 | 	mov	COUNT_, #1
0f100     A8 00 A0 FD | 	call	#pushregs_
0f104     10 F0 07 F1 | 	add	ptra, #16
0f108     41 00 00 FF 
0f10c     44 E4 05 F1 | 	add	objptr, ##33348
0f110     F2 1E 02 FB | 	rdlong	local01, objptr
0f114     0F 17 02 F6 | 	mov	arg03, local01
0f118     01 16 66 F0 | 	shl	arg03, #1
0f11c     0F 17 02 F1 | 	add	arg03, local01
0f120     02 16 66 F0 | 	shl	arg03, #2
0f124     03 00 00 FF 
0f128     04 E4 85 F1 | 	sub	objptr, ##1540
0f12c     F2 16 02 F1 | 	add	arg03, objptr
0f130     0B 17 02 FB | 	rdlong	arg03, arg03
0f134     0C 4E 05 F1 | 	add	fp, #12
0f138     A7 16 62 FC | 	wrlong	arg03, fp
0f13c                 | ' 
0f13c                 | ' numpar=compiledline(lineptr_e).result.uresult
0f13c                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
0f13c     0C 4E 85 F1 | 	sub	fp, #12
0f140     02 16 16 F2 | 	cmp	arg03, #2 wc
0f144     3E 00 00 FF 
0f148     40 E4 85 F1 | 	sub	objptr, ##31808
0f14c     3C 00 90 CD |  if_b	jmp	#LR__1240
0f150     00 12 06 F6 | 	mov	arg01, #0
0f154     50 C6 B0 FD | 	call	#__system___getiolock_0372
0f158     FD 12 02 F6 | 	mov	arg01, result1
0f15c     98 71 B0 FD | 	call	#__system___lockmem
0f160     2B 01 00 FF 
0f164     46 15 06 F6 | 	mov	arg02, ##@LR__4333
0f168     00 12 06 F6 | 	mov	arg01, #0
0f16c     00 16 06 F6 | 	mov	arg03, #0
0f170     78 7E B0 FD | 	call	#__system___basic_print_string
0f174     00 12 06 F6 | 	mov	arg01, #0
0f178     2C C6 B0 FD | 	call	#__system___getiolock_0372
0f17c     FD 00 68 FC | 	wrlong	#0, result1
0f180     27 12 06 F6 | 	mov	arg01, #39
0f184     50 3C B0 FD | 	call	#_printerror
0f188     E8 00 90 FD | 	jmp	#LR__1244
0f18c                 | LR__1240
0f18c                 | ' 
0f18c                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
0f18c     0C 4E 05 F1 | 	add	fp, #12
0f190     A7 FE 09 FB | 	rdlong	result3, fp wz
0f194     0C 4E 85 F1 | 	sub	fp, #12
0f198     30 00 90 5D |  if_ne	jmp	#LR__1241
0f19c     51 00 00 FF 
0f1a0     DC E5 05 F1 | 	add	objptr, ##41948
0f1a4     F2 1E 02 FB | 	rdlong	local01, objptr
0f1a8     51 00 00 FF 
0f1ac     DC E5 85 F1 | 	sub	objptr, ##41948
0f1b0     A7 1E 62 FC | 	wrlong	local01, fp
0f1b4     08 4E 05 F1 | 	add	fp, #8
0f1b8     A7 3A 68 FC | 	wrlong	#29, fp
0f1bc     08 4E 85 F1 | 	sub	fp, #8
0f1c0     A7 12 02 F6 | 	mov	arg01, fp
0f1c4     E0 99 BF FD | 	call	#_push
0f1c8     A8 00 90 FD | 	jmp	#LR__1244
0f1cc                 | LR__1241
0f1cc     40 99 BF FD | 	call	#_pop
0f1d0     A7 FA 61 FC | 	wrlong	result1, fp
0f1d4     04 4E 05 F1 | 	add	fp, #4
0f1d8     A7 FC 61 FC | 	wrlong	result2, fp
0f1dc     04 4E 05 F1 | 	add	fp, #4
0f1e0     A7 FE 61 FC | 	wrlong	result3, fp
0f1e4                 | ' 
0f1e4                 | ' t1=pop()
0f1e4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
0f1e4     08 4E 85 F1 | 	sub	fp, #8
0f1e8     1C FE 0D F2 | 	cmp	result3, #28 wz
0f1ec     08 4E 05 51 |  if_ne	add	fp, #8
0f1f0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0f1f4     08 4E 85 51 |  if_ne	sub	fp, #8
0f1f8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0f1fc     6C 00 90 5D |  if_ne	jmp	#LR__1243
0f200     A7 1E 02 FB | 	rdlong	local01, fp
0f204     52 00 00 FF 
0f208     8C E4 05 F1 | 	add	objptr, ##42124
0f20c     F2 1E 62 FC | 	wrlong	local01, objptr
0f210                 | '   q=t1.result.uresult
0f210                 | '   if q<7 then 
0f210     52 00 00 FF 
0f214     8C E4 85 F1 | 	sub	objptr, ##42124
0f218     07 1E 56 F2 | 	cmps	local01, #7 wc
0f21c     40 00 90 3D |  if_ae	jmp	#LR__1242
0f220     52 00 00 FF 
0f224     8C E4 05 F1 | 	add	objptr, ##42124
0f228     F2 1E 02 FB | 	rdlong	local01, objptr
0f22c     02 1E 66 F0 | 	shl	local01, #2
0f230     B0 E4 85 F1 | 	sub	objptr, #176
0f234     F2 1E 02 F1 | 	add	local01, objptr
0f238     0F 1F 02 FB | 	rdlong	local01, local01
0f23c     A7 1E 62 FC | 	wrlong	local01, fp
0f240     08 4E 05 F1 | 	add	fp, #8
0f244     A7 3A 68 FC | 	wrlong	#29, fp
0f248     08 4E 85 F1 | 	sub	fp, #8
0f24c     A7 12 02 F6 | 	mov	arg01, fp
0f250     51 00 00 FF 
0f254     DC E5 85 F1 | 	sub	objptr, ##41948
0f258     4C 99 BF FD | 	call	#_push
0f25c                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
0f25c     14 00 90 FD | 	jmp	#LR__1244
0f260                 | LR__1242
0f260     29 12 06 F6 | 	mov	arg01, #41
0f264     70 3B B0 FD | 	call	#_printerror
0f268                 | '      printerror(41) : return
0f268     08 00 90 FD | 	jmp	#LR__1244
0f26c                 | LR__1243
0f26c     29 12 06 F6 | 	mov	arg01, #41
0f270     64 3B B0 FD | 	call	#_printerror
0f274                 | LR__1244
0f274     A7 F0 03 F6 | 	mov	ptra, fp
0f278     B2 00 A0 FD | 	call	#popregs_
0f27c                 | _do_strig_ret
0f27c     2D 00 64 FD | 	ret
0f280                 | 
0f280                 | ' 
0f280                 | ' sub do_getpixel
0f280                 | _do_getpixel
0f280     00 4A 05 F6 | 	mov	COUNT_, #0
0f284     A8 00 A0 FD | 	call	#pushregs_
0f288     24 F0 07 F1 | 	add	ptra, #36
0f28c     41 00 00 FF 
0f290     44 E4 05 F1 | 	add	objptr, ##33348
0f294     F2 16 02 FB | 	rdlong	arg03, objptr
0f298     0B 15 02 F6 | 	mov	arg02, arg03
0f29c     01 14 66 F0 | 	shl	arg02, #1
0f2a0     0B 15 02 F1 | 	add	arg02, arg03
0f2a4     02 14 66 F0 | 	shl	arg02, #2
0f2a8     03 00 00 FF 
0f2ac     04 E4 85 F1 | 	sub	objptr, ##1540
0f2b0     F2 14 02 F1 | 	add	arg02, objptr
0f2b4     0A 17 02 FB | 	rdlong	arg03, arg02
0f2b8     18 4E 05 F1 | 	add	fp, #24
0f2bc     A7 16 62 FC | 	wrlong	arg03, fp
0f2c0                 | ' 
0f2c0                 | ' numpar=compiledline(lineptr_e).result.uresult
0f2c0                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
0f2c0     18 4E 85 F1 | 	sub	fp, #24
0f2c4     02 16 0E F2 | 	cmp	arg03, #2 wz
0f2c8     3E 00 00 FF 
0f2cc     40 E4 85 F1 | 	sub	objptr, ##31808
0f2d0     3C 00 90 AD |  if_e	jmp	#LR__1250
0f2d4     00 12 06 F6 | 	mov	arg01, #0
0f2d8     CC C4 B0 FD | 	call	#__system___getiolock_0372
0f2dc     FD 12 02 F6 | 	mov	arg01, result1
0f2e0     14 70 B0 FD | 	call	#__system___lockmem
0f2e4     2B 01 00 FF 
0f2e8     4E 15 06 F6 | 	mov	arg02, ##@LR__4334
0f2ec     00 12 06 F6 | 	mov	arg01, #0
0f2f0     00 16 06 F6 | 	mov	arg03, #0
0f2f4     F4 7C B0 FD | 	call	#__system___basic_print_string
0f2f8     00 12 06 F6 | 	mov	arg01, #0
0f2fc     A8 C4 B0 FD | 	call	#__system___getiolock_0372
0f300     FD 00 68 FC | 	wrlong	#0, result1
0f304     27 12 06 F6 | 	mov	arg01, #39
0f308     CC 3A B0 FD | 	call	#_printerror
0f30c     B4 00 90 FD | 	jmp	#LR__1251
0f310                 | LR__1250
0f310     FC 97 BF FD | 	call	#_pop
0f314     FD 16 02 F6 | 	mov	arg03, result1
0f318     FE 14 02 F6 | 	mov	arg02, result2
0f31c     FF 12 02 F6 | 	mov	arg01, result3
0f320     0C 4E 05 F1 | 	add	fp, #12
0f324     A7 16 62 FC | 	wrlong	arg03, fp
0f328     04 4E 05 F1 | 	add	fp, #4
0f32c     A7 14 62 FC | 	wrlong	arg02, fp
0f330     04 4E 05 F1 | 	add	fp, #4
0f334     A7 12 62 FC | 	wrlong	arg01, fp
0f338     14 4E 85 F1 | 	sub	fp, #20
0f33c     D0 97 BF FD | 	call	#_pop
0f340     FF 16 02 F6 | 	mov	arg03, result3
0f344     A7 FA 61 FC | 	wrlong	result1, fp
0f348     04 4E 05 F1 | 	add	fp, #4
0f34c     A7 FC 61 FC | 	wrlong	result2, fp
0f350     04 4E 05 F1 | 	add	fp, #4
0f354     A7 16 62 FC | 	wrlong	arg03, fp
0f358     08 4E 85 F1 | 	sub	fp, #8
0f35c     A7 12 02 F6 | 	mov	arg01, fp
0f360     E4 F7 BF FD | 	call	#_converttoint
0f364     1C 4E 05 F1 | 	add	fp, #28
0f368     A7 FA 61 FC | 	wrlong	result1, fp
0f36c     10 4E 85 F1 | 	sub	fp, #16
0f370     A7 12 02 F6 | 	mov	arg01, fp
0f374     0C 4E 85 F1 | 	sub	fp, #12
0f378     CC F7 BF FD | 	call	#_converttoint
0f37c     FD 16 02 F6 | 	mov	arg03, result1
0f380     20 4E 05 F1 | 	add	fp, #32
0f384     A7 16 62 FC | 	wrlong	arg03, fp
0f388     F2 12 02 FB | 	rdlong	arg01, objptr
0f38c     04 4E 85 F1 | 	sub	fp, #4
0f390     A7 FE 01 FB | 	rdlong	result3, fp
0f394     FF 12 02 F1 | 	add	arg01, result3
0f398     1C 4E 85 F1 | 	sub	fp, #28
0f39c     0A 16 66 F0 | 	shl	arg03, #10
0f3a0     0B 13 02 F1 | 	add	arg01, arg03
0f3a4     94 3B B0 FD | 	call	#_pspeek
0f3a8     FD FA E1 F8 | 	getbyte	result1, result1, #0
0f3ac     A7 FA 61 FC | 	wrlong	result1, fp
0f3b0     08 4E 05 F1 | 	add	fp, #8
0f3b4     A7 3A 68 FC | 	wrlong	#29, fp
0f3b8     08 4E 85 F1 | 	sub	fp, #8
0f3bc     A7 12 02 F6 | 	mov	arg01, fp
0f3c0     E4 97 BF FD | 	call	#_push
0f3c4                 | LR__1251
0f3c4     A7 F0 03 F6 | 	mov	ptra, fp
0f3c8     B2 00 A0 FD | 	call	#popregs_
0f3cc                 | _do_getpixel_ret
0f3cc     2D 00 64 FD | 	ret
0f3d0                 | 
0f3d0                 | ' 
0f3d0                 | ' 
0f3d0                 | ' 
0f3d0                 | ' sub do_defsprite
0f3d0                 | _do_defsprite
0f3d0     07 4A 05 F6 | 	mov	COUNT_, #7
0f3d4     A8 00 A0 FD | 	call	#pushregs_
0f3d8     5C F0 07 F1 | 	add	ptra, #92
0f3dc     30 97 BF FD | 	call	#_pop
0f3e0     FD 16 02 F6 | 	mov	arg03, result1
0f3e4     FE 14 02 F6 | 	mov	arg02, result2
0f3e8     FF 12 02 F6 | 	mov	arg01, result3
0f3ec     30 4E 05 F1 | 	add	fp, #48
0f3f0     A7 16 62 FC | 	wrlong	arg03, fp
0f3f4     04 4E 05 F1 | 	add	fp, #4
0f3f8     A7 14 62 FC | 	wrlong	arg02, fp
0f3fc     04 4E 05 F1 | 	add	fp, #4
0f400     A7 12 62 FC | 	wrlong	arg01, fp
0f404     38 4E 85 F1 | 	sub	fp, #56
0f408     04 97 BF FD | 	call	#_pop
0f40c     FD 16 02 F6 | 	mov	arg03, result1
0f410     FE 14 02 F6 | 	mov	arg02, result2
0f414     FF 12 02 F6 | 	mov	arg01, result3
0f418     24 4E 05 F1 | 	add	fp, #36
0f41c     A7 16 62 FC | 	wrlong	arg03, fp
0f420     04 4E 05 F1 | 	add	fp, #4
0f424     A7 14 62 FC | 	wrlong	arg02, fp
0f428     04 4E 05 F1 | 	add	fp, #4
0f42c     A7 12 62 FC | 	wrlong	arg01, fp
0f430     2C 4E 85 F1 | 	sub	fp, #44
0f434     D8 96 BF FD | 	call	#_pop
0f438     FD 16 02 F6 | 	mov	arg03, result1
0f43c     FE 14 02 F6 | 	mov	arg02, result2
0f440     FF 12 02 F6 | 	mov	arg01, result3
0f444     18 4E 05 F1 | 	add	fp, #24
0f448     A7 16 62 FC | 	wrlong	arg03, fp
0f44c     04 4E 05 F1 | 	add	fp, #4
0f450     A7 14 62 FC | 	wrlong	arg02, fp
0f454     04 4E 05 F1 | 	add	fp, #4
0f458     A7 12 62 FC | 	wrlong	arg01, fp
0f45c     20 4E 85 F1 | 	sub	fp, #32
0f460     AC 96 BF FD | 	call	#_pop
0f464     FD 16 02 F6 | 	mov	arg03, result1
0f468     FE 14 02 F6 | 	mov	arg02, result2
0f46c     FF 12 02 F6 | 	mov	arg01, result3
0f470     0C 4E 05 F1 | 	add	fp, #12
0f474     A7 16 62 FC | 	wrlong	arg03, fp
0f478     04 4E 05 F1 | 	add	fp, #4
0f47c     A7 14 62 FC | 	wrlong	arg02, fp
0f480     04 4E 05 F1 | 	add	fp, #4
0f484     A7 12 62 FC | 	wrlong	arg01, fp
0f488     14 4E 85 F1 | 	sub	fp, #20
0f48c     80 96 BF FD | 	call	#_pop
0f490     FF 16 02 F6 | 	mov	arg03, result3
0f494     A7 FA 61 FC | 	wrlong	result1, fp
0f498     04 4E 05 F1 | 	add	fp, #4
0f49c     A7 FC 61 FC | 	wrlong	result2, fp
0f4a0     04 4E 05 F1 | 	add	fp, #4
0f4a4     A7 16 62 FC | 	wrlong	arg03, fp
0f4a8     08 4E 85 F1 | 	sub	fp, #8
0f4ac     A7 12 02 F6 | 	mov	arg01, fp
0f4b0     94 F6 BF FD | 	call	#_converttoint
0f4b4     3C 4E 05 F1 | 	add	fp, #60
0f4b8     A7 FA 61 FC | 	wrlong	result1, fp
0f4bc     30 4E 85 F1 | 	sub	fp, #48
0f4c0     A7 12 02 F6 | 	mov	arg01, fp
0f4c4     0C 4E 85 F1 | 	sub	fp, #12
0f4c8     7C F6 BF FD | 	call	#_converttoint
0f4cc     40 4E 05 F1 | 	add	fp, #64
0f4d0     A7 FA 61 FC | 	wrlong	result1, fp
0f4d4     28 4E 85 F1 | 	sub	fp, #40
0f4d8     A7 12 02 F6 | 	mov	arg01, fp
0f4dc     18 4E 85 F1 | 	sub	fp, #24
0f4e0     64 F6 BF FD | 	call	#_converttoint
0f4e4     44 4E 05 F1 | 	add	fp, #68
0f4e8     A7 FA 61 FC | 	wrlong	result1, fp
0f4ec     20 4E 85 F1 | 	sub	fp, #32
0f4f0     A7 12 02 F6 | 	mov	arg01, fp
0f4f4     24 4E 85 F1 | 	sub	fp, #36
0f4f8     4C F6 BF FD | 	call	#_converttoint
0f4fc     48 4E 05 F1 | 	add	fp, #72
0f500     A7 FA 61 FC | 	wrlong	result1, fp
0f504     18 4E 85 F1 | 	sub	fp, #24
0f508     A7 12 02 F6 | 	mov	arg01, fp
0f50c     30 4E 85 F1 | 	sub	fp, #48
0f510     34 F6 BF FD | 	call	#_converttoint
0f514     4C 4E 05 F1 | 	add	fp, #76
0f518     A7 FA 61 FC | 	wrlong	result1, fp
0f51c                 | ' 
0f51c                 | ' t5=pop()
0f51c                 | ' t4=pop()
0f51c                 | ' t3=pop()
0f51c                 | ' t2=pop()
0f51c                 | ' t1=pop()
0f51c                 | ' 
0f51c                 | ' ' do convert, defsprite is not a racing command
0f51c                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5)
0f51c                 | '  
0f51c                 | ' ' todo: check parameters for linits
0f51c                 | ' if sprite(a1)<> nil then delete(sprite(a1))
0f51c     10 4E 85 F1 | 	sub	fp, #16
0f520     A7 16 02 FB | 	rdlong	arg03, fp
0f524     3C 4E 85 F1 | 	sub	fp, #60
0f528     02 16 66 F0 | 	shl	arg03, #2
0f52c     51 00 00 FF 
0f530     F8 E5 05 F1 | 	add	objptr, ##41976
0f534     F2 16 02 F1 | 	add	arg03, objptr
0f538     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0f53c     51 00 00 FF 
0f540     F8 E5 85 F1 | 	sub	objptr, ##41976
0f544     2C 00 90 AD |  if_e	jmp	#LR__1260
0f548     3C 4E 05 F1 | 	add	fp, #60
0f54c     A7 16 02 FB | 	rdlong	arg03, fp
0f550     3C 4E 85 F1 | 	sub	fp, #60
0f554     02 16 66 F0 | 	shl	arg03, #2
0f558     51 00 00 FF 
0f55c     F8 E5 05 F1 | 	add	objptr, ##41976
0f560     F2 16 02 F1 | 	add	arg03, objptr
0f564     0B 13 02 FB | 	rdlong	arg01, arg03
0f568     51 00 00 FF 
0f56c     F8 E5 85 F1 | 	sub	objptr, ##41976
0f570     24 A8 B0 FD | 	call	#__system___gc_free
0f574                 | LR__1260
0f574     3C 4E 05 F1 | 	add	fp, #60
0f578     A7 1E 02 FB | 	rdlong	local01, fp
0f57c     0C 4E 05 F1 | 	add	fp, #12
0f580     A7 16 02 FB | 	rdlong	arg03, fp
0f584     04 4E 05 F1 | 	add	fp, #4
0f588     A7 14 02 FB | 	rdlong	arg02, fp
0f58c     0A 17 02 FD | 	qmul	arg03, arg02
0f590     02 1E 66 F0 | 	shl	local01, #2
0f594     51 00 00 FF 
0f598     F8 E5 05 F1 | 	add	objptr, ##41976
0f59c     F2 1E 02 F1 | 	add	local01, objptr
0f5a0     4C 4E 85 F1 | 	sub	fp, #76
0f5a4     51 00 00 FF 
0f5a8     F8 E5 85 F1 | 	sub	objptr, ##41976
0f5ac     18 12 62 FD | 	getqx	arg01
0f5b0     A8 A6 B0 FD | 	call	#__system___gc_alloc_managed
0f5b4     0F FB 61 FC | 	wrlong	result1, local01
0f5b8                 | ' for y=a3 to a3+a5-1
0f5b8     44 4E 05 F1 | 	add	fp, #68
0f5bc     A7 20 02 FB | 	rdlong	local02, fp
0f5c0     0C 4E 05 F1 | 	add	fp, #12
0f5c4     A7 20 62 FC | 	wrlong	local02, fp
0f5c8     0C 4E 85 F1 | 	sub	fp, #12
0f5cc     A7 22 02 FB | 	rdlong	local03, fp
0f5d0     08 4E 05 F1 | 	add	fp, #8
0f5d4     A7 24 02 FB | 	rdlong	local04, fp
0f5d8     4C 4E 85 F1 | 	sub	fp, #76
0f5dc     12 23 02 F1 | 	add	local03, local04
0f5e0                 | LR__1261
0f5e0     50 4E 05 F1 | 	add	fp, #80
0f5e4     A7 20 02 FB | 	rdlong	local02, fp
0f5e8     50 4E 85 F1 | 	sub	fp, #80
0f5ec     11 21 52 F2 | 	cmps	local02, local03 wc
0f5f0     10 01 90 3D |  if_ae	jmp	#LR__1264
0f5f4                 | '   for x=a2 to a4+a2-1
0f5f4     40 4E 05 F1 | 	add	fp, #64
0f5f8     A7 1E 02 FB | 	rdlong	local01, fp
0f5fc     52 00 00 FF 
0f600     60 E4 05 F1 | 	add	objptr, ##42080
0f604     F2 1E 62 FC | 	wrlong	local01, objptr
0f608     52 00 00 FF 
0f60c     60 E4 85 F1 | 	sub	objptr, ##42080
0f610     08 4E 05 F1 | 	add	fp, #8
0f614     A7 26 02 FB | 	rdlong	local05, fp
0f618     08 4E 85 F1 | 	sub	fp, #8
0f61c     A7 28 02 FB | 	rdlong	local06, fp
0f620     40 4E 85 F1 | 	sub	fp, #64
0f624     14 27 02 F1 | 	add	local05, local06
0f628                 | LR__1262
0f628     52 00 00 FF 
0f62c     60 E4 05 F1 | 	add	objptr, ##42080
0f630     F2 1E 02 FB | 	rdlong	local01, objptr
0f634     52 00 00 FF 
0f638     60 E4 85 F1 | 	sub	objptr, ##42080
0f63c     13 1F 52 F2 | 	cmps	local01, local05 wc
0f640     A8 00 90 3D |  if_ae	jmp	#LR__1263
0f644     3C 4E 05 F1 | 	add	fp, #60
0f648     A7 28 02 FB | 	rdlong	local06, fp
0f64c     04 4E 05 F1 | 	add	fp, #4
0f650     A7 24 02 FB | 	rdlong	local04, fp
0f654     10 4E 05 F1 | 	add	fp, #16
0f658     A7 20 02 FB | 	rdlong	local02, fp
0f65c     10 1F 02 F6 | 	mov	local01, local02
0f660     0C 4E 85 F1 | 	sub	fp, #12
0f664     A7 16 02 FB | 	rdlong	arg03, fp
0f668     0B 1F 82 F1 | 	sub	local01, arg03
0f66c     04 4E 05 F1 | 	add	fp, #4
0f670     A7 16 02 FB | 	rdlong	arg03, fp
0f674     0B 1F 02 FD | 	qmul	local01, arg03
0f678     02 28 66 F0 | 	shl	local06, #2
0f67c     51 00 00 FF 
0f680     F8 E5 05 F1 | 	add	objptr, ##41976
0f684     F2 28 02 F1 | 	add	local06, objptr
0f688     14 29 02 FB | 	rdlong	local06, local06
0f68c     68 E4 05 F1 | 	add	objptr, #104
0f690     F2 1E 02 FB | 	rdlong	local01, objptr
0f694     52 00 00 FF 
0f698     60 E4 85 F1 | 	sub	objptr, ##42080
0f69c     0F 2B 02 F6 | 	mov	local07, local01
0f6a0     12 2B 82 F1 | 	sub	local07, local04
0f6a4     F2 12 02 FB | 	rdlong	arg01, objptr
0f6a8     0F 13 02 F1 | 	add	arg01, local01
0f6ac     48 4E 85 F1 | 	sub	fp, #72
0f6b0     0A 20 66 F0 | 	shl	local02, #10
0f6b4     10 13 02 F1 | 	add	arg01, local02
0f6b8     18 24 62 FD | 	getqx	local04
0f6bc     12 2B 02 F1 | 	add	local07, local04
0f6c0     14 2B 02 F1 | 	add	local07, local06
0f6c4     74 38 B0 FD | 	call	#_pspeek
0f6c8     15 FB 41 FC | 	wrbyte	result1, local07
0f6cc     52 00 00 FF 
0f6d0     60 E4 05 F1 | 	add	objptr, ##42080
0f6d4     F2 2A 02 FB | 	rdlong	local07, objptr
0f6d8     01 2A 06 F1 | 	add	local07, #1
0f6dc     F2 2A 62 FC | 	wrlong	local07, objptr
0f6e0     52 00 00 FF 
0f6e4     60 E4 85 F1 | 	sub	objptr, ##42080
0f6e8     3C FF 9F FD | 	jmp	#LR__1262
0f6ec                 | LR__1263
0f6ec     50 4E 05 F1 | 	add	fp, #80
0f6f0     A7 2A 02 FB | 	rdlong	local07, fp
0f6f4     01 2A 06 F1 | 	add	local07, #1
0f6f8     A7 2A 62 FC | 	wrlong	local07, fp
0f6fc     50 4E 85 F1 | 	sub	fp, #80
0f700     DC FE 9F FD | 	jmp	#LR__1261
0f704                 | LR__1264
0f704     3C 4E 05 F1 | 	add	fp, #60
0f708     A7 2A 02 FB | 	rdlong	local07, fp
0f70c     15 13 02 F6 | 	mov	arg01, local07
0f710     3C 4E 85 F1 | 	sub	fp, #60
0f714     02 2A 66 F0 | 	shl	local07, #2
0f718     51 00 00 FF 
0f71c     F8 E5 05 F1 | 	add	objptr, ##41976
0f720     F2 2A 02 F1 | 	add	local07, objptr
0f724     15 15 02 FB | 	rdlong	arg02, local07
0f728     51 00 00 FF 
0f72c     F8 E5 85 F1 | 	sub	objptr, ##41976
0f730     B8 4B B0 FD | 	call	#_hg010b_spin2_setspriteptr
0f734     3C 4E 05 F1 | 	add	fp, #60
0f738     A7 12 02 FB | 	rdlong	arg01, fp
0f73c     0C 4E 05 F1 | 	add	fp, #12
0f740     A7 14 02 FB | 	rdlong	arg02, fp
0f744     04 4E 05 F1 | 	add	fp, #4
0f748     A7 16 02 FB | 	rdlong	arg03, fp
0f74c     4C 4E 85 F1 | 	sub	fp, #76
0f750     0C 4C B0 FD | 	call	#_hg010b_spin2_setspritesize
0f754     A7 F0 03 F6 | 	mov	ptra, fp
0f758     B2 00 A0 FD | 	call	#popregs_
0f75c                 | _do_defsprite_ret
0f75c     2D 00 64 FD | 	ret
0f760                 | 
0f760                 | ' 
0f760                 | ' sub do_sprite
0f760                 | _do_sprite
0f760     00 4A 05 F6 | 	mov	COUNT_, #0
0f764     A8 00 A0 FD | 	call	#pushregs_
0f768     30 F0 07 F1 | 	add	ptra, #48
0f76c     A0 93 BF FD | 	call	#_pop
0f770     FD 16 02 F6 | 	mov	arg03, result1
0f774     FE 14 02 F6 | 	mov	arg02, result2
0f778     FF 12 02 F6 | 	mov	arg01, result3
0f77c     18 4E 05 F1 | 	add	fp, #24
0f780     A7 16 62 FC | 	wrlong	arg03, fp
0f784     04 4E 05 F1 | 	add	fp, #4
0f788     A7 14 62 FC | 	wrlong	arg02, fp
0f78c     04 4E 05 F1 | 	add	fp, #4
0f790     A7 12 62 FC | 	wrlong	arg01, fp
0f794     20 4E 85 F1 | 	sub	fp, #32
0f798     74 93 BF FD | 	call	#_pop
0f79c     FD 16 02 F6 | 	mov	arg03, result1
0f7a0     FE 14 02 F6 | 	mov	arg02, result2
0f7a4     FF 12 02 F6 | 	mov	arg01, result3
0f7a8     0C 4E 05 F1 | 	add	fp, #12
0f7ac     A7 16 62 FC | 	wrlong	arg03, fp
0f7b0     04 4E 05 F1 | 	add	fp, #4
0f7b4     A7 14 62 FC | 	wrlong	arg02, fp
0f7b8     04 4E 05 F1 | 	add	fp, #4
0f7bc     A7 12 62 FC | 	wrlong	arg01, fp
0f7c0     14 4E 85 F1 | 	sub	fp, #20
0f7c4     48 93 BF FD | 	call	#_pop
0f7c8     FF 16 02 F6 | 	mov	arg03, result3
0f7cc     A7 FA 61 FC | 	wrlong	result1, fp
0f7d0     04 4E 05 F1 | 	add	fp, #4
0f7d4     A7 FC 61 FC | 	wrlong	result2, fp
0f7d8     04 4E 05 F1 | 	add	fp, #4
0f7dc     A7 16 62 FC | 	wrlong	arg03, fp
0f7e0     08 4E 85 F1 | 	sub	fp, #8
0f7e4     A7 12 02 F6 | 	mov	arg01, fp
0f7e8     5C F3 BF FD | 	call	#_converttoint
0f7ec     24 4E 05 F1 | 	add	fp, #36
0f7f0     A7 FA 61 FC | 	wrlong	result1, fp
0f7f4     18 4E 85 F1 | 	sub	fp, #24
0f7f8     A7 12 02 F6 | 	mov	arg01, fp
0f7fc     0C 4E 85 F1 | 	sub	fp, #12
0f800     44 F3 BF FD | 	call	#_converttoint
0f804     28 4E 05 F1 | 	add	fp, #40
0f808     A7 FA 61 FC | 	wrlong	result1, fp
0f80c     10 4E 85 F1 | 	sub	fp, #16
0f810     A7 12 02 F6 | 	mov	arg01, fp
0f814     18 4E 85 F1 | 	sub	fp, #24
0f818     2C F3 BF FD | 	call	#_converttoint
0f81c     2C 4E 05 F1 | 	add	fp, #44
0f820     A7 FA 61 FC | 	wrlong	result1, fp
0f824     08 4E 85 F1 | 	sub	fp, #8
0f828     A7 12 02 FB | 	rdlong	arg01, fp
0f82c     04 4E 05 F1 | 	add	fp, #4
0f830     A7 14 02 FB | 	rdlong	arg02, fp
0f834     FD 16 02 F6 | 	mov	arg03, result1
0f838     28 4E 85 F1 | 	sub	fp, #40
0f83c     D4 4A B0 FD | 	call	#_hg010b_spin2_setspritepos
0f840     A7 F0 03 F6 | 	mov	ptra, fp
0f844     B2 00 A0 FD | 	call	#popregs_
0f848                 | _do_sprite_ret
0f848     2D 00 64 FD | 	ret
0f84c                 | 
0f84c                 | ' 
0f84c                 | ' sub do_mousex
0f84c                 | _do_mousex
0f84c     00 4A 05 F6 | 	mov	COUNT_, #0
0f850     A8 00 A0 FD | 	call	#pushregs_
0f854     0C F0 07 F1 | 	add	ptra, #12
0f858     08 4E 05 F1 | 	add	fp, #8
0f85c     A7 3A 68 FC | 	wrlong	#29, fp
0f860     08 4E 85 F1 | 	sub	fp, #8
0f864     51 00 00 FF 
0f868     B0 E5 05 F1 | 	add	objptr, ##41904
0f86c     F2 12 02 FB | 	rdlong	arg01, objptr
0f870     51 00 00 FF 
0f874     B0 E5 85 F1 | 	sub	objptr, ##41904
0f878     A7 12 62 FC | 	wrlong	arg01, fp
0f87c     A7 12 02 F6 | 	mov	arg01, fp
0f880     24 93 BF FD | 	call	#_push
0f884     A7 F0 03 F6 | 	mov	ptra, fp
0f888     B2 00 A0 FD | 	call	#popregs_
0f88c                 | _do_mousex_ret
0f88c     2D 00 64 FD | 	ret
0f890                 | 
0f890                 | ' 
0f890                 | ' sub do_mousey
0f890                 | _do_mousey
0f890     00 4A 05 F6 | 	mov	COUNT_, #0
0f894     A8 00 A0 FD | 	call	#pushregs_
0f898     0C F0 07 F1 | 	add	ptra, #12
0f89c     08 4E 05 F1 | 	add	fp, #8
0f8a0     A7 3A 68 FC | 	wrlong	#29, fp
0f8a4     08 4E 85 F1 | 	sub	fp, #8
0f8a8     51 00 00 FF 
0f8ac     B4 E5 05 F1 | 	add	objptr, ##41908
0f8b0     F2 12 02 FB | 	rdlong	arg01, objptr
0f8b4     51 00 00 FF 
0f8b8     B4 E5 85 F1 | 	sub	objptr, ##41908
0f8bc     A7 12 62 FC | 	wrlong	arg01, fp
0f8c0     A7 12 02 F6 | 	mov	arg01, fp
0f8c4     E0 92 BF FD | 	call	#_push
0f8c8     A7 F0 03 F6 | 	mov	ptra, fp
0f8cc     B2 00 A0 FD | 	call	#popregs_
0f8d0                 | _do_mousey_ret
0f8d0     2D 00 64 FD | 	ret
0f8d4                 | 
0f8d4                 | ' 
0f8d4                 | ' sub do_mousew
0f8d4                 | _do_mousew
0f8d4     00 4A 05 F6 | 	mov	COUNT_, #0
0f8d8     A8 00 A0 FD | 	call	#pushregs_
0f8dc     0C F0 07 F1 | 	add	ptra, #12
0f8e0     08 4E 05 F1 | 	add	fp, #8
0f8e4     A7 38 68 FC | 	wrlong	#28, fp
0f8e8     08 4E 85 F1 | 	sub	fp, #8
0f8ec     51 00 00 FF 
0f8f0     BC E5 05 F1 | 	add	objptr, ##41916
0f8f4     F2 12 02 FB | 	rdlong	arg01, objptr
0f8f8     51 00 00 FF 
0f8fc     BC E5 85 F1 | 	sub	objptr, ##41916
0f900     A7 12 62 FC | 	wrlong	arg01, fp
0f904     A7 12 02 F6 | 	mov	arg01, fp
0f908     9C 92 BF FD | 	call	#_push
0f90c     A7 F0 03 F6 | 	mov	ptra, fp
0f910     B2 00 A0 FD | 	call	#popregs_
0f914                 | _do_mousew_ret
0f914     2D 00 64 FD | 	ret
0f918                 | 
0f918                 | ' 
0f918                 | ' sub do_mousek
0f918                 | _do_mousek
0f918     00 4A 05 F6 | 	mov	COUNT_, #0
0f91c     A8 00 A0 FD | 	call	#pushregs_
0f920     0C F0 07 F1 | 	add	ptra, #12
0f924     08 4E 05 F1 | 	add	fp, #8
0f928     A7 3A 68 FC | 	wrlong	#29, fp
0f92c     08 4E 85 F1 | 	sub	fp, #8
0f930     51 00 00 FF 
0f934     B8 E5 05 F1 | 	add	objptr, ##41912
0f938     F2 12 02 FB | 	rdlong	arg01, objptr
0f93c     51 00 00 FF 
0f940     B8 E5 85 F1 | 	sub	objptr, ##41912
0f944     A7 12 62 FC | 	wrlong	arg01, fp
0f948     A7 12 02 F6 | 	mov	arg01, fp
0f94c     58 92 BF FD | 	call	#_push
0f950     A7 F0 03 F6 | 	mov	ptra, fp
0f954     B2 00 A0 FD | 	call	#popregs_
0f958                 | _do_mousek_ret
0f958     2D 00 64 FD | 	ret
0f95c                 | 
0f95c                 | ' 
0f95c                 | ' 
0f95c                 | ' sub do_rdpin
0f95c                 | _do_rdpin
0f95c     00 4A 05 F6 | 	mov	COUNT_, #0
0f960     A8 00 A0 FD | 	call	#pushregs_
0f964     0C F0 07 F1 | 	add	ptra, #12
0f968     A4 91 BF FD | 	call	#_pop
0f96c     A7 FA 61 FC | 	wrlong	result1, fp
0f970     04 4E 05 F1 | 	add	fp, #4
0f974     A7 FC 61 FC | 	wrlong	result2, fp
0f978     04 4E 05 F1 | 	add	fp, #4
0f97c     A7 FE 61 FC | 	wrlong	result3, fp
0f980     08 4E 85 F1 | 	sub	fp, #8
0f984     A7 12 02 F6 | 	mov	arg01, fp
0f988     BC F1 BF FD | 	call	#_converttoint
0f98c     FD FA 89 FA | 	rdpin	result1, result1
0f990     52 00 00 FF 
0f994     B0 E4 05 F1 | 	add	objptr, ##42160
0f998     F2 FA 61 FC | 	wrlong	result1, objptr
0f99c     52 00 00 FF 
0f9a0     B0 E4 85 F1 | 	sub	objptr, ##42160
0f9a4     08 4E 05 F1 | 	add	fp, #8
0f9a8     A7 3A 68 FC | 	wrlong	#29, fp
0f9ac     08 4E 85 F1 | 	sub	fp, #8
0f9b0     A7 08 68 FC | 	wrlong	#4, fp
0f9b4     A7 12 02 F6 | 	mov	arg01, fp
0f9b8     EC 91 BF FD | 	call	#_push
0f9bc     A7 F0 03 F6 | 	mov	ptra, fp
0f9c0     B2 00 A0 FD | 	call	#popregs_
0f9c4                 | _do_rdpin_ret
0f9c4     2D 00 64 FD | 	ret
0f9c8                 | 
0f9c8                 | ' 
0f9c8                 | ' sub do_rqpin
0f9c8                 | _do_rqpin
0f9c8     00 4A 05 F6 | 	mov	COUNT_, #0
0f9cc     A8 00 A0 FD | 	call	#pushregs_
0f9d0     0C F0 07 F1 | 	add	ptra, #12
0f9d4     38 91 BF FD | 	call	#_pop
0f9d8     A7 FA 61 FC | 	wrlong	result1, fp
0f9dc     04 4E 05 F1 | 	add	fp, #4
0f9e0     A7 FC 61 FC | 	wrlong	result2, fp
0f9e4     04 4E 05 F1 | 	add	fp, #4
0f9e8     A7 FE 61 FC | 	wrlong	result3, fp
0f9ec     08 4E 85 F1 | 	sub	fp, #8
0f9f0     A7 12 02 F6 | 	mov	arg01, fp
0f9f4     50 F1 BF FD | 	call	#_converttoint
0f9f8     FD 12 02 F6 | 	mov	arg01, result1
0f9fc     00 FA 05 F6 | 	mov	result1, #0
0fa00     09 FB 81 FA | 	rqpin	result1, arg01
0fa04     52 00 00 FF 
0fa08     B0 E4 05 F1 | 	add	objptr, ##42160
0fa0c     F2 FA 61 FC | 	wrlong	result1, objptr
0fa10     52 00 00 FF 
0fa14     B0 E4 85 F1 | 	sub	objptr, ##42160
0fa18     08 4E 05 F1 | 	add	fp, #8
0fa1c     A7 3A 68 FC | 	wrlong	#29, fp
0fa20     08 4E 85 F1 | 	sub	fp, #8
0fa24     A7 08 68 FC | 	wrlong	#4, fp
0fa28     A7 12 02 F6 | 	mov	arg01, fp
0fa2c     78 91 BF FD | 	call	#_push
0fa30     A7 F0 03 F6 | 	mov	ptra, fp
0fa34     B2 00 A0 FD | 	call	#popregs_
0fa38                 | _do_rqpin_ret
0fa38     2D 00 64 FD | 	ret
0fa3c                 | 
0fa3c                 | ' 
0fa3c                 | ' sub do_pinread
0fa3c                 | _do_pinread
0fa3c     00 4A 05 F6 | 	mov	COUNT_, #0
0fa40     A8 00 A0 FD | 	call	#pushregs_
0fa44     0C F0 07 F1 | 	add	ptra, #12
0fa48     C4 90 BF FD | 	call	#_pop
0fa4c     A7 FA 61 FC | 	wrlong	result1, fp
0fa50     04 4E 05 F1 | 	add	fp, #4
0fa54     A7 FC 61 FC | 	wrlong	result2, fp
0fa58     04 4E 05 F1 | 	add	fp, #4
0fa5c     A7 FE 61 FC | 	wrlong	result3, fp
0fa60     08 4E 85 F1 | 	sub	fp, #8
0fa64     A7 12 02 F6 | 	mov	arg01, fp
0fa68     DC F0 BF FD | 	call	#_converttoint
0fa6c     FD 12 02 F6 | 	mov	arg01, result1
0fa70     20 12 CE F7 | 	test	arg01, #32 wz
0fa74     FF FB 01 56 |  if_ne	mov	result1, inb
0fa78     FE FB 01 A6 |  if_e	mov	result1, ina
0fa7c     09 FB 41 F0 | 	shr	result1, arg01
0fa80     06 12 46 F0 | 	shr	arg01, #6
0fa84     09 FB 41 F7 | 	zerox	result1, arg01
0fa88     52 00 00 FF 
0fa8c     B0 E4 05 F1 | 	add	objptr, ##42160
0fa90     F2 FA 61 FC | 	wrlong	result1, objptr
0fa94     52 00 00 FF 
0fa98     B0 E4 85 F1 | 	sub	objptr, ##42160
0fa9c     08 4E 05 F1 | 	add	fp, #8
0faa0     A7 3A 68 FC | 	wrlong	#29, fp
0faa4     08 4E 85 F1 | 	sub	fp, #8
0faa8     A7 08 68 FC | 	wrlong	#4, fp
0faac     A7 12 02 F6 | 	mov	arg01, fp
0fab0     F4 90 BF FD | 	call	#_push
0fab4     A7 F0 03 F6 | 	mov	ptra, fp
0fab8     B2 00 A0 FD | 	call	#popregs_
0fabc                 | _do_pinread_ret
0fabc     2D 00 64 FD | 	ret
0fac0                 | 
0fac0                 | ' 
0fac0                 | ' sub do_gettime
0fac0                 | _do_gettime
0fac0     02 4A 05 F6 | 	mov	COUNT_, #2
0fac4     A8 00 A0 FD | 	call	#pushregs_
0fac8     14 F0 07 F1 | 	add	ptra, #20
0facc                 | ' 
0facc                 | ' const asm 
0facc     1A 1E 72 FD | 	getct	local01 wc
0fad0     1A 20 62 FD | 	getct	local02
0fad4                 | ' 
0fad4                 | ' return hi1, lo1
0fad4     10 FD 01 F6 | 	mov	result2, local02
0fad8     A7 1E 62 FC | 	wrlong	local01, fp
0fadc     04 4E 05 F1 | 	add	fp, #4
0fae0     A7 FC 61 FC | 	wrlong	result2, fp
0fae4     0C 4E 05 F1 | 	add	fp, #12
0fae8     A7 3A 68 FC | 	wrlong	#29, fp
0faec     0C 4E 85 F1 | 	sub	fp, #12
0faf0     A7 12 02 FB | 	rdlong	arg01, fp
0faf4     04 4E 05 F1 | 	add	fp, #4
0faf8     A7 12 62 FC | 	wrlong	arg01, fp
0fafc     08 4E 85 F1 | 	sub	fp, #8
0fb00     A7 12 02 FB | 	rdlong	arg01, fp
0fb04     0C 4E 05 F1 | 	add	fp, #12
0fb08     A7 12 62 FC | 	wrlong	arg01, fp
0fb0c     04 4E 85 F1 | 	sub	fp, #4
0fb10     A7 12 02 F6 | 	mov	arg01, fp
0fb14     08 4E 85 F1 | 	sub	fp, #8
0fb18     8C 90 BF FD | 	call	#_push
0fb1c     A7 F0 03 F6 | 	mov	ptra, fp
0fb20     B2 00 A0 FD | 	call	#popregs_
0fb24                 | _do_gettime_ret
0fb24     2D 00 64 FD | 	ret
0fb28                 | 
0fb28                 | '    
0fb28                 | ' 
0fb28                 | ' '' ----------------------------- Graphics related runtime procedures --------------------------------------
0fb28                 | ' 
0fb28                 | ' '' ----------------------------- Clear the screen
0fb28                 | ' 
0fb28                 | ' sub do_cls
0fb28                 | _do_cls
0fb28     2E 00 00 FF 
0fb2c     00 E4 05 F1 | 	add	objptr, ##23552
0fb30     F2 12 02 FB | 	rdlong	arg01, objptr
0fb34     04 E4 85 F1 | 	sub	objptr, #4
0fb38     F2 14 02 FB | 	rdlong	arg02, objptr
0fb3c     2D 00 00 FF 
0fb40     FC E5 85 F1 | 	sub	objptr, ##23548
0fb44     D0 54 B0 FD | 	call	#_hg010b_spin2_cls
0fb48     2E 00 00 FF 
0fb4c     00 E4 05 F1 | 	add	objptr, ##23552
0fb50     F2 14 02 FB | 	rdlong	arg02, objptr
0fb54     14 E4 85 F1 | 	sub	objptr, #20
0fb58     F2 14 62 FC | 	wrlong	arg02, objptr
0fb5c     2D 00 00 FF 
0fb60     EC E5 85 F1 | 	sub	objptr, ##23532
0fb64                 | ' cls(ink,paper): plot_color=ink: print
0fb64     00 12 06 F6 | 	mov	arg01, #0
0fb68     3C BC B0 FD | 	call	#__system___getiolock_0372
0fb6c     FD 12 02 F6 | 	mov	arg01, result1
0fb70     84 67 B0 FD | 	call	#__system___lockmem
0fb74     00 12 06 F6 | 	mov	arg01, #0
0fb78     0A 14 06 F6 | 	mov	arg02, #10
0fb7c     00 16 06 F6 | 	mov	arg03, #0
0fb80     10 74 B0 FD | 	call	#__system___basic_print_char
0fb84     00 12 06 F6 | 	mov	arg01, #0
0fb88     1C BC B0 FD | 	call	#__system___getiolock_0372
0fb8c     FD 00 68 FC | 	wrlong	#0, result1
0fb90                 | _do_cls_ret
0fb90     2D 00 64 FD | 	ret
0fb94                 | 
0fb94                 | ' 
0fb94                 | ' '' ----------------------------- Set a color # from the palette to plot/draw
0fb94                 | ' 
0fb94                 | ' sub do_color
0fb94                 | _do_color
0fb94     03 4A 05 F6 | 	mov	COUNT_, #3
0fb98     A8 00 A0 FD | 	call	#pushregs_
0fb9c     70 8F BF FD | 	call	#_pop
0fba0     FD 1E 02 F6 | 	mov	local01, result1
0fba4     FE 20 02 F6 | 	mov	local02, result2
0fba8     FF 22 02 F6 | 	mov	local03, result3
0fbac     2D 00 00 FF 
0fbb0     EC E5 05 F1 | 	add	objptr, ##23532
0fbb4     F2 1E 62 FC | 	wrlong	local01, objptr
0fbb8     2D 00 00 FF 
0fbbc     EC E5 85 F1 | 	sub	objptr, ##23532
0fbc0     A7 F0 03 F6 | 	mov	ptra, fp
0fbc4     B2 00 A0 FD | 	call	#popregs_
0fbc8                 | _do_color_ret
0fbc8     2D 00 64 FD | 	ret
0fbcc                 | 
0fbcc                 | ' 
0fbcc                 | ' ' ----------------------------- Plot a point, set starting point to draw a line
0fbcc                 | ' 
0fbcc                 | ' sub do_plot
0fbcc                 | _do_plot
0fbcc     08 4A 05 F6 | 	mov	COUNT_, #8
0fbd0     A8 00 A0 FD | 	call	#pushregs_
0fbd4     38 8F BF FD | 	call	#_pop
0fbd8     FD 1E 02 F6 | 	mov	local01, result1
0fbdc     FE 14 02 F6 | 	mov	arg02, result2
0fbe0     FF 16 02 F6 | 	mov	arg03, result3
0fbe4     0A 21 02 F6 | 	mov	local02, arg02
0fbe8     0B 23 02 F6 | 	mov	local03, arg03
0fbec     20 8F BF FD | 	call	#_pop
0fbf0     FD 24 02 F6 | 	mov	local04, result1
0fbf4     FE 26 02 F6 | 	mov	local05, result2
0fbf8     FF 28 02 F6 | 	mov	local06, result3
0fbfc     12 2B 02 F6 | 	mov	local07, local04
0fc00     0F 2D 02 F6 | 	mov	local08, local01
0fc04                 | ' t2=pop() 					 
0fc04                 | ' t1=pop()
0fc04                 | ' 
0fc04                 | ' x=t1.result.iresult
0fc04                 | ' y=t2.result.iresult	
0fc04                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0fc04     1C 28 0E F2 | 	cmp	local06, #28 wz
0fc08     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0fc0c     44 00 90 5D |  if_ne	jmp	#LR__1270
0fc10     1C 22 0E F2 | 	cmp	local03, #28 wz
0fc14     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0fc18     38 00 90 5D |  if_ne	jmp	#LR__1270
0fc1c     2D 00 00 FF 
0fc20     F0 E5 05 F1 | 	add	objptr, ##23536
0fc24     F2 2A 62 FC | 	wrlong	local07, objptr
0fc28     04 E4 05 F1 | 	add	objptr, #4
0fc2c     F2 2C 62 FC | 	wrlong	local08, objptr
0fc30     04 E4 85 F1 | 	sub	objptr, #4
0fc34     F2 12 02 FB | 	rdlong	arg01, objptr
0fc38     04 E4 85 F1 | 	sub	objptr, #4
0fc3c     F2 16 02 FB | 	rdlong	arg03, objptr
0fc40     2D 00 00 FF 
0fc44     EC E5 85 F1 | 	sub	objptr, ##23532
0fc48     16 15 02 F6 | 	mov	arg02, local08
0fc4c     5C 47 B0 FD | 	call	#_hg010b_spin2_putpixel
0fc50     A4 00 90 FD | 	jmp	#LR__1275
0fc54                 | LR__1270
0fc54                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0fc54     1E 28 0E F2 | 	cmp	local06, #30 wz
0fc58     10 00 90 5D |  if_ne	jmp	#LR__1271
0fc5c     12 13 02 F6 | 	mov	arg01, local04
0fc60     01 14 06 F6 | 	mov	arg02, #1
0fc64     68 94 B0 FD | 	call	#__system___float_tointeger
0fc68     FD 2A 02 F6 | 	mov	local07, result1
0fc6c                 | LR__1271
0fc6c                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0fc6c     1E 22 0E F2 | 	cmp	local03, #30 wz
0fc70     10 00 90 5D |  if_ne	jmp	#LR__1272
0fc74     0F 13 02 F6 | 	mov	arg01, local01
0fc78     01 14 06 F6 | 	mov	arg02, #1
0fc7c     50 94 B0 FD | 	call	#__system___float_tointeger
0fc80     FD 2C 02 F6 | 	mov	local08, result1
0fc84                 | LR__1272
0fc84                 | '   if t1.result_type=result_string then x=val(t1.result.sresult)
0fc84     1F 28 0E F2 | 	cmp	local06, #31 wz
0fc88     18 00 90 5D |  if_ne	jmp	#LR__1273
0fc8c     12 13 02 F6 | 	mov	arg01, local04
0fc90     5C 97 B0 FD | 	call	#__system____builtin_atof
0fc94     FD 12 02 F6 | 	mov	arg01, result1
0fc98     00 14 06 F6 | 	mov	arg02, #0
0fc9c     30 94 B0 FD | 	call	#__system___float_tointeger
0fca0     FD 2A 02 F6 | 	mov	local07, result1
0fca4                 | LR__1273
0fca4                 | '   if t2.result_type=result_string then y=val(t2.result.sresult)
0fca4     1F 22 0E F2 | 	cmp	local03, #31 wz
0fca8     18 00 90 5D |  if_ne	jmp	#LR__1274
0fcac     0F 13 02 F6 | 	mov	arg01, local01
0fcb0     3C 97 B0 FD | 	call	#__system____builtin_atof
0fcb4     FD 12 02 F6 | 	mov	arg01, result1
0fcb8     00 14 06 F6 | 	mov	arg02, #0
0fcbc     10 94 B0 FD | 	call	#__system___float_tointeger
0fcc0     FD 2C 02 F6 | 	mov	local08, result1
0fcc4                 | LR__1274
0fcc4     2D 00 00 FF 
0fcc8     F0 E5 05 F1 | 	add	objptr, ##23536
0fccc     F2 2A 62 FC | 	wrlong	local07, objptr
0fcd0     04 E4 05 F1 | 	add	objptr, #4
0fcd4     F2 2C 62 FC | 	wrlong	local08, objptr
0fcd8     04 E4 85 F1 | 	sub	objptr, #4
0fcdc     F2 12 02 FB | 	rdlong	arg01, objptr
0fce0     04 E4 85 F1 | 	sub	objptr, #4
0fce4     F2 16 02 FB | 	rdlong	arg03, objptr
0fce8     2D 00 00 FF 
0fcec     EC E5 85 F1 | 	sub	objptr, ##23532
0fcf0     16 15 02 F6 | 	mov	arg02, local08
0fcf4     B4 46 B0 FD | 	call	#_hg010b_spin2_putpixel
0fcf8                 | LR__1275
0fcf8     A7 F0 03 F6 | 	mov	ptra, fp
0fcfc     B2 00 A0 FD | 	call	#popregs_
0fd00                 | _do_plot_ret
0fd00     2D 00 64 FD | 	ret
0fd04                 | 
0fd04                 | ' 
0fd04                 | ' ' --------------------------- Draw a line to point set by plot or previous draw, set a new starting point
0fd04                 | ' 
0fd04                 | ' sub do_draw
0fd04                 | _do_draw
0fd04     08 4A 05 F6 | 	mov	COUNT_, #8
0fd08     A8 00 A0 FD | 	call	#pushregs_
0fd0c     00 8E BF FD | 	call	#_pop
0fd10     FD 1E 02 F6 | 	mov	local01, result1
0fd14     FE 18 02 F6 | 	mov	arg04, result2
0fd18     FF 16 02 F6 | 	mov	arg03, result3
0fd1c     0C 21 02 F6 | 	mov	local02, arg04
0fd20     0B 23 02 F6 | 	mov	local03, arg03
0fd24     E8 8D BF FD | 	call	#_pop
0fd28     FD 24 02 F6 | 	mov	local04, result1
0fd2c     FE 26 02 F6 | 	mov	local05, result2
0fd30     FF 28 02 F6 | 	mov	local06, result3
0fd34     12 2B 02 F6 | 	mov	local07, local04
0fd38     0F 2D 02 F6 | 	mov	local08, local01
0fd3c                 | ' 
0fd3c                 | ' t2=pop()
0fd3c                 | ' t1=pop()
0fd3c                 | ' x=t1.result.iresult
0fd3c                 | ' y=t2.result.iresult
0fd3c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) then 					  
0fd3c     1C 28 0E F2 | 	cmp	local06, #28 wz
0fd40     1D 28 0E 52 |  if_ne	cmp	local06, #29 wz
0fd44     5C 00 90 5D |  if_ne	jmp	#LR__1280
0fd48     1C 22 0E F2 | 	cmp	local03, #28 wz
0fd4c     1D 22 0E 52 |  if_ne	cmp	local03, #29 wz
0fd50     50 00 90 5D |  if_ne	jmp	#LR__1280
0fd54     2D 00 00 FF 
0fd58     F0 E5 05 F1 | 	add	objptr, ##23536
0fd5c     F2 12 02 FB | 	rdlong	arg01, objptr
0fd60     04 E4 05 F1 | 	add	objptr, #4
0fd64     F2 14 02 FB | 	rdlong	arg02, objptr
0fd68     08 E4 85 F1 | 	sub	objptr, #8
0fd6c     F2 1A 02 FB | 	rdlong	arg05, objptr
0fd70     2D 00 00 FF 
0fd74     EC E5 85 F1 | 	sub	objptr, ##23532
0fd78     15 17 02 F6 | 	mov	arg03, local07
0fd7c     16 19 02 F6 | 	mov	arg04, local08
0fd80     D8 48 B0 FD | 	call	#_hg010b_spin2_draw
0fd84     2D 00 00 FF 
0fd88     F0 E5 05 F1 | 	add	objptr, ##23536
0fd8c     F2 2A 62 FC | 	wrlong	local07, objptr
0fd90     04 E4 05 F1 | 	add	objptr, #4
0fd94     F2 2C 62 FC | 	wrlong	local08, objptr
0fd98     2D 00 00 FF 
0fd9c     F4 E5 85 F1 | 	sub	objptr, ##23540
0fda0     BC 00 90 FD | 	jmp	#LR__1285
0fda4                 | LR__1280
0fda4                 | '   if t1.result_type=result_float then x=round(t1.result.fresult)
0fda4     1E 28 0E F2 | 	cmp	local06, #30 wz
0fda8     10 00 90 5D |  if_ne	jmp	#LR__1281
0fdac     12 13 02 F6 | 	mov	arg01, local04
0fdb0     01 14 06 F6 | 	mov	arg02, #1
0fdb4     18 93 B0 FD | 	call	#__system___float_tointeger
0fdb8     FD 2A 02 F6 | 	mov	local07, result1
0fdbc                 | LR__1281
0fdbc                 | '   if t2.result_type=result_float then y=round(t2.result.fresult)
0fdbc     1E 22 0E F2 | 	cmp	local03, #30 wz
0fdc0     10 00 90 5D |  if_ne	jmp	#LR__1282
0fdc4     0F 13 02 F6 | 	mov	arg01, local01
0fdc8     01 14 06 F6 | 	mov	arg02, #1
0fdcc     00 93 B0 FD | 	call	#__system___float_tointeger
0fdd0     FD 2C 02 F6 | 	mov	local08, result1
0fdd4                 | LR__1282
0fdd4                 | '   if t1.result_type=result_string then x=val(t1.result.fresult)
0fdd4     1F 28 0E F2 | 	cmp	local06, #31 wz
0fdd8     18 00 90 5D |  if_ne	jmp	#LR__1283
0fddc     12 13 02 F6 | 	mov	arg01, local04
0fde0     0C 96 B0 FD | 	call	#__system____builtin_atof
0fde4     FD 12 02 F6 | 	mov	arg01, result1
0fde8     00 14 06 F6 | 	mov	arg02, #0
0fdec     E0 92 B0 FD | 	call	#__system___float_tointeger
0fdf0     FD 2A 02 F6 | 	mov	local07, result1
0fdf4                 | LR__1283
0fdf4                 | '   if t2.result_type=result_string then y=val(t2.result.fresult)    
0fdf4     1F 22 0E F2 | 	cmp	local03, #31 wz
0fdf8     18 00 90 5D |  if_ne	jmp	#LR__1284
0fdfc     0F 13 02 F6 | 	mov	arg01, local01
0fe00     EC 95 B0 FD | 	call	#__system____builtin_atof
0fe04     FD 12 02 F6 | 	mov	arg01, result1
0fe08     00 14 06 F6 | 	mov	arg02, #0
0fe0c     C0 92 B0 FD | 	call	#__system___float_tointeger
0fe10     FD 2C 02 F6 | 	mov	local08, result1
0fe14                 | LR__1284
0fe14     2D 00 00 FF 
0fe18     F0 E5 05 F1 | 	add	objptr, ##23536
0fe1c     F2 12 02 FB | 	rdlong	arg01, objptr
0fe20     04 E4 05 F1 | 	add	objptr, #4
0fe24     F2 14 02 FB | 	rdlong	arg02, objptr
0fe28     08 E4 85 F1 | 	sub	objptr, #8
0fe2c     F2 1A 02 FB | 	rdlong	arg05, objptr
0fe30     2D 00 00 FF 
0fe34     EC E5 85 F1 | 	sub	objptr, ##23532
0fe38     15 17 02 F6 | 	mov	arg03, local07
0fe3c     16 19 02 F6 | 	mov	arg04, local08
0fe40     18 48 B0 FD | 	call	#_hg010b_spin2_draw
0fe44     2D 00 00 FF 
0fe48     F0 E5 05 F1 | 	add	objptr, ##23536
0fe4c     F2 2A 62 FC | 	wrlong	local07, objptr
0fe50     04 E4 05 F1 | 	add	objptr, #4
0fe54     F2 2C 62 FC | 	wrlong	local08, objptr
0fe58     2D 00 00 FF 
0fe5c     F4 E5 85 F1 | 	sub	objptr, ##23540
0fe60                 | LR__1285
0fe60     A7 F0 03 F6 | 	mov	ptra, fp
0fe64     B2 00 A0 FD | 	call	#popregs_
0fe68                 | _do_draw_ret
0fe68     2D 00 64 FD | 	ret
0fe6c                 | 
0fe6c                 | ' 
0fe6c                 | ' ' -------------------------- Draw a filled circle at x,y and radius r
0fe6c                 | ' 
0fe6c                 | ' sub do_fcircle
0fe6c                 | _do_fcircle
0fe6c     02 4A 05 F6 | 	mov	COUNT_, #2
0fe70     A8 00 A0 FD | 	call	#pushregs_
0fe74     24 F0 07 F1 | 	add	ptra, #36
0fe78     94 8C BF FD | 	call	#_pop
0fe7c     FD 18 02 F6 | 	mov	arg04, result1
0fe80     FE 16 02 F6 | 	mov	arg03, result2
0fe84     FF 14 02 F6 | 	mov	arg02, result3
0fe88     18 4E 05 F1 | 	add	fp, #24
0fe8c     A7 18 62 FC | 	wrlong	arg04, fp
0fe90     04 4E 05 F1 | 	add	fp, #4
0fe94     A7 16 62 FC | 	wrlong	arg03, fp
0fe98     04 4E 05 F1 | 	add	fp, #4
0fe9c     A7 14 62 FC | 	wrlong	arg02, fp
0fea0     20 4E 85 F1 | 	sub	fp, #32
0fea4     68 8C BF FD | 	call	#_pop
0fea8     FD 18 02 F6 | 	mov	arg04, result1
0feac     FE 16 02 F6 | 	mov	arg03, result2
0feb0     FF 1E 02 F6 | 	mov	local01, result3
0feb4     0C 4E 05 F1 | 	add	fp, #12
0feb8     A7 18 62 FC | 	wrlong	arg04, fp
0febc     04 4E 05 F1 | 	add	fp, #4
0fec0     A7 16 62 FC | 	wrlong	arg03, fp
0fec4     04 4E 05 F1 | 	add	fp, #4
0fec8     A7 1E 62 FC | 	wrlong	local01, fp
0fecc     14 4E 85 F1 | 	sub	fp, #20
0fed0     3C 8C BF FD | 	call	#_pop
0fed4     A7 FA 61 FC | 	wrlong	result1, fp
0fed8     04 4E 05 F1 | 	add	fp, #4
0fedc     A7 FC 61 FC | 	wrlong	result2, fp
0fee0     04 4E 05 F1 | 	add	fp, #4
0fee4     A7 FE 61 FC | 	wrlong	result3, fp
0fee8                 | ' 
0fee8                 | ' t3=pop()
0fee8                 | ' t2=pop()
0fee8                 | ' t1=pop()
0fee8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0fee8     FF 18 02 F6 | 	mov	arg04, result3
0feec     08 4E 85 F1 | 	sub	fp, #8
0fef0     1C 18 0E F2 | 	cmp	arg04, #28 wz
0fef4     08 4E 05 51 |  if_ne	add	fp, #8
0fef8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0fefc     08 4E 85 51 |  if_ne	sub	fp, #8
0ff00     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0ff04     7C 00 90 5D |  if_ne	jmp	#LR__1290
0ff08     14 4E 05 F1 | 	add	fp, #20
0ff0c     A7 1E 02 FB | 	rdlong	local01, fp
0ff10     14 4E 85 F1 | 	sub	fp, #20
0ff14     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ff18     14 4E 05 51 |  if_ne	add	fp, #20
0ff1c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0ff20     14 4E 85 51 |  if_ne	sub	fp, #20
0ff24     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0ff28     58 00 90 5D |  if_ne	jmp	#LR__1290
0ff2c     20 4E 05 F1 | 	add	fp, #32
0ff30     A7 1E 02 FB | 	rdlong	local01, fp
0ff34     20 4E 85 F1 | 	sub	fp, #32
0ff38     1C 1E 0E F2 | 	cmp	local01, #28 wz
0ff3c     20 4E 05 51 |  if_ne	add	fp, #32
0ff40     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0ff44     20 4E 85 51 |  if_ne	sub	fp, #32
0ff48     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0ff4c     34 00 90 5D |  if_ne	jmp	#LR__1290
0ff50     A7 12 02 FB | 	rdlong	arg01, fp
0ff54     0C 4E 05 F1 | 	add	fp, #12
0ff58     A7 14 02 FB | 	rdlong	arg02, fp
0ff5c     0C 4E 05 F1 | 	add	fp, #12
0ff60     A7 16 02 FB | 	rdlong	arg03, fp
0ff64     18 4E 85 F1 | 	sub	fp, #24
0ff68     2D 00 00 FF 
0ff6c     EC E5 05 F1 | 	add	objptr, ##23532
0ff70     F2 18 02 FB | 	rdlong	arg04, objptr
0ff74     2D 00 00 FF 
0ff78     EC E5 85 F1 | 	sub	objptr, ##23532
0ff7c     60 4B B0 FD | 	call	#_hg010b_spin2_fcircle
0ff80                 | '    v.fcircle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0ff80     54 00 90 FD | 	jmp	#LR__1291
0ff84                 | LR__1290
0ff84     A7 12 02 F6 | 	mov	arg01, fp
0ff88     BC EB BF FD | 	call	#_converttoint
0ff8c     FD 1E 02 F6 | 	mov	local01, result1
0ff90     0C 4E 05 F1 | 	add	fp, #12
0ff94     A7 12 02 F6 | 	mov	arg01, fp
0ff98     0C 4E 85 F1 | 	sub	fp, #12
0ff9c     A8 EB BF FD | 	call	#_converttoint
0ffa0     FD 20 02 F6 | 	mov	local02, result1
0ffa4     18 4E 05 F1 | 	add	fp, #24
0ffa8     A7 12 02 F6 | 	mov	arg01, fp
0ffac     18 4E 85 F1 | 	sub	fp, #24
0ffb0     94 EB BF FD | 	call	#_converttoint
0ffb4     FD 16 02 F6 | 	mov	arg03, result1
0ffb8     2D 00 00 FF 
0ffbc     EC E5 05 F1 | 	add	objptr, ##23532
0ffc0     F2 18 02 FB | 	rdlong	arg04, objptr
0ffc4     2D 00 00 FF 
0ffc8     EC E5 85 F1 | 	sub	objptr, ##23532
0ffcc     0F 13 02 F6 | 	mov	arg01, local01
0ffd0     10 15 02 F6 | 	mov	arg02, local02
0ffd4     08 4B B0 FD | 	call	#_hg010b_spin2_fcircle
0ffd8                 | LR__1291
0ffd8     A7 F0 03 F6 | 	mov	ptra, fp
0ffdc     B2 00 A0 FD | 	call	#popregs_
0ffe0                 | _do_fcircle_ret
0ffe0     2D 00 64 FD | 	ret
0ffe4                 | 
0ffe4                 | ' 
0ffe4                 | ' ' -------------------------- Draw an empty circle at x,y and radius r
0ffe4                 | ' 
0ffe4                 | ' sub do_circle
0ffe4                 | _do_circle
0ffe4     02 4A 05 F6 | 	mov	COUNT_, #2
0ffe8     A8 00 A0 FD | 	call	#pushregs_
0ffec     24 F0 07 F1 | 	add	ptra, #36
0fff0     1C 8B BF FD | 	call	#_pop
0fff4     FD 18 02 F6 | 	mov	arg04, result1
0fff8     FE 16 02 F6 | 	mov	arg03, result2
0fffc     FF 14 02 F6 | 	mov	arg02, result3
10000     18 4E 05 F1 | 	add	fp, #24
10004     A7 18 62 FC | 	wrlong	arg04, fp
10008     04 4E 05 F1 | 	add	fp, #4
1000c     A7 16 62 FC | 	wrlong	arg03, fp
10010     04 4E 05 F1 | 	add	fp, #4
10014     A7 14 62 FC | 	wrlong	arg02, fp
10018     20 4E 85 F1 | 	sub	fp, #32
1001c     F0 8A BF FD | 	call	#_pop
10020     FD 18 02 F6 | 	mov	arg04, result1
10024     FE 16 02 F6 | 	mov	arg03, result2
10028     FF 1E 02 F6 | 	mov	local01, result3
1002c     0C 4E 05 F1 | 	add	fp, #12
10030     A7 18 62 FC | 	wrlong	arg04, fp
10034     04 4E 05 F1 | 	add	fp, #4
10038     A7 16 62 FC | 	wrlong	arg03, fp
1003c     04 4E 05 F1 | 	add	fp, #4
10040     A7 1E 62 FC | 	wrlong	local01, fp
10044     14 4E 85 F1 | 	sub	fp, #20
10048     C4 8A BF FD | 	call	#_pop
1004c     A7 FA 61 FC | 	wrlong	result1, fp
10050     04 4E 05 F1 | 	add	fp, #4
10054     A7 FC 61 FC | 	wrlong	result2, fp
10058     04 4E 05 F1 | 	add	fp, #4
1005c     A7 FE 61 FC | 	wrlong	result3, fp
10060                 | ' 
10060                 | ' t3=pop()
10060                 | ' t2=pop()
10060                 | ' t1=pop()
10060                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
10060     FF 18 02 F6 | 	mov	arg04, result3
10064     08 4E 85 F1 | 	sub	fp, #8
10068     1C 18 0E F2 | 	cmp	arg04, #28 wz
1006c     08 4E 05 51 |  if_ne	add	fp, #8
10070     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10074     08 4E 85 51 |  if_ne	sub	fp, #8
10078     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
1007c     7C 00 90 5D |  if_ne	jmp	#LR__1300
10080     14 4E 05 F1 | 	add	fp, #20
10084     A7 1E 02 FB | 	rdlong	local01, fp
10088     14 4E 85 F1 | 	sub	fp, #20
1008c     1C 1E 0E F2 | 	cmp	local01, #28 wz
10090     14 4E 05 51 |  if_ne	add	fp, #20
10094     A7 18 02 5B |  if_ne	rdlong	arg04, fp
10098     14 4E 85 51 |  if_ne	sub	fp, #20
1009c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
100a0     58 00 90 5D |  if_ne	jmp	#LR__1300
100a4     20 4E 05 F1 | 	add	fp, #32
100a8     A7 1E 02 FB | 	rdlong	local01, fp
100ac     20 4E 85 F1 | 	sub	fp, #32
100b0     1C 1E 0E F2 | 	cmp	local01, #28 wz
100b4     20 4E 05 51 |  if_ne	add	fp, #32
100b8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
100bc     20 4E 85 51 |  if_ne	sub	fp, #32
100c0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
100c4     34 00 90 5D |  if_ne	jmp	#LR__1300
100c8     A7 12 02 FB | 	rdlong	arg01, fp
100cc     0C 4E 05 F1 | 	add	fp, #12
100d0     A7 14 02 FB | 	rdlong	arg02, fp
100d4     0C 4E 05 F1 | 	add	fp, #12
100d8     A7 16 02 FB | 	rdlong	arg03, fp
100dc     18 4E 85 F1 | 	sub	fp, #24
100e0     2D 00 00 FF 
100e4     EC E5 05 F1 | 	add	objptr, ##23532
100e8     F2 18 02 FB | 	rdlong	arg04, objptr
100ec     2D 00 00 FF 
100f0     EC E5 85 F1 | 	sub	objptr, ##23532
100f4     F4 4A B0 FD | 	call	#_hg010b_spin2_circle
100f8                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
100f8     54 00 90 FD | 	jmp	#LR__1301
100fc                 | LR__1300
100fc     A7 12 02 F6 | 	mov	arg01, fp
10100     44 EA BF FD | 	call	#_converttoint
10104     FD 1E 02 F6 | 	mov	local01, result1
10108     0C 4E 05 F1 | 	add	fp, #12
1010c     A7 12 02 F6 | 	mov	arg01, fp
10110     0C 4E 85 F1 | 	sub	fp, #12
10114     30 EA BF FD | 	call	#_converttoint
10118     FD 20 02 F6 | 	mov	local02, result1
1011c     18 4E 05 F1 | 	add	fp, #24
10120     A7 12 02 F6 | 	mov	arg01, fp
10124     18 4E 85 F1 | 	sub	fp, #24
10128     1C EA BF FD | 	call	#_converttoint
1012c     FD 16 02 F6 | 	mov	arg03, result1
10130     2D 00 00 FF 
10134     EC E5 05 F1 | 	add	objptr, ##23532
10138     F2 18 02 FB | 	rdlong	arg04, objptr
1013c     2D 00 00 FF 
10140     EC E5 85 F1 | 	sub	objptr, ##23532
10144     0F 13 02 F6 | 	mov	arg01, local01
10148     10 15 02 F6 | 	mov	arg02, local02
1014c     9C 4A B0 FD | 	call	#_hg010b_spin2_circle
10150                 | LR__1301
10150     A7 F0 03 F6 | 	mov	ptra, fp
10154     B2 00 A0 FD | 	call	#popregs_
10158                 | _do_circle_ret
10158     2D 00 64 FD | 	ret
1015c                 | 
1015c                 | ' 
1015c                 | ' ' -------------------------- Draw a rectangle
1015c                 | ' 
1015c                 | ' sub do_box
1015c                 | _do_box
1015c     03 4A 05 F6 | 	mov	COUNT_, #3
10160     A8 00 A0 FD | 	call	#pushregs_
10164     30 F0 07 F1 | 	add	ptra, #48
10168     A4 89 BF FD | 	call	#_pop
1016c     FD 1A 02 F6 | 	mov	arg05, result1
10170     FE 18 02 F6 | 	mov	arg04, result2
10174     FF 16 02 F6 | 	mov	arg03, result3
10178     24 4E 05 F1 | 	add	fp, #36
1017c     A7 1A 62 FC | 	wrlong	arg05, fp
10180     04 4E 05 F1 | 	add	fp, #4
10184     A7 18 62 FC | 	wrlong	arg04, fp
10188     04 4E 05 F1 | 	add	fp, #4
1018c     A7 16 62 FC | 	wrlong	arg03, fp
10190     2C 4E 85 F1 | 	sub	fp, #44
10194     78 89 BF FD | 	call	#_pop
10198     FD 1A 02 F6 | 	mov	arg05, result1
1019c     FE 18 02 F6 | 	mov	arg04, result2
101a0     FF 16 02 F6 | 	mov	arg03, result3
101a4     18 4E 05 F1 | 	add	fp, #24
101a8     A7 1A 62 FC | 	wrlong	arg05, fp
101ac     04 4E 05 F1 | 	add	fp, #4
101b0     A7 18 62 FC | 	wrlong	arg04, fp
101b4     04 4E 05 F1 | 	add	fp, #4
101b8     A7 16 62 FC | 	wrlong	arg03, fp
101bc     20 4E 85 F1 | 	sub	fp, #32
101c0     4C 89 BF FD | 	call	#_pop
101c4     FD 1A 02 F6 | 	mov	arg05, result1
101c8     FE 18 02 F6 | 	mov	arg04, result2
101cc     FF 1E 02 F6 | 	mov	local01, result3
101d0     0C 4E 05 F1 | 	add	fp, #12
101d4     A7 1A 62 FC | 	wrlong	arg05, fp
101d8     04 4E 05 F1 | 	add	fp, #4
101dc     A7 18 62 FC | 	wrlong	arg04, fp
101e0     04 4E 05 F1 | 	add	fp, #4
101e4     A7 1E 62 FC | 	wrlong	local01, fp
101e8     14 4E 85 F1 | 	sub	fp, #20
101ec     20 89 BF FD | 	call	#_pop
101f0     A7 FA 61 FC | 	wrlong	result1, fp
101f4     04 4E 05 F1 | 	add	fp, #4
101f8     A7 FC 61 FC | 	wrlong	result2, fp
101fc     04 4E 05 F1 | 	add	fp, #4
10200     A7 FE 61 FC | 	wrlong	result3, fp
10204                 | ' 
10204                 | ' t4=pop()
10204                 | ' t3=pop()
10204                 | ' t2=pop()
10204                 | ' t1=pop()
10204                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
10204     FF 1A 02 F6 | 	mov	arg05, result3
10208     08 4E 85 F1 | 	sub	fp, #8
1020c     1C 1A 0E F2 | 	cmp	arg05, #28 wz
10210     08 4E 05 51 |  if_ne	add	fp, #8
10214     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10218     08 4E 85 51 |  if_ne	sub	fp, #8
1021c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
10220     A8 00 90 5D |  if_ne	jmp	#LR__1310
10224     14 4E 05 F1 | 	add	fp, #20
10228     A7 1E 02 FB | 	rdlong	local01, fp
1022c     14 4E 85 F1 | 	sub	fp, #20
10230     1C 1E 0E F2 | 	cmp	local01, #28 wz
10234     14 4E 05 51 |  if_ne	add	fp, #20
10238     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1023c     14 4E 85 51 |  if_ne	sub	fp, #20
10240     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
10244     84 00 90 5D |  if_ne	jmp	#LR__1310
10248     20 4E 05 F1 | 	add	fp, #32
1024c     A7 1E 02 FB | 	rdlong	local01, fp
10250     20 4E 85 F1 | 	sub	fp, #32
10254     1C 1E 0E F2 | 	cmp	local01, #28 wz
10258     20 4E 05 51 |  if_ne	add	fp, #32
1025c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
10260     20 4E 85 51 |  if_ne	sub	fp, #32
10264     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
10268     60 00 90 5D |  if_ne	jmp	#LR__1310
1026c     2C 4E 05 F1 | 	add	fp, #44
10270     A7 1E 02 FB | 	rdlong	local01, fp
10274     2C 4E 85 F1 | 	sub	fp, #44
10278     1C 1E 0E F2 | 	cmp	local01, #28 wz
1027c     2C 4E 05 51 |  if_ne	add	fp, #44
10280     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
10284     2C 4E 85 51 |  if_ne	sub	fp, #44
10288     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
1028c     3C 00 90 5D |  if_ne	jmp	#LR__1310
10290     A7 12 02 FB | 	rdlong	arg01, fp
10294     0C 4E 05 F1 | 	add	fp, #12
10298     A7 14 02 FB | 	rdlong	arg02, fp
1029c     0C 4E 05 F1 | 	add	fp, #12
102a0     A7 16 02 FB | 	rdlong	arg03, fp
102a4     0C 4E 05 F1 | 	add	fp, #12
102a8     A7 18 02 FB | 	rdlong	arg04, fp
102ac     24 4E 85 F1 | 	sub	fp, #36
102b0     2D 00 00 FF 
102b4     EC E5 05 F1 | 	add	objptr, ##23532
102b8     F2 1A 02 FB | 	rdlong	arg05, objptr
102bc     2D 00 00 FF 
102c0     EC E5 85 F1 | 	sub	objptr, ##23532
102c4     F0 4A B0 FD | 	call	#_hg010b_spin2_box
102c8                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
102c8     6C 00 90 FD | 	jmp	#LR__1311
102cc                 | LR__1310
102cc     A7 12 02 F6 | 	mov	arg01, fp
102d0     74 E8 BF FD | 	call	#_converttoint
102d4     FD 20 02 F6 | 	mov	local02, result1
102d8     0C 4E 05 F1 | 	add	fp, #12
102dc     A7 12 02 F6 | 	mov	arg01, fp
102e0     0C 4E 85 F1 | 	sub	fp, #12
102e4     60 E8 BF FD | 	call	#_converttoint
102e8     FD 22 02 F6 | 	mov	local03, result1
102ec     18 4E 05 F1 | 	add	fp, #24
102f0     A7 12 02 F6 | 	mov	arg01, fp
102f4     18 4E 85 F1 | 	sub	fp, #24
102f8     4C E8 BF FD | 	call	#_converttoint
102fc     FD 1E 02 F6 | 	mov	local01, result1
10300     24 4E 05 F1 | 	add	fp, #36
10304     A7 12 02 F6 | 	mov	arg01, fp
10308     24 4E 85 F1 | 	sub	fp, #36
1030c     38 E8 BF FD | 	call	#_converttoint
10310     FD 18 02 F6 | 	mov	arg04, result1
10314     2D 00 00 FF 
10318     EC E5 05 F1 | 	add	objptr, ##23532
1031c     F2 1A 02 FB | 	rdlong	arg05, objptr
10320     2D 00 00 FF 
10324     EC E5 85 F1 | 	sub	objptr, ##23532
10328     10 13 02 F6 | 	mov	arg01, local02
1032c     11 15 02 F6 | 	mov	arg02, local03
10330     0F 17 02 F6 | 	mov	arg03, local01
10334     80 4A B0 FD | 	call	#_hg010b_spin2_box
10338                 | LR__1311
10338     A7 F0 03 F6 | 	mov	ptra, fp
1033c     B2 00 A0 FD | 	call	#popregs_
10340                 | _do_box_ret
10340     2D 00 64 FD | 	ret
10344                 | 
10344                 | ' 
10344                 | ' sub do_fill
10344                 | _do_fill
10344     03 4A 05 F6 | 	mov	COUNT_, #3
10348     A8 00 A0 FD | 	call	#pushregs_
1034c     30 F0 07 F1 | 	add	ptra, #48
10350     BC 87 BF FD | 	call	#_pop
10354     FD 18 02 F6 | 	mov	arg04, result1
10358     FE 16 02 F6 | 	mov	arg03, result2
1035c     FF 14 02 F6 | 	mov	arg02, result3
10360     24 4E 05 F1 | 	add	fp, #36
10364     A7 18 62 FC | 	wrlong	arg04, fp
10368     04 4E 05 F1 | 	add	fp, #4
1036c     A7 16 62 FC | 	wrlong	arg03, fp
10370     04 4E 05 F1 | 	add	fp, #4
10374     A7 14 62 FC | 	wrlong	arg02, fp
10378     2C 4E 85 F1 | 	sub	fp, #44
1037c     90 87 BF FD | 	call	#_pop
10380     FD 18 02 F6 | 	mov	arg04, result1
10384     FE 16 02 F6 | 	mov	arg03, result2
10388     FF 14 02 F6 | 	mov	arg02, result3
1038c     18 4E 05 F1 | 	add	fp, #24
10390     A7 18 62 FC | 	wrlong	arg04, fp
10394     04 4E 05 F1 | 	add	fp, #4
10398     A7 16 62 FC | 	wrlong	arg03, fp
1039c     04 4E 05 F1 | 	add	fp, #4
103a0     A7 14 62 FC | 	wrlong	arg02, fp
103a4     20 4E 85 F1 | 	sub	fp, #32
103a8     64 87 BF FD | 	call	#_pop
103ac     FD 18 02 F6 | 	mov	arg04, result1
103b0     FE 16 02 F6 | 	mov	arg03, result2
103b4     FF 1E 02 F6 | 	mov	local01, result3
103b8     0C 4E 05 F1 | 	add	fp, #12
103bc     A7 18 62 FC | 	wrlong	arg04, fp
103c0     04 4E 05 F1 | 	add	fp, #4
103c4     A7 16 62 FC | 	wrlong	arg03, fp
103c8     04 4E 05 F1 | 	add	fp, #4
103cc     A7 1E 62 FC | 	wrlong	local01, fp
103d0     14 4E 85 F1 | 	sub	fp, #20
103d4     38 87 BF FD | 	call	#_pop
103d8     A7 FA 61 FC | 	wrlong	result1, fp
103dc     04 4E 05 F1 | 	add	fp, #4
103e0     A7 FC 61 FC | 	wrlong	result2, fp
103e4     04 4E 05 F1 | 	add	fp, #4
103e8     A7 FE 61 FC | 	wrlong	result3, fp
103ec                 | ' 
103ec                 | ' t4=pop()
103ec                 | ' t3=pop()
103ec                 | ' t2=pop()
103ec                 | ' t1=pop()
103ec                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
103ec     FF 18 02 F6 | 	mov	arg04, result3
103f0     08 4E 85 F1 | 	sub	fp, #8
103f4     1C 18 0E F2 | 	cmp	arg04, #28 wz
103f8     08 4E 05 51 |  if_ne	add	fp, #8
103fc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
10400     08 4E 85 51 |  if_ne	sub	fp, #8
10404     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
10408     94 00 90 5D |  if_ne	jmp	#LR__1320
1040c     14 4E 05 F1 | 	add	fp, #20
10410     A7 1E 02 FB | 	rdlong	local01, fp
10414     14 4E 85 F1 | 	sub	fp, #20
10418     1C 1E 0E F2 | 	cmp	local01, #28 wz
1041c     14 4E 05 51 |  if_ne	add	fp, #20
10420     A7 18 02 5B |  if_ne	rdlong	arg04, fp
10424     14 4E 85 51 |  if_ne	sub	fp, #20
10428     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
1042c     70 00 90 5D |  if_ne	jmp	#LR__1320
10430     20 4E 05 F1 | 	add	fp, #32
10434     A7 1E 02 FB | 	rdlong	local01, fp
10438     20 4E 85 F1 | 	sub	fp, #32
1043c     1C 1E 0E F2 | 	cmp	local01, #28 wz
10440     20 4E 05 51 |  if_ne	add	fp, #32
10444     A7 18 02 5B |  if_ne	rdlong	arg04, fp
10448     20 4E 85 51 |  if_ne	sub	fp, #32
1044c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
10450     4C 00 90 5D |  if_ne	jmp	#LR__1320
10454     2C 4E 05 F1 | 	add	fp, #44
10458     A7 1E 02 FB | 	rdlong	local01, fp
1045c     2C 4E 85 F1 | 	sub	fp, #44
10460     1C 1E 0E F2 | 	cmp	local01, #28 wz
10464     2C 4E 05 51 |  if_ne	add	fp, #44
10468     A7 18 02 5B |  if_ne	rdlong	arg04, fp
1046c     2C 4E 85 51 |  if_ne	sub	fp, #44
10470     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
10474     28 00 90 5D |  if_ne	jmp	#LR__1320
10478     A7 12 02 FB | 	rdlong	arg01, fp
1047c     0C 4E 05 F1 | 	add	fp, #12
10480     A7 14 02 FB | 	rdlong	arg02, fp
10484     0C 4E 05 F1 | 	add	fp, #12
10488     A7 16 02 FB | 	rdlong	arg03, fp
1048c     0C 4E 05 F1 | 	add	fp, #12
10490     A7 18 02 FB | 	rdlong	arg04, fp
10494     24 4E 85 F1 | 	sub	fp, #36
10498     B0 43 B0 FD | 	call	#_hg010b_spin2_fill
1049c                 | '    v.fill(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult) : return
1049c     58 00 90 FD | 	jmp	#LR__1321
104a0                 | LR__1320
104a0     A7 12 02 F6 | 	mov	arg01, fp
104a4     A0 E6 BF FD | 	call	#_converttoint
104a8     FD 20 02 F6 | 	mov	local02, result1
104ac     0C 4E 05 F1 | 	add	fp, #12
104b0     A7 12 02 F6 | 	mov	arg01, fp
104b4     0C 4E 85 F1 | 	sub	fp, #12
104b8     8C E6 BF FD | 	call	#_converttoint
104bc     FD 22 02 F6 | 	mov	local03, result1
104c0     18 4E 05 F1 | 	add	fp, #24
104c4     A7 12 02 F6 | 	mov	arg01, fp
104c8     18 4E 85 F1 | 	sub	fp, #24
104cc     78 E6 BF FD | 	call	#_converttoint
104d0     FD 1E 02 F6 | 	mov	local01, result1
104d4     24 4E 05 F1 | 	add	fp, #36
104d8     A7 12 02 F6 | 	mov	arg01, fp
104dc     24 4E 85 F1 | 	sub	fp, #36
104e0     64 E6 BF FD | 	call	#_converttoint
104e4     FD 18 02 F6 | 	mov	arg04, result1
104e8     10 13 02 F6 | 	mov	arg01, local02
104ec     11 15 02 F6 | 	mov	arg02, local03
104f0     0F 17 02 F6 | 	mov	arg03, local01
104f4     54 43 B0 FD | 	call	#_hg010b_spin2_fill
104f8                 | LR__1321
104f8     A7 F0 03 F6 | 	mov	ptra, fp
104fc     B2 00 A0 FD | 	call	#popregs_
10500                 | _do_fill_ret
10500     2D 00 64 FD | 	ret
10504                 | 
10504                 | ' 
10504                 | ' ' -------------------------- Draw a frane
10504                 | ' 
10504                 | ' sub do_frame
10504                 | _do_frame
10504     03 4A 05 F6 | 	mov	COUNT_, #3
10508     A8 00 A0 FD | 	call	#pushregs_
1050c     30 F0 07 F1 | 	add	ptra, #48
10510     FC 85 BF FD | 	call	#_pop
10514     FD 1A 02 F6 | 	mov	arg05, result1
10518     FE 18 02 F6 | 	mov	arg04, result2
1051c     FF 16 02 F6 | 	mov	arg03, result3
10520     24 4E 05 F1 | 	add	fp, #36
10524     A7 1A 62 FC | 	wrlong	arg05, fp
10528     04 4E 05 F1 | 	add	fp, #4
1052c     A7 18 62 FC | 	wrlong	arg04, fp
10530     04 4E 05 F1 | 	add	fp, #4
10534     A7 16 62 FC | 	wrlong	arg03, fp
10538     2C 4E 85 F1 | 	sub	fp, #44
1053c     D0 85 BF FD | 	call	#_pop
10540     FD 1A 02 F6 | 	mov	arg05, result1
10544     FE 18 02 F6 | 	mov	arg04, result2
10548     FF 16 02 F6 | 	mov	arg03, result3
1054c     18 4E 05 F1 | 	add	fp, #24
10550     A7 1A 62 FC | 	wrlong	arg05, fp
10554     04 4E 05 F1 | 	add	fp, #4
10558     A7 18 62 FC | 	wrlong	arg04, fp
1055c     04 4E 05 F1 | 	add	fp, #4
10560     A7 16 62 FC | 	wrlong	arg03, fp
10564     20 4E 85 F1 | 	sub	fp, #32
10568     A4 85 BF FD | 	call	#_pop
1056c     FD 1A 02 F6 | 	mov	arg05, result1
10570     FE 18 02 F6 | 	mov	arg04, result2
10574     FF 1E 02 F6 | 	mov	local01, result3
10578     0C 4E 05 F1 | 	add	fp, #12
1057c     A7 1A 62 FC | 	wrlong	arg05, fp
10580     04 4E 05 F1 | 	add	fp, #4
10584     A7 18 62 FC | 	wrlong	arg04, fp
10588     04 4E 05 F1 | 	add	fp, #4
1058c     A7 1E 62 FC | 	wrlong	local01, fp
10590     14 4E 85 F1 | 	sub	fp, #20
10594     78 85 BF FD | 	call	#_pop
10598     A7 FA 61 FC | 	wrlong	result1, fp
1059c     04 4E 05 F1 | 	add	fp, #4
105a0     A7 FC 61 FC | 	wrlong	result2, fp
105a4     04 4E 05 F1 | 	add	fp, #4
105a8     A7 FE 61 FC | 	wrlong	result3, fp
105ac                 | ' 
105ac                 | ' t4=pop()
105ac                 | ' t3=pop()
105ac                 | ' t2=pop()
105ac                 | ' t1=pop()
105ac                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
105ac     FF 1A 02 F6 | 	mov	arg05, result3
105b0     08 4E 85 F1 | 	sub	fp, #8
105b4     1C 1A 0E F2 | 	cmp	arg05, #28 wz
105b8     08 4E 05 51 |  if_ne	add	fp, #8
105bc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
105c0     08 4E 85 51 |  if_ne	sub	fp, #8
105c4     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
105c8     A8 00 90 5D |  if_ne	jmp	#LR__1330
105cc     14 4E 05 F1 | 	add	fp, #20
105d0     A7 1E 02 FB | 	rdlong	local01, fp
105d4     14 4E 85 F1 | 	sub	fp, #20
105d8     1C 1E 0E F2 | 	cmp	local01, #28 wz
105dc     14 4E 05 51 |  if_ne	add	fp, #20
105e0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
105e4     14 4E 85 51 |  if_ne	sub	fp, #20
105e8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
105ec     84 00 90 5D |  if_ne	jmp	#LR__1330
105f0     20 4E 05 F1 | 	add	fp, #32
105f4     A7 1E 02 FB | 	rdlong	local01, fp
105f8     20 4E 85 F1 | 	sub	fp, #32
105fc     1C 1E 0E F2 | 	cmp	local01, #28 wz
10600     20 4E 05 51 |  if_ne	add	fp, #32
10604     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
10608     20 4E 85 51 |  if_ne	sub	fp, #32
1060c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
10610     60 00 90 5D |  if_ne	jmp	#LR__1330
10614     2C 4E 05 F1 | 	add	fp, #44
10618     A7 1E 02 FB | 	rdlong	local01, fp
1061c     2C 4E 85 F1 | 	sub	fp, #44
10620     1C 1E 0E F2 | 	cmp	local01, #28 wz
10624     2C 4E 05 51 |  if_ne	add	fp, #44
10628     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
1062c     2C 4E 85 51 |  if_ne	sub	fp, #44
10630     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
10634     3C 00 90 5D |  if_ne	jmp	#LR__1330
10638     A7 12 02 FB | 	rdlong	arg01, fp
1063c     0C 4E 05 F1 | 	add	fp, #12
10640     A7 14 02 FB | 	rdlong	arg02, fp
10644     0C 4E 05 F1 | 	add	fp, #12
10648     A7 16 02 FB | 	rdlong	arg03, fp
1064c     0C 4E 05 F1 | 	add	fp, #12
10650     A7 18 02 FB | 	rdlong	arg04, fp
10654     24 4E 85 F1 | 	sub	fp, #36
10658     2D 00 00 FF 
1065c     EC E5 05 F1 | 	add	objptr, ##23532
10660     F2 1A 02 FB | 	rdlong	arg05, objptr
10664     2D 00 00 FF 
10668     EC E5 85 F1 | 	sub	objptr, ##23532
1066c     C8 46 B0 FD | 	call	#_hg010b_spin2_frame
10670                 | '    v.frame(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
10670     6C 00 90 FD | 	jmp	#LR__1331
10674                 | LR__1330
10674     A7 12 02 F6 | 	mov	arg01, fp
10678     CC E4 BF FD | 	call	#_converttoint
1067c     FD 20 02 F6 | 	mov	local02, result1
10680     0C 4E 05 F1 | 	add	fp, #12
10684     A7 12 02 F6 | 	mov	arg01, fp
10688     0C 4E 85 F1 | 	sub	fp, #12
1068c     B8 E4 BF FD | 	call	#_converttoint
10690     FD 22 02 F6 | 	mov	local03, result1
10694     18 4E 05 F1 | 	add	fp, #24
10698     A7 12 02 F6 | 	mov	arg01, fp
1069c     18 4E 85 F1 | 	sub	fp, #24
106a0     A4 E4 BF FD | 	call	#_converttoint
106a4     FD 1E 02 F6 | 	mov	local01, result1
106a8     24 4E 05 F1 | 	add	fp, #36
106ac     A7 12 02 F6 | 	mov	arg01, fp
106b0     24 4E 85 F1 | 	sub	fp, #36
106b4     90 E4 BF FD | 	call	#_converttoint
106b8     FD 18 02 F6 | 	mov	arg04, result1
106bc     2D 00 00 FF 
106c0     EC E5 05 F1 | 	add	objptr, ##23532
106c4     F2 1A 02 FB | 	rdlong	arg05, objptr
106c8     2D 00 00 FF 
106cc     EC E5 85 F1 | 	sub	objptr, ##23532
106d0     10 13 02 F6 | 	mov	arg01, local02
106d4     11 15 02 F6 | 	mov	arg02, local03
106d8     0F 17 02 F6 | 	mov	arg03, local01
106dc     58 46 B0 FD | 	call	#_hg010b_spin2_frame
106e0                 | LR__1331
106e0     A7 F0 03 F6 | 	mov	ptra, fp
106e4     B2 00 A0 FD | 	call	#popregs_
106e8                 | _do_frame_ret
106e8     2D 00 64 FD | 	ret
106ec                 | 
106ec                 | ' 
106ec                 | ' '' ----------------------------- Text related runtime procedures --------------------------------------
106ec                 | ' 
106ec                 | ' ' ------------------------- Print to the screem
106ec                 | ' 
106ec                 | ' sub do_print  
106ec                 | _do_print
106ec     0A 4A 05 F6 | 	mov	COUNT_, #10
106f0     A8 00 A0 FD | 	call	#pushregs_
106f4     00 24 06 F6 | 	mov	local04, #0
106f8     14 84 BF FD | 	call	#_pop
106fc     FD 26 02 F6 | 	mov	local05, result1
10700     FE 28 02 F6 | 	mov	local06, result2
10704     FF 2A 02 F6 | 	mov	local07, result3
10708     13 1F 02 F6 | 	mov	local01, local05
1070c     14 21 02 F6 | 	mov	local02, local06
10710     15 23 02 F6 | 	mov	local03, local07
10714                 | '  
10714                 | ' r=0
10714                 | ' t1=pop() 
10714                 | ' 'print t1.result_type,t1.result.uresult
10714                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
10714     2B 22 0E F2 | 	cmp	local03, #43 wz
10718     14 00 90 5D |  if_ne	jmp	#LR__1340
1071c     0F 13 02 F6 | 	mov	arg01, local01
10720     D8 A0 BF FD | 	call	#_convertstring
10724     FD 26 02 F6 | 	mov	local05, result1
10728     13 1F 02 F6 | 	mov	local01, local05
1072c     1F 22 06 F6 | 	mov	local03, #31
10730                 | LR__1340
10730                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
10730     21 22 0E F2 | 	cmp	local03, #33 wz
10734     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
10738     20 00 90 5D |  if_ne	jmp	#LR__1341
1073c     11 25 02 F6 | 	mov	local04, local03
10740     CC 83 BF FD | 	call	#_pop
10744     FD 26 02 F6 | 	mov	local05, result1
10748     FE 28 02 F6 | 	mov	local06, result2
1074c     FF 2A 02 F6 | 	mov	local07, result3
10750     13 1F 02 F6 | 	mov	local01, local05
10754     14 21 02 F6 | 	mov	local02, local06
10758     15 23 02 F6 | 	mov	local03, local07
1075c                 | LR__1341
1075c                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
1075c     20 22 0E F2 | 	cmp	local03, #32 wz
10760     11 25 02 A6 |  if_e	mov	local04, local03
10764                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
10764     FF 22 0E F2 | 	cmp	local03, #255 wz
10768     0C 00 90 5D |  if_ne	jmp	#LR__1342
1076c     0F 13 02 F6 | 	mov	arg01, local01
10770     64 26 B0 FD | 	call	#_printerror
10774     30 04 90 FD | 	jmp	#LR__1359
10778                 | LR__1342
10778                 | ' 
10778                 | ' if r=print_mod_comma  then
10778     21 24 0E F2 | 	cmp	local04, #33 wz
1077c     AC 01 90 5D |  if_ne	jmp	#LR__1347
10780                 | '   if t1.result_type=result_int then print t1.result.iresult,
10780     1C 22 0E F2 | 	cmp	local03, #28 wz
10784     64 00 90 5D |  if_ne	jmp	#LR__1343
10788     00 12 06 F6 | 	mov	arg01, #0
1078c     18 B0 B0 FD | 	call	#__system___getiolock_0372
10790     FD 12 02 F6 | 	mov	arg01, result1
10794     60 5B B0 FD | 	call	#__system___lockmem
10798     00 28 06 F6 | 	mov	local06, #0
1079c     00 12 06 F6 | 	mov	arg01, #0
107a0     0F 15 02 F6 | 	mov	arg02, local01
107a4     00 16 06 F6 | 	mov	arg03, #0
107a8     0A 18 06 F6 | 	mov	arg04, #10
107ac     80 68 B0 FD | 	call	#__system___basic_print_integer
107b0     FD 2A 02 F6 | 	mov	local07, result1
107b4     14 27 02 F6 | 	mov	local05, local06
107b8     15 27 02 F1 | 	add	local05, local07
107bc     00 2C 06 F6 | 	mov	local08, #0
107c0     00 12 06 F6 | 	mov	arg01, #0
107c4     09 14 06 F6 | 	mov	arg02, #9
107c8     00 16 06 F6 | 	mov	arg03, #0
107cc     C4 67 B0 FD | 	call	#__system___basic_print_char
107d0     FD 2E 02 F6 | 	mov	local09, result1
107d4     FD 26 02 F1 | 	add	local05, result1
107d8     00 12 06 F6 | 	mov	arg01, #0
107dc     C8 AF B0 FD | 	call	#__system___getiolock_0372
107e0     FD 00 68 FC | 	wrlong	#0, result1
107e4     00 FA 05 F6 | 	mov	result1, #0
107e8     00 30 06 F6 | 	mov	local10, #0
107ec                 | LR__1343
107ec                 | '   if t1.result_type=result_uint then print t1.result.uresult,
107ec     1D 22 0E F2 | 	cmp	local03, #29 wz
107f0     64 00 90 5D |  if_ne	jmp	#LR__1344
107f4     00 12 06 F6 | 	mov	arg01, #0
107f8     AC AF B0 FD | 	call	#__system___getiolock_0372
107fc     FD 12 02 F6 | 	mov	arg01, result1
10800     F4 5A B0 FD | 	call	#__system___lockmem
10804     00 28 06 F6 | 	mov	local06, #0
10808     00 12 06 F6 | 	mov	arg01, #0
1080c     0F 15 02 F6 | 	mov	arg02, local01
10810     00 16 06 F6 | 	mov	arg03, #0
10814     0A 18 06 F6 | 	mov	arg04, #10
10818     54 68 B0 FD | 	call	#__system___basic_print_unsigned
1081c     FD 2A 02 F6 | 	mov	local07, result1
10820     14 27 02 F6 | 	mov	local05, local06
10824     15 27 02 F1 | 	add	local05, local07
10828     00 2C 06 F6 | 	mov	local08, #0
1082c     00 12 06 F6 | 	mov	arg01, #0
10830     09 14 06 F6 | 	mov	arg02, #9
10834     00 16 06 F6 | 	mov	arg03, #0
10838     58 67 B0 FD | 	call	#__system___basic_print_char
1083c     FD 2E 02 F6 | 	mov	local09, result1
10840     FD 26 02 F1 | 	add	local05, result1
10844     00 12 06 F6 | 	mov	arg01, #0
10848     5C AF B0 FD | 	call	#__system___getiolock_0372
1084c     FD 00 68 FC | 	wrlong	#0, result1
10850     00 FA 05 F6 | 	mov	result1, #0
10854     00 30 06 F6 | 	mov	local10, #0
10858                 | LR__1344
10858                 | '   if t1.result_type=result_float then print t1.result.fresult,
10858     1E 22 0E F2 | 	cmp	local03, #30 wz
1085c     64 00 90 5D |  if_ne	jmp	#LR__1345
10860     00 12 06 F6 | 	mov	arg01, #0
10864     40 AF B0 FD | 	call	#__system___getiolock_0372
10868     FD 12 02 F6 | 	mov	arg01, result1
1086c     88 5A B0 FD | 	call	#__system___lockmem
10870     00 28 06 F6 | 	mov	local06, #0
10874     00 12 06 F6 | 	mov	arg01, #0
10878     0F 15 02 F6 | 	mov	arg02, local01
1087c     00 16 06 F6 | 	mov	arg03, #0
10880     23 18 06 F6 | 	mov	arg04, #35
10884     98 89 B0 FD | 	call	#__system___basic_print_float
10888     FD 2A 02 F6 | 	mov	local07, result1
1088c     14 27 02 F6 | 	mov	local05, local06
10890     15 27 02 F1 | 	add	local05, local07
10894     00 2C 06 F6 | 	mov	local08, #0
10898     00 12 06 F6 | 	mov	arg01, #0
1089c     09 14 06 F6 | 	mov	arg02, #9
108a0     00 16 06 F6 | 	mov	arg03, #0
108a4     EC 66 B0 FD | 	call	#__system___basic_print_char
108a8     FD 2E 02 F6 | 	mov	local09, result1
108ac     FD 26 02 F1 | 	add	local05, result1
108b0     00 12 06 F6 | 	mov	arg01, #0
108b4     F0 AE B0 FD | 	call	#__system___getiolock_0372
108b8     FD 00 68 FC | 	wrlong	#0, result1
108bc     00 FA 05 F6 | 	mov	result1, #0
108c0     00 30 06 F6 | 	mov	local10, #0
108c4                 | LR__1345
108c4                 | '   if t1.result_type=result_string then print t1.result.sresult,
108c4     1F 22 0E F2 | 	cmp	local03, #31 wz
108c8     60 00 90 5D |  if_ne	jmp	#LR__1346
108cc     00 12 06 F6 | 	mov	arg01, #0
108d0     D4 AE B0 FD | 	call	#__system___getiolock_0372
108d4     FD 12 02 F6 | 	mov	arg01, result1
108d8     1C 5A B0 FD | 	call	#__system___lockmem
108dc     00 28 06 F6 | 	mov	local06, #0
108e0     00 12 06 F6 | 	mov	arg01, #0
108e4     0F 15 02 F6 | 	mov	arg02, local01
108e8     00 16 06 F6 | 	mov	arg03, #0
108ec     FC 66 B0 FD | 	call	#__system___basic_print_string
108f0     FD 2A 02 F6 | 	mov	local07, result1
108f4     14 27 02 F6 | 	mov	local05, local06
108f8     15 27 02 F1 | 	add	local05, local07
108fc     00 2C 06 F6 | 	mov	local08, #0
10900     00 12 06 F6 | 	mov	arg01, #0
10904     09 14 06 F6 | 	mov	arg02, #9
10908     00 16 06 F6 | 	mov	arg03, #0
1090c     84 66 B0 FD | 	call	#__system___basic_print_char
10910     FD 2E 02 F6 | 	mov	local09, result1
10914     FD 26 02 F1 | 	add	local05, result1
10918     00 12 06 F6 | 	mov	arg01, #0
1091c     88 AE B0 FD | 	call	#__system___getiolock_0372
10920     FD 00 68 FC | 	wrlong	#0, result1
10924     00 FA 05 F6 | 	mov	result1, #0
10928     00 30 06 F6 | 	mov	local10, #0
1092c                 | LR__1346
1092c                 | LR__1347
1092c                 | ' if r=print_mod_semicolon then 
1092c     22 24 0E F2 | 	cmp	local04, #34 wz
10930     1C 01 90 5D |  if_ne	jmp	#LR__1352
10934                 | '   if t1.result_type=result_int then print t1.result.iresult;
10934     1C 22 0E F2 | 	cmp	local03, #28 wz
10938     50 00 90 5D |  if_ne	jmp	#LR__1348
1093c     00 12 06 F6 | 	mov	arg01, #0
10940     64 AE B0 FD | 	call	#__system___getiolock_0372
10944     FD 12 02 F6 | 	mov	arg01, result1
10948     AC 59 B0 FD | 	call	#__system___lockmem
1094c     00 28 06 F6 | 	mov	local06, #0
10950     00 30 06 F6 | 	mov	local10, #0
10954     0A 2C 06 F6 | 	mov	local08, #10
10958     00 12 06 F6 | 	mov	arg01, #0
1095c     0F 15 02 F6 | 	mov	arg02, local01
10960     00 16 06 F6 | 	mov	arg03, #0
10964     0A 18 06 F6 | 	mov	arg04, #10
10968     C4 66 B0 FD | 	call	#__system___basic_print_integer
1096c     FD 2A 02 F6 | 	mov	local07, result1
10970     14 27 02 F6 | 	mov	local05, local06
10974     15 27 02 F1 | 	add	local05, local07
10978     00 12 06 F6 | 	mov	arg01, #0
1097c     28 AE B0 FD | 	call	#__system___getiolock_0372
10980     FD 00 68 FC | 	wrlong	#0, result1
10984     00 FA 05 F6 | 	mov	result1, #0
10988     00 2E 06 F6 | 	mov	local09, #0
1098c                 | LR__1348
1098c                 | '   if t1.result_type=result_uint then print t1.result.uresult;
1098c     1D 22 0E F2 | 	cmp	local03, #29 wz
10990     50 00 90 5D |  if_ne	jmp	#LR__1349
10994     00 12 06 F6 | 	mov	arg01, #0
10998     0C AE B0 FD | 	call	#__system___getiolock_0372
1099c     FD 12 02 F6 | 	mov	arg01, result1
109a0     54 59 B0 FD | 	call	#__system___lockmem
109a4     00 28 06 F6 | 	mov	local06, #0
109a8     00 30 06 F6 | 	mov	local10, #0
109ac     0A 2C 06 F6 | 	mov	local08, #10
109b0     00 12 06 F6 | 	mov	arg01, #0
109b4     0F 15 02 F6 | 	mov	arg02, local01
109b8     00 16 06 F6 | 	mov	arg03, #0
109bc     0A 18 06 F6 | 	mov	arg04, #10
109c0     AC 66 B0 FD | 	call	#__system___basic_print_unsigned
109c4     FD 2A 02 F6 | 	mov	local07, result1
109c8     14 27 02 F6 | 	mov	local05, local06
109cc     15 27 02 F1 | 	add	local05, local07
109d0     00 12 06 F6 | 	mov	arg01, #0
109d4     D0 AD B0 FD | 	call	#__system___getiolock_0372
109d8     FD 00 68 FC | 	wrlong	#0, result1
109dc     00 FA 05 F6 | 	mov	result1, #0
109e0     00 2E 06 F6 | 	mov	local09, #0
109e4                 | LR__1349
109e4                 | '   if t1.result_type=result_float then print t1.result.fresult;
109e4     1E 22 0E F2 | 	cmp	local03, #30 wz
109e8     30 00 90 5D |  if_ne	jmp	#LR__1350
109ec     00 12 06 F6 | 	mov	arg01, #0
109f0     B4 AD B0 FD | 	call	#__system___getiolock_0372
109f4     FD 12 02 F6 | 	mov	arg01, result1
109f8     FC 58 B0 FD | 	call	#__system___lockmem
109fc     00 12 06 F6 | 	mov	arg01, #0
10a00     0F 15 02 F6 | 	mov	arg02, local01
10a04     00 16 06 F6 | 	mov	arg03, #0
10a08     23 18 06 F6 | 	mov	arg04, #35
10a0c     10 88 B0 FD | 	call	#__system___basic_print_float
10a10     00 12 06 F6 | 	mov	arg01, #0
10a14     90 AD B0 FD | 	call	#__system___getiolock_0372
10a18     FD 00 68 FC | 	wrlong	#0, result1
10a1c                 | LR__1350
10a1c                 | '   if t1.result_type=result_string then print t1.result.sresult;
10a1c     1F 22 0E F2 | 	cmp	local03, #31 wz
10a20     2C 00 90 5D |  if_ne	jmp	#LR__1351
10a24     00 12 06 F6 | 	mov	arg01, #0
10a28     7C AD B0 FD | 	call	#__system___getiolock_0372
10a2c     FD 12 02 F6 | 	mov	arg01, result1
10a30     C4 58 B0 FD | 	call	#__system___lockmem
10a34     00 12 06 F6 | 	mov	arg01, #0
10a38     0F 15 02 F6 | 	mov	arg02, local01
10a3c     00 16 06 F6 | 	mov	arg03, #0
10a40     A8 65 B0 FD | 	call	#__system___basic_print_string
10a44     00 12 06 F6 | 	mov	arg01, #0
10a48     5C AD B0 FD | 	call	#__system___getiolock_0372
10a4c     FD 00 68 FC | 	wrlong	#0, result1
10a50                 | LR__1351
10a50                 | LR__1352
10a50                 | ' if r=0 then 
10a50     00 24 0E F2 | 	cmp	local04, #0 wz
10a54     1C 01 90 5D |  if_ne	jmp	#LR__1357
10a58                 | '   if t1.result_type=result_int then print t1.result.iresult
10a58     1C 22 0E F2 | 	cmp	local03, #28 wz
10a5c     40 00 90 5D |  if_ne	jmp	#LR__1353
10a60     00 12 06 F6 | 	mov	arg01, #0
10a64     40 AD B0 FD | 	call	#__system___getiolock_0372
10a68     FD 12 02 F6 | 	mov	arg01, result1
10a6c     88 58 B0 FD | 	call	#__system___lockmem
10a70     00 12 06 F6 | 	mov	arg01, #0
10a74     0F 15 02 F6 | 	mov	arg02, local01
10a78     00 16 06 F6 | 	mov	arg03, #0
10a7c     0A 18 06 F6 | 	mov	arg04, #10
10a80     AC 65 B0 FD | 	call	#__system___basic_print_integer
10a84     00 12 06 F6 | 	mov	arg01, #0
10a88     0A 14 06 F6 | 	mov	arg02, #10
10a8c     00 16 06 F6 | 	mov	arg03, #0
10a90     00 65 B0 FD | 	call	#__system___basic_print_char
10a94     00 12 06 F6 | 	mov	arg01, #0
10a98     0C AD B0 FD | 	call	#__system___getiolock_0372
10a9c     FD 00 68 FC | 	wrlong	#0, result1
10aa0                 | LR__1353
10aa0                 | '   if t1.result_type=result_uint then print t1.result.uresult
10aa0     1D 22 0E F2 | 	cmp	local03, #29 wz
10aa4     40 00 90 5D |  if_ne	jmp	#LR__1354
10aa8     00 12 06 F6 | 	mov	arg01, #0
10aac     F8 AC B0 FD | 	call	#__system___getiolock_0372
10ab0     FD 12 02 F6 | 	mov	arg01, result1
10ab4     40 58 B0 FD | 	call	#__system___lockmem
10ab8     00 12 06 F6 | 	mov	arg01, #0
10abc     0F 15 02 F6 | 	mov	arg02, local01
10ac0     00 16 06 F6 | 	mov	arg03, #0
10ac4     0A 18 06 F6 | 	mov	arg04, #10
10ac8     A4 65 B0 FD | 	call	#__system___basic_print_unsigned
10acc     00 12 06 F6 | 	mov	arg01, #0
10ad0     0A 14 06 F6 | 	mov	arg02, #10
10ad4     00 16 06 F6 | 	mov	arg03, #0
10ad8     B8 64 B0 FD | 	call	#__system___basic_print_char
10adc     00 12 06 F6 | 	mov	arg01, #0
10ae0     C4 AC B0 FD | 	call	#__system___getiolock_0372
10ae4     FD 00 68 FC | 	wrlong	#0, result1
10ae8                 | LR__1354
10ae8                 | '   if t1.result_type=result_float then print t1.result.fresult
10ae8     1E 22 0E F2 | 	cmp	local03, #30 wz
10aec     40 00 90 5D |  if_ne	jmp	#LR__1355
10af0     00 12 06 F6 | 	mov	arg01, #0
10af4     B0 AC B0 FD | 	call	#__system___getiolock_0372
10af8     FD 12 02 F6 | 	mov	arg01, result1
10afc     F8 57 B0 FD | 	call	#__system___lockmem
10b00     00 12 06 F6 | 	mov	arg01, #0
10b04     0F 15 02 F6 | 	mov	arg02, local01
10b08     00 16 06 F6 | 	mov	arg03, #0
10b0c     23 18 06 F6 | 	mov	arg04, #35
10b10     0C 87 B0 FD | 	call	#__system___basic_print_float
10b14     00 12 06 F6 | 	mov	arg01, #0
10b18     0A 14 06 F6 | 	mov	arg02, #10
10b1c     00 16 06 F6 | 	mov	arg03, #0
10b20     70 64 B0 FD | 	call	#__system___basic_print_char
10b24     00 12 06 F6 | 	mov	arg01, #0
10b28     7C AC B0 FD | 	call	#__system___getiolock_0372
10b2c     FD 00 68 FC | 	wrlong	#0, result1
10b30                 | LR__1355
10b30                 | '   if t1.result_type=result_string then print t1.result.sresult
10b30     1F 22 0E F2 | 	cmp	local03, #31 wz
10b34     3C 00 90 5D |  if_ne	jmp	#LR__1356
10b38     00 12 06 F6 | 	mov	arg01, #0
10b3c     68 AC B0 FD | 	call	#__system___getiolock_0372
10b40     FD 12 02 F6 | 	mov	arg01, result1
10b44     B0 57 B0 FD | 	call	#__system___lockmem
10b48     00 12 06 F6 | 	mov	arg01, #0
10b4c     0F 15 02 F6 | 	mov	arg02, local01
10b50     00 16 06 F6 | 	mov	arg03, #0
10b54     94 64 B0 FD | 	call	#__system___basic_print_string
10b58     00 12 06 F6 | 	mov	arg01, #0
10b5c     0A 14 06 F6 | 	mov	arg02, #10
10b60     00 16 06 F6 | 	mov	arg03, #0
10b64     2C 64 B0 FD | 	call	#__system___basic_print_char
10b68     00 12 06 F6 | 	mov	arg01, #0
10b6c     38 AC B0 FD | 	call	#__system___getiolock_0372
10b70     FD 00 68 FC | 	wrlong	#0, result1
10b74                 | LR__1356
10b74                 | LR__1357
10b74                 | ' if r=print_mod_empty then print
10b74     20 24 0E F2 | 	cmp	local04, #32 wz
10b78     2C 00 90 5D |  if_ne	jmp	#LR__1358
10b7c     00 12 06 F6 | 	mov	arg01, #0
10b80     24 AC B0 FD | 	call	#__system___getiolock_0372
10b84     FD 12 02 F6 | 	mov	arg01, result1
10b88     6C 57 B0 FD | 	call	#__system___lockmem
10b8c     00 12 06 F6 | 	mov	arg01, #0
10b90     0A 14 06 F6 | 	mov	arg02, #10
10b94     00 16 06 F6 | 	mov	arg03, #0
10b98     F8 63 B0 FD | 	call	#__system___basic_print_char
10b9c     00 12 06 F6 | 	mov	arg01, #0
10ba0     04 AC B0 FD | 	call	#__system___getiolock_0372
10ba4     FD 00 68 FC | 	wrlong	#0, result1
10ba8                 | LR__1358
10ba8                 | LR__1359
10ba8     A7 F0 03 F6 | 	mov	ptra, fp
10bac     B2 00 A0 FD | 	call	#popregs_
10bb0                 | _do_print_ret
10bb0     2D 00 64 FD | 	ret
10bb4                 | 
10bb4                 | ' 
10bb4                 | ' 
10bb4                 | ' sub do_paper
10bb4                 | _do_paper
10bb4     03 4A 05 F6 | 	mov	COUNT_, #3
10bb8     A8 00 A0 FD | 	call	#pushregs_
10bbc     50 7F BF FD | 	call	#_pop
10bc0     FD 1E 02 F6 | 	mov	local01, result1
10bc4     FE 20 02 F6 | 	mov	local02, result2
10bc8     FF 22 02 F6 | 	mov	local03, result3
10bcc                 | ' t1=pop() 
10bcc                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
10bcc     1E 22 0E F2 | 	cmp	local03, #30 wz
10bd0     10 00 90 5D |  if_ne	jmp	#LR__1360
10bd4     0F 13 02 F6 | 	mov	arg01, local01
10bd8     00 14 06 F6 | 	mov	arg02, #0
10bdc     F0 84 B0 FD | 	call	#__system___float_tointeger
10be0     FD 1E 02 F6 | 	mov	local01, result1
10be4                 | LR__1360
10be4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10be4     1F 22 0E F2 | 	cmp	local03, #31 wz
10be8     18 00 90 5D |  if_ne	jmp	#LR__1361
10bec     0F 13 02 F6 | 	mov	arg01, local01
10bf0     FC 87 B0 FD | 	call	#__system____builtin_atof
10bf4     FD 12 02 F6 | 	mov	arg01, result1
10bf8     00 14 06 F6 | 	mov	arg02, #0
10bfc     D0 84 B0 FD | 	call	#__system___float_tointeger
10c00     FD 1E 02 F6 | 	mov	local01, result1
10c04                 | LR__1361
10c04     2D 00 00 FF 
10c08     FC E5 05 F1 | 	add	objptr, ##23548
10c0c     F2 1E 62 FC | 	wrlong	local01, objptr
10c10     04 E4 05 F1 | 	add	objptr, #4
10c14     F2 12 02 FB | 	rdlong	arg01, objptr
10c18                 | ' 
10c18                 | ' write_color:=ff
10c18     2D 00 00 FF 
10c1c     C3 E5 85 F1 | 	sub	objptr, ##23491
10c20     F2 12 62 FC | 	wrlong	arg01, objptr
10c24                 | ' write_background:=bb
10c24     04 E4 05 F1 | 	add	objptr, #4
10c28     F2 1E 62 FC | 	wrlong	local01, objptr
10c2c     41 E4 85 F1 | 	sub	objptr, #65
10c30     A7 F0 03 F6 | 	mov	ptra, fp
10c34     B2 00 A0 FD | 	call	#popregs_
10c38                 | _do_paper_ret
10c38     2D 00 64 FD | 	ret
10c3c                 | 
10c3c                 | ' 
10c3c                 | ' sub do_ink
10c3c                 | _do_ink
10c3c     03 4A 05 F6 | 	mov	COUNT_, #3
10c40     A8 00 A0 FD | 	call	#pushregs_
10c44     C8 7E BF FD | 	call	#_pop
10c48     FD 1E 02 F6 | 	mov	local01, result1
10c4c     FE 20 02 F6 | 	mov	local02, result2
10c50     FF 22 02 F6 | 	mov	local03, result3
10c54                 | ' t1=pop() 
10c54                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
10c54     1E 22 0E F2 | 	cmp	local03, #30 wz
10c58     10 00 90 5D |  if_ne	jmp	#LR__1370
10c5c     0F 13 02 F6 | 	mov	arg01, local01
10c60     00 14 06 F6 | 	mov	arg02, #0
10c64     68 84 B0 FD | 	call	#__system___float_tointeger
10c68     FD 1E 02 F6 | 	mov	local01, result1
10c6c                 | LR__1370
10c6c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10c6c     1F 22 0E F2 | 	cmp	local03, #31 wz
10c70     18 00 90 5D |  if_ne	jmp	#LR__1371
10c74     0F 13 02 F6 | 	mov	arg01, local01
10c78     74 87 B0 FD | 	call	#__system____builtin_atof
10c7c     FD 12 02 F6 | 	mov	arg01, result1
10c80     00 14 06 F6 | 	mov	arg02, #0
10c84     48 84 B0 FD | 	call	#__system___float_tointeger
10c88     FD 1E 02 F6 | 	mov	local01, result1
10c8c                 | LR__1371
10c8c     2E 00 00 FF 
10c90     00 E4 05 F1 | 	add	objptr, ##23552
10c94     F2 1E 62 FC | 	wrlong	local01, objptr
10c98     04 E4 85 F1 | 	sub	objptr, #4
10c9c     F2 14 02 FB | 	rdlong	arg02, objptr
10ca0                 | ' 
10ca0                 | ' write_color:=ff
10ca0     2D 00 00 FF 
10ca4     BF E5 85 F1 | 	sub	objptr, ##23487
10ca8     F2 1E 62 FC | 	wrlong	local01, objptr
10cac                 | ' write_background:=bb
10cac     04 E4 05 F1 | 	add	objptr, #4
10cb0     F2 14 62 FC | 	wrlong	arg02, objptr
10cb4     2D 00 00 FF 
10cb8     BF E5 05 F1 | 	add	objptr, ##23487
10cbc     F2 12 02 FB | 	rdlong	arg01, objptr
10cc0     2E 00 00 FF 
10cc4     00 E4 85 F1 | 	sub	objptr, ##23552
10cc8     04 33 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
10ccc     A7 F0 03 F6 | 	mov	ptra, fp
10cd0     B2 00 A0 FD | 	call	#popregs_
10cd4                 | _do_ink_ret
10cd4     2D 00 64 FD | 	ret
10cd8                 | 
10cd8                 | ' 
10cd8                 | ' 
10cd8                 | ' sub do_font
10cd8                 | _do_font
10cd8     03 4A 05 F6 | 	mov	COUNT_, #3
10cdc     A8 00 A0 FD | 	call	#pushregs_
10ce0     2C 7E BF FD | 	call	#_pop
10ce4     FD 1E 02 F6 | 	mov	local01, result1
10ce8     FE 20 02 F6 | 	mov	local02, result2
10cec     FF 22 02 F6 | 	mov	local03, result3
10cf0                 | ' t1=pop() 
10cf0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
10cf0     1E 22 0E F2 | 	cmp	local03, #30 wz
10cf4     10 00 90 5D |  if_ne	jmp	#LR__1380
10cf8     0F 13 02 F6 | 	mov	arg01, local01
10cfc     00 14 06 F6 | 	mov	arg02, #0
10d00     CC 83 B0 FD | 	call	#__system___float_tointeger
10d04     FD 1E 02 F6 | 	mov	local01, result1
10d08                 | LR__1380
10d08                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10d08     1F 22 0E F2 | 	cmp	local03, #31 wz
10d0c     18 00 90 5D |  if_ne	jmp	#LR__1381
10d10     0F 13 02 F6 | 	mov	arg01, local01
10d14     D8 86 B0 FD | 	call	#__system____builtin_atof
10d18     FD 12 02 F6 | 	mov	arg01, result1
10d1c     00 14 06 F6 | 	mov	arg02, #0
10d20     AC 83 B0 FD | 	call	#__system___float_tointeger
10d24     FD 1E 02 F6 | 	mov	local01, result1
10d28                 | LR__1381
10d28     2E 00 00 FF 
10d2c     04 E4 05 F1 | 	add	objptr, ##23556
10d30     F2 1E 62 FC | 	wrlong	local01, objptr
10d34     2E 00 00 FF 
10d38     04 E4 85 F1 | 	sub	objptr, ##23556
10d3c     02 1E 66 F0 | 	shl	local01, #2
10d40     0F 13 02 F6 | 	mov	arg01, local01
10d44     E8 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
10d48     A7 F0 03 F6 | 	mov	ptra, fp
10d4c     B2 00 A0 FD | 	call	#popregs_
10d50                 | _do_font_ret
10d50     2D 00 64 FD | 	ret
10d54                 | 
10d54                 | ' 
10d54                 | ' sub do_mode
10d54                 | _do_mode
10d54     04 4A 05 F6 | 	mov	COUNT_, #4
10d58     A8 00 A0 FD | 	call	#pushregs_
10d5c     B0 7D BF FD | 	call	#_pop
10d60     FD 1E 02 F6 | 	mov	local01, result1
10d64     FE 20 02 F6 | 	mov	local02, result2
10d68     FF 22 02 F6 | 	mov	local03, result3
10d6c                 | ' t1=pop() 
10d6c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
10d6c     1E 22 0E F2 | 	cmp	local03, #30 wz
10d70     10 00 90 5D |  if_ne	jmp	#LR__1390
10d74     0F 13 02 F6 | 	mov	arg01, local01
10d78     00 14 06 F6 | 	mov	arg02, #0
10d7c     50 83 B0 FD | 	call	#__system___float_tointeger
10d80     FD 1E 02 F6 | 	mov	local01, result1
10d84                 | LR__1390
10d84                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10d84     1F 22 0E F2 | 	cmp	local03, #31 wz
10d88     18 00 90 5D |  if_ne	jmp	#LR__1391
10d8c     0F 13 02 F6 | 	mov	arg01, local01
10d90     5C 86 B0 FD | 	call	#__system____builtin_atof
10d94     FD 12 02 F6 | 	mov	arg01, result1
10d98     00 14 06 F6 | 	mov	arg02, #0
10d9c     30 83 B0 FD | 	call	#__system___float_tointeger
10da0     FD 1E 02 F6 | 	mov	local01, result1
10da4                 | LR__1391
10da4                 | ' select case t1.result.iresult
10da4     0F 25 02 F6 | 	mov	local04, local01
10da8     05 24 26 F3 | 	fle	local04, #5
10dac     30 24 62 FD | 	jmprel	local04
10db0                 | LR__1392
10db0     14 00 90 FD | 	jmp	#LR__1393
10db4     A8 00 90 FD | 	jmp	#LR__1394
10db8     10 01 90 FD | 	jmp	#LR__1395
10dbc     78 01 90 FD | 	jmp	#LR__1396
10dc0     E0 01 90 FD | 	jmp	#LR__1397
10dc4     70 02 90 FD | 	jmp	#LR__1398
10dc8                 | LR__1393
10dc8     2E 00 00 FF 
10dcc     04 E4 05 F1 | 	add	objptr, ##23556
10dd0     F2 02 68 FC | 	wrlong	#1, objptr
10dd4     04 E4 85 F1 | 	sub	objptr, #4
10dd8     F2 34 69 FC | 	wrlong	#154, objptr
10ddc     22 00 00 FF 
10de0     A4 E5 05 F1 | 	add	objptr, ##17828
10de4     F2 02 68 FC | 	wrlong	#1, objptr
10de8     22 00 00 FF 
10dec     A8 E5 85 F1 | 	sub	objptr, ##17832
10df0     F2 26 69 FC | 	wrlong	#147, objptr
10df4     2D 00 00 FF 
10df8     FC E5 85 F1 | 	sub	objptr, ##23548
10dfc     04 12 06 F6 | 	mov	arg01, #4
10e00     2C 41 B0 FD | 	call	#_hg010b_spin2_setfontfamily
10e04     2E 00 00 FF 
10e08     00 E4 05 F1 | 	add	objptr, ##23552
10e0c     F2 12 02 FB | 	rdlong	arg01, objptr
10e10     04 E4 85 F1 | 	sub	objptr, #4
10e14     F2 14 02 FB | 	rdlong	arg02, objptr
10e18                 | ' 
10e18                 | ' write_color:=ff
10e18     2D 00 00 FF 
10e1c     BF E5 85 F1 | 	sub	objptr, ##23487
10e20     F2 12 62 FC | 	wrlong	arg01, objptr
10e24                 | ' write_background:=bb
10e24     04 E4 05 F1 | 	add	objptr, #4
10e28     F2 14 62 FC | 	wrlong	arg02, objptr
10e2c     01 00 00 FF 
10e30     00 EA 05 F1 | 	add	ptr__dat__, ##512
10e34     52 00 00 FF 
10e38     07 E4 05 F1 | 	add	objptr, ##41991
10e3c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
10e40     04 E4 85 F1 | 	sub	objptr, #4
10e44     03 00 80 FF 
10e48     F2 28 69 FC | 	wrlong	##1684, objptr
10e4c     52 00 00 FF 
10e50     44 E4 85 F1 | 	sub	objptr, ##42052
10e54     01 00 00 FF 
10e58     00 EA 85 F1 | 	sub	ptr__dat__, ##512
10e5c     D8 01 90 FD | 	jmp	#LR__1398
10e60                 | LR__1394
10e60     2E 00 00 FF 
10e64     04 E4 05 F1 | 	add	objptr, ##23556
10e68     F2 00 68 FC | 	wrlong	#0, objptr
10e6c     04 E4 85 F1 | 	sub	objptr, #4
10e70     F2 2E 68 FC | 	wrlong	#23, objptr
10e74     22 00 00 FF 
10e78     A4 E5 05 F1 | 	add	objptr, ##17828
10e7c     F2 00 68 FC | 	wrlong	#0, objptr
10e80     22 00 00 FF 
10e84     A8 E5 85 F1 | 	sub	objptr, ##17832
10e88     F2 00 68 FC | 	wrlong	#0, objptr
10e8c     2D 00 00 FF 
10e90     FC E5 85 F1 | 	sub	objptr, ##23548
10e94     00 12 06 F6 | 	mov	arg01, #0
10e98     94 40 B0 FD | 	call	#_hg010b_spin2_setfontfamily
10e9c     2E 00 00 FF 
10ea0     00 E4 05 F1 | 	add	objptr, ##23552
10ea4     F2 12 02 FB | 	rdlong	arg01, objptr
10ea8     04 E4 85 F1 | 	sub	objptr, #4
10eac     F2 14 02 FB | 	rdlong	arg02, objptr
10eb0                 | ' 
10eb0                 | ' write_color:=ff
10eb0     2D 00 00 FF 
10eb4     BF E5 85 F1 | 	sub	objptr, ##23487
10eb8     F2 12 62 FC | 	wrlong	arg01, objptr
10ebc                 | ' write_background:=bb
10ebc     04 E4 05 F1 | 	add	objptr, #4
10ec0     F2 14 62 FC | 	wrlong	arg02, objptr
10ec4     41 E4 85 F1 | 	sub	objptr, #65
10ec8     6C 01 90 FD | 	jmp	#LR__1398
10ecc                 | LR__1395
10ecc     2E 00 00 FF 
10ed0     04 E4 05 F1 | 	add	objptr, ##23556
10ed4     F2 00 68 FC | 	wrlong	#0, objptr
10ed8     04 E4 85 F1 | 	sub	objptr, #4
10edc     F2 6A 69 FC | 	wrlong	#181, objptr
10ee0     22 00 00 FF 
10ee4     A4 E5 05 F1 | 	add	objptr, ##17828
10ee8     F2 00 68 FC | 	wrlong	#0, objptr
10eec     22 00 00 FF 
10ef0     A8 E5 85 F1 | 	sub	objptr, ##17832
10ef4     F2 00 68 FC | 	wrlong	#0, objptr
10ef8     2D 00 00 FF 
10efc     FC E5 85 F1 | 	sub	objptr, ##23548
10f00     00 12 06 F6 | 	mov	arg01, #0
10f04     28 40 B0 FD | 	call	#_hg010b_spin2_setfontfamily
10f08     2E 00 00 FF 
10f0c     00 E4 05 F1 | 	add	objptr, ##23552
10f10     F2 12 02 FB | 	rdlong	arg01, objptr
10f14     04 E4 85 F1 | 	sub	objptr, #4
10f18     F2 14 02 FB | 	rdlong	arg02, objptr
10f1c                 | ' 
10f1c                 | ' write_color:=ff
10f1c     2D 00 00 FF 
10f20     BF E5 85 F1 | 	sub	objptr, ##23487
10f24     F2 12 62 FC | 	wrlong	arg01, objptr
10f28                 | ' write_background:=bb
10f28     04 E4 05 F1 | 	add	objptr, #4
10f2c     F2 14 62 FC | 	wrlong	arg02, objptr
10f30     41 E4 85 F1 | 	sub	objptr, #65
10f34     00 01 90 FD | 	jmp	#LR__1398
10f38                 | LR__1396
10f38     2E 00 00 FF 
10f3c     04 E4 05 F1 | 	add	objptr, ##23556
10f40     F2 00 68 FC | 	wrlong	#0, objptr
10f44     04 E4 85 F1 | 	sub	objptr, #4
10f48     F2 1E 68 FC | 	wrlong	#15, objptr
10f4c     22 00 00 FF 
10f50     A4 E5 05 F1 | 	add	objptr, ##17828
10f54     F2 00 68 FC | 	wrlong	#0, objptr
10f58     22 00 00 FF 
10f5c     A8 E5 85 F1 | 	sub	objptr, ##17832
10f60     F2 00 68 FC | 	wrlong	#0, objptr
10f64     2D 00 00 FF 
10f68     FC E5 85 F1 | 	sub	objptr, ##23548
10f6c     00 12 06 F6 | 	mov	arg01, #0
10f70     BC 3F B0 FD | 	call	#_hg010b_spin2_setfontfamily
10f74     2E 00 00 FF 
10f78     00 E4 05 F1 | 	add	objptr, ##23552
10f7c     F2 12 02 FB | 	rdlong	arg01, objptr
10f80     04 E4 85 F1 | 	sub	objptr, #4
10f84     F2 14 02 FB | 	rdlong	arg02, objptr
10f88                 | ' 
10f88                 | ' write_color:=ff
10f88     2D 00 00 FF 
10f8c     BF E5 85 F1 | 	sub	objptr, ##23487
10f90     F2 12 62 FC | 	wrlong	arg01, objptr
10f94                 | ' write_background:=bb
10f94     04 E4 05 F1 | 	add	objptr, #4
10f98     F2 14 62 FC | 	wrlong	arg02, objptr
10f9c     41 E4 85 F1 | 	sub	objptr, #65
10fa0     94 00 90 FD | 	jmp	#LR__1398
10fa4                 | LR__1397
10fa4     2E 00 00 FF 
10fa8     04 E4 05 F1 | 	add	objptr, ##23556
10fac     F2 02 68 FC | 	wrlong	#1, objptr
10fb0     04 E4 85 F1 | 	sub	objptr, #4
10fb4     F2 02 68 FC | 	wrlong	#1, objptr
10fb8     22 00 00 FF 
10fbc     A4 E5 05 F1 | 	add	objptr, ##17828
10fc0     F2 02 68 FC | 	wrlong	#1, objptr
10fc4     22 00 00 FF 
10fc8     A8 E5 85 F1 | 	sub	objptr, ##17832
10fcc     F2 1C 68 FC | 	wrlong	#14, objptr
10fd0     2D 00 00 FF 
10fd4     FC E5 85 F1 | 	sub	objptr, ##23548
10fd8     04 12 06 F6 | 	mov	arg01, #4
10fdc     50 3F B0 FD | 	call	#_hg010b_spin2_setfontfamily
10fe0     2E 00 00 FF 
10fe4     00 E4 05 F1 | 	add	objptr, ##23552
10fe8     F2 12 02 FB | 	rdlong	arg01, objptr
10fec     04 E4 85 F1 | 	sub	objptr, #4
10ff0     F2 14 02 FB | 	rdlong	arg02, objptr
10ff4                 | ' 
10ff4                 | ' write_color:=ff
10ff4     2D 00 00 FF 
10ff8     BF E5 85 F1 | 	sub	objptr, ##23487
10ffc     F2 12 62 FC | 	wrlong	arg01, objptr
11000                 | ' write_background:=bb
11000     04 E4 05 F1 | 	add	objptr, #4
11004     F2 14 62 FC | 	wrlong	arg02, objptr
11008     07 00 00 FF 
1100c     72 EB 05 F1 | 	add	ptr__dat__, ##3954
11010     52 00 00 FF 
11014     07 E4 05 F1 | 	add	objptr, ##41991
11018     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1101c     04 E4 85 F1 | 	sub	objptr, #4
11020     03 00 80 FF 
11024     F2 28 69 FC | 	wrlong	##1684, objptr
11028     52 00 00 FF 
1102c     44 E4 85 F1 | 	sub	objptr, ##42052
11030     07 00 00 FF 
11034     72 EB 85 F1 | 	sub	ptr__dat__, ##3954
11038                 | LR__1398
11038     52 00 00 FF 
1103c     40 E4 05 F1 | 	add	objptr, ##42048
11040     F2 1E 62 FC | 	wrlong	local01, objptr
11044     24 00 00 FF 
11048     40 E4 85 F1 | 	sub	objptr, ##18496
1104c     F2 12 02 FB | 	rdlong	arg01, objptr
11050     04 E4 85 F1 | 	sub	objptr, #4
11054     F2 14 02 FB | 	rdlong	arg02, objptr
11058     2D 00 00 FF 
1105c     FC E5 85 F1 | 	sub	objptr, ##23548
11060     B4 3F B0 FD | 	call	#_hg010b_spin2_cls
11064     2B 01 00 FF 
11068     59 13 06 F6 | 	mov	arg01, ##@LR__4335
1106c                 | ' 
1106c                 | ' write(text)
1106c     64 42 B0 FD | 	call	#_hg010b_spin2_write
11070                 | ' crlf
11070     C0 43 B0 FD | 	call	#_hg010b_spin2_crlf
11074     10 00 00 FF 
11078     10 EB 05 F1 | 	add	ptr__dat__, ##8464
1107c     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
11080     10 00 00 FF 
11084     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
11088                 | ' 
11088                 | ' write(text)
11088     48 42 B0 FD | 	call	#_hg010b_spin2_write
1108c                 | ' crlf
1108c     A4 43 B0 FD | 	call	#_hg010b_spin2_crlf
11090     50 00 00 FF 
11094     A0 E5 05 F1 | 	add	objptr, ##41376
11098     F2 12 02 FB | 	rdlong	arg01, objptr
1109c     50 00 00 FF 
110a0     A0 E5 85 F1 | 	sub	objptr, ##41376
110a4                 | ' 
110a4                 | ' write(text)
110a4     2C 42 B0 FD | 	call	#_hg010b_spin2_write
110a8                 | ' crlf
110a8     88 43 B0 FD | 	call	#_hg010b_spin2_crlf
110ac     A7 F0 03 F6 | 	mov	ptra, fp
110b0     B2 00 A0 FD | 	call	#popregs_
110b4                 | _do_mode_ret
110b4     2D 00 64 FD | 	ret
110b8                 | 
110b8                 | ' 
110b8                 | ' 
110b8                 | ' 
110b8                 | ' sub do_pinwrite
110b8                 | _do_pinwrite
110b8     01 4A 05 F6 | 	mov	COUNT_, #1
110bc     A8 00 A0 FD | 	call	#pushregs_
110c0     18 F0 07 F1 | 	add	ptra, #24
110c4     48 7A BF FD | 	call	#_pop
110c8     FD 14 02 F6 | 	mov	arg02, result1
110cc     FE 12 02 F6 | 	mov	arg01, result2
110d0     FF 1E 02 F6 | 	mov	local01, result3
110d4     A7 14 62 FC | 	wrlong	arg02, fp
110d8     04 4E 05 F1 | 	add	fp, #4
110dc     A7 12 62 FC | 	wrlong	arg01, fp
110e0     04 4E 05 F1 | 	add	fp, #4
110e4     A7 1E 62 FC | 	wrlong	local01, fp
110e8     08 4E 85 F1 | 	sub	fp, #8
110ec     20 7A BF FD | 	call	#_pop
110f0     FF 1E 02 F6 | 	mov	local01, result3
110f4     0C 4E 05 F1 | 	add	fp, #12
110f8     A7 FA 61 FC | 	wrlong	result1, fp
110fc     04 4E 05 F1 | 	add	fp, #4
11100     A7 FC 61 FC | 	wrlong	result2, fp
11104     04 4E 05 F1 | 	add	fp, #4
11108     A7 1E 62 FC | 	wrlong	local01, fp
1110c     08 4E 85 F1 | 	sub	fp, #8
11110     A7 12 02 F6 | 	mov	arg01, fp
11114     0C 4E 85 F1 | 	sub	fp, #12
11118     2C DA BF FD | 	call	#_converttoint
1111c     FD 1E 02 F6 | 	mov	local01, result1
11120     A7 12 02 F6 | 	mov	arg01, fp
11124     20 DA BF FD | 	call	#_converttoint
11128     FD 14 02 F6 | 	mov	arg02, result1
1112c     0F 13 02 F6 | 	mov	arg01, local01
11130     78 53 B0 FD | 	call	#__system___pinwrite
11134     A7 F0 03 F6 | 	mov	ptra, fp
11138     B2 00 A0 FD | 	call	#popregs_
1113c                 | _do_pinwrite_ret
1113c     2D 00 64 FD | 	ret
11140                 | 
11140                 | ' 
11140                 | ' sub do_pinfloat
11140                 | _do_pinfloat
11140     00 4A 05 F6 | 	mov	COUNT_, #0
11144     A8 00 A0 FD | 	call	#pushregs_
11148     0C F0 07 F1 | 	add	ptra, #12
1114c     C0 79 BF FD | 	call	#_pop
11150     A7 FA 61 FC | 	wrlong	result1, fp
11154     04 4E 05 F1 | 	add	fp, #4
11158     A7 FC 61 FC | 	wrlong	result2, fp
1115c     04 4E 05 F1 | 	add	fp, #4
11160     A7 FE 61 FC | 	wrlong	result3, fp
11164     08 4E 85 F1 | 	sub	fp, #8
11168     A7 12 02 F6 | 	mov	arg01, fp
1116c     D8 D9 BF FD | 	call	#_converttoint
11170     50 FA 61 FD | 	fltl	result1
11174     A7 F0 03 F6 | 	mov	ptra, fp
11178     B2 00 A0 FD | 	call	#popregs_
1117c                 | _do_pinfloat_ret
1117c     2D 00 64 FD | 	ret
11180                 | 
11180                 | ' 
11180                 | ' sub do_pinlo
11180                 | _do_pinlo
11180     00 4A 05 F6 | 	mov	COUNT_, #0
11184     A8 00 A0 FD | 	call	#pushregs_
11188     0C F0 07 F1 | 	add	ptra, #12
1118c     80 79 BF FD | 	call	#_pop
11190     A7 FA 61 FC | 	wrlong	result1, fp
11194     04 4E 05 F1 | 	add	fp, #4
11198     A7 FC 61 FC | 	wrlong	result2, fp
1119c     04 4E 05 F1 | 	add	fp, #4
111a0     A7 FE 61 FC | 	wrlong	result3, fp
111a4     08 4E 85 F1 | 	sub	fp, #8
111a8     A7 12 02 F6 | 	mov	arg01, fp
111ac     98 D9 BF FD | 	call	#_converttoint
111b0     58 FA 61 FD | 	drvl	result1
111b4     A7 F0 03 F6 | 	mov	ptra, fp
111b8     B2 00 A0 FD | 	call	#popregs_
111bc                 | _do_pinlo_ret
111bc     2D 00 64 FD | 	ret
111c0                 | 
111c0                 | ' 
111c0                 | ' sub do_pinhi
111c0                 | _do_pinhi
111c0     00 4A 05 F6 | 	mov	COUNT_, #0
111c4     A8 00 A0 FD | 	call	#pushregs_
111c8     0C F0 07 F1 | 	add	ptra, #12
111cc     40 79 BF FD | 	call	#_pop
111d0     A7 FA 61 FC | 	wrlong	result1, fp
111d4     04 4E 05 F1 | 	add	fp, #4
111d8     A7 FC 61 FC | 	wrlong	result2, fp
111dc     04 4E 05 F1 | 	add	fp, #4
111e0     A7 FE 61 FC | 	wrlong	result3, fp
111e4     08 4E 85 F1 | 	sub	fp, #8
111e8     A7 12 02 F6 | 	mov	arg01, fp
111ec     58 D9 BF FD | 	call	#_converttoint
111f0     59 FA 61 FD | 	drvh	result1
111f4     A7 F0 03 F6 | 	mov	ptra, fp
111f8     B2 00 A0 FD | 	call	#popregs_
111fc                 | _do_pinhi_ret
111fc     2D 00 64 FD | 	ret
11200                 | 
11200                 | ' 
11200                 | ' sub do_pintoggle
11200                 | _do_pintoggle
11200     00 4A 05 F6 | 	mov	COUNT_, #0
11204     A8 00 A0 FD | 	call	#pushregs_
11208     0C F0 07 F1 | 	add	ptra, #12
1120c     00 79 BF FD | 	call	#_pop
11210     A7 FA 61 FC | 	wrlong	result1, fp
11214     04 4E 05 F1 | 	add	fp, #4
11218     A7 FC 61 FC | 	wrlong	result2, fp
1121c     04 4E 05 F1 | 	add	fp, #4
11220     A7 FE 61 FC | 	wrlong	result3, fp
11224     08 4E 85 F1 | 	sub	fp, #8
11228     A7 12 02 F6 | 	mov	arg01, fp
1122c     18 D9 BF FD | 	call	#_converttoint
11230     5F FA 61 FD | 	drvnot	result1
11234     A7 F0 03 F6 | 	mov	ptra, fp
11238     B2 00 A0 FD | 	call	#popregs_
1123c                 | _do_pintoggle_ret
1123c     2D 00 64 FD | 	ret
11240                 | 
11240                 | ' 
11240                 | ' 
11240                 | ' sub do_pinstart
11240                 | _do_pinstart
11240     03 4A 05 F6 | 	mov	COUNT_, #3
11244     A8 00 A0 FD | 	call	#pushregs_
11248     30 F0 07 F1 | 	add	ptra, #48
1124c     C0 78 BF FD | 	call	#_pop
11250     FD 16 02 F6 | 	mov	arg03, result1
11254     FE 14 02 F6 | 	mov	arg02, result2
11258     FF 18 02 F6 | 	mov	arg04, result3
1125c     A7 16 62 FC | 	wrlong	arg03, fp
11260     04 4E 05 F1 | 	add	fp, #4
11264     A7 14 62 FC | 	wrlong	arg02, fp
11268     04 4E 05 F1 | 	add	fp, #4
1126c     A7 18 62 FC | 	wrlong	arg04, fp
11270     08 4E 85 F1 | 	sub	fp, #8
11274     98 78 BF FD | 	call	#_pop
11278     FD 16 02 F6 | 	mov	arg03, result1
1127c     FE 14 02 F6 | 	mov	arg02, result2
11280     FF 18 02 F6 | 	mov	arg04, result3
11284     0C 4E 05 F1 | 	add	fp, #12
11288     A7 16 62 FC | 	wrlong	arg03, fp
1128c     04 4E 05 F1 | 	add	fp, #4
11290     A7 14 62 FC | 	wrlong	arg02, fp
11294     04 4E 05 F1 | 	add	fp, #4
11298     A7 18 62 FC | 	wrlong	arg04, fp
1129c     14 4E 85 F1 | 	sub	fp, #20
112a0     6C 78 BF FD | 	call	#_pop
112a4     FD 16 02 F6 | 	mov	arg03, result1
112a8     FE 14 02 F6 | 	mov	arg02, result2
112ac     FF 18 02 F6 | 	mov	arg04, result3
112b0     18 4E 05 F1 | 	add	fp, #24
112b4     A7 16 62 FC | 	wrlong	arg03, fp
112b8     04 4E 05 F1 | 	add	fp, #4
112bc     A7 14 62 FC | 	wrlong	arg02, fp
112c0     04 4E 05 F1 | 	add	fp, #4
112c4     A7 18 62 FC | 	wrlong	arg04, fp
112c8     20 4E 85 F1 | 	sub	fp, #32
112cc     40 78 BF FD | 	call	#_pop
112d0     FF 16 02 F6 | 	mov	arg03, result3
112d4     24 4E 05 F1 | 	add	fp, #36
112d8     A7 FA 61 FC | 	wrlong	result1, fp
112dc     04 4E 05 F1 | 	add	fp, #4
112e0     A7 FC 61 FC | 	wrlong	result2, fp
112e4     04 4E 05 F1 | 	add	fp, #4
112e8     A7 16 62 FC | 	wrlong	arg03, fp
112ec     08 4E 85 F1 | 	sub	fp, #8
112f0     A7 12 02 F6 | 	mov	arg01, fp
112f4     24 4E 85 F1 | 	sub	fp, #36
112f8     4C D8 BF FD | 	call	#_converttoint
112fc     FD 1E 02 F6 | 	mov	local01, result1
11300     18 4E 05 F1 | 	add	fp, #24
11304     A7 12 02 F6 | 	mov	arg01, fp
11308     18 4E 85 F1 | 	sub	fp, #24
1130c     38 D8 BF FD | 	call	#_converttoint
11310     FD 20 02 F6 | 	mov	local02, result1
11314     0C 4E 05 F1 | 	add	fp, #12
11318     A7 12 02 F6 | 	mov	arg01, fp
1131c     0C 4E 85 F1 | 	sub	fp, #12
11320     24 D8 BF FD | 	call	#_converttoint
11324     FD 22 02 F6 | 	mov	local03, result1
11328     A7 12 02 F6 | 	mov	arg01, fp
1132c     18 D8 BF FD | 	call	#_converttoint
11330     40 1E 62 FD | 	dirl	local01
11334     0F 21 02 FC | 	wrpin	local02, local01
11338     0F 23 12 FC | 	wxpin	local03, local01
1133c     0F FB 21 FC | 	wypin	result1, local01
11340     41 1E 62 FD | 	dirh	local01
11344     A7 F0 03 F6 | 	mov	ptra, fp
11348     B2 00 A0 FD | 	call	#popregs_
1134c                 | _do_pinstart_ret
1134c     2D 00 64 FD | 	ret
11350                 | 
11350                 | ' 
11350                 | ' 
11350                 | ' sub do_wrpin
11350                 | _do_wrpin
11350     01 4A 05 F6 | 	mov	COUNT_, #1
11354     A8 00 A0 FD | 	call	#pushregs_
11358     18 F0 07 F1 | 	add	ptra, #24
1135c     B0 77 BF FD | 	call	#_pop
11360     FD 14 02 F6 | 	mov	arg02, result1
11364     FE 12 02 F6 | 	mov	arg01, result2
11368     FF 1E 02 F6 | 	mov	local01, result3
1136c     A7 14 62 FC | 	wrlong	arg02, fp
11370     04 4E 05 F1 | 	add	fp, #4
11374     A7 12 62 FC | 	wrlong	arg01, fp
11378     04 4E 05 F1 | 	add	fp, #4
1137c     A7 1E 62 FC | 	wrlong	local01, fp
11380     08 4E 85 F1 | 	sub	fp, #8
11384     88 77 BF FD | 	call	#_pop
11388     FF 1E 02 F6 | 	mov	local01, result3
1138c     0C 4E 05 F1 | 	add	fp, #12
11390     A7 FA 61 FC | 	wrlong	result1, fp
11394     04 4E 05 F1 | 	add	fp, #4
11398     A7 FC 61 FC | 	wrlong	result2, fp
1139c     04 4E 05 F1 | 	add	fp, #4
113a0     A7 1E 62 FC | 	wrlong	local01, fp
113a4     08 4E 85 F1 | 	sub	fp, #8
113a8     A7 12 02 F6 | 	mov	arg01, fp
113ac     0C 4E 85 F1 | 	sub	fp, #12
113b0     94 D7 BF FD | 	call	#_converttoint
113b4     FD 1E 02 F6 | 	mov	local01, result1
113b8     A7 12 02 F6 | 	mov	arg01, fp
113bc     88 D7 BF FD | 	call	#_converttoint
113c0     0F FB 01 FC | 	wrpin	result1, local01
113c4     A7 F0 03 F6 | 	mov	ptra, fp
113c8     B2 00 A0 FD | 	call	#popregs_
113cc                 | _do_wrpin_ret
113cc     2D 00 64 FD | 	ret
113d0                 | 
113d0                 | ' 
113d0                 | ' sub do_wxpin
113d0                 | _do_wxpin
113d0     01 4A 05 F6 | 	mov	COUNT_, #1
113d4     A8 00 A0 FD | 	call	#pushregs_
113d8     18 F0 07 F1 | 	add	ptra, #24
113dc     30 77 BF FD | 	call	#_pop
113e0     FD 14 02 F6 | 	mov	arg02, result1
113e4     FE 12 02 F6 | 	mov	arg01, result2
113e8     FF 1E 02 F6 | 	mov	local01, result3
113ec     A7 14 62 FC | 	wrlong	arg02, fp
113f0     04 4E 05 F1 | 	add	fp, #4
113f4     A7 12 62 FC | 	wrlong	arg01, fp
113f8     04 4E 05 F1 | 	add	fp, #4
113fc     A7 1E 62 FC | 	wrlong	local01, fp
11400     08 4E 85 F1 | 	sub	fp, #8
11404     08 77 BF FD | 	call	#_pop
11408     FF 1E 02 F6 | 	mov	local01, result3
1140c     0C 4E 05 F1 | 	add	fp, #12
11410     A7 FA 61 FC | 	wrlong	result1, fp
11414     04 4E 05 F1 | 	add	fp, #4
11418     A7 FC 61 FC | 	wrlong	result2, fp
1141c     04 4E 05 F1 | 	add	fp, #4
11420     A7 1E 62 FC | 	wrlong	local01, fp
11424     08 4E 85 F1 | 	sub	fp, #8
11428     A7 12 02 F6 | 	mov	arg01, fp
1142c     0C 4E 85 F1 | 	sub	fp, #12
11430     14 D7 BF FD | 	call	#_converttoint
11434     FD 1E 02 F6 | 	mov	local01, result1
11438     A7 12 02 F6 | 	mov	arg01, fp
1143c     08 D7 BF FD | 	call	#_converttoint
11440     0F FB 11 FC | 	wxpin	result1, local01
11444     A7 F0 03 F6 | 	mov	ptra, fp
11448     B2 00 A0 FD | 	call	#popregs_
1144c                 | _do_wxpin_ret
1144c     2D 00 64 FD | 	ret
11450                 | 
11450                 | ' 
11450                 | ' sub do_wypin
11450                 | _do_wypin
11450     01 4A 05 F6 | 	mov	COUNT_, #1
11454     A8 00 A0 FD | 	call	#pushregs_
11458     18 F0 07 F1 | 	add	ptra, #24
1145c     B0 76 BF FD | 	call	#_pop
11460     FD 14 02 F6 | 	mov	arg02, result1
11464     FE 12 02 F6 | 	mov	arg01, result2
11468     FF 1E 02 F6 | 	mov	local01, result3
1146c     A7 14 62 FC | 	wrlong	arg02, fp
11470     04 4E 05 F1 | 	add	fp, #4
11474     A7 12 62 FC | 	wrlong	arg01, fp
11478     04 4E 05 F1 | 	add	fp, #4
1147c     A7 1E 62 FC | 	wrlong	local01, fp
11480     08 4E 85 F1 | 	sub	fp, #8
11484     88 76 BF FD | 	call	#_pop
11488     FF 1E 02 F6 | 	mov	local01, result3
1148c     0C 4E 05 F1 | 	add	fp, #12
11490     A7 FA 61 FC | 	wrlong	result1, fp
11494     04 4E 05 F1 | 	add	fp, #4
11498     A7 FC 61 FC | 	wrlong	result2, fp
1149c     04 4E 05 F1 | 	add	fp, #4
114a0     A7 1E 62 FC | 	wrlong	local01, fp
114a4     08 4E 85 F1 | 	sub	fp, #8
114a8     A7 12 02 F6 | 	mov	arg01, fp
114ac     0C 4E 85 F1 | 	sub	fp, #12
114b0     94 D6 BF FD | 	call	#_converttoint
114b4     FD 1E 02 F6 | 	mov	local01, result1
114b8     A7 12 02 F6 | 	mov	arg01, fp
114bc     88 D6 BF FD | 	call	#_converttoint
114c0     0F FB 21 FC | 	wypin	result1, local01
114c4     A7 F0 03 F6 | 	mov	ptra, fp
114c8     B2 00 A0 FD | 	call	#popregs_
114cc                 | _do_wypin_ret
114cc     2D 00 64 FD | 	ret
114d0                 | 
114d0                 | ' 
114d0                 | ' sub do_position
114d0                 | _do_position
114d0     01 4A 05 F6 | 	mov	COUNT_, #1
114d4     A8 00 A0 FD | 	call	#pushregs_
114d8     18 F0 07 F1 | 	add	ptra, #24
114dc     30 76 BF FD | 	call	#_pop
114e0     FD 14 02 F6 | 	mov	arg02, result1
114e4     FE 12 02 F6 | 	mov	arg01, result2
114e8     FF 1E 02 F6 | 	mov	local01, result3
114ec     A7 14 62 FC | 	wrlong	arg02, fp
114f0     04 4E 05 F1 | 	add	fp, #4
114f4     A7 12 62 FC | 	wrlong	arg01, fp
114f8     04 4E 05 F1 | 	add	fp, #4
114fc     A7 1E 62 FC | 	wrlong	local01, fp
11500     08 4E 85 F1 | 	sub	fp, #8
11504     08 76 BF FD | 	call	#_pop
11508     FF 1E 02 F6 | 	mov	local01, result3
1150c     0C 4E 05 F1 | 	add	fp, #12
11510     A7 FA 61 FC | 	wrlong	result1, fp
11514     04 4E 05 F1 | 	add	fp, #4
11518     A7 FC 61 FC | 	wrlong	result2, fp
1151c     04 4E 05 F1 | 	add	fp, #4
11520     A7 1E 62 FC | 	wrlong	local01, fp
11524     08 4E 85 F1 | 	sub	fp, #8
11528     A7 12 02 F6 | 	mov	arg01, fp
1152c     0C 4E 85 F1 | 	sub	fp, #12
11530     14 D6 BF FD | 	call	#_converttoint
11534     FD 1E 02 F6 | 	mov	local01, result1
11538     A7 12 02 F6 | 	mov	arg01, fp
1153c     08 D6 BF FD | 	call	#_converttoint
11540     FD 14 02 F6 | 	mov	arg02, result1
11544     0F 13 02 F6 | 	mov	arg01, local01
11548     24 3A B0 FD | 	call	#_hg010b_spin2_setcursorpos
1154c     A7 F0 03 F6 | 	mov	ptra, fp
11550     B2 00 A0 FD | 	call	#popregs_
11554                 | _do_position_ret
11554     2D 00 64 FD | 	ret
11558                 | 
11558                 | ' 
11558                 | ' sub do_waitms
11558                 | _do_waitms
11558     01 4A 05 F6 | 	mov	COUNT_, #1
1155c     A8 00 A0 FD | 	call	#pushregs_
11560     18 F0 07 F1 | 	add	ptra, #24
11564     A8 75 BF FD | 	call	#_pop
11568     A7 FA 61 FC | 	wrlong	result1, fp
1156c     04 4E 05 F1 | 	add	fp, #4
11570     A7 FC 61 FC | 	wrlong	result2, fp
11574     04 4E 05 F1 | 	add	fp, #4
11578     A7 FE 61 FC | 	wrlong	result3, fp
1157c                 | ' 
1157c                 | ' t1=pop() 'value
1157c                 | ' 
1157c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then t=t1.result.iresult else t=converttoint(t1)
1157c     08 4E 85 F1 | 	sub	fp, #8
11580     1C FE 0D F2 | 	cmp	result3, #28 wz
11584     08 4E 05 51 |  if_ne	add	fp, #8
11588     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1158c     08 4E 85 51 |  if_ne	sub	fp, #8
11590     1D 12 0E 52 |  if_ne	cmp	arg01, #29 wz
11594     A7 12 02 AB |  if_e	rdlong	arg01, fp
11598     0C 4E 05 A1 |  if_e	add	fp, #12
1159c     A7 12 62 AC |  if_e	wrlong	arg01, fp
115a0     0C 4E 85 A1 |  if_e	sub	fp, #12
115a4     14 00 90 AD |  if_e	jmp	#LR__1400
115a8     A7 12 02 F6 | 	mov	arg01, fp
115ac     98 D5 BF FD | 	call	#_converttoint
115b0     0C 4E 05 F1 | 	add	fp, #12
115b4     A7 FA 61 FC | 	wrlong	result1, fp
115b8     0C 4E 85 F1 | 	sub	fp, #12
115bc                 | LR__1400
115bc                 | ' if t<0 then return
115bc     0C 4E 05 F1 | 	add	fp, #12
115c0     A7 12 02 FB | 	rdlong	arg01, fp
115c4     0C 4E 85 F1 | 	sub	fp, #12
115c8     00 12 56 F2 | 	cmps	arg01, #0 wc
115cc     B8 00 90 CD |  if_b	jmp	#LR__1405
115d0                 | ' if t < 5000 then 
115d0     0C 4E 05 F1 | 	add	fp, #12
115d4     A7 12 02 FB | 	rdlong	arg01, fp
115d8     0C 4E 85 F1 | 	sub	fp, #12
115dc     09 00 00 FF 
115e0     88 13 56 F2 | 	cmps	arg01, ##5000 wc
115e4     14 00 90 3D |  if_ae	jmp	#LR__1401
115e8     0C 4E 05 F1 | 	add	fp, #12
115ec     A7 12 02 FB | 	rdlong	arg01, fp
115f0     0C 4E 85 F1 | 	sub	fp, #12
115f4     F4 4F B0 FD | 	call	#__system___waitms
115f8     8C 00 90 FD | 	jmp	#LR__1404
115fc                 | LR__1401
115fc     10 4E 05 F1 | 	add	fp, #16
11600     A7 02 68 FC | 	wrlong	#1, fp
11604     04 4E 85 F1 | 	sub	fp, #4
11608     A7 12 02 FB | 	rdlong	arg01, fp
1160c     09 13 52 F6 | 	abs	arg01, arg01 wc
11610     09 00 00 FF 
11614     88 13 16 FD | 	qdiv	arg01, ##5000
11618                 | '   for i=1 to t/5000
11618     0C 4E 85 F1 | 	sub	fp, #12
1161c     18 1E 62 FD | 	getqx	local01
11620     0F 1F 82 F6 | 	negc	local01, local01
11624     01 1E 06 F1 | 	add	local01, #1
11628                 | LR__1402
11628     10 4E 05 F1 | 	add	fp, #16
1162c     A7 12 02 FB | 	rdlong	arg01, fp
11630     10 4E 85 F1 | 	sub	fp, #16
11634     0F 13 52 F2 | 	cmps	arg01, local01 wc
11638     28 00 90 3D |  if_ae	jmp	#LR__1403
1163c     0C 4E 05 F1 | 	add	fp, #12
11640     A7 12 02 FB | 	rdlong	arg01, fp
11644     0C 4E 85 F1 | 	sub	fp, #12
11648     A0 4F B0 FD | 	call	#__system___waitms
1164c     10 4E 05 F1 | 	add	fp, #16
11650     A7 12 02 FB | 	rdlong	arg01, fp
11654     01 12 06 F1 | 	add	arg01, #1
11658     A7 12 62 FC | 	wrlong	arg01, fp
1165c     10 4E 85 F1 | 	sub	fp, #16
11660     C4 FF 9F FD | 	jmp	#LR__1402
11664                 | LR__1403
11664     0C 4E 05 F1 | 	add	fp, #12
11668     A7 1E 02 FB | 	rdlong	local01, fp
1166c     0F 1F 52 F6 | 	abs	local01, local01 wc
11670     09 00 00 FF 
11674     88 1F 16 FD | 	qdiv	local01, ##5000
11678     0C 4E 85 F1 | 	sub	fp, #12
1167c     19 1E 62 FD | 	getqy	local01
11680     0F 13 82 F6 | 	negc	arg01, local01
11684     64 4F B0 FD | 	call	#__system___waitms
11688                 | LR__1404
11688                 | LR__1405
11688     A7 F0 03 F6 | 	mov	ptra, fp
1168c     B2 00 A0 FD | 	call	#popregs_
11690                 | _do_waitms_ret
11690     2D 00 64 FD | 	ret
11694                 | 
11694                 | ' 
11694                 | ' sub do_waitvbl
11694                 | _do_waitvbl
11694     01 12 06 F6 | 	mov	arg01, #1
11698     0C 39 B0 FD | 	call	#_hg010b_spin2_waitvbl
1169c                 | _do_waitvbl_ret
1169c     2D 00 64 FD | 	ret
116a0                 | 
116a0                 | ' 
116a0                 | ' sub do_waitclock
116a0                 | _do_waitclock
116a0     52 00 00 FF 
116a4     38 E4 05 F1 | 	add	objptr, ##42040
116a8     F2 00 02 FB | 	rdlong	_var01, objptr
116ac                 | ' c=hkcnt
116ac                 | ' do: loop until hkcnt<>c
116ac                 | LR__1410
116ac     F2 02 02 FB | 	rdlong	_var02, objptr
116b0     00 03 0A F2 | 	cmp	_var02, _var01 wz
116b4     F4 FF 9F AD |  if_e	jmp	#LR__1410
116b8     52 00 00 FF 
116bc     38 E4 85 F1 | 	sub	objptr, ##42040
116c0                 | _do_waitclock_ret
116c0     2D 00 64 FD | 	ret
116c4                 | 
116c4                 | ' 
116c4                 | ' sub do_dir
116c4                 | _do_dir
116c4     03 4A 05 F6 | 	mov	COUNT_, #3
116c8     A8 00 A0 FD | 	call	#pushregs_
116cc     2B 01 00 FF 
116d0     5A 13 06 F6 | 	mov	arg01, ##@LR__4336
116d4     AC 52 B0 FD | 	call	#__system___chdir
116d8                 | ' chdir("/sd/bas")       ' set working directory
116d8                 | ' print "Working directory: "; currentdir$ 
116d8     00 12 06 F6 | 	mov	arg01, #0
116dc     C8 A0 B0 FD | 	call	#__system___getiolock_0372
116e0     FD 12 02 F6 | 	mov	arg01, result1
116e4     10 4C B0 FD | 	call	#__system___lockmem
116e8     2B 01 00 FF 
116ec     62 15 06 F6 | 	mov	arg02, ##@LR__4337
116f0     00 12 06 F6 | 	mov	arg01, #0
116f4     00 16 06 F6 | 	mov	arg03, #0
116f8     F0 58 B0 FD | 	call	#__system___basic_print_string
116fc     49 00 00 FF 
11700     58 E4 05 F1 | 	add	objptr, ##37464
11704     F2 14 02 FB | 	rdlong	arg02, objptr
11708     49 00 00 FF 
1170c     58 E4 85 F1 | 	sub	objptr, ##37464
11710     00 12 06 F6 | 	mov	arg01, #0
11714     00 16 06 F6 | 	mov	arg03, #0
11718     D0 58 B0 FD | 	call	#__system___basic_print_string
1171c     00 12 06 F6 | 	mov	arg01, #0
11720     0A 14 06 F6 | 	mov	arg02, #10
11724     00 16 06 F6 | 	mov	arg03, #0
11728     68 58 B0 FD | 	call	#__system___basic_print_char
1172c     00 12 06 F6 | 	mov	arg01, #0
11730     74 A0 B0 FD | 	call	#__system___getiolock_0372
11734     FD 00 68 FC | 	wrlong	#0, result1
11738     2B 01 00 FF 
1173c     76 13 06 F6 | 	mov	arg01, ##@LR__4338
11740     10 14 06 F6 | 	mov	arg02, #16
11744     B0 A0 B0 FD | 	call	#__system___basic_dir
11748     FD 1E 02 F6 | 	mov	local01, result1
1174c                 | ' 
1174c                 | ' filename=dir$("*", fbDirectory)
1174c                 | ' while filename <> "" and filename <> nil
1174c                 | LR__1420
1174c     00 20 06 F6 | 	mov	local02, #0
11750     2B 01 00 FF 
11754     78 15 06 F6 | 	mov	arg02, ##@LR__4339
11758     0F 13 02 F6 | 	mov	arg01, local01
1175c     C0 4B B0 FD | 	call	#__system___string_cmp
11760     00 FA 0D F2 | 	cmp	result1, #0 wz
11764     00 20 26 56 |  if_ne	not	local02, #0
11768     00 22 06 F6 | 	mov	local03, #0
1176c     0F 13 02 F6 | 	mov	arg01, local01
11770     00 14 06 F6 | 	mov	arg02, #0
11774     A8 4B B0 FD | 	call	#__system___string_cmp
11778     00 FA 0D F2 | 	cmp	result1, #0 wz
1177c     00 22 26 56 |  if_ne	not	local03, #0
11780     11 21 CA F7 | 	test	local02, local03 wz
11784     64 00 90 AD |  if_e	jmp	#LR__1421
11788                 | '   print "[dir] ";filename
11788     00 12 06 F6 | 	mov	arg01, #0
1178c     18 A0 B0 FD | 	call	#__system___getiolock_0372
11790     FD 12 02 F6 | 	mov	arg01, result1
11794     60 4B B0 FD | 	call	#__system___lockmem
11798     2B 01 00 FF 
1179c     79 15 06 F6 | 	mov	arg02, ##@LR__4340
117a0     00 12 06 F6 | 	mov	arg01, #0
117a4     00 16 06 F6 | 	mov	arg03, #0
117a8     40 58 B0 FD | 	call	#__system___basic_print_string
117ac     00 12 06 F6 | 	mov	arg01, #0
117b0     0F 15 02 F6 | 	mov	arg02, local01
117b4     00 16 06 F6 | 	mov	arg03, #0
117b8     30 58 B0 FD | 	call	#__system___basic_print_string
117bc     00 12 06 F6 | 	mov	arg01, #0
117c0     0A 14 06 F6 | 	mov	arg02, #10
117c4     00 16 06 F6 | 	mov	arg03, #0
117c8     C8 57 B0 FD | 	call	#__system___basic_print_char
117cc     00 12 06 F6 | 	mov	arg01, #0
117d0     D4 9F B0 FD | 	call	#__system___getiolock_0372
117d4     FD 00 68 FC | 	wrlong	#0, result1
117d8     00 12 06 F6 | 	mov	arg01, #0
117dc     00 14 06 F6 | 	mov	arg02, #0
117e0     14 A0 B0 FD | 	call	#__system___basic_dir
117e4     FD 1E 02 F6 | 	mov	local01, result1
117e8     60 FF 9F FD | 	jmp	#LR__1420
117ec                 | LR__1421
117ec     2B 01 00 FF 
117f0     80 13 06 F6 | 	mov	arg01, ##@LR__4341
117f4     21 14 06 F6 | 	mov	arg02, #33
117f8     FC 9F B0 FD | 	call	#__system___basic_dir
117fc     FD 1E 02 F6 | 	mov	local01, result1
11800                 | ' 
11800                 | ' filename = dir$("*", fbNormal )  ' start scan for all files and directories
11800                 | ' do while filename <> "" and filename <> nil
11800                 | LR__1422
11800     00 20 06 F6 | 	mov	local02, #0
11804     2B 01 00 FF 
11808     82 15 06 F6 | 	mov	arg02, ##@LR__4342
1180c     0F 13 02 F6 | 	mov	arg01, local01
11810     0C 4B B0 FD | 	call	#__system___string_cmp
11814     00 FA 0D F2 | 	cmp	result1, #0 wz
11818     00 20 26 56 |  if_ne	not	local02, #0
1181c     00 22 06 F6 | 	mov	local03, #0
11820     0F 13 02 F6 | 	mov	arg01, local01
11824     00 14 06 F6 | 	mov	arg02, #0
11828     F4 4A B0 FD | 	call	#__system___string_cmp
1182c     00 FA 0D F2 | 	cmp	result1, #0 wz
11830     00 22 26 56 |  if_ne	not	local03, #0
11834     11 21 CA F7 | 	test	local02, local03 wz
11838     4C 01 90 AD |  if_e	jmp	#LR__1426
1183c                 | '   print filename
1183c     00 12 06 F6 | 	mov	arg01, #0
11840     64 9F B0 FD | 	call	#__system___getiolock_0372
11844     FD 12 02 F6 | 	mov	arg01, result1
11848     AC 4A B0 FD | 	call	#__system___lockmem
1184c     00 12 06 F6 | 	mov	arg01, #0
11850     0F 15 02 F6 | 	mov	arg02, local01
11854     00 16 06 F6 | 	mov	arg03, #0
11858     90 57 B0 FD | 	call	#__system___basic_print_string
1185c     00 12 06 F6 | 	mov	arg01, #0
11860     0A 14 06 F6 | 	mov	arg02, #10
11864     00 16 06 F6 | 	mov	arg03, #0
11868     28 57 B0 FD | 	call	#__system___basic_print_char
1186c     00 12 06 F6 | 	mov	arg01, #0
11870     34 9F B0 FD | 	call	#__system___getiolock_0372
11874     FD 00 68 FC | 	wrlong	#0, result1
11878     00 12 06 F6 | 	mov	arg01, #0
1187c     00 14 06 F6 | 	mov	arg02, #0
11880     74 9F B0 FD | 	call	#__system___basic_dir
11884     FD 1E 02 F6 | 	mov	local01, result1
11888                 | '   filename = dir$()      ' continue scan
11888                 | '     if v.getcursory()=34 then    'bug, after first break, cursory is always 35
11888                 | ' return cursor_y
11888     3A E4 05 F1 | 	add	objptr, #58
1188c     F2 FA C1 FA | 	rdbyte	result1, objptr
11890     3A E4 85 F1 | 	sub	objptr, #58
11894     22 FA 0D F2 | 	cmp	result1, #34 wz
11898     64 FF 9F 5D |  if_ne	jmp	#LR__1422
1189c                 | '     print "-----more, press any key";
1189c     00 12 06 F6 | 	mov	arg01, #0
118a0     04 9F B0 FD | 	call	#__system___getiolock_0372
118a4     FD 12 02 F6 | 	mov	arg01, result1
118a8     4C 4A B0 FD | 	call	#__system___lockmem
118ac     2B 01 00 FF 
118b0     83 15 06 F6 | 	mov	arg02, ##@LR__4343
118b4     00 12 06 F6 | 	mov	arg01, #0
118b8     00 16 06 F6 | 	mov	arg03, #0
118bc     2C 57 B0 FD | 	call	#__system___basic_print_string
118c0     00 12 06 F6 | 	mov	arg01, #0
118c4     E0 9E B0 FD | 	call	#__system___getiolock_0372
118c8     FD 00 68 FC | 	wrlong	#0, result1
118cc                 | '     do 
118cc                 | LR__1423
118cc     CC 42 B0 FD | 	call	#_usbnew_spin2_get_key
118d0     00 FA 0D F2 | 	cmp	result1, #0 wz
118d4     F4 FF 9F 5D |  if_ne	jmp	#LR__1423
118d8                 | '     do
118d8                 | LR__1424
118d8     C0 42 B0 FD | 	call	#_usbnew_spin2_get_key
118dc     00 FA 0D F2 | 	cmp	result1, #0 wz
118e0     F4 FF 9F AD |  if_e	jmp	#LR__1424
118e4                 | '       if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
118e4     50 00 00 FF 
118e8     A4 E5 05 F1 | 	add	objptr, ##41380
118ec     F2 20 02 FB | 	rdlong	local02, objptr
118f0     50 00 00 FF 
118f4     A4 E5 85 F1 | 	sub	objptr, ##41380
118f8     01 20 0E F2 | 	cmp	local02, #1 wz
118fc     3C 00 90 5D |  if_ne	jmp	#LR__1425
11900     52 00 00 FF 
11904     48 E4 05 F1 | 	add	objptr, ##42056
11908     F2 14 02 FB | 	rdlong	arg02, objptr
1190c     04 E4 85 F1 | 	sub	objptr, #4
11910     F2 1A 02 FB | 	rdlong	arg05, objptr
11914     07 12 06 F6 | 	mov	arg01, #7
11918     56 00 00 FF 
1191c     44 16 06 F6 | 	mov	arg03, ##44100
11920     0E 18 C6 F9 | 	decod	arg04, #14
11924     01 1C 66 F6 | 	neg	arg06, #1
11928     46 00 00 FF 
1192c     84 E5 85 F1 | 	sub	objptr, ##36228
11930     90 45 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
11934     0B 00 00 FF 
11938     C0 E4 85 F1 | 	sub	objptr, ##5824
1193c                 | LR__1425
1193c     00 12 06 F6 | 	mov	arg01, #0
11940     23 14 06 F6 | 	mov	arg02, #35
11944     28 36 B0 FD | 	call	#_hg010b_spin2_setcursorpos
11948                 | '     position 0,35: print "                             ";: position 4,35  
11948     00 12 06 F6 | 	mov	arg01, #0
1194c     58 9E B0 FD | 	call	#__system___getiolock_0372
11950     FD 12 02 F6 | 	mov	arg01, result1
11954     A0 49 B0 FD | 	call	#__system___lockmem
11958     2B 01 00 FF 
1195c     9C 15 06 F6 | 	mov	arg02, ##@LR__4344
11960     00 12 06 F6 | 	mov	arg01, #0
11964     00 16 06 F6 | 	mov	arg03, #0
11968     80 56 B0 FD | 	call	#__system___basic_print_string
1196c     00 12 06 F6 | 	mov	arg01, #0
11970     34 9E B0 FD | 	call	#__system___getiolock_0372
11974     FD 00 68 FC | 	wrlong	#0, result1
11978     04 12 06 F6 | 	mov	arg01, #4
1197c     23 14 06 F6 | 	mov	arg02, #35
11980     EC 35 B0 FD | 	call	#_hg010b_spin2_setcursorpos
11984     78 FE 9F FD | 	jmp	#LR__1422
11988                 | LR__1426
11988     A7 F0 03 F6 | 	mov	ptra, fp
1198c     B2 00 A0 FD | 	call	#popregs_
11990                 | _do_dir_ret
11990     2D 00 64 FD | 	ret
11994                 | 
11994                 | ' 
11994                 | ' sub do_if
11994                 | _do_if
11994     05 4A 05 F6 | 	mov	COUNT_, #5
11998     A8 00 A0 FD | 	call	#pushregs_
1199c     70 71 BF FD | 	call	#_pop
119a0     FD 1E 0A F6 | 	mov	local01, result1 wz
119a4     FE 20 02 F6 | 	mov	local02, result2
119a8     FF 22 02 F6 | 	mov	local03, result3
119ac                 | ' t1=pop()
119ac                 | ' ' if uresult=0, jump over else
119ac                 | ' if t1.result.uresult = 0 then 
119ac     BC 00 90 5D |  if_ne	jmp	#LR__1432
119b0                 | '   for i=lineptr_e to lineptr-1
119b0     41 00 00 FF 
119b4     44 E4 05 F1 | 	add	objptr, ##33348
119b8     F2 24 02 FB | 	rdlong	local04, objptr
119bc     04 E4 85 F1 | 	sub	objptr, #4
119c0     F2 26 02 FB | 	rdlong	local05, objptr
119c4     41 00 00 FF 
119c8     40 E4 85 F1 | 	sub	objptr, ##33344
119cc                 | LR__1430
119cc     13 25 52 F2 | 	cmps	local04, local05 wc
119d0     78 00 90 3D |  if_ae	jmp	#LR__1431
119d4     12 FF 01 F6 | 	mov	result3, local04
119d8     01 FE 65 F0 | 	shl	result3, #1
119dc     12 FF 01 F1 | 	add	result3, local04
119e0     02 FE 65 F0 | 	shl	result3, #2
119e4     3E 00 00 FF 
119e8     40 E4 05 F1 | 	add	objptr, ##31808
119ec     F2 FE 01 F1 | 	add	result3, objptr
119f0     FF 1E 02 FB | 	rdlong	local01, result3
119f4     04 FE 05 F1 | 	add	result3, #4
119f8     FF FC 01 FB | 	rdlong	result2, result3
119fc     12 FF 01 F6 | 	mov	result3, local04
11a00     01 FE 65 F0 | 	shl	result3, #1
11a04     12 FF 01 F1 | 	add	result3, local04
11a08     02 FE 65 F0 | 	shl	result3, #2
11a0c     F2 FE 01 F1 | 	add	result3, objptr
11a10     08 FE 05 F1 | 	add	result3, #8
11a14     FF FE 01 FB | 	rdlong	result3, result3
11a18     FE 20 02 F6 | 	mov	local02, result2
11a1c     FF 22 02 F6 | 	mov	local03, result3
11a20                 | '     t1=compiledline(i)
11a20                 | '     if t1.result_type=token_else then lineptr_e=i : return
11a20     5A 22 0E F2 | 	cmp	local03, #90 wz
11a24     3E 00 00 FF 
11a28     40 E4 85 F1 | 	sub	objptr, ##31808
11a2c     41 00 00 AF 
11a30     44 E4 05 A1 |  if_e	add	objptr, ##33348
11a34     F2 24 62 AC |  if_e	wrlong	local04, objptr
11a38     41 00 00 AF 
11a3c     44 E4 85 A1 |  if_e	sub	objptr, ##33348
11a40     28 00 90 AD |  if_e	jmp	#LR__1433
11a44     01 24 06 F1 | 	add	local04, #1
11a48     80 FF 9F FD | 	jmp	#LR__1430
11a4c                 | LR__1431
11a4c     41 00 00 FF 
11a50     40 E4 05 F1 | 	add	objptr, ##33344
11a54     F2 26 02 FB | 	rdlong	local05, objptr
11a58     01 26 86 F1 | 	sub	local05, #1
11a5c     04 E4 05 F1 | 	add	objptr, #4
11a60     F2 26 62 FC | 	wrlong	local05, objptr
11a64     41 00 00 FF 
11a68     44 E4 85 F1 | 	sub	objptr, ##33348
11a6c                 | LR__1432
11a6c                 | LR__1433
11a6c     A7 F0 03 F6 | 	mov	ptra, fp
11a70     B2 00 A0 FD | 	call	#popregs_
11a74                 | _do_if_ret
11a74     2D 00 64 FD | 	ret
11a78                 | 
11a78                 | ' 
11a78                 | ' sub do_else
11a78                 | _do_else
11a78     41 00 00 FF 
11a7c     40 E4 05 F1 | 	add	objptr, ##33344
11a80     F2 00 02 FB | 	rdlong	_var01, objptr
11a84     01 00 86 F1 | 	sub	_var01, #1
11a88     04 E4 05 F1 | 	add	objptr, #4
11a8c     F2 00 62 FC | 	wrlong	_var01, objptr
11a90     41 00 00 FF 
11a94     44 E4 85 F1 | 	sub	objptr, ##33348
11a98                 | _do_else_ret
11a98     2D 00 64 FD | 	ret
11a9c                 | 
11a9c                 | ' 
11a9c                 | ' 
11a9c                 | ' 
11a9c                 | ' sub do_nothing
11a9c                 | _do_nothing
11a9c                 | _do_nothing_ret
11a9c     2D 00 64 FD | 	ret
11aa0                 | 
11aa0                 | ' 
11aa0                 | ' sub do_brun
11aa0                 | _do_brun
11aa0     08 4A 05 F6 | 	mov	COUNT_, #8
11aa4     A8 00 A0 FD | 	call	#pushregs_
11aa8     64 70 BF FD | 	call	#_pop
11aac     FE 1A 02 F6 | 	mov	arg05, result2
11ab0     FF 18 02 F6 | 	mov	arg04, result3
11ab4     FD 1E 02 F6 | 	mov	local01, result1
11ab8     0D 21 02 F6 | 	mov	local02, arg05
11abc     0C 23 02 F6 | 	mov	local03, arg04
11ac0                 | ' 
11ac0                 | ' t1=pop() 
11ac0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
11ac0     2B 22 0E F2 | 	cmp	local03, #43 wz
11ac4     10 00 90 5D |  if_ne	jmp	#LR__1440
11ac8     0F 13 02 F6 | 	mov	arg01, local01
11acc     2C 8D BF FD | 	call	#_convertstring
11ad0     FD 1E 02 F6 | 	mov	local01, result1
11ad4     1F 22 06 F6 | 	mov	local03, #31
11ad8                 | LR__1440
11ad8                 | ' if t1.result_type=result_string then
11ad8     1F 22 0E F2 | 	cmp	local03, #31 wz
11adc     EC 01 90 5D |  if_ne	jmp	#LR__1444
11ae0     0F 25 02 F6 | 	mov	local04, local01
11ae4                 | '   filename=t1.result.sresult
11ae4                 | '   if left$(filename,1)="/" then 
11ae4     12 13 02 F6 | 	mov	arg01, local04
11ae8     01 14 06 F6 | 	mov	arg02, #1
11aec     18 68 B0 FD | 	call	#__system__Left_S
11af0     FD 12 02 F6 | 	mov	arg01, result1
11af4     2B 01 00 FF 
11af8     BA 15 06 F6 | 	mov	arg02, ##@LR__4345
11afc     20 48 B0 FD | 	call	#__system___string_cmp
11b00     00 FA 0D F2 | 	cmp	result1, #0 wz
11b04     12 27 02 A6 |  if_e	mov	local05, local04
11b08     14 00 90 AD |  if_e	jmp	#LR__1441
11b0c     2B 01 00 FF 
11b10     BC 13 06 F6 | 	mov	arg01, ##@LR__4346
11b14     12 15 02 F6 | 	mov	arg02, local04
11b18     38 48 B0 FD | 	call	#__system___string_concat
11b1c     FD 26 02 F6 | 	mov	local05, result1
11b20                 | LR__1441
11b20                 | ' '  if mid$(filename,2,1)=":" then fullfilename=right$(filename,len(filename-3)) ' todo for future: strip c:/
11b20                 | '   open fullfilename for input as #9
11b20     09 12 06 F6 | 	mov	arg01, #9
11b24     13 15 02 F6 | 	mov	arg02, local05
11b28     00 16 06 F6 | 	mov	arg03, #0
11b2c     CC 53 B0 FD | 	call	#__system___basic_open_string
11b30     20 E8 05 F1 | 	add	ptr___system__dat__, #32
11b34     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
11b38     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
11b3c     FD 28 0A F6 | 	mov	local06, result1 wz
11b40                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
11b40     8C 00 90 AD |  if_e	jmp	#LR__1442
11b44     00 12 06 F6 | 	mov	arg01, #0
11b48     5C 9C B0 FD | 	call	#__system___getiolock_0372
11b4c     FD 12 02 F6 | 	mov	arg01, result1
11b50     A4 47 B0 FD | 	call	#__system___lockmem
11b54     2B 01 00 FF 
11b58     C5 15 06 F6 | 	mov	arg02, ##@LR__4347
11b5c     00 12 06 F6 | 	mov	arg01, #0
11b60     00 16 06 F6 | 	mov	arg03, #0
11b64     84 54 B0 FD | 	call	#__system___basic_print_string
11b68     00 12 06 F6 | 	mov	arg01, #0
11b6c     14 15 02 F6 | 	mov	arg02, local06
11b70     00 16 06 F6 | 	mov	arg03, #0
11b74     0A 18 06 F6 | 	mov	arg04, #10
11b78     B4 54 B0 FD | 	call	#__system___basic_print_integer
11b7c     2B 01 00 FF 
11b80     D3 15 06 F6 | 	mov	arg02, ##@LR__4348
11b84     00 12 06 F6 | 	mov	arg01, #0
11b88     00 16 06 F6 | 	mov	arg03, #0
11b8c     5C 54 B0 FD | 	call	#__system___basic_print_string
11b90     14 13 02 F6 | 	mov	arg01, local06
11b94     5C 6C B0 FD | 	call	#__system___strerror
11b98     FD 14 02 F6 | 	mov	arg02, result1
11b9c     00 12 06 F6 | 	mov	arg01, #0
11ba0     00 16 06 F6 | 	mov	arg03, #0
11ba4     44 54 B0 FD | 	call	#__system___basic_print_string
11ba8     00 12 06 F6 | 	mov	arg01, #0
11bac     0A 14 06 F6 | 	mov	arg02, #10
11bb0     00 16 06 F6 | 	mov	arg03, #0
11bb4     DC 53 B0 FD | 	call	#__system___basic_print_char
11bb8     00 12 06 F6 | 	mov	arg01, #0
11bbc     E8 9B B0 FD | 	call	#__system___getiolock_0372
11bc0     FD 00 68 FC | 	wrlong	#0, result1
11bc4     09 12 06 F6 | 	mov	arg01, #9
11bc8     0C 92 B0 FD | 	call	#__system__close
11bcc     FC 00 90 FD | 	jmp	#LR__1445
11bd0                 | LR__1442
11bd0     01 2A 06 F6 | 	mov	local07, #1
11bd4     00 2C 06 F6 | 	mov	local08, #0
11bd8                 | '   do
11bd8                 | LR__1443
11bd8                 | '     get #9,pos,block(0),1024,r : pos+=r	
11bd8     4E 00 00 FF 
11bdc     70 E5 05 F1 | 	add	objptr, ##40304
11be0     F2 16 02 F6 | 	mov	arg03, objptr
11be4     4E 00 00 FF 
11be8     70 E5 85 F1 | 	sub	objptr, ##40304
11bec     09 12 06 F6 | 	mov	arg01, #9
11bf0     15 15 02 F6 | 	mov	arg02, local07
11bf4     0A 18 C6 F9 | 	decod	arg04, #10
11bf8     01 1A 06 F6 | 	mov	arg05, #1
11bfc     FC 54 B0 FD | 	call	#__system___basic_get
11c00     FD 28 02 F6 | 	mov	local06, result1
11c04     FD 2A 02 F1 | 	add	local07, result1
11c08     4E 00 00 FF 
11c0c     70 E5 05 F1 | 	add	objptr, ##40304
11c10     F2 12 02 F6 | 	mov	arg01, objptr
11c14     16 15 02 F6 | 	mov	arg02, local08
11c18     0A 16 C6 F9 | 	decod	arg03, #10
11c1c     43 00 00 FF 
11c20     B0 E4 85 F1 | 	sub	objptr, ##34480
11c24     80 3C B0 FD | 	call	#_psram_spin2_write
11c28     0B 00 00 FF 
11c2c     C0 E4 85 F1 | 	sub	objptr, ##5824
11c30     14 2D 02 F1 | 	add	local08, local06
11c34     02 00 00 FF 
11c38     00 28 0E F2 | 	cmp	local06, ##1024 wz
11c3c     E0 03 00 AF 
11c40     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
11c44     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1443
11c48     2D 00 00 FF 
11c4c     C0 E5 05 F1 | 	add	objptr, ##23488
11c50     F2 12 02 FB | 	rdlong	arg01, objptr
11c54     03 12 62 FD | 	cogstop	arg01
11c58     04 E4 05 F1 | 	add	objptr, #4
11c5c     F2 12 02 FB | 	rdlong	arg01, objptr
11c60     03 12 62 FD | 	cogstop	arg01
11c64     04 E4 05 F1 | 	add	objptr, #4
11c68     F2 12 02 FB | 	rdlong	arg01, objptr
11c6c     03 12 62 FD | 	cogstop	arg01
11c70     22 00 00 FF 
11c74     E0 E5 05 F1 | 	add	objptr, ##17888
11c78     F2 12 02 FB | 	rdlong	arg01, objptr
11c7c     03 12 62 FD | 	cogstop	arg01
11c80     10 00 00 FF 
11c84     9C EA 05 F1 | 	add	ptr__dat__, ##8348
11c88     F5 14 02 F6 | 	mov	arg02, ptr__dat__
11c8c     10 00 00 FF 
11c90     9C EA 85 F1 | 	sub	ptr__dat__, ##8348
11c94     22 00 00 FF 
11c98     D8 E5 85 F1 | 	sub	objptr, ##17880
11c9c     1E 2C 06 F6 | 	mov	local08, #30
11ca0     28 E4 61 FD | 	setq	objptr
11ca4     0A 2D F2 FC | 	coginit	local08, arg02 wc
11ca8     01 2C 66 C6 |  if_b	neg	local08, #1
11cac     24 00 00 FF 
11cb0     E8 E4 05 F1 | 	add	objptr, ##18664
11cb4     F2 2C 62 FC | 	wrlong	local08, objptr
11cb8     52 00 00 FF 
11cbc     B8 E4 85 F1 | 	sub	objptr, ##42168
11cc0     00 12 06 F6 | 	mov	arg01, #0
11cc4     01 12 62 FD | 	cogid	arg01
11cc8     03 12 62 FD | 	cogstop	arg01
11ccc                 | LR__1444
11ccc                 | LR__1445
11ccc     A7 F0 03 F6 | 	mov	ptra, fp
11cd0     B2 00 A0 FD | 	call	#popregs_
11cd4                 | _do_brun_ret
11cd4     2D 00 64 FD | 	ret
11cd8                 | 
11cd8                 | ' 
11cd8                 | ' 
11cd8                 | ' sub do_mouse
11cd8                 | _do_mouse
11cd8     34 6E BF FD | 	call	#_pop
11cdc     00 FA 4D F2 | 	cmps	result1, #0 wz
11ce0                 | ' 
11ce0                 | ' t1=pop()
11ce0                 | ' 
11ce0                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
11ce0     14 00 90 5D |  if_ne	jmp	#LR__1450
11ce4     10 12 06 F6 | 	mov	arg01, #16
11ce8     00 14 06 F6 | 	mov	arg02, #0
11cec     00 16 06 F6 | 	mov	arg03, #0
11cf0     6C 26 B0 FD | 	call	#_hg010b_spin2_setspritesize
11cf4     10 00 90 FD | 	jmp	#LR__1451
11cf8                 | LR__1450
11cf8     10 12 06 F6 | 	mov	arg01, #16
11cfc     20 14 06 F6 | 	mov	arg02, #32
11d00     20 16 06 F6 | 	mov	arg03, #32
11d04     58 26 B0 FD | 	call	#_hg010b_spin2_setspritesize
11d08                 | LR__1451
11d08                 | _do_mouse_ret
11d08     2D 00 64 FD | 	ret
11d0c                 | 
11d0c                 | ' 
11d0c                 | ' sub do_cursor
11d0c                 | _do_cursor
11d0c     00 6E BF FD | 	call	#_pop
11d10     00 FA 4D F2 | 	cmps	result1, #0 wz
11d14                 | ' 
11d14                 | ' t1=pop()
11d14                 | ' 
11d14                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
11d14     14 00 90 5D |  if_ne	jmp	#LR__1460
11d18     11 12 06 F6 | 	mov	arg01, #17
11d1c     00 14 06 F6 | 	mov	arg02, #0
11d20     00 16 06 F6 | 	mov	arg03, #0
11d24     38 26 B0 FD | 	call	#_hg010b_spin2_setspritesize
11d28     10 00 90 FD | 	jmp	#LR__1461
11d2c                 | LR__1460
11d2c     11 12 06 F6 | 	mov	arg01, #17
11d30     08 14 06 F6 | 	mov	arg02, #8
11d34     10 16 06 F6 | 	mov	arg03, #16
11d38     24 26 B0 FD | 	call	#_hg010b_spin2_setspritesize
11d3c                 | LR__1461
11d3c                 | _do_cursor_ret
11d3c     2D 00 64 FD | 	ret
11d40                 | 
11d40                 | ' 
11d40                 | ' 
11d40                 | ' sub do_click
11d40                 | _do_click
11d40     CC 6D BF FD | 	call	#_pop
11d44     00 FA 4D F2 | 	cmps	result1, #0 wz
11d48                 | ' 
11d48                 | ' t1=pop()
11d48                 | ' 
11d48                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
11d48     50 00 00 AF 
11d4c     A4 E5 05 A1 |  if_e	add	objptr, ##41380
11d50     F2 00 68 AC |  if_e	wrlong	#0, objptr
11d54     50 00 00 FF 
11d58     A4 E5 C5 F3 | 	sumz	objptr, ##41380
11d5c     F2 02 68 5C |  if_ne	wrlong	#1, objptr
11d60     50 00 00 5F 
11d64     A4 E5 85 51 |  if_ne	sub	objptr, ##41380
11d68                 | _do_click_ret
11d68     2D 00 64 FD | 	ret
11d6c                 | 
11d6c                 | ' 
11d6c                 | ' 
11d6c                 | ' sub do_beep
11d6c                 | _do_beep
11d6c     02 4A 05 F6 | 	mov	COUNT_, #2
11d70     A8 00 A0 FD | 	call	#pushregs_
11d74     20 F0 07 F1 | 	add	ptra, #32
11d78     94 6D BF FD | 	call	#_pop
11d7c     FD 1E 02 F6 | 	mov	local01, result1
11d80     FE 1C 02 F6 | 	mov	arg06, result2
11d84     FF 20 02 F6 | 	mov	local02, result3
11d88     0C 4E 05 F1 | 	add	fp, #12
11d8c     A7 1E 62 FC | 	wrlong	local01, fp
11d90     04 4E 05 F1 | 	add	fp, #4
11d94     A7 1C 62 FC | 	wrlong	arg06, fp
11d98     04 4E 05 F1 | 	add	fp, #4
11d9c     A7 20 62 FC | 	wrlong	local02, fp
11da0     14 4E 85 F1 | 	sub	fp, #20
11da4     68 6D BF FD | 	call	#_pop
11da8     A7 FA 61 FC | 	wrlong	result1, fp
11dac     04 4E 05 F1 | 	add	fp, #4
11db0     A7 FC 61 FC | 	wrlong	result2, fp
11db4     04 4E 05 F1 | 	add	fp, #4
11db8     A7 FE 61 FC | 	wrlong	result3, fp
11dbc                 | ' 
11dbc                 | ' 
11dbc                 | ' 
11dbc                 | ' t2=pop()
11dbc                 | ' t1=pop()
11dbc                 | ' 
11dbc                 | ' 
11dbc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
11dbc     08 4E 85 F1 | 	sub	fp, #8
11dc0     1C FE 0D F2 | 	cmp	result3, #28 wz
11dc4     08 4E 05 51 |  if_ne	add	fp, #8
11dc8     A7 20 02 5B |  if_ne	rdlong	local02, fp
11dcc     08 4E 85 51 |  if_ne	sub	fp, #8
11dd0     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
11dd4     A7 1E 02 AB |  if_e	rdlong	local01, fp
11dd8     18 4E 05 A1 |  if_e	add	fp, #24
11ddc     A7 1E 62 AC |  if_e	wrlong	local01, fp
11de0     18 4E 85 A1 |  if_e	sub	fp, #24
11de4     14 00 90 AD |  if_e	jmp	#LR__1470
11de8     A7 12 02 F6 | 	mov	arg01, fp
11dec     58 CD BF FD | 	call	#_converttoint
11df0     18 4E 05 F1 | 	add	fp, #24
11df4     A7 FA 61 FC | 	wrlong	result1, fp
11df8     18 4E 85 F1 | 	sub	fp, #24
11dfc                 | LR__1470
11dfc     1C 4E 05 F1 | 	add	fp, #28
11e00     A7 FE 48 FC | 	wrbyte	#127, fp
11e04     01 4E 05 F1 | 	add	fp, #1
11e08     A7 00 49 FC | 	wrbyte	#128, fp
11e0c     01 4E 85 F1 | 	sub	fp, #1
11e10     A7 14 02 F6 | 	mov	arg02, fp
11e14     04 4E 85 F1 | 	sub	fp, #4
11e18     A7 16 02 FB | 	rdlong	arg03, fp
11e1c     18 4E 85 F1 | 	sub	fp, #24
11e20     01 16 66 F0 | 	shl	arg03, #1
11e24     07 12 06 F6 | 	mov	arg01, #7
11e28     0E 18 C6 F9 | 	decod	arg04, #14
11e2c     02 1A 06 F6 | 	mov	arg05, #2
11e30     00 1C 06 F6 | 	mov	arg06, #0
11e34     0B 00 00 FF 
11e38     C0 E4 05 F1 | 	add	objptr, ##5824
11e3c     20 41 B0 FD | 	call	#_Audio093b_8_sc_spin2_play8
11e40     0B 00 00 FF 
11e44     C0 E4 85 F1 | 	sub	objptr, ##5824
11e48     0C 4E 05 F1 | 	add	fp, #12
11e4c     A7 12 02 F6 | 	mov	arg01, fp
11e50     0C 4E 85 F1 | 	sub	fp, #12
11e54     50 6D BF FD | 	call	#_push
11e58     FC F6 BF FD | 	call	#_do_waitms
11e5c     07 12 06 F6 | 	mov	arg01, #7
11e60     0B 00 00 FF 
11e64     C0 E4 05 F1 | 	add	objptr, ##5824
11e68     A8 41 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
11e6c     0B 00 00 FF 
11e70     C0 E4 85 F1 | 	sub	objptr, ##5824
11e74     A7 F0 03 F6 | 	mov	ptra, fp
11e78     B2 00 A0 FD | 	call	#popregs_
11e7c                 | _do_beep_ret
11e7c     2D 00 64 FD | 	ret
11e80                 | 
11e80                 | ' 
11e80                 | ' sub do_no_command
11e80                 | _do_no_command
11e80     17 12 06 F6 | 	mov	arg01, #23
11e84     50 0F B0 FD | 	call	#_printerror
11e88                 | _do_no_command_ret
11e88     2D 00 64 FD | 	ret
11e8c                 | 
11e8c                 | ' 
11e8c                 | ' sub do_negative
11e8c                 | _do_negative
11e8c     02 4A 05 F6 | 	mov	COUNT_, #2
11e90     A8 00 A0 FD | 	call	#pushregs_
11e94     0C F0 07 F1 | 	add	ptra, #12
11e98     74 6C BF FD | 	call	#_pop
11e9c     FF 1E 02 F6 | 	mov	local01, result3
11ea0     A7 FA 61 FC | 	wrlong	result1, fp
11ea4     04 4E 05 F1 | 	add	fp, #4
11ea8     A7 FC 61 FC | 	wrlong	result2, fp
11eac     04 4E 05 F1 | 	add	fp, #4
11eb0     A7 1E 62 FC | 	wrlong	local01, fp
11eb4                 | ' t1=pop()
11eb4                 | ' if t1.result_type=result_int then 
11eb4     08 4E 85 F1 | 	sub	fp, #8
11eb8     1C 1E 0E F2 | 	cmp	local01, #28 wz
11ebc     A7 20 02 AB |  if_e	rdlong	local02, fp
11ec0     10 1F 62 A6 |  if_e	neg	local01, local02
11ec4     A7 1E 62 AC |  if_e	wrlong	local01, fp
11ec8     5C 00 90 AD |  if_e	jmp	#LR__1482
11ecc     08 4E 05 F1 | 	add	fp, #8
11ed0     A7 1E 02 FB | 	rdlong	local01, fp
11ed4     08 4E 85 F1 | 	sub	fp, #8
11ed8     1D 1E 0E F2 | 	cmp	local01, #29 wz
11edc     1C 00 90 5D |  if_ne	jmp	#LR__1480
11ee0     A7 20 02 FB | 	rdlong	local02, fp
11ee4     10 1F 62 F6 | 	neg	local01, local02
11ee8     A7 1E 62 FC | 	wrlong	local01, fp
11eec     08 4E 05 F1 | 	add	fp, #8
11ef0     A7 38 68 FC | 	wrlong	#28, fp
11ef4     08 4E 85 F1 | 	sub	fp, #8
11ef8     2C 00 90 FD | 	jmp	#LR__1481
11efc                 | LR__1480
11efc     08 4E 05 F1 | 	add	fp, #8
11f00     A7 1E 02 FB | 	rdlong	local01, fp
11f04     08 4E 85 F1 | 	sub	fp, #8
11f08     1E 1E 0E F2 | 	cmp	local01, #30 wz
11f0c     A7 FA 01 AB |  if_e	rdlong	result1, fp
11f10     1F FA E5 A4 |  if_e	bitnot	result1, #31
11f14     A7 FA 61 AC |  if_e	wrlong	result1, fp
11f18     08 4E 05 51 |  if_ne	add	fp, #8
11f1c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
11f20     08 4E 85 51 |  if_ne	sub	fp, #8
11f24     A7 50 68 5C |  if_ne	wrlong	#40, fp
11f28                 | LR__1481
11f28                 | LR__1482
11f28     A7 12 02 F6 | 	mov	arg01, fp
11f2c     78 6C BF FD | 	call	#_push
11f30     A7 F0 03 F6 | 	mov	ptra, fp
11f34     B2 00 A0 FD | 	call	#popregs_
11f38                 | _do_negative_ret
11f38     2D 00 64 FD | 	ret
11f3c                 | 
11f3c                 | ' 
11f3c                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
11f3c                 | ' 
11f3c                 | ' ''----------------------------------------------------------------------------------------------------
11f3c                 | ' ''------------------ Initialization procedures -------------------------------------------------------
11f3c                 | ' ''----------------------------------------------------------------------------------------------------
11f3c                 | ' 
11f3c                 | ' ''--------------------------- Command function pointers
11f3c                 | ' 
11f3c                 | ' sub init_commands
11f3c                 | _init_commands
11f3c                 | ' 
11f3c                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
11f3c     00 00 06 F6 | 	mov	_var01, #0
11f40     97 16 48 FB | 	callpa	#(@LR__1491-@LR__1490)>>2,fcache_load_ptr_
11f44                 | LR__1490
11f44     00 FB 01 F6 | 	mov	result1, _var01
11f48     02 FA 65 F0 | 	shl	result1, #2
11f4c     3A 00 00 FF 
11f50     24 E4 05 F1 | 	add	objptr, ##29732
11f54     F2 FA 01 F1 | 	add	result1, objptr
11f58     3A 00 00 FF 
11f5c     24 E4 85 F1 | 	sub	objptr, ##29732
11f60     FD E4 61 FC | 	wrlong	objptr, result1
11f64     01 00 06 F1 | 	add	_var01, #1
11f68     00 01 56 F2 | 	cmps	_var01, #256 wc
11f6c     D4 FF 9F CD |  if_b	jmp	#LR__1490
11f70                 | LR__1491
11f70     F2 FA 01 F6 | 	mov	result1, objptr
11f74     14 FA 25 F4 | 	bith	result1, #20
11f78     3A 00 00 FF 
11f7c     28 E4 05 F1 | 	add	objptr, ##29736
11f80     F2 FA 61 FC | 	wrlong	result1, objptr
11f84     3A 00 00 FF 
11f88     28 E4 85 F1 | 	sub	objptr, ##29736
11f8c     F2 FA 01 F6 | 	mov	result1, objptr
11f90     15 FA 25 F4 | 	bith	result1, #21
11f94     3A 00 00 FF 
11f98     2C E4 05 F1 | 	add	objptr, ##29740
11f9c     F2 FA 61 FC | 	wrlong	result1, objptr
11fa0     3A 00 00 FF 
11fa4     2C E4 85 F1 | 	sub	objptr, ##29740
11fa8     F2 FA 01 F6 | 	mov	result1, objptr
11fac     34 FA 25 F4 | 	bith	result1, #52
11fb0     3A 00 00 FF 
11fb4     30 E4 05 F1 | 	add	objptr, ##29744
11fb8     F2 FA 61 FC | 	wrlong	result1, objptr
11fbc     3A 00 00 FF 
11fc0     30 E4 85 F1 | 	sub	objptr, ##29744
11fc4     F2 FA 01 F6 | 	mov	result1, objptr
11fc8     16 FA 25 F4 | 	bith	result1, #22
11fcc     3A 00 00 FF 
11fd0     38 E4 05 F1 | 	add	objptr, ##29752
11fd4     F2 FA 61 FC | 	wrlong	result1, objptr
11fd8     3A 00 00 FF 
11fdc     38 E4 85 F1 | 	sub	objptr, ##29752
11fe0     F2 FA 01 F6 | 	mov	result1, objptr
11fe4     00 28 00 FF 
11fe8     00 FA 45 F5 | 	or	result1, ##5242880
11fec     3A 00 00 FF 
11ff0     3C E4 05 F1 | 	add	objptr, ##29756
11ff4     F2 FA 61 FC | 	wrlong	result1, objptr
11ff8     3A 00 00 FF 
11ffc     3C E4 85 F1 | 	sub	objptr, ##29756
12000     F2 FA 01 F6 | 	mov	result1, objptr
12004     35 FA 25 F4 | 	bith	result1, #53
12008     3A 00 00 FF 
1200c     40 E4 05 F1 | 	add	objptr, ##29760
12010     F2 FA 61 FC | 	wrlong	result1, objptr
12014     3A 00 00 FF 
12018     40 E4 85 F1 | 	sub	objptr, ##29760
1201c     F2 FA 01 F6 | 	mov	result1, objptr
12020     54 FA 25 F4 | 	bith	result1, #84
12024     3A 00 00 FF 
12028     44 E4 05 F1 | 	add	objptr, ##29764
1202c     F2 FA 61 FC | 	wrlong	result1, objptr
12030     3A 00 00 FF 
12034     44 E4 85 F1 | 	sub	objptr, ##29764
12038     F2 FA 01 F6 | 	mov	result1, objptr
1203c     17 FA 25 F4 | 	bith	result1, #23
12040     3A 00 00 FF 
12044     48 E4 05 F1 | 	add	objptr, ##29768
12048     F2 FA 61 FC | 	wrlong	result1, objptr
1204c     3A 00 00 FF 
12050     48 E4 85 F1 | 	sub	objptr, ##29768
12054     F2 FA 01 F6 | 	mov	result1, objptr
12058     00 48 00 FF 
1205c     00 FA 45 F5 | 	or	result1, ##9437184
12060     3A 00 00 FF 
12064     4C E4 05 F1 | 	add	objptr, ##29772
12068     F2 FA 61 FC | 	wrlong	result1, objptr
1206c     3A 00 00 FF 
12070     4C E4 85 F1 | 	sub	objptr, ##29772
12074     F2 FA 01 F6 | 	mov	result1, objptr
12078     00 50 00 FF 
1207c     00 FA 45 F5 | 	or	result1, ##10485760
12080     3A 00 00 FF 
12084     50 E4 05 F1 | 	add	objptr, ##29776
12088     F2 FA 61 FC | 	wrlong	result1, objptr
1208c     3A 00 00 FF 
12090     50 E4 85 F1 | 	sub	objptr, ##29776
12094     F2 FA 01 F6 | 	mov	result1, objptr
12098     00 58 00 FF 
1209c     00 FA 45 F5 | 	or	result1, ##11534336
120a0     3A 00 00 FF 
120a4     54 E4 05 F1 | 	add	objptr, ##29780
120a8     F2 FA 61 FC | 	wrlong	result1, objptr
120ac     3A 00 00 FF 
120b0     54 E4 85 F1 | 	sub	objptr, ##29780
120b4     F2 FA 01 F6 | 	mov	result1, objptr
120b8     36 FA 25 F4 | 	bith	result1, #54
120bc     3A 00 00 FF 
120c0     68 E4 05 F1 | 	add	objptr, ##29800
120c4     F2 FA 61 FC | 	wrlong	result1, objptr
120c8     3A 00 00 FF 
120cc     68 E4 85 F1 | 	sub	objptr, ##29800
120d0     F2 FA 01 F6 | 	mov	result1, objptr
120d4     00 68 00 FF 
120d8     00 FA 45 F5 | 	or	result1, ##13631488
120dc     3A 00 00 FF 
120e0     98 E4 05 F1 | 	add	objptr, ##29848
120e4     F2 FA 61 FC | 	wrlong	result1, objptr
120e8     3A 00 00 FF 
120ec     98 E4 85 F1 | 	sub	objptr, ##29848
120f0     F2 FA 01 F6 | 	mov	result1, objptr
120f4     00 68 00 FF 
120f8     00 FA 45 F5 | 	or	result1, ##13631488
120fc     3A 00 00 FF 
12100     94 E4 05 F1 | 	add	objptr, ##29844
12104     F2 FA 61 FC | 	wrlong	result1, objptr
12108     3A 00 00 FF 
1210c     94 E4 85 F1 | 	sub	objptr, ##29844
12110     F2 FA 01 F6 | 	mov	result1, objptr
12114     00 68 00 FF 
12118     00 FA 45 F5 | 	or	result1, ##13631488
1211c     3A 00 00 FF 
12120     9C E4 05 F1 | 	add	objptr, ##29852
12124     F2 FA 61 FC | 	wrlong	result1, objptr
12128     3A 00 00 FF 
1212c     9C E4 85 F1 | 	sub	objptr, ##29852
12130     F2 FA 01 F6 | 	mov	result1, objptr
12134     00 68 00 FF 
12138     00 FA 45 F5 | 	or	result1, ##13631488
1213c     3A 00 00 FF 
12140     A0 E4 05 F1 | 	add	objptr, ##29856
12144     F2 FA 61 FC | 	wrlong	result1, objptr
12148     3A 00 00 FF 
1214c     A0 E4 85 F1 | 	sub	objptr, ##29856
12150     F2 FA 01 F6 | 	mov	result1, objptr
12154     00 68 00 FF 
12158     00 FA 45 F5 | 	or	result1, ##13631488
1215c     3A 00 00 FF 
12160     D0 E4 05 F1 | 	add	objptr, ##29904
12164     F2 FA 61 FC | 	wrlong	result1, objptr
12168     3A 00 00 FF 
1216c     D0 E4 85 F1 | 	sub	objptr, ##29904
12170     F2 FA 01 F6 | 	mov	result1, objptr
12174     55 FA 25 F4 | 	bith	result1, #85
12178     3A 00 00 FF 
1217c     80 E4 05 F1 | 	add	objptr, ##29824
12180     F2 FA 61 FC | 	wrlong	result1, objptr
12184     3A 00 00 FF 
12188     80 E4 85 F1 | 	sub	objptr, ##29824
1218c     F2 FA 01 F6 | 	mov	result1, objptr
12190     00 68 00 FF 
12194     00 FA 45 F5 | 	or	result1, ##13631488
12198     3A 00 00 FF 
1219c     A4 E4 05 F1 | 	add	objptr, ##29860
121a0     F2 FA 61 FC | 	wrlong	result1, objptr
121a4     3A 00 00 FF 
121a8     A4 E4 85 F1 | 	sub	objptr, ##29860
121ac     F2 FA 01 F6 | 	mov	result1, objptr
121b0     00 68 00 FF 
121b4     00 FA 45 F5 | 	or	result1, ##13631488
121b8     3A 00 00 FF 
121bc     A8 E4 05 F1 | 	add	objptr, ##29864
121c0     F2 FA 61 FC | 	wrlong	result1, objptr
121c4     3A 00 00 FF 
121c8     A8 E4 85 F1 | 	sub	objptr, ##29864
121cc     F2 FA 01 F6 | 	mov	result1, objptr
121d0     00 68 00 FF 
121d4     00 FA 45 F5 | 	or	result1, ##13631488
121d8     3A 00 00 FF 
121dc     AC E4 05 F1 | 	add	objptr, ##29868
121e0     F2 FA 61 FC | 	wrlong	result1, objptr
121e4     3A 00 00 FF 
121e8     AC E4 85 F1 | 	sub	objptr, ##29868
121ec     F2 FA 01 F6 | 	mov	result1, objptr
121f0     74 FA 25 F4 | 	bith	result1, #116
121f4     3A 00 00 FF 
121f8     24 E5 05 F1 | 	add	objptr, ##29988
121fc     F2 FA 61 FC | 	wrlong	result1, objptr
12200     3A 00 00 FF 
12204     24 E5 85 F1 | 	sub	objptr, ##29988
12208     F2 FA 01 F6 | 	mov	result1, objptr
1220c     18 FA 25 F4 | 	bith	result1, #24
12210     3A 00 00 FF 
12214     28 E5 05 F1 | 	add	objptr, ##29992
12218     F2 FA 61 FC | 	wrlong	result1, objptr
1221c     3A 00 00 FF 
12220     28 E5 85 F1 | 	sub	objptr, ##29992
12224     F2 FA 01 F6 | 	mov	result1, objptr
12228     00 88 00 FF 
1222c     00 FA 45 F5 | 	or	result1, ##17825792
12230     3A 00 00 FF 
12234     2C E5 05 F1 | 	add	objptr, ##29996
12238     F2 FA 61 FC | 	wrlong	result1, objptr
1223c     3A 00 00 FF 
12240     2C E5 85 F1 | 	sub	objptr, ##29996
12244     F2 FA 01 F6 | 	mov	result1, objptr
12248     00 90 00 FF 
1224c     00 FA 45 F5 | 	or	result1, ##18874368
12250     3A 00 00 FF 
12254     30 E5 05 F1 | 	add	objptr, ##30000
12258     F2 FA 61 FC | 	wrlong	result1, objptr
1225c     3A 00 00 FF 
12260     30 E5 85 F1 | 	sub	objptr, ##30000
12264     F2 FA 01 F6 | 	mov	result1, objptr
12268     00 98 00 FF 
1226c     00 FA 45 F5 | 	or	result1, ##19922944
12270     3A 00 00 FF 
12274     34 E5 05 F1 | 	add	objptr, ##30004
12278     F2 FA 61 FC | 	wrlong	result1, objptr
1227c     3A 00 00 FF 
12280     34 E5 85 F1 | 	sub	objptr, ##30004
12284     F2 FA 01 F6 | 	mov	result1, objptr
12288     00 A0 00 FF 
1228c     00 FA 45 F5 | 	or	result1, ##20971520
12290     3A 00 00 FF 
12294     38 E5 05 F1 | 	add	objptr, ##30008
12298     F2 FA 61 FC | 	wrlong	result1, objptr
1229c     3A 00 00 FF 
122a0     38 E5 85 F1 | 	sub	objptr, ##30008
122a4     F2 FA 01 F6 | 	mov	result1, objptr
122a8     00 A8 00 FF 
122ac     00 FA 45 F5 | 	or	result1, ##22020096
122b0     3A 00 00 FF 
122b4     3C E5 05 F1 | 	add	objptr, ##30012
122b8     F2 FA 61 FC | 	wrlong	result1, objptr
122bc     3A 00 00 FF 
122c0     3C E5 85 F1 | 	sub	objptr, ##30012
122c4     F2 FA 01 F6 | 	mov	result1, objptr
122c8     00 B0 00 FF 
122cc     00 FA 45 F5 | 	or	result1, ##23068672
122d0     3A 00 00 FF 
122d4     40 E5 05 F1 | 	add	objptr, ##30016
122d8     F2 FA 61 FC | 	wrlong	result1, objptr
122dc     3A 00 00 FF 
122e0     40 E5 85 F1 | 	sub	objptr, ##30016
122e4     F2 FA 01 F6 | 	mov	result1, objptr
122e8     00 B8 00 FF 
122ec     00 FA 45 F5 | 	or	result1, ##24117248
122f0     3A 00 00 FF 
122f4     44 E5 05 F1 | 	add	objptr, ##30020
122f8     F2 FA 61 FC | 	wrlong	result1, objptr
122fc     3A 00 00 FF 
12300     44 E5 85 F1 | 	sub	objptr, ##30020
12304     F2 FA 01 F6 | 	mov	result1, objptr
12308     37 FA 25 F4 | 	bith	result1, #55
1230c     3A 00 00 FF 
12310     48 E5 05 F1 | 	add	objptr, ##30024
12314     F2 FA 61 FC | 	wrlong	result1, objptr
12318     3A 00 00 FF 
1231c     48 E5 85 F1 | 	sub	objptr, ##30024
12320     F2 FA 01 F6 | 	mov	result1, objptr
12324     00 C8 00 FF 
12328     00 FA 45 F5 | 	or	result1, ##26214400
1232c     3A 00 00 FF 
12330     4C E5 05 F1 | 	add	objptr, ##30028
12334     F2 FA 61 FC | 	wrlong	result1, objptr
12338     3A 00 00 FF 
1233c     4C E5 85 F1 | 	sub	objptr, ##30028
12340     F2 FA 01 F6 | 	mov	result1, objptr
12344     00 D0 00 FF 
12348     00 FA 45 F5 | 	or	result1, ##27262976
1234c     3A 00 00 FF 
12350     50 E5 05 F1 | 	add	objptr, ##30032
12354     F2 FA 61 FC | 	wrlong	result1, objptr
12358     3A 00 00 FF 
1235c     50 E5 85 F1 | 	sub	objptr, ##30032
12360     F2 FA 01 F6 | 	mov	result1, objptr
12364     00 D8 00 FF 
12368     00 FA 45 F5 | 	or	result1, ##28311552
1236c     3A 00 00 FF 
12370     54 E5 05 F1 | 	add	objptr, ##30036
12374     F2 FA 61 FC | 	wrlong	result1, objptr
12378     3A 00 00 FF 
1237c     54 E5 85 F1 | 	sub	objptr, ##30036
12380     F2 FA 01 F6 | 	mov	result1, objptr
12384     56 FA 25 F4 | 	bith	result1, #86
12388     3A 00 00 FF 
1238c     58 E5 05 F1 | 	add	objptr, ##30040
12390     F2 FA 61 FC | 	wrlong	result1, objptr
12394     3A 00 00 FF 
12398     58 E5 85 F1 | 	sub	objptr, ##30040
1239c     F2 FA 01 F6 | 	mov	result1, objptr
123a0     00 E8 00 FF 
123a4     00 FA 45 F5 | 	or	result1, ##30408704
123a8     3C 00 00 FF 
123ac     20 E4 05 F1 | 	add	objptr, ##30752
123b0     F2 FA 61 FC | 	wrlong	result1, objptr
123b4     3C 00 00 FF 
123b8     20 E4 85 F1 | 	sub	objptr, ##30752
123bc     F2 FA 01 F6 | 	mov	result1, objptr
123c0     75 FA 25 F4 | 	bith	result1, #117
123c4     3A 00 00 FF 
123c8     5C E5 05 F1 | 	add	objptr, ##30044
123cc     F2 FA 61 FC | 	wrlong	result1, objptr
123d0     3A 00 00 FF 
123d4     5C E5 85 F1 | 	sub	objptr, ##30044
123d8     F2 FA 01 F6 | 	mov	result1, objptr
123dc     94 FA 25 F4 | 	bith	result1, #148
123e0     3A 00 00 FF 
123e4     70 E5 05 F1 | 	add	objptr, ##30064
123e8     F2 FA 61 FC | 	wrlong	result1, objptr
123ec     3A 00 00 FF 
123f0     70 E5 85 F1 | 	sub	objptr, ##30064
123f4     F2 FA 01 F6 | 	mov	result1, objptr
123f8     19 FA 25 F4 | 	bith	result1, #25
123fc     3A 00 00 FF 
12400     60 E5 05 F1 | 	add	objptr, ##30048
12404     F2 FA 61 FC | 	wrlong	result1, objptr
12408     3A 00 00 FF 
1240c     60 E5 85 F1 | 	sub	objptr, ##30048
12410     F2 FA 01 F6 | 	mov	result1, objptr
12414     00 08 01 FF 
12418     00 FA 45 F5 | 	or	result1, ##34603008
1241c     3A 00 00 FF 
12420     7C E4 05 F1 | 	add	objptr, ##29820
12424     F2 FA 61 FC | 	wrlong	result1, objptr
12428     3A 00 00 FF 
1242c     7C E4 85 F1 | 	sub	objptr, ##29820
12430     F2 FA 01 F6 | 	mov	result1, objptr
12434     00 10 01 FF 
12438     00 FA 45 F5 | 	or	result1, ##35651584
1243c     3A 00 00 FF 
12440     64 E5 05 F1 | 	add	objptr, ##30052
12444     F2 FA 61 FC | 	wrlong	result1, objptr
12448     3A 00 00 FF 
1244c     64 E5 85 F1 | 	sub	objptr, ##30052
12450     F2 FA 01 F6 | 	mov	result1, objptr
12454     00 18 01 FF 
12458     00 FA 45 F5 | 	or	result1, ##36700160
1245c     3A 00 00 FF 
12460     68 E5 05 F1 | 	add	objptr, ##30056
12464     F2 FA 61 FC | 	wrlong	result1, objptr
12468     3A 00 00 FF 
1246c     68 E5 85 F1 | 	sub	objptr, ##30056
12470     F2 FA 01 F6 | 	mov	result1, objptr
12474     00 20 01 FF 
12478     00 FA 45 F5 | 	or	result1, ##37748736
1247c     3A 00 00 FF 
12480     6C E5 05 F1 | 	add	objptr, ##30060
12484     F2 FA 61 FC | 	wrlong	result1, objptr
12488     3A 00 00 FF 
1248c     6C E5 85 F1 | 	sub	objptr, ##30060
12490     F2 FA 01 F6 | 	mov	result1, objptr
12494     00 28 01 FF 
12498     00 FA 45 F5 | 	or	result1, ##38797312
1249c     3A 00 00 FF 
124a0     78 E5 05 F1 | 	add	objptr, ##30072
124a4     F2 FA 61 FC | 	wrlong	result1, objptr
124a8     3A 00 00 FF 
124ac     78 E5 85 F1 | 	sub	objptr, ##30072
124b0     F2 FA 01 F6 | 	mov	result1, objptr
124b4     00 30 01 FF 
124b8     00 FA 45 F5 | 	or	result1, ##39845888
124bc     3A 00 00 FF 
124c0     7C E5 05 F1 | 	add	objptr, ##30076
124c4     F2 FA 61 FC | 	wrlong	result1, objptr
124c8     3A 00 00 FF 
124cc     7C E5 85 F1 | 	sub	objptr, ##30076
124d0     F2 FA 01 F6 | 	mov	result1, objptr
124d4     00 38 01 FF 
124d8     00 FA 45 F5 | 	or	result1, ##40894464
124dc     3A 00 00 FF 
124e0     80 E5 05 F1 | 	add	objptr, ##30080
124e4     F2 FA 61 FC | 	wrlong	result1, objptr
124e8     3A 00 00 FF 
124ec     80 E5 85 F1 | 	sub	objptr, ##30080
124f0     F2 FA 01 F6 | 	mov	result1, objptr
124f4     00 40 01 FF 
124f8     00 FA 45 F5 | 	or	result1, ##41943040
124fc     3A 00 00 FF 
12500     84 E5 05 F1 | 	add	objptr, ##30084
12504     F2 FA 61 FC | 	wrlong	result1, objptr
12508     3A 00 00 FF 
1250c     84 E5 85 F1 | 	sub	objptr, ##30084
12510     F2 FA 01 F6 | 	mov	result1, objptr
12514     00 48 01 FF 
12518     00 FA 45 F5 | 	or	result1, ##42991616
1251c     3A 00 00 FF 
12520     8C E5 05 F1 | 	add	objptr, ##30092
12524     F2 FA 61 FC | 	wrlong	result1, objptr
12528     3A 00 00 FF 
1252c     8C E5 85 F1 | 	sub	objptr, ##30092
12530     F2 FA 01 F6 | 	mov	result1, objptr
12534     00 50 01 FF 
12538     00 FA 45 F5 | 	or	result1, ##44040192
1253c     3A 00 00 FF 
12540     90 E5 05 F1 | 	add	objptr, ##30096
12544     F2 FA 61 FC | 	wrlong	result1, objptr
12548     3A 00 00 FF 
1254c     90 E5 85 F1 | 	sub	objptr, ##30096
12550     F2 FA 01 F6 | 	mov	result1, objptr
12554     00 58 01 FF 
12558     00 FA 45 F5 | 	or	result1, ##45088768
1255c     3A 00 00 FF 
12560     90 E4 05 F1 | 	add	objptr, ##29840
12564     F2 FA 61 FC | 	wrlong	result1, objptr
12568     3A 00 00 FF 
1256c     90 E4 85 F1 | 	sub	objptr, ##29840
12570     F2 FA 01 F6 | 	mov	result1, objptr
12574     00 60 01 FF 
12578     00 FA 45 F5 | 	or	result1, ##46137344
1257c     3A 00 00 FF 
12580     C0 E4 05 F1 | 	add	objptr, ##29888
12584     F2 FA 61 FC | 	wrlong	result1, objptr
12588     3A 00 00 FF 
1258c     C0 E4 85 F1 | 	sub	objptr, ##29888
12590     F2 FA 01 F6 | 	mov	result1, objptr
12594     00 68 01 FF 
12598     00 FA 45 F5 | 	or	result1, ##47185920
1259c     3A 00 00 FF 
125a0     BC E4 05 F1 | 	add	objptr, ##29884
125a4     F2 FA 61 FC | 	wrlong	result1, objptr
125a8     3A 00 00 FF 
125ac     BC E4 85 F1 | 	sub	objptr, ##29884
125b0     F2 FA 01 F6 | 	mov	result1, objptr
125b4     00 70 01 FF 
125b8     00 FA 45 F5 | 	or	result1, ##48234496
125bc     3A 00 00 FF 
125c0     60 E4 05 F1 | 	add	objptr, ##29792
125c4     F2 FA 61 FC | 	wrlong	result1, objptr
125c8     3A 00 00 FF 
125cc     60 E4 85 F1 | 	sub	objptr, ##29792
125d0     F2 FA 01 F6 | 	mov	result1, objptr
125d4     00 78 01 FF 
125d8     00 FA 45 F5 | 	or	result1, ##49283072
125dc     3A 00 00 FF 
125e0     64 E4 05 F1 | 	add	objptr, ##29796
125e4     F2 FA 61 FC | 	wrlong	result1, objptr
125e8     3A 00 00 FF 
125ec     64 E4 85 F1 | 	sub	objptr, ##29796
125f0     F2 FA 01 F6 | 	mov	result1, objptr
125f4     38 FA 25 F4 | 	bith	result1, #56
125f8     3A 00 00 FF 
125fc     CC E4 05 F1 | 	add	objptr, ##29900
12600     F2 FA 61 FC | 	wrlong	result1, objptr
12604     3A 00 00 FF 
12608     CC E4 85 F1 | 	sub	objptr, ##29900
1260c     F2 FA 01 F6 | 	mov	result1, objptr
12610     00 88 01 FF 
12614     00 FA 45 F5 | 	or	result1, ##51380224
12618     3A 00 00 FF 
1261c     74 E5 05 F1 | 	add	objptr, ##30068
12620     F2 FA 61 FC | 	wrlong	result1, objptr
12624     3A 00 00 FF 
12628     74 E5 85 F1 | 	sub	objptr, ##30068
1262c     F2 FA 01 F6 | 	mov	result1, objptr
12630     00 90 01 FF 
12634     00 FA 45 F5 | 	or	result1, ##52428800
12638     3A 00 00 FF 
1263c     88 E5 05 F1 | 	add	objptr, ##30088
12640     F2 FA 61 FC | 	wrlong	result1, objptr
12644     3A 00 00 FF 
12648     88 E5 85 F1 | 	sub	objptr, ##30088
1264c     F2 FA 01 F6 | 	mov	result1, objptr
12650     00 98 01 FF 
12654     00 FA 45 F5 | 	or	result1, ##53477376
12658     3A 00 00 FF 
1265c     94 E5 05 F1 | 	add	objptr, ##30100
12660     F2 FA 61 FC | 	wrlong	result1, objptr
12664     3A 00 00 FF 
12668     94 E5 85 F1 | 	sub	objptr, ##30100
1266c     F2 FA 01 F6 | 	mov	result1, objptr
12670     00 A0 01 FF 
12674     00 FA 45 F5 | 	or	result1, ##54525952
12678     3A 00 00 FF 
1267c     98 E5 05 F1 | 	add	objptr, ##30104
12680     F2 FA 61 FC | 	wrlong	result1, objptr
12684     3A 00 00 FF 
12688     98 E5 85 F1 | 	sub	objptr, ##30104
1268c     F2 FA 01 F6 | 	mov	result1, objptr
12690     00 A8 01 FF 
12694     00 FA 45 F5 | 	or	result1, ##55574528
12698     3A 00 00 FF 
1269c     9C E5 05 F1 | 	add	objptr, ##30108
126a0     F2 FA 61 FC | 	wrlong	result1, objptr
126a4     3A 00 00 FF 
126a8     9C E5 85 F1 | 	sub	objptr, ##30108
126ac     F2 FA 01 F6 | 	mov	result1, objptr
126b0     00 B0 01 FF 
126b4     00 FA 45 F5 | 	or	result1, ##56623104
126b8     3A 00 00 FF 
126bc     A0 E5 05 F1 | 	add	objptr, ##30112
126c0     F2 FA 61 FC | 	wrlong	result1, objptr
126c4     3A 00 00 FF 
126c8     A0 E5 85 F1 | 	sub	objptr, ##30112
126cc     F2 FA 01 F6 | 	mov	result1, objptr
126d0     00 B8 01 FF 
126d4     00 FA 45 F5 | 	or	result1, ##57671680
126d8     3A 00 00 FF 
126dc     A4 E5 05 F1 | 	add	objptr, ##30116
126e0     F2 FA 61 FC | 	wrlong	result1, objptr
126e4     3A 00 00 FF 
126e8     A4 E5 85 F1 | 	sub	objptr, ##30116
126ec     F2 FA 01 F6 | 	mov	result1, objptr
126f0     57 FA 25 F4 | 	bith	result1, #87
126f4     3A 00 00 FF 
126f8     A8 E5 05 F1 | 	add	objptr, ##30120
126fc     F2 FA 61 FC | 	wrlong	result1, objptr
12700     3A 00 00 FF 
12704     A8 E5 85 F1 | 	sub	objptr, ##30120
12708     F2 FA 01 F6 | 	mov	result1, objptr
1270c     94 FA 25 F4 | 	bith	result1, #148
12710     3A 00 00 FF 
12714     70 E5 05 F1 | 	add	objptr, ##30064
12718     F2 FA 61 FC | 	wrlong	result1, objptr
1271c     3A 00 00 FF 
12720     70 E5 85 F1 | 	sub	objptr, ##30064
12724     F2 FA 01 F6 | 	mov	result1, objptr
12728     00 C8 01 FF 
1272c     00 FA 45 F5 | 	or	result1, ##59768832
12730     3A 00 00 FF 
12734     B0 E5 05 F1 | 	add	objptr, ##30128
12738     F2 FA 61 FC | 	wrlong	result1, objptr
1273c     3A 00 00 FF 
12740     B0 E5 85 F1 | 	sub	objptr, ##30128
12744     F2 FA 01 F6 | 	mov	result1, objptr
12748     00 D0 01 FF 
1274c     00 FA 45 F5 | 	or	result1, ##60817408
12750     3A 00 00 FF 
12754     AC E5 05 F1 | 	add	objptr, ##30124
12758     F2 FA 61 FC | 	wrlong	result1, objptr
1275c     3A 00 00 FF 
12760     AC E5 85 F1 | 	sub	objptr, ##30124
12764     F2 FA 01 F6 | 	mov	result1, objptr
12768     00 D8 01 FF 
1276c     00 FA 45 F5 | 	or	result1, ##61865984
12770     3A 00 00 FF 
12774     C4 E5 05 F1 | 	add	objptr, ##30148
12778     F2 FA 61 FC | 	wrlong	result1, objptr
1277c     3A 00 00 FF 
12780     C4 E5 85 F1 | 	sub	objptr, ##30148
12784     F2 FA 01 F6 | 	mov	result1, objptr
12788     76 FA 25 F4 | 	bith	result1, #118
1278c     3A 00 00 FF 
12790     C8 E5 05 F1 | 	add	objptr, ##30152
12794     F2 FA 61 FC | 	wrlong	result1, objptr
12798     3A 00 00 FF 
1279c     C8 E5 85 F1 | 	sub	objptr, ##30152
127a0     F2 FA 01 F6 | 	mov	result1, objptr
127a4     00 E8 01 FF 
127a8     00 FA 45 F5 | 	or	result1, ##63963136
127ac     3A 00 00 FF 
127b0     B4 E5 05 F1 | 	add	objptr, ##30132
127b4     F2 FA 61 FC | 	wrlong	result1, objptr
127b8     3A 00 00 FF 
127bc     B4 E5 85 F1 | 	sub	objptr, ##30132
127c0     F2 FA 01 F6 | 	mov	result1, objptr
127c4     95 FA 25 F4 | 	bith	result1, #149
127c8     3A 00 00 FF 
127cc     B8 E5 05 F1 | 	add	objptr, ##30136
127d0     F2 FA 61 FC | 	wrlong	result1, objptr
127d4     3A 00 00 FF 
127d8     B8 E5 85 F1 | 	sub	objptr, ##30136
127dc     F2 FA 01 F6 | 	mov	result1, objptr
127e0     B4 FA 25 F4 | 	bith	result1, #180
127e4     3A 00 00 FF 
127e8     BC E5 05 F1 | 	add	objptr, ##30140
127ec     F2 FA 61 FC | 	wrlong	result1, objptr
127f0     3A 00 00 FF 
127f4     BC E5 85 F1 | 	sub	objptr, ##30140
127f8     F2 FA 01 F6 | 	mov	result1, objptr
127fc     1A FA 25 F4 | 	bith	result1, #26
12800     3A 00 00 FF 
12804     C0 E5 05 F1 | 	add	objptr, ##30144
12808     F2 FA 61 FC | 	wrlong	result1, objptr
1280c     3A 00 00 FF 
12810     C0 E5 85 F1 | 	sub	objptr, ##30144
12814     F2 FA 01 F6 | 	mov	result1, objptr
12818     00 08 02 FF 
1281c     00 FA 45 F5 | 	or	result1, ##68157440
12820     3A 00 00 FF 
12824     D0 E5 05 F1 | 	add	objptr, ##30160
12828     F2 FA 61 FC | 	wrlong	result1, objptr
1282c     3A 00 00 FF 
12830     D0 E5 85 F1 | 	sub	objptr, ##30160
12834     F2 FA 01 F6 | 	mov	result1, objptr
12838     00 10 02 FF 
1283c     00 FA 45 F5 | 	or	result1, ##69206016
12840     3A 00 00 FF 
12844     CC E5 05 F1 | 	add	objptr, ##30156
12848     F2 FA 61 FC | 	wrlong	result1, objptr
1284c     3A 00 00 FF 
12850     CC E5 85 F1 | 	sub	objptr, ##30156
12854     F2 FA 01 F6 | 	mov	result1, objptr
12858     00 18 02 FF 
1285c     00 FA 45 F5 | 	or	result1, ##70254592
12860     3A 00 00 FF 
12864     DC E5 05 F1 | 	add	objptr, ##30172
12868     F2 FA 61 FC | 	wrlong	result1, objptr
1286c     3A 00 00 FF 
12870     DC E5 85 F1 | 	sub	objptr, ##30172
12874     F2 FA 01 F6 | 	mov	result1, objptr
12878     00 20 02 FF 
1287c     00 FA 45 F5 | 	or	result1, ##71303168
12880     3A 00 00 FF 
12884     D8 E5 05 F1 | 	add	objptr, ##30168
12888     F2 FA 61 FC | 	wrlong	result1, objptr
1288c     3A 00 00 FF 
12890     D8 E5 85 F1 | 	sub	objptr, ##30168
12894     F2 FA 01 F6 | 	mov	result1, objptr
12898     00 28 02 FF 
1289c     00 FA 45 F5 | 	or	result1, ##72351744
128a0     3A 00 00 FF 
128a4     D4 E5 05 F1 | 	add	objptr, ##30164
128a8     F2 FA 61 FC | 	wrlong	result1, objptr
128ac     3A 00 00 FF 
128b0     D4 E5 85 F1 | 	sub	objptr, ##30164
128b4     F2 FA 01 F6 | 	mov	result1, objptr
128b8     00 30 02 FF 
128bc     00 FA 45 F5 | 	or	result1, ##73400320
128c0     3A 00 00 FF 
128c4     E0 E5 05 F1 | 	add	objptr, ##30176
128c8     F2 FA 61 FC | 	wrlong	result1, objptr
128cc     3A 00 00 FF 
128d0     E0 E5 85 F1 | 	sub	objptr, ##30176
128d4     F2 FA 01 F6 | 	mov	result1, objptr
128d8     00 38 02 FF 
128dc     00 FA 45 F5 | 	or	result1, ##74448896
128e0     3A 00 00 FF 
128e4     E4 E5 05 F1 | 	add	objptr, ##30180
128e8     F2 FA 61 FC | 	wrlong	result1, objptr
128ec     3A 00 00 FF 
128f0     E4 E5 85 F1 | 	sub	objptr, ##30180
128f4     F2 FA 01 F6 | 	mov	result1, objptr
128f8     00 40 02 FF 
128fc     00 FA 45 F5 | 	or	result1, ##75497472
12900     3A 00 00 FF 
12904     78 E4 05 F1 | 	add	objptr, ##29816
12908     F2 FA 61 FC | 	wrlong	result1, objptr
1290c     3A 00 00 FF 
12910     78 E4 85 F1 | 	sub	objptr, ##29816
12914     F2 FA 01 F6 | 	mov	result1, objptr
12918     00 48 02 FF 
1291c     00 FA 45 F5 | 	or	result1, ##76546048
12920     3A 00 00 FF 
12924     FC E5 05 F1 | 	add	objptr, ##30204
12928     F2 FA 61 FC | 	wrlong	result1, objptr
1292c     3A 00 00 FF 
12930     FC E5 85 F1 | 	sub	objptr, ##30204
12934     F2 FA 01 F6 | 	mov	result1, objptr
12938     00 50 02 FF 
1293c     00 FA 45 F5 | 	or	result1, ##77594624
12940     3B 00 00 FF 
12944     0C E4 05 F1 | 	add	objptr, ##30220
12948     F2 FA 61 FC | 	wrlong	result1, objptr
1294c     3B 00 00 FF 
12950     0C E4 85 F1 | 	sub	objptr, ##30220
12954     F2 FA 01 F6 | 	mov	result1, objptr
12958     00 58 02 FF 
1295c     00 FA 45 F5 | 	or	result1, ##78643200
12960     3B 00 00 FF 
12964     10 E4 05 F1 | 	add	objptr, ##30224
12968     F2 FA 61 FC | 	wrlong	result1, objptr
1296c     3B 00 00 FF 
12970     10 E4 85 F1 | 	sub	objptr, ##30224
12974     F2 FA 01 F6 | 	mov	result1, objptr
12978     00 60 02 FF 
1297c     00 FA 45 F5 | 	or	result1, ##79691776
12980     3B 00 00 FF 
12984     08 E4 05 F1 | 	add	objptr, ##30216
12988     F2 FA 61 FC | 	wrlong	result1, objptr
1298c     3B 00 00 FF 
12990     08 E4 85 F1 | 	sub	objptr, ##30216
12994     F2 FA 01 F6 | 	mov	result1, objptr
12998     00 68 02 FF 
1299c     00 FA 45 F5 | 	or	result1, ##80740352
129a0     3B 00 00 FF 
129a4     00 E4 05 F1 | 	add	objptr, ##30208
129a8     F2 FA 61 FC | 	wrlong	result1, objptr
129ac     3B 00 00 FF 
129b0     00 E4 85 F1 | 	sub	objptr, ##30208
129b4     F2 FA 01 F6 | 	mov	result1, objptr
129b8     00 70 02 FF 
129bc     00 FA 45 F5 | 	or	result1, ##81788928
129c0     3B 00 00 FF 
129c4     04 E4 05 F1 | 	add	objptr, ##30212
129c8     F2 FA 61 FC | 	wrlong	result1, objptr
129cc     3B 00 00 FF 
129d0     04 E4 85 F1 | 	sub	objptr, ##30212
129d4     F2 FA 01 F6 | 	mov	result1, objptr
129d8     00 78 02 FF 
129dc     00 FA 45 F5 | 	or	result1, ##82837504
129e0     3B 00 00 FF 
129e4     14 E4 05 F1 | 	add	objptr, ##30228
129e8     F2 FA 61 FC | 	wrlong	result1, objptr
129ec     3B 00 00 FF 
129f0     14 E4 85 F1 | 	sub	objptr, ##30228
129f4     F2 FA 01 F6 | 	mov	result1, objptr
129f8     00 80 02 FF 
129fc     00 FA 45 F5 | 	or	result1, ##83886080
12a00     3B 00 00 FF 
12a04     18 E4 05 F1 | 	add	objptr, ##30232
12a08     F2 FA 61 FC | 	wrlong	result1, objptr
12a0c     3B 00 00 FF 
12a10     18 E4 85 F1 | 	sub	objptr, ##30232
12a14     F2 FA 01 F6 | 	mov	result1, objptr
12a18     00 88 02 FF 
12a1c     00 FA 45 F5 | 	or	result1, ##84934656
12a20     3B 00 00 FF 
12a24     1C E4 05 F1 | 	add	objptr, ##30236
12a28     F2 FA 61 FC | 	wrlong	result1, objptr
12a2c     3B 00 00 FF 
12a30     1C E4 85 F1 | 	sub	objptr, ##30236
12a34     F2 FA 01 F6 | 	mov	result1, objptr
12a38     00 90 02 FF 
12a3c     00 FA 45 F5 | 	or	result1, ##85983232
12a40     3B 00 00 FF 
12a44     20 E4 05 F1 | 	add	objptr, ##30240
12a48     F2 FA 61 FC | 	wrlong	result1, objptr
12a4c     3B 00 00 FF 
12a50     20 E4 85 F1 | 	sub	objptr, ##30240
12a54     F2 FA 01 F6 | 	mov	result1, objptr
12a58     00 98 02 FF 
12a5c     00 FA 45 F5 | 	or	result1, ##87031808
12a60     3B 00 00 FF 
12a64     24 E4 05 F1 | 	add	objptr, ##30244
12a68     F2 FA 61 FC | 	wrlong	result1, objptr
12a6c     3B 00 00 FF 
12a70     24 E4 85 F1 | 	sub	objptr, ##30244
12a74     F2 FA 01 F6 | 	mov	result1, objptr
12a78     00 A0 02 FF 
12a7c     00 FA 45 F5 | 	or	result1, ##88080384
12a80     3B 00 00 FF 
12a84     28 E4 05 F1 | 	add	objptr, ##30248
12a88     F2 FA 61 FC | 	wrlong	result1, objptr
12a8c     3B 00 00 FF 
12a90     28 E4 85 F1 | 	sub	objptr, ##30248
12a94     F2 FA 01 F6 | 	mov	result1, objptr
12a98     00 A8 02 FF 
12a9c     00 FA 45 F5 | 	or	result1, ##89128960
12aa0     3A 00 00 FF 
12aa4     E8 E5 05 F1 | 	add	objptr, ##30184
12aa8     F2 FA 61 FC | 	wrlong	result1, objptr
12aac     3A 00 00 FF 
12ab0     E8 E5 85 F1 | 	sub	objptr, ##30184
12ab4                 | _init_commands_ret
12ab4     2D 00 64 FD | 	ret
12ab8                 | 
12ab8                 | ' 
12ab8                 | ' ''--------------------------------Error strings -------------------------------------
12ab8                 | ' 
12ab8                 | ' sub init_error_strings
12ab8                 | _init_error_strings
12ab8     2B 01 00 FF 
12abc     D6 01 06 F6 | 	mov	_var01, ##@LR__4349
12ac0     3C 00 00 FF 
12ac4     40 E4 05 F1 | 	add	objptr, ##30784
12ac8     F2 00 62 FC | 	wrlong	_var01, objptr
12acc     2B 01 00 FF 
12ad0     D7 01 06 F6 | 	mov	_var01, ##@LR__4350
12ad4     04 E4 05 F1 | 	add	objptr, #4
12ad8     F2 00 62 FC | 	wrlong	_var01, objptr
12adc     2B 01 00 FF 
12ae0     FC 01 06 F6 | 	mov	_var01, ##@LR__4351
12ae4     04 E4 05 F1 | 	add	objptr, #4
12ae8     F2 00 62 FC | 	wrlong	_var01, objptr
12aec     2C 01 00 FF 
12af0     1D 00 06 F6 | 	mov	_var01, ##@LR__4352
12af4     04 E4 05 F1 | 	add	objptr, #4
12af8     F2 00 62 FC | 	wrlong	_var01, objptr
12afc     2C 01 00 FF 
12b00     37 00 06 F6 | 	mov	_var01, ##@LR__4353
12b04     04 E4 05 F1 | 	add	objptr, #4
12b08     F2 00 62 FC | 	wrlong	_var01, objptr
12b0c     2C 01 00 FF 
12b10     53 00 06 F6 | 	mov	_var01, ##@LR__4354
12b14     04 E4 05 F1 | 	add	objptr, #4
12b18     F2 00 62 FC | 	wrlong	_var01, objptr
12b1c     2C 01 00 FF 
12b20     75 00 06 F6 | 	mov	_var01, ##@LR__4355
12b24     04 E4 05 F1 | 	add	objptr, #4
12b28     F2 00 62 FC | 	wrlong	_var01, objptr
12b2c     2C 01 00 FF 
12b30     A3 00 06 F6 | 	mov	_var01, ##@LR__4356
12b34     04 E4 05 F1 | 	add	objptr, #4
12b38     F2 00 62 FC | 	wrlong	_var01, objptr
12b3c     2C 01 00 FF 
12b40     CE 00 06 F6 | 	mov	_var01, ##@LR__4357
12b44     04 E4 05 F1 | 	add	objptr, #4
12b48     F2 00 62 FC | 	wrlong	_var01, objptr
12b4c     2C 01 00 FF 
12b50     E7 00 06 F6 | 	mov	_var01, ##@LR__4358
12b54     04 E4 05 F1 | 	add	objptr, #4
12b58     F2 00 62 FC | 	wrlong	_var01, objptr
12b5c     2C 01 00 FF 
12b60     08 01 06 F6 | 	mov	_var01, ##@LR__4359
12b64     04 E4 05 F1 | 	add	objptr, #4
12b68     F2 00 62 FC | 	wrlong	_var01, objptr
12b6c     2C 01 00 FF 
12b70     1F 01 06 F6 | 	mov	_var01, ##@LR__4360
12b74     04 E4 05 F1 | 	add	objptr, #4
12b78     F2 00 62 FC | 	wrlong	_var01, objptr
12b7c     2C 01 00 FF 
12b80     3D 01 06 F6 | 	mov	_var01, ##@LR__4361
12b84     04 E4 05 F1 | 	add	objptr, #4
12b88     F2 00 62 FC | 	wrlong	_var01, objptr
12b8c     2C 01 00 FF 
12b90     61 01 06 F6 | 	mov	_var01, ##@LR__4362
12b94     04 E4 05 F1 | 	add	objptr, #4
12b98     F2 00 62 FC | 	wrlong	_var01, objptr
12b9c     2C 01 00 FF 
12ba0     88 01 06 F6 | 	mov	_var01, ##@LR__4363
12ba4     04 E4 05 F1 | 	add	objptr, #4
12ba8     F2 00 62 FC | 	wrlong	_var01, objptr
12bac     2C 01 00 FF 
12bb0     A4 01 06 F6 | 	mov	_var01, ##@LR__4364
12bb4     04 E4 05 F1 | 	add	objptr, #4
12bb8     F2 00 62 FC | 	wrlong	_var01, objptr
12bbc     2C 01 00 FF 
12bc0     B5 01 06 F6 | 	mov	_var01, ##@LR__4365
12bc4     04 E4 05 F1 | 	add	objptr, #4
12bc8     F2 00 62 FC | 	wrlong	_var01, objptr
12bcc     2C 01 00 FF 
12bd0     C5 01 06 F6 | 	mov	_var01, ##@LR__4366
12bd4     04 E4 05 F1 | 	add	objptr, #4
12bd8     F2 00 62 FC | 	wrlong	_var01, objptr
12bdc     2C 01 00 FF 
12be0     E0 01 06 F6 | 	mov	_var01, ##@LR__4367
12be4     04 E4 05 F1 | 	add	objptr, #4
12be8     F2 00 62 FC | 	wrlong	_var01, objptr
12bec     2C 01 00 FF 
12bf0     F2 01 06 F6 | 	mov	_var01, ##@LR__4368
12bf4     04 E4 05 F1 | 	add	objptr, #4
12bf8     F2 00 62 FC | 	wrlong	_var01, objptr
12bfc     2D 01 00 FF 
12c00     0A 00 06 F6 | 	mov	_var01, ##@LR__4369
12c04     04 E4 05 F1 | 	add	objptr, #4
12c08     F2 00 62 FC | 	wrlong	_var01, objptr
12c0c     2D 01 00 FF 
12c10     1E 00 06 F6 | 	mov	_var01, ##@LR__4370
12c14     04 E4 05 F1 | 	add	objptr, #4
12c18     F2 00 62 FC | 	wrlong	_var01, objptr
12c1c     2D 01 00 FF 
12c20     2E 00 06 F6 | 	mov	_var01, ##@LR__4371
12c24     04 E4 05 F1 | 	add	objptr, #4
12c28     F2 00 62 FC | 	wrlong	_var01, objptr
12c2c     2D 01 00 FF 
12c30     4B 00 06 F6 | 	mov	_var01, ##@LR__4372
12c34     04 E4 05 F1 | 	add	objptr, #4
12c38     F2 00 62 FC | 	wrlong	_var01, objptr
12c3c     2D 01 00 FF 
12c40     5C 00 06 F6 | 	mov	_var01, ##@LR__4373
12c44     04 E4 05 F1 | 	add	objptr, #4
12c48     F2 00 62 FC | 	wrlong	_var01, objptr
12c4c     2D 01 00 FF 
12c50     6D 00 06 F6 | 	mov	_var01, ##@LR__4374
12c54     04 E4 05 F1 | 	add	objptr, #4
12c58     F2 00 62 FC | 	wrlong	_var01, objptr
12c5c     2D 01 00 FF 
12c60     98 00 06 F6 | 	mov	_var01, ##@LR__4375
12c64     04 E4 05 F1 | 	add	objptr, #4
12c68     F2 00 62 FC | 	wrlong	_var01, objptr
12c6c     2D 01 00 FF 
12c70     B4 00 06 F6 | 	mov	_var01, ##@LR__4376
12c74     04 E4 05 F1 | 	add	objptr, #4
12c78     F2 00 62 FC | 	wrlong	_var01, objptr
12c7c     2D 01 00 FF 
12c80     CA 00 06 F6 | 	mov	_var01, ##@LR__4377
12c84     04 E4 05 F1 | 	add	objptr, #4
12c88     F2 00 62 FC | 	wrlong	_var01, objptr
12c8c     2D 01 00 FF 
12c90     D7 00 06 F6 | 	mov	_var01, ##@LR__4378
12c94     04 E4 05 F1 | 	add	objptr, #4
12c98     F2 00 62 FC | 	wrlong	_var01, objptr
12c9c     2D 01 00 FF 
12ca0     E9 00 06 F6 | 	mov	_var01, ##@LR__4379
12ca4     04 E4 05 F1 | 	add	objptr, #4
12ca8     F2 00 62 FC | 	wrlong	_var01, objptr
12cac     2D 01 00 FF 
12cb0     FA 00 06 F6 | 	mov	_var01, ##@LR__4380
12cb4     04 E4 05 F1 | 	add	objptr, #4
12cb8     F2 00 62 FC | 	wrlong	_var01, objptr
12cbc     2D 01 00 FF 
12cc0     16 01 06 F6 | 	mov	_var01, ##@LR__4381
12cc4     04 E4 05 F1 | 	add	objptr, #4
12cc8     F2 00 62 FC | 	wrlong	_var01, objptr
12ccc     2D 01 00 FF 
12cd0     27 01 06 F6 | 	mov	_var01, ##@LR__4382
12cd4     04 E4 05 F1 | 	add	objptr, #4
12cd8     F2 00 62 FC | 	wrlong	_var01, objptr
12cdc     2D 01 00 FF 
12ce0     36 01 06 F6 | 	mov	_var01, ##@LR__4383
12ce4     04 E4 05 F1 | 	add	objptr, #4
12ce8     F2 00 62 FC | 	wrlong	_var01, objptr
12cec     2D 01 00 FF 
12cf0     51 01 06 F6 | 	mov	_var01, ##@LR__4384
12cf4     04 E4 05 F1 | 	add	objptr, #4
12cf8     F2 00 62 FC | 	wrlong	_var01, objptr
12cfc     2D 01 00 FF 
12d00     85 01 06 F6 | 	mov	_var01, ##@LR__4385
12d04     04 E4 05 F1 | 	add	objptr, #4
12d08     F2 00 62 FC | 	wrlong	_var01, objptr
12d0c     2D 01 00 FF 
12d10     9E 01 06 F6 | 	mov	_var01, ##@LR__4386
12d14     04 E4 05 F1 | 	add	objptr, #4
12d18     F2 00 62 FC | 	wrlong	_var01, objptr
12d1c     2D 01 00 FF 
12d20     BA 01 06 F6 | 	mov	_var01, ##@LR__4387
12d24     04 E4 05 F1 | 	add	objptr, #4
12d28     F2 00 62 FC | 	wrlong	_var01, objptr
12d2c     2D 01 00 FF 
12d30     D8 01 06 F6 | 	mov	_var01, ##@LR__4388
12d34     04 E4 05 F1 | 	add	objptr, #4
12d38     F2 00 62 FC | 	wrlong	_var01, objptr
12d3c     2D 01 00 FF 
12d40     F1 01 06 F6 | 	mov	_var01, ##@LR__4389
12d44     04 E4 05 F1 | 	add	objptr, #4
12d48     F2 00 62 FC | 	wrlong	_var01, objptr
12d4c     2E 01 00 FF 
12d50     10 00 06 F6 | 	mov	_var01, ##@LR__4390
12d54     04 E4 05 F1 | 	add	objptr, #4
12d58     F2 00 62 FC | 	wrlong	_var01, objptr
12d5c     2E 01 00 FF 
12d60     1F 00 06 F6 | 	mov	_var01, ##@LR__4391
12d64     04 E4 05 F1 | 	add	objptr, #4
12d68     F2 00 62 FC | 	wrlong	_var01, objptr
12d6c     2E 01 00 FF 
12d70     4D 00 06 F6 | 	mov	_var01, ##@LR__4392
12d74     04 E4 05 F1 | 	add	objptr, #4
12d78     F2 00 62 FC | 	wrlong	_var01, objptr
12d7c     2E 01 00 FF 
12d80     5B 00 06 F6 | 	mov	_var01, ##@LR__4393
12d84     04 E4 05 F1 | 	add	objptr, #4
12d88     F2 00 62 FC | 	wrlong	_var01, objptr
12d8c     2E 01 00 FF 
12d90     70 00 06 F6 | 	mov	_var01, ##@LR__4394
12d94     04 E4 05 F1 | 	add	objptr, #4
12d98     F2 00 62 FC | 	wrlong	_var01, objptr
12d9c     2E 01 00 FF 
12da0     94 00 06 F6 | 	mov	_var01, ##@LR__4395
12da4     04 E4 05 F1 | 	add	objptr, #4
12da8     F2 00 62 FC | 	wrlong	_var01, objptr
12dac     2E 01 00 FF 
12db0     AB 00 06 F6 | 	mov	_var01, ##@LR__4396
12db4     04 E4 05 F1 | 	add	objptr, #4
12db8     F2 00 62 FC | 	wrlong	_var01, objptr
12dbc     2E 01 00 FF 
12dc0     BE 00 06 F6 | 	mov	_var01, ##@LR__4397
12dc4     04 E4 05 F1 | 	add	objptr, #4
12dc8     F2 00 62 FC | 	wrlong	_var01, objptr
12dcc     3C 00 00 FF 
12dd0     00 E5 85 F1 | 	sub	objptr, ##30976
12dd4                 | _init_error_strings_ret
12dd4     2D 00 64 FD | 	ret
12dd8                 | 
12dd8                 | '         
12dd8                 | ' sub printerror(err as integer)
12dd8                 | _printerror
12dd8     01 4A 05 F6 | 	mov	COUNT_, #1
12ddc     A8 00 A0 FD | 	call	#pushregs_
12de0     09 1F 02 F6 | 	mov	local01, arg01
12de4     2E 01 00 FF 
12de8     D5 12 06 F6 | 	mov	arg01, ##@LR__4398
12dec     E4 24 B0 FD | 	call	#_hg010b_spin2_write
12df0     0F 13 02 F6 | 	mov	arg01, local01
12df4     DC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
12df8     FD 12 02 F6 | 	mov	arg01, result1
12dfc     D4 24 B0 FD | 	call	#_hg010b_spin2_write
12e00     2E 01 00 FF 
12e04     DC 12 06 F6 | 	mov	arg01, ##@LR__4399
12e08     C8 24 B0 FD | 	call	#_hg010b_spin2_write
12e0c     02 1E 66 F0 | 	shl	local01, #2
12e10     3C 00 00 FF 
12e14     40 E4 05 F1 | 	add	objptr, ##30784
12e18     F2 1E 02 F1 | 	add	local01, objptr
12e1c     0F 13 02 FB | 	rdlong	arg01, local01
12e20     3C 00 00 FF 
12e24     40 E4 85 F1 | 	sub	objptr, ##30784
12e28                 | ' 
12e28                 | ' write(text)
12e28     A8 24 B0 FD | 	call	#_hg010b_spin2_write
12e2c                 | ' crlf
12e2c     04 26 B0 FD | 	call	#_hg010b_spin2_crlf
12e30     A7 F0 03 F6 | 	mov	ptra, fp
12e34     B2 00 A0 FD | 	call	#popregs_
12e38                 | _printerror_ret
12e38     2D 00 64 FD | 	ret
12e3c                 | 
12e3c                 | ' 
12e3c                 | ' '' ------------------------------- Hardware start/stop/initialization 
12e3c                 | ' 
12e3c                 | ' sub startpsram
12e3c                 | _startpsram
12e3c     00 12 06 F6 | 	mov	arg01, #0
12e40     0A 14 C6 F9 | 	decod	arg02, #10
12e44     0B 16 06 F6 | 	mov	arg03, #11
12e48     07 18 06 F6 | 	mov	arg04, #7
12e4c     0B 00 00 FF 
12e50     C0 E4 05 F1 | 	add	objptr, ##5824
12e54     88 27 B0 FD | 	call	#_psram_spin2_startx
12e58     22 00 00 FF 
12e5c     0C E5 05 F1 | 	add	objptr, ##17676
12e60     F2 FA 61 FC | 	wrlong	result1, objptr
12e64                 | '     return $7FF00 + cog*12
12e64     0C E4 05 F1 | 	add	objptr, #12
12e68     FF 03 80 FF 
12e6c     F2 00 6A FC | 	wrlong	##524032, objptr
12e70     2D 00 00 FF 
12e74     D8 E5 85 F1 | 	sub	objptr, ##23512
12e78                 | _startpsram_ret
12e78     2D 00 64 FD | 	ret
12e7c                 | 
12e7c                 | ' 
12e7c                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
12e7c                 | _startvideo
12e7c     01 4A 05 F6 | 	mov	COUNT_, #1
12e80     A8 00 A0 FD | 	call	#pushregs_
12e84     2D 00 00 FF 
12e88     D8 E5 05 F1 | 	add	objptr, ##23512
12e8c     F2 18 02 FB | 	rdlong	arg04, objptr
12e90     2D 00 00 FF 
12e94     D8 E5 85 F1 | 	sub	objptr, ##23512
12e98     0A 13 02 F6 | 	mov	arg01, arg02
12e9c     0C 15 02 F6 | 	mov	arg02, arg04
12ea0     50 0F B0 FD | 	call	#_hg010b_spin2_start
12ea4     2D 00 00 FF 
12ea8     C4 E5 05 F1 | 	add	objptr, ##23492
12eac     F2 FA 61 FC | 	wrlong	result1, objptr
12eb0                 | ' 
12eb0                 | ' videocog=v.start(pin,mbox)
12eb0                 | ' 
12eb0                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
12eb0     00 1E 06 F6 | 	mov	local01, #0
12eb4     22 00 00 FF 
12eb8     04 E5 85 F1 | 	sub	objptr, ##17668
12ebc                 | LR__1500
12ebc     0F 13 02 F6 | 	mov	arg01, local01
12ec0     00 28 00 FF 
12ec4     00 14 06 F6 | 	mov	arg02, ##5242880
12ec8     6C 2B B0 FD | 	call	#_psram_spin2_setQos
12ecc     01 1E 06 F1 | 	add	local01, #1
12ed0     08 1E 56 F2 | 	cmps	local01, #8 wc
12ed4     E4 FF 9F CD |  if_b	jmp	#LR__1500
12ed8     22 00 00 FF 
12edc     04 E5 05 F1 | 	add	objptr, ##17668
12ee0     F2 12 02 FB | 	rdlong	arg01, objptr
12ee4     7A 00 02 FF 
12ee8     00 14 06 F6 | 	mov	arg02, ##67171328
12eec     22 00 00 FF 
12ef0     04 E5 85 F1 | 	sub	objptr, ##17668
12ef4     40 2B B0 FD | 	call	#_psram_spin2_setQos
12ef8     0B 00 00 FF 
12efc     C0 E4 85 F1 | 	sub	objptr, ##5824
12f00                 | ' psram.setQoS(videocog, $0400f400) 
12f00                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
12f00     F2 14 02 F6 | 	mov	arg02, objptr
12f04     00 B0 02 FF 
12f08     00 14 46 F5 | 	or	arg02, ##90177536
12f0c     00 16 06 F6 | 	mov	arg03, #0
12f10     00 18 06 F6 | 	mov	arg04, #0
12f14     00 12 06 F6 | 	mov	arg01, #0
12f18     84 3E B0 FD | 	call	#__system___basic_open
12f1c                 | ' return videocog
12f1c     2D 00 00 FF 
12f20     C4 E5 05 F1 | 	add	objptr, ##23492
12f24     F2 FA 01 FB | 	rdlong	result1, objptr
12f28     2D 00 00 FF 
12f2c     C4 E5 85 F1 | 	sub	objptr, ##23492
12f30     A7 F0 03 F6 | 	mov	ptra, fp
12f34     B2 00 A0 FD | 	call	#popregs_
12f38                 | _startvideo_ret
12f38     2D 00 64 FD | 	ret
12f3c                 | 
12f3c                 | ' 
12f3c                 | ' function pspeek(adr as ulong) as ubyte
12f3c                 | _pspeek
12f3c     00 4A 05 F6 | 	mov	COUNT_, #0
12f40     A8 00 A0 FD | 	call	#pushregs_
12f44     0C F0 07 F1 | 	add	ptra, #12
12f48     04 4E 05 F1 | 	add	fp, #4
12f4c     A7 12 62 FC | 	wrlong	arg01, fp
12f50     04 4E 05 F1 | 	add	fp, #4
12f54     A7 12 02 F6 | 	mov	arg01, fp
12f58     04 4E 85 F1 | 	sub	fp, #4
12f5c     A7 14 02 FB | 	rdlong	arg02, fp
12f60     04 4E 85 F1 | 	sub	fp, #4
12f64     01 16 06 F6 | 	mov	arg03, #1
12f68     0B 00 00 FF 
12f6c     C0 E4 05 F1 | 	add	objptr, ##5824
12f70     98 28 B0 FD | 	call	#_psram_spin2_read1
12f74     0B 00 00 FF 
12f78     C0 E4 85 F1 | 	sub	objptr, ##5824
12f7c                 | ' psram.read1(varptr(res),adr,1)
12f7c                 | ' return res
12f7c     08 4E 05 F1 | 	add	fp, #8
12f80     A7 FA C1 FA | 	rdbyte	result1, fp
12f84     08 4E 85 F1 | 	sub	fp, #8
12f88     A7 F0 03 F6 | 	mov	ptra, fp
12f8c     B2 00 A0 FD | 	call	#popregs_
12f90                 | _pspeek_ret
12f90     2D 00 64 FD | 	ret
12f94                 | 
12f94                 | ' 
12f94                 | ' function pslpeek(adr as ulong) as ulong
12f94                 | _pslpeek
12f94     00 4A 05 F6 | 	mov	COUNT_, #0
12f98     A8 00 A0 FD | 	call	#pushregs_
12f9c     0C F0 07 F1 | 	add	ptra, #12
12fa0     04 4E 05 F1 | 	add	fp, #4
12fa4     A7 12 62 FC | 	wrlong	arg01, fp
12fa8     04 4E 05 F1 | 	add	fp, #4
12fac     A7 12 02 F6 | 	mov	arg01, fp
12fb0     04 4E 85 F1 | 	sub	fp, #4
12fb4     A7 14 02 FB | 	rdlong	arg02, fp
12fb8     04 4E 85 F1 | 	sub	fp, #4
12fbc     04 16 06 F6 | 	mov	arg03, #4
12fc0     0B 00 00 FF 
12fc4     C0 E4 05 F1 | 	add	objptr, ##5824
12fc8     40 28 B0 FD | 	call	#_psram_spin2_read1
12fcc     0B 00 00 FF 
12fd0     C0 E4 85 F1 | 	sub	objptr, ##5824
12fd4                 | ' psram.read1(varptr(res),adr,4)
12fd4                 | ' return res
12fd4     08 4E 05 F1 | 	add	fp, #8
12fd8     A7 FA 01 FB | 	rdlong	result1, fp
12fdc     08 4E 85 F1 | 	sub	fp, #8
12fe0     A7 F0 03 F6 | 	mov	ptra, fp
12fe4     B2 00 A0 FD | 	call	#popregs_
12fe8                 | _pslpeek_ret
12fe8     2D 00 64 FD | 	ret
12fec                 | 
12fec                 | ' 
12fec                 | ' '' ------------------------------- USB keyboard scan to char translator
12fec                 | ' 
12fec                 | ' function scantochar(key)
12fec                 | _scantochar
12fec                 | ' 
12fec                 | ' select case (key shr 8) and 255
12fec     09 01 02 F6 | 	mov	_var01, arg01
12ff0     08 00 C6 F0 | 	sar	_var01, #8
12ff4     FF 00 0E F5 | 	and	_var01, #255 wz
12ff8     24 00 90 AD |  if_e	jmp	#LR__1510
12ffc     02 00 0E F2 | 	cmp	_var01, #2 wz
13000     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
13004     30 00 90 AD |  if_e	jmp	#LR__1511
13008     40 00 0E F2 | 	cmp	_var01, #64 wz
1300c     44 00 90 AD |  if_e	jmp	#LR__1512
13010     42 00 0E F2 | 	cmp	_var01, #66 wz
13014     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
13018     70 00 90 5D |  if_ne	jmp	#LR__1514
1301c     50 00 90 FD | 	jmp	#LR__1513
13020                 | LR__1510
13020     09 FB 01 F6 | 	mov	result1, arg01
13024     7F FA 05 F5 | 	and	result1, #127
13028     02 FA 65 F0 | 	shl	result1, #2
1302c     F5 FA 01 F1 | 	add	result1, ptr__dat__
13030     FD FA C1 FA | 	rdbyte	result1, result1
13034     54 00 90 FD | 	jmp	#_scantochar_ret
13038                 | LR__1511
13038     09 FB 01 F6 | 	mov	result1, arg01
1303c     7F FA 05 F5 | 	and	result1, #127
13040     02 FA 65 F0 | 	shl	result1, #2
13044     01 FA 05 F1 | 	add	result1, #1
13048     F5 FA 01 F1 | 	add	result1, ptr__dat__
1304c     FD FA C1 FA | 	rdbyte	result1, result1
13050     38 00 90 FD | 	jmp	#_scantochar_ret
13054                 | LR__1512
13054     09 FB 01 F6 | 	mov	result1, arg01
13058     7F FA 05 F5 | 	and	result1, #127
1305c     02 FA 65 F0 | 	shl	result1, #2
13060     02 FA 05 F1 | 	add	result1, #2
13064     F5 FA 01 F1 | 	add	result1, ptr__dat__
13068     FD FA C1 FA | 	rdbyte	result1, result1
1306c     1C 00 90 FD | 	jmp	#_scantochar_ret
13070                 | LR__1513
13070     09 FB 01 F6 | 	mov	result1, arg01
13074     7F FA 05 F5 | 	and	result1, #127
13078     02 FA 65 F0 | 	shl	result1, #2
1307c     03 FA 05 F1 | 	add	result1, #3
13080     F5 FA 01 F1 | 	add	result1, ptr__dat__
13084     FD FA C1 FA | 	rdbyte	result1, result1
13088     00 00 90 FD | 	jmp	#_scantochar_ret
1308c                 | LR__1514
1308c                 | _scantochar_ret
1308c     2D 00 64 FD | 	ret
13090                 | 
13090                 | _program
13090     0B 4A 05 F6 | 	mov	COUNT_, #11
13094     A8 00 A0 FD | 	call	#pushregs_
13098     A0 FD BF FD | 	call	#_startpsram
1309c     40 12 06 F6 | 	mov	arg01, #64
130a0     00 14 06 F6 | 	mov	arg02, #0
130a4     00 16 06 F6 | 	mov	arg03, #0
130a8     D0 FD BF FD | 	call	#_startvideo
130ac     00 12 06 F6 | 	mov	arg01, #0
130b0     00 14 06 F6 | 	mov	arg02, #0
130b4     00 16 06 F6 | 	mov	arg03, #0
130b8     0B 00 00 FF 
130bc     C0 E4 05 F1 | 	add	objptr, ##5824
130c0     88 2C B0 FD | 	call	#_Audio093b_8_sc_spin2_start
130c4     FE 1C 02 F6 | 	mov	arg06, result2
130c8     22 00 00 FF 
130cc     00 E5 05 F1 | 	add	objptr, ##17664
130d0     F2 FA 61 FC | 	wrlong	result1, objptr
130d4     14 E4 05 F1 | 	add	objptr, #20
130d8     F2 1C 62 FC | 	wrlong	arg06, objptr
130dc     2D 00 00 FF 
130e0     D4 E5 85 F1 | 	sub	objptr, ##23508
130e4     32 12 06 F6 | 	mov	arg01, #50
130e8     00 35 B0 FD | 	call	#__system___waitms
130ec     2D 00 00 FF 
130f0     D4 E5 05 F1 | 	add	objptr, ##23508
130f4     F2 12 02 FB | 	rdlong	arg01, objptr
130f8     2D 00 00 FF 
130fc     D4 E5 85 F1 | 	sub	objptr, ##23508
13100     14 12 06 F1 | 	add	arg01, #20
13104     20 00 80 FF 
13108     09 01 58 FC | 	wrword	##16384, arg01
1310c     30 2A B0 FD | 	call	#_usbnew_spin2_start
13110     2D 00 00 FF 
13114     C8 E5 05 F1 | 	add	objptr, ##23496
13118     F2 FA 61 FC | 	wrlong	result1, objptr
1311c                 | '   mouse_limits[0] := xlim
1311c     0F 00 00 FF 
13120     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
13124     01 00 80 FF 
13128     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1312c                 | '   mouse_limits[1] := ylim
1312c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
13130     01 00 80 FF 
13134     FB 7E 68 FC | 	wrlong	##575, ptr__usbnew_spin2_dat__
13138     2D 00 00 FF 
1313c     BB E4 85 F1 | 	sub	objptr, ##23227
13140     F2 12 02 F6 | 	mov	arg01, objptr
13144     0D E5 85 F1 | 	sub	objptr, #269
13148     C4 12 06 F1 | 	add	arg01, #196
1314c                 | '   mouse_outptr := ptr
1314c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
13150     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
13154     0F 00 00 FF 
13158     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1315c     0E 00 00 FF 
13160     9A EA 05 F1 | 	add	ptr__dat__, ##7322
13164     F5 14 02 F6 | 	mov	arg02, ptr__dat__
13168     0E 00 00 FF 
1316c     9A EA 85 F1 | 	sub	ptr__dat__, ##7322
13170     10 12 06 F6 | 	mov	arg01, #16
13174     74 11 B0 FD | 	call	#_hg010b_spin2_setspriteptr
13178     10 12 06 F6 | 	mov	arg01, #16
1317c     20 14 06 F6 | 	mov	arg02, #32
13180     20 16 06 F6 | 	mov	arg03, #32
13184     D8 11 B0 FD | 	call	#_hg010b_spin2_setspritesize
13188     09 12 C6 F9 | 	decod	arg01, #9
1318c     20 15 06 F6 | 	mov	arg02, #288
13190     68 2A B0 FD | 	call	#_usbnew_spin2_mouse_move
13194     F2 1C 02 F6 | 	mov	arg06, objptr
13198     50 00 00 FF 
1319c     AC E5 05 F1 | 	add	objptr, ##41388
131a0     F2 1A 02 F6 | 	mov	arg05, objptr
131a4     0D 1D 62 FC | 	wrlong	arg06, arg05
131a8     04 1A 06 F1 | 	add	arg05, #4
131ac     0D F1 61 FC | 	wrlong	ptr__housekeeper_, arg05
131b0     EF 14 02 F6 | 	mov	arg02, entryptr__
131b4     F2 1E 02 F6 | 	mov	local01, objptr
131b8     1E FA 05 F6 | 	mov	result1, #30
131bc     28 1E 62 FD | 	setq	local01
131c0     0A FB F1 FC | 	coginit	result1, arg02 wc
131c4     01 FA 65 C6 |  if_b	neg	result1, #1
131c8     04 E4 85 F1 | 	sub	objptr, #4
131cc     F2 FA 61 FC | 	wrlong	result1, objptr
131d0     01 00 00 FF 
131d4     90 E4 05 F1 | 	add	objptr, ##656
131d8     F2 00 68 FC | 	wrlong	#0, objptr
131dc     24 00 00 FF 
131e0     40 E4 85 F1 | 	sub	objptr, ##18496
131e4     F2 04 68 FC | 	wrlong	#2, objptr
131e8     04 E4 05 F1 | 	add	objptr, #4
131ec     F2 26 69 FC | 	wrlong	#147, objptr
131f0     04 E4 05 F1 | 	add	objptr, #4
131f4     F2 34 69 FC | 	wrlong	#154, objptr
131f8     04 E4 05 F1 | 	add	objptr, #4
131fc     F2 08 68 FC | 	wrlong	#4, objptr
13200     04 E4 85 F1 | 	sub	objptr, #4
13204     F2 1C 02 FB | 	rdlong	arg06, objptr
13208     14 E4 85 F1 | 	sub	objptr, #20
1320c     F2 1C 62 FC | 	wrlong	arg06, objptr
13210     04 E4 05 F1 | 	add	objptr, #4
13214     F2 00 68 FC | 	wrlong	#0, objptr
13218     04 E4 05 F1 | 	add	objptr, #4
1321c     F2 00 68 FC | 	wrlong	#0, objptr
13220     22 00 00 FF 
13224     B0 E5 05 F1 | 	add	objptr, ##17840
13228     F2 02 68 FC | 	wrlong	#1, objptr
1322c     01 00 00 FF 
13230     9C E4 05 F1 | 	add	objptr, ##668
13234     F2 00 68 FC | 	wrlong	#0, objptr
13238     01 00 00 FF 
1323c     00 EA 05 F1 | 	add	ptr__dat__, ##512
13240     08 E4 05 F1 | 	add	objptr, #8
13244     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
13248     04 E4 85 F1 | 	sub	objptr, #4
1324c     03 00 80 FF 
13250     F2 28 69 FC | 	wrlong	##1684, objptr
13254     16 00 00 FF 
13258     1C E4 85 F1 | 	sub	objptr, ##11292
1325c     F2 18 68 FC | 	wrlong	#12, objptr
13260     3C 00 00 FF 
13264     28 E4 85 F1 | 	sub	objptr, ##30760
13268     01 00 00 FF 
1326c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
13270     C8 EC BF FD | 	call	#_init_commands
13274     40 F8 BF FD | 	call	#_init_error_strings
13278     1C 70 BF FD | 	call	#_do_new
1327c     2E 00 00 FF 
13280     00 E4 05 F1 | 	add	objptr, ##23552
13284     F2 12 02 FB | 	rdlong	arg01, objptr
13288     04 E4 85 F1 | 	sub	objptr, #4
1328c     F2 14 02 FB | 	rdlong	arg02, objptr
13290     2D 00 00 FF 
13294     FC E5 85 F1 | 	sub	objptr, ##23548
13298     7C 1D B0 FD | 	call	#_hg010b_spin2_cls
1329c     2E 00 00 FF 
132a0     04 E4 05 F1 | 	add	objptr, ##23556
132a4     F2 12 02 FB | 	rdlong	arg01, objptr
132a8     2E 00 00 FF 
132ac     04 E4 85 F1 | 	sub	objptr, ##23556
132b0     7C 1C B0 FD | 	call	#_hg010b_spin2_setfontfamily
132b4                 | ' 
132b4                 | ' leading_spaces:=amount
132b4     01 00 00 FF 
132b8     B2 E4 05 F1 | 	add	objptr, ##690
132bc     F2 04 68 FC | 	wrlong	#2, objptr
132c0     01 00 00 FF 
132c4     B2 E4 85 F1 | 	sub	objptr, ##690
132c8     2E 01 00 FF 
132cc     DF 20 06 F6 | 	mov	local02, ##@LR__4400
132d0     3D 12 06 F6 | 	mov	arg01, #61
132d4     3C 14 06 F6 | 	mov	arg02, #60
132d8     3B 16 06 F6 | 	mov	arg03, #59
132dc     3A 18 06 F6 | 	mov	arg04, #58
132e0     5C 75 B0 FD | 	call	#__system___vfs_open_sdcardx
132e4     FD 14 02 F6 | 	mov	arg02, result1
132e8     10 13 02 F6 | 	mov	arg01, local02
132ec     D4 33 B0 FD | 	call	#__system___mount
132f0     2E 01 00 FF 
132f4     E3 12 06 F6 | 	mov	arg01, ##@LR__4401
132f8     88 36 B0 FD | 	call	#__system___chdir
132fc     2E 01 00 FF 
13300     EB 20 06 F6 | 	mov	local02, ##@LR__4402
13304     49 00 00 FF 
13308     58 E4 05 F1 | 	add	objptr, ##37464
1330c     F2 20 62 FC | 	wrlong	local02, objptr
13310     1B 00 00 FF 
13314     60 E4 85 F1 | 	sub	objptr, ##13920
13318     F2 12 02 FB | 	rdlong	arg01, objptr
1331c     2D 00 00 FF 
13320     F8 E5 85 F1 | 	sub	objptr, ##23544
13324     01 12 66 F0 | 	shl	arg01, #1
13328     01 14 06 F6 | 	mov	arg02, #1
1332c     40 1C B0 FD | 	call	#_hg010b_spin2_setcursorpos
13330                 | ' 
13330                 | ' init_commands
13330                 | ' init_error_strings
13330                 | ' do_new
13330                 | ' 
13330                 | ' 
13330                 | ' cls(ink, paper)
13330                 | ' 'v.setfontfamily(4) 				' use ST Mono font
13330                 | ' v.setfontfamily(font) 				' use ST Mono font
13330                 | ' v.setleadingspaces(2)
13330                 | ' mount "/sd", _vfs_open_sdcard()
13330                 | ' chdir "/sd/bas"
13330                 | ' 
13330                 | ' currentdir$="/sd/bas"
13330                 | ' 
13330                 | ' position 2*editor_spaces,1 : print ver$
13330     00 12 06 F6 | 	mov	arg01, #0
13334     70 84 B0 FD | 	call	#__system___getiolock_0372
13338     FD 12 02 F6 | 	mov	arg01, result1
1333c     B8 2F B0 FD | 	call	#__system___lockmem
13340     10 00 00 FF 
13344     10 EB 05 F1 | 	add	ptr__dat__, ##8464
13348     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1334c     10 00 00 FF 
13350     10 EB 85 F1 | 	sub	ptr__dat__, ##8464
13354     00 12 06 F6 | 	mov	arg01, #0
13358     00 16 06 F6 | 	mov	arg03, #0
1335c     8C 3C B0 FD | 	call	#__system___basic_print_string
13360     00 12 06 F6 | 	mov	arg01, #0
13364     0A 14 06 F6 | 	mov	arg02, #10
13368     00 16 06 F6 | 	mov	arg03, #0
1336c     24 3C B0 FD | 	call	#__system___basic_print_char
13370     00 12 06 F6 | 	mov	arg01, #0
13374     30 84 B0 FD | 	call	#__system___getiolock_0372
13378     FD 00 68 FC | 	wrlong	#0, result1
1337c     F2 12 02 FB | 	rdlong	arg01, objptr
13380     00 14 06 F6 | 	mov	arg02, #0
13384     0A 16 06 F6 | 	mov	arg03, #10
13388     74 51 B0 FD | 	call	#__system__Number_S
1338c     FD 12 02 F6 | 	mov	arg01, result1
13390     2E 01 00 FF 
13394     F3 14 06 F6 | 	mov	arg02, ##@LR__4403
13398     B8 2F B0 FD | 	call	#__system___string_concat
1339c     FD 20 02 F6 | 	mov	local02, result1
133a0     50 00 00 FF 
133a4     A0 E5 05 F1 | 	add	objptr, ##41376
133a8     F2 20 62 FC | 	wrlong	local02, objptr
133ac     50 00 00 FF 
133b0     A0 E5 85 F1 | 	sub	objptr, ##41376
133b4                 | ' free$=decuns$(v.buf_ptr)+" BASIC bytes free" : print free$
133b4     00 12 06 F6 | 	mov	arg01, #0
133b8     EC 83 B0 FD | 	call	#__system___getiolock_0372
133bc     FD 12 02 F6 | 	mov	arg01, result1
133c0     34 2F B0 FD | 	call	#__system___lockmem
133c4     50 00 00 FF 
133c8     A0 E5 05 F1 | 	add	objptr, ##41376
133cc     F2 14 02 FB | 	rdlong	arg02, objptr
133d0     50 00 00 FF 
133d4     A0 E5 85 F1 | 	sub	objptr, ##41376
133d8     00 12 06 F6 | 	mov	arg01, #0
133dc     00 16 06 F6 | 	mov	arg03, #0
133e0     08 3C B0 FD | 	call	#__system___basic_print_string
133e4     00 12 06 F6 | 	mov	arg01, #0
133e8     0A 14 06 F6 | 	mov	arg02, #10
133ec     00 16 06 F6 | 	mov	arg03, #0
133f0     A0 3B B0 FD | 	call	#__system___basic_print_char
133f4     00 12 06 F6 | 	mov	arg01, #0
133f8     AC 83 B0 FD | 	call	#__system___getiolock_0372
133fc     FD 00 68 FC | 	wrlong	#0, result1
13400     2D 00 00 FF 
13404     F8 E5 05 F1 | 	add	objptr, ##23544
13408     F2 12 02 FB | 	rdlong	arg01, objptr
1340c     2D 00 00 FF 
13410     F8 E5 85 F1 | 	sub	objptr, ##23544
13414     01 12 66 F0 | 	shl	arg01, #1
13418     04 14 06 F6 | 	mov	arg02, #4
1341c     50 1B B0 FD | 	call	#_hg010b_spin2_setcursorpos
13420                 | ' position 2*editor_spaces,4 : print "Ready"
13420     00 12 06 F6 | 	mov	arg01, #0
13424     80 83 B0 FD | 	call	#__system___getiolock_0372
13428     FD 12 02 F6 | 	mov	arg01, result1
1342c     C8 2E B0 FD | 	call	#__system___lockmem
13430     2E 01 00 FF 
13434     05 15 06 F6 | 	mov	arg02, ##@LR__4404
13438     00 12 06 F6 | 	mov	arg01, #0
1343c     00 16 06 F6 | 	mov	arg03, #0
13440     A8 3B B0 FD | 	call	#__system___basic_print_string
13444     FD 22 02 F6 | 	mov	local03, result1
13448     00 12 06 F6 | 	mov	arg01, #0
1344c     0A 14 06 F6 | 	mov	arg02, #10
13450     00 16 06 F6 | 	mov	arg03, #0
13454     3C 3B B0 FD | 	call	#__system___basic_print_char
13458     01 24 06 F6 | 	mov	local04, #1
1345c     00 12 06 F6 | 	mov	arg01, #0
13460     44 83 B0 FD | 	call	#__system___getiolock_0372
13464     FD 00 68 FC | 	wrlong	#0, result1
13468     00 26 06 F6 | 	mov	local05, #0
1346c     00 14 06 F6 | 	mov	arg02, #0
13470     01 14 D6 F7 | 	test	arg02, #1 wc
13474     5A 4C 64 FD | 	drvc	#38
13478     01 14 D6 F7 | 	test	arg02, #1 wc
1347c     5A 4E 64 FD | 	drvc	#39
13480                 | ' 'hubset( %1_000001__00_0001_1010__1111_1011)
13480                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
13480                 | ' 
13480                 | ' '-------------------------------------------------------------------------------------------------------- 
13480                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
13480                 | ' '--------------------------------------------------------------------------------------------------------
13480                 | ' 
13480                 | ' do
13480                 | LR__1520
13480     01 12 06 F6 | 	mov	arg01, #1
13484     20 1B B0 FD | 	call	#_hg010b_spin2_waitvbl
13488     10 27 B0 FD | 	call	#_usbnew_spin2_get_key
1348c     3C 00 00 FF 
13490     38 E4 05 F1 | 	add	objptr, ##30776
13494     F2 FA 61 FC | 	wrlong	result1, objptr
13498                 | '   return hkbd_led_rep
13498     13 00 00 FF 
1349c     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
134a0     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
134a4     13 00 00 FF 
134a8     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
134ac     16 00 00 FF 
134b0     14 E4 05 F1 | 	add	objptr, ##11284
134b4     F2 FA 61 FC | 	wrlong	result1, objptr
134b8                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(10): paula.stop(7)
134b8     16 00 00 FF 
134bc     14 E4 85 F1 | 	sub	objptr, ##11284
134c0     F2 20 02 FB | 	rdlong	local02, objptr
134c4     3C 00 00 FF 
134c8     38 E4 85 F1 | 	sub	objptr, ##30776
134cc     01 20 16 F2 | 	cmp	local02, #1 wc
134d0     BC 00 90 CD |  if_b	jmp	#LR__1521
134d4     3C 00 00 FF 
134d8     38 E4 05 F1 | 	add	objptr, ##30776
134dc     F2 24 02 FB | 	rdlong	local04, objptr
134e0     3C 00 00 FF 
134e4     38 E4 85 F1 | 	sub	objptr, ##30776
134e8     12 23 02 F6 | 	mov	local03, local04
134ec     04 22 16 F2 | 	cmp	local03, #4 wc
134f0     9C 00 90 3D |  if_ae	jmp	#LR__1521
134f4     50 00 00 FF 
134f8     A4 E5 05 F1 | 	add	objptr, ##41380
134fc     F2 1E 02 FB | 	rdlong	local01, objptr
13500     50 00 00 FF 
13504     A4 E5 85 F1 | 	sub	objptr, ##41380
13508     0F 27 02 F6 | 	mov	local05, local01
1350c     01 26 0E F2 | 	cmp	local05, #1 wz
13510     7C 00 90 5D |  if_ne	jmp	#LR__1521
13514     04 00 00 FF 
13518     94 EA 05 F1 | 	add	ptr__dat__, ##2196
1351c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
13520     04 00 00 FF 
13524     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
13528     56 00 00 FF 
1352c     44 22 06 F6 | 	mov	local03, ##44100
13530     0E 24 C6 F9 | 	decod	local04, #14
13534     00 26 06 F6 | 	mov	local05, #0
13538     03 00 00 FF 
1353c     DE 1E 06 F6 | 	mov	local01, ##1758
13540     07 12 06 F6 | 	mov	arg01, #7
13544     56 00 00 FF 
13548     44 16 06 F6 | 	mov	arg03, ##44100
1354c     0E 18 C6 F9 | 	decod	arg04, #14
13550     00 1A 06 F6 | 	mov	arg05, #0
13554     03 00 00 FF 
13558     DE 1C 06 F6 | 	mov	arg06, ##1758
1355c     0B 00 00 FF 
13560     C0 E4 05 F1 | 	add	objptr, ##5824
13564     5C 29 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
13568     0B 00 00 FF 
1356c     C0 E4 85 F1 | 	sub	objptr, ##5824
13570     0A 12 06 F6 | 	mov	arg01, #10
13574     74 30 B0 FD | 	call	#__system___waitms
13578     07 12 06 F6 | 	mov	arg01, #7
1357c     0B 00 00 FF 
13580     C0 E4 05 F1 | 	add	objptr, ##5824
13584     8C 2A B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
13588     0B 00 00 FF 
1358c     C0 E4 85 F1 | 	sub	objptr, ##5824
13590                 | LR__1521
13590                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then let key2=key : let rpt=1 : let key3=key2
13590     3C 00 00 FF 
13594     38 E4 05 F1 | 	add	objptr, ##30776
13598     F2 20 02 FB | 	rdlong	local02, objptr
1359c     3C 00 00 FF 
135a0     38 E4 85 F1 | 	sub	objptr, ##30776
135a4     04 20 16 F2 | 	cmp	local02, #4 wc
135a8     80 00 90 CD |  if_b	jmp	#LR__1522
135ac     3C 00 00 FF 
135b0     38 E4 05 F1 | 	add	objptr, ##30776
135b4     F2 24 02 FB | 	rdlong	local04, objptr
135b8     3C 00 00 FF 
135bc     38 E4 85 F1 | 	sub	objptr, ##30776
135c0     12 23 02 F6 | 	mov	local03, local04
135c4     00 00 40 FF 
135c8     00 22 16 F2 | 	cmp	local03, ##-2147483648 wc
135cc     3C 00 00 CF 
135d0     38 E4 05 C1 |  if_b	add	objptr, ##30776
135d4     F2 1E 02 CB |  if_b	rdlong	local01, objptr
135d8     3C 00 00 CF 
135dc     38 E4 85 C1 |  if_b	sub	objptr, ##30776
135e0     0F 27 E2 C8 |  if_b	getbyte	local05, local01, #0
135e4     E0 26 16 C2 |  if_b	cmp	local05, #224 wc
135e8     40 00 90 3D |  if_ae	jmp	#LR__1522
135ec     3C 00 00 FF 
135f0     38 E4 05 F1 | 	add	objptr, ##30776
135f4     F2 20 02 FB | 	rdlong	local02, objptr
135f8     04 E4 05 F1 | 	add	objptr, #4
135fc     F2 20 62 FC | 	wrlong	local02, objptr
13600     16 00 00 FF 
13604     14 E4 05 F1 | 	add	objptr, ##11284
13608     F2 02 68 FC | 	wrlong	#1, objptr
1360c     16 00 00 FF 
13610     14 E4 85 F1 | 	sub	objptr, ##11284
13614     F2 20 02 FB | 	rdlong	local02, objptr
13618     16 00 00 FF 
1361c     18 E4 05 F1 | 	add	objptr, ##11288
13620     F2 20 62 FC | 	wrlong	local02, objptr
13624     52 00 00 FF 
13628     54 E4 85 F1 | 	sub	objptr, ##42068
1362c                 | LR__1522
1362c                 | ' if key>$80000000 then let rptcnt=0 : let rpt=0
1362c     3C 00 00 FF 
13630     38 E4 05 F1 | 	add	objptr, ##30776
13634     F2 20 02 FB | 	rdlong	local02, objptr
13638     3C 00 00 FF 
1363c     38 E4 85 F1 | 	sub	objptr, ##30776
13640     00 00 40 FF 
13644     01 20 16 F2 | 	cmp	local02, ##-2147483647 wc
13648     52 00 00 3F 
1364c     58 E4 05 31 |  if_ae	add	objptr, ##42072
13650     F2 00 68 3C |  if_ae	wrlong	#0, objptr
13654     08 E4 85 31 |  if_ae	sub	objptr, #8
13658     F2 00 68 3C |  if_ae	wrlong	#0, objptr
1365c     52 00 00 3F 
13660     50 E4 85 31 |  if_ae	sub	objptr, ##42064
13664                 | ' if key=0 andalso rpt=1 then rptcnt+=1
13664     3C 00 00 FF 
13668     38 E4 05 F1 | 	add	objptr, ##30776
1366c     F2 20 0A FB | 	rdlong	local02, objptr wz
13670     3C 00 00 FF 
13674     38 E4 85 F1 | 	sub	objptr, ##30776
13678     52 00 00 AF 
1367c     50 E4 05 A1 |  if_e	add	objptr, ##42064
13680     F2 24 02 AB |  if_e	rdlong	local04, objptr
13684     52 00 00 AF 
13688     50 E4 85 A1 |  if_e	sub	objptr, ##42064
1368c     12 23 02 A6 |  if_e	mov	local03, local04
13690     01 22 0E A2 |  if_e	cmp	local03, #1 wz
13694     52 00 00 AF 
13698     58 E4 05 A1 |  if_e	add	objptr, ##42072
1369c     F2 20 02 AB |  if_e	rdlong	local02, objptr
136a0     01 20 06 A1 |  if_e	add	local02, #1
136a4     F2 20 62 AC |  if_e	wrlong	local02, objptr
136a8     52 00 00 AF 
136ac     58 E4 85 A1 |  if_e	sub	objptr, ##42072
136b0                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
136b0     3C 00 00 FF 
136b4     38 E4 05 F1 | 	add	objptr, ##30776
136b8     F2 20 02 FB | 	rdlong	local02, objptr
136bc     3C 00 00 FF 
136c0     38 E4 85 F1 | 	sub	objptr, ##30776
136c4     00 00 40 FF 
136c8     00 20 16 F2 | 	cmp	local02, ##-2147483648 wc
136cc     44 00 90 3D |  if_ae	jmp	#LR__1524
136d0     52 00 00 FF 
136d4     58 E4 05 F1 | 	add	objptr, ##42072
136d8     F2 20 02 FB | 	rdlong	local02, objptr
136dc     52 00 00 FF 
136e0     58 E4 85 F1 | 	sub	objptr, ##42072
136e4     19 20 0E F2 | 	cmp	local02, #25 wz
136e8     28 00 90 5D |  if_ne	jmp	#LR__1523
136ec     3C 00 00 FF 
136f0     3C E4 05 F1 | 	add	objptr, ##30780
136f4     F2 20 02 FB | 	rdlong	local02, objptr
136f8     16 00 00 FF 
136fc     18 E4 05 F1 | 	add	objptr, ##11288
13700     F2 20 62 FC | 	wrlong	local02, objptr
13704     04 E4 05 F1 | 	add	objptr, #4
13708     F2 2A 68 FC | 	wrlong	#21, objptr
1370c     52 00 00 FF 
13710     58 E4 85 F1 | 	sub	objptr, ##42072
13714                 | LR__1523
13714                 | LR__1524
13714                 | ' 
13714                 | ' 
13714                 | ' if key3<>0 then
13714     52 00 00 FF 
13718     54 E4 05 F1 | 	add	objptr, ##42068
1371c     F2 28 0A FB | 	rdlong	local06, objptr wz
13720     52 00 00 FF 
13724     54 E4 85 F1 | 	sub	objptr, ##42068
13728     54 FD 9F AD |  if_e	jmp	#LR__1520
1372c                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,16384,spl_len) 
1372c     50 00 00 FF 
13730     A4 E5 05 F1 | 	add	objptr, ##41380
13734     F2 20 02 FB | 	rdlong	local02, objptr
13738     50 00 00 FF 
1373c     A4 E5 85 F1 | 	sub	objptr, ##41380
13740     01 20 0E F2 | 	cmp	local02, #1 wz
13744     50 00 90 5D |  if_ne	jmp	#LR__1525
13748     52 00 00 FF 
1374c     48 E4 05 F1 | 	add	objptr, ##42056
13750     F2 14 02 FB | 	rdlong	arg02, objptr
13754     56 00 00 FF 
13758     44 22 06 F6 | 	mov	local03, ##44100
1375c     0E 24 C6 F9 | 	decod	local04, #14
13760     04 E4 85 F1 | 	sub	objptr, #4
13764     F2 26 02 FB | 	rdlong	local05, objptr
13768     01 1E 66 F6 | 	neg	local01, #1
1376c     07 12 06 F6 | 	mov	arg01, #7
13770     56 00 00 FF 
13774     44 16 06 F6 | 	mov	arg03, ##44100
13778     0E 18 C6 F9 | 	decod	arg04, #14
1377c     13 1B 02 F6 | 	mov	arg05, local05
13780     01 1C 66 F6 | 	neg	arg06, #1
13784     46 00 00 FF 
13788     84 E5 85 F1 | 	sub	objptr, ##36228
1378c     34 27 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
13790     0B 00 00 FF 
13794     C0 E4 85 F1 | 	sub	objptr, ##5824
13798                 | LR__1525
13798     52 00 00 FF 
1379c     54 E4 05 F1 | 	add	objptr, ##42068
137a0     F2 12 02 FB | 	rdlong	arg01, objptr
137a4     52 00 00 FF 
137a8     54 E4 85 F1 | 	sub	objptr, ##42068
137ac     3C F8 BF FD | 	call	#_scantochar
137b0     52 00 00 FF 
137b4     5C E4 05 F1 | 	add	objptr, ##42076
137b8     F2 FA 61 FC | 	wrlong	result1, objptr
137bc                 | '   if leds and 2 = 2 then 
137bc     10 E4 85 F1 | 	sub	objptr, #16
137c0     F2 20 0A FB | 	rdlong	local02, objptr wz
137c4     52 00 00 FF 
137c8     4C E4 85 F1 | 	sub	objptr, ##42060
137cc     68 01 90 AD |  if_e	jmp	#LR__1533
137d0                 | '     if key4>96 andalso key4<123 then
137d0     52 00 00 FF 
137d4     5C E4 05 F1 | 	add	objptr, ##42076
137d8     F2 20 02 FB | 	rdlong	local02, objptr
137dc     52 00 00 FF 
137e0     5C E4 85 F1 | 	sub	objptr, ##42076
137e4     61 20 56 F2 | 	cmps	local02, #97 wc
137e8     40 00 90 CD |  if_b	jmp	#LR__1526
137ec     52 00 00 FF 
137f0     5C E4 05 F1 | 	add	objptr, ##42076
137f4     F2 24 02 FB | 	rdlong	local04, objptr
137f8     52 00 00 FF 
137fc     5C E4 85 F1 | 	sub	objptr, ##42076
13800     12 23 02 F6 | 	mov	local03, local04
13804     7B 22 56 F2 | 	cmps	local03, #123 wc
13808     20 00 90 3D |  if_ae	jmp	#LR__1526
1380c     52 00 00 FF 
13810     5C E4 05 F1 | 	add	objptr, ##42076
13814     F2 20 02 FB | 	rdlong	local02, objptr
13818     20 20 86 F1 | 	sub	local02, #32
1381c     F2 20 62 FC | 	wrlong	local02, objptr
13820     52 00 00 FF 
13824     5C E4 85 F1 | 	sub	objptr, ##42076
13828     0C 01 90 FD | 	jmp	#LR__1532
1382c                 | LR__1526
1382c     52 00 00 FF 
13830     5C E4 05 F1 | 	add	objptr, ##42076
13834     F2 20 02 FB | 	rdlong	local02, objptr
13838     52 00 00 FF 
1383c     5C E4 85 F1 | 	sub	objptr, ##42076
13840     41 20 56 F2 | 	cmps	local02, #65 wc
13844     40 00 90 CD |  if_b	jmp	#LR__1527
13848     52 00 00 FF 
1384c     5C E4 05 F1 | 	add	objptr, ##42076
13850     F2 24 02 FB | 	rdlong	local04, objptr
13854     52 00 00 FF 
13858     5C E4 85 F1 | 	sub	objptr, ##42076
1385c     12 23 02 F6 | 	mov	local03, local04
13860     5B 22 56 F2 | 	cmps	local03, #91 wc
13864     20 00 90 3D |  if_ae	jmp	#LR__1527
13868     52 00 00 FF 
1386c     5C E4 05 F1 | 	add	objptr, ##42076
13870     F2 20 02 FB | 	rdlong	local02, objptr
13874     20 20 06 F1 | 	add	local02, #32
13878     F2 20 62 FC | 	wrlong	local02, objptr
1387c     52 00 00 FF 
13880     5C E4 85 F1 | 	sub	objptr, ##42076
13884     B0 00 90 FD | 	jmp	#LR__1531
13888                 | LR__1527
13888     52 00 00 FF 
1388c     5C E4 05 F1 | 	add	objptr, ##42076
13890     F2 20 02 FB | 	rdlong	local02, objptr
13894     52 00 00 FF 
13898     5C E4 85 F1 | 	sub	objptr, ##42076
1389c     17 20 56 F2 | 	cmps	local02, #23 wc
138a0     40 00 90 CD |  if_b	jmp	#LR__1528
138a4     52 00 00 FF 
138a8     5C E4 05 F1 | 	add	objptr, ##42076
138ac     F2 24 02 FB | 	rdlong	local04, objptr
138b0     52 00 00 FF 
138b4     5C E4 85 F1 | 	sub	objptr, ##42076
138b8     12 23 02 F6 | 	mov	local03, local04
138bc     20 22 56 F2 | 	cmps	local03, #32 wc
138c0     20 00 90 3D |  if_ae	jmp	#LR__1528
138c4     52 00 00 FF 
138c8     5C E4 05 F1 | 	add	objptr, ##42076
138cc     F2 20 02 FB | 	rdlong	local02, objptr
138d0     09 20 86 F1 | 	sub	local02, #9
138d4     F2 20 62 FC | 	wrlong	local02, objptr
138d8     52 00 00 FF 
138dc     5C E4 85 F1 | 	sub	objptr, ##42076
138e0     54 00 90 FD | 	jmp	#LR__1530
138e4                 | LR__1528
138e4     52 00 00 FF 
138e8     5C E4 05 F1 | 	add	objptr, ##42076
138ec     F2 20 02 FB | 	rdlong	local02, objptr
138f0     52 00 00 FF 
138f4     5C E4 85 F1 | 	sub	objptr, ##42076
138f8     0E 20 56 F2 | 	cmps	local02, #14 wc
138fc     38 00 90 CD |  if_b	jmp	#LR__1529
13900     52 00 00 FF 
13904     5C E4 05 F1 | 	add	objptr, ##42076
13908     F2 24 02 FB | 	rdlong	local04, objptr
1390c     52 00 00 FF 
13910     5C E4 85 F1 | 	sub	objptr, ##42076
13914     12 23 02 F6 | 	mov	local03, local04
13918     17 22 56 F2 | 	cmps	local03, #23 wc
1391c     52 00 00 CF 
13920     5C E4 05 C1 |  if_b	add	objptr, ##42076
13924     F2 20 02 CB |  if_b	rdlong	local02, objptr
13928     27 20 06 C1 |  if_b	add	local02, #39
1392c     F2 20 62 CC |  if_b	wrlong	local02, objptr
13930     52 00 00 CF 
13934     5C E4 85 C1 |  if_b	sub	objptr, ##42076
13938                 | LR__1529
13938                 | LR__1530
13938                 | LR__1531
13938                 | LR__1532
13938                 | LR__1533
13938                 | '  
13938                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then line$+=chr$(key4): v.putchar(key4)
13938     52 00 00 FF 
1393c     5C E4 05 F1 | 	add	objptr, ##42076
13940     F2 20 02 FB | 	rdlong	local02, objptr
13944     52 00 00 FF 
13948     5C E4 85 F1 | 	sub	objptr, ##42076
1394c     01 20 56 F2 | 	cmps	local02, #1 wc
13950     90 00 90 CD |  if_b	jmp	#LR__1534
13954     52 00 00 FF 
13958     5C E4 05 F1 | 	add	objptr, ##42076
1395c     F2 24 02 FB | 	rdlong	local04, objptr
13960     52 00 00 FF 
13964     5C E4 85 F1 | 	sub	objptr, ##42076
13968     12 23 02 F6 | 	mov	local03, local04
1396c     7F 22 56 F2 | 	cmps	local03, #127 wc
13970     38 E4 05 C1 |  if_b	add	objptr, #56
13974     F2 1E E2 CA |  if_b	rdword	local01, objptr
13978     38 E4 85 C1 |  if_b	sub	objptr, #56
1397c     0F 27 32 C9 |  if_b	getword	local05, local01, #0
13980     FE 26 16 C2 |  if_b	cmp	local05, #254 wc
13984     5C 00 90 3D |  if_ae	jmp	#LR__1534
13988     52 00 00 FF 
1398c     5C E4 05 F1 | 	add	objptr, ##42076
13990     F2 12 02 FB | 	rdlong	arg01, objptr
13994     52 00 00 FF 
13998     5C E4 85 F1 | 	sub	objptr, ##42076
1399c     2C 4B B0 FD | 	call	#__system__Chr_S
139a0     FD 2A 02 F6 | 	mov	local07, result1
139a4     2D 00 00 FF 
139a8     E0 E5 05 F1 | 	add	objptr, ##23520
139ac     F2 12 02 FB | 	rdlong	arg01, objptr
139b0     2D 00 00 FF 
139b4     E0 E5 85 F1 | 	sub	objptr, ##23520
139b8     15 15 02 F6 | 	mov	arg02, local07
139bc     94 29 B0 FD | 	call	#__system___string_concat
139c0     2D 00 00 FF 
139c4     E0 E5 05 F1 | 	add	objptr, ##23520
139c8     F2 FA 61 FC | 	wrlong	result1, objptr
139cc     24 00 00 FF 
139d0     7C E4 05 F1 | 	add	objptr, ##18556
139d4     F2 12 02 FB | 	rdlong	arg01, objptr
139d8     52 00 00 FF 
139dc     5C E4 85 F1 | 	sub	objptr, ##42076
139e0     D4 16 B0 FD | 	call	#_hg010b_spin2_putchar
139e4                 | LR__1534
139e4                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(7) 'end of line reached
139e4     52 00 00 FF 
139e8     5C E4 05 F1 | 	add	objptr, ##42076
139ec     F2 20 02 FB | 	rdlong	local02, objptr
139f0     52 00 00 FF 
139f4     5C E4 85 F1 | 	sub	objptr, ##42076
139f8     01 20 56 F2 | 	cmps	local02, #1 wc
139fc     D0 00 90 CD |  if_b	jmp	#LR__1535
13a00     52 00 00 FF 
13a04     5C E4 05 F1 | 	add	objptr, ##42076
13a08     F2 24 02 FB | 	rdlong	local04, objptr
13a0c     52 00 00 FF 
13a10     5C E4 85 F1 | 	sub	objptr, ##42076
13a14     12 23 02 F6 | 	mov	local03, local04
13a18     7F 22 56 F2 | 	cmps	local03, #127 wc
13a1c     B0 00 90 3D |  if_ae	jmp	#LR__1535
13a20     38 E4 05 F1 | 	add	objptr, #56
13a24     F2 1E E2 FA | 	rdword	local01, objptr
13a28     38 E4 85 F1 | 	sub	objptr, #56
13a2c     0F 27 32 F9 | 	getword	local05, local01, #0
13a30     FE 26 0E F2 | 	cmp	local05, #254 wz
13a34     50 00 00 AF 
13a38     A4 E5 05 A1 |  if_e	add	objptr, ##41380
13a3c     F2 2C 02 AB |  if_e	rdlong	local08, objptr
13a40     50 00 00 AF 
13a44     A4 E5 85 A1 |  if_e	sub	objptr, ##41380
13a48     16 2F 02 A6 |  if_e	mov	local09, local08
13a4c     01 2E 0E A2 |  if_e	cmp	local09, #1 wz
13a50     7C 00 90 5D |  if_ne	jmp	#LR__1535
13a54     04 00 00 FF 
13a58     94 EA 05 F1 | 	add	ptr__dat__, ##2196
13a5c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
13a60     04 00 00 FF 
13a64     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
13a68     56 00 00 FF 
13a6c     44 22 06 F6 | 	mov	local03, ##44100
13a70     0E 24 C6 F9 | 	decod	local04, #14
13a74     00 26 06 F6 | 	mov	local05, #0
13a78     03 00 00 FF 
13a7c     DE 1E 06 F6 | 	mov	local01, ##1758
13a80     07 12 06 F6 | 	mov	arg01, #7
13a84     56 00 00 FF 
13a88     44 16 06 F6 | 	mov	arg03, ##44100
13a8c     0E 18 C6 F9 | 	decod	arg04, #14
13a90     00 1A 06 F6 | 	mov	arg05, #0
13a94     03 00 00 FF 
13a98     DE 1C 06 F6 | 	mov	arg06, ##1758
13a9c     0B 00 00 FF 
13aa0     C0 E4 05 F1 | 	add	objptr, ##5824
13aa4     1C 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
13aa8     0B 00 00 FF 
13aac     C0 E4 85 F1 | 	sub	objptr, ##5824
13ab0     2C 13 06 F6 | 	mov	arg01, #300
13ab4     34 2B B0 FD | 	call	#__system___waitms
13ab8     07 12 06 F6 | 	mov	arg01, #7
13abc     0B 00 00 FF 
13ac0     C0 E4 05 F1 | 	add	objptr, ##5824
13ac4     4C 25 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
13ac8     0B 00 00 FF 
13acc     C0 E4 85 F1 | 	sub	objptr, ##5824
13ad0                 | LR__1535
13ad0                 | '  
13ad0                 | '   'tab
13ad0                 | '   if (key3 and 255) = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)
13ad0     52 00 00 FF 
13ad4     54 E4 05 F1 | 	add	objptr, ##42068
13ad8     F2 20 02 FB | 	rdlong	local02, objptr
13adc     52 00 00 FF 
13ae0     54 E4 85 F1 | 	sub	objptr, ##42068
13ae4     10 21 E2 F8 | 	getbyte	local02, local02, #0
13ae8     2B 20 0E F2 | 	cmp	local02, #43 wz
13aec     B4 00 90 5D |  if_ne	jmp	#LR__1536
13af0     38 E4 05 F1 | 	add	objptr, #56
13af4     F2 24 E2 FA | 	rdword	local04, objptr
13af8     38 E4 85 F1 | 	sub	objptr, #56
13afc     12 23 32 F9 | 	getword	local03, local04, #0
13b00     F0 22 16 F2 | 	cmp	local03, #240 wc
13b04     9C 00 90 CD |  if_b	jmp	#LR__1536
13b08     50 00 00 FF 
13b0c     A4 E5 05 F1 | 	add	objptr, ##41380
13b10     F2 1E 02 FB | 	rdlong	local01, objptr
13b14     50 00 00 FF 
13b18     A4 E5 85 F1 | 	sub	objptr, ##41380
13b1c     0F 27 02 F6 | 	mov	local05, local01
13b20     01 26 0E F2 | 	cmp	local05, #1 wz
13b24     7C 00 90 5D |  if_ne	jmp	#LR__1536
13b28     04 00 00 FF 
13b2c     94 EA 05 F1 | 	add	ptr__dat__, ##2196
13b30     F5 14 02 F6 | 	mov	arg02, ptr__dat__
13b34     04 00 00 FF 
13b38     94 EA 85 F1 | 	sub	ptr__dat__, ##2196
13b3c     56 00 00 FF 
13b40     44 22 06 F6 | 	mov	local03, ##44100
13b44     0E 24 C6 F9 | 	decod	local04, #14
13b48     00 26 06 F6 | 	mov	local05, #0
13b4c     03 00 00 FF 
13b50     DE 1E 06 F6 | 	mov	local01, ##1758
13b54     00 12 06 F6 | 	mov	arg01, #0
13b58     56 00 00 FF 
13b5c     44 16 06 F6 | 	mov	arg03, ##44100
13b60     0E 18 C6 F9 | 	decod	arg04, #14
13b64     00 1A 06 F6 | 	mov	arg05, #0
13b68     03 00 00 FF 
13b6c     DE 1C 06 F6 | 	mov	arg06, ##1758
13b70     0B 00 00 FF 
13b74     C0 E4 05 F1 | 	add	objptr, ##5824
13b78     48 23 B0 FD | 	call	#_Audio093b_8_sc_spin2_play
13b7c     0B 00 00 FF 
13b80     C0 E4 85 F1 | 	sub	objptr, ##5824
13b84     2C 13 06 F6 | 	mov	arg01, #300
13b88     60 2A B0 FD | 	call	#__system___waitms
13b8c     00 12 06 F6 | 	mov	arg01, #0
13b90     0B 00 00 FF 
13b94     C0 E4 05 F1 | 	add	objptr, ##5824
13b98     78 24 B0 FD | 	call	#_Audio093b_8_sc_spin2_stop
13b9c     0B 00 00 FF 
13ba0     C0 E4 85 F1 | 	sub	objptr, ##5824
13ba4                 | LR__1536
13ba4                 | '   if (key3 and 255) = 43 andalso v.cursor_x<240 then let x=(v.cursor_x mod 16)/2: for i=x to 7: line$+=" " :  v.write (" ") : next i  
13ba4     52 00 00 FF 
13ba8     54 E4 05 F1 | 	add	objptr, ##42068
13bac     F2 20 02 FB | 	rdlong	local02, objptr
13bb0     52 00 00 FF 
13bb4     54 E4 85 F1 | 	sub	objptr, ##42068
13bb8     10 21 E2 F8 | 	getbyte	local02, local02, #0
13bbc     2B 20 0E F2 | 	cmp	local02, #43 wz
13bc0     AC 00 90 5D |  if_ne	jmp	#LR__1539
13bc4     38 E4 05 F1 | 	add	objptr, #56
13bc8     F2 24 E2 FA | 	rdword	local04, objptr
13bcc     38 E4 85 F1 | 	sub	objptr, #56
13bd0     12 23 32 F9 | 	getword	local03, local04, #0
13bd4     F0 22 16 F2 | 	cmp	local03, #240 wc
13bd8     94 00 90 3D |  if_ae	jmp	#LR__1539
13bdc     38 E4 05 F1 | 	add	objptr, #56
13be0     F2 20 E2 FA | 	rdword	local02, objptr
13be4     10 23 52 F6 | 	abs	local03, local02 wc
13be8     11 23 42 F8 | 	getnib	local03, local03, #0
13bec     11 23 82 F6 | 	negc	local03, local03
13bf0     11 25 52 F6 | 	abs	local04, local03 wc
13bf4     01 24 46 F0 | 	shr	local04, #1
13bf8     12 25 82 F6 | 	negc	local04, local04
13bfc     52 00 00 FF 
13c00     28 E4 05 F1 | 	add	objptr, ##42024
13c04     F2 24 62 FC | 	wrlong	local04, objptr
13c08     12 31 02 F6 | 	mov	local10, local04
13c0c     52 00 00 FF 
13c10     60 E4 85 F1 | 	sub	objptr, ##42080
13c14                 | LR__1537
13c14     08 30 56 F2 | 	cmps	local10, #8 wc
13c18     54 00 90 3D |  if_ae	jmp	#LR__1538
13c1c     2D 00 00 FF 
13c20     E0 E5 05 F1 | 	add	objptr, ##23520
13c24     F2 12 02 FB | 	rdlong	arg01, objptr
13c28     2D 00 00 FF 
13c2c     E0 E5 85 F1 | 	sub	objptr, ##23520
13c30     2E 01 00 FF 
13c34     0B 25 06 F6 | 	mov	local04, ##@LR__4405
13c38     12 15 02 F6 | 	mov	arg02, local04
13c3c     14 27 B0 FD | 	call	#__system___string_concat
13c40     2D 00 00 FF 
13c44     E0 E5 05 F1 | 	add	objptr, ##23520
13c48     F2 FA 61 FC | 	wrlong	result1, objptr
13c4c     2D 00 00 FF 
13c50     E0 E5 85 F1 | 	sub	objptr, ##23520
13c54     2E 01 00 FF 
13c58     0D 13 06 F6 | 	mov	arg01, ##@LR__4406
13c5c     74 16 B0 FD | 	call	#_hg010b_spin2_write
13c60     18 23 02 F6 | 	mov	local03, local10
13c64     01 22 06 F1 | 	add	local03, #1
13c68     11 31 02 F6 | 	mov	local10, local03
13c6c     A4 FF 9F FD | 	jmp	#LR__1537
13c70                 | LR__1538
13c70                 | LR__1539
13c70                 | '  
13c70                 | '   'backspace
13c70                 | '   if (key3 and 255) = 42 then 
13c70     52 00 00 FF 
13c74     54 E4 05 F1 | 	add	objptr, ##42068
13c78     F2 20 02 FB | 	rdlong	local02, objptr
13c7c     52 00 00 FF 
13c80     54 E4 85 F1 | 	sub	objptr, ##42068
13c84     10 21 E2 F8 | 	getbyte	local02, local02, #0
13c88     2A 20 0E F2 | 	cmp	local02, #42 wz
13c8c     D4 00 90 5D |  if_ne	jmp	#LR__1544
13c90                 | '       if v.cursor_x>4 then 
13c90     38 E4 05 F1 | 	add	objptr, #56
13c94     F2 20 E2 FA | 	rdword	local02, objptr
13c98     38 E4 85 F1 | 	sub	objptr, #56
13c9c     05 20 16 F2 | 	cmp	local02, #5 wc
13ca0     9C 00 90 CD |  if_b	jmp	#LR__1542
13ca4     2D 00 00 FF 
13ca8     E0 E5 05 F1 | 	add	objptr, ##23520
13cac     F2 26 02 FB | 	rdlong	local05, objptr
13cb0     2D 00 00 FF 
13cb4     E0 E5 85 F1 | 	sub	objptr, ##23520
13cb8     13 13 02 F6 | 	mov	arg01, local05
13cbc     09 33 02 F6 | 	mov	local11, arg01
13cc0     97 06 48 FB | 	callpa	#(@LR__1541-@LR__1540)>>2,fcache_load_ptr_
13cc4                 | LR__1540
13cc4     19 FB C9 FA | 	rdbyte	result1, local11 wz
13cc8     01 32 06 51 |  if_ne	add	local11, #1
13ccc     F4 FF 9F 5D |  if_ne	jmp	#LR__1540
13cd0                 | LR__1541
13cd0     09 33 82 F1 | 	sub	local11, arg01
13cd4     19 15 02 F6 | 	mov	arg02, local11
13cd8     01 14 86 F1 | 	sub	arg02, #1
13cdc     13 13 02 F6 | 	mov	arg01, local05
13ce0     24 46 B0 FD | 	call	#__system__Left_S
13ce4     2D 00 00 FF 
13ce8     E0 E5 05 F1 | 	add	objptr, ##23520
13cec     F2 FA 61 FC | 	wrlong	result1, objptr
13cf0     2D 00 00 FF 
13cf4     A8 E5 85 F1 | 	sub	objptr, ##23464
13cf8     F2 12 E2 FA | 	rdword	arg01, objptr
13cfc     02 12 86 F1 | 	sub	arg01, #2
13d00     02 E4 05 F1 | 	add	objptr, #2
13d04     F2 14 C2 FA | 	rdbyte	arg02, objptr
13d08     3A E4 85 F1 | 	sub	objptr, #58
13d0c     60 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
13d10     20 12 06 F6 | 	mov	arg01, #32
13d14     A0 13 B0 FD | 	call	#_hg010b_spin2_putchar
13d18     38 E4 05 F1 | 	add	objptr, #56
13d1c     F2 12 E2 FA | 	rdword	arg01, objptr
13d20     02 12 86 F1 | 	sub	arg01, #2
13d24     02 E4 05 F1 | 	add	objptr, #2
13d28     F2 24 C2 FA | 	rdbyte	local04, objptr
13d2c     3A E4 85 F1 | 	sub	objptr, #58
13d30     12 23 E2 F8 | 	getbyte	local03, local04, #0
13d34     11 15 02 F6 | 	mov	arg02, local03
13d38     34 12 B0 FD | 	call	#_hg010b_spin2_setcursorpos
13d3c     24 00 90 FD | 	jmp	#LR__1543
13d40                 | LR__1542
13d40     2E 01 00 FF 
13d44     0F 21 06 F6 | 	mov	local02, ##@LR__4407
13d48     2D 00 00 FF 
13d4c     E0 E5 05 F1 | 	add	objptr, ##23520
13d50     F2 20 62 FC | 	wrlong	local02, objptr
13d54     2D 00 00 FF 
13d58     A8 E5 85 F1 | 	sub	objptr, ##23464
13d5c     F2 08 58 FC | 	wrword	#4, objptr
13d60     38 E4 85 F1 | 	sub	objptr, #56
13d64                 | LR__1543
13d64                 | LR__1544
13d64                 | '    
13d64                 | '  ' To do: arrows and DEL; use textscreen array to implement fullscreen editing
13d64                 | '  
13d64                 | '   if key4=key_enter then 
13d64     52 00 00 FF 
13d68     5C E4 05 F1 | 	add	objptr, ##42076
13d6c     F2 28 02 FB | 	rdlong	local06, objptr
13d70     52 00 00 FF 
13d74     5C E4 85 F1 | 	sub	objptr, ##42076
13d78     8D 28 0E F2 | 	cmp	local06, #141 wz
13d7c     50 00 90 5D |  if_ne	jmp	#LR__1545
13d80     B0 16 B0 FD | 	call	#_hg010b_spin2_crlf
13d84     94 CC BE FD | 	call	#_interpret
13d88     2E 01 00 FF 
13d8c     10 21 06 F6 | 	mov	local02, ##@LR__4408
13d90     2D 00 00 FF 
13d94     E0 E5 05 F1 | 	add	objptr, ##23520
13d98     F2 20 62 FC | 	wrlong	local02, objptr
13d9c     1A FA 61 FD | 	getct	result1
13da0     24 00 00 FF 
13da4     84 E4 05 F1 | 	add	objptr, ##18564
13da8     F2 24 02 FB | 	rdlong	local04, objptr
13dac     12 23 02 F6 | 	mov	local03, local04
13db0     11 FB 81 F1 | 	sub	result1, local03
13db4     F2 FA 61 FC | 	wrlong	result1, objptr
13db8     14 E4 85 F1 | 	sub	objptr, #20
13dbc     F2 00 68 FC | 	wrlong	#0, objptr
13dc0     08 E4 05 F1 | 	add	objptr, #8
13dc4     F2 00 68 FC | 	wrlong	#0, objptr
13dc8     52 00 00 FF 
13dcc     58 E4 85 F1 | 	sub	objptr, ##42072
13dd0                 | LR__1545
13dd0     52 00 00 FF 
13dd4     54 E4 05 F1 | 	add	objptr, ##42068
13dd8     F2 00 68 FC | 	wrlong	#0, objptr
13ddc     52 00 00 FF 
13de0     54 E4 85 F1 | 	sub	objptr, ##42068
13de4     98 F6 9F FD | 	jmp	#LR__1520
13de8     A7 F0 03 F6 | 	mov	ptra, fp
13dec     B2 00 A0 FD | 	call	#popregs_
13df0                 | _program_ret
13df0     2D 00 64 FD | 	ret
13df4                 | 
13df4                 | ' '' this is not a main program.
13df4                 | ' 
13df4                 | ' '****************************************************************************************************************
13df4                 | ' '                                                                                                             	*
13df4                 | ' 'Start the driver with graphics mode 'mode' at pins 'base'                            		rev 20220320 	*
13df4                 | ' '                                                                                                            	*
13df4                 | ' ' mode - mode #, see below											*
13df4                 | ' ' base - HDMI base pin												*
13df4                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
13df4                 | ' '														*
13df4                 | ' '' mode number: :  %p_tn_bb_cc_vv_hh										*
13df4                 | ' '' set bit #15 for custom timings														*
13df4                 | ' '' p - 1 - psram, 0 - hub											*
13df4                 | ' '' t - 1 - graphics, 0 - text											*
13df4                 | ' '' n - 1 - 60 Hz,  0 - 50 Hz 											*
13df4                 | ' '' hh - h.zoom, vv-v.zoom, cc-color depth if graphic, unused in text,						*
13df4                 | ' '' bb - borders, 00-wide, 01 medium, 10 no border, 11 no border, extended resolution (1024x576/896x496)		*
13df4                 | ' '														*
13df4                 | ' '****************************************************************************************************************
13df4                 | ' 
13df4                 | ' pub start(base,mb):result |i
13df4                 | _hg010b_spin2_start
13df4                 | ' 
13df4                 | ' '--------------------------- initialize pointers and variables
13df4                 | ' 
13df4                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
13df4     30 E4 05 F1 | 	add	objptr, #48
13df8     F2 FA 01 F6 | 	mov	result1, objptr
13dfc     28 E4 85 F1 | 	sub	objptr, #40
13e00     F2 FA 61 FC | 	wrlong	result1, objptr
13e04                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
13e04                 | ' hdmibase:=base							' HDMI base pin, 8*n
13e04     18 E4 05 F1 | 	add	objptr, #24
13e08     F2 12 62 FC | 	wrlong	arg01, objptr
13e0c                 | ' mailbox_ptr:=mb		
13e0c     04 E4 05 F1 | 	add	objptr, #4
13e10     F2 14 62 FC | 	wrlong	arg02, objptr
13e14                 | ' mailbox0:=mb				' PSRAM mailbox pointer
13e14     C1 E5 05 F1 | 	add	objptr, #449
13e18     F2 14 62 FC | 	wrlong	arg02, objptr
13e1c                 | ' sprite_ptr:=@spr1ptr
13e1c     D8 E4 85 F1 | 	sub	objptr, #216
13e20     F2 FA 01 F6 | 	mov	result1, objptr
13e24     E5 E4 85 F1 | 	sub	objptr, #229
13e28     F2 FA 61 FC | 	wrlong	result1, objptr
13e2c                 | ' 
13e2c                 | ' 		'
13e2c                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
13e2c     E5 E4 05 F1 | 	add	objptr, #229
13e30     F2 FA 01 FB | 	rdlong	result1, objptr
13e34     D0 FA 05 F1 | 	add	result1, #208
13e38     FD 10 58 FC | 	wrword	#8, result1
13e3c                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
13e3c     F2 16 02 FB | 	rdlong	arg03, objptr
13e40     D2 16 06 F1 | 	add	arg03, #210
13e44     0B 21 58 FC | 	wrword	#16, arg03
13e48                 | ' leading_spaces:=0				'
13e48     A5 E5 05 F1 | 	add	objptr, #421
13e4c     F2 00 68 FC | 	wrlong	#0, objptr
13e50                 | ' 
13e50                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
13e50     99 E4 85 F1 | 	sub	objptr, #153
13e54     00 00 A0 FF 
13e58     F2 0E 68 FC | 	wrlong	##1073741831, objptr
13e5c                 | ' emptydl[1]:=0
13e5c     04 E4 05 F1 | 	add	objptr, #4
13e60     F2 00 68 FC | 	wrlong	#0, objptr
13e64                 | ' 
13e64                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
13e64                 | ' 
13e64                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
13e64     28 E5 85 F1 | 	sub	objptr, #296
13e68     F2 02 68 FC | 	wrlong	#1, objptr
13e6c                 | ' if s_debug<>0
13e6c                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
13e6c     20 00 80 FF 
13e70     F2 00 68 FC | 	wrlong	##16384, objptr
13e74     F5 E4 85 F1 | 	sub	objptr, #245
13e78                 | ' setmode()							' set the mode, see below
13e78     A4 01 B0 FD | 	call	#_hg010b_spin2_setmode
13e7c                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
13e7c     45 E4 05 F1 | 	add	objptr, #69
13e80     F2 FA 01 F6 | 	mov	result1, objptr
13e84     35 E4 85 F1 | 	sub	objptr, #53
13e88     F2 FA 61 FC | 	wrlong	result1, objptr
13e8c                 | ' cursor_ptr:=@cursor_x						
13e8c     28 E4 05 F1 | 	add	objptr, #40
13e90     F2 16 02 F6 | 	mov	arg03, objptr
13e94     2C E4 85 F1 | 	sub	objptr, #44
13e98     F2 16 62 FC | 	wrlong	arg03, objptr
13e9c                 | ' fontnum:=0  							' start with a PC type font 
13e9c     55 E4 05 F1 | 	add	objptr, #85
13ea0     F2 00 68 FC | 	wrlong	#0, objptr
13ea4                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
13ea4     1C E4 05 F1 | 	add	objptr, #28
13ea8     F2 12 02 F6 | 	mov	arg01, objptr
13eac     7D E4 85 F1 | 	sub	objptr, #125
13eb0     10 00 00 FF 
13eb4     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
13eb8     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
13ebc     10 00 00 FF 
13ec0     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
13ec4     10 16 06 F6 | 	mov	arg03, #16
13ec8     4C 23 B0 FD | 	call	#__system____builtin_memmove
13ecc                 | ' leading_spaces:=0
13ecc     01 00 00 FF 
13ed0     B2 E4 05 F1 | 	add	objptr, ##690
13ed4     F2 00 68 FC | 	wrlong	#0, objptr
13ed8     01 00 00 FF 
13edc     B2 E4 85 F1 | 	sub	objptr, ##690
13ee0                 | ' '---------------------------- initialize a cursor (MSDOS type)
13ee0                 | ' 
13ee0                 | ' initcursor(154)
13ee0     9A 12 06 F6 | 	mov	arg01, #154
13ee4     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
13ee8                 | ' 
13ee8                 | ' '---------------------------- start the cog
13ee8                 | ' 
13ee8                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
13ee8     10 00 00 FF 
13eec     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
13ef0     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
13ef4     10 00 00 FF 
13ef8     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
13efc     10 E4 05 F1 | 	add	objptr, #16
13f00     10 FA 05 F6 | 	mov	result1, #16
13f04     28 E4 61 FD | 	setq	objptr
13f08     0A FB F1 FC | 	coginit	result1, arg02 wc
13f0c     01 FA 65 C6 |  if_b	neg	result1, #1
13f10     1C E4 05 F1 | 	add	objptr, #28
13f14     F2 FA 61 FC | 	wrlong	result1, objptr
13f18     2C E4 85 F1 | 	sub	objptr, #44
13f1c                 | ' waitms(40)							' wait for stabilize
13f1c     28 12 06 F6 | 	mov	arg01, #40
13f20     C8 26 B0 FD | 	call	#__system___waitms
13f24                 | ' return cog							' return the driver's cog #
13f24     2C E4 05 F1 | 	add	objptr, #44
13f28     F2 FA 01 FB | 	rdlong	result1, objptr
13f2c     2C E4 85 F1 | 	sub	objptr, #44
13f30                 | _hg010b_spin2_start_ret
13f30     2D 00 64 FD | 	ret
13f34                 | 
13f34                 | ' 
13f34                 | ' 
13f34                 | ' '**************************************************************************************************************** 
13f34                 | ' '                                                                                                             	*
13f34                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
13f34                 | ' '  Mode number - see start() above or bits below								*
13f34                 | ' '                                                                                                             	*
13f34                 | ' '****************************************************************************************************************
13f34                 | ' 
13f34                 | ' '---------------------------- initialize a cursor (MSDOS type)
13f34                 | ' pub initcursor(color) |i
13f34                 | _hg010b_spin2_initcursor
13f34     03 4A 05 F6 | 	mov	COUNT_, #3
13f38     A8 00 A0 FD | 	call	#pushregs_
13f3c     09 1F 02 F6 | 	mov	local01, arg01
13f40                 | ' 
13f40                 | ' cursor_x:=0							' place the cursor at 0:0
13f40     38 E4 05 F1 | 	add	objptr, #56
13f44     F2 00 58 FC | 	wrword	#0, objptr
13f48                 | ' cursor_y:=0
13f48     02 E4 05 F1 | 	add	objptr, #2
13f4c     F2 00 48 FC | 	wrbyte	#0, objptr
13f50                 | ' repeat i from 0 to 111
13f50     00 20 06 F6 | 	mov	local02, #0
13f54     F8 E5 05 F1 | 	add	objptr, #504
13f58     97 1A 48 FB | 	callpa	#(@LR__1552-@LR__1550)>>2,fcache_load_ptr_
13f5c                 | LR__1550
13f5c                 | '   cursor[i]:=0
13f5c     10 23 02 F6 | 	mov	local03, local02
13f60     F2 22 02 F1 | 	add	local03, objptr
13f64     11 01 48 FC | 	wrbyte	#0, local03
13f68     01 20 06 F1 | 	add	local02, #1
13f6c     70 20 56 F2 | 	cmps	local02, #112 wc
13f70     E8 FF 9F CD |  if_b	jmp	#LR__1550
13f74                 | ' repeat i from 112 to 127
13f74     70 20 06 F6 | 	mov	local02, #112
13f78                 | LR__1551
13f78                 | '   cursor[i]:=color  
13f78     10 23 02 F6 | 	mov	local03, local02
13f7c     F2 22 02 F1 | 	add	local03, objptr
13f80     11 1F 42 FC | 	wrbyte	local01, local03
13f84     01 20 06 F1 | 	add	local02, #1
13f88     80 20 16 F2 | 	cmp	local02, #128 wc
13f8c     E8 FF 9F CD |  if_b	jmp	#LR__1551
13f90                 | LR__1552
13f90                 | ' 'repeat i from 0 to 127
13f90                 | ' '  if ((i/8)//2)
13f90                 | ' '    cursor[i]:=15
13f90                 | ' '  else
13f90                 | ' '    cursor[i]:=0
13f90                 | ' '  if i>=120    
13f90                 | ' '    cursor[i]:=40
13f90                 | ' setspriteptr(17,@cursor)
13f90     F2 14 02 F6 | 	mov	arg02, objptr
13f94     01 00 00 FF 
13f98     32 E4 85 F1 | 	sub	objptr, ##562
13f9c     11 12 06 F6 | 	mov	arg01, #17
13fa0     48 03 B0 FD | 	call	#_hg010b_spin2_setspriteptr
13fa4                 | ' setspritesize(17,8,16)
13fa4     11 12 06 F6 | 	mov	arg01, #17
13fa8     08 14 06 F6 | 	mov	arg02, #8
13fac     10 16 06 F6 | 	mov	arg03, #16
13fb0     AC 03 B0 FD | 	call	#_hg010b_spin2_setspritesize
13fb4                 | ' setspritepos(17,0,0)
13fb4     11 12 06 F6 | 	mov	arg01, #17
13fb8     00 14 06 F6 | 	mov	arg02, #0
13fbc     00 16 06 F6 | 	mov	arg03, #0
13fc0     50 03 B0 FD | 	call	#_hg010b_spin2_setspritepos
13fc4     A7 F0 03 F6 | 	mov	ptra, fp
13fc8     B2 00 A0 FD | 	call	#popregs_
13fcc                 | _hg010b_spin2_initcursor_ret
13fcc     2D 00 64 FD | 	ret
13fd0                 | 
13fd0                 | ' 
13fd0                 | '  
13fd0                 | ' pub setcursorcolor(color) |i
13fd0                 | _hg010b_spin2_setcursorcolor
13fd0                 | ' 
13fd0                 | ' 
13fd0                 | ' repeat i from 0 to 111
13fd0     00 00 06 F6 | 	mov	_var01, #0
13fd4     01 00 00 FF 
13fd8     32 E4 05 F1 | 	add	objptr, ##562
13fdc     97 1A 48 FB | 	callpa	#(@LR__1562-@LR__1560)>>2,fcache_load_ptr_
13fe0                 | LR__1560
13fe0                 | '   cursor[i]:=0
13fe0     00 03 02 F6 | 	mov	_var02, _var01
13fe4     F2 02 02 F1 | 	add	_var02, objptr
13fe8     01 01 48 FC | 	wrbyte	#0, _var02
13fec     01 00 06 F1 | 	add	_var01, #1
13ff0     70 00 56 F2 | 	cmps	_var01, #112 wc
13ff4     E8 FF 9F CD |  if_b	jmp	#LR__1560
13ff8                 | ' repeat i from 112 to 127
13ff8     70 00 06 F6 | 	mov	_var01, #112
13ffc                 | LR__1561
13ffc                 | '   cursor[i]:=color  
13ffc     00 03 02 F6 | 	mov	_var02, _var01
14000     F2 02 02 F1 | 	add	_var02, objptr
14004     01 13 42 FC | 	wrbyte	arg01, _var02
14008     01 00 06 F1 | 	add	_var01, #1
1400c     80 00 16 F2 | 	cmp	_var01, #128 wc
14010     E8 FF 9F CD |  if_b	jmp	#LR__1561
14014                 | LR__1562
14014     01 00 00 FF 
14018     32 E4 85 F1 | 	sub	objptr, ##562
1401c                 | _hg010b_spin2_setcursorcolor_ret
1401c     2D 00 64 FD | 	ret
14020                 | 
14020                 | '  
14020                 | ' 
14020                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
14020                 | _hg010b_spin2_setmode
14020     02 4A 05 F6 | 	mov	COUNT_, #2
14024     A8 00 A0 FD | 	call	#pushregs_
14028                 | ' 
14028                 | ' 
14028                 | ' dl_ptr:=@emptydl[0]
14028     01 00 00 FF 
1402c     19 E4 05 F1 | 	add	objptr, ##537
14030     F2 62 02 F6 | 	mov	muldivb_, objptr
14034     FD E5 85 F1 | 	sub	objptr, #509
14038     F2 62 62 FC | 	wrlong	muldivb_, objptr
1403c                 | ' 
1403c                 | ' if cog>0 
1403c     10 E4 05 F1 | 	add	objptr, #16
14040     F2 62 02 FB | 	rdlong	muldivb_, objptr
14044     2C E4 85 F1 | 	sub	objptr, #44
14048     01 62 56 F2 | 	cmps	muldivb_, #1 wc
1404c                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1404c     01 12 06 36 |  if_ae	mov	arg01, #1
14050     54 0F B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
14054                 | ' xres:=1024
14054     01 00 00 FF 
14058     22 E4 05 F1 | 	add	objptr, ##546
1405c     02 00 80 FF 
14060     F2 00 68 FC | 	wrlong	##1024, objptr
14064                 | ' yres:=576  
14064     04 E4 05 F1 | 	add	objptr, #4
14068     01 00 80 FF 
1406c     F2 80 68 FC | 	wrlong	##576, objptr
14070                 | ' ppl:=(timings[3])
14070     10 00 00 FF 
14074     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
14078     F7 62 02 FB | 	rdlong	muldivb_, ptr__hg010b_spin2_dat__
1407c     51 E5 85 F1 | 	sub	objptr, #337
14080     F2 62 62 FC | 	wrlong	muldivb_, objptr
14084                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
14084     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
14088     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1408c     01 1E 66 F0 | 	shl	local01, #1
14090     80 E4 85 F1 | 	sub	objptr, #128
14094     F2 1E 62 FC | 	wrlong	local01, objptr
14098                 | ' cpl1:=cpl '' todo remove
14098     04 E4 05 F1 | 	add	objptr, #4
1409c     F2 1E 62 FC | 	wrlong	local01, objptr
140a0                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
140a0     02 00 00 FF 
140a4     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
140a8     41 E4 85 F1 | 	sub	objptr, #65
140ac     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
140b0                 | ' repeat i from 0 to 3
140b0     00 20 06 F6 | 	mov	local02, #0
140b4     02 00 00 FF 
140b8     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
140bc     08 E4 05 F1 | 	add	objptr, #8
140c0     97 20 48 FB | 	callpa	#(@LR__1571-@LR__1570)>>2,fcache_load_ptr_
140c4                 | LR__1570
140c4                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
140c4     10 1F 02 F6 | 	mov	local01, local02
140c8     02 1E 66 F0 | 	shl	local01, #2
140cc     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
140d0     F2 62 02 FB | 	rdlong	muldivb_, objptr
140d4     11 62 66 F0 | 	shl	muldivb_, #17
140d8     0F 1F 02 FB | 	rdlong	local01, local01
140dc     31 1F 02 F1 | 	add	local01, muldivb_
140e0     80 40 38 FF 
140e4     00 1E 06 F1 | 	add	local01, ##1887502336
140e8     10 63 02 F6 | 	mov	muldivb_, local02
140ec     02 62 66 F0 | 	shl	muldivb_, #2
140f0     F7 62 02 F1 | 	add	muldivb_, ptr__hg010b_spin2_dat__
140f4     31 1F 62 FC | 	wrlong	local01, muldivb_
140f8     01 20 06 F1 | 	add	local02, #1
140fc     04 20 56 F2 | 	cmps	local02, #4 wc
14100     C0 FF 9F CD |  if_b	jmp	#LR__1570
14104                 | LR__1571
14104     20 E4 85 F1 | 	sub	objptr, #32
14108                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
14108     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1410c     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
14110     14 1E 66 FC | 	wrlong	local01, #20
14114                 | ' hubset(timings[10])
14114     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
14118     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1411c     10 00 00 FF 
14120     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
14124     00 12 62 FD | 	hubset	arg01
14128                 | ' waitms(1)                                                   	' wait for stabilization
14128     01 12 06 F6 | 	mov	arg01, #1
1412c     BC 24 B0 FD | 	call	#__system___waitms
14130     10 00 00 FF 
14134     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
14138     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1413c     5D E4 05 F1 | 	add	objptr, #93
14140     F2 20 62 FC | 	wrlong	local02, objptr
14144     10 1F 52 F6 | 	abs	local01, local02 wc
14148     04 1E 46 F0 | 	shr	local01, #4
1414c     0F 1F 82 F6 | 	negc	local01, local01
14150     9C E4 05 F1 | 	add	objptr, #156
14154     F2 1E 62 FC | 	wrlong	local01, objptr
14158     A4 E4 85 F1 | 	sub	objptr, #164
1415c     F2 20 02 FB | 	rdlong	local02, objptr
14160     08 E4 05 F1 | 	add	objptr, #8
14164     F2 1E 02 FB | 	rdlong	local01, objptr
14168     0F 21 02 FD | 	qmul	local02, local01
1416c                 | ' lines:=timings[11]
1416c                 | ' t_lines:=lines/16
1416c                 | ' buflen:=cpl*lines						' framebuffer length in longs
1416c     29 E4 85 F1 | 	sub	objptr, #41
14170                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
14170     19 1E C6 F9 | 	decod	local01, #25
14174                 | ' mode_ptr:=@timings						' set pointers to timings
14174     2C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #44
14178                 | ' graphmode:=1024+512+192+48							' det global variable
14178                 | ' makedl(graphmode)							' make a DL for the mode
14178     03 00 00 FF 
1417c     F0 12 06 F6 | 	mov	arg01, ##1776
14180     18 20 62 FD | 	getqx	local02
14184     F2 20 62 FC | 	wrlong	local02, objptr
14188     34 E4 85 F1 | 	sub	objptr, #52
1418c     02 20 66 F0 | 	shl	local02, #2
14190     10 1F 82 F1 | 	sub	local01, local02
14194     F2 1E 62 FC | 	wrlong	local01, objptr
14198     14 E4 05 F1 | 	add	objptr, #20
1419c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
141a0     79 E4 05 F1 | 	add	objptr, #121
141a4     03 00 80 FF 
141a8     F2 E0 69 FC | 	wrlong	##1776, objptr
141ac     8D E4 85 F1 | 	sub	objptr, #141
141b0     10 00 00 FF 
141b4     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
141b8     AC 00 B0 FD | 	call	#_hg010b_spin2_makedl
141bc                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
141bc     F2 1E 02 FB | 	rdlong	local01, objptr
141c0     D9 E4 05 F1 | 	add	objptr, #217
141c4     F2 1E 62 FC | 	wrlong	local01, objptr
141c8                 | ' s_font_ptr:=font_ptr
141c8     D5 E4 85 F1 | 	sub	objptr, #213
141cc     F2 1E 02 FB | 	rdlong	local01, objptr
141d0     D9 E4 05 F1 | 	add	objptr, #217
141d4     F2 1E 62 FC | 	wrlong	local01, objptr
141d8                 | ' s_lines:=lines
141d8     80 E4 85 F1 | 	sub	objptr, #128
141dc     F2 1E 02 FB | 	rdlong	local01, objptr
141e0     84 E4 05 F1 | 	add	objptr, #132
141e4     F2 1E 62 FC | 	wrlong	local01, objptr
141e8                 | ' s_buflen:=buflen
141e8     AD E4 85 F1 | 	sub	objptr, #173
141ec     F2 1E 02 FB | 	rdlong	local01, objptr
141f0     B5 E4 05 F1 | 	add	objptr, #181
141f4     F2 1E 62 FC | 	wrlong	local01, objptr
141f8                 | ' s_cpl:=cpl
141f8     94 E4 85 F1 | 	sub	objptr, #148
141fc     F2 1E 02 FB | 	rdlong	local01, objptr
14200     90 E4 05 F1 | 	add	objptr, #144
14204     F2 1E 62 FC | 	wrlong	local01, objptr
14208                 | ' s_cpl1:=cpl
14208     90 E4 85 F1 | 	sub	objptr, #144
1420c     F2 1E 02 FB | 	rdlong	local01, objptr
14210     98 E4 05 F1 | 	add	objptr, #152
14214     F2 1E 62 FC | 	wrlong	local01, objptr
14218                 | ' st_lines:=t_lines
14218     0C E4 05 F1 | 	add	objptr, #12
1421c     F2 1E 02 FB | 	rdlong	local01, objptr
14220     04 E4 05 F1 | 	add	objptr, #4
14224     F2 1E 62 FC | 	wrlong	local01, objptr
14228                 | ' ppl:=ppl/xzoom  
14228     28 E4 85 F1 | 	sub	objptr, #40
1422c     F2 60 02 FB | 	rdlong	muldiva_, objptr
14230     2C E4 05 F1 | 	add	objptr, #44
14234     F2 62 02 FB | 	rdlong	muldivb_, objptr
14238     01 E5 85 F1 | 	sub	objptr, #257
1423c     BA 00 A0 FD | 	call	#divide_
14240     D5 E4 05 F1 | 	add	objptr, #213
14244     F2 62 62 FC | 	wrlong	muldivb_, objptr
14248                 | ' s_ppl:=ppl
14248     1C E4 05 F1 | 	add	objptr, #28
1424c     F2 62 62 FC | 	wrlong	muldivb_, objptr
14250     F1 E4 85 F1 | 	sub	objptr, #241
14254                 | ' waitms(20)							' wait 
14254     14 12 06 F6 | 	mov	arg01, #20
14258     90 23 B0 FD | 	call	#__system___waitms
1425c     A7 F0 03 F6 | 	mov	ptra, fp
14260     B2 00 A0 FD | 	call	#popregs_
14264                 | _hg010b_spin2_setmode_ret
14264     2D 00 64 FD | 	ret
14268                 | 
14268                 | ' 
14268                 | ' 
14268                 | ' '****************************************************************************************************************
14268                 | ' '                                                                                                             	*
14268                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
14268                 | ' '                                                                                                             	*
14268                 | ' '****************************************************************************************************************
14268                 | ' 
14268                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
14268                 | _hg010b_spin2_makedl
14268                 | ' 
14268                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
14268                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
14268                 | ' repeat i from 0 to 11                                                           ' clear DL
14268     00 00 06 F6 | 	mov	_var01, #0
1426c     E9 E5 05 F1 | 	add	objptr, #489
14270     97 0E 48 FB | 	callpa	#(@LR__1581-@LR__1580)>>2,fcache_load_ptr_
14274                 | LR__1580
14274                 | '   displaylist[i]:=0 
14274     00 03 02 F6 | 	mov	_var02, _var01
14278     02 02 66 F0 | 	shl	_var02, #2
1427c     F2 02 02 F1 | 	add	_var02, objptr
14280     01 01 68 FC | 	wrlong	#0, _var02
14284     01 00 06 F1 | 	add	_var01, #1
14288     0C 00 56 F2 | 	cmps	_var01, #12 wc
1428c     E4 FF 9F CD |  if_b	jmp	#LR__1580
14290                 | LR__1581
14290                 | '                         ' 
14290                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
14290     8C E5 85 F1 | 	sub	objptr, #396
14294     F2 02 02 FB | 	rdlong	_var02, objptr
14298     14 02 66 F0 | 	shl	_var02, #20
1429c     01 02 06 F1 | 	add	_var02, #1
142a0     04 E4 85 F1 | 	sub	objptr, #4
142a4     F2 00 02 FB | 	rdlong	_var01, objptr
142a8     02 00 66 F0 | 	shl	_var01, #2
142ac     04 00 66 F0 | 	shl	_var01, #4
142b0     00 03 02 F1 | 	add	_var02, _var01
142b4     90 E5 05 F1 | 	add	objptr, #400
142b8     F2 02 62 FC | 	wrlong	_var02, objptr
142bc     E9 E5 85 F1 | 	sub	objptr, #489
142c0                 | ' displaylist[1]:=buf_ptr<<4+%10  
142c0     F2 02 02 FB | 	rdlong	_var02, objptr
142c4     04 02 66 F0 | 	shl	_var02, #4
142c8     02 02 06 F1 | 	add	_var02, #2
142cc     ED E5 05 F1 | 	add	objptr, #493
142d0     F2 02 62 FC | 	wrlong	_var02, objptr
142d4                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
142d4     04 E4 85 F1 | 	sub	objptr, #4
142d8     F2 02 02 F6 | 	mov	_var02, objptr
142dc     CD E5 85 F1 | 	sub	objptr, #461
142e0     F2 02 62 FC | 	wrlong	_var02, objptr
142e4     1C E4 85 F1 | 	sub	objptr, #28
142e8                 | _hg010b_spin2_makedl_ret
142e8     2D 00 64 FD | 	ret
142ec                 | 
142ec                 | ' 
142ec                 | ' 
142ec                 | ' '****************************************************************************************************************
142ec                 | ' '                                                                        					*
142ec                 | ' '  Graphic primitives                                                    					*
142ec                 | ' '                                                                        					*
142ec                 | ' '****************************************************************************************************************
142ec                 | ' 
142ec                 | ' pub setspriteptr(num,ptr)
142ec                 | _hg010b_spin2_setspriteptr
142ec                 | ' long[@spr1ptr+12*num]:=ptr
142ec     0D E5 05 F1 | 	add	objptr, #269
142f0     F2 00 02 F6 | 	mov	_var01, objptr
142f4     09 03 02 F6 | 	mov	_var02, arg01
142f8     01 02 66 F0 | 	shl	_var02, #1
142fc     09 03 02 F1 | 	add	_var02, arg01
14300     02 02 66 F0 | 	shl	_var02, #2
14304     01 01 02 F1 | 	add	_var01, _var02
14308     00 15 62 FC | 	wrlong	arg02, _var01
1430c     0D E5 85 F1 | 	sub	objptr, #269
14310                 | _hg010b_spin2_setspriteptr_ret
14310     2D 00 64 FD | 	ret
14314                 | 
14314                 | ' 
14314                 | ' pub setspritepos(num,x,y)
14314                 | _hg010b_spin2_setspritepos
14314                 | ' word[@spr1ptr+12*num+4]:=x
14314     0D E5 05 F1 | 	add	objptr, #269
14318     F2 00 02 F6 | 	mov	_var01, objptr
1431c     09 03 02 F6 | 	mov	_var02, arg01
14320     01 02 66 F0 | 	shl	_var02, #1
14324     09 03 02 F1 | 	add	_var02, arg01
14328     02 02 66 F0 | 	shl	_var02, #2
1432c     01 01 02 F1 | 	add	_var01, _var02
14330     04 00 06 F1 | 	add	_var01, #4
14334     00 15 52 FC | 	wrword	arg02, _var01
14338                 | ' word[@spr1ptr+12*num+6]:=y
14338     F2 00 02 F6 | 	mov	_var01, objptr
1433c     09 03 02 F6 | 	mov	_var02, arg01
14340     01 02 66 F0 | 	shl	_var02, #1
14344     09 03 02 F1 | 	add	_var02, arg01
14348     02 02 66 F0 | 	shl	_var02, #2
1434c     01 01 02 F1 | 	add	_var01, _var02
14350     06 00 06 F1 | 	add	_var01, #6
14354     00 17 52 FC | 	wrword	arg03, _var01
14358     0D E5 85 F1 | 	sub	objptr, #269
1435c                 | _hg010b_spin2_setspritepos_ret
1435c     2D 00 64 FD | 	ret
14360                 | 
14360                 | ' 
14360                 | ' pub setspritesize(num,w,h)
14360                 | _hg010b_spin2_setspritesize
14360                 | ' word[@spr1ptr+12*num+8]:=w
14360     0D E5 05 F1 | 	add	objptr, #269
14364     F2 00 02 F6 | 	mov	_var01, objptr
14368     09 03 02 F6 | 	mov	_var02, arg01
1436c     01 02 66 F0 | 	shl	_var02, #1
14370     09 03 02 F1 | 	add	_var02, arg01
14374     02 02 66 F0 | 	shl	_var02, #2
14378     01 01 02 F1 | 	add	_var01, _var02
1437c     08 00 06 F1 | 	add	_var01, #8
14380     00 15 52 FC | 	wrword	arg02, _var01
14384                 | ' word[@spr1ptr+12*num+10]:=h
14384     F2 00 02 F6 | 	mov	_var01, objptr
14388     09 03 02 F6 | 	mov	_var02, arg01
1438c     01 02 66 F0 | 	shl	_var02, #1
14390     09 03 02 F1 | 	add	_var02, arg01
14394     02 02 66 F0 | 	shl	_var02, #2
14398     01 01 02 F1 | 	add	_var01, _var02
1439c     0A 00 06 F1 | 	add	_var01, #10
143a0     00 17 52 FC | 	wrword	arg03, _var01
143a4     0D E5 85 F1 | 	sub	objptr, #269
143a8                 | _hg010b_spin2_setspritesize_ret
143a8     2D 00 64 FD | 	ret
143ac                 | 
143ac                 | ' 
143ac                 | ' 
143ac                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
143ac                 | ' 
143ac                 | ' 
143ac                 | ' pub putpixel(x,y,c)
143ac                 | _hg010b_spin2_putpixel
143ac     04 4A 05 F6 | 	mov	COUNT_, #4
143b0     A8 00 A0 FD | 	call	#pushregs_
143b4     09 1F 02 F6 | 	mov	local01, arg01
143b8                 | ' 
143b8                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
143b8     00 20 06 F6 | 	mov	local02, #0
143bc     00 1E 56 F2 | 	cmps	local01, #0 wc
143c0     01 20 66 36 |  if_ae	neg	local02, #1
143c4     E5 E4 05 F1 | 	add	objptr, #229
143c8     F2 1A 02 FB | 	rdlong	arg05, objptr
143cc     02 1A 66 F0 | 	shl	arg05, #2
143d0     0D 1F 52 F2 | 	cmps	local01, arg05 wc
143d4     11 23 A2 F1 | 	subx	local03, local03
143d8     11 21 02 F5 | 	and	local02, local03
143dc     00 22 06 F6 | 	mov	local03, #0
143e0     00 14 56 F2 | 	cmps	arg02, #0 wc
143e4     01 22 66 36 |  if_ae	neg	local03, #1
143e8     11 21 02 F5 | 	and	local02, local03
143ec     04 E4 85 F1 | 	sub	objptr, #4
143f0     F2 22 02 FB | 	rdlong	local03, objptr
143f4     E1 E4 85 F1 | 	sub	objptr, #225
143f8     11 15 52 F2 | 	cmps	arg02, local03 wc
143fc     12 25 A2 F1 | 	subx	local04, local04
14400     12 21 CA F7 | 	test	local02, local04 wz
14404     48 00 90 AD |  if_e	jmp	#LR__1590
14408     D9 E4 05 F1 | 	add	objptr, #217
1440c     F2 12 02 FB | 	rdlong	arg01, objptr
14410     14 E4 05 F1 | 	add	objptr, #20
14414     F2 24 02 FB | 	rdlong	local04, objptr
14418     02 24 66 F0 | 	shl	local04, #2
1441c     0A 25 02 FD | 	qmul	local04, arg02
14420                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
14420     0B 15 02 F6 | 	mov	arg02, arg03
14424     01 16 06 F6 | 	mov	arg03, #1
14428     00 18 06 F6 | 	mov	arg04, #0
1442c     01 1A 06 F6 | 	mov	arg05, #1
14430     0A 00 00 FF 
14434     D3 E5 05 F1 | 	add	objptr, ##5587
14438     18 24 62 FD | 	getqx	local04
1443c     0F 25 02 F1 | 	add	local04, local01
14440     12 13 02 F1 | 	add	arg01, local04
14444     FC 14 B0 FD | 	call	#_psram_spin2_fill
14448     0B 00 00 FF 
1444c     C0 E4 85 F1 | 	sub	objptr, ##5824
14450                 | LR__1590
14450     A7 F0 03 F6 | 	mov	ptra, fp
14454     B2 00 A0 FD | 	call	#popregs_
14458                 | _hg010b_spin2_putpixel_ret
14458     2D 00 64 FD | 	ret
1445c                 | 
1445c                 | ' 
1445c                 | ' pub putpixel2(x,y,c)
1445c                 | _hg010b_spin2_putpixel2
1445c     02 4A 05 F6 | 	mov	COUNT_, #2
14460     A8 00 A0 FD | 	call	#pushregs_
14464     D9 E4 05 F1 | 	add	objptr, #217
14468     F2 1E 02 FB | 	rdlong	local01, objptr
1446c     14 E4 05 F1 | 	add	objptr, #20
14470     F2 1A 02 FB | 	rdlong	arg05, objptr
14474     02 1A 66 F0 | 	shl	arg05, #2
14478     0A 1B 02 FD | 	qmul	arg05, arg02
1447c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1447c     0B 15 02 F6 | 	mov	arg02, arg03
14480     01 16 06 F6 | 	mov	arg03, #1
14484     00 18 06 F6 | 	mov	arg04, #0
14488     01 1A 06 F6 | 	mov	arg05, #1
1448c     0A 00 00 FF 
14490     D3 E5 05 F1 | 	add	objptr, ##5587
14494     18 20 62 FD | 	getqx	local02
14498     09 21 02 F1 | 	add	local02, arg01
1449c     10 1F 02 F1 | 	add	local01, local02
144a0     0F 13 02 F6 | 	mov	arg01, local01
144a4     9C 14 B0 FD | 	call	#_psram_spin2_fill
144a8     0B 00 00 FF 
144ac     C0 E4 85 F1 | 	sub	objptr, ##5824
144b0     A7 F0 03 F6 | 	mov	ptra, fp
144b4     B2 00 A0 FD | 	call	#popregs_
144b8                 | _hg010b_spin2_putpixel2_ret
144b8     2D 00 64 FD | 	ret
144bc                 | 
144bc                 | ' 
144bc                 | ' pub getpixel2(x,y): c 
144bc                 | _hg010b_spin2_getpixel2
144bc     02 4A 05 F6 | 	mov	COUNT_, #2
144c0     A8 00 A0 FD | 	call	#pushregs_
144c4     0C F0 07 F1 | 	add	ptra, #12
144c8     04 4E 05 F1 | 	add	fp, #4
144cc     A7 12 62 FC | 	wrlong	arg01, fp
144d0     04 4E 05 F1 | 	add	fp, #4
144d4     A7 14 62 FC | 	wrlong	arg02, fp
144d8     08 4E 85 F1 | 	sub	fp, #8
144dc     A7 00 68 FC | 	wrlong	#0, fp
144e0     A7 12 02 F6 | 	mov	arg01, fp
144e4     D9 E4 05 F1 | 	add	objptr, #217
144e8     F2 14 02 FB | 	rdlong	arg02, objptr
144ec     14 E4 05 F1 | 	add	objptr, #20
144f0     F2 16 02 FB | 	rdlong	arg03, objptr
144f4     02 16 66 F0 | 	shl	arg03, #2
144f8     08 4E 05 F1 | 	add	fp, #8
144fc     A7 FA 01 FB | 	rdlong	result1, fp
14500     FD 16 02 FD | 	qmul	arg03, result1
14504                 | ' 
14504                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
14504     04 4E 85 F1 | 	sub	fp, #4
14508     A7 1E 02 FB | 	rdlong	local01, fp
1450c     04 4E 85 F1 | 	sub	fp, #4
14510     01 16 06 F6 | 	mov	arg03, #1
14514     0A 00 00 FF 
14518     D3 E5 05 F1 | 	add	objptr, ##5587
1451c     18 20 62 FD | 	getqx	local02
14520     0F 21 02 F1 | 	add	local02, local01
14524     10 15 02 F1 | 	add	arg02, local02
14528     E0 12 B0 FD | 	call	#_psram_spin2_read1
1452c     0B 00 00 FF 
14530     C0 E4 85 F1 | 	sub	objptr, ##5824
14534                 | ' return c
14534     A7 FA 01 FB | 	rdlong	result1, fp
14538     A7 F0 03 F6 | 	mov	ptra, fp
1453c     B2 00 A0 FD | 	call	#popregs_
14540                 | _hg010b_spin2_getpixel2_ret
14540     2D 00 64 FD | 	ret
14544                 | 
14544                 | '   
14544                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
14544                 | ' 
14544                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
14544                 | _hg010b_spin2_fastline
14544     02 4A 05 F6 | 	mov	COUNT_, #2
14548     A8 00 A0 FD | 	call	#pushregs_
1454c     09 1F 02 F6 | 	mov	local01, arg01
14550     0A 21 02 F6 | 	mov	local02, arg02
14554                 | ' 
14554                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
14554     00 16 56 F2 | 	cmps	arg03, #0 wc
14558     F4 00 90 CD |  if_b	jmp	#LR__1600
1455c     01 00 00 FF 
14560     26 E4 05 F1 | 	add	objptr, ##550
14564     F2 1A 02 FB | 	rdlong	arg05, objptr
14568     01 00 00 FF 
1456c     26 E4 85 F1 | 	sub	objptr, ##550
14570     0D 17 52 F2 | 	cmps	arg03, arg05 wc
14574     D8 00 90 3D |  if_ae	jmp	#LR__1600
14578     00 1E 56 F2 | 	cmps	local01, #0 wc
1457c     00 20 56 C2 |  if_b	cmps	local02, #0 wc
14580     CC 00 90 CD |  if_b	jmp	#LR__1600
14584     01 00 00 FF 
14588     22 E4 05 F1 | 	add	objptr, ##546
1458c     F2 1A 02 FB | 	rdlong	arg05, objptr
14590     01 00 00 FF 
14594     22 E4 85 F1 | 	sub	objptr, ##546
14598     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1459c     01 00 00 1F 
145a0     22 E4 05 11 |  if_a	add	objptr, ##546
145a4     F2 12 02 1B |  if_a	rdlong	arg01, objptr
145a8     01 00 00 1F 
145ac     22 E4 85 11 |  if_a	sub	objptr, ##546
145b0     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
145b4                 | '   return
145b4     98 00 90 1D |  if_a	jmp	#LR__1600
145b8     10 1F 5A F2 | 	cmps	local01, local02 wcz
145bc     0F 1B 02 16 |  if_a	mov	arg05, local01
145c0     10 1F 02 16 |  if_a	mov	local01, local02
145c4     0D 21 02 16 |  if_a	mov	local02, arg05
145c8     00 1E 56 F2 | 	cmps	local01, #0 wc
145cc     00 1E 06 C6 |  if_b	mov	local01, #0
145d0     01 00 00 FF 
145d4     22 E4 05 F1 | 	add	objptr, ##546
145d8     F2 1A 02 FB | 	rdlong	arg05, objptr
145dc     01 00 00 FF 
145e0     22 E4 85 F1 | 	sub	objptr, ##546
145e4     0D 21 52 F2 | 	cmps	local02, arg05 wc
145e8     01 00 00 3F 
145ec     22 E4 05 31 |  if_ae	add	objptr, ##546
145f0     F2 20 02 3B |  if_ae	rdlong	local02, objptr
145f4     01 00 00 3F 
145f8     22 E4 85 31 |  if_ae	sub	objptr, ##546
145fc     D9 E4 05 F1 | 	add	objptr, #217
14600     F2 12 02 FB | 	rdlong	arg01, objptr
14604     14 E4 05 F1 | 	add	objptr, #20
14608     F2 1A 02 FB | 	rdlong	arg05, objptr
1460c     02 1A 66 F0 | 	shl	arg05, #2
14610     0B 1B 02 FD | 	qmul	arg05, arg03
14614                 | ' if x1>x2
14614                 | '   x1,x2:=x2,x1
14614                 | ' if x1<0 
14614                 | '   x1:=0
14614                 | ' if x2>=xres
14614                 | '   x2:=xres-1  
14614     01 20 86 31 |  if_ae	sub	local02, #1
14618                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
14618     01 16 06 F6 | 	mov	arg03, #1
1461c     10 17 02 F1 | 	add	arg03, local02
14620     0F 17 82 F1 | 	sub	arg03, local01
14624     0C 15 02 F6 | 	mov	arg02, arg04
14628     00 18 06 F6 | 	mov	arg04, #0
1462c     01 1A 06 F6 | 	mov	arg05, #1
14630     0A 00 00 FF 
14634     D3 E5 05 F1 | 	add	objptr, ##5587
14638     18 20 62 FD | 	getqx	local02
1463c     0F 21 02 F1 | 	add	local02, local01
14640     10 13 02 F1 | 	add	arg01, local02
14644     FC 12 B0 FD | 	call	#_psram_spin2_fill
14648     0B 00 00 FF 
1464c     C0 E4 85 F1 | 	sub	objptr, ##5824
14650                 | LR__1600
14650     A7 F0 03 F6 | 	mov	ptra, fp
14654     B2 00 A0 FD | 	call	#popregs_
14658                 | _hg010b_spin2_fastline_ret
14658     2D 00 64 FD | 	ret
1465c                 | 
1465c                 | ' 
1465c                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1465c                 | _hg010b_spin2_draw
1465c     0E 4A 05 F6 | 	mov	COUNT_, #14
14660     A8 00 A0 FD | 	call	#pushregs_
14664     09 1F 02 F6 | 	mov	local01, arg01
14668     0A 21 02 F6 | 	mov	local02, arg02
1466c     0B 23 02 F6 | 	mov	local03, arg03
14670     0C 25 02 F6 | 	mov	local04, arg04
14674     0D 27 02 F6 | 	mov	local05, arg05
14678                 | ' 
14678                 | ' if (y1==y2)
14678     12 21 0A F2 | 	cmp	local02, local04 wz
1467c     18 00 90 5D |  if_ne	jmp	#LR__1610
14680                 | '   fastline(x1,x2,y1,c)
14680     0F 13 02 F6 | 	mov	arg01, local01
14684     11 15 02 F6 | 	mov	arg02, local03
14688     10 17 02 F6 | 	mov	arg03, local02
1468c     13 19 02 F6 | 	mov	arg04, local05
14690     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
14694     F8 00 90 FD | 	jmp	#LR__1616
14698                 | LR__1610
14698                 | ' else  
14698                 | '   x:=x1
14698     0F 29 02 F6 | 	mov	local06, local01
1469c                 | '   y:=y1
1469c     10 2B 02 F6 | 	mov	local07, local02
146a0                 | ' 
146a0                 | '   if (x1<x2) 
146a0     11 1F 52 F2 | 	cmps	local01, local03 wc
146a4                 | '     xi:=1
146a4     01 2C 06 C6 |  if_b	mov	local08, #1
146a8                 | '     dx:=x2-x1
146a8     11 2F 02 C6 |  if_b	mov	local09, local03
146ac     0F 2F 82 C1 |  if_b	sub	local09, local01
146b0                 | '   else
146b0                 | '     xi:=-1
146b0     01 2C 66 36 |  if_ae	neg	local08, #1
146b4                 | '     dx:=x1-x2
146b4     11 1F 82 31 |  if_ae	sub	local01, local03
146b8     0F 2F 02 36 |  if_ae	mov	local09, local01
146bc                 | '   
146bc                 | '   if (y1<y2) 
146bc     12 21 52 F2 | 	cmps	local02, local04 wc
146c0                 | '     yi:=1
146c0     01 30 06 C6 |  if_b	mov	local10, #1
146c4                 | '     dy:=y2-y1
146c4     12 33 02 C6 |  if_b	mov	local11, local04
146c8     10 33 82 C1 |  if_b	sub	local11, local02
146cc                 | '   else
146cc                 | '     yi:=-1
146cc     01 30 66 36 |  if_ae	neg	local10, #1
146d0                 | '     dy:=y1-y2
146d0     12 21 82 31 |  if_ae	sub	local02, local04
146d4     10 33 02 36 |  if_ae	mov	local11, local02
146d8                 | ' 
146d8                 | '   putpixel(x,y,c)
146d8     13 17 02 F6 | 	mov	arg03, local05
146dc     14 13 02 F6 | 	mov	arg01, local06
146e0     15 15 02 F6 | 	mov	arg02, local07
146e4     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
146e8                 | ' 
146e8                 | '   if (dx>dy)
146e8     19 2F 5A F2 | 	cmps	local09, local11 wcz
146ec     50 00 90 ED |  if_be	jmp	#LR__1612
146f0                 | '     ai:=(dy-dx)*2
146f0     19 35 02 F6 | 	mov	local12, local11
146f4     17 35 82 F1 | 	sub	local12, local09
146f8     01 34 66 F0 | 	shl	local12, #1
146fc                 | '     bi:=dy*2
146fc     01 32 66 F0 | 	shl	local11, #1
14700     19 37 02 F6 | 	mov	local13, local11
14704                 | '     d:= bi-dx
14704     1B 39 02 F6 | 	mov	local14, local13
14708     17 39 82 F1 | 	sub	local14, local09
1470c                 | '     repeat while (x<>x2) 
1470c                 | LR__1611
1470c     11 29 0A F2 | 	cmp	local06, local03 wz
14710     7C 00 90 AD |  if_e	jmp	#LR__1615
14714                 | '       if (d>=0) 
14714     00 38 56 F2 | 	cmps	local14, #0 wc
14718                 | '         x+=xi
14718     16 29 02 31 |  if_ae	add	local06, local08
1471c                 | '         y+=yi
1471c     18 2B 02 31 |  if_ae	add	local07, local10
14720                 | '         d+=ai
14720     1A 39 02 31 |  if_ae	add	local14, local12
14724                 | '       else
14724                 | '         d+=bi
14724     1B 39 02 C1 |  if_b	add	local14, local13
14728                 | '         x+=xi
14728     16 29 02 C1 |  if_b	add	local06, local08
1472c                 | '       putpixel(x,y,c)
1472c     14 13 02 F6 | 	mov	arg01, local06
14730     15 15 02 F6 | 	mov	arg02, local07
14734     13 17 02 F6 | 	mov	arg03, local05
14738     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1473c     CC FF 9F FD | 	jmp	#LR__1611
14740                 | LR__1612
14740                 | '   else
14740                 | '     ai:=(dx-dy)*2
14740     17 35 02 F6 | 	mov	local12, local09
14744     19 35 82 F1 | 	sub	local12, local11
14748     01 34 66 F0 | 	shl	local12, #1
1474c                 | '     bi:=dx*2
1474c     01 2E 66 F0 | 	shl	local09, #1
14750     17 37 02 F6 | 	mov	local13, local09
14754                 | '     d:=bi-dy
14754     1B 39 02 F6 | 	mov	local14, local13
14758     19 39 82 F1 | 	sub	local14, local11
1475c                 | '     repeat while (y<>y2)
1475c                 | LR__1613
1475c     12 2B 0A F2 | 	cmp	local07, local04 wz
14760     2C 00 90 AD |  if_e	jmp	#LR__1614
14764                 | '       if (d>=0)
14764     00 38 56 F2 | 	cmps	local14, #0 wc
14768                 | '         x+=xi
14768     16 29 02 31 |  if_ae	add	local06, local08
1476c                 | '         y+=yi
1476c     18 2B 02 31 |  if_ae	add	local07, local10
14770                 | '         d+=ai
14770     1A 39 02 31 |  if_ae	add	local14, local12
14774                 | '       else
14774                 | '         d+=bi
14774     1B 39 02 C1 |  if_b	add	local14, local13
14778                 | '         y+=yi
14778     18 2B 02 C1 |  if_b	add	local07, local10
1477c                 | '       putpixel(x, y,c)
1477c     14 13 02 F6 | 	mov	arg01, local06
14780     15 15 02 F6 | 	mov	arg02, local07
14784     13 17 02 F6 | 	mov	arg03, local05
14788     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1478c     CC FF 9F FD | 	jmp	#LR__1613
14790                 | LR__1614
14790                 | LR__1615
14790                 | LR__1616
14790     A7 F0 03 F6 | 	mov	ptra, fp
14794     B2 00 A0 FD | 	call	#popregs_
14798                 | _hg010b_spin2_draw_ret
14798     2D 00 64 FD | 	ret
1479c                 | 
1479c                 | '  
1479c                 | ' pub fillpush(val) 
1479c                 | _hg010b_spin2_fillpush
1479c                 | ' fillstack[fillptr]:=val
1479c     0B 00 00 FF 
147a0     B6 E4 05 F1 | 	add	objptr, ##5814
147a4     F2 00 02 FB | 	rdlong	_var01, objptr
147a8     02 00 66 F0 | 	shl	_var01, #2
147ac     0A 00 00 FF 
147b0     00 E4 85 F1 | 	sub	objptr, ##5120
147b4     F2 00 02 F1 | 	add	_var01, objptr
147b8     00 13 62 FC | 	wrlong	arg01, _var01
147bc                 | ' fillptr+=1   
147bc     0A 00 00 FF 
147c0     00 E4 05 F1 | 	add	objptr, ##5120
147c4     F2 00 02 FB | 	rdlong	_var01, objptr
147c8     01 00 06 F1 | 	add	_var01, #1
147cc     F2 00 62 FC | 	wrlong	_var01, objptr
147d0     0B 00 00 FF 
147d4     B6 E4 85 F1 | 	sub	objptr, ##5814
147d8                 | _hg010b_spin2_fillpush_ret
147d8     2D 00 64 FD | 	ret
147dc                 | 
147dc                 | ' 
147dc                 | '     
147dc                 | ' pub fillpop() : val
147dc                 | _hg010b_spin2_fillpop
147dc                 | ' 
147dc                 | ' fillptr-=1
147dc     0B 00 00 FF 
147e0     B6 E4 05 F1 | 	add	objptr, ##5814
147e4     F2 FA 01 FB | 	rdlong	result1, objptr
147e8     01 FA 85 F1 | 	sub	result1, #1
147ec     F2 FA 61 FC | 	wrlong	result1, objptr
147f0                 | ' if fillptr<0
147f0     0B 00 00 FF 
147f4     B6 E4 85 F1 | 	sub	objptr, ##5814
147f8     00 FA 55 F2 | 	cmps	result1, #0 wc
147fc                 | '   fillptr:=0
147fc     0B 00 00 CF 
14800     B6 E4 05 C1 |  if_b	add	objptr, ##5814
14804     F2 00 68 CC |  if_b	wrlong	#0, objptr
14808     0B 00 00 CF 
1480c     B6 E4 85 C1 |  if_b	sub	objptr, ##5814
14810                 | '   val:=-12345
14810     E7 FF 7F CF 
14814     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
14818     28 00 90 CD |  if_b	jmp	#LR__1620
1481c                 | ' else 
1481c                 | '   val:=fillstack[fillptr]
1481c     0B 00 00 FF 
14820     B6 E4 05 F1 | 	add	objptr, ##5814
14824     F2 00 02 FB | 	rdlong	_var01, objptr
14828     02 00 66 F0 | 	shl	_var01, #2
1482c     0A 00 00 FF 
14830     00 E4 85 F1 | 	sub	objptr, ##5120
14834     F2 00 02 F1 | 	add	_var01, objptr
14838     00 01 02 FB | 	rdlong	_var01, _var01
1483c     01 00 00 FF 
14840     B6 E4 85 F1 | 	sub	objptr, ##694
14844                 | LR__1620
14844                 | ' return val
14844     00 FB 01 F6 | 	mov	result1, _var01
14848                 | _hg010b_spin2_fillpop_ret
14848     2D 00 64 FD | 	ret
1484c                 | 
1484c                 | ' 
1484c                 | '       
1484c                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1484c                 | _hg010b_spin2_fill
1484c     0B 4A 05 F6 | 	mov	COUNT_, #11
14850     A8 00 A0 FD | 	call	#pushregs_
14854                 | ' 
14854                 | ' newcolor:=newcolor & 255
14854     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
14858                 | ' oldcolor:=oldcolor & 255
14858     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1485c                 | ' 
1485c                 | ' if (oldcolor == newcolor) 
1485c     0F 21 0A F2 | 	cmp	local02, local01 wz
14860                 | '   return
14860     70 02 90 AD |  if_e	jmp	#LR__1639
14864                 | ' 
14864                 | ' fillptr:=0
14864     0B 00 00 FF 
14868     B6 E4 05 F1 | 	add	objptr, ##5814
1486c     F2 00 68 FC | 	wrlong	#0, objptr
14870                 | ' fillmax:=0
14870     04 E4 05 F1 | 	add	objptr, #4
14874     F2 00 68 FC | 	wrlong	#0, objptr
14878     0B 00 00 FF 
1487c     BA E4 85 F1 | 	sub	objptr, ##5818
14880                 | ' fillpush(x)
14880     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
14884                 | ' fillpush(y)
14884     0A 13 02 F6 | 	mov	arg01, arg02
14888     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1488c                 | ' y:=fillpop()
1488c     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
14890     FD 22 02 F6 | 	mov	local03, result1
14894                 | ' x:=fillpop()
14894     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
14898     FD 24 02 F6 | 	mov	local04, result1
1489c                 | ' 'pinhigh(38)
1489c                 | ' repeat while (x>-1)       
1489c                 | LR__1630
1489c     00 24 56 F2 | 	cmps	local04, #0 wc
148a0     30 02 90 CD |  if_b	jmp	#LR__1638
148a4                 | '  ' pintoggle(39)
148a4                 | '   x1 := x
148a4     12 27 02 F6 | 	mov	local05, local04
148a8                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
148a8                 | LR__1631
148a8     00 28 06 F6 | 	mov	local06, #0
148ac     00 2A 06 F6 | 	mov	local07, #0
148b0     00 26 56 F2 | 	cmps	local05, #0 wc
148b4     01 2A 66 36 |  if_ae	neg	local07, #1
148b8     00 2A 0E F2 | 	cmp	local07, #0 wz
148bc     00 28 26 56 |  if_ne	not	local06, #0
148c0     00 2C 06 F6 | 	mov	local08, #0
148c4     00 2E 06 F6 | 	mov	local09, #0
148c8     11 15 02 F6 | 	mov	arg02, local03
148cc     13 13 02 F6 | 	mov	arg01, local05
148d0     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
148d4     10 FB 09 F2 | 	cmp	result1, local02 wz
148d8     00 2E 26 A6 |  if_e	not	local09, #0
148dc     00 2E 0E F2 | 	cmp	local09, #0 wz
148e0     00 2C 26 56 |  if_ne	not	local08, #0
148e4     16 29 CA F7 | 	test	local06, local08 wz
148e8                 | '     x1--
148e8     01 26 86 51 |  if_ne	sub	local05, #1
148ec     B8 FF 9F 5D |  if_ne	jmp	#LR__1631
148f0                 | '   x1++
148f0     01 26 06 F1 | 	add	local05, #1
148f4                 | '   spanabove := 0
148f4     00 30 06 F6 | 	mov	local10, #0
148f8                 | '   spanbelow := 0
148f8     00 32 06 F6 | 	mov	local11, #0
148fc                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
148fc                 | LR__1632
148fc     00 28 06 F6 | 	mov	local06, #0
14900     02 00 00 FF 
14904     00 26 56 F2 | 	cmps	local05, ##1024 wc
14908     00 28 26 C6 |  if_b	not	local06, #0
1490c     00 2C 06 F6 | 	mov	local08, #0
14910     00 2E 06 F6 | 	mov	local09, #0
14914     11 15 02 F6 | 	mov	arg02, local03
14918     13 13 02 F6 | 	mov	arg01, local05
1491c     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
14920     10 FB 09 F2 | 	cmp	result1, local02 wz
14924     00 2E 26 A6 |  if_e	not	local09, #0
14928     00 2E 0E F2 | 	cmp	local09, #0 wz
1492c     00 2C 26 56 |  if_ne	not	local08, #0
14930     16 29 CA F7 | 	test	local06, local08 wz
14934     88 01 90 AD |  if_e	jmp	#LR__1637
14938                 | '     putpixel2 (x1,y, newcolor & 255)
14938     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1493c     13 13 02 F6 | 	mov	arg01, local05
14940     11 15 02 F6 | 	mov	arg02, local03
14944     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
14948                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
14948     00 28 06 F6 | 	mov	local06, #0
1494c     00 2A 06 F6 | 	mov	local07, #0
14950     00 30 0E F2 | 	cmp	local10, #0 wz
14954     01 22 56 A2 |  if_e	cmps	local03, #1 wc
14958     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1495c     00 2A 0E F2 | 	cmp	local07, #0 wz
14960     00 28 26 56 |  if_ne	not	local06, #0
14964     00 2C 06 F6 | 	mov	local08, #0
14968     00 2E 06 F6 | 	mov	local09, #0
1496c     11 15 02 F6 | 	mov	arg02, local03
14970     01 14 86 F1 | 	sub	arg02, #1
14974     13 13 02 F6 | 	mov	arg01, local05
14978     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1497c     10 FB 09 F2 | 	cmp	result1, local02 wz
14980     00 2E 26 A6 |  if_e	not	local09, #0
14984     00 2E 0E F2 | 	cmp	local09, #0 wz
14988     00 2C 26 56 |  if_ne	not	local08, #0
1498c     16 29 CA F7 | 	test	local06, local08 wz
14990     1C 00 90 AD |  if_e	jmp	#LR__1633
14994                 | '       fillpush(x1)
14994     13 13 02 F6 | 	mov	arg01, local05
14998     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1499c                 | '       fillpush(y-1)
1499c     11 13 02 F6 | 	mov	arg01, local03
149a0     01 12 86 F1 | 	sub	arg01, #1
149a4     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
149a8                 | '       spanabove := 1 
149a8     01 30 06 F6 | 	mov	local10, #1
149ac     4C 00 90 FD | 	jmp	#LR__1634
149b0                 | LR__1633
149b0                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
149b0     00 28 06 F6 | 	mov	local06, #0
149b4     00 2A 06 F6 | 	mov	local07, #0
149b8     00 30 0E F2 | 	cmp	local10, #0 wz
149bc     01 22 56 52 |  if_ne	cmps	local03, #1 wc
149c0     01 2A 66 16 |  if_a	neg	local07, #1
149c4     00 2A 0E F2 | 	cmp	local07, #0 wz
149c8     00 28 26 56 |  if_ne	not	local06, #0
149cc     00 2C 06 F6 | 	mov	local08, #0
149d0     00 2E 06 F6 | 	mov	local09, #0
149d4     11 15 02 F6 | 	mov	arg02, local03
149d8     01 14 86 F1 | 	sub	arg02, #1
149dc     13 13 02 F6 | 	mov	arg01, local05
149e0     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
149e4     10 FB 09 F2 | 	cmp	result1, local02 wz
149e8     00 2E 26 56 |  if_ne	not	local09, #0
149ec     00 2E 0E F2 | 	cmp	local09, #0 wz
149f0     00 2C 26 56 |  if_ne	not	local08, #0
149f4     16 29 CA F7 | 	test	local06, local08 wz
149f8                 | '       spanabove := 0 
149f8     00 30 06 56 |  if_ne	mov	local10, #0
149fc                 | LR__1634
149fc                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
149fc     00 28 06 F6 | 	mov	local06, #0
14a00     00 2A 06 F6 | 	mov	local07, #0
14a04     00 32 0E F2 | 	cmp	local11, #0 wz
14a08     01 00 00 AF 
14a0c     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
14a10     01 2A 66 86 |  if_c_and_z	neg	local07, #1
14a14     00 2A 0E F2 | 	cmp	local07, #0 wz
14a18     00 28 26 56 |  if_ne	not	local06, #0
14a1c     00 2C 06 F6 | 	mov	local08, #0
14a20     00 2E 06 F6 | 	mov	local09, #0
14a24     11 15 02 F6 | 	mov	arg02, local03
14a28     01 14 06 F1 | 	add	arg02, #1
14a2c     13 13 02 F6 | 	mov	arg01, local05
14a30     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
14a34     10 FB 09 F2 | 	cmp	result1, local02 wz
14a38     00 2E 26 A6 |  if_e	not	local09, #0
14a3c     00 2E 0E F2 | 	cmp	local09, #0 wz
14a40     00 2C 26 56 |  if_ne	not	local08, #0
14a44     16 29 CA F7 | 	test	local06, local08 wz
14a48     1C 00 90 AD |  if_e	jmp	#LR__1635
14a4c                 | '       fillpush(x1)
14a4c     13 13 02 F6 | 	mov	arg01, local05
14a50     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
14a54                 | '       fillpush(y + 1)
14a54     11 13 02 F6 | 	mov	arg01, local03
14a58     01 12 06 F1 | 	add	arg01, #1
14a5c     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
14a60                 | '       spanBelow := 1
14a60     01 32 06 F6 | 	mov	local11, #1
14a64     50 00 90 FD | 	jmp	#LR__1636
14a68                 | LR__1635
14a68                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
14a68     00 28 06 F6 | 	mov	local06, #0
14a6c     00 2A 06 F6 | 	mov	local07, #0
14a70     00 32 0E F2 | 	cmp	local11, #0 wz
14a74     01 00 00 5F 
14a78     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
14a7c     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
14a80     00 2A 0E F2 | 	cmp	local07, #0 wz
14a84     00 28 26 56 |  if_ne	not	local06, #0
14a88     00 2C 06 F6 | 	mov	local08, #0
14a8c     00 2E 06 F6 | 	mov	local09, #0
14a90     11 15 02 F6 | 	mov	arg02, local03
14a94     01 14 06 F1 | 	add	arg02, #1
14a98     13 13 02 F6 | 	mov	arg01, local05
14a9c     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
14aa0     10 FB 09 F2 | 	cmp	result1, local02 wz
14aa4     00 2E 26 56 |  if_ne	not	local09, #0
14aa8     00 2E 0E F2 | 	cmp	local09, #0 wz
14aac     00 2C 26 56 |  if_ne	not	local08, #0
14ab0     16 29 CA F7 | 	test	local06, local08 wz
14ab4                 | '       spanbelow := 0
14ab4     00 32 06 56 |  if_ne	mov	local11, #0
14ab8                 | LR__1636
14ab8                 | '     x1++
14ab8     01 26 06 F1 | 	add	local05, #1
14abc     3C FE 9F FD | 	jmp	#LR__1632
14ac0                 | LR__1637
14ac0                 | '   y:=fillpop()
14ac0     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
14ac4     FD 22 02 F6 | 	mov	local03, result1
14ac8                 | '   x:=fillpop()
14ac8     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
14acc     FD 24 02 F6 | 	mov	local04, result1
14ad0     C8 FD 9F FD | 	jmp	#LR__1630
14ad4                 | LR__1638
14ad4                 | LR__1639
14ad4     A7 F0 03 F6 | 	mov	ptra, fp
14ad8     B2 00 A0 FD | 	call	#popregs_
14adc                 | _hg010b_spin2_fill_ret
14adc     2D 00 64 FD | 	ret
14ae0                 | 
14ae0                 | ' 'pinlow(38)    
14ae0                 | ' 
14ae0                 | ' '-- A filled circle -----------------------------------------------------
14ae0                 | ' 
14ae0                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
14ae0                 | _hg010b_spin2_fcircle
14ae0     08 4A 05 F6 | 	mov	COUNT_, #8
14ae4     A8 00 A0 FD | 	call	#pushregs_
14ae8     0B 1F 02 F6 | 	mov	local01, arg03
14aec     FF FF 7F FF 
14af0     FE 1F 06 FD | 	qmul	local01, ##-2
14af4     09 21 02 F6 | 	mov	local02, arg01
14af8     0A 23 02 F6 | 	mov	local03, arg02
14afc     0C 25 02 F6 | 	mov	local04, arg04
14b00                 | ' 
14b00                 | ' d:=5-4*r
14b00     0F 19 02 F6 | 	mov	arg04, local01
14b04     02 18 66 F0 | 	shl	arg04, #2
14b08     05 26 06 F6 | 	mov	local05, #5
14b0c     0C 27 82 F1 | 	sub	local05, arg04
14b10                 | ' x:=0
14b10     00 28 06 F6 | 	mov	local06, #0
14b14                 | ' y:=r
14b14                 | ' da:=(-2*r+5)*4
14b14                 | ' db:=3*4
14b14     0C 2A 06 F6 | 	mov	local07, #12
14b18                 | ' repeat while (x<=y) 
14b18     18 2C 62 FD | 	getqx	local08
14b1c     05 2C 06 F1 | 	add	local08, #5
14b20     02 2C 66 F0 | 	shl	local08, #2
14b24                 | LR__1640
14b24     0F 29 5A F2 | 	cmps	local06, local01 wcz
14b28     B4 00 90 1D |  if_a	jmp	#LR__1642
14b2c                 | '   fastline(x0-x,x0+x,y0-y,c)
14b2c     10 13 02 F6 | 	mov	arg01, local02
14b30     14 13 82 F1 | 	sub	arg01, local06
14b34     10 15 02 F6 | 	mov	arg02, local02
14b38     14 15 02 F1 | 	add	arg02, local06
14b3c     11 17 02 F6 | 	mov	arg03, local03
14b40     0F 17 82 F1 | 	sub	arg03, local01
14b44     12 19 02 F6 | 	mov	arg04, local04
14b48     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
14b4c                 | '   fastline(x0-x,x0+x,y0+y,c)
14b4c     10 13 02 F6 | 	mov	arg01, local02
14b50     14 13 82 F1 | 	sub	arg01, local06
14b54     10 15 02 F6 | 	mov	arg02, local02
14b58     14 15 02 F1 | 	add	arg02, local06
14b5c     11 17 02 F6 | 	mov	arg03, local03
14b60     0F 17 02 F1 | 	add	arg03, local01
14b64     12 19 02 F6 | 	mov	arg04, local04
14b68     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
14b6c                 | '   fastline(x0-y,x0+y,y0-x,c)
14b6c     10 13 02 F6 | 	mov	arg01, local02
14b70     0F 13 82 F1 | 	sub	arg01, local01
14b74     10 15 02 F6 | 	mov	arg02, local02
14b78     0F 15 02 F1 | 	add	arg02, local01
14b7c     11 17 02 F6 | 	mov	arg03, local03
14b80     14 17 82 F1 | 	sub	arg03, local06
14b84     12 19 02 F6 | 	mov	arg04, local04
14b88     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
14b8c                 | '   fastline(x0-y,x0+y,y0+x,c)
14b8c     10 13 02 F6 | 	mov	arg01, local02
14b90     0F 13 82 F1 | 	sub	arg01, local01
14b94     10 15 02 F6 | 	mov	arg02, local02
14b98     0F 15 02 F1 | 	add	arg02, local01
14b9c     11 17 02 F6 | 	mov	arg03, local03
14ba0     14 17 02 F1 | 	add	arg03, local06
14ba4     12 19 02 F6 | 	mov	arg04, local04
14ba8     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
14bac                 | '   if d>0 
14bac     01 26 56 F2 | 	cmps	local05, #1 wc
14bb0     18 00 90 CD |  if_b	jmp	#LR__1641
14bb4                 | '     d+=da
14bb4     16 27 02 F1 | 	add	local05, local08
14bb8                 | '     y-=1
14bb8     01 1E 86 F1 | 	sub	local01, #1
14bbc                 | '     x+=1
14bbc     01 28 06 F1 | 	add	local06, #1
14bc0                 | '     da+=4*4
14bc0     10 2C 06 F1 | 	add	local08, #16
14bc4                 | '     db+=2*4
14bc4     08 2A 06 F1 | 	add	local07, #8
14bc8     58 FF 9F FD | 	jmp	#LR__1640
14bcc                 | LR__1641
14bcc                 | '   else
14bcc                 | '     d+=db
14bcc     15 27 02 F1 | 	add	local05, local07
14bd0                 | '     x+=1
14bd0     01 28 06 F1 | 	add	local06, #1
14bd4                 | '     da+=2*4
14bd4     08 2C 06 F1 | 	add	local08, #8
14bd8                 | '     db+=2*4
14bd8     08 2A 06 F1 | 	add	local07, #8
14bdc     44 FF 9F FD | 	jmp	#LR__1640
14be0                 | LR__1642
14be0     A7 F0 03 F6 | 	mov	ptra, fp
14be4     B2 00 A0 FD | 	call	#popregs_
14be8                 | _hg010b_spin2_fcircle_ret
14be8     2D 00 64 FD | 	ret
14bec                 | 
14bec                 | '  
14bec                 | ' '-- A circle ------------------------------------------------------------ 
14bec                 | '  
14bec                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
14bec                 | _hg010b_spin2_circle
14bec     08 4A 05 F6 | 	mov	COUNT_, #8
14bf0     A8 00 A0 FD | 	call	#pushregs_
14bf4     0B 1F 02 F6 | 	mov	local01, arg03
14bf8     FF FF 7F FF 
14bfc     FE 1F 06 FD | 	qmul	local01, ##-2
14c00     09 21 02 F6 | 	mov	local02, arg01
14c04     0A 23 02 F6 | 	mov	local03, arg02
14c08     0C 25 02 F6 | 	mov	local04, arg04
14c0c                 | ' 
14c0c                 | '  
14c0c                 | ' d:=5-4*r
14c0c     0F 19 02 F6 | 	mov	arg04, local01
14c10     02 18 66 F0 | 	shl	arg04, #2
14c14     05 26 06 F6 | 	mov	local05, #5
14c18     0C 27 82 F1 | 	sub	local05, arg04
14c1c                 | ' x:=0
14c1c     00 28 06 F6 | 	mov	local06, #0
14c20                 | ' y:=r
14c20                 | ' da:=(-2*r+5)*4
14c20                 | ' db:=3*4
14c20     0C 2A 06 F6 | 	mov	local07, #12
14c24                 | ' repeat while (x<=y) 
14c24     18 2C 62 FD | 	getqx	local08
14c28     05 2C 06 F1 | 	add	local08, #5
14c2c     02 2C 66 F0 | 	shl	local08, #2
14c30                 | LR__1650
14c30     0F 29 5A F2 | 	cmps	local06, local01 wcz
14c34     F4 00 90 1D |  if_a	jmp	#LR__1652
14c38                 | '   putpixel(x0-x,y0-y,c)
14c38     10 13 02 F6 | 	mov	arg01, local02
14c3c     14 13 82 F1 | 	sub	arg01, local06
14c40     11 15 02 F6 | 	mov	arg02, local03
14c44     0F 15 82 F1 | 	sub	arg02, local01
14c48     12 17 02 F6 | 	mov	arg03, local04
14c4c     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
14c50                 | '   putpixel(x0-x,y0+y,c)
14c50     10 13 02 F6 | 	mov	arg01, local02
14c54     14 13 82 F1 | 	sub	arg01, local06
14c58     11 15 02 F6 | 	mov	arg02, local03
14c5c     0F 15 02 F1 | 	add	arg02, local01
14c60     12 17 02 F6 | 	mov	arg03, local04
14c64     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
14c68                 | '   putpixel(x0+x,y0-y,c)
14c68     10 13 02 F6 | 	mov	arg01, local02
14c6c     14 13 02 F1 | 	add	arg01, local06
14c70     11 15 02 F6 | 	mov	arg02, local03
14c74     0F 15 82 F1 | 	sub	arg02, local01
14c78     12 17 02 F6 | 	mov	arg03, local04
14c7c     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
14c80                 | '   putpixel(x0+x,y0+y,c)
14c80     10 13 02 F6 | 	mov	arg01, local02
14c84     14 13 02 F1 | 	add	arg01, local06
14c88     11 15 02 F6 | 	mov	arg02, local03
14c8c     0F 15 02 F1 | 	add	arg02, local01
14c90     12 17 02 F6 | 	mov	arg03, local04
14c94     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
14c98                 | '   putpixel(x0-y,y0-x,c)
14c98     10 13 02 F6 | 	mov	arg01, local02
14c9c     0F 13 82 F1 | 	sub	arg01, local01
14ca0     11 15 02 F6 | 	mov	arg02, local03
14ca4     14 15 82 F1 | 	sub	arg02, local06
14ca8     12 17 02 F6 | 	mov	arg03, local04
14cac     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
14cb0                 | '   putpixel(x0-y,y0+x,c)
14cb0     10 13 02 F6 | 	mov	arg01, local02
14cb4     0F 13 82 F1 | 	sub	arg01, local01
14cb8     11 15 02 F6 | 	mov	arg02, local03
14cbc     14 15 02 F1 | 	add	arg02, local06
14cc0     12 17 02 F6 | 	mov	arg03, local04
14cc4     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
14cc8                 | '   putpixel(x0+y,y0-x,c)
14cc8     10 13 02 F6 | 	mov	arg01, local02
14ccc     0F 13 02 F1 | 	add	arg01, local01
14cd0     11 15 02 F6 | 	mov	arg02, local03
14cd4     14 15 82 F1 | 	sub	arg02, local06
14cd8     12 17 02 F6 | 	mov	arg03, local04
14cdc     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
14ce0                 | '   putpixel(x0+y,y0+x,c)
14ce0     10 13 02 F6 | 	mov	arg01, local02
14ce4     0F 13 02 F1 | 	add	arg01, local01
14ce8     11 15 02 F6 | 	mov	arg02, local03
14cec     14 15 02 F1 | 	add	arg02, local06
14cf0     12 17 02 F6 | 	mov	arg03, local04
14cf4     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
14cf8                 | '   if d>0 
14cf8     01 26 56 F2 | 	cmps	local05, #1 wc
14cfc     18 00 90 CD |  if_b	jmp	#LR__1651
14d00                 | '     d+=da
14d00     16 27 02 F1 | 	add	local05, local08
14d04                 | '     y-=1
14d04     01 1E 86 F1 | 	sub	local01, #1
14d08                 | '     x+=1
14d08     01 28 06 F1 | 	add	local06, #1
14d0c                 | '     da+=4*4
14d0c     10 2C 06 F1 | 	add	local08, #16
14d10                 | '     db+=2*4
14d10     08 2A 06 F1 | 	add	local07, #8
14d14     18 FF 9F FD | 	jmp	#LR__1650
14d18                 | LR__1651
14d18                 | '   else
14d18                 | '     d+=db
14d18     15 27 02 F1 | 	add	local05, local07
14d1c                 | '     x+=1
14d1c     01 28 06 F1 | 	add	local06, #1
14d20                 | '     da+=2*4
14d20     08 2C 06 F1 | 	add	local08, #8
14d24                 | '     db+=2*4
14d24     08 2A 06 F1 | 	add	local07, #8
14d28     04 FF 9F FD | 	jmp	#LR__1650
14d2c                 | LR__1652
14d2c     A7 F0 03 F6 | 	mov	ptra, fp
14d30     B2 00 A0 FD | 	call	#popregs_
14d34                 | _hg010b_spin2_circle_ret
14d34     2D 00 64 FD | 	ret
14d38                 | 
14d38                 | '     
14d38                 | ' '-- A frame (an empty rectangle) ---------------------------------------
14d38                 | ' 
14d38                 | ' pub frame(x1,y1,x2,y2,c)
14d38                 | _hg010b_spin2_frame
14d38     05 4A 05 F6 | 	mov	COUNT_, #5
14d3c     A8 00 A0 FD | 	call	#pushregs_
14d40     09 1F 02 F6 | 	mov	local01, arg01
14d44     0A 21 02 F6 | 	mov	local02, arg02
14d48     0B 23 02 F6 | 	mov	local03, arg03
14d4c     0C 25 02 F6 | 	mov	local04, arg04
14d50     0D 27 02 F6 | 	mov	local05, arg05
14d54                 | ' 
14d54                 | ' fastline(x1,x2,y1,c)
14d54     0F 13 02 F6 | 	mov	arg01, local01
14d58     11 15 02 F6 | 	mov	arg02, local03
14d5c     10 17 02 F6 | 	mov	arg03, local02
14d60     13 19 02 F6 | 	mov	arg04, local05
14d64     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
14d68                 | ' fastline(x1,x2,y2,c)
14d68     0F 13 02 F6 | 	mov	arg01, local01
14d6c     11 15 02 F6 | 	mov	arg02, local03
14d70     12 17 02 F6 | 	mov	arg03, local04
14d74     13 19 02 F6 | 	mov	arg04, local05
14d78     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
14d7c                 | ' line(x1,y1,x1,y2,c)
14d7c     0F 13 02 F6 | 	mov	arg01, local01
14d80     10 15 02 F6 | 	mov	arg02, local02
14d84     0F 17 02 F6 | 	mov	arg03, local01
14d88     12 19 02 F6 | 	mov	arg04, local04
14d8c     13 1B 02 F6 | 	mov	arg05, local05
14d90                 | ' draw(x1,y1,x2,y2,c)
14d90     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
14d94                 | ' line(x2,y1,x2,y2,c)
14d94     11 13 02 F6 | 	mov	arg01, local03
14d98     10 15 02 F6 | 	mov	arg02, local02
14d9c     11 17 02 F6 | 	mov	arg03, local03
14da0     12 19 02 F6 | 	mov	arg04, local04
14da4     13 1B 02 F6 | 	mov	arg05, local05
14da8                 | ' draw(x1,y1,x2,y2,c)
14da8     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
14dac     A7 F0 03 F6 | 	mov	ptra, fp
14db0     B2 00 A0 FD | 	call	#popregs_
14db4                 | _hg010b_spin2_frame_ret
14db4     2D 00 64 FD | 	ret
14db8                 | 
14db8                 | ' 
14db8                 | ' '-- A box (a filled rectangle) ----------------------------------------
14db8                 | ' 
14db8                 | ' pub box(x1,y1,x2,y2,c) |yy
14db8                 | _hg010b_spin2_box
14db8     06 4A 05 F6 | 	mov	COUNT_, #6
14dbc     A8 00 A0 FD | 	call	#pushregs_
14dc0     09 1F 02 F6 | 	mov	local01, arg01
14dc4     0A 21 02 F6 | 	mov	local02, arg02
14dc8     0B 23 02 F6 | 	mov	local03, arg03
14dcc     0C 25 02 F6 | 	mov	local04, arg04
14dd0     0D 27 02 F6 | 	mov	local05, arg05
14dd4                 | ' 
14dd4                 | ' repeat yy from y1 to y2
14dd4     10 25 52 F2 | 	cmps	local04, local02 wc
14dd8     01 28 86 F6 | 	negc	local06, #1
14ddc     14 25 02 F1 | 	add	local04, local06
14de0                 | LR__1660
14de0                 | '   fastline(x1,x2,yy,c)
14de0     0F 13 02 F6 | 	mov	arg01, local01
14de4     11 15 02 F6 | 	mov	arg02, local03
14de8     13 19 02 F6 | 	mov	arg04, local05
14dec     10 17 02 F6 | 	mov	arg03, local02
14df0     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
14df4     14 21 02 F1 | 	add	local02, local06
14df8     12 21 0A F2 | 	cmp	local02, local04 wz
14dfc     E0 FF 9F 5D |  if_ne	jmp	#LR__1660
14e00     A7 F0 03 F6 | 	mov	ptra, fp
14e04     B2 00 A0 FD | 	call	#popregs_
14e08                 | _hg010b_spin2_box_ret
14e08     2D 00 64 FD | 	ret
14e0c                 | 
14e0c                 | '       
14e0c                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
14e0c                 | _hg010b_spin2_putcharxycgf
14e0c                 | ' 
14e0c                 | '  
14e0c                 | ' repeat yy from 0 to 15
14e0c     00 00 06 F6 | 	mov	_var01, #0
14e10     97 8C 48 FB | 	callpa	#(@LR__1672-@LR__1670)>>2,fcache_load_ptr_
14e14                 | LR__1670
14e14                 | ' 
14e14                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
14e14     91 E4 05 F1 | 	add	objptr, #145
14e18     F2 02 02 FB | 	rdlong	_var02, objptr
14e1c     0A 02 66 F0 | 	shl	_var02, #10
14e20     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
14e24     01 05 02 F1 | 	add	_var03, _var02
14e28     0B 03 02 F6 | 	mov	_var02, arg03
14e2c     04 02 66 F0 | 	shl	_var02, #4
14e30     01 05 02 F1 | 	add	_var03, _var02
14e34     00 05 02 F1 | 	add	_var03, _var01
14e38     02 05 C2 FA | 	rdbyte	_var03, _var03
14e3c                 | '   asm
14e3c     00 04 0E F4 | 	testb	_var03, #0 wz
14e40     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
14e44     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
14e48     01 04 0E F4 | 	testb	_var03, #1 wz
14e4c     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
14e50     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
14e54     02 04 0E F4 | 	testb	_var03, #2 wz
14e58     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
14e5c     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
14e60     03 04 0E F4 | 	testb	_var03, #3 wz
14e64     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
14e68     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
14e6c     04 04 0E F4 | 	testb	_var03, #4 wz
14e70     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
14e74     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
14e78     05 04 0E F4 | 	testb	_var03, #5 wz
14e7c     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
14e80     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
14e84     06 04 0E F4 | 	testb	_var03, #6 wz
14e88     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
14e8c     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
14e90     07 04 0E F4 | 	testb	_var03, #7 wz
14e94     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
14e98     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
14e9c                 | '   
14e9c                 | '   ccc[0]:=c1
14e9c     99 E5 05 F1 | 	add	objptr, #409
14ea0     F2 06 62 FC | 	wrlong	_var04, objptr
14ea4                 | '   ccc[1]:=c2 
14ea4     04 E4 05 F1 | 	add	objptr, #4
14ea8     F2 08 62 FC | 	wrlong	_var05, objptr
14eac                 | '   long[mailbox0][2]:=8
14eac     49 E4 85 F1 | 	sub	objptr, #73
14eb0     F2 04 02 FB | 	rdlong	_var03, objptr
14eb4     08 04 06 F1 | 	add	_var03, #8
14eb8     02 11 68 FC | 	wrlong	#8, _var03
14ebc                 | '   long[mailbox0][1]:=@ccc
14ebc     45 E4 05 F1 | 	add	objptr, #69
14ec0     F2 04 02 F6 | 	mov	_var03, objptr
14ec4     45 E4 85 F1 | 	sub	objptr, #69
14ec8     F2 02 02 FB | 	rdlong	_var02, objptr
14ecc     04 02 06 F1 | 	add	_var02, #4
14ed0     01 05 62 FC | 	wrlong	_var03, _var02
14ed4                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
14ed4     0C E5 85 F1 | 	sub	objptr, #268
14ed8     F2 04 02 FB | 	rdlong	_var03, objptr
14edc     0A 03 02 F6 | 	mov	_var02, arg02
14ee0     00 03 02 F1 | 	add	_var02, _var01
14ee4     0A 02 66 F0 | 	shl	_var02, #10
14ee8     09 0B 02 F6 | 	mov	_var06, arg01
14eec     02 0A 66 F0 | 	shl	_var06, #2
14ef0     05 03 02 F1 | 	add	_var02, _var06
14ef4     01 05 02 F1 | 	add	_var03, _var02
14ef8     00 00 78 FF 
14efc     00 04 06 F1 | 	add	_var03, ##-268435456
14f00     0C E5 05 F1 | 	add	objptr, #268
14f04     F2 0A 02 FB | 	rdlong	_var06, objptr
14f08     05 05 62 FC | 	wrlong	_var03, _var06
14f0c                 | '   repeat
14f0c                 | LR__1671
14f0c     F2 04 02 FB | 	rdlong	_var03, objptr
14f10     02 03 02 FB | 	rdlong	_var02, _var03
14f14     00 02 56 F2 | 	cmps	_var02, #0 wc
14f18     F0 FF 9F CD |  if_b	jmp	#LR__1671
14f1c     E5 E5 85 F1 | 	sub	objptr, #485
14f20     01 00 06 F1 | 	add	_var01, #1
14f24     10 00 56 F2 | 	cmps	_var01, #16 wc
14f28     E8 FE 9F CD |  if_b	jmp	#LR__1670
14f2c                 | LR__1672
14f2c                 | _hg010b_spin2_putcharxycgf_ret
14f2c     2D 00 64 FD | 	ret
14f30                 | 
14f30                 | ' 
14f30                 | ' 
14f30                 | ' '**********************************************************************r***
14f30                 | ' '                                                                        *
14f30                 | ' ' Font related functions                                                 *
14f30                 | ' '                                                                        *
14f30                 | ' '*************************************************************************
14f30                 | ' 
14f30                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
14f30                 | ' 
14f30                 | ' pub setfontfamily(afontnum)
14f30                 | _hg010b_spin2_setfontfamily
14f30                 | ' 
14f30                 | ' font_family:=afontnum
14f30     91 E4 05 F1 | 	add	objptr, #145
14f34     F2 12 62 FC | 	wrlong	arg01, objptr
14f38     91 E4 85 F1 | 	sub	objptr, #145
14f3c                 | ' 'if afontnum==8
14f3c                 | ' '  font_ptr:=@amiga_font
14f3c                 | ' 
14f3c                 | ' if afontnum==4
14f3c     04 12 0E F2 | 	cmp	arg01, #4 wz
14f40                 | '   font_ptr:=@st_font
14f40     08 00 00 AF 
14f44     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
14f48     04 E4 05 A1 |  if_e	add	objptr, #4
14f4c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
14f50     04 E4 85 A1 |  if_e	sub	objptr, #4
14f54     08 00 00 AF 
14f58     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
14f5c                 | ' if afontnum==0
14f5c     00 12 0E F2 | 	cmp	arg01, #0 wz
14f60                 | '   font_ptr:=@vga_font
14f60     04 E4 05 A1 |  if_e	add	objptr, #4
14f64     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
14f68     04 E4 85 A1 |  if_e	sub	objptr, #4
14f6c                 | _hg010b_spin2_setfontfamily_ret
14f6c     2D 00 64 FD | 	ret
14f70                 | 
14f70                 | ' 
14f70                 | ' '*************************************************************************
14f70                 | ' '                                                                        *
14f70                 | ' '  Cursor functions                                                      *
14f70                 | ' '                                                                        *
14f70                 | ' '*************************************************************************
14f70                 | ' 
14f70                 | ' 
14f70                 | ' pub setcursorpos(x,y)
14f70                 | _hg010b_spin2_setcursorpos
14f70                 | ' 
14f70                 | ' ''---------- Set the (x,y) position of cursor
14f70                 | ' 
14f70                 | ' cursor_x:=x
14f70     38 E4 05 F1 | 	add	objptr, #56
14f74     F2 12 52 FC | 	wrword	arg01, objptr
14f78                 | ' cursor_y:=y
14f78     02 E4 05 F1 | 	add	objptr, #2
14f7c     F2 14 42 FC | 	wrbyte	arg02, objptr
14f80                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
14f80     02 E4 85 F1 | 	sub	objptr, #2
14f84     F2 14 E2 FA | 	rdword	arg02, objptr
14f88     02 14 66 F0 | 	shl	arg02, #2
14f8c     02 E4 05 F1 | 	add	objptr, #2
14f90     F2 16 C2 FA | 	rdbyte	arg03, objptr
14f94     3A E4 85 F1 | 	sub	objptr, #58
14f98     04 16 66 F0 | 	shl	arg03, #4
14f9c     11 12 06 F6 | 	mov	arg01, #17
14fa0     70 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
14fa4                 | _hg010b_spin2_setcursorpos_ret
14fa4     2D 00 64 FD | 	ret
14fa8                 | 
14fa8                 | ' 
14fa8                 | ' '*************************************************************************
14fa8                 | ' '                                                                        *
14fa8                 | ' '  VBlank functions                                                      *
14fa8                 | ' '                                                                        *
14fa8                 | ' '*************************************************************************
14fa8                 | ' 
14fa8                 | ' pub waitvbl(amount) | i
14fa8                 | _hg010b_spin2_waitvbl
14fa8     03 4A 05 F6 | 	mov	COUNT_, #3
14fac     A8 00 A0 FD | 	call	#pushregs_
14fb0     09 1F 02 F6 | 	mov	local01, arg01
14fb4                 | ' 
14fb4                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
14fb4                 | ' 
14fb4                 | ' repeat i from 1 to amount
14fb4     01 20 06 F6 | 	mov	local02, #1
14fb8     01 1E 56 F2 | 	cmps	local01, #1 wc
14fbc     01 22 86 F6 | 	negc	local03, #1
14fc0     11 1F 02 F1 | 	add	local01, local03
14fc4                 | LR__1680
14fc4                 | '   repeat until vblank==0
14fc4                 | LR__1681
14fc4     45 E4 05 F1 | 	add	objptr, #69
14fc8     F2 12 0A FB | 	rdlong	arg01, objptr wz
14fcc     45 E4 85 F1 | 	sub	objptr, #69
14fd0     0C 00 90 AD |  if_e	jmp	#LR__1682
14fd4                 | '     waitus(100)
14fd4     64 12 06 F6 | 	mov	arg01, #100
14fd8     7C 16 B0 FD | 	call	#__system___waitus
14fdc     E4 FF 9F FD | 	jmp	#LR__1681
14fe0                 | LR__1682
14fe0                 | '   repeat until vblank==1
14fe0                 | LR__1683
14fe0     45 E4 05 F1 | 	add	objptr, #69
14fe4     F2 12 02 FB | 	rdlong	arg01, objptr
14fe8     45 E4 85 F1 | 	sub	objptr, #69
14fec     01 12 0E F2 | 	cmp	arg01, #1 wz
14ff0     0C 00 90 AD |  if_e	jmp	#LR__1684
14ff4                 | '     waitus(100)
14ff4     64 12 06 F6 | 	mov	arg01, #100
14ff8     5C 16 B0 FD | 	call	#__system___waitus
14ffc     E0 FF 9F FD | 	jmp	#LR__1683
15000                 | LR__1684
15000     11 21 02 F1 | 	add	local02, local03
15004     0F 21 0A F2 | 	cmp	local02, local01 wz
15008     B8 FF 9F 5D |  if_ne	jmp	#LR__1680
1500c     A7 F0 03 F6 | 	mov	ptra, fp
15010     B2 00 A0 FD | 	call	#popregs_
15014                 | _hg010b_spin2_waitvbl_ret
15014     2D 00 64 FD | 	ret
15018                 | 
15018                 | ' 
15018                 | ' 
15018                 | ' pub cls(fc,bc)   :c,i
15018                 | _hg010b_spin2_cls
15018     02 4A 05 F6 | 	mov	COUNT_, #2
1501c     A8 00 A0 FD | 	call	#pushregs_
15020     09 1F 02 F6 | 	mov	local01, arg01
15024     0A 21 02 F6 | 	mov	local02, arg02
15028                 | ' 
15028                 | ' c:=bc
15028                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
15028     D9 E4 05 F1 | 	add	objptr, #217
1502c     F2 12 02 FB | 	rdlong	arg01, objptr
15030     A5 E4 85 F1 | 	sub	objptr, #165
15034     F2 16 02 FB | 	rdlong	arg03, objptr
15038     02 16 66 F0 | 	shl	arg03, #2
1503c     10 15 02 F6 | 	mov	arg02, local02
15040     00 18 06 F6 | 	mov	arg04, #0
15044     01 1A 06 F6 | 	mov	arg05, #1
15048     0B 00 00 FF 
1504c     8C E4 05 F1 | 	add	objptr, ##5772
15050     F0 08 B0 FD | 	call	#_psram_spin2_fill
15054                 | ' setwritecolors(fc,bc)
15054                 | ' 
15054                 | ' write_color:=ff
15054     0B 00 00 FF 
15058     83 E4 85 F1 | 	sub	objptr, ##5763
1505c     F2 1E 62 FC | 	wrlong	local01, objptr
15060                 | ' write_background:=bb
15060     04 E4 05 F1 | 	add	objptr, #4
15064     F2 20 62 FC | 	wrlong	local02, objptr
15068                 | ' cursor_x:=0
15068     09 E4 85 F1 | 	sub	objptr, #9
1506c     F2 00 58 FC | 	wrword	#0, objptr
15070                 | ' cursor_y:=0
15070     02 E4 05 F1 | 	add	objptr, #2
15074     F2 00 48 FC | 	wrbyte	#0, objptr
15078                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
15078     02 E4 85 F1 | 	sub	objptr, #2
1507c     F2 14 E2 FA | 	rdword	arg02, objptr
15080     02 14 66 F0 | 	shl	arg02, #2
15084     02 E4 05 F1 | 	add	objptr, #2
15088     F2 16 C2 FA | 	rdbyte	arg03, objptr
1508c     3A E4 85 F1 | 	sub	objptr, #58
15090     04 16 66 F0 | 	shl	arg03, #4
15094     11 12 06 F6 | 	mov	arg01, #17
15098     78 F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1509c                 | ' setcursorcolor(fc)
1509c     0F 13 02 F6 | 	mov	arg01, local01
150a0     2C EF BF FD | 	call	#_hg010b_spin2_setcursorcolor
150a4     10 FB 01 F6 | 	mov	result1, local02
150a8     00 FC 05 F6 | 	mov	result2, #0
150ac     A7 F0 03 F6 | 	mov	ptra, fp
150b0     B2 00 A0 FD | 	call	#popregs_
150b4                 | _hg010b_spin2_cls_ret
150b4     2D 00 64 FD | 	ret
150b8                 | 
150b8                 | ' 
150b8                 | ' ''---------- Output a char at the cursor position, move the cursor 
150b8                 | ' 
150b8                 | ' pub putchar(achar) | c,x,y,l,newcpl
150b8                 | _hg010b_spin2_putchar
150b8     01 4A 05 F6 | 	mov	COUNT_, #1
150bc     A8 00 A0 FD | 	call	#pushregs_
150c0     09 1F 02 F6 | 	mov	local01, arg01
150c4                 | ' 
150c4                 | ' if achar==10
150c4     0A 1E 0E F2 | 	cmp	local01, #10 wz
150c8                 | '   crlf()
150c8     68 03 B0 AD |  if_e	call	#_hg010b_spin2_crlf
150cc                 | ' if achar==9
150cc     09 1E 0E F2 | 	cmp	local01, #9 wz
150d0     18 00 90 5D |  if_ne	jmp	#LR__1690
150d4                 | '   cursor_x:=(cursor_x& %11110000)+16
150d4     38 E4 05 F1 | 	add	objptr, #56
150d8     F2 16 E2 FA | 	rdword	arg03, objptr
150dc     F0 16 06 F5 | 	and	arg03, #240
150e0     10 16 06 F1 | 	add	arg03, #16
150e4     F2 16 52 FC | 	wrword	arg03, objptr
150e8     38 E4 85 F1 | 	sub	objptr, #56
150ec                 | LR__1690
150ec                 | '   
150ec                 | ' if (achar<>9) && (achar<>10) 
150ec     09 1E 0E F2 | 	cmp	local01, #9 wz
150f0     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
150f4     44 00 90 AD |  if_e	jmp	#LR__1691
150f8                 | '   putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
150f8     38 E4 05 F1 | 	add	objptr, #56
150fc     F2 12 E2 FA | 	rdword	arg01, objptr
15100     02 E4 05 F1 | 	add	objptr, #2
15104     F2 14 C2 FA | 	rdbyte	arg02, objptr
15108     04 14 66 F0 | 	shl	arg02, #4
1510c     03 E4 05 F1 | 	add	objptr, #3
15110     F2 18 02 FB | 	rdlong	arg04, objptr
15114     04 E4 05 F1 | 	add	objptr, #4
15118     F2 1A 02 FB | 	rdlong	arg05, objptr
1511c     41 E4 85 F1 | 	sub	objptr, #65
15120     0F 17 02 F6 | 	mov	arg03, local01
15124     E4 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
15128                 | '   cursor_x+=2
15128     38 E4 05 F1 | 	add	objptr, #56
1512c     F2 1E E2 FA | 	rdword	local01, objptr
15130     02 1E 06 F1 | 	add	local01, #2
15134     F2 1E 52 FC | 	wrword	local01, objptr
15138     38 E4 85 F1 | 	sub	objptr, #56
1513c                 | LR__1691
1513c                 | ' 
1513c                 | ' if cursor_x>=256
1513c     38 E4 05 F1 | 	add	objptr, #56
15140     F2 1E E2 FA | 	rdword	local01, objptr
15144     38 E4 85 F1 | 	sub	objptr, #56
15148     00 1F 56 F2 | 	cmps	local01, #256 wc
1514c     64 00 90 CD |  if_b	jmp	#LR__1693
15150                 | '   cursor_x:=0
15150     38 E4 05 F1 | 	add	objptr, #56
15154     F2 00 58 FC | 	wrword	#0, objptr
15158                 | '   cursor_y+=1
15158     02 E4 05 F1 | 	add	objptr, #2
1515c     F2 1E C2 FA | 	rdbyte	local01, objptr
15160     01 1E 06 F1 | 	add	local01, #1
15164     F2 1E 42 FC | 	wrbyte	local01, objptr
15168                 | '   if cursor_y>st_lines-1
15168     C3 E4 05 F1 | 	add	objptr, #195
1516c     F2 1E 02 FB | 	rdlong	local01, objptr
15170     01 1E 86 F1 | 	sub	local01, #1
15174     C3 E4 85 F1 | 	sub	objptr, #195
15178     F2 16 C2 FA | 	rdbyte	arg03, objptr
1517c     3A E4 85 F1 | 	sub	objptr, #58
15180     0F 17 5A F2 | 	cmps	arg03, local01 wcz
15184     2C 00 90 ED |  if_be	jmp	#LR__1692
15188                 | '     scrollup()
15188     00 12 06 F6 | 	mov	arg01, #0
1518c     01 00 00 FF 
15190     40 14 06 F6 | 	mov	arg02, ##576
15194     10 16 06 F6 | 	mov	arg03, #16
15198     9C 01 B0 FD | 	call	#_hg010b_spin2_scrollup
1519c                 | '     cursor_y:=st_lines-1
1519c     FD E4 05 F1 | 	add	objptr, #253
151a0     F2 1E 02 FB | 	rdlong	local01, objptr
151a4     01 1E 86 F1 | 	sub	local01, #1
151a8     C3 E4 85 F1 | 	sub	objptr, #195
151ac     F2 1E 42 FC | 	wrbyte	local01, objptr
151b0     3A E4 85 F1 | 	sub	objptr, #58
151b4                 | LR__1692
151b4                 | LR__1693
151b4                 | ' setspritepos(17,4*cursor_x,16*cursor_y )
151b4     38 E4 05 F1 | 	add	objptr, #56
151b8     F2 14 E2 FA | 	rdword	arg02, objptr
151bc     02 14 66 F0 | 	shl	arg02, #2
151c0     02 E4 05 F1 | 	add	objptr, #2
151c4     F2 16 C2 FA | 	rdbyte	arg03, objptr
151c8     3A E4 85 F1 | 	sub	objptr, #58
151cc     04 16 66 F0 | 	shl	arg03, #4
151d0     11 12 06 F6 | 	mov	arg01, #17
151d4     3C F1 BF FD | 	call	#_hg010b_spin2_setspritepos
151d8     A7 F0 03 F6 | 	mov	ptra, fp
151dc     B2 00 A0 FD | 	call	#popregs_
151e0                 | _hg010b_spin2_putchar_ret
151e0     2D 00 64 FD | 	ret
151e4                 | 
151e4                 | '     
151e4                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
151e4                 | ' 
151e4                 | ' pub putchar2(achar) | c,x,y,l,newcpl
151e4                 | _hg010b_spin2_putchar2
151e4     01 4A 05 F6 | 	mov	COUNT_, #1
151e8     A8 00 A0 FD | 	call	#pushregs_
151ec                 | ' 
151ec                 | ' putcharxycgf(cursor_x,16*cursor_y,achar,write_color,write_background)
151ec     38 E4 05 F1 | 	add	objptr, #56
151f0     F2 1E E2 FA | 	rdword	local01, objptr
151f4     02 E4 05 F1 | 	add	objptr, #2
151f8     F2 14 C2 FA | 	rdbyte	arg02, objptr
151fc     04 14 66 F0 | 	shl	arg02, #4
15200     09 17 02 F6 | 	mov	arg03, arg01
15204     03 E4 05 F1 | 	add	objptr, #3
15208     F2 18 02 FB | 	rdlong	arg04, objptr
1520c     04 E4 05 F1 | 	add	objptr, #4
15210     F2 1A 02 FB | 	rdlong	arg05, objptr
15214     41 E4 85 F1 | 	sub	objptr, #65
15218     0F 13 02 F6 | 	mov	arg01, local01
1521c     EC FB BF FD | 	call	#_hg010b_spin2_putcharxycgf
15220                 | ' cursor_x+=2
15220     38 E4 05 F1 | 	add	objptr, #56
15224     F2 1E E2 FA | 	rdword	local01, objptr
15228     02 1E 06 F1 | 	add	local01, #2
1522c     F2 1E 52 FC | 	wrword	local01, objptr
15230                 | ' if cursor_x>=256
15230     F2 1E E2 FA | 	rdword	local01, objptr
15234     38 E4 85 F1 | 	sub	objptr, #56
15238     00 1F 56 F2 | 	cmps	local01, #256 wc
1523c     64 00 90 CD |  if_b	jmp	#LR__1701
15240                 | '   cursor_x:=0
15240     38 E4 05 F1 | 	add	objptr, #56
15244     F2 00 58 FC | 	wrword	#0, objptr
15248                 | '   cursor_y+=1
15248     02 E4 05 F1 | 	add	objptr, #2
1524c     F2 1E C2 FA | 	rdbyte	local01, objptr
15250     01 1E 06 F1 | 	add	local01, #1
15254     F2 1E 42 FC | 	wrbyte	local01, objptr
15258                 | '   if cursor_y>st_lines-1
15258     C3 E4 05 F1 | 	add	objptr, #195
1525c     F2 1E 02 FB | 	rdlong	local01, objptr
15260     01 1E 86 F1 | 	sub	local01, #1
15264     C3 E4 85 F1 | 	sub	objptr, #195
15268     F2 1A C2 FA | 	rdbyte	arg05, objptr
1526c     3A E4 85 F1 | 	sub	objptr, #58
15270     0F 1B 5A F2 | 	cmps	arg05, local01 wcz
15274     2C 00 90 ED |  if_be	jmp	#LR__1700
15278                 | '     scrollup()
15278     00 12 06 F6 | 	mov	arg01, #0
1527c     01 00 00 FF 
15280     40 14 06 F6 | 	mov	arg02, ##576
15284     10 16 06 F6 | 	mov	arg03, #16
15288     AC 00 B0 FD | 	call	#_hg010b_spin2_scrollup
1528c                 | '     cursor_y:=st_lines-1
1528c     FD E4 05 F1 | 	add	objptr, #253
15290     F2 1E 02 FB | 	rdlong	local01, objptr
15294     01 1E 86 F1 | 	sub	local01, #1
15298     C3 E4 85 F1 | 	sub	objptr, #195
1529c     F2 1E 42 FC | 	wrbyte	local01, objptr
152a0     3A E4 85 F1 | 	sub	objptr, #58
152a4                 | LR__1700
152a4                 | LR__1701
152a4                 | ' setspritepos(17,4*cursor_x,16*cursor_y ) 
152a4     38 E4 05 F1 | 	add	objptr, #56
152a8     F2 14 E2 FA | 	rdword	arg02, objptr
152ac     02 14 66 F0 | 	shl	arg02, #2
152b0     02 E4 05 F1 | 	add	objptr, #2
152b4     F2 16 C2 FA | 	rdbyte	arg03, objptr
152b8     3A E4 85 F1 | 	sub	objptr, #58
152bc     04 16 66 F0 | 	shl	arg03, #4
152c0     11 12 06 F6 | 	mov	arg01, #17
152c4     4C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
152c8     A7 F0 03 F6 | 	mov	ptra, fp
152cc     B2 00 A0 FD | 	call	#popregs_
152d0                 | _hg010b_spin2_putchar2_ret
152d0     2D 00 64 FD | 	ret
152d4                 | 
152d4                 | ' ''--------- Output a string at the cursor position, move the cursor  
152d4                 | ' 
152d4                 | ' pub write(text) | iii,c,ncx,ncy
152d4                 | _hg010b_spin2_write
152d4     04 4A 05 F6 | 	mov	COUNT_, #4
152d8     A8 00 A0 FD | 	call	#pushregs_
152dc     09 1F 02 F6 | 	mov	local01, arg01
152e0                 | ' 
152e0                 | ' repeat iii from 0 to strsize(text)-1
152e0     00 20 06 F6 | 	mov	local02, #0
152e4     0F 13 02 F6 | 	mov	arg01, local01
152e8     09 23 02 F6 | 	mov	local03, arg01
152ec     97 06 48 FB | 	callpa	#(@LR__1711-@LR__1710)>>2,fcache_load_ptr_
152f0                 | LR__1710
152f0     11 FB C9 FA | 	rdbyte	result1, local03 wz
152f4     01 22 06 51 |  if_ne	add	local03, #1
152f8     F4 FF 9F 5D |  if_ne	jmp	#LR__1710
152fc                 | LR__1711
152fc     09 23 82 F1 | 	sub	local03, arg01
15300     01 22 86 F1 | 	sub	local03, #1
15304     00 22 56 F2 | 	cmps	local03, #0 wc
15308     01 24 86 F6 | 	negc	local04, #1
1530c     12 23 02 F1 | 	add	local03, local04
15310                 | LR__1712
15310                 | '   putchar2(byte[text+iii])
15310     0F 13 02 F6 | 	mov	arg01, local01
15314     10 13 02 F1 | 	add	arg01, local02
15318     09 13 C2 FA | 	rdbyte	arg01, arg01
1531c     C4 FE BF FD | 	call	#_hg010b_spin2_putchar2
15320     12 21 02 F1 | 	add	local02, local04
15324     11 21 0A F2 | 	cmp	local02, local03 wz
15328     E4 FF 9F 5D |  if_ne	jmp	#LR__1712
1532c     A7 F0 03 F6 | 	mov	ptra, fp
15330     B2 00 A0 FD | 	call	#popregs_
15334                 | _hg010b_spin2_write_ret
15334     2D 00 64 FD | 	ret
15338                 | 
15338                 | ' 
15338                 | ' ''-----------  Scroll the screen one line up
15338                 | ' 
15338                 | ' pub scrollup(start=0, end=576 , amount=16) | i
15338                 | _hg010b_spin2_scrollup
15338     01 4A 05 F6 | 	mov	COUNT_, #1
1533c     A8 00 A0 FD | 	call	#pushregs_
15340                 | ' 	
15340                 | ' repeat i from 0 to 559 
15340     00 1E 06 F6 | 	mov	local01, #0
15344                 | LR__1720
15344     F5 E4 05 F1 | 	add	objptr, #245
15348     F2 18 02 FB | 	rdlong	arg04, objptr
1534c     1C E4 85 F1 | 	sub	objptr, #28
15350     F2 14 02 FB | 	rdlong	arg02, objptr
15354     0F 13 02 F6 | 	mov	arg01, local01
15358     10 12 06 F1 | 	add	arg01, #16
1535c     02 12 66 F0 | 	shl	arg01, #2
15360     14 E4 05 F1 | 	add	objptr, #20
15364     F2 16 02 FB | 	rdlong	arg03, objptr
15368     0B 13 02 FD | 	qmul	arg01, arg03
1536c                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1536c     F6 03 00 FF 
15370     00 12 06 F6 | 	mov	arg01, ##519168
15374     0C 13 82 F1 | 	sub	arg01, arg04
15378     02 16 66 F0 | 	shl	arg03, #2
1537c     0A 00 00 FF 
15380     D3 E5 05 F1 | 	add	objptr, ##5587
15384     18 18 62 FD | 	getqx	arg04
15388     0C 15 02 F1 | 	add	arg02, arg04
1538c     7C 04 B0 FD | 	call	#_psram_spin2_read1
15390     0A 00 00 FF 
15394     CB E5 85 F1 | 	sub	objptr, ##5579
15398     F2 18 02 FB | 	rdlong	arg04, objptr
1539c     1C E4 85 F1 | 	sub	objptr, #28
153a0     F2 14 02 FB | 	rdlong	arg02, objptr
153a4     0F 13 02 F6 | 	mov	arg01, local01
153a8     02 12 66 F0 | 	shl	arg01, #2
153ac     14 E4 05 F1 | 	add	objptr, #20
153b0     F2 16 02 FB | 	rdlong	arg03, objptr
153b4     0B 13 02 FD | 	qmul	arg01, arg03
153b8                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
153b8     F6 03 00 FF 
153bc     00 12 06 F6 | 	mov	arg01, ##519168
153c0     0C 13 82 F1 | 	sub	arg01, arg04
153c4     02 16 66 F0 | 	shl	arg03, #2
153c8     0A 00 00 FF 
153cc     D3 E5 05 F1 | 	add	objptr, ##5587
153d0     18 18 62 FD | 	getqx	arg04
153d4     0C 15 02 F1 | 	add	arg02, arg04
153d8     CC 04 B0 FD | 	call	#_psram_spin2_write
153dc     0B 00 00 FF 
153e0     C0 E4 85 F1 | 	sub	objptr, ##5824
153e4     01 1E 06 F1 | 	add	local01, #1
153e8     01 00 00 FF 
153ec     30 1E 56 F2 | 	cmps	local01, ##560 wc
153f0     50 FF 9F CD |  if_b	jmp	#LR__1720
153f4                 | ' 
153f4                 | ' repeat i from 560 to 575
153f4     01 00 00 FF 
153f8     30 1E 06 F6 | 	mov	local01, ##560
153fc                 | LR__1721
153fc                 | '    fastline(0,1023,i,write_background)   
153fc     41 E4 05 F1 | 	add	objptr, #65
15400     F2 18 02 FB | 	rdlong	arg04, objptr
15404     41 E4 85 F1 | 	sub	objptr, #65
15408     00 12 06 F6 | 	mov	arg01, #0
1540c     09 14 CE F9 | 	bmask	arg02, #9
15410     0F 17 02 F6 | 	mov	arg03, local01
15414     2C F1 BF FD | 	call	#_hg010b_spin2_fastline
15418     01 1E 06 F1 | 	add	local01, #1
1541c     01 00 00 FF 
15420     40 1E 16 F2 | 	cmp	local01, ##576 wc
15424     D4 FF 9F CD |  if_b	jmp	#LR__1721
15428     A7 F0 03 F6 | 	mov	ptra, fp
1542c     B2 00 A0 FD | 	call	#popregs_
15430                 | _hg010b_spin2_scrollup_ret
15430     2D 00 64 FD | 	ret
15434                 | 
15434                 | ' 
15434                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
15434                 | ' 
15434                 | ' pub crlf()
15434                 | _hg010b_spin2_crlf
15434                 | ' 
15434                 | ' cursor_x:=leading_spaces*2
15434     01 00 00 FF 
15438     B2 E4 05 F1 | 	add	objptr, ##690
1543c     F2 16 02 FB | 	rdlong	arg03, objptr
15440     01 16 66 F0 | 	shl	arg03, #1
15444     01 00 00 FF 
15448     7A E4 85 F1 | 	sub	objptr, ##634
1544c     F2 16 52 FC | 	wrword	arg03, objptr
15450                 | ' cursor_y+=1
15450     02 E4 05 F1 | 	add	objptr, #2
15454     F2 16 C2 FA | 	rdbyte	arg03, objptr
15458     01 16 06 F1 | 	add	arg03, #1
1545c     F2 16 42 FC | 	wrbyte	arg03, objptr
15460                 | ' if cursor_y>st_lines-1
15460     C3 E4 05 F1 | 	add	objptr, #195
15464     F2 16 02 FB | 	rdlong	arg03, objptr
15468     01 16 86 F1 | 	sub	arg03, #1
1546c     C3 E4 85 F1 | 	sub	objptr, #195
15470     F2 14 C2 FA | 	rdbyte	arg02, objptr
15474     3A E4 85 F1 | 	sub	objptr, #58
15478     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
1547c     2C 00 90 ED |  if_be	jmp	#LR__1730
15480                 | '   scrollup()
15480     00 12 06 F6 | 	mov	arg01, #0
15484     01 00 00 FF 
15488     40 14 06 F6 | 	mov	arg02, ##576
1548c     10 16 06 F6 | 	mov	arg03, #16
15490     A4 FE BF FD | 	call	#_hg010b_spin2_scrollup
15494                 | '   cursor_y:=st_lines-1
15494     FD E4 05 F1 | 	add	objptr, #253
15498     F2 16 02 FB | 	rdlong	arg03, objptr
1549c     01 16 86 F1 | 	sub	arg03, #1
154a0     C3 E4 85 F1 | 	sub	objptr, #195
154a4     F2 16 42 FC | 	wrbyte	arg03, objptr
154a8     3A E4 85 F1 | 	sub	objptr, #58
154ac                 | LR__1730
154ac                 | ' setspritepos(17,4*cursor_x,16*cursor_y )  
154ac     38 E4 05 F1 | 	add	objptr, #56
154b0     F2 14 E2 FA | 	rdword	arg02, objptr
154b4     02 14 66 F0 | 	shl	arg02, #2
154b8     02 E4 05 F1 | 	add	objptr, #2
154bc     F2 16 C2 FA | 	rdbyte	arg03, objptr
154c0     3A E4 85 F1 | 	sub	objptr, #58
154c4     04 16 66 F0 | 	shl	arg03, #4
154c8     11 12 06 F6 | 	mov	arg01, #17
154cc     44 EE BF FD | 	call	#_hg010b_spin2_setspritepos
154d0                 | _hg010b_spin2_crlf_ret
154d0     2D 00 64 FD | 	ret
154d4                 | 
154d4                 | ' 
154d4                 | ' 
154d4                 | ' '*************************************************************************
154d4                 | ' '                                                                        *
154d4                 | ' '  Conversions                                                           *
154d4                 | ' '                                                                        *
154d4                 | ' '*************************************************************************
154d4                 | ' 
154d4                 | ' ''---------- Convert a integer to dec string, return a pointer
154d4                 | ' 
154d4                 | ' pub inttostr(i):result |q,pos,k,j
154d4                 | _hg010b_spin2_inttostr
154d4     03 4A 05 F6 | 	mov	COUNT_, #3
154d8     A8 00 A0 FD | 	call	#pushregs_
154dc     09 1F 0A F6 | 	mov	local01, arg01 wz
154e0                 | ' 
154e0                 | ' j:=i
154e0                 | ' pos:=10
154e0     0A 20 06 F6 | 	mov	local02, #10
154e4                 | ' k:=0
154e4     00 22 06 F6 | 	mov	local03, #0
154e8                 | ' 
154e8                 | ' if (j==0)
154e8     18 00 90 5D |  if_ne	jmp	#LR__1740
154ec                 | '   n_string[0]:=48
154ec     49 E4 05 F1 | 	add	objptr, #73
154f0     F2 60 48 FC | 	wrbyte	#48, objptr
154f4                 | '   n_string[1]:=0
154f4     01 E4 05 F1 | 	add	objptr, #1
154f8     F2 00 48 FC | 	wrbyte	#0, objptr
154fc     4A E4 85 F1 | 	sub	objptr, #74
15500     C4 00 90 FD | 	jmp	#LR__1747
15504                 | LR__1740
15504                 | ' 
15504                 | ' else
15504                 | '   if (j<0)
15504     0F 1F 52 F6 | 	abs	local01, local01 wc
15508                 | '     j:=0-j
15508                 | '     k:=45
15508     2D 22 06 C6 |  if_b	mov	local03, #45
1550c                 | ' 
1550c                 | '   n_string[11]:=0
1550c     54 E4 05 F1 | 	add	objptr, #84
15510     F2 00 48 FC | 	wrbyte	#0, objptr
15514     54 E4 85 F1 | 	sub	objptr, #84
15518     97 24 48 FB | 	callpa	#(@LR__1742-@LR__1741)>>2,fcache_load_ptr_
1551c                 | '   repeat while (pos>-1)
1551c                 | LR__1741
1551c     00 20 56 F2 | 	cmps	local02, #0 wc
15520     40 00 90 CD |  if_b	jmp	#LR__1743
15524     0F FB 51 F6 | 	abs	result1, local01 wc
15528     0A FA 15 FD | 	qdiv	result1, #10
1552c                 | '     q:=j//10
1552c     19 FA 61 FD | 	getqy	result1
15530     FD FA 81 F6 | 	negc	result1, result1
15534     0F 1F 52 F6 | 	abs	local01, local01 wc
15538     0A 1E 16 FD | 	qdiv	local01, #10
1553c                 | '     q:=48+q
1553c     30 FA 05 F1 | 	add	result1, #48
15540                 | '     n_string[pos]:=q
15540     10 1F 02 F6 | 	mov	local01, local02
15544     49 E4 05 F1 | 	add	objptr, #73
15548     F2 1E 02 F1 | 	add	local01, objptr
1554c     0F FB 41 FC | 	wrbyte	result1, local01
15550                 | '     j:=j/10
15550     49 E4 85 F1 | 	sub	objptr, #73
15554                 | '     pos-=1
15554     01 20 86 F1 | 	sub	local02, #1
15558     18 1E 62 FD | 	getqx	local01
1555c     0F 1F 82 F6 | 	negc	local01, local01
15560     B8 FF 9F FD | 	jmp	#LR__1741
15564                 | LR__1742
15564                 | LR__1743
15564                 | '   repeat while n_string[0]==48
15564                 | LR__1744
15564     49 E4 05 F1 | 	add	objptr, #73
15568     F2 16 C2 FA | 	rdbyte	arg03, objptr
1556c     49 E4 85 F1 | 	sub	objptr, #73
15570     30 16 0E F2 | 	cmp	arg03, #48 wz
15574     20 00 90 5D |  if_ne	jmp	#LR__1745
15578                 | '     bytemove(@n_string,@n_string+1,12)
15578     49 E4 05 F1 | 	add	objptr, #73
1557c     F2 12 02 F6 | 	mov	arg01, objptr
15580     F2 14 02 F6 | 	mov	arg02, objptr
15584     49 E4 85 F1 | 	sub	objptr, #73
15588     01 14 06 F1 | 	add	arg02, #1
1558c     0C 16 06 F6 | 	mov	arg03, #12
15590     84 0C B0 FD | 	call	#__system____builtin_memmove
15594     CC FF 9F FD | 	jmp	#LR__1744
15598                 | LR__1745
15598                 | ' 
15598                 | '   if k==45
15598     2D 22 0E F2 | 	cmp	local03, #45 wz
1559c     28 00 90 5D |  if_ne	jmp	#LR__1746
155a0                 | '      bytemove(@n_string+1,@n_string,12)
155a0     49 E4 05 F1 | 	add	objptr, #73
155a4     F2 12 02 F6 | 	mov	arg01, objptr
155a8     01 12 06 F1 | 	add	arg01, #1
155ac     F2 14 02 F6 | 	mov	arg02, objptr
155b0     49 E4 85 F1 | 	sub	objptr, #73
155b4     0C 16 06 F6 | 	mov	arg03, #12
155b8     5C 0C B0 FD | 	call	#__system____builtin_memmove
155bc                 | '      n_string[0]:=k
155bc     49 E4 05 F1 | 	add	objptr, #73
155c0     F2 22 42 FC | 	wrbyte	local03, objptr
155c4     49 E4 85 F1 | 	sub	objptr, #73
155c8                 | LR__1746
155c8                 | LR__1747
155c8                 | ' 
155c8                 | ' q:=@n_string
155c8     49 E4 05 F1 | 	add	objptr, #73
155cc     F2 FA 01 F6 | 	mov	result1, objptr
155d0     49 E4 85 F1 | 	sub	objptr, #73
155d4                 | ' return q
155d4     A7 F0 03 F6 | 	mov	ptra, fp
155d8     B2 00 A0 FD | 	call	#popregs_
155dc                 | _hg010b_spin2_inttostr_ret
155dc     2D 00 64 FD | 	ret
155e0                 | 
155e0                 | ' 
155e0                 | ' '..............................................................................
155e0                 | ' 
155e0                 | ' {{
155e0                 | ' }}
155e0                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
155e0                 | _psram_spin2_startx
155e0     04 4A 05 F6 | 	mov	COUNT_, #4
155e4     A8 00 A0 FD | 	call	#pushregs_
155e8     09 1F 02 F6 | 	mov	local01, arg01
155ec     0B 21 02 F6 | 	mov	local02, arg03
155f0     0C 23 02 F6 | 	mov	local03, arg04
155f4                 | '     stop() ' restart driver if required
155f4     54 01 B0 FD | 	call	#_psram_spin2_stop
155f8     00 1E 0E F2 | 	cmp	local01, #0 wz
155fc     14 1E 06 AB |  if_e	rdlong	local01, #20
15600     0F 15 52 F6 | 	abs	arg02, local01 wc
15604     A1 07 00 FF 
15608     40 14 16 FD | 	qdiv	arg02, ##1000000
1560c                 | ' 
1560c                 | '     ' use current frequency if none specified
1560c                 | ' 
1560c                 | '     if freq == 0 
1560c                 | '         freq := clkfreq 
1560c                 | ' 
1560c                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
1560c                 | ' 
1560c                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
1560c                 | '     if burst < 0
1560c                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
1560c     18 14 62 FD | 	getqx	arg02
15610     0A 19 82 F6 | 	negc	arg04, arg02
15614     03 18 66 F0 | 	shl	arg04, #3
15618     84 18 86 F1 | 	sub	arg04, #132
1561c     04 18 46 F0 | 	shr	arg04, #4
15620     04 18 66 F0 | 	shl	arg04, #4
15624     00 18 56 F2 | 	cmps	arg04, #0 wc
15628     0E FA 65 C6 |  if_b	neg	result1, #14
1562c     10 01 90 CD |  if_b	jmp	#LR__1753
15630                 | ' 
15630                 | '     ' compute the input delay
15630                 | ' 
15630                 | '     if delay <= 0
15630     01 20 56 F2 | 	cmps	local02, #1 wc
15634     10 00 90 3D |  if_ae	jmp	#LR__1750
15638                 | '         delay := lookupDelay(freq)
15638     0F 13 02 F6 | 	mov	arg01, local01
1563c     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
15640     FD 20 02 F6 | 	mov	local02, result1
15644     04 00 90 FD | 	jmp	#LR__1751
15648                 | LR__1750
15648                 | '     else
15648                 | '         delay <#= $f ' limit to 15
15648     0F 20 66 F3 | 	fles	local02, #15
1564c                 | LR__1751
1564c                 | ' 
1564c                 | '     ' create our lock
1564c                 | ' 
1564c                 | '     driverlock := LOCKNEW()  
1564c     00 FA 05 F6 | 	mov	result1, #0
15650     04 FA 61 FD | 	locknew	result1
15654     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
15658     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
1565c                 | '     if driverlock == -1
1565c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
15660     FF FF 7F FF 
15664     FF FB 0D F2 | 	cmp	result1, ##-1 wz
15668                 | '         return ERR_NO_LOCK
15668     1A FA 65 A6 |  if_e	neg	result1, #26
1566c     D0 00 90 AD |  if_e	jmp	#LR__1753
15670                 | ' 
15670                 | '     ' patch in the proper data and HUB addresses to the startup structure
15670                 | ' 
15670                 | '     long[@startupData][0]:=clkfreq
15670     14 1E 06 FB | 	rdlong	local01, #20
15674     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
15678     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
1567c                 | ' '    long[@startupData][1]:=$1000_0000
1567c                 | '     long[@startupData][5]:=@deviceData
1567c     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
15680     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
15684     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
15688     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
1568c     14 14 06 F1 | 	add	arg02, #20
15690     0A 1F 62 FC | 	wrlong	local01, arg02
15694                 | '     long[@startupData][6]:=@qosData
15694     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
15698     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
1569c     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
156a0     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
156a4     18 14 06 F1 | 	add	arg02, #24
156a8     0A 1F 62 FC | 	wrlong	local01, arg02
156ac                 | '     long[@startupData][7]:=$7FF00
156ac     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
156b0     1C 1E 06 F1 | 	add	local01, #28
156b4     FF 03 80 FF 
156b8     0F 01 6A FC | 	wrlong	##524032, local01
156bc                 | ' 
156bc                 | '     ' setup some default bank and QoS parameter values
156bc                 | ' 
156bc                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
156bc     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
156c0     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
156c4     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
156c8     10 18 66 F0 | 	shl	arg04, #16
156cc     0C 20 66 F0 | 	shl	local02, #12
156d0     10 19 42 F5 | 	or	arg04, local02
156d4     18 18 46 F5 | 	or	arg04, #24
156d8     0C 15 02 F6 | 	mov	arg02, arg04
156dc     02 16 06 F6 | 	mov	arg03, #2
156e0     A0 00 A0 FD | 	call	#\builtin_longfill_
156e4                 | '     longfill(@qosData, $FFFF0000, 8)
156e4     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
156e8     07 16 06 F6 | 	mov	arg03, #7
156ec     28 16 62 FD | 	setq	arg03
156f0     80 FF FF FF 
156f4     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
156f8                 | ' 
156f8                 | '     ' get the address of the PSRAM memory driver so we can start it
156f8                 | ' 
156f8                 | '     driverAddr:= driver.getDriverAddr()
156f8                 | '     return @driver_start
156f8     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
156fc     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
15700     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
15704                 | ' 
15704                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
15704                 | ' 
15704                 | '     if desiredcog < 0
15704     00 22 56 F2 | 	cmps	local03, #0 wc
15708                 | '         desiredcog := NEWCOG
15708     10 22 06 C6 |  if_b	mov	local03, #16
1570c                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
1570c     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
15710     11 25 02 F6 | 	mov	local04, local03
15714     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
15718     0A 25 F2 FC | 	coginit	local04, arg02 wc
1571c     01 24 66 C6 |  if_b	neg	local04, #1
15720     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
15724     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
15728                 | '     repeat until long[@startupData] == 0 
15728     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
1572c                 | LR__1752
1572c     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
15730     F8 FF 9F 5D |  if_ne	jmp	#LR__1752
15734                 | ' 
15734                 | '     return drivercog
15734     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
15738     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
1573c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
15740                 | LR__1753
15740     A7 F0 03 F6 | 	mov	ptra, fp
15744     B2 00 A0 FD | 	call	#popregs_
15748                 | _psram_spin2_startx_ret
15748     2D 00 64 FD | 	ret
1574c                 | 
1574c                 | ' 
1574c                 | ' '..............................................................................
1574c                 | ' 
1574c                 | ' {{
1574c                 | ' }}
1574c                 | ' PUB stop() : i
1574c                 | _psram_spin2_stop
1574c     00 00 06 F6 | 	mov	_var01, #0
15750                 | '     if drivercog <> -1
15750     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
15754     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
15758     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
1575c     FF FF 7F FF 
15760     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
15764     70 00 90 AD |  if_e	jmp	#LR__1763
15768                 | '         cogstop(drivercog) ' a rather brutal stop
15768     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
1576c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
15770     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
15774     03 12 62 FD | 	cogstop	arg01
15778     97 26 48 FB | 	callpa	#(@LR__1762-@LR__1760)>>2,fcache_load_ptr_
1577c                 | '         repeat i from 0 to 7
1577c                 | LR__1760
1577c                 | '             if long[$7FF00][i*3] < 0
1577c     00 FB 01 F6 | 	mov	result1, _var01
15780     01 FA 65 F0 | 	shl	result1, #1
15784     00 FB 01 F1 | 	add	result1, _var01
15788     02 FA 65 F0 | 	shl	result1, #2
1578c     FF 03 00 FF 
15790     00 FB 05 F1 | 	add	result1, ##524032
15794     FD FA 01 FB | 	rdlong	result1, result1
15798     00 FA 55 F2 | 	cmps	result1, #0 wc
1579c     1C 00 90 3D |  if_ae	jmp	#LR__1761
157a0                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
157a0     00 FB 01 F6 | 	mov	result1, _var01
157a4     01 FA 65 F0 | 	shl	result1, #1
157a8     00 FB 01 F1 | 	add	result1, _var01
157ac     02 FA 65 F0 | 	shl	result1, #2
157b0     FF 03 00 FF 
157b4     00 FB 05 F1 | 	add	result1, ##524032
157b8     FD 20 68 FC | 	wrlong	#16, result1
157bc                 | LR__1761
157bc     01 00 06 F1 | 	add	_var01, #1
157c0     08 00 56 F2 | 	cmps	_var01, #8 wc
157c4     B4 FF 9F CD |  if_b	jmp	#LR__1760
157c8                 | LR__1762
157c8                 | '         drivercog := -1
157c8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
157cc     FF FF FF FF 
157d0     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
157d4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
157d8                 | LR__1763
157d8                 | '     if driverlock <> -1
157d8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
157dc     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
157e0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
157e4     FF FF 7F FF 
157e8     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
157ec                 | '         LOCKRET(driverlock)
157ec     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
157f0     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
157f4     05 12 62 5D |  if_ne	lockret	arg01
157f8                 | '         driverlock := -1
157f8     FF FF FF 5F 
157fc     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
15800     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
15804     00 FB 01 F6 | 	mov	result1, _var01
15808                 | _psram_spin2_stop_ret
15808     2D 00 64 FD | 	ret
1580c                 | 
1580c                 | ' 
1580c                 | ' '..............................................................................
1580c                 | ' 
1580c                 | ' {{
1580c                 | ' }}
1580c                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
1580c                 | _psram_spin2_read1
1580c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
1580c                 | '     if drivercog == -1 ' driver must be running
1580c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
15810     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
15814     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
15818     FF FF 7F FF 
1581c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
15820                 | '         return ERR_INACTIVE
15820     0F FA 65 A6 |  if_e	neg	result1, #15
15824     7C 00 90 AD |  if_e	jmp	#LR__1771
15828                 | '     if count == 0 ' don't even bother reading
15828     00 16 0E F2 | 	cmp	arg03, #0 wz
1582c                 | '         return 0
1582c     00 FA 05 A6 |  if_e	mov	result1, #0
15830     70 00 90 AD |  if_e	jmp	#LR__1771
15834                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
15834     00 FA 05 F6 | 	mov	result1, #0
15838     01 FA 61 FD | 	cogid	result1
1583c     FD 00 02 F6 | 	mov	_var01, result1
15840     01 00 66 F0 | 	shl	_var01, #1
15844     FD 00 02 F1 | 	add	_var01, result1
15848     02 00 66 F0 | 	shl	_var01, #2
1584c     FF 03 00 FF 
15850     00 03 06 F6 | 	mov	_var02, ##524032
15854     00 03 02 F1 | 	add	_var02, _var01
15858                 | '     if long[mailbox] < 0
15858     01 01 02 FB | 	rdlong	_var01, _var02
1585c     00 00 56 F2 | 	cmps	_var01, #0 wc
15860                 | '         return ERR_MAILBOX_BUSY
15860     1C FA 65 C6 |  if_b	neg	result1, #28
15864     3C 00 90 CD |  if_b	jmp	#LR__1771
15868                 | '     long[mailbox][2] := count
15868     08 02 06 F1 | 	add	_var02, #8
1586c     01 17 62 FC | 	wrlong	arg03, _var02
15870                 | '     long[mailbox][1] := dstHubAddr
15870     04 02 86 F1 | 	sub	_var02, #4
15874     01 13 62 FC | 	wrlong	arg01, _var02
15878     04 02 86 F1 | 	sub	_var02, #4
1587c                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
1587c     0A 05 02 F6 | 	mov	_var03, arg02
15880     D9 04 06 F4 | 	bitl	_var03, #217
15884     00 00 58 FF 
15888     00 00 06 F6 | 	mov	_var01, ##-1342177280
1588c     02 01 02 F1 | 	add	_var01, _var03
15890     01 01 62 FC | 	wrlong	_var01, _var02
15894                 | '     repeat
15894                 | LR__1770
15894                 | '         result := long[mailbox]    
15894     01 05 02 FB | 	rdlong	_var03, _var02
15898     00 04 56 F2 | 	cmps	_var03, #0 wc
1589c     F4 FF 9F CD |  if_b	jmp	#LR__1770
158a0                 | '     while result < 0   
158a0                 | '     return -result                       'return success or error
158a0     02 FB 61 F6 | 	neg	result1, _var03
158a4                 | LR__1771
158a4                 | _psram_spin2_read1_ret
158a4     2D 00 64 FD | 	ret
158a8                 | 
158a8                 | ' 
158a8                 | ' '..............................................................................
158a8                 | ' 
158a8                 | ' {{
158a8                 | ' }}
158a8                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
158a8                 | _psram_spin2_write
158a8                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
158a8                 | '     if drivercog == -1 ' driver must be running
158a8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
158ac     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
158b0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
158b4     FF FF 7F FF 
158b8     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
158bc                 | '         return ERR_INACTIVE
158bc     0F FA 65 A6 |  if_e	neg	result1, #15
158c0     7C 00 90 AD |  if_e	jmp	#LR__1781
158c4                 | '     if count == 0 ' don't even bother writing
158c4     00 16 0E F2 | 	cmp	arg03, #0 wz
158c8                 | '         return 0
158c8     00 FA 05 A6 |  if_e	mov	result1, #0
158cc     70 00 90 AD |  if_e	jmp	#LR__1781
158d0                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
158d0     00 FA 05 F6 | 	mov	result1, #0
158d4     01 FA 61 FD | 	cogid	result1
158d8     FD 00 02 F6 | 	mov	_var01, result1
158dc     01 00 66 F0 | 	shl	_var01, #1
158e0     FD 00 02 F1 | 	add	_var01, result1
158e4     02 00 66 F0 | 	shl	_var01, #2
158e8     FF 03 00 FF 
158ec     00 03 06 F6 | 	mov	_var02, ##524032
158f0     00 03 02 F1 | 	add	_var02, _var01
158f4                 | '     if long[mailbox] < 0
158f4     01 01 02 FB | 	rdlong	_var01, _var02
158f8     00 00 56 F2 | 	cmps	_var01, #0 wc
158fc                 | '         return ERR_MAILBOX_BUSY
158fc     1C FA 65 C6 |  if_b	neg	result1, #28
15900     3C 00 90 CD |  if_b	jmp	#LR__1781
15904                 | '     long[mailbox][2] := count
15904     08 02 06 F1 | 	add	_var02, #8
15908     01 17 62 FC | 	wrlong	arg03, _var02
1590c                 | '     long[mailbox][1] := srcHubAddr
1590c     04 02 86 F1 | 	sub	_var02, #4
15910     01 13 62 FC | 	wrlong	arg01, _var02
15914     04 02 86 F1 | 	sub	_var02, #4
15918                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
15918     0A 05 02 F6 | 	mov	_var03, arg02
1591c     D9 04 06 F4 | 	bitl	_var03, #217
15920     00 00 78 FF 
15924     00 00 06 F6 | 	mov	_var01, ##-268435456
15928     02 01 02 F1 | 	add	_var01, _var03
1592c     01 01 62 FC | 	wrlong	_var01, _var02
15930                 | '     repeat
15930                 | LR__1780
15930                 | '         result := long[mailbox]    
15930     01 05 02 FB | 	rdlong	_var03, _var02
15934     00 04 56 F2 | 	cmps	_var03, #0 wc
15938     F4 FF 9F CD |  if_b	jmp	#LR__1780
1593c                 | '     while result < 0   
1593c                 | '     return -result                       'return success or error
1593c     02 FB 61 F6 | 	neg	result1, _var03
15940                 | LR__1781
15940                 | _psram_spin2_write_ret
15940     2D 00 64 FD | 	ret
15944                 | 
15944                 | ' 
15944                 | ' ' generalized fill
15944                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
15944                 | _psram_spin2_fill
15944     09 01 02 F6 | 	mov	_var01, arg01
15948     0A 03 02 F6 | 	mov	_var02, arg02
1594c     0B 05 02 F6 | 	mov	_var03, arg03
15950     0D 07 02 F6 | 	mov	_var04, arg05
15954                 | '     case datasize 
15954     01 06 86 F1 | 	sub	_var04, #1
15958     04 06 26 F3 | 	fle	_var04, #4
1595c     30 06 62 FD | 	jmprel	_var04
15960                 | LR__1790
15960     10 00 90 FD | 	jmp	#LR__1791
15964     18 00 90 FD | 	jmp	#LR__1792
15968     2C 00 90 FD | 	jmp	#LR__1794
1596c     1C 00 90 FD | 	jmp	#LR__1793
15970     24 00 90 FD | 	jmp	#LR__1794
15974                 | LR__1791
15974                 | '         1: req := driver.R_WRITEBYTE
15974     00 00 60 FF 
15978     00 08 06 F6 | 	mov	_var05, ##-1073741824
1597c     20 00 90 FD | 	jmp	#LR__1795
15980                 | LR__1792
15980                 | '         2: req := driver.R_WRITEWORD
15980     00 00 68 FF 
15984     00 08 06 F6 | 	mov	_var05, ##-805306368
15988     14 00 90 FD | 	jmp	#LR__1795
1598c                 | LR__1793
1598c                 | '         4: req := driver.R_WRITELONG
1598c     00 00 70 FF 
15990     00 08 06 F6 | 	mov	_var05, ##-536870912
15994     08 00 90 FD | 	jmp	#LR__1795
15998                 | LR__1794
15998                 | '         other : return ERR_INVALID
15998     06 FA 65 F6 | 	neg	result1, #6
1599c     94 00 90 FD | 	jmp	#LR__1797
159a0                 | LR__1795
159a0                 | '     if count == 0   ' nothing to do
159a0     00 04 0E F2 | 	cmp	_var03, #0 wz
159a4                 | '         return 0
159a4     00 FA 05 A6 |  if_e	mov	result1, #0
159a8     88 00 90 AD |  if_e	jmp	#LR__1797
159ac                 | '     if drivercog == -1
159ac     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
159b0     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
159b4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
159b8     FF FF 7F FF 
159bc     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
159c0                 | '         return ERR_INACTIVE
159c0     0F FA 65 A6 |  if_e	neg	result1, #15
159c4     6C 00 90 AD |  if_e	jmp	#LR__1797
159c8                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
159c8     00 FA 05 F6 | 	mov	result1, #0
159cc     01 FA 61 FD | 	cogid	result1
159d0     FD 06 02 F6 | 	mov	_var04, result1
159d4     01 06 66 F0 | 	shl	_var04, #1
159d8     FD 06 02 F1 | 	add	_var04, result1
159dc     02 06 66 F0 | 	shl	_var04, #2
159e0     FF 03 00 FF 
159e4     00 0B 06 F6 | 	mov	_var06, ##524032
159e8     03 0B 02 F1 | 	add	_var06, _var04
159ec                 | '     if long[mailbox] < 0
159ec     05 07 02 FB | 	rdlong	_var04, _var06
159f0     00 06 56 F2 | 	cmps	_var04, #0 wc
159f4                 | '         return ERR_MAILBOX_BUSY
159f4     1C FA 65 C6 |  if_b	neg	result1, #28
159f8     38 00 90 CD |  if_b	jmp	#LR__1797
159fc                 | '     long[mailbox][2] := count
159fc     08 0A 06 F1 | 	add	_var06, #8
15a00     05 05 62 FC | 	wrlong	_var03, _var06
15a04                 | '     long[mailbox][1] := pattern
15a04     04 0A 86 F1 | 	sub	_var06, #4
15a08     05 03 62 FC | 	wrlong	_var02, _var06
15a0c     04 0A 86 F1 | 	sub	_var06, #4
15a10                 | '     long[mailbox] := req + (addr & $fffffff)
15a10     04 0D 02 F6 | 	mov	_var07, _var05
15a14     00 0F 02 F6 | 	mov	_var08, _var01
15a18     7C 0E 06 F4 | 	bitl	_var08, #124
15a1c     07 0D 02 F1 | 	add	_var07, _var08
15a20     05 0D 62 FC | 	wrlong	_var07, _var06
15a24                 | '     repeat
15a24                 | LR__1796
15a24                 | '         r := long[mailbox]
15a24     05 0F 02 FB | 	rdlong	_var08, _var06
15a28     00 0E 56 F2 | 	cmps	_var08, #0 wc
15a2c     F4 FF 9F CD |  if_b	jmp	#LR__1796
15a30                 | '     while r < 0
15a30                 | '     return -r                  ' return 0 for success or negated error code
15a30     07 FB 61 F6 | 	neg	result1, _var08
15a34                 | LR__1797
15a34                 | _psram_spin2_fill_ret
15a34     2D 00 64 FD | 	ret
15a38                 | 
15a38                 | ' 
15a38                 | ' '..............................................................................
15a38                 | ' 
15a38                 | ' {{
15a38                 | ' }}
15a38                 | ' PUB setQos(cog, qos) : result | mailbox
15a38                 | _psram_spin2_setQos
15a38     09 01 02 F6 | 	mov	_var01, arg01
15a3c                 | '     if drivercog == -1 ' driver must be running
15a3c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
15a40     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
15a44     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
15a48     FF FF 7F FF 
15a4c     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
15a50                 | '         return ERR_INACTIVE
15a50     0F FA 65 A6 |  if_e	neg	result1, #15
15a54     9C 00 90 AD |  if_e	jmp	#LR__1804
15a58                 | '     if cog < 0 or cog > 7 ' enforce cog id range
15a58     00 00 56 F2 | 	cmps	_var01, #0 wc
15a5c     08 00 90 CD |  if_b	jmp	#LR__1800
15a60     08 00 56 F2 | 	cmps	_var01, #8 wc
15a64     08 00 90 CD |  if_b	jmp	#LR__1801
15a68                 | LR__1800
15a68                 | '         return ERR_INVALID
15a68     06 FA 65 F6 | 	neg	result1, #6
15a6c     84 00 90 FD | 	jmp	#LR__1804
15a70                 | LR__1801
15a70                 | '     long[@qosData][cog] := qos & !$1ff
15a70     FF 15 26 F5 | 	andn	arg02, #511
15a74     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
15a78     02 00 66 F0 | 	shl	_var01, #2
15a7c     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
15a80     00 15 62 FC | 	wrlong	arg02, _var01
15a84                 | '     mailbox := $7FF00 + drivercog*12
15a84     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
15a88     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
15a8c     02 07 02 F6 | 	mov	_var04, _var03
15a90     01 06 66 F0 | 	shl	_var04, #1
15a94     02 07 02 F1 | 	add	_var04, _var03
15a98     02 06 66 F0 | 	shl	_var04, #2
15a9c     FF 03 00 FF 
15aa0     00 09 06 F6 | 	mov	_var05, ##524032
15aa4     03 09 02 F1 | 	add	_var05, _var04
15aa8                 | '     repeat until LOCKTRY(driverlock)
15aa8     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
15aac                 | LR__1802
15aac     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
15ab0     06 12 72 FD | 	locktry	arg01 wc
15ab4     F4 FF 9F 3D |  if_ae	jmp	#LR__1802
15ab8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
15abc                 | '     long[mailbox] := driver.R_CONFIG + cogid()
15abc     00 06 06 F6 | 	mov	_var04, #0
15ac0     01 06 62 FD | 	cogid	_var04
15ac4     00 00 78 FF 
15ac8     00 02 06 F6 | 	mov	_var02, ##-268435456
15acc     03 03 02 F1 | 	add	_var02, _var04
15ad0     04 03 62 FC | 	wrlong	_var02, _var05
15ad4                 | '     repeat while long[mailbox] < 0
15ad4                 | LR__1803
15ad4     04 03 02 FB | 	rdlong	_var02, _var05
15ad8     00 02 56 F2 | 	cmps	_var02, #0 wc
15adc     F4 FF 9F CD |  if_b	jmp	#LR__1803
15ae0                 | '     LOCKREL(driverlock)
15ae0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
15ae4     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
15ae8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
15aec     07 12 72 FD | 	lockrel	arg01 wc
15af0     00 FA 05 F6 | 	mov	result1, #0
15af4                 | LR__1804
15af4                 | _psram_spin2_setQos_ret
15af4     2D 00 64 FD | 	ret
15af8                 | 
15af8                 | ' 
15af8                 | ' '..............................................................................
15af8                 | ' 
15af8                 | ' {{
15af8                 | ' }}
15af8                 | ' PRI lookupDelay(freq) : delay | profile
15af8                 | _psram_spin2_lookupDelay
15af8                 | '     profile := @delayTable
15af8     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
15afc     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
15b00                 | '     delay := long[profile][0]
15b00     00 03 02 FB | 	rdlong	_var02, _var01
15b04                 | '     repeat while long[profile][1] 
15b04     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
15b08     97 16 48 FB | 	callpa	#(@LR__1811-@LR__1810)>>2,fcache_load_ptr_
15b0c                 | LR__1810
15b0c     04 00 06 F1 | 	add	_var01, #4
15b10     00 FB 09 FB | 	rdlong	result1, _var01 wz
15b14     04 00 86 F1 | 	sub	_var01, #4
15b18     1C 00 90 AD |  if_e	jmp	#LR__1812
15b1c                 | '         if freq +< long[profile][1] 
15b1c     04 00 06 F1 | 	add	_var01, #4
15b20     00 FB 01 FB | 	rdlong	result1, _var01
15b24     04 00 86 F1 | 	sub	_var01, #4
15b28     FD 12 12 F2 | 	cmp	arg01, result1 wc
15b2c                 | '             quit
15b2c                 | '         profile += 4
15b2c     04 00 06 31 |  if_ae	add	_var01, #4
15b30                 | '         delay++
15b30     01 02 06 31 |  if_ae	add	_var02, #1
15b34     D4 FF 9F 3D |  if_ae	jmp	#LR__1810
15b38                 | LR__1811
15b38                 | LR__1812
15b38     01 FB 01 F6 | 	mov	result1, _var02
15b3c                 | _psram_spin2_lookupDelay_ret
15b3c     2D 00 64 FD | 	ret
15b40                 | 
15b40                 | ' 
15b40                 | ' PUB start() : r
15b40                 | _usbnew_spin2_start
15b40     00 00 06 F6 | 	mov	_var01, #0
15b44                 | '   ifnot driver_cog
15b44     15 00 00 FF 
15b48     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
15b4c     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
15b50     15 00 00 FF 
15b54     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
15b58     38 00 90 5D |  if_ne	jmp	#LR__1820
15b5c                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
15b5c     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
15b60     10 00 06 F6 | 	mov	_var01, #16
15b64     00 16 06 F6 | 	mov	arg03, #0
15b68     28 16 62 FD | 	setq	arg03
15b6c     0A 01 F2 FC | 	coginit	_var01, arg02 wc
15b70     01 00 66 C6 |  if_b	neg	_var01, #1
15b74                 | '     if r >= 0
15b74     00 00 56 F2 | 	cmps	_var01, #0 wc
15b78                 | '       driver_cog := r+1
15b78     00 03 02 36 |  if_ae	mov	_var02, _var01
15b7c     01 02 06 31 |  if_ae	add	_var02, #1
15b80     15 00 00 3F 
15b84     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
15b88     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
15b8c     15 00 00 3F 
15b90     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
15b94                 | LR__1820
15b94     00 FB 01 F6 | 	mov	result1, _var01
15b98                 | _usbnew_spin2_start_ret
15b98     2D 00 64 FD | 	ret
15b9c                 | 
15b9c                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
15b9c                 | ' 
15b9c                 | ' '' Return key event from buffer if there is one
15b9c                 | ' PUB get_key() : r | tail
15b9c                 | _usbnew_spin2_get_key
15b9c                 | '   tail := keyq_tail
15b9c     0F 00 00 FF 
15ba0     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
15ba4     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
15ba8                 | '   if keyq_head == tail
15ba8     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
15bac     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
15bb0     0F 00 00 FF 
15bb4     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
15bb8     00 03 0A F2 | 	cmp	_var02, _var01 wz
15bbc                 | '     return 0 ' No event
15bbc     00 FA 05 A6 |  if_e	mov	result1, #0
15bc0     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
15bc4                 | '   r := keyq_data[tail]
15bc4     00 03 02 F6 | 	mov	_var02, _var01
15bc8     02 02 66 F0 | 	shl	_var02, #2
15bcc     0F 00 00 FF 
15bd0     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
15bd4     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
15bd8     01 FB 01 FB | 	rdlong	result1, _var02
15bdc                 | '   if ++tail == KEYQUEUE_SIZE
15bdc     01 00 06 F1 | 	add	_var01, #1
15be0     80 00 0E F2 | 	cmp	_var01, #128 wz
15be4                 | '     tail := 0
15be4     00 00 06 A6 |  if_e	mov	_var01, #0
15be8                 | '   keyq_tail := tail
15be8     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
15bec     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
15bf0     0F 00 00 FF 
15bf4     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
15bf8                 | _usbnew_spin2_get_key_ret
15bf8     2D 00 64 FD | 	ret
15bfc                 | 
15bfc                 | ' 
15bfc                 | ' '' Emulate mouse movement
15bfc                 | ' PUB mouse_move(x,y)
15bfc                 | _usbnew_spin2_mouse_move
15bfc     02 4A 05 F6 | 	mov	COUNT_, #2
15c00     A8 00 A0 FD | 	call	#pushregs_
15c04     09 1F 02 F6 | 	mov	local01, arg01
15c08     0A 21 02 F6 | 	mov	local02, arg02
15c0c                 | '   mouse_lock := 1
15c0c     14 00 00 FF 
15c10     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
15c14     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
15c18     14 00 00 FF 
15c1c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
15c20                 | '   waitus(2) ' hope driver is now done
15c20     02 12 06 F6 | 	mov	arg01, #2
15c24     30 0A B0 FD | 	call	#__system___waitus
15c28                 | '   mouse_xacc := x
15c28     14 00 00 FF 
15c2c     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
15c30     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
15c34                 | '   mouse_yacc := y
15c34     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
15c38     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
15c3c                 | '   if mouse_outptr
15c3c     04 00 00 FF 
15c40     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
15c44     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
15c48     0F 00 00 FF 
15c4c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
15c50     24 00 90 AD |  if_e	jmp	#LR__1830
15c54                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
15c54     10 20 66 F0 | 	shl	local02, #16
15c58     0F 1F 32 F9 | 	getword	local01, local01, #0
15c5c     0F 21 42 F5 | 	or	local02, local01
15c60     0F 00 00 FF 
15c64     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
15c68     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
15c6c     0F 00 00 FF 
15c70     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
15c74     0F 21 62 FC | 	wrlong	local02, local01
15c78                 | LR__1830
15c78                 | '   mouse_lock := 0
15c78     14 00 00 FF 
15c7c     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
15c80     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
15c84     14 00 00 FF 
15c88     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
15c8c     A7 F0 03 F6 | 	mov	ptra, fp
15c90     B2 00 A0 FD | 	call	#popregs_
15c94                 | _usbnew_spin2_mouse_move_ret
15c94     2D 00 64 FD | 	ret
15c98                 | 
15c98                 | '     '' Set HAVE_HIDPAD to enable.
15c98                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
15c98                 | ' 
15c98                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
15c98                 | ' PUB hidpad_id(dev) : r
15c98                 | _usbnew_spin2_hidpad_id
15c98                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
15c98     13 00 00 FF 
15c9c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
15ca0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
15ca4     09 01 02 F6 | 	mov	_var01, arg01
15ca8     03 00 66 F0 | 	shl	_var01, #3
15cac     09 01 82 F1 | 	sub	_var01, arg01
15cb0     02 00 66 F0 | 	shl	_var01, #2
15cb4     00 FB 01 F1 | 	add	result1, _var01
15cb8     FD FA 01 FB | 	rdlong	result1, result1
15cbc     13 00 00 FF 
15cc0     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
15cc4                 | _usbnew_spin2_hidpad_id_ret
15cc4     2D 00 64 FD | 	ret
15cc8                 | 
15cc8                 | ' 
15cc8                 | ' '' Get all button states for a device
15cc8                 | ' PUB hidpad_buttons(dev) : r 
15cc8                 | _usbnew_spin2_hidpad_buttons
15cc8                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
15cc8     13 00 00 FF 
15ccc     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
15cd0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
15cd4     09 01 02 F6 | 	mov	_var01, arg01
15cd8     03 00 66 F0 | 	shl	_var01, #3
15cdc     09 01 82 F1 | 	sub	_var01, arg01
15ce0     02 00 66 F0 | 	shl	_var01, #2
15ce4     00 FB 01 F1 | 	add	result1, _var01
15ce8     14 FA 05 F1 | 	add	result1, #20
15cec     FD FA 01 FB | 	rdlong	result1, result1
15cf0     13 00 00 FF 
15cf4     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
15cf8                 | _usbnew_spin2_hidpad_buttons_ret
15cf8     2D 00 64 FD | 	ret
15cfc                 | 
15cfc                 | ' 
15cfc                 | ' '' Get state of an axis (normalized between -32768 and 32767)
15cfc                 | ' PUB hidpad_axis(dev,axnum) : r
15cfc                 | _usbnew_spin2_hidpad_axis
15cfc                 | '   if axnum +>= 6
15cfc     06 14 16 F2 | 	cmp	arg02, #6 wc
15d00                 | '     return 0
15d00     00 FA 05 36 |  if_ae	mov	result1, #0
15d04     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
15d08                 | '   else 
15d08                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
15d08     13 00 00 FF 
15d0c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
15d10     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
15d14     09 01 02 F6 | 	mov	_var01, arg01
15d18     03 00 66 F0 | 	shl	_var01, #3
15d1c     09 01 82 F1 | 	sub	_var01, arg01
15d20     02 00 66 F0 | 	shl	_var01, #2
15d24     00 FB 01 F1 | 	add	result1, _var01
15d28     04 00 06 F6 | 	mov	_var01, #4
15d2c     0A 01 02 F1 | 	add	_var01, arg02
15d30     01 00 66 F0 | 	shl	_var01, #1
15d34     FD 00 02 F1 | 	add	_var01, result1
15d38     00 FB E1 FA | 	rdword	result1, _var01
15d3c     0F FA 65 F7 | 	signx	result1, #15
15d40     13 00 00 FF 
15d44     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
15d48                 | _usbnew_spin2_hidpad_axis_ret
15d48     2D 00 64 FD | 	ret
15d4c                 | 
15d4c                 | ' 
15d4c                 | ' 
15d4c                 | ' '--------------------------------------------------------------
15d4c                 | ' '---------- Init the variables, start the cog. ----------------
15d4c                 | ' '--------------------------------------------------------------
15d4c                 | ' 
15d4c                 | ' pub start(mbox,scope,cache) :cog,base | iii
15d4c                 | _Audio093b_8_sc_spin2_start
15d4c     04 4A 05 F6 | 	mov	COUNT_, #4
15d50     A8 00 A0 FD | 	call	#pushregs_
15d54     09 1F 02 F6 | 	mov	local01, arg01
15d58                 | ' 
15d58                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
15d58                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
15d58                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
15d58                 | ' 
15d58                 | ' mailboxaddr:=mbox 
15d58     F2 1E 62 FC | 	wrlong	local01, objptr
15d5c                 | ' scope_ptr:=scope
15d5c     04 E4 05 F1 | 	add	objptr, #4
15d60     F2 14 62 FC | 	wrlong	arg02, objptr
15d64                 | ' cache_ptr:=cache
15d64     04 E4 05 F1 | 	add	objptr, #4
15d68     F2 16 62 FC | 	wrlong	arg03, objptr
15d6c                 | ' base:=@channel1[0]
15d6c     04 E4 05 F1 | 	add	objptr, #4
15d70     F2 20 02 F6 | 	mov	local02, objptr
15d74                 | ' 
15d74                 | ' repeat iii from 0 to 7
15d74     00 22 06 F6 | 	mov	local03, #0
15d78     01 00 00 FF 
15d7c     D8 E7 05 F1 | 	add	ptr__Audio093b_8_sc_spin2_dat__, ##984
15d80     0C E4 85 F1 | 	sub	objptr, #12
15d84     97 80 48 FB | 	callpa	#(@LR__1841-@LR__1840)>>2,fcache_load_ptr_
15d88                 | LR__1840
15d88                 | '   long[base+32*iii]:=0
15d88     10 1F 02 F6 | 	mov	local01, local02
15d8c     11 FD 01 F6 | 	mov	result2, local03
15d90     05 FC 65 F0 | 	shl	result2, #5
15d94     FE 1E 02 F1 | 	add	local01, result2
15d98     0F 01 68 FC | 	wrlong	#0, local01
15d9c                 | '   long[base+32*iii+4]:=0
15d9c     10 1F 02 F6 | 	mov	local01, local02
15da0     11 FD 01 F6 | 	mov	result2, local03
15da4     05 FC 65 F0 | 	shl	result2, #5
15da8     FE 1E 02 F1 | 	add	local01, result2
15dac     04 1E 06 F1 | 	add	local01, #4
15db0     0F 01 68 FC | 	wrlong	#0, local01
15db4                 | '   long[base+32*iii+12]:=0
15db4     10 25 02 F6 | 	mov	local04, local02
15db8     11 1F 02 F6 | 	mov	local01, local03
15dbc     05 1E 66 F0 | 	shl	local01, #5
15dc0     0F 25 02 F1 | 	add	local04, local01
15dc4     0C 24 06 F1 | 	add	local04, #12
15dc8     12 01 68 FC | 	wrlong	#0, local04
15dcc                 | '   long[base+32*iii+16]:=2 
15dcc     10 25 02 F6 | 	mov	local04, local02
15dd0     11 1F 02 F6 | 	mov	local01, local03
15dd4     05 1E 66 F0 | 	shl	local01, #5
15dd8     0F 25 02 F1 | 	add	local04, local01
15ddc     10 24 06 F1 | 	add	local04, #16
15de0     12 05 68 FC | 	wrlong	#2, local04
15de4                 | '   word[base+32*iii+20]:=0
15de4     10 25 02 F6 | 	mov	local04, local02
15de8     11 1F 02 F6 | 	mov	local01, local03
15dec     05 1E 66 F0 | 	shl	local01, #5
15df0     0F 25 02 F1 | 	add	local04, local01
15df4     14 24 06 F1 | 	add	local04, #20
15df8     12 01 58 FC | 	wrword	#0, local04
15dfc                 | '   word[base+32*iii+22]:=8192
15dfc     10 25 02 F6 | 	mov	local04, local02
15e00     11 1F 02 F6 | 	mov	local01, local03
15e04     05 1E 66 F0 | 	shl	local01, #5
15e08     0F 25 02 F1 | 	add	local04, local01
15e0c     16 24 06 F1 | 	add	local04, #22
15e10     10 00 80 FF 
15e14     12 01 58 FC | 	wrword	##8192, local04
15e18                 | '   word[base+32*iii+24]:=4000+2*iii
15e18     11 25 02 F6 | 	mov	local04, local03
15e1c     01 24 66 F0 | 	shl	local04, #1
15e20     07 00 00 FF 
15e24     A0 1F 06 F6 | 	mov	local01, ##4000
15e28     12 1F 02 F1 | 	add	local01, local04
15e2c     10 25 02 F6 | 	mov	local04, local02
15e30     11 FD 01 F6 | 	mov	result2, local03
15e34     05 FC 65 F0 | 	shl	result2, #5
15e38     FE 24 02 F1 | 	add	local04, result2
15e3c     18 24 06 F1 | 	add	local04, #24
15e40     12 1F 52 FC | 	wrword	local01, local04
15e44                 | '   word[base+32*iii+26]:=2
15e44     10 25 02 F6 | 	mov	local04, local02
15e48     11 1F 02 F6 | 	mov	local01, local03
15e4c     05 1E 66 F0 | 	shl	local01, #5
15e50     0F 25 02 F1 | 	add	local04, local01
15e54     1A 24 06 F1 | 	add	local04, #26
15e58     12 05 58 FC | 	wrword	#2, local04
15e5c                 | '   long [base+32*iii+8]:=@null | $C0000000
15e5c     F3 1E 02 F6 | 	mov	local01, ptr__Audio093b_8_sc_spin2_dat__
15e60     3E 1E 26 F4 | 	bith	local01, #62
15e64     10 25 02 F6 | 	mov	local04, local02
15e68     11 17 02 F6 | 	mov	arg03, local03
15e6c     05 16 66 F0 | 	shl	arg03, #5
15e70     0B 25 02 F1 | 	add	local04, arg03
15e74     08 24 06 F1 | 	add	local04, #8
15e78     12 1F 62 FC | 	wrlong	local01, local04
15e7c     01 22 06 F1 | 	add	local03, #1
15e80     08 22 56 F2 | 	cmps	local03, #8 wc
15e84     00 FF 9F CD |  if_b	jmp	#LR__1840
15e88                 | LR__1841
15e88     01 00 00 FF 
15e8c     D8 E7 85 F1 | 	sub	ptr__Audio093b_8_sc_spin2_dat__, ##984
15e90                 | '   
15e90                 | ' cog:=coginit(16,@audio,@mailboxaddr)
15e90     F3 14 02 F6 | 	mov	arg02, ptr__Audio093b_8_sc_spin2_dat__
15e94     F2 16 02 F6 | 	mov	arg03, objptr
15e98     10 24 06 F6 | 	mov	local04, #16
15e9c     28 16 62 FD | 	setq	arg03
15ea0     0A 25 F2 FC | 	coginit	local04, arg02 wc
15ea4     01 24 66 C6 |  if_b	neg	local04, #1
15ea8                 | ' waitms(100)
15ea8     64 12 06 F6 | 	mov	arg01, #100
15eac     3C 07 B0 FD | 	call	#__system___waitms
15eb0                 | ' return cog,base
15eb0     10 FD 01 F6 | 	mov	result2, local02
15eb4     12 FB 01 F6 | 	mov	result1, local04
15eb8     A7 F0 03 F6 | 	mov	ptra, fp
15ebc     B2 00 A0 FD | 	call	#popregs_
15ec0                 | _Audio093b_8_sc_spin2_start_ret
15ec0     2D 00 64 FD | 	ret
15ec4                 | 
15ec4                 | ' 
15ec4                 | ' ' a simple play procedure to not poke everything. 
15ec4                 | ' 
15ec4                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
15ec4                 | _Audio093b_8_sc_spin2_play
15ec4     0C E4 05 F1 | 	add	objptr, #12
15ec8     F2 00 02 F6 | 	mov	_var01, objptr
15ecc     05 12 66 F0 | 	shl	arg01, #5
15ed0     09 01 02 F1 | 	add	_var01, arg01
15ed4     00 00 60 FF 
15ed8     00 14 06 F1 | 	add	arg02, ##-1073741824
15edc     00 13 02 F6 | 	mov	arg01, _var01
15ee0     08 12 06 F1 | 	add	arg01, #8
15ee4     09 15 62 FC | 	wrlong	arg02, arg01
15ee8     00 15 02 F6 | 	mov	arg02, _var01
15eec     0C 14 06 F1 | 	add	arg02, #12
15ef0     0A 1B 62 FC | 	wrlong	arg05, arg02
15ef4     00 1C 56 F2 | 	cmps	arg06, #0 wc
15ef8     00 15 02 36 |  if_ae	mov	arg02, _var01
15efc     10 14 06 31 |  if_ae	add	arg02, #16
15f00     0A 1D 62 3C |  if_ae	wrlong	arg06, arg02
15f04     02 1A 06 C1 |  if_b	add	arg05, #2
15f08     00 13 02 C6 |  if_b	mov	arg01, _var01
15f0c     10 12 06 C1 |  if_b	add	arg01, #16
15f10     09 1B 62 CC |  if_b	wrlong	arg05, arg01
15f14     0B 15 52 F6 | 	abs	arg02, arg03 wc
15f18     0F 1B 80 FF 
15f1c     0A 3F 1A FD | 	qdiv	##3546911, arg02
15f20                 | ' 
15f20                 | ' base2:=@channel1[0]+32*channel
15f20                 | ' long[base2+8]:=sample+$C0000000 
15f20                 | ' long[base2+12]:= len
15f20                 | ' if loop >=0 
15f20                 | '   long[base2+16]:= loop
15f20     0C E4 85 F1 | 	sub	objptr, #12
15f24                 | ' else
15f24                 | '   long[base2+16]:= len+2
15f24                 | ' word[base2+20]:=vol
15f24     00 15 02 F6 | 	mov	arg02, _var01
15f28     14 14 06 F1 | 	add	arg02, #20
15f2c     0A 19 52 FC | 	wrword	arg04, arg02
15f30                 | ' word[base2+24]:= 3546911/splfreq 
15f30     00 13 02 F6 | 	mov	arg01, _var01
15f34     18 12 06 F1 | 	add	arg01, #24
15f38                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
15f38                 | ' long[base2+28]:=$40000000
15f38     18 14 62 FD | 	getqx	arg02
15f3c     0A 15 82 F6 | 	negc	arg02, arg02
15f40     09 15 52 FC | 	wrword	arg02, arg01
15f44     00 15 02 F6 | 	mov	arg02, _var01
15f48     1A 14 06 F1 | 	add	arg02, #26
15f4c     0A 01 5A FC | 	wrword	#256, arg02
15f50     1C 00 06 F1 | 	add	_var01, #28
15f54     00 00 A0 FF 
15f58     00 01 68 FC | 	wrlong	##1073741824, _var01
15f5c                 | _Audio093b_8_sc_spin2_play_ret
15f5c     2D 00 64 FD | 	ret
15f60                 | 
15f60                 | ' until (i >>8) >=len
15f60                 | ' 
15f60                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
15f60                 | _Audio093b_8_sc_spin2_play8
15f60                 | ' 
15f60                 | ' base2:=@channel1[0]+32*channel
15f60     0C E4 05 F1 | 	add	objptr, #12
15f64     F2 00 02 F6 | 	mov	_var01, objptr
15f68     05 12 66 F0 | 	shl	arg01, #5
15f6c     09 01 02 F1 | 	add	_var01, arg01
15f70                 | ' long[base2]:=0
15f70     00 01 68 FC | 	wrlong	#0, _var01
15f74                 | ' long[base2+8]:=sample+$40000000 
15f74     00 00 20 FF 
15f78     00 14 06 F1 | 	add	arg02, ##1073741824
15f7c     00 13 02 F6 | 	mov	arg01, _var01
15f80     08 12 06 F1 | 	add	arg01, #8
15f84     09 15 62 FC | 	wrlong	arg02, arg01
15f88                 | ' if loop>=0
15f88     00 1C 56 F2 | 	cmps	arg06, #0 wc
15f8c     0C E4 85 F1 | 	sub	objptr, #12
15f90     1C 00 90 CD |  if_b	jmp	#LR__1850
15f94                 | '   long[base2+12]:=loop
15f94     00 15 02 F6 | 	mov	arg02, _var01
15f98     0C 14 06 F1 | 	add	arg02, #12
15f9c     0A 1D 62 FC | 	wrlong	arg06, arg02
15fa0                 | '   long[base2+16]:= len
15fa0     00 1D 02 F6 | 	mov	arg06, _var01
15fa4     10 1C 06 F1 | 	add	arg06, #16
15fa8     0E 1B 62 FC | 	wrlong	arg05, arg06
15fac     1C 00 90 FD | 	jmp	#LR__1851
15fb0                 | LR__1850
15fb0                 | ' else
15fb0                 | '   long[base2+12]:= len
15fb0     00 1D 02 F6 | 	mov	arg06, _var01
15fb4     0C 1C 06 F1 | 	add	arg06, #12
15fb8     0E 1B 62 FC | 	wrlong	arg05, arg06
15fbc                 | '   long[base2+16]:= len+1
15fbc     01 1A 06 F1 | 	add	arg05, #1
15fc0     00 13 02 F6 | 	mov	arg01, _var01
15fc4     10 12 06 F1 | 	add	arg01, #16
15fc8     09 1B 62 FC | 	wrlong	arg05, arg01
15fcc                 | LR__1851
15fcc     0B 17 52 F6 | 	abs	arg03, arg03 wc
15fd0     0F 1B 80 FF 
15fd4     0B 3F 1A FD | 	qdiv	##3546911, arg03
15fd8                 | ' word[base2+20]:=vol
15fd8     00 17 02 F6 | 	mov	arg03, _var01
15fdc     14 16 06 F1 | 	add	arg03, #20
15fe0     0B 19 52 FC | 	wrword	arg04, arg03
15fe4                 | ' word[base2+24]:= 3546911/splfreq 
15fe4     00 13 02 F6 | 	mov	arg01, _var01
15fe8     18 12 06 F1 | 	add	arg01, #24
15fec                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
15fec                 | ' long[base2+28]:=$40000000
15fec     18 18 62 FD | 	getqx	arg04
15ff0     0C 19 82 F6 | 	negc	arg04, arg04
15ff4     09 19 52 FC | 	wrword	arg04, arg01
15ff8     00 19 02 F6 | 	mov	arg04, _var01
15ffc     1A 18 06 F1 | 	add	arg04, #26
16000     0C 01 5A FC | 	wrword	#256, arg04
16004     1C 00 06 F1 | 	add	_var01, #28
16008     00 00 A0 FF 
1600c     00 01 68 FC | 	wrlong	##1073741824, _var01
16010                 | _Audio093b_8_sc_spin2_play8_ret
16010     2D 00 64 FD | 	ret
16014                 | 
16014                 | ' 
16014                 | '     
16014                 | ' pub stop(channel) 'silence it
16014                 | _Audio093b_8_sc_spin2_stop
16014                 | ' 
16014                 | ' word[@channel1[0]+32*channel+20]:=0
16014     0C E4 05 F1 | 	add	objptr, #12
16018     F2 00 02 F6 | 	mov	_var01, objptr
1601c     05 12 66 F0 | 	shl	arg01, #5
16020     09 01 02 F1 | 	add	_var01, arg01
16024     14 00 06 F1 | 	add	_var01, #20
16028     00 01 58 FC | 	wrword	#0, _var01
1602c     0C E4 85 F1 | 	sub	objptr, #12
16030                 | _Audio093b_8_sc_spin2_stop_ret
16030     2D 00 64 FD | 	ret
16034                 | hubexit
16034     81 00 80 FD | 	jmp	#cogexit
16038                 | 
16038                 | __system___setbaud
16038     14 60 06 FB | 	rdlong	muldiva_, #20
1603c     09 63 02 F6 | 	mov	muldivb_, arg01
16040     BA 00 A0 FD | 	call	#divide_
16044     97 06 48 FB | 	callpa	#(@LR__1861-@LR__1860)>>2,fcache_load_ptr_
16048                 | LR__1860
16048     3E FA 9D FA | 	rdpin	result1, #62 wc
1604c     FE FC A1 F1 | 	subx	result2, result2
16050     F4 FF 9F CD |  if_b	jmp	#LR__1860
16054                 | LR__1861
16054     40 7C 64 FD | 	dirl	#62
16058     40 7E 64 FD | 	dirl	#63
1605c     F4 62 62 FC | 	wrlong	muldivb_, ptr___system__dat__
16060     10 62 66 F0 | 	shl	muldivb_, #16
16064     07 14 06 F6 | 	mov	arg02, #7
16068     31 15 02 F1 | 	add	arg02, muldivb_
1606c     3E F8 0C FC | 	wrpin	#124, #62
16070     3E 14 16 FC | 	wxpin	arg02, #62
16074     3F 7C 0C FC | 	wrpin	#62, #63
16078     14 14 06 F1 | 	add	arg02, #20
1607c     3F 14 16 FC | 	wxpin	arg02, #63
16080     41 7C 64 FD | 	dirh	#62
16084     41 7E 64 FD | 	dirh	#63
16088                 | __system___setbaud_ret
16088     2D 00 64 FD | 	ret
1608c                 | 
1608c                 | __system___txraw
1608c     01 4A 05 F6 | 	mov	COUNT_, #1
16090     A8 00 A0 FD | 	call	#pushregs_
16094     09 1F 02 F6 | 	mov	local01, arg01
16098     97 06 48 FB | 	callpa	#(@LR__1871-@LR__1870)>>2,fcache_load_ptr_
1609c                 | LR__1870
1609c     3E FA 9D FA | 	rdpin	result1, #62 wc
160a0     FE FC A1 F1 | 	subx	result2, result2
160a4     F4 FF 9F CD |  if_b	jmp	#LR__1870
160a8                 | LR__1871
160a8     F4 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
160ac     C2 01 00 AF 
160b0     00 12 06 A6 |  if_e	mov	arg01, ##230400
160b4     80 FF BF AD |  if_e	call	#__system___setbaud
160b8     3E 1E 26 FC | 	wypin	local01, #62
160bc     01 FA 05 F6 | 	mov	result1, #1
160c0     A7 F0 03 F6 | 	mov	ptra, fp
160c4     B2 00 A0 FD | 	call	#popregs_
160c8                 | __system___txraw_ret
160c8     2D 00 64 FD | 	ret
160cc                 | 
160cc                 | __system___rxraw
160cc     0D 4A 05 F6 | 	mov	COUNT_, #13
160d0     A8 00 A0 FD | 	call	#pushregs_
160d4     09 1F 02 F6 | 	mov	local01, arg01
160d8     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
160dc     C2 01 00 AF 
160e0     00 12 06 A6 |  if_e	mov	arg01, ##230400
160e4     50 FF BF AD |  if_e	call	#__system___setbaud
160e8     00 1E 0E F2 | 	cmp	local01, #0 wz
160ec     20 00 90 AD |  if_e	jmp	#LR__1880
160f0     14 22 06 FB | 	rdlong	local03, #20
160f4     0A 22 46 F0 | 	shr	local03, #10
160f8     11 1F 02 FD | 	qmul	local01, local03
160fc     1A FA 61 FD | 	getct	result1
16100     18 24 62 FD | 	getqx	local04
16104     12 FB 01 F1 | 	add	result1, local04
16108     FD 26 02 F6 | 	mov	local05, result1
1610c     04 00 90 FD | 	jmp	#LR__1881
16110                 | LR__1880
16110     00 26 06 F6 | 	mov	local05, #0
16114                 | LR__1881
16114     01 28 66 F6 | 	neg	local06, #1
16118     3F 2A 06 F6 | 	mov	local07, #63
1611c     00 2C 06 F6 | 	mov	local08, #0
16120     04 E8 05 F1 | 	add	ptr___system__dat__, #4
16124     F4 2E 02 FB | 	rdlong	local09, ptr___system__dat__
16128     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
1612c                 | LR__1882
1612c     08 2E 16 F4 | 	testb	local09, #8 wc
16130     09 2E 76 F4 | 	testbn	local09, #9 andc
16134     0A 2E 46 F0 | 	shr	local09, #10
16138     01 2C 06 C6 |  if_b	mov	local08, #1
1613c     40 7E 6C 3D |  if_ae	testp	#63 wz
16140     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
16144     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
16148     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
1614c                 | LR__1883
1614c     00 20 06 F6 | 	mov	local02, #0
16150     00 2C 0E F2 | 	cmp	local08, #0 wz
16154     01 20 66 56 |  if_ne	neg	local02, #1
16158     00 30 06 F6 | 	mov	local10, #0
1615c     00 22 06 F6 | 	mov	local03, #0
16160     00 1E 0E F2 | 	cmp	local01, #0 wz
16164     01 22 66 56 |  if_ne	neg	local03, #1
16168     00 24 06 F6 | 	mov	local04, #0
1616c     00 32 06 F6 | 	mov	local11, #0
16170     1A FA 61 FD | 	getct	result1
16174     FD 34 02 F6 | 	mov	local12, result1
16178     1A 37 02 F6 | 	mov	local13, local12
1617c     13 37 82 F1 | 	sub	local13, local05
16180     00 36 56 F2 | 	cmps	local13, #0 wc
16184     00 32 26 C6 |  if_b	not	local11, #0
16188     00 32 0E F2 | 	cmp	local11, #0 wz
1618c     00 24 26 56 |  if_ne	not	local04, #0
16190     12 23 CA F7 | 	test	local03, local04 wz
16194     00 30 26 56 |  if_ne	not	local10, #0
16198     18 21 4A F5 | 	or	local02, local10 wz
1619c     8C FF 9F AD |  if_e	jmp	#LR__1882
161a0     00 2C 0E F2 | 	cmp	local08, #0 wz
161a4     17 29 02 56 |  if_ne	mov	local06, local09
161a8     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
161ac     04 E8 05 F1 | 	add	ptr___system__dat__, #4
161b0     F4 2E 62 FC | 	wrlong	local09, ptr___system__dat__
161b4     04 E8 85 F1 | 	sub	ptr___system__dat__, #4
161b8     14 FB 01 F6 | 	mov	result1, local06
161bc     A7 F0 03 F6 | 	mov	ptra, fp
161c0     B2 00 A0 FD | 	call	#popregs_
161c4                 | __system___rxraw_ret
161c4     2D 00 64 FD | 	ret
161c8                 | 
161c8                 | __system___getus
161c8     1A FC 71 FD | 	getct	result2 wc
161cc     1A 00 62 FD | 	getct	_var01
161d0     10 E8 05 F1 | 	add	ptr___system__dat__, #16
161d4     F4 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
161d8     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
161dc     20 00 90 5D |  if_ne	jmp	#LR__1890
161e0     14 02 06 FB | 	rdlong	_var02, #20
161e4     A1 07 00 FF 
161e8     40 02 16 FD | 	qdiv	_var02, ##1000000
161ec     10 E8 05 F1 | 	add	ptr___system__dat__, #16
161f0     18 FA 61 FD | 	getqx	result1
161f4     FD 02 02 F6 | 	mov	_var02, result1
161f8     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
161fc     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
16200                 | LR__1890
16200     01 FD 11 FD | 	qdiv	result2, _var02
16204     19 FC 61 FD | 	getqy	result2
16208     28 FC 61 FD | 	setq	result2
1620c     01 01 12 FD | 	qdiv	_var01, _var02
16210     18 FA 61 FD | 	getqx	result1
16214                 | __system___getus_ret
16214     2D 00 64 FD | 	ret
16218                 | 
16218                 | __system____builtin_memmove
16218     09 01 02 F6 | 	mov	_var01, arg01
1621c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
16220     10 00 90 CD |  if_b	jmp	#LR__1900
16224     0A 03 02 F6 | 	mov	_var02, arg02
16228     0B 03 02 F1 | 	add	_var02, arg03
1622c     01 13 52 F2 | 	cmps	arg01, _var02 wc
16230     48 00 90 CD |  if_b	jmp	#LR__1906
16234                 | LR__1900
16234     0B 05 02 F6 | 	mov	_var03, arg03
16238     02 04 4E F0 | 	shr	_var03, #2 wz
1623c     18 00 90 AD |  if_e	jmp	#LR__1905
16240     97 0A 48 FB | 	callpa	#(@LR__1903-@LR__1901)>>2,fcache_load_ptr_
16244                 | LR__1901
16244     02 09 D8 FC | 	rep	@LR__1904, _var03
16248                 | LR__1902
16248     0A 05 02 FB | 	rdlong	_var03, arg02
1624c     09 05 62 FC | 	wrlong	_var03, arg01
16250     04 12 06 F1 | 	add	arg01, #4
16254     04 14 06 F1 | 	add	arg02, #4
16258                 | LR__1903
16258                 | LR__1904
16258                 | LR__1905
16258     02 16 CE F7 | 	test	arg03, #2 wz
1625c     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
16260     09 03 52 5C |  if_ne	wrword	_var02, arg01
16264     02 12 06 51 |  if_ne	add	arg01, #2
16268     02 14 06 51 |  if_ne	add	arg02, #2
1626c     01 16 CE F7 | 	test	arg03, #1 wz
16270     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
16274     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
16278     28 00 90 FD | 	jmp	#LR__1912
1627c                 | LR__1906
1627c     0B 13 02 F1 | 	add	arg01, arg03
16280     0B 15 02 F1 | 	add	arg02, arg03
16284     0B 07 0A F6 | 	mov	_var04, arg03 wz
16288     18 00 90 AD |  if_e	jmp	#LR__1911
1628c     97 0A 48 FB | 	callpa	#(@LR__1909-@LR__1907)>>2,fcache_load_ptr_
16290                 | LR__1907
16290     03 09 D8 FC | 	rep	@LR__1910, _var04
16294                 | LR__1908
16294     01 12 86 F1 | 	sub	arg01, #1
16298     01 14 86 F1 | 	sub	arg02, #1
1629c     0A 03 C2 FA | 	rdbyte	_var02, arg02
162a0     09 03 42 FC | 	wrbyte	_var02, arg01
162a4                 | LR__1909
162a4                 | LR__1910
162a4                 | LR__1911
162a4                 | LR__1912
162a4     00 FB 01 F6 | 	mov	result1, _var01
162a8                 | __system____builtin_memmove_ret
162a8     2D 00 64 FD | 	ret
162ac                 | 
162ac                 | __system____builtin_strcpy
162ac     09 01 02 F6 | 	mov	_var01, arg01
162b0     97 0A 48 FB | 	callpa	#(@LR__1921-@LR__1920)>>2,fcache_load_ptr_
162b4                 | LR__1920
162b4     0A FB C9 FA | 	rdbyte	result1, arg02 wz
162b8     09 FB 41 FC | 	wrbyte	result1, arg01
162bc     01 14 06 F1 | 	add	arg02, #1
162c0     01 12 06 F1 | 	add	arg01, #1
162c4     EC FF 9F 5D |  if_ne	jmp	#LR__1920
162c8                 | LR__1921
162c8     00 FB 01 F6 | 	mov	result1, _var01
162cc                 | __system____builtin_strcpy_ret
162cc     2D 00 64 FD | 	ret
162d0                 | 
162d0                 | __system____topofstack
162d0     00 4A 05 F6 | 	mov	COUNT_, #0
162d4     A8 00 A0 FD | 	call	#pushregs_
162d8     08 F0 07 F1 | 	add	ptra, #8
162dc     04 4E 05 F1 | 	add	fp, #4
162e0     A7 12 62 FC | 	wrlong	arg01, fp
162e4     A7 FA 01 F6 | 	mov	result1, fp
162e8     04 4E 85 F1 | 	sub	fp, #4
162ec     A7 F0 03 F6 | 	mov	ptra, fp
162f0     B2 00 A0 FD | 	call	#popregs_
162f4                 | __system____topofstack_ret
162f4     2D 00 64 FD | 	ret
162f8                 | 
162f8                 | __system___lockmem
162f8     00 FA 05 F6 | 	mov	result1, #0
162fc     01 FA 61 FD | 	cogid	result1
16300     00 FB 05 F1 | 	add	result1, #256
16304                 | LR__1930
16304     09 01 0A FB | 	rdlong	_var01, arg01 wz
16308     09 FB 61 AC |  if_e	wrlong	result1, arg01
1630c     09 01 02 AB |  if_e	rdlong	_var01, arg01
16310     09 01 02 AB |  if_e	rdlong	_var01, arg01
16314     FD 00 0A F2 | 	cmp	_var01, result1 wz
16318     E8 FF 9F 5D |  if_ne	jmp	#LR__1930
1631c                 | __system___lockmem_ret
1631c     2D 00 64 FD | 	ret
16320                 | 
16320                 | __system___string_cmp
16320     97 14 48 FB | 	callpa	#(@LR__1941-@LR__1940)>>2,fcache_load_ptr_
16324                 | LR__1940
16324     09 01 C2 FA | 	rdbyte	_var01, arg01
16328     0A 03 C2 FA | 	rdbyte	_var02, arg02
1632c     00 05 02 F6 | 	mov	_var03, _var01
16330     01 05 8A F1 | 	sub	_var03, _var02 wz
16334     01 12 06 F1 | 	add	arg01, #1
16338     01 14 06 F1 | 	add	arg02, #1
1633c     0C 00 90 5D |  if_ne	jmp	#LR__1942
16340     00 00 0E F2 | 	cmp	_var01, #0 wz
16344     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
16348     D8 FF 9F 5D |  if_ne	jmp	#LR__1940
1634c                 | LR__1941
1634c                 | LR__1942
1634c     02 FB 01 F6 | 	mov	result1, _var03
16350                 | __system___string_cmp_ret
16350     2D 00 64 FD | 	ret
16354                 | 
16354                 | __system___string_concat
16354     05 4A 05 F6 | 	mov	COUNT_, #5
16358     A8 00 A0 FD | 	call	#pushregs_
1635c     09 1F 02 F6 | 	mov	local01, arg01
16360     0A 21 02 F6 | 	mov	local02, arg02
16364     0F 13 02 F6 | 	mov	arg01, local01
16368     09 23 02 F6 | 	mov	local03, arg01
1636c     97 06 48 FB | 	callpa	#(@LR__1951-@LR__1950)>>2,fcache_load_ptr_
16370                 | LR__1950
16370     11 FB C9 FA | 	rdbyte	result1, local03 wz
16374     01 22 06 51 |  if_ne	add	local03, #1
16378     F4 FF 9F 5D |  if_ne	jmp	#LR__1950
1637c                 | LR__1951
1637c     09 23 82 F1 | 	sub	local03, arg01
16380     11 25 02 F6 | 	mov	local04, local03
16384     10 13 02 F6 | 	mov	arg01, local02
16388     09 23 02 F6 | 	mov	local03, arg01
1638c     97 06 48 FB | 	callpa	#(@LR__1953-@LR__1952)>>2,fcache_load_ptr_
16390                 | LR__1952
16390     11 FB C9 FA | 	rdbyte	result1, local03 wz
16394     01 22 06 51 |  if_ne	add	local03, #1
16398     F4 FF 9F 5D |  if_ne	jmp	#LR__1952
1639c                 | LR__1953
1639c     09 23 82 F1 | 	sub	local03, arg01
163a0     12 13 02 F6 | 	mov	arg01, local04
163a4     11 13 02 F1 | 	add	arg01, local03
163a8     01 12 06 F1 | 	add	arg01, #1
163ac     AC 38 B0 FD | 	call	#__system___gc_alloc_managed
163b0     FD 26 0A F6 | 	mov	local05, result1 wz
163b4     28 00 90 AD |  if_e	jmp	#LR__1954
163b8     13 13 02 F6 | 	mov	arg01, local05
163bc     0F 15 02 F6 | 	mov	arg02, local01
163c0     12 17 02 F6 | 	mov	arg03, local04
163c4     50 FE BF FD | 	call	#__system____builtin_memmove
163c8     13 13 02 F6 | 	mov	arg01, local05
163cc     12 13 02 F1 | 	add	arg01, local04
163d0     01 22 06 F1 | 	add	local03, #1
163d4     10 15 02 F6 | 	mov	arg02, local02
163d8     11 17 02 F6 | 	mov	arg03, local03
163dc     38 FE BF FD | 	call	#__system____builtin_memmove
163e0                 | LR__1954
163e0     13 FB 01 F6 | 	mov	result1, local05
163e4     A7 F0 03 F6 | 	mov	ptra, fp
163e8     B2 00 A0 FD | 	call	#popregs_
163ec                 | __system___string_concat_ret
163ec     2D 00 64 FD | 	ret
163f0                 | 
163f0                 | __system___tx
163f0     02 4A 05 F6 | 	mov	COUNT_, #2
163f4     A8 00 A0 FD | 	call	#pushregs_
163f8     09 1F 02 F6 | 	mov	local01, arg01
163fc     0A 1E 0E F2 | 	cmp	local01, #10 wz
16400     18 00 90 5D |  if_ne	jmp	#LR__1960
16404     08 E8 05 F1 | 	add	ptr___system__dat__, #8
16408     F4 20 02 FB | 	rdlong	local02, ptr___system__dat__
1640c     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
16410     02 20 CE F7 | 	test	local02, #2 wz
16414     0D 12 06 56 |  if_ne	mov	arg01, #13
16418     70 FC BF 5D |  if_ne	call	#__system___txraw
1641c                 | LR__1960
1641c     0F 13 02 F6 | 	mov	arg01, local01
16420     68 FC BF FD | 	call	#__system___txraw
16424     A7 F0 03 F6 | 	mov	ptra, fp
16428     B2 00 A0 FD | 	call	#popregs_
1642c                 | __system___tx_ret
1642c     2D 00 64 FD | 	ret
16430                 | 
16430                 | __system___rx
16430     01 4A 05 F6 | 	mov	COUNT_, #1
16434     A8 00 A0 FD | 	call	#pushregs_
16438                 | LR__1970
16438     00 12 06 F6 | 	mov	arg01, #0
1643c     8C FC BF FD | 	call	#__system___rxraw
16440     FD 1E 02 F6 | 	mov	local01, result1
16444     FF FF 7F FF 
16448     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
1644c     E8 FF 9F AD |  if_e	jmp	#LR__1970
16450     0D 1E 0E F2 | 	cmp	local01, #13 wz
16454     14 00 90 5D |  if_ne	jmp	#LR__1971
16458     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1645c     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
16460     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
16464     02 FA CD F7 | 	test	result1, #2 wz
16468     0A 1E 06 56 |  if_ne	mov	local01, #10
1646c                 | LR__1971
1646c     08 E8 05 F1 | 	add	ptr___system__dat__, #8
16470     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
16474     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
16478     01 12 CE F7 | 	test	arg01, #1 wz
1647c     1C 00 90 AD |  if_e	jmp	#LR__1974
16480     7F 1E 0E F2 | 	cmp	local01, #127 wz
16484     0C 00 90 5D |  if_ne	jmp	#LR__1972
16488     08 12 06 F6 | 	mov	arg01, #8
1648c     60 FF BF FD | 	call	#__system___tx
16490     08 00 90 FD | 	jmp	#LR__1973
16494                 | LR__1972
16494     0F 13 02 F6 | 	mov	arg01, local01
16498     54 FF BF FD | 	call	#__system___tx
1649c                 | LR__1973
1649c                 | LR__1974
1649c     0F FB 01 F6 | 	mov	result1, local01
164a0     A7 F0 03 F6 | 	mov	ptra, fp
164a4     B2 00 A0 FD | 	call	#popregs_
164a8                 | __system___rx_ret
164a8     2D 00 64 FD | 	ret
164ac                 | 
164ac                 | __system___pinwrite
164ac     09 01 02 F6 | 	mov	_var01, arg01
164b0     1F 00 06 F5 | 	and	_var01, #31
164b4     20 12 CE F7 | 	test	arg01, #32 wz
164b8     06 12 46 F0 | 	shr	arg01, #6
164bc     09 13 CA F9 | 	bmask	arg01, arg01
164c0     00 13 62 F0 | 	shl	arg01, _var01
164c4     00 15 62 F0 | 	shl	arg02, _var01
164c8     1C 00 90 AD |  if_e	jmp	#LR__1980
164cc     09 F7 43 F5 | 	or	dirb, arg01
164d0     FD 01 02 F6 | 	mov	_var01, outb
164d4     09 01 22 F5 | 	andn	_var01, arg01
164d8     09 15 02 F5 | 	and	arg02, arg01
164dc     0A 01 42 F5 | 	or	_var01, arg02
164e0     00 FB 03 F6 | 	mov	outb, _var01
164e4     18 00 90 FD | 	jmp	#LR__1981
164e8                 | LR__1980
164e8     09 F5 43 F5 | 	or	dira, arg01
164ec     FC 01 02 F6 | 	mov	_var01, outa
164f0     09 01 22 F5 | 	andn	_var01, arg01
164f4     09 15 02 F5 | 	and	arg02, arg01
164f8     0A 01 42 F5 | 	or	_var01, arg02
164fc     00 F9 03 F6 | 	mov	outa, _var01
16500                 | LR__1981
16500                 | __system___pinwrite_ret
16500     2D 00 64 FD | 	ret
16504                 | 
16504                 | __system___basic_read_line
16504     06 4A 05 F6 | 	mov	COUNT_, #6
16508     A8 00 A0 FD | 	call	#pushregs_
1650c     09 1F 02 F6 | 	mov	local01, arg01
16510     00 20 06 F6 | 	mov	local02, #0
16514     18 22 06 F6 | 	mov	local03, #24
16518     00 24 06 F6 | 	mov	local04, #0
1651c     18 12 06 F6 | 	mov	arg01, #24
16520     38 37 B0 FD | 	call	#__system___gc_alloc_managed
16524     FD 26 0A F6 | 	mov	local05, result1 wz
16528     13 FB 01 A6 |  if_e	mov	result1, local05
1652c     B0 00 90 AD |  if_e	jmp	#LR__1993
16530                 | LR__1990
16530     0F 13 02 F6 | 	mov	arg01, local01
16534     78 0B B0 FD | 	call	#__system___basic_get_char
16538     FD 28 02 F6 | 	mov	local06, result1
1653c     01 28 56 F2 | 	cmps	local06, #1 wc
16540     8C 00 90 CD |  if_b	jmp	#LR__1992
16544     0A 28 0E F2 | 	cmp	local06, #10 wz
16548     10 00 90 5D |  if_ne	jmp	#LR__1991
1654c     00 24 0E F2 | 	cmp	local04, #0 wz
16550     01 20 56 52 |  if_ne	cmps	local02, #1 wc
16554     01 20 86 11 |  if_a	sub	local02, #1
16558     74 00 90 FD | 	jmp	#LR__1992
1655c                 | LR__1991
1655c     0D 28 0E F2 | 	cmp	local06, #13 wz
16560     01 24 06 A6 |  if_e	mov	local04, #1
16564     00 24 06 56 |  if_ne	mov	local04, #0
16568     08 28 0E F2 | 	cmp	local06, #8 wz
1656c     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
16570     01 20 56 A2 |  if_e	cmps	local02, #1 wc
16574     01 20 86 21 |  if_nc_and_z	sub	local02, #1
16578     B4 FF 9F AD |  if_e	jmp	#LR__1990
1657c     13 17 02 F6 | 	mov	arg03, local05
16580     10 17 02 F1 | 	add	arg03, local02
16584     0B 29 42 FC | 	wrbyte	local06, arg03
16588     01 20 06 F1 | 	add	local02, #1
1658c     11 21 0A F2 | 	cmp	local02, local03 wz
16590     9C FF 9F 5D |  if_ne	jmp	#LR__1990
16594     11 13 02 F6 | 	mov	arg01, local03
16598     20 12 06 F1 | 	add	arg01, #32
1659c     BC 36 B0 FD | 	call	#__system___gc_alloc_managed
165a0     FD 28 0A F6 | 	mov	local06, result1 wz
165a4     14 FB 01 A6 |  if_e	mov	result1, local06
165a8     34 00 90 AD |  if_e	jmp	#LR__1993
165ac     14 13 02 F6 | 	mov	arg01, local06
165b0     13 15 02 F6 | 	mov	arg02, local05
165b4     11 17 02 F6 | 	mov	arg03, local03
165b8     5C FC BF FD | 	call	#__system____builtin_memmove
165bc     20 22 06 F1 | 	add	local03, #32
165c0     13 13 02 F6 | 	mov	arg01, local05
165c4     D0 37 B0 FD | 	call	#__system___gc_free
165c8     14 27 02 F6 | 	mov	local05, local06
165cc     60 FF 9F FD | 	jmp	#LR__1990
165d0                 | LR__1992
165d0     13 29 02 F6 | 	mov	local06, local05
165d4     10 29 02 F1 | 	add	local06, local02
165d8     14 01 48 FC | 	wrbyte	#0, local06
165dc     13 FB 01 F6 | 	mov	result1, local05
165e0                 | LR__1993
165e0     A7 F0 03 F6 | 	mov	ptra, fp
165e4     B2 00 A0 FD | 	call	#popregs_
165e8                 | __system___basic_read_line_ret
165e8     2D 00 64 FD | 	ret
165ec                 | 
165ec                 | __system___waitms
165ec     09 01 02 F6 | 	mov	_var01, arg01
165f0     1A 02 62 FD | 	getct	_var02
165f4     14 04 06 FB | 	rdlong	_var03, #20
165f8     97 14 48 FB | 	callpa	#(@LR__2001-@LR__2000)>>2,fcache_load_ptr_
165fc                 | LR__2000
165fc     01 00 00 FF 
16600     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
16604     1C 00 90 CD |  if_b	jmp	#LR__2002
16608     02 03 02 F1 | 	add	_var02, _var03
1660c     01 13 02 F6 | 	mov	arg01, _var02
16610     00 12 66 FA | 	addct1	arg01, #0
16614     24 22 60 FD | 	waitct1
16618     01 00 00 FF 
1661c     E8 01 86 F1 | 	sub	_var01, ##1000
16620     D8 FF 9F FD | 	jmp	#LR__2000
16624                 | LR__2001
16624                 | LR__2002
16624     01 00 56 F2 | 	cmps	_var01, #1 wc
16628     28 00 90 CD |  if_b	jmp	#LR__2003
1662c     02 01 02 FD | 	qmul	_var01, _var03
16630     01 00 00 FF 
16634     E8 17 06 F6 | 	mov	arg03, ##1000
16638     19 FA 61 FD | 	getqy	result1
1663c     18 12 62 FD | 	getqx	arg01
16640     28 FA 61 FD | 	setq	result1
16644     0B 13 12 FD | 	qdiv	arg01, arg03
16648     18 12 62 FD | 	getqx	arg01
1664c     01 13 62 FA | 	addct1	arg01, _var02
16650     24 22 60 FD | 	waitct1
16654                 | LR__2003
16654                 | __system___waitms_ret
16654     2D 00 64 FD | 	ret
16658                 | 
16658                 | __system___waitus
16658     09 01 02 F6 | 	mov	_var01, arg01
1665c     1A 02 62 FD | 	getct	_var02
16660     14 04 06 FB | 	rdlong	_var03, #20
16664     97 14 48 FB | 	callpa	#(@LR__2011-@LR__2010)>>2,fcache_load_ptr_
16668                 | LR__2010
16668     A1 07 00 FF 
1666c     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
16670     1C 00 90 CD |  if_b	jmp	#LR__2012
16674     02 03 02 F1 | 	add	_var02, _var03
16678     01 13 02 F6 | 	mov	arg01, _var02
1667c     00 12 66 FA | 	addct1	arg01, #0
16680     24 22 60 FD | 	waitct1
16684     A1 07 00 FF 
16688     40 00 86 F1 | 	sub	_var01, ##1000000
1668c     D8 FF 9F FD | 	jmp	#LR__2010
16690                 | LR__2011
16690                 | LR__2012
16690     01 00 56 F2 | 	cmps	_var01, #1 wc
16694     28 00 90 CD |  if_b	jmp	#LR__2013
16698     02 01 02 FD | 	qmul	_var01, _var03
1669c     A1 07 00 FF 
166a0     40 16 06 F6 | 	mov	arg03, ##1000000
166a4     19 FA 61 FD | 	getqy	result1
166a8     18 12 62 FD | 	getqx	arg01
166ac     28 FA 61 FD | 	setq	result1
166b0     0B 13 12 FD | 	qdiv	arg01, arg03
166b4     18 FA 61 FD | 	getqx	result1
166b8     FD 02 62 FA | 	addct1	_var02, result1
166bc     24 22 60 FD | 	waitct1
166c0                 | LR__2013
166c0                 | __system___waitus_ret
166c0     2D 00 64 FD | 	ret
166c4                 | 
166c4                 | __system___mount
166c4     0B 4A 05 F6 | 	mov	COUNT_, #11
166c8     A8 00 A0 FD | 	call	#pushregs_
166cc     09 1F 02 F6 | 	mov	local01, arg01
166d0     0A 21 0A F6 | 	mov	local02, arg02 wz
166d4     01 22 66 F6 | 	neg	local03, #1
166d8     01 FA 65 A6 |  if_e	neg	result1, #1
166dc     98 02 90 AD |  if_e	jmp	#LR__2035
166e0     0F FB C1 FA | 	rdbyte	result1, local01
166e4     2F FA 0D F2 | 	cmp	result1, #47 wz
166e8     28 00 90 5D |  if_ne	jmp	#LR__2022
166ec     0F 13 02 F6 | 	mov	arg01, local01
166f0     09 25 02 F6 | 	mov	local04, arg01
166f4     97 06 48 FB | 	callpa	#(@LR__2021-@LR__2020)>>2,fcache_load_ptr_
166f8                 | LR__2020
166f8     12 FB C9 FA | 	rdbyte	result1, local04 wz
166fc     01 24 06 51 |  if_ne	add	local04, #1
16700     F4 FF 9F 5D |  if_ne	jmp	#LR__2020
16704                 | LR__2021
16704     09 25 82 F1 | 	sub	local04, arg01
16708     12 FB 01 F6 | 	mov	result1, local04
1670c     10 FA 55 F2 | 	cmps	result1, #16 wc
16710     14 00 90 CD |  if_b	jmp	#LR__2023
16714                 | LR__2022
16714     20 E8 05 F1 | 	add	ptr___system__dat__, #32
16718     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1671c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
16720     01 FA 65 F6 | 	neg	result1, #1
16724     50 02 90 FD | 	jmp	#LR__2035
16728                 | LR__2023
16728     00 26 06 F6 | 	mov	local05, #0
1672c                 | LR__2024
1672c     04 26 56 F2 | 	cmps	local05, #4 wc
16730     B0 00 90 3D |  if_ae	jmp	#LR__2029
16734     13 13 02 F6 | 	mov	arg01, local05
16738     02 12 66 F0 | 	shl	arg01, #2
1673c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
16740     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
16744     09 FB 09 FB | 	rdlong	result1, arg01 wz
16748     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1674c     00 22 56 A2 |  if_e	cmps	local03, #0 wc
16750     13 23 02 86 |  if_c_and_z	mov	local03, local05
16754     84 00 90 8D |  if_c_and_z	jmp	#LR__2028
16758     13 13 02 F6 | 	mov	arg01, local05
1675c     02 12 66 F0 | 	shl	arg01, #2
16760     64 E8 05 F1 | 	add	ptr___system__dat__, #100
16764     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
16768     09 13 02 FB | 	rdlong	arg01, arg01
1676c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
16770     09 25 02 F6 | 	mov	local04, arg01
16774     97 06 48 FB | 	callpa	#(@LR__2026-@LR__2025)>>2,fcache_load_ptr_
16778                 | LR__2025
16778     12 FB C9 FA | 	rdbyte	result1, local04 wz
1677c     01 24 06 51 |  if_ne	add	local04, #1
16780     F4 FF 9F 5D |  if_ne	jmp	#LR__2025
16784                 | LR__2026
16784     09 25 82 F1 | 	sub	local04, arg01
16788     12 29 02 F6 | 	mov	local06, local04
1678c     14 13 02 F6 | 	mov	arg01, local06
16790     0F 13 02 F1 | 	add	arg01, local01
16794     09 FB C1 FA | 	rdbyte	result1, arg01
16798     2F FA 0D F2 | 	cmp	result1, #47 wz
1679c     14 2B 02 56 |  if_ne	mov	local07, local06
167a0     0F 2B 02 51 |  if_ne	add	local07, local01
167a4     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
167a8     30 00 90 5D |  if_ne	jmp	#LR__2027
167ac     13 17 02 F6 | 	mov	arg03, local05
167b0     02 16 66 F0 | 	shl	arg03, #2
167b4     64 E8 05 F1 | 	add	ptr___system__dat__, #100
167b8     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
167bc     0B 15 02 FB | 	rdlong	arg02, arg03
167c0     0F 13 02 F6 | 	mov	arg01, local01
167c4     14 17 02 F6 | 	mov	arg03, local06
167c8     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
167cc     D0 48 B0 FD | 	call	#__system__strncmp
167d0     00 FA 0D F2 | 	cmp	result1, #0 wz
167d4     13 23 02 A6 |  if_e	mov	local03, local05
167d8     08 00 90 AD |  if_e	jmp	#LR__2029
167dc                 | LR__2027
167dc                 | LR__2028
167dc     01 26 06 F1 | 	add	local05, #1
167e0     48 FF 9F FD | 	jmp	#LR__2024
167e4                 | LR__2029
167e4     FF FF 7F FF 
167e8     FF 23 0E F2 | 	cmp	local03, ##-1 wz
167ec     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
167f0     F4 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
167f4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
167f8     01 FA 65 A6 |  if_e	neg	result1, #1
167fc     78 01 90 AD |  if_e	jmp	#LR__2035
16800     11 27 02 F6 | 	mov	local05, local03
16804     13 2B 02 F6 | 	mov	local07, local05
16808     02 2A 66 F0 | 	shl	local07, #2
1680c     74 E8 05 F1 | 	add	ptr___system__dat__, #116
16810     F4 2A 02 F1 | 	add	local07, ptr___system__dat__
16814     15 29 0A FB | 	rdlong	local06, local07 wz
16818     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1681c     58 00 90 AD |  if_e	jmp	#LR__2030
16820     4C 28 06 F1 | 	add	local06, #76
16824     14 2B 0A FB | 	rdlong	local07, local06 wz
16828     4C 28 86 F1 | 	sub	local06, #76
1682c     48 00 90 AD |  if_e	jmp	#LR__2030
16830     4C 28 06 F1 | 	add	local06, #76
16834     14 2B 02 FB | 	rdlong	local07, local06
16838     15 23 02 F6 | 	mov	local03, local07
1683c     13 2A 46 F7 | 	zerox	local07, #19
16840     14 22 46 F0 | 	shr	local03, #20
16844     02 22 66 F0 | 	shl	local03, #2
16848     ED 22 02 F1 | 	add	local03, __methods__
1684c     11 23 02 FB | 	rdlong	local03, local03
16850     13 29 02 F6 | 	mov	local06, local05
16854     02 28 66 F0 | 	shl	local06, #2
16858     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1685c     F4 28 02 F1 | 	add	local06, ptr___system__dat__
16860     14 13 02 FB | 	rdlong	arg01, local06
16864     F2 28 02 F6 | 	mov	local06, objptr
16868     15 E5 01 F6 | 	mov	objptr, local07
1686c     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
16870     2D 22 62 FD | 	call	local03
16874     14 E5 01 F6 | 	mov	objptr, local06
16878                 | LR__2030
16878     13 2D 02 F6 | 	mov	local08, local05
1687c     02 2C 66 F0 | 	shl	local08, #2
16880     74 E8 05 F1 | 	add	ptr___system__dat__, #116
16884     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
16888     16 21 62 FC | 	wrlong	local02, local08
1688c     00 20 0E F2 | 	cmp	local02, #0 wz
16890     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
16894     18 00 90 5D |  if_ne	jmp	#LR__2031
16898     02 26 66 F0 | 	shl	local05, #2
1689c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
168a0     F4 26 02 F1 | 	add	local05, ptr___system__dat__
168a4     13 01 68 FC | 	wrlong	#0, local05
168a8     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
168ac     C4 00 90 FD | 	jmp	#LR__2034
168b0                 | LR__2031
168b0     13 2F 02 F6 | 	mov	local09, local05
168b4     04 2E 66 F0 | 	shl	local09, #4
168b8     24 E8 05 F1 | 	add	ptr___system__dat__, #36
168bc     F4 2E 02 F1 | 	add	local09, ptr___system__dat__
168c0     17 13 02 F6 | 	mov	arg01, local09
168c4     0F 15 02 F6 | 	mov	arg02, local01
168c8     10 16 06 F6 | 	mov	arg03, #16
168cc     24 E8 85 F1 | 	sub	ptr___system__dat__, #36
168d0     20 47 B0 FD | 	call	#__system__strncpy
168d4     48 20 06 F1 | 	add	local02, #72
168d8     10 2D 0A FB | 	rdlong	local08, local02 wz
168dc     48 20 86 F1 | 	sub	local02, #72
168e0     7C 00 90 AD |  if_e	jmp	#LR__2033
168e4     48 20 06 F1 | 	add	local02, #72
168e8     10 2D 02 FB | 	rdlong	local08, local02
168ec     16 31 02 F6 | 	mov	local10, local08
168f0     13 2C 46 F7 | 	zerox	local08, #19
168f4     14 30 46 F0 | 	shr	local10, #20
168f8     02 30 66 F0 | 	shl	local10, #2
168fc     ED 30 02 F1 | 	add	local10, __methods__
16900     18 31 02 FB | 	rdlong	local10, local10
16904     17 13 02 F6 | 	mov	arg01, local09
16908     F2 32 02 F6 | 	mov	local11, objptr
1690c     16 E5 01 F6 | 	mov	objptr, local08
16910     2D 30 62 FD | 	call	local10
16914     19 E5 01 F6 | 	mov	objptr, local11
16918     FD 12 0A F6 | 	mov	arg01, result1 wz
1691c     40 00 90 AD |  if_e	jmp	#LR__2032
16920     13 2D 02 F6 | 	mov	local08, local05
16924     02 2C 66 F0 | 	shl	local08, #2
16928     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1692c     F4 2C 02 F1 | 	add	local08, ptr___system__dat__
16930     16 01 68 FC | 	wrlong	#0, local08
16934     02 26 66 F0 | 	shl	local05, #2
16938     10 E8 85 F1 | 	sub	ptr___system__dat__, #16
1693c     F4 26 02 F1 | 	add	local05, ptr___system__dat__
16940     13 01 68 FC | 	wrlong	#0, local05
16944     09 13 6A F6 | 	neg	arg01, arg01 wz
16948     44 E8 85 F1 | 	sub	ptr___system__dat__, #68
1694c     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
16950     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
16954     01 FA 65 56 |  if_ne	neg	result1, #1
16958     00 FA 05 A6 |  if_e	mov	result1, #0
1695c     18 00 90 FD | 	jmp	#LR__2035
16960                 | LR__2032
16960                 | LR__2033
16960     02 26 66 F0 | 	shl	local05, #2
16964     64 E8 05 F1 | 	add	ptr___system__dat__, #100
16968     F4 26 02 F1 | 	add	local05, ptr___system__dat__
1696c     13 2F 62 FC | 	wrlong	local09, local05
16970     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
16974                 | LR__2034
16974     00 FA 05 F6 | 	mov	result1, #0
16978                 | LR__2035
16978     A7 F0 03 F6 | 	mov	ptra, fp
1697c     B2 00 A0 FD | 	call	#popregs_
16980                 | __system___mount_ret
16980     2D 00 64 FD | 	ret
16984                 | 
16984                 | __system___chdir
16984     00 4A 05 F6 | 	mov	COUNT_, #0
16988     A8 00 A0 FD | 	call	#pushregs_
1698c     40 F0 07 F1 | 	add	ptra, #64
16990     04 4E 05 F1 | 	add	fp, #4
16994     A7 12 62 FC | 	wrlong	arg01, fp
16998     04 4E 05 F1 | 	add	fp, #4
1699c     A7 14 02 F6 | 	mov	arg02, fp
169a0     08 4E 85 F1 | 	sub	fp, #8
169a4     2C 43 B0 FD | 	call	#__system__stat
169a8     3C 4E 05 F1 | 	add	fp, #60
169ac     A7 FA 61 FC | 	wrlong	result1, fp
169b0     3C 4E 85 F1 | 	sub	fp, #60
169b4     00 FA 0D F2 | 	cmp	result1, #0 wz
169b8     3C 4E 05 51 |  if_ne	add	fp, #60
169bc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
169c0     3C 4E 85 51 |  if_ne	sub	fp, #60
169c4     BC 00 90 5D |  if_ne	jmp	#LR__2042
169c8     10 4E 05 F1 | 	add	fp, #16
169cc     A7 12 02 FB | 	rdlong	arg01, fp
169d0     10 4E 85 F1 | 	sub	fp, #16
169d4     78 00 00 FF 
169d8     00 12 06 F5 | 	and	arg01, ##61440
169dc     08 00 00 FF 
169e0     00 12 0E F2 | 	cmp	arg01, ##4096 wz
169e4     20 E8 05 51 |  if_ne	add	ptr___system__dat__, #32
169e8     F4 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
169ec     20 E8 85 51 |  if_ne	sub	ptr___system__dat__, #32
169f0     01 FA 65 56 |  if_ne	neg	result1, #1
169f4     8C 00 90 5D |  if_ne	jmp	#LR__2042
169f8     04 4E 05 F1 | 	add	fp, #4
169fc     A7 16 02 FB | 	rdlong	arg03, fp
16a00     04 4E 85 F1 | 	sub	fp, #4
16a04     0B 17 C2 FA | 	rdbyte	arg03, arg03
16a08     2F 16 0E F2 | 	cmp	arg03, #47 wz
16a0c     24 00 90 5D |  if_ne	jmp	#LR__2040
16a10     84 E8 05 F1 | 	add	ptr___system__dat__, #132
16a14     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
16a18     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
16a1c     04 4E 05 F1 | 	add	fp, #4
16a20     A7 14 02 FB | 	rdlong	arg02, fp
16a24     04 4E 85 F1 | 	sub	fp, #4
16a28     00 17 06 F6 | 	mov	arg03, #256
16a2c     C4 45 B0 FD | 	call	#__system__strncpy
16a30     4C 00 90 FD | 	jmp	#LR__2041
16a34                 | LR__2040
16a34     84 E9 05 F1 | 	add	ptr___system__dat__, #388
16a38     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
16a3c     38 4E 05 F1 | 	add	fp, #56
16a40     A7 12 62 FC | 	wrlong	arg01, fp
16a44     38 4E 85 F1 | 	sub	fp, #56
16a48     00 E9 85 F1 | 	sub	ptr___system__dat__, #256
16a4c     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
16a50     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
16a54     00 17 06 F6 | 	mov	arg03, #256
16a58     98 45 B0 FD | 	call	#__system__strncpy
16a5c     38 4E 05 F1 | 	add	fp, #56
16a60     A7 12 02 FB | 	rdlong	arg01, fp
16a64     34 4E 85 F1 | 	sub	fp, #52
16a68     A7 14 02 FB | 	rdlong	arg02, fp
16a6c     04 4E 85 F1 | 	sub	fp, #4
16a70     84 E8 05 F1 | 	add	ptr___system__dat__, #132
16a74     F4 16 02 F6 | 	mov	arg03, ptr___system__dat__
16a78     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
16a7c     10 00 B0 FD | 	call	#__system____getvfsforfile
16a80                 | LR__2041
16a80     00 FA 05 F6 | 	mov	result1, #0
16a84                 | LR__2042
16a84     A7 F0 03 F6 | 	mov	ptra, fp
16a88     B2 00 A0 FD | 	call	#popregs_
16a8c                 | __system___chdir_ret
16a8c     2D 00 64 FD | 	ret
16a90                 | 
16a90                 | __system____getvfsforfile
16a90     0E 4A 05 F6 | 	mov	COUNT_, #14
16a94     A8 00 A0 FD | 	call	#pushregs_
16a98     09 1F 02 F6 | 	mov	local01, arg01
16a9c     0A 21 02 F6 | 	mov	local02, arg02
16aa0     0B 23 02 F6 | 	mov	local03, arg03
16aa4     97 10 48 FB | 	callpa	#(@LR__2051-@LR__2050)>>2,fcache_load_ptr_
16aa8                 | LR__2050
16aa8     10 FB C1 FA | 	rdbyte	result1, local02
16aac     2F FA 0D F2 | 	cmp	result1, #47 wz
16ab0     01 20 06 A1 |  if_e	add	local02, #1
16ab4     10 25 C2 AA |  if_e	rdbyte	local04, local02
16ab8     01 20 86 A1 |  if_e	sub	local02, #1
16abc     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
16ac0     01 20 06 A1 |  if_e	add	local02, #1
16ac4     E0 FF 9F AD |  if_e	jmp	#LR__2050
16ac8                 | LR__2051
16ac8     10 25 C2 FA | 	rdbyte	local04, local02
16acc     2F 24 0E F2 | 	cmp	local04, #47 wz
16ad0     14 00 90 5D |  if_ne	jmp	#LR__2052
16ad4     0F 13 02 F6 | 	mov	arg01, local01
16ad8     10 15 02 F6 | 	mov	arg02, local02
16adc     00 17 06 F6 | 	mov	arg03, #256
16ae0     10 45 B0 FD | 	call	#__system__strncpy
16ae4     7C 00 90 FD | 	jmp	#LR__2054
16ae8                 | LR__2052
16ae8     84 E8 05 F1 | 	add	ptr___system__dat__, #132
16aec     F4 14 02 F6 | 	mov	arg02, ptr___system__dat__
16af0     84 E8 85 F1 | 	sub	ptr___system__dat__, #132
16af4     0F 13 02 F6 | 	mov	arg01, local01
16af8     00 17 06 F6 | 	mov	arg03, #256
16afc     F4 44 B0 FD | 	call	#__system__strncpy
16b00     10 25 CA FA | 	rdbyte	local04, local02 wz
16b04     5C 00 90 AD |  if_e	jmp	#LR__2053
16b08     10 25 C2 FA | 	rdbyte	local04, local02
16b0c     2E 24 0E F2 | 	cmp	local04, #46 wz
16b10     01 20 06 A1 |  if_e	add	local02, #1
16b14     10 27 C2 AA |  if_e	rdbyte	local05, local02
16b18     01 20 86 A1 |  if_e	sub	local02, #1
16b1c     13 29 02 A6 |  if_e	mov	local06, local05
16b20     07 28 4E A7 |  if_e	zerox	local06, #7 wz
16b24     3C 00 90 AD |  if_e	jmp	#LR__2053
16b28     0F 27 C2 FA | 	rdbyte	local05, local01
16b2c     2F 26 0E F2 | 	cmp	local05, #47 wz
16b30     01 1E 06 A1 |  if_e	add	local01, #1
16b34     0F 25 C2 AA |  if_e	rdbyte	local04, local01
16b38     01 1E 86 A1 |  if_e	sub	local01, #1
16b3c     00 24 4E A2 |  if_e	cmps	local04, #0 wz
16b40     29 01 00 5F 
16b44     D8 14 06 56 |  if_ne	mov	arg02, ##@LR__4060
16b48     0F 13 02 56 |  if_ne	mov	arg01, local01
16b4c     00 17 06 56 |  if_ne	mov	arg03, #256
16b50     EC 44 B0 5D |  if_ne	call	#__system__strncat
16b54     0F 13 02 F6 | 	mov	arg01, local01
16b58     10 15 02 F6 | 	mov	arg02, local02
16b5c     00 17 06 F6 | 	mov	arg03, #256
16b60     DC 44 B0 FD | 	call	#__system__strncat
16b64                 | LR__2053
16b64                 | LR__2054
16b64     0F 13 02 F6 | 	mov	arg01, local01
16b68     94 46 B0 FD | 	call	#__system___normalizeName
16b6c     0F 25 CA FA | 	rdbyte	local04, local01 wz
16b70     1C 00 90 AD |  if_e	jmp	#LR__2055
16b74     0F 25 C2 FA | 	rdbyte	local04, local01
16b78     2F 24 0E F2 | 	cmp	local04, #47 wz
16b7c     01 1E 06 A1 |  if_e	add	local01, #1
16b80     0F 29 C2 AA |  if_e	rdbyte	local06, local01
16b84     01 1E 86 A1 |  if_e	sub	local01, #1
16b88     00 28 4E A2 |  if_e	cmps	local06, #0 wz
16b8c     18 00 90 5D |  if_ne	jmp	#LR__2056
16b90                 | LR__2055
16b90     01 00 00 FF 
16b94     84 E8 05 F1 | 	add	ptr___system__dat__, ##644
16b98     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
16b9c     01 00 00 FF 
16ba0     84 E8 85 F1 | 	sub	ptr___system__dat__, ##644
16ba4     EC 01 90 FD | 	jmp	#LR__2070
16ba8                 | LR__2056
16ba8     00 2A 06 F6 | 	mov	local07, #0
16bac                 | LR__2057
16bac     04 2A 56 F2 | 	cmps	local07, #4 wc
16bb0     CC 01 90 3D |  if_ae	jmp	#LR__2069
16bb4     15 29 02 F6 | 	mov	local06, local07
16bb8     02 28 66 F0 | 	shl	local06, #2
16bbc     64 E8 05 F1 | 	add	ptr___system__dat__, #100
16bc0     F4 28 02 F1 | 	add	local06, ptr___system__dat__
16bc4     14 29 0A FB | 	rdlong	local06, local06 wz
16bc8     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
16bcc     A8 01 90 AD |  if_e	jmp	#LR__2068
16bd0     15 25 02 F6 | 	mov	local04, local07
16bd4     02 24 66 F0 | 	shl	local04, #2
16bd8     64 E8 05 F1 | 	add	ptr___system__dat__, #100
16bdc     F4 24 02 F1 | 	add	local04, ptr___system__dat__
16be0     12 13 02 FB | 	rdlong	arg01, local04
16be4     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
16be8     09 2D 02 F6 | 	mov	local08, arg01
16bec     97 06 48 FB | 	callpa	#(@LR__2059-@LR__2058)>>2,fcache_load_ptr_
16bf0                 | LR__2058
16bf0     16 FB C9 FA | 	rdbyte	result1, local08 wz
16bf4     01 2C 06 51 |  if_ne	add	local08, #1
16bf8     F4 FF 9F 5D |  if_ne	jmp	#LR__2058
16bfc                 | LR__2059
16bfc     09 2D 82 F1 | 	sub	local08, arg01
16c00     16 2F 02 F6 | 	mov	local09, local08
16c04     17 25 02 F6 | 	mov	local04, local09
16c08     0F 25 02 F1 | 	add	local04, local01
16c0c     12 29 C2 FA | 	rdbyte	local06, local04
16c10     2F 28 0E F2 | 	cmp	local06, #47 wz
16c14     17 31 02 56 |  if_ne	mov	local10, local09
16c18     0F 31 02 51 |  if_ne	add	local10, local01
16c1c     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
16c20     54 01 90 5D |  if_ne	jmp	#LR__2067
16c24     15 17 02 F6 | 	mov	arg03, local07
16c28     02 16 66 F0 | 	shl	arg03, #2
16c2c     64 E8 05 F1 | 	add	ptr___system__dat__, #100
16c30     F4 16 02 F1 | 	add	arg03, ptr___system__dat__
16c34     0B 15 02 FB | 	rdlong	arg02, arg03
16c38     17 17 02 F6 | 	mov	arg03, local09
16c3c     0F 13 02 F6 | 	mov	arg01, local01
16c40     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
16c44     58 44 B0 FD | 	call	#__system__strncmp
16c48     00 FA 4D F2 | 	cmps	result1, #0 wz
16c4c     28 01 90 5D |  if_ne	jmp	#LR__2067
16c50     15 33 02 F6 | 	mov	local11, local07
16c54     02 32 66 F0 | 	shl	local11, #2
16c58     74 E8 05 F1 | 	add	ptr___system__dat__, #116
16c5c     F4 32 02 F1 | 	add	local11, ptr___system__dat__
16c60     19 35 02 FB | 	rdlong	local12, local11
16c64     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
16c68     97 22 48 FB | 	callpa	#(@LR__2061-@LR__2060)>>2,fcache_load_ptr_
16c6c                 | LR__2060
16c6c     17 29 02 F6 | 	mov	local06, local09
16c70     01 28 06 F1 | 	add	local06, #1
16c74     0F 29 02 F1 | 	add	local06, local01
16c78     14 33 C2 FA | 	rdbyte	local11, local06
16c7c     2E 32 0E F2 | 	cmp	local11, #46 wz
16c80     2C 00 90 5D |  if_ne	jmp	#LR__2062
16c84     17 33 02 F6 | 	mov	local11, local09
16c88     02 32 06 F1 | 	add	local11, #2
16c8c     0F 33 02 F1 | 	add	local11, local01
16c90     19 31 C2 FA | 	rdbyte	local10, local11
16c94     2F 30 0E F2 | 	cmp	local10, #47 wz
16c98     17 37 02 56 |  if_ne	mov	local13, local09
16c9c     02 36 06 51 |  if_ne	add	local13, #2
16ca0     0F 37 02 51 |  if_ne	add	local13, local01
16ca4     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
16ca8     01 2E 06 A1 |  if_e	add	local09, #1
16cac     BC FF 9F AD |  if_e	jmp	#LR__2060
16cb0                 | LR__2061
16cb0                 | LR__2062
16cb0     00 22 0E F2 | 	cmp	local03, #0 wz
16cb4     11 13 02 56 |  if_ne	mov	arg01, local03
16cb8     0F 15 02 56 |  if_ne	mov	arg02, local01
16cbc     00 17 06 56 |  if_ne	mov	arg03, #256
16cc0     30 43 B0 5D |  if_ne	call	#__system__strncpy
16cc4     0F 15 02 F6 | 	mov	arg02, local01
16cc8     17 15 02 F1 | 	add	arg02, local09
16ccc     01 14 06 F1 | 	add	arg02, #1
16cd0     0F 13 02 F6 | 	mov	arg01, local01
16cd4     D4 F5 BF FD | 	call	#__system____builtin_strcpy
16cd8     0F 13 02 F6 | 	mov	arg01, local01
16cdc     09 2D 02 F6 | 	mov	local08, arg01
16ce0     97 06 48 FB | 	callpa	#(@LR__2064-@LR__2063)>>2,fcache_load_ptr_
16ce4                 | LR__2063
16ce4     16 FB C9 FA | 	rdbyte	result1, local08 wz
16ce8     01 2C 06 51 |  if_ne	add	local08, #1
16cec     F4 FF 9F 5D |  if_ne	jmp	#LR__2063
16cf0                 | LR__2064
16cf0     09 2D 82 F1 | 	sub	local08, arg01
16cf4     16 2F 02 F6 | 	mov	local09, local08
16cf8                 | LR__2065
16cf8     01 2E 56 F2 | 	cmps	local09, #1 wc
16cfc     70 00 90 CD |  if_b	jmp	#LR__2066
16d00     17 25 02 F6 | 	mov	local04, local09
16d04     0F 25 02 F1 | 	add	local04, local01
16d08     12 33 C2 FA | 	rdbyte	local11, local04
16d0c     2F 32 0E F2 | 	cmp	local11, #47 wz
16d10     17 33 02 A6 |  if_e	mov	local11, local09
16d14     0F 33 02 A1 |  if_e	add	local11, local01
16d18     19 01 48 AC |  if_e	wrbyte	#0, local11
16d1c     01 2E 86 A1 |  if_e	sub	local09, #1
16d20     D4 FF 9F AD |  if_e	jmp	#LR__2065
16d24     17 25 02 F6 | 	mov	local04, local09
16d28     0F 25 02 F1 | 	add	local04, local01
16d2c     12 33 C2 FA | 	rdbyte	local11, local04
16d30     2E 32 0E F2 | 	cmp	local11, #46 wz
16d34     38 00 90 5D |  if_ne	jmp	#LR__2066
16d38     02 2E 56 F2 | 	cmps	local09, #2 wc
16d3c     30 00 90 CD |  if_b	jmp	#LR__2066
16d40     17 39 02 F6 | 	mov	local14, local09
16d44     01 38 86 F1 | 	sub	local14, #1
16d48     0F 39 02 F1 | 	add	local14, local01
16d4c     1C 27 C2 FA | 	rdbyte	local05, local14
16d50     2F 26 0E F2 | 	cmp	local05, #47 wz
16d54     18 00 90 5D |  if_ne	jmp	#LR__2066
16d58     17 25 02 F6 | 	mov	local04, local09
16d5c     01 24 86 F1 | 	sub	local04, #1
16d60     0F 25 02 F1 | 	add	local04, local01
16d64     12 01 48 FC | 	wrbyte	#0, local04
16d68     02 2E 86 F1 | 	sub	local09, #2
16d6c     88 FF 9F FD | 	jmp	#LR__2065
16d70                 | LR__2066
16d70     1A FB 01 F6 | 	mov	result1, local12
16d74     1C 00 90 FD | 	jmp	#LR__2070
16d78                 | LR__2067
16d78                 | LR__2068
16d78     01 2A 06 F1 | 	add	local07, #1
16d7c     2C FE 9F FD | 	jmp	#LR__2057
16d80                 | LR__2069
16d80     03 00 00 FF 
16d84     38 E9 05 F1 | 	add	ptr___system__dat__, ##1848
16d88     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
16d8c     03 00 00 FF 
16d90     38 E9 85 F1 | 	sub	ptr___system__dat__, ##1848
16d94                 | LR__2070
16d94     A7 F0 03 F6 | 	mov	ptra, fp
16d98     B2 00 A0 FD | 	call	#popregs_
16d9c                 | __system____getvfsforfile_ret
16d9c     2D 00 64 FD | 	ret
16da0                 | 
16da0                 | __system___basic_open
16da0     05 4A 05 F6 | 	mov	COUNT_, #5
16da4     A8 00 A0 FD | 	call	#pushregs_
16da8     0A 1F 02 F6 | 	mov	local01, arg02
16dac     0B 21 02 F6 | 	mov	local02, arg03
16db0     0C 23 02 F6 | 	mov	local03, arg04
16db4     00 24 06 F6 | 	mov	local04, #0
16db8     10 42 B0 FD | 	call	#__system____getftab
16dbc     FD 26 0A F6 | 	mov	local05, result1 wz
16dc0     18 00 90 5D |  if_ne	jmp	#LR__2080
16dc4     EE 12 02 F6 | 	mov	arg01, abortchain
16dc8     0C 14 06 F6 | 	mov	arg02, #12
16dcc     01 16 06 F6 | 	mov	arg03, #1
16dd0     DA 00 A0 FD | 	call	#__longjmp
16dd4     01 FA 65 F6 | 	neg	result1, #1
16dd8     14 01 90 FD | 	jmp	#LR__2089
16ddc                 | LR__2080
16ddc     08 26 06 F1 | 	add	local05, #8
16de0     13 FB 09 FB | 	rdlong	result1, local05 wz
16de4     08 26 86 F1 | 	sub	local05, #8
16de8     13 13 02 56 |  if_ne	mov	arg01, local05
16dec     6C 39 B0 5D |  if_ne	call	#__system___closeraw
16df0     00 1E 0E F2 | 	cmp	local01, #0 wz
16df4     00 20 0E A2 |  if_e	cmp	local02, #0 wz
16df8     00 22 0E A2 |  if_e	cmp	local03, #0 wz
16dfc     3C 00 90 AD |  if_e	jmp	#LR__2082
16e00     0C 12 06 F6 | 	mov	arg01, #12
16e04     54 2E B0 FD | 	call	#__system___gc_alloc_managed
16e08     FD 24 0A F6 | 	mov	local04, result1 wz
16e0c     18 00 90 5D |  if_ne	jmp	#LR__2081
16e10     EE 12 02 F6 | 	mov	arg01, abortchain
16e14     07 14 06 F6 | 	mov	arg02, #7
16e18     01 16 06 F6 | 	mov	arg03, #1
16e1c     DA 00 A0 FD | 	call	#__longjmp
16e20     01 FA 65 F6 | 	neg	result1, #1
16e24     C8 00 90 FD | 	jmp	#LR__2089
16e28                 | LR__2081
16e28     12 01 68 FC | 	wrlong	#0, local04
16e2c     04 24 06 F1 | 	add	local04, #4
16e30     12 01 68 FC | 	wrlong	#0, local04
16e34     04 24 86 F1 | 	sub	local04, #4
16e38     13 25 62 FC | 	wrlong	local04, local05
16e3c                 | LR__2082
16e3c     00 1E 0E F2 | 	cmp	local01, #0 wz
16e40     20 00 90 AD |  if_e	jmp	#LR__2083
16e44     12 1F 62 FC | 	wrlong	local01, local04
16e48     12 FB 01 F6 | 	mov	result1, local04
16e4c     00 B8 02 FF 
16e50     00 FA 45 F5 | 	or	result1, ##91226112
16e54     1C 26 06 F1 | 	add	local05, #28
16e58     13 FB 61 FC | 	wrlong	result1, local05
16e5c     1C 26 86 F1 | 	sub	local05, #28
16e60     0C 00 90 FD | 	jmp	#LR__2084
16e64                 | LR__2083
16e64     1C 26 06 F1 | 	add	local05, #28
16e68     13 01 68 FC | 	wrlong	#0, local05
16e6c     1C 26 86 F1 | 	sub	local05, #28
16e70                 | LR__2084
16e70     00 20 0E F2 | 	cmp	local02, #0 wz
16e74     28 00 90 AD |  if_e	jmp	#LR__2085
16e78     04 24 06 F1 | 	add	local04, #4
16e7c     12 21 62 FC | 	wrlong	local02, local04
16e80     04 24 86 F1 | 	sub	local04, #4
16e84     12 FB 01 F6 | 	mov	result1, local04
16e88     00 C0 02 FF 
16e8c     00 FA 45 F5 | 	or	result1, ##92274688
16e90     20 26 06 F1 | 	add	local05, #32
16e94     13 FB 61 FC | 	wrlong	result1, local05
16e98     20 26 86 F1 | 	sub	local05, #32
16e9c     0C 00 90 FD | 	jmp	#LR__2086
16ea0                 | LR__2085
16ea0     20 26 06 F1 | 	add	local05, #32
16ea4     13 01 68 FC | 	wrlong	#0, local05
16ea8     20 26 86 F1 | 	sub	local05, #32
16eac                 | LR__2086
16eac     00 22 0E F2 | 	cmp	local03, #0 wz
16eb0     24 00 90 AD |  if_e	jmp	#LR__2087
16eb4     08 24 06 F1 | 	add	local04, #8
16eb8     12 23 62 FC | 	wrlong	local03, local04
16ebc     08 24 86 F1 | 	sub	local04, #8
16ec0     00 C8 02 FF 
16ec4     00 24 46 F5 | 	or	local04, ##93323264
16ec8     24 26 06 F1 | 	add	local05, #36
16ecc     13 25 62 FC | 	wrlong	local04, local05
16ed0     24 26 86 F1 | 	sub	local05, #36
16ed4     0C 00 90 FD | 	jmp	#LR__2088
16ed8                 | LR__2087
16ed8     24 26 06 F1 | 	add	local05, #36
16edc     13 01 68 FC | 	wrlong	#0, local05
16ee0     24 26 86 F1 | 	sub	local05, #36
16ee4                 | LR__2088
16ee4     08 26 06 F1 | 	add	local05, #8
16ee8     13 0F 68 FC | 	wrlong	#7, local05
16eec     00 FA 05 F6 | 	mov	result1, #0
16ef0                 | LR__2089
16ef0     A7 F0 03 F6 | 	mov	ptra, fp
16ef4     B2 00 A0 FD | 	call	#popregs_
16ef8                 | __system___basic_open_ret
16ef8     2D 00 64 FD | 	ret
16efc                 | 
16efc                 | __system___basic_open_string
16efc     04 4A 05 F6 | 	mov	COUNT_, #4
16f00     A8 00 A0 FD | 	call	#pushregs_
16f04     0A 1F 02 F6 | 	mov	local01, arg02
16f08     0B 21 02 F6 | 	mov	local02, arg03
16f0c     BC 40 B0 FD | 	call	#__system____getftab
16f10     FD 22 0A F6 | 	mov	local03, result1 wz
16f14     18 00 90 5D |  if_ne	jmp	#LR__2090
16f18     EE 12 02 F6 | 	mov	arg01, abortchain
16f1c     0C 14 06 F6 | 	mov	arg02, #12
16f20     01 16 06 F6 | 	mov	arg03, #1
16f24     DA 00 A0 FD | 	call	#__longjmp
16f28     01 FA 65 F6 | 	neg	result1, #1
16f2c     58 00 90 FD | 	jmp	#LR__2092
16f30                 | LR__2090
16f30     08 22 06 F1 | 	add	local03, #8
16f34     11 19 0A FB | 	rdlong	arg04, local03 wz
16f38     08 22 86 F1 | 	sub	local03, #8
16f3c     11 13 02 56 |  if_ne	mov	arg01, local03
16f40     18 38 B0 5D |  if_ne	call	#__system___closeraw
16f44     0F 15 02 F6 | 	mov	arg02, local01
16f48     10 17 02 F6 | 	mov	arg03, local02
16f4c     11 13 02 F6 | 	mov	arg01, local03
16f50     B6 19 06 F6 | 	mov	arg04, #438
16f54     00 35 B0 FD | 	call	#__system___openraw
16f58     FD 24 02 F6 | 	mov	local04, result1
16f5c     00 24 56 F2 | 	cmps	local04, #0 wc
16f60     20 00 90 3D |  if_ae	jmp	#LR__2091
16f64     20 E8 05 F1 | 	add	ptr___system__dat__, #32
16f68     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
16f6c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
16f70     EE 12 02 F6 | 	mov	arg01, abortchain
16f74     01 16 06 F6 | 	mov	arg03, #1
16f78     DA 00 A0 FD | 	call	#__longjmp
16f7c     01 FA 65 F6 | 	neg	result1, #1
16f80     04 00 90 FD | 	jmp	#LR__2092
16f84                 | LR__2091
16f84     12 FB 01 F6 | 	mov	result1, local04
16f88                 | LR__2092
16f88     A7 F0 03 F6 | 	mov	ptra, fp
16f8c     B2 00 A0 FD | 	call	#popregs_
16f90                 | __system___basic_open_string_ret
16f90     2D 00 64 FD | 	ret
16f94                 | 
16f94                 | __system___basic_print_char
16f94     03 4A 05 F6 | 	mov	COUNT_, #3
16f98     A8 00 A0 FD | 	call	#pushregs_
16f9c     0A 1F 02 F6 | 	mov	local01, arg02
16fa0     7C 47 B0 FD | 	call	#__system___gettxfunc
16fa4     FD 20 0A F6 | 	mov	local02, result1 wz
16fa8     00 FA 05 A6 |  if_e	mov	result1, #0
16fac     30 00 90 AD |  if_e	jmp	#LR__2100
16fb0     10 23 02 F6 | 	mov	local03, local02
16fb4     13 20 46 F7 | 	zerox	local02, #19
16fb8     14 22 46 F0 | 	shr	local03, #20
16fbc     02 22 66 F0 | 	shl	local03, #2
16fc0     ED 22 02 F1 | 	add	local03, __methods__
16fc4     11 23 02 FB | 	rdlong	local03, local03
16fc8     0F 13 02 F6 | 	mov	arg01, local01
16fcc     F2 1E 02 F6 | 	mov	local01, objptr
16fd0     10 E5 01 F6 | 	mov	objptr, local02
16fd4     2D 22 62 FD | 	call	local03
16fd8     0F E5 01 F6 | 	mov	objptr, local01
16fdc     01 FA 05 F6 | 	mov	result1, #1
16fe0                 | LR__2100
16fe0     A7 F0 03 F6 | 	mov	ptra, fp
16fe4     B2 00 A0 FD | 	call	#popregs_
16fe8                 | __system___basic_print_char_ret
16fe8     2D 00 64 FD | 	ret
16fec                 | 
16fec                 | __system___basic_print_string
16fec     03 4A 05 F6 | 	mov	COUNT_, #3
16ff0     A8 00 A0 FD | 	call	#pushregs_
16ff4     0A 1F 02 F6 | 	mov	local01, arg02
16ff8     0B 21 02 F6 | 	mov	local02, arg03
16ffc     20 47 B0 FD | 	call	#__system___gettxfunc
17000     FD 22 0A F6 | 	mov	local03, result1 wz
17004     00 FA 05 A6 |  if_e	mov	result1, #0
17008     18 00 90 AD |  if_e	jmp	#LR__2110
1700c     00 1E 0E F2 | 	cmp	local01, #0 wz
17010     00 FA 05 A6 |  if_e	mov	result1, #0
17014     11 13 02 56 |  if_ne	mov	arg01, local03
17018     10 15 02 56 |  if_ne	mov	arg02, local02
1701c     0F 17 02 56 |  if_ne	mov	arg03, local01
17020     9C 01 B0 5D |  if_ne	call	#__system___fmtstr
17024                 | LR__2110
17024     A7 F0 03 F6 | 	mov	ptra, fp
17028     B2 00 A0 FD | 	call	#popregs_
1702c                 | __system___basic_print_string_ret
1702c     2D 00 64 FD | 	ret
17030                 | 
17030                 | __system___basic_print_integer
17030     04 4A 05 F6 | 	mov	COUNT_, #4
17034     A8 00 A0 FD | 	call	#pushregs_
17038     0A 1F 02 F6 | 	mov	local01, arg02
1703c     0B 21 02 F6 | 	mov	local02, arg03
17040     0C 23 02 F6 | 	mov	local03, arg04
17044     D8 46 B0 FD | 	call	#__system___gettxfunc
17048     FD 24 0A F6 | 	mov	local04, result1 wz
1704c     00 FA 05 A6 |  if_e	mov	result1, #0
17050     12 13 02 56 |  if_ne	mov	arg01, local04
17054     10 15 02 56 |  if_ne	mov	arg02, local02
17058     0F 17 02 56 |  if_ne	mov	arg03, local01
1705c     11 19 02 56 |  if_ne	mov	arg04, local03
17060     48 02 B0 5D |  if_ne	call	#__system___fmtnum
17064     A7 F0 03 F6 | 	mov	ptra, fp
17068     B2 00 A0 FD | 	call	#popregs_
1706c                 | __system___basic_print_integer_ret
1706c     2D 00 64 FD | 	ret
17070                 | 
17070                 | __system___basic_print_unsigned
17070     03 4A 05 F6 | 	mov	COUNT_, #3
17074     A8 00 A0 FD | 	call	#pushregs_
17078     0A 1F 02 F6 | 	mov	local01, arg02
1707c     0B 21 02 F6 | 	mov	local02, arg03
17080     0C 23 02 F6 | 	mov	local03, arg04
17084     98 46 B0 FD | 	call	#__system___gettxfunc
17088     FD 12 0A F6 | 	mov	arg01, result1 wz
1708c     00 FA 05 A6 |  if_e	mov	result1, #0
17090     3A 20 26 54 |  if_ne	bith	local02, #58
17094     10 15 02 56 |  if_ne	mov	arg02, local02
17098     0F 17 02 56 |  if_ne	mov	arg03, local01
1709c     11 19 02 56 |  if_ne	mov	arg04, local03
170a0     08 02 B0 5D |  if_ne	call	#__system___fmtnum
170a4     A7 F0 03 F6 | 	mov	ptra, fp
170a8     B2 00 A0 FD | 	call	#popregs_
170ac                 | __system___basic_print_unsigned_ret
170ac     2D 00 64 FD | 	ret
170b0                 | 
170b0                 | __system___basic_get_char
170b0     03 4A 05 F6 | 	mov	COUNT_, #3
170b4     A8 00 A0 FD | 	call	#pushregs_
170b8     A8 46 B0 FD | 	call	#__system___getrxfunc
170bc     FD 1E 0A F6 | 	mov	local01, result1 wz
170c0     01 FA 65 A6 |  if_e	neg	result1, #1
170c4     28 00 90 AD |  if_e	jmp	#LR__2120
170c8     0F 21 02 F6 | 	mov	local02, local01
170cc     13 1E 46 F7 | 	zerox	local01, #19
170d0     14 20 46 F0 | 	shr	local02, #20
170d4     02 20 66 F0 | 	shl	local02, #2
170d8     ED 20 02 F1 | 	add	local02, __methods__
170dc     10 21 02 FB | 	rdlong	local02, local02
170e0     F2 22 02 F6 | 	mov	local03, objptr
170e4     0F E5 01 F6 | 	mov	objptr, local01
170e8     2D 20 62 FD | 	call	local02
170ec     11 E5 01 F6 | 	mov	objptr, local03
170f0                 | LR__2120
170f0     A7 F0 03 F6 | 	mov	ptra, fp
170f4     B2 00 A0 FD | 	call	#popregs_
170f8                 | __system___basic_get_char_ret
170f8     2D 00 64 FD | 	ret
170fc                 | 
170fc                 | __system___basic_get
170fc     04 4A 05 F6 | 	mov	COUNT_, #4
17100     A8 00 A0 FD | 	call	#pushregs_
17104     0D 1F 02 F6 | 	mov	local01, arg05
17108     0F 19 02 FD | 	qmul	arg04, local01
1710c     09 21 02 F6 | 	mov	local02, arg01
17110     0B 23 02 F6 | 	mov	local03, arg03
17114     00 14 0E F2 | 	cmp	arg02, #0 wz
17118     01 14 86 51 |  if_ne	sub	arg02, #1
1711c     10 13 02 56 |  if_ne	mov	arg01, local02
17120     00 16 06 56 |  if_ne	mov	arg03, #0
17124     18 24 62 FD | 	getqx	local04
17128     E8 3C B0 5D |  if_ne	call	#__system__lseek
1712c     11 15 02 F6 | 	mov	arg02, local03
17130     12 17 02 F6 | 	mov	arg03, local04
17134     10 13 02 F6 | 	mov	arg01, local02
17138     60 3C B0 FD | 	call	#__system__read
1713c     FD 24 02 F6 | 	mov	local04, result1
17140     01 24 56 F2 | 	cmps	local04, #1 wc
17144     10 00 90 CD |  if_b	jmp	#LR__2130
17148     12 61 02 F6 | 	mov	muldiva_, local04
1714c     0F 63 02 F6 | 	mov	muldivb_, local01
17150     BA 00 A0 FD | 	call	#divide_
17154     31 25 02 F6 | 	mov	local04, muldivb_
17158                 | LR__2130
17158     12 FB 01 F6 | 	mov	result1, local04
1715c     A7 F0 03 F6 | 	mov	ptra, fp
17160     B2 00 A0 FD | 	call	#popregs_
17164                 | __system___basic_get_ret
17164     2D 00 64 FD | 	ret
17168                 | 
17168                 | __system___fmtchar
17168     00 4A 05 F6 | 	mov	COUNT_, #0
1716c     A8 00 A0 FD | 	call	#pushregs_
17170     10 F0 07 F1 | 	add	ptra, #16
17174     04 4E 05 F1 | 	add	fp, #4
17178     A7 12 62 FC | 	wrlong	arg01, fp
1717c     04 4E 05 F1 | 	add	fp, #4
17180     A7 14 62 FC | 	wrlong	arg02, fp
17184     04 4E 05 F1 | 	add	fp, #4
17188     A7 16 62 FC | 	wrlong	arg03, fp
1718c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
17190     A7 16 62 FC | 	wrlong	arg03, fp
17194     08 4E 85 F1 | 	sub	fp, #8
17198     A7 12 02 FB | 	rdlong	arg01, fp
1719c     04 4E 05 F1 | 	add	fp, #4
171a0     A7 14 02 FB | 	rdlong	arg02, fp
171a4     04 4E 05 F1 | 	add	fp, #4
171a8     A7 16 02 F6 | 	mov	arg03, fp
171ac     0C 4E 85 F1 | 	sub	fp, #12
171b0     0C 00 B0 FD | 	call	#__system___fmtstr
171b4     A7 F0 03 F6 | 	mov	ptra, fp
171b8     B2 00 A0 FD | 	call	#popregs_
171bc                 | __system___fmtchar_ret
171bc     2D 00 64 FD | 	ret
171c0                 | 
171c0                 | __system___fmtstr
171c0     09 4A 05 F6 | 	mov	COUNT_, #9
171c4     A8 00 A0 FD | 	call	#pushregs_
171c8     09 1F 02 F6 | 	mov	local01, arg01
171cc     0A 21 02 F6 | 	mov	local02, arg02
171d0     0B 23 02 F6 | 	mov	local03, arg03
171d4     10 19 E2 F8 | 	getbyte	arg04, local02, #0
171d8     11 13 02 F6 | 	mov	arg01, local03
171dc     09 25 02 F6 | 	mov	local04, arg01
171e0     97 06 48 FB | 	callpa	#(@LR__2141-@LR__2140)>>2,fcache_load_ptr_
171e4                 | LR__2140
171e4     12 FB C9 FA | 	rdbyte	result1, local04 wz
171e8     01 24 06 51 |  if_ne	add	local04, #1
171ec     F4 FF 9F 5D |  if_ne	jmp	#LR__2140
171f0                 | LR__2141
171f0     09 25 82 F1 | 	sub	local04, arg01
171f4     00 18 0E F2 | 	cmp	arg04, #0 wz
171f8     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
171fc     10 15 02 F6 | 	mov	arg02, local02
17200     12 17 02 F6 | 	mov	arg03, local04
17204     0F 13 02 F6 | 	mov	arg01, local01
17208     02 18 06 F6 | 	mov	arg04, #2
1720c     B0 41 B0 FD | 	call	#__system___fmtpad
17210     FD 26 02 F6 | 	mov	local05, result1
17214     00 26 56 F2 | 	cmps	local05, #0 wc
17218     13 FB 01 C6 |  if_b	mov	result1, local05
1721c     80 00 90 CD |  if_b	jmp	#LR__2144
17220     01 24 56 F2 | 	cmps	local04, #1 wc
17224     50 00 90 CD |  if_b	jmp	#LR__2143
17228     12 29 02 F6 | 	mov	local06, local04
1722c                 | LR__2142
1722c     0F 2B 02 F6 | 	mov	local07, local01
17230     0F 2D 02 F6 | 	mov	local08, local01
17234     13 2A 46 F7 | 	zerox	local07, #19
17238     14 2C 46 F0 | 	shr	local08, #20
1723c     02 2C 66 F0 | 	shl	local08, #2
17240     ED 2C 02 F1 | 	add	local08, __methods__
17244     16 2D 02 FB | 	rdlong	local08, local08
17248     11 13 C2 FA | 	rdbyte	arg01, local03
1724c     F2 2E 02 F6 | 	mov	local09, objptr
17250     15 E5 01 F6 | 	mov	objptr, local07
17254     01 22 06 F1 | 	add	local03, #1
17258     2D 2C 62 FD | 	call	local08
1725c     17 E5 01 F6 | 	mov	objptr, local09
17260     FD 2E 02 F6 | 	mov	local09, result1
17264     00 2E 56 F2 | 	cmps	local09, #0 wc
17268     17 FB 01 C6 |  if_b	mov	result1, local09
1726c     30 00 90 CD |  if_b	jmp	#LR__2144
17270     17 27 02 F1 | 	add	local05, local09
17274     ED 29 6E FB | 	djnz	local06, #LR__2142
17278                 | LR__2143
17278     10 15 02 F6 | 	mov	arg02, local02
1727c     12 17 02 F6 | 	mov	arg03, local04
17280     0F 13 02 F6 | 	mov	arg01, local01
17284     01 18 06 F6 | 	mov	arg04, #1
17288     34 41 B0 FD | 	call	#__system___fmtpad
1728c     FD 2E 02 F6 | 	mov	local09, result1
17290     00 2E 56 F2 | 	cmps	local09, #0 wc
17294     17 FB 01 C6 |  if_b	mov	result1, local09
17298     17 27 02 31 |  if_ae	add	local05, local09
1729c     13 FB 01 36 |  if_ae	mov	result1, local05
172a0                 | LR__2144
172a0     A7 F0 03 F6 | 	mov	ptra, fp
172a4     B2 00 A0 FD | 	call	#popregs_
172a8                 | __system___fmtstr_ret
172a8     2D 00 64 FD | 	ret
172ac                 | 
172ac                 | __system___fmtnum
172ac     0B 4A 05 F6 | 	mov	COUNT_, #11
172b0     A8 00 A0 FD | 	call	#pushregs_
172b4     09 1F 02 F6 | 	mov	local01, arg01
172b8     0A 21 02 F6 | 	mov	local02, arg02
172bc     0B 23 02 F6 | 	mov	local03, arg03
172c0     0C 25 02 F6 | 	mov	local04, arg04
172c4     F8 27 02 F6 | 	mov	local05, ptra
172c8     13 29 02 F6 | 	mov	local06, local05
172cc     00 2A 06 F6 | 	mov	local07, #0
172d0     10 2D 02 F6 | 	mov	local08, local02
172d4     10 2C 46 F0 | 	shr	local08, #16
172d8     3F 2C 06 F5 | 	and	local08, #63
172dc     10 2F E2 F8 | 	getbyte	local09, local02, #0
172e0     10 31 02 F6 | 	mov	local10, local02
172e4     1A 30 46 F0 | 	shr	local10, #26
172e8     03 30 06 F5 | 	and	local10, #3
172ec     18 33 02 F6 | 	mov	local11, local10
172f0     01 2C 56 F2 | 	cmps	local08, #1 wc
172f4     44 F0 07 F1 | 	add	ptra, #68
172f8     01 2C 86 31 |  if_ae	sub	local08, #1
172fc     41 2E 56 F2 | 	cmps	local09, #65 wc
17300     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
17304     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
17308     03 32 0E F2 | 	cmp	local11, #3 wz
1730c     00 32 06 A6 |  if_e	mov	local11, #0
17310     00 22 56 52 |  if_ne	cmps	local03, #0 wc
17314     04 32 06 46 |  if_c_and_nz	mov	local11, #4
17318     11 23 62 46 |  if_c_and_nz	neg	local03, local03
1731c     00 32 0E F2 | 	cmp	local11, #0 wz
17320     4C 00 90 AD |  if_e	jmp	#LR__2153
17324     01 2A 06 F6 | 	mov	local07, #1
17328     17 2D 0A F2 | 	cmp	local08, local09 wz
1732c     18 00 90 5D |  if_ne	jmp	#LR__2151
17330     05 2C 6E FB | 	djnz	local08, #LR__2150
17334     0F 13 02 F6 | 	mov	arg01, local01
17338     10 15 02 F6 | 	mov	arg02, local02
1733c     23 16 06 F6 | 	mov	arg03, #35
17340     24 FE BF FD | 	call	#__system___fmtchar
17344     88 00 90 FD | 	jmp	#LR__2157
17348                 | LR__2150
17348                 | LR__2151
17348     02 32 0E F2 | 	cmp	local11, #2 wz
1734c     14 31 02 A6 |  if_e	mov	local10, local06
17350     01 28 06 A1 |  if_e	add	local06, #1
17354     18 41 48 AC |  if_e	wrbyte	#32, local10
17358     14 00 90 AD |  if_e	jmp	#LR__2152
1735c     04 32 0E F2 | 	cmp	local11, #4 wz
17360     14 5B 48 AC |  if_e	wrbyte	#45, local06
17364     01 28 06 A1 |  if_e	add	local06, #1
17368     14 57 48 5C |  if_ne	wrbyte	#43, local06
1736c     01 28 06 51 |  if_ne	add	local06, #1
17370                 | LR__2152
17370                 | LR__2153
17370     14 13 02 F6 | 	mov	arg01, local06
17374     11 15 02 F6 | 	mov	arg02, local03
17378     12 17 02 F6 | 	mov	arg03, local04
1737c     16 19 02 F6 | 	mov	arg04, local08
17380     00 1A 06 F6 | 	mov	arg05, #0
17384     1D 20 2E F4 | 	testbn	local02, #29 wz
17388     01 1A 06 56 |  if_ne	mov	arg05, #1
1738c     F8 40 B0 FD | 	call	#__system___uitoa
17390     FD 2A 02 F1 | 	add	local07, result1
17394     17 2B 5A F2 | 	cmps	local07, local09 wcz
17398     24 00 90 ED |  if_be	jmp	#LR__2156
1739c     97 0E 48 FB | 	callpa	#(@LR__2155-@LR__2154)>>2,fcache_load_ptr_
173a0                 | LR__2154
173a0     17 31 02 F6 | 	mov	local10, local09
173a4     01 30 56 F2 | 	cmps	local10, #1 wc
173a8     01 2E 86 F1 | 	sub	local09, #1
173ac     14 31 02 36 |  if_ae	mov	local10, local06
173b0     01 28 06 31 |  if_ae	add	local06, #1
173b4     18 47 48 3C |  if_ae	wrbyte	#35, local10
173b8     E4 FF 9F 3D |  if_ae	jmp	#LR__2154
173bc                 | LR__2155
173bc     14 01 48 FC | 	wrbyte	#0, local06
173c0                 | LR__2156
173c0     0F 13 02 F6 | 	mov	arg01, local01
173c4     10 15 02 F6 | 	mov	arg02, local02
173c8     13 17 02 F6 | 	mov	arg03, local05
173cc     F0 FD BF FD | 	call	#__system___fmtstr
173d0                 | LR__2157
173d0     A7 F0 03 F6 | 	mov	ptra, fp
173d4     B2 00 A0 FD | 	call	#popregs_
173d8                 | __system___fmtnum_ret
173d8     2D 00 64 FD | 	ret
173dc                 | 
173dc                 | __system___fmtfloat
173dc     10 4A 05 F6 | 	mov	COUNT_, #16
173e0     A8 00 A0 FD | 	call	#pushregs_
173e4     24 F1 07 F1 | 	add	ptra, #292
173e8     04 4E 05 F1 | 	add	fp, #4
173ec     A7 12 62 FC | 	wrlong	arg01, fp
173f0     04 4E 05 F1 | 	add	fp, #4
173f4     A7 14 62 FC | 	wrlong	arg02, fp
173f8     04 4E 05 F1 | 	add	fp, #4
173fc     A7 16 62 FC | 	wrlong	arg03, fp
17400     04 4E 05 F1 | 	add	fp, #4
17404     A7 18 62 FC | 	wrlong	arg04, fp
17408     0C 4E 05 F1 | 	add	fp, #12
1740c     A7 14 68 FC | 	wrlong	#10, fp
17410     08 4E 05 F1 | 	add	fp, #8
17414     A7 00 68 FC | 	wrlong	#0, fp
17418     08 4E 05 F1 | 	add	fp, #8
1741c     A7 00 68 FC | 	wrlong	#0, fp
17420     08 4E 05 F1 | 	add	fp, #8
17424     A7 00 68 FC | 	wrlong	#0, fp
17428     04 4E 05 F1 | 	add	fp, #4
1742c     A7 04 68 FC | 	wrlong	#2, fp
17430     04 4E 05 F1 | 	add	fp, #4
17434     A7 00 68 FC | 	wrlong	#0, fp
17438     04 4E 05 F1 | 	add	fp, #4
1743c     A7 00 68 FC | 	wrlong	#0, fp
17440     04 4E 05 F1 | 	add	fp, #4
17444     A7 00 68 FC | 	wrlong	#0, fp
17448     04 4E 05 F1 | 	add	fp, #4
1744c     A7 00 68 FC | 	wrlong	#0, fp
17450     18 4E 05 F1 | 	add	fp, #24
17454     A7 00 68 FC | 	wrlong	#0, fp
17458     68 4E 05 F1 | 	add	fp, #104
1745c     A7 1E 02 F6 | 	mov	local01, fp
17460     08 4E 85 F1 | 	sub	fp, #8
17464     A7 1E 62 FC | 	wrlong	local01, fp
17468     04 4E 05 F1 | 	add	fp, #4
1746c     A7 1E 62 FC | 	wrlong	local01, fp
17470     BC 4E 85 F1 | 	sub	fp, #188
17474     A7 1E 02 FB | 	rdlong	local01, fp
17478     10 1E 46 F0 | 	shr	local01, #16
1747c     3F 1E 06 F5 | 	and	local01, #63
17480     B0 4E 05 F1 | 	add	fp, #176
17484     A7 1E 62 FC | 	wrlong	local01, fp
17488     B0 4E 85 F1 | 	sub	fp, #176
1748c     A7 1E 02 FB | 	rdlong	local01, fp
17490     1C 1E 46 F0 | 	shr	local01, #28
17494     01 1E 06 F5 | 	and	local01, #1
17498     08 4F 05 F1 | 	add	fp, #264
1749c     A7 1E 62 FC | 	wrlong	local01, fp
174a0     58 4E 85 F1 | 	sub	fp, #88
174a4     A7 1E 0A FB | 	rdlong	local01, fp wz
174a8     B8 4E 85 F1 | 	sub	fp, #184
174ac     3C 00 90 5D |  if_ne	jmp	#LR__2161
174b0     10 4E 05 F1 | 	add	fp, #16
174b4     A7 1E 02 FB | 	rdlong	local01, fp
174b8     10 4E 85 F1 | 	sub	fp, #16
174bc     61 1E 0E F2 | 	cmp	local01, #97 wz
174c0     18 00 90 5D |  if_ne	jmp	#LR__2160
174c4     B8 4E 05 F1 | 	add	fp, #184
174c8     A7 1A 68 FC | 	wrlong	#13, fp
174cc     84 4E 85 F1 | 	sub	fp, #132
174d0     A7 02 68 FC | 	wrlong	#1, fp
174d4     34 4E 85 F1 | 	sub	fp, #52
174d8     24 00 90 FD | 	jmp	#LR__2162
174dc                 | LR__2160
174dc     B8 4E 05 F1 | 	add	fp, #184
174e0     A7 0C 68 FC | 	wrlong	#6, fp
174e4     B8 4E 85 F1 | 	sub	fp, #184
174e8     14 00 90 FD | 	jmp	#LR__2162
174ec                 | LR__2161
174ec     B8 4E 05 F1 | 	add	fp, #184
174f0     A7 1E 02 FB | 	rdlong	local01, fp
174f4     01 1E 86 F1 | 	sub	local01, #1
174f8     A7 1E 62 FC | 	wrlong	local01, fp
174fc     B8 4E 85 F1 | 	sub	fp, #184
17500                 | LR__2162
17500     08 4E 05 F1 | 	add	fp, #8
17504     A7 1E 02 FB | 	rdlong	local01, fp
17508     16 1E 46 F0 | 	shr	local01, #22
1750c     03 1E 06 F5 | 	and	local01, #3
17510     04 4F 05 F1 | 	add	fp, #260
17514     A7 1E 62 FC | 	wrlong	local01, fp
17518     04 4F 85 F1 | 	sub	fp, #260
1751c     A7 1E 02 FB | 	rdlong	local01, fp
17520     1D 1E 46 F0 | 	shr	local01, #29
17524     01 1E 06 F5 | 	and	local01, #1
17528     B4 4E 05 F1 | 	add	fp, #180
1752c     A7 1E 62 FC | 	wrlong	local01, fp
17530     B4 4E 85 F1 | 	sub	fp, #180
17534     A7 1E 02 FB | 	rdlong	local01, fp
17538     0F 1F EA F8 | 	getbyte	local01, local01, #1
1753c     60 4E 05 F1 | 	add	fp, #96
17540     A7 1E 62 FC | 	wrlong	local01, fp
17544     60 4E 85 F1 | 	sub	fp, #96
17548     A7 1E 02 FB | 	rdlong	local01, fp
1754c     0F 1F E2 F8 | 	getbyte	local01, local01, #0
17550     64 4E 05 F1 | 	add	fp, #100
17554     A7 1E 62 FC | 	wrlong	local01, fp
17558     00 1E 06 F6 | 	mov	local01, #0
1755c     5C 4E 85 F1 | 	sub	fp, #92
17560     A7 1A 02 FB | 	rdlong	arg05, fp
17564     65 1A 0E F2 | 	cmp	arg05, #101 wz
17568     01 1E 06 A6 |  if_e	mov	local01, #1
1756c     14 4E 05 F1 | 	add	fp, #20
17570     A7 1E 62 FC | 	wrlong	local01, fp
17574     98 4E 05 F1 | 	add	fp, #152
17578     A7 20 0A FB | 	rdlong	local02, fp wz
1757c     45 1E 06 56 |  if_ne	mov	local01, #69
17580     65 1E 06 A6 |  if_e	mov	local01, #101
17584     8C 4E 85 F1 | 	sub	fp, #140
17588     A7 1E 62 FC | 	wrlong	local01, fp
1758c     20 4E 85 F1 | 	sub	fp, #32
17590     A7 1E 02 FB | 	rdlong	local01, fp
17594     10 4E 85 F1 | 	sub	fp, #16
17598     61 1E 0E F2 | 	cmp	local01, #97 wz
1759c     4C 00 90 5D |  if_ne	jmp	#LR__2163
175a0     24 4E 05 F1 | 	add	fp, #36
175a4     A7 02 68 FC | 	wrlong	#1, fp
175a8     98 4E 05 F1 | 	add	fp, #152
175ac     A7 20 0A FB | 	rdlong	local02, fp wz
175b0     50 1E 06 56 |  if_ne	mov	local01, #80
175b4     70 1E 06 A6 |  if_e	mov	local01, #112
175b8     8C 4E 85 F1 | 	sub	fp, #140
175bc     A7 1E 62 FC | 	wrlong	local01, fp
175c0     14 4E 85 F1 | 	sub	fp, #20
175c4     A7 04 68 FC | 	wrlong	#2, fp
175c8     1C 4E 05 F1 | 	add	fp, #28
175cc     A7 02 68 FC | 	wrlong	#1, fp
175d0     84 4E 05 F1 | 	add	fp, #132
175d4     A7 20 0A FB | 	rdlong	local02, fp wz
175d8     58 1E 06 56 |  if_ne	mov	local01, #88
175dc     78 1E 06 A6 |  if_e	mov	local01, #120
175e0     7C 4E 85 F1 | 	sub	fp, #124
175e4     A7 1E 62 FC | 	wrlong	local01, fp
175e8     40 4E 85 F1 | 	sub	fp, #64
175ec                 | LR__2163
175ec     10 4E 05 F1 | 	add	fp, #16
175f0     A7 1E 02 FB | 	rdlong	local01, fp
175f4     10 4E 85 F1 | 	sub	fp, #16
175f8     23 1E 0E F2 | 	cmp	local01, #35 wz
175fc     3C 00 90 5D |  if_ne	jmp	#LR__2166
17600     48 4E 05 F1 | 	add	fp, #72
17604     A7 02 68 FC | 	wrlong	#1, fp
17608     C8 4E 05 F1 | 	add	fp, #200
1760c     A7 1E 0A FB | 	rdlong	local01, fp wz
17610     10 4F 85 F1 | 	sub	fp, #272
17614     18 00 90 AD |  if_e	jmp	#LR__2164
17618     10 4E 05 F1 | 	add	fp, #16
1761c     A7 CC 68 FC | 	wrlong	#102, fp
17620     00 4F 05 F1 | 	add	fp, #256
17624     A7 00 68 FC | 	wrlong	#0, fp
17628     10 4F 85 F1 | 	sub	fp, #272
1762c     0C 00 90 FD | 	jmp	#LR__2165
17630                 | LR__2164
17630     10 4F 05 F1 | 	add	fp, #272
17634     A7 02 68 FC | 	wrlong	#1, fp
17638     10 4F 85 F1 | 	sub	fp, #272
1763c                 | LR__2165
1763c                 | LR__2166
1763c     08 4E 05 F1 | 	add	fp, #8
17640     A7 1E 02 FB | 	rdlong	local01, fp
17644     1A 1E 46 F0 | 	shr	local01, #26
17648     03 1E 06 F5 | 	and	local01, #3
1764c     5C 4E 05 F1 | 	add	fp, #92
17650     A7 1E 62 FC | 	wrlong	local01, fp
17654     58 4E 85 F1 | 	sub	fp, #88
17658     A7 FA 01 FB | 	rdlong	result1, fp
1765c     0C 4E 85 F1 | 	sub	fp, #12
17660     1F FA 4D F0 | 	shr	result1, #31 wz
17664     20 00 90 AD |  if_e	jmp	#LR__2167
17668     2C 4E 05 F1 | 	add	fp, #44
1766c     A7 5A 68 FC | 	wrlong	#45, fp
17670     20 4E 85 F1 | 	sub	fp, #32
17674     A7 FA 01 FB | 	rdlong	result1, fp
17678     1F FA E5 F4 | 	bitnot	result1, #31
1767c     A7 FA 61 FC | 	wrlong	result1, fp
17680     0C 4E 85 F1 | 	sub	fp, #12
17684     3C 00 90 FD | 	jmp	#LR__2169
17688                 | LR__2167
17688     64 4E 05 F1 | 	add	fp, #100
1768c     A7 1E 02 FB | 	rdlong	local01, fp
17690     64 4E 85 F1 | 	sub	fp, #100
17694     01 1E 0E F2 | 	cmp	local01, #1 wz
17698     2C 4E 05 A1 |  if_e	add	fp, #44
1769c     A7 56 68 AC |  if_e	wrlong	#43, fp
176a0     2C 4E 85 A1 |  if_e	sub	fp, #44
176a4     1C 00 90 AD |  if_e	jmp	#LR__2168
176a8     64 4E 05 F1 | 	add	fp, #100
176ac     A7 1E 02 FB | 	rdlong	local01, fp
176b0     64 4E 85 F1 | 	sub	fp, #100
176b4     02 1E 0E F2 | 	cmp	local01, #2 wz
176b8     2C 4E 05 A1 |  if_e	add	fp, #44
176bc     A7 40 68 AC |  if_e	wrlong	#32, fp
176c0     2C 4E 85 A1 |  if_e	sub	fp, #44
176c4                 | LR__2168
176c4                 | LR__2169
176c4     08 4E 05 F1 | 	add	fp, #8
176c8     A7 1E 02 FB | 	rdlong	local01, fp
176cc     18 1E 46 F0 | 	shr	local01, #24
176d0     03 1E 06 F5 | 	and	local01, #3
176d4     3C 4E 05 F1 | 	add	fp, #60
176d8     A7 1E 62 FC | 	wrlong	local01, fp
176dc     00 1E 06 F6 | 	mov	local01, #0
176e0     18 4E 85 F1 | 	sub	fp, #24
176e4     A7 22 0A FB | 	rdlong	local03, fp wz
176e8     2C 4E 85 F1 | 	sub	fp, #44
176ec     18 00 90 5D |  if_ne	jmp	#LR__2170
176f0     1C 4E 05 F1 | 	add	fp, #28
176f4     A7 24 02 FB | 	rdlong	local04, fp
176f8     1C 4E 85 F1 | 	sub	fp, #28
176fc     12 27 02 F6 | 	mov	local05, local04
17700     0A 26 0E F2 | 	cmp	local05, #10 wz
17704     04 00 90 AD |  if_e	jmp	#LR__2171
17708                 | LR__2170
17708     01 1E 66 F5 | 	xor	local01, #1
1770c                 | LR__2171
1770c     3C 4E 05 F1 | 	add	fp, #60
17710     A7 1E 62 FC | 	wrlong	local01, fp
17714     3C 4E 85 F1 | 	sub	fp, #60
17718     00 1E 0E F2 | 	cmp	local01, #0 wz
1771c     0C 01 90 AD |  if_e	jmp	#LR__2173
17720     44 4E 05 F1 | 	add	fp, #68
17724     A7 26 02 FB | 	rdlong	local05, fp
17728     44 4E 85 F1 | 	sub	fp, #68
1772c     13 23 02 F6 | 	mov	local03, local05
17730     02 22 0E F2 | 	cmp	local03, #2 wz
17734     F4 00 90 5D |  if_ne	jmp	#LR__2173
17738     0C 4F 05 F1 | 	add	fp, #268
1773c     A7 28 02 FB | 	rdlong	local06, fp
17740     0C 4F 85 F1 | 	sub	fp, #268
17744     14 25 02 F6 | 	mov	local04, local06
17748     02 24 0E F2 | 	cmp	local04, #2 wz
1774c     DC 00 90 AD |  if_e	jmp	#LR__2173
17750     C0 4E 05 F1 | 	add	fp, #192
17754     A7 12 02 FB | 	rdlong	arg01, fp
17758     94 4E 85 F1 | 	sub	fp, #148
1775c     A7 14 02 FB | 	rdlong	arg02, fp
17760     14 4E 05 F1 | 	add	fp, #20
17764     A7 16 02 FB | 	rdlong	arg03, fp
17768     40 4E 85 F1 | 	sub	fp, #64
1776c     80 3F B0 FD | 	call	#__system__emitsign_0332
17770     14 4F 05 F1 | 	add	fp, #276
17774     A7 FA 61 FC | 	wrlong	result1, fp
17778     14 4F 85 F1 | 	sub	fp, #276
1777c     00 FA 55 F2 | 	cmps	result1, #0 wc
17780     14 4F 05 C1 |  if_b	add	fp, #276
17784     A7 FA 01 CB |  if_b	rdlong	result1, fp
17788     14 4F 85 C1 |  if_b	sub	fp, #276
1778c     6C 0B 90 CD |  if_b	jmp	#LR__2223
17790     C0 4E 05 F1 | 	add	fp, #192
17794     A7 1E 02 FB | 	rdlong	local01, fp
17798     54 4E 05 F1 | 	add	fp, #84
1779c     A7 26 02 FB | 	rdlong	local05, fp
177a0     13 23 02 F6 | 	mov	local03, local05
177a4     13 1F 02 F1 | 	add	local01, local05
177a8     54 4E 85 F1 | 	sub	fp, #84
177ac     A7 1E 62 FC | 	wrlong	local01, fp
177b0     58 4E 85 F1 | 	sub	fp, #88
177b4     A7 1E 0A FB | 	rdlong	local01, fp wz
177b8     68 4E 85 F1 | 	sub	fp, #104
177bc     60 00 90 AD |  if_e	jmp	#LR__2172
177c0     68 4E 05 F1 | 	add	fp, #104
177c4     A7 1E 02 FB | 	rdlong	local01, fp
177c8     AC 4E 05 F1 | 	add	fp, #172
177cc     A7 22 02 FB | 	rdlong	local03, fp
177d0     11 1F 82 F1 | 	sub	local01, local03
177d4     AC 4E 85 F1 | 	sub	fp, #172
177d8     A7 1E 62 FC | 	wrlong	local01, fp
177dc     68 4E 85 F1 | 	sub	fp, #104
177e0     00 1E 56 F2 | 	cmps	local01, #0 wc
177e4     68 4E 05 C1 |  if_b	add	fp, #104
177e8     A7 00 68 CC |  if_b	wrlong	#0, fp
177ec     68 4E 85 C1 |  if_b	sub	fp, #104
177f0     08 4E 05 F1 | 	add	fp, #8
177f4     A7 1E 02 FB | 	rdlong	local01, fp
177f8     E8 1E 06 F4 | 	bitl	local01, #232
177fc     A7 1E 62 FC | 	wrlong	local01, fp
17800     60 4E 05 F1 | 	add	fp, #96
17804     A7 26 02 FB | 	rdlong	local05, fp
17808     13 23 02 F6 | 	mov	local03, local05
1780c     08 22 66 F0 | 	shl	local03, #8
17810     11 1F 42 F5 | 	or	local01, local03
17814     60 4E 85 F1 | 	sub	fp, #96
17818     A7 1E 62 FC | 	wrlong	local01, fp
1781c     08 4E 85 F1 | 	sub	fp, #8
17820                 | LR__2172
17820     3C 4E 05 F1 | 	add	fp, #60
17824     A7 00 68 FC | 	wrlong	#0, fp
17828     3C 4E 85 F1 | 	sub	fp, #60
1782c                 | LR__2173
1782c     0C 4E 05 F1 | 	add	fp, #12
17830     A7 12 02 FB | 	rdlong	arg01, fp
17834     0C 4E 85 F1 | 	sub	fp, #12
17838     CC 1C B0 FD | 	call	#__system____builtin_ilogb
1783c     FF FF 3F FF 
17840     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
17844     50 00 90 5D |  if_ne	jmp	#LR__2175
17848     2C 4E 05 F1 | 	add	fp, #44
1784c     A7 1E 0A FB | 	rdlong	local01, fp wz
17850     2C 4E 85 F1 | 	sub	fp, #44
17854     24 00 90 AD |  if_e	jmp	#LR__2174
17858     C0 4E 05 F1 | 	add	fp, #192
1785c     A7 20 02 FB | 	rdlong	local02, fp
17860     10 23 02 F6 | 	mov	local03, local02
17864     01 22 06 F1 | 	add	local03, #1
17868     A7 22 62 FC | 	wrlong	local03, fp
1786c     94 4E 85 F1 | 	sub	fp, #148
17870     A7 24 02 FB | 	rdlong	local04, fp
17874     2C 4E 85 F1 | 	sub	fp, #44
17878     10 25 42 FC | 	wrbyte	local04, local02
1787c                 | LR__2174
1787c     C0 4E 05 F1 | 	add	fp, #192
17880     A7 12 02 FB | 	rdlong	arg01, fp
17884     C0 4E 85 F1 | 	sub	fp, #192
17888     29 01 00 FF 
1788c     DA 14 06 F6 | 	mov	arg02, ##@LR__4061
17890     18 EA BF FD | 	call	#__system____builtin_strcpy
17894     A4 08 90 FD | 	jmp	#LR__2211
17898                 | LR__2175
17898     0C 4E 05 F1 | 	add	fp, #12
1789c     A7 20 02 FB | 	rdlong	local02, fp
178a0     0C 4E 85 F1 | 	sub	fp, #12
178a4     10 13 02 F6 | 	mov	arg01, local02
178a8     5C 1C B0 FD | 	call	#__system____builtin_ilogb
178ac     00 00 40 FF 
178b0     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
178b4     50 00 90 5D |  if_ne	jmp	#LR__2177
178b8     2C 4E 05 F1 | 	add	fp, #44
178bc     A7 1E 0A FB | 	rdlong	local01, fp wz
178c0     2C 4E 85 F1 | 	sub	fp, #44
178c4     24 00 90 AD |  if_e	jmp	#LR__2176
178c8     C0 4E 05 F1 | 	add	fp, #192
178cc     A7 20 02 FB | 	rdlong	local02, fp
178d0     10 23 02 F6 | 	mov	local03, local02
178d4     01 22 06 F1 | 	add	local03, #1
178d8     A7 22 62 FC | 	wrlong	local03, fp
178dc     94 4E 85 F1 | 	sub	fp, #148
178e0     A7 24 02 FB | 	rdlong	local04, fp
178e4     2C 4E 85 F1 | 	sub	fp, #44
178e8     10 25 42 FC | 	wrbyte	local04, local02
178ec                 | LR__2176
178ec     C0 4E 05 F1 | 	add	fp, #192
178f0     A7 12 02 FB | 	rdlong	arg01, fp
178f4     C0 4E 85 F1 | 	sub	fp, #192
178f8     29 01 00 FF 
178fc     DE 14 06 F6 | 	mov	arg02, ##@LR__4062
17900     A8 E9 BF FD | 	call	#__system____builtin_strcpy
17904     34 08 90 FD | 	jmp	#LR__2211
17908                 | LR__2177
17908     10 4E 05 F1 | 	add	fp, #16
1790c     A7 1E 02 FB | 	rdlong	local01, fp
17910     10 4E 85 F1 | 	sub	fp, #16
17914     67 1E 0E F2 | 	cmp	local01, #103 wz
17918     10 4E 05 51 |  if_ne	add	fp, #16
1791c     A7 22 02 5B |  if_ne	rdlong	local03, fp
17920     10 4E 85 51 |  if_ne	sub	fp, #16
17924     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
17928     94 01 90 5D |  if_ne	jmp	#LR__2182
1792c     0C 4E 05 F1 | 	add	fp, #12
17930     A7 12 02 FB | 	rdlong	arg01, fp
17934     08 4E 05 F1 | 	add	fp, #8
17938     A7 14 02 F6 | 	mov	arg02, fp
1793c     0C 4E 05 F1 | 	add	fp, #12
17940     A7 16 02 F6 | 	mov	arg03, fp
17944     98 4E 05 F1 | 	add	fp, #152
17948     A7 18 02 FB | 	rdlong	arg04, fp
1794c     9C 4E 85 F1 | 	sub	fp, #156
17950     A7 1A 02 FB | 	rdlong	arg05, fp
17954     1C 4E 85 F1 | 	sub	fp, #28
17958     A0 3B B0 FD | 	call	#__system__disassemble_0330
1795c     10 4E 05 F1 | 	add	fp, #16
17960     A7 1E 02 FB | 	rdlong	local01, fp
17964     10 4E 85 F1 | 	sub	fp, #16
17968     23 1E 0E F2 | 	cmp	local01, #35 wz
1796c     A0 00 90 5D |  if_ne	jmp	#LR__2179
17970     20 4E 05 F1 | 	add	fp, #32
17974     A7 1E 02 FB | 	rdlong	local01, fp
17978     98 4E 05 F1 | 	add	fp, #152
1797c     A7 22 02 FB | 	rdlong	local03, fp
17980     B8 4E 85 F1 | 	sub	fp, #184
17984     11 1F 5A F2 | 	cmps	local01, local03 wcz
17988     24 4E 05 11 |  if_a	add	fp, #36
1798c     A7 02 68 1C |  if_a	wrlong	#1, fp
17990     24 4E 85 11 |  if_a	sub	fp, #36
17994     A4 01 90 1D |  if_a	jmp	#LR__2185
17998     20 4E 05 F1 | 	add	fp, #32
1799c     A7 1E 02 FB | 	rdlong	local01, fp
179a0     20 4E 85 F1 | 	sub	fp, #32
179a4     00 1E 56 F2 | 	cmps	local01, #0 wc
179a8     2C 00 90 3D |  if_ae	jmp	#LR__2178
179ac     B8 4E 05 F1 | 	add	fp, #184
179b0     A7 1E 02 FB | 	rdlong	local01, fp
179b4     0F 1F 62 F6 | 	neg	local01, local01
179b8     98 4E 85 F1 | 	sub	fp, #152
179bc     A7 22 02 FB | 	rdlong	local03, fp
179c0     20 4E 85 F1 | 	sub	fp, #32
179c4     0F 23 5A F2 | 	cmps	local03, local01 wcz
179c8     24 4E 05 E1 |  if_be	add	fp, #36
179cc     A7 02 68 EC |  if_be	wrlong	#1, fp
179d0     24 4E 85 E1 |  if_be	sub	fp, #36
179d4     64 01 90 FD | 	jmp	#LR__2185
179d8                 | LR__2178
179d8     20 4E 05 F1 | 	add	fp, #32
179dc     A7 1E 02 FB | 	rdlong	local01, fp
179e0     20 4E 85 F1 | 	sub	fp, #32
179e4     01 1E 56 F2 | 	cmps	local01, #1 wc
179e8     50 01 90 CD |  if_b	jmp	#LR__2185
179ec     B8 4E 05 F1 | 	add	fp, #184
179f0     A7 1E 02 FB | 	rdlong	local01, fp
179f4     98 4E 85 F1 | 	sub	fp, #152
179f8     A7 22 02 FB | 	rdlong	local03, fp
179fc     11 1F 82 F1 | 	sub	local01, local03
17a00     98 4E 05 F1 | 	add	fp, #152
17a04     A7 1E 62 FC | 	wrlong	local01, fp
17a08     B8 4E 85 F1 | 	sub	fp, #184
17a0c     2C 01 90 FD | 	jmp	#LR__2185
17a10                 | LR__2179
17a10     00 1E 06 F6 | 	mov	local01, #0
17a14     08 4E 05 F1 | 	add	fp, #8
17a18     A7 20 02 FB | 	rdlong	local02, fp
17a1c     1C 20 46 F0 | 	shr	local02, #28
17a20     01 20 0E F5 | 	and	local02, #1 wz
17a24     01 1E 06 A6 |  if_e	mov	local01, #1
17a28     2C 4E 05 F1 | 	add	fp, #44
17a2c     A7 1E 62 FC | 	wrlong	local01, fp
17a30     14 4E 85 F1 | 	sub	fp, #20
17a34     A7 1E 02 FB | 	rdlong	local01, fp
17a38     98 4E 05 F1 | 	add	fp, #152
17a3c     A7 22 02 FB | 	rdlong	local03, fp
17a40     B8 4E 85 F1 | 	sub	fp, #184
17a44     11 1F 52 F2 | 	cmps	local01, local03 wc
17a48     18 00 90 3D |  if_ae	jmp	#LR__2180
17a4c     20 4E 05 F1 | 	add	fp, #32
17a50     A7 24 02 FB | 	rdlong	local04, fp
17a54     20 4E 85 F1 | 	sub	fp, #32
17a58     FF FF 7F FF 
17a5c     FC 25 56 F2 | 	cmps	local04, ##-4 wc
17a60     10 00 90 3D |  if_ae	jmp	#LR__2181
17a64                 | LR__2180
17a64     24 4E 05 F1 | 	add	fp, #36
17a68     A7 02 68 FC | 	wrlong	#1, fp
17a6c     24 4E 85 F1 | 	sub	fp, #36
17a70     C8 00 90 FD | 	jmp	#LR__2185
17a74                 | LR__2181
17a74     B8 4E 05 F1 | 	add	fp, #184
17a78     A7 24 02 FB | 	rdlong	local04, fp
17a7c     98 4E 85 F1 | 	sub	fp, #152
17a80     A7 22 02 FB | 	rdlong	local03, fp
17a84     11 25 82 F1 | 	sub	local04, local03
17a88     98 4E 05 F1 | 	add	fp, #152
17a8c     A7 24 62 FC | 	wrlong	local04, fp
17a90     AC 4E 85 F1 | 	sub	fp, #172
17a94     A7 12 02 FB | 	rdlong	arg01, fp
17a98     08 4E 05 F1 | 	add	fp, #8
17a9c     A7 14 02 F6 | 	mov	arg02, fp
17aa0     0C 4E 05 F1 | 	add	fp, #12
17aa4     A7 16 02 F6 | 	mov	arg03, fp
17aa8     12 19 62 F6 | 	neg	arg04, local04
17aac     04 4E 85 F1 | 	sub	fp, #4
17ab0     A7 1A 02 FB | 	rdlong	arg05, fp
17ab4     1C 4E 85 F1 | 	sub	fp, #28
17ab8     40 3A B0 FD | 	call	#__system__disassemble_0330
17abc     7C 00 90 FD | 	jmp	#LR__2185
17ac0                 | LR__2182
17ac0     24 4E 05 F1 | 	add	fp, #36
17ac4     A7 1E 0A FB | 	rdlong	local01, fp wz
17ac8     24 4E 85 F1 | 	sub	fp, #36
17acc     34 00 90 AD |  if_e	jmp	#LR__2183
17ad0     0C 4E 05 F1 | 	add	fp, #12
17ad4     A7 12 02 FB | 	rdlong	arg01, fp
17ad8     08 4E 05 F1 | 	add	fp, #8
17adc     A7 14 02 F6 | 	mov	arg02, fp
17ae0     0C 4E 05 F1 | 	add	fp, #12
17ae4     A7 16 02 F6 | 	mov	arg03, fp
17ae8     98 4E 05 F1 | 	add	fp, #152
17aec     A7 18 02 FB | 	rdlong	arg04, fp
17af0     9C 4E 85 F1 | 	sub	fp, #156
17af4     A7 1A 02 FB | 	rdlong	arg05, fp
17af8     1C 4E 85 F1 | 	sub	fp, #28
17afc     FC 39 B0 FD | 	call	#__system__disassemble_0330
17b00     38 00 90 FD | 	jmp	#LR__2184
17b04                 | LR__2183
17b04     0C 4E 05 F1 | 	add	fp, #12
17b08     A7 12 02 FB | 	rdlong	arg01, fp
17b0c     08 4E 05 F1 | 	add	fp, #8
17b10     A7 14 02 F6 | 	mov	arg02, fp
17b14     0C 4E 05 F1 | 	add	fp, #12
17b18     A7 16 02 F6 | 	mov	arg03, fp
17b1c     98 4E 05 F1 | 	add	fp, #152
17b20     A7 24 02 FB | 	rdlong	local04, fp
17b24     01 24 06 F1 | 	add	local04, #1
17b28     12 19 62 F6 | 	neg	arg04, local04
17b2c     9C 4E 85 F1 | 	sub	fp, #156
17b30     A7 1A 02 FB | 	rdlong	arg05, fp
17b34     1C 4E 85 F1 | 	sub	fp, #28
17b38     C0 39 B0 FD | 	call	#__system__disassemble_0330
17b3c                 | LR__2184
17b3c                 | LR__2185
17b3c     1C 4E 05 F1 | 	add	fp, #28
17b40     A7 1E 02 FB | 	rdlong	local01, fp
17b44     1C 4E 85 F1 | 	sub	fp, #28
17b48     02 1E 0E F2 | 	cmp	local01, #2 wz
17b4c     4C 00 90 5D |  if_ne	jmp	#LR__2188
17b50     1C 4E 05 F1 | 	add	fp, #28
17b54     A7 20 68 FC | 	wrlong	#16, fp
17b58     1C 4E 85 F1 | 	sub	fp, #28
17b5c                 | LR__2186
17b5c     14 4E 05 F1 | 	add	fp, #20
17b60     A7 1E 0A FB | 	rdlong	local01, fp wz
17b64     14 4E 85 F1 | 	sub	fp, #20
17b68     30 00 90 AD |  if_e	jmp	#LR__2187
17b6c     14 4E 05 F1 | 	add	fp, #20
17b70     A7 22 02 FB | 	rdlong	local03, fp
17b74     14 4E 85 F1 | 	sub	fp, #20
17b78     00 80 00 FF 
17b7c     00 22 16 F2 | 	cmp	local03, ##16777216 wc
17b80     18 00 90 3D |  if_ae	jmp	#LR__2187
17b84     14 4E 05 F1 | 	add	fp, #20
17b88     A7 1E 02 FB | 	rdlong	local01, fp
17b8c     01 1E 66 F0 | 	shl	local01, #1
17b90     A7 1E 62 FC | 	wrlong	local01, fp
17b94     14 4E 85 F1 | 	sub	fp, #20
17b98     C0 FF 9F FD | 	jmp	#LR__2186
17b9c                 | LR__2187
17b9c                 | LR__2188
17b9c     70 4E 05 F1 | 	add	fp, #112
17ba0     A7 12 02 F6 | 	mov	arg01, fp
17ba4     5C 4E 85 F1 | 	sub	fp, #92
17ba8     A7 14 02 FB | 	rdlong	arg02, fp
17bac     08 4E 05 F1 | 	add	fp, #8
17bb0     A7 16 02 FB | 	rdlong	arg03, fp
17bb4     A0 4E 05 F1 | 	add	fp, #160
17bb8     A7 1A 02 FB | 	rdlong	arg05, fp
17bbc     BC 4E 85 F1 | 	sub	fp, #188
17bc0     01 18 06 F6 | 	mov	arg04, #1
17bc4     C0 38 B0 FD | 	call	#__system___uitoa
17bc8     58 4E 05 F1 | 	add	fp, #88
17bcc     A7 FA 61 FC | 	wrlong	result1, fp
17bd0     38 4E 85 F1 | 	sub	fp, #56
17bd4     A7 1E 02 FB | 	rdlong	local01, fp
17bd8     20 4E 85 F1 | 	sub	fp, #32
17bdc     00 1E 56 F2 | 	cmps	local01, #0 wc
17be0     50 00 90 3D |  if_ae	jmp	#LR__2189
17be4     60 4E 05 F1 | 	add	fp, #96
17be8     A7 5A 68 FC | 	wrlong	#45, fp
17bec     50 4E 05 F1 | 	add	fp, #80
17bf0     A7 12 02 F6 | 	mov	arg01, fp
17bf4     90 4E 85 F1 | 	sub	fp, #144
17bf8     A7 22 02 FB | 	rdlong	local03, fp
17bfc     11 15 62 F6 | 	neg	arg02, local03
17c00     18 4E 05 F1 | 	add	fp, #24
17c04     A7 18 02 FB | 	rdlong	arg04, fp
17c08     84 4E 05 F1 | 	add	fp, #132
17c0c     A7 28 02 FB | 	rdlong	local06, fp
17c10     BC 4E 85 F1 | 	sub	fp, #188
17c14     14 25 02 F6 | 	mov	local04, local06
17c18     0A 16 06 F6 | 	mov	arg03, #10
17c1c     12 1B 02 F6 | 	mov	arg05, local04
17c20     64 38 B0 FD | 	call	#__system___uitoa
17c24     5C 4E 05 F1 | 	add	fp, #92
17c28     A7 FA 61 FC | 	wrlong	result1, fp
17c2c     5C 4E 85 F1 | 	sub	fp, #92
17c30     48 00 90 FD | 	jmp	#LR__2190
17c34                 | LR__2189
17c34     60 4E 05 F1 | 	add	fp, #96
17c38     A7 56 68 FC | 	wrlong	#43, fp
17c3c     50 4E 05 F1 | 	add	fp, #80
17c40     A7 12 02 F6 | 	mov	arg01, fp
17c44     90 4E 85 F1 | 	sub	fp, #144
17c48     A7 14 02 FB | 	rdlong	arg02, fp
17c4c     18 4E 05 F1 | 	add	fp, #24
17c50     A7 18 02 FB | 	rdlong	arg04, fp
17c54     84 4E 05 F1 | 	add	fp, #132
17c58     A7 28 02 FB | 	rdlong	local06, fp
17c5c     BC 4E 85 F1 | 	sub	fp, #188
17c60     14 25 02 F6 | 	mov	local04, local06
17c64     0A 16 06 F6 | 	mov	arg03, #10
17c68     12 1B 02 F6 | 	mov	arg05, local04
17c6c     18 38 B0 FD | 	call	#__system___uitoa
17c70     5C 4E 05 F1 | 	add	fp, #92
17c74     A7 FA 61 FC | 	wrlong	result1, fp
17c78     5C 4E 85 F1 | 	sub	fp, #92
17c7c                 | LR__2190
17c7c     24 4E 05 F1 | 	add	fp, #36
17c80     A7 1E 0A FB | 	rdlong	local01, fp wz
17c84     24 4E 85 F1 | 	sub	fp, #36
17c88     2C 00 90 AD |  if_e	jmp	#LR__2191
17c8c     50 4E 05 F1 | 	add	fp, #80
17c90     A7 00 68 FC | 	wrlong	#0, fp
17c94     04 4E 85 F1 | 	sub	fp, #4
17c98     A7 00 68 FC | 	wrlong	#0, fp
17c9c     6C 4E 05 F1 | 	add	fp, #108
17ca0     A7 1E 02 FB | 	rdlong	local01, fp
17ca4     01 1E 06 F1 | 	add	local01, #1
17ca8     64 4E 85 F1 | 	sub	fp, #100
17cac     A7 1E 62 FC | 	wrlong	local01, fp
17cb0     54 4E 85 F1 | 	sub	fp, #84
17cb4     88 00 90 FD | 	jmp	#LR__2194
17cb8                 | LR__2191
17cb8     20 4E 05 F1 | 	add	fp, #32
17cbc     A7 1E 02 FB | 	rdlong	local01, fp
17cc0     20 4E 85 F1 | 	sub	fp, #32
17cc4     00 1E 56 F2 | 	cmps	local01, #0 wc
17cc8     40 00 90 3D |  if_ae	jmp	#LR__2192
17ccc     20 4E 05 F1 | 	add	fp, #32
17cd0     A7 20 02 FB | 	rdlong	local02, fp
17cd4     30 4E 05 F1 | 	add	fp, #48
17cd8     A7 20 62 FC | 	wrlong	local02, fp
17cdc     04 4E 85 F1 | 	sub	fp, #4
17ce0     A7 20 62 FC | 	wrlong	local02, fp
17ce4     2C 4E 85 F1 | 	sub	fp, #44
17ce8     A7 1E 02 FB | 	rdlong	local01, fp
17cec     98 4E 05 F1 | 	add	fp, #152
17cf0     A7 22 02 FB | 	rdlong	local03, fp
17cf4     11 1F 02 F1 | 	add	local01, local03
17cf8     01 1E 06 F1 | 	add	local01, #1
17cfc     64 4E 85 F1 | 	sub	fp, #100
17d00     A7 1E 62 FC | 	wrlong	local01, fp
17d04     54 4E 85 F1 | 	sub	fp, #84
17d08     34 00 90 FD | 	jmp	#LR__2193
17d0c                 | LR__2192
17d0c     4C 4E 05 F1 | 	add	fp, #76
17d10     A7 00 68 FC | 	wrlong	#0, fp
17d14     2C 4E 85 F1 | 	sub	fp, #44
17d18     A7 1E 02 FB | 	rdlong	local01, fp
17d1c     30 4E 05 F1 | 	add	fp, #48
17d20     A7 1E 62 FC | 	wrlong	local01, fp
17d24     68 4E 05 F1 | 	add	fp, #104
17d28     A7 22 02 FB | 	rdlong	local03, fp
17d2c     11 1F 02 F1 | 	add	local01, local03
17d30     01 1E 06 F1 | 	add	local01, #1
17d34     64 4E 85 F1 | 	sub	fp, #100
17d38     A7 1E 62 FC | 	wrlong	local01, fp
17d3c     54 4E 85 F1 | 	sub	fp, #84
17d40                 | LR__2193
17d40                 | LR__2194
17d40     54 4E 05 F1 | 	add	fp, #84
17d44     A7 1E 02 FB | 	rdlong	local01, fp
17d48     08 4E 85 F1 | 	sub	fp, #8
17d4c     A7 22 02 FB | 	rdlong	local03, fp
17d50     11 1F 82 F1 | 	sub	local01, local03
17d54     01 1E 06 F1 | 	add	local01, #1
17d58     24 4E 85 F1 | 	sub	fp, #36
17d5c     A7 1E 62 FC | 	wrlong	local01, fp
17d60     04 4E 05 F1 | 	add	fp, #4
17d64     A7 1E 0A FB | 	rdlong	local01, fp wz
17d68     2C 4E 85 F1 | 	sub	fp, #44
17d6c     28 4E 05 51 |  if_ne	add	fp, #40
17d70     A7 22 02 5B |  if_ne	rdlong	local03, fp
17d74     01 22 06 51 |  if_ne	add	local03, #1
17d78     A7 22 62 5C |  if_ne	wrlong	local03, fp
17d7c     28 4E 85 51 |  if_ne	sub	fp, #40
17d80     1C 4E 05 F1 | 	add	fp, #28
17d84     A7 1E 02 FB | 	rdlong	local01, fp
17d88     1C 4E 85 F1 | 	sub	fp, #28
17d8c     10 1E 0E F2 | 	cmp	local01, #16 wz
17d90     28 4E 05 A1 |  if_e	add	fp, #40
17d94     A7 1E 02 AB |  if_e	rdlong	local01, fp
17d98     02 1E 06 A1 |  if_e	add	local01, #2
17d9c     A7 1E 62 AC |  if_e	wrlong	local01, fp
17da0     28 4E 85 A1 |  if_e	sub	fp, #40
17da4     24 4E 05 F1 | 	add	fp, #36
17da8     A7 1E 0A FB | 	rdlong	local01, fp wz
17dac     24 4E 85 F1 | 	sub	fp, #36
17db0     28 00 90 AD |  if_e	jmp	#LR__2195
17db4     28 4E 05 F1 | 	add	fp, #40
17db8     A7 1E 02 FB | 	rdlong	local01, fp
17dbc     02 22 06 F6 | 	mov	local03, #2
17dc0     34 4E 05 F1 | 	add	fp, #52
17dc4     A7 26 02 FB | 	rdlong	local05, fp
17dc8     13 23 02 F1 | 	add	local03, local05
17dcc     11 1F 02 F1 | 	add	local01, local03
17dd0     34 4E 85 F1 | 	sub	fp, #52
17dd4     A7 1E 62 FC | 	wrlong	local01, fp
17dd8     28 4E 85 F1 | 	sub	fp, #40
17ddc                 | LR__2195
17ddc     28 4E 05 F1 | 	add	fp, #40
17de0     A7 1E 02 FB | 	rdlong	local01, fp
17de4     28 4E 85 F1 | 	sub	fp, #40
17de8     41 1E 56 F2 | 	cmps	local01, #65 wc
17dec     01 FA 65 36 |  if_ae	neg	result1, #1
17df0     08 05 90 3D |  if_ae	jmp	#LR__2223
17df4     3C 4E 05 F1 | 	add	fp, #60
17df8     A7 1E 0A FB | 	rdlong	local01, fp wz
17dfc     3C 4E 85 F1 | 	sub	fp, #60
17e00     60 00 90 AD |  if_e	jmp	#LR__2196
17e04     C0 4E 05 F1 | 	add	fp, #192
17e08     A7 12 02 FB | 	rdlong	arg01, fp
17e0c     94 4E 85 F1 | 	sub	fp, #148
17e10     A7 14 02 FB | 	rdlong	arg02, fp
17e14     14 4E 05 F1 | 	add	fp, #20
17e18     A7 16 02 FB | 	rdlong	arg03, fp
17e1c     40 4E 85 F1 | 	sub	fp, #64
17e20     CC 38 B0 FD | 	call	#__system__emitsign_0332
17e24     18 4F 05 F1 | 	add	fp, #280
17e28     A7 FA 61 FC | 	wrlong	result1, fp
17e2c     18 4F 85 F1 | 	sub	fp, #280
17e30     00 FA 55 F2 | 	cmps	result1, #0 wc
17e34     18 4F 05 C1 |  if_b	add	fp, #280
17e38     A7 FA 01 CB |  if_b	rdlong	result1, fp
17e3c     18 4F 85 C1 |  if_b	sub	fp, #280
17e40     B8 04 90 CD |  if_b	jmp	#LR__2223
17e44     C0 4E 05 F1 | 	add	fp, #192
17e48     A7 1E 02 FB | 	rdlong	local01, fp
17e4c     58 4E 05 F1 | 	add	fp, #88
17e50     A7 22 02 FB | 	rdlong	local03, fp
17e54     11 1F 02 F1 | 	add	local01, local03
17e58     58 4E 85 F1 | 	sub	fp, #88
17e5c     A7 1E 62 FC | 	wrlong	local01, fp
17e60     C0 4E 85 F1 | 	sub	fp, #192
17e64                 | LR__2196
17e64     4C 4E 05 F1 | 	add	fp, #76
17e68     A7 1E 02 FB | 	rdlong	local01, fp
17e6c     34 4E 85 F1 | 	sub	fp, #52
17e70     A7 1E 62 FC | 	wrlong	local01, fp
17e74     18 4E 85 F1 | 	sub	fp, #24
17e78     97 9E 48 FB | 	callpa	#(@LR__2202-@LR__2197)>>2,fcache_load_ptr_
17e7c                 | LR__2197
17e7c     18 4E 05 F1 | 	add	fp, #24
17e80     A7 20 02 FB | 	rdlong	local02, fp
17e84     3C 4E 05 F1 | 	add	fp, #60
17e88     A7 26 02 FB | 	rdlong	local05, fp
17e8c     54 4E 85 F1 | 	sub	fp, #84
17e90     13 21 52 F2 | 	cmps	local02, local05 wc
17e94     20 01 90 3D |  if_ae	jmp	#LR__2203
17e98     18 4E 05 F1 | 	add	fp, #24
17e9c     A7 28 02 FB | 	rdlong	local06, fp
17ea0     18 4E 85 F1 | 	sub	fp, #24
17ea4     00 28 56 F2 | 	cmps	local06, #0 wc
17ea8     58 00 90 CD |  if_b	jmp	#LR__2198
17eac     18 4E 05 F1 | 	add	fp, #24
17eb0     A7 28 02 FB | 	rdlong	local06, fp
17eb4     40 4E 05 F1 | 	add	fp, #64
17eb8     A7 2A 02 FB | 	rdlong	local07, fp
17ebc     58 4E 85 F1 | 	sub	fp, #88
17ec0     15 29 52 F2 | 	cmps	local06, local07 wc
17ec4     3C 00 90 3D |  if_ae	jmp	#LR__2198
17ec8     C0 4E 05 F1 | 	add	fp, #192
17ecc     A7 2C 02 FB | 	rdlong	local08, fp
17ed0     16 2B 02 F6 | 	mov	local07, local08
17ed4     01 2A 06 F1 | 	add	local07, #1
17ed8     A7 2A 62 FC | 	wrlong	local07, fp
17edc     A8 4E 85 F1 | 	sub	fp, #168
17ee0     A7 2A 02 FB | 	rdlong	local07, fp
17ee4     15 2F 02 F6 | 	mov	local09, local07
17ee8     58 4E 05 F1 | 	add	fp, #88
17eec     A7 30 02 F6 | 	mov	local10, fp
17ef0     A7 2E 02 F1 | 	add	local09, fp
17ef4     17 33 C2 FA | 	rdbyte	local11, local09
17ef8     16 33 42 FC | 	wrbyte	local11, local08
17efc     70 4E 85 F1 | 	sub	fp, #112
17f00     20 00 90 FD | 	jmp	#LR__2199
17f04                 | LR__2198
17f04     C0 4E 05 F1 | 	add	fp, #192
17f08     A7 2C 02 FB | 	rdlong	local08, fp
17f0c     16 2F 02 F6 | 	mov	local09, local08
17f10     01 2E 06 F1 | 	add	local09, #1
17f14     A7 2E 62 FC | 	wrlong	local09, fp
17f18     C0 4E 85 F1 | 	sub	fp, #192
17f1c     30 2E 06 F6 | 	mov	local09, #48
17f20     16 61 48 FC | 	wrbyte	#48, local08
17f24                 | LR__2199
17f24     18 4E 05 F1 | 	add	fp, #24
17f28     A7 28 02 FB | 	rdlong	local06, fp
17f2c     38 4E 05 F1 | 	add	fp, #56
17f30     A7 34 02 FB | 	rdlong	local12, fp
17f34     50 4E 85 F1 | 	sub	fp, #80
17f38     1A 29 0A F2 | 	cmp	local06, local12 wz
17f3c     5C 00 90 5D |  if_ne	jmp	#LR__2201
17f40     10 4F 05 F1 | 	add	fp, #272
17f44     A7 2A 02 FB | 	rdlong	local07, fp
17f48     10 4F 85 F1 | 	sub	fp, #272
17f4c     15 2F 0A F6 | 	mov	local09, local07 wz
17f50     28 00 90 5D |  if_ne	jmp	#LR__2200
17f54     54 4E 05 F1 | 	add	fp, #84
17f58     A7 32 02 FB | 	rdlong	local11, fp
17f5c     19 31 02 F6 | 	mov	local10, local11
17f60     01 30 86 F1 | 	sub	local10, #1
17f64     3C 4E 85 F1 | 	sub	fp, #60
17f68     A7 36 02 FB | 	rdlong	local13, fp
17f6c     18 4E 85 F1 | 	sub	fp, #24
17f70     1B 39 02 F6 | 	mov	local14, local13
17f74     18 39 52 F2 | 	cmps	local14, local10 wc
17f78     20 00 90 3D |  if_ae	jmp	#LR__2201
17f7c                 | LR__2200
17f7c     C0 4E 05 F1 | 	add	fp, #192
17f80     A7 2C 02 FB | 	rdlong	local08, fp
17f84     16 35 02 F6 | 	mov	local12, local08
17f88     01 34 06 F1 | 	add	local12, #1
17f8c     A7 34 62 FC | 	wrlong	local12, fp
17f90     C0 4E 85 F1 | 	sub	fp, #192
17f94     2E 2E 06 F6 | 	mov	local09, #46
17f98     16 5D 48 FC | 	wrbyte	#46, local08
17f9c                 | LR__2201
17f9c     18 4E 05 F1 | 	add	fp, #24
17fa0     A7 3A 02 FB | 	rdlong	local15, fp
17fa4     1D 35 02 F6 | 	mov	local12, local15
17fa8     01 34 06 F1 | 	add	local12, #1
17fac     A7 34 62 FC | 	wrlong	local12, fp
17fb0     18 4E 85 F1 | 	sub	fp, #24
17fb4     C4 FE 9F FD | 	jmp	#LR__2197
17fb8                 | LR__2202
17fb8                 | LR__2203
17fb8     34 4E 05 F1 | 	add	fp, #52
17fbc     A7 1E 0A FB | 	rdlong	local01, fp wz
17fc0     34 4E 85 F1 | 	sub	fp, #52
17fc4     A0 00 90 AD |  if_e	jmp	#LR__2207
17fc8     C0 4E 05 F1 | 	add	fp, #192
17fcc     A7 1E 02 FB | 	rdlong	local01, fp
17fd0     01 1E 86 F1 | 	sub	local01, #1
17fd4     A7 1E 62 FC | 	wrlong	local01, fp
17fd8     C0 4E 85 F1 | 	sub	fp, #192
17fdc     97 26 48 FB | 	callpa	#(@LR__2205-@LR__2204)>>2,fcache_load_ptr_
17fe0                 | LR__2204
17fe0     C0 4E 05 F1 | 	add	fp, #192
17fe4     A7 1E 02 FB | 	rdlong	local01, fp
17fe8     04 4E 05 F1 | 	add	fp, #4
17fec     A7 22 02 FB | 	rdlong	local03, fp
17ff0     C4 4E 85 F1 | 	sub	fp, #196
17ff4     11 1F 5A F2 | 	cmps	local01, local03 wcz
17ff8     30 00 90 ED |  if_be	jmp	#LR__2206
17ffc     C0 4E 05 F1 | 	add	fp, #192
18000     A7 28 02 FB | 	rdlong	local06, fp
18004     C0 4E 85 F1 | 	sub	fp, #192
18008     14 25 C2 FA | 	rdbyte	local04, local06
1800c     30 24 0E F2 | 	cmp	local04, #48 wz
18010     18 00 90 5D |  if_ne	jmp	#LR__2206
18014     C0 4E 05 F1 | 	add	fp, #192
18018     A7 1E 02 FB | 	rdlong	local01, fp
1801c     01 1E 86 F1 | 	sub	local01, #1
18020     A7 1E 62 FC | 	wrlong	local01, fp
18024     C0 4E 85 F1 | 	sub	fp, #192
18028     B4 FF 9F FD | 	jmp	#LR__2204
1802c                 | LR__2205
1802c                 | LR__2206
1802c     C0 4E 05 F1 | 	add	fp, #192
18030     A7 20 02 FB | 	rdlong	local02, fp
18034     C0 4E 85 F1 | 	sub	fp, #192
18038     10 1F C2 FA | 	rdbyte	local01, local02
1803c     2E 1E 0E F2 | 	cmp	local01, #46 wz
18040     C0 4E 05 A1 |  if_e	add	fp, #192
18044     A7 1E 02 AB |  if_e	rdlong	local01, fp
18048     01 1E 86 A1 |  if_e	sub	local01, #1
1804c     A7 1E 62 AC |  if_e	wrlong	local01, fp
18050     C0 4E 85 A1 |  if_e	sub	fp, #192
18054     C0 4E 05 F1 | 	add	fp, #192
18058     A7 22 02 FB | 	rdlong	local03, fp
1805c     01 22 06 F1 | 	add	local03, #1
18060     A7 22 62 FC | 	wrlong	local03, fp
18064     C0 4E 85 F1 | 	sub	fp, #192
18068                 | LR__2207
18068     24 4E 05 F1 | 	add	fp, #36
1806c     A7 1E 0A FB | 	rdlong	local01, fp wz
18070     24 4E 85 F1 | 	sub	fp, #36
18074     B4 00 90 AD |  if_e	jmp	#LR__2210
18078     C0 4E 05 F1 | 	add	fp, #192
1807c     A7 20 02 FB | 	rdlong	local02, fp
18080     10 23 02 F6 | 	mov	local03, local02
18084     01 22 06 F1 | 	add	local03, #1
18088     A7 22 62 FC | 	wrlong	local03, fp
1808c     90 4E 85 F1 | 	sub	fp, #144
18090     A7 24 02 FB | 	rdlong	local04, fp
18094     10 25 42 FC | 	wrbyte	local04, local02
18098     90 4E 05 F1 | 	add	fp, #144
1809c     A7 20 02 FB | 	rdlong	local02, fp
180a0     10 23 02 F6 | 	mov	local03, local02
180a4     01 22 06 F1 | 	add	local03, #1
180a8     A7 22 62 FC | 	wrlong	local03, fp
180ac     60 4E 85 F1 | 	sub	fp, #96
180b0     A7 24 02 FB | 	rdlong	local04, fp
180b4     10 25 42 FC | 	wrbyte	local04, local02
180b8     48 4E 85 F1 | 	sub	fp, #72
180bc     A7 00 68 FC | 	wrlong	#0, fp
180c0     18 4E 85 F1 | 	sub	fp, #24
180c4                 | LR__2208
180c4     18 4E 05 F1 | 	add	fp, #24
180c8     A7 20 02 FB | 	rdlong	local02, fp
180cc     44 4E 05 F1 | 	add	fp, #68
180d0     A7 26 02 FB | 	rdlong	local05, fp
180d4     5C 4E 85 F1 | 	sub	fp, #92
180d8     13 21 52 F2 | 	cmps	local02, local05 wc
180dc     4C 00 90 3D |  if_ae	jmp	#LR__2209
180e0     C0 4E 05 F1 | 	add	fp, #192
180e4     A7 2C 02 FB | 	rdlong	local08, fp
180e8     16 35 02 F6 | 	mov	local12, local08
180ec     01 34 06 F1 | 	add	local12, #1
180f0     A7 34 62 FC | 	wrlong	local12, fp
180f4     A8 4E 85 F1 | 	sub	fp, #168
180f8     A7 2A 02 FB | 	rdlong	local07, fp
180fc     15 2F 02 F6 | 	mov	local09, local07
18100     98 4E 05 F1 | 	add	fp, #152
18104     A7 30 02 F6 | 	mov	local10, fp
18108     A7 2E 02 F1 | 	add	local09, fp
1810c     17 33 C2 FA | 	rdbyte	local11, local09
18110     16 33 42 FC | 	wrbyte	local11, local08
18114     98 4E 85 F1 | 	sub	fp, #152
18118     A7 34 02 FB | 	rdlong	local12, fp
1811c     01 34 06 F1 | 	add	local12, #1
18120     A7 34 62 FC | 	wrlong	local12, fp
18124     18 4E 85 F1 | 	sub	fp, #24
18128     98 FF 9F FD | 	jmp	#LR__2208
1812c                 | LR__2209
1812c                 | LR__2210
1812c     C0 4E 05 F1 | 	add	fp, #192
18130     A7 1E 02 FB | 	rdlong	local01, fp
18134     C0 4E 85 F1 | 	sub	fp, #192
18138     0F 01 48 FC | 	wrbyte	#0, local01
1813c                 | LR__2211
1813c     6C 4E 05 F1 | 	add	fp, #108
18140     A7 1E 0A FB | 	rdlong	local01, fp wz
18144     6C 4E 85 F1 | 	sub	fp, #108
18148     90 01 90 AD |  if_e	jmp	#LR__2222
1814c     48 4E 05 F1 | 	add	fp, #72
18150     A7 22 0A FB | 	rdlong	local03, fp wz
18154     48 4E 85 F1 | 	sub	fp, #72
18158     80 01 90 AD |  if_e	jmp	#LR__2222
1815c     C4 4E 05 F1 | 	add	fp, #196
18160     A7 12 02 FB | 	rdlong	arg01, fp
18164     C4 4E 85 F1 | 	sub	fp, #196
18168     09 3D 02 F6 | 	mov	local16, arg01
1816c     97 06 48 FB | 	callpa	#(@LR__2213-@LR__2212)>>2,fcache_load_ptr_
18170                 | LR__2212
18170     1E FB C9 FA | 	rdbyte	result1, local16 wz
18174     01 3C 06 51 |  if_ne	add	local16, #1
18178     F4 FF 9F 5D |  if_ne	jmp	#LR__2212
1817c                 | LR__2213
1817c     09 3D 82 F1 | 	sub	local16, arg01
18180     1E 25 02 F6 | 	mov	local04, local16
18184     6C 4E 05 F1 | 	add	fp, #108
18188     A7 28 02 FB | 	rdlong	local06, fp
1818c     6C 4E 85 F1 | 	sub	fp, #108
18190     14 25 5A F2 | 	cmps	local04, local06 wcz
18194     44 01 90 ED |  if_be	jmp	#LR__2222
18198     C4 4E 05 F1 | 	add	fp, #196
1819c     A7 1E 02 FB | 	rdlong	local01, fp
181a0     5C 4E 05 F1 | 	add	fp, #92
181a4     A7 1E 62 FC | 	wrlong	local01, fp
181a8     FC 4E 85 F1 | 	sub	fp, #252
181ac     A7 1E 0A FB | 	rdlong	local01, fp wz
181b0     24 4E 85 F1 | 	sub	fp, #36
181b4     20 00 90 AD |  if_e	jmp	#LR__2214
181b8     B8 4E 05 F1 | 	add	fp, #184
181bc     A7 00 68 FC | 	wrlong	#0, fp
181c0     4C 4E 85 F1 | 	sub	fp, #76
181c4     A7 1E 02 FB | 	rdlong	local01, fp
181c8     B0 4E 05 F1 | 	add	fp, #176
181cc     A7 1E 62 FC | 	wrlong	local01, fp
181d0     1C 4F 85 F1 | 	sub	fp, #284
181d4     24 00 90 FD | 	jmp	#LR__2215
181d8                 | LR__2214
181d8     6C 4E 05 F1 | 	add	fp, #108
181dc     A7 1E 02 FB | 	rdlong	local01, fp
181e0     01 1E 86 F1 | 	sub	local01, #1
181e4     4C 4E 05 F1 | 	add	fp, #76
181e8     A7 22 02 FB | 	rdlong	local03, fp
181ec     11 1F 82 F1 | 	sub	local01, local03
181f0     64 4E 05 F1 | 	add	fp, #100
181f4     A7 1E 62 FC | 	wrlong	local01, fp
181f8     1C 4F 85 F1 | 	sub	fp, #284
181fc                 | LR__2215
181fc     97 20 48 FB | 	callpa	#(@LR__2217-@LR__2216)>>2,fcache_load_ptr_
18200                 | LR__2216
18200     1C 4F 05 F1 | 	add	fp, #284
18204     A7 1E 0A FB | 	rdlong	local01, fp wz
18208     1C 4F 85 F1 | 	sub	fp, #284
1820c     30 00 90 AD |  if_e	jmp	#LR__2218
18210     20 4F 05 F1 | 	add	fp, #288
18214     A7 20 02 FB | 	rdlong	local02, fp
18218     10 23 02 F6 | 	mov	local03, local02
1821c     01 22 06 F1 | 	add	local03, #1
18220     A7 22 62 FC | 	wrlong	local03, fp
18224     10 55 48 FC | 	wrbyte	#42, local02
18228     04 4E 85 F1 | 	sub	fp, #4
1822c     A7 1E 02 FB | 	rdlong	local01, fp
18230     01 1E 86 F1 | 	sub	local01, #1
18234     A7 1E 62 FC | 	wrlong	local01, fp
18238     1C 4F 85 F1 | 	sub	fp, #284
1823c     C0 FF 9F FD | 	jmp	#LR__2216
18240                 | LR__2217
18240                 | LR__2218
18240     B8 4E 05 F1 | 	add	fp, #184
18244     A7 1E 0A FB | 	rdlong	local01, fp wz
18248     B8 4E 85 F1 | 	sub	fp, #184
1824c     70 00 90 AD |  if_e	jmp	#LR__2221
18250     20 4F 05 F1 | 	add	fp, #288
18254     A7 20 02 FB | 	rdlong	local02, fp
18258     10 23 02 F6 | 	mov	local03, local02
1825c     01 22 06 F1 | 	add	local03, #1
18260     A7 22 62 FC | 	wrlong	local03, fp
18264     10 5D 48 FC | 	wrbyte	#46, local02
18268     04 4E 85 F1 | 	sub	fp, #4
1826c     A7 00 68 FC | 	wrlong	#0, fp
18270     1C 4F 85 F1 | 	sub	fp, #284
18274                 | LR__2219
18274     1C 4F 05 F1 | 	add	fp, #284
18278     A7 20 02 FB | 	rdlong	local02, fp
1827c     64 4E 85 F1 | 	sub	fp, #100
18280     A7 26 02 FB | 	rdlong	local05, fp
18284     B8 4E 85 F1 | 	sub	fp, #184
18288     13 21 52 F2 | 	cmps	local02, local05 wc
1828c     30 00 90 3D |  if_ae	jmp	#LR__2220
18290     20 4F 05 F1 | 	add	fp, #288
18294     A7 2C 02 FB | 	rdlong	local08, fp
18298     16 35 02 F6 | 	mov	local12, local08
1829c     01 34 06 F1 | 	add	local12, #1
182a0     A7 34 62 FC | 	wrlong	local12, fp
182a4     16 55 48 FC | 	wrbyte	#42, local08
182a8     04 4E 85 F1 | 	sub	fp, #4
182ac     A7 34 02 FB | 	rdlong	local12, fp
182b0     01 34 06 F1 | 	add	local12, #1
182b4     A7 34 62 FC | 	wrlong	local12, fp
182b8     1C 4F 85 F1 | 	sub	fp, #284
182bc     B4 FF 9F FD | 	jmp	#LR__2219
182c0                 | LR__2220
182c0                 | LR__2221
182c0     20 4F 05 F1 | 	add	fp, #288
182c4     A7 20 02 FB | 	rdlong	local02, fp
182c8     10 23 02 F6 | 	mov	local03, local02
182cc     01 22 06 F1 | 	add	local03, #1
182d0     A7 22 62 FC | 	wrlong	local03, fp
182d4     20 4F 85 F1 | 	sub	fp, #288
182d8     10 01 48 FC | 	wrbyte	#0, local02
182dc                 | LR__2222
182dc     04 4E 05 F1 | 	add	fp, #4
182e0     A7 12 02 FB | 	rdlong	arg01, fp
182e4     04 4E 05 F1 | 	add	fp, #4
182e8     A7 14 02 FB | 	rdlong	arg02, fp
182ec     BC 4E 05 F1 | 	add	fp, #188
182f0     A7 16 02 FB | 	rdlong	arg03, fp
182f4     C4 4E 85 F1 | 	sub	fp, #196
182f8     C4 EE BF FD | 	call	#__system___fmtstr
182fc                 | LR__2223
182fc     A7 F0 03 F6 | 	mov	ptra, fp
18300     B2 00 A0 FD | 	call	#popregs_
18304                 | __system___fmtfloat_ret
18304     2D 00 64 FD | 	ret
18308                 | 
18308                 | __system__Left_S
18308     04 4A 05 F6 | 	mov	COUNT_, #4
1830c     A8 00 A0 FD | 	call	#pushregs_
18310     09 1F 02 F6 | 	mov	local01, arg01
18314     0A 21 02 F6 | 	mov	local02, arg02
18318     01 20 56 F2 | 	cmps	local02, #1 wc
1831c     29 01 00 CF 
18320     E2 FA 05 C6 |  if_b	mov	result1, ##@LR__4063
18324     5C 00 90 CD |  if_b	jmp	#LR__2233
18328     0F 13 02 F6 | 	mov	arg01, local01
1832c     09 23 02 F6 | 	mov	local03, arg01
18330     97 06 48 FB | 	callpa	#(@LR__2231-@LR__2230)>>2,fcache_load_ptr_
18334                 | LR__2230
18334     11 FB C9 FA | 	rdbyte	result1, local03 wz
18338     01 22 06 51 |  if_ne	add	local03, #1
1833c     F4 FF 9F 5D |  if_ne	jmp	#LR__2230
18340                 | LR__2231
18340     09 23 82 F1 | 	sub	local03, arg01
18344     11 FB 01 F6 | 	mov	result1, local03
18348     10 FB 59 F2 | 	cmps	result1, local02 wcz
1834c     0F FB 01 E6 |  if_be	mov	result1, local01
18350     30 00 90 ED |  if_be	jmp	#LR__2233
18354     10 13 02 F6 | 	mov	arg01, local02
18358     02 12 06 F1 | 	add	arg01, #2
1835c     FC 18 B0 FD | 	call	#__system___gc_alloc_managed
18360     FD 24 0A F6 | 	mov	local04, result1 wz
18364     18 00 90 AD |  if_e	jmp	#LR__2232
18368     12 13 02 F6 | 	mov	arg01, local04
1836c     0F 15 02 F6 | 	mov	arg02, local01
18370     10 17 02 F6 | 	mov	arg03, local02
18374     A0 DE BF FD | 	call	#__system____builtin_memmove
18378     12 21 02 F1 | 	add	local02, local04
1837c     10 01 48 FC | 	wrbyte	#0, local02
18380                 | LR__2232
18380     12 FB 01 F6 | 	mov	result1, local04
18384                 | LR__2233
18384     A7 F0 03 F6 | 	mov	ptra, fp
18388     B2 00 A0 FD | 	call	#popregs_
1838c                 | __system__Left_S_ret
1838c     2D 00 64 FD | 	ret
18390                 | 
18390                 | __system__Right_S
18390     05 4A 05 F6 | 	mov	COUNT_, #5
18394     A8 00 A0 FD | 	call	#pushregs_
18398     09 1F 02 F6 | 	mov	local01, arg01
1839c     0A 21 02 F6 | 	mov	local02, arg02
183a0     01 20 56 F2 | 	cmps	local02, #1 wc
183a4     29 01 00 CF 
183a8     E3 FA 05 C6 |  if_b	mov	result1, ##@LR__4064
183ac     64 00 90 CD |  if_b	jmp	#LR__2243
183b0     0F 13 02 F6 | 	mov	arg01, local01
183b4     09 23 02 F6 | 	mov	local03, arg01
183b8     97 06 48 FB | 	callpa	#(@LR__2241-@LR__2240)>>2,fcache_load_ptr_
183bc                 | LR__2240
183bc     11 FB C9 FA | 	rdbyte	result1, local03 wz
183c0     01 22 06 51 |  if_ne	add	local03, #1
183c4     F4 FF 9F 5D |  if_ne	jmp	#LR__2240
183c8                 | LR__2241
183c8     09 23 82 F1 | 	sub	local03, arg01
183cc     11 FB 01 F6 | 	mov	result1, local03
183d0     FD 24 02 F6 | 	mov	local04, result1
183d4     10 25 5A F2 | 	cmps	local04, local02 wcz
183d8     0F FB 01 E6 |  if_be	mov	result1, local01
183dc     34 00 90 ED |  if_be	jmp	#LR__2243
183e0     10 13 02 F6 | 	mov	arg01, local02
183e4     02 12 06 F1 | 	add	arg01, #2
183e8     70 18 B0 FD | 	call	#__system___gc_alloc_managed
183ec     FD 26 0A F6 | 	mov	local05, result1 wz
183f0     1C 00 90 AD |  if_e	jmp	#LR__2242
183f4     10 25 82 F1 | 	sub	local04, local02
183f8     0F 25 02 F1 | 	add	local04, local01
183fc     01 20 06 F1 | 	add	local02, #1
18400     13 13 02 F6 | 	mov	arg01, local05
18404     12 15 02 F6 | 	mov	arg02, local04
18408     10 17 02 F6 | 	mov	arg03, local02
1840c     08 DE BF FD | 	call	#__system____builtin_memmove
18410                 | LR__2242
18410     13 FB 01 F6 | 	mov	result1, local05
18414                 | LR__2243
18414     A7 F0 03 F6 | 	mov	ptra, fp
18418     B2 00 A0 FD | 	call	#popregs_
1841c                 | __system__Right_S_ret
1841c     2D 00 64 FD | 	ret
18420                 | 
18420                 | __system__Mid_S
18420     05 4A 05 F6 | 	mov	COUNT_, #5
18424     A8 00 A0 FD | 	call	#pushregs_
18428     09 1F 02 F6 | 	mov	local01, arg01
1842c     0A 21 02 F6 | 	mov	local02, arg02
18430     01 16 56 F2 | 	cmps	arg03, #1 wc
18434     29 01 00 CF 
18438     E4 FA 05 C6 |  if_b	mov	result1, ##@LR__4065
1843c     80 00 90 CD |  if_b	jmp	#LR__2253
18440     01 20 86 F1 | 	sub	local02, #1
18444     00 20 56 F3 | 	fges	local02, #0 wc
18448     0F 13 02 F6 | 	mov	arg01, local01
1844c     09 23 02 F6 | 	mov	local03, arg01
18450     97 06 48 FB | 	callpa	#(@LR__2251-@LR__2250)>>2,fcache_load_ptr_
18454                 | LR__2250
18454     11 FB C9 FA | 	rdbyte	result1, local03 wz
18458     01 22 06 51 |  if_ne	add	local03, #1
1845c     F4 FF 9F 5D |  if_ne	jmp	#LR__2250
18460                 | LR__2251
18460     09 23 82 F1 | 	sub	local03, arg01
18464     11 FB 01 F6 | 	mov	result1, local03
18468     FD 14 02 F6 | 	mov	arg02, result1
1846c     10 15 52 F2 | 	cmps	arg02, local02 wc
18470     29 01 00 CF 
18474     E5 FA 05 C6 |  if_b	mov	result1, ##@LR__4066
18478     44 00 90 CD |  if_b	jmp	#LR__2253
1847c     0A 25 02 F6 | 	mov	local04, arg02
18480     10 25 82 F1 | 	sub	local04, local02
18484     0B 25 5A F2 | 	cmps	local04, arg03 wcz
18488     0B 25 02 16 |  if_a	mov	local04, arg03
1848c     12 13 02 F6 | 	mov	arg01, local04
18490     02 12 06 F1 | 	add	arg01, #2
18494     C4 17 B0 FD | 	call	#__system___gc_alloc_managed
18498     FD 26 0A F6 | 	mov	local05, result1 wz
1849c     1C 00 90 AD |  if_e	jmp	#LR__2252
184a0     0F 21 02 F1 | 	add	local02, local01
184a4     13 13 02 F6 | 	mov	arg01, local05
184a8     10 15 02 F6 | 	mov	arg02, local02
184ac     12 17 02 F6 | 	mov	arg03, local04
184b0     64 DD BF FD | 	call	#__system____builtin_memmove
184b4     13 25 02 F1 | 	add	local04, local05
184b8     12 01 48 FC | 	wrbyte	#0, local04
184bc                 | LR__2252
184bc     13 FB 01 F6 | 	mov	result1, local05
184c0                 | LR__2253
184c0     A7 F0 03 F6 | 	mov	ptra, fp
184c4     B2 00 A0 FD | 	call	#popregs_
184c8                 | __system__Mid_S_ret
184c8     2D 00 64 FD | 	ret
184cc                 | 
184cc                 | __system__Chr_S
184cc     01 4A 05 F6 | 	mov	COUNT_, #1
184d0     A8 00 A0 FD | 	call	#pushregs_
184d4     09 1F 02 F6 | 	mov	local01, arg01
184d8     03 12 06 F6 | 	mov	arg01, #3
184dc     7C 17 B0 FD | 	call	#__system___gc_alloc_managed
184e0     00 FA 4D F2 | 	cmps	result1, #0 wz
184e4     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
184e8     01 FA 05 51 |  if_ne	add	result1, #1
184ec     FD 00 48 5C |  if_ne	wrbyte	#0, result1
184f0     01 FA 85 51 |  if_ne	sub	result1, #1
184f4     A7 F0 03 F6 | 	mov	ptra, fp
184f8     B2 00 A0 FD | 	call	#popregs_
184fc                 | __system__Chr_S_ret
184fc     2D 00 64 FD | 	ret
18500                 | 
18500                 | __system__Number_S
18500     08 4A 05 F6 | 	mov	COUNT_, #8
18504     A8 00 A0 FD | 	call	#pushregs_
18508     09 1F 02 F6 | 	mov	local01, arg01
1850c     0A 21 0A F6 | 	mov	local02, arg02 wz
18510     0B 23 02 F6 | 	mov	local03, arg03
18514     3C 00 90 5D |  if_ne	jmp	#LR__2262
18518     01 20 06 F6 | 	mov	local02, #1
1851c     11 25 02 F6 | 	mov	local04, local03
18520     01 26 06 F6 | 	mov	local05, #1
18524     97 16 48 FB | 	callpa	#(@LR__2261-@LR__2260)>>2,fcache_load_ptr_
18528                 | LR__2260
18528     00 28 06 F6 | 	mov	local06, #0
1852c     0F 25 1A F2 | 	cmp	local04, local01 wcz
18530     01 28 66 E6 |  if_be	neg	local06, #1
18534     12 27 12 F2 | 	cmp	local05, local04 wc
18538     15 2B A2 F1 | 	subx	local07, local07
1853c     15 29 CA F7 | 	test	local06, local07 wz
18540     11 25 02 5D |  if_ne	qmul	local04, local03
18544     12 27 02 56 |  if_ne	mov	local05, local04
18548     01 20 06 51 |  if_ne	add	local02, #1
1854c     18 24 62 5D |  if_ne	getqx	local04
18550     D4 FF 9F 5D |  if_ne	jmp	#LR__2260
18554                 | LR__2261
18554                 | LR__2262
18554     20 20 36 F3 | 	fle	local02, #32 wc
18558     10 13 02 F6 | 	mov	arg01, local02
1855c     02 12 06 F1 | 	add	arg01, #2
18560     F8 16 B0 FD | 	call	#__system___gc_alloc_managed
18564     FD 28 02 F6 | 	mov	local06, result1
18568     10 2B 02 F6 | 	mov	local07, local02
1856c     14 2B 02 F1 | 	add	local07, local06
18570     15 01 48 FC | 	wrbyte	#0, local07
18574     97 1A 48 FB | 	callpa	#(@LR__2264-@LR__2263)>>2,fcache_load_ptr_
18578                 | LR__2263
18578     01 20 16 F2 | 	cmp	local02, #1 wc
1857c     2C 00 90 CD |  if_b	jmp	#LR__2265
18580     11 1F 12 FD | 	qdiv	local01, local03
18584     01 20 86 F1 | 	sub	local02, #1
18588     10 2B 02 F6 | 	mov	local07, local02
1858c     14 2B 02 F1 | 	add	local07, local06
18590     19 2C 62 FD | 	getqy	local08
18594     0A 2C 16 F2 | 	cmp	local08, #10 wc
18598     30 2C 06 C1 |  if_b	add	local08, #48
1859c     37 2C 06 31 |  if_ae	add	local08, #55
185a0     15 2D 42 FC | 	wrbyte	local08, local07
185a4     18 1E 62 FD | 	getqx	local01
185a8     CC FF 9F FD | 	jmp	#LR__2263
185ac                 | LR__2264
185ac                 | LR__2265
185ac     14 FB 01 F6 | 	mov	result1, local06
185b0     A7 F0 03 F6 | 	mov	ptra, fp
185b4     B2 00 A0 FD | 	call	#popregs_
185b8                 | __system__Number_S_ret
185b8     2D 00 64 FD | 	ret
185bc                 | 
185bc                 | __system__LCase_S
185bc     07 4A 05 F6 | 	mov	COUNT_, #7
185c0     A8 00 A0 FD | 	call	#pushregs_
185c4     09 1F 02 F6 | 	mov	local01, arg01
185c8     09 21 02 F6 | 	mov	local02, arg01
185cc     97 06 48 FB | 	callpa	#(@LR__2271-@LR__2270)>>2,fcache_load_ptr_
185d0                 | LR__2270
185d0     10 FB C9 FA | 	rdbyte	result1, local02 wz
185d4     01 20 06 51 |  if_ne	add	local02, #1
185d8     F4 FF 9F 5D |  if_ne	jmp	#LR__2270
185dc                 | LR__2271
185dc     09 21 82 F1 | 	sub	local02, arg01
185e0     10 FB 01 F6 | 	mov	result1, local02
185e4     FD 20 0A F6 | 	mov	local02, result1 wz
185e8     29 01 00 AF 
185ec     E6 FA 05 A6 |  if_e	mov	result1, ##@LR__4067
185f0     7C 00 90 AD |  if_e	jmp	#LR__2277
185f4     10 13 02 F6 | 	mov	arg01, local02
185f8     02 12 06 F1 | 	add	arg01, #2
185fc     5C 16 B0 FD | 	call	#__system___gc_alloc_managed
18600     FD 22 0A F6 | 	mov	local03, result1 wz
18604     64 00 90 AD |  if_e	jmp	#LR__2276
18608     01 24 66 F6 | 	neg	local04, #1
1860c     97 26 48 FB | 	callpa	#(@LR__2275-@LR__2272)>>2,fcache_load_ptr_
18610                 | LR__2272
18610     01 24 06 F1 | 	add	local04, #1
18614     12 27 02 F6 | 	mov	local05, local04
18618     0F 27 02 F1 | 	add	local05, local01
1861c     13 29 C2 FA | 	rdbyte	local06, local05
18620     41 28 56 F2 | 	cmps	local06, #65 wc
18624     18 00 90 CD |  if_b	jmp	#LR__2273
18628     5B 28 56 F2 | 	cmps	local06, #91 wc
1862c     12 2B 02 C6 |  if_b	mov	local07, local04
18630     11 2B 02 C1 |  if_b	add	local07, local03
18634     20 28 06 C1 |  if_b	add	local06, #32
18638     15 29 42 CC |  if_b	wrbyte	local06, local07
1863c     0C 00 90 CD |  if_b	jmp	#LR__2274
18640                 | LR__2273
18640     12 2B 02 F6 | 	mov	local07, local04
18644     11 2B 02 F1 | 	add	local07, local03
18648     15 29 42 FC | 	wrbyte	local06, local07
1864c                 | LR__2274
1864c     10 29 02 F6 | 	mov	local06, local02
18650     01 28 86 F1 | 	sub	local06, #1
18654     14 25 0A F2 | 	cmp	local04, local06 wz
18658     B4 FF 9F 5D |  if_ne	jmp	#LR__2272
1865c                 | LR__2275
1865c     11 21 02 F1 | 	add	local02, local03
18660     10 01 48 FC | 	wrbyte	#0, local02
18664     11 FB 01 F6 | 	mov	result1, local03
18668     04 00 90 FD | 	jmp	#LR__2277
1866c                 | LR__2276
1866c     11 FB 01 F6 | 	mov	result1, local03
18670                 | LR__2277
18670     A7 F0 03 F6 | 	mov	ptra, fp
18674     B2 00 A0 FD | 	call	#popregs_
18678                 | __system__LCase_S_ret
18678     2D 00 64 FD | 	ret
1867c                 | 
1867c                 | __system__LTrim_S
1867c     05 4A 05 F6 | 	mov	COUNT_, #5
18680     A8 00 A0 FD | 	call	#pushregs_
18684     09 1F 02 F6 | 	mov	local01, arg01
18688     09 21 02 F6 | 	mov	local02, arg01
1868c     97 06 48 FB | 	callpa	#(@LR__2281-@LR__2280)>>2,fcache_load_ptr_
18690                 | LR__2280
18690     10 FB C9 FA | 	rdbyte	result1, local02 wz
18694     01 20 06 51 |  if_ne	add	local02, #1
18698     F4 FF 9F 5D |  if_ne	jmp	#LR__2280
1869c                 | LR__2281
1869c     09 21 82 F1 | 	sub	local02, arg01
186a0     10 FB 01 F6 | 	mov	result1, local02
186a4     FD 20 0A F6 | 	mov	local02, result1 wz
186a8     29 01 00 AF 
186ac     E7 FA 05 A6 |  if_e	mov	result1, ##@LR__4068
186b0     7C 00 90 AD |  if_e	jmp	#LR__2286
186b4     00 22 06 F6 | 	mov	local03, #0
186b8     10 25 02 F6 | 	mov	local04, local02
186bc                 | LR__2282
186bc     12 23 52 F2 | 	cmps	local03, local04 wc
186c0     68 00 90 3D |  if_ae	jmp	#LR__2285
186c4     11 17 02 F6 | 	mov	arg03, local03
186c8     0F 17 02 F1 | 	add	arg03, local01
186cc     0B 17 C2 FA | 	rdbyte	arg03, arg03
186d0     20 16 0E F2 | 	cmp	arg03, #32 wz
186d4     4C 00 90 AD |  if_e	jmp	#LR__2284
186d8     10 13 02 F6 | 	mov	arg01, local02
186dc     11 13 82 F1 | 	sub	arg01, local03
186e0     02 12 06 F1 | 	add	arg01, #2
186e4     74 15 B0 FD | 	call	#__system___gc_alloc_managed
186e8     FD 26 0A F6 | 	mov	local05, result1 wz
186ec     2C 00 90 AD |  if_e	jmp	#LR__2283
186f0     11 15 02 F6 | 	mov	arg02, local03
186f4     0F 15 02 F1 | 	add	arg02, local01
186f8     10 17 02 F6 | 	mov	arg03, local02
186fc     11 17 82 F1 | 	sub	arg03, local03
18700     13 13 02 F6 | 	mov	arg01, local05
18704     10 DB BF FD | 	call	#__system____builtin_memmove
18708     11 21 82 F1 | 	sub	local02, local03
1870c     13 21 02 F1 | 	add	local02, local05
18710     10 01 48 FC | 	wrbyte	#0, local02
18714     13 FB 01 F6 | 	mov	result1, local05
18718     14 00 90 FD | 	jmp	#LR__2286
1871c                 | LR__2283
1871c     13 FB 01 F6 | 	mov	result1, local05
18720     0C 00 90 FD | 	jmp	#LR__2286
18724                 | LR__2284
18724     01 22 06 F1 | 	add	local03, #1
18728     90 FF 9F FD | 	jmp	#LR__2282
1872c                 | LR__2285
1872c     0F FB 01 F6 | 	mov	result1, local01
18730                 | LR__2286
18730     A7 F0 03 F6 | 	mov	ptra, fp
18734     B2 00 A0 FD | 	call	#popregs_
18738                 | __system__LTrim_S_ret
18738     2D 00 64 FD | 	ret
1873c                 | 
1873c                 | __system__RTrim_S
1873c     04 4A 05 F6 | 	mov	COUNT_, #4
18740     A8 00 A0 FD | 	call	#pushregs_
18744     09 1F 02 F6 | 	mov	local01, arg01
18748     09 21 02 F6 | 	mov	local02, arg01
1874c     97 06 48 FB | 	callpa	#(@LR__2291-@LR__2290)>>2,fcache_load_ptr_
18750                 | LR__2290
18750     10 FB C9 FA | 	rdbyte	result1, local02 wz
18754     01 20 06 51 |  if_ne	add	local02, #1
18758     F4 FF 9F 5D |  if_ne	jmp	#LR__2290
1875c                 | LR__2291
1875c     09 21 82 F1 | 	sub	local02, arg01
18760     10 FB 01 F6 | 	mov	result1, local02
18764     FD 20 0A F6 | 	mov	local02, result1 wz
18768     29 01 00 AF 
1876c     E8 FA 05 A6 |  if_e	mov	result1, ##@LR__4069
18770     74 00 90 AD |  if_e	jmp	#LR__2295
18774     10 23 02 F6 | 	mov	local03, local02
18778     01 22 86 F1 | 	sub	local03, #1
1877c                 | LR__2292
1877c     11 15 02 F6 | 	mov	arg02, local03
18780     0F 15 02 F1 | 	add	arg02, local01
18784     0A 21 C2 FA | 	rdbyte	local02, arg02
18788     20 20 0E F2 | 	cmp	local02, #32 wz
1878c     44 00 90 AD |  if_e	jmp	#LR__2294
18790     11 13 02 F6 | 	mov	arg01, local03
18794     02 12 06 F1 | 	add	arg01, #2
18798     C0 14 B0 FD | 	call	#__system___gc_alloc_managed
1879c     FD 24 0A F6 | 	mov	local04, result1 wz
187a0     28 00 90 AD |  if_e	jmp	#LR__2293
187a4     11 17 02 F6 | 	mov	arg03, local03
187a8     01 16 06 F1 | 	add	arg03, #1
187ac     12 13 02 F6 | 	mov	arg01, local04
187b0     0F 15 02 F6 | 	mov	arg02, local01
187b4     60 DA BF FD | 	call	#__system____builtin_memmove
187b8     01 22 06 F1 | 	add	local03, #1
187bc     12 23 02 F1 | 	add	local03, local04
187c0     11 01 48 FC | 	wrbyte	#0, local03
187c4     12 FB 01 F6 | 	mov	result1, local04
187c8     1C 00 90 FD | 	jmp	#LR__2295
187cc                 | LR__2293
187cc     12 FB 01 F6 | 	mov	result1, local04
187d0     14 00 90 FD | 	jmp	#LR__2295
187d4                 | LR__2294
187d4     01 22 86 F1 | 	sub	local03, #1
187d8     00 22 56 F2 | 	cmps	local03, #0 wc
187dc     9C FF 9F 3D |  if_ae	jmp	#LR__2292
187e0     29 01 00 FF 
187e4     E9 FA 05 F6 | 	mov	result1, ##@LR__4070
187e8                 | LR__2295
187e8     A7 F0 03 F6 | 	mov	ptra, fp
187ec     B2 00 A0 FD | 	call	#popregs_
187f0                 | __system__RTrim_S_ret
187f0     2D 00 64 FD | 	ret
187f4                 | 
187f4                 | __system___strerror
187f4     00 12 56 F2 | 	cmps	arg01, #0 wc
187f8     08 00 90 CD |  if_b	jmp	#LR__2300
187fc     1A 12 56 F2 | 	cmps	arg01, #26 wc
18800     04 00 90 CD |  if_b	jmp	#LR__2301
18804                 | LR__2300
18804     19 12 06 F6 | 	mov	arg01, #25
18808                 | LR__2301
18808     02 12 66 F0 | 	shl	arg01, #2
1880c     01 00 00 FF 
18810     D8 E8 05 F1 | 	add	ptr___system__dat__, ##728
18814     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
18818     09 FB 01 FB | 	rdlong	result1, arg01
1881c     01 00 00 FF 
18820     D8 E8 85 F1 | 	sub	ptr___system__dat__, ##728
18824                 | __system___strerror_ret
18824     2D 00 64 FD | 	ret
18828                 | 
18828                 | __system___int64_shl
18828     20 16 CE F7 | 	test	arg03, #32 wz
1882c     09 15 02 56 |  if_ne	mov	arg02, arg01
18830     00 12 06 56 |  if_ne	mov	arg01, #0
18834     1F 16 CE F7 | 	test	arg03, #31 wz
18838     18 00 90 AD |  if_e	jmp	#LR__2310
1883c     0B 15 62 F0 | 	shl	arg02, arg03
18840     09 FB 01 F6 | 	mov	result1, arg01
18844     0B FD 61 F6 | 	neg	result2, arg03
18848     FE FA 41 F0 | 	shr	result1, result2
1884c     FD 14 42 F5 | 	or	arg02, result1
18850     0B 13 62 F0 | 	shl	arg01, arg03
18854                 | LR__2310
18854     0A FD 01 F6 | 	mov	result2, arg02
18858     09 FB 01 F6 | 	mov	result1, arg01
1885c                 | __system___int64_shl_ret
1885c     2D 00 64 FD | 	ret
18860                 | 
18860                 | __system___usepins
18860     14 E8 05 F1 | 	add	ptr___system__dat__, #20
18864     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
18868     14 E8 85 F1 | 	sub	ptr___system__dat__, #20
1886c     00 13 CA F7 | 	test	arg01, _var01 wz
18870     18 E8 05 A1 |  if_e	add	ptr___system__dat__, #24
18874     F4 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
18878     18 E8 85 A1 |  if_e	sub	ptr___system__dat__, #24
1887c     01 15 CA A7 |  if_e	test	arg02, _var02 wz
18880     00 FA 05 56 |  if_ne	mov	result1, #0
18884     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
18888     14 E8 05 F1 | 	add	ptr___system__dat__, #20
1888c     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
18890     09 03 42 F5 | 	or	_var02, arg01
18894     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
18898     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1889c     F4 02 02 FB | 	rdlong	_var02, ptr___system__dat__
188a0     0A 03 42 F5 | 	or	_var02, arg02
188a4     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
188a8     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
188ac     01 FA 65 F6 | 	neg	result1, #1
188b0                 | __system___usepins_ret
188b0     2D 00 64 FD | 	ret
188b4                 | 
188b4                 | __system___freepins
188b4     14 E8 05 F1 | 	add	ptr___system__dat__, #20
188b8     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
188bc     09 01 22 F5 | 	andn	_var01, arg01
188c0     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
188c4     04 E8 05 F1 | 	add	ptr___system__dat__, #4
188c8     F4 00 02 FB | 	rdlong	_var01, ptr___system__dat__
188cc     0A 01 22 F5 | 	andn	_var01, arg02
188d0     F4 00 62 FC | 	wrlong	_var01, ptr___system__dat__
188d4     18 E8 85 F1 | 	sub	ptr___system__dat__, #24
188d8                 | __system___freepins_ret
188d8     2D 00 64 FD | 	ret
188dc                 | 
188dc                 | __system___float_fromuns
188dc     09 17 0A F6 | 	mov	arg03, arg01 wz
188e0     0B FB 01 A6 |  if_e	mov	result1, arg03
188e4     24 00 90 AD |  if_e	jmp	#LR__2320
188e8     0B 15 92 F7 | 	encod	arg02, arg03 wc
188ec     01 14 06 C1 |  if_b	add	arg02, #1
188f0     01 14 86 F1 | 	sub	arg02, #1
188f4     1F 12 06 F6 | 	mov	arg01, #31
188f8     0A 13 82 F1 | 	sub	arg01, arg02
188fc     09 17 62 F0 | 	shl	arg03, arg01
18900     02 16 46 F0 | 	shr	arg03, #2
18904     00 12 06 F6 | 	mov	arg01, #0
18908     74 08 B0 FD | 	call	#__system___float_Pack
1890c                 | LR__2320
1890c                 | __system___float_fromuns_ret
1890c     2D 00 64 FD | 	ret
18910                 | 
18910                 | __system___float_add
18910     0F 4A 05 F6 | 	mov	COUNT_, #15
18914     A8 00 A0 FD | 	call	#pushregs_
18918     09 1F 02 F6 | 	mov	local01, arg01
1891c     0A 21 02 F6 | 	mov	local02, arg02
18920     00 22 06 F6 | 	mov	local03, #0
18924     0F 25 02 F6 | 	mov	local04, local01
18928     12 27 02 F6 | 	mov	local05, local04
1892c     16 26 46 F7 | 	zerox	local05, #22
18930     12 29 02 F6 | 	mov	local06, local04
18934     01 28 66 F0 | 	shl	local06, #1
18938     18 28 46 F0 | 	shr	local06, #24
1893c     1F 24 46 F0 | 	shr	local04, #31
18940     10 13 02 F6 | 	mov	arg01, local02
18944     09 FB 01 F6 | 	mov	result1, arg01
18948     FD 2A 02 F6 | 	mov	local07, result1
1894c     15 2D 02 F6 | 	mov	local08, local07
18950     16 2C 46 F7 | 	zerox	local08, #22
18954     15 2F 02 F6 | 	mov	local09, local07
18958     01 2E 66 F0 | 	shl	local09, #1
1895c     18 2E 46 F0 | 	shr	local09, #24
18960     17 31 02 F6 | 	mov	local10, local09
18964     1F 2A 46 F0 | 	shr	local07, #31
18968     00 32 06 F6 | 	mov	local11, #0
1896c     00 34 06 F6 | 	mov	local12, #0
18970     18 29 12 F2 | 	cmp	local06, local10 wc
18974     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
18978     2C 00 90 1D |  if_a	jmp	#LR__2330
1897c     16 27 12 32 |  if_ae	cmp	local05, local08 wc
18980     24 00 90 3D |  if_ae	jmp	#LR__2330
18984     13 37 02 F6 | 	mov	local13, local05
18988     16 27 02 F6 | 	mov	local05, local08
1898c     1B 2D 02 F6 | 	mov	local08, local13
18990     14 37 02 F6 | 	mov	local13, local06
18994     18 29 02 F6 | 	mov	local06, local10
18998     1B 31 02 F6 | 	mov	local10, local13
1899c     12 37 02 F6 | 	mov	local13, local04
189a0     15 25 02 F6 | 	mov	local04, local07
189a4     1B 2B 02 F6 | 	mov	local07, local13
189a8                 | LR__2330
189a8     FF 28 0E F2 | 	cmp	local06, #255 wz
189ac     70 01 90 AD |  if_e	jmp	#LR__2345
189b0     00 28 0E F2 | 	cmp	local06, #0 wz
189b4     AC 01 90 AD |  if_e	jmp	#LR__2347
189b8     17 26 26 F4 | 	bith	local05, #23
189bc                 | LR__2331
189bc     00 30 0E F2 | 	cmp	local10, #0 wz
189c0     F0 01 90 AD |  if_e	jmp	#LR__2351
189c4     17 2C 26 F4 | 	bith	local08, #23
189c8                 | LR__2332
189c8     7F 28 86 F1 | 	sub	local06, #127
189cc     7F 30 86 F1 | 	sub	local10, #127
189d0     14 39 02 F6 | 	mov	local14, local06
189d4     18 39 82 F1 | 	sub	local14, local10
189d8     97 14 48 FB | 	callpa	#(@LR__2334-@LR__2333)>>2,fcache_load_ptr_
189dc                 | LR__2333
189dc     20 38 56 F2 | 	cmps	local14, #32 wc
189e0     20 00 90 CD |  if_b	jmp	#LR__2335
189e4     16 2F 02 F6 | 	mov	local09, local08
189e8     00 32 0E F2 | 	cmp	local11, #0 wz
189ec     6F 32 62 FD | 	wrnz	local11
189f0     19 2F 42 F5 | 	or	local09, local11
189f4     17 33 02 F6 | 	mov	local11, local09
189f8     00 2C 06 F6 | 	mov	local08, #0
189fc     20 38 86 F1 | 	sub	local14, #32
18a00     D8 FF 9F FD | 	jmp	#LR__2333
18a04                 | LR__2334
18a04                 | LR__2335
18a04     00 38 0E F2 | 	cmp	local14, #0 wz
18a08     38 00 90 AD |  if_e	jmp	#LR__2336
18a0c     16 37 02 F6 | 	mov	local13, local08
18a10     20 30 06 F6 | 	mov	local10, #32
18a14     1C 31 82 F1 | 	sub	local10, local14
18a18     18 37 62 F0 | 	shl	local13, local10
18a1c     19 31 02 F6 | 	mov	local10, local11
18a20     20 2E 06 F6 | 	mov	local09, #32
18a24     1C 2F 82 F1 | 	sub	local09, local14
18a28     17 31 6A F0 | 	shl	local10, local09 wz
18a2c     1C 33 42 F0 | 	shr	local11, local14
18a30     1C 2D 42 F0 | 	shr	local08, local14
18a34     1B 33 42 F5 | 	or	local11, local13
18a38     00 3A 06 F6 | 	mov	local15, #0
18a3c     01 3A 06 56 |  if_ne	mov	local15, #1
18a40     1D 33 42 F5 | 	or	local11, local15
18a44                 | LR__2336
18a44     12 3B 02 F6 | 	mov	local15, local04
18a48     15 3B 62 F5 | 	xor	local15, local07
18a4c     01 3A CE F7 | 	test	local15, #1 wz
18a50     18 00 90 AD |  if_e	jmp	#LR__2337
18a54     16 2D 22 F6 | 	not	local08, local08
18a58     19 33 22 F6 | 	not	local11, local11
18a5c     01 32 0E F1 | 	add	local11, #1 wz
18a60     00 3A 06 F6 | 	mov	local15, #0
18a64     01 3A 06 A6 |  if_e	mov	local15, #1
18a68     1D 2D 02 F1 | 	add	local08, local15
18a6c                 | LR__2337
18a6c     19 35 12 F1 | 	add	local12, local11 wc
18a70     16 27 22 F1 | 	addx	local05, local08
18a74     00 26 56 F2 | 	cmps	local05, #0 wc
18a78     1C 00 90 3D |  if_ae	jmp	#LR__2338
18a7c     01 24 66 F5 | 	xor	local04, #1
18a80     13 27 22 F6 | 	not	local05, local05
18a84     1A 35 22 F6 | 	not	local12, local12
18a88     01 34 0E F1 | 	add	local12, #1 wz
18a8c     00 3A 06 F6 | 	mov	local15, #0
18a90     01 3A 06 A6 |  if_e	mov	local15, #1
18a94     1D 27 02 F1 | 	add	local05, local15
18a98                 | LR__2338
18a98     00 80 00 FF 
18a9c     00 26 16 F2 | 	cmp	local05, ##16777216 wc
18aa0     28 00 90 CD |  if_b	jmp	#LR__2339
18aa4     01 28 06 F1 | 	add	local06, #1
18aa8     1A 39 02 F6 | 	mov	local14, local12
18aac     01 38 06 F5 | 	and	local14, #1
18ab0     01 34 46 F0 | 	shr	local12, #1
18ab4     13 3B 02 F6 | 	mov	local15, local05
18ab8     1F 3A 66 F0 | 	shl	local15, #31
18abc     1D 35 42 F5 | 	or	local12, local15
18ac0     1C 35 42 F5 | 	or	local12, local14
18ac4     01 26 46 F0 | 	shr	local05, #1
18ac8     3C 00 90 FD | 	jmp	#LR__2344
18acc                 | LR__2339
18acc     00 40 00 FF 
18ad0     00 26 16 F2 | 	cmp	local05, ##8388608 wc
18ad4     30 00 90 3D |  if_ae	jmp	#LR__2343
18ad8     00 26 0E F2 | 	cmp	local05, #0 wz
18adc     00 34 0E A2 |  if_e	cmp	local12, #0 wz
18ae0     08 24 46 A5 |  if_e	or	local04, #8
18ae4     01 24 26 A5 |  if_e	andn	local04, #1
18ae8     1C 00 90 AD |  if_e	jmp	#LR__2342
18aec                 | LR__2340
18aec     00 40 00 FF 
18af0     00 26 16 F2 | 	cmp	local05, ##8388608 wc
18af4     10 00 90 3D |  if_ae	jmp	#LR__2341
18af8     1A 35 12 F1 | 	add	local12, local12 wc
18afc     13 27 22 F1 | 	addx	local05, local05
18b00     01 28 86 F1 | 	sub	local06, #1
18b04     E4 FF 9F FD | 	jmp	#LR__2340
18b08                 | LR__2341
18b08                 | LR__2342
18b08                 | LR__2343
18b08                 | LR__2344
18b08     13 13 02 F6 | 	mov	arg01, local05
18b0c     1A 15 02 F6 | 	mov	arg02, local12
18b10     14 17 02 F6 | 	mov	arg03, local06
18b14     12 19 02 F6 | 	mov	arg04, local04
18b18     38 30 B0 FD | 	call	#__system__pack_0438
18b1c     DC 00 90 FD | 	jmp	#LR__2355
18b20                 | LR__2345
18b20     FF 30 0E F2 | 	cmp	local10, #255 wz
18b24     10 00 90 5D |  if_ne	jmp	#LR__2346
18b28     12 2B 0A F2 | 	cmp	local07, local04 wz
18b2c     00 F8 3F 5F 
18b30     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
18b34     C4 00 90 5D |  if_ne	jmp	#LR__2355
18b38                 | LR__2346
18b38     00 26 0E F2 | 	cmp	local05, #0 wz
18b3c     00 F8 3F 5F 
18b40     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
18b44     B4 00 90 5D |  if_ne	jmp	#LR__2355
18b48     1A 15 02 F6 | 	mov	arg02, local12
18b4c     14 17 02 F6 | 	mov	arg03, local06
18b50     12 19 02 F6 | 	mov	arg04, local04
18b54     02 18 46 F5 | 	or	arg04, #2
18b58     13 13 02 F6 | 	mov	arg01, local05
18b5c     F4 2F B0 FD | 	call	#__system__pack_0438
18b60     98 00 90 FD | 	jmp	#LR__2355
18b64                 | LR__2347
18b64     00 26 0E F2 | 	cmp	local05, #0 wz
18b68     28 00 90 AD |  if_e	jmp	#LR__2350
18b6c     01 26 66 F0 | 	shl	local05, #1
18b70     97 0E 48 FB | 	callpa	#(@LR__2349-@LR__2348)>>2,fcache_load_ptr_
18b74                 | LR__2348
18b74     00 40 00 FF 
18b78     00 26 16 F2 | 	cmp	local05, ##8388608 wc
18b7c     14 3B 02 C6 |  if_b	mov	local15, local06
18b80     01 3A 86 C1 |  if_b	sub	local15, #1
18b84     1D 29 02 C6 |  if_b	mov	local06, local15
18b88     01 26 66 C0 |  if_b	shl	local05, #1
18b8c     E4 FF 9F CD |  if_b	jmp	#LR__2348
18b90                 | LR__2349
18b90     28 FE 9F FD | 	jmp	#LR__2331
18b94                 | LR__2350
18b94     15 25 02 F5 | 	and	local04, local07
18b98     12 19 02 F6 | 	mov	arg04, local04
18b9c     08 18 46 F5 | 	or	arg04, #8
18ba0     00 12 06 F6 | 	mov	arg01, #0
18ba4     00 14 06 F6 | 	mov	arg02, #0
18ba8     00 16 06 F6 | 	mov	arg03, #0
18bac     A4 2F B0 FD | 	call	#__system__pack_0438
18bb0     48 00 90 FD | 	jmp	#LR__2355
18bb4                 | LR__2351
18bb4     00 2C 0E F2 | 	cmp	local08, #0 wz
18bb8     28 00 90 AD |  if_e	jmp	#LR__2354
18bbc     01 2C 66 F0 | 	shl	local08, #1
18bc0     97 0E 48 FB | 	callpa	#(@LR__2353-@LR__2352)>>2,fcache_load_ptr_
18bc4                 | LR__2352
18bc4     00 40 00 FF 
18bc8     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
18bcc     18 3B 02 C6 |  if_b	mov	local15, local10
18bd0     01 3A 86 C1 |  if_b	sub	local15, #1
18bd4     1D 31 02 C6 |  if_b	mov	local10, local15
18bd8     01 2C 66 C0 |  if_b	shl	local08, #1
18bdc     E4 FF 9F CD |  if_b	jmp	#LR__2352
18be0                 | LR__2353
18be0     E4 FD 9F FD | 	jmp	#LR__2332
18be4                 | LR__2354
18be4     7F 28 86 F1 | 	sub	local06, #127
18be8     13 13 02 F6 | 	mov	arg01, local05
18bec     1A 15 02 F6 | 	mov	arg02, local12
18bf0     14 17 02 F6 | 	mov	arg03, local06
18bf4     12 19 02 F6 | 	mov	arg04, local04
18bf8     58 2F B0 FD | 	call	#__system__pack_0438
18bfc                 | LR__2355
18bfc     A7 F0 03 F6 | 	mov	ptra, fp
18c00     B2 00 A0 FD | 	call	#popregs_
18c04                 | __system___float_add_ret
18c04     2D 00 64 FD | 	ret
18c08                 | 
18c08                 | __system___float_mul
18c08     0B 4A 05 F6 | 	mov	COUNT_, #11
18c0c     A8 00 A0 FD | 	call	#pushregs_
18c10     09 1F 02 F6 | 	mov	local01, arg01
18c14     0A 21 02 F6 | 	mov	local02, arg02
18c18     0F 23 02 F6 | 	mov	local03, local01
18c1c     11 25 02 F6 | 	mov	local04, local03
18c20     16 24 46 F7 | 	zerox	local04, #22
18c24     11 27 02 F6 | 	mov	local05, local03
18c28     01 26 66 F0 | 	shl	local05, #1
18c2c     18 26 46 F0 | 	shr	local05, #24
18c30     1F 22 46 F0 | 	shr	local03, #31
18c34     10 FB 01 F6 | 	mov	result1, local02
18c38     FD 28 02 F6 | 	mov	local06, result1
18c3c     14 2B 02 F6 | 	mov	local07, local06
18c40     16 2A 46 F7 | 	zerox	local07, #22
18c44     14 2D 02 F6 | 	mov	local08, local06
18c48     01 2C 66 F0 | 	shl	local08, #1
18c4c     18 2C 46 F0 | 	shr	local08, #24
18c50     1F 28 46 F0 | 	shr	local06, #31
18c54     14 23 62 F5 | 	xor	local03, local06
18c58     FF 26 0E F2 | 	cmp	local05, #255 wz
18c5c     90 00 90 AD |  if_e	jmp	#LR__2363
18c60     FF 2C 0E F2 | 	cmp	local08, #255 wz
18c64     D8 00 90 AD |  if_e	jmp	#LR__2365
18c68     00 26 0E F2 | 	cmp	local05, #0 wz
18c6c     0C 01 90 AD |  if_e	jmp	#LR__2366
18c70     17 24 26 F4 | 	bith	local04, #23
18c74                 | LR__2360
18c74     00 2C 0E F2 | 	cmp	local08, #0 wz
18c78     44 01 90 AD |  if_e	jmp	#LR__2370
18c7c     17 2A 26 F4 | 	bith	local07, #23
18c80                 | LR__2361
18c80     12 21 02 F6 | 	mov	local02, local04
18c84     04 20 66 F0 | 	shl	local02, #4
18c88     15 29 02 F6 | 	mov	local06, local07
18c8c     05 28 66 F0 | 	shl	local06, #5
18c90     14 21 02 FD | 	qmul	local02, local06
18c94     16 27 02 F1 | 	add	local05, local08
18c98     FE 26 86 F1 | 	sub	local05, #254
18c9c     13 2F 02 F6 | 	mov	local09, local05
18ca0     04 24 66 F0 | 	shl	local04, #4
18ca4     05 2A 66 F0 | 	shl	local07, #5
18ca8     18 30 62 FD | 	getqx	local10
18cac     15 25 02 FD | 	qmul	local04, local07
18cb0     19 32 62 FD | 	getqy	local11
18cb4     00 80 00 FF 
18cb8     00 32 16 F2 | 	cmp	local11, ##16777216 wc
18cbc     18 00 90 CD |  if_b	jmp	#LR__2362
18cc0     01 2E 06 F1 | 	add	local09, #1
18cc4     01 30 46 F0 | 	shr	local10, #1
18cc8     19 2D 02 F6 | 	mov	local08, local11
18ccc     1F 2C 66 F0 | 	shl	local08, #31
18cd0     16 31 42 F5 | 	or	local10, local08
18cd4     01 32 46 F0 | 	shr	local11, #1
18cd8                 | LR__2362
18cd8     19 13 02 F6 | 	mov	arg01, local11
18cdc     18 15 02 F6 | 	mov	arg02, local10
18ce0     17 17 02 F6 | 	mov	arg03, local09
18ce4     11 19 02 F6 | 	mov	arg04, local03
18ce8     68 2E B0 FD | 	call	#__system__pack_0438
18cec     10 01 90 FD | 	jmp	#LR__2374
18cf0                 | LR__2363
18cf0     00 24 0E F2 | 	cmp	local04, #0 wz
18cf4     0F FB 01 56 |  if_ne	mov	result1, local01
18cf8     04 01 90 5D |  if_ne	jmp	#LR__2374
18cfc     FF 2C 56 F2 | 	cmps	local08, #255 wc
18d00     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
18d04     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
18d08     18 00 90 4D |  if_c_and_nz	jmp	#LR__2364
18d0c     00 F8 3F CF 
18d10     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
18d14     E8 00 90 CD |  if_b	jmp	#LR__2374
18d18     00 2A 0E F2 | 	cmp	local07, #0 wz
18d1c     10 FB 01 56 |  if_ne	mov	result1, local02
18d20     DC 00 90 5D |  if_ne	jmp	#LR__2374
18d24                 | LR__2364
18d24     02 22 46 F5 | 	or	local03, #2
18d28     00 12 06 F6 | 	mov	arg01, #0
18d2c     00 14 06 F6 | 	mov	arg02, #0
18d30     13 17 02 F6 | 	mov	arg03, local05
18d34     11 19 02 F6 | 	mov	arg04, local03
18d38     18 2E B0 FD | 	call	#__system__pack_0438
18d3c     C0 00 90 FD | 	jmp	#LR__2374
18d40                 | LR__2365
18d40     00 26 0E F2 | 	cmp	local05, #0 wz
18d44     00 24 0E A2 |  if_e	cmp	local04, #0 wz
18d48     00 F8 3F AF 
18d4c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
18d50     AC 00 90 AD |  if_e	jmp	#LR__2374
18d54     00 2A 0E F2 | 	cmp	local07, #0 wz
18d58     10 FB 01 56 |  if_ne	mov	result1, local02
18d5c     A0 00 90 5D |  if_ne	jmp	#LR__2374
18d60     16 17 02 F6 | 	mov	arg03, local08
18d64     11 19 02 F6 | 	mov	arg04, local03
18d68     02 18 46 F5 | 	or	arg04, #2
18d6c     00 12 06 F6 | 	mov	arg01, #0
18d70     00 14 06 F6 | 	mov	arg02, #0
18d74     DC 2D B0 FD | 	call	#__system__pack_0438
18d78     84 00 90 FD | 	jmp	#LR__2374
18d7c                 | LR__2366
18d7c     00 24 0E F2 | 	cmp	local04, #0 wz
18d80     20 00 90 AD |  if_e	jmp	#LR__2369
18d84     01 24 66 F0 | 	shl	local04, #1
18d88     97 0A 48 FB | 	callpa	#(@LR__2368-@LR__2367)>>2,fcache_load_ptr_
18d8c                 | LR__2367
18d8c     00 40 00 FF 
18d90     00 24 16 F2 | 	cmp	local04, ##8388608 wc
18d94     01 26 86 C1 |  if_b	sub	local05, #1
18d98     01 24 66 C0 |  if_b	shl	local04, #1
18d9c     EC FF 9F CD |  if_b	jmp	#LR__2367
18da0                 | LR__2368
18da0     D0 FE 9F FD | 	jmp	#LR__2360
18da4                 | LR__2369
18da4     08 22 46 F5 | 	or	local03, #8
18da8     00 12 06 F6 | 	mov	arg01, #0
18dac     00 14 06 F6 | 	mov	arg02, #0
18db0     00 16 06 F6 | 	mov	arg03, #0
18db4     11 19 02 F6 | 	mov	arg04, local03
18db8     98 2D B0 FD | 	call	#__system__pack_0438
18dbc     40 00 90 FD | 	jmp	#LR__2374
18dc0                 | LR__2370
18dc0     00 2A 0E F2 | 	cmp	local07, #0 wz
18dc4     20 00 90 AD |  if_e	jmp	#LR__2373
18dc8     01 2A 66 F0 | 	shl	local07, #1
18dcc     97 0A 48 FB | 	callpa	#(@LR__2372-@LR__2371)>>2,fcache_load_ptr_
18dd0                 | LR__2371
18dd0     00 40 00 FF 
18dd4     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
18dd8     01 2C 86 C1 |  if_b	sub	local08, #1
18ddc     01 2A 66 C0 |  if_b	shl	local07, #1
18de0     EC FF 9F CD |  if_b	jmp	#LR__2371
18de4                 | LR__2372
18de4     98 FE 9F FD | 	jmp	#LR__2361
18de8                 | LR__2373
18de8     08 22 46 F5 | 	or	local03, #8
18dec     00 12 06 F6 | 	mov	arg01, #0
18df0     00 14 06 F6 | 	mov	arg02, #0
18df4     00 16 06 F6 | 	mov	arg03, #0
18df8     11 19 02 F6 | 	mov	arg04, local03
18dfc     54 2D B0 FD | 	call	#__system__pack_0438
18e00                 | LR__2374
18e00     A7 F0 03 F6 | 	mov	ptra, fp
18e04     B2 00 A0 FD | 	call	#popregs_
18e08                 | __system___float_mul_ret
18e08     2D 00 64 FD | 	ret
18e0c                 | 
18e0c                 | __system___float_div
18e0c     0E 4A 05 F6 | 	mov	COUNT_, #14
18e10     A8 00 A0 FD | 	call	#pushregs_
18e14     09 23 02 F6 | 	mov	local03, arg01
18e18     0A 25 02 F6 | 	mov	local04, arg02
18e1c     11 27 02 F6 | 	mov	local05, local03
18e20     13 29 02 F6 | 	mov	local06, local05
18e24     16 28 46 F7 | 	zerox	local06, #22
18e28     13 2B 02 F6 | 	mov	local07, local05
18e2c     01 2A 66 F0 | 	shl	local07, #1
18e30     18 2A 46 F0 | 	shr	local07, #24
18e34     1F 26 46 F0 | 	shr	local05, #31
18e38     12 FB 01 F6 | 	mov	result1, local04
18e3c     FD 2C 02 F6 | 	mov	local08, result1
18e40     16 2F 02 F6 | 	mov	local09, local08
18e44     16 2E 46 F7 | 	zerox	local09, #22
18e48     16 31 02 F6 | 	mov	local10, local08
18e4c     01 30 66 F0 | 	shl	local10, #1
18e50     18 30 46 F0 | 	shr	local10, #24
18e54     1F 2C 46 F0 | 	shr	local08, #31
18e58     16 27 62 F5 | 	xor	local05, local08
18e5c     FF 2A 0E F2 | 	cmp	local07, #255 wz
18e60     D4 00 90 AD |  if_e	jmp	#LR__2385
18e64     FF 30 0E F2 | 	cmp	local10, #255 wz
18e68     04 01 90 AD |  if_e	jmp	#LR__2386
18e6c     00 2A 0E F2 | 	cmp	local07, #0 wz
18e70     24 01 90 AD |  if_e	jmp	#LR__2387
18e74     17 28 26 F4 | 	bith	local06, #23
18e78                 | LR__2380
18e78     00 30 0E F2 | 	cmp	local10, #0 wz
18e7c     70 01 90 AD |  if_e	jmp	#LR__2391
18e80     17 2E 26 F4 | 	bith	local09, #23
18e84                 | LR__2381
18e84     18 2B 82 F1 | 	sub	local07, local10
18e88     15 33 02 F6 | 	mov	local11, local07
18e8c     14 13 02 F6 | 	mov	arg01, local06
18e90     02 12 46 F0 | 	shr	arg01, #2
18e94     1E 28 66 F0 | 	shl	local06, #30
18e98     14 15 02 F6 | 	mov	arg02, local06
18e9c     17 17 02 F6 | 	mov	arg03, local09
18ea0     28 12 62 FD | 	setq	arg01
18ea4     0B 15 12 FD | 	qdiv	arg02, arg03
18ea8     00 34 06 F6 | 	mov	local12, #0
18eac     18 1E 62 FD | 	getqx	local01
18eb0     19 FC 61 FD | 	getqy	result2
18eb4     FE 20 02 F6 | 	mov	local02, result2
18eb8     0F 37 02 F6 | 	mov	local13, local01
18ebc     00 20 4E F2 | 	cmps	local02, #0 wz
18ec0     1B 39 02 F6 | 	mov	local14, local13
18ec4     19 38 66 F0 | 	shl	local14, #25
18ec8     01 34 06 56 |  if_ne	mov	local12, #1
18ecc     1A 39 42 F5 | 	or	local14, local12
18ed0     07 36 46 F0 | 	shr	local13, #7
18ed4     00 80 00 FF 
18ed8     00 36 16 F2 | 	cmp	local13, ##16777216 wc
18edc     1C 00 90 CD |  if_b	jmp	#LR__2382
18ee0     01 32 06 F1 | 	add	local11, #1
18ee4     01 38 46 F0 | 	shr	local14, #1
18ee8     1B 35 02 F6 | 	mov	local12, local13
18eec     1F 34 66 F0 | 	shl	local12, #31
18ef0     1A 39 42 F5 | 	or	local14, local12
18ef4     01 36 46 F0 | 	shr	local13, #1
18ef8     24 00 90 FD | 	jmp	#LR__2384
18efc                 | LR__2382
18efc     00 40 00 FF 
18f00     00 36 16 F2 | 	cmp	local13, ##8388608 wc
18f04     18 00 90 3D |  if_ae	jmp	#LR__2383
18f08     01 32 86 F1 | 	sub	local11, #1
18f0c     01 36 66 F0 | 	shl	local13, #1
18f10     1C 35 02 F6 | 	mov	local12, local14
18f14     1F 34 46 F0 | 	shr	local12, #31
18f18     1A 37 42 F5 | 	or	local13, local12
18f1c     01 38 66 F0 | 	shl	local14, #1
18f20                 | LR__2383
18f20                 | LR__2384
18f20     1B 13 02 F6 | 	mov	arg01, local13
18f24     1C 15 02 F6 | 	mov	arg02, local14
18f28     19 17 02 F6 | 	mov	arg03, local11
18f2c     13 19 02 F6 | 	mov	arg04, local05
18f30     20 2C B0 FD | 	call	#__system__pack_0438
18f34     F8 00 90 FD | 	jmp	#LR__2395
18f38                 | LR__2385
18f38     00 28 0E F2 | 	cmp	local06, #0 wz
18f3c     11 FB 01 56 |  if_ne	mov	result1, local03
18f40     EC 00 90 5D |  if_ne	jmp	#LR__2395
18f44     FF 30 0E F2 | 	cmp	local10, #255 wz
18f48     00 F8 3F AF 
18f4c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
18f50     DC 00 90 AD |  if_e	jmp	#LR__2395
18f54     02 26 46 F5 | 	or	local05, #2
18f58     00 12 06 F6 | 	mov	arg01, #0
18f5c     00 14 06 F6 | 	mov	arg02, #0
18f60     15 17 02 F6 | 	mov	arg03, local07
18f64     13 19 02 F6 | 	mov	arg04, local05
18f68     E8 2B B0 FD | 	call	#__system__pack_0438
18f6c     C0 00 90 FD | 	jmp	#LR__2395
18f70                 | LR__2386
18f70     00 2E 0E F2 | 	cmp	local09, #0 wz
18f74     12 FB 01 56 |  if_ne	mov	result1, local04
18f78     B4 00 90 5D |  if_ne	jmp	#LR__2395
18f7c     13 19 02 F6 | 	mov	arg04, local05
18f80     08 18 46 F5 | 	or	arg04, #8
18f84     00 12 06 F6 | 	mov	arg01, #0
18f88     00 14 06 F6 | 	mov	arg02, #0
18f8c     00 16 06 F6 | 	mov	arg03, #0
18f90     C0 2B B0 FD | 	call	#__system__pack_0438
18f94     98 00 90 FD | 	jmp	#LR__2395
18f98                 | LR__2387
18f98     00 28 0E F2 | 	cmp	local06, #0 wz
18f9c     20 00 90 AD |  if_e	jmp	#LR__2390
18fa0     01 28 66 F0 | 	shl	local06, #1
18fa4     97 0A 48 FB | 	callpa	#(@LR__2389-@LR__2388)>>2,fcache_load_ptr_
18fa8                 | LR__2388
18fa8     00 40 00 FF 
18fac     00 28 16 F2 | 	cmp	local06, ##8388608 wc
18fb0     01 2A 86 C1 |  if_b	sub	local07, #1
18fb4     01 28 66 C0 |  if_b	shl	local06, #1
18fb8     EC FF 9F CD |  if_b	jmp	#LR__2388
18fbc                 | LR__2389
18fbc     B8 FE 9F FD | 	jmp	#LR__2380
18fc0                 | LR__2390
18fc0     00 30 0E F2 | 	cmp	local10, #0 wz
18fc4     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
18fc8     00 F8 3F AF 
18fcc     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
18fd0     5C 00 90 AD |  if_e	jmp	#LR__2395
18fd4     13 19 02 F6 | 	mov	arg04, local05
18fd8     08 18 46 F5 | 	or	arg04, #8
18fdc     00 12 06 F6 | 	mov	arg01, #0
18fe0     00 14 06 F6 | 	mov	arg02, #0
18fe4     00 16 06 F6 | 	mov	arg03, #0
18fe8     68 2B B0 FD | 	call	#__system__pack_0438
18fec     40 00 90 FD | 	jmp	#LR__2395
18ff0                 | LR__2391
18ff0     00 2E 0E F2 | 	cmp	local09, #0 wz
18ff4     20 00 90 AD |  if_e	jmp	#LR__2394
18ff8     01 2E 66 F0 | 	shl	local09, #1
18ffc     97 0A 48 FB | 	callpa	#(@LR__2393-@LR__2392)>>2,fcache_load_ptr_
19000                 | LR__2392
19000     00 40 00 FF 
19004     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
19008     01 30 86 C1 |  if_b	sub	local10, #1
1900c     01 2E 66 C0 |  if_b	shl	local09, #1
19010     EC FF 9F CD |  if_b	jmp	#LR__2392
19014                 | LR__2393
19014     6C FE 9F FD | 	jmp	#LR__2381
19018                 | LR__2394
19018     02 26 46 F5 | 	or	local05, #2
1901c     00 12 06 F6 | 	mov	arg01, #0
19020     00 14 06 F6 | 	mov	arg02, #0
19024     00 16 06 F6 | 	mov	arg03, #0
19028     13 19 02 F6 | 	mov	arg04, local05
1902c     24 2B B0 FD | 	call	#__system__pack_0438
19030                 | LR__2395
19030     A7 F0 03 F6 | 	mov	ptra, fp
19034     B2 00 A0 FD | 	call	#popregs_
19038                 | __system___float_div_ret
19038     2D 00 64 FD | 	ret
1903c                 | 
1903c                 | __system___float_cmp
1903c     00 C0 3F FF 
19040     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
19044     00 C0 3F CF 
19048     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
1904c     0B FB 01 36 |  if_ae	mov	result1, arg03
19050     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
19054     00 C0 7F FF 
19058     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
1905c     00 C0 7F CF 
19060     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
19064     0B FB 01 36 |  if_ae	mov	result1, arg03
19068     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
1906c     00 12 56 F2 | 	cmps	arg01, #0 wc
19070     2C 00 90 3D |  if_ae	jmp	#LR__2400
19074     00 14 56 F2 | 	cmps	arg02, #0 wc
19078     0A FB 01 C6 |  if_b	mov	result1, arg02
1907c     09 FB 81 C1 |  if_b	sub	result1, arg01
19080     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
19084     00 14 0E F2 | 	cmp	arg02, #0 wz
19088     00 00 40 AF 
1908c     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
19090     00 FA 05 A6 |  if_e	mov	result1, #0
19094     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
19098     01 FA 65 F6 | 	neg	result1, #1
1909c     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
190a0                 | LR__2400
190a0     00 14 56 F2 | 	cmps	arg02, #0 wc
190a4     1C 00 90 3D |  if_ae	jmp	#LR__2401
190a8     00 12 0E F2 | 	cmp	arg01, #0 wz
190ac     00 00 40 AF 
190b0     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
190b4     00 FA 05 A6 |  if_e	mov	result1, #0
190b8     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
190bc     01 FA 05 F6 | 	mov	result1, #1
190c0     08 00 90 FD | 	jmp	#__system___float_cmp_ret
190c4                 | LR__2401
190c4     0A 13 82 F1 | 	sub	arg01, arg02
190c8     09 FB 01 F6 | 	mov	result1, arg01
190cc                 | __system___float_cmp_ret
190cc     2D 00 64 FD | 	ret
190d0                 | 
190d0                 | __system___float_tointeger
190d0     02 4A 05 F6 | 	mov	COUNT_, #2
190d4     A8 00 A0 FD | 	call	#pushregs_
190d8     50 00 B0 FD | 	call	#__system___float_Unpack
190dc     FF FF 7F FF 
190e0     FF FD 55 F2 | 	cmps	result2, ##-1 wc
190e4     34 00 90 CD |  if_b	jmp	#LR__2410
190e8     1F FC 55 F2 | 	cmps	result2, #31 wc
190ec     2C 00 90 3D |  if_ae	jmp	#LR__2410
190f0     02 FE 65 F0 | 	shl	result3, #2
190f4     1E 1E 06 F6 | 	mov	local01, #30
190f8     FE 1E 82 F1 | 	sub	local01, result2
190fc     0F FF 41 F0 | 	shr	result3, local01
19100     FF 20 02 F6 | 	mov	local02, result3
19104     0A 21 02 F1 | 	add	local02, arg02
19108     01 20 46 F0 | 	shr	local02, #1
1910c     00 FA 0D F2 | 	cmp	result1, #0 wz
19110     10 21 62 56 |  if_ne	neg	local02, local02
19114     10 FB 01 F6 | 	mov	result1, local02
19118     04 00 90 FD | 	jmp	#LR__2411
1911c                 | LR__2410
1911c     00 FA 05 F6 | 	mov	result1, #0
19120                 | LR__2411
19120     A7 F0 03 F6 | 	mov	ptra, fp
19124     B2 00 A0 FD | 	call	#popregs_
19128                 | __system___float_tointeger_ret
19128     2D 00 64 FD | 	ret
1912c                 | 
1912c                 | __system___float_Unpack
1912c     09 01 02 F6 | 	mov	_var01, arg01
19130     1F 00 46 F0 | 	shr	_var01, #31
19134     09 03 02 F6 | 	mov	_var02, arg01
19138     01 02 66 F0 | 	shl	_var02, #1
1913c     18 02 4E F0 | 	shr	_var02, #24 wz
19140     17 13 06 F4 | 	bitl	arg01, #279
19144     06 12 66 50 |  if_ne	shl	arg01, #6
19148     1D 12 26 54 |  if_ne	bith	arg01, #29
1914c     1C 00 90 5D |  if_ne	jmp	#LR__2420
19150     09 05 92 F7 | 	encod	_var03, arg01 wc
19154     01 04 06 C1 |  if_b	add	_var03, #1
19158     17 04 86 F1 | 	sub	_var03, #23
1915c     02 03 02 F6 | 	mov	_var02, _var03
19160     07 FC 05 F6 | 	mov	result2, #7
19164     02 FD 81 F1 | 	sub	result2, _var03
19168     FE 12 62 F0 | 	shl	arg01, result2
1916c                 | LR__2420
1916c     7F 02 86 F1 | 	sub	_var02, #127
19170     09 FF 01 F6 | 	mov	result3, arg01
19174     00 FB 01 F6 | 	mov	result1, _var01
19178     01 FD 01 F6 | 	mov	result2, _var02
1917c                 | __system___float_Unpack_ret
1917c     2D 00 64 FD | 	ret
19180                 | 
19180                 | __system___float_Pack
19180     00 00 06 F6 | 	mov	_var01, #0
19184     00 16 0E F2 | 	cmp	arg03, #0 wz
19188     8C 00 90 AD |  if_e	jmp	#LR__2431
1918c     0B 03 92 F7 | 	encod	_var02, arg03 wc
19190     01 02 06 C1 |  if_b	add	_var02, #1
19194     21 00 06 F6 | 	mov	_var01, #33
19198     01 01 82 F1 | 	sub	_var01, _var02
1919c     00 17 62 F0 | 	shl	arg03, _var01
191a0     03 02 06 F6 | 	mov	_var02, #3
191a4     00 03 82 F1 | 	sub	_var02, _var01
191a8     01 15 02 F1 | 	add	arg02, _var02
191ac     0A 05 02 F6 | 	mov	_var03, arg02
191b0     00 17 06 F1 | 	add	arg03, #256
191b4     0B 03 02 F6 | 	mov	_var02, arg03
191b8     FF 02 2E F5 | 	andn	_var02, #255 wz
191bc     01 04 06 A1 |  if_e	add	_var03, #1
191c0     7F 04 06 F1 | 	add	_var03, #127
191c4     FF FF 7F FF 
191c8     E9 05 46 F3 | 	fges	_var03, ##-23
191cc     FF 04 66 F3 | 	fles	_var03, #255
191d0     01 04 56 F2 | 	cmps	_var03, #1 wc
191d4     1C 00 90 3D |  if_ae	jmp	#LR__2430
191d8     01 16 46 F0 | 	shr	arg03, #1
191dc     1F 02 C6 F9 | 	decod	_var02, #31
191e0     0B 03 02 F1 | 	add	_var02, arg03
191e4     02 05 62 F6 | 	neg	_var03, _var03
191e8     02 03 42 F0 | 	shr	_var02, _var03
191ec     01 17 02 F6 | 	mov	arg03, _var02
191f0     00 04 06 F6 | 	mov	_var03, #0
191f4                 | LR__2430
191f4     09 FB 01 F6 | 	mov	result1, arg01
191f8     1F FA 65 F0 | 	shl	result1, #31
191fc     02 03 02 F6 | 	mov	_var02, _var03
19200     17 02 66 F0 | 	shl	_var02, #23
19204     01 FB 41 F5 | 	or	result1, _var02
19208     0B 07 02 F6 | 	mov	_var04, arg03
1920c     09 06 46 F0 | 	shr	_var04, #9
19210     03 FB 41 F5 | 	or	result1, _var04
19214     04 00 90 FD | 	jmp	#__system___float_Pack_ret
19218                 | LR__2431
19218     00 FB 01 F6 | 	mov	result1, _var01
1921c                 | __system___float_Pack_ret
1921c     2D 00 64 FD | 	ret
19220                 | 
19220                 | __system___basic_print_float
19220     05 4A 05 F6 | 	mov	COUNT_, #5
19224     A8 00 A0 FD | 	call	#pushregs_
19228     09 1F 02 F6 | 	mov	local01, arg01
1922c     0A 21 02 F6 | 	mov	local02, arg02
19230     0B 23 0A F6 | 	mov	local03, arg03 wz
19234     0C 25 02 F6 | 	mov	local04, arg04
19238     14 00 90 5D |  if_ne	jmp	#LR__2440
1923c     23 24 0E F2 | 	cmp	local04, #35 wz
19240     80 02 10 AF 
19244     00 26 06 A6 |  if_e	mov	local05, ##537198592
19248     1D 26 C6 59 |  if_ne	decod	local05, #29
1924c     13 23 02 F6 | 	mov	local03, local05
19250                 | LR__2440
19250     0F 13 02 F6 | 	mov	arg01, local01
19254     C8 24 B0 FD | 	call	#__system___gettxfunc
19258     FD 26 0A F6 | 	mov	local05, result1 wz
1925c     00 FA 05 A6 |  if_e	mov	result1, #0
19260     13 13 02 56 |  if_ne	mov	arg01, local05
19264     11 15 02 56 |  if_ne	mov	arg02, local03
19268     10 17 02 56 |  if_ne	mov	arg03, local02
1926c     12 19 02 56 |  if_ne	mov	arg04, local04
19270     68 E1 BF 5D |  if_ne	call	#__system___fmtfloat
19274     A7 F0 03 F6 | 	mov	ptra, fp
19278     B2 00 A0 FD | 	call	#popregs_
1927c                 | __system___basic_print_float_ret
1927c     2D 00 64 FD | 	ret
19280                 | 
19280                 | __system____builtin_atoi
19280     07 4A 05 F6 | 	mov	COUNT_, #7
19284     A8 00 A0 FD | 	call	#pushregs_
19288                 | __system____builtin_atoi_enter
19288     09 1F 02 F6 | 	mov	local01, arg01
1928c     0A 21 02 F6 | 	mov	local02, arg02
19290     00 22 06 F6 | 	mov	local03, #0
19294     00 24 06 F6 | 	mov	local04, #0
19298     00 26 06 F6 | 	mov	local05, #0
1929c     97 08 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
192a0                 | LR__2450
192a0     0F 29 C2 FA | 	rdbyte	local06, local01
192a4     20 28 0E F2 | 	cmp	local06, #32 wz
192a8     01 1E 06 A1 |  if_e	add	local01, #1
192ac     F0 FF 9F AD |  if_e	jmp	#LR__2450
192b0                 | LR__2451
192b0     0F 2B C2 FA | 	rdbyte	local07, local01
192b4                 | LR__2452
192b4     2D 2A 0E F2 | 	cmp	local07, #45 wz
192b8     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
192bc     18 00 90 5D |  if_ne	jmp	#LR__2453
192c0     01 1E 06 F1 | 	add	local01, #1
192c4     2D 2A 0E F2 | 	cmp	local07, #45 wz
192c8     01 28 06 A6 |  if_e	mov	local06, #1
192cc     14 27 C2 A2 |  if_e	subr	local05, local06
192d0     0F 2B C2 FA | 	rdbyte	local07, local01
192d4     DC FF 9F FD | 	jmp	#LR__2452
192d8                 | LR__2453
192d8     97 48 48 FB | 	callpa	#(@LR__2461-@LR__2454)>>2,fcache_load_ptr_
192dc                 | LR__2454
192dc                 | LR__2455
192dc     0F 2B C2 FA | 	rdbyte	local07, local01
192e0     5F 2A 0E F2 | 	cmp	local07, #95 wz
192e4     01 1E 06 F1 | 	add	local01, #1
192e8     F0 FF 9F AD |  if_e	jmp	#LR__2455
192ec     30 2A 0E F2 | 	cmp	local07, #48 wz
192f0     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
192f4     00 24 06 A6 |  if_e	mov	local04, #0
192f8     60 00 90 AD |  if_e	jmp	#LR__2460
192fc     31 2A 56 F2 | 	cmps	local07, #49 wc
19300     18 00 90 CD |  if_b	jmp	#LR__2456
19304     3A 2A 56 F2 | 	cmps	local07, #58 wc
19308     15 25 02 C6 |  if_b	mov	local04, local07
1930c     30 24 86 C1 |  if_b	sub	local04, #48
19310     00 20 0E C2 |  if_b	cmp	local02, #0 wz
19314     0A 20 06 86 |  if_c_and_z	mov	local02, #10
19318     40 00 90 CD |  if_b	jmp	#LR__2459
1931c                 | LR__2456
1931c     0B 20 56 F2 | 	cmps	local02, #11 wc
19320     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
19324     14 00 90 CD |  if_b	jmp	#LR__2457
19328     67 2A 56 F2 | 	cmps	local07, #103 wc
1932c     61 2A 86 C1 |  if_b	sub	local07, #97
19330     0A 24 06 C6 |  if_b	mov	local04, #10
19334     15 25 02 C1 |  if_b	add	local04, local07
19338     20 00 90 CD |  if_b	jmp	#LR__2458
1933c                 | LR__2457
1933c     0B 20 56 F2 | 	cmps	local02, #11 wc
19340     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
19344     24 00 90 CD |  if_b	jmp	#LR__2462
19348     47 2A 56 F2 | 	cmps	local07, #71 wc
1934c     41 2A 86 C1 |  if_b	sub	local07, #65
19350     0A 24 06 C6 |  if_b	mov	local04, #10
19354     15 25 02 C1 |  if_b	add	local04, local07
19358     10 00 90 3D |  if_ae	jmp	#LR__2462
1935c                 | LR__2458
1935c                 | LR__2459
1935c                 | LR__2460
1935c     11 21 02 FD | 	qmul	local02, local03
19360     18 22 62 FD | 	getqx	local03
19364     12 23 02 F1 | 	add	local03, local04
19368     70 FF 9F FD | 	jmp	#LR__2454
1936c                 | LR__2461
1936c                 | LR__2462
1936c     00 20 0E F2 | 	cmp	local02, #0 wz
19370     64 00 90 5D |  if_ne	jmp	#LR__2468
19374     78 2A 0E F2 | 	cmp	local07, #120 wz
19378     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
1937c     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
19380     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
19384     14 00 90 5D |  if_ne	jmp	#LR__2463
19388     0F 13 02 F6 | 	mov	arg01, local01
1938c     10 14 06 F6 | 	mov	arg02, #16
19390     EC FE BF FD | 	call	#__system____builtin_atoi
19394     FD 22 02 F6 | 	mov	local03, result1
19398     3C 00 90 FD | 	jmp	#LR__2467
1939c                 | LR__2463
1939c     62 2A 0E F2 | 	cmp	local07, #98 wz
193a0     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
193a4     14 00 90 5D |  if_ne	jmp	#LR__2464
193a8     0F 13 02 F6 | 	mov	arg01, local01
193ac     02 14 06 F6 | 	mov	arg02, #2
193b0     CC FE BF FD | 	call	#__system____builtin_atoi
193b4     FD 22 02 F6 | 	mov	local03, result1
193b8     1C 00 90 FD | 	jmp	#LR__2466
193bc                 | LR__2464
193bc     6F 2A 0E F2 | 	cmp	local07, #111 wz
193c0     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
193c4     10 00 90 5D |  if_ne	jmp	#LR__2465
193c8     0F 13 02 F6 | 	mov	arg01, local01
193cc     08 14 06 F6 | 	mov	arg02, #8
193d0     AC FE BF FD | 	call	#__system____builtin_atoi
193d4     FD 22 02 F6 | 	mov	local03, result1
193d8                 | LR__2465
193d8                 | LR__2466
193d8                 | LR__2467
193d8                 | LR__2468
193d8     00 26 0E F2 | 	cmp	local05, #0 wz
193dc     11 23 62 56 |  if_ne	neg	local03, local03
193e0     11 FB 01 F6 | 	mov	result1, local03
193e4     A7 F0 03 F6 | 	mov	ptra, fp
193e8     B2 00 A0 FD | 	call	#popregs_
193ec                 | __system____builtin_atoi_ret
193ec     2D 00 64 FD | 	ret
193f0                 | 
193f0                 | __system____builtin_atof
193f0     07 4A 05 F6 | 	mov	COUNT_, #7
193f4     A8 00 A0 FD | 	call	#pushregs_
193f8     09 1F 02 F6 | 	mov	local01, arg01
193fc     00 20 06 F6 | 	mov	local02, #0
19400     00 22 06 F6 | 	mov	local03, #0
19404     00 24 06 F6 | 	mov	local04, #0
19408     00 26 06 F6 | 	mov	local05, #0
1940c     97 08 48 FB | 	callpa	#(@LR__2471-@LR__2470)>>2,fcache_load_ptr_
19410                 | LR__2470
19410     0F 17 C2 FA | 	rdbyte	arg03, local01
19414     20 16 0E F2 | 	cmp	arg03, #32 wz
19418     01 1E 06 A1 |  if_e	add	local01, #1
1941c     F0 FF 9F AD |  if_e	jmp	#LR__2470
19420                 | LR__2471
19420     0F 29 C2 FA | 	rdbyte	local06, local01
19424                 | LR__2472
19424     2B 28 0E F2 | 	cmp	local06, #43 wz
19428     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
1942c     14 00 90 5D |  if_ne	jmp	#LR__2473
19430     2D 28 0E F2 | 	cmp	local06, #45 wz
19434     1F 24 E6 A4 |  if_e	bitnot	local04, #31
19438     01 1E 06 F1 | 	add	local01, #1
1943c     0F 29 C2 FA | 	rdbyte	local06, local01
19440     E0 FF 9F FD | 	jmp	#LR__2472
19444                 | LR__2473
19444                 | LR__2474
19444     97 08 48 FB | 	callpa	#(@LR__2476-@LR__2475)>>2,fcache_load_ptr_
19448                 | LR__2475
19448     0F 29 C2 FA | 	rdbyte	local06, local01
1944c     5F 28 0E F2 | 	cmp	local06, #95 wz
19450     01 1E 06 F1 | 	add	local01, #1
19454     F0 FF 9F AD |  if_e	jmp	#LR__2475
19458                 | LR__2476
19458     00 28 0E F2 | 	cmp	local06, #0 wz
1945c     5C 00 90 AD |  if_e	jmp	#LR__2478
19460     30 28 56 F2 | 	cmps	local06, #48 wc
19464     44 00 90 CD |  if_b	jmp	#LR__2477
19468     3A 28 56 F2 | 	cmps	local06, #58 wc
1946c     3C 00 90 3D |  if_ae	jmp	#LR__2477
19470     10 13 02 F6 | 	mov	arg01, local02
19474     00 90 20 FF 
19478     00 14 06 F6 | 	mov	arg02, ##1092616192
1947c     88 F7 BF FD | 	call	#__system___float_mul
19480     FD 20 02 F6 | 	mov	local02, result1
19484     30 28 86 F1 | 	sub	local06, #48
19488     14 13 02 F6 | 	mov	arg01, local06
1948c     4C F4 BF FD | 	call	#__system___float_fromuns
19490     FD 14 02 F6 | 	mov	arg02, result1
19494     10 13 02 F6 | 	mov	arg01, local02
19498     74 F4 BF FD | 	call	#__system___float_add
1949c     FD 20 02 F6 | 	mov	local02, result1
194a0     00 26 0E F2 | 	cmp	local05, #0 wz
194a4     01 22 86 51 |  if_ne	sub	local03, #1
194a8     98 FF 9F FD | 	jmp	#LR__2474
194ac                 | LR__2477
194ac     2E 28 0E F2 | 	cmp	local06, #46 wz
194b0     00 26 0E A2 |  if_e	cmp	local05, #0 wz
194b4     01 26 06 A6 |  if_e	mov	local05, #1
194b8     88 FF 9F AD |  if_e	jmp	#LR__2474
194bc                 | LR__2478
194bc     45 28 0E F2 | 	cmp	local06, #69 wz
194c0     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
194c4     18 00 90 5D |  if_ne	jmp	#LR__2479
194c8     0F 13 02 F6 | 	mov	arg01, local01
194cc     00 14 06 F6 | 	mov	arg02, #0
194d0     AC FD BF FD | 	call	#__system____builtin_atoi
194d4     11 FB 01 F1 | 	add	result1, local03
194d8     FD 2A 02 F6 | 	mov	local07, result1
194dc     04 00 90 FD | 	jmp	#LR__2480
194e0                 | LR__2479
194e0     11 2B 02 F6 | 	mov	local07, local03
194e4                 | LR__2480
194e4     15 17 02 F6 | 	mov	arg03, local07
194e8     10 13 02 F6 | 	mov	arg01, local02
194ec     00 90 20 FF 
194f0     00 14 06 F6 | 	mov	arg02, ##1092616192
194f4     44 04 B0 FD | 	call	#__system___float_pow_n
194f8     12 FB 61 F5 | 	xor	result1, local04
194fc     A7 F0 03 F6 | 	mov	ptra, fp
19500     B2 00 A0 FD | 	call	#popregs_
19504                 | __system____builtin_atof_ret
19504     2D 00 64 FD | 	ret
19508                 | 
19508                 | __system____builtin_ilogb
19508     20 FC BF FD | 	call	#__system___float_Unpack
1950c     00 FE 0D F2 | 	cmp	result3, #0 wz
19510     00 00 40 AF 
19514     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
19518     24 00 90 AD |  if_e	jmp	#LR__2491
1951c     80 FC 0D F2 | 	cmp	result2, #128 wz
19520     18 00 90 5D |  if_ne	jmp	#LR__2490
19524     00 00 10 FF 
19528     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
1952c     1E FA CD A9 |  if_e	bmask	result1, #30
19530     0C 00 90 AD |  if_e	jmp	#LR__2491
19534     1F FA C5 F9 | 	decod	result1, #31
19538     04 00 90 FD | 	jmp	#LR__2491
1953c                 | LR__2490
1953c     FE FA 01 F6 | 	mov	result1, result2
19540                 | LR__2491
19540                 | __system____builtin_ilogb_ret
19540     2D 00 64 FD | 	ret
19544                 | 
19544                 | __system____builtin_sinf
19544     03 4A 05 F6 | 	mov	COUNT_, #3
19548     A8 00 A0 FD | 	call	#pushregs_
1954c     09 1F 02 F6 | 	mov	local01, arg01
19550     66 E6 1E FF 
19554     CD 14 06 F6 | 	mov	arg02, ##1036831949
19558     01 16 06 F6 | 	mov	arg03, #1
1955c     DC FA BF FD | 	call	#__system___float_cmp
19560     00 FA 55 F2 | 	cmps	result1, #0 wc
19564     5C 00 90 3D |  if_ae	jmp	#LR__2500
19568     0F 13 02 F6 | 	mov	arg01, local01
1956c     66 E6 5E FF 
19570     CD 14 06 F6 | 	mov	arg02, ##-1110651699
19574     01 16 66 F6 | 	neg	arg03, #1
19578     C0 FA BF FD | 	call	#__system___float_cmp
1957c     01 FA 55 F2 | 	cmps	result1, #1 wc
19580     40 00 90 CD |  if_b	jmp	#LR__2500
19584     0F 13 02 F6 | 	mov	arg01, local01
19588     0F 15 02 F6 | 	mov	arg02, local01
1958c     78 F6 BF FD | 	call	#__system___float_mul
19590     FD 12 02 F6 | 	mov	arg01, result1
19594     0F 15 02 F6 | 	mov	arg02, local01
19598     6C F6 BF FD | 	call	#__system___float_mul
1959c     FD 12 02 F6 | 	mov	arg01, result1
195a0     00 60 20 FF 
195a4     00 14 06 F6 | 	mov	arg02, ##1086324736
195a8     60 F8 BF FD | 	call	#__system___float_div
195ac     FD 14 02 F6 | 	mov	arg02, result1
195b0     0F 13 02 F6 | 	mov	arg01, local01
195b4     1F 14 E6 F4 | 	bitnot	arg02, #31
195b8     54 F3 BF FD | 	call	#__system___float_add
195bc     FD 20 02 F6 | 	mov	local02, result1
195c0     54 00 90 FD | 	jmp	#LR__2501
195c4                 | LR__2500
195c4     0F 13 02 F6 | 	mov	arg01, local01
195c8     7C 91 26 FF 
195cc     83 15 06 F6 | 	mov	arg02, ##1294137731
195d0     34 F6 BF FD | 	call	#__system___float_mul
195d4     FD 12 02 F6 | 	mov	arg01, result1
195d8     00 14 06 F6 | 	mov	arg02, #0
195dc     F0 FA BF FD | 	call	#__system___float_tointeger
195e0     02 FA 65 F0 | 	shl	result1, #2
195e4     00 00 A0 FF 
195e8     FD 00 48 FD | 	qrotate	##1073741824, result1
195ec     19 12 62 FD | 	getqy	arg01
195f0     09 13 52 F6 | 	abs	arg01, arg01 wc
195f4     1F 22 C6 C9 |  if_b	decod	local03, #31
195f8     00 22 06 36 |  if_ae	mov	local03, #0
195fc     DC F2 BF FD | 	call	#__system___float_fromuns
19600     11 FB 61 F5 | 	xor	result1, local03
19604     FD 12 02 F6 | 	mov	arg01, result1
19608     00 40 27 FF 
1960c     00 14 06 F6 | 	mov	arg02, ##1317011456
19610     F8 F7 BF FD | 	call	#__system___float_div
19614     FD 20 02 F6 | 	mov	local02, result1
19618                 | LR__2501
19618     10 FB 01 F6 | 	mov	result1, local02
1961c     A7 F0 03 F6 | 	mov	ptra, fp
19620     B2 00 A0 FD | 	call	#popregs_
19624                 | __system____builtin_sinf_ret
19624     2D 00 64 FD | 	ret
19628                 | 
19628                 | __system____builtin_exp2f
19628     04 4A 05 F6 | 	mov	COUNT_, #4
1962c     A8 00 A0 FD | 	call	#pushregs_
19630     09 1F 02 F6 | 	mov	local01, arg01
19634     00 7F 21 FF 
19638     00 14 06 F6 | 	mov	arg02, ##1123942400
1963c     01 16 66 F6 | 	neg	arg03, #1
19640     F8 F9 BF FD | 	call	#__system___float_cmp
19644     00 FA 55 F2 | 	cmps	result1, #0 wc
19648     00 C0 3F 3F 
1964c     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
19650     DC 00 90 3D |  if_ae	jmp	#LR__2511
19654     0F 13 02 F6 | 	mov	arg01, local01
19658     00 7F 61 FF 
1965c     00 14 06 F6 | 	mov	arg02, ##-1023541248
19660     01 16 06 F6 | 	mov	arg03, #1
19664     D4 F9 BF FD | 	call	#__system___float_cmp
19668     00 FA 55 F2 | 	cmps	result1, #0 wc
1966c     00 FA 05 C6 |  if_b	mov	result1, #0
19670     BC 00 90 CD |  if_b	jmp	#LR__2511
19674     0F 13 02 F6 | 	mov	arg01, local01
19678     00 14 06 F6 | 	mov	arg02, #0
1967c     50 FA BF FD | 	call	#__system___float_tointeger
19680     FD 20 02 F6 | 	mov	local02, result1
19684     10 13 52 F6 | 	abs	arg01, local02 wc
19688     1F 22 C6 C9 |  if_b	decod	local03, #31
1968c     00 22 06 36 |  if_ae	mov	local03, #0
19690     48 F2 BF FD | 	call	#__system___float_fromuns
19694     11 FB 61 F5 | 	xor	result1, local03
19698     FD 14 02 F6 | 	mov	arg02, result1
1969c     0F 13 02 F6 | 	mov	arg01, local01
196a0     1F 14 E6 F4 | 	bitnot	arg02, #31
196a4     68 F2 BF FD | 	call	#__system___float_add
196a8     FD 24 02 F6 | 	mov	local04, result1
196ac     12 13 02 F6 | 	mov	arg01, local04
196b0     00 14 06 F6 | 	mov	arg02, #0
196b4     01 16 06 F6 | 	mov	arg03, #1
196b8     80 F9 BF FD | 	call	#__system___float_cmp
196bc     00 FA 55 F2 | 	cmps	result1, #0 wc
196c0     18 00 90 3D |  if_ae	jmp	#LR__2510
196c4     12 13 02 F6 | 	mov	arg01, local04
196c8     00 C0 1F FF 
196cc     00 14 06 F6 | 	mov	arg02, ##1065353216
196d0     3C F2 BF FD | 	call	#__system___float_add
196d4     FD 24 02 F6 | 	mov	local04, result1
196d8     01 20 86 F1 | 	sub	local02, #1
196dc                 | LR__2510
196dc     7F 20 06 F1 | 	add	local02, #127
196e0     17 20 66 F0 | 	shl	local02, #23
196e4     12 13 02 F6 | 	mov	arg01, local04
196e8     00 80 26 FF 
196ec     00 14 06 F6 | 	mov	arg02, ##1291845632
196f0     14 F5 BF FD | 	call	#__system___float_mul
196f4     FD 12 02 F6 | 	mov	arg01, result1
196f8     00 14 06 F6 | 	mov	arg02, #0
196fc     D0 F9 BF FD | 	call	#__system___float_tointeger
19700     FD 24 0A F6 | 	mov	local04, result1 wz
19704     10 FB 01 A6 |  if_e	mov	result1, local02
19708     24 00 90 AD |  if_e	jmp	#LR__2511
1970c     3E 24 26 F4 | 	bith	local04, #62
19710     0F 24 62 FD | 	qexp	local04
19714     10 13 02 F6 | 	mov	arg01, local02
19718     18 14 62 FD | 	getqx	arg02
1971c     01 14 06 F1 | 	add	arg02, #1
19720     01 14 46 F0 | 	shr	arg02, #1
19724     00 80 1F FF 
19728     00 14 06 F1 | 	add	arg02, ##1056964608
1972c     D8 F4 BF FD | 	call	#__system___float_mul
19730                 | LR__2511
19730     A7 F0 03 F6 | 	mov	ptra, fp
19734     B2 00 A0 FD | 	call	#popregs_
19738                 | __system____builtin_exp2f_ret
19738     2D 00 64 FD | 	ret
1973c                 | 
1973c                 | __system____builtin_log2f
1973c     06 4A 05 F6 | 	mov	COUNT_, #6
19740     A8 00 A0 FD | 	call	#pushregs_
19744     09 1F 02 F6 | 	mov	local01, arg01
19748     09 21 0A F6 | 	mov	local02, arg01 wz
1974c     00 00 40 5F 
19750     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
19754     00 40 00 AF 
19758     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1975c     08 01 90 AD |  if_e	jmp	#LR__2524
19760     00 20 56 F2 | 	cmps	local02, #0 wc
19764     00 E0 3F CF 
19768     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
1976c     F8 00 90 CD |  if_b	jmp	#LR__2524
19770     0F 13 02 F6 | 	mov	arg01, local01
19774     00 90 20 FF 
19778     00 14 06 F6 | 	mov	arg02, ##1092616192
1977c     01 16 06 F6 | 	mov	arg03, #1
19780     B8 F8 BF FD | 	call	#__system___float_cmp
19784     00 FA 0D F2 | 	cmp	result1, #0 wz
19788     4D 2A 20 AF 
1978c     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
19790     D4 00 90 AD |  if_e	jmp	#LR__2524
19794     0F 13 02 F6 | 	mov	arg01, local01
19798     FC 16 20 FF 
1979c     54 14 06 F6 | 	mov	arg02, ##1076754516
197a0     01 16 06 F6 | 	mov	arg03, #1
197a4     94 F8 BF FD | 	call	#__system___float_cmp
197a8     00 FA 0D F2 | 	cmp	result1, #0 wz
197ac     55 DC 1F AF 
197b0     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
197b4     B0 00 90 AD |  if_e	jmp	#LR__2524
197b8     10 23 02 F6 | 	mov	local03, local02
197bc     17 22 46 F0 | 	shr	local03, #23
197c0     11 23 E2 F8 | 	getbyte	local03, local03, #0
197c4     17 21 06 F4 | 	bitl	local02, #279
197c8     10 25 02 F6 | 	mov	local04, local02
197cc     FF 22 0E F2 | 	cmp	local03, #255 wz
197d0     1C 00 90 5D |  if_ne	jmp	#LR__2520
197d4     00 24 0E F2 | 	cmp	local04, #0 wz
197d8     00 C0 3F 5F 
197dc     00 26 06 56 |  if_ne	mov	local05, ##2139095040
197e0     00 E0 3F AF 
197e4     00 26 06 A6 |  if_e	mov	local05, ##2143289344
197e8     13 FB 01 F6 | 	mov	result1, local05
197ec     78 00 90 FD | 	jmp	#LR__2524
197f0                 | LR__2520
197f0     00 22 0E F2 | 	cmp	local03, #0 wz
197f4     17 24 26 54 |  if_ne	bith	local04, #23
197f8     7F 22 86 51 |  if_ne	sub	local03, #127
197fc     28 00 90 5D |  if_ne	jmp	#LR__2523
19800     00 24 0E F2 | 	cmp	local04, #0 wz
19804     00 40 00 AF 
19808     00 FA 65 A6 |  if_e	neg	result1, ##8388608
1980c     58 00 90 AD |  if_e	jmp	#LR__2524
19810     7E 22 66 F6 | 	neg	local03, #126
19814     97 08 48 FB | 	callpa	#(@LR__2522-@LR__2521)>>2,fcache_load_ptr_
19818                 | LR__2521
19818     17 24 2E F4 | 	testbn	local04, #23 wz
1981c     01 24 66 A0 |  if_e	shl	local04, #1
19820     01 22 06 A1 |  if_e	add	local03, #1
19824     F0 FF 9F AD |  if_e	jmp	#LR__2521
19828                 | LR__2522
19828                 | LR__2523
19828     0E 24 62 FD | 	qlog	local04
1982c     01 22 86 F1 | 	sub	local03, #1
19830     11 13 52 F6 | 	abs	arg01, local03 wc
19834     1F 28 C6 C9 |  if_b	decod	local06, #31
19838     00 28 06 36 |  if_ae	mov	local06, #0
1983c     18 26 62 FD | 	getqx	local05
19840     9B 26 06 F4 | 	bitl	local05, #155
19844     08 26 06 F1 | 	add	local05, #8
19848     04 26 46 F0 | 	shr	local05, #4
1984c     00 C0 1F FF 
19850     00 26 06 F1 | 	add	local05, ##1065353216
19854     84 F0 BF FD | 	call	#__system___float_fromuns
19858     14 FB 61 F5 | 	xor	result1, local06
1985c     FD 14 02 F6 | 	mov	arg02, result1
19860     13 13 02 F6 | 	mov	arg01, local05
19864     A8 F0 BF FD | 	call	#__system___float_add
19868                 | LR__2524
19868     A7 F0 03 F6 | 	mov	ptra, fp
1986c     B2 00 A0 FD | 	call	#popregs_
19870                 | __system____builtin_log2f_ret
19870     2D 00 64 FD | 	ret
19874                 | 
19874                 | __system____builtin_powf
19874     04 4A 05 F6 | 	mov	COUNT_, #4
19878     A8 00 A0 FD | 	call	#pushregs_
1987c     09 1F 02 F6 | 	mov	local01, arg01
19880     0A 21 02 F6 | 	mov	local02, arg02
19884     10 13 02 F6 | 	mov	arg01, local02
19888     00 14 06 F6 | 	mov	arg02, #0
1988c     40 F8 BF FD | 	call	#__system___float_tointeger
19890     FD 22 02 F6 | 	mov	local03, result1
19894     11 13 52 F6 | 	abs	arg01, local03 wc
19898     1F 24 C6 C9 |  if_b	decod	local04, #31
1989c     00 24 06 36 |  if_ae	mov	local04, #0
198a0     38 F0 BF FD | 	call	#__system___float_fromuns
198a4     12 FB 61 F5 | 	xor	result1, local04
198a8     FD 12 02 F6 | 	mov	arg01, result1
198ac     10 15 02 F6 | 	mov	arg02, local02
198b0     01 16 06 F6 | 	mov	arg03, #1
198b4     84 F7 BF FD | 	call	#__system___float_cmp
198b8     00 FA 0D F2 | 	cmp	result1, #0 wz
198bc     18 00 90 5D |  if_ne	jmp	#LR__2530
198c0     00 C0 1F FF 
198c4     00 12 06 F6 | 	mov	arg01, ##1065353216
198c8     0F 15 02 F6 | 	mov	arg02, local01
198cc     11 17 02 F6 | 	mov	arg03, local03
198d0     68 00 B0 FD | 	call	#__system___float_pow_n
198d4     58 00 90 FD | 	jmp	#LR__2531
198d8                 | LR__2530
198d8     0F 13 02 F6 | 	mov	arg01, local01
198dc     00 14 06 F6 | 	mov	arg02, #0
198e0     01 16 06 F6 | 	mov	arg03, #1
198e4     54 F7 BF FD | 	call	#__system___float_cmp
198e8     00 FA 55 F2 | 	cmps	result1, #0 wc
198ec     00 E0 3F CF 
198f0     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
198f4     38 00 90 CD |  if_b	jmp	#LR__2531
198f8     0F 13 02 F6 | 	mov	arg01, local01
198fc     00 14 06 F6 | 	mov	arg02, #0
19900     01 16 06 F6 | 	mov	arg03, #1
19904     34 F7 BF FD | 	call	#__system___float_cmp
19908     00 FA 0D F2 | 	cmp	result1, #0 wz
1990c     00 FA 05 A6 |  if_e	mov	result1, #0
19910     1C 00 90 AD |  if_e	jmp	#LR__2531
19914     0F 13 02 F6 | 	mov	arg01, local01
19918     20 FE BF FD | 	call	#__system____builtin_log2f
1991c     FD 12 02 F6 | 	mov	arg01, result1
19920     10 15 02 F6 | 	mov	arg02, local02
19924     E0 F2 BF FD | 	call	#__system___float_mul
19928     FD 12 02 F6 | 	mov	arg01, result1
1992c     F8 FC BF FD | 	call	#__system____builtin_exp2f
19930                 | LR__2531
19930     A7 F0 03 F6 | 	mov	ptra, fp
19934     B2 00 A0 FD | 	call	#popregs_
19938                 | __system____builtin_powf_ret
19938     2D 00 64 FD | 	ret
1993c                 | 
1993c                 | __system___float_pow_n
1993c     05 4A 05 F6 | 	mov	COUNT_, #5
19940     A8 00 A0 FD | 	call	#pushregs_
19944     09 1F 02 F6 | 	mov	local01, arg01
19948     0A 21 02 F6 | 	mov	local02, arg02
1994c     0B 23 02 F6 | 	mov	local03, arg03
19950     00 22 56 F2 | 	cmps	local03, #0 wc
19954     18 00 90 3D |  if_ae	jmp	#LR__2540
19958     01 24 06 F6 | 	mov	local04, #1
1995c     11 23 62 F6 | 	neg	local03, local03
19960     00 22 56 F2 | 	cmps	local03, #0 wc
19964     00 FA 05 C6 |  if_b	mov	result1, #0
19968     94 00 90 CD |  if_b	jmp	#LR__2548
1996c     04 00 90 FD | 	jmp	#LR__2541
19970                 | LR__2540
19970     00 24 06 F6 | 	mov	local04, #0
19974                 | LR__2541
19974     00 C0 1F FF 
19978     00 26 06 F6 | 	mov	local05, ##1065353216
1997c                 | LR__2542
1997c     01 22 56 F2 | 	cmps	local03, #1 wc
19980     30 00 90 CD |  if_b	jmp	#LR__2544
19984     01 22 CE F7 | 	test	local03, #1 wz
19988     10 00 90 AD |  if_e	jmp	#LR__2543
1998c     13 13 02 F6 | 	mov	arg01, local05
19990     10 15 02 F6 | 	mov	arg02, local02
19994     70 F2 BF FD | 	call	#__system___float_mul
19998     FD 26 02 F6 | 	mov	local05, result1
1999c                 | LR__2543
1999c     01 22 C6 F0 | 	sar	local03, #1
199a0     10 13 02 F6 | 	mov	arg01, local02
199a4     10 15 02 F6 | 	mov	arg02, local02
199a8     5C F2 BF FD | 	call	#__system___float_mul
199ac     FD 20 02 F6 | 	mov	local02, result1
199b0     C8 FF 9F FD | 	jmp	#LR__2542
199b4                 | LR__2544
199b4     00 24 0E F2 | 	cmp	local04, #0 wz
199b8     14 00 90 AD |  if_e	jmp	#LR__2545
199bc     0F 13 02 F6 | 	mov	arg01, local01
199c0     13 15 02 F6 | 	mov	arg02, local05
199c4     44 F4 BF FD | 	call	#__system___float_div
199c8     FD 26 02 F6 | 	mov	local05, result1
199cc     2C 00 90 FD | 	jmp	#LR__2547
199d0                 | LR__2545
199d0     0F 13 02 F6 | 	mov	arg01, local01
199d4     00 C0 1F FF 
199d8     00 14 06 F6 | 	mov	arg02, ##1065353216
199dc     01 16 06 F6 | 	mov	arg03, #1
199e0     58 F6 BF FD | 	call	#__system___float_cmp
199e4     00 FA 0D F2 | 	cmp	result1, #0 wz
199e8     10 00 90 AD |  if_e	jmp	#LR__2546
199ec     0F 13 02 F6 | 	mov	arg01, local01
199f0     13 15 02 F6 | 	mov	arg02, local05
199f4     10 F2 BF FD | 	call	#__system___float_mul
199f8     FD 26 02 F6 | 	mov	local05, result1
199fc                 | LR__2546
199fc                 | LR__2547
199fc     13 FB 01 F6 | 	mov	result1, local05
19a00                 | LR__2548
19a00     A7 F0 03 F6 | 	mov	ptra, fp
19a04     B2 00 A0 FD | 	call	#popregs_
19a08                 | __system___float_pow_n_ret
19a08     2D 00 64 FD | 	ret
19a0c                 | 
19a0c                 | __system___gc_ptrs
19a0c     EC 00 02 F6 | 	mov	_var01, __heap_ptr
19a10     00 03 02 F6 | 	mov	_var02, _var01
19a14     F3 01 00 FF 
19a18     F8 03 06 F1 | 	add	_var02, ##255992
19a1c     00 FD 09 FB | 	rdlong	result2, _var01 wz
19a20     74 00 90 5D |  if_ne	jmp	#LR__2550
19a24     01 FD 01 F6 | 	mov	result2, _var02
19a28     00 FD 81 F1 | 	sub	result2, _var01
19a2c     00 03 58 FC | 	wrword	#1, _var01
19a30     00 FB 01 F6 | 	mov	result1, _var01
19a34     02 FA 05 F1 | 	add	result1, #2
19a38     36 00 80 FF 
19a3c     FD 20 59 FC | 	wrword	##27792, result1
19a40     00 FB 01 F6 | 	mov	result1, _var01
19a44     04 FA 05 F1 | 	add	result1, #4
19a48     FD 00 58 FC | 	wrword	#0, result1
19a4c     00 FB 01 F6 | 	mov	result1, _var01
19a50     06 FA 05 F1 | 	add	result1, #6
19a54     FD 02 58 FC | 	wrword	#1, result1
19a58     10 00 06 F1 | 	add	_var01, #16
19a5c     FE FC 51 F6 | 	abs	result2, result2 wc
19a60     04 FC 45 F0 | 	shr	result2, #4
19a64     FE FC 81 F6 | 	negc	result2, result2
19a68     00 FD 51 FC | 	wrword	result2, _var01
19a6c     00 FD 01 F6 | 	mov	result2, _var01
19a70     02 FC 05 F1 | 	add	result2, #2
19a74     36 00 80 FF 
19a78     FE 1E 59 FC | 	wrword	##27791, result2
19a7c     00 FD 01 F6 | 	mov	result2, _var01
19a80     04 FC 05 F1 | 	add	result2, #4
19a84     FE 00 58 FC | 	wrword	#0, result2
19a88     00 FD 01 F6 | 	mov	result2, _var01
19a8c     06 FC 05 F1 | 	add	result2, #6
19a90     FE 00 58 FC | 	wrword	#0, result2
19a94     10 00 86 F1 | 	sub	_var01, #16
19a98                 | LR__2550
19a98     00 FB 01 F6 | 	mov	result1, _var01
19a9c     01 FD 01 F6 | 	mov	result2, _var02
19aa0                 | __system___gc_ptrs_ret
19aa0     2D 00 64 FD | 	ret
19aa4                 | 
19aa4                 | __system___gc_tryalloc
19aa4     0B 4A 05 F6 | 	mov	COUNT_, #11
19aa8     A8 00 A0 FD | 	call	#pushregs_
19aac     09 1F 02 F6 | 	mov	local01, arg01
19ab0     0A 21 02 F6 | 	mov	local02, arg02
19ab4     54 FF BF FD | 	call	#__system___gc_ptrs
19ab8     FD 22 02 F6 | 	mov	local03, result1
19abc     FE 24 02 F6 | 	mov	local04, result2
19ac0     11 27 02 F6 | 	mov	local05, local03
19ac4     00 28 06 F6 | 	mov	local06, #0
19ac8     97 1E 48 FB | 	callpa	#(@LR__2561-@LR__2560)>>2,fcache_load_ptr_
19acc                 | LR__2560
19acc     13 2B 02 F6 | 	mov	local07, local05
19ad0     06 26 06 F1 | 	add	local05, #6
19ad4     13 15 EA FA | 	rdword	arg02, local05 wz
19ad8     11 13 02 F6 | 	mov	arg01, local03
19adc     00 FA 05 A6 |  if_e	mov	result1, #0
19ae0     04 14 66 50 |  if_ne	shl	arg02, #4
19ae4     0A 13 02 51 |  if_ne	add	arg01, arg02
19ae8     09 FB 01 56 |  if_ne	mov	result1, arg01
19aec     FD 26 0A F6 | 	mov	local05, result1 wz
19af0     13 29 E2 5A |  if_ne	rdword	local06, local05
19af4     00 26 0E F2 | 	cmp	local05, #0 wz
19af8     12 27 52 52 |  if_ne	cmps	local05, local04 wc
19afc     08 00 90 1D |  if_a	jmp	#LR__2562
19b00     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
19b04     C4 FF 9F 1D |  if_a	jmp	#LR__2560
19b08                 | LR__2561
19b08                 | LR__2562
19b08     00 26 0E F2 | 	cmp	local05, #0 wz
19b0c     13 FB 01 A6 |  if_e	mov	result1, local05
19b10     3C 01 90 AD |  if_e	jmp	#LR__2565
19b14     13 FD 01 F6 | 	mov	result2, local05
19b18     06 FC 05 F1 | 	add	result2, #6
19b1c     FE 2C E2 FA | 	rdword	local08, result2
19b20     14 1F 52 F2 | 	cmps	local01, local06 wc
19b24     C0 00 90 3D |  if_ae	jmp	#LR__2564
19b28     13 1F 52 FC | 	wrword	local01, local05
19b2c     13 13 02 F6 | 	mov	arg01, local05
19b30     0F 2D 02 F6 | 	mov	local08, local01
19b34     04 2C 66 F0 | 	shl	local08, #4
19b38     16 13 02 F1 | 	add	arg01, local08
19b3c     0F 29 82 F1 | 	sub	local06, local01
19b40     09 29 52 FC | 	wrword	local06, arg01
19b44     09 2D 02 F6 | 	mov	local08, arg01
19b48     02 2C 06 F1 | 	add	local08, #2
19b4c     36 00 80 FF 
19b50     16 1F 59 FC | 	wrword	##27791, local08
19b54     13 15 0A F6 | 	mov	arg02, local05 wz
19b58     00 FA 05 A6 |  if_e	mov	result1, #0
19b5c     11 15 82 51 |  if_ne	sub	arg02, local03
19b60     04 14 46 50 |  if_ne	shr	arg02, #4
19b64     0A FB 01 56 |  if_ne	mov	result1, arg02
19b68     09 2D 02 F6 | 	mov	local08, arg01
19b6c     04 2C 06 F1 | 	add	local08, #4
19b70     16 FB 51 FC | 	wrword	result1, local08
19b74     13 2D 02 F6 | 	mov	local08, local05
19b78     06 2C 06 F1 | 	add	local08, #6
19b7c     09 15 02 F6 | 	mov	arg02, arg01
19b80     16 2D E2 FA | 	rdword	local08, local08
19b84     06 14 06 F1 | 	add	arg02, #6
19b88     0A 2D 52 FC | 	wrword	local08, arg02
19b8c     09 2F 02 F6 | 	mov	local09, arg01
19b90     17 15 0A F6 | 	mov	arg02, local09 wz
19b94     00 FA 05 A6 |  if_e	mov	result1, #0
19b98     11 15 82 51 |  if_ne	sub	arg02, local03
19b9c     04 14 46 50 |  if_ne	shr	arg02, #4
19ba0     0A FB 01 56 |  if_ne	mov	result1, arg02
19ba4     FD 2C 02 F6 | 	mov	local08, result1
19ba8     09 31 EA FA | 	rdword	local10, arg01 wz
19bac     00 FA 05 A6 |  if_e	mov	result1, #0
19bb0     04 30 66 50 |  if_ne	shl	local10, #4
19bb4     18 13 02 51 |  if_ne	add	arg01, local10
19bb8     09 FB 01 56 |  if_ne	mov	result1, arg01
19bbc     FD 32 0A F6 | 	mov	local11, result1 wz
19bc0     24 00 90 AD |  if_e	jmp	#LR__2563
19bc4     12 33 52 F2 | 	cmps	local11, local04 wc
19bc8     1C 00 90 3D |  if_ae	jmp	#LR__2563
19bcc     17 15 0A F6 | 	mov	arg02, local09 wz
19bd0     00 FA 05 A6 |  if_e	mov	result1, #0
19bd4     11 15 82 51 |  if_ne	sub	arg02, local03
19bd8     04 14 46 50 |  if_ne	shr	arg02, #4
19bdc     0A FB 01 56 |  if_ne	mov	result1, arg02
19be0     04 32 06 F1 | 	add	local11, #4
19be4     19 FB 51 FC | 	wrword	result1, local11
19be8                 | LR__2563
19be8                 | LR__2564
19be8     06 2A 06 F1 | 	add	local07, #6
19bec     15 2D 52 FC | 	wrword	local08, local07
19bf0     36 00 00 FF 
19bf4     80 2E 06 F6 | 	mov	local09, ##27776
19bf8     10 2F 42 F5 | 	or	local09, local02
19bfc     00 FA 05 F6 | 	mov	result1, #0
19c00     01 FA 61 FD | 	cogid	result1
19c04     FD 2E 42 F5 | 	or	local09, result1
19c08     13 33 02 F6 | 	mov	local11, local05
19c0c     02 32 06 F1 | 	add	local11, #2
19c10     19 2F 52 FC | 	wrword	local09, local11
19c14     11 2F 02 F6 | 	mov	local09, local03
19c18     08 2E 06 F1 | 	add	local09, #8
19c1c     13 33 02 F6 | 	mov	local11, local05
19c20     17 2F E2 FA | 	rdword	local09, local09
19c24     06 32 06 F1 | 	add	local11, #6
19c28     19 2F 52 FC | 	wrword	local09, local11
19c2c     13 15 0A F6 | 	mov	arg02, local05 wz
19c30     00 FA 05 A6 |  if_e	mov	result1, #0
19c34     11 15 82 51 |  if_ne	sub	arg02, local03
19c38     04 14 46 50 |  if_ne	shr	arg02, #4
19c3c     0A FB 01 56 |  if_ne	mov	result1, arg02
19c40     08 22 06 F1 | 	add	local03, #8
19c44     11 FB 51 FC | 	wrword	result1, local03
19c48     08 26 06 F1 | 	add	local05, #8
19c4c     13 FB 01 F6 | 	mov	result1, local05
19c50                 | LR__2565
19c50     A7 F0 03 F6 | 	mov	ptra, fp
19c54     B2 00 A0 FD | 	call	#popregs_
19c58                 | __system___gc_tryalloc_ret
19c58     2D 00 64 FD | 	ret
19c5c                 | 
19c5c                 | __system___gc_alloc_managed
19c5c     01 4A 05 F6 | 	mov	COUNT_, #1
19c60     A8 00 A0 FD | 	call	#pushregs_
19c64     09 1F 02 F6 | 	mov	local01, arg01
19c68     00 14 06 F6 | 	mov	arg02, #0
19c6c     1C 00 B0 FD | 	call	#__system___gc_doalloc
19c70     FD 14 0A F6 | 	mov	arg02, result1 wz
19c74     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
19c78     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
19c7c     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
19c80     A7 F0 03 F6 | 	mov	ptra, fp
19c84     B2 00 A0 FD | 	call	#popregs_
19c88                 | __system___gc_alloc_managed_ret
19c88     2D 00 64 FD | 	ret
19c8c                 | 
19c8c                 | __system___gc_doalloc
19c8c     06 4A 05 F6 | 	mov	COUNT_, #6
19c90     A8 00 A0 FD | 	call	#pushregs_
19c94     09 1F 0A F6 | 	mov	local01, arg01 wz
19c98     0A 21 02 F6 | 	mov	local02, arg02
19c9c     00 FA 05 A6 |  if_e	mov	result1, #0
19ca0     8C 00 90 AD |  if_e	jmp	#LR__2577
19ca4     17 1E 06 F1 | 	add	local01, #23
19ca8     0F 1E 26 F5 | 	andn	local01, #15
19cac     04 1E 46 F0 | 	shr	local01, #4
19cb0     1C E8 05 F1 | 	add	ptr___system__dat__, #28
19cb4     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19cb8     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
19cbc     38 C6 BF FD | 	call	#__system___lockmem
19cc0     0F 13 02 F6 | 	mov	arg01, local01
19cc4     10 15 02 F6 | 	mov	arg02, local02
19cc8     D8 FD BF FD | 	call	#__system___gc_tryalloc
19ccc     FD 22 0A F6 | 	mov	local03, result1 wz
19cd0     14 00 90 5D |  if_ne	jmp	#LR__2570
19cd4     70 03 B0 FD | 	call	#__system___gc_docollect
19cd8     0F 13 02 F6 | 	mov	arg01, local01
19cdc     10 15 02 F6 | 	mov	arg02, local02
19ce0     C0 FD BF FD | 	call	#__system___gc_tryalloc
19ce4     FD 22 02 F6 | 	mov	local03, result1
19ce8                 | LR__2570
19ce8     1C E8 05 F1 | 	add	ptr___system__dat__, #28
19cec     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19cf0     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
19cf4     09 01 68 FC | 	wrlong	#0, arg01
19cf8     00 22 0E F2 | 	cmp	local03, #0 wz
19cfc     2C 00 90 AD |  if_e	jmp	#LR__2576
19d00     04 1E 66 F0 | 	shl	local01, #4
19d04     08 1E 86 F1 | 	sub	local01, #8
19d08     0F 25 52 F6 | 	abs	local04, local01 wc
19d0c     02 24 46 F0 | 	shr	local04, #2
19d10     12 27 8A F6 | 	negc	local05, local04 wz
19d14     11 29 02 F6 | 	mov	local06, local03
19d18     10 00 90 AD |  if_e	jmp	#LR__2575
19d1c     97 06 48 FB | 	callpa	#(@LR__2573-@LR__2571)>>2,fcache_load_ptr_
19d20                 | LR__2571
19d20     13 05 D8 FC | 	rep	@LR__2574, local05
19d24                 | LR__2572
19d24     14 01 68 FC | 	wrlong	#0, local06
19d28     04 28 06 F1 | 	add	local06, #4
19d2c                 | LR__2573
19d2c                 | LR__2574
19d2c                 | LR__2575
19d2c                 | LR__2576
19d2c     11 FB 01 F6 | 	mov	result1, local03
19d30                 | LR__2577
19d30     A7 F0 03 F6 | 	mov	ptra, fp
19d34     B2 00 A0 FD | 	call	#popregs_
19d38                 | __system___gc_doalloc_ret
19d38     2D 00 64 FD | 	ret
19d3c                 | 
19d3c                 | __system___gc_isvalidptr
19d3c     F8 16 06 F4 | 	bitl	arg03, #248
19d40     08 16 86 F1 | 	sub	arg03, #8
19d44     09 17 52 F2 | 	cmps	arg03, arg01 wc
19d48     08 00 90 CD |  if_b	jmp	#LR__2580
19d4c     0A 17 52 F2 | 	cmps	arg03, arg02 wc
19d50     08 00 90 CD |  if_b	jmp	#LR__2581
19d54                 | LR__2580
19d54     00 FA 05 F6 | 	mov	result1, #0
19d58     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
19d5c                 | LR__2581
19d5c     0B 01 02 F6 | 	mov	_var01, arg03
19d60     09 01 62 F5 | 	xor	_var01, arg01
19d64     0F 00 CE F7 | 	test	_var01, #15 wz
19d68     00 FA 05 56 |  if_ne	mov	result1, #0
19d6c     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
19d70     0B 01 02 F6 | 	mov	_var01, arg03
19d74     02 00 06 F1 | 	add	_var01, #2
19d78     00 01 E2 FA | 	rdword	_var01, _var01
19d7c     7F 00 00 FF 
19d80     C0 01 06 F5 | 	and	_var01, ##65472
19d84     36 00 00 FF 
19d88     80 00 0E F2 | 	cmp	_var01, ##27776 wz
19d8c     00 FA 05 56 |  if_ne	mov	result1, #0
19d90     0B FB 01 A6 |  if_e	mov	result1, arg03
19d94                 | __system___gc_isvalidptr_ret
19d94     2D 00 64 FD | 	ret
19d98                 | 
19d98                 | __system___gc_free
19d98     09 17 02 F6 | 	mov	arg03, arg01
19d9c     6C FC BF FD | 	call	#__system___gc_ptrs
19da0     FD 12 02 F6 | 	mov	arg01, result1
19da4     FE 14 02 F6 | 	mov	arg02, result2
19da8     90 FF BF FD | 	call	#__system___gc_isvalidptr
19dac     FD 14 0A F6 | 	mov	arg02, result1 wz
19db0     28 00 90 AD |  if_e	jmp	#LR__2590
19db4     1C E8 05 F1 | 	add	ptr___system__dat__, #28
19db8     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19dbc     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
19dc0     34 C5 BF FD | 	call	#__system___lockmem
19dc4     0A 13 02 F6 | 	mov	arg01, arg02
19dc8     14 00 B0 FD | 	call	#__system___gc_dofree
19dcc     1C E8 05 F1 | 	add	ptr___system__dat__, #28
19dd0     F4 12 02 F6 | 	mov	arg01, ptr___system__dat__
19dd4     1C E8 85 F1 | 	sub	ptr___system__dat__, #28
19dd8     09 01 68 FC | 	wrlong	#0, arg01
19ddc                 | LR__2590
19ddc                 | __system___gc_free_ret
19ddc     2D 00 64 FD | 	ret
19de0                 | 
19de0                 | __system___gc_dofree
19de0     06 4A 05 F6 | 	mov	COUNT_, #6
19de4     A8 00 A0 FD | 	call	#pushregs_
19de8     09 1F 02 F6 | 	mov	local01, arg01
19dec     1C FC BF FD | 	call	#__system___gc_ptrs
19df0     FD 20 02 F6 | 	mov	local02, result1
19df4     FE 22 02 F6 | 	mov	local03, result2
19df8     0F 15 02 F6 | 	mov	arg02, local01
19dfc     02 14 06 F1 | 	add	arg02, #2
19e00     36 00 80 FF 
19e04     0A 1F 59 FC | 	wrword	##27791, arg02
19e08     0F 25 02 F6 | 	mov	local04, local01
19e0c     0F 13 02 F6 | 	mov	arg01, local01
19e10     09 27 EA FA | 	rdword	local05, arg01 wz
19e14     00 FA 05 A6 |  if_e	mov	result1, #0
19e18     04 26 66 50 |  if_ne	shl	local05, #4
19e1c     13 13 02 51 |  if_ne	add	arg01, local05
19e20     09 FB 01 56 |  if_ne	mov	result1, arg01
19e24     FD 28 02 F6 | 	mov	local06, result1
19e28     97 24 48 FB | 	callpa	#(@LR__2601-@LR__2600)>>2,fcache_load_ptr_
19e2c                 | LR__2600
19e2c     04 24 06 F1 | 	add	local04, #4
19e30     12 15 EA FA | 	rdword	arg02, local04 wz
19e34     10 13 02 F6 | 	mov	arg01, local02
19e38     00 FA 05 A6 |  if_e	mov	result1, #0
19e3c     04 14 66 50 |  if_ne	shl	arg02, #4
19e40     0A 13 02 51 |  if_ne	add	arg01, arg02
19e44     09 FB 01 56 |  if_ne	mov	result1, arg01
19e48     FD 24 0A F6 | 	mov	local04, result1 wz
19e4c     24 00 90 AD |  if_e	jmp	#LR__2602
19e50     12 13 02 F6 | 	mov	arg01, local04
19e54     00 FA 05 F6 | 	mov	result1, #0
19e58     02 12 06 F1 | 	add	arg01, #2
19e5c     09 13 E2 FA | 	rdword	arg01, arg01
19e60     36 00 00 FF 
19e64     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
19e68     01 FA 65 A6 |  if_e	neg	result1, #1
19e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
19e70     B8 FF 9F AD |  if_e	jmp	#LR__2600
19e74                 | LR__2601
19e74                 | LR__2602
19e74     00 24 0E F2 | 	cmp	local04, #0 wz
19e78     10 25 02 A6 |  if_e	mov	local04, local02
19e7c     12 15 02 F6 | 	mov	arg02, local04
19e80     06 14 06 F1 | 	add	arg02, #6
19e84     0F 13 02 F6 | 	mov	arg01, local01
19e88     0A 15 E2 FA | 	rdword	arg02, arg02
19e8c     06 12 06 F1 | 	add	arg01, #6
19e90     09 15 52 FC | 	wrword	arg02, arg01
19e94     0F 15 0A F6 | 	mov	arg02, local01 wz
19e98     00 FA 05 A6 |  if_e	mov	result1, #0
19e9c     10 15 82 51 |  if_ne	sub	arg02, local02
19ea0     04 14 46 50 |  if_ne	shr	arg02, #4
19ea4     0A FB 01 56 |  if_ne	mov	result1, arg02
19ea8     12 15 02 F6 | 	mov	arg02, local04
19eac     06 14 06 F1 | 	add	arg02, #6
19eb0     0A FB 51 FC | 	wrword	result1, arg02
19eb4     10 25 0A F2 | 	cmp	local04, local02 wz
19eb8     A4 00 90 AD |  if_e	jmp	#LR__2605
19ebc     12 13 02 F6 | 	mov	arg01, local04
19ec0     09 27 EA FA | 	rdword	local05, arg01 wz
19ec4     00 FA 05 A6 |  if_e	mov	result1, #0
19ec8     04 26 66 50 |  if_ne	shl	local05, #4
19ecc     13 13 02 51 |  if_ne	add	arg01, local05
19ed0     09 FB 01 56 |  if_ne	mov	result1, arg01
19ed4     0F FB 09 F2 | 	cmp	result1, local01 wz
19ed8     84 00 90 5D |  if_ne	jmp	#LR__2604
19edc     12 29 E2 FA | 	rdword	local06, local04
19ee0     0F 15 E2 FA | 	rdword	arg02, local01
19ee4     0A 29 02 F1 | 	add	local06, arg02
19ee8     12 29 52 FC | 	wrword	local06, local04
19eec     0F 29 02 F6 | 	mov	local06, local01
19ef0     02 28 06 F1 | 	add	local06, #2
19ef4     14 01 58 FC | 	wrword	#0, local06
19ef8     0F 13 02 F6 | 	mov	arg01, local01
19efc     09 27 EA FA | 	rdword	local05, arg01 wz
19f00     00 FA 05 A6 |  if_e	mov	result1, #0
19f04     04 26 66 50 |  if_ne	shl	local05, #4
19f08     13 13 02 51 |  if_ne	add	arg01, local05
19f0c     09 FB 01 56 |  if_ne	mov	result1, arg01
19f10     FD 28 02 F6 | 	mov	local06, result1
19f14     11 29 52 F2 | 	cmps	local06, local03 wc
19f18     20 00 90 3D |  if_ae	jmp	#LR__2603
19f1c     12 15 0A F6 | 	mov	arg02, local04 wz
19f20     00 FA 05 A6 |  if_e	mov	result1, #0
19f24     10 15 82 51 |  if_ne	sub	arg02, local02
19f28     04 14 46 50 |  if_ne	shr	arg02, #4
19f2c     0A FB 01 56 |  if_ne	mov	result1, arg02
19f30     14 15 02 F6 | 	mov	arg02, local06
19f34     04 14 06 F1 | 	add	arg02, #4
19f38     0A FB 51 FC | 	wrword	result1, arg02
19f3c                 | LR__2603
19f3c     0F 15 02 F6 | 	mov	arg02, local01
19f40     06 14 06 F1 | 	add	arg02, #6
19f44     12 FD 01 F6 | 	mov	result2, local04
19f48     0A 15 E2 FA | 	rdword	arg02, arg02
19f4c     06 FC 05 F1 | 	add	result2, #6
19f50     FE 14 52 FC | 	wrword	arg02, result2
19f54     06 1E 06 F1 | 	add	local01, #6
19f58     0F 01 58 FC | 	wrword	#0, local01
19f5c     12 1F 02 F6 | 	mov	local01, local04
19f60                 | LR__2604
19f60                 | LR__2605
19f60     0F 13 02 F6 | 	mov	arg01, local01
19f64     09 27 EA FA | 	rdword	local05, arg01 wz
19f68     00 FA 05 A6 |  if_e	mov	result1, #0
19f6c     04 26 66 50 |  if_ne	shl	local05, #4
19f70     13 13 02 51 |  if_ne	add	arg01, local05
19f74     09 FB 01 56 |  if_ne	mov	result1, arg01
19f78     FD 14 0A F6 | 	mov	arg02, result1 wz
19f7c     B8 00 90 AD |  if_e	jmp	#LR__2607
19f80     11 15 52 F2 | 	cmps	arg02, local03 wc
19f84     B0 00 90 3D |  if_ae	jmp	#LR__2607
19f88     0A 13 02 F6 | 	mov	arg01, arg02
19f8c     00 FA 05 F6 | 	mov	result1, #0
19f90     02 12 06 F1 | 	add	arg01, #2
19f94     09 13 E2 FA | 	rdword	arg01, arg01
19f98     36 00 00 FF 
19f9c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
19fa0     01 FA 65 A6 |  if_e	neg	result1, #1
19fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
19fa8     8C 00 90 AD |  if_e	jmp	#LR__2607
19fac     0F 25 02 F6 | 	mov	local04, local01
19fb0     12 29 E2 FA | 	rdword	local06, local04
19fb4     0A 13 02 F6 | 	mov	arg01, arg02
19fb8     09 1F E2 FA | 	rdword	local01, arg01
19fbc     0F 29 02 F1 | 	add	local06, local01
19fc0     12 29 52 FC | 	wrword	local06, local04
19fc4     09 29 02 F6 | 	mov	local06, arg01
19fc8     06 28 06 F1 | 	add	local06, #6
19fcc     12 1F 02 F6 | 	mov	local01, local04
19fd0     14 29 E2 FA | 	rdword	local06, local06
19fd4     06 1E 06 F1 | 	add	local01, #6
19fd8     0F 29 52 FC | 	wrword	local06, local01
19fdc     09 29 02 F6 | 	mov	local06, arg01
19fe0     02 28 06 F1 | 	add	local06, #2
19fe4     14 55 59 FC | 	wrword	#170, local06
19fe8     09 29 02 F6 | 	mov	local06, arg01
19fec     06 28 06 F1 | 	add	local06, #6
19ff0     14 01 58 FC | 	wrword	#0, local06
19ff4     09 27 EA FA | 	rdword	local05, arg01 wz
19ff8     00 FA 05 A6 |  if_e	mov	result1, #0
19ffc     04 26 66 50 |  if_ne	shl	local05, #4
1a000     13 13 02 51 |  if_ne	add	arg01, local05
1a004     09 FB 01 56 |  if_ne	mov	result1, arg01
1a008     FD 28 0A F6 | 	mov	local06, result1 wz
1a00c     28 00 90 AD |  if_e	jmp	#LR__2606
1a010     11 29 52 F2 | 	cmps	local06, local03 wc
1a014     20 00 90 3D |  if_ae	jmp	#LR__2606
1a018     12 15 0A F6 | 	mov	arg02, local04 wz
1a01c     00 FA 05 A6 |  if_e	mov	result1, #0
1a020     10 15 82 51 |  if_ne	sub	arg02, local02
1a024     04 14 46 50 |  if_ne	shr	arg02, #4
1a028     0A FB 01 56 |  if_ne	mov	result1, arg02
1a02c     14 25 02 F6 | 	mov	local04, local06
1a030     04 24 06 F1 | 	add	local04, #4
1a034     12 FB 51 FC | 	wrword	result1, local04
1a038                 | LR__2606
1a038                 | LR__2607
1a038     14 FB 01 F6 | 	mov	result1, local06
1a03c     A7 F0 03 F6 | 	mov	ptra, fp
1a040     B2 00 A0 FD | 	call	#popregs_
1a044                 | __system___gc_dofree_ret
1a044     2D 00 64 FD | 	ret
1a048                 | 
1a048                 | __system___gc_docollect
1a048     05 4A 05 F6 | 	mov	COUNT_, #5
1a04c     A8 00 A0 FD | 	call	#pushregs_
1a050     B8 F9 BF FD | 	call	#__system___gc_ptrs
1a054     FE 1E 02 F6 | 	mov	local01, result2
1a058     FD 20 02 F6 | 	mov	local02, result1
1a05c     10 13 02 F6 | 	mov	arg01, local02
1a060     09 23 EA FA | 	rdword	local03, arg01 wz
1a064     00 FA 05 A6 |  if_e	mov	result1, #0
1a068     04 22 66 50 |  if_ne	shl	local03, #4
1a06c     11 13 02 51 |  if_ne	add	arg01, local03
1a070     09 FB 01 56 |  if_ne	mov	result1, arg01
1a074     FD 24 0A F6 | 	mov	local04, result1 wz
1a078     00 FA 05 F6 | 	mov	result1, #0
1a07c     01 FA 61 FD | 	cogid	result1
1a080     FD 26 02 F6 | 	mov	local05, result1
1a084     48 00 90 AD |  if_e	jmp	#LR__2612
1a088     97 22 48 FB | 	callpa	#(@LR__2611-@LR__2610)>>2,fcache_load_ptr_
1a08c                 | LR__2610
1a08c     0F 25 52 F2 | 	cmps	local04, local01 wc
1a090     3C 00 90 3D |  if_ae	jmp	#LR__2612
1a094     12 15 02 F6 | 	mov	arg02, local04
1a098     02 14 06 F1 | 	add	arg02, #2
1a09c     0A 15 E2 FA | 	rdword	arg02, arg02
1a0a0     20 14 26 F5 | 	andn	arg02, #32
1a0a4     12 13 02 F6 | 	mov	arg01, local04
1a0a8     02 12 06 F1 | 	add	arg01, #2
1a0ac     09 15 52 FC | 	wrword	arg02, arg01
1a0b0     12 13 02 F6 | 	mov	arg01, local04
1a0b4     09 23 EA FA | 	rdword	local03, arg01 wz
1a0b8     00 FA 05 A6 |  if_e	mov	result1, #0
1a0bc     04 22 66 50 |  if_ne	shl	local03, #4
1a0c0     11 13 02 51 |  if_ne	add	arg01, local03
1a0c4     09 FB 01 56 |  if_ne	mov	result1, arg01
1a0c8     FD 24 0A F6 | 	mov	local04, result1 wz
1a0cc     BC FF 9F 5D |  if_ne	jmp	#LR__2610
1a0d0                 | LR__2611
1a0d0                 | LR__2612
1a0d0     00 22 06 F6 | 	mov	local03, #0
1a0d4     00 12 06 F6 | 	mov	arg01, #0
1a0d8     F4 C1 BF FD | 	call	#__system____topofstack
1a0dc     FD 14 02 F6 | 	mov	arg02, result1
1a0e0     11 13 02 F6 | 	mov	arg01, local03
1a0e4     90 00 B0 FD | 	call	#__system___gc_markhub
1a0e8     1C 01 B0 FD | 	call	#__system___gc_markcog
1a0ec     10 13 02 F6 | 	mov	arg01, local02
1a0f0     09 23 EA FA | 	rdword	local03, arg01 wz
1a0f4     00 FA 05 A6 |  if_e	mov	result1, #0
1a0f8     04 22 66 50 |  if_ne	shl	local03, #4
1a0fc     11 13 02 51 |  if_ne	add	arg01, local03
1a100     09 FB 01 56 |  if_ne	mov	result1, arg01
1a104     FD 20 0A F6 | 	mov	local02, result1 wz
1a108     60 00 90 AD |  if_e	jmp	#LR__2616
1a10c                 | LR__2613
1a10c     10 25 02 F6 | 	mov	local04, local02
1a110     12 13 02 F6 | 	mov	arg01, local04
1a114     09 23 EA FA | 	rdword	local03, arg01 wz
1a118     00 FA 05 A6 |  if_e	mov	result1, #0
1a11c     04 22 66 50 |  if_ne	shl	local03, #4
1a120     11 13 02 51 |  if_ne	add	arg01, local03
1a124     09 FB 01 56 |  if_ne	mov	result1, arg01
1a128     FD 20 02 F6 | 	mov	local02, result1
1a12c     12 15 02 F6 | 	mov	arg02, local04
1a130     02 14 06 F1 | 	add	arg02, #2
1a134     0A 15 E2 FA | 	rdword	arg02, arg02
1a138     20 14 CE F7 | 	test	arg02, #32 wz
1a13c     10 14 CE A7 |  if_e	test	arg02, #16 wz
1a140     1C 00 90 5D |  if_ne	jmp	#LR__2615
1a144     0A 15 42 F8 | 	getnib	arg02, arg02, #0
1a148     13 15 0A F2 | 	cmp	arg02, local05 wz
1a14c     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
1a150     0C 00 90 5D |  if_ne	jmp	#LR__2614
1a154     12 13 02 F6 | 	mov	arg01, local04
1a158     84 FC BF FD | 	call	#__system___gc_dofree
1a15c     FD 20 02 F6 | 	mov	local02, result1
1a160                 | LR__2614
1a160                 | LR__2615
1a160     00 20 0E F2 | 	cmp	local02, #0 wz
1a164     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
1a168     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__2613
1a16c                 | LR__2616
1a16c     A7 F0 03 F6 | 	mov	ptra, fp
1a170     B2 00 A0 FD | 	call	#popregs_
1a174                 | __system___gc_docollect_ret
1a174     2D 00 64 FD | 	ret
1a178                 | 
1a178                 | __system___gc_markhub
1a178     04 4A 05 F6 | 	mov	COUNT_, #4
1a17c     A8 00 A0 FD | 	call	#pushregs_
1a180     09 1F 02 F6 | 	mov	local01, arg01
1a184     0A 21 02 F6 | 	mov	local02, arg02
1a188     80 F8 BF FD | 	call	#__system___gc_ptrs
1a18c     FD 22 02 F6 | 	mov	local03, result1
1a190     FE 24 02 F6 | 	mov	local04, result2
1a194                 | LR__2620
1a194     10 1F 52 F2 | 	cmps	local01, local02 wc
1a198     60 00 90 3D |  if_ae	jmp	#LR__2621
1a19c     0F 17 02 FB | 	rdlong	arg03, local01
1a1a0     04 1E 06 F1 | 	add	local01, #4
1a1a4     12 15 02 F6 | 	mov	arg02, local04
1a1a8     11 13 02 F6 | 	mov	arg01, local03
1a1ac     8C FB BF FD | 	call	#__system___gc_isvalidptr
1a1b0     FD 16 0A F6 | 	mov	arg03, result1 wz
1a1b4     DC FF 9F AD |  if_e	jmp	#LR__2620
1a1b8     0B 13 02 F6 | 	mov	arg01, arg03
1a1bc     00 FA 05 F6 | 	mov	result1, #0
1a1c0     02 12 06 F1 | 	add	arg01, #2
1a1c4     09 13 E2 FA | 	rdword	arg01, arg01
1a1c8     36 00 00 FF 
1a1cc     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
1a1d0     01 FA 65 A6 |  if_e	neg	result1, #1
1a1d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1a1d8     B8 FF 9F 5D |  if_ne	jmp	#LR__2620
1a1dc     0B FD 01 F6 | 	mov	result2, arg03
1a1e0     02 FC 05 F1 | 	add	result2, #2
1a1e4     FE FC E1 FA | 	rdword	result2, result2
1a1e8     0F FC 25 F5 | 	andn	result2, #15
1a1ec     2E FC 45 F5 | 	or	result2, #46
1a1f0     02 16 06 F1 | 	add	arg03, #2
1a1f4     0B FD 51 FC | 	wrword	result2, arg03
1a1f8     98 FF 9F FD | 	jmp	#LR__2620
1a1fc                 | LR__2621
1a1fc     A7 F0 03 F6 | 	mov	ptra, fp
1a200     B2 00 A0 FD | 	call	#popregs_
1a204                 | __system___gc_markhub_ret
1a204     2D 00 64 FD | 	ret
1a208                 | 
1a208                 | __system___gc_markcog
1a208     04 4A 05 F6 | 	mov	COUNT_, #4
1a20c     A8 00 A0 FD | 	call	#pushregs_
1a210     F8 F7 BF FD | 	call	#__system___gc_ptrs
1a214     FD 1E 02 F6 | 	mov	local01, result1
1a218     FE 20 02 F6 | 	mov	local02, result2
1a21c     EF 23 06 F6 | 	mov	local03, #495
1a220                 | LR__2630
1a220                 | 	'.live	local03
1a220     00 22 96 F9 | 	alts	local03, #0
1a224     11 25 02 F6 | 	mov	local04, local03
1a228     0F 13 02 F6 | 	mov	arg01, local01
1a22c     10 15 02 F6 | 	mov	arg02, local02
1a230     12 17 02 F6 | 	mov	arg03, local04
1a234     04 FB BF FD | 	call	#__system___gc_isvalidptr
1a238     00 FA 0D F2 | 	cmp	result1, #0 wz
1a23c     18 00 90 AD |  if_e	jmp	#LR__2631
1a240     FD 24 02 F6 | 	mov	local04, result1
1a244     02 24 06 F1 | 	add	local04, #2
1a248     12 25 E2 FA | 	rdword	local04, local04
1a24c     20 24 46 F5 | 	or	local04, #32
1a250     02 FA 05 F1 | 	add	result1, #2
1a254     FD 24 52 FC | 	wrword	local04, result1
1a258                 | LR__2631
1a258     01 22 86 F1 | 	sub	local03, #1
1a25c     00 22 56 F2 | 	cmps	local03, #0 wc
1a260     BC FF 9F 3D |  if_ae	jmp	#LR__2630
1a264     A7 F0 03 F6 | 	mov	ptra, fp
1a268     B2 00 A0 FD | 	call	#popregs_
1a26c                 | __system___gc_markcog_ret
1a26c     2D 00 64 FD | 	ret
1a270                 | 
1a270                 | __system__opendir
1a270     06 4A 05 F6 | 	mov	COUNT_, #6
1a274     A8 00 A0 FD | 	call	#pushregs_
1a278     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1a27c     F4 1E 02 F6 | 	mov	local01, ptr___system__dat__
1a280     09 15 02 F6 | 	mov	arg02, arg01
1a284     0F 13 02 F6 | 	mov	arg01, local01
1a288     00 16 06 F6 | 	mov	arg03, #0
1a28c     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1a290     FC C7 BF FD | 	call	#__system____getvfsforfile
1a294     FD 20 0A F6 | 	mov	local02, result1 wz
1a298     10 00 90 AD |  if_e	jmp	#LR__2640
1a29c     28 20 06 F1 | 	add	local02, #40
1a2a0     10 17 0A FB | 	rdlong	arg03, local02 wz
1a2a4     28 20 86 F1 | 	sub	local02, #40
1a2a8     14 00 90 5D |  if_ne	jmp	#LR__2641
1a2ac                 | LR__2640
1a2ac     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a2b0     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1a2b4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a2b8     00 FA 05 F6 | 	mov	result1, #0
1a2bc     90 00 90 FD | 	jmp	#LR__2643
1a2c0                 | LR__2641
1a2c0     5C 12 06 F6 | 	mov	arg01, #92
1a2c4     10 14 06 F6 | 	mov	arg02, #16
1a2c8     C0 F9 BF FD | 	call	#__system___gc_doalloc
1a2cc     FD 22 0A F6 | 	mov	local03, result1 wz
1a2d0     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1a2d4     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
1a2d8     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1a2dc     00 FA 05 A6 |  if_e	mov	result1, #0
1a2e0     6C 00 90 AD |  if_e	jmp	#LR__2643
1a2e4     28 20 06 F1 | 	add	local02, #40
1a2e8     10 25 02 FB | 	rdlong	local04, local02
1a2ec     12 27 02 F6 | 	mov	local05, local04
1a2f0     28 20 86 F1 | 	sub	local02, #40
1a2f4     13 26 46 F7 | 	zerox	local05, #19
1a2f8     14 24 46 F0 | 	shr	local04, #20
1a2fc     02 24 66 F0 | 	shl	local04, #2
1a300     ED 24 02 F1 | 	add	local04, __methods__
1a304     12 25 02 FB | 	rdlong	local04, local04
1a308     11 13 02 F6 | 	mov	arg01, local03
1a30c     0F 15 02 F6 | 	mov	arg02, local01
1a310     F2 28 02 F6 | 	mov	local06, objptr
1a314     13 E5 01 F6 | 	mov	objptr, local05
1a318     2D 24 62 FD | 	call	local04
1a31c     14 E5 01 F6 | 	mov	objptr, local06
1a320     FD 16 0A F6 | 	mov	arg03, result1 wz
1a324     20 00 90 AD |  if_e	jmp	#LR__2642
1a328     00 16 4E F2 | 	cmps	arg03, #0 wz
1a32c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a330     F4 16 62 FC | 	wrlong	arg03, ptr___system__dat__
1a334     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a338     11 13 02 F6 | 	mov	arg01, local03
1a33c     58 FA BF FD | 	call	#__system___gc_free
1a340     00 FA 05 F6 | 	mov	result1, #0
1a344     08 00 90 FD | 	jmp	#LR__2643
1a348                 | LR__2642
1a348     11 21 62 FC | 	wrlong	local02, local03
1a34c     11 FB 01 F6 | 	mov	result1, local03
1a350                 | LR__2643
1a350     A7 F0 03 F6 | 	mov	ptra, fp
1a354     B2 00 A0 FD | 	call	#popregs_
1a358                 | __system__opendir_ret
1a358     2D 00 64 FD | 	ret
1a35c                 | 
1a35c                 | __system__closedir
1a35c     04 4A 05 F6 | 	mov	COUNT_, #4
1a360     A8 00 A0 FD | 	call	#pushregs_
1a364     09 1F 02 F6 | 	mov	local01, arg01
1a368     0F 13 02 FB | 	rdlong	arg01, local01
1a36c     2C 12 06 F1 | 	add	arg01, #44
1a370     09 21 02 FB | 	rdlong	local02, arg01
1a374     10 23 02 F6 | 	mov	local03, local02
1a378     13 22 46 F7 | 	zerox	local03, #19
1a37c     14 20 46 F0 | 	shr	local02, #20
1a380     02 20 66 F0 | 	shl	local02, #2
1a384     ED 20 02 F1 | 	add	local02, __methods__
1a388     10 21 02 FB | 	rdlong	local02, local02
1a38c     0F 13 02 F6 | 	mov	arg01, local01
1a390     F2 24 02 F6 | 	mov	local04, objptr
1a394     11 E5 01 F6 | 	mov	objptr, local03
1a398     2D 20 62 FD | 	call	local02
1a39c     12 E5 01 F6 | 	mov	objptr, local04
1a3a0     FD 24 02 F6 | 	mov	local04, result1
1a3a4     0F 13 02 F6 | 	mov	arg01, local01
1a3a8     EC F9 BF FD | 	call	#__system___gc_free
1a3ac     00 24 4E F2 | 	cmps	local04, #0 wz
1a3b0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a3b4     F4 24 62 FC | 	wrlong	local04, ptr___system__dat__
1a3b8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a3bc     01 FA 65 56 |  if_ne	neg	result1, #1
1a3c0     00 FA 05 A6 |  if_e	mov	result1, #0
1a3c4     A7 F0 03 F6 | 	mov	ptra, fp
1a3c8     B2 00 A0 FD | 	call	#popregs_
1a3cc                 | __system__closedir_ret
1a3cc     2D 00 64 FD | 	ret
1a3d0                 | 
1a3d0                 | __system__readdir
1a3d0     04 4A 05 F6 | 	mov	COUNT_, #4
1a3d4     A8 00 A0 FD | 	call	#pushregs_
1a3d8     09 15 0A FB | 	rdlong	arg02, arg01 wz
1a3dc     08 12 06 F1 | 	add	arg01, #8
1a3e0     09 1F 02 F6 | 	mov	local01, arg01
1a3e4     08 12 86 F1 | 	sub	arg01, #8
1a3e8     00 FA 05 A6 |  if_e	mov	result1, #0
1a3ec     5C 00 90 AD |  if_e	jmp	#LR__2651
1a3f0     30 14 06 F1 | 	add	arg02, #48
1a3f4     0A 21 02 FB | 	rdlong	local02, arg02
1a3f8     10 23 02 F6 | 	mov	local03, local02
1a3fc     13 22 46 F7 | 	zerox	local03, #19
1a400     14 20 46 F0 | 	shr	local02, #20
1a404     02 20 66 F0 | 	shl	local02, #2
1a408     ED 20 02 F1 | 	add	local02, __methods__
1a40c     10 21 02 FB | 	rdlong	local02, local02
1a410     0F 15 02 F6 | 	mov	arg02, local01
1a414     F2 24 02 F6 | 	mov	local04, objptr
1a418     11 E5 01 F6 | 	mov	objptr, local03
1a41c     2D 20 62 FD | 	call	local02
1a420     12 E5 01 F6 | 	mov	objptr, local04
1a424     00 FA 4D F2 | 	cmps	result1, #0 wz
1a428     1C 00 90 AD |  if_e	jmp	#LR__2650
1a42c     01 FA 55 F2 | 	cmps	result1, #1 wc
1a430     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
1a434     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1a438     F4 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
1a43c     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1a440     00 FA 05 F6 | 	mov	result1, #0
1a444     04 00 90 FD | 	jmp	#LR__2651
1a448                 | LR__2650
1a448     0F FB 01 F6 | 	mov	result1, local01
1a44c                 | LR__2651
1a44c     A7 F0 03 F6 | 	mov	ptra, fp
1a450     B2 00 A0 FD | 	call	#popregs_
1a454                 | __system__readdir_ret
1a454     2D 00 64 FD | 	ret
1a458                 | 
1a458                 | __system___openraw
1a458     15 4A 05 F6 | 	mov	COUNT_, #21
1a45c     A8 00 A0 FD | 	call	#pushregs_
1a460     09 1F 02 F6 | 	mov	local01, arg01
1a464     0A 21 02 F6 | 	mov	local02, arg02
1a468     0B 23 02 F6 | 	mov	local03, arg03
1a46c     0C 25 02 F6 | 	mov	local04, arg04
1a470     04 26 06 F6 | 	mov	local05, #4
1a474     0F 29 02 F6 | 	mov	local06, local01
1a478     00 2A 06 F6 | 	mov	local07, #0
1a47c     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1a480     F4 2C 02 F6 | 	mov	local08, ptr___system__dat__
1a484     16 13 02 F6 | 	mov	arg01, local08
1a488     10 15 02 F6 | 	mov	arg02, local02
1a48c     00 16 06 F6 | 	mov	arg03, #0
1a490     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1a494     F8 C5 BF FD | 	call	#__system____getvfsforfile
1a498     FD 2E 0A F6 | 	mov	local09, result1 wz
1a49c     10 00 90 AD |  if_e	jmp	#LR__2660
1a4a0     20 2E 06 F1 | 	add	local09, #32
1a4a4     17 FB 09 FB | 	rdlong	result1, local09 wz
1a4a8     20 2E 86 F1 | 	sub	local09, #32
1a4ac     14 00 90 5D |  if_ne	jmp	#LR__2661
1a4b0                 | LR__2660
1a4b0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a4b4     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1a4b8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a4bc     01 FA 65 F6 | 	neg	result1, #1
1a4c0     8C 02 90 FD | 	jmp	#LR__2674
1a4c4                 | LR__2661
1a4c4     14 13 02 F6 | 	mov	arg01, local06
1a4c8     00 14 06 F6 | 	mov	arg02, #0
1a4cc     34 16 06 F6 | 	mov	arg03, #52
1a4d0     09 31 02 F6 | 	mov	local10, arg01
1a4d4     98 00 A0 FD | 	call	#\builtin_bytefill_
1a4d8     20 2E 06 F1 | 	add	local09, #32
1a4dc     17 33 02 FB | 	rdlong	local11, local09
1a4e0     19 35 02 F6 | 	mov	local12, local11
1a4e4     19 37 02 F6 | 	mov	local13, local11
1a4e8     20 2E 86 F1 | 	sub	local09, #32
1a4ec     1B 39 02 F6 | 	mov	local14, local13
1a4f0     13 34 46 F7 | 	zerox	local12, #19
1a4f4     14 38 46 F0 | 	shr	local14, #20
1a4f8     02 38 66 F0 | 	shl	local14, #2
1a4fc     ED 38 02 F1 | 	add	local14, __methods__
1a500     1C 39 02 FB | 	rdlong	local14, local14
1a504     14 3B 02 F6 | 	mov	local15, local06
1a508     16 3D 02 F6 | 	mov	local16, local08
1a50c     11 3F 02 F6 | 	mov	local17, local03
1a510     1D 13 02 F6 | 	mov	arg01, local15
1a514     1E 15 02 F6 | 	mov	arg02, local16
1a518     1F 17 02 F6 | 	mov	arg03, local17
1a51c     F2 40 02 F6 | 	mov	local18, objptr
1a520     1A E5 01 F6 | 	mov	objptr, local12
1a524     2D 38 62 FD | 	call	local14
1a528     20 E5 01 F6 | 	mov	objptr, local18
1a52c     FD 42 0A F6 | 	mov	local19, result1 wz
1a530     04 22 CE 57 |  if_ne	test	local03, #4 wz
1a534     58 00 90 AD |  if_e	jmp	#LR__2662
1a538     24 2E 06 F1 | 	add	local09, #36
1a53c     17 33 02 FB | 	rdlong	local11, local09
1a540     19 35 02 F6 | 	mov	local12, local11
1a544     19 37 02 F6 | 	mov	local13, local11
1a548     24 2E 86 F1 | 	sub	local09, #36
1a54c     1B 39 02 F6 | 	mov	local14, local13
1a550     13 34 46 F7 | 	zerox	local12, #19
1a554     14 38 46 F0 | 	shr	local14, #20
1a558     02 38 66 F0 | 	shl	local14, #2
1a55c     ED 38 02 F1 | 	add	local14, __methods__
1a560     1C 39 02 FB | 	rdlong	local14, local14
1a564     14 3B 02 F6 | 	mov	local15, local06
1a568     16 3D 02 F6 | 	mov	local16, local08
1a56c     12 3F 02 F6 | 	mov	local17, local04
1a570     1D 13 02 F6 | 	mov	arg01, local15
1a574     1E 15 02 F6 | 	mov	arg02, local16
1a578     1F 17 02 F6 | 	mov	arg03, local17
1a57c     F2 40 02 F6 | 	mov	local18, objptr
1a580     1A E5 01 F6 | 	mov	objptr, local12
1a584     2D 38 62 FD | 	call	local14
1a588     20 E5 01 F6 | 	mov	objptr, local18
1a58c     FD 42 02 F6 | 	mov	local19, result1
1a590                 | LR__2662
1a590     00 42 0E F2 | 	cmp	local19, #0 wz
1a594     8C 01 90 5D |  if_ne	jmp	#LR__2672
1a598     11 45 02 F6 | 	mov	local20, local03
1a59c     03 44 0E F5 | 	and	local20, #3 wz
1a5a0     02 26 46 55 |  if_ne	or	local05, #2
1a5a4     01 44 0E F2 | 	cmp	local20, #1 wz
1a5a8     01 26 46 55 |  if_ne	or	local05, #1
1a5ac     20 22 CE F7 | 	test	local03, #32 wz
1a5b0     C0 26 46 55 |  if_ne	or	local05, #192
1a5b4     08 28 06 F1 | 	add	local06, #8
1a5b8     14 27 62 FC | 	wrlong	local05, local06
1a5bc     0C 28 06 F1 | 	add	local06, #12
1a5c0     14 47 0A FB | 	rdlong	local21, local06 wz
1a5c4     14 28 86 F1 | 	sub	local06, #20
1a5c8     18 00 90 5D |  if_ne	jmp	#LR__2663
1a5cc     04 2E 06 F1 | 	add	local09, #4
1a5d0     17 47 02 FB | 	rdlong	local21, local09
1a5d4     04 2E 86 F1 | 	sub	local09, #4
1a5d8     14 28 06 F1 | 	add	local06, #20
1a5dc     14 47 62 FC | 	wrlong	local21, local06
1a5e0     14 28 86 F1 | 	sub	local06, #20
1a5e4                 | LR__2663
1a5e4     18 28 06 F1 | 	add	local06, #24
1a5e8     14 47 0A FB | 	rdlong	local21, local06 wz
1a5ec     18 28 86 F1 | 	sub	local06, #24
1a5f0     18 00 90 5D |  if_ne	jmp	#LR__2664
1a5f4     08 2E 06 F1 | 	add	local09, #8
1a5f8     17 47 02 FB | 	rdlong	local21, local09
1a5fc     08 2E 86 F1 | 	sub	local09, #8
1a600     18 28 06 F1 | 	add	local06, #24
1a604     14 47 62 FC | 	wrlong	local21, local06
1a608     18 28 86 F1 | 	sub	local06, #24
1a60c                 | LR__2664
1a60c     24 28 06 F1 | 	add	local06, #36
1a610     14 47 0A FB | 	rdlong	local21, local06 wz
1a614     24 28 86 F1 | 	sub	local06, #36
1a618     17 47 02 AB |  if_e	rdlong	local21, local09
1a61c     24 28 06 A1 |  if_e	add	local06, #36
1a620     14 47 62 AC |  if_e	wrlong	local21, local06
1a624     24 28 86 A1 |  if_e	sub	local06, #36
1a628     28 28 06 F1 | 	add	local06, #40
1a62c     14 47 0A FB | 	rdlong	local21, local06 wz
1a630     28 28 86 F1 | 	sub	local06, #40
1a634     18 00 90 5D |  if_ne	jmp	#LR__2665
1a638     10 2E 06 F1 | 	add	local09, #16
1a63c     17 47 02 FB | 	rdlong	local21, local09
1a640     10 2E 86 F1 | 	sub	local09, #16
1a644     28 28 06 F1 | 	add	local06, #40
1a648     14 47 62 FC | 	wrlong	local21, local06
1a64c     28 28 86 F1 | 	sub	local06, #40
1a650                 | LR__2665
1a650     30 28 06 F1 | 	add	local06, #48
1a654     14 47 0A FB | 	rdlong	local21, local06 wz
1a658     30 28 86 F1 | 	sub	local06, #48
1a65c     18 00 90 5D |  if_ne	jmp	#LR__2666
1a660     0C 2E 06 F1 | 	add	local09, #12
1a664     17 47 02 FB | 	rdlong	local21, local09
1a668     0C 2E 86 F1 | 	sub	local09, #12
1a66c     30 28 06 F1 | 	add	local06, #48
1a670     14 47 62 FC | 	wrlong	local21, local06
1a674     30 28 86 F1 | 	sub	local06, #48
1a678                 | LR__2666
1a678     1C 28 06 F1 | 	add	local06, #28
1a67c     14 47 0A FB | 	rdlong	local21, local06 wz
1a680     1C 28 86 F1 | 	sub	local06, #28
1a684     1C 00 90 5D |  if_ne	jmp	#LR__2667
1a688     01 2A 06 F6 | 	mov	local07, #1
1a68c     F2 12 02 F6 | 	mov	arg01, objptr
1a690     00 08 03 FF 
1a694     00 12 46 F5 | 	or	arg01, ##101711872
1a698     1C 28 06 F1 | 	add	local06, #28
1a69c     14 13 62 FC | 	wrlong	arg01, local06
1a6a0     1C 28 86 F1 | 	sub	local06, #28
1a6a4                 | LR__2667
1a6a4     20 28 06 F1 | 	add	local06, #32
1a6a8     14 47 0A FB | 	rdlong	local21, local06 wz
1a6ac     20 28 86 F1 | 	sub	local06, #32
1a6b0     1C 00 90 5D |  if_ne	jmp	#LR__2668
1a6b4     01 2A 06 F6 | 	mov	local07, #1
1a6b8     F2 12 02 F6 | 	mov	arg01, objptr
1a6bc     00 10 03 FF 
1a6c0     00 12 46 F5 | 	or	arg01, ##102760448
1a6c4     20 28 06 F1 | 	add	local06, #32
1a6c8     14 13 62 FC | 	wrlong	arg01, local06
1a6cc     20 28 86 F1 | 	sub	local06, #32
1a6d0                 | LR__2668
1a6d0     2C 28 06 F1 | 	add	local06, #44
1a6d4     14 47 0A FB | 	rdlong	local21, local06 wz
1a6d8     2C 28 86 F1 | 	sub	local06, #44
1a6dc     44 00 90 5D |  if_ne	jmp	#LR__2671
1a6e0     14 2E 06 F1 | 	add	local09, #20
1a6e4     17 47 0A FB | 	rdlong	local21, local09 wz
1a6e8     14 2E 86 F1 | 	sub	local09, #20
1a6ec     18 00 90 AD |  if_e	jmp	#LR__2669
1a6f0     14 2E 06 F1 | 	add	local09, #20
1a6f4     17 47 02 FB | 	rdlong	local21, local09
1a6f8     2C 28 06 F1 | 	add	local06, #44
1a6fc     14 47 62 FC | 	wrlong	local21, local06
1a700     2C 28 86 F1 | 	sub	local06, #44
1a704     1C 00 90 FD | 	jmp	#LR__2670
1a708                 | LR__2669
1a708     01 2A 06 F6 | 	mov	local07, #1
1a70c     F2 12 02 F6 | 	mov	arg01, objptr
1a710     00 18 03 FF 
1a714     00 12 46 F5 | 	or	arg01, ##103809024
1a718     2C 28 06 F1 | 	add	local06, #44
1a71c     14 13 62 FC | 	wrlong	arg01, local06
1a720     2C 28 86 F1 | 	sub	local06, #44
1a724                 | LR__2670
1a724                 | LR__2671
1a724                 | LR__2672
1a724     00 2A 0E F2 | 	cmp	local07, #0 wz
1a728     14 13 02 56 |  if_ne	mov	arg01, local06
1a72c     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
1a730     00 42 0E F2 | 	cmp	local19, #0 wz
1a734     00 12 06 A6 |  if_e	mov	arg01, #0
1a738     10 00 90 5D |  if_ne	jmp	#LR__2673
1a73c     00 12 4E F2 | 	cmps	arg01, #0 wz
1a740     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a744     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1a748     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a74c                 | LR__2673
1a74c     21 FB 01 F6 | 	mov	result1, local19
1a750                 | LR__2674
1a750     A7 F0 03 F6 | 	mov	ptra, fp
1a754     B2 00 A0 FD | 	call	#popregs_
1a758                 | __system___openraw_ret
1a758     2D 00 64 FD | 	ret
1a75c                 | 
1a75c                 | __system___closeraw
1a75c     05 4A 05 F6 | 	mov	COUNT_, #5
1a760     A8 00 A0 FD | 	call	#pushregs_
1a764     09 1F 02 F6 | 	mov	local01, arg01
1a768     00 20 06 F6 | 	mov	local02, #0
1a76c     08 1E 06 F1 | 	add	local01, #8
1a770     0F FB 09 FB | 	rdlong	result1, local01 wz
1a774     08 1E 86 F1 | 	sub	local01, #8
1a778     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1a77c     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1a780     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1a784     01 FA 65 A6 |  if_e	neg	result1, #1
1a788     A8 00 90 AD |  if_e	jmp	#LR__2682
1a78c     2C 1E 06 F1 | 	add	local01, #44
1a790     0F FB 09 FB | 	rdlong	result1, local01 wz
1a794     2C 1E 86 F1 | 	sub	local01, #44
1a798     38 00 90 AD |  if_e	jmp	#LR__2680
1a79c     2C 1E 06 F1 | 	add	local01, #44
1a7a0     0F 23 02 FB | 	rdlong	local03, local01
1a7a4     11 25 02 F6 | 	mov	local04, local03
1a7a8     2C 1E 86 F1 | 	sub	local01, #44
1a7ac     13 24 46 F7 | 	zerox	local04, #19
1a7b0     14 22 46 F0 | 	shr	local03, #20
1a7b4     02 22 66 F0 | 	shl	local03, #2
1a7b8     ED 22 02 F1 | 	add	local03, __methods__
1a7bc     11 23 02 FB | 	rdlong	local03, local03
1a7c0     0F 13 02 F6 | 	mov	arg01, local01
1a7c4     F2 26 02 F6 | 	mov	local05, objptr
1a7c8     12 E5 01 F6 | 	mov	objptr, local04
1a7cc     2D 22 62 FD | 	call	local03
1a7d0     13 E5 01 F6 | 	mov	objptr, local05
1a7d4                 | LR__2680
1a7d4     24 1E 06 F1 | 	add	local01, #36
1a7d8     0F 27 0A FB | 	rdlong	local05, local01 wz
1a7dc     24 1E 86 F1 | 	sub	local01, #36
1a7e0     3C 00 90 AD |  if_e	jmp	#LR__2681
1a7e4     24 1E 06 F1 | 	add	local01, #36
1a7e8     0F 23 02 FB | 	rdlong	local03, local01
1a7ec     11 25 02 F6 | 	mov	local04, local03
1a7f0     24 1E 86 F1 | 	sub	local01, #36
1a7f4     13 24 46 F7 | 	zerox	local04, #19
1a7f8     14 22 46 F0 | 	shr	local03, #20
1a7fc     02 22 66 F0 | 	shl	local03, #2
1a800     ED 22 02 F1 | 	add	local03, __methods__
1a804     11 23 02 FB | 	rdlong	local03, local03
1a808     0F 13 02 F6 | 	mov	arg01, local01
1a80c     F2 26 02 F6 | 	mov	local05, objptr
1a810     12 E5 01 F6 | 	mov	objptr, local04
1a814     2D 22 62 FD | 	call	local03
1a818     13 E5 01 F6 | 	mov	objptr, local05
1a81c     FD 20 02 F6 | 	mov	local02, result1
1a820                 | LR__2681
1a820     0F 13 02 F6 | 	mov	arg01, local01
1a824     00 14 06 F6 | 	mov	arg02, #0
1a828     34 16 06 F6 | 	mov	arg03, #52
1a82c     98 00 A0 FD | 	call	#\builtin_bytefill_
1a830     10 FB 01 F6 | 	mov	result1, local02
1a834                 | LR__2682
1a834     A7 F0 03 F6 | 	mov	ptra, fp
1a838     B2 00 A0 FD | 	call	#popregs_
1a83c                 | __system___closeraw_ret
1a83c     2D 00 64 FD | 	ret
1a840                 | 
1a840                 | __system___vfs_open_sdcardx
1a840     0B 4A 05 F6 | 	mov	COUNT_, #11
1a844     A8 00 A0 FD | 	call	#pushregs_
1a848     09 23 02 F6 | 	mov	local03, arg01
1a84c     0A 25 02 F6 | 	mov	local04, arg02
1a850     0B 27 02 F6 | 	mov	local05, arg03
1a854     0C 29 02 F6 | 	mov	local06, arg04
1a858     01 00 00 FF 
1a85c     24 12 06 F6 | 	mov	arg01, ##548
1a860     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
1a864     FD 2A 02 F6 | 	mov	local07, result1
1a868     01 00 00 FF 
1a86c     34 12 06 F6 | 	mov	arg01, ##564
1a870     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
1a874     FD 2C 02 F6 | 	mov	local08, result1
1a878     11 19 02 F6 | 	mov	arg04, local03
1a87c     1F 18 C6 F0 | 	sar	arg04, #31
1a880     11 17 02 F6 | 	mov	arg03, local03
1a884     01 12 06 F6 | 	mov	arg01, #1
1a888     00 14 06 F6 | 	mov	arg02, #0
1a88c     98 DF BF FD | 	call	#__system___int64_shl
1a890     FD 1E 02 F6 | 	mov	local01, result1
1a894     FE 2E 02 F6 | 	mov	local09, result2
1a898     12 19 02 F6 | 	mov	arg04, local04
1a89c     1F 18 C6 F0 | 	sar	arg04, #31
1a8a0     12 17 02 F6 | 	mov	arg03, local04
1a8a4     01 12 06 F6 | 	mov	arg01, #1
1a8a8     00 14 06 F6 | 	mov	arg02, #0
1a8ac     78 DF BF FD | 	call	#__system___int64_shl
1a8b0     FD 1E 42 F5 | 	or	local01, result1
1a8b4     FE 2E 42 F5 | 	or	local09, result2
1a8b8     13 19 02 F6 | 	mov	arg04, local05
1a8bc     1F 18 C6 F0 | 	sar	arg04, #31
1a8c0     13 17 02 F6 | 	mov	arg03, local05
1a8c4     01 12 06 F6 | 	mov	arg01, #1
1a8c8     00 14 06 F6 | 	mov	arg02, #0
1a8cc     58 DF BF FD | 	call	#__system___int64_shl
1a8d0     FD 1E 42 F5 | 	or	local01, result1
1a8d4     FE 2E 42 F5 | 	or	local09, result2
1a8d8     14 19 02 F6 | 	mov	arg04, local06
1a8dc     1F 18 C6 F0 | 	sar	arg04, #31
1a8e0     14 17 02 F6 | 	mov	arg03, local06
1a8e4     01 12 06 F6 | 	mov	arg01, #1
1a8e8     00 14 06 F6 | 	mov	arg02, #0
1a8ec     38 DF BF FD | 	call	#__system___int64_shl
1a8f0     17 15 02 F6 | 	mov	arg02, local09
1a8f4     FD 1E 42 F5 | 	or	local01, result1
1a8f8     0A FD 41 F5 | 	or	result2, arg02
1a8fc     FE 20 02 F6 | 	mov	local02, result2
1a900     0F 13 02 F6 | 	mov	arg01, local01
1a904     10 15 02 F6 | 	mov	arg02, local02
1a908     54 DF BF FD | 	call	#__system___usepins
1a90c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a910     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1a914     F4 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
1a918     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1a91c     00 FA 05 A6 |  if_e	mov	result1, #0
1a920     B4 00 90 AD |  if_e	jmp	#LR__2692
1a924     0F 31 02 F6 | 	mov	local10, local01
1a928     10 2F 02 F6 | 	mov	local09, local02
1a92c     01 00 00 FF 
1a930     08 2A 06 F1 | 	add	local07, ##520
1a934     15 31 62 FC | 	wrlong	local10, local07
1a938     04 2A 06 F1 | 	add	local07, #4
1a93c     15 2F 62 FC | 	wrlong	local09, local07
1a940     01 00 00 FF 
1a944     0C 2A 86 F1 | 	sub	local07, ##524
1a948     14 1B 02 F6 | 	mov	arg05, local06
1a94c     00 12 06 F6 | 	mov	arg01, #0
1a950     11 15 02 F6 | 	mov	arg02, local03
1a954     12 17 02 F6 | 	mov	arg03, local04
1a958     13 19 02 F6 | 	mov	arg04, local05
1a95c     F2 30 02 F6 | 	mov	local10, objptr
1a960     15 E5 01 F6 | 	mov	objptr, local07
1a964     94 26 B0 FD | 	call	#_fatfs_cc_disk_setpins
1a968     18 E5 01 F6 | 	mov	objptr, local10
1a96c     FD 32 0A F6 | 	mov	local11, result1 wz
1a970     24 00 90 5D |  if_ne	jmp	#LR__2690
1a974     29 01 00 FF 
1a978     42 15 06 F6 | 	mov	arg02, ##@LR__4077
1a97c     16 13 02 F6 | 	mov	arg01, local08
1a980     00 16 06 F6 | 	mov	arg03, #0
1a984     F2 32 02 F6 | 	mov	local11, objptr
1a988     15 E5 01 F6 | 	mov	objptr, local07
1a98c     C4 5D B0 FD | 	call	#_fatfs_cc_f_mount
1a990     19 E5 01 F6 | 	mov	objptr, local11
1a994     FD 32 02 F6 | 	mov	local11, result1
1a998                 | LR__2690
1a998     00 32 0E F2 | 	cmp	local11, #0 wz
1a99c     24 00 90 AD |  if_e	jmp	#LR__2691
1a9a0     0F 13 02 F6 | 	mov	arg01, local01
1a9a4     10 15 02 F6 | 	mov	arg02, local02
1a9a8     08 DF BF FD | 	call	#__system___freepins
1a9ac     19 13 6A F6 | 	neg	arg01, local11 wz
1a9b0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1a9b4     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1a9b8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1a9bc     00 FA 05 F6 | 	mov	result1, #0
1a9c0     14 00 90 FD | 	jmp	#LR__2692
1a9c4                 | LR__2691
1a9c4     15 13 02 F6 | 	mov	arg01, local07
1a9c8     F2 32 02 F6 | 	mov	local11, objptr
1a9cc     15 E5 01 F6 | 	mov	objptr, local07
1a9d0     60 9A B0 FD | 	call	#_fatfs_cc_get_vfs
1a9d4     19 E5 01 F6 | 	mov	objptr, local11
1a9d8                 | LR__2692
1a9d8     A7 F0 03 F6 | 	mov	ptra, fp
1a9dc     B2 00 A0 FD | 	call	#popregs_
1a9e0                 | __system___vfs_open_sdcardx_ret
1a9e0     2D 00 64 FD | 	ret
1a9e4                 | 
1a9e4                 | __system____default_getc
1a9e4     03 4A 05 F6 | 	mov	COUNT_, #3
1a9e8     A8 00 A0 FD | 	call	#pushregs_
1a9ec     09 1F 02 F6 | 	mov	local01, arg01
1a9f0     0F 21 02 FB | 	rdlong	local02, local01
1a9f4     08 20 06 F1 | 	add	local02, #8
1a9f8     10 23 02 FB | 	rdlong	local03, local02
1a9fc     02 22 CE F7 | 	test	local03, #2 wz
1aa00     0F 13 02 56 |  if_ne	mov	arg01, local01
1aa04     00 01 B0 5D |  if_ne	call	#__system____default_flush
1aa08     10 23 02 FB | 	rdlong	local03, local02
1aa0c     01 22 46 F5 | 	or	local03, #1
1aa10     10 23 62 FC | 	wrlong	local03, local02
1aa14     08 20 86 F1 | 	sub	local02, #8
1aa18     10 23 0A FB | 	rdlong	local03, local02 wz
1aa1c     0C 00 90 5D |  if_ne	jmp	#LR__2700
1aa20     0F 13 02 F6 | 	mov	arg01, local01
1aa24     7C 15 B0 FD | 	call	#__system____default_filbuf
1aa28     FD 22 02 F6 | 	mov	local03, result1
1aa2c                 | LR__2700
1aa2c     01 22 56 F2 | 	cmps	local03, #1 wc
1aa30     01 FA 65 C6 |  if_b	neg	result1, #1
1aa34     1C 00 90 CD |  if_b	jmp	#LR__2701
1aa38     01 22 86 F1 | 	sub	local03, #1
1aa3c     10 23 62 FC | 	wrlong	local03, local02
1aa40     04 20 06 F1 | 	add	local02, #4
1aa44     10 23 02 FB | 	rdlong	local03, local02
1aa48     11 FB C1 FA | 	rdbyte	result1, local03
1aa4c     01 22 06 F1 | 	add	local03, #1
1aa50     10 23 62 FC | 	wrlong	local03, local02
1aa54                 | LR__2701
1aa54     A7 F0 03 F6 | 	mov	ptra, fp
1aa58     B2 00 A0 FD | 	call	#popregs_
1aa5c                 | __system____default_getc_ret
1aa5c     2D 00 64 FD | 	ret
1aa60                 | 
1aa60                 | __system____default_putc
1aa60     06 4A 05 F6 | 	mov	COUNT_, #6
1aa64     A8 00 A0 FD | 	call	#pushregs_
1aa68     09 1F 02 F6 | 	mov	local01, arg01
1aa6c     0A 21 02 F6 | 	mov	local02, arg02
1aa70     10 23 02 FB | 	rdlong	local03, local02
1aa74     08 22 06 F1 | 	add	local03, #8
1aa78     11 FB 01 FB | 	rdlong	result1, local03
1aa7c     01 FA CD F7 | 	test	result1, #1 wz
1aa80     10 13 02 56 |  if_ne	mov	arg01, local02
1aa84     80 00 B0 5D |  if_ne	call	#__system____default_flush
1aa88     11 25 02 FB | 	rdlong	local04, local03
1aa8c     02 24 46 F5 | 	or	local04, #2
1aa90     11 25 62 FC | 	wrlong	local04, local03
1aa94     08 22 86 F1 | 	sub	local03, #8
1aa98     11 27 02 FB | 	rdlong	local05, local03
1aa9c     10 22 06 F1 | 	add	local03, #16
1aaa0     11 15 02 FB | 	rdlong	arg02, local03
1aaa4     10 22 86 F1 | 	sub	local03, #16
1aaa8     13 FB 01 F6 | 	mov	result1, local05
1aaac     0A FB 01 F1 | 	add	result1, arg02
1aab0     FD 1E 42 FC | 	wrbyte	local01, result1
1aab4     0F 1F E2 F8 | 	getbyte	local01, local01, #0
1aab8     01 26 06 F1 | 	add	local05, #1
1aabc     11 27 62 FC | 	wrlong	local05, local03
1aac0     06 20 06 F1 | 	add	local02, #6
1aac4     10 29 EA FA | 	rdword	local06, local02 wz
1aac8     06 20 86 F1 | 	sub	local02, #6
1aacc     0C 22 06 51 |  if_ne	add	local03, #12
1aad0     11 25 02 5B |  if_ne	rdlong	local04, local03
1aad4     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
1aad8     0C 00 90 AD |  if_e	jmp	#LR__2710
1aadc     0A 1E 0E F2 | 	cmp	local01, #10 wz
1aae0     01 28 0E A2 |  if_e	cmp	local06, #1 wz
1aae4     10 00 90 5D |  if_ne	jmp	#LR__2711
1aae8                 | LR__2710
1aae8     10 13 02 F6 | 	mov	arg01, local02
1aaec     18 00 B0 FD | 	call	#__system____default_flush
1aaf0     00 FA 0D F2 | 	cmp	result1, #0 wz
1aaf4     01 1E 66 56 |  if_ne	neg	local01, #1
1aaf8                 | LR__2711
1aaf8     0F FB 01 F6 | 	mov	result1, local01
1aafc     A7 F0 03 F6 | 	mov	ptra, fp
1ab00     B2 00 A0 FD | 	call	#popregs_
1ab04                 | __system____default_putc_ret
1ab04     2D 00 64 FD | 	ret
1ab08                 | 
1ab08                 | __system____default_flush
1ab08     06 4A 05 F6 | 	mov	COUNT_, #6
1ab0c     A8 00 A0 FD | 	call	#pushregs_
1ab10     09 1F 02 F6 | 	mov	local01, arg01
1ab14     0F 21 02 FB | 	rdlong	local02, local01
1ab18     10 23 02 FB | 	rdlong	local03, local02
1ab1c     08 20 06 F1 | 	add	local02, #8
1ab20     10 FB 01 FB | 	rdlong	result1, local02
1ab24     08 20 86 F1 | 	sub	local02, #8
1ab28     02 FA CD F7 | 	test	result1, #2 wz
1ab2c     D0 00 90 AD |  if_e	jmp	#LR__2722
1ab30     01 22 56 F2 | 	cmps	local03, #1 wc
1ab34     20 01 90 CD |  if_b	jmp	#LR__2724
1ab38     08 1E 06 F1 | 	add	local01, #8
1ab3c     0F FB 01 FB | 	rdlong	result1, local01
1ab40     08 1E 86 F1 | 	sub	local01, #8
1ab44     40 FA CD F7 | 	test	result1, #64 wz
1ab48     68 00 90 AD |  if_e	jmp	#LR__2721
1ab4c     08 1E 06 F1 | 	add	local01, #8
1ab50     0F 17 02 FB | 	rdlong	arg03, local01
1ab54     08 1E 86 F1 | 	sub	local01, #8
1ab58     80 16 CE F7 | 	test	arg03, #128 wz
1ab5c     54 00 90 AD |  if_e	jmp	#LR__2720
1ab60     30 1E 06 F1 | 	add	local01, #48
1ab64     0F 25 02 FB | 	rdlong	local04, local01
1ab68     12 27 02 F6 | 	mov	local05, local04
1ab6c     30 1E 86 F1 | 	sub	local01, #48
1ab70     13 26 46 F7 | 	zerox	local05, #19
1ab74     14 24 46 F0 | 	shr	local04, #20
1ab78     02 24 66 F0 | 	shl	local04, #2
1ab7c     ED 24 02 F1 | 	add	local04, __methods__
1ab80     12 25 02 FB | 	rdlong	local04, local04
1ab84     0F 13 02 F6 | 	mov	arg01, local01
1ab88     00 14 06 F6 | 	mov	arg02, #0
1ab8c     02 16 06 F6 | 	mov	arg03, #2
1ab90     F2 28 02 F6 | 	mov	local06, objptr
1ab94     13 E5 01 F6 | 	mov	objptr, local05
1ab98     2D 24 62 FD | 	call	local04
1ab9c     14 E5 01 F6 | 	mov	objptr, local06
1aba0     08 1E 06 F1 | 	add	local01, #8
1aba4     0F 29 02 FB | 	rdlong	local06, local01
1aba8     80 28 26 F5 | 	andn	local06, #128
1abac     0F 29 62 FC | 	wrlong	local06, local01
1abb0     08 1E 86 F1 | 	sub	local01, #8
1abb4                 | LR__2720
1abb4                 | LR__2721
1abb4     18 1E 06 F1 | 	add	local01, #24
1abb8     0F 25 02 FB | 	rdlong	local04, local01
1abbc     12 27 02 F6 | 	mov	local05, local04
1abc0     18 1E 86 F1 | 	sub	local01, #24
1abc4     13 26 46 F7 | 	zerox	local05, #19
1abc8     14 24 46 F0 | 	shr	local04, #20
1abcc     02 24 66 F0 | 	shl	local04, #2
1abd0     ED 24 02 F1 | 	add	local04, __methods__
1abd4     12 25 02 FB | 	rdlong	local04, local04
1abd8     10 20 06 F1 | 	add	local02, #16
1abdc     10 15 02 FB | 	rdlong	arg02, local02
1abe0     10 20 86 F1 | 	sub	local02, #16
1abe4     0F 13 02 F6 | 	mov	arg01, local01
1abe8     11 17 02 F6 | 	mov	arg03, local03
1abec     F2 28 02 F6 | 	mov	local06, objptr
1abf0     13 E5 01 F6 | 	mov	objptr, local05
1abf4     2D 24 62 FD | 	call	local04
1abf8     14 E5 01 F6 | 	mov	objptr, local06
1abfc     58 00 90 FD | 	jmp	#LR__2724
1ac00                 | LR__2722
1ac00     08 20 06 F1 | 	add	local02, #8
1ac04     10 29 02 FB | 	rdlong	local06, local02
1ac08     08 20 86 F1 | 	sub	local02, #8
1ac0c     01 28 CE F7 | 	test	local06, #1 wz
1ac10     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1ac14     40 00 90 AD |  if_e	jmp	#LR__2723
1ac18     30 1E 06 F1 | 	add	local01, #48
1ac1c     0F 25 02 FB | 	rdlong	local04, local01
1ac20     12 27 02 F6 | 	mov	local05, local04
1ac24     30 1E 86 F1 | 	sub	local01, #48
1ac28     13 26 46 F7 | 	zerox	local05, #19
1ac2c     14 24 46 F0 | 	shr	local04, #20
1ac30     02 24 66 F0 | 	shl	local04, #2
1ac34     ED 24 02 F1 | 	add	local04, __methods__
1ac38     12 25 02 FB | 	rdlong	local04, local04
1ac3c     0F 13 02 F6 | 	mov	arg01, local01
1ac40     11 15 62 F6 | 	neg	arg02, local03
1ac44     01 16 06 F6 | 	mov	arg03, #1
1ac48     F2 28 02 F6 | 	mov	local06, objptr
1ac4c     13 E5 01 F6 | 	mov	objptr, local05
1ac50     2D 24 62 FD | 	call	local04
1ac54     14 E5 01 F6 | 	mov	objptr, local06
1ac58                 | LR__2723
1ac58                 | LR__2724
1ac58     10 01 68 FC | 	wrlong	#0, local02
1ac5c     04 20 06 F1 | 	add	local02, #4
1ac60     10 01 68 FC | 	wrlong	#0, local02
1ac64     04 20 06 F1 | 	add	local02, #4
1ac68     10 01 68 FC | 	wrlong	#0, local02
1ac6c     00 FA 05 F6 | 	mov	result1, #0
1ac70     A7 F0 03 F6 | 	mov	ptra, fp
1ac74     B2 00 A0 FD | 	call	#popregs_
1ac78                 | __system____default_flush_ret
1ac78     2D 00 64 FD | 	ret
1ac7c                 | 
1ac7c                 | __system____default_buffer_init
1ac7c     02 4A 05 F6 | 	mov	COUNT_, #2
1ac80     A8 00 A0 FD | 	call	#pushregs_
1ac84     09 1F 02 F6 | 	mov	local01, arg01
1ac88     0F 21 02 FB | 	rdlong	local02, local01
1ac8c     0F 13 02 F6 | 	mov	arg01, local01
1ac90     F8 02 B0 FD | 	call	#__system___isatty
1ac94     00 FA 0D F2 | 	cmp	result1, #0 wz
1ac98     06 1E 06 51 |  if_ne	add	local01, #6
1ac9c     0F 0B 58 5C |  if_ne	wrword	#5, local01
1aca0     06 1E 06 A1 |  if_e	add	local01, #6
1aca4     0F 0D 58 AC |  if_e	wrword	#6, local01
1aca8     14 20 06 F1 | 	add	local02, #20
1acac     10 1F 02 F6 | 	mov	local01, local02
1acb0     04 20 86 F1 | 	sub	local02, #4
1acb4     10 1F 62 FC | 	wrlong	local01, local02
1acb8     04 20 86 F1 | 	sub	local02, #4
1acbc     02 00 80 FF 
1acc0     10 01 68 FC | 	wrlong	##1024, local02
1acc4     00 FA 05 F6 | 	mov	result1, #0
1acc8     A7 F0 03 F6 | 	mov	ptra, fp
1accc     B2 00 A0 FD | 	call	#popregs_
1acd0                 | __system____default_buffer_init_ret
1acd0     2D 00 64 FD | 	ret
1acd4                 | 
1acd4                 | __system__stat
1acd4     04 4A 05 F6 | 	mov	COUNT_, #4
1acd8     A8 00 A0 FD | 	call	#pushregs_
1acdc     0A 1F 02 F6 | 	mov	local01, arg02
1ace0     84 E9 05 F1 | 	add	ptr___system__dat__, #388
1ace4     F4 20 02 F6 | 	mov	local02, ptr___system__dat__
1ace8     09 15 02 F6 | 	mov	arg02, arg01
1acec     10 13 02 F6 | 	mov	arg01, local02
1acf0     00 16 06 F6 | 	mov	arg03, #0
1acf4     84 E9 85 F1 | 	sub	ptr___system__dat__, #388
1acf8     94 BD BF FD | 	call	#__system____getvfsforfile
1acfc     FD 22 0A F6 | 	mov	local03, result1 wz
1ad00     10 00 90 AD |  if_e	jmp	#LR__2730
1ad04     34 22 06 F1 | 	add	local03, #52
1ad08     11 17 0A FB | 	rdlong	arg03, local03 wz
1ad0c     34 22 86 F1 | 	sub	local03, #52
1ad10     14 00 90 5D |  if_ne	jmp	#LR__2731
1ad14                 | LR__2730
1ad14     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1ad18     F4 20 68 FC | 	wrlong	#16, ptr___system__dat__
1ad1c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1ad20     01 FA 65 F6 | 	neg	result1, #1
1ad24     68 00 90 FD | 	jmp	#LR__2732
1ad28                 | LR__2731
1ad28     0F 13 02 F6 | 	mov	arg01, local01
1ad2c     00 14 06 F6 | 	mov	arg02, #0
1ad30     30 16 06 F6 | 	mov	arg03, #48
1ad34     09 25 02 F6 | 	mov	local04, arg01
1ad38     98 00 A0 FD | 	call	#\builtin_bytefill_
1ad3c     12 FB 01 F6 | 	mov	result1, local04
1ad40     10 13 CA FA | 	rdbyte	arg01, local02 wz
1ad44     08 1E 06 A1 |  if_e	add	local01, #8
1ad48     08 00 80 AF 
1ad4c     0F FF 6B AC |  if_e	wrlong	##4607, local01
1ad50     00 FA 05 A6 |  if_e	mov	result1, #0
1ad54     38 00 90 AD |  if_e	jmp	#LR__2732
1ad58     34 22 06 F1 | 	add	local03, #52
1ad5c     11 23 02 FB | 	rdlong	local03, local03
1ad60     11 25 02 F6 | 	mov	local04, local03
1ad64     13 22 46 F7 | 	zerox	local03, #19
1ad68     14 24 46 F0 | 	shr	local04, #20
1ad6c     02 24 66 F0 | 	shl	local04, #2
1ad70     ED 24 02 F1 | 	add	local04, __methods__
1ad74     12 25 02 FB | 	rdlong	local04, local04
1ad78     10 13 02 F6 | 	mov	arg01, local02
1ad7c     0F 15 02 F6 | 	mov	arg02, local01
1ad80     F2 20 02 F6 | 	mov	local02, objptr
1ad84     11 E5 01 F6 | 	mov	objptr, local03
1ad88     2D 24 62 FD | 	call	local04
1ad8c     10 E5 01 F6 | 	mov	objptr, local02
1ad90                 | LR__2732
1ad90     A7 F0 03 F6 | 	mov	ptra, fp
1ad94     B2 00 A0 FD | 	call	#popregs_
1ad98                 | __system__stat_ret
1ad98     2D 00 64 FD | 	ret
1ad9c                 | 
1ad9c                 | __system__read
1ad9c     0A 12 16 F2 | 	cmp	arg01, #10 wc
1ada0     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1ada4     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1ada8     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1adac     01 FA 65 36 |  if_ae	neg	result1, #1
1adb0     20 00 90 3D |  if_ae	jmp	#LR__2740
1adb4     34 12 06 FD | 	qmul	arg01, #52
1adb8     02 00 00 FF 
1adbc     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1adc0     18 12 62 FD | 	getqx	arg01
1adc4     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1adc8     02 00 00 FF 
1adcc     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1add0     E8 0E B0 FD | 	call	#__system___vfsread
1add4                 | LR__2740
1add4                 | __system__read_ret
1add4     2D 00 64 FD | 	ret
1add8                 | 
1add8                 | __system__close
1add8     0A 12 16 F2 | 	cmp	arg01, #10 wc
1addc     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1ade0     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1ade4     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1ade8     01 FA 65 36 |  if_ae	neg	result1, #1
1adec     20 00 90 3D |  if_ae	jmp	#LR__2750
1adf0     34 12 06 FD | 	qmul	arg01, #52
1adf4     02 00 00 FF 
1adf8     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1adfc     18 12 62 FD | 	getqx	arg01
1ae00     F4 12 02 F1 | 	add	arg01, ptr___system__dat__
1ae04     02 00 00 FF 
1ae08     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1ae0c     4C F9 BF FD | 	call	#__system___closeraw
1ae10                 | LR__2750
1ae10                 | __system__close_ret
1ae10     2D 00 64 FD | 	ret
1ae14                 | 
1ae14                 | __system__lseek
1ae14     06 4A 05 F6 | 	mov	COUNT_, #6
1ae18     A8 00 A0 FD | 	call	#pushregs_
1ae1c     0A 12 16 F2 | 	cmp	arg01, #10 wc
1ae20     20 E8 05 31 |  if_ae	add	ptr___system__dat__, #32
1ae24     F4 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
1ae28     20 E8 85 31 |  if_ae	sub	ptr___system__dat__, #32
1ae2c     01 FA 65 36 |  if_ae	neg	result1, #1
1ae30     C4 00 90 3D |  if_ae	jmp	#LR__2761
1ae34     34 12 06 FD | 	qmul	arg01, #52
1ae38     02 00 00 FF 
1ae3c     20 E9 05 F1 | 	add	ptr___system__dat__, ##1312
1ae40     18 1E 62 FD | 	getqx	local01
1ae44     F4 1E 02 F1 | 	add	local01, ptr___system__dat__
1ae48     30 1E 06 F1 | 	add	local01, #48
1ae4c     0F 13 0A FB | 	rdlong	arg01, local01 wz
1ae50     30 1E 86 F1 | 	sub	local01, #48
1ae54     02 00 00 FF 
1ae58     20 E9 85 F1 | 	sub	ptr___system__dat__, ##1312
1ae5c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1ae60     F4 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
1ae64     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1ae68     01 FA 65 A6 |  if_e	neg	result1, #1
1ae6c     88 00 90 AD |  if_e	jmp	#LR__2761
1ae70     08 1E 06 F1 | 	add	local01, #8
1ae74     0F 21 02 FB | 	rdlong	local02, local01
1ae78     08 1E 86 F1 | 	sub	local01, #8
1ae7c     40 20 CE F7 | 	test	local02, #64 wz
1ae80     08 1E 06 51 |  if_ne	add	local01, #8
1ae84     0F 21 02 5B |  if_ne	rdlong	local02, local01
1ae88     80 20 46 55 |  if_ne	or	local02, #128
1ae8c     0F 21 62 5C |  if_ne	wrlong	local02, local01
1ae90     08 1E 86 51 |  if_ne	sub	local01, #8
1ae94     30 1E 06 F1 | 	add	local01, #48
1ae98     0F 23 02 FB | 	rdlong	local03, local01
1ae9c     11 25 02 F6 | 	mov	local04, local03
1aea0     30 1E 86 F1 | 	sub	local01, #48
1aea4     13 24 46 F7 | 	zerox	local04, #19
1aea8     14 22 46 F0 | 	shr	local03, #20
1aeac     02 22 66 F0 | 	shl	local03, #2
1aeb0     ED 22 02 F1 | 	add	local03, __methods__
1aeb4     11 23 02 FB | 	rdlong	local03, local03
1aeb8     0F 13 02 F6 | 	mov	arg01, local01
1aebc     F2 26 02 F6 | 	mov	local05, objptr
1aec0     12 E5 01 F6 | 	mov	objptr, local04
1aec4     2D 22 62 FD | 	call	local03
1aec8     13 E5 01 F6 | 	mov	objptr, local05
1aecc     FD 28 02 F6 | 	mov	local06, result1
1aed0     00 28 56 F2 | 	cmps	local06, #0 wc
1aed4     1C 00 90 3D |  if_ae	jmp	#LR__2760
1aed8     14 13 6A F6 | 	neg	arg01, local06 wz
1aedc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1aee0     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1aee4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1aee8     01 FA 65 56 |  if_ne	neg	result1, #1
1aeec     00 FA 05 A6 |  if_e	mov	result1, #0
1aef0     04 00 90 FD | 	jmp	#LR__2761
1aef4                 | LR__2760
1aef4     14 FB 01 F6 | 	mov	result1, local06
1aef8                 | LR__2761
1aef8     A7 F0 03 F6 | 	mov	ptra, fp
1aefc     B2 00 A0 FD | 	call	#popregs_
1af00                 | __system__lseek_ret
1af00     2D 00 64 FD | 	ret
1af04                 | 
1af04                 | __system___ioctl
1af04     03 4A 05 F6 | 	mov	COUNT_, #3
1af08     A8 00 A0 FD | 	call	#pushregs_
1af0c     00 12 4E F2 | 	cmps	arg01, #0 wz
1af10     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1af14     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
1af18     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1af1c     01 FA 65 A6 |  if_e	neg	result1, #1
1af20     5C 00 90 AD |  if_e	jmp	#LR__2771
1af24     28 12 06 F1 | 	add	arg01, #40
1af28     09 1F 02 FB | 	rdlong	local01, arg01
1af2c     0F 21 02 F6 | 	mov	local02, local01
1af30     28 12 86 F1 | 	sub	arg01, #40
1af34     13 20 46 F7 | 	zerox	local02, #19
1af38     14 1E 46 F0 | 	shr	local01, #20
1af3c     02 1E 66 F0 | 	shl	local01, #2
1af40     ED 1E 02 F1 | 	add	local01, __methods__
1af44     0F 1F 02 FB | 	rdlong	local01, local01
1af48     F2 22 02 F6 | 	mov	local03, objptr
1af4c     10 E5 01 F6 | 	mov	objptr, local02
1af50     2D 1E 62 FD | 	call	local01
1af54     11 E5 01 F6 | 	mov	objptr, local03
1af58     FD 12 0A F6 | 	mov	arg01, result1 wz
1af5c     1C 00 90 AD |  if_e	jmp	#LR__2770
1af60     00 12 4E F2 | 	cmps	arg01, #0 wz
1af64     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1af68     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1af6c     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1af70     01 FA 65 56 |  if_ne	neg	result1, #1
1af74     00 FA 05 A6 |  if_e	mov	result1, #0
1af78     04 00 90 FD | 	jmp	#LR__2771
1af7c                 | LR__2770
1af7c     00 FA 05 F6 | 	mov	result1, #0
1af80                 | LR__2771
1af80     A7 F0 03 F6 | 	mov	ptra, fp
1af84     B2 00 A0 FD | 	call	#popregs_
1af88                 | __system___ioctl_ret
1af88     2D 00 64 FD | 	ret
1af8c                 | 
1af8c                 | __system___isatty
1af8c     00 4A 05 F6 | 	mov	COUNT_, #0
1af90     A8 00 A0 FD | 	call	#pushregs_
1af94     0C F0 07 F1 | 	add	ptra, #12
1af98     04 4E 05 F1 | 	add	fp, #4
1af9c     A7 12 62 FC | 	wrlong	arg01, fp
1afa0     04 4E 05 F1 | 	add	fp, #4
1afa4     A7 16 02 F6 | 	mov	arg03, fp
1afa8     08 4E 85 F1 | 	sub	fp, #8
1afac     00 15 06 F6 | 	mov	arg02, #256
1afb0     50 FF BF FD | 	call	#__system___ioctl
1afb4     00 FA 0D F2 | 	cmp	result1, #0 wz
1afb8     01 FA 05 A6 |  if_e	mov	result1, #1
1afbc     00 FA 05 56 |  if_ne	mov	result1, #0
1afc0     A7 F0 03 F6 | 	mov	ptra, fp
1afc4     B2 00 A0 FD | 	call	#popregs_
1afc8                 | __system___isatty_ret
1afc8     2D 00 64 FD | 	ret
1afcc                 | 
1afcc                 | __system____getftab
1afcc     0A 12 16 F2 | 	cmp	arg01, #10 wc
1afd0     34 12 06 CD |  if_b	qmul	arg01, #52
1afd4     00 FA 05 36 |  if_ae	mov	result1, #0
1afd8     02 00 00 CF 
1afdc     20 E9 05 C1 |  if_b	add	ptr___system__dat__, ##1312
1afe0     18 FA 61 CD |  if_b	getqx	result1
1afe4     F4 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
1afe8     02 00 00 CF 
1afec     20 E9 85 C1 |  if_b	sub	ptr___system__dat__, ##1312
1aff0                 | __system____getftab_ret
1aff0     2D 00 64 FD | 	ret
1aff4                 | 
1aff4                 | __system__strncpy
1aff4     09 01 02 F6 | 	mov	_var01, arg01
1aff8                 | LR__2780
1aff8     01 16 86 F1 | 	sub	arg03, #1
1affc     00 16 56 F2 | 	cmps	arg03, #0 wc
1b000     18 00 90 CD |  if_b	jmp	#LR__2781
1b004     0A FB C1 FA | 	rdbyte	result1, arg02
1b008     00 FB 41 FC | 	wrbyte	result1, _var01
1b00c     01 14 06 F1 | 	add	arg02, #1
1b010     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1b014     01 00 06 F1 | 	add	_var01, #1
1b018     DC FF 9F 5D |  if_ne	jmp	#LR__2780
1b01c                 | LR__2781
1b01c     97 0C 48 FB | 	callpa	#(@LR__2783-@LR__2782)>>2,fcache_load_ptr_
1b020                 | LR__2782
1b020     01 16 86 F1 | 	sub	arg03, #1
1b024     00 16 56 F2 | 	cmps	arg03, #0 wc
1b028     00 03 02 36 |  if_ae	mov	_var02, _var01
1b02c     01 00 06 31 |  if_ae	add	_var01, #1
1b030     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1b034     E8 FF 9F 3D |  if_ae	jmp	#LR__2782
1b038                 | LR__2783
1b038     09 FB 01 F6 | 	mov	result1, arg01
1b03c                 | __system__strncpy_ret
1b03c     2D 00 64 FD | 	ret
1b040                 | 
1b040                 | __system__strncat
1b040     00 14 4E F2 | 	cmps	arg02, #0 wz
1b044     50 00 90 AD |  if_e	jmp	#LR__2794
1b048     01 16 16 F2 | 	cmp	arg03, #1 wc
1b04c     48 00 90 CD |  if_b	jmp	#LR__2794
1b050     09 01 02 F6 | 	mov	_var01, arg01
1b054     97 1E 48 FB | 	callpa	#(@LR__2792-@LR__2790)>>2,fcache_load_ptr_
1b058                 | LR__2790
1b058     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1b05c     01 00 06 51 |  if_ne	add	_var01, #1
1b060     F4 FF 9F 5D |  if_ne	jmp	#LR__2790
1b064     0B 03 02 F6 | 	mov	_var02, arg03
1b068                 | LR__2791
1b068     0A 05 C2 FA | 	rdbyte	_var03, arg02
1b06c     02 07 02 F6 | 	mov	_var04, _var03
1b070     07 06 4E F7 | 	zerox	_var04, #7 wz
1b074     01 14 06 F1 | 	add	arg02, #1
1b078     18 00 90 AD |  if_e	jmp	#LR__2793
1b07c     01 02 86 F1 | 	sub	_var02, #1
1b080     00 02 56 F2 | 	cmps	_var02, #0 wc
1b084     00 07 02 36 |  if_ae	mov	_var04, _var01
1b088     01 00 06 31 |  if_ae	add	_var01, #1
1b08c     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
1b090     D4 FF 9F 3D |  if_ae	jmp	#LR__2791
1b094                 | LR__2792
1b094                 | LR__2793
1b094     00 01 48 FC | 	wrbyte	#0, _var01
1b098                 | LR__2794
1b098     09 FB 01 F6 | 	mov	result1, arg01
1b09c                 | __system__strncat_ret
1b09c     2D 00 64 FD | 	ret
1b0a0                 | 
1b0a0                 | __system__strncmp
1b0a0     09 01 0A F6 | 	mov	_var01, arg01 wz
1b0a4     14 00 90 5D |  if_ne	jmp	#LR__2800
1b0a8     00 14 0E F2 | 	cmp	arg02, #0 wz
1b0ac     01 02 66 56 |  if_ne	neg	_var02, #1
1b0b0     00 02 06 A6 |  if_e	mov	_var02, #0
1b0b4     01 FB 01 F6 | 	mov	result1, _var02
1b0b8     74 00 90 FD | 	jmp	#__system__strncmp_ret
1b0bc                 | LR__2800
1b0bc     00 14 0E F2 | 	cmp	arg02, #0 wz
1b0c0     01 FA 05 A6 |  if_e	mov	result1, #1
1b0c4     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1b0c8     0B 05 02 F6 | 	mov	_var03, arg03
1b0cc     97 16 48 FB | 	callpa	#(@LR__2802-@LR__2801)>>2,fcache_load_ptr_
1b0d0                 | LR__2801
1b0d0     00 07 C2 FA | 	rdbyte	_var04, _var01
1b0d4     0A 09 02 F6 | 	mov	_var05, arg02
1b0d8     04 0B C2 FA | 	rdbyte	_var06, _var05
1b0dc     01 04 86 F1 | 	sub	_var03, #1
1b0e0     00 04 56 F2 | 	cmps	_var03, #0 wc
1b0e4     01 00 06 F1 | 	add	_var01, #1
1b0e8     01 14 06 F1 | 	add	arg02, #1
1b0ec     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1b0f0     08 00 90 2D |  if_nc_and_z	jmp	#LR__2803
1b0f4     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1b0f8     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__2801
1b0fc                 | LR__2802
1b0fc                 | LR__2803
1b0fc     00 04 56 F2 | 	cmps	_var03, #0 wc
1b100     00 FA 05 C6 |  if_b	mov	result1, #0
1b104     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
1b108     05 07 0A F2 | 	cmp	_var04, _var06 wz
1b10c     00 FA 05 A6 |  if_e	mov	result1, #0
1b110     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1b114     00 06 0E F2 | 	cmp	_var04, #0 wz
1b118     01 FA 65 A6 |  if_e	neg	result1, #1
1b11c     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
1b120     00 0A 0E F2 | 	cmp	_var06, #0 wz
1b124     01 FA 05 A6 |  if_e	mov	result1, #1
1b128     03 FB 01 56 |  if_ne	mov	result1, _var04
1b12c     05 FB 81 51 |  if_ne	sub	result1, _var06
1b130                 | __system__strncmp_ret
1b130     2D 00 64 FD | 	ret
1b134                 | 
1b134                 | __system____root_opendir
1b134     64 E8 05 F1 | 	add	ptr___system__dat__, #100
1b138     04 12 06 F1 | 	add	arg01, #4
1b13c     09 E9 61 FC | 	wrlong	ptr___system__dat__, arg01
1b140     00 FA 05 F6 | 	mov	result1, #0
1b144     64 E8 85 F1 | 	sub	ptr___system__dat__, #100
1b148                 | __system____root_opendir_ret
1b148     2D 00 64 FD | 	ret
1b14c                 | 
1b14c                 | __system____root_readdir
1b14c     03 4A 05 F6 | 	mov	COUNT_, #3
1b150     A8 00 A0 FD | 	call	#pushregs_
1b154     09 1F 02 F6 | 	mov	local01, arg01
1b158     0A 21 02 F6 | 	mov	local02, arg02
1b15c     04 1E 06 F1 | 	add	local01, #4
1b160     0F 23 02 FB | 	rdlong	local03, local01
1b164     04 1E 86 F1 | 	sub	local01, #4
1b168                 | LR__2810
1b168     74 E8 05 F1 | 	add	ptr___system__dat__, #116
1b16c     F4 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
1b170     74 E8 85 F1 | 	sub	ptr___system__dat__, #116
1b174     01 FA 65 A6 |  if_e	neg	result1, #1
1b178     48 00 90 AD |  if_e	jmp	#LR__2811
1b17c     11 17 0A FB | 	rdlong	arg03, local03 wz
1b180     04 22 06 A1 |  if_e	add	local03, #4
1b184     E0 FF 9F AD |  if_e	jmp	#LR__2810
1b188     11 15 02 FB | 	rdlong	arg02, local03
1b18c     01 14 06 F1 | 	add	arg02, #1
1b190     10 13 02 F6 | 	mov	arg01, local02
1b194     40 16 06 F6 | 	mov	arg03, #64
1b198     58 FE BF FD | 	call	#__system__strncpy
1b19c     50 20 06 F1 | 	add	local02, #80
1b1a0     10 03 48 FC | 	wrbyte	#1, local02
1b1a4     08 20 86 F1 | 	sub	local02, #8
1b1a8     10 01 68 FC | 	wrlong	#0, local02
1b1ac     04 20 06 F1 | 	add	local02, #4
1b1b0     10 01 68 FC | 	wrlong	#0, local02
1b1b4     04 22 06 F1 | 	add	local03, #4
1b1b8     04 1E 06 F1 | 	add	local01, #4
1b1bc     0F 23 62 FC | 	wrlong	local03, local01
1b1c0     00 FA 05 F6 | 	mov	result1, #0
1b1c4                 | LR__2811
1b1c4     A7 F0 03 F6 | 	mov	ptra, fp
1b1c8     B2 00 A0 FD | 	call	#popregs_
1b1cc                 | __system____root_readdir_ret
1b1cc     2D 00 64 FD | 	ret
1b1d0                 | 
1b1d0                 | __system____root_closedir
1b1d0     00 FA 05 F6 | 	mov	result1, #0
1b1d4                 | __system____root_closedir_ret
1b1d4     2D 00 64 FD | 	ret
1b1d8                 | 
1b1d8                 | __system____root_stat
1b1d8     0A 01 02 F6 | 	mov	_var01, arg02
1b1dc     00 13 02 F6 | 	mov	arg01, _var01
1b1e0     00 14 06 F6 | 	mov	arg02, #0
1b1e4     30 16 06 F6 | 	mov	arg03, #48
1b1e8     98 00 A0 FD | 	call	#\builtin_bytefill_
1b1ec     08 00 06 F1 | 	add	_var01, #8
1b1f0     08 00 80 FF 
1b1f4     00 FF 6B FC | 	wrlong	##4607, _var01
1b1f8     00 FA 05 F6 | 	mov	result1, #0
1b1fc                 | __system____root_stat_ret
1b1fc     2D 00 64 FD | 	ret
1b200                 | 
1b200                 | __system___normalizeName
1b200     00 00 06 F6 | 	mov	_var01, #0
1b204     09 03 02 F6 | 	mov	_var02, arg01
1b208     01 05 02 F6 | 	mov	_var03, _var02
1b20c                 | LR__2820
1b20c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1b210     5C 01 90 AD |  if_e	jmp	#LR__2839
1b214     00 00 0E F2 | 	cmp	_var01, #0 wz
1b218     02 07 02 56 |  if_ne	mov	_var04, _var03
1b21c     01 04 06 51 |  if_ne	add	_var03, #1
1b220     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
1b224     00 00 06 56 |  if_ne	mov	_var01, #0
1b228     01 07 C2 FA | 	rdbyte	_var04, _var02
1b22c     2E 06 0E F2 | 	cmp	_var04, #46 wz
1b230     D8 00 90 5D |  if_ne	jmp	#LR__2832
1b234     01 02 06 F1 | 	add	_var02, #1
1b238     01 07 C2 FA | 	rdbyte	_var04, _var02
1b23c     01 02 86 F1 | 	sub	_var02, #1
1b240     2F 06 0E F2 | 	cmp	_var04, #47 wz
1b244     18 00 90 AD |  if_e	jmp	#LR__2821
1b248     01 02 06 F1 | 	add	_var02, #1
1b24c     01 09 C2 FA | 	rdbyte	_var05, _var02
1b250     01 02 86 F1 | 	sub	_var02, #1
1b254     04 0B 02 F6 | 	mov	_var06, _var05
1b258     07 0A 4E F7 | 	zerox	_var06, #7 wz
1b25c     10 00 90 5D |  if_ne	jmp	#LR__2822
1b260                 | LR__2821
1b260     01 0D 02 F6 | 	mov	_var07, _var02
1b264     01 0C 06 F1 | 	add	_var07, #1
1b268     06 03 02 F6 | 	mov	_var02, _var07
1b26c     E0 00 90 FD | 	jmp	#LR__2836
1b270                 | LR__2822
1b270     01 02 06 F1 | 	add	_var02, #1
1b274     01 0D C2 FA | 	rdbyte	_var07, _var02
1b278     01 02 86 F1 | 	sub	_var02, #1
1b27c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1b280     2E 06 0E F2 | 	cmp	_var04, #46 wz
1b284     84 00 90 5D |  if_ne	jmp	#LR__2831
1b288     02 02 06 F1 | 	add	_var02, #2
1b28c     01 0D C2 FA | 	rdbyte	_var07, _var02
1b290     02 02 86 F1 | 	sub	_var02, #2
1b294     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
1b298     2F 06 0E F2 | 	cmp	_var04, #47 wz
1b29c     18 00 90 AD |  if_e	jmp	#LR__2823
1b2a0     02 02 06 F1 | 	add	_var02, #2
1b2a4     01 09 C2 FA | 	rdbyte	_var05, _var02
1b2a8     02 02 86 F1 | 	sub	_var02, #2
1b2ac     04 0B 02 F6 | 	mov	_var06, _var05
1b2b0     07 0A 4E F7 | 	zerox	_var06, #7 wz
1b2b4     54 00 90 5D |  if_ne	jmp	#LR__2830
1b2b8                 | LR__2823
1b2b8     02 02 06 F1 | 	add	_var02, #2
1b2bc     09 05 5A F2 | 	cmps	_var03, arg01 wcz
1b2c0     40 00 90 ED |  if_be	jmp	#LR__2829
1b2c4     02 0F 02 F6 | 	mov	_var08, _var03
1b2c8     01 0E 86 F1 | 	sub	_var08, #1
1b2cc                 | LR__2824
1b2cc     07 07 C2 FA | 	rdbyte	_var04, _var08
1b2d0     2F 06 0E F2 | 	cmp	_var04, #47 wz
1b2d4     0C 00 90 5D |  if_ne	jmp	#LR__2825
1b2d8     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1b2dc     01 0E 86 11 |  if_a	sub	_var08, #1
1b2e0     E8 FF 9F 1D |  if_a	jmp	#LR__2824
1b2e4                 | LR__2825
1b2e4     97 0C 48 FB | 	callpa	#(@LR__2827-@LR__2826)>>2,fcache_load_ptr_
1b2e8                 | LR__2826
1b2e8     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
1b2ec     10 00 90 ED |  if_be	jmp	#LR__2828
1b2f0     07 07 C2 FA | 	rdbyte	_var04, _var08
1b2f4     2F 06 0E F2 | 	cmp	_var04, #47 wz
1b2f8     01 0E 86 51 |  if_ne	sub	_var08, #1
1b2fc     E8 FF 9F 5D |  if_ne	jmp	#LR__2826
1b300                 | LR__2827
1b300                 | LR__2828
1b300     07 05 02 F6 | 	mov	_var03, _var08
1b304                 | LR__2829
1b304     01 00 06 F6 | 	mov	_var01, #1
1b308     44 00 90 FD | 	jmp	#LR__2836
1b30c                 | LR__2830
1b30c                 | LR__2831
1b30c                 | LR__2832
1b30c     97 18 48 FB | 	callpa	#(@LR__2834-@LR__2833)>>2,fcache_load_ptr_
1b310                 | LR__2833
1b310     01 07 CA FA | 	rdbyte	_var04, _var02 wz
1b314     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
1b318     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
1b31c     20 00 90 AD |  if_e	jmp	#LR__2835
1b320     01 0B 02 F6 | 	mov	_var06, _var02
1b324     01 09 02 F6 | 	mov	_var05, _var02
1b328     01 08 06 F1 | 	add	_var05, #1
1b32c     05 11 C2 FA | 	rdbyte	_var09, _var06
1b330     04 03 02 F6 | 	mov	_var02, _var05
1b334     02 11 42 FC | 	wrbyte	_var09, _var03
1b338     01 04 06 F1 | 	add	_var03, #1
1b33c     D0 FF 9F FD | 	jmp	#LR__2833
1b340                 | LR__2834
1b340                 | LR__2835
1b340     01 07 C2 FA | 	rdbyte	_var04, _var02
1b344     2F 06 0E F2 | 	cmp	_var04, #47 wz
1b348     C0 FE 9F 5D |  if_ne	jmp	#LR__2820
1b34c     01 00 06 F6 | 	mov	_var01, #1
1b350                 | LR__2836
1b350     97 0C 48 FB | 	callpa	#(@LR__2838-@LR__2837)>>2,fcache_load_ptr_
1b354                 | LR__2837
1b354     01 07 C2 FA | 	rdbyte	_var04, _var02
1b358     2F 06 0E F2 | 	cmp	_var04, #47 wz
1b35c     01 0D 02 A6 |  if_e	mov	_var07, _var02
1b360     01 0C 06 A1 |  if_e	add	_var07, #1
1b364     06 03 02 A6 |  if_e	mov	_var02, _var07
1b368     E8 FF 9F AD |  if_e	jmp	#LR__2837
1b36c                 | LR__2838
1b36c     9C FE 9F FD | 	jmp	#LR__2820
1b370                 | LR__2839
1b370     02 01 48 FC | 	wrbyte	#0, _var03
1b374                 | __system___normalizeName_ret
1b374     2D 00 64 FD | 	ret
1b378                 | 
1b378                 | __system___strrev
1b378     09 01 CA FA | 	rdbyte	_var01, arg01 wz
1b37c     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
1b380     09 03 02 F6 | 	mov	_var02, arg01
1b384     97 1A 48 FB | 	callpa	#(@LR__2842-@LR__2840)>>2,fcache_load_ptr_
1b388                 | LR__2840
1b388     01 01 CA FA | 	rdbyte	_var01, _var02 wz
1b38c     01 02 06 51 |  if_ne	add	_var02, #1
1b390     F4 FF 9F 5D |  if_ne	jmp	#LR__2840
1b394     01 02 86 F1 | 	sub	_var02, #1
1b398                 | LR__2841
1b398     09 03 5A F2 | 	cmps	_var02, arg01 wcz
1b39c     1C 00 90 ED |  if_be	jmp	#LR__2843
1b3a0     09 01 C2 FA | 	rdbyte	_var01, arg01
1b3a4     01 05 C2 FA | 	rdbyte	_var03, _var02
1b3a8     09 05 42 FC | 	wrbyte	_var03, arg01
1b3ac     01 01 42 FC | 	wrbyte	_var01, _var02
1b3b0     01 12 06 F1 | 	add	arg01, #1
1b3b4     01 02 86 F1 | 	sub	_var02, #1
1b3b8     DC FF 9F FD | 	jmp	#LR__2841
1b3bc                 | LR__2842
1b3bc                 | LR__2843
1b3bc                 | __system___strrev_ret
1b3bc     2D 00 64 FD | 	ret
1b3c0                 | 
1b3c0                 | __system___fmtpad
1b3c0     06 4A 05 F6 | 	mov	COUNT_, #6
1b3c4     A8 00 A0 FD | 	call	#pushregs_
1b3c8     09 1F 02 F6 | 	mov	local01, arg01
1b3cc     0A 21 02 F6 | 	mov	local02, arg02
1b3d0     0B 23 02 F6 | 	mov	local03, arg03
1b3d4     10 13 EA F8 | 	getbyte	arg01, local02, #1
1b3d8     16 20 46 F0 | 	shr	local02, #22
1b3dc     03 20 0E F5 | 	and	local02, #3 wz
1b3e0     00 24 06 F6 | 	mov	local04, #0
1b3e4     01 20 06 A6 |  if_e	mov	local02, #1
1b3e8     0C 21 CA F7 | 	test	local02, arg04 wz
1b3ec     00 FA 05 A6 |  if_e	mov	result1, #0
1b3f0     88 00 90 AD |  if_e	jmp	#LR__2853
1b3f4     09 23 C2 F2 | 	subr	local03, arg01
1b3f8     01 22 56 F2 | 	cmps	local03, #1 wc
1b3fc     00 FA 05 C6 |  if_b	mov	result1, #0
1b400     78 00 90 CD |  if_b	jmp	#LR__2853
1b404     03 20 0E F2 | 	cmp	local02, #3 wz
1b408     18 00 90 5D |  if_ne	jmp	#LR__2850
1b40c     01 18 0E F2 | 	cmp	arg04, #1 wz
1b410     6E 20 62 FD | 	wrz	local02
1b414     10 23 02 F1 | 	add	local03, local02
1b418     11 23 52 F6 | 	abs	local03, local03 wc
1b41c     01 22 46 F0 | 	shr	local03, #1
1b420     11 23 82 F6 | 	negc	local03, local03
1b424                 | LR__2850
1b424     01 22 56 F2 | 	cmps	local03, #1 wc
1b428     4C 00 90 CD |  if_b	jmp	#LR__2852
1b42c     11 27 02 F6 | 	mov	local05, local03
1b430                 | LR__2851
1b430     0F 21 02 F6 | 	mov	local02, local01
1b434     0F 29 02 F6 | 	mov	local06, local01
1b438     13 20 46 F7 | 	zerox	local02, #19
1b43c     14 28 46 F0 | 	shr	local06, #20
1b440     02 28 66 F0 | 	shl	local06, #2
1b444     ED 28 02 F1 | 	add	local06, __methods__
1b448     14 29 02 FB | 	rdlong	local06, local06
1b44c     20 12 06 F6 | 	mov	arg01, #32
1b450     F2 22 02 F6 | 	mov	local03, objptr
1b454     10 E5 01 F6 | 	mov	objptr, local02
1b458     2D 28 62 FD | 	call	local06
1b45c     11 E5 01 F6 | 	mov	objptr, local03
1b460     FD 28 02 F6 | 	mov	local06, result1
1b464     00 28 56 F2 | 	cmps	local06, #0 wc
1b468     14 FB 01 C6 |  if_b	mov	result1, local06
1b46c     0C 00 90 CD |  if_b	jmp	#LR__2853
1b470     14 25 02 F1 | 	add	local04, local06
1b474     EE 27 6E FB | 	djnz	local05, #LR__2851
1b478                 | LR__2852
1b478     12 FB 01 F6 | 	mov	result1, local04
1b47c                 | LR__2853
1b47c     A7 F0 03 F6 | 	mov	ptra, fp
1b480     B2 00 A0 FD | 	call	#popregs_
1b484                 | __system___fmtpad_ret
1b484     2D 00 64 FD | 	ret
1b488                 | 
1b488                 | __system___uitoa
1b488     04 4A 05 F6 | 	mov	COUNT_, #4
1b48c     A8 00 A0 FD | 	call	#pushregs_
1b490     09 1F 02 F6 | 	mov	local01, arg01
1b494     00 1A 4E F2 | 	cmps	arg05, #0 wz
1b498     0F 1B 02 F6 | 	mov	arg05, local01
1b49c     00 20 06 F6 | 	mov	local02, #0
1b4a0     37 22 06 56 |  if_ne	mov	local03, #55
1b4a4     57 22 06 A6 |  if_e	mov	local03, #87
1b4a8                 | LR__2860
1b4a8     0B 15 12 FD | 	qdiv	arg02, arg03
1b4ac     19 24 62 FD | 	getqy	local04
1b4b0     0B 15 12 FD | 	qdiv	arg02, arg03
1b4b4     0A 24 16 F2 | 	cmp	local04, #10 wc
1b4b8     30 24 06 C1 |  if_b	add	local04, #48
1b4bc     11 25 02 31 |  if_ae	add	local04, local03
1b4c0     0D 25 42 FC | 	wrbyte	local04, arg05
1b4c4     01 1A 06 F1 | 	add	arg05, #1
1b4c8     01 20 06 F1 | 	add	local02, #1
1b4cc     18 14 62 FD | 	getqx	arg02
1b4d0     00 14 0E F2 | 	cmp	arg02, #0 wz
1b4d4     D0 FF 9F 5D |  if_ne	jmp	#LR__2860
1b4d8     0C 21 12 F2 | 	cmp	local02, arg04 wc
1b4dc     C8 FF 9F CD |  if_b	jmp	#LR__2860
1b4e0     0D 01 48 FC | 	wrbyte	#0, arg05
1b4e4     0F 13 02 F6 | 	mov	arg01, local01
1b4e8     8C FE BF FD | 	call	#__system___strrev
1b4ec     10 FB 01 F6 | 	mov	result1, local02
1b4f0     A7 F0 03 F6 | 	mov	ptra, fp
1b4f4     B2 00 A0 FD | 	call	#popregs_
1b4f8                 | __system___uitoa_ret
1b4f8     2D 00 64 FD | 	ret
1b4fc                 | 
1b4fc                 | __system__disassemble_0330
1b4fc     10 4A 05 F6 | 	mov	COUNT_, #16
1b500     A8 00 A0 FD | 	call	#pushregs_
1b504     09 1F 02 F6 | 	mov	local01, arg01
1b508     0A 21 02 F6 | 	mov	local02, arg02
1b50c     0B 23 02 F6 | 	mov	local03, arg03
1b510     0C 25 02 F6 | 	mov	local04, arg04
1b514     0D 27 02 F6 | 	mov	local05, arg05
1b518     13 13 52 F6 | 	abs	arg01, local05 wc
1b51c     1F 28 C6 C9 |  if_b	decod	local06, #31
1b520     00 28 06 36 |  if_ae	mov	local06, #0
1b524     B4 D3 BF FD | 	call	#__system___float_fromuns
1b528     14 FB 61 F5 | 	xor	result1, local06
1b52c     FD 2A 02 F6 | 	mov	local07, result1
1b530     00 2C 06 F6 | 	mov	local08, #0
1b534     0F 13 02 F6 | 	mov	arg01, local01
1b538     00 14 06 F6 | 	mov	arg02, #0
1b53c     01 16 06 F6 | 	mov	arg03, #1
1b540     F8 DA BF FD | 	call	#__system___float_cmp
1b544     00 FA 0D F2 | 	cmp	result1, #0 wz
1b548     00 2E 06 A6 |  if_e	mov	local09, #0
1b54c     10 01 68 AC |  if_e	wrlong	#0, local02
1b550     11 2F 62 AC |  if_e	wrlong	local09, local03
1b554     8C 01 90 AD |  if_e	jmp	#LR__2882
1b558     0F 13 02 F6 | 	mov	arg01, local01
1b55c     A8 DF BF FD | 	call	#__system____builtin_ilogb
1b560     FD 30 02 F6 | 	mov	local10, result1
1b564     0A 26 0E F2 | 	cmp	local05, #10 wz
1b568     24 00 90 5D |  if_ne	jmp	#LR__2870
1b56c     18 2F 02 F6 | 	mov	local09, local10
1b570     01 2E 66 F0 | 	shl	local09, #1
1b574     18 2F 02 F1 | 	add	local09, local10
1b578     17 31 52 F6 | 	abs	local10, local09 wc
1b57c     0A 30 16 FD | 	qdiv	local10, #10
1b580     09 32 06 F6 | 	mov	local11, #9
1b584     18 30 62 FD | 	getqx	local10
1b588     18 31 82 F6 | 	negc	local10, local10
1b58c     04 00 90 FD | 	jmp	#LR__2871
1b590                 | LR__2870
1b590     18 32 06 F6 | 	mov	local11, #24
1b594                 | LR__2871
1b594                 | LR__2872
1b594     08 2C 56 F2 | 	cmps	local08, #8 wc
1b598     01 2C 06 F1 | 	add	local08, #1
1b59c     60 00 90 3D |  if_ae	jmp	#LR__2873
1b5a0     00 C0 1F FF 
1b5a4     00 12 06 F6 | 	mov	arg01, ##1065353216
1b5a8     15 15 02 F6 | 	mov	arg02, local07
1b5ac     18 17 02 F6 | 	mov	arg03, local10
1b5b0     88 E3 BF FD | 	call	#__system___float_pow_n
1b5b4     FD 14 02 F6 | 	mov	arg02, result1
1b5b8     0F 13 02 F6 | 	mov	arg01, local01
1b5bc     4C D8 BF FD | 	call	#__system___float_div
1b5c0     FD 34 02 F6 | 	mov	local12, result1
1b5c4     1A 13 02 F6 | 	mov	arg01, local12
1b5c8     00 C0 1F FF 
1b5cc     00 14 06 F6 | 	mov	arg02, ##1065353216
1b5d0     01 16 06 F6 | 	mov	arg03, #1
1b5d4     64 DA BF FD | 	call	#__system___float_cmp
1b5d8     00 FA 55 F2 | 	cmps	result1, #0 wc
1b5dc     01 30 86 C1 |  if_b	sub	local10, #1
1b5e0     B0 FF 9F CD |  if_b	jmp	#LR__2872
1b5e4     15 15 02 F6 | 	mov	arg02, local07
1b5e8     1A 13 02 F6 | 	mov	arg01, local12
1b5ec     01 16 66 F6 | 	neg	arg03, #1
1b5f0     48 DA BF FD | 	call	#__system___float_cmp
1b5f4     00 FA 55 F2 | 	cmps	result1, #0 wc
1b5f8     01 30 06 31 |  if_ae	add	local10, #1
1b5fc     94 FF 9F 3D |  if_ae	jmp	#LR__2872
1b600                 | LR__2873
1b600     1A 13 02 F6 | 	mov	arg01, local12
1b604     00 DF BF FD | 	call	#__system____builtin_ilogb
1b608     FD 36 02 F6 | 	mov	local13, result1
1b60c     1A 39 02 F6 | 	mov	local14, local12
1b610     17 39 06 F4 | 	bitl	local14, #279
1b614     17 38 26 F4 | 	bith	local14, #23
1b618     1B 39 62 F0 | 	shl	local14, local13
1b61c     02 26 0E F2 | 	cmp	local05, #2 wz
1b620     02 24 66 A0 |  if_e	shl	local04, #2
1b624     00 3A 06 F6 | 	mov	local15, #0
1b628     00 24 56 F2 | 	cmps	local04, #0 wc
1b62c     10 00 90 3D |  if_ae	jmp	#LR__2874
1b630     18 25 C2 F2 | 	subr	local04, local10
1b634     00 24 56 F2 | 	cmps	local04, #0 wc
1b638     A0 00 90 CD |  if_b	jmp	#LR__2881
1b63c     04 00 90 FD | 	jmp	#LR__2875
1b640                 | LR__2874
1b640     01 24 06 F1 | 	add	local04, #1
1b644                 | LR__2875
1b644     19 25 7A F3 | 	fles	local04, local11 wcz
1b648     01 3C 06 F6 | 	mov	local16, #1
1b64c     97 22 48 FB | 	callpa	#(@LR__2877-@LR__2876)>>2,fcache_load_ptr_
1b650                 | LR__2876
1b650     00 40 00 FF 
1b654     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
1b658     38 00 90 3D |  if_ae	jmp	#LR__2878
1b65c     01 24 56 F2 | 	cmps	local04, #1 wc
1b660     01 24 86 F1 | 	sub	local04, #1
1b664     2C 00 90 CD |  if_b	jmp	#LR__2878
1b668     13 3B 02 FD | 	qmul	local15, local05
1b66c     1C 37 02 F6 | 	mov	local13, local14
1b670     17 36 46 F0 | 	shr	local13, #23
1b674     17 39 06 F4 | 	bitl	local14, #279
1b678     18 3A 62 FD | 	getqx	local15
1b67c     13 3D 02 FD | 	qmul	local16, local05
1b680     18 3C 62 FD | 	getqx	local16
1b684     13 39 02 FD | 	qmul	local14, local05
1b688     1B 3B 02 F1 | 	add	local15, local13
1b68c     18 38 62 FD | 	getqx	local14
1b690     BC FF 9F FD | 	jmp	#LR__2876
1b694                 | LR__2877
1b694                 | LR__2878
1b694     13 2F 02 F6 | 	mov	local09, local05
1b698     17 2E 66 F0 | 	shl	local09, #23
1b69c     17 37 52 F6 | 	abs	local13, local09 wc
1b6a0     01 36 46 F0 | 	shr	local13, #1
1b6a4     1B 37 82 F6 | 	negc	local13, local13
1b6a8     1B 39 1A F2 | 	cmp	local14, local13 wcz
1b6ac     20 00 90 1D |  if_a	jmp	#LR__2879
1b6b0     17 26 66 F0 | 	shl	local05, #23
1b6b4     13 37 52 F6 | 	abs	local13, local05 wc
1b6b8     01 36 46 F0 | 	shr	local13, #1
1b6bc     1B 37 82 F6 | 	negc	local13, local13
1b6c0     1B 39 0A F2 | 	cmp	local14, local13 wz
1b6c4     14 00 90 5D |  if_ne	jmp	#LR__2880
1b6c8     01 3A CE F7 | 	test	local15, #1 wz
1b6cc     0C 00 90 AD |  if_e	jmp	#LR__2880
1b6d0                 | LR__2879
1b6d0     01 3A 06 F1 | 	add	local15, #1
1b6d4     1E 3B 0A F2 | 	cmp	local15, local16 wz
1b6d8     01 30 06 A1 |  if_e	add	local10, #1
1b6dc                 | LR__2880
1b6dc                 | LR__2881
1b6dc     10 3B 62 FC | 	wrlong	local15, local02
1b6e0     11 31 62 FC | 	wrlong	local10, local03
1b6e4                 | LR__2882
1b6e4     A7 F0 03 F6 | 	mov	ptra, fp
1b6e8     B2 00 A0 FD | 	call	#popregs_
1b6ec                 | __system__disassemble_0330_ret
1b6ec     2D 00 64 FD | 	ret
1b6f0                 | 
1b6f0                 | __system__emitsign_0332
1b6f0     00 FA 05 F6 | 	mov	result1, #0
1b6f4     00 14 0E F2 | 	cmp	arg02, #0 wz
1b6f8     09 01 02 56 |  if_ne	mov	_var01, arg01
1b6fc     01 12 06 51 |  if_ne	add	arg01, #1
1b700     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
1b704     01 FA 05 56 |  if_ne	mov	result1, #1
1b708     00 16 0E F2 | 	cmp	arg03, #0 wz
1b70c     09 61 48 5C |  if_ne	wrbyte	#48, arg01
1b710     01 12 06 51 |  if_ne	add	arg01, #1
1b714     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
1b718     02 FA 05 51 |  if_ne	add	result1, #2
1b71c                 | __system__emitsign_0332_ret
1b71c     2D 00 64 FD | 	ret
1b720                 | 
1b720                 | __system___gettxfunc
1b720     01 4A 05 F6 | 	mov	COUNT_, #1
1b724     A8 00 A0 FD | 	call	#pushregs_
1b728     A0 F8 BF FD | 	call	#__system____getftab
1b72c     FD 1E 0A F6 | 	mov	local01, result1 wz
1b730     10 00 90 AD |  if_e	jmp	#LR__2890
1b734     08 1E 06 F1 | 	add	local01, #8
1b738     0F 15 0A FB | 	rdlong	arg02, local01 wz
1b73c     08 1E 86 F1 | 	sub	local01, #8
1b740     08 00 90 5D |  if_ne	jmp	#LR__2891
1b744                 | LR__2890
1b744     00 FA 05 F6 | 	mov	result1, #0
1b748     0C 00 90 FD | 	jmp	#LR__2892
1b74c                 | LR__2891
1b74c     00 D0 02 FF 
1b750     00 1E 46 F5 | 	or	local01, ##94371840
1b754     0F FB 01 F6 | 	mov	result1, local01
1b758                 | LR__2892
1b758     A7 F0 03 F6 | 	mov	ptra, fp
1b75c     B2 00 A0 FD | 	call	#popregs_
1b760                 | __system___gettxfunc_ret
1b760     2D 00 64 FD | 	ret
1b764                 | 
1b764                 | __system___getrxfunc
1b764     01 4A 05 F6 | 	mov	COUNT_, #1
1b768     A8 00 A0 FD | 	call	#pushregs_
1b76c     5C F8 BF FD | 	call	#__system____getftab
1b770     FD 1E 0A F6 | 	mov	local01, result1 wz
1b774     10 00 90 AD |  if_e	jmp	#LR__2900
1b778     08 1E 06 F1 | 	add	local01, #8
1b77c     0F 15 0A FB | 	rdlong	arg02, local01 wz
1b780     08 1E 86 F1 | 	sub	local01, #8
1b784     08 00 90 5D |  if_ne	jmp	#LR__2901
1b788                 | LR__2900
1b788     00 FA 05 F6 | 	mov	result1, #0
1b78c     0C 00 90 FD | 	jmp	#LR__2902
1b790                 | LR__2901
1b790     00 D8 02 FF 
1b794     00 1E 46 F5 | 	or	local01, ##95420416
1b798     0F FB 01 F6 | 	mov	result1, local01
1b79c                 | LR__2902
1b79c     A7 F0 03 F6 | 	mov	ptra, fp
1b7a0     B2 00 A0 FD | 	call	#popregs_
1b7a4                 | __system___getrxfunc_ret
1b7a4     2D 00 64 FD | 	ret
1b7a8                 | 
1b7a8                 | __system___getiolock_0372
1b7a8     01 4A 05 F6 | 	mov	COUNT_, #1
1b7ac     A8 00 A0 FD | 	call	#pushregs_
1b7b0     18 F8 BF FD | 	call	#__system____getftab
1b7b4     FD 1E 0A F6 | 	mov	local01, result1 wz
1b7b8     10 00 90 AD |  if_e	jmp	#LR__2910
1b7bc     08 1E 06 F1 | 	add	local01, #8
1b7c0     0F FB 09 FB | 	rdlong	result1, local01 wz
1b7c4     08 1E 86 F1 | 	sub	local01, #8
1b7c8     18 00 90 5D |  if_ne	jmp	#LR__2911
1b7cc                 | LR__2910
1b7cc     01 00 00 FF 
1b7d0     D4 E8 05 F1 | 	add	ptr___system__dat__, ##724
1b7d4     F4 FA 01 F6 | 	mov	result1, ptr___system__dat__
1b7d8     01 00 00 FF 
1b7dc     D4 E8 85 F1 | 	sub	ptr___system__dat__, ##724
1b7e0     08 00 90 FD | 	jmp	#LR__2912
1b7e4                 | LR__2911
1b7e4     0C 1E 06 F1 | 	add	local01, #12
1b7e8     0F FB 01 F6 | 	mov	result1, local01
1b7ec                 | LR__2912
1b7ec     A7 F0 03 F6 | 	mov	ptra, fp
1b7f0     B2 00 A0 FD | 	call	#popregs_
1b7f4                 | __system___getiolock_0372_ret
1b7f4     2D 00 64 FD | 	ret
1b7f8                 | 
1b7f8                 | __system___basic_dir
1b7f8     05 4A 05 F6 | 	mov	COUNT_, #5
1b7fc     A8 00 A0 FD | 	call	#pushregs_
1b800     4C F0 07 F1 | 	add	ptra, #76
1b804     04 4E 05 F1 | 	add	fp, #4
1b808     A7 12 62 FC | 	wrlong	arg01, fp
1b80c     04 4E 05 F1 | 	add	fp, #4
1b810     A7 14 62 FC | 	wrlong	arg02, fp
1b814     04 4E 85 F1 | 	sub	fp, #4
1b818     A7 14 0A FB | 	rdlong	arg02, fp wz
1b81c     04 4E 85 F1 | 	sub	fp, #4
1b820     04 4E 05 51 |  if_ne	add	fp, #4
1b824     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1b828     04 4E 85 51 |  if_ne	sub	fp, #4
1b82c     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
1b830     70 00 90 AD |  if_e	jmp	#LR__2920
1b834     03 00 00 FF 
1b838     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b83c     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1b840     03 00 00 FF 
1b844     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1b848     03 00 00 5F 
1b84c     28 E9 05 51 |  if_ne	add	ptr___system__dat__, ##1832
1b850     F4 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
1b854     03 00 00 5F 
1b858     28 E9 85 51 |  if_ne	sub	ptr___system__dat__, ##1832
1b85c     FC EA BF 5D |  if_ne	call	#__system__closedir
1b860     29 01 00 FF 
1b864     44 13 06 F6 | 	mov	arg01, ##@LR__4078
1b868     04 EA BF FD | 	call	#__system__opendir
1b86c     03 00 00 FF 
1b870     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b874     F4 FA 61 FC | 	wrlong	result1, ptr___system__dat__
1b878     08 4E 05 F1 | 	add	fp, #8
1b87c     A7 20 02 FB | 	rdlong	local02, fp
1b880     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1b884     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1b888     04 4E 85 F1 | 	sub	fp, #4
1b88c     A7 20 02 FB | 	rdlong	local02, fp
1b890     04 4E 85 F1 | 	sub	fp, #4
1b894     04 E8 05 F1 | 	add	ptr___system__dat__, #4
1b898     F4 20 62 FC | 	wrlong	local02, ptr___system__dat__
1b89c     03 00 00 FF 
1b8a0     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1b8a4                 | LR__2920
1b8a4     03 00 00 FF 
1b8a8     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b8ac     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1b8b0     03 00 00 FF 
1b8b4     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1b8b8     29 01 00 AF 
1b8bc     46 FB 05 A6 |  if_e	mov	result1, ##@LR__4079
1b8c0     84 02 90 AD |  if_e	jmp	#LR__2933
1b8c4                 | LR__2921
1b8c4     03 00 00 FF 
1b8c8     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b8cc     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1b8d0     03 00 00 FF 
1b8d4     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1b8d8     F4 EA BF FD | 	call	#__system__readdir
1b8dc     0C 4E 05 F1 | 	add	fp, #12
1b8e0     A7 FA 61 FC | 	wrlong	result1, fp
1b8e4     0C 4E 85 F1 | 	sub	fp, #12
1b8e8     00 FA 0D F2 | 	cmp	result1, #0 wz
1b8ec     38 00 90 5D |  if_ne	jmp	#LR__2922
1b8f0     03 00 00 FF 
1b8f4     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b8f8     F4 12 02 FB | 	rdlong	arg01, ptr___system__dat__
1b8fc     03 00 00 FF 
1b900     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1b904     54 EA BF FD | 	call	#__system__closedir
1b908     03 00 00 FF 
1b90c     28 E9 05 F1 | 	add	ptr___system__dat__, ##1832
1b910     F4 00 68 FC | 	wrlong	#0, ptr___system__dat__
1b914     03 00 00 FF 
1b918     28 E9 85 F1 | 	sub	ptr___system__dat__, ##1832
1b91c     29 01 00 FF 
1b920     48 FB 05 F6 | 	mov	result1, ##@LR__4080
1b924     20 02 90 FD | 	jmp	#LR__2933
1b928                 | LR__2922
1b928     0C 4E 05 F1 | 	add	fp, #12
1b92c     A7 12 02 FB | 	rdlong	arg01, fp
1b930     0C 4E 85 F1 | 	sub	fp, #12
1b934     03 00 00 FF 
1b938     30 E9 05 F1 | 	add	ptr___system__dat__, ##1840
1b93c     F4 14 02 FB | 	rdlong	arg02, ptr___system__dat__
1b940     03 00 00 FF 
1b944     30 E9 85 F1 | 	sub	ptr___system__dat__, ##1840
1b948     48 07 B0 FD | 	call	#__system___pat_match
1b94c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b950     70 FF 9F AD |  if_e	jmp	#LR__2921
1b954     03 00 00 FF 
1b958     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1b95c     F4 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
1b960     03 00 00 FF 
1b964     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1b968     78 01 90 AD |  if_e	jmp	#LR__2929
1b96c     0C 4E 05 F1 | 	add	fp, #12
1b970     A7 12 02 FB | 	rdlong	arg01, fp
1b974     04 4E 05 F1 | 	add	fp, #4
1b978     A7 14 02 F6 | 	mov	arg02, fp
1b97c     10 4E 85 F1 | 	sub	fp, #16
1b980     50 F3 BF FD | 	call	#__system__stat
1b984     40 4E 05 F1 | 	add	fp, #64
1b988     A7 FA 61 FC | 	wrlong	result1, fp
1b98c     40 4E 85 F1 | 	sub	fp, #64
1b990     00 FA 0D F2 | 	cmp	result1, #0 wz
1b994     29 01 00 5F 
1b998     4A FB 05 56 |  if_ne	mov	result1, ##@LR__4081
1b99c     A8 01 90 5D |  if_ne	jmp	#LR__2933
1b9a0     18 4E 05 F1 | 	add	fp, #24
1b9a4     A7 20 02 FB | 	rdlong	local02, fp
1b9a8     78 00 00 FF 
1b9ac     00 20 06 F5 | 	and	local02, ##61440
1b9b0     2C 4E 05 F1 | 	add	fp, #44
1b9b4     A7 20 62 FC | 	wrlong	local02, fp
1b9b8     38 4E 85 F1 | 	sub	fp, #56
1b9bc     A7 20 02 FB | 	rdlong	local02, fp
1b9c0     0C 4E 85 F1 | 	sub	fp, #12
1b9c4     10 21 C2 FA | 	rdbyte	local02, local02
1b9c8     2E 20 0E F2 | 	cmp	local02, #46 wz
1b9cc     08 4E 05 A1 |  if_e	add	fp, #8
1b9d0     A7 04 68 AC |  if_e	wrlong	#2, fp
1b9d4     08 4E C5 F3 | 	sumz	fp, #8
1b9d8     A7 00 68 5C |  if_ne	wrlong	#0, fp
1b9dc     08 4E 85 51 |  if_ne	sub	fp, #8
1b9e0     44 4E 05 F1 | 	add	fp, #68
1b9e4     A7 20 02 FB | 	rdlong	local02, fp
1b9e8     44 4E 85 F1 | 	sub	fp, #68
1b9ec     08 00 00 FF 
1b9f0     00 20 0E F2 | 	cmp	local02, ##4096 wz
1b9f4     18 00 90 5D |  if_ne	jmp	#LR__2923
1b9f8     08 4E 05 F1 | 	add	fp, #8
1b9fc     A7 20 02 FB | 	rdlong	local02, fp
1ba00     10 20 46 F5 | 	or	local02, #16
1ba04     A7 20 62 FC | 	wrlong	local02, fp
1ba08     08 4E 85 F1 | 	sub	fp, #8
1ba0c     AC 00 90 FD | 	jmp	#LR__2928
1ba10                 | LR__2923
1ba10     44 4E 05 F1 | 	add	fp, #68
1ba14     A7 20 02 FB | 	rdlong	local02, fp
1ba18     44 4E 85 F1 | 	sub	fp, #68
1ba1c     10 00 00 FF 
1ba20     00 20 0E F2 | 	cmp	local02, ##8192 wz
1ba24     44 4E 05 51 |  if_ne	add	fp, #68
1ba28     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1ba2c     44 4E 85 51 |  if_ne	sub	fp, #68
1ba30     18 00 00 5F 
1ba34     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
1ba38     44 4E 05 51 |  if_ne	add	fp, #68
1ba3c     0F 23 02 56 |  if_ne	mov	local03, local01
1ba40     44 4E 85 51 |  if_ne	sub	fp, #68
1ba44     20 00 00 5F 
1ba48     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
1ba4c     18 00 90 5D |  if_ne	jmp	#LR__2924
1ba50     08 4E 05 F1 | 	add	fp, #8
1ba54     A7 20 02 FB | 	rdlong	local02, fp
1ba58     04 20 46 F5 | 	or	local02, #4
1ba5c     A7 20 62 FC | 	wrlong	local02, fp
1ba60     08 4E 85 F1 | 	sub	fp, #8
1ba64     54 00 90 FD | 	jmp	#LR__2927
1ba68                 | LR__2924
1ba68     18 4E 05 F1 | 	add	fp, #24
1ba6c     A7 20 02 FB | 	rdlong	local02, fp
1ba70     18 4E 85 F1 | 	sub	fp, #24
1ba74     92 20 CE F7 | 	test	local02, #146 wz
1ba78     18 00 90 5D |  if_ne	jmp	#LR__2925
1ba7c     08 4E 05 F1 | 	add	fp, #8
1ba80     A7 20 02 FB | 	rdlong	local02, fp
1ba84     01 20 46 F5 | 	or	local02, #1
1ba88     A7 20 62 FC | 	wrlong	local02, fp
1ba8c     08 4E 85 F1 | 	sub	fp, #8
1ba90     28 00 90 FD | 	jmp	#LR__2926
1ba94                 | LR__2925
1ba94     44 4E 05 F1 | 	add	fp, #68
1ba98     A7 24 02 FB | 	rdlong	local04, fp
1ba9c     44 4E 85 F1 | 	sub	fp, #68
1baa0     08 00 00 FF 
1baa4     00 24 0E F2 | 	cmp	local04, ##4096 wz
1baa8     08 4E 05 51 |  if_ne	add	fp, #8
1baac     A7 24 02 5B |  if_ne	rdlong	local04, fp
1bab0     20 24 46 55 |  if_ne	or	local04, #32
1bab4     A7 24 62 5C |  if_ne	wrlong	local04, fp
1bab8     08 4E 85 51 |  if_ne	sub	fp, #8
1babc                 | LR__2926
1babc                 | LR__2927
1babc                 | LR__2928
1babc     08 4E 05 F1 | 	add	fp, #8
1bac0     A7 24 02 FB | 	rdlong	local04, fp
1bac4     08 4E 85 F1 | 	sub	fp, #8
1bac8     03 00 00 FF 
1bacc     2C E9 05 F1 | 	add	ptr___system__dat__, ##1836
1bad0     F4 1E 02 FB | 	rdlong	local01, ptr___system__dat__
1bad4     03 00 00 FF 
1bad8     2C E9 85 F1 | 	sub	ptr___system__dat__, ##1836
1badc     0F 25 CA F7 | 	test	local04, local01 wz
1bae0     E0 FD 9F AD |  if_e	jmp	#LR__2921
1bae4                 | LR__2929
1bae4     0C 4E 05 F1 | 	add	fp, #12
1bae8     A7 12 02 FB | 	rdlong	arg01, fp
1baec     0C 4E 85 F1 | 	sub	fp, #12
1baf0     09 27 02 F6 | 	mov	local05, arg01
1baf4     97 06 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
1baf8                 | LR__2930
1baf8     13 FB C9 FA | 	rdbyte	result1, local05 wz
1bafc     01 26 06 51 |  if_ne	add	local05, #1
1bb00     F4 FF 9F 5D |  if_ne	jmp	#LR__2930
1bb04                 | LR__2931
1bb04     13 13 C2 F2 | 	subr	arg01, local05
1bb08     01 12 06 F1 | 	add	arg01, #1
1bb0c     4C E1 BF FD | 	call	#__system___gc_alloc_managed
1bb10     48 4E 05 F1 | 	add	fp, #72
1bb14     A7 FA 61 FC | 	wrlong	result1, fp
1bb18     48 4E 85 F1 | 	sub	fp, #72
1bb1c     00 FA 0D F2 | 	cmp	result1, #0 wz
1bb20     18 00 90 AD |  if_e	jmp	#LR__2932
1bb24     48 4E 05 F1 | 	add	fp, #72
1bb28     A7 12 02 FB | 	rdlong	arg01, fp
1bb2c     3C 4E 85 F1 | 	sub	fp, #60
1bb30     A7 14 02 FB | 	rdlong	arg02, fp
1bb34     0C 4E 85 F1 | 	sub	fp, #12
1bb38     70 A7 BF FD | 	call	#__system____builtin_strcpy
1bb3c                 | LR__2932
1bb3c     48 4E 05 F1 | 	add	fp, #72
1bb40     A7 FA 01 FB | 	rdlong	result1, fp
1bb44     48 4E 85 F1 | 	sub	fp, #72
1bb48                 | LR__2933
1bb48     A7 F0 03 F6 | 	mov	ptra, fp
1bb4c     B2 00 A0 FD | 	call	#popregs_
1bb50                 | __system___basic_dir_ret
1bb50     2D 00 64 FD | 	ret
1bb54                 | 
1bb54                 | __system__pack_0438
1bb54     09 01 02 F6 | 	mov	_var01, arg01
1bb58     7F 16 06 F1 | 	add	arg03, #127
1bb5c     04 18 CE F7 | 	test	arg04, #4 wz
1bb60     10 00 90 AD |  if_e	jmp	#LR__2940
1bb64     00 00 0E F2 | 	cmp	_var01, #0 wz
1bb68     16 00 C6 A9 |  if_e	decod	_var01, #22
1bb6c     F7 00 26 F4 | 	bith	_var01, #247
1bb70     B4 00 90 FD | 	jmp	#LR__2949
1bb74                 | LR__2940
1bb74     02 18 CE F7 | 	test	arg04, #2 wz
1bb78     00 C0 3F 5F 
1bb7c     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
1bb80     00 14 06 56 |  if_ne	mov	arg02, #0
1bb84     A0 00 90 5D |  if_ne	jmp	#LR__2948
1bb88     08 18 CE F7 | 	test	arg04, #8 wz
1bb8c     00 00 06 56 |  if_ne	mov	_var01, #0
1bb90     94 00 90 5D |  if_ne	jmp	#LR__2947
1bb94     FF 16 56 F2 | 	cmps	arg03, #255 wc
1bb98     00 C0 3F 3F 
1bb9c     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
1bba0     00 14 06 36 |  if_ae	mov	arg02, #0
1bba4     80 00 90 3D |  if_ae	jmp	#LR__2946
1bba8     01 16 56 F2 | 	cmps	arg03, #1 wc
1bbac     6C 00 90 3D |  if_ae	jmp	#LR__2944
1bbb0     01 14 46 F0 | 	shr	arg02, #1
1bbb4     00 03 02 F6 | 	mov	_var02, _var01
1bbb8     01 02 06 F5 | 	and	_var02, #1
1bbbc     1F 02 66 F0 | 	shl	_var02, #31
1bbc0     01 15 42 F5 | 	or	arg02, _var02
1bbc4     01 00 46 F0 | 	shr	_var01, #1
1bbc8     97 1E 48 FB | 	callpa	#(@LR__2942-@LR__2941)>>2,fcache_load_ptr_
1bbcc                 | LR__2941
1bbcc     00 16 56 F2 | 	cmps	arg03, #0 wc
1bbd0     34 00 90 3D |  if_ae	jmp	#LR__2943
1bbd4     00 00 0E F2 | 	cmp	_var01, #0 wz
1bbd8     2C 00 90 AD |  if_e	jmp	#LR__2943
1bbdc     0A 13 02 F6 | 	mov	arg01, arg02
1bbe0     01 12 06 F5 | 	and	arg01, #1
1bbe4     01 16 06 F1 | 	add	arg03, #1
1bbe8     01 14 46 F0 | 	shr	arg02, #1
1bbec     00 03 02 F6 | 	mov	_var02, _var01
1bbf0     01 02 06 F5 | 	and	_var02, #1
1bbf4     1F 02 66 F0 | 	shl	_var02, #31
1bbf8     01 15 42 F5 | 	or	arg02, _var02
1bbfc     09 15 42 F5 | 	or	arg02, arg01
1bc00     01 00 46 F0 | 	shr	_var01, #1
1bc04     C4 FF 9F FD | 	jmp	#LR__2941
1bc08                 | LR__2942
1bc08                 | LR__2943
1bc08     00 16 56 F2 | 	cmps	arg03, #0 wc
1bc0c     18 00 90 3D |  if_ae	jmp	#LR__2945
1bc10     00 14 0E F2 | 	cmp	arg02, #0 wz
1bc14     6F 14 62 FD | 	wrnz	arg02
1bc18     0C 00 90 FD | 	jmp	#LR__2945
1bc1c                 | LR__2944
1bc1c     17 01 06 F4 | 	bitl	_var01, #279
1bc20     17 16 66 F0 | 	shl	arg03, #23
1bc24     0B 01 42 F5 | 	or	_var01, arg03
1bc28                 | LR__2945
1bc28                 | LR__2946
1bc28                 | LR__2947
1bc28                 | LR__2948
1bc28                 | LR__2949
1bc28     01 00 CE F7 | 	test	_var01, #1 wz
1bc2c     01 14 46 55 |  if_ne	or	arg02, #1
1bc30     0A 17 02 F6 | 	mov	arg03, arg02
1bc34     00 02 06 F6 | 	mov	_var02, #0
1bc38     FF FF 3F FF 
1bc3c     FF 15 06 F1 | 	add	arg02, ##2147483647
1bc40     0B 15 12 F2 | 	cmp	arg02, arg03 wc
1bc44     01 02 06 C6 |  if_b	mov	_var02, #1
1bc48     01 01 02 F1 | 	add	_var01, _var02
1bc4c     01 18 CE F7 | 	test	arg04, #1 wz
1bc50     1F 00 26 54 |  if_ne	bith	_var01, #31
1bc54     00 FB 01 F6 | 	mov	result1, _var01
1bc58                 | __system__pack_0438_ret
1bc58     2D 00 64 FD | 	ret
1bc5c                 | 
1bc5c                 | __system___rxtxioctl_0527
1bc5c     00 15 0E F2 | 	cmp	arg02, #256 wz
1bc60     0C 00 90 AD |  if_e	jmp	#LR__2950
1bc64     01 15 0E F2 | 	cmp	arg02, #257 wz
1bc68     1C 00 90 AD |  if_e	jmp	#LR__2951
1bc6c     30 00 90 FD | 	jmp	#LR__2952
1bc70                 | LR__2950
1bc70     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1bc74     F4 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1bc78     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1bc7c     0B FB 61 FC | 	wrlong	result1, arg03
1bc80     00 FA 05 F6 | 	mov	result1, #0
1bc84     28 00 90 FD | 	jmp	#LR__2953
1bc88                 | LR__2951
1bc88     0B 13 02 FB | 	rdlong	arg01, arg03
1bc8c     08 E8 05 F1 | 	add	ptr___system__dat__, #8
1bc90     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1bc94     08 E8 85 F1 | 	sub	ptr___system__dat__, #8
1bc98     00 FA 05 F6 | 	mov	result1, #0
1bc9c     10 00 90 FD | 	jmp	#LR__2953
1bca0                 | LR__2952
1bca0     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1bca4     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
1bca8     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1bcac     01 FA 65 F6 | 	neg	result1, #1
1bcb0                 | LR__2953
1bcb0                 | __system___rxtxioctl_0527_ret
1bcb0     2D 00 64 FD | 	ret
1bcb4                 | 
1bcb4                 | __system____dummy_flush_0528
1bcb4     00 FA 05 F6 | 	mov	result1, #0
1bcb8                 | __system____dummy_flush_0528_ret
1bcb8     2D 00 64 FD | 	ret
1bcbc                 | 
1bcbc                 | __system___vfsread
1bcbc     03 4A 05 F6 | 	mov	COUNT_, #3
1bcc0     A8 00 A0 FD | 	call	#pushregs_
1bcc4     28 F0 07 F1 | 	add	ptra, #40
1bcc8     04 4E 05 F1 | 	add	fp, #4
1bccc     A7 12 62 FC | 	wrlong	arg01, fp
1bcd0     04 4E 05 F1 | 	add	fp, #4
1bcd4     A7 14 62 FC | 	wrlong	arg02, fp
1bcd8     04 4E 05 F1 | 	add	fp, #4
1bcdc     A7 16 62 FC | 	wrlong	arg03, fp
1bce0     04 4E 85 F1 | 	sub	fp, #4
1bce4     A7 FA 01 FB | 	rdlong	result1, fp
1bce8     14 4E 05 F1 | 	add	fp, #20
1bcec     A7 FA 61 FC | 	wrlong	result1, fp
1bcf0     04 4E 05 F1 | 	add	fp, #4
1bcf4     A7 00 68 FC | 	wrlong	#0, fp
1bcf8     1C 4E 85 F1 | 	sub	fp, #28
1bcfc     A7 12 02 FB | 	rdlong	arg01, fp
1bd00     04 4E 85 F1 | 	sub	fp, #4
1bd04     08 12 06 F1 | 	add	arg01, #8
1bd08     09 FB 01 FB | 	rdlong	result1, arg01
1bd0c     01 FA CD F7 | 	test	result1, #1 wz
1bd10     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1bd14     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1bd18     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1bd1c     01 FA 65 A6 |  if_e	neg	result1, #1
1bd20     74 02 90 AD |  if_e	jmp	#LR__2966
1bd24     04 4E 05 F1 | 	add	fp, #4
1bd28     A7 12 02 FB | 	rdlong	arg01, fp
1bd2c     04 4E 85 F1 | 	sub	fp, #4
1bd30     14 12 06 F1 | 	add	arg01, #20
1bd34     09 FB 09 FB | 	rdlong	result1, arg01 wz
1bd38     B8 00 90 AD |  if_e	jmp	#LR__2961
1bd3c     04 4E 05 F1 | 	add	fp, #4
1bd40     A7 12 02 FB | 	rdlong	arg01, fp
1bd44     09 17 02 F6 | 	mov	arg03, arg01
1bd48     14 16 06 F1 | 	add	arg03, #20
1bd4c     0B 1F 02 FB | 	rdlong	local01, arg03
1bd50     0F 21 02 F6 | 	mov	local02, local01
1bd54     13 1E 46 F7 | 	zerox	local01, #19
1bd58     14 20 46 F0 | 	shr	local02, #20
1bd5c     02 20 66 F0 | 	shl	local02, #2
1bd60     ED 20 02 F1 | 	add	local02, __methods__
1bd64     10 21 02 FB | 	rdlong	local02, local02
1bd68     04 4E 05 F1 | 	add	fp, #4
1bd6c     A7 14 02 FB | 	rdlong	arg02, fp
1bd70     04 4E 05 F1 | 	add	fp, #4
1bd74     A7 16 02 FB | 	rdlong	arg03, fp
1bd78     0C 4E 85 F1 | 	sub	fp, #12
1bd7c     F2 22 02 F6 | 	mov	local03, objptr
1bd80     0F E5 01 F6 | 	mov	objptr, local01
1bd84     2D 20 62 FD | 	call	local02
1bd88     11 E5 01 F6 | 	mov	objptr, local03
1bd8c     10 4E 05 F1 | 	add	fp, #16
1bd90     A7 FA 61 FC | 	wrlong	result1, fp
1bd94     10 4E 85 F1 | 	sub	fp, #16
1bd98     00 FA 55 F2 | 	cmps	result1, #0 wc
1bd9c     44 00 90 3D |  if_ae	jmp	#LR__2960
1bda0     04 4E 05 F1 | 	add	fp, #4
1bda4     A7 22 02 FB | 	rdlong	local03, fp
1bda8     11 1F 02 F6 | 	mov	local01, local03
1bdac     08 22 06 F1 | 	add	local03, #8
1bdb0     11 21 02 FB | 	rdlong	local02, local03
1bdb4     20 20 46 F5 | 	or	local02, #32
1bdb8     08 1E 06 F1 | 	add	local01, #8
1bdbc     0F 21 62 FC | 	wrlong	local02, local01
1bdc0     0C 4E 05 F1 | 	add	fp, #12
1bdc4     A7 12 0A FB | 	rdlong	arg01, fp wz
1bdc8     10 4E 85 F1 | 	sub	fp, #16
1bdcc     20 E8 05 F1 | 	add	ptr___system__dat__, #32
1bdd0     F4 12 62 FC | 	wrlong	arg01, ptr___system__dat__
1bdd4     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
1bdd8     01 FA 65 56 |  if_ne	neg	result1, #1
1bddc     00 FA 05 A6 |  if_e	mov	result1, #0
1bde0     B4 01 90 FD | 	jmp	#LR__2966
1bde4                 | LR__2960
1bde4     10 4E 05 F1 | 	add	fp, #16
1bde8     A7 FA 01 FB | 	rdlong	result1, fp
1bdec     10 4E 85 F1 | 	sub	fp, #16
1bdf0     A4 01 90 FD | 	jmp	#LR__2966
1bdf4                 | LR__2961
1bdf4     04 4E 05 F1 | 	add	fp, #4
1bdf8     A7 12 02 FB | 	rdlong	arg01, fp
1bdfc     20 12 06 F1 | 	add	arg01, #32
1be00     09 13 0A FB | 	rdlong	arg01, arg01 wz
1be04     14 4E 05 F1 | 	add	fp, #20
1be08     A7 12 62 FC | 	wrlong	arg01, fp
1be0c     18 4E 85 F1 | 	sub	fp, #24
1be10     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
1be14     F4 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
1be18     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
1be1c     01 FA 65 A6 |  if_e	neg	result1, #1
1be20     74 01 90 AD |  if_e	jmp	#LR__2966
1be24     04 4E 05 F1 | 	add	fp, #4
1be28     A7 22 02 FB | 	rdlong	local03, fp
1be2c     04 4E 85 F1 | 	sub	fp, #4
1be30     28 22 06 F1 | 	add	local03, #40
1be34     11 21 0A FB | 	rdlong	local02, local03 wz
1be38     7C 00 90 AD |  if_e	jmp	#LR__2963
1be3c     04 4E 05 F1 | 	add	fp, #4
1be40     A7 12 02 FB | 	rdlong	arg01, fp
1be44     09 23 02 F6 | 	mov	local03, arg01
1be48     28 22 06 F1 | 	add	local03, #40
1be4c     11 1F 02 FB | 	rdlong	local01, local03
1be50     0F 21 02 F6 | 	mov	local02, local01
1be54     13 1E 46 F7 | 	zerox	local01, #19
1be58     14 20 46 F0 | 	shr	local02, #20
1be5c     02 20 66 F0 | 	shl	local02, #2
1be60     ED 20 02 F1 | 	add	local02, __methods__
1be64     10 21 02 FB | 	rdlong	local02, local02
1be68     20 4E 05 F1 | 	add	fp, #32
1be6c     A7 16 02 F6 | 	mov	arg03, fp
1be70     24 4E 85 F1 | 	sub	fp, #36
1be74     00 15 06 F6 | 	mov	arg02, #256
1be78     F2 22 02 F6 | 	mov	local03, objptr
1be7c     0F E5 01 F6 | 	mov	objptr, local01
1be80     2D 20 62 FD | 	call	local02
1be84     11 E5 01 F6 | 	mov	objptr, local03
1be88     10 4E 05 F1 | 	add	fp, #16
1be8c     A7 FA 61 FC | 	wrlong	result1, fp
1be90     00 FA 4D F2 | 	cmps	result1, #0 wz
1be94     10 4E 85 F1 | 	sub	fp, #16
1be98     1C 00 90 5D |  if_ne	jmp	#LR__2962
1be9c     24 4E 05 F1 | 	add	fp, #36
1bea0     A7 20 02 FB | 	rdlong	local02, fp
1bea4     24 4E 85 F1 | 	sub	fp, #36
1bea8     02 20 CE F7 | 	test	local02, #2 wz
1beac     20 4E 05 51 |  if_ne	add	fp, #32
1beb0     A7 02 68 5C |  if_ne	wrlong	#1, fp
1beb4     20 4E 85 51 |  if_ne	sub	fp, #32
1beb8                 | LR__2962
1beb8                 | LR__2963
1beb8     10 4E 05 F1 | 	add	fp, #16
1bebc     A7 00 68 FC | 	wrlong	#0, fp
1bec0     10 4E 85 F1 | 	sub	fp, #16
1bec4                 | LR__2964
1bec4     0C 4E 05 F1 | 	add	fp, #12
1bec8     A7 22 02 FB | 	rdlong	local03, fp
1becc     0C 4E 85 F1 | 	sub	fp, #12
1bed0     01 22 16 F2 | 	cmp	local03, #1 wc
1bed4     B4 00 90 CD |  if_b	jmp	#LR__2965
1bed8     18 4E 05 F1 | 	add	fp, #24
1bedc     A7 20 02 FB | 	rdlong	local02, fp
1bee0     10 23 02 F6 | 	mov	local03, local02
1bee4     13 22 46 F7 | 	zerox	local03, #19
1bee8     14 20 46 F0 | 	shr	local02, #20
1beec     02 20 66 F0 | 	shl	local02, #2
1bef0     ED 20 02 F1 | 	add	local02, __methods__
1bef4     10 21 02 FB | 	rdlong	local02, local02
1bef8     14 4E 85 F1 | 	sub	fp, #20
1befc     A7 12 02 FB | 	rdlong	arg01, fp
1bf00     04 4E 85 F1 | 	sub	fp, #4
1bf04     F2 1E 02 F6 | 	mov	local01, objptr
1bf08     11 E5 01 F6 | 	mov	objptr, local03
1bf0c     2D 20 62 FD | 	call	local02
1bf10     0F E5 01 F6 | 	mov	objptr, local01
1bf14     14 4E 05 F1 | 	add	fp, #20
1bf18     A7 FA 61 FC | 	wrlong	result1, fp
1bf1c     14 4E 85 F1 | 	sub	fp, #20
1bf20     00 FA 55 F2 | 	cmps	result1, #0 wc
1bf24     64 00 90 CD |  if_b	jmp	#LR__2965
1bf28     1C 4E 05 F1 | 	add	fp, #28
1bf2c     A7 22 02 FB | 	rdlong	local03, fp
1bf30     11 21 02 F6 | 	mov	local02, local03
1bf34     01 20 06 F1 | 	add	local02, #1
1bf38     A7 20 62 FC | 	wrlong	local02, fp
1bf3c     08 4E 85 F1 | 	sub	fp, #8
1bf40     A7 20 02 FB | 	rdlong	local02, fp
1bf44     11 21 42 FC | 	wrbyte	local02, local03
1bf48     04 4E 85 F1 | 	sub	fp, #4
1bf4c     A7 22 02 FB | 	rdlong	local03, fp
1bf50     01 22 06 F1 | 	add	local03, #1
1bf54     A7 22 62 FC | 	wrlong	local03, fp
1bf58     04 4E 85 F1 | 	sub	fp, #4
1bf5c     A7 22 02 FB | 	rdlong	local03, fp
1bf60     01 22 86 F1 | 	sub	local03, #1
1bf64     A7 22 62 FC | 	wrlong	local03, fp
1bf68     14 4E 05 F1 | 	add	fp, #20
1bf6c     A7 22 0A FB | 	rdlong	local03, fp wz
1bf70     20 4E 85 F1 | 	sub	fp, #32
1bf74     4C FF 9F AD |  if_e	jmp	#LR__2964
1bf78     14 4E 05 F1 | 	add	fp, #20
1bf7c     A7 20 02 FB | 	rdlong	local02, fp
1bf80     14 4E 85 F1 | 	sub	fp, #20
1bf84     0A 20 0E F2 | 	cmp	local02, #10 wz
1bf88     38 FF 9F 5D |  if_ne	jmp	#LR__2964
1bf8c                 | LR__2965
1bf8c     10 4E 05 F1 | 	add	fp, #16
1bf90     A7 FA 01 FB | 	rdlong	result1, fp
1bf94     10 4E 85 F1 | 	sub	fp, #16
1bf98                 | LR__2966
1bf98     A7 F0 03 F6 | 	mov	ptra, fp
1bf9c     B2 00 A0 FD | 	call	#popregs_
1bfa0                 | __system___vfsread_ret
1bfa0     2D 00 64 FD | 	ret
1bfa4                 | 
1bfa4                 | __system____default_filbuf
1bfa4     04 4A 05 F6 | 	mov	COUNT_, #4
1bfa8     A8 00 A0 FD | 	call	#pushregs_
1bfac     09 1F 02 F6 | 	mov	local01, arg01
1bfb0     0F 21 02 FB | 	rdlong	local02, local01
1bfb4     0C 20 06 F1 | 	add	local02, #12
1bfb8     10 FB 09 FB | 	rdlong	result1, local02 wz
1bfbc     0C 20 86 F1 | 	sub	local02, #12
1bfc0     20 00 90 5D |  if_ne	jmp	#LR__2970
1bfc4     14 20 06 F1 | 	add	local02, #20
1bfc8     10 FB 01 F6 | 	mov	result1, local02
1bfcc     04 20 86 F1 | 	sub	local02, #4
1bfd0     10 FB 61 FC | 	wrlong	result1, local02
1bfd4     04 20 86 F1 | 	sub	local02, #4
1bfd8     02 00 80 FF 
1bfdc     10 01 68 FC | 	wrlong	##1024, local02
1bfe0     0C 20 86 F1 | 	sub	local02, #12
1bfe4                 | LR__2970
1bfe4     14 1E 06 F1 | 	add	local01, #20
1bfe8     0F 23 02 FB | 	rdlong	local03, local01
1bfec     11 25 02 F6 | 	mov	local04, local03
1bff0     14 1E 86 F1 | 	sub	local01, #20
1bff4     13 24 46 F7 | 	zerox	local04, #19
1bff8     14 22 46 F0 | 	shr	local03, #20
1bffc     02 22 66 F0 | 	shl	local03, #2
1c000     ED 22 02 F1 | 	add	local03, __methods__
1c004     11 23 02 FB | 	rdlong	local03, local03
1c008     10 20 06 F1 | 	add	local02, #16
1c00c     10 15 02 FB | 	rdlong	arg02, local02
1c010     04 20 86 F1 | 	sub	local02, #4
1c014     10 17 02 FB | 	rdlong	arg03, local02
1c018     0C 20 86 F1 | 	sub	local02, #12
1c01c     0F 13 02 F6 | 	mov	arg01, local01
1c020     F2 1E 02 F6 | 	mov	local01, objptr
1c024     12 E5 01 F6 | 	mov	objptr, local04
1c028     2D 22 62 FD | 	call	local03
1c02c     0F E5 01 F6 | 	mov	objptr, local01
1c030     FD 24 02 F6 | 	mov	local04, result1
1c034     00 24 56 F2 | 	cmps	local04, #0 wc
1c038     01 FA 65 C6 |  if_b	neg	result1, #1
1c03c     28 00 90 CD |  if_b	jmp	#LR__2971
1c040     10 25 62 FC | 	wrlong	local04, local02
1c044     10 20 06 F1 | 	add	local02, #16
1c048     10 23 02 FB | 	rdlong	local03, local02
1c04c     0C 20 86 F1 | 	sub	local02, #12
1c050     10 23 62 FC | 	wrlong	local03, local02
1c054     04 20 06 F1 | 	add	local02, #4
1c058     10 23 02 FB | 	rdlong	local03, local02
1c05c     01 22 46 F5 | 	or	local03, #1
1c060     10 23 62 FC | 	wrlong	local03, local02
1c064     12 FB 01 F6 | 	mov	result1, local04
1c068                 | LR__2971
1c068     A7 F0 03 F6 | 	mov	ptra, fp
1c06c     B2 00 A0 FD | 	call	#popregs_
1c070                 | __system____default_filbuf_ret
1c070     2D 00 64 FD | 	ret
1c074                 | 
1c074                 | __system__getlower_0913
1c074     41 12 56 F2 | 	cmps	arg01, #65 wc
1c078     10 00 90 CD |  if_b	jmp	#LR__2980
1c07c     5B 12 56 F2 | 	cmps	arg01, #91 wc
1c080     09 FB 01 C6 |  if_b	mov	result1, arg01
1c084     20 FA 05 C1 |  if_b	add	result1, #32
1c088     04 00 90 CD |  if_b	jmp	#__system__getlower_0913_ret
1c08c                 | LR__2980
1c08c     09 FB 01 F6 | 	mov	result1, arg01
1c090                 | __system__getlower_0913_ret
1c090     2D 00 64 FD | 	ret
1c094                 | 
1c094                 | __system___pat_match
1c094     08 4A 05 F6 | 	mov	COUNT_, #8
1c098     A8 00 A0 FD | 	call	#pushregs_
1c09c     09 1F 02 F6 | 	mov	local01, arg01
1c0a0                 | LR__2990
1c0a0     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
1c0a4     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
1c0a8     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
1c0ac     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
1c0b0     2C 00 90 AD |  if_e	jmp	#LR__2991
1c0b4     0A 13 C2 FA | 	rdbyte	arg01, arg02
1c0b8     B8 FF BF FD | 	call	#__system__getlower_0913
1c0bc     FD 22 02 F6 | 	mov	local03, result1
1c0c0     0F 13 C2 FA | 	rdbyte	arg01, local01
1c0c4     AC FF BF FD | 	call	#__system__getlower_0913
1c0c8     11 FB 09 F2 | 	cmp	result1, local03 wz
1c0cc     00 FA 05 56 |  if_ne	mov	result1, #0
1c0d0     FC 00 90 5D |  if_ne	jmp	#LR__2999
1c0d4     01 1E 06 F1 | 	add	local01, #1
1c0d8     01 14 06 F1 | 	add	arg02, #1
1c0dc     C0 FF 9F FD | 	jmp	#LR__2990
1c0e0                 | LR__2991
1c0e0     0A 23 C2 FA | 	rdbyte	local03, arg02
1c0e4     2A 22 0E F2 | 	cmp	local03, #42 wz
1c0e8     D4 00 90 5D |  if_ne	jmp	#LR__2998
1c0ec     01 14 06 F1 | 	add	arg02, #1
1c0f0     0A 21 C2 FA | 	rdbyte	local02, arg02
1c0f4     01 14 86 F1 | 	sub	arg02, #1
1c0f8     2E 20 0E F2 | 	cmp	local02, #46 wz
1c0fc     28 00 90 5D |  if_ne	jmp	#LR__2992
1c100     02 14 06 F1 | 	add	arg02, #2
1c104     0A 21 C2 FA | 	rdbyte	local02, arg02
1c108     02 14 86 F1 | 	sub	arg02, #2
1c10c     2A 20 0E F2 | 	cmp	local02, #42 wz
1c110     03 14 06 A1 |  if_e	add	arg02, #3
1c114     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
1c118     03 14 86 A1 |  if_e	sub	arg02, #3
1c11c     12 27 0A A6 |  if_e	mov	local05, local04 wz
1c120     01 FA 05 A6 |  if_e	mov	result1, #1
1c124     A8 00 90 AD |  if_e	jmp	#LR__2999
1c128                 | LR__2992
1c128     01 14 06 F1 | 	add	arg02, #1
1c12c     00 28 06 F6 | 	mov	local06, #0
1c130     97 1E 48 FB | 	callpa	#(@LR__2995-@LR__2993)>>2,fcache_load_ptr_
1c134                 | LR__2993
1c134     14 2B 02 F6 | 	mov	local07, local06
1c138     0A 2B 02 F1 | 	add	local07, arg02
1c13c     15 2B CA FA | 	rdbyte	local07, local07 wz
1c140     14 27 02 56 |  if_ne	mov	local05, local06
1c144     01 26 06 51 |  if_ne	add	local05, #1
1c148     13 29 02 56 |  if_ne	mov	local06, local05
1c14c     E4 FF 9F 5D |  if_ne	jmp	#LR__2993
1c150     00 2C 06 F6 | 	mov	local08, #0
1c154                 | LR__2994
1c154     16 2B 02 F6 | 	mov	local07, local08
1c158     0F 2B 02 F1 | 	add	local07, local01
1c15c     15 2B CA FA | 	rdbyte	local07, local07 wz
1c160     16 27 02 56 |  if_ne	mov	local05, local08
1c164     01 26 06 51 |  if_ne	add	local05, #1
1c168     13 2D 02 56 |  if_ne	mov	local08, local05
1c16c     E4 FF 9F 5D |  if_ne	jmp	#LR__2994
1c170                 | LR__2995
1c170     14 2D 52 F2 | 	cmps	local08, local06 wc
1c174     00 FA 05 C6 |  if_b	mov	result1, #0
1c178     54 00 90 CD |  if_b	jmp	#LR__2999
1c17c     16 21 02 F6 | 	mov	local02, local08
1c180     14 21 82 F1 | 	sub	local02, local06
1c184     10 1F 02 F1 | 	add	local01, local02
1c188                 | LR__2996
1c188     01 28 56 F2 | 	cmps	local06, #1 wc
1c18c     30 00 90 CD |  if_b	jmp	#LR__2997
1c190     0F 13 C2 FA | 	rdbyte	arg01, local01
1c194     DC FE BF FD | 	call	#__system__getlower_0913
1c198     FD 2C 02 F6 | 	mov	local08, result1
1c19c     0A 13 C2 FA | 	rdbyte	arg01, arg02
1c1a0     D0 FE BF FD | 	call	#__system__getlower_0913
1c1a4     FD 2C 0A F2 | 	cmp	local08, result1 wz
1c1a8     00 FA 05 56 |  if_ne	mov	result1, #0
1c1ac     20 00 90 5D |  if_ne	jmp	#LR__2999
1c1b0     01 1E 06 F1 | 	add	local01, #1
1c1b4     01 14 06 F1 | 	add	arg02, #1
1c1b8     01 28 86 F1 | 	sub	local06, #1
1c1bc     C8 FF 9F FD | 	jmp	#LR__2996
1c1c0                 | LR__2997
1c1c0                 | LR__2998
1c1c0     0A 2D CA FA | 	rdbyte	local08, arg02 wz
1c1c4     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
1c1c8     01 FA 05 A6 |  if_e	mov	result1, #1
1c1cc     00 FA 05 56 |  if_ne	mov	result1, #0
1c1d0                 | LR__2999
1c1d0     A7 F0 03 F6 | 	mov	ptra, fp
1c1d4     B2 00 A0 FD | 	call	#popregs_
1c1d8                 | __system___pat_match_ret
1c1d8     2D 00 64 FD | 	ret
1c1dc                 | 
1c1dc                 | _fatfs_cc_ff_uni2oem
1c1dc     00 00 06 F6 | 	mov	_var01, #0
1c1e0     80 12 16 F2 | 	cmp	arg01, #128 wc
1c1e4     09 01 02 C6 |  if_b	mov	_var01, arg01
1c1e8     58 00 90 CD |  if_b	jmp	#LR__3004
1c1ec     80 00 00 FF 
1c1f0     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1c1f4     4C 00 90 3D |  if_ae	jmp	#LR__3003
1c1f8     0A FB 31 F9 | 	getword	result1, arg02, #0
1c1fc     01 00 00 FF 
1c200     52 FB 0D F2 | 	cmp	result1, ##850 wz
1c204     3C 00 90 5D |  if_ne	jmp	#LR__3003
1c208                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
1c208     00 00 06 F6 | 	mov	_var01, #0
1c20c     97 14 48 FB | 	callpa	#(@LR__3001-@LR__3000)>>2,fcache_load_ptr_
1c210                 | LR__3000
1c210     00 FB 31 F9 | 	getword	result1, _var01, #0
1c214     80 FA 15 F2 | 	cmp	result1, #128 wc
1c218     1C 00 90 3D |  if_ae	jmp	#LR__3002
1c21c     00 FB 31 F9 | 	getword	result1, _var01, #0
1c220     01 FA 65 F0 | 	shl	result1, #1
1c224     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
1c228     FD FA E1 FA | 	rdword	result1, result1
1c22c     FD 12 0A F2 | 	cmp	arg01, result1 wz
1c230     01 00 06 51 |  if_ne	add	_var01, #1
1c234     D8 FF 9F 5D |  if_ne	jmp	#LR__3000
1c238                 | LR__3001
1c238                 | LR__3002
1c238     00 01 32 F9 | 	getword	_var01, _var01, #0
1c23c     80 00 06 F1 | 	add	_var01, #128
1c240     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1c244                 | LR__3003
1c244                 | LR__3004
1c244                 | ' 			c = (c + 0x80) & 0xFF;
1c244                 | ' 		}
1c244                 | ' 	}
1c244                 | ' 
1c244                 | ' 	return c;
1c244     00 FB 01 F6 | 	mov	result1, _var01
1c248                 | _fatfs_cc_ff_uni2oem_ret
1c248     2D 00 64 FD | 	ret
1c24c                 | 
1c24c                 | _fatfs_cc_ff_oem2uni
1c24c     00 00 06 F6 | 	mov	_var01, #0
1c250     09 FB 31 F9 | 	getword	result1, arg01, #0
1c254     80 FA 15 F2 | 	cmp	result1, #128 wc
1c258     09 01 02 C6 |  if_b	mov	_var01, arg01
1c25c     2C 00 90 CD |  if_b	jmp	#LR__3011
1c260     0A 15 32 F9 | 	getword	arg02, arg02, #0
1c264     01 00 00 FF 
1c268     52 15 0E F2 | 	cmp	arg02, ##850 wz
1c26c     1C 00 90 5D |  if_ne	jmp	#LR__3010
1c270     09 FB 31 F9 | 	getword	result1, arg01, #0
1c274     00 FB 15 F2 | 	cmp	result1, #256 wc
1c278     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
1c27c     80 12 86 C1 |  if_b	sub	arg01, #128
1c280     01 12 66 C0 |  if_b	shl	arg01, #1
1c284     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
1c288     09 01 E2 CA |  if_b	rdword	_var01, arg01
1c28c                 | LR__3010
1c28c                 | LR__3011
1c28c                 | ' 		}
1c28c                 | ' 	}
1c28c                 | ' 
1c28c                 | ' 	return c;
1c28c     00 FB 01 F6 | 	mov	result1, _var01
1c290                 | _fatfs_cc_ff_oem2uni_ret
1c290     2D 00 64 FD | 	ret
1c294                 | 
1c294                 | _fatfs_cc_ff_wtoupper
1c294     09 01 02 F6 | 	mov	_var01, arg01
1c298     80 00 00 FF 
1c29c     00 00 16 F2 | 	cmp	_var01, ##65536 wc
1c2a0     60 01 90 3D |  if_ae	jmp	#LR__3033
1c2a4     00 03 02 F6 | 	mov	_var02, _var01
1c2a8     01 01 32 F9 | 	getword	_var01, _var02, #0
1c2ac     08 00 00 FF 
1c2b0     00 00 16 F2 | 	cmp	_var01, ##4096 wc
1c2b4     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
1c2b8     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
1c2bc     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
1c2c0     01 00 00 3F 
1c2c4     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
1c2c8     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
1c2cc     01 00 00 3F 
1c2d0     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
1c2d4     02 07 02 F6 | 	mov	_var04, _var03
1c2d8                 | ' 		uc = (WORD)uni;
1c2d8                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
1c2d8                 | ' 		for (;;) {
1c2d8                 | LR__3020
1c2d8     03 09 E2 FA | 	rdword	_var05, _var04
1c2dc     04 05 02 F6 | 	mov	_var03, _var05
1c2e0     0F 04 4E F7 | 	zerox	_var03, #15 wz
1c2e4     02 06 06 F1 | 	add	_var04, #2
1c2e8     14 01 90 AD |  if_e	jmp	#LR__3032
1c2ec     01 05 32 F9 | 	getword	_var03, _var02, #0
1c2f0     04 01 32 F9 | 	getword	_var01, _var05, #0
1c2f4     00 05 12 F2 | 	cmp	_var03, _var01 wc
1c2f8     04 01 90 CD |  if_b	jmp	#LR__3032
1c2fc     03 0B E2 FA | 	rdword	_var06, _var04
1c300     05 0D 32 F9 | 	getword	_var07, _var06, #0
1c304     08 0C 46 F0 | 	shr	_var07, #8
1c308     05 0B 32 F9 | 	getword	_var06, _var06, #0
1c30c     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
1c310     01 05 32 F9 | 	getword	_var03, _var02, #0
1c314     04 0F 32 F9 | 	getword	_var08, _var05, #0
1c318     05 01 32 F9 | 	getword	_var01, _var06, #0
1c31c     00 0F 02 F1 | 	add	_var08, _var01
1c320     07 05 52 F2 | 	cmps	_var03, _var08 wc
1c324     02 06 06 F1 | 	add	_var04, #2
1c328     C4 00 90 3D |  if_ae	jmp	#LR__3031
1c32c                 | ' 				switch (cmd) {
1c32c     06 11 32 F9 | 	getword	_var09, _var07, #0
1c330     09 10 26 F3 | 	fle	_var09, #9
1c334     30 10 62 FD | 	jmprel	_var09
1c338                 | LR__3021
1c338     24 00 90 FD | 	jmp	#LR__3022
1c33c     3C 00 90 FD | 	jmp	#LR__3023
1c340     54 00 90 FD | 	jmp	#LR__3024
1c344     5C 00 90 FD | 	jmp	#LR__3025
1c348     64 00 90 FD | 	jmp	#LR__3026
1c34c     6C 00 90 FD | 	jmp	#LR__3027
1c350     74 00 90 FD | 	jmp	#LR__3028
1c354     7C 00 90 FD | 	jmp	#LR__3029
1c358     84 00 90 FD | 	jmp	#LR__3030
1c35c     A0 00 90 FD | 	jmp	#LR__3032
1c360                 | LR__3022
1c360     01 03 32 F9 | 	getword	_var02, _var02, #0
1c364     04 09 32 F9 | 	getword	_var05, _var05, #0
1c368     04 03 82 F1 | 	sub	_var02, _var05
1c36c     01 02 66 F0 | 	shl	_var02, #1
1c370     03 03 02 F1 | 	add	_var02, _var04
1c374     01 03 E2 FA | 	rdword	_var02, _var02
1c378     84 00 90 FD | 	jmp	#LR__3032
1c37c                 | LR__3023
1c37c     01 05 32 F9 | 	getword	_var03, _var02, #0
1c380     01 03 32 F9 | 	getword	_var02, _var02, #0
1c384     04 09 32 F9 | 	getword	_var05, _var05, #0
1c388     04 03 82 F1 | 	sub	_var02, _var05
1c38c     01 02 06 F5 | 	and	_var02, #1
1c390     02 03 C2 F2 | 	subr	_var02, _var03
1c394     68 00 90 FD | 	jmp	#LR__3032
1c398                 | LR__3024
1c398     01 03 32 F9 | 	getword	_var02, _var02, #0
1c39c     10 02 86 F1 | 	sub	_var02, #16
1c3a0     5C 00 90 FD | 	jmp	#LR__3032
1c3a4                 | LR__3025
1c3a4     01 03 32 F9 | 	getword	_var02, _var02, #0
1c3a8     20 02 86 F1 | 	sub	_var02, #32
1c3ac     50 00 90 FD | 	jmp	#LR__3032
1c3b0                 | LR__3026
1c3b0     01 03 32 F9 | 	getword	_var02, _var02, #0
1c3b4     30 02 86 F1 | 	sub	_var02, #48
1c3b8     44 00 90 FD | 	jmp	#LR__3032
1c3bc                 | LR__3027
1c3bc     01 03 32 F9 | 	getword	_var02, _var02, #0
1c3c0     1A 02 86 F1 | 	sub	_var02, #26
1c3c4     38 00 90 FD | 	jmp	#LR__3032
1c3c8                 | LR__3028
1c3c8     01 03 32 F9 | 	getword	_var02, _var02, #0
1c3cc     08 02 06 F1 | 	add	_var02, #8
1c3d0     2C 00 90 FD | 	jmp	#LR__3032
1c3d4                 | LR__3029
1c3d4     01 03 32 F9 | 	getword	_var02, _var02, #0
1c3d8     50 02 86 F1 | 	sub	_var02, #80
1c3dc     20 00 90 FD | 	jmp	#LR__3032
1c3e0                 | LR__3030
1c3e0     01 03 32 F9 | 	getword	_var02, _var02, #0
1c3e4     0E 00 00 FF 
1c3e8     60 02 86 F1 | 	sub	_var02, ##7264
1c3ec                 | ' 				}
1c3ec                 | ' 				break;
1c3ec     10 00 90 FD | 	jmp	#LR__3032
1c3f0                 | LR__3031
1c3f0     0F 0C 4E F7 | 	zerox	_var07, #15 wz
1c3f4     02 0A 06 AA |  if_e	mul	_var06, #2
1c3f8     05 07 02 A1 |  if_e	add	_var04, _var06
1c3fc     D8 FE 9F FD | 	jmp	#LR__3020
1c400                 | LR__3032
1c400     01 01 32 F9 | 	getword	_var01, _var02, #0
1c404                 | LR__3033
1c404                 | ' 		}
1c404                 | ' 		uni = uc;
1c404                 | ' 	}
1c404                 | ' 
1c404                 | ' 	return uni;
1c404     00 FB 01 F6 | 	mov	result1, _var01
1c408                 | _fatfs_cc_ff_wtoupper_ret
1c408     2D 00 64 FD | 	ret
1c40c                 | 
1c40c                 | _fatfs_cc_strncpy
1c40c     09 01 02 F6 | 	mov	_var01, arg01
1c410     97 12 48 FB | 	callpa	#(@LR__3041-@LR__3040)>>2,fcache_load_ptr_
1c414                 | ' 
1c414                 | ' 	dscan = dst;
1c414                 | ' 	sscan = src;
1c414                 | ' 	count = n;
1c414                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
1c414                 | LR__3040
1c414     01 16 86 F1 | 	sub	arg03, #1
1c418     00 16 56 F2 | 	cmps	arg03, #0 wc
1c41c     18 00 90 CD |  if_b	jmp	#LR__3042
1c420     0A FB C1 FA | 	rdbyte	result1, arg02
1c424     00 FB 41 FC | 	wrbyte	result1, _var01
1c428     01 14 06 F1 | 	add	arg02, #1
1c42c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
1c430                 | ' 		continue;
1c430     01 00 06 F1 | 	add	_var01, #1
1c434     DC FF 9F 5D |  if_ne	jmp	#LR__3040
1c438                 | LR__3041
1c438                 | LR__3042
1c438     97 0C 48 FB | 	callpa	#(@LR__3044-@LR__3043)>>2,fcache_load_ptr_
1c43c                 | ' 	while (--count >= 0)
1c43c                 | LR__3043
1c43c     01 16 86 F1 | 	sub	arg03, #1
1c440     00 16 56 F2 | 	cmps	arg03, #0 wc
1c444     00 03 02 36 |  if_ae	mov	_var02, _var01
1c448     01 00 06 31 |  if_ae	add	_var01, #1
1c44c     01 01 48 3C |  if_ae	wrbyte	#0, _var02
1c450     E8 FF 9F 3D |  if_ae	jmp	#LR__3043
1c454                 | LR__3044
1c454                 | ' 		*dscan++ = '\0';
1c454                 | ' 	return(dst);
1c454     09 FB 01 F6 | 	mov	result1, arg01
1c458                 | _fatfs_cc_strncpy_ret
1c458     2D 00 64 FD | 	ret
1c45c                 | 
1c45c                 | _fatfs_cc_memcmp
1c45c                 | ' 	for (n = size; n > 0; n--)
1c45c     00 16 0E F2 | 	cmp	arg03, #0 wz
1c460     28 00 90 AD |  if_e	jmp	#LR__3051
1c464                 | LR__3050
1c464     09 01 C2 FA | 	rdbyte	_var01, arg01
1c468     0A 03 C2 FA | 	rdbyte	_var02, arg02
1c46c     01 01 0A F2 | 	cmp	_var01, _var02 wz
1c470     01 12 06 A1 |  if_e	add	arg01, #1
1c474     01 14 06 A1 |  if_e	add	arg02, #1
1c478                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
1c478     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
1c47c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
1c480     01 FB 81 51 |  if_ne	sub	result1, _var02
1c484     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
1c488     F6 17 6E FB | 	djnz	arg03, #LR__3050
1c48c                 | LR__3051
1c48c                 | ' 
1c48c                 | ' 	return(0);
1c48c     00 FA 05 F6 | 	mov	result1, #0
1c490                 | _fatfs_cc_memcmp_ret
1c490     2D 00 64 FD | 	ret
1c494                 | 
1c494                 | _fatfs_cc_strncmp
1c494     09 01 0A F6 | 	mov	_var01, arg01 wz
1c498     14 00 90 5D |  if_ne	jmp	#LR__3060
1c49c                 | ' 		return scan2 ? -1 : 0;
1c49c     00 14 0E F2 | 	cmp	arg02, #0 wz
1c4a0     01 02 66 56 |  if_ne	neg	_var02, #1
1c4a4     00 02 06 A6 |  if_e	mov	_var02, #0
1c4a8     01 FB 01 F6 | 	mov	result1, _var02
1c4ac     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
1c4b0                 | LR__3060
1c4b0     00 14 0E F2 | 	cmp	arg02, #0 wz
1c4b4     01 FA 05 A6 |  if_e	mov	result1, #1
1c4b8     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1c4bc     0B 05 02 F6 | 	mov	_var03, arg03
1c4c0     97 16 48 FB | 	callpa	#(@LR__3062-@LR__3061)>>2,fcache_load_ptr_
1c4c4                 | ' 	count = n;
1c4c4                 | ' 	do {
1c4c4                 | LR__3061
1c4c4     00 07 C2 FA | 	rdbyte	_var04, _var01
1c4c8     0A 09 02 F6 | 	mov	_var05, arg02
1c4cc     04 0B C2 FA | 	rdbyte	_var06, _var05
1c4d0     01 04 86 F1 | 	sub	_var03, #1
1c4d4     00 04 56 F2 | 	cmps	_var03, #0 wc
1c4d8     01 00 06 F1 | 	add	_var01, #1
1c4dc     01 14 06 F1 | 	add	arg02, #1
1c4e0     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
1c4e4     08 00 90 2D |  if_nc_and_z	jmp	#LR__3063
1c4e8     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
1c4ec     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3061
1c4f0                 | LR__3062
1c4f0                 | LR__3063
1c4f0     00 04 56 F2 | 	cmps	_var03, #0 wc
1c4f4                 | ' 		return(0);
1c4f4     00 FA 05 C6 |  if_b	mov	result1, #0
1c4f8     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
1c4fc     05 07 0A F2 | 	cmp	_var04, _var06 wz
1c500                 | ' 		return(0);
1c500     00 FA 05 A6 |  if_e	mov	result1, #0
1c504     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1c508     00 06 0E F2 | 	cmp	_var04, #0 wz
1c50c                 | ' 		return(-1);
1c50c     01 FA 65 A6 |  if_e	neg	result1, #1
1c510     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
1c514     00 0A 0E F2 | 	cmp	_var06, #0 wz
1c518                 | ' 		return(1);
1c518     01 FA 05 A6 |  if_e	mov	result1, #1
1c51c                 | ' 		return(c1 - c2);
1c51c     03 FB 01 56 |  if_ne	mov	result1, _var04
1c520     05 FB 81 51 |  if_ne	sub	result1, _var06
1c524                 | _fatfs_cc_strncmp_ret
1c524     2D 00 64 FD | 	ret
1c528                 | 
1c528                 | _fatfs_cc_strchr
1c528                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/libc/string/strchr.c"
1c528                 | ' 	while ((c = *s++) != (char) charwanted)
1c528                 | LR__3070
1c528     09 01 02 F6 | 	mov	_var01, arg01
1c52c     00 03 C2 FA | 	rdbyte	_var02, _var01
1c530     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
1c534     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
1c538     03 05 0A F2 | 	cmp	_var03, _var04 wz
1c53c     01 12 06 F1 | 	add	arg01, #1
1c540     14 00 90 AD |  if_e	jmp	#LR__3071
1c544     01 05 02 F6 | 	mov	_var03, _var02
1c548     07 04 4E F7 | 	zerox	_var03, #7 wz
1c54c     00 FA 05 A6 |  if_e	mov	result1, #0
1c550     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
1c554     D0 FF 9F FD | 	jmp	#LR__3070
1c558                 | LR__3071
1c558                 | ' 	return((char *)--s);
1c558     01 12 86 F1 | 	sub	arg01, #1
1c55c     09 FB 01 F6 | 	mov	result1, arg01
1c560                 | _fatfs_cc_strchr_ret
1c560     2D 00 64 FD | 	ret
1c564                 | 
1c564                 | _fatfs_cc_disk_initialize
1c564     04 4A 05 F6 | 	mov	COUNT_, #4
1c568     A8 00 A0 FD | 	call	#pushregs_
1c56c     40 F0 07 F1 | 	add	ptra, #64
1c570     04 4E 05 F1 | 	add	fp, #4
1c574     A7 12 42 FC | 	wrbyte	arg01, fp
1c578     01 00 00 FF 
1c57c     14 E4 05 F1 | 	add	objptr, ##532
1c580     F2 18 02 FB | 	rdlong	arg04, objptr
1c584     2C 4E 05 F1 | 	add	fp, #44
1c588     A7 18 62 FC | 	wrlong	arg04, fp
1c58c     04 E4 85 F1 | 	sub	objptr, #4
1c590     F2 18 02 FB | 	rdlong	arg04, objptr
1c594     04 4E 05 F1 | 	add	fp, #4
1c598     A7 18 62 FC | 	wrlong	arg04, fp
1c59c     08 E4 05 F1 | 	add	objptr, #8
1c5a0     F2 18 02 FB | 	rdlong	arg04, objptr
1c5a4     04 4E 05 F1 | 	add	fp, #4
1c5a8     A7 18 62 FC | 	wrlong	arg04, fp
1c5ac     04 E4 05 F1 | 	add	objptr, #4
1c5b0     F2 18 02 FB | 	rdlong	arg04, objptr
1c5b4     04 4E 05 F1 | 	add	fp, #4
1c5b8     A7 18 62 FC | 	wrlong	arg04, fp
1c5bc     04 E4 05 F1 | 	add	objptr, #4
1c5c0     F2 02 48 FC | 	wrbyte	#1, objptr
1c5c4     01 00 00 FF 
1c5c8     20 E4 85 F1 | 	sub	objptr, ##544
1c5cc     38 4E 85 F1 | 	sub	fp, #56
1c5d0     A7 18 CA FA | 	rdbyte	arg04, fp wz
1c5d4     04 4E 85 F1 | 	sub	fp, #4
1c5d8                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1c5d8                 | '             return RES_NOTRDY;
1c5d8     03 FA 05 56 |  if_ne	mov	result1, #3
1c5dc     D8 05 90 5D |  if_ne	jmp	#LR__3098
1c5e0     13 00 00 FF 
1c5e4     10 13 06 F6 | 	mov	arg01, ##10000
1c5e8     6C A0 BF FD | 	call	#__system___waitus
1c5ec     30 4E 05 F1 | 	add	fp, #48
1c5f0     A7 12 02 FB | 	rdlong	arg01, fp
1c5f4     09 01 08 FC | 	wrpin	#0, arg01
1c5f8     04 4E 05 F1 | 	add	fp, #4
1c5fc     A7 12 02 FB | 	rdlong	arg01, fp
1c600     09 01 08 FC | 	wrpin	#0, arg01
1c604     04 4E 05 F1 | 	add	fp, #4
1c608     A7 12 02 FB | 	rdlong	arg01, fp
1c60c     09 01 08 FC | 	wrpin	#0, arg01
1c610     04 4E 05 F1 | 	add	fp, #4
1c614     A7 12 02 FB | 	rdlong	arg01, fp
1c618     09 00 80 FF 
1c61c     09 01 08 FC | 	wrpin	##4608, arg01
1c620     0C 4E 85 F1 | 	sub	fp, #12
1c624     A7 12 02 FB | 	rdlong	arg01, fp
1c628     59 12 62 FD | 	drvh	arg01
1c62c     04 4E 05 F1 | 	add	fp, #4
1c630     A7 12 02 FB | 	rdlong	arg01, fp
1c634     59 12 62 FD | 	drvh	arg01
1c638     04 4E 05 F1 | 	add	fp, #4
1c63c     A7 12 02 FB | 	rdlong	arg01, fp
1c640     59 12 62 FD | 	drvh	arg01
1c644     04 4E 05 F1 | 	add	fp, #4
1c648     A7 12 02 FB | 	rdlong	arg01, fp
1c64c     59 12 62 FD | 	drvh	arg01
1c650     20 4E 85 F1 | 	sub	fp, #32
1c654     00 04 80 FF 
1c658     A7 20 68 FC | 	wrlong	##524304, fp
1c65c     04 4E 05 F1 | 	add	fp, #4
1c660     20 03 80 FF 
1c664     A7 90 68 FC | 	wrlong	##409672, fp
1c668     14 4E 05 F1 | 	add	fp, #20
1c66c     A7 1E 02 FB | 	rdlong	local01, fp
1c670     18 4E 85 F1 | 	sub	fp, #24
1c674     A7 16 02 FB | 	rdlong	arg03, fp
1c678     40 1E 62 FD | 	dirl	local01
1c67c     A0 03 80 FF 
1c680     0F 91 08 FC | 	wrpin	##475208, local01
1c684     0F 17 12 FC | 	wxpin	arg03, local01
1c688     0F 01 28 FC | 	wypin	#0, local01
1c68c     41 1E 62 FD | 	dirh	local01
1c690     1C 4E 05 F1 | 	add	fp, #28
1c694     A7 20 02 FB | 	rdlong	local02, fp
1c698     10 1F 82 F1 | 	sub	local01, local02
1c69c     07 1E 06 F5 | 	and	local01, #7
1c6a0     18 1E 66 F0 | 	shl	local01, #24
1c6a4     78 14 06 F6 | 	mov	arg02, #120
1c6a8     0F 15 42 F5 | 	or	arg02, local01
1c6ac     14 4E 85 F1 | 	sub	fp, #20
1c6b0     A7 14 62 FC | 	wrlong	arg02, fp
1c6b4     14 4E 05 F1 | 	add	fp, #20
1c6b8     A7 12 02 FB | 	rdlong	arg01, fp
1c6bc     10 14 26 F4 | 	bith	arg02, #16
1c6c0     40 12 62 FD | 	dirl	arg01
1c6c4     09 15 02 FC | 	wrpin	arg02, arg01
1c6c8     09 3F 18 FC | 	wxpin	#31, arg01
1c6cc     FF FF FF FF 
1c6d0     09 FF 2B FC | 	wypin	##-1, arg01
1c6d4     41 12 62 FD | 	dirh	arg01
1c6d8     04 4E 85 F1 | 	sub	fp, #4
1c6dc     A7 14 02 FB | 	rdlong	arg02, fp
1c6e0     08 4E 05 F1 | 	add	fp, #8
1c6e4     A7 22 02 FB | 	rdlong	local03, fp
1c6e8     11 15 82 F1 | 	sub	arg02, local03
1c6ec     07 14 06 F5 | 	and	arg02, #7
1c6f0     18 14 66 F0 | 	shl	arg02, #24
1c6f4     14 4E 85 F1 | 	sub	fp, #20
1c6f8     A7 14 62 FC | 	wrlong	arg02, fp
1c6fc     29 00 00 FF 
1c700     7A 14 46 F5 | 	or	arg02, ##21114
1c704     A7 14 62 FC | 	wrlong	arg02, fp
1c708     14 4E 05 F1 | 	add	fp, #20
1c70c     A7 12 02 FB | 	rdlong	arg01, fp
1c710     40 12 62 FD | 	dirl	arg01
1c714     09 15 02 FC | 	wrpin	arg02, arg01
1c718     09 4F 18 FC | 	wxpin	#39, arg01
1c71c     09 01 28 FC | 	wypin	#0, arg01
1c720     41 12 62 FD | 	dirh	arg01
1c724     28 4E 85 F1 | 	sub	fp, #40
1c728     A7 12 02 F6 | 	mov	arg01, fp
1c72c     14 4E 85 F1 | 	sub	fp, #20
1c730     0A 14 06 F6 | 	mov	arg02, #10
1c734     1C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0947
1c738     00 12 06 F6 | 	mov	arg01, #0
1c73c     00 14 06 F6 | 	mov	arg02, #0
1c740     E8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1c744     24 80 B0 FD | 	call	#_fatfs_cc_deselect_0957
1c748     64 12 06 F6 | 	mov	arg01, #100
1c74c     08 9F BF FD | 	call	#__system___waitus
1c750     14 4E 05 F1 | 	add	fp, #20
1c754     A7 12 02 F6 | 	mov	arg01, fp
1c758     14 4E 85 F1 | 	sub	fp, #20
1c75c     0A 14 06 F6 | 	mov	arg02, #10
1c760     F0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0947
1c764     0C 4E 05 F1 | 	add	fp, #12
1c768     A7 00 48 FC | 	wrbyte	#0, fp
1c76c     0C 4E 85 F1 | 	sub	fp, #12
1c770     00 12 06 F6 | 	mov	arg01, #0
1c774     00 14 06 F6 | 	mov	arg02, #0
1c778     B0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1c77c     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
1c780     01 18 0E F2 | 	cmp	arg04, #1 wz
1c784     B8 03 90 5D |  if_ne	jmp	#LR__3097
1c788     08 12 06 F6 | 	mov	arg01, #8
1c78c     AA 15 06 F6 | 	mov	arg02, #426
1c790     98 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1c794     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c798     01 FA 0D F2 | 	cmp	result1, #1 wz
1c79c     98 01 90 5D |  if_ne	jmp	#LR__3083
1c7a0     14 4E 05 F1 | 	add	fp, #20
1c7a4     A7 12 02 F6 | 	mov	arg01, fp
1c7a8     14 4E 85 F1 | 	sub	fp, #20
1c7ac     04 14 06 F6 | 	mov	arg02, #4
1c7b0     A0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0947
1c7b4     16 4E 05 F1 | 	add	fp, #22
1c7b8     A7 24 C2 FA | 	rdbyte	local04, fp
1c7bc     16 4E 85 F1 | 	sub	fp, #22
1c7c0     01 24 0E F2 | 	cmp	local04, #1 wz
1c7c4     17 4E 05 A1 |  if_e	add	fp, #23
1c7c8     A7 22 C2 AA |  if_e	rdbyte	local03, fp
1c7cc     17 4E 85 A1 |  if_e	sub	fp, #23
1c7d0     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
1c7d4     68 03 90 5D |  if_ne	jmp	#LR__3096
1c7d8                 | ' 				for (tmr = 1000; tmr; tmr--) {
1c7d8     18 4E 05 F1 | 	add	fp, #24
1c7dc     01 00 80 FF 
1c7e0     A7 D0 6B FC | 	wrlong	##1000, fp
1c7e4     18 4E 85 F1 | 	sub	fp, #24
1c7e8                 | LR__3080
1c7e8     18 4E 05 F1 | 	add	fp, #24
1c7ec     A7 1E 0A FB | 	rdlong	local01, fp wz
1c7f0     18 4E 85 F1 | 	sub	fp, #24
1c7f4     3C 00 90 AD |  if_e	jmp	#LR__3081
1c7f8     A9 12 06 F6 | 	mov	arg01, #169
1c7fc     1E 14 C6 F9 | 	decod	arg02, #30
1c800     28 82 B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1c804     FD 24 02 F6 | 	mov	local04, result1
1c808     07 24 4E F7 | 	zerox	local04, #7 wz
1c80c     24 00 90 AD |  if_e	jmp	#LR__3081
1c810     01 00 00 FF 
1c814     E8 13 06 F6 | 	mov	arg01, ##1000
1c818     3C 9E BF FD | 	call	#__system___waitus
1c81c     18 4E 05 F1 | 	add	fp, #24
1c820     A7 24 02 FB | 	rdlong	local04, fp
1c824     01 24 86 F1 | 	sub	local04, #1
1c828     A7 24 62 FC | 	wrlong	local04, fp
1c82c     18 4E 85 F1 | 	sub	fp, #24
1c830     B4 FF 9F FD | 	jmp	#LR__3080
1c834                 | LR__3081
1c834     18 4E 05 F1 | 	add	fp, #24
1c838     A7 24 0A FB | 	rdlong	local04, fp wz
1c83c     18 4E 85 F1 | 	sub	fp, #24
1c840     4C 00 90 AD |  if_e	jmp	#LR__3082
1c844     3A 12 06 F6 | 	mov	arg01, #58
1c848     00 14 06 F6 | 	mov	arg02, #0
1c84c     DC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1c850     FD 22 02 F6 | 	mov	local03, result1
1c854     07 22 4E F7 | 	zerox	local03, #7 wz
1c858     34 00 90 5D |  if_ne	jmp	#LR__3082
1c85c     14 4E 05 F1 | 	add	fp, #20
1c860     A7 12 02 F6 | 	mov	arg01, fp
1c864     14 4E 85 F1 | 	sub	fp, #20
1c868     04 14 06 F6 | 	mov	arg02, #4
1c86c     E4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_0947
1c870     14 4E 05 F1 | 	add	fp, #20
1c874     A7 1E C2 FA | 	rdbyte	local01, fp
1c878     40 1E CE F7 | 	test	local01, #64 wz
1c87c     0C 24 06 56 |  if_ne	mov	local04, #12
1c880     04 24 06 A6 |  if_e	mov	local04, #4
1c884     08 4E 85 F1 | 	sub	fp, #8
1c888     A7 24 42 FC | 	wrbyte	local04, fp
1c88c     0C 4E 85 F1 | 	sub	fp, #12
1c890                 | LR__3082
1c890     14 24 06 FB | 	rdlong	local04, #20
1c894     18 4E 05 F1 | 	add	fp, #24
1c898     A7 24 62 FC | 	wrlong	local04, fp
1c89c     0C 4E 05 F1 | 	add	fp, #12
1c8a0     A7 24 02 FB | 	rdlong	local04, fp
1c8a4     1B 24 26 F4 | 	bith	local04, #27
1c8a8     A7 24 62 FC | 	wrlong	local04, fp
1c8ac     0C 4E 85 F1 | 	sub	fp, #12
1c8b0     A7 24 02 FB | 	rdlong	local04, fp
1c8b4     18 4E 85 F1 | 	sub	fp, #24
1c8b8     68 78 04 FF 
1c8bc     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1c8c0     1C 4E 05 C1 |  if_b	add	fp, #28
1c8c4     00 01 80 CF 
1c8c8     A7 08 68 CC |  if_b	wrlong	##131076, fp
1c8cc     1C 4E 85 C1 |  if_b	sub	fp, #28
1c8d0     6C 02 90 CD |  if_b	jmp	#LR__3096
1c8d4     18 4E 05 F1 | 	add	fp, #24
1c8d8     A7 24 02 FB | 	rdlong	local04, fp
1c8dc     18 4E 85 F1 | 	sub	fp, #24
1c8e0     E1 F5 05 FF 
1c8e4     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1c8e8     1C 4E 05 C1 |  if_b	add	fp, #28
1c8ec     00 01 80 CF 
1c8f0     A7 0A 68 CC |  if_b	wrlong	##131077, fp
1c8f4     1C 4E 85 C1 |  if_b	sub	fp, #28
1c8f8     44 02 90 CD |  if_b	jmp	#LR__3096
1c8fc     18 4E 05 F1 | 	add	fp, #24
1c900     A7 24 02 FB | 	rdlong	local04, fp
1c904     18 4E 85 F1 | 	sub	fp, #24
1c908     3B 58 08 FF 
1c90c     01 24 16 F2 | 	cmp	local04, ##280000001 wc
1c910     1C 4E 05 C1 |  if_b	add	fp, #28
1c914     00 01 80 CF 
1c918     A7 0C 68 CC |  if_b	wrlong	##131078, fp
1c91c     1C 4E 85 C1 |  if_b	sub	fp, #28
1c920     1C 02 90 CD |  if_b	jmp	#LR__3096
1c924     1C 4E 05 F1 | 	add	fp, #28
1c928     80 01 80 FF 
1c92c     A7 10 68 FC | 	wrlong	##196616, fp
1c930     1C 4E 85 F1 | 	sub	fp, #28
1c934     08 02 90 FD | 	jmp	#LR__3096
1c938                 | LR__3083
1c938     A9 12 06 F6 | 	mov	arg01, #169
1c93c     00 14 06 F6 | 	mov	arg02, #0
1c940     E8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1c944     FD 24 E2 F8 | 	getbyte	local04, result1, #0
1c948     02 24 16 F2 | 	cmp	local04, #2 wc
1c94c     18 00 90 3D |  if_ae	jmp	#LR__3084
1c950     0C 4E 05 F1 | 	add	fp, #12
1c954     A7 04 48 FC | 	wrbyte	#2, fp
1c958     04 4E 05 F1 | 	add	fp, #4
1c95c     A7 52 49 FC | 	wrbyte	#169, fp
1c960     10 4E 85 F1 | 	sub	fp, #16
1c964     14 00 90 FD | 	jmp	#LR__3085
1c968                 | LR__3084
1c968     0C 4E 05 F1 | 	add	fp, #12
1c96c     A7 02 48 FC | 	wrbyte	#1, fp
1c970     04 4E 05 F1 | 	add	fp, #4
1c974     A7 02 48 FC | 	wrbyte	#1, fp
1c978     10 4E 85 F1 | 	sub	fp, #16
1c97c                 | LR__3085
1c97c                 | ' 				ty =  0x01 ; cmd =  (1) ;
1c97c                 | ' 			}
1c97c                 | ' 			for (tmr = 1000; tmr; tmr--) {
1c97c     18 4E 05 F1 | 	add	fp, #24
1c980     01 00 80 FF 
1c984     A7 D0 6B FC | 	wrlong	##1000, fp
1c988     18 4E 85 F1 | 	sub	fp, #24
1c98c                 | LR__3086
1c98c     18 4E 05 F1 | 	add	fp, #24
1c990     A7 22 0A FB | 	rdlong	local03, fp wz
1c994     18 4E 85 F1 | 	sub	fp, #24
1c998     44 00 90 AD |  if_e	jmp	#LR__3087
1c99c     10 4E 05 F1 | 	add	fp, #16
1c9a0     A7 12 C2 FA | 	rdbyte	arg01, fp
1c9a4     10 4E 85 F1 | 	sub	fp, #16
1c9a8     00 14 06 F6 | 	mov	arg02, #0
1c9ac     7C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1c9b0     FD 24 02 F6 | 	mov	local04, result1
1c9b4     07 24 4E F7 | 	zerox	local04, #7 wz
1c9b8     24 00 90 AD |  if_e	jmp	#LR__3087
1c9bc     01 00 00 FF 
1c9c0     E8 13 06 F6 | 	mov	arg01, ##1000
1c9c4     90 9C BF FD | 	call	#__system___waitus
1c9c8     18 4E 05 F1 | 	add	fp, #24
1c9cc     A7 24 02 FB | 	rdlong	local04, fp
1c9d0     01 24 86 F1 | 	sub	local04, #1
1c9d4     A7 24 62 FC | 	wrlong	local04, fp
1c9d8     18 4E 85 F1 | 	sub	fp, #24
1c9dc     AC FF 9F FD | 	jmp	#LR__3086
1c9e0                 | LR__3087
1c9e0     18 4E 05 F1 | 	add	fp, #24
1c9e4     A7 24 0A FB | 	rdlong	local04, fp wz
1c9e8     18 4E 85 F1 | 	sub	fp, #24
1c9ec     14 00 90 AD |  if_e	jmp	#LR__3088
1c9f0     10 12 06 F6 | 	mov	arg01, #16
1c9f4     09 14 C6 F9 | 	decod	arg02, #9
1c9f8     30 80 B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1c9fc     07 FA 4D F7 | 	zerox	result1, #7 wz
1ca00     0C 00 90 AD |  if_e	jmp	#LR__3089
1ca04                 | LR__3088
1ca04     0C 4E 05 F1 | 	add	fp, #12
1ca08     A7 00 48 FC | 	wrbyte	#0, fp
1ca0c     0C 4E 85 F1 | 	sub	fp, #12
1ca10                 | LR__3089
1ca10     14 24 06 FB | 	rdlong	local04, #20
1ca14     18 4E 05 F1 | 	add	fp, #24
1ca18     A7 24 62 FC | 	wrlong	local04, fp
1ca1c     18 4E 85 F1 | 	sub	fp, #24
1ca20     F0 FA 02 FF 
1ca24     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1ca28     18 00 90 3D |  if_ae	jmp	#LR__3090
1ca2c     24 4E 05 F1 | 	add	fp, #36
1ca30     A7 24 02 FB | 	rdlong	local04, fp
1ca34     1B 24 26 F4 | 	bith	local04, #27
1ca38     A7 24 62 FC | 	wrlong	local04, fp
1ca3c     24 4E 85 F1 | 	sub	fp, #36
1ca40     2C 00 90 FD | 	jmp	#LR__3091
1ca44                 | LR__3090
1ca44     18 4E 05 F1 | 	add	fp, #24
1ca48     A7 24 02 FB | 	rdlong	local04, fp
1ca4c     18 4E 85 F1 | 	sub	fp, #24
1ca50     E1 F5 05 FF 
1ca54     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1ca58     24 4E 05 C1 |  if_b	add	fp, #36
1ca5c     A7 24 02 CB |  if_b	rdlong	local04, fp
1ca60     80 00 04 CF 
1ca64     00 24 46 C5 |  if_b	or	local04, ##134283264
1ca68     A7 24 62 CC |  if_b	wrlong	local04, fp
1ca6c     24 4E 85 C1 |  if_b	sub	fp, #36
1ca70                 | LR__3091
1ca70     18 4E 05 F1 | 	add	fp, #24
1ca74     A7 24 02 FB | 	rdlong	local04, fp
1ca78     18 4E 85 F1 | 	sub	fp, #24
1ca7c     F0 FA 02 FF 
1ca80     01 25 16 F2 | 	cmp	local04, ##100000001 wc
1ca84     1C 4E 05 C1 |  if_b	add	fp, #28
1ca88     00 01 80 CF 
1ca8c     A7 08 68 CC |  if_b	wrlong	##131076, fp
1ca90     1C 4E 85 C1 |  if_b	sub	fp, #28
1ca94     A8 00 90 CD |  if_b	jmp	#LR__3095
1ca98     18 4E 05 F1 | 	add	fp, #24
1ca9c     A7 24 02 FB | 	rdlong	local04, fp
1caa0     18 4E 85 F1 | 	sub	fp, #24
1caa4     68 78 04 FF 
1caa8     81 25 16 F2 | 	cmp	local04, ##150000001 wc
1caac     1C 4E 05 C1 |  if_b	add	fp, #28
1cab0     80 01 80 CF 
1cab4     A7 0C 68 CC |  if_b	wrlong	##196614, fp
1cab8     1C 4E 85 C1 |  if_b	sub	fp, #28
1cabc     80 00 90 CD |  if_b	jmp	#LR__3094
1cac0     18 4E 05 F1 | 	add	fp, #24
1cac4     A7 24 02 FB | 	rdlong	local04, fp
1cac8     18 4E 85 F1 | 	sub	fp, #24
1cacc     E1 F5 05 FF 
1cad0     01 24 16 F2 | 	cmp	local04, ##200000001 wc
1cad4     1C 4E 05 C1 |  if_b	add	fp, #28
1cad8     00 02 80 CF 
1cadc     A7 10 68 CC |  if_b	wrlong	##262152, fp
1cae0     1C 4E 85 C1 |  if_b	sub	fp, #28
1cae4     58 00 90 CD |  if_b	jmp	#LR__3093
1cae8     18 4E 05 F1 | 	add	fp, #24
1caec     A7 24 02 FB | 	rdlong	local04, fp
1caf0     18 4E 85 F1 | 	sub	fp, #24
1caf4     59 73 07 FF 
1caf8     81 24 16 F2 | 	cmp	local04, ##250000001 wc
1cafc     1C 4E 05 C1 |  if_b	add	fp, #28
1cb00     80 02 80 CF 
1cb04     A7 14 68 CC |  if_b	wrlong	##327690, fp
1cb08     1C 4E 85 C1 |  if_b	sub	fp, #28
1cb0c     30 00 90 CD |  if_b	jmp	#LR__3092
1cb10     18 4E 05 F1 | 	add	fp, #24
1cb14     A7 24 02 FB | 	rdlong	local04, fp
1cb18     18 4E 85 F1 | 	sub	fp, #24
1cb1c     D1 F0 08 FF 
1cb20     01 25 16 F2 | 	cmp	local04, ##300000001 wc
1cb24     1C 4E 05 C1 |  if_b	add	fp, #28
1cb28     00 03 80 CF 
1cb2c     A7 18 68 CC |  if_b	wrlong	##393228, fp
1cb30     1C 4E 85 F3 | 	sumc	fp, #28
1cb34     80 03 80 3F 
1cb38     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
1cb3c     1C 4E 85 31 |  if_ae	sub	fp, #28
1cb40                 | LR__3092
1cb40                 | LR__3093
1cb40                 | LR__3094
1cb40                 | LR__3095
1cb40                 | LR__3096
1cb40                 | LR__3097
1cb40     0C 4E 05 F1 | 	add	fp, #12
1cb44     A7 24 C2 FA | 	rdbyte	local04, fp
1cb48     01 00 00 FF 
1cb4c     21 E4 05 F1 | 	add	objptr, ##545
1cb50     F2 24 42 FC | 	wrbyte	local04, objptr
1cb54     A7 1E CA FA | 	rdbyte	local01, fp wz
1cb58     00 24 06 56 |  if_ne	mov	local04, #0
1cb5c     01 24 06 A6 |  if_e	mov	local04, #1
1cb60     20 4E 05 F1 | 	add	fp, #32
1cb64     A7 24 42 FC | 	wrbyte	local04, fp
1cb68     A7 24 C2 FA | 	rdbyte	local04, fp
1cb6c     2C 4E 85 F1 | 	sub	fp, #44
1cb70     01 E4 85 F1 | 	sub	objptr, #1
1cb74     F2 24 42 FC | 	wrbyte	local04, objptr
1cb78     01 00 00 FF 
1cb7c     20 E4 85 F1 | 	sub	objptr, ##544
1cb80     E8 7B B0 FD | 	call	#_fatfs_cc_deselect_0957
1cb84     34 4E 05 F1 | 	add	fp, #52
1cb88     A7 12 02 FB | 	rdlong	arg01, fp
1cb8c     18 4E 85 F1 | 	sub	fp, #24
1cb90     A7 14 02 FB | 	rdlong	arg02, fp
1cb94     09 15 12 FC | 	wxpin	arg02, arg01
1cb98     1C 4E 05 F1 | 	add	fp, #28
1cb9c     A7 12 02 FB | 	rdlong	arg01, fp
1cba0     14 4E 85 F1 | 	sub	fp, #20
1cba4     A7 14 02 FB | 	rdlong	arg02, fp
1cba8     09 15 02 FC | 	wrpin	arg02, arg01
1cbac                 | ' 
1cbac                 | ' 		}
1cbac                 | ' 	}
1cbac                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1cbac                 | ' 	CardType = ty;
1cbac                 | ' 	s = ty ? 0 :  0x01 ;
1cbac                 | ' 	Stat = s;
1cbac                 | ' 
1cbac                 | ' 	deselect();
1cbac                 | ' 
1cbac                 | ' 
1cbac                 | ' 	_wxpin( PIN_CLK, ck_div );
1cbac                 | ' 	_wrpin( PIN_DI, spm_tx );
1cbac                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
1cbac                 | ' 	return s;
1cbac     08 4E 05 F1 | 	add	fp, #8
1cbb0     A7 FA C1 FA | 	rdbyte	result1, fp
1cbb4     2C 4E 85 F1 | 	sub	fp, #44
1cbb8                 | LR__3098
1cbb8     A7 F0 03 F6 | 	mov	ptra, fp
1cbbc     B2 00 A0 FD | 	call	#popregs_
1cbc0                 | _fatfs_cc_disk_initialize_ret
1cbc0     2D 00 64 FD | 	ret
1cbc4                 | 
1cbc4                 | _fatfs_cc_disk_read
1cbc4     05 4A 05 F6 | 	mov	COUNT_, #5
1cbc8     A8 00 A0 FD | 	call	#pushregs_
1cbcc     0A 1F 02 F6 | 	mov	local01, arg02
1cbd0     0B 21 02 F6 | 	mov	local02, arg03
1cbd4     0C 23 02 F6 | 	mov	local03, arg04
1cbd8     00 12 0E F2 | 	cmp	arg01, #0 wz
1cbdc     01 FA 05 56 |  if_ne	mov	result1, #1
1cbe0                 | ' 
1cbe0                 | ' 	return Stat;
1cbe0     01 00 00 AF 
1cbe4     20 E4 05 A1 |  if_e	add	objptr, ##544
1cbe8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1cbec     01 00 00 AF 
1cbf0     20 E4 85 A1 |  if_e	sub	objptr, ##544
1cbf4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1cbf8     01 FA CD F7 | 	test	result1, #1 wz
1cbfc     03 FA 05 56 |  if_ne	mov	result1, #3
1cc00     84 00 90 5D |  if_ne	jmp	#LR__3102
1cc04     01 00 00 FF 
1cc08     21 E4 05 F1 | 	add	objptr, ##545
1cc0c     F2 24 C2 FA | 	rdbyte	local04, objptr
1cc10     01 00 00 FF 
1cc14     21 E4 85 F1 | 	sub	objptr, ##545
1cc18     08 24 CE F7 | 	test	local04, #8 wz
1cc1c     09 20 66 A0 |  if_e	shl	local02, #9
1cc20     02 22 16 F2 | 	cmp	local03, #2 wc
1cc24     12 24 06 36 |  if_ae	mov	local04, #18
1cc28     11 24 06 C6 |  if_b	mov	local04, #17
1cc2c     10 15 02 F6 | 	mov	arg02, local02
1cc30     12 13 02 F6 | 	mov	arg01, local04
1cc34     F4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1cc38     FD 26 02 F6 | 	mov	local05, result1
1cc3c     07 26 4E F7 | 	zerox	local05, #7 wz
1cc40     30 00 90 5D |  if_ne	jmp	#LR__3101
1cc44                 | ' 		do {
1cc44                 | LR__3100
1cc44     0F 13 02 F6 | 	mov	arg01, local01
1cc48     09 14 C6 F9 | 	decod	arg02, #9
1cc4c     30 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0965
1cc50     00 FA 0D F2 | 	cmp	result1, #0 wz
1cc54     01 00 00 5F 
1cc58     00 1E 06 51 |  if_ne	add	local01, ##512
1cc5c     F9 23 6E 5B |  if_ne	djnz	local03, #LR__3100
1cc60     12 25 E2 F8 | 	getbyte	local04, local04, #0
1cc64     12 24 0E F2 | 	cmp	local04, #18 wz
1cc68     0C 12 06 A6 |  if_e	mov	arg01, #12
1cc6c     00 14 06 A6 |  if_e	mov	arg02, #0
1cc70     B8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_0971
1cc74                 | LR__3101
1cc74     F4 7A B0 FD | 	call	#_fatfs_cc_deselect_0957
1cc78                 | ' 	}
1cc78                 | ' 	deselect();
1cc78                 | ' 
1cc78                 | ' 	return count ? RES_ERROR : RES_OK;
1cc78     00 22 0E F2 | 	cmp	local03, #0 wz
1cc7c     01 26 06 56 |  if_ne	mov	local05, #1
1cc80     00 26 06 A6 |  if_e	mov	local05, #0
1cc84     13 FB 01 F6 | 	mov	result1, local05
1cc88                 | LR__3102
1cc88     A7 F0 03 F6 | 	mov	ptra, fp
1cc8c     B2 00 A0 FD | 	call	#popregs_
1cc90                 | _fatfs_cc_disk_read_ret
1cc90     2D 00 64 FD | 	ret
1cc94                 | 
1cc94                 | _fatfs_cc_disk_write
1cc94     04 4A 05 F6 | 	mov	COUNT_, #4
1cc98     A8 00 A0 FD | 	call	#pushregs_
1cc9c     0A 1F 02 F6 | 	mov	local01, arg02
1cca0     0C 21 02 F6 | 	mov	local02, arg04
1cca4     0B 23 02 F6 | 	mov	local03, arg03
1cca8     00 12 0E F2 | 	cmp	arg01, #0 wz
1ccac     01 FA 05 56 |  if_ne	mov	result1, #1
1ccb0                 | ' 
1ccb0                 | ' 	return Stat;
1ccb0     01 00 00 AF 
1ccb4     20 E4 05 A1 |  if_e	add	objptr, ##544
1ccb8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1ccbc     01 00 00 AF 
1ccc0     20 E4 85 A1 |  if_e	sub	objptr, ##544
1ccc4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1ccc8     01 FA CD F7 | 	test	result1, #1 wz
1cccc     03 FA 05 56 |  if_ne	mov	result1, #3
1ccd0     D4 00 90 5D |  if_ne	jmp	#LR__3114
1ccd4     01 00 00 FF 
1ccd8     21 E4 05 F1 | 	add	objptr, ##545
1ccdc     F2 16 C2 FA | 	rdbyte	arg03, objptr
1cce0     01 00 00 FF 
1cce4     21 E4 85 F1 | 	sub	objptr, ##545
1cce8     08 16 CE F7 | 	test	arg03, #8 wz
1ccec     09 22 66 A0 |  if_e	shl	local03, #9
1ccf0     01 20 0E F2 | 	cmp	local02, #1 wz
1ccf4     30 00 90 5D |  if_ne	jmp	#LR__3110
1ccf8     18 12 06 F6 | 	mov	arg01, #24
1ccfc     11 15 02 F6 | 	mov	arg02, local03
1cd00     28 7D B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1cd04     FD 24 02 F6 | 	mov	local04, result1
1cd08     07 24 4E F7 | 	zerox	local04, #7 wz
1cd0c     84 00 90 5D |  if_ne	jmp	#LR__3113
1cd10     0F 13 02 F6 | 	mov	arg01, local01
1cd14     FE 14 06 F6 | 	mov	arg02, #254
1cd18     44 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_0967
1cd1c     00 FA 0D F2 | 	cmp	result1, #0 wz
1cd20     00 20 06 56 |  if_ne	mov	local02, #0
1cd24     6C 00 90 FD | 	jmp	#LR__3113
1cd28                 | LR__3110
1cd28     01 00 00 FF 
1cd2c     21 E4 05 F1 | 	add	objptr, ##545
1cd30     F2 24 C2 FA | 	rdbyte	local04, objptr
1cd34     01 00 00 FF 
1cd38     21 E4 85 F1 | 	sub	objptr, ##545
1cd3c     06 24 CE F7 | 	test	local04, #6 wz
1cd40     97 12 06 56 |  if_ne	mov	arg01, #151
1cd44     10 15 02 56 |  if_ne	mov	arg02, local02
1cd48     E0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_0971
1cd4c     11 15 02 F6 | 	mov	arg02, local03
1cd50     19 12 06 F6 | 	mov	arg01, #25
1cd54     D4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1cd58     FD 24 02 F6 | 	mov	local04, result1
1cd5c     07 24 4E F7 | 	zerox	local04, #7 wz
1cd60     30 00 90 5D |  if_ne	jmp	#LR__3112
1cd64                 | ' 			do {
1cd64                 | LR__3111
1cd64     0F 13 02 F6 | 	mov	arg01, local01
1cd68     FC 14 06 F6 | 	mov	arg02, #252
1cd6c     F0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0967
1cd70     00 FA 0D F2 | 	cmp	result1, #0 wz
1cd74     01 00 00 5F 
1cd78     00 1E 06 51 |  if_ne	add	local01, ##512
1cd7c     F9 21 6E 5B |  if_ne	djnz	local02, #LR__3111
1cd80     00 12 06 F6 | 	mov	arg01, #0
1cd84     FD 14 06 F6 | 	mov	arg02, #253
1cd88     D4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_0967
1cd8c     00 FA 0D F2 | 	cmp	result1, #0 wz
1cd90     01 20 06 A6 |  if_e	mov	local02, #1
1cd94                 | LR__3112
1cd94                 | LR__3113
1cd94     D4 79 B0 FD | 	call	#_fatfs_cc_deselect_0957
1cd98                 | ' 				count = 1;
1cd98                 | ' 		}
1cd98                 | ' 	}
1cd98                 | ' 	deselect();
1cd98                 | ' 
1cd98                 | ' 	return count ? RES_ERROR : RES_OK;
1cd98     00 20 0E F2 | 	cmp	local02, #0 wz
1cd9c     01 24 06 56 |  if_ne	mov	local04, #1
1cda0     00 24 06 A6 |  if_e	mov	local04, #0
1cda4     12 FB 01 F6 | 	mov	result1, local04
1cda8                 | LR__3114
1cda8     A7 F0 03 F6 | 	mov	ptra, fp
1cdac     B2 00 A0 FD | 	call	#popregs_
1cdb0                 | _fatfs_cc_disk_write_ret
1cdb0     2D 00 64 FD | 	ret
1cdb4                 | 
1cdb4                 | _fatfs_cc_disk_ioctl
1cdb4     01 4A 05 F6 | 	mov	COUNT_, #1
1cdb8     A8 00 A0 FD | 	call	#pushregs_
1cdbc     30 F0 07 F1 | 	add	ptra, #48
1cdc0     04 4E 05 F1 | 	add	fp, #4
1cdc4     A7 12 42 FC | 	wrbyte	arg01, fp
1cdc8     04 4E 05 F1 | 	add	fp, #4
1cdcc     A7 14 42 FC | 	wrbyte	arg02, fp
1cdd0     04 4E 05 F1 | 	add	fp, #4
1cdd4     A7 16 62 FC | 	wrlong	arg03, fp
1cdd8     08 4E 85 F1 | 	sub	fp, #8
1cddc     A7 12 CA FA | 	rdbyte	arg01, fp wz
1cde0     04 4E 85 F1 | 	sub	fp, #4
1cde4     01 FA 05 56 |  if_ne	mov	result1, #1
1cde8                 | ' 
1cde8                 | ' 	return Stat;
1cde8     01 00 00 AF 
1cdec     20 E4 05 A1 |  if_e	add	objptr, ##544
1cdf0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
1cdf4     01 00 00 AF 
1cdf8     20 E4 85 A1 |  if_e	sub	objptr, ##544
1cdfc     FD FA E1 F8 | 	getbyte	result1, result1, #0
1ce00     01 FA CD F7 | 	test	result1, #1 wz
1ce04     03 FA 05 56 |  if_ne	mov	result1, #3
1ce08     E4 01 90 5D |  if_ne	jmp	#LR__3128
1ce0c     10 4E 05 F1 | 	add	fp, #16
1ce10     A7 02 68 FC | 	wrlong	#1, fp
1ce14                 | ' 
1ce14                 | ' 	res = RES_ERROR;
1ce14                 | ' 	switch (ctrl) {
1ce14     08 4E 85 F1 | 	sub	fp, #8
1ce18     A7 1E C2 FA | 	rdbyte	local01, fp
1ce1c     08 4E 85 F1 | 	sub	fp, #8
1ce20     04 1E 26 F3 | 	fle	local01, #4
1ce24     30 1E 62 FD | 	jmprel	local01
1ce28                 | LR__3120
1ce28     10 00 90 FD | 	jmp	#LR__3121
1ce2c     24 00 90 FD | 	jmp	#LR__3122
1ce30     A0 01 90 FD | 	jmp	#LR__3126
1ce34     80 01 90 FD | 	jmp	#LR__3125
1ce38     98 01 90 FD | 	jmp	#LR__3126
1ce3c                 | LR__3121
1ce3c     B0 79 B0 FD | 	call	#_fatfs_cc_select_0961
1ce40     00 FA 0D F2 | 	cmp	result1, #0 wz
1ce44     10 4E 05 51 |  if_ne	add	fp, #16
1ce48     A7 00 68 5C |  if_ne	wrlong	#0, fp
1ce4c     10 4E 85 51 |  if_ne	sub	fp, #16
1ce50                 | ' 			break;
1ce50     8C 01 90 FD | 	jmp	#LR__3127
1ce54                 | LR__3122
1ce54     09 12 06 F6 | 	mov	arg01, #9
1ce58     00 14 06 F6 | 	mov	arg02, #0
1ce5c     CC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_0971
1ce60     FD 1E 02 F6 | 	mov	local01, result1
1ce64     07 1E 4E F7 | 	zerox	local01, #7 wz
1ce68     74 01 90 5D |  if_ne	jmp	#LR__3127
1ce6c     18 4E 05 F1 | 	add	fp, #24
1ce70     A7 12 02 F6 | 	mov	arg01, fp
1ce74     18 4E 85 F1 | 	sub	fp, #24
1ce78     10 14 06 F6 | 	mov	arg02, #16
1ce7c     00 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_0965
1ce80     00 FA 0D F2 | 	cmp	result1, #0 wz
1ce84     58 01 90 AD |  if_e	jmp	#LR__3127
1ce88     18 4E 05 F1 | 	add	fp, #24
1ce8c     A7 1E C2 FA | 	rdbyte	local01, fp
1ce90     18 4E 85 F1 | 	sub	fp, #24
1ce94     06 1E 46 F0 | 	shr	local01, #6
1ce98     01 1E 0E F2 | 	cmp	local01, #1 wz
1ce9c     5C 00 90 5D |  if_ne	jmp	#LR__3123
1cea0     21 4E 05 F1 | 	add	fp, #33
1cea4     A7 1E C2 FA | 	rdbyte	local01, fp
1cea8     01 4E 85 F1 | 	sub	fp, #1
1ceac     A7 FA C1 FA | 	rdbyte	result1, fp
1ceb0     FD FA 31 F9 | 	getword	result1, result1, #0
1ceb4     08 FA 65 F0 | 	shl	result1, #8
1ceb8     FD 1E 02 F1 | 	add	local01, result1
1cebc     01 4E 85 F1 | 	sub	fp, #1
1cec0     A7 FA C1 FA | 	rdbyte	result1, fp
1cec4     3F FA 05 F5 | 	and	result1, #63
1cec8     10 FA 65 F0 | 	shl	result1, #16
1cecc     FD 1E 02 F1 | 	add	local01, result1
1ced0     01 1E 06 F1 | 	add	local01, #1
1ced4     09 4E 05 F1 | 	add	fp, #9
1ced8     A7 1E 62 FC | 	wrlong	local01, fp
1cedc     1C 4E 85 F1 | 	sub	fp, #28
1cee0     A7 1E 02 FB | 	rdlong	local01, fp
1cee4     1C 4E 05 F1 | 	add	fp, #28
1cee8     A7 FA 01 FB | 	rdlong	result1, fp
1ceec     28 4E 85 F1 | 	sub	fp, #40
1cef0     0A FA 65 F0 | 	shl	result1, #10
1cef4     0F FB 61 FC | 	wrlong	result1, local01
1cef8     AC 00 90 FD | 	jmp	#LR__3124
1cefc                 | LR__3123
1cefc     1D 4E 05 F1 | 	add	fp, #29
1cf00     A7 1E C2 FA | 	rdbyte	local01, fp
1cf04     0F 1F 42 F8 | 	getnib	local01, local01, #0
1cf08     05 4E 05 F1 | 	add	fp, #5
1cf0c     A7 FA C1 FA | 	rdbyte	result1, fp
1cf10     80 FA 05 F5 | 	and	result1, #128
1cf14     07 FA C5 F0 | 	sar	result1, #7
1cf18     FD 1E 02 F1 | 	add	local01, result1
1cf1c     01 4E 85 F1 | 	sub	fp, #1
1cf20     A7 FA C1 FA | 	rdbyte	result1, fp
1cf24     03 FA 05 F5 | 	and	result1, #3
1cf28     01 FA 65 F0 | 	shl	result1, #1
1cf2c     FD 1E 02 F1 | 	add	local01, result1
1cf30     02 1E 06 F1 | 	add	local01, #2
1cf34     0D 4E 85 F1 | 	sub	fp, #13
1cf38     A7 1E 42 FC | 	wrbyte	local01, fp
1cf3c     0C 4E 05 F1 | 	add	fp, #12
1cf40     A7 1E C2 FA | 	rdbyte	local01, fp
1cf44     06 1E 46 F0 | 	shr	local01, #6
1cf48     01 4E 85 F1 | 	sub	fp, #1
1cf4c     A7 FA C1 FA | 	rdbyte	result1, fp
1cf50     FD FA 31 F9 | 	getword	result1, result1, #0
1cf54     02 FA 65 F0 | 	shl	result1, #2
1cf58     FD 1E 02 F1 | 	add	local01, result1
1cf5c     01 4E 85 F1 | 	sub	fp, #1
1cf60     A7 FA C1 FA | 	rdbyte	result1, fp
1cf64     03 FA 05 F5 | 	and	result1, #3
1cf68     FD FA 31 F9 | 	getword	result1, result1, #0
1cf6c     0A FA 65 F0 | 	shl	result1, #10
1cf70     FD 1E 02 F1 | 	add	local01, result1
1cf74     01 1E 06 F1 | 	add	local01, #1
1cf78     0A 4E 05 F1 | 	add	fp, #10
1cf7c     A7 1E 62 FC | 	wrlong	local01, fp
1cf80     1C 4E 85 F1 | 	sub	fp, #28
1cf84     A7 1E 02 FB | 	rdlong	local01, fp
1cf88     1C 4E 05 F1 | 	add	fp, #28
1cf8c     A7 FA 01 FB | 	rdlong	result1, fp
1cf90     14 4E 85 F1 | 	sub	fp, #20
1cf94     A7 16 C2 FA | 	rdbyte	arg03, fp
1cf98     14 4E 85 F1 | 	sub	fp, #20
1cf9c     09 16 86 F1 | 	sub	arg03, #9
1cfa0     0B FB 61 F0 | 	shl	result1, arg03
1cfa4     0F FB 61 FC | 	wrlong	result1, local01
1cfa8                 | LR__3124
1cfa8     10 4E 05 F1 | 	add	fp, #16
1cfac     A7 00 68 FC | 	wrlong	#0, fp
1cfb0     10 4E 85 F1 | 	sub	fp, #16
1cfb4                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1cfb4                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1cfb4                 | ' 					*(LBA_t*)buff = cs << (n - 9);
1cfb4                 | ' 				}
1cfb4                 | ' 				res = RES_OK;
1cfb4                 | ' 			}
1cfb4                 | ' 			break;
1cfb4     28 00 90 FD | 	jmp	#LR__3127
1cfb8                 | LR__3125
1cfb8     0C 4E 05 F1 | 	add	fp, #12
1cfbc     A7 1E 02 FB | 	rdlong	local01, fp
1cfc0     0F 01 69 FC | 	wrlong	#128, local01
1cfc4     04 4E 05 F1 | 	add	fp, #4
1cfc8     A7 00 68 FC | 	wrlong	#0, fp
1cfcc     10 4E 85 F1 | 	sub	fp, #16
1cfd0                 | ' 			*(DWORD*)buff = 128;
1cfd0                 | ' 			res = RES_OK;
1cfd0                 | ' 			break;
1cfd0     0C 00 90 FD | 	jmp	#LR__3127
1cfd4                 | LR__3126
1cfd4     10 4E 05 F1 | 	add	fp, #16
1cfd8     A7 08 68 FC | 	wrlong	#4, fp
1cfdc     10 4E 85 F1 | 	sub	fp, #16
1cfe0                 | LR__3127
1cfe0     88 77 B0 FD | 	call	#_fatfs_cc_deselect_0957
1cfe4                 | ' 			res = RES_PARERR;
1cfe4                 | ' 	}
1cfe4                 | ' 
1cfe4                 | ' 	deselect();
1cfe4                 | ' 
1cfe4                 | ' 	return res;
1cfe4     10 4E 05 F1 | 	add	fp, #16
1cfe8     A7 FA 01 FB | 	rdlong	result1, fp
1cfec     10 4E 85 F1 | 	sub	fp, #16
1cff0                 | LR__3128
1cff0     A7 F0 03 F6 | 	mov	ptra, fp
1cff4     B2 00 A0 FD | 	call	#popregs_
1cff8                 | _fatfs_cc_disk_ioctl_ret
1cff8     2D 00 64 FD | 	ret
1cffc                 | 
1cffc                 | _fatfs_cc_disk_setpins
1cffc     00 12 0E F2 | 	cmp	arg01, #0 wz
1d000     01 FA 65 56 |  if_ne	neg	result1, #1
1d004     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
1d008     01 00 00 FF 
1d00c     10 E4 05 F1 | 	add	objptr, ##528
1d010     F2 14 62 FC | 	wrlong	arg02, objptr
1d014     04 E4 05 F1 | 	add	objptr, #4
1d018     F2 16 62 FC | 	wrlong	arg03, objptr
1d01c     04 E4 05 F1 | 	add	objptr, #4
1d020     F2 18 62 FC | 	wrlong	arg04, objptr
1d024     04 E4 05 F1 | 	add	objptr, #4
1d028     F2 1A 62 FC | 	wrlong	arg05, objptr
1d02c     01 00 00 FF 
1d030     1C E4 85 F1 | 	sub	objptr, ##540
1d034     00 FA 05 F6 | 	mov	result1, #0
1d038                 | _fatfs_cc_disk_setpins_ret
1d038     2D 00 64 FD | 	ret
1d03c                 | 
1d03c                 | _fatfs_cc_tchar2uni
1d03c     09 01 02 FB | 	rdlong	_var01, arg01
1d040     00 03 02 F6 | 	mov	_var02, _var01
1d044     01 00 06 F1 | 	add	_var01, #1
1d048     00 05 02 F6 | 	mov	_var03, _var01
1d04c     01 07 C2 FA | 	rdbyte	_var04, _var02
1d050     80 06 CE F7 | 	test	_var04, #128 wz
1d054     E8 00 90 AD |  if_e	jmp	#LR__3137
1d058     03 09 02 F6 | 	mov	_var05, _var04
1d05c     E0 08 06 F5 | 	and	_var05, #224
1d060     C0 08 0E F2 | 	cmp	_var05, #192 wz
1d064     1F 06 06 A5 |  if_e	and	_var04, #31
1d068     01 0A 06 A6 |  if_e	mov	_var06, #1
1d06c     34 00 90 AD |  if_e	jmp	#LR__3131
1d070     03 09 02 F6 | 	mov	_var05, _var04
1d074     F0 08 06 F5 | 	and	_var05, #240
1d078     E0 08 0E F2 | 	cmp	_var05, #224 wz
1d07c     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
1d080     02 0A 06 A6 |  if_e	mov	_var06, #2
1d084     1C 00 90 AD |  if_e	jmp	#LR__3130
1d088     03 09 02 F6 | 	mov	_var05, _var04
1d08c     F8 08 06 F5 | 	and	_var05, #248
1d090     F0 08 0E F2 | 	cmp	_var05, #240 wz
1d094     07 06 06 A5 |  if_e	and	_var04, #7
1d098     03 0A 06 A6 |  if_e	mov	_var06, #3
1d09c                 | ' 			return 0xFFFFFFFF;
1d09c     01 FA 65 56 |  if_ne	neg	result1, #1
1d0a0     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1d0a4                 | LR__3130
1d0a4                 | LR__3131
1d0a4                 | ' 		}
1d0a4                 | ' 		do {
1d0a4                 | LR__3132
1d0a4     02 0D C2 FA | 	rdbyte	_var07, _var03
1d0a8     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
1d0ac     C0 08 06 F5 | 	and	_var05, #192
1d0b0     80 08 0E F2 | 	cmp	_var05, #128 wz
1d0b4     01 04 06 F1 | 	add	_var03, #1
1d0b8     01 FA 65 56 |  if_ne	neg	result1, #1
1d0bc     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
1d0c0     06 06 66 F0 | 	shl	_var04, #6
1d0c4     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
1d0c8     3F 02 06 F5 | 	and	_var02, #63
1d0cc     01 07 42 F5 | 	or	_var04, _var02
1d0d0     F4 0B 6E FB | 	djnz	_var06, #LR__3132
1d0d4     80 06 16 F2 | 	cmp	_var04, #128 wc
1d0d8     24 00 90 CD |  if_b	jmp	#LR__3134
1d0dc     6C 00 00 FF 
1d0e0     00 06 16 F2 | 	cmp	_var04, ##55296 wc
1d0e4     0C 00 90 CD |  if_b	jmp	#LR__3133
1d0e8     70 00 00 FF 
1d0ec     00 06 16 F2 | 	cmp	_var04, ##57344 wc
1d0f0     0C 00 90 CD |  if_b	jmp	#LR__3134
1d0f4                 | LR__3133
1d0f4     80 08 00 FF 
1d0f8     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
1d0fc     08 00 90 CD |  if_b	jmp	#LR__3135
1d100                 | LR__3134
1d100     01 FA 65 F6 | 	neg	result1, #1
1d104     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
1d108                 | LR__3135
1d108     80 00 00 FF 
1d10c     00 06 16 F2 | 	cmp	_var04, ##65536 wc
1d110     2C 00 90 CD |  if_b	jmp	#LR__3136
1d114     03 03 02 F6 | 	mov	_var02, _var04
1d118     80 00 00 FF 
1d11c     00 02 86 F1 | 	sub	_var02, ##65536
1d120     06 02 66 F0 | 	shl	_var02, #6
1d124     80 FF 01 FF 
1d128     00 02 06 F5 | 	and	_var02, ##67043328
1d12c     6E 00 6C FF 
1d130     00 08 06 F6 | 	mov	_var05, ##-671032320
1d134     01 09 42 F5 | 	or	_var05, _var02
1d138     09 06 46 F7 | 	zerox	_var04, #9
1d13c     04 07 42 F5 | 	or	_var04, _var05
1d140                 | LR__3136
1d140                 | LR__3137
1d140     09 05 62 FC | 	wrlong	_var03, arg01
1d144                 | ' 	}
1d144                 | ' #line 811 "ff.c"
1d144                 | ' 	*str = p;
1d144                 | ' 	return uc;
1d144     03 FB 01 F6 | 	mov	result1, _var04
1d148                 | _fatfs_cc_tchar2uni_ret
1d148     2D 00 64 FD | 	ret
1d14c                 | 
1d14c                 | _fatfs_cc_put_utf
1d14c     80 12 16 F2 | 	cmp	arg01, #128 wc
1d150     18 00 90 3D |  if_ae	jmp	#LR__3140
1d154     01 16 16 F2 | 	cmp	arg03, #1 wc
1d158     00 FA 05 C6 |  if_b	mov	result1, #0
1d15c     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1d160     0A 13 42 FC | 	wrbyte	arg01, arg02
1d164                 | ' 		*buf = (TCHAR)chr;
1d164                 | ' 		return 1;
1d164     01 FA 05 F6 | 	mov	result1, #1
1d168     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1d16c                 | LR__3140
1d16c     04 00 00 FF 
1d170     00 12 16 F2 | 	cmp	arg01, ##2048 wc
1d174     40 00 90 3D |  if_ae	jmp	#LR__3141
1d178     02 16 16 F2 | 	cmp	arg03, #2 wc
1d17c     00 FA 05 C6 |  if_b	mov	result1, #0
1d180     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1d184     09 FB 01 F6 | 	mov	result1, arg01
1d188     06 FA 45 F0 | 	shr	result1, #6
1d18c     1F FA 05 F5 | 	and	result1, #31
1d190     C0 16 06 F6 | 	mov	arg03, #192
1d194     FD 16 42 F5 | 	or	arg03, result1
1d198     0A 17 42 FC | 	wrbyte	arg03, arg02
1d19c     01 14 06 F1 | 	add	arg02, #1
1d1a0     3F 12 06 F5 | 	and	arg01, #63
1d1a4     80 FA 05 F6 | 	mov	result1, #128
1d1a8     09 FB 41 F5 | 	or	result1, arg01
1d1ac     0A FB 41 FC | 	wrbyte	result1, arg02
1d1b0                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
1d1b0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1d1b0                 | ' 		return 2;
1d1b0     02 FA 05 F6 | 	mov	result1, #2
1d1b4     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1d1b8                 | LR__3141
1d1b8     80 00 00 FF 
1d1bc     00 12 16 F2 | 	cmp	arg01, ##65536 wc
1d1c0     70 00 90 3D |  if_ae	jmp	#LR__3144
1d1c4     03 16 16 F2 | 	cmp	arg03, #3 wc
1d1c8     18 00 90 CD |  if_b	jmp	#LR__3142
1d1cc     6C 00 00 FF 
1d1d0     00 12 16 F2 | 	cmp	arg01, ##55296 wc
1d1d4     14 00 90 CD |  if_b	jmp	#LR__3143
1d1d8     70 00 00 FF 
1d1dc     00 12 16 F2 | 	cmp	arg01, ##57344 wc
1d1e0     08 00 90 3D |  if_ae	jmp	#LR__3143
1d1e4                 | LR__3142
1d1e4     00 FA 05 F6 | 	mov	result1, #0
1d1e8     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1d1ec                 | LR__3143
1d1ec     09 FB 59 F8 | 	getnib	result1, arg01, #3
1d1f0     E0 16 06 F6 | 	mov	arg03, #224
1d1f4     FD 16 42 F5 | 	or	arg03, result1
1d1f8     0A 17 42 FC | 	wrbyte	arg03, arg02
1d1fc     01 14 06 F1 | 	add	arg02, #1
1d200     09 FB 01 F6 | 	mov	result1, arg01
1d204     06 FA 45 F0 | 	shr	result1, #6
1d208     3F FA 05 F5 | 	and	result1, #63
1d20c     80 16 06 F6 | 	mov	arg03, #128
1d210     FD 16 42 F5 | 	or	arg03, result1
1d214     0A 17 42 FC | 	wrbyte	arg03, arg02
1d218     01 14 06 F1 | 	add	arg02, #1
1d21c     3F 12 06 F5 | 	and	arg01, #63
1d220     80 FA 05 F6 | 	mov	result1, #128
1d224     09 FB 41 F5 | 	or	result1, arg01
1d228     0A FB 41 FC | 	wrbyte	result1, arg02
1d22c                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
1d22c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1d22c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1d22c                 | ' 		return 3;
1d22c     03 FA 05 F6 | 	mov	result1, #3
1d230     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
1d234                 | LR__3144
1d234     04 16 16 F2 | 	cmp	arg03, #4 wc
1d238     00 FA 05 C6 |  if_b	mov	result1, #0
1d23c     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
1d240     09 01 02 F6 | 	mov	_var01, arg01
1d244     E0 01 06 F4 | 	bitl	_var01, #480
1d248     00 00 6C FF 
1d24c     00 00 86 F1 | 	sub	_var01, ##-671088640
1d250     06 00 46 F0 | 	shr	_var01, #6
1d254     09 13 32 F9 | 	getword	arg01, arg01, #0
1d258     6E 00 00 FF 
1d25c     00 12 86 F1 | 	sub	arg01, ##56320
1d260     00 08 00 FF 
1d264     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
1d268     02 00 00 CF 
1d26c     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
1d270     00 FA 05 36 |  if_ae	mov	result1, #0
1d274     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
1d278     09 01 42 F5 | 	or	_var01, arg01
1d27c     80 00 00 FF 
1d280     00 00 06 F1 | 	add	_var01, ##65536
1d284     00 FB 01 F6 | 	mov	result1, _var01
1d288     12 FA 45 F0 | 	shr	result1, #18
1d28c     07 FA 05 F5 | 	and	result1, #7
1d290     F0 16 06 F6 | 	mov	arg03, #240
1d294     FD 16 42 F5 | 	or	arg03, result1
1d298     0A 17 42 FC | 	wrbyte	arg03, arg02
1d29c     01 14 06 F1 | 	add	arg02, #1
1d2a0     00 FB 01 F6 | 	mov	result1, _var01
1d2a4     0C FA 45 F0 | 	shr	result1, #12
1d2a8     3F FA 05 F5 | 	and	result1, #63
1d2ac     80 16 06 F6 | 	mov	arg03, #128
1d2b0     FD 16 42 F5 | 	or	arg03, result1
1d2b4     0A 17 42 FC | 	wrbyte	arg03, arg02
1d2b8     01 14 06 F1 | 	add	arg02, #1
1d2bc     00 FB 01 F6 | 	mov	result1, _var01
1d2c0     06 FA 45 F0 | 	shr	result1, #6
1d2c4     3F FA 05 F5 | 	and	result1, #63
1d2c8     80 16 06 F6 | 	mov	arg03, #128
1d2cc     FD 16 42 F5 | 	or	arg03, result1
1d2d0     0A 17 42 FC | 	wrbyte	arg03, arg02
1d2d4     01 14 06 F1 | 	add	arg02, #1
1d2d8     3F 00 06 F5 | 	and	_var01, #63
1d2dc     80 FA 05 F6 | 	mov	result1, #128
1d2e0     00 FB 41 F5 | 	or	result1, _var01
1d2e4     0A FB 41 FC | 	wrbyte	result1, arg02
1d2e8                 | ' 	chr = (hc | chr) + 0x10000;
1d2e8                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
1d2e8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
1d2e8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
1d2e8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
1d2e8                 | ' 	return 4;
1d2e8     04 FA 05 F6 | 	mov	result1, #4
1d2ec                 | _fatfs_cc_put_utf_ret
1d2ec     2D 00 64 FD | 	ret
1d2f0                 | 
1d2f0                 | _fatfs_cc_sync_window
1d2f0     02 4A 05 F6 | 	mov	COUNT_, #2
1d2f4     A8 00 A0 FD | 	call	#pushregs_
1d2f8     09 1F 02 F6 | 	mov	local01, arg01
1d2fc     00 20 06 F6 | 	mov	local02, #0
1d300     03 1E 06 F1 | 	add	local01, #3
1d304     0F FB C9 FA | 	rdbyte	result1, local01 wz
1d308     03 1E 86 F1 | 	sub	local01, #3
1d30c     A4 00 90 AD |  if_e	jmp	#LR__3152
1d310     01 1E 06 F1 | 	add	local01, #1
1d314     0F 13 C2 FA | 	rdbyte	arg01, local01
1d318     33 1E 06 F1 | 	add	local01, #51
1d31c     0F 15 02 F6 | 	mov	arg02, local01
1d320     04 1E 86 F1 | 	sub	local01, #4
1d324     0F 17 02 FB | 	rdlong	arg03, local01
1d328     30 1E 86 F1 | 	sub	local01, #48
1d32c     01 18 06 F6 | 	mov	arg04, #1
1d330     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
1d334     00 FA 0D F2 | 	cmp	result1, #0 wz
1d338     74 00 90 5D |  if_ne	jmp	#LR__3150
1d33c     03 1E 06 F1 | 	add	local01, #3
1d340     0F 01 48 FC | 	wrbyte	#0, local01
1d344     2D 1E 06 F1 | 	add	local01, #45
1d348     0F FB 01 FB | 	rdlong	result1, local01
1d34c     0C 1E 86 F1 | 	sub	local01, #12
1d350     0F 19 02 FB | 	rdlong	arg04, local01
1d354     0C FB 81 F1 | 	sub	result1, arg04
1d358     08 1E 86 F1 | 	sub	local01, #8
1d35c     0F 19 02 FB | 	rdlong	arg04, local01
1d360     1C 1E 86 F1 | 	sub	local01, #28
1d364     0C FB 11 F2 | 	cmp	result1, arg04 wc
1d368     48 00 90 3D |  if_ae	jmp	#LR__3151
1d36c     02 1E 06 F1 | 	add	local01, #2
1d370     0F 19 C2 FA | 	rdbyte	arg04, local01
1d374     02 1E 86 F1 | 	sub	local01, #2
1d378     02 18 0E F2 | 	cmp	arg04, #2 wz
1d37c     34 00 90 5D |  if_ne	jmp	#LR__3151
1d380     01 1E 06 F1 | 	add	local01, #1
1d384     0F 13 C2 FA | 	rdbyte	arg01, local01
1d388     33 1E 06 F1 | 	add	local01, #51
1d38c     0F 15 02 F6 | 	mov	arg02, local01
1d390     04 1E 86 F1 | 	sub	local01, #4
1d394     0F 17 02 FB | 	rdlong	arg03, local01
1d398     14 1E 86 F1 | 	sub	local01, #20
1d39c     0F 1F 02 FB | 	rdlong	local01, local01
1d3a0     0F 17 02 F1 | 	add	arg03, local01
1d3a4     01 18 06 F6 | 	mov	arg04, #1
1d3a8     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
1d3ac     04 00 90 FD | 	jmp	#LR__3151
1d3b0                 | LR__3150
1d3b0     01 20 06 F6 | 	mov	local02, #1
1d3b4                 | LR__3151
1d3b4                 | LR__3152
1d3b4                 | ' 			res = FR_DISK_ERR;
1d3b4                 | ' 		}
1d3b4                 | ' 	}
1d3b4                 | ' 	return res;
1d3b4     10 FB 01 F6 | 	mov	result1, local02
1d3b8     A7 F0 03 F6 | 	mov	ptra, fp
1d3bc     B2 00 A0 FD | 	call	#popregs_
1d3c0                 | _fatfs_cc_sync_window_ret
1d3c0     2D 00 64 FD | 	ret
1d3c4                 | 
1d3c4                 | _fatfs_cc_move_window
1d3c4     03 4A 05 F6 | 	mov	COUNT_, #3
1d3c8     A8 00 A0 FD | 	call	#pushregs_
1d3cc     09 1F 02 F6 | 	mov	local01, arg01
1d3d0     0A 21 02 F6 | 	mov	local02, arg02
1d3d4     00 22 06 F6 | 	mov	local03, #0
1d3d8     30 1E 06 F1 | 	add	local01, #48
1d3dc     0F 19 02 FB | 	rdlong	arg04, local01
1d3e0     30 1E 86 F1 | 	sub	local01, #48
1d3e4     0C 21 0A F2 | 	cmp	local02, arg04 wz
1d3e8     40 00 90 AD |  if_e	jmp	#LR__3161
1d3ec     0F 13 02 F6 | 	mov	arg01, local01
1d3f0     FC FE BF FD | 	call	#_fatfs_cc_sync_window
1d3f4     FD 22 0A F6 | 	mov	local03, result1 wz
1d3f8     30 00 90 5D |  if_ne	jmp	#LR__3160
1d3fc     01 1E 06 F1 | 	add	local01, #1
1d400     0F 13 C2 FA | 	rdbyte	arg01, local01
1d404     33 1E 06 F1 | 	add	local01, #51
1d408     0F 15 02 F6 | 	mov	arg02, local01
1d40c     10 17 02 F6 | 	mov	arg03, local02
1d410     01 18 06 F6 | 	mov	arg04, #1
1d414     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
1d418     00 FA 0D F2 | 	cmp	result1, #0 wz
1d41c     01 20 66 56 |  if_ne	neg	local02, #1
1d420     01 22 06 56 |  if_ne	mov	local03, #1
1d424     04 1E 86 F1 | 	sub	local01, #4
1d428     0F 21 62 FC | 	wrlong	local02, local01
1d42c                 | LR__3160
1d42c                 | LR__3161
1d42c                 | ' 				sect = (LBA_t)0 - 1;
1d42c                 | ' 				res = FR_DISK_ERR;
1d42c                 | ' 			}
1d42c                 | ' 			fs->winsect = sect;
1d42c                 | ' 		}
1d42c                 | ' 	}
1d42c                 | ' 	return res;
1d42c     11 FB 01 F6 | 	mov	result1, local03
1d430     A7 F0 03 F6 | 	mov	ptra, fp
1d434     B2 00 A0 FD | 	call	#popregs_
1d438                 | _fatfs_cc_move_window_ret
1d438     2D 00 64 FD | 	ret
1d43c                 | 
1d43c                 | _fatfs_cc_sync_fs
1d43c     02 4A 05 F6 | 	mov	COUNT_, #2
1d440     A8 00 A0 FD | 	call	#pushregs_
1d444     09 1F 02 F6 | 	mov	local01, arg01
1d448     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
1d44c     FD 20 0A F6 | 	mov	local02, result1 wz
1d450     D8 00 90 5D |  if_ne	jmp	#LR__3171
1d454     0F 19 C2 FA | 	rdbyte	arg04, local01
1d458     03 18 0E F2 | 	cmp	arg04, #3 wz
1d45c     04 1E 06 A1 |  if_e	add	local01, #4
1d460     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
1d464     04 1E 86 A1 |  if_e	sub	local01, #4
1d468     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
1d46c     A0 00 90 5D |  if_ne	jmp	#LR__3170
1d470     34 1E 06 F1 | 	add	local01, #52
1d474     0F 13 02 F6 | 	mov	arg01, local01
1d478     00 14 06 F6 | 	mov	arg02, #0
1d47c     09 16 C6 F9 | 	decod	arg03, #9
1d480     98 00 A0 FD | 	call	#\builtin_bytefill_
1d484     0F 13 02 F6 | 	mov	arg01, local01
1d488     FE 13 06 F1 | 	add	arg01, #510
1d48c     55 00 80 FF 
1d490     09 AB 58 FC | 	wrword	##43605, arg01
1d494     A9 B0 A0 FF 
1d498     0F A5 68 FC | 	wrlong	##1096897106, local01
1d49c     0F 13 02 F6 | 	mov	arg01, local01
1d4a0     E4 13 06 F1 | 	add	arg01, #484
1d4a4     B9 A0 B0 FF 
1d4a8     09 E5 68 FC | 	wrlong	##1631679090, arg01
1d4ac     0F 13 02 F6 | 	mov	arg01, local01
1d4b0     E8 13 06 F1 | 	add	arg01, #488
1d4b4     20 1E 86 F1 | 	sub	local01, #32
1d4b8     0F 15 02 FB | 	rdlong	arg02, local01
1d4bc     09 15 62 FC | 	wrlong	arg02, arg01
1d4c0     20 1E 06 F1 | 	add	local01, #32
1d4c4     0F 13 02 F6 | 	mov	arg01, local01
1d4c8     EC 13 06 F1 | 	add	arg01, #492
1d4cc     24 1E 86 F1 | 	sub	local01, #36
1d4d0     0F 15 02 FB | 	rdlong	arg02, local01
1d4d4     09 15 62 FC | 	wrlong	arg02, arg01
1d4d8     10 1E 06 F1 | 	add	local01, #16
1d4dc     0F 17 02 FB | 	rdlong	arg03, local01
1d4e0     01 16 06 F1 | 	add	arg03, #1
1d4e4     10 1E 06 F1 | 	add	local01, #16
1d4e8     0F 17 62 FC | 	wrlong	arg03, local01
1d4ec     2F 1E 86 F1 | 	sub	local01, #47
1d4f0     0F 13 C2 FA | 	rdbyte	arg01, local01
1d4f4     33 1E 06 F1 | 	add	local01, #51
1d4f8     0F 15 02 F6 | 	mov	arg02, local01
1d4fc     01 18 06 F6 | 	mov	arg04, #1
1d500     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
1d504     30 1E 86 F1 | 	sub	local01, #48
1d508     0F 01 48 FC | 	wrbyte	#0, local01
1d50c     04 1E 86 F1 | 	sub	local01, #4
1d510                 | LR__3170
1d510     01 1E 06 F1 | 	add	local01, #1
1d514     0F 13 C2 FA | 	rdbyte	arg01, local01
1d518     00 14 06 F6 | 	mov	arg02, #0
1d51c     00 16 06 F6 | 	mov	arg03, #0
1d520     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
1d524     00 FA 0D F2 | 	cmp	result1, #0 wz
1d528     01 20 06 56 |  if_ne	mov	local02, #1
1d52c                 | LR__3171
1d52c                 | ' 	}
1d52c                 | ' 
1d52c                 | ' 	return res;
1d52c     10 FB 01 F6 | 	mov	result1, local02
1d530     A7 F0 03 F6 | 	mov	ptra, fp
1d534     B2 00 A0 FD | 	call	#popregs_
1d538                 | _fatfs_cc_sync_fs_ret
1d538     2D 00 64 FD | 	ret
1d53c                 | 
1d53c                 | _fatfs_cc_clst2sect
1d53c     02 14 86 F1 | 	sub	arg02, #2
1d540     18 12 06 F1 | 	add	arg01, #24
1d544     09 01 02 FB | 	rdlong	_var01, arg01
1d548     18 12 86 F1 | 	sub	arg01, #24
1d54c     02 00 86 F1 | 	sub	_var01, #2
1d550     00 15 12 F2 | 	cmp	arg02, _var01 wc
1d554     00 FA 05 36 |  if_ae	mov	result1, #0
1d558     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
1d55c     0A 12 06 F1 | 	add	arg01, #10
1d560     09 01 E2 FA | 	rdword	_var01, arg01
1d564     0A 01 02 FD | 	qmul	_var01, arg02
1d568                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
1d568     22 12 06 F1 | 	add	arg01, #34
1d56c     09 FB 01 FB | 	rdlong	result1, arg01
1d570     18 00 62 FD | 	getqx	_var01
1d574     00 FB 01 F1 | 	add	result1, _var01
1d578                 | _fatfs_cc_clst2sect_ret
1d578     2D 00 64 FD | 	ret
1d57c                 | 
1d57c                 | _fatfs_cc_get_fat
1d57c     07 4A 05 F6 | 	mov	COUNT_, #7
1d580     A8 00 A0 FD | 	call	#pushregs_
1d584     0A 1F 02 F6 | 	mov	local01, arg02
1d588     09 21 02 FB | 	rdlong	local02, arg01
1d58c     02 1E 16 F2 | 	cmp	local01, #2 wc
1d590     14 00 90 CD |  if_b	jmp	#LR__3180
1d594     18 20 06 F1 | 	add	local02, #24
1d598     10 23 02 FB | 	rdlong	local03, local02
1d59c     18 20 86 F1 | 	sub	local02, #24
1d5a0     11 1F 12 F2 | 	cmp	local01, local03 wc
1d5a4     08 00 90 CD |  if_b	jmp	#LR__3181
1d5a8                 | LR__3180
1d5a8     01 24 06 F6 | 	mov	local04, #1
1d5ac     60 01 90 FD | 	jmp	#LR__3188
1d5b0                 | LR__3181
1d5b0     01 24 66 F6 | 	neg	local04, #1
1d5b4                 | ' 		val = 0xFFFFFFFF;
1d5b4                 | ' 
1d5b4                 | ' 		switch (fs->fs_type) {
1d5b4     10 27 C2 FA | 	rdbyte	local05, local02
1d5b8     01 26 86 F1 | 	sub	local05, #1
1d5bc     03 26 26 F3 | 	fle	local05, #3
1d5c0     30 26 62 FD | 	jmprel	local05
1d5c4                 | LR__3182
1d5c4     0C 00 90 FD | 	jmp	#LR__3183
1d5c8     B8 00 90 FD | 	jmp	#LR__3184
1d5cc     F8 00 90 FD | 	jmp	#LR__3185
1d5d0     38 01 90 FD | 	jmp	#LR__3186
1d5d4                 | LR__3183
1d5d4     0F 27 02 F6 | 	mov	local05, local01
1d5d8     0F 13 02 F6 | 	mov	arg01, local01
1d5dc     01 12 46 F0 | 	shr	arg01, #1
1d5e0     09 27 02 F1 | 	add	local05, arg01
1d5e4     10 13 02 F6 | 	mov	arg01, local02
1d5e8     13 29 02 F6 | 	mov	local06, local05
1d5ec     09 28 46 F0 | 	shr	local06, #9
1d5f0     24 20 06 F1 | 	add	local02, #36
1d5f4     10 15 02 FB | 	rdlong	arg02, local02
1d5f8     24 20 86 F1 | 	sub	local02, #36
1d5fc     14 15 02 F1 | 	add	arg02, local06
1d600     C0 FD BF FD | 	call	#_fatfs_cc_move_window
1d604     00 FA 0D F2 | 	cmp	result1, #0 wz
1d608     04 01 90 5D |  if_ne	jmp	#LR__3187
1d60c     13 29 02 F6 | 	mov	local06, local05
1d610     FF 29 06 F5 | 	and	local06, #511
1d614     34 20 06 F1 | 	add	local02, #52
1d618     10 29 02 F1 | 	add	local06, local02
1d61c     14 2B C2 FA | 	rdbyte	local07, local06
1d620     34 20 86 F1 | 	sub	local02, #52
1d624     10 13 02 F6 | 	mov	arg01, local02
1d628     01 26 06 F1 | 	add	local05, #1
1d62c     13 29 02 F6 | 	mov	local06, local05
1d630     09 28 46 F0 | 	shr	local06, #9
1d634     24 20 06 F1 | 	add	local02, #36
1d638     10 15 02 FB | 	rdlong	arg02, local02
1d63c     24 20 86 F1 | 	sub	local02, #36
1d640     14 15 02 F1 | 	add	arg02, local06
1d644     7C FD BF FD | 	call	#_fatfs_cc_move_window
1d648     00 FA 0D F2 | 	cmp	result1, #0 wz
1d64c     C0 00 90 5D |  if_ne	jmp	#LR__3187
1d650     FF 27 06 F5 | 	and	local05, #511
1d654     34 20 06 F1 | 	add	local02, #52
1d658     10 27 02 F1 | 	add	local05, local02
1d65c     13 29 C2 FA | 	rdbyte	local06, local05
1d660     08 28 66 F0 | 	shl	local06, #8
1d664     14 2B 42 F5 | 	or	local07, local06
1d668     01 1E CE F7 | 	test	local01, #1 wz
1d66c     04 2A 46 50 |  if_ne	shr	local07, #4
1d670     15 23 02 56 |  if_ne	mov	local03, local07
1d674     0B 2A 46 A7 |  if_e	zerox	local07, #11
1d678     15 23 02 A6 |  if_e	mov	local03, local07
1d67c     11 25 02 F6 | 	mov	local04, local03
1d680                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
1d680                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1d680                 | ' 			break;
1d680     8C 00 90 FD | 	jmp	#LR__3187
1d684                 | LR__3184
1d684     10 13 02 F6 | 	mov	arg01, local02
1d688     0F 29 02 F6 | 	mov	local06, local01
1d68c     08 28 46 F0 | 	shr	local06, #8
1d690     24 20 06 F1 | 	add	local02, #36
1d694     10 15 02 FB | 	rdlong	arg02, local02
1d698     24 20 86 F1 | 	sub	local02, #36
1d69c     14 15 02 F1 | 	add	arg02, local06
1d6a0     20 FD BF FD | 	call	#_fatfs_cc_move_window
1d6a4     00 FA 0D F2 | 	cmp	result1, #0 wz
1d6a8     64 00 90 5D |  if_ne	jmp	#LR__3187
1d6ac     34 20 06 F1 | 	add	local02, #52
1d6b0     01 1E 66 F0 | 	shl	local01, #1
1d6b4     FF 1F 06 F5 | 	and	local01, #511
1d6b8     0F 21 02 F1 | 	add	local02, local01
1d6bc                 | ' {
1d6bc                 | ' 
1d6bc                 | ' 	return *((WORD*)ptr);
1d6bc     10 FB E1 FA | 	rdword	result1, local02
1d6c0     FD 24 32 F9 | 	getword	local04, result1, #0
1d6c4                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
1d6c4                 | ' 			break;
1d6c4     48 00 90 FD | 	jmp	#LR__3187
1d6c8                 | LR__3185
1d6c8     10 13 02 F6 | 	mov	arg01, local02
1d6cc     0F 29 02 F6 | 	mov	local06, local01
1d6d0     07 28 46 F0 | 	shr	local06, #7
1d6d4     24 20 06 F1 | 	add	local02, #36
1d6d8     10 15 02 FB | 	rdlong	arg02, local02
1d6dc     24 20 86 F1 | 	sub	local02, #36
1d6e0     14 15 02 F1 | 	add	arg02, local06
1d6e4     DC FC BF FD | 	call	#_fatfs_cc_move_window
1d6e8     00 FA 0D F2 | 	cmp	result1, #0 wz
1d6ec     20 00 90 5D |  if_ne	jmp	#LR__3187
1d6f0     34 20 06 F1 | 	add	local02, #52
1d6f4     02 1E 66 F0 | 	shl	local01, #2
1d6f8     FF 1F 06 F5 | 	and	local01, #511
1d6fc     0F 21 02 F1 | 	add	local02, local01
1d700                 | ' {
1d700                 | ' 
1d700                 | ' 	return *((DWORD*)ptr);
1d700     10 25 02 FB | 	rdlong	local04, local02
1d704     7C 24 06 F4 | 	bitl	local04, #124
1d708                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
1d708                 | ' 			break;
1d708     04 00 90 FD | 	jmp	#LR__3187
1d70c                 | LR__3186
1d70c     01 24 06 F6 | 	mov	local04, #1
1d710                 | LR__3187
1d710                 | LR__3188
1d710                 | ' 			val = 1;
1d710                 | ' 		}
1d710                 | ' 	}
1d710                 | ' 
1d710                 | ' 	return val;
1d710     12 FB 01 F6 | 	mov	result1, local04
1d714     A7 F0 03 F6 | 	mov	ptra, fp
1d718     B2 00 A0 FD | 	call	#popregs_
1d71c                 | _fatfs_cc_get_fat_ret
1d71c     2D 00 64 FD | 	ret
1d720                 | 
1d720                 | _fatfs_cc_put_fat
1d720     08 4A 05 F6 | 	mov	COUNT_, #8
1d724     A8 00 A0 FD | 	call	#pushregs_
1d728     09 1F 02 F6 | 	mov	local01, arg01
1d72c     0A 21 02 F6 | 	mov	local02, arg02
1d730     0B 23 02 F6 | 	mov	local03, arg03
1d734     02 24 06 F6 | 	mov	local04, #2
1d738     02 20 16 F2 | 	cmp	local02, #2 wc
1d73c     E0 01 90 CD |  if_b	jmp	#LR__3197
1d740     18 1E 06 F1 | 	add	local01, #24
1d744     0F 27 02 FB | 	rdlong	local05, local01
1d748     18 1E 86 F1 | 	sub	local01, #24
1d74c     13 21 12 F2 | 	cmp	local02, local05 wc
1d750     CC 01 90 3D |  if_ae	jmp	#LR__3197
1d754                 | ' 		switch (fs->fs_type) {
1d754     0F 29 C2 FA | 	rdbyte	local06, local01
1d758     01 28 86 F1 | 	sub	local06, #1
1d75c     03 28 26 F3 | 	fle	local06, #3
1d760     30 28 62 FD | 	jmprel	local06
1d764                 | LR__3190
1d764     0C 00 90 FD | 	jmp	#LR__3191
1d768     F8 00 90 FD | 	jmp	#LR__3194
1d76c     40 01 90 FD | 	jmp	#LR__3195
1d770     AC 01 90 FD | 	jmp	#LR__3196
1d774                 | LR__3191
1d774     10 2B 02 F6 | 	mov	local07, local02
1d778     10 27 02 F6 | 	mov	local05, local02
1d77c     01 26 46 F0 | 	shr	local05, #1
1d780     13 2B 02 F1 | 	add	local07, local05
1d784     0F 13 02 F6 | 	mov	arg01, local01
1d788     15 29 02 F6 | 	mov	local06, local07
1d78c     09 28 46 F0 | 	shr	local06, #9
1d790     24 1E 06 F1 | 	add	local01, #36
1d794     0F 15 02 FB | 	rdlong	arg02, local01
1d798     24 1E 86 F1 | 	sub	local01, #36
1d79c     14 15 02 F1 | 	add	arg02, local06
1d7a0     20 FC BF FD | 	call	#_fatfs_cc_move_window
1d7a4     FD 24 0A F6 | 	mov	local04, result1 wz
1d7a8     74 01 90 5D |  if_ne	jmp	#LR__3196
1d7ac     34 1E 06 F1 | 	add	local01, #52
1d7b0     0F 2D 02 F6 | 	mov	local08, local01
1d7b4     15 27 02 F6 | 	mov	local05, local07
1d7b8     FF 27 06 F5 | 	and	local05, #511
1d7bc     13 2D 02 F1 | 	add	local08, local05
1d7c0     01 20 CE F7 | 	test	local02, #1 wz
1d7c4     34 1E 86 F1 | 	sub	local01, #52
1d7c8     01 2A 06 F1 | 	add	local07, #1
1d7cc     18 00 90 AD |  if_e	jmp	#LR__3192
1d7d0     16 27 C2 FA | 	rdbyte	local05, local08
1d7d4     13 27 42 F8 | 	getnib	local05, local05, #0
1d7d8     11 29 E2 F8 | 	getbyte	local06, local03, #0
1d7dc     04 28 66 F0 | 	shl	local06, #4
1d7e0     14 27 42 F5 | 	or	local05, local06
1d7e4     04 00 90 FD | 	jmp	#LR__3193
1d7e8                 | LR__3192
1d7e8     11 27 02 F6 | 	mov	local05, local03
1d7ec                 | LR__3193
1d7ec     16 27 42 FC | 	wrbyte	local05, local08
1d7f0     03 1E 06 F1 | 	add	local01, #3
1d7f4     0F 03 48 FC | 	wrbyte	#1, local01
1d7f8     03 1E 86 F1 | 	sub	local01, #3
1d7fc     0F 13 02 F6 | 	mov	arg01, local01
1d800     15 2D 02 F6 | 	mov	local08, local07
1d804     09 2C 46 F0 | 	shr	local08, #9
1d808     24 1E 06 F1 | 	add	local01, #36
1d80c     0F 15 02 FB | 	rdlong	arg02, local01
1d810     24 1E 86 F1 | 	sub	local01, #36
1d814     16 15 02 F1 | 	add	arg02, local08
1d818     A8 FB BF FD | 	call	#_fatfs_cc_move_window
1d81c     FD 24 0A F6 | 	mov	local04, result1 wz
1d820     FC 00 90 5D |  if_ne	jmp	#LR__3196
1d824     34 1E 06 F1 | 	add	local01, #52
1d828     0F 2D 02 F6 | 	mov	local08, local01
1d82c     FF 2B 06 F5 | 	and	local07, #511
1d830     15 2D 02 F1 | 	add	local08, local07
1d834     01 20 CE F7 | 	test	local02, #1 wz
1d838     04 22 46 50 |  if_ne	shr	local03, #4
1d83c     11 27 02 56 |  if_ne	mov	local05, local03
1d840     16 27 C2 AA |  if_e	rdbyte	local05, local08
1d844     F0 26 06 A5 |  if_e	and	local05, #240
1d848     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
1d84c     11 23 42 A8 |  if_e	getnib	local03, local03, #0
1d850     11 27 42 A5 |  if_e	or	local05, local03
1d854     16 27 42 FC | 	wrbyte	local05, local08
1d858     31 1E 86 F1 | 	sub	local01, #49
1d85c     0F 03 48 FC | 	wrbyte	#1, local01
1d860                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
1d860                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1d860                 | ' 			fs->wflag = 1;
1d860                 | ' 			break;
1d860     BC 00 90 FD | 	jmp	#LR__3196
1d864                 | LR__3194
1d864     0F 13 02 F6 | 	mov	arg01, local01
1d868     10 2D 02 F6 | 	mov	local08, local02
1d86c     08 2C 46 F0 | 	shr	local08, #8
1d870     24 1E 06 F1 | 	add	local01, #36
1d874     0F 15 02 FB | 	rdlong	arg02, local01
1d878     24 1E 86 F1 | 	sub	local01, #36
1d87c     16 15 02 F1 | 	add	arg02, local08
1d880     40 FB BF FD | 	call	#_fatfs_cc_move_window
1d884     FD 24 0A F6 | 	mov	local04, result1 wz
1d888     94 00 90 5D |  if_ne	jmp	#LR__3196
1d88c     34 1E 06 F1 | 	add	local01, #52
1d890     0F 13 02 F6 | 	mov	arg01, local01
1d894     01 20 66 F0 | 	shl	local02, #1
1d898     FF 21 06 F5 | 	and	local02, #511
1d89c     10 13 02 F1 | 	add	arg01, local02
1d8a0     09 23 52 FC | 	wrword	local03, arg01
1d8a4     31 1E 86 F1 | 	sub	local01, #49
1d8a8     0F 03 48 FC | 	wrbyte	#1, local01
1d8ac                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
1d8ac                 | ' 			fs->wflag = 1;
1d8ac                 | ' 			break;
1d8ac     70 00 90 FD | 	jmp	#LR__3196
1d8b0                 | LR__3195
1d8b0     0F 13 02 F6 | 	mov	arg01, local01
1d8b4     10 2D 02 F6 | 	mov	local08, local02
1d8b8     07 2C 46 F0 | 	shr	local08, #7
1d8bc     24 1E 06 F1 | 	add	local01, #36
1d8c0     0F 15 02 FB | 	rdlong	arg02, local01
1d8c4     24 1E 86 F1 | 	sub	local01, #36
1d8c8     16 15 02 F1 | 	add	arg02, local08
1d8cc     F4 FA BF FD | 	call	#_fatfs_cc_move_window
1d8d0     FD 24 0A F6 | 	mov	local04, result1 wz
1d8d4     48 00 90 5D |  if_ne	jmp	#LR__3196
1d8d8     7C 22 06 F4 | 	bitl	local03, #124
1d8dc     34 1E 06 F1 | 	add	local01, #52
1d8e0     10 2D 02 F6 | 	mov	local08, local02
1d8e4     02 2C 66 F0 | 	shl	local08, #2
1d8e8     FF 2D 06 F5 | 	and	local08, #511
1d8ec     0F 13 02 F6 | 	mov	arg01, local01
1d8f0     16 13 02 F1 | 	add	arg01, local08
1d8f4                 | ' {
1d8f4                 | ' 
1d8f4                 | ' 	return *((DWORD*)ptr);
1d8f4     09 2D 02 FB | 	rdlong	local08, arg01
1d8f8     00 00 78 FF 
1d8fc     00 2C 06 F5 | 	and	local08, ##-268435456
1d900     16 23 42 F5 | 	or	local03, local08
1d904     0F 13 02 F6 | 	mov	arg01, local01
1d908     02 20 66 F0 | 	shl	local02, #2
1d90c     FF 21 06 F5 | 	and	local02, #511
1d910     10 13 02 F1 | 	add	arg01, local02
1d914     09 23 62 FC | 	wrlong	local03, arg01
1d918     31 1E 86 F1 | 	sub	local01, #49
1d91c     0F 03 48 FC | 	wrbyte	#1, local01
1d920                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
1d920                 | ' 			}
1d920                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
1d920                 | ' 			fs->wflag = 1;
1d920                 | ' 			break;
1d920                 | LR__3196
1d920                 | LR__3197
1d920                 | ' 		}
1d920                 | ' 	}
1d920                 | ' 	return res;
1d920     12 FB 01 F6 | 	mov	result1, local04
1d924     A7 F0 03 F6 | 	mov	ptra, fp
1d928     B2 00 A0 FD | 	call	#popregs_
1d92c                 | _fatfs_cc_put_fat_ret
1d92c     2D 00 64 FD | 	ret
1d930                 | 
1d930                 | _fatfs_cc_remove_chain
1d930     05 4A 05 F6 | 	mov	COUNT_, #5
1d934     A8 00 A0 FD | 	call	#pushregs_
1d938     09 1F 02 F6 | 	mov	local01, arg01
1d93c     0A 21 02 F6 | 	mov	local02, arg02
1d940     0B 23 02 F6 | 	mov	local03, arg03
1d944     0F 25 02 FB | 	rdlong	local04, local01
1d948     02 20 16 F2 | 	cmp	local02, #2 wc
1d94c     14 00 90 CD |  if_b	jmp	#LR__3200
1d950     18 24 06 F1 | 	add	local04, #24
1d954     12 FB 01 FB | 	rdlong	result1, local04
1d958     18 24 86 F1 | 	sub	local04, #24
1d95c     FD 20 12 F2 | 	cmp	local02, result1 wc
1d960     08 00 90 CD |  if_b	jmp	#LR__3201
1d964                 | LR__3200
1d964     02 FA 05 F6 | 	mov	result1, #2
1d968     CC 00 90 FD | 	jmp	#LR__3206
1d96c                 | LR__3201
1d96c     00 22 0E F2 | 	cmp	local03, #0 wz
1d970     18 00 90 AD |  if_e	jmp	#LR__3202
1d974     11 15 02 F6 | 	mov	arg02, local03
1d978     12 13 02 F6 | 	mov	arg01, local04
1d97c     01 16 66 F6 | 	neg	arg03, #1
1d980     9C FD BF FD | 	call	#_fatfs_cc_put_fat
1d984     00 FA 0D F2 | 	cmp	result1, #0 wz
1d988     AC 00 90 5D |  if_ne	jmp	#LR__3206
1d98c                 | LR__3202
1d98c                 | ' 	}
1d98c                 | ' 
1d98c                 | ' 
1d98c                 | ' 	do {
1d98c                 | LR__3203
1d98c     10 15 02 F6 | 	mov	arg02, local02
1d990     0F 13 02 F6 | 	mov	arg01, local01
1d994     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
1d998     FD 26 0A F6 | 	mov	local05, result1 wz
1d99c     94 00 90 AD |  if_e	jmp	#LR__3205
1d9a0     01 26 0E F2 | 	cmp	local05, #1 wz
1d9a4     02 FA 05 A6 |  if_e	mov	result1, #2
1d9a8     8C 00 90 AD |  if_e	jmp	#LR__3206
1d9ac     FF FF 7F FF 
1d9b0     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1d9b4     01 FA 05 A6 |  if_e	mov	result1, #1
1d9b8     7C 00 90 AD |  if_e	jmp	#LR__3206
1d9bc     10 15 02 F6 | 	mov	arg02, local02
1d9c0     12 13 02 F6 | 	mov	arg01, local04
1d9c4     00 16 06 F6 | 	mov	arg03, #0
1d9c8     54 FD BF FD | 	call	#_fatfs_cc_put_fat
1d9cc     FD 22 0A F6 | 	mov	local03, result1 wz
1d9d0     11 FB 01 56 |  if_ne	mov	result1, local03
1d9d4     60 00 90 5D |  if_ne	jmp	#LR__3206
1d9d8     18 24 06 F1 | 	add	local04, #24
1d9dc     12 23 02 FB | 	rdlong	local03, local04
1d9e0     02 22 86 F1 | 	sub	local03, #2
1d9e4     04 24 86 F1 | 	sub	local04, #4
1d9e8     12 21 02 FB | 	rdlong	local02, local04
1d9ec     14 24 86 F1 | 	sub	local04, #20
1d9f0     11 21 12 F2 | 	cmp	local02, local03 wc
1d9f4     24 00 90 3D |  if_ae	jmp	#LR__3204
1d9f8     14 24 06 F1 | 	add	local04, #20
1d9fc     12 23 02 FB | 	rdlong	local03, local04
1da00     01 22 06 F1 | 	add	local03, #1
1da04     12 23 62 FC | 	wrlong	local03, local04
1da08     10 24 86 F1 | 	sub	local04, #16
1da0c     12 23 C2 FA | 	rdbyte	local03, local04
1da10     01 22 46 F5 | 	or	local03, #1
1da14     12 23 42 FC | 	wrbyte	local03, local04
1da18     04 24 86 F1 | 	sub	local04, #4
1da1c                 | LR__3204
1da1c     13 21 02 F6 | 	mov	local02, local05
1da20     18 24 06 F1 | 	add	local04, #24
1da24     12 27 02 FB | 	rdlong	local05, local04
1da28     18 24 86 F1 | 	sub	local04, #24
1da2c     13 21 12 F2 | 	cmp	local02, local05 wc
1da30     58 FF 9F CD |  if_b	jmp	#LR__3203
1da34                 | LR__3205
1da34                 | ' #line 1500 "ff.c"
1da34                 | ' 	return FR_OK;
1da34     00 FA 05 F6 | 	mov	result1, #0
1da38                 | LR__3206
1da38     A7 F0 03 F6 | 	mov	ptra, fp
1da3c     B2 00 A0 FD | 	call	#popregs_
1da40                 | _fatfs_cc_remove_chain_ret
1da40     2D 00 64 FD | 	ret
1da44                 | 
1da44                 | _fatfs_cc_create_chain
1da44     09 4A 05 F6 | 	mov	COUNT_, #9
1da48     A8 00 A0 FD | 	call	#pushregs_
1da4c     09 1F 02 F6 | 	mov	local01, arg01
1da50     0A 21 0A F6 | 	mov	local02, arg02 wz
1da54     0F 23 02 FB | 	rdlong	local03, local01
1da58     28 00 90 5D |  if_ne	jmp	#LR__3210
1da5c     10 22 06 F1 | 	add	local03, #16
1da60     11 25 0A FB | 	rdlong	local04, local03 wz
1da64     10 22 86 F1 | 	sub	local03, #16
1da68     18 22 06 51 |  if_ne	add	local03, #24
1da6c     11 27 02 5B |  if_ne	rdlong	local05, local03
1da70     18 22 86 51 |  if_ne	sub	local03, #24
1da74     13 25 12 52 |  if_ne	cmp	local04, local05 wc
1da78     50 00 90 4D |  if_c_and_nz	jmp	#LR__3211
1da7c     01 24 06 F6 | 	mov	local04, #1
1da80     48 00 90 FD | 	jmp	#LR__3211
1da84                 | LR__3210
1da84     10 15 02 F6 | 	mov	arg02, local02
1da88     0F 13 02 F6 | 	mov	arg01, local01
1da8c     EC FA BF FD | 	call	#_fatfs_cc_get_fat
1da90     FD 24 02 F6 | 	mov	local04, result1
1da94     02 24 16 F2 | 	cmp	local04, #2 wc
1da98     01 FA 05 C6 |  if_b	mov	result1, #1
1da9c     BC 01 90 CD |  if_b	jmp	#LR__3221
1daa0     FF FF 7F FF 
1daa4     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1daa8     12 FB 01 A6 |  if_e	mov	result1, local04
1daac     AC 01 90 AD |  if_e	jmp	#LR__3221
1dab0     18 22 06 F1 | 	add	local03, #24
1dab4     11 27 02 FB | 	rdlong	local05, local03
1dab8     18 22 86 F1 | 	sub	local03, #24
1dabc     13 25 12 F2 | 	cmp	local04, local05 wc
1dac0     12 FB 01 C6 |  if_b	mov	result1, local04
1dac4     94 01 90 CD |  if_b	jmp	#LR__3221
1dac8     10 25 02 F6 | 	mov	local04, local02
1dacc                 | LR__3211
1dacc     14 22 06 F1 | 	add	local03, #20
1dad0     11 27 0A FB | 	rdlong	local05, local03 wz
1dad4     14 22 86 F1 | 	sub	local03, #20
1dad8     00 FA 05 A6 |  if_e	mov	result1, #0
1dadc     7C 01 90 AD |  if_e	jmp	#LR__3221
1dae0     00 28 06 F6 | 	mov	local06, #0
1dae4     10 25 0A F2 | 	cmp	local04, local02 wz
1dae8     74 00 90 5D |  if_ne	jmp	#LR__3214
1daec     12 29 02 F6 | 	mov	local06, local04
1daf0     01 28 06 F1 | 	add	local06, #1
1daf4     18 22 06 F1 | 	add	local03, #24
1daf8     11 27 02 FB | 	rdlong	local05, local03
1dafc     18 22 86 F1 | 	sub	local03, #24
1db00     13 29 12 F2 | 	cmp	local06, local05 wc
1db04     02 28 06 36 |  if_ae	mov	local06, #2
1db08     14 15 02 F6 | 	mov	arg02, local06
1db0c     0F 13 02 F6 | 	mov	arg01, local01
1db10     68 FA BF FD | 	call	#_fatfs_cc_get_fat
1db14     FD 26 02 F6 | 	mov	local05, result1
1db18     01 26 0E F2 | 	cmp	local05, #1 wz
1db1c     FF FF 7F 5F 
1db20     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
1db24     13 FB 01 A6 |  if_e	mov	result1, local05
1db28     30 01 90 AD |  if_e	jmp	#LR__3221
1db2c     00 26 0E F2 | 	cmp	local05, #0 wz
1db30     2C 00 90 AD |  if_e	jmp	#LR__3213
1db34     10 22 06 F1 | 	add	local03, #16
1db38     11 2B 02 FB | 	rdlong	local07, local03
1db3c     10 22 86 F1 | 	sub	local03, #16
1db40     02 2A 16 F2 | 	cmp	local07, #2 wc
1db44     14 00 90 CD |  if_b	jmp	#LR__3212
1db48     18 22 06 F1 | 	add	local03, #24
1db4c     11 27 02 FB | 	rdlong	local05, local03
1db50     18 22 86 F1 | 	sub	local03, #24
1db54     13 2B 12 F2 | 	cmp	local07, local05 wc
1db58     15 25 02 C6 |  if_b	mov	local04, local07
1db5c                 | LR__3212
1db5c     00 28 06 F6 | 	mov	local06, #0
1db60                 | LR__3213
1db60                 | LR__3214
1db60     00 28 0E F2 | 	cmp	local06, #0 wz
1db64     60 00 90 5D |  if_ne	jmp	#LR__3217
1db68     12 29 02 F6 | 	mov	local06, local04
1db6c                 | ' 			ncl = scl;
1db6c                 | ' 			for (;;) {
1db6c                 | LR__3215
1db6c     01 28 06 F1 | 	add	local06, #1
1db70     18 22 06 F1 | 	add	local03, #24
1db74     11 27 02 FB | 	rdlong	local05, local03
1db78     18 22 86 F1 | 	sub	local03, #24
1db7c     13 29 12 F2 | 	cmp	local06, local05 wc
1db80     02 28 06 36 |  if_ae	mov	local06, #2
1db84     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
1db88     00 FA 05 16 |  if_a	mov	result1, #0
1db8c     CC 00 90 1D |  if_a	jmp	#LR__3221
1db90     14 15 02 F6 | 	mov	arg02, local06
1db94     0F 13 02 F6 | 	mov	arg01, local01
1db98     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
1db9c     FD 2A 0A F6 | 	mov	local07, result1 wz
1dba0     24 00 90 AD |  if_e	jmp	#LR__3216
1dba4     01 2A 0E F2 | 	cmp	local07, #1 wz
1dba8     FF FF 7F 5F 
1dbac     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
1dbb0     15 FB 01 A6 |  if_e	mov	result1, local07
1dbb4     A4 00 90 AD |  if_e	jmp	#LR__3221
1dbb8     12 29 0A F2 | 	cmp	local06, local04 wz
1dbbc     00 FA 05 A6 |  if_e	mov	result1, #0
1dbc0     98 00 90 AD |  if_e	jmp	#LR__3221
1dbc4     A4 FF 9F FD | 	jmp	#LR__3215
1dbc8                 | LR__3216
1dbc8                 | LR__3217
1dbc8     11 13 02 F6 | 	mov	arg01, local03
1dbcc     14 15 02 F6 | 	mov	arg02, local06
1dbd0     01 16 66 F6 | 	neg	arg03, #1
1dbd4     48 FB BF FD | 	call	#_fatfs_cc_put_fat
1dbd8     FD 2C 0A F6 | 	mov	local08, result1 wz
1dbdc     1C 00 90 5D |  if_ne	jmp	#LR__3218
1dbe0     00 20 0E F2 | 	cmp	local02, #0 wz
1dbe4     14 00 90 AD |  if_e	jmp	#LR__3218
1dbe8     11 13 02 F6 | 	mov	arg01, local03
1dbec     10 15 02 F6 | 	mov	arg02, local02
1dbf0     14 17 02 F6 | 	mov	arg03, local06
1dbf4     28 FB BF FD | 	call	#_fatfs_cc_put_fat
1dbf8     FD 2C 02 F6 | 	mov	local08, result1
1dbfc                 | LR__3218
1dbfc     00 2C 0E F2 | 	cmp	local08, #0 wz
1dc00     4C 00 90 5D |  if_ne	jmp	#LR__3219
1dc04     10 22 06 F1 | 	add	local03, #16
1dc08     11 29 62 FC | 	wrlong	local06, local03
1dc0c     08 22 06 F1 | 	add	local03, #8
1dc10     11 27 02 FB | 	rdlong	local05, local03
1dc14     02 26 86 F1 | 	sub	local05, #2
1dc18     04 22 86 F1 | 	sub	local03, #4
1dc1c     11 2F 02 FB | 	rdlong	local09, local03
1dc20     14 22 86 F1 | 	sub	local03, #20
1dc24     13 2F 1A F2 | 	cmp	local09, local05 wcz
1dc28     14 22 06 E1 |  if_be	add	local03, #20
1dc2c     11 2F 02 EB |  if_be	rdlong	local09, local03
1dc30     01 2E 86 E1 |  if_be	sub	local09, #1
1dc34     11 2F 62 EC |  if_be	wrlong	local09, local03
1dc38     14 22 86 E1 |  if_be	sub	local03, #20
1dc3c     04 22 06 F1 | 	add	local03, #4
1dc40     11 27 C2 FA | 	rdbyte	local05, local03
1dc44     01 26 46 F5 | 	or	local05, #1
1dc48     11 27 42 FC | 	wrbyte	local05, local03
1dc4c     08 00 90 FD | 	jmp	#LR__3220
1dc50                 | LR__3219
1dc50     01 2C 0E F2 | 	cmp	local08, #1 wz
1dc54     01 28 C6 F6 | 	negz	local06, #1
1dc58                 | LR__3220
1dc58                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
1dc58                 | ' 	}
1dc58                 | ' 
1dc58                 | ' 	return ncl;
1dc58     14 FB 01 F6 | 	mov	result1, local06
1dc5c                 | LR__3221
1dc5c     A7 F0 03 F6 | 	mov	ptra, fp
1dc60     B2 00 A0 FD | 	call	#popregs_
1dc64                 | _fatfs_cc_create_chain_ret
1dc64     2D 00 64 FD | 	ret
1dc68                 | 
1dc68                 | _fatfs_cc_dir_clear
1dc68     06 4A 05 F6 | 	mov	COUNT_, #6
1dc6c     A8 00 A0 FD | 	call	#pushregs_
1dc70     09 1F 02 F6 | 	mov	local01, arg01
1dc74     0A 21 02 F6 | 	mov	local02, arg02
1dc78     0F 13 02 F6 | 	mov	arg01, local01
1dc7c     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
1dc80     00 FA 0D F2 | 	cmp	result1, #0 wz
1dc84     01 FA 05 56 |  if_ne	mov	result1, #1
1dc88     90 00 90 5D |  if_ne	jmp	#LR__3232
1dc8c     0F 13 02 F6 | 	mov	arg01, local01
1dc90     10 15 02 F6 | 	mov	arg02, local02
1dc94     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
1dc98     FD 22 02 F6 | 	mov	local03, result1
1dc9c     30 1E 06 F1 | 	add	local01, #48
1dca0     0F 23 62 FC | 	wrlong	local03, local01
1dca4     04 1E 06 F1 | 	add	local01, #4
1dca8     0F 13 02 F6 | 	mov	arg01, local01
1dcac     00 14 06 F6 | 	mov	arg02, #0
1dcb0     09 16 C6 F9 | 	decod	arg03, #9
1dcb4     98 00 A0 FD | 	call	#\builtin_bytefill_
1dcb8     0F 25 02 F6 | 	mov	local04, local01
1dcbc                 | ' #line 1667 "ff.c"
1dcbc                 | ' 	{
1dcbc                 | ' 		ibuf = fs->win; szb = 1;
1dcbc                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
1dcbc     00 26 06 F6 | 	mov	local05, #0
1dcc0     34 1E 86 F1 | 	sub	local01, #52
1dcc4                 | LR__3230
1dcc4     0A 1E 06 F1 | 	add	local01, #10
1dcc8     0F 29 E2 FA | 	rdword	local06, local01
1dccc     0A 1E 86 F1 | 	sub	local01, #10
1dcd0     14 27 12 F2 | 	cmp	local05, local06 wc
1dcd4     2C 00 90 3D |  if_ae	jmp	#LR__3231
1dcd8     01 1E 06 F1 | 	add	local01, #1
1dcdc     0F 13 C2 FA | 	rdbyte	arg01, local01
1dce0     01 1E 86 F1 | 	sub	local01, #1
1dce4     12 15 02 F6 | 	mov	arg02, local04
1dce8     11 17 02 F6 | 	mov	arg03, local03
1dcec     13 17 02 F1 | 	add	arg03, local05
1dcf0     01 18 06 F6 | 	mov	arg04, #1
1dcf4     9C EF BF FD | 	call	#_fatfs_cc_disk_write
1dcf8     00 FA 0D F2 | 	cmp	result1, #0 wz
1dcfc     01 26 06 A1 |  if_e	add	local05, #1
1dd00     C0 FF 9F AD |  if_e	jmp	#LR__3230
1dd04                 | LR__3231
1dd04                 | ' 	}
1dd04                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
1dd04     0A 1E 06 F1 | 	add	local01, #10
1dd08     0F 25 E2 FA | 	rdword	local04, local01
1dd0c     12 27 0A F2 | 	cmp	local05, local04 wz
1dd10     00 28 06 A6 |  if_e	mov	local06, #0
1dd14     01 28 06 56 |  if_ne	mov	local06, #1
1dd18     14 FB 01 F6 | 	mov	result1, local06
1dd1c                 | LR__3232
1dd1c     A7 F0 03 F6 | 	mov	ptra, fp
1dd20     B2 00 A0 FD | 	call	#popregs_
1dd24                 | _fatfs_cc_dir_clear_ret
1dd24     2D 00 64 FD | 	ret
1dd28                 | 
1dd28                 | _fatfs_cc_dir_sdi
1dd28     06 4A 05 F6 | 	mov	COUNT_, #6
1dd2c     A8 00 A0 FD | 	call	#pushregs_
1dd30     09 1F 02 F6 | 	mov	local01, arg01
1dd34     0A 21 02 F6 | 	mov	local02, arg02
1dd38     0F 23 02 FB | 	rdlong	local03, local01
1dd3c     00 10 00 FF 
1dd40     00 20 16 F2 | 	cmp	local02, ##2097152 wc
1dd44     1F 20 CE C7 |  if_b	test	local02, #31 wz
1dd48                 | ' 		return FR_INT_ERR;
1dd48     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
1dd4c     34 01 90 7D |  if_nc_or_nz	jmp	#LR__3246
1dd50     10 1E 06 F1 | 	add	local01, #16
1dd54     0F 21 62 FC | 	wrlong	local02, local01
1dd58     08 1E 86 F1 | 	sub	local01, #8
1dd5c     0F 25 0A FB | 	rdlong	local04, local01 wz
1dd60     08 1E 86 F1 | 	sub	local01, #8
1dd64     11 27 C2 AA |  if_e	rdbyte	local05, local03
1dd68     03 26 16 A2 |  if_e	cmp	local05, #3 wc
1dd6c     28 22 06 21 |  if_nc_and_z	add	local03, #40
1dd70     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
1dd74     28 22 86 21 |  if_nc_and_z	sub	local03, #40
1dd78     00 24 0E F2 | 	cmp	local04, #0 wz
1dd7c     3C 00 90 5D |  if_ne	jmp	#LR__3240
1dd80     10 27 02 F6 | 	mov	local05, local02
1dd84     05 26 46 F0 | 	shr	local05, #5
1dd88     08 22 06 F1 | 	add	local03, #8
1dd8c     11 15 E2 FA | 	rdword	arg02, local03
1dd90     08 22 86 F1 | 	sub	local03, #8
1dd94     0A 27 12 F2 | 	cmp	local05, arg02 wc
1dd98     02 FA 05 36 |  if_ae	mov	result1, #2
1dd9c     E4 00 90 3D |  if_ae	jmp	#LR__3246
1dda0     28 22 06 F1 | 	add	local03, #40
1dda4     11 27 02 FB | 	rdlong	local05, local03
1dda8     28 22 86 F1 | 	sub	local03, #40
1ddac     18 1E 06 F1 | 	add	local01, #24
1ddb0     0F 27 62 FC | 	wrlong	local05, local01
1ddb4     18 1E 86 F1 | 	sub	local01, #24
1ddb8     7C 00 90 FD | 	jmp	#LR__3245
1ddbc                 | LR__3240
1ddbc     0A 22 06 F1 | 	add	local03, #10
1ddc0     11 29 E2 FA | 	rdword	local06, local03
1ddc4     0A 22 86 F1 | 	sub	local03, #10
1ddc8     09 28 66 F0 | 	shl	local06, #9
1ddcc                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
1ddcc                 | ' 		while (ofs >= csz) {
1ddcc                 | LR__3241
1ddcc     14 21 12 F2 | 	cmp	local02, local06 wc
1ddd0     4C 00 90 CD |  if_b	jmp	#LR__3244
1ddd4     0F 13 02 F6 | 	mov	arg01, local01
1ddd8     12 15 02 F6 | 	mov	arg02, local04
1dddc     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
1dde0     FD 24 02 F6 | 	mov	local04, result1
1dde4     FF FF 7F FF 
1dde8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1ddec     01 FA 05 A6 |  if_e	mov	result1, #1
1ddf0     90 00 90 AD |  if_e	jmp	#LR__3246
1ddf4     02 24 16 F2 | 	cmp	local04, #2 wc
1ddf8     14 00 90 CD |  if_b	jmp	#LR__3242
1ddfc     18 22 06 F1 | 	add	local03, #24
1de00     11 27 02 FB | 	rdlong	local05, local03
1de04     18 22 86 F1 | 	sub	local03, #24
1de08     13 25 12 F2 | 	cmp	local04, local05 wc
1de0c     08 00 90 CD |  if_b	jmp	#LR__3243
1de10                 | LR__3242
1de10     02 FA 05 F6 | 	mov	result1, #2
1de14     6C 00 90 FD | 	jmp	#LR__3246
1de18                 | LR__3243
1de18     14 21 82 F1 | 	sub	local02, local06
1de1c     AC FF 9F FD | 	jmp	#LR__3241
1de20                 | LR__3244
1de20     11 13 02 F6 | 	mov	arg01, local03
1de24     12 15 02 F6 | 	mov	arg02, local04
1de28     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
1de2c     18 1E 06 F1 | 	add	local01, #24
1de30     0F FB 61 FC | 	wrlong	result1, local01
1de34     18 1E 86 F1 | 	sub	local01, #24
1de38                 | LR__3245
1de38     14 1E 06 F1 | 	add	local01, #20
1de3c     0F 25 62 FC | 	wrlong	local04, local01
1de40     04 1E 06 F1 | 	add	local01, #4
1de44     0F 27 0A FB | 	rdlong	local05, local01 wz
1de48     18 1E 86 F1 | 	sub	local01, #24
1de4c     02 FA 05 A6 |  if_e	mov	result1, #2
1de50     30 00 90 AD |  if_e	jmp	#LR__3246
1de54     10 29 02 F6 | 	mov	local06, local02
1de58     09 28 46 F0 | 	shr	local06, #9
1de5c     18 1E 06 F1 | 	add	local01, #24
1de60     0F 27 02 FB | 	rdlong	local05, local01
1de64     14 27 02 F1 | 	add	local05, local06
1de68     0F 27 62 FC | 	wrlong	local05, local01
1de6c     34 22 06 F1 | 	add	local03, #52
1de70     FF 21 06 F5 | 	and	local02, #511
1de74     10 23 02 F1 | 	add	local03, local02
1de78     04 1E 06 F1 | 	add	local01, #4
1de7c     0F 23 62 FC | 	wrlong	local03, local01
1de80                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
1de80                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
1de80                 | ' 
1de80                 | ' 	return FR_OK;
1de80     00 FA 05 F6 | 	mov	result1, #0
1de84                 | LR__3246
1de84     A7 F0 03 F6 | 	mov	ptra, fp
1de88     B2 00 A0 FD | 	call	#popregs_
1de8c                 | _fatfs_cc_dir_sdi_ret
1de8c     2D 00 64 FD | 	ret
1de90                 | 
1de90                 | _fatfs_cc_dir_next
1de90     05 4A 05 F6 | 	mov	COUNT_, #5
1de94     A8 00 A0 FD | 	call	#pushregs_
1de98     09 1F 02 F6 | 	mov	local01, arg01
1de9c     0A 21 02 F6 | 	mov	local02, arg02
1dea0     0F 23 02 FB | 	rdlong	local03, local01
1dea4     10 1E 06 F1 | 	add	local01, #16
1dea8     0F 25 02 FB | 	rdlong	local04, local01
1deac     10 1E 86 F1 | 	sub	local01, #16
1deb0     20 24 06 F1 | 	add	local04, #32
1deb4     00 10 00 FF 
1deb8     00 24 16 F2 | 	cmp	local04, ##2097152 wc
1debc     18 1E 06 31 |  if_ae	add	local01, #24
1dec0     0F 01 68 3C |  if_ae	wrlong	#0, local01
1dec4     18 1E 86 31 |  if_ae	sub	local01, #24
1dec8     18 1E 06 F1 | 	add	local01, #24
1decc     0F 15 0A FB | 	rdlong	arg02, local01 wz
1ded0     18 1E 86 F1 | 	sub	local01, #24
1ded4     04 FA 05 A6 |  if_e	mov	result1, #4
1ded8     64 01 90 AD |  if_e	jmp	#LR__3255
1dedc     FF 25 CE F7 | 	test	local04, #511 wz
1dee0     3C 01 90 5D |  if_ne	jmp	#LR__3254
1dee4     18 1E 06 F1 | 	add	local01, #24
1dee8     0F 15 02 FB | 	rdlong	arg02, local01
1deec     01 14 06 F1 | 	add	arg02, #1
1def0     0F 15 62 FC | 	wrlong	arg02, local01
1def4     04 1E 86 F1 | 	sub	local01, #4
1def8     0F 15 0A FB | 	rdlong	arg02, local01 wz
1defc     14 1E 86 F1 | 	sub	local01, #20
1df00     2C 00 90 5D |  if_ne	jmp	#LR__3250
1df04     12 15 02 F6 | 	mov	arg02, local04
1df08     05 14 46 F0 | 	shr	arg02, #5
1df0c     08 22 06 F1 | 	add	local03, #8
1df10     11 21 E2 FA | 	rdword	local02, local03
1df14     08 22 86 F1 | 	sub	local03, #8
1df18     10 15 12 F2 | 	cmp	arg02, local02 wc
1df1c     18 1E 06 31 |  if_ae	add	local01, #24
1df20     0F 01 68 3C |  if_ae	wrlong	#0, local01
1df24                 | ' 				dp->sect = 0; return FR_NO_FILE;
1df24     04 FA 05 36 |  if_ae	mov	result1, #4
1df28     14 01 90 3D |  if_ae	jmp	#LR__3255
1df2c     F0 00 90 FD | 	jmp	#LR__3253
1df30                 | LR__3250
1df30     12 13 02 F6 | 	mov	arg01, local04
1df34     09 12 46 F0 | 	shr	arg01, #9
1df38     0A 22 06 F1 | 	add	local03, #10
1df3c     11 15 E2 FA | 	rdword	arg02, local03
1df40     0A 22 86 F1 | 	sub	local03, #10
1df44     01 14 86 F1 | 	sub	arg02, #1
1df48     0A 13 CA F7 | 	test	arg01, arg02 wz
1df4c     D0 00 90 5D |  if_ne	jmp	#LR__3252
1df50     0F 13 02 F6 | 	mov	arg01, local01
1df54     14 1E 06 F1 | 	add	local01, #20
1df58     0F 15 02 FB | 	rdlong	arg02, local01
1df5c     14 1E 86 F1 | 	sub	local01, #20
1df60     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
1df64     FD 26 02 F6 | 	mov	local05, result1
1df68     02 26 16 F2 | 	cmp	local05, #2 wc
1df6c     02 FA 05 C6 |  if_b	mov	result1, #2
1df70     CC 00 90 CD |  if_b	jmp	#LR__3255
1df74     FF FF 7F FF 
1df78     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1df7c     01 FA 05 A6 |  if_e	mov	result1, #1
1df80     BC 00 90 AD |  if_e	jmp	#LR__3255
1df84     18 22 06 F1 | 	add	local03, #24
1df88     11 15 02 FB | 	rdlong	arg02, local03
1df8c     18 22 86 F1 | 	sub	local03, #24
1df90     0A 27 12 F2 | 	cmp	local05, arg02 wc
1df94     68 00 90 CD |  if_b	jmp	#LR__3251
1df98     00 20 0E F2 | 	cmp	local02, #0 wz
1df9c     18 1E 06 A1 |  if_e	add	local01, #24
1dfa0     0F 01 68 AC |  if_e	wrlong	#0, local01
1dfa4                 | ' 						dp->sect = 0; return FR_NO_FILE;
1dfa4     04 FA 05 A6 |  if_e	mov	result1, #4
1dfa8     94 00 90 AD |  if_e	jmp	#LR__3255
1dfac     0F 13 02 F6 | 	mov	arg01, local01
1dfb0     14 1E 06 F1 | 	add	local01, #20
1dfb4     0F 15 02 FB | 	rdlong	arg02, local01
1dfb8     14 1E 86 F1 | 	sub	local01, #20
1dfbc     84 FA BF FD | 	call	#_fatfs_cc_create_chain
1dfc0     FD 26 0A F6 | 	mov	local05, result1 wz
1dfc4     07 FA 05 A6 |  if_e	mov	result1, #7
1dfc8     74 00 90 AD |  if_e	jmp	#LR__3255
1dfcc     01 26 0E F2 | 	cmp	local05, #1 wz
1dfd0     02 FA 05 A6 |  if_e	mov	result1, #2
1dfd4     68 00 90 AD |  if_e	jmp	#LR__3255
1dfd8     FF FF 7F FF 
1dfdc     FF 27 0E F2 | 	cmp	local05, ##-1 wz
1dfe0     01 FA 05 A6 |  if_e	mov	result1, #1
1dfe4     58 00 90 AD |  if_e	jmp	#LR__3255
1dfe8     13 15 02 F6 | 	mov	arg02, local05
1dfec     11 13 02 F6 | 	mov	arg01, local03
1dff0     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
1dff4     00 FA 0D F2 | 	cmp	result1, #0 wz
1dff8     01 FA 05 56 |  if_ne	mov	result1, #1
1dffc     40 00 90 5D |  if_ne	jmp	#LR__3255
1e000                 | LR__3251
1e000     14 1E 06 F1 | 	add	local01, #20
1e004     0F 27 62 FC | 	wrlong	local05, local01
1e008     11 13 02 F6 | 	mov	arg01, local03
1e00c     13 15 02 F6 | 	mov	arg02, local05
1e010     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
1e014     04 1E 06 F1 | 	add	local01, #4
1e018     0F FB 61 FC | 	wrlong	result1, local01
1e01c     18 1E 86 F1 | 	sub	local01, #24
1e020                 | LR__3252
1e020                 | LR__3253
1e020                 | LR__3254
1e020     10 1E 06 F1 | 	add	local01, #16
1e024     0F 25 62 FC | 	wrlong	local04, local01
1e028     34 22 06 F1 | 	add	local03, #52
1e02c     FF 25 06 F5 | 	and	local04, #511
1e030     12 23 02 F1 | 	add	local03, local04
1e034     0C 1E 06 F1 | 	add	local01, #12
1e038     0F 23 62 FC | 	wrlong	local03, local01
1e03c                 | ' #line 1771 "ff.c"
1e03c                 | ' 				}
1e03c                 | ' 				dp->clust = clst;
1e03c                 | ' 				dp->sect = clst2sect(fs, clst);
1e03c                 | ' 			}
1e03c                 | ' 		}
1e03c                 | ' 	}
1e03c                 | ' 	dp->dptr = ofs;
1e03c                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
1e03c                 | ' 
1e03c                 | ' 	return FR_OK;
1e03c     00 FA 05 F6 | 	mov	result1, #0
1e040                 | LR__3255
1e040     A7 F0 03 F6 | 	mov	ptra, fp
1e044     B2 00 A0 FD | 	call	#popregs_
1e048                 | _fatfs_cc_dir_next_ret
1e048     2D 00 64 FD | 	ret
1e04c                 | 
1e04c                 | _fatfs_cc_dir_alloc
1e04c     08 4A 05 F6 | 	mov	COUNT_, #8
1e050     A8 00 A0 FD | 	call	#pushregs_
1e054     09 1F 02 F6 | 	mov	local01, arg01
1e058     0A 21 02 F6 | 	mov	local02, arg02
1e05c     0F 23 02 FB | 	rdlong	local03, local01
1e060     0F 13 02 F6 | 	mov	arg01, local01
1e064     00 14 06 F6 | 	mov	arg02, #0
1e068     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
1e06c     FD 24 0A F6 | 	mov	local04, result1 wz
1e070     70 00 90 5D |  if_ne	jmp	#LR__3264
1e074     00 26 06 F6 | 	mov	local05, #0
1e078                 | ' 		n = 0;
1e078                 | ' 		do {
1e078                 | LR__3260
1e078     18 1E 06 F1 | 	add	local01, #24
1e07c     0F 15 02 FB | 	rdlong	arg02, local01
1e080     18 1E 86 F1 | 	sub	local01, #24
1e084     11 13 02 F6 | 	mov	arg01, local03
1e088     38 F3 BF FD | 	call	#_fatfs_cc_move_window
1e08c     FD 24 0A F6 | 	mov	local04, result1 wz
1e090     50 00 90 5D |  if_ne	jmp	#LR__3263
1e094     1C 1E 06 F1 | 	add	local01, #28
1e098     0F 29 02 FB | 	rdlong	local06, local01
1e09c     1C 1E 86 F1 | 	sub	local01, #28
1e0a0     14 29 C2 FA | 	rdbyte	local06, local06
1e0a4     E5 28 0E F2 | 	cmp	local06, #229 wz
1e0a8     1C 1E 06 51 |  if_ne	add	local01, #28
1e0ac     0F 2B 02 5B |  if_ne	rdlong	local07, local01
1e0b0     1C 1E 86 51 |  if_ne	sub	local01, #28
1e0b4     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
1e0b8     10 00 90 5D |  if_ne	jmp	#LR__3261
1e0bc     01 26 06 F1 | 	add	local05, #1
1e0c0     10 27 0A F2 | 	cmp	local05, local02 wz
1e0c4     1C 00 90 AD |  if_e	jmp	#LR__3263
1e0c8     04 00 90 FD | 	jmp	#LR__3262
1e0cc                 | LR__3261
1e0cc     00 26 06 F6 | 	mov	local05, #0
1e0d0                 | LR__3262
1e0d0     0F 13 02 F6 | 	mov	arg01, local01
1e0d4     01 14 06 F6 | 	mov	arg02, #1
1e0d8     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
1e0dc     FD 24 0A F6 | 	mov	local04, result1 wz
1e0e0     94 FF 9F AD |  if_e	jmp	#LR__3260
1e0e4                 | LR__3263
1e0e4                 | LR__3264
1e0e4     04 24 0E F2 | 	cmp	local04, #4 wz
1e0e8     07 24 06 A6 |  if_e	mov	local04, #7
1e0ec                 | ' 	return res;
1e0ec     12 FB 01 F6 | 	mov	result1, local04
1e0f0     A7 F0 03 F6 | 	mov	ptra, fp
1e0f4     B2 00 A0 FD | 	call	#popregs_
1e0f8                 | _fatfs_cc_dir_alloc_ret
1e0f8     2D 00 64 FD | 	ret
1e0fc                 | 
1e0fc                 | _fatfs_cc_ld_clust
1e0fc     09 01 02 F6 | 	mov	_var01, arg01
1e100     0A 13 02 F6 | 	mov	arg01, arg02
1e104     1A 12 06 F1 | 	add	arg01, #26
1e108                 | ' {
1e108                 | ' 
1e108                 | ' 	return *((WORD*)ptr);
1e108     09 FB E1 FA | 	rdword	result1, arg01
1e10c     FD 12 32 F9 | 	getword	arg01, result1, #0
1e110     00 01 C2 FA | 	rdbyte	_var01, _var01
1e114     03 00 0E F2 | 	cmp	_var01, #3 wz
1e118     14 14 06 A1 |  if_e	add	arg02, #20
1e11c                 | ' {
1e11c                 | ' 
1e11c                 | ' 	return *((WORD*)ptr);
1e11c     0A FB E1 AA |  if_e	rdword	result1, arg02
1e120     10 FA 65 A0 |  if_e	shl	result1, #16
1e124     FD 12 42 A5 |  if_e	or	arg01, result1
1e128                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
1e128                 | ' 	}
1e128                 | ' 
1e128                 | ' 	return cl;
1e128     09 FB 01 F6 | 	mov	result1, arg01
1e12c                 | _fatfs_cc_ld_clust_ret
1e12c     2D 00 64 FD | 	ret
1e130                 | 
1e130                 | _fatfs_cc_st_clust
1e130     09 01 02 F6 | 	mov	_var01, arg01
1e134     0A 13 02 F6 | 	mov	arg01, arg02
1e138     1A 12 06 F1 | 	add	arg01, #26
1e13c     09 17 52 FC | 	wrword	arg03, arg01
1e140     00 01 C2 FA | 	rdbyte	_var01, _var01
1e144     03 00 0E F2 | 	cmp	_var01, #3 wz
1e148     14 14 06 A1 |  if_e	add	arg02, #20
1e14c     10 16 46 A0 |  if_e	shr	arg03, #16
1e150     0A 17 52 AC |  if_e	wrword	arg03, arg02
1e154                 | _fatfs_cc_st_clust_ret
1e154     2D 00 64 FD | 	ret
1e158                 | 
1e158                 | _fatfs_cc_cmp_lfn
1e158     07 4A 05 F6 | 	mov	COUNT_, #7
1e15c     A8 00 A0 FD | 	call	#pushregs_
1e160     09 1F 02 F6 | 	mov	local01, arg01
1e164     0A 13 02 F6 | 	mov	arg01, arg02
1e168     1A 12 06 F1 | 	add	arg01, #26
1e16c                 | ' {
1e16c                 | ' 
1e16c                 | ' 	return *((WORD*)ptr);
1e16c     09 FB E9 FA | 	rdword	result1, arg01 wz
1e170     00 FA 05 56 |  if_ne	mov	result1, #0
1e174     E0 00 90 5D |  if_ne	jmp	#LR__3276
1e178     0A 21 C2 FA | 	rdbyte	local02, arg02
1e17c     3F 20 06 F5 | 	and	local02, #63
1e180     01 20 86 F1 | 	sub	local02, #1
1e184     0D 20 06 FD | 	qmul	local02, #13
1e188                 | ' 
1e188                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
1e188                 | ' 
1e188                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1e188     01 22 06 F6 | 	mov	local03, #1
1e18c     00 24 06 F6 | 	mov	local04, #0
1e190     18 26 62 FD | 	getqx	local05
1e194                 | LR__3270
1e194     0D 24 16 F2 | 	cmp	local04, #13 wc
1e198     9C 00 90 3D |  if_ae	jmp	#LR__3275
1e19c     0A 13 02 F6 | 	mov	arg01, arg02
1e1a0     12 21 02 F6 | 	mov	local02, local04
1e1a4     01 00 00 FF 
1e1a8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1e1ac     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1e1b0     10 21 C2 FA | 	rdbyte	local02, local02
1e1b4     01 20 06 FA | 	mul	local02, #1
1e1b8     10 13 02 F1 | 	add	arg01, local02
1e1bc     01 00 00 FF 
1e1c0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1e1c4                 | ' {
1e1c4                 | ' 
1e1c4                 | ' 	return *((WORD*)ptr);
1e1c4     09 FB E1 FA | 	rdword	result1, arg01
1e1c8     FD 28 02 F6 | 	mov	local06, result1
1e1cc     11 21 02 F6 | 	mov	local02, local03
1e1d0     0F 20 4E F7 | 	zerox	local02, #15 wz
1e1d4     44 00 90 AD |  if_e	jmp	#LR__3273
1e1d8     00 27 16 F2 | 	cmp	local05, #256 wc
1e1dc     2C 00 90 3D |  if_ae	jmp	#LR__3271
1e1e0     14 13 32 F9 | 	getword	arg01, local06, #0
1e1e4     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1e1e8     FD 20 02 F6 | 	mov	local02, result1
1e1ec     13 23 02 F6 | 	mov	local03, local05
1e1f0     01 22 66 F0 | 	shl	local03, #1
1e1f4     0F 23 02 F1 | 	add	local03, local01
1e1f8     11 13 E2 FA | 	rdword	arg01, local03
1e1fc     01 26 06 F1 | 	add	local05, #1
1e200     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
1e204     FD 20 0A F2 | 	cmp	local02, result1 wz
1e208     08 00 90 AD |  if_e	jmp	#LR__3272
1e20c                 | LR__3271
1e20c                 | ' 				return 0;
1e20c     00 FA 05 F6 | 	mov	result1, #0
1e210     44 00 90 FD | 	jmp	#LR__3276
1e214                 | LR__3272
1e214     14 23 02 F6 | 	mov	local03, local06
1e218     14 00 90 FD | 	jmp	#LR__3274
1e21c                 | LR__3273
1e21c     14 29 32 F9 | 	getword	local06, local06, #0
1e220     7F 00 00 FF 
1e224     FF 29 0E F2 | 	cmp	local06, ##65535 wz
1e228     00 FA 05 56 |  if_ne	mov	result1, #0
1e22c     28 00 90 5D |  if_ne	jmp	#LR__3276
1e230                 | LR__3274
1e230     01 24 06 F1 | 	add	local04, #1
1e234     5C FF 9F FD | 	jmp	#LR__3270
1e238                 | LR__3275
1e238     0A 21 C2 FA | 	rdbyte	local02, arg02
1e23c     40 20 CE F7 | 	test	local02, #64 wz
1e240     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
1e244     01 26 66 50 |  if_ne	shl	local05, #1
1e248     0F 27 02 51 |  if_ne	add	local05, local01
1e24c     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
1e250     00 FA 05 56 |  if_ne	mov	result1, #0
1e254                 | ' 
1e254                 | ' 	return 1;
1e254     01 FA 05 A6 |  if_e	mov	result1, #1
1e258                 | LR__3276
1e258     A7 F0 03 F6 | 	mov	ptra, fp
1e25c     B2 00 A0 FD | 	call	#popregs_
1e260                 | _fatfs_cc_cmp_lfn_ret
1e260     2D 00 64 FD | 	ret
1e264                 | 
1e264                 | _fatfs_cc_pick_lfn
1e264     09 01 02 F6 | 	mov	_var01, arg01
1e268     0A 13 02 F6 | 	mov	arg01, arg02
1e26c     1A 12 06 F1 | 	add	arg01, #26
1e270                 | ' {
1e270                 | ' 
1e270                 | ' 	return *((WORD*)ptr);
1e270     09 FB E9 FA | 	rdword	result1, arg01 wz
1e274     00 FA 05 56 |  if_ne	mov	result1, #0
1e278     D4 00 90 5D |  if_ne	jmp	#LR__3285
1e27c     0A 03 C2 FA | 	rdbyte	_var02, arg02
1e280     40 02 26 F5 | 	andn	_var02, #64
1e284     01 02 86 F1 | 	sub	_var02, #1
1e288     0D 02 06 FD | 	qmul	_var02, #13
1e28c                 | ' 
1e28c                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
1e28c                 | ' 
1e28c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
1e28c     01 04 06 F6 | 	mov	_var03, #1
1e290     00 06 06 F6 | 	mov	_var04, #0
1e294     18 08 62 FD | 	getqx	_var05
1e298                 | LR__3280
1e298     0D 06 16 F2 | 	cmp	_var04, #13 wc
1e29c     80 00 90 3D |  if_ae	jmp	#LR__3283
1e2a0     0A 13 02 F6 | 	mov	arg01, arg02
1e2a4     03 03 02 F6 | 	mov	_var02, _var04
1e2a8     01 00 00 FF 
1e2ac     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1e2b0     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
1e2b4     01 03 C2 FA | 	rdbyte	_var02, _var02
1e2b8     01 02 06 FA | 	mul	_var02, #1
1e2bc     01 13 02 F1 | 	add	arg01, _var02
1e2c0     01 00 00 FF 
1e2c4     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1e2c8                 | ' {
1e2c8                 | ' 
1e2c8                 | ' 	return *((WORD*)ptr);
1e2c8     09 FB E1 FA | 	rdword	result1, arg01
1e2cc     FD 0A 02 F6 | 	mov	_var06, result1
1e2d0     02 03 02 F6 | 	mov	_var02, _var03
1e2d4     0F 02 4E F7 | 	zerox	_var02, #15 wz
1e2d8     28 00 90 AD |  if_e	jmp	#LR__3281
1e2dc     00 09 16 F2 | 	cmp	_var05, #256 wc
1e2e0     00 FA 05 36 |  if_ae	mov	result1, #0
1e2e4     68 00 90 3D |  if_ae	jmp	#LR__3285
1e2e8     04 03 02 F6 | 	mov	_var02, _var05
1e2ec     01 02 66 F0 | 	shl	_var02, #1
1e2f0     00 03 02 F1 | 	add	_var02, _var01
1e2f4     05 05 02 F6 | 	mov	_var03, _var06
1e2f8     01 05 52 FC | 	wrword	_var03, _var02
1e2fc     01 08 06 F1 | 	add	_var05, #1
1e300     14 00 90 FD | 	jmp	#LR__3282
1e304                 | LR__3281
1e304     05 0B 32 F9 | 	getword	_var06, _var06, #0
1e308     7F 00 00 FF 
1e30c     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
1e310     00 FA 05 56 |  if_ne	mov	result1, #0
1e314     38 00 90 5D |  if_ne	jmp	#LR__3285
1e318                 | LR__3282
1e318     01 06 06 F1 | 	add	_var04, #1
1e31c     78 FF 9F FD | 	jmp	#LR__3280
1e320                 | LR__3283
1e320     0A 03 C2 FA | 	rdbyte	_var02, arg02
1e324     40 02 CE F7 | 	test	_var02, #64 wz
1e328     02 0D 02 56 |  if_ne	mov	_var07, _var03
1e32c     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
1e330     18 00 90 AD |  if_e	jmp	#LR__3284
1e334     00 09 16 F2 | 	cmp	_var05, #256 wc
1e338     00 FA 05 36 |  if_ae	mov	result1, #0
1e33c     10 00 90 3D |  if_ae	jmp	#LR__3285
1e340     01 08 66 F0 | 	shl	_var05, #1
1e344     00 09 02 F1 | 	add	_var05, _var01
1e348     04 01 58 FC | 	wrword	#0, _var05
1e34c                 | LR__3284
1e34c                 | ' 		lfnbuf[i] = 0;
1e34c                 | ' 	}
1e34c                 | ' 
1e34c                 | ' 	return 1;
1e34c     01 FA 05 F6 | 	mov	result1, #1
1e350                 | LR__3285
1e350                 | _fatfs_cc_pick_lfn_ret
1e350     2D 00 64 FD | 	ret
1e354                 | 
1e354                 | _fatfs_cc_put_lfn
1e354     0D 14 06 F1 | 	add	arg02, #13
1e358     0A 19 42 FC | 	wrbyte	arg04, arg02
1e35c     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
1e360     01 18 86 F1 | 	sub	arg04, #1
1e364     0D 18 06 FD | 	qmul	arg04, #13
1e368     09 01 02 F6 | 	mov	_var01, arg01
1e36c     02 14 86 F1 | 	sub	arg02, #2
1e370     0A 1F 48 FC | 	wrbyte	#15, arg02
1e374     01 14 06 F1 | 	add	arg02, #1
1e378     0A 01 48 FC | 	wrbyte	#0, arg02
1e37c     0C 14 86 F1 | 	sub	arg02, #12
1e380     0A 13 02 F6 | 	mov	arg01, arg02
1e384     1A 12 06 F1 | 	add	arg01, #26
1e388     09 01 58 FC | 	wrword	#0, arg01
1e38c     00 02 06 F6 | 	mov	_var02, #0
1e390     00 04 06 F6 | 	mov	_var03, #0
1e394                 | ' 	BYTE* dir,
1e394                 | ' 	BYTE ord,
1e394                 | ' 	BYTE sum
1e394                 | ' )
1e394                 | ' {
1e394                 | ' 	UINT i, s;
1e394                 | ' 	WCHAR wc;
1e394                 | ' 
1e394                 | ' 
1e394                 | ' 	dir[ 13 ] = sum;
1e394                 | ' 	dir[ 11 ] =  0x0F ;
1e394                 | ' 	dir[ 12 ] = 0;
1e394                 | ' 	st_word(dir +  26 , 0);
1e394                 | ' 
1e394                 | ' 	i = (ord - 1) * 13;
1e394                 | ' 	s = wc = 0;
1e394                 | ' 	do {
1e394     01 00 00 FF 
1e398     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
1e39c     18 06 62 FD | 	getqx	_var04
1e3a0     97 2A 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
1e3a4                 | LR__3290
1e3a4     01 19 32 F9 | 	getword	arg04, _var02, #0
1e3a8     7F 00 00 FF 
1e3ac     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
1e3b0     03 13 02 56 |  if_ne	mov	arg01, _var04
1e3b4     01 06 06 51 |  if_ne	add	_var04, #1
1e3b8     01 12 66 50 |  if_ne	shl	arg01, #1
1e3bc     00 13 02 51 |  if_ne	add	arg01, _var01
1e3c0     09 03 E2 5A |  if_ne	rdword	_var02, arg01
1e3c4     0A 13 02 F6 | 	mov	arg01, arg02
1e3c8     02 19 02 F6 | 	mov	arg04, _var03
1e3cc     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
1e3d0     0C 19 C2 FA | 	rdbyte	arg04, arg04
1e3d4     01 18 06 FA | 	mul	arg04, #1
1e3d8     0C 13 02 F1 | 	add	arg01, arg04
1e3dc     09 03 52 FC | 	wrword	_var02, arg01
1e3e0     01 19 02 F6 | 	mov	arg04, _var02
1e3e4     0F 18 4E F7 | 	zerox	arg04, #15 wz
1e3e8     0F 02 CE A9 |  if_e	bmask	_var02, #15
1e3ec     01 04 06 F1 | 	add	_var03, #1
1e3f0     0D 04 16 F2 | 	cmp	_var03, #13 wc
1e3f4     AC FF 9F CD |  if_b	jmp	#LR__3290
1e3f8                 | LR__3291
1e3f8     01 00 00 FF 
1e3fc     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
1e400     01 03 32 F9 | 	getword	_var02, _var02, #0
1e404     7F 00 00 FF 
1e408     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
1e40c     01 06 66 50 |  if_ne	shl	_var04, #1
1e410     00 07 02 51 |  if_ne	add	_var04, _var01
1e414     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
1e418     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
1e41c     40 16 46 A5 |  if_e	or	arg03, #64
1e420     0A 17 42 FC | 	wrbyte	arg03, arg02
1e424                 | _fatfs_cc_put_lfn_ret
1e424     2D 00 64 FD | 	ret
1e428                 | 
1e428                 | _fatfs_cc_gen_numname
1e428     08 4A 05 F6 | 	mov	COUNT_, #8
1e42c     A8 00 A0 FD | 	call	#pushregs_
1e430     2C F0 07 F1 | 	add	ptra, #44
1e434     09 1F 02 F6 | 	mov	local01, arg01
1e438     0A 21 02 F6 | 	mov	local02, arg02
1e43c     0B 23 02 F6 | 	mov	local03, arg03
1e440     0C 25 02 F6 | 	mov	local04, arg04
1e444     0F 13 02 F6 | 	mov	arg01, local01
1e448     10 15 02 F6 | 	mov	arg02, local02
1e44c     0B 16 06 F6 | 	mov	arg03, #11
1e450     C4 7D BF FD | 	call	#__system____builtin_memmove
1e454     06 24 16 F2 | 	cmp	local04, #6 wc
1e458     48 00 90 CD |  if_b	jmp	#LR__3305
1e45c     12 27 02 F6 | 	mov	local05, local04
1e460     97 1E 48 FB | 	callpa	#(@LR__3303-@LR__3300)>>2,fcache_load_ptr_
1e464                 | ' 		sreg = seq;
1e464                 | ' 		while (*lfn) {
1e464                 | LR__3300
1e464     11 29 EA FA | 	rdword	local06, local03 wz
1e468     34 00 90 AD |  if_e	jmp	#LR__3304
1e46c     11 2B E2 FA | 	rdword	local07, local03
1e470                 | ' 			wc = *lfn++;
1e470                 | ' 			for (i = 0; i < 16; i++) {
1e470     02 22 06 F1 | 	add	local03, #2
1e474     10 12 DC FC | 	rep	@LR__3302, #16
1e478                 | LR__3301
1e478     01 26 66 F0 | 	shl	local05, #1
1e47c     15 29 32 F9 | 	getword	local06, local07, #0
1e480     01 28 06 F5 | 	and	local06, #1
1e484     14 27 02 F1 | 	add	local05, local06
1e488     15 2B 32 F9 | 	getword	local07, local07, #0
1e48c     01 2A 46 F0 | 	shr	local07, #1
1e490     10 26 2E F4 | 	testbn	local05, #16 wz
1e494     88 00 00 5F 
1e498     21 26 66 55 |  if_ne	xor	local05, ##69665
1e49c                 | LR__3302
1e49c     C4 FF 9F FD | 	jmp	#LR__3300
1e4a0                 | LR__3303
1e4a0                 | LR__3304
1e4a0     13 25 02 F6 | 	mov	local04, local05
1e4a4                 | LR__3305
1e4a4     07 2A 06 F6 | 	mov	local07, #7
1e4a8                 | ' 			}
1e4a8                 | ' 		}
1e4a8                 | ' 		seq = (UINT)sreg;
1e4a8                 | ' 	}
1e4a8                 | ' 
1e4a8                 | ' 
1e4a8                 | ' 	i = 7;
1e4a8                 | ' 	do {
1e4a8     10 4E 05 F1 | 	add	fp, #16
1e4ac     97 1A 48 FB | 	callpa	#(@LR__3307-@LR__3306)>>2,fcache_load_ptr_
1e4b0                 | LR__3306
1e4b0     12 27 42 F8 | 	getnib	local05, local04, #0
1e4b4     30 26 06 F1 | 	add	local05, #48
1e4b8     04 24 46 F0 | 	shr	local04, #4
1e4bc     13 29 E2 F8 | 	getbyte	local06, local05, #0
1e4c0     3A 28 16 F2 | 	cmp	local06, #58 wc
1e4c4     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
1e4c8     07 26 06 31 |  if_ae	add	local05, #7
1e4cc     15 29 02 F6 | 	mov	local06, local07
1e4d0     01 2A 8E F1 | 	sub	local07, #1 wz
1e4d4     A7 28 02 F1 | 	add	local06, fp
1e4d8     14 27 42 FC | 	wrbyte	local05, local06
1e4dc     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
1e4e0     CC FF 9F 5D |  if_ne	jmp	#LR__3306
1e4e4                 | LR__3307
1e4e4     15 29 02 F6 | 	mov	local06, local07
1e4e8     A7 28 02 F1 | 	add	local06, fp
1e4ec     14 FD 48 FC | 	wrbyte	#126, local06
1e4f0                 | ' 	ns[i] = '~';
1e4f0                 | ' 
1e4f0                 | ' 
1e4f0                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
1e4f0     00 26 06 F6 | 	mov	local05, #0
1e4f4     10 4E 85 F1 | 	sub	fp, #16
1e4f8     97 2A 48 FB | 	callpa	#(@LR__3310-@LR__3308)>>2,fcache_load_ptr_
1e4fc                 | LR__3308
1e4fc     15 27 12 F2 | 	cmp	local05, local07 wc
1e500     4C 00 90 3D |  if_ae	jmp	#LR__3311
1e504     13 29 02 F6 | 	mov	local06, local05
1e508     0F 29 02 F1 | 	add	local06, local01
1e50c     14 29 C2 FA | 	rdbyte	local06, local06
1e510     20 28 0E F2 | 	cmp	local06, #32 wz
1e514     38 00 90 AD |  if_e	jmp	#LR__3311
1e518     13 13 02 F6 | 	mov	arg01, local05
1e51c     0F 13 02 F1 | 	add	arg01, local01
1e520     09 13 CA FA | 	rdbyte	arg01, arg01 wz
1e524     00 FA 05 56 |  if_ne	mov	result1, #0
1e528                 | ' 
1e528                 | ' 	return 0;
1e528     00 FA 05 A6 |  if_e	mov	result1, #0
1e52c     00 FA 0D F2 | 	cmp	result1, #0 wz
1e530     14 00 90 AD |  if_e	jmp	#LR__3309
1e534     15 29 02 F6 | 	mov	local06, local07
1e538     01 28 86 F1 | 	sub	local06, #1
1e53c     14 27 0A F2 | 	cmp	local05, local06 wz
1e540     0C 00 90 AD |  if_e	jmp	#LR__3311
1e544     01 26 06 F1 | 	add	local05, #1
1e548                 | LR__3309
1e548     01 26 06 F1 | 	add	local05, #1
1e54c     AC FF 9F FD | 	jmp	#LR__3308
1e550                 | LR__3310
1e550                 | LR__3311
1e550     97 20 48 FB | 	callpa	#(@LR__3315-@LR__3312)>>2,fcache_load_ptr_
1e554                 | ' 			j++;
1e554                 | ' 		}
1e554                 | ' 	}
1e554                 | ' 	do {
1e554                 | LR__3312
1e554     13 29 02 F6 | 	mov	local06, local05
1e558     0F 29 02 F1 | 	add	local06, local01
1e55c     08 2A 16 F2 | 	cmp	local07, #8 wc
1e560     01 26 06 F1 | 	add	local05, #1
1e564     1C 00 90 3D |  if_ae	jmp	#LR__3313
1e568     15 25 02 F6 | 	mov	local04, local07
1e56c     10 4E 05 F1 | 	add	fp, #16
1e570     A7 24 02 F1 | 	add	local04, fp
1e574     12 2D C2 FA | 	rdbyte	local08, local04
1e578     01 2A 06 F1 | 	add	local07, #1
1e57c     10 4E 85 F1 | 	sub	fp, #16
1e580     04 00 90 FD | 	jmp	#LR__3314
1e584                 | LR__3313
1e584     20 2C 06 F6 | 	mov	local08, #32
1e588                 | LR__3314
1e588     14 2D 42 FC | 	wrbyte	local08, local06
1e58c     08 26 16 F2 | 	cmp	local05, #8 wc
1e590     C0 FF 9F CD |  if_b	jmp	#LR__3312
1e594                 | LR__3315
1e594     A7 F0 03 F6 | 	mov	ptra, fp
1e598     B2 00 A0 FD | 	call	#popregs_
1e59c                 | _fatfs_cc_gen_numname_ret
1e59c     2D 00 64 FD | 	ret
1e5a0                 | 
1e5a0                 | _fatfs_cc_sum_sfn
1e5a0     00 00 06 F6 | 	mov	_var01, #0
1e5a4                 | ' )
1e5a4                 | ' {
1e5a4                 | ' 	BYTE sum = 0;
1e5a4                 | ' 	UINT n = 11;
1e5a4                 | ' 
1e5a4                 | ' 	do {
1e5a4     97 12 48 FB | 	callpa	#(@LR__3322-@LR__3320)>>2,fcache_load_ptr_
1e5a8                 | LR__3320
1e5a8     0B 10 DC FC | 	rep	@LR__3323, #11
1e5ac                 | LR__3321
1e5ac     00 FB E1 F8 | 	getbyte	result1, _var01, #0
1e5b0     01 FA 45 F0 | 	shr	result1, #1
1e5b4     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
1e5b8     07 00 66 F0 | 	shl	_var01, #7
1e5bc     00 FB 01 F1 | 	add	result1, _var01
1e5c0     09 01 C2 FA | 	rdbyte	_var01, arg01
1e5c4     FD 00 02 F1 | 	add	_var01, result1
1e5c8     01 12 06 F1 | 	add	arg01, #1
1e5cc                 | LR__3322
1e5cc                 | LR__3323
1e5cc                 | ' 	return sum;
1e5cc     00 FB 01 F6 | 	mov	result1, _var01
1e5d0                 | _fatfs_cc_sum_sfn_ret
1e5d0     2D 00 64 FD | 	ret
1e5d4                 | 
1e5d4                 | _fatfs_cc_dir_read
1e5d4     0C 4A 05 F6 | 	mov	COUNT_, #12
1e5d8     A8 00 A0 FD | 	call	#pushregs_
1e5dc     09 1F 02 F6 | 	mov	local01, arg01
1e5e0     0A 21 02 F6 | 	mov	local02, arg02
1e5e4     04 22 06 F6 | 	mov	local03, #4
1e5e8     0F 25 02 FB | 	rdlong	local04, local01
1e5ec     FF 26 06 F6 | 	mov	local05, #255
1e5f0     FF 28 06 F6 | 	mov	local06, #255
1e5f4                 | ' )
1e5f4                 | ' {
1e5f4                 | ' 	FRESULT res = FR_NO_FILE;
1e5f4                 | ' 	FATFS *fs = dp->obj.fs;
1e5f4                 | ' 	BYTE attr, b;
1e5f4                 | ' 
1e5f4                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
1e5f4                 | ' 
1e5f4                 | ' 
1e5f4                 | ' 	while (dp->sect) {
1e5f4                 | LR__3330
1e5f4     18 1E 06 F1 | 	add	local01, #24
1e5f8     0F FB 09 FB | 	rdlong	result1, local01 wz
1e5fc     18 1E 86 F1 | 	sub	local01, #24
1e600     AC 01 90 AD |  if_e	jmp	#LR__3340
1e604     18 1E 06 F1 | 	add	local01, #24
1e608     0F 15 02 FB | 	rdlong	arg02, local01
1e60c     18 1E 86 F1 | 	sub	local01, #24
1e610     12 13 02 F6 | 	mov	arg01, local04
1e614     AC ED BF FD | 	call	#_fatfs_cc_move_window
1e618     FD 22 0A F6 | 	mov	local03, result1 wz
1e61c     90 01 90 5D |  if_ne	jmp	#LR__3340
1e620     1C 1E 06 F1 | 	add	local01, #28
1e624     0F FB 01 FB | 	rdlong	result1, local01
1e628     1C 1E 86 F1 | 	sub	local01, #28
1e62c     FD 2A C2 FA | 	rdbyte	local07, result1
1e630     15 FB 01 F6 | 	mov	result1, local07
1e634     07 FA 4D F7 | 	zerox	result1, #7 wz
1e638     04 22 06 A6 |  if_e	mov	local03, #4
1e63c                 | ' 			res = FR_NO_FILE; break;
1e63c     70 01 90 AD |  if_e	jmp	#LR__3340
1e640     1C 1E 06 F1 | 	add	local01, #28
1e644     0F 2D 02 FB | 	rdlong	local08, local01
1e648     0B 2C 06 F1 | 	add	local08, #11
1e64c     16 2F C2 FA | 	rdbyte	local09, local08
1e650     3F 2E 06 F5 | 	and	local09, #63
1e654     16 1E 86 F1 | 	sub	local01, #22
1e658     0F 2F 42 FC | 	wrbyte	local09, local01
1e65c     06 1E 86 F1 | 	sub	local01, #6
1e660     15 FB E1 F8 | 	getbyte	result1, local07, #0
1e664     E5 FA 0D F2 | 	cmp	result1, #229 wz
1e668     15 2D 02 56 |  if_ne	mov	local08, local07
1e66c     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
1e670     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
1e674     1C 00 90 AD |  if_e	jmp	#LR__3331
1e678     00 30 06 F6 | 	mov	local10, #0
1e67c     17 2D E2 F8 | 	getbyte	local08, local09, #0
1e680     20 2C 26 F5 | 	andn	local08, #32
1e684     08 2C 0E F2 | 	cmp	local08, #8 wz
1e688     01 30 06 A6 |  if_e	mov	local10, #1
1e68c     10 31 0A F2 | 	cmp	local10, local02 wz
1e690     08 00 90 AD |  if_e	jmp	#LR__3332
1e694                 | LR__3331
1e694     FF 26 06 F6 | 	mov	local05, #255
1e698     00 01 90 FD | 	jmp	#LR__3339
1e69c                 | LR__3332
1e69c     17 2F E2 F8 | 	getbyte	local09, local09, #0
1e6a0     0F 2E 0E F2 | 	cmp	local09, #15 wz
1e6a4     B4 00 90 5D |  if_ne	jmp	#LR__3336
1e6a8     15 33 E2 F8 | 	getbyte	local11, local07, #0
1e6ac     40 32 CE F7 | 	test	local11, #64 wz
1e6b0     30 00 90 AD |  if_e	jmp	#LR__3333
1e6b4     1C 1E 06 F1 | 	add	local01, #28
1e6b8     0F 33 02 FB | 	rdlong	local11, local01
1e6bc     0D 32 06 F1 | 	add	local11, #13
1e6c0     19 29 C2 FA | 	rdbyte	local06, local11
1e6c4     15 2B E2 F8 | 	getbyte	local07, local07, #0
1e6c8     BF 2A 06 F5 | 	and	local07, #191
1e6cc     15 27 02 F6 | 	mov	local05, local07
1e6d0     0C 1E 86 F1 | 	sub	local01, #12
1e6d4     0F 33 02 FB | 	rdlong	local11, local01
1e6d8     1C 1E 06 F1 | 	add	local01, #28
1e6dc     0F 33 62 FC | 	wrlong	local11, local01
1e6e0     2C 1E 86 F1 | 	sub	local01, #44
1e6e4                 | LR__3333
1e6e4     15 2D E2 F8 | 	getbyte	local08, local07, #0
1e6e8     13 31 E2 F8 | 	getbyte	local10, local05, #0
1e6ec     18 2D 0A F2 | 	cmp	local08, local10 wz
1e6f0     5C 00 90 5D |  if_ne	jmp	#LR__3334
1e6f4     14 31 E2 F8 | 	getbyte	local10, local06, #0
1e6f8     1C 1E 06 F1 | 	add	local01, #28
1e6fc     0F 2F 02 FB | 	rdlong	local09, local01
1e700     1C 1E 86 F1 | 	sub	local01, #28
1e704     0D 2E 06 F1 | 	add	local09, #13
1e708     17 2D C2 FA | 	rdbyte	local08, local09
1e70c     16 2F E2 F8 | 	getbyte	local09, local08, #0
1e710     17 31 0A F2 | 	cmp	local10, local09 wz
1e714     38 00 90 5D |  if_ne	jmp	#LR__3334
1e718     0C 24 06 F1 | 	add	local04, #12
1e71c     12 13 02 FB | 	rdlong	arg01, local04
1e720     0C 24 86 F1 | 	sub	local04, #12
1e724     1C 1E 06 F1 | 	add	local01, #28
1e728     0F 35 02 FB | 	rdlong	local12, local01
1e72c     1C 1E 86 F1 | 	sub	local01, #28
1e730     1A 15 02 F6 | 	mov	arg02, local12
1e734     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
1e738     00 FA 4D F2 | 	cmps	result1, #0 wz
1e73c     13 35 02 56 |  if_ne	mov	local12, local05
1e740     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
1e744     01 34 86 51 |  if_ne	sub	local12, #1
1e748     1A 33 02 56 |  if_ne	mov	local11, local12
1e74c     04 00 90 5D |  if_ne	jmp	#LR__3335
1e750                 | LR__3334
1e750     FF 32 06 F6 | 	mov	local11, #255
1e754                 | LR__3335
1e754     19 27 02 F6 | 	mov	local05, local11
1e758     40 00 90 FD | 	jmp	#LR__3338
1e75c                 | LR__3336
1e75c     13 33 02 F6 | 	mov	local11, local05
1e760     07 32 4E F7 | 	zerox	local11, #7 wz
1e764     20 00 90 5D |  if_ne	jmp	#LR__3337
1e768     14 29 E2 F8 | 	getbyte	local06, local06, #0
1e76c     1C 1E 06 F1 | 	add	local01, #28
1e770     0F 13 02 FB | 	rdlong	arg01, local01
1e774     1C 1E 86 F1 | 	sub	local01, #28
1e778     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
1e77c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e780     FD 28 0A F2 | 	cmp	local06, result1 wz
1e784     28 00 90 AD |  if_e	jmp	#LR__3340
1e788                 | LR__3337
1e788     2C 1E 06 F1 | 	add	local01, #44
1e78c     FF FF FF FF 
1e790     0F FF 6B FC | 	wrlong	##-1, local01
1e794     2C 1E 86 F1 | 	sub	local01, #44
1e798                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
1e798                 | ' 					}
1e798                 | ' 					break;
1e798     14 00 90 FD | 	jmp	#LR__3340
1e79c                 | LR__3338
1e79c                 | LR__3339
1e79c     0F 13 02 F6 | 	mov	arg01, local01
1e7a0     00 14 06 F6 | 	mov	arg02, #0
1e7a4     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
1e7a8     FD 22 0A F6 | 	mov	local03, result1 wz
1e7ac     44 FE 9F AD |  if_e	jmp	#LR__3330
1e7b0                 | LR__3340
1e7b0     00 22 0E F2 | 	cmp	local03, #0 wz
1e7b4     18 1E 06 51 |  if_ne	add	local01, #24
1e7b8     0F 01 68 5C |  if_ne	wrlong	#0, local01
1e7bc                 | ' 	return res;
1e7bc     11 FB 01 F6 | 	mov	result1, local03
1e7c0     A7 F0 03 F6 | 	mov	ptra, fp
1e7c4     B2 00 A0 FD | 	call	#popregs_
1e7c8                 | _fatfs_cc_dir_read_ret
1e7c8     2D 00 64 FD | 	ret
1e7cc                 | 
1e7cc                 | _fatfs_cc_dir_find
1e7cc     0B 4A 05 F6 | 	mov	COUNT_, #11
1e7d0     A8 00 A0 FD | 	call	#pushregs_
1e7d4     09 1F 02 F6 | 	mov	local01, arg01
1e7d8     0F 21 02 FB | 	rdlong	local02, local01
1e7dc     0F 13 02 F6 | 	mov	arg01, local01
1e7e0     00 14 06 F6 | 	mov	arg02, #0
1e7e4     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
1e7e8     00 FA 0D F2 | 	cmp	result1, #0 wz
1e7ec     18 02 90 5D |  if_ne	jmp	#LR__3362
1e7f0     FF 22 06 F6 | 	mov	local03, #255
1e7f4     FF 24 06 F6 | 	mov	local04, #255
1e7f8     2C 1E 06 F1 | 	add	local01, #44
1e7fc     FF FF FF FF 
1e800     0F FF 6B FC | 	wrlong	##-1, local01
1e804     2C 1E 86 F1 | 	sub	local01, #44
1e808                 | ' #line 2404 "ff.c"
1e808                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
1e808                 | ' 
1e808                 | ' 	do {
1e808                 | LR__3350
1e808     18 1E 06 F1 | 	add	local01, #24
1e80c     0F 15 02 FB | 	rdlong	arg02, local01
1e810     18 1E 86 F1 | 	sub	local01, #24
1e814     10 13 02 F6 | 	mov	arg01, local02
1e818     A8 EB BF FD | 	call	#_fatfs_cc_move_window
1e81c     FD 26 0A F6 | 	mov	local05, result1 wz
1e820     E0 01 90 5D |  if_ne	jmp	#LR__3361
1e824     1C 1E 06 F1 | 	add	local01, #28
1e828     0F 17 02 FB | 	rdlong	arg03, local01
1e82c     1C 1E 86 F1 | 	sub	local01, #28
1e830     0B 29 C2 FA | 	rdbyte	local06, arg03
1e834     14 17 02 F6 | 	mov	arg03, local06
1e838     07 16 4E F7 | 	zerox	arg03, #7 wz
1e83c     04 26 06 A6 |  if_e	mov	local05, #4
1e840     C0 01 90 AD |  if_e	jmp	#LR__3361
1e844     1C 1E 06 F1 | 	add	local01, #28
1e848     0F 2B 02 FB | 	rdlong	local07, local01
1e84c     15 17 02 F6 | 	mov	arg03, local07
1e850     0B 16 06 F1 | 	add	arg03, #11
1e854     0B 2D C2 FA | 	rdbyte	local08, arg03
1e858     3F 2C 06 F5 | 	and	local08, #63
1e85c     16 1E 86 F1 | 	sub	local01, #22
1e860     0F 2D 42 FC | 	wrbyte	local08, local01
1e864     06 1E 86 F1 | 	sub	local01, #6
1e868     14 17 E2 F8 | 	getbyte	arg03, local06, #0
1e86c     E5 16 0E F2 | 	cmp	arg03, #229 wz
1e870     18 00 90 AD |  if_e	jmp	#LR__3351
1e874     16 17 E2 F8 | 	getbyte	arg03, local08, #0
1e878     08 16 CE F7 | 	test	arg03, #8 wz
1e87c     16 2B 02 56 |  if_ne	mov	local07, local08
1e880     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
1e884     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
1e888     18 00 90 AD |  if_e	jmp	#LR__3352
1e88c                 | LR__3351
1e88c     FF 24 06 F6 | 	mov	local04, #255
1e890     2C 1E 06 F1 | 	add	local01, #44
1e894     FF FF FF FF 
1e898     0F FF 6B FC | 	wrlong	##-1, local01
1e89c     2C 1E 86 F1 | 	sub	local01, #44
1e8a0     4C 01 90 FD | 	jmp	#LR__3360
1e8a4                 | LR__3352
1e8a4     16 2D E2 F8 | 	getbyte	local08, local08, #0
1e8a8     0F 2C 0E F2 | 	cmp	local08, #15 wz
1e8ac     C8 00 90 5D |  if_ne	jmp	#LR__3356
1e8b0     2B 1E 06 F1 | 	add	local01, #43
1e8b4     0F 2D C2 FA | 	rdbyte	local08, local01
1e8b8     2B 1E 86 F1 | 	sub	local01, #43
1e8bc     40 2C CE F7 | 	test	local08, #64 wz
1e8c0     2C 01 90 5D |  if_ne	jmp	#LR__3359
1e8c4     14 2F E2 F8 | 	getbyte	local09, local06, #0
1e8c8     40 2E CE F7 | 	test	local09, #64 wz
1e8cc     30 00 90 AD |  if_e	jmp	#LR__3353
1e8d0     1C 1E 06 F1 | 	add	local01, #28
1e8d4     0F 2F 02 FB | 	rdlong	local09, local01
1e8d8     0D 2E 06 F1 | 	add	local09, #13
1e8dc     17 23 C2 FA | 	rdbyte	local03, local09
1e8e0     14 29 E2 F8 | 	getbyte	local06, local06, #0
1e8e4     BF 28 06 F5 | 	and	local06, #191
1e8e8     14 25 02 F6 | 	mov	local04, local06
1e8ec     0C 1E 86 F1 | 	sub	local01, #12
1e8f0     0F 2F 02 FB | 	rdlong	local09, local01
1e8f4     1C 1E 06 F1 | 	add	local01, #28
1e8f8     0F 2F 62 FC | 	wrlong	local09, local01
1e8fc     2C 1E 86 F1 | 	sub	local01, #44
1e900                 | LR__3353
1e900     14 31 E2 F8 | 	getbyte	local10, local06, #0
1e904     12 2B E2 F8 | 	getbyte	local07, local04, #0
1e908     15 31 0A F2 | 	cmp	local10, local07 wz
1e90c     5C 00 90 5D |  if_ne	jmp	#LR__3354
1e910     11 2D E2 F8 | 	getbyte	local08, local03, #0
1e914     1C 1E 06 F1 | 	add	local01, #28
1e918     0F 2B 02 FB | 	rdlong	local07, local01
1e91c     1C 1E 86 F1 | 	sub	local01, #28
1e920     0D 2A 06 F1 | 	add	local07, #13
1e924     15 29 C2 FA | 	rdbyte	local06, local07
1e928     14 2B E2 F8 | 	getbyte	local07, local06, #0
1e92c     15 2D 0A F2 | 	cmp	local08, local07 wz
1e930     38 00 90 5D |  if_ne	jmp	#LR__3354
1e934     0C 20 06 F1 | 	add	local02, #12
1e938     10 13 02 FB | 	rdlong	arg01, local02
1e93c     0C 20 86 F1 | 	sub	local02, #12
1e940     1C 1E 06 F1 | 	add	local01, #28
1e944     0F 33 02 FB | 	rdlong	local11, local01
1e948     1C 1E 86 F1 | 	sub	local01, #28
1e94c     19 15 02 F6 | 	mov	arg02, local11
1e950     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
1e954     00 FA 4D F2 | 	cmps	result1, #0 wz
1e958     12 33 02 56 |  if_ne	mov	local11, local04
1e95c     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
1e960     01 32 86 51 |  if_ne	sub	local11, #1
1e964     19 2F 02 56 |  if_ne	mov	local09, local11
1e968     04 00 90 5D |  if_ne	jmp	#LR__3355
1e96c                 | LR__3354
1e96c     FF 2E 06 F6 | 	mov	local09, #255
1e970                 | LR__3355
1e970     17 25 02 F6 | 	mov	local04, local09
1e974     78 00 90 FD | 	jmp	#LR__3359
1e978                 | LR__3356
1e978     12 2F 02 F6 | 	mov	local09, local04
1e97c     07 2E 4E F7 | 	zerox	local09, #7 wz
1e980     20 00 90 5D |  if_ne	jmp	#LR__3357
1e984     11 31 E2 F8 | 	getbyte	local10, local03, #0
1e988     1C 1E 06 F1 | 	add	local01, #28
1e98c     0F 13 02 FB | 	rdlong	arg01, local01
1e990     1C 1E 86 F1 | 	sub	local01, #28
1e994     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
1e998     FD FA E1 F8 | 	getbyte	result1, result1, #0
1e99c     FD 30 0A F2 | 	cmp	local10, result1 wz
1e9a0     60 00 90 AD |  if_e	jmp	#LR__3361
1e9a4                 | LR__3357
1e9a4     2B 1E 06 F1 | 	add	local01, #43
1e9a8     0F 2F C2 FA | 	rdbyte	local09, local01
1e9ac     2B 1E 86 F1 | 	sub	local01, #43
1e9b0     01 2E CE F7 | 	test	local09, #1 wz
1e9b4     24 00 90 5D |  if_ne	jmp	#LR__3358
1e9b8     1C 1E 06 F1 | 	add	local01, #28
1e9bc     0F 13 02 FB | 	rdlong	arg01, local01
1e9c0     04 1E 06 F1 | 	add	local01, #4
1e9c4     0F 15 02 F6 | 	mov	arg02, local01
1e9c8     20 1E 86 F1 | 	sub	local01, #32
1e9cc     0B 16 06 F6 | 	mov	arg03, #11
1e9d0     88 DA BF FD | 	call	#_fatfs_cc_memcmp
1e9d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1e9d8     28 00 90 AD |  if_e	jmp	#LR__3361
1e9dc                 | LR__3358
1e9dc     FF 24 06 F6 | 	mov	local04, #255
1e9e0     2C 1E 06 F1 | 	add	local01, #44
1e9e4     FF FF FF FF 
1e9e8     0F FF 6B FC | 	wrlong	##-1, local01
1e9ec     2C 1E 86 F1 | 	sub	local01, #44
1e9f0                 | LR__3359
1e9f0                 | LR__3360
1e9f0     0F 13 02 F6 | 	mov	arg01, local01
1e9f4     00 14 06 F6 | 	mov	arg02, #0
1e9f8     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
1e9fc     FD 26 0A F6 | 	mov	local05, result1 wz
1ea00     04 FE 9F AD |  if_e	jmp	#LR__3350
1ea04                 | LR__3361
1ea04                 | ' 
1ea04                 | ' 	return res;
1ea04     13 FB 01 F6 | 	mov	result1, local05
1ea08                 | LR__3362
1ea08     A7 F0 03 F6 | 	mov	ptra, fp
1ea0c     B2 00 A0 FD | 	call	#popregs_
1ea10                 | _fatfs_cc_dir_find_ret
1ea10     2D 00 64 FD | 	ret
1ea14                 | 
1ea14                 | _fatfs_cc_dir_register
1ea14     0A 4A 05 F6 | 	mov	COUNT_, #10
1ea18     A8 00 A0 FD | 	call	#pushregs_
1ea1c     2C F0 07 F1 | 	add	ptra, #44
1ea20     04 4E 05 F1 | 	add	fp, #4
1ea24     A7 12 62 FC | 	wrlong	arg01, fp
1ea28     09 1F 02 FB | 	rdlong	local01, arg01
1ea2c     08 4E 05 F1 | 	add	fp, #8
1ea30     A7 1E 62 FC | 	wrlong	local01, fp
1ea34     08 4E 85 F1 | 	sub	fp, #8
1ea38     A7 20 02 FB | 	rdlong	local02, fp
1ea3c     04 4E 85 F1 | 	sub	fp, #4
1ea40     2B 20 06 F1 | 	add	local02, #43
1ea44     10 21 C2 FA | 	rdbyte	local02, local02
1ea48     A0 20 CE F7 | 	test	local02, #160 wz
1ea4c     06 FA 05 56 |  if_ne	mov	result1, #6
1ea50     F8 03 90 5D |  if_ne	jmp	#LR__3385
1ea54                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
1ea54     14 4E 05 F1 | 	add	fp, #20
1ea58     A7 00 68 FC | 	wrlong	#0, fp
1ea5c     14 4E 85 F1 | 	sub	fp, #20
1ea60     97 28 48 FB | 	callpa	#(@LR__3371-@LR__3370)>>2,fcache_load_ptr_
1ea64                 | LR__3370
1ea64     0C 4E 05 F1 | 	add	fp, #12
1ea68     A7 20 02 FB | 	rdlong	local02, fp
1ea6c     0C 20 06 F1 | 	add	local02, #12
1ea70     10 23 02 FB | 	rdlong	local03, local02
1ea74     08 4E 05 F1 | 	add	fp, #8
1ea78     A7 24 02 FB | 	rdlong	local04, fp
1ea7c     14 4E 85 F1 | 	sub	fp, #20
1ea80     01 24 66 F0 | 	shl	local04, #1
1ea84     11 25 02 F1 | 	add	local04, local03
1ea88     12 21 EA FA | 	rdword	local02, local04 wz
1ea8c     24 00 90 AD |  if_e	jmp	#LR__3372
1ea90     14 4E 05 F1 | 	add	fp, #20
1ea94     A7 26 02 FB | 	rdlong	local05, fp
1ea98     13 29 02 F6 | 	mov	local06, local05
1ea9c     13 2B 02 F6 | 	mov	local07, local05
1eaa0     15 2D 02 F6 | 	mov	local08, local07
1eaa4     01 2C 06 F1 | 	add	local08, #1
1eaa8     A7 2C 62 FC | 	wrlong	local08, fp
1eaac     14 4E 85 F1 | 	sub	fp, #20
1eab0     B0 FF 9F FD | 	jmp	#LR__3370
1eab4                 | LR__3371
1eab4                 | LR__3372
1eab4     1C 4E 05 F1 | 	add	fp, #28
1eab8     A7 12 02 F6 | 	mov	arg01, fp
1eabc     18 4E 85 F1 | 	sub	fp, #24
1eac0     A7 14 02 FB | 	rdlong	arg02, fp
1eac4     04 4E 85 F1 | 	sub	fp, #4
1eac8     20 14 06 F1 | 	add	arg02, #32
1eacc     0C 16 06 F6 | 	mov	arg03, #12
1ead0     44 77 BF FD | 	call	#__system____builtin_memmove
1ead4     27 4E 05 F1 | 	add	fp, #39
1ead8     A7 2E C2 FA | 	rdbyte	local09, fp
1eadc     27 4E 85 F1 | 	sub	fp, #39
1eae0     01 2E CE F7 | 	test	local09, #1 wz
1eae4     F4 00 90 AD |  if_e	jmp	#LR__3375
1eae8     04 4E 05 F1 | 	add	fp, #4
1eaec     A7 30 02 FB | 	rdlong	local10, fp
1eaf0     2B 30 06 F1 | 	add	local10, #43
1eaf4     18 81 48 FC | 	wrbyte	#64, local10
1eaf8                 | ' 		dp->fn[ 11 ] =  0x40 ;
1eaf8                 | ' 		for (n = 1; n < 100; n++) {
1eaf8     0C 4E 05 F1 | 	add	fp, #12
1eafc     A7 02 68 FC | 	wrlong	#1, fp
1eb00     10 4E 85 F1 | 	sub	fp, #16
1eb04                 | LR__3373
1eb04     10 4E 05 F1 | 	add	fp, #16
1eb08     A7 20 02 FB | 	rdlong	local02, fp
1eb0c     10 4E 85 F1 | 	sub	fp, #16
1eb10     64 20 16 F2 | 	cmp	local02, #100 wc
1eb14     70 00 90 3D |  if_ae	jmp	#LR__3374
1eb18     04 4E 05 F1 | 	add	fp, #4
1eb1c     A7 12 02 FB | 	rdlong	arg01, fp
1eb20     20 12 06 F1 | 	add	arg01, #32
1eb24     18 4E 05 F1 | 	add	fp, #24
1eb28     A7 14 02 F6 | 	mov	arg02, fp
1eb2c     10 4E 85 F1 | 	sub	fp, #16
1eb30     A7 30 02 FB | 	rdlong	local10, fp
1eb34     0C 30 06 F1 | 	add	local10, #12
1eb38     18 17 02 FB | 	rdlong	arg03, local10
1eb3c     04 4E 05 F1 | 	add	fp, #4
1eb40     A7 18 02 FB | 	rdlong	arg04, fp
1eb44     10 4E 85 F1 | 	sub	fp, #16
1eb48     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
1eb4c     04 4E 05 F1 | 	add	fp, #4
1eb50     A7 12 02 FB | 	rdlong	arg01, fp
1eb54     04 4E 85 F1 | 	sub	fp, #4
1eb58     70 FC BF FD | 	call	#_fatfs_cc_dir_find
1eb5c     08 4E 05 F1 | 	add	fp, #8
1eb60     A7 FA 61 FC | 	wrlong	result1, fp
1eb64     00 FA 4D F2 | 	cmps	result1, #0 wz
1eb68     08 4E 85 F1 | 	sub	fp, #8
1eb6c     18 00 90 5D |  if_ne	jmp	#LR__3374
1eb70     10 4E 05 F1 | 	add	fp, #16
1eb74     A7 30 02 FB | 	rdlong	local10, fp
1eb78     01 30 06 F1 | 	add	local10, #1
1eb7c     A7 30 62 FC | 	wrlong	local10, fp
1eb80     10 4E 85 F1 | 	sub	fp, #16
1eb84     7C FF 9F FD | 	jmp	#LR__3373
1eb88                 | LR__3374
1eb88     10 4E 05 F1 | 	add	fp, #16
1eb8c     A7 30 02 FB | 	rdlong	local10, fp
1eb90     10 4E 85 F1 | 	sub	fp, #16
1eb94     64 30 0E F2 | 	cmp	local10, #100 wz
1eb98     07 FA 05 A6 |  if_e	mov	result1, #7
1eb9c     AC 02 90 AD |  if_e	jmp	#LR__3385
1eba0     08 4E 05 F1 | 	add	fp, #8
1eba4     A7 30 02 FB | 	rdlong	local10, fp
1eba8     08 4E 85 F1 | 	sub	fp, #8
1ebac     04 30 0E F2 | 	cmp	local10, #4 wz
1ebb0     08 4E 05 51 |  if_ne	add	fp, #8
1ebb4     A7 FA 01 5B |  if_ne	rdlong	result1, fp
1ebb8     08 4E 85 51 |  if_ne	sub	fp, #8
1ebbc     8C 02 90 5D |  if_ne	jmp	#LR__3385
1ebc0     04 4E 05 F1 | 	add	fp, #4
1ebc4     A7 30 02 FB | 	rdlong	local10, fp
1ebc8     23 4E 05 F1 | 	add	fp, #35
1ebcc     A7 1E C2 FA | 	rdbyte	local01, fp
1ebd0     27 4E 85 F1 | 	sub	fp, #39
1ebd4     2B 30 06 F1 | 	add	local10, #43
1ebd8     18 1F 42 FC | 	wrbyte	local01, local10
1ebdc                 | LR__3375
1ebdc     27 4E 05 F1 | 	add	fp, #39
1ebe0     A7 20 C2 FA | 	rdbyte	local02, fp
1ebe4     27 4E 85 F1 | 	sub	fp, #39
1ebe8     02 20 CE F7 | 	test	local02, #2 wz
1ebec     20 00 90 AD |  if_e	jmp	#LR__3376
1ebf0     14 4E 05 F1 | 	add	fp, #20
1ebf4     A7 30 02 FB | 	rdlong	local10, fp
1ebf8     0C 30 06 F1 | 	add	local10, #12
1ebfc     0D 30 16 FD | 	qdiv	local10, #13
1ec00     14 4E 85 F1 | 	sub	fp, #20
1ec04     18 30 62 FD | 	getqx	local10
1ec08     01 30 06 F1 | 	add	local10, #1
1ec0c     04 00 90 FD | 	jmp	#LR__3377
1ec10                 | LR__3376
1ec10     01 30 06 F6 | 	mov	local10, #1
1ec14                 | LR__3377
1ec14     18 4E 05 F1 | 	add	fp, #24
1ec18     A7 30 62 FC | 	wrlong	local10, fp
1ec1c     14 4E 85 F1 | 	sub	fp, #20
1ec20     A7 12 02 FB | 	rdlong	arg01, fp
1ec24     18 15 02 F6 | 	mov	arg02, local10
1ec28     04 4E 85 F1 | 	sub	fp, #4
1ec2c     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
1ec30     08 4E 05 F1 | 	add	fp, #8
1ec34     A7 FA 61 FC | 	wrlong	result1, fp
1ec38     08 4E 85 F1 | 	sub	fp, #8
1ec3c     00 FA 0D F2 | 	cmp	result1, #0 wz
1ec40     38 01 90 5D |  if_ne	jmp	#LR__3382
1ec44     18 4E 05 F1 | 	add	fp, #24
1ec48     A7 30 02 FB | 	rdlong	local10, fp
1ec4c     01 30 8E F1 | 	sub	local10, #1 wz
1ec50     A7 30 62 FC | 	wrlong	local10, fp
1ec54     18 4E 85 F1 | 	sub	fp, #24
1ec58     20 01 90 AD |  if_e	jmp	#LR__3382
1ec5c     04 4E 05 F1 | 	add	fp, #4
1ec60     A7 30 02 FB | 	rdlong	local10, fp
1ec64     18 13 02 F6 | 	mov	arg01, local10
1ec68     14 4E 05 F1 | 	add	fp, #20
1ec6c     A7 18 02 FB | 	rdlong	arg04, fp
1ec70     18 4E 85 F1 | 	sub	fp, #24
1ec74     05 18 66 F0 | 	shl	arg04, #5
1ec78     10 30 06 F1 | 	add	local10, #16
1ec7c     18 15 02 FB | 	rdlong	arg02, local10
1ec80     0C 15 82 F1 | 	sub	arg02, arg04
1ec84     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
1ec88     08 4E 05 F1 | 	add	fp, #8
1ec8c     A7 FA 61 FC | 	wrlong	result1, fp
1ec90     08 4E 85 F1 | 	sub	fp, #8
1ec94     00 FA 0D F2 | 	cmp	result1, #0 wz
1ec98     E0 00 90 5D |  if_ne	jmp	#LR__3381
1ec9c     04 4E 05 F1 | 	add	fp, #4
1eca0     A7 12 02 FB | 	rdlong	arg01, fp
1eca4     04 4E 85 F1 | 	sub	fp, #4
1eca8     20 12 06 F1 | 	add	arg01, #32
1ecac     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
1ecb0     FD 30 02 F6 | 	mov	local10, result1
1ecb4     28 4E 05 F1 | 	add	fp, #40
1ecb8     A7 30 42 FC | 	wrbyte	local10, fp
1ecbc     28 4E 85 F1 | 	sub	fp, #40
1ecc0                 | ' 			sum = sum_sfn(dp->fn);
1ecc0                 | ' 			do {
1ecc0                 | LR__3378
1ecc0     0C 4E 05 F1 | 	add	fp, #12
1ecc4     A7 12 02 FB | 	rdlong	arg01, fp
1ecc8     08 4E 85 F1 | 	sub	fp, #8
1eccc     A7 1E 02 FB | 	rdlong	local01, fp
1ecd0     04 4E 85 F1 | 	sub	fp, #4
1ecd4     18 1E 06 F1 | 	add	local01, #24
1ecd8     0F 15 02 FB | 	rdlong	arg02, local01
1ecdc     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
1ece0     08 4E 05 F1 | 	add	fp, #8
1ece4     A7 FA 61 FC | 	wrlong	result1, fp
1ece8     00 FA 4D F2 | 	cmps	result1, #0 wz
1ecec     08 4E 85 F1 | 	sub	fp, #8
1ecf0     88 00 90 5D |  if_ne	jmp	#LR__3380
1ecf4     0C 4E 05 F1 | 	add	fp, #12
1ecf8     A7 20 02 FB | 	rdlong	local02, fp
1ecfc     0C 20 06 F1 | 	add	local02, #12
1ed00     10 13 02 FB | 	rdlong	arg01, local02
1ed04     08 4E 85 F1 | 	sub	fp, #8
1ed08     A7 1E 02 FB | 	rdlong	local01, fp
1ed0c     1C 1E 06 F1 | 	add	local01, #28
1ed10     0F 15 02 FB | 	rdlong	arg02, local01
1ed14     14 4E 05 F1 | 	add	fp, #20
1ed18     A7 16 02 FB | 	rdlong	arg03, fp
1ed1c     10 4E 05 F1 | 	add	fp, #16
1ed20     A7 18 C2 FA | 	rdbyte	arg04, fp
1ed24     28 4E 85 F1 | 	sub	fp, #40
1ed28     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
1ed2c     0C 4E 05 F1 | 	add	fp, #12
1ed30     A7 30 02 FB | 	rdlong	local10, fp
1ed34     03 30 06 F1 | 	add	local10, #3
1ed38     18 03 48 FC | 	wrbyte	#1, local10
1ed3c     08 4E 85 F1 | 	sub	fp, #8
1ed40     A7 12 02 FB | 	rdlong	arg01, fp
1ed44     04 4E 85 F1 | 	sub	fp, #4
1ed48     00 14 06 F6 | 	mov	arg02, #0
1ed4c     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
1ed50     08 4E 05 F1 | 	add	fp, #8
1ed54     A7 FA 61 FC | 	wrlong	result1, fp
1ed58     00 FA 4D F2 | 	cmps	result1, #0 wz
1ed5c     08 4E 85 F1 | 	sub	fp, #8
1ed60     18 00 90 5D |  if_ne	jmp	#LR__3379
1ed64     18 4E 05 F1 | 	add	fp, #24
1ed68     A7 30 02 FB | 	rdlong	local10, fp
1ed6c     01 30 8E F1 | 	sub	local10, #1 wz
1ed70     A7 30 62 FC | 	wrlong	local10, fp
1ed74     18 4E 85 F1 | 	sub	fp, #24
1ed78     44 FF 9F 5D |  if_ne	jmp	#LR__3378
1ed7c                 | LR__3379
1ed7c                 | LR__3380
1ed7c                 | LR__3381
1ed7c                 | LR__3382
1ed7c     08 4E 05 F1 | 	add	fp, #8
1ed80     A7 30 0A FB | 	rdlong	local10, fp wz
1ed84     08 4E 85 F1 | 	sub	fp, #8
1ed88     B4 00 90 5D |  if_ne	jmp	#LR__3384
1ed8c     0C 4E 05 F1 | 	add	fp, #12
1ed90     A7 12 02 FB | 	rdlong	arg01, fp
1ed94     08 4E 85 F1 | 	sub	fp, #8
1ed98     A7 1E 02 FB | 	rdlong	local01, fp
1ed9c     04 4E 85 F1 | 	sub	fp, #4
1eda0     18 1E 06 F1 | 	add	local01, #24
1eda4     0F 15 02 FB | 	rdlong	arg02, local01
1eda8     18 E6 BF FD | 	call	#_fatfs_cc_move_window
1edac     08 4E 05 F1 | 	add	fp, #8
1edb0     A7 FA 61 FC | 	wrlong	result1, fp
1edb4     08 4E 85 F1 | 	sub	fp, #8
1edb8     00 FA 0D F2 | 	cmp	result1, #0 wz
1edbc     80 00 90 5D |  if_ne	jmp	#LR__3383
1edc0     04 4E 05 F1 | 	add	fp, #4
1edc4     A7 20 02 FB | 	rdlong	local02, fp
1edc8     04 4E 85 F1 | 	sub	fp, #4
1edcc     1C 20 06 F1 | 	add	local02, #28
1edd0     10 13 02 FB | 	rdlong	arg01, local02
1edd4     00 14 06 F6 | 	mov	arg02, #0
1edd8     20 16 06 F6 | 	mov	arg03, #32
1eddc     98 00 A0 FD | 	call	#\builtin_bytefill_
1ede0     04 4E 05 F1 | 	add	fp, #4
1ede4     A7 14 02 FB | 	rdlong	arg02, fp
1ede8     0A 1F 02 F6 | 	mov	local01, arg02
1edec     1C 1E 06 F1 | 	add	local01, #28
1edf0     0F 13 02 FB | 	rdlong	arg01, local01
1edf4     04 4E 85 F1 | 	sub	fp, #4
1edf8     20 14 06 F1 | 	add	arg02, #32
1edfc     0B 16 06 F6 | 	mov	arg03, #11
1ee00     14 74 BF FD | 	call	#__system____builtin_memmove
1ee04     04 4E 05 F1 | 	add	fp, #4
1ee08     A7 2E 02 FB | 	rdlong	local09, fp
1ee0c     17 31 02 F6 | 	mov	local10, local09
1ee10     1C 30 06 F1 | 	add	local10, #28
1ee14     18 1F 02 FB | 	rdlong	local01, local10
1ee18     2B 2E 06 F1 | 	add	local09, #43
1ee1c     17 31 C2 FA | 	rdbyte	local10, local09
1ee20     18 30 06 F5 | 	and	local10, #24
1ee24     0C 1E 06 F1 | 	add	local01, #12
1ee28     0F 31 42 FC | 	wrbyte	local10, local01
1ee2c     08 4E 05 F1 | 	add	fp, #8
1ee30     A7 30 02 FB | 	rdlong	local10, fp
1ee34     0C 4E 85 F1 | 	sub	fp, #12
1ee38     03 30 06 F1 | 	add	local10, #3
1ee3c     18 03 48 FC | 	wrbyte	#1, local10
1ee40                 | LR__3383
1ee40                 | LR__3384
1ee40                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
1ee40                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
1ee40                 | ' 
1ee40                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
1ee40                 | ' 
1ee40                 | ' 			fs->wflag = 1;
1ee40                 | ' 		}
1ee40                 | ' 	}
1ee40                 | ' 
1ee40                 | ' 	return res;
1ee40     08 4E 05 F1 | 	add	fp, #8
1ee44     A7 FA 01 FB | 	rdlong	result1, fp
1ee48     08 4E 85 F1 | 	sub	fp, #8
1ee4c                 | LR__3385
1ee4c     A7 F0 03 F6 | 	mov	ptra, fp
1ee50     B2 00 A0 FD | 	call	#popregs_
1ee54                 | _fatfs_cc_dir_register_ret
1ee54     2D 00 64 FD | 	ret
1ee58                 | 
1ee58                 | _fatfs_cc_dir_remove
1ee58     05 4A 05 F6 | 	mov	COUNT_, #5
1ee5c     A8 00 A0 FD | 	call	#pushregs_
1ee60     09 1F 02 F6 | 	mov	local01, arg01
1ee64     0F 21 02 FB | 	rdlong	local02, local01
1ee68     10 1E 06 F1 | 	add	local01, #16
1ee6c     0F 23 02 FB | 	rdlong	local03, local01
1ee70     1C 1E 06 F1 | 	add	local01, #28
1ee74     0F 15 02 FB | 	rdlong	arg02, local01
1ee78     2C 1E 86 F1 | 	sub	local01, #44
1ee7c     FF FF 7F FF 
1ee80     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
1ee84     00 24 06 A6 |  if_e	mov	local04, #0
1ee88     18 00 90 AD |  if_e	jmp	#LR__3390
1ee8c     0F 13 02 F6 | 	mov	arg01, local01
1ee90     2C 1E 06 F1 | 	add	local01, #44
1ee94     0F 15 02 FB | 	rdlong	arg02, local01
1ee98     2C 1E 86 F1 | 	sub	local01, #44
1ee9c     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
1eea0     FD 24 02 F6 | 	mov	local04, result1
1eea4                 | LR__3390
1eea4     12 27 0A F6 | 	mov	local05, local04 wz
1eea8     64 00 90 5D |  if_ne	jmp	#LR__3393
1eeac                 | ' 		do {
1eeac                 | LR__3391
1eeac     18 1E 06 F1 | 	add	local01, #24
1eeb0     0F 15 02 FB | 	rdlong	arg02, local01
1eeb4     18 1E 86 F1 | 	sub	local01, #24
1eeb8     10 13 02 F6 | 	mov	arg01, local02
1eebc     04 E5 BF FD | 	call	#_fatfs_cc_move_window
1eec0     FD 26 0A F6 | 	mov	local05, result1 wz
1eec4     40 00 90 5D |  if_ne	jmp	#LR__3392
1eec8     1C 1E 06 F1 | 	add	local01, #28
1eecc     0F 25 02 FB | 	rdlong	local04, local01
1eed0     12 CB 49 FC | 	wrbyte	#229, local04
1eed4     03 20 06 F1 | 	add	local02, #3
1eed8     10 03 48 FC | 	wrbyte	#1, local02
1eedc     03 20 86 F1 | 	sub	local02, #3
1eee0     0C 1E 86 F1 | 	sub	local01, #12
1eee4     0F 25 02 FB | 	rdlong	local04, local01
1eee8     10 1E 86 F1 | 	sub	local01, #16
1eeec     11 25 12 F2 | 	cmp	local04, local03 wc
1eef0     14 00 90 3D |  if_ae	jmp	#LR__3392
1eef4     0F 13 02 F6 | 	mov	arg01, local01
1eef8     00 14 06 F6 | 	mov	arg02, #0
1eefc     90 EF BF FD | 	call	#_fatfs_cc_dir_next
1ef00     FD 26 0A F6 | 	mov	local05, result1 wz
1ef04     A4 FF 9F AD |  if_e	jmp	#LR__3391
1ef08                 | LR__3392
1ef08     04 26 0E F2 | 	cmp	local05, #4 wz
1ef0c     02 26 06 A6 |  if_e	mov	local05, #2
1ef10                 | LR__3393
1ef10                 | ' 	}
1ef10                 | ' #line 2590 "ff.c"
1ef10                 | ' 	return res;
1ef10     13 FB 01 F6 | 	mov	result1, local05
1ef14     A7 F0 03 F6 | 	mov	ptra, fp
1ef18     B2 00 A0 FD | 	call	#popregs_
1ef1c                 | _fatfs_cc_dir_remove_ret
1ef1c     2D 00 64 FD | 	ret
1ef20                 | 
1ef20                 | _fatfs_cc_get_fileinfo
1ef20     0F 4A 05 F6 | 	mov	COUNT_, #15
1ef24     A8 00 A0 FD | 	call	#pushregs_
1ef28     09 1F 02 F6 | 	mov	local01, arg01
1ef2c     0A 21 02 F6 | 	mov	local02, arg02
1ef30     0F 23 02 FB | 	rdlong	local03, local01
1ef34     1C 20 06 F1 | 	add	local02, #28
1ef38     10 01 48 FC | 	wrbyte	#0, local02
1ef3c     1C 20 86 F1 | 	sub	local02, #28
1ef40     18 1E 06 F1 | 	add	local01, #24
1ef44     0F 25 0A FB | 	rdlong	local04, local01 wz
1ef48     18 1E 86 F1 | 	sub	local01, #24
1ef4c     90 03 90 AD |  if_e	jmp	#LR__3414
1ef50     2C 1E 06 F1 | 	add	local01, #44
1ef54     0F 25 02 FB | 	rdlong	local04, local01
1ef58     2C 1E 86 F1 | 	sub	local01, #44
1ef5c     FF FF 7F FF 
1ef60     FF 25 0E F2 | 	cmp	local04, ##-1 wz
1ef64     D8 00 90 AD |  if_e	jmp	#LR__3403
1ef68     00 26 06 F6 | 	mov	local05, #0
1ef6c     00 28 06 F6 | 	mov	local06, #0
1ef70     00 2A 06 F6 | 	mov	local07, #0
1ef74                 | ' 			si = di = 0;
1ef74                 | ' 			hs = 0;
1ef74                 | ' 			while (fs->lfnbuf[si] != 0) {
1ef74                 | LR__3400
1ef74     0C 22 06 F1 | 	add	local03, #12
1ef78     11 25 02 FB | 	rdlong	local04, local03
1ef7c     0C 22 86 F1 | 	sub	local03, #12
1ef80     14 2D 02 F6 | 	mov	local08, local06
1ef84     01 2C 66 F0 | 	shl	local08, #1
1ef88     12 2D 02 F1 | 	add	local08, local04
1ef8c     16 25 EA FA | 	rdword	local04, local08 wz
1ef90     90 00 90 AD |  if_e	jmp	#LR__3402
1ef94     0C 22 06 F1 | 	add	local03, #12
1ef98     11 2F 02 FB | 	rdlong	local09, local03
1ef9c     0C 22 86 F1 | 	sub	local03, #12
1efa0     14 31 02 F6 | 	mov	local10, local06
1efa4     01 30 66 F0 | 	shl	local10, #1
1efa8     17 31 02 F1 | 	add	local10, local09
1efac     18 33 E2 FA | 	rdword	local11, local10
1efb0     15 25 02 F6 | 	mov	local04, local07
1efb4     0F 24 4E F7 | 	zerox	local04, #15 wz
1efb8     01 28 06 F1 | 	add	local06, #1
1efbc     24 00 90 5D |  if_ne	jmp	#LR__3401
1efc0     19 35 32 F9 | 	getword	local12, local11, #0
1efc4     6C 00 00 FF 
1efc8     00 34 16 F2 | 	cmp	local12, ##55296 wc
1efcc     14 00 90 CD |  if_b	jmp	#LR__3401
1efd0     19 37 32 F9 | 	getword	local13, local11, #0
1efd4     70 00 00 FF 
1efd8     00 36 16 F2 | 	cmp	local13, ##57344 wc
1efdc     19 2B 02 C6 |  if_b	mov	local07, local11
1efe0                 | ' 					hs = wc; continue;
1efe0     90 FF 9F CD |  if_b	jmp	#LR__3400
1efe4                 | LR__3401
1efe4     15 13 32 F9 | 	getword	arg01, local07, #0
1efe8     10 12 66 F0 | 	shl	arg01, #16
1efec     19 33 32 F9 | 	getword	local11, local11, #0
1eff0     19 13 42 F5 | 	or	arg01, local11
1eff4     13 15 02 F6 | 	mov	arg02, local05
1eff8     1C 20 06 F1 | 	add	local02, #28
1effc     10 15 02 F1 | 	add	arg02, local02
1f000     FF 16 06 F6 | 	mov	arg03, #255
1f004     13 17 82 F1 | 	sub	arg03, local05
1f008     1C 20 86 F1 | 	sub	local02, #28
1f00c     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
1f010     FD 38 0A F6 | 	mov	local14, result1 wz
1f014     00 26 06 A6 |  if_e	mov	local05, #0
1f018     1C 27 02 51 |  if_ne	add	local05, local14
1f01c     00 2A 06 56 |  if_ne	mov	local07, #0
1f020     50 FF 9F 5D |  if_ne	jmp	#LR__3400
1f024                 | LR__3402
1f024     15 25 02 F6 | 	mov	local04, local07
1f028     0F 24 4E F7 | 	zerox	local04, #15 wz
1f02c     00 26 06 56 |  if_ne	mov	local05, #0
1f030     1C 20 06 F1 | 	add	local02, #28
1f034     10 27 02 F1 | 	add	local05, local02
1f038     13 01 48 FC | 	wrbyte	#0, local05
1f03c     1C 20 86 F1 | 	sub	local02, #28
1f040                 | LR__3403
1f040     00 26 06 F6 | 	mov	local05, #0
1f044     00 28 06 F6 | 	mov	local06, #0
1f048                 | ' 			fno->fname[di] = 0;
1f048                 | ' 		}
1f048                 | ' 	}
1f048                 | ' 
1f048                 | ' 	si = di = 0;
1f048                 | ' 	while (si < 11) {
1f048                 | LR__3404
1f048     0B 28 16 F2 | 	cmp	local06, #11 wc
1f04c     20 01 90 3D |  if_ae	jmp	#LR__3407
1f050     1C 1E 06 F1 | 	add	local01, #28
1f054     0F 2F 02 FB | 	rdlong	local09, local01
1f058     1C 1E 86 F1 | 	sub	local01, #28
1f05c     14 31 02 F6 | 	mov	local10, local06
1f060     17 31 02 F1 | 	add	local10, local09
1f064     18 33 C2 FA | 	rdbyte	local11, local10
1f068     19 25 32 F9 | 	getword	local04, local11, #0
1f06c     20 24 0E F2 | 	cmp	local04, #32 wz
1f070     01 28 06 F1 | 	add	local06, #1
1f074     D0 FF 9F AD |  if_e	jmp	#LR__3404
1f078     19 25 32 F9 | 	getword	local04, local11, #0
1f07c     05 24 0E F2 | 	cmp	local04, #5 wz
1f080     E5 32 06 A6 |  if_e	mov	local11, #229
1f084     09 28 0E F2 | 	cmp	local06, #9 wz
1f088     20 00 90 5D |  if_ne	jmp	#LR__3405
1f08c     0C 26 16 F2 | 	cmp	local05, #12 wc
1f090     18 00 90 3D |  if_ae	jmp	#LR__3405
1f094     13 37 02 F6 | 	mov	local13, local05
1f098     0C 20 06 F1 | 	add	local02, #12
1f09c     10 37 02 F1 | 	add	local13, local02
1f0a0     1B 5D 48 FC | 	wrbyte	#46, local13
1f0a4     01 26 06 F1 | 	add	local05, #1
1f0a8     0C 20 86 F1 | 	sub	local02, #12
1f0ac                 | LR__3405
1f0ac     19 13 32 F9 | 	getword	arg01, local11, #0
1f0b0     07 12 4E F7 | 	zerox	arg01, #7 wz
1f0b4     00 FA 05 56 |  if_ne	mov	result1, #0
1f0b8                 | ' 
1f0b8                 | ' 	return 0;
1f0b8     00 FA 05 A6 |  if_e	mov	result1, #0
1f0bc     00 FA 0D F2 | 	cmp	result1, #0 wz
1f0c0     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
1f0c4     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
1f0c8     50 00 90 AD |  if_e	jmp	#LR__3406
1f0cc     1C 1E 06 F1 | 	add	local01, #28
1f0d0     0F 31 02 FB | 	rdlong	local10, local01
1f0d4     1C 1E 86 F1 | 	sub	local01, #28
1f0d8     14 2D 02 F6 | 	mov	local08, local06
1f0dc     18 2D 02 F1 | 	add	local08, local10
1f0e0     16 13 CA FA | 	rdbyte	arg01, local08 wz
1f0e4     00 FA 05 56 |  if_ne	mov	result1, #0
1f0e8                 | ' 
1f0e8                 | ' 	return 0;
1f0e8     00 FA 05 A6 |  if_e	mov	result1, #0
1f0ec     00 FA 0D F2 | 	cmp	result1, #0 wz
1f0f0     28 00 90 AD |  if_e	jmp	#LR__3406
1f0f4     19 33 32 F9 | 	getword	local11, local11, #0
1f0f8     08 32 66 F0 | 	shl	local11, #8
1f0fc     1C 1E 06 F1 | 	add	local01, #28
1f100     0F 39 02 FB | 	rdlong	local14, local01
1f104     1C 1E 86 F1 | 	sub	local01, #28
1f108     14 2F 02 F6 | 	mov	local09, local06
1f10c     1C 2F 02 F1 | 	add	local09, local14
1f110     17 35 C2 FA | 	rdbyte	local12, local09
1f114     1A 33 42 F5 | 	or	local11, local12
1f118     01 28 06 F1 | 	add	local06, #1
1f11c                 | LR__3406
1f11c     19 13 02 F6 | 	mov	arg01, local11
1f120     01 00 00 FF 
1f124     52 15 06 F6 | 	mov	arg02, ##850
1f128     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
1f12c     FD 32 02 F6 | 	mov	local11, result1
1f130     19 25 02 F6 | 	mov	local04, local11
1f134     0F 24 4E F7 | 	zerox	local04, #15 wz
1f138     00 26 06 A6 |  if_e	mov	local05, #0
1f13c     30 00 90 AD |  if_e	jmp	#LR__3407
1f140     19 13 32 F9 | 	getword	arg01, local11, #0
1f144     13 15 02 F6 | 	mov	arg02, local05
1f148     0C 20 06 F1 | 	add	local02, #12
1f14c     10 15 02 F1 | 	add	arg02, local02
1f150     0C 16 06 F6 | 	mov	arg03, #12
1f154     13 17 82 F1 | 	sub	arg03, local05
1f158     0C 20 86 F1 | 	sub	local02, #12
1f15c     EC DF BF FD | 	call	#_fatfs_cc_put_utf
1f160     FD 38 0A F6 | 	mov	local14, result1 wz
1f164     00 26 06 A6 |  if_e	mov	local05, #0
1f168     1C 27 02 51 |  if_ne	add	local05, local14
1f16c     D8 FE 9F 5D |  if_ne	jmp	#LR__3404
1f170                 | LR__3407
1f170     13 25 02 F6 | 	mov	local04, local05
1f174     0C 20 06 F1 | 	add	local02, #12
1f178     10 25 02 F1 | 	add	local04, local02
1f17c     12 01 48 FC | 	wrbyte	#0, local04
1f180     10 20 06 F1 | 	add	local02, #16
1f184     10 25 CA FA | 	rdbyte	local04, local02 wz
1f188     1C 20 86 F1 | 	sub	local02, #28
1f18c     F8 00 90 5D |  if_ne	jmp	#LR__3413
1f190     00 26 0E F2 | 	cmp	local05, #0 wz
1f194     1C 00 90 5D |  if_ne	jmp	#LR__3408
1f198     13 37 02 F6 | 	mov	local13, local05
1f19c     1C 20 06 F1 | 	add	local02, #28
1f1a0     10 37 02 F1 | 	add	local13, local02
1f1a4     1B 7F 48 FC | 	wrbyte	#63, local13
1f1a8     01 26 06 F1 | 	add	local05, #1
1f1ac     1C 20 86 F1 | 	sub	local02, #28
1f1b0     A4 00 90 FD | 	jmp	#LR__3412
1f1b4                 | LR__3408
1f1b4                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
1f1b4     00 26 06 F6 | 	mov	local05, #0
1f1b8     00 28 06 F6 | 	mov	local06, #0
1f1bc     08 3A 06 F6 | 	mov	local15, #8
1f1c0                 | LR__3409
1f1c0     14 25 02 F6 | 	mov	local04, local06
1f1c4     0C 20 06 F1 | 	add	local02, #12
1f1c8     10 25 02 F1 | 	add	local04, local02
1f1cc     12 37 CA FA | 	rdbyte	local13, local04 wz
1f1d0     0C 20 86 F1 | 	sub	local02, #12
1f1d4     80 00 90 AD |  if_e	jmp	#LR__3411
1f1d8     14 2D 02 F6 | 	mov	local08, local06
1f1dc     0C 20 06 F1 | 	add	local02, #12
1f1e0     10 2D 02 F1 | 	add	local08, local02
1f1e4     16 33 C2 FA | 	rdbyte	local11, local08
1f1e8     19 39 32 F9 | 	getword	local14, local11, #0
1f1ec     2E 38 0E F2 | 	cmp	local14, #46 wz
1f1f0     0C 20 86 F1 | 	sub	local02, #12
1f1f4     10 3A 06 A6 |  if_e	mov	local15, #16
1f1f8     19 39 32 F9 | 	getword	local14, local11, #0
1f1fc     41 38 16 F2 | 	cmp	local14, #65 wc
1f200     30 00 90 CD |  if_b	jmp	#LR__3410
1f204     19 2D 32 F9 | 	getword	local08, local11, #0
1f208     5B 2C 16 F2 | 	cmp	local08, #91 wc
1f20c     24 00 90 3D |  if_ae	jmp	#LR__3410
1f210     1C 1E 06 F1 | 	add	local01, #28
1f214     0F 2F 02 FB | 	rdlong	local09, local01
1f218     1C 1E 86 F1 | 	sub	local01, #28
1f21c     0C 2E 06 F1 | 	add	local09, #12
1f220     17 31 C2 FA | 	rdbyte	local10, local09
1f224     1D 39 E2 F8 | 	getbyte	local14, local15, #0
1f228     1C 31 CA F7 | 	test	local10, local14 wz
1f22c     19 33 32 59 |  if_ne	getword	local11, local11, #0
1f230     20 32 06 51 |  if_ne	add	local11, #32
1f234                 | LR__3410
1f234     13 39 02 F6 | 	mov	local14, local05
1f238     1C 20 06 F1 | 	add	local02, #28
1f23c     10 39 02 F1 | 	add	local14, local02
1f240     19 33 32 F9 | 	getword	local11, local11, #0
1f244     1C 33 42 FC | 	wrbyte	local11, local14
1f248     01 28 06 F1 | 	add	local06, #1
1f24c     01 26 06 F1 | 	add	local05, #1
1f250     1C 20 86 F1 | 	sub	local02, #28
1f254     68 FF 9F FD | 	jmp	#LR__3409
1f258                 | LR__3411
1f258                 | LR__3412
1f258     1C 20 06 F1 | 	add	local02, #28
1f25c     10 27 02 F1 | 	add	local05, local02
1f260     13 01 48 FC | 	wrbyte	#0, local05
1f264     1C 1E 06 F1 | 	add	local01, #28
1f268     0F 25 02 FB | 	rdlong	local04, local01
1f26c     1C 1E 86 F1 | 	sub	local01, #28
1f270     0C 24 06 F1 | 	add	local04, #12
1f274     12 37 CA FA | 	rdbyte	local13, local04 wz
1f278     1C 20 86 F1 | 	sub	local02, #28
1f27c     0C 20 06 A1 |  if_e	add	local02, #12
1f280     10 01 48 AC |  if_e	wrbyte	#0, local02
1f284     0C 20 86 A1 |  if_e	sub	local02, #12
1f288                 | LR__3413
1f288     1C 1E 06 F1 | 	add	local01, #28
1f28c     0F 35 02 FB | 	rdlong	local12, local01
1f290     0B 34 06 F1 | 	add	local12, #11
1f294     1A 25 C2 FA | 	rdbyte	local04, local12
1f298     3F 24 06 F5 | 	and	local04, #63
1f29c     08 20 06 F1 | 	add	local02, #8
1f2a0     10 25 42 FC | 	wrbyte	local04, local02
1f2a4     08 20 86 F1 | 	sub	local02, #8
1f2a8     0F 13 02 FB | 	rdlong	arg01, local01
1f2ac     1C 12 06 F1 | 	add	arg01, #28
1f2b0                 | ' {
1f2b0                 | ' 
1f2b0                 | ' 	return *((DWORD*)ptr);
1f2b0     09 FB 01 FB | 	rdlong	result1, arg01
1f2b4     10 FB 61 FC | 	wrlong	result1, local02
1f2b8     0F 13 02 FB | 	rdlong	arg01, local01
1f2bc     16 12 06 F1 | 	add	arg01, #22
1f2c0                 | ' {
1f2c0                 | ' 
1f2c0                 | ' 	return *((WORD*)ptr);
1f2c0     09 FB E1 FA | 	rdword	result1, arg01
1f2c4     06 20 06 F1 | 	add	local02, #6
1f2c8     10 FB 51 FC | 	wrword	result1, local02
1f2cc     0F 13 02 FB | 	rdlong	arg01, local01
1f2d0     18 12 06 F1 | 	add	arg01, #24
1f2d4                 | ' {
1f2d4                 | ' 
1f2d4                 | ' 	return *((WORD*)ptr);
1f2d4     09 FB E1 FA | 	rdword	result1, arg01
1f2d8     02 20 86 F1 | 	sub	local02, #2
1f2dc     10 FB 51 FC | 	wrword	result1, local02
1f2e0                 | LR__3414
1f2e0     A7 F0 03 F6 | 	mov	ptra, fp
1f2e4     B2 00 A0 FD | 	call	#popregs_
1f2e8                 | _fatfs_cc_get_fileinfo_ret
1f2e8     2D 00 64 FD | 	ret
1f2ec                 | 
1f2ec                 | _fatfs_cc_create_name
1f2ec     0D 4A 05 F6 | 	mov	COUNT_, #13
1f2f0     A8 00 A0 FD | 	call	#pushregs_
1f2f4     34 F0 07 F1 | 	add	ptra, #52
1f2f8     04 4E 05 F1 | 	add	fp, #4
1f2fc     A7 12 62 FC | 	wrlong	arg01, fp
1f300     04 4E 05 F1 | 	add	fp, #4
1f304     A7 14 62 FC | 	wrlong	arg02, fp
1f308     0A FB 01 FB | 	rdlong	result1, arg02
1f30c     28 4E 05 F1 | 	add	fp, #40
1f310     A7 FA 61 FC | 	wrlong	result1, fp
1f314     2C 4E 85 F1 | 	sub	fp, #44
1f318     A7 FA 01 FB | 	rdlong	result1, fp
1f31c     FD 1E 02 FB | 	rdlong	local01, result1
1f320     0C 1E 06 F1 | 	add	local01, #12
1f324     0F 21 02 FB | 	rdlong	local02, local01
1f328     14 4E 05 F1 | 	add	fp, #20
1f32c     A7 20 62 FC | 	wrlong	local02, fp
1f330     14 4E 05 F1 | 	add	fp, #20
1f334     A7 00 68 FC | 	wrlong	#0, fp
1f338     2C 4E 85 F1 | 	sub	fp, #44
1f33c                 | ' 
1f33c                 | ' 
1f33c                 | ' 
1f33c                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
1f33c                 | ' 	for (;;) {
1f33c                 | LR__3420
1f33c     30 4E 05 F1 | 	add	fp, #48
1f340     A7 12 02 F6 | 	mov	arg01, fp
1f344     30 4E 85 F1 | 	sub	fp, #48
1f348     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
1f34c     1C 4E 05 F1 | 	add	fp, #28
1f350     A7 FA 61 FC | 	wrlong	result1, fp
1f354     1C 4E 85 F1 | 	sub	fp, #28
1f358     FF FF 7F FF 
1f35c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1f360     06 FA 05 A6 |  if_e	mov	result1, #6
1f364     74 08 90 AD |  if_e	jmp	#LR__3460
1f368     1C 4E 05 F1 | 	add	fp, #28
1f36c     A7 1E 02 FB | 	rdlong	local01, fp
1f370     1C 4E 85 F1 | 	sub	fp, #28
1f374     80 00 00 FF 
1f378     00 1E 16 F2 | 	cmp	local01, ##65536 wc
1f37c     3C 00 90 CD |  if_b	jmp	#LR__3421
1f380     18 4E 05 F1 | 	add	fp, #24
1f384     A7 22 02 FB | 	rdlong	local03, fp
1f388     14 4E 05 F1 | 	add	fp, #20
1f38c     A7 1E 02 FB | 	rdlong	local01, fp
1f390     0F 25 02 F6 | 	mov	local04, local01
1f394     01 24 06 F1 | 	add	local04, #1
1f398     A7 24 62 FC | 	wrlong	local04, fp
1f39c     01 1E 66 F0 | 	shl	local01, #1
1f3a0     11 1F 02 F1 | 	add	local01, local03
1f3a4     10 4E 85 F1 | 	sub	fp, #16
1f3a8     A7 26 02 FB | 	rdlong	local05, fp
1f3ac     1C 4E 85 F1 | 	sub	fp, #28
1f3b0     13 29 02 F6 | 	mov	local06, local05
1f3b4     10 28 46 F0 | 	shr	local06, #16
1f3b8     0F 29 52 FC | 	wrword	local06, local01
1f3bc                 | LR__3421
1f3bc     1C 4E 05 F1 | 	add	fp, #28
1f3c0     A7 1E 02 FB | 	rdlong	local01, fp
1f3c4     08 4E 85 F1 | 	sub	fp, #8
1f3c8     A7 1E 52 FC | 	wrword	local01, fp
1f3cc     A7 1E E2 FA | 	rdword	local01, fp
1f3d0     14 4E 85 F1 | 	sub	fp, #20
1f3d4     20 1E 16 F2 | 	cmp	local01, #32 wc
1f3d8     B0 00 90 CD |  if_b	jmp	#LR__3423
1f3dc     14 4E 05 F1 | 	add	fp, #20
1f3e0     A7 1E E2 FA | 	rdword	local01, fp
1f3e4     14 4E 85 F1 | 	sub	fp, #20
1f3e8     2F 1E 0E F2 | 	cmp	local01, #47 wz
1f3ec     14 4E 05 51 |  if_ne	add	fp, #20
1f3f0     A7 24 E2 5A |  if_ne	rdword	local04, fp
1f3f4     14 4E 85 51 |  if_ne	sub	fp, #20
1f3f8     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
1f3fc     8C 00 90 AD |  if_e	jmp	#LR__3423
1f400     14 4E 05 F1 | 	add	fp, #20
1f404     A7 12 E2 FA | 	rdword	arg01, fp
1f408     14 4E 85 F1 | 	sub	fp, #20
1f40c     80 12 16 F2 | 	cmp	arg01, #128 wc
1f410     24 00 90 3D |  if_ae	jmp	#LR__3422
1f414     29 01 00 FF 
1f418     4C 13 06 F6 | 	mov	arg01, ##@LR__4082
1f41c     14 4E 05 F1 | 	add	fp, #20
1f420     A7 14 E2 FA | 	rdword	arg02, fp
1f424     14 4E 85 F1 | 	sub	fp, #20
1f428     FC D0 BF FD | 	call	#_fatfs_cc_strchr
1f42c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f430     06 FA 05 56 |  if_ne	mov	result1, #6
1f434     A4 07 90 5D |  if_ne	jmp	#LR__3460
1f438                 | LR__3422
1f438     2C 4E 05 F1 | 	add	fp, #44
1f43c     A7 28 02 FB | 	rdlong	local06, fp
1f440     2C 4E 85 F1 | 	sub	fp, #44
1f444     FF 28 16 F2 | 	cmp	local06, #255 wc
1f448     06 FA 05 36 |  if_ae	mov	result1, #6
1f44c     8C 07 90 3D |  if_ae	jmp	#LR__3460
1f450     18 4E 05 F1 | 	add	fp, #24
1f454     A7 22 02 FB | 	rdlong	local03, fp
1f458     14 4E 05 F1 | 	add	fp, #20
1f45c     A7 20 02 FB | 	rdlong	local02, fp
1f460     10 25 02 F6 | 	mov	local04, local02
1f464     01 24 06 F1 | 	add	local04, #1
1f468     A7 24 62 FC | 	wrlong	local04, fp
1f46c     10 1F 02 F6 | 	mov	local01, local02
1f470     01 1E 66 F0 | 	shl	local01, #1
1f474     11 1F 02 F1 | 	add	local01, local03
1f478     18 4E 85 F1 | 	sub	fp, #24
1f47c     A7 28 E2 FA | 	rdword	local06, fp
1f480     14 4E 85 F1 | 	sub	fp, #20
1f484     0F 29 52 FC | 	wrword	local06, local01
1f488     B0 FE 9F FD | 	jmp	#LR__3420
1f48c                 | LR__3423
1f48c     14 4E 05 F1 | 	add	fp, #20
1f490     A7 2A E2 FA | 	rdword	local07, fp
1f494     14 4E 85 F1 | 	sub	fp, #20
1f498     20 2A 16 F2 | 	cmp	local07, #32 wc
1f49c     10 4E 05 C1 |  if_b	add	fp, #16
1f4a0     A7 08 48 CC |  if_b	wrbyte	#4, fp
1f4a4     10 4E 85 C1 |  if_b	sub	fp, #16
1f4a8     74 00 90 CD |  if_b	jmp	#LR__3428
1f4ac     97 24 48 FB | 	callpa	#(@LR__3426-@LR__3424)>>2,fcache_load_ptr_
1f4b0                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
1f4b0                 | LR__3424
1f4b0     30 4E 05 F1 | 	add	fp, #48
1f4b4     A7 24 02 FB | 	rdlong	local04, fp
1f4b8     30 4E 85 F1 | 	sub	fp, #48
1f4bc     12 2B C2 FA | 	rdbyte	local07, local04
1f4c0     2F 2A 0E F2 | 	cmp	local07, #47 wz
1f4c4     18 00 90 AD |  if_e	jmp	#LR__3425
1f4c8     30 4E 05 F1 | 	add	fp, #48
1f4cc     A7 24 02 FB | 	rdlong	local04, fp
1f4d0     30 4E 85 F1 | 	sub	fp, #48
1f4d4     12 21 C2 FA | 	rdbyte	local02, local04
1f4d8     5C 20 0E F2 | 	cmp	local02, #92 wz
1f4dc     18 00 90 5D |  if_ne	jmp	#LR__3427
1f4e0                 | LR__3425
1f4e0     30 4E 05 F1 | 	add	fp, #48
1f4e4     A7 1E 02 FB | 	rdlong	local01, fp
1f4e8     01 1E 06 F1 | 	add	local01, #1
1f4ec     A7 1E 62 FC | 	wrlong	local01, fp
1f4f0     30 4E 85 F1 | 	sub	fp, #48
1f4f4     B8 FF 9F FD | 	jmp	#LR__3424
1f4f8                 | LR__3426
1f4f8                 | LR__3427
1f4f8     10 4E 05 F1 | 	add	fp, #16
1f4fc     A7 00 48 FC | 	wrbyte	#0, fp
1f500     20 4E 05 F1 | 	add	fp, #32
1f504     A7 28 02 FB | 	rdlong	local06, fp
1f508     30 4E 85 F1 | 	sub	fp, #48
1f50c     14 2B C2 FA | 	rdbyte	local07, local06
1f510     20 2A 16 F2 | 	cmp	local07, #32 wc
1f514     10 4E 05 C1 |  if_b	add	fp, #16
1f518     A7 08 48 CC |  if_b	wrbyte	#4, fp
1f51c     10 4E 85 C1 |  if_b	sub	fp, #16
1f520                 | LR__3428
1f520     08 4E 05 F1 | 	add	fp, #8
1f524     A7 2A 02 FB | 	rdlong	local07, fp
1f528     28 4E 05 F1 | 	add	fp, #40
1f52c     A7 1E 02 FB | 	rdlong	local01, fp
1f530     30 4E 85 F1 | 	sub	fp, #48
1f534     15 1F 62 FC | 	wrlong	local01, local07
1f538     97 38 48 FB | 	callpa	#(@LR__3430-@LR__3429)>>2,fcache_load_ptr_
1f53c                 | ' 	}
1f53c                 | ' 	*path = p;
1f53c                 | ' #line 2862 "ff.c"
1f53c                 | ' 	while (di) {
1f53c                 | LR__3429
1f53c     2C 4E 05 F1 | 	add	fp, #44
1f540     A7 2A 0A FB | 	rdlong	local07, fp wz
1f544     2C 4E 85 F1 | 	sub	fp, #44
1f548     60 00 90 AD |  if_e	jmp	#LR__3431
1f54c     18 4E 05 F1 | 	add	fp, #24
1f550     A7 28 02 FB | 	rdlong	local06, fp
1f554     14 4E 05 F1 | 	add	fp, #20
1f558     A7 24 02 FB | 	rdlong	local04, fp
1f55c     01 24 86 F1 | 	sub	local04, #1
1f560     01 24 66 F0 | 	shl	local04, #1
1f564     14 25 02 F1 | 	add	local04, local06
1f568     12 29 E2 FA | 	rdword	local06, local04
1f56c     18 4E 85 F1 | 	sub	fp, #24
1f570     A7 28 52 FC | 	wrword	local06, fp
1f574     A7 2A E2 FA | 	rdword	local07, fp
1f578     14 4E 85 F1 | 	sub	fp, #20
1f57c     20 2A 0E F2 | 	cmp	local07, #32 wz
1f580     14 4E 05 51 |  if_ne	add	fp, #20
1f584     A7 1E E2 5A |  if_ne	rdword	local01, fp
1f588     14 4E 85 51 |  if_ne	sub	fp, #20
1f58c     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
1f590     18 00 90 5D |  if_ne	jmp	#LR__3431
1f594     2C 4E 05 F1 | 	add	fp, #44
1f598     A7 1E 02 FB | 	rdlong	local01, fp
1f59c     01 1E 86 F1 | 	sub	local01, #1
1f5a0     A7 1E 62 FC | 	wrlong	local01, fp
1f5a4     2C 4E 85 F1 | 	sub	fp, #44
1f5a8     90 FF 9F FD | 	jmp	#LR__3429
1f5ac                 | LR__3430
1f5ac                 | LR__3431
1f5ac     18 4E 05 F1 | 	add	fp, #24
1f5b0     A7 2C 02 FB | 	rdlong	local08, fp
1f5b4     14 4E 05 F1 | 	add	fp, #20
1f5b8     A7 24 02 FB | 	rdlong	local04, fp
1f5bc     01 24 66 F0 | 	shl	local04, #1
1f5c0     16 25 02 F1 | 	add	local04, local08
1f5c4     12 01 58 FC | 	wrword	#0, local04
1f5c8     A7 2A 0A FB | 	rdlong	local07, fp wz
1f5cc     2C 4E 85 F1 | 	sub	fp, #44
1f5d0     06 FA 05 A6 |  if_e	mov	result1, #6
1f5d4     04 06 90 AD |  if_e	jmp	#LR__3460
1f5d8                 | ' 
1f5d8                 | ' 
1f5d8                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
1f5d8     28 4E 05 F1 | 	add	fp, #40
1f5dc     A7 00 68 FC | 	wrlong	#0, fp
1f5e0     28 4E 85 F1 | 	sub	fp, #40
1f5e4     97 22 48 FB | 	callpa	#(@LR__3433-@LR__3432)>>2,fcache_load_ptr_
1f5e8                 | LR__3432
1f5e8     18 4E 05 F1 | 	add	fp, #24
1f5ec     A7 2E 02 FB | 	rdlong	local09, fp
1f5f0     10 4E 05 F1 | 	add	fp, #16
1f5f4     A7 30 02 FB | 	rdlong	local10, fp
1f5f8     28 4E 85 F1 | 	sub	fp, #40
1f5fc     01 30 66 F0 | 	shl	local10, #1
1f600     17 31 02 F1 | 	add	local10, local09
1f604     18 33 E2 FA | 	rdword	local11, local10
1f608     20 32 0E F2 | 	cmp	local11, #32 wz
1f60c     1C 00 90 5D |  if_ne	jmp	#LR__3434
1f610     28 4E 05 F1 | 	add	fp, #40
1f614     A7 34 02 FB | 	rdlong	local12, fp
1f618     1A 27 02 F6 | 	mov	local05, local12
1f61c     01 26 06 F1 | 	add	local05, #1
1f620     A7 26 62 FC | 	wrlong	local05, fp
1f624     28 4E 85 F1 | 	sub	fp, #40
1f628     BC FF 9F FD | 	jmp	#LR__3432
1f62c                 | LR__3433
1f62c                 | LR__3434
1f62c     28 4E 05 F1 | 	add	fp, #40
1f630     A7 2A 02 FB | 	rdlong	local07, fp
1f634     28 4E 85 F1 | 	sub	fp, #40
1f638     01 2A 16 F2 | 	cmp	local07, #1 wc
1f63c     28 00 90 3D |  if_ae	jmp	#LR__3435
1f640     18 4E 05 F1 | 	add	fp, #24
1f644     A7 22 02 FB | 	rdlong	local03, fp
1f648     10 4E 05 F1 | 	add	fp, #16
1f64c     A7 2E 02 FB | 	rdlong	local09, fp
1f650     28 4E 85 F1 | 	sub	fp, #40
1f654     01 2E 66 F0 | 	shl	local09, #1
1f658     11 2F 02 F1 | 	add	local09, local03
1f65c     17 1F E2 FA | 	rdword	local01, local09
1f660     2E 1E 0E F2 | 	cmp	local01, #46 wz
1f664     14 00 90 5D |  if_ne	jmp	#LR__3436
1f668                 | LR__3435
1f668     10 4E 05 F1 | 	add	fp, #16
1f66c     A7 2A C2 FA | 	rdbyte	local07, fp
1f670     03 2A 46 F5 | 	or	local07, #3
1f674     A7 2A 42 FC | 	wrbyte	local07, fp
1f678     10 4E 85 F1 | 	sub	fp, #16
1f67c                 | LR__3436
1f67c     97 2C 48 FB | 	callpa	#(@LR__3438-@LR__3437)>>2,fcache_load_ptr_
1f680                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
1f680                 | LR__3437
1f680     2C 4E 05 F1 | 	add	fp, #44
1f684     A7 2A 02 FB | 	rdlong	local07, fp
1f688     2C 4E 85 F1 | 	sub	fp, #44
1f68c     01 2A 16 F2 | 	cmp	local07, #1 wc
1f690     44 00 90 CD |  if_b	jmp	#LR__3439
1f694     18 4E 05 F1 | 	add	fp, #24
1f698     A7 28 02 FB | 	rdlong	local06, fp
1f69c     14 4E 05 F1 | 	add	fp, #20
1f6a0     A7 22 02 FB | 	rdlong	local03, fp
1f6a4     2C 4E 85 F1 | 	sub	fp, #44
1f6a8     01 22 86 F1 | 	sub	local03, #1
1f6ac     01 22 66 F0 | 	shl	local03, #1
1f6b0     14 23 02 F1 | 	add	local03, local06
1f6b4     11 1F E2 FA | 	rdword	local01, local03
1f6b8     2E 1E 0E F2 | 	cmp	local01, #46 wz
1f6bc     18 00 90 AD |  if_e	jmp	#LR__3439
1f6c0     2C 4E 05 F1 | 	add	fp, #44
1f6c4     A7 1E 02 FB | 	rdlong	local01, fp
1f6c8     01 1E 86 F1 | 	sub	local01, #1
1f6cc     A7 1E 62 FC | 	wrlong	local01, fp
1f6d0     2C 4E 85 F1 | 	sub	fp, #44
1f6d4     A8 FF 9F FD | 	jmp	#LR__3437
1f6d8                 | LR__3438
1f6d8                 | LR__3439
1f6d8     04 4E 05 F1 | 	add	fp, #4
1f6dc     A7 12 02 FB | 	rdlong	arg01, fp
1f6e0     04 4E 85 F1 | 	sub	fp, #4
1f6e4     20 12 06 F1 | 	add	arg01, #32
1f6e8     20 14 06 F6 | 	mov	arg02, #32
1f6ec     0B 16 06 F6 | 	mov	arg03, #11
1f6f0     09 37 02 F6 | 	mov	local13, arg01
1f6f4     98 00 A0 FD | 	call	#\builtin_bytefill_
1f6f8     1B FB 01 F6 | 	mov	result1, local13
1f6fc     0C 4E 05 F1 | 	add	fp, #12
1f700     A7 00 48 FC | 	wrbyte	#0, fp
1f704     A7 2A C2 FA | 	rdbyte	local07, fp
1f708     14 4E 05 F1 | 	add	fp, #20
1f70c     A7 2A 62 FC | 	wrlong	local07, fp
1f710     04 4E 05 F1 | 	add	fp, #4
1f714     A7 10 68 FC | 	wrlong	#8, fp
1f718     24 4E 85 F1 | 	sub	fp, #36
1f71c                 | ' 
1f71c                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
1f71c                 | ' 	i = b = 0; ni = 8;
1f71c                 | ' 	for (;;) {
1f71c                 | LR__3440
1f71c     18 4E 05 F1 | 	add	fp, #24
1f720     A7 22 02 FB | 	rdlong	local03, fp
1f724     10 4E 05 F1 | 	add	fp, #16
1f728     A7 2E 02 FB | 	rdlong	local09, fp
1f72c     17 25 02 F6 | 	mov	local04, local09
1f730     01 24 06 F1 | 	add	local04, #1
1f734     A7 24 62 FC | 	wrlong	local04, fp
1f738     01 2E 66 F0 | 	shl	local09, #1
1f73c     11 2F 02 F1 | 	add	local09, local03
1f740     17 29 E2 FA | 	rdword	local06, local09
1f744     14 4E 85 F1 | 	sub	fp, #20
1f748     A7 28 52 FC | 	wrword	local06, fp
1f74c     A7 2A EA FA | 	rdword	local07, fp wz
1f750     14 4E 85 F1 | 	sub	fp, #20
1f754     74 03 90 AD |  if_e	jmp	#LR__3456
1f758     14 4E 05 F1 | 	add	fp, #20
1f75c     A7 2A E2 FA | 	rdword	local07, fp
1f760     14 4E 85 F1 | 	sub	fp, #20
1f764     20 2A 0E F2 | 	cmp	local07, #32 wz
1f768     30 00 90 AD |  if_e	jmp	#LR__3441
1f76c     14 4E 05 F1 | 	add	fp, #20
1f770     A7 1E E2 FA | 	rdword	local01, fp
1f774     14 4E 85 F1 | 	sub	fp, #20
1f778     2E 1E 0E F2 | 	cmp	local01, #46 wz
1f77c     34 00 90 5D |  if_ne	jmp	#LR__3442
1f780     28 4E 05 F1 | 	add	fp, #40
1f784     A7 24 02 FB | 	rdlong	local04, fp
1f788     04 4E 05 F1 | 	add	fp, #4
1f78c     A7 30 02 FB | 	rdlong	local10, fp
1f790     2C 4E 85 F1 | 	sub	fp, #44
1f794     18 25 0A F2 | 	cmp	local04, local10 wz
1f798     18 00 90 AD |  if_e	jmp	#LR__3442
1f79c                 | LR__3441
1f79c     10 4E 05 F1 | 	add	fp, #16
1f7a0     A7 2A C2 FA | 	rdbyte	local07, fp
1f7a4     03 2A 46 F5 | 	or	local07, #3
1f7a8     A7 2A 42 FC | 	wrbyte	local07, fp
1f7ac     10 4E 85 F1 | 	sub	fp, #16
1f7b0                 | ' 			cf |=  0x01  |  0x02 ;
1f7b0                 | ' 			continue;
1f7b0     68 FF 9F FD | 	jmp	#LR__3440
1f7b4                 | LR__3442
1f7b4     20 4E 05 F1 | 	add	fp, #32
1f7b8     A7 2A 02 FB | 	rdlong	local07, fp
1f7bc     04 4E 05 F1 | 	add	fp, #4
1f7c0     A7 1E 02 FB | 	rdlong	local01, fp
1f7c4     24 4E 85 F1 | 	sub	fp, #36
1f7c8     0F 2B 12 F2 | 	cmp	local07, local01 wc
1f7cc     1C 00 90 3D |  if_ae	jmp	#LR__3443
1f7d0     28 4E 05 F1 | 	add	fp, #40
1f7d4     A7 2C 02 FB | 	rdlong	local08, fp
1f7d8     04 4E 05 F1 | 	add	fp, #4
1f7dc     A7 30 02 FB | 	rdlong	local10, fp
1f7e0     2C 4E 85 F1 | 	sub	fp, #44
1f7e4     18 2D 0A F2 | 	cmp	local08, local10 wz
1f7e8     B0 00 90 5D |  if_ne	jmp	#LR__3445
1f7ec                 | LR__3443
1f7ec     24 4E 05 F1 | 	add	fp, #36
1f7f0     A7 2A 02 FB | 	rdlong	local07, fp
1f7f4     24 4E 85 F1 | 	sub	fp, #36
1f7f8     0B 2A 0E F2 | 	cmp	local07, #11 wz
1f7fc     18 00 90 5D |  if_ne	jmp	#LR__3444
1f800     10 4E 05 F1 | 	add	fp, #16
1f804     A7 2A C2 FA | 	rdbyte	local07, fp
1f808     03 2A 46 F5 | 	or	local07, #3
1f80c     A7 2A 42 FC | 	wrbyte	local07, fp
1f810     10 4E 85 F1 | 	sub	fp, #16
1f814                 | ' 				cf |=  0x01  |  0x02 ;
1f814                 | ' 				break;
1f814     B4 02 90 FD | 	jmp	#LR__3456
1f818                 | LR__3444
1f818     28 4E 05 F1 | 	add	fp, #40
1f81c     A7 2A 02 FB | 	rdlong	local07, fp
1f820     04 4E 05 F1 | 	add	fp, #4
1f824     A7 1E 02 FB | 	rdlong	local01, fp
1f828     2C 4E 85 F1 | 	sub	fp, #44
1f82c     0F 2B 0A F2 | 	cmp	local07, local01 wz
1f830     10 4E 05 51 |  if_ne	add	fp, #16
1f834     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1f838     03 2A 46 55 |  if_ne	or	local07, #3
1f83c     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1f840     10 4E 85 51 |  if_ne	sub	fp, #16
1f844     28 4E 05 F1 | 	add	fp, #40
1f848     A7 2A 02 FB | 	rdlong	local07, fp
1f84c     04 4E 05 F1 | 	add	fp, #4
1f850     A7 20 02 FB | 	rdlong	local02, fp
1f854     2C 4E 85 F1 | 	sub	fp, #44
1f858     10 2B 1A F2 | 	cmp	local07, local02 wcz
1f85c     6C 02 90 1D |  if_a	jmp	#LR__3456
1f860     2C 4E 05 F1 | 	add	fp, #44
1f864     A7 2A 02 FB | 	rdlong	local07, fp
1f868     04 4E 85 F1 | 	sub	fp, #4
1f86c     A7 2A 62 FC | 	wrlong	local07, fp
1f870     08 4E 85 F1 | 	sub	fp, #8
1f874     A7 10 68 FC | 	wrlong	#8, fp
1f878     04 4E 05 F1 | 	add	fp, #4
1f87c     A7 16 68 FC | 	wrlong	#11, fp
1f880     18 4E 85 F1 | 	sub	fp, #24
1f884     A7 32 C2 FA | 	rdbyte	local11, fp
1f888     19 2B E2 F8 | 	getbyte	local07, local11, #0
1f88c     02 2A 66 F0 | 	shl	local07, #2
1f890     A7 2A 42 FC | 	wrbyte	local07, fp
1f894     0C 4E 85 F1 | 	sub	fp, #12
1f898                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
1f898                 | ' 			continue;
1f898     80 FE 9F FD | 	jmp	#LR__3440
1f89c                 | LR__3445
1f89c     14 4E 05 F1 | 	add	fp, #20
1f8a0     A7 2A E2 FA | 	rdword	local07, fp
1f8a4     14 4E 85 F1 | 	sub	fp, #20
1f8a8     80 2A 16 F2 | 	cmp	local07, #128 wc
1f8ac     6C 00 90 CD |  if_b	jmp	#LR__3447
1f8b0     10 4E 05 F1 | 	add	fp, #16
1f8b4     A7 2A C2 FA | 	rdbyte	local07, fp
1f8b8     02 2A 46 F5 | 	or	local07, #2
1f8bc     A7 2A 42 FC | 	wrbyte	local07, fp
1f8c0     04 4E 05 F1 | 	add	fp, #4
1f8c4     A7 12 E2 FA | 	rdword	arg01, fp
1f8c8     14 4E 85 F1 | 	sub	fp, #20
1f8cc     01 00 00 FF 
1f8d0     52 15 06 F6 | 	mov	arg02, ##850
1f8d4     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
1f8d8     14 4E 05 F1 | 	add	fp, #20
1f8dc     A7 FA 51 FC | 	wrword	result1, fp
1f8e0     A7 2A E2 FA | 	rdword	local07, fp
1f8e4     14 4E 85 F1 | 	sub	fp, #20
1f8e8     80 2A CE F7 | 	test	local07, #128 wz
1f8ec     2C 00 90 AD |  if_e	jmp	#LR__3446
1f8f0     14 4E 05 F1 | 	add	fp, #20
1f8f4     A7 20 E2 FA | 	rdword	local02, fp
1f8f8     7F 20 06 F5 | 	and	local02, #127
1f8fc     01 00 00 FF 
1f900     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
1f904     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
1f908     10 2B C2 FA | 	rdbyte	local07, local02
1f90c     A7 2A 52 FC | 	wrword	local07, fp
1f910     14 4E 85 F1 | 	sub	fp, #20
1f914     01 00 00 FF 
1f918     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
1f91c                 | LR__3446
1f91c                 | LR__3447
1f91c     14 4E 05 F1 | 	add	fp, #20
1f920     A7 2A E2 FA | 	rdword	local07, fp
1f924     14 4E 85 F1 | 	sub	fp, #20
1f928     00 2B 16 F2 | 	cmp	local07, #256 wc
1f92c     88 00 90 CD |  if_b	jmp	#LR__3449
1f930     24 4E 05 F1 | 	add	fp, #36
1f934     A7 2A 02 FB | 	rdlong	local07, fp
1f938     01 2A 86 F1 | 	sub	local07, #1
1f93c     04 4E 85 F1 | 	sub	fp, #4
1f940     A7 20 02 FB | 	rdlong	local02, fp
1f944     20 4E 85 F1 | 	sub	fp, #32
1f948     15 21 12 F2 | 	cmp	local02, local07 wc
1f94c     2C 00 90 CD |  if_b	jmp	#LR__3448
1f950     10 4E 05 F1 | 	add	fp, #16
1f954     A7 32 C2 FA | 	rdbyte	local11, fp
1f958     19 2B E2 F8 | 	getbyte	local07, local11, #0
1f95c     03 2A 46 F5 | 	or	local07, #3
1f960     A7 2A 42 FC | 	wrbyte	local07, fp
1f964     14 4E 05 F1 | 	add	fp, #20
1f968     A7 2A 02 FB | 	rdlong	local07, fp
1f96c     04 4E 85 F1 | 	sub	fp, #4
1f970     A7 2A 62 FC | 	wrlong	local07, fp
1f974     20 4E 85 F1 | 	sub	fp, #32
1f978                 | ' 				cf |=  0x01  |  0x02 ;
1f978                 | ' 				i = ni; continue;
1f978     A0 FD 9F FD | 	jmp	#LR__3440
1f97c                 | LR__3448
1f97c     04 4E 05 F1 | 	add	fp, #4
1f980     A7 2E 02 FB | 	rdlong	local09, fp
1f984     1C 4E 05 F1 | 	add	fp, #28
1f988     A7 30 02 FB | 	rdlong	local10, fp
1f98c     18 25 02 F6 | 	mov	local04, local10
1f990     01 24 06 F1 | 	add	local04, #1
1f994     A7 24 62 FC | 	wrlong	local04, fp
1f998     20 2E 06 F1 | 	add	local09, #32
1f99c     17 31 02 F1 | 	add	local10, local09
1f9a0     0C 4E 85 F1 | 	sub	fp, #12
1f9a4     A7 22 E2 FA | 	rdword	local03, fp
1f9a8     14 4E 85 F1 | 	sub	fp, #20
1f9ac     08 22 46 F0 | 	shr	local03, #8
1f9b0     18 23 42 FC | 	wrbyte	local03, local10
1f9b4     D4 00 90 FD | 	jmp	#LR__3455
1f9b8                 | LR__3449
1f9b8     14 4E 05 F1 | 	add	fp, #20
1f9bc     A7 2A EA FA | 	rdword	local07, fp wz
1f9c0     14 4E 85 F1 | 	sub	fp, #20
1f9c4     20 00 90 AD |  if_e	jmp	#LR__3450
1f9c8     29 01 00 FF 
1f9cc     55 13 06 F6 | 	mov	arg01, ##@LR__4083
1f9d0     14 4E 05 F1 | 	add	fp, #20
1f9d4     A7 14 E2 FA | 	rdword	arg02, fp
1f9d8     14 4E 85 F1 | 	sub	fp, #20
1f9dc     48 CB BF FD | 	call	#_fatfs_cc_strchr
1f9e0     00 FA 0D F2 | 	cmp	result1, #0 wz
1f9e4     20 00 90 AD |  if_e	jmp	#LR__3451
1f9e8                 | LR__3450
1f9e8     14 4E 05 F1 | 	add	fp, #20
1f9ec     A7 BE 58 FC | 	wrword	#95, fp
1f9f0     04 4E 85 F1 | 	sub	fp, #4
1f9f4     A7 2A C2 FA | 	rdbyte	local07, fp
1f9f8     03 2A 46 F5 | 	or	local07, #3
1f9fc     A7 2A 42 FC | 	wrbyte	local07, fp
1fa00     10 4E 85 F1 | 	sub	fp, #16
1fa04     84 00 90 FD | 	jmp	#LR__3454
1fa08                 | LR__3451
1fa08     14 4E 05 F1 | 	add	fp, #20
1fa0c     A7 2A E2 FA | 	rdword	local07, fp
1fa10     14 4E 85 F1 | 	sub	fp, #20
1fa14     41 2A 16 F2 | 	cmp	local07, #65 wc
1fa18     24 00 90 CD |  if_b	jmp	#LR__3452
1fa1c     14 4E 05 F1 | 	add	fp, #20
1fa20     A7 1E E2 FA | 	rdword	local01, fp
1fa24     14 4E 85 F1 | 	sub	fp, #20
1fa28     5B 1E 16 F2 | 	cmp	local01, #91 wc
1fa2c     0C 4E 05 C1 |  if_b	add	fp, #12
1fa30     A7 2A C2 CA |  if_b	rdbyte	local07, fp
1fa34     02 2A 46 C5 |  if_b	or	local07, #2
1fa38     A7 2A 42 CC |  if_b	wrbyte	local07, fp
1fa3c     0C 4E 85 C1 |  if_b	sub	fp, #12
1fa40                 | LR__3452
1fa40     14 4E 05 F1 | 	add	fp, #20
1fa44     A7 2A E2 FA | 	rdword	local07, fp
1fa48     14 4E 85 F1 | 	sub	fp, #20
1fa4c     61 2A 16 F2 | 	cmp	local07, #97 wc
1fa50     38 00 90 CD |  if_b	jmp	#LR__3453
1fa54     14 4E 05 F1 | 	add	fp, #20
1fa58     A7 1E E2 FA | 	rdword	local01, fp
1fa5c     14 4E 85 F1 | 	sub	fp, #20
1fa60     7B 1E 16 F2 | 	cmp	local01, #123 wc
1fa64     24 00 90 3D |  if_ae	jmp	#LR__3453
1fa68     0C 4E 05 F1 | 	add	fp, #12
1fa6c     A7 2A C2 FA | 	rdbyte	local07, fp
1fa70     01 2A 46 F5 | 	or	local07, #1
1fa74     A7 2A 42 FC | 	wrbyte	local07, fp
1fa78     08 4E 05 F1 | 	add	fp, #8
1fa7c     A7 2A E2 FA | 	rdword	local07, fp
1fa80     20 2A 86 F1 | 	sub	local07, #32
1fa84     A7 2A 52 FC | 	wrword	local07, fp
1fa88     14 4E 85 F1 | 	sub	fp, #20
1fa8c                 | LR__3453
1fa8c                 | LR__3454
1fa8c                 | LR__3455
1fa8c     04 4E 05 F1 | 	add	fp, #4
1fa90     A7 32 02 FB | 	rdlong	local11, fp
1fa94     19 2F 02 F6 | 	mov	local09, local11
1fa98     1C 4E 05 F1 | 	add	fp, #28
1fa9c     A7 20 02 FB | 	rdlong	local02, fp
1faa0     10 25 02 F6 | 	mov	local04, local02
1faa4     01 24 06 F1 | 	add	local04, #1
1faa8     A7 24 62 FC | 	wrlong	local04, fp
1faac     10 31 02 F6 | 	mov	local10, local02
1fab0     20 2E 06 F1 | 	add	local09, #32
1fab4     17 31 02 F1 | 	add	local10, local09
1fab8     0C 4E 85 F1 | 	sub	fp, #12
1fabc     A7 22 E2 FA | 	rdword	local03, fp
1fac0     14 4E 85 F1 | 	sub	fp, #20
1fac4     18 23 42 FC | 	wrbyte	local03, local10
1fac8     50 FC 9F FD | 	jmp	#LR__3440
1facc                 | LR__3456
1facc     04 4E 05 F1 | 	add	fp, #4
1fad0     A7 32 02 FB | 	rdlong	local11, fp
1fad4     04 4E 85 F1 | 	sub	fp, #4
1fad8     20 32 06 F1 | 	add	local11, #32
1fadc     19 2B C2 FA | 	rdbyte	local07, local11
1fae0     E5 2A 0E F2 | 	cmp	local07, #229 wz
1fae4     04 4E 05 A1 |  if_e	add	fp, #4
1fae8     A7 2A 02 AB |  if_e	rdlong	local07, fp
1faec     04 4E 85 A1 |  if_e	sub	fp, #4
1faf0     20 2A 06 A1 |  if_e	add	local07, #32
1faf4     15 0B 48 AC |  if_e	wrbyte	#5, local07
1faf8     24 4E 05 F1 | 	add	fp, #36
1fafc     A7 2A 02 FB | 	rdlong	local07, fp
1fb00     24 4E 85 F1 | 	sub	fp, #36
1fb04     08 2A 0E F2 | 	cmp	local07, #8 wz
1fb08     0C 4E 05 A1 |  if_e	add	fp, #12
1fb0c     A7 2A C2 AA |  if_e	rdbyte	local07, fp
1fb10     02 2A 66 A0 |  if_e	shl	local07, #2
1fb14     A7 2A 42 AC |  if_e	wrbyte	local07, fp
1fb18     0C 4E 85 A1 |  if_e	sub	fp, #12
1fb1c     0C 4E 05 F1 | 	add	fp, #12
1fb20     A7 2A C2 FA | 	rdbyte	local07, fp
1fb24     0C 4E 85 F1 | 	sub	fp, #12
1fb28     0C 2A 06 F5 | 	and	local07, #12
1fb2c     0C 2A 0E F2 | 	cmp	local07, #12 wz
1fb30     18 00 90 AD |  if_e	jmp	#LR__3457
1fb34     0C 4E 05 F1 | 	add	fp, #12
1fb38     A7 1E C2 FA | 	rdbyte	local01, fp
1fb3c     0C 4E 85 F1 | 	sub	fp, #12
1fb40     03 1E 06 F5 | 	and	local01, #3
1fb44     03 1E 0E F2 | 	cmp	local01, #3 wz
1fb48     14 00 90 5D |  if_ne	jmp	#LR__3458
1fb4c                 | LR__3457
1fb4c     10 4E 05 F1 | 	add	fp, #16
1fb50     A7 2A C2 FA | 	rdbyte	local07, fp
1fb54     02 2A 46 F5 | 	or	local07, #2
1fb58     A7 2A 42 FC | 	wrbyte	local07, fp
1fb5c     10 4E 85 F1 | 	sub	fp, #16
1fb60                 | LR__3458
1fb60     10 4E 05 F1 | 	add	fp, #16
1fb64     A7 2A C2 FA | 	rdbyte	local07, fp
1fb68     10 4E 85 F1 | 	sub	fp, #16
1fb6c     02 2A CE F7 | 	test	local07, #2 wz
1fb70     48 00 90 5D |  if_ne	jmp	#LR__3459
1fb74     0C 4E 05 F1 | 	add	fp, #12
1fb78     A7 2A C2 FA | 	rdbyte	local07, fp
1fb7c     0C 4E 85 F1 | 	sub	fp, #12
1fb80     01 2A CE F7 | 	test	local07, #1 wz
1fb84     10 4E 05 51 |  if_ne	add	fp, #16
1fb88     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1fb8c     10 2A 46 55 |  if_ne	or	local07, #16
1fb90     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1fb94     10 4E 85 51 |  if_ne	sub	fp, #16
1fb98     0C 4E 05 F1 | 	add	fp, #12
1fb9c     A7 2A C2 FA | 	rdbyte	local07, fp
1fba0     0C 4E 85 F1 | 	sub	fp, #12
1fba4     04 2A CE F7 | 	test	local07, #4 wz
1fba8     10 4E 05 51 |  if_ne	add	fp, #16
1fbac     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
1fbb0     08 2A 46 55 |  if_ne	or	local07, #8
1fbb4     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
1fbb8     10 4E 85 51 |  if_ne	sub	fp, #16
1fbbc                 | LR__3459
1fbbc     04 4E 05 F1 | 	add	fp, #4
1fbc0     A7 2A 02 FB | 	rdlong	local07, fp
1fbc4     0C 4E 05 F1 | 	add	fp, #12
1fbc8     A7 1E C2 FA | 	rdbyte	local01, fp
1fbcc     10 4E 85 F1 | 	sub	fp, #16
1fbd0     2B 2A 06 F1 | 	add	local07, #43
1fbd4     15 1F 42 FC | 	wrbyte	local01, local07
1fbd8                 | ' 	}
1fbd8                 | ' 
1fbd8                 | ' 	dp->fn[ 11 ] = cf;
1fbd8                 | ' 
1fbd8                 | ' 	return FR_OK;
1fbd8     00 FA 05 F6 | 	mov	result1, #0
1fbdc                 | LR__3460
1fbdc     A7 F0 03 F6 | 	mov	ptra, fp
1fbe0     B2 00 A0 FD | 	call	#popregs_
1fbe4                 | _fatfs_cc_create_name_ret
1fbe4     2D 00 64 FD | 	ret
1fbe8                 | 
1fbe8                 | _fatfs_cc_follow_path
1fbe8     02 4A 05 F6 | 	mov	COUNT_, #2
1fbec     A8 00 A0 FD | 	call	#pushregs_
1fbf0     18 F0 07 F1 | 	add	ptra, #24
1fbf4     04 4E 05 F1 | 	add	fp, #4
1fbf8     A7 12 62 FC | 	wrlong	arg01, fp
1fbfc     04 4E 05 F1 | 	add	fp, #4
1fc00     A7 14 62 FC | 	wrlong	arg02, fp
1fc04     04 4E 85 F1 | 	sub	fp, #4
1fc08     A7 FA 01 FB | 	rdlong	result1, fp
1fc0c     FD 1E 02 FB | 	rdlong	local01, result1
1fc10     10 4E 05 F1 | 	add	fp, #16
1fc14     A7 1E 62 FC | 	wrlong	local01, fp
1fc18     14 4E 85 F1 | 	sub	fp, #20
1fc1c     97 24 48 FB | 	callpa	#(@LR__3472-@LR__3470)>>2,fcache_load_ptr_
1fc20                 | ' )
1fc20                 | ' {
1fc20                 | ' 	FRESULT res;
1fc20                 | ' 	BYTE ns;
1fc20                 | ' 	FATFS *fs = dp->obj.fs;
1fc20                 | ' #line 3034 "ff.c"
1fc20                 | ' 	{
1fc20                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
1fc20                 | LR__3470
1fc20     08 4E 05 F1 | 	add	fp, #8
1fc24     A7 1E 02 FB | 	rdlong	local01, fp
1fc28     08 4E 85 F1 | 	sub	fp, #8
1fc2c     0F 1F C2 FA | 	rdbyte	local01, local01
1fc30     2F 1E 0E F2 | 	cmp	local01, #47 wz
1fc34     18 00 90 AD |  if_e	jmp	#LR__3471
1fc38     08 4E 05 F1 | 	add	fp, #8
1fc3c     A7 1E 02 FB | 	rdlong	local01, fp
1fc40     08 4E 85 F1 | 	sub	fp, #8
1fc44     0F 1F C2 FA | 	rdbyte	local01, local01
1fc48     5C 1E 0E F2 | 	cmp	local01, #92 wz
1fc4c     18 00 90 5D |  if_ne	jmp	#LR__3473
1fc50                 | LR__3471
1fc50     08 4E 05 F1 | 	add	fp, #8
1fc54     A7 1E 02 FB | 	rdlong	local01, fp
1fc58     01 1E 06 F1 | 	add	local01, #1
1fc5c     A7 1E 62 FC | 	wrlong	local01, fp
1fc60     08 4E 85 F1 | 	sub	fp, #8
1fc64     B8 FF 9F FD | 	jmp	#LR__3470
1fc68                 | LR__3472
1fc68                 | LR__3473
1fc68     04 4E 05 F1 | 	add	fp, #4
1fc6c     A7 1E 02 FB | 	rdlong	local01, fp
1fc70     08 1E 06 F1 | 	add	local01, #8
1fc74     0F 01 68 FC | 	wrlong	#0, local01
1fc78     04 4E 05 F1 | 	add	fp, #4
1fc7c     A7 1E 02 FB | 	rdlong	local01, fp
1fc80     08 4E 85 F1 | 	sub	fp, #8
1fc84     0F 1F C2 FA | 	rdbyte	local01, local01
1fc88     20 1E 16 F2 | 	cmp	local01, #32 wc
1fc8c     30 00 90 3D |  if_ae	jmp	#LR__3474
1fc90     04 4E 05 F1 | 	add	fp, #4
1fc94     A7 1E 02 FB | 	rdlong	local01, fp
1fc98     2B 1E 06 F1 | 	add	local01, #43
1fc9c     0F 01 49 FC | 	wrbyte	#128, local01
1fca0     A7 12 02 FB | 	rdlong	arg01, fp
1fca4     04 4E 85 F1 | 	sub	fp, #4
1fca8     00 14 06 F6 | 	mov	arg02, #0
1fcac     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
1fcb0     0C 4E 05 F1 | 	add	fp, #12
1fcb4     A7 FA 61 FC | 	wrlong	result1, fp
1fcb8     0C 4E 85 F1 | 	sub	fp, #12
1fcbc     1C 01 90 FD | 	jmp	#LR__3478
1fcc0                 | LR__3474
1fcc0                 | ' 		for (;;) {
1fcc0                 | LR__3475
1fcc0     04 4E 05 F1 | 	add	fp, #4
1fcc4     A7 12 02 FB | 	rdlong	arg01, fp
1fcc8     04 4E 05 F1 | 	add	fp, #4
1fccc     A7 14 02 F6 | 	mov	arg02, fp
1fcd0     08 4E 85 F1 | 	sub	fp, #8
1fcd4     14 F6 BF FD | 	call	#_fatfs_cc_create_name
1fcd8     0C 4E 05 F1 | 	add	fp, #12
1fcdc     A7 FA 61 FC | 	wrlong	result1, fp
1fce0     00 FA 4D F2 | 	cmps	result1, #0 wz
1fce4     0C 4E 85 F1 | 	sub	fp, #12
1fce8     F0 00 90 5D |  if_ne	jmp	#LR__3477
1fcec     04 4E 05 F1 | 	add	fp, #4
1fcf0     A7 12 02 FB | 	rdlong	arg01, fp
1fcf4     04 4E 85 F1 | 	sub	fp, #4
1fcf8     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
1fcfc     0C 4E 05 F1 | 	add	fp, #12
1fd00     A7 FA 61 FC | 	wrlong	result1, fp
1fd04     08 4E 85 F1 | 	sub	fp, #8
1fd08     A7 1E 02 FB | 	rdlong	local01, fp
1fd0c     2B 1E 06 F1 | 	add	local01, #43
1fd10     0F 1F C2 FA | 	rdbyte	local01, local01
1fd14     0C 4E 05 F1 | 	add	fp, #12
1fd18     A7 1E 42 FC | 	wrbyte	local01, fp
1fd1c     04 4E 85 F1 | 	sub	fp, #4
1fd20     A7 1E 0A FB | 	rdlong	local01, fp wz
1fd24     0C 4E 85 F1 | 	sub	fp, #12
1fd28     34 00 90 AD |  if_e	jmp	#LR__3476
1fd2c     0C 4E 05 F1 | 	add	fp, #12
1fd30     A7 1E 02 FB | 	rdlong	local01, fp
1fd34     0C 4E 85 F1 | 	sub	fp, #12
1fd38     04 1E 0E F2 | 	cmp	local01, #4 wz
1fd3c     9C 00 90 5D |  if_ne	jmp	#LR__3477
1fd40     10 4E 05 F1 | 	add	fp, #16
1fd44     A7 1E C2 FA | 	rdbyte	local01, fp
1fd48     10 4E 85 F1 | 	sub	fp, #16
1fd4c     04 1E CE F7 | 	test	local01, #4 wz
1fd50     0C 4E 05 A1 |  if_e	add	fp, #12
1fd54     A7 0A 68 AC |  if_e	wrlong	#5, fp
1fd58     0C 4E 85 A1 |  if_e	sub	fp, #12
1fd5c                 | ' 					}
1fd5c                 | ' 				}
1fd5c                 | ' 				break;
1fd5c     7C 00 90 FD | 	jmp	#LR__3477
1fd60                 | LR__3476
1fd60     10 4E 05 F1 | 	add	fp, #16
1fd64     A7 1E C2 FA | 	rdbyte	local01, fp
1fd68     10 4E 85 F1 | 	sub	fp, #16
1fd6c     04 1E CE F7 | 	test	local01, #4 wz
1fd70     68 00 90 5D |  if_ne	jmp	#LR__3477
1fd74     04 4E 05 F1 | 	add	fp, #4
1fd78     A7 1E 02 FB | 	rdlong	local01, fp
1fd7c     04 4E 85 F1 | 	sub	fp, #4
1fd80     06 1E 06 F1 | 	add	local01, #6
1fd84     0F 1F C2 FA | 	rdbyte	local01, local01
1fd88     10 1E CE F7 | 	test	local01, #16 wz
1fd8c     0C 4E 05 A1 |  if_e	add	fp, #12
1fd90     A7 0A 68 AC |  if_e	wrlong	#5, fp
1fd94     0C 4E 85 A1 |  if_e	sub	fp, #12
1fd98                 | ' 				res = FR_NO_PATH; break;
1fd98     40 00 90 AD |  if_e	jmp	#LR__3477
1fd9c     04 4E 05 F1 | 	add	fp, #4
1fda0     A7 20 02 FB | 	rdlong	local02, fp
1fda4     10 1F 02 F6 | 	mov	local01, local02
1fda8     10 4E 05 F1 | 	add	fp, #16
1fdac     A7 14 02 FB | 	rdlong	arg02, fp
1fdb0     0A 13 02 F6 | 	mov	arg01, arg02
1fdb4     34 14 06 F1 | 	add	arg02, #52
1fdb8     14 4E 85 F1 | 	sub	fp, #20
1fdbc     10 20 06 F1 | 	add	local02, #16
1fdc0     10 21 02 FB | 	rdlong	local02, local02
1fdc4     FF 21 06 F5 | 	and	local02, #511
1fdc8     10 15 02 F1 | 	add	arg02, local02
1fdcc     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
1fdd0     08 1E 06 F1 | 	add	local01, #8
1fdd4     0F FB 61 FC | 	wrlong	result1, local01
1fdd8     E4 FE 9F FD | 	jmp	#LR__3475
1fddc                 | LR__3477
1fddc                 | LR__3478
1fddc                 | ' 			}
1fddc                 | ' #line 3090 "ff.c"
1fddc                 | ' 			{
1fddc                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
1fddc                 | ' 			}
1fddc                 | ' 		}
1fddc                 | ' 	}
1fddc                 | ' 
1fddc                 | ' 	return res;
1fddc     0C 4E 05 F1 | 	add	fp, #12
1fde0     A7 FA 01 FB | 	rdlong	result1, fp
1fde4     0C 4E 85 F1 | 	sub	fp, #12
1fde8     A7 F0 03 F6 | 	mov	ptra, fp
1fdec     B2 00 A0 FD | 	call	#popregs_
1fdf0                 | _fatfs_cc_follow_path_ret
1fdf0     2D 00 64 FD | 	ret
1fdf4                 | 
1fdf4                 | _fatfs_cc_get_ldnumber
1fdf4     01 00 66 F6 | 	neg	_var01, #1
1fdf8     09 03 0A FB | 	rdlong	_var02, arg01 wz
1fdfc     01 05 02 F6 | 	mov	_var03, _var02
1fe00     01 FA 65 A6 |  if_e	neg	result1, #1
1fe04     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
1fe08     97 10 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
1fe0c                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
1fe0c                 | LR__3480
1fe0c     02 07 C2 FA | 	rdbyte	_var04, _var03
1fe10     03 FB E1 F8 | 	getbyte	result1, _var04, #0
1fe14     20 FA 15 F2 | 	cmp	result1, #32 wc
1fe18     01 04 06 F1 | 	add	_var03, #1
1fe1c     03 09 02 36 |  if_ae	mov	_var05, _var04
1fe20     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
1fe24     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
1fe28     E0 FF 9F 1D |  if_a	jmp	#LR__3480
1fe2c                 | LR__3481
1fe2c     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
1fe30     3A 06 0E F2 | 	cmp	_var04, #58 wz
1fe34     40 00 90 5D |  if_ne	jmp	#LR__3483
1fe38     01 0A 06 F6 | 	mov	_var06, #1
1fe3c     01 09 C2 FA | 	rdbyte	_var05, _var02
1fe40     30 08 16 F2 | 	cmp	_var05, #48 wc
1fe44     1C 00 90 CD |  if_b	jmp	#LR__3482
1fe48     01 09 C2 FA | 	rdbyte	_var05, _var02
1fe4c     3A 08 16 F2 | 	cmp	_var05, #58 wc
1fe50     01 0D 02 C6 |  if_b	mov	_var07, _var02
1fe54     02 0C 06 C1 |  if_b	add	_var07, #2
1fe58     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
1fe5c     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
1fe60     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
1fe64                 | LR__3482
1fe64     01 0A 56 F2 | 	cmps	_var06, #1 wc
1fe68     05 01 02 C6 |  if_b	mov	_var01, _var06
1fe6c     09 05 62 CC |  if_b	wrlong	_var03, arg01
1fe70                 | ' 			vol = i;
1fe70                 | ' 			*path = tt;
1fe70                 | ' 		}
1fe70                 | ' 		return vol;
1fe70     00 FB 01 F6 | 	mov	result1, _var01
1fe74     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
1fe78                 | LR__3483
1fe78                 | ' 	}
1fe78                 | ' #line 3170 "ff.c"
1fe78                 | ' 	vol = 0;
1fe78                 | ' 
1fe78                 | ' 	return vol;
1fe78     00 FA 05 F6 | 	mov	result1, #0
1fe7c                 | _fatfs_cc_get_ldnumber_ret
1fe7c     2D 00 64 FD | 	ret
1fe80                 | 
1fe80                 | _fatfs_cc_check_fs
1fe80     04 4A 05 F6 | 	mov	COUNT_, #4
1fe84     A8 00 A0 FD | 	call	#pushregs_
1fe88     09 1F 02 F6 | 	mov	local01, arg01
1fe8c     03 1E 06 F1 | 	add	local01, #3
1fe90     0F 01 48 FC | 	wrbyte	#0, local01
1fe94     2D 1E 06 F1 | 	add	local01, #45
1fe98     FF FF FF FF 
1fe9c     0F FF 6B FC | 	wrlong	##-1, local01
1fea0     30 1E 86 F1 | 	sub	local01, #48
1fea4     0F 13 02 F6 | 	mov	arg01, local01
1fea8     18 D5 BF FD | 	call	#_fatfs_cc_move_window
1feac     00 FA 0D F2 | 	cmp	result1, #0 wz
1feb0     04 FA 05 56 |  if_ne	mov	result1, #4
1feb4     94 01 90 5D |  if_ne	jmp	#LR__3494
1feb8     34 1E 06 F1 | 	add	local01, #52
1febc     0F 13 02 F6 | 	mov	arg01, local01
1fec0     FE 13 06 F1 | 	add	arg01, #510
1fec4                 | ' {
1fec4                 | ' 
1fec4                 | ' 	return *((WORD*)ptr);
1fec4     09 21 E2 FA | 	rdword	local02, arg01
1fec8     0F 23 C2 FA | 	rdbyte	local03, local01
1fecc     34 1E 86 F1 | 	sub	local01, #52
1fed0     11 25 E2 F8 | 	getbyte	local04, local03, #0
1fed4     EB 24 0E F2 | 	cmp	local04, #235 wz
1fed8     11 17 02 56 |  if_ne	mov	arg03, local03
1fedc     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
1fee0     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
1fee4     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
1fee8     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
1feec     44 01 90 5D |  if_ne	jmp	#LR__3493
1fef0     10 25 32 F9 | 	getword	local04, local02, #0
1fef4     55 00 00 FF 
1fef8     55 24 0E F2 | 	cmp	local04, ##43605 wz
1fefc     2C 00 90 5D |  if_ne	jmp	#LR__3490
1ff00     34 1E 06 F1 | 	add	local01, #52
1ff04     0F 13 02 F6 | 	mov	arg01, local01
1ff08     34 1E 86 F1 | 	sub	local01, #52
1ff0c     52 12 06 F1 | 	add	arg01, #82
1ff10     29 01 00 FF 
1ff14     5C 15 06 F6 | 	mov	arg02, ##@LR__4084
1ff18     08 16 06 F6 | 	mov	arg03, #8
1ff1c     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
1ff20     00 FA 0D F2 | 	cmp	result1, #0 wz
1ff24                 | ' 			return 0;
1ff24     00 FA 05 A6 |  if_e	mov	result1, #0
1ff28     20 01 90 AD |  if_e	jmp	#LR__3494
1ff2c                 | LR__3490
1ff2c     34 1E 06 F1 | 	add	local01, #52
1ff30     0F 13 02 F6 | 	mov	arg01, local01
1ff34     0B 12 06 F1 | 	add	arg01, #11
1ff38                 | ' {
1ff38                 | ' 
1ff38                 | ' 	return *((WORD*)ptr);
1ff38     09 FB E1 FA | 	rdword	result1, arg01
1ff3c     0D 1E 06 F1 | 	add	local01, #13
1ff40     0F 23 C2 FA | 	rdbyte	local03, local01
1ff44     41 1E 86 F1 | 	sub	local01, #65
1ff48     FD 24 32 F9 | 	getword	local04, result1, #0
1ff4c     FD 14 32 F9 | 	getword	arg02, result1, #0
1ff50     01 14 86 F1 | 	sub	arg02, #1
1ff54     0A 25 CA F7 | 	test	local04, arg02 wz
1ff58     D8 00 90 5D |  if_ne	jmp	#LR__3492
1ff5c     FD 14 32 F9 | 	getword	arg02, result1, #0
1ff60     01 00 00 FF 
1ff64     00 14 16 F2 | 	cmp	arg02, ##512 wc
1ff68     C8 00 90 CD |  if_b	jmp	#LR__3492
1ff6c     FD 14 32 F9 | 	getword	arg02, result1, #0
1ff70     01 00 00 FF 
1ff74     01 14 16 F2 | 	cmp	arg02, ##513 wc
1ff78     B8 00 90 3D |  if_ae	jmp	#LR__3492
1ff7c     11 13 02 F6 | 	mov	arg01, local03
1ff80     07 12 4E F7 | 	zerox	arg01, #7 wz
1ff84     AC 00 90 AD |  if_e	jmp	#LR__3492
1ff88     11 13 E2 F8 | 	getbyte	arg01, local03, #0
1ff8c     11 23 E2 F8 | 	getbyte	local03, local03, #0
1ff90     01 22 86 F1 | 	sub	local03, #1
1ff94     11 13 CA F7 | 	test	arg01, local03 wz
1ff98     98 00 90 5D |  if_ne	jmp	#LR__3492
1ff9c     34 1E 06 F1 | 	add	local01, #52
1ffa0     0F 13 02 F6 | 	mov	arg01, local01
1ffa4     34 1E 86 F1 | 	sub	local01, #52
1ffa8     0E 12 06 F1 | 	add	arg01, #14
1ffac                 | ' {
1ffac                 | ' 
1ffac                 | ' 	return *((WORD*)ptr);
1ffac     09 FB E9 FA | 	rdword	result1, arg01 wz
1ffb0     80 00 90 AD |  if_e	jmp	#LR__3492
1ffb4     44 1E 06 F1 | 	add	local01, #68
1ffb8     0F 13 C2 FA | 	rdbyte	arg01, local01
1ffbc     44 1E 86 F1 | 	sub	local01, #68
1ffc0     01 12 86 F1 | 	sub	arg01, #1
1ffc4     02 12 16 F2 | 	cmp	arg01, #2 wc
1ffc8     68 00 90 3D |  if_ae	jmp	#LR__3492
1ffcc     34 1E 06 F1 | 	add	local01, #52
1ffd0     0F 13 02 F6 | 	mov	arg01, local01
1ffd4     34 1E 86 F1 | 	sub	local01, #52
1ffd8     11 12 06 F1 | 	add	arg01, #17
1ffdc                 | ' {
1ffdc                 | ' 
1ffdc                 | ' 	return *((WORD*)ptr);
1ffdc     09 FB E9 FA | 	rdword	result1, arg01 wz
1ffe0     50 00 90 AD |  if_e	jmp	#LR__3492
1ffe4     34 1E 06 F1 | 	add	local01, #52
1ffe8     0F 13 02 F6 | 	mov	arg01, local01
1ffec     34 1E 86 F1 | 	sub	local01, #52
1fff0     13 12 06 F1 | 	add	arg01, #19
1fff4                 | ' {
1fff4                 | ' 
1fff4                 | ' 	return *((WORD*)ptr);
1fff4     09 FB E1 FA | 	rdword	result1, arg01
1fff8     FD 22 32 F9 | 	getword	local03, result1, #0
1fffc     80 22 16 F2 | 	cmp	local03, #128 wc
20000     20 00 90 3D |  if_ae	jmp	#LR__3491
20004     34 1E 06 F1 | 	add	local01, #52
20008     0F 13 02 F6 | 	mov	arg01, local01
2000c     34 1E 86 F1 | 	sub	local01, #52
20010     20 12 06 F1 | 	add	arg01, #32
20014                 | ' {
20014                 | ' 
20014                 | ' 	return *((DWORD*)ptr);
20014     09 FB 01 FB | 	rdlong	result1, arg01
20018     80 00 00 FF 
2001c     00 FA 15 F2 | 	cmp	result1, ##65536 wc
20020     10 00 90 CD |  if_b	jmp	#LR__3492
20024                 | LR__3491
20024     4A 1E 06 F1 | 	add	local01, #74
20028                 | ' {
20028                 | ' 
20028                 | ' 	return *((WORD*)ptr);
20028     0F FB E9 FA | 	rdword	result1, local01 wz
2002c                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2002c                 | ' 			&& ld_word(fs->win +  14 ) != 0
2002c                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2002c                 | ' 			&& ld_word(fs->win +  17 ) != 0
2002c                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2002c                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2002c                 | ' 				return 0;
2002c     00 FA 05 56 |  if_ne	mov	result1, #0
20030     18 00 90 5D |  if_ne	jmp	#LR__3494
20034                 | LR__3492
20034                 | LR__3493
20034                 | ' 		}
20034                 | ' 	}
20034                 | ' 	return sign == 0xAA55 ? 2 : 3;
20034     10 23 32 F9 | 	getword	local03, local02, #0
20038     55 00 00 FF 
2003c     55 22 0E F2 | 	cmp	local03, ##43605 wz
20040     02 24 06 A6 |  if_e	mov	local04, #2
20044     03 24 06 56 |  if_ne	mov	local04, #3
20048     12 FB 01 F6 | 	mov	result1, local04
2004c                 | LR__3494
2004c     A7 F0 03 F6 | 	mov	ptra, fp
20050     B2 00 A0 FD | 	call	#popregs_
20054                 | _fatfs_cc_check_fs_ret
20054     2D 00 64 FD | 	ret
20058                 | 
20058                 | _fatfs_cc_find_volume
20058     05 4A 05 F6 | 	mov	COUNT_, #5
2005c     A8 00 A0 FD | 	call	#pushregs_
20060     24 F0 07 F1 | 	add	ptra, #36
20064     09 1F 02 F6 | 	mov	local01, arg01
20068     0A 21 02 F6 | 	mov	local02, arg02
2006c     0F 13 02 F6 | 	mov	arg01, local01
20070     00 14 06 F6 | 	mov	arg02, #0
20074     08 FE BF FD | 	call	#_fatfs_cc_check_fs
20078     02 FA 0D F2 | 	cmp	result1, #2 wz
2007c     0C 00 90 AD |  if_e	jmp	#LR__3500
20080     03 FA 15 F2 | 	cmp	result1, #3 wc
20084     00 20 0E C2 |  if_b	cmp	local02, #0 wz
20088     D0 00 90 BD |  if_nc_or_z	jmp	#LR__3508
2008c                 | LR__3500
2008c                 | ' 	for (i = 0; i < 4; i++) {
2008c     00 22 06 F6 | 	mov	local03, #0
20090     97 26 48 FB | 	callpa	#(@LR__3502-@LR__3501)>>2,fcache_load_ptr_
20094                 | LR__3501
20094     04 22 16 F2 | 	cmp	local03, #4 wc
20098     44 00 90 3D |  if_ae	jmp	#LR__3503
2009c     11 25 02 F6 | 	mov	local04, local03
200a0     02 24 66 F0 | 	shl	local04, #2
200a4     14 4E 05 F1 | 	add	fp, #20
200a8     A7 24 02 F1 | 	add	local04, fp
200ac     34 1E 06 F1 | 	add	local01, #52
200b0     0F 13 02 F6 | 	mov	arg01, local01
200b4     34 1E 86 F1 | 	sub	local01, #52
200b8     BE 13 06 F1 | 	add	arg01, #446
200bc     11 15 02 F6 | 	mov	arg02, local03
200c0     04 14 66 F0 | 	shl	arg02, #4
200c4     0A 13 02 F1 | 	add	arg01, arg02
200c8     08 12 06 F1 | 	add	arg01, #8
200cc                 | ' {
200cc                 | ' 
200cc                 | ' 	return *((DWORD*)ptr);
200cc     09 FB 01 FB | 	rdlong	result1, arg01
200d0     14 4E 85 F1 | 	sub	fp, #20
200d4     12 FB 61 FC | 	wrlong	result1, local04
200d8     01 22 06 F1 | 	add	local03, #1
200dc     B4 FF 9F FD | 	jmp	#LR__3501
200e0                 | LR__3502
200e0                 | LR__3503
200e0     00 20 0E F2 | 	cmp	local02, #0 wz
200e4     10 25 02 56 |  if_ne	mov	local04, local02
200e8     01 24 86 51 |  if_ne	sub	local04, #1
200ec     00 24 06 A6 |  if_e	mov	local04, #0
200f0     12 23 02 F6 | 	mov	local03, local04
200f4                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
200f4                 | ' 	}
200f4                 | ' 	i = part ? part - 1 : 0;
200f4                 | ' 	do {
200f4                 | LR__3504
200f4     11 25 02 F6 | 	mov	local04, local03
200f8     02 24 66 F0 | 	shl	local04, #2
200fc     14 4E 05 F1 | 	add	fp, #20
20100     A7 24 02 F1 | 	add	local04, fp
20104     12 25 0A FB | 	rdlong	local04, local04 wz
20108     14 4E 85 F1 | 	sub	fp, #20
2010c     28 00 90 AD |  if_e	jmp	#LR__3505
20110     11 25 02 F6 | 	mov	local04, local03
20114     02 24 66 F0 | 	shl	local04, #2
20118     14 4E 05 F1 | 	add	fp, #20
2011c     A7 24 02 F1 | 	add	local04, fp
20120     12 15 02 FB | 	rdlong	arg02, local04
20124     0F 13 02 F6 | 	mov	arg01, local01
20128     14 4E 85 F1 | 	sub	fp, #20
2012c     50 FD BF FD | 	call	#_fatfs_cc_check_fs
20130     FD 24 02 F6 | 	mov	local04, result1
20134     04 00 90 FD | 	jmp	#LR__3506
20138                 | LR__3505
20138     03 24 06 F6 | 	mov	local04, #3
2013c                 | LR__3506
2013c     12 27 02 F6 | 	mov	local05, local04
20140     00 20 0E F2 | 	cmp	local02, #0 wz
20144     02 26 16 A2 |  if_e	cmp	local05, #2 wc
20148     0C 00 90 8D |  if_c_and_z	jmp	#LR__3507
2014c     01 22 06 A1 |  if_e	add	local03, #1
20150     04 22 16 A2 |  if_e	cmp	local03, #4 wc
20154     9C FF 9F 8D |  if_c_and_z	jmp	#LR__3504
20158                 | LR__3507
20158                 | ' 	return fmt;
20158     13 FB 01 F6 | 	mov	result1, local05
2015c                 | LR__3508
2015c     A7 F0 03 F6 | 	mov	ptra, fp
20160     B2 00 A0 FD | 	call	#popregs_
20164                 | _fatfs_cc_find_volume_ret
20164     2D 00 64 FD | 	ret
20168                 | 
20168                 | _fatfs_cc_mount_volume
20168     0B 4A 05 F6 | 	mov	COUNT_, #11
2016c     A8 00 A0 FD | 	call	#pushregs_
20170     0A 1F 02 F6 | 	mov	local01, arg02
20174     0B 21 02 F6 | 	mov	local02, arg03
20178     0F 01 68 FC | 	wrlong	#0, local01
2017c     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
20180     FD 22 02 F6 | 	mov	local03, result1
20184     00 22 56 F2 | 	cmps	local03, #0 wc
20188     0B FA 05 C6 |  if_b	mov	result1, #11
2018c     3C 05 90 CD |  if_b	jmp	#LR__3520
20190     11 17 02 F6 | 	mov	arg03, local03
20194     02 16 66 F0 | 	shl	arg03, #2
20198     F2 16 02 F1 | 	add	arg03, objptr
2019c     0B 25 0A FB | 	rdlong	local04, arg03 wz
201a0     0C FA 05 A6 |  if_e	mov	result1, #12
201a4     24 05 90 AD |  if_e	jmp	#LR__3520
201a8     0F 25 62 FC | 	wrlong	local04, local01
201ac     10 21 E2 F8 | 	getbyte	local02, local02, #0
201b0     FE 20 06 F5 | 	and	local02, #254
201b4     12 17 CA FA | 	rdbyte	arg03, local04 wz
201b8     4C 00 90 AD |  if_e	jmp	#LR__3511
201bc     01 24 06 F1 | 	add	local04, #1
201c0     12 13 CA FA | 	rdbyte	arg01, local04 wz
201c4     01 24 86 F1 | 	sub	local04, #1
201c8     01 FA 05 56 |  if_ne	mov	result1, #1
201cc                 | ' 
201cc                 | ' 	return Stat;
201cc     01 00 00 AF 
201d0     20 E4 05 A1 |  if_e	add	objptr, ##544
201d4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
201d8     01 00 00 AF 
201dc     20 E4 85 A1 |  if_e	sub	objptr, ##544
201e0     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
201e4     01 16 CE F7 | 	test	arg03, #1 wz
201e8     1C 00 90 5D |  if_ne	jmp	#LR__3510
201ec     00 20 0E F2 | 	cmp	local02, #0 wz
201f0     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
201f4     04 FA CD 57 |  if_ne	test	result1, #4 wz
201f8                 | ' 				return FR_WRITE_PROTECTED;
201f8     0A FA 05 56 |  if_ne	mov	result1, #10
201fc     CC 04 90 5D |  if_ne	jmp	#LR__3520
20200                 | ' 			}
20200                 | ' 			return FR_OK;
20200     00 FA 05 F6 | 	mov	result1, #0
20204     C4 04 90 FD | 	jmp	#LR__3520
20208                 | LR__3510
20208                 | LR__3511
20208     12 01 48 FC | 	wrbyte	#0, local04
2020c     01 24 06 F1 | 	add	local04, #1
20210     12 23 42 FC | 	wrbyte	local03, local04
20214     12 13 C2 FA | 	rdbyte	arg01, local04
20218     01 24 86 F1 | 	sub	local04, #1
2021c     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
20220     FD 16 02 F6 | 	mov	arg03, result1
20224     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
20228     01 26 CE F7 | 	test	local05, #1 wz
2022c                 | ' 		return FR_NOT_READY;
2022c     03 FA 05 56 |  if_ne	mov	result1, #3
20230     98 04 90 5D |  if_ne	jmp	#LR__3520
20234     00 20 0E F2 | 	cmp	local02, #0 wz
20238     0B 27 02 56 |  if_ne	mov	local05, arg03
2023c     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
20240     04 26 CE 57 |  if_ne	test	local05, #4 wz
20244                 | ' 		return FR_WRITE_PROTECTED;
20244     0A FA 05 56 |  if_ne	mov	result1, #10
20248     80 04 90 5D |  if_ne	jmp	#LR__3520
2024c     12 13 02 F6 | 	mov	arg01, local04
20250     00 14 06 F6 | 	mov	arg02, #0
20254     00 FE BF FD | 	call	#_fatfs_cc_find_volume
20258     FD 12 02 F6 | 	mov	arg01, result1
2025c     04 12 0E F2 | 	cmp	arg01, #4 wz
20260     01 FA 05 A6 |  if_e	mov	result1, #1
20264     64 04 90 AD |  if_e	jmp	#LR__3520
20268     02 12 16 F2 | 	cmp	arg01, #2 wc
2026c     0D FA 05 36 |  if_ae	mov	result1, #13
20270     58 04 90 3D |  if_ae	jmp	#LR__3520
20274     30 24 06 F1 | 	add	local04, #48
20278     12 29 02 FB | 	rdlong	local06, local04
2027c     04 24 06 F1 | 	add	local04, #4
20280     12 13 02 F6 | 	mov	arg01, local04
20284     34 24 86 F1 | 	sub	local04, #52
20288     0B 12 06 F1 | 	add	arg01, #11
2028c                 | ' {
2028c                 | ' 
2028c                 | ' 	return *((WORD*)ptr);
2028c     09 FB E1 FA | 	rdword	result1, arg01
20290     01 00 00 FF 
20294     00 FA 0D F2 | 	cmp	result1, ##512 wz
20298     0D FA 05 56 |  if_ne	mov	result1, #13
2029c     2C 04 90 5D |  if_ne	jmp	#LR__3520
202a0     34 24 06 F1 | 	add	local04, #52
202a4     12 13 02 F6 | 	mov	arg01, local04
202a8     34 24 86 F1 | 	sub	local04, #52
202ac     16 12 06 F1 | 	add	arg01, #22
202b0                 | ' {
202b0                 | ' 
202b0                 | ' 	return *((WORD*)ptr);
202b0     09 FB E1 FA | 	rdword	result1, arg01
202b4     FD 2A 0A F6 | 	mov	local07, result1 wz
202b8     18 00 90 5D |  if_ne	jmp	#LR__3512
202bc     34 24 06 F1 | 	add	local04, #52
202c0     12 13 02 F6 | 	mov	arg01, local04
202c4     34 24 86 F1 | 	sub	local04, #52
202c8     24 12 06 F1 | 	add	arg01, #36
202cc                 | ' {
202cc                 | ' 
202cc                 | ' 	return *((DWORD*)ptr);
202cc     09 FB 01 FB | 	rdlong	result1, arg01
202d0     FD 2A 02 F6 | 	mov	local07, result1
202d4                 | LR__3512
202d4     1C 24 06 F1 | 	add	local04, #28
202d8     12 2B 62 FC | 	wrlong	local07, local04
202dc     28 24 06 F1 | 	add	local04, #40
202e0     12 27 C2 FA | 	rdbyte	local05, local04
202e4     42 24 86 F1 | 	sub	local04, #66
202e8     12 27 42 FC | 	wrbyte	local05, local04
202ec     12 27 C2 FA | 	rdbyte	local05, local04
202f0     02 24 86 F1 | 	sub	local04, #2
202f4     01 26 0E F2 | 	cmp	local05, #1 wz
202f8     02 24 06 51 |  if_ne	add	local04, #2
202fc     12 27 C2 5A |  if_ne	rdbyte	local05, local04
20300     02 24 86 51 |  if_ne	sub	local04, #2
20304     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
20308     0D FA 05 56 |  if_ne	mov	result1, #13
2030c     BC 03 90 5D |  if_ne	jmp	#LR__3520
20310     02 24 06 F1 | 	add	local04, #2
20314     12 27 C2 FA | 	rdbyte	local05, local04
20318     13 2B 02 FD | 	qmul	local07, local05
2031c     3F 24 06 F1 | 	add	local04, #63
20320     12 27 C2 FA | 	rdbyte	local05, local04
20324     37 24 86 F1 | 	sub	local04, #55
20328     12 27 52 FC | 	wrword	local05, local04
2032c     12 27 EA FA | 	rdword	local05, local04 wz
20330     0A 24 86 F1 | 	sub	local04, #10
20334     18 2A 62 FD | 	getqx	local07
20338     20 00 90 AD |  if_e	jmp	#LR__3513
2033c     0A 24 06 F1 | 	add	local04, #10
20340     12 27 E2 FA | 	rdword	local05, local04
20344     13 23 32 F9 | 	getword	local03, local05, #0
20348     0A 24 86 F1 | 	sub	local04, #10
2034c     13 27 32 F9 | 	getword	local05, local05, #0
20350     01 26 86 F1 | 	sub	local05, #1
20354     13 23 CA F7 | 	test	local03, local05 wz
20358     08 00 90 AD |  if_e	jmp	#LR__3514
2035c                 | LR__3513
2035c     0D FA 05 F6 | 	mov	result1, #13
20360     68 03 90 FD | 	jmp	#LR__3520
20364                 | LR__3514
20364     34 24 06 F1 | 	add	local04, #52
20368     12 13 02 F6 | 	mov	arg01, local04
2036c     11 12 06 F1 | 	add	arg01, #17
20370                 | ' {
20370                 | ' 
20370                 | ' 	return *((WORD*)ptr);
20370     09 FB E1 FA | 	rdword	result1, arg01
20374     2C 24 86 F1 | 	sub	local04, #44
20378     12 FB 51 FC | 	wrword	result1, local04
2037c     12 27 E2 FA | 	rdword	local05, local04
20380     08 24 86 F1 | 	sub	local04, #8
20384     13 13 52 F6 | 	abs	arg01, local05 wc
20388     09 13 42 F8 | 	getnib	arg01, arg01, #0
2038c     09 13 8A F6 | 	negc	arg01, arg01 wz
20390     0D FA 05 56 |  if_ne	mov	result1, #13
20394     34 03 90 5D |  if_ne	jmp	#LR__3520
20398     34 24 06 F1 | 	add	local04, #52
2039c     12 13 02 F6 | 	mov	arg01, local04
203a0     34 24 86 F1 | 	sub	local04, #52
203a4     13 12 06 F1 | 	add	arg01, #19
203a8                 | ' {
203a8                 | ' 
203a8                 | ' 	return *((WORD*)ptr);
203a8     09 FB E1 FA | 	rdword	result1, arg01
203ac     FD 2C 0A F6 | 	mov	local08, result1 wz
203b0     34 24 06 A1 |  if_e	add	local04, #52
203b4     12 13 02 A6 |  if_e	mov	arg01, local04
203b8     34 24 86 A1 |  if_e	sub	local04, #52
203bc     20 12 06 A1 |  if_e	add	arg01, #32
203c0                 | ' {
203c0                 | ' 
203c0                 | ' 	return *((DWORD*)ptr);
203c0     09 2D 02 AB |  if_e	rdlong	local08, arg01
203c4     34 24 06 F1 | 	add	local04, #52
203c8     12 13 02 F6 | 	mov	arg01, local04
203cc     34 24 86 F1 | 	sub	local04, #52
203d0     0E 12 06 F1 | 	add	arg01, #14
203d4                 | ' {
203d4                 | ' 
203d4                 | ' 	return *((WORD*)ptr);
203d4     09 FB E1 FA | 	rdword	result1, arg01
203d8     FD 12 02 F6 | 	mov	arg01, result1
203dc     09 27 02 F6 | 	mov	local05, arg01
203e0     0F 26 4E F7 | 	zerox	local05, #15 wz
203e4     0D FA 05 A6 |  if_e	mov	result1, #13
203e8     E0 02 90 AD |  if_e	jmp	#LR__3520
203ec     09 2F 32 F9 | 	getword	local09, arg01, #0
203f0     15 2F 02 F1 | 	add	local09, local07
203f4     08 24 06 F1 | 	add	local04, #8
203f8     12 27 E2 FA | 	rdword	local05, local04
203fc     08 24 86 F1 | 	sub	local04, #8
20400     13 27 52 F6 | 	abs	local05, local05 wc
20404     04 26 46 F0 | 	shr	local05, #4
20408     13 2F 82 F3 | 	sumc	local09, local05
2040c     17 2D 12 F2 | 	cmp	local08, local09 wc
20410     0D FA 05 C6 |  if_b	mov	result1, #13
20414     B4 02 90 CD |  if_b	jmp	#LR__3520
20418     17 2D 82 F1 | 	sub	local08, local09
2041c     0A 24 06 F1 | 	add	local04, #10
20420     12 27 E2 FA | 	rdword	local05, local04
20424     13 2D 12 FD | 	qdiv	local08, local05
20428     0A 24 86 F1 | 	sub	local04, #10
2042c     18 26 62 FD | 	getqx	local05
20430     00 26 0E F2 | 	cmp	local05, #0 wz
20434     0D FA 05 A6 |  if_e	mov	result1, #13
20438     90 02 90 AD |  if_e	jmp	#LR__3520
2043c     00 30 06 F6 | 	mov	local10, #0
20440     FF FF 07 FF 
20444     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
20448     03 30 06 C6 |  if_b	mov	local10, #3
2044c     7F 00 00 FF 
20450     F6 27 16 F2 | 	cmp	local05, ##65526 wc
20454     02 30 06 C6 |  if_b	mov	local10, #2
20458     07 00 00 FF 
2045c     F6 27 16 F2 | 	cmp	local05, ##4086 wc
20460     01 30 06 C6 |  if_b	mov	local10, #1
20464     00 30 0E F2 | 	cmp	local10, #0 wz
20468     0D FA 05 A6 |  if_e	mov	result1, #13
2046c     5C 02 90 AD |  if_e	jmp	#LR__3520
20470     02 26 06 F1 | 	add	local05, #2
20474     18 24 06 F1 | 	add	local04, #24
20478     12 27 62 FC | 	wrlong	local05, local04
2047c     08 24 06 F1 | 	add	local04, #8
20480     12 29 62 FC | 	wrlong	local06, local04
20484     14 27 02 F6 | 	mov	local05, local06
20488     09 13 32 F9 | 	getword	arg01, arg01, #0
2048c     09 27 02 F1 | 	add	local05, arg01
20490     04 24 06 F1 | 	add	local04, #4
20494     12 27 62 FC | 	wrlong	local05, local04
20498     14 27 02 F6 | 	mov	local05, local06
2049c     17 27 02 F1 | 	add	local05, local09
204a0     08 24 06 F1 | 	add	local04, #8
204a4     12 27 62 FC | 	wrlong	local05, local04
204a8     2C 24 86 F1 | 	sub	local04, #44
204ac     03 30 0E F2 | 	cmp	local10, #3 wz
204b0     5C 00 90 5D |  if_ne	jmp	#LR__3515
204b4     34 24 06 F1 | 	add	local04, #52
204b8     12 13 02 F6 | 	mov	arg01, local04
204bc     34 24 86 F1 | 	sub	local04, #52
204c0     2A 12 06 F1 | 	add	arg01, #42
204c4                 | ' {
204c4                 | ' 
204c4                 | ' 	return *((WORD*)ptr);
204c4     09 FB E9 FA | 	rdword	result1, arg01 wz
204c8     0D FA 05 56 |  if_ne	mov	result1, #13
204cc     FC 01 90 5D |  if_ne	jmp	#LR__3520
204d0     08 24 06 F1 | 	add	local04, #8
204d4     12 27 EA FA | 	rdword	local05, local04 wz
204d8     08 24 86 F1 | 	sub	local04, #8
204dc     0D FA 05 56 |  if_ne	mov	result1, #13
204e0     E8 01 90 5D |  if_ne	jmp	#LR__3520
204e4     34 24 06 F1 | 	add	local04, #52
204e8     12 13 02 F6 | 	mov	arg01, local04
204ec     2C 12 06 F1 | 	add	arg01, #44
204f0                 | ' {
204f0                 | ' 
204f0                 | ' 	return *((DWORD*)ptr);
204f0     09 FB 01 FB | 	rdlong	result1, arg01
204f4     0C 24 86 F1 | 	sub	local04, #12
204f8     12 FB 61 FC | 	wrlong	result1, local04
204fc     10 24 86 F1 | 	sub	local04, #16
20500     12 33 02 FB | 	rdlong	local11, local04
20504     18 24 86 F1 | 	sub	local04, #24
20508     02 32 66 F0 | 	shl	local11, #2
2050c     6C 00 90 FD | 	jmp	#LR__3517
20510                 | LR__3515
20510     08 24 06 F1 | 	add	local04, #8
20514     12 27 EA FA | 	rdword	local05, local04 wz
20518     08 24 86 F1 | 	sub	local04, #8
2051c     0D FA 05 A6 |  if_e	mov	result1, #13
20520     A8 01 90 AD |  if_e	jmp	#LR__3520
20524     24 24 06 F1 | 	add	local04, #36
20528     12 27 02 FB | 	rdlong	local05, local04
2052c     15 27 02 F1 | 	add	local05, local07
20530     04 24 06 F1 | 	add	local04, #4
20534     12 27 62 FC | 	wrlong	local05, local04
20538     28 24 86 F1 | 	sub	local04, #40
2053c     02 30 0E F2 | 	cmp	local10, #2 wz
20540     18 24 06 A1 |  if_e	add	local04, #24
20544     12 27 02 AB |  if_e	rdlong	local05, local04
20548     18 24 86 A1 |  if_e	sub	local04, #24
2054c     01 26 66 A0 |  if_e	shl	local05, #1
20550     24 00 90 AD |  if_e	jmp	#LR__3516
20554     18 24 06 F1 | 	add	local04, #24
20558     12 33 02 FB | 	rdlong	local11, local04
2055c     19 27 02 F6 | 	mov	local05, local11
20560     01 26 66 F0 | 	shl	local05, #1
20564     19 27 02 F1 | 	add	local05, local11
20568     01 26 46 F0 | 	shr	local05, #1
2056c     18 24 86 F1 | 	sub	local04, #24
20570     01 32 06 F5 | 	and	local11, #1
20574     19 27 02 F1 | 	add	local05, local11
20578                 | LR__3516
20578     13 33 02 F6 | 	mov	local11, local05
2057c                 | LR__3517
2057c     FF 33 06 F1 | 	add	local11, #511
20580     09 32 46 F0 | 	shr	local11, #9
20584     1C 24 06 F1 | 	add	local04, #28
20588     12 17 02 FB | 	rdlong	arg03, local04
2058c     1C 24 86 F1 | 	sub	local04, #28
20590     19 17 12 F2 | 	cmp	arg03, local11 wc
20594     0D FA 05 C6 |  if_b	mov	result1, #13
20598     30 01 90 CD |  if_b	jmp	#LR__3520
2059c     14 24 06 F1 | 	add	local04, #20
205a0     FF FF FF FF 
205a4     12 FF 6B FC | 	wrlong	##-1, local04
205a8     04 24 86 F1 | 	sub	local04, #4
205ac     FF FF FF FF 
205b0     12 FF 6B FC | 	wrlong	##-1, local04
205b4     0C 24 86 F1 | 	sub	local04, #12
205b8     12 01 49 FC | 	wrbyte	#128, local04
205bc     04 24 86 F1 | 	sub	local04, #4
205c0     03 30 0E F2 | 	cmp	local10, #3 wz
205c4     D0 00 90 5D |  if_ne	jmp	#LR__3519
205c8     34 24 06 F1 | 	add	local04, #52
205cc     12 13 02 F6 | 	mov	arg01, local04
205d0     34 24 86 F1 | 	sub	local04, #52
205d4     30 12 06 F1 | 	add	arg01, #48
205d8                 | ' {
205d8                 | ' 
205d8                 | ' 	return *((WORD*)ptr);
205d8     09 FB E1 FA | 	rdword	result1, arg01
205dc     FD 26 32 F9 | 	getword	local05, result1, #0
205e0     01 26 0E F2 | 	cmp	local05, #1 wz
205e4     B0 00 90 5D |  if_ne	jmp	#LR__3519
205e8     01 28 06 F1 | 	add	local06, #1
205ec     12 13 02 F6 | 	mov	arg01, local04
205f0     14 15 02 F6 | 	mov	arg02, local06
205f4     CC CD BF FD | 	call	#_fatfs_cc_move_window
205f8     00 FA 0D F2 | 	cmp	result1, #0 wz
205fc     98 00 90 5D |  if_ne	jmp	#LR__3519
20600     04 24 06 F1 | 	add	local04, #4
20604     12 01 48 FC | 	wrbyte	#0, local04
20608     30 24 06 F1 | 	add	local04, #48
2060c     12 13 02 F6 | 	mov	arg01, local04
20610     34 24 86 F1 | 	sub	local04, #52
20614     FE 13 06 F1 | 	add	arg01, #510
20618                 | ' {
20618                 | ' 
20618                 | ' 	return *((WORD*)ptr);
20618     09 FB E1 FA | 	rdword	result1, arg01
2061c     FD 26 32 F9 | 	getword	local05, result1, #0
20620     55 00 00 FF 
20624     55 26 0E F2 | 	cmp	local05, ##43605 wz
20628     34 24 06 A1 |  if_e	add	local04, #52
2062c     12 13 02 A6 |  if_e	mov	arg01, local04
20630     34 24 86 A1 |  if_e	sub	local04, #52
20634                 | ' {
20634                 | ' 
20634                 | ' 	return *((DWORD*)ptr);
20634     09 FB 01 AB |  if_e	rdlong	result1, arg01
20638     A9 B0 20 AF 
2063c     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
20640     54 00 90 5D |  if_ne	jmp	#LR__3518
20644     34 24 06 F1 | 	add	local04, #52
20648     12 13 02 F6 | 	mov	arg01, local04
2064c     34 24 86 F1 | 	sub	local04, #52
20650     E4 13 06 F1 | 	add	arg01, #484
20654                 | ' {
20654                 | ' 
20654                 | ' 	return *((DWORD*)ptr);
20654     09 FB 01 FB | 	rdlong	result1, arg01
20658     B9 A0 30 FF 
2065c     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
20660     34 00 90 5D |  if_ne	jmp	#LR__3518
20664     34 24 06 F1 | 	add	local04, #52
20668     12 13 02 F6 | 	mov	arg01, local04
2066c     E8 13 06 F1 | 	add	arg01, #488
20670                 | ' {
20670                 | ' 
20670                 | ' 	return *((DWORD*)ptr);
20670     09 FB 01 FB | 	rdlong	result1, arg01
20674     20 24 86 F1 | 	sub	local04, #32
20678     12 FB 61 FC | 	wrlong	result1, local04
2067c     20 24 06 F1 | 	add	local04, #32
20680     12 13 02 F6 | 	mov	arg01, local04
20684     EC 13 06 F1 | 	add	arg01, #492
20688                 | ' {
20688                 | ' 
20688                 | ' 	return *((DWORD*)ptr);
20688     09 FB 01 FB | 	rdlong	result1, arg01
2068c     24 24 86 F1 | 	sub	local04, #36
20690     12 FB 61 FC | 	wrlong	result1, local04
20694     10 24 86 F1 | 	sub	local04, #16
20698                 | LR__3518
20698                 | LR__3519
20698     12 31 42 FC | 	wrbyte	local10, local04
2069c     04 E4 05 F1 | 	add	objptr, #4
206a0     F2 26 E2 FA | 	rdword	local05, objptr
206a4     01 26 06 F1 | 	add	local05, #1
206a8     F2 26 52 FC | 	wrword	local05, objptr
206ac     F2 32 E2 FA | 	rdword	local11, objptr
206b0     06 24 06 F1 | 	add	local04, #6
206b4     12 33 52 FC | 	wrword	local11, local04
206b8     04 E4 05 F1 | 	add	objptr, #4
206bc     06 24 06 F1 | 	add	local04, #6
206c0     12 E5 61 FC | 	wrlong	objptr, local04
206c4                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
206c4                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
206c4                 | ' 			{
206c4                 | ' 
206c4                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
206c4                 | ' 
206c4                 | ' 
206c4                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
206c4                 | ' 
206c4                 | ' 			}
206c4                 | ' 		}
206c4                 | ' 
206c4                 | ' 
206c4                 | ' 	}
206c4                 | ' 
206c4                 | ' 	fs->fs_type = (BYTE)fmt;
206c4                 | ' 	fs->id = ++Fsid;
206c4                 | ' 
206c4                 | ' 	fs->lfnbuf = LfnBuf;
206c4                 | ' #line 3567 "ff.c"
206c4                 | ' 	return FR_OK;
206c4     00 FA 05 F6 | 	mov	result1, #0
206c8     08 E4 85 F1 | 	sub	objptr, #8
206cc                 | LR__3520
206cc     A7 F0 03 F6 | 	mov	ptra, fp
206d0     B2 00 A0 FD | 	call	#popregs_
206d4                 | _fatfs_cc_mount_volume_ret
206d4     2D 00 64 FD | 	ret
206d8                 | 
206d8                 | _fatfs_cc_validate
206d8     09 01 0A F6 | 	mov	_var01, arg01 wz
206dc     09 02 06 F6 | 	mov	_var02, #9
206e0     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
206e4     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
206e8     50 00 90 AD |  if_e	jmp	#LR__3530
206ec     04 00 06 F1 | 	add	_var01, #4
206f0     00 07 E2 FA | 	rdword	_var04, _var01
206f4     04 00 86 F1 | 	sub	_var01, #4
206f8     00 13 02 FB | 	rdlong	arg01, _var01
206fc     06 12 06 F1 | 	add	arg01, #6
20700     09 FB E1 FA | 	rdword	result1, arg01
20704     FD 06 0A F2 | 	cmp	_var04, result1 wz
20708     30 00 90 5D |  if_ne	jmp	#LR__3530
2070c     00 07 02 FB | 	rdlong	_var04, _var01
20710     01 06 06 F1 | 	add	_var04, #1
20714     03 13 CA FA | 	rdbyte	arg01, _var04 wz
20718     01 FA 05 56 |  if_ne	mov	result1, #1
2071c                 | ' 
2071c                 | ' 	return Stat;
2071c     01 00 00 AF 
20720     20 E4 05 A1 |  if_e	add	objptr, ##544
20724     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
20728     01 00 00 AF 
2072c     20 E4 85 A1 |  if_e	sub	objptr, ##544
20730     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
20734     01 04 CE F7 | 	test	_var03, #1 wz
20738     00 02 06 A6 |  if_e	mov	_var02, #0
2073c                 | LR__3530
2073c     00 02 0E F2 | 	cmp	_var02, #0 wz
20740     00 05 02 AB |  if_e	rdlong	_var03, _var01
20744     00 04 06 56 |  if_ne	mov	_var03, #0
20748     0A 05 62 FC | 	wrlong	_var03, arg02
2074c                 | ' 			res = FR_OK;
2074c                 | ' 		}
2074c                 | ' 
2074c                 | ' 	}
2074c                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2074c                 | ' 	return res;
2074c     01 FB 01 F6 | 	mov	result1, _var02
20750                 | _fatfs_cc_validate_ret
20750     2D 00 64 FD | 	ret
20754                 | 
20754                 | _fatfs_cc_f_mount
20754     01 4A 05 F6 | 	mov	COUNT_, #1
20758     A8 00 A0 FD | 	call	#pushregs_
2075c     20 F0 07 F1 | 	add	ptra, #32
20760     04 4E 05 F1 | 	add	fp, #4
20764     A7 12 62 FC | 	wrlong	arg01, fp
20768     04 4E 05 F1 | 	add	fp, #4
2076c     A7 14 62 FC | 	wrlong	arg02, fp
20770     04 4E 05 F1 | 	add	fp, #4
20774     A7 16 42 FC | 	wrbyte	arg03, fp
20778     04 4E 85 F1 | 	sub	fp, #4
2077c     A7 16 02 FB | 	rdlong	arg03, fp
20780     14 4E 05 F1 | 	add	fp, #20
20784     A7 16 62 FC | 	wrlong	arg03, fp
20788     A7 12 02 F6 | 	mov	arg01, fp
2078c     1C 4E 85 F1 | 	sub	fp, #28
20790     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
20794     14 4E 05 F1 | 	add	fp, #20
20798     A7 FA 61 FC | 	wrlong	result1, fp
2079c     14 4E 85 F1 | 	sub	fp, #20
207a0     00 FA 55 F2 | 	cmps	result1, #0 wc
207a4     0B FA 05 C6 |  if_b	mov	result1, #11
207a8     C0 00 90 CD |  if_b	jmp	#LR__3541
207ac     14 4E 05 F1 | 	add	fp, #20
207b0     A7 16 02 FB | 	rdlong	arg03, fp
207b4     02 16 66 F0 | 	shl	arg03, #2
207b8     F2 16 02 F1 | 	add	arg03, objptr
207bc     0B 17 0A FB | 	rdlong	arg03, arg03 wz
207c0     04 4E 85 F1 | 	sub	fp, #4
207c4     A7 16 62 FC | 	wrlong	arg03, fp
207c8     10 4E 85 F1 | 	sub	fp, #16
207cc     28 00 90 AD |  if_e	jmp	#LR__3540
207d0     10 4E 05 F1 | 	add	fp, #16
207d4     A7 16 02 FB | 	rdlong	arg03, fp
207d8     10 4E 85 F1 | 	sub	fp, #16
207dc     01 16 06 F1 | 	add	arg03, #1
207e0     0B 13 C2 FA | 	rdbyte	arg01, arg03
207e4     30 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
207e8     10 4E 05 F1 | 	add	fp, #16
207ec     A7 16 02 FB | 	rdlong	arg03, fp
207f0     10 4E 85 F1 | 	sub	fp, #16
207f4     0B 01 48 FC | 	wrbyte	#0, arg03
207f8                 | LR__3540
207f8     04 4E 05 F1 | 	add	fp, #4
207fc     A7 1E 0A FB | 	rdlong	local01, fp wz
20800     04 4E 85 F1 | 	sub	fp, #4
20804     04 4E 05 51 |  if_ne	add	fp, #4
20808     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2080c     04 4E 85 51 |  if_ne	sub	fp, #4
20810     0F 01 48 5C |  if_ne	wrbyte	#0, local01
20814     14 4E 05 F1 | 	add	fp, #20
20818     A7 1E 02 FB | 	rdlong	local01, fp
2081c     02 1E 66 F0 | 	shl	local01, #2
20820     F2 1E 02 F1 | 	add	local01, objptr
20824     10 4E 85 F1 | 	sub	fp, #16
20828     A7 16 02 FB | 	rdlong	arg03, fp
2082c     0F 17 62 FC | 	wrlong	arg03, local01
20830     08 4E 05 F1 | 	add	fp, #8
20834     A7 1E CA FA | 	rdbyte	local01, fp wz
20838     0C 4E 85 F1 | 	sub	fp, #12
2083c     00 FA 05 A6 |  if_e	mov	result1, #0
20840     28 00 90 AD |  if_e	jmp	#LR__3541
20844     08 4E 05 F1 | 	add	fp, #8
20848     A7 12 02 F6 | 	mov	arg01, fp
2084c     04 4E 85 F1 | 	sub	fp, #4
20850     A7 14 02 F6 | 	mov	arg02, fp
20854     04 4E 85 F1 | 	sub	fp, #4
20858     00 16 06 F6 | 	mov	arg03, #0
2085c     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
20860     18 4E 05 F1 | 	add	fp, #24
20864     A7 FA 61 FC | 	wrlong	result1, fp
20868                 | ' 
20868                 | ' 	res = mount_volume(&path, &fs, 0);
20868                 | ' 	return res ;
20868     18 4E 85 F1 | 	sub	fp, #24
2086c                 | LR__3541
2086c     A7 F0 03 F6 | 	mov	ptra, fp
20870     B2 00 A0 FD | 	call	#popregs_
20874                 | _fatfs_cc_f_mount_ret
20874     2D 00 64 FD | 	ret
20878                 | 
20878                 | _fatfs_cc_f_open
20878     02 4A 05 F6 | 	mov	COUNT_, #2
2087c     A8 00 A0 FD | 	call	#pushregs_
20880     60 F0 07 F1 | 	add	ptra, #96
20884     04 4E 05 F1 | 	add	fp, #4
20888     A7 12 62 FC | 	wrlong	arg01, fp
2088c     04 4E 05 F1 | 	add	fp, #4
20890     A7 14 62 FC | 	wrlong	arg02, fp
20894     04 4E 05 F1 | 	add	fp, #4
20898     A7 16 42 FC | 	wrbyte	arg03, fp
2089c     08 4E 85 F1 | 	sub	fp, #8
208a0     A7 18 0A FB | 	rdlong	arg04, fp wz
208a4     04 4E 85 F1 | 	sub	fp, #4
208a8     09 FA 05 A6 |  if_e	mov	result1, #9
208ac     98 06 90 AD |  if_e	jmp	#LR__3567
208b0     0C 4E 05 F1 | 	add	fp, #12
208b4     A7 18 C2 FA | 	rdbyte	arg04, fp
208b8     3F 18 06 F5 | 	and	arg04, #63
208bc     A7 18 42 FC | 	wrbyte	arg04, fp
208c0     04 4E 85 F1 | 	sub	fp, #4
208c4     A7 12 02 F6 | 	mov	arg01, fp
208c8     3C 4E 05 F1 | 	add	fp, #60
208cc     A7 14 02 F6 | 	mov	arg02, fp
208d0     38 4E 85 F1 | 	sub	fp, #56
208d4     A7 16 C2 FA | 	rdbyte	arg03, fp
208d8     0C 4E 85 F1 | 	sub	fp, #12
208dc     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
208e0     10 4E 05 F1 | 	add	fp, #16
208e4     A7 FA 61 FC | 	wrlong	result1, fp
208e8     10 4E 85 F1 | 	sub	fp, #16
208ec     00 FA 0D F2 | 	cmp	result1, #0 wz
208f0     2C 06 90 5D |  if_ne	jmp	#LR__3566
208f4     44 4E 05 F1 | 	add	fp, #68
208f8     A7 18 02 FB | 	rdlong	arg04, fp
208fc     30 4E 85 F1 | 	sub	fp, #48
20900     A7 18 62 FC | 	wrlong	arg04, fp
20904     A7 12 02 F6 | 	mov	arg01, fp
20908     0C 4E 85 F1 | 	sub	fp, #12
2090c     A7 1E 02 FB | 	rdlong	local01, fp
20910     08 4E 85 F1 | 	sub	fp, #8
20914     0F 15 02 F6 | 	mov	arg02, local01
20918     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2091c     10 4E 05 F1 | 	add	fp, #16
20920     A7 FA 61 FC | 	wrlong	result1, fp
20924     10 4E 85 F1 | 	sub	fp, #16
20928     00 FA 0D F2 | 	cmp	result1, #0 wz
2092c     1C 00 90 5D |  if_ne	jmp	#LR__3550
20930     3F 4E 05 F1 | 	add	fp, #63
20934     A7 18 C2 FA | 	rdbyte	arg04, fp
20938     3F 4E 85 F1 | 	sub	fp, #63
2093c     80 18 CE F7 | 	test	arg04, #128 wz
20940     10 4E 05 51 |  if_ne	add	fp, #16
20944     A7 0C 68 5C |  if_ne	wrlong	#6, fp
20948     10 4E 85 51 |  if_ne	sub	fp, #16
2094c                 | LR__3550
2094c     0C 4E 05 F1 | 	add	fp, #12
20950     A7 18 C2 FA | 	rdbyte	arg04, fp
20954     0C 4E 85 F1 | 	sub	fp, #12
20958     1C 18 CE F7 | 	test	arg04, #28 wz
2095c     F0 01 90 AD |  if_e	jmp	#LR__3555
20960     10 4E 05 F1 | 	add	fp, #16
20964     A7 1E 0A FB | 	rdlong	local01, fp wz
20968     10 4E 85 F1 | 	sub	fp, #16
2096c     48 00 90 AD |  if_e	jmp	#LR__3552
20970     10 4E 05 F1 | 	add	fp, #16
20974     A7 18 02 FB | 	rdlong	arg04, fp
20978     10 4E 85 F1 | 	sub	fp, #16
2097c     04 18 0E F2 | 	cmp	arg04, #4 wz
20980     1C 00 90 5D |  if_ne	jmp	#LR__3551
20984     14 4E 05 F1 | 	add	fp, #20
20988     A7 12 02 F6 | 	mov	arg01, fp
2098c     14 4E 85 F1 | 	sub	fp, #20
20990     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
20994     10 4E 05 F1 | 	add	fp, #16
20998     A7 FA 61 FC | 	wrlong	result1, fp
2099c     10 4E 85 F1 | 	sub	fp, #16
209a0                 | LR__3551
209a0     0C 4E 05 F1 | 	add	fp, #12
209a4     A7 1E C2 FA | 	rdbyte	local01, fp
209a8     08 1E 46 F5 | 	or	local01, #8
209ac     A7 1E 42 FC | 	wrbyte	local01, fp
209b0     0C 4E 85 F1 | 	sub	fp, #12
209b4     3C 00 90 FD | 	jmp	#LR__3554
209b8                 | LR__3552
209b8     1A 4E 05 F1 | 	add	fp, #26
209bc     A7 1E C2 FA | 	rdbyte	local01, fp
209c0     1A 4E 85 F1 | 	sub	fp, #26
209c4     11 1E CE F7 | 	test	local01, #17 wz
209c8     10 4E 05 51 |  if_ne	add	fp, #16
209cc     A7 0E 68 5C |  if_ne	wrlong	#7, fp
209d0     10 4E 85 51 |  if_ne	sub	fp, #16
209d4     1C 00 90 5D |  if_ne	jmp	#LR__3553
209d8     0C 4E 05 F1 | 	add	fp, #12
209dc     A7 1E C2 FA | 	rdbyte	local01, fp
209e0     0C 4E 85 F1 | 	sub	fp, #12
209e4     04 1E CE F7 | 	test	local01, #4 wz
209e8     10 4E 05 51 |  if_ne	add	fp, #16
209ec     A7 10 68 5C |  if_ne	wrlong	#8, fp
209f0     10 4E 85 51 |  if_ne	sub	fp, #16
209f4                 | LR__3553
209f4                 | LR__3554
209f4     10 4E 05 F1 | 	add	fp, #16
209f8     A7 1E 0A FB | 	rdlong	local01, fp wz
209fc     10 4E 85 F1 | 	sub	fp, #16
20a00     A8 01 90 5D |  if_ne	jmp	#LR__3558
20a04     0C 4E 05 F1 | 	add	fp, #12
20a08     A7 1E C2 FA | 	rdbyte	local01, fp
20a0c     0C 4E 85 F1 | 	sub	fp, #12
20a10     08 1E CE F7 | 	test	local01, #8 wz
20a14     94 01 90 AD |  if_e	jmp	#LR__3558
20a18     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
20a1c     54 4E 05 F1 | 	add	fp, #84
20a20     A7 FA 61 FC | 	wrlong	result1, fp
20a24     24 4E 85 F1 | 	sub	fp, #36
20a28     A7 12 02 FB | 	rdlong	arg01, fp
20a2c     0E 12 06 F1 | 	add	arg01, #14
20a30     09 FB 61 FC | 	wrlong	result1, arg01
20a34     A7 12 02 FB | 	rdlong	arg01, fp
20a38     16 12 06 F1 | 	add	arg01, #22
20a3c     24 4E 05 F1 | 	add	fp, #36
20a40     A7 14 02 FB | 	rdlong	arg02, fp
20a44     09 15 62 FC | 	wrlong	arg02, arg01
20a48     10 4E 85 F1 | 	sub	fp, #16
20a4c     A7 12 02 FB | 	rdlong	arg01, fp
20a50     14 4E 85 F1 | 	sub	fp, #20
20a54     A7 14 02 FB | 	rdlong	arg02, fp
20a58     30 4E 85 F1 | 	sub	fp, #48
20a5c     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
20a60     48 4E 05 F1 | 	add	fp, #72
20a64     A7 FA 61 FC | 	wrlong	result1, fp
20a68     18 4E 85 F1 | 	sub	fp, #24
20a6c     A7 1E 02 FB | 	rdlong	local01, fp
20a70     0B 1E 06 F1 | 	add	local01, #11
20a74     0F 41 48 FC | 	wrbyte	#32, local01
20a78     14 4E 05 F1 | 	add	fp, #20
20a7c     A7 12 02 FB | 	rdlong	arg01, fp
20a80     14 4E 85 F1 | 	sub	fp, #20
20a84     A7 14 02 FB | 	rdlong	arg02, fp
20a88     30 4E 85 F1 | 	sub	fp, #48
20a8c     00 16 06 F6 | 	mov	arg03, #0
20a90     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
20a94     30 4E 05 F1 | 	add	fp, #48
20a98     A7 12 02 FB | 	rdlong	arg01, fp
20a9c     1C 12 06 F1 | 	add	arg01, #28
20aa0     09 01 68 FC | 	wrlong	#0, arg01
20aa4     14 4E 05 F1 | 	add	fp, #20
20aa8     A7 1E 02 FB | 	rdlong	local01, fp
20aac     03 1E 06 F1 | 	add	local01, #3
20ab0     0F 03 48 FC | 	wrbyte	#1, local01
20ab4     04 4E 05 F1 | 	add	fp, #4
20ab8     A7 1E 0A FB | 	rdlong	local01, fp wz
20abc     48 4E 85 F1 | 	sub	fp, #72
20ac0     E8 00 90 AD |  if_e	jmp	#LR__3558
20ac4     44 4E 05 F1 | 	add	fp, #68
20ac8     A7 1E 02 FB | 	rdlong	local01, fp
20acc     30 1E 06 F1 | 	add	local01, #48
20ad0     0F 1F 02 FB | 	rdlong	local01, local01
20ad4     14 4E 05 F1 | 	add	fp, #20
20ad8     A7 1E 62 FC | 	wrlong	local01, fp
20adc     44 4E 85 F1 | 	sub	fp, #68
20ae0     A7 12 02 F6 | 	mov	arg01, fp
20ae4     34 4E 05 F1 | 	add	fp, #52
20ae8     A7 14 02 FB | 	rdlong	arg02, fp
20aec     48 4E 85 F1 | 	sub	fp, #72
20af0     00 16 06 F6 | 	mov	arg03, #0
20af4     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
20af8     10 4E 05 F1 | 	add	fp, #16
20afc     A7 FA 61 FC | 	wrlong	result1, fp
20b00     10 4E 85 F1 | 	sub	fp, #16
20b04     00 FA 0D F2 | 	cmp	result1, #0 wz
20b08     A0 00 90 5D |  if_ne	jmp	#LR__3558
20b0c     44 4E 05 F1 | 	add	fp, #68
20b10     A7 12 02 FB | 	rdlong	arg01, fp
20b14     14 4E 05 F1 | 	add	fp, #20
20b18     A7 14 02 FB | 	rdlong	arg02, fp
20b1c     58 4E 85 F1 | 	sub	fp, #88
20b20     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
20b24     10 4E 05 F1 | 	add	fp, #16
20b28     A7 FA 61 FC | 	wrlong	result1, fp
20b2c     34 4E 05 F1 | 	add	fp, #52
20b30     A7 18 02 FB | 	rdlong	arg04, fp
20b34     04 4E 05 F1 | 	add	fp, #4
20b38     A7 1E 02 FB | 	rdlong	local01, fp
20b3c     48 4E 85 F1 | 	sub	fp, #72
20b40     01 1E 86 F1 | 	sub	local01, #1
20b44     10 18 06 F1 | 	add	arg04, #16
20b48     0C 1F 62 FC | 	wrlong	local01, arg04
20b4c     5C 00 90 FD | 	jmp	#LR__3558
20b50                 | LR__3555
20b50     10 4E 05 F1 | 	add	fp, #16
20b54     A7 18 0A FB | 	rdlong	arg04, fp wz
20b58     10 4E 85 F1 | 	sub	fp, #16
20b5c     4C 00 90 5D |  if_ne	jmp	#LR__3557
20b60     1A 4E 05 F1 | 	add	fp, #26
20b64     A7 18 C2 FA | 	rdbyte	arg04, fp
20b68     1A 4E 85 F1 | 	sub	fp, #26
20b6c     10 18 CE F7 | 	test	arg04, #16 wz
20b70     10 4E 05 51 |  if_ne	add	fp, #16
20b74     A7 08 68 5C |  if_ne	wrlong	#4, fp
20b78     10 4E 85 51 |  if_ne	sub	fp, #16
20b7c     2C 00 90 5D |  if_ne	jmp	#LR__3556
20b80     0C 4E 05 F1 | 	add	fp, #12
20b84     A7 18 C2 FA | 	rdbyte	arg04, fp
20b88     0C 4E 85 F1 | 	sub	fp, #12
20b8c     02 18 CE F7 | 	test	arg04, #2 wz
20b90     1A 4E 05 51 |  if_ne	add	fp, #26
20b94     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
20b98     1A 4E 85 51 |  if_ne	sub	fp, #26
20b9c     01 1E CE 57 |  if_ne	test	local01, #1 wz
20ba0     10 4E 05 51 |  if_ne	add	fp, #16
20ba4     A7 0E 68 5C |  if_ne	wrlong	#7, fp
20ba8     10 4E 85 51 |  if_ne	sub	fp, #16
20bac                 | LR__3556
20bac                 | LR__3557
20bac                 | LR__3558
20bac     10 4E 05 F1 | 	add	fp, #16
20bb0     A7 1E 0A FB | 	rdlong	local01, fp wz
20bb4     10 4E 85 F1 | 	sub	fp, #16
20bb8     60 00 90 5D |  if_ne	jmp	#LR__3559
20bbc     0C 4E 05 F1 | 	add	fp, #12
20bc0     A7 20 C2 FA | 	rdbyte	local02, fp
20bc4     0C 4E 85 F1 | 	sub	fp, #12
20bc8     08 20 CE F7 | 	test	local02, #8 wz
20bcc     0C 4E 05 51 |  if_ne	add	fp, #12
20bd0     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
20bd4     40 20 46 55 |  if_ne	or	local02, #64
20bd8     A7 20 42 5C |  if_ne	wrbyte	local02, fp
20bdc     0C 4E 85 51 |  if_ne	sub	fp, #12
20be0     04 4E 05 F1 | 	add	fp, #4
20be4     A7 20 02 FB | 	rdlong	local02, fp
20be8     40 4E 05 F1 | 	add	fp, #64
20bec     A7 1E 02 FB | 	rdlong	local01, fp
20bf0     30 1E 06 F1 | 	add	local01, #48
20bf4     0F 1F 02 FB | 	rdlong	local01, local01
20bf8     20 20 06 F1 | 	add	local02, #32
20bfc     10 1F 62 FC | 	wrlong	local01, local02
20c00     40 4E 85 F1 | 	sub	fp, #64
20c04     A7 20 02 FB | 	rdlong	local02, fp
20c08     2C 4E 05 F1 | 	add	fp, #44
20c0c     A7 1E 02 FB | 	rdlong	local01, fp
20c10     30 4E 85 F1 | 	sub	fp, #48
20c14     24 20 06 F1 | 	add	local02, #36
20c18     10 1F 62 FC | 	wrlong	local01, local02
20c1c                 | LR__3559
20c1c     10 4E 05 F1 | 	add	fp, #16
20c20     A7 20 0A FB | 	rdlong	local02, fp wz
20c24     10 4E 85 F1 | 	sub	fp, #16
20c28     F4 02 90 5D |  if_ne	jmp	#LR__3565
20c2c     04 4E 05 F1 | 	add	fp, #4
20c30     A7 20 02 FB | 	rdlong	local02, fp
20c34     40 4E 05 F1 | 	add	fp, #64
20c38     A7 12 02 FB | 	rdlong	arg01, fp
20c3c     14 4E 85 F1 | 	sub	fp, #20
20c40     A7 14 02 FB | 	rdlong	arg02, fp
20c44     30 4E 85 F1 | 	sub	fp, #48
20c48     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
20c4c     08 20 06 F1 | 	add	local02, #8
20c50     10 FB 61 FC | 	wrlong	result1, local02
20c54     04 4E 05 F1 | 	add	fp, #4
20c58     A7 20 02 FB | 	rdlong	local02, fp
20c5c     2C 4E 05 F1 | 	add	fp, #44
20c60     A7 12 02 FB | 	rdlong	arg01, fp
20c64     1C 12 06 F1 | 	add	arg01, #28
20c68                 | ' {
20c68                 | ' 
20c68                 | ' 	return *((DWORD*)ptr);
20c68     09 FB 01 FB | 	rdlong	result1, arg01
20c6c     0C 20 06 F1 | 	add	local02, #12
20c70     10 FB 61 FC | 	wrlong	result1, local02
20c74     2C 4E 85 F1 | 	sub	fp, #44
20c78     A7 20 02 FB | 	rdlong	local02, fp
20c7c     40 4E 05 F1 | 	add	fp, #64
20c80     A7 1E 02 FB | 	rdlong	local01, fp
20c84     10 1F 62 FC | 	wrlong	local01, local02
20c88     40 4E 85 F1 | 	sub	fp, #64
20c8c     A7 20 02 FB | 	rdlong	local02, fp
20c90     40 4E 05 F1 | 	add	fp, #64
20c94     A7 1E 02 FB | 	rdlong	local01, fp
20c98     06 1E 06 F1 | 	add	local01, #6
20c9c     0F 1F E2 FA | 	rdword	local01, local01
20ca0     04 20 06 F1 | 	add	local02, #4
20ca4     10 1F 52 FC | 	wrword	local01, local02
20ca8     40 4E 85 F1 | 	sub	fp, #64
20cac     A7 20 02 FB | 	rdlong	local02, fp
20cb0     08 4E 05 F1 | 	add	fp, #8
20cb4     A7 1E C2 FA | 	rdbyte	local01, fp
20cb8     10 20 06 F1 | 	add	local02, #16
20cbc     10 1F 42 FC | 	wrbyte	local01, local02
20cc0     08 4E 85 F1 | 	sub	fp, #8
20cc4     A7 20 02 FB | 	rdlong	local02, fp
20cc8     11 20 06 F1 | 	add	local02, #17
20ccc     10 01 48 FC | 	wrbyte	#0, local02
20cd0     A7 20 02 FB | 	rdlong	local02, fp
20cd4     1C 20 06 F1 | 	add	local02, #28
20cd8     10 01 68 FC | 	wrlong	#0, local02
20cdc     A7 20 02 FB | 	rdlong	local02, fp
20ce0     14 20 06 F1 | 	add	local02, #20
20ce4     10 01 68 FC | 	wrlong	#0, local02
20ce8     A7 12 02 FB | 	rdlong	arg01, fp
20cec     04 4E 85 F1 | 	sub	fp, #4
20cf0     28 12 06 F1 | 	add	arg01, #40
20cf4     00 14 06 F6 | 	mov	arg02, #0
20cf8     09 16 C6 F9 | 	decod	arg03, #9
20cfc     98 00 A0 FD | 	call	#\builtin_bytefill_
20d00     0C 4E 05 F1 | 	add	fp, #12
20d04     A7 20 C2 FA | 	rdbyte	local02, fp
20d08     0C 4E 85 F1 | 	sub	fp, #12
20d0c     20 20 CE F7 | 	test	local02, #32 wz
20d10     0C 02 90 AD |  if_e	jmp	#LR__3564
20d14     04 4E 05 F1 | 	add	fp, #4
20d18     A7 1E 02 FB | 	rdlong	local01, fp
20d1c     04 4E 85 F1 | 	sub	fp, #4
20d20     0C 1E 06 F1 | 	add	local01, #12
20d24     0F 21 02 FB | 	rdlong	local02, local01
20d28     01 20 16 F2 | 	cmp	local02, #1 wc
20d2c     F0 01 90 CD |  if_b	jmp	#LR__3564
20d30     04 4E 05 F1 | 	add	fp, #4
20d34     A7 1E 02 FB | 	rdlong	local01, fp
20d38     0F 21 02 F6 | 	mov	local02, local01
20d3c     0C 1E 06 F1 | 	add	local01, #12
20d40     0F 1F 02 FB | 	rdlong	local01, local01
20d44     14 20 06 F1 | 	add	local02, #20
20d48     10 1F 62 FC | 	wrlong	local01, local02
20d4c     40 4E 05 F1 | 	add	fp, #64
20d50     A7 20 02 FB | 	rdlong	local02, fp
20d54     0A 20 06 F1 | 	add	local02, #10
20d58     10 21 E2 FA | 	rdword	local02, local02
20d5c     09 20 66 F0 | 	shl	local02, #9
20d60     08 4E 05 F1 | 	add	fp, #8
20d64     A7 20 62 FC | 	wrlong	local02, fp
20d68     48 4E 85 F1 | 	sub	fp, #72
20d6c     A7 20 02 FB | 	rdlong	local02, fp
20d70     08 20 06 F1 | 	add	local02, #8
20d74     10 1F 02 FB | 	rdlong	local01, local02
20d78     4C 4E 05 F1 | 	add	fp, #76
20d7c     A7 1E 62 FC | 	wrlong	local01, fp
20d80                 | ' 				fp->fptr = fp->obj.objsize;
20d80                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
20d80                 | ' 				clst = fp->obj.sclust;
20d80                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
20d80     4C 4E 85 F1 | 	sub	fp, #76
20d84     A7 20 02 FB | 	rdlong	local02, fp
20d88     0C 20 06 F1 | 	add	local02, #12
20d8c     10 1F 02 FB | 	rdlong	local01, local02
20d90     58 4E 05 F1 | 	add	fp, #88
20d94     A7 1E 62 FC | 	wrlong	local01, fp
20d98     5C 4E 85 F1 | 	sub	fp, #92
20d9c                 | LR__3560
20d9c     10 4E 05 F1 | 	add	fp, #16
20da0     A7 20 0A FB | 	rdlong	local02, fp wz
20da4     10 4E 85 F1 | 	sub	fp, #16
20da8     94 00 90 5D |  if_ne	jmp	#LR__3561
20dac     5C 4E 05 F1 | 	add	fp, #92
20db0     A7 20 02 FB | 	rdlong	local02, fp
20db4     10 4E 85 F1 | 	sub	fp, #16
20db8     A7 1E 02 FB | 	rdlong	local01, fp
20dbc     4C 4E 85 F1 | 	sub	fp, #76
20dc0     0F 21 1A F2 | 	cmp	local02, local01 wcz
20dc4     78 00 90 ED |  if_be	jmp	#LR__3561
20dc8     04 4E 05 F1 | 	add	fp, #4
20dcc     A7 12 02 FB | 	rdlong	arg01, fp
20dd0     4C 4E 05 F1 | 	add	fp, #76
20dd4     A7 14 02 FB | 	rdlong	arg02, fp
20dd8     50 4E 85 F1 | 	sub	fp, #80
20ddc     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
20de0     50 4E 05 F1 | 	add	fp, #80
20de4     A7 FA 61 FC | 	wrlong	result1, fp
20de8     50 4E 85 F1 | 	sub	fp, #80
20dec     02 FA 15 F2 | 	cmp	result1, #2 wc
20df0     10 4E 05 C1 |  if_b	add	fp, #16
20df4     A7 04 68 CC |  if_b	wrlong	#2, fp
20df8     10 4E 85 C1 |  if_b	sub	fp, #16
20dfc     50 4E 05 F1 | 	add	fp, #80
20e00     A7 20 02 FB | 	rdlong	local02, fp
20e04     50 4E 85 F1 | 	sub	fp, #80
20e08     FF FF 7F FF 
20e0c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
20e10     10 4E 05 A1 |  if_e	add	fp, #16
20e14     A7 02 68 AC |  if_e	wrlong	#1, fp
20e18     10 4E 85 A1 |  if_e	sub	fp, #16
20e1c     5C 4E 05 F1 | 	add	fp, #92
20e20     A7 20 02 FB | 	rdlong	local02, fp
20e24     10 4E 85 F1 | 	sub	fp, #16
20e28     A7 1E 02 FB | 	rdlong	local01, fp
20e2c     0F 21 82 F1 | 	sub	local02, local01
20e30     10 4E 05 F1 | 	add	fp, #16
20e34     A7 20 62 FC | 	wrlong	local02, fp
20e38     5C 4E 85 F1 | 	sub	fp, #92
20e3c     5C FF 9F FD | 	jmp	#LR__3560
20e40                 | LR__3561
20e40     04 4E 05 F1 | 	add	fp, #4
20e44     A7 20 02 FB | 	rdlong	local02, fp
20e48     4C 4E 05 F1 | 	add	fp, #76
20e4c     A7 1E 02 FB | 	rdlong	local01, fp
20e50     18 20 06 F1 | 	add	local02, #24
20e54     10 1F 62 FC | 	wrlong	local01, local02
20e58     40 4E 85 F1 | 	sub	fp, #64
20e5c     A7 20 0A FB | 	rdlong	local02, fp wz
20e60     10 4E 85 F1 | 	sub	fp, #16
20e64     B8 00 90 5D |  if_ne	jmp	#LR__3563
20e68     5C 4E 05 F1 | 	add	fp, #92
20e6c     A7 1E 02 FB | 	rdlong	local01, fp
20e70     5C 4E 85 F1 | 	sub	fp, #92
20e74     FF 1F CE F7 | 	test	local01, #511 wz
20e78     A4 00 90 AD |  if_e	jmp	#LR__3563
20e7c     44 4E 05 F1 | 	add	fp, #68
20e80     A7 12 02 FB | 	rdlong	arg01, fp
20e84     0C 4E 05 F1 | 	add	fp, #12
20e88     A7 14 02 FB | 	rdlong	arg02, fp
20e8c     50 4E 85 F1 | 	sub	fp, #80
20e90     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
20e94     58 4E 05 F1 | 	add	fp, #88
20e98     A7 FA 61 FC | 	wrlong	result1, fp
20e9c     00 FA 4D F2 | 	cmps	result1, #0 wz
20ea0     58 4E 85 F1 | 	sub	fp, #88
20ea4     10 4E 05 A1 |  if_e	add	fp, #16
20ea8     A7 04 68 AC |  if_e	wrlong	#2, fp
20eac     10 4E 85 A1 |  if_e	sub	fp, #16
20eb0     6C 00 90 AD |  if_e	jmp	#LR__3562
20eb4     04 4E 05 F1 | 	add	fp, #4
20eb8     A7 20 02 FB | 	rdlong	local02, fp
20ebc     54 4E 05 F1 | 	add	fp, #84
20ec0     A7 1E 02 FB | 	rdlong	local01, fp
20ec4     04 4E 05 F1 | 	add	fp, #4
20ec8     A7 18 02 FB | 	rdlong	arg04, fp
20ecc     09 18 46 F0 | 	shr	arg04, #9
20ed0     0C 1F 02 F1 | 	add	local01, arg04
20ed4     1C 20 06 F1 | 	add	local02, #28
20ed8     10 1F 62 FC | 	wrlong	local01, local02
20edc     18 4E 85 F1 | 	sub	fp, #24
20ee0     A7 20 02 FB | 	rdlong	local02, fp
20ee4     01 20 06 F1 | 	add	local02, #1
20ee8     10 13 C2 FA | 	rdbyte	arg01, local02
20eec     40 4E 85 F1 | 	sub	fp, #64
20ef0     A7 20 02 FB | 	rdlong	local02, fp
20ef4     10 15 02 F6 | 	mov	arg02, local02
20ef8     28 14 06 F1 | 	add	arg02, #40
20efc     04 4E 85 F1 | 	sub	fp, #4
20f00     1C 20 06 F1 | 	add	local02, #28
20f04     10 17 02 FB | 	rdlong	arg03, local02
20f08     01 18 06 F6 | 	mov	arg04, #1
20f0c     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
20f10     00 FA 0D F2 | 	cmp	result1, #0 wz
20f14     10 4E 05 51 |  if_ne	add	fp, #16
20f18     A7 02 68 5C |  if_ne	wrlong	#1, fp
20f1c     10 4E 85 51 |  if_ne	sub	fp, #16
20f20                 | LR__3562
20f20                 | LR__3563
20f20                 | LR__3564
20f20                 | LR__3565
20f20                 | LR__3566
20f20     10 4E 05 F1 | 	add	fp, #16
20f24     A7 20 0A FB | 	rdlong	local02, fp wz
20f28     10 4E 85 F1 | 	sub	fp, #16
20f2c     04 4E 05 51 |  if_ne	add	fp, #4
20f30     A7 20 02 5B |  if_ne	rdlong	local02, fp
20f34     04 4E 85 51 |  if_ne	sub	fp, #4
20f38     10 01 68 5C |  if_ne	wrlong	#0, local02
20f3c                 | ' 
20f3c                 | ' 	return res ;
20f3c     10 4E 05 F1 | 	add	fp, #16
20f40     A7 FA 01 FB | 	rdlong	result1, fp
20f44     10 4E 85 F1 | 	sub	fp, #16
20f48                 | LR__3567
20f48     A7 F0 03 F6 | 	mov	ptra, fp
20f4c     B2 00 A0 FD | 	call	#popregs_
20f50                 | _fatfs_cc_f_open_ret
20f50     2D 00 64 FD | 	ret
20f54                 | 
20f54                 | _fatfs_cc_f_read
20f54     0E 4A 05 F6 | 	mov	COUNT_, #14
20f58     A8 00 A0 FD | 	call	#pushregs_
20f5c     38 F0 07 F1 | 	add	ptra, #56
20f60     04 4E 05 F1 | 	add	fp, #4
20f64     A7 12 62 FC | 	wrlong	arg01, fp
20f68     04 4E 05 F1 | 	add	fp, #4
20f6c     A7 14 62 FC | 	wrlong	arg02, fp
20f70     04 4E 05 F1 | 	add	fp, #4
20f74     A7 16 62 FC | 	wrlong	arg03, fp
20f78     04 4E 05 F1 | 	add	fp, #4
20f7c     A7 18 62 FC | 	wrlong	arg04, fp
20f80     08 4E 85 F1 | 	sub	fp, #8
20f84     A7 FA 01 FB | 	rdlong	result1, fp
20f88     2C 4E 05 F1 | 	add	fp, #44
20f8c     A7 FA 61 FC | 	wrlong	result1, fp
20f90     24 4E 85 F1 | 	sub	fp, #36
20f94     A7 FA 01 FB | 	rdlong	result1, fp
20f98     FD 00 68 FC | 	wrlong	#0, result1
20f9c     0C 4E 85 F1 | 	sub	fp, #12
20fa0     A7 12 02 FB | 	rdlong	arg01, fp
20fa4     14 4E 05 F1 | 	add	fp, #20
20fa8     A7 14 02 F6 | 	mov	arg02, fp
20fac     18 4E 85 F1 | 	sub	fp, #24
20fb0     24 F7 BF FD | 	call	#_fatfs_cc_validate
20fb4     14 4E 05 F1 | 	add	fp, #20
20fb8     A7 FA 61 FC | 	wrlong	result1, fp
20fbc     00 FA 4D F2 | 	cmps	result1, #0 wz
20fc0     14 4E 85 F1 | 	sub	fp, #20
20fc4     20 00 90 5D |  if_ne	jmp	#LR__3570
20fc8     04 4E 05 F1 | 	add	fp, #4
20fcc     A7 14 02 FB | 	rdlong	arg02, fp
20fd0     11 14 06 F1 | 	add	arg02, #17
20fd4     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
20fd8     10 4E 05 F1 | 	add	fp, #16
20fdc     A7 14 62 FC | 	wrlong	arg02, fp
20fe0     14 4E 85 F1 | 	sub	fp, #20
20fe4     10 00 90 AD |  if_e	jmp	#LR__3571
20fe8                 | LR__3570
20fe8     14 4E 05 F1 | 	add	fp, #20
20fec     A7 FA 01 FB | 	rdlong	result1, fp
20ff0     14 4E 85 F1 | 	sub	fp, #20
20ff4     EC 05 90 FD | 	jmp	#LR__3590
20ff8                 | LR__3571
20ff8     04 4E 05 F1 | 	add	fp, #4
20ffc     A7 18 02 FB | 	rdlong	arg04, fp
21000     04 4E 85 F1 | 	sub	fp, #4
21004     10 18 06 F1 | 	add	arg04, #16
21008     0C 19 C2 FA | 	rdbyte	arg04, arg04
2100c     01 18 CE F7 | 	test	arg04, #1 wz
21010     07 FA 05 A6 |  if_e	mov	result1, #7
21014     CC 05 90 AD |  if_e	jmp	#LR__3590
21018     04 4E 05 F1 | 	add	fp, #4
2101c     A7 1E 02 FB | 	rdlong	local01, fp
21020     0F 21 02 F6 | 	mov	local02, local01
21024     0C 20 06 F1 | 	add	local02, #12
21028     10 23 02 FB | 	rdlong	local03, local02
2102c     14 1E 06 F1 | 	add	local01, #20
21030     0F 1F 02 FB | 	rdlong	local01, local01
21034     0F 23 82 F1 | 	sub	local03, local01
21038     20 4E 05 F1 | 	add	fp, #32
2103c     A7 22 62 FC | 	wrlong	local03, fp
21040     18 4E 85 F1 | 	sub	fp, #24
21044     A7 24 02 FB | 	rdlong	local04, fp
21048     0C 4E 85 F1 | 	sub	fp, #12
2104c     11 25 1A F2 | 	cmp	local04, local03 wcz
21050     24 4E 05 11 |  if_a	add	fp, #36
21054     A7 24 02 1B |  if_a	rdlong	local04, fp
21058     18 4E 85 11 |  if_a	sub	fp, #24
2105c     A7 24 62 1C |  if_a	wrlong	local04, fp
21060     0C 4E 85 11 |  if_a	sub	fp, #12
21064                 | ' 
21064                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
21064                 | LR__3572
21064     0C 4E 05 F1 | 	add	fp, #12
21068     A7 20 02 FB | 	rdlong	local02, fp
2106c     0C 4E 85 F1 | 	sub	fp, #12
21070     10 25 02 F6 | 	mov	local04, local02
21074     01 24 16 F2 | 	cmp	local04, #1 wc
21078     64 05 90 CD |  if_b	jmp	#LR__3589
2107c     04 4E 05 F1 | 	add	fp, #4
21080     A7 22 02 FB | 	rdlong	local03, fp
21084     04 4E 85 F1 | 	sub	fp, #4
21088     14 22 06 F1 | 	add	local03, #20
2108c     11 23 02 FB | 	rdlong	local03, local03
21090     FF 23 CE F7 | 	test	local03, #511 wz
21094     3C 04 90 5D |  if_ne	jmp	#LR__3587
21098     04 4E 05 F1 | 	add	fp, #4
2109c     A7 1E 02 FB | 	rdlong	local01, fp
210a0     14 1E 06 F1 | 	add	local01, #20
210a4     0F 23 02 FB | 	rdlong	local03, local01
210a8     09 22 46 F0 | 	shr	local03, #9
210ac     14 4E 05 F1 | 	add	fp, #20
210b0     A7 26 02 FB | 	rdlong	local05, fp
210b4     13 29 02 F6 | 	mov	local06, local05
210b8     0A 28 06 F1 | 	add	local06, #10
210bc     14 2B E2 FA | 	rdword	local07, local06
210c0     0A 28 86 F1 | 	sub	local06, #10
210c4     15 2D 32 F9 | 	getword	local08, local07, #0
210c8     01 2C 86 F1 | 	sub	local08, #1
210cc     16 23 0A F5 | 	and	local03, local08 wz
210d0     18 4E 05 F1 | 	add	fp, #24
210d4     A7 22 62 FC | 	wrlong	local03, fp
210d8     30 4E 85 F1 | 	sub	fp, #48
210dc     E0 00 90 5D |  if_ne	jmp	#LR__3577
210e0     04 4E 05 F1 | 	add	fp, #4
210e4     A7 22 02 FB | 	rdlong	local03, fp
210e8     04 4E 85 F1 | 	sub	fp, #4
210ec     14 22 06 F1 | 	add	local03, #20
210f0     11 23 0A FB | 	rdlong	local03, local03 wz
210f4     20 00 90 5D |  if_ne	jmp	#LR__3573
210f8     04 4E 05 F1 | 	add	fp, #4
210fc     A7 22 02 FB | 	rdlong	local03, fp
21100     08 22 06 F1 | 	add	local03, #8
21104     11 23 02 FB | 	rdlong	local03, local03
21108     18 4E 05 F1 | 	add	fp, #24
2110c     A7 22 62 FC | 	wrlong	local03, fp
21110     1C 4E 85 F1 | 	sub	fp, #28
21114     28 00 90 FD | 	jmp	#LR__3574
21118                 | LR__3573
21118     04 4E 05 F1 | 	add	fp, #4
2111c     A7 2C 02 FB | 	rdlong	local08, fp
21120     16 13 02 F6 | 	mov	arg01, local08
21124     04 4E 85 F1 | 	sub	fp, #4
21128     18 2C 06 F1 | 	add	local08, #24
2112c     16 15 02 FB | 	rdlong	arg02, local08
21130     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
21134     1C 4E 05 F1 | 	add	fp, #28
21138     A7 FA 61 FC | 	wrlong	result1, fp
2113c     1C 4E 85 F1 | 	sub	fp, #28
21140                 | LR__3574
21140     1C 4E 05 F1 | 	add	fp, #28
21144     A7 22 02 FB | 	rdlong	local03, fp
21148     1C 4E 85 F1 | 	sub	fp, #28
2114c     02 22 16 F2 | 	cmp	local03, #2 wc
21150     1C 00 90 3D |  if_ae	jmp	#LR__3575
21154     04 4E 05 F1 | 	add	fp, #4
21158     A7 22 02 FB | 	rdlong	local03, fp
2115c     04 4E 85 F1 | 	sub	fp, #4
21160     11 22 06 F1 | 	add	local03, #17
21164     11 05 48 FC | 	wrbyte	#2, local03
21168     02 FA 05 F6 | 	mov	result1, #2
2116c     74 04 90 FD | 	jmp	#LR__3590
21170                 | LR__3575
21170     1C 4E 05 F1 | 	add	fp, #28
21174     A7 22 02 FB | 	rdlong	local03, fp
21178     1C 4E 85 F1 | 	sub	fp, #28
2117c     FF FF 7F FF 
21180     FF 23 0E F2 | 	cmp	local03, ##-1 wz
21184     1C 00 90 5D |  if_ne	jmp	#LR__3576
21188     04 4E 05 F1 | 	add	fp, #4
2118c     A7 22 02 FB | 	rdlong	local03, fp
21190     04 4E 85 F1 | 	sub	fp, #4
21194     11 22 06 F1 | 	add	local03, #17
21198     11 03 48 FC | 	wrbyte	#1, local03
2119c     01 FA 05 F6 | 	mov	result1, #1
211a0     40 04 90 FD | 	jmp	#LR__3590
211a4                 | LR__3576
211a4     04 4E 05 F1 | 	add	fp, #4
211a8     A7 22 02 FB | 	rdlong	local03, fp
211ac     18 4E 05 F1 | 	add	fp, #24
211b0     A7 2C 02 FB | 	rdlong	local08, fp
211b4     1C 4E 85 F1 | 	sub	fp, #28
211b8     18 22 06 F1 | 	add	local03, #24
211bc     11 2D 62 FC | 	wrlong	local08, local03
211c0                 | LR__3577
211c0     18 4E 05 F1 | 	add	fp, #24
211c4     A7 12 02 FB | 	rdlong	arg01, fp
211c8     14 4E 85 F1 | 	sub	fp, #20
211cc     A7 22 02 FB | 	rdlong	local03, fp
211d0     04 4E 85 F1 | 	sub	fp, #4
211d4     18 22 06 F1 | 	add	local03, #24
211d8     11 15 02 FB | 	rdlong	arg02, local03
211dc     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
211e0     20 4E 05 F1 | 	add	fp, #32
211e4     A7 FA 61 FC | 	wrlong	result1, fp
211e8     20 4E 85 F1 | 	sub	fp, #32
211ec     00 FA 0D F2 | 	cmp	result1, #0 wz
211f0     1C 00 90 5D |  if_ne	jmp	#LR__3578
211f4     04 4E 05 F1 | 	add	fp, #4
211f8     A7 22 02 FB | 	rdlong	local03, fp
211fc     04 4E 85 F1 | 	sub	fp, #4
21200     11 22 06 F1 | 	add	local03, #17
21204     11 05 48 FC | 	wrbyte	#2, local03
21208     02 FA 05 F6 | 	mov	result1, #2
2120c     D4 03 90 FD | 	jmp	#LR__3590
21210                 | LR__3578
21210     20 4E 05 F1 | 	add	fp, #32
21214     A7 22 02 FB | 	rdlong	local03, fp
21218     10 4E 05 F1 | 	add	fp, #16
2121c     A7 2C 02 FB | 	rdlong	local08, fp
21220     16 23 02 F1 | 	add	local03, local08
21224     10 4E 85 F1 | 	sub	fp, #16
21228     A7 22 62 FC | 	wrlong	local03, fp
2122c     14 4E 85 F1 | 	sub	fp, #20
21230     A7 22 02 FB | 	rdlong	local03, fp
21234     09 22 46 F0 | 	shr	local03, #9
21238     20 4E 05 F1 | 	add	fp, #32
2123c     A7 22 62 FC | 	wrlong	local03, fp
21240     2C 4E 85 F1 | 	sub	fp, #44
21244     01 22 16 F2 | 	cmp	local03, #1 wc
21248     5C 01 90 CD |  if_b	jmp	#LR__3582
2124c     30 4E 05 F1 | 	add	fp, #48
21250     A7 22 02 FB | 	rdlong	local03, fp
21254     04 4E 85 F1 | 	sub	fp, #4
21258     A7 2C 02 FB | 	rdlong	local08, fp
2125c     16 23 02 F1 | 	add	local03, local08
21260     14 4E 85 F1 | 	sub	fp, #20
21264     A7 2C 02 FB | 	rdlong	local08, fp
21268     18 4E 85 F1 | 	sub	fp, #24
2126c     0A 2C 06 F1 | 	add	local08, #10
21270     16 2D E2 FA | 	rdword	local08, local08
21274     16 23 1A F2 | 	cmp	local03, local08 wcz
21278     28 00 90 ED |  if_be	jmp	#LR__3579
2127c     18 4E 05 F1 | 	add	fp, #24
21280     A7 1E 02 FB | 	rdlong	local01, fp
21284     0A 1E 06 F1 | 	add	local01, #10
21288     0F 23 E2 FA | 	rdword	local03, local01
2128c     18 4E 05 F1 | 	add	fp, #24
21290     A7 2C 02 FB | 	rdlong	local08, fp
21294     16 23 82 F1 | 	sub	local03, local08
21298     04 4E 85 F1 | 	sub	fp, #4
2129c     A7 22 62 FC | 	wrlong	local03, fp
212a0     2C 4E 85 F1 | 	sub	fp, #44
212a4                 | LR__3579
212a4     18 4E 05 F1 | 	add	fp, #24
212a8     A7 1E 02 FB | 	rdlong	local01, fp
212ac     01 1E 06 F1 | 	add	local01, #1
212b0     0F 13 C2 FA | 	rdbyte	arg01, local01
212b4     1C 4E 05 F1 | 	add	fp, #28
212b8     A7 14 02 FB | 	rdlong	arg02, fp
212bc     14 4E 85 F1 | 	sub	fp, #20
212c0     A7 16 02 FB | 	rdlong	arg03, fp
212c4     0C 4E 05 F1 | 	add	fp, #12
212c8     A7 18 02 FB | 	rdlong	arg04, fp
212cc     2C 4E 85 F1 | 	sub	fp, #44
212d0     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
212d4     00 FA 0D F2 | 	cmp	result1, #0 wz
212d8     1C 00 90 AD |  if_e	jmp	#LR__3580
212dc     04 4E 05 F1 | 	add	fp, #4
212e0     A7 22 02 FB | 	rdlong	local03, fp
212e4     04 4E 85 F1 | 	sub	fp, #4
212e8     11 22 06 F1 | 	add	local03, #17
212ec     11 03 48 FC | 	wrbyte	#1, local03
212f0     01 FA 05 F6 | 	mov	result1, #1
212f4     EC 02 90 FD | 	jmp	#LR__3590
212f8                 | LR__3580
212f8     04 4E 05 F1 | 	add	fp, #4
212fc     A7 1E 02 FB | 	rdlong	local01, fp
21300     04 4E 85 F1 | 	sub	fp, #4
21304     10 1E 06 F1 | 	add	local01, #16
21308     0F 23 C2 FA | 	rdbyte	local03, local01
2130c     80 22 CE F7 | 	test	local03, #128 wz
21310     78 00 90 AD |  if_e	jmp	#LR__3581
21314     04 4E 05 F1 | 	add	fp, #4
21318     A7 2C 02 FB | 	rdlong	local08, fp
2131c     1C 2C 06 F1 | 	add	local08, #28
21320     16 2D 02 FB | 	rdlong	local08, local08
21324     1C 4E 05 F1 | 	add	fp, #28
21328     A7 2E 02 FB | 	rdlong	local09, fp
2132c     17 2D 82 F1 | 	sub	local08, local09
21330     0C 4E 05 F1 | 	add	fp, #12
21334     A7 30 02 FB | 	rdlong	local10, fp
21338     2C 4E 85 F1 | 	sub	fp, #44
2133c     18 33 02 F6 | 	mov	local11, local10
21340     19 2D 12 F2 | 	cmp	local08, local11 wc
21344     44 00 90 3D |  if_ae	jmp	#LR__3581
21348     34 4E 05 F1 | 	add	fp, #52
2134c     A7 12 02 FB | 	rdlong	arg01, fp
21350     30 4E 85 F1 | 	sub	fp, #48
21354     A7 14 02 FB | 	rdlong	arg02, fp
21358     0A 33 02 F6 | 	mov	local11, arg02
2135c     1C 32 06 F1 | 	add	local11, #28
21360     19 2F 02 FB | 	rdlong	local09, local11
21364     1C 4E 05 F1 | 	add	fp, #28
21368     A7 26 02 FB | 	rdlong	local05, fp
2136c     13 2F 82 F1 | 	sub	local09, local05
21370     09 2E 66 F0 | 	shl	local09, #9
21374     17 33 02 F6 | 	mov	local11, local09
21378     17 13 02 F1 | 	add	arg01, local09
2137c     20 4E 85 F1 | 	sub	fp, #32
21380     28 14 06 F1 | 	add	arg02, #40
21384     09 16 C6 F9 | 	decod	arg03, #9
21388     8C 4E BF FD | 	call	#__system____builtin_memmove
2138c                 | LR__3581
2138c     2C 4E 05 F1 | 	add	fp, #44
21390     A7 22 02 FB | 	rdlong	local03, fp
21394     09 22 66 F0 | 	shl	local03, #9
21398     04 4E 85 F1 | 	sub	fp, #4
2139c     A7 22 62 FC | 	wrlong	local03, fp
213a0     28 4E 85 F1 | 	sub	fp, #40
213a4                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
213a4                 | ' 				}
213a4                 | ' 
213a4                 | ' 
213a4                 | ' 				rcnt =  ((UINT) 512 )  * cc;
213a4                 | ' 				continue;
213a4     B4 01 90 FD | 	jmp	#LR__3588
213a8                 | LR__3582
213a8     04 4E 05 F1 | 	add	fp, #4
213ac     A7 22 02 FB | 	rdlong	local03, fp
213b0     1C 22 06 F1 | 	add	local03, #28
213b4     11 23 02 FB | 	rdlong	local03, local03
213b8     1C 4E 05 F1 | 	add	fp, #28
213bc     A7 1E 02 FB | 	rdlong	local01, fp
213c0     20 4E 85 F1 | 	sub	fp, #32
213c4     0F 23 0A F2 | 	cmp	local03, local01 wz
213c8     EC 00 90 AD |  if_e	jmp	#LR__3586
213cc     04 4E 05 F1 | 	add	fp, #4
213d0     A7 1E 02 FB | 	rdlong	local01, fp
213d4     04 4E 85 F1 | 	sub	fp, #4
213d8     10 1E 06 F1 | 	add	local01, #16
213dc     0F 23 C2 FA | 	rdbyte	local03, local01
213e0     80 22 CE F7 | 	test	local03, #128 wz
213e4     7C 00 90 AD |  if_e	jmp	#LR__3584
213e8     18 4E 05 F1 | 	add	fp, #24
213ec     A7 1E 02 FB | 	rdlong	local01, fp
213f0     01 1E 06 F1 | 	add	local01, #1
213f4     0F 13 C2 FA | 	rdbyte	arg01, local01
213f8     14 4E 85 F1 | 	sub	fp, #20
213fc     A7 22 02 FB | 	rdlong	local03, fp
21400     11 15 02 F6 | 	mov	arg02, local03
21404     28 14 06 F1 | 	add	arg02, #40
21408     04 4E 85 F1 | 	sub	fp, #4
2140c     1C 22 06 F1 | 	add	local03, #28
21410     11 17 02 FB | 	rdlong	arg03, local03
21414     01 18 06 F6 | 	mov	arg04, #1
21418     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2141c     00 FA 0D F2 | 	cmp	result1, #0 wz
21420     1C 00 90 AD |  if_e	jmp	#LR__3583
21424     04 4E 05 F1 | 	add	fp, #4
21428     A7 22 02 FB | 	rdlong	local03, fp
2142c     04 4E 85 F1 | 	sub	fp, #4
21430     11 22 06 F1 | 	add	local03, #17
21434     11 03 48 FC | 	wrbyte	#1, local03
21438     01 FA 05 F6 | 	mov	result1, #1
2143c     A4 01 90 FD | 	jmp	#LR__3590
21440                 | LR__3583
21440     04 4E 05 F1 | 	add	fp, #4
21444     A7 32 02 FB | 	rdlong	local11, fp
21448     19 23 02 F6 | 	mov	local03, local11
2144c     04 4E 85 F1 | 	sub	fp, #4
21450     10 32 06 F1 | 	add	local11, #16
21454     19 33 C2 FA | 	rdbyte	local11, local11
21458     7F 32 06 F5 | 	and	local11, #127
2145c     10 22 06 F1 | 	add	local03, #16
21460     11 33 42 FC | 	wrbyte	local11, local03
21464                 | LR__3584
21464     18 4E 05 F1 | 	add	fp, #24
21468     A7 1E 02 FB | 	rdlong	local01, fp
2146c     01 1E 06 F1 | 	add	local01, #1
21470     0F 13 C2 FA | 	rdbyte	arg01, local01
21474     14 4E 85 F1 | 	sub	fp, #20
21478     A7 14 02 FB | 	rdlong	arg02, fp
2147c     28 14 06 F1 | 	add	arg02, #40
21480     1C 4E 05 F1 | 	add	fp, #28
21484     A7 16 02 FB | 	rdlong	arg03, fp
21488     20 4E 85 F1 | 	sub	fp, #32
2148c     01 18 06 F6 | 	mov	arg04, #1
21490     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
21494     00 FA 0D F2 | 	cmp	result1, #0 wz
21498     1C 00 90 AD |  if_e	jmp	#LR__3585
2149c     04 4E 05 F1 | 	add	fp, #4
214a0     A7 22 02 FB | 	rdlong	local03, fp
214a4     04 4E 85 F1 | 	sub	fp, #4
214a8     11 22 06 F1 | 	add	local03, #17
214ac     11 03 48 FC | 	wrbyte	#1, local03
214b0     01 FA 05 F6 | 	mov	result1, #1
214b4     2C 01 90 FD | 	jmp	#LR__3590
214b8                 | LR__3585
214b8                 | LR__3586
214b8     04 4E 05 F1 | 	add	fp, #4
214bc     A7 22 02 FB | 	rdlong	local03, fp
214c0     1C 4E 05 F1 | 	add	fp, #28
214c4     A7 32 02 FB | 	rdlong	local11, fp
214c8     20 4E 85 F1 | 	sub	fp, #32
214cc     1C 22 06 F1 | 	add	local03, #28
214d0     11 33 62 FC | 	wrlong	local11, local03
214d4                 | LR__3587
214d4     04 4E 05 F1 | 	add	fp, #4
214d8     A7 1E 02 FB | 	rdlong	local01, fp
214dc     14 1E 06 F1 | 	add	local01, #20
214e0     0F 33 02 FB | 	rdlong	local11, local01
214e4     FF 33 06 F5 | 	and	local11, #511
214e8     09 22 C6 F9 | 	decod	local03, #9
214ec     19 23 82 F1 | 	sub	local03, local11
214f0     24 4E 05 F1 | 	add	fp, #36
214f4     A7 22 62 FC | 	wrlong	local03, fp
214f8     1C 4E 85 F1 | 	sub	fp, #28
214fc     A7 32 02 FB | 	rdlong	local11, fp
21500     0C 4E 85 F1 | 	sub	fp, #12
21504     19 23 1A F2 | 	cmp	local03, local11 wcz
21508     0C 4E 05 11 |  if_a	add	fp, #12
2150c     A7 22 02 1B |  if_a	rdlong	local03, fp
21510     1C 4E 05 11 |  if_a	add	fp, #28
21514     A7 22 62 1C |  if_a	wrlong	local03, fp
21518     28 4E 85 11 |  if_a	sub	fp, #40
2151c     34 4E 05 F1 | 	add	fp, #52
21520     A7 12 02 FB | 	rdlong	arg01, fp
21524     30 4E 85 F1 | 	sub	fp, #48
21528     A7 28 02 FB | 	rdlong	local06, fp
2152c     14 15 02 F6 | 	mov	arg02, local06
21530     28 14 06 F1 | 	add	arg02, #40
21534     14 28 06 F1 | 	add	local06, #20
21538     14 33 02 FB | 	rdlong	local11, local06
2153c     19 2F 02 F6 | 	mov	local09, local11
21540     17 31 02 F6 | 	mov	local10, local09
21544     FF 31 06 F5 | 	and	local10, #511
21548     18 15 02 F1 | 	add	arg02, local10
2154c     24 4E 05 F1 | 	add	fp, #36
21550     A7 16 02 FB | 	rdlong	arg03, fp
21554     28 4E 85 F1 | 	sub	fp, #40
21558     BC 4C BF FD | 	call	#__system____builtin_memmove
2155c                 | LR__3588
2155c     0C 4E 05 F1 | 	add	fp, #12
21560     A7 22 02 FB | 	rdlong	local03, fp
21564     1C 4E 05 F1 | 	add	fp, #28
21568     A7 2C 02 FB | 	rdlong	local08, fp
2156c     16 23 82 F1 | 	sub	local03, local08
21570     1C 4E 85 F1 | 	sub	fp, #28
21574     A7 22 62 FC | 	wrlong	local03, fp
21578     04 4E 05 F1 | 	add	fp, #4
2157c     A7 1E 02 FB | 	rdlong	local01, fp
21580     0F 2B 02 FB | 	rdlong	local07, local01
21584     18 4E 05 F1 | 	add	fp, #24
21588     A7 2C 02 FB | 	rdlong	local08, fp
2158c     16 2B 02 F1 | 	add	local07, local08
21590     0F 2B 62 FC | 	wrlong	local07, local01
21594     0C 4E 05 F1 | 	add	fp, #12
21598     A7 22 02 FB | 	rdlong	local03, fp
2159c     0C 4E 85 F1 | 	sub	fp, #12
215a0     A7 34 02 FB | 	rdlong	local12, fp
215a4     1A 23 02 F1 | 	add	local03, local12
215a8     0C 4E 05 F1 | 	add	fp, #12
215ac     A7 22 62 FC | 	wrlong	local03, fp
215b0     30 4E 85 F1 | 	sub	fp, #48
215b4     A7 36 02 FB | 	rdlong	local13, fp
215b8     1B 23 02 F6 | 	mov	local03, local13
215bc     14 36 06 F1 | 	add	local13, #20
215c0     1B 39 02 FB | 	rdlong	local14, local13
215c4     24 4E 05 F1 | 	add	fp, #36
215c8     A7 28 02 FB | 	rdlong	local06, fp
215cc     28 4E 85 F1 | 	sub	fp, #40
215d0     14 39 02 F1 | 	add	local14, local06
215d4     14 22 06 F1 | 	add	local03, #20
215d8     11 39 62 FC | 	wrlong	local14, local03
215dc     84 FA 9F FD | 	jmp	#LR__3572
215e0                 | LR__3589
215e0                 | ' 
215e0                 | ' 
215e0                 | ' 
215e0                 | ' 
215e0                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
215e0                 | ' 
215e0                 | ' 	}
215e0                 | ' 
215e0                 | ' 	return FR_OK ;
215e0     00 FA 05 F6 | 	mov	result1, #0
215e4                 | LR__3590
215e4     A7 F0 03 F6 | 	mov	ptra, fp
215e8     B2 00 A0 FD | 	call	#popregs_
215ec                 | _fatfs_cc_f_read_ret
215ec     2D 00 64 FD | 	ret
215f0                 | 
215f0                 | _fatfs_cc_f_write
215f0     15 4A 05 F6 | 	mov	COUNT_, #21
215f4     A8 00 A0 FD | 	call	#pushregs_
215f8     34 F0 07 F1 | 	add	ptra, #52
215fc     04 4E 05 F1 | 	add	fp, #4
21600     A7 12 62 FC | 	wrlong	arg01, fp
21604     04 4E 05 F1 | 	add	fp, #4
21608     A7 14 62 FC | 	wrlong	arg02, fp
2160c     04 4E 05 F1 | 	add	fp, #4
21610     A7 16 62 FC | 	wrlong	arg03, fp
21614     04 4E 05 F1 | 	add	fp, #4
21618     A7 18 62 FC | 	wrlong	arg04, fp
2161c     08 4E 85 F1 | 	sub	fp, #8
21620     A7 FA 01 FB | 	rdlong	result1, fp
21624     28 4E 05 F1 | 	add	fp, #40
21628     A7 FA 61 FC | 	wrlong	result1, fp
2162c     20 4E 85 F1 | 	sub	fp, #32
21630     A7 FA 01 FB | 	rdlong	result1, fp
21634     FD 00 68 FC | 	wrlong	#0, result1
21638     0C 4E 85 F1 | 	sub	fp, #12
2163c     A7 12 02 FB | 	rdlong	arg01, fp
21640     14 4E 05 F1 | 	add	fp, #20
21644     A7 14 02 F6 | 	mov	arg02, fp
21648     18 4E 85 F1 | 	sub	fp, #24
2164c     88 F0 BF FD | 	call	#_fatfs_cc_validate
21650     14 4E 05 F1 | 	add	fp, #20
21654     A7 FA 61 FC | 	wrlong	result1, fp
21658     00 FA 4D F2 | 	cmps	result1, #0 wz
2165c     14 4E 85 F1 | 	sub	fp, #20
21660     20 00 90 5D |  if_ne	jmp	#LR__3600
21664     04 4E 05 F1 | 	add	fp, #4
21668     A7 14 02 FB | 	rdlong	arg02, fp
2166c     11 14 06 F1 | 	add	arg02, #17
21670     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
21674     10 4E 05 F1 | 	add	fp, #16
21678     A7 14 62 FC | 	wrlong	arg02, fp
2167c     14 4E 85 F1 | 	sub	fp, #20
21680     10 00 90 AD |  if_e	jmp	#LR__3601
21684                 | LR__3600
21684     14 4E 05 F1 | 	add	fp, #20
21688     A7 FA 01 FB | 	rdlong	result1, fp
2168c     14 4E 85 F1 | 	sub	fp, #20
21690     44 07 90 FD | 	jmp	#LR__3623
21694                 | LR__3601
21694     04 4E 05 F1 | 	add	fp, #4
21698     A7 14 02 FB | 	rdlong	arg02, fp
2169c     04 4E 85 F1 | 	sub	fp, #4
216a0     10 14 06 F1 | 	add	arg02, #16
216a4     0A 15 C2 FA | 	rdbyte	arg02, arg02
216a8     02 14 CE F7 | 	test	arg02, #2 wz
216ac     07 FA 05 A6 |  if_e	mov	result1, #7
216b0     24 07 90 AD |  if_e	jmp	#LR__3623
216b4     04 4E 05 F1 | 	add	fp, #4
216b8     A7 14 02 FB | 	rdlong	arg02, fp
216bc     0A 13 02 F6 | 	mov	arg01, arg02
216c0     14 12 06 F1 | 	add	arg01, #20
216c4     09 13 02 FB | 	rdlong	arg01, arg01
216c8     08 4E 05 F1 | 	add	fp, #8
216cc     A7 FA 01 FB | 	rdlong	result1, fp
216d0     FD 12 02 F1 | 	add	arg01, result1
216d4     0C 4E 85 F1 | 	sub	fp, #12
216d8     14 14 06 F1 | 	add	arg02, #20
216dc     0A FB 01 FB | 	rdlong	result1, arg02
216e0     FD 12 12 F2 | 	cmp	arg01, result1 wc
216e4     24 00 90 3D |  if_ae	jmp	#LR__3602
216e8     04 4E 05 F1 | 	add	fp, #4
216ec     A7 14 02 FB | 	rdlong	arg02, fp
216f0     01 FA 65 F6 | 	neg	result1, #1
216f4     14 14 06 F1 | 	add	arg02, #20
216f8     0A 15 02 FB | 	rdlong	arg02, arg02
216fc     0A FB 81 F1 | 	sub	result1, arg02
21700     08 4E 05 F1 | 	add	fp, #8
21704     A7 FA 61 FC | 	wrlong	result1, fp
21708     0C 4E 85 F1 | 	sub	fp, #12
2170c                 | LR__3602
2170c                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2170c                 | ' 	}
2170c                 | ' 
2170c                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2170c                 | LR__3603
2170c     0C 4E 05 F1 | 	add	fp, #12
21710     A7 FA 01 FB | 	rdlong	result1, fp
21714     0C 4E 85 F1 | 	sub	fp, #12
21718     01 FA 15 F2 | 	cmp	result1, #1 wc
2171c     90 06 90 CD |  if_b	jmp	#LR__3622
21720     04 4E 05 F1 | 	add	fp, #4
21724     A7 FA 01 FB | 	rdlong	result1, fp
21728     04 4E 85 F1 | 	sub	fp, #4
2172c     14 FA 05 F1 | 	add	result1, #20
21730     FD FA 01 FB | 	rdlong	result1, result1
21734     FF FB CD F7 | 	test	result1, #511 wz
21738     D8 04 90 5D |  if_ne	jmp	#LR__3618
2173c     04 4E 05 F1 | 	add	fp, #4
21740     A7 FA 01 FB | 	rdlong	result1, fp
21744     14 FA 05 F1 | 	add	result1, #20
21748     FD FA 01 FB | 	rdlong	result1, result1
2174c     09 FA 45 F0 | 	shr	result1, #9
21750     14 4E 05 F1 | 	add	fp, #20
21754     A7 14 02 FB | 	rdlong	arg02, fp
21758     0A 14 06 F1 | 	add	arg02, #10
2175c     0A 19 E2 FA | 	rdword	arg04, arg02
21760     0C 15 32 F9 | 	getword	arg02, arg04, #0
21764     01 14 86 F1 | 	sub	arg02, #1
21768     0A FB 09 F5 | 	and	result1, arg02 wz
2176c     14 4E 05 F1 | 	add	fp, #20
21770     A7 FA 61 FC | 	wrlong	result1, fp
21774     2C 4E 85 F1 | 	sub	fp, #44
21778     44 01 90 5D |  if_ne	jmp	#LR__3609
2177c     04 4E 05 F1 | 	add	fp, #4
21780     A7 FA 01 FB | 	rdlong	result1, fp
21784     04 4E 85 F1 | 	sub	fp, #4
21788     14 FA 05 F1 | 	add	result1, #20
2178c     FD 14 0A FB | 	rdlong	arg02, result1 wz
21790     44 00 90 5D |  if_ne	jmp	#LR__3604
21794     04 4E 05 F1 | 	add	fp, #4
21798     A7 14 02 FB | 	rdlong	arg02, fp
2179c     08 14 06 F1 | 	add	arg02, #8
217a0     0A 15 0A FB | 	rdlong	arg02, arg02 wz
217a4     18 4E 05 F1 | 	add	fp, #24
217a8     A7 14 62 FC | 	wrlong	arg02, fp
217ac     1C 4E 85 F1 | 	sub	fp, #28
217b0     4C 00 90 5D |  if_ne	jmp	#LR__3605
217b4     04 4E 05 F1 | 	add	fp, #4
217b8     A7 12 02 FB | 	rdlong	arg01, fp
217bc     04 4E 85 F1 | 	sub	fp, #4
217c0     00 14 06 F6 | 	mov	arg02, #0
217c4     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
217c8     1C 4E 05 F1 | 	add	fp, #28
217cc     A7 FA 61 FC | 	wrlong	result1, fp
217d0     1C 4E 85 F1 | 	sub	fp, #28
217d4     28 00 90 FD | 	jmp	#LR__3605
217d8                 | LR__3604
217d8     04 4E 05 F1 | 	add	fp, #4
217dc     A7 18 02 FB | 	rdlong	arg04, fp
217e0     0C 13 02 F6 | 	mov	arg01, arg04
217e4     04 4E 85 F1 | 	sub	fp, #4
217e8     18 18 06 F1 | 	add	arg04, #24
217ec     0C 15 02 FB | 	rdlong	arg02, arg04
217f0     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
217f4     1C 4E 05 F1 | 	add	fp, #28
217f8     A7 FA 61 FC | 	wrlong	result1, fp
217fc     1C 4E 85 F1 | 	sub	fp, #28
21800                 | LR__3605
21800     1C 4E 05 F1 | 	add	fp, #28
21804     A7 FA 09 FB | 	rdlong	result1, fp wz
21808     1C 4E 85 F1 | 	sub	fp, #28
2180c     A0 05 90 AD |  if_e	jmp	#LR__3622
21810     1C 4E 05 F1 | 	add	fp, #28
21814     A7 FA 01 FB | 	rdlong	result1, fp
21818     1C 4E 85 F1 | 	sub	fp, #28
2181c     01 FA 0D F2 | 	cmp	result1, #1 wz
21820     1C 00 90 5D |  if_ne	jmp	#LR__3606
21824     04 4E 05 F1 | 	add	fp, #4
21828     A7 FA 01 FB | 	rdlong	result1, fp
2182c     04 4E 85 F1 | 	sub	fp, #4
21830     11 FA 05 F1 | 	add	result1, #17
21834     FD 04 48 FC | 	wrbyte	#2, result1
21838     02 FA 05 F6 | 	mov	result1, #2
2183c     98 05 90 FD | 	jmp	#LR__3623
21840                 | LR__3606
21840     1C 4E 05 F1 | 	add	fp, #28
21844     A7 FA 01 FB | 	rdlong	result1, fp
21848     1C 4E 85 F1 | 	sub	fp, #28
2184c     FF FF 7F FF 
21850     FF FB 0D F2 | 	cmp	result1, ##-1 wz
21854     1C 00 90 5D |  if_ne	jmp	#LR__3607
21858     04 4E 05 F1 | 	add	fp, #4
2185c     A7 FA 01 FB | 	rdlong	result1, fp
21860     04 4E 85 F1 | 	sub	fp, #4
21864     11 FA 05 F1 | 	add	result1, #17
21868     FD 02 48 FC | 	wrbyte	#1, result1
2186c     01 FA 05 F6 | 	mov	result1, #1
21870     64 05 90 FD | 	jmp	#LR__3623
21874                 | LR__3607
21874     04 4E 05 F1 | 	add	fp, #4
21878     A7 FA 01 FB | 	rdlong	result1, fp
2187c     18 4E 05 F1 | 	add	fp, #24
21880     A7 18 02 FB | 	rdlong	arg04, fp
21884     18 FA 05 F1 | 	add	result1, #24
21888     FD 18 62 FC | 	wrlong	arg04, result1
2188c     18 4E 85 F1 | 	sub	fp, #24
21890     A7 FA 01 FB | 	rdlong	result1, fp
21894     04 4E 85 F1 | 	sub	fp, #4
21898     08 FA 05 F1 | 	add	result1, #8
2189c     FD FA 09 FB | 	rdlong	result1, result1 wz
218a0     1C 00 90 5D |  if_ne	jmp	#LR__3608
218a4     04 4E 05 F1 | 	add	fp, #4
218a8     A7 18 02 FB | 	rdlong	arg04, fp
218ac     18 4E 05 F1 | 	add	fp, #24
218b0     A7 FA 01 FB | 	rdlong	result1, fp
218b4     1C 4E 85 F1 | 	sub	fp, #28
218b8     08 18 06 F1 | 	add	arg04, #8
218bc     0C FB 61 FC | 	wrlong	result1, arg04
218c0                 | LR__3608
218c0                 | LR__3609
218c0     04 4E 05 F1 | 	add	fp, #4
218c4     A7 18 02 FB | 	rdlong	arg04, fp
218c8     04 4E 85 F1 | 	sub	fp, #4
218cc     10 18 06 F1 | 	add	arg04, #16
218d0     0C 19 C2 FA | 	rdbyte	arg04, arg04
218d4     80 18 CE F7 | 	test	arg04, #128 wz
218d8     7C 00 90 AD |  if_e	jmp	#LR__3611
218dc     18 4E 05 F1 | 	add	fp, #24
218e0     A7 18 02 FB | 	rdlong	arg04, fp
218e4     01 18 06 F1 | 	add	arg04, #1
218e8     0C 13 C2 FA | 	rdbyte	arg01, arg04
218ec     14 4E 85 F1 | 	sub	fp, #20
218f0     A7 18 02 FB | 	rdlong	arg04, fp
218f4     0C 15 02 F6 | 	mov	arg02, arg04
218f8     28 14 06 F1 | 	add	arg02, #40
218fc     04 4E 85 F1 | 	sub	fp, #4
21900     1C 18 06 F1 | 	add	arg04, #28
21904     0C 17 02 FB | 	rdlong	arg03, arg04
21908     01 18 06 F6 | 	mov	arg04, #1
2190c     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
21910     00 FA 0D F2 | 	cmp	result1, #0 wz
21914     1C 00 90 AD |  if_e	jmp	#LR__3610
21918     04 4E 05 F1 | 	add	fp, #4
2191c     A7 FA 01 FB | 	rdlong	result1, fp
21920     04 4E 85 F1 | 	sub	fp, #4
21924     11 FA 05 F1 | 	add	result1, #17
21928     FD 02 48 FC | 	wrbyte	#1, result1
2192c     01 FA 05 F6 | 	mov	result1, #1
21930     A4 04 90 FD | 	jmp	#LR__3623
21934                 | LR__3610
21934     04 4E 05 F1 | 	add	fp, #4
21938     A7 18 02 FB | 	rdlong	arg04, fp
2193c     0C FB 01 F6 | 	mov	result1, arg04
21940     04 4E 85 F1 | 	sub	fp, #4
21944     10 18 06 F1 | 	add	arg04, #16
21948     0C 19 C2 FA | 	rdbyte	arg04, arg04
2194c     7F 18 06 F5 | 	and	arg04, #127
21950     10 FA 05 F1 | 	add	result1, #16
21954     FD 18 42 FC | 	wrbyte	arg04, result1
21958                 | LR__3611
21958     18 4E 05 F1 | 	add	fp, #24
2195c     A7 12 02 FB | 	rdlong	arg01, fp
21960     14 4E 85 F1 | 	sub	fp, #20
21964     A7 14 02 FB | 	rdlong	arg02, fp
21968     04 4E 85 F1 | 	sub	fp, #4
2196c     18 14 06 F1 | 	add	arg02, #24
21970     0A 15 02 FB | 	rdlong	arg02, arg02
21974     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
21978     20 4E 05 F1 | 	add	fp, #32
2197c     A7 FA 61 FC | 	wrlong	result1, fp
21980     20 4E 85 F1 | 	sub	fp, #32
21984     00 FA 0D F2 | 	cmp	result1, #0 wz
21988     1C 00 90 5D |  if_ne	jmp	#LR__3612
2198c     04 4E 05 F1 | 	add	fp, #4
21990     A7 FA 01 FB | 	rdlong	result1, fp
21994     04 4E 85 F1 | 	sub	fp, #4
21998     11 FA 05 F1 | 	add	result1, #17
2199c     FD 04 48 FC | 	wrbyte	#2, result1
219a0     02 FA 05 F6 | 	mov	result1, #2
219a4     30 04 90 FD | 	jmp	#LR__3623
219a8                 | LR__3612
219a8     20 4E 05 F1 | 	add	fp, #32
219ac     A7 FA 01 FB | 	rdlong	result1, fp
219b0     0C 4E 05 F1 | 	add	fp, #12
219b4     A7 1E 02 FB | 	rdlong	local01, fp
219b8     0F FB 01 F1 | 	add	result1, local01
219bc     0C 4E 85 F1 | 	sub	fp, #12
219c0     A7 FA 61 FC | 	wrlong	result1, fp
219c4     14 4E 85 F1 | 	sub	fp, #20
219c8     A7 FA 01 FB | 	rdlong	result1, fp
219cc     09 FA 45 F0 | 	shr	result1, #9
219d0     1C 4E 05 F1 | 	add	fp, #28
219d4     A7 FA 61 FC | 	wrlong	result1, fp
219d8     28 4E 85 F1 | 	sub	fp, #40
219dc     01 FA 15 F2 | 	cmp	result1, #1 wc
219e0     60 01 90 CD |  if_b	jmp	#LR__3616
219e4     2C 4E 05 F1 | 	add	fp, #44
219e8     A7 FA 01 FB | 	rdlong	result1, fp
219ec     04 4E 85 F1 | 	sub	fp, #4
219f0     A7 18 02 FB | 	rdlong	arg04, fp
219f4     0C FB 01 F1 | 	add	result1, arg04
219f8     10 4E 85 F1 | 	sub	fp, #16
219fc     A7 18 02 FB | 	rdlong	arg04, fp
21a00     18 4E 85 F1 | 	sub	fp, #24
21a04     0A 18 06 F1 | 	add	arg04, #10
21a08     0C 19 E2 FA | 	rdword	arg04, arg04
21a0c     0C FB 19 F2 | 	cmp	result1, arg04 wcz
21a10     28 00 90 ED |  if_be	jmp	#LR__3613
21a14     18 4E 05 F1 | 	add	fp, #24
21a18     A7 FA 01 FB | 	rdlong	result1, fp
21a1c     0A FA 05 F1 | 	add	result1, #10
21a20     FD FA E1 FA | 	rdword	result1, result1
21a24     14 4E 05 F1 | 	add	fp, #20
21a28     A7 18 02 FB | 	rdlong	arg04, fp
21a2c     0C FB 81 F1 | 	sub	result1, arg04
21a30     04 4E 85 F1 | 	sub	fp, #4
21a34     A7 FA 61 FC | 	wrlong	result1, fp
21a38     28 4E 85 F1 | 	sub	fp, #40
21a3c                 | LR__3613
21a3c     18 4E 05 F1 | 	add	fp, #24
21a40     A7 18 02 FB | 	rdlong	arg04, fp
21a44     01 18 06 F1 | 	add	arg04, #1
21a48     0C 13 C2 FA | 	rdbyte	arg01, arg04
21a4c     18 4E 05 F1 | 	add	fp, #24
21a50     A7 14 02 FB | 	rdlong	arg02, fp
21a54     10 4E 85 F1 | 	sub	fp, #16
21a58     A7 16 02 FB | 	rdlong	arg03, fp
21a5c     08 4E 05 F1 | 	add	fp, #8
21a60     A7 18 02 FB | 	rdlong	arg04, fp
21a64     28 4E 85 F1 | 	sub	fp, #40
21a68     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
21a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
21a70     1C 00 90 AD |  if_e	jmp	#LR__3614
21a74     04 4E 05 F1 | 	add	fp, #4
21a78     A7 1E 02 FB | 	rdlong	local01, fp
21a7c     04 4E 85 F1 | 	sub	fp, #4
21a80     11 1E 06 F1 | 	add	local01, #17
21a84     0F 03 48 FC | 	wrbyte	#1, local01
21a88     01 FA 05 F6 | 	mov	result1, #1
21a8c     48 03 90 FD | 	jmp	#LR__3623
21a90                 | LR__3614
21a90     04 4E 05 F1 | 	add	fp, #4
21a94     A7 FA 01 FB | 	rdlong	result1, fp
21a98     1C FA 05 F1 | 	add	result1, #28
21a9c     FD FA 01 FB | 	rdlong	result1, result1
21aa0     1C 4E 05 F1 | 	add	fp, #28
21aa4     A7 20 02 FB | 	rdlong	local02, fp
21aa8     10 FB 81 F1 | 	sub	result1, local02
21aac     08 4E 05 F1 | 	add	fp, #8
21ab0     A7 18 02 FB | 	rdlong	arg04, fp
21ab4     28 4E 85 F1 | 	sub	fp, #40
21ab8     0C FB 11 F2 | 	cmp	result1, arg04 wc
21abc     68 00 90 3D |  if_ae	jmp	#LR__3615
21ac0     04 4E 05 F1 | 	add	fp, #4
21ac4     A7 12 02 FB | 	rdlong	arg01, fp
21ac8     28 12 06 F1 | 	add	arg01, #40
21acc     2C 4E 05 F1 | 	add	fp, #44
21ad0     A7 14 02 FB | 	rdlong	arg02, fp
21ad4     2C 4E 85 F1 | 	sub	fp, #44
21ad8     A7 FA 01 FB | 	rdlong	result1, fp
21adc     1C FA 05 F1 | 	add	result1, #28
21ae0     FD 22 02 FB | 	rdlong	local03, result1
21ae4     1C 4E 05 F1 | 	add	fp, #28
21ae8     A7 18 02 FB | 	rdlong	arg04, fp
21aec     20 4E 85 F1 | 	sub	fp, #32
21af0     0C 23 82 F1 | 	sub	local03, arg04
21af4     09 22 66 F0 | 	shl	local03, #9
21af8     11 15 02 F1 | 	add	arg02, local03
21afc     09 16 C6 F9 | 	decod	arg03, #9
21b00     14 47 BF FD | 	call	#__system____builtin_memmove
21b04     04 4E 05 F1 | 	add	fp, #4
21b08     A7 18 02 FB | 	rdlong	arg04, fp
21b0c     0C FB 01 F6 | 	mov	result1, arg04
21b10     04 4E 85 F1 | 	sub	fp, #4
21b14     10 18 06 F1 | 	add	arg04, #16
21b18     0C 19 C2 FA | 	rdbyte	arg04, arg04
21b1c     7F 18 06 F5 | 	and	arg04, #127
21b20     10 FA 05 F1 | 	add	result1, #16
21b24     FD 18 42 FC | 	wrbyte	arg04, result1
21b28                 | LR__3615
21b28     28 4E 05 F1 | 	add	fp, #40
21b2c     A7 FA 01 FB | 	rdlong	result1, fp
21b30     09 FA 65 F0 | 	shl	result1, #9
21b34     04 4E 85 F1 | 	sub	fp, #4
21b38     A7 FA 61 FC | 	wrlong	result1, fp
21b3c     24 4E 85 F1 | 	sub	fp, #36
21b40                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
21b40                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
21b40                 | ' 				}
21b40                 | ' 
21b40                 | ' 
21b40                 | ' 				wcnt =  ((UINT) 512 )  * cc;
21b40                 | ' 				continue;
21b40     74 01 90 FD | 	jmp	#LR__3619
21b44                 | LR__3616
21b44     04 4E 05 F1 | 	add	fp, #4
21b48     A7 20 02 FB | 	rdlong	local02, fp
21b4c     1C 20 06 F1 | 	add	local02, #28
21b50     10 FB 01 FB | 	rdlong	result1, local02
21b54     1C 4E 05 F1 | 	add	fp, #28
21b58     A7 20 02 FB | 	rdlong	local02, fp
21b5c     20 4E 85 F1 | 	sub	fp, #32
21b60     10 FB 09 F2 | 	cmp	result1, local02 wz
21b64     90 00 90 AD |  if_e	jmp	#LR__3617
21b68     04 4E 05 F1 | 	add	fp, #4
21b6c     A7 FA 01 FB | 	rdlong	result1, fp
21b70     FD 22 02 F6 | 	mov	local03, result1
21b74     04 4E 85 F1 | 	sub	fp, #4
21b78     14 22 06 F1 | 	add	local03, #20
21b7c     11 23 02 FB | 	rdlong	local03, local03
21b80     0C FA 05 F1 | 	add	result1, #12
21b84     FD 24 02 FB | 	rdlong	local04, result1
21b88     12 27 02 F6 | 	mov	local05, local04
21b8c     13 23 12 F2 | 	cmp	local03, local05 wc
21b90     64 00 90 3D |  if_ae	jmp	#LR__3617
21b94     18 4E 05 F1 | 	add	fp, #24
21b98     A7 18 02 FB | 	rdlong	arg04, fp
21b9c     01 18 06 F1 | 	add	arg04, #1
21ba0     0C 13 C2 FA | 	rdbyte	arg01, arg04
21ba4     14 4E 85 F1 | 	sub	fp, #20
21ba8     A7 28 02 FB | 	rdlong	local06, fp
21bac     28 28 06 F1 | 	add	local06, #40
21bb0     14 2B 02 F6 | 	mov	local07, local06
21bb4     1C 4E 05 F1 | 	add	fp, #28
21bb8     A7 2C 02 FB | 	rdlong	local08, fp
21bbc     20 4E 85 F1 | 	sub	fp, #32
21bc0     01 2E 06 F6 | 	mov	local09, #1
21bc4     15 15 02 F6 | 	mov	arg02, local07
21bc8     16 17 02 F6 | 	mov	arg03, local08
21bcc     01 18 06 F6 | 	mov	arg04, #1
21bd0     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
21bd4     FD 30 0A F6 | 	mov	local10, result1 wz
21bd8     1C 00 90 AD |  if_e	jmp	#LR__3617
21bdc     04 4E 05 F1 | 	add	fp, #4
21be0     A7 30 02 FB | 	rdlong	local10, fp
21be4     04 4E 85 F1 | 	sub	fp, #4
21be8     11 30 06 F1 | 	add	local10, #17
21bec     18 03 48 FC | 	wrbyte	#1, local10
21bf0                 | ' 				fp->fptr < fp->obj.objsize &&
21bf0                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
21bf0                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
21bf0     01 FA 05 F6 | 	mov	result1, #1
21bf4     E0 01 90 FD | 	jmp	#LR__3623
21bf8                 | LR__3617
21bf8     04 4E 05 F1 | 	add	fp, #4
21bfc     A7 18 02 FB | 	rdlong	arg04, fp
21c00     1C 4E 05 F1 | 	add	fp, #28
21c04     A7 FA 01 FB | 	rdlong	result1, fp
21c08     20 4E 85 F1 | 	sub	fp, #32
21c0c     1C 18 06 F1 | 	add	arg04, #28
21c10     0C FB 61 FC | 	wrlong	result1, arg04
21c14                 | LR__3618
21c14     04 4E 05 F1 | 	add	fp, #4
21c18     A7 FA 01 FB | 	rdlong	result1, fp
21c1c     14 FA 05 F1 | 	add	result1, #20
21c20     FD FA 01 FB | 	rdlong	result1, result1
21c24     FF FB 05 F5 | 	and	result1, #511
21c28     09 32 C6 F9 | 	decod	local11, #9
21c2c     FD 32 82 F1 | 	sub	local11, result1
21c30     20 4E 05 F1 | 	add	fp, #32
21c34     A7 32 62 FC | 	wrlong	local11, fp
21c38     18 4E 85 F1 | 	sub	fp, #24
21c3c     A7 FA 01 FB | 	rdlong	result1, fp
21c40     0C 4E 85 F1 | 	sub	fp, #12
21c44     FD 32 1A F2 | 	cmp	local11, result1 wcz
21c48     0C 4E 05 11 |  if_a	add	fp, #12
21c4c     A7 32 02 1B |  if_a	rdlong	local11, fp
21c50     18 4E 05 11 |  if_a	add	fp, #24
21c54     A7 32 62 1C |  if_a	wrlong	local11, fp
21c58     24 4E 85 11 |  if_a	sub	fp, #36
21c5c     04 4E 05 F1 | 	add	fp, #4
21c60     A7 32 02 FB | 	rdlong	local11, fp
21c64     19 13 02 F6 | 	mov	arg01, local11
21c68     28 12 06 F1 | 	add	arg01, #40
21c6c     14 32 06 F1 | 	add	local11, #20
21c70     19 33 02 FB | 	rdlong	local11, local11
21c74     FF 33 06 F5 | 	and	local11, #511
21c78     19 13 02 F1 | 	add	arg01, local11
21c7c     2C 4E 05 F1 | 	add	fp, #44
21c80     A7 14 02 FB | 	rdlong	arg02, fp
21c84     0C 4E 85 F1 | 	sub	fp, #12
21c88     A7 16 02 FB | 	rdlong	arg03, fp
21c8c     24 4E 85 F1 | 	sub	fp, #36
21c90     84 45 BF FD | 	call	#__system____builtin_memmove
21c94     04 4E 05 F1 | 	add	fp, #4
21c98     A7 FA 01 FB | 	rdlong	result1, fp
21c9c     FD 32 02 F6 | 	mov	local11, result1
21ca0     04 4E 85 F1 | 	sub	fp, #4
21ca4     10 FA 05 F1 | 	add	result1, #16
21ca8     FD FA C1 FA | 	rdbyte	result1, result1
21cac     80 FA 45 F5 | 	or	result1, #128
21cb0     10 32 06 F1 | 	add	local11, #16
21cb4     19 FB 41 FC | 	wrbyte	result1, local11
21cb8                 | LR__3619
21cb8     0C 4E 05 F1 | 	add	fp, #12
21cbc     A7 32 02 FB | 	rdlong	local11, fp
21cc0     18 4E 05 F1 | 	add	fp, #24
21cc4     A7 FA 01 FB | 	rdlong	result1, fp
21cc8     FD 32 82 F1 | 	sub	local11, result1
21ccc     18 4E 85 F1 | 	sub	fp, #24
21cd0     A7 32 62 FC | 	wrlong	local11, fp
21cd4     04 4E 05 F1 | 	add	fp, #4
21cd8     A7 34 02 FB | 	rdlong	local12, fp
21cdc     1A 33 02 FB | 	rdlong	local11, local12
21ce0     14 4E 05 F1 | 	add	fp, #20
21ce4     A7 36 02 FB | 	rdlong	local13, fp
21ce8     1B 33 02 F1 | 	add	local11, local13
21cec     1A 33 62 FC | 	wrlong	local11, local12
21cf0     0C 4E 05 F1 | 	add	fp, #12
21cf4     A7 32 02 FB | 	rdlong	local11, fp
21cf8     0C 4E 85 F1 | 	sub	fp, #12
21cfc     A7 38 02 FB | 	rdlong	local14, fp
21d00     1C 33 02 F1 | 	add	local11, local14
21d04     0C 4E 05 F1 | 	add	fp, #12
21d08     A7 32 62 FC | 	wrlong	local11, fp
21d0c     2C 4E 85 F1 | 	sub	fp, #44
21d10     A7 3A 02 FB | 	rdlong	local15, fp
21d14     1D 33 02 F6 | 	mov	local11, local15
21d18     14 3A 06 F1 | 	add	local15, #20
21d1c     1D 3B 02 FB | 	rdlong	local15, local15
21d20     20 4E 05 F1 | 	add	fp, #32
21d24     A7 3C 02 FB | 	rdlong	local16, fp
21d28     1E 3B 02 F1 | 	add	local15, local16
21d2c     14 32 06 F1 | 	add	local11, #20
21d30     19 3B 62 FC | 	wrlong	local15, local11
21d34     20 4E 85 F1 | 	sub	fp, #32
21d38     A7 3E 02 FB | 	rdlong	local17, fp
21d3c     1F 33 02 F6 | 	mov	local11, local17
21d40     1F 41 02 F6 | 	mov	local18, local17
21d44     04 4E 85 F1 | 	sub	fp, #4
21d48     14 3E 06 F1 | 	add	local17, #20
21d4c     1F 43 02 FB | 	rdlong	local19, local17
21d50     0C 40 06 F1 | 	add	local18, #12
21d54     20 45 02 FB | 	rdlong	local20, local18
21d58     22 43 1A F2 | 	cmp	local19, local20 wcz
21d5c     24 00 90 ED |  if_be	jmp	#LR__3620
21d60     04 4E 05 F1 | 	add	fp, #4
21d64     A7 26 02 FB | 	rdlong	local05, fp
21d68     04 4E 85 F1 | 	sub	fp, #4
21d6c     13 23 02 F6 | 	mov	local03, local05
21d70     14 22 06 F1 | 	add	local03, #20
21d74     11 25 02 FB | 	rdlong	local04, local03
21d78     14 22 86 F1 | 	sub	local03, #20
21d7c     12 47 02 F6 | 	mov	local21, local04
21d80     20 00 90 FD | 	jmp	#LR__3621
21d84                 | LR__3620
21d84     04 4E 05 F1 | 	add	fp, #4
21d88     A7 2A 02 FB | 	rdlong	local07, fp
21d8c     04 4E 85 F1 | 	sub	fp, #4
21d90     15 31 02 F6 | 	mov	local10, local07
21d94     0C 30 06 F1 | 	add	local10, #12
21d98     18 2D 02 FB | 	rdlong	local08, local10
21d9c     0C 30 86 F1 | 	sub	local10, #12
21da0     16 47 02 F6 | 	mov	local21, local08
21da4                 | LR__3621
21da4     0C 32 06 F1 | 	add	local11, #12
21da8     19 47 62 FC | 	wrlong	local21, local11
21dac     5C F9 9F FD | 	jmp	#LR__3603
21db0                 | LR__3622
21db0     04 4E 05 F1 | 	add	fp, #4
21db4     A7 34 02 FB | 	rdlong	local12, fp
21db8     1A 1F 02 F6 | 	mov	local01, local12
21dbc     04 4E 85 F1 | 	sub	fp, #4
21dc0     10 34 06 F1 | 	add	local12, #16
21dc4     1A 33 C2 FA | 	rdbyte	local11, local12
21dc8     40 32 46 F5 | 	or	local11, #64
21dcc     10 1E 06 F1 | 	add	local01, #16
21dd0     0F 33 42 FC | 	wrbyte	local11, local01
21dd4                 | ' 
21dd4                 | ' 
21dd4                 | ' 
21dd4                 | ' 
21dd4                 | ' 
21dd4                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
21dd4                 | ' 		fp->flag |=  0x80 ;
21dd4                 | ' 
21dd4                 | ' 	}
21dd4                 | ' 
21dd4                 | ' 	fp->flag |=  0x40 ;
21dd4                 | ' 
21dd4                 | ' 	return FR_OK ;
21dd4     00 FA 05 F6 | 	mov	result1, #0
21dd8                 | LR__3623
21dd8     A7 F0 03 F6 | 	mov	ptra, fp
21ddc     B2 00 A0 FD | 	call	#popregs_
21de0                 | _fatfs_cc_f_write_ret
21de0     2D 00 64 FD | 	ret
21de4                 | 
21de4                 | _fatfs_cc_f_sync
21de4     00 4A 05 F6 | 	mov	COUNT_, #0
21de8     A8 00 A0 FD | 	call	#pushregs_
21dec     18 F0 07 F1 | 	add	ptra, #24
21df0     04 4E 05 F1 | 	add	fp, #4
21df4     A7 12 62 FC | 	wrlong	arg01, fp
21df8     08 4E 05 F1 | 	add	fp, #8
21dfc     A7 14 02 F6 | 	mov	arg02, fp
21e00     0C 4E 85 F1 | 	sub	fp, #12
21e04     D0 E8 BF FD | 	call	#_fatfs_cc_validate
21e08     08 4E 05 F1 | 	add	fp, #8
21e0c     A7 FA 61 FC | 	wrlong	result1, fp
21e10     08 4E 85 F1 | 	sub	fp, #8
21e14     00 FA 0D F2 | 	cmp	result1, #0 wz
21e18     C0 01 90 5D |  if_ne	jmp	#LR__3633
21e1c     04 4E 05 F1 | 	add	fp, #4
21e20     A7 18 02 FB | 	rdlong	arg04, fp
21e24     04 4E 85 F1 | 	sub	fp, #4
21e28     10 18 06 F1 | 	add	arg04, #16
21e2c     0C 19 C2 FA | 	rdbyte	arg04, arg04
21e30     40 18 CE F7 | 	test	arg04, #64 wz
21e34     A4 01 90 AD |  if_e	jmp	#LR__3632
21e38     04 4E 05 F1 | 	add	fp, #4
21e3c     A7 18 02 FB | 	rdlong	arg04, fp
21e40     04 4E 85 F1 | 	sub	fp, #4
21e44     10 18 06 F1 | 	add	arg04, #16
21e48     0C 19 C2 FA | 	rdbyte	arg04, arg04
21e4c     80 18 CE F7 | 	test	arg04, #128 wz
21e50     64 00 90 AD |  if_e	jmp	#LR__3630
21e54     0C 4E 05 F1 | 	add	fp, #12
21e58     A7 18 02 FB | 	rdlong	arg04, fp
21e5c     01 18 06 F1 | 	add	arg04, #1
21e60     0C 13 C2 FA | 	rdbyte	arg01, arg04
21e64     08 4E 85 F1 | 	sub	fp, #8
21e68     A7 18 02 FB | 	rdlong	arg04, fp
21e6c     0C 15 02 F6 | 	mov	arg02, arg04
21e70     28 14 06 F1 | 	add	arg02, #40
21e74     04 4E 85 F1 | 	sub	fp, #4
21e78     1C 18 06 F1 | 	add	arg04, #28
21e7c     0C 17 02 FB | 	rdlong	arg03, arg04
21e80     01 18 06 F6 | 	mov	arg04, #1
21e84     0C AE BF FD | 	call	#_fatfs_cc_disk_write
21e88     00 FA 0D F2 | 	cmp	result1, #0 wz
21e8c     01 FA 05 56 |  if_ne	mov	result1, #1
21e90     54 01 90 5D |  if_ne	jmp	#LR__3634
21e94     04 4E 05 F1 | 	add	fp, #4
21e98     A7 18 02 FB | 	rdlong	arg04, fp
21e9c     0C 17 02 F6 | 	mov	arg03, arg04
21ea0     04 4E 85 F1 | 	sub	fp, #4
21ea4     10 18 06 F1 | 	add	arg04, #16
21ea8     0C 19 C2 FA | 	rdbyte	arg04, arg04
21eac     7F 18 06 F5 | 	and	arg04, #127
21eb0     10 16 06 F1 | 	add	arg03, #16
21eb4     0B 19 42 FC | 	wrbyte	arg04, arg03
21eb8                 | LR__3630
21eb8     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
21ebc     10 4E 05 F1 | 	add	fp, #16
21ec0     A7 FA 61 FC | 	wrlong	result1, fp
21ec4     04 4E 85 F1 | 	sub	fp, #4
21ec8     A7 12 02 FB | 	rdlong	arg01, fp
21ecc     08 4E 85 F1 | 	sub	fp, #8
21ed0     A7 18 02 FB | 	rdlong	arg04, fp
21ed4     04 4E 85 F1 | 	sub	fp, #4
21ed8     20 18 06 F1 | 	add	arg04, #32
21edc     0C 15 02 FB | 	rdlong	arg02, arg04
21ee0     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
21ee4     08 4E 05 F1 | 	add	fp, #8
21ee8     A7 FA 61 FC | 	wrlong	result1, fp
21eec     08 4E 85 F1 | 	sub	fp, #8
21ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
21ef4     E4 00 90 5D |  if_ne	jmp	#LR__3631
21ef8     04 4E 05 F1 | 	add	fp, #4
21efc     A7 18 02 FB | 	rdlong	arg04, fp
21f00     24 18 06 F1 | 	add	arg04, #36
21f04     0C 19 02 FB | 	rdlong	arg04, arg04
21f08     10 4E 05 F1 | 	add	fp, #16
21f0c     A7 18 62 FC | 	wrlong	arg04, fp
21f10     0C 17 02 F6 | 	mov	arg03, arg04
21f14     0B 16 06 F1 | 	add	arg03, #11
21f18     0B 17 C2 FA | 	rdbyte	arg03, arg03
21f1c     20 16 46 F5 | 	or	arg03, #32
21f20     0B 18 06 F1 | 	add	arg04, #11
21f24     0C 17 42 FC | 	wrbyte	arg03, arg04
21f28     10 4E 85 F1 | 	sub	fp, #16
21f2c     A7 18 02 FB | 	rdlong	arg04, fp
21f30     0C 13 02 FB | 	rdlong	arg01, arg04
21f34     10 4E 05 F1 | 	add	fp, #16
21f38     A7 14 02 FB | 	rdlong	arg02, fp
21f3c     14 4E 85 F1 | 	sub	fp, #20
21f40     08 18 06 F1 | 	add	arg04, #8
21f44     0C 17 02 FB | 	rdlong	arg03, arg04
21f48     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
21f4c     14 4E 05 F1 | 	add	fp, #20
21f50     A7 12 02 FB | 	rdlong	arg01, fp
21f54     1C 12 06 F1 | 	add	arg01, #28
21f58     10 4E 85 F1 | 	sub	fp, #16
21f5c     A7 18 02 FB | 	rdlong	arg04, fp
21f60     0C 18 06 F1 | 	add	arg04, #12
21f64     0C 15 02 FB | 	rdlong	arg02, arg04
21f68     09 15 62 FC | 	wrlong	arg02, arg01
21f6c     10 4E 05 F1 | 	add	fp, #16
21f70     A7 12 02 FB | 	rdlong	arg01, fp
21f74     16 12 06 F1 | 	add	arg01, #22
21f78     04 4E 85 F1 | 	sub	fp, #4
21f7c     A7 14 02 FB | 	rdlong	arg02, fp
21f80     09 15 62 FC | 	wrlong	arg02, arg01
21f84     04 4E 05 F1 | 	add	fp, #4
21f88     A7 12 02 FB | 	rdlong	arg01, fp
21f8c     12 12 06 F1 | 	add	arg01, #18
21f90     09 01 58 FC | 	wrword	#0, arg01
21f94     08 4E 85 F1 | 	sub	fp, #8
21f98     A7 18 02 FB | 	rdlong	arg04, fp
21f9c     03 18 06 F1 | 	add	arg04, #3
21fa0     0C 03 48 FC | 	wrbyte	#1, arg04
21fa4     A7 12 02 FB | 	rdlong	arg01, fp
21fa8     0C 4E 85 F1 | 	sub	fp, #12
21fac     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
21fb0     08 4E 05 F1 | 	add	fp, #8
21fb4     A7 FA 61 FC | 	wrlong	result1, fp
21fb8     04 4E 85 F1 | 	sub	fp, #4
21fbc     A7 18 02 FB | 	rdlong	arg04, fp
21fc0     0C 17 02 F6 | 	mov	arg03, arg04
21fc4     04 4E 85 F1 | 	sub	fp, #4
21fc8     10 18 06 F1 | 	add	arg04, #16
21fcc     0C 19 C2 FA | 	rdbyte	arg04, arg04
21fd0     BF 18 06 F5 | 	and	arg04, #191
21fd4     10 16 06 F1 | 	add	arg03, #16
21fd8     0B 19 42 FC | 	wrbyte	arg04, arg03
21fdc                 | LR__3631
21fdc                 | LR__3632
21fdc                 | LR__3633
21fdc                 | ' 					dir = fp->dir_ptr;
21fdc                 | ' 					dir[ 11 ] |=  0x20 ;
21fdc                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
21fdc                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
21fdc                 | ' 					st_dword(dir +  22 , tm);
21fdc                 | ' 					st_word(dir +  18 , 0);
21fdc                 | ' 					fs->wflag = 1;
21fdc                 | ' 					res = sync_fs(fs);
21fdc                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
21fdc                 | ' 				}
21fdc                 | ' 			}
21fdc                 | ' 		}
21fdc                 | ' 	}
21fdc                 | ' 
21fdc                 | ' 	return res ;
21fdc     08 4E 05 F1 | 	add	fp, #8
21fe0     A7 FA 01 FB | 	rdlong	result1, fp
21fe4     08 4E 85 F1 | 	sub	fp, #8
21fe8                 | LR__3634
21fe8     A7 F0 03 F6 | 	mov	ptra, fp
21fec     B2 00 A0 FD | 	call	#popregs_
21ff0                 | _fatfs_cc_f_sync_ret
21ff0     2D 00 64 FD | 	ret
21ff4                 | 
21ff4                 | _fatfs_cc_f_close
21ff4     01 4A 05 F6 | 	mov	COUNT_, #1
21ff8     A8 00 A0 FD | 	call	#pushregs_
21ffc     10 F0 07 F1 | 	add	ptra, #16
22000     04 4E 05 F1 | 	add	fp, #4
22004     A7 12 62 FC | 	wrlong	arg01, fp
22008     04 4E 85 F1 | 	sub	fp, #4
2200c     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
22010     08 4E 05 F1 | 	add	fp, #8
22014     A7 FA 61 FC | 	wrlong	result1, fp
22018     08 4E 85 F1 | 	sub	fp, #8
2201c     00 FA 0D F2 | 	cmp	result1, #0 wz
22020     38 00 90 5D |  if_ne	jmp	#LR__3640
22024     04 4E 05 F1 | 	add	fp, #4
22028     A7 12 02 FB | 	rdlong	arg01, fp
2202c     08 4E 05 F1 | 	add	fp, #8
22030     A7 14 02 F6 | 	mov	arg02, fp
22034     0C 4E 85 F1 | 	sub	fp, #12
22038     9C E6 BF FD | 	call	#_fatfs_cc_validate
2203c     08 4E 05 F1 | 	add	fp, #8
22040     A7 FA 61 FC | 	wrlong	result1, fp
22044     08 4E 85 F1 | 	sub	fp, #8
22048     00 FA 0D F2 | 	cmp	result1, #0 wz
2204c     04 4E 05 A1 |  if_e	add	fp, #4
22050     A7 1E 02 AB |  if_e	rdlong	local01, fp
22054     04 4E 85 A1 |  if_e	sub	fp, #4
22058     0F 01 68 AC |  if_e	wrlong	#0, local01
2205c                 | LR__3640
2205c                 | ' 
2205c                 | ' 
2205c                 | ' 
2205c                 | ' 
2205c                 | ' 			fp->obj.fs = 0;
2205c                 | ' #line 4192 "ff.c"
2205c                 | ' 		}
2205c                 | ' 	}
2205c                 | ' 	return res;
2205c     08 4E 05 F1 | 	add	fp, #8
22060     A7 FA 01 FB | 	rdlong	result1, fp
22064     08 4E 85 F1 | 	sub	fp, #8
22068     A7 F0 03 F6 | 	mov	ptra, fp
2206c     B2 00 A0 FD | 	call	#popregs_
22070                 | _fatfs_cc_f_close_ret
22070     2D 00 64 FD | 	ret
22074                 | 
22074                 | _fatfs_cc_f_lseek
22074     00 4A 05 F6 | 	mov	COUNT_, #0
22078     A8 00 A0 FD | 	call	#pushregs_
2207c     24 F0 07 F1 | 	add	ptra, #36
22080     04 4E 05 F1 | 	add	fp, #4
22084     A7 12 62 FC | 	wrlong	arg01, fp
22088     04 4E 05 F1 | 	add	fp, #4
2208c     A7 14 62 FC | 	wrlong	arg02, fp
22090     04 4E 85 F1 | 	sub	fp, #4
22094     A7 12 02 FB | 	rdlong	arg01, fp
22098     0C 4E 05 F1 | 	add	fp, #12
2209c     A7 14 02 F6 | 	mov	arg02, fp
220a0     10 4E 85 F1 | 	sub	fp, #16
220a4     30 E6 BF FD | 	call	#_fatfs_cc_validate
220a8     0C 4E 05 F1 | 	add	fp, #12
220ac     A7 FA 61 FC | 	wrlong	result1, fp
220b0     0C 4E 85 F1 | 	sub	fp, #12
220b4     00 FA 0D F2 | 	cmp	result1, #0 wz
220b8     1C 00 90 5D |  if_ne	jmp	#LR__3650
220bc     04 4E 05 F1 | 	add	fp, #4
220c0     A7 18 02 FB | 	rdlong	arg04, fp
220c4     11 18 06 F1 | 	add	arg04, #17
220c8     0C 19 C2 FA | 	rdbyte	arg04, arg04
220cc     08 4E 05 F1 | 	add	fp, #8
220d0     A7 18 62 FC | 	wrlong	arg04, fp
220d4     0C 4E 85 F1 | 	sub	fp, #12
220d8                 | LR__3650
220d8     0C 4E 05 F1 | 	add	fp, #12
220dc     A7 18 0A FB | 	rdlong	arg04, fp wz
220e0     0C 4E 85 F1 | 	sub	fp, #12
220e4     0C 4E 05 51 |  if_ne	add	fp, #12
220e8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
220ec     0C 4E 85 51 |  if_ne	sub	fp, #12
220f0     40 06 90 5D |  if_ne	jmp	#LR__3673
220f4     04 4E 05 F1 | 	add	fp, #4
220f8     A7 18 02 FB | 	rdlong	arg04, fp
220fc     04 4E 05 F1 | 	add	fp, #4
22100     A7 16 02 FB | 	rdlong	arg03, fp
22104     08 4E 85 F1 | 	sub	fp, #8
22108     0C 18 06 F1 | 	add	arg04, #12
2210c     0C 19 02 FB | 	rdlong	arg04, arg04
22110     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
22114     3C 00 90 ED |  if_be	jmp	#LR__3651
22118     04 4E 05 F1 | 	add	fp, #4
2211c     A7 16 02 FB | 	rdlong	arg03, fp
22120     04 4E 85 F1 | 	sub	fp, #4
22124     10 16 06 F1 | 	add	arg03, #16
22128     0B 17 C2 FA | 	rdbyte	arg03, arg03
2212c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
22130     02 16 CE F7 | 	test	arg03, #2 wz
22134     1C 00 90 5D |  if_ne	jmp	#LR__3651
22138     04 4E 05 F1 | 	add	fp, #4
2213c     A7 16 02 FB | 	rdlong	arg03, fp
22140     0C 16 06 F1 | 	add	arg03, #12
22144     0B 17 02 FB | 	rdlong	arg03, arg03
22148     04 4E 05 F1 | 	add	fp, #4
2214c     A7 16 62 FC | 	wrlong	arg03, fp
22150     08 4E 85 F1 | 	sub	fp, #8
22154                 | LR__3651
22154     04 4E 05 F1 | 	add	fp, #4
22158     A7 16 02 FB | 	rdlong	arg03, fp
2215c     14 16 06 F1 | 	add	arg03, #20
22160     0B 17 02 FB | 	rdlong	arg03, arg03
22164     1C 4E 05 F1 | 	add	fp, #28
22168     A7 16 62 FC | 	wrlong	arg03, fp
2216c     1C 4E 85 F1 | 	sub	fp, #28
22170     A7 16 02 FB | 	rdlong	arg03, fp
22174     18 4E 05 F1 | 	add	fp, #24
22178     A7 00 68 FC | 	wrlong	#0, fp
2217c     14 16 06 F1 | 	add	arg03, #20
22180     0B 01 68 FC | 	wrlong	#0, arg03
22184     14 4E 85 F1 | 	sub	fp, #20
22188     A7 16 02 FB | 	rdlong	arg03, fp
2218c     08 4E 85 F1 | 	sub	fp, #8
22190     01 16 16 F2 | 	cmp	arg03, #1 wc
22194     E4 03 90 CD |  if_b	jmp	#LR__3667
22198     10 4E 05 F1 | 	add	fp, #16
2219c     A7 16 02 FB | 	rdlong	arg03, fp
221a0     0A 16 06 F1 | 	add	arg03, #10
221a4     0B 19 E2 FA | 	rdword	arg04, arg03
221a8     09 18 66 F0 | 	shl	arg04, #9
221ac     08 4E 05 F1 | 	add	fp, #8
221b0     A7 18 62 FC | 	wrlong	arg04, fp
221b4     08 4E 05 F1 | 	add	fp, #8
221b8     A7 18 02 FB | 	rdlong	arg04, fp
221bc     20 4E 85 F1 | 	sub	fp, #32
221c0     01 18 16 F2 | 	cmp	arg04, #1 wc
221c4     AC 00 90 CD |  if_b	jmp	#LR__3652
221c8     08 4E 05 F1 | 	add	fp, #8
221cc     A7 18 02 FB | 	rdlong	arg04, fp
221d0     01 18 86 F1 | 	sub	arg04, #1
221d4     10 4E 05 F1 | 	add	fp, #16
221d8     A7 16 02 FB | 	rdlong	arg03, fp
221dc     0B 19 12 FD | 	qdiv	arg04, arg03
221e0     08 4E 05 F1 | 	add	fp, #8
221e4     A7 FA 01 FB | 	rdlong	result1, fp
221e8     01 FA 85 F1 | 	sub	result1, #1
221ec     18 18 62 FD | 	getqx	arg04
221f0     0B FB 11 FD | 	qdiv	result1, arg03
221f4     20 4E 85 F1 | 	sub	fp, #32
221f8     18 16 62 FD | 	getqx	arg03
221fc     0B 19 12 F2 | 	cmp	arg04, arg03 wc
22200     70 00 90 CD |  if_b	jmp	#LR__3652
22204     04 4E 05 F1 | 	add	fp, #4
22208     A7 16 02 FB | 	rdlong	arg03, fp
2220c     1C 4E 05 F1 | 	add	fp, #28
22210     A7 FA 01 FB | 	rdlong	result1, fp
22214     01 FA 85 F1 | 	sub	result1, #1
22218     08 4E 85 F1 | 	sub	fp, #8
2221c     A7 18 02 FB | 	rdlong	arg04, fp
22220     01 18 86 F1 | 	sub	arg04, #1
22224     0C FB 21 F5 | 	andn	result1, arg04
22228     14 16 06 F1 | 	add	arg03, #20
2222c     0B FB 61 FC | 	wrlong	result1, arg03
22230     10 4E 85 F1 | 	sub	fp, #16
22234     A7 16 02 FB | 	rdlong	arg03, fp
22238     04 4E 85 F1 | 	sub	fp, #4
2223c     A7 18 02 FB | 	rdlong	arg04, fp
22240     14 18 06 F1 | 	add	arg04, #20
22244     0C 19 02 FB | 	rdlong	arg04, arg04
22248     0C 17 82 F1 | 	sub	arg03, arg04
2224c     04 4E 05 F1 | 	add	fp, #4
22250     A7 16 62 FC | 	wrlong	arg03, fp
22254     04 4E 85 F1 | 	sub	fp, #4
22258     A7 16 02 FB | 	rdlong	arg03, fp
2225c     18 16 06 F1 | 	add	arg03, #24
22260     0B 17 02 FB | 	rdlong	arg03, arg03
22264     10 4E 05 F1 | 	add	fp, #16
22268     A7 16 62 FC | 	wrlong	arg03, fp
2226c     14 4E 85 F1 | 	sub	fp, #20
22270     D0 00 90 FD | 	jmp	#LR__3656
22274                 | LR__3652
22274     04 4E 05 F1 | 	add	fp, #4
22278     A7 16 02 FB | 	rdlong	arg03, fp
2227c     08 16 06 F1 | 	add	arg03, #8
22280     0B 17 0A FB | 	rdlong	arg03, arg03 wz
22284     10 4E 05 F1 | 	add	fp, #16
22288     A7 16 62 FC | 	wrlong	arg03, fp
2228c     14 4E 85 F1 | 	sub	fp, #20
22290     94 00 90 5D |  if_ne	jmp	#LR__3655
22294     04 4E 05 F1 | 	add	fp, #4
22298     A7 12 02 FB | 	rdlong	arg01, fp
2229c     04 4E 85 F1 | 	sub	fp, #4
222a0     00 14 06 F6 | 	mov	arg02, #0
222a4     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
222a8     14 4E 05 F1 | 	add	fp, #20
222ac     A7 FA 61 FC | 	wrlong	result1, fp
222b0     14 4E 85 F1 | 	sub	fp, #20
222b4     01 FA 0D F2 | 	cmp	result1, #1 wz
222b8     1C 00 90 5D |  if_ne	jmp	#LR__3653
222bc     04 4E 05 F1 | 	add	fp, #4
222c0     A7 16 02 FB | 	rdlong	arg03, fp
222c4     04 4E 85 F1 | 	sub	fp, #4
222c8     11 16 06 F1 | 	add	arg03, #17
222cc     0B 05 48 FC | 	wrbyte	#2, arg03
222d0     02 FA 05 F6 | 	mov	result1, #2
222d4     5C 04 90 FD | 	jmp	#LR__3673
222d8                 | LR__3653
222d8     14 4E 05 F1 | 	add	fp, #20
222dc     A7 FA 01 FB | 	rdlong	result1, fp
222e0     14 4E 85 F1 | 	sub	fp, #20
222e4     FF FF 7F FF 
222e8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
222ec     1C 00 90 5D |  if_ne	jmp	#LR__3654
222f0     04 4E 05 F1 | 	add	fp, #4
222f4     A7 16 02 FB | 	rdlong	arg03, fp
222f8     04 4E 85 F1 | 	sub	fp, #4
222fc     11 16 06 F1 | 	add	arg03, #17
22300     0B 03 48 FC | 	wrbyte	#1, arg03
22304     01 FA 05 F6 | 	mov	result1, #1
22308     28 04 90 FD | 	jmp	#LR__3673
2230c                 | LR__3654
2230c     04 4E 05 F1 | 	add	fp, #4
22310     A7 16 02 FB | 	rdlong	arg03, fp
22314     10 4E 05 F1 | 	add	fp, #16
22318     A7 18 02 FB | 	rdlong	arg04, fp
2231c     14 4E 85 F1 | 	sub	fp, #20
22320     08 16 06 F1 | 	add	arg03, #8
22324     0B 19 62 FC | 	wrlong	arg04, arg03
22328                 | LR__3655
22328     04 4E 05 F1 | 	add	fp, #4
2232c     A7 16 02 FB | 	rdlong	arg03, fp
22330     10 4E 05 F1 | 	add	fp, #16
22334     A7 18 02 FB | 	rdlong	arg04, fp
22338     14 4E 85 F1 | 	sub	fp, #20
2233c     18 16 06 F1 | 	add	arg03, #24
22340     0B 19 62 FC | 	wrlong	arg04, arg03
22344                 | LR__3656
22344     14 4E 05 F1 | 	add	fp, #20
22348     A7 16 0A FB | 	rdlong	arg03, fp wz
2234c     14 4E 85 F1 | 	sub	fp, #20
22350     28 02 90 AD |  if_e	jmp	#LR__3666
22354                 | ' 				while (ofs > bcs) {
22354                 | LR__3657
22354     08 4E 05 F1 | 	add	fp, #8
22358     A7 18 02 FB | 	rdlong	arg04, fp
2235c     10 4E 05 F1 | 	add	fp, #16
22360     A7 16 02 FB | 	rdlong	arg03, fp
22364     18 4E 85 F1 | 	sub	fp, #24
22368     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2236c     68 01 90 ED |  if_be	jmp	#LR__3663
22370     08 4E 05 F1 | 	add	fp, #8
22374     A7 18 02 FB | 	rdlong	arg04, fp
22378     10 4E 05 F1 | 	add	fp, #16
2237c     A7 16 02 FB | 	rdlong	arg03, fp
22380     0B 19 82 F1 | 	sub	arg04, arg03
22384     10 4E 85 F1 | 	sub	fp, #16
22388     A7 18 62 FC | 	wrlong	arg04, fp
2238c     04 4E 85 F1 | 	sub	fp, #4
22390     A7 18 02 FB | 	rdlong	arg04, fp
22394     0C FB 01 F6 | 	mov	result1, arg04
22398     14 18 06 F1 | 	add	arg04, #20
2239c     0C 19 02 FB | 	rdlong	arg04, arg04
223a0     14 4E 05 F1 | 	add	fp, #20
223a4     A7 16 02 FB | 	rdlong	arg03, fp
223a8     0B 19 02 F1 | 	add	arg04, arg03
223ac     14 FA 05 F1 | 	add	result1, #20
223b0     FD 18 62 FC | 	wrlong	arg04, result1
223b4     14 4E 85 F1 | 	sub	fp, #20
223b8     A7 16 02 FB | 	rdlong	arg03, fp
223bc     04 4E 85 F1 | 	sub	fp, #4
223c0     10 16 06 F1 | 	add	arg03, #16
223c4     0B 17 C2 FA | 	rdbyte	arg03, arg03
223c8     02 16 CE F7 | 	test	arg03, #2 wz
223cc     3C 00 90 AD |  if_e	jmp	#LR__3658
223d0     04 4E 05 F1 | 	add	fp, #4
223d4     A7 12 02 FB | 	rdlong	arg01, fp
223d8     10 4E 05 F1 | 	add	fp, #16
223dc     A7 14 02 FB | 	rdlong	arg02, fp
223e0     14 4E 85 F1 | 	sub	fp, #20
223e4     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
223e8     14 4E 05 F1 | 	add	fp, #20
223ec     A7 FA 61 FC | 	wrlong	result1, fp
223f0     00 FA 4D F2 | 	cmps	result1, #0 wz
223f4     14 4E 85 F1 | 	sub	fp, #20
223f8     08 4E 05 A1 |  if_e	add	fp, #8
223fc     A7 00 68 AC |  if_e	wrlong	#0, fp
22400     08 4E 85 A1 |  if_e	sub	fp, #8
22404                 | ' 							ofs = 0; break;
22404     D0 00 90 AD |  if_e	jmp	#LR__3663
22408     24 00 90 FD | 	jmp	#LR__3659
2240c                 | LR__3658
2240c     04 4E 05 F1 | 	add	fp, #4
22410     A7 12 02 FB | 	rdlong	arg01, fp
22414     10 4E 05 F1 | 	add	fp, #16
22418     A7 14 02 FB | 	rdlong	arg02, fp
2241c     14 4E 85 F1 | 	sub	fp, #20
22420     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
22424     14 4E 05 F1 | 	add	fp, #20
22428     A7 FA 61 FC | 	wrlong	result1, fp
2242c     14 4E 85 F1 | 	sub	fp, #20
22430                 | LR__3659
22430     14 4E 05 F1 | 	add	fp, #20
22434     A7 16 02 FB | 	rdlong	arg03, fp
22438     14 4E 85 F1 | 	sub	fp, #20
2243c     FF FF 7F FF 
22440     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
22444     1C 00 90 5D |  if_ne	jmp	#LR__3660
22448     04 4E 05 F1 | 	add	fp, #4
2244c     A7 16 02 FB | 	rdlong	arg03, fp
22450     04 4E 85 F1 | 	sub	fp, #4
22454     11 16 06 F1 | 	add	arg03, #17
22458     0B 03 48 FC | 	wrbyte	#1, arg03
2245c     01 FA 05 F6 | 	mov	result1, #1
22460     D0 02 90 FD | 	jmp	#LR__3673
22464                 | LR__3660
22464     14 4E 05 F1 | 	add	fp, #20
22468     A7 16 02 FB | 	rdlong	arg03, fp
2246c     14 4E 85 F1 | 	sub	fp, #20
22470     02 16 16 F2 | 	cmp	arg03, #2 wc
22474     24 00 90 CD |  if_b	jmp	#LR__3661
22478     10 4E 05 F1 | 	add	fp, #16
2247c     A7 18 02 FB | 	rdlong	arg04, fp
22480     04 4E 05 F1 | 	add	fp, #4
22484     A7 16 02 FB | 	rdlong	arg03, fp
22488     14 4E 85 F1 | 	sub	fp, #20
2248c     18 18 06 F1 | 	add	arg04, #24
22490     0C 19 02 FB | 	rdlong	arg04, arg04
22494     0C 17 12 F2 | 	cmp	arg03, arg04 wc
22498     1C 00 90 CD |  if_b	jmp	#LR__3662
2249c                 | LR__3661
2249c     04 4E 05 F1 | 	add	fp, #4
224a0     A7 16 02 FB | 	rdlong	arg03, fp
224a4     04 4E 85 F1 | 	sub	fp, #4
224a8     11 16 06 F1 | 	add	arg03, #17
224ac     0B 05 48 FC | 	wrbyte	#2, arg03
224b0     02 FA 05 F6 | 	mov	result1, #2
224b4     7C 02 90 FD | 	jmp	#LR__3673
224b8                 | LR__3662
224b8     04 4E 05 F1 | 	add	fp, #4
224bc     A7 18 02 FB | 	rdlong	arg04, fp
224c0     10 4E 05 F1 | 	add	fp, #16
224c4     A7 16 02 FB | 	rdlong	arg03, fp
224c8     14 4E 85 F1 | 	sub	fp, #20
224cc     18 18 06 F1 | 	add	arg04, #24
224d0     0C 17 62 FC | 	wrlong	arg03, arg04
224d4     7C FE 9F FD | 	jmp	#LR__3657
224d8                 | LR__3663
224d8     04 4E 05 F1 | 	add	fp, #4
224dc     A7 16 02 FB | 	rdlong	arg03, fp
224e0     0B 13 02 F6 | 	mov	arg01, arg03
224e4     14 16 06 F1 | 	add	arg03, #20
224e8     0B 15 02 FB | 	rdlong	arg02, arg03
224ec     04 4E 05 F1 | 	add	fp, #4
224f0     A7 16 02 FB | 	rdlong	arg03, fp
224f4     0B 15 02 F1 | 	add	arg02, arg03
224f8     14 12 06 F1 | 	add	arg01, #20
224fc     09 15 62 FC | 	wrlong	arg02, arg01
22500     A7 16 02 FB | 	rdlong	arg03, fp
22504     08 4E 85 F1 | 	sub	fp, #8
22508     FF 17 CE F7 | 	test	arg03, #511 wz
2250c     6C 00 90 AD |  if_e	jmp	#LR__3665
22510     10 4E 05 F1 | 	add	fp, #16
22514     A7 12 02 FB | 	rdlong	arg01, fp
22518     04 4E 05 F1 | 	add	fp, #4
2251c     A7 14 02 FB | 	rdlong	arg02, fp
22520     14 4E 85 F1 | 	sub	fp, #20
22524     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
22528     1C 4E 05 F1 | 	add	fp, #28
2252c     A7 FA 61 FC | 	wrlong	result1, fp
22530     1C 4E 85 F1 | 	sub	fp, #28
22534     00 FA 0D F2 | 	cmp	result1, #0 wz
22538     1C 00 90 5D |  if_ne	jmp	#LR__3664
2253c     04 4E 05 F1 | 	add	fp, #4
22540     A7 16 02 FB | 	rdlong	arg03, fp
22544     04 4E 85 F1 | 	sub	fp, #4
22548     11 16 06 F1 | 	add	arg03, #17
2254c     0B 05 48 FC | 	wrbyte	#2, arg03
22550     02 FA 05 F6 | 	mov	result1, #2
22554     DC 01 90 FD | 	jmp	#LR__3673
22558                 | LR__3664
22558     1C 4E 05 F1 | 	add	fp, #28
2255c     A7 18 02 FB | 	rdlong	arg04, fp
22560     14 4E 85 F1 | 	sub	fp, #20
22564     A7 16 02 FB | 	rdlong	arg03, fp
22568     09 16 46 F0 | 	shr	arg03, #9
2256c     0B 19 02 F1 | 	add	arg04, arg03
22570     14 4E 05 F1 | 	add	fp, #20
22574     A7 18 62 FC | 	wrlong	arg04, fp
22578     1C 4E 85 F1 | 	sub	fp, #28
2257c                 | LR__3665
2257c                 | LR__3666
2257c                 | LR__3667
2257c     04 4E 05 F1 | 	add	fp, #4
22580     A7 18 02 FB | 	rdlong	arg04, fp
22584     0C 17 02 F6 | 	mov	arg03, arg04
22588     04 4E 85 F1 | 	sub	fp, #4
2258c     14 16 06 F1 | 	add	arg03, #20
22590     0B 17 02 FB | 	rdlong	arg03, arg03
22594     0C 18 06 F1 | 	add	arg04, #12
22598     0C 19 02 FB | 	rdlong	arg04, arg04
2259c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
225a0     3C 00 90 ED |  if_be	jmp	#LR__3668
225a4     04 4E 05 F1 | 	add	fp, #4
225a8     A7 18 02 FB | 	rdlong	arg04, fp
225ac     0C 17 02 F6 | 	mov	arg03, arg04
225b0     14 18 06 F1 | 	add	arg04, #20
225b4     0C 19 02 FB | 	rdlong	arg04, arg04
225b8     0C 16 06 F1 | 	add	arg03, #12
225bc     0B 19 62 FC | 	wrlong	arg04, arg03
225c0     A7 18 02 FB | 	rdlong	arg04, fp
225c4     0C 17 02 F6 | 	mov	arg03, arg04
225c8     04 4E 85 F1 | 	sub	fp, #4
225cc     10 18 06 F1 | 	add	arg04, #16
225d0     0C 19 C2 FA | 	rdbyte	arg04, arg04
225d4     40 18 46 F5 | 	or	arg04, #64
225d8     10 16 06 F1 | 	add	arg03, #16
225dc     0B 19 42 FC | 	wrbyte	arg04, arg03
225e0                 | LR__3668
225e0     04 4E 05 F1 | 	add	fp, #4
225e4     A7 16 02 FB | 	rdlong	arg03, fp
225e8     04 4E 85 F1 | 	sub	fp, #4
225ec     14 16 06 F1 | 	add	arg03, #20
225f0     0B 17 02 FB | 	rdlong	arg03, arg03
225f4     FF 17 CE F7 | 	test	arg03, #511 wz
225f8     2C 01 90 AD |  if_e	jmp	#LR__3672
225fc     04 4E 05 F1 | 	add	fp, #4
22600     A7 18 02 FB | 	rdlong	arg04, fp
22604     18 4E 05 F1 | 	add	fp, #24
22608     A7 16 02 FB | 	rdlong	arg03, fp
2260c     1C 4E 85 F1 | 	sub	fp, #28
22610     1C 18 06 F1 | 	add	arg04, #28
22614     0C 19 02 FB | 	rdlong	arg04, arg04
22618     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2261c     08 01 90 AD |  if_e	jmp	#LR__3672
22620     04 4E 05 F1 | 	add	fp, #4
22624     A7 16 02 FB | 	rdlong	arg03, fp
22628     04 4E 85 F1 | 	sub	fp, #4
2262c     10 16 06 F1 | 	add	arg03, #16
22630     0B 17 C2 FA | 	rdbyte	arg03, arg03
22634     80 16 CE F7 | 	test	arg03, #128 wz
22638     7C 00 90 AD |  if_e	jmp	#LR__3670
2263c     10 4E 05 F1 | 	add	fp, #16
22640     A7 16 02 FB | 	rdlong	arg03, fp
22644     01 16 06 F1 | 	add	arg03, #1
22648     0B 13 C2 FA | 	rdbyte	arg01, arg03
2264c     0C 4E 85 F1 | 	sub	fp, #12
22650     A7 16 02 FB | 	rdlong	arg03, fp
22654     0B 15 02 F6 | 	mov	arg02, arg03
22658     28 14 06 F1 | 	add	arg02, #40
2265c     04 4E 85 F1 | 	sub	fp, #4
22660     1C 16 06 F1 | 	add	arg03, #28
22664     0B 17 02 FB | 	rdlong	arg03, arg03
22668     01 18 06 F6 | 	mov	arg04, #1
2266c     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
22670     00 FA 0D F2 | 	cmp	result1, #0 wz
22674     1C 00 90 AD |  if_e	jmp	#LR__3669
22678     04 4E 05 F1 | 	add	fp, #4
2267c     A7 16 02 FB | 	rdlong	arg03, fp
22680     04 4E 85 F1 | 	sub	fp, #4
22684     11 16 06 F1 | 	add	arg03, #17
22688     0B 03 48 FC | 	wrbyte	#1, arg03
2268c     01 FA 05 F6 | 	mov	result1, #1
22690     A0 00 90 FD | 	jmp	#LR__3673
22694                 | LR__3669
22694     04 4E 05 F1 | 	add	fp, #4
22698     A7 18 02 FB | 	rdlong	arg04, fp
2269c     0C 17 02 F6 | 	mov	arg03, arg04
226a0     04 4E 85 F1 | 	sub	fp, #4
226a4     10 18 06 F1 | 	add	arg04, #16
226a8     0C 19 C2 FA | 	rdbyte	arg04, arg04
226ac     7F 18 06 F5 | 	and	arg04, #127
226b0     10 16 06 F1 | 	add	arg03, #16
226b4     0B 19 42 FC | 	wrbyte	arg04, arg03
226b8                 | LR__3670
226b8     10 4E 05 F1 | 	add	fp, #16
226bc     A7 16 02 FB | 	rdlong	arg03, fp
226c0     01 16 06 F1 | 	add	arg03, #1
226c4     0B 13 C2 FA | 	rdbyte	arg01, arg03
226c8     0C 4E 85 F1 | 	sub	fp, #12
226cc     A7 14 02 FB | 	rdlong	arg02, fp
226d0     28 14 06 F1 | 	add	arg02, #40
226d4     18 4E 05 F1 | 	add	fp, #24
226d8     A7 16 02 FB | 	rdlong	arg03, fp
226dc     1C 4E 85 F1 | 	sub	fp, #28
226e0     01 18 06 F6 | 	mov	arg04, #1
226e4     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
226e8     00 FA 0D F2 | 	cmp	result1, #0 wz
226ec     1C 00 90 AD |  if_e	jmp	#LR__3671
226f0     04 4E 05 F1 | 	add	fp, #4
226f4     A7 16 02 FB | 	rdlong	arg03, fp
226f8     04 4E 85 F1 | 	sub	fp, #4
226fc     11 16 06 F1 | 	add	arg03, #17
22700     0B 03 48 FC | 	wrbyte	#1, arg03
22704     01 FA 05 F6 | 	mov	result1, #1
22708     28 00 90 FD | 	jmp	#LR__3673
2270c                 | LR__3671
2270c     04 4E 05 F1 | 	add	fp, #4
22710     A7 18 02 FB | 	rdlong	arg04, fp
22714     18 4E 05 F1 | 	add	fp, #24
22718     A7 16 02 FB | 	rdlong	arg03, fp
2271c     1C 4E 85 F1 | 	sub	fp, #28
22720     1C 18 06 F1 | 	add	arg04, #28
22724     0C 17 62 FC | 	wrlong	arg03, arg04
22728                 | LR__3672
22728                 | ' 
22728                 | ' 			fp->sect = nsect;
22728                 | ' 		}
22728                 | ' 	}
22728                 | ' 
22728                 | ' 	return res ;
22728     0C 4E 05 F1 | 	add	fp, #12
2272c     A7 FA 01 FB | 	rdlong	result1, fp
22730     0C 4E 85 F1 | 	sub	fp, #12
22734                 | LR__3673
22734     A7 F0 03 F6 | 	mov	ptra, fp
22738     B2 00 A0 FD | 	call	#popregs_
2273c                 | _fatfs_cc_f_lseek_ret
2273c     2D 00 64 FD | 	ret
22740                 | 
22740                 | _fatfs_cc_f_opendir
22740     01 4A 05 F6 | 	mov	COUNT_, #1
22744     A8 00 A0 FD | 	call	#pushregs_
22748     14 F0 07 F1 | 	add	ptra, #20
2274c     04 4E 05 F1 | 	add	fp, #4
22750     A7 12 62 FC | 	wrlong	arg01, fp
22754     04 4E 05 F1 | 	add	fp, #4
22758     A7 14 62 FC | 	wrlong	arg02, fp
2275c     04 4E 85 F1 | 	sub	fp, #4
22760     A7 16 0A FB | 	rdlong	arg03, fp wz
22764     04 4E 85 F1 | 	sub	fp, #4
22768     09 FA 05 A6 |  if_e	mov	result1, #9
2276c     78 01 90 AD |  if_e	jmp	#LR__3686
22770     08 4E 05 F1 | 	add	fp, #8
22774     A7 12 02 F6 | 	mov	arg01, fp
22778     08 4E 05 F1 | 	add	fp, #8
2277c     A7 14 02 F6 | 	mov	arg02, fp
22780     10 4E 85 F1 | 	sub	fp, #16
22784     00 16 06 F6 | 	mov	arg03, #0
22788     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2278c     0C 4E 05 F1 | 	add	fp, #12
22790     A7 FA 61 FC | 	wrlong	result1, fp
22794     0C 4E 85 F1 | 	sub	fp, #12
22798     00 FA 0D F2 | 	cmp	result1, #0 wz
2279c     20 01 90 5D |  if_ne	jmp	#LR__3685
227a0     04 4E 05 F1 | 	add	fp, #4
227a4     A7 16 02 FB | 	rdlong	arg03, fp
227a8     0C 4E 05 F1 | 	add	fp, #12
227ac     A7 FA 01 FB | 	rdlong	result1, fp
227b0     0B FB 61 FC | 	wrlong	result1, arg03
227b4     0C 4E 85 F1 | 	sub	fp, #12
227b8     A7 12 02 FB | 	rdlong	arg01, fp
227bc     04 4E 05 F1 | 	add	fp, #4
227c0     A7 14 02 FB | 	rdlong	arg02, fp
227c4     08 4E 85 F1 | 	sub	fp, #8
227c8     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
227cc     0C 4E 05 F1 | 	add	fp, #12
227d0     A7 FA 61 FC | 	wrlong	result1, fp
227d4     0C 4E 85 F1 | 	sub	fp, #12
227d8     00 FA 0D F2 | 	cmp	result1, #0 wz
227dc     C4 00 90 5D |  if_ne	jmp	#LR__3684
227e0     04 4E 05 F1 | 	add	fp, #4
227e4     A7 16 02 FB | 	rdlong	arg03, fp
227e8     04 4E 85 F1 | 	sub	fp, #4
227ec     2B 16 06 F1 | 	add	arg03, #43
227f0     0B 17 C2 FA | 	rdbyte	arg03, arg03
227f4     80 16 CE F7 | 	test	arg03, #128 wz
227f8     58 00 90 5D |  if_ne	jmp	#LR__3682
227fc     04 4E 05 F1 | 	add	fp, #4
22800     A7 16 02 FB | 	rdlong	arg03, fp
22804     04 4E 85 F1 | 	sub	fp, #4
22808     06 16 06 F1 | 	add	arg03, #6
2280c     0B 17 C2 FA | 	rdbyte	arg03, arg03
22810     10 16 CE F7 | 	test	arg03, #16 wz
22814     30 00 90 AD |  if_e	jmp	#LR__3680
22818     04 4E 05 F1 | 	add	fp, #4
2281c     A7 16 02 FB | 	rdlong	arg03, fp
22820     0B 1F 02 F6 | 	mov	local01, arg03
22824     0C 4E 05 F1 | 	add	fp, #12
22828     A7 12 02 FB | 	rdlong	arg01, fp
2282c     10 4E 85 F1 | 	sub	fp, #16
22830     1C 16 06 F1 | 	add	arg03, #28
22834     0B 15 02 FB | 	rdlong	arg02, arg03
22838     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2283c     08 1E 06 F1 | 	add	local01, #8
22840     0F FB 61 FC | 	wrlong	result1, local01
22844     0C 00 90 FD | 	jmp	#LR__3681
22848                 | LR__3680
22848     0C 4E 05 F1 | 	add	fp, #12
2284c     A7 0A 68 FC | 	wrlong	#5, fp
22850     0C 4E 85 F1 | 	sub	fp, #12
22854                 | LR__3681
22854                 | LR__3682
22854     0C 4E 05 F1 | 	add	fp, #12
22858     A7 1E 0A FB | 	rdlong	local01, fp wz
2285c     0C 4E 85 F1 | 	sub	fp, #12
22860     40 00 90 5D |  if_ne	jmp	#LR__3683
22864     04 4E 05 F1 | 	add	fp, #4
22868     A7 1E 02 FB | 	rdlong	local01, fp
2286c     0C 4E 05 F1 | 	add	fp, #12
22870     A7 16 02 FB | 	rdlong	arg03, fp
22874     06 16 06 F1 | 	add	arg03, #6
22878     0B 17 E2 FA | 	rdword	arg03, arg03
2287c     04 1E 06 F1 | 	add	local01, #4
22880     0F 17 52 FC | 	wrword	arg03, local01
22884     0C 4E 85 F1 | 	sub	fp, #12
22888     A7 12 02 FB | 	rdlong	arg01, fp
2288c     04 4E 85 F1 | 	sub	fp, #4
22890     00 14 06 F6 | 	mov	arg02, #0
22894     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
22898     0C 4E 05 F1 | 	add	fp, #12
2289c     A7 FA 61 FC | 	wrlong	result1, fp
228a0     0C 4E 85 F1 | 	sub	fp, #12
228a4                 | LR__3683
228a4                 | LR__3684
228a4     0C 4E 05 F1 | 	add	fp, #12
228a8     A7 1E 02 FB | 	rdlong	local01, fp
228ac     0C 4E 85 F1 | 	sub	fp, #12
228b0     04 1E 0E F2 | 	cmp	local01, #4 wz
228b4     0C 4E 05 A1 |  if_e	add	fp, #12
228b8     A7 0A 68 AC |  if_e	wrlong	#5, fp
228bc     0C 4E 85 A1 |  if_e	sub	fp, #12
228c0                 | LR__3685
228c0     0C 4E 05 F1 | 	add	fp, #12
228c4     A7 1E 0A FB | 	rdlong	local01, fp wz
228c8     0C 4E 85 F1 | 	sub	fp, #12
228cc     04 4E 05 51 |  if_ne	add	fp, #4
228d0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
228d4     04 4E 85 51 |  if_ne	sub	fp, #4
228d8     0F 01 68 5C |  if_ne	wrlong	#0, local01
228dc                 | ' 
228dc                 | ' 	return res ;
228dc     0C 4E 05 F1 | 	add	fp, #12
228e0     A7 FA 01 FB | 	rdlong	result1, fp
228e4     0C 4E 85 F1 | 	sub	fp, #12
228e8                 | LR__3686
228e8     A7 F0 03 F6 | 	mov	ptra, fp
228ec     B2 00 A0 FD | 	call	#popregs_
228f0                 | _fatfs_cc_f_opendir_ret
228f0     2D 00 64 FD | 	ret
228f4                 | 
228f4                 | _fatfs_cc_f_closedir
228f4     00 4A 05 F6 | 	mov	COUNT_, #0
228f8     A8 00 A0 FD | 	call	#pushregs_
228fc     10 F0 07 F1 | 	add	ptra, #16
22900     04 4E 05 F1 | 	add	fp, #4
22904     A7 12 62 FC | 	wrlong	arg01, fp
22908     08 4E 05 F1 | 	add	fp, #8
2290c     A7 14 02 F6 | 	mov	arg02, fp
22910     0C 4E 85 F1 | 	sub	fp, #12
22914     C0 DD BF FD | 	call	#_fatfs_cc_validate
22918     08 4E 05 F1 | 	add	fp, #8
2291c     A7 FA 61 FC | 	wrlong	result1, fp
22920     08 4E 85 F1 | 	sub	fp, #8
22924     00 FA 0D F2 | 	cmp	result1, #0 wz
22928     04 4E 05 A1 |  if_e	add	fp, #4
2292c     A7 FA 01 AB |  if_e	rdlong	result1, fp
22930     04 4E 85 A1 |  if_e	sub	fp, #4
22934     FD 00 68 AC |  if_e	wrlong	#0, result1
22938                 | ' 
22938                 | ' 
22938                 | ' 
22938                 | ' 
22938                 | ' 		dp->obj.fs = 0;
22938                 | ' #line 4633 "ff.c"
22938                 | ' 	}
22938                 | ' 	return res;
22938     08 4E 05 F1 | 	add	fp, #8
2293c     A7 FA 01 FB | 	rdlong	result1, fp
22940     08 4E 85 F1 | 	sub	fp, #8
22944     A7 F0 03 F6 | 	mov	ptra, fp
22948     B2 00 A0 FD | 	call	#popregs_
2294c                 | _fatfs_cc_f_closedir_ret
2294c     2D 00 64 FD | 	ret
22950                 | 
22950                 | _fatfs_cc_f_readdir
22950     00 4A 05 F6 | 	mov	COUNT_, #0
22954     A8 00 A0 FD | 	call	#pushregs_
22958     14 F0 07 F1 | 	add	ptra, #20
2295c     04 4E 05 F1 | 	add	fp, #4
22960     A7 12 62 FC | 	wrlong	arg01, fp
22964     04 4E 05 F1 | 	add	fp, #4
22968     A7 14 62 FC | 	wrlong	arg02, fp
2296c     04 4E 85 F1 | 	sub	fp, #4
22970     A7 12 02 FB | 	rdlong	arg01, fp
22974     0C 4E 05 F1 | 	add	fp, #12
22978     A7 14 02 F6 | 	mov	arg02, fp
2297c     10 4E 85 F1 | 	sub	fp, #16
22980     54 DD BF FD | 	call	#_fatfs_cc_validate
22984     0C 4E 05 F1 | 	add	fp, #12
22988     A7 FA 61 FC | 	wrlong	result1, fp
2298c     0C 4E 85 F1 | 	sub	fp, #12
22990     00 FA 0D F2 | 	cmp	result1, #0 wz
22994     BC 00 90 5D |  if_ne	jmp	#LR__3693
22998     08 4E 05 F1 | 	add	fp, #8
2299c     A7 FA 09 FB | 	rdlong	result1, fp wz
229a0     08 4E 85 F1 | 	sub	fp, #8
229a4     24 00 90 5D |  if_ne	jmp	#LR__3690
229a8     04 4E 05 F1 | 	add	fp, #4
229ac     A7 12 02 FB | 	rdlong	arg01, fp
229b0     04 4E 85 F1 | 	sub	fp, #4
229b4     00 14 06 F6 | 	mov	arg02, #0
229b8     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
229bc     0C 4E 05 F1 | 	add	fp, #12
229c0     A7 FA 61 FC | 	wrlong	result1, fp
229c4     0C 4E 85 F1 | 	sub	fp, #12
229c8     88 00 90 FD | 	jmp	#LR__3692
229cc                 | LR__3690
229cc     04 4E 05 F1 | 	add	fp, #4
229d0     A7 12 02 FB | 	rdlong	arg01, fp
229d4     04 4E 85 F1 | 	sub	fp, #4
229d8     00 14 06 F6 | 	mov	arg02, #0
229dc     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
229e0     0C 4E 05 F1 | 	add	fp, #12
229e4     A7 FA 61 FC | 	wrlong	result1, fp
229e8     0C 4E 85 F1 | 	sub	fp, #12
229ec     04 FA 0D F2 | 	cmp	result1, #4 wz
229f0     0C 4E 05 A1 |  if_e	add	fp, #12
229f4     A7 00 68 AC |  if_e	wrlong	#0, fp
229f8     0C 4E 85 A1 |  if_e	sub	fp, #12
229fc     0C 4E 05 F1 | 	add	fp, #12
22a00     A7 FA 09 FB | 	rdlong	result1, fp wz
22a04     0C 4E 85 F1 | 	sub	fp, #12
22a08     48 00 90 5D |  if_ne	jmp	#LR__3691
22a0c     04 4E 05 F1 | 	add	fp, #4
22a10     A7 12 02 FB | 	rdlong	arg01, fp
22a14     04 4E 05 F1 | 	add	fp, #4
22a18     A7 14 02 FB | 	rdlong	arg02, fp
22a1c     08 4E 85 F1 | 	sub	fp, #8
22a20     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
22a24     04 4E 05 F1 | 	add	fp, #4
22a28     A7 12 02 FB | 	rdlong	arg01, fp
22a2c     04 4E 85 F1 | 	sub	fp, #4
22a30     00 14 06 F6 | 	mov	arg02, #0
22a34     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
22a38     0C 4E 05 F1 | 	add	fp, #12
22a3c     A7 FA 61 FC | 	wrlong	result1, fp
22a40     0C 4E 85 F1 | 	sub	fp, #12
22a44     04 FA 0D F2 | 	cmp	result1, #4 wz
22a48     0C 4E 05 A1 |  if_e	add	fp, #12
22a4c     A7 00 68 AC |  if_e	wrlong	#0, fp
22a50     0C 4E 85 A1 |  if_e	sub	fp, #12
22a54                 | LR__3691
22a54                 | LR__3692
22a54                 | LR__3693
22a54                 | ' 			}
22a54                 | ' 			;
22a54                 | ' 		}
22a54                 | ' 	}
22a54                 | ' 	return res ;
22a54     0C 4E 05 F1 | 	add	fp, #12
22a58     A7 FA 01 FB | 	rdlong	result1, fp
22a5c     0C 4E 85 F1 | 	sub	fp, #12
22a60     A7 F0 03 F6 | 	mov	ptra, fp
22a64     B2 00 A0 FD | 	call	#popregs_
22a68                 | _fatfs_cc_f_readdir_ret
22a68     2D 00 64 FD | 	ret
22a6c                 | 
22a6c                 | _fatfs_cc_f_stat
22a6c     00 4A 05 F6 | 	mov	COUNT_, #0
22a70     A8 00 A0 FD | 	call	#pushregs_
22a74     40 F0 07 F1 | 	add	ptra, #64
22a78     04 4E 05 F1 | 	add	fp, #4
22a7c     A7 12 62 FC | 	wrlong	arg01, fp
22a80     04 4E 05 F1 | 	add	fp, #4
22a84     A7 14 62 FC | 	wrlong	arg02, fp
22a88     04 4E 85 F1 | 	sub	fp, #4
22a8c     A7 12 02 F6 | 	mov	arg01, fp
22a90     0C 4E 05 F1 | 	add	fp, #12
22a94     A7 14 02 F6 | 	mov	arg02, fp
22a98     10 4E 85 F1 | 	sub	fp, #16
22a9c     00 16 06 F6 | 	mov	arg03, #0
22aa0     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
22aa4     0C 4E 05 F1 | 	add	fp, #12
22aa8     A7 FA 61 FC | 	wrlong	result1, fp
22aac     0C 4E 85 F1 | 	sub	fp, #12
22ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
22ab4     74 00 90 5D |  if_ne	jmp	#LR__3703
22ab8     10 4E 05 F1 | 	add	fp, #16
22abc     A7 12 02 F6 | 	mov	arg01, fp
22ac0     0C 4E 85 F1 | 	sub	fp, #12
22ac4     A7 14 02 FB | 	rdlong	arg02, fp
22ac8     04 4E 85 F1 | 	sub	fp, #4
22acc     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
22ad0     0C 4E 05 F1 | 	add	fp, #12
22ad4     A7 FA 61 FC | 	wrlong	result1, fp
22ad8     0C 4E 85 F1 | 	sub	fp, #12
22adc     00 FA 0D F2 | 	cmp	result1, #0 wz
22ae0     48 00 90 5D |  if_ne	jmp	#LR__3702
22ae4     3B 4E 05 F1 | 	add	fp, #59
22ae8     A7 FA C1 FA | 	rdbyte	result1, fp
22aec     3B 4E 85 F1 | 	sub	fp, #59
22af0     80 FA CD F7 | 	test	result1, #128 wz
22af4     0C 4E 05 51 |  if_ne	add	fp, #12
22af8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
22afc     0C 4E 85 51 |  if_ne	sub	fp, #12
22b00     28 00 90 5D |  if_ne	jmp	#LR__3701
22b04     08 4E 05 F1 | 	add	fp, #8
22b08     A7 FA 09 FB | 	rdlong	result1, fp wz
22b0c     08 4E 85 F1 | 	sub	fp, #8
22b10     18 00 90 AD |  if_e	jmp	#LR__3700
22b14     10 4E 05 F1 | 	add	fp, #16
22b18     A7 12 02 F6 | 	mov	arg01, fp
22b1c     08 4E 85 F1 | 	sub	fp, #8
22b20     A7 14 02 FB | 	rdlong	arg02, fp
22b24     08 4E 85 F1 | 	sub	fp, #8
22b28     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
22b2c                 | LR__3700
22b2c                 | LR__3701
22b2c                 | LR__3702
22b2c                 | LR__3703
22b2c                 | ' 			}
22b2c                 | ' 		}
22b2c                 | ' 		;
22b2c                 | ' 	}
22b2c                 | ' 
22b2c                 | ' 	return res ;
22b2c     0C 4E 05 F1 | 	add	fp, #12
22b30     A7 FA 01 FB | 	rdlong	result1, fp
22b34     0C 4E 85 F1 | 	sub	fp, #12
22b38     A7 F0 03 F6 | 	mov	ptra, fp
22b3c     B2 00 A0 FD | 	call	#popregs_
22b40                 | _fatfs_cc_f_stat_ret
22b40     2D 00 64 FD | 	ret
22b44                 | 
22b44                 | _fatfs_cc_f_unlink
22b44     00 4A 05 F6 | 	mov	COUNT_, #0
22b48     A8 00 A0 FD | 	call	#pushregs_
22b4c     74 F0 07 F1 | 	add	ptra, #116
22b50     04 4E 05 F1 | 	add	fp, #4
22b54     A7 12 62 FC | 	wrlong	arg01, fp
22b58     68 4E 05 F1 | 	add	fp, #104
22b5c     A7 00 68 FC | 	wrlong	#0, fp
22b60     68 4E 85 F1 | 	sub	fp, #104
22b64     A7 12 02 F6 | 	mov	arg01, fp
22b68     6C 4E 05 F1 | 	add	fp, #108
22b6c     A7 14 02 F6 | 	mov	arg02, fp
22b70     70 4E 85 F1 | 	sub	fp, #112
22b74     02 16 06 F6 | 	mov	arg03, #2
22b78     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
22b7c     08 4E 05 F1 | 	add	fp, #8
22b80     A7 FA 61 FC | 	wrlong	result1, fp
22b84     08 4E 85 F1 | 	sub	fp, #8
22b88     00 FA 0D F2 | 	cmp	result1, #0 wz
22b8c     E4 01 90 5D |  if_ne	jmp	#LR__3718
22b90     70 4E 05 F1 | 	add	fp, #112
22b94     A7 16 02 FB | 	rdlong	arg03, fp
22b98     64 4E 85 F1 | 	sub	fp, #100
22b9c     A7 16 62 FC | 	wrlong	arg03, fp
22ba0     A7 12 02 F6 | 	mov	arg01, fp
22ba4     08 4E 85 F1 | 	sub	fp, #8
22ba8     A7 14 02 FB | 	rdlong	arg02, fp
22bac     04 4E 85 F1 | 	sub	fp, #4
22bb0     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
22bb4     08 4E 05 F1 | 	add	fp, #8
22bb8     A7 FA 61 FC | 	wrlong	result1, fp
22bbc     00 FA 4D F2 | 	cmps	result1, #0 wz
22bc0     08 4E 85 F1 | 	sub	fp, #8
22bc4     AC 01 90 5D |  if_ne	jmp	#LR__3717
22bc8     37 4E 05 F1 | 	add	fp, #55
22bcc     A7 FA C1 FA | 	rdbyte	result1, fp
22bd0     37 4E 85 F1 | 	sub	fp, #55
22bd4     80 FA CD F7 | 	test	result1, #128 wz
22bd8     08 4E 05 51 |  if_ne	add	fp, #8
22bdc     A7 0C 68 5C |  if_ne	wrlong	#6, fp
22be0     08 4E 85 51 |  if_ne	sub	fp, #8
22be4     1C 00 90 5D |  if_ne	jmp	#LR__3710
22be8     12 4E 05 F1 | 	add	fp, #18
22bec     A7 FA C1 FA | 	rdbyte	result1, fp
22bf0     12 4E 85 F1 | 	sub	fp, #18
22bf4     01 FA CD F7 | 	test	result1, #1 wz
22bf8     08 4E 05 51 |  if_ne	add	fp, #8
22bfc     A7 0E 68 5C |  if_ne	wrlong	#7, fp
22c00     08 4E 85 51 |  if_ne	sub	fp, #8
22c04                 | LR__3710
22c04     08 4E 05 F1 | 	add	fp, #8
22c08     A7 FA 09 FB | 	rdlong	result1, fp wz
22c0c     08 4E 85 F1 | 	sub	fp, #8
22c10     C8 00 90 5D |  if_ne	jmp	#LR__3713
22c14     70 4E 05 F1 | 	add	fp, #112
22c18     A7 12 02 FB | 	rdlong	arg01, fp
22c1c     48 4E 85 F1 | 	sub	fp, #72
22c20     A7 14 02 FB | 	rdlong	arg02, fp
22c24     28 4E 85 F1 | 	sub	fp, #40
22c28     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
22c2c     6C 4E 05 F1 | 	add	fp, #108
22c30     A7 FA 61 FC | 	wrlong	result1, fp
22c34     5A 4E 85 F1 | 	sub	fp, #90
22c38     A7 FA C1 FA | 	rdbyte	result1, fp
22c3c     12 4E 85 F1 | 	sub	fp, #18
22c40     10 FA CD F7 | 	test	result1, #16 wz
22c44     94 00 90 AD |  if_e	jmp	#LR__3712
22c48     70 4E 05 F1 | 	add	fp, #112
22c4c     A7 FA 01 FB | 	rdlong	result1, fp
22c50     34 4E 85 F1 | 	sub	fp, #52
22c54     A7 FA 61 FC | 	wrlong	result1, fp
22c58     30 4E 05 F1 | 	add	fp, #48
22c5c     A7 16 02 FB | 	rdlong	arg03, fp
22c60     28 4E 85 F1 | 	sub	fp, #40
22c64     A7 16 62 FC | 	wrlong	arg03, fp
22c68     08 4E 85 F1 | 	sub	fp, #8
22c6c     A7 12 02 F6 | 	mov	arg01, fp
22c70     3C 4E 85 F1 | 	sub	fp, #60
22c74     00 14 06 F6 | 	mov	arg02, #0
22c78     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
22c7c     08 4E 05 F1 | 	add	fp, #8
22c80     A7 FA 61 FC | 	wrlong	result1, fp
22c84     08 4E 85 F1 | 	sub	fp, #8
22c88     00 FA 0D F2 | 	cmp	result1, #0 wz
22c8c     4C 00 90 5D |  if_ne	jmp	#LR__3711
22c90     3C 4E 05 F1 | 	add	fp, #60
22c94     A7 12 02 F6 | 	mov	arg01, fp
22c98     3C 4E 85 F1 | 	sub	fp, #60
22c9c     00 14 06 F6 | 	mov	arg02, #0
22ca0     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
22ca4     08 4E 05 F1 | 	add	fp, #8
22ca8     A7 FA 61 FC | 	wrlong	result1, fp
22cac     00 FA 4D F2 | 	cmps	result1, #0 wz
22cb0     08 4E 85 F1 | 	sub	fp, #8
22cb4     08 4E 05 A1 |  if_e	add	fp, #8
22cb8     A7 0E 68 AC |  if_e	wrlong	#7, fp
22cbc     08 4E 85 A1 |  if_e	sub	fp, #8
22cc0     08 4E 05 F1 | 	add	fp, #8
22cc4     A7 FA 01 FB | 	rdlong	result1, fp
22cc8     08 4E 85 F1 | 	sub	fp, #8
22ccc     04 FA 0D F2 | 	cmp	result1, #4 wz
22cd0     08 4E 05 A1 |  if_e	add	fp, #8
22cd4     A7 00 68 AC |  if_e	wrlong	#0, fp
22cd8     08 4E 85 A1 |  if_e	sub	fp, #8
22cdc                 | LR__3711
22cdc                 | LR__3712
22cdc                 | LR__3713
22cdc     08 4E 05 F1 | 	add	fp, #8
22ce0     A7 FA 09 FB | 	rdlong	result1, fp wz
22ce4     08 4E 85 F1 | 	sub	fp, #8
22ce8     88 00 90 5D |  if_ne	jmp	#LR__3716
22cec     0C 4E 05 F1 | 	add	fp, #12
22cf0     A7 12 02 F6 | 	mov	arg01, fp
22cf4     0C 4E 85 F1 | 	sub	fp, #12
22cf8     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
22cfc     08 4E 05 F1 | 	add	fp, #8
22d00     A7 FA 61 FC | 	wrlong	result1, fp
22d04     08 4E 85 F1 | 	sub	fp, #8
22d08     00 FA 0D F2 | 	cmp	result1, #0 wz
22d0c     38 00 90 5D |  if_ne	jmp	#LR__3714
22d10     6C 4E 05 F1 | 	add	fp, #108
22d14     A7 FA 09 FB | 	rdlong	result1, fp wz
22d18     6C 4E 85 F1 | 	sub	fp, #108
22d1c     28 00 90 AD |  if_e	jmp	#LR__3714
22d20     0C 4E 05 F1 | 	add	fp, #12
22d24     A7 12 02 F6 | 	mov	arg01, fp
22d28     60 4E 05 F1 | 	add	fp, #96
22d2c     A7 14 02 FB | 	rdlong	arg02, fp
22d30     6C 4E 85 F1 | 	sub	fp, #108
22d34     00 16 06 F6 | 	mov	arg03, #0
22d38     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
22d3c     08 4E 05 F1 | 	add	fp, #8
22d40     A7 FA 61 FC | 	wrlong	result1, fp
22d44     08 4E 85 F1 | 	sub	fp, #8
22d48                 | LR__3714
22d48     08 4E 05 F1 | 	add	fp, #8
22d4c     A7 FA 09 FB | 	rdlong	result1, fp wz
22d50     08 4E 85 F1 | 	sub	fp, #8
22d54     1C 00 90 5D |  if_ne	jmp	#LR__3715
22d58     70 4E 05 F1 | 	add	fp, #112
22d5c     A7 12 02 FB | 	rdlong	arg01, fp
22d60     70 4E 85 F1 | 	sub	fp, #112
22d64     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
22d68     08 4E 05 F1 | 	add	fp, #8
22d6c     A7 FA 61 FC | 	wrlong	result1, fp
22d70     08 4E 85 F1 | 	sub	fp, #8
22d74                 | LR__3715
22d74                 | LR__3716
22d74                 | LR__3717
22d74                 | LR__3718
22d74                 | ' 			}
22d74                 | ' 		}
22d74                 | ' 		;
22d74                 | ' 	}
22d74                 | ' 
22d74                 | ' 	return res ;
22d74     08 4E 05 F1 | 	add	fp, #8
22d78     A7 FA 01 FB | 	rdlong	result1, fp
22d7c     08 4E 85 F1 | 	sub	fp, #8
22d80     A7 F0 03 F6 | 	mov	ptra, fp
22d84     B2 00 A0 FD | 	call	#popregs_
22d88                 | _fatfs_cc_f_unlink_ret
22d88     2D 00 64 FD | 	ret
22d8c                 | 
22d8c                 | _fatfs_cc_f_mkdir
22d8c     00 4A 05 F6 | 	mov	COUNT_, #0
22d90     A8 00 A0 FD | 	call	#pushregs_
22d94     5C F0 07 F1 | 	add	ptra, #92
22d98     04 4E 05 F1 | 	add	fp, #4
22d9c     A7 12 62 FC | 	wrlong	arg01, fp
22da0     A7 12 02 F6 | 	mov	arg01, fp
22da4     48 4E 05 F1 | 	add	fp, #72
22da8     A7 14 02 F6 | 	mov	arg02, fp
22dac     4C 4E 85 F1 | 	sub	fp, #76
22db0     02 16 06 F6 | 	mov	arg03, #2
22db4     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
22db8     08 4E 05 F1 | 	add	fp, #8
22dbc     A7 FA 61 FC | 	wrlong	result1, fp
22dc0     08 4E 85 F1 | 	sub	fp, #8
22dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
22dc8     C4 02 90 5D |  if_ne	jmp	#LR__3725
22dcc     4C 4E 05 F1 | 	add	fp, #76
22dd0     A7 16 02 FB | 	rdlong	arg03, fp
22dd4     40 4E 85 F1 | 	sub	fp, #64
22dd8     A7 16 62 FC | 	wrlong	arg03, fp
22ddc     A7 12 02 F6 | 	mov	arg01, fp
22de0     08 4E 85 F1 | 	sub	fp, #8
22de4     A7 14 02 FB | 	rdlong	arg02, fp
22de8     04 4E 85 F1 | 	sub	fp, #4
22dec     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
22df0     08 4E 05 F1 | 	add	fp, #8
22df4     A7 FA 61 FC | 	wrlong	result1, fp
22df8     00 FA 4D F2 | 	cmps	result1, #0 wz
22dfc     08 4E 85 F1 | 	sub	fp, #8
22e00     08 4E 05 A1 |  if_e	add	fp, #8
22e04     A7 10 68 AC |  if_e	wrlong	#8, fp
22e08     08 4E 85 A1 |  if_e	sub	fp, #8
22e0c     08 4E 05 F1 | 	add	fp, #8
22e10     A7 FA 01 FB | 	rdlong	result1, fp
22e14     08 4E 85 F1 | 	sub	fp, #8
22e18     04 FA 0D F2 | 	cmp	result1, #4 wz
22e1c     70 02 90 5D |  if_ne	jmp	#LR__3724
22e20     4C 4E 05 F1 | 	add	fp, #76
22e24     A7 16 02 FB | 	rdlong	arg03, fp
22e28     10 4E 85 F1 | 	sub	fp, #16
22e2c     A7 16 62 FC | 	wrlong	arg03, fp
22e30     A7 12 02 F6 | 	mov	arg01, fp
22e34     3C 4E 85 F1 | 	sub	fp, #60
22e38     00 14 06 F6 | 	mov	arg02, #0
22e3c     04 AC BF FD | 	call	#_fatfs_cc_create_chain
22e40     50 4E 05 F1 | 	add	fp, #80
22e44     A7 FA 61 FC | 	wrlong	result1, fp
22e48     48 4E 85 F1 | 	sub	fp, #72
22e4c     A7 00 68 FC | 	wrlong	#0, fp
22e50     48 4E 05 F1 | 	add	fp, #72
22e54     A7 FA 09 FB | 	rdlong	result1, fp wz
22e58     50 4E 85 F1 | 	sub	fp, #80
22e5c     08 4E 05 A1 |  if_e	add	fp, #8
22e60     A7 0E 68 AC |  if_e	wrlong	#7, fp
22e64     08 4E 85 A1 |  if_e	sub	fp, #8
22e68     50 4E 05 F1 | 	add	fp, #80
22e6c     A7 FA 01 FB | 	rdlong	result1, fp
22e70     50 4E 85 F1 | 	sub	fp, #80
22e74     01 FA 0D F2 | 	cmp	result1, #1 wz
22e78     08 4E 05 A1 |  if_e	add	fp, #8
22e7c     A7 04 68 AC |  if_e	wrlong	#2, fp
22e80     08 4E 85 A1 |  if_e	sub	fp, #8
22e84     50 4E 05 F1 | 	add	fp, #80
22e88     A7 16 02 FB | 	rdlong	arg03, fp
22e8c     50 4E 85 F1 | 	sub	fp, #80
22e90     FF FF 7F FF 
22e94     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
22e98     08 4E 05 A1 |  if_e	add	fp, #8
22e9c     A7 02 68 AC |  if_e	wrlong	#1, fp
22ea0     08 4E 85 A1 |  if_e	sub	fp, #8
22ea4     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
22ea8     58 4E 05 F1 | 	add	fp, #88
22eac     A7 FA 61 FC | 	wrlong	result1, fp
22eb0     50 4E 85 F1 | 	sub	fp, #80
22eb4     A7 FA 09 FB | 	rdlong	result1, fp wz
22eb8     08 4E 85 F1 | 	sub	fp, #8
22ebc     1C 01 90 5D |  if_ne	jmp	#LR__3721
22ec0     4C 4E 05 F1 | 	add	fp, #76
22ec4     A7 12 02 FB | 	rdlong	arg01, fp
22ec8     04 4E 05 F1 | 	add	fp, #4
22ecc     A7 14 02 FB | 	rdlong	arg02, fp
22ed0     50 4E 85 F1 | 	sub	fp, #80
22ed4     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
22ed8     08 4E 05 F1 | 	add	fp, #8
22edc     A7 FA 61 FC | 	wrlong	result1, fp
22ee0     00 FA 4D F2 | 	cmps	result1, #0 wz
22ee4     08 4E 85 F1 | 	sub	fp, #8
22ee8     F0 00 90 5D |  if_ne	jmp	#LR__3720
22eec     4C 4E 05 F1 | 	add	fp, #76
22ef0     A7 12 02 FB | 	rdlong	arg01, fp
22ef4     4C 4E 85 F1 | 	sub	fp, #76
22ef8     34 12 06 F1 | 	add	arg01, #52
22efc     20 14 06 F6 | 	mov	arg02, #32
22f00     0B 16 06 F6 | 	mov	arg03, #11
22f04     98 00 A0 FD | 	call	#\builtin_bytefill_
22f08     4C 4E 05 F1 | 	add	fp, #76
22f0c     A7 FA 01 FB | 	rdlong	result1, fp
22f10     34 FA 05 F1 | 	add	result1, #52
22f14     FD 5C 48 FC | 	wrbyte	#46, result1
22f18     A7 16 02 FB | 	rdlong	arg03, fp
22f1c     3F 16 06 F1 | 	add	arg03, #63
22f20     0B 21 48 FC | 	wrbyte	#16, arg03
22f24     A7 12 02 FB | 	rdlong	arg01, fp
22f28     4A 12 06 F1 | 	add	arg01, #74
22f2c     0C 4E 05 F1 | 	add	fp, #12
22f30     A7 14 02 FB | 	rdlong	arg02, fp
22f34     09 15 62 FC | 	wrlong	arg02, arg01
22f38     0C 4E 85 F1 | 	sub	fp, #12
22f3c     A7 14 02 FB | 	rdlong	arg02, fp
22f40     0A 13 02 F6 | 	mov	arg01, arg02
22f44     34 14 06 F1 | 	add	arg02, #52
22f48     04 4E 05 F1 | 	add	fp, #4
22f4c     A7 16 02 FB | 	rdlong	arg03, fp
22f50     50 4E 85 F1 | 	sub	fp, #80
22f54     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
22f58     4C 4E 05 F1 | 	add	fp, #76
22f5c     A7 14 02 FB | 	rdlong	arg02, fp
22f60     0A 13 02 F6 | 	mov	arg01, arg02
22f64     54 12 06 F1 | 	add	arg01, #84
22f68     4C 4E 85 F1 | 	sub	fp, #76
22f6c     34 14 06 F1 | 	add	arg02, #52
22f70     20 16 06 F6 | 	mov	arg03, #32
22f74     A0 32 BF FD | 	call	#__system____builtin_memmove
22f78     4C 4E 05 F1 | 	add	fp, #76
22f7c     A7 16 02 FB | 	rdlong	arg03, fp
22f80     55 16 06 F1 | 	add	arg03, #85
22f84     0B 5D 48 FC | 	wrbyte	#46, arg03
22f88     38 4E 85 F1 | 	sub	fp, #56
22f8c     A7 16 02 FB | 	rdlong	arg03, fp
22f90     40 4E 05 F1 | 	add	fp, #64
22f94     A7 16 62 FC | 	wrlong	arg03, fp
22f98     08 4E 85 F1 | 	sub	fp, #8
22f9c     A7 14 02 FB | 	rdlong	arg02, fp
22fa0     0A 13 02 F6 | 	mov	arg01, arg02
22fa4     54 14 06 F1 | 	add	arg02, #84
22fa8     4C 4E 85 F1 | 	sub	fp, #76
22fac     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
22fb0     4C 4E 05 F1 | 	add	fp, #76
22fb4     A7 16 02 FB | 	rdlong	arg03, fp
22fb8     03 16 06 F1 | 	add	arg03, #3
22fbc     0B 03 48 FC | 	wrbyte	#1, arg03
22fc0     40 4E 85 F1 | 	sub	fp, #64
22fc4     A7 12 02 F6 | 	mov	arg01, fp
22fc8     0C 4E 85 F1 | 	sub	fp, #12
22fcc     44 BA BF FD | 	call	#_fatfs_cc_dir_register
22fd0     08 4E 05 F1 | 	add	fp, #8
22fd4     A7 FA 61 FC | 	wrlong	result1, fp
22fd8     08 4E 85 F1 | 	sub	fp, #8
22fdc                 | LR__3720
22fdc                 | LR__3721
22fdc     08 4E 05 F1 | 	add	fp, #8
22fe0     A7 FA 09 FB | 	rdlong	result1, fp wz
22fe4     08 4E 85 F1 | 	sub	fp, #8
22fe8     88 00 90 5D |  if_ne	jmp	#LR__3722
22fec     28 4E 05 F1 | 	add	fp, #40
22ff0     A7 12 02 FB | 	rdlong	arg01, fp
22ff4     16 12 06 F1 | 	add	arg01, #22
22ff8     30 4E 05 F1 | 	add	fp, #48
22ffc     A7 14 02 FB | 	rdlong	arg02, fp
23000     09 15 62 FC | 	wrlong	arg02, arg01
23004     0C 4E 85 F1 | 	sub	fp, #12
23008     A7 12 02 FB | 	rdlong	arg01, fp
2300c     24 4E 85 F1 | 	sub	fp, #36
23010     A7 14 02 FB | 	rdlong	arg02, fp
23014     28 4E 05 F1 | 	add	fp, #40
23018     A7 16 02 FB | 	rdlong	arg03, fp
2301c     50 4E 85 F1 | 	sub	fp, #80
23020     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
23024     28 4E 05 F1 | 	add	fp, #40
23028     A7 FA 01 FB | 	rdlong	result1, fp
2302c     0B FA 05 F1 | 	add	result1, #11
23030     FD 20 48 FC | 	wrbyte	#16, result1
23034     24 4E 05 F1 | 	add	fp, #36
23038     A7 FA 01 FB | 	rdlong	result1, fp
2303c     03 FA 05 F1 | 	add	result1, #3
23040     FD 02 48 FC | 	wrbyte	#1, result1
23044     44 4E 85 F1 | 	sub	fp, #68
23048     A7 FA 09 FB | 	rdlong	result1, fp wz
2304c     08 4E 85 F1 | 	sub	fp, #8
23050     3C 00 90 5D |  if_ne	jmp	#LR__3723
23054     4C 4E 05 F1 | 	add	fp, #76
23058     A7 12 02 FB | 	rdlong	arg01, fp
2305c     4C 4E 85 F1 | 	sub	fp, #76
23060     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
23064     08 4E 05 F1 | 	add	fp, #8
23068     A7 FA 61 FC | 	wrlong	result1, fp
2306c     08 4E 85 F1 | 	sub	fp, #8
23070     1C 00 90 FD | 	jmp	#LR__3723
23074                 | LR__3722
23074     3C 4E 05 F1 | 	add	fp, #60
23078     A7 12 02 F6 | 	mov	arg01, fp
2307c     14 4E 05 F1 | 	add	fp, #20
23080     A7 14 02 FB | 	rdlong	arg02, fp
23084     50 4E 85 F1 | 	sub	fp, #80
23088     00 16 06 F6 | 	mov	arg03, #0
2308c     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
23090                 | LR__3723
23090                 | LR__3724
23090                 | LR__3725
23090                 | ' 				remove_chain(&sobj, dcl, 0);
23090                 | ' 			}
23090                 | ' 		}
23090                 | ' 		;
23090                 | ' 	}
23090                 | ' 
23090                 | ' 	return res ;
23090     08 4E 05 F1 | 	add	fp, #8
23094     A7 FA 01 FB | 	rdlong	result1, fp
23098     08 4E 85 F1 | 	sub	fp, #8
2309c     A7 F0 03 F6 | 	mov	ptra, fp
230a0     B2 00 A0 FD | 	call	#popregs_
230a4                 | _fatfs_cc_f_mkdir_ret
230a4     2D 00 64 FD | 	ret
230a8                 | 
230a8                 | _fatfs_cc_f_rename
230a8     01 4A 05 F6 | 	mov	COUNT_, #1
230ac     A8 00 A0 FD | 	call	#pushregs_
230b0     9C F0 07 F1 | 	add	ptra, #156
230b4     04 4E 05 F1 | 	add	fp, #4
230b8     A7 12 62 FC | 	wrlong	arg01, fp
230bc     04 4E 05 F1 | 	add	fp, #4
230c0     A7 14 62 FC | 	wrlong	arg02, fp
230c4     A7 12 02 F6 | 	mov	arg01, fp
230c8     08 4E 85 F1 | 	sub	fp, #8
230cc     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
230d0     04 4E 05 F1 | 	add	fp, #4
230d4     A7 12 02 F6 | 	mov	arg01, fp
230d8     6C 4E 05 F1 | 	add	fp, #108
230dc     A7 14 02 F6 | 	mov	arg02, fp
230e0     70 4E 85 F1 | 	sub	fp, #112
230e4     02 16 06 F6 | 	mov	arg03, #2
230e8     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
230ec     0C 4E 05 F1 | 	add	fp, #12
230f0     A7 FA 61 FC | 	wrlong	result1, fp
230f4     0C 4E 85 F1 | 	sub	fp, #12
230f8     00 FA 0D F2 | 	cmp	result1, #0 wz
230fc     44 03 90 5D |  if_ne	jmp	#LR__3743
23100     70 4E 05 F1 | 	add	fp, #112
23104     A7 16 02 FB | 	rdlong	arg03, fp
23108     60 4E 85 F1 | 	sub	fp, #96
2310c     A7 16 62 FC | 	wrlong	arg03, fp
23110     A7 12 02 F6 | 	mov	arg01, fp
23114     0C 4E 85 F1 | 	sub	fp, #12
23118     A7 14 02 FB | 	rdlong	arg02, fp
2311c     04 4E 85 F1 | 	sub	fp, #4
23120     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
23124     0C 4E 05 F1 | 	add	fp, #12
23128     A7 FA 61 FC | 	wrlong	result1, fp
2312c     00 FA 4D F2 | 	cmps	result1, #0 wz
23130     0C 4E 85 F1 | 	sub	fp, #12
23134     1C 00 90 5D |  if_ne	jmp	#LR__3730
23138     3B 4E 05 F1 | 	add	fp, #59
2313c     A7 FA C1 FA | 	rdbyte	result1, fp
23140     3B 4E 85 F1 | 	sub	fp, #59
23144     A0 FA CD F7 | 	test	result1, #160 wz
23148     0C 4E 05 51 |  if_ne	add	fp, #12
2314c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
23150     0C 4E 85 51 |  if_ne	sub	fp, #12
23154                 | LR__3730
23154     0C 4E 05 F1 | 	add	fp, #12
23158     A7 1E 0A FB | 	rdlong	local01, fp wz
2315c     0C 4E 85 F1 | 	sub	fp, #12
23160     E0 02 90 5D |  if_ne	jmp	#LR__3742
23164     74 4E 05 F1 | 	add	fp, #116
23168     A7 12 02 F6 | 	mov	arg01, fp
2316c     48 4E 85 F1 | 	sub	fp, #72
23170     A7 14 02 FB | 	rdlong	arg02, fp
23174     2C 4E 85 F1 | 	sub	fp, #44
23178     20 16 06 F6 | 	mov	arg03, #32
2317c     98 30 BF FD | 	call	#__system____builtin_memmove
23180     40 4E 05 F1 | 	add	fp, #64
23184     A7 12 02 F6 | 	mov	arg01, fp
23188     30 4E 85 F1 | 	sub	fp, #48
2318c     A7 14 02 F6 | 	mov	arg02, fp
23190     10 4E 85 F1 | 	sub	fp, #16
23194     30 16 06 F6 | 	mov	arg03, #48
23198     7C 30 BF FD | 	call	#__system____builtin_memmove
2319c     40 4E 05 F1 | 	add	fp, #64
231a0     A7 12 02 F6 | 	mov	arg01, fp
231a4     38 4E 85 F1 | 	sub	fp, #56
231a8     A7 14 02 FB | 	rdlong	arg02, fp
231ac     08 4E 85 F1 | 	sub	fp, #8
231b0     34 CA BF FD | 	call	#_fatfs_cc_follow_path
231b4     0C 4E 05 F1 | 	add	fp, #12
231b8     A7 FA 61 FC | 	wrlong	result1, fp
231bc     0C 4E 85 F1 | 	sub	fp, #12
231c0     00 FA 0D F2 | 	cmp	result1, #0 wz
231c4     4C 00 90 5D |  if_ne	jmp	#LR__3733
231c8     48 4E 05 F1 | 	add	fp, #72
231cc     A7 FA 01 FB | 	rdlong	result1, fp
231d0     30 4E 85 F1 | 	sub	fp, #48
231d4     A7 16 02 FB | 	rdlong	arg03, fp
231d8     18 4E 85 F1 | 	sub	fp, #24
231dc     0B FB 09 F2 | 	cmp	result1, arg03 wz
231e0     20 00 90 5D |  if_ne	jmp	#LR__3731
231e4     50 4E 05 F1 | 	add	fp, #80
231e8     A7 FA 01 FB | 	rdlong	result1, fp
231ec     30 4E 85 F1 | 	sub	fp, #48
231f0     A7 16 02 FB | 	rdlong	arg03, fp
231f4     20 4E 85 F1 | 	sub	fp, #32
231f8     0B FB 09 F2 | 	cmp	result1, arg03 wz
231fc     04 1E 06 A6 |  if_e	mov	local01, #4
23200     04 00 90 AD |  if_e	jmp	#LR__3732
23204                 | LR__3731
23204     08 1E 06 F6 | 	mov	local01, #8
23208                 | LR__3732
23208     0C 4E 05 F1 | 	add	fp, #12
2320c     A7 1E 62 FC | 	wrlong	local01, fp
23210     0C 4E 85 F1 | 	sub	fp, #12
23214                 | LR__3733
23214     0C 4E 05 F1 | 	add	fp, #12
23218     A7 1E 02 FB | 	rdlong	local01, fp
2321c     0C 4E 85 F1 | 	sub	fp, #12
23220     04 1E 0E F2 | 	cmp	local01, #4 wz
23224     CC 01 90 5D |  if_ne	jmp	#LR__3739
23228     40 4E 05 F1 | 	add	fp, #64
2322c     A7 12 02 F6 | 	mov	arg01, fp
23230     40 4E 85 F1 | 	sub	fp, #64
23234     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
23238     0C 4E 05 F1 | 	add	fp, #12
2323c     A7 FA 61 FC | 	wrlong	result1, fp
23240     0C 4E 85 F1 | 	sub	fp, #12
23244     00 FA 0D F2 | 	cmp	result1, #0 wz
23248     A8 01 90 5D |  if_ne	jmp	#LR__3738
2324c     5C 4E 05 F1 | 	add	fp, #92
23250     A7 12 02 FB | 	rdlong	arg01, fp
23254     38 4E 05 F1 | 	add	fp, #56
23258     A7 12 62 FC | 	wrlong	arg01, fp
2325c     0D 12 06 F1 | 	add	arg01, #13
23260     20 4E 85 F1 | 	sub	fp, #32
23264     A7 14 02 F6 | 	mov	arg02, fp
23268     74 4E 85 F1 | 	sub	fp, #116
2326c     0D 14 06 F1 | 	add	arg02, #13
23270     13 16 06 F6 | 	mov	arg03, #19
23274     A0 2F BF FD | 	call	#__system____builtin_memmove
23278     94 4E 05 F1 | 	add	fp, #148
2327c     A7 1E 02 FB | 	rdlong	local01, fp
23280     15 4E 85 F1 | 	sub	fp, #21
23284     A7 FA C1 FA | 	rdbyte	result1, fp
23288     0B 1E 06 F1 | 	add	local01, #11
2328c     0F FB 41 FC | 	wrbyte	result1, local01
23290     15 4E 05 F1 | 	add	fp, #21
23294     A7 1E 02 FB | 	rdlong	local01, fp
23298     94 4E 85 F1 | 	sub	fp, #148
2329c     0B 1E 06 F1 | 	add	local01, #11
232a0     0F 1F C2 FA | 	rdbyte	local01, local01
232a4     10 1E CE F7 | 	test	local01, #16 wz
232a8     24 00 90 5D |  if_ne	jmp	#LR__3734
232ac     94 4E 05 F1 | 	add	fp, #148
232b0     A7 FA 01 FB | 	rdlong	result1, fp
232b4     FD 1E 02 F6 | 	mov	local01, result1
232b8     94 4E 85 F1 | 	sub	fp, #148
232bc     0B FA 05 F1 | 	add	result1, #11
232c0     FD FA C1 FA | 	rdbyte	result1, result1
232c4     20 FA 45 F5 | 	or	result1, #32
232c8     0B 1E 06 F1 | 	add	local01, #11
232cc     0F FB 41 FC | 	wrbyte	result1, local01
232d0                 | LR__3734
232d0     70 4E 05 F1 | 	add	fp, #112
232d4     A7 1E 02 FB | 	rdlong	local01, fp
232d8     03 1E 06 F1 | 	add	local01, #3
232dc     0F 03 48 FC | 	wrbyte	#1, local01
232e0     24 4E 05 F1 | 	add	fp, #36
232e4     A7 1E 02 FB | 	rdlong	local01, fp
232e8     94 4E 85 F1 | 	sub	fp, #148
232ec     0B 1E 06 F1 | 	add	local01, #11
232f0     0F 1F C2 FA | 	rdbyte	local01, local01
232f4     10 1E CE F7 | 	test	local01, #16 wz
232f8     F8 00 90 AD |  if_e	jmp	#LR__3737
232fc     18 4E 05 F1 | 	add	fp, #24
23300     A7 16 02 FB | 	rdlong	arg03, fp
23304     30 4E 05 F1 | 	add	fp, #48
23308     A7 1E 02 FB | 	rdlong	local01, fp
2330c     48 4E 85 F1 | 	sub	fp, #72
23310     0F 17 0A F2 | 	cmp	arg03, local01 wz
23314     DC 00 90 AD |  if_e	jmp	#LR__3737
23318     70 4E 05 F1 | 	add	fp, #112
2331c     A7 12 02 FB | 	rdlong	arg01, fp
23320     09 1F 02 F6 | 	mov	local01, arg01
23324     24 4E 05 F1 | 	add	fp, #36
23328     A7 14 02 FB | 	rdlong	arg02, fp
2332c     94 4E 85 F1 | 	sub	fp, #148
23330     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
23334     FD 14 02 F6 | 	mov	arg02, result1
23338     0F 13 02 F6 | 	mov	arg01, local01
2333c     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
23340     98 4E 05 F1 | 	add	fp, #152
23344     A7 FA 61 FC | 	wrlong	result1, fp
23348     00 FA 4D F2 | 	cmps	result1, #0 wz
2334c     98 4E 85 F1 | 	sub	fp, #152
23350     0C 4E 05 A1 |  if_e	add	fp, #12
23354     A7 04 68 AC |  if_e	wrlong	#2, fp
23358     0C 4E 85 A1 |  if_e	sub	fp, #12
2335c     94 00 90 AD |  if_e	jmp	#LR__3736
23360     70 4E 05 F1 | 	add	fp, #112
23364     A7 12 02 FB | 	rdlong	arg01, fp
23368     28 4E 05 F1 | 	add	fp, #40
2336c     A7 14 02 FB | 	rdlong	arg02, fp
23370     98 4E 85 F1 | 	sub	fp, #152
23374     4C A0 BF FD | 	call	#_fatfs_cc_move_window
23378     0C 4E 05 F1 | 	add	fp, #12
2337c     A7 FA 61 FC | 	wrlong	result1, fp
23380     64 4E 05 F1 | 	add	fp, #100
23384     A7 1E 02 FB | 	rdlong	local01, fp
23388     54 1E 06 F1 | 	add	local01, #84
2338c     24 4E 05 F1 | 	add	fp, #36
23390     A7 1E 62 FC | 	wrlong	local01, fp
23394     88 4E 85 F1 | 	sub	fp, #136
23398     A7 1E 0A FB | 	rdlong	local01, fp wz
2339c     0C 4E 85 F1 | 	sub	fp, #12
233a0     50 00 90 5D |  if_ne	jmp	#LR__3735
233a4     94 4E 05 F1 | 	add	fp, #148
233a8     A7 1E 02 FB | 	rdlong	local01, fp
233ac     94 4E 85 F1 | 	sub	fp, #148
233b0     01 1E 06 F1 | 	add	local01, #1
233b4     0F 1F C2 FA | 	rdbyte	local01, local01
233b8     2E 1E 0E F2 | 	cmp	local01, #46 wz
233bc     34 00 90 5D |  if_ne	jmp	#LR__3735
233c0     70 4E 05 F1 | 	add	fp, #112
233c4     A7 12 02 FB | 	rdlong	arg01, fp
233c8     24 4E 05 F1 | 	add	fp, #36
233cc     A7 14 02 FB | 	rdlong	arg02, fp
233d0     4C 4E 85 F1 | 	sub	fp, #76
233d4     A7 16 02 FB | 	rdlong	arg03, fp
233d8     48 4E 85 F1 | 	sub	fp, #72
233dc     50 AD BF FD | 	call	#_fatfs_cc_st_clust
233e0     70 4E 05 F1 | 	add	fp, #112
233e4     A7 1E 02 FB | 	rdlong	local01, fp
233e8     70 4E 85 F1 | 	sub	fp, #112
233ec     03 1E 06 F1 | 	add	local01, #3
233f0     0F 03 48 FC | 	wrbyte	#1, local01
233f4                 | LR__3735
233f4                 | LR__3736
233f4                 | LR__3737
233f4                 | LR__3738
233f4                 | LR__3739
233f4     0C 4E 05 F1 | 	add	fp, #12
233f8     A7 1E 0A FB | 	rdlong	local01, fp wz
233fc     0C 4E 85 F1 | 	sub	fp, #12
23400     40 00 90 5D |  if_ne	jmp	#LR__3741
23404     10 4E 05 F1 | 	add	fp, #16
23408     A7 12 02 F6 | 	mov	arg01, fp
2340c     10 4E 85 F1 | 	sub	fp, #16
23410     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
23414     0C 4E 05 F1 | 	add	fp, #12
23418     A7 FA 61 FC | 	wrlong	result1, fp
2341c     0C 4E 85 F1 | 	sub	fp, #12
23420     00 FA 0D F2 | 	cmp	result1, #0 wz
23424     1C 00 90 5D |  if_ne	jmp	#LR__3740
23428     70 4E 05 F1 | 	add	fp, #112
2342c     A7 12 02 FB | 	rdlong	arg01, fp
23430     70 4E 85 F1 | 	sub	fp, #112
23434     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
23438     0C 4E 05 F1 | 	add	fp, #12
2343c     A7 FA 61 FC | 	wrlong	result1, fp
23440     0C 4E 85 F1 | 	sub	fp, #12
23444                 | LR__3740
23444                 | LR__3741
23444                 | LR__3742
23444                 | LR__3743
23444                 | ' 					res = sync_fs(fs);
23444                 | ' 				}
23444                 | ' 			}
23444                 | ' 
23444                 | ' 		}
23444                 | ' 		;
23444                 | ' 	}
23444                 | ' 
23444                 | ' 	return res ;
23444     0C 4E 05 F1 | 	add	fp, #12
23448     A7 FA 01 FB | 	rdlong	result1, fp
2344c     0C 4E 85 F1 | 	sub	fp, #12
23450     A7 F0 03 F6 | 	mov	ptra, fp
23454     B2 00 A0 FD | 	call	#popregs_
23458                 | _fatfs_cc_f_rename_ret
23458     2D 00 64 FD | 	ret
2345c                 | 
2345c                 | _fatfs_cc_time
2345c     00 4A 05 F6 | 	mov	COUNT_, #0
23460     A8 00 A0 FD | 	call	#pushregs_
23464     14 F0 07 F1 | 	add	ptra, #20
23468     04 4E 05 F1 | 	add	fp, #4
2346c     A7 12 62 FC | 	wrlong	arg01, fp
23470     04 4E 05 F1 | 	add	fp, #4
23474     A7 12 02 F6 | 	mov	arg01, fp
23478     08 4E 85 F1 | 	sub	fp, #8
2347c     00 14 06 F6 | 	mov	arg02, #0
23480     0C 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
23484     08 4E 05 F1 | 	add	fp, #8
23488     A7 FA 01 FB | 	rdlong	result1, fp
2348c     08 4E 05 F1 | 	add	fp, #8
23490     A7 FA 61 FC | 	wrlong	result1, fp
23494     0C 4E 85 F1 | 	sub	fp, #12
23498     A7 FA 09 FB | 	rdlong	result1, fp wz
2349c     04 4E 85 F1 | 	sub	fp, #4
234a0     18 00 90 AD |  if_e	jmp	#LR__3750
234a4     04 4E 05 F1 | 	add	fp, #4
234a8     A7 FA 01 FB | 	rdlong	result1, fp
234ac     0C 4E 05 F1 | 	add	fp, #12
234b0     A7 14 02 FB | 	rdlong	arg02, fp
234b4     10 4E 85 F1 | 	sub	fp, #16
234b8     FD 14 62 FC | 	wrlong	arg02, result1
234bc                 | LR__3750
234bc                 | '         *tp = now;
234bc                 | '     return now;
234bc     10 4E 05 F1 | 	add	fp, #16
234c0     A7 FA 01 FB | 	rdlong	result1, fp
234c4     10 4E 85 F1 | 	sub	fp, #16
234c8     A7 F0 03 F6 | 	mov	ptra, fp
234cc     B2 00 A0 FD | 	call	#popregs_
234d0                 | _fatfs_cc_time_ret
234d0     2D 00 64 FD | 	ret
234d4                 | 
234d4                 | _fatfs_cc_mktime
234d4     06 4A 05 F6 | 	mov	COUNT_, #6
234d8     A8 00 A0 FD | 	call	#pushregs_
234dc     09 1F 02 F6 | 	mov	local01, arg01
234e0     14 1E 06 F1 | 	add	local01, #20
234e4     0F 13 02 FB | 	rdlong	arg01, local01
234e8     14 1E 86 F1 | 	sub	local01, #20
234ec     46 12 56 F2 | 	cmps	arg01, #70 wc
234f0                 | '                 return (time_t) -1;
234f0     01 FA 65 C6 |  if_b	neg	result1, #1
234f4     7C 01 90 CD |  if_b	jmp	#LR__3764
234f8     03 00 00 FF 
234fc     6C 21 06 F6 | 	mov	local02, ##1900
23500     14 1E 06 F1 | 	add	local01, #20
23504     0F FB 01 FB | 	rdlong	result1, local01
23508     FD 20 02 F1 | 	add	local02, result1
2350c     08 1E 86 F1 | 	sub	local01, #8
23510     0F 23 02 FB | 	rdlong	local03, local01
23514     01 22 86 F1 | 	sub	local03, #1
23518     04 1E 06 F1 | 	add	local01, #4
2351c     0F 13 02 FB | 	rdlong	arg01, local01
23520     10 1E 86 F1 | 	sub	local01, #16
23524     02 12 66 F0 | 	shl	arg01, #2
23528     02 00 00 FF 
2352c     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
23530     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
23534     09 FB 01 FB | 	rdlong	result1, arg01
23538     FD 22 02 F1 | 	add	local03, result1
2353c     10 13 02 F6 | 	mov	arg01, local02
23540     02 00 00 FF 
23544     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
23548     EC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2354c     00 FA 0D F2 | 	cmp	result1, #0 wz
23550     1C 00 90 AD |  if_e	jmp	#LR__3760
23554     00 24 06 F6 | 	mov	local04, #0
23558     10 1E 06 F1 | 	add	local01, #16
2355c     0F FB 01 FB | 	rdlong	result1, local01
23560     10 1E 86 F1 | 	sub	local01, #16
23564     02 FA 55 F2 | 	cmps	result1, #2 wc
23568     01 24 06 36 |  if_ae	mov	local04, #1
2356c     04 00 90 FD | 	jmp	#LR__3761
23570                 | LR__3760
23570     00 24 06 F6 | 	mov	local04, #0
23574                 | LR__3761
23574     04 1E 06 F1 | 	add	local01, #4
23578     0F FB 01 FB | 	rdlong	result1, local01
2357c     04 1E 86 F1 | 	sub	local01, #4
23580     0F 27 02 FB | 	rdlong	local05, local01
23584     08 1E 06 F1 | 	add	local01, #8
23588     0F 13 02 FB | 	rdlong	arg01, local01
2358c     07 00 00 FF 
23590     10 12 06 FD | 	qmul	arg01, ##3600
23594     12 23 02 F1 | 	add	local03, local04
23598     FD 24 02 F6 | 	mov	local04, result1
2359c     04 24 66 F0 | 	shl	local04, #4
235a0     FD 24 82 F1 | 	sub	local04, result1
235a4     02 24 66 F0 | 	shl	local04, #2
235a8     12 27 02 F1 | 	add	local05, local04
235ac     08 1E 86 F1 | 	sub	local01, #8
235b0     18 24 62 FD | 	getqx	local04
235b4     A8 00 00 FF 
235b8     80 23 06 FD | 	qmul	local03, ##86400
235bc     12 27 02 F1 | 	add	local05, local04
235c0     10 23 02 F6 | 	mov	local03, local02
235c4     03 00 00 FF 
235c8     B2 23 86 F1 | 	sub	local03, ##1970
235cc     18 24 62 FD | 	getqx	local04
235d0     99 F0 00 FF 
235d4     80 23 06 FD | 	qmul	local03, ##31536000
235d8     12 27 02 F1 | 	add	local05, local04
235dc     10 23 02 F6 | 	mov	local03, local02
235e0     03 00 00 FF 
235e4     B1 23 86 F1 | 	sub	local03, ##1969
235e8     11 29 52 F6 | 	abs	local06, local03 wc
235ec     02 28 46 F0 | 	shr	local06, #2
235f0     14 29 82 F6 | 	negc	local06, local06
235f4     03 00 00 FF 
235f8     D1 21 56 F2 | 	cmps	local02, ##2001 wc
235fc     18 24 62 FD | 	getqx	local04
23600     12 27 02 F1 | 	add	local05, local04
23604     18 00 90 CD |  if_b	jmp	#LR__3762
23608     03 00 00 FF 
2360c     D0 21 86 F1 | 	sub	local02, ##2000
23610     10 25 52 F6 | 	abs	local04, local02 wc
23614     64 24 16 FD | 	qdiv	local04, #100
23618     18 24 62 FD | 	getqx	local04
2361c     12 29 A2 F3 | 	sumnc	local06, local04
23620                 | LR__3762
23620     A8 00 00 FF 
23624     80 29 06 FD | 	qmul	local06, ##86400
23628     18 28 62 FD | 	getqx	local06
2362c     14 27 02 F1 | 	add	local05, local06
23630     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
23634     02 00 00 FF 
23638     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2363c     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
23640     14 27 02 F1 | 	add	local05, local06
23644     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
23648     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2364c     02 00 00 FF 
23650     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
23654     01 22 0E F2 | 	cmp	local03, #1 wz
23658     14 00 90 5D |  if_ne	jmp	#LR__3763
2365c     0F 13 02 F6 | 	mov	arg01, local01
23660     D8 19 B0 FD | 	call	#_fatfs_cc___indst
23664     00 FA 0D F2 | 	cmp	result1, #0 wz
23668     07 00 00 5F 
2366c     10 26 86 51 |  if_ne	sub	local05, ##3600
23670                 | LR__3763
23670                 | '                 s -=  (3600L) ;
23670                 | ' 
23670                 | '         return s;
23670     13 FB 01 F6 | 	mov	result1, local05
23674                 | LR__3764
23674     A7 F0 03 F6 | 	mov	ptra, fp
23678     B2 00 A0 FD | 	call	#popregs_
2367c                 | _fatfs_cc_mktime_ret
2367c     2D 00 64 FD | 	ret
23680                 | 
23680                 | _fatfs_cc__gmtime_r
23680     03 4A 05 F6 | 	mov	COUNT_, #3
23684     A8 00 A0 FD | 	call	#pushregs_
23688     09 1F 02 FB | 	rdlong	local01, arg01
2368c     A8 00 00 FF 
23690     80 1F 16 FD | 	qdiv	local01, ##86400
23694     18 FA 61 FD | 	getqx	result1
23698     04 FA 05 F1 | 	add	result1, #4
2369c     07 FA 15 FD | 	qdiv	result1, #7
236a0     18 14 06 F1 | 	add	arg02, #24
236a4     D1 7F 27 FF 
236a8     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
236ac     D1 7F 27 3F 
236b0     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
236b4     03 00 00 3F 
236b8     DC 21 06 36 |  if_ae	mov	local02, ##2012
236bc     03 00 00 CF 
236c0     B2 21 06 C6 |  if_b	mov	local02, ##1970
236c4                 | ' 	  year = 1970;
236c4                 | ' 	}
236c4                 | ' 
236c4                 | ' 	for(;;) {
236c4     19 FA 61 FD | 	getqy	result1
236c8     0A FB 61 FC | 	wrlong	result1, arg02
236cc     18 14 86 F1 | 	sub	arg02, #24
236d0                 | LR__3770
236d0     10 13 02 F6 | 	mov	arg01, local02
236d4     60 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
236d8     00 FA 0D F2 | 	cmp	result1, #0 wz
236dc     42 F1 00 5F 
236e0     00 23 06 56 |  if_ne	mov	local03, ##31622400
236e4     99 F0 00 AF 
236e8     80 23 06 A6 |  if_e	mov	local03, ##31536000
236ec     11 1F 12 F2 | 	cmp	local01, local03 wc
236f0                 | ' 	    break;
236f0     01 20 06 31 |  if_ae	add	local02, #1
236f4     11 1F 82 31 |  if_ae	sub	local01, local03
236f8     D4 FF 9F 3D |  if_ae	jmp	#LR__3770
236fc     A8 00 00 FF 
23700     80 1F 16 FD | 	qdiv	local01, ##86400
23704     10 23 02 F6 | 	mov	local03, local02
23708     03 00 00 FF 
2370c     6C 23 86 F1 | 	sub	local03, ##1900
23710     14 14 06 F1 | 	add	arg02, #20
23714     0A 23 62 FC | 	wrlong	local03, arg02
23718     08 14 06 F1 | 	add	arg02, #8
2371c     10 13 02 F6 | 	mov	arg01, local02
23720     18 20 62 FD | 	getqx	local02
23724     0A 21 62 FC | 	wrlong	local02, arg02
23728     1C 14 86 F1 | 	sub	arg02, #28
2372c     08 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
23730     00 FA 0D F2 | 	cmp	result1, #0 wz
23734     1D 22 06 56 |  if_ne	mov	local03, #29
23738     1C 22 06 A6 |  if_e	mov	local03, #28
2373c     02 00 00 FF 
23740     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
23744     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
23748     02 00 00 FF 
2374c     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
23750                 | ' 
23750                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
23750                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
23750     00 12 06 F6 | 	mov	arg01, #0
23754     97 2A 48 FB | 	callpa	#(@LR__3772-@LR__3771)>>2,fcache_load_ptr_
23758                 | LR__3771
23758     09 23 02 F6 | 	mov	local03, arg01
2375c     02 22 66 F0 | 	shl	local03, #2
23760     02 00 00 FF 
23764     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
23768     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2376c     11 23 02 FB | 	rdlong	local03, local03
23770     11 21 52 F2 | 	cmps	local02, local03 wc
23774     02 00 00 FF 
23778     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2377c     2C 00 90 CD |  if_b	jmp	#LR__3773
23780     09 23 02 F6 | 	mov	local03, arg01
23784     02 22 66 F0 | 	shl	local03, #2
23788     02 00 00 FF 
2378c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
23790     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
23794     11 23 02 FB | 	rdlong	local03, local03
23798     11 21 82 F1 | 	sub	local02, local03
2379c     01 12 06 F1 | 	add	arg01, #1
237a0     02 00 00 FF 
237a4     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
237a8     AC FF 9F FD | 	jmp	#LR__3771
237ac                 | LR__3772
237ac                 | LR__3773
237ac     A8 00 00 FF 
237b0     80 1F 16 FD | 	qdiv	local01, ##86400
237b4     10 14 06 F1 | 	add	arg02, #16
237b8     0A 13 62 FC | 	wrlong	arg01, arg02
237bc     01 20 06 F1 | 	add	local02, #1
237c0     04 14 86 F1 | 	sub	arg02, #4
237c4     0A 21 62 FC | 	wrlong	local02, arg02
237c8     19 1E 62 FD | 	getqy	local01
237cc     07 00 00 FF 
237d0     10 1E 16 FD | 	qdiv	local01, ##3600
237d4     18 22 62 FD | 	getqx	local03
237d8     07 00 00 FF 
237dc     10 1E 16 FD | 	qdiv	local01, ##3600
237e0     04 14 86 F1 | 	sub	arg02, #4
237e4     0A 23 62 FC | 	wrlong	local03, arg02
237e8     19 1E 62 FD | 	getqy	local01
237ec     3C 1E 16 FD | 	qdiv	local01, #60
237f0     18 22 62 FD | 	getqx	local03
237f4     3C 1E 16 FD | 	qdiv	local01, #60
237f8     04 14 86 F1 | 	sub	arg02, #4
237fc     0A 23 62 FC | 	wrlong	local03, arg02
23800     04 14 86 F1 | 	sub	arg02, #4
23804                 | '         stm->tm_isdst = 0;
23804                 | ' 
23804                 | ' ;
23804                 | '         return stm;
23804     0A FB 01 F6 | 	mov	result1, arg02
23808     19 22 62 FD | 	getqy	local03
2380c     0A 23 62 FC | 	wrlong	local03, arg02
23810     20 14 06 F1 | 	add	arg02, #32
23814     0A 01 68 FC | 	wrlong	#0, arg02
23818     A7 F0 03 F6 | 	mov	ptra, fp
2381c     B2 00 A0 FD | 	call	#popregs_
23820                 | _fatfs_cc__gmtime_r_ret
23820     2D 00 64 FD | 	ret
23824                 | 
23824                 | _fatfs_cc__tzset
23824     29 01 00 FF 
23828     65 13 06 F6 | 	mov	arg01, ##@LR__4085
2382c     34 00 B0 FD | 	call	#_fatfs_cc_getenv
23830     FD 12 02 F6 | 	mov	arg01, result1
23834     02 00 00 FF 
23838     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2383c     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
23840     02 00 00 FF 
23844     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
23848     3C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2384c     02 00 00 FF 
23850     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
23854     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
23858     02 00 00 FF 
2385c     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
23860                 | _fatfs_cc__tzset_ret
23860     2D 00 64 FD | 	ret
23864                 | 
23864                 | _fatfs_cc_getenv
23864     06 4A 05 F6 | 	mov	COUNT_, #6
23868     A8 00 A0 FD | 	call	#pushregs_
2386c     09 1F 02 F6 | 	mov	local01, arg01
23870     09 21 02 F6 | 	mov	local02, arg01
23874     97 06 48 FB | 	callpa	#(@LR__3781-@LR__3780)>>2,fcache_load_ptr_
23878                 | LR__3780
23878     10 FB C9 FA | 	rdbyte	result1, local02 wz
2387c     01 20 06 51 |  if_ne	add	local02, #1
23880     F4 FF 9F 5D |  if_ne	jmp	#LR__3780
23884                 | LR__3781
23884     09 21 82 F1 | 	sub	local02, arg01
23888     10 FB 01 F6 | 	mov	result1, local02
2388c     02 00 00 FF 
23890     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
23894     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
23898     02 00 00 FF 
2389c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
238a0                 | '             return 0;
238a0     00 FA 05 A6 |  if_e	mov	result1, #0
238a4     5C 00 90 AD |  if_e	jmp	#LR__3784
238a8                 | ' 
238a8                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
238a8     02 00 00 FF 
238ac     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
238b0     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
238b4     02 00 00 FF 
238b8     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
238bc                 | LR__3782
238bc     11 25 0A FB | 	rdlong	local04, local03 wz
238c0     3C 00 90 AD |  if_e	jmp	#LR__3783
238c4     12 13 02 F6 | 	mov	arg01, local04
238c8     0F 15 02 F6 | 	mov	arg02, local01
238cc     10 17 02 F6 | 	mov	arg03, local02
238d0     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
238d4     00 FA 0D F2 | 	cmp	result1, #0 wz
238d8     10 27 02 A6 |  if_e	mov	local05, local02
238dc     12 27 02 A1 |  if_e	add	local05, local04
238e0     13 29 C2 AA |  if_e	rdbyte	local06, local05
238e4     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
238e8                 | ' 			return name+len+1;
238e8     10 25 02 A1 |  if_e	add	local04, local02
238ec     01 24 06 A1 |  if_e	add	local04, #1
238f0     12 FB 01 A6 |  if_e	mov	result1, local04
238f4     0C 00 90 AD |  if_e	jmp	#LR__3784
238f8     04 22 06 F1 | 	add	local03, #4
238fc     BC FF 9F FD | 	jmp	#LR__3782
23900                 | LR__3783
23900                 | ' 	}
23900                 | ' 	return 0;
23900     00 FA 05 F6 | 	mov	result1, #0
23904                 | LR__3784
23904     A7 F0 03 F6 | 	mov	ptra, fp
23908     B2 00 A0 FD | 	call	#popregs_
2390c                 | _fatfs_cc_getenv_ret
2390c     2D 00 64 FD | 	ret
23910                 | 
23910                 | _fatfs_cc__get_fattime
23910     00 4A 05 F6 | 	mov	COUNT_, #0
23914     A8 00 A0 FD | 	call	#pushregs_
23918     34 F0 07 F1 | 	add	ptra, #52
2391c     00 12 06 F6 | 	mov	arg01, #0
23920     38 FB BF FD | 	call	#_fatfs_cc_time
23924     04 4E 05 F1 | 	add	fp, #4
23928     A7 FA 61 FC | 	wrlong	result1, fp
2392c     A7 12 02 F6 | 	mov	arg01, fp
23930     0C 4E 05 F1 | 	add	fp, #12
23934     A7 14 02 F6 | 	mov	arg02, fp
23938     10 4E 85 F1 | 	sub	fp, #16
2393c     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
23940     24 4E 05 F1 | 	add	fp, #36
23944     A7 14 02 FB | 	rdlong	arg02, fp
23948     50 14 86 F1 | 	sub	arg02, #80
2394c     09 14 66 F0 | 	shl	arg02, #9
23950     04 4E 85 F1 | 	sub	fp, #4
23954     A7 FA 01 FB | 	rdlong	result1, fp
23958     01 FA 05 F1 | 	add	result1, #1
2395c     05 FA 65 F0 | 	shl	result1, #5
23960     FD 14 42 F5 | 	or	arg02, result1
23964     04 4E 85 F1 | 	sub	fp, #4
23968     A7 FA 01 FB | 	rdlong	result1, fp
2396c     FD 14 42 F5 | 	or	arg02, result1
23970     14 4E 85 F1 | 	sub	fp, #20
23974     A7 14 62 FC | 	wrlong	arg02, fp
23978     10 4E 05 F1 | 	add	fp, #16
2397c     A7 14 02 FB | 	rdlong	arg02, fp
23980     0B 14 66 F0 | 	shl	arg02, #11
23984     04 4E 85 F1 | 	sub	fp, #4
23988     A7 FA 01 FB | 	rdlong	result1, fp
2398c     05 FA 65 F0 | 	shl	result1, #5
23990     FD 14 42 F5 | 	or	arg02, result1
23994     04 4E 85 F1 | 	sub	fp, #4
23998     A7 FA 01 FB | 	rdlong	result1, fp
2399c     FD 14 42 F5 | 	or	arg02, result1
239a0     04 4E 85 F1 | 	sub	fp, #4
239a4     A7 14 62 FC | 	wrlong	arg02, fp
239a8                 | ' 
239a8                 | '     now = time(0);
239a8                 | '     _gmtime_r (&now, &date);
239a8                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
239a8                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
239a8                 | '     return (ffdate << 16) | fftime;
239a8     04 4E 85 F1 | 	sub	fp, #4
239ac     A7 FA 01 FB | 	rdlong	result1, fp
239b0     10 FA 65 F0 | 	shl	result1, #16
239b4     08 4E 85 F1 | 	sub	fp, #8
239b8     0A FB 41 F5 | 	or	result1, arg02
239bc     A7 F0 03 F6 | 	mov	ptra, fp
239c0     B2 00 A0 FD | 	call	#popregs_
239c4                 | _fatfs_cc__get_fattime_ret
239c4     2D 00 64 FD | 	ret
239c8                 | 
239c8                 | _fatfs_cc_unixtime_0791
239c8     00 4A 05 F6 | 	mov	COUNT_, #0
239cc     A8 00 A0 FD | 	call	#pushregs_
239d0     34 F0 07 F1 | 	add	ptra, #52
239d4     04 4E 05 F1 | 	add	fp, #4
239d8     A7 12 62 FC | 	wrlong	arg01, fp
239dc     04 4E 05 F1 | 	add	fp, #4
239e0     A7 14 62 FC | 	wrlong	arg02, fp
239e4     04 4E 85 F1 | 	sub	fp, #4
239e8     A7 14 02 FB | 	rdlong	arg02, fp
239ec     09 14 46 F0 | 	shr	arg02, #9
239f0     7F 14 06 F5 | 	and	arg02, #127
239f4     50 FA 05 F6 | 	mov	result1, #80
239f8     0A FB 01 F1 | 	add	result1, arg02
239fc     20 4E 05 F1 | 	add	fp, #32
23a00     A7 FA 61 FC | 	wrlong	result1, fp
23a04     20 4E 85 F1 | 	sub	fp, #32
23a08     A7 FA 01 FB | 	rdlong	result1, fp
23a0c     05 FA 45 F0 | 	shr	result1, #5
23a10     FD FA 41 F8 | 	getnib	result1, result1, #0
23a14     01 FA 85 F1 | 	sub	result1, #1
23a18     1C 4E 05 F1 | 	add	fp, #28
23a1c     A7 FA 61 FC | 	wrlong	result1, fp
23a20     1C 4E 85 F1 | 	sub	fp, #28
23a24     A7 FA 01 FB | 	rdlong	result1, fp
23a28     1F FA 05 F5 | 	and	result1, #31
23a2c     18 4E 05 F1 | 	add	fp, #24
23a30     A7 FA 61 FC | 	wrlong	result1, fp
23a34     14 4E 85 F1 | 	sub	fp, #20
23a38     A7 FA 01 FB | 	rdlong	result1, fp
23a3c     0B FA 45 F0 | 	shr	result1, #11
23a40     1F FA 05 F5 | 	and	result1, #31
23a44     10 4E 05 F1 | 	add	fp, #16
23a48     A7 FA 61 FC | 	wrlong	result1, fp
23a4c     10 4E 85 F1 | 	sub	fp, #16
23a50     A7 FA 01 FB | 	rdlong	result1, fp
23a54     05 FA 45 F0 | 	shr	result1, #5
23a58     3F FA 05 F5 | 	and	result1, #63
23a5c     0C 4E 05 F1 | 	add	fp, #12
23a60     A7 FA 61 FC | 	wrlong	result1, fp
23a64     0C 4E 85 F1 | 	sub	fp, #12
23a68     A7 14 02 FB | 	rdlong	arg02, fp
23a6c     1F 14 06 F5 | 	and	arg02, #31
23a70     01 14 66 F0 | 	shl	arg02, #1
23a74     08 4E 05 F1 | 	add	fp, #8
23a78     A7 14 62 FC | 	wrlong	arg02, fp
23a7c     A7 12 02 F6 | 	mov	arg01, fp
23a80     10 4E 85 F1 | 	sub	fp, #16
23a84     4C FA BF FD | 	call	#_fatfs_cc_mktime
23a88     0C 4E 05 F1 | 	add	fp, #12
23a8c     A7 FA 61 FC | 	wrlong	result1, fp
23a90                 | ' 
23a90                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
23a90                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
23a90                 | '     date.tm_mday = (dosdate & 0x1f);
23a90                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
23a90                 | '     date.tm_min = (dostime >> 5) & 0x3f;
23a90                 | '     date.tm_sec = (dostime & 0x1f) << 1;
23a90                 | ' 
23a90                 | '     t = mktime(&date);
23a90                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
23a90                 | '     return t;
23a90     0C 4E 85 F1 | 	sub	fp, #12
23a94     A7 F0 03 F6 | 	mov	ptra, fp
23a98     B2 00 A0 FD | 	call	#popregs_
23a9c                 | _fatfs_cc_unixtime_0791_ret
23a9c     2D 00 64 FD | 	ret
23aa0                 | 
23aa0                 | _fatfs_cc__set_dos_error_0793
23aa0     09 01 02 F6 | 	mov	_var01, arg01
23aa4                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
23aa4                 | '     switch (derr) {
23aa4     14 00 26 F3 | 	fle	_var01, #20
23aa8     30 00 62 FD | 	jmprel	_var01
23aac                 | LR__3790
23aac     50 00 90 FD | 	jmp	#LR__3791
23ab0     84 00 90 FD | 	jmp	#LR__3805
23ab4     80 00 90 FD | 	jmp	#LR__3806
23ab8     7C 00 90 FD | 	jmp	#LR__3807
23abc     48 00 90 FD | 	jmp	#LR__3792
23ac0     44 00 90 FD | 	jmp	#LR__3793
23ac4     40 00 90 FD | 	jmp	#LR__3794
23ac8     44 00 90 FD | 	jmp	#LR__3795
23acc     48 00 90 FD | 	jmp	#LR__3797
23ad0     54 00 90 FD | 	jmp	#LR__3800
23ad4     38 00 90 FD | 	jmp	#LR__3796
23ad8     4C 00 90 FD | 	jmp	#LR__3801
23adc     48 00 90 FD | 	jmp	#LR__3802
23ae0     44 00 90 FD | 	jmp	#LR__3803
23ae4     50 00 90 FD | 	jmp	#LR__3808
23ae8     4C 00 90 FD | 	jmp	#LR__3808
23aec     48 00 90 FD | 	jmp	#LR__3808
23af0     2C 00 90 FD | 	jmp	#LR__3798
23af4     38 00 90 FD | 	jmp	#LR__3804
23af8     2C 00 90 FD | 	jmp	#LR__3799
23afc     38 00 90 FD | 	jmp	#LR__3808
23b00                 | LR__3791
23b00     00 02 06 F6 | 	mov	_var02, #0
23b04                 | '         r = 0;
23b04                 | '         break;
23b04     34 00 90 FD | 	jmp	#LR__3809
23b08                 | LR__3792
23b08                 | LR__3793
23b08                 | LR__3794
23b08     04 02 06 F6 | 	mov	_var02, #4
23b0c                 | '         r =  4 ;
23b0c                 | '         break;
23b0c     2C 00 90 FD | 	jmp	#LR__3809
23b10                 | LR__3795
23b10                 | LR__3796
23b10     06 02 06 F6 | 	mov	_var02, #6
23b14                 | '         r =  6 ;
23b14                 | '         break;
23b14     24 00 90 FD | 	jmp	#LR__3809
23b18                 | LR__3797
23b18     09 02 06 F6 | 	mov	_var02, #9
23b1c                 | '         r =  9 ;
23b1c                 | '         break;
23b1c     1C 00 90 FD | 	jmp	#LR__3809
23b20                 | LR__3798
23b20     07 02 06 F6 | 	mov	_var02, #7
23b24                 | '         r =  7 ;
23b24                 | '         break;
23b24     14 00 90 FD | 	jmp	#LR__3809
23b28                 | LR__3799
23b28                 | LR__3800
23b28                 | LR__3801
23b28                 | LR__3802
23b28                 | LR__3803
23b28     0A 02 06 F6 | 	mov	_var02, #10
23b2c                 | '         r =  10 ;
23b2c                 | '         break;
23b2c     0C 00 90 FD | 	jmp	#LR__3809
23b30                 | LR__3804
23b30     0B 02 06 F6 | 	mov	_var02, #11
23b34                 | '         r =  11 ;
23b34                 | '         break;
23b34     04 00 90 FD | 	jmp	#LR__3809
23b38                 | LR__3805
23b38                 | LR__3806
23b38                 | LR__3807
23b38                 | LR__3808
23b38     0C 02 06 F6 | 	mov	_var02, #12
23b3c                 | '         r =  12 ;
23b3c                 | '         break;
23b3c                 | LR__3809
23b3c                 | '     }
23b3c                 | '     return _seterror(r);
23b3c     00 02 4E F2 | 	cmps	_var02, #0 wz
23b40     20 E8 05 F1 | 	add	ptr___system__dat__, #32
23b44     F4 02 62 FC | 	wrlong	_var02, ptr___system__dat__
23b48     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
23b4c     01 FA 65 56 |  if_ne	neg	result1, #1
23b50     00 FA 05 A6 |  if_e	mov	result1, #0
23b54                 | _fatfs_cc__set_dos_error_0793_ret
23b54     2D 00 64 FD | 	ret
23b58                 | 
23b58                 | _fatfs_cc_v_creat
23b58     04 4A 05 F6 | 	mov	COUNT_, #4
23b5c     A8 00 A0 FD | 	call	#pushregs_
23b60     09 1F 02 F6 | 	mov	local01, arg01
23b64     0A 21 02 F6 | 	mov	local02, arg02
23b68     03 00 00 FF 
23b6c     3C 12 06 F6 | 	mov	arg01, ##1596
23b70                 | '     return _gc_alloc(size);
23b70     10 14 06 F6 | 	mov	arg02, #16
23b74     14 61 BF FD | 	call	#__system___gc_doalloc
23b78     FD 22 0A F6 | 	mov	local03, result1 wz
23b7c                 | '       return _seterror( 7 );
23b7c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23b80     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
23b84     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23b88     01 FA 65 A6 |  if_e	neg	result1, #1
23b8c     58 00 90 AD |  if_e	jmp	#LR__3811
23b90     11 13 02 F6 | 	mov	arg01, local03
23b94     00 14 06 F6 | 	mov	arg02, #0
23b98     03 00 00 FF 
23b9c     3C 16 06 F6 | 	mov	arg03, ##1596
23ba0     98 00 A0 FD | 	call	#\builtin_bytefill_
23ba4     02 00 00 FF 
23ba8     14 22 06 F1 | 	add	local03, ##1044
23bac     11 13 02 F6 | 	mov	arg01, local03
23bb0     02 00 00 FF 
23bb4     14 22 86 F1 | 	sub	local03, ##1044
23bb8     10 15 02 F6 | 	mov	arg02, local02
23bbc     07 16 06 F6 | 	mov	arg03, #7
23bc0     B4 CC BF FD | 	call	#_fatfs_cc_f_open
23bc4     FD 24 0A F6 | 	mov	local04, result1 wz
23bc8     14 00 90 AD |  if_e	jmp	#LR__3810
23bcc     11 13 02 F6 | 	mov	arg01, local03
23bd0                 | '     return _gc_free(ptr);
23bd0     C4 61 BF FD | 	call	#__system___gc_free
23bd4                 | '     free(f);
23bd4                 | '     return _set_dos_error(r);
23bd4     12 13 02 F6 | 	mov	arg01, local04
23bd8     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0793
23bdc     08 00 90 FD | 	jmp	#LR__3811
23be0                 | LR__3810
23be0     0F 23 62 FC | 	wrlong	local03, local01
23be4                 | '   }
23be4                 | '   fil->vfsdata = f;
23be4                 | '   return 0;
23be4     00 FA 05 F6 | 	mov	result1, #0
23be8                 | LR__3811
23be8     A7 F0 03 F6 | 	mov	ptra, fp
23bec     B2 00 A0 FD | 	call	#popregs_
23bf0                 | _fatfs_cc_v_creat_ret
23bf0     2D 00 64 FD | 	ret
23bf4                 | 
23bf4                 | _fatfs_cc_v_close
23bf4     02 4A 05 F6 | 	mov	COUNT_, #2
23bf8     A8 00 A0 FD | 	call	#pushregs_
23bfc     09 1F 02 FB | 	rdlong	local01, arg01
23c00     02 00 00 FF 
23c04     14 1E 06 F1 | 	add	local01, ##1044
23c08     0F 13 02 F6 | 	mov	arg01, local01
23c0c     02 00 00 FF 
23c10     14 1E 86 F1 | 	sub	local01, ##1044
23c14     DC E3 BF FD | 	call	#_fatfs_cc_f_close
23c18     FD 20 02 F6 | 	mov	local02, result1
23c1c     0F 13 02 F6 | 	mov	arg01, local01
23c20                 | '     return _gc_free(ptr);
23c20     74 61 BF FD | 	call	#__system___gc_free
23c24                 | '     FAT_FIL *f = fil->vfsdata;
23c24                 | '     r=f_close(&f->fil);
23c24                 | '     free(f);
23c24                 | '     return _set_dos_error(r);
23c24     10 13 02 F6 | 	mov	arg01, local02
23c28     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0793
23c2c     A7 F0 03 F6 | 	mov	ptra, fp
23c30     B2 00 A0 FD | 	call	#popregs_
23c34                 | _fatfs_cc_v_close_ret
23c34     2D 00 64 FD | 	ret
23c38                 | 
23c38                 | _fatfs_cc_v_opendir
23c38     04 4A 05 F6 | 	mov	COUNT_, #4
23c3c     A8 00 A0 FD | 	call	#pushregs_
23c40     09 1F 02 F6 | 	mov	local01, arg01
23c44     0A 21 02 F6 | 	mov	local02, arg02
23c48     30 12 06 F6 | 	mov	arg01, #48
23c4c                 | '     return _gc_alloc(size);
23c4c     10 14 06 F6 | 	mov	arg02, #16
23c50     38 60 BF FD | 	call	#__system___gc_doalloc
23c54     FD 22 0A F6 | 	mov	local03, result1 wz
23c58                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
23c58                 | '       return _seterror( 7 );
23c58     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
23c5c     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
23c60     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
23c64     01 FA 65 A6 |  if_e	neg	result1, #1
23c68     34 00 90 AD |  if_e	jmp	#LR__3821
23c6c     10 15 02 F6 | 	mov	arg02, local02
23c70     11 13 02 F6 | 	mov	arg01, local03
23c74     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
23c78     FD 24 0A F6 | 	mov	local04, result1 wz
23c7c     14 00 90 AD |  if_e	jmp	#LR__3820
23c80     11 13 02 F6 | 	mov	arg01, local03
23c84                 | '     return _gc_free(ptr);
23c84     10 61 BF FD | 	call	#__system___gc_free
23c88                 | '         free(f);
23c88                 | '         return _set_dos_error(r);
23c88     12 13 02 F6 | 	mov	arg01, local04
23c8c     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0793
23c90     0C 00 90 FD | 	jmp	#LR__3821
23c94                 | LR__3820
23c94     04 1E 06 F1 | 	add	local01, #4
23c98     0F 23 62 FC | 	wrlong	local03, local01
23c9c                 | '     }
23c9c                 | '     dir->vfsdata = f;
23c9c                 | '     return 0;
23c9c     00 FA 05 F6 | 	mov	result1, #0
23ca0                 | LR__3821
23ca0     A7 F0 03 F6 | 	mov	ptra, fp
23ca4     B2 00 A0 FD | 	call	#popregs_
23ca8                 | _fatfs_cc_v_opendir_ret
23ca8     2D 00 64 FD | 	ret
23cac                 | 
23cac                 | _fatfs_cc_v_closedir
23cac     02 4A 05 F6 | 	mov	COUNT_, #2
23cb0     A8 00 A0 FD | 	call	#pushregs_
23cb4     04 12 06 F1 | 	add	arg01, #4
23cb8     09 1F 02 FB | 	rdlong	local01, arg01
23cbc     0F 13 02 F6 | 	mov	arg01, local01
23cc0     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
23cc4     FD 20 02 F6 | 	mov	local02, result1
23cc8     0F 13 02 F6 | 	mov	arg01, local01
23ccc                 | '     return _gc_free(ptr);
23ccc     C8 60 BF FD | 	call	#__system___gc_free
23cd0     00 20 0E F2 | 	cmp	local02, #0 wz
23cd4     10 13 02 56 |  if_ne	mov	arg01, local02
23cd8     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0793
23cdc                 | '     return r;
23cdc     10 FB 01 F6 | 	mov	result1, local02
23ce0     A7 F0 03 F6 | 	mov	ptra, fp
23ce4     B2 00 A0 FD | 	call	#popregs_
23ce8                 | _fatfs_cc_v_closedir_ret
23ce8     2D 00 64 FD | 	ret
23cec                 | 
23cec                 | _fatfs_cc_v_readdir
23cec     01 4A 05 F6 | 	mov	COUNT_, #1
23cf0     A8 00 A0 FD | 	call	#pushregs_
23cf4     2C F1 07 F1 | 	add	ptra, #300
23cf8     04 4E 05 F1 | 	add	fp, #4
23cfc     A7 12 62 FC | 	wrlong	arg01, fp
23d00     04 4E 05 F1 | 	add	fp, #4
23d04     A7 14 62 FC | 	wrlong	arg02, fp
23d08     04 4E 85 F1 | 	sub	fp, #4
23d0c     A7 16 02 FB | 	rdlong	arg03, fp
23d10     04 16 06 F1 | 	add	arg03, #4
23d14     0B 13 02 FB | 	rdlong	arg01, arg03
23d18     08 4E 05 F1 | 	add	fp, #8
23d1c     A7 14 02 F6 | 	mov	arg02, fp
23d20     0C 4E 85 F1 | 	sub	fp, #12
23d24     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
23d28     28 4F 05 F1 | 	add	fp, #296
23d2c     A7 FA 61 FC | 	wrlong	result1, fp
23d30     28 4F 85 F1 | 	sub	fp, #296
23d34     00 FA 0D F2 | 	cmp	result1, #0 wz
23d38     14 00 90 AD |  if_e	jmp	#LR__3830
23d3c                 | '         return _set_dos_error(r);
23d3c     28 4F 05 F1 | 	add	fp, #296
23d40     A7 12 02 FB | 	rdlong	arg01, fp
23d44     28 4F 85 F1 | 	sub	fp, #296
23d48     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0793
23d4c     C4 00 90 FD | 	jmp	#LR__3833
23d50                 | LR__3830
23d50     28 4E 05 F1 | 	add	fp, #40
23d54     A7 16 CA FA | 	rdbyte	arg03, fp wz
23d58     28 4E 85 F1 | 	sub	fp, #40
23d5c                 | '         return -1;
23d5c     01 FA 65 A6 |  if_e	neg	result1, #1
23d60     B0 00 90 AD |  if_e	jmp	#LR__3833
23d64     08 4E 05 F1 | 	add	fp, #8
23d68     A7 12 02 FB | 	rdlong	arg01, fp
23d6c     20 4E 05 F1 | 	add	fp, #32
23d70     A7 14 02 F6 | 	mov	arg02, fp
23d74     28 4E 85 F1 | 	sub	fp, #40
23d78     3F 16 06 F6 | 	mov	arg03, #63
23d7c     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
23d80     08 4E 05 F1 | 	add	fp, #8
23d84     A7 16 02 FB | 	rdlong	arg03, fp
23d88     3F 16 06 F1 | 	add	arg03, #63
23d8c     0B 01 48 FC | 	wrbyte	#0, arg03
23d90     0C 4E 05 F1 | 	add	fp, #12
23d94     A7 16 C2 FA | 	rdbyte	arg03, fp
23d98     14 4E 85 F1 | 	sub	fp, #20
23d9c     10 16 CE F7 | 	test	arg03, #16 wz
23da0     18 00 90 AD |  if_e	jmp	#LR__3831
23da4     08 4E 05 F1 | 	add	fp, #8
23da8     A7 16 02 FB | 	rdlong	arg03, fp
23dac     08 4E 85 F1 | 	sub	fp, #8
23db0     50 16 06 F1 | 	add	arg03, #80
23db4     0B 03 48 FC | 	wrbyte	#1, arg03
23db8     14 00 90 FD | 	jmp	#LR__3832
23dbc                 | LR__3831
23dbc     08 4E 05 F1 | 	add	fp, #8
23dc0     A7 16 02 FB | 	rdlong	arg03, fp
23dc4     08 4E 85 F1 | 	sub	fp, #8
23dc8     50 16 06 F1 | 	add	arg03, #80
23dcc     0B 01 48 FC | 	wrbyte	#0, arg03
23dd0                 | LR__3832
23dd0     08 4E 05 F1 | 	add	fp, #8
23dd4     A7 16 02 FB | 	rdlong	arg03, fp
23dd8     04 4E 05 F1 | 	add	fp, #4
23ddc     A7 14 02 FB | 	rdlong	arg02, fp
23de0     48 16 06 F1 | 	add	arg03, #72
23de4     0B 15 62 FC | 	wrlong	arg02, arg03
23de8     04 4E 85 F1 | 	sub	fp, #4
23dec     A7 1E 02 FB | 	rdlong	local01, fp
23df0     08 4E 05 F1 | 	add	fp, #8
23df4     A7 12 E2 FA | 	rdword	arg01, fp
23df8     02 4E 05 F1 | 	add	fp, #2
23dfc     A7 14 E2 FA | 	rdword	arg02, fp
23e00     12 4E 85 F1 | 	sub	fp, #18
23e04     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0791
23e08     4C 1E 06 F1 | 	add	local01, #76
23e0c     0F FB 61 FC | 	wrlong	result1, local01
23e10                 | '         ent->d_type =  (0) ;
23e10                 | '     }
23e10                 | '     ent->d_size = finfo.fsize;
23e10                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
23e10                 | '     return 0;
23e10     00 FA 05 F6 | 	mov	result1, #0
23e14                 | LR__3833
23e14     A7 F0 03 F6 | 	mov	ptra, fp
23e18     B2 00 A0 FD | 	call	#popregs_
23e1c                 | _fatfs_cc_v_readdir_ret
23e1c     2D 00 64 FD | 	ret
23e20                 | 
23e20                 | _fatfs_cc_v_stat
23e20     03 4A 05 F6 | 	mov	COUNT_, #3
23e24     A8 00 A0 FD | 	call	#pushregs_
23e28     30 F1 07 F1 | 	add	ptra, #304
23e2c     04 4E 05 F1 | 	add	fp, #4
23e30     A7 12 62 FC | 	wrlong	arg01, fp
23e34     04 4E 05 F1 | 	add	fp, #4
23e38     A7 14 62 FC | 	wrlong	arg02, fp
23e3c     08 4E 85 F1 | 	sub	fp, #8
23e40     0A 13 02 F6 | 	mov	arg01, arg02
23e44     00 14 06 F6 | 	mov	arg02, #0
23e48     30 16 06 F6 | 	mov	arg03, #48
23e4c     98 00 A0 FD | 	call	#\builtin_bytefill_
23e50     04 4E 05 F1 | 	add	fp, #4
23e54     A7 FA 01 FB | 	rdlong	result1, fp
23e58     04 4E 85 F1 | 	sub	fp, #4
23e5c     FD FA C9 FA | 	rdbyte	result1, result1 wz
23e60     2C 00 90 AD |  if_e	jmp	#LR__3840
23e64     04 4E 05 F1 | 	add	fp, #4
23e68     A7 FA 01 FB | 	rdlong	result1, fp
23e6c     04 4E 85 F1 | 	sub	fp, #4
23e70     FD FA C1 FA | 	rdbyte	result1, result1
23e74     2E FA 0D F2 | 	cmp	result1, #46 wz
23e78     04 4E 05 A1 |  if_e	add	fp, #4
23e7c     A7 1E 02 AB |  if_e	rdlong	local01, fp
23e80     04 4E 85 A1 |  if_e	sub	fp, #4
23e84     01 1E 06 A1 |  if_e	add	local01, #1
23e88     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
23e8c     18 00 90 5D |  if_ne	jmp	#LR__3841
23e90                 | LR__3840
23e90     18 4E 05 F1 | 	add	fp, #24
23e94     A7 20 48 FC | 	wrbyte	#16, fp
23e98     0C 4E 85 F1 | 	sub	fp, #12
23e9c     A7 00 68 FC | 	wrlong	#0, fp
23ea0     0C 4E 85 F1 | 	sub	fp, #12
23ea4     24 00 90 FD | 	jmp	#LR__3842
23ea8                 | LR__3841
23ea8     04 4E 05 F1 | 	add	fp, #4
23eac     A7 12 02 FB | 	rdlong	arg01, fp
23eb0     0C 4E 05 F1 | 	add	fp, #12
23eb4     A7 14 02 F6 | 	mov	arg02, fp
23eb8     10 4E 85 F1 | 	sub	fp, #16
23ebc     AC EB BF FD | 	call	#_fatfs_cc_f_stat
23ec0     0C 4E 05 F1 | 	add	fp, #12
23ec4     A7 FA 61 FC | 	wrlong	result1, fp
23ec8     0C 4E 85 F1 | 	sub	fp, #12
23ecc                 | LR__3842
23ecc     0C 4E 05 F1 | 	add	fp, #12
23ed0     A7 20 0A FB | 	rdlong	local02, fp wz
23ed4     0C 4E 85 F1 | 	sub	fp, #12
23ed8     14 00 90 AD |  if_e	jmp	#LR__3843
23edc                 | '         return _set_dos_error(r);
23edc     0C 4E 05 F1 | 	add	fp, #12
23ee0     A7 12 02 FB | 	rdlong	arg01, fp
23ee4     0C 4E 85 F1 | 	sub	fp, #12
23ee8     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0793
23eec     14 01 90 FD | 	jmp	#LR__3844
23ef0                 | LR__3843
23ef0     2C 4F 05 F1 | 	add	fp, #300
23ef4     A7 48 6A FC | 	wrlong	#292, fp
23ef8     14 4F 85 F1 | 	sub	fp, #276
23efc     A7 22 C2 FA | 	rdbyte	local03, fp
23f00     18 4E 85 F1 | 	sub	fp, #24
23f04     01 22 CE F7 | 	test	local03, #1 wz
23f08     2C 4F 05 51 |  if_ne	add	fp, #300
23f0c     A7 22 02 5B |  if_ne	rdlong	local03, fp
23f10     92 22 46 55 |  if_ne	or	local03, #146
23f14     A7 22 62 5C |  if_ne	wrlong	local03, fp
23f18     2C 4F 85 51 |  if_ne	sub	fp, #300
23f1c     18 4E 05 F1 | 	add	fp, #24
23f20     A7 22 C2 FA | 	rdbyte	local03, fp
23f24     18 4E 85 F1 | 	sub	fp, #24
23f28     10 22 CE F7 | 	test	local03, #16 wz
23f2c     2C 4F 05 51 |  if_ne	add	fp, #300
23f30     A7 22 02 5B |  if_ne	rdlong	local03, fp
23f34     08 00 00 5F 
23f38     49 22 46 55 |  if_ne	or	local03, ##4169
23f3c     A7 22 62 5C |  if_ne	wrlong	local03, fp
23f40     2C 4F 85 51 |  if_ne	sub	fp, #300
23f44     08 4E 05 F1 | 	add	fp, #8
23f48     A7 22 02 FB | 	rdlong	local03, fp
23f4c     24 4F 05 F1 | 	add	fp, #292
23f50     A7 20 02 FB | 	rdlong	local02, fp
23f54     08 22 06 F1 | 	add	local03, #8
23f58     11 21 62 FC | 	wrlong	local02, local03
23f5c     24 4F 85 F1 | 	sub	fp, #292
23f60     A7 22 02 FB | 	rdlong	local03, fp
23f64     0C 22 06 F1 | 	add	local03, #12
23f68     11 03 68 FC | 	wrlong	#1, local03
23f6c     A7 22 02 FB | 	rdlong	local03, fp
23f70     08 4E 05 F1 | 	add	fp, #8
23f74     A7 20 02 FB | 	rdlong	local02, fp
23f78     18 22 06 F1 | 	add	local03, #24
23f7c     11 21 62 FC | 	wrlong	local02, local03
23f80     08 4E 85 F1 | 	sub	fp, #8
23f84     A7 22 02 FB | 	rdlong	local03, fp
23f88     1C 22 06 F1 | 	add	local03, #28
23f8c     01 00 80 FF 
23f90     11 01 68 FC | 	wrlong	##512, local03
23f94     A7 20 02 FB | 	rdlong	local02, fp
23f98     10 23 02 F6 | 	mov	local03, local02
23f9c     18 20 06 F1 | 	add	local02, #24
23fa0     10 21 02 FB | 	rdlong	local02, local02
23fa4     FF 21 06 F1 | 	add	local02, #511
23fa8     10 21 52 F6 | 	abs	local02, local02 wc
23fac     09 20 46 F0 | 	shr	local02, #9
23fb0     10 21 82 F6 | 	negc	local02, local02
23fb4     20 22 06 F1 | 	add	local03, #32
23fb8     11 21 62 FC | 	wrlong	local02, local03
23fbc     A7 20 02 FB | 	rdlong	local02, fp
23fc0     10 23 02 F6 | 	mov	local03, local02
23fc4     10 1F 02 F6 | 	mov	local01, local02
23fc8     0C 4E 05 F1 | 	add	fp, #12
23fcc     A7 12 E2 FA | 	rdword	arg01, fp
23fd0     02 4E 05 F1 | 	add	fp, #2
23fd4     A7 14 E2 FA | 	rdword	arg02, fp
23fd8     16 4E 85 F1 | 	sub	fp, #22
23fdc     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0791
23fe0     2C 1E 06 F1 | 	add	local01, #44
23fe4     0F FB 61 FC | 	wrlong	result1, local01
23fe8     28 20 06 F1 | 	add	local02, #40
23fec     10 FB 61 FC | 	wrlong	result1, local02
23ff0     24 22 06 F1 | 	add	local03, #36
23ff4     11 FB 61 FC | 	wrlong	result1, local03
23ff8                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
23ff8                 | '     }
23ff8                 | '     buf->st_mode = mode;
23ff8                 | '     buf->st_nlink = 1;
23ff8                 | '     buf->st_size = finfo.fsize;
23ff8                 | '     buf->st_blksize = 512;
23ff8                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
23ff8                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
23ff8                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
23ff8                 | '     return r;
23ff8     0C 4E 05 F1 | 	add	fp, #12
23ffc     A7 FA 01 FB | 	rdlong	result1, fp
24000     0C 4E 85 F1 | 	sub	fp, #12
24004                 | LR__3844
24004     A7 F0 03 F6 | 	mov	ptra, fp
24008     B2 00 A0 FD | 	call	#popregs_
2400c                 | _fatfs_cc_v_stat_ret
2400c     2D 00 64 FD | 	ret
24010                 | 
24010                 | _fatfs_cc_v_read
24010     00 4A 05 F6 | 	mov	COUNT_, #0
24014     A8 00 A0 FD | 	call	#pushregs_
24018     1C F0 07 F1 | 	add	ptra, #28
2401c     04 4E 05 F1 | 	add	fp, #4
24020     A7 12 62 FC | 	wrlong	arg01, fp
24024     04 4E 05 F1 | 	add	fp, #4
24028     A7 14 62 FC | 	wrlong	arg02, fp
2402c     04 4E 05 F1 | 	add	fp, #4
24030     A7 16 62 FC | 	wrlong	arg03, fp
24034     08 4E 85 F1 | 	sub	fp, #8
24038     A7 12 02 FB | 	rdlong	arg01, fp
2403c     09 13 0A FB | 	rdlong	arg01, arg01 wz
24040     0C 4E 05 F1 | 	add	fp, #12
24044     A7 12 62 FC | 	wrlong	arg01, fp
24048     10 4E 85 F1 | 	sub	fp, #16
2404c                 | '         return _seterror( 5 );
2404c     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
24050     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
24054     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
24058     01 FA 65 A6 |  if_e	neg	result1, #1
2405c     B8 00 90 AD |  if_e	jmp	#LR__3852
24060     10 4E 05 F1 | 	add	fp, #16
24064     A7 12 02 FB | 	rdlong	arg01, fp
24068     02 00 00 FF 
2406c     14 12 06 F1 | 	add	arg01, ##1044
24070     08 4E 85 F1 | 	sub	fp, #8
24074     A7 14 02 FB | 	rdlong	arg02, fp
24078     04 4E 05 F1 | 	add	fp, #4
2407c     A7 16 02 FB | 	rdlong	arg03, fp
24080     0C 4E 05 F1 | 	add	fp, #12
24084     A7 18 02 F6 | 	mov	arg04, fp
24088     18 4E 85 F1 | 	sub	fp, #24
2408c     C4 CE BF FD | 	call	#_fatfs_cc_f_read
24090     14 4E 05 F1 | 	add	fp, #20
24094     A7 FA 61 FC | 	wrlong	result1, fp
24098     14 4E 85 F1 | 	sub	fp, #20
2409c     00 FA 0D F2 | 	cmp	result1, #0 wz
240a0     34 00 90 AD |  if_e	jmp	#LR__3850
240a4     04 4E 05 F1 | 	add	fp, #4
240a8     A7 18 02 FB | 	rdlong	arg04, fp
240ac     0C 17 02 F6 | 	mov	arg03, arg04
240b0     08 18 06 F1 | 	add	arg04, #8
240b4     0C 19 02 FB | 	rdlong	arg04, arg04
240b8     20 18 46 F5 | 	or	arg04, #32
240bc     08 16 06 F1 | 	add	arg03, #8
240c0     0B 19 62 FC | 	wrlong	arg04, arg03
240c4                 | '         fil->state |=  (0x20) ;
240c4                 | '         return _set_dos_error(r);
240c4     10 4E 05 F1 | 	add	fp, #16
240c8     A7 12 02 FB | 	rdlong	arg01, fp
240cc     14 4E 85 F1 | 	sub	fp, #20
240d0     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0793
240d4     40 00 90 FD | 	jmp	#LR__3852
240d8                 | LR__3850
240d8     18 4E 05 F1 | 	add	fp, #24
240dc     A7 FA 09 FB | 	rdlong	result1, fp wz
240e0     18 4E 85 F1 | 	sub	fp, #24
240e4     24 00 90 5D |  if_ne	jmp	#LR__3851
240e8     04 4E 05 F1 | 	add	fp, #4
240ec     A7 FA 01 FB | 	rdlong	result1, fp
240f0     FD 18 02 F6 | 	mov	arg04, result1
240f4     04 4E 85 F1 | 	sub	fp, #4
240f8     08 FA 05 F1 | 	add	result1, #8
240fc     FD FA 01 FB | 	rdlong	result1, result1
24100     10 FA 45 F5 | 	or	result1, #16
24104     08 18 06 F1 | 	add	arg04, #8
24108     0C FB 61 FC | 	wrlong	result1, arg04
2410c                 | LR__3851
2410c                 | '         fil->state |=  (0x10) ;
2410c                 | '     }
2410c                 | '     return x;
2410c     18 4E 05 F1 | 	add	fp, #24
24110     A7 FA 01 FB | 	rdlong	result1, fp
24114     18 4E 85 F1 | 	sub	fp, #24
24118                 | LR__3852
24118     A7 F0 03 F6 | 	mov	ptra, fp
2411c     B2 00 A0 FD | 	call	#popregs_
24120                 | _fatfs_cc_v_read_ret
24120     2D 00 64 FD | 	ret
24124                 | 
24124                 | _fatfs_cc_v_write
24124     00 4A 05 F6 | 	mov	COUNT_, #0
24128     A8 00 A0 FD | 	call	#pushregs_
2412c     1C F0 07 F1 | 	add	ptra, #28
24130     04 4E 05 F1 | 	add	fp, #4
24134     A7 12 62 FC | 	wrlong	arg01, fp
24138     04 4E 05 F1 | 	add	fp, #4
2413c     A7 14 62 FC | 	wrlong	arg02, fp
24140     04 4E 05 F1 | 	add	fp, #4
24144     A7 16 62 FC | 	wrlong	arg03, fp
24148     08 4E 85 F1 | 	sub	fp, #8
2414c     A7 12 02 FB | 	rdlong	arg01, fp
24150     09 13 0A FB | 	rdlong	arg01, arg01 wz
24154     0C 4E 05 F1 | 	add	fp, #12
24158     A7 12 62 FC | 	wrlong	arg01, fp
2415c     10 4E 85 F1 | 	sub	fp, #16
24160                 | '         return _seterror( 5 );
24160     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
24164     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
24168     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
2416c     01 FA 65 A6 |  if_e	neg	result1, #1
24170     84 00 90 AD |  if_e	jmp	#LR__3861
24174     10 4E 05 F1 | 	add	fp, #16
24178     A7 12 02 FB | 	rdlong	arg01, fp
2417c     02 00 00 FF 
24180     14 12 06 F1 | 	add	arg01, ##1044
24184     08 4E 85 F1 | 	sub	fp, #8
24188     A7 14 02 FB | 	rdlong	arg02, fp
2418c     04 4E 05 F1 | 	add	fp, #4
24190     A7 16 02 FB | 	rdlong	arg03, fp
24194     0C 4E 05 F1 | 	add	fp, #12
24198     A7 18 02 F6 | 	mov	arg04, fp
2419c     18 4E 85 F1 | 	sub	fp, #24
241a0     4C D4 BF FD | 	call	#_fatfs_cc_f_write
241a4     14 4E 05 F1 | 	add	fp, #20
241a8     A7 FA 61 FC | 	wrlong	result1, fp
241ac     14 4E 85 F1 | 	sub	fp, #20
241b0     00 FA 0D F2 | 	cmp	result1, #0 wz
241b4     34 00 90 AD |  if_e	jmp	#LR__3860
241b8     04 4E 05 F1 | 	add	fp, #4
241bc     A7 18 02 FB | 	rdlong	arg04, fp
241c0     0C 17 02 F6 | 	mov	arg03, arg04
241c4     08 18 06 F1 | 	add	arg04, #8
241c8     0C 19 02 FB | 	rdlong	arg04, arg04
241cc     20 18 46 F5 | 	or	arg04, #32
241d0     08 16 06 F1 | 	add	arg03, #8
241d4     0B 19 62 FC | 	wrlong	arg04, arg03
241d8                 | '         fil->state |=  (0x20) ;
241d8                 | '         return _set_dos_error(r);
241d8     10 4E 05 F1 | 	add	fp, #16
241dc     A7 12 02 FB | 	rdlong	arg01, fp
241e0     14 4E 85 F1 | 	sub	fp, #20
241e4     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0793
241e8     0C 00 90 FD | 	jmp	#LR__3861
241ec                 | LR__3860
241ec                 | '     }
241ec                 | '     return x;
241ec     18 4E 05 F1 | 	add	fp, #24
241f0     A7 FA 01 FB | 	rdlong	result1, fp
241f4     18 4E 85 F1 | 	sub	fp, #24
241f8                 | LR__3861
241f8     A7 F0 03 F6 | 	mov	ptra, fp
241fc     B2 00 A0 FD | 	call	#popregs_
24200                 | _fatfs_cc_v_write_ret
24200     2D 00 64 FD | 	ret
24204                 | 
24204                 | _fatfs_cc_v_lseek
24204     04 4A 05 F6 | 	mov	COUNT_, #4
24208     A8 00 A0 FD | 	call	#pushregs_
2420c     0A 1F 02 F6 | 	mov	local01, arg02
24210     0B 21 02 F6 | 	mov	local02, arg03
24214     09 23 02 FB | 	rdlong	local03, arg01
24218     02 00 00 FF 
2421c     14 22 0E F1 | 	add	local03, ##1044 wz
24220                 | '         return _seterror( 5 );
24220     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
24224     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
24228     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
2422c     01 FA 65 A6 |  if_e	neg	result1, #1
24230     4C 00 90 AD |  if_e	jmp	#LR__3872
24234     00 20 0E F2 | 	cmp	local02, #0 wz
24238     24 00 90 AD |  if_e	jmp	#LR__3870
2423c     01 20 0E F2 | 	cmp	local02, #1 wz
24240     14 22 06 A1 |  if_e	add	local03, #20
24244     11 25 02 AB |  if_e	rdlong	local04, local03
24248     14 22 86 A1 |  if_e	sub	local03, #20
2424c     12 1F 02 A1 |  if_e	add	local01, local04
24250     0C 22 06 51 |  if_ne	add	local03, #12
24254     11 25 02 5B |  if_ne	rdlong	local04, local03
24258     0C 22 86 51 |  if_ne	sub	local03, #12
2425c     12 1F 02 51 |  if_ne	add	local01, local04
24260                 | LR__3870
24260     0F 15 02 F6 | 	mov	arg02, local01
24264     11 13 02 F6 | 	mov	arg01, local03
24268     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2426c     FD 12 0A F6 | 	mov	arg01, result1 wz
24270     08 00 90 AD |  if_e	jmp	#LR__3871
24274                 | '         return _set_dos_error(result);
24274     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0793
24278     04 00 90 FD | 	jmp	#LR__3872
2427c                 | LR__3871
2427c                 | '     }
2427c                 | '     return offset;
2427c     0F FB 01 F6 | 	mov	result1, local01
24280                 | LR__3872
24280     A7 F0 03 F6 | 	mov	ptra, fp
24284     B2 00 A0 FD | 	call	#popregs_
24288                 | _fatfs_cc_v_lseek_ret
24288     2D 00 64 FD | 	ret
2428c                 | 
2428c                 | _fatfs_cc_v_ioctl
2428c                 | ' {
2428c                 | '     return _seterror( 10 );
2428c     20 E8 05 F1 | 	add	ptr___system__dat__, #32
24290     F4 14 68 FC | 	wrlong	#10, ptr___system__dat__
24294     20 E8 85 F1 | 	sub	ptr___system__dat__, #32
24298     01 FA 65 F6 | 	neg	result1, #1
2429c                 | _fatfs_cc_v_ioctl_ret
2429c     2D 00 64 FD | 	ret
242a0                 | 
242a0                 | _fatfs_cc_v_mkdir
242a0     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
242a4     FD 12 02 F6 | 	mov	arg01, result1
242a8                 | ' 
242a8                 | '     r = f_mkdir(name);
242a8                 | '     return _set_dos_error(r);
242a8     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0793
242ac                 | _fatfs_cc_v_mkdir_ret
242ac     2D 00 64 FD | 	ret
242b0                 | 
242b0                 | _fatfs_cc_v_remove
242b0     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
242b4     FD 12 02 F6 | 	mov	arg01, result1
242b8                 | ' 
242b8                 | '     r = f_unlink(name);
242b8                 | '     return _set_dos_error(r);
242b8     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0793
242bc                 | _fatfs_cc_v_remove_ret
242bc     2D 00 64 FD | 	ret
242c0                 | 
242c0                 | _fatfs_cc_v_rmdir
242c0     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
242c4     FD 12 02 F6 | 	mov	arg01, result1
242c8                 | ' 
242c8                 | '     r = f_unlink(name);
242c8                 | '     return _set_dos_error(r);
242c8     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0793
242cc                 | _fatfs_cc_v_rmdir_ret
242cc     2D 00 64 FD | 	ret
242d0                 | 
242d0                 | _fatfs_cc_v_rename
242d0     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
242d4     FD 12 02 F6 | 	mov	arg01, result1
242d8                 | '     return _set_dos_error(r);
242d8     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0793
242dc                 | _fatfs_cc_v_rename_ret
242dc     2D 00 64 FD | 	ret
242e0                 | 
242e0                 | _fatfs_cc_v_open
242e0     07 4A 05 F6 | 	mov	COUNT_, #7
242e4     A8 00 A0 FD | 	call	#pushregs_
242e8     09 1F 02 F6 | 	mov	local01, arg01
242ec     0A 21 02 F6 | 	mov	local02, arg02
242f0     0B 23 02 F6 | 	mov	local03, arg03
242f4     03 00 00 FF 
242f8     3C 12 06 F6 | 	mov	arg01, ##1596
242fc                 | '     return _gc_alloc(size);
242fc     10 14 06 F6 | 	mov	arg02, #16
24300     88 59 BF FD | 	call	#__system___gc_doalloc
24304     FD 24 0A F6 | 	mov	local04, result1 wz
24308                 | '       return _seterror( 7 );
24308     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
2430c     F4 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
24310     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
24314     01 FA 65 A6 |  if_e	neg	result1, #1
24318     98 00 90 AD |  if_e	jmp	#LR__3886
2431c     12 13 02 F6 | 	mov	arg01, local04
24320     00 14 06 F6 | 	mov	arg02, #0
24324     03 00 00 FF 
24328     3C 16 06 F6 | 	mov	arg03, ##1596
2432c     98 00 A0 FD | 	call	#\builtin_bytefill_
24330                 | '   switch (flags & 3) {
24330     11 27 02 F6 | 	mov	local05, local03
24334     03 26 0E F5 | 	and	local05, #3 wz
24338     0C 00 90 AD |  if_e	jmp	#LR__3880
2433c     01 26 0E F2 | 	cmp	local05, #1 wz
24340     0C 00 90 AD |  if_e	jmp	#LR__3881
24344     10 00 90 FD | 	jmp	#LR__3882
24348                 | LR__3880
24348     01 28 06 F6 | 	mov	local06, #1
2434c                 | '       fs_flags =  0x01 ;
2434c                 | '       break;
2434c     0C 00 90 FD | 	jmp	#LR__3883
24350                 | LR__3881
24350     02 28 06 F6 | 	mov	local06, #2
24354                 | '       fs_flags =  0x02 ;
24354                 | '       break;
24354     04 00 90 FD | 	jmp	#LR__3883
24358                 | LR__3882
24358     03 28 06 F6 | 	mov	local06, #3
2435c                 | '       fs_flags =  0x01  |  0x02 ;
2435c                 | '       break;
2435c                 | LR__3883
2435c     08 22 CE F7 | 	test	local03, #8 wz
24360     18 28 46 55 |  if_ne	or	local06, #24
24364     08 00 90 5D |  if_ne	jmp	#LR__3884
24368     20 22 CE F7 | 	test	local03, #32 wz
2436c     30 28 46 55 |  if_ne	or	local06, #48
24370                 | LR__3884
24370     02 00 00 FF 
24374     14 24 06 F1 | 	add	local04, ##1044
24378     12 13 02 F6 | 	mov	arg01, local04
2437c     02 00 00 FF 
24380     14 24 86 F1 | 	sub	local04, ##1044
24384     10 15 02 F6 | 	mov	arg02, local02
24388     14 17 02 F6 | 	mov	arg03, local06
2438c     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
24390     FD 2A 0A F6 | 	mov	local07, result1 wz
24394     14 00 90 AD |  if_e	jmp	#LR__3885
24398     12 13 02 F6 | 	mov	arg01, local04
2439c                 | '     return _gc_free(ptr);
2439c     F8 59 BF FD | 	call	#__system___gc_free
243a0                 | '     free(f);
243a0                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
243a0                 | '     return _set_dos_error(r);
243a0     15 13 02 F6 | 	mov	arg01, local07
243a4     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0793
243a8     08 00 90 FD | 	jmp	#LR__3886
243ac                 | LR__3885
243ac     0F 25 62 FC | 	wrlong	local04, local01
243b0                 | '   }
243b0                 | '   fil->vfsdata = f;
243b0                 | '   return 0;
243b0     00 FA 05 F6 | 	mov	result1, #0
243b4                 | LR__3886
243b4     A7 F0 03 F6 | 	mov	ptra, fp
243b8     B2 00 A0 FD | 	call	#popregs_
243bc                 | _fatfs_cc_v_open_ret
243bc     2D 00 64 FD | 	ret
243c0                 | 
243c0                 | _fatfs_cc_v_flush
243c0     09 13 02 FB | 	rdlong	arg01, arg01
243c4     02 00 00 FF 
243c8     14 12 0E F1 | 	add	arg01, ##1044 wz
243cc                 | '         return _seterror( 5 );
243cc     20 E8 05 A1 |  if_e	add	ptr___system__dat__, #32
243d0     F4 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
243d4     20 E8 85 A1 |  if_e	sub	ptr___system__dat__, #32
243d8     01 FA 65 A6 |  if_e	neg	result1, #1
243dc     0C 00 90 AD |  if_e	jmp	#LR__3890
243e0     00 DA BF FD | 	call	#_fatfs_cc_f_sync
243e4     FD 12 02 F6 | 	mov	arg01, result1
243e8                 | '     }
243e8                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
243e8                 | '     result = f_sync(f);
243e8                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
243e8                 | '     return _set_dos_error(result);
243e8     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0793
243ec                 | LR__3890
243ec                 | _fatfs_cc_v_flush_ret
243ec     2D 00 64 FD | 	ret
243f0                 | 
243f0                 | _fatfs_cc_v_init
243f0                 | ' {
243f0                 | '     return 0;
243f0     00 FA 05 F6 | 	mov	result1, #0
243f4                 | _fatfs_cc_v_init_ret
243f4     2D 00 64 FD | 	ret
243f8                 | 
243f8                 | _fatfs_cc_v_deinit
243f8     29 01 00 FF 
243fc     68 15 06 F6 | 	mov	arg02, ##@LR__4086
24400     00 12 06 F6 | 	mov	arg01, #0
24404     00 16 06 F6 | 	mov	arg03, #0
24408     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2440c     01 00 00 FF 
24410     08 E4 05 F1 | 	add	objptr, ##520
24414     F2 12 02 FB | 	rdlong	arg01, objptr
24418     04 E4 05 F1 | 	add	objptr, #4
2441c     F2 14 02 FB | 	rdlong	arg02, objptr
24420     01 00 00 FF 
24424     0C E4 85 F1 | 	sub	objptr, ##524
24428     88 44 BF FD | 	call	#__system___freepins
2442c                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/fatfs.cc"
2442c                 | '     _freepins(f_pinmask);
2442c                 | '     return 0;
2442c     00 FA 05 F6 | 	mov	result1, #0
24430                 | _fatfs_cc_v_deinit_ret
24430     2D 00 64 FD | 	ret
24434                 | 
24434                 | _fatfs_cc_get_vfs
24434     01 4A 05 F6 | 	mov	COUNT_, #1
24438     A8 00 A0 FD | 	call	#pushregs_
2443c     09 1F 02 F6 | 	mov	local01, arg01
24440     50 12 06 F6 | 	mov	arg01, #80
24444     14 58 BF FD | 	call	#__system___gc_alloc_managed
24448     FD 12 02 F6 | 	mov	arg01, result1
2444c     F2 FA 01 F6 | 	mov	result1, objptr
24450     00 20 03 FF 
24454     00 FA 45 F5 | 	or	result1, ##104857600
24458     09 FB 61 FC | 	wrlong	result1, arg01
2445c     F2 FA 01 F6 | 	mov	result1, objptr
24460     00 28 03 FF 
24464     00 FA 45 F5 | 	or	result1, ##105906176
24468     04 12 06 F1 | 	add	arg01, #4
2446c     09 FB 61 FC | 	wrlong	result1, arg01
24470     F2 FA 01 F6 | 	mov	result1, objptr
24474     00 30 03 FF 
24478     00 FA 45 F5 | 	or	result1, ##106954752
2447c     04 12 06 F1 | 	add	arg01, #4
24480     09 FB 61 FC | 	wrlong	result1, arg01
24484     F2 FA 01 F6 | 	mov	result1, objptr
24488     00 38 03 FF 
2448c     00 FA 45 F5 | 	or	result1, ##108003328
24490     04 12 06 F1 | 	add	arg01, #4
24494     09 FB 61 FC | 	wrlong	result1, arg01
24498     F2 FA 01 F6 | 	mov	result1, objptr
2449c     00 40 03 FF 
244a0     00 FA 45 F5 | 	or	result1, ##109051904
244a4     04 12 06 F1 | 	add	arg01, #4
244a8     09 FB 61 FC | 	wrlong	result1, arg01
244ac     04 12 06 F1 | 	add	arg01, #4
244b0     09 01 68 FC | 	wrlong	#0, arg01
244b4     04 12 06 F1 | 	add	arg01, #4
244b8     09 1F 62 FC | 	wrlong	local01, arg01
244bc     04 12 06 F1 | 	add	arg01, #4
244c0     09 01 68 FC | 	wrlong	#0, arg01
244c4     F2 FA 01 F6 | 	mov	result1, objptr
244c8     00 48 03 FF 
244cc     00 FA 45 F5 | 	or	result1, ##110100480
244d0     04 12 06 F1 | 	add	arg01, #4
244d4     09 FB 61 FC | 	wrlong	result1, arg01
244d8     F2 FA 01 F6 | 	mov	result1, objptr
244dc     00 50 03 FF 
244e0     00 FA 45 F5 | 	or	result1, ##111149056
244e4     04 12 06 F1 | 	add	arg01, #4
244e8     09 FB 61 FC | 	wrlong	result1, arg01
244ec     F2 FA 01 F6 | 	mov	result1, objptr
244f0     00 58 03 FF 
244f4     00 FA 45 F5 | 	or	result1, ##112197632
244f8     04 12 06 F1 | 	add	arg01, #4
244fc     09 FB 61 FC | 	wrlong	result1, arg01
24500     F2 FA 01 F6 | 	mov	result1, objptr
24504     00 60 03 FF 
24508     00 FA 45 F5 | 	or	result1, ##113246208
2450c     04 12 06 F1 | 	add	arg01, #4
24510     09 FB 61 FC | 	wrlong	result1, arg01
24514     F2 FA 01 F6 | 	mov	result1, objptr
24518     00 68 03 FF 
2451c     00 FA 45 F5 | 	or	result1, ##114294784
24520     04 12 06 F1 | 	add	arg01, #4
24524     09 FB 61 FC | 	wrlong	result1, arg01
24528     F2 FA 01 F6 | 	mov	result1, objptr
2452c     00 70 03 FF 
24530     00 FA 45 F5 | 	or	result1, ##115343360
24534     04 12 06 F1 | 	add	arg01, #4
24538     09 FB 61 FC | 	wrlong	result1, arg01
2453c     F2 FA 01 F6 | 	mov	result1, objptr
24540     00 78 03 FF 
24544     00 FA 45 F5 | 	or	result1, ##116391936
24548     04 12 06 F1 | 	add	arg01, #4
2454c     09 FB 61 FC | 	wrlong	result1, arg01
24550     F2 FA 01 F6 | 	mov	result1, objptr
24554     58 FA 25 F4 | 	bith	result1, #88
24558     04 12 06 F1 | 	add	arg01, #4
2455c     09 FB 61 FC | 	wrlong	result1, arg01
24560     F2 FA 01 F6 | 	mov	result1, objptr
24564     00 88 03 FF 
24568     00 FA 45 F5 | 	or	result1, ##118489088
2456c     04 12 06 F1 | 	add	arg01, #4
24570     09 FB 61 FC | 	wrlong	result1, arg01
24574     F2 FA 01 F6 | 	mov	result1, objptr
24578     00 90 03 FF 
2457c     00 FA 45 F5 | 	or	result1, ##119537664
24580     04 12 06 F1 | 	add	arg01, #4
24584     09 FB 61 FC | 	wrlong	result1, arg01
24588     F2 FA 01 F6 | 	mov	result1, objptr
2458c     00 98 03 FF 
24590     00 FA 45 F5 | 	or	result1, ##120586240
24594     04 12 06 F1 | 	add	arg01, #4
24598     09 FB 61 FC | 	wrlong	result1, arg01
2459c     F2 FA 01 F6 | 	mov	result1, objptr
245a0     00 A0 03 FF 
245a4     00 FA 45 F5 | 	or	result1, ##121634816
245a8     04 12 06 F1 | 	add	arg01, #4
245ac     09 FB 61 FC | 	wrlong	result1, arg01
245b0     4C 12 86 F1 | 	sub	arg01, #76
245b4                 | ' 
245b4                 | '     v->close = &v_close;
245b4                 | '     v->read = &v_read;
245b4                 | '     v->write = &v_write;
245b4                 | '     v->lseek = &v_lseek;
245b4                 | '     v->ioctl = &v_ioctl;
245b4                 | '     v->flush = 0;
245b4                 | '     v->vfs_data = ptr;
245b4                 | '     v->reserved = 0;
245b4                 | ' 
245b4                 | '     v->open = &v_open;
245b4                 | '     v->creat = &v_creat;
245b4                 | '     v->opendir = &v_opendir;
245b4                 | '     v->closedir = &v_closedir;
245b4                 | '     v->readdir = &v_readdir;
245b4                 | '     v->stat = &v_stat;
245b4                 | ' 
245b4                 | '     v->mkdir = &v_mkdir;
245b4                 | '     v->rmdir = &v_rmdir;
245b4                 | ' 
245b4                 | '     v->remove = &v_remove;
245b4                 | '     v->rename = &v_rename;
245b4                 | ' 
245b4                 | '     v->init = &v_init;
245b4                 | '     v->deinit = &v_deinit;
245b4                 | ' 
245b4                 | '     return v;
245b4     09 FB 01 F6 | 	mov	result1, arg01
245b8     A7 F0 03 F6 | 	mov	ptra, fp
245bc     B2 00 A0 FD | 	call	#popregs_
245c0                 | _fatfs_cc_get_vfs_ret
245c0     2D 00 64 FD | 	ret
245c4                 | 
245c4                 | _fatfs_cc_xmit_mmc_0940
245c4     01 00 00 FF 
245c8     10 E4 05 F1 | 	add	objptr, ##528
245cc     F2 00 02 FB | 	rdlong	_var01, objptr
245d0     08 E4 05 F1 | 	add	objptr, #8
245d4     F2 02 02 FB | 	rdlong	_var02, objptr
245d8     01 00 00 FF 
245dc     18 E4 85 F1 | 	sub	objptr, ##536
245e0     40 02 62 FD | 	dirl	_var02
245e4     28 02 64 FD | 	setq	#1
245e8     09 05 02 FB | 	rdlong	_var03, arg01
245ec     69 04 62 FD | 	rev	_var03
245f0     1B 04 FE F9 | 	movbyts	_var03, #27
245f4     01 05 22 FC | 	wypin	_var03, _var02
245f8     0A 05 02 F6 | 	mov	_var03, arg02
245fc     02 14 4E F0 | 	shr	arg02, #2 wz
24600     03 04 66 F0 | 	shl	_var03, #3
24604     00 05 22 FC | 	wypin	_var03, _var01
24608     41 02 62 FD | 	dirh	_var02
2460c     08 12 06 F1 | 	add	arg01, #8
24610     69 06 62 FD | 	rev	_var04
24614     1B 06 FE F9 | 	movbyts	_var04, #27
24618                 | LR__3900
24618     01 07 22 5C |  if_ne	wypin	_var04, _var02
2461c     09 07 02 5B |  if_ne	rdlong	_var04, arg01
24620     04 12 06 51 |  if_ne	add	arg01, #4
24624     69 06 62 5D |  if_ne	rev	_var04
24628     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
2462c                 | LR__3901
2462c     40 02 72 5D |  if_ne	testp	_var02 wc
24630     F8 FF 9F 1D |  if_a	jmp	#LR__3901
24634     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__3900
24638                 | LR__3902
24638     40 00 72 FD | 	testp	_var01 wc
2463c     F8 FF 9F 3D |  if_ae	jmp	#LR__3902
24640     40 02 62 FD | 	dirl	_var02
24644     FF FF FF FF 
24648     01 FF 2B FC | 	wypin	##-1, _var02
2464c     41 02 62 FD | 	dirh	_var02
24650                 | _fatfs_cc_xmit_mmc_0940_ret
24650     2D 00 64 FD | 	ret
24654                 | 
24654                 | _fatfs_cc_rcvr_mmc_0947
24654     01 00 00 FF 
24658     10 E4 05 F1 | 	add	objptr, ##528
2465c     F2 00 02 FB | 	rdlong	_var01, objptr
24660     0C E4 05 F1 | 	add	objptr, #12
24664     F2 02 02 FB | 	rdlong	_var02, objptr
24668     01 00 00 FF 
2466c     1C E4 85 F1 | 	sub	objptr, ##540
24670     01 03 08 FC | 	akpin	_var02
24674     0A 05 0A F6 | 	mov	_var03, arg02 wz
24678     02 04 4E F0 | 	shr	_var03, #2 wz
2467c     30 00 90 AD |  if_e	jmp	#LR__3912
24680     02 07 02 F6 | 	mov	_var04, _var03
24684     05 06 66 F0 | 	shl	_var04, #5
24688     00 07 22 FC | 	wypin	_var04, _var01
2468c     01 7F 18 FC | 	wxpin	#63, _var02
24690                 | LR__3910
24690                 | LR__3911
24690     40 02 72 FD | 	testp	_var02 wc
24694     F8 FF 9F 3D |  if_ae	jmp	#LR__3911
24698     01 07 8A FA | 	rdpin	_var04, _var02
2469c     69 06 62 FD | 	rev	_var04
246a0     1B 06 FE F9 | 	movbyts	_var04, #27
246a4     09 07 62 FC | 	wrlong	_var04, arg01
246a8     04 12 06 F1 | 	add	arg01, #4
246ac     F8 05 6E FB | 	djnz	_var03, #LR__3910
246b0                 | LR__3912
246b0     03 14 0E F5 | 	and	arg02, #3 wz
246b4     24 00 90 AD |  if_e	jmp	#LR__3915
246b8     01 4F 18 FC | 	wxpin	#39, _var02
246bc                 | LR__3913
246bc     00 11 28 FC | 	wypin	#8, _var01
246c0                 | LR__3914
246c0     40 02 72 FD | 	testp	_var02 wc
246c4     F8 FF 9F 3D |  if_ae	jmp	#LR__3914
246c8     01 07 8A FA | 	rdpin	_var04, _var02
246cc     69 06 62 FD | 	rev	_var04
246d0     09 07 42 FC | 	wrbyte	_var04, arg01
246d4     01 12 06 F1 | 	add	arg01, #1
246d8     F8 15 6E FB | 	djnz	arg02, #LR__3913
246dc                 | LR__3915
246dc                 | _fatfs_cc_rcvr_mmc_0947_ret
246dc     2D 00 64 FD | 	ret
246e0                 | 
246e0                 | _fatfs_cc_wait_ready_0951
246e0     01 4A 05 F6 | 	mov	COUNT_, #1
246e4     A8 00 A0 FD | 	call	#pushregs_
246e8     10 F0 07 F1 | 	add	ptra, #16
246ec     1A FA 61 FD | 	getct	result1
246f0     08 4E 05 F1 | 	add	fp, #8
246f4     A7 FA 61 FC | 	wrlong	result1, fp
246f8     14 1E 06 FB | 	rdlong	local01, #20
246fc     01 1E 46 F0 | 	shr	local01, #1
24700     04 4E 05 F1 | 	add	fp, #4
24704     A7 1E 62 FC | 	wrlong	local01, fp
24708     0C 4E 85 F1 | 	sub	fp, #12
2470c                 | ' {
2470c                 | ' 	BYTE d;
2470c                 | ' 	UINT tmr, tmout;
2470c                 | ' 
2470c                 | ' 	tmr = _cnt();
2470c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
2470c                 | ' 	for(;;) {
2470c                 | LR__3920
2470c     04 4E 05 F1 | 	add	fp, #4
24710     A7 12 02 F6 | 	mov	arg01, fp
24714     04 4E 85 F1 | 	sub	fp, #4
24718     01 14 06 F6 | 	mov	arg02, #1
2471c     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_0947
24720     04 4E 05 F1 | 	add	fp, #4
24724     A7 1E C2 FA | 	rdbyte	local01, fp
24728     04 4E 85 F1 | 	sub	fp, #4
2472c     FF 1E 0E F2 | 	cmp	local01, #255 wz
24730     01 FA 05 A6 |  if_e	mov	result1, #1
24734     28 00 90 AD |  if_e	jmp	#LR__3921
24738     1A FA 61 FD | 	getct	result1
2473c     08 4E 05 F1 | 	add	fp, #8
24740     A7 1E 02 FB | 	rdlong	local01, fp
24744     0F FB 81 F1 | 	sub	result1, local01
24748     04 4E 05 F1 | 	add	fp, #4
2474c     A7 1E 02 FB | 	rdlong	local01, fp
24750     0C 4E 85 F1 | 	sub	fp, #12
24754     0F FB 11 F2 | 	cmp	result1, local01 wc
24758     00 FA 05 36 |  if_ae	mov	result1, #0
2475c     AC FF 9F CD |  if_b	jmp	#LR__3920
24760                 | LR__3921
24760     A7 F0 03 F6 | 	mov	ptra, fp
24764     B2 00 A0 FD | 	call	#popregs_
24768                 | _fatfs_cc_wait_ready_0951_ret
24768     2D 00 64 FD | 	ret
2476c                 | 
2476c                 | _fatfs_cc_deselect_0957
2476c     00 4A 05 F6 | 	mov	COUNT_, #0
24770     A8 00 A0 FD | 	call	#pushregs_
24774     14 F0 07 F1 | 	add	ptra, #20
24778     01 00 00 FF 
2477c     14 E4 05 F1 | 	add	objptr, ##532
24780     F2 14 02 FB | 	rdlong	arg02, objptr
24784     04 4E 05 F1 | 	add	fp, #4
24788     A7 14 62 FC | 	wrlong	arg02, fp
2478c     04 E4 85 F1 | 	sub	objptr, #4
24790     F2 14 02 FB | 	rdlong	arg02, objptr
24794     04 4E 05 F1 | 	add	fp, #4
24798     A7 14 62 FC | 	wrlong	arg02, fp
2479c     08 E4 05 F1 | 	add	objptr, #8
247a0     F2 14 02 FB | 	rdlong	arg02, objptr
247a4     04 4E 05 F1 | 	add	fp, #4
247a8     A7 14 62 FC | 	wrlong	arg02, fp
247ac     04 E4 05 F1 | 	add	objptr, #4
247b0     F2 14 02 FB | 	rdlong	arg02, objptr
247b4     01 00 00 FF 
247b8     1C E4 85 F1 | 	sub	objptr, ##540
247bc     04 4E 05 F1 | 	add	fp, #4
247c0     A7 14 62 FC | 	wrlong	arg02, fp
247c4     0C 4E 85 F1 | 	sub	fp, #12
247c8     A7 12 02 FB | 	rdlong	arg01, fp
247cc     04 4E 85 F1 | 	sub	fp, #4
247d0     59 12 62 FD | 	drvh	arg01
247d4     1F 20 64 FD | 	waitx	#16
247d8     A7 12 02 F6 | 	mov	arg01, fp
247dc     01 14 06 F6 | 	mov	arg02, #1
247e0     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_0947
247e4     A7 F0 03 F6 | 	mov	ptra, fp
247e8     B2 00 A0 FD | 	call	#popregs_
247ec                 | _fatfs_cc_deselect_0957_ret
247ec     2D 00 64 FD | 	ret
247f0                 | 
247f0                 | _fatfs_cc_select_0961
247f0     00 4A 05 F6 | 	mov	COUNT_, #0
247f4     A8 00 A0 FD | 	call	#pushregs_
247f8     10 F0 07 F1 | 	add	ptra, #16
247fc     01 00 00 FF 
24800     14 E4 05 F1 | 	add	objptr, ##532
24804     F2 14 02 FB | 	rdlong	arg02, objptr
24808     08 4E 05 F1 | 	add	fp, #8
2480c     A7 14 62 FC | 	wrlong	arg02, fp
24810     08 E4 05 F1 | 	add	objptr, #8
24814     F2 12 02 FB | 	rdlong	arg01, objptr
24818     01 00 00 FF 
2481c     1C E4 85 F1 | 	sub	objptr, ##540
24820     04 4E 05 F1 | 	add	fp, #4
24824     A7 12 62 FC | 	wrlong	arg01, fp
24828     50 12 62 FD | 	fltl	arg01
2482c     04 4E 85 F1 | 	sub	fp, #4
24830     A7 12 02 FB | 	rdlong	arg01, fp
24834     58 12 62 FD | 	drvl	arg01
24838     1F 20 64 FD | 	waitx	#16
2483c     04 4E 05 F1 | 	add	fp, #4
24840     A7 12 02 FB | 	rdlong	arg01, fp
24844     41 12 62 FD | 	dirh	arg01
24848     08 4E 85 F1 | 	sub	fp, #8
2484c     A7 12 02 F6 | 	mov	arg01, fp
24850     04 4E 85 F1 | 	sub	fp, #4
24854     01 14 06 F6 | 	mov	arg02, #1
24858     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0947
2485c     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_0951
24860     00 FA 0D F2 | 	cmp	result1, #0 wz
24864     01 FA 05 56 |  if_ne	mov	result1, #1
24868     08 00 90 5D |  if_ne	jmp	#LR__3930
2486c     FC FE BF FD | 	call	#_fatfs_cc_deselect_0957
24870                 | ' 
24870                 | ' 	deselect();
24870                 | ' 	return 0;
24870     00 FA 05 F6 | 	mov	result1, #0
24874                 | LR__3930
24874     A7 F0 03 F6 | 	mov	ptra, fp
24878     B2 00 A0 FD | 	call	#popregs_
2487c                 | _fatfs_cc_select_0961_ret
2487c     2D 00 64 FD | 	ret
24880                 | 
24880                 | _fatfs_cc_rcvr_datablock_0965
24880     01 4A 05 F6 | 	mov	COUNT_, #1
24884     A8 00 A0 FD | 	call	#pushregs_
24888     18 F0 07 F1 | 	add	ptra, #24
2488c     04 4E 05 F1 | 	add	fp, #4
24890     A7 12 62 FC | 	wrlong	arg01, fp
24894     04 4E 05 F1 | 	add	fp, #4
24898     A7 14 62 FC | 	wrlong	arg02, fp
2489c     1A FA 61 FD | 	getct	result1
248a0     08 4E 05 F1 | 	add	fp, #8
248a4     A7 FA 61 FC | 	wrlong	result1, fp
248a8     14 1E 06 FB | 	rdlong	local01, #20
248ac     03 1E 46 F0 | 	shr	local01, #3
248b0     04 4E 05 F1 | 	add	fp, #4
248b4     A7 1E 62 FC | 	wrlong	local01, fp
248b8     14 4E 85 F1 | 	sub	fp, #20
248bc                 | ' 	BYTE *buff,
248bc                 | ' 	UINT btr
248bc                 | ' )
248bc                 | ' {
248bc                 | ' 	BYTE d[2];
248bc                 | ' 	UINT tmr, tmout;
248bc                 | ' 
248bc                 | ' 	tmr = _cnt();
248bc                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
248bc                 | ' 	for(;;) {
248bc                 | LR__3940
248bc     0C 4E 05 F1 | 	add	fp, #12
248c0     A7 12 02 F6 | 	mov	arg01, fp
248c4     0C 4E 85 F1 | 	sub	fp, #12
248c8     01 14 06 F6 | 	mov	arg02, #1
248cc     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0947
248d0     0C 4E 05 F1 | 	add	fp, #12
248d4     A7 1E C2 FA | 	rdbyte	local01, fp
248d8     0C 4E 85 F1 | 	sub	fp, #12
248dc     FF 1E 0E F2 | 	cmp	local01, #255 wz
248e0     28 00 90 5D |  if_ne	jmp	#LR__3941
248e4     1A FA 61 FD | 	getct	result1
248e8     FD 1E 02 F6 | 	mov	local01, result1
248ec     10 4E 05 F1 | 	add	fp, #16
248f0     A7 14 02 FB | 	rdlong	arg02, fp
248f4     0A 1F 82 F1 | 	sub	local01, arg02
248f8     04 4E 05 F1 | 	add	fp, #4
248fc     A7 14 02 FB | 	rdlong	arg02, fp
24900     14 4E 85 F1 | 	sub	fp, #20
24904     0A 1F 12 F2 | 	cmp	local01, arg02 wc
24908     B0 FF 9F CD |  if_b	jmp	#LR__3940
2490c                 | LR__3941
2490c     0C 4E 05 F1 | 	add	fp, #12
24910     A7 1E C2 FA | 	rdbyte	local01, fp
24914     0C 4E 85 F1 | 	sub	fp, #12
24918     FE 1E 0E F2 | 	cmp	local01, #254 wz
2491c     00 FA 05 56 |  if_ne	mov	result1, #0
24920     30 00 90 5D |  if_ne	jmp	#LR__3942
24924     04 4E 05 F1 | 	add	fp, #4
24928     A7 12 02 FB | 	rdlong	arg01, fp
2492c     04 4E 05 F1 | 	add	fp, #4
24930     A7 14 02 FB | 	rdlong	arg02, fp
24934     08 4E 85 F1 | 	sub	fp, #8
24938     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0947
2493c     0C 4E 05 F1 | 	add	fp, #12
24940     A7 12 02 F6 | 	mov	arg01, fp
24944     0C 4E 85 F1 | 	sub	fp, #12
24948     02 14 06 F6 | 	mov	arg02, #2
2494c     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_0947
24950                 | ' 
24950                 | ' 	rcvr_mmc(buff, btr);
24950                 | ' 	rcvr_mmc(d, 2);
24950                 | ' 
24950                 | ' 	return 1;
24950     01 FA 05 F6 | 	mov	result1, #1
24954                 | LR__3942
24954     A7 F0 03 F6 | 	mov	ptra, fp
24958     B2 00 A0 FD | 	call	#popregs_
2495c                 | _fatfs_cc_rcvr_datablock_0965_ret
2495c     2D 00 64 FD | 	ret
24960                 | 
24960                 | _fatfs_cc_xmit_datablock_0967
24960     00 4A 05 F6 | 	mov	COUNT_, #0
24964     A8 00 A0 FD | 	call	#pushregs_
24968     10 F0 07 F1 | 	add	ptra, #16
2496c     04 4E 05 F1 | 	add	fp, #4
24970     A7 12 62 FC | 	wrlong	arg01, fp
24974     04 4E 05 F1 | 	add	fp, #4
24978     A7 14 42 FC | 	wrbyte	arg02, fp
2497c     08 4E 85 F1 | 	sub	fp, #8
24980     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_0951
24984     00 FA 0D F2 | 	cmp	result1, #0 wz
24988     00 FA 05 A6 |  if_e	mov	result1, #0
2498c     90 00 90 AD |  if_e	jmp	#LR__3951
24990     08 4E 05 F1 | 	add	fp, #8
24994     A7 14 C2 FA | 	rdbyte	arg02, fp
24998     04 4E 05 F1 | 	add	fp, #4
2499c     A7 14 42 FC | 	wrbyte	arg02, fp
249a0     A7 12 02 F6 | 	mov	arg01, fp
249a4     0C 4E 85 F1 | 	sub	fp, #12
249a8     01 14 06 F6 | 	mov	arg02, #1
249ac     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_0940
249b0     08 4E 05 F1 | 	add	fp, #8
249b4     A7 14 C2 FA | 	rdbyte	arg02, fp
249b8     08 4E 85 F1 | 	sub	fp, #8
249bc     FD 14 0E F2 | 	cmp	arg02, #253 wz
249c0     58 00 90 AD |  if_e	jmp	#LR__3950
249c4     04 4E 05 F1 | 	add	fp, #4
249c8     A7 12 02 FB | 	rdlong	arg01, fp
249cc     04 4E 85 F1 | 	sub	fp, #4
249d0     09 14 C6 F9 | 	decod	arg02, #9
249d4     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_0940
249d8     0C 4E 05 F1 | 	add	fp, #12
249dc     A7 12 02 F6 | 	mov	arg01, fp
249e0     0C 4E 85 F1 | 	sub	fp, #12
249e4     02 14 06 F6 | 	mov	arg02, #2
249e8     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0947
249ec     0C 4E 05 F1 | 	add	fp, #12
249f0     A7 12 02 F6 | 	mov	arg01, fp
249f4     0C 4E 85 F1 | 	sub	fp, #12
249f8     01 14 06 F6 | 	mov	arg02, #1
249fc     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_0947
24a00     0C 4E 05 F1 | 	add	fp, #12
24a04     A7 14 C2 FA | 	rdbyte	arg02, fp
24a08     0C 4E 85 F1 | 	sub	fp, #12
24a0c     1F 14 06 F5 | 	and	arg02, #31
24a10     05 14 0E F2 | 	cmp	arg02, #5 wz
24a14                 | ' 			return 0;
24a14     00 FA 05 56 |  if_ne	mov	result1, #0
24a18     04 00 90 5D |  if_ne	jmp	#LR__3951
24a1c                 | LR__3950
24a1c                 | ' 	}
24a1c                 | ' 
24a1c                 | ' 	return 1;
24a1c     01 FA 05 F6 | 	mov	result1, #1
24a20                 | LR__3951
24a20     A7 F0 03 F6 | 	mov	ptra, fp
24a24     B2 00 A0 FD | 	call	#popregs_
24a28                 | _fatfs_cc_xmit_datablock_0967_ret
24a28     2D 00 64 FD | 	ret
24a2c                 | 
24a2c                 | _fatfs_cc_send_cmd_0971
24a2c     01 4A 05 F6 | 	mov	COUNT_, #1
24a30     A8 00 A0 FD | 	call	#pushregs_
24a34     1C F0 07 F1 | 	add	ptra, #28
24a38                 | _fatfs_cc_send_cmd_0971_enter
24a38     04 4E 05 F1 | 	add	fp, #4
24a3c     A7 12 42 FC | 	wrbyte	arg01, fp
24a40     04 4E 05 F1 | 	add	fp, #4
24a44     A7 14 62 FC | 	wrlong	arg02, fp
24a48     04 4E 85 F1 | 	sub	fp, #4
24a4c     A7 FA C1 FA | 	rdbyte	result1, fp
24a50     04 4E 85 F1 | 	sub	fp, #4
24a54     80 FA CD F7 | 	test	result1, #128 wz
24a58     44 00 90 AD |  if_e	jmp	#LR__3960
24a5c     04 4E 05 F1 | 	add	fp, #4
24a60     A7 14 C2 FA | 	rdbyte	arg02, fp
24a64     7F 14 06 F5 | 	and	arg02, #127
24a68     A7 14 42 FC | 	wrbyte	arg02, fp
24a6c     04 4E 85 F1 | 	sub	fp, #4
24a70     37 12 06 F6 | 	mov	arg01, #55
24a74     00 14 06 F6 | 	mov	arg02, #0
24a78     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_0971
24a7c     0C 4E 05 F1 | 	add	fp, #12
24a80     A7 FA 41 FC | 	wrbyte	result1, fp
24a84     A7 14 C2 FA | 	rdbyte	arg02, fp
24a88     0C 4E 85 F1 | 	sub	fp, #12
24a8c     02 14 16 F2 | 	cmp	arg02, #2 wc
24a90     0C 4E 05 31 |  if_ae	add	fp, #12
24a94     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
24a98     0C 4E 85 31 |  if_ae	sub	fp, #12
24a9c     6C 01 90 3D |  if_ae	jmp	#LR__3964
24aa0                 | LR__3960
24aa0     04 4E 05 F1 | 	add	fp, #4
24aa4     A7 14 C2 FA | 	rdbyte	arg02, fp
24aa8     04 4E 85 F1 | 	sub	fp, #4
24aac     0C 14 0E F2 | 	cmp	arg02, #12 wz
24ab0     14 00 90 AD |  if_e	jmp	#LR__3961
24ab4     B4 FC BF FD | 	call	#_fatfs_cc_deselect_0957
24ab8     34 FD BF FD | 	call	#_fatfs_cc_select_0961
24abc     00 FA 0D F2 | 	cmp	result1, #0 wz
24ac0     FF FA 05 A6 |  if_e	mov	result1, #255
24ac4     44 01 90 AD |  if_e	jmp	#LR__3964
24ac8                 | LR__3961
24ac8     04 4E 05 F1 | 	add	fp, #4
24acc     A7 14 C2 FA | 	rdbyte	arg02, fp
24ad0     40 FA 05 F6 | 	mov	result1, #64
24ad4     0A FB 41 F5 | 	or	result1, arg02
24ad8     10 4E 05 F1 | 	add	fp, #16
24adc     A7 FA 41 FC | 	wrbyte	result1, fp
24ae0     0C 4E 85 F1 | 	sub	fp, #12
24ae4     A7 FA 01 FB | 	rdlong	result1, fp
24ae8     18 FA 45 F0 | 	shr	result1, #24
24aec     0D 4E 05 F1 | 	add	fp, #13
24af0     A7 FA 41 FC | 	wrbyte	result1, fp
24af4     0D 4E 85 F1 | 	sub	fp, #13
24af8     A7 FA 01 FB | 	rdlong	result1, fp
24afc     10 FA 45 F0 | 	shr	result1, #16
24b00     0E 4E 05 F1 | 	add	fp, #14
24b04     A7 FA 41 FC | 	wrbyte	result1, fp
24b08     0E 4E 85 F1 | 	sub	fp, #14
24b0c     A7 FA 01 FB | 	rdlong	result1, fp
24b10     08 FA 45 F0 | 	shr	result1, #8
24b14     0F 4E 05 F1 | 	add	fp, #15
24b18     A7 FA 41 FC | 	wrbyte	result1, fp
24b1c     0F 4E 85 F1 | 	sub	fp, #15
24b20     A7 FA 01 FB | 	rdlong	result1, fp
24b24     10 4E 05 F1 | 	add	fp, #16
24b28     A7 FA 41 FC | 	wrbyte	result1, fp
24b2c     0C 4E 85 F1 | 	sub	fp, #12
24b30     A7 02 48 FC | 	wrbyte	#1, fp
24b34     08 4E 85 F1 | 	sub	fp, #8
24b38     A7 FA C9 FA | 	rdbyte	result1, fp wz
24b3c     04 4E 85 F1 | 	sub	fp, #4
24b40     0C 4E 05 A1 |  if_e	add	fp, #12
24b44     A7 2A 49 AC |  if_e	wrbyte	#149, fp
24b48     0C 4E 85 A1 |  if_e	sub	fp, #12
24b4c     04 4E 05 F1 | 	add	fp, #4
24b50     A7 FA C1 FA | 	rdbyte	result1, fp
24b54     04 4E 85 F1 | 	sub	fp, #4
24b58     08 FA 0D F2 | 	cmp	result1, #8 wz
24b5c     0C 4E 05 A1 |  if_e	add	fp, #12
24b60     A7 0E 49 AC |  if_e	wrbyte	#135, fp
24b64     0C 4E 85 A1 |  if_e	sub	fp, #12
24b68     0C 4E 05 F1 | 	add	fp, #12
24b6c     A7 14 C2 FA | 	rdbyte	arg02, fp
24b70     0D 4E 05 F1 | 	add	fp, #13
24b74     A7 14 42 FC | 	wrbyte	arg02, fp
24b78     05 4E 85 F1 | 	sub	fp, #5
24b7c     A7 12 02 F6 | 	mov	arg01, fp
24b80     14 4E 85 F1 | 	sub	fp, #20
24b84     06 14 06 F6 | 	mov	arg02, #6
24b88     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_0940
24b8c     04 4E 05 F1 | 	add	fp, #4
24b90     A7 1E C2 FA | 	rdbyte	local01, fp
24b94     04 4E 85 F1 | 	sub	fp, #4
24b98     0C 1E 0E F2 | 	cmp	local01, #12 wz
24b9c     10 4E 05 A1 |  if_e	add	fp, #16
24ba0     A7 12 02 A6 |  if_e	mov	arg01, fp
24ba4     10 4E 85 A1 |  if_e	sub	fp, #16
24ba8     01 14 06 A6 |  if_e	mov	arg02, #1
24bac     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_0947
24bb0     0C 4E 05 F1 | 	add	fp, #12
24bb4     A7 14 48 FC | 	wrbyte	#10, fp
24bb8     0C 4E 85 F1 | 	sub	fp, #12
24bbc                 | ' 	n = 10;
24bbc                 | ' 	do
24bbc                 | LR__3962
24bbc     10 4E 05 F1 | 	add	fp, #16
24bc0     A7 12 02 F6 | 	mov	arg01, fp
24bc4     10 4E 85 F1 | 	sub	fp, #16
24bc8     01 14 06 F6 | 	mov	arg02, #1
24bcc     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_0947
24bd0     10 4E 05 F1 | 	add	fp, #16
24bd4     A7 1E C2 FA | 	rdbyte	local01, fp
24bd8     10 4E 85 F1 | 	sub	fp, #16
24bdc     80 1E CE F7 | 	test	local01, #128 wz
24be0     1C 00 90 AD |  if_e	jmp	#LR__3963
24be4     0C 4E 05 F1 | 	add	fp, #12
24be8     A7 1E C2 FA | 	rdbyte	local01, fp
24bec     01 1E 86 F1 | 	sub	local01, #1
24bf0     A7 1E 42 FC | 	wrbyte	local01, fp
24bf4     A7 1E CA FA | 	rdbyte	local01, fp wz
24bf8     0C 4E 85 F1 | 	sub	fp, #12
24bfc     BC FF 9F 5D |  if_ne	jmp	#LR__3962
24c00                 | LR__3963
24c00                 | ' 
24c00                 | ' 	return d;
24c00     10 4E 05 F1 | 	add	fp, #16
24c04     A7 FA C1 FA | 	rdbyte	result1, fp
24c08     10 4E 85 F1 | 	sub	fp, #16
24c0c                 | LR__3964
24c0c     A7 F0 03 F6 | 	mov	ptra, fp
24c10     B2 00 A0 FD | 	call	#popregs_
24c14                 | _fatfs_cc_send_cmd_0971_ret
24c14     2D 00 64 FD | 	ret
24c18                 | 
24c18                 | _fatfs_cc_disk_deinitialize
24c18     03 4A 05 F6 | 	mov	COUNT_, #3
24c1c     A8 00 A0 FD | 	call	#pushregs_
24c20     00 12 4E F2 | 	cmps	arg01, #0 wz
24c24     01 00 00 FF 
24c28     14 E4 05 F1 | 	add	objptr, ##532
24c2c     F2 12 02 FB | 	rdlong	arg01, objptr
24c30     04 E4 85 F1 | 	sub	objptr, #4
24c34     F2 1E 02 FB | 	rdlong	local01, objptr
24c38     08 E4 05 F1 | 	add	objptr, #8
24c3c     F2 20 02 FB | 	rdlong	local02, objptr
24c40     04 E4 05 F1 | 	add	objptr, #4
24c44     F2 22 02 FB | 	rdlong	local03, objptr
24c48     01 00 00 FF 
24c4c     1C E4 85 F1 | 	sub	objptr, ##540
24c50                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
24c50                 | '         return RES_NOTRDY;
24c50     03 FA 05 56 |  if_ne	mov	result1, #3
24c54     2C 00 90 5D |  if_ne	jmp	#LR__3970
24c58     50 12 62 FD | 	fltl	arg01
24c5c     09 01 08 FC | 	wrpin	#0, arg01
24c60     50 1E 62 FD | 	fltl	local01
24c64     0F 01 08 FC | 	wrpin	#0, local01
24c68     50 20 62 FD | 	fltl	local02
24c6c     10 01 08 FC | 	wrpin	#0, local02
24c70     50 22 62 FD | 	fltl	local03
24c74     11 01 08 FC | 	wrpin	#0, local03
24c78     0A 12 06 F6 | 	mov	arg01, #10
24c7c     6C 19 BF FD | 	call	#__system___waitms
24c80                 | '     }
24c80                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.3.0/flexprop/include/filesys/fatfs/sdmm.cc"
24c80                 | '     _pinclear(PIN_SS);
24c80                 | '     _pinclear(PIN_CLK);
24c80                 | '     _pinclear(PIN_DI);
24c80                 | '     _pinclear(PIN_DO);
24c80                 | ' 
24c80                 | '     _waitms(10);
24c80                 | ' 
24c80                 | '     return 0;
24c80     00 FA 05 F6 | 	mov	result1, #0
24c84                 | LR__3970
24c84     A7 F0 03 F6 | 	mov	ptra, fp
24c88     B2 00 A0 FD | 	call	#popregs_
24c8c                 | _fatfs_cc_disk_deinitialize_ret
24c8c     2D 00 64 FD | 	ret
24c90                 | 
24c90                 | _fatfs_cc_gettimeofday
24c90     04 4A 05 F6 | 	mov	COUNT_, #4
24c94     A8 00 A0 FD | 	call	#pushregs_
24c98     09 1F 02 F6 | 	mov	local01, arg01
24c9c     28 15 BF FD | 	call	#__system___getus
24ca0     FD 12 02 F6 | 	mov	arg01, result1
24ca4     02 00 00 FF 
24ca8     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
24cac     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
24cb0     09 FB 01 F6 | 	mov	result1, arg01
24cb4     10 FB 81 F1 | 	sub	result1, local02
24cb8     A1 07 00 FF 
24cbc     40 FA 15 FD | 	qdiv	result1, ##1000000
24cc0     02 00 00 FF 
24cc4     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
24cc8     18 20 62 FD | 	getqx	local02
24ccc     A1 07 00 FF 
24cd0     40 FA 15 FD | 	qdiv	result1, ##1000000
24cd4     00 20 0E F2 | 	cmp	local02, #0 wz
24cd8     19 22 62 FD | 	getqy	local03
24cdc     28 00 90 AD |  if_e	jmp	#LR__3980
24ce0     02 00 00 FF 
24ce4     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
24ce8     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
24cec     10 25 02 F1 | 	add	local04, local02
24cf0     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
24cf4     11 13 82 F1 | 	sub	arg01, local03
24cf8     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
24cfc     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
24d00     02 00 00 FF 
24d04     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
24d08                 | LR__3980
24d08     02 00 00 FF 
24d0c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
24d10     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
24d14     02 00 00 FF 
24d18     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
24d1c     0F 25 62 FC | 	wrlong	local04, local01
24d20     04 1E 06 F1 | 	add	local01, #4
24d24     0F 23 62 FC | 	wrlong	local03, local01
24d28                 | '         lastsec += secs;
24d28                 | '         lastus = now - leftover;
24d28                 | '     }
24d28                 | '     tv->tv_sec = lastsec;
24d28                 | '     tv->tv_usec = leftover;
24d28                 | '     return 0;
24d28     00 FA 05 F6 | 	mov	result1, #0
24d2c     A7 F0 03 F6 | 	mov	ptra, fp
24d30     B2 00 A0 FD | 	call	#popregs_
24d34                 | _fatfs_cc_gettimeofday_ret
24d34     2D 00 64 FD | 	ret
24d38                 | 
24d38                 | _fatfs_cc__is_leap_year
24d38     09 FB 51 F6 | 	abs	result1, arg01 wc
24d3c     03 FA 05 F5 | 	and	result1, #3
24d40     FD FA 89 F6 | 	negc	result1, result1 wz
24d44     38 00 90 5D |  if_ne	jmp	#LR__3991
24d48     09 FB 51 F6 | 	abs	result1, arg01 wc
24d4c     64 FA 15 FD | 	qdiv	result1, #100
24d50     19 FA 61 FD | 	getqy	result1
24d54     FD FA 89 F6 | 	negc	result1, result1 wz
24d58     1C 00 90 5D |  if_ne	jmp	#LR__3990
24d5c     09 FB 51 F6 | 	abs	result1, arg01 wc
24d60     90 FB 15 FD | 	qdiv	result1, #400
24d64                 | '       return (0 == y % 400);
24d64     00 FA 05 F6 | 	mov	result1, #0
24d68     19 00 62 FD | 	getqy	_var01
24d6c     00 01 8A F6 | 	negc	_var01, _var01 wz
24d70     01 FA 05 A6 |  if_e	mov	result1, #1
24d74     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
24d78                 | LR__3990
24d78                 | '     return 1;
24d78     01 FA 05 F6 | 	mov	result1, #1
24d7c     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
24d80                 | LR__3991
24d80                 | '   }
24d80                 | '   return 0;
24d80     00 FA 05 F6 | 	mov	result1, #0
24d84                 | _fatfs_cc__is_leap_year_ret
24d84     2D 00 64 FD | 	ret
24d88                 | 
24d88                 | _fatfs_cc___tzoffset
24d88     09 01 0A F6 | 	mov	_var01, arg01 wz
24d8c     FF FF FF FF 
24d90     0A FF 6B FC | 	wrlong	##-1, arg02
24d94     01 02 06 F6 | 	mov	_var02, #1
24d98     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
24d9c                 | '                 return 0;
24d9c     00 FA 05 A6 |  if_e	mov	result1, #0
24da0     94 02 90 AD |  if_e	jmp	#LR__4017
24da4     0A 01 68 FC | 	wrlong	#0, arg02
24da8     02 00 00 FF 
24dac     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
24db0     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
24db4                 | ' 
24db4                 | '        *hasdst = 0;
24db4                 | ' 
24db4                 | ' 	n = stdname;
24db4                 | '         while (*s && isalpha(*s)) {
24db4     02 00 00 FF 
24db8     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
24dbc     97 28 48 FB | 	callpa	#(@LR__4001-@LR__4000)>>2,fcache_load_ptr_
24dc0                 | LR__4000
24dc0     00 05 CA FA | 	rdbyte	_var03, _var01 wz
24dc4     48 00 90 AD |  if_e	jmp	#LR__4002
24dc8     00 13 C2 FA | 	rdbyte	arg01, _var01
24dcc                 | ' {
24dcc                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
24dcc     80 12 36 F3 | 	fle	arg01, #128 wc
24dd0                 | '     return __ctype[c];
24dd0     02 00 00 FF 
24dd4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
24dd8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24ddc     09 FB C1 FA | 	rdbyte	result1, arg01
24de0     02 00 00 FF 
24de4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
24de8     0C FA CD F7 | 	test	result1, #12 wz
24dec     20 00 90 AD |  if_e	jmp	#LR__4002
24df0     00 09 02 F6 | 	mov	_var05, _var01
24df4     00 0B 02 F6 | 	mov	_var06, _var01
24df8     01 0A 06 F1 | 	add	_var06, #1
24dfc     04 0D C2 FA | 	rdbyte	_var07, _var05
24e00     05 01 02 F6 | 	mov	_var01, _var06
24e04     03 0D 42 FC | 	wrbyte	_var07, _var04
24e08     01 06 06 F1 | 	add	_var04, #1
24e0c     B0 FF 9F FD | 	jmp	#LR__4000
24e10                 | LR__4001
24e10                 | LR__4002
24e10     03 01 48 FC | 	wrbyte	#0, _var04
24e14     00 0E 06 F6 | 	mov	_var08, #0
24e18     00 05 C2 FA | 	rdbyte	_var03, _var01
24e1c     2D 04 0E F2 | 	cmp	_var03, #45 wz
24e20     01 02 66 A6 |  if_e	neg	_var02, #1
24e24     01 00 06 A1 |  if_e	add	_var01, #1
24e28     97 28 48 FB | 	callpa	#(@LR__4004-@LR__4003)>>2,fcache_load_ptr_
24e2c                 | '                 sgn = -1;
24e2c                 | '                 s++;
24e2c                 | '         }
24e2c                 | '         while (isdigit(*s)) {
24e2c                 | LR__4003
24e2c     00 13 C2 FA | 	rdbyte	arg01, _var01
24e30                 | ' {
24e30                 | '   return  (__ctype_get(c) & 0x02 ) ;
24e30     80 12 36 F3 | 	fle	arg01, #128 wc
24e34                 | '     return __ctype[c];
24e34     02 00 00 FF 
24e38     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
24e3c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24e40     09 FB C1 FA | 	rdbyte	result1, arg01
24e44     02 00 00 FF 
24e48     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
24e4c     02 FA CD F7 | 	test	result1, #2 wz
24e50     28 00 90 AD |  if_e	jmp	#LR__4005
24e54     07 05 02 F6 | 	mov	_var03, _var08
24e58     02 04 66 F0 | 	shl	_var03, #2
24e5c     07 05 02 F1 | 	add	_var03, _var08
24e60     01 04 66 F0 | 	shl	_var03, #1
24e64     00 09 C2 FA | 	rdbyte	_var05, _var01
24e68     30 08 86 F1 | 	sub	_var05, #48
24e6c     04 05 02 F1 | 	add	_var03, _var05
24e70     02 0F 02 F6 | 	mov	_var08, _var03
24e74     01 00 06 F1 | 	add	_var01, #1
24e78     B0 FF 9F FD | 	jmp	#LR__4003
24e7c                 | LR__4004
24e7c                 | LR__4005
24e7c     07 00 00 FF 
24e80     10 0E 06 FD | 	qmul	_var08, ##3600
24e84     00 05 C2 FA | 	rdbyte	_var03, _var01
24e88     3A 04 0E F2 | 	cmp	_var03, #58 wz
24e8c     18 10 62 FD | 	getqx	_var09
24e90     70 00 90 5D |  if_ne	jmp	#LR__4009
24e94     00 0E 06 F6 | 	mov	_var08, #0
24e98     01 00 06 F1 | 	add	_var01, #1
24e9c     97 28 48 FB | 	callpa	#(@LR__4007-@LR__4006)>>2,fcache_load_ptr_
24ea0                 | '                 x = 0;
24ea0                 | '                 s++;
24ea0                 | '                 while (isdigit(*s)) {
24ea0                 | LR__4006
24ea0     00 13 C2 FA | 	rdbyte	arg01, _var01
24ea4                 | ' {
24ea4                 | '   return  (__ctype_get(c) & 0x02 ) ;
24ea4     80 12 36 F3 | 	fle	arg01, #128 wc
24ea8                 | '     return __ctype[c];
24ea8     02 00 00 FF 
24eac     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
24eb0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24eb4     09 FB C1 FA | 	rdbyte	result1, arg01
24eb8     02 00 00 FF 
24ebc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
24ec0     02 FA CD F7 | 	test	result1, #2 wz
24ec4     28 00 90 AD |  if_e	jmp	#LR__4008
24ec8     07 05 02 F6 | 	mov	_var03, _var08
24ecc     02 04 66 F0 | 	shl	_var03, #2
24ed0     07 05 02 F1 | 	add	_var03, _var08
24ed4     01 04 66 F0 | 	shl	_var03, #1
24ed8     00 09 C2 FA | 	rdbyte	_var05, _var01
24edc     30 08 86 F1 | 	sub	_var05, #48
24ee0     04 05 02 F1 | 	add	_var03, _var05
24ee4     02 0F 02 F6 | 	mov	_var08, _var03
24ee8     01 00 06 F1 | 	add	_var01, #1
24eec     B0 FF 9F FD | 	jmp	#LR__4006
24ef0                 | LR__4007
24ef0                 | LR__4008
24ef0     07 0D 02 F6 | 	mov	_var07, _var08
24ef4     04 0C 66 F0 | 	shl	_var07, #4
24ef8     07 0D 82 F1 | 	sub	_var07, _var08
24efc     02 0C 66 F0 | 	shl	_var07, #2
24f00     06 11 02 F1 | 	add	_var09, _var07
24f04                 | LR__4009
24f04     02 00 00 FF 
24f08     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
24f0c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
24f10     00 13 C2 FA | 	rdbyte	arg01, _var01
24f14                 | ' {
24f14                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
24f14     80 12 36 F3 | 	fle	arg01, #128 wc
24f18                 | '     return __ctype[c];
24f18     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
24f1c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24f20     09 FB C1 FA | 	rdbyte	result1, arg01
24f24     02 00 00 FF 
24f28     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
24f2c     0C FA CD F7 | 	test	result1, #12 wz
24f30     50 00 90 AD |  if_e	jmp	#LR__4012
24f34     0A 03 68 FC | 	wrlong	#1, arg02
24f38                 | '                 *hasdst = 1;
24f38                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
24f38                 | LR__4010
24f38     00 05 CA FA | 	rdbyte	_var03, _var01 wz
24f3c     44 00 90 AD |  if_e	jmp	#LR__4011
24f40     00 13 C2 FA | 	rdbyte	arg01, _var01
24f44                 | ' {
24f44                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
24f44     80 12 36 F3 | 	fle	arg01, #128 wc
24f48                 | '     return __ctype[c];
24f48     02 00 00 FF 
24f4c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
24f50     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
24f54     09 FB C1 FA | 	rdbyte	result1, arg01
24f58     02 00 00 FF 
24f5c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
24f60     0C FA CD F7 | 	test	result1, #12 wz
24f64     1C 00 90 AD |  if_e	jmp	#LR__4011
24f68     00 0B 02 F6 | 	mov	_var06, _var01
24f6c     01 0A 06 F1 | 	add	_var06, #1
24f70     00 0D C2 FA | 	rdbyte	_var07, _var01
24f74     05 01 02 F6 | 	mov	_var01, _var06
24f78     03 0D 42 FC | 	wrbyte	_var07, _var04
24f7c     01 06 06 F1 | 	add	_var04, #1
24f80     B4 FF 9F FD | 	jmp	#LR__4010
24f84                 | LR__4011
24f84                 | LR__4012
24f84     03 01 48 FC | 	wrbyte	#0, _var04
24f88     02 00 00 FF 
24f8c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
24f90     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
24f94     02 00 00 FF 
24f98     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
24f9c     20 00 90 AD |  if_e	jmp	#LR__4013
24fa0     02 00 00 FF 
24fa4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
24fa8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
24fac     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
24fb0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
24fb4     02 00 00 FF 
24fb8     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
24fbc     1C 00 90 FD | 	jmp	#LR__4014
24fc0                 | LR__4013
24fc0     02 00 00 FF 
24fc4     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
24fc8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
24fcc     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
24fd0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
24fd4     02 00 00 FF 
24fd8     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
24fdc                 | LR__4014
24fdc     02 00 00 FF 
24fe0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
24fe4     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
24fe8     02 00 00 FF 
24fec     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
24ff0     20 00 90 AD |  if_e	jmp	#LR__4015
24ff4     02 00 00 FF 
24ff8     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
24ffc     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
25000     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
25004     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
25008     02 00 00 FF 
2500c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
25010     1C 00 90 FD | 	jmp	#LR__4016
25014                 | LR__4015
25014     02 00 00 FF 
25018     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
2501c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
25020     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
25024     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
25028     02 00 00 FF 
2502c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
25030                 | LR__4016
25030     08 03 02 FD | 	qmul	_var02, _var09
25034                 | ' 		_tzname[1] = stdname;
25034                 | ' 
25034                 | '         return sgn * off;
25034     18 FA 61 FD | 	getqx	result1
25038                 | LR__4017
25038                 | _fatfs_cc___tzoffset_ret
25038     2D 00 64 FD | 	ret
2503c                 | 
2503c                 | _fatfs_cc___indst
2503c     10 12 06 F1 | 	add	arg01, #16
25040     09 01 02 FB | 	rdlong	_var01, arg01
25044     10 12 86 F1 | 	sub	arg01, #16
25048     02 00 0E F2 | 	cmp	_var01, #2 wz
2504c     30 00 90 5D |  if_ne	jmp	#LR__4020
25050     07 00 06 F6 | 	mov	_var01, #7
25054     18 12 06 F1 | 	add	arg01, #24
25058     09 03 02 FB | 	rdlong	_var02, arg01
2505c     01 01 02 F1 | 	add	_var01, _var02
25060     0C 12 86 F1 | 	sub	arg01, #12
25064     09 05 02 FB | 	rdlong	_var03, arg01
25068     02 01 82 F1 | 	sub	_var01, _var03
2506c     00 00 56 F2 | 	cmps	_var01, #0 wc
25070                 | '                         return 1;
25070     01 FA 05 C6 |  if_b	mov	result1, #1
25074     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
25078                 | '                 return 0;
25078     00 FA 05 F6 | 	mov	result1, #0
2507c     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
25080                 | LR__4020
25080     10 12 06 F1 | 	add	arg01, #16
25084     09 01 02 FB | 	rdlong	_var01, arg01
25088     10 12 86 F1 | 	sub	arg01, #16
2508c     0A 00 0E F2 | 	cmp	_var01, #10 wz
25090     28 00 90 5D |  if_ne	jmp	#LR__4021
25094     18 12 06 F1 | 	add	arg01, #24
25098     09 01 02 FB | 	rdlong	_var01, arg01
2509c     0C 12 86 F1 | 	sub	arg01, #12
250a0     09 07 02 FB | 	rdlong	_var04, arg01
250a4     03 01 82 F1 | 	sub	_var01, _var04
250a8     00 00 56 F2 | 	cmps	_var01, #0 wc
250ac                 | '                         return 0;
250ac     00 FA 05 C6 |  if_b	mov	result1, #0
250b0     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
250b4                 | '                 return 1;
250b4     01 FA 05 F6 | 	mov	result1, #1
250b8     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
250bc                 | LR__4021
250bc                 | '         }
250bc                 | ' 
250bc                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
250bc     00 00 06 F6 | 	mov	_var01, #0
250c0     10 12 06 F1 | 	add	arg01, #16
250c4     09 03 02 FB | 	rdlong	_var02, arg01
250c8     10 12 86 F1 | 	sub	arg01, #16
250cc     03 02 56 F2 | 	cmps	_var02, #3 wc
250d0     10 00 90 CD |  if_b	jmp	#LR__4022
250d4     10 12 06 F1 | 	add	arg01, #16
250d8     09 05 02 FB | 	rdlong	_var03, arg01
250dc     0A 04 56 F2 | 	cmps	_var03, #10 wc
250e0     01 00 06 C6 |  if_b	mov	_var01, #1
250e4                 | LR__4022
250e4     00 FB 01 F6 | 	mov	result1, _var01
250e8                 | _fatfs_cc___indst_ret
250e8     2D 00 64 FD | 	ret
250ec                 | 
250ec                 | ' 	
250ec                 | ' 	FUNCTION pfunc(c as integer) as integer
250ec                 | ___strs_cl_pfunc
250ec                 | ' 		if (i < 16) then
250ec     04 E4 05 F1 | 	add	objptr, #4
250f0     F2 FA 01 FB | 	rdlong	result1, objptr
250f4     04 E4 85 F1 | 	sub	objptr, #4
250f8     10 FA 55 F2 | 	cmps	result1, #16 wc
250fc     2C 00 90 3D |  if_ae	jmp	#LR__4030
25100     F2 FA 01 FB | 	rdlong	result1, objptr
25104     04 E4 05 F1 | 	add	objptr, #4
25108     F2 00 02 FB | 	rdlong	_var01, objptr
2510c     FD 00 02 F1 | 	add	_var01, result1
25110     00 13 42 FC | 	wrbyte	arg01, _var01
25114     F2 FA 01 FB | 	rdlong	result1, objptr
25118     01 FA 05 F1 | 	add	result1, #1
2511c     F2 FA 61 FC | 	wrlong	result1, objptr
25120     04 E4 85 F1 | 	sub	objptr, #4
25124                 | ' 			p(i) = c
25124                 | ' 			i = i+1
25124                 | ' 			return 1
25124     01 FA 05 F6 | 	mov	result1, #1
25128     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
2512c                 | LR__4030
2512c                 | ' 			return -1
2512c     01 FA 65 F6 | 	neg	result1, #1
25130                 | ___strs_cl_pfunc_ret
25130     2D 00 64 FD | 	ret
25134                 | 
25134                 | __struct__s_vfs_file_t_putchar
25134     04 4A 05 F6 | 	mov	COUNT_, #4
25138     A8 00 A0 FD | 	call	#pushregs_
2513c     1C E4 05 F1 | 	add	objptr, #28
25140     F2 1E 0A FB | 	rdlong	local01, objptr wz
25144     1C E4 85 F1 | 	sub	objptr, #28
25148     00 FA 05 A6 |  if_e	mov	result1, #0
2514c     48 00 90 AD |  if_e	jmp	#LR__4040
25150     1C E4 05 F1 | 	add	objptr, #28
25154     F2 20 02 FB | 	rdlong	local02, objptr
25158     10 23 02 F6 | 	mov	local03, local02
2515c     1C E4 85 F1 | 	sub	objptr, #28
25160     13 22 46 F7 | 	zerox	local03, #19
25164     14 20 46 F0 | 	shr	local02, #20
25168     02 20 66 F0 | 	shl	local02, #2
2516c     ED 20 02 F1 | 	add	local02, __methods__
25170     10 21 02 FB | 	rdlong	local02, local02
25174     F2 14 02 F6 | 	mov	arg02, objptr
25178     F2 24 02 F6 | 	mov	local04, objptr
2517c     11 E5 01 F6 | 	mov	objptr, local03
25180     2D 20 62 FD | 	call	local02
25184     12 E5 01 F6 | 	mov	objptr, local04
25188                 | '     return (i < 0) ? 0 : 1;
25188     00 FA 55 F2 | 	cmps	result1, #0 wc
2518c     00 1E 06 C6 |  if_b	mov	local01, #0
25190     01 1E 06 36 |  if_ae	mov	local01, #1
25194     0F FB 01 F6 | 	mov	result1, local01
25198                 | LR__4040
25198     A7 F0 03 F6 | 	mov	ptra, fp
2519c     B2 00 A0 FD | 	call	#popregs_
251a0                 | __struct__s_vfs_file_t_putchar_ret
251a0     2D 00 64 FD | 	ret
251a4                 | 
251a4                 | __struct__s_vfs_file_t_getchar
251a4     03 4A 05 F6 | 	mov	COUNT_, #3
251a8     A8 00 A0 FD | 	call	#pushregs_
251ac     20 E4 05 F1 | 	add	objptr, #32
251b0     F2 12 0A FB | 	rdlong	arg01, objptr wz
251b4     20 E4 85 F1 | 	sub	objptr, #32
251b8     01 FA 65 A6 |  if_e	neg	result1, #1
251bc     38 00 90 AD |  if_e	jmp	#LR__4050
251c0                 | '     return getcf(__this);
251c0     20 E4 05 F1 | 	add	objptr, #32
251c4     F2 1E 02 FB | 	rdlong	local01, objptr
251c8     0F 21 02 F6 | 	mov	local02, local01
251cc     20 E4 85 F1 | 	sub	objptr, #32
251d0     13 20 46 F7 | 	zerox	local02, #19
251d4     14 1E 46 F0 | 	shr	local01, #20
251d8     02 1E 66 F0 | 	shl	local01, #2
251dc     ED 1E 02 F1 | 	add	local01, __methods__
251e0     0F 1F 02 FB | 	rdlong	local01, local01
251e4     F2 12 02 F6 | 	mov	arg01, objptr
251e8     F2 22 02 F6 | 	mov	local03, objptr
251ec     10 E5 01 F6 | 	mov	objptr, local02
251f0     2D 1E 62 FD | 	call	local01
251f4     11 E5 01 F6 | 	mov	objptr, local03
251f8                 | LR__4050
251f8     A7 F0 03 F6 | 	mov	ptra, fp
251fc     B2 00 A0 FD | 	call	#popregs_
25200                 | __struct__s_vfs_file_t_getchar_ret
25200     2D 00 64 FD | 	ret
25204                 | 
25204                 | __struct___bas_wrap_sender_tx
25204     03 4A 05 F6 | 	mov	COUNT_, #3
25208     A8 00 A0 FD | 	call	#pushregs_
2520c     F2 1E 02 FB | 	rdlong	local01, objptr
25210     0F 21 02 F6 | 	mov	local02, local01
25214     13 1E 46 F7 | 	zerox	local01, #19
25218     14 20 46 F0 | 	shr	local02, #20
2521c     02 20 66 F0 | 	shl	local02, #2
25220     ED 20 02 F1 | 	add	local02, __methods__
25224     10 21 02 FB | 	rdlong	local02, local02
25228     F2 22 02 F6 | 	mov	local03, objptr
2522c     0F E5 01 F6 | 	mov	objptr, local01
25230     2D 20 62 FD | 	call	local02
25234     11 E5 01 F6 | 	mov	objptr, local03
25238     01 FA 05 F6 | 	mov	result1, #1
2523c     A7 F0 03 F6 | 	mov	ptra, fp
25240     B2 00 A0 FD | 	call	#popregs_
25244                 | __struct___bas_wrap_sender_tx_ret
25244     2D 00 64 FD | 	ret
25248                 | 
25248                 | __struct___bas_wrap_sender_rx
25248     03 4A 05 F6 | 	mov	COUNT_, #3
2524c     A8 00 A0 FD | 	call	#pushregs_
25250     04 E4 05 F1 | 	add	objptr, #4
25254     F2 1E 02 FB | 	rdlong	local01, objptr
25258     0F 21 02 F6 | 	mov	local02, local01
2525c     04 E4 85 F1 | 	sub	objptr, #4
25260     13 20 46 F7 | 	zerox	local02, #19
25264     14 1E 46 F0 | 	shr	local01, #20
25268     02 1E 66 F0 | 	shl	local01, #2
2526c     ED 1E 02 F1 | 	add	local01, __methods__
25270     0F 1F 02 FB | 	rdlong	local01, local01
25274     F2 22 02 F6 | 	mov	local03, objptr
25278     10 E5 01 F6 | 	mov	objptr, local02
2527c     2D 1E 62 FD | 	call	local01
25280     11 E5 01 F6 | 	mov	objptr, local03
25284     A7 F0 03 F6 | 	mov	ptra, fp
25288     B2 00 A0 FD | 	call	#popregs_
2528c                 | __struct___bas_wrap_sender_rx_ret
2528c     2D 00 64 FD | 	ret
25290                 | 
25290                 | __struct___bas_wrap_sender_close
25290     03 4A 05 F6 | 	mov	COUNT_, #3
25294     A8 00 A0 FD | 	call	#pushregs_
25298     08 E4 05 F1 | 	add	objptr, #8
2529c     F2 1E 02 FB | 	rdlong	local01, objptr
252a0     0F 21 02 F6 | 	mov	local02, local01
252a4     08 E4 85 F1 | 	sub	objptr, #8
252a8     13 20 46 F7 | 	zerox	local02, #19
252ac     14 1E 46 F0 | 	shr	local01, #20
252b0     02 1E 66 F0 | 	shl	local01, #2
252b4     ED 1E 02 F1 | 	add	local01, __methods__
252b8     0F 1F 02 FB | 	rdlong	local01, local01
252bc     F2 22 02 F6 | 	mov	local03, objptr
252c0     10 E5 01 F6 | 	mov	objptr, local02
252c4     2D 1E 62 FD | 	call	local01
252c8     11 E5 01 F6 | 	mov	objptr, local03
252cc     A7 F0 03 F6 | 	mov	ptra, fp
252d0     B2 00 A0 FD | 	call	#popregs_
252d4                 | __struct___bas_wrap_sender_close_ret
252d4     2D 00 64 FD | 	ret
252d8                 | 
252d8                 | LR__4060
252d8     2F          | 	byte	"/"
252d9     00          | 	byte	0
252da                 | LR__4061
252da     69 6E 66    | 	byte	"inf"
252dd     00          | 	byte	0
252de                 | LR__4062
252de     6E 61 6E    | 	byte	"nan"
252e1     00          | 	byte	0
252e2                 | LR__4063
252e2                 | 	byte	
252e2     00          | 	byte	0
252e3                 | LR__4064
252e3                 | 	byte	
252e3     00          | 	byte	0
252e4                 | LR__4065
252e4                 | 	byte	
252e4     00          | 	byte	0
252e5                 | LR__4066
252e5                 | 	byte	
252e5     00          | 	byte	0
252e6                 | LR__4067
252e6                 | 	byte	
252e6     00          | 	byte	0
252e7                 | LR__4068
252e7                 | 	byte	
252e7     00          | 	byte	0
252e8                 | LR__4069
252e8                 | 	byte	
252e8     00          | 	byte	0
252e9                 | LR__4070
252e9                 | 	byte	
252e9     00          | 	byte	0
252ea                 | LR__4071
252ea     00          | 	byte	0
252eb     00          | 	byte	0
252ec                 | LR__4072
252ec     00          | 	byte	0
252ed     00          | 	byte	0
252ee                 | LR__4073
252ee     00          | 	byte	0
252ef     00          | 	byte	0
252f0                 | LR__4074
252f0     20 21 21 21 
252f4     20 63 6F 72 
252f8     72 75 70 74 
252fc     65 64 20 68 
25300     65 61 70 3F 
25304     3F 3F 20 21 
25308     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
2530b     00          | 	byte	0
2530c                 | LR__4075
2530c     20 21 21 21 
25310     20 6F 75 74 
25314     20 6F 66 20 
25318     68 65 61 70 
2531c     20 6D 65 6D 
25320     6F 72 79 20 
25324     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
25328     00          | 	byte	0
25329                 | LR__4076
25329     20 21 21 21 
2532d     20 63 6F 72 
25331     72 75 70 74 
25335     65 64 20 68 
25339     65 61 70 20 
2533d     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
25341     00          | 	byte	0
25342                 | LR__4077
25342     00          | 	byte	0
25343     00          | 	byte	0
25344                 | LR__4078
25344     2E          | 	byte	"."
25345     00          | 	byte	0
25346                 | LR__4079
25346     00          | 	byte	0
25347     00          | 	byte	0
25348                 | LR__4080
25348     00          | 	byte	0
25349     00          | 	byte	0
2534a                 | LR__4081
2534a     00          | 	byte	0
2534b     00          | 	byte	0
2534c                 | LR__4082
2534c     2A 3A 3C 3E 
25350     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
25354     00          | 	byte	0
25355                 | LR__4083
25355     2B 2C 3B 3D 
25359     5B 5D       | 	byte	"+,;=[]"
2535b     00          | 	byte	0
2535c                 | LR__4084
2535c     46 41 54 33 
25360     32 20 20 20 | 	byte	"FAT32   "
25364     00          | 	byte	0
25365                 | LR__4085
25365     54 5A       | 	byte	"TZ"
25367     00          | 	byte	0
25368                 | LR__4086
25368     00          | 	byte	0
25369     00          | 	byte	0
2536a                 | LR__4087
2536a                 | 	byte	
2536a     00          | 	byte	0
2536b                 | LR__4088
2536b                 | 	byte	
2536b     00          | 	byte	0
2536c                 | LR__4089
2536c     22          | 	byte	34
2536d     00          | 	byte	0
2536e                 | LR__4090
2536e     22          | 	byte	34
2536f     00          | 	byte	0
25370                 | LR__4091
25370     3A          | 	byte	":"
25371     00          | 	byte	0
25372                 | LR__4092
25372                 | 	byte	
25372     00          | 	byte	0
25373                 | LR__4093
25373                 | 	byte	
25373     00          | 	byte	0
25374                 | LR__4094
25374                 | 	byte	
25374     00          | 	byte	0
25375                 | LR__4095
25375                 | 	byte	
25375     00          | 	byte	0
25376                 | LR__4096
25376                 | 	byte	
25376     00          | 	byte	0
25377                 | LR__4097
25377                 | 	byte	
25377     00          | 	byte	0
25378                 | LR__4098
25378                 | 	byte	
25378     00          | 	byte	0
25379                 | LR__4099
25379     22          | 	byte	34
2537a     00          | 	byte	0
2537b                 | LR__4100
2537b     22          | 	byte	34
2537c     00          | 	byte	0
2537d                 | LR__4101
2537d     22          | 	byte	34
2537e     00          | 	byte	0
2537f                 | LR__4102
2537f     22          | 	byte	34
25380     00          | 	byte	0
25381                 | LR__4103
25381     22          | 	byte	34
25382     00          | 	byte	0
25383                 | LR__4104
25383     3E          | 	byte	">"
25384     00          | 	byte	0
25385                 | LR__4105
25385     3E          | 	byte	">"
25386     00          | 	byte	0
25387                 | LR__4106
25387     2B          | 	byte	"+"
25388     00          | 	byte	0
25389                 | LR__4107
25389     2D          | 	byte	"-"
2538a     00          | 	byte	0
2538b                 | LR__4108
2538b     2A          | 	byte	"*"
2538c     00          | 	byte	0
2538d                 | LR__4109
2538d     2F          | 	byte	"/"
2538e     00          | 	byte	0
2538f                 | LR__4110
2538f     5E          | 	byte	"^"
25390     00          | 	byte	0
25391                 | LR__4111
25391     3D          | 	byte	"="
25392     00          | 	byte	0
25393                 | LR__4112
25393     2B          | 	byte	"+"
25394     00          | 	byte	0
25395                 | LR__4113
25395     2B          | 	byte	"+"
25396     00          | 	byte	0
25397                 | LR__4114
25397     2D          | 	byte	"-"
25398     00          | 	byte	0
25399                 | LR__4115
25399     2D          | 	byte	"-"
2539a     00          | 	byte	0
2539b                 | LR__4116
2539b     3C          | 	byte	"<"
2539c     00          | 	byte	0
2539d                 | LR__4117
2539d     3E          | 	byte	">"
2539e     00          | 	byte	0
2539f                 | LR__4118
2539f     22          | 	byte	34
253a0     00          | 	byte	0
253a1                 | LR__4119
253a1     22          | 	byte	34
253a2     00          | 	byte	0
253a3                 | LR__4120
253a3                 | 	byte	
253a3     00          | 	byte	0
253a4                 | LR__4121
253a4     6C 6F 61 64 | 	byte	"load"
253a8     00          | 	byte	0
253a9                 | LR__4122
253a9     73 61 76 65 | 	byte	"save"
253ad     00          | 	byte	0
253ae                 | LR__4123
253ae     62 72 75 6E | 	byte	"brun"
253b2     00          | 	byte	0
253b3                 | LR__4124
253b3     6D 6F 75 73 
253b7     65          | 	byte	"mouse"
253b8     00          | 	byte	0
253b9                 | LR__4125
253b9     63 75 72 73 
253bd     6F 72       | 	byte	"cursor"
253bf     00          | 	byte	0
253c0                 | LR__4126
253c0     63 6C 69 63 
253c4     6B          | 	byte	"click"
253c5     00          | 	byte	0
253c6                 | LR__4127
253c6     6F 6E       | 	byte	"on"
253c8     00          | 	byte	0
253c9                 | LR__4128
253c9     31          | 	byte	"1"
253ca     00          | 	byte	0
253cb                 | LR__4129
253cb     6F 66 66    | 	byte	"off"
253ce     00          | 	byte	0
253cf                 | LR__4130
253cf     30          | 	byte	"0"
253d0     00          | 	byte	0
253d1                 | LR__4131
253d1                 | 	byte	
253d1     00          | 	byte	0
253d2                 | LR__4132
253d2                 | 	byte	
253d2     00          | 	byte	0
253d3                 | LR__4133
253d3                 | 	byte	
253d3     00          | 	byte	0
253d4                 | LR__4134
253d4                 | 	byte	
253d4     00          | 	byte	0
253d5                 | LR__4135
253d5     20 55 73 65 
253d9     72 20 66 75 
253dd     6E 63 74 69 
253e1     6F 6E 73 20 
253e5     61 6E 64 20 
253e9     61 72 72 61 
253ed     79 73 20 6E 
253f1     6F 74 20 79 
253f5     65 74 20 69 
253f9     6D 70 6C 65 
253fd     6D 65 6E 74 
25401     65 64       | 	byte	" User functions and arrays not yet implemented"
25403     00          | 	byte	0
25404                 | LR__4136
25404                 | 	byte	
25404     00          | 	byte	0
25405                 | LR__4137
25405                 | 	byte	
25405     00          | 	byte	0
25406                 | LR__4138
25406     52 65 61 64 
2540a     79          | 	byte	"Ready"
2540b     00          | 	byte	0
2540c                 | LR__4139
2540c     2B          | 	byte	"+"
2540d     00          | 	byte	0
2540e                 | LR__4140
2540e     2D          | 	byte	"-"
2540f     00          | 	byte	0
25410                 | LR__4141
25410     6F 72       | 	byte	"or"
25412     00          | 	byte	0
25413                 | LR__4142
25413     78 6F 72    | 	byte	"xor"
25416     00          | 	byte	0
25417                 | LR__4143
25417     2A          | 	byte	"*"
25418     00          | 	byte	0
25419                 | LR__4144
25419     2F          | 	byte	"/"
2541a     00          | 	byte	0
2541b                 | LR__4145
2541b     61 6E 64    | 	byte	"and"
2541e     00          | 	byte	0
2541f                 | LR__4146
2541f     64 69 76    | 	byte	"div"
25422     00          | 	byte	0
25423                 | LR__4147
25423     6D 6F 64    | 	byte	"mod"
25426     00          | 	byte	0
25427                 | LR__4148
25427     73 68 6C    | 	byte	"shl"
2542a     00          | 	byte	0
2542b                 | LR__4149
2542b     73 68 72    | 	byte	"shr"
2542e     00          | 	byte	0
2542f                 | LR__4150
2542f     5E          | 	byte	"^"
25430     00          | 	byte	0
25431                 | LR__4151
25431     6E 6F 74    | 	byte	"not"
25434     00          | 	byte	0
25435                 | LR__4152
25435     40          | 	byte	"@"
25436     00          | 	byte	0
25437                 | LR__4153
25437     3D          | 	byte	"="
25438     00          | 	byte	0
25439                 | LR__4154
25439     3E 3D       | 	byte	">="
2543b     00          | 	byte	0
2543c                 | LR__4155
2543c     3C 3D       | 	byte	"<="
2543e     00          | 	byte	0
2543f                 | LR__4156
2543f     3C          | 	byte	"<"
25440     00          | 	byte	0
25441                 | LR__4157
25441     3E          | 	byte	">"
25442     00          | 	byte	0
25443                 | LR__4158
25443     3C 3E       | 	byte	"<>"
25445     00          | 	byte	0
25446                 | LR__4159
25446     2B 2B       | 	byte	"++"
25448     00          | 	byte	0
25449                 | LR__4160
25449     2D 2D       | 	byte	"--"
2544b     00          | 	byte	0
2544c                 | LR__4161
2544c     2B          | 	byte	"+"
2544d     00          | 	byte	0
2544e                 | LR__4162
2544e     2D          | 	byte	"-"
2544f     00          | 	byte	0
25450                 | LR__4163
25450     3D          | 	byte	"="
25451     00          | 	byte	0
25452                 | LR__4164
25452     2C          | 	byte	","
25453     00          | 	byte	0
25454                 | LR__4165
25454     2A          | 	byte	"*"
25455     00          | 	byte	0
25456                 | LR__4166
25456     2F          | 	byte	"/"
25457     00          | 	byte	0
25458                 | LR__4167
25458     3B          | 	byte	";"
25459     00          | 	byte	0
2545a                 | LR__4168
2545a     22          | 	byte	34
2545b     00          | 	byte	0
2545c                 | LR__4169
2545c     5E          | 	byte	"^"
2545d     00          | 	byte	0
2545e                 | LR__4170
2545e     29          | 	byte	")"
2545f     00          | 	byte	0
25460                 | LR__4171
25460     28          | 	byte	"("
25461     00          | 	byte	0
25462                 | LR__4172
25462     3A          | 	byte	":"
25463     00          | 	byte	0
25464                 | LR__4173
25464     20          | 	byte	" "
25465     00          | 	byte	0
25466                 | LR__4174
25466     3E          | 	byte	">"
25467     00          | 	byte	0
25468                 | LR__4175
25468     3C          | 	byte	"<"
25469     00          | 	byte	0
2546a                 | LR__4176
2546a     3D          | 	byte	"="
2546b     00          | 	byte	0
2546c                 | LR__4177
2546c     63 6C 73    | 	byte	"cls"
2546f     00          | 	byte	0
25470                 | LR__4178
25470     6E 65 77    | 	byte	"new"
25473     00          | 	byte	0
25474                 | LR__4179
25474     70 6C 6F 74 | 	byte	"plot"
25478     00          | 	byte	0
25479                 | LR__4180
25479     64 72 61 77 | 	byte	"draw"
2547d     00          | 	byte	0
2547e                 | LR__4181
2547e     70 72 69 6E 
25482     74          | 	byte	"print"
25483     00          | 	byte	0
25484                 | LR__4182
25484     63 69 72 63 
25488     6C 65       | 	byte	"circle"
2548a     00          | 	byte	0
2548b                 | LR__4183
2548b     66 63 69 72 
2548f     63 6C 65    | 	byte	"fcircle"
25492     00          | 	byte	0
25493                 | LR__4184
25493     62 6F 78    | 	byte	"box"
25496     00          | 	byte	0
25497                 | LR__4185
25497     66 72 61 6D 
2549b     65          | 	byte	"frame"
2549c     00          | 	byte	0
2549d                 | LR__4186
2549d     63 6F 6C 6F 
254a1     72          | 	byte	"color"
254a2     00          | 	byte	0
254a3                 | LR__4187
254a3     70 72 69 6E 
254a7     74          | 	byte	"print"
254a8     00          | 	byte	0
254a9                 | LR__4188
254a9     6C 69 73 74 | 	byte	"list"
254ad     00          | 	byte	0
254ae                 | LR__4189
254ae     72 75 6E    | 	byte	"run"
254b1     00          | 	byte	0
254b2                 | LR__4190
254b2     67 6F 74 6F | 	byte	"goto"
254b6     00          | 	byte	0
254b7                 | LR__4191
254b7     63 73 61 76 
254bb     65          | 	byte	"csave"
254bc     00          | 	byte	0
254bd                 | LR__4192
254bd     73 61 76 65 | 	byte	"save"
254c1     00          | 	byte	0
254c2                 | LR__4193
254c2     6C 6F 61 64 | 	byte	"load"
254c6     00          | 	byte	0
254c7                 | LR__4194
254c7     62 72 75 6E | 	byte	"brun"
254cb     00          | 	byte	0
254cc                 | LR__4195
254cc     70 69 6E 77 
254d0     72 69 74 65 | 	byte	"pinwrite"
254d4     00          | 	byte	0
254d5                 | LR__4196
254d5     77 61 69 74 
254d9     6D 73       | 	byte	"waitms"
254db     00          | 	byte	0
254dc                 | LR__4197
254dc     77 61 69 74 
254e0     76 62 6C    | 	byte	"waitvbl"
254e3     00          | 	byte	0
254e4                 | LR__4198
254e4     69 66       | 	byte	"if"
254e6     00          | 	byte	0
254e7                 | LR__4199
254e7     65 6C 73 65 | 	byte	"else"
254eb     00          | 	byte	0
254ec                 | LR__4200
254ec     74 68 65 6E | 	byte	"then"
254f0     00          | 	byte	0
254f1                 | LR__4201
254f1     62 65 65 70 | 	byte	"beep"
254f5     00          | 	byte	0
254f6                 | LR__4202
254f6     64 69 72    | 	byte	"dir"
254f9     00          | 	byte	0
254fa                 | LR__4203
254fa     66 6F 72    | 	byte	"for"
254fd     00          | 	byte	0
254fe                 | LR__4204
254fe     6E 65 78 74 | 	byte	"next"
25502     00          | 	byte	0
25503                 | LR__4205
25503     70 61 70 65 
25507     72          | 	byte	"paper"
25508     00          | 	byte	0
25509                 | LR__4206
25509     69 6E 6B    | 	byte	"ink"
2550c     00          | 	byte	0
2550d                 | LR__4207
2550d     66 6F 6E 74 | 	byte	"font"
25511     00          | 	byte	0
25512                 | LR__4208
25512     6D 6F 64 65 | 	byte	"mode"
25516     00          | 	byte	0
25517                 | LR__4209
25517     6D 6F 75 73 
2551b     65          | 	byte	"mouse"
2551c     00          | 	byte	0
2551d                 | LR__4210
2551d     63 75 72 73 
25521     6F 72       | 	byte	"cursor"
25523     00          | 	byte	0
25524                 | LR__4211
25524     63 6C 69 63 
25528     6B          | 	byte	"click"
25529     00          | 	byte	0
2552a                 | LR__4212
2552a     64 65 66 73 
2552e     70 72 69 74 
25532     65          | 	byte	"defsprite"
25533     00          | 	byte	0
25534                 | LR__4213
25534     73 70 72 69 
25538     74 65       | 	byte	"sprite"
2553a     00          | 	byte	0
2553b                 | LR__4214
2553b     77 61 69 74 
2553f     63 6C 6F 63 
25543     6B          | 	byte	"waitclock"
25544     00          | 	byte	0
25545                 | LR__4215
25545     66 69 6C 6C | 	byte	"fill"
25549     00          | 	byte	0
2554a                 | LR__4216
2554a     64 69 6D    | 	byte	"dim"
2554d     00          | 	byte	0
2554e                 | LR__4217
2554e     77 72 70 69 
25552     6E          | 	byte	"wrpin"
25553     00          | 	byte	0
25554                 | LR__4218
25554     77 78 70 69 
25558     6E          | 	byte	"wxpin"
25559     00          | 	byte	0
2555a                 | LR__4219
2555a     77 79 70 69 
2555e     6E          | 	byte	"wypin"
2555f     00          | 	byte	0
25560                 | LR__4220
25560     70 69 6E 66 
25564     6C 6F 61 74 | 	byte	"pinfloat"
25568     00          | 	byte	0
25569                 | LR__4221
25569     70 69 6E 6C 
2556d     6F          | 	byte	"pinlo"
2556e     00          | 	byte	0
2556f                 | LR__4222
2556f     70 69 6E 68 
25573     69          | 	byte	"pinhi"
25574     00          | 	byte	0
25575                 | LR__4223
25575     70 69 6E 73 
25579     74 61 72 74 | 	byte	"pinstart"
2557d     00          | 	byte	0
2557e                 | LR__4224
2557e     70 69 6E 74 
25582     6F 67 67 6C 
25586     65          | 	byte	"pintoggle"
25587     00          | 	byte	0
25588                 | LR__4225
25588     70 6F 73 69 
2558c     74 69 6F 6E | 	byte	"position"
25590     00          | 	byte	0
25591                 | LR__4226
25591     72 6E 64    | 	byte	"rnd"
25594     00          | 	byte	0
25595                 | LR__4227
25595     6D 6F 75 73 
25599     65 78       | 	byte	"mousex"
2559b     00          | 	byte	0
2559c                 | LR__4228
2559c     6D 6F 75 73 
255a0     65 79       | 	byte	"mousey"
255a2     00          | 	byte	0
255a3                 | LR__4229
255a3     6D 6F 75 73 
255a7     65 6B       | 	byte	"mousek"
255a9     00          | 	byte	0
255aa                 | LR__4230
255aa     6D 6F 75 73 
255ae     65 77       | 	byte	"mousew"
255b0     00          | 	byte	0
255b1                 | LR__4231
255b1     67 65 74 74 
255b5     69 6D 65    | 	byte	"gettime"
255b8     00          | 	byte	0
255b9                 | LR__4232
255b9     73 69 6E    | 	byte	"sin"
255bc     00          | 	byte	0
255bd                 | LR__4233
255bd     73 74 69 63 
255c1     6B          | 	byte	"stick"
255c2     00          | 	byte	0
255c3                 | LR__4234
255c3     73 74 72 69 
255c7     67          | 	byte	"strig"
255c8     00          | 	byte	0
255c9                 | LR__4235
255c9     67 65 74 70 
255cd     69 78 65 6C | 	byte	"getpixel"
255d1     00          | 	byte	0
255d2                 | LR__4236
255d2     72 64 70 69 
255d6     6E          | 	byte	"rdpin"
255d7     00          | 	byte	0
255d8                 | LR__4237
255d8     70 69 6E 72 
255dc     65 61 64    | 	byte	"pinread"
255df     00          | 	byte	0
255e0                 | LR__4238
255e0     72 71 70 69 
255e4     6E          | 	byte	"rqpin"
255e5     00          | 	byte	0
255e6                 | LR__4239
255e6     61          | 	byte	"a"
255e7     00          | 	byte	0
255e8                 | LR__4240
255e8     7A          | 	byte	"z"
255e9     00          | 	byte	0
255ea                 | LR__4241
255ea     5F          | 	byte	"_"
255eb     00          | 	byte	0
255ec                 | LR__4242
255ec     61          | 	byte	"a"
255ed     00          | 	byte	0
255ee                 | LR__4243
255ee     7A          | 	byte	"z"
255ef     00          | 	byte	0
255f0                 | LR__4244
255f0     30          | 	byte	"0"
255f1     00          | 	byte	0
255f2                 | LR__4245
255f2     39          | 	byte	"9"
255f3     00          | 	byte	0
255f4                 | LR__4246
255f4     5F          | 	byte	"_"
255f5     00          | 	byte	0
255f6                 | LR__4247
255f6     2E          | 	byte	"."
255f7     00          | 	byte	0
255f8                 | LR__4248
255f8     61          | 	byte	"a"
255f9     00          | 	byte	0
255fa                 | LR__4249
255fa     7A          | 	byte	"z"
255fb     00          | 	byte	0
255fc                 | LR__4250
255fc     30          | 	byte	"0"
255fd     00          | 	byte	0
255fe                 | LR__4251
255fe     39          | 	byte	"9"
255ff     00          | 	byte	0
25600                 | LR__4252
25600     5F          | 	byte	"_"
25601     00          | 	byte	0
25602                 | LR__4253
25602     24          | 	byte	"$"
25603     00          | 	byte	0
25604                 | LR__4254
25604     25          | 	byte	"%"
25605     00          | 	byte	0
25606                 | LR__4255
25606     21          | 	byte	"!"
25607     00          | 	byte	0
25608                 | LR__4256
25608     30          | 	byte	"0"
25609     00          | 	byte	0
2560a                 | LR__4257
2560a     39          | 	byte	"9"
2560b     00          | 	byte	0
2560c                 | LR__4258
2560c     2E          | 	byte	"."
2560d     00          | 	byte	0
2560e                 | LR__4259
2560e     24          | 	byte	"$"
2560f     00          | 	byte	0
25610                 | LR__4260
25610     25          | 	byte	"%"
25611     00          | 	byte	0
25612                 | LR__4261
25612     2D          | 	byte	"-"
25613     00          | 	byte	0
25614                 | LR__4262
25614     2E          | 	byte	"."
25615     00          | 	byte	0
25616                 | LR__4263
25616     30          | 	byte	"0"
25617     00          | 	byte	0
25618                 | LR__4264
25618     39          | 	byte	"9"
25619     00          | 	byte	0
2561a                 | LR__4265
2561a     5F          | 	byte	"_"
2561b     00          | 	byte	0
2561c                 | LR__4266
2561c     2E          | 	byte	"."
2561d     00          | 	byte	0
2561e                 | LR__4267
2561e     45          | 	byte	"E"
2561f     00          | 	byte	0
25620                 | LR__4268
25620     65          | 	byte	"e"
25621     00          | 	byte	0
25622                 | LR__4269
25622     2D          | 	byte	"-"
25623     00          | 	byte	0
25624                 | LR__4270
25624     2D          | 	byte	"-"
25625     00          | 	byte	0
25626                 | LR__4271
25626     65          | 	byte	"e"
25627     00          | 	byte	0
25628                 | LR__4272
25628     2E          | 	byte	"."
25629     00          | 	byte	0
2562a                 | LR__4273
2562a     45          | 	byte	"E"
2562b     00          | 	byte	0
2562c                 | LR__4274
2562c     65          | 	byte	"e"
2562d     00          | 	byte	0
2562e                 | LR__4275
2562e     30          | 	byte	"0"
2562f     00          | 	byte	0
25630                 | LR__4276
25630     39          | 	byte	"9"
25631     00          | 	byte	0
25632                 | LR__4277
25632     24          | 	byte	"$"
25633     00          | 	byte	0
25634                 | LR__4278
25634     25          | 	byte	"%"
25635     00          | 	byte	0
25636                 | LR__4279
25636     2D          | 	byte	"-"
25637     00          | 	byte	0
25638                 | LR__4280
25638     30          | 	byte	"0"
25639     00          | 	byte	0
2563a                 | LR__4281
2563a     39          | 	byte	"9"
2563b     00          | 	byte	0
2563c                 | LR__4282
2563c     5F          | 	byte	"_"
2563d     00          | 	byte	0
2563e                 | LR__4283
2563e     30          | 	byte	"0"
2563f     00          | 	byte	0
25640                 | LR__4284
25640     39          | 	byte	"9"
25641     00          | 	byte	0
25642                 | LR__4285
25642     5F          | 	byte	"_"
25643     00          | 	byte	0
25644                 | LR__4286
25644     22          | 	byte	34
25645     00          | 	byte	0
25646                 | LR__4287
25646     22          | 	byte	34
25647     00          | 	byte	0
25648                 | LR__4288
25648     28          | 	byte	"("
25649     00          | 	byte	0
2564a                 | LR__4289
2564a     61 73       | 	byte	"as"
2564c     00          | 	byte	0
2564d                 | LR__4290
2564d     61 73       | 	byte	"as"
2564f     00          | 	byte	0
25650                 | LR__4291
25650     2C          | 	byte	","
25651     00          | 	byte	0
25652                 | LR__4292
25652     29          | 	byte	")"
25653     00          | 	byte	0
25654                 | LR__4293
25654     29          | 	byte	")"
25655     00          | 	byte	0
25656                 | LR__4294
25656     61 73       | 	byte	"as"
25658     00          | 	byte	0
25659                 | LR__4295
25659     62 79 74 65 | 	byte	"byte"
2565d     00          | 	byte	0
2565e                 | LR__4296
2565e     75 62 79 74 
25662     65          | 	byte	"ubyte"
25663     00          | 	byte	0
25664                 | LR__4297
25664     73 68 6F 72 
25668     74          | 	byte	"short"
25669     00          | 	byte	0
2566a                 | LR__4298
2566a     75 73 68 6F 
2566e     72 74       | 	byte	"ushort"
25670     00          | 	byte	0
25671                 | LR__4299
25671     6C 6F 6E 67 | 	byte	"long"
25675     00          | 	byte	0
25676                 | LR__4300
25676     69 6E 74 65 
2567a     67 65 72    | 	byte	"integer"
2567d     00          | 	byte	0
2567e                 | LR__4301
2567e     75 6C 6F 6E 
25682     67          | 	byte	"ulong"
25683     00          | 	byte	0
25684                 | LR__4302
25684     69 6E 74 36 
25688     34          | 	byte	"int64"
25689     00          | 	byte	0
2568a                 | LR__4303
2568a     75 69 6E 74 
2568e     36 34       | 	byte	"uint64"
25690     00          | 	byte	0
25691                 | LR__4304
25691     73 69 6E 67 
25695     6C 65       | 	byte	"single"
25697     00          | 	byte	0
25698                 | LR__4305
25698     64 6F 75 62 
2569c     6C 65       | 	byte	"double"
2569e     00          | 	byte	0
2569f                 | LR__4306
2569f     73 74 72 69 
256a3     6E 67       | 	byte	"string"
256a5     00          | 	byte	0
256a6                 | LR__4307
256a6     74 6F       | 	byte	"to"
256a8     00          | 	byte	0
256a9                 | LR__4308
256a9     73 74 65 70 | 	byte	"step"
256ad     00          | 	byte	0
256ae                 | LR__4309
256ae     57 65 20 68 
256b2     61 76 65 20 
256b6     61 20 73 6C 
256ba     6F 77 20 67 
256be     6F 74 6F 2C 
256c2     20 74 6F 64 
256c6     6F 20 20    | 	byte	"We have a slow goto, todo  "
256c9     00          | 	byte	0
256ca                 | LR__4310
256ca     6E 6F 6E 61 
256ce     6D 65 2E 62 
256d2     61 73       | 	byte	"noname.bas"
256d4     00          | 	byte	0
256d5                 | LR__4311
256d5                 | 	byte	
256d5     00          | 	byte	0
256d6                 | LR__4312
256d6     6E 6F 6E 61 
256da     6D 65 2E 62 
256de     61 73       | 	byte	"noname.bas"
256e0     00          | 	byte	0
256e1                 | LR__4313
256e1     2F          | 	byte	"/"
256e2     00          | 	byte	0
256e3                 | LR__4314
256e3                 | 	byte	
256e3     00          | 	byte	0
256e4                 | LR__4315
256e4                 | 	byte	
256e4     00          | 	byte	0
256e5                 | LR__4316
256e5     6E 6F 6E 61 
256e9     6D 65 2E 62 
256ed     61 73       | 	byte	"noname.bas"
256ef     00          | 	byte	0
256f0                 | LR__4317
256f0     2F          | 	byte	"/"
256f1     00          | 	byte	0
256f2                 | LR__4318
256f2     53 79 73 74 
256f6     65 6D 20 65 
256fa     72 72 6F 72 
256fe     20          | 	byte	"System error "
256ff     00          | 	byte	0
25700                 | LR__4319
25700     3A 20       | 	byte	": "
25702     00          | 	byte	0
25703                 | LR__4320
25703     2F          | 	byte	"/"
25704     00          | 	byte	0
25705                 | LR__4321
25705     30          | 	byte	"0"
25706     00          | 	byte	0
25707                 | LR__4322
25707     39          | 	byte	"9"
25708     00          | 	byte	0
25709                 | LR__4323
25709                 | 	byte	
25709     00          | 	byte	0
2570a                 | LR__4324
2570a     53 74 6F 70 
2570e     70 65 64 20 
25712     61 74 20 6C 
25716     69 6E 65 20 | 	byte	"Stopped at line "
2571a     00          | 	byte	0
2571b                 | LR__4325
2571b     45 72 72 6F 
2571f     72 20       | 	byte	"Error "
25721     00          | 	byte	0
25722                 | LR__4326
25722     3A 20       | 	byte	": "
25724     00          | 	byte	0
25725                 | LR__4327
25725                 | 	byte	
25725     00          | 	byte	0
25726                 | LR__4328
25726     72 6E 64 3A 
2572a     20          | 	byte	"rnd: "
2572b     00          | 	byte	0
2572c                 | LR__4329
2572c     72 6E 64 3A 
25730     20          | 	byte	"rnd: "
25731     00          | 	byte	0
25732                 | LR__4330
25732     73 69 6E 3A 
25736     20          | 	byte	"sin: "
25737     00          | 	byte	0
25738                 | LR__4331
25738     73 69 6E 3A 
2573c     20          | 	byte	"sin: "
2573d     00          | 	byte	0
2573e                 | LR__4332
2573e     73 74 69 63 
25742     6B 3A 20    | 	byte	"stick: "
25745     00          | 	byte	0
25746                 | LR__4333
25746     73 74 72 69 
2574a     67 3A 20    | 	byte	"strig: "
2574d     00          | 	byte	0
2574e                 | LR__4334
2574e     67 65 74 70 
25752     69 78 65 6C 
25756     3A 20       | 	byte	"getpixel: "
25758     00          | 	byte	0
25759                 | LR__4335
25759                 | 	byte	
25759     00          | 	byte	0
2575a                 | LR__4336
2575a     2F 73 64 2F 
2575e     62 61 73    | 	byte	"/sd/bas"
25761     00          | 	byte	0
25762                 | LR__4337
25762     57 6F 72 6B 
25766     69 6E 67 20 
2576a     64 69 72 65 
2576e     63 74 6F 72 
25772     79 3A 20    | 	byte	"Working directory: "
25775     00          | 	byte	0
25776                 | LR__4338
25776     2A          | 	byte	"*"
25777     00          | 	byte	0
25778                 | LR__4339
25778                 | 	byte	
25778     00          | 	byte	0
25779                 | LR__4340
25779     5B 64 69 72 
2577d     5D 20       | 	byte	"[dir] "
2577f     00          | 	byte	0
25780                 | LR__4341
25780     2A          | 	byte	"*"
25781     00          | 	byte	0
25782                 | LR__4342
25782                 | 	byte	
25782     00          | 	byte	0
25783                 | LR__4343
25783     2D 2D 2D 2D 
25787     2D 6D 6F 72 
2578b     65 2C 20 70 
2578f     72 65 73 73 
25793     20 61 6E 79 
25797     20 6B 65 79 | 	byte	"-----more, press any key"
2579b     00          | 	byte	0
2579c                 | LR__4344
2579c     20 20 20 20 
      ...             
257b4     20 20 20 20 
257b8     20          | 	byte	"                             "
257b9     00          | 	byte	0
257ba                 | LR__4345
257ba     2F          | 	byte	"/"
257bb     00          | 	byte	0
257bc                 | LR__4346
257bc     2F 73 64 2F 
257c0     62 69 6E 2F | 	byte	"/sd/bin/"
257c4     00          | 	byte	0
257c5                 | LR__4347
257c5     53 79 73 74 
257c9     65 6D 20 65 
257cd     72 72 6F 72 
257d1     20          | 	byte	"System error "
257d2     00          | 	byte	0
257d3                 | LR__4348
257d3     3A 20       | 	byte	": "
257d5     00          | 	byte	0
257d6                 | LR__4349
257d6                 | 	byte	
257d6     00          | 	byte	0
257d7                 | LR__4350
257d7     45 78 70 65 
257db     63 74 65 64 
257df     20 6E 75 6D 
257e3     62 65 72 2C 
257e7     20 67 6F 74 
257eb     20 73 6F 6D 
257ef     65 74 68 69 
257f3     6E 67 20 65 
257f7     6C 73 65 2E | 	byte	"Expected number, got something else."
257fb     00          | 	byte	0
257fc                 | LR__4351
257fc     43 61 6E 6E 
25800     6F 74 20 61 
25804     64 64 20 61 
25808     20 6E 75 6D 
2580c     62 65 72 20 
25810     74 6F 20 61 
25814     20 73 74 72 
25818     69 6E 67 2E | 	byte	"Cannot add a number to a string."
2581c     00          | 	byte	0
2581d                 | LR__4352
2581d     43 61 6E 6E 
25821     6F 74 20 73 
25825     75 62 73 74 
25829     72 61 63 74 
2582d     20 73 74 72 
25831     69 6E 67 73 
25835     2E          | 	byte	"Cannot substract strings."
25836     00          | 	byte	0
25837                 | LR__4353
25837     55 6E 6B 6E 
2583b     6F 77 6E 20 
2583f     65 72 72 6F 
25843     72 20 77 68 
25847     69 6C 65 20 
2584b     61 64 64 69 
2584f     6E 67 2E    | 	byte	"Unknown error while adding."
25852     00          | 	byte	0
25853                 | LR__4354
25853     55 6E 6B 6E 
25857     6F 77 6E 20 
2585b     65 72 72 6F 
2585f     72 20 77 68 
25863     69 6C 65 20 
25867     73 75 62 73 
2586b     74 72 61 63 
2586f     74 69 6E 67 
25873     2E          | 	byte	"Unknown error while substracting."
25874     00          | 	byte	0
25875                 | LR__4355
25875     43 61 6E 6E 
25879     6F 74 20 64 
2587d     6F 20 6C 6F 
25881     67 69 63 20 
25885     6F 70 65 72 
25889     61 74 69 6F 
2588d     6E 20 6F 6E 
25891     20 73 74 72 
25895     69 6E 67 20 
25899     6F 72 20 66 
2589d     6C 6F 61 74 
258a1     2E          | 	byte	"Cannot do logic operation on string or float."
258a2     00          | 	byte	0
258a3                 | LR__4356
258a3     55 6E 6B 6E 
258a7     6F 77 6E 20 
258ab     65 72 72 6F 
258af     72 20 77 68 
258b3     69 6C 65 20 
258b7     64 6F 69 6E 
258bb     67 20 6C 6F 
258bf     67 69 63 20 
258c3     6F 70 65 72 
258c7     61 74 69 6F 
258cb     6E 2E       | 	byte	"Unknown error while doing logic operation."
258cd     00          | 	byte	0
258ce                 | LR__4357
258ce     43 61 6E 6E 
258d2     6F 74 20 6D 
258d6     75 6C 74 69 
258da     70 6C 79 20 
258de     73 74 72 69 
258e2     6E 67 73 2E | 	byte	"Cannot multiply strings."
258e6     00          | 	byte	0
258e7                 | LR__4358
258e7     55 6E 6B 6E 
258eb     6F 77 6E 20 
258ef     65 72 72 6F 
258f3     72 20 77 68 
258f7     69 6C 65 20 
258fb     6D 75 6C 74 
258ff     69 70 6C 79 
25903     69 6E 67 2E | 	byte	"Unknown error while multiplying."
25907     00          | 	byte	0
25908                 | LR__4359
25908     43 61 6E 6E 
2590c     6F 74 20 64 
25910     69 76 69 64 
25914     65 20 73 74 
25918     72 69 6E 67 
2591c     73 2E       | 	byte	"Cannot divide strings."
2591e     00          | 	byte	0
2591f                 | LR__4360
2591f     55 6E 6B 6E 
25923     6F 77 6E 20 
25927     65 72 72 6F 
2592b     72 20 77 68 
2592f     69 6C 65 20 
25933     64 69 76 69 
25937     64 69 6E 67 
2593b     2E          | 	byte	"Unknown error while dividing."
2593c     00          | 	byte	0
2593d                 | LR__4361
2593d     43 61 6E 6E 
25941     6F 74 20 63 
25945     6F 6D 70 75 
25949     74 65 20 61 
2594d     20 70 6F 77 
25951     65 72 20 6F 
25955     66 20 61 20 
25959     73 74 72 69 
2595d     6E 67 2E    | 	byte	"Cannot compute a power of a string."
25960     00          | 	byte	0
25961                 | LR__4362
25961     55 6E 6B 6E 
25965     6F 77 6E 20 
25969     65 72 72 6F 
2596d     72 20 77 68 
25971     69 6C 65 20 
25975     63 6F 6D 70 
25979     75 74 69 6E 
2597d     67 20 61 20 
25981     70 6F 77 65 
25985     72 2E       | 	byte	"Unknown error while computing a power."
25987     00          | 	byte	0
25988                 | LR__4363
25988     52 69 67 68 
2598c     74 20 70 61 
25990     72 65 6E 74 
25994     68 65 73 69 
25998     73 20 65 78 
2599c     70 65 63 74 
259a0     65 64 2E    | 	byte	"Right parenthesis expected."
259a3     00          | 	byte	0
259a4                 | LR__4364
259a4     45 78 70 65 
259a8     63 74 65 64 
259ac     20 73 74 72 
259b0     69 6E 67 2E | 	byte	"Expected string."
259b4     00          | 	byte	0
259b5                 | LR__4365
259b5     45 78 70 65 
259b9     63 74 65 64 
259bd     20 66 6C 6F 
259c1     61 74 2E    | 	byte	"Expected float."
259c4     00          | 	byte	0
259c5                 | LR__4366
259c5     45 78 70 65 
259c9     63 74 65 64 
259cd     20 75 6E 73 
259d1     69 67 6E 65 
259d5     64 20 69 6E 
259d9     74 65 67 65 
259dd     72 2E       | 	byte	"Expected unsigned integer."
259df     00          | 	byte	0
259e0                 | LR__4367
259e0     45 78 70 65 
259e4     63 74 65 64 
259e8     20 69 6E 74 
259ec     65 67 65 72 
259f0     2E          | 	byte	"Expected integer."
259f1     00          | 	byte	0
259f2                 | LR__4368
259f2     4E 6F 20 6D 
259f6     6F 72 65 20 
259fa     76 61 72 69 
259fe     61 62 6C 65 
25a02     20 73 6C 6F 
25a06     74 73 2E    | 	byte	"No more variable slots."
25a09     00          | 	byte	0
25a0a                 | LR__4369
25a0a     56 61 72 69 
25a0e     61 62 6C 65 
25a12     20 6E 6F 74 
25a16     20 66 6F 75 
25a1a     6E 64 2E    | 	byte	"Variable not found."
25a1d     00          | 	byte	0
25a1e                 | LR__4370
25a1e     43 6F 6D 6D 
25a22     61 20 65 78 
25a26     70 65 63 74 
25a2a     65 64 2E    | 	byte	"Comma expected."
25a2d     00          | 	byte	0
25a2e                 | LR__4371
25a2e     43 6F 6D 6D 
25a32     61 20 6F 72 
25a36     20 73 65 6D 
25a3a     69 63 6F 6C 
25a3e     6F 6E 20 65 
25a42     78 70 65 63 
25a46     74 65 64 2E | 	byte	"Comma or semicolon expected."
25a4a     00          | 	byte	0
25a4b                 | LR__4372
25a4b     55 6E 6B 6E 
25a4f     6F 77 6E 20 
25a53     63 6F 6D 6D 
25a57     61 6E 64 2E | 	byte	"Unknown command."
25a5b     00          | 	byte	0
25a5c                 | LR__4373
25a5c     53 74 61 63 
25a60     6B 20 75 6E 
25a64     64 65 72 66 
25a68     6C 6F 77 2E | 	byte	"Stack underflow."
25a6c     00          | 	byte	0
25a6d                 | LR__4374
25a6d     43 61 6E 6E 
25a71     6F 74 20 65 
25a75     78 65 63 75 
25a79     74 65 20 67 
25a7d     6F 74 6F 20 
25a81     69 6E 20 74 
25a85     68 65 20 69 
25a89     6D 6D 65 64 
25a8d     69 61 74 65 
25a91     20 6D 6F 64 
25a95     65 2E       | 	byte	"Cannot execute goto in the immediate mode."
25a97     00          | 	byte	0
25a98                 | LR__4375
25a98     43 61 6E 6E 
25a9c     6F 74 20 6C 
25aa0     6F 61 64 20 
25aa4     66 72 6F 6D 
25aa8     20 74 68 69 
25aac     73 20 66 69 
25ab0     6C 65 2E    | 	byte	"Cannot load from this file."
25ab3     00          | 	byte	0
25ab4                 | LR__4376
25ab4     54 68 65 20 
25ab8     70 72 6F 67 
25abc     72 61 6D 20 
25ac0     69 73 20 65 
25ac4     6D 70 74 79 
25ac8     2E          | 	byte	"The program is empty."
25ac9     00          | 	byte	0
25aca                 | LR__4377
25aca     49 66 20 61 
25ace     66 74 65 72 
25ad2     20 69 66 2E | 	byte	"If after if."
25ad6     00          | 	byte	0
25ad7                 | LR__4378
25ad7     45 6D 70 74 
25adb     79 20 65 78 
25adf     70 72 65 73 
25ae3     73 69 6F 6E 
25ae7     2E          | 	byte	"Empty expression."
25ae8     00          | 	byte	0
25ae9                 | LR__4379
25ae9     53 74 72 69 
25aed     6E 67 20 65 
25af1     78 70 65 63 
25af5     74 65 64 2E | 	byte	"String expected."
25af9     00          | 	byte	0
25afa                 | LR__4380
25afa     49 6E 74 65 
25afe     72 70 72 65 
25b02     74 65 72 20 
25b06     69 6E 74 65 
25b0a     72 6E 61 6C 
25b0e     20 65 72 72 
25b12     6F 72 2E    | 	byte	"Interpreter internal error."
25b15     00          | 	byte	0
25b16                 | LR__4381
25b16     45 78 70 65 
25b1a     63 74 65 64 
25b1e     20 61 73 73 
25b22     69 67 6E 2E | 	byte	"Expected assign."
25b26     00          | 	byte	0
25b27                 | LR__4382
25b27     45 78 70 65 
25b2b     63 74 65 64 
25b2f     20 27 74 6F 
25b33     27 2E       | 	byte	"Expected 'to'."
25b35     00          | 	byte	0
25b36                 | LR__4383
25b36     45 78 70 65 
25b3a     63 74 65 64 
25b3e     20 69 6E 74 
25b42     65 67 65 72 
25b46     20 76 61 72 
25b4a     69 61 62 6C 
25b4e     65 2E       | 	byte	"Expected integer variable."
25b50     00          | 	byte	0
25b51                 | LR__4384
25b51     55 6E 69 6E 
25b55     69 74 69 61 
25b59     6C 69 7A 65 
25b5d     64 20 76 61 
25b61     72 69 61 62 
25b65     6C 65 20 69 
25b69     6E 20 27 6E 
25b6d     65 78 74 27 
25b71     2C 20 75 73 
25b75     65 20 27 66 
25b79     6F 72 27 20 
25b7d     62 65 66 6F 
25b81     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
25b84     00          | 	byte	0
25b85                 | LR__4385
25b85     4E 6F 20 6D 
25b89     6F 72 65 20 
25b8d     73 6C 6F 74 
25b91     73 20 66 6F 
25b95     72 20 27 66 
25b99     6F 72 27 2E | 	byte	"No more slots for 'for'."
25b9d     00          | 	byte	0
25b9e                 | LR__4386
25b9e     27 4E 65 78 
25ba2     74 27 20 64 
25ba6     6F 65 73 6E 
25baa     27 74 20 6D 
25bae     61 74 63 68 
25bb2     20 27 66 6F 
25bb6     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
25bb9     00          | 	byte	0
25bba                 | LR__4387
25bba     27 47 6F 74 
25bbe     6F 27 20 74 
25bc2     61 72 67 65 
25bc6     74 20 6C 69 
25bca     6E 65 20 6E 
25bce     6F 74 20 66 
25bd2     6F 75 6E 64 
25bd6     2E          | 	byte	"'Goto' target line not found."
25bd7     00          | 	byte	0
25bd8                 | LR__4388
25bd8     42 61 64 20 
25bdc     6E 75 6D 62 
25be0     65 72 20 6F 
25be4     66 20 70 61 
25be8     72 61 6D 65 
25bec     74 65 72 73 | 	byte	"Bad number of parameters"
25bf0     00          | 	byte	0
25bf1                 | LR__4389
25bf1     46 75 6E 63 
25bf5     74 69 6F 6E 
25bf9     20 75 6E 64 
25bfd     65 66 69 6E 
25c01     65 64 20 66 
25c05     6F 72 20 73 
25c09     74 72 69 6E 
25c0d     67 73       | 	byte	"Function undefined for strings"
25c0f     00          | 	byte	0
25c10                 | LR__4390
25c10     42 61 64 20 
25c14     70 61 72 61 
25c18     6D 65 74 65 
25c1c     72 2E       | 	byte	"Bad parameter."
25c1e     00          | 	byte	0
25c1f                 | LR__4391
25c1f     43 61 6E 6E 
25c23     6F 74 20 64 
25c27     65 63 6C 61 
25c2b     72 65 20 61 
25c2f     6E 20 61 72 
25c33     72 61 79 3A 
25c37     20 74 68 65 
25c3b     20 76 61 72 
25c3f     69 61 62 6C 
25c43     65 20 65 78 
25c47     69 73 74 73 
25c4b     2E          | 	byte	"Cannot declare an array: the variable exists."
25c4c     00          | 	byte	0
25c4d                 | LR__4392
25c4d     45 78 70 65 
25c51     63 74 65 64 
25c55     20 27 28 27 
25c59     2E          | 	byte	"Expected '('."
25c5a     00          | 	byte	0
25c5b                 | LR__4393
25c5b     45 78 70 65 
25c5f     63 74 65 64 
25c63     20 27 29 27 
25c67     20 6F 72 20 
25c6b     27 2C 27 2E | 	byte	"Expected ')' or ','."
25c6f     00          | 	byte	0
25c70                 | LR__4394
25c70     4E 6F 20 6D 
25c74     6F 72 65 20 
25c78     74 68 61 6E 
25c7c     20 33 20 64 
25c80     69 6D 65 6E 
25c84     73 69 6F 6E 
25c88     73 20 73 75 
25c8c     70 70 6F 72 
25c90     74 65 64    | 	byte	"No more than 3 dimensions supported"
25c93     00          | 	byte	0
25c94                 | LR__4395
25c94     56 61 72 69 
25c98     61 62 6C 65 
25c9c     20 6E 61 6D 
25ca0     65 20 65 78 
25ca4     70 65 63 74 
25ca8     65 64       | 	byte	"Variable name expected"
25caa     00          | 	byte	0
25cab                 | LR__4396
25cab     54 79 70 65 
25caf     20 6E 61 6D 
25cb3     65 20 65 78 
25cb7     70 65 63 74 
25cbb     65 64       | 	byte	"Type name expected"
25cbd     00          | 	byte	0
25cbe                 | LR__4397
25cbe     54 79 70 65 
25cc2     20 6E 6F 74 
25cc6     20 73 75 70 
25cca     70 6F 72 74 
25cce     65 64 20 79 
25cd2     65 74       | 	byte	"Type not supported yet"
25cd4     00          | 	byte	0
25cd5                 | LR__4398
25cd5     45 72 72 6F 
25cd9     72 20       | 	byte	"Error "
25cdb     00          | 	byte	0
25cdc                 | LR__4399
25cdc     3A 20       | 	byte	": "
25cde     00          | 	byte	0
25cdf                 | LR__4400
25cdf     2F 73 64    | 	byte	"/sd"
25ce2     00          | 	byte	0
25ce3                 | LR__4401
25ce3     2F 73 64 2F 
25ce7     62 61 73    | 	byte	"/sd/bas"
25cea     00          | 	byte	0
25ceb                 | LR__4402
25ceb     2F 73 64 2F 
25cef     62 61 73    | 	byte	"/sd/bas"
25cf2     00          | 	byte	0
25cf3                 | LR__4403
25cf3     20 42 41 53 
25cf7     49 43 20 62 
25cfb     79 74 65 73 
25cff     20 66 72 65 
25d03     65          | 	byte	" BASIC bytes free"
25d04     00          | 	byte	0
25d05                 | LR__4404
25d05     52 65 61 64 
25d09     79          | 	byte	"Ready"
25d0a     00          | 	byte	0
25d0b                 | LR__4405
25d0b     20          | 	byte	" "
25d0c     00          | 	byte	0
25d0d                 | LR__4406
25d0d     20          | 	byte	" "
25d0e     00          | 	byte	0
25d0f                 | LR__4407
25d0f                 | 	byte	
25d0f     00          | 	byte	0
25d10                 | LR__4408
25d10                 | 	byte	
25d10     00          | 	byte	0
25d11     00 00 00    | 	alignl
25d14                 | _dat_
25d14     00 00 00 00 
25d18     00 00 00 00 
25d1c     00 00 00 00 
25d20     00 00 00 00 | 	byte	$00[16]
25d24     61 41 17 0E 
25d28     62 42 00 00 
25d2c     63 43 19 10 
25d30     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
25d34     65 45 18 0F 
25d38     66 46 00 00 
25d3c     67 47 00 00 
25d40     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
25d44     69 49 00 00 
25d48     6A 4A 00 00 
25d4c     6B 4B 00 00 
25d50     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
25d54     6D 4D 00 00 
25d58     6E 4E 1A 11 
25d5c     6F 4F 1E 15 
25d60     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
25d64     71 51 00 00 
25d68     72 52 00 00 
25d6c     73 53 1B 12 
25d70     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
25d74     75 55 00 00 
25d78     76 56 00 00 
25d7c     77 57 00 00 
25d80     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
25d84     79 59 00 00 
25d88     7A 5A 1D 14 
25d8c     31 21 04 00 
25d90     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
25d94     33 23 06 00 
25d98     34 24 07 00 
25d9c     35 25 08 00 
25da0     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
25da4     37 26 0A 00 
25da8     38 2A 0B 00 
25dac     39 28 0C 00 
25db0     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
25db4     8D 8D 00 00 
25db8     9B 9B 00 00 
25dbc     88 88 00 00 
25dc0     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
25dc4     20 20 00 00 
25dc8     2D 5F 00 00 
25dcc     3D 2B 00 00 
25dd0     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
25dd4     5D 7D 00 00 
25dd8     5C 7C 00 00 
25ddc     23 7E 00 00 
25de0     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
25de4     27 22 00 00 
25de8     60 7E 03 00 
25dec     2C 3C 00 00 
25df0     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
25df4     2F 3F 00 00 
25df8     B9 B9 00 00 
25dfc     BA 00 00 00 
25e00     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
25e04     BC 00 00 00 
25e08     BD 00 00 00 
25e0c     BE 00 00 00 
25e10     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
25e14     C0 00 00 00 
25e18     C1 00 00 00 
25e1c     C2 00 00 00 
25e20     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
25e24     C4 00 00 00 
25e28     C5 00 00 00 
25e2c     C6 00 00 00 
25e30     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
25e34     C8 00 00 00 
25e38     C9 00 00 00 
25e3c     CA 00 00 00 
25e40     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
25e44     7F 7F 00 00 
25e48     CC 00 00 00 
25e4c     CD 00 00 00 
25e50     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
25e54     CF 00 00 00 
25e58     D0 00 00 00 
25e5c     D1 00 00 00 
25e60     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
25e64     2F 2F 00 00 
25e68     2A 2A 00 00 
25e6c     2D 2D 00 00 
25e70     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
25e74     8D 8D 00 00 
25e78     31 31 00 00 
25e7c     32 32 00 00 
25e80     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
25e84     34 34 00 00 
25e88     35 35 00 00 
25e8c     36 36 00 00 
25e90     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
25e94     38 38 00 00 
25e98     39 39 00 00 
25e9c     30 30 00 00 
25ea0     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
25ea4     5C 7C 00 00 
25ea8     00 00 00 00 
25eac     00 00 00 00 
25eb0     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
25eb4     00 00 00 00 
      ...             
25f0c     00 00 00 00 
25f10     00 00 00 00 | 	byte	$00[96]
25f14     2B 00 A6 F2 
25f18     24 A7 09 80 
25f1c     5B 88 4D 89 
25f20     80 88 A5 88 | atari_spl file "atari.spl"
25f24     6D 88 B8 88 
25f28     80 88 CB 88 
25f2c     92 88 A5 88 
25f30     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
25f34     A5 88 CA 88 
25f38     A6 88 DD 88 
25f3c     B8 88 AB 89 
25f40     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
25f44     C8 AD C6 F1 
25f48     91 06 B6 FF 
25f4c     13 00 4A 00 
25f50     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
25f54     5D 00 5E 00 
25f58     5D 00 5E 00 
25f5c     5E 00 5D 00 
25f60     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
25f64     38 00 83 00 
25f68     25 00 83 00 
25f6c     C3 FE D1 04 
25f70     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
25f74     48 88 38 85 
25f78     41 8A CB 88 
25f7c     28 89 B8 88 
25f80     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
25f84     15 89 03 89 
25f88     02 89 15 89 
25f8c     16 89 15 89 
25f90     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
25f94     15 89 3A 89 
25f98     72 89 E3 89 
25f9c     52 83 AD 97 
25fa0     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
25fa4     0C 02 B6 FF 
25fa8     E1 00 A8 00 
25fac     F3 00 A8 00 
25fb0     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
25fb4     CE 00 CD 00 
25fb8     CD 00 BA 00 
25fbc     E1 00 BB 00 
25fc0     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
25fc4     DF 00 C9 FF 
25fc8     E6 01 B6 06 
25fcc     EE DD 8D 98 
25fd0     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
25fd4     97 89 73 89 
25fd8     3B 89 60 89 
25fdc     60 89 60 89 
25fe0     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
25fe4     73 89 72 89 
25fe8     85 89 73 89 
25fec     AA 89 60 89 
25ff0     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
25ff4     E8 8A 18 86 
25ff8     92 88 A5 C2 
25ffc     E0 00 C3 05 
26000     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
26004     F2 00 64 01 
26008     06 01 3E 01 
2600c     2B 01 2B 01 
26010     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
26014     2B 01 2A 01 
26018     2B 01 2B 01 
2601c     2B 01 18 01 
26020     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
26024     39 07 61 F3 
26028     C0 AF 37 85 
2602c     0F 88 8B 8A 
26030     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
26034     AB 89 D0 89 
26038     AB 89 D0 89 
2603c     D0 89 CF 89 
26040     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
26044     D0 89 F5 89 
26048     BD 89 08 8A 
2604c     CF 89 E8 8A 
26050     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
26054     53 B3 0D F8 
26058     F4 07 38 00 
2605c     63 01 63 01 
26060     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
26064     88 01 88 01 
26068     76 01 88 01 
2606c     88 01 89 01 
26070     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
26074     75 01 AE 01 
26078     76 01 88 01 
2607c     4A 00 46 06 
26080     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
26084     08 8A 9A 86 
26088     33 8B 08 8A 
2608c     2D 8A F5 89 
26090     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
26094     2D 8A 2D 8A 
26098     2E 8A 1B 8A 
2609c     40 8A 2D 8A 
260a0     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
260a4     2E 8A 79 8A 
260a8     66 8A C8 8B 
260ac     72 82 2B 97 
260b0     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
260b4     1D 02 05 01 
260b8     F8 01 C0 01 
260bc     0B 02 C0 01 
260c0     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
260c4     F9 01 D3 01 
260c8     F8 01 D3 01 
260cc     F8 01 D2 01 
260d0     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
260d4     E6 01 2B 01 
260d8     8E 02 5F 07 
260dc     F7 E2 ED 9C 
260e0     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
260e4     E8 8A 78 8A 
260e8     78 8A 65 8A 
260ec     8B 8A 78 8A 
260f0     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
260f4     8B 8A 9D 8A 
260f8     9D 8A 8B 8A 
260fc     C2 8A 78 8A 
26100     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
26104     70 8C 18 86 
26108     8B 8A 23 C9 
2610c     CB 03 C4 05 
26110     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
26114     0B 02 7B 02 
26118     1E 02 55 02 
2611c     30 02 43 02 
26120     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
26124     43 02 44 02 
26128     43 02 30 02 
2612c     68 02 31 02 
26130     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
26134     07 08 3F F7 
26138     73 B2 13 85 
2613c     15 89 ED 8B 
26140     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
26144     B0 8A FB 8A 
26148     D5 8A FA 8A 
2614c     E8 8A FB 8A 
26150     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
26154     E8 8A 21 8B 
26158     E7 8A 33 8B 
2615c     E8 8A 26 8C 
26160     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
26164     8D B0 27 F6 
26168     9C 08 AD 01 
2616c     7B 02 8D 02 
26170     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
26174     A1 02 A0 02 
26178     A1 02 A0 02 
2617c     A0 02 A0 02 
26180     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
26184     7B 02 D8 02 
26188     7B 02 C6 02 
2618c     3E 01 C3 05 
26190     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
26194     00 8C 2A 86 
26198     E0 8C FA 8A 
2619c     6A 8B FB 8A 
261a0     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
261a4     45 8B 45 8B 
261a8     45 8B 6B 8B 
261ac     46 8B 59 8B 
261b0     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
261b4     6B 8B 6B 8B 
261b8     6B 8B 6B 8B 
261bc     7D 8B 7D 8B 
261c0     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
261c4     90 8B 91 8B 
261c8     90 8B 90 8B 
261cc     A3 8B A3 8B 
261d0     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
261d4     B5 8B B6 8B 
261d8     B5 8B B5 8B 
261dc     B6 8B C8 8B 
261e0     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
261e4     C8 8B DA 8B 
261e8     DB 8B DB 8B 
261ec     DB 8B DC 8B 
261f0     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
261f4     EE 8B EE 8B 
261f8     00 8C 01 8C 
261fc     00 8C 01 8C 
26200     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
26204     12 8C 13 8C 
26208     13 8C 26 8C 
2620c     26 8C 26 8C 
26210     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
26214     38 8C 38 8C 
26218     38 8C 38 8C 
2621c     4B 8C 4B 8C 
26220     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
26224     5E 8C 5E 8C 
26228     5E 8C 5E 8C 
2622c     70 8C 70 8C 
26230     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
26234     70 8C 83 8C 
26238     83 8C 83 8C 
2623c     83 8C 96 8C 
26240     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
26244     95 8C A9 8C 
26248     A9 8C A8 8C 
2624c     A8 8C A8 8C 
26250     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
26254     BB 8C BB 8C 
26258     BB 8C CE 8C 
2625c     CE 8C CE 8C 
26260     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
26264     E0 8C E1 8C 
26268     E1 8C E0 8C 
2626c     F4 8C F2 8C 
26270     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
26274     05 8D 05 8D 
26278     06 8D 06 8D 
2627c     19 8D 19 8D 
26280     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
26284     18 8D 2B 8D 
26288     2B 8D 2B 8D 
2628c     2A 8D 3E 8D 
26290     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
26294     3E 8D 51 8D 
26298     50 8D 50 8D 
2629c     50 8D 51 8D 
262a0     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
262a4     63 8D 64 8D 
262a8     76 8D 75 8D 
262ac     75 8D 76 8D 
262b0     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
262b4     88 8D 88 8D 
262b8     89 8D 9B 8D 
262bc     9A 8D 9B 8D 
262c0     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
262c4     AD 8D AE 8D 
262c8     AD 8D AE 8D 
262cc     C1 8D C1 8D 
262d0     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
262d4     D3 8D D3 8D 
262d8     D3 8D D3 8D 
262dc     D3 8D E6 8D 
262e0     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
262e4     E6 8D E6 8D 
262e8     F9 8D F9 8D 
262ec     F9 8D F8 8D 
262f0     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
262f4     0B 8E 0B 8E 
262f8     1D 8E 1D 8E 
262fc     1E 8E 1E 8E 
26300     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
26304     31 8E 31 8E 
26308     31 8E 42 8E 
2630c     43 8E 43 8E 
26310     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
26314     56 8E 56 8E 
26318     55 8E 56 8E 
2631c     68 8E 69 8E 
26320     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
26324     69 8E 7B 8E 
26328     7C 8E 7B 8E 
2632c     7B 8E 8D 8E 
26330     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
26334     8D 8E A1 8E 
26338     A0 8E A1 8E 
2633c     A1 8E A0 8E 
26340     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
26344     B3 8E B3 8E 
26348     C6 8E C5 8E 
2634c     C6 8E C6 8E 
26350     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
26354     D8 8E D9 8E 
26358     D8 8E EC 8E 
2635c     EB 8E EC 8E 
26360     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
26364     FE 8E FE 8E 
26368     FE 8E FE 8E 
2636c     10 8F 10 8F 
26370     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
26374     11 8F 23 8F 
26378     24 8F 23 8F 
2637c     24 8F 37 8F 
26380     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
26384     36 8F 36 8F 
26388     48 8F 49 8F 
2638c     49 8F 49 8F 
26390     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
26394     5B 8F 5C 8F 
26398     5B 8F 6E 8F 
2639c     6E 8F 6E 8F 
263a0     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
263a4     81 8F 81 8F 
263a8     81 8F 81 8F 
263ac     93 8F 93 8F 
263b0     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
263b4     93 8F A6 8F 
263b8     A6 8F A6 8F 
263bc     A6 8F B9 8F 
263c0     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
263c4     B9 8F B9 8F 
263c8     CC 8F CB 8F 
263cc     CB 8F CC 8F 
263d0     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
263d4     DF 8F DE 8F 
263d8     DE 8F F1 8F 
263dc     F1 8F F1 8F 
263e0     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
263e4     03 90 04 90 
263e8     04 90 04 90 
263ec     16 90 17 90 
263f0     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
263f4     29 90 28 90 
263f8     29 90 28 90 
263fc     29 90 3C 90 
26400     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
26404     3C 90 4F 90 
26408     4E 90 4E 90 
2640c     4E 90 4E 90 
26410     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
26414     61 90 61 90 
26418     73 90 74 90 
2641c     74 90 74 90 
26420     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
26424     87 90 86 90 
26428     87 90 86 90 
2642c     99 90 99 90 
26430     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
26434     AB 90 AB 90 
26438     AC 90 AB 90 
2643c     AB 90 BF 90 
26440     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
26444     BE 90 D1 90 
26448     D0 90 D1 90 
2644c     D1 90 D1 90 
26450     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
26454     E3 90 E4 90 
26458     F6 90 F6 90 
2645c     F6 90 F6 90 
26460     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
26464     09 91 0A 91 
26468     0A 91 1C 91 
2646c     1C 91 1C 91 
26470     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
26474     2F 91 2E 91 
26478     2F 91 2F 91 
2647c     2E 91 41 91 
26480     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
26484     41 91 53 91 
26488     54 91 54 91 
2648c     53 91 54 91 
26490     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
26494     67 91 67 91 
26498     79 91 7A 91 
2649c     79 91 78 91 
264a0     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
264a4     8C 91 8B 91 
264a8     8C 91 8C 91 
264ac     9E 91 9E 91 
264b0     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
264b4     B1 91 B1 91 
264b8     B2 91 B1 91 
264bc     B1 91 C4 91 
264c0     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
264c4     C4 91 D6 91 
264c8     D7 91 D7 91 
264cc     D7 91 D6 91 
264d0     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
264d4     EA 91 EA 91 
264d8     EA 91 FC 91 
264dc     FC 91 FB 91 
264e0     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
264e4     0E 92 0F 92 
264e8     0F 92 0E 92 
264ec     21 92 21 92 
264f0     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
264f4     21 92 34 92 
264f8     33 92 34 92 
264fc     34 92 47 92 
26500     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
26504     46 92 47 92 
26508     59 92 59 92 
2650c     59 92 59 92 
26510     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
26514     6C 92 6C 92 
26518     6B 92 7E 92 
2651c     7E 92 7E 92 
26520     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
26524     92 92 91 92 
26528     91 92 90 92 
2652c     91 92 A4 92 
26530     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
26534     A3 92 B6 92 
26538     B6 92 B7 92 
2653c     B7 92 B6 92 
26540     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
26544     CA 92 C9 92 
26548     CA 92 DC 92 
2654c     DC 92 DC 92 
26550     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
26554     EF 92 EF 92 
26558     EF 92 EF 92 
2655c     01 93 01 93 
26560     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
26564     15 93 14 93 
26568     14 93 14 93 
2656c     14 93 27 93 
26570     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
26574     27 93 39 93 
26578     3A 93 39 93 
2657c     39 93 39 93 
26580     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
26584     4B 93 4C 93 
26588     5F 93 5F 93 
2658c     5F 93 5E 93 
26590     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
26594     5F 93 84 93 
26598     4C 93 96 93 
2659c     5F 93 AE 94 
265a0     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
265a4     7B C1 00 00 | 	byte	$7b, $c1, $00, $00
265a8     7A D7 00 80 
265ac     87 8A 48 8F 
265b0     EC 8C 76 8D 
265b4     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
265b8     3C 8D 82 8D 
265bc     42 8D 88 8D 
265c0     8C 8D 8E 8D 
265c4     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
265c8     97 8D DE 8D 
265cc     E1 8D F1 8E 
265d0     D8 8C A3 83 
265d4     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
265d8     65 71 C9 65 
265dc     FC 64 C4 65 
265e0     C1 65 BF 65 
265e4     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
265e8     B6 65 B4 65 
265ec     B2 65 AE 65 
265f0     AC 65 ED 65 
265f4     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
265f8     5E 65 25 66 
265fc     FA 62 23 6B 
26600     B5 6C 61 0A 
26604     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
26608     5D 90 BE 8D 
2660c     47 8E C3 8D 
26610     09 8E C9 8D 
26614     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
26618     15 8E 19 8E 
2661c     1B 8E 62 8E 
26620     64 8E 68 8E 
26624     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
26628     B5 8E 4C 90 
2662c     FA 84 3C 9D 
26630     98 13 79 6D 
26634     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
26638     D9 66 50 66 
2663c     D4 66 4B 66 
26640     8C 66 46 66 
26644     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
26648     81 66 3A 66 
2664c     7C 66 36 66 
26650     76 66 30 66 
26654     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
26658     6B 66 88 72 
2665c     BF 37 E7 B7 
26660     75 83 8B 8E 
26664     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
26668     94 8E 96 8E 
2666c     DD 8E 9C 8E 
26670     E2 8E A2 8E 
26674     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
26678     EE 8E AE 8E 
2667c     38 8F B5 8E 
26680     3F 8F FD 8E 
26684     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
26688     A5 87 1E E3 
2668c     6D 5D FA 71 
26690     41 64 25 67 
26694     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
26698     D9 66 1A 67 
2669c     18 67 15 67 
266a0     12 67 0F 67 
266a4     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
266a8     07 67 C0 66 
266ac     01 67 BC 66 
266b0     B8 66 DE 64 
266b4     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
266b8     43 E5 1F 8B 
266bc     14 8A F1 90 
266c0     1C 8F 63 8F 
266c4     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
266c8     29 8F 6E 8F 
266cc     72 8F 75 8F 
266d0     34 8F BE 8F 
266d4     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
266d8     84 8F 87 8F 
266dc     CC 8F 56 90 
266e0     67 91 49 80 
266e4     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
266e8     46 77 A6 66 
266ec     E8 66 B0 67 
266f0     AD 67 ED 67 
266f4     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
266f8     A2 67 E3 67 
266fc     9D 67 9A 67 
26700     98 67 94 67 
26704     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
26708     49 67 CD 67 
2670c     28 65 5F 6E 
26710     82 67 3A 01 
26714     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
26718     C2 91 A9 8F 
2671c     EF 8F AE 8F 
26720     F4 8F B5 8F 
26724     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
26728     01 90 03 90 
2672c     07 90 09 90 
26730     0C 90 53 90 
26734     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
26738     18 90 44 93 
2673c     85 84 D6 9D 
26740     87 1F 2F 75 
26744     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
26748     C4 68 F6 67 
2674c     BE 68 F1 67 
26750     76 68 2E 68 
26754     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
26758     27 68 24 68 
2675c     64 68 1E 68 
26760     5F 68 19 68 
26764     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
26768     DC 68 56 72 
2676c     7E 36 C2 B8 
26770     D7 84 73 90 
26774     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
26778     7B 90 7F 90 
2677c     82 90 84 90 
26780     CB 90 8B 90 
26784     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
26788     D7 90 96 90 
2678c     20 91 59 90 
26790     25 91 A2 90 
26794     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
26798     D0 89 40 EE 
2679c     12 64 C4 71 
267a0     29 66 0C 69 
267a4     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
267a8     C0 68 02 69 
267ac     FE 68 FB 68 
267b0     F9 68 F6 68 
267b4     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
267b8     EE 68 A8 68 
267bc     2C 69 5F 68 
267c0     E2 68 81 66 
267c4     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
267c8     1E EB A6 8A 
267cc     73 8B 5E 93 
267d0     7B 90 48 91 
267d4     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
267d8     0D 91 11 91 
267dc     14 91 16 91 
267e0     5C 91 1C 91 
267e4     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
267e8     68 91 AF 91 
267ec     2A 91 B5 91 
267f0     75 91 1A 94 
267f4     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
267f8     70 0E CB 6C 
267fc     5D 6E C4 67 
26800     99 69 54 69 
26804     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
26808     D2 69 49 69 
2680c     89 69 86 69 
26810     40 69 C4 69 
26814     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
26818     35 69 76 69 
2681c     58 67 EB 6D 
26820     E9 6D 89 0F 
26824     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
26828     33 94 94 91 
2682c     D9 91 56 91 
26830     E0 91 9F 91 
26834     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
26838     EC 91 EE 91 
2683c     F1 91 F4 91 
26840     F7 91 3D 92 
26844     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
26848     46 92 21 94 
2684c     11 89 A4 9D 
26850     FD 0E 8F 6C 
26854     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
26858     28 6A E1 69 
2685c     65 6A 1F 6A 
26860     5F 6A 1A 6A 
26864     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
26868     54 6A 0F 6A 
2686c     4F 6A 09 6A 
26870     06 6A 03 6A 
26874     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
26878     23 68 69 77 
2687c     3A 4D 38 CA 
26880     38 86 4E 91 
26884     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
26888     64 92 24 92 
2688c     6A 92 2A 92 
26890     70 92 30 92 
26894     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
26898     7B 92 7E 92 
2689c     C5 92 84 92 
268a0     CB 92 8A 92 
268a4     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
268a8     4D 8D F9 E2 
268ac     97 59 FE 74 
268b0     DB 68 6D 6A 
268b4     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
268b8     A8 6A A5 6A 
268bc     A3 6A 9F 6A 
268c0     9D 6A 9B 6A 
268c4     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
268c8     D6 6A 8F 6A 
268cc     CF 6A 46 6A 
268d0     CA 6A E1 67 
268d4     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
268d8     D3 F7 15 92 
268dc     90 8C BF 94 
268e0     A6 92 EB 92 
268e4     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
268e8     B1 92 F7 92 
268ec     FA 92 FD 92 
268f0     00 93 02 93 
268f4     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
268f8     4F 93 52 93 
268fc     54 93 22 94 
26900     5A 93 8F 88 
26904     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
26908     1C 77 07 6C 
2690c     E8 69 7A 6B 
26910     34 6B 75 6B 
26914     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
26918     29 6B 26 6B 
2691c     24 6B 21 6B 
26920     1D 6B 5E 6B 
26924     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
26928     12 6B 52 6B 
2692c     34 69 34 6E 
26930     BA 73 A4 24 
26934     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
26938     7A 94 B3 93 
2693c     72 93 31 93 
26940     78 93 7A 93 
26944     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
26948     83 93 86 93 
2694c     89 93 D0 93 
26950     D2 93 D5 93 
26954     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
26958     DD 93 40 96 
2695c     30 8B 99 9C 
26960     52 10 94 71 
26964     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
26968     46 6C 79 6B 
2696c     40 6C B7 6B 
26970     F7 6B B1 6B 
26974     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
26978     EC 6B A5 6B 
2697c     A2 6B 9F 6B 
26980     9D 6B 9A 6B 
26984     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
26988     C8 6A E4 76 
2698c     20 4B F9 CE 
26990     2E 8A 1A 92 
26994     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
26998     FB 93 BA 93 
2699c     01 94 03 94 
269a0     4A 94 09 94 
269a4     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
269a8     55 94 14 94 
269ac     9E 94 1A 94 
269b0     61 94 20 94 
269b4     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
269b8     3E 87 E5 CD 
269bc     5F 50 6C 78 
269c0     B5 6A 04 6C 
269c4     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
269c8     83 6C 7F 6C 
269cc     7C 6C 36 6C 
269d0     76 6C 74 6C 
269d4     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
269d8     6B 6C 25 6C 
269dc     66 6C 1F 6C 
269e0     1D 6C 41 6A 
269e4     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
269e8     BA FA FC 94 
269ec     5B 8D 97 96 
269f0     3B 94 C5 94 
269f4     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
269f8     89 94 8C 94 
269fc     8F 94 92 94 
26a00     94 94 DB 94 
26a04     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
26a08     E4 94 E7 94 
26a0c     2D 95 74 95 
26a10     C8 96 15 89 
26a14     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
26a18     CB 75 31 6F 
26a1c     7E 6B 10 6D 
26a20     C9 6C 0A 6D 
26a24     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
26a28     BD 6C FF 6C 
26a2c     FB 6C F9 6C 
26a30     B2 6C F3 6C 
26a34     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
26a38     A7 6C E8 6C 
26a3c     0D 6B 85 6F 
26a40     C7 74 10 28 
26a44     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
26a48     96 96 47 95 
26a4c     06 95 0A 95 
26a50     0C 95 0F 95 
26a54     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
26a58     17 95 5E 95 
26a5c     61 95 63 95 
26a60     22 95 AC 95 
26a64     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
26a68     72 95 17 98 
26a6c     59 8E 01 96 
26a70     CF FC 5A 68 
26a74     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
26a78     96 6D 50 6D 
26a7c     D5 6D 4A 6D 
26a80     8C 6D 89 6D 
26a84     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
26a88     80 6D 3A 6D 
26a8c     7A 6D 77 6D 
26a90     75 6D 71 6D 
26a94     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
26a98     18 6C BC 78 
26a9c     9A 4F 7E CF 
26aa0     1F 89 F1 93 
26aa4     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
26aa8     D2 95 4E 95 
26aac     D7 95 53 95 
26ab0     DD 95 E0 95 
26ab4     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
26ab8     A5 95 EB 95 
26abc     EE 95 F0 95 
26ac0     37 96 B3 95 
26ac4     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
26ac8     1A 98 D5 8D 
26acc     C5 9F CD 0F 
26ad0     0F 71 F3 73 
26ad4     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
26ad8     D9 6D 5E 6E 
26adc     D3 6D 58 6E 
26ae0     12 6E 0F 6E 
26ae4     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
26ae8     49 6E BF 6D 
26aec     87 6E 76 6D 
26af0     81 6E 11 6B 
26af4     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
26af8     3F 09 44 95 
26afc     E5 8D 3F 99 
26b00     D4 95 A2 96 
26b04     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
26b08     23 96 69 96 
26b0c     6B 96 6E 96 
26b10     71 96 74 96 
26b14     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
26b18     BF 96 3C 96 
26b1c     C6 96 C8 96 
26b20     A3 98 51 8D 
26b24     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
26b28     CF 75 29 73 
26b2c     90 6C EC 6E 
26b30     62 6E E7 6E 
26b34     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
26b38     9A 6E 98 6E 
26b3c     95 6E 91 6E 
26b40     8E 6E CF 6E 
26b44     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
26b48     40 6E C3 6E 
26b4c     E8 6C 45 6F 
26b50     A5 7B C9 35 
26b54     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
26b58     2D 98 23 97 
26b5c     E1 96 A0 96 
26b60     A4 96 EA 96 
26b64     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
26b68     AF 96 F4 96 
26b6c     F8 96 3E 97 
26b70     FD 96 43 97 
26b74     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
26b78     08 97 6B 99 
26b7c     D6 92 88 91 
26b80     D8 EE 84 66 
26b84     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
26b88     2E 6F E7 6E 
26b8c     6C 6F 24 6F 
26b90     21 6F 1F 6F 
26b94     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
26b98     17 6F 13 6F 
26b9c     54 6F 0E 6F 
26ba0     0B 6F 4B 6F 
26ba4     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
26ba8     27 6D 1C 7B 
26bac     19 59 9F DB 
26bb0     66 8E BC 94 
26bb4     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
26bb8     67 97 26 97 
26bbc     6D 97 2B 97 
26bc0     72 97 32 97 
26bc4     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
26bc8     C1 97 7F 97 
26bcc     C6 97 85 97 
26bd0     CB 97 CE 97 
26bd4     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
26bd8     EC 8A C4 C6 
26bdc     68 4C F4 7D 
26be0     63 6E E8 6E 
26be4     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
26be8     ED 6F A7 6F 
26bec     E7 6F A0 6F 
26bf0     E1 6F 9B 6F 
26bf4     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
26bf8     D5 6F 8F 6F 
26bfc     CE 6F 45 6F 
26c00     86 6F 68 6D 
26c04     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
26c08     C0 13 AD A2 
26c0c     A7 8E 79 99 
26c10     E6 97 E8 97 
26c14     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
26c18     F1 97 F3 97 
26c1c     F6 97 F9 97 
26c20     FB 97 FE 97 
26c24     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
26c28     4A 98 0A 98 
26c2c     93 98 0F 98 
26c30     7F 9B BF 8C 
26c34     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
26c38     91 7B 62 73 
26c3c     1A 6E B9 70 
26c40     EB 6F B3 70 
26c44     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
26c48     25 70 20 70 
26c4c     1E 70 1B 70 
26c50     18 70 15 70 
26c54     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
26c58     0D 70 09 70 
26c5c     07 70 03 70 
26c60     01 70 FD 6F 
26c64     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
26c68     F6 6F F2 6F 
26c6c     EF 6F EC 6F 
26c70     2C 70 E6 6F 
26c74     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
26c78     DD 6F 97 6F 
26c7c     D7 6F 84 6E 
26c80     8F 6F 3F 7D 
26c84     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
26c86     FF FF FF FF 
26c8a     FF FF       | atarist_spl file "atarist.spl" '512
26c8c     00 00 00 00 
26c90     00 00 00 00 
26c94     00 00       | 	byte	$00[10]
26c96     17 7F F2 7F 
26c9a     B2 7F 72 7F 
26c9e     33 7F F4 7E 
26ca2     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
26ca6     36 7E F5 7D 
26caa     E9 51 F2 0D 
26cae     8E 00 F3 FD 
26cb2     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
26cb6     57 FD 58 FD 
26cba     5B FD 5C FD 
26cbe     5C FD 60 7D 
26cc2     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
26cc6     D6 7C 98 7C 
26cca     59 7C 1A 7C 
26cce     DC 7B 9E 7B 
26cd2     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
26cd6     F3 05 00 FD 
26cda     41 FB EA FA 
26cde     D9 FA DB FA 
26ce2     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
26ce6     E4 FA 9B 36 
26cea     F8 7A C0 7A 
26cee     84 7A 45 7A 
26cf2     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
26cf6     8E 79 51 79 
26cfa     15 79 D7 78 
26cfe     3C 1F EB FF 
26d02     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
26d06     6D F8 65 F8 
26d0a     68 F8 6D F8 
26d0e     70 F8 74 F8 
26d12     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
26d16     AB 60 79 60 
26d1a     4B 60 1A 60 
26d1e     E9 5F B9 5F 
26d22     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
26d26     FB 59 B2 0B 
26d2a     92 FA 3A F7 
26d2e     96 F6 79 F6 
26d32     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
26d36     82 F6 86 F6 
26d3a     8C F6 DB 5D 
26d3e     F1 5E C1 5E 
26d42     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
26d46     34 5E 04 5E 
26d4a     D6 5D A6 5D 
26d4e     78 5D D4 3E 
26d52     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
26d56     27 F5 BA F4 
26d5a     AB F4 AD F4 
26d5e     B2 F4 B8 F4 
26d62     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
26d66     26 5D 2B 5D 
26d6a     FC 5C CD 5C 
26d6e     9F 5C 70 5C 
26d72     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
26d76     E5 5B B8 5B 
26d7a     DB 24 A7 FC 
26d7e     D1 F4 4D F3 
26d82     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
26d86     04 F3 0B F3 
26d8a     11 F3 16 F3 
26d8e     DE 18 98 5B 
26d92     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
26d96     4E 4A 29 48 
26d9a     A0 47 6A 47 
26d9e     43 47 20 47 
26da2     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
26da6     E2 F6 98 F2 
26daa     C5 F1 A3 F1 
26dae     A3 F1 A8 F1 
26db2     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
26db6     BF F1 00 3D 
26dba     EF 46 CD 46 
26dbe     AA 46 86 46 
26dc2     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
26dc6     1C 46 F9 45 
26dca     D7 45 EE 43 
26dce     DE 02 E8 F3 
26dd2     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
26dd6     61 F0 65 F0 
26dda     6D F0 74 F0 
26dde     7C F0 84 F0 
26de2     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
26de6     8E 45 6D 45 
26dea     49 45 27 45 
26dee     05 45 E1 44 
26df2     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
26df6     F1 2F A9 FB 
26dfa     8B F1 9B EF 
26dfe     40 EF 36 EF 
26e02     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
26e06     4D EF 56 EF 
26e0a     5E EF 7B 44 
26e0e     8C 44 69 44 
26e12     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
26e16     03 44 E1 43 
26e1a     C0 43 F5 37 
26e1e     69 33 0F 11 
26e22     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
26e26     66 EE 37 EE 
26e2a     38 EE 40 EE 
26e2e     48 EE 51 EE 
26e32     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
26e36     7D 32 6A 32 
26e3a     51 32 37 32 
26e3e     1F 32 05 32 
26e42     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
26e46     B9 31 A1 31 
26e4a     F1 04 F4 F1 
26e4e     50 EE A0 ED 
26e52     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
26e56     93 ED 9A ED 
26e5a     A4 ED AD ED 
26e5e     F4 27 C1 31 
26e62     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
26e66     78 31 5F 31 
26e6a     46 31 2E 31 
26e6e     15 31 FC 30 
26e72     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
26e76     C4 EF 4A ED 
26e7a     DC EC CB EC 
26e7e     D2 EC DA EC 
26e82     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
26e86     F9 EC 64 2F 
26e8a     0A 31 F1 30 
26e8e     D9 30 C0 30 
26e92     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
26e96     78 30 5F 30 
26e9a     46 30 38 23 
26e9e     A6 F6 19 EE 
26ea2     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
26ea6     20 EC 28 EC 
26eaa     32 EC 3C EC 
26eae     47 EC 51 EC 
26eb2     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
26eb6     A3 22 93 22 
26eba     7F 22 6E 22 
26ebe     5D 22 4C 22 
26ec2     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
26ec6     77 09 76 F1 
26eca     CC EC F0 EB 
26ece     CD EB CE EB 
26ed2     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
26ed6     ED EB F5 EB 
26eda     3E F6 6B 22 
26ede     5F 22 4E 22 
26ee2     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
26ee6     1B 22 0B 22 
26eea     FA 21 E9 21 
26eee     D8 21 4D FF 
26ef2     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
26ef6     92 EB 7B EB 
26efa     82 EB 8C EB 
26efe     97 EB A1 EB 
26f02     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
26f06     15 22 04 22 
26f0a     F3 21 E3 21 
26f0e     D2 21 C0 21 
26f12     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
26f16     8E 21 7D 21 
26f1a     9A F8 A4 ED 
26f1e     8E EB 2F EB 
26f22     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
26f26     37 EB 42 EB 
26f2a     4C EB 57 EB 
26f2e     B2 17 22 19 
26f32     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
26f36     FD 18 EF 18 
26f3a     E3 18 D6 18 
26f3e     CA 18 BD 18 
26f42     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
26f46     60 EC 35 EB 
26f4a     01 EB 01 EB 
26f4e     0C EB 16 EB 
26f52     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
26f56     34 EB D0 18 
26f5a     00 19 F4 18 
26f5e     E8 18 DA 18 
26f62     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
26f66     B6 18 A9 18 
26f6a     9D 18 91 05 
26f6e     F0 EF CA EB 
26f72     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
26f76     E8 EA F2 EA 
26f7a     FE EA 07 EB 
26f7e     12 EB C2 EF 
26f82     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
26f86     D9 18 CD 18 
26f8a     C0 18 B3 18 
26f8e     A7 18 9B 18 
26f92     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
26f96     B8 FC 30 EE 
26f9a     61 EB DC EA 
26f9e     CD EA D2 EA 
26fa2     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
26fa6     F3 EA FE EA 
26faa     D2 09 D1 18 
26fae     C3 18 17 18 
26fb2     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
26fb6     66 11 52 11 
26fba     49 11 41 11 
26fbe     38 11 E0 F4 
26fc2     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
26fc6     C9 EA C5 EA 
26fca     CF EA DB EA 
26fce     E6 EA EF EA 
26fd2     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
26fd6     89 11 80 11 
26fda     78 11 6E 11 
26fde     67 11 5D 11 
26fe2     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
26fe6     43 11 32 0D 
26fea     9C F1 07 EC 
26fee     F8 EA CD EA 
26ff2     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
26ff6     E4 EA ED EA 
26ffa     F8 EA 02 EB 
26ffe     55 11 91 11 
27002     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
27006     75 11 6E 11 
2700a     64 11 5E 11 
2700e     54 11 4A 11 
27012     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
27016     A8 EB F1 EA 
2701a     D9 EA DC EA 
2701e     E8 EA F1 EA 
27022     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
27026     A6 EB 9E 11 
2702a     A0 11 96 11 
2702e     8D 11 85 11 
27032     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
27036     6A 11 CA 0D 
2703a     36 0B 57 F8 
2703e     6C ED 57 EB 
27042     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
27046     F4 EA FF EA 
2704a     09 EB 15 EB 
2704e     1E EB 1A FD 
27052     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
27056     ED 0A E8 0A 
2705a     E2 0A DC 0A 
2705e     D6 0A D1 0A 
27062     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
27066     F8 F3 BC EC 
2706a     57 EB 1E EB 
2706e     18 EB 24 EB 
27072     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
27076     42 EB 4D EB 
2707a     08 09 20 0B 
2707e     1A 0B 14 0B 
27082     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
27086     04 0B FE 0A 
2708a     F9 0A F2 0A 
2708e     84 08 3A F1 
27092     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
27096     42 EB 42 EB 
2709a     4E EB 57 EB 
2709e     62 EB 6B EB 
270a2     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
270a6     48 0B 43 0B 
270aa     3C 0B 36 0B 
270ae     31 0B 2C 0B 
270b2     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
270b6     1B 0B 5C 00 
270ba     6A EF 1B EC 
270be     81 EB 6A EB 
270c2     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
270c6     85 EB 8E EB 
270ca     99 EB A3 EB 
270ce     DD 05 E5 05 
270d2     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
270d6     DB 05 D8 05 
270da     D5 05 D1 05 
270de     D0 05 CB 05 
270e2     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
270e6     0C EC BB EB 
270ea     B3 EB BB EB 
270ee     C5 EB D0 EB 
270f2     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
270f6     E4 F7 2C 06 
270fa     28 06 24 06 
270fe     22 06 1F 06 
27102     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
27106     16 06 14 06 
2710a     0F 06 D0 F3 
2710e     65 ED 2D EC 
27112     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
27116     01 EC 0A EC 
2711a     14 EC 1E EC 
2711e     29 EC FB 03 
27122     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
27126     63 06 60 06 
2712a     5E 06 59 06 
2712e     58 06 54 06 
27132     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
27136     69 F1 21 ED 
2713a     55 EC 33 EC 
2713e     36 EC 40 EC 
27142     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
27146     5C EC 68 EC 
2714a     92 02 D9 02 
2714e     D7 02 D7 02 
27152     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
27156     D1 02 D1 02 
2715a     CE 02 CD 02 
2715e     5D FC 80 EF 
27162     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
27166     83 EC 8A EC 
2716a     93 EC 9C EC 
2716e     A5 EC B1 EC 
27172     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
27176     2B 03 2A 03 
2717a     29 03 26 03 
2717e     25 03 24 03 
27182     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
27186     1F 03 70 F7 
2718a     D0 EE 27 ED 
2718e     DB EC D4 EC 
27192     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
27196     F0 EC FA EC 
2719a     02 ED F9 F4 
2719e     7B 03 7C 03 
271a2     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
271a6     75 03 73 03 
271aa     72 03 70 03 
271ae     6D 03 6C 03 
271b2     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
271b6     54 ED 22 ED 
271ba     22 ED 2C ED 
271be     35 ED 3F ED 
271c2     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
271c6     14 01 C3 03 
271ca     C1 03 C0 03 
271ce     5F 01 A5 00 
271d2     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
271d6     7B 00 7C 00 
271da     20 00 85 F1 
271de     2A EE 89 ED 
271e2     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
271e6     80 ED 87 ED 
271ea     90 ED 9A ED 
271ee     A3 ED 73 00 
271f2     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
271f6     D0 00 D0 00 
271fa     D0 00 D0 00 
271fe     D0 00 CF 00 
27202     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
27206     80 F0 3D EE 
2720a     D5 ED C7 ED 
2720e     CD ED D6 ED 
27212     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
27216     F2 ED FA ED 
2721a     1D 01 29 01 
2721e     27 01 27 01 
27222     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
27226     25 01 26 01 
2722a     26 01 23 01 
2722e     D0 F7 EC EF 
27232     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
27236     1C EE 24 EE 
2723a     2D EE 37 EE 
2723e     40 EE 47 EE 
27242     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
27246     7D 01 7B 01 
2724a     7A 01 7A 01 
2724e     79 01 78 01 
27252     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
27256     84 FE DE F3 
2725a     6C EF 93 EE 
2725e     72 EE 72 EE 
27262     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
27266     8B EE 95 EE 
2726a     9E EE 15 FC 
2726e     67 FE 67 FE 
27272     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
27276     6B FE 6B FE 
2727a     6D FE 6D FE 
2727e     6D FE 6F FE 
27282     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
27286     DF EE CC EE 
2728a     CF EE D9 EE 
2728e     E1 EE EA EE 
27292     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
27296     5A FE C4 FE 
2729a     C3 FE C5 FE 
2729e     C6 FE C6 FE 
272a2     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
272a6     C8 FE C7 FE 
272aa     DA FB 85 F1 
272ae     8D EF 31 EF 
272b2     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
272b6     34 EF 3E EF 
272ba     46 EF 4F EF 
272be     57 EF 0D FF 
272c2     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
272c6     1F FF 1F FF 
272ca     21 FF 21 FF 
272ce     21 FF 21 FF 
272d2     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
272d6     15 F1 BE EF 
272da     84 EF 7E EF 
272de     88 EF 8F EF 
272e2     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
272e6     A9 EF 06 F2 
272ea     A6 FC AB FC 
272ee     AD FC AE FC 
272f2     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
272f6     B2 FC B4 FC 
272fa     B6 FC B7 FC 
272fe     8B F4 BD F0 
27302     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
27306     E4 EF EE EF 
2730a     F6 EF FD EF 
2730e     04 F0 0E F0 
27312     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
27316     0B FD 0D FD 
2731a     0F FD 11 FD 
2731e     11 FD 13 FD 
27322     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
27326     17 FD 64 F3 
2732a     CD F0 52 F0 
2732e     41 F0 45 F0 
27332     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
27336     5B F0 64 F0 
2733a     6D F0 FB FC 
2733e     65 FD 68 FD 
27342     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
27346     6C FD 6D FD 
2734a     6F FD 70 FD 
2734e     72 FD B3 FB 
27352     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
27356     A4 F0 99 F0 
2735a     A0 F0 A8 F0 
2735e     AE F0 B9 F0 
27362     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
27366     CB FB DD FB 
2736a     DE FB E0 FB 
2736e     E3 FB E3 FB 
27372     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
27376     E9 FB EC FB 
2737a     62 F7 27 F2 
2737e     2A F1 FF F0 
27382     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
27386     0C F1 13 F1 
2738a     1B F1 23 F1 
2738e     33 F2 3C FC 
27392     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
27396     42 FC 45 FC 
2739a     47 FC 48 FC 
2739e     4A FC 4C FC 
273a2     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
273a6     20 F2 77 F1 
273aa     5C F1 5F F1 
273ae     64 F1 6C F1 
273b2     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
273b6     83 F1 DC F8 
273ba     9A FC 9A FC 
273be     9B FC 9E FC 
273c2     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
273c6     A3 FC A4 FC 
273ca     A6 FC A9 FC 
273ce     90 F4 33 F2 
273d2     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
273d6     BA F1 BF F1 
273da     C7 F1 CE F1 
273de     D6 F1 DC F1 
273e2     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
273e6     F3 FC F5 FC 
273ea     FE FB 79 FB 
273ee     62 FB 5F FB 
273f2     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
273f6     6F FA AF F3 
273fa     53 F2 12 F2 
273fe     0F F2 15 F2 
27402     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
27406     2A F2 32 F2 
2740a     38 F2 9A FB 
2740e     AF FB B1 FB 
27412     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
27416     B7 FB B8 FB 
2741a     BA FB BC FB 
2741e     C1 FB 3B F8 
27422     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
27426     6E F2 6C F2 
2742a     74 F2 7A F2 
2742e     81 F2 87 F2 
27432     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
27436     06 FC 09 FC 
2743a     0C FC 0E FC 
2743e     0F FC 12 FC 
27442     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
27446     17 FC 1A FC 
2744a     B2 F6 7B F3 
2744e     DD F2 C5 F2 
27452     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
27456     D4 F2 DB F2 
2745a     E0 F2 E8 F2 
2745e     28 F8 60 FC 
27462     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
27466     64 FC 66 FC 
2746a     68 FC 6A FC 
2746e     6D FC 52 FC 
27472     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
27476     78 F3 24 F3 
2747a     1A F3 1E F3 
2747e     24 F3 2A F3 
27482     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
27486     3D F3 80 FA 
2748a     0C FB 0F FB 
2748e     10 FB 14 FB 
27492     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
27496     1B FB 1D FB 
2749a     1F FB 92 FA 
2749e     DE F4 AE F3 
274a2     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
274a6     79 F3 7E F3 
274aa     84 F3 8C F3 
274ae     92 F3 97 F3 
274b2     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
274b6     67 FB 69 FB 
274ba     6B FB 6F FB 
274be     71 FB 72 FB 
274c2     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
274c6     E3 F8 BA F4 
274ca     EE F3 CC F3 
274ce     CA F3 CF F3 
274d2     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
274d6     E2 F3 E8 F3 
274da     ED F3 B7 FB 
274de     BC FB BE FB 
274e2     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
274e6     C4 FB C6 FB 
274ea     C8 FB C9 FB 
274ee     CC FB 8F F7 
274f2     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
274f6     1E F4 1E F4 
274fa     24 F4 2A F4 
274fe     30 F4 38 F4 
27502     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
27506     AD FA B1 FA 
2750a     B4 FA B6 FA 
2750e     BA FA BB FA 
27512     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
27516     C2 FA C6 FA 
2751a     55 F6 C6 F4 
2751e     7D F4 72 F4 
27522     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
27526     83 F4 89 F4 
2752a     8F F4 94 F4 
2752e     66 FA 03 FB 
27532     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
27536     0A FB 0E FB 
2753a     10 FB 11 FB 
2753e     16 FB 18 FB 
27542     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
27546     F9 F4 CA F4 
2754a     C5 F4 CB F4 
2754e     D1 F4 D7 F4 
27552     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
27556     E8 F4 3F FB 
2755a     56 FB 58 FB 
2755e     5A FB 5E FB 
27562     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
27566     64 FB 64 FB 
2756a     69 FB 99 F9 
2756e     E9 F5 33 F5 
27572     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
27576     1D F5 22 F5 
2757a     27 F5 2E F5 
2757e     32 F5 37 F5 
27582     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
27586     BC FA BC FA 
2758a     C1 FA C2 FA 
2758e     C4 FA C8 FA 
27592     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
27596     F9 F7 DB F5 
2759a     78 F5 69 F5 
2759e     6A F5 70 F5 
275a2     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
275a6     7F F5 85 F5 
275aa     6E F7 06 FB 
275ae     0A FB 0B FB 
275b2     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
275b6     14 FB 15 FB 
275ba     18 FB 1B FB 
275be     1D FB 70 F7 
275c2     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
275c6     B6 F5 BB F5 
275ca     C0 F5 C6 F5 
275ce     CA F5 CF F5 
275d2     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
275d6     54 FB 56 FB 
275da     5A FB 5B FB 
275de     5E FB 5F FB 
275e2     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
275e6     67 FB 52 FB 
275ea     29 F7 33 F6 
275ee     06 F6 02 F6 
275f2     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
275f6     10 F6 16 F6 
275fa     1A F6 1F F6 
275fe     81 FB 9F FB 
27602     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
27606     51 FB F2 FA 
2760a     E3 FA E3 FA 
2760e     E5 FA E9 FA 
27612     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
27616     64 F6 4D F6 
2761a     4D F6 53 F6 
2761e     57 F6 5C F6 
27622     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
27626     6A F6 19 FB 
2762a     1E FB 22 FB 
2762e     23 FB 24 FB 
27632     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
27636     2C FB 2E FB 
2763a     32 FB F0 F8 
2763e     01 F7 A5 F6 
27642     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
27646     9F F6 A3 F6 
2764a     A6 F6 AC F6 
2764e     B0 F6 EB F7 
27652     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
27656     68 FB 6C FB 
2765a     6E FB 71 FB 
2765e     72 FB 74 FB 
27662     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
27666     71 F8 21 F7 
2766a     E5 F6 DD F6 
2766e     E1 F6 E6 F6 
27672     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
27676     F5 F6 F7 F6 
2767a     F7 FA AB FB 
2767e     AD FB AF FB 
27682     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
27686     B6 FB B9 FB 
2768a     BB FB BC FB 
2768e     21 FB 07 F8 
27692     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
27696     22 F7 26 F7 
2769a     2B F7 2E F7 
2769e     34 F7 38 F7 
276a2     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
276a6     13 FB 16 FB 
276aa     17 FB 1B FB 
276ae     1E FB 20 FB 
276b2     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
276b6     26 FB 77 FA 
276ba     F3 F7 7C F7 
276be     67 F7 6A F7 
276c2     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
276c6     74 F7 7A F7 
276ca     7E F7 82 F7 
276ce     53 FB 5A FB 
276d2     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
276d6     5F FB 63 FB 
276da     65 FB 67 FB 
276de     69 FB 6A FB 
276e2     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
276e6     B5 F7 A9 F7 
276ea     AD F7 B0 F7 
276ee     B5 F7 B8 F7 
276f2     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
276f6     6E F8 99 FB 
276fa     9C FB 9D FB 
276fe     9F FB A4 FB 
27702     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
27706     A9 FB AB FB 
2770a     AD FB 46 F9 
2770e     26 F8 F0 F7 
27712     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
27716     F4 F7 F8 F7 
2771a     FB F7 FF F7 
2771e     03 F8 65 FA 
27722     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
27726     2B FB 2F FB 
2772a     30 FB 32 FB 
2772e     34 FB 38 FB 
27732     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
27736     E9 F8 4A F8 
2773a     2E F8 2C F8 
2773e     2F F8 36 F8 
27742     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
27746     41 F8 44 F8 
2774a     4A FB 67 FB 
2774e     68 FB 6B FB 
27752     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
27756     73 FB 74 FB 
2775a     78 FB 7A FB 
2775e     14 FB E7 F8 
27762     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
27766     6D F8 70 F8 
2776a     73 F8 78 F8 
2776e     7C F8 80 F8 
27772     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
27776     A6 FB A7 FB 
2777a     A9 FB AC FB 
2777e     AF FB B1 FB 
27782     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
27786     B7 FB 73 FA 
2778a     F8 F8 B4 F8 
2778e     A9 F8 AB F8 
27792     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
27796     B4 F8 B8 F8 
2779a     BB F8 FA F8 
2779e     64 FB 65 FB 
277a2     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
277a6     6D FB 6F FB 
277aa     70 FB 74 FB 
277ae     77 FB 77 FB 
277b2     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
277b6     E9 F8 E4 F8 
277ba     E8 F8 EB F8 
277be     EE F8 F2 F8 
277c2     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
277c6     B5 FA 9F FB 
277ca     A1 FB A4 FB 
277ce     A5 FB A9 FB 
277d2     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
277d6     AE FB B1 FB 
277da     B2 FB C7 F9 
277de     39 F9 22 F9 
277e2     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
277e6     26 F9 2A F9 
277ea     2E F9 32 F9 
277ee     33 F9 BA FB 
277f2     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
277f6     DE FB E1 FB 
277fa     E2 FB E4 FB 
277fe     E5 FB E7 FB 
27802     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
27806     C5 F9 67 F9 
2780a     57 F9 56 F9 
2780e     5B F9 5F F9 
27812     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
27816     68 F9 6C F9 
2781a     0B FC 11 FC 
2781e     14 FC 15 FC 
27822     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
27826     B5 FB B5 FB 
2782a     B6 FB B8 FB 
2782e     E9 FA C8 F9 
27832     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
27836     90 F9 94 F9 
2783a     95 F9 99 F9 
2783e     9D F9 9F F9 
27842     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
27846     DE FB DF FB 
2784a     E2 FB E4 FB 
2784e     E6 FB E8 FB 
27852     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
27856     EF FB AC FA 
2785a     E9 F9 C7 F9 
2785e     C3 F9 C8 F9 
27862     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
27866     D0 F9 D4 F9 
2786a     D6 F9 0E FB 
2786e     11 FC 13 FC 
27872     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
27876     19 FC 1B FC 
2787a     1D FC 1E FC 
2787e     21 FC 22 FC 
27882     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
27886     F7 F9 F7 F9 
2788a     FB F9 FE F9 
2788e     00 FA 03 FA 
27892     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
27896     1B FC 45 FC 
2789a     46 FC 48 FC 
2789e     4A FC 4B FC 
278a2     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
278a6     52 FC 54 FC 
278aa     F3 FB 82 FA 
278ae     35 FA 28 FA 
278b2     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
278b6     31 FA 32 FA 
278ba     37 FA 37 FA 
278be     3C FA 00 FC 
278c2     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
278c6     09 FC 0B FC 
278ca     0F FC 12 FC 
278ce     12 FC 15 FC 
278d2     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
278d6     8D FA 60 FA 
278da     5B FA 5C FA 
278de     60 FA 61 FA 
278e2     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
278e6     6C FA 6D FA 
278ea     37 FC 3A FC 
278ee     3B FC 3D FC 
278f2     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
278f6     43 FC 44 FC 
278fa     45 FC 47 FC 
278fe     51 FB AB FA 
27902     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
27906     8E FA 91 FA 
2790a     93 FA 95 FA 
2790e     98 FA 9B FA 
27912     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
27916     68 FC 6A FC 
2791a     6C FC 6E FC 
2791e     70 FC 72 FC 
27922     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
27926     76 FC 3B FB 
2792a     D0 FA BB FA 
2792e     B9 FA BD FA 
27932     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
27936     C4 FA C6 FA 
2793a     CA FA 13 FC 
2793e     3A FC 3A FC 
27942     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
27946     41 FC 43 FC 
2794a     44 FC 47 FC 
2794e     48 FC 3C FC 
27952     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
27956     E6 FA E8 FA 
2795a     EB FA EE FA 
2795e     F0 FA F2 FA 
27962     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
27966     61 FC 66 FC 
2796a     68 FC 6B FC 
2796e     6C FC 6E FC 
27972     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
27976     73 FC 75 FC 
2797a     13 FC 3F FB 
2797e     17 FB 12 FB 
27982     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
27986     1A FB 1D FB 
2798a     1F FB 20 FB 
2798e     23 FB 92 FC 
27992     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
27996     96 FC 97 FC 
2799a     9A FC 9C FC 
2799e     9E FC 9F FC 
279a2     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
279a6     5A FB 41 FB 
279aa     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
279ae     01 00 00 00 
279b2     00 00 00 00 
279b6     00 00 00 00 
279ba     00 00 00 00 | mouse  file "mouse2.def"
279be     00 00 00 00 
279c2     00 00 00 00 
279c6     00 00 00 00 
279ca     00 00 00 00 | 	byte	$00[16]
279ce     01 01 00 00 
279d2     00 00 00 00 
279d6     00 00 00 00 
279da     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
279de     00 00 00 00 
279e2     00 00 00 00 
279e6     00 00 00 00 
279ea     00 00 00 00 | 	byte	$00[16]
279ee     01 0D 01 00 
279f2     00 00 00 00 
279f6     00 00 00 00 
279fa     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
279fe     00 00 00 00 
27a02     00 00 00 00 
27a06     00 00 00 00 
27a0a     00 00 00 00 | 	byte	$00[16]
27a0e     01 0D 0D 01 
27a12     00 00 00 00 
27a16     00 00 00 00 
27a1a     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27a1e     00 00 00 00 
27a22     00 00 00 00 
27a26     00 00 00 00 
27a2a     00 00 00 00 | 	byte	$00[16]
27a2e     01 0D 0D 0D 
27a32     01 00 00 00 
27a36     00 00 00 00 
27a3a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27a3e     00 00 00 00 
27a42     00 00 00 00 
27a46     00 00 00 00 
27a4a     00 00 00 00 | 	byte	$00[16]
27a4e     01 0D 0D 0D 
27a52     0D 01 00 00 
27a56     00 00 00 00 
27a5a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27a5e     00 00 00 00 
27a62     00 00 00 00 
27a66     00 00 00 00 
27a6a     00 00 00 00 | 	byte	$00[16]
27a6e     01 0D 0D 0D 
27a72     0D 0D 01 00 
27a76     00 00 00 00 
27a7a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
27a7e     00 00 00 00 
27a82     00 00 00 00 
27a86     00 00 00 00 
27a8a     00 00 00 00 | 	byte	$00[16]
27a8e     01 0D 0D 0D 
27a92     0D 0D 0D 01 
27a96     00 00 00 00 
27a9a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
27a9e     00 00 00 00 
27aa2     00 00 00 00 
27aa6     00 00 00 00 
27aaa     00 00 00 00 | 	byte	$00[16]
27aae     01 0D 0D 0D 
27ab2     0D 0D 0D 0C 
27ab6     01 00 00 00 
27aba     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
27abe     00 00 00 00 
27ac2     00 00 00 00 
27ac6     00 00 00 00 
27aca     00 00 00 00 | 	byte	$00[16]
27ace     01 0D 0D 0D 
27ad2     0D 0D 0D 0D 
27ad6     0C 01 00 00 
27ada     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
27ade     00 00 00 00 
27ae2     00 00 00 00 
27ae6     00 00 00 00 
27aea     00 00 00 00 | 	byte	$00[16]
27aee     01 0D 0D 0D 
27af2     0D 0D 0D 0D 
27af6     0D 0C 01 00 
27afa     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
27afe     00 00 00 00 
27b02     00 00 00 00 
27b06     00 00 00 00 
27b0a     00 00 00 00 | 	byte	$00[16]
27b0e     01 0D 0D 0D 
27b12     0D 0D 0D 0D 
27b16     0D 0D 0B 01 
27b1a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
27b1e     00 00 00 00 
27b22     00 00 00 00 
27b26     00 00 00 00 
27b2a     00 00 00 00 | 	byte	$00[16]
27b2e     01 0D 0D 0D 
27b32     0C 0D 0D 03 
27b36     01 01 01 01 
27b3a     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
27b3e     00 00 00 00 
27b42     00 00 00 00 
27b46     00 00 00 00 
27b4a     00 00 00 00 | 	byte	$00[16]
27b4e     01 0D 0D 0C 
27b52     01 09 0D 03 
27b56     00 00 00 00 
27b5a     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
27b5e     00 00 00 00 
27b62     00 00 00 00 
27b66     00 00 00 00 
27b6a     00 00 00 00 | 	byte	$00[16]
27b6e     01 0D 0C 01 
27b72     00 01 0D 0B 
27b76     01 00 00 00 
27b7a     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
27b7e     00 00 00 00 
27b82     00 00 00 00 
27b86     00 00 00 00 
27b8a     00 00 00 00 | 	byte	$00[16]
27b8e     01 0C 01 00 
27b92     00 01 0A 0D 
27b96     01 00 00 00 
27b9a     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
27b9e     00 00 00 00 
27ba2     00 00 00 00 
27ba6     00 00 00 00 
27baa     00 00 00 00 | 	byte	$00[16]
27bae     01 01 00 00 
27bb2     00 00 01 0D 
27bb6     0B 01 00 00 
27bba     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
27bbe     00 00 00 00 
27bc2     00 00 00 00 
27bc6     00 00 00 00 
27bca     00 00 00 00 
27bce     00 00 00 00 
27bd2     00 00       | 	byte	$00[22]
27bd4     01 0B 0D 01 
27bd8     00 00 00 00 
27bdc     00 00 00 00 
27be0     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27be4     00 00 00 00 
27be8     00 00 00 00 
27bec     00 00 00 00 
27bf0     00 00 00 00 
27bf4     00          | 	byte	$00[17]
27bf5     01 01 00 00 
27bf9     00 00 00 00 
27bfd     00 00 00 00 
27c01     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
27c05     00 00 00 00 
      ...             
27da9     00 00 00 00 
27dad     00          | 	byte	$00[425]
27dae                 | 
27dae     00 00       |              	org
27db0 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
27db4 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
27db8 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
27dbc 003             | 
27dbc 003 00 30 04 F6 |                 mov     psramaddr,#0
27dc0 004             | 
27dc0 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
27dc4 005 20 00 00 FF 
27dc8 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
27dcc 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
27dd0 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
27dd4 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
27dd8 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
27ddc 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
27de0 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
27de4 00d             | 
27de4 00d 20 00 00 FF 
27de8 00e 00 30 04 F1 |                 add 	psramaddr,##16384
27dec 00f E0 03 00 FF 
27df0 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
27df4 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
27df8 012             | 
27df8 012             |                 
27df8 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
27dfc 013             |     
27dfc 013 01 2C 60 FD |                 cogid 	t11				' get id
27e00 014 00 00 EC FC |                 coginit #0,#0				' start the new program
27e04 015 03 2C 60 FD |                 cogstop t11				' stop the loader
27e08 016             | 
27e08 016 00 00 00 00 | t11 		long 	0
27e0c 017 00 FF 07 00 | mailbox 	long 	$7FF00
27e10 018 00 00 00 00 | psramaddr 	long 	0
27e14 019 00 00 00 00 | pslockval	long 	0
27e18 01a 00 00 00 00 | cmd             long    0
27e1c 01b 00 00 00 00 | buf1            long    0
27e20 01c 00 40 00 00 | buf2            long    16384
27e24 01d 28 7E 02 00 | 	long	@@@_dat_ + 8468
27e28 01e 50 32 20 52 
27e2c 01f 65 74 72 6F 
27e30 020 6D 61 63 68 
27e34 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
27e38 022 42 41 53 49 
27e3c 023 43 20 76 65 
27e40 024 72 73 69 6F 
27e44 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
27e48 026 32 33 62 00 | 	byte	$32, $33, $62, $00
27e4c 027             | 	alignl
27e4c 027             | _hg010b_spin2_dat_
27e4c 027             | 
27e4c 027 00 00 00 00 
27e50 028 00 00 00 00 
27e54 029 00 00 00 00 
27e58 02a 00 00 00 00 
27e5c 02b 00 00 00    | vga_font       file "vgafont.def"
27e5f 02b 7E 81 A5 81 
27e63 02c 81 BD 99 81 
27e67 02d 81 7E 00 00 
27e6b 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
27e6f 02f 7E FF DB FF 
27e73 030 FF C3 E7 FF 
27e77 031 FF 7E 00 00 
27e7b 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
27e7f 033 00 36 7F 7F 
27e83 034 7F 7F 3E 1C 
27e87 035 08 00 00 00 
27e8b 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
27e8f 037 00 08 1C 3E 
27e93 038 7F 3E 1C 08 
27e97 039 00 00 00 00 
27e9b 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
27e9f 03b 18 3C 3C E7 
27ea3 03c E7 E7 18 18 
27ea7 03d 3C 00 00 00 
27eab 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
27eaf 03f 18 3C 7E FF 
27eb3 040 FF 7E 18 18 
27eb7 041 3C 00 00 00 
27ebb 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
27ebf 043 00 00 00 18 
27ec3 044 3C 3C 18 00 
27ec7 045 00 00 00 00 
27ecb 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
27ecf 047 FF FF FF E7 
27ed3 048 C3 C3 E7 FF 
27ed7 049 FF FF FF FF 
27edb 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
27edf 04b 00 00 3C 66 
27ee3 04c 42 42 66 3C 
27ee7 04d 00 00 00 00 
27eeb 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
27eef 04f FF FF C3 99 
27ef3 050 BD BD 99 C3 
27ef7 051 FF FF FF FF 
27efb 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
27eff 053 78 70 58 4C 
27f03 054 1E 33 33 33 
27f07 055 33 1E 00 00 
27f0b 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
27f0f 057 3C 66 66 66 
27f13 058 66 3C 18 7E 
27f17 059 18 18 00 00 
27f1b 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
27f1f 05b FC CC FC 0C 
27f23 05c 0C 0C 0C 0E 
27f27 05d 0F 07 00 00 
27f2b 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
27f2f 05f FE C6 FE C6 
27f33 060 C6 C6 C6 E6 
27f37 061 E7 67 03 00 
27f3b 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
27f3f 063 18 18 DB 3C 
27f43 064 E7 3C DB 18 
27f47 065 18 00 00 00 
27f4b 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
27f4f 067 03 07 0F 1F 
27f53 068 7F 1F 0F 07 
27f57 069 03 01 00 00 
27f5b 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
27f5f 06b 60 70 78 7C 
27f63 06c 7F 7C 78 70 
27f67 06d 60 40 00 00 
27f6b 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
27f6f 06f 18 3C 7E 18 
27f73 070 18 18 7E 3C 
27f77 071 18 00 00 00 
27f7b 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
27f7f 073 66 66 66 66 
27f83 074 66 66 66    | 	byte	$66[7]
27f86 075 00 66 66 00 
27f8a 076 00 00 00 00 
27f8e 077 00 FE DB DB 
27f92 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
27f96 079 D8 D8 D8 00 
27f9a 07a 00 00 00 3E 
27f9e 07b 63 06 1C 36 
27fa2 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
27fa6 07d 30 63 3E 00 
27faa 07e 00 00 00 00 
27fae 07f 00 00 00 00 
27fb2 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
27fb6 081 7F 7F 7F 00 
27fba 082 00 00 00 00 
27fbe 083 00 18 3C 7E 
27fc2 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
27fc6 085 3C 18 7E 00 
27fca 086 00 00 00 00 
27fce 087 00 18 3C 7E 
27fd2 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
27fd6 089 18 18 18 00 
27fda 08a 00 00 00 00 
27fde 08b 00 18 18 18 
27fe2 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
27fe6 08d 7E 3C 18 00 
27fea 08e 00 00 00 00 
27fee 08f 00 00 00 18 
27ff2 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
27ff6 091 00 00 00 00 
27ffa 092 00 00 00 00 
27ffe 093 00 00 00    | 	byte	$00[11]
28001 094 0C 06 7F 06 
28005 095 0C 00 00 00 
28009 096 00 00 00 00 
2800d 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28011 098 00 03 03 03 
28015 099 7F 00 00 00 
28019 09a 00 00 00 00 
2801d 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28021 09c 14 36 7F 36 
28025 09d 14 00 00 00 
28029 09e 00 00 00 00 
2802d 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
28031 0a0 1C 1C 3E 3E 
28035 0a1 7F 7F 00 00 
28039 0a2 00 00 00 00 
2803d 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
28041 0a4 7F 3E 3E 1C 
28045 0a5 1C 08 00 00 
28049 0a6 00 00 00 00 
2804d 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28051 0a8 00 00 00 00 
28055 0a9 00 00 00 00 
28059 0aa 00 00 00 00 
2805d 0ab 00 00       | 	byte	$00[14]
2805f 0ab 18 3C 3C 3C 
28063 0ac 18 18 18 00 
28067 0ad 18 18 00 00 
2806b 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
2806f 0af 66 24 00 00 
28073 0b0 00 00 00 00 
28077 0b1 00 00 00 00 
2807b 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2807f 0b3 00 36 36 7F 
28083 0b4 36 36 36 7F 
28087 0b5 36 36 00 00 
2808b 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
2808f 0b7 3E 63 43 03 
28093 0b8 3E 60 60 61 
28097 0b9 63 3E 18 18 
2809b 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
2809f 0bb 00 00 43 63 
280a3 0bc 30 18 0C 06 
280a7 0bd 63 61 00 00 
280ab 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
280af 0bf 1C 36 36 1C 
280b3 0c0 6E 3B 33 33 
280b7 0c1 33 6E 00 00 
280bb 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
280bf 0c3 0C 0C 0C 06 
280c3 0c4 00 00 00 00 
280c7 0c5 00 00 00 00 
280cb 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
280cf 0c7 30 18 0C 0C 
280d3 0c8 0C 0C 0C 0C 
280d7 0c9 18 30 00 00 
280db 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
280df 0cb 0C 18 30 30 
280e3 0cc 30 30 30 30 
280e7 0cd 18 0C 00 00 
280eb 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
280ef 0cf 00 00 00 66 
280f3 0d0 3C FF 3C 66 
280f7 0d1 00 00 00 00 
280fb 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
280ff 0d3 00 00 00 18 
28103 0d4 18 7E 18 18 
28107 0d5 00 00 00 00 
2810b 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
2810f 0d7 00 00 00 00 
28113 0d8 00 00 00 00 | 	byte	$00[8]
28117 0d9 18 18 18 0C 
2811b 0da 00 00 00 00 
2811f 0db 00 00 00 00 
28123 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
28127 0dd 00 00 00 00 
2812b 0de 00 00 00 00 
2812f 0df 00 00 00 00 
28133 0e0 00 00 00 00 | 	byte	$00[16]
28137 0e1 18 18 00 00 
2813b 0e2 00 00 00 00 
2813f 0e3 00 00 40 60 
28143 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
28147 0e5 03 01 00 00 
2814b 0e6 00 00 00 00 
2814f 0e7 1C 36 63 63 
28153 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
28157 0e9 36 1C 00 00 
2815b 0ea 00 00 00 00 
2815f 0eb 18 1C 1E 18 
28163 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
28167 0ed 18 7E 00 00 
2816b 0ee 00 00 00 00 
2816f 0ef 3E 63 60 30 
28173 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
28177 0f1 63 7F 00 00 
2817b 0f2 00 00 00 00 
2817f 0f3 3E 63 60 60 
28183 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
28187 0f5 63 3E 00 00 
2818b 0f6 00 00 00 00 
2818f 0f7 30 38 3C 36 
28193 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
28197 0f9 30 78 00 00 
2819b 0fa 00 00 00 00 
2819f 0fb 7F 03 03 03 
281a3 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
281a7 0fd 63 3E 00 00 
281ab 0fe 00 00 00 00 
281af 0ff 1C 06 03 03 
281b3 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
281b7 101 63 3E 00 00 
281bb 102 00 00 00 00 
281bf 103 7F 63 60 60 
281c3 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
281c7 105 0C 0C 00 00 
281cb 106 00 00 00 00 
281cf 107 3E 63 63 63 
281d3 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
281d7 109 63 3E 00 00 
281db 10a 00 00 00 00 
281df 10b 3E 63 63 63 
281e3 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
281e7 10d 30 1E 00 00 
281eb 10e 00 00 00 00 
281ef 10f 00 00 00 18 
281f3 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
281f7 111 18 18 00 00 
281fb 112 00 00 00 00 
281ff 113 00 00 00 18 
28203 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
28207 115 18 18 0C 00 
2820b 116 00 00 00 00 
2820f 117 00 60 30 18 
28213 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
28217 119 30 60 00 00 
2821b 11a 00 00 00 00 
2821f 11b 00 00 00 7E 
28223 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
28227 11d 00 00 00 00 
2822b 11e 00 00 00 00 
2822f 11f 00          | 	byte	$00[9]
28230 120 06 0C 18 30 
28234 121 60 30 18 0C 
28238 122 06 00 00 00 
2823c 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
28240 124 63 63 30 18 
28244 125 18 18 00 18 
28248 126 18 00 00 00 
2824c 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
28250 128 3E 63 63 7B 
28254 129 7B 7B 3B 03 
28258 12a 3E 00 00 00 
2825c 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
28260 12c 1C 36 63 63 
28264 12d 7F 63 63 63 
28268 12e 63 00 00 00 
2826c 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
28270 130 66 66 66 3E 
28274 131 66 66 66 66 
28278 132 3F 00 00 00 
2827c 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
28280 134 66 43 03 03 
28284 135 03 03 43 66 
28288 136 3C 00 00 00 
2828c 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
28290 138 36 66 66 66 
28294 139 66 66 66 36 
28298 13a 1F 00 00 00 
2829c 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
282a0 13c 66 46 16 1E 
282a4 13d 16 06 46 66 
282a8 13e 7F 00 00 00 
282ac 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
282b0 140 66 46 16 1E 
282b4 141 16 06 06 06 
282b8 142 0F 00 00 00 
282bc 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
282c0 144 66 43 03 03 
282c4 145 7B 63 63 66 
282c8 146 5C 00 00 00 
282cc 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
282d0 148 63 63 63 7F 
282d4 149 63 63 63 63 
282d8 14a 63 00 00 00 
282dc 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
282e0 14c 18 18 18 18 
282e4 14d 18 18 18 18 | 	byte	$18[8]
282e8 14e 3C 00 00 00 
282ec 14f 00 00 00 78 
282f0 150 30 30 30 30 
282f4 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
282f8 152 1E 00 00 00 
282fc 153 00 00 00 67 
28300 154 66 66 36 1E 
28304 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
28308 156 67 00 00 00 
2830c 157 00 00 00 0F 
28310 158 06 06 06 06 
28314 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
28318 15a 7F 00 00 00 
2831c 15b 00 00 00 63 
28320 15c 77 7F 7F 6B 
28324 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
28328 15e 63 00 00 00 
2832c 15f 00 00 00 63 
28330 160 67 6F 7F 7B 
28334 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
28338 162 63 00 00 00 
2833c 163 00 00 00 3E 
28340 164 63 63 63 63 
28344 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
28348 166 3E 00 00 00 
2834c 167 00 00 00 3F 
28350 168 66 66 66 3E 
28354 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
28358 16a 0F 00 00 00 
2835c 16b 00 00 00 3E 
28360 16c 63 63 63 63 
28364 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
28368 16e 3E 30 70 00 
2836c 16f 00 00 00 3F 
28370 170 66 66 66 3E 
28374 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
28378 172 67 00 00 00 
2837c 173 00 00 00 3E 
28380 174 63 63 06 1C 
28384 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
28388 176 3E 00 00 00 
2838c 177 00 00 00 7E 
28390 178 7E 5A 18 18 
28394 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
28398 17a 3C 00 00 00 
2839c 17b 00 00 00 63 
283a0 17c 63 63 63 63 
283a4 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
283a8 17e 3E 00 00 00 
283ac 17f 00 00 00 63 
283b0 180 63 63 63 63 
283b4 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
283b8 182 08 00 00 00 
283bc 183 00 00 00 63 
283c0 184 63 63 63 6B 
283c4 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
283c8 186 36 00 00 00 
283cc 187 00 00 00 63 
283d0 188 63 36 3E 1C 
283d4 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
283d8 18a 63 00 00 00 
283dc 18b 00 00 00 66 
283e0 18c 66 66 66 3C 
283e4 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
283e8 18e 3C 00 00 00 
283ec 18f 00 00 00 7F 
283f0 190 63 61 30 18 
283f4 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
283f8 192 7F 00 00 00 
283fc 193 00 00 00 3C 
28400 194 0C 0C 0C 0C 
28404 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
28408 196 3C 00 00 00 
2840c 197 00 00 00 00 
28410 198 01 03 07 0E 
28414 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
28418 19a 40 00 00 00 
2841c 19b 00 00 00 3C 
28420 19c 30 30 30 30 
28424 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
28428 19e 3C 00 00 00 
2842c 19f 1C 36 00 00 
28430 1a0 00 00 00 00 
28434 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28438 1a2 00 00 00 00 
2843c 1a3 00 00 00 00 
28440 1a4 00 00 00 00 
28444 1a5 00 00 00 00 
28448 1a6 00          | 	byte	$00[17]
28449 1a6 FF 00 00 0C 
2844d 1a7 18 00 00 00 
28451 1a8 00 00 00 00 
28455 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28459 1aa 00 00 00 00 
2845d 1ab 00 00 00 00 
28461 1ac 00          | 	byte	$00[9]
28462 1ac 1E 30 3E 33 
28466 1ad 33 33 6E 00 
2846a 1ae 00 00 00 00 
2846e 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
28472 1b0 1E 36 66 66 
28476 1b1 66 66 3E 00 
2847a 1b2 00 00 00 00 
2847e 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
28482 1b4 3E 63 03 03 
28486 1b5 03 63 3E 00 
2848a 1b6 00 00 00 00 
2848e 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
28492 1b8 3C 36 33 33 
28496 1b9 33 33 6E 00 
2849a 1ba 00 00 00 00 
2849e 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
284a2 1bc 3E 63 7F 03 
284a6 1bd 03 63 3E 00 
284aa 1be 00 00 00 00 
284ae 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
284b2 1c0 0C 1E 0C 0C 
284b6 1c1 0C 0C 1E 00 
284ba 1c2 00 00 00 00 
284be 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
284c2 1c4 6E 33 33 33 
284c6 1c5 33 33 3E 30 
284ca 1c6 33 1E 00 00 
284ce 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
284d2 1c8 36 6E 66 66 
284d6 1c9 66 66 67 00 
284da 1ca 00 00 00 00 
284de 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
284e2 1cc 1C 18 18 18 
284e6 1cd 18 18 3C 00 
284ea 1ce 00 00 00 00 
284ee 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
284f2 1d0 70 60 60 60 
284f6 1d1 60 60 60 66 
284fa 1d2 66 3C 00 00 
284fe 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
28502 1d4 66 36 1E 1E 
28506 1d5 36 66 67 00 
2850a 1d6 00 00 00 00 
2850e 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
28512 1d8 18 18 18 18 
28516 1d9 18 18       | 	byte	$18[6]
28518 1da 3C 00 00 00 
2851c 1db 00 00 00 00 
28520 1dc 00 00 37 7F 
28524 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
28528 1de 63 00 00 00 
2852c 1df 00 00 00 00 
28530 1e0 00 00 3B 66 
28534 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
28538 1e2 66 00 00 00 
2853c 1e3 00 00 00 00 
28540 1e4 00 00 3E 63 
28544 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
28548 1e6 3E 00 00 00 
2854c 1e7 00 00 00 00 
28550 1e8 00 00 3B 66 
28554 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
28558 1ea 3E 06 06 0F 
2855c 1eb 00 00 00 00 
28560 1ec 00 00 6E 33 
28564 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
28568 1ee 3E 30 30 78 
2856c 1ef 00 00 00 00 
28570 1f0 00 00 3B 6E 
28574 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
28578 1f2 0F 00 00 00 
2857c 1f3 00 00 00 00 
28580 1f4 00 00 3E 63 
28584 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
28588 1f6 3E 00 00 00 
2858c 1f7 00 00 00 08 
28590 1f8 0C 0C 3F 0C 
28594 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
28598 1fa 38 00 00 00 
2859c 1fb 00 00 00 00 
285a0 1fc 00 00 33 33 
285a4 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
285a8 1fe 6E 00 00 00 
285ac 1ff 00 00 00 00 
285b0 200 00 00 63 63 
285b4 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
285b8 202 1C 00 00 00 
285bc 203 00 00 00 00 
285c0 204 00 00 63 63 
285c4 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
285c8 206 36 00 00 00 
285cc 207 00 00 00 00 
285d0 208 00 00 63 36 
285d4 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
285d8 20a 63 00 00 00 
285dc 20b 00 00 00 00 
285e0 20c 00 00 63 63 
285e4 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
285e8 20e 7E 60 30 1F 
285ec 20f 00 00 00 00 
285f0 210 00 00 7F 33 
285f4 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
285f8 212 7F 00 00 00 
285fc 213 00 00 00 70 
28600 214 18 18 18 0E 
28604 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
28608 216 70 00 00 00 
2860c 217 00 00 00 18 
28610 218 18 18 18 18 
28614 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
28618 21a 18 00 00 00 
2861c 21b 00 00 00 0E 
28620 21c 18 18 18 70 
28624 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
28628 21e 0E 00 00 00 
2862c 21f 6E 3B 00 00 
28630 220 00 00 00 00 
28634 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28638 222 00 00 00 00 
2863c 223 00 00 00 00 
28640 224 00 00       | 	byte	$00[10]
28642 224 08 1C 36 63 
28646 225 63 63 7F 00 
2864a 226 00 00 00 00 
2864e 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
28652 228 03 03 03 03 
28656 229 43 66 3C 18 
2865a 22a 30 1E 00 00 
2865e 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
28662 22c 33 33 33 33 
28666 22d 33 33       | 	byte	$33[6]
28668 22e 6E 00 00 00 
2866c 22f 00 00 60 30 
28670 230 18 00 3E 63 
28674 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
28678 232 3E 00 00 00 
2867c 233 00 00 08 1C 
28680 234 36 00 1E 30 
28684 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
28688 236 6E 00 00 00 
2868c 237 00 00 00 00 
28690 238 33 00 1E 30 
28694 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
28698 23a 6E 00 00 00 
2869c 23b 00 00 1C 36 
286a0 23c 1C 00 33 33 
286a4 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
286a8 23e 6E 00 00 00 
286ac 23f 00 00 60 30 
286b0 240 18 00 3E 63 
286b4 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
286b8 242 3E 00 00 00 
286bc 243 00 00 00 00 
286c0 244 00 00 3E 63 
286c4 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
286c8 246 3E 18 30 1E 
286cc 247 00 00 00 1C 
286d0 248 58 78 38 18 
286d4 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
286d8 24a 3C 00 00 00 
286dc 24b 00 00 00 00 
286e0 24c 63 00 3E 63 
286e4 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
286e8 24e 3E 00 00 00 
286ec 24f 66 33 00 3E 
286f0 250 63 63 63 63 
286f4 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
286f8 252 3E 00 00 00 
286fc 253 00 00 CC 66 
28700 254 33 00 3E 63 
28704 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
28708 256 3E 00 00 00 
2870c 257 00 00 18 3C 
28710 258 66 00 1C 18 
28714 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
28718 25a 3C 00 00 00 
2871c 25b 30 18 00 7F 
28720 25c 63 61 30 18 
28724 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
28728 25e 7F 00 00 00 
2872c 25f 00 63 00 08 
28730 260 1C 36 63 63 
28734 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
28738 262 63 00 00 00 
2873c 263 30 18 00 3C 
28740 264 66 43 03 03 
28744 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
28748 266 3C 00 00 00 
2874c 267 30 18 00 7F 
28750 268 66 46 16 1E 
28754 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
28758 26a 7F 00 00 00 
2875c 26b 0C 06 00 0F 
28760 26c 06 06 06 06 
28764 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
28768 26e 7F 00 00 00 
2876c 26f 30 18 00 1C 
28770 270 18 18 18 18 
28774 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
28778 272 3C 00 00 00 
2877c 273 00 00 08 1C 
28780 274 36 00 3E 63 
28784 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
28788 276 3E 00 00 00 
2878c 277 00 00 00 00 
28790 278 63 00 3E 63 
28794 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
28798 27a 3E 00 00 00 
2879c 27b 00 00 00 6F 
287a0 27c 46 26 06 06 
287a4 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
287a8 27e 7F 00 00 00 
287ac 27f 00 00 00 6E 
287b0 280 4C 2C 0C 0C 
287b4 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
287b8 282 1E 00 00 00 
287bc 283 30 18 00 3E 
287c0 284 63 63 06 1C 
287c4 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
287c8 286 3E 00 00 00 
287cc 287 00 00 60 30 
287d0 288 18 00 3E 63 
287d4 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
287d8 28a 3E 00 00 00 
287dc 28b 00 63 00 3E 
287e0 28c 63 63 63 63 
287e4 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
287e8 28e 3E 00 00 00 
287ec 28f 00 63 00 63 
287f0 290 63 63 63 63 
287f4 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
287f8 292 3E 00 00 00 
287fc 293 6C 38 00 7E 
28800 294 7E 5A 18 18 
28804 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
28808 296 3C 00 00 00 
2880c 297 00 00 60 48 
28810 298 2C 0C 3F 0C 
28814 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
28818 29a 38 00 00 00 
2881c 29b 00 00 00 0F 
28820 29c 26 36 1E 0E 
28824 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
28828 29e 7F 00 00 00 
2882c 29f 00 00 00 00 
28830 2a0 00 63 36 1C 
28834 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
28838 2a2 00 00 00 00 
2883c 2a3 00 00       | 	byte	$00[6]
2883e 2a3 36 1C 08 00 
28842 2a4 3E 63 03 03 
28846 2a5 03 63 3E 00 
2884a 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
2884e 2a7 30 18 0C 00 
28852 2a8 1E 30 3E 33 
28856 2a9 33 33 6E 00 
2885a 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2885e 2ab 60 30 18 00 
28862 2ac 1C 18 18 18 
28866 2ad 18 18 3C 00 
2886a 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
2886e 2af 60 30 18 00 
28872 2b0 3E 63 63 63 
28876 2b1 63 63 3E 00 
2887a 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
2887e 2b3 30 18 0C 00 
28882 2b4 33 33 33 33 
28886 2b5 33 33 6E 00 
2888a 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
2888e 2b7 00 08 1C 36 
28892 2b8 63 63 7F 63 
28896 2b9 63 63 63 18 
2889a 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
2889e 2bb 00 00 00 00 
288a2 2bc 1E 30 3E 33 
288a6 2bd 33 33 6E 18 
288aa 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
288ae 2bf 00 7F 63 61 
288b2 2c0 30 18 0C 06 
288b6 2c1 43 63 7F 00 
288ba 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
288be 2c3 36 1C 08 00 
288c2 2c4 7F 33 18 0C 
288c6 2c5 06 63 7F 00 
288ca 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
288ce 2c7 00 7F 66 46 
288d2 2c8 16 1E 16 06 
288d6 2c9 46 66 7F 18 
288da 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
288de 2cb 00 00 00 00 
288e2 2cc 3E 63 7F 03 
288e6 2cd 03 63 3E 18 
288ea 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
288ee 2cf 00 3C 66 03 
288f2 2d0 1F 03 0F 03 
288f6 2d1 03 66 3C 00 
288fa 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
288fe 2d3 60 30 18 00 
28902 2d4 7F 33 18 0C 
28906 2d5 06 63 7F 00 
2890a 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
2890e 2d7 00 3C 66 43 
28912 2d8 03 03 03 03 
28916 2d9 43 66 3C 00 
2891a 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
2891e 2db 00 00 00 00 
28922 2dc 3E 63 06 1C 
28926 2dd 30 63 3E 18 
2892a 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
2892e 2df 00 00 00 00 
28932 2e0 00 00       | 	byte	$00[6]
28934 2e1 6C 36 1B 36 
28938 2e2 6C 00 00 00 
2893c 2e3 00 00 00 00 
28940 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28944 2e5 1B 36 6C 36 
28948 2e6 1B 00 00 00 
2894c 2e7 88 22 88 22 
28950 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
28954 2e9 88 22 88 22 
28958 2ea 88 22 88 22 
2895c 2eb AA 55 AA 55 
28960 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
28964 2ed AA 55 AA 55 
28968 2ee AA 55 AA 55 
2896c 2ef BB EE BB EE 
28970 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
28974 2f1 BB EE BB EE 
28978 2f2 BB EE BB EE 
2897c 2f3 18 18 18 18 
28980 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
28984 2f5 18 18 18 18 
28988 2f6 18 18 18 18 
2898c 2f7 18 18 18 18 
28990 2f8 18 18 18    | 	byte	$18[15]
28993 2f8 1F 18 18 18 
28997 2f9 18 18 18 18 
2899b 2fa 18 30 18 00 
2899f 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
289a3 2fc 63 7F 63 63 
289a7 2fd 63 63 00 00 
289ab 2fe 00 1C 36 00 
289af 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
289b3 300 63 7F 63 63 
289b7 301 63 63 00 00 
289bb 302 00 36 1C 00 
289bf 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
289c3 304 1E 16 06 46 
289c7 305 66 7F 00 00 
289cb 306 00 00 00 00 
289cf 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
289d3 308 1C 30 60 63 
289d7 309 63 3E 18 30 
289db 30a 1E 6C 6C 6C 
289df 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
289e3 30c 6F 6C 6C 6C 
289e7 30d 6C 6C 6C 6C 
289eb 30e 6C 6C 6C 6C 
289ef 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
289f3 310 6C 6C 6C 6C 
289f7 311 6C 6C 6C 6C 
289fb 312 6C          | 	byte	$6c[9]
289fc 313 00 00 00 00 
28a00 314 00          | 	byte	$00[5]
28a01 314 7F 60 6F 6C 
28a05 315 6C 6C 6C 6C 
28a09 316 6C 6C 6C 6C 
28a0d 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
28a11 318 6F 60 7F 00 
28a15 319 00 00 00 00 
28a19 31a 00 00 00 18 
28a1d 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
28a21 31c 61 30 18 0C 
28a25 31d 06 43 63 7F 
28a29 31e 00 00 00 00 
28a2d 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
28a31 320 00 7F 33 18 
28a35 321 0C 06 63 7F 
28a39 322 00 00 00 00 
28a3d 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
28a41 324 00 00 1F 18 
28a45 325 18 18 18 18 
28a49 326 18 18 18 18 
28a4d 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
28a51 328 18 18 F8 00 
28a55 329 00 00 00 00 
28a59 32a 00 00 00 18 
28a5d 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
28a61 32c 18 18 FF 00 
28a65 32d 00 00 00 00 
28a69 32e 00 00 00 00 
28a6d 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28a71 330 00 00 FF 18 
28a75 331 18 18 18 18 
28a79 332 18 18 18 18 
28a7d 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
28a81 334 18 18 F8 18 
28a85 335 18 18 18 18 
28a89 336 18 18 18 00 
28a8d 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
28a91 338 00 00 FF 00 
28a95 339 00 00 00 00 
28a99 33a 00 00 00 18 
28a9d 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
28aa1 33c 18 18 FF 18 
28aa5 33d 18 18 18 18 
28aa9 33e 18 18 18 63 
28aad 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
28ab1 340 36 63 63 7F 
28ab5 341 63 63 63 63 
28ab9 342 00 00 00 00 
28abd 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
28ac1 344 00 1E 30 3E 
28ac5 345 33 33 33 6E 
28ac9 346 00 00 00 6C 
28acd 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
28ad1 348 EC 0C FC 00 
28ad5 349 00 00 00 00 
28ad9 34a 00 00 00 00 
28add 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28ae1 34c FC 0C EC 6C 
28ae5 34d 6C 6C 6C 6C 
28ae9 34e 6C 6C 6C 6C 
28aed 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
28af1 350 EF 00 FF 00 
28af5 351 00 00 00 00 
28af9 352 00 00 00 00 
28afd 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28b01 354 FF 00 EF 6C 
28b05 355 6C 6C 6C 6C 
28b09 356 6C 6C 6C 6C 
28b0d 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
28b11 358 EC 0C EC 6C 
28b15 359 6C 6C 6C 6C 
28b19 35a 6C 6C 6C 00 
28b1d 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
28b21 35c FF 00 FF 00 
28b25 35d 00 00 00 00 
28b29 35e 00 00 00 6C 
28b2d 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
28b31 360 EF 00 EF 6C 
28b35 361 6C 6C 6C 6C 
28b39 362 6C 6C 6C 00 
28b3d 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
28b41 364 63 3E 63 63 
28b45 365 63 63 3E 63 
28b49 366 00 00 00 00 
28b4d 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
28b51 368 30 3C 36 33 
28b55 369 33 33 33 6E 
28b59 36a 00 00 00 00 
28b5d 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
28b61 36c 66 66 6F 66 
28b65 36d 66 66 36 1F 
28b69 36e 00 00 00 36 
28b6d 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
28b71 370 66 66 66 66 
28b75 371 66 66       | 	byte	$66[6]
28b77 371 36 1F 00 00 
28b7b 372 00 00 63 00 
28b7f 373 7F 66 46 16 
28b83 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
28b87 375 66 7F 00 00 
28b8b 376 00 6C 38 00 
28b8f 377 38 30 30 3C 
28b93 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
28b97 379 33 6E 00 00 
28b9b 37a 00 36 1C 00 
28b9f 37b 63 67 6F 7F 
28ba3 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
28ba7 37d 63 63 00 00 
28bab 37e 00 30 18 00 
28baf 37f 3C 18 18 18 
28bb3 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
28bb7 381 18 3C 00 00 
28bbb 382 00 3C 66 00 
28bbf 383 3C 18 18 18 
28bc3 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
28bc7 385 18 3C 00 00 
28bcb 386 00 00 00 36 
28bcf 387 1C 08 00 3E 
28bd3 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
28bd7 389 63 3E 00 00 
28bdb 38a 00 18 18 18 
28bdf 38b 18 18 18 18 
28be3 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
28be7 38d 00 00 00 00 
28beb 38e 00 00 00 00 
28bef 38f 00 00 00 00 | 	byte	$00[12]
28bf3 390 F8 18 18 18 
28bf7 391 18 18 18 18 
28bfb 392 18 FF FF FF 
28bff 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
28c03 394 FF FF FF FF 
28c07 395 FF FF FF FF 
28c0b 396 FF          | 	byte	$ff[9]
28c0c 397 00 00 00 00 
28c10 398 00 00 00    | 	byte	$00[7]
28c13 398 FF FF FF FF 
28c17 399 FF FF FF FF 
28c1b 39a FF          | 	byte	$ff[9]
28c1c 39b 00 00 00 7E 
28c20 39c 7E 5A 18 18 
28c24 39d 18 18 18 18 
28c28 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
28c2c 39f 1C 36 1C 63 
28c30 3a0 63 63 63 63 
28c34 3a1 63 63 63 63 
28c38 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
28c3c 3a3 FF FF FF FF 
28c40 3a4 FF FF FF    | 	byte	$ff[7]
28c43 3a4 00 00 00 00 
28c47 3a5 00 00 00 00 
28c4b 3a6 00          | 	byte	$00[9]
28c4c 3a7 30 18 00 3E 
28c50 3a8 63 63 63 63 
28c54 3a9 63 63 63 63 
28c58 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
28c5c 3ab 00 00 00 1E 
28c60 3ac 33 33 33 1B 
28c64 3ad 33 63 63 63 
28c68 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
28c6c 3af 1C 36 00 3E 
28c70 3b0 63 63 63 63 
28c74 3b1 63 63 63 63 
28c78 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
28c7c 3b3 30 18 00 63 
28c80 3b4 67 6F 7F 7B 
28c84 3b5 73 63 63 63 
28c88 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
28c8c 3b7 00 00 60 30 
28c90 3b8 18 00 3B 66 
28c94 3b9 66 66 66 66 
28c98 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
28c9c 3bb 00 00 36 1C 
28ca0 3bc 08 00 3B 66 
28ca4 3bd 66 66 66 66 
28ca8 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
28cac 3bf 36 1C 00 3E 
28cb0 3c0 63 63 06 1C 
28cb4 3c1 30 60 63 63 
28cb8 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
28cbc 3c3 00 00 36 1C 
28cc0 3c4 08 00 3E 63 
28cc4 3c5 06 1C 30 63 
28cc8 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
28ccc 3c7 30 18 00 3F 
28cd0 3c8 66 66 66 3E 
28cd4 3c9 36 66 66 66 
28cd8 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
28cdc 3cb 30 18 00 63 
28ce0 3cc 63 63 63 63 
28ce4 3cd 63 63 63 63 
28ce8 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
28cec 3cf 00 00 60 30 
28cf0 3d0 18 00 3B 6E 
28cf4 3d1 66 06 06 06 
28cf8 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
28cfc 3d3 66 33 00 63 
28d00 3d4 63 63 63 63 
28d04 3d5 63 63 63 63 
28d08 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
28d0c 3d7 00 00 60 30 
28d10 3d8 18 00 63 63 
28d14 3d9 63 63 63 63 
28d18 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
28d1c 3db 30 18 00 66 
28d20 3dc 66 66 66 3C 
28d24 3dd 18 18 18 18 
28d28 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
28d2c 3df 00 00 00 08 
28d30 3e0 0C 0C 3F 0C 
28d34 3e1 0C 0C 0C 6C 
28d38 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
28d3c 3e3 30 18 00 00 
28d40 3e4 00 00 00 00 
28d44 3e5 00 00 00 00 
28d48 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28d4c 3e7 00 00 00 00 
28d50 3e8 00 00 00 00 | 	byte	$00[8]
28d54 3e9 7F 00 00 00 
28d58 3ea 00 00 00 00 
28d5c 3eb 66 33 00 00 
28d60 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
28d64 3ed 00 00 00 00 
28d68 3ee 00 00 00 00 
28d6c 3ef 00 00 00 00 
28d70 3f0 00 00 00 00 
28d74 3f1 00 00 00 00 
28d78 3f2 00          | 	byte	$00[21]
28d79 3f2 0C 06 3C 36 
28d7d 3f3 1C 00 00 00 
28d81 3f4 00 00 00 00 
28d85 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28d89 3f6 00 00 00 63 
28d8d 3f7 3E 00 00 00 
28d91 3f8 00 00 00 00 
28d95 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28d99 3fa 00 00 00 00 
28d9d 3fb 3E 63 06 1C 
28da1 3fc 36 63 63 36 
28da5 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
28da9 3fe 00 00 00 00 
28dad 3ff 00 00 00 00 | 	byte	$00[8]
28db1 400 18 00 7E 00 
28db5 401 18 00 00 00 
28db9 402 00 00 00 00 
28dbd 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28dc1 404 00 00 00 00 
28dc5 405 00 00 00 00 | 	byte	$00[8]
28dc9 406 18 30 1E 00 
28dcd 407 00 00 1C 36 
28dd1 408 36 1C 00 00 
28dd5 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
28dd9 40a 00 00 00 00 
28ddd 40b 63 00 00 00 
28de1 40c 00 00 00 00 
28de5 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28de9 40e 00 00 00 18 
28ded 40f 18 00 00 00 
28df1 410 00 00 00 00 
28df5 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28df9 412 00 00 00 00 
28dfd 413 00          | 	byte	$00[5]
28dfe 413 CC 66 33 00 
28e02 414 33 33 33 33 
28e06 415 33 33 6E 00 
28e0a 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
28e0e 417 00 3F 66 66 
28e12 418 66 3E 36 66 
28e16 419 66 66 6F 00 
28e1a 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
28e1e 41b 36 1C 08 00 
28e22 41c 3B 6E 66 06 
28e26 41d 06 06 0F 00 
28e2a 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
28e2e 41f 00 00 00 7E 
28e32 420 7E 7E 7E 7E 
28e36 421 7E 7E 00 00 
28e3a 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
28e3e 423 00 00 00 00 
28e42 424 00 00 00 00 
28e46 425 00 00 00 00 
28e4a 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
28e4c 427             | 'vga_font       file "vgafont.def"
28e4c 427 00 00 00 00 
      ...             
28e7c 433 00 00 00 00 
28e80 434 00 00 00    | st_font        file "st4font.def"
28e83 434 FF FF 00 00 
28e87 435 00 00 00 00 
28e8b 436 00 18 18 18 
28e8f 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
28e93 438 18 18 18 18 
28e97 439 18 18 18 18 
28e9b 43a 18          | 	byte	$18[9]
28e9c 43b 00 00 00 00 
28ea0 43c 00 00 00    | 	byte	$00[7]
28ea3 43c FF FF 18 18 
28ea7 43d 18 18 18 18 
28eab 43e 18 18 18 18 
28eaf 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
28eb3 440 FF FF 00 00 
28eb7 441 00 00 00 00 
28ebb 442 00 18 18 18 
28ebf 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
28ec3 444 1F 1F 18 18 
28ec7 445 18 18 18 18 
28ecb 446 18 18 18 18 
28ecf 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
28ed3 448 F8 F8 18 18 
28ed7 449 18 18 18 18 
28edb 44a 18 00 00 00 
28edf 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
28ee3 44c 1F 1F 18 18 
28ee7 44d 18 18 18 18 
28eeb 44e 18 00 00 00 
28eef 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
28ef3 450 F8 F8 18 18 
28ef7 451 18 18 18 18 
28efb 452 18 18 18 18 
28eff 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
28f03 454 1F 1F 00 00 
28f07 455 00 00 00 00 
28f0b 456 00 18 18 18 
28f0f 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
28f13 458 F8 F8 00 00 
28f17 459 00 00 00 00 
28f1b 45a 00 18 18 18 
28f1f 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
28f23 45c FF FF 18 18 
28f27 45d 18 18 18 18 
28f2b 45e 18 00 00 18 
28f2f 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
28f33 460 66 7E 7E 66 
28f37 461 66 66 66 30 
28f3b 462 18 00 00 7E 
28f3f 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
28f43 464 3E 06 06 06 
28f47 465 06 7E 7E 18 
28f4b 466 0C 30 18 3C 
28f4f 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
28f53 468 06 06 06 66 
28f57 469 66 7E 3C 00 
28f5b 46a 00 30 18 66 
28f5f 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
28f63 46c 7E 7E 76 76 
28f67 46d 66 66 66 00 
28f6b 46e 00 30 18 7C 
28f6f 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
28f73 470 1C 38 70 60 
28f77 471 60 7E 3E 00 
28f7b 472 00 30 18 7E 
28f7f 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
28f83 474 18 0C 0C 06 
28f87 475 06 7E 7E 00 
28f8b 476 00 18 18 00 
28f8f 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
28f93 478 18 18 0C 0C 
28f97 479 06 7E 7E 00 
28f9b 47a 00 30 18 3C 
28f9f 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
28fa3 47c 66 66 66 66 
28fa7 47d 66          | 	byte	$66[5]
28fa8 47e 7E 3C 00 00 
28fac 47f 00 00 06 06 
28fb0 480 06 06 16 1E 
28fb4 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
28fb8 482 7E 7E 00 00 
28fbc 483 00 00 00 00 
28fc0 484 00 3C 7C 60 
28fc4 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
28fc8 486 7E 7C 30 18 
28fcc 487 00 00 00 00 
28fd0 488 00 3C 7E 66 
28fd4 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
28fd8 48a 7E 7C 18 0C 
28fdc 48b 00 00 30 18 
28fe0 48c 00 3C 3E 06 
28fe4 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
28fe8 48e 7E 7C 00 00 
28fec 48f 00 00 30 18 
28ff0 490 00 3E 7E 66 
28ff4 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
28ff8 492 66 66 00 00 
28ffc 493 00 00 30 18 
29000 494 00 7C 7E 06 
29004 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
29008 496 7E 3E 00 00 
2900c 497 00 00 30 18 
29010 498 00 7E 7E 30 
29014 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
29018 49a 7E 7E 00 00 
2901c 49b 00 00 18 18 
29020 49c 00 7E 7E 30 
29024 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
29028 49e 7E 7E 00 00 
2902c 49f 00 00 30 18 
29030 4a0 00 3C 7E 66 
29034 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
29038 4a2 7E 3C 00 00 
2903c 4a3 00 00 1C 1C 
29040 4a4 18 18 38 3C 
29044 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
29048 4a6 3C 3C 00 00 
2904c 4a7 00 00 00 00 
29050 4a8 00 00 00 00 
29054 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
29058 4aa 00 00 00 00 
2905c 4ab 00 00       | 	byte	$00[6]
2905e 4ab 18 18 18 18 
29062 4ac 18 18 18 18 | 	byte	$18[8]
29066 4ad 00 00 18 18 
2906a 4ae 00 00 00 00 
2906e 4af 66 66 66 66 
29072 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
29076 4b1 00 00 00 00 
2907a 4b2 00 00 00 00 
2907e 4b3 00          | 	byte	$00[9]
2907f 4b3 66 66 FF FF 
29083 4b4 66 66 FF FF 
29087 4b5 66 66 00 00 
2908b 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
2908f 4b7 7C 7E 06 06 
29093 4b8 3E 7C 60 60 
29097 4b9 7E 3E 18 18 
2909b 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
2909f 4bb 66 30 30 18 
290a3 4bc 18 0C 0C 66 
290a7 4bd 66 00 00 00 
290ab 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
290af 4bf 66 66 3C 1C 
290b3 4c0 1C FC FE 66 
290b7 4c1 66 FE FC 00 
290bb 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
290bf 4c3 18 18 18 18 
290c3 4c4 00 00 00 00 
290c7 4c5 00 00 00 00 
290cb 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
290cf 4c7 18 1C 0C 0C 
290d3 4c8 0C 0C 0C 0C 
290d7 4c9 1C 18 30 00 
290db 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
290df 4cb 18 38 30 30 
290e3 4cc 30 30 30 30 
290e7 4cd 38 18 0C 00 
290eb 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
290ef 4cf 66 66 3C 3C 
290f3 4d0 FF FF 3C 3C 
290f7 4d1 66 66 00 00 
290fb 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
290ff 4d3 00 18 18 18 
29103 4d4 7E 7E 18 18 
29107 4d5 18 00 00 00 
2910b 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
2910f 4d7 00 00 00 00 
29113 4d8 00 00       | 	byte	$00[6]
29115 4d9 18 18 18 18 
29119 4da 18          | 	byte	$18[5]
2911a 4da 0C 04 00 00 
2911e 4db 00 00 00 00 
29122 4dc 7E 7E 00 00 
29126 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
2912a 4de 00 00 00 00 
2912e 4df 00 00 00 00 
29132 4e0 00 00 00 00 
29136 4e1 00          | 	byte	$00[13]
29137 4e1 18 18 18 00 
2913b 4e2 00 00 00 60 
2913f 4e3 60 60 30 30 
29143 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
29147 4e5 06 06 06 00 
2914b 4e6 00 00 00 3C 
2914f 4e7 7E 66 66 66 
29153 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
29157 4e9 66 7E 3C 00 
2915b 4ea 00 00 00 18 
2915f 4eb 18 1C 1C 18 
29163 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
29167 4ed 18 7E 7E 00 
2916b 4ee 00 00 00 3C 
2916f 4ef 7E 66 66 30 
29173 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
29177 4f1 0C 7E 7E 00 
2917b 4f2 00 00 00 7E 
2917f 4f3 7E 30 30 18 
29183 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
29187 4f5 66 7E 3C 00 
2918b 4f6 00 00 00 30 
2918f 4f7 30 38 38 3C 
29193 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
29197 4f9 7E 30 30 00 
2919b 4fa 00 00 00 7E 
2919f 4fb 7E 06 06 3E 
291a3 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
291a7 4fd 66 7E 3C 00 
291ab 4fe 00 00 00 38 
291af 4ff 3C 0E 06 06 
291b3 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
291b7 501 66 7E 3C 00 
291bb 502 00 00 00 7E 
291bf 503 7E 60 60 30 
291c3 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
291c7 505 0C 0C 0C 00 
291cb 506 00 00 00 3C 
291cf 507 7E 66 66 3C 
291d3 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
291d7 509 66 7E 3C 00 
291db 50a 00 00 00 3C 
291df 50b 7E 66 66 7E 
291e3 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
291e7 50d 70 3C 1C 00 
291eb 50e 00 00 00 00 
291ef 50f 00 00 18 18 
291f3 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
291f7 511 18 18 18 00 
291fb 512 00 00 00 00 
291ff 513 00 00 18 18 
29203 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
29207 515 18 18 18 0C 
2920b 516 04 00 00 00 
2920f 517 70 38 1C 0E 
29213 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
29217 519 70 00 00 00 
2921b 51a 00 00 00 00 
2921f 51b 00 00 7E 7E 
29223 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
29227 51d 00 00 00 00 
2922b 51e 00 00 00 00 | 	byte	$00[8]
2922f 51f 0E 1C 38 70 
29233 520 E0 70 38 1C 
29237 521 0E 00 00 00 
2923b 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
2923f 523 7E 66 66 30 
29243 524 30 18 18 18 
29247 525 00 18 18 00 
2924b 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
2924f 527 7E 66 66 66 
29253 528 66 36 06 66 
29257 529 66 7E 3C 00 
2925b 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
2925f 52b 3C 7E 66 66 
29263 52c 66 7E 7E 66 
29267 52d 66 66 66 00 
2926b 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
2926f 52f 7E 66 66 7E 
29273 530 3E 66 66 66 
29277 531 66 7E 3E 00 
2927b 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
2927f 533 7E 66 66 06 
29283 534 06 06 06 66 
29287 535 66 7E 3C 00 
2928b 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
2928f 537 7E 66 66 66 
29293 538 66 66 66 66 
29297 539 66 7E 3E 00 
2929b 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
2929f 53b 7E 06 06 3E 
292a3 53c 3E 06 06 06 
292a7 53d 06 7E 7E 00 
292ab 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
292af 53f 7E 06 06 3E 
292b3 540 3E 06 06 06 
292b7 541 06 06 06 00 
292bb 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
292bf 543 7E 06 06 76 
292c3 544 76 66 66 66 
292c7 545 66 7E 3C 00 
292cb 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
292cf 547 66 66 66 7E 
292d3 548 7E 66 66 66 
292d7 549 66 66 66 00 
292db 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
292df 54b 7E 18 18 18 
292e3 54c 18 18 18 18 
292e7 54d 18 7E 7E 00 
292eb 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
292ef 54f 60 60 60 60 
292f3 550 60 60 60    | 	byte	$60[7]
292f6 551 66 66 7E 3C 
292fa 552 00 00 00 00 
292fe 553 66 66 36 36 
29302 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
29306 555 66 66 C6 C6 
2930a 556 00 00 00 00 
2930e 557 06 06 06 06 
29312 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
29316 559 06 06 7E 7E 
2931a 55a 00 00 00 00 
2931e 55b C6 C6 EE EE 
29322 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
29326 55d C6 C6 C6 C6 
2932a 55e 00 00 00 00 
2932e 55f 66 66 66 6E 
29332 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
29336 561 76 66 66 66 
2933a 562 00 00 00 00 
2933e 563 3C 7E 66 66 
29342 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
29346 565 66 66 7E 3C 
2934a 566 00 00 00 00 
2934e 567 3E 7E 66 66 
29352 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
29356 569 06 06 06 06 
2935a 56a 00 00 00 00 
2935e 56b 3C 7E 66 66 
29362 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
29366 56d 66 56 3E 6C 
2936a 56e 00 00 00 00 
2936e 56f 3E 7E 66 66 
29372 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
29376 571 66 66 C6 C6 
2937a 572 00 00 00 00 
2937e 573 7C 7E 06 06 
29382 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
29386 575 60 60 7E 3E 
2938a 576 00 00 00 00 
2938e 577 7E 7E 18 18 
29392 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
29396 579 18 18 18 18 
2939a 57a 00 00 00 00 
2939e 57b 66 66 66 66 
293a2 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
293a6 57d 66 66 7E 3C 
293aa 57e 00 00 00 00 
293ae 57f 66 66 66 66 
293b2 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
293b6 581 3C 3C 18 18 
293ba 582 00 00 00 00 
293be 583 C6 C6 C6 C6 
293c2 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
293c6 585 FE EE C6 82 
293ca 586 00 00 00 00 
293ce 587 66 66 66 3C 
293d2 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
293d6 589 3C 66 66 66 
293da 58a 00 00 00 00 
293de 58b 66 66 66 66 
293e2 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
293e6 58d 18 18 18 18 
293ea 58e 00 00 00 00 
293ee 58f 7E 7E 30 30 
293f2 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
293f6 591 06 06 7E 7E 
293fa 592 00 00 00 00 
293fe 593 3C 3C 0C 0C 
29402 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
29406 595 0C 0C 3C 3C 
2940a 596 00 00 00 00 
2940e 597 06 06 0C 0C 
29412 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
29416 599 60 60 C0 C0 
2941a 59a 00 00 00 00 
2941e 59b 3C 3C 30 30 
29422 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
29426 59d 30 30 3C 3C 
2942a 59e 00 00 00 00 
2942e 59f 18 18 3C 3C 
29432 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
29436 5a1 00 00 00 00 
2943a 5a2 00 00 00 00 
2943e 5a3 00 00 00 00 
29442 5a4 00 00 00 00 
29446 5a5 00 00       | 	byte	$00[18]
29448 5a6 FE FE 00 00 
2944c 5a7 00 00 0C 0C 
29450 5a8 18 18 00 00 
29454 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
29458 5aa 00 00 00 00 
2945c 5ab 00 00 00 00 
29460 5ac 00          | 	byte	$00[9]
29461 5ac 3C 7C 60 7C 
29465 5ad 7E 66 66 7E 
29469 5ae 7C 00 00 00 
2946d 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
29471 5b0 3E 7E 66 66 
29475 5b1 66 66 66 7E 
29479 5b2 3E 00 00 00 
2947d 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
29481 5b4 3C 3E 06 06 
29485 5b5 06 06 06 7E 
29489 5b6 7C 00 00 00 
2948d 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
29491 5b8 7C 7E 66 66 
29495 5b9 66 66 66 7E 
29499 5ba 7C 00 00 00 
2949d 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
294a1 5bc 3C 7E 66 66 
294a5 5bd 7E 06 06 7E 
294a9 5be 7C 00 00 00 
294ad 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
294b1 5c0 18 7E 7E 18 
294b5 5c1 18 18 18 18 
294b9 5c2 18 00 00 00 
294bd 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
294c1 5c4 7C 7E 66 66 
294c5 5c5 66 66 7E 7C 
294c9 5c6 60 7E 3E 00 
294cd 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
294d1 5c8 3E 7E 66 66 
294d5 5c9 66 66 66 66 
294d9 5ca 66 00 00 00 
294dd 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
294e1 5cc 1C 1C 18 18 
294e5 5cd 18 18 18 3C 
294e9 5ce 3C 00 00 00 
294ed 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
294f1 5d0 30 30 30 30 
294f5 5d1 30 30 30 30 
294f9 5d2 30          | 	byte	$30[9]
294fa 5d2 3E 1E 00 00 
294fe 5d3 06 06 06 36 
29502 5d4 36 1E 1E 1E 
29506 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
2950a 5d6 00 00 00 00 
2950e 5d7 1C 1C 18 18 
29512 5d8 18 18 18 18 
29516 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
2951a 5da 00 00 00 00 
2951e 5db 00 00 00    | 	byte	$00[7]
29521 5dc 6C FE FE D6 
29525 5dd D6 C6 C6 C6 
29529 5de C6 00 00 00 
2952d 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
29531 5e0 3E 7E 66 66 
29535 5e1 66 66 66 66 
29539 5e2 66 00 00 00 
2953d 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
29541 5e4 3C 7E 66 66 
29545 5e5 66 66 66 7E 
29549 5e6 3C 00 00 00 
2954d 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
29551 5e8 3E 7E 66 66 
29555 5e9 66 66 66 7E 
29559 5ea 3E 06 06 00 
2955d 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
29561 5ec 7C 7E 66 66 
29565 5ed 66 66 66 7E 
29569 5ee 7C 60 60 00 
2956d 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
29571 5f0 3E 7E 66 06 
29575 5f1 06 06 06 06 
29579 5f2 06 00 00 00 
2957d 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
29581 5f4 7C 7E 06 0E 
29585 5f5 3C 70 60 7E 
29589 5f6 3E 00 00 00 
2958d 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
29591 5f8 7E 7E 18 18 
29595 5f9 18 18 18 78 
29599 5fa 70 00 00 00 
2959d 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
295a1 5fc 66 66 66 66 
295a5 5fd 66 66 66    | 	byte	$66[7]
295a8 5fe 7E 7C 00 00 
295ac 5ff 00 00 00 00 
295b0 600 00 66 66 66 
295b4 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
295b8 602 18 18 00 00 
295bc 603 00 00 00 00 
295c0 604 00 C6 C6 D6 
295c4 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
295c8 606 C6 82 00 00 
295cc 607 00 00 00 00 
295d0 608 00 66 66 3C 
295d4 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
295d8 60a 66 66 00 00 
295dc 60b 00 00 00 00 
295e0 60c 00 66 66 66 
295e4 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
295e8 60e 7C 60 7E 3E 
295ec 60f 00 00 00 00 
295f0 610 00 7E 7E 30 
295f4 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
295f8 612 7E 7E 00 00 
295fc 613 00 00 30 18 
29600 614 18 18 18 0C 
29604 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
29608 616 18 30 00 00 
2960c 617 00 00 18 18 
29610 618 18 18 18 18 
29614 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
29618 61a 18 18 00 00 
2961c 61b 00 00 0C 18 
29620 61c 18 18 18 30 
29624 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
29628 61e 18 0C 00 00 
2962c 61f 00 00 6C 7E 
29630 620 36 00 00 00 
29634 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
29638 622 00 00 00 00 
2963c 623 00 00 00 00 
29640 624 00          | 	byte	$00[9]
29641 624 18 18 18 18 
29645 625 18 18 00 00 
29649 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
2964c 627             | 'amiga_font     file "amigafont.def"
2964c 627 00 6C FE FE 
29650 628 7C 38 10 00 
29654 629 18 18 18 F8 
29658 62a F8 18 18 18 | a8_font        file "atari8.fnt"
2965c 62b C0 C0 C0 C0 
29660 62c C0 C0 C0 C0 | 	byte	$c0[8]
29664 62d 18 18 18 1F 
29668 62e 1F 00 00 00 
2966c 62f 18 18 18 1F 
29670 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
29674 631 00 00 00 1F 
29678 632 1F 18 18 18 
2967c 633 C0 E0 70 38 
29680 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
29684 635 03 07 0E 1C 
29688 636 38 70 E0 C0 
2968c 637 80 C0 E0 F0 
29690 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
29694 639 00 00 00 00 
29698 63a F0 F0 F0 F0 
2969c 63b 01 03 07 0F 
296a0 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
296a4 63d F0 F0 F0 F0 
296a8 63e 00 00 00 00 
296ac 63f 0F 0F 0F 0F 
296b0 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
296b4 641 FF FF 00 00 
296b8 642 00 00 00 00 
296bc 643 00 00 00 00 
296c0 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
296c4 645 00 00 00 00 
296c8 646 0F 0F 0F 0F 
296cc 647 00 38 38 EE 
296d0 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
296d4 649 00 00 00 F8 
296d8 64a F8 18 18 18 
296dc 64b 00 00 00 FF 
296e0 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
296e4 64d 18 18 18 FF 
296e8 64e FF 18 18 18 
296ec 64f 00 00 3C 7E 
296f0 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
296f4 651 00 00 00 00 
296f8 652 FF FF FF FF 
296fc 653 03 03 03 03 
29700 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
29704 655 00 00 00 FF 
29708 656 FF 18 18 18 
2970c 657 18 18 18 FF 
29710 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
29714 659 0F 0F 0F 0F 
29718 65a 0F 0F 0F 0F | 	byte	$0f[8]
2971c 65b 18 18 18 F8 
29720 65c F8 00 00 00 
29724 65d 1E 06 1E 06 
29728 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
2972c 65f 00 18 3C 7E 
29730 660 18 18 18 00 
29734 661 00 18 18 18 
29738 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
2973c 663 00 18 0C 7E 
29740 664 0C 18 00 00 
29744 665 00 18 30 7E 
29748 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
2974c 667 00 00 00 00 
29750 668 00 00 00 00 
29754 669 00          | 	byte	$00[9]
29755 669 18 18 18 18 
29759 66a 00 18 00 00 
2975d 66b 66 66 66 00 
29761 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
29765 66d 66 FF 66 66 
29769 66e FF 66 00 18 
2976d 66f 7C 06 3C 60 
29771 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
29775 671 66 36 18 0C 
29779 672 66 62 00 38 
2977d 673 6C 38 1C F6 
29781 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
29785 675 18 18 18 00 
29789 676 00 00 00 00 
2978d 677 70 38 18 18 
29791 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
29795 679 0E 1C 18 18 
29799 67a 1C 0E 00 00 
2979d 67b 66 3C FF 3C 
297a1 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
297a5 67d 18 18 7E 18 
297a9 67e 18 00 00 00 
297ad 67f 00 00 00 00 
297b1 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
297b5 681 00 00 7E 00 
297b9 682 00 00 00 00 
297bd 683 00 00 00 00 
297c1 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
297c5 685 60 30 18 0C 
297c9 686 06 02 00 00 
297cd 687 3C 66 76 6E 
297d1 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
297d5 689 18 1C 18 18 
297d9 68a 18 7E 00 00 
297dd 68b 3C 66 30 18 
297e1 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
297e5 68d 7E 30 18 30 
297e9 68e 66 3C 00 00 
297ed 68f 30 38 3C 36 
297f1 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
297f5 691 7E 06 3E 60 
297f9 692 66 3C 00 00 
297fd 693 3C 06 3E 66 
29801 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
29805 695 7E 60 30 18 
29809 696 0C 0C 00 00 
2980d 697 3C 66 3C 66 
29811 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
29815 699 3C 66 7C 60 
29819 69a 30 1C 00 00 
2981d 69b 00 18 18 00 
29821 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
29825 69d 00 18 18 00 
29829 69e 18 18 0C 60 
2982d 69f 30 18 0C 18 
29831 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
29835 6a1 00 7E 00 00 
29839 6a2 7E 00 00 06 
2983d 6a3 0C 18 30 18 
29841 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
29845 6a5 3C 66 30 18 
29849 6a6 00 18 00 00 
2984d 6a7 3C 66 76 76 
29851 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
29855 6a9 18 3C 66 66 
29859 6aa 7E 66 00 00 
2985d 6ab 3E 66 3E 66 
29861 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
29865 6ad 3C 66 06 06 
29869 6ae 66 3C 00 00 
2986d 6af 1E 36 66 66 
29871 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
29875 6b1 7E 06 3E 06 
29879 6b2 06 7E 00 00 
2987d 6b3 7E 06 3E 06 
29881 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
29885 6b5 7C 06 06 76 
29889 6b6 66 7C 00 00 
2988d 6b7 66 66 7E 66 
29891 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
29895 6b9 7E 18 18 18 
29899 6ba 18 7E 00 00 
2989d 6bb 60 60 60 60 
298a1 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
298a5 6bd 66 36 1E 1E 
298a9 6be 36 66 00 00 
298ad 6bf 06 06 06 06 
298b1 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
298b5 6c1 C6 EE FE D6 
298b9 6c2 C6 C6 00 00 
298bd 6c3 66 6E 7E 7E 
298c1 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
298c5 6c5 3C 66 66 66 
298c9 6c6 66 3C 00 00 
298cd 6c7 3E 66 66 3E 
298d1 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
298d5 6c9 3C 66 66 66 
298d9 6ca 36 6C 00 00 
298dd 6cb 3E 66 66 3E 
298e1 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
298e5 6cd 3C 06 3C 60 
298e9 6ce 60 3C 00 00 
298ed 6cf 7E 18 18 18 
298f1 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
298f5 6d1 66 66 66 66 
298f9 6d2 66          | 	byte	$66[5]
298fa 6d2 7E 00 00 66 
298fe 6d3 66 66 66 3C 
29902 6d4 18 00 00 C6 
29906 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
2990a 6d6 C6 00 00 66 
2990e 6d7 66 3C 3C 66 
29912 6d8 66 00 00 66 
29916 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
2991a 6da 18 00 00 7E 
2991e 6db 30 18 0C 06 
29922 6dc 7E 00 00 78 
29926 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
2992a 6de 78 00 00 02 
2992e 6df 06 0C 18 30 
29932 6e0 60 00 00 1E 
29936 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
2993a 6e2 1E 00 00 10 
2993e 6e3 38 6C C6 00 
29942 6e4 00 00 00 00 
29946 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
2994a 6e6 FF 00 00 18 
2994e 6e7 3C 7E 7E 3C 
29952 6e8 18 00 00 00 
29956 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
2995a 6ea 7C 00 00 06 
2995e 6eb 06 3E 66 66 
29962 6ec 3E 00 00 00 
29966 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
2996a 6ee 3C 00 00 60 
2996e 6ef 60 7C 66 66 
29972 6f0 7C 00 00 00 
29976 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
2997a 6f2 3C 00 00 70 
2997e 6f3 18 7C 18 18 
29982 6f4 18 00 00 00 
29986 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
2998a 6f6 60 3E 00 06 
2998e 6f7 06 3E 66 66 
29992 6f8 66 00 00 18 
29996 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
2999a 6fa 3C 00 00 60 
2999e 6fb 00 60 60 60 
299a2 6fc 60 3C 00 06 
299a6 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
299aa 6fe 66 00 00 1C 
299ae 6ff 18 18 18 18 
299b2 700 3C 00 00 00 
299b6 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
299ba 702 C6 00 00 00 
299be 703 3E 66 66 66 
299c2 704 66 00 00 00 
299c6 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
299ca 706 3C 00 00 00 
299ce 707 3E 66 66 3E 
299d2 708 06 06 00 00 
299d6 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
299da 70a 60 60 00 00 
299de 70b 3E 66 06 06 
299e2 70c 06 00 00 00 
299e6 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
299ea 70e 3E 00 00 18 
299ee 70f 7E 18 18 18 
299f2 710 70 00 00 00 
299f6 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
299fa 712 7C 00 00 00 
299fe 713 66 66 66 3C 
29a02 714 18 00 00 00 
29a06 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
29a0a 716 6C 00 00 00 
29a0e 717 66 3C 18 3C 
29a12 718 66 00 00 00 
29a16 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
29a1a 71a 30 1E 00 00 
29a1e 71b 7E 30 18 0C 
29a22 71c 7E 00 00 18 
29a26 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
29a2a 71e 3C 00 18 18 
29a2e 71f 18 18 18 18 
29a32 720 18 18 00 7E 
29a36 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
29a3a 722 60 00 10 18 
29a3e 723 1C 1E 1C 18 
29a42 724 10 00 08 18 
29a46 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
29a4a 726 08 00       | 	byte	$08, $00
29a4c 727 00 00 00 00 
29a50 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
29a51 728 80 00 00 00 
29a55 729 00 80 00 00 
29a59 72a 80 80 00 00 
29a5d 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
29a61 72c 80 00 80 00 
29a65 72d 00 40 80 00 
29a69 72e AA AA AA 00 
29a6d 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
29a71 730 FF 00 00 00 
29a75 731 00 FF 00 00 
29a79 732 FF FF 00 00 
29a7d 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
29a81 734 FF 00 FF 00 
29a85 735 00 FF FF 00 
29a89 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
29a8c 737 00 00 00 00 
29a90 738 00          | ataripalette   file "ataripalettep2.def"
29a91 738 11 11 11 00 
29a95 739 22 22 22 00 
29a99 73a 33 33 33 00 
29a9d 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
29aa1 73c 55 55 55 00 
29aa5 73d 66 66 66 00 
29aa9 73e 77 77 77 00 
29aad 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
29ab1 740 99 99 99 00 
29ab5 741 AA AA AA 00 
29ab9 742 BB BB BB 00 
29abd 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
29ac1 744 DD DD DD 00 
29ac5 745 EE EE EE 00 
29ac9 746 FF FF FF 00 
29acd 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
29ad1 748 00 14 40 00 
29ad5 749 00 1E 60 00 
29ad9 74a 00 28 80 00 
29add 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
29ae1 74c 00 3C BF 00 
29ae5 74d 00 46 DF 00 
29ae9 74e 00 50 FF 00 
29aed 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
29af1 750 39 77 FF 00 
29af5 751 55 8A FF 00 
29af9 752 71 9E FF 00 
29afd 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
29b01 754 AA C5 FF 00 
29b05 755 C6 D8 FF 00 
29b09 756 E3 EC FF 00 
29b0d 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
29b11 758 00 00 40 00 
29b15 759 00 00 60 00 
29b19 75a 00 00 80 00 
29b1d 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
29b21 75c 00 00 BF 00 
29b25 75d 00 00 DF 00 
29b29 75e 00 00 FF 00 
29b2d 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
29b31 760 39 39 FF 00 
29b35 761 55 55 FF 00 
29b39 762 71 71 FF 00 
29b3d 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
29b41 764 AA AA FF 00 
29b45 765 C6 C6 FF 00 
29b49 766 E3 E3 FF 00 
29b4d 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
29b51 768 20 00 40 00 
29b55 769 30 00 60 00 
29b59 76a 40 00 80 00 
29b5d 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
29b61 76c 60 00 BF 00 
29b65 76d 70 00 DF 00 
29b69 76e 80 00 FF 00 
29b6d 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
29b71 770 9C 39 FF 00 
29b75 771 AA 55 FF 00 
29b79 772 B8 71 FF 00 
29b7d 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
29b81 774 D5 AA FF 00 
29b85 775 E3 C6 FF 00 
29b89 776 F1 E3 FF 00 
29b8d 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
29b91 778 40 00 40 00 
29b95 779 60 00 60 00 
29b99 77a 80 00 80 00 
29b9d 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
29ba1 77c BF 00 BF 00 
29ba5 77d DF 00 DF 00 
29ba9 77e FF 00 FF 00 
29bad 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
29bb1 780 FF 39 FF 00 
29bb5 781 FF 55 FF 00 
29bb9 782 FF 71 FF 00 
29bbd 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
29bc1 784 FF AA FF 00 
29bc5 785 FF C6 FF 00 
29bc9 786 FF E3 FF 00 
29bcd 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
29bd1 788 40 00 20 00 
29bd5 789 60 00 30 00 
29bd9 78a 80 00 40 00 
29bdd 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
29be1 78c BF 00 60 00 
29be5 78d DF 00 70 00 
29be9 78e FF 00 80 00 
29bed 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
29bf1 790 FF 39 9C 00 
29bf5 791 FF 55 AA 00 
29bf9 792 FF 71 B8 00 
29bfd 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
29c01 794 FF AA D5 00 
29c05 795 FF C6 E3 00 
29c09 796 FF E3 F1 00 
29c0d 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
29c11 798 40 00 00 00 
29c15 799 60 00 00 00 
29c19 79a 80 00 00 00 
29c1d 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
29c21 79c BF 00 00 00 
29c25 79d DF 00 00 00 
29c29 79e FF 00 00 00 
29c2d 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
29c31 7a0 FF 39 39 00 
29c35 7a1 FF 55 55 00 
29c39 7a2 FF 71 71 00 
29c3d 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
29c41 7a4 FF AA AA 00 
29c45 7a5 FF C6 C6 00 
29c49 7a6 FF E3 E3 00 
29c4d 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
29c51 7a8 40 10 00 00 
29c55 7a9 60 18 00 00 
29c59 7aa 80 20 00 00 
29c5d 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
29c61 7ac BF 30 00 00 
29c65 7ad DF 38 00 00 
29c69 7ae FF 40 00 00 
29c6d 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
29c71 7b0 FF 6A 39 00 
29c75 7b1 FF 80 55 00 
29c79 7b2 FF 95 71 00 
29c7d 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
29c81 7b4 FF BF AA 00 
29c85 7b5 FF D5 C6 00 
29c89 7b6 FF EA E3 00 
29c8d 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
29c91 7b8 40 20 00 00 
29c95 7b9 60 30 00 00 
29c99 7ba 80 40 00 00 
29c9d 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
29ca1 7bc BF 60 00 00 
29ca5 7bd DF 70 00 00 
29ca9 7be FF 80 00 00 
29cad 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
29cb1 7c0 FF 9C 39 00 
29cb5 7c1 FF AA 55 00 
29cb9 7c2 FF B8 71 00 
29cbd 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
29cc1 7c4 FF D5 AA 00 
29cc5 7c5 FF E3 C6 00 
29cc9 7c6 FF F1 E3 00 
29ccd 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
29cd1 7c8 40 30 00 00 
29cd5 7c9 60 48 00 00 
29cd9 7ca 80 60 00 00 
29cdd 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
29ce1 7cc BF 90 00 00 
29ce5 7cd DF A8 00 00 
29ce9 7ce FF C0 00 00 
29ced 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
29cf1 7d0 FF CE 39 00 
29cf5 7d1 FF D5 55 00 
29cf9 7d2 FF DC 71 00 
29cfd 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
29d01 7d4 FF EA AA 00 
29d05 7d5 FF F1 C6 00 
29d09 7d6 FF F8 E3 00 
29d0d 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
29d11 7d8 30 40 00 00 
29d15 7d9 48 60 00 00 
29d19 7da 60 80 00 00 
29d1d 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
29d21 7dc 90 BF 00 00 
29d25 7dd A8 DF 00 00 
29d29 7de C0 FF 00 00 
29d2d 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
29d31 7e0 CE FF 39 00 
29d35 7e1 D5 FF 55 00 
29d39 7e2 DC FF 71 00 
29d3d 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
29d41 7e4 EA FF AA 00 
29d45 7e5 F1 FF C6 00 
29d49 7e6 F8 FF E3 00 
29d4d 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
29d51 7e8 00 40 00 00 
29d55 7e9 00 60 00 00 
29d59 7ea 00 80 00 00 
29d5d 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
29d61 7ec 00 BF 00 00 
29d65 7ed 00 DF 00 00 
29d69 7ee 00 FF 00 00 
29d6d 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
29d71 7f0 39 FF 39 00 
29d75 7f1 55 FF 55 00 
29d79 7f2 71 FF 71 00 
29d7d 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
29d81 7f4 AA FF AA 00 
29d85 7f5 C6 FF C6 00 
29d89 7f6 E3 FF E3 00 
29d8d 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
29d91 7f8 00 40 14 00 
29d95 7f9 00 60 1E 00 
29d99 7fa 00 80 28 00 
29d9d 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
29da1 7fc 00 BF 3C 00 
29da5 7fd 00 DF 46 00 
29da9 7fe 00 FF 50 00 
29dad 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
29db1 800 39 FF 77 00 
29db5 801 55 FF 8A 00 
29db9 802 71 FF 9E 00 
29dbd 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
29dc1 804 AA FF C5 00 
29dc5 805 C6 FF D8 00 
29dc9 806 E3 FF EC 00 
29dcd 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
29dd1 808 00 40 28 00 
29dd5 809 00 60 3C 00 
29dd9 80a 00 80 50 00 
29ddd 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
29de1 80c 00 BF 78 00 
29de5 80d 00 DF 8C 00 
29de9 80e 00 FF A0 00 
29ded 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
29df1 810 39 FF B5 00 
29df5 811 55 FF C0 00 
29df9 812 71 FF CA 00 
29dfd 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
29e01 814 AA FF DF 00 
29e05 815 C6 FF EA 00 
29e09 816 E3 FF F4 00 
29e0d 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
29e11 818 00 40 40 00 
29e15 819 00 60 60 00 
29e19 81a 00 80 80 00 
29e1d 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
29e21 81c 00 BF BF 00 
29e25 81d 00 DF DF 00 
29e29 81e 00 FF FF 00 
29e2d 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
29e31 820 39 FF FF 00 
29e35 821 55 FF FF 00 
29e39 822 71 FF FF 00 
29e3d 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
29e41 824 AA FF FF 00 
29e45 825 C6 FF FF 00 
29e49 826 E3 FF FF 00 
29e4d 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
29e51 828 00 28 40 00 
29e55 829 00 3C 60 00 
29e59 82a 00 50 80 00 
29e5d 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
29e61 82c 00 78 BF 00 
29e65 82d 00 8C DF 00 
29e69 82e 00 A0 FF 00 
29e6d 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
29e71 830 39 B5 FF 00 
29e75 831 55 C0 FF 00 
29e79 832 71 CA FF 00 
29e7d 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
29e81 834 AA DF FF 00 
29e85 835 C6 EA FF 00 
29e89 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
29e8c 837             | 
29e8c 837             | '**********************************************************************************
29e8c 837             | '
29e8c 837             | '        Timings and colors definitions
29e8c 837             | '
29e8c 837             | '**********************************************************************************
29e8c 837             | 
29e8c 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
29e8c 837 10 00 00 00 
29e90 838 50 00 00 00 
29e94 839 0C 00 00 00 
29e98 83a 00 04 00 00 | timings         long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
29e9c 83b 08 00 00 00 
29ea0 83c 04 00 00 00 
29ea4 83d 08 00 00 00 
29ea8 83e 80 00 00 00 | 	byte	$08, $00, $00, $00, $04, $00, $00, $00, $08, $00, $00, $00, $80, $00, $00, $00
29eac 83f 40 02 00 00 
29eb0 840 6A 8C 15 14 
29eb4 841 FB 06 B7 01 
29eb8 842 40 02 00 00 | 	byte	$40, $02, $00, $00, $6a, $8c, $15, $14, $fb, $06, $b7, $01, $40, $02, $00, $00
29ebc 843 00 00 00 00 
29ec0 844 C0 00 00 00 
29ec4 845 00 00 00 00 
29ec8 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
29ecc 847 00 75 C7 97 
29ed0 848 27 47 F6 0A 
29ed4 849 05 79 CB 9B 
29ed8 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
29edc 84b             | 
29edc 84b             | ''--------  Initialization  ----------------------------------------------------------------
29edc 84b             | 
29edc 84b 28 0C 64 FD | hdmi            setq    #6
29ee0 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
29ee4 84d 28 10 64 FD |                 setq    #8
29ee8 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
29eec 84f             | 
29eec 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
29ef0 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
29ef4 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
29ef8 852 D6 C6 01 F1 |                 add     t1,hbase
29efc 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
29f00 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
29f04 855 7B 0B 80 5F 
29f08 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
29f0c 857 66 66 86 FF 
29f10 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
29f14 859             | '
29f14 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
29f18 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
29f1c 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
29f20 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
29f24 85d             | 
29f24 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
29f28 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
29f2c 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
29f30 860             | 
29f30 860             | ''--------  frame rendering main loop  ---------------------------------------------------
29f30 860             | 
29f30 860 28 06 64 FD | p101            setq 	#3
29f34 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
29f38 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
29f3c 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
29f40 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
29f44 865 00 A0 05 F6 |                 mov     dlinum, #0
29f48 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
29f4c 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
29f50 868             | 
29f50 868             | 
29f50 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
29f54 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
29f58 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
29f5c 86b             |                 
29f5c 86b             | 
29f5c 86b             | 
29f5c 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
29f5c 86b             |   
29f5c 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
29f60 86c 29 FE 65 3D |          if_nc  setq2   #255
29f64 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
29f68 86e             | 
29f68 86e             | '' -----   up porch (before the picture)
29f68 86e             | 
29f68 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
29f6c 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
29f70 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
29f74 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
29f78 872             |  
29f78 872             |    
29f78 872             |  
29f78 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
29f7c 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
29f80 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
29f84 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
29f88 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
29f8c 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
29f90 878             | 
29f90 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
29f94 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
29f98 87a 48 00 B0 FD | 		call    #dli
29f9c 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
29fa0 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
29fa4 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
29fa8 87e             |                 	
29fa8 87e             |                 
29fa8 87e             | 
29fa8 87e             |  
29fa8 87e             | '' ------- the main screen drawing starts here
29fa8 87e             | 
29fa8 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
29fac 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
29fb0 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
29fb4 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
29fb8 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
29fbc 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
29fc0 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
29fc4 885             |               
29fc4 885             | 
29fc4 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
29fc8 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
29fcc 887             | 
29fcc 887             | ' ---------------- All visible lines displayed now, start vblank  
29fcc 887             | 
29fcc 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
29fd0 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
29fd4 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
29fd8 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
29fdc 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
29fe0 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
29fe4 88d             | 
29fe4 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
29fe4 88d             | 
29fe4 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
29fe4 88d             | 
29fe4 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
29fe8 88e             | 
29fe8 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
29fec 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
29ff0 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
29ff4 891             | 
29ff4 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
29ff8 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
29ffc 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
2a000 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
2a004 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
2a008 896             | 
2a008 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
2a00c 897 DD C6 41 F8 |                 getnib  t1,dl,#0
2a010 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
2a014 899 70 00 90 AD |     if_z        jmp     #preload
2a018 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
2a01c 89b 94 00 90 AD |     if_z        jmp     #preload2
2a020 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
2a024 89d 0C 00 90 AD |     if_z        jmp     #p390
2a028 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
2a02c 89f 28 00 90 AD |     if_z        jmp     #p391  
2a030 8a0             | 
2a030 8a0 2D 00 64 FD | p308            ret
2a034 8a1             |    
2a034 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
2a038 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
2a03c 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
2a040 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
2a044 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
2a048 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
2a04c 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
2a050 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
2a054 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
2a058 8aa             |  
2a058 8aa             | '' --------  Reload palette. To do 
2a058 8aa             | 
2a058 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
2a05c 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
2a060 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
2a064 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
2a068 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
2a06c 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
2a070 8b0 70 FF 9F FD |         	jmp     #dli                
2a074 8b1             |       
2a074 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
2a074 8b1             | 
2a074 8b1             | 
2a074 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
2a074 8b1             | 
2a074 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
2a078 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
2a07c 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
2a080 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
2a084 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
2a088 8b6             |         
2a088 8b6             | '' -------------- Preload a line from PSRAM        
2a088 8b6             |         
2a088 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
2a08c 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
2a090 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
2a094 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
2a098 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
2a09c 8bb             | 
2a09c 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
2a0a0 8bc 32 B7 01 F6 |                 mov     buf2,a1024
2a0a4 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
2a0a8 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
2a0ac 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
2a0b0 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
2a0b4 8c1             |  
2a0b4 8c1             |  
2a0b4 8c1             | preload2      '  incmod  dlinum,#3
2a0b4 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
2a0b8 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
2a0bc 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
2a0c0 8c4 28 02 64 FD |                 setq	#1
2a0c4 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
2a0c8 8c6             |                 
2a0c8 8c6             | 
2a0c8 8c6             | '' -------------- Draw sprites
2a0c8 8c6             | 
2a0c8 8c6 CF 5C 02 F6 | sprite          mov t8,frames
2a0cc 8c7 10 5C 0E F5 | 		and t8,#16 wz
2a0d0 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
2a0d4 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
2a0d8 8ca             | 		
2a0d8 8ca             | 
2a0d8 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
2a0dc 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
2a0e0 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
2a0e4 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
2a0e8 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
2a0ec 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
2a0f0 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
2a0f4 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
2a0f8 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
2a0fc 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
2a100 8d4 01 52 86 F1 |                 sub     sprite_h,#1
2a104 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
2a108 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
2a10c 8d7             | 
2a10c 8d7             | 
2a10c 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
2a110 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
2a114 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
2a118 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
2a11c 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
2a120 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
2a124 8dd 00 5E 06 F6 |                 mov 	t9,#0
2a128 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
2a12c 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
2a130 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
2a134 8e1             |      
2a134 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
2a138 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
2a13c 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
2a140 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
2a144 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
2a148 8e6             |                 
2a148 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
2a14c 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
2a150 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
2a154 8e9             |   		
2a154 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
2a158 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
2a15c 8eb             | 
2a15c 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
2a160 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
2a164 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
2a168 8ee             |  
2a168 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
2a16c 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
2a170 8f0 10 00 90 CD |      if_c 	jmp     #p899		
2a174 8f1             | 	
2a174 8f1             | 	
2a174 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
2a178 8f2 28 CD 01 F1 | 		add	t4,sprite_w
2a17c 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
2a180 8f4             | 
2a180 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
2a184 8f5             | 
2a184 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
2a188 8f6 01 58 86 F1 | 	 	sub     t6,#1
2a18c 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
2a190 8f8             | 
2a190 8f8 28 58 62 FD |                 setq   	t6
2a194 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
2a198 8fa 28 5D 02 F6 |                 mov t8,sprite_w
2a19c 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
2a1a0 8fc 24 00 90 AD |         if_z    jmp #p898
2a1a4 8fd             |          
2a1a4 8fd             |         
2a1a4 8fd 70 5F 06 F6 |                 mov  t9,#368
2a1a8 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
2a1ac 8ff             | 
2a1ac 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
2a1b0 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
2a1b4 901 FF FF 7F FF 
2a1b8 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
2a1bc 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
2a1c0 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
2a1c4 905 2D 01 00 F5 |                 and 0-0, t7
2a1c8 906             |                
2a1c8 906             | 
2a1c8 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
2a1cc 907 E5 E0 7A FA |                 wmlong 368,t3				
2a1d0 908             |                 
2a1d0 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
2a1d4 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
2a1d8 90a 2D 00 64 FD |                 ret
2a1dc 90b             | 	
2a1dc 90b             | 	
2a1dc 90b             |                
2a1dc 90b             |  
2a1dc 90b             | '' -------------- Graphics line ------------------------------------------------------------
2a1dc 90b             |  
2a1dc 90b             | 
2a1dc 90b             | '' consts and vars
2a1dc 90b             | 
2a1dc 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
2a1e0 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
2a1e4 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
2a1e8 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
2a1ec 90f             | 
2a1ec 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
2a1f0 910             | 
2a1f0 910             | '------ these longs will be set by setmode function
2a1f0 910             | 
2a1f0 910 00 00 00 00 | m_bs            long    0        'blanks before sync
2a1f4 911 00 00 00 00 | m_sn            long    0        'sync
2a1f8 912 00 00 00 00 | m_bv            long    0        'blanks before visible
2a1fc 913 00 00 00 00 | m_vi            long    0        'visible pixels #
2a200 914             | 'm_border        long    0        'left/right borders
2a200 914 00 00 00 00 | i_upporch       long    0        'up porch lines
2a204 915 00 00 00 00 | i_vsync         long    0        'vsync lines
2a208 916 00 00 00 00 | i_downporch     long    0        'down porch lines
2a20c 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
2a210 918 00 00 00 00 | i_totalvis      long    0
2a214 919             | 
2a214 919             | '-------------------------------------
2a214 919             |  
2a214 919 00 00 00 00 | linenum         long    0
2a218 91a 00 00 00 00 | frames          long    0
2a21c 91b 00 00 00 00 | dlinum long 0
2a220 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
2a224 91d             | 
2a224 91d 00 00 00 00 | vblankptr       long    0
2a228 91e 00 00 00 00 | modeptr         long    0
2a22c 91f 00 00 00 00 | paletteptr      long    0
2a230 920 00 00 00 00 | dlptr           long    0
2a234 921 01 00 00 00 | hbase           long    1
2a238 922 00 00 00 00 | mailbox         long    0
2a23c 923 00 00 00 00 | spriteptr          long 0
2a240 924             | 
2a240 924 00 00 00 00 | cmd             long    0
2a244 925 00 B0 07 00 | buf1            long    $80000-16384-4096
2a248 926 00 04 00 00 | buf2            long    1024
2a24c 927 01 00 00 00 | dlptr2          long    1
2a250 928 01 00 00 00 | dl              long    1
2a254 929             | 
2a254 929 00 00 00 00 | buf1c long 0
2a258 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
2a25c 92b 01 00 00 00 | framebuf2       long    1
2a260 92c 01 00 00 00 | hsync0          long    1
2a264 92d 01 00 00 00 | hsync1          long    1
2a268 92e             | 
2a268 92e 01 00 00 00 | t1              long    1
2a26c 92f 00 00 00 00 | t2 long 0
2a270 930 00 00 00 00 | t3 long 0
2a274 931 00 00 00 00 | t4 long 0
2a278 932             | 
2a278 932 00 00 00 00 | rcnt            long    0  'dl repeat count
2a27c 933 00 00 00 00 | rcnt2           long    0
2a280 934 00 00 00 00 | rcnt2a          long    0
2a284 935 00 00 00 00 | roffset         long    0
2a288 936 00 00 00 00 | rdl             long    0  'dl repeat line
2a28c 937 00 00 00 00 | dlc             long    0  'dl command
2a290 938             | 
2a290 938 FF FF FF FF | affffffff       long    $ffffffff
2a294 939 00 00 00 00 | sprite1pointer long 0
2a298 93a 00 00 00 00 | sprite1xy      long 0
2a29c 93b 00 00 00 00 | sprite1wh      long 0
2a2a0 93c 00 00 00 00 | sprite2pointer long 0
2a2a4 93d 00 00 00 00 | sprite2xy      long 0
2a2a8 93e 00 00 00 00 | sprite2wh      long 0
2a2ac 93f 00 00 00 00 | sprite3pointer long 0
2a2b0 940 00 00 00 00 | sprite3xy      long 0
2a2b4 941 00 00 00 00 | sprite3wh      long 0
2a2b8 942 00 00 00 00 | sprite4pointer long 0
2a2bc 943 00 00 00 00 | sprite4xy      long 0
2a2c0 944 00 00 00 00 | sprite4wh      long 0
2a2c4 945 00 00 00 00 | sprite5pointer long 0
2a2c8 946 00 00 00 00 | sprite5xy      long 0
2a2cc 947 00 00 00 00 | sprite5wh      long 0
2a2d0 948 00 00 00 00 | sprite6pointer long 0
2a2d4 949 00 00 00 00 | sprite6xy      long 0
2a2d8 94a 00 00 00 00 | sprite6wh      long 0
2a2dc 94b 00 00 00 00 | sprite7pointer long 0
2a2e0 94c 00 00 00 00 | sprite7xy      long 0
2a2e4 94d 00 00 00 00 | sprite7wh      long 0
2a2e8 94e 00 00 00 00 | sprite8pointer long 0
2a2ec 94f 00 00 00 00 | sprite8xy      long 0
2a2f0 950 00 00 00 00 | sprite8wh      long 0
2a2f4 951 00 00 00 00 | sprite9pointer long 0
2a2f8 952 00 00 00 00 | sprite9xy      long 0
2a2fc 953 00 00 00 00 | sprite9wh      long 0
2a300 954 00 00 00 00 | sprite10pointer long 0
2a304 955 00 00 00 00 | sprite10xy      long 0
2a308 956 00 00 00 00 | sprite10wh      long 0
2a30c 957 00 00 00 00 | sprite11pointer long 0
2a310 958 00 00 00 00 | sprite11xy      long 0
2a314 959 00 00 00 00 | sprite11wh      long 0
2a318 95a 00 00 00 00 | sprite12pointer long 0
2a31c 95b 00 00 00 00 | sprite12xy      long 0
2a320 95c 00 00 00 00 | sprite12wh      long 0
2a324 95d 00 00 00 00 | sprite13pointer long 0
2a328 95e 00 00 00 00 | sprite13xy      long 0
2a32c 95f 00 00 00 00 | sprite13wh      long 0
2a330 960 00 00 00 00 | sprite14pointer long 0
2a334 961 00 00 00 00 | sprite14xy      long 0
2a338 962 00 00 00 00 | sprite14wh      long 0
2a33c 963 00 00 00 00 | sprite15pointer long 0
2a340 964 00 00 00 00 | sprite15xy      long 0
2a344 965 00 00 00 00 | sprite15wh      long 0
2a348 966 00 00 00 00 | sprite16pointer long 0
2a34c 967 00 00 00 00 | sprite16xy      long 0
2a350 968 00 00 00 00 | sprite16wh      long 0
2a354 969 00 00 00 00 | sprite17pointer long 0
2a358 96a 00 00 00 00 | sprite17xy      long 0
2a35c 96b 00 00 00 00 | sprite17wh      long 0
2a360 96c 00 00 00 00 | sprite18pointer long 0
2a364 96d 00 00 00 00 | sprite18xy      long 0
2a368 96e 00 00 00 00 | sprite18wh      long 0
2a36c 96f 00 00 00 00 | spritenum long 0
2a370 970             | 
2a370 970 00 00 00 00 | spriteline long 0
2a374 971 84 03 00 00 | sprite_x long 900
2a378 972 00 00 00 00 | sprite_y long 0
2a37c 973 10 00 00 00 | sprite_w long 16
2a380 974 40 00 00 00 | sprite_h long 64
2a384 975 00 00 00 00 | l2 long 0
2a388 976 00 00 00 00 | t5 long 0
2a38c 977 00 00 00 00 | t6 long 0
2a390 978 00 00 00 00 | t7 long 0
2a394 979 00 00 00 00 | t8 long 0
2a398 97a 00 00 00 00 | t9 long 0
2a39c 97b 00 00 00 00 | preloadaddr long 0
2a3a0 97c 00 00 00 00 | preloadlineaddr long 0
2a3a4 97d 00 04 00 00 | a1024 long 1024
2a3a8 97e             | 
2a3a8 97e E0 03 00 00 | aa long 992
2a3ac 97f FF 03 00 00 | a1023 long 1023
2a3b0 980 00 10 00 00 | a4096 long 4096
2a3b4 981             |  fit 368
2a3b4 981             | _psram_spin2_dat_
2a3b4 981 00 00 00 00 
      ...             
2a4ac 9bf 00 00 00 00 
2a4b0 9c0 00 00 00 00 |     listdata long 0[8*8]
2a4b4 9c1             |             orgh
2a4b4                 | 
2a4b4                 | ' driver state
2a4b4     FF FF FF FF | drivercog   long    -1  ' COG id of driver
2a4b8     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
2a4bc                 | 
2a4bc                 | ' delay profile
2a4bc     07 00 00 00 
2a4c0     00 CF 7B 05 
2a4c4     80 D1 F0 08 
2a4c8     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
2a4cc     80 C4 60 0F 
2a4d0     80 39 7A 12 
2a4d4     40 2D D9 13 
2a4d8     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
2a4dc                 | 
2a4dc                 | ' data to be passed to driver when starting it
2a4dc                 | startupData
2a4dc     00 00 00 00 |     long    0           ' current frequency
2a4e0     00 00 00 00 |     long    FLAGS       ' optional flags for driver
2a4e4     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
2a4e8     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
2a4ec     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
2a4f0     FC A4 02 00 |     long    deviceData  ' address of devices data structure in HUBRAM
2a4f4     7C A5 02 00 |     long    qosData     ' address of QoS data structure in HUBRAM
2a4f8     9C A5 02 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
2a4fc                 | 
2a4fc                 | ' data for memory
2a4fc                 | deviceData
2a4fc                 |     ' 16 bank parameters follow (16MB per bank)
2a4fc     00 00 00 00 
      ...             
2a534     00 00 00 00 
2a538     00 00 00 00 |     long    0[16]                               ' banks 0-15
2a53c                 |     ' 16 banks of pin parameters follow
2a53c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
2a540     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
2a544     FF FF FF FF 
      ...             
2a574     FF FF FF FF 
2a578     FF FF FF FF |     long    -1[14]                              ' banks 2-15
2a57c                 | 
2a57c                 | ' data for COG polling
2a57c                 | qosData 
2a57c     00 00 FF FF 
2a580     00 00 FF FF 
2a584     00 00 FF FF 
2a588     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
2a58c     00 00 FF FF 
2a590     00 00 FF FF 
2a594     00 00 FF FF 
2a598     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
2a59c                 |     
2a59c                 | ' mailbox storage
2a59c                 | 
2a59c                 | mailboxes
2a59c     00 00 00 00 
      ...             
2a5f4     00 00 00 00 
2a5f8     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
2a5fc                 | 	alignl
2a5fc                 | _psram16drv_spin2_dat_
2a5fc                 |                             orgh
2a5fc     00 00 00 00 
      ...             
2a614     00 00 00 00 
2a618     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
2a61c                 | 
2a61c                 | driver_start
2a61c                 |                             org
2a61c 000             | '..................................................................................................
2a61c 000             | ' Memory layout for COG RAM once operational:
2a61c 000             | '
2a61c 000             | '  COG RAM address      Usage
2a61c 000             | '  ---------------      ----
2a61c 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
2a61c 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
2a61c 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
2a61c 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
2a61c 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
2a61c 000             | '  ~$198-$1F3           State and register variables
2a61c 000             | '
2a61c 000             | ' Also during driver COG startup:
2a61c 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
2a61c 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
2a61c 000             | '..................................................................................................
2a61c 000             |                             
2a61c 000             | ' Mailbox storage after vector initialization
2a61c 000             | 
2a61c 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
2a620 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
2a624 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
2a628 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
2a62c 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
2a630 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
2a634 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
2a638 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
2a63c 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
2a640 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
2a644 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
2a648 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
2a64c 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
2a650 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
2a654 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
2a658 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
2a65c 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
2a660 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
2a664 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
2a668 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
2a66c 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
2a670 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
2a674 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
2a678 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
2a67c 018             | 
2a67c 018             | ' Mailbox parameter addresses per COG once patched
2a67c 018             |                             
2a67c 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
2a680 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
2a684 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
2a688 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
2a68c 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
2a690 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
2a694 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
2a698 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
2a69c 020             | 
2a69c 020             | '..................................................................................................
2a69c 020             | ' Per COG request and state setup and service branching
2a69c 020             |         
2a69c 020             | cog0                 
2a69c 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
2a6a0 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
2a6a4 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
2a6a8 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
2a6ac 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2a6b0 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2a6b4 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
2a6b8 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
2a6bc 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
2a6c0 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2a6c4 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2a6c8 02b 33 CA 63 FD |                             execf   request-0               'jump to service
2a6cc 02c             | cog1                        
2a6cc 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
2a6d0 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
2a6d4 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
2a6d8 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
2a6dc 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2a6e0 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2a6e4 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
2a6e8 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
2a6ec 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
2a6f0 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2a6f4 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2a6f8 037 33 CA 63 FD |                             execf   request-0               'jump to service
2a6fc 038             | cog2                         
2a6fc 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
2a700 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
2a704 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
2a708 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
2a70c 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2a710 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2a714 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
2a718 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
2a71c 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
2a720 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2a724 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2a728 043 33 CA 63 FD |                             execf   request-0               'jump to service
2a72c 044             | cog3                        
2a72c 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
2a730 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
2a734 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
2a738 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
2a73c 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2a740 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2a744 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
2a748 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
2a74c 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
2a750 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2a754 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2a758 04f 33 CA 63 FD |                             execf   request-0               'jump to service
2a75c 050             | cog4                        
2a75c 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
2a760 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
2a764 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
2a768 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
2a76c 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2a770 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2a774 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
2a778 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
2a77c 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
2a780 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2a784 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2a788 05b 33 CA 63 FD |                             execf   request-0               'jump to service
2a78c 05c             | cog5                        
2a78c 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
2a790 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
2a794 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
2a798 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
2a79c 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2a7a0 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2a7a4 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
2a7a8 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
2a7ac 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
2a7b0 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2a7b4 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2a7b8 067 33 CA 63 FD |                             execf   request-0               'jump to service
2a7bc 068             | cog6                        
2a7bc 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
2a7c0 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
2a7c4 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
2a7c8 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
2a7cc 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2a7d0 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2a7d4 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
2a7d8 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
2a7dc 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
2a7e0 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2a7e4 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2a7e8 073 33 CA 63 FD |                             execf   request-0               'jump to service
2a7ec 074             | cog7                        
2a7ec 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
2a7f0 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
2a7f4 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
2a7f8 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
2a7fc 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
2a800 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
2a804 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
2a808 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
2a80c 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
2a810 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
2a814 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
2a818 07f 33 CA 63 FD |                             execf   request-0               'jump to service
2a81c 080             |                             fit     128
2a81c 080             | 
2a81c 080             |                             fit     128
2a81c 080             | pad                         long    0[128-$]                'align init code to $80
2a81c 080             | 
2a81c 080             | '..................................................................................................
2a81c 080             | 
2a81c 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
2a81c 080             | 
2a81c 080             | init                        
2a81c 080             |                             ' get driver scratch long address in hub
2a81c 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
2a820 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
2a824 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
2a828 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
2a82c 084             |                     
2a82c 084             |                             ' read in the additional LUT RAM code
2a82c 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
2a830 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
2a834 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
2a838 087             | 
2a838 087             |                             ' read the startup parameters
2a838 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
2a83c 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
2a840 089             | 
2a840 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
2a840 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
2a844 08a             | 
2a844 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
2a848 08b 01 00 00 5F 
2a84c 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
2a850 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
2a854 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
2a858 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
2a85c 090             | 
2a85c 090             |                             ' setup data pin modes and data bus pin group in streamer commands
2a85c 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
2a860 091 01 00 00 FF 
2a864 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
2a868 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
2a86c 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
2a870 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
2a874 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
2a878 097 08 DE 47 F5 |                             or      a, #8
2a87c 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
2a880 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
2a884 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
2a888 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
2a88c 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
2a890 09d 01 DE 07 F1 |                             add     a, #1
2a894 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
2a898 09f             |  
2a898 09f             |                             ' setup device control pin states
2a898 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
2a89c 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
2a8a0 0a1 01 00 00 FF 
2a8a4 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
2a8a8 0a3             | 
2a8a8 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
2a8ac 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
2a8b0 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
2a8b4 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
2a8b8 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
2a8bc 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
2a8c0 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
2a8c4 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
2a8c8 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
2a8cc 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
2a8d0 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
2a8d4 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
2a8d8 0af             | pinloop
2a8d8 0af             |                             ' generate minimum CE high time before access
2a8d8 0af A1 07 00 FF 
2a8dc 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
2a8e0 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
2a8e4 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
2a8e8 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
2a8ec 0b4 1F DE 63 FD |                             waitx   a                       'delay
2a8f0 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
2a8f4 0b6             | 
2a8f4 0b6             |                             ' setup the COG mailboxes and addresses 
2a8f4 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
2a8f8 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
2a8fc 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
2a900 0b9             | 
2a900 0b9 28 2E 64 FD |                             setq    #24-1
2a904 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
2a908 0bb             | 
2a908 0bb             |                             ' setup the polling loop for active COGs 
2a908 0bb 01 C2 63 FD |                             cogid   id
2a90c 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
2a910 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
2a914 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
2a918 0bf 0A F0 07 F6 |                             mov     ptra, #10
2a91c 0c0 E1 F1 03 FA |                             mul     ptra, id
2a920 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
2a924 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
2a928 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
2a92c 0c4 03 C2 07 FA |                             mul     id, #3
2a930 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
2a934 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
2a938 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
2a93c 0c8 D8 01 B0 FD |                             call    #reloadcogs
2a940 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
2a944 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
2a948 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
2a948 0cb D8 E5 B7 F9 |                             setd    d, #addr1
2a94c 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
2a950 0cd 08 04 DC FC |                             rep     #2, #8
2a954 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
2a958 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
2a95c 0d0             | 
2a95c 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
2a95c 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
2a95c 0d0 01 C2 63 FD |                             cogid   id
2a960 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
2a964 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
2a968 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
2a96c 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
2a970 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
2a974 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
2a978 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
2a97c 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
2a980 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
2a984 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2a988 0db 3F E4 A7 F9 |                             alti    d, #%111_111
2a98c 0dc 00 00 00 F6 |                             mov     0-0, 0-0
2a990 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
2a994 0de A5 E5 03 F1 |                             add     d, const512
2a998 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
2a99c 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
2a9a0 0e1 00 00 00 F6 |                             mov     0-0, 0-0
2a9a4 0e2             |                             
2a9a4 0e2             |                             ' setup register values for control vector loop setup after we return
2a9a4 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
2a9a8 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
2a9ac 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
2a9b0 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
2a9b4 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
2a9b8 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
2a9bc 0e8 D0 C3 8F F9 |                             altd    id, #id0
2a9c0 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
2a9c4 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
2a9c8 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
2a9cc 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
2a9d0 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
2a9d4 0ee             |  
2a9d4 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
2a9d8 0ef 07 CA 07 F5 |                             and     request, #7
2a9dc 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
2a9e0 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
2a9e4 0f2             |                             fit     $100                    'ensure all init code fits this space
2a9e4 0f2             | 
2a9e4 0f2             |                             fit     $100                    'ensure all init code fits this space
2a9e4 0f2             | 
2a9e4 0f2 00 00 00 00 
      ...             
2aa14 0fe 00 00 00 00 
2aa18 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
2aa1c 100             | 
2aa1c 100             | '..................................................................................................
2aa1c 100             | ' Error result handling and COG notification of request completion
2aa1c 100             | 
2aa1c 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
2aa20 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
2aa24 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
2aa28 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
2aa2c 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
2aa30 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
2aa34 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
2aa38 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
2aa3c 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
2aa40 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
2aa44 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
2aa48 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
2aa4c 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
2aa50 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
2aa54 10e             | ' Poller re-starts here after a COG is serviced
2aa54 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
2aa58 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
2aa5c 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
2aa60 111             | ' Main dynamic polling loop repeats until a request arrives
2aa60 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
2aa64 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
2aa68 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
2aa6c 114             | 
2aa6c 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
2aa70 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
2aa74 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
2aa78 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
2aa7c 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
2aa80 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
2aa84 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
2aa88 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
2aa8c 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
2aa90 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
2aa94 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
2aa98 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
2aa9c 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
2aaa0 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
2aaa4 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
2aaa8 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
2aaac 124             | 
2aaac 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
2aab0 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
2aab4 126             |  
2aab4 126             | '..................................................................................................
2aab4 126             | ' List handler                               
2aab4 126             | 
2aab4 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
2aab8 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
2aabc 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
2aac0 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
2aac4 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
2aac8 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
2aacc 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
2aad0 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
2aad4 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
2aad8 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
2aadc 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
2aae0 131 33 00 60 FD |                             execf   0-0                     'process the request 
2aae4 132             | 
2aae4 132             | '..................................................................................................
2aae4 132             | ' Restoring per COG state and resuming where we left off
2aae4 132             | 
2aae4 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
2aae8 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
2aaec 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
2aaf0 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
2aaf4 136 D8 CB FB F8 |                             getbyte request, addr1, #3
2aaf8 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
2aafc 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
2ab00 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
2ab04 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
2ab08 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
2ab0c 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
2ab10 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
2ab14 13e             |                    
2ab14 13e             | '..................................................................................................
2ab14 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
2ab14 13e             | 
2ab14 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
2ab18 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
2ab1c 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
2ab20 141 D0 DF B7 F9 |                             setd    a, #id0
2ab24 142 D8 DF BF F9 |                             sets    a, #addr1
2ab28 143 FE FF FF FF 
2ab2c 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
2ab30 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
2ab34 146 3F DE A7 F9 |                             alti    a, #%111_111 
2ab38 147 00 00 F0 F9 |                             muxq    0-0, 0-0
2ab3c 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
2ab40 149 01 E2 63 FD |                             cogid   c
2ab44 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
2ab48 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
2ab4c 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
2ab50 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
2ab54 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
2ab58 14f 00 E0 03 F6 |                             mov     b, 0-0
2ab5c 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
2ab60 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
2ab64 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
2ab68 153 0C 00 90 AD |             if_z            jmp     #excluded               
2ab6c 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
2ab70 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
2ab74 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
2ab78 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
2ab7c 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
2ab80 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
2ab84 15a             | 
2ab84 15a             | 'determine priority cogs and build instructions for the polling sequence
2ab84 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
2ab88 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
2ab8c 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
2ab90 15d             | 
2ab90 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
2ab94 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
2ab98 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
2ab9c 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
2aba0 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
2aba4 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
2aba8 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
2abac 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
2abb0 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
2abb4 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
2abb8 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
2abbc 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
2abc0 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
2abc4 16a             | endprioloop
2abc4 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
2abc8 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
2abcc 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
2abd0 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
2abd4 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
2abd8 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
2abdc 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
2abe0 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
2abe4 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
2abe8 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
2abec 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
2abf0 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
2abf4 176             | 
2abf4 176             | ' populate the round robin COG polling instructions
2abf4 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
2abf8 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
2abfc 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
2ac00 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
2ac04 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
2ac08 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
2ac0c 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
2ac10 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
2ac14 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
2ac18 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
2ac1c 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
2ac20 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
2ac24 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
2ac28 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
2ac2c 184             | '..................................................................................................
2ac2c 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
2ac2c 184             | 
2ac2c 184             | set_latency                                                 '            (a) set latency
2ac2c 184             | get_latency                                                 '            (b) get latency
2ac2c 184             | set_burst                                                   '            (c) set burst size of bank
2ac2c 184             | get_burst                                                   '            (d) get burst size of bank
2ac2c 184             |                                                             '            (e) dump state
2ac2c 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
2ac30 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
2ac34 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
2ac38 187             |                                                             ' | | | | e  account for following AUGS
2ac38 187 04 00 00 FF 
2ac3c 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
2ac40 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
2ac44 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
2ac48 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
2ac4c 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
2ac50 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
2ac54 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
2ac58 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
2ac5c 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
2ac60 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
2ac64 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
2ac68 193             | 
2ac68 193             | '..................................................................................................
2ac68 193             | ' Misc EXECF code
2ac68 193             | 
2ac68 193 33 72 63 FD | start_read_exec             execf   newburstr
2ac6c 194 33 7C 63 FD | start_write_exec            execf   resumewrites
2ac70 195 33 78 63 FD | continue_read_exec          execf   lockedreads
2ac74 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
2ac78 197             | 
2ac78 197             | '..................................................................................................
2ac78 197             | ' Variables
2ac78 197             | 
2ac78 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
2ac7c 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
2ac80 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
2ac84 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
2ac88 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
2ac8c 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
2ac90 19d             | 
2ac90 19d 00 00 00 80 | xfreq1          long    $80000000
2ac94 19e 00 00 00 40 | xfreq2          long    $40000000
2ac98 19f 03 00 00 00 | delay           long    3
2ac9c 1a0             | 
2ac9c 1a0             | lutcodeaddr                 
2ac9c 1a0             | startupparams
2ac9c 1a0             | excludedcogs                                    'careful: shared register use!
2ac9c 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
2aca0 1a1 00 00 00 00 | flags           long    0
2aca4 1a2             | mask                                            'careful: shared register use!
2aca4 1a2 00 00 00 00 | resetmaskA      long    0
2aca8 1a3             | limit                                           'careful: shared register use!
2aca8 1a3 00 00 00 00 | resetmaskB      long    0
2acac 1a4 00 00 00 00 | datapins        long    0
2acb0 1a5             | const512                                        'careful: shared register use!
2acb0 1a5 00 00 00 00 | devicelist      long    0
2acb4 1a6 00 00 00 00 | coglist         long    0
2acb8 1a7 00 00 00 00 | mbox            long    0 
2acbc 1a8             | 
2acbc 1a8             | clkpin                                          'shared with code patched during init
2acbc 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
2acc0 1a9             | cspin                                           'shared with code patched during init
2acc0 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
2acc4 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
2acc8 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
2accc 1ac 01 00 00 00 | clkdelay        long    1
2acd0 1ad 00 00 00 00 | regdatabus      long    0
2acd4 1ae             | 
2acd4 1ae 10 00 00 00 | deviceaddr      long    $10
2acd8 1af             | rrcounter
2acd8 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
2acdc 1b0             | 
2acdc 1b0             | ' jump addresses for the per COG handlers
2acdc 1b0 20 00 00 00 | cog0_handler    long    cog0
2ace0 1b1 2C 00 00 00 | cog1_handler    long    cog1
2ace4 1b2 38 00 00 00 | cog2_handler    long    cog2
2ace8 1b3 44 00 00 00 | cog3_handler    long    cog3
2acec 1b4 50 00 00 00 | cog4_handler    long    cog4
2acf0 1b5 5C 00 00 00 | cog5_handler    long    cog5
2acf4 1b6 68 00 00 00 | cog6_handler    long    cog6
2acf8 1b7 74 00 00 00 | cog7_handler    long    cog7
2acfc 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
2ad00 1b9             | 
2ad00 1b9             | ' EXECF sequences
2ad00 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
2ad04 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
2ad08 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
2ad0c 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
2ad10 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
2ad14 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
2ad18 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
2ad1c 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
2ad1c 1c0             | 
2ad1c 1c0             | 
2ad1c 1c0             | ' SKIPF sequences
2ad1c 1c0             | skiptable
2ad1c 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
2ad20 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
2ad24 1c2 00 00 00 00 |                 long    0                      ' read modify write long
2ad28 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
2ad2c 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
2ad30 1c5 00 00 00 00 | pattern2        long    0
2ad34 1c6 00 00 00 00 | pattern3        long    0
2ad38 1c7 77 02 00 00 | singlelong      long    %1001110111  
2ad3c 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
2ad40 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
2ad44 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
2ad48 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
2ad4c 1cc             | 
2ad4c 1cc             | ' LUT RAM address values
2ad4c 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
2ad50 1cd DD 02 00 00 | continue_read   long    continue_read_lut
2ad54 1ce DB 02 00 00 | continue_write  long    continue_write_lut
2ad58 1cf F6 02 00 00 | noread          long    noread_lut
2ad5c 1d0             | 
2ad5c 1d0 00 00 00 00 | id0             long    0
2ad60 1d1 01 00 00 00 | id1             long    1
2ad64 1d2 02 00 00 00 | id2             long    2
2ad68 1d3 03 00 00 00 | id3             long    3
2ad6c 1d4 04 00 00 00 | id4             long    4
2ad70 1d5 05 00 00 00 | id5             long    5
2ad74 1d6 06 00 00 00 | id6             long    6
2ad78 1d7 07 00 00 00 | id7             long    7
2ad7c 1d8             | 
2ad7c 1d8             | 'These next 10 request registers below are also temporarily reused during init 
2ad7c 1d8             | 'and COG updates and need to follow immediately after id0-id7
2ad7c 1d8 00 00 00 00 | addr1           long    0
2ad80 1d9 00 00 00 00 | hubdata         long    0
2ad84 1da 00 00 00 00 | count           long    0
2ad88 1db 00 00 00 00 | addr2           long    0
2ad8c 1dc 00 00 00 00 | total           long    0
2ad90 1dd 00 00 00 00 | offset1         long    0
2ad94 1de 00 00 00 00 | offset2         long    0
2ad98 1df 00 00 00 00 | link            long    0
2ad9c 1e0             | 
2ad9c 1e0             | burstwrite                                      'note shared register use during init
2ad9c 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
2ada0 1e1 00 00 00 00 | id              long    0
2ada4 1e2             | 
2ada4 1e2 00 00 00 00 | header          long    0
2ada8 1e3 00 00 00 00 | trailer         long    0
2adac 1e4 00 00 00 00 | cmdaddr         long    0
2adb0 1e5 00 00 00 00 | request         long    0
2adb4 1e6 00 00 00 00 | rrlimit         long    0
2adb8 1e7 00 00 00 00 | pinconfig       long    0
2adbc 1e8 00 00 00 00 | clks            long    0
2adc0 1e9 00 00 00 00 | resume          long    0
2adc4 1ea 00 00 00 00 | orighubsize     long    0
2adc8 1eb 00 00 00 00 | wrclks          long    0
2adcc 1ec             | 
2adcc 1ec 00 00 00 00 | pattern         long    0
2add0 1ed 00 00 00 00 | hubscratch      long    0
2add4 1ee 00 10 00 00 | val4k           long    4096
2add8 1ef             | 
2add8 1ef             | ' temporary general purpose regs
2add8 1ef 00 00 00 00 | a               long    0
2addc 1f0 00 00 00 00 | b               long    0
2ade0 1f1 00 00 00 00 | c               long    0
2ade4 1f2 00 00 00 00 | d               long    0
2ade8 1f3             |                 fit     502
2ade8 1f3             | 
2ade8 1f3             |                 fit     502
2ade8 1f3             | 
2ade8 1f3             | '..................................................................................................
2ade8 1f3             | 
2ade8 1f3             |             orgh
2ade8                 | 
2ade8                 | lut_code
2ade8                 | 'HW init code up to 80 longs
2ade8                 | 
2ade8                 | '..................................................................................................
2ade8                 | ' Memory layout for LUT RAM once operational:
2ade8                 | '
2ade8                 | '  LUT RAM address      Usage
2ade8                 | '  ---------------      ----
2ade8                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
2ade8                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
2ade8                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
2ade8                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
2ade8                 | '
2ade8                 | ' Also during driver COG startup:
2ade8                 | ' $230-$24F is used for HW init setup
2ade8                 | ' $250-$26F is used as temporary vector storage 
2ade8                 | '..................................................................................................
2ade8                 | 
2ade8                 |                 org $230    
2ade8 230             | 
2ade8 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
2ade8 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
2adec 231 24 16 60 FD |                             pollxfi
2adf0 232 FF AA 2A FF 
2adf4 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
2adf8 234 28 00 B0 FD |                             call    #sendqspi
2adfc 235 07 F8 07 FF 
2ae00 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
2ae04 237 28 00 B0 FD |                             call    #sendspi
2ae08 238 F8 07 78 FF 
2ae0c 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
2ae10 23a 1C 00 B0 FD |                             call    #sendspi
2ae14 23b 7F 78 78 FF 
2ae18 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
2ae1c 23d 10 00 B0 FD |                             call    #sendspi 
2ae20 23e 2D 00 64 FD |                             ret
2ae24 23f             | 
2ae24 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
2ae28 240 32 0C 64 FD |                             skipf   #%110
2ae2c 241 9C EF 03 F6 |                             mov     pb, xsendimm
2ae30 242             | 
2ae30 242 10 D0 07 F6 | sendspi                     mov     clks, #16
2ae34 243 97 EF 03 F6 |                             mov     pb, ximm8lut
2ae38 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
2ae3c 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2ae40 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
2ae44 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
2ae48 248 24 36 60 FD |                             waitxfi                         'wait for the completion
2ae4c 249 50 48 63 FD |                             fltl    datapins                'float data bus
2ae50 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
2ae54 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
2ae58 24c             | 
2ae58 24c 00 00 00 00 
2ae5c 24d 00 00 00 00 
2ae60 24e 00 00 00 00 
2ae64 24f 00 00 00 00 |                 long    0[$270-32-$]
2ae68 250             |                 fit     $270-32  ' keep room for 32 vector longs
2ae68 250             |     
2ae68 250             |                 fit     $270-32  ' keep room for 32 vector longs
2ae68 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
2ae68 250             | rw_vect ' PSRAM jump vectors
2ae68 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2ae6c 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2ae70 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2ae74 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2ae78 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
2ae7c 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
2ae80 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
2ae84 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
2ae88 258             | ro_vect ' R/O PSRAM jump vectors
2ae88 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2ae8c 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
2ae90 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
2ae94 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
2ae98 25c 00 01 00 00 |                 long    unsupported
2ae9c 25d 00 01 00 00 |                 long    unsupported
2aea0 25e 00 01 00 00 |                 long    unsupported
2aea4 25f 00 01 00 00 |                 long    unsupported
2aea8 260             | ctrl_vect ' Control jump vectors
2aea8 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
2aeac 261 00 01 00 00 |                 long    unsupported
2aeb0 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
2aeb4 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
2aeb8 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
2aebc 265 00 01 00 00 |                 long    unsupported
2aec0 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
2aec4 267 3E 01 00 00 |                 long    reconfig 
2aec8 268             | no_vect ' Invalid bank jump vectors
2aec8 268 01 01 00 00 |                 long    invalidbank
2aecc 269 01 01 00 00 |                 long    invalidbank
2aed0 26a 01 01 00 00 |                 long    invalidbank
2aed4 26b 01 01 00 00 |                 long    invalidbank
2aed8 26c 01 01 00 00 |                 long    invalidbank
2aedc 26d 01 01 00 00 |                 long    invalidbank
2aee0 26e 01 01 00 00 |                 long    invalidbank
2aee4 26f 01 01 00 00 |                 long    invalidbank
2aee8 270             |                 fit     $270
2aee8 270             | 
2aee8 270             |                 fit     $270
2aee8 270             | '..................................................................................................
2aee8 270             | ' PSRAM READS
2aee8 270             |                                                             ' a b c d e f
2aee8 270             |                                                             ' B W L B R L  (a) byte read
2aee8 270             |                                                             ' Y O O U E O  (b) word read
2aee8 270             |                                                             ' T R N R S C  (c) long read
2aee8 270             |                                                             ' E D G S U K  (d) new burst read
2aee8 270             |                                                             '       T M E  (e) resumed sub-burst
2aee8 270             |                                                             '         E D  (f) locked sub-burst
2aee8 270             | 
2aee8 270             | 
2aee8 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
2aeec 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
2aef0 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
2aef4 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
2aef8 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
2aefc 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
2af00 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
2af04 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
2af08 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
2af0c 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
2af10 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
2af14 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
2af18 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
2af1c 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
2af20 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
2af24 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
2af28 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
2af2c 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
2af30 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
2af34 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
2af38 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
2af3c 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
2af40 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
2af44 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
2af48 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
2af4c 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
2af50 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
2af54 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
2af58 28c             | 
2af58 28c             |                             ' fall through to read bursts
2af58 28c             |                         
2af58 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
2af58 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
2af5c 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2af60 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2af64 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2af68 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
2af6c 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
2af70 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
2af74 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
2af78 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
2af7c 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
2af80 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
2af84 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
2af88 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
2af8c 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
2af90 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
2af94 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
2af98 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
2af9c 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
2afa0 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
2afa4 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
2afa8 2a0 E8 D1 03 F1 |                             add     clks, clks
2afac 2a1             | readcommon
2afac 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
2afb0 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2afb4 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
2afb8 2a4             | 
2afb8 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2afbc 2a5 69 C8 63 FD |                             rev     cmdaddr
2afc0 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2afc4 2a7 61 C8 63 FD |                             mergeb  cmdaddr
2afc8 2a8             | 
2afc8 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
2afcc 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
2afd0 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
2afd0 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
2afd4 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
2afd8 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
2afdc 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
2afe0 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
2afe0 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
2afe4 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
2afe8 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
2afec 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
2aff0 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
2aff4 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
2aff8 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
2aff8 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
2affc 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
2b000 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
2b004 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
2b008 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
2b00c 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
2b010 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
2b014 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
2b018 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
2b01c 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
2b020 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
2b024 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
2b028 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
2b02c 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
2b030 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
2b030 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
2b034 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
2b038 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
2b03c 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
2b040 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
2b044 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
2b048 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
2b04c 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
2b050 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
2b054 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
2b058 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
2b05c 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
2b060 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
2b064 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
2b068 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
2b06c 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
2b070 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
2b074 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
2b078 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
2b07c 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
2b080 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
2b084 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
2b088 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
2b08c 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
2b090 2da 10 03 90 FD |                             jmp     #writecommon
2b094 2db             | 
2b094 2db             | '..................................................................................................
2b094 2db             | ' Burst continuation testing
2b094 2db             | 
2b094 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
2b098 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
2b09c 2dd             | continue_read_lut          
2b09c 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
2b0a0 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
2b0a4 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
2b0a8 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
2b0ac 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
2b0b0 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
2b0b4 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
2b0b8 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
2b0bc 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
2b0c0 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
2b0c4 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
2b0c8 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
2b0cc 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
2b0d0 2ea             | 
2b0d0 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
2b0d4 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
2b0d8 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
2b0dc 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
2b0e0 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
2b0e4 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
2b0e8 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
2b0ec 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
2b0f0 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
2b0f4 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
2b0f8 2f4 2A 1C 66 0D |             _ret_           push    #poller
2b0fc 2f5             | 
2b0fc 2f5             | 
2b0fc 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
2b100 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
2b100 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
2b104 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
2b108 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
2b10c 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
2b110 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
2b114 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
2b118 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
2b11c 2fd 2D 00 64 FD |                             ret                             ' | continue processing
2b120 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
2b124 2ff             | '..................................................................................................
2b124 2ff             | ' Completion of requests
2b124 2ff             | 
2b124 2ff             | complete_rw_lut             
2b124 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
2b128 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
2b12c 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
2b130 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
2b134 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
2b138 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
2b13c 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
2b140 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
2b144 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
2b148 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
2b14c 309 32 62 64 AD |             if_z            skipf   #%110001
2b150 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
2b154 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
2b158 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
2b15c 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
2b160 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
2b164 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
2b168 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
2b16c 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
2b170 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
2b174 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
2b178 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
2b17c 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
2b180 316             |                                                             ' skipcase (a) gfx copy to/from hub
2b180 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
2b180 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
2b180 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
2b184 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
2b188 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
2b18c 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
2b190 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
2b194 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
2b198 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
2b19c 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
2b1a0 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
2b1a4 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
2b1a8 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
2b1ac 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
2b1b0 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
2b1b4 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
2b1b8 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
2b1bc 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
2b1c0 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
2b1c4 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
2b1c8 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
2b1cc 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
2b1d0 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
2b1d4 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
2b1d8 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
2b1dc 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
2b1e0 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
2b1e4 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
2b1e8 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
2b1ec 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
2b1f0 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
2b1f4 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
2b1f8 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
2b1fc 335 DF B7 03 A6 |             if_z            mov     addr2, link
2b200 336 34 FF 9F AD |             if_z            jmp     #checknext
2b204 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
2b208 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2b20c 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
2b210 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
2b214 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
2b218 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
2b21c 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
2b220 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
2b224 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
2b228 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
2b22c 341             | 
2b22c 341             | '..................................................................................................
2b22c 341             | ' PSRAM WRITES
2b22c 341             |                                                             '  a b c d e f g h
2b22c 341             | 
2b22c 341             |                                                             '  B W L F B R L L (a) byte write(s)
2b22c 341             |                                                             '  Y O O I U E O O (b) word write(s)
2b22c 341             |                                                             '  T R N L R S C C (c) long write(s)
2b22c 341             |                                                             '  E D G L S U K K (d) resumed fill
2b22c 341             |                                                             '          T M E E (e) new burst write
2b22c 341             |                                                             '            E D D (f) resumed burst
2b22c 341             |                                                             '              F B (g) locked fill
2b22c 341             |                                                             '              I U (h) locked burst write
2b22c 341             |                                                             '              L R 
2b22c 341             |                                                             '              L S 
2b22c 341             |                                                             '                T 
2b22c 341             | 
2b22c 341             | w_single                   
2b22c 341             | w_fill_cont           
2b22c 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
2b230 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
2b234 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
2b238 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
2b23c 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
2b240 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
2b244 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
2b248 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
2b24c 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
2b250 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
2b254 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
2b258 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
2b25c 34d             |                ' disable call to r_resume_burst for single longs when z=0
2b25c 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
2b260 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
2b264 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
2b268 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
2b26c 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
2b270 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
2b274 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
2b278 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
2b27c 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
2b280 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
2b284 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
2b288 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
2b28c 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
2b290 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
2b294 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
2b298 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
2b29c 35d             |         
2b29c 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
2b29c 35d             |             '
2b29c 35d             |             '  At least one of these 3 optional components will be sent
2b29c 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
2b29c 35d             |             '     body - N x full longs of data
2b29c 35d             |             '     trailer - last partial long of data
2b29c 35d             |             '
2b29c 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
2b29c 35d             |             '
2b29c 35d             |             'Case    Type                           Sends
2b29c 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
2b29c 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
2b29c 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
2b29c 35d             |             ' 4)     Multiple long fill             body only
2b29c 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
2b29c 35d             | 
2b29c 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
2b29c 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
2b2a0 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
2b2a4 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
2b2a8 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
2b2ac 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
2b2b0 362 13 8C 07 F6 |                             mov     pattern3, #%10011
2b2b4 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
2b2b8 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
2b2bc 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
2b2c0 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
2b2c4 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
2b2c8 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
2b2cc 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
2b2d0 36a             |                             
2b2d0 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2b2d4 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
2b2d8 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
2b2dc 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
2b2e0 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
2b2e4 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
2b2e8 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
2b2ec 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
2b2f0 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
2b2f4 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
2b2f8 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
2b2fc 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
2b300 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
2b304 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
2b308 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
2b30c 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
2b310 37a             | 
2b310 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
2b314 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
2b318 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
2b31c 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
2b320 37e             |                  
2b320 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
2b324 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
2b328 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
2b32c 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
2b330 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
2b334 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
2b338 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
2b33c 385             | 
2b33c 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
2b340 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
2b344 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
2b348 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
2b34c 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
2b350 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
2b354 38b             | 
2b354 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
2b354 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
2b358 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
2b35c 38d 2A B0 63 FD |                             push    addr1                   'save address
2b360 38e             | 
2b360 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
2b360 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
2b364 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
2b368 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
2b36c 391             |             
2b36c 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
2b370 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
2b374 393 2B B0 63 FD |                             pop     addr1                   'restore address
2b378 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
2b37c 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
2b380 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
2b384 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
2b388 398             | 
2b388 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
2b38c 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
2b390 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
2b394 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
2b398 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
2b39c 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
2b3a0 39e             | 
2b3a0 39e             |                             'trailer is done
2b3a0 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
2b3a4 39f             | 
2b3a4 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
2b3a8 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
2b3ac 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
2b3b0 3a2             | 
2b3b0 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
2b3b4 3a3 69 C8 63 FD |                             rev     cmdaddr                 
2b3b8 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
2b3bc 3a5 61 C8 63 FD |                             mergeb  cmdaddr
2b3c0 3a6             |                             
2b3c0 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
2b3c4 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
2b3c8 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
2b3cc 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
2b3d0 3aa             |                                                          
2b3d0 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
2b3d4 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
2b3d8 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
2b3dc 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
2b3e0 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
2b3e4 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
2b3e8 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
2b3ec 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
2b3f0 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
2b3f4 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
2b3f8 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
2b3fc 3b5             |  
2b3fc 3b5 59 52 63 FD |                             drvh    cspin
2b400 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
2b404 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
2b408 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
2b40c 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
2b410 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
2b414 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
2b418 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
2b41c 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
2b420 3be EA E5 03 F6 |                             mov     d, orighubsize
2b424 3bf EF E5 63 F0 |                             shl     d, a
2b428 3c0 F2 E3 83 F1 |                             sub     c, d
2b42c 3c1 DD E3 03 F1 |                             add     c, offset1
2b430 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
2b434 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
2b438 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
2b43c 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
2b440 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
2b444 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
2b448 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
2b44c 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
2b450 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
2b454 3cb BB D3 03 F6 |                             mov     resume, restorefill
2b458 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
2b45c 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
2b460 3ce 6C FC BF CD |             if_c            call    #yield
2b464 3cf 2D 00 64 FD |                             ret
2b468 3d0             |                            
2b468 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
2b468 3d0             |                       '     rczl    pa                      'rotate left into address offset
2b468 3d0             |                       '     rczl    c wcz                   'restore count and flags
2b468 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
2b46c 3d1 02 EC 67 F0 |                             shl     pa, #2
2b470 3d2 28 06 64 AD |             if_z            setq    #3
2b474 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
2b478 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
2b47c 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
2b480 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
2b484 3d7             | 
2b484 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
2b488 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
2b48c 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
2b490 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
2b494 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
2b498 3dc             |                 fit 1024-32
2b498 3dc             |         
2b498 3dc             | 
2b498 3dc             | '..................................................................................................
2b498 3dc             | 
2b498 3dc             |                 fit 1024-32
2b498 3dc 00 00 00 00 
2b49c 3dd 00 00 00 00 
2b4a0 3de 00 00 00 00 
2b4a4 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
2b4a8 3e0             |                 org 1024-32
2b4a8 000             | 
2b4a8 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
2b4a8 000 00 00 00 00 |                 long $0000
2b4ac 001 11 11 00 00 |                 long $1111
2b4b0 002 22 22 00 00 |                 long $2222
2b4b4 003 33 33 00 00 |                 long $3333
2b4b8 004 44 44 00 00 |                 long $4444
2b4bc 005 55 55 00 00 |                 long $5555
2b4c0 006 66 66 00 00 |                 long $6666
2b4c4 007 77 77 00 00 |                 long $7777
2b4c8 008 88 88 00 00 |                 long $8888
2b4cc 009 99 99 00 00 |                 long $9999
2b4d0 00a AA AA 00 00 |                 long $aaaa
2b4d4 00b BB BB 00 00 |                 long $bbbb
2b4d8 00c CC CC 00 00 |                 long $cccc
2b4dc 00d DD DD 00 00 |                 long $dddd
2b4e0 00e EE EE 00 00 |                 long $eeee
2b4e4 00f FF FF 00 00 |                 long $ffff
2b4e8 010             | 
2b4e8 010             | 'masks
2b4e8 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
2b4ec 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
2b4f0 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
2b4f4 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
2b4f8 014             | 
2b4f8 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
2b4fc 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
2b500 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
2b504 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
2b508 018             | 
2b508 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
2b50c 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
2b510 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
2b514 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
2b518 01c             | 
2b518 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
2b51c 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
2b520 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
2b524 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
2b528 020             |         fit 1024
2b528 020             | 
2b528 020             |         fit 1024
2b528 020             | 
2b528 020             | '--------------------------------------------------------------------------------------------------
2b528 020             |         orgh
2b528                 | 
2b528                 | gfxexpansion
2b528                 |                             'simple line drawing graphics expansion of memory driver
2b528                 |                             'jmp     #donerepeats                'just return for now
2b528                 | 
2b528     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
2b52c     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
2b530     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
2b534     DD E1 03 F6 |                             mov     b, offset1              'get error term
2b538     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
2b53c     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
2b540     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
2b544     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
2b548     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
2b54c     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
2b550     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
2b554     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
2b558     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
2b55c     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
2b560     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
2b564     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
2b568     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
2b56c     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
2b570     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
2b574     DC E5 33 F9 |                             getword d, total, #0            'get line width
2b578     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
2b57c     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
2b580     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
2b584     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
2b588     C3 03 80 FD |                             jmp     #readmask               'continue filling
2b58c                 | 	alignl
2b58c                 | _usbnew_spin2_dat_
2b58c                 |                 org     $000
2b58c 000             | 
2b58c 000             | usb_host_start
2b58c 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
2b590 001             | 
2b590 001 03 00 00 FF 
2b594 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
2b598 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
2b59c 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
2b5a0 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
2b5a4 006 29 70 63 FD |                 setq2   htmp
2b5a8 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
2b5ac 008             | 
2b5ac 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
2b5b0 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
2b5b4 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
2b5b8 00b             | 
2b5b8 00b             | '------------------------------------------------------------------------------
2b5b8 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
2b5b8 00b             | ' special because the receiving function must not respond with either STALL or
2b5b8 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
2b5b8 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
2b5b8 00b             | ' corrupt packet, it must ignore the transaction
2b5b8 00b             | '------------------------------------------------------------------------------
2b5b8 00b             | ' On entry:
2b5b8 00b             | '   PTRA - start address of the SETUP data struct.
2b5b8 00b             | ' On exit:
2b5b8 00b             | '   retval - PID_ACK on success, otherwise error code.
2b5b8 00b             | '------------------------------------------------------------------------------
2b5b8 00b             | txn_setup
2b5b8 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
2b5bc 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
2b5c0 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
2b5c4 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
2b5c8 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
2b5cc 010             | .setup
2b5cc 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
2b5d0 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b5d4 012 2D 00 64 AD |         if_z    ret
2b5d8 013 7C 0B B0 FD |                 call    #retry_wait
2b5dc 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2b5e0 015 2D 00 64 AD |         if_z    ret
2b5e4 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
2b5e8 017 E0 FF 9F FD |                 jmp     #.setup
2b5ec 018             | 
2b5ec 018             | '------------------------------------------------------------------------------
2b5ec 018             | ' IN/INTERRUPT transaction.
2b5ec 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
2b5ec 018             | '------------------------------------------------------------------------------
2b5ec 018             | ' On entry:
2b5ec 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
2b5ec 018             | '     CRC(b19..23).
2b5ec 018             | ' On exit:
2b5ec 018             | '------------------------------------------------------------------------------
2b5ec 018             | txn_in
2b5ec 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2b5f0 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
2b5f4 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
2b5f8 01b             | 
2b5f8 01b             |                 ' Fall through to urx_packet
2b5f8 01b             | 
2b5f8 01b             | '------------------------------------------------------------------------------
2b5f8 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
2b5f8 01b             | ' received are handshakes and IN DATAx.
2b5f8 01b             | '------------------------------------------------------------------------------
2b5f8 01b             | ' On entry:
2b5f8 01b             | ' On exit:
2b5f8 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
2b5f8 01b             | '     returned.
2b5f8 01b             | '------------------------------------------------------------------------------
2b5f8 01b             | urx_packet
2b5f8 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
2b5fc 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2b600 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
2b604 01e 1A 92 63 FD |                 getct   hct2
2b608 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
2b60c 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
2b610 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
2b614 022             | .wait_sop
2b614 022 22 A7 8A FA |                 rdpin   urx, dm
2b618 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2b61c 024 08 00 90 CD |         if_c    jmp     #.get_pid
2b620 025 FC 25 CC FB |                 jnct2   #.wait_sop
2b624 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
2b628 027             | .get_pid
2b628 027 28 02 B0 FD |                 call    #urx_next
2b62c 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
2b630 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
2b634 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
2b638 02b             | .chk_pid
2b638 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2b63c 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
2b640 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
2b644 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
2b648 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
2b64c 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
2b650 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
2b654 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
2b658 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
2b65c 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
2b660 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
2b664 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
2b668 037             | .ack_resend
2b668 037 22 A7 82 FA |                 rqpin   urx, dm
2b66c 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2b670 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
2b674 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
2b678 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
2b67c 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
2b680 03d             | .chk_eop
2b680 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2b684 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
2b688 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
2b68c 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
2b690 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
2b694 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2b698 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
2b69c 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
2b6a0 045 2D 00 64 FD |                 ret
2b6a4 046             | .idle
2b6a4 046 22 A7 82 FA |                 rqpin   urx, dm
2b6a8 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2b6ac 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
2b6b0 049 2D 00 64 FD |                 ret
2b6b4 04a             | 
2b6b4 04a             | '------------------------------------------------------------------------------
2b6b4 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
2b6b4 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
2b6b4 04a             | ' if one is required.
2b6b4 04a             | '------------------------------------------------------------------------------
2b6b4 04a             | ' On entry:
2b6b4 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
2b6b4 04a             | ' On exit:
2b6b4 04a             | '------------------------------------------------------------------------------
2b6b4 04a             | utx_token
2b6b4 04a 22 A7 82 FA |                 rqpin   urx, dm
2b6b8 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2b6bc 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
2b6c0 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2b6c4 04e 34 0D B0 CD |         if_c    call    #utx_pre
2b6c8 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2b6cc 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
2b6d0 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
2b6d4 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
2b6d8 053             | .next_byte
2b6d8 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
2b6dc 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
2b6e0 055             | .wait
2b6e0 055 40 46 72 FD |                 testp   dp                      wc
2b6e4 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
2b6e8 057 23 03 08 FC |                 akpin   dp
2b6ec 058 22 A5 22 FC |                 wypin   utx, dm
2b6f0 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
2b6f4 05a             | 
2b6f4 05a             | '------------------------------------------------------------------------------
2b6f4 05a             | ' SETUP/OUT/INTERRUPT transaction.
2b6f4 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
2b6f4 05a             | '------------------------------------------------------------------------------
2b6f4 05a             | ' On entry:
2b6f4 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
2b6f4 05a             | '     CRC(b19..23).
2b6f4 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
2b6f4 05a             | '   pkt_data - count of DATAx payload bytes to send.
2b6f4 05a             | ' On exit:
2b6f4 05a             | '------------------------------------------------------------------------------
2b6f4 05a             | txn_out
2b6f4 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
2b6f8 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
2b6fc 05c 00 00 C0 FF 
2b700 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
2b704 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
2b708 05f             | 
2b708 05f             |                 ' Fall through to utx_data
2b708 05f             | 
2b708 05f             | '------------------------------------------------------------------------------
2b708 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
2b708 05f             | ' calculated while the data byte is being shifted out. Since data stage
2b708 05f             | ' success/fail is not determined until the status stage of the transaction,
2b708 05f             | ' this routine is only concerned about the current DATAx packet.
2b708 05f             | '------------------------------------------------------------------------------
2b708 05f             | ' On entry:
2b708 05f             | '   PTRA - hub start address of the data to read.
2b708 05f             | '   pkt_cnt - data payload size.
2b708 05f             | ' On exit:
2b708 05f             | '------------------------------------------------------------------------------
2b708 05f             | utx_data
2b708 05f 22 A7 82 FA |                 rqpin   urx, dm
2b70c 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2b710 061 F4 FF 9F CD |         if_c    jmp     #utx_data
2b714 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
2b718 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
2b71c 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2b720 065 D8 0C B0 CD |         if_c    call    #utx_pre
2b724 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2b728 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
2b72c 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2b730 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
2b734 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
2b738 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
2b73c 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
2b740 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
2b744 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
2b748 06f             | .read_byte
2b748 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
2b74c 070 F0 00 B0 FD |                 call    #utx_byte
2b750 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
2b754 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
2b758 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2b75c 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2b760 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
2b764 076             | .send_crc
2b764 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
2b768 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
2b76c 078 D0 00 B0 FD |                 call    #utx_byte
2b770 079 5D A5 EA F8 |                 getbyte utx, crc, #1
2b774 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
2b778 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
2b77c 07c             | 
2b77c 07c             | '------------------------------------------------------------------------------
2b77c 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
2b77c 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
2b77c 07c             | ' expects that the packet includes at least the CRC word.
2b77c 07c             | '
2b77c 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
2b77c 07c             | ' was requested, which makes it difficult to determine where the data stops
2b77c 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
2b77c 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
2b77c 07c             | ' USB-16 expected residual value of 0xB001.
2b77c 07c             | '
2b77c 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
2b77c 07c             | ' so the caller can verify IN success before writing the data to its final
2b77c 07c             | ' destination.
2b77c 07c             | '------------------------------------------------------------------------------
2b77c 07c             | ' On entry:
2b77c 07c             | '   pkt_data - max byte count expected to be in the packet.
2b77c 07c             | '   newb_flg - signals new byte ready when toggled.
2b77c 07c             | ' On exit:
2b77c 07c             | '   pkt_cnt - actual number of bytes read.
2b77c 07c             | '------------------------------------------------------------------------------
2b77c 07c             | urx_data
2b77c 07c F7 75 03 F6 |                 mov     htmp2, pb
2b780 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
2b784 07e 00 00 C0 FF 
2b788 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
2b78c 080 BA EF 03 F6 |                 mov     pb, htmp2
2b790 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
2b794 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
2b798 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
2b79c 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
2b7a0 085             | .wait_byte
2b7a0 085             | ' In-line rx for max speed
2b7a0 085 22 A7 82 FA |                 rqpin   urx, dm
2b7a4 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2b7a8 087 53 A5 02 F5 |                 and     utx, urx
2b7ac 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2b7b0 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2b7b4 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
2b7b8 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
2b7bc 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
2b7c0 08d DC FF 9F FD |                 jmp     #.wait_byte
2b7c4 08e             | .get_byte
2b7c4 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
2b7c8 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
2b7cc 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
2b7d0 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
2b7d4 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
2b7d8 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
2b7dc 094             | .end_crc
2b7dc 094 01 B8 06 F1 |                 add     pkt_cnt, #1
2b7e0 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
2b7e4 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
2b7e8 097 2D 00 64 1D |         if_a    ret
2b7ec 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
2b7ec 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
2b7ec 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
2b7ec 098             | ' to miss it, so cheat a bit and look for SOP clear here.
2b7ec 098 22 A7 82 FA |                 rqpin   urx, dm
2b7f0 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
2b7f4 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
2b7f8 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
2b7f8 09b             | .chk_crc
2b7f8 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
2b7fc 09c 58 00 00 FF 
2b800 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
2b804 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
2b808 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
2b80c 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
2b810 0a1 34 09 B0 FD |                 call    #poll_waitx
2b814 0a2             | 
2b814 0a2             |                 ' Fall through to utx_handshake
2b814 0a2             | 
2b814 0a2             | '------------------------------------------------------------------------------
2b814 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
2b814 0a2             | ' the appropriate IP delay has been inserted.
2b814 0a2             | '------------------------------------------------------------------------------
2b814 0a2             | ' On entry:
2b814 0a2             | '   retval - handshake PID to send.
2b814 0a2             | ' On exit:
2b814 0a2             | '   retval unchanged.
2b814 0a2             | '------------------------------------------------------------------------------
2b814 0a2             | utx_handshake
2b814 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
2b818 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
2b81c 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
2b820 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
2b824 0a6 5F A5 02 F6 |                 mov     utx, retval
2b828 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
2b82c 0a8             | .idle
2b82c 0a8 22 A7 82 FA |                 rqpin   urx, dm
2b830 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
2b834 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
2b838 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
2b83c 0ac 08 09 90 FD |                 jmp     #poll_waitx
2b840 0ad             | 
2b840 0ad             | '------------------------------------------------------------------------------
2b840 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
2b840 0ad             | '------------------------------------------------------------------------------
2b840 0ad             | ' On entry:
2b840 0ad             | '   utx - byte to transmit.
2b840 0ad             | ' On exit:
2b840 0ad             | '------------------------------------------------------------------------------
2b840 0ad             | utx_byte
2b840 0ad 40 46 72 FD |                 testp   dp                      wc
2b844 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
2b848 0af 23 03 08 FC |                 akpin   dp
2b84c 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
2b850 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
2b854 0b2             | 
2b854 0b2             | '------------------------------------------------------------------------------
2b854 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
2b854 0b2             | '------------------------------------------------------------------------------
2b854 0b2             | ' On entry:
2b854 0b2             | ' On exit:
2b854 0b2             | '   retval - the byte read.
2b854 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
2b854 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
2b854 0b2             | '     received.
2b854 0b2             | '------------------------------------------------------------------------------
2b854 0b2             | urx_next
2b854 0b2 22 A7 8A FA |                 rdpin   urx, dm
2b858 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
2b85c 0b4 53 A5 02 F5 |                 and     utx, urx
2b860 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
2b864 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
2b868 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
2b86c 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
2b870 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
2b874 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
2b878 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
2b87c 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
2b880 0bd 2D 00 64 FD |                 ret
2b884 0be             | 
2b884 0be             | '------------------------------------------------------------------------------
2b884 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
2b884 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
2b884 0be             | ' length, and the PID is not included in the CRC calculation:
2b884 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
2b884 0be             | '  CRC5  ENDP ADDRESS PID
2b884 0be             | ' %00000_1111_1111111_xxxxxxxx
2b884 0be             | '------------------------------------------------------------------------------
2b884 0be             | ' On entry:
2b884 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
2b884 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
2b884 0be             | ' On exit:
2b884 0be             | '   ep_addr_pid - CRC value appended to the packet.
2b884 0be             | '------------------------------------------------------------------------------
2b884 0be             | calc_crc5
2b884 0be FF 03 00 FF 
2b888 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
2b88c 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
2b890 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
2b894 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
2b898 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
2b89c 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
2b8a0 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
2b8a4 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
2b8a8 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
2b8ac 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
2b8b0 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
2b8b4 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2b8b8 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
2b8bc 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
2b8c0 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
2b8c4 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
2b8c8 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
2b8cc 0d0             | 
2b8cc 0d0             | '------------------------------------------------------------------------------
2b8cc 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
2b8cc 0d0             | '------------------------------------------------------------------------------
2b8cc 0d0             | isr1_fsframe
2b8cc 0d0 1A 92 62 FD |                 getct   iframe_ct_base
2b8d0 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2b8d4 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2b8d8 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2b8dc 0d4             | .wait
2b8dc 0d4 40 46 72 FD |                 testp   dp                      wc
2b8e0 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
2b8e4 0d6 23 03 08 FC |                 akpin   dp
2b8e8 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
2b8ec 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
2b8f0 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
2b8f4 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
2b8f8 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
2b8fc 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
2b900 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
2b904 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
2b908 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
2b90c 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
2b910 0e1 2C FF BF FD |                 call    #utx_byte
2b914 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
2b918 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
2b91c 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
2b920 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
2b924 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
2b928 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
2b92c 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
2b930 0e9 5B A5 42 F5 |                 or      utx, icrc
2b934 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
2b938 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
2b93c 0ec 20 00 90 FD |                 jmp     #isr1_wait
2b940 0ed             | isr1_lsframe
2b940 0ed 1A 92 62 FD |                 getct   iframe_ct_base
2b944 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2b948 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2b94c 0f0             | .wait
2b94c 0f0 40 46 72 FD |                 testp   dp                      wc
2b950 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
2b954 0f2 23 03 08 FC |                 akpin   dp
2b958 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
2b95c 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
2b960 0f5             | isr1_wait
2b960 0f5 22 A5 82 FA |                 rqpin   utx, dm
2b964 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
2b968 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
2b96c 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
2b970 0f9 03 00 00 FF 
2b974 0fa FF B3 06 F5 |                 and     frame, ##$7ff
2b978 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
2b97c 0fc F5 FF 3B FB |                 reti1
2b980 0fd             | 
2b980 0fd             | '------------------------------------------------------------------------------
2b980 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
2b980 0fd             | ' transaction will complete before the next frame is triggered.
2b980 0fd             | '------------------------------------------------------------------------------
2b980 0fd             | ' On entry:
2b980 0fd             | ' On exit:
2b980 0fd             | '------------------------------------------------------------------------------
2b980 0fd             | wait_txn_ok
2b980 0fd 1A 74 63 FD |                 getct   htmp2
2b984 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
2b988 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2b98c 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
2b990 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
2b994 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
2b998 103 2D 00 64 FD |                 ret
2b99c 104             | 
2b99c 104             | '------------------------------------------------------------------------------
2b99c 104             | ' A device connection was detected, or a bus reset was requested by the USB
2b99c 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
2b99c 104             | ' and perform a reset sequence prior to device enumeration.
2b99c 104             | '------------------------------------------------------------------------------
2b99c 104             | dev_reset
2b99c 104 22 A7 82 FA |                 rqpin   urx, dm
2b9a0 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
2b9a4 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
2b9a8 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
2b9ac 108             | reset
2b9ac 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
2b9b0 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
2b9b4 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
2b9b8 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2b9bc 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
2b9c0 10d 1A 92 62 FD |                 getct   iframe_ct_base
2b9c4 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2b9c8 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2b9cc 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
2b9d0 111 24 70 07 F1 |                 add     htmp, #36
2b9d4 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
2b9d8 113             | .framewait
2b9d8 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
2b9dc 114 F8 FF 9F CD |         if_b    jmp     #.framewait
2b9e0 115 2D 00 64 FD |                 ret
2b9e4 116             | 
2b9e4 116             | '------------------------------------------------------------------------------
2b9e4 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
2b9e4 116             | '------------------------------------------------------------------------------
2b9e4 116             | ' On entry:
2b9e4 116             | '   PTRA - source address.
2b9e4 116             | '   PB - destination address.
2b9e4 116             | '   hr0 - length of copy, in bytes.
2b9e4 116             | ' On exit:
2b9e4 116             | '------------------------------------------------------------------------------
2b9e4 116             | hmemcpy
2b9e4 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
2b9e8 117 F7 71 43 FC |                 wrbyte  htmp, pb
2b9ec 118 01 EE 07 F1 |                 add     pb, #1
2b9f0 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
2b9f4 11a             | 
2b9f4 11a             | '------------------------------------------------------------------------------
2b9f4 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
2b9f4 11a             | ' loop until the errant device is disconnected.
2b9f4 11a             | '------------------------------------------------------------------------------
2b9f4 11a             | ' On entry:
2b9f4 11a             | ' On exit:
2b9f4 11a             | '------------------------------------------------------------------------------
2b9f4 11a             | host_error
2b9f4 11a             |           if ERROR_LED >= 0
2b9f4 11a             |           end
2b9f4 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
2b9f8 11b             | 
2b9f8 11b             | '------------------------------------------------------------------------------
2b9f8 11b             | ' Get HID descriptor buffer for current port
2b9f8 11b             | '------------------------------------------------------------------------------
2b9f8 11b             | ' On entry:
2b9f8 11b             | ' On exit:
2b9f8 11b             | '   PB - HID descriptor buffer pointer
2b9f8 11b             | '------------------------------------------------------------------------------
2b9f8 11b             | get_hid_descr_buffer
2b9f8 11b 2D EF 03 F6 |                 mov     pb, hdev_port
2b9fc 11c 01 EE E7 F2 |                 cmpsub  pb, #1
2ba00 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
2ba04 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
2ba08 11f             | 
2ba08 11f             | 
2ba08 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
2ba0c 120             | 
2ba0c 120             | ' USB commands and error codes
2ba0c 120 00 00 00 00 | cmd_data        long    0
2ba10 121 00 00 00 00 | usb_err_code    long    ERR_NONE
2ba14 122             | 
2ba14 122             | ' Parameters block assigned at cog startup
2ba14 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
2ba18 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
2ba1c 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
2ba20 125             | if ACTIVITY_LED >= 0
2ba20 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
2ba20 125             | end
2ba20 125             | if ERROR_LED >= 0
2ba20 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
2ba20 125             | end
2ba20 125 00 00 00 00 | hid_descr_p     long    0
2ba24 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
2ba24 126             | 'hkbd_report_p   long    0
2ba24 126 00 00 00 00 | hub_descr_p     long    0
2ba28 127 00 00 00 00 | urx_buff_p      long    0
2ba2c 128 00 00 00 00 | dev_desc_buff_p long    0
2ba30 129 00 00 00 00 | con_desc_buff_p long    0
2ba34 12a 00 00 00 00 | cache_start_p   long    0
2ba38 12b 00 00 00 00 | cache_end_p     long    0
2ba3c 12c             | if EMUPAD_MAX_PLAYER > 0
2ba3c 12c             | emupad_out_ptr  long    0
2ba3c 12c             | end
2ba3c 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
2ba40 12d             | 
2ba40 12d             | hdev_init_start
2ba40 12d             | hdev_port       res     1
2ba40 12d             | hdev_port       res     1
2ba40 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2ba40 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
2ba40 12d             | kbm_next_datax  res     1
2ba40 12d             | kbm_next_datax  res     1
2ba40 12d             | hub_intf_num    res     1
2ba40 12d             | hub_intf_num    res     1
2ba40 12d             | hub_next_datax  res     1
2ba40 12d             | hub_next_datax  res     1
2ba40 12d             | hub_status_chg  res     1
2ba40 12d             | hub_status_chg  res     1
2ba40 12d             | hub_port_status res     1
2ba40 12d             | hub_port_status res     1
2ba40 12d             | if HAVE_MOUSE
2ba40 12d             | ms_intf_num     res     1
2ba40 12d             | ms_intf_num     res     1
2ba40 12d             | ms_in_max_pkt   res     1
2ba40 12d             | ms_in_max_pkt   res     1
2ba40 12d             | end
2ba40 12d             | kb_intf_num     res     1
2ba40 12d             | kb_intf_num     res     1
2ba40 12d             | kb_interval     res     1
2ba40 12d             | kb_interval     res     1
2ba40 12d             | kb_in_max_pkt   res     1
2ba40 12d             | kb_in_max_pkt   res     1
2ba40 12d             | kb_max_index    res     1
2ba40 12d             | kb_max_index    res     1
2ba40 12d             | kb_led_states   res     1
2ba40 12d             | kb_led_states   res     1
2ba40 12d             | gp_intf_num     res     1
2ba40 12d             | gp_intf_num     res     1
2ba40 12d             | gp_interval     res     1
2ba40 12d             | gp_interval     res     1
2ba40 12d             | gp_max_index    res     1
2ba40 12d             | gp_max_index    res     1
2ba40 12d             | gp_descr_len    res     1+MAX_DEVICES
2ba40 12d             | gp_descr_len    res     1+MAX_DEVICES
2ba40 12d             | hdev_init_end
2ba40 12d             | 
2ba40 12d             | ' Initialized at cog startup:
2ba40 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2ba40 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
2ba40 12d             | iframe_ct_new   res     1
2ba40 12d             | iframe_ct_new   res     1
2ba40 12d             | iframe_ct_base  res     1
2ba40 12d             | iframe_ct_base  res     1
2ba40 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2ba40 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
2ba40 12d             | 
2ba40 12d             | ' This register block is reset to zero when a USB device connects
2ba40 12d             | hreg_init_start
2ba40 12d             | hstatus         res     1         ' Host status flags
2ba40 12d             | hstatus         res     1         ' Host status flags
2ba40 12d             | hctwait         res     1         ' Poll-based wait clocks
2ba40 12d             | hctwait         res     1         ' Poll-based wait clocks
2ba40 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2ba40 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
2ba40 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2ba40 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
2ba40 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2ba40 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
2ba40 12d             | xfer_retry      res     1         ' Control transfer retry count
2ba40 12d             | xfer_retry      res     1         ' Control transfer retry count
2ba40 12d             | retry           res     1         ' Transaction retry count
2ba40 12d             | retry           res     1         ' Transaction retry count
2ba40 12d             | utx             res     1         ' Byte to transmit on USB
2ba40 12d             | utx             res     1         ' Byte to transmit on USB
2ba40 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2ba40 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
2ba40 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2ba40 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
2ba40 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2ba40 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
2ba40 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2ba40 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
2ba40 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2ba40 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
2ba40 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2ba40 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
2ba40 12d             | frame           res     1         ' USB 1ms frame counter value
2ba40 12d             | frame           res     1         ' USB 1ms frame counter value
2ba40 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2ba40 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
2ba40 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2ba40 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
2ba40 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2ba40 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
2ba40 12d             | crc             res     1         ' Used for CRC16 calculation
2ba40 12d             | crc             res     1         ' Used for CRC16 calculation
2ba40 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2ba40 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
2ba40 12d             | retval          res     1         ' Global success/fail return parameter
2ba40 12d             | retval          res     1         ' Global success/fail return parameter
2ba40 12d             | context_retval  res     1         ' Operation contextual return parameter
2ba40 12d             | context_retval  res     1         ' Operation contextual return parameter
2ba40 12d             | ' Device stuff
2ba40 12d             | hdev_id         res     1+MAX_DEVICES
2ba40 12d             | hdev_id         res     1+MAX_DEVICES
2ba40 12d             | hdev_bcd        res     1
2ba40 12d             | hdev_bcd        res     1
2ba40 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2ba40 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
2ba40 12d             | ' Keyboard/mouse stuff
2ba40 12d             | hctrl_ep_addr   res     1
2ba40 12d             | hctrl_ep_addr   res     1
2ba40 12d             | hctrl_max_pkt   res     1
2ba40 12d             | hctrl_max_pkt   res     1
2ba40 12d             | hconfig_base    res     1
2ba40 12d             | hconfig_base    res     1
2ba40 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2ba40 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
2ba40 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2ba40 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
2ba40 12d             | hdev_class      res     1
2ba40 12d             | hdev_class      res     1
2ba40 12d             | hdev_subclass   res     1
2ba40 12d             | hdev_subclass   res     1
2ba40 12d             | hdev_protocol   res     1
2ba40 12d             | hdev_protocol   res     1
2ba40 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2ba40 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
2ba40 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2ba40 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
2ba40 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2ba40 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
2ba40 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2ba40 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
2ba40 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2ba40 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
2ba40 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2ba40 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
2ba40 12d             | if HAVE_MOUSE
2ba40 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2ba40 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
2ba40 12d             | end
2ba40 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2ba40 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
2ba40 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2ba40 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
2ba40 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2ba40 12d             | hdev_ep_addr    res     1+MAX_DEVICES
2ba40 12d             | hdev_out_addr   res     1
2ba40 12d             | hdev_out_addr   res     1
2ba40 12d             | 
2ba40 12d             | if EMUPAD_MAX_PLAYER > 0
2ba40 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
2ba40 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
2ba40 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
2ba40 12d             | end
2ba40 12d             | 
2ba40 12d             | hreg_init_end
2ba40 12d             | 
2ba40 12d             | hidr_start
2ba40 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2ba40 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
2ba40 12d             | hidr_flags      res     1
2ba40 12d             | hidr_flags      res     1
2ba40 12d             | hidr_axis       res     3
2ba40 12d             | hidr_axis       res     3
2ba40 12d             | hidr_buttons    res     1
2ba40 12d             | hidr_buttons    res     1
2ba40 12d             | hidr_hats       res     1
2ba40 12d             | hidr_hats       res     1
2ba40 12d             | '' Above are actually useful values, 6 longs
2ba40 12d             | hidr_id         res     1
2ba40 12d             | hidr_id         res     1
2ba40 12d             | hidr_state      res     1
2ba40 12d             | hidr_state      res     1
2ba40 12d             | hidr_size       res     1
2ba40 12d             | hidr_size       res     1
2ba40 12d             | hidr_count      res     1
2ba40 12d             | hidr_count      res     1
2ba40 12d             | hidr_offset     res     1
2ba40 12d             | hidr_offset     res     1
2ba40 12d             | hidr_usage_idx  res     1
2ba40 12d             | hidr_usage_idx  res     1
2ba40 12d             | hidr_lminmax    res     1
2ba40 12d             | hidr_lminmax    res     1
2ba40 12d             | hidr_pminmax    res     1
2ba40 12d             | hidr_pminmax    res     1
2ba40 12d             | hidr_type       res     1
2ba40 12d             | hidr_type       res     1
2ba40 12d             | hidr_end
2ba40 12d             | 
2ba40 12d             | ' Variables dependent on the system freqency
2ba40 12d             | _var_64_lower_  res     1
2ba40 12d             | _var_64_lower_  res     1
2ba40 12d             | _var_64_upper_  res     1
2ba40 12d             | _var_64_upper_  res     1
2ba40 12d             | _12Mbps_        res     1
2ba40 12d             | _12Mbps_        res     1
2ba40 12d             | _1_5Mbps_       res     1
2ba40 12d             | _1_5Mbps_       res     1
2ba40 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2ba40 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
2ba40 12d             | _1us_           res     1         ' 1us
2ba40 12d             | _1us_           res     1         ' 1us
2ba40 12d             | _10us_          res     1         ' 10us
2ba40 12d             | _10us_          res     1         ' 10us
2ba40 12d             | _33us_          res     1         ' 33us
2ba40 12d             | _33us_          res     1         ' 33us
2ba40 12d             | _txn_err_       res     1         ' 250us
2ba40 12d             | _txn_err_       res     1         ' 250us
2ba40 12d             | _500us_         res     1         ' 500us
2ba40 12d             | _500us_         res     1         ' 500us
2ba40 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2ba40 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
2ba40 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2ba40 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
2ba40 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2ba40 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
2ba40 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2ba40 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
2ba40 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2ba40 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
2ba40 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2ba40 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
2ba40 12d             | _preamble_wait_ res     1
2ba40 12d             | _preamble_wait_ res     1
2ba40 12d             | _1ms_           res     1         ' 1ms
2ba40 12d             | _1ms_           res     1         ' 1ms
2ba40 12d             | _2ms_           res     1         ' 2ms
2ba40 12d             | _2ms_           res     1         ' 2ms
2ba40 12d             | _suspend_wait_  res     1         ' 3ms
2ba40 12d             | _suspend_wait_  res     1         ' 3ms
2ba40 12d             | _4ms_           res     1         ' 4ms
2ba40 12d             | _4ms_           res     1         ' 4ms
2ba40 12d             | _xfer_wait_     res     1         ' 5ms
2ba40 12d             | _xfer_wait_     res     1         ' 5ms
2ba40 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2ba40 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
2ba40 12d             | _reset_hold_    res     1         ' 15ms
2ba40 12d             | _reset_hold_    res     1         ' 15ms
2ba40 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2ba40 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
2ba40 12d             | _21ms_          res     1         ' 21ms
2ba40 12d             | _21ms_          res     1         ' 21ms
2ba40 12d             | _100ms_         res     1         ' 100ms
2ba40 12d             | _100ms_         res     1         ' 100ms
2ba40 12d             | _500ms_         res     1         ' 500ms
2ba40 12d             | _500ms_         res     1         ' 500ms
2ba40 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2ba40 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
2ba40 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2ba40 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
2ba40 12d             | '------------------------------------------------------------------------------
2ba40 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2ba40 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
2ba40 12d             | _usb_d_ls_nco_  res     1
2ba40 12d             | _usb_d_ls_nco_  res     1
2ba40 12d             | _usb_h_fs_nco_  res     1
2ba40 12d             | _usb_h_fs_nco_  res     1
2ba40 12d             | _usb_d_fs_nco_  res     1
2ba40 12d             | _usb_d_fs_nco_  res     1
2ba40 12d             | '------------------------------------------------------------------------------
2ba40 12d             | ' Scratch registers
2ba40 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2ba40 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
2ba40 12d             | htmp1           res     1
2ba40 12d             | htmp1           res     1
2ba40 12d             | htmp2           res     1
2ba40 12d             | htmp2           res     1
2ba40 12d             | htmp3           res     1
2ba40 12d             | htmp3           res     1
2ba40 12d             | hrep            res     1         ' Repeat count
2ba40 12d             | hrep            res     1         ' Repeat count
2ba40 12d             | hsave0          res     1         ' Subroutine parameter saves
2ba40 12d             | hsave0          res     1         ' Subroutine parameter saves
2ba40 12d             | hsave1          res     1
2ba40 12d             | hsave1          res     1
2ba40 12d             | hsave2          res     1
2ba40 12d             | hsave2          res     1
2ba40 12d             | isrtmp1         res     1
2ba40 12d             | isrtmp1         res     1
2ba40 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2ba40 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
2ba40 12d             | hr0             res     1         ' Multi-purpose registers
2ba40 12d             | hr0             res     1         ' Multi-purpose registers
2ba40 12d             | hr1             res     1
2ba40 12d             | hr1             res     1
2ba40 12d             | hr2             res     1
2ba40 12d             | hr2             res     1
2ba40 12d             | hr3             res     1
2ba40 12d             | hr3             res     1
2ba40 12d             | hpar1           res     1         ' Routine entry/exit parameters
2ba40 12d             | hpar1           res     1         ' Routine entry/exit parameters
2ba40 12d             | hpar2           res     1
2ba40 12d             | hpar2           res     1
2ba40 12d             | hpar3           res     1
2ba40 12d             | hpar3           res     1
2ba40 12d             | hct2            res     1         ' Function response bus turn-around timer
2ba40 12d             | hct2            res     1         ' Function response bus turn-around timer
2ba40 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2ba40 12d             | hct3            res     1         ' Keyboard/mouse poll timer
2ba40 12d             | mod_cnt         res     1         ' Used in idle loops
2ba40 12d             | mod_cnt         res     1         ' Used in idle loops
2ba40 12d             |                 fit     $1F0
2ba40 12d             |                 org     $200
2ba40 200             | hlut_start
2ba40 200             | 
2ba40 200             | '------------------------------------------------------------------------------
2ba40 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
2ba40 200             | ' settings to startup defaults.
2ba40 200             | '------------------------------------------------------------------------------
2ba40 200             | ' On entry:
2ba40 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
2ba40 200             | '------------------------------------------------------------------------------
2ba40 200             | set_speed_full
2ba40 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
2ba44 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2ba48 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
2ba4c 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
2ba50 204             | '                ret                             wcz     ' Restore caller flags on exit
2ba50 204             | 
2ba50 204             | '------------------------------------------------------------------------------
2ba50 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
2ba50 204             | ' is a downstream hub connected (not yet implemented), the baud generator
2ba50 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
2ba50 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
2ba50 204             | ' putting the smart pins into reset.
2ba50 204             | '------------------------------------------------------------------------------
2ba50 204             | ' On entry:
2ba50 204             | ' On exit: CZ flags restored to caller states
2ba50 204             | '------------------------------------------------------------------------------
2ba50 204             | set_speed_low
2ba50 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
2ba54 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
2ba58 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
2ba5c 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2ba60 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2ba64 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2ba68 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
2ba6c 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
2ba70 20c             | 
2ba70 20c             | '------------------------------------------------------------------------------
2ba70 20c             | ' Perform configuration stuff required when a device intitially connects.
2ba70 20c             | '------------------------------------------------------------------------------
2ba70 20c             | ' On entry:
2ba70 20c             | ' On exit:
2ba70 20c             | '------------------------------------------------------------------------------
2ba70 20c             | on_connect
2ba70 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
2ba74 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
2ba78 20e             | .retry
2ba78 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2ba7c 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
2ba80 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
2ba84 211 00 08 00 FF 
2ba88 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2ba8c 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
2ba90 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2ba94 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2ba98 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2ba9c 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2baa0 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2baa4 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
2baa8 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
2baac 21b 4C 03 B0 FD |                 call    #poll_waitx
2bab0 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
2bab4 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
2bab8 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
2babc 21f B8 FF 9F FD |                 jmp     #.retry
2bac0 220             | .get_dev_desc
2bac0 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2bac4 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2bac8 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2bacc 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
2bad0 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
2bad4 225 88 FB BF FD |                 call    #reset
2bad8 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
2badc 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2bae0 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
2bae4 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
2bae8 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2baec 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2baf0 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
2baf4 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2baf8 22e 04 00 00 FF 
2bafc 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
2bb00 230 34 FA BF FD |                 call    #calc_crc5
2bb04 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
2bb08 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2bb0c 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2bb10 234 F7 AD C2 FA |                 rdbyte  total_data, pb
2bb14 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2bb18 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2bb1c 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bb20 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
2bb24 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2bb28 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2bb2c 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2bb30 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
2bb34 23d C4 02 B0 FD |                 call    #poll_waitx
2bb38 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
2bb3c 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
2bb40 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2bb44 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2bb48 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2bb4c 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bb50 244 2D 00 64 5D |         if_nz   ret
2bb54 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2bb58 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2bb5c 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2bb60 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2bb64 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2bb68 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2bb6c 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2bb70 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2bb74 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2bb78 24e 2C FB 9F CD |         if_b    jmp     #host_error
2bb7c 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
2bb80 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
2bb84 251 2D EC 63 FD |                 call    pa
2bb88 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
2bb8c 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
2bb90 254 2C EC 63 FD |                 jmp     pa
2bb94 255             | 
2bb94 255             | '------------------------------------------------------------------------------
2bb94 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
2bb94 255             | ' Status reporting is always in the function-to-host direction.
2bb94 255             | '------------------------------------------------------------------------------
2bb94 255             | ' On entry:
2bb94 255             | '   PTRA - start address of the SETUP data in hub.
2bb94 255             | '   PB - start address of the buffer/struct to be written to during the IN data
2bb94 255             | '     stage.
2bb94 255             | '   ep_addr_pid - device address, endpoint and CRC5.
2bb94 255             | ' On exit:
2bb94 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
2bb94 255             | '     contains the count of data stage bytes actually received, which must
2bb94 255             | '     always be <= the count requested.
2bb94 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2bb94 255             | '     more specific USB operation error code.
2bb94 255             | '------------------------------------------------------------------------------
2bb94 255             | control_read
2bb94 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2bb98 256 F8 8F 03 F6 |                 mov     hpar2, ptra
2bb9c 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
2bba0 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2bba4 259             | .xfer_start
2bba4 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2bba8 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2bbac 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bbb0 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
2bbb4 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
2bbb8 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2bbbc 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2bbc0 260 61 00 00 FF 
2bbc4 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
2bbc8 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2bbcc 263             | .data
2bbcc 263 56 B1 02 F6 |                 mov     pkt_data, total_data
2bbd0 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
2bbd4 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2bbd8 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
2bbdc 267             | .nak_retry
2bbdc 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
2bbe0 268             | .in_retry
2bbe0 268 BC F6 BF FD |                 call    #txn_in
2bbe4 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
2bbe8 26a 28 00 90 AD |         if_z    jmp     #.commit
2bbec 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2bbf0 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2bbf4 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2bbf8 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2bbfc 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
2bc00 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2bc04 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2bc08 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2bc0c 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
2bc10 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
2bc14 275             | .commit
2bc14 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
2bc18 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
2bc1c 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
2bc20 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
2bc24 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
2bc28 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2bc2c 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
2bc30 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
2bc34 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
2bc38 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
2bc3c 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
2bc40 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
2bc44 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
2bc48 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
2bc4c 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2bc50 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
2bc54 285             | .pre_status
2bc54 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
2bc58 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
2bc5c 287 00 B0 06 F6 |                 mov     pkt_data, #0
2bc60 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
2bc64 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2bc68 28a 61 00 00 FF 
2bc6c 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
2bc70 28c             | .out_retry
2bc70 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
2bc74 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bc78 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
2bc7c 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2bc80 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
2bc84 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2bc88 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
2bc8c 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
2bc90 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2bc94 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
2bc98 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
2bc9c 297             | ' I've encountered transfer STALL, even though the data looks correct, and
2bc9c 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
2bc9c 297             | ' ControlRead() transfer gets things unstuck most of the time...
2bc9c 297             | .xfer_retry
2bc9c 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
2bca0 298 58 01 B0 FD |                 call    #poll_waitx
2bca4 299 8C F9 BF FD |                 call    #wait_txn_ok
2bca8 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
2bcac 29b C7 F1 03 F6 |                 mov     ptra, hpar2
2bcb0 29c C8 EF 03 F6 |                 mov     pb, hpar3
2bcb4 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
2bcb8 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
2bcbc 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
2bcc0 2a0             | 
2bcc0 2a0             | '------------------------------------------------------------------------------
2bcc0 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
2bcc0 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
2bcc0 2a0             | ' the SETUP data struct is filled with the required values.
2bcc0 2a0             | '------------------------------------------------------------------------------
2bcc0 2a0             | ' On entry:
2bcc0 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
2bcc0 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
2bcc0 2a0             | '     stage.
2bcc0 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
2bcc0 2a0             | ' On exit:
2bcc0 2a0             | '   retval - used to convey the success/failure of each stage.
2bcc0 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
2bcc0 2a0             | '     more specific USB operation error code.
2bcc0 2a0             | '------------------------------------------------------------------------------
2bcc0 2a0             | control_write
2bcc0 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2bcc4 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2bcc8 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2bccc 2a3             | 
2bccc 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
2bcd0 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
2bcd4 2a5 F7 91 03 F6 |                 mov     hpar3, pb
2bcd8 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
2bcdc 2a7             | .xfer_start
2bcdc 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
2bce0 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
2bce4 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
2bce8 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bcec 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
2bcf0 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
2bcf4 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
2bcf8 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
2bcfc 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
2bd00 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
2bd04 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2bd08 2b2             | .data
2bd08 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
2bd0c 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
2bd10 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
2bd14 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
2bd18 2b6             | .out_retry
2bd18 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
2bd1c 2b7 88 F6 BF FD |                 call    #txn_out
2bd20 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2bd24 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
2bd28 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
2bd2c 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
2bd30 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
2bd34 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
2bd38 2be             | .commit
2bd38 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
2bd3c 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
2bd40 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
2bd44 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
2bd48 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
2bd4c 2c3             | pre_status_in
2bd4c 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
2bd50 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
2bd54 2c5             | .status_retry
2bd54 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
2bd58 2c6 44 F5 BF FD |                 call    #txn_in
2bd5c 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
2bd60 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
2bd64 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
2bd68 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
2bd6c 2cb 2D 00 64 AD |         if_z    ret
2bd70 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
2bd74 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2bd78 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
2bd7c 2cf             | '               ret                                     ' Caller must handle transfer retirement
2bd7c 2cf             | 
2bd7c 2cf             | '------------------------------------------------------------------------------
2bd7c 2cf             | ' Execute an IN interrupt transaction.
2bd7c 2cf             | '------------------------------------------------------------------------------
2bd7c 2cf             | ' On entry:
2bd7c 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
2bd7c 2cf             | '   hpar2 - Address of the IN data buffer
2bd7c 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
2bd7c 2cf             | ' On exit:
2bd7c 2cf             | '   retval - the result of the operation.
2bd7c 2cf             | '   hpar3 - the count of IN data bytes actually received.
2bd7c 2cf             | '------------------------------------------------------------------------------
2bd7c 2cf             | do_int_in
2bd7c 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2bd80 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2bd84 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2bd88 2d2             | 
2bd88 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
2bd8c 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
2bd90 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
2bd94 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
2bd98 2d6             | .retry
2bd98 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
2bd9c 2d7 00 F5 BF FD |                 call    #txn_in
2bda0 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
2bda4 2d9 1C 00 90 AD |         if_z    jmp     #.commit
2bda8 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
2bdac 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
2bdb0 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
2bdb4 2dd 54 00 B0 FD |                 call    #retry_wait
2bdb8 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
2bdbc 2df 18 00 90 AD |         if_z    jmp     #.post_ret
2bdc0 2e0 D4 FF 9F FD |                 jmp     #.retry
2bdc4 2e1             | .commit
2bdc4 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
2bdc8 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
2bdcc 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
2bdd0 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
2bdd4 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
2bdd8 2e6             | .post_ret
2bdd8 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
2bddc 2e7             | 
2bddc 2e7             | 
2bddc 2e7             | '------------------------------------------------------------------------------
2bddc 2e7             | ' Resets the downstream hub port to FS
2bddc 2e7             | '------------------------------------------------------------------------------
2bddc 2e7             | dwnstream_reset
2bddc 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
2bde0 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
2bde4 2e9             | 
2bde4 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
2bde8 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2bdec 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2bdf0 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
2bdf4 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2bdf8 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2bdfc 2ef             | 
2bdfc 2ef             | '------------------------------------------------------------------------------
2bdfc 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
2bdfc 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
2bdfc 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
2bdfc 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
2bdfc 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
2bdfc 2ef             | '------------------------------------------------------------------------------
2bdfc 2ef             | ' On entry:
2bdfc 2ef             | '   hctwait - wait interval in sysclocks.
2bdfc 2ef             | ' On exit:
2bdfc 2ef             | '------------------------------------------------------------------------------
2bdfc 2ef             | poll_waitx
2bdfc 2ef 1A 92 63 FD |                 getct   hct2
2be00 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
2be04 2f1             | .wait
2be04 2f1 FF 25 CC FB |                 jnct2   #.wait
2be08 2f2 2D 00 64 FD |                 ret
2be0c 2f3             | 
2be0c 2f3             | '------------------------------------------------------------------------------
2be0c 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
2be0c 2f3             | '------------------------------------------------------------------------------
2be0c 2f3             | ' On entry:
2be0c 2f3             | '   retval - transaction response PID or error code.
2be0c 2f3             | ' On exit:
2be0c 2f3             | '------------------------------------------------------------------------------
2be0c 2f3             | retry_wait
2be0c 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
2be10 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
2be14 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2be18 2f6 14 00 90 AD |         if_z    jmp     #.nak
2be1c 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
2be20 2f8 D8 FF BF FD |                 call    #poll_waitx
2be24 2f9             | .dec
2be24 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
2be28 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
2be2c 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
2be30 2fc             | .nak
2be30 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
2be34 2fd C4 FF BF FD |                 call    #poll_waitx
2be38 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
2be3c 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
2be40 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
2be44 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
2be48 302 2D 00 64 FD |                 ret
2be4c 303             | 
2be4c 303             | host_reset
2be4c 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
2be50 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
2be54 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
2be54 305 BD 01 05 FF 
2be58 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
2be5c 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
2be60 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
2be64 309             | ' Check to see if the system clock has been changed.
2be64 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2be68 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
2be6c 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
2be70 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
2be74 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2be78 30e 40 46 62 FD |                 dirl    dp
2be7c 30f             | 
2be7c 30f 28 02 64 FD |                 setq    #1
2be80 310 80 00 80 FF 
2be84 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2be88 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
2be8c 313             | .enable
2be8c 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2be90 314 41 46 62 FD |                 dirh    dp
2be94 315 1F 36 63 FD |                 waitx   _1us_
2be98 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2be9c 317             | 
2be9c 317             |                 ' Handle Port protection enable and startup delay
2be9c 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
2bea0 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
2bea4 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
2bea8 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
2beac 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
2beb0 31c             | 
2beb0 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
2beb4 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
2beb8 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
2bebc 31f 00 00 04 F6 |                 mov     0-0, #0
2bec0 320             | .regloop
2bec0 320             | 
2bec0 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
2bec0 320             | 
2bec0 320             | discon_entry
2bec0 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
2bec4 321             | 
2bec4 321             |               
2bec4 321             |         if HAVE_HIDPAD
2bec4 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
2bec8 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
2becc 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
2bed0 324 F7 01 68 FC |                 wrlong  #0,pb
2bed4 325             |         end
2bed4 325             |         if EMUPAD_MAX_PLAYER > 0
2bed4 325             |         end
2bed4 325             | 
2bed4 325             |                 ' Fall through to disconnected loop
2bed4 325             | 
2bed4 325             | '-----------------------------------------------------------------------------------------------------------------
2bed4 325             | ' Device connect handling (Section 7.1.7.3).
2bed4 325             | '-----------------------------------------------------------------------------------------------------------------
2bed4 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
2bed4 325             | ' device to connect (Section 7.1.7.3).
2bed4 325             | '-----------------------------------------------------------------------------------------------------------------
2bed4 325             | disconnected
2bed4 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
2bed8 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
2bedc 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
2bee0 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
2bee4 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
2bee8 32a             |         if ACTIVITY_LED >= 0
2bee8 32a             |         end
2bee8 32a 22 A7 82 FA |                 rqpin   urx, dm
2beec 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
2bef0 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
2bef4 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
2bef8 32e             | .se1_test
2bef8 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
2befc 32f FC FE BF FD |                 call    #poll_waitx
2bf00 330 22 A7 82 FA |                 rqpin   urx, dm
2bf04 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2bf08 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
2bf0c 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
2bf10 334             | .se1            'SE1 is a fatal error condition
2bf10 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
2bf14 335 E4 FE BF FD |                 call    #poll_waitx
2bf18 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
2bf1c 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
2bf20 338             | .connect_test                                           ' Test lines until stable J/K state seen
2bf20 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
2bf24 339 22 A7 82 FA |                 rqpin   urx, dm
2bf28 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
2bf2c 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
2bf30 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
2bf34 33d             | connected
2bf34 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
2bf38 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
2bf3c 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
2bf40 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
2bf44 341             | .set_pulse
2bf44 341 1A 64 63 FD |                 getct   _pulse_time_
2bf48 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
2bf4c 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
2bf4c 343             | ' of 1ms and make a correction, if necessary.
2bf4c 343             | '                mov     htmp, _1ms_
2bf4c 343             | '                subs    htmp, iframe_delta
2bf4c 343             | '                adds    _frame1ms_clks_, htmp
2bf4c 343             | '                debug(udec(_frame1ms_clks_))
2bf4c 343             | 
2bf4c 343             |                 ' Fall through to idle/processing loop
2bf4c 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
2bf50 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
2bf54 345             | 
2bf54 345             | hidle
2bf54 345 22 A7 82 FA |                 rqpin   urx, dm
2bf58 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2bf5c 347 98 00 90 CD |         if_c    jmp     #.se0_test
2bf60 348 24 06 70 FD |                 pollct3                         wc
2bf64 349 68 00 90 3D |         if_nc   jmp     #.nopoll
2bf68 34a 1A 94 63 FD |                 getct   hct3
2bf6c 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
2bf70 34c             | 
2bf70 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2bf74 34d 00 70 E3 F8 |                 getbyte htmp
2bf78 34e             | 
2bf78 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
2bf7c 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
2bf80 350 40 00 90 AD |         if_z    jmp     #.poll
2bf84 351             | 
2bf84 351             |         if _HAVE_GAMEPAD
2bf84 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
2bf88 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
2bf8c 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
2bf90 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
2bf94 355 2C 00 90 AD |         if_z    jmp     #.poll
2bf98 356             |         end
2bf98 356             | 
2bf98 356             |         if HAVE_MOUSE
2bf98 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2bf9c 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
2bfa0 358 20 00 90 AD |         if_z    jmp     #.poll
2bfa4 359             |         end
2bfa4 359             | 
2bfa4 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
2bfa8 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
2bfac 35b 14 00 90 AD |         if_z    jmp     #.poll
2bfb0 35c             | 
2bfb0 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
2bfb4 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
2bfb8 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
2bfbc 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
2bfc0 360             |         if HAVE_MOUSE
2bfc0 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
2bfc4 361             |         else
2bfc4 361             |         end
2bfc4 361             | 
2bfc4 361             | .poll
2bfc4 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
2bfc8 362 2D EC 63 FD |                 call    pa
2bfcc 363             | .skip_poll
2bfcc 363             | 
2bfcc 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
2bfd0 364             | 
2bfd0 364             | .nopoll
2bfd0 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
2bfd4 365 44 00 90 AD |         if_z    jmp     #hsuspend
2bfd8 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
2bfdc 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
2bfe0 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
2bfe4 369 1A 84 63 FD |                 getct   hr0
2bfe8 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
2bfec 36b             |         if ACTIVITY_LED >= 0
2bfec 36b             |         end
2bfec 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
2bff0 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
2bff4 36d 5C FF 9F FD |                 jmp     #hidle
2bff8 36e             | ' Check for extended SE0 state on the bus
2bff8 36e             | .se0_test
2bff8 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
2bffc 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
2c000 370 22 A7 82 FA |                 rqpin   urx, dm
2c004 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
2c008 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
2c00c 373 24 F6 BF FD |                 call    #wait_txn_ok
2c010 374 00 00 80 FF 
2c014 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
2c018 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
2c018 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
2c01c 377             | 
2c01c 377             | hsuspend
2c01c 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
2c020 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
2c024 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
2c028 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
2c02c 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
2c030 37c 00 96 07 F6 |                 mov     mod_cnt, #0
2c034 37d             | 
2c034 37d             |                 ' Fall through to resume wait loop
2c034 37d             | 
2c034 37d             | hwait_resume
2c034 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
2c038 37e 02 86 47 F0 |                 shr     hr1, #2
2c03c 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
2c040 380             |         if ACTIVITY_LED >= 0
2c040 380             |         end
2c040 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
2c044 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
2c048 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
2c04c 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
2c050 384 18 00 90 AD |         if_z    jmp     #.resume
2c054 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
2c058 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
2c05c 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
2c060 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
2c064 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
2c068 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
2c06c 38b             | .resume
2c06c 38b 22 05 28 FC |                 wypin   #OUT_K, dm
2c070 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
2c074 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
2c078 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
2c07c 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
2c080 390 1F 70 63 FD |                 waitx   htmp
2c084 391 22 07 28 FC |                 wypin   #OUT_J, dm
2c088 392 01 70 47 F0 |                 shr     htmp, #1
2c08c 393 1F 70 63 FD |                 waitx   htmp
2c090 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2c094 395 1A 92 62 FD |                 getct   iframe_ct_base
2c098 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
2c09c 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
2c0a0 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
2c0a4 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
2c0a8 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
2c0ac 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
2c0b0 39c             | 
2c0b0 39c             | '------------------------------------------------------------------------------
2c0b0 39c             | ' Send preamble to enable low-speed HUB ports
2c0b0 39c             | '------------------------------------------------------------------------------
2c0b0 39c             | ' On entry:
2c0b0 39c             | ' On exit:
2c0b0 39c             | '   USB baud rate set to low-speed
2c0b0 39c             | '------------------------------------------------------------------------------
2c0b0 39c             | utx_pre
2c0b0 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2c0b4 39d 40 46 62 FD |                 dirl    dp
2c0b8 39e 28 02 64 FD |                 setq    #1
2c0bc 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
2c0c0 3a0 58 44 62 FD |                 drvl    dm
2c0c4 3a1 59 46 62 FD |                 drvh    dp
2c0c8 3a2             | 
2c0c8 3a2 1E 00 00 FF 
2c0cc 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
2c0d0 3a4             | 
2c0d0 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
2c0d4 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
2c0d8 3a6 28 02 64 3D |         if_nc   setq    #1
2c0dc 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
2c0e0 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
2c0e4 3a9             | .l1
2c0e4 3a9             | 
2c0e4 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
2c0e8 3aa 40 46 62 FD |                 dirl    dp
2c0ec 3ab 28 02 64 FD |                 setq    #1
2c0f0 3ac 80 00 80 FF 
2c0f4 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
2c0f8 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
2c0fc 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
2c100 3b0 41 46 62 FD |                 dirh    dp
2c104 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
2c108 3b2             | 
2c108 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
2c10c 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
2c110 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
2c114 3b5             | 
2c114 3b5             | hlut_end
2c114 3b5             |                 fit     $400
2c114 3b5             |                 orgh
2c114                 | if OVERLAP_MEMORY
2c114                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
2c114                 | end
2c114                 | '------------------------------------------------------------------------------
2c114                 | ' Routines called from cog space.
2c114                 | '------------------------------------------------------------------------------
2c114                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
2c114                 | '------------------------------------------------------------------------------
2c114                 | 
2c114                 | '------------------------------------------------------------------------------
2c114                 | ' USB host cog initialization.
2c114                 | '------------------------------------------------------------------------------
2c114                 | usb_host_init
2c114                 |                 ' Initialize buffer pointers
2c114                 |         if OVERLAP_MEMORY
2c114                 |         else
2c114     40 15 B0 FE |                 loc     pb, #hid_descr
2c118                 |         end
2c118     F7 4B 02 F6 |                 mov     hid_descr_p, pb
2c11c                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
2c11c                 |                 {
2c11c                 |                 }
2c11c                 |         
2c11c                 |                 {
2c11c                 |                 }
2c11c                 |                 'loc     pb,#hkbd_report
2c11c                 |                 'mov     hkbd_report_p,pb
2c11c                 | 
2c11c     08 1D B0 FE |                 loc     pb, #hub_descr
2c120     F7 4D 02 F6 |                 mov     hub_descr_p, pb
2c124     1D 1D B0 FE |                 loc     pb, #urx_buff
2c128     F7 4F 02 F6 |                 mov     urx_buff_p, pb
2c12c     95 1D B0 FE |                 loc     pb, #dev_desc_buff
2c130     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
2c134     9F 1D B0 FE |                 loc     pb, #con_desc_buff
2c138     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
2c13c     18 15 B0 FE |                 loc     pb, #usb_cache_start
2c140     F7 55 02 F6 |                 mov     cache_start_p, pb
2c144     E9 1C B0 FE |                 loc     pb, #usb_cache_end
2c148     F7 57 02 F6 |                 mov     cache_end_p, pb
2c14c                 | 
2c14c                 |         if ERROR_LED >= 0
2c14c                 |         end
2c14c                 | 
2c14c                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
2c14c                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
2c14c                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
2c14c                 | ' Configure and enable the Serial Host USB port.
2c14c     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
2c150                 | 
2c150                 | '------------------------------------------------------------------------------
2c150                 | ' Timing calculations happen before any interrupt(s) are enabled.
2c150                 | '------------------------------------------------------------------------------
2c150                 | ' On entry:
2c150                 | '   htmp - current CLKFREQ value.
2c150                 | '------------------------------------------------------------------------------
2c150                 | hinit_usb_timings
2c150                 | '                getct   htmp2
2c150     B8 59 02 F6 |                 mov     save_sysclk, htmp
2c154     8D 5B 80 FF 
2c158     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
2c15c     18 30 63 FD |                 getqx   _12Mbps_
2c160     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
2c164     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
2c168     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
2c16c     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
2c170     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
2c174     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
2c178     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
2c17c     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
2c180     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
2c184     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
2c188     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
2c18c     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
2c190     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
2c194     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
2c198     80 00 00 FF 
2c19c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
2c1a0     18 2C 63 FD |                 getqx   _var_64_lower_
2c1a4     19 2E 63 FD |                 getqy   _var_64_upper_
2c1a8     28 2C 63 FD |                 setq    _var_64_lower_
2c1ac     65 CD 1D FF 
2c1b0     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
2c1b4     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
2c1b8     01 00 00 FF 
2c1bc     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
2c1c0     18 2C 63 FD |                 getqx   _var_64_lower_
2c1c4     19 2E 63 FD |                 getqy   _var_64_upper_
2c1c8     28 2C 63 FD |                 setq    _var_64_lower_
2c1cc     A1 07 00 FF 
2c1d0     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
2c1d4     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
2c1d8     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
2c1dc     09 36 57 F0 |                 shr     _1us_, #9               wc
2c1e0     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
2c1e4     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
2c1e8     18 38 63 FD |                 getqx   _10us_
2c1ec     09 38 57 F0 |                 shr     _10us_, #9              wc
2c1f0     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
2c1f4     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
2c1f8     18 3A 63 FD |                 getqx   _33us_
2c1fc     09 3A 57 F0 |                 shr     _33us_, #9              wc
2c200     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
2c204     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
2c208     18 3C 63 FD |                 getqx   _txn_err_
2c20c     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
2c210     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
2c214     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
2c218     18 3E 63 FD |                 getqx   _500us_
2c21c     09 3E 57 F0 |                 shr     _500us_, #9             wc
2c220     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
2c224     01 00 00 FF 
2c228     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
2c22c     18 40 63 FD |                 getqx   _txn_ok_ls_
2c230     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
2c234     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
2c238     01 00 00 FF 
2c23c     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
2c240     18 42 63 FD |                 getqx   _txn_ok_fs_
2c244     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
2c248     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
2c24c     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
2c250     05 00 00 FF 
2c254     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
2c258     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
2c25c     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
2c260     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
2c264     1C 00 00 FF 
2c268     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
2c26c     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
2c270     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
2c274     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
2c278     00 00 00 FF 
2c27c     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
2c280     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
2c284     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
2c288     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
2c28c     04 00 00 FF 
2c290     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
2c294     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
2c298     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
2c29c     8D 5B 00 FF 
2c2a0     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
2c2a4     18 4C 63 FD |                 getqx   _preamble_wait_
2c2a8     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
2c2ac     01 00 00 FF 
2c2b0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
2c2b4     18 2C 63 FD |                 getqx   _var_64_lower_
2c2b8     19 2E 63 FD |                 getqy   _var_64_upper_
2c2bc     28 2C 63 FD |                 setq    _var_64_lower_
2c2c0     01 00 00 FF 
2c2c4     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
2c2c8     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
2c2cc     09 4E 57 F0 |                 shr     _1ms_, #9               wc
2c2d0     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
2c2d4     FF FF 7F FF 
2c2d8     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
2c2dc     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
2c2e0     A7 51 03 F6 |                 mov     _2ms_, _1ms_
2c2e4     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
2c2e8     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
2c2ec     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
2c2f0     A7 55 03 F6 |                 mov     _4ms_, _1ms_
2c2f4     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
2c2f8     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
2c2fc     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
2c300     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
2c304     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
2c308     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
2c30c     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
2c310     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
2c314     A7 59 03 F6 |                 mov     _8ms_, _1ms_
2c318     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
2c31c     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
2c320     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
2c324     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
2c328     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
2c32c     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
2c330     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
2c334     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
2c338     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
2c33c     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
2c340     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
2c344                 | '        _ret_   mov     _1sec_, save_sysclk
2c344                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
2c344                 | '                ret
2c344                 | {
2c344                 | }
2c344                 | 
2c344                 | '------------------------------------------------------------------------------
2c344                 | ' Parse a configuration descriptor chain to see if the device is a recognized
2c344                 | ' one. If it is, start the task progression that will configure the device for
2c344                 | ' use.
2c344                 | '------------------------------------------------------------------------------
2c344                 | ' On entry:
2c344                 | '   hconfig_base - start address of the cached config descriptor chain.
2c344                 | ' On exit:
2c344                 | '------------------------------------------------------------------------------
2c344                 | hparse_con_desc
2c344     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
2c348     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
2c34c     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
2c350     4E 70 FF F9 |                 movbyts htmp,#%%1032
2c354     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
2c358                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
2c358                 | 
2c358     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
2c35c     6E ED 03 F1 |                 add     pa, hconfig_base
2c360     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
2c364                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
2c364                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
2c364                 | ' that defines a keyboard and/or mouse.
2c364     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
2c368                 | .next_intf
2c368     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2c36c     BC 01 90 3D |         if_ae   jmp     #hset_config
2c370     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2c374     75 F3 03 F1 |                 add     ptrb, hnext_desc
2c378     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2c37c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2c380     0C 00 90 AD |         if_z    jmp     #.intf
2c384     80 71 C7 FA |                 rdbyte  htmp, ptrb
2c388     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2c38c     D8 FF 9F FD |                 jmp     #.next_intf
2c390                 | .intf
2c390     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
2c394     00 90 07 F6 |                 mov     hpar3, #0
2c398     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
2c39c     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
2c3a0     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
2c3a4     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
2c3a8                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
2c3a8                 | 
2c3a8                 | .endp
2c3a8     80 71 C7 FA |                 rdbyte  htmp, ptrb
2c3ac     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
2c3b0     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
2c3b4     78 00 90 3D |         if_ae   jmp     #.get_device
2c3b8     6E F3 03 F6 |                 mov     ptrb, hconfig_base
2c3bc     75 F3 03 F1 |                 add     ptrb, hnext_desc
2c3c0     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
2c3c4     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
2c3c8     64 00 90 AD |         if_z    jmp     #.get_device
2c3cc     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
2c3d0     04 00 90 AD |         if_z    jmp     #.get_ep
2c3d4     D0 FF 9F FD |                 jmp     #.endp
2c3d8                 | .get_ep
2c3d8     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
2c3dc     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
2c3e0     0F 86 67 F0 |                 shl     hr1, #8 + 7
2c3e4     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
2c3e8     3F 00 00 FF 
2c3ec     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
2c3f0     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
2c3f4     00 8E 0F F2 |                 cmp     hpar2, #0               wz
2c3f8     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
2c3fc     00 90 0F F2 |                 cmp     hpar3, #0               wz
2c400     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
2c404     A0 FF 9F FD |                 jmp     #.endp
2c408                 | .in_ep
2c408     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
2c40c     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
2c410                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2c410     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2c414     C2 89 DB F8 |                 setbyte hr2, hr0, #3
2c418     8C FF 9F FD |                 jmp     #.endp
2c41c                 | .out_ep
2c41c     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
2c420     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
2c424                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
2c424     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
2c428     C2 8B DB F8 |                 setbyte hr3, hr0, #3
2c42c     78 FF 9F FD |                 jmp     #.endp
2c430                 | 
2c430                 | .get_device
2c430     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
2c434     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
2c438     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
2c43c     68 00 90 AD |         if_z    jmp     #.gamepad
2c440     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
2c444     AC 00 90 AD |         if_z    jmp     #.hub
2c448     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
2c44c     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
2c450     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2c454     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2c458     4C 00 90 AD |         if_z    jmp     #.gamepad
2c45c     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
2c460     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
2c464                 | .keyboard
2c464     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
2c468                 |         if HAVE_MOUSE
2c468     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
2c46c                 |         else
2c46c                 |         end
2c46c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
2c470     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
2c474     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2c478     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
2c47c     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
2c480     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
2c484                 |                 'debug(udec(kb_intf_num))
2c484                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2c484     E0 FE 9F FD |                 jmp     #.next_intf
2c488                 | if HAVE_MOUSE
2c488                 | .mouse
2c488     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
2c48c     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
2c490     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
2c494     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
2c498     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2c49c                 |                 'getbyte ms_interval, hr2, #3
2c49c     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
2c4a0     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
2c4a4                 |                 'debug(udec(kb_intf_num))
2c4a4                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
2c4a4     C0 FE 9F FD |                 jmp     #.next_intf
2c4a8                 | end
2c4a8                 | .gamepad
2c4a8     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2c4ac     C7 71 63 F5 |                 xor     htmp, hpar2
2c4b0     3F 00 00 FF 
2c4b4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2c4b8     AC FE 9F AD |         if_z    jmp     #.next_intf
2c4bc                 |         if HAVE_MOUSE
2c4bc     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2c4c0     C7 71 63 F5 |                 xor     htmp, hpar2
2c4c4     3F 00 00 FF 
2c4c8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2c4cc     98 FE 9F AD |         if_z    jmp     #.next_intf
2c4d0                 |         end
2c4d0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
2c4d4     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
2c4d8     8C FE 9F 5D |         if_nz   jmp     #.next_intf
2c4dc                 | 
2c4dc     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
2c4e0     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
2c4e4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2c4e8     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
2c4ec     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
2c4f0                 |                 'debug(udec(gp_intf_num))
2c4f0                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
2c4f0     74 FE 9F FD |                 jmp     #.next_intf
2c4f4                 | .hub
2c4f4     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
2c4f8     6C FE 9F 5D |         if_nz   jmp     #.next_intf
2c4fc     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
2c500     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
2c504     60 FE 9F 5D |         if_nz   jmp     #.next_intf
2c508     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2c50c     58 FE 9F 5D |         if_nz   jmp     #.next_intf
2c510     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
2c514     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2c518     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
2c51c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2c520     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
2c524     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
2c528                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
2c528     3C FE 9F FD |                 jmp     #.next_intf
2c52c                 | 
2c52c                 | '------------------------------------------------------------------------------
2c52c                 | ' If a newly-connected device is recognized, do whatever is needed to configure
2c52c                 | ' it according to its function, or functions. In the case of this boot protocol
2c52c                 | ' keyboard/mouse class driver:
2c52c                 | ' - SetConfiguration(config_num)
2c52c                 | ' - SetProtocol(boot)
2c52c                 | ' - SetIdle(indefinite)
2c52c                 | ' - Enter the device interrupt IN polling task stage.
2c52c                 | '------------------------------------------------------------------------------
2c52c                 | ' On entry:
2c52c                 | ' On exit:
2c52c                 | '------------------------------------------------------------------------------
2c52c                 | hset_config
2c52c                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
2c52c                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
2c52c     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
2c530     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2c534     00 00 0C F2 |                 cmp     0-0, #0                 wz
2c538     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
2c53c                 |         if HAVE_MOUSE
2c53c     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
2c540                 |         end
2c540     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
2c544     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
2c548                 | .set_config
2c548     6C 0E D0 FE |                 loc     ptra, #set_config
2c54c     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
2c550     6E ED 03 F1 |                 add     pa, hconfig_base
2c554     F6 8D C3 FA |                 rdbyte  hpar1, pa
2c558     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
2c55c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
2c560     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
2c564     A0 02 A0 FD |                 call    #control_write
2c568     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2c56c     2D 00 64 5D |         if_nz   ret
2c570                 | .kbd_config
2c570     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
2c574     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
2c578                 | 
2c578     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
2c57c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2c580     3F 00 00 FF 
2c584     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2c588     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
2c58c                 | 
2c58c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2c590     34 0E D0 FE |                 loc     ptra, #set_protocol
2c594     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2c598     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2c59c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2c5a0     A0 02 A0 FD |                 call    #control_write
2c5a4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2c5a8     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2c5ac     E4 02 90 5D |         if_nz   jmp     #.notify_client
2c5b0     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2c5b4     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
2c5b8     30 03 B0 FD |                 call    #hset_idle
2c5bc                 |                 'cmp     retval, #PID_ACK        wz
2c5bc                 |         'if_nz   mov     hkbd_ep_addr, #0
2c5bc                 |         'if_nz   jmp     #.notify_client
2c5bc     A8 99 02 F6 |                 mov     hctwait, _2ms_
2c5c0     EF 02 A0 FD |                 call    #poll_waitx
2c5c4     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
2c5c8     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
2c5cc     90 17 90 FE |                 loc     pa, #hkbd_led_rep
2c5d0     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
2c5d4     2C 03 B0 FD |                 call    #hset_kbdled_report
2c5d8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2c5dc     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
2c5e0     B0 02 90 5D |         if_nz   jmp     #.notify_client
2c5e4     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2c5e8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2c5ec     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2c5f0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2c5f4     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
2c5f8     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
2c5fc     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
2c600     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2c604     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
2c608     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
2c60c     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
2c610                 |         if !!HAVE_MOUSE
2c610                 |         end
2c610                 | 
2c610                 | .mouse_config
2c610                 | if HAVE_MOUSE
2c610     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
2c614     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2c618     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
2c61c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2c620     3F 00 00 FF 
2c624     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2c628     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
2c62c                 | 
2c62c                 |                 debug("mouse passed addr check")
2c62c                 | 
2c62c     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2c630     00 00 80 FF 
2c634     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
2c638     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
2c63c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2c640     55 02 A0 FD |                 call    #control_read
2c644     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2c648     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2c64c     44 02 90 5D |         if_nz   jmp     #.notify_client
2c650     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2c654     56 01 00 F6 |                 mov     0-0, total_data
2c658     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2c65c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2c65c                 | 
2c65c     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
2c660     64 0D D0 FE |                 loc     ptra, #set_protocol
2c664     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
2c668     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2c66c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
2c670     A0 02 A0 FD |                 call    #control_write
2c674     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2c678     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
2c67c     14 02 90 5D |         if_nz   jmp     #.notify_client
2c680                 |                 debug("mouse passed SetProtocol")
2c680     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
2c684     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
2c688     60 02 B0 FD |                 call    #hset_idle
2c68c                 |                 'cmp     retval, #PID_ACK        wz
2c68c                 |         'if_nz   mov     hmouse_ep_addr, #0
2c68c                 |         'if_nz   jmp     #.notify_client
2c68c                 |                 debug("mouse passed SetIdle")
2c68c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2c690     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2c694     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2c698     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2c69c     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
2c6a0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2c6a4     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
2c6a8     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
2c6ac     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
2c6b0     3F 00 00 FF 
2c6b4     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
2c6b8     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
2c6bc     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
2c6c0     D0 01 90 FD |                 jmp     #.notify_client
2c6c4                 | end
2c6c4                 | .gamepad_config
2c6c4                 | if _HAVE_GAMEPAD
2c6c4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2c6c8     00 00 0C F2 |                 cmp     0-0, #0                 wz
2c6cc     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
2c6d0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2c6d4     00 70 03 F6 |                 mov     htmp, 0-0
2c6d8     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2c6dc     3F 00 00 FF 
2c6e0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2c6e4     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
2c6e8                 | 
2c6e8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2c6ec     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2c6f0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2c6f4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2c6f8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
2c6fc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2c700     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
2c704     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
2c708     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
2c70c     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
2c710     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2c714     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
2c718     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
2c71c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
2c720                 | 
2c720                 |                 if EMUPAD_MAX_PLAYER > 0
2c720                 |                 
2c720                 | .rule_loop           
2c720                 |                 end
2c720                 | 
2c720     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
2c724     5C 00 90 AD |         if_e    jmp     #.xinput
2c728     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2c72c     00 70 03 F6 |                 mov     htmp,0-0
2c730     01 A6 02 FF 
2c734     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
2c738     7C 00 90 AD |         if_e    jmp     #.ps3
2c73c                 | 
2c73c     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
2c740     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
2c744     00 00 80 5F 
2c748     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
2c74c     03 00 80 AF 
2c750     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
2c754     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
2c758     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2c75c     55 02 A0 FD |                 call    #control_read
2c760     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2c764     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2c768     00 00 04 56 |         if_nz   mov     0-0, #0
2c76c     24 01 90 5D |         if_nz   jmp     #.notify_client
2c770     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
2c774     56 01 00 F6 |                 mov     0-0, total_data
2c778     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2c77c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
2c77c                 | 
2c77c     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
2c780     10 01 90 FD |                 jmp     #.notify_client
2c784                 | .xinput
2c784     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
2c788     2D EF 03 F6 |                 mov     pb,hdev_port
2c78c     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
2c790     03 EE 27 F3 |                 fle     pb,#3
2c794     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
2c798     02 EF 47 FC |                 wrbyte  pb, ptra[2]
2c79c                 | 
2c79c     03 B0 06 F6 |                 mov     pkt_data, #3
2c7a0     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
2c7a4     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
2c7a8     5A 00 A0 FD |                 call    #txn_out
2c7ac     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
2c7b0                 | 
2c7b0     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
2c7b4     DC 00 90 FD |                 jmp     #.notify_client
2c7b8                 | .ps3
2c7b8     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
2c7bc     2D EF 03 F6 |                 mov     pb,hdev_port
2c7c0     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
2c7c4     04 EE 27 F3 |                 fle     pb,#4
2c7c8     F7 EF C3 F9 |                 decod   pb
2c7cc     09 EF 47 FC |                 wrbyte  pb, ptra[9]
2c7d0                 | 
2c7d0     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2c7d4     00 0C D0 FE |                 loc     ptra, #set_report
2c7d8     01 00 80 FF 
2c7dc     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
2c7e0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2c7e4     03 61 5C FC |                 wrword  #48, ptra[wLength]
2c7e8     20 0C B0 FE |                 loc     pb, #ps3_command_buff
2c7ec     A0 02 A0 FD |                 call    #control_write
2c7f0                 | 
2c7f0     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
2c7f4     E0 0B D0 FE |                 loc     ptra, #set_report
2c7f8     01 00 80 FF 
2c7fc     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
2c800     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2c804     03 09 5C FC |                 wrword  #4, ptra[wLength]
2c808     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
2c80c     A0 02 A0 FD |                 call    #control_write
2c810     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
2c814     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
2c818     00 00 04 56 |         if_nz   mov     0-0, #0
2c81c     74 00 90 5D |         if_nz   jmp     #.notify_client
2c820                 | 
2c820     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
2c824     6C 00 90 FD |                 jmp     #.notify_client
2c828                 | end
2c828                 | 
2c828                 | .hub_config
2c828     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
2c82c     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
2c830     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
2c834     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
2c838     3F 00 00 FF 
2c83c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
2c840     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
2c844                 | 
2c844     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
2c848     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
2c84c     26 EF 03 F6 |                 mov     pb, hub_descr_p
2c850     55 02 A0 FD |                 call    #control_read
2c854     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2c858     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
2c85c     34 00 90 5D |         if_nz   jmp     #.notify_client
2c860                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
2c860                 | 
2c860     26 F1 03 F6 |                 mov     ptra, hub_descr_p
2c864     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
2c868     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
2c86c                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
2c86c                 | .pwr_loop
2c86c     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
2c870     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
2c874     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
2c878     A0 02 A0 FD |                 call    #control_write
2c87c     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
2c880                 | 
2c880     B1 99 02 F6 |                 mov     hctwait, _500ms_
2c884     B0 99 02 F1 |                 add     hctwait, _100ms_
2c888     EF 02 A0 FD |                 call    #poll_waitx
2c88c                 | 
2c88c     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
2c890     00 00 90 FD |                 jmp     #.notify_client
2c894                 | 
2c894                 | .notify_client
2c894     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2c898     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
2c89c                 |                 debug(uhex_long(hdev_type,hdev_type+1))
2c89c                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
2c89c     2D 00 64 FD |                 ret
2c8a0                 | 
2c8a0                 | '------------------------------------------------------------------------------
2c8a0                 | ' Initialize the keyboard/mouse data area to start-up values.
2c8a0                 | '------------------------------------------------------------------------------
2c8a0                 | ' On entry:
2c8a0                 | ' On exit:
2c8a0                 | '------------------------------------------------------------------------------
2c8a0                 | init_kbdm_data
2c8a0     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
2c8a4     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
2c8a8                 | 
2c8a8     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
2c8ac     2B ED 03 F6 |                 mov     pa, cache_end_p
2c8b0                 | .loop
2c8b0     61 01 4C FC |                 wrbyte  #0, ptra++
2c8b4     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
2c8b8     F4 FF 9F CD |         if_b    jmp     #.loop
2c8bc                 |         
2c8bc                 |         if EMUPAD_MAX_PLAYER > 0
2c8bc                 |         end
2c8bc                 | 
2c8bc                 | 
2c8bc     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
2c8c0                 | .regloop
2c8c0     00 EC 8F F9 |                 altd    pa
2c8c4     00 00 04 F6 |                 mov     0-0, #0
2c8c8     01 EC 07 F1 |                 add     pa, #1
2c8cc     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
2c8d0     EC FF 9F 5D |         if_nz   jmp     #.regloop
2c8d4                 | 
2c8d4     E1 E1 61 FF 
2c8d8     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
2c8dc     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
2c8e0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
2c8e4     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
2c8e8                 | 
2c8e8     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
2c8ec                 | 
2c8ec                 | '------------------------------------------------------------------------------
2c8ec                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
2c8ec                 | ' function.
2c8ec                 | '------------------------------------------------------------------------------
2c8ec                 | ' On entry:
2c8ec                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
2c8ec                 | '   hpar2 - index number of the target interface.
2c8ec                 | ' On exit:
2c8ec                 | '------------------------------------------------------------------------------
2c8ec                 | hset_idle
2c8ec     A8 99 02 F6 |                 mov     hctwait, _2ms_
2c8f0     EF 02 A0 FD |                 call    #poll_waitx
2c8f4     D8 0A D0 FE |                 loc     ptra, #set_idle
2c8f8     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
2c8fc     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
2c900     A0 02 80 FD |                 jmp     #control_write
2c904                 | 
2c904                 | '------------------------------------------------------------------------------
2c904                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
2c904                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
2c904                 | '------------------------------------------------------------------------------
2c904                 | ' On entry:
2c904                 | '   ep_addr_pid - device address and enpoint for the request.
2c904                 | ' On exit:
2c904                 | '   retval - transaction result.
2c904                 | '------------------------------------------------------------------------------
2c904                 | hset_kbdled_report
2c904     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
2c908     CC 0A D0 FE |                 loc     ptra, #set_report
2c90c     01 00 80 FF 
2c910     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
2c914     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
2c918     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
2c91c     27 EF 03 F6 |                 mov     pb, urx_buff_p
2c920     F7 77 42 FC |                 wrbyte  kb_led_states, pb
2c924     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
2c928                 | 
2c928                 | '------------------------------------------------------------------------------
2c928                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
2c928                 | '------------------------------------------------------------------------------
2c928                 | ' On entry:
2c928                 | ' On exit:
2c928                 | '------------------------------------------------------------------------------
2c928                 | hget_kbd_in_report
2c928     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
2c92c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2c930     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
2c934     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
2c938     CF 02 A0 FD |                 call    #do_int_in
2c93c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2c940     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2c944                 | 
2c944     00 90 0F F2 |                 cmp     hpar3, #0               wz
2c948     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2c94c                 | 
2c94c     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
2c950     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2c954     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
2c958     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
2c95c                 | 
2c95c     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
2c960     18 00 B0 FD |                 call    #hkbd_compare
2c964                 |         if EMUPAD_MAX_PLAYER > 0
2c964                 |         end
2c964                 | 
2c964                 | .led_check
2c964     3B 71 03 F6 |                 mov     htmp, kb_led_states
2c968     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
2c96c     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
2c970     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
2c974     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
2c978     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
2c97c                 | 
2c97c                 | '------------------------------------------------------------------------------
2c97c                 | ' Compare current and previous keyboard data buffers for keypress changes.
2c97c                 | '------------------------------------------------------------------------------
2c97c                 | hkbd_compare
2c97c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2c980     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
2c984     61 73 07 FB |                 rdlong  htmp1, ptra++
2c988     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2c98c     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
2c990     61 73 07 FB |                 rdlong  htmp1, ptra++
2c994     E1 75 07 FB |                 rdlong  htmp2, ptrb++
2c998     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
2c99c     2D 00 64 AD |         if_z    ret
2c9a0                 | 
2c9a0     B4 13 D0 FE |                 loc     ptra, #hkbd_report
2c9a4                 | 
2c9a4                 |                 ' Handle modifiers
2c9a4     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
2c9a8     00 87 C7 FA |                 rdbyte  hr1, ptra
2c9ac     C7 87 43 F9 |                 rolword hr1,hpar2,#0
2c9b0     63 86 63 FD |                 mergew  hr1
2c9b4     08 EC 07 F6 |                 mov     pa,#8
2c9b8                 | .modloop
2c9b8     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
2c9bc     E8 8C 07 F6 |                 mov     hpar1,#$E8
2c9c0     F6 8D 83 F1 |                 sub     hpar1,pa
2c9c4     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
2c9c8     FB ED 6F FB |                 djnz    pa,#.modloop
2c9cc                 | 
2c9cc     6F E0 75 FD | .release        modc    _set    wc
2c9d0                 |                 'alts    hdev_port, #hid_report_p
2c9d0                 |                 'mov     ptra, hid_report_p
2c9d0     02 F0 07 F1 |                 add     ptra, #2
2c9d4     06 EC 07 F6 |                 mov     pa, #6
2c9d8     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
2c9dc     20 00 90 AD |         if_z    jmp     #.rl3
2c9e0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2c9e4     02 F2 07 F1 |                 add     ptrb, #2
2c9e8     06 EE 07 F6 |                 mov     pb, #6
2c9ec     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
2c9f0     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2c9f4     08 00 90 AD |         if_z    jmp     #.rl3
2c9f8     FC EF 6F FB |                 djnz    pb, #.rl2
2c9fc     68 00 B0 FD |                 call    #hkbd_translate
2ca00     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
2ca04                 | 
2ca04     00 90 07 F6 |                 mov     hpar3, #0
2ca08     1F 90 27 F4 |                 bith    hpar3, #31
2ca0c                 | 
2ca0c     6F 00 74 FD | .press          modc    _clr    wc
2ca10     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2ca14     02 F0 07 F1 |                 add     ptra, #2
2ca18     06 EC 07 F6 |                 mov     pa, #6
2ca1c     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
2ca20     20 00 90 AD |         if_z    jmp     #.pl3
2ca24     30 13 F0 FE |                 loc     ptrb, #hkbd_report
2ca28     02 F2 07 F1 |                 add     ptrb, #2
2ca2c     06 EE 07 F6 |                 mov     pb, #6
2ca30     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
2ca34     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
2ca38     08 00 90 AD |         if_z    jmp     #.pl3
2ca3c     FC EF 6F FB |                 djnz    pb, #.pl2
2ca40     24 00 B0 FD |                 call    #hkbd_translate
2ca44     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
2ca48                 | 
2ca48     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
2ca4c     08 13 F0 FE |                 loc     ptrb, #hkbd_report
2ca50     28 02 64 FD |                 setq #1
2ca54     61 73 07 FB |                 rdlong  htmp1, ptra++
2ca58     28 02 64 FD |                 setq #1
2ca5c     E1 73 67 FC |                 wrlong  htmp1, ptrb++
2ca60     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
2ca64                 | 
2ca64     2D 00 64 FD |                 ret
2ca68                 | 
2ca68                 | '------------------------------------------------------------------------------
2ca68                 | ' Translate keyboard scancode to ASCII
2ca68                 | '------------------------------------------------------------------------------
2ca68                 | ' On entry:
2ca68                 | '   hpar1 - scancode
2ca68                 | '   hpar2 - key modifiers state
2ca68                 | '       c - pressed (0) or released (1) flag
2ca68                 | ' On exit:
2ca68                 | '   hpar1 - bit     31 = 0 pressed, 1 released
2ca68                 | '               30..17 = unused
2ca68                 | '                   18 = scroll-lock state 
2ca68                 | '                   17 = caps-lock state
2ca68                 | '                   16 = num-lock state 
2ca68                 | '                15..8 = key modifiers state
2ca68                 | '                 7..0 = scancode
2ca68                 | '------------------------------------------------------------------------------
2ca68                 | hkbd_translate
2ca68     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
2ca6c     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
2ca70     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
2ca74     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
2ca78     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
2ca7c     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
2ca80                 | 
2ca80                 |         if EMUPAD_MAX_PLAYER > 0
2ca80                 | 
2ca80                 |         if EMUPAD_BT0_BIT >= 0
2ca80                 |         end
2ca80                 |         if EMUPAD_BT1_BIT >= 0
2ca80                 |         end
2ca80                 |         if EMUPAD_BT2_BIT >= 0
2ca80                 |         end
2ca80                 |         if EMUPAD_BT3_BIT >= 0
2ca80                 |         end
2ca80                 |         if EMUPAD_BT4_BIT >= 0
2ca80                 |         end
2ca80                 |         if EMUPAD_BT5_BIT >= 0
2ca80                 |         end
2ca80                 |         if EMUPAD_BT6_BIT >= 0
2ca80                 |         end
2ca80                 |         if EMUPAD_BT7_BIT >= 0
2ca80                 |         end
2ca80                 |         if EMUPAD_BT8_BIT >= 0
2ca80                 |         end
2ca80                 |         if EMUPAD_BT9_BIT >= 0
2ca80                 |         end
2ca80                 | 
2ca80                 |         end
2ca80     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
2ca84     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
2ca88     1F 8C 47 F4 |                 bitc    hpar1, #31
2ca8c                 |         if KEYQUEUE_SIZE > 0
2ca8c     C4 09 B0 FE |                 loc pb,#keyq_head
2ca90     F7 71 E3 FA |                 rdword htmp,pb
2ca94     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
2ca98     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
2ca9c     B8 75 03 F6 |                 mov htmp2,htmp
2caa0     04 74 07 FA |                 mul htmp2,#4
2caa4     F7 75 03 F1 |                 add htmp2,pb
2caa8     02 74 07 F1 |                 add htmp2,#2
2caac     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
2cab0     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
2cab4     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
2cab8     F7 71 43 5C |         if_nz   wrbyte htmp,pb
2cabc                 |         end
2cabc     2D 00 7C FD |                 ret wcz
2cac0                 | 
2cac0                 | if HAVE_MOUSE
2cac0                 | '------------------------------------------------------------------------------
2cac0                 | ' Execute an IN interrupt transaction to poll for mouse activity.
2cac0                 | '------------------------------------------------------------------------------
2cac0                 | ' On entry:
2cac0                 | ' On exit:
2cac0                 | '------------------------------------------------------------------------------
2cac0                 | hget_mouse_in_report
2cac0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
2cac4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2cac8     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
2cacc     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
2cad0     CF 02 A0 FD |                 call    #do_int_in
2cad4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2cad8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2cadc                 | 
2cadc     00 90 0F F2 |                 cmp     hpar3, #0               wz
2cae0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2cae4                 | 
2cae4     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
2cae8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2caec     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
2caf0     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
2caf4                 | 
2caf4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
2caf8     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
2cafc     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
2cb00     01 90 87 31 |         if_ae   sub     hpar3, #1
2cb04                 | 
2cb04     40 09 90 FE |                 loc     pa, #mouse_limits
2cb08     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
2cb0c                 | 
2cb0c                 |                 ' load xacc,yacc,zacc
2cb0c     28 04 64 FD |                 setq    #3-1
2cb10     80 87 07 FB |                 rdlong  hr1,ptrb
2cb14                 |                 ' load limits and outptr
2cb14     28 04 64 FD |                 setq    #3-1
2cb18     F6 73 03 FB |                 rdlong  htmp1,pa
2cb1c                 | 
2cb1c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
2cb20     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
2cb24     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
2cb28     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
2cb2c     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
2cb30     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
2cb34     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
2cb38     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
2cb3c                 |               
2cb3c                 | 
2cb3c     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
2cb40     07 70 67 F7 |                 signx   htmp, #7
2cb44     B8 87 03 F1 |                 add     hr1,htmp
2cb48     00 72 0F F2 |                 cmp     htmp1,#0 wz
2cb4c     B9 87 63 53 |         if_ne   fles    hr1,htmp1
2cb50     00 86 47 53 |         if_ne   fges    hr1,#0
2cb54                 | 
2cb54     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
2cb58     07 70 67 F7 |                 signx   htmp, #7
2cb5c     B8 89 03 F1 |                 add     hr2,htmp
2cb60     00 74 0F F2 |                 cmp     htmp2,#0 wz
2cb64     BA 89 63 53 |         if_ne   fles    hr2,htmp2
2cb68     00 88 47 53 |         if_ne   fges    hr2,#0
2cb6c                 |                 
2cb6c                 | 
2cb6c     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
2cb70     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
2cb74     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
2cb78     B8 8B 03 A1 |         if_z    add     hr3,htmp
2cb7c                 | 
2cb7c     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
2cb80     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
2cb84                 | 
2cb84                 |                 ' write back accumulators
2cb84     28 04 64 FD |                 setq    #3-1
2cb88     80 87 67 FC |                 wrlong  hr1,ptrb
2cb8c                 |                 ' if outptr set, write X/Y words
2cb8c     00 76 0F F2 |                 cmp htmp3,#0                    wz
2cb90     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
2cb94     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
2cb98     2D 00 64 FD |                 ret
2cb9c                 | end
2cb9c                 | 
2cb9c                 | '------------------------------------------------------------------------------
2cb9c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2cb9c                 | '------------------------------------------------------------------------------
2cb9c                 | ' On entry:
2cb9c                 | ' On exit:
2cb9c                 | '------------------------------------------------------------------------------
2cb9c                 | if _HAVE_GAMEPAD
2cb9c                 | hget_gp_in_report
2cb9c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
2cba0     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
2cba4                 | 
2cba4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2cba8     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
2cbac     00 90 E3 F8 |                 getbyte hpar3
2cbb0     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
2cbb4     CF 02 A0 FD |                 call    #do_int_in
2cbb8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2cbbc     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
2cbc0                 | 
2cbc0     00 90 0F F2 |                 cmp     hpar3, #0               wz
2cbc4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2cbc8                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
2cbc8                 | 
2cbc8     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
2cbcc     00 70 E3 F8 |                 getbyte htmp                            ' |
2cbd0     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
2cbd4     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
2cbd8     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
2cbdc     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
2cbe0     B8 01 C0 F8 |                 setbyte htmp                            ' |
2cbe4                 | 
2cbe4                 | ' Note: the following code compares the current and previous reports
2cbe4                 | ' and process the data if there are changes to ease the debug output.
2cbe4                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
2cbe4                 | ' gpPreReport buffer.
2cbe4                 | 
2cbe4                 |                 ' ----- start of block to remove
2cbe4                 |                 {
2cbe4                 |                 }
2cbe4                 |                 ' ----- end of block to remove
2cbe4     F4 04 90 FE |                 loc pa,#hpad_translate
2cbe8     2A EC 63 FD |                 push pa
2cbec                 | 
2cbec                 |                 ' FALL THROUGH !!!!
2cbec                 | 
2cbec                 | '------------------------------------------------------------------------------
2cbec                 | ' Decode controller report
2cbec                 | '------------------------------------------------------------------------------
2cbec                 | hid_decode
2cbec                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
2cbec     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
2cbf0     00 04 00 FF 
2cbf4     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
2cbf8                 | 
2cbf8     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
2cbfc                 | 
2cbfc     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2cc00     00 2A E3 F8 |                 getbyte hidr_type
2cc04     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
2cc08     34 02 90 AD |         if_z    jmp     #hpad_xinput
2cc0c     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
2cc10     1C 03 90 AD |         if_z    jmp     #hpad_ps3
2cc14     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
2cc18     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
2cc1c     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
2cc20                 |                 
2cc20                 | 
2cc20                 | '------------------------------------------------------------------------------
2cc20                 | ' Handle HID controller (or mouse now
2cc20                 | ' On entry:
2cc20                 | '   ptrb - controller report
2cc20                 | '------------------------------------------------------------------------------
2cc20                 | hpad_hid
2cc20     1B 01 A0 FD |                 call    #get_hid_descr_buffer
2cc24     F7 F1 03 F6 |                 mov     ptra, pb
2cc28     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
2cc2c     00 EC 03 F6 |                 mov     pa, 0-0
2cc30                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
2cc30     19 2A 3B FF 
2cc34     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
2cc38                 | 
2cc38                 | .next
2cc38     00 EC 5F F2 |                 cmps    pa, #0      wcz
2cc3c     2D 00 7C ED |         if_be   ret     wcz
2cc40                 | 
2cc40     61 8D C7 FA |                 rdbyte  hpar1, ptra++
2cc44     01 EC 87 F1 |                 sub     pa, #1
2cc48     00 8E 07 F6 |                 mov     hpar2, #0
2cc4c                 | 
2cc4c     C6 71 03 F6 |                 mov     htmp, hpar1
2cc50     03 70 07 F5 |                 and     htmp, #$03
2cc54     01 70 0F F2 |                 cmp     htmp, #1    wz
2cc58     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
2cc5c     07 8E 67 A7 |         if_z    signx   hpar2,#7
2cc60     01 EC 87 A1 |         if_z    sub     pa, #1
2cc64     02 70 0F F2 |                 cmp     htmp, #2    wz
2cc68     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
2cc6c     0F 8E 67 A7 |         if_z    signx   hpar2,#15
2cc70     02 EC 87 A1 |         if_z    sub     pa, #2
2cc74     03 70 0F F2 |                 cmp     htmp, #3    wz
2cc78     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
2cc7c     04 EC 87 A1 |         if_z    sub     pa, #4
2cc80                 | 
2cc80     FC 8C 07 F5 |                 and     hpar1, #$FC
2cc84                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
2cc84                 | 
2cc84     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
2cc88     0C 01 90 AD |         if_z    jmp     #.report_id
2cc8c     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
2cc90     24 01 90 AD |         if_z    jmp     #.usage_page
2cc94     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
2cc98     2C 01 90 AD |         if_z    jmp     #.usage
2cc9c     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
2cca0     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
2cca4     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
2cca8     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
2ccac     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
2ccb0     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
2ccb4     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
2ccb8     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
2ccbc     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
2ccc0     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
2ccc4     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
2ccc8     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
2cccc     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
2ccd0     64 FF 9F 5D |         if_nz   jmp     #.next
2ccd4                 | 
2ccd4     D8 1D A7 FB |                 tjf     hidr_state,#.next
2ccd8                 | 
2ccd8     03 8E 07 F5 |                 and     hpar2, #$03
2ccdc     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
2cce0     18 00 90 5D |         if_nz   jmp     #.skip
2cce4                 | 
2cce4     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
2cce8     20 00 90 AD |         if_z    jmp     #.axes
2ccec     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
2ccf0     5C 00 90 AD |         if_z    jmp     #.hats
2ccf4     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
2ccf8     70 00 90 AD |         if_z    jmp     #.buttons
2ccfc                 | .skip
2ccfc     8F 71 03 F6 |                 mov     htmp, hidr_size
2cd00     90 71 03 FA |                 mul     htmp, hidr_count
2cd04     B8 23 03 F1 |                 add     hidr_offset, htmp
2cd08     2C FF 9F FD |                 jmp     #.next
2cd0c                 | .axes
2cd0c                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
2cd0c     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
2cd10     90 87 03 F6 |                 mov     hr1, hidr_count
2cd14                 | .l1
2cd14     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2cd18     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2cd1c     04 03 B0 FD |                 call    #hpad_getbits
2cd20     64 03 B0 FD |                 call    #hpad_normalize
2cd24     06 84 1F F2 |                 cmp     hr0, #6         wcz
2cd28     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
2cd2c     00 88 43 C8 |         if_b    getnib  hr2
2cd30     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
2cd34     5F 01 20 C9 |         if_b    setword retval
2cd38     01 84 07 C1 |         if_b    add     hr0, #1
2cd3c     8F 23 03 F1 |                 add     hidr_offset, hidr_size
2cd40     F4 87 6F FB |                 djnz    hr1, #.l1
2cd44                 | 
2cd44     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
2cd48     01 1C 07 F6 |                 mov     hidr_state, #1
2cd4c     E8 FE 9F FD |                 jmp     #.next
2cd50                 | .hats
2cd50                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
2cd50     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2cd54     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2cd58     C8 02 B0 FD |                 call    #hpad_getbits
2cd5c     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
2cd60     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2cd64     01 1C 07 F6 |                 mov     hidr_state, #1
2cd68     90 FF 9F FD |                 jmp     #.skip
2cd6c                 | .buttons
2cd6c                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
2cd6c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
2cd70     8F 8F 03 F6 |                 mov     hpar2, hidr_size
2cd74     90 8F 03 FA |                 mul     hpar2, hidr_count
2cd78     A8 02 B0 FD |                 call    #hpad_getbits
2cd7c     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
2cd80     B8 BF 62 F0 |                 shl     retval, htmp
2cd84     5F 17 43 F5 |                 or      hidr_buttons, retval
2cd88     90 71 03 F1 |                 add     htmp, hidr_count
2cd8c     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
2cd90     01 1C 07 F6 |                 mov     hidr_state, #1
2cd94     64 FF 9F FD |                 jmp     #.skip
2cd98                 | .report_id
2cd98     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
2cd9c     2D 00 7C 5D |         if_nz   ret     wcz
2cda0     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2cda4     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
2cda8     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
2cdac     01 1C 67 56 |         if_nz   neg     hidr_state,#1
2cdb0     01 F2 87 51 |         if_nz   sub     ptrb,#1
2cdb4     80 FE 9F FD |                 jmp     #.next
2cdb8                 | .usage_page
2cdb8     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
2cdbc     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
2cdc0     04 1C 07 A6 |         if_z    mov     hidr_state, #4
2cdc4     70 FE 9F FD |                 jmp     #.next
2cdc8                 | .usage
2cdc8     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
2cdcc     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
2cdd0     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
2cdd4     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2cdd8     5C FE 9F AD |         if_z    jmp     #.next
2cddc     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
2cde0     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
2cde4     01 1C 07 A6 |         if_z    mov     hidr_state, #1
2cde8     4C FE 9F AD |         if_z    jmp     #.next
2cdec     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
2cdf0     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
2cdf4     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
2cdf8     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
2cdfc     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
2ce00     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
2ce04     10 00 90 AD |         if_z    jmp     #.usage_axis
2ce08     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
2ce0c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
2ce10     03 1C 07 A6 |         if_z    mov     hidr_state, #3
2ce14     20 FE 9F FD |                 jmp     #.next
2ce18                 | .usage_axis
2ce18     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
2ce1c     18 FE 9F CD |         if_b    jmp     #.next
2ce20     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
2ce24     C7 01 00 F8 |                 setnib  hpar2
2ce28                 | 
2ce28     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
2ce2c     C7 8F C3 F9 |                 decod   hpar2
2ce30     C7 0F 43 F5 |                 or      hidr_flags, hpar2
2ce34                 | 
2ce34     01 24 07 F1 |                 add     hidr_usage_idx, #1
2ce38     02 1C 07 F6 |                 mov     hidr_state, #2
2ce3c     F8 FD 9F FD |                 jmp     #.next
2ce40                 | 
2ce40                 | '------------------------------------------------------------------------------
2ce40                 | ' Handle XInput controller
2ce40                 | ' On entry:
2ce40                 | '   ptrb - controller report
2ce40                 | '------------------------------------------------------------------------------
2ce40                 | '   Default implementation translates the report to a pseudo-defacto hid
2ce40                 | '   standard and jumps to hpad_translate for actions.
2ce40                 | '   Implementors may take specific actions for this kind of controller.
2ce40                 | '------------------------------------------------------------------------------
2ce40                 | hpad_xinput
2ce40     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
2ce44     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
2ce48     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
2ce4c     14 70 0F F2 |                 cmp     htmp, #$14      wz
2ce50     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
2ce54                 | 
2ce54                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2ce54                 | 
2ce54     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
2ce58     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
2ce5c                 | 
2ce5c     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
2ce60     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
2ce64     5F BF 22 F6 |                 not     retval
2ce68     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2ce6c     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
2ce70     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
2ce74     5F BF 22 F6 |                 not     retval
2ce78     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2ce7c                 | 
2ce7c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2ce80     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
2ce84     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2ce88     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
2ce8c     F8 01 B0 FD |                 call    #hpad_normalize
2ce90     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
2ce94     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
2ce98     C0 BE 1E F2 |                 cmp     retval, #192    wcz
2ce9c     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
2cea0     E4 01 B0 FD |                 call    #hpad_normalize
2cea4     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
2cea8                 | 
2cea8     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2ceac     81 BF E6 FA |                 rdword  retval, ptrb[1]
2ceb0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2ceb4     00 16 47 F4 |                 bitc    hidr_buttons, #0
2ceb8     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2cebc     01 16 47 F4 |                 bitc    hidr_buttons, #1
2cec0     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2cec4     02 16 47 F4 |                 bitc    hidr_buttons, #2
2cec8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2cecc     03 16 47 F4 |                 bitc    hidr_buttons, #3
2ced0     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
2ced4     04 16 47 F4 |                 bitc    hidr_buttons, #4
2ced8     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
2cedc     05 16 47 F4 |                 bitc    hidr_buttons, #5
2cee0     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
2cee4     08 16 47 F4 |                 bitc    hidr_buttons, #8
2cee8     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
2ceec     09 16 47 F4 |                 bitc    hidr_buttons, #9
2cef0     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
2cef4     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2cef8     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
2cefc     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2cf00     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
2cf04     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2cf08                 | 
2cf08     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2cf0c     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
2cf10     7A BB 7A FF 
2cf14     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
2cf18     F9 FF 7F FF 
2cf1c     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
2cf20     B9 71 5F F9 |                 altgn   htmp, #htmp1
2cf24     00 70 43 F8 |                 getnib  htmp
2cf28     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2cf2c                 | 
2cf2c     AC 01 90 FD |                 jmp     #hpad_translate
2cf30                 | 
2cf30                 | '------------------------------------------------------------------------------
2cf30                 | ' Handle PS3 controller
2cf30                 | ' On entry:
2cf30                 | '   ptrb - controller report
2cf30                 | '------------------------------------------------------------------------------
2cf30                 | '   Default implementation translates the report to a pseudo-defacto hid
2cf30                 | '   standard and jumps to hpad_translate for actions.
2cf30                 | '   Implementors may take specific actions for this kind of controller.
2cf30                 | '------------------------------------------------------------------------------
2cf30                 | hpad_ps3
2cf30     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
2cf34     01 70 0F F2 |                 cmp     htmp, #$01      wz
2cf38     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
2cf3c                 | 
2cf3c                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
2cf3c                 | 
2cf3c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
2cf40     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
2cf44     40 01 B0 FD |                 call    #hpad_normalize
2cf48     5F 11 23 F9 |                 setword hidr_axis, retval, #0
2cf4c     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
2cf50     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
2cf54     30 01 B0 FD |                 call    #hpad_normalize
2cf58     5F 11 2B F9 |                 setword hidr_axis, retval, #1
2cf5c     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
2cf60     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
2cf64     20 01 B0 FD |                 call    #hpad_normalize
2cf68     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
2cf6c     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
2cf70     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
2cf74     10 01 B0 FD |                 call    #hpad_normalize
2cf78     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
2cf7c     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
2cf80     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
2cf84                 | 
2cf84     08 8C 07 F6 |                 mov     hpar1, #8
2cf88     13 8E 07 F6 |                 mov     hpar2, #19
2cf8c     94 00 B0 FD |                 call    #hpad_getbits
2cf90                 | 
2cf90     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
2cf94     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
2cf98     00 16 47 F4 |                 bitc    hidr_buttons, #0
2cf9c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
2cfa0     01 16 47 F4 |                 bitc    hidr_buttons, #1
2cfa4     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
2cfa8     02 16 47 F4 |                 bitc    hidr_buttons, #2
2cfac     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
2cfb0     03 16 47 F4 |                 bitc    hidr_buttons, #3
2cfb4     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
2cfb8     04 16 47 F4 |                 bitc    hidr_buttons, #4
2cfbc     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
2cfc0     05 16 47 F4 |                 bitc    hidr_buttons, #5
2cfc4     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
2cfc8     06 16 47 F4 |                 bitc    hidr_buttons, #6
2cfcc     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
2cfd0     07 16 47 F4 |                 bitc    hidr_buttons, #7
2cfd4     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
2cfd8     08 16 47 F4 |                 bitc    hidr_buttons, #8
2cfdc     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
2cfe0     09 16 47 F4 |                 bitc    hidr_buttons, #9
2cfe4     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
2cfe8     0A 16 47 F4 |                 bitc    hidr_buttons, #10
2cfec     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
2cff0     0B 16 47 F4 |                 bitc    hidr_buttons, #11
2cff4     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
2cff8     0C 16 47 F4 |                 bitc    hidr_buttons, #12
2cffc                 | 
2cffc     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
2d000     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
2d004     09 FA 79 FF 
2d008     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
2d00c     FF FA 7F FF 
2d010     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
2d014     B9 71 5F F9 |                 altgn   htmp, #htmp1
2d018     00 70 43 F8 |                 getnib  htmp
2d01c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
2d020                 | 
2d020     B8 00 90 FD |                 jmp     #hpad_translate
2d024                 | 
2d024                 | '------------------------------------------------------------------------------
2d024                 | ' Read bits from report data buffer
2d024                 | '------------------------------------------------------------------------------
2d024                 | ' On entry:
2d024                 | '   PTRB - report buffer
2d024                 | '   hpar1 - start bit
2d024                 | '   hpar2 - number of bits
2d024                 | ' On exit:
2d024                 | '   retval - bits
2d024                 | '------------------------------------------------------------------------------
2d024                 | hpad_getbits
2d024     C6 71 03 F6 |                 mov     htmp, hpar1
2d028     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
2d02c     F9 71 03 F1 |                 add     htmp, ptrb
2d030     B8 BF 02 FB |                 rdlong  retval, htmp
2d034                 | 
2d034     C6 73 03 F6 |                 mov     htmp1, hpar1
2d038     07 72 07 F5 |                 and     htmp1, #$07     ' shift
2d03c     B9 BF 42 F0 |                 shr     retval, htmp1
2d040                 | 
2d040     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
2d044     10 00 90 1D |         if_a    jmp     #.l1
2d048                 | 
2d048     C7 8F C3 F9 |                 decod   hpar2
2d04c     01 8E 87 F1 |                 sub     hpar2, #1
2d050     C7 BF 02 F5 |                 and     retval, hpar2
2d054     2D 00 64 FD |                 ret
2d058                 | .l1
2d058     FF 7F 00 FF 
2d05c     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
2d060     03 70 07 F1 |                 add     htmp, #3
2d064     B8 75 03 FB |                 rdlong  htmp2, htmp
2d068     18 8E 87 F1 |                 sub     hpar2, #24
2d06c     C7 8F C3 F9 |                 decod   hpar2
2d070     01 8E 87 F1 |                 sub     hpar2, #1
2d074     B9 75 43 F0 |                 shr     htmp2, htmp1
2d078     C7 75 03 F5 |                 and     htmp2, hpar2
2d07c     18 74 67 F0 |                 shl     htmp2, #24
2d080     BA BF 42 F5 |                 or      retval, htmp2
2d084     2D 00 64 FD |                 ret
2d088                 | 
2d088                 | '------------------------------------------------------------------------------
2d088                 | ' Normalize value to signed word (-32768 / 32767)
2d088                 | '------------------------------------------------------------------------------
2d088                 | ' On entry:
2d088                 | '   retval - value to normalize
2d088                 | '   hidr_lminmax - min (word 1) max (word 0) value range
2d088                 | '   - or -
2d088                 | '   hidr_pminmax - min (word 1) max (word 0) value range
2d088                 | '   hidr_size - value bits length
2d088                 | ' On exit:
2d088                 | '   retval - normalized value
2d088                 | '------------------------------------------------------------------------------
2d088                 | hpad_normalize
2d088     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
2d08c     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
2d090     2D 00 64 AD |         if_z    ret
2d094     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
2d098     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
2d09c     0F 72 77 F7 |                 signx   htmp1, #15      wc
2d0a0     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
2d0a4     00 BE 66 C7 |         if_c    signx   retval, #0-0
2d0a8     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
2d0ac     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
2d0b0     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
2d0b4     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
2d0b8     B8 71 53 F6 |                 abs     htmp            wc
2d0bc     1F BE 0E F4 |                 testb   retval, #31     wz
2d0c0     5F BF 42 F6 |                 abs     retval
2d0c4     B8 BF 12 FD |                 qdiv    retval, htmp
2d0c8     18 BE 62 FD |                 getqx   retval
2d0cc     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
2d0d0     C0 FF 7F FF 
2d0d4     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
2d0d8     2D 00 64 FD |                 ret
2d0dc                 | 
2d0dc                 | '------------------------------------------------------------------------------
2d0dc                 | ' Perform controller actions
2d0dc                 | ' On entry:
2d0dc                 | '    hidr_id        report id
2d0dc                 | '    hidr_axis      axis value (signed word, 2 axes per long)
2d0dc                 | '                      X = hidr_axis+0, #0
2d0dc                 | '                      Y = hidr_axis+0, #1
2d0dc                 | '                      Z = hidr_axis+1, #0
2d0dc                 | '                     RX = hidr_axis+1, #1
2d0dc                 | '                     RY = hidr_axis+2, #0
2d0dc                 | '                     RZ = hidr_axis+2, #1
2d0dc                 | '    hidr_buttons   buttons state (bits 0 to 31)
2d0dc                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
2d0dc                 | '
2d0dc                 | '                     -------3 -------2 -------1 -------0 byte
2d0dc                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
2d0dc                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
2d0dc                 | '                                zyx||| |||||||| ++++++++ n. buttons
2d0dc                 | '                                |||||| ||||++++--------- n. axes
2d0dc                 | '                                |||||| ++++------------- n. hats
2d0dc                 | '                                ++++++------------------ valid axes
2d0dc                 | '------------------------------------------------------------------------------
2d0dc                 | hpad_translate
2d0dc                 | 
2d0dc                 | 
2d0dc                 |         if HAVE_HIDPAD
2d0dc     84 0C F0 FE |                 loc     ptrb,#hidpad_report
2d0e0     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
2d0e4     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
2d0e8     01 70 E7 F2 |                 cmpsub  htmp,#1
2d0ec     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
2d0f0     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
2d0f4     2D 00 7C 3D |         if_ae   ret     wcz
2d0f8     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
2d0fc     B8 F3 03 F1 |                 add     ptrb,htmp
2d100     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
2d104     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
2d108     28 0C 64 FD |                 setq    #7-1
2d10c     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
2d110                 |         end
2d110                 | 
2d110                 | 
2d110                 |         if EMUPAD_MAX_PLAYER > 0
2d110                 | .emupad_no_hat
2d110                 |         if EMUPAD_BT0_BIT >= 0
2d110                 |         end
2d110                 |         if EMUPAD_BT1_BIT >= 0
2d110                 |         end
2d110                 |         if EMUPAD_BT2_BIT >= 0
2d110                 |         end
2d110                 |         if EMUPAD_BT3_BIT >= 0
2d110                 |         end
2d110                 |         if EMUPAD_BT4_BIT >= 0
2d110                 |         end
2d110                 |         if EMUPAD_BT5_BIT >= 0
2d110                 |         end
2d110                 |         if EMUPAD_BT6_BIT >= 0
2d110                 |         end
2d110                 |         if EMUPAD_BT7_BIT >= 0
2d110                 |         end
2d110                 |         if EMUPAD_BT8_BIT >= 0
2d110                 |         end
2d110                 |         if EMUPAD_BT9_BIT >= 0
2d110                 |         end
2d110                 | .emupad_slot_over
2d110                 |         end
2d110                 | 
2d110                 |         if 0
2d110                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
2d110                 | 
2d110                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
2d110                 | 
2d110                 |         end
2d110     2D 00 64 FD |                 ret
2d114                 | end
2d114                 | 
2d114                 | if EMUPAD_MAX_PLAYER > 0
2d114                 | '------------------------------------------------------------------------------
2d114                 | ' Clear EmuPad state
2d114                 | '------------------------------------------------------------------------------
2d114                 | emupad_reset
2d114                 | 
2d114                 | '------------------------------------------------------------------------------
2d114                 | ' Get EmuPad Player number for current device (into retval)
2d114                 | ' Z flag is also set if current device is valid
2d114                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
2d114                 | '------------------------------------------------------------------------------
2d114                 | emupad_getnum
2d114                 | .loop
2d114                 | '------------------------------------------------------------------------------
2d114                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
2d114                 | '------------------------------------------------------------------------------
2d114                 | emupad_discon
2d114                 | .loop         
2d114                 |         
2d114                 |         ' FALL THROUGH!!!
2d114                 | 
2d114                 | '------------------------------------------------------------------------------
2d114                 | ' Update EmuPad reports (all of them...)
2d114                 | '------------------------------------------------------------------------------
2d114                 | emupad_write_reports
2d114                 | .devloop
2d114                 | 
2d114                 | end
2d114                 | 
2d114                 | 
2d114                 | '------------------------------------------------------------------------------
2d114                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
2d114                 | '------------------------------------------------------------------------------
2d114                 | ' On entry:
2d114                 | ' On exit:
2d114                 | '------------------------------------------------------------------------------
2d114                 | hget_hub_status
2d114     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
2d118     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
2d11c     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
2d120     01 90 2F F9 |                 setword hpar3, #1, #1
2d124     CF 02 A0 FD |                 call    #do_int_in
2d128     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2d12c     0C 00 90 AD |         if_z    jmp     #.data
2d130     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
2d134     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
2d138     2D 00 64 FD |                 ret
2d13c                 | .data
2d13c     00 90 0F F2 |                 cmp     hpar3, #0               wz
2d140     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
2d144                 | 
2d144     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
2d148     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
2d14c     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
2d150     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
2d154                 |                 debug(ubin_long(hub_status_chg))
2d154                 | 
2d154     01 5A 06 F6 |                 mov     hdev_port, #1
2d158                 | .loop
2d158     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
2d15c     0C 00 B0 AD |         if_x1   call    #hub_port_handler
2d160     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
2d164     F0 FF 9F 3D |         if_nc   jmp     #.loop
2d168     2D 00 64 FD |                 ret
2d16c                 | 
2d16c                 | hub_port_handler
2d16c     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
2d170     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2d174     27 EF 03 F6 |                 mov     pb, urx_buff_p
2d178     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2d17c     55 02 A0 FD |                 call    #control_read
2d180     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2d184                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2d184                 | 
2d184     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
2d188     50 01 90 5D |         if_x0   jmp     #.other
2d18c     68 02 D0 FE |                 loc     ptra, #clr_port_feat
2d190     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
2d194     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2d198     A0 02 A0 FD |                 call    #control_write
2d19c     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
2d1a0     7C 01 90 5D |         if_x0   jmp     #.disconnect
2d1a4     B0 99 02 F6 |                 mov     hctwait, _100ms_
2d1a8     EF 02 A0 FD |                 call    #poll_waitx
2d1ac                 | 
2d1ac     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
2d1b0     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
2d1b4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2d1b8     A0 02 A0 FD |                 call    #control_write
2d1bc                 | 
2d1bc     02 76 07 F6 |                 mov     htmp3, #2
2d1c0                 | .wait_reset
2d1c0     AC 99 02 F6 |                 mov     hctwait, _8ms_
2d1c4     EF 02 A0 FD |                 call    #poll_waitx
2d1c8     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2d1cc     27 EF 03 F6 |                 mov     pb, urx_buff_p
2d1d0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2d1d4     55 02 A0 FD |                 call    #control_read
2d1d8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
2d1dc     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
2d1e0     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
2d1e4                 | 
2d1e4     10 02 D0 FE |                 loc     ptra, #clr_port_feat
2d1e8     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
2d1ec     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2d1f0     A0 02 A0 FD |                 call    #control_write
2d1f4                 | 
2d1f4     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
2d1f8                 | .wait_recover
2d1f8     A7 99 02 F6 |                 mov     hctwait, _1ms_
2d1fc     EF 02 A0 FD |                 call    #poll_waitx
2d200     FD 71 6F FB |                 djnz    htmp,#.wait_recover
2d204                 | 
2d204     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
2d208     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
2d20c     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
2d210                 | 
2d210     00 08 00 FF 
2d214     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
2d218     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
2d21c     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
2d220     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
2d224     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
2d228     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2d22c     48 01 90 5D |         if_nz   jmp     #.done
2d230                 | .get_dev_desc
2d230     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
2d234     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
2d238     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
2d23c     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
2d240     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
2d244     01 71 57 FC |                 wrword  htmp, ptra[wValue]
2d248     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
2d24c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2d250     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2d254     AC 99 02 F6 |                 mov     hctwait, _8ms_
2d258     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
2d25c     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
2d260     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
2d264     BE 00 A0 FD |                 call    #calc_crc5
2d268     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
2d26c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
2d270     F7 AD C2 FA |                 rdbyte  total_data, pb
2d274     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
2d278     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
2d27c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2d280     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
2d284     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
2d288     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
2d28c                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
2d28c     9F 99 02 F6 |                 mov     hctwait, _500us_
2d290     EF 02 A0 FD |                 call    #poll_waitx
2d294     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
2d298     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
2d29c     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
2d2a0     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
2d2a4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
2d2a8     CC 00 90 5D |         if_nz   jmp     #.done
2d2ac     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
2d2b0     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
2d2b4     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
2d2b8     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
2d2bc     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
2d2c0     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
2d2c4     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
2d2c8     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
2d2cc     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
2d2d0     A4 00 90 CD |         if_b    jmp     #.done
2d2d4     6C F0 BF FD |                 call    #hparse_con_desc
2d2d8     9C 00 90 FD |                 jmp     #.done
2d2dc                 | 
2d2dc                 | .other
2d2dc     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
2d2e0     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
2d2e4     28 00 90 AD |         if_x1   jmp     #.reset_feature
2d2e8     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
2d2ec     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
2d2f0     1C 00 90 AD |         if_x1   jmp     #.reset_feature
2d2f4     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
2d2f8     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
2d2fc     10 00 90 AD |         if_x1   jmp     #.reset_feature
2d300     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
2d304     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
2d308     04 00 90 AD |         if_x1   jmp     #.reset_feature
2d30c     68 00 90 FD |                 jmp     #.done
2d310                 | .reset_feature
2d310     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
2d314     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2d318     A0 02 A0 FD |                 call    #control_write
2d31c     58 00 90 FD |                 jmp     #.done
2d320                 | .disconnect
2d320                 | 
2d320     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
2d324     00 70 E3 F8 |                 getbyte htmp
2d328     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
2d32c     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
2d330     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
2d334     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
2d338     00 76 06 A6 |         if_z    mov     kb_led_states, #0
2d33c     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
2d340                 |         if EMUPAD_MAX_PLAYER > 0
2d340                 |         end
2d340                 |         if HAVE_MOUSE
2d340     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
2d344     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
2d348     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
2d34c                 |         end
2d34c                 |         if HAVE_HIDPAD
2d34c     14 0A F0 FE |                 loc ptrb,#hidpad_report
2d350     2D 71 03 F6 |                 mov htmp,hdev_port
2d354     01 70 E7 F2 |                 cmpsub htmp,#1
2d358     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
2d35c     B8 F3 03 F1 |                 add ptrb,htmp
2d360     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
2d364     80 01 6C FC |                 wrlong #0,ptrb
2d368                 |         end
2d368                 | 
2d368     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
2d36c     00 00 C4 F8 |                 setbyte #0
2d370     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
2d374     00 00 04 F6 |                 mov     0-0, #0
2d378                 | 
2d378                 | .done
2d378     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
2d37c     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
2d380     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
2d384     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
2d388     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
2d38c     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
2d390                 | 
2d390     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
2d394     27 EF 03 F6 |                 mov     pb, urx_buff_p
2d398     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
2d39c     55 02 A0 FD |                 call    #control_read
2d3a0     00 69 06 FB |                 rdlong  hub_port_status, ptra
2d3a4                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
2d3a4     2D 00 64 FD |                 ret
2d3a8                 | 
2d3a8                 | '------------------------------------------------------------------------------
2d3a8                 | ' Partially populated SETUP packets
2d3a8                 | '------------------------------------------------------------------------------
2d3a8     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2d3a9     06          |                 byte    REQ_GET_DESC
2d3aa     00 01       |                 word    TYPE_DEVICE << 8
2d3ac     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2d3ae     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2d3b0     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
2d3b1     06          |                 byte    REQ_GET_DESC
2d3b2     00 02       |                 word    TYPE_CONFIG << 8
2d3b4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2d3b6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2d3b8     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2d3b9     09          |                 byte    REQ_SET_CONFIG
2d3ba     00 00       |                 word    0       ' Configuration value
2d3bc     00 00       |                 word    0       ' Zero
2d3be     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
2d3c0     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
2d3c1     05          |                 byte    REQ_SET_ADDR
2d3c2     00 00       |                 word    0       ' Zero
2d3c4     00 00       |                 word    0       ' Zero
2d3c6     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
2d3c8                 | '------------------------------------------------------------------------------
2d3c8                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
2d3c8                 | ' wValue field dictates which protocol should be used.
2d3c8                 | '
2d3c8                 | ' When initialized, all devices default to report protocol. However the host
2d3c8                 | ' should not make any assumptions about the device state and should set the
2d3c8                 | ' desired protocol whenever initializing a device.
2d3c8                 | '------------------------------------------------------------------------------
2d3c8     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2d3c9     0B          |                 byte    HID_SET_PROTO
2d3ca     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
2d3cc                 |                                                 ' (HID 1.11 Section 7.2.6).
2d3cc     00 00       |                 word    0               ' Interface index number.
2d3ce     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
2d3d0                 | '------------------------------------------------------------------------------
2d3d0     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2d3d1     0A          |                 byte    HID_SET_IDLE
2d3d2     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
2d3d4                 |                                         ' reporting until a change is detected in the report data
2d3d4                 | 
2d3d4                 |                                         ' (HID 1.11 Section 7.2.4).
2d3d4     00 00       |                 word    0       ' Interface index number.
2d3d6     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
2d3d8     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
2d3d9     09          |                 byte    HID_SET_REPORT
2d3da     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
2d3dc                 |                                         ' (HID 1.11 Section 7.2.2).
2d3dc     00 00       |                 word    0       ' Interface index number.
2d3de     00 00       |                 word    0       ' Size of the report, in bytes.
2d3e0     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
2d3e1     06          |                 byte    REQ_GET_DESC
2d3e2     00 22       |                 word    TYPE_REPORT << 8
2d3e4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2d3e6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2d3e8                 | '------------------------------------------------------------------------------
2d3e8     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
2d3e9     06          |                 byte    REQ_GET_DESC
2d3ea     00 29       |                 word    TYPE_HUB << 8
2d3ec     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
2d3ee     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2d3f0     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2d3f1     03          |                 byte    REQ_SET_FEATURE
2d3f2     00 00       |                 word    0       ' port power
2d3f4     01 00       |                 word    1       ' Port index number (1+)
2d3f6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2d3f8     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
2d3f9     01          |                 byte    REQ_CLEAR_FEATURE
2d3fa     00 00       |                 word    0       ' port power
2d3fc     01 00       |                 word    1       ' Port index number (1+)
2d3fe     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
2d400     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
2d401     00          |                 byte    REQ_GET_STATUS
2d402     00 00       |                 word    0
2d404     01 00       |                 word    1       ' Port index number (1+)
2d406     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
2d408                 | '------------------------------------------------------------------------------
2d408                 | if _HAVE_GAMEPAD
2d408     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
2d40c                 | ps3_command_buff
2d40c     00 00 00 00 
2d410     00          |                 byte    $00, $00, $00, $00, $00
2d411     00 00 00 00 
2d415     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
2d416     FF 27 10 00 
2d41a     32          |                 byte    $FF, $27, $10, $00, $32
2d41b     FF 27 10 00 
2d41f     32          |                 byte    $FF, $27, $10, $00, $32
2d420     FF 27 10 00 
2d424     32          |                 byte    $FF, $27, $10, $00, $32
2d425     FF 27 10 00 
2d429     32          |                 byte    $FF, $27, $10, $00, $32
2d42a     00 00 00 00 
2d42e     00          |                 byte    $00, $00, $00, $00, $00
2d42f     00 00 00 00 
2d433     00          |                 byte    $00, $00, $00, $00, $00
2d434     00 00 00 00 
2d438     00          |                 byte    $00, $00, $00, $00, $00
2d439     00 00 00    |                 byte    $00, $00, $00
2d43c                 | '------------------------------------------------------------------------------
2d43c     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
2d43f                 |                                         ' 0x01 All blinking
2d43f                 |                                         ' 0x02 1 flashes, then on
2d43f                 |                                         ' 0x03 2 flashes, then on
2d43f                 |                                         ' 0x04 3 flashes, then on
2d43f                 |                                         ' 0x05 4 flashes, then on
2d43f                 |                                         ' 0x06 1 on
2d43f                 |                                         ' 0x07 2 on
2d43f                 |                                         ' 0x08 3 on
2d43f                 |                                         ' 0x09 4 on
2d43f                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
2d43f                 |                                         ' 0x0B Blinking*
2d43f                 |                                         ' 0x0C Slow blinking*
2d43f                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
2d43f     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
2d442     00          |                 byte    $00             ' Left rumble
2d443     00          |                 byte    $00             ' Right rumble
2d444     00 00 00    |                 byte    $00, $00, $00
2d447     00          | end
2d448                 | alignl
2d448                 | 
2d448                 | if HAVE_MOUSE
2d448     00 00 00 00 
2d44c     00 00 00 00 | mouse_limits long 0[2]
2d450     00 00 00 00 | mouse_outptr long 0
2d454                 | end
2d454                 | 
2d454                 | if KEYQUEUE_SIZE > 0
2d454     00          | keyq_head byte 0
2d455     00          | keyq_tail byte 0
2d456     00 00 00 00 
      ...             
2d652     00 00 00 00 
2d656     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
2d658                 | alignl
2d658                 | end
2d658                 | 
2d658                 | if EMUPAD_MAX_PLAYER > 0
2d658                 | emupad_rule_buffer
2d658                 | if EMUPAD_BUILTIN_RULES
2d658                 | file "padmap_builtin.dat"
2d658                 | end
2d658                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
2d658                 | '' Default rule directly follows!
2d658                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
2d658                 | end
2d658                 | 
2d658                 | '------------------------------------------------------------------------------
2d658                 | ' The USB data cache area gets zero-filled at every device disconnect
2d658                 | '------------------------------------------------------------------------------
2d658                 | usb_cache_start
2d658                 | 
2d658                 | ' HID descriptor and report buffers
2d658                 | if !!OVERLAP_MEMORY
2d658     00 00 00 00 
      ...             
2dd50     00 00 00 00 
2dd54     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
2dd58                 | end
2dd58     00 00 00 00 
2dd5c     00 00 00 00 | hkbd_report     byte    0[8]
2dd60     00 00 00 00 | hkbd_led_rep    byte    0
2dd64                 | alignl
2dd64                 | 
2dd64                 | if HAVE_HIDPAD
2dd64     00 00 00 00 
      ...             
2de20     00 00 00 00 
2de24     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
2de28                 | end
2de28                 | 
2de28                 | ' HUB descriptor
2de28     00          | hub_descr       byte    0   ' bDescLength
2de29     00          |                 byte    0   ' bDescriptorType
2de2a     00          |                 byte    0   ' bNbrPorts
2de2b     00 00       |                 word    0   ' wHubCharacteristics
2de2d     00          |                 byte    0   ' bPwrOn2PwrGood
2de2e     00          |                 byte    0   ' bHubContrCurrent
2de2f     00          |                 byte    0   ' DeviceRemoveable
2de30     00          |                 byte    0   ' PortPwrCtrlMask
2de31                 | 
2de31                 | usb_cache_end
2de31                 | 
2de31                 | if HAVE_MOUSE
2de31     00 00 00 00 | mouse_xacc      long 0
2de35     00 00 00 00 | mouse_yacc      long 0
2de39     00 00 00 00 | mouse_zacc      long 0
2de3d     00          | mouse_bstate    byte 0
2de3e     00          | mouse_lpending  byte 0
2de3f     00          | mouse_rpending  byte 0
2de40     00          | mouse_mpending  byte 0
2de41     00          | mouse_lock      byte 0
2de42     00 00 00    |                 byte 0[3] ' padding
2de45                 | end
2de45                 | 
2de45     00 00 00 00 
      ...             
2debd     00 00 00 00 
2dec1     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
2dec5     00 00 00 00 
2dec9     00 00 00 00 
2decd     00 00 00 00 
2ded1     00 00 00 00 
2ded5     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
2ded7     00 00 00 00 
      ...             
2dfcf     00 00 00 00 
2dfd3     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
2dfd7                 | 
2dfd7     00          | driver_cog      byte    0                       ' Current driver cog + 1
2dfd8                 | 	alignl
2dfd8                 | _Audio093b_8_sc_spin2_dat_
2dfd8                 | 
2dfd8                 | audio       org     0
2dfd8                 | 
2dfd8     61 85 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
2dfdc     61 C3 05 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
2dfe0     61 CF 05 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
2dfe4                 | 
2dfe4     01 EC 63 FD |             cogid   pa                   ' compute cogid
2dfe8     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
2dfec     F6 85 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
2dff0     C2 82 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
2dff4                 | 
2dff4     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
2dff8     0E CA 05 FC |             wrpin   dac,#left            ' Noise dither DACs at clk/100
2dffc     0E BE 1C FC |             wxpin   #95,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
2e000     0F CA 05 FC |             wrpin   dac,#right
2e004     0F BE 1C FC |             wxpin   #95,#right    
2e008     41 9C 64 FD |             dirh    #left addpins 1
2e00c     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
2e010     A9 E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
2e014     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
2e018                 |             
2e018                 | '---------------------------------------------------------------------------------        
2e018                 | '----------------- The main loop -------------------------------------------------
2e018                 | '---------------------------------------------------------------------------------
2e018                 | 
2e018     B2 66 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
2e01c     10 00 90 CD |       if_c  jmp     #loop1
2e020                 |   
2e020     09 A8 05 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
2e024     B2 A8 8D F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
2e028     B1 00 80 F1 |             sub     0-0,a40000000
2e02c     FD A9 6D FB |             djnz    cn,#p402
2e030                 |     
2e030     00 A8 05 F6 | loop1       mov     cn,#0               ' Find the channel to compute
2e034     B4 AA 01 F6 |             mov     ct,time1            ' with the lowest next sample time
2e038     B5 AA 39 F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
2e03c     01 A8 05 C6 |     if_c    mov     cn,#1
2e040     B6 AA 39 F3 |             fle     ct,time3 wcz
2e044     02 A8 05 C6 |     if_c    mov     cn,#2     
2e048     B7 AA 39 F3 |             fle     ct,time4 wcz
2e04c     03 A8 05 C6 |     if_c    mov     cn,#3
2e050     B8 AA 39 F3 |             fle     ct,time5 wcz
2e054     04 A8 05 C6 |     if_c    mov     cn,#4
2e058     B9 AA 39 F3 |             fle     ct,time6 wcz
2e05c     05 A8 05 C6 |     if_c    mov     cn,#5
2e060     BA AA 39 F3 |             fle     ct,time7 wcz
2e064     06 A8 05 C6 |     if_c    mov     cn,#6
2e068     BB AA 39 F3 |             fle     ct,time8 wcz
2e06c     07 A8 05 C6 |     if_c    mov     cn,#7
2e070                 | 
2e070                 | 
2e070                 | '----------------------------------------------------------------------------------
2e070                 | '------------- Compute channel samples --------------------------------------------
2e070                 | '----------------------------------------------------------------------------------
2e070                 | 
2e070                 | 
2e070     D4 78 01 F6 | p401        mov     channeladd,cn             ' compute the pointer to channel parameters block
2e074     05 78 65 F0 |             shl     channeladd,#5
2e078     BC F0 03 F1 |             add     ptra,channeladd
2e07c                 | 
2e07c     28 0E 64 FD |             setq    #7                        ' read parameters
2e080     00 8F 05 FB |             rdlong  pointer0,ptra
2e084                 | '            testb   command0,#29 wz
2e084                 | '    if_nz   jmp     #p408
2e084                 | '    	    getword envptr,command0,#0
2e084                 | '    	    getbyte envspeed,command0,#2
2e084                 | '    	    jmp     #p404                     'if envelope then no sample rate
2e084                 |     	    
2e084     1F 9C 0D F4 | p408        testb   command0,#31 wz	      ' bit #31 command - set the DAC sample rate
2e088     18 00 90 5D |     if_nz   jmp     #p404                     ' if not set, proceed
2e08c     CE 7C 31 F9 |             getword qq,command0,#0            ' get the new rate
2e090     4E 7C 15 FC |             wxpin   qq,#left addpins 1        ' and program the pins
2e094     BE 7C E1 F8 |             getbyte qq,qq,#0 		      ' check if the rate is n*256
2e098     00 7C 0D F2 |             cmp     qq,#0 wz                         
2e09c     4E CC 05 AC |     if_z    wrpin   dac2,#left addpins 1      ' if yes, set PWM DAC mode
2e0a0     4E CA 05 5C |     if_nz   wrpin   dac,#left addpins 1       ' else set noise DAC mode
2e0a4                 |             
2e0a4     1E 9C 1D F4 | p404        bitl    command0,#30 wcz             ' bit #30: select PSRAM/HUB
2e0a8     C2 82 01 56 |     if_nz   mov     mailbox,mailbox2             ' if not set, use PSRAM
2e0ac     00 82 05 A6 |     if_z    mov     mailbox,#0                   ' if set, use HUB : TODO: this can be done at a channel level!
2e0b0                 | 
2e0b0                 | 
2e0b0     C8 AE 31 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
2e0b4     C8 B0 39 F9 |             getword oldrs,sample0,#1
2e0b8     CC A4 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
2e0bc     CC A2 31 F9 |     	    getword avol0,volpan0,#0
2e0c0     CD A0 39 F9 |             getword askip0,freqskip0,#1    	    
2e0c4     CD 9E 31 F9 |             getword afreq0,freqskip0,#0
2e0c8                 | 
2e0c8     B4 A8 95 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
2e0cc     00 AC 01 F6 |             mov     dt0,0-0    
2e0d0     B3 AC 81 F1 |             sub     dt0,time0
2e0d4                 |             
2e0d4     B4 A8 8D F9 |             altd    cn, #time1                ' add channel period to channel time
2e0d8     CF 00 00 F1 |             add     0-0,afreq0  	
2e0dc                 | 
2e0dc     D0 8E 01 F1 |             add     pointer0,askip0           ' compute the pointer to the next sample       
2e0e0     C7 EA C1 F8 |             setbyte pointer00,pointer0,#0
2e0e4     08 8E 45 F0 |             shr     pointer0,#8
2e0e8                 |          
2e0e8     1F 92 0D F4 |             testb   sstart0,#31 wz            
2e0ec     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2e0f0     1C 92 0D F4 |             testb   sstart0,#28 wz            
2e0f4     01 8E 65 A0 |     if_z    shl     pointer0,#1        
2e0f8                 |             
2e0f8     CB 8E 19 F2 |             cmp     pointer0,lend0 wcz
2e0fc     CB 8E 81 31 |     if_ge   sub     pointer0,lend0	      ' and loop if needed     
2e100     CA 8E 01 31 |     if_ge   add     pointer0,lstart0       
2e104                 |             
2e104     C7 7C 01 F6 |             mov     qq,pointer0               ' compute place in the memory from where the sample will be loaded
2e108     C9 7C 01 F1 |             add     qq,sstart0            
2e10c                 | 
2e10c                 | 
2e10c                 | 
2e10c     FF 83 5D F2 |             cmps    mailbox,#$1FF wcz            ' the mailbox has to point somewhere not at the start of HUB RAM
2e110     BE 7E E1 EA |     if_le   rdword  spl,qq                     ' if not, use HUB RAM for samples
2e114     04 01 B0 1D |     if_gt   call    #cache_read
2e118                 |          
2e118                 |          
2e118                 |  
2e118                 |          
2e118     1F 92 0D F4 |             testb   sstart0,#31 wz 
2e11c     08 7E 65 50 |     if_nz   shl     spl,#8
2e120     08 8E 65 50 |     if_nz   shl     pointer0,#8
2e124     07 8E 65 A0 |     if_z    shl     pointer0,#7
2e128     1C 92 0D F4 |             testb   sstart0,#28 wz            
2e12c     01 8E 45 A0 |     if_z    shr     pointer0,#1    
2e130     F5 8E C1 F8 | 	    setbyte pointer0,pointer00,#0       
2e134                 |     
2e134                 | 
2e134     D1 7E 31 FA | p406        scas    spl,avol0                 ' apply volume
2e138     00 7E 01 F6 |             mov     spl,0-0
2e13c                 |  
2e13c     D2 7E 31 FA |             scas    spl,apan0                 ' apply pan
2e140     00 B2 01 F6 |             mov     ls0,0-0
2e144     20 00 00 FF 
2e148     00 7C 05 F6 |             mov     qq,##16384
2e14c     D2 7C 81 F1 |             sub     qq,apan0
2e150     BE 7E 31 FA |             scas    spl,qq
2e154     00 B4 01 F6 |             mov     rs0, 0-0
2e158                 | 
2e158     D8 B8 81 F1 |             sub     rs,oldrs 		      ' replace the old sample with the new one in the mix
2e15c     DA B8 01 F1 |             add     rs,rs0
2e160     D7 B6 81 F1 |             sub     ls,oldls
2e164     D9 B6 01 F1 |             add     ls,ls0
2e168                 |    
2e168     DA 90 29 F9 |             setword sample0,rs0,#1           ' pack samples into long
2e16c     D9 90 21 F9 |             setword sample0,ls0,#0
2e170                 |             
2e170     1E 92 1D F4 |             bitl    sstart0, #30 wcz          ' if bit #30 of start pointer is set, the current pointer needs resetting  
2e174     00 8E 05 A6 |     if_z    mov     pointer0, #0  
2e178     02 93 65 AC |     if_z    wrlong  sstart0, ptra[2]          ' reset bit #30 in hub
2e17c     1D 92 1D F4 |             bitl    sstart0, #29 wcz	      ' if bit #29 is set, synchronize stereo at channels 1 and 2
2e180     04 00 00 AF 
2e184     00 68 05 A1 |     if_z    add     time1,##2048
2e188     B4 6A 01 A6 |     if_z    mov     time2,time1
2e18c     02 93 65 AC |     if_z    wrlong  sstart0,ptra[2]
2e190                 |             
2e190     28 02 64 FD | p403        setq #1                          ' write new pointer and sample value to the hub
2e194     00 8F 65 FC |             wrlong  pointer0,ptra
2e198     BC F0 83 F1 |             sub     ptra, channeladd         ' reset the pointer to channel parameters
2e19c                 |                       
2e19c     B3 A6 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
2e1a0     FF 7B 25 A7 |     if_z    decmod  front, #511          
2e1a4                 |          
2e1a4     DB AE 31 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
2e1a8     DC B0 31 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
2e1ac     0F AE E5 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
2e1b0     0F B0 E5 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
2e1b4                 | 	    
2e1b4                 | 		    
2e1b4     D7 B0 29 F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
2e1b8     DE BA 01 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
2e1bc     D8 BC 01 F6 |             mov     newsample, oldrs       
2e1c0                 | 
2e1c0     B3 A6 01 F6 |             mov     oldt0,time0              ' update global time
2e1c4     D6 66 01 F1 |             add     time0,dt0    
2e1c8                 |                                      
2e1c8     00 AC 0D F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
2e1cc     60 FE 9F AD |     if_z    jmp     #loop1
2e1d0     D6 7C 01 F6 |             mov     qq,dt0
2e1d4                 |   
2e1d4     FF F3 97 F9 | p301        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
2e1d8     00 7A 9D F2 |             cmpr    front, #0-0 wcz
2e1dc     F4 FF 9F AD |     if_e    jmp     #p301    
2e1e0                 | 		
2e1e0     00 C2 0D F2 | 	    cmp     scbase,#0 wz
2e1e4     20 00 90 AD |     if_z    jmp #p302	   
2e1e8                 |  
2e1e8                 |  
2e1e8     3F C8 15 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
2e1ec     E2 C6 01 C6 |     if_c    mov scptr2,scptr
2e1f0     02 C6 65 C0 |     if_c    shl scptr2,#2
2e1f4     E1 C6 01 C1 |     if_c    add scptr2,scbase     
2e1f8     60 C6 65 FC |             wrlong scptr2,#$60
2e1fc     E3 BA 61 CC |     if_c    wrlong oldsample,scptr2
2e200     01 00 00 CF 
2e204     7F C4 05 C7 |     if_c    incmod scptr,##639
2e208                 | 			    
2e208     BD BA 31 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
2e20c     00 00 00 FF 
2e210     FF 7B 05 F7 |             incmod  front, ##511
2e214     EF 7D 6D FB |             djnz    qq,#p301
2e218                 |             
2e218     FC FD 9F FD |             jmp     #loop            'loop
2e21c                 | 
2e21c                 | '----------------------------------------------------------------------------------
2e21c                 | '------------- This is the end of the main loop -----------------------------------
2e21c                 | '----------------------------------------------------------------------------------
2e21c                 | 
2e21c                 | '----------------------------------------------------------------------------------
2e21c                 | '------------- PSRAM cache ----------- --------------------------------------------
2e21c                 | '----------------------------------------------------------------------------------
2e21c                 | 
2e21c                 | ' There are 8 cache pointers for 8 channels
2e21c                 | ' if 24 higher bits of address=cache, then ger a word from the cache
2e21c                 | ' else load the cache from PSRAM, update the pointer, then read a sample
2e21c                 | 
2e21c                 | 
2e21c     BE E6 E1 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
2e220                 |             
2e220     BE E8 01 F6 | 	    mov     addrhi,qq		
2e224     08 E8 45 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
2e228     E8 A8 95 F9 | 	    alts    cn,#cache1            
2e22c     00 E8 09 F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
2e230     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
2e234                 | 	
2e234     E8 A8 8D F9 | p702	    altd    cn,#cache1			' cache miss. 
2e238     F4 00 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
2e23c     F4 E0 01 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
2e240     08 E0 65 F0 | 	    shl     cmd,#8
2e244     0B E0 3D F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
2e248     D4 E2 01 F6 |             mov     hubaddr,cn                  ' to the channel cache
2e24c     08 E2 65 F0 |             shl     hubaddr,#8                  '
2e250     E7 E2 01 F1 |             add     hubaddr,hubptr 
2e254     00 E5 05 F6 |             mov     count,#256                  ' 256 bytes
2e258     28 04 64 FD |             setq    #2                          ' write 3 longs
2e25c     C1 E0 61 FC |             wrlong  cmd, mailbox                ' run it
2e260     C1 E0 01 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
2e264     FE E1 B5 FB |             tjs     cmd, #poll1                 ' retry until valid 
2e268                 |             
2e268                 | 	
2e268     D4 7C 01 F6 | p701	    mov     qq,cn			' cache hit
2e26c     08 7C 65 F0 | 	    shl     qq,#8			' compute the cache start
2e270     E7 7C 01 F1 | 	    add     qq,hubptr
2e274     F3 7C 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
2e278     BE 7E E1 0A |     _ret_   rdword  spl,qq                      ' read a word
2e27c                 |           
2e27c                 | 
2e27c                 | '--------------------------------------------------------------------------
2e27c                 | '------ Interrupt service -------------------------------------------------
2e27c                 | '------ Output the sample, get the next one if exists ---------------------
2e27c                 | '--------------------------------------------------------------------------
2e27c                 | 
2e27c     0E 86 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 100 cycles     
2e280     0F 88 25 FC |             wypin   rsample,#right       '4
2e284     BD F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
2e288     80 8B A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
2e28c     FF F3 07 57 |     if_ne   incmod  ptrb,#511
2e290     C5 88 39 59 |     if_ne   getword rsample,lsnext,#1    '13
2e294     C5 86 31 59 |     if_ne   getword lsample,lsnext,#0    '15
2e298                 |     
2e298     F5 FF 3B FB |             reti1                        '17/19 
2e29c                 |           
2e29c                 | '---------------------------------------------------------------------------
2e29c                 | '-------- End of interrupt -------------------------------------------------
2e29c                 | '---------------------------------------------------------------------------    
2e29c                 | 
2e29c                 | 
2e29c                 | '---------------------------------------------------------------------------
2e29c                 | '------- Variables ---------------------------------------------------------
2e29c                 | '---------------------------------------------------------------------------
2e29c                 | 
2e29c                 | ' constants
2e29c                 | 
2e29c     00 00 00 40 | a40000000   long $40000000
2e2a0     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
2e2a4                 | 
2e2a4                 | ' Time variables
2e2a4                 | 
2e2a4     00 00 00 00 | time0       long 0    ' Global sample computing time
2e2a8     01 00 00 00 | time1       long 1    ' Local channels time
2e2ac     02 00 00 00 | time2       long 2
2e2b0     03 00 00 00 | time3       long 3
2e2b4     04 00 00 00 | time4       long 4
2e2b8     05 00 00 00 | time5       long 5
2e2bc     06 00 00 00 | time6       long 6
2e2c0     07 00 00 00 | time7       long 7
2e2c4     08 00 00 00 | time8       long 8
2e2c8                 | 
2e2c8     00 00 00 00 | channeladd long 0
2e2cc                 | 
2e2cc     00 00 00 00 | front       long 0
2e2d0                 | 
2e2d0                 | ' temporary variables 
2e2d0     00 00 00 00 | qq          long 0
2e2d4     00 00 00 00 | spl         long 0
2e2d8     00 00 00 00 | zero        long 0
2e2dc     00 00 00 00 | mailbox     long 0
2e2e0     00 00 00 00 | mailbox2 long 0
2e2e4                 | 
2e2e4                 | ' Interrupt ISR variables
2e2e4                 | 
2e2e4     00 00 00 00 | lsample     long 0
2e2e8     00 00 00 00 | rsample     long 0
2e2ec     00 00 00 00 | lsnext      long 0
2e2f0     00 00 00 00 | rsnext      long 0 
2e2f4                 | 
2e2f4                 | ' channel parameter block
2e2f4                 | 
2e2f4     00 00 00 00 | pointer0    long 0     
2e2f8     00 00 00 00 | sample0     long 0
2e2fc     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
2e300     00 00 00 00 | lstart0     long 0
2e304     00 00 00 00 | lend0       long 0
2e308     00 00 00 00 | volpan0     long 0
2e30c     00 00 00 00 | freqskip0   long 0
2e310     00 00 00 00 | command0    long 0
2e314                 | 
2e314     00 00 00 00 | afreq0      long 0
2e318     00 00 00 00 | askip0      long 0
2e31c     00 00 00 00 | avol0       long 0
2e320     00 00 00 00 | apan0       long 0
2e324                 | 
2e324     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
2e328     00 00 00 00 | cn          long 0
2e32c     00 00 00 00 | ct          long 0
2e330     00 00 00 00 | dt0         long 0
2e334                 | 
2e334                 | ' Samples
2e334     00 00 00 00 | oldls       long 0
2e338     00 00 00 00 | oldrs       long 0
2e33c                 | 
2e33c     00 00 00 00 | ls0         long 0
2e340     00 00 00 00 | rs0         long 0
2e344                 | 
2e344     00 00 00 00 | ls          long 0    
2e348     00 00 00 00 | rs          long 0
2e34c                 | 
2e34c     00 00 00 00 | oldsample   long 0
2e350     00 00 00 00 | newsample   long 0
2e354                 | 
2e354     00 00 00 00 | nrsample    long 0
2e358     00 00 00 00 | nlsample    long 0
2e35c                 | 
2e35c     00 00 00 00 | scbase long 0
2e360     00 00 00 00 | scptr long 0
2e364     00 00 00 00 | scptr2 long 0
2e368     00 00 00 00 | scope long 0
2e36c                 | 
2e36c     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
2e370     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
2e374                 | 
2e374     00 18 07 00 | hubptr      long $71800
2e378     00 00 00 00 | cache1      long 0
2e37c     00 00 00 00 | cache2      long 0
2e380     00 00 00 00 | cache3      long 0
2e384     00 00 00 00 | cache4      long 0
2e388     00 00 00 00 | cache5      long 0
2e38c     00 00 00 00 | cache6      long 0
2e390     00 00 00 00 | cache7      long 0
2e394     00 00 00 00 | cache8      long 0
2e398                 | 
2e398                 | 
2e398     00 00 00 00 | cmd         long 0
2e39c     00 00 00 00 | hubaddr     long 0
2e3a0     00 01 00 00 | count       long 256
2e3a4     00 00 00 00 | addrlo long 0
2e3a8     00 00 00 00 | addrhi long 0
2e3ac     00 00 00 00 | pointer00 long 0
2e3b0     00 00 00 00 
2e3b4     00 00 00 00 | null  			long 	0,0           ' for channel reset
2e3b8                 | 	alignl
2e3b8                 | __system__dat_
2e3b8     00 00 00 00 
2e3bc     00 00 00 00 | 	byte	$00[8]
2e3c0     03 00 00 00 
2e3c4     00 00 00 00 
2e3c8     00 00 00 00 
2e3cc     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e3d0     00 00 00 00 
      ...             
2e65c     00 00 00 00 
2e660     00 00 00 00 | 	byte	$00[660]
2e664     00 00 D0 05 | 	long	(93 {__system____root_opendir})<<20
2e668     00 00 E0 05 | 	long	(94 {__system____root_closedir})<<20
2e66c     00 00 F0 05 | 	long	(95 {__system____root_readdir})<<20
2e670     00 00 00 06 | 	long	(96 {__system____root_stat})<<20
2e674     00 00 00 00 
2e678     00 00 00 00 
2e67c     00 00 00 00 
2e680     00 00 00 00 
2e684     00 00 00 00 
2e688     00 00 00 00 
2e68c     00 00 00 00 | 	byte	$00[28]
2e690     F8 E6 02 00 | 	long	@@@__system__dat_ + 832
2e694     FB E6 02 00 | 	long	@@@__system__dat_ + 835
2e698     1C E7 02 00 | 	long	@@@__system__dat_ + 868
2e69c     35 E7 02 00 | 	long	@@@__system__dat_ + 893
2e6a0     50 E7 02 00 | 	long	@@@__system__dat_ + 920
2e6a4     6A E7 02 00 | 	long	@@@__system__dat_ + 946
2e6a8     7A E7 02 00 | 	long	@@@__system__dat_ + 962
2e6ac     8C E7 02 00 | 	long	@@@__system__dat_ + 980
2e6b0     9E E7 02 00 | 	long	@@@__system__dat_ + 998
2e6b4     B0 E7 02 00 | 	long	@@@__system__dat_ + 1016
2e6b8     BC E7 02 00 | 	long	@@@__system__dat_ + 1028
2e6bc     CD E7 02 00 | 	long	@@@__system__dat_ + 1045
2e6c0     E1 E7 02 00 | 	long	@@@__system__dat_ + 1065
2e6c4     EB E7 02 00 | 	long	@@@__system__dat_ + 1075
2e6c8     FB E7 02 00 | 	long	@@@__system__dat_ + 1091
2e6cc     0A E8 02 00 | 	long	@@@__system__dat_ + 1106
2e6d0     20 E8 02 00 | 	long	@@@__system__dat_ + 1128
2e6d4     39 E8 02 00 | 	long	@@@__system__dat_ + 1153
2e6d8     4D E8 02 00 | 	long	@@@__system__dat_ + 1173
2e6dc     5B E8 02 00 | 	long	@@@__system__dat_ + 1187
2e6e0     6F E8 02 00 | 	long	@@@__system__dat_ + 1207
2e6e4     7B E8 02 00 | 	long	@@@__system__dat_ + 1219
2e6e8     8D E8 02 00 | 	long	@@@__system__dat_ + 1237
2e6ec     A5 E8 02 00 | 	long	@@@__system__dat_ + 1261
2e6f0     B7 E8 02 00 | 	long	@@@__system__dat_ + 1279
2e6f4     CA E8 02 00 | 	long	@@@__system__dat_ + 1298
2e6f8     4F 4B 00 4E 
2e6fc     75 6D 65 72 
2e700     69 63 61 6C 
2e704     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
2e708     75 6D 65 6E 
2e70c     74 20 6F 75 
2e710     74 20 6F 66 
2e714     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
2e718     61 69 6E 00 
2e71c     52 65 73 75 
2e720     6C 74 20 6E 
2e724     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
2e728     65 70 72 65 
2e72c     73 65 6E 74 
2e730     61 62 6C 65 
2e734     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
2e738     65 67 61 6C 
2e73c     20 6D 75 6C 
2e740     74 69 62 79 
2e744     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
2e748     65 71 75 65 
2e74c     6E 63 65 00 
2e750     4E 6F 20 73 
2e754     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
2e758     66 69 6C 65 
2e75c     20 6F 72 20 
2e760     64 69 72 65 
2e764     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2e768     79 00 42 61 
2e76c     64 20 66 69 
2e770     6C 65 20 6E 
2e774     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
2e778     72 00 50 65 
2e77c     72 6D 69 73 
2e780     73 69 6F 6E 
2e784     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
2e788     69 65 64 00 
2e78c     4E 6F 74 20 
2e790     65 6E 6F 75 
2e794     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
2e798     65 6D 6F 72 
2e79c     79 00 54 65 
2e7a0     6D 70 6F 72 
2e7a4     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
2e7a8     66 61 69 6C 
2e7ac     75 72 65 00 
2e7b0     46 69 6C 65 
2e7b4     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
2e7b8     73 74 73 00 
2e7bc     49 6E 76 61 
2e7c0     6C 69 64 20 
2e7c4     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
2e7c8     6D 65 6E 74 
2e7cc     00 54 6F 6F 
2e7d0     20 6D 61 6E 
2e7d4     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
2e7d8     65 6E 20 66 
2e7dc     69 6C 65 73 
2e7e0     00 49 2F 4F 
2e7e4     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
2e7e8     6F 72 00 4E 
2e7ec     6F 74 20 61 
2e7f0     20 64 69 72 
2e7f4     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
2e7f8     72 79 00 49 
2e7fc     73 20 61 20 
2e800     64 69 72 65 
2e804     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
2e808     79 00 52 65 
2e80c     61 64 20 6F 
2e810     6E 6C 79 20 
2e814     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
2e818     20 73 79 73 
2e81c     74 65 6D 00 
2e820     46 75 6E 63 
2e824     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
2e828     20 6E 6F 74 
2e82c     20 69 6D 70 
2e830     6C 65 6D 65 
2e834     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
2e838     00 44 69 72 
2e83c     65 63 74 6F 
2e840     72 79 20 6E 
2e844     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
2e848     6D 70 74 79 
2e84c     00 4E 61 6D 
2e850     65 20 74 6F 
2e854     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
2e858     6E 67 00 44 
2e85c     65 76 69 63 
2e860     65 20 6E 6F 
2e864     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
2e868     65 6B 61 62 
2e86c     6C 65 00 42 
2e870     61 64 20 61 
2e874     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
2e878     73 73 00 42 
2e87c     72 6F 6B 65 
2e880     6E 20 63 6F 
2e884     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
2e888     74 69 6F 6E 
2e88c     00 44 65 76 
2e890     69 63 65 20 
2e894     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
2e898     65 73 6F 75 
2e89c     72 63 65 20 
2e8a0     62 75 73 79 
2e8a4     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
2e8a8     73 73 20 64 
2e8ac     65 76 69 63 
2e8b0     65 20 6C 69 
2e8b4     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
2e8b8     6F 20 73 70 
2e8bc     61 63 65 20 
2e8c0     6F 6E 20 64 
2e8c4     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
2e8c8     65 00 55 6E 
2e8cc     6B 6E 6F 77 
2e8d0     6E 20 65 72 
2e8d4     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
2e8d8     00 00 00 00 
2e8dc     00 00 00 00 | 	byte	$00[8]
2e8e0     05 00 00 00 
2e8e4     00 00 00 00 
2e8e8     00 00 00 00 
2e8ec     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e8f0     00 00 00 00 | 	byte	$00, $00, $00, $00
2e8f4     00 00 50 07 | 	long	(117 {__system___tx})<<20
2e8f8     00 00 60 07 | 	long	(118 {__system___rx})<<20
2e8fc     00 00 00 00 | 	byte	$00, $00, $00, $00
2e900     00 00 70 07 | 	long	(119 {__system___rxtxioctl_0527})<<20
2e904     00 00 80 07 | 	long	(120 {__system____dummy_flush_0528})<<20
2e908     00 00 00 00 
2e90c     00 00 00 00 | 	byte	$00[8]
2e910     01 00 00 00 
2e914     06 00 00 00 
2e918     00 00 00 00 
2e91c     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e920     00 00 00 00 
2e924     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2e928     00 00 50 07 | 	long	(117 {__system___tx})<<20
2e92c     00 00 60 07 | 	long	(118 {__system___rx})<<20
2e930     00 00 00 00 | 	byte	$00, $00, $00, $00
2e934     00 00 70 07 | 	long	(119 {__system___rxtxioctl_0527})<<20
2e938     00 00 80 07 | 	long	(120 {__system____dummy_flush_0528})<<20
2e93c     00 00 00 00 
2e940     00 00 00 00 | 	byte	$00[8]
2e944     01 00 00 00 
2e948     06 00 00 00 
2e94c     00 00 00 00 
2e950     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2e954     00 00 00 00 
2e958     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2e95c     00 00 50 07 | 	long	(117 {__system___tx})<<20
2e960     00 00 60 07 | 	long	(118 {__system___rx})<<20
2e964     00 00 00 00 | 	byte	$00, $00, $00, $00
2e968     00 00 70 07 | 	long	(119 {__system___rxtxioctl_0527})<<20
2e96c     00 00 80 07 | 	long	(120 {__system____dummy_flush_0528})<<20
2e970     00 00 00 00 
      ...             
2eae0     00 00 00 00 
2eae4     00 00 00 00 | 	byte	$00[376]
2eae8     EC EA 02 00 | 	long	@@@__system__dat_ + 1844
2eaec     00 00 00 00 
2eaf0     00 00 00 00 
2eaf4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
2eaf8                 | 	alignl
2eaf8                 | _fatfs_cc_dat_
2eaf8     C7 00 FC 00 
2eafc     E9 00 E2 00 
2eb00     E4 00 E0 00 
2eb04     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
2eb08     EA 00 EB 00 
2eb0c     E8 00 EF 00 
2eb10     EE 00 EC 00 
2eb14     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
2eb18     C9 00 E6 00 
2eb1c     C6 00 F4 00 
2eb20     F6 00 F2 00 
2eb24     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
2eb28     FF 00 D6 00 
2eb2c     DC 00 F8 00 
2eb30     A3 00 D8 00 
2eb34     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
2eb38     E1 00 ED 00 
2eb3c     F3 00 FA 00 
2eb40     F1 00 D1 00 
2eb44     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
2eb48     BF 00 AE 00 
2eb4c     AC 00 BD 00 
2eb50     BC 00 A1 00 
2eb54     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
2eb58     91 25 92 25 
2eb5c     93 25 02 25 
2eb60     24 25 C1 00 
2eb64     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
2eb68     A9 00 63 25 
2eb6c     51 25 57 25 
2eb70     5D 25 A2 00 
2eb74     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
2eb78     14 25 34 25 
2eb7c     2C 25 1C 25 
2eb80     00 25 3C 25 
2eb84     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
2eb88     5A 25 54 25 
2eb8c     69 25 66 25 
2eb90     60 25 50 25 
2eb94     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
2eb98     F0 00 D0 00 
2eb9c     CA 00 CB 00 
2eba0     C8 00 31 01 
2eba4     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
2eba8     CF 00 18 25 
2ebac     0C 25 88 25 
2ebb0     84 25 A6 00 
2ebb4     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
2ebb8     D3 00 DF 00 
2ebbc     D4 00 D2 00 
2ebc0     F5 00 D5 00 
2ebc4     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
2ebc8     DE 00 DA 00 
2ebcc     DB 00 D9 00 
2ebd0     FD 00 DD 00 
2ebd4     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
2ebd8     AD 00 B1 00 
2ebdc     17 20 BE 00 
2ebe0     B6 00 A7 00 
2ebe4     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
2ebe8     B0 00 A8 00 
2ebec     B7 00 B9 00 
2ebf0     B3 00 B2 00 
2ebf4     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
2ebf8     61 00 1A 03 
2ebfc     E0 00 17 03 
2ec00     F8 00 07 03 
2ec04     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
2ec08     78 01 00 01 
2ec0c     30 01 32 01 
2ec10     06 01 39 01 
2ec14     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
2ec18     2E 01 79 01 
2ec1c     06 01 80 01 
2ec20     4D 00 43 02 
2ec24     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
2ec28     82 01 84 01 
2ec2c     84 01 86 01 
2ec30     87 01 87 01 
2ec34     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
2ec38     8B 01 8B 01 
2ec3c     8D 01 8E 01 
2ec40     8F 01 90 01 
2ec44     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
2ec48     93 01 94 01 
2ec4c     F6 01 96 01 
2ec50     97 01 98 01 
2ec54     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
2ec58     9B 01 9C 01 
2ec5c     9D 01 20 02 
2ec60     9F 01 A0 01 
2ec64     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
2ec68     A2 01 A4 01 
2ec6c     A4 01 A6 01 
2ec70     A7 01 A7 01 
2ec74     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
2ec78     AB 01 AC 01 
2ec7c     AC 01 AE 01 
2ec80     AF 01 AF 01 
2ec84     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
2ec88     B3 01 B3 01 
2ec8c     B5 01 B5 01 
2ec90     B7 01 B8 01 
2ec94     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
2ec98     BB 01 BC 01 
2ec9c     BC 01 BE 01 
2eca0     F7 01 C0 01 
2eca4     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
2eca8     C3 01 C4 01 
2ecac     C5 01 C4 01 
2ecb0     C7 01 C8 01 
2ecb4     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
2ecb8     CB 01 CA 01 
2ecbc     CD 01 10 01 
2ecc0     DD 01 01 00 
2ecc4     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
2ecc8     12 01 F3 01 
2eccc     03 00 F1 01 
2ecd0     F4 01 F4 01 
2ecd4     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
2ecd8     22 02 12 01 
2ecdc     3A 02 09 00 
2ece0     65 2C 3B 02 
2ece4     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
2ece8     66 2C 3F 02 
2ecec     40 02 41 02 
2ecf0     41 02 46 02 
2ecf4     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
2ecf8     40 00 81 01 
2ecfc     86 01 55 02 
2ed00     89 01 8A 01 
2ed04     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
2ed08     5A 02 90 01 
2ed0c     5C 02 5D 02 
2ed10     5E 02 5F 02 
2ed14     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
2ed18     62 02 94 01 
2ed1c     64 02 65 02 
2ed20     66 02 67 02 
2ed24     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
2ed28     6A 02 62 2C 
2ed2c     6C 02 6D 02 
2ed30     6E 02 9C 01 
2ed34     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
2ed38     9D 01 73 02 
2ed3c     74 02 9F 01 
2ed40     76 02 77 02 
2ed44     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
2ed48     7A 02 7B 02 
2ed4c     7C 02 64 2C 
2ed50     7E 02 7F 02 
2ed54     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
2ed58     82 02 A9 01 
2ed5c     84 02 85 02 
2ed60     86 02 87 02 
2ed64     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
2ed68     B1 01 B2 01 
2ed6c     45 02 8D 02 
2ed70     8E 02 8F 02 
2ed74     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
2ed78     B7 01 7B 03 
2ed7c     03 00 FD 03 
2ed80     FE 03 FF 03 
2ed84     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
2ed88     86 03 88 03 
2ed8c     89 03 8A 03 
2ed90     B1 03 11 03 
2ed94     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
2ed98     A3 03 A3 03 
2ed9c     C4 03 08 03 
2eda0     CC 03 03 00 
2eda4     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
2eda8     8F 03 D8 03 
2edac     18 01 F2 03 
2edb0     0A 00 F9 03 
2edb4     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
2edb8     F5 03 F6 03 
2edbc     F7 03 F7 03 
2edc0     F9 03 FA 03 
2edc4     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
2edc8     20 03 50 04 
2edcc     10 07 60 04 
2edd0     22 01 8A 04 
2edd4     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
2edd8     0E 01 CF 04 
2eddc     01 00 C0 04 
2ede0     D0 04 44 01 
2ede4     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
2ede8     00 00 7D 1D 
2edec     01 00 63 2C 
2edf0     00 1E 96 01 
2edf4     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
2edf8     00 1F 08 06 
2edfc     10 1F 06 06 
2ee00     20 1F 08 06 
2ee04     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
2ee08     40 1F 06 06 
2ee0c     51 1F 07 00 
2ee10     59 1F 52 1F 
2ee14     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
2ee18     5D 1F 56 1F 
2ee1c     5F 1F 60 1F 
2ee20     08 06 70 1F 
2ee24     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
2ee28     BB 1F C8 1F 
2ee2c     C9 1F CA 1F 
2ee30     CB 1F DA 1F 
2ee34     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
2ee38     F9 1F EA 1F 
2ee3c     EB 1F FA 1F 
2ee40     FB 1F 80 1F 
2ee44     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
2ee48     08 06 A0 1F 
2ee4c     08 06 B0 1F 
2ee50     04 00 B8 1F 
2ee54     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
2ee58     BC 1F CC 1F 
2ee5c     01 00 C3 1F 
2ee60     D0 1F 02 06 
2ee64     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
2ee68     E5 1F 01 00 
2ee6c     EC 1F F3 1F 
2ee70     01 00 FC 1F 
2ee74     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
2ee78     32 21 70 21 
2ee7c     10 02 84 21 
2ee80     01 00 83 21 
2ee84     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
2ee88     30 2C 2F 04 
2ee8c     60 2C 02 01 
2ee90     67 2C 06 01 
2ee94     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
2ee98     80 2C 64 01 
2ee9c     00 2D 26 08 
2eea0     41 FF 1A 03 
2eea4     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
2eea8     05 07 09 0E 
2eeac     10 12 14 16 
2eeb0     18 1C 1E 43 
2eeb4     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
2eeb8     41 41 43 45 
2eebc     45 45 49 49 
2eec0     49 41 41 45 
2eec4     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
2eec8     4F 55 55 59 
2eecc     4F 55 4F 9C 
2eed0     4F 9E 9F 41 
2eed4     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
2eed8     A5 A6 A7 A8 
2eedc     A9 AA AB AC 
2eee0     AD AE AF B0 
2eee4     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
2eee8     41 41 41 B8 
2eeec     B9 BA BB BC 
2eef0     BD BE BF C0 
2eef4     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
2eef8     C5 41 41 C8 
2eefc     C9 CA CB CC 
2ef00     CD CE CF D1 
2ef04     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
2ef08     49 49 49 49 
2ef0c     D9 DA DB DC 
2ef10     DD 49 DF 4F 
2ef14     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
2ef18     4F E6 E8 E8 
2ef1c     55 55 55 59 
2ef20     59 EE EF F0 
2ef24     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
2ef28     F5 F6 F7 F8 
2ef2c     F9 FA FB FC 
2ef30     FD FE FF 00 
2ef34     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
2ef38     00 00 00 00 | 	byte	$00, $00, $00, $00
2ef3c     00 00 40 06 | 	long	(100 {_fatfs_cc_v_close})<<20
2ef40     00 00 50 06 | 	long	(101 {_fatfs_cc_v_read})<<20
2ef44     00 00 60 06 | 	long	(102 {_fatfs_cc_v_write})<<20
2ef48     00 00 70 06 | 	long	(103 {_fatfs_cc_v_lseek})<<20
2ef4c     00 00 80 06 | 	long	(104 {_fatfs_cc_v_ioctl})<<20
2ef50     00 00 90 07 | 	long	(121 {_fatfs_cc_v_flush})<<20
2ef54     00 00 00 00 
2ef58     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
2ef5c     00 00 90 06 | 	long	(105 {_fatfs_cc_v_open})<<20
2ef60     00 00 A0 06 | 	long	(106 {_fatfs_cc_v_creat})<<20
2ef64     00 00 B0 06 | 	long	(107 {_fatfs_cc_v_opendir})<<20
2ef68     00 00 C0 06 | 	long	(108 {_fatfs_cc_v_closedir})<<20
2ef6c     00 00 D0 06 | 	long	(109 {_fatfs_cc_v_readdir})<<20
2ef70     00 00 E0 06 | 	long	(110 {_fatfs_cc_v_stat})<<20
2ef74     00 00 F0 06 | 	long	(111 {_fatfs_cc_v_mkdir})<<20
2ef78     00 00 00 07 | 	long	(112 {_fatfs_cc_v_rmdir})<<20
2ef7c     00 00 10 07 | 	long	(113 {_fatfs_cc_v_remove})<<20
2ef80     00 00 20 07 | 	long	(114 {_fatfs_cc_v_rename})<<20
2ef84     00 00 30 07 | 	long	(115 {_fatfs_cc_v_init})<<20
2ef88     00 00 40 07 | 	long	(116 {_fatfs_cc_v_deinit})<<20
2ef8c     FF FF FF FF 
2ef90     1F 00 00 00 
2ef94     1C 00 00 00 
2ef98     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
2ef9c     1E 00 00 00 
2efa0     1F 00 00 00 
2efa4     1E 00 00 00 
2efa8     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
2efac     1F 00 00 00 
2efb0     1E 00 00 00 
2efb4     1F 00 00 00 
2efb8     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
2efbc     1F 00 00 00 
2efc0     00 00 00 00 
2efc4     1F 00 00 00 
2efc8     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
2efcc     5A 00 00 00 
2efd0     78 00 00 00 
2efd4     97 00 00 00 
2efd8     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
2efdc     D4 00 00 00 
2efe0     F3 00 00 00 
2efe4     11 01 00 00 
2efe8     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
2efec     4E 01 00 00 
2eff0     6D 01 00 00 
2eff4     FF FF FF FF 
2eff8     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
2effc     00 00 00 00 
      ...             
2f014     00 00 00 00 
2f018     00 00 00 00 | 	byte	$00[32]
2f01c     3A F0 02 00 | 	long	@@@_fatfs_cc_dat_ + 1346
2f020     3E F0 02 00 | 	long	@@@_fatfs_cc_dat_ + 1350
2f024     00 00 00 00 
2f028     00 00 00 00 
2f02c     00 00 00 00 
2f030     00 00 00 00 
2f034     00 00       | 	byte	$00[18]
2f036     3F 3F 3F 00 
2f03a     55 43 54 00 
2f03e     55 43 54 00 
2f042     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
2f046     00 00 00 00 
2f04a     00 00 00    | 	byte	$00[7]
2f04d     CA 9A 3B 00 
2f051     00 00 00 01 
2f055     01 01 01 01 
2f059     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
2f05d     91 11 11 11 
2f061     11 01 01 01 
2f065     01 01 01 01 
2f069     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
2f06d     01 01 01 01 
2f071     01 01 01    | 	byte	$01[7]
2f074     90 20 20 20 
2f078     20 20 20 20 
2f07c     20 20 20 20 
2f080     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
2f084     42 42 42 42 
2f088     42 42 42 42 
2f08c     42 42       | 	byte	$42[10]
2f08e     20 20 20 20 
2f092     20 20 20    | 	byte	$20[7]
2f095     44 44 44 44 
2f099     44 44       | 	byte	$44[6]
2f09b     04 04 04 04 
2f09f     04 04 04 04 
2f0a3     04 04 04 04 
2f0a7     04 04 04 04 
2f0ab     04 04 04 04 | 	byte	$04[20]
2f0af     20 20 20 20 
2f0b3     20 20       | 	byte	$20[6]
2f0b5     48 48 48 48 
2f0b9     48 48       | 	byte	$48[6]
2f0bb     08 08 08 08 
2f0bf     08 08 08 08 
2f0c3     08 08 08 08 
2f0c7     08 08 08 08 
2f0cb     08 08 08 08 | 	byte	$08[20]
2f0cf     20 20 20 20 
2f0d3     01 00 00 00 
2f0d7     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
2f0d8                 | __methodtable__
2f0d8     80 1E 01 00 | 	long	@_do_no_command
2f0dc     C0 B4 00 00 | 	long	@_do_plus
2f0e0     AC B9 00 00 | 	long	@_do_minus
2f0e4     74 BE 00 00 | 	long	@_do_or
2f0e8     8C BF 00 00 | 	long	@_do_mul
2f0ec     18 C5 00 00 | 	long	@_do_fdiv
2f0f0     5C BD 00 00 | 	long	@_do_and
2f0f4     F8 C2 00 00 | 	long	@_do_div
2f0f8     E0 C6 00 00 | 	long	@_do_mod
2f0fc     00 C9 00 00 | 	long	@_do_shl
2f100     18 CA 00 00 | 	long	@_do_shr
2f104     30 CB 00 00 | 	long	@_do_power
2f108     20 AF 00 00 | 	long	@_do_getvar
2f10c     88 8C 00 00 | 	long	@_do_push
2f110     68 A8 00 00 | 	long	@_do_assign
2f114     28 FB 00 00 | 	long	@_do_cls
2f118     98 A2 00 00 | 	long	@_do_new
2f11c     CC FB 00 00 | 	long	@_do_plot
2f120     04 FD 00 00 | 	long	@_do_draw
2f124     EC 06 01 00 | 	long	@_do_print
2f128     E4 FF 00 00 | 	long	@_do_circle
2f12c     6C FE 00 00 | 	long	@_do_fcircle
2f130     5C 01 01 00 | 	long	@_do_box
2f134     04 05 01 00 | 	long	@_do_frame
2f138     94 FB 00 00 | 	long	@_do_color
2f13c     8C 6C 00 00 | 	long	@_do_for
2f140     B8 6E 00 00 | 	long	@_do_next
2f144     FC 9F 00 00 | 	long	@_do_list
2f148     D8 9C 00 00 | 	long	@_do_run
2f14c     24 A7 00 00 | 	long	@_do_error
2f150     20 A4 00 00 | 	long	@_do_fast_goto
2f154     10 A5 00 00 | 	long	@_do_find_goto
2f158     20 A7 00 00 | 	long	@_do_slow_goto
2f15c     F8 E9 00 00 | 	long	@_do_converttoint
2f160     CC 92 00 00 | 	long	@_test_csave
2f164     20 96 00 00 | 	long	@_do_save
2f168     0C 99 00 00 | 	long	@_do_load
2f16c     B8 10 01 00 | 	long	@_do_pinwrite
2f170     58 15 01 00 | 	long	@_do_waitms
2f174     94 16 01 00 | 	long	@_do_waitvbl
2f178     94 19 01 00 | 	long	@_do_if
2f17c     78 1A 01 00 | 	long	@_do_else
2f180     9C 1A 01 00 | 	long	@_do_nothing
2f184     F8 CC 00 00 | 	long	@_do_eq
2f188     70 DB 00 00 | 	long	@_do_ge
2f18c     48 E0 00 00 | 	long	@_do_le
2f190     D0 D1 00 00 | 	long	@_do_gt
2f194     A8 D6 00 00 | 	long	@_do_lt
2f198     20 E5 00 00 | 	long	@_do_ne
2f19c     C8 EB 00 00 | 	long	@_do_rnd
2f1a0     A0 1A 01 00 | 	long	@_do_brun
2f1a4     6C 1D 01 00 | 	long	@_do_beep
2f1a8     C4 16 01 00 | 	long	@_do_dir
2f1ac     B4 0B 01 00 | 	long	@_do_paper
2f1b0     3C 0C 01 00 | 	long	@_do_ink
2f1b4     D8 0C 01 00 | 	long	@_do_font
2f1b8     54 0D 01 00 | 	long	@_do_mode
2f1bc     D8 1C 01 00 | 	long	@_do_mouse
2f1c0     C0 FA 00 00 | 	long	@_do_gettime
2f1c4     0C 1D 01 00 | 	long	@_do_cursor
2f1c8     40 1D 01 00 | 	long	@_do_click
2f1cc     4C F8 00 00 | 	long	@_do_mousex
2f1d0     90 F8 00 00 | 	long	@_do_mousey
2f1d4     18 F9 00 00 | 	long	@_do_mousek
2f1d8     D4 F8 00 00 | 	long	@_do_mousew
2f1dc     90 ED 00 00 | 	long	@_do_sin
2f1e0     78 EF 00 00 | 	long	@_do_stick
2f1e4     FC F0 00 00 | 	long	@_do_strig
2f1e8     60 F7 00 00 | 	long	@_do_sprite
2f1ec     D0 F3 00 00 | 	long	@_do_defsprite
2f1f0     80 F2 00 00 | 	long	@_do_getpixel
2f1f4     A0 16 01 00 | 	long	@_do_waitclock
2f1f8     8C 1E 01 00 | 	long	@_do_negative
2f1fc     5C F9 00 00 | 	long	@_do_rdpin
2f200     C8 F9 00 00 | 	long	@_do_rqpin
2f204     3C FA 00 00 | 	long	@_do_pinread
2f208     50 13 01 00 | 	long	@_do_wrpin
2f20c     D0 13 01 00 | 	long	@_do_wxpin
2f210     50 14 01 00 | 	long	@_do_wypin
2f214     40 11 01 00 | 	long	@_do_pinfloat
2f218     80 11 01 00 | 	long	@_do_pinlo
2f21c     C0 11 01 00 | 	long	@_do_pinhi
2f220     40 12 01 00 | 	long	@_do_pinstart
2f224     00 12 01 00 | 	long	@_do_pintoggle
2f228     D0 14 01 00 | 	long	@_do_position
2f22c     44 03 01 00 | 	long	@_do_fill
2f230     B8 50 01 00 | 	long	@_hg010b_spin2_putchar
2f234     04 52 02 00 | 	long	@__struct___bas_wrap_sender_tx
2f238     48 52 02 00 | 	long	@__struct___bas_wrap_sender_rx
2f23c     90 52 02 00 | 	long	@__struct___bas_wrap_sender_close
2f240     34 51 02 00 | 	long	@__struct__s_vfs_file_t_putchar
2f244     A4 51 02 00 | 	long	@__struct__s_vfs_file_t_getchar
2f248     EC 50 02 00 | 	long	@___strs_cl_pfunc
2f24c     34 B1 01 00 | 	long	@__system____root_opendir
2f250     D0 B1 01 00 | 	long	@__system____root_closedir
2f254     4C B1 01 00 | 	long	@__system____root_readdir
2f258     D8 B1 01 00 | 	long	@__system____root_stat
2f25c     60 AA 01 00 | 	long	@__system____default_putc
2f260     E4 A9 01 00 | 	long	@__system____default_getc
2f264     08 AB 01 00 | 	long	@__system____default_flush
2f268     F4 3B 02 00 | 	long	@_fatfs_cc_v_close
2f26c     10 40 02 00 | 	long	@_fatfs_cc_v_read
2f270     24 41 02 00 | 	long	@_fatfs_cc_v_write
2f274     04 42 02 00 | 	long	@_fatfs_cc_v_lseek
2f278     8C 42 02 00 | 	long	@_fatfs_cc_v_ioctl
2f27c     E0 42 02 00 | 	long	@_fatfs_cc_v_open
2f280     58 3B 02 00 | 	long	@_fatfs_cc_v_creat
2f284     38 3C 02 00 | 	long	@_fatfs_cc_v_opendir
2f288     AC 3C 02 00 | 	long	@_fatfs_cc_v_closedir
2f28c     EC 3C 02 00 | 	long	@_fatfs_cc_v_readdir
2f290     20 3E 02 00 | 	long	@_fatfs_cc_v_stat
2f294     A0 42 02 00 | 	long	@_fatfs_cc_v_mkdir
2f298     C0 42 02 00 | 	long	@_fatfs_cc_v_rmdir
2f29c     B0 42 02 00 | 	long	@_fatfs_cc_v_remove
2f2a0     D0 42 02 00 | 	long	@_fatfs_cc_v_rename
2f2a4     F0 43 02 00 | 	long	@_fatfs_cc_v_init
2f2a8     F8 43 02 00 | 	long	@_fatfs_cc_v_deinit
2f2ac     F0 63 01 00 | 	long	@__system___tx
2f2b0     30 64 01 00 | 	long	@__system___rx
2f2b4     5C BC 01 00 | 	long	@__system___rxtxioctl_0527
2f2b8     B4 BC 01 00 | 	long	@__system____dummy_flush_0528
2f2bc     C0 43 02 00 | 	long	@_fatfs_cc_v_flush
2f2c0                 | __heap_base
2f2c0     00 00 00 00 
      ...             
6dac0     00 00 00 00 
6dac4     00 00 00 00 | 	long	0[64002]
6dac8                 | objmem
6dac8     00 00 00 00 
      ...             
77f7c     00 00 00 00 
77f80     00 00 00 00 | 	long	0[10543]
77f84                 | stackspace
77f84     00 00 00 00 | 	long	0[1]
77f88 100             | 	org	COG_BSS_START
77f88 100             | _var01
77f88 100             | 	res	1
77f88 101             | _var02
77f88 101             | 	res	1
77f88 102             | _var03
77f88 102             | 	res	1
77f88 103             | _var04
77f88 103             | 	res	1
77f88 104             | _var05
77f88 104             | 	res	1
77f88 105             | _var06
77f88 105             | 	res	1
77f88 106             | _var07
77f88 106             | 	res	1
77f88 107             | _var08
77f88 107             | 	res	1
77f88 108             | _var09
77f88 108             | 	res	1
77f88 109             | arg01
77f88 109             | 	res	1
77f88 10a             | arg02
77f88 10a             | 	res	1
77f88 10b             | arg03
77f88 10b             | 	res	1
77f88 10c             | arg04
77f88 10c             | 	res	1
77f88 10d             | arg05
77f88 10d             | 	res	1
77f88 10e             | arg06
77f88 10e             | 	res	1
77f88 10f             | local01
77f88 10f             | 	res	1
77f88 110             | local02
77f88 110             | 	res	1
77f88 111             | local03
77f88 111             | 	res	1
77f88 112             | local04
77f88 112             | 	res	1
77f88 113             | local05
77f88 113             | 	res	1
77f88 114             | local06
77f88 114             | 	res	1
77f88 115             | local07
77f88 115             | 	res	1
77f88 116             | local08
77f88 116             | 	res	1
77f88 117             | local09
77f88 117             | 	res	1
77f88 118             | local10
77f88 118             | 	res	1
77f88 119             | local11
77f88 119             | 	res	1
77f88 11a             | local12
77f88 11a             | 	res	1
77f88 11b             | local13
77f88 11b             | 	res	1
77f88 11c             | local14
77f88 11c             | 	res	1
77f88 11d             | local15
77f88 11d             | 	res	1
77f88 11e             | local16
77f88 11e             | 	res	1
77f88 11f             | local17
77f88 11f             | 	res	1
77f88 120             | local18
77f88 120             | 	res	1
77f88 121             | local19
77f88 121             | 	res	1
77f88 122             | local20
77f88 122             | 	res	1
77f88 123             | local21
77f88 123             | 	res	1
77f88 124             | local22
77f88 124             | 	res	1
77f88 125             | local23
77f88 125             | 	res	1
77f88 126             | local24
77f88 126             | 	res	1
77f88 127             | local25
77f88 127             | 	res	1
77f88 128             | local26
77f88 128             | 	res	1
77f88 129             | local27
77f88 129             | 	res	1
77f88 12a             | local28
77f88 12a             | 	res	1
77f88 12b             | local29
77f88 12b             | 	res	1
77f88 12c             | local30
77f88 12c             | 	res	1
77f88 12d             | local31
77f88 12d             | 	res	1
77f88 12e             | local32
77f88 12e             | 	res	1
77f88 12f             | local33
77f88 12f             | 	res	1
77f88 130             | muldiva_
77f88 130             | 	res	1
77f88 131             | muldivb_
77f88 131             | 	res	1
77f88 132             | 	fit	480
77f88 132             | 
