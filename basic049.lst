00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic049.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 49
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_cogstop = 207
00000                 | 	token_memlo = 207
00000                 | 	token_memhi = 207
00000                 | 	token_setcolor = 207
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 A0 33 A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 49 93 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 48 91 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 49 91 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 92 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 90 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 48 91 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 49 93 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 2C 1E 04 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 18 1B 04 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 34 95 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 F8 0D 04 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 50 09 04 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 58 76 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 38 15 04 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 C8 A7 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 78 CF 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 30 CD 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 08 DF 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 54 3A 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     54 44 B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     E8 58 B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D0 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10192
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D0 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10192
00840     52 00 00 FF 
00844     E0 E4 05 F1 | 	add	objptr, ##42208
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     52 00 00 FF 
00850     E0 E4 85 F1 | 	sub	objptr, ##42208
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     3C E5 05 F1 | 	add	objptr, ##41276
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     3C E5 85 F1 | 	sub	objptr, ##41276
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     28 5C B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     7C 63 B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     74 5D B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     3C E5 05 F1 | 	add	objptr, ##41276
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     3C E5 85 F1 | 	sub	objptr, ##41276
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     52 00 00 FF 
00980     A4 E4 05 F1 | 	add	objptr, ##42148
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     D4 E5 85 F1 | 	sub	objptr, ##36308
009c0     38 5B B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     28 29 B2 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     52 00 00 FF 
009dc     E0 E4 05 F1 | 	add	objptr, ##42208
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     52 00 00 FF 
009e8     E0 E4 85 F1 | 	sub	objptr, ##42208
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     52 00 00 FF 
00a64     C8 E4 05 F1 | 	add	objptr, ##42184
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     52 00 00 FF 
00a70     C8 E4 85 F1 | 	sub	objptr, ##42184
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     20 27 B2 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     C0 26 B2 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     52 00 00 FF 
00afc     E8 E4 05 F1 | 	add	objptr, ##42216
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     52 00 00 FF 
00b08     AA E4 85 F1 | 	sub	objptr, ##42154
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     52 00 00 FF 
00b74     AC E4 05 F1 | 	add	objptr, ##42156
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     52 00 00 FF 
00b88     AA E4 85 F1 | 	sub	objptr, ##42154
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     50 26 B2 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     9C 3E B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     52 00 00 FF 
00bdc     E8 E4 05 F1 | 	add	objptr, ##42216
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     52 00 00 FF 
00bf0     E8 E4 85 F1 | 	sub	objptr, ##42216
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     B8 41 B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     3C E5 05 A1 |  if_e	add	objptr, ##41276
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     3C E5 85 A1 |  if_e	sub	objptr, ##41276
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     64 58 B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     B8 5F B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     B4 59 B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     B2 01 00 FF 
00ccc     0E 51 06 F6 | 	mov	local22, ##@LR__5397
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     E4 24 B2 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     98 7E B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     A4 5C B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     52 00 00 FF 
00d34     C8 E4 05 F1 | 	add	objptr, ##42184
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     52 00 00 FF 
00d40     C8 E4 85 F1 | 	sub	objptr, ##42184
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     08 46 B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     38 48 B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     3C E5 05 F1 | 	add	objptr, ##41276
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     3C E5 85 F1 | 	sub	objptr, ##41276
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     F0 56 B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     44 5E B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     40 58 B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     80 23 B2 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     78 3D B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     6C 3D B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     FC 3C B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     C8 3C B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     E8 3C B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     D8 3C B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     24 22 B2 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     D0 21 B2 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     A0 21 B2 FD | 	call	#_pspoke
0100c     52 00 00 FF 
01010     E8 E4 05 F1 | 	add	objptr, ##42216
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     52 00 00 FF 
0101c     AA E4 85 F1 | 	sub	objptr, ##42154
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     52 00 00 FF 
0108c     AC E4 05 F1 | 	add	objptr, ##42156
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     52 00 00 FF 
010a0     AA E4 85 F1 | 	sub	objptr, ##42154
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     38 21 B2 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     84 39 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     52 00 00 FF 
010f4     E8 E4 05 F1 | 	add	objptr, ##42216
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     52 00 00 FF 
01108     E8 E4 85 F1 | 	sub	objptr, ##42216
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     60 3A B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     20 20 B2 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     CC 1F B2 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     9C 1F B2 FD | 	call	#_pspoke
01210     52 00 00 FF 
01214     E8 E4 05 F1 | 	add	objptr, ##42216
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     52 00 00 FF 
01220     AA E4 85 F1 | 	sub	objptr, ##42154
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     52 00 00 FF 
01290     AC E4 05 F1 | 	add	objptr, ##42156
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     52 00 00 FF 
012a4     AA E4 85 F1 | 	sub	objptr, ##42154
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     34 1F B2 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     80 37 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     52 00 00 FF 
012f8     E8 E4 05 F1 | 	add	objptr, ##42216
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     52 00 00 FF 
0130c     E8 E4 85 F1 | 	sub	objptr, ##42216
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     B2 01 00 FF 
01328     0F 51 06 F6 | 	mov	local22, ##@LR__5398
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     52 00 00 FF 
01354     8E E4 05 F1 | 	add	objptr, ##42126
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     52 00 00 FF 
01360     CC E4 85 F1 | 	sub	objptr, ##42188
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     52 00 00 CF 
0136c     CC E4 05 C1 |  if_b	add	objptr, ##42188
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     52 00 00 CF 
01378     CC E4 85 C1 |  if_b	sub	objptr, ##42188
0137c     52 00 00 FF 
01380     CC E4 05 F1 | 	add	objptr, ##42188
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     52 00 00 FF 
0138c     CC E4 85 F1 | 	sub	objptr, ##42188
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     A8 38 B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     52 00 00 FF 
013b4     8E E4 05 F1 | 	add	objptr, ##42126
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     52 00 00 FF 
013c0     CC E4 85 F1 | 	sub	objptr, ##42188
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     52 00 00 3F 
013cc     CC E4 05 31 |  if_ae	add	objptr, ##42188
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     52 00 00 3F 
013d8     CC E4 85 31 |  if_ae	sub	objptr, ##42188
013dc     52 00 00 FF 
013e0     CC E4 05 F1 | 	add	objptr, ##42188
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     52 00 00 FF 
013ec     CC E4 85 F1 | 	sub	objptr, ##42188
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     48 38 B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     52 00 00 FF 
01414     94 E4 05 F1 | 	add	objptr, ##42132
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1B 00 00 FF 
01420     9C E4 85 F1 | 	sub	objptr, ##13980
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1B 00 00 CF 
01448     9C E4 05 C1 |  if_b	add	objptr, ##13980
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     52 00 00 CF 
01454     D0 E4 85 C1 |  if_b	sub	objptr, ##42192
01458     52 00 00 FF 
0145c     D0 E4 05 F1 | 	add	objptr, ##42192
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     52 00 00 FF 
01468     D0 E4 85 F1 | 	sub	objptr, ##42192
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     9C 37 B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     52 00 00 FF 
01490     94 E4 05 F1 | 	add	objptr, ##42132
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     52 00 00 FF 
0149c     D0 E4 85 F1 | 	sub	objptr, ##42192
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     52 00 00 3F 
014a8     D0 E4 05 31 |  if_ae	add	objptr, ##42192
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     52 00 00 3F 
014b4     D0 E4 85 31 |  if_ae	sub	objptr, ##42192
014b8     52 00 00 FF 
014bc     D0 E4 05 F1 | 	add	objptr, ##42192
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     52 00 00 FF 
014c8     D0 E4 85 F1 | 	sub	objptr, ##42192
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     40 37 B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     52 00 00 FF 
014e0     C8 E4 05 F1 | 	add	objptr, ##42184
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     52 00 00 FF 
014f4     C8 E4 85 F1 | 	sub	objptr, ##42184
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     8C 25 B2 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     7C 25 B2 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     52 00 00 FF 
01544     4B E4 05 F1 | 	add	objptr, ##42059
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     52 00 00 FF 
01558     94 E4 85 F1 | 	sub	objptr, ##42132
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     F8 56 B2 FD | 	call	#__system___waitms
01568     52 00 00 FF 
0156c     94 E4 05 F1 | 	add	objptr, ##42132
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     52 00 00 FF 
01580     94 E4 85 F1 | 	sub	objptr, ##42132
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     D0 56 B2 FD | 	call	#__system___waitms
01590     52 00 00 FF 
01594     94 E4 05 F1 | 	add	objptr, ##42132
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     52 00 00 FF 
015a8     94 E4 85 F1 | 	sub	objptr, ##42132
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     A8 56 B2 FD | 	call	#__system___waitms
015b8     52 00 00 FF 
015bc     94 E4 05 F1 | 	add	objptr, ##42132
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     52 00 00 FF 
015d0     94 E4 85 F1 | 	sub	objptr, ##42132
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     08 4A 05 F6 | 	mov	COUNT_, #8
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     48 E5 05 F1 | 	add	objptr, ##41800
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     AD F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10413
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     50 E5 85 F1 | 	sub	objptr, ##41808
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650     B8 4B B2 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     6C 01 90 CD |  if_b	jmp	#LR__0061
0165c     14 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     08 4C B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 2A 02 F6 | 	mov	local03, result1
0166c     14 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     F8 4B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     FD 2C 02 F6 | 	mov	local04, result1
0167c     14 13 02 F6 | 	mov	arg01, local02
01680     02 14 06 F6 | 	mov	arg02, #2
01684     E8 4B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01688     FD 2E 02 F6 | 	mov	local05, result1
0168c     14 13 02 F6 | 	mov	arg01, local02
01690     00 14 06 F6 | 	mov	arg02, #0
01694     28 4C B2 FD | 	call	#_usbnew_spin2_hidpad_hat
01698     FD 30 02 F6 | 	mov	local06, result1
0169c     14 13 02 F6 | 	mov	arg01, local02
016a0     03 14 06 F6 | 	mov	arg02, #3
016a4     C8 4B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016a8     FD 32 02 F6 | 	mov	local07, result1
016ac     14 13 02 F6 | 	mov	arg01, local02
016b0     04 14 06 F6 | 	mov	arg02, #4
016b4     B8 4B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016b8     FD 34 02 F6 | 	mov	local08, result1
016bc     14 13 02 F6 | 	mov	arg01, local02
016c0     05 14 06 F6 | 	mov	arg02, #5
016c4     A8 4B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016c8     FD 14 02 F6 | 	mov	arg02, result1
016cc     13 FB 01 F6 | 	mov	result1, local01
016d0     02 FA 65 F0 | 	shl	result1, #2
016d4     51 00 00 FF 
016d8     58 E5 05 F1 | 	add	objptr, ##41816
016dc     F2 FA 01 F1 | 	add	result1, objptr
016e0     FD 2A 62 FC | 	wrlong	local03, result1
016e4     13 FB 01 F6 | 	mov	result1, local01
016e8     02 FA 65 F0 | 	shl	result1, #2
016ec     1C E4 05 F1 | 	add	objptr, #28
016f0     F2 FA 01 F1 | 	add	result1, objptr
016f4     FD 2C 62 FC | 	wrlong	local04, result1
016f8     13 FB 01 F6 | 	mov	result1, local01
016fc     02 FA 65 F0 | 	shl	result1, #2
01700     1C E4 05 F1 | 	add	objptr, #28
01704     F2 FA 01 F1 | 	add	result1, objptr
01708     FD 2E 62 FC | 	wrlong	local05, result1
0170c     13 2F 02 F6 | 	mov	local05, local01
01710     02 2E 66 F0 | 	shl	local05, #2
01714     1C E4 05 F1 | 	add	objptr, #28
01718     F2 2E 02 F1 | 	add	local05, objptr
0171c     17 31 62 FC | 	wrlong	local06, local05
01720     13 31 02 F6 | 	mov	local06, local01
01724     02 30 66 F0 | 	shl	local06, #2
01728     1C E4 05 F1 | 	add	objptr, #28
0172c     F2 30 02 F1 | 	add	local06, objptr
01730     18 33 62 FC | 	wrlong	local07, local06
01734     13 33 02 F6 | 	mov	local07, local01
01738     02 32 66 F0 | 	shl	local07, #2
0173c     1C E4 05 F1 | 	add	objptr, #28
01740     F2 32 02 F1 | 	add	local07, objptr
01744     19 35 62 FC | 	wrlong	local08, local07
01748     13 35 02 F6 | 	mov	local08, local01
0174c     02 34 66 F0 | 	shl	local08, #2
01750     1C E4 05 F1 | 	add	objptr, #28
01754     F2 34 02 F1 | 	add	local08, objptr
01758     1A 15 62 FC | 	wrlong	arg02, local08
0175c     60 00 00 FF 
01760     00 2A 06 F1 | 	add	local03, ##49152
01764     0F 2A 46 F0 | 	shr	local03, #15
01768     01 34 06 F6 | 	mov	local08, #1
0176c     15 35 02 F1 | 	add	local08, local03
01770     60 00 00 FF 
01774     00 2C 06 F1 | 	add	local04, ##49152
01778     0F 2C 46 F0 | 	shr	local04, #15
0177c     01 32 06 F6 | 	mov	local07, #1
01780     16 33 02 F1 | 	add	local07, local04
01784     13 31 02 F6 | 	mov	local06, local01
01788     02 30 66 F0 | 	shl	local06, #2
0178c     1C E4 05 F1 | 	add	objptr, #28
01790     F2 30 02 F1 | 	add	local06, objptr
01794     02 32 66 F0 | 	shl	local07, #2
01798     19 35 02 F1 | 	add	local08, local07
0179c     18 35 62 FC | 	wrlong	local08, local06
017a0     13 35 02 F6 | 	mov	local08, local01
017a4     02 34 66 F0 | 	shl	local08, #2
017a8     1C E4 05 F1 | 	add	objptr, #28
017ac     F2 34 02 F1 | 	add	local08, objptr
017b0     14 13 02 F6 | 	mov	arg01, local02
017b4     52 00 00 FF 
017b8     38 E4 85 F1 | 	sub	objptr, ##42040
017bc     7C 4A B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
017c0     1A FB 61 FC | 	wrlong	result1, local08
017c4     01 26 06 F1 | 	add	local01, #1
017c8                 | LR__0061
017c8     01 28 06 F1 | 	add	local02, #1
017cc     07 28 16 F2 | 	cmp	local02, #7 wc
017d0     78 FE 9F CD |  if_b	jmp	#LR__0060
017d4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
017d8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
017d8                 | LR__0062
017d8     07 26 16 F2 | 	cmp	local01, #7 wc
017dc     3C 00 90 3D |  if_ae	jmp	#LR__0064
017e0     13 35 02 F6 | 	mov	local08, local01
017e4     02 34 66 F0 | 	shl	local08, #2
017e8     52 00 00 FF 
017ec     1C E4 05 F1 | 	add	objptr, ##42012
017f0     F2 34 02 F1 | 	add	local08, objptr
017f4     1A 01 68 FC | 	wrlong	#0, local08
017f8     13 35 02 F6 | 	mov	local08, local01
017fc     02 34 66 F0 | 	shl	local08, #2
01800     1C E4 05 F1 | 	add	objptr, #28
01804     F2 34 02 F1 | 	add	local08, objptr
01808     1A 01 68 FC | 	wrlong	#0, local08
0180c     01 26 06 F1 | 	add	local01, #1
01810     52 00 00 FF 
01814     38 E4 85 F1 | 	sub	objptr, ##42040
01818     BC FF 9F FD | 	jmp	#LR__0062
0181c                 | LR__0063
0181c                 | LR__0064
0181c     A7 F0 03 F6 | 	mov	ptra, fp
01820     B2 00 A0 FD | 	call	#popregs_
01824                 | _gethdi_ret
01824     2D 00 64 FD | 	ret
01828                 | 
01828                 | ' 
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' 
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' '
01828                 | ' '                                     LINE INTERPRETER/TOKENIZER
01828                 | ' '
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' 
01828                 | ' 
01828                 | ' sub interpret
01828                 | _interpret
01828     35 4A 05 F6 | 	mov	COUNT_, #53
0182c     A8 00 A0 FD | 	call	#pushregs_
01830     01 00 00 FF 
01834     84 F0 07 F1 | 	add	ptra, ##644
01838     37 00 00 FF 
0183c     1C E4 05 F1 | 	add	objptr, ##28188
01840     F2 12 02 FB | 	rdlong	arg01, objptr
01844     37 00 00 FF 
01848     1C E4 85 F1 | 	sub	objptr, ##28188
0184c     2C 76 B2 FD | 	call	#__system__RTrim_S
01850     FD 12 02 F6 | 	mov	arg01, result1
01854     64 75 B2 FD | 	call	#__system__LTrim_S
01858     37 00 00 FF 
0185c     20 E4 05 F1 | 	add	objptr, ##28192
01860     F2 FA 61 FC | 	wrlong	result1, objptr
01864     04 E4 05 F1 | 	add	objptr, #4
01868     FF FF FF FF 
0186c     F2 FE 6B FC | 	wrlong	##-1, objptr
01870     1B 00 00 FF 
01874     8C E4 05 F1 | 	add	objptr, ##13964
01878     F2 00 68 FC | 	wrlong	#0, objptr
0187c     08 00 00 FF 
01880     34 E4 85 F1 | 	sub	objptr, ##4148
01884     F2 00 68 FC | 	wrlong	#0, objptr
01888     4A 00 00 FF 
0188c     7C E4 85 F1 | 	sub	objptr, ##38012
01890     00 26 06 F6 | 	mov	local01, #0
01894                 | LR__0070
01894                 | ' 
01894                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
01894                 | ' 
01894                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
01894                 | ' 
01894                 | ' 108 
01894                 | ' for i=0 to 125: separators(i)=0 :next i
01894     00 28 06 F6 | 	mov	local02, #0
01898     38 4E 05 F1 | 	add	fp, #56
0189c     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
018a0                 | LR__0071
018a0     14 2B 02 F6 | 	mov	local03, local02
018a4     02 2A 66 F0 | 	shl	local03, #2
018a8     A7 2A 02 F1 | 	add	local03, fp
018ac     15 01 68 FC | 	wrlong	#0, local03
018b0     01 28 06 F1 | 	add	local02, #1
018b4     7E 28 56 F2 | 	cmps	local02, #126 wc
018b8     E4 FF 9F CD |  if_b	jmp	#LR__0071
018bc                 | LR__0072
018bc     38 4E 85 F1 | 	sub	fp, #56
018c0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
018c0     00 28 06 F6 | 	mov	local02, #0
018c4     35 00 00 FF 
018c8     0C E4 05 F1 | 	add	objptr, ##27148
018cc     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
018d0                 | LR__0073
018d0     14 2D 02 F6 | 	mov	local04, local02
018d4     03 2C 66 F0 | 	shl	local04, #3
018d8     F2 2C 02 F1 | 	add	local04, objptr
018dc     B2 01 00 FF 
018e0     10 17 06 F6 | 	mov	arg03, ##@LR__5399
018e4     16 17 62 FC | 	wrlong	arg03, local04
018e8     14 2D 02 F6 | 	mov	local04, local02
018ec     03 2C 66 F0 | 	shl	local04, #3
018f0     F2 2E 02 F6 | 	mov	local05, objptr
018f4     F2 2C 02 F1 | 	add	local04, objptr
018f8     00 30 06 F6 | 	mov	local06, #0
018fc     04 2C 06 F1 | 	add	local04, #4
01900     16 01 68 FC | 	wrlong	#0, local04
01904     01 28 06 F1 | 	add	local02, #1
01908     7E 28 56 F2 | 	cmps	local02, #126 wc
0190c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01910                 | LR__0074
01910     02 00 00 FF 
01914     10 E4 05 F1 | 	add	objptr, ##1040
01918     F2 12 02 FB | 	rdlong	arg01, objptr
0191c     37 00 00 FF 
01920     1C E4 85 F1 | 	sub	objptr, ##28188
01924     54 75 B2 FD | 	call	#__system__RTrim_S
01928     FD 12 02 F6 | 	mov	arg01, result1
0192c     8C 74 B2 FD | 	call	#__system__LTrim_S
01930     37 00 00 FF 
01934     1C E4 05 F1 | 	add	objptr, ##28188
01938     F2 FA 61 FC | 	wrlong	result1, objptr
0193c     B2 01 00 FF 
01940     11 2D 06 F6 | 	mov	local04, ##@LR__5400
01944     1B 00 00 FF 
01948     D0 E4 05 F1 | 	add	objptr, ##14032
0194c     F2 2C 62 FC | 	wrlong	local04, objptr
01950     1B 00 00 FF 
01954     D0 E4 85 F1 | 	sub	objptr, ##14032
01958     F2 12 02 FB | 	rdlong	arg01, objptr
0195c     37 00 00 FF 
01960     1C E4 85 F1 | 	sub	objptr, ##28188
01964     09 33 02 F6 | 	mov	local07, arg01
01968     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0196c                 | LR__0075
0196c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01970     01 32 06 51 |  if_ne	add	local07, #1
01974     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01978                 | LR__0076
01978     09 33 8A F1 | 	sub	local07, arg01 wz
0197c     52 00 00 FF 
01980     F0 E4 05 F1 | 	add	objptr, ##42224
01984     F2 32 62 FC | 	wrlong	local07, objptr
01988                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
01988     52 00 00 FF 
0198c     F0 E4 85 F1 | 	sub	objptr, ##42224
01990     DC 29 90 AD |  if_e	jmp	#LR__0209
01994     00 34 06 F6 | 	mov	local08, #0
01998                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
01998                 | ' for i=1 to len(line$)
01998     01 28 06 F6 | 	mov	local02, #1
0199c     37 00 00 FF 
019a0     1C E4 05 F1 | 	add	objptr, ##28188
019a4     F2 12 02 FB | 	rdlong	arg01, objptr
019a8     37 00 00 FF 
019ac     1C E4 85 F1 | 	sub	objptr, ##28188
019b0     09 33 02 F6 | 	mov	local07, arg01
019b4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
019b8                 | LR__0077
019b8     19 FB C9 FA | 	rdbyte	result1, local07 wz
019bc     01 32 06 51 |  if_ne	add	local07, #1
019c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
019c4                 | LR__0078
019c4     09 33 82 F1 | 	sub	local07, arg01
019c8     19 37 02 F6 | 	mov	local09, local07
019cc     01 36 06 F1 | 	add	local09, #1
019d0                 | LR__0079
019d0     1B 29 52 F2 | 	cmps	local02, local09 wc
019d4     AC 00 90 3D |  if_ae	jmp	#LR__0081
019d8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
019d8     37 00 00 FF 
019dc     1C E4 05 F1 | 	add	objptr, ##28188
019e0     F2 12 02 FB | 	rdlong	arg01, objptr
019e4     37 00 00 FF 
019e8     1C E4 85 F1 | 	sub	objptr, ##28188
019ec     14 15 02 F6 | 	mov	arg02, local02
019f0     01 16 06 F6 | 	mov	arg03, #1
019f4     0C 71 B2 FD | 	call	#__system__Mid_S
019f8     FD 12 02 F6 | 	mov	arg01, result1
019fc     B2 01 00 FF 
01a00     12 15 06 F6 | 	mov	arg02, ##@LR__5401
01a04     8C 4F B2 FD | 	call	#__system___string_cmp
01a08     00 FA 0D F2 | 	cmp	result1, #0 wz
01a0c     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01a10     01 34 06 A6 |  if_e	mov	local08, #1
01a14     3C 00 90 AD |  if_e	jmp	#LR__0080
01a18     37 00 00 FF 
01a1c     1C E4 05 F1 | 	add	objptr, ##28188
01a20     F2 12 02 FB | 	rdlong	arg01, objptr
01a24     37 00 00 FF 
01a28     1C E4 85 F1 | 	sub	objptr, ##28188
01a2c     14 15 02 F6 | 	mov	arg02, local02
01a30     01 16 06 F6 | 	mov	arg03, #1
01a34     CC 70 B2 FD | 	call	#__system__Mid_S
01a38     FD 12 02 F6 | 	mov	arg01, result1
01a3c     B2 01 00 FF 
01a40     14 15 06 F6 | 	mov	arg02, ##@LR__5402
01a44     4C 4F B2 FD | 	call	#__system___string_cmp
01a48     00 FA 0D F2 | 	cmp	result1, #0 wz
01a4c     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01a50     00 34 06 A6 |  if_e	mov	local08, #0
01a54                 | LR__0080
01a54     14 2D 02 F6 | 	mov	local04, local02
01a58     03 2C 66 F0 | 	shl	local04, #3
01a5c     35 00 00 FF 
01a60     0C E4 05 F1 | 	add	objptr, ##27148
01a64     F2 2E 02 F6 | 	mov	local05, objptr
01a68     F2 2C 02 F1 | 	add	local04, objptr
01a6c     04 2C 06 F1 | 	add	local04, #4
01a70     16 35 62 FC | 	wrlong	local08, local04
01a74     01 28 06 F1 | 	add	local02, #1
01a78     35 00 00 FF 
01a7c     0C E4 85 F1 | 	sub	objptr, ##27148
01a80     4C FF 9F FD | 	jmp	#LR__0079
01a84                 | LR__0081
01a84     01 28 06 F6 | 	mov	local02, #1
01a88                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01a88                 | LR__0082
01a88     37 00 00 FF 
01a8c     1C E4 05 F1 | 	add	objptr, ##28188
01a90     F2 12 02 FB | 	rdlong	arg01, objptr
01a94     37 00 00 FF 
01a98     1C E4 85 F1 | 	sub	objptr, ##28188
01a9c     14 15 02 F6 | 	mov	arg02, local02
01aa0     01 16 06 F6 | 	mov	arg03, #1
01aa4     5C 70 B2 FD | 	call	#__system__Mid_S
01aa8     FD 12 02 F6 | 	mov	arg01, result1
01aac     B2 01 00 FF 
01ab0     16 39 06 F6 | 	mov	local10, ##@LR__5403
01ab4     1C 15 02 F6 | 	mov	arg02, local10
01ab8     D8 4E B2 FD | 	call	#__system___string_cmp
01abc     00 FA 0D F2 | 	cmp	result1, #0 wz
01ac0     34 00 90 5D |  if_ne	jmp	#LR__0083
01ac4     14 2F 02 F6 | 	mov	local05, local02
01ac8     03 2E 66 F0 | 	shl	local05, #3
01acc     35 00 00 FF 
01ad0     0C E4 05 F1 | 	add	objptr, ##27148
01ad4     F2 30 02 F6 | 	mov	local06, objptr
01ad8     F2 2E 02 F1 | 	add	local05, objptr
01adc     04 2E 06 F1 | 	add	local05, #4
01ae0     17 3B 02 FB | 	rdlong	local11, local05
01ae4     04 2E 86 F1 | 	sub	local05, #4
01ae8     1D 3D 0A F6 | 	mov	local12, local11 wz
01aec     35 00 00 FF 
01af0     0C E4 85 F1 | 	sub	objptr, ##27148
01af4     24 00 90 AD |  if_e	jmp	#LR__0084
01af8                 | LR__0083
01af8     52 00 00 FF 
01afc     F0 E4 05 F1 | 	add	objptr, ##42224
01b00     F2 3E 02 FB | 	rdlong	local13, objptr
01b04     52 00 00 FF 
01b08     F0 E4 85 F1 | 	sub	objptr, ##42224
01b0c     1F 41 02 F6 | 	mov	local14, local13
01b10     20 29 52 F2 | 	cmps	local02, local14 wc
01b14     01 28 06 C1 |  if_b	add	local02, #1
01b18     6C FF 9F CD |  if_b	jmp	#LR__0082
01b1c                 | LR__0084
01b1c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01b1c     52 00 00 FF 
01b20     F0 E4 05 F1 | 	add	objptr, ##42224
01b24     F2 2C 02 FB | 	rdlong	local04, objptr
01b28     52 00 00 FF 
01b2c     F0 E4 85 F1 | 	sub	objptr, ##42224
01b30     16 29 52 F2 | 	cmps	local02, local04 wc
01b34     A8 00 90 3D |  if_ae	jmp	#LR__0087
01b38     37 00 00 FF 
01b3c     1C E4 05 F1 | 	add	objptr, ##28188
01b40     F2 30 02 FB | 	rdlong	local06, objptr
01b44     37 00 00 FF 
01b48     1C E4 85 F1 | 	sub	objptr, ##28188
01b4c     18 13 02 F6 | 	mov	arg01, local06
01b50     09 33 02 F6 | 	mov	local07, arg01
01b54     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01b58                 | LR__0085
01b58     19 FB C9 FA | 	rdbyte	result1, local07 wz
01b5c     01 32 06 51 |  if_ne	add	local07, #1
01b60     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01b64                 | LR__0086
01b64     09 33 82 F1 | 	sub	local07, arg01
01b68     19 2F 02 F6 | 	mov	local05, local07
01b6c     17 15 02 F6 | 	mov	arg02, local05
01b70     14 15 82 F1 | 	sub	arg02, local02
01b74     18 13 02 F6 | 	mov	arg01, local06
01b78     F8 6E B2 FD | 	call	#__system__Right_S
01b7c     FD 12 02 F6 | 	mov	arg01, result1
01b80     F8 72 B2 FD | 	call	#__system__RTrim_S
01b84     FD 12 02 F6 | 	mov	arg01, result1
01b88     30 72 B2 FD | 	call	#__system__LTrim_S
01b8c     52 00 00 FF 
01b90     F4 E4 05 F1 | 	add	objptr, ##42228
01b94     F2 FA 61 FC | 	wrlong	result1, objptr
01b98     1B 00 00 FF 
01b9c     D8 E4 85 F1 | 	sub	objptr, ##14040
01ba0     F2 12 02 FB | 	rdlong	arg01, objptr
01ba4     37 00 00 FF 
01ba8     1C E4 85 F1 | 	sub	objptr, ##28188
01bac     01 28 86 F1 | 	sub	local02, #1
01bb0     14 15 02 F6 | 	mov	arg02, local02
01bb4     34 6E B2 FD | 	call	#__system__Left_S
01bb8     FD 12 02 F6 | 	mov	arg01, result1
01bbc     BC 72 B2 FD | 	call	#__system__RTrim_S
01bc0     FD 12 02 F6 | 	mov	arg01, result1
01bc4     F4 71 B2 FD | 	call	#__system__LTrim_S
01bc8     37 00 00 FF 
01bcc     1C E4 05 F1 | 	add	objptr, ##28188
01bd0     F2 FA 61 FC | 	wrlong	result1, objptr
01bd4     37 00 00 FF 
01bd8     1C E4 85 F1 | 	sub	objptr, ##28188
01bdc     1C 00 90 FD | 	jmp	#LR__0088
01be0                 | LR__0087
01be0     B2 01 00 FF 
01be4     18 2D 06 F6 | 	mov	local04, ##@LR__5404
01be8     52 00 00 FF 
01bec     F4 E4 05 F1 | 	add	objptr, ##42228
01bf0     F2 2C 62 FC | 	wrlong	local04, objptr
01bf4     52 00 00 FF 
01bf8     F4 E4 85 F1 | 	sub	objptr, ##42228
01bfc                 | LR__0088
01bfc                 | ' 
01bfc                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01bfc     37 00 00 FF 
01c00     24 E4 05 F1 | 	add	objptr, ##28196
01c04     F2 2C 02 FB | 	rdlong	local04, objptr
01c08     37 00 00 FF 
01c0c     24 E4 85 F1 | 	sub	objptr, ##28196
01c10     FF FF 7F FF 
01c14     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c18     40 00 90 5D |  if_ne	jmp	#LR__0089
01c1c     52 00 00 FF 
01c20     F4 E4 05 F1 | 	add	objptr, ##42228
01c24     F2 12 02 FB | 	rdlong	arg01, objptr
01c28     52 00 00 FF 
01c2c     F4 E4 85 F1 | 	sub	objptr, ##42228
01c30     B2 01 00 FF 
01c34     19 31 06 F6 | 	mov	local06, ##@LR__5405
01c38     18 15 02 F6 | 	mov	arg02, local06
01c3c     54 4D B2 FD | 	call	#__system___string_cmp
01c40     00 FA 0D F2 | 	cmp	result1, #0 wz
01c44     37 00 00 5F 
01c48     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c4c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01c50     37 00 00 5F 
01c54     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c58     08 01 90 5D |  if_ne	jmp	#LR__0093
01c5c                 | LR__0089
01c5c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01c5c     37 00 00 FF 
01c60     24 E4 05 F1 | 	add	objptr, ##28196
01c64     F2 2C 02 FB | 	rdlong	local04, objptr
01c68     37 00 00 FF 
01c6c     24 E4 85 F1 | 	sub	objptr, ##28196
01c70     FF FF 7F FF 
01c74     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c78     3C 00 90 5D |  if_ne	jmp	#LR__0090
01c7c     52 00 00 FF 
01c80     F4 E4 05 F1 | 	add	objptr, ##42228
01c84     F2 12 02 FB | 	rdlong	arg01, objptr
01c88     52 00 00 FF 
01c8c     F4 E4 85 F1 | 	sub	objptr, ##42228
01c90     B2 01 00 FF 
01c94     1A 15 06 F6 | 	mov	arg02, ##@LR__5406
01c98     F8 4C B2 FD | 	call	#__system___string_cmp
01c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
01ca0     37 00 00 AF 
01ca4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01ca8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01cac     37 00 00 AF 
01cb0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01cb4     AC 00 90 AD |  if_e	jmp	#LR__0093
01cb8                 | LR__0090
01cb8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01cb8     37 00 00 FF 
01cbc     24 E4 05 F1 | 	add	objptr, ##28196
01cc0     F2 2C 02 FB | 	rdlong	local04, objptr
01cc4     37 00 00 FF 
01cc8     24 E4 85 F1 | 	sub	objptr, ##28196
01ccc     04 2C 0E F2 | 	cmp	local04, #4 wz
01cd0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01cd4     52 00 00 FF 
01cd8     F4 E4 05 F1 | 	add	objptr, ##42228
01cdc     F2 12 02 FB | 	rdlong	arg01, objptr
01ce0     52 00 00 FF 
01ce4     F4 E4 85 F1 | 	sub	objptr, ##42228
01ce8     B2 01 00 FF 
01cec     1B 15 06 F6 | 	mov	arg02, ##@LR__5407
01cf0     A0 4C B2 FD | 	call	#__system___string_cmp
01cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
01cf8     37 00 00 5F 
01cfc     24 E4 05 51 |  if_ne	add	objptr, ##28196
01d00     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01d04     37 00 00 5F 
01d08     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01d0c     54 00 90 5D |  if_ne	jmp	#LR__0093
01d10                 | LR__0091
01d10                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01d10     37 00 00 FF 
01d14     24 E4 05 F1 | 	add	objptr, ##28196
01d18     F2 2C 02 FB | 	rdlong	local04, objptr
01d1c     37 00 00 FF 
01d20     24 E4 85 F1 | 	sub	objptr, ##28196
01d24     04 2C 0E F2 | 	cmp	local04, #4 wz
01d28     38 00 90 5D |  if_ne	jmp	#LR__0092
01d2c     52 00 00 FF 
01d30     F4 E4 05 F1 | 	add	objptr, ##42228
01d34     F2 12 02 FB | 	rdlong	arg01, objptr
01d38     52 00 00 FF 
01d3c     F4 E4 85 F1 | 	sub	objptr, ##42228
01d40     B2 01 00 FF 
01d44     1C 15 06 F6 | 	mov	arg02, ##@LR__5408
01d48     48 4C B2 FD | 	call	#__system___string_cmp
01d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
01d50     37 00 00 AF 
01d54     24 E4 05 A1 |  if_e	add	objptr, ##28196
01d58     F2 04 68 AC |  if_e	wrlong	#2, objptr
01d5c     37 00 00 AF 
01d60     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01d64                 | LR__0092
01d64                 | LR__0093
01d64     38 4E 05 F1 | 	add	fp, #56
01d68     A7 00 68 FC | 	wrlong	#0, fp
01d6c     38 4E 85 F1 | 	sub	fp, #56
01d70     00 28 06 F6 | 	mov	local02, #0
01d74     01 42 06 F6 | 	mov	local15, #1
01d78                 | ' 
01d78                 | ' ' 1b: find separators
01d78                 | ' 
01d78                 | ' 107
01d78                 | ' separators(0)=0
01d78                 | ' i=0: j=1
01d78                 | ' do: 
01d78                 | LR__0094
01d78     01 28 06 F1 | 	add	local02, #1
01d7c     37 00 00 FF 
01d80     1C E4 05 F1 | 	add	objptr, ##28188
01d84     F2 12 02 FB | 	rdlong	arg01, objptr
01d88     37 00 00 FF 
01d8c     1C E4 85 F1 | 	sub	objptr, ##28188
01d90     14 15 02 F6 | 	mov	arg02, local02
01d94     01 16 06 F6 | 	mov	arg03, #1
01d98     68 6D B2 FD | 	call	#__system__Mid_S
01d9c     FD 44 02 F6 | 	mov	local16, result1
01da0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01da0     22 13 02 F6 | 	mov	arg01, local16
01da4     30 2E B0 FD | 	call	#_isseparator
01da8     00 FA 0D F2 | 	cmp	result1, #0 wz
01dac     1C 00 90 AD |  if_e	jmp	#LR__0095
01db0     21 2B 02 F6 | 	mov	local03, local15
01db4     02 2A 66 F0 | 	shl	local03, #2
01db8     38 4E 05 F1 | 	add	fp, #56
01dbc     A7 2A 02 F1 | 	add	local03, fp
01dc0     15 29 62 FC | 	wrlong	local02, local03
01dc4     01 42 06 F1 | 	add	local15, #1
01dc8     38 4E 85 F1 | 	sub	fp, #56
01dcc                 | LR__0095
01dcc     52 00 00 FF 
01dd0     F0 E4 05 F1 | 	add	objptr, ##42224
01dd4     F2 2C 02 FB | 	rdlong	local04, objptr
01dd8     52 00 00 FF 
01ddc     F0 E4 85 F1 | 	sub	objptr, ##42224
01de0     16 29 5A F2 | 	cmps	local02, local04 wcz
01de4     90 FF 9F ED |  if_be	jmp	#LR__0094
01de8     21 2B 02 F6 | 	mov	local03, local15
01dec     02 2A 66 F0 | 	shl	local03, #2
01df0     38 4E 05 F1 | 	add	fp, #56
01df4     A7 38 02 F6 | 	mov	local10, fp
01df8     A7 2A 02 F1 | 	add	local03, fp
01dfc     15 29 62 FC | 	wrlong	local02, local03
01e00     00 46 06 F6 | 	mov	local17, #0
01e04                 | ' for i=0 to j-1 
01e04     00 28 06 F6 | 	mov	local02, #0
01e08     21 49 02 F6 | 	mov	local18, local15
01e0c     38 4E 85 F1 | 	sub	fp, #56
01e10                 | LR__0096
01e10     24 29 52 F2 | 	cmps	local02, local18 wc
01e14     50 01 90 3D |  if_ae	jmp	#LR__0100
01e18     14 2B 02 F6 | 	mov	local03, local02
01e1c     02 2A 66 F0 | 	shl	local03, #2
01e20     38 4E 05 F1 | 	add	fp, #56
01e24     A7 2A 02 F1 | 	add	local03, fp
01e28     15 2F 02 FB | 	rdlong	local05, local03
01e2c     52 00 00 FF 
01e30     FC E4 05 F1 | 	add	objptr, ##42236
01e34     F2 2E 62 FC | 	wrlong	local05, objptr
01e38     14 2B 02 F6 | 	mov	local03, local02
01e3c     01 2A 06 F1 | 	add	local03, #1
01e40     02 2A 66 F0 | 	shl	local03, #2
01e44     A7 38 02 F6 | 	mov	local10, fp
01e48     A7 2A 02 F1 | 	add	local03, fp
01e4c     15 2F 02 FB | 	rdlong	local05, local03
01e50     04 E4 05 F1 | 	add	objptr, #4
01e54     F2 2E 62 FC | 	wrlong	local05, objptr
01e58                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e58     04 E4 85 F1 | 	sub	objptr, #4
01e5c     F2 2C 02 FB | 	rdlong	local04, objptr
01e60     52 00 00 FF 
01e64     FC E4 85 F1 | 	sub	objptr, ##42236
01e68     01 2C 56 F2 | 	cmps	local04, #1 wc
01e6c     38 4E 85 F1 | 	sub	fp, #56
01e70     68 00 90 CD |  if_b	jmp	#LR__0098
01e74     37 00 00 FF 
01e78     1C E4 05 F1 | 	add	objptr, ##28188
01e7c     F2 12 02 FB | 	rdlong	arg01, objptr
01e80     1B 00 00 FF 
01e84     E0 E4 05 F1 | 	add	objptr, ##14048
01e88     F2 14 02 FB | 	rdlong	arg02, objptr
01e8c     52 00 00 FF 
01e90     FC E4 85 F1 | 	sub	objptr, ##42236
01e94     01 16 06 F6 | 	mov	arg03, #1
01e98     68 6C B2 FD | 	call	#__system__Mid_S
01e9c     FD 4A 02 F6 | 	mov	local19, result1
01ea0     B2 01 00 FF 
01ea4     1D 15 06 F6 | 	mov	arg02, ##@LR__5409
01ea8     25 13 02 F6 | 	mov	arg01, local19
01eac     E4 4A B2 FD | 	call	#__system___string_cmp
01eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
01eb4     24 00 90 AD |  if_e	jmp	#LR__0097
01eb8     23 39 02 F6 | 	mov	local10, local17
01ebc     03 38 66 F0 | 	shl	local10, #3
01ec0     35 00 00 FF 
01ec4     0C E4 05 F1 | 	add	objptr, ##27148
01ec8     F2 38 02 F1 | 	add	local10, objptr
01ecc     1C 4B 62 FC | 	wrlong	local19, local10
01ed0     01 46 06 F1 | 	add	local17, #1
01ed4     35 00 00 FF 
01ed8     0C E4 85 F1 | 	sub	objptr, ##27148
01edc                 | LR__0097
01edc                 | LR__0098
01edc     37 00 00 FF 
01ee0     1C E4 05 F1 | 	add	objptr, ##28188
01ee4     F2 12 02 FB | 	rdlong	arg01, objptr
01ee8     1B 00 00 FF 
01eec     E0 E4 05 F1 | 	add	objptr, ##14048
01ef0     F2 14 02 FB | 	rdlong	arg02, objptr
01ef4     01 14 06 F1 | 	add	arg02, #1
01ef8     04 E4 05 F1 | 	add	objptr, #4
01efc     F2 16 02 FB | 	rdlong	arg03, objptr
01f00     04 E4 85 F1 | 	sub	objptr, #4
01f04     F2 3A 02 FB | 	rdlong	local11, objptr
01f08     52 00 00 FF 
01f0c     FC E4 85 F1 | 	sub	objptr, ##42236
01f10     1D 3D 02 F6 | 	mov	local12, local11
01f14     1E 17 82 F1 | 	sub	arg03, local12
01f18     01 16 86 F1 | 	sub	arg03, #1
01f1c     E4 6B B2 FD | 	call	#__system__Mid_S
01f20     FD 4A 02 F6 | 	mov	local19, result1
01f24                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f24     B2 01 00 FF 
01f28     1E 15 06 F6 | 	mov	arg02, ##@LR__5410
01f2c     25 13 02 F6 | 	mov	arg01, local19
01f30     60 4A B2 FD | 	call	#__system___string_cmp
01f34     00 FA 0D F2 | 	cmp	result1, #0 wz
01f38     24 00 90 AD |  if_e	jmp	#LR__0099
01f3c     23 39 02 F6 | 	mov	local10, local17
01f40     03 38 66 F0 | 	shl	local10, #3
01f44     35 00 00 FF 
01f48     0C E4 05 F1 | 	add	objptr, ##27148
01f4c     F2 38 02 F1 | 	add	local10, objptr
01f50     1C 4B 62 FC | 	wrlong	local19, local10
01f54     01 46 06 F1 | 	add	local17, #1
01f58     35 00 00 FF 
01f5c     0C E4 85 F1 | 	sub	objptr, ##27148
01f60                 | LR__0099
01f60     01 28 06 F1 | 	add	local02, #1
01f64     A8 FE 9F FD | 	jmp	#LR__0096
01f68                 | LR__0100
01f68                 | ' 
01f68                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01f68                 | ' 
01f68                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01f68     37 00 00 FF 
01f6c     24 E4 05 F1 | 	add	objptr, ##28196
01f70     F2 2C 0A FB | 	rdlong	local04, objptr wz
01f74     37 00 00 FF 
01f78     24 E4 85 F1 | 	sub	objptr, ##28196
01f7c     37 00 00 5F 
01f80     24 E4 05 51 |  if_ne	add	objptr, ##28196
01f84     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01f88     37 00 00 5F 
01f8c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01f90     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01f94     B8 00 90 5D |  if_ne	jmp	#LR__0103
01f98     35 00 00 FF 
01f9c     0C E4 05 F1 | 	add	objptr, ##27148
01fa0     F2 3A 02 FB | 	rdlong	local11, objptr
01fa4     35 00 00 FF 
01fa8     0C E4 85 F1 | 	sub	objptr, ##27148
01fac     1D 13 02 F6 | 	mov	arg01, local11
01fb0     28 4F B0 FD | 	call	#_isdec
01fb4     FD 3C 02 F6 | 	mov	local12, result1
01fb8     1E 31 22 F6 | 	not	local06, local12
01fbc     00 30 0E F2 | 	cmp	local06, #0 wz
01fc0     8C 00 90 AD |  if_e	jmp	#LR__0103
01fc4     23 29 02 F6 | 	mov	local02, local17
01fc8     35 00 00 FF 
01fcc     0C E4 05 F1 | 	add	objptr, ##27148
01fd0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01fd4                 | LR__0101
01fd4     14 2F 02 F6 | 	mov	local05, local02
01fd8     01 2E 86 F1 | 	sub	local05, #1
01fdc     03 2E 66 F0 | 	shl	local05, #3
01fe0     F2 2E 02 F1 | 	add	local05, objptr
01fe4     17 2D 02 FB | 	rdlong	local04, local05
01fe8     14 31 02 F6 | 	mov	local06, local02
01fec     01 30 86 F1 | 	sub	local06, #1
01ff0     03 30 66 F0 | 	shl	local06, #3
01ff4     F2 30 02 F1 | 	add	local06, objptr
01ff8     04 30 06 F1 | 	add	local06, #4
01ffc     18 2B 02 FB | 	rdlong	local03, local06
02000     14 31 02 F6 | 	mov	local06, local02
02004     03 30 66 F0 | 	shl	local06, #3
02008     F2 3C 02 F6 | 	mov	local12, objptr
0200c     F2 30 02 F1 | 	add	local06, objptr
02010     18 2D 62 FC | 	wrlong	local04, local06
02014     14 3B 02 F6 | 	mov	local11, local02
02018     1D 3F 02 F6 | 	mov	local13, local11
0201c     03 3E 66 F0 | 	shl	local13, #3
02020     F2 3E 02 F1 | 	add	local13, objptr
02024     04 3E 06 F1 | 	add	local13, #4
02028     1F 2B 62 FC | 	wrlong	local03, local13
0202c     01 28 86 F1 | 	sub	local02, #1
02030     01 28 56 F2 | 	cmps	local02, #1 wc
02034     9C FF 9F 3D |  if_ae	jmp	#LR__0101
02038                 | LR__0102
02038     B2 01 00 FF 
0203c     1F 2D 06 F6 | 	mov	local04, ##@LR__5411
02040     F2 2C 62 FC | 	wrlong	local04, objptr
02044     35 00 00 FF 
02048     0C E4 85 F1 | 	sub	objptr, ##27148
0204c     01 46 06 F1 | 	add	local17, #1
02050                 | LR__0103
02050     00 28 06 F6 | 	mov	local02, #0
02054                 | ' 
02054                 | ' ' 1e : find strings
02054                 | ' 
02054                 | ' i=0
02054                 | ' do
02054                 | LR__0104
02054                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
02054     14 2F 02 F6 | 	mov	local05, local02
02058     03 2E 66 F0 | 	shl	local05, #3
0205c     35 00 00 FF 
02060     0C E4 05 F1 | 	add	objptr, ##27148
02064     F2 2E 02 F1 | 	add	local05, objptr
02068     17 13 02 FB | 	rdlong	arg01, local05
0206c     B2 01 00 FF 
02070     21 15 06 F6 | 	mov	arg02, ##@LR__5412
02074     35 00 00 FF 
02078     0C E4 85 F1 | 	sub	objptr, ##27148
0207c     14 49 B2 FD | 	call	#__system___string_cmp
02080     00 FA 0D F2 | 	cmp	result1, #0 wz
02084     01 28 06 51 |  if_ne	add	local02, #1
02088     20 01 90 5D |  if_ne	jmp	#LR__0109
0208c     14 4D 02 F6 | 	mov	local20, local02
02090                 | LR__0105
02090     14 39 02 F6 | 	mov	local10, local02
02094     01 38 06 F1 | 	add	local10, #1
02098     03 38 66 F0 | 	shl	local10, #3
0209c     35 00 00 FF 
020a0     0C E4 05 F1 | 	add	objptr, ##27148
020a4     F2 38 02 F1 | 	add	local10, objptr
020a8     1C 4B 02 FB | 	rdlong	local19, local10
020ac     26 39 02 F6 | 	mov	local10, local20
020b0     03 38 66 F0 | 	shl	local10, #3
020b4     F2 38 02 F1 | 	add	local10, objptr
020b8     26 3B 02 F6 | 	mov	local11, local20
020bc     1D 41 02 F6 | 	mov	local14, local11
020c0     03 40 66 F0 | 	shl	local14, #3
020c4     F2 40 02 F1 | 	add	local14, objptr
020c8     20 13 02 FB | 	rdlong	arg01, local14
020cc     25 3D 02 F6 | 	mov	local12, local19
020d0     1E 15 02 F6 | 	mov	arg02, local12
020d4     35 00 00 FF 
020d8     0C E4 85 F1 | 	sub	objptr, ##27148
020dc     E8 48 B2 FD | 	call	#__system___string_concat
020e0     1C FB 61 FC | 	wrlong	result1, local10
020e4     14 43 02 F6 | 	mov	local15, local02
020e8     01 42 06 F1 | 	add	local15, #1
020ec     23 4F 02 F6 | 	mov	local21, local17
020f0     01 4E 06 F1 | 	add	local21, #1
020f4     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
020f8                 | LR__0106
020f8     27 43 52 F2 | 	cmps	local15, local21 wc
020fc     70 00 90 3D |  if_ae	jmp	#LR__0108
02100     21 2F 02 F6 | 	mov	local05, local15
02104     01 2E 06 F1 | 	add	local05, #1
02108     03 2E 66 F0 | 	shl	local05, #3
0210c     35 00 00 FF 
02110     0C E4 05 F1 | 	add	objptr, ##27148
02114     F2 2E 02 F1 | 	add	local05, objptr
02118     17 2D 02 FB | 	rdlong	local04, local05
0211c     21 31 02 F6 | 	mov	local06, local15
02120     01 30 06 F1 | 	add	local06, #1
02124     03 30 66 F0 | 	shl	local06, #3
02128     F2 30 02 F1 | 	add	local06, objptr
0212c     04 30 06 F1 | 	add	local06, #4
02130     18 2B 02 FB | 	rdlong	local03, local06
02134     21 31 02 F6 | 	mov	local06, local15
02138     03 30 66 F0 | 	shl	local06, #3
0213c     F2 3C 02 F6 | 	mov	local12, objptr
02140     F2 30 02 F1 | 	add	local06, objptr
02144     18 2D 62 FC | 	wrlong	local04, local06
02148     21 3B 02 F6 | 	mov	local11, local15
0214c     1D 3F 02 F6 | 	mov	local13, local11
02150     03 3E 66 F0 | 	shl	local13, #3
02154     F2 3E 02 F1 | 	add	local13, objptr
02158     04 3E 06 F1 | 	add	local13, #4
0215c     1F 2B 62 FC | 	wrlong	local03, local13
02160     01 42 06 F1 | 	add	local15, #1
02164     35 00 00 FF 
02168     0C E4 85 F1 | 	sub	objptr, ##27148
0216c     88 FF 9F FD | 	jmp	#LR__0106
02170                 | LR__0107
02170                 | LR__0108
02170     01 46 86 F1 | 	sub	local17, #1
02174     B2 01 00 FF 
02178     23 15 06 F6 | 	mov	arg02, ##@LR__5413
0217c     25 13 02 F6 | 	mov	arg01, local19
02180     10 48 B2 FD | 	call	#__system___string_cmp
02184     00 FA 0D F2 | 	cmp	result1, #0 wz
02188     23 29 52 52 |  if_ne	cmps	local02, local17 wc
0218c     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
02190                 | '   if p$<>"""" then k+=1:i+=1
02190     B2 01 00 FF 
02194     25 15 06 F6 | 	mov	arg02, ##@LR__5414
02198     25 13 02 F6 | 	mov	arg01, local19
0219c     F4 47 B2 FD | 	call	#__system___string_cmp
021a0     00 FA 0D F2 | 	cmp	result1, #0 wz
021a4     01 46 06 51 |  if_ne	add	local17, #1
021a8     01 28 06 51 |  if_ne	add	local02, #1
021ac                 | LR__0109
021ac     23 29 52 F2 | 	cmps	local02, local17 wc
021b0     A0 FE 9F CD |  if_b	jmp	#LR__0104
021b4     00 28 06 F6 | 	mov	local02, #0
021b8                 | ' 
021b8                 | ' ' 1f : concatenate strings if "" detected between
021b8                 | '  
021b8                 | ' i=0
021b8                 | ' do
021b8                 | LR__0110
021b8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
021b8     14 2F 02 F6 | 	mov	local05, local02
021bc     03 2E 66 F0 | 	shl	local05, #3
021c0     35 00 00 FF 
021c4     0C E4 05 F1 | 	add	objptr, ##27148
021c8     F2 30 02 F6 | 	mov	local06, objptr
021cc     F2 2E 02 F1 | 	add	local05, objptr
021d0     17 13 02 FB | 	rdlong	arg01, local05
021d4     01 14 06 F6 | 	mov	arg02, #1
021d8     35 00 00 FF 
021dc     0C E4 85 F1 | 	sub	objptr, ##27148
021e0     90 68 B2 FD | 	call	#__system__Right_S
021e4     FD 12 02 F6 | 	mov	arg01, result1
021e8     B2 01 00 FF 
021ec     27 15 06 F6 | 	mov	arg02, ##@LR__5415
021f0     A0 47 B2 FD | 	call	#__system___string_cmp
021f4     00 FA 0D F2 | 	cmp	result1, #0 wz
021f8     7C 01 90 5D |  if_ne	jmp	#LR__0116
021fc     14 31 02 F6 | 	mov	local06, local02
02200     01 30 06 F1 | 	add	local06, #1
02204     03 30 66 F0 | 	shl	local06, #3
02208     35 00 00 FF 
0220c     0C E4 05 F1 | 	add	objptr, ##27148
02210     F2 3C 02 F6 | 	mov	local12, objptr
02214     F2 30 02 F1 | 	add	local06, objptr
02218     18 13 02 FB | 	rdlong	arg01, local06
0221c     01 14 06 F6 | 	mov	arg02, #1
02220     35 00 00 FF 
02224     0C E4 85 F1 | 	sub	objptr, ##27148
02228     C0 67 B2 FD | 	call	#__system__Left_S
0222c     FD 12 02 F6 | 	mov	arg01, result1
02230     B2 01 00 FF 
02234     29 15 06 F6 | 	mov	arg02, ##@LR__5416
02238     58 47 B2 FD | 	call	#__system___string_cmp
0223c     00 FA 0D F2 | 	cmp	result1, #0 wz
02240     34 01 90 5D |  if_ne	jmp	#LR__0116
02244     14 39 02 F6 | 	mov	local10, local02
02248     03 38 66 F0 | 	shl	local10, #3
0224c     35 00 00 FF 
02250     0C E4 05 F1 | 	add	objptr, ##27148
02254     F2 38 02 F1 | 	add	local10, objptr
02258     14 41 02 F6 | 	mov	local14, local02
0225c     03 40 66 F0 | 	shl	local14, #3
02260     F2 40 02 F1 | 	add	local14, objptr
02264     20 31 02 FB | 	rdlong	local06, local14
02268     14 3F 02 F6 | 	mov	local13, local02
0226c     01 3E 06 F1 | 	add	local13, #1
02270     03 3E 66 F0 | 	shl	local13, #3
02274     F2 3E 02 F1 | 	add	local13, objptr
02278     1F 3D 02 FB | 	rdlong	local12, local13
0227c     14 51 02 F6 | 	mov	local22, local02
02280     01 50 06 F1 | 	add	local22, #1
02284     28 53 02 F6 | 	mov	local23, local22
02288     03 52 66 F0 | 	shl	local23, #3
0228c     F2 54 02 F6 | 	mov	local24, objptr
02290     F2 52 02 F1 | 	add	local23, objptr
02294     29 13 02 FB | 	rdlong	arg01, local23
02298     35 00 00 FF 
0229c     0C E4 85 F1 | 	sub	objptr, ##27148
022a0     09 33 02 F6 | 	mov	local07, arg01
022a4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
022a8                 | LR__0111
022a8     19 FB C9 FA | 	rdbyte	result1, local07 wz
022ac     01 32 06 51 |  if_ne	add	local07, #1
022b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
022b4                 | LR__0112
022b4     09 33 82 F1 | 	sub	local07, arg01
022b8     19 3B 02 F6 | 	mov	local11, local07
022bc     01 3A 86 F1 | 	sub	local11, #1
022c0     1E 13 02 F6 | 	mov	arg01, local12
022c4     1D 15 02 F6 | 	mov	arg02, local11
022c8     A8 67 B2 FD | 	call	#__system__Right_S
022cc     FD 3C 02 F6 | 	mov	local12, result1
022d0     18 13 02 F6 | 	mov	arg01, local06
022d4     1E 15 02 F6 | 	mov	arg02, local12
022d8     EC 46 B2 FD | 	call	#__system___string_concat
022dc     FD 30 02 F6 | 	mov	local06, result1
022e0     1C 31 62 FC | 	wrlong	local06, local10
022e4                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
022e4     14 43 02 F6 | 	mov	local15, local02
022e8     01 42 06 F1 | 	add	local15, #1
022ec     23 57 02 F6 | 	mov	local25, local17
022f0     01 56 06 F1 | 	add	local25, #1
022f4     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
022f8                 | LR__0113
022f8     2B 43 52 F2 | 	cmps	local15, local25 wc
022fc     70 00 90 3D |  if_ae	jmp	#LR__0115
02300     21 2F 02 F6 | 	mov	local05, local15
02304     01 2E 06 F1 | 	add	local05, #1
02308     03 2E 66 F0 | 	shl	local05, #3
0230c     35 00 00 FF 
02310     0C E4 05 F1 | 	add	objptr, ##27148
02314     F2 2E 02 F1 | 	add	local05, objptr
02318     17 2D 02 FB | 	rdlong	local04, local05
0231c     21 31 02 F6 | 	mov	local06, local15
02320     01 30 06 F1 | 	add	local06, #1
02324     03 30 66 F0 | 	shl	local06, #3
02328     F2 30 02 F1 | 	add	local06, objptr
0232c     04 30 06 F1 | 	add	local06, #4
02330     18 2B 02 FB | 	rdlong	local03, local06
02334     21 31 02 F6 | 	mov	local06, local15
02338     03 30 66 F0 | 	shl	local06, #3
0233c     F2 3C 02 F6 | 	mov	local12, objptr
02340     F2 30 02 F1 | 	add	local06, objptr
02344     18 2D 62 FC | 	wrlong	local04, local06
02348     21 3B 02 F6 | 	mov	local11, local15
0234c     1D 3F 02 F6 | 	mov	local13, local11
02350     03 3E 66 F0 | 	shl	local13, #3
02354     F2 3E 02 F1 | 	add	local13, objptr
02358     04 3E 06 F1 | 	add	local13, #4
0235c     1F 2B 62 FC | 	wrlong	local03, local13
02360     01 42 06 F1 | 	add	local15, #1
02364     35 00 00 FF 
02368     0C E4 85 F1 | 	sub	objptr, ##27148
0236c     88 FF 9F FD | 	jmp	#LR__0113
02370                 | LR__0114
02370                 | LR__0115
02370     01 28 86 F1 | 	sub	local02, #1
02374     01 46 86 F1 | 	sub	local17, #1
02378                 | LR__0116
02378     01 28 06 F1 | 	add	local02, #1
0237c     23 29 52 F2 | 	cmps	local02, local17 wc
02380     34 FE 9F CD |  if_b	jmp	#LR__0110
02384     00 28 06 F6 | 	mov	local02, #0
02388                 | '  
02388                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
02388                 | '  
02388                 | ' i=0 
02388                 | ' do
02388                 | LR__0117
02388     14 39 02 F6 | 	mov	local10, local02
0238c     03 38 66 F0 | 	shl	local10, #3
02390     35 00 00 FF 
02394     0C E4 05 F1 | 	add	objptr, ##27148
02398     F2 38 02 F1 | 	add	local10, objptr
0239c     1C 59 02 FB | 	rdlong	local26, local10
023a0     14 39 02 F6 | 	mov	local10, local02
023a4     01 38 06 F1 | 	add	local10, #1
023a8     03 38 66 F0 | 	shl	local10, #3
023ac     F2 38 02 F1 | 	add	local10, objptr
023b0     1C 5B 02 FB | 	rdlong	local27, local10
023b4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
023b4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
023b4     B2 01 00 FF 
023b8     2B 15 06 F6 | 	mov	arg02, ##@LR__5417
023bc     2C 13 02 F6 | 	mov	arg01, local26
023c0     35 00 00 FF 
023c4     0C E4 85 F1 | 	sub	objptr, ##27148
023c8     C8 45 B2 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     A8 00 90 AD |  if_e	jmp	#LR__0118
023d4     B2 01 00 FF 
023d8     2D 15 06 F6 | 	mov	arg02, ##@LR__5418
023dc     2C 13 02 F6 | 	mov	arg01, local26
023e0     B0 45 B2 FD | 	call	#__system___string_cmp
023e4     FD 2A 0A F6 | 	mov	local03, result1 wz
023e8     90 00 90 AD |  if_e	jmp	#LR__0118
023ec     B2 01 00 FF 
023f0     2F 31 06 F6 | 	mov	local06, ##@LR__5419
023f4     2C 13 02 F6 | 	mov	arg01, local26
023f8     18 15 02 F6 | 	mov	arg02, local06
023fc     94 45 B2 FD | 	call	#__system___string_cmp
02400     00 FA 0D F2 | 	cmp	result1, #0 wz
02404     74 00 90 AD |  if_e	jmp	#LR__0118
02408     B2 01 00 FF 
0240c     31 3D 06 F6 | 	mov	local12, ##@LR__5420
02410     2C 13 02 F6 | 	mov	arg01, local26
02414     1E 15 02 F6 | 	mov	arg02, local12
02418     78 45 B2 FD | 	call	#__system___string_cmp
0241c     00 FA 0D F2 | 	cmp	result1, #0 wz
02420     58 00 90 AD |  if_e	jmp	#LR__0118
02424     B2 01 00 FF 
02428     33 3B 06 F6 | 	mov	local11, ##@LR__5421
0242c     1D 3D 02 F6 | 	mov	local12, local11
02430     2C 13 02 F6 | 	mov	arg01, local26
02434     1E 15 02 F6 | 	mov	arg02, local12
02438     58 45 B2 FD | 	call	#__system___string_cmp
0243c     FD 30 0A F6 | 	mov	local06, result1 wz
02440     38 00 90 AD |  if_e	jmp	#LR__0118
02444     B2 01 00 FF 
02448     35 3B 06 F6 | 	mov	local11, ##@LR__5422
0244c     2C 13 02 F6 | 	mov	arg01, local26
02450     1D 15 02 F6 | 	mov	arg02, local11
02454     3C 45 B2 FD | 	call	#__system___string_cmp
02458     FD 3C 0A F6 | 	mov	local12, result1 wz
0245c     1C 00 90 AD |  if_e	jmp	#LR__0118
02460     B2 01 00 FF 
02464     37 41 06 F6 | 	mov	local14, ##@LR__5423
02468     2C 13 02 F6 | 	mov	arg01, local26
0246c     20 15 02 F6 | 	mov	arg02, local14
02470     20 45 B2 FD | 	call	#__system___string_cmp
02474     FD 3A 0A F6 | 	mov	local11, result1 wz
02478     20 00 90 5D |  if_ne	jmp	#LR__0119
0247c                 | LR__0118
0247c     B2 01 00 FF 
02480     39 5D 06 F6 | 	mov	local28, ##@LR__5424
02484     2E 3F 02 F6 | 	mov	local13, local28
02488     2D 13 02 F6 | 	mov	arg01, local27
0248c     1F 15 02 F6 | 	mov	arg02, local13
02490     00 45 B2 FD | 	call	#__system___string_cmp
02494     FD 40 0A F6 | 	mov	local14, result1 wz
02498     B8 00 90 AD |  if_e	jmp	#LR__0122
0249c                 | LR__0119
0249c     B2 01 00 FF 
024a0     3B 5D 06 F6 | 	mov	local28, ##@LR__5425
024a4     2C 13 02 F6 | 	mov	arg01, local26
024a8     2E 15 02 F6 | 	mov	arg02, local28
024ac     E4 44 B2 FD | 	call	#__system___string_cmp
024b0     FD 3E 0A F6 | 	mov	local13, result1 wz
024b4     20 00 90 5D |  if_ne	jmp	#LR__0120
024b8     B2 01 00 FF 
024bc     3D 53 06 F6 | 	mov	local23, ##@LR__5426
024c0     29 51 02 F6 | 	mov	local22, local23
024c4     2D 13 02 F6 | 	mov	arg01, local27
024c8     28 15 02 F6 | 	mov	arg02, local22
024cc     C4 44 B2 FD | 	call	#__system___string_cmp
024d0     FD 5C 0A F6 | 	mov	local28, result1 wz
024d4     7C 00 90 AD |  if_e	jmp	#LR__0122
024d8                 | LR__0120
024d8     B2 01 00 FF 
024dc     3F 53 06 F6 | 	mov	local23, ##@LR__5427
024e0     2C 13 02 F6 | 	mov	arg01, local26
024e4     29 15 02 F6 | 	mov	arg02, local23
024e8     A8 44 B2 FD | 	call	#__system___string_cmp
024ec     FD 50 0A F6 | 	mov	local22, result1 wz
024f0     20 00 90 5D |  if_ne	jmp	#LR__0121
024f4     B2 01 00 FF 
024f8     41 5F 06 F6 | 	mov	local29, ##@LR__5428
024fc     2F 55 02 F6 | 	mov	local24, local29
02500     2D 13 02 F6 | 	mov	arg01, local27
02504     2A 15 02 F6 | 	mov	arg02, local24
02508     88 44 B2 FD | 	call	#__system___string_cmp
0250c     FD 52 0A F6 | 	mov	local23, result1 wz
02510     40 00 90 AD |  if_e	jmp	#LR__0122
02514                 | LR__0121
02514     B2 01 00 FF 
02518     43 61 06 F6 | 	mov	local30, ##@LR__5429
0251c     30 5F 02 F6 | 	mov	local29, local30
02520     2C 13 02 F6 | 	mov	arg01, local26
02524     2F 15 02 F6 | 	mov	arg02, local29
02528     68 44 B2 FD | 	call	#__system___string_cmp
0252c     FD 54 0A F6 | 	mov	local24, result1 wz
02530     F0 00 90 5D |  if_ne	jmp	#LR__0126
02534     B2 01 00 FF 
02538     45 63 06 F6 | 	mov	local31, ##@LR__5430
0253c     31 61 02 F6 | 	mov	local30, local31
02540     2D 13 02 F6 | 	mov	arg01, local27
02544     30 15 02 F6 | 	mov	arg02, local30
02548     48 44 B2 FD | 	call	#__system___string_cmp
0254c     FD 5E 0A F6 | 	mov	local29, result1 wz
02550     D0 00 90 5D |  if_ne	jmp	#LR__0126
02554                 | LR__0122
02554     14 39 02 F6 | 	mov	local10, local02
02558     03 38 66 F0 | 	shl	local10, #3
0255c     35 00 00 FF 
02560     0C E4 05 F1 | 	add	objptr, ##27148
02564     F2 38 02 F1 | 	add	local10, objptr
02568     2D 3D 02 F6 | 	mov	local12, local27
0256c     2C 13 02 F6 | 	mov	arg01, local26
02570     1E 15 02 F6 | 	mov	arg02, local12
02574     35 00 00 FF 
02578     0C E4 85 F1 | 	sub	objptr, ##27148
0257c     48 44 B2 FD | 	call	#__system___string_concat
02580     1C FB 61 FC | 	wrlong	result1, local10
02584                 | '     lparts(i).part$=s1$+s2$
02584                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02584     14 43 02 F6 | 	mov	local15, local02
02588     01 42 06 F1 | 	add	local15, #1
0258c     23 65 02 F6 | 	mov	local32, local17
02590     01 64 06 F1 | 	add	local32, #1
02594     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
02598                 | LR__0123
02598     32 43 52 F2 | 	cmps	local15, local32 wc
0259c     7C 00 90 3D |  if_ae	jmp	#LR__0125
025a0     21 2F 02 F6 | 	mov	local05, local15
025a4     01 2E 06 F1 | 	add	local05, #1
025a8     03 2E 66 F0 | 	shl	local05, #3
025ac     35 00 00 FF 
025b0     0C E4 05 F1 | 	add	objptr, ##27148
025b4     F2 2E 02 F1 | 	add	local05, objptr
025b8     17 2D 02 FB | 	rdlong	local04, local05
025bc     21 31 02 F6 | 	mov	local06, local15
025c0     01 30 06 F1 | 	add	local06, #1
025c4     03 30 66 F0 | 	shl	local06, #3
025c8     F2 30 02 F1 | 	add	local06, objptr
025cc     04 30 06 F1 | 	add	local06, #4
025d0     18 2B 02 FB | 	rdlong	local03, local06
025d4     21 31 02 F6 | 	mov	local06, local15
025d8     03 30 66 F0 | 	shl	local06, #3
025dc     F2 3C 02 F6 | 	mov	local12, objptr
025e0     F2 30 02 F1 | 	add	local06, objptr
025e4     18 2D 62 FC | 	wrlong	local04, local06
025e8     21 3B 02 F6 | 	mov	local11, local15
025ec     1D 41 02 F6 | 	mov	local14, local11
025f0     20 3F 02 F6 | 	mov	local13, local14
025f4     03 3E 66 F0 | 	shl	local13, #3
025f8     F2 5C 02 F6 | 	mov	local28, objptr
025fc     F2 3E 02 F1 | 	add	local13, objptr
02600     04 3E 06 F1 | 	add	local13, #4
02604     1F 2B 62 FC | 	wrlong	local03, local13
02608     04 3E 86 F1 | 	sub	local13, #4
0260c     01 42 06 F1 | 	add	local15, #1
02610     35 00 00 FF 
02614     0C E4 85 F1 | 	sub	objptr, ##27148
02618     7C FF 9F FD | 	jmp	#LR__0123
0261c                 | LR__0124
0261c                 | LR__0125
0261c     01 28 86 F1 | 	sub	local02, #1
02620     01 46 86 F1 | 	sub	local17, #1
02624                 | LR__0126
02624     01 28 06 F1 | 	add	local02, #1
02628     23 29 52 F2 | 	cmps	local02, local17 wc
0262c     58 FD 9F CD |  if_b	jmp	#LR__0117
02630                 | '  
02630                 | ' ' 1h : now remove parts that are spaces
02630                 | ' 
02630                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02630     00 28 06 F6 | 	mov	local02, #0
02634     23 67 02 F6 | 	mov	local33, local17
02638     01 66 06 F1 | 	add	local33, #1
0263c                 | LR__0127
0263c     33 29 52 F2 | 	cmps	local02, local33 wc
02640     50 00 90 3D |  if_ae	jmp	#LR__0128
02644     14 39 02 F6 | 	mov	local10, local02
02648     03 38 66 F0 | 	shl	local10, #3
0264c     35 00 00 FF 
02650     0C E4 05 F1 | 	add	objptr, ##27148
02654     F2 38 02 F1 | 	add	local10, objptr
02658     14 3D 02 F6 | 	mov	local12, local02
0265c     1E 3B 02 F6 | 	mov	local11, local12
02660     1D 41 02 F6 | 	mov	local14, local11
02664     03 40 66 F0 | 	shl	local14, #3
02668     F2 3E 02 F6 | 	mov	local13, objptr
0266c     F2 40 02 F1 | 	add	local14, objptr
02670     20 13 02 FB | 	rdlong	arg01, local14
02674     35 00 00 FF 
02678     0C E4 85 F1 | 	sub	objptr, ##27148
0267c     FC 67 B2 FD | 	call	#__system__RTrim_S
02680     FD 12 02 F6 | 	mov	arg01, result1
02684     34 67 B2 FD | 	call	#__system__LTrim_S
02688     1C FB 61 FC | 	wrlong	result1, local10
0268c     01 28 06 F1 | 	add	local02, #1
02690     A8 FF 9F FD | 	jmp	#LR__0127
02694                 | LR__0128
02694     00 28 06 F6 | 	mov	local02, #0
02698     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
0269c                 | ' i=0
0269c                 | ' do 
0269c                 | LR__0129
0269c                 | '   if len(lparts(i).part$)=0 then 
0269c     14 2F 02 F6 | 	mov	local05, local02
026a0     03 2E 66 F0 | 	shl	local05, #3
026a4     35 00 00 FF 
026a8     0C E4 05 F1 | 	add	objptr, ##27148
026ac     F2 2E 02 F1 | 	add	local05, objptr
026b0     17 13 02 FB | 	rdlong	arg01, local05
026b4     35 00 00 FF 
026b8     0C E4 85 F1 | 	sub	objptr, ##27148
026bc     09 33 02 F6 | 	mov	local07, arg01
026c0                 | LR__0130
026c0     19 FB C9 FA | 	rdbyte	result1, local07 wz
026c4     01 32 06 51 |  if_ne	add	local07, #1
026c8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
026cc     09 33 8A F1 | 	sub	local07, arg01 wz
026d0     C4 00 90 5D |  if_ne	jmp	#LR__0134
026d4                 | '     if i=k-1 then k-=1  :  exit
026d4     23 2D 02 F6 | 	mov	local04, local17
026d8     01 2C 86 F1 | 	sub	local04, #1
026dc     16 29 0A F2 | 	cmp	local02, local04 wz
026e0     01 46 86 A1 |  if_e	sub	local17, #1
026e4     C4 00 90 AD |  if_e	jmp	#LR__0136
026e8                 | '     if i<k-1 then 
026e8     23 2D 02 F6 | 	mov	local04, local17
026ec     01 2C 86 F1 | 	sub	local04, #1
026f0     16 29 52 F2 | 	cmps	local02, local04 wc
026f4     A0 00 90 3D |  if_ae	jmp	#LR__0133
026f8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
026f8     14 43 02 F6 | 	mov	local15, local02
026fc     23 69 02 F6 | 	mov	local34, local17
02700     01 68 86 F1 | 	sub	local34, #1
02704                 | LR__0131
02704     34 43 52 F2 | 	cmps	local15, local34 wc
02708     80 00 90 3D |  if_ae	jmp	#LR__0132
0270c     21 2F 02 F6 | 	mov	local05, local15
02710     01 2E 06 F1 | 	add	local05, #1
02714     03 2E 66 F0 | 	shl	local05, #3
02718     35 00 00 FF 
0271c     0C E4 05 F1 | 	add	objptr, ##27148
02720     F2 2E 02 F1 | 	add	local05, objptr
02724     17 2D 02 FB | 	rdlong	local04, local05
02728     21 31 02 F6 | 	mov	local06, local15
0272c     01 30 06 F1 | 	add	local06, #1
02730     03 30 66 F0 | 	shl	local06, #3
02734     F2 30 02 F1 | 	add	local06, objptr
02738     04 30 06 F1 | 	add	local06, #4
0273c     18 2B 02 FB | 	rdlong	local03, local06
02740     21 39 02 F6 | 	mov	local10, local15
02744     1C 31 02 F6 | 	mov	local06, local10
02748     03 30 66 F0 | 	shl	local06, #3
0274c     F2 3C 02 F6 | 	mov	local12, objptr
02750     F2 30 02 F1 | 	add	local06, objptr
02754     18 2D 62 FC | 	wrlong	local04, local06
02758     21 3B 02 F6 | 	mov	local11, local15
0275c     1D 41 02 F6 | 	mov	local14, local11
02760     20 3F 02 F6 | 	mov	local13, local14
02764     03 3E 66 F0 | 	shl	local13, #3
02768     F2 5C 02 F6 | 	mov	local28, objptr
0276c     F2 3E 02 F1 | 	add	local13, objptr
02770     04 3E 06 F1 | 	add	local13, #4
02774     1F 2B 62 FC | 	wrlong	local03, local13
02778     04 3E 86 F1 | 	sub	local13, #4
0277c     01 42 06 F1 | 	add	local15, #1
02780     35 00 00 FF 
02784     0C E4 85 F1 | 	sub	objptr, ##27148
02788     78 FF 9F FD | 	jmp	#LR__0131
0278c                 | LR__0132
0278c     01 46 86 F1 | 	sub	local17, #1
02790                 | '       if i>0 then i-=1 
02790     01 28 56 F2 | 	cmps	local02, #1 wc
02794     01 28 86 31 |  if_ae	sub	local02, #1
02798                 | LR__0133
02798                 | LR__0134
02798     01 28 06 F1 | 	add	local02, #1
0279c     23 2D 02 F6 | 	mov	local04, local17
027a0     01 2C 86 F1 | 	sub	local04, #1
027a4     16 29 5A F2 | 	cmps	local02, local04 wcz
027a8     F0 FE 9F ED |  if_be	jmp	#LR__0129
027ac                 | LR__0135
027ac                 | LR__0136
027ac                 | ' 
027ac                 | ' ' 1i: lowercase all that is not a string
027ac                 | ' 
027ac                 | ' for j=0 to k-1
027ac     00 42 06 F6 | 	mov	local15, #0
027b0     23 6B 02 F6 | 	mov	local35, local17
027b4                 | LR__0137
027b4     35 43 52 F2 | 	cmps	local15, local35 wc
027b8     CC 00 90 3D |  if_ae	jmp	#LR__0140
027bc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
027bc     21 2F 02 F6 | 	mov	local05, local15
027c0     03 2E 66 F0 | 	shl	local05, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 2E 02 F1 | 	add	local05, objptr
027d0     17 13 02 FB | 	rdlong	arg01, local05
027d4     01 14 06 F6 | 	mov	arg02, #1
027d8     35 00 00 FF 
027dc     0C E4 85 F1 | 	sub	objptr, ##27148
027e0     08 62 B2 FD | 	call	#__system__Left_S
027e4     FD 12 02 F6 | 	mov	arg01, result1
027e8     B2 01 00 FF 
027ec     47 15 06 F6 | 	mov	arg02, ##@LR__5431
027f0     A0 41 B2 FD | 	call	#__system___string_cmp
027f4     00 FA 0D F2 | 	cmp	result1, #0 wz
027f8     44 00 90 5D |  if_ne	jmp	#LR__0138
027fc     21 31 02 F6 | 	mov	local06, local15
02800     03 30 66 F0 | 	shl	local06, #3
02804     35 00 00 FF 
02808     0C E4 05 F1 | 	add	objptr, ##27148
0280c     F2 3C 02 F6 | 	mov	local12, objptr
02810     F2 30 02 F1 | 	add	local06, objptr
02814     18 13 02 FB | 	rdlong	arg01, local06
02818     01 14 06 F6 | 	mov	arg02, #1
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     4C 62 B2 FD | 	call	#__system__Right_S
02828     FD 12 02 F6 | 	mov	arg01, result1
0282c     B2 01 00 FF 
02830     49 15 06 F6 | 	mov	arg02, ##@LR__5432
02834     5C 41 B2 FD | 	call	#__system___string_cmp
02838     00 FA 0D F2 | 	cmp	result1, #0 wz
0283c     40 00 90 AD |  if_e	jmp	#LR__0139
02840                 | LR__0138
02840     21 39 02 F6 | 	mov	local10, local15
02844     03 38 66 F0 | 	shl	local10, #3
02848     35 00 00 FF 
0284c     0C E4 05 F1 | 	add	objptr, ##27148
02850     F2 38 02 F1 | 	add	local10, objptr
02854     21 3D 02 F6 | 	mov	local12, local15
02858     1E 3B 02 F6 | 	mov	local11, local12
0285c     1D 41 02 F6 | 	mov	local14, local11
02860     03 40 66 F0 | 	shl	local14, #3
02864     F2 3E 02 F6 | 	mov	local13, objptr
02868     F2 40 02 F1 | 	add	local14, objptr
0286c     20 13 02 FB | 	rdlong	arg01, local14
02870     35 00 00 FF 
02874     0C E4 85 F1 | 	sub	objptr, ##27148
02878     80 64 B2 FD | 	call	#__system__LCase_S
0287c     1C FB 61 FC | 	wrlong	result1, local10
02880                 | LR__0139
02880     01 42 06 F1 | 	add	local15, #1
02884     2C FF 9F FD | 	jmp	#LR__0137
02888                 | LR__0140
02888                 | ' 
02888                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
02888                 | ' 
02888                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
02888     00 28 06 F6 | 	mov	local02, #0
0288c     23 6D 02 F6 | 	mov	local36, local17
02890     01 6C 06 F1 | 	add	local36, #1
02894     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
02898                 | LR__0141
02898     36 29 52 F2 | 	cmps	local02, local36 wc
0289c     30 00 90 3D |  if_ae	jmp	#LR__0143
028a0     14 39 02 F6 | 	mov	local10, local02
028a4     03 38 66 F0 | 	shl	local10, #3
028a8     35 00 00 FF 
028ac     0C E4 05 F1 | 	add	objptr, ##27148
028b0     F2 38 02 F1 | 	add	local10, objptr
028b4     04 38 06 F1 | 	add	local10, #4
028b8     FF FF FF FF 
028bc     1C FF 6B FC | 	wrlong	##-1, local10
028c0     01 28 06 F1 | 	add	local02, #1
028c4     35 00 00 FF 
028c8     0C E4 85 F1 | 	sub	objptr, ##27148
028cc     C8 FF 9F FD | 	jmp	#LR__0141
028d0                 | LR__0142
028d0                 | LR__0143
028d0                 | ' 
028d0                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 12 02 FB | 	rdlong	arg01, objptr
028dc     35 00 00 FF 
028e0     0C E4 85 F1 | 	sub	objptr, ##27148
028e4     F4 45 B0 FD | 	call	#_isdec
028e8     00 FA 0D F2 | 	cmp	result1, #0 wz
028ec     01 6E 06 56 |  if_ne	mov	local37, #1
028f0     00 6E 06 A6 |  if_e	mov	local37, #0
028f4                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
028f4     35 00 00 FF 
028f8     0C E4 05 F1 | 	add	objptr, ##27148
028fc     F2 12 02 FB | 	rdlong	arg01, objptr
02900     35 00 00 FF 
02904     0C E4 85 F1 | 	sub	objptr, ##27148
02908     B2 01 00 FF 
0290c     4B 15 06 F6 | 	mov	arg02, ##@LR__5433
02910     80 40 B2 FD | 	call	#__system___string_cmp
02914     00 FA 0D F2 | 	cmp	result1, #0 wz
02918     01 6E 06 A6 |  if_e	mov	local37, #1
0291c     00 28 06 F6 | 	mov	local02, #0
02920                 | ' i=0 : do 
02920                 | LR__0144
02920                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02920     14 2F 02 F6 | 	mov	local05, local02
02924     03 2E 66 F0 | 	shl	local05, #3
02928     35 00 00 FF 
0292c     0C E4 05 F1 | 	add	objptr, ##27148
02930     F2 2E 02 F1 | 	add	local05, objptr
02934     17 13 02 FB | 	rdlong	arg01, local05
02938     B2 01 00 FF 
0293c     50 15 06 F6 | 	mov	arg02, ##@LR__5434
02940     35 00 00 FF 
02944     0C E4 85 F1 | 	sub	objptr, ##27148
02948     48 40 B2 FD | 	call	#__system___string_cmp
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     0C 00 90 AD |  if_e	jmp	#LR__0145
02954     01 28 06 F1 | 	add	local02, #1
02958     23 29 5A F2 | 	cmps	local02, local17 wcz
0295c     C0 FF 9F ED |  if_be	jmp	#LR__0144
02960                 | LR__0145
02960                 | ' if i<k then addptr=i+1	 							' then found
02960     23 29 52 F2 | 	cmps	local02, local17 wc
02964     14 6F 02 C6 |  if_b	mov	local37, local02
02968     01 6E 06 C1 |  if_b	add	local37, #1
0296c     35 00 00 FF 
02970     0C E4 05 F1 | 	add	objptr, ##27148
02974                 | ' lp$=lparts(addptr).part$ 
02974                 | ' 
02974                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02974     37 2F 02 F6 | 	mov	local05, local37
02978     03 2E 66 F0 | 	shl	local05, #3
0297c     F2 2E 02 F1 | 	add	local05, objptr
02980     17 13 02 FB | 	rdlong	arg01, local05
02984     01 14 06 F6 | 	mov	arg02, #1
02988     35 00 00 FF 
0298c     0C E4 85 F1 | 	sub	objptr, ##27148
02990     58 60 B2 FD | 	call	#__system__Left_S
02994     FD 12 02 F6 | 	mov	arg01, result1
02998     B2 01 00 FF 
0299c     55 15 06 F6 | 	mov	arg02, ##@LR__5435
029a0     F0 3F B2 FD | 	call	#__system___string_cmp
029a4     00 FA 0D F2 | 	cmp	result1, #0 wz
029a8     60 01 90 5D |  if_ne	jmp	#LR__0152
029ac     37 31 02 F6 | 	mov	local06, local37
029b0     03 30 66 F0 | 	shl	local06, #3
029b4     35 00 00 FF 
029b8     0C E4 05 F1 | 	add	objptr, ##27148
029bc     F2 30 02 F1 | 	add	local06, objptr
029c0     18 13 02 FB | 	rdlong	arg01, local06
029c4     35 00 00 FF 
029c8     0C E4 85 F1 | 	sub	objptr, ##27148
029cc     09 33 02 F6 | 	mov	local07, arg01
029d0     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
029d4                 | LR__0146
029d4     19 FB C9 FA | 	rdbyte	result1, local07 wz
029d8     01 32 06 51 |  if_ne	add	local07, #1
029dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
029e0                 | LR__0147
029e0     09 33 82 F1 | 	sub	local07, arg01
029e4     02 32 56 F2 | 	cmps	local07, #2 wc
029e8     20 01 90 CD |  if_b	jmp	#LR__0152
029ec     01 46 06 F1 | 	add	local17, #1
029f0                 | '   k+=1
029f0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
029f0     23 29 02 F6 | 	mov	local02, local17
029f4     37 71 02 F6 | 	mov	local38, local37
029f8     01 70 06 F1 | 	add	local38, #1
029fc     35 00 00 FF 
02a00     0C E4 05 F1 | 	add	objptr, ##27148
02a04     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02a08                 | LR__0148
02a08     14 2F 02 F6 | 	mov	local05, local02
02a0c     01 2E 86 F1 | 	sub	local05, #1
02a10     03 2E 66 F0 | 	shl	local05, #3
02a14     F2 2E 02 F1 | 	add	local05, objptr
02a18     17 2D 02 FB | 	rdlong	local04, local05
02a1c     14 31 02 F6 | 	mov	local06, local02
02a20     01 30 86 F1 | 	sub	local06, #1
02a24     03 30 66 F0 | 	shl	local06, #3
02a28     F2 30 02 F1 | 	add	local06, objptr
02a2c     04 30 06 F1 | 	add	local06, #4
02a30     18 2B 02 FB | 	rdlong	local03, local06
02a34     14 31 02 F6 | 	mov	local06, local02
02a38     03 30 66 F0 | 	shl	local06, #3
02a3c     F2 30 02 F1 | 	add	local06, objptr
02a40     18 2D 62 FC | 	wrlong	local04, local06
02a44     14 3F 02 F6 | 	mov	local13, local02
02a48     03 3E 66 F0 | 	shl	local13, #3
02a4c     F2 3E 02 F1 | 	add	local13, objptr
02a50     04 3E 06 F1 | 	add	local13, #4
02a54     1F 2B 62 FC | 	wrlong	local03, local13
02a58     01 28 86 F1 | 	sub	local02, #1
02a5c     38 29 52 F2 | 	cmps	local02, local38 wc
02a60     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02a64                 | LR__0149
02a64     37 39 02 F6 | 	mov	local10, local37
02a68     01 38 06 F1 | 	add	local10, #1
02a6c     03 38 66 F0 | 	shl	local10, #3
02a70     F2 38 02 F1 | 	add	local10, objptr
02a74     37 41 02 F6 | 	mov	local14, local37
02a78     03 40 66 F0 | 	shl	local14, #3
02a7c     F2 40 02 F1 | 	add	local14, objptr
02a80     20 31 02 FB | 	rdlong	local06, local14
02a84     37 3F 02 F6 | 	mov	local13, local37
02a88     1F 5D 02 F6 | 	mov	local28, local13
02a8c     2E 51 02 F6 | 	mov	local22, local28
02a90     03 50 66 F0 | 	shl	local22, #3
02a94     F2 52 02 F6 | 	mov	local23, objptr
02a98     F2 50 02 F1 | 	add	local22, objptr
02a9c     28 13 02 FB | 	rdlong	arg01, local22
02aa0     35 00 00 FF 
02aa4     0C E4 85 F1 | 	sub	objptr, ##27148
02aa8     09 33 02 F6 | 	mov	local07, arg01
02aac     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02ab0                 | LR__0150
02ab0     19 FB C9 FA | 	rdbyte	result1, local07 wz
02ab4     01 32 06 51 |  if_ne	add	local07, #1
02ab8     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02abc                 | LR__0151
02abc     09 33 82 F1 | 	sub	local07, arg01
02ac0     19 41 02 F6 | 	mov	local14, local07
02ac4     20 3B 02 F6 | 	mov	local11, local14
02ac8     01 3A 86 F1 | 	sub	local11, #1
02acc     1D 3D 02 F6 | 	mov	local12, local11
02ad0     18 13 02 F6 | 	mov	arg01, local06
02ad4     1E 15 02 F6 | 	mov	arg02, local12
02ad8     98 5F B2 FD | 	call	#__system__Right_S
02adc     1C FB 61 FC | 	wrlong	result1, local10
02ae0     37 39 02 F6 | 	mov	local10, local37
02ae4     03 38 66 F0 | 	shl	local10, #3
02ae8     35 00 00 FF 
02aec     0C E4 05 F1 | 	add	objptr, ##27148
02af0     F2 38 02 F1 | 	add	local10, objptr
02af4     B2 01 00 FF 
02af8     57 31 06 F6 | 	mov	local06, ##@LR__5436
02afc     1C 31 62 FC | 	wrlong	local06, local10
02b00     35 00 00 FF 
02b04     0C E4 85 F1 | 	sub	objptr, ##27148
02b08     A8 01 90 FD | 	jmp	#LR__0160
02b0c                 | LR__0152
02b0c     37 31 02 F6 | 	mov	local06, local37
02b10     03 30 66 F0 | 	shl	local06, #3
02b14     35 00 00 FF 
02b18     0C E4 05 F1 | 	add	objptr, ##27148
02b1c     F2 3C 02 F6 | 	mov	local12, objptr
02b20     F2 30 02 F1 | 	add	local06, objptr
02b24     18 15 02 FB | 	rdlong	arg02, local06
02b28     B2 01 00 FF 
02b2c     59 17 06 F6 | 	mov	arg03, ##@LR__5437
02b30     01 12 06 F6 | 	mov	arg01, #1
02b34     35 00 00 FF 
02b38     0C E4 85 F1 | 	sub	objptr, ##27148
02b3c     F4 63 B2 FD | 	call	#__system__Instr
02b40     FD 72 02 F6 | 	mov	local39, result1
02b44                 | ' 
02b44                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02b44                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02b44     01 72 56 F2 | 	cmps	local39, #1 wc
02b48     68 01 90 CD |  if_b	jmp	#LR__0159
02b4c     37 2F 02 F6 | 	mov	local05, local37
02b50     03 2E 66 F0 | 	shl	local05, #3
02b54     35 00 00 FF 
02b58     0C E4 05 F1 | 	add	objptr, ##27148
02b5c     F2 2E 02 F1 | 	add	local05, objptr
02b60     17 13 02 FB | 	rdlong	arg01, local05
02b64     35 00 00 FF 
02b68     0C E4 85 F1 | 	sub	objptr, ##27148
02b6c     09 33 02 F6 | 	mov	local07, arg01
02b70     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02b74                 | LR__0153
02b74     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b78     01 32 06 51 |  if_ne	add	local07, #1
02b7c     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02b80                 | LR__0154
02b80     09 33 82 F1 | 	sub	local07, arg01
02b84     19 73 52 F2 | 	cmps	local39, local07 wc
02b88     28 01 90 3D |  if_ae	jmp	#LR__0159
02b8c     01 46 06 F1 | 	add	local17, #1
02b90                 | '   k+=1
02b90                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02b90     23 29 02 F6 | 	mov	local02, local17
02b94     37 75 02 F6 | 	mov	local40, local37
02b98     01 74 06 F1 | 	add	local40, #1
02b9c     35 00 00 FF 
02ba0     0C E4 05 F1 | 	add	objptr, ##27148
02ba4     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ba8                 | LR__0155
02ba8     14 2F 02 F6 | 	mov	local05, local02
02bac     01 2E 86 F1 | 	sub	local05, #1
02bb0     03 2E 66 F0 | 	shl	local05, #3
02bb4     F2 2E 02 F1 | 	add	local05, objptr
02bb8     17 2D 02 FB | 	rdlong	local04, local05
02bbc     14 31 02 F6 | 	mov	local06, local02
02bc0     01 30 86 F1 | 	sub	local06, #1
02bc4     03 30 66 F0 | 	shl	local06, #3
02bc8     F2 30 02 F1 | 	add	local06, objptr
02bcc     04 30 06 F1 | 	add	local06, #4
02bd0     18 2B 02 FB | 	rdlong	local03, local06
02bd4     14 31 02 F6 | 	mov	local06, local02
02bd8     03 30 66 F0 | 	shl	local06, #3
02bdc     F2 30 02 F1 | 	add	local06, objptr
02be0     18 2D 62 FC | 	wrlong	local04, local06
02be4     14 3F 02 F6 | 	mov	local13, local02
02be8     03 3E 66 F0 | 	shl	local13, #3
02bec     F2 3E 02 F1 | 	add	local13, objptr
02bf0     04 3E 06 F1 | 	add	local13, #4
02bf4     1F 2B 62 FC | 	wrlong	local03, local13
02bf8     01 28 86 F1 | 	sub	local02, #1
02bfc     3A 29 52 F2 | 	cmps	local02, local40 wc
02c00     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02c04                 | LR__0156
02c04     37 39 02 F6 | 	mov	local10, local37
02c08     01 38 06 F1 | 	add	local10, #1
02c0c     03 38 66 F0 | 	shl	local10, #3
02c10     F2 38 02 F1 | 	add	local10, objptr
02c14     37 41 02 F6 | 	mov	local14, local37
02c18     03 40 66 F0 | 	shl	local14, #3
02c1c     F2 40 02 F1 | 	add	local14, objptr
02c20     20 31 02 FB | 	rdlong	local06, local14
02c24     37 5D 02 F6 | 	mov	local28, local37
02c28     2E 51 02 F6 | 	mov	local22, local28
02c2c     03 50 66 F0 | 	shl	local22, #3
02c30     F2 52 02 F6 | 	mov	local23, objptr
02c34     F2 50 02 F1 | 	add	local22, objptr
02c38     28 13 02 FB | 	rdlong	arg01, local22
02c3c     35 00 00 FF 
02c40     0C E4 85 F1 | 	sub	objptr, ##27148
02c44     09 33 02 F6 | 	mov	local07, arg01
02c48     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02c4c                 | LR__0157
02c4c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02c50     01 32 06 51 |  if_ne	add	local07, #1
02c54     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02c58                 | LR__0158
02c58     09 33 82 F1 | 	sub	local07, arg01
02c5c     19 15 02 F6 | 	mov	arg02, local07
02c60     39 15 82 F1 | 	sub	arg02, local39
02c64     18 13 02 F6 | 	mov	arg01, local06
02c68     08 5E B2 FD | 	call	#__system__Right_S
02c6c     1C FB 61 FC | 	wrlong	result1, local10
02c70     37 39 02 F6 | 	mov	local10, local37
02c74     03 38 66 F0 | 	shl	local10, #3
02c78     35 00 00 FF 
02c7c     0C E4 05 F1 | 	add	objptr, ##27148
02c80     F2 38 02 F1 | 	add	local10, objptr
02c84     37 3B 02 F6 | 	mov	local11, local37
02c88     1D 41 02 F6 | 	mov	local14, local11
02c8c     03 40 66 F0 | 	shl	local14, #3
02c90     F2 3E 02 F6 | 	mov	local13, objptr
02c94     F2 40 02 F1 | 	add	local14, objptr
02c98     20 13 02 FB | 	rdlong	arg01, local14
02c9c     39 3D 02 F6 | 	mov	local12, local39
02ca0     1E 15 02 F6 | 	mov	arg02, local12
02ca4     35 00 00 FF 
02ca8     0C E4 85 F1 | 	sub	objptr, ##27148
02cac     3C 5D B2 FD | 	call	#__system__Left_S
02cb0     1C FB 61 FC | 	wrlong	result1, local10
02cb4                 | LR__0159
02cb4                 | LR__0160
02cb4     37 39 02 F6 | 	mov	local10, local37
02cb8     03 38 66 F0 | 	shl	local10, #3
02cbc     35 00 00 FF 
02cc0     0C E4 05 F1 | 	add	objptr, ##27148
02cc4     F2 38 02 F1 | 	add	local10, objptr
02cc8     1C 77 02 FB | 	rdlong	local41, local10
02ccc                 | ' 
02ccc                 | ' 825
02ccc                 | ' lp$=lparts(addptr).part$ 
02ccc                 | ' 
02ccc                 | ' ' process mouse/cursor/click on/off
02ccc                 | ' 
02ccc                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02ccc     B2 01 00 FF 
02cd0     5B 15 06 F6 | 	mov	arg02, ##@LR__5438
02cd4     3B 13 02 F6 | 	mov	arg01, local41
02cd8     35 00 00 FF 
02cdc     0C E4 85 F1 | 	sub	objptr, ##27148
02ce0     B0 3C B2 FD | 	call	#__system___string_cmp
02ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce8     30 00 90 AD |  if_e	jmp	#LR__0161
02cec     B2 01 00 FF 
02cf0     61 15 06 F6 | 	mov	arg02, ##@LR__5439
02cf4     3B 13 02 F6 | 	mov	arg01, local41
02cf8     98 3C B2 FD | 	call	#__system___string_cmp
02cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02d00     18 00 90 AD |  if_e	jmp	#LR__0161
02d04     B2 01 00 FF 
02d08     68 15 06 F6 | 	mov	arg02, ##@LR__5440
02d0c     3B 13 02 F6 | 	mov	arg01, local41
02d10     80 3C B2 FD | 	call	#__system___string_cmp
02d14     00 FA 0D F2 | 	cmp	result1, #0 wz
02d18     E0 00 90 5D |  if_ne	jmp	#LR__0164
02d1c                 | LR__0161
02d1c                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02d1c     37 2F 02 F6 | 	mov	local05, local37
02d20     01 2E 06 F1 | 	add	local05, #1
02d24     03 2E 66 F0 | 	shl	local05, #3
02d28     35 00 00 FF 
02d2c     0C E4 05 F1 | 	add	objptr, ##27148
02d30     F2 2E 02 F1 | 	add	local05, objptr
02d34     17 13 02 FB | 	rdlong	arg01, local05
02d38     B2 01 00 FF 
02d3c     6E 15 06 F6 | 	mov	arg02, ##@LR__5441
02d40     35 00 00 FF 
02d44     0C E4 85 F1 | 	sub	objptr, ##27148
02d48     48 3C B2 FD | 	call	#__system___string_cmp
02d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d50     38 00 90 5D |  if_ne	jmp	#LR__0162
02d54     37 39 02 F6 | 	mov	local10, local37
02d58     01 38 06 F1 | 	add	local10, #1
02d5c     03 38 66 F0 | 	shl	local10, #3
02d60     35 00 00 FF 
02d64     0C E4 05 F1 | 	add	objptr, ##27148
02d68     F2 38 02 F1 | 	add	local10, objptr
02d6c     B2 01 00 FF 
02d70     71 31 06 F6 | 	mov	local06, ##@LR__5442
02d74     1C 31 62 FC | 	wrlong	local06, local10
02d78     14 E4 05 F1 | 	add	objptr, #20
02d7c     01 00 80 FF 
02d80     F2 00 68 FC | 	wrlong	##512, objptr
02d84     35 00 00 FF 
02d88     20 E4 85 F1 | 	sub	objptr, ##27168
02d8c                 | LR__0162
02d8c                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02d8c     37 2F 02 F6 | 	mov	local05, local37
02d90     01 2E 06 F1 | 	add	local05, #1
02d94     03 2E 66 F0 | 	shl	local05, #3
02d98     35 00 00 FF 
02d9c     0C E4 05 F1 | 	add	objptr, ##27148
02da0     F2 2E 02 F1 | 	add	local05, objptr
02da4     17 13 02 FB | 	rdlong	arg01, local05
02da8     B2 01 00 FF 
02dac     73 15 06 F6 | 	mov	arg02, ##@LR__5443
02db0     35 00 00 FF 
02db4     0C E4 85 F1 | 	sub	objptr, ##27148
02db8     D8 3B B2 FD | 	call	#__system___string_cmp
02dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
02dc0     38 00 90 5D |  if_ne	jmp	#LR__0163
02dc4     37 39 02 F6 | 	mov	local10, local37
02dc8     01 38 06 F1 | 	add	local10, #1
02dcc     03 38 66 F0 | 	shl	local10, #3
02dd0     35 00 00 FF 
02dd4     0C E4 05 F1 | 	add	objptr, ##27148
02dd8     F2 38 02 F1 | 	add	local10, objptr
02ddc     B2 01 00 FF 
02de0     77 31 06 F6 | 	mov	local06, ##@LR__5444
02de4     1C 31 62 FC | 	wrlong	local06, local10
02de8     14 E4 05 F1 | 	add	objptr, #20
02dec     01 00 80 FF 
02df0     F2 00 68 FC | 	wrlong	##512, objptr
02df4     35 00 00 FF 
02df8     20 E4 85 F1 | 	sub	objptr, ##27168
02dfc                 | LR__0163
02dfc                 | LR__0164
02dfc                 | ' 		
02dfc                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02dfc                 | ' 
02dfc                 | ' if (lp$="mode" orelse lp$="m.") then 
02dfc     B2 01 00 FF 
02e00     79 15 06 F6 | 	mov	arg02, ##@LR__5445
02e04     3B 13 02 F6 | 	mov	arg01, local41
02e08     88 3B B2 FD | 	call	#__system___string_cmp
02e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e10     18 00 90 AD |  if_e	jmp	#LR__0165
02e14     B2 01 00 FF 
02e18     7E 15 06 F6 | 	mov	arg02, ##@LR__5446
02e1c     3B 13 02 F6 | 	mov	arg01, local41
02e20     70 3B B2 FD | 	call	#__system___string_cmp
02e24     00 FA 0D F2 | 	cmp	result1, #0 wz
02e28     F4 01 90 5D |  if_ne	jmp	#LR__0171
02e2c                 | LR__0165
02e2c                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02e2c     37 2F 02 F6 | 	mov	local05, local37
02e30     01 2E 06 F1 | 	add	local05, #1
02e34     03 2E 66 F0 | 	shl	local05, #3
02e38     35 00 00 FF 
02e3c     0C E4 05 F1 | 	add	objptr, ##27148
02e40     F2 2E 02 F1 | 	add	local05, objptr
02e44     17 13 02 FB | 	rdlong	arg01, local05
02e48     B2 01 00 FF 
02e4c     81 15 06 F6 | 	mov	arg02, ##@LR__5447
02e50     35 00 00 FF 
02e54     0C E4 85 F1 | 	sub	objptr, ##27148
02e58     38 3B B2 FD | 	call	#__system___string_cmp
02e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e60     2C 00 90 5D |  if_ne	jmp	#LR__0166
02e64     37 39 02 F6 | 	mov	local10, local37
02e68     01 38 06 F1 | 	add	local10, #1
02e6c     03 38 66 F0 | 	shl	local10, #3
02e70     35 00 00 FF 
02e74     0C E4 05 F1 | 	add	objptr, ##27148
02e78     F2 38 02 F1 | 	add	local10, objptr
02e7c     B2 01 00 FF 
02e80     87 31 06 F6 | 	mov	local06, ##@LR__5448
02e84     1C 31 62 FC | 	wrlong	local06, local10
02e88     35 00 00 FF 
02e8c     0C E4 85 F1 | 	sub	objptr, ##27148
02e90                 | LR__0166
02e90                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02e90     37 2F 02 F6 | 	mov	local05, local37
02e94     01 2E 06 F1 | 	add	local05, #1
02e98     03 2E 66 F0 | 	shl	local05, #3
02e9c     35 00 00 FF 
02ea0     0C E4 05 F1 | 	add	objptr, ##27148
02ea4     F2 2E 02 F1 | 	add	local05, objptr
02ea8     17 13 02 FB | 	rdlong	arg01, local05
02eac     B2 01 00 FF 
02eb0     89 15 06 F6 | 	mov	arg02, ##@LR__5449
02eb4     35 00 00 FF 
02eb8     0C E4 85 F1 | 	sub	objptr, ##27148
02ebc     D4 3A B2 FD | 	call	#__system___string_cmp
02ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec4     2C 00 90 5D |  if_ne	jmp	#LR__0167
02ec8     37 39 02 F6 | 	mov	local10, local37
02ecc     01 38 06 F1 | 	add	local10, #1
02ed0     03 38 66 F0 | 	shl	local10, #3
02ed4     35 00 00 FF 
02ed8     0C E4 05 F1 | 	add	objptr, ##27148
02edc     F2 38 02 F1 | 	add	local10, objptr
02ee0     B2 01 00 FF 
02ee4     92 31 06 F6 | 	mov	local06, ##@LR__5450
02ee8     1C 31 62 FC | 	wrlong	local06, local10
02eec     35 00 00 FF 
02ef0     0C E4 85 F1 | 	sub	objptr, ##27148
02ef4                 | LR__0167
02ef4                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02ef4     37 2F 02 F6 | 	mov	local05, local37
02ef8     01 2E 06 F1 | 	add	local05, #1
02efc     03 2E 66 F0 | 	shl	local05, #3
02f00     35 00 00 FF 
02f04     0C E4 05 F1 | 	add	objptr, ##27148
02f08     F2 2E 02 F1 | 	add	local05, objptr
02f0c     17 13 02 FB | 	rdlong	arg01, local05
02f10     B2 01 00 FF 
02f14     94 15 06 F6 | 	mov	arg02, ##@LR__5451
02f18     35 00 00 FF 
02f1c     0C E4 85 F1 | 	sub	objptr, ##27148
02f20     70 3A B2 FD | 	call	#__system___string_cmp
02f24     00 FA 0D F2 | 	cmp	result1, #0 wz
02f28     2C 00 90 5D |  if_ne	jmp	#LR__0168
02f2c     37 39 02 F6 | 	mov	local10, local37
02f30     01 38 06 F1 | 	add	local10, #1
02f34     03 38 66 F0 | 	shl	local10, #3
02f38     35 00 00 FF 
02f3c     0C E4 05 F1 | 	add	objptr, ##27148
02f40     F2 38 02 F1 | 	add	local10, objptr
02f44     B2 01 00 FF 
02f48     9D 31 06 F6 | 	mov	local06, ##@LR__5452
02f4c     1C 31 62 FC | 	wrlong	local06, local10
02f50     35 00 00 FF 
02f54     0C E4 85 F1 | 	sub	objptr, ##27148
02f58                 | LR__0168
02f58                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02f58     37 2F 02 F6 | 	mov	local05, local37
02f5c     01 2E 06 F1 | 	add	local05, #1
02f60     03 2E 66 F0 | 	shl	local05, #3
02f64     35 00 00 FF 
02f68     0C E4 05 F1 | 	add	objptr, ##27148
02f6c     F2 2E 02 F1 | 	add	local05, objptr
02f70     17 13 02 FB | 	rdlong	arg01, local05
02f74     B2 01 00 FF 
02f78     9F 15 06 F6 | 	mov	arg02, ##@LR__5453
02f7c     35 00 00 FF 
02f80     0C E4 85 F1 | 	sub	objptr, ##27148
02f84     0C 3A B2 FD | 	call	#__system___string_cmp
02f88     00 FA 0D F2 | 	cmp	result1, #0 wz
02f8c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f90     37 39 02 F6 | 	mov	local10, local37
02f94     01 38 06 F1 | 	add	local10, #1
02f98     03 38 66 F0 | 	shl	local10, #3
02f9c     35 00 00 FF 
02fa0     0C E4 05 F1 | 	add	objptr, ##27148
02fa4     F2 38 02 F1 | 	add	local10, objptr
02fa8     B2 01 00 FF 
02fac     A8 31 06 F6 | 	mov	local06, ##@LR__5454
02fb0     1C 31 62 FC | 	wrlong	local06, local10
02fb4     35 00 00 FF 
02fb8     0C E4 85 F1 | 	sub	objptr, ##27148
02fbc                 | LR__0169
02fbc                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02fbc     37 2F 02 F6 | 	mov	local05, local37
02fc0     01 2E 06 F1 | 	add	local05, #1
02fc4     03 2E 66 F0 | 	shl	local05, #3
02fc8     35 00 00 FF 
02fcc     0C E4 05 F1 | 	add	objptr, ##27148
02fd0     F2 2E 02 F1 | 	add	local05, objptr
02fd4     17 13 02 FB | 	rdlong	arg01, local05
02fd8     B2 01 00 FF 
02fdc     AA 15 06 F6 | 	mov	arg02, ##@LR__5455
02fe0     35 00 00 FF 
02fe4     0C E4 85 F1 | 	sub	objptr, ##27148
02fe8     A8 39 B2 FD | 	call	#__system___string_cmp
02fec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff0     2C 00 90 5D |  if_ne	jmp	#LR__0170
02ff4     37 39 02 F6 | 	mov	local10, local37
02ff8     01 38 06 F1 | 	add	local10, #1
02ffc     03 38 66 F0 | 	shl	local10, #3
03000     35 00 00 FF 
03004     0C E4 05 F1 | 	add	objptr, ##27148
03008     F2 38 02 F1 | 	add	local10, objptr
0300c     B2 01 00 FF 
03010     AD 31 06 F6 | 	mov	local06, ##@LR__5456
03014     1C 31 62 FC | 	wrlong	local06, local10
03018     35 00 00 FF 
0301c     0C E4 85 F1 | 	sub	objptr, ##27148
03020                 | LR__0170
03020                 | LR__0171
03020                 | ' 
03020                 | ' ' find part types 
03020                 | ' 
03020                 | ' for i=0 to k-1
03020     00 28 06 F6 | 	mov	local02, #0
03024     23 79 02 F6 | 	mov	local42, local17
03028                 | LR__0172
03028     3C 29 52 F2 | 	cmps	local02, local42 wc
0302c     A4 07 90 3D |  if_ae	jmp	#LR__0184
03030     14 39 02 F6 | 	mov	local10, local02
03034     03 38 66 F0 | 	shl	local10, #3
03038     35 00 00 FF 
0303c     0C E4 05 F1 | 	add	objptr, ##27148
03040     F2 38 02 F1 | 	add	local10, objptr
03044     14 3B 02 F6 | 	mov	local11, local02
03048     1D 41 02 F6 | 	mov	local14, local11
0304c     20 3F 02 F6 | 	mov	local13, local14
03050     03 3E 66 F0 | 	shl	local13, #3
03054     F2 3E 02 F1 | 	add	local13, objptr
03058     1F 13 02 FB | 	rdlong	arg01, local13
0305c     35 00 00 FF 
03060     0C E4 85 F1 | 	sub	objptr, ##27148
03064     70 1B B0 FD | 	call	#_isseparator
03068     FD FA E1 F8 | 	getbyte	result1, result1, #0
0306c     04 38 06 F1 | 	add	local10, #4
03070     1C FB 61 FC | 	wrlong	result1, local10
03074                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03074     14 39 02 F6 | 	mov	local10, local02
03078     03 38 66 F0 | 	shl	local10, #3
0307c     35 00 00 FF 
03080     0C E4 05 F1 | 	add	objptr, ##27148
03084     F2 38 02 F1 | 	add	local10, objptr
03088     04 38 06 F1 | 	add	local10, #4
0308c     1C 3D 02 FB | 	rdlong	local12, local10
03090     01 3C 56 F2 | 	cmps	local12, #1 wc
03094     35 00 00 FF 
03098     0C E4 85 F1 | 	sub	objptr, ##27148
0309c     2C 07 90 3D |  if_ae	jmp	#LR__0183
030a0     14 39 02 F6 | 	mov	local10, local02
030a4     03 38 66 F0 | 	shl	local10, #3
030a8     35 00 00 FF 
030ac     0C E4 05 F1 | 	add	objptr, ##27148
030b0     F2 38 02 F1 | 	add	local10, objptr
030b4     14 3B 02 F6 | 	mov	local11, local02
030b8     1D 41 02 F6 | 	mov	local14, local11
030bc     20 3F 02 F6 | 	mov	local13, local14
030c0     03 3E 66 F0 | 	shl	local13, #3
030c4     F2 3E 02 F1 | 	add	local13, objptr
030c8     1F 13 02 FB | 	rdlong	arg01, local13
030cc     35 00 00 FF 
030d0     0C E4 85 F1 | 	sub	objptr, ##27148
030d4     4C 13 B0 FD | 	call	#_isoperator
030d8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030dc     04 38 06 F1 | 	add	local10, #4
030e0     1C FB 61 FC | 	wrlong	result1, local10
030e4                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030e4     14 39 02 F6 | 	mov	local10, local02
030e8     03 38 66 F0 | 	shl	local10, #3
030ec     35 00 00 FF 
030f0     0C E4 05 F1 | 	add	objptr, ##27148
030f4     F2 38 02 F1 | 	add	local10, objptr
030f8     04 38 06 F1 | 	add	local10, #4
030fc     1C 3D 02 FB | 	rdlong	local12, local10
03100     01 3C 56 F2 | 	cmps	local12, #1 wc
03104     35 00 00 FF 
03108     0C E4 85 F1 | 	sub	objptr, ##27148
0310c     BC 06 90 3D |  if_ae	jmp	#LR__0183
03110     14 39 02 F6 | 	mov	local10, local02
03114     03 38 66 F0 | 	shl	local10, #3
03118     35 00 00 FF 
0311c     0C E4 05 F1 | 	add	objptr, ##27148
03120     F2 38 02 F1 | 	add	local10, objptr
03124     14 3B 02 F6 | 	mov	local11, local02
03128     1D 41 02 F6 | 	mov	local14, local11
0312c     20 3F 02 F6 | 	mov	local13, local14
03130     03 3E 66 F0 | 	shl	local13, #3
03134     F2 3E 02 F1 | 	add	local13, objptr
03138     1F 13 02 FB | 	rdlong	arg01, local13
0313c     35 00 00 FF 
03140     0C E4 85 F1 | 	sub	objptr, ##27148
03144                 | ' 
03144                 | ' select case s
03144     B3 01 00 FF 
03148     B2 14 06 F6 | 	mov	arg02, ##@LR__5547
0314c     44 38 B2 FD | 	call	#__system___string_cmp
03150     00 FA 0D F2 | 	cmp	result1, #0 wz
03154     1B FA 05 A6 |  if_e	mov	result1, #27
03158     00 FA 05 56 |  if_ne	mov	result1, #0
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 38 06 F1 | 	add	local10, #4
03164     1C FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     04 38 06 F1 | 	add	local10, #4
03180     1C 3D 02 FB | 	rdlong	local12, local10
03184     01 3C 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     38 06 90 3D |  if_ae	jmp	#LR__0183
03194     14 39 02 F6 | 	mov	local10, local02
03198     03 38 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 38 02 F1 | 	add	local10, objptr
031a8     14 3B 02 F6 | 	mov	local11, local02
031ac     1D 41 02 F6 | 	mov	local14, local11
031b0     20 3F 02 F6 | 	mov	local13, local14
031b4     03 3E 66 F0 | 	shl	local13, #3
031b8     F2 3E 02 F1 | 	add	local13, objptr
031bc     1F 13 02 FB | 	rdlong	arg01, local13
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     0C 1C B0 FD | 	call	#_iscommand
031cc     FD FA E1 F8 | 	getbyte	result1, result1, #0
031d0     04 38 06 F1 | 	add	local10, #4
031d4     1C FB 61 FC | 	wrlong	result1, local10
031d8                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031d8     14 39 02 F6 | 	mov	local10, local02
031dc     03 38 66 F0 | 	shl	local10, #3
031e0     35 00 00 FF 
031e4     0C E4 05 F1 | 	add	objptr, ##27148
031e8     F2 38 02 F1 | 	add	local10, objptr
031ec     04 38 06 F1 | 	add	local10, #4
031f0     1C 3D 02 FB | 	rdlong	local12, local10
031f4     01 3C 56 F2 | 	cmps	local12, #1 wc
031f8     35 00 00 FF 
031fc     0C E4 85 F1 | 	sub	objptr, ##27148
03200     C8 05 90 3D |  if_ae	jmp	#LR__0183
03204     14 39 02 F6 | 	mov	local10, local02
03208     03 38 66 F0 | 	shl	local10, #3
0320c     35 00 00 FF 
03210     0C E4 05 F1 | 	add	objptr, ##27148
03214     F2 38 02 F1 | 	add	local10, objptr
03218     14 3B 02 F6 | 	mov	local11, local02
0321c     1D 41 02 F6 | 	mov	local14, local11
03220     20 3F 02 F6 | 	mov	local13, local14
03224     03 3E 66 F0 | 	shl	local13, #3
03228     F2 5C 02 F6 | 	mov	local28, objptr
0322c     F2 3E 02 F1 | 	add	local13, objptr
03230     1F 13 02 FB | 	rdlong	arg01, local13
03234     35 00 00 FF 
03238     0C E4 85 F1 | 	sub	objptr, ##27148
0323c     78 2C B0 FD | 	call	#_isfunction
03240     FD FA E1 F8 | 	getbyte	result1, result1, #0
03244     04 38 06 F1 | 	add	local10, #4
03248     1C FB 61 FC | 	wrlong	result1, local10
0324c                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0324c     14 39 02 F6 | 	mov	local10, local02
03250     03 38 66 F0 | 	shl	local10, #3
03254     35 00 00 FF 
03258     0C E4 05 F1 | 	add	objptr, ##27148
0325c     F2 38 02 F1 | 	add	local10, objptr
03260     04 38 06 F1 | 	add	local10, #4
03264     1C 3D 02 FB | 	rdlong	local12, local10
03268     01 3C 56 F2 | 	cmps	local12, #1 wc
0326c     35 00 00 FF 
03270     0C E4 85 F1 | 	sub	objptr, ##27148
03274     54 05 90 3D |  if_ae	jmp	#LR__0183
03278     14 39 02 F6 | 	mov	local10, local02
0327c     03 38 66 F0 | 	shl	local10, #3
03280     35 00 00 FF 
03284     0C E4 05 F1 | 	add	objptr, ##27148
03288     F2 38 02 F1 | 	add	local10, objptr
0328c     14 3B 02 F6 | 	mov	local11, local02
03290     1D 41 02 F6 | 	mov	local14, local11
03294     03 40 66 F0 | 	shl	local14, #3
03298     F2 3E 02 F6 | 	mov	local13, objptr
0329c     F2 40 02 F1 | 	add	local14, objptr
032a0     20 13 02 FB | 	rdlong	arg01, local14
032a4     35 00 00 FF 
032a8     0C E4 85 F1 | 	sub	objptr, ##27148
032ac     BC 15 B0 FD | 	call	#_isnotename
032b0     04 38 06 F1 | 	add	local10, #4
032b4     1C FB 61 FC | 	wrlong	result1, local10
032b8                 | ' lparts(i).token=isnotename(lparts(i).part$) 
032b8                 | ' if lparts(i).token>0 then 
032b8     14 39 02 F6 | 	mov	local10, local02
032bc     03 38 66 F0 | 	shl	local10, #3
032c0     35 00 00 FF 
032c4     0C E4 05 F1 | 	add	objptr, ##27148
032c8     F2 38 02 F1 | 	add	local10, objptr
032cc     04 38 06 F1 | 	add	local10, #4
032d0     1C 31 02 FB | 	rdlong	local06, local10
032d4     01 30 56 F2 | 	cmps	local06, #1 wc
032d8     35 00 00 FF 
032dc     0C E4 85 F1 | 	sub	objptr, ##27148
032e0     8C 00 90 CD |  if_b	jmp	#LR__0173
032e4     14 2F 02 F6 | 	mov	local05, local02
032e8     03 2E 66 F0 | 	shl	local05, #3
032ec     35 00 00 FF 
032f0     0C E4 05 F1 | 	add	objptr, ##27148
032f4     F2 2E 02 F1 | 	add	local05, objptr
032f8     04 2E 06 F1 | 	add	local05, #4
032fc     17 3D 02 FB | 	rdlong	local12, local05
03300     1E 13 02 F6 | 	mov	arg01, local12
03304     35 00 00 FF 
03308     0C E4 85 F1 | 	sub	objptr, ##27148
0330c     F0 3C B0 FD | 	call	#_getnoteval
03310     FD 7A 02 F6 | 	mov	local43, result1
03314     14 39 02 F6 | 	mov	local10, local02
03318     03 38 66 F0 | 	shl	local10, #3
0331c     35 00 00 FF 
03320     0C E4 05 F1 | 	add	objptr, ##27148
03324     F2 38 02 F1 | 	add	local10, objptr
03328     3D 13 02 F6 | 	mov	arg01, local43
0332c     35 00 00 FF 
03330     0C E4 85 F1 | 	sub	objptr, ##27148
03334     AC 58 B2 FD | 	call	#__system__str_S
03338     1C FB 61 FC | 	wrlong	result1, local10
0333c     14 2D 02 F6 | 	mov	local04, local02
03340     16 2B 02 F6 | 	mov	local03, local04
03344     15 39 02 F6 | 	mov	local10, local03
03348     03 38 66 F0 | 	shl	local10, #3
0334c     35 00 00 FF 
03350     0C E4 05 F1 | 	add	objptr, ##27148
03354     F2 38 02 F1 | 	add	local10, objptr
03358     04 38 06 F1 | 	add	local10, #4
0335c     01 00 80 FF 
03360     1C 05 68 FC | 	wrlong	##514, local10
03364     35 00 00 FF 
03368     0C E4 85 F1 | 	sub	objptr, ##27148
0336c     5C 04 90 FD | 	jmp	#LR__0183
03370                 | LR__0173
03370     14 39 02 F6 | 	mov	local10, local02
03374     03 38 66 F0 | 	shl	local10, #3
03378     35 00 00 FF 
0337c     0C E4 05 F1 | 	add	objptr, ##27148
03380     F2 38 02 F1 | 	add	local10, objptr
03384     14 41 02 F6 | 	mov	local14, local02
03388     03 40 66 F0 | 	shl	local14, #3
0338c     F2 40 02 F1 | 	add	local14, objptr
03390     20 13 02 FB | 	rdlong	arg01, local14
03394     35 00 00 FF 
03398     0C E4 85 F1 | 	sub	objptr, ##27148
0339c     64 13 B0 FD | 	call	#_ischannel
033a0     04 38 06 F1 | 	add	local10, #4
033a4     1C FB 61 FC | 	wrlong	result1, local10
033a8                 | ' 
033a8                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
033a8                 | ' 
033a8                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
033a8     14 39 02 F6 | 	mov	local10, local02
033ac     03 38 66 F0 | 	shl	local10, #3
033b0     35 00 00 FF 
033b4     0C E4 05 F1 | 	add	objptr, ##27148
033b8     F2 38 02 F1 | 	add	local10, objptr
033bc     04 38 06 F1 | 	add	local10, #4
033c0     1C 31 02 FB | 	rdlong	local06, local10
033c4     01 30 56 F2 | 	cmps	local06, #1 wc
033c8     35 00 00 FF 
033cc     0C E4 85 F1 | 	sub	objptr, ##27148
033d0     74 00 90 CD |  if_b	jmp	#LR__0174
033d4     14 39 02 F6 | 	mov	local10, local02
033d8     03 38 66 F0 | 	shl	local10, #3
033dc     35 00 00 FF 
033e0     0C E4 05 F1 | 	add	objptr, ##27148
033e4     F2 38 02 F1 | 	add	local10, objptr
033e8     14 3B 02 F6 | 	mov	local11, local02
033ec     1D 41 02 F6 | 	mov	local14, local11
033f0     03 40 66 F0 | 	shl	local14, #3
033f4     F2 3E 02 F6 | 	mov	local13, objptr
033f8     F2 40 02 F1 | 	add	local14, objptr
033fc     20 13 02 FB | 	rdlong	arg01, local14
03400     01 3C 06 F6 | 	mov	local12, #1
03404     01 14 06 F6 | 	mov	arg02, #1
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     60 56 B2 FD | 	call	#__system__Right_S
03414     1C FB 61 FC | 	wrlong	result1, local10
03418     14 2D 02 F6 | 	mov	local04, local02
0341c     16 2B 02 F6 | 	mov	local03, local04
03420     15 39 02 F6 | 	mov	local10, local03
03424     03 38 66 F0 | 	shl	local10, #3
03428     35 00 00 FF 
0342c     0C E4 05 F1 | 	add	objptr, ##27148
03430     F2 38 02 F1 | 	add	local10, objptr
03434     04 38 06 F1 | 	add	local10, #4
03438     1C 59 68 FC | 	wrlong	#44, local10
0343c     35 00 00 FF 
03440     0C E4 85 F1 | 	sub	objptr, ##27148
03444     84 03 90 FD | 	jmp	#LR__0183
03448                 | LR__0174
03448     14 39 02 F6 | 	mov	local10, local02
0344c     03 38 66 F0 | 	shl	local10, #3
03450     35 00 00 FF 
03454     0C E4 05 F1 | 	add	objptr, ##27148
03458     F2 38 02 F1 | 	add	local10, objptr
0345c     14 3B 02 F6 | 	mov	local11, local02
03460     1D 41 02 F6 | 	mov	local14, local11
03464     03 40 66 F0 | 	shl	local14, #3
03468     F2 3E 02 F6 | 	mov	local13, objptr
0346c     F2 40 02 F1 | 	add	local14, objptr
03470     20 13 02 FB | 	rdlong	arg01, local14
03474     35 00 00 FF 
03478     0C E4 85 F1 | 	sub	objptr, ##27148
0347c     6C 13 B0 FD | 	call	#_isconstant
03480     04 38 06 F1 | 	add	local10, #4
03484     1C FB 61 FC | 	wrlong	result1, local10
03488                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
03488     14 39 02 F6 | 	mov	local10, local02
0348c     03 38 66 F0 | 	shl	local10, #3
03490     35 00 00 FF 
03494     0C E4 05 F1 | 	add	objptr, ##27148
03498     F2 38 02 F1 | 	add	local10, objptr
0349c     04 38 06 F1 | 	add	local10, #4
034a0     1C 3D 02 FB | 	rdlong	local12, local10
034a4     01 3C 56 F2 | 	cmps	local12, #1 wc
034a8     35 00 00 FF 
034ac     0C E4 85 F1 | 	sub	objptr, ##27148
034b0     94 00 90 CD |  if_b	jmp	#LR__0175
034b4     14 39 02 F6 | 	mov	local10, local02
034b8     03 38 66 F0 | 	shl	local10, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 38 02 F1 | 	add	local10, objptr
034c8     14 3D 02 F6 | 	mov	local12, local02
034cc     1E 3B 02 F6 | 	mov	local11, local12
034d0     1D 41 02 F6 | 	mov	local14, local11
034d4     03 40 66 F0 | 	shl	local14, #3
034d8     F2 3E 02 F6 | 	mov	local13, objptr
034dc     F2 40 02 F1 | 	add	local14, objptr
034e0     04 40 06 F1 | 	add	local14, #4
034e4     20 13 02 FB | 	rdlong	arg01, local14
034e8     04 40 86 F1 | 	sub	local14, #4
034ec     35 00 00 FF 
034f0     0C E4 85 F1 | 	sub	objptr, ##27148
034f4     09 13 52 F6 | 	abs	arg01, arg01 wc
034f8     1F 7C C6 C9 |  if_b	decod	local44, #31
034fc     00 7C 06 36 |  if_ae	mov	local44, #0
03500     E0 5E B2 FD | 	call	#__system___float_fromuns
03504     3E FB 61 F5 | 	xor	result1, local44
03508     FD 12 02 F6 | 	mov	arg01, result1
0350c     D4 56 B2 FD | 	call	#__system__str_S
03510     1C FB 61 FC | 	wrlong	result1, local10
03514     14 2D 02 F6 | 	mov	local04, local02
03518     16 2B 02 F6 | 	mov	local03, local04
0351c     15 39 02 F6 | 	mov	local10, local03
03520     03 38 66 F0 | 	shl	local10, #3
03524     35 00 00 FF 
03528     0C E4 05 F1 | 	add	objptr, ##27148
0352c     F2 38 02 F1 | 	add	local10, objptr
03530     04 38 06 F1 | 	add	local10, #4
03534     01 00 80 FF 
03538     1C 03 68 FC | 	wrlong	##513, local10
0353c     35 00 00 FF 
03540     0C E4 85 F1 | 	sub	objptr, ##27148
03544     84 02 90 FD | 	jmp	#LR__0183
03548                 | LR__0175
03548     14 2F 02 F6 | 	mov	local05, local02
0354c     03 2E 66 F0 | 	shl	local05, #3
03550     35 00 00 FF 
03554     0C E4 05 F1 | 	add	objptr, ##27148
03558     F2 2E 02 F1 | 	add	local05, objptr
0355c     17 13 02 FB | 	rdlong	arg01, local05
03560     35 00 00 FF 
03564     0C E4 85 F1 | 	sub	objptr, ##27148
03568     E0 32 B0 FD | 	call	#_isnum
0356c     FD 7E 02 F6 | 	mov	local45, result1
03570     14 2F 02 F6 | 	mov	local05, local02
03574     03 2E 66 F0 | 	shl	local05, #3
03578     35 00 00 FF 
0357c     0C E4 05 F1 | 	add	objptr, ##27148
03580     F2 2E 02 F1 | 	add	local05, objptr
03584     17 13 02 FB | 	rdlong	arg01, local05
03588     35 00 00 FF 
0358c     0C E4 85 F1 | 	sub	objptr, ##27148
03590     A4 36 B0 FD | 	call	#_isint
03594     FD 80 02 F6 | 	mov	local46, result1
03598     14 2F 02 F6 | 	mov	local05, local02
0359c     03 2E 66 F0 | 	shl	local05, #3
035a0     35 00 00 FF 
035a4     0C E4 05 F1 | 	add	objptr, ##27148
035a8     F2 2E 02 F1 | 	add	local05, objptr
035ac     17 13 02 FB | 	rdlong	arg01, local05
035b0     35 00 00 FF 
035b4     0C E4 85 F1 | 	sub	objptr, ##27148
035b8     20 39 B0 FD | 	call	#_isdec
035bc     FD 82 02 F6 | 	mov	local47, result1
035c0                 | ' 
035c0                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
035c0                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
035c0     00 7E 0E F2 | 	cmp	local45, #0 wz
035c4     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
035c8     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
035cc     34 00 90 AD |  if_e	jmp	#LR__0176
035d0     14 2D 02 F6 | 	mov	local04, local02
035d4     16 2B 02 F6 | 	mov	local03, local04
035d8     15 39 02 F6 | 	mov	local10, local03
035dc     03 38 66 F0 | 	shl	local10, #3
035e0     35 00 00 FF 
035e4     0C E4 05 F1 | 	add	objptr, ##27148
035e8     F2 38 02 F1 | 	add	local10, objptr
035ec     04 38 06 F1 | 	add	local10, #4
035f0     01 00 80 FF 
035f4     1C 01 68 FC | 	wrlong	##512, local10
035f8     35 00 00 FF 
035fc     0C E4 85 F1 | 	sub	objptr, ##27148
03600     C8 01 90 FD | 	jmp	#LR__0183
03604                 | LR__0176
03604                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03604     00 7E 0E F2 | 	cmp	local45, #0 wz
03608     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
0360c     41 2D 22 56 |  if_ne	not	local04, local47
03610     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03614     34 00 90 AD |  if_e	jmp	#LR__0177
03618     14 2D 02 F6 | 	mov	local04, local02
0361c     16 2B 02 F6 | 	mov	local03, local04
03620     15 39 02 F6 | 	mov	local10, local03
03624     03 38 66 F0 | 	shl	local10, #3
03628     35 00 00 FF 
0362c     0C E4 05 F1 | 	add	objptr, ##27148
03630     F2 38 02 F1 | 	add	local10, objptr
03634     04 38 06 F1 | 	add	local10, #4
03638     01 00 80 FF 
0363c     1C 03 68 FC | 	wrlong	##513, local10
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     80 01 90 FD | 	jmp	#LR__0183
0364c                 | LR__0177
0364c                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
0364c     00 7E 0E F2 | 	cmp	local45, #0 wz
03650     40 2D 22 56 |  if_ne	not	local04, local46
03654     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03658     41 2B 22 56 |  if_ne	not	local03, local47
0365c     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
03660     34 00 90 AD |  if_e	jmp	#LR__0178
03664     14 2D 02 F6 | 	mov	local04, local02
03668     16 2B 02 F6 | 	mov	local03, local04
0366c     15 39 02 F6 | 	mov	local10, local03
03670     03 38 66 F0 | 	shl	local10, #3
03674     35 00 00 FF 
03678     0C E4 05 F1 | 	add	objptr, ##27148
0367c     F2 38 02 F1 | 	add	local10, objptr
03680     04 38 06 F1 | 	add	local10, #4
03684     01 00 80 FF 
03688     1C 05 68 FC | 	wrlong	##514, local10
0368c     35 00 00 FF 
03690     0C E4 85 F1 | 	sub	objptr, ##27148
03694     34 01 90 FD | 	jmp	#LR__0183
03698                 | LR__0178
03698                 | ' 
03698                 | ' if isstring(lparts(i).part$) then 
03698     14 2F 02 F6 | 	mov	local05, local02
0369c     03 2E 66 F0 | 	shl	local05, #3
036a0     35 00 00 FF 
036a4     0C E4 05 F1 | 	add	objptr, ##27148
036a8     F2 2E 02 F1 | 	add	local05, objptr
036ac     17 13 02 FB | 	rdlong	arg01, local05
036b0     35 00 00 FF 
036b4     0C E4 85 F1 | 	sub	objptr, ##27148
036b8     E0 38 B0 FD | 	call	#_isstring
036bc     00 FA 0D F2 | 	cmp	result1, #0 wz
036c0     A8 00 90 AD |  if_e	jmp	#LR__0181
036c4     14 39 02 F6 | 	mov	local10, local02
036c8     03 38 66 F0 | 	shl	local10, #3
036cc     35 00 00 FF 
036d0     0C E4 05 F1 | 	add	objptr, ##27148
036d4     F2 38 02 F1 | 	add	local10, objptr
036d8     04 38 06 F1 | 	add	local10, #4
036dc     01 00 80 FF 
036e0     1C 07 68 FC | 	wrlong	##515, local10
036e4     14 2D 02 F6 | 	mov	local04, local02
036e8     16 2B 02 F6 | 	mov	local03, local04
036ec     15 39 02 F6 | 	mov	local10, local03
036f0     03 38 66 F0 | 	shl	local10, #3
036f4     F2 38 02 F1 | 	add	local10, objptr
036f8     14 41 02 F6 | 	mov	local14, local02
036fc     03 40 66 F0 | 	shl	local14, #3
03700     F2 40 02 F1 | 	add	local14, objptr
03704     20 31 02 FB | 	rdlong	local06, local14
03708     02 3C 06 F6 | 	mov	local12, #2
0370c     14 51 02 F6 | 	mov	local22, local02
03710     28 53 02 F6 | 	mov	local23, local22
03714     03 52 66 F0 | 	shl	local23, #3
03718     F2 54 02 F6 | 	mov	local24, objptr
0371c     F2 52 02 F1 | 	add	local23, objptr
03720     29 13 02 FB | 	rdlong	arg01, local23
03724     35 00 00 FF 
03728     0C E4 85 F1 | 	sub	objptr, ##27148
0372c     09 33 02 F6 | 	mov	local07, arg01
03730     97 06 48 FB | 	callpa	#(@LR__0180-@LR__0179)>>2,fcache_load_ptr_
03734                 | LR__0179
03734     19 FB C9 FA | 	rdbyte	result1, local07 wz
03738     01 32 06 51 |  if_ne	add	local07, #1
0373c     F4 FF 9F 5D |  if_ne	jmp	#LR__0179
03740                 | LR__0180
03740     09 33 82 F1 | 	sub	local07, arg01
03744     19 3F 02 F6 | 	mov	local13, local07
03748     1F 41 02 F6 | 	mov	local14, local13
0374c     02 40 86 F1 | 	sub	local14, #2
03750     20 3B 02 F6 | 	mov	local11, local14
03754     18 13 02 F6 | 	mov	arg01, local06
03758     1E 15 02 F6 | 	mov	arg02, local12
0375c     1D 17 02 F6 | 	mov	arg03, local11
03760     A0 53 B2 FD | 	call	#__system__Mid_S
03764     1C FB 61 FC | 	wrlong	result1, local10
03768     60 00 90 FD | 	jmp	#LR__0183
0376c                 | LR__0181
0376c                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
0376c     14 2B 02 F6 | 	mov	local03, local02
03770     15 2F 02 F6 | 	mov	local05, local03
03774     03 2E 66 F0 | 	shl	local05, #3
03778     35 00 00 FF 
0377c     0C E4 05 F1 | 	add	objptr, ##27148
03780     F2 2E 02 F1 | 	add	local05, objptr
03784     17 13 02 FB | 	rdlong	arg01, local05
03788     35 00 00 FF 
0378c     0C E4 85 F1 | 	sub	objptr, ##27148
03790     44 2E B0 FD | 	call	#_isname
03794     FD 2C 0A F6 | 	mov	local04, result1 wz
03798     30 00 90 AD |  if_e	jmp	#LR__0182
0379c     14 2D 02 F6 | 	mov	local04, local02
037a0     16 2B 02 F6 | 	mov	local03, local04
037a4     15 39 02 F6 | 	mov	local10, local03
037a8     03 38 66 F0 | 	shl	local10, #3
037ac     35 00 00 FF 
037b0     0C E4 05 F1 | 	add	objptr, ##27148
037b4     F2 38 02 F1 | 	add	local10, objptr
037b8     04 38 06 F1 | 	add	local10, #4
037bc     01 00 80 FF 
037c0     1C 09 68 FC | 	wrlong	##516, local10
037c4     35 00 00 FF 
037c8     0C E4 85 F1 | 	sub	objptr, ##27148
037cc                 | LR__0182
037cc                 | LR__0183
037cc     01 28 06 F1 | 	add	local02, #1
037d0     54 F8 9F FD | 	jmp	#LR__0172
037d4                 | LR__0184
037d4     23 39 02 F6 | 	mov	local10, local17
037d8     03 38 66 F0 | 	shl	local10, #3
037dc     35 00 00 FF 
037e0     0C E4 05 F1 | 	add	objptr, ##27148
037e4     F2 38 02 F1 | 	add	local10, objptr
037e8     04 38 06 F1 | 	add	local10, #4
037ec     1C FD 6B FC | 	wrlong	#510, local10
037f0     23 39 02 F6 | 	mov	local10, local17
037f4     03 38 66 F0 | 	shl	local10, #3
037f8     F2 38 02 F1 | 	add	local10, objptr
037fc     B2 01 00 FF 
03800     AF 31 06 F6 | 	mov	local06, ##@LR__5457
03804     1C 31 62 FC | 	wrlong	local06, local10
03808     10 00 00 FF 
0380c     54 E4 05 F1 | 	add	objptr, ##8276
03810     F2 46 62 FC | 	wrlong	local17, objptr
03814     45 00 00 FF 
03818     60 E4 85 F1 | 	sub	objptr, ##35424
0381c                 | ' 
0381c                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
0381c                 | ' 
0381c                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
0381c                 | '  
0381c                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
0381c     B2 01 00 FF 
03820     B0 15 06 F6 | 	mov	arg02, ##@LR__5458
03824     3B 13 02 F6 | 	mov	arg01, local41
03828     68 31 B2 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     F0 00 90 AD |  if_e	jmp	#LR__0185
03834     B2 01 00 FF 
03838     B5 15 06 F6 | 	mov	arg02, ##@LR__5459
0383c     3B 13 02 F6 | 	mov	arg01, local41
03840     50 31 B2 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     D8 00 90 AD |  if_e	jmp	#LR__0185
0384c     B2 01 00 FF 
03850     BA 31 06 F6 | 	mov	local06, ##@LR__5460
03854     3B 13 02 F6 | 	mov	arg01, local41
03858     18 15 02 F6 | 	mov	arg02, local06
0385c     34 31 B2 FD | 	call	#__system___string_cmp
03860     00 FA 0D F2 | 	cmp	result1, #0 wz
03864     BC 00 90 AD |  if_e	jmp	#LR__0185
03868     B2 01 00 FF 
0386c     BF 3D 06 F6 | 	mov	local12, ##@LR__5461
03870     1E 31 02 F6 | 	mov	local06, local12
03874     3B 13 02 F6 | 	mov	arg01, local41
03878     18 15 02 F6 | 	mov	arg02, local06
0387c     14 31 B2 FD | 	call	#__system___string_cmp
03880     00 FA 0D F2 | 	cmp	result1, #0 wz
03884     9C 00 90 AD |  if_e	jmp	#LR__0185
03888     B2 01 00 FF 
0388c     C3 3B 06 F6 | 	mov	local11, ##@LR__5462
03890     1D 3D 02 F6 | 	mov	local12, local11
03894     3B 13 02 F6 | 	mov	arg01, local41
03898     1E 15 02 F6 | 	mov	arg02, local12
0389c     F4 30 B2 FD | 	call	#__system___string_cmp
038a0     FD 30 0A F6 | 	mov	local06, result1 wz
038a4     7C 00 90 AD |  if_e	jmp	#LR__0185
038a8     B2 01 00 FF 
038ac     C7 41 06 F6 | 	mov	local14, ##@LR__5463
038b0     20 3B 02 F6 | 	mov	local11, local14
038b4     3B 13 02 F6 | 	mov	arg01, local41
038b8     1D 15 02 F6 | 	mov	arg02, local11
038bc     D4 30 B2 FD | 	call	#__system___string_cmp
038c0     FD 3C 0A F6 | 	mov	local12, result1 wz
038c4     5C 00 90 AD |  if_e	jmp	#LR__0185
038c8     B2 01 00 FF 
038cc     CA 3F 06 F6 | 	mov	local13, ##@LR__5464
038d0     1F 41 02 F6 | 	mov	local14, local13
038d4     3B 13 02 F6 | 	mov	arg01, local41
038d8     20 15 02 F6 | 	mov	arg02, local14
038dc     B4 30 B2 FD | 	call	#__system___string_cmp
038e0     FD 3A 0A F6 | 	mov	local11, result1 wz
038e4     3C 00 90 AD |  if_e	jmp	#LR__0185
038e8     B2 01 00 FF 
038ec     CE 3F 06 F6 | 	mov	local13, ##@LR__5465
038f0     3B 13 02 F6 | 	mov	arg01, local41
038f4     1F 15 02 F6 | 	mov	arg02, local13
038f8     98 30 B2 FD | 	call	#__system___string_cmp
038fc     FD 40 0A F6 | 	mov	local14, result1 wz
03900     20 00 90 AD |  if_e	jmp	#LR__0185
03904     B2 01 00 FF 
03908     D4 51 06 F6 | 	mov	local22, ##@LR__5466
0390c     28 5D 02 F6 | 	mov	local28, local22
03910     3B 13 02 F6 | 	mov	arg01, local41
03914     2E 15 02 F6 | 	mov	arg02, local28
03918     78 30 B2 FD | 	call	#__system___string_cmp
0391c     FD 3E 0A F6 | 	mov	local13, result1 wz
03920     CC 00 90 5D |  if_ne	jmp	#LR__0186
03924                 | LR__0185
03924     37 5D 02 F6 | 	mov	local28, local37
03928     01 5C 06 F1 | 	add	local28, #1
0392c     2E 51 02 F6 | 	mov	local22, local28
03930     28 53 02 F6 | 	mov	local23, local22
03934     03 52 66 F0 | 	shl	local23, #3
03938     35 00 00 FF 
0393c     0C E4 05 F1 | 	add	objptr, ##27148
03940     F2 54 02 F6 | 	mov	local24, objptr
03944     F2 52 02 F1 | 	add	local23, objptr
03948     04 52 06 F1 | 	add	local23, #4
0394c     29 61 02 FB | 	rdlong	local30, local23
03950     04 52 86 F1 | 	sub	local23, #4
03954     30 5F 02 F6 | 	mov	local29, local30
03958     01 00 00 FF 
0395c     04 5E 0E F2 | 	cmp	local29, ##516 wz
03960     35 00 00 FF 
03964     0C E4 85 F1 | 	sub	objptr, ##27148
03968     84 00 90 5D |  if_ne	jmp	#LR__0186
0396c     37 85 02 F6 | 	mov	local48, local37
03970     01 84 06 F1 | 	add	local48, #1
03974     03 84 66 F0 | 	shl	local48, #3
03978     35 00 00 FF 
0397c     0C E4 05 F1 | 	add	objptr, ##27148
03980     F2 86 02 F6 | 	mov	local49, objptr
03984     F2 84 02 F1 | 	add	local48, objptr
03988     42 13 02 FB | 	rdlong	arg01, local48
0398c     01 14 06 F6 | 	mov	arg02, #1
03990     35 00 00 FF 
03994     0C E4 85 F1 | 	sub	objptr, ##27148
03998     D8 50 B2 FD | 	call	#__system__Right_S
0399c     FD 12 02 F6 | 	mov	arg01, result1
039a0     B2 01 00 FF 
039a4     D7 89 06 F6 | 	mov	local50, ##@LR__5467
039a8     44 8B 02 F6 | 	mov	local51, local50
039ac     45 15 02 F6 | 	mov	arg02, local51
039b0     E0 2F B2 FD | 	call	#__system___string_cmp
039b4     FD 62 0A F6 | 	mov	local31, result1 wz
039b8     34 00 90 AD |  if_e	jmp	#LR__0186
039bc     37 39 02 F6 | 	mov	local10, local37
039c0     01 38 06 F1 | 	add	local10, #1
039c4     03 38 66 F0 | 	shl	local10, #3
039c8     35 00 00 FF 
039cc     0C E4 05 F1 | 	add	objptr, ##27148
039d0     F2 38 02 F1 | 	add	local10, objptr
039d4     01 00 00 FF 
039d8     03 30 06 F6 | 	mov	local06, ##515
039dc     04 38 06 F1 | 	add	local10, #4
039e0     01 00 80 FF 
039e4     1C 07 68 FC | 	wrlong	##515, local10
039e8     35 00 00 FF 
039ec     0C E4 85 F1 | 	sub	objptr, ##27148
039f0                 | LR__0186
039f0                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
039f0     B2 01 00 FF 
039f4     D9 15 06 F6 | 	mov	arg02, ##@LR__5468
039f8     3B 13 02 F6 | 	mov	arg01, local41
039fc     94 2F B2 FD | 	call	#__system___string_cmp
03a00     00 FA 0D F2 | 	cmp	result1, #0 wz
03a04     1C 00 90 AD |  if_e	jmp	#LR__0187
03a08     B2 01 00 FF 
03a0c     E0 2F 06 F6 | 	mov	local05, ##@LR__5469
03a10     3B 13 02 F6 | 	mov	arg01, local41
03a14     17 15 02 F6 | 	mov	arg02, local05
03a18     78 2F B2 FD | 	call	#__system___string_cmp
03a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a20     CC 00 90 5D |  if_ne	jmp	#LR__0188
03a24                 | LR__0187
03a24     37 2F 02 F6 | 	mov	local05, local37
03a28     01 2E 06 F1 | 	add	local05, #1
03a2c     17 31 02 F6 | 	mov	local06, local05
03a30     03 30 66 F0 | 	shl	local06, #3
03a34     35 00 00 FF 
03a38     0C E4 05 F1 | 	add	objptr, ##27148
03a3c     F2 3C 02 F6 | 	mov	local12, objptr
03a40     F2 30 02 F1 | 	add	local06, objptr
03a44     04 30 06 F1 | 	add	local06, #4
03a48     18 41 02 FB | 	rdlong	local14, local06
03a4c     04 30 86 F1 | 	sub	local06, #4
03a50     20 3B 02 F6 | 	mov	local11, local14
03a54     01 00 00 FF 
03a58     04 3A 0E F2 | 	cmp	local11, ##516 wz
03a5c     35 00 00 FF 
03a60     0C E4 85 F1 | 	sub	objptr, ##27148
03a64     88 00 90 5D |  if_ne	jmp	#LR__0188
03a68     37 53 02 F6 | 	mov	local23, local37
03a6c     01 52 06 F1 | 	add	local23, #1
03a70     03 52 66 F0 | 	shl	local23, #3
03a74     35 00 00 FF 
03a78     0C E4 05 F1 | 	add	objptr, ##27148
03a7c     F2 54 02 F6 | 	mov	local24, objptr
03a80     F2 52 02 F1 | 	add	local23, objptr
03a84     29 13 02 FB | 	rdlong	arg01, local23
03a88     01 14 06 F6 | 	mov	arg02, #1
03a8c     35 00 00 FF 
03a90     0C E4 85 F1 | 	sub	objptr, ##27148
03a94     DC 4F B2 FD | 	call	#__system__Right_S
03a98     FD 12 02 F6 | 	mov	arg01, result1
03a9c     B2 01 00 FF 
03aa0     E6 51 06 F6 | 	mov	local22, ##@LR__5470
03aa4     28 5D 02 F6 | 	mov	local28, local22
03aa8     2E 15 02 F6 | 	mov	arg02, local28
03aac     E4 2E B2 FD | 	call	#__system___string_cmp
03ab0     FD 3E 0A F6 | 	mov	local13, result1 wz
03ab4     38 00 90 AD |  if_e	jmp	#LR__0188
03ab8     37 39 02 F6 | 	mov	local10, local37
03abc     01 38 06 F1 | 	add	local10, #1
03ac0     03 38 66 F0 | 	shl	local10, #3
03ac4     35 00 00 FF 
03ac8     0C E4 05 F1 | 	add	objptr, ##27148
03acc     F2 2E 02 F6 | 	mov	local05, objptr
03ad0     F2 38 02 F1 | 	add	local10, objptr
03ad4     01 00 00 FF 
03ad8     03 30 06 F6 | 	mov	local06, ##515
03adc     04 38 06 F1 | 	add	local10, #4
03ae0     01 00 80 FF 
03ae4     1C 07 68 FC | 	wrlong	##515, local10
03ae8     35 00 00 FF 
03aec     0C E4 85 F1 | 	sub	objptr, ##27148
03af0                 | LR__0188
03af0                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03af0     B2 01 00 FF 
03af4     E8 15 06 F6 | 	mov	arg02, ##@LR__5471
03af8     3B 13 02 F6 | 	mov	arg01, local41
03afc     94 2E B2 FD | 	call	#__system___string_cmp
03b00     00 FA 0D F2 | 	cmp	result1, #0 wz
03b04     C8 00 90 5D |  if_ne	jmp	#LR__0189
03b08     37 2F 02 F6 | 	mov	local05, local37
03b0c     01 2E 06 F1 | 	add	local05, #1
03b10     03 2E 66 F0 | 	shl	local05, #3
03b14     35 00 00 FF 
03b18     0C E4 05 F1 | 	add	objptr, ##27148
03b1c     F2 30 02 F6 | 	mov	local06, objptr
03b20     F2 2E 02 F1 | 	add	local05, objptr
03b24     04 2E 06 F1 | 	add	local05, #4
03b28     17 3B 02 FB | 	rdlong	local11, local05
03b2c     04 2E 86 F1 | 	sub	local05, #4
03b30     1D 3D 02 F6 | 	mov	local12, local11
03b34     01 00 00 FF 
03b38     04 3C 0E F2 | 	cmp	local12, ##516 wz
03b3c     35 00 00 FF 
03b40     0C E4 85 F1 | 	sub	objptr, ##27148
03b44     88 00 90 5D |  if_ne	jmp	#LR__0189
03b48     37 51 02 F6 | 	mov	local22, local37
03b4c     01 50 06 F1 | 	add	local22, #1
03b50     03 50 66 F0 | 	shl	local22, #3
03b54     35 00 00 FF 
03b58     0C E4 05 F1 | 	add	objptr, ##27148
03b5c     F2 52 02 F6 | 	mov	local23, objptr
03b60     F2 50 02 F1 | 	add	local22, objptr
03b64     28 13 02 FB | 	rdlong	arg01, local22
03b68     01 14 06 F6 | 	mov	arg02, #1
03b6c     35 00 00 FF 
03b70     0C E4 85 F1 | 	sub	objptr, ##27148
03b74     FC 4E B2 FD | 	call	#__system__Right_S
03b78     FD 12 02 F6 | 	mov	arg01, result1
03b7c     B2 01 00 FF 
03b80     ED 5D 06 F6 | 	mov	local28, ##@LR__5472
03b84     2E 3F 02 F6 | 	mov	local13, local28
03b88     1F 15 02 F6 | 	mov	arg02, local13
03b8c     04 2E B2 FD | 	call	#__system___string_cmp
03b90     FD 40 0A F6 | 	mov	local14, result1 wz
03b94     38 00 90 AD |  if_e	jmp	#LR__0189
03b98     37 39 02 F6 | 	mov	local10, local37
03b9c     01 38 06 F1 | 	add	local10, #1
03ba0     03 38 66 F0 | 	shl	local10, #3
03ba4     35 00 00 FF 
03ba8     0C E4 05 F1 | 	add	objptr, ##27148
03bac     F2 2E 02 F6 | 	mov	local05, objptr
03bb0     F2 38 02 F1 | 	add	local10, objptr
03bb4     01 00 00 FF 
03bb8     03 30 06 F6 | 	mov	local06, ##515
03bbc     04 38 06 F1 | 	add	local10, #4
03bc0     01 00 80 FF 
03bc4     1C 07 68 FC | 	wrlong	##515, local10
03bc8     35 00 00 FF 
03bcc     0C E4 85 F1 | 	sub	objptr, ##27148
03bd0                 | LR__0189
03bd0                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03bd0     B2 01 00 FF 
03bd4     EF 15 06 F6 | 	mov	arg02, ##@LR__5473
03bd8     3B 13 02 F6 | 	mov	arg01, local41
03bdc     B4 2D B2 FD | 	call	#__system___string_cmp
03be0     00 FA 0D F2 | 	cmp	result1, #0 wz
03be4     C8 00 90 5D |  if_ne	jmp	#LR__0190
03be8     37 2F 02 F6 | 	mov	local05, local37
03bec     03 2E 06 F1 | 	add	local05, #3
03bf0     03 2E 66 F0 | 	shl	local05, #3
03bf4     35 00 00 FF 
03bf8     0C E4 05 F1 | 	add	objptr, ##27148
03bfc     F2 30 02 F6 | 	mov	local06, objptr
03c00     F2 2E 02 F1 | 	add	local05, objptr
03c04     04 2E 06 F1 | 	add	local05, #4
03c08     17 3B 02 FB | 	rdlong	local11, local05
03c0c     04 2E 86 F1 | 	sub	local05, #4
03c10     1D 3D 02 F6 | 	mov	local12, local11
03c14     01 00 00 FF 
03c18     04 3C 0E F2 | 	cmp	local12, ##516 wz
03c1c     35 00 00 FF 
03c20     0C E4 85 F1 | 	sub	objptr, ##27148
03c24     88 00 90 5D |  if_ne	jmp	#LR__0190
03c28     37 51 02 F6 | 	mov	local22, local37
03c2c     03 50 06 F1 | 	add	local22, #3
03c30     03 50 66 F0 | 	shl	local22, #3
03c34     35 00 00 FF 
03c38     0C E4 05 F1 | 	add	objptr, ##27148
03c3c     F2 52 02 F6 | 	mov	local23, objptr
03c40     F2 50 02 F1 | 	add	local22, objptr
03c44     28 13 02 FB | 	rdlong	arg01, local22
03c48     01 14 06 F6 | 	mov	arg02, #1
03c4c     35 00 00 FF 
03c50     0C E4 85 F1 | 	sub	objptr, ##27148
03c54     1C 4E B2 FD | 	call	#__system__Right_S
03c58     FD 12 02 F6 | 	mov	arg01, result1
03c5c     B2 01 00 FF 
03c60     F4 5D 06 F6 | 	mov	local28, ##@LR__5474
03c64     2E 3F 02 F6 | 	mov	local13, local28
03c68     1F 15 02 F6 | 	mov	arg02, local13
03c6c     24 2D B2 FD | 	call	#__system___string_cmp
03c70     FD 40 0A F6 | 	mov	local14, result1 wz
03c74     38 00 90 AD |  if_e	jmp	#LR__0190
03c78     37 39 02 F6 | 	mov	local10, local37
03c7c     03 38 06 F1 | 	add	local10, #3
03c80     03 38 66 F0 | 	shl	local10, #3
03c84     35 00 00 FF 
03c88     0C E4 05 F1 | 	add	objptr, ##27148
03c8c     F2 2E 02 F6 | 	mov	local05, objptr
03c90     F2 38 02 F1 | 	add	local10, objptr
03c94     01 00 00 FF 
03c98     03 30 06 F6 | 	mov	local06, ##515
03c9c     04 38 06 F1 | 	add	local10, #4
03ca0     01 00 80 FF 
03ca4     1C 07 68 FC | 	wrlong	##515, local10
03ca8     35 00 00 FF 
03cac     0C E4 85 F1 | 	sub	objptr, ##27148
03cb0                 | LR__0190
03cb0                 | ' 
03cb0                 | ' ' cd needs special treatment..
03cb0                 | ' 
03cb0                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03cb0     B2 01 00 FF 
03cb4     F6 15 06 F6 | 	mov	arg02, ##@LR__5475
03cb8     3B 13 02 F6 | 	mov	arg01, local41
03cbc     D4 2C B2 FD | 	call	#__system___string_cmp
03cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc4     38 00 90 5D |  if_ne	jmp	#LR__0191
03cc8     37 39 02 F6 | 	mov	local10, local37
03ccc     01 38 06 F1 | 	add	local10, #1
03cd0     03 38 66 F0 | 	shl	local10, #3
03cd4     35 00 00 FF 
03cd8     0C E4 05 F1 | 	add	objptr, ##27148
03cdc     F2 2E 02 F6 | 	mov	local05, objptr
03ce0     F2 38 02 F1 | 	add	local10, objptr
03ce4     01 00 00 FF 
03ce8     03 30 06 F6 | 	mov	local06, ##515
03cec     04 38 06 F1 | 	add	local10, #4
03cf0     01 00 80 FF 
03cf4     1C 07 68 FC | 	wrlong	##515, local10
03cf8     35 00 00 FF 
03cfc     0C E4 85 F1 | 	sub	objptr, ##27148
03d00                 | LR__0191
03d00                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03d00     B2 01 00 FF 
03d04     F9 15 06 F6 | 	mov	arg02, ##@LR__5476
03d08     3B 13 02 F6 | 	mov	arg01, local41
03d0c     84 2C B2 FD | 	call	#__system___string_cmp
03d10     00 FA 0D F2 | 	cmp	result1, #0 wz
03d14     A4 00 90 5D |  if_ne	jmp	#LR__0192
03d18     37 31 02 F6 | 	mov	local06, local37
03d1c     01 30 06 F1 | 	add	local06, #1
03d20     03 30 66 F0 | 	shl	local06, #3
03d24     35 00 00 FF 
03d28     0C E4 05 F1 | 	add	objptr, ##27148
03d2c     F2 3C 02 F6 | 	mov	local12, objptr
03d30     F2 30 02 F1 | 	add	local06, objptr
03d34     18 13 02 FB | 	rdlong	arg01, local06
03d38     B2 01 00 FF 
03d3c     FD 2F 06 F6 | 	mov	local05, ##@LR__5477
03d40     17 15 02 F6 | 	mov	arg02, local05
03d44     35 00 00 FF 
03d48     0C E4 85 F1 | 	sub	objptr, ##27148
03d4c     44 2C B2 FD | 	call	#__system___string_cmp
03d50     00 FA 0D F2 | 	cmp	result1, #0 wz
03d54     64 00 90 5D |  if_ne	jmp	#LR__0192
03d58     37 39 02 F6 | 	mov	local10, local37
03d5c     01 38 06 F1 | 	add	local10, #1
03d60     03 38 66 F0 | 	shl	local10, #3
03d64     35 00 00 FF 
03d68     0C E4 05 F1 | 	add	objptr, ##27148
03d6c     F2 38 02 F1 | 	add	local10, objptr
03d70     04 38 06 F1 | 	add	local10, #4
03d74     01 00 80 FF 
03d78     1C 07 68 FC | 	wrlong	##515, local10
03d7c     37 39 02 F6 | 	mov	local10, local37
03d80     01 38 06 F1 | 	add	local10, #1
03d84     03 38 66 F0 | 	shl	local10, #3
03d88     F2 38 02 F1 | 	add	local10, objptr
03d8c     B2 01 00 FF 
03d90     FF 31 06 F6 | 	mov	local06, ##@LR__5478
03d94     1C 31 62 FC | 	wrlong	local06, local10
03d98     37 39 02 F6 | 	mov	local10, local37
03d9c     03 38 66 F0 | 	shl	local10, #3
03da0     F2 2E 02 F6 | 	mov	local05, objptr
03da4     F2 38 02 F1 | 	add	local10, objptr
03da8     C3 30 06 F6 | 	mov	local06, #195
03dac     04 38 06 F1 | 	add	local10, #4
03db0     1C 87 69 FC | 	wrlong	#195, local10
03db4     35 00 00 FF 
03db8     0C E4 85 F1 | 	sub	objptr, ##27148
03dbc                 | LR__0192
03dbc                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03dbc     B3 01 00 FF 
03dc0     02 38 06 F6 | 	mov	local10, ##@LR__5479
03dc4     3B 13 02 F6 | 	mov	arg01, local41
03dc8     1C 15 02 F6 | 	mov	arg02, local10
03dcc     C4 2B B2 FD | 	call	#__system___string_cmp
03dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd4     04 01 90 5D |  if_ne	jmp	#LR__0195
03dd8     37 31 02 F6 | 	mov	local06, local37
03ddc     01 30 06 F1 | 	add	local06, #1
03de0     03 30 66 F0 | 	shl	local06, #3
03de4     35 00 00 FF 
03de8     0C E4 05 F1 | 	add	objptr, ##27148
03dec     F2 3C 02 F6 | 	mov	local12, objptr
03df0     F2 30 02 F1 | 	add	local06, objptr
03df4     18 13 02 FB | 	rdlong	arg01, local06
03df8     B3 01 00 FF 
03dfc     05 2E 06 F6 | 	mov	local05, ##@LR__5480
03e00     17 39 02 F6 | 	mov	local10, local05
03e04     1C 15 02 F6 | 	mov	arg02, local10
03e08     35 00 00 FF 
03e0c     0C E4 85 F1 | 	sub	objptr, ##27148
03e10     80 2B B2 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     C0 00 90 5D |  if_ne	jmp	#LR__0195
03e1c     37 39 02 F6 | 	mov	local10, local37
03e20     01 38 06 F1 | 	add	local10, #1
03e24     03 38 66 F0 | 	shl	local10, #3
03e28     35 00 00 FF 
03e2c     0C E4 05 F1 | 	add	objptr, ##27148
03e30     F2 2E 02 F6 | 	mov	local05, objptr
03e34     F2 38 02 F1 | 	add	local10, objptr
03e38     01 00 00 FF 
03e3c     03 30 06 F6 | 	mov	local06, ##515
03e40     04 38 06 F1 | 	add	local10, #4
03e44     01 00 80 FF 
03e48     1C 07 68 FC | 	wrlong	##515, local10
03e4c     04 38 86 F1 | 	sub	local10, #4
03e50     37 29 02 F6 | 	mov	local02, local37
03e54     02 28 06 F1 | 	add	local02, #2
03e58     23 8D 02 F6 | 	mov	local52, local17
03e5c     01 8C 06 F1 | 	add	local52, #1
03e60     35 00 00 FF 
03e64     0C E4 85 F1 | 	sub	objptr, ##27148
03e68                 | LR__0193
03e68     46 29 52 F2 | 	cmps	local02, local52 wc
03e6c     6C 00 90 3D |  if_ae	jmp	#LR__0194
03e70     14 39 02 F6 | 	mov	local10, local02
03e74     03 38 66 F0 | 	shl	local10, #3
03e78     35 00 00 FF 
03e7c     0C E4 05 F1 | 	add	objptr, ##27148
03e80     F2 38 02 F1 | 	add	local10, objptr
03e84     1C 8F 02 FB | 	rdlong	local53, local10
03e88     37 39 02 F6 | 	mov	local10, local37
03e8c     01 38 06 F1 | 	add	local10, #1
03e90     03 38 66 F0 | 	shl	local10, #3
03e94     F2 2E 02 F6 | 	mov	local05, objptr
03e98     F2 38 02 F1 | 	add	local10, objptr
03e9c     37 3B 02 F6 | 	mov	local11, local37
03ea0     01 3A 06 F1 | 	add	local11, #1
03ea4     1D 41 02 F6 | 	mov	local14, local11
03ea8     03 40 66 F0 | 	shl	local14, #3
03eac     F2 3E 02 F6 | 	mov	local13, objptr
03eb0     F2 40 02 F1 | 	add	local14, objptr
03eb4     20 13 02 FB | 	rdlong	arg01, local14
03eb8     47 3D 02 F6 | 	mov	local12, local53
03ebc     1E 15 02 F6 | 	mov	arg02, local12
03ec0     35 00 00 FF 
03ec4     0C E4 85 F1 | 	sub	objptr, ##27148
03ec8     FC 2A B2 FD | 	call	#__system___string_concat
03ecc     FD 30 02 F6 | 	mov	local06, result1
03ed0     1C 31 62 FC | 	wrlong	local06, local10
03ed4     01 28 06 F1 | 	add	local02, #1
03ed8     8C FF 9F FD | 	jmp	#LR__0193
03edc                 | LR__0194
03edc                 | LR__0195
03edc                 | ' 
03edc                 | ' ' determine a type of the line and compile it
03edc                 | ' 
03edc                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03edc     35 00 00 FF 
03ee0     0C E4 05 F1 | 	add	objptr, ##27148
03ee4     F2 12 02 FB | 	rdlong	arg01, objptr
03ee8     35 00 00 FF 
03eec     0C E4 85 F1 | 	sub	objptr, ##27148
03ef0     E8 2F B0 FD | 	call	#_isdec
03ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef8     30 00 90 AD |  if_e	jmp	#LR__0196
03efc     35 00 00 FF 
03f00     0C E4 05 F1 | 	add	objptr, ##27148
03f04     F2 12 02 FB | 	rdlong	arg01, objptr
03f08     35 00 00 FF 
03f0c     0C E4 85 F1 | 	sub	objptr, ##27148
03f10     00 14 06 F6 | 	mov	arg02, #0
03f14     48 5F B2 FD | 	call	#__system____builtin_atoi
03f18     52 00 00 FF 
03f1c     B0 E4 05 F1 | 	add	objptr, ##42160
03f20     F2 FA 61 FC | 	wrlong	result1, objptr
03f24     52 00 00 FF 
03f28     B0 E4 85 F1 | 	sub	objptr, ##42160
03f2c                 | LR__0196
03f2c                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03f2c     52 00 00 FF 
03f30     B0 E4 05 F1 | 	add	objptr, ##42160
03f34     F2 2C 02 FB | 	rdlong	local04, objptr
03f38     52 00 00 FF 
03f3c     B0 E4 85 F1 | 	sub	objptr, ##42160
03f40     01 2C 16 F2 | 	cmp	local04, #1 wc
03f44     40 00 90 CD |  if_b	jmp	#LR__0197
03f48     01 46 0E F2 | 	cmp	local17, #1 wz
03f4c     37 00 00 AF 
03f50     24 E4 05 A1 |  if_e	add	objptr, ##28196
03f54     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03f58     37 00 00 AF 
03f5c     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03f60     17 39 02 A6 |  if_e	mov	local10, local05
03f64     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03f68     1C 00 90 5D |  if_ne	jmp	#LR__0197
03f6c     52 00 00 FF 
03f70     B0 E4 05 F1 | 	add	objptr, ##42160
03f74     F2 12 02 FB | 	rdlong	arg01, objptr
03f78     52 00 00 FF 
03f7c     B0 E4 85 F1 | 	sub	objptr, ##42160
03f80     04 31 B0 FD | 	call	#_deleteline
03f84     C8 03 90 FD | 	jmp	#LR__0208
03f88                 | LR__0197
03f88                 | ' 
03f88                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03f88     37 00 00 FF 
03f8c     24 E4 05 F1 | 	add	objptr, ##28196
03f90     F2 2C 0A FB | 	rdlong	local04, objptr wz
03f94     37 00 00 FF 
03f98     24 E4 85 F1 | 	sub	objptr, ##28196
03f9c     20 00 90 AD |  if_e	jmp	#LR__0198
03fa0     37 00 00 FF 
03fa4     24 E4 05 F1 | 	add	objptr, ##28196
03fa8     F2 2E 02 FB | 	rdlong	local05, objptr
03fac     37 00 00 FF 
03fb0     24 E4 85 F1 | 	sub	objptr, ##28196
03fb4     17 39 02 F6 | 	mov	local10, local05
03fb8     03 38 0E F2 | 	cmp	local10, #3 wz
03fbc     C0 00 90 5D |  if_ne	jmp	#LR__0200
03fc0                 | LR__0198
03fc0     35 00 00 FF 
03fc4     20 E4 05 F1 | 	add	objptr, ##27168
03fc8     F2 3C 02 FB | 	rdlong	local12, objptr
03fcc     35 00 00 FF 
03fd0     20 E4 85 F1 | 	sub	objptr, ##27168
03fd4     1B 3C 0E F2 | 	cmp	local12, #27 wz
03fd8     A4 00 90 AD |  if_e	jmp	#LR__0200
03fdc     52 00 00 FF 
03fe0     B0 E4 05 F1 | 	add	objptr, ##42160
03fe4     F2 12 02 FB | 	rdlong	arg01, objptr
03fe8     1B 00 00 FF 
03fec     8C E4 85 F1 | 	sub	objptr, ##13964
03ff0     F2 16 02 FB | 	rdlong	arg03, objptr
03ff4     37 00 00 FF 
03ff8     24 E4 85 F1 | 	sub	objptr, ##28196
03ffc     00 14 06 F6 | 	mov	arg02, #0
04000     F8 44 B0 FD | 	call	#_compile
04004     FD 26 0A F6 | 	mov	local01, result1 wz
04008                 | '   err=compile(linenum,0,cont) 
04008                 | '   if err<>0 then printerror(err,linenum): goto 101
04008     20 00 90 AD |  if_e	jmp	#LR__0199
0400c     52 00 00 FF 
04010     B0 E4 05 F1 | 	add	objptr, ##42160
04014     F2 14 02 FB | 	rdlong	arg02, objptr
04018     52 00 00 FF 
0401c     B0 E4 85 F1 | 	sub	objptr, ##42160
04020     13 13 02 F6 | 	mov	arg01, local01
04024     54 EF B1 FD | 	call	#_printerror
04028     44 03 90 FD | 	jmp	#LR__0209
0402c                 | LR__0199
0402c                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
0402c     52 00 00 FF 
04030     F4 E4 05 F1 | 	add	objptr, ##42228
04034     F2 12 02 FB | 	rdlong	arg01, objptr
04038     52 00 00 FF 
0403c     F4 E4 85 F1 | 	sub	objptr, ##42228
04040     B3 01 00 FF 
04044     07 14 06 F6 | 	mov	arg02, ##@LR__5481
04048     48 29 B2 FD | 	call	#__system___string_cmp
0404c     00 FA 0D F2 | 	cmp	result1, #0 wz
04050     FC 02 90 AD |  if_e	jmp	#LR__0208
04054     52 00 00 FF 
04058     F4 E4 05 F1 | 	add	objptr, ##42228
0405c     F2 2C 02 FB | 	rdlong	local04, objptr
04060     1B 00 00 FF 
04064     D8 E4 85 F1 | 	sub	objptr, ##14040
04068     F2 2C 62 FC | 	wrlong	local04, objptr
0406c     08 E4 05 F1 | 	add	objptr, #8
04070     F2 08 68 FC | 	wrlong	#4, objptr
04074     37 00 00 FF 
04078     24 E4 85 F1 | 	sub	objptr, ##28196
0407c     14 D8 9F FD | 	jmp	#LR__0070
04080                 | LR__0200
04080                 | '       							
04080                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
04080     37 00 00 FF 
04084     24 E4 05 F1 | 	add	objptr, ##28196
04088     F2 2C 02 FB | 	rdlong	local04, objptr
0408c     37 00 00 FF 
04090     24 E4 85 F1 | 	sub	objptr, ##28196
04094     01 2C 0E F2 | 	cmp	local04, #1 wz
04098     37 00 00 5F 
0409c     24 E4 05 51 |  if_ne	add	objptr, ##28196
040a0     F2 38 02 5B |  if_ne	rdlong	local10, objptr
040a4     37 00 00 5F 
040a8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
040ac     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
040b0     C0 00 90 5D |  if_ne	jmp	#LR__0202
040b4     35 00 00 FF 
040b8     18 E4 05 F1 | 	add	objptr, ##27160
040bc     F2 3C 02 FB | 	rdlong	local12, objptr
040c0     35 00 00 FF 
040c4     18 E4 85 F1 | 	sub	objptr, ##27160
040c8     1B 3C 0E F2 | 	cmp	local12, #27 wz
040cc     A4 00 90 AD |  if_e	jmp	#LR__0202
040d0     52 00 00 FF 
040d4     B0 E4 05 F1 | 	add	objptr, ##42160
040d8     F2 12 02 FB | 	rdlong	arg01, objptr
040dc     1B 00 00 FF 
040e0     8C E4 85 F1 | 	sub	objptr, ##13964
040e4     F2 16 02 FB | 	rdlong	arg03, objptr
040e8     37 00 00 FF 
040ec     24 E4 85 F1 | 	sub	objptr, ##28196
040f0     00 14 06 F6 | 	mov	arg02, #0
040f4     04 44 B0 FD | 	call	#_compile
040f8     FD 26 0A F6 | 	mov	local01, result1 wz
040fc                 | '   err=compile(linenum,0,cont) 
040fc                 | '   if err<>0 then printerror(err,linenum): goto 101
040fc     20 00 90 AD |  if_e	jmp	#LR__0201
04100     52 00 00 FF 
04104     B0 E4 05 F1 | 	add	objptr, ##42160
04108     F2 14 02 FB | 	rdlong	arg02, objptr
0410c     52 00 00 FF 
04110     B0 E4 85 F1 | 	sub	objptr, ##42160
04114     13 13 02 F6 | 	mov	arg01, local01
04118     60 EE B1 FD | 	call	#_printerror
0411c     50 02 90 FD | 	jmp	#LR__0209
04120                 | LR__0201
04120                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
04120     52 00 00 FF 
04124     F4 E4 05 F1 | 	add	objptr, ##42228
04128     F2 12 02 FB | 	rdlong	arg01, objptr
0412c     52 00 00 FF 
04130     F4 E4 85 F1 | 	sub	objptr, ##42228
04134     B3 01 00 FF 
04138     08 14 06 F6 | 	mov	arg02, ##@LR__5482
0413c     54 28 B2 FD | 	call	#__system___string_cmp
04140     00 FA 0D F2 | 	cmp	result1, #0 wz
04144     08 02 90 AD |  if_e	jmp	#LR__0208
04148     52 00 00 FF 
0414c     F4 E4 05 F1 | 	add	objptr, ##42228
04150     F2 2C 02 FB | 	rdlong	local04, objptr
04154     1B 00 00 FF 
04158     D8 E4 85 F1 | 	sub	objptr, ##14040
0415c     F2 2C 62 FC | 	wrlong	local04, objptr
04160     08 E4 05 F1 | 	add	objptr, #8
04164     F2 08 68 FC | 	wrlong	#4, objptr
04168     37 00 00 FF 
0416c     24 E4 85 F1 | 	sub	objptr, ##28196
04170     20 D7 9F FD | 	jmp	#LR__0070
04174                 | LR__0202
04174                 | ' 							 
04174                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
04174     37 00 00 FF 
04178     24 E4 05 F1 | 	add	objptr, ##28196
0417c     F2 2C 0A FB | 	rdlong	local04, objptr wz
04180     37 00 00 FF 
04184     24 E4 85 F1 | 	sub	objptr, ##28196
04188     37 00 00 5F 
0418c     24 E4 05 51 |  if_ne	add	objptr, ##28196
04190     F2 38 02 5B |  if_ne	rdlong	local10, objptr
04194     37 00 00 5F 
04198     24 E4 85 51 |  if_ne	sub	objptr, ##28196
0419c     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
041a0     35 00 00 AF 
041a4     20 E4 05 A1 |  if_e	add	objptr, ##27168
041a8     F2 3C 02 AB |  if_e	rdlong	local12, objptr
041ac     35 00 00 AF 
041b0     20 E4 85 A1 |  if_e	sub	objptr, ##27168
041b4     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
041b8     A4 00 90 5D |  if_ne	jmp	#LR__0204
041bc     52 00 00 FF 
041c0     B0 E4 05 F1 | 	add	objptr, ##42160
041c4     F2 12 02 FB | 	rdlong	arg01, objptr
041c8     1B 00 00 FF 
041cc     8C E4 85 F1 | 	sub	objptr, ##13964
041d0     F2 16 02 FB | 	rdlong	arg03, objptr
041d4     37 00 00 FF 
041d8     24 E4 85 F1 | 	sub	objptr, ##28196
041dc     00 14 06 F6 | 	mov	arg02, #0
041e0     E0 43 B0 FD | 	call	#_compile_assign
041e4     FD 26 0A F6 | 	mov	local01, result1 wz
041e8                 | '   err=compile_assign(linenum,0,cont)
041e8                 | '   if err<>0 then printerror(err,linenum): goto 101
041e8     20 00 90 AD |  if_e	jmp	#LR__0203
041ec     52 00 00 FF 
041f0     B0 E4 05 F1 | 	add	objptr, ##42160
041f4     F2 14 02 FB | 	rdlong	arg02, objptr
041f8     52 00 00 FF 
041fc     B0 E4 85 F1 | 	sub	objptr, ##42160
04200     13 13 02 F6 | 	mov	arg01, local01
04204     74 ED B1 FD | 	call	#_printerror
04208     64 01 90 FD | 	jmp	#LR__0209
0420c                 | LR__0203
0420c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
0420c     52 00 00 FF 
04210     F4 E4 05 F1 | 	add	objptr, ##42228
04214     F2 12 02 FB | 	rdlong	arg01, objptr
04218     52 00 00 FF 
0421c     F4 E4 85 F1 | 	sub	objptr, ##42228
04220     B3 01 00 FF 
04224     09 14 06 F6 | 	mov	arg02, ##@LR__5483
04228     68 27 B2 FD | 	call	#__system___string_cmp
0422c     00 FA 0D F2 | 	cmp	result1, #0 wz
04230     1C 01 90 AD |  if_e	jmp	#LR__0208
04234     52 00 00 FF 
04238     F4 E4 05 F1 | 	add	objptr, ##42228
0423c     F2 2C 02 FB | 	rdlong	local04, objptr
04240     1B 00 00 FF 
04244     D8 E4 85 F1 | 	sub	objptr, ##14040
04248     F2 2C 62 FC | 	wrlong	local04, objptr
0424c     08 E4 05 F1 | 	add	objptr, #8
04250     F2 08 68 FC | 	wrlong	#4, objptr
04254     37 00 00 FF 
04258     24 E4 85 F1 | 	sub	objptr, ##28196
0425c     34 D6 9F FD | 	jmp	#LR__0070
04260                 | LR__0204
04260                 | '     							 
04260                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
04260     37 00 00 FF 
04264     24 E4 05 F1 | 	add	objptr, ##28196
04268     F2 2C 02 FB | 	rdlong	local04, objptr
0426c     37 00 00 FF 
04270     24 E4 85 F1 | 	sub	objptr, ##28196
04274     01 2C 0E F2 | 	cmp	local04, #1 wz
04278     37 00 00 5F 
0427c     24 E4 05 51 |  if_ne	add	objptr, ##28196
04280     F2 38 02 5B |  if_ne	rdlong	local10, objptr
04284     37 00 00 5F 
04288     24 E4 85 51 |  if_ne	sub	objptr, ##28196
0428c     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
04290     35 00 00 AF 
04294     18 E4 05 A1 |  if_e	add	objptr, ##27160
04298     F2 3C 02 AB |  if_e	rdlong	local12, objptr
0429c     35 00 00 AF 
042a0     18 E4 85 A1 |  if_e	sub	objptr, ##27160
042a4     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
042a8     A4 00 90 5D |  if_ne	jmp	#LR__0207
042ac     52 00 00 FF 
042b0     B0 E4 05 F1 | 	add	objptr, ##42160
042b4     F2 12 02 FB | 	rdlong	arg01, objptr
042b8     1B 00 00 FF 
042bc     8C E4 85 F1 | 	sub	objptr, ##13964
042c0     F2 16 02 FB | 	rdlong	arg03, objptr
042c4     37 00 00 FF 
042c8     24 E4 85 F1 | 	sub	objptr, ##28196
042cc     00 14 06 F6 | 	mov	arg02, #0
042d0     F0 42 B0 FD | 	call	#_compile_assign
042d4     FD 26 0A F6 | 	mov	local01, result1 wz
042d8                 | '   err=compile_assign(linenum,0,cont) 
042d8                 | '   if err<>0 then printerror(err,linenum): goto 101
042d8     20 00 90 AD |  if_e	jmp	#LR__0205
042dc     52 00 00 FF 
042e0     B0 E4 05 F1 | 	add	objptr, ##42160
042e4     F2 14 02 FB | 	rdlong	arg02, objptr
042e8     52 00 00 FF 
042ec     B0 E4 85 F1 | 	sub	objptr, ##42160
042f0     13 13 02 F6 | 	mov	arg01, local01
042f4     84 EC B1 FD | 	call	#_printerror
042f8     74 00 90 FD | 	jmp	#LR__0209
042fc                 | LR__0205
042fc                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
042fc     52 00 00 FF 
04300     F4 E4 05 F1 | 	add	objptr, ##42228
04304     F2 12 02 FB | 	rdlong	arg01, objptr
04308     52 00 00 FF 
0430c     F4 E4 85 F1 | 	sub	objptr, ##42228
04310     B3 01 00 FF 
04314     0A 14 06 F6 | 	mov	arg02, ##@LR__5484
04318     78 26 B2 FD | 	call	#__system___string_cmp
0431c     00 FA 4D F2 | 	cmps	result1, #0 wz
04320     2C 00 90 AD |  if_e	jmp	#LR__0206
04324     52 00 00 FF 
04328     F4 E4 05 F1 | 	add	objptr, ##42228
0432c     F2 2C 02 FB | 	rdlong	local04, objptr
04330     1B 00 00 FF 
04334     D8 E4 85 F1 | 	sub	objptr, ##14040
04338     F2 2C 62 FC | 	wrlong	local04, objptr
0433c     08 E4 05 F1 | 	add	objptr, #8
04340     F2 08 68 FC | 	wrlong	#4, objptr
04344     37 00 00 FF 
04348     24 E4 85 F1 | 	sub	objptr, ##28196
0434c     44 D5 9F FD | 	jmp	#LR__0070
04350                 | LR__0206
04350                 | LR__0207
04350                 | LR__0208
04350                 | ' 
04350                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
04350     52 00 00 FF 
04354     B0 E4 05 F1 | 	add	objptr, ##42160
04358     F2 2C 0A FB | 	rdlong	local04, objptr wz
0435c     52 00 00 FF 
04360     B0 E4 85 F1 | 	sub	objptr, ##42160
04364     B0 00 90 5D |  if_ne	jmp	#LR__0212
04368     02 12 06 F6 | 	mov	arg01, #2
0436c     68 91 B0 FD | 	call	#_execute_line
04370                 | LR__0209
04370                 | '   execute_line(2)
04370                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
04370     52 00 00 FF 
04374     D4 E4 05 F1 | 	add	objptr, ##42196
04378     F2 2C 0A FB | 	rdlong	local04, objptr wz
0437c     52 00 00 FF 
04380     D4 E4 85 F1 | 	sub	objptr, ##42196
04384     20 00 90 5D |  if_ne	jmp	#LR__0210
04388     B3 01 00 FF 
0438c     0B 12 06 F6 | 	mov	arg01, ##@LR__5485
04390                 | ' 
04390                 | ' write(text)
04390     14 0D B2 FD | 	call	#_hg010b_spin2_write
04394                 | ' crlf
04394     10 12 B2 FD | 	call	#_hg010b_spin2_crlf
04398     B3 01 00 FF 
0439c     0C 12 06 F6 | 	mov	arg01, ##@LR__5486
043a0                 | ' 
043a0                 | ' write(text)
043a0     04 0D B2 FD | 	call	#_hg010b_spin2_write
043a4                 | ' crlf
043a4     00 12 B2 FD | 	call	#_hg010b_spin2_crlf
043a8                 | LR__0210
043a8                 | '     if inload=1 andalso err>0 then print fullline$
043a8     52 00 00 FF 
043ac     D4 E4 05 F1 | 	add	objptr, ##42196
043b0     F2 2C 02 FB | 	rdlong	local04, objptr
043b4     52 00 00 FF 
043b8     D4 E4 85 F1 | 	sub	objptr, ##42196
043bc     01 2C 0E F2 | 	cmp	local04, #1 wz
043c0     54 00 90 5D |  if_ne	jmp	#LR__0211
043c4     01 26 56 F2 | 	cmps	local01, #1 wc
043c8     4C 00 90 CD |  if_b	jmp	#LR__0211
043cc     00 12 06 F6 | 	mov	arg01, #0
043d0     3C 82 B2 FD | 	call	#__system___getiolock_0606
043d4     FD 12 02 F6 | 	mov	arg01, result1
043d8     90 25 B2 FD | 	call	#__system___lockmem
043dc     37 00 00 FF 
043e0     20 E4 05 F1 | 	add	objptr, ##28192
043e4     F2 14 02 FB | 	rdlong	arg02, objptr
043e8     37 00 00 FF 
043ec     20 E4 85 F1 | 	sub	objptr, ##28192
043f0     00 12 06 F6 | 	mov	arg01, #0
043f4     00 16 06 F6 | 	mov	arg03, #0
043f8     68 32 B2 FD | 	call	#__system___basic_print_string
043fc     00 12 06 F6 | 	mov	arg01, #0
04400     0A 14 06 F6 | 	mov	arg02, #10
04404     00 16 06 F6 | 	mov	arg03, #0
04408     00 32 B2 FD | 	call	#__system___basic_print_char
0440c     00 12 06 F6 | 	mov	arg01, #0
04410     FC 81 B2 FD | 	call	#__system___getiolock_0606
04414     FD 00 68 FC | 	wrlong	#0, result1
04418                 | LR__0211
04418                 | LR__0212
04418     A7 F0 03 F6 | 	mov	ptra, fp
0441c     B2 00 A0 FD | 	call	#popregs_
04420                 | _interpret_ret
04420     2D 00 64 FD | 	ret
04424                 | 
04424                 | ' 
04424                 | ' '---------------------------------------------------------------------------------------------------------------------
04424                 | ' '
04424                 | ' '                          END OF TOKENIZER MAIN CODE
04424                 | ' '
04424                 | ' '---------------------------------------------------------------------------------------------------------------------
04424                 | ' 
04424                 | ' '---------------------------------------------------------------------------------------------------------------------
04424                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
04424                 | ' '---------------------------------------------------------------------------------------------------------------------
04424                 | ' 
04424                 | ' ' Check if the part is an operator, return a token or 0 if not found
04424                 | ' 
04424                 | ' function isoperator(s as string) as ubyte
04424                 | _isoperator
04424     01 4A 05 F6 | 	mov	COUNT_, #1
04428     A8 00 A0 FD | 	call	#pushregs_
0442c                 | ' 
0442c                 | ' select case s
0442c     09 27 02 F6 | 	mov	local01, arg01
04430     B3 01 00 FF 
04434     12 14 06 F6 | 	mov	arg02, ##@LR__5487
04438     13 13 02 F6 | 	mov	arg01, local01
0443c     54 25 B2 FD | 	call	#__system___string_cmp
04440     00 FA 0D F2 | 	cmp	result1, #0 wz
04444     FC 01 90 AD |  if_e	jmp	#LR__0220
04448     B3 01 00 FF 
0444c     14 14 06 F6 | 	mov	arg02, ##@LR__5488
04450     13 13 02 F6 | 	mov	arg01, local01
04454     3C 25 B2 FD | 	call	#__system___string_cmp
04458     00 FA 0D F2 | 	cmp	result1, #0 wz
0445c     EC 01 90 AD |  if_e	jmp	#LR__0221
04460     B3 01 00 FF 
04464     16 14 06 F6 | 	mov	arg02, ##@LR__5489
04468     13 13 02 F6 | 	mov	arg01, local01
0446c     24 25 B2 FD | 	call	#__system___string_cmp
04470     00 FA 0D F2 | 	cmp	result1, #0 wz
04474     DC 01 90 AD |  if_e	jmp	#LR__0222
04478     B3 01 00 FF 
0447c     19 14 06 F6 | 	mov	arg02, ##@LR__5490
04480     13 13 02 F6 | 	mov	arg01, local01
04484     0C 25 B2 FD | 	call	#__system___string_cmp
04488     00 FA 0D F2 | 	cmp	result1, #0 wz
0448c     CC 01 90 AD |  if_e	jmp	#LR__0223
04490     B3 01 00 FF 
04494     1D 14 06 F6 | 	mov	arg02, ##@LR__5491
04498     13 13 02 F6 | 	mov	arg01, local01
0449c     F4 24 B2 FD | 	call	#__system___string_cmp
044a0     00 FA 0D F2 | 	cmp	result1, #0 wz
044a4     BC 01 90 AD |  if_e	jmp	#LR__0224
044a8     B3 01 00 FF 
044ac     1F 14 06 F6 | 	mov	arg02, ##@LR__5492
044b0     13 13 02 F6 | 	mov	arg01, local01
044b4     DC 24 B2 FD | 	call	#__system___string_cmp
044b8     00 FA 0D F2 | 	cmp	result1, #0 wz
044bc     AC 01 90 AD |  if_e	jmp	#LR__0225
044c0     B3 01 00 FF 
044c4     21 14 06 F6 | 	mov	arg02, ##@LR__5493
044c8     13 13 02 F6 | 	mov	arg01, local01
044cc     C4 24 B2 FD | 	call	#__system___string_cmp
044d0     00 FA 0D F2 | 	cmp	result1, #0 wz
044d4     9C 01 90 AD |  if_e	jmp	#LR__0226
044d8     B3 01 00 FF 
044dc     25 14 06 F6 | 	mov	arg02, ##@LR__5494
044e0     13 13 02 F6 | 	mov	arg01, local01
044e4     AC 24 B2 FD | 	call	#__system___string_cmp
044e8     00 FA 0D F2 | 	cmp	result1, #0 wz
044ec     8C 01 90 AD |  if_e	jmp	#LR__0227
044f0     B3 01 00 FF 
044f4     29 14 06 F6 | 	mov	arg02, ##@LR__5495
044f8     13 13 02 F6 | 	mov	arg01, local01
044fc     94 24 B2 FD | 	call	#__system___string_cmp
04500     00 FA 0D F2 | 	cmp	result1, #0 wz
04504     7C 01 90 AD |  if_e	jmp	#LR__0228
04508     B3 01 00 FF 
0450c     2D 14 06 F6 | 	mov	arg02, ##@LR__5496
04510     13 13 02 F6 | 	mov	arg01, local01
04514     7C 24 B2 FD | 	call	#__system___string_cmp
04518     00 FA 0D F2 | 	cmp	result1, #0 wz
0451c     6C 01 90 AD |  if_e	jmp	#LR__0229
04520     B3 01 00 FF 
04524     31 14 06 F6 | 	mov	arg02, ##@LR__5497
04528     13 13 02 F6 | 	mov	arg01, local01
0452c     64 24 B2 FD | 	call	#__system___string_cmp
04530     00 FA 0D F2 | 	cmp	result1, #0 wz
04534     5C 01 90 AD |  if_e	jmp	#LR__0230
04538     B3 01 00 FF 
0453c     35 14 06 F6 | 	mov	arg02, ##@LR__5498
04540     13 13 02 F6 | 	mov	arg01, local01
04544     4C 24 B2 FD | 	call	#__system___string_cmp
04548     00 FA 0D F2 | 	cmp	result1, #0 wz
0454c     4C 01 90 AD |  if_e	jmp	#LR__0231
04550     B3 01 00 FF 
04554     37 14 06 F6 | 	mov	arg02, ##@LR__5499
04558     13 13 02 F6 | 	mov	arg01, local01
0455c     34 24 B2 FD | 	call	#__system___string_cmp
04560     00 FA 0D F2 | 	cmp	result1, #0 wz
04564     3C 01 90 AD |  if_e	jmp	#LR__0232
04568     B3 01 00 FF 
0456c     3B 14 06 F6 | 	mov	arg02, ##@LR__5500
04570     13 13 02 F6 | 	mov	arg01, local01
04574     1C 24 B2 FD | 	call	#__system___string_cmp
04578     00 FA 0D F2 | 	cmp	result1, #0 wz
0457c     2C 01 90 AD |  if_e	jmp	#LR__0233
04580     B3 01 00 FF 
04584     3D 14 06 F6 | 	mov	arg02, ##@LR__5501
04588     13 13 02 F6 | 	mov	arg01, local01
0458c     04 24 B2 FD | 	call	#__system___string_cmp
04590     00 FA 0D F2 | 	cmp	result1, #0 wz
04594     1C 01 90 AD |  if_e	jmp	#LR__0234
04598     B3 01 00 FF 
0459c     3F 14 06 F6 | 	mov	arg02, ##@LR__5502
045a0     13 13 02 F6 | 	mov	arg01, local01
045a4     EC 23 B2 FD | 	call	#__system___string_cmp
045a8     00 FA 0D F2 | 	cmp	result1, #0 wz
045ac     0C 01 90 AD |  if_e	jmp	#LR__0235
045b0     B3 01 00 FF 
045b4     42 14 06 F6 | 	mov	arg02, ##@LR__5503
045b8     13 13 02 F6 | 	mov	arg01, local01
045bc     D4 23 B2 FD | 	call	#__system___string_cmp
045c0     00 FA 0D F2 | 	cmp	result1, #0 wz
045c4     FC 00 90 AD |  if_e	jmp	#LR__0236
045c8     B3 01 00 FF 
045cc     45 14 06 F6 | 	mov	arg02, ##@LR__5504
045d0     13 13 02 F6 | 	mov	arg01, local01
045d4     BC 23 B2 FD | 	call	#__system___string_cmp
045d8     00 FA 0D F2 | 	cmp	result1, #0 wz
045dc     EC 00 90 AD |  if_e	jmp	#LR__0237
045e0     B3 01 00 FF 
045e4     47 14 06 F6 | 	mov	arg02, ##@LR__5505
045e8     13 13 02 F6 | 	mov	arg01, local01
045ec     A4 23 B2 FD | 	call	#__system___string_cmp
045f0     00 FA 0D F2 | 	cmp	result1, #0 wz
045f4     DC 00 90 AD |  if_e	jmp	#LR__0238
045f8     B3 01 00 FF 
045fc     49 14 06 F6 | 	mov	arg02, ##@LR__5506
04600     13 13 02 F6 | 	mov	arg01, local01
04604     8C 23 B2 FD | 	call	#__system___string_cmp
04608     00 FA 0D F2 | 	cmp	result1, #0 wz
0460c     CC 00 90 AD |  if_e	jmp	#LR__0239
04610     B3 01 00 FF 
04614     4C 14 06 F6 | 	mov	arg02, ##@LR__5507
04618     13 13 02 F6 | 	mov	arg01, local01
0461c     74 23 B2 FD | 	call	#__system___string_cmp
04620     00 FA 0D F2 | 	cmp	result1, #0 wz
04624     BC 00 90 AD |  if_e	jmp	#LR__0240
04628     B3 01 00 FF 
0462c     4F 14 06 F6 | 	mov	arg02, ##@LR__5508
04630     13 13 02 F6 | 	mov	arg01, local01
04634     5C 23 B2 FD | 	call	#__system___string_cmp
04638     00 FA 0D F2 | 	cmp	result1, #0 wz
0463c     AC 00 90 AD |  if_e	jmp	#LR__0241
04640     B0 00 90 FD | 	jmp	#LR__0242
04644                 | LR__0220
04644     01 FA 05 F6 | 	mov	result1, #1
04648     AC 00 90 FD | 	jmp	#LR__0243
0464c                 | LR__0221
0464c     02 FA 05 F6 | 	mov	result1, #2
04650     A4 00 90 FD | 	jmp	#LR__0243
04654                 | LR__0222
04654     03 FA 05 F6 | 	mov	result1, #3
04658     9C 00 90 FD | 	jmp	#LR__0243
0465c                 | LR__0223
0465c     04 FA 05 F6 | 	mov	result1, #4
04660     94 00 90 FD | 	jmp	#LR__0243
04664                 | LR__0224
04664     05 FA 05 F6 | 	mov	result1, #5
04668     8C 00 90 FD | 	jmp	#LR__0243
0466c                 | LR__0225
0466c     06 FA 05 F6 | 	mov	result1, #6
04670     84 00 90 FD | 	jmp	#LR__0243
04674                 | LR__0226
04674     07 FA 05 F6 | 	mov	result1, #7
04678     7C 00 90 FD | 	jmp	#LR__0243
0467c                 | LR__0227
0467c     08 FA 05 F6 | 	mov	result1, #8
04680     74 00 90 FD | 	jmp	#LR__0243
04684                 | LR__0228
04684     09 FA 05 F6 | 	mov	result1, #9
04688     6C 00 90 FD | 	jmp	#LR__0243
0468c                 | LR__0229
0468c     0A FA 05 F6 | 	mov	result1, #10
04690     64 00 90 FD | 	jmp	#LR__0243
04694                 | LR__0230
04694     0B FA 05 F6 | 	mov	result1, #11
04698     5C 00 90 FD | 	jmp	#LR__0243
0469c                 | LR__0231
0469c     0C FA 05 F6 | 	mov	result1, #12
046a0     54 00 90 FD | 	jmp	#LR__0243
046a4                 | LR__0232
046a4     0D FA 05 F6 | 	mov	result1, #13
046a8     4C 00 90 FD | 	jmp	#LR__0243
046ac                 | LR__0233
046ac     0E FA 05 F6 | 	mov	result1, #14
046b0     44 00 90 FD | 	jmp	#LR__0243
046b4                 | LR__0234
046b4     1B FA 05 F6 | 	mov	result1, #27
046b8     3C 00 90 FD | 	jmp	#LR__0243
046bc                 | LR__0235
046bc     27 FA 05 F6 | 	mov	result1, #39
046c0     34 00 90 FD | 	jmp	#LR__0243
046c4                 | LR__0236
046c4     26 FA 05 F6 | 	mov	result1, #38
046c8     2C 00 90 FD | 	jmp	#LR__0243
046cc                 | LR__0237
046cc     10 FA 05 F6 | 	mov	result1, #16
046d0     24 00 90 FD | 	jmp	#LR__0243
046d4                 | LR__0238
046d4     0F FA 05 F6 | 	mov	result1, #15
046d8     1C 00 90 FD | 	jmp	#LR__0243
046dc                 | LR__0239
046dc     2A FA 05 F6 | 	mov	result1, #42
046e0     14 00 90 FD | 	jmp	#LR__0243
046e4                 | LR__0240
046e4     28 FA 05 F6 | 	mov	result1, #40
046e8     0C 00 90 FD | 	jmp	#LR__0243
046ec                 | LR__0241
046ec     29 FA 05 F6 | 	mov	result1, #41
046f0     04 00 90 FD | 	jmp	#LR__0243
046f4                 | LR__0242
046f4     00 FA 05 F6 | 	mov	result1, #0
046f8                 | LR__0243
046f8     A7 F0 03 F6 | 	mov	ptra, fp
046fc     B2 00 A0 FD | 	call	#popregs_
04700                 | _isoperator_ret
04700     2D 00 64 FD | 	ret
04704                 | 
04704                 | ' 
04704                 | ' ' Check if the part is a channel#, return a token or 0 if not found
04704                 | ' 
04704                 | ' function ischannel(s as string) as ulong
04704                 | _ischannel
04704     02 4A 05 F6 | 	mov	COUNT_, #2
04708     A8 00 A0 FD | 	call	#pushregs_
0470c                 | ' if left$(s,1)<>"#" then return 0
0470c     09 27 02 F6 | 	mov	local01, arg01
04710     01 14 06 F6 | 	mov	arg02, #1
04714     D4 42 B2 FD | 	call	#__system__Left_S
04718     FD 12 02 F6 | 	mov	arg01, result1
0471c     B3 01 00 FF 
04720     52 14 06 F6 | 	mov	arg02, ##@LR__5509
04724     6C 22 B2 FD | 	call	#__system___string_cmp
04728     00 FA 0D F2 | 	cmp	result1, #0 wz
0472c     00 FA 05 56 |  if_ne	mov	result1, #0
04730     AC 00 90 5D |  if_ne	jmp	#LR__0254
04734                 | ' if len(s)<>2 then return 0
04734     13 13 02 F6 | 	mov	arg01, local01
04738     09 29 02 F6 | 	mov	local02, arg01
0473c     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
04740                 | LR__0250
04740     14 FB C9 FA | 	rdbyte	result1, local02 wz
04744     01 28 06 51 |  if_ne	add	local02, #1
04748     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
0474c                 | LR__0251
0474c     09 29 82 F1 | 	sub	local02, arg01
04750     14 FB 01 F6 | 	mov	result1, local02
04754     02 FA 0D F2 | 	cmp	result1, #2 wz
04758     00 FA 05 56 |  if_ne	mov	result1, #0
0475c     80 00 90 5D |  if_ne	jmp	#LR__0254
04760                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04760     13 13 02 F6 | 	mov	arg01, local01
04764     01 14 06 F6 | 	mov	arg02, #1
04768     08 43 B2 FD | 	call	#__system__Right_S
0476c     FD 12 02 F6 | 	mov	arg01, result1
04770     B3 01 00 FF 
04774     54 14 06 F6 | 	mov	arg02, ##@LR__5510
04778     18 22 B2 FD | 	call	#__system___string_cmp
0477c     00 FA 55 F2 | 	cmps	result1, #0 wc
04780     24 00 90 CD |  if_b	jmp	#LR__0252
04784     13 13 02 F6 | 	mov	arg01, local01
04788     01 14 06 F6 | 	mov	arg02, #1
0478c     E4 42 B2 FD | 	call	#__system__Right_S
04790     FD 12 02 F6 | 	mov	arg01, result1
04794     B3 01 00 FF 
04798     56 14 06 F6 | 	mov	arg02, ##@LR__5511
0479c     F4 21 B2 FD | 	call	#__system___string_cmp
047a0     01 FA 55 F2 | 	cmps	result1, #1 wc
047a4     08 00 90 CD |  if_b	jmp	#LR__0253
047a8                 | LR__0252
047a8     00 FA 05 F6 | 	mov	result1, #0
047ac     30 00 90 FD | 	jmp	#LR__0254
047b0                 | LR__0253
047b0                 | ' return token_channel+val(right$(s,1))
047b0     13 13 02 F6 | 	mov	arg01, local01
047b4     01 14 06 F6 | 	mov	arg02, #1
047b8     B8 42 B2 FD | 	call	#__system__Right_S
047bc     FD 12 02 F6 | 	mov	arg01, result1
047c0     30 58 B2 FD | 	call	#__system____builtin_atof
047c4     FD 14 02 F6 | 	mov	arg02, result1
047c8     00 18 21 FF 
047cc     00 12 06 F6 | 	mov	arg01, ##1110441984
047d0     44 4C B2 FD | 	call	#__system___float_add
047d4     FD 12 02 F6 | 	mov	arg01, result1
047d8     00 14 06 F6 | 	mov	arg02, #0
047dc     D0 54 B2 FD | 	call	#__system___float_tointeger
047e0                 | LR__0254
047e0     A7 F0 03 F6 | 	mov	ptra, fp
047e4     B2 00 A0 FD | 	call	#popregs_
047e8                 | _ischannel_ret
047e8     2D 00 64 FD | 	ret
047ec                 | 
047ec                 | ' 
047ec                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
047ec                 | ' ' todo: add spin2/pasm constants for pin control
047ec                 | ' 
047ec                 | ' function isconstant(s as string) as integer
047ec                 | _isconstant
047ec     01 4A 05 F6 | 	mov	COUNT_, #1
047f0     A8 00 A0 FD | 	call	#pushregs_
047f4                 | ' 
047f4                 | ' select case s
047f4     09 27 02 F6 | 	mov	local01, arg01
047f8     B3 01 00 FF 
047fc     58 14 06 F6 | 	mov	arg02, ##@LR__5512
04800     13 13 02 F6 | 	mov	arg01, local01
04804     8C 21 B2 FD | 	call	#__system___string_cmp
04808     00 FA 0D F2 | 	cmp	result1, #0 wz
0480c     34 00 90 AD |  if_e	jmp	#LR__0260
04810     B3 01 00 FF 
04814     5E 14 06 F6 | 	mov	arg02, ##@LR__5513
04818     13 13 02 F6 | 	mov	arg01, local01
0481c     74 21 B2 FD | 	call	#__system___string_cmp
04820     00 FA 0D F2 | 	cmp	result1, #0 wz
04824     24 00 90 AD |  if_e	jmp	#LR__0261
04828     B3 01 00 FF 
0482c     65 14 06 F6 | 	mov	arg02, ##@LR__5514
04830     13 13 02 F6 | 	mov	arg01, local01
04834     5C 21 B2 FD | 	call	#__system___string_cmp
04838     00 FA 0D F2 | 	cmp	result1, #0 wz
0483c     14 00 90 AD |  if_e	jmp	#LR__0262
04840     18 00 90 FD | 	jmp	#LR__0263
04844                 | LR__0260
04844     01 FA 05 F6 | 	mov	result1, #1
04848     14 00 90 FD | 	jmp	#LR__0264
0484c                 | LR__0261
0484c     02 FA 05 F6 | 	mov	result1, #2
04850     0C 00 90 FD | 	jmp	#LR__0264
04854                 | LR__0262
04854     04 FA 05 F6 | 	mov	result1, #4
04858     04 00 90 FD | 	jmp	#LR__0264
0485c                 | LR__0263
0485c     00 FA 05 F6 | 	mov	result1, #0
04860                 | LR__0264
04860     A7 F0 03 F6 | 	mov	ptra, fp
04864     B2 00 A0 FD | 	call	#popregs_
04868                 | _isconstant_ret
04868     2D 00 64 FD | 	ret
0486c                 | 
0486c                 | ' 
0486c                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
0486c                 | ' 
0486c                 | ' function isnotename(s as string) as ulong
0486c                 | _isnotename
0486c     07 4A 05 F6 | 	mov	COUNT_, #7
04870     A8 00 A0 FD | 	call	#pushregs_
04874                 | ' if left$(s,1)<>"#" then return 0
04874     09 27 02 F6 | 	mov	local01, arg01
04878     01 14 06 F6 | 	mov	arg02, #1
0487c     6C 41 B2 FD | 	call	#__system__Left_S
04880     FD 12 02 F6 | 	mov	arg01, result1
04884     B3 01 00 FF 
04888     6D 14 06 F6 | 	mov	arg02, ##@LR__5515
0488c     04 21 B2 FD | 	call	#__system___string_cmp
04890     00 FA 0D F2 | 	cmp	result1, #0 wz
04894     00 FA 05 56 |  if_ne	mov	result1, #0
04898     30 03 90 5D |  if_ne	jmp	#LR__0293
0489c                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
0489c     13 13 02 F6 | 	mov	arg01, local01
048a0     03 14 06 F6 | 	mov	arg02, #3
048a4     01 16 06 F6 | 	mov	arg03, #1
048a8     58 42 B2 FD | 	call	#__system__Mid_S
048ac     FD 12 02 F6 | 	mov	arg01, result1
048b0     B3 01 00 FF 
048b4     6F 14 06 F6 | 	mov	arg02, ##@LR__5516
048b8     D8 20 B2 FD | 	call	#__system___string_cmp
048bc     00 FA 0D F2 | 	cmp	result1, #0 wz
048c0     18 00 90 5D |  if_ne	jmp	#LR__0270
048c4     13 13 02 F6 | 	mov	arg01, local01
048c8     02 14 06 F6 | 	mov	arg02, #2
048cc     02 16 06 F6 | 	mov	arg03, #2
048d0     30 42 B2 FD | 	call	#__system__Mid_S
048d4     FD 28 02 F6 | 	mov	local02, result1
048d8     14 00 90 FD | 	jmp	#LR__0271
048dc                 | LR__0270
048dc     13 13 02 F6 | 	mov	arg01, local01
048e0     02 14 06 F6 | 	mov	arg02, #2
048e4     01 16 06 F6 | 	mov	arg03, #1
048e8     18 42 B2 FD | 	call	#__system__Mid_S
048ec     FD 28 02 F6 | 	mov	local02, result1
048f0                 | LR__0271
048f0                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
048f0     13 13 02 F6 | 	mov	arg01, local01
048f4     09 2B 02 F6 | 	mov	local03, arg01
048f8     97 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
048fc                 | LR__0272
048fc     15 FB C9 FA | 	rdbyte	result1, local03 wz
04900     01 2A 06 51 |  if_ne	add	local03, #1
04904     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
04908                 | LR__0273
04908     09 2B 82 F1 | 	sub	local03, arg01
0490c     15 15 02 F6 | 	mov	arg02, local03
04910     01 14 86 F1 | 	sub	arg02, #1
04914     13 13 02 F6 | 	mov	arg01, local01
04918     01 16 06 F6 | 	mov	arg03, #1
0491c     E4 41 B2 FD | 	call	#__system__Mid_S
04920     FD 12 02 F6 | 	mov	arg01, result1
04924     B3 01 00 FF 
04928     71 14 06 F6 | 	mov	arg02, ##@LR__5517
0492c     64 20 B2 FD | 	call	#__system___string_cmp
04930     00 FA 0D F2 | 	cmp	result1, #0 wz
04934     28 00 90 AD |  if_e	jmp	#LR__0274
04938     13 13 02 F6 | 	mov	arg01, local01
0493c     01 14 06 F6 | 	mov	arg02, #1
04940     30 41 B2 FD | 	call	#__system__Right_S
04944     FD 12 02 F6 | 	mov	arg01, result1
04948     A8 56 B2 FD | 	call	#__system____builtin_atof
0494c     FD 12 02 F6 | 	mov	arg01, result1
04950     00 14 06 F6 | 	mov	arg02, #0
04954     58 53 B2 FD | 	call	#__system___float_tointeger
04958     FD 2C 02 F6 | 	mov	local04, result1
0495c     34 00 90 FD | 	jmp	#LR__0275
04960                 | LR__0274
04960     13 13 02 F6 | 	mov	arg01, local01
04964     01 14 06 F6 | 	mov	arg02, #1
04968     08 41 B2 FD | 	call	#__system__Right_S
0496c     FD 12 02 F6 | 	mov	arg01, result1
04970     80 56 B2 FD | 	call	#__system____builtin_atof
04974     FD 14 02 F6 | 	mov	arg02, result1
04978     00 C0 5F FF 
0497c     00 12 06 F6 | 	mov	arg01, ##-1082130432
04980     64 4E B2 FD | 	call	#__system___float_mul
04984     FD 12 02 F6 | 	mov	arg01, result1
04988     00 14 06 F6 | 	mov	arg02, #0
0498c     20 53 B2 FD | 	call	#__system___float_tointeger
04990     FD 2C 02 F6 | 	mov	local04, result1
04994                 | LR__0275
04994                 | ' 
04994                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04994     00 2C 0E F2 | 	cmp	local04, #0 wz
04998     24 00 90 5D |  if_ne	jmp	#LR__0276
0499c     13 13 02 F6 | 	mov	arg01, local01
049a0     01 14 06 F6 | 	mov	arg02, #1
049a4     CC 40 B2 FD | 	call	#__system__Right_S
049a8     FD 12 02 F6 | 	mov	arg01, result1
049ac     B3 01 00 FF 
049b0     73 14 06 F6 | 	mov	arg02, ##@LR__5518
049b4     DC 1F B2 FD | 	call	#__system___string_cmp
049b8     00 FA 0D F2 | 	cmp	result1, #0 wz
049bc     04 2C 06 56 |  if_ne	mov	local04, #4
049c0                 | LR__0276
049c0                 | ' 
049c0                 | ' select case s1
049c0     14 2F 02 F6 | 	mov	local05, local02
049c4     B3 01 00 FF 
049c8     75 14 06 F6 | 	mov	arg02, ##@LR__5519
049cc     17 13 02 F6 | 	mov	arg01, local05
049d0     C0 1F B2 FD | 	call	#__system___string_cmp
049d4     00 FA 0D F2 | 	cmp	result1, #0 wz
049d8     24 01 90 AD |  if_e	jmp	#LR__0277
049dc     B3 01 00 FF 
049e0     77 14 06 F6 | 	mov	arg02, ##@LR__5520
049e4     17 13 02 F6 | 	mov	arg01, local05
049e8     A8 1F B2 FD | 	call	#__system___string_cmp
049ec     00 FA 0D F2 | 	cmp	result1, #0 wz
049f0     18 01 90 AD |  if_e	jmp	#LR__0278
049f4     B3 01 00 FF 
049f8     7A 14 06 F6 | 	mov	arg02, ##@LR__5521
049fc     17 13 02 F6 | 	mov	arg01, local05
04a00     90 1F B2 FD | 	call	#__system___string_cmp
04a04     00 FA 0D F2 | 	cmp	result1, #0 wz
04a08     0C 01 90 AD |  if_e	jmp	#LR__0279
04a0c     B3 01 00 FF 
04a10     7C 14 06 F6 | 	mov	arg02, ##@LR__5522
04a14     17 13 02 F6 | 	mov	arg01, local05
04a18     78 1F B2 FD | 	call	#__system___string_cmp
04a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a20     00 01 90 AD |  if_e	jmp	#LR__0280
04a24     B3 01 00 FF 
04a28     7F 14 06 F6 | 	mov	arg02, ##@LR__5523
04a2c     17 13 02 F6 | 	mov	arg01, local05
04a30     60 1F B2 FD | 	call	#__system___string_cmp
04a34     00 FA 0D F2 | 	cmp	result1, #0 wz
04a38     F4 00 90 AD |  if_e	jmp	#LR__0281
04a3c     B3 01 00 FF 
04a40     81 14 06 F6 | 	mov	arg02, ##@LR__5524
04a44     17 13 02 F6 | 	mov	arg01, local05
04a48     48 1F B2 FD | 	call	#__system___string_cmp
04a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a50     E8 00 90 AD |  if_e	jmp	#LR__0282
04a54     B3 01 00 FF 
04a58     83 14 06 F6 | 	mov	arg02, ##@LR__5525
04a5c     17 13 02 F6 | 	mov	arg01, local05
04a60     30 1F B2 FD | 	call	#__system___string_cmp
04a64     00 FA 0D F2 | 	cmp	result1, #0 wz
04a68     DC 00 90 AD |  if_e	jmp	#LR__0283
04a6c     B3 01 00 FF 
04a70     86 14 06 F6 | 	mov	arg02, ##@LR__5526
04a74     17 13 02 F6 | 	mov	arg01, local05
04a78     18 1F B2 FD | 	call	#__system___string_cmp
04a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a80     D0 00 90 AD |  if_e	jmp	#LR__0284
04a84     B3 01 00 FF 
04a88     88 14 06 F6 | 	mov	arg02, ##@LR__5527
04a8c     17 13 02 F6 | 	mov	arg01, local05
04a90     00 1F B2 FD | 	call	#__system___string_cmp
04a94     00 FA 0D F2 | 	cmp	result1, #0 wz
04a98     C4 00 90 AD |  if_e	jmp	#LR__0285
04a9c     B3 01 00 FF 
04aa0     8B 14 06 F6 | 	mov	arg02, ##@LR__5528
04aa4     17 13 02 F6 | 	mov	arg01, local05
04aa8     E8 1E B2 FD | 	call	#__system___string_cmp
04aac     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab0     B8 00 90 AD |  if_e	jmp	#LR__0286
04ab4     B3 01 00 FF 
04ab8     8D 14 06 F6 | 	mov	arg02, ##@LR__5529
04abc     17 13 02 F6 | 	mov	arg01, local05
04ac0     D0 1E B2 FD | 	call	#__system___string_cmp
04ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ac8     AC 00 90 AD |  if_e	jmp	#LR__0287
04acc     B3 01 00 FF 
04ad0     90 14 06 F6 | 	mov	arg02, ##@LR__5530
04ad4     17 13 02 F6 | 	mov	arg01, local05
04ad8     B8 1E B2 FD | 	call	#__system___string_cmp
04adc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae0     A0 00 90 AD |  if_e	jmp	#LR__0288
04ae4     B3 01 00 FF 
04ae8     92 14 06 F6 | 	mov	arg02, ##@LR__5531
04aec     17 13 02 F6 | 	mov	arg01, local05
04af0     A0 1E B2 FD | 	call	#__system___string_cmp
04af4     00 FA 0D F2 | 	cmp	result1, #0 wz
04af8     94 00 90 AD |  if_e	jmp	#LR__0289
04afc     9C 00 90 FD | 	jmp	#LR__0290
04b00                 | LR__0277
04b00     01 00 00 FF 
04b04     00 31 06 F6 | 	mov	local06, ##768
04b08     98 00 90 FD | 	jmp	#LR__0291
04b0c                 | LR__0278
04b0c     01 00 00 FF 
04b10     01 31 06 F6 | 	mov	local06, ##769
04b14     8C 00 90 FD | 	jmp	#LR__0291
04b18                 | LR__0279
04b18     01 00 00 FF 
04b1c     02 31 06 F6 | 	mov	local06, ##770
04b20     80 00 90 FD | 	jmp	#LR__0291
04b24                 | LR__0280
04b24     01 00 00 FF 
04b28     03 31 06 F6 | 	mov	local06, ##771
04b2c     74 00 90 FD | 	jmp	#LR__0291
04b30                 | LR__0281
04b30     01 00 00 FF 
04b34     04 31 06 F6 | 	mov	local06, ##772
04b38     68 00 90 FD | 	jmp	#LR__0291
04b3c                 | LR__0282
04b3c     01 00 00 FF 
04b40     05 31 06 F6 | 	mov	local06, ##773
04b44     5C 00 90 FD | 	jmp	#LR__0291
04b48                 | LR__0283
04b48     01 00 00 FF 
04b4c     06 31 06 F6 | 	mov	local06, ##774
04b50     50 00 90 FD | 	jmp	#LR__0291
04b54                 | LR__0284
04b54     01 00 00 FF 
04b58     07 31 06 F6 | 	mov	local06, ##775
04b5c     44 00 90 FD | 	jmp	#LR__0291
04b60                 | LR__0285
04b60     01 00 00 FF 
04b64     08 31 06 F6 | 	mov	local06, ##776
04b68     38 00 90 FD | 	jmp	#LR__0291
04b6c                 | LR__0286
04b6c     01 00 00 FF 
04b70     09 31 06 F6 | 	mov	local06, ##777
04b74     2C 00 90 FD | 	jmp	#LR__0291
04b78                 | LR__0287
04b78     01 00 00 FF 
04b7c     0A 31 06 F6 | 	mov	local06, ##778
04b80     20 00 90 FD | 	jmp	#LR__0291
04b84                 | LR__0288
04b84     01 00 00 FF 
04b88     0B 31 06 F6 | 	mov	local06, ##779
04b8c     14 00 90 FD | 	jmp	#LR__0291
04b90                 | LR__0289
04b90     01 00 00 FF 
04b94     0B 31 06 F6 | 	mov	local06, ##779
04b98     08 00 90 FD | 	jmp	#LR__0291
04b9c                 | LR__0290
04b9c     00 FA 05 F6 | 	mov	result1, #0
04ba0     28 00 90 FD | 	jmp	#LR__0293
04ba4                 | LR__0291
04ba4                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04ba4     FF FF 7F FF 
04ba8     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04bac     18 00 90 CD |  if_b	jmp	#LR__0292
04bb0     0A 2C 56 F2 | 	cmps	local04, #10 wc
04bb4     16 33 02 C6 |  if_b	mov	local07, local04
04bb8     01 32 66 C0 |  if_b	shl	local07, #1
04bbc     16 33 02 C1 |  if_b	add	local07, local04
04bc0     02 32 66 C0 |  if_b	shl	local07, #2
04bc4     19 31 02 C1 |  if_b	add	local06, local07
04bc8                 | LR__0292
04bc8                 | ' return token
04bc8     18 FB 01 F6 | 	mov	result1, local06
04bcc                 | LR__0293
04bcc     A7 F0 03 F6 | 	mov	ptra, fp
04bd0     B2 00 A0 FD | 	call	#popregs_
04bd4                 | _isnotename_ret
04bd4     2D 00 64 FD | 	ret
04bd8                 | 
04bd8                 | ' 
04bd8                 | ' ' Check if the part is a separator, return a token or 0 if not found
04bd8                 | ' 
04bd8                 | ' function isseparator(s as string) as ubyte
04bd8                 | _isseparator
04bd8     01 4A 05 F6 | 	mov	COUNT_, #1
04bdc     A8 00 A0 FD | 	call	#pushregs_
04be0                 | ' 
04be0                 | ' select case s
04be0     09 27 02 F6 | 	mov	local01, arg01
04be4     B3 01 00 FF 
04be8     94 14 06 F6 | 	mov	arg02, ##@LR__5532
04bec     13 13 02 F6 | 	mov	arg01, local01
04bf0     A0 1D B2 FD | 	call	#__system___string_cmp
04bf4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bf8     54 01 90 AD |  if_e	jmp	#LR__0300
04bfc     B3 01 00 FF 
04c00     96 14 06 F6 | 	mov	arg02, ##@LR__5533
04c04     13 13 02 F6 | 	mov	arg01, local01
04c08     88 1D B2 FD | 	call	#__system___string_cmp
04c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c10     44 01 90 AD |  if_e	jmp	#LR__0301
04c14     B3 01 00 FF 
04c18     98 14 06 F6 | 	mov	arg02, ##@LR__5534
04c1c     13 13 02 F6 | 	mov	arg01, local01
04c20     70 1D B2 FD | 	call	#__system___string_cmp
04c24     00 FA 0D F2 | 	cmp	result1, #0 wz
04c28     34 01 90 AD |  if_e	jmp	#LR__0302
04c2c     B3 01 00 FF 
04c30     9A 14 06 F6 | 	mov	arg02, ##@LR__5535
04c34     13 13 02 F6 | 	mov	arg01, local01
04c38     58 1D B2 FD | 	call	#__system___string_cmp
04c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c40     24 01 90 AD |  if_e	jmp	#LR__0303
04c44     B3 01 00 FF 
04c48     9C 14 06 F6 | 	mov	arg02, ##@LR__5536
04c4c     13 13 02 F6 | 	mov	arg01, local01
04c50     40 1D B2 FD | 	call	#__system___string_cmp
04c54     00 FA 0D F2 | 	cmp	result1, #0 wz
04c58     14 01 90 AD |  if_e	jmp	#LR__0304
04c5c     B3 01 00 FF 
04c60     9E 14 06 F6 | 	mov	arg02, ##@LR__5537
04c64     13 13 02 F6 | 	mov	arg01, local01
04c68     28 1D B2 FD | 	call	#__system___string_cmp
04c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c70     04 01 90 AD |  if_e	jmp	#LR__0305
04c74     B3 01 00 FF 
04c78     A0 14 06 F6 | 	mov	arg02, ##@LR__5538
04c7c     13 13 02 F6 | 	mov	arg01, local01
04c80     10 1D B2 FD | 	call	#__system___string_cmp
04c84     00 FA 0D F2 | 	cmp	result1, #0 wz
04c88     F4 00 90 AD |  if_e	jmp	#LR__0306
04c8c     B3 01 00 FF 
04c90     A2 14 06 F6 | 	mov	arg02, ##@LR__5539
04c94     13 13 02 F6 | 	mov	arg01, local01
04c98     F8 1C B2 FD | 	call	#__system___string_cmp
04c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ca0     E4 00 90 AD |  if_e	jmp	#LR__0307
04ca4     B3 01 00 FF 
04ca8     A4 14 06 F6 | 	mov	arg02, ##@LR__5540
04cac     13 13 02 F6 | 	mov	arg01, local01
04cb0     E0 1C B2 FD | 	call	#__system___string_cmp
04cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04cb8     D4 00 90 AD |  if_e	jmp	#LR__0308
04cbc     B3 01 00 FF 
04cc0     A6 14 06 F6 | 	mov	arg02, ##@LR__5541
04cc4     13 13 02 F6 | 	mov	arg01, local01
04cc8     C8 1C B2 FD | 	call	#__system___string_cmp
04ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd0     C4 00 90 AD |  if_e	jmp	#LR__0309
04cd4     B3 01 00 FF 
04cd8     A8 14 06 F6 | 	mov	arg02, ##@LR__5542
04cdc     13 13 02 F6 | 	mov	arg01, local01
04ce0     B0 1C B2 FD | 	call	#__system___string_cmp
04ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ce8     B4 00 90 AD |  if_e	jmp	#LR__0310
04cec     B3 01 00 FF 
04cf0     AA 14 06 F6 | 	mov	arg02, ##@LR__5543
04cf4     13 13 02 F6 | 	mov	arg01, local01
04cf8     98 1C B2 FD | 	call	#__system___string_cmp
04cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
04d00     A4 00 90 AD |  if_e	jmp	#LR__0311
04d04     B3 01 00 FF 
04d08     AC 14 06 F6 | 	mov	arg02, ##@LR__5544
04d0c     13 13 02 F6 | 	mov	arg01, local01
04d10     80 1C B2 FD | 	call	#__system___string_cmp
04d14     00 FA 0D F2 | 	cmp	result1, #0 wz
04d18     94 00 90 AD |  if_e	jmp	#LR__0312
04d1c     B3 01 00 FF 
04d20     AE 14 06 F6 | 	mov	arg02, ##@LR__5545
04d24     13 13 02 F6 | 	mov	arg01, local01
04d28     68 1C B2 FD | 	call	#__system___string_cmp
04d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d30     84 00 90 AD |  if_e	jmp	#LR__0313
04d34     B3 01 00 FF 
04d38     B0 14 06 F6 | 	mov	arg02, ##@LR__5546
04d3c     13 13 02 F6 | 	mov	arg01, local01
04d40     50 1C B2 FD | 	call	#__system___string_cmp
04d44     00 FA 0D F2 | 	cmp	result1, #0 wz
04d48     74 00 90 AD |  if_e	jmp	#LR__0314
04d4c     78 00 90 FD | 	jmp	#LR__0315
04d50                 | LR__0300
04d50     01 FA 05 F6 | 	mov	result1, #1
04d54     74 00 90 FD | 	jmp	#LR__0316
04d58                 | LR__0301
04d58     02 FA 05 F6 | 	mov	result1, #2
04d5c     6C 00 90 FD | 	jmp	#LR__0316
04d60                 | LR__0302
04d60     1B FA 05 F6 | 	mov	result1, #27
04d64     64 00 90 FD | 	jmp	#LR__0316
04d68                 | LR__0303
04d68     11 FA 05 F6 | 	mov	result1, #17
04d6c     5C 00 90 FD | 	jmp	#LR__0316
04d70                 | LR__0304
04d70     05 FA 05 F6 | 	mov	result1, #5
04d74     54 00 90 FD | 	jmp	#LR__0316
04d78                 | LR__0305
04d78     06 FA 05 F6 | 	mov	result1, #6
04d7c     4C 00 90 FD | 	jmp	#LR__0316
04d80                 | LR__0306
04d80     12 FA 05 F6 | 	mov	result1, #18
04d84     44 00 90 FD | 	jmp	#LR__0316
04d88                 | LR__0307
04d88     13 FA 05 F6 | 	mov	result1, #19
04d8c     3C 00 90 FD | 	jmp	#LR__0316
04d90                 | LR__0308
04d90     0C FA 05 F6 | 	mov	result1, #12
04d94     34 00 90 FD | 	jmp	#LR__0316
04d98                 | LR__0309
04d98     14 FA 05 F6 | 	mov	result1, #20
04d9c     2C 00 90 FD | 	jmp	#LR__0316
04da0                 | LR__0310
04da0     15 FA 05 F6 | 	mov	result1, #21
04da4     24 00 90 FD | 	jmp	#LR__0316
04da8                 | LR__0311
04da8     16 FA 05 F6 | 	mov	result1, #22
04dac     1C 00 90 FD | 	jmp	#LR__0316
04db0                 | LR__0312
04db0     FF FB 05 F6 | 	mov	result1, #511
04db4     14 00 90 FD | 	jmp	#LR__0316
04db8                 | LR__0313
04db8     0F FA 05 F6 | 	mov	result1, #15
04dbc     0C 00 90 FD | 	jmp	#LR__0316
04dc0                 | LR__0314
04dc0     10 FA 05 F6 | 	mov	result1, #16
04dc4     04 00 90 FD | 	jmp	#LR__0316
04dc8                 | LR__0315
04dc8     00 FA 05 F6 | 	mov	result1, #0
04dcc                 | LR__0316
04dcc     A7 F0 03 F6 | 	mov	ptra, fp
04dd0     B2 00 A0 FD | 	call	#popregs_
04dd4                 | _isseparator_ret
04dd4     2D 00 64 FD | 	ret
04dd8                 | 
04dd8                 | ' 
04dd8                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04dd8                 | ' 
04dd8                 | ' function iscommand(s as string) as ubyte
04dd8                 | _iscommand
04dd8     01 4A 05 F6 | 	mov	COUNT_, #1
04ddc     A8 00 A0 FD | 	call	#pushregs_
04de0                 | ' 
04de0                 | ' select case s
04de0     09 27 02 F6 | 	mov	local01, arg01
04de4     B3 01 00 FF 
04de8     B4 14 06 F6 | 	mov	arg02, ##@LR__5548
04dec     13 13 02 F6 | 	mov	arg01, local01
04df0     A0 1B B2 FD | 	call	#__system___string_cmp
04df4     00 FA 0D F2 | 	cmp	result1, #0 wz
04df8     7C 0C 90 AD |  if_e	jmp	#LR__0320
04dfc     B3 01 00 FF 
04e00     B9 14 06 F6 | 	mov	arg02, ##@LR__5549
04e04     13 13 02 F6 | 	mov	arg01, local01
04e08     88 1B B2 FD | 	call	#__system___string_cmp
04e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e10     6C 0C 90 AD |  if_e	jmp	#LR__0321
04e14     B3 01 00 FF 
04e18     BC 14 06 F6 | 	mov	arg02, ##@LR__5550
04e1c     13 13 02 F6 | 	mov	arg01, local01
04e20     70 1B B2 FD | 	call	#__system___string_cmp
04e24     00 FA 0D F2 | 	cmp	result1, #0 wz
04e28     5C 0C 90 AD |  if_e	jmp	#LR__0322
04e2c     B3 01 00 FF 
04e30     C1 14 06 F6 | 	mov	arg02, ##@LR__5551
04e34     13 13 02 F6 | 	mov	arg01, local01
04e38     58 1B B2 FD | 	call	#__system___string_cmp
04e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e40     4C 0C 90 AD |  if_e	jmp	#LR__0323
04e44     B3 01 00 FF 
04e48     C5 14 06 F6 | 	mov	arg02, ##@LR__5552
04e4c     13 13 02 F6 | 	mov	arg01, local01
04e50     40 1B B2 FD | 	call	#__system___string_cmp
04e54     00 FA 0D F2 | 	cmp	result1, #0 wz
04e58     3C 0C 90 AD |  if_e	jmp	#LR__0324
04e5c     B3 01 00 FF 
04e60     CA 14 06 F6 | 	mov	arg02, ##@LR__5553
04e64     13 13 02 F6 | 	mov	arg01, local01
04e68     28 1B B2 FD | 	call	#__system___string_cmp
04e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e70     2C 0C 90 AD |  if_e	jmp	#LR__0325
04e74     B3 01 00 FF 
04e78     CE 14 06 F6 | 	mov	arg02, ##@LR__5554
04e7c     13 13 02 F6 | 	mov	arg01, local01
04e80     10 1B B2 FD | 	call	#__system___string_cmp
04e84     00 FA 0D F2 | 	cmp	result1, #0 wz
04e88     1C 0C 90 AD |  if_e	jmp	#LR__0326
04e8c     B3 01 00 FF 
04e90     D1 14 06 F6 | 	mov	arg02, ##@LR__5555
04e94     13 13 02 F6 | 	mov	arg01, local01
04e98     F8 1A B2 FD | 	call	#__system___string_cmp
04e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea0     0C 0C 90 AD |  if_e	jmp	#LR__0327
04ea4     B3 01 00 FF 
04ea8     DC 14 06 F6 | 	mov	arg02, ##@LR__5556
04eac     13 13 02 F6 | 	mov	arg01, local01
04eb0     E0 1A B2 FD | 	call	#__system___string_cmp
04eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04eb8     FC 0B 90 AD |  if_e	jmp	#LR__0328
04ebc     B3 01 00 FF 
04ec0     E0 14 06 F6 | 	mov	arg02, ##@LR__5557
04ec4     13 13 02 F6 | 	mov	arg01, local01
04ec8     C8 1A B2 FD | 	call	#__system___string_cmp
04ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed0     EC 0B 90 AD |  if_e	jmp	#LR__0329
04ed4     B3 01 00 FF 
04ed8     EA 14 06 F6 | 	mov	arg02, ##@LR__5558
04edc     13 13 02 F6 | 	mov	arg01, local01
04ee0     B0 1A B2 FD | 	call	#__system___string_cmp
04ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ee8     DC 0B 90 AD |  if_e	jmp	#LR__0330
04eec     B3 01 00 FF 
04ef0     EE 14 06 F6 | 	mov	arg02, ##@LR__5559
04ef4     13 13 02 F6 | 	mov	arg01, local01
04ef8     98 1A B2 FD | 	call	#__system___string_cmp
04efc     00 FA 0D F2 | 	cmp	result1, #0 wz
04f00     CC 0B 90 AD |  if_e	jmp	#LR__0331
04f04     B3 01 00 FF 
04f08     F8 14 06 F6 | 	mov	arg02, ##@LR__5560
04f0c     13 13 02 F6 | 	mov	arg01, local01
04f10     80 1A B2 FD | 	call	#__system___string_cmp
04f14     00 FA 0D F2 | 	cmp	result1, #0 wz
04f18     BC 0B 90 AD |  if_e	jmp	#LR__0332
04f1c     B3 01 00 FF 
04f20     FC 14 06 F6 | 	mov	arg02, ##@LR__5561
04f24     13 13 02 F6 | 	mov	arg01, local01
04f28     68 1A B2 FD | 	call	#__system___string_cmp
04f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f30     AC 0B 90 AD |  if_e	jmp	#LR__0333
04f34     B3 01 00 FF 
04f38     07 15 06 F6 | 	mov	arg02, ##@LR__5562
04f3c     13 13 02 F6 | 	mov	arg01, local01
04f40     50 1A B2 FD | 	call	#__system___string_cmp
04f44     00 FA 0D F2 | 	cmp	result1, #0 wz
04f48     9C 0B 90 AD |  if_e	jmp	#LR__0334
04f4c     B3 01 00 FF 
04f50     0B 15 06 F6 | 	mov	arg02, ##@LR__5563
04f54     13 13 02 F6 | 	mov	arg01, local01
04f58     38 1A B2 FD | 	call	#__system___string_cmp
04f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f60     8C 0B 90 AD |  if_e	jmp	#LR__0335
04f64     B3 01 00 FF 
04f68     12 15 06 F6 | 	mov	arg02, ##@LR__5564
04f6c     13 13 02 F6 | 	mov	arg01, local01
04f70     20 1A B2 FD | 	call	#__system___string_cmp
04f74     00 FA 0D F2 | 	cmp	result1, #0 wz
04f78     7C 0B 90 AD |  if_e	jmp	#LR__0336
04f7c     B3 01 00 FF 
04f80     16 15 06 F6 | 	mov	arg02, ##@LR__5565
04f84     13 13 02 F6 | 	mov	arg01, local01
04f88     08 1A B2 FD | 	call	#__system___string_cmp
04f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f90     6C 0B 90 AD |  if_e	jmp	#LR__0337
04f94     B3 01 00 FF 
04f98     1C 15 06 F6 | 	mov	arg02, ##@LR__5566
04f9c     13 13 02 F6 | 	mov	arg01, local01
04fa0     F0 19 B2 FD | 	call	#__system___string_cmp
04fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fa8     5C 0B 90 AD |  if_e	jmp	#LR__0338
04fac     B3 01 00 FF 
04fb0     22 15 06 F6 | 	mov	arg02, ##@LR__5567
04fb4     13 13 02 F6 | 	mov	arg01, local01
04fb8     D8 19 B2 FD | 	call	#__system___string_cmp
04fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc0     4C 0B 90 AD |  if_e	jmp	#LR__0339
04fc4     B3 01 00 FF 
04fc8     26 15 06 F6 | 	mov	arg02, ##@LR__5568
04fcc     13 13 02 F6 | 	mov	arg01, local01
04fd0     C0 19 B2 FD | 	call	#__system___string_cmp
04fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fd8     3C 0B 90 AD |  if_e	jmp	#LR__0340
04fdc     B3 01 00 FF 
04fe0     2E 15 06 F6 | 	mov	arg02, ##@LR__5569
04fe4     13 13 02 F6 | 	mov	arg01, local01
04fe8     A8 19 B2 FD | 	call	#__system___string_cmp
04fec     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff0     2C 0B 90 AD |  if_e	jmp	#LR__0341
04ff4     B3 01 00 FF 
04ff8     34 15 06 F6 | 	mov	arg02, ##@LR__5570
04ffc     13 13 02 F6 | 	mov	arg01, local01
05000     90 19 B2 FD | 	call	#__system___string_cmp
05004     00 FA 0D F2 | 	cmp	result1, #0 wz
05008     1C 0B 90 AD |  if_e	jmp	#LR__0342
0500c     B3 01 00 FF 
05010     37 15 06 F6 | 	mov	arg02, ##@LR__5571
05014     13 13 02 F6 | 	mov	arg01, local01
05018     78 19 B2 FD | 	call	#__system___string_cmp
0501c     00 FA 0D F2 | 	cmp	result1, #0 wz
05020     0C 0B 90 AD |  if_e	jmp	#LR__0343
05024     B3 01 00 FF 
05028     3C 15 06 F6 | 	mov	arg02, ##@LR__5572
0502c     13 13 02 F6 | 	mov	arg01, local01
05030     60 19 B2 FD | 	call	#__system___string_cmp
05034     00 FA 0D F2 | 	cmp	result1, #0 wz
05038     FC 0A 90 AD |  if_e	jmp	#LR__0344
0503c     B3 01 00 FF 
05040     43 15 06 F6 | 	mov	arg02, ##@LR__5573
05044     13 13 02 F6 | 	mov	arg01, local01
05048     48 19 B2 FD | 	call	#__system___string_cmp
0504c     00 FA 0D F2 | 	cmp	result1, #0 wz
05050     EC 0A 90 AD |  if_e	jmp	#LR__0345
05054     B3 01 00 FF 
05058     48 15 06 F6 | 	mov	arg02, ##@LR__5574
0505c     13 13 02 F6 | 	mov	arg01, local01
05060     30 19 B2 FD | 	call	#__system___string_cmp
05064     00 FA 0D F2 | 	cmp	result1, #0 wz
05068     DC 0A 90 AD |  if_e	jmp	#LR__0346
0506c     B3 01 00 FF 
05070     4F 15 06 F6 | 	mov	arg02, ##@LR__5575
05074     13 13 02 F6 | 	mov	arg01, local01
05078     18 19 B2 FD | 	call	#__system___string_cmp
0507c     00 FA 0D F2 | 	cmp	result1, #0 wz
05080     CC 0A 90 AD |  if_e	jmp	#LR__0347
05084     B3 01 00 FF 
05088     56 15 06 F6 | 	mov	arg02, ##@LR__5576
0508c     13 13 02 F6 | 	mov	arg01, local01
05090     00 19 B2 FD | 	call	#__system___string_cmp
05094     00 FA 0D F2 | 	cmp	result1, #0 wz
05098     BC 0A 90 AD |  if_e	jmp	#LR__0348
0509c     B3 01 00 FF 
050a0     60 15 06 F6 | 	mov	arg02, ##@LR__5577
050a4     13 13 02 F6 | 	mov	arg01, local01
050a8     E8 18 B2 FD | 	call	#__system___string_cmp
050ac     00 FA 0D F2 | 	cmp	result1, #0 wz
050b0     AC 0A 90 AD |  if_e	jmp	#LR__0349
050b4     B3 01 00 FF 
050b8     64 15 06 F6 | 	mov	arg02, ##@LR__5578
050bc     13 13 02 F6 | 	mov	arg01, local01
050c0     D0 18 B2 FD | 	call	#__system___string_cmp
050c4     00 FA 0D F2 | 	cmp	result1, #0 wz
050c8     9C 0A 90 AD |  if_e	jmp	#LR__0350
050cc     B3 01 00 FF 
050d0     68 15 06 F6 | 	mov	arg02, ##@LR__5579
050d4     13 13 02 F6 | 	mov	arg01, local01
050d8     B8 18 B2 FD | 	call	#__system___string_cmp
050dc     00 FA 0D F2 | 	cmp	result1, #0 wz
050e0     8C 0A 90 AD |  if_e	jmp	#LR__0351
050e4     B3 01 00 FF 
050e8     6F 15 06 F6 | 	mov	arg02, ##@LR__5580
050ec     13 13 02 F6 | 	mov	arg01, local01
050f0     A0 18 B2 FD | 	call	#__system___string_cmp
050f4     00 FA 0D F2 | 	cmp	result1, #0 wz
050f8     7C 0A 90 AD |  if_e	jmp	#LR__0352
050fc     B3 01 00 FF 
05100     73 15 06 F6 | 	mov	arg02, ##@LR__5581
05104     13 13 02 F6 | 	mov	arg01, local01
05108     88 18 B2 FD | 	call	#__system___string_cmp
0510c     00 FA 0D F2 | 	cmp	result1, #0 wz
05110     6C 0A 90 AD |  if_e	jmp	#LR__0353
05114     B3 01 00 FF 
05118     77 15 06 F6 | 	mov	arg02, ##@LR__5582
0511c     13 13 02 F6 | 	mov	arg01, local01
05120     70 18 B2 FD | 	call	#__system___string_cmp
05124     00 FA 0D F2 | 	cmp	result1, #0 wz
05128     5C 0A 90 AD |  if_e	jmp	#LR__0354
0512c     B3 01 00 FF 
05130     7D 15 06 F6 | 	mov	arg02, ##@LR__5583
05134     13 13 02 F6 | 	mov	arg01, local01
05138     58 18 B2 FD | 	call	#__system___string_cmp
0513c     00 FA 0D F2 | 	cmp	result1, #0 wz
05140     4C 0A 90 AD |  if_e	jmp	#LR__0355
05144     B3 01 00 FF 
05148     82 15 06 F6 | 	mov	arg02, ##@LR__5584
0514c     13 13 02 F6 | 	mov	arg01, local01
05150     40 18 B2 FD | 	call	#__system___string_cmp
05154     00 FA 0D F2 | 	cmp	result1, #0 wz
05158     3C 0A 90 AD |  if_e	jmp	#LR__0356
0515c     B3 01 00 FF 
05160     89 15 06 F6 | 	mov	arg02, ##@LR__5585
05164     13 13 02 F6 | 	mov	arg01, local01
05168     28 18 B2 FD | 	call	#__system___string_cmp
0516c     00 FA 0D F2 | 	cmp	result1, #0 wz
05170     2C 0A 90 AD |  if_e	jmp	#LR__0357
05174     B3 01 00 FF 
05178     8D 15 06 F6 | 	mov	arg02, ##@LR__5586
0517c     13 13 02 F6 | 	mov	arg01, local01
05180     10 18 B2 FD | 	call	#__system___string_cmp
05184     00 FA 0D F2 | 	cmp	result1, #0 wz
05188     1C 0A 90 AD |  if_e	jmp	#LR__0358
0518c     B3 01 00 FF 
05190     92 15 06 F6 | 	mov	arg02, ##@LR__5587
05194     13 13 02 F6 | 	mov	arg01, local01
05198     F8 17 B2 FD | 	call	#__system___string_cmp
0519c     00 FA 0D F2 | 	cmp	result1, #0 wz
051a0     0C 0A 90 AD |  if_e	jmp	#LR__0359
051a4     B3 01 00 FF 
051a8     96 15 06 F6 | 	mov	arg02, ##@LR__5588
051ac     13 13 02 F6 | 	mov	arg01, local01
051b0     E0 17 B2 FD | 	call	#__system___string_cmp
051b4     00 FA 0D F2 | 	cmp	result1, #0 wz
051b8     FC 09 90 AD |  if_e	jmp	#LR__0360
051bc     B3 01 00 FF 
051c0     9C 15 06 F6 | 	mov	arg02, ##@LR__5589
051c4     13 13 02 F6 | 	mov	arg01, local01
051c8     C8 17 B2 FD | 	call	#__system___string_cmp
051cc     00 FA 0D F2 | 	cmp	result1, #0 wz
051d0     EC 09 90 AD |  if_e	jmp	#LR__0361
051d4     B3 01 00 FF 
051d8     9F 15 06 F6 | 	mov	arg02, ##@LR__5590
051dc     13 13 02 F6 | 	mov	arg01, local01
051e0     B0 17 B2 FD | 	call	#__system___string_cmp
051e4     00 FA 0D F2 | 	cmp	result1, #0 wz
051e8     DC 09 90 AD |  if_e	jmp	#LR__0362
051ec     B3 01 00 FF 
051f0     A7 15 06 F6 | 	mov	arg02, ##@LR__5591
051f4     13 13 02 F6 | 	mov	arg01, local01
051f8     98 17 B2 FD | 	call	#__system___string_cmp
051fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05200     CC 09 90 AD |  if_e	jmp	#LR__0363
05204     B3 01 00 FF 
05208     AB 15 06 F6 | 	mov	arg02, ##@LR__5592
0520c     13 13 02 F6 | 	mov	arg01, local01
05210     80 17 B2 FD | 	call	#__system___string_cmp
05214     00 FA 0D F2 | 	cmp	result1, #0 wz
05218     BC 09 90 AD |  if_e	jmp	#LR__0364
0521c     B3 01 00 FF 
05220     B0 15 06 F6 | 	mov	arg02, ##@LR__5593
05224     13 13 02 F6 | 	mov	arg01, local01
05228     68 17 B2 FD | 	call	#__system___string_cmp
0522c     00 FA 0D F2 | 	cmp	result1, #0 wz
05230     AC 09 90 AD |  if_e	jmp	#LR__0365
05234     B3 01 00 FF 
05238     B4 15 06 F6 | 	mov	arg02, ##@LR__5594
0523c     13 13 02 F6 | 	mov	arg01, local01
05240     50 17 B2 FD | 	call	#__system___string_cmp
05244     00 FA 0D F2 | 	cmp	result1, #0 wz
05248     9C 09 90 AD |  if_e	jmp	#LR__0366
0524c     B3 01 00 FF 
05250     B9 15 06 F6 | 	mov	arg02, ##@LR__5595
05254     13 13 02 F6 | 	mov	arg01, local01
05258     38 17 B2 FD | 	call	#__system___string_cmp
0525c     00 FA 0D F2 | 	cmp	result1, #0 wz
05260     8C 09 90 AD |  if_e	jmp	#LR__0367
05264     B3 01 00 FF 
05268     BD 15 06 F6 | 	mov	arg02, ##@LR__5596
0526c     13 13 02 F6 | 	mov	arg01, local01
05270     20 17 B2 FD | 	call	#__system___string_cmp
05274     00 FA 0D F2 | 	cmp	result1, #0 wz
05278     7C 09 90 AD |  if_e	jmp	#LR__0368
0527c     B3 01 00 FF 
05280     C0 15 06 F6 | 	mov	arg02, ##@LR__5597
05284     13 13 02 F6 | 	mov	arg01, local01
05288     08 17 B2 FD | 	call	#__system___string_cmp
0528c     00 FA 0D F2 | 	cmp	result1, #0 wz
05290     6C 09 90 AD |  if_e	jmp	#LR__0369
05294     B3 01 00 FF 
05298     C6 15 06 F6 | 	mov	arg02, ##@LR__5598
0529c     13 13 02 F6 | 	mov	arg01, local01
052a0     F0 16 B2 FD | 	call	#__system___string_cmp
052a4     00 FA 0D F2 | 	cmp	result1, #0 wz
052a8     5C 09 90 AD |  if_e	jmp	#LR__0370
052ac     B3 01 00 FF 
052b0     CA 15 06 F6 | 	mov	arg02, ##@LR__5599
052b4     13 13 02 F6 | 	mov	arg01, local01
052b8     D8 16 B2 FD | 	call	#__system___string_cmp
052bc     00 FA 0D F2 | 	cmp	result1, #0 wz
052c0     4C 09 90 AD |  if_e	jmp	#LR__0371
052c4     B3 01 00 FF 
052c8     CE 15 06 F6 | 	mov	arg02, ##@LR__5600
052cc     13 13 02 F6 | 	mov	arg01, local01
052d0     C0 16 B2 FD | 	call	#__system___string_cmp
052d4     00 FA 0D F2 | 	cmp	result1, #0 wz
052d8     3C 09 90 AD |  if_e	jmp	#LR__0372
052dc     B3 01 00 FF 
052e0     D4 15 06 F6 | 	mov	arg02, ##@LR__5601
052e4     13 13 02 F6 | 	mov	arg01, local01
052e8     A8 16 B2 FD | 	call	#__system___string_cmp
052ec     00 FA 0D F2 | 	cmp	result1, #0 wz
052f0     2C 09 90 AD |  if_e	jmp	#LR__0373
052f4     B3 01 00 FF 
052f8     D9 15 06 F6 | 	mov	arg02, ##@LR__5602
052fc     13 13 02 F6 | 	mov	arg01, local01
05300     90 16 B2 FD | 	call	#__system___string_cmp
05304     00 FA 0D F2 | 	cmp	result1, #0 wz
05308     1C 09 90 AD |  if_e	jmp	#LR__0374
0530c     B3 01 00 FF 
05310     DC 15 06 F6 | 	mov	arg02, ##@LR__5603
05314     13 13 02 F6 | 	mov	arg01, local01
05318     78 16 B2 FD | 	call	#__system___string_cmp
0531c     00 FA 0D F2 | 	cmp	result1, #0 wz
05320     0C 09 90 AD |  if_e	jmp	#LR__0375
05324     B3 01 00 FF 
05328     DF 15 06 F6 | 	mov	arg02, ##@LR__5604
0532c     13 13 02 F6 | 	mov	arg01, local01
05330     60 16 B2 FD | 	call	#__system___string_cmp
05334     00 FA 0D F2 | 	cmp	result1, #0 wz
05338     FC 08 90 AD |  if_e	jmp	#LR__0376
0533c     B3 01 00 FF 
05340     E3 15 06 F6 | 	mov	arg02, ##@LR__5605
05344     13 13 02 F6 | 	mov	arg01, local01
05348     48 16 B2 FD | 	call	#__system___string_cmp
0534c     00 FA 0D F2 | 	cmp	result1, #0 wz
05350     EC 08 90 AD |  if_e	jmp	#LR__0377
05354     B3 01 00 FF 
05358     E6 15 06 F6 | 	mov	arg02, ##@LR__5606
0535c     13 13 02 F6 | 	mov	arg01, local01
05360     30 16 B2 FD | 	call	#__system___string_cmp
05364     00 FA 0D F2 | 	cmp	result1, #0 wz
05368     DC 08 90 AD |  if_e	jmp	#LR__0378
0536c     B3 01 00 FF 
05370     EC 15 06 F6 | 	mov	arg02, ##@LR__5607
05374     13 13 02 F6 | 	mov	arg01, local01
05378     18 16 B2 FD | 	call	#__system___string_cmp
0537c     00 FA 0D F2 | 	cmp	result1, #0 wz
05380     CC 08 90 AD |  if_e	jmp	#LR__0379
05384     B3 01 00 FF 
05388     F1 15 06 F6 | 	mov	arg02, ##@LR__5608
0538c     13 13 02 F6 | 	mov	arg01, local01
05390     00 16 B2 FD | 	call	#__system___string_cmp
05394     00 FA 0D F2 | 	cmp	result1, #0 wz
05398     BC 08 90 AD |  if_e	jmp	#LR__0380
0539c     B3 01 00 FF 
053a0     F4 15 06 F6 | 	mov	arg02, ##@LR__5609
053a4     13 13 02 F6 | 	mov	arg01, local01
053a8     E8 15 B2 FD | 	call	#__system___string_cmp
053ac     00 FA 0D F2 | 	cmp	result1, #0 wz
053b0     AC 08 90 AD |  if_e	jmp	#LR__0381
053b4     B3 01 00 FF 
053b8     F9 15 06 F6 | 	mov	arg02, ##@LR__5610
053bc     13 13 02 F6 | 	mov	arg01, local01
053c0     D0 15 B2 FD | 	call	#__system___string_cmp
053c4     00 FA 0D F2 | 	cmp	result1, #0 wz
053c8     9C 08 90 AD |  if_e	jmp	#LR__0382
053cc     B3 01 00 FF 
053d0     FD 15 06 F6 | 	mov	arg02, ##@LR__5611
053d4     13 13 02 F6 | 	mov	arg01, local01
053d8     B8 15 B2 FD | 	call	#__system___string_cmp
053dc     00 FA 0D F2 | 	cmp	result1, #0 wz
053e0     8C 08 90 AD |  if_e	jmp	#LR__0383
053e4     B4 01 00 FF 
053e8     03 14 06 F6 | 	mov	arg02, ##@LR__5612
053ec     13 13 02 F6 | 	mov	arg01, local01
053f0     A0 15 B2 FD | 	call	#__system___string_cmp
053f4     00 FA 0D F2 | 	cmp	result1, #0 wz
053f8     7C 08 90 AD |  if_e	jmp	#LR__0384
053fc     B4 01 00 FF 
05400     09 14 06 F6 | 	mov	arg02, ##@LR__5613
05404     13 13 02 F6 | 	mov	arg01, local01
05408     88 15 B2 FD | 	call	#__system___string_cmp
0540c     00 FA 0D F2 | 	cmp	result1, #0 wz
05410     6C 08 90 AD |  if_e	jmp	#LR__0385
05414     B4 01 00 FF 
05418     0E 14 06 F6 | 	mov	arg02, ##@LR__5614
0541c     13 13 02 F6 | 	mov	arg01, local01
05420     70 15 B2 FD | 	call	#__system___string_cmp
05424     00 FA 0D F2 | 	cmp	result1, #0 wz
05428     5C 08 90 AD |  if_e	jmp	#LR__0386
0542c     B4 01 00 FF 
05430     11 14 06 F6 | 	mov	arg02, ##@LR__5615
05434     13 13 02 F6 | 	mov	arg01, local01
05438     58 15 B2 FD | 	call	#__system___string_cmp
0543c     00 FA 0D F2 | 	cmp	result1, #0 wz
05440     4C 08 90 AD |  if_e	jmp	#LR__0387
05444     B4 01 00 FF 
05448     17 14 06 F6 | 	mov	arg02, ##@LR__5616
0544c     13 13 02 F6 | 	mov	arg01, local01
05450     40 15 B2 FD | 	call	#__system___string_cmp
05454     00 FA 0D F2 | 	cmp	result1, #0 wz
05458     3C 08 90 AD |  if_e	jmp	#LR__0388
0545c     B4 01 00 FF 
05460     1B 14 06 F6 | 	mov	arg02, ##@LR__5617
05464     13 13 02 F6 | 	mov	arg01, local01
05468     28 15 B2 FD | 	call	#__system___string_cmp
0546c     00 FA 0D F2 | 	cmp	result1, #0 wz
05470     2C 08 90 AD |  if_e	jmp	#LR__0389
05474     B4 01 00 FF 
05478     20 14 06 F6 | 	mov	arg02, ##@LR__5618
0547c     13 13 02 F6 | 	mov	arg01, local01
05480     10 15 B2 FD | 	call	#__system___string_cmp
05484     00 FA 0D F2 | 	cmp	result1, #0 wz
05488     1C 08 90 AD |  if_e	jmp	#LR__0390
0548c     B4 01 00 FF 
05490     23 14 06 F6 | 	mov	arg02, ##@LR__5619
05494     13 13 02 F6 | 	mov	arg01, local01
05498     F8 14 B2 FD | 	call	#__system___string_cmp
0549c     00 FA 0D F2 | 	cmp	result1, #0 wz
054a0     0C 08 90 AD |  if_e	jmp	#LR__0391
054a4     B4 01 00 FF 
054a8     26 14 06 F6 | 	mov	arg02, ##@LR__5620
054ac     13 13 02 F6 | 	mov	arg01, local01
054b0     E0 14 B2 FD | 	call	#__system___string_cmp
054b4     00 FA 0D F2 | 	cmp	result1, #0 wz
054b8     FC 07 90 AD |  if_e	jmp	#LR__0392
054bc     B4 01 00 FF 
054c0     2B 14 06 F6 | 	mov	arg02, ##@LR__5621
054c4     13 13 02 F6 | 	mov	arg01, local01
054c8     C8 14 B2 FD | 	call	#__system___string_cmp
054cc     00 FA 0D F2 | 	cmp	result1, #0 wz
054d0     EC 07 90 AD |  if_e	jmp	#LR__0393
054d4     B4 01 00 FF 
054d8     31 14 06 F6 | 	mov	arg02, ##@LR__5622
054dc     13 13 02 F6 | 	mov	arg01, local01
054e0     B0 14 B2 FD | 	call	#__system___string_cmp
054e4     00 FA 0D F2 | 	cmp	result1, #0 wz
054e8     DC 07 90 AD |  if_e	jmp	#LR__0394
054ec     B4 01 00 FF 
054f0     35 14 06 F6 | 	mov	arg02, ##@LR__5623
054f4     13 13 02 F6 | 	mov	arg01, local01
054f8     98 14 B2 FD | 	call	#__system___string_cmp
054fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05500     CC 07 90 AD |  if_e	jmp	#LR__0395
05504     B4 01 00 FF 
05508     3E 14 06 F6 | 	mov	arg02, ##@LR__5624
0550c     13 13 02 F6 | 	mov	arg01, local01
05510     80 14 B2 FD | 	call	#__system___string_cmp
05514     00 FA 0D F2 | 	cmp	result1, #0 wz
05518     BC 07 90 AD |  if_e	jmp	#LR__0396
0551c     B4 01 00 FF 
05520     44 14 06 F6 | 	mov	arg02, ##@LR__5625
05524     13 13 02 F6 | 	mov	arg01, local01
05528     68 14 B2 FD | 	call	#__system___string_cmp
0552c     00 FA 0D F2 | 	cmp	result1, #0 wz
05530     AC 07 90 AD |  if_e	jmp	#LR__0397
05534     B4 01 00 FF 
05538     4A 14 06 F6 | 	mov	arg02, ##@LR__5626
0553c     13 13 02 F6 | 	mov	arg01, local01
05540     50 14 B2 FD | 	call	#__system___string_cmp
05544     00 FA 0D F2 | 	cmp	result1, #0 wz
05548     9C 07 90 AD |  if_e	jmp	#LR__0398
0554c     B4 01 00 FF 
05550     53 14 06 F6 | 	mov	arg02, ##@LR__5627
05554     13 13 02 F6 | 	mov	arg01, local01
05558     38 14 B2 FD | 	call	#__system___string_cmp
0555c     00 FA 0D F2 | 	cmp	result1, #0 wz
05560     8C 07 90 AD |  if_e	jmp	#LR__0399
05564     B4 01 00 FF 
05568     5D 14 06 F6 | 	mov	arg02, ##@LR__5628
0556c     13 13 02 F6 | 	mov	arg01, local01
05570     20 14 B2 FD | 	call	#__system___string_cmp
05574     00 FA 0D F2 | 	cmp	result1, #0 wz
05578     7C 07 90 AD |  if_e	jmp	#LR__0400
0557c     B4 01 00 FF 
05580     66 14 06 F6 | 	mov	arg02, ##@LR__5629
05584     13 13 02 F6 | 	mov	arg01, local01
05588     08 14 B2 FD | 	call	#__system___string_cmp
0558c     00 FA 0D F2 | 	cmp	result1, #0 wz
05590     6C 07 90 AD |  if_e	jmp	#LR__0401
05594     B4 01 00 FF 
05598     6B 14 06 F6 | 	mov	arg02, ##@LR__5630
0559c     13 13 02 F6 | 	mov	arg01, local01
055a0     F0 13 B2 FD | 	call	#__system___string_cmp
055a4     00 FA 0D F2 | 	cmp	result1, #0 wz
055a8     5C 07 90 AD |  if_e	jmp	#LR__0402
055ac     B4 01 00 FF 
055b0     6E 14 06 F6 | 	mov	arg02, ##@LR__5631
055b4     13 13 02 F6 | 	mov	arg01, local01
055b8     D8 13 B2 FD | 	call	#__system___string_cmp
055bc     00 FA 0D F2 | 	cmp	result1, #0 wz
055c0     4C 07 90 AD |  if_e	jmp	#LR__0403
055c4     B4 01 00 FF 
055c8     73 14 06 F6 | 	mov	arg02, ##@LR__5632
055cc     13 13 02 F6 | 	mov	arg01, local01
055d0     C0 13 B2 FD | 	call	#__system___string_cmp
055d4     00 FA 0D F2 | 	cmp	result1, #0 wz
055d8     3C 07 90 AD |  if_e	jmp	#LR__0404
055dc     B4 01 00 FF 
055e0     77 14 06 F6 | 	mov	arg02, ##@LR__5633
055e4     13 13 02 F6 | 	mov	arg01, local01
055e8     A8 13 B2 FD | 	call	#__system___string_cmp
055ec     00 FA 0D F2 | 	cmp	result1, #0 wz
055f0     2C 07 90 AD |  if_e	jmp	#LR__0405
055f4     B4 01 00 FF 
055f8     7C 14 06 F6 | 	mov	arg02, ##@LR__5634
055fc     13 13 02 F6 | 	mov	arg01, local01
05600     90 13 B2 FD | 	call	#__system___string_cmp
05604     00 FA 0D F2 | 	cmp	result1, #0 wz
05608     1C 07 90 AD |  if_e	jmp	#LR__0406
0560c     B4 01 00 FF 
05610     80 14 06 F6 | 	mov	arg02, ##@LR__5635
05614     13 13 02 F6 | 	mov	arg01, local01
05618     78 13 B2 FD | 	call	#__system___string_cmp
0561c     00 FA 0D F2 | 	cmp	result1, #0 wz
05620     0C 07 90 AD |  if_e	jmp	#LR__0407
05624     B4 01 00 FF 
05628     89 14 06 F6 | 	mov	arg02, ##@LR__5636
0562c     13 13 02 F6 | 	mov	arg01, local01
05630     60 13 B2 FD | 	call	#__system___string_cmp
05634     00 FA 0D F2 | 	cmp	result1, #0 wz
05638     FC 06 90 AD |  if_e	jmp	#LR__0408
0563c     B4 01 00 FF 
05640     8E 14 06 F6 | 	mov	arg02, ##@LR__5637
05644     13 13 02 F6 | 	mov	arg01, local01
05648     48 13 B2 FD | 	call	#__system___string_cmp
0564c     00 FA 0D F2 | 	cmp	result1, #0 wz
05650     EC 06 90 AD |  if_e	jmp	#LR__0409
05654     B4 01 00 FF 
05658     94 14 06 F6 | 	mov	arg02, ##@LR__5638
0565c     13 13 02 F6 | 	mov	arg01, local01
05660     30 13 B2 FD | 	call	#__system___string_cmp
05664     00 FA 0D F2 | 	cmp	result1, #0 wz
05668     DC 06 90 AD |  if_e	jmp	#LR__0410
0566c     B4 01 00 FF 
05670     96 14 06 F6 | 	mov	arg02, ##@LR__5639
05674     13 13 02 F6 | 	mov	arg01, local01
05678     18 13 B2 FD | 	call	#__system___string_cmp
0567c     00 FA 0D F2 | 	cmp	result1, #0 wz
05680     CC 06 90 AD |  if_e	jmp	#LR__0411
05684     B4 01 00 FF 
05688     9A 14 06 F6 | 	mov	arg02, ##@LR__5640
0568c     13 13 02 F6 | 	mov	arg01, local01
05690     00 13 B2 FD | 	call	#__system___string_cmp
05694     00 FA 0D F2 | 	cmp	result1, #0 wz
05698     BC 06 90 AD |  if_e	jmp	#LR__0412
0569c     B4 01 00 FF 
056a0     9E 14 06 F6 | 	mov	arg02, ##@LR__5641
056a4     13 13 02 F6 | 	mov	arg01, local01
056a8     E8 12 B2 FD | 	call	#__system___string_cmp
056ac     00 FA 0D F2 | 	cmp	result1, #0 wz
056b0     AC 06 90 AD |  if_e	jmp	#LR__0413
056b4     B4 01 00 FF 
056b8     A3 14 06 F6 | 	mov	arg02, ##@LR__5642
056bc     13 13 02 F6 | 	mov	arg01, local01
056c0     D0 12 B2 FD | 	call	#__system___string_cmp
056c4     00 FA 0D F2 | 	cmp	result1, #0 wz
056c8     9C 06 90 AD |  if_e	jmp	#LR__0414
056cc     B4 01 00 FF 
056d0     AB 14 06 F6 | 	mov	arg02, ##@LR__5643
056d4     13 13 02 F6 | 	mov	arg01, local01
056d8     B8 12 B2 FD | 	call	#__system___string_cmp
056dc     00 FA 0D F2 | 	cmp	result1, #0 wz
056e0     8C 06 90 AD |  if_e	jmp	#LR__0415
056e4     B4 01 00 FF 
056e8     AF 14 06 F6 | 	mov	arg02, ##@LR__5644
056ec     13 13 02 F6 | 	mov	arg01, local01
056f0     A0 12 B2 FD | 	call	#__system___string_cmp
056f4     00 FA 0D F2 | 	cmp	result1, #0 wz
056f8     7C 06 90 AD |  if_e	jmp	#LR__0416
056fc     B4 01 00 FF 
05700     B1 14 06 F6 | 	mov	arg02, ##@LR__5645
05704     13 13 02 F6 | 	mov	arg01, local01
05708     88 12 B2 FD | 	call	#__system___string_cmp
0570c     00 FA 0D F2 | 	cmp	result1, #0 wz
05710     6C 06 90 AD |  if_e	jmp	#LR__0417
05714     B4 01 00 FF 
05718     B9 14 06 F6 | 	mov	arg02, ##@LR__5646
0571c     13 13 02 F6 | 	mov	arg01, local01
05720     70 12 B2 FD | 	call	#__system___string_cmp
05724     00 FA 0D F2 | 	cmp	result1, #0 wz
05728     5C 06 90 AD |  if_e	jmp	#LR__0418
0572c     B4 01 00 FF 
05730     C0 14 06 F6 | 	mov	arg02, ##@LR__5647
05734     13 13 02 F6 | 	mov	arg01, local01
05738     58 12 B2 FD | 	call	#__system___string_cmp
0573c     00 FA 0D F2 | 	cmp	result1, #0 wz
05740     4C 06 90 AD |  if_e	jmp	#LR__0419
05744     B4 01 00 FF 
05748     C4 14 06 F6 | 	mov	arg02, ##@LR__5648
0574c     13 13 02 F6 | 	mov	arg01, local01
05750     40 12 B2 FD | 	call	#__system___string_cmp
05754     00 FA 0D F2 | 	cmp	result1, #0 wz
05758     3C 06 90 AD |  if_e	jmp	#LR__0420
0575c     B4 01 00 FF 
05760     C9 14 06 F6 | 	mov	arg02, ##@LR__5649
05764     13 13 02 F6 | 	mov	arg01, local01
05768     28 12 B2 FD | 	call	#__system___string_cmp
0576c     00 FA 0D F2 | 	cmp	result1, #0 wz
05770     2C 06 90 AD |  if_e	jmp	#LR__0421
05774     B4 01 00 FF 
05778     D2 14 06 F6 | 	mov	arg02, ##@LR__5650
0577c     13 13 02 F6 | 	mov	arg01, local01
05780     10 12 B2 FD | 	call	#__system___string_cmp
05784     00 FA 0D F2 | 	cmp	result1, #0 wz
05788     1C 06 90 AD |  if_e	jmp	#LR__0422
0578c     B4 01 00 FF 
05790     D5 14 06 F6 | 	mov	arg02, ##@LR__5651
05794     13 13 02 F6 | 	mov	arg01, local01
05798     F8 11 B2 FD | 	call	#__system___string_cmp
0579c     00 FA 0D F2 | 	cmp	result1, #0 wz
057a0     0C 06 90 AD |  if_e	jmp	#LR__0423
057a4     B4 01 00 FF 
057a8     DE 14 06 F6 | 	mov	arg02, ##@LR__5652
057ac     13 13 02 F6 | 	mov	arg01, local01
057b0     E0 11 B2 FD | 	call	#__system___string_cmp
057b4     00 FA 0D F2 | 	cmp	result1, #0 wz
057b8     FC 05 90 AD |  if_e	jmp	#LR__0424
057bc     B4 01 00 FF 
057c0     E2 14 06 F6 | 	mov	arg02, ##@LR__5653
057c4     13 13 02 F6 | 	mov	arg01, local01
057c8     C8 11 B2 FD | 	call	#__system___string_cmp
057cc     00 FA 0D F2 | 	cmp	result1, #0 wz
057d0     EC 05 90 AD |  if_e	jmp	#LR__0425
057d4     B4 01 00 FF 
057d8     E9 14 06 F6 | 	mov	arg02, ##@LR__5654
057dc     13 13 02 F6 | 	mov	arg01, local01
057e0     B0 11 B2 FD | 	call	#__system___string_cmp
057e4     00 FA 0D F2 | 	cmp	result1, #0 wz
057e8     DC 05 90 AD |  if_e	jmp	#LR__0426
057ec     B4 01 00 FF 
057f0     ED 14 06 F6 | 	mov	arg02, ##@LR__5655
057f4     13 13 02 F6 | 	mov	arg01, local01
057f8     98 11 B2 FD | 	call	#__system___string_cmp
057fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05800     CC 05 90 AD |  if_e	jmp	#LR__0427
05804     B4 01 00 FF 
05808     F4 14 06 F6 | 	mov	arg02, ##@LR__5656
0580c     13 13 02 F6 | 	mov	arg01, local01
05810     80 11 B2 FD | 	call	#__system___string_cmp
05814     00 FA 0D F2 | 	cmp	result1, #0 wz
05818     BC 05 90 AD |  if_e	jmp	#LR__0428
0581c     B4 01 00 FF 
05820     F8 14 06 F6 | 	mov	arg02, ##@LR__5657
05824     13 13 02 F6 | 	mov	arg01, local01
05828     68 11 B2 FD | 	call	#__system___string_cmp
0582c     00 FA 0D F2 | 	cmp	result1, #0 wz
05830     AC 05 90 AD |  if_e	jmp	#LR__0429
05834     B4 01 00 FF 
05838     FF 14 06 F6 | 	mov	arg02, ##@LR__5658
0583c     13 13 02 F6 | 	mov	arg01, local01
05840     50 11 B2 FD | 	call	#__system___string_cmp
05844     00 FA 0D F2 | 	cmp	result1, #0 wz
05848     9C 05 90 AD |  if_e	jmp	#LR__0430
0584c     B4 01 00 FF 
05850     03 15 06 F6 | 	mov	arg02, ##@LR__5659
05854     13 13 02 F6 | 	mov	arg01, local01
05858     38 11 B2 FD | 	call	#__system___string_cmp
0585c     00 FA 0D F2 | 	cmp	result1, #0 wz
05860     8C 05 90 AD |  if_e	jmp	#LR__0431
05864     B4 01 00 FF 
05868     0E 15 06 F6 | 	mov	arg02, ##@LR__5660
0586c     13 13 02 F6 | 	mov	arg01, local01
05870     20 11 B2 FD | 	call	#__system___string_cmp
05874     00 FA 0D F2 | 	cmp	result1, #0 wz
05878     7C 05 90 AD |  if_e	jmp	#LR__0432
0587c     B4 01 00 FF 
05880     12 15 06 F6 | 	mov	arg02, ##@LR__5661
05884     13 13 02 F6 | 	mov	arg01, local01
05888     08 11 B2 FD | 	call	#__system___string_cmp
0588c     00 FA 0D F2 | 	cmp	result1, #0 wz
05890     6C 05 90 AD |  if_e	jmp	#LR__0433
05894     B4 01 00 FF 
05898     19 15 06 F6 | 	mov	arg02, ##@LR__5662
0589c     13 13 02 F6 | 	mov	arg01, local01
058a0     F0 10 B2 FD | 	call	#__system___string_cmp
058a4     00 FA 0D F2 | 	cmp	result1, #0 wz
058a8     5C 05 90 AD |  if_e	jmp	#LR__0434
058ac     B4 01 00 FF 
058b0     1D 15 06 F6 | 	mov	arg02, ##@LR__5663
058b4     13 13 02 F6 | 	mov	arg01, local01
058b8     D8 10 B2 FD | 	call	#__system___string_cmp
058bc     00 FA 0D F2 | 	cmp	result1, #0 wz
058c0     4C 05 90 AD |  if_e	jmp	#LR__0435
058c4     B4 01 00 FF 
058c8     25 15 06 F6 | 	mov	arg02, ##@LR__5664
058cc     13 13 02 F6 | 	mov	arg01, local01
058d0     C0 10 B2 FD | 	call	#__system___string_cmp
058d4     00 FA 0D F2 | 	cmp	result1, #0 wz
058d8     3C 05 90 AD |  if_e	jmp	#LR__0436
058dc     B4 01 00 FF 
058e0     29 15 06 F6 | 	mov	arg02, ##@LR__5665
058e4     13 13 02 F6 | 	mov	arg01, local01
058e8     A8 10 B2 FD | 	call	#__system___string_cmp
058ec     00 FA 0D F2 | 	cmp	result1, #0 wz
058f0     2C 05 90 AD |  if_e	jmp	#LR__0437
058f4     B4 01 00 FF 
058f8     30 15 06 F6 | 	mov	arg02, ##@LR__5666
058fc     13 13 02 F6 | 	mov	arg01, local01
05900     90 10 B2 FD | 	call	#__system___string_cmp
05904     00 FA 0D F2 | 	cmp	result1, #0 wz
05908     1C 05 90 AD |  if_e	jmp	#LR__0438
0590c     B4 01 00 FF 
05910     37 15 06 F6 | 	mov	arg02, ##@LR__5667
05914     13 13 02 F6 | 	mov	arg01, local01
05918     78 10 B2 FD | 	call	#__system___string_cmp
0591c     00 FA 0D F2 | 	cmp	result1, #0 wz
05920     0C 05 90 AD |  if_e	jmp	#LR__0439
05924     B4 01 00 FF 
05928     3B 15 06 F6 | 	mov	arg02, ##@LR__5668
0592c     13 13 02 F6 | 	mov	arg01, local01
05930     60 10 B2 FD | 	call	#__system___string_cmp
05934     00 FA 0D F2 | 	cmp	result1, #0 wz
05938     FC 04 90 AD |  if_e	jmp	#LR__0440
0593c     B4 01 00 FF 
05940     41 15 06 F6 | 	mov	arg02, ##@LR__5669
05944     13 13 02 F6 | 	mov	arg01, local01
05948     48 10 B2 FD | 	call	#__system___string_cmp
0594c     00 FA 0D F2 | 	cmp	result1, #0 wz
05950     EC 04 90 AD |  if_e	jmp	#LR__0441
05954     B4 01 00 FF 
05958     45 15 06 F6 | 	mov	arg02, ##@LR__5670
0595c     13 13 02 F6 | 	mov	arg01, local01
05960     30 10 B2 FD | 	call	#__system___string_cmp
05964     00 FA 0D F2 | 	cmp	result1, #0 wz
05968     DC 04 90 AD |  if_e	jmp	#LR__0442
0596c     B4 01 00 FF 
05970     4C 15 06 F6 | 	mov	arg02, ##@LR__5671
05974     13 13 02 F6 | 	mov	arg01, local01
05978     18 10 B2 FD | 	call	#__system___string_cmp
0597c     00 FA 0D F2 | 	cmp	result1, #0 wz
05980     CC 04 90 AD |  if_e	jmp	#LR__0443
05984     B4 01 00 FF 
05988     51 15 06 F6 | 	mov	arg02, ##@LR__5672
0598c     13 13 02 F6 | 	mov	arg01, local01
05990     00 10 B2 FD | 	call	#__system___string_cmp
05994     00 FA 0D F2 | 	cmp	result1, #0 wz
05998     BC 04 90 AD |  if_e	jmp	#LR__0444
0599c     B4 01 00 FF 
059a0     56 15 06 F6 | 	mov	arg02, ##@LR__5673
059a4     13 13 02 F6 | 	mov	arg01, local01
059a8     E8 0F B2 FD | 	call	#__system___string_cmp
059ac     00 FA 0D F2 | 	cmp	result1, #0 wz
059b0     AC 04 90 AD |  if_e	jmp	#LR__0445
059b4     B4 01 00 FF 
059b8     5D 15 06 F6 | 	mov	arg02, ##@LR__5674
059bc     13 13 02 F6 | 	mov	arg01, local01
059c0     D0 0F B2 FD | 	call	#__system___string_cmp
059c4     00 FA 0D F2 | 	cmp	result1, #0 wz
059c8     9C 04 90 AD |  if_e	jmp	#LR__0446
059cc     B4 01 00 FF 
059d0     60 15 06 F6 | 	mov	arg02, ##@LR__5675
059d4     13 13 02 F6 | 	mov	arg01, local01
059d8     B8 0F B2 FD | 	call	#__system___string_cmp
059dc     00 FA 0D F2 | 	cmp	result1, #0 wz
059e0     8C 04 90 AD |  if_e	jmp	#LR__0447
059e4     B4 01 00 FF 
059e8     6A 15 06 F6 | 	mov	arg02, ##@LR__5676
059ec     13 13 02 F6 | 	mov	arg01, local01
059f0     A0 0F B2 FD | 	call	#__system___string_cmp
059f4     00 FA 0D F2 | 	cmp	result1, #0 wz
059f8     7C 04 90 AD |  if_e	jmp	#LR__0448
059fc     B4 01 00 FF 
05a00     6E 15 06 F6 | 	mov	arg02, ##@LR__5677
05a04     13 13 02 F6 | 	mov	arg01, local01
05a08     88 0F B2 FD | 	call	#__system___string_cmp
05a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a10     6C 04 90 AD |  if_e	jmp	#LR__0449
05a14     B4 01 00 FF 
05a18     76 15 06 F6 | 	mov	arg02, ##@LR__5678
05a1c     13 13 02 F6 | 	mov	arg01, local01
05a20     70 0F B2 FD | 	call	#__system___string_cmp
05a24     00 FA 0D F2 | 	cmp	result1, #0 wz
05a28     5C 04 90 AD |  if_e	jmp	#LR__0450
05a2c     B4 01 00 FF 
05a30     7A 15 06 F6 | 	mov	arg02, ##@LR__5679
05a34     13 13 02 F6 | 	mov	arg01, local01
05a38     58 0F B2 FD | 	call	#__system___string_cmp
05a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a40     4C 04 90 AD |  if_e	jmp	#LR__0451
05a44     B4 01 00 FF 
05a48     80 15 06 F6 | 	mov	arg02, ##@LR__5680
05a4c     13 13 02 F6 | 	mov	arg01, local01
05a50     40 0F B2 FD | 	call	#__system___string_cmp
05a54     00 FA 0D F2 | 	cmp	result1, #0 wz
05a58     3C 04 90 AD |  if_e	jmp	#LR__0452
05a5c     B4 01 00 FF 
05a60     86 15 06 F6 | 	mov	arg02, ##@LR__5681
05a64     13 13 02 F6 | 	mov	arg01, local01
05a68     28 0F B2 FD | 	call	#__system___string_cmp
05a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a70     2C 04 90 AD |  if_e	jmp	#LR__0453
05a74     30 04 90 FD | 	jmp	#LR__0454
05a78                 | LR__0320
05a78     5C FA 05 F6 | 	mov	result1, #92
05a7c     2C 04 90 FD | 	jmp	#LR__0455
05a80                 | LR__0321
05a80     5C FA 05 F6 | 	mov	result1, #92
05a84     24 04 90 FD | 	jmp	#LR__0455
05a88                 | LR__0322
05a88     B9 FA 05 F6 | 	mov	result1, #185
05a8c     1C 04 90 FD | 	jmp	#LR__0455
05a90                 | LR__0323
05a90     47 FA 05 F6 | 	mov	result1, #71
05a94     14 04 90 FD | 	jmp	#LR__0455
05a98                 | LR__0324
05a98     59 FA 05 F6 | 	mov	result1, #89
05a9c     0C 04 90 FD | 	jmp	#LR__0455
05aa0                 | LR__0325
05aa0     59 FA 05 F6 | 	mov	result1, #89
05aa4     04 04 90 FD | 	jmp	#LR__0455
05aa8                 | LR__0326
05aa8     C3 FA 05 F6 | 	mov	result1, #195
05aac     FC 03 90 FD | 	jmp	#LR__0455
05ab0                 | LR__0327
05ab0     AE FA 05 F6 | 	mov	result1, #174
05ab4     F4 03 90 FD | 	jmp	#LR__0455
05ab8                 | LR__0328
05ab8     AE FA 05 F6 | 	mov	result1, #174
05abc     EC 03 90 FD | 	jmp	#LR__0455
05ac0                 | LR__0329
05ac0     B1 FA 05 F6 | 	mov	result1, #177
05ac4     E4 03 90 FD | 	jmp	#LR__0455
05ac8                 | LR__0330
05ac8     B1 FA 05 F6 | 	mov	result1, #177
05acc     DC 03 90 FD | 	jmp	#LR__0455
05ad0                 | LR__0331
05ad0     AF FA 05 F6 | 	mov	result1, #175
05ad4     D4 03 90 FD | 	jmp	#LR__0455
05ad8                 | LR__0332
05ad8     AF FA 05 F6 | 	mov	result1, #175
05adc     CC 03 90 FD | 	jmp	#LR__0455
05ae0                 | LR__0333
05ae0     B0 FA 05 F6 | 	mov	result1, #176
05ae4     C4 03 90 FD | 	jmp	#LR__0455
05ae8                 | LR__0334
05ae8     B0 FA 05 F6 | 	mov	result1, #176
05aec     BC 03 90 FD | 	jmp	#LR__0455
05af0                 | LR__0335
05af0     45 FA 05 F6 | 	mov	result1, #69
05af4     B4 03 90 FD | 	jmp	#LR__0455
05af8                 | LR__0336
05af8     45 FA 05 F6 | 	mov	result1, #69
05afc     AC 03 90 FD | 	jmp	#LR__0455
05b00                 | LR__0337
05b00     69 FA 05 F6 | 	mov	result1, #105
05b04     A4 03 90 FD | 	jmp	#LR__0455
05b08                 | LR__0338
05b08     B4 FA 05 F6 | 	mov	result1, #180
05b0c     9C 03 90 FD | 	jmp	#LR__0455
05b10                 | LR__0339
05b10     40 FA 05 F6 | 	mov	result1, #64
05b14     94 03 90 FD | 	jmp	#LR__0455
05b18                 | LR__0340
05b18     CF FA 05 F6 | 	mov	result1, #207
05b1c     8C 03 90 FD | 	jmp	#LR__0455
05b20                 | LR__0341
05b20     49 FA 05 F6 | 	mov	result1, #73
05b24     84 03 90 FD | 	jmp	#LR__0455
05b28                 | LR__0342
05b28     49 FA 05 F6 | 	mov	result1, #73
05b2c     7C 03 90 FD | 	jmp	#LR__0455
05b30                 | LR__0343
05b30     C4 FA 05 F6 | 	mov	result1, #196
05b34     74 03 90 FD | 	jmp	#LR__0455
05b38                 | LR__0344
05b38     68 FA 05 F6 | 	mov	result1, #104
05b3c     6C 03 90 FD | 	jmp	#LR__0455
05b40                 | LR__0345
05b40     B7 FA 05 F6 | 	mov	result1, #183
05b44     64 03 90 FD | 	jmp	#LR__0455
05b48                 | LR__0346
05b48     73 FA 05 F6 | 	mov	result1, #115
05b4c     5C 03 90 FD | 	jmp	#LR__0455
05b50                 | LR__0347
05b50     74 FA 05 F6 | 	mov	result1, #116
05b54     54 03 90 FD | 	jmp	#LR__0455
05b58                 | LR__0348
05b58     6C FA 05 F6 | 	mov	result1, #108
05b5c     4C 03 90 FD | 	jmp	#LR__0455
05b60                 | LR__0349
05b60     6C FA 05 F6 | 	mov	result1, #108
05b64     44 03 90 FD | 	jmp	#LR__0455
05b68                 | LR__0350
05b68     89 FA 05 F6 | 	mov	result1, #137
05b6c     3C 03 90 FD | 	jmp	#LR__0455
05b70                 | LR__0351
05b70     C2 FA 05 F6 | 	mov	result1, #194
05b74     34 03 90 FD | 	jmp	#LR__0455
05b78                 | LR__0352
05b78     72 FA 05 F6 | 	mov	result1, #114
05b7c     2C 03 90 FD | 	jmp	#LR__0455
05b80                 | LR__0353
05b80     5D FA 05 F6 | 	mov	result1, #93
05b84     24 03 90 FD | 	jmp	#LR__0455
05b88                 | LR__0354
05b88     96 FA 05 F6 | 	mov	result1, #150
05b8c     1C 03 90 FD | 	jmp	#LR__0455
05b90                 | LR__0355
05b90     43 FA 05 F6 | 	mov	result1, #67
05b94     14 03 90 FD | 	jmp	#LR__0455
05b98                 | LR__0356
05b98     43 FA 05 F6 | 	mov	result1, #67
05b9c     0C 03 90 FD | 	jmp	#LR__0455
05ba0                 | LR__0357
05ba0     43 FA 05 F6 | 	mov	result1, #67
05ba4     04 03 90 FD | 	jmp	#LR__0455
05ba8                 | LR__0358
05ba8     5A FA 05 F6 | 	mov	result1, #90
05bac     FC 02 90 FD | 	jmp	#LR__0455
05bb0                 | LR__0359
05bb0     AB FA 05 F6 | 	mov	result1, #171
05bb4     F4 02 90 FD | 	jmp	#LR__0455
05bb8                 | LR__0360
05bb8     BD FA 05 F6 | 	mov	result1, #189
05bbc     EC 02 90 FD | 	jmp	#LR__0455
05bc0                 | LR__0361
05bc0     BD FA 05 F6 | 	mov	result1, #189
05bc4     E4 02 90 FD | 	jmp	#LR__0455
05bc8                 | LR__0362
05bc8     46 FA 05 F6 | 	mov	result1, #70
05bcc     DC 02 90 FD | 	jmp	#LR__0455
05bd0                 | LR__0363
05bd0     46 FA 05 F6 | 	mov	result1, #70
05bd4     D4 02 90 FD | 	jmp	#LR__0455
05bd8                 | LR__0364
05bd8     71 FA 05 F6 | 	mov	result1, #113
05bdc     CC 02 90 FD | 	jmp	#LR__0455
05be0                 | LR__0365
05be0     71 FA 05 F6 | 	mov	result1, #113
05be4     C4 02 90 FD | 	jmp	#LR__0455
05be8                 | LR__0366
05be8     60 FA 05 F6 | 	mov	result1, #96
05bec     BC 02 90 FD | 	jmp	#LR__0455
05bf0                 | LR__0367
05bf0     4A FA 05 F6 | 	mov	result1, #74
05bf4     B4 02 90 FD | 	jmp	#LR__0455
05bf8                 | LR__0368
05bf8     4A FA 05 F6 | 	mov	result1, #74
05bfc     AC 02 90 FD | 	jmp	#LR__0455
05c00                 | LR__0369
05c00     48 FA 05 F6 | 	mov	result1, #72
05c04     A4 02 90 FD | 	jmp	#LR__0455
05c08                 | LR__0370
05c08     48 FA 05 F6 | 	mov	result1, #72
05c0c     9C 02 90 FD | 	jmp	#LR__0455
05c10                 | LR__0371
05c10     BB FA 05 F6 | 	mov	result1, #187
05c14     94 02 90 FD | 	jmp	#LR__0455
05c18                 | LR__0372
05c18     A9 FA 05 F6 | 	mov	result1, #169
05c1c     8C 02 90 FD | 	jmp	#LR__0455
05c20                 | LR__0373
05c20     4E FA 05 F6 | 	mov	result1, #78
05c24     84 02 90 FD | 	jmp	#LR__0455
05c28                 | LR__0374
05c28     4E FA 05 F6 | 	mov	result1, #78
05c2c     7C 02 90 FD | 	jmp	#LR__0455
05c30                 | LR__0375
05c30     58 FA 05 F6 | 	mov	result1, #88
05c34     74 02 90 FD | 	jmp	#LR__0455
05c38                 | LR__0376
05c38     5F FA 05 F6 | 	mov	result1, #95
05c3c     6C 02 90 FD | 	jmp	#LR__0455
05c40                 | LR__0377
05c40     5F FA 05 F6 | 	mov	result1, #95
05c44     64 02 90 FD | 	jmp	#LR__0455
05c48                 | LR__0378
05c48     B5 FA 05 F6 | 	mov	result1, #181
05c4c     5C 02 90 FD | 	jmp	#LR__0455
05c50                 | LR__0379
05c50     4C FA 05 F6 | 	mov	result1, #76
05c54     54 02 90 FD | 	jmp	#LR__0455
05c58                 | LR__0380
05c58     4C FA 05 F6 | 	mov	result1, #76
05c5c     4C 02 90 FD | 	jmp	#LR__0455
05c60                 | LR__0381
05c60     52 FA 05 F6 | 	mov	result1, #82
05c64     44 02 90 FD | 	jmp	#LR__0455
05c68                 | LR__0382
05c68     52 FA 05 F6 | 	mov	result1, #82
05c6c     3C 02 90 FD | 	jmp	#LR__0455
05c70                 | LR__0383
05c70     97 FA 05 F6 | 	mov	result1, #151
05c74     34 02 90 FD | 	jmp	#LR__0455
05c78                 | LR__0384
05c78     C6 FA 05 F6 | 	mov	result1, #198
05c7c     2C 02 90 FD | 	jmp	#LR__0455
05c80                 | LR__0385
05c80     61 FA 05 F6 | 	mov	result1, #97
05c84     24 02 90 FD | 	jmp	#LR__0455
05c88                 | LR__0386
05c88     61 FA 05 F6 | 	mov	result1, #97
05c8c     1C 02 90 FD | 	jmp	#LR__0455
05c90                 | LR__0387
05c90     63 FA 05 F6 | 	mov	result1, #99
05c94     14 02 90 FD | 	jmp	#LR__0455
05c98                 | LR__0388
05c98     41 FA 05 F6 | 	mov	result1, #65
05c9c     0C 02 90 FD | 	jmp	#LR__0455
05ca0                 | LR__0389
05ca0     4B FA 05 F6 | 	mov	result1, #75
05ca4     04 02 90 FD | 	jmp	#LR__0455
05ca8                 | LR__0390
05ca8     4B FA 05 F6 | 	mov	result1, #75
05cac     FC 01 90 FD | 	jmp	#LR__0455
05cb0                 | LR__0391
05cb0     C1 FA 05 F6 | 	mov	result1, #193
05cb4     F4 01 90 FD | 	jmp	#LR__0455
05cb8                 | LR__0392
05cb8     B3 FA 05 F6 | 	mov	result1, #179
05cbc     EC 01 90 FD | 	jmp	#LR__0455
05cc0                 | LR__0393
05cc0     5E FA 05 F6 | 	mov	result1, #94
05cc4     E4 01 90 FD | 	jmp	#LR__0455
05cc8                 | LR__0394
05cc8     5E FA 05 F6 | 	mov	result1, #94
05ccc     DC 01 90 FD | 	jmp	#LR__0455
05cd0                 | LR__0395
05cd0     7C FA 05 F6 | 	mov	result1, #124
05cd4     D4 01 90 FD | 	jmp	#LR__0455
05cd8                 | LR__0396
05cd8     7E FA 05 F6 | 	mov	result1, #126
05cdc     CC 01 90 FD | 	jmp	#LR__0455
05ce0                 | LR__0397
05ce0     7D FA 05 F6 | 	mov	result1, #125
05ce4     C4 01 90 FD | 	jmp	#LR__0455
05ce8                 | LR__0398
05ce8     7F FA 05 F6 | 	mov	result1, #127
05cec     BC 01 90 FD | 	jmp	#LR__0455
05cf0                 | LR__0399
05cf0     80 FA 05 F6 | 	mov	result1, #128
05cf4     B4 01 90 FD | 	jmp	#LR__0455
05cf8                 | LR__0400
05cf8     55 FA 05 F6 | 	mov	result1, #85
05cfc     AC 01 90 FD | 	jmp	#LR__0455
05d00                 | LR__0401
05d00     75 FA 05 F6 | 	mov	result1, #117
05d04     A4 01 90 FD | 	jmp	#LR__0455
05d08                 | LR__0402
05d08     75 FA 05 F6 | 	mov	result1, #117
05d0c     9C 01 90 FD | 	jmp	#LR__0455
05d10                 | LR__0403
05d10     42 FA 05 F6 | 	mov	result1, #66
05d14     94 01 90 FD | 	jmp	#LR__0455
05d18                 | LR__0404
05d18     42 FA 05 F6 | 	mov	result1, #66
05d1c     8C 01 90 FD | 	jmp	#LR__0455
05d20                 | LR__0405
05d20     95 FA 05 F6 | 	mov	result1, #149
05d24     84 01 90 FD | 	jmp	#LR__0455
05d28                 | LR__0406
05d28     AC FA 05 F6 | 	mov	result1, #172
05d2c     7C 01 90 FD | 	jmp	#LR__0455
05d30                 | LR__0407
05d30     81 FA 05 F6 | 	mov	result1, #129
05d34     74 01 90 FD | 	jmp	#LR__0455
05d38                 | LR__0408
05d38     81 FA 05 F6 | 	mov	result1, #129
05d3c     6C 01 90 FD | 	jmp	#LR__0455
05d40                 | LR__0409
05d40     44 FA 05 F6 | 	mov	result1, #68
05d44     64 01 90 FD | 	jmp	#LR__0455
05d48                 | LR__0410
05d48     44 FA 05 F6 | 	mov	result1, #68
05d4c     5C 01 90 FD | 	jmp	#LR__0455
05d50                 | LR__0411
05d50     BC FA 05 F6 | 	mov	result1, #188
05d54     54 01 90 FD | 	jmp	#LR__0455
05d58                 | LR__0412
05d58     88 FA 05 F6 | 	mov	result1, #136
05d5c     4C 01 90 FD | 	jmp	#LR__0455
05d60                 | LR__0413
05d60     B6 FA 05 F6 | 	mov	result1, #182
05d64     44 01 90 FD | 	jmp	#LR__0455
05d68                 | LR__0414
05d68     92 FA 05 F6 | 	mov	result1, #146
05d6c     3C 01 90 FD | 	jmp	#LR__0455
05d70                 | LR__0415
05d70     BE FA 05 F6 | 	mov	result1, #190
05d74     34 01 90 FD | 	jmp	#LR__0455
05d78                 | LR__0416
05d78     BE FA 05 F6 | 	mov	result1, #190
05d7c     2C 01 90 FD | 	jmp	#LR__0455
05d80                 | LR__0417
05d80     C7 FA 05 F6 | 	mov	result1, #199
05d84     24 01 90 FD | 	jmp	#LR__0455
05d88                 | LR__0418
05d88     AA FA 05 F6 | 	mov	result1, #170
05d8c     1C 01 90 FD | 	jmp	#LR__0455
05d90                 | LR__0419
05d90     4D FA 05 F6 | 	mov	result1, #77
05d94     14 01 90 FD | 	jmp	#LR__0455
05d98                 | LR__0420
05d98     51 FA 05 F6 | 	mov	result1, #81
05d9c     0C 01 90 FD | 	jmp	#LR__0455
05da0                 | LR__0421
05da0     CF FA 05 F6 | 	mov	result1, #207
05da4     04 01 90 FD | 	jmp	#LR__0455
05da8                 | LR__0422
05da8     51 FA 05 F6 | 	mov	result1, #81
05dac     FC 00 90 FD | 	jmp	#LR__0455
05db0                 | LR__0423
05db0     8E FA 05 F6 | 	mov	result1, #142
05db4     F4 00 90 FD | 	jmp	#LR__0455
05db8                 | LR__0424
05db8     8E FA 05 F6 | 	mov	result1, #142
05dbc     EC 00 90 FD | 	jmp	#LR__0455
05dc0                 | LR__0425
05dc0     90 FA 05 F6 | 	mov	result1, #144
05dc4     E4 00 90 FD | 	jmp	#LR__0455
05dc8                 | LR__0426
05dc8     90 FA 05 F6 | 	mov	result1, #144
05dcc     DC 00 90 FD | 	jmp	#LR__0455
05dd0                 | LR__0427
05dd0     8D FA 05 F6 | 	mov	result1, #141
05dd4     D4 00 90 FD | 	jmp	#LR__0455
05dd8                 | LR__0428
05dd8     8D FA 05 F6 | 	mov	result1, #141
05ddc     CC 00 90 FD | 	jmp	#LR__0455
05de0                 | LR__0429
05de0     8C FA 05 F6 | 	mov	result1, #140
05de4     C4 00 90 FD | 	jmp	#LR__0455
05de8                 | LR__0430
05de8     8C FA 05 F6 | 	mov	result1, #140
05dec     BC 00 90 FD | 	jmp	#LR__0455
05df0                 | LR__0431
05df0     91 FA 05 F6 | 	mov	result1, #145
05df4     B4 00 90 FD | 	jmp	#LR__0455
05df8                 | LR__0432
05df8     91 FA 05 F6 | 	mov	result1, #145
05dfc     AC 00 90 FD | 	jmp	#LR__0455
05e00                 | LR__0433
05e00     8B FA 05 F6 | 	mov	result1, #139
05e04     A4 00 90 FD | 	jmp	#LR__0455
05e08                 | LR__0434
05e08     8B FA 05 F6 | 	mov	result1, #139
05e0c     9C 00 90 FD | 	jmp	#LR__0455
05e10                 | LR__0435
05e10     8F FA 05 F6 | 	mov	result1, #143
05e14     94 00 90 FD | 	jmp	#LR__0455
05e18                 | LR__0436
05e18     8F FA 05 F6 | 	mov	result1, #143
05e1c     8C 00 90 FD | 	jmp	#LR__0455
05e20                 | LR__0437
05e20     8F FA 05 F6 | 	mov	result1, #143
05e24     84 00 90 FD | 	jmp	#LR__0455
05e28                 | LR__0438
05e28     B2 FA 05 F6 | 	mov	result1, #178
05e2c     7C 00 90 FD | 	jmp	#LR__0455
05e30                 | LR__0439
05e30     B2 FA 05 F6 | 	mov	result1, #178
05e34     74 00 90 FD | 	jmp	#LR__0455
05e38                 | LR__0440
05e38     75 FA 05 F6 | 	mov	result1, #117
05e3c     6C 00 90 FD | 	jmp	#LR__0455
05e40                 | LR__0441
05e40     75 FA 05 F6 | 	mov	result1, #117
05e44     64 00 90 FD | 	jmp	#LR__0455
05e48                 | LR__0442
05e48     6D FA 05 F6 | 	mov	result1, #109
05e4c     5C 00 90 FD | 	jmp	#LR__0455
05e50                 | LR__0443
05e50     6D FA 05 F6 | 	mov	result1, #109
05e54     54 00 90 FD | 	jmp	#LR__0455
05e58                 | LR__0444
05e58     5B FA 05 F6 | 	mov	result1, #91
05e5c     4C 00 90 FD | 	jmp	#LR__0455
05e60                 | LR__0445
05e60     56 FA 05 F6 | 	mov	result1, #86
05e64     44 00 90 FD | 	jmp	#LR__0455
05e68                 | LR__0446
05e68     56 FA 05 F6 | 	mov	result1, #86
05e6c     3C 00 90 FD | 	jmp	#LR__0455
05e70                 | LR__0447
05e70     70 FA 05 F6 | 	mov	result1, #112
05e74     34 00 90 FD | 	jmp	#LR__0455
05e78                 | LR__0448
05e78     70 FA 05 F6 | 	mov	result1, #112
05e7c     2C 00 90 FD | 	jmp	#LR__0455
05e80                 | LR__0449
05e80     57 FA 05 F6 | 	mov	result1, #87
05e84     24 00 90 FD | 	jmp	#LR__0455
05e88                 | LR__0450
05e88     57 FA 05 F6 | 	mov	result1, #87
05e8c     1C 00 90 FD | 	jmp	#LR__0455
05e90                 | LR__0451
05e90     79 FA 05 F6 | 	mov	result1, #121
05e94     14 00 90 FD | 	jmp	#LR__0455
05e98                 | LR__0452
05e98     77 FA 05 F6 | 	mov	result1, #119
05e9c     0C 00 90 FD | 	jmp	#LR__0455
05ea0                 | LR__0453
05ea0     78 FA 05 F6 | 	mov	result1, #120
05ea4     04 00 90 FD | 	jmp	#LR__0455
05ea8                 | LR__0454
05ea8     00 FA 05 F6 | 	mov	result1, #0
05eac                 | LR__0455
05eac     A7 F0 03 F6 | 	mov	ptra, fp
05eb0     B2 00 A0 FD | 	call	#popregs_
05eb4                 | _iscommand_ret
05eb4     2D 00 64 FD | 	ret
05eb8                 | 
05eb8                 | ' 
05eb8                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05eb8                 | ' 
05eb8                 | ' function isfunction(s as string) as ubyte
05eb8                 | _isfunction
05eb8     01 4A 05 F6 | 	mov	COUNT_, #1
05ebc     A8 00 A0 FD | 	call	#pushregs_
05ec0                 | ' 
05ec0                 | ' select case s
05ec0     09 27 02 F6 | 	mov	local01, arg01
05ec4     B4 01 00 FF 
05ec8     8C 15 06 F6 | 	mov	arg02, ##@LR__5682
05ecc     13 13 02 F6 | 	mov	arg01, local01
05ed0     C0 0A B2 FD | 	call	#__system___string_cmp
05ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ed8     2C 05 90 AD |  if_e	jmp	#LR__0460
05edc     B4 01 00 FF 
05ee0     90 15 06 F6 | 	mov	arg02, ##@LR__5683
05ee4     13 13 02 F6 | 	mov	arg01, local01
05ee8     A8 0A B2 FD | 	call	#__system___string_cmp
05eec     00 FA 0D F2 | 	cmp	result1, #0 wz
05ef0     1C 05 90 AD |  if_e	jmp	#LR__0461
05ef4     B4 01 00 FF 
05ef8     95 15 06 F6 | 	mov	arg02, ##@LR__5684
05efc     13 13 02 F6 | 	mov	arg01, local01
05f00     90 0A B2 FD | 	call	#__system___string_cmp
05f04     00 FA 0D F2 | 	cmp	result1, #0 wz
05f08     0C 05 90 AD |  if_e	jmp	#LR__0462
05f0c     B4 01 00 FF 
05f10     99 15 06 F6 | 	mov	arg02, ##@LR__5685
05f14     13 13 02 F6 | 	mov	arg01, local01
05f18     78 0A B2 FD | 	call	#__system___string_cmp
05f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f20     FC 04 90 AD |  if_e	jmp	#LR__0463
05f24     B4 01 00 FF 
05f28     9E 15 06 F6 | 	mov	arg02, ##@LR__5686
05f2c     13 13 02 F6 | 	mov	arg01, local01
05f30     60 0A B2 FD | 	call	#__system___string_cmp
05f34     00 FA 0D F2 | 	cmp	result1, #0 wz
05f38     EC 04 90 AD |  if_e	jmp	#LR__0464
05f3c     B4 01 00 FF 
05f40     A2 15 06 F6 | 	mov	arg02, ##@LR__5687
05f44     13 13 02 F6 | 	mov	arg01, local01
05f48     48 0A B2 FD | 	call	#__system___string_cmp
05f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f50     DC 04 90 AD |  if_e	jmp	#LR__0465
05f54     B4 01 00 FF 
05f58     A7 15 06 F6 | 	mov	arg02, ##@LR__5688
05f5c     13 13 02 F6 | 	mov	arg01, local01
05f60     30 0A B2 FD | 	call	#__system___string_cmp
05f64     00 FA 0D F2 | 	cmp	result1, #0 wz
05f68     CC 04 90 AD |  if_e	jmp	#LR__0466
05f6c     B4 01 00 FF 
05f70     AB 15 06 F6 | 	mov	arg02, ##@LR__5689
05f74     13 13 02 F6 | 	mov	arg01, local01
05f78     18 0A B2 FD | 	call	#__system___string_cmp
05f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f80     BC 04 90 AD |  if_e	jmp	#LR__0467
05f84     B4 01 00 FF 
05f88     B0 15 06 F6 | 	mov	arg02, ##@LR__5690
05f8c     13 13 02 F6 | 	mov	arg01, local01
05f90     00 0A B2 FD | 	call	#__system___string_cmp
05f94     00 FA 0D F2 | 	cmp	result1, #0 wz
05f98     AC 04 90 AD |  if_e	jmp	#LR__0468
05f9c     B4 01 00 FF 
05fa0     B5 15 06 F6 | 	mov	arg02, ##@LR__5691
05fa4     13 13 02 F6 | 	mov	arg01, local01
05fa8     E8 09 B2 FD | 	call	#__system___string_cmp
05fac     00 FA 0D F2 | 	cmp	result1, #0 wz
05fb0     9C 04 90 AD |  if_e	jmp	#LR__0469
05fb4     B4 01 00 FF 
05fb8     BD 15 06 F6 | 	mov	arg02, ##@LR__5692
05fbc     13 13 02 F6 | 	mov	arg01, local01
05fc0     D0 09 B2 FD | 	call	#__system___string_cmp
05fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
05fc8     8C 04 90 AD |  if_e	jmp	#LR__0470
05fcc     B4 01 00 FF 
05fd0     C1 15 06 F6 | 	mov	arg02, ##@LR__5693
05fd4     13 13 02 F6 | 	mov	arg01, local01
05fd8     B8 09 B2 FD | 	call	#__system___string_cmp
05fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
05fe0     7C 04 90 AD |  if_e	jmp	#LR__0471
05fe4     B4 01 00 FF 
05fe8     C7 15 06 F6 | 	mov	arg02, ##@LR__5694
05fec     13 13 02 F6 | 	mov	arg01, local01
05ff0     A0 09 B2 FD | 	call	#__system___string_cmp
05ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ff8     6C 04 90 AD |  if_e	jmp	#LR__0472
05ffc     B4 01 00 FF 
06000     D0 15 06 F6 | 	mov	arg02, ##@LR__5695
06004     13 13 02 F6 | 	mov	arg01, local01
06008     88 09 B2 FD | 	call	#__system___string_cmp
0600c     00 FA 0D F2 | 	cmp	result1, #0 wz
06010     5C 04 90 AD |  if_e	jmp	#LR__0473
06014     B4 01 00 FF 
06018     D4 15 06 F6 | 	mov	arg02, ##@LR__5696
0601c     13 13 02 F6 | 	mov	arg01, local01
06020     70 09 B2 FD | 	call	#__system___string_cmp
06024     00 FA 0D F2 | 	cmp	result1, #0 wz
06028     4C 04 90 AD |  if_e	jmp	#LR__0474
0602c     B4 01 00 FF 
06030     D8 15 06 F6 | 	mov	arg02, ##@LR__5697
06034     13 13 02 F6 | 	mov	arg01, local01
06038     58 09 B2 FD | 	call	#__system___string_cmp
0603c     00 FA 0D F2 | 	cmp	result1, #0 wz
06040     3C 04 90 AD |  if_e	jmp	#LR__0475
06044     B4 01 00 FF 
06048     E1 15 06 F6 | 	mov	arg02, ##@LR__5698
0604c     13 13 02 F6 | 	mov	arg01, local01
06050     40 09 B2 FD | 	call	#__system___string_cmp
06054     00 FA 0D F2 | 	cmp	result1, #0 wz
06058     2C 04 90 AD |  if_e	jmp	#LR__0476
0605c     B4 01 00 FF 
06060     E5 15 06 F6 | 	mov	arg02, ##@LR__5699
06064     13 13 02 F6 | 	mov	arg01, local01
06068     28 09 B2 FD | 	call	#__system___string_cmp
0606c     00 FA 0D F2 | 	cmp	result1, #0 wz
06070     1C 04 90 AD |  if_e	jmp	#LR__0477
06074     B4 01 00 FF 
06078     F3 15 06 F6 | 	mov	arg02, ##@LR__5700
0607c     13 13 02 F6 | 	mov	arg01, local01
06080     10 09 B2 FD | 	call	#__system___string_cmp
06084     00 FA 0D F2 | 	cmp	result1, #0 wz
06088     0C 04 90 AD |  if_e	jmp	#LR__0478
0608c     B5 01 00 FF 
06090     00 14 06 F6 | 	mov	arg02, ##@LR__5701
06094     13 13 02 F6 | 	mov	arg01, local01
06098     F8 08 B2 FD | 	call	#__system___string_cmp
0609c     00 FA 0D F2 | 	cmp	result1, #0 wz
060a0     FC 03 90 AD |  if_e	jmp	#LR__0479
060a4     B5 01 00 FF 
060a8     08 14 06 F6 | 	mov	arg02, ##@LR__5702
060ac     13 13 02 F6 | 	mov	arg01, local01
060b0     E0 08 B2 FD | 	call	#__system___string_cmp
060b4     00 FA 0D F2 | 	cmp	result1, #0 wz
060b8     EC 03 90 AD |  if_e	jmp	#LR__0480
060bc     B5 01 00 FF 
060c0     0D 14 06 F6 | 	mov	arg02, ##@LR__5703
060c4     13 13 02 F6 | 	mov	arg01, local01
060c8     C8 08 B2 FD | 	call	#__system___string_cmp
060cc     00 FA 0D F2 | 	cmp	result1, #0 wz
060d0     DC 03 90 AD |  if_e	jmp	#LR__0481
060d4     B5 01 00 FF 
060d8     14 14 06 F6 | 	mov	arg02, ##@LR__5704
060dc     13 13 02 F6 | 	mov	arg01, local01
060e0     B0 08 B2 FD | 	call	#__system___string_cmp
060e4     00 FA 0D F2 | 	cmp	result1, #0 wz
060e8     CC 03 90 AD |  if_e	jmp	#LR__0482
060ec     B5 01 00 FF 
060f0     18 14 06 F6 | 	mov	arg02, ##@LR__5705
060f4     13 13 02 F6 | 	mov	arg01, local01
060f8     98 08 B2 FD | 	call	#__system___string_cmp
060fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06100     BC 03 90 AD |  if_e	jmp	#LR__0483
06104     B5 01 00 FF 
06108     1E 14 06 F6 | 	mov	arg02, ##@LR__5706
0610c     13 13 02 F6 | 	mov	arg01, local01
06110     80 08 B2 FD | 	call	#__system___string_cmp
06114     00 FA 0D F2 | 	cmp	result1, #0 wz
06118     AC 03 90 AD |  if_e	jmp	#LR__0484
0611c     B5 01 00 FF 
06120     22 14 06 F6 | 	mov	arg02, ##@LR__5707
06124     13 13 02 F6 | 	mov	arg01, local01
06128     68 08 B2 FD | 	call	#__system___string_cmp
0612c     00 FA 0D F2 | 	cmp	result1, #0 wz
06130     9C 03 90 AD |  if_e	jmp	#LR__0485
06134     B5 01 00 FF 
06138     26 14 06 F6 | 	mov	arg02, ##@LR__5708
0613c     13 13 02 F6 | 	mov	arg01, local01
06140     50 08 B2 FD | 	call	#__system___string_cmp
06144     00 FA 0D F2 | 	cmp	result1, #0 wz
06148     8C 03 90 AD |  if_e	jmp	#LR__0486
0614c     B5 01 00 FF 
06150     2C 14 06 F6 | 	mov	arg02, ##@LR__5709
06154     13 13 02 F6 | 	mov	arg01, local01
06158     38 08 B2 FD | 	call	#__system___string_cmp
0615c     00 FA 0D F2 | 	cmp	result1, #0 wz
06160     7C 03 90 AD |  if_e	jmp	#LR__0487
06164     B5 01 00 FF 
06168     32 14 06 F6 | 	mov	arg02, ##@LR__5710
0616c     13 13 02 F6 | 	mov	arg01, local01
06170     20 08 B2 FD | 	call	#__system___string_cmp
06174     00 FA 0D F2 | 	cmp	result1, #0 wz
06178     6C 03 90 AD |  if_e	jmp	#LR__0488
0617c     B5 01 00 FF 
06180     38 14 06 F6 | 	mov	arg02, ##@LR__5711
06184     13 13 02 F6 | 	mov	arg01, local01
06188     08 08 B2 FD | 	call	#__system___string_cmp
0618c     00 FA 0D F2 | 	cmp	result1, #0 wz
06190     5C 03 90 AD |  if_e	jmp	#LR__0489
06194     B5 01 00 FF 
06198     3D 14 06 F6 | 	mov	arg02, ##@LR__5712
0619c     13 13 02 F6 | 	mov	arg01, local01
061a0     F0 07 B2 FD | 	call	#__system___string_cmp
061a4     00 FA 0D F2 | 	cmp	result1, #0 wz
061a8     4C 03 90 AD |  if_e	jmp	#LR__0490
061ac     B5 01 00 FF 
061b0     44 14 06 F6 | 	mov	arg02, ##@LR__5713
061b4     13 13 02 F6 | 	mov	arg01, local01
061b8     D8 07 B2 FD | 	call	#__system___string_cmp
061bc     00 FA 0D F2 | 	cmp	result1, #0 wz
061c0     3C 03 90 AD |  if_e	jmp	#LR__0491
061c4     B5 01 00 FF 
061c8     4B 14 06 F6 | 	mov	arg02, ##@LR__5714
061cc     13 13 02 F6 | 	mov	arg01, local01
061d0     C0 07 B2 FD | 	call	#__system___string_cmp
061d4     00 FA 0D F2 | 	cmp	result1, #0 wz
061d8     2C 03 90 AD |  if_e	jmp	#LR__0492
061dc     B5 01 00 FF 
061e0     52 14 06 F6 | 	mov	arg02, ##@LR__5715
061e4     13 13 02 F6 | 	mov	arg01, local01
061e8     A8 07 B2 FD | 	call	#__system___string_cmp
061ec     00 FA 0D F2 | 	cmp	result1, #0 wz
061f0     1C 03 90 AD |  if_e	jmp	#LR__0493
061f4     B5 01 00 FF 
061f8     59 14 06 F6 | 	mov	arg02, ##@LR__5716
061fc     13 13 02 F6 | 	mov	arg01, local01
06200     90 07 B2 FD | 	call	#__system___string_cmp
06204     00 FA 0D F2 | 	cmp	result1, #0 wz
06208     0C 03 90 AD |  if_e	jmp	#LR__0494
0620c     B5 01 00 FF 
06210     5E 14 06 F6 | 	mov	arg02, ##@LR__5717
06214     13 13 02 F6 | 	mov	arg01, local01
06218     78 07 B2 FD | 	call	#__system___string_cmp
0621c     00 FA 0D F2 | 	cmp	result1, #0 wz
06220     FC 02 90 AD |  if_e	jmp	#LR__0495
06224     B5 01 00 FF 
06228     63 14 06 F6 | 	mov	arg02, ##@LR__5718
0622c     13 13 02 F6 | 	mov	arg01, local01
06230     60 07 B2 FD | 	call	#__system___string_cmp
06234     00 FA 0D F2 | 	cmp	result1, #0 wz
06238     EC 02 90 AD |  if_e	jmp	#LR__0496
0623c     B5 01 00 FF 
06240     68 14 06 F6 | 	mov	arg02, ##@LR__5719
06244     13 13 02 F6 | 	mov	arg01, local01
06248     48 07 B2 FD | 	call	#__system___string_cmp
0624c     00 FA 0D F2 | 	cmp	result1, #0 wz
06250     DC 02 90 AD |  if_e	jmp	#LR__0497
06254     B5 01 00 FF 
06258     6E 14 06 F6 | 	mov	arg02, ##@LR__5720
0625c     13 13 02 F6 | 	mov	arg01, local01
06260     30 07 B2 FD | 	call	#__system___string_cmp
06264     00 FA 0D F2 | 	cmp	result1, #0 wz
06268     CC 02 90 AD |  if_e	jmp	#LR__0498
0626c     B5 01 00 FF 
06270     74 14 06 F6 | 	mov	arg02, ##@LR__5721
06274     13 13 02 F6 | 	mov	arg01, local01
06278     18 07 B2 FD | 	call	#__system___string_cmp
0627c     00 FA 0D F2 | 	cmp	result1, #0 wz
06280     BC 02 90 AD |  if_e	jmp	#LR__0499
06284     B5 01 00 FF 
06288     7A 14 06 F6 | 	mov	arg02, ##@LR__5722
0628c     13 13 02 F6 | 	mov	arg01, local01
06290     00 07 B2 FD | 	call	#__system___string_cmp
06294     00 FA 0D F2 | 	cmp	result1, #0 wz
06298     AC 02 90 AD |  if_e	jmp	#LR__0500
0629c     B5 01 00 FF 
062a0     7F 14 06 F6 | 	mov	arg02, ##@LR__5723
062a4     13 13 02 F6 | 	mov	arg01, local01
062a8     E8 06 B2 FD | 	call	#__system___string_cmp
062ac     00 FA 0D F2 | 	cmp	result1, #0 wz
062b0     9C 02 90 AD |  if_e	jmp	#LR__0501
062b4     B5 01 00 FF 
062b8     84 14 06 F6 | 	mov	arg02, ##@LR__5724
062bc     13 13 02 F6 | 	mov	arg01, local01
062c0     D0 06 B2 FD | 	call	#__system___string_cmp
062c4     00 FA 0D F2 | 	cmp	result1, #0 wz
062c8     8C 02 90 AD |  if_e	jmp	#LR__0502
062cc     B5 01 00 FF 
062d0     8C 14 06 F6 | 	mov	arg02, ##@LR__5725
062d4     13 13 02 F6 | 	mov	arg01, local01
062d8     B8 06 B2 FD | 	call	#__system___string_cmp
062dc     00 FA 0D F2 | 	cmp	result1, #0 wz
062e0     7C 02 90 AD |  if_e	jmp	#LR__0503
062e4     B5 01 00 FF 
062e8     92 14 06 F6 | 	mov	arg02, ##@LR__5726
062ec     13 13 02 F6 | 	mov	arg01, local01
062f0     A0 06 B2 FD | 	call	#__system___string_cmp
062f4     00 FA 0D F2 | 	cmp	result1, #0 wz
062f8     6C 02 90 AD |  if_e	jmp	#LR__0504
062fc     B5 01 00 FF 
06300     99 14 06 F6 | 	mov	arg02, ##@LR__5727
06304     13 13 02 F6 | 	mov	arg01, local01
06308     88 06 B2 FD | 	call	#__system___string_cmp
0630c     00 FA 0D F2 | 	cmp	result1, #0 wz
06310     5C 02 90 AD |  if_e	jmp	#LR__0505
06314     B5 01 00 FF 
06318     9F 14 06 F6 | 	mov	arg02, ##@LR__5728
0631c     13 13 02 F6 | 	mov	arg01, local01
06320     70 06 B2 FD | 	call	#__system___string_cmp
06324     00 FA 0D F2 | 	cmp	result1, #0 wz
06328     4C 02 90 AD |  if_e	jmp	#LR__0506
0632c     B5 01 00 FF 
06330     A5 14 06 F6 | 	mov	arg02, ##@LR__5729
06334     13 13 02 F6 | 	mov	arg01, local01
06338     58 06 B2 FD | 	call	#__system___string_cmp
0633c     00 FA 0D F2 | 	cmp	result1, #0 wz
06340     3C 02 90 AD |  if_e	jmp	#LR__0507
06344     B5 01 00 FF 
06348     A9 14 06 F6 | 	mov	arg02, ##@LR__5730
0634c     13 13 02 F6 | 	mov	arg01, local01
06350     40 06 B2 FD | 	call	#__system___string_cmp
06354     00 FA 0D F2 | 	cmp	result1, #0 wz
06358     2C 02 90 AD |  if_e	jmp	#LR__0508
0635c     B5 01 00 FF 
06360     AD 14 06 F6 | 	mov	arg02, ##@LR__5731
06364     13 13 02 F6 | 	mov	arg01, local01
06368     28 06 B2 FD | 	call	#__system___string_cmp
0636c     00 FA 0D F2 | 	cmp	result1, #0 wz
06370     1C 02 90 AD |  if_e	jmp	#LR__0509
06374     B5 01 00 FF 
06378     B1 14 06 F6 | 	mov	arg02, ##@LR__5732
0637c     13 13 02 F6 | 	mov	arg01, local01
06380     10 06 B2 FD | 	call	#__system___string_cmp
06384     00 FA 0D F2 | 	cmp	result1, #0 wz
06388     0C 02 90 AD |  if_e	jmp	#LR__0510
0638c     B5 01 00 FF 
06390     B7 14 06 F6 | 	mov	arg02, ##@LR__5733
06394     13 13 02 F6 | 	mov	arg01, local01
06398     F8 05 B2 FD | 	call	#__system___string_cmp
0639c     00 FA 0D F2 | 	cmp	result1, #0 wz
063a0     FC 01 90 AD |  if_e	jmp	#LR__0511
063a4     B5 01 00 FF 
063a8     BD 14 06 F6 | 	mov	arg02, ##@LR__5734
063ac     13 13 02 F6 | 	mov	arg01, local01
063b0     E0 05 B2 FD | 	call	#__system___string_cmp
063b4     00 FA 0D F2 | 	cmp	result1, #0 wz
063b8     EC 01 90 AD |  if_e	jmp	#LR__0512
063bc     B5 01 00 FF 
063c0     C2 14 06 F6 | 	mov	arg02, ##@LR__5735
063c4     13 13 02 F6 | 	mov	arg01, local01
063c8     C8 05 B2 FD | 	call	#__system___string_cmp
063cc     00 FA 0D F2 | 	cmp	result1, #0 wz
063d0     DC 01 90 AD |  if_e	jmp	#LR__0513
063d4     B5 01 00 FF 
063d8     C6 14 06 F6 | 	mov	arg02, ##@LR__5736
063dc     13 13 02 F6 | 	mov	arg01, local01
063e0     B0 05 B2 FD | 	call	#__system___string_cmp
063e4     00 FA 0D F2 | 	cmp	result1, #0 wz
063e8     CC 01 90 AD |  if_e	jmp	#LR__0514
063ec     B5 01 00 FF 
063f0     CA 14 06 F6 | 	mov	arg02, ##@LR__5737
063f4     13 13 02 F6 | 	mov	arg01, local01
063f8     98 05 B2 FD | 	call	#__system___string_cmp
063fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06400     BC 01 90 AD |  if_e	jmp	#LR__0515
06404     C0 01 90 FD | 	jmp	#LR__0516
06408                 | LR__0460
06408     9E FA 05 F6 | 	mov	result1, #158
0640c     BC 01 90 FD | 	jmp	#LR__0517
06410                 | LR__0461
06410     85 FA 05 F6 | 	mov	result1, #133
06414     B4 01 90 FD | 	jmp	#LR__0517
06418                 | LR__0462
06418     9B FA 05 F6 | 	mov	result1, #155
0641c     AC 01 90 FD | 	jmp	#LR__0517
06420                 | LR__0463
06420     9B FA 05 F6 | 	mov	result1, #155
06424     A4 01 90 FD | 	jmp	#LR__0517
06428                 | LR__0464
06428     A7 FA 05 F6 | 	mov	result1, #167
0642c     9C 01 90 FD | 	jmp	#LR__0517
06430                 | LR__0465
06430     84 FA 05 F6 | 	mov	result1, #132
06434     94 01 90 FD | 	jmp	#LR__0517
06438                 | LR__0466
06438     86 FA 05 F6 | 	mov	result1, #134
0643c     8C 01 90 FD | 	jmp	#LR__0517
06440                 | LR__0467
06440     A2 FA 05 F6 | 	mov	result1, #162
06444     84 01 90 FD | 	jmp	#LR__0517
06448                 | LR__0468
06448     9F FA 05 F6 | 	mov	result1, #159
0644c     7C 01 90 FD | 	jmp	#LR__0517
06450                 | LR__0469
06450     C0 FA 05 F6 | 	mov	result1, #192
06454     74 01 90 FD | 	jmp	#LR__0517
06458                 | LR__0470
06458     82 FA 05 F6 | 	mov	result1, #130
0645c     6C 01 90 FD | 	jmp	#LR__0517
06460                 | LR__0471
06460     99 FA 05 F6 | 	mov	result1, #153
06464     64 01 90 FD | 	jmp	#LR__0517
06468                 | LR__0472
06468     C5 FA 05 F6 | 	mov	result1, #197
0646c     5C 01 90 FD | 	jmp	#LR__0517
06470                 | LR__0473
06470     C5 FA 05 F6 | 	mov	result1, #197
06474     54 01 90 FD | 	jmp	#LR__0517
06478                 | LR__0474
06478     9C FA 05 F6 | 	mov	result1, #156
0647c     4C 01 90 FD | 	jmp	#LR__0517
06480                 | LR__0475
06480     6F FA 05 F6 | 	mov	result1, #111
06484     44 01 90 FD | 	jmp	#LR__0517
06488                 | LR__0476
06488     6F FA 05 F6 | 	mov	result1, #111
0648c     3C 01 90 FD | 	jmp	#LR__0517
06490                 | LR__0477
06490     93 FA 05 F6 | 	mov	result1, #147
06494     34 01 90 FD | 	jmp	#LR__0517
06498                 | LR__0478
06498     94 FA 05 F6 | 	mov	result1, #148
0649c     2C 01 90 FD | 	jmp	#LR__0517
064a0                 | LR__0479
064a0     62 FA 05 F6 | 	mov	result1, #98
064a4     24 01 90 FD | 	jmp	#LR__0517
064a8                 | LR__0480
064a8     A3 FA 05 F6 | 	mov	result1, #163
064ac     1C 01 90 FD | 	jmp	#LR__0517
064b0                 | LR__0481
064b0     9D FA 05 F6 | 	mov	result1, #157
064b4     14 01 90 FD | 	jmp	#LR__0517
064b8                 | LR__0482
064b8     8A FA 05 F6 | 	mov	result1, #138
064bc     0C 01 90 FD | 	jmp	#LR__0517
064c0                 | LR__0483
064c0     A4 FA 05 F6 | 	mov	result1, #164
064c4     04 01 90 FD | 	jmp	#LR__0517
064c8                 | LR__0484
064c8     A8 FA 05 F6 | 	mov	result1, #168
064cc     FC 00 90 FD | 	jmp	#LR__0517
064d0                 | LR__0485
064d0     AD FA 05 F6 | 	mov	result1, #173
064d4     F4 00 90 FD | 	jmp	#LR__0517
064d8                 | LR__0486
064d8     9A FA 05 F6 | 	mov	result1, #154
064dc     EC 00 90 FD | 	jmp	#LR__0517
064e0                 | LR__0487
064e0     CF FA 05 F6 | 	mov	result1, #207
064e4     E4 00 90 FD | 	jmp	#LR__0517
064e8                 | LR__0488
064e8     CF FA 05 F6 | 	mov	result1, #207
064ec     DC 00 90 FD | 	jmp	#LR__0517
064f0                 | LR__0489
064f0     A6 FA 05 F6 | 	mov	result1, #166
064f4     D4 00 90 FD | 	jmp	#LR__0517
064f8                 | LR__0490
064f8     66 FA 05 F6 | 	mov	result1, #102
064fc     CC 00 90 FD | 	jmp	#LR__0517
06500                 | LR__0491
06500     67 FA 05 F6 | 	mov	result1, #103
06504     C4 00 90 FD | 	jmp	#LR__0517
06508                 | LR__0492
06508     64 FA 05 F6 | 	mov	result1, #100
0650c     BC 00 90 FD | 	jmp	#LR__0517
06510                 | LR__0493
06510     65 FA 05 F6 | 	mov	result1, #101
06514     B4 00 90 FD | 	jmp	#LR__0517
06518                 | LR__0494
06518     C8 FA 05 F6 | 	mov	result1, #200
0651c     AC 00 90 FD | 	jmp	#LR__0517
06520                 | LR__0495
06520     C9 FA 05 F6 | 	mov	result1, #201
06524     A4 00 90 FD | 	jmp	#LR__0517
06528                 | LR__0496
06528     CA FA 05 F6 | 	mov	result1, #202
0652c     9C 00 90 FD | 	jmp	#LR__0517
06530                 | LR__0497
06530     CC FA 05 F6 | 	mov	result1, #204
06534     94 00 90 FD | 	jmp	#LR__0517
06538                 | LR__0498
06538     CD FA 05 F6 | 	mov	result1, #205
0653c     8C 00 90 FD | 	jmp	#LR__0517
06540                 | LR__0499
06540     CE FA 05 F6 | 	mov	result1, #206
06544     84 00 90 FD | 	jmp	#LR__0517
06548                 | LR__0500
06548     CB FA 05 F6 | 	mov	result1, #203
0654c     7C 00 90 FD | 	jmp	#LR__0517
06550                 | LR__0501
06550     98 FA 05 F6 | 	mov	result1, #152
06554     74 00 90 FD | 	jmp	#LR__0517
06558                 | LR__0502
06558     7B FA 05 F6 | 	mov	result1, #123
0655c     6C 00 90 FD | 	jmp	#LR__0517
06560                 | LR__0503
06560     76 FA 05 F6 | 	mov	result1, #118
06564     64 00 90 FD | 	jmp	#LR__0517
06568                 | LR__0504
06568     A5 FA 05 F6 | 	mov	result1, #165
0656c     5C 00 90 FD | 	jmp	#LR__0517
06570                 | LR__0505
06570     7A FA 05 F6 | 	mov	result1, #122
06574     54 00 90 FD | 	jmp	#LR__0517
06578                 | LR__0506
06578     BF FA 05 F6 | 	mov	result1, #191
0657c     4C 00 90 FD | 	jmp	#LR__0517
06580                 | LR__0507
06580     54 FA 05 F6 | 	mov	result1, #84
06584     44 00 90 FD | 	jmp	#LR__0517
06588                 | LR__0508
06588     6B FA 05 F6 | 	mov	result1, #107
0658c     3C 00 90 FD | 	jmp	#LR__0517
06590                 | LR__0509
06590     87 FA 05 F6 | 	mov	result1, #135
06594     34 00 90 FD | 	jmp	#LR__0517
06598                 | LR__0510
06598     6A FA 05 F6 | 	mov	result1, #106
0659c     2C 00 90 FD | 	jmp	#LR__0517
065a0                 | LR__0511
065a0     6E FA 05 F6 | 	mov	result1, #110
065a4     24 00 90 FD | 	jmp	#LR__0517
065a8                 | LR__0512
065a8     A1 FA 05 F6 | 	mov	result1, #161
065ac     1C 00 90 FD | 	jmp	#LR__0517
065b0                 | LR__0513
065b0     83 FA 05 F6 | 	mov	result1, #131
065b4     14 00 90 FD | 	jmp	#LR__0517
065b8                 | LR__0514
065b8     A0 FA 05 F6 | 	mov	result1, #160
065bc     0C 00 90 FD | 	jmp	#LR__0517
065c0                 | LR__0515
065c0     9B FA 05 F6 | 	mov	result1, #155
065c4     04 00 90 FD | 	jmp	#LR__0517
065c8                 | LR__0516
065c8     00 FA 05 F6 | 	mov	result1, #0
065cc                 | LR__0517
065cc     A7 F0 03 F6 | 	mov	ptra, fp
065d0     B2 00 A0 FD | 	call	#popregs_
065d4                 | _isfunction_ret
065d4     2D 00 64 FD | 	ret
065d8                 | 
065d8                 | ' 
065d8                 | ' ' Check if the part is a name
065d8                 | ' 
065d8                 | ' function isname(s as string) as boolean
065d8                 | _isname
065d8     0D 4A 05 F6 | 	mov	COUNT_, #13
065dc     A8 00 A0 FD | 	call	#pushregs_
065e0     09 27 02 F6 | 	mov	local01, arg01
065e4     09 29 02 F6 | 	mov	local02, arg01
065e8     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
065ec                 | LR__0520
065ec     14 FB C9 FA | 	rdbyte	result1, local02 wz
065f0     01 28 06 51 |  if_ne	add	local02, #1
065f4     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
065f8                 | LR__0521
065f8     09 29 82 F1 | 	sub	local02, arg01
065fc     14 FB 01 F6 | 	mov	result1, local02
06600     FD 2A 0A F6 | 	mov	local03, result1 wz
06604     00 FA 05 A6 |  if_e	mov	result1, #0
06608     34 02 90 AD |  if_e	jmp	#LR__0533
0660c     13 13 02 F6 | 	mov	arg01, local01
06610     01 14 06 F6 | 	mov	arg02, #1
06614     01 16 06 F6 | 	mov	arg03, #1
06618     E8 24 B2 FD | 	call	#__system__Mid_S
0661c     FD 2C 02 F6 | 	mov	local04, result1
06620                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
06620     B5 01 00 FF 
06624     D1 14 06 F6 | 	mov	arg02, ##@LR__5738
06628     16 13 02 F6 | 	mov	arg01, local04
0662c     64 03 B2 FD | 	call	#__system___string_cmp
06630     00 FA 55 F2 | 	cmps	result1, #0 wc
06634     18 00 90 CD |  if_b	jmp	#LR__0522
06638     B5 01 00 FF 
0663c     D3 14 06 F6 | 	mov	arg02, ##@LR__5739
06640     16 13 02 F6 | 	mov	arg01, local04
06644     4C 03 B2 FD | 	call	#__system___string_cmp
06648     01 FA 55 F2 | 	cmps	result1, #1 wc
0664c     1C 00 90 CD |  if_b	jmp	#LR__0523
06650                 | LR__0522
06650     B5 01 00 FF 
06654     D5 14 06 F6 | 	mov	arg02, ##@LR__5740
06658     16 13 02 F6 | 	mov	arg01, local04
0665c     34 03 B2 FD | 	call	#__system___string_cmp
06660     00 FA 0D F2 | 	cmp	result1, #0 wz
06664     00 FA 05 56 |  if_ne	mov	result1, #0
06668     D4 01 90 5D |  if_ne	jmp	#LR__0533
0666c                 | LR__0523
0666c                 | ' if l>2 then 
0666c     03 2A 56 F2 | 	cmps	local03, #3 wc
06670     C8 01 90 CD |  if_b	jmp	#LR__0532
06674                 | '   for i=2 to l
06674     02 2E 06 F6 | 	mov	local05, #2
06678     15 31 02 F6 | 	mov	local06, local03
0667c     01 30 06 F1 | 	add	local06, #1
06680                 | LR__0524
06680     18 2F 52 F2 | 	cmps	local05, local06 wc
06684     B4 01 90 3D |  if_ae	jmp	#LR__0531
06688     13 13 02 F6 | 	mov	arg01, local01
0668c     17 15 02 F6 | 	mov	arg02, local05
06690     01 16 06 F6 | 	mov	arg03, #1
06694     6C 24 B2 FD | 	call	#__system__Mid_S
06698     FD 2C 02 F6 | 	mov	local04, result1
0669c                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
0669c     15 2F 52 F2 | 	cmps	local05, local03 wc
066a0     9C 00 90 3D |  if_ae	jmp	#LR__0527
066a4     B5 01 00 FF 
066a8     D7 14 06 F6 | 	mov	arg02, ##@LR__5741
066ac     16 13 02 F6 | 	mov	arg01, local04
066b0     E0 02 B2 FD | 	call	#__system___string_cmp
066b4     00 FA 55 F2 | 	cmps	result1, #0 wc
066b8     18 00 90 CD |  if_b	jmp	#LR__0525
066bc     B5 01 00 FF 
066c0     D9 14 06 F6 | 	mov	arg02, ##@LR__5742
066c4     16 13 02 F6 | 	mov	arg01, local04
066c8     C8 02 B2 FD | 	call	#__system___string_cmp
066cc     01 FA 55 F2 | 	cmps	result1, #1 wc
066d0     6C 00 90 CD |  if_b	jmp	#LR__0527
066d4                 | LR__0525
066d4     B5 01 00 FF 
066d8     DB 14 06 F6 | 	mov	arg02, ##@LR__5743
066dc     16 13 02 F6 | 	mov	arg01, local04
066e0     B0 02 B2 FD | 	call	#__system___string_cmp
066e4     00 FA 55 F2 | 	cmps	result1, #0 wc
066e8     18 00 90 CD |  if_b	jmp	#LR__0526
066ec     B5 01 00 FF 
066f0     DD 14 06 F6 | 	mov	arg02, ##@LR__5744
066f4     16 13 02 F6 | 	mov	arg01, local04
066f8     98 02 B2 FD | 	call	#__system___string_cmp
066fc     01 FA 55 F2 | 	cmps	result1, #1 wc
06700     3C 00 90 CD |  if_b	jmp	#LR__0527
06704                 | LR__0526
06704     B5 01 00 FF 
06708     DF 32 06 F6 | 	mov	local07, ##@LR__5745
0670c     16 13 02 F6 | 	mov	arg01, local04
06710     19 15 02 F6 | 	mov	arg02, local07
06714     7C 02 B2 FD | 	call	#__system___string_cmp
06718     00 FA 0D F2 | 	cmp	result1, #0 wz
0671c     20 00 90 AD |  if_e	jmp	#LR__0527
06720     B5 01 00 FF 
06724     E1 34 06 F6 | 	mov	local08, ##@LR__5746
06728     16 13 02 F6 | 	mov	arg01, local04
0672c     1A 15 02 F6 | 	mov	arg02, local08
06730     60 02 B2 FD | 	call	#__system___string_cmp
06734     FD 36 0A F6 | 	mov	local09, result1 wz
06738     00 FA 05 56 |  if_ne	mov	result1, #0
0673c     00 01 90 5D |  if_ne	jmp	#LR__0533
06740                 | LR__0527
06740                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06740     15 2F 0A F2 | 	cmp	local05, local03 wz
06744     EC 00 90 5D |  if_ne	jmp	#LR__0530
06748     B5 01 00 FF 
0674c     E3 38 06 F6 | 	mov	local10, ##@LR__5747
06750     16 13 02 F6 | 	mov	arg01, local04
06754     1C 15 02 F6 | 	mov	arg02, local10
06758     38 02 B2 FD | 	call	#__system___string_cmp
0675c     FD 3A 02 F6 | 	mov	local11, result1
06760     00 3A 56 F2 | 	cmps	local11, #0 wc
06764     1C 00 90 CD |  if_b	jmp	#LR__0528
06768     B5 01 00 FF 
0676c     E5 14 06 F6 | 	mov	arg02, ##@LR__5748
06770     16 13 02 F6 | 	mov	arg01, local04
06774     1C 02 B2 FD | 	call	#__system___string_cmp
06778     FD 38 02 F6 | 	mov	local10, result1
0677c     01 38 56 F2 | 	cmps	local10, #1 wc
06780     B0 00 90 CD |  if_b	jmp	#LR__0530
06784                 | LR__0528
06784     B5 01 00 FF 
06788     E7 14 06 F6 | 	mov	arg02, ##@LR__5749
0678c     16 13 02 F6 | 	mov	arg01, local04
06790     00 02 B2 FD | 	call	#__system___string_cmp
06794     00 FA 55 F2 | 	cmps	result1, #0 wc
06798     1C 00 90 CD |  if_b	jmp	#LR__0529
0679c     B5 01 00 FF 
067a0     E9 36 06 F6 | 	mov	local09, ##@LR__5750
067a4     16 13 02 F6 | 	mov	arg01, local04
067a8     1B 15 02 F6 | 	mov	arg02, local09
067ac     E4 01 B2 FD | 	call	#__system___string_cmp
067b0     01 FA 55 F2 | 	cmps	result1, #1 wc
067b4     7C 00 90 CD |  if_b	jmp	#LR__0530
067b8                 | LR__0529
067b8     B5 01 00 FF 
067bc     EB 36 06 F6 | 	mov	local09, ##@LR__5751
067c0     16 13 02 F6 | 	mov	arg01, local04
067c4     1B 15 02 F6 | 	mov	arg02, local09
067c8     C8 01 B2 FD | 	call	#__system___string_cmp
067cc     00 FA 4D F2 | 	cmps	result1, #0 wz
067d0     60 00 90 AD |  if_e	jmp	#LR__0530
067d4     B5 01 00 FF 
067d8     ED 34 06 F6 | 	mov	local08, ##@LR__5752
067dc     16 13 02 F6 | 	mov	arg01, local04
067e0     1A 15 02 F6 | 	mov	arg02, local08
067e4     AC 01 B2 FD | 	call	#__system___string_cmp
067e8     FD 36 0A F6 | 	mov	local09, result1 wz
067ec     44 00 90 AD |  if_e	jmp	#LR__0530
067f0     B5 01 00 FF 
067f4     EF 3C 06 F6 | 	mov	local12, ##@LR__5753
067f8     1E 35 02 F6 | 	mov	local08, local12
067fc     16 13 02 F6 | 	mov	arg01, local04
06800     1A 15 02 F6 | 	mov	arg02, local08
06804     8C 01 B2 FD | 	call	#__system___string_cmp
06808     FD 32 0A F6 | 	mov	local07, result1 wz
0680c     24 00 90 AD |  if_e	jmp	#LR__0530
06810     B5 01 00 FF 
06814     F1 3E 06 F6 | 	mov	local13, ##@LR__5754
06818     1F 3D 02 F6 | 	mov	local12, local13
0681c     16 13 02 F6 | 	mov	arg01, local04
06820     1E 15 02 F6 | 	mov	arg02, local12
06824     6C 01 B2 FD | 	call	#__system___string_cmp
06828     FD 34 0A F6 | 	mov	local08, result1 wz
0682c     00 FA 05 56 |  if_ne	mov	result1, #0
06830     0C 00 90 5D |  if_ne	jmp	#LR__0533
06834                 | LR__0530
06834     01 2E 06 F1 | 	add	local05, #1
06838     44 FE 9F FD | 	jmp	#LR__0524
0683c                 | LR__0531
0683c                 | LR__0532
0683c                 | ' return true
0683c     01 FA 65 F6 | 	neg	result1, #1
06840                 | LR__0533
06840     A7 F0 03 F6 | 	mov	ptra, fp
06844     B2 00 A0 FD | 	call	#popregs_
06848                 | _isname_ret
06848     2D 00 64 FD | 	ret
0684c                 | 
0684c                 | ' 
0684c                 | ' ' Check if the part is a number.  
0684c                 | ' 
0684c                 | ' function isnum(s as string) as boolean 
0684c                 | _isnum
0684c     13 4A 05 F6 | 	mov	COUNT_, #19
06850     A8 00 A0 FD | 	call	#pushregs_
06854     09 27 02 F6 | 	mov	local01, arg01
06858     00 28 06 F6 | 	mov	local02, #0
0685c     00 2A 06 F6 | 	mov	local03, #0
06860     13 13 02 F6 | 	mov	arg01, local01
06864     09 2D 02 F6 | 	mov	local04, arg01
06868     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
0686c                 | LR__0540
0686c     16 FB C9 FA | 	rdbyte	result1, local04 wz
06870     01 2C 06 51 |  if_ne	add	local04, #1
06874     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06878                 | LR__0541
06878     09 2D 82 F1 | 	sub	local04, arg01
0687c     16 FB 01 F6 | 	mov	result1, local04
06880     FD 2E 0A F6 | 	mov	local05, result1 wz
06884     00 FA 05 A6 |  if_e	mov	result1, #0
06888     A0 03 90 AD |  if_e	jmp	#LR__0556
0688c     13 13 02 F6 | 	mov	arg01, local01
06890     01 14 06 F6 | 	mov	arg02, #1
06894     01 16 06 F6 | 	mov	arg03, #1
06898     68 22 B2 FD | 	call	#__system__Mid_S
0689c     FD 30 02 F6 | 	mov	local06, result1
068a0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
068a0     B5 01 00 FF 
068a4     F3 14 06 F6 | 	mov	arg02, ##@LR__5755
068a8     18 13 02 F6 | 	mov	arg01, local06
068ac     E4 00 B2 FD | 	call	#__system___string_cmp
068b0     00 FA 55 F2 | 	cmps	result1, #0 wc
068b4     1C 00 90 CD |  if_b	jmp	#LR__0542
068b8     B5 01 00 FF 
068bc     F5 32 06 F6 | 	mov	local07, ##@LR__5756
068c0     18 13 02 F6 | 	mov	arg01, local06
068c4     19 15 02 F6 | 	mov	arg02, local07
068c8     C8 00 B2 FD | 	call	#__system___string_cmp
068cc     01 FA 55 F2 | 	cmps	result1, #1 wc
068d0     84 00 90 CD |  if_b	jmp	#LR__0543
068d4                 | LR__0542
068d4     B5 01 00 FF 
068d8     F7 34 06 F6 | 	mov	local08, ##@LR__5757
068dc     1A 33 02 F6 | 	mov	local07, local08
068e0     18 13 02 F6 | 	mov	arg01, local06
068e4     19 15 02 F6 | 	mov	arg02, local07
068e8     A8 00 B2 FD | 	call	#__system___string_cmp
068ec     00 FA 0D F2 | 	cmp	result1, #0 wz
068f0     64 00 90 AD |  if_e	jmp	#LR__0543
068f4     B5 01 00 FF 
068f8     F9 36 06 F6 | 	mov	local09, ##@LR__5758
068fc     1B 35 02 F6 | 	mov	local08, local09
06900     18 13 02 F6 | 	mov	arg01, local06
06904     1A 15 02 F6 | 	mov	arg02, local08
06908     88 00 B2 FD | 	call	#__system___string_cmp
0690c     FD 32 0A F6 | 	mov	local07, result1 wz
06910     44 00 90 AD |  if_e	jmp	#LR__0543
06914     B5 01 00 FF 
06918     FB 38 06 F6 | 	mov	local10, ##@LR__5759
0691c     1C 37 02 F6 | 	mov	local09, local10
06920     18 13 02 F6 | 	mov	arg01, local06
06924     1B 15 02 F6 | 	mov	arg02, local09
06928     68 00 B2 FD | 	call	#__system___string_cmp
0692c     FD 34 0A F6 | 	mov	local08, result1 wz
06930     24 00 90 AD |  if_e	jmp	#LR__0543
06934     B5 01 00 FF 
06938     FD 3A 06 F6 | 	mov	local11, ##@LR__5760
0693c     1D 39 02 F6 | 	mov	local10, local11
06940     18 13 02 F6 | 	mov	arg01, local06
06944     1C 15 02 F6 | 	mov	arg02, local10
06948     48 00 B2 FD | 	call	#__system___string_cmp
0694c     FD 36 0A F6 | 	mov	local09, result1 wz
06950     00 FA 05 56 |  if_ne	mov	result1, #0
06954     D4 02 90 5D |  if_ne	jmp	#LR__0556
06958                 | LR__0543
06958                 | ' if m$="." then ds=1
06958     B5 01 00 FF 
0695c     FF 14 06 F6 | 	mov	arg02, ##@LR__5761
06960     18 13 02 F6 | 	mov	arg01, local06
06964     2C 00 B2 FD | 	call	#__system___string_cmp
06968     00 FA 0D F2 | 	cmp	result1, #0 wz
0696c     01 28 06 A6 |  if_e	mov	local02, #1
06970                 | ' if m$="$" then hex=1 else hex=0
06970     B5 01 00 FF 
06974     01 15 06 F6 | 	mov	arg02, ##@LR__5762
06978     18 13 02 F6 | 	mov	arg01, local06
0697c     14 00 B2 FD | 	call	#__system___string_cmp
06980     00 FA 0D F2 | 	cmp	result1, #0 wz
06984     01 3C 06 A6 |  if_e	mov	local12, #1
06988     00 3C 06 56 |  if_ne	mov	local12, #0
0698c                 | ' if m$="%" then bin=1 else bin=0
0698c     B5 01 00 FF 
06990     03 15 06 F6 | 	mov	arg02, ##@LR__5763
06994     18 13 02 F6 | 	mov	arg01, local06
06998     F8 FF B1 FD | 	call	#__system___string_cmp
0699c     00 FA 0D F2 | 	cmp	result1, #0 wz
069a0     01 3E 06 A6 |  if_e	mov	local13, #1
069a4     00 3E 06 56 |  if_ne	mov	local13, #0
069a8                 | ' if l>1 then 
069a8     02 2E 56 F2 | 	cmps	local05, #2 wc
069ac     78 02 90 CD |  if_b	jmp	#LR__0555
069b0                 | '   for i=2 to l
069b0     02 40 06 F6 | 	mov	local14, #2
069b4     17 43 02 F6 | 	mov	local15, local05
069b8     01 42 06 F1 | 	add	local15, #1
069bc                 | LR__0544
069bc     21 41 52 F2 | 	cmps	local14, local15 wc
069c0     64 02 90 3D |  if_ae	jmp	#LR__0554
069c4     13 13 02 F6 | 	mov	arg01, local01
069c8     20 15 02 F6 | 	mov	arg02, local14
069cc     01 16 06 F6 | 	mov	arg03, #1
069d0     30 21 B2 FD | 	call	#__system__Mid_S
069d4     FD 30 02 F6 | 	mov	local06, result1
069d8     00 44 06 F6 | 	mov	local16, #0
069dc                 | '     m$=mid$(s,i,1) : b=false
069dc                 | '     if m$>="0" andalso m$<="9" then b=true  
069dc     B5 01 00 FF 
069e0     05 15 06 F6 | 	mov	arg02, ##@LR__5764
069e4     18 13 02 F6 | 	mov	arg01, local06
069e8     A8 FF B1 FD | 	call	#__system___string_cmp
069ec     00 FA 55 F2 | 	cmps	result1, #0 wc
069f0     1C 00 90 CD |  if_b	jmp	#LR__0545
069f4     B5 01 00 FF 
069f8     07 33 06 F6 | 	mov	local07, ##@LR__5765
069fc     18 13 02 F6 | 	mov	arg01, local06
06a00     19 15 02 F6 | 	mov	arg02, local07
06a04     8C FF B1 FD | 	call	#__system___string_cmp
06a08     01 FA 55 F2 | 	cmps	result1, #1 wc
06a0c     01 44 66 C6 |  if_b	neg	local16, #1
06a10                 | LR__0545
06a10                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06a10     B5 01 00 FF 
06a14     09 15 06 F6 | 	mov	arg02, ##@LR__5766
06a18     18 13 02 F6 | 	mov	arg01, local06
06a1c     74 FF B1 FD | 	call	#__system___string_cmp
06a20     00 FA 0D F2 | 	cmp	result1, #0 wz
06a24     7C 00 90 AD |  if_e	jmp	#LR__0546
06a28     B5 01 00 FF 
06a2c     0B 33 06 F6 | 	mov	local07, ##@LR__5767
06a30     18 13 02 F6 | 	mov	arg01, local06
06a34     19 15 02 F6 | 	mov	arg02, local07
06a38     58 FF B1 FD | 	call	#__system___string_cmp
06a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
06a40     60 00 90 AD |  if_e	jmp	#LR__0546
06a44     B5 01 00 FF 
06a48     0D 35 06 F6 | 	mov	local08, ##@LR__5768
06a4c     1A 33 02 F6 | 	mov	local07, local08
06a50     18 13 02 F6 | 	mov	arg01, local06
06a54     19 15 02 F6 | 	mov	arg02, local07
06a58     38 FF B1 FD | 	call	#__system___string_cmp
06a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
06a60     40 00 90 AD |  if_e	jmp	#LR__0546
06a64     B5 01 00 FF 
06a68     0F 37 06 F6 | 	mov	local09, ##@LR__5769
06a6c     1B 35 02 F6 | 	mov	local08, local09
06a70     18 13 02 F6 | 	mov	arg01, local06
06a74     1A 15 02 F6 | 	mov	arg02, local08
06a78     18 FF B1 FD | 	call	#__system___string_cmp
06a7c     FD 32 0A F6 | 	mov	local07, result1 wz
06a80     20 00 90 AD |  if_e	jmp	#LR__0546
06a84     B5 01 00 FF 
06a88     11 39 06 F6 | 	mov	local10, ##@LR__5770
06a8c     1C 37 02 F6 | 	mov	local09, local10
06a90     18 13 02 F6 | 	mov	arg01, local06
06a94     1B 15 02 F6 | 	mov	arg02, local09
06a98     F8 FE B1 FD | 	call	#__system___string_cmp
06a9c     FD 34 0A F6 | 	mov	local08, result1 wz
06aa0     04 00 90 5D |  if_ne	jmp	#LR__0547
06aa4                 | LR__0546
06aa4     01 44 66 F6 | 	neg	local16, #1
06aa8                 | LR__0547
06aa8                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06aa8     01 3C 0E F2 | 	cmp	local12, #1 wz
06aac     34 00 90 5D |  if_ne	jmp	#LR__0548
06ab0     B5 01 00 FF 
06ab4     13 15 06 F6 | 	mov	arg02, ##@LR__5771
06ab8     18 13 02 F6 | 	mov	arg01, local06
06abc     D4 FE B1 FD | 	call	#__system___string_cmp
06ac0     00 FA 55 F2 | 	cmps	result1, #0 wc
06ac4     1C 00 90 CD |  if_b	jmp	#LR__0548
06ac8     B5 01 00 FF 
06acc     15 33 06 F6 | 	mov	local07, ##@LR__5772
06ad0     18 13 02 F6 | 	mov	arg01, local06
06ad4     19 15 02 F6 | 	mov	arg02, local07
06ad8     B8 FE B1 FD | 	call	#__system___string_cmp
06adc     01 FA 55 F2 | 	cmps	result1, #1 wc
06ae0     01 44 66 C6 |  if_b	neg	local16, #1
06ae4                 | LR__0548
06ae4                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06ae4     01 3E 0E F2 | 	cmp	local13, #1 wz
06ae8     58 00 90 5D |  if_ne	jmp	#LR__0550
06aec     B5 01 00 FF 
06af0     17 15 06 F6 | 	mov	arg02, ##@LR__5773
06af4     18 13 02 F6 | 	mov	arg01, local06
06af8     98 FE B1 FD | 	call	#__system___string_cmp
06afc     00 FA 55 F2 | 	cmps	result1, #0 wc
06b00     1C 00 90 CD |  if_b	jmp	#LR__0549
06b04     B5 01 00 FF 
06b08     19 33 06 F6 | 	mov	local07, ##@LR__5774
06b0c     18 13 02 F6 | 	mov	arg01, local06
06b10     19 15 02 F6 | 	mov	arg02, local07
06b14     7C FE B1 FD | 	call	#__system___string_cmp
06b18     01 FA 55 F2 | 	cmps	result1, #1 wc
06b1c     24 00 90 CD |  if_b	jmp	#LR__0550
06b20                 | LR__0549
06b20     B5 01 00 FF 
06b24     1B 35 06 F6 | 	mov	local08, ##@LR__5775
06b28     1A 33 02 F6 | 	mov	local07, local08
06b2c     18 13 02 F6 | 	mov	arg01, local06
06b30     19 15 02 F6 | 	mov	arg02, local07
06b34     5C FE B1 FD | 	call	#__system___string_cmp
06b38     00 FA 0D F2 | 	cmp	result1, #0 wz
06b3c     00 FA 05 56 |  if_ne	mov	result1, #0
06b40     E8 00 90 5D |  if_ne	jmp	#LR__0556
06b44                 | LR__0550
06b44                 | '     if not b then return false
06b44     22 45 22 F6 | 	not	local16, local16
06b48     00 44 0E F2 | 	cmp	local16, #0 wz
06b4c     00 FA 05 56 |  if_ne	mov	result1, #0
06b50     D8 00 90 5D |  if_ne	jmp	#LR__0556
06b54                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06b54     B5 01 00 FF 
06b58     1D 15 06 F6 | 	mov	arg02, ##@LR__5776
06b5c     18 13 02 F6 | 	mov	arg01, local06
06b60     30 FE B1 FD | 	call	#__system___string_cmp
06b64     00 FA 0D F2 | 	cmp	result1, #0 wz
06b68     3C 00 90 5D |  if_ne	jmp	#LR__0551
06b6c     20 15 02 F6 | 	mov	arg02, local14
06b70     01 14 86 F1 | 	sub	arg02, #1
06b74     13 13 02 F6 | 	mov	arg01, local01
06b78     01 16 06 F6 | 	mov	arg03, #1
06b7c     84 1F B2 FD | 	call	#__system__Mid_S
06b80     FD 12 02 F6 | 	mov	arg01, result1
06b84     74 21 B2 FD | 	call	#__system__LCase_S
06b88     FD 12 02 F6 | 	mov	arg01, result1
06b8c     B5 01 00 FF 
06b90     1F 33 06 F6 | 	mov	local07, ##@LR__5777
06b94     19 15 02 F6 | 	mov	arg02, local07
06b98     F8 FD B1 FD | 	call	#__system___string_cmp
06b9c     00 FA 0D F2 | 	cmp	result1, #0 wz
06ba0     00 FA 05 56 |  if_ne	mov	result1, #0
06ba4     84 00 90 5D |  if_ne	jmp	#LR__0556
06ba8                 | LR__0551
06ba8                 | '     if m$="." then ds+=1: if ds>1 then return false
06ba8     B5 01 00 FF 
06bac     21 15 06 F6 | 	mov	arg02, ##@LR__5778
06bb0     18 13 02 F6 | 	mov	arg01, local06
06bb4     DC FD B1 FD | 	call	#__system___string_cmp
06bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
06bbc     01 28 06 A1 |  if_e	add	local02, #1
06bc0     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06bc4     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06bc8     60 00 90 2D |  if_nc_and_z	jmp	#LR__0556
06bcc                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06bcc     B5 01 00 FF 
06bd0     23 47 06 F6 | 	mov	local17, ##@LR__5779
06bd4     23 49 02 F6 | 	mov	local18, local17
06bd8     18 13 02 F6 | 	mov	arg01, local06
06bdc     24 15 02 F6 | 	mov	arg02, local18
06be0     B0 FD B1 FD | 	call	#__system___string_cmp
06be4     FD 4A 0A F6 | 	mov	local19, result1 wz
06be8     20 00 90 AD |  if_e	jmp	#LR__0552
06bec     B5 01 00 FF 
06bf0     25 33 06 F6 | 	mov	local07, ##@LR__5780
06bf4     19 47 02 F6 | 	mov	local17, local07
06bf8     18 13 02 F6 | 	mov	arg01, local06
06bfc     23 15 02 F6 | 	mov	arg02, local17
06c00     90 FD B1 FD | 	call	#__system___string_cmp
06c04     FD 48 0A F6 | 	mov	local18, result1 wz
06c08     14 00 90 5D |  if_ne	jmp	#LR__0553
06c0c                 | LR__0552
06c0c     01 2A 06 F1 | 	add	local03, #1
06c10     00 3C 0E F2 | 	cmp	local12, #0 wz
06c14     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06c18     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06c1c     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0556
06c20                 | LR__0553
06c20     01 40 06 F1 | 	add	local14, #1
06c24     94 FD 9F FD | 	jmp	#LR__0544
06c28                 | LR__0554
06c28                 | LR__0555
06c28                 | ' return true
06c28     01 FA 65 F6 | 	neg	result1, #1
06c2c                 | LR__0556
06c2c     A7 F0 03 F6 | 	mov	ptra, fp
06c30     B2 00 A0 FD | 	call	#popregs_
06c34                 | _isnum_ret
06c34     2D 00 64 FD | 	ret
06c38                 | 
06c38                 | '   
06c38                 | ' ' Check if the part is an integer number.    
06c38                 | '   
06c38                 | ' function isint(s as string) as boolean
06c38                 | _isint
06c38     0E 4A 05 F6 | 	mov	COUNT_, #14
06c3c     A8 00 A0 FD | 	call	#pushregs_
06c40     09 27 02 F6 | 	mov	local01, arg01
06c44     09 29 02 F6 | 	mov	local02, arg01
06c48     97 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
06c4c                 | LR__0560
06c4c     14 FB C9 FA | 	rdbyte	result1, local02 wz
06c50     01 28 06 51 |  if_ne	add	local02, #1
06c54     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
06c58                 | LR__0561
06c58     09 29 82 F1 | 	sub	local02, arg01
06c5c     14 FB 01 F6 | 	mov	result1, local02
06c60     FD 2A 0A F6 | 	mov	local03, result1 wz
06c64     00 FA 05 A6 |  if_e	mov	result1, #0
06c68     64 02 90 AD |  if_e	jmp	#LR__0574
06c6c     13 13 02 F6 | 	mov	arg01, local01
06c70     01 14 06 F6 | 	mov	arg02, #1
06c74     01 16 06 F6 | 	mov	arg03, #1
06c78     88 1E B2 FD | 	call	#__system__Mid_S
06c7c     FD 2C 02 F6 | 	mov	local04, result1
06c80                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06c80     B5 01 00 FF 
06c84     27 15 06 F6 | 	mov	arg02, ##@LR__5781
06c88     16 13 02 F6 | 	mov	arg01, local04
06c8c     04 FD B1 FD | 	call	#__system___string_cmp
06c90     00 FA 55 F2 | 	cmps	result1, #0 wc
06c94     1C 00 90 CD |  if_b	jmp	#LR__0562
06c98     B5 01 00 FF 
06c9c     29 2F 06 F6 | 	mov	local05, ##@LR__5782
06ca0     16 13 02 F6 | 	mov	arg01, local04
06ca4     17 15 02 F6 | 	mov	arg02, local05
06ca8     E8 FC B1 FD | 	call	#__system___string_cmp
06cac     01 FA 55 F2 | 	cmps	result1, #1 wc
06cb0     64 00 90 CD |  if_b	jmp	#LR__0563
06cb4                 | LR__0562
06cb4     B5 01 00 FF 
06cb8     2B 31 06 F6 | 	mov	local06, ##@LR__5783
06cbc     18 2F 02 F6 | 	mov	local05, local06
06cc0     16 13 02 F6 | 	mov	arg01, local04
06cc4     17 15 02 F6 | 	mov	arg02, local05
06cc8     C8 FC B1 FD | 	call	#__system___string_cmp
06ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
06cd0     44 00 90 AD |  if_e	jmp	#LR__0563
06cd4     B5 01 00 FF 
06cd8     2D 33 06 F6 | 	mov	local07, ##@LR__5784
06cdc     19 31 02 F6 | 	mov	local06, local07
06ce0     16 13 02 F6 | 	mov	arg01, local04
06ce4     18 15 02 F6 | 	mov	arg02, local06
06ce8     A8 FC B1 FD | 	call	#__system___string_cmp
06cec     FD 2E 0A F6 | 	mov	local05, result1 wz
06cf0     24 00 90 AD |  if_e	jmp	#LR__0563
06cf4     B5 01 00 FF 
06cf8     2F 35 06 F6 | 	mov	local08, ##@LR__5785
06cfc     1A 33 02 F6 | 	mov	local07, local08
06d00     16 13 02 F6 | 	mov	arg01, local04
06d04     19 15 02 F6 | 	mov	arg02, local07
06d08     88 FC B1 FD | 	call	#__system___string_cmp
06d0c     FD 30 0A F6 | 	mov	local06, result1 wz
06d10     00 FA 05 56 |  if_ne	mov	result1, #0
06d14     B8 01 90 5D |  if_ne	jmp	#LR__0574
06d18                 | LR__0563
06d18                 | ' if m$="$" then hex=1 else hex=0
06d18     B5 01 00 FF 
06d1c     31 15 06 F6 | 	mov	arg02, ##@LR__5786
06d20     16 13 02 F6 | 	mov	arg01, local04
06d24     6C FC B1 FD | 	call	#__system___string_cmp
06d28     00 FA 0D F2 | 	cmp	result1, #0 wz
06d2c     01 36 06 A6 |  if_e	mov	local09, #1
06d30     00 36 06 56 |  if_ne	mov	local09, #0
06d34                 | ' if m$="%" then bin=1 else bin=0
06d34     B5 01 00 FF 
06d38     33 15 06 F6 | 	mov	arg02, ##@LR__5787
06d3c     16 13 02 F6 | 	mov	arg01, local04
06d40     50 FC B1 FD | 	call	#__system___string_cmp
06d44     00 FA 0D F2 | 	cmp	result1, #0 wz
06d48     01 38 06 A6 |  if_e	mov	local10, #1
06d4c     00 38 06 56 |  if_ne	mov	local10, #0
06d50                 | ' if l>1 then 
06d50     02 2A 56 F2 | 	cmps	local03, #2 wc
06d54     74 01 90 CD |  if_b	jmp	#LR__0573
06d58                 | '   for i=2 to l
06d58     02 3A 06 F6 | 	mov	local11, #2
06d5c     15 3D 02 F6 | 	mov	local12, local03
06d60     01 3C 06 F1 | 	add	local12, #1
06d64                 | LR__0564
06d64     1E 3B 52 F2 | 	cmps	local11, local12 wc
06d68     60 01 90 3D |  if_ae	jmp	#LR__0572
06d6c     13 13 02 F6 | 	mov	arg01, local01
06d70     1D 15 02 F6 | 	mov	arg02, local11
06d74     01 16 06 F6 | 	mov	arg03, #1
06d78     88 1D B2 FD | 	call	#__system__Mid_S
06d7c     FD 2C 02 F6 | 	mov	local04, result1
06d80                 | '     m$=mid$(s,i,1) 
06d80                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06d80     00 36 0E F2 | 	cmp	local09, #0 wz
06d84     50 00 90 5D |  if_ne	jmp	#LR__0566
06d88     B5 01 00 FF 
06d8c     35 15 06 F6 | 	mov	arg02, ##@LR__5788
06d90     16 13 02 F6 | 	mov	arg01, local04
06d94     FC FB B1 FD | 	call	#__system___string_cmp
06d98     00 FA 55 F2 | 	cmps	result1, #0 wc
06d9c     18 00 90 CD |  if_b	jmp	#LR__0565
06da0     B5 01 00 FF 
06da4     37 15 06 F6 | 	mov	arg02, ##@LR__5789
06da8     16 13 02 F6 | 	mov	arg01, local04
06dac     E4 FB B1 FD | 	call	#__system___string_cmp
06db0     01 FA 55 F2 | 	cmps	result1, #1 wc
06db4     20 00 90 CD |  if_b	jmp	#LR__0566
06db8                 | LR__0565
06db8     B5 01 00 FF 
06dbc     39 31 06 F6 | 	mov	local06, ##@LR__5790
06dc0     16 13 02 F6 | 	mov	arg01, local04
06dc4     18 15 02 F6 | 	mov	arg02, local06
06dc8     C8 FB B1 FD | 	call	#__system___string_cmp
06dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
06dd0     00 FA 05 56 |  if_ne	mov	result1, #0
06dd4     F8 00 90 5D |  if_ne	jmp	#LR__0574
06dd8                 | LR__0566
06dd8                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06dd8     01 36 0E F2 | 	cmp	local09, #1 wz
06ddc     90 00 90 5D |  if_ne	jmp	#LR__0569
06de0     B5 01 00 FF 
06de4     3B 15 06 F6 | 	mov	arg02, ##@LR__5791
06de8     16 13 02 F6 | 	mov	arg01, local04
06dec     A4 FB B1 FD | 	call	#__system___string_cmp
06df0     00 FA 55 F2 | 	cmps	result1, #0 wc
06df4     1C 00 90 CD |  if_b	jmp	#LR__0567
06df8     B5 01 00 FF 
06dfc     3D 15 06 F6 | 	mov	arg02, ##@LR__5792
06e00     16 13 02 F6 | 	mov	arg01, local04
06e04     8C FB B1 FD | 	call	#__system___string_cmp
06e08     FD 3E 02 F6 | 	mov	local13, result1
06e0c     01 3E 56 F2 | 	cmps	local13, #1 wc
06e10     5C 00 90 CD |  if_b	jmp	#LR__0569
06e14                 | LR__0567
06e14     B5 01 00 FF 
06e18     3F 2F 06 F6 | 	mov	local05, ##@LR__5793
06e1c     16 13 02 F6 | 	mov	arg01, local04
06e20     17 15 02 F6 | 	mov	arg02, local05
06e24     6C FB B1 FD | 	call	#__system___string_cmp
06e28     FD 40 02 F6 | 	mov	local14, result1
06e2c     00 40 56 F2 | 	cmps	local14, #0 wc
06e30     1C 00 90 CD |  if_b	jmp	#LR__0568
06e34     B5 01 00 FF 
06e38     41 33 06 F6 | 	mov	local07, ##@LR__5794
06e3c     16 13 02 F6 | 	mov	arg01, local04
06e40     19 15 02 F6 | 	mov	arg02, local07
06e44     4C FB B1 FD | 	call	#__system___string_cmp
06e48     01 FA 55 F2 | 	cmps	result1, #1 wc
06e4c     20 00 90 CD |  if_b	jmp	#LR__0569
06e50                 | LR__0568
06e50     B5 01 00 FF 
06e54     43 35 06 F6 | 	mov	local08, ##@LR__5795
06e58     16 13 02 F6 | 	mov	arg01, local04
06e5c     1A 15 02 F6 | 	mov	arg02, local08
06e60     30 FB B1 FD | 	call	#__system___string_cmp
06e64     00 FA 0D F2 | 	cmp	result1, #0 wz
06e68     00 FA 05 56 |  if_ne	mov	result1, #0
06e6c     60 00 90 5D |  if_ne	jmp	#LR__0574
06e70                 | LR__0569
06e70                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
06e70     01 38 0E F2 | 	cmp	local10, #1 wz
06e74     4C 00 90 5D |  if_ne	jmp	#LR__0571
06e78     B5 01 00 FF 
06e7c     45 15 06 F6 | 	mov	arg02, ##@LR__5796
06e80     16 13 02 F6 | 	mov	arg01, local04
06e84     0C FB B1 FD | 	call	#__system___string_cmp
06e88     00 FA 55 F2 | 	cmps	result1, #0 wc
06e8c     18 00 90 CD |  if_b	jmp	#LR__0570
06e90     B5 01 00 FF 
06e94     47 15 06 F6 | 	mov	arg02, ##@LR__5797
06e98     16 13 02 F6 | 	mov	arg01, local04
06e9c     F4 FA B1 FD | 	call	#__system___string_cmp
06ea0     01 FA 55 F2 | 	cmps	result1, #1 wc
06ea4     1C 00 90 CD |  if_b	jmp	#LR__0571
06ea8                 | LR__0570
06ea8     B5 01 00 FF 
06eac     49 15 06 F6 | 	mov	arg02, ##@LR__5798
06eb0     16 13 02 F6 | 	mov	arg01, local04
06eb4     DC FA B1 FD | 	call	#__system___string_cmp
06eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
06ebc     00 FA 05 56 |  if_ne	mov	result1, #0
06ec0     0C 00 90 5D |  if_ne	jmp	#LR__0574
06ec4                 | LR__0571
06ec4     01 3A 06 F1 | 	add	local11, #1
06ec8     98 FE 9F FD | 	jmp	#LR__0564
06ecc                 | LR__0572
06ecc                 | LR__0573
06ecc                 | ' return true
06ecc     01 FA 65 F6 | 	neg	result1, #1
06ed0                 | LR__0574
06ed0     A7 F0 03 F6 | 	mov	ptra, fp
06ed4     B2 00 A0 FD | 	call	#popregs_
06ed8                 | _isint_ret
06ed8     2D 00 64 FD | 	ret
06edc                 | 
06edc                 | ' 
06edc                 | ' ' Check if the part is a positive decimal number.  
06edc                 | ' 
06edc                 | ' function isdec(s as string) as boolean
06edc                 | _isdec
06edc     05 4A 05 F6 | 	mov	COUNT_, #5
06ee0     A8 00 A0 FD | 	call	#pushregs_
06ee4     09 27 02 F6 | 	mov	local01, arg01
06ee8     09 29 02 F6 | 	mov	local02, arg01
06eec     97 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06ef0                 | LR__0580
06ef0     14 FB C9 FA | 	rdbyte	result1, local02 wz
06ef4     01 28 06 51 |  if_ne	add	local02, #1
06ef8     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06efc                 | LR__0581
06efc     09 29 82 F1 | 	sub	local02, arg01
06f00     14 FB 01 F6 | 	mov	result1, local02
06f04     FD 28 0A F6 | 	mov	local02, result1 wz
06f08     00 FA 05 A6 |  if_e	mov	result1, #0
06f0c     80 00 90 AD |  if_e	jmp	#LR__0586
06f10                 | ' for i=1 to l
06f10     01 2A 06 F6 | 	mov	local03, #1
06f14     14 2D 02 F6 | 	mov	local04, local02
06f18     01 2C 06 F1 | 	add	local04, #1
06f1c                 | LR__0582
06f1c     16 2B 52 F2 | 	cmps	local03, local04 wc
06f20     68 00 90 3D |  if_ae	jmp	#LR__0585
06f24     13 13 02 F6 | 	mov	arg01, local01
06f28     15 15 02 F6 | 	mov	arg02, local03
06f2c     01 16 06 F6 | 	mov	arg03, #1
06f30     D0 1B B2 FD | 	call	#__system__Mid_S
06f34     FD 2E 02 F6 | 	mov	local05, result1
06f38                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06f38     B5 01 00 FF 
06f3c     4B 15 06 F6 | 	mov	arg02, ##@LR__5799
06f40     17 13 02 F6 | 	mov	arg01, local05
06f44     4C FA B1 FD | 	call	#__system___string_cmp
06f48     00 FA 55 F2 | 	cmps	result1, #0 wc
06f4c     18 00 90 CD |  if_b	jmp	#LR__0583
06f50     B5 01 00 FF 
06f54     4D 15 06 F6 | 	mov	arg02, ##@LR__5800
06f58     17 13 02 F6 | 	mov	arg01, local05
06f5c     34 FA B1 FD | 	call	#__system___string_cmp
06f60     01 FA 55 F2 | 	cmps	result1, #1 wc
06f64     1C 00 90 CD |  if_b	jmp	#LR__0584
06f68                 | LR__0583
06f68     B5 01 00 FF 
06f6c     4F 15 06 F6 | 	mov	arg02, ##@LR__5801
06f70     17 13 02 F6 | 	mov	arg01, local05
06f74     1C FA B1 FD | 	call	#__system___string_cmp
06f78     00 FA 0D F2 | 	cmp	result1, #0 wz
06f7c     00 FA 05 56 |  if_ne	mov	result1, #0
06f80     0C 00 90 5D |  if_ne	jmp	#LR__0586
06f84                 | LR__0584
06f84     01 2A 06 F1 | 	add	local03, #1
06f88     90 FF 9F FD | 	jmp	#LR__0582
06f8c                 | LR__0585
06f8c                 | ' return true
06f8c     01 FA 65 F6 | 	neg	result1, #1
06f90                 | LR__0586
06f90     A7 F0 03 F6 | 	mov	ptra, fp
06f94     B2 00 A0 FD | 	call	#popregs_
06f98                 | _isdec_ret
06f98     2D 00 64 FD | 	ret
06f9c                 | 
06f9c                 | ' 
06f9c                 | ' ' Check if the part is a string.  
06f9c                 | ' 
06f9c                 | ' function isstring(s as string) as boolean
06f9c                 | _isstring
06f9c     01 4A 05 F6 | 	mov	COUNT_, #1
06fa0     A8 00 A0 FD | 	call	#pushregs_
06fa4                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
06fa4     09 27 02 F6 | 	mov	local01, arg01
06fa8     01 14 06 F6 | 	mov	arg02, #1
06fac     3C 1A B2 FD | 	call	#__system__Left_S
06fb0     FD 12 02 F6 | 	mov	arg01, result1
06fb4     B5 01 00 FF 
06fb8     51 15 06 F6 | 	mov	arg02, ##@LR__5802
06fbc     D4 F9 B1 FD | 	call	#__system___string_cmp
06fc0     00 FA 4D F2 | 	cmps	result1, #0 wz
06fc4     28 00 90 5D |  if_ne	jmp	#LR__0590
06fc8     13 13 02 F6 | 	mov	arg01, local01
06fcc     01 14 06 F6 | 	mov	arg02, #1
06fd0     A0 1A B2 FD | 	call	#__system__Right_S
06fd4     FD 12 02 F6 | 	mov	arg01, result1
06fd8     B5 01 00 FF 
06fdc     53 15 06 F6 | 	mov	arg02, ##@LR__5803
06fe0     B0 F9 B1 FD | 	call	#__system___string_cmp
06fe4     00 FA 4D F2 | 	cmps	result1, #0 wz
06fe8     01 FA 65 A6 |  if_e	neg	result1, #1
06fec     04 00 90 AD |  if_e	jmp	#LR__0591
06ff0                 | LR__0590
06ff0     00 FA 05 F6 | 	mov	result1, #0
06ff4                 | LR__0591
06ff4     A7 F0 03 F6 | 	mov	ptra, fp
06ff8     B2 00 A0 FD | 	call	#popregs_
06ffc                 | _isstring_ret
06ffc     2D 00 64 FD | 	ret
07000                 | 
07000                 | ' 
07000                 | ' ' getnoteval. Returns the frequency of note token
07000                 | ' 
07000                 | ' function getnoteval(token) as single
07000                 | _getnoteval
07000     02 4A 05 F6 | 	mov	COUNT_, #2
07004     A8 00 A0 FD | 	call	#pushregs_
07008     01 00 00 FF 
0700c     00 13 86 F1 | 	sub	arg01, ##768
07010     09 15 52 F6 | 	abs	arg02, arg01 wc
07014     0C 14 16 FD | 	qdiv	arg02, #12
07018     14 00 00 FF 
0701c     D8 E4 05 F1 | 	add	objptr, ##10456
07020     19 14 62 FD | 	getqy	arg02
07024     0A 15 82 F6 | 	negc	arg02, arg02
07028     02 14 66 F0 | 	shl	arg02, #2
0702c     F2 14 02 F1 | 	add	arg02, objptr
07030     0A 27 02 FB | 	rdlong	local01, arg02
07034     09 15 52 F6 | 	abs	arg02, arg01 wc
07038     0C 14 16 FD | 	qdiv	arg02, #12
0703c     14 00 00 FF 
07040     D8 E4 85 F1 | 	sub	objptr, ##10456
07044     01 12 06 F6 | 	mov	arg01, #1
07048                 | ' noteexp=1+(note/12) 
07048                 | ' return (2.0^noteexp)*notebase
07048     18 14 62 FD | 	getqx	arg02
0704c     0A 13 82 F3 | 	sumc	arg01, arg02
07050     09 13 52 F6 | 	abs	arg01, arg01 wc
07054     1F 28 C6 C9 |  if_b	decod	local02, #31
07058     00 28 06 36 |  if_ae	mov	local02, #0
0705c     84 23 B2 FD | 	call	#__system___float_fromuns
07060     14 FB 61 F5 | 	xor	result1, local02
07064     FD 14 02 F6 | 	mov	arg02, result1
07068     1E 12 C6 F9 | 	decod	arg01, #30
0706c     80 36 B2 FD | 	call	#__system____builtin_powf
07070     FD 12 02 F6 | 	mov	arg01, result1
07074     13 15 02 F6 | 	mov	arg02, local01
07078     6C 27 B2 FD | 	call	#__system___float_mul
0707c     A7 F0 03 F6 | 	mov	ptra, fp
07080     B2 00 A0 FD | 	call	#popregs_
07084                 | _getnoteval_ret
07084     2D 00 64 FD | 	ret
07088                 | 
07088                 | ' 
07088                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07088                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
07088                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07088                 | ' 
07088                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07088                 | ' '
07088                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
07088                 | ' '
07088                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
07088                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
07088                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
07088                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
07088                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
07088                 | ' ' 
07088                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07088                 | ' 
07088                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07088                 | ' ' Helper functions to manage program lines
07088                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07088                 | ' 
07088                 | ' '----- delete a line from a program
07088                 | ' 
07088                 | ' function deleteline(aline as ulong) as integer
07088                 | _deleteline
07088     02 4A 05 F6 | 	mov	COUNT_, #2
0708c     A8 00 A0 FD | 	call	#pushregs_
07090     2C F0 07 F1 | 	add	ptra, #44
07094     04 4E 05 F1 | 	add	fp, #4
07098     A7 12 62 FC | 	wrlong	arg01, fp
0709c     4A 00 00 FF 
070a0     88 E4 05 F1 | 	add	objptr, ##38024
070a4     F2 26 02 FB | 	rdlong	local01, objptr
070a8     0C 4E 05 F1 | 	add	fp, #12
070ac     A7 26 62 FC | 	wrlong	local01, fp
070b0     10 4E 85 F1 | 	sub	fp, #16
070b4                 | ' 
070b4                 | ' searchptr=programstart
070b4                 | ' do
070b4     3E 00 00 FF 
070b8     BC E5 85 F1 | 	sub	objptr, ##32188
070bc                 | LR__0600
070bc     14 4E 05 F1 | 	add	fp, #20
070c0     A7 12 02 F6 | 	mov	arg01, fp
070c4     04 4E 85 F1 | 	sub	fp, #4
070c8     A7 14 02 FB | 	rdlong	arg02, fp
070cc     10 4E 85 F1 | 	sub	fp, #16
070d0     18 16 06 F6 | 	mov	arg03, #24
070d4     0C EC B1 FD | 	call	#_psram_spin2_read1
070d8     10 4E 05 F1 | 	add	fp, #16
070dc     A7 26 02 FB | 	rdlong	local01, fp
070e0     08 4E 85 F1 | 	sub	fp, #8
070e4     A7 26 62 FC | 	wrlong	local01, fp
070e8     20 4E 05 F1 | 	add	fp, #32
070ec     A7 26 02 FB | 	rdlong	local01, fp
070f0     18 4E 85 F1 | 	sub	fp, #24
070f4     A7 26 62 FC | 	wrlong	local01, fp
070f8     04 4E 05 F1 | 	add	fp, #4
070fc     A7 26 02 FB | 	rdlong	local01, fp
07100     10 4E 85 F1 | 	sub	fp, #16
07104     A7 16 02 FB | 	rdlong	arg03, fp
07108     04 4E 85 F1 | 	sub	fp, #4
0710c     0B 27 12 F2 | 	cmp	local01, arg03 wc
07110     28 4E 05 C1 |  if_b	add	fp, #40
07114     A7 28 02 CB |  if_b	rdlong	local02, fp
07118     28 4E 85 C1 |  if_b	sub	fp, #40
0711c     FF FF 3F CF 
07120     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07124     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0600
07128     0B 00 00 FF 
0712c     CC E4 85 F1 | 	sub	objptr, ##5836
07130                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
07130     14 4E 05 F1 | 	add	fp, #20
07134     A7 26 02 FB | 	rdlong	local01, fp
07138     10 4E 85 F1 | 	sub	fp, #16
0713c     A7 28 02 FB | 	rdlong	local02, fp
07140     04 4E 85 F1 | 	sub	fp, #4
07144     14 27 0A F2 | 	cmp	local01, local02 wz
07148     01 FA 65 56 |  if_ne	neg	result1, #1
0714c     34 02 90 5D |  if_ne	jmp	#LR__0605
07150     08 4E 05 F1 | 	add	fp, #8
07154     A7 12 02 FB | 	rdlong	arg01, fp
07158     08 4E 85 F1 | 	sub	fp, #8
0715c     01 14 66 F6 | 	neg	arg02, #1
07160     B8 BF B1 FD | 	call	#_pslpoke
07164                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
07164                 | ' 
07164                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
07164     28 4E 05 F1 | 	add	fp, #40
07168     A7 26 02 FB | 	rdlong	local01, fp
0716c     28 4E 85 F1 | 	sub	fp, #40
07170     FF FF 3F FF 
07174     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07178     24 4E 05 A1 |  if_e	add	fp, #36
0717c     A7 28 02 AB |  if_e	rdlong	local02, fp
07180     24 4E 85 A1 |  if_e	sub	fp, #36
07184     FF FF 7F AF 
07188     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
0718c     88 00 90 5D |  if_ne	jmp	#LR__0601
07190     4A 00 00 FF 
07194     88 E4 05 F1 | 	add	objptr, ##38024
07198     00 04 80 FF 
0719c     F2 00 68 FC | 	wrlong	##524288, objptr
071a0     07 00 00 FF 
071a4     2C E4 85 F1 | 	sub	objptr, ##3628
071a8     00 04 80 FF 
071ac     F2 00 68 FC | 	wrlong	##524288, objptr
071b0     07 00 00 FF 
071b4     30 E4 05 F1 | 	add	objptr, ##3632
071b8     F2 00 68 FC | 	wrlong	#0, objptr
071bc     04 E4 05 F1 | 	add	objptr, #4
071c0     FF FF FF FF 
071c4     F2 FE 6B FC | 	wrlong	##-1, objptr
071c8     4A 00 00 FF 
071cc     90 E4 85 F1 | 	sub	objptr, ##38032
071d0     00 12 06 F6 | 	mov	arg01, #0
071d4     01 14 66 F6 | 	neg	arg02, #1
071d8     40 BF B1 FD | 	call	#_pslpoke
071dc     10 12 06 F6 | 	mov	arg01, #16
071e0     01 14 66 F6 | 	neg	arg02, #1
071e4     34 BF B1 FD | 	call	#_pslpoke
071e8     14 12 06 F6 | 	mov	arg01, #20
071ec     1E 14 CE F9 | 	bmask	arg02, #30
071f0     28 BF B1 FD | 	call	#_pslpoke
071f4     50 00 00 FF 
071f8     B8 E4 05 F1 | 	add	objptr, ##41144
071fc     00 04 80 FF 
07200     F2 00 68 FC | 	wrlong	##524288, objptr
07204     04 E4 05 F1 | 	add	objptr, #4
07208     00 04 80 FF 
0720c     F2 00 68 FC | 	wrlong	##524288, objptr
07210     50 00 00 FF 
07214     BC E4 85 F1 | 	sub	objptr, ##41148
07218                 | LR__0601
07218                 | ' 
07218                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
07218     28 4E 05 F1 | 	add	fp, #40
0721c     A7 26 02 FB | 	rdlong	local01, fp
07220     28 4E 85 F1 | 	sub	fp, #40
07224     FF FF 3F FF 
07228     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
0722c     74 00 90 5D |  if_ne	jmp	#LR__0602
07230     24 4E 05 F1 | 	add	fp, #36
07234     A7 28 02 FB | 	rdlong	local02, fp
07238     24 4E 85 F1 | 	sub	fp, #36
0723c     FF FF 7F FF 
07240     FF 29 0E F2 | 	cmp	local02, ##-1 wz
07244     5C 00 90 AD |  if_e	jmp	#LR__0602
07248     24 4E 05 F1 | 	add	fp, #36
0724c     A7 12 02 FB | 	rdlong	arg01, fp
07250     24 4E 85 F1 | 	sub	fp, #36
07254     14 12 06 F1 | 	add	arg01, #20
07258     1E 14 CE F9 | 	bmask	arg02, #30
0725c     BC BE B1 FD | 	call	#_pslpoke
07260     24 4E 05 F1 | 	add	fp, #36
07264     A7 26 02 FB | 	rdlong	local01, fp
07268     4A 00 00 FF 
0726c     90 E4 05 F1 | 	add	objptr, ##38032
07270     F2 26 62 FC | 	wrlong	local01, objptr
07274     4A 00 00 FF 
07278     90 E4 85 F1 | 	sub	objptr, ##38032
0727c     A7 12 02 FB | 	rdlong	arg01, fp
07280     24 4E 85 F1 | 	sub	fp, #36
07284     C4 BF B1 FD | 	call	#_pslpeek
07288     4A 00 00 FF 
0728c     8C E4 05 F1 | 	add	objptr, ##38028
07290     F2 FA 61 FC | 	wrlong	result1, objptr
07294     4A 00 00 FF 
07298     8C E4 85 F1 | 	sub	objptr, ##38028
0729c                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
0729c                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
0729c                 | '   lastline=pslpeek(header(4))
0729c                 | '   return 0
0729c     00 FA 05 F6 | 	mov	result1, #0
072a0     E0 00 90 FD | 	jmp	#LR__0605
072a4                 | LR__0602
072a4                 | ' 
072a4                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
072a4     28 4E 05 F1 | 	add	fp, #40
072a8     A7 26 02 FB | 	rdlong	local01, fp
072ac     28 4E 85 F1 | 	sub	fp, #40
072b0     FF FF 3F FF 
072b4     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
072b8     58 00 90 AD |  if_e	jmp	#LR__0603
072bc     24 4E 05 F1 | 	add	fp, #36
072c0     A7 28 02 FB | 	rdlong	local02, fp
072c4     24 4E 85 F1 | 	sub	fp, #36
072c8     FF FF 7F FF 
072cc     FF 29 0E F2 | 	cmp	local02, ##-1 wz
072d0     40 00 90 5D |  if_ne	jmp	#LR__0603
072d4     28 4E 05 F1 | 	add	fp, #40
072d8     A7 12 02 FB | 	rdlong	arg01, fp
072dc     28 4E 85 F1 | 	sub	fp, #40
072e0     10 12 06 F1 | 	add	arg01, #16
072e4     01 14 66 F6 | 	neg	arg02, #1
072e8     30 BE B1 FD | 	call	#_pslpoke
072ec     28 4E 05 F1 | 	add	fp, #40
072f0     A7 26 02 FB | 	rdlong	local01, fp
072f4     28 4E 85 F1 | 	sub	fp, #40
072f8     4A 00 00 FF 
072fc     88 E4 05 F1 | 	add	objptr, ##38024
07300     F2 26 62 FC | 	wrlong	local01, objptr
07304     4A 00 00 FF 
07308     88 E4 85 F1 | 	sub	objptr, ##38024
0730c                 | ' '   print "deleted first line"
0730c                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
0730c                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
0730c                 | '   return 0
0730c     00 FA 05 F6 | 	mov	result1, #0
07310     70 00 90 FD | 	jmp	#LR__0605
07314                 | LR__0603
07314                 | ' 
07314                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
07314     28 4E 05 F1 | 	add	fp, #40
07318     A7 26 02 FB | 	rdlong	local01, fp
0731c     28 4E 85 F1 | 	sub	fp, #40
07320     FF FF 3F FF 
07324     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07328     24 4E 05 51 |  if_ne	add	fp, #36
0732c     A7 28 02 5B |  if_ne	rdlong	local02, fp
07330     24 4E 85 51 |  if_ne	sub	fp, #36
07334     FF FF 7F 5F 
07338     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
0733c     40 00 90 AD |  if_e	jmp	#LR__0604
07340     28 4E 05 F1 | 	add	fp, #40
07344     A7 12 02 FB | 	rdlong	arg01, fp
07348     10 12 06 F1 | 	add	arg01, #16
0734c     04 4E 85 F1 | 	sub	fp, #4
07350     A7 14 02 FB | 	rdlong	arg02, fp
07354     24 4E 85 F1 | 	sub	fp, #36
07358     C0 BD B1 FD | 	call	#_pslpoke
0735c     24 4E 05 F1 | 	add	fp, #36
07360     A7 12 02 FB | 	rdlong	arg01, fp
07364     14 12 06 F1 | 	add	arg01, #20
07368     04 4E 05 F1 | 	add	fp, #4
0736c     A7 14 02 FB | 	rdlong	arg02, fp
07370     28 4E 85 F1 | 	sub	fp, #40
07374     A4 BD B1 FD | 	call	#_pslpoke
07378                 | '    pslpoke(header(5)+16,header(4))  
07378                 | '    pslpoke(header(4)+20, header(5))
07378                 | '    return 0
07378     00 FA 05 F6 | 	mov	result1, #0
0737c     04 00 90 FD | 	jmp	#LR__0605
07380                 | LR__0604
07380     00 FA 05 F6 | 	mov	result1, #0
07384                 | LR__0605
07384     A7 F0 03 F6 | 	mov	ptra, fp
07388     B2 00 A0 FD | 	call	#popregs_
0738c                 | _deleteline_ret
0738c     2D 00 64 FD | 	ret
07390                 | 
07390                 | ' 
07390                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
07390                 | ' 
07390                 | ' sub save_line
07390                 | _save_line
07390     03 4A 05 F6 | 	mov	COUNT_, #3
07394     A8 00 A0 FD | 	call	#pushregs_
07398     4A 00 00 FF 
0739c     7C E4 05 F1 | 	add	objptr, ##38012
073a0     F2 16 02 FB | 	rdlong	arg03, objptr
073a4     01 16 06 F1 | 	add	arg03, #1
073a8     05 00 00 FF 
073ac     18 E4 85 F1 | 	sub	objptr, ##2584
073b0     F2 14 02 FB | 	rdlong	arg02, objptr
073b4     0B 15 02 FD | 	qmul	arg02, arg03
073b8     0E 00 00 FF 
073bc     44 E4 85 F1 | 	sub	objptr, ##7236
073c0     F2 12 02 FB | 	rdlong	arg01, objptr
073c4     37 00 00 FF 
073c8     20 E4 85 F1 | 	sub	objptr, ##28192
073cc     09 27 02 F6 | 	mov	local01, arg01
073d0     18 28 62 FD | 	getqx	local02
073d4     97 06 48 FB | 	callpa	#(@LR__0611-@LR__0610)>>2,fcache_load_ptr_
073d8                 | LR__0610
073d8     13 FB C9 FA | 	rdbyte	result1, local01 wz
073dc     01 26 06 51 |  if_ne	add	local01, #1
073e0     F4 FF 9F 5D |  if_ne	jmp	#LR__0610
073e4                 | LR__0611
073e4     09 27 82 F1 | 	sub	local01, arg01
073e8     03 26 CE F7 | 	test	local01, #3 wz
073ec     02 26 46 50 |  if_ne	shr	local01, #2
073f0     01 26 06 51 |  if_ne	add	local01, #1
073f4     02 26 66 50 |  if_ne	shl	local01, #2
073f8     14 2B 02 F6 | 	mov	local03, local02
073fc     13 2B 02 F1 | 	add	local03, local01
07400     43 00 00 FF 
07404     5C E4 05 F1 | 	add	objptr, ##34396
07408     F2 16 02 FB | 	rdlong	arg03, objptr
0740c     14 17 02 F1 | 	add	arg03, local02
07410     04 00 00 FF 
07414     28 E4 05 F1 | 	add	objptr, ##2088
07418     F2 16 62 FC | 	wrlong	arg03, objptr
0741c     04 E4 05 F1 | 	add	objptr, #4
07420     F2 26 62 FC | 	wrlong	local01, objptr
07424     0C E4 85 F1 | 	sub	objptr, #12
07428     F2 12 02 F6 | 	mov	arg01, objptr
0742c     04 00 00 FF 
07430     20 E4 85 F1 | 	sub	objptr, ##2080
07434     F2 14 02 FB | 	rdlong	arg02, objptr
07438     14 17 02 F6 | 	mov	arg03, local02
0743c     37 00 00 FF 
07440     90 E5 85 F1 | 	sub	objptr, ##28560
07444     38 E9 B1 FD | 	call	#_psram_spin2_write
07448     2B 00 00 FF 
0744c     54 E5 05 F1 | 	add	objptr, ##22356
07450     F2 12 02 FB | 	rdlong	arg01, objptr
07454     0C 00 00 FF 
07458     3C E4 05 F1 | 	add	objptr, ##6204
0745c     F2 14 02 FB | 	rdlong	arg02, objptr
07460     14 15 02 F1 | 	add	arg02, local02
07464     13 17 02 F6 | 	mov	arg03, local01
07468     37 00 00 FF 
0746c     90 E5 85 F1 | 	sub	objptr, ##28560
07470     0C E9 B1 FD | 	call	#_psram_spin2_write
07474     37 00 00 FF 
07478     90 E5 05 F1 | 	add	objptr, ##28560
0747c     F2 26 02 FB | 	rdlong	local01, objptr
07480     15 27 02 F1 | 	add	local01, local03
07484     F2 26 62 FC | 	wrlong	local01, objptr
07488     43 00 00 FF 
0748c     5C E4 85 F1 | 	sub	objptr, ##34396
07490     A7 F0 03 F6 | 	mov	ptra, fp
07494     B2 00 A0 FD | 	call	#popregs_
07498                 | _save_line_ret
07498     2D 00 64 FD | 	ret
0749c                 | 
0749c                 | ' 
0749c                 | ' '----- Insert a new line into the middle of the program
0749c                 | ' 
0749c                 | ' function insertline(aline as ulong) as integer
0749c                 | _insertline
0749c     02 4A 05 F6 | 	mov	COUNT_, #2
074a0     A8 00 A0 FD | 	call	#pushregs_
074a4     28 F0 07 F1 | 	add	ptra, #40
074a8     04 4E 05 F1 | 	add	fp, #4
074ac     A7 12 62 FC | 	wrlong	arg01, fp
074b0     4A 00 00 FF 
074b4     88 E4 05 F1 | 	add	objptr, ##38024
074b8     F2 26 02 FB | 	rdlong	local01, objptr
074bc     04 4E 05 F1 | 	add	fp, #4
074c0     A7 26 62 FC | 	wrlong	local01, fp
074c4     08 4E 85 F1 | 	sub	fp, #8
074c8                 | ' 
074c8                 | ' do
074c8     3E 00 00 FF 
074cc     BC E5 85 F1 | 	sub	objptr, ##32188
074d0                 | LR__0620
074d0     10 4E 05 F1 | 	add	fp, #16
074d4     A7 12 02 F6 | 	mov	arg01, fp
074d8     08 4E 85 F1 | 	sub	fp, #8
074dc     A7 14 02 FB | 	rdlong	arg02, fp
074e0     08 4E 85 F1 | 	sub	fp, #8
074e4     18 16 06 F6 | 	mov	arg03, #24
074e8     F8 E7 B1 FD | 	call	#_psram_spin2_read1
074ec     08 4E 05 F1 | 	add	fp, #8
074f0     A7 26 02 FB | 	rdlong	local01, fp
074f4     04 4E 05 F1 | 	add	fp, #4
074f8     A7 26 62 FC | 	wrlong	local01, fp
074fc     18 4E 05 F1 | 	add	fp, #24
07500     A7 26 02 FB | 	rdlong	local01, fp
07504     1C 4E 85 F1 | 	sub	fp, #28
07508     A7 26 62 FC | 	wrlong	local01, fp
0750c     08 4E 05 F1 | 	add	fp, #8
07510     A7 26 02 FB | 	rdlong	local01, fp
07514     0C 4E 85 F1 | 	sub	fp, #12
07518     A7 16 02 FB | 	rdlong	arg03, fp
0751c     04 4E 85 F1 | 	sub	fp, #4
07520     0B 27 12 F2 | 	cmp	local01, arg03 wc
07524     24 4E 05 C1 |  if_b	add	fp, #36
07528     A7 28 02 CB |  if_b	rdlong	local02, fp
0752c     24 4E 85 C1 |  if_b	sub	fp, #36
07530     FF FF 3F CF 
07534     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07538     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0620
0753c     0B 00 00 FF 
07540     CC E4 85 F1 | 	sub	objptr, ##5836
07544                 | ' 
07544                 | ' if header(0)=aline then return -1 				' delete it first
07544     10 4E 05 F1 | 	add	fp, #16
07548     A7 26 02 FB | 	rdlong	local01, fp
0754c     0C 4E 85 F1 | 	sub	fp, #12
07550     A7 28 02 FB | 	rdlong	local02, fp
07554     04 4E 85 F1 | 	sub	fp, #4
07558     14 27 0A F2 | 	cmp	local01, local02 wz
0755c     01 FA 65 A6 |  if_e	neg	result1, #1
07560     48 01 90 AD |  if_e	jmp	#LR__0623
07564                 | ' if header(0)<aline then return -2 				' end of program reached
07564     10 4E 05 F1 | 	add	fp, #16
07568     A7 26 02 FB | 	rdlong	local01, fp
0756c     0C 4E 85 F1 | 	sub	fp, #12
07570     A7 16 02 FB | 	rdlong	arg03, fp
07574     04 4E 85 F1 | 	sub	fp, #4
07578     0B 27 12 F2 | 	cmp	local01, arg03 wc
0757c     02 FA 65 C6 |  if_b	neg	result1, #2
07580     28 01 90 CD |  if_b	jmp	#LR__0623
07584                 | ' 
07584                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
07584     20 4E 05 F1 | 	add	fp, #32
07588     A7 26 02 FB | 	rdlong	local01, fp
0758c     20 4E 85 F1 | 	sub	fp, #32
07590     FF FF 7F FF 
07594     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07598     78 00 90 5D |  if_ne	jmp	#LR__0621
0759c     43 00 00 FF 
075a0     5C E4 05 F1 | 	add	objptr, ##34396
075a4     F2 26 02 FB | 	rdlong	local01, objptr
075a8     07 00 00 FF 
075ac     2C E4 05 F1 | 	add	objptr, ##3628
075b0     F2 26 62 FC | 	wrlong	local01, objptr
075b4     0C 4E 05 F1 | 	add	fp, #12
075b8     A7 12 02 FB | 	rdlong	arg01, fp
075bc     0C 4E 85 F1 | 	sub	fp, #12
075c0     10 12 06 F1 | 	add	arg01, #16
075c4     07 00 00 FF 
075c8     2C E4 85 F1 | 	sub	objptr, ##3628
075cc     F2 14 02 FB | 	rdlong	arg02, objptr
075d0     43 00 00 FF 
075d4     5C E4 85 F1 | 	sub	objptr, ##34396
075d8     40 BB B1 FD | 	call	#_pslpoke
075dc     47 00 00 FF 
075e0     8C E4 05 F1 | 	add	objptr, ##36492
075e4     FF FF FF FF 
075e8     F2 FE 6B FC | 	wrlong	##-1, objptr
075ec     0C 4E 05 F1 | 	add	fp, #12
075f0     A7 26 02 FB | 	rdlong	local01, fp
075f4     0C 4E 85 F1 | 	sub	fp, #12
075f8     04 E4 05 F1 | 	add	objptr, #4
075fc     F2 26 62 FC | 	wrlong	local01, objptr
07600     47 00 00 FF 
07604     90 E4 85 F1 | 	sub	objptr, ##36496
07608     84 FD BF FD | 	call	#_save_line
0760c                 | '   programstart=programptr
0760c                 | '   pslpoke(lineptr2+16,programptr)
0760c                 | '   ucompiledline(4)=$FFFF_FFFF
0760c                 | '   ucompiledline(5)=lineptr2
0760c                 | '   save_line
0760c                 | '   return 0
0760c     00 FA 05 F6 | 	mov	result1, #0
07610     98 00 90 FD | 	jmp	#LR__0623
07614                 | LR__0621
07614                 | ' 
07614                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
07614     20 4E 05 F1 | 	add	fp, #32
07618     A7 26 02 FB | 	rdlong	local01, fp
0761c     20 4E 85 F1 | 	sub	fp, #32
07620     FF FF 7F FF 
07624     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07628     7C 00 90 AD |  if_e	jmp	#LR__0622
0762c     20 4E 05 F1 | 	add	fp, #32
07630     A7 26 02 FB | 	rdlong	local01, fp
07634     47 00 00 FF 
07638     8C E4 05 F1 | 	add	objptr, ##36492
0763c     F2 26 62 FC | 	wrlong	local01, objptr
07640     14 4E 85 F1 | 	sub	fp, #20
07644     A7 26 02 FB | 	rdlong	local01, fp
07648     04 E4 05 F1 | 	add	objptr, #4
0764c     F2 26 62 FC | 	wrlong	local01, objptr
07650     A7 12 02 FB | 	rdlong	arg01, fp
07654     0C 4E 85 F1 | 	sub	fp, #12
07658     10 12 06 F1 | 	add	arg01, #16
0765c     04 00 00 FF 
07660     34 E4 85 F1 | 	sub	objptr, ##2100
07664     F2 14 02 FB | 	rdlong	arg02, objptr
07668     43 00 00 FF 
0766c     5C E4 85 F1 | 	sub	objptr, ##34396
07670     A8 BA B1 FD | 	call	#_pslpoke
07674     20 4E 05 F1 | 	add	fp, #32
07678     A7 12 02 FB | 	rdlong	arg01, fp
0767c     20 4E 85 F1 | 	sub	fp, #32
07680     14 12 06 F1 | 	add	arg01, #20
07684     43 00 00 FF 
07688     5C E4 05 F1 | 	add	objptr, ##34396
0768c     F2 14 02 FB | 	rdlong	arg02, objptr
07690     43 00 00 FF 
07694     5C E4 85 F1 | 	sub	objptr, ##34396
07698     80 BA B1 FD | 	call	#_pslpoke
0769c     F0 FC BF FD | 	call	#_save_line
076a0                 | '   ucompiledline(4)=header(4)
076a0                 | '   ucompiledline(5)=lineptr2
076a0                 | '   pslpoke(lineptr2+16,programptr)
076a0                 | '   pslpoke(header(4)+20,programptr)
076a0                 | '   save_line
076a0                 | '   return 0
076a0     00 FA 05 F6 | 	mov	result1, #0
076a4     04 00 90 FD | 	jmp	#LR__0623
076a8                 | LR__0622
076a8     00 FA 05 F6 | 	mov	result1, #0
076ac                 | LR__0623
076ac     A7 F0 03 F6 | 	mov	ptra, fp
076b0     B2 00 A0 FD | 	call	#popregs_
076b4                 | _insertline_ret
076b4     2D 00 64 FD | 	ret
076b8                 | 
076b8                 | ' 
076b8                 | ' '----- Adds a new line at the end of the program
076b8                 | ' 
076b8                 | ' sub add_line_at_end(aline) 
076b8                 | _add_line_at_end
076b8     4A 00 00 FF 
076bc     8C E4 05 F1 | 	add	objptr, ##38028
076c0     F2 12 62 FC | 	wrlong	arg01, objptr
076c4     04 E4 05 F1 | 	add	objptr, #4
076c8     F2 14 02 FB | 	rdlong	arg02, objptr
076cc     03 00 00 FF 
076d0     04 E4 85 F1 | 	sub	objptr, ##1540
076d4     F2 14 62 FC | 	wrlong	arg02, objptr
076d8     03 00 00 FF 
076dc     04 E4 05 F1 | 	add	objptr, ##1540
076e0     F2 12 02 FB | 	rdlong	arg01, objptr
076e4     14 12 06 F1 | 	add	arg01, #20
076e8     07 00 00 FF 
076ec     34 E4 85 F1 | 	sub	objptr, ##3636
076f0     F2 14 02 FB | 	rdlong	arg02, objptr
076f4     43 00 00 FF 
076f8     5C E4 85 F1 | 	sub	objptr, ##34396
076fc     1C BA B1 FD | 	call	#_pslpoke
07700     43 00 00 FF 
07704     5C E4 05 F1 | 	add	objptr, ##34396
07708     F2 14 02 FB | 	rdlong	arg02, objptr
0770c     07 00 00 FF 
07710     34 E4 05 F1 | 	add	objptr, ##3636
07714     F2 14 62 FC | 	wrlong	arg02, objptr
07718     03 00 00 FF 
0771c     00 E4 85 F1 | 	sub	objptr, ##1536
07720     FF FF BF FF 
07724     F2 FE 6B FC | 	wrlong	##2147483647, objptr
07728                 | ' 
07728                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07728                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07728     04 00 00 FF 
0772c     34 E4 85 F1 | 	sub	objptr, ##2100
07730     F2 14 02 FB | 	rdlong	arg02, objptr
07734     43 00 00 FF 
07738     5C E4 85 F1 | 	sub	objptr, ##34396
0773c     00 04 00 FF 
07740     00 14 0E F2 | 	cmp	arg02, ##524288 wz
07744     47 00 00 AF 
07748     8C E4 05 A1 |  if_e	add	objptr, ##36492
0774c     FF FF FF AF 
07750     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
07754     47 00 00 AF 
07758     8C E4 85 A1 |  if_e	sub	objptr, ##36492
0775c     30 FC BF FD | 	call	#_save_line
07760     43 00 00 FF 
07764     5C E4 05 F1 | 	add	objptr, ##34396
07768     F2 12 02 FB | 	rdlong	arg01, objptr
0776c     43 00 00 FF 
07770     5C E4 85 F1 | 	sub	objptr, ##34396
07774     01 14 66 F6 | 	neg	arg02, #1
07778     A0 B9 B1 FD | 	call	#_pslpoke
0777c                 | _add_line_at_end_ret
0777c     2D 00 64 FD | 	ret
07780                 | 
07780                 | ' 
07780                 | ' '--------------------------------------------------------------------------------------------------------------------------
07780                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
07780                 | ' '--------------------------------------------------------------------------------------------------------------------------
07780                 | ' 
07780                 | ' '--------------------------------------------------------------------------------------------------------------------------
07780                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
07780                 | ' '--------------------------------------------------------------------------------------------------------------------------
07780                 | ' 
07780                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
07780                 | ' 
07780                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
07780                 | _compile_immediate
07780     0A 4A 05 F6 | 	mov	COUNT_, #10
07784     A8 00 A0 FD | 	call	#pushregs_
07788                 | _compile_immediate_enter
07788     09 2D 02 F6 | 	mov	local04, arg01
0778c     0A 2F 02 F6 | 	mov	local05, arg02
07790     00 30 06 F6 | 	mov	local06, #0
07794     00 32 06 F6 | 	mov	local07, #0
07798     00 34 06 F6 | 	mov	local08, #0
0779c                 | ' 
0779c                 | ' ' linetype=cont+1
0779c                 | ' ' 1 : this is the first part of the line that will continue
0779c                 | ' ' 2 - this is the continuation of the line
0779c                 | ' ' 3 - this is the last continued line
0779c                 | ' ' 4 - this is the one and only part
0779c                 | ' ' 5 - continued after if/else
0779c                 | ' 
0779c                 | ' err=0
0779c                 | ' cmd=0
0779c                 | ' vars=0
0779c                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
0779c     02 2C 0E F2 | 	cmp	local04, #2 wz
077a0     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
077a4     24 00 90 5D |  if_ne	jmp	#LR__0630
077a8     35 00 00 FF 
077ac     10 E4 05 F1 | 	add	objptr, ##27152
077b0     F2 32 02 FB | 	rdlong	local07, objptr
077b4     01 36 06 F6 | 	mov	local09, #1
077b8     02 00 00 FF 
077bc     34 E4 05 F1 | 	add	objptr, ##1076
077c0     F2 02 68 FC | 	wrlong	#1, objptr
077c4     37 00 00 FF 
077c8     44 E4 85 F1 | 	sub	objptr, ##28228
077cc                 | LR__0630
077cc                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
077cc     04 2C 0E F2 | 	cmp	local04, #4 wz
077d0     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
077d4     30 00 90 5D |  if_ne	jmp	#LR__0631
077d8     35 00 00 FF 
077dc     18 E4 05 F1 | 	add	objptr, ##27160
077e0     F2 32 02 FB | 	rdlong	local07, objptr
077e4     02 36 06 F6 | 	mov	local09, #2
077e8     02 00 00 FF 
077ec     2C E4 05 F1 | 	add	objptr, ##1068
077f0     F2 04 68 FC | 	wrlong	#2, objptr
077f4     13 00 00 FF 
077f8     38 E4 05 F1 | 	add	objptr, ##9784
077fc     F2 04 68 FC | 	wrlong	#2, objptr
07800     4A 00 00 FF 
07804     7C E4 85 F1 | 	sub	objptr, ##38012
07808                 | LR__0631
07808                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07808     05 2C 0E F2 | 	cmp	local04, #5 wz
0780c     40 00 90 5D |  if_ne	jmp	#LR__0632
07810     37 00 00 FF 
07814     44 E4 05 F1 | 	add	objptr, ##28228
07818     F2 FC 01 FB | 	rdlong	result2, objptr
0781c     FE 36 02 F6 | 	mov	local09, result2
07820     03 36 66 F0 | 	shl	local09, #3
07824     02 00 00 FF 
07828     38 E4 85 F1 | 	sub	objptr, ##1080
0782c     F2 36 02 F1 | 	add	local09, objptr
07830     04 36 06 F1 | 	add	local09, #4
07834     1B 33 02 FB | 	rdlong	local07, local09
07838     01 FC 05 F1 | 	add	result2, #1
0783c     02 00 00 FF 
07840     38 E4 05 F1 | 	add	objptr, ##1080
07844     F2 FC 61 FC | 	wrlong	result2, objptr
07848     37 00 00 FF 
0784c     44 E4 85 F1 | 	sub	objptr, ##28228
07850                 | LR__0632
07850                 | ' 
07850                 | ' 'print  "In compile_immediate cmd=:", cmd
07850                 | ' 451 select case cmd
07850     5C 32 0E F2 | 	cmp	local07, #92 wz
07854     D4 02 90 AD |  if_e	jmp	#LR__0633
07858     B9 32 0E F2 | 	cmp	local07, #185 wz
0785c     D8 02 90 AD |  if_e	jmp	#LR__0634
07860     47 32 0E F2 | 	cmp	local07, #71 wz
07864     E0 02 90 AD |  if_e	jmp	#LR__0635
07868     59 32 0E F2 | 	cmp	local07, #89 wz
0786c     E8 02 90 AD |  if_e	jmp	#LR__0636
07870     C3 32 0E F2 | 	cmp	local07, #195 wz
07874     F0 02 90 AD |  if_e	jmp	#LR__0637
07878     45 32 0E F2 | 	cmp	local07, #69 wz
0787c     F4 02 90 AD |  if_e	jmp	#LR__0638
07880     69 32 0E F2 | 	cmp	local07, #105 wz
07884     FC 02 90 AD |  if_e	jmp	#LR__0639
07888     40 32 0E F2 | 	cmp	local07, #64 wz
0788c     E8 06 90 AD |  if_e	jmp	#LR__0714
07890     B4 32 0E F2 | 	cmp	local07, #180 wz
07894     F8 02 90 AD |  if_e	jmp	#LR__0640
07898     49 32 0E F2 | 	cmp	local07, #73 wz
0789c     FC 02 90 AD |  if_e	jmp	#LR__0641
078a0     C4 32 0E F2 | 	cmp	local07, #196 wz
078a4     00 03 90 AD |  if_e	jmp	#LR__0642
078a8     AE 32 0E F2 | 	cmp	local07, #174 wz
078ac     04 03 90 AD |  if_e	jmp	#LR__0643
078b0     B0 32 0E F2 | 	cmp	local07, #176 wz
078b4     08 03 90 AD |  if_e	jmp	#LR__0644
078b8     AF 32 0E F2 | 	cmp	local07, #175 wz
078bc     0C 03 90 AD |  if_e	jmp	#LR__0645
078c0     B1 32 0E F2 | 	cmp	local07, #177 wz
078c4     10 03 90 AD |  if_e	jmp	#LR__0646
078c8     CF 32 0E F2 | 	cmp	local07, #207 wz
078cc     14 03 90 AD |  if_e	jmp	#LR__0647
078d0     68 32 0E F2 | 	cmp	local07, #104 wz
078d4     18 03 90 AD |  if_e	jmp	#LR__0648
078d8     B7 32 0E F2 | 	cmp	local07, #183 wz
078dc     98 06 90 AD |  if_e	jmp	#LR__0714
078e0     74 32 0E F2 | 	cmp	local07, #116 wz
078e4     14 03 90 AD |  if_e	jmp	#LR__0649
078e8     73 32 0E F2 | 	cmp	local07, #115 wz
078ec     1C 03 90 AD |  if_e	jmp	#LR__0650
078f0     6C 32 0E F2 | 	cmp	local07, #108 wz
078f4     24 03 90 AD |  if_e	jmp	#LR__0651
078f8     89 32 0E F2 | 	cmp	local07, #137 wz
078fc     78 06 90 AD |  if_e	jmp	#LR__0714
07900     C2 32 0E F2 | 	cmp	local07, #194 wz
07904     24 03 90 AD |  if_e	jmp	#LR__0652
07908     72 32 0E F2 | 	cmp	local07, #114 wz
0790c     28 03 90 AD |  if_e	jmp	#LR__0653
07910     5D 32 0E F2 | 	cmp	local07, #93 wz
07914     2C 03 90 AD |  if_e	jmp	#LR__0654
07918     96 32 0E F2 | 	cmp	local07, #150 wz
0791c     34 03 90 AD |  if_e	jmp	#LR__0655
07920     43 32 0E F2 | 	cmp	local07, #67 wz
07924     38 03 90 AD |  if_e	jmp	#LR__0656
07928     5A 32 0E F2 | 	cmp	local07, #90 wz
0792c     40 03 90 AD |  if_e	jmp	#LR__0657
07930     AB 32 0E F2 | 	cmp	local07, #171 wz
07934     40 06 90 AD |  if_e	jmp	#LR__0714
07938     BD 32 0E F2 | 	cmp	local07, #189 wz
0793c     40 03 90 AD |  if_e	jmp	#LR__0658
07940     BB 32 0E F2 | 	cmp	local07, #187 wz
07944     48 03 90 AD |  if_e	jmp	#LR__0659
07948     4E 32 0E F2 | 	cmp	local07, #78 wz
0794c     50 03 90 AD |  if_e	jmp	#LR__0660
07950     A9 32 0E F2 | 	cmp	local07, #169 wz
07954     68 03 90 AD |  if_e	jmp	#LR__0662
07958     46 32 0E F2 | 	cmp	local07, #70 wz
0795c     80 03 90 AD |  if_e	jmp	#LR__0664
07960     71 32 0E F2 | 	cmp	local07, #113 wz
07964     88 03 90 AD |  if_e	jmp	#LR__0665
07968     60 32 0E F2 | 	cmp	local07, #96 wz
0796c     8C 03 90 AD |  if_e	jmp	#LR__0666
07970     4A 32 0E F2 | 	cmp	local07, #74 wz
07974     90 03 90 AD |  if_e	jmp	#LR__0667
07978     48 32 0E F2 | 	cmp	local07, #72 wz
0797c     94 03 90 AD |  if_e	jmp	#LR__0668
07980     58 32 0E F2 | 	cmp	local07, #88 wz
07984     9C 03 90 AD |  if_e	jmp	#LR__0669
07988     5F 32 0E F2 | 	cmp	local07, #95 wz
0798c     A4 03 90 AD |  if_e	jmp	#LR__0670
07990     B5 32 0E F2 | 	cmp	local07, #181 wz
07994     A8 03 90 AD |  if_e	jmp	#LR__0671
07998     8A 32 0E F2 | 	cmp	local07, #138 wz
0799c     B0 03 90 AD |  if_e	jmp	#LR__0672
079a0     4C 32 0E F2 | 	cmp	local07, #76 wz
079a4     B4 03 90 AD |  if_e	jmp	#LR__0673
079a8     52 32 0E F2 | 	cmp	local07, #82 wz
079ac     BC 03 90 AD |  if_e	jmp	#LR__0674
079b0     97 32 0E F2 | 	cmp	local07, #151 wz
079b4     C4 03 90 AD |  if_e	jmp	#LR__0675
079b8     C6 32 0E F2 | 	cmp	local07, #198 wz
079bc     C8 03 90 AD |  if_e	jmp	#LR__0676
079c0     61 32 0E F2 | 	cmp	local07, #97 wz
079c4     CC 03 90 AD |  if_e	jmp	#LR__0677
079c8     63 32 0E F2 | 	cmp	local07, #99 wz
079cc     D0 03 90 AD |  if_e	jmp	#LR__0678
079d0     41 32 0E F2 | 	cmp	local07, #65 wz
079d4     A0 05 90 AD |  if_e	jmp	#LR__0714
079d8     4B 32 0E F2 | 	cmp	local07, #75 wz
079dc     CC 03 90 AD |  if_e	jmp	#LR__0679
079e0     C1 32 0E F2 | 	cmp	local07, #193 wz
079e4     D0 03 90 AD |  if_e	jmp	#LR__0680
079e8     B3 32 0E F2 | 	cmp	local07, #179 wz
079ec     D4 03 90 AD |  if_e	jmp	#LR__0681
079f0     5E 32 0E F2 | 	cmp	local07, #94 wz
079f4     D8 03 90 AD |  if_e	jmp	#LR__0682
079f8     7C 32 0E F2 | 	cmp	local07, #124 wz
079fc     DC 03 90 AD |  if_e	jmp	#LR__0683
07a00     7D 32 0E F2 | 	cmp	local07, #125 wz
07a04     E0 03 90 AD |  if_e	jmp	#LR__0684
07a08     7E 32 0E F2 | 	cmp	local07, #126 wz
07a0c     E4 03 90 AD |  if_e	jmp	#LR__0685
07a10     7F 32 0E F2 | 	cmp	local07, #127 wz
07a14     E8 03 90 AD |  if_e	jmp	#LR__0686
07a18     80 32 0E F2 | 	cmp	local07, #128 wz
07a1c     EC 03 90 AD |  if_e	jmp	#LR__0687
07a20     55 32 0E F2 | 	cmp	local07, #85 wz
07a24     F0 03 90 AD |  if_e	jmp	#LR__0688
07a28     75 32 0E F2 | 	cmp	local07, #117 wz
07a2c     F4 03 90 AD |  if_e	jmp	#LR__0689
07a30     42 32 0E F2 | 	cmp	local07, #66 wz
07a34     FC 03 90 AD |  if_e	jmp	#LR__0690
07a38     95 32 0E F2 | 	cmp	local07, #149 wz
07a3c     04 04 90 AD |  if_e	jmp	#LR__0691
07a40     AC 32 0E F2 | 	cmp	local07, #172 wz
07a44     30 05 90 AD |  if_e	jmp	#LR__0714
07a48     81 32 0E F2 | 	cmp	local07, #129 wz
07a4c     00 04 90 AD |  if_e	jmp	#LR__0692
07a50     44 32 0E F2 | 	cmp	local07, #68 wz
07a54     04 04 90 AD |  if_e	jmp	#LR__0693
07a58     BC 32 0E F2 | 	cmp	local07, #188 wz
07a5c     08 04 90 AD |  if_e	jmp	#LR__0694
07a60     88 32 0E F2 | 	cmp	local07, #136 wz
07a64     10 05 90 AD |  if_e	jmp	#LR__0714
07a68     B6 32 0E F2 | 	cmp	local07, #182 wz
07a6c     08 04 90 AD |  if_e	jmp	#LR__0695
07a70     92 32 0E F2 | 	cmp	local07, #146 wz
07a74     10 04 90 AD |  if_e	jmp	#LR__0696
07a78     BE 32 0E F2 | 	cmp	local07, #190 wz
07a7c     B4 05 90 AD |  if_e	jmp	#LR__0715
07a80     C7 32 0E F2 | 	cmp	local07, #199 wz
07a84     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
07a88     EC 04 90 AD |  if_e	jmp	#LR__0714
07a8c     4D 32 0E F2 | 	cmp	local07, #77 wz
07a90     00 04 90 AD |  if_e	jmp	#LR__0697
07a94     51 32 0E F2 | 	cmp	local07, #81 wz
07a98     08 04 90 AD |  if_e	jmp	#LR__0698
07a9c     CF 32 0E F2 | 	cmp	local07, #207 wz
07aa0     10 04 90 AD |  if_e	jmp	#LR__0699
07aa4     8E 32 0E F2 | 	cmp	local07, #142 wz
07aa8     14 04 90 AD |  if_e	jmp	#LR__0700
07aac     90 32 0E F2 | 	cmp	local07, #144 wz
07ab0     18 04 90 AD |  if_e	jmp	#LR__0701
07ab4     8D 32 0E F2 | 	cmp	local07, #141 wz
07ab8     1C 04 90 AD |  if_e	jmp	#LR__0702
07abc     8C 32 0E F2 | 	cmp	local07, #140 wz
07ac0     20 04 90 AD |  if_e	jmp	#LR__0703
07ac4     91 32 0E F2 | 	cmp	local07, #145 wz
07ac8     24 04 90 AD |  if_e	jmp	#LR__0704
07acc     8B 32 0E F2 | 	cmp	local07, #139 wz
07ad0     28 04 90 AD |  if_e	jmp	#LR__0705
07ad4     8F 32 0E F2 | 	cmp	local07, #143 wz
07ad8     2C 04 90 AD |  if_e	jmp	#LR__0706
07adc     B2 32 0E F2 | 	cmp	local07, #178 wz
07ae0     30 04 90 AD |  if_e	jmp	#LR__0707
07ae4     6D 32 0E F2 | 	cmp	local07, #109 wz
07ae8     38 04 90 AD |  if_e	jmp	#LR__0708
07aec     70 32 0E F2 | 	cmp	local07, #112 wz
07af0     84 04 90 AD |  if_e	jmp	#LR__0714
07af4     56 32 0E F2 | 	cmp	local07, #86 wz
07af8     34 04 90 AD |  if_e	jmp	#LR__0709
07afc     57 32 0E F2 | 	cmp	local07, #87 wz
07b00     74 04 90 AD |  if_e	jmp	#LR__0714
07b04     79 32 0E F2 | 	cmp	local07, #121 wz
07b08     30 04 90 AD |  if_e	jmp	#LR__0710
07b0c     77 32 0E F2 | 	cmp	local07, #119 wz
07b10     34 04 90 AD |  if_e	jmp	#LR__0711
07b14     78 32 0E F2 | 	cmp	local07, #120 wz
07b18     38 04 90 AD |  if_e	jmp	#LR__0712
07b1c     01 00 00 FF 
07b20     04 32 0E F2 | 	cmp	local07, ##516 wz
07b24     38 04 90 AD |  if_e	jmp	#LR__0713
07b28     08 05 90 FD | 	jmp	#LR__0715
07b2c                 | LR__0633
07b2c     54 0B B0 FD | 	call	#_compile_fun_2p
07b30     FD 30 02 F6 | 	mov	local06, result1
07b34     40 04 90 FD | 	jmp	#LR__0714
07b38                 | LR__0634
07b38     18 0E B0 FD | 	call	#_compile_fun_varp
07b3c     FD 34 02 F6 | 	mov	local08, result1
07b40     FE 30 02 F6 | 	mov	local06, result2
07b44     30 04 90 FD | 	jmp	#LR__0714
07b48                 | LR__0635
07b48     08 0E B0 FD | 	call	#_compile_fun_varp
07b4c     FD 34 02 F6 | 	mov	local08, result1
07b50     FE 30 02 F6 | 	mov	local06, result2
07b54     20 04 90 FD | 	jmp	#LR__0714
07b58                 | LR__0636
07b58     F8 0D B0 FD | 	call	#_compile_fun_varp
07b5c     FD 34 02 F6 | 	mov	local08, result1
07b60     FE 30 02 F6 | 	mov	local06, result2
07b64     10 04 90 FD | 	jmp	#LR__0714
07b68                 | LR__0637
07b68                 | ' return expr()
07b68     54 42 B0 FD | 	call	#_expr
07b6c     FD 30 02 F6 | 	mov	local06, result1
07b70     04 04 90 FD | 	jmp	#LR__0714
07b74                 | LR__0638
07b74     DC 0D B0 FD | 	call	#_compile_fun_varp
07b78     FD 34 02 F6 | 	mov	local08, result1
07b7c     FE 30 02 F6 | 	mov	local06, result2
07b80     F4 03 90 FD | 	jmp	#LR__0714
07b84                 | LR__0639
07b84                 | ' return expr()
07b84     38 42 B0 FD | 	call	#_expr
07b88     FD 30 02 F6 | 	mov	local06, result1
07b8c     E8 03 90 FD | 	jmp	#LR__0714
07b90                 | LR__0640
07b90                 | ' return expr()
07b90     2C 42 B0 FD | 	call	#_expr
07b94     FD 30 02 F6 | 	mov	local06, result1
07b98     DC 03 90 FD | 	jmp	#LR__0714
07b9c                 | LR__0641
07b9c                 | ' return expr()
07b9c     20 42 B0 FD | 	call	#_expr
07ba0     FD 30 02 F6 | 	mov	local06, result1
07ba4     D0 03 90 FD | 	jmp	#LR__0714
07ba8                 | LR__0642
07ba8     D8 0A B0 FD | 	call	#_compile_fun_2p
07bac     FD 30 02 F6 | 	mov	local06, result1
07bb0     C4 03 90 FD | 	jmp	#LR__0714
07bb4                 | LR__0643
07bb4     CC 0A B0 FD | 	call	#_compile_fun_2p
07bb8     FD 30 02 F6 | 	mov	local06, result1
07bbc     B8 03 90 FD | 	jmp	#LR__0714
07bc0                 | LR__0644
07bc0     C0 0A B0 FD | 	call	#_compile_fun_2p
07bc4     FD 30 02 F6 | 	mov	local06, result1
07bc8     AC 03 90 FD | 	jmp	#LR__0714
07bcc                 | LR__0645
07bcc     B4 0A B0 FD | 	call	#_compile_fun_2p
07bd0     FD 30 02 F6 | 	mov	local06, result1
07bd4     A0 03 90 FD | 	jmp	#LR__0714
07bd8                 | LR__0646
07bd8     A8 0A B0 FD | 	call	#_compile_fun_2p
07bdc     FD 30 02 F6 | 	mov	local06, result1
07be0     94 03 90 FD | 	jmp	#LR__0714
07be4                 | LR__0647
07be4                 | ' return expr()
07be4     D8 41 B0 FD | 	call	#_expr
07be8     FD 30 02 F6 | 	mov	local06, result1
07bec     88 03 90 FD | 	jmp	#LR__0714
07bf0                 | LR__0648
07bf0                 | ' return expr()
07bf0     CC 41 B0 FD | 	call	#_expr
07bf4     FD 30 02 F6 | 	mov	local06, result1
07bf8     7C 03 90 FD | 	jmp	#LR__0714
07bfc                 | LR__0649
07bfc     54 0D B0 FD | 	call	#_compile_fun_varp
07c00     FD 34 02 F6 | 	mov	local08, result1
07c04     FE 30 02 F6 | 	mov	local06, result2
07c08     6C 03 90 FD | 	jmp	#LR__0714
07c0c                 | LR__0650
07c0c     44 0D B0 FD | 	call	#_compile_fun_varp
07c10     FD 34 02 F6 | 	mov	local08, result1
07c14     FE 30 02 F6 | 	mov	local06, result2
07c18     5C 03 90 FD | 	jmp	#LR__0714
07c1c                 | LR__0651
07c1c     34 0D B0 FD | 	call	#_compile_fun_varp
07c20     FD 34 02 F6 | 	mov	local08, result1
07c24     FE 30 02 F6 | 	mov	local06, result2
07c28     4C 03 90 FD | 	jmp	#LR__0714
07c2c                 | LR__0652
07c2c                 | ' return expr()
07c2c     90 41 B0 FD | 	call	#_expr
07c30     FD 30 02 F6 | 	mov	local06, result1
07c34     40 03 90 FD | 	jmp	#LR__0714
07c38                 | LR__0653
07c38     3C 22 B0 FD | 	call	#_compile_dim
07c3c     FD 30 02 F6 | 	mov	local06, result1
07c40     F0 03 90 FD | 	jmp	#LR__0715
07c44                 | LR__0654
07c44     0C 0D B0 FD | 	call	#_compile_fun_varp
07c48     FD 34 02 F6 | 	mov	local08, result1
07c4c     FE 30 02 F6 | 	mov	local06, result2
07c50     24 03 90 FD | 	jmp	#LR__0714
07c54                 | LR__0655
07c54     2C 0A B0 FD | 	call	#_compile_fun_2p
07c58     FD 30 02 F6 | 	mov	local06, result1
07c5c     18 03 90 FD | 	jmp	#LR__0714
07c60                 | LR__0656
07c60     F0 0C B0 FD | 	call	#_compile_fun_varp
07c64     FD 34 02 F6 | 	mov	local08, result1
07c68     FE 30 02 F6 | 	mov	local06, result2
07c6c     08 03 90 FD | 	jmp	#LR__0714
07c70                 | LR__0657
07c70     17 13 02 F6 | 	mov	arg01, local05
07c74     C8 20 B0 FD | 	call	#_compile_else
07c78     FD 30 02 F6 | 	mov	local06, result1
07c7c     B4 03 90 FD | 	jmp	#LR__0715
07c80                 | LR__0658
07c80     D0 0C B0 FD | 	call	#_compile_fun_varp
07c84     FD 34 02 F6 | 	mov	local08, result1
07c88     FE 30 02 F6 | 	mov	local06, result2
07c8c     E8 02 90 FD | 	jmp	#LR__0714
07c90                 | LR__0659
07c90     C0 0C B0 FD | 	call	#_compile_fun_varp
07c94     FD 34 02 F6 | 	mov	local08, result1
07c98     FE 30 02 F6 | 	mov	local06, result2
07c9c     D8 02 90 FD | 	jmp	#LR__0714
07ca0                 | LR__0660
07ca0     01 2E 16 F2 | 	cmp	local05, #1 wc
07ca4     08 00 90 CD |  if_b	jmp	#LR__0661
07ca8     68 33 B0 FD | 	call	#_compile_goto
07cac     84 03 90 FD | 	jmp	#LR__0715
07cb0                 | LR__0661
07cb0     19 12 06 F6 | 	mov	arg01, #25
07cb4     00 14 06 F6 | 	mov	arg02, #0
07cb8     C0 B2 B1 FD | 	call	#_printerror
07cbc     74 03 90 FD | 	jmp	#LR__0715
07cc0                 | LR__0662
07cc0     01 2E 16 F2 | 	cmp	local05, #1 wc
07cc4     08 00 90 CD |  if_b	jmp	#LR__0663
07cc8     E4 32 B0 FD | 	call	#_compile_gosub
07ccc     64 03 90 FD | 	jmp	#LR__0715
07cd0                 | LR__0663
07cd0     19 12 06 F6 | 	mov	arg01, #25
07cd4     00 14 06 F6 | 	mov	arg02, #0
07cd8     A0 B2 B1 FD | 	call	#_printerror
07cdc     54 03 90 FD | 	jmp	#LR__0715
07ce0                 | LR__0664
07ce0     70 0C B0 FD | 	call	#_compile_fun_varp
07ce4     FD 34 02 F6 | 	mov	local08, result1
07ce8     FE 30 02 F6 | 	mov	local06, result2
07cec     88 02 90 FD | 	jmp	#LR__0714
07cf0                 | LR__0665
07cf0     08 0B B0 FD | 	call	#_compile_fun_4p
07cf4     FD 30 02 F6 | 	mov	local06, result1
07cf8     7C 02 90 FD | 	jmp	#LR__0714
07cfc                 | LR__0666
07cfc                 | ' return expr()
07cfc     C0 40 B0 FD | 	call	#_expr
07d00     FD 30 02 F6 | 	mov	local06, result1
07d04     70 02 90 FD | 	jmp	#LR__0714
07d08                 | LR__0667
07d08     40 28 B0 FD | 	call	#_compile_for
07d0c     FD 30 02 F6 | 	mov	local06, result1
07d10     20 03 90 FD | 	jmp	#LR__0715
07d14                 | LR__0668
07d14     3C 0C B0 FD | 	call	#_compile_fun_varp
07d18     FD 34 02 F6 | 	mov	local08, result1
07d1c     FE 30 02 F6 | 	mov	local06, result2
07d20     54 02 90 FD | 	jmp	#LR__0714
07d24                 | LR__0669
07d24     17 13 02 F6 | 	mov	arg01, local05
07d28     8C 1E B0 FD | 	call	#_compile_if
07d2c     FD 30 02 F6 | 	mov	local06, result1
07d30     00 03 90 FD | 	jmp	#LR__0715
07d34                 | LR__0670
07d34                 | ' return expr()
07d34     88 40 B0 FD | 	call	#_expr
07d38     FD 30 02 F6 | 	mov	local06, result1
07d3c     38 02 90 FD | 	jmp	#LR__0714
07d40                 | LR__0671
07d40     DC 0D B0 FD | 	call	#_compile_input
07d44     FD 34 02 F6 | 	mov	local08, result1
07d48     FE 30 02 F6 | 	mov	local06, result2
07d4c     28 02 90 FD | 	jmp	#LR__0714
07d50                 | LR__0672
07d50                 | ' return expr()
07d50     6C 40 B0 FD | 	call	#_expr
07d54     FD 30 02 F6 | 	mov	local06, result1
07d58     1C 02 90 FD | 	jmp	#LR__0714
07d5c                 | LR__0673
07d5c     F4 0B B0 FD | 	call	#_compile_fun_varp
07d60     FD 34 02 F6 | 	mov	local08, result1
07d64     FE 30 02 F6 | 	mov	local06, result2
07d68     0C 02 90 FD | 	jmp	#LR__0714
07d6c                 | LR__0674
07d6c     E4 0B B0 FD | 	call	#_compile_fun_varp
07d70     FD 34 02 F6 | 	mov	local08, result1
07d74     FE 30 02 F6 | 	mov	local06, result2
07d78     FC 01 90 FD | 	jmp	#LR__0714
07d7c                 | LR__0675
07d7c     04 09 B0 FD | 	call	#_compile_fun_2p
07d80     FD 30 02 F6 | 	mov	local06, result1
07d84     F0 01 90 FD | 	jmp	#LR__0714
07d88                 | LR__0676
07d88                 | ' return expr()
07d88     34 40 B0 FD | 	call	#_expr
07d8c     FD 30 02 F6 | 	mov	local06, result1
07d90     E4 01 90 FD | 	jmp	#LR__0714
07d94                 | LR__0677
07d94                 | ' return expr()
07d94     28 40 B0 FD | 	call	#_expr
07d98     FD 30 02 F6 | 	mov	local06, result1
07d9c     D8 01 90 FD | 	jmp	#LR__0714
07da0                 | LR__0678
07da0                 | ' return expr()
07da0     1C 40 B0 FD | 	call	#_expr
07da4     FD 30 02 F6 | 	mov	local06, result1
07da8     CC 01 90 FD | 	jmp	#LR__0714
07dac                 | LR__0679
07dac     68 30 B0 FD | 	call	#_compile_next
07db0     FD 30 02 F6 | 	mov	local06, result1
07db4     7C 02 90 FD | 	jmp	#LR__0715
07db8                 | LR__0680
07db8     48 36 B0 FD | 	call	#_compile_on
07dbc     FD 30 02 F6 | 	mov	local06, result1
07dc0     70 02 90 FD | 	jmp	#LR__0715
07dc4                 | LR__0681
07dc4     44 09 B0 FD | 	call	#_compile_fun_3p
07dc8     FD 30 02 F6 | 	mov	local06, result1
07dcc     A8 01 90 FD | 	jmp	#LR__0714
07dd0                 | LR__0682
07dd0                 | ' return expr()
07dd0     EC 3F B0 FD | 	call	#_expr
07dd4     FD 30 02 F6 | 	mov	local06, result1
07dd8     9C 01 90 FD | 	jmp	#LR__0714
07ddc                 | LR__0683
07ddc                 | ' return expr()
07ddc     E0 3F B0 FD | 	call	#_expr
07de0     FD 30 02 F6 | 	mov	local06, result1
07de4     90 01 90 FD | 	jmp	#LR__0714
07de8                 | LR__0684
07de8                 | ' return expr()
07de8     D4 3F B0 FD | 	call	#_expr
07dec     FD 30 02 F6 | 	mov	local06, result1
07df0     84 01 90 FD | 	jmp	#LR__0714
07df4                 | LR__0685
07df4                 | ' return expr()
07df4     C8 3F B0 FD | 	call	#_expr
07df8     FD 30 02 F6 | 	mov	local06, result1
07dfc     78 01 90 FD | 	jmp	#LR__0714
07e00                 | LR__0686
07e00     F8 09 B0 FD | 	call	#_compile_fun_4p
07e04     FD 30 02 F6 | 	mov	local06, result1
07e08     6C 01 90 FD | 	jmp	#LR__0714
07e0c                 | LR__0687
07e0c                 | ' return expr()
07e0c     B0 3F B0 FD | 	call	#_expr
07e10     FD 30 02 F6 | 	mov	local06, result1
07e14     60 01 90 FD | 	jmp	#LR__0714
07e18                 | LR__0688
07e18     68 08 B0 FD | 	call	#_compile_fun_2p
07e1c     FD 30 02 F6 | 	mov	local06, result1
07e20     54 01 90 FD | 	jmp	#LR__0714
07e24                 | LR__0689
07e24     2C 0B B0 FD | 	call	#_compile_fun_varp
07e28     FD 34 02 F6 | 	mov	local08, result1
07e2c     FE 30 02 F6 | 	mov	local06, result2
07e30     44 01 90 FD | 	jmp	#LR__0714
07e34                 | LR__0690
07e34     1C 0B B0 FD | 	call	#_compile_fun_varp
07e38     FD 34 02 F6 | 	mov	local08, result1
07e3c     FE 30 02 F6 | 	mov	local06, result2
07e40     34 01 90 FD | 	jmp	#LR__0714
07e44                 | LR__0691
07e44     3C 08 B0 FD | 	call	#_compile_fun_2p
07e48     FD 30 02 F6 | 	mov	local06, result1
07e4c     28 01 90 FD | 	jmp	#LR__0714
07e50                 | LR__0692
07e50     30 08 B0 FD | 	call	#_compile_fun_2p
07e54     FD 30 02 F6 | 	mov	local06, result1
07e58     1C 01 90 FD | 	jmp	#LR__0714
07e5c                 | LR__0693
07e5c     80 16 B0 FD | 	call	#_compile_print
07e60     FD 30 02 F6 | 	mov	local06, result1
07e64     CC 01 90 FD | 	jmp	#LR__0715
07e68                 | LR__0694
07e68     E8 0A B0 FD | 	call	#_compile_fun_varp
07e6c     FD 34 02 F6 | 	mov	local08, result1
07e70     FE 30 02 F6 | 	mov	local06, result2
07e74     00 01 90 FD | 	jmp	#LR__0714
07e78                 | LR__0695
07e78     B4 0B B0 FD | 	call	#_compile_read
07e7c     FD 34 02 F6 | 	mov	local08, result1
07e80     FE 30 02 F6 | 	mov	local06, result2
07e84     F0 00 90 FD | 	jmp	#LR__0714
07e88                 | LR__0696
07e88                 | ' return expr()
07e88     34 3F B0 FD | 	call	#_expr
07e8c     FD 30 02 F6 | 	mov	local06, result1
07e90     E4 00 90 FD | 	jmp	#LR__0714
07e94                 | LR__0697
07e94     BC 0A B0 FD | 	call	#_compile_fun_varp
07e98     FD 34 02 F6 | 	mov	local08, result1
07e9c     FE 30 02 F6 | 	mov	local06, result2
07ea0     D4 00 90 FD | 	jmp	#LR__0714
07ea4                 | LR__0698
07ea4     AC 0A B0 FD | 	call	#_compile_fun_varp
07ea8     FD 34 02 F6 | 	mov	local08, result1
07eac     FE 30 02 F6 | 	mov	local06, result2
07eb0     C4 00 90 FD | 	jmp	#LR__0714
07eb4                 | LR__0699
07eb4     44 09 B0 FD | 	call	#_compile_fun_4p
07eb8     FD 30 02 F6 | 	mov	local06, result1
07ebc     B8 00 90 FD | 	jmp	#LR__0714
07ec0                 | LR__0700
07ec0     C0 07 B0 FD | 	call	#_compile_fun_2p
07ec4     FD 30 02 F6 | 	mov	local06, result1
07ec8     AC 00 90 FD | 	jmp	#LR__0714
07ecc                 | LR__0701
07ecc     B4 07 B0 FD | 	call	#_compile_fun_2p
07ed0     FD 30 02 F6 | 	mov	local06, result1
07ed4     A0 00 90 FD | 	jmp	#LR__0714
07ed8                 | LR__0702
07ed8     A8 07 B0 FD | 	call	#_compile_fun_2p
07edc     FD 30 02 F6 | 	mov	local06, result1
07ee0     94 00 90 FD | 	jmp	#LR__0714
07ee4                 | LR__0703
07ee4     9C 07 B0 FD | 	call	#_compile_fun_2p
07ee8     FD 30 02 F6 | 	mov	local06, result1
07eec     88 00 90 FD | 	jmp	#LR__0714
07ef0                 | LR__0704
07ef0     90 07 B0 FD | 	call	#_compile_fun_2p
07ef4     FD 30 02 F6 | 	mov	local06, result1
07ef8     7C 00 90 FD | 	jmp	#LR__0714
07efc                 | LR__0705
07efc     84 07 B0 FD | 	call	#_compile_fun_2p
07f00     FD 30 02 F6 | 	mov	local06, result1
07f04     70 00 90 FD | 	jmp	#LR__0714
07f08                 | LR__0706
07f08     78 07 B0 FD | 	call	#_compile_fun_2p
07f0c     FD 30 02 F6 | 	mov	local06, result1
07f10     64 00 90 FD | 	jmp	#LR__0714
07f14                 | LR__0707
07f14     3C 0A B0 FD | 	call	#_compile_fun_varp
07f18     FD 34 02 F6 | 	mov	local08, result1
07f1c     FE 30 02 F6 | 	mov	local06, result2
07f20     54 00 90 FD | 	jmp	#LR__0714
07f24                 | LR__0708
07f24     E4 07 B0 FD | 	call	#_compile_fun_3p
07f28     FD 30 02 F6 | 	mov	local06, result1
07f2c     48 00 90 FD | 	jmp	#LR__0714
07f30                 | LR__0709
07f30                 | ' return expr()
07f30     8C 3E B0 FD | 	call	#_expr
07f34     FD 30 02 F6 | 	mov	local06, result1
07f38     3C 00 90 FD | 	jmp	#LR__0714
07f3c                 | LR__0710
07f3c     44 07 B0 FD | 	call	#_compile_fun_2p
07f40     FD 30 02 F6 | 	mov	local06, result1
07f44     30 00 90 FD | 	jmp	#LR__0714
07f48                 | LR__0711
07f48     38 07 B0 FD | 	call	#_compile_fun_2p
07f4c     FD 30 02 F6 | 	mov	local06, result1
07f50     24 00 90 FD | 	jmp	#LR__0714
07f54                 | LR__0712
07f54     2C 07 B0 FD | 	call	#_compile_fun_2p
07f58     FD 30 02 F6 | 	mov	local06, result1
07f5c     18 00 90 FD | 	jmp	#LR__0714
07f60                 | LR__0713
07f60     1C 13 B0 FD | 	call	#_compile_array_assign
07f64     FD 30 02 F6 | 	mov	local06, result1
07f68     0E 30 0E F2 | 	cmp	local06, #14 wz
07f6c     C4 00 90 5D |  if_ne	jmp	#LR__0715
07f70                 | ' return 23
07f70     17 30 06 F6 | 	mov	local06, #23
07f74     BC 00 90 FD | 	jmp	#LR__0715
07f78                 | ' return 23
07f78                 | LR__0714
07f78     19 2B 02 F6 | 	mov	local03, local07
07f7c     1A 27 02 F6 | 	mov	local01, local08
07f80     13 37 02 F6 | 	mov	local09, local01
07f84     14 39 02 F6 | 	mov	local10, local02
07f88     15 33 02 F6 | 	mov	local07, local03
07f8c     4A 00 00 FF 
07f90     7C E4 05 F1 | 	add	objptr, ##38012
07f94     F2 26 02 FB | 	rdlong	local01, objptr
07f98     13 35 02 F6 | 	mov	local08, local01
07f9c     01 34 66 F0 | 	shl	local08, #1
07fa0     13 35 02 F1 | 	add	local08, local01
07fa4     02 34 66 F0 | 	shl	local08, #2
07fa8     03 00 00 FF 
07fac     00 E4 85 F1 | 	sub	objptr, ##1536
07fb0     F2 34 02 F1 | 	add	local08, objptr
07fb4     1A 37 62 FC | 	wrlong	local09, local08
07fb8     03 00 00 FF 
07fbc     00 E4 05 F1 | 	add	objptr, ##1536
07fc0     F2 26 02 FB | 	rdlong	local01, objptr
07fc4     13 37 02 F6 | 	mov	local09, local01
07fc8     01 36 66 F0 | 	shl	local09, #1
07fcc     13 37 02 F1 | 	add	local09, local01
07fd0     02 36 66 F0 | 	shl	local09, #2
07fd4     03 00 00 FF 
07fd8     00 E4 85 F1 | 	sub	objptr, ##1536
07fdc     F2 36 02 F1 | 	add	local09, objptr
07fe0     04 36 06 F1 | 	add	local09, #4
07fe4     1B 39 62 FC | 	wrlong	local10, local09
07fe8     03 00 00 FF 
07fec     00 E4 05 F1 | 	add	objptr, ##1536
07ff0     F2 26 02 FB | 	rdlong	local01, objptr
07ff4     13 39 02 F6 | 	mov	local10, local01
07ff8     01 38 66 F0 | 	shl	local10, #1
07ffc     13 39 02 F1 | 	add	local10, local01
08000     02 38 66 F0 | 	shl	local10, #2
08004     03 00 00 FF 
08008     00 E4 85 F1 | 	sub	objptr, ##1536
0800c     F2 38 02 F1 | 	add	local10, objptr
08010     08 38 06 F1 | 	add	local10, #8
08014     1C 33 62 FC | 	wrlong	local07, local10
08018     03 00 00 FF 
0801c     00 E4 05 F1 | 	add	objptr, ##1536
08020     F2 36 02 FB | 	rdlong	local09, objptr
08024     01 36 06 F1 | 	add	local09, #1
08028     F2 36 62 FC | 	wrlong	local09, objptr
0802c     4A 00 00 FF 
08030     7C E4 85 F1 | 	sub	objptr, ##38012
08034                 | LR__0715
08034                 | ' 
08034                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
08034                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
08034     03 2C 0E F2 | 	cmp	local04, #3 wz
08038     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
0803c     38 00 90 5D |  if_ne	jmp	#LR__0716
08040     4A 00 00 FF 
08044     7C E4 05 F1 | 	add	objptr, ##38012
08048     F2 38 02 FB | 	rdlong	local10, objptr
0804c     1C 27 02 F6 | 	mov	local01, local10
08050     01 26 66 F0 | 	shl	local01, #1
08054     1C 27 02 F1 | 	add	local01, local10
08058     02 26 66 F0 | 	shl	local01, #2
0805c     03 00 00 FF 
08060     00 E4 85 F1 | 	sub	objptr, ##1536
08064     F2 26 02 F1 | 	add	local01, objptr
08068     08 26 06 F1 | 	add	local01, #8
0806c     13 FD 6B FC | 	wrlong	#510, local01
08070     47 00 00 FF 
08074     7C E4 85 F1 | 	sub	objptr, ##36476
08078                 | LR__0716
08078                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
08078                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08078     4A 00 00 FF 
0807c     7C E4 05 F1 | 	add	objptr, ##38012
08080     F2 26 02 FB | 	rdlong	local01, objptr
08084     4A 00 00 FF 
08088     7C E4 85 F1 | 	sub	objptr, ##38012
0808c     97 58 48 FB | 	callpa	#(@LR__0719-@LR__0717)>>2,fcache_load_ptr_
08090                 | LR__0717
08090     13 39 02 F6 | 	mov	local10, local01
08094     01 38 66 F0 | 	shl	local10, #1
08098     13 39 02 F1 | 	add	local10, local01
0809c     02 38 66 F0 | 	shl	local10, #2
080a0     47 00 00 FF 
080a4     7C E4 05 F1 | 	add	objptr, ##36476
080a8     F2 38 02 F1 | 	add	local10, objptr
080ac     08 38 06 F1 | 	add	local10, #8
080b0     1C 39 02 FB | 	rdlong	local10, local10
080b4     9B 38 0E F2 | 	cmp	local10, #155 wz
080b8     47 00 00 FF 
080bc     7C E4 85 F1 | 	sub	objptr, ##36476
080c0     70 00 90 5D |  if_ne	jmp	#LR__0718
080c4     13 37 02 F6 | 	mov	local09, local01
080c8     01 36 86 F1 | 	sub	local09, #1
080cc     1B 39 02 F6 | 	mov	local10, local09
080d0     01 38 66 F0 | 	shl	local10, #1
080d4     1B 39 02 F1 | 	add	local10, local09
080d8     02 38 66 F0 | 	shl	local10, #2
080dc     47 00 00 FF 
080e0     7C E4 05 F1 | 	add	objptr, ##36476
080e4     F2 38 02 F1 | 	add	local10, objptr
080e8     08 38 06 F1 | 	add	local10, #8
080ec     1C 39 02 FB | 	rdlong	local10, local10
080f0     11 38 0E F2 | 	cmp	local10, #17 wz
080f4     47 00 00 FF 
080f8     7C E4 85 F1 | 	sub	objptr, ##36476
080fc     34 00 90 5D |  if_ne	jmp	#LR__0718
08100     13 37 02 F6 | 	mov	local09, local01
08104     01 36 86 F1 | 	sub	local09, #1
08108     1B 39 02 F6 | 	mov	local10, local09
0810c     01 38 66 F0 | 	shl	local10, #1
08110     1B 39 02 F1 | 	add	local10, local09
08114     02 38 66 F0 | 	shl	local10, #2
08118     47 00 00 FF 
0811c     7C E4 05 F1 | 	add	objptr, ##36476
08120     F2 38 02 F1 | 	add	local10, objptr
08124     08 38 06 F1 | 	add	local10, #8
08128     1C 25 68 FC | 	wrlong	#18, local10
0812c     47 00 00 FF 
08130     7C E4 85 F1 | 	sub	objptr, ##36476
08134                 | LR__0718
08134     01 26 86 F1 | 	sub	local01, #1
08138     01 26 56 F2 | 	cmps	local01, #1 wc
0813c     50 FF 9F 3D |  if_ae	jmp	#LR__0717
08140                 | LR__0719
08140                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
08140                 | ' return err
08140     18 FB 01 F6 | 	mov	result1, local06
08144     A7 F0 03 F6 | 	mov	ptra, fp
08148     B2 00 A0 FD | 	call	#popregs_
0814c                 | _compile_immediate_ret
0814c     2D 00 64 FD | 	ret
08150                 | 
08150                 | ' 
08150                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
08150                 | ' 
08150                 | ' function compile_immediate_assign(linetype as ulong) as ulong
08150                 | _compile_immediate_assign
08150     0C 4A 05 F6 | 	mov	COUNT_, #12
08154     A8 00 A0 FD | 	call	#pushregs_
08158     09 2D 02 F6 | 	mov	local04, arg01
0815c     FF 2A 06 F6 | 	mov	local03, #255
08160     01 2E 66 F6 | 	neg	local05, #1
08164     00 30 06 F6 | 	mov	local06, #0
08168                 | ' 
08168                 | ' t1.result_type=result_error : t1.result.uresult=0
08168                 | ' i=-1: j=-1 : err=0
08168                 | ' 
08168                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
08168     02 2C 0E F2 | 	cmp	local04, #2 wz
0816c     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
08170     35 00 00 AF 
08174     0C E4 05 A1 |  if_e	add	objptr, ##27148
08178     F2 32 02 AB |  if_e	rdlong	local07, objptr
0817c     02 00 00 AF 
08180     38 E4 05 A1 |  if_e	add	objptr, ##1080
08184     F2 04 68 AC |  if_e	wrlong	#2, objptr
08188     37 00 00 AF 
0818c     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08190                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
08190     04 2C 0E F2 | 	cmp	local04, #4 wz
08194     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
08198     2C 00 90 5D |  if_ne	jmp	#LR__0720
0819c     35 00 00 FF 
081a0     14 E4 05 F1 | 	add	objptr, ##27156
081a4     F2 32 02 FB | 	rdlong	local07, objptr
081a8     02 00 00 FF 
081ac     30 E4 05 F1 | 	add	objptr, ##1072
081b0     F2 06 68 FC | 	wrlong	#3, objptr
081b4     13 00 00 FF 
081b8     38 E4 05 F1 | 	add	objptr, ##9784
081bc     F2 04 68 FC | 	wrlong	#2, objptr
081c0     4A 00 00 FF 
081c4     7C E4 85 F1 | 	sub	objptr, ##38012
081c8                 | LR__0720
081c8                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
081c8     05 2C 0E F2 | 	cmp	local04, #5 wz
081cc     3C 00 90 5D |  if_ne	jmp	#LR__0721
081d0     37 00 00 FF 
081d4     44 E4 05 F1 | 	add	objptr, ##28228
081d8     F2 FA 01 FB | 	rdlong	result1, objptr
081dc     FD 32 02 F6 | 	mov	local07, result1
081e0     03 32 66 F0 | 	shl	local07, #3
081e4     02 00 00 FF 
081e8     38 E4 85 F1 | 	sub	objptr, ##1080
081ec     F2 32 02 F1 | 	add	local07, objptr
081f0     19 33 02 FB | 	rdlong	local07, local07
081f4     02 FA 05 F1 | 	add	result1, #2
081f8     02 00 00 FF 
081fc     38 E4 05 F1 | 	add	objptr, ##1080
08200     F2 FA 61 FC | 	wrlong	result1, objptr
08204     37 00 00 FF 
08208     44 E4 85 F1 | 	sub	objptr, ##28228
0820c                 | LR__0721
0820c     19 13 02 F6 | 	mov	arg01, local07
08210     01 14 06 F6 | 	mov	arg02, #1
08214     5C 08 B2 FD | 	call	#__system__Right_S
08218     FD 34 02 F6 | 	mov	local08, result1
0821c     A0 3B B0 FD | 	call	#_expr
08220                 | ' 
08220                 | ' suffix2$=right$(varname2$,1)
08220                 | ' expr()
08220                 | ' if varnum>0 then					' try to find a variable
08220     35 00 00 FF 
08224     08 E4 05 F1 | 	add	objptr, ##27144
08228     F2 36 02 FB | 	rdlong	local09, objptr
0822c     35 00 00 FF 
08230     08 E4 85 F1 | 	sub	objptr, ##27144
08234     01 36 56 F2 | 	cmps	local09, #1 wc
08238     58 00 90 CD |  if_b	jmp	#LR__0724
0823c                 | '   for i=0 to varnum-1
0823c     00 38 06 F6 | 	mov	local10, #0
08240     35 00 00 FF 
08244     08 E4 05 F1 | 	add	objptr, ##27144
08248     F2 3A 02 FB | 	rdlong	local11, objptr
0824c     35 00 00 FF 
08250     08 E4 85 F1 | 	sub	objptr, ##27144
08254                 | LR__0722
08254     1D 39 52 F2 | 	cmps	local10, local11 wc
08258     38 00 90 3D |  if_ae	jmp	#LR__0723
0825c                 | '     if variables(i).name=varname2$ then j=i : exit
0825c     1C 37 02 F6 | 	mov	local09, local10
08260     04 36 66 F0 | 	shl	local09, #4
08264     14 00 00 FF 
08268     F8 E5 05 F1 | 	add	objptr, ##10744
0826c     F2 36 02 F1 | 	add	local09, objptr
08270     1B 13 02 FB | 	rdlong	arg01, local09
08274     19 15 02 F6 | 	mov	arg02, local07
08278     14 00 00 FF 
0827c     F8 E5 85 F1 | 	sub	objptr, ##10744
08280     10 E7 B1 FD | 	call	#__system___string_cmp
08284     00 FA 0D F2 | 	cmp	result1, #0 wz
08288     1C 2F 02 A6 |  if_e	mov	local05, local10
0828c     01 38 06 51 |  if_ne	add	local10, #1
08290     C0 FF 9F 5D |  if_ne	jmp	#LR__0722
08294                 | LR__0723
08294                 | LR__0724
08294                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
08294     FF FF 7F FF 
08298     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
0829c     60 00 90 5D |  if_ne	jmp	#LR__0725
082a0     35 00 00 FF 
082a4     08 E4 05 F1 | 	add	objptr, ##27144
082a8     F2 36 02 FB | 	rdlong	local09, objptr
082ac     35 00 00 FF 
082b0     08 E4 85 F1 | 	sub	objptr, ##27144
082b4     02 00 00 FF 
082b8     00 36 56 F2 | 	cmps	local09, ##1024 wc
082bc     40 00 90 3D |  if_ae	jmp	#LR__0725
082c0     35 00 00 FF 
082c4     08 E4 05 F1 | 	add	objptr, ##27144
082c8     F2 3A 02 FB | 	rdlong	local11, objptr
082cc     04 3A 66 F0 | 	shl	local11, #4
082d0     20 00 00 FF 
082d4     10 E4 85 F1 | 	sub	objptr, ##16400
082d8     F2 3A 02 F1 | 	add	local11, objptr
082dc     1D 33 62 FC | 	wrlong	local07, local11
082e0     20 00 00 FF 
082e4     10 E4 05 F1 | 	add	objptr, ##16400
082e8     F2 36 02 FB | 	rdlong	local09, objptr
082ec     1B 2F 02 F6 | 	mov	local05, local09
082f0     01 36 06 F1 | 	add	local09, #1
082f4     F2 36 62 FC | 	wrlong	local09, objptr
082f8     35 00 00 FF 
082fc     08 E4 85 F1 | 	sub	objptr, ##27144
08300                 | LR__0725
08300                 | ' if varnum>=maxvars then
08300     35 00 00 FF 
08304     08 E4 05 F1 | 	add	objptr, ##27144
08308     F2 36 02 FB | 	rdlong	local09, objptr
0830c     35 00 00 FF 
08310     08 E4 85 F1 | 	sub	objptr, ##27144
08314     02 00 00 FF 
08318     00 36 56 F2 | 	cmps	local09, ##1024 wc
0831c     2D 30 06 36 |  if_ae	mov	local06, #45
08320     C8 01 90 3D |  if_ae	jmp	#LR__0730
08324     17 27 02 F6 | 	mov	local01, local05
08328     17 2A 06 F6 | 	mov	local03, #23
0832c     13 37 02 F6 | 	mov	local09, local01
08330     14 3D 02 F6 | 	mov	local12, local02
08334     15 27 02 F6 | 	mov	local01, local03
08338     4A 00 00 FF 
0833c     7C E4 05 F1 | 	add	objptr, ##38012
08340     F2 3A 02 FB | 	rdlong	local11, objptr
08344     1D 39 02 F6 | 	mov	local10, local11
08348     01 38 66 F0 | 	shl	local10, #1
0834c     1D 39 02 F1 | 	add	local10, local11
08350     02 38 66 F0 | 	shl	local10, #2
08354     03 00 00 FF 
08358     00 E4 85 F1 | 	sub	objptr, ##1536
0835c     F2 38 02 F1 | 	add	local10, objptr
08360     1C 37 62 FC | 	wrlong	local09, local10
08364     03 00 00 FF 
08368     00 E4 05 F1 | 	add	objptr, ##1536
0836c     F2 36 02 FB | 	rdlong	local09, objptr
08370     1B 3B 02 F6 | 	mov	local11, local09
08374     01 3A 66 F0 | 	shl	local11, #1
08378     1B 3B 02 F1 | 	add	local11, local09
0837c     02 3A 66 F0 | 	shl	local11, #2
08380     03 00 00 FF 
08384     00 E4 85 F1 | 	sub	objptr, ##1536
08388     F2 3A 02 F1 | 	add	local11, objptr
0838c     04 3A 06 F1 | 	add	local11, #4
08390     1D 3D 62 FC | 	wrlong	local12, local11
08394     03 00 00 FF 
08398     00 E4 05 F1 | 	add	objptr, ##1536
0839c     F2 36 02 FB | 	rdlong	local09, objptr
083a0     1B 3D 02 F6 | 	mov	local12, local09
083a4     01 3C 66 F0 | 	shl	local12, #1
083a8     1B 3D 02 F1 | 	add	local12, local09
083ac     02 3C 66 F0 | 	shl	local12, #2
083b0     03 00 00 FF 
083b4     00 E4 85 F1 | 	sub	objptr, ##1536
083b8     F2 3C 02 F1 | 	add	local12, objptr
083bc     08 3C 06 F1 | 	add	local12, #8
083c0     1E 27 62 FC | 	wrlong	local01, local12
083c4     03 00 00 FF 
083c8     00 E4 05 F1 | 	add	objptr, ##1536
083cc     F2 36 02 FB | 	rdlong	local09, objptr
083d0     01 36 06 F1 | 	add	local09, #1
083d4     F2 36 62 FC | 	wrlong	local09, objptr
083d8     4A 00 00 FF 
083dc     7C E4 85 F1 | 	sub	objptr, ##38012
083e0                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
083e0                 | '   compiledline(lineptr)=t1:  lineptr+=1 
083e0                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
083e0     03 2C 0E F2 | 	cmp	local04, #3 wz
083e4     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
083e8     38 00 90 5D |  if_ne	jmp	#LR__0726
083ec     4A 00 00 FF 
083f0     7C E4 05 F1 | 	add	objptr, ##38012
083f4     F2 3C 02 FB | 	rdlong	local12, objptr
083f8     1E 27 02 F6 | 	mov	local01, local12
083fc     01 26 66 F0 | 	shl	local01, #1
08400     1E 27 02 F1 | 	add	local01, local12
08404     02 26 66 F0 | 	shl	local01, #2
08408     03 00 00 FF 
0840c     00 E4 85 F1 | 	sub	objptr, ##1536
08410     F2 26 02 F1 | 	add	local01, objptr
08414     08 26 06 F1 | 	add	local01, #8
08418     13 FD 6B FC | 	wrlong	#510, local01
0841c     47 00 00 FF 
08420     7C E4 85 F1 | 	sub	objptr, ##36476
08424                 | LR__0726
08424                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08424     4A 00 00 FF 
08428     7C E4 05 F1 | 	add	objptr, ##38012
0842c     F2 38 02 FB | 	rdlong	local10, objptr
08430     4A 00 00 FF 
08434     7C E4 85 F1 | 	sub	objptr, ##38012
08438     97 58 48 FB | 	callpa	#(@LR__0729-@LR__0727)>>2,fcache_load_ptr_
0843c                 | LR__0727
0843c     1C 3D 02 F6 | 	mov	local12, local10
08440     01 3C 66 F0 | 	shl	local12, #1
08444     1C 3D 02 F1 | 	add	local12, local10
08448     02 3C 66 F0 | 	shl	local12, #2
0844c     47 00 00 FF 
08450     7C E4 05 F1 | 	add	objptr, ##36476
08454     F2 3C 02 F1 | 	add	local12, objptr
08458     08 3C 06 F1 | 	add	local12, #8
0845c     1E 3D 02 FB | 	rdlong	local12, local12
08460     9B 3C 0E F2 | 	cmp	local12, #155 wz
08464     47 00 00 FF 
08468     7C E4 85 F1 | 	sub	objptr, ##36476
0846c     70 00 90 5D |  if_ne	jmp	#LR__0728
08470     1C 3D 02 F6 | 	mov	local12, local10
08474     01 3C 86 F1 | 	sub	local12, #1
08478     1E 27 02 F6 | 	mov	local01, local12
0847c     01 26 66 F0 | 	shl	local01, #1
08480     1E 27 02 F1 | 	add	local01, local12
08484     02 26 66 F0 | 	shl	local01, #2
08488     47 00 00 FF 
0848c     7C E4 05 F1 | 	add	objptr, ##36476
08490     F2 26 02 F1 | 	add	local01, objptr
08494     08 26 06 F1 | 	add	local01, #8
08498     13 27 02 FB | 	rdlong	local01, local01
0849c     11 26 0E F2 | 	cmp	local01, #17 wz
084a0     47 00 00 FF 
084a4     7C E4 85 F1 | 	sub	objptr, ##36476
084a8     34 00 90 5D |  if_ne	jmp	#LR__0728
084ac     1C 3D 02 F6 | 	mov	local12, local10
084b0     01 3C 86 F1 | 	sub	local12, #1
084b4     1E 27 02 F6 | 	mov	local01, local12
084b8     01 26 66 F0 | 	shl	local01, #1
084bc     1E 27 02 F1 | 	add	local01, local12
084c0     02 26 66 F0 | 	shl	local01, #2
084c4     47 00 00 FF 
084c8     7C E4 05 F1 | 	add	objptr, ##36476
084cc     F2 26 02 F1 | 	add	local01, objptr
084d0     08 26 06 F1 | 	add	local01, #8
084d4     13 25 68 FC | 	wrlong	#18, local01
084d8     47 00 00 FF 
084dc     7C E4 85 F1 | 	sub	objptr, ##36476
084e0                 | LR__0728
084e0     01 38 86 F1 | 	sub	local10, #1
084e4     01 38 56 F2 | 	cmps	local10, #1 wc
084e8     50 FF 9F 3D |  if_ae	jmp	#LR__0727
084ec                 | LR__0729
084ec                 | LR__0730
084ec                 | ' return err
084ec     18 FB 01 F6 | 	mov	result1, local06
084f0     A7 F0 03 F6 | 	mov	ptra, fp
084f4     B2 00 A0 FD | 	call	#popregs_
084f8                 | _compile_immediate_assign_ret
084f8     2D 00 64 FD | 	ret
084fc                 | 
084fc                 | ' 
084fc                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
084fc                 | ' 
084fc                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
084fc                 | _compile
084fc     03 4A 05 F6 | 	mov	COUNT_, #3
08500     A8 00 A0 FD | 	call	#pushregs_
08504     09 27 02 F6 | 	mov	local01, arg01
08508     0B 29 02 F6 | 	mov	local02, arg03
0850c     47 00 00 FF 
08510     7C E4 05 F1 | 	add	objptr, ##36476
08514     F2 26 62 FC | 	wrlong	local01, objptr
08518     04 E4 05 F1 | 	add	objptr, #4
0851c     F2 14 62 FC | 	wrlong	arg02, objptr
08520     47 00 00 FF 
08524     80 E4 85 F1 | 	sub	objptr, ##36480
08528     14 13 02 F6 | 	mov	arg01, local02
0852c     01 12 06 F1 | 	add	arg01, #1
08530     13 15 02 F6 | 	mov	arg02, local01
08534     48 F2 BF FD | 	call	#_compile_immediate
08538     FD 2A 0A F6 | 	mov	local03, result1 wz
0853c                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
0853c                 | ' ucompiledline(0)=alinemajor
0853c                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
0853c                 | ' 
0853c                 | ' ' cont: 
0853c                 | ' ' 0 - this is the first part of the line that will continue
0853c                 | ' ' 1 - this is the continuation of the line
0853c                 | ' ' 2 - this is the last continued line
0853c                 | ' ' 3 - this is the one and only part
0853c                 | ' 
0853c                 | ' err=compile_immediate(cont+1,alinemajor) 
0853c                 | ' if err=0 andalso alinemajor>0 then
0853c     74 00 90 5D |  if_ne	jmp	#LR__0745
08540     01 26 16 F2 | 	cmp	local01, #1 wc
08544     6C 00 90 CD |  if_b	jmp	#LR__0745
08548                 | '   if cont=3 orelse cont=2 then 
08548     03 28 0E F2 | 	cmp	local02, #3 wz
0854c     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08550     60 00 90 5D |  if_ne	jmp	#LR__0744
08554                 | '     if alinemajor >lastline then 
08554     4A 00 00 FF 
08558     8C E4 05 F1 | 	add	objptr, ##38028
0855c     F2 14 02 FB | 	rdlong	arg02, objptr
08560     4A 00 00 FF 
08564     8C E4 85 F1 | 	sub	objptr, ##38028
08568     0A 27 1A F2 | 	cmp	local01, arg02 wcz
0856c     0C 00 90 ED |  if_be	jmp	#LR__0740
08570     13 13 02 F6 | 	mov	arg01, local01
08574     40 F1 BF FD | 	call	#_add_line_at_end
08578     38 00 90 FD | 	jmp	#LR__0743
0857c                 | LR__0740
0857c     13 13 02 F6 | 	mov	arg01, local01
08580     04 EB BF FD | 	call	#_deleteline
08584                 | '       deleteline(alinemajor)  
08584                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
08584     4A 00 00 FF 
08588     8C E4 05 F1 | 	add	objptr, ##38028
0858c     F2 14 02 FB | 	rdlong	arg02, objptr
08590     4A 00 00 FF 
08594     8C E4 85 F1 | 	sub	objptr, ##38028
08598     0A 27 1A F2 | 	cmp	local01, arg02 wcz
0859c     0C 00 90 ED |  if_be	jmp	#LR__0741
085a0     13 13 02 F6 | 	mov	arg01, local01
085a4     10 F1 BF FD | 	call	#_add_line_at_end
085a8     08 00 90 FD | 	jmp	#LR__0742
085ac                 | LR__0741
085ac     13 13 02 F6 | 	mov	arg01, local01
085b0     E8 EE BF FD | 	call	#_insertline
085b4                 | LR__0742
085b4                 | LR__0743
085b4                 | LR__0744
085b4                 | LR__0745
085b4                 | ' return err
085b4     15 FB 01 F6 | 	mov	result1, local03
085b8     A7 F0 03 F6 | 	mov	ptra, fp
085bc     B2 00 A0 FD | 	call	#popregs_
085c0                 | _compile_ret
085c0     2D 00 64 FD | 	ret
085c4                 | 
085c4                 | ' 
085c4                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
085c4                 | ' 
085c4                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
085c4                 | _compile_assign
085c4     03 4A 05 F6 | 	mov	COUNT_, #3
085c8     A8 00 A0 FD | 	call	#pushregs_
085cc     09 27 02 F6 | 	mov	local01, arg01
085d0     0B 29 02 F6 | 	mov	local02, arg03
085d4     47 00 00 FF 
085d8     7C E4 05 F1 | 	add	objptr, ##36476
085dc     F2 26 62 FC | 	wrlong	local01, objptr
085e0     04 E4 05 F1 | 	add	objptr, #4
085e4     F2 14 62 FC | 	wrlong	arg02, objptr
085e8     47 00 00 FF 
085ec     80 E4 85 F1 | 	sub	objptr, ##36480
085f0     14 13 02 F6 | 	mov	arg01, local02
085f4     01 12 06 F1 | 	add	arg01, #1
085f8     54 FB BF FD | 	call	#_compile_immediate_assign
085fc     FD 2A 02 F6 | 	mov	local03, result1
08600                 | ' 
08600                 | ' ucompiledline(0)=alinemajor
08600                 | ' ucompiledline(1)=alineminor
08600                 | ' 
08600                 | ' err=compile_immediate_assign(cont+1) 
08600                 | ' if alinemajor>0 then
08600     01 26 16 F2 | 	cmp	local01, #1 wc
08604     6C 00 90 CD |  if_b	jmp	#LR__0755
08608                 | '   if cont=3 orelse cont=2 then 
08608     03 28 0E F2 | 	cmp	local02, #3 wz
0860c     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08610     60 00 90 5D |  if_ne	jmp	#LR__0754
08614                 | '     if alinemajor >lastline then 
08614     4A 00 00 FF 
08618     8C E4 05 F1 | 	add	objptr, ##38028
0861c     F2 14 02 FB | 	rdlong	arg02, objptr
08620     4A 00 00 FF 
08624     8C E4 85 F1 | 	sub	objptr, ##38028
08628     0A 27 1A F2 | 	cmp	local01, arg02 wcz
0862c     0C 00 90 ED |  if_be	jmp	#LR__0750
08630     13 13 02 F6 | 	mov	arg01, local01
08634     80 F0 BF FD | 	call	#_add_line_at_end
08638     38 00 90 FD | 	jmp	#LR__0753
0863c                 | LR__0750
0863c     13 13 02 F6 | 	mov	arg01, local01
08640     44 EA BF FD | 	call	#_deleteline
08644                 | '       deleteline(alinemajor)  
08644                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
08644     4A 00 00 FF 
08648     8C E4 05 F1 | 	add	objptr, ##38028
0864c     F2 14 02 FB | 	rdlong	arg02, objptr
08650     4A 00 00 FF 
08654     8C E4 85 F1 | 	sub	objptr, ##38028
08658     0A 27 1A F2 | 	cmp	local01, arg02 wcz
0865c     0C 00 90 ED |  if_be	jmp	#LR__0751
08660     13 13 02 F6 | 	mov	arg01, local01
08664     50 F0 BF FD | 	call	#_add_line_at_end
08668     08 00 90 FD | 	jmp	#LR__0752
0866c                 | LR__0751
0866c     13 13 02 F6 | 	mov	arg01, local01
08670     28 EE BF FD | 	call	#_insertline
08674                 | LR__0752
08674                 | LR__0753
08674                 | LR__0754
08674                 | LR__0755
08674                 | ' return err
08674     15 FB 01 F6 | 	mov	result1, local03
08678     A7 F0 03 F6 | 	mov	ptra, fp
0867c     B2 00 A0 FD | 	call	#popregs_
08680                 | _compile_assign_ret
08680     2D 00 64 FD | 	ret
08684                 | 
08684                 | ' 
08684                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
08684                 | ' 
08684                 | ' function compile_fun_2p() as ulong
08684                 | _compile_fun_2p
08684     01 4A 05 F6 | 	mov	COUNT_, #1
08688     A8 00 A0 FD | 	call	#pushregs_
0868c     30 37 B0 FD | 	call	#_expr
08690     FD 26 02 F6 | 	mov	local01, result1
08694                 | ' err=expr() : if err>0 then return err
08694     01 26 16 F2 | 	cmp	local01, #1 wc
08698     13 FB 01 36 |  if_ae	mov	result1, local01
0869c     60 00 90 3D |  if_ae	jmp	#LR__0760
086a0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
086a0     37 00 00 FF 
086a4     44 E4 05 F1 | 	add	objptr, ##28228
086a8     F2 26 02 FB | 	rdlong	local01, objptr
086ac     03 26 66 F0 | 	shl	local01, #3
086b0     02 00 00 FF 
086b4     38 E4 85 F1 | 	sub	objptr, ##1080
086b8     F2 26 02 F1 | 	add	local01, objptr
086bc     04 26 06 F1 | 	add	local01, #4
086c0     13 27 02 FB | 	rdlong	local01, local01
086c4     11 26 0E F2 | 	cmp	local01, #17 wz
086c8     35 00 00 FF 
086cc     0C E4 85 F1 | 	sub	objptr, ##27148
086d0     15 FA 05 56 |  if_ne	mov	result1, #21
086d4     28 00 90 5D |  if_ne	jmp	#LR__0760
086d8     37 00 00 FF 
086dc     44 E4 05 F1 | 	add	objptr, ##28228
086e0     F2 26 02 FB | 	rdlong	local01, objptr
086e4     01 26 06 F1 | 	add	local01, #1
086e8     F2 26 62 FC | 	wrlong	local01, objptr
086ec     37 00 00 FF 
086f0     44 E4 85 F1 | 	sub	objptr, ##28228
086f4     C8 36 B0 FD | 	call	#_expr
086f8                 | ' err=expr() : if err>0 then return err
086f8     01 FA 15 F2 | 	cmp	result1, #1 wc
086fc                 | ' return 0
086fc     00 FA 05 C6 |  if_b	mov	result1, #0
08700                 | LR__0760
08700     A7 F0 03 F6 | 	mov	ptra, fp
08704     B2 00 A0 FD | 	call	#popregs_
08708                 | _compile_fun_2p_ret
08708     2D 00 64 FD | 	ret
0870c                 | 
0870c                 | ' 
0870c                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
0870c                 | ' 
0870c                 | ' function compile_fun_3p() as ulong
0870c                 | _compile_fun_3p
0870c     01 4A 05 F6 | 	mov	COUNT_, #1
08710     A8 00 A0 FD | 	call	#pushregs_
08714     A8 36 B0 FD | 	call	#_expr
08718     FD 26 02 F6 | 	mov	local01, result1
0871c                 | ' err=expr() : if err>0 then return err
0871c     01 26 16 F2 | 	cmp	local01, #1 wc
08720     13 FB 01 36 |  if_ae	mov	result1, local01
08724     C8 00 90 3D |  if_ae	jmp	#LR__0770
08728                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08728     37 00 00 FF 
0872c     44 E4 05 F1 | 	add	objptr, ##28228
08730     F2 26 02 FB | 	rdlong	local01, objptr
08734     03 26 66 F0 | 	shl	local01, #3
08738     02 00 00 FF 
0873c     38 E4 85 F1 | 	sub	objptr, ##1080
08740     F2 26 02 F1 | 	add	local01, objptr
08744     04 26 06 F1 | 	add	local01, #4
08748     13 27 02 FB | 	rdlong	local01, local01
0874c     11 26 0E F2 | 	cmp	local01, #17 wz
08750     35 00 00 FF 
08754     0C E4 85 F1 | 	sub	objptr, ##27148
08758     15 FA 05 56 |  if_ne	mov	result1, #21
0875c     90 00 90 5D |  if_ne	jmp	#LR__0770
08760     37 00 00 FF 
08764     44 E4 05 F1 | 	add	objptr, ##28228
08768     F2 26 02 FB | 	rdlong	local01, objptr
0876c     01 26 06 F1 | 	add	local01, #1
08770     F2 26 62 FC | 	wrlong	local01, objptr
08774     37 00 00 FF 
08778     44 E4 85 F1 | 	sub	objptr, ##28228
0877c     40 36 B0 FD | 	call	#_expr
08780     FD 26 02 F6 | 	mov	local01, result1
08784                 | ' err=expr() : if err>0 then return err
08784     01 26 16 F2 | 	cmp	local01, #1 wc
08788     13 FB 01 36 |  if_ae	mov	result1, local01
0878c     60 00 90 3D |  if_ae	jmp	#LR__0770
08790                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08790     37 00 00 FF 
08794     44 E4 05 F1 | 	add	objptr, ##28228
08798     F2 26 02 FB | 	rdlong	local01, objptr
0879c     03 26 66 F0 | 	shl	local01, #3
087a0     02 00 00 FF 
087a4     38 E4 85 F1 | 	sub	objptr, ##1080
087a8     F2 26 02 F1 | 	add	local01, objptr
087ac     04 26 06 F1 | 	add	local01, #4
087b0     13 27 02 FB | 	rdlong	local01, local01
087b4     11 26 0E F2 | 	cmp	local01, #17 wz
087b8     35 00 00 FF 
087bc     0C E4 85 F1 | 	sub	objptr, ##27148
087c0     15 FA 05 56 |  if_ne	mov	result1, #21
087c4     28 00 90 5D |  if_ne	jmp	#LR__0770
087c8     37 00 00 FF 
087cc     44 E4 05 F1 | 	add	objptr, ##28228
087d0     F2 26 02 FB | 	rdlong	local01, objptr
087d4     01 26 06 F1 | 	add	local01, #1
087d8     F2 26 62 FC | 	wrlong	local01, objptr
087dc     37 00 00 FF 
087e0     44 E4 85 F1 | 	sub	objptr, ##28228
087e4     D8 35 B0 FD | 	call	#_expr
087e8                 | ' err=expr() : if err>0 then return err
087e8     01 FA 15 F2 | 	cmp	result1, #1 wc
087ec                 | ' return 0
087ec     00 FA 05 C6 |  if_b	mov	result1, #0
087f0                 | LR__0770
087f0     A7 F0 03 F6 | 	mov	ptra, fp
087f4     B2 00 A0 FD | 	call	#popregs_
087f8                 | _compile_fun_3p_ret
087f8     2D 00 64 FD | 	ret
087fc                 | 
087fc                 | ' 
087fc                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
087fc                 | ' 
087fc                 | ' function compile_fun_4p() as ulong
087fc                 | _compile_fun_4p
087fc     01 4A 05 F6 | 	mov	COUNT_, #1
08800     A8 00 A0 FD | 	call	#pushregs_
08804     B8 35 B0 FD | 	call	#_expr
08808     FD 26 02 F6 | 	mov	local01, result1
0880c                 | ' err=expr() : if err>0 then return err
0880c     01 26 16 F2 | 	cmp	local01, #1 wc
08810     13 FB 01 36 |  if_ae	mov	result1, local01
08814     30 01 90 3D |  if_ae	jmp	#LR__0780
08818                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08818     37 00 00 FF 
0881c     44 E4 05 F1 | 	add	objptr, ##28228
08820     F2 26 02 FB | 	rdlong	local01, objptr
08824     03 26 66 F0 | 	shl	local01, #3
08828     02 00 00 FF 
0882c     38 E4 85 F1 | 	sub	objptr, ##1080
08830     F2 26 02 F1 | 	add	local01, objptr
08834     04 26 06 F1 | 	add	local01, #4
08838     13 27 02 FB | 	rdlong	local01, local01
0883c     11 26 0E F2 | 	cmp	local01, #17 wz
08840     35 00 00 FF 
08844     0C E4 85 F1 | 	sub	objptr, ##27148
08848     15 FA 05 56 |  if_ne	mov	result1, #21
0884c     F8 00 90 5D |  if_ne	jmp	#LR__0780
08850     37 00 00 FF 
08854     44 E4 05 F1 | 	add	objptr, ##28228
08858     F2 26 02 FB | 	rdlong	local01, objptr
0885c     01 26 06 F1 | 	add	local01, #1
08860     F2 26 62 FC | 	wrlong	local01, objptr
08864     37 00 00 FF 
08868     44 E4 85 F1 | 	sub	objptr, ##28228
0886c     50 35 B0 FD | 	call	#_expr
08870     FD 26 02 F6 | 	mov	local01, result1
08874                 | ' err=expr() : if err>0 then return err
08874     01 26 16 F2 | 	cmp	local01, #1 wc
08878     13 FB 01 36 |  if_ae	mov	result1, local01
0887c     C8 00 90 3D |  if_ae	jmp	#LR__0780
08880                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08880     37 00 00 FF 
08884     44 E4 05 F1 | 	add	objptr, ##28228
08888     F2 26 02 FB | 	rdlong	local01, objptr
0888c     03 26 66 F0 | 	shl	local01, #3
08890     02 00 00 FF 
08894     38 E4 85 F1 | 	sub	objptr, ##1080
08898     F2 26 02 F1 | 	add	local01, objptr
0889c     04 26 06 F1 | 	add	local01, #4
088a0     13 27 02 FB | 	rdlong	local01, local01
088a4     11 26 0E F2 | 	cmp	local01, #17 wz
088a8     35 00 00 FF 
088ac     0C E4 85 F1 | 	sub	objptr, ##27148
088b0     15 FA 05 56 |  if_ne	mov	result1, #21
088b4     90 00 90 5D |  if_ne	jmp	#LR__0780
088b8     37 00 00 FF 
088bc     44 E4 05 F1 | 	add	objptr, ##28228
088c0     F2 26 02 FB | 	rdlong	local01, objptr
088c4     01 26 06 F1 | 	add	local01, #1
088c8     F2 26 62 FC | 	wrlong	local01, objptr
088cc     37 00 00 FF 
088d0     44 E4 85 F1 | 	sub	objptr, ##28228
088d4     E8 34 B0 FD | 	call	#_expr
088d8     FD 26 02 F6 | 	mov	local01, result1
088dc                 | ' err=expr() : if err>0 then return err
088dc     01 26 16 F2 | 	cmp	local01, #1 wc
088e0     13 FB 01 36 |  if_ae	mov	result1, local01
088e4     60 00 90 3D |  if_ae	jmp	#LR__0780
088e8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
088e8     37 00 00 FF 
088ec     44 E4 05 F1 | 	add	objptr, ##28228
088f0     F2 26 02 FB | 	rdlong	local01, objptr
088f4     03 26 66 F0 | 	shl	local01, #3
088f8     02 00 00 FF 
088fc     38 E4 85 F1 | 	sub	objptr, ##1080
08900     F2 26 02 F1 | 	add	local01, objptr
08904     04 26 06 F1 | 	add	local01, #4
08908     13 27 02 FB | 	rdlong	local01, local01
0890c     11 26 0E F2 | 	cmp	local01, #17 wz
08910     35 00 00 FF 
08914     0C E4 85 F1 | 	sub	objptr, ##27148
08918     15 FA 05 56 |  if_ne	mov	result1, #21
0891c     28 00 90 5D |  if_ne	jmp	#LR__0780
08920     37 00 00 FF 
08924     44 E4 05 F1 | 	add	objptr, ##28228
08928     F2 26 02 FB | 	rdlong	local01, objptr
0892c     01 26 06 F1 | 	add	local01, #1
08930     F2 26 62 FC | 	wrlong	local01, objptr
08934     37 00 00 FF 
08938     44 E4 85 F1 | 	sub	objptr, ##28228
0893c     80 34 B0 FD | 	call	#_expr
08940                 | ' err=expr() : if err>0 then return err
08940     01 FA 15 F2 | 	cmp	result1, #1 wc
08944                 | ' return 0
08944     00 FA 05 C6 |  if_b	mov	result1, #0
08948                 | LR__0780
08948     A7 F0 03 F6 | 	mov	ptra, fp
0894c     B2 00 A0 FD | 	call	#popregs_
08950                 | _compile_fun_4p_ret
08950     2D 00 64 FD | 	ret
08954                 | 
08954                 | ' 
08954                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08954                 | ' 
08954                 | ' function compile_fun_varp() as ulong,ulong 
08954                 | _compile_fun_varp
08954     03 4A 05 F6 | 	mov	COUNT_, #3
08958     A8 00 A0 FD | 	call	#pushregs_
0895c     00 26 06 F6 | 	mov	local01, #0
08960                 | ' 
08960                 | ' i=0 : err=0
08960                 | ' if lparts(ct).token<>token_end then
08960     37 00 00 FF 
08964     44 E4 05 F1 | 	add	objptr, ##28228
08968     F2 28 02 FB | 	rdlong	local02, objptr
0896c     03 28 66 F0 | 	shl	local02, #3
08970     02 00 00 FF 
08974     38 E4 85 F1 | 	sub	objptr, ##1080
08978     F2 28 02 F1 | 	add	local02, objptr
0897c     04 28 06 F1 | 	add	local02, #4
08980     14 29 02 FB | 	rdlong	local02, local02
08984     FE 29 0E F2 | 	cmp	local02, #510 wz
08988     35 00 00 FF 
0898c     0C E4 85 F1 | 	sub	objptr, ##27148
08990     88 00 90 AD |  if_e	jmp	#LR__0791
08994                 | '   do
08994                 | LR__0790
08994     28 34 B0 FD | 	call	#_expr
08998     01 26 06 F1 | 	add	local01, #1
0899c                 | '     expr()
0899c                 | '     i+=1
0899c                 | '     if lparts(ct).token=token_comma then ct+=1
0899c     37 00 00 FF 
089a0     44 E4 05 F1 | 	add	objptr, ##28228
089a4     F2 28 02 FB | 	rdlong	local02, objptr
089a8     03 28 66 F0 | 	shl	local02, #3
089ac     02 00 00 FF 
089b0     38 E4 85 F1 | 	sub	objptr, ##1080
089b4     F2 28 02 F1 | 	add	local02, objptr
089b8     04 28 06 F1 | 	add	local02, #4
089bc     14 29 02 FB | 	rdlong	local02, local02
089c0     11 28 0E F2 | 	cmp	local02, #17 wz
089c4     35 00 00 FF 
089c8     0C E4 85 F1 | 	sub	objptr, ##27148
089cc     37 00 00 AF 
089d0     44 E4 05 A1 |  if_e	add	objptr, ##28228
089d4     F2 2A 02 AB |  if_e	rdlong	local03, objptr
089d8     01 2A 06 A1 |  if_e	add	local03, #1
089dc     F2 2A 62 AC |  if_e	wrlong	local03, objptr
089e0     37 00 00 AF 
089e4     44 E4 85 A1 |  if_e	sub	objptr, ##28228
089e8                 | '     if lparts(ct).token=token_end then exit loop
089e8     37 00 00 FF 
089ec     44 E4 05 F1 | 	add	objptr, ##28228
089f0     F2 28 02 FB | 	rdlong	local02, objptr
089f4     03 28 66 F0 | 	shl	local02, #3
089f8     02 00 00 FF 
089fc     38 E4 85 F1 | 	sub	objptr, ##1080
08a00     F2 28 02 F1 | 	add	local02, objptr
08a04     04 28 06 F1 | 	add	local02, #4
08a08     14 29 02 FB | 	rdlong	local02, local02
08a0c     FE 29 0E F2 | 	cmp	local02, #510 wz
08a10     35 00 00 FF 
08a14     0C E4 85 F1 | 	sub	objptr, ##27148
08a18     78 FF 9F 5D |  if_ne	jmp	#LR__0790
08a1c                 | LR__0791
08a1c                 | ' return i,err
08a1c     13 FB 01 F6 | 	mov	result1, local01
08a20     00 FC 05 F6 | 	mov	result2, #0
08a24     A7 F0 03 F6 | 	mov	ptra, fp
08a28     B2 00 A0 FD | 	call	#popregs_
08a2c                 | _compile_fun_varp_ret
08a2c     2D 00 64 FD | 	ret
08a30                 | 
08a30                 | ' 
08a30                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08a30                 | ' 
08a30                 | ' function compile_read() as ulong,ulong 
08a30                 | _compile_read
08a30     04 4A 05 F6 | 	mov	COUNT_, #4
08a34     A8 00 A0 FD | 	call	#pushregs_
08a38     00 26 06 F6 | 	mov	local01, #0
08a3c                 | ' 
08a3c                 | ' i=0 : err=0
08a3c                 | ' if lparts(ct).token<>token_end then
08a3c     37 00 00 FF 
08a40     44 E4 05 F1 | 	add	objptr, ##28228
08a44     F2 28 02 FB | 	rdlong	local02, objptr
08a48     03 28 66 F0 | 	shl	local02, #3
08a4c     02 00 00 FF 
08a50     38 E4 85 F1 | 	sub	objptr, ##1080
08a54     F2 28 02 F1 | 	add	local02, objptr
08a58     04 28 06 F1 | 	add	local02, #4
08a5c     14 29 02 FB | 	rdlong	local02, local02
08a60     FE 29 0E F2 | 	cmp	local02, #510 wz
08a64     35 00 00 FF 
08a68     0C E4 85 F1 | 	sub	objptr, ##27148
08a6c     98 00 90 AD |  if_e	jmp	#LR__0801
08a70                 | '   do
08a70                 | LR__0800
08a70     B8 2F B0 FD | 	call	#_getaddr
08a74     FD 2A 02 F6 | 	mov	local03, result1
08a78     37 00 00 FF 
08a7c     44 E4 05 F1 | 	add	objptr, ##28228
08a80     F2 28 02 FB | 	rdlong	local02, objptr
08a84     01 28 06 F1 | 	add	local02, #1
08a88     F2 28 62 FC | 	wrlong	local02, objptr
08a8c     01 26 06 F1 | 	add	local01, #1
08a90                 | '     err=getaddr() :ct+=1
08a90                 | '     i+=1 
08a90                 | '     if lparts(ct).token=token_comma then ct+=1 
08a90     03 28 66 F0 | 	shl	local02, #3
08a94     02 00 00 FF 
08a98     38 E4 85 F1 | 	sub	objptr, ##1080
08a9c     F2 28 02 F1 | 	add	local02, objptr
08aa0     04 28 06 F1 | 	add	local02, #4
08aa4     14 29 02 FB | 	rdlong	local02, local02
08aa8     11 28 0E F2 | 	cmp	local02, #17 wz
08aac     35 00 00 FF 
08ab0     0C E4 85 F1 | 	sub	objptr, ##27148
08ab4     37 00 00 AF 
08ab8     44 E4 05 A1 |  if_e	add	objptr, ##28228
08abc     F2 2C 02 AB |  if_e	rdlong	local04, objptr
08ac0     01 2C 06 A1 |  if_e	add	local04, #1
08ac4     F2 2C 62 AC |  if_e	wrlong	local04, objptr
08ac8     37 00 00 AF 
08acc     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08ad0                 | '     if lparts(ct).token=token_end then exit loop
08ad0     37 00 00 FF 
08ad4     44 E4 05 F1 | 	add	objptr, ##28228
08ad8     F2 28 02 FB | 	rdlong	local02, objptr
08adc     03 28 66 F0 | 	shl	local02, #3
08ae0     02 00 00 FF 
08ae4     38 E4 85 F1 | 	sub	objptr, ##1080
08ae8     F2 28 02 F1 | 	add	local02, objptr
08aec     04 28 06 F1 | 	add	local02, #4
08af0     14 29 02 FB | 	rdlong	local02, local02
08af4     FE 29 0E F2 | 	cmp	local02, #510 wz
08af8     35 00 00 FF 
08afc     0C E4 85 F1 | 	sub	objptr, ##27148
08b00     08 00 90 AD |  if_e	jmp	#LR__0802
08b04     68 FF 9F FD | 	jmp	#LR__0800
08b08                 | LR__0801
08b08     36 2A 06 F6 | 	mov	local03, #54
08b0c                 | LR__0802
08b0c                 | ' return i,err
08b0c     13 FB 01 F6 | 	mov	result1, local01
08b10     15 FD 01 F6 | 	mov	result2, local03
08b14     A7 F0 03 F6 | 	mov	ptra, fp
08b18     B2 00 A0 FD | 	call	#popregs_
08b1c                 | _compile_read_ret
08b1c     2D 00 64 FD | 	ret
08b20                 | 
08b20                 | ' 
08b20                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08b20                 | ' 
08b20                 | ' function compile_input() as ulong,ulong 
08b20                 | _compile_input
08b20     0F 4A 05 F6 | 	mov	COUNT_, #15
08b24     A8 00 A0 FD | 	call	#pushregs_
08b28                 | ' 
08b28                 | ' if lparts(ct).token=token_string then
08b28     37 00 00 FF 
08b2c     44 E4 05 F1 | 	add	objptr, ##28228
08b30     F2 16 02 FB | 	rdlong	arg03, objptr
08b34     03 16 66 F0 | 	shl	arg03, #3
08b38     02 00 00 FF 
08b3c     38 E4 85 F1 | 	sub	objptr, ##1080
08b40     F2 16 02 F1 | 	add	arg03, objptr
08b44     04 16 06 F1 | 	add	arg03, #4
08b48     0B FD 01 FB | 	rdlong	result2, arg03
08b4c     01 00 00 FF 
08b50     03 FC 0D F2 | 	cmp	result2, ##515 wz
08b54     35 00 00 FF 
08b58     0C E4 85 F1 | 	sub	objptr, ##27148
08b5c     38 06 90 5D |  if_ne	jmp	#LR__0817
08b60     37 00 00 FF 
08b64     44 E4 05 F1 | 	add	objptr, ##28228
08b68     F2 14 02 FB | 	rdlong	arg02, objptr
08b6c     03 14 66 F0 | 	shl	arg02, #3
08b70     02 00 00 FF 
08b74     38 E4 85 F1 | 	sub	objptr, ##1080
08b78     F2 14 02 F1 | 	add	arg02, objptr
08b7c     0A 13 02 FB | 	rdlong	arg01, arg02
08b80     35 00 00 FF 
08b84     0C E4 85 F1 | 	sub	objptr, ##27148
08b88     09 2D 02 F6 | 	mov	local04, arg01
08b8c     97 06 48 FB | 	callpa	#(@LR__0811-@LR__0810)>>2,fcache_load_ptr_
08b90                 | LR__0810
08b90     16 FB C9 FA | 	rdbyte	result1, local04 wz
08b94     01 2C 06 51 |  if_ne	add	local04, #1
08b98     F4 FF 9F 5D |  if_ne	jmp	#LR__0810
08b9c                 | LR__0811
08b9c     09 2D 82 F1 | 	sub	local04, arg01
08ba0     16 FB 01 F6 | 	mov	result1, local04
08ba4     52 00 00 FF 
08ba8     F0 E4 05 F1 | 	add	objptr, ##42224
08bac     F2 FA 61 FC | 	wrlong	result1, objptr
08bb0     58 E4 85 F1 | 	sub	objptr, #88
08bb4     F2 12 02 FB | 	rdlong	arg01, objptr
08bb8     FD 12 82 F1 | 	sub	arg01, result1
08bbc     04 12 86 F1 | 	sub	arg01, #4
08bc0     03 12 26 F5 | 	andn	arg01, #3
08bc4     F2 12 62 FC | 	wrlong	arg01, objptr
08bc8     58 E4 05 F1 | 	add	objptr, #88
08bcc     F2 14 02 FB | 	rdlong	arg02, objptr
08bd0     52 00 00 FF 
08bd4     F0 E4 85 F1 | 	sub	objptr, ##42224
08bd8     40 A5 B1 FD | 	call	#_pslpoke
08bdc                 | '   pslpoke memtop,l
08bdc                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08bdc     01 2E 06 F6 | 	mov	local05, #1
08be0     52 00 00 FF 
08be4     F0 E4 05 F1 | 	add	objptr, ##42224
08be8     F2 30 02 FB | 	rdlong	local06, objptr
08bec     52 00 00 FF 
08bf0     F0 E4 85 F1 | 	sub	objptr, ##42224
08bf4     01 30 06 F1 | 	add	local06, #1
08bf8                 | LR__0812
08bf8     18 2F 52 F2 | 	cmps	local05, local06 wc
08bfc     5C 00 90 3D |  if_ae	jmp	#LR__0813
08c00     52 00 00 FF 
08c04     98 E4 05 F1 | 	add	objptr, ##42136
08c08     F2 32 02 FB | 	rdlong	local07, objptr
08c0c     03 32 06 F1 | 	add	local07, #3
08c10     17 33 02 F1 | 	add	local07, local05
08c14     1B 00 00 FF 
08c18     54 E4 85 F1 | 	sub	objptr, ##13908
08c1c     F2 14 02 FB | 	rdlong	arg02, objptr
08c20     03 14 66 F0 | 	shl	arg02, #3
08c24     02 00 00 FF 
08c28     38 E4 85 F1 | 	sub	objptr, ##1080
08c2c     F2 14 02 F1 | 	add	arg02, objptr
08c30     0A 13 02 FB | 	rdlong	arg01, arg02
08c34     17 15 02 F6 | 	mov	arg02, local05
08c38     01 16 06 F6 | 	mov	arg03, #1
08c3c     35 00 00 FF 
08c40     0C E4 85 F1 | 	sub	objptr, ##27148
08c44     BC FE B1 FD | 	call	#__system__Mid_S
08c48     FD 14 C2 FA | 	rdbyte	arg02, result1
08c4c     19 13 02 F6 | 	mov	arg01, local07
08c50     58 A5 B1 FD | 	call	#_pspoke
08c54     01 2E 06 F1 | 	add	local05, #1
08c58     9C FF 9F FD | 	jmp	#LR__0812
08c5c                 | LR__0813
08c5c     52 00 00 FF 
08c60     98 E4 05 F1 | 	add	objptr, ##42136
08c64     F2 26 02 FB | 	rdlong	local01, objptr
08c68     2B 2A 06 F6 | 	mov	local03, #43
08c6c     13 35 02 F6 | 	mov	local08, local01
08c70     14 33 02 F6 | 	mov	local07, local02
08c74     15 37 02 F6 | 	mov	local09, local03
08c78     08 00 00 FF 
08c7c     1C E4 85 F1 | 	sub	objptr, ##4124
08c80     F2 30 02 FB | 	rdlong	local06, objptr
08c84     18 2F 02 F6 | 	mov	local05, local06
08c88     01 2E 66 F0 | 	shl	local05, #1
08c8c     18 2F 02 F1 | 	add	local05, local06
08c90     02 2E 66 F0 | 	shl	local05, #2
08c94     03 00 00 FF 
08c98     00 E4 85 F1 | 	sub	objptr, ##1536
08c9c     F2 2E 02 F1 | 	add	local05, objptr
08ca0     17 35 62 FC | 	wrlong	local08, local05
08ca4     03 00 00 FF 
08ca8     00 E4 05 F1 | 	add	objptr, ##1536
08cac     F2 34 02 FB | 	rdlong	local08, objptr
08cb0     1A 31 02 F6 | 	mov	local06, local08
08cb4     01 30 66 F0 | 	shl	local06, #1
08cb8     1A 31 02 F1 | 	add	local06, local08
08cbc     02 30 66 F0 | 	shl	local06, #2
08cc0     03 00 00 FF 
08cc4     00 E4 85 F1 | 	sub	objptr, ##1536
08cc8     F2 30 02 F1 | 	add	local06, objptr
08ccc     04 30 06 F1 | 	add	local06, #4
08cd0     18 33 62 FC | 	wrlong	local07, local06
08cd4     03 00 00 FF 
08cd8     00 E4 05 F1 | 	add	objptr, ##1536
08cdc     F2 34 02 FB | 	rdlong	local08, objptr
08ce0     1A 33 02 F6 | 	mov	local07, local08
08ce4     01 32 66 F0 | 	shl	local07, #1
08ce8     1A 33 02 F1 | 	add	local07, local08
08cec     02 32 66 F0 | 	shl	local07, #2
08cf0     03 00 00 FF 
08cf4     00 E4 85 F1 | 	sub	objptr, ##1536
08cf8     F2 32 02 F1 | 	add	local07, objptr
08cfc     08 32 06 F1 | 	add	local07, #8
08d00     19 37 62 FC | 	wrlong	local09, local07
08d04     03 00 00 FF 
08d08     00 E4 05 F1 | 	add	objptr, ##1536
08d0c     F2 34 02 FB | 	rdlong	local08, objptr
08d10     01 34 06 F1 | 	add	local08, #1
08d14     F2 34 62 FC | 	wrlong	local08, objptr
08d18     13 00 00 FF 
08d1c     38 E4 85 F1 | 	sub	objptr, ##9784
08d20     F2 34 02 FB | 	rdlong	local08, objptr
08d24     01 34 06 F1 | 	add	local08, #1
08d28     F2 34 62 FC | 	wrlong	local08, objptr
08d2c                 | '   t1.result.uresult=memtop
08d2c                 | '   t1.result_type=result_string2  
08d2c                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08d2c                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08d2c     03 34 66 F0 | 	shl	local08, #3
08d30     02 00 00 FF 
08d34     38 E4 85 F1 | 	sub	objptr, ##1080
08d38     F2 34 02 F1 | 	add	local08, objptr
08d3c     04 34 06 F1 | 	add	local08, #4
08d40     1A 35 02 FB | 	rdlong	local08, local08
08d44     11 34 0E F2 | 	cmp	local08, #17 wz
08d48     35 00 00 FF 
08d4c     0C E4 85 F1 | 	sub	objptr, ##27148
08d50     60 01 90 5D |  if_ne	jmp	#LR__0814
08d54     21 2A 06 F6 | 	mov	local03, #33
08d58     13 35 02 F6 | 	mov	local08, local01
08d5c     14 33 02 F6 | 	mov	local07, local02
08d60     15 39 02 F6 | 	mov	local10, local03
08d64     4A 00 00 FF 
08d68     7C E4 05 F1 | 	add	objptr, ##38012
08d6c     F2 3A 02 FB | 	rdlong	local11, objptr
08d70     1D 3D 02 F6 | 	mov	local12, local11
08d74     01 3C 66 F0 | 	shl	local12, #1
08d78     1D 3D 02 F1 | 	add	local12, local11
08d7c     02 3C 66 F0 | 	shl	local12, #2
08d80     03 00 00 FF 
08d84     00 E4 85 F1 | 	sub	objptr, ##1536
08d88     F2 3C 02 F1 | 	add	local12, objptr
08d8c     1E 35 62 FC | 	wrlong	local08, local12
08d90     03 00 00 FF 
08d94     00 E4 05 F1 | 	add	objptr, ##1536
08d98     F2 3E 02 FB | 	rdlong	local13, objptr
08d9c     1F 35 02 F6 | 	mov	local08, local13
08da0     01 34 66 F0 | 	shl	local08, #1
08da4     1F 35 02 F1 | 	add	local08, local13
08da8     02 34 66 F0 | 	shl	local08, #2
08dac     03 00 00 FF 
08db0     00 E4 85 F1 | 	sub	objptr, ##1536
08db4     F2 34 02 F1 | 	add	local08, objptr
08db8     04 34 06 F1 | 	add	local08, #4
08dbc     1A 33 62 FC | 	wrlong	local07, local08
08dc0     03 00 00 FF 
08dc4     00 E4 05 F1 | 	add	objptr, ##1536
08dc8     F2 34 02 FB | 	rdlong	local08, objptr
08dcc     1A 41 02 F6 | 	mov	local14, local08
08dd0     01 40 66 F0 | 	shl	local14, #1
08dd4     1A 41 02 F1 | 	add	local14, local08
08dd8     02 40 66 F0 | 	shl	local14, #2
08ddc     03 00 00 FF 
08de0     00 E4 85 F1 | 	sub	objptr, ##1536
08de4     F2 40 02 F1 | 	add	local14, objptr
08de8     08 40 06 F1 | 	add	local14, #8
08dec     20 39 62 FC | 	wrlong	local10, local14
08df0     03 00 00 FF 
08df4     00 E4 05 F1 | 	add	objptr, ##1536
08df8     F2 34 02 FB | 	rdlong	local08, objptr
08dfc     01 34 06 F1 | 	add	local08, #1
08e00     F2 34 62 FC | 	wrlong	local08, objptr
08e04     44 2A 06 F6 | 	mov	local03, #68
08e08     13 35 02 F6 | 	mov	local08, local01
08e0c     14 33 02 F6 | 	mov	local07, local02
08e10     15 39 02 F6 | 	mov	local10, local03
08e14     F2 40 02 FB | 	rdlong	local14, objptr
08e18     20 3F 02 F6 | 	mov	local13, local14
08e1c     01 3E 66 F0 | 	shl	local13, #1
08e20     20 3F 02 F1 | 	add	local13, local14
08e24     02 3E 66 F0 | 	shl	local13, #2
08e28     03 00 00 FF 
08e2c     00 E4 85 F1 | 	sub	objptr, ##1536
08e30     F2 3E 02 F1 | 	add	local13, objptr
08e34     1F 35 62 FC | 	wrlong	local08, local13
08e38     03 00 00 FF 
08e3c     00 E4 05 F1 | 	add	objptr, ##1536
08e40     F2 40 02 FB | 	rdlong	local14, objptr
08e44     20 3F 02 F6 | 	mov	local13, local14
08e48     01 3E 66 F0 | 	shl	local13, #1
08e4c     20 3F 02 F1 | 	add	local13, local14
08e50     02 3E 66 F0 | 	shl	local13, #2
08e54     03 00 00 FF 
08e58     00 E4 85 F1 | 	sub	objptr, ##1536
08e5c     F2 3E 02 F1 | 	add	local13, objptr
08e60     04 3E 06 F1 | 	add	local13, #4
08e64     1F 33 62 FC | 	wrlong	local07, local13
08e68     03 00 00 FF 
08e6c     00 E4 05 F1 | 	add	objptr, ##1536
08e70     F2 3E 02 FB | 	rdlong	local13, objptr
08e74     1F 41 02 F6 | 	mov	local14, local13
08e78     01 40 66 F0 | 	shl	local14, #1
08e7c     1F 41 02 F1 | 	add	local14, local13
08e80     02 40 66 F0 | 	shl	local14, #2
08e84     03 00 00 FF 
08e88     00 E4 85 F1 | 	sub	objptr, ##1536
08e8c     F2 40 02 F1 | 	add	local14, objptr
08e90     08 40 06 F1 | 	add	local14, #8
08e94     20 39 62 FC | 	wrlong	local10, local14
08e98     03 00 00 FF 
08e9c     00 E4 05 F1 | 	add	objptr, ##1536
08ea0     F2 34 02 FB | 	rdlong	local08, objptr
08ea4     01 34 06 F1 | 	add	local08, #1
08ea8     F2 34 62 FC | 	wrlong	local08, objptr
08eac     4A 00 00 FF 
08eb0     7C E4 85 F1 | 	sub	objptr, ##38012
08eb4                 | LR__0814
08eb4                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08eb4     37 00 00 FF 
08eb8     44 E4 05 F1 | 	add	objptr, ##28228
08ebc     F2 34 02 FB | 	rdlong	local08, objptr
08ec0     03 34 66 F0 | 	shl	local08, #3
08ec4     02 00 00 FF 
08ec8     38 E4 85 F1 | 	sub	objptr, ##1080
08ecc     F2 34 02 F1 | 	add	local08, objptr
08ed0     04 34 06 F1 | 	add	local08, #4
08ed4     1A 41 02 FB | 	rdlong	local14, local08
08ed8     12 40 0E F2 | 	cmp	local14, #18 wz
08edc     35 00 00 FF 
08ee0     0C E4 85 F1 | 	sub	objptr, ##27148
08ee4     60 01 90 5D |  if_ne	jmp	#LR__0815
08ee8     22 2A 06 F6 | 	mov	local03, #34
08eec     13 35 02 F6 | 	mov	local08, local01
08ef0     14 33 02 F6 | 	mov	local07, local02
08ef4     15 39 02 F6 | 	mov	local10, local03
08ef8     4A 00 00 FF 
08efc     7C E4 05 F1 | 	add	objptr, ##38012
08f00     F2 40 02 FB | 	rdlong	local14, objptr
08f04     20 3F 02 F6 | 	mov	local13, local14
08f08     01 3E 66 F0 | 	shl	local13, #1
08f0c     20 3F 02 F1 | 	add	local13, local14
08f10     02 3E 66 F0 | 	shl	local13, #2
08f14     03 00 00 FF 
08f18     00 E4 85 F1 | 	sub	objptr, ##1536
08f1c     F2 3E 02 F1 | 	add	local13, objptr
08f20     1F 35 62 FC | 	wrlong	local08, local13
08f24     03 00 00 FF 
08f28     00 E4 05 F1 | 	add	objptr, ##1536
08f2c     F2 40 02 FB | 	rdlong	local14, objptr
08f30     20 35 02 F6 | 	mov	local08, local14
08f34     01 34 66 F0 | 	shl	local08, #1
08f38     20 35 02 F1 | 	add	local08, local14
08f3c     02 34 66 F0 | 	shl	local08, #2
08f40     03 00 00 FF 
08f44     00 E4 85 F1 | 	sub	objptr, ##1536
08f48     F2 34 02 F1 | 	add	local08, objptr
08f4c     04 34 06 F1 | 	add	local08, #4
08f50     1A 33 62 FC | 	wrlong	local07, local08
08f54     03 00 00 FF 
08f58     00 E4 05 F1 | 	add	objptr, ##1536
08f5c     F2 34 02 FB | 	rdlong	local08, objptr
08f60     1A 41 02 F6 | 	mov	local14, local08
08f64     01 40 66 F0 | 	shl	local14, #1
08f68     1A 41 02 F1 | 	add	local14, local08
08f6c     02 40 66 F0 | 	shl	local14, #2
08f70     03 00 00 FF 
08f74     00 E4 85 F1 | 	sub	objptr, ##1536
08f78     F2 40 02 F1 | 	add	local14, objptr
08f7c     08 40 06 F1 | 	add	local14, #8
08f80     20 39 62 FC | 	wrlong	local10, local14
08f84     03 00 00 FF 
08f88     00 E4 05 F1 | 	add	objptr, ##1536
08f8c     F2 34 02 FB | 	rdlong	local08, objptr
08f90     01 34 06 F1 | 	add	local08, #1
08f94     F2 34 62 FC | 	wrlong	local08, objptr
08f98     44 2A 06 F6 | 	mov	local03, #68
08f9c     13 35 02 F6 | 	mov	local08, local01
08fa0     14 33 02 F6 | 	mov	local07, local02
08fa4     15 39 02 F6 | 	mov	local10, local03
08fa8     F2 40 02 FB | 	rdlong	local14, objptr
08fac     20 3F 02 F6 | 	mov	local13, local14
08fb0     01 3E 66 F0 | 	shl	local13, #1
08fb4     20 3F 02 F1 | 	add	local13, local14
08fb8     02 3E 66 F0 | 	shl	local13, #2
08fbc     03 00 00 FF 
08fc0     00 E4 85 F1 | 	sub	objptr, ##1536
08fc4     F2 3E 02 F1 | 	add	local13, objptr
08fc8     1F 35 62 FC | 	wrlong	local08, local13
08fcc     03 00 00 FF 
08fd0     00 E4 05 F1 | 	add	objptr, ##1536
08fd4     F2 40 02 FB | 	rdlong	local14, objptr
08fd8     20 3F 02 F6 | 	mov	local13, local14
08fdc     01 3E 66 F0 | 	shl	local13, #1
08fe0     20 3F 02 F1 | 	add	local13, local14
08fe4     02 3E 66 F0 | 	shl	local13, #2
08fe8     03 00 00 FF 
08fec     00 E4 85 F1 | 	sub	objptr, ##1536
08ff0     F2 3E 02 F1 | 	add	local13, objptr
08ff4     04 3E 06 F1 | 	add	local13, #4
08ff8     1F 33 62 FC | 	wrlong	local07, local13
08ffc     03 00 00 FF 
09000     00 E4 05 F1 | 	add	objptr, ##1536
09004     F2 3E 02 FB | 	rdlong	local13, objptr
09008     1F 41 02 F6 | 	mov	local14, local13
0900c     01 40 66 F0 | 	shl	local14, #1
09010     1F 41 02 F1 | 	add	local14, local13
09014     02 40 66 F0 | 	shl	local14, #2
09018     03 00 00 FF 
0901c     00 E4 85 F1 | 	sub	objptr, ##1536
09020     F2 40 02 F1 | 	add	local14, objptr
09024     08 40 06 F1 | 	add	local14, #8
09028     20 39 62 FC | 	wrlong	local10, local14
0902c     03 00 00 FF 
09030     00 E4 05 F1 | 	add	objptr, ##1536
09034     F2 34 02 FB | 	rdlong	local08, objptr
09038     01 34 06 F1 | 	add	local08, #1
0903c     F2 34 62 FC | 	wrlong	local08, objptr
09040     4A 00 00 FF 
09044     7C E4 85 F1 | 	sub	objptr, ##38012
09048                 | LR__0815
09048                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
09048     37 00 00 FF 
0904c     44 E4 05 F1 | 	add	objptr, ##28228
09050     F2 34 02 FB | 	rdlong	local08, objptr
09054     03 34 66 F0 | 	shl	local08, #3
09058     02 00 00 FF 
0905c     38 E4 85 F1 | 	sub	objptr, ##1080
09060     F2 34 02 F1 | 	add	local08, objptr
09064     04 34 06 F1 | 	add	local08, #4
09068     1A 41 02 FB | 	rdlong	local14, local08
0906c     12 40 0E F2 | 	cmp	local14, #18 wz
09070     35 00 00 FF 
09074     0C E4 85 F1 | 	sub	objptr, ##27148
09078     00 01 90 AD |  if_e	jmp	#LR__0816
0907c     37 00 00 FF 
09080     44 E4 05 F1 | 	add	objptr, ##28228
09084     F2 34 02 FB | 	rdlong	local08, objptr
09088     03 34 66 F0 | 	shl	local08, #3
0908c     02 00 00 FF 
09090     38 E4 85 F1 | 	sub	objptr, ##1080
09094     F2 34 02 F1 | 	add	local08, objptr
09098     04 34 06 F1 | 	add	local08, #4
0909c     1A 41 02 FB | 	rdlong	local14, local08
090a0     11 40 0E F2 | 	cmp	local14, #17 wz
090a4     35 00 00 FF 
090a8     0C E4 85 F1 | 	sub	objptr, ##27148
090ac     CC 00 90 AD |  if_e	jmp	#LR__0816
090b0     44 2A 06 F6 | 	mov	local03, #68
090b4     13 35 02 F6 | 	mov	local08, local01
090b8     14 33 02 F6 | 	mov	local07, local02
090bc     15 39 02 F6 | 	mov	local10, local03
090c0     4A 00 00 FF 
090c4     7C E4 05 F1 | 	add	objptr, ##38012
090c8     F2 40 02 FB | 	rdlong	local14, objptr
090cc     20 3F 02 F6 | 	mov	local13, local14
090d0     01 3E 66 F0 | 	shl	local13, #1
090d4     20 3F 02 F1 | 	add	local13, local14
090d8     02 3E 66 F0 | 	shl	local13, #2
090dc     03 00 00 FF 
090e0     00 E4 85 F1 | 	sub	objptr, ##1536
090e4     F2 3E 02 F1 | 	add	local13, objptr
090e8     1F 35 62 FC | 	wrlong	local08, local13
090ec     03 00 00 FF 
090f0     00 E4 05 F1 | 	add	objptr, ##1536
090f4     F2 40 02 FB | 	rdlong	local14, objptr
090f8     20 3F 02 F6 | 	mov	local13, local14
090fc     01 3E 66 F0 | 	shl	local13, #1
09100     20 3F 02 F1 | 	add	local13, local14
09104     02 3E 66 F0 | 	shl	local13, #2
09108     03 00 00 FF 
0910c     00 E4 85 F1 | 	sub	objptr, ##1536
09110     F2 3E 02 F1 | 	add	local13, objptr
09114     04 3E 06 F1 | 	add	local13, #4
09118     1F 33 62 FC | 	wrlong	local07, local13
0911c     03 00 00 FF 
09120     00 E4 05 F1 | 	add	objptr, ##1536
09124     F2 3E 02 FB | 	rdlong	local13, objptr
09128     1F 41 02 F6 | 	mov	local14, local13
0912c     01 40 66 F0 | 	shl	local14, #1
09130     1F 41 02 F1 | 	add	local14, local13
09134     02 40 66 F0 | 	shl	local14, #2
09138     03 00 00 FF 
0913c     00 E4 85 F1 | 	sub	objptr, ##1536
09140     F2 40 02 F1 | 	add	local14, objptr
09144     08 40 06 F1 | 	add	local14, #8
09148     20 39 62 FC | 	wrlong	local10, local14
0914c     03 00 00 FF 
09150     00 E4 05 F1 | 	add	objptr, ##1536
09154     F2 34 02 FB | 	rdlong	local08, objptr
09158     01 34 06 F1 | 	add	local08, #1
0915c     F2 34 62 FC | 	wrlong	local08, objptr
09160     13 00 00 FF 
09164     38 E4 85 F1 | 	sub	objptr, ##9784
09168     F2 34 02 FB | 	rdlong	local08, objptr
0916c     01 34 86 F1 | 	sub	local08, #1
09170     F2 34 62 FC | 	wrlong	local08, objptr
09174     37 00 00 FF 
09178     44 E4 85 F1 | 	sub	objptr, ##28228
0917c                 | LR__0816
0917c     37 00 00 FF 
09180     44 E4 05 F1 | 	add	objptr, ##28228
09184     F2 34 02 FB | 	rdlong	local08, objptr
09188     01 34 06 F1 | 	add	local08, #1
0918c     F2 34 62 FC | 	wrlong	local08, objptr
09190     37 00 00 FF 
09194     44 E4 85 F1 | 	sub	objptr, ##28228
09198                 | LR__0817
09198     00 2E 06 F6 | 	mov	local05, #0
0919c                 | ' i=0 : err=0
0919c                 | ' if lparts(ct).token<>token_end then
0919c     37 00 00 FF 
091a0     44 E4 05 F1 | 	add	objptr, ##28228
091a4     F2 40 02 FB | 	rdlong	local14, objptr
091a8     03 40 66 F0 | 	shl	local14, #3
091ac     02 00 00 FF 
091b0     38 E4 85 F1 | 	sub	objptr, ##1080
091b4     F2 40 02 F1 | 	add	local14, objptr
091b8     04 40 06 F1 | 	add	local14, #4
091bc     20 41 02 FB | 	rdlong	local14, local14
091c0     FE 41 0E F2 | 	cmp	local14, #510 wz
091c4     35 00 00 FF 
091c8     0C E4 85 F1 | 	sub	objptr, ##27148
091cc     98 00 90 AD |  if_e	jmp	#LR__0819
091d0                 | '   do
091d0                 | LR__0818
091d0     58 28 B0 FD | 	call	#_getaddr
091d4     FD 42 02 F6 | 	mov	local15, result1
091d8     37 00 00 FF 
091dc     44 E4 05 F1 | 	add	objptr, ##28228
091e0     F2 40 02 FB | 	rdlong	local14, objptr
091e4     01 40 06 F1 | 	add	local14, #1
091e8     F2 40 62 FC | 	wrlong	local14, objptr
091ec     01 2E 06 F1 | 	add	local05, #1
091f0                 | '     err=getaddr() :ct+=1
091f0                 | '     i+=1 
091f0                 | '     if lparts(ct).token=token_comma then ct+=1 
091f0     03 40 66 F0 | 	shl	local14, #3
091f4     02 00 00 FF 
091f8     38 E4 85 F1 | 	sub	objptr, ##1080
091fc     F2 40 02 F1 | 	add	local14, objptr
09200     04 40 06 F1 | 	add	local14, #4
09204     20 41 02 FB | 	rdlong	local14, local14
09208     11 40 0E F2 | 	cmp	local14, #17 wz
0920c     35 00 00 FF 
09210     0C E4 85 F1 | 	sub	objptr, ##27148
09214     37 00 00 AF 
09218     44 E4 05 A1 |  if_e	add	objptr, ##28228
0921c     F2 34 02 AB |  if_e	rdlong	local08, objptr
09220     01 34 06 A1 |  if_e	add	local08, #1
09224     F2 34 62 AC |  if_e	wrlong	local08, objptr
09228     37 00 00 AF 
0922c     44 E4 85 A1 |  if_e	sub	objptr, ##28228
09230                 | '     if lparts(ct).token=token_end then exit loop
09230     37 00 00 FF 
09234     44 E4 05 F1 | 	add	objptr, ##28228
09238     F2 40 02 FB | 	rdlong	local14, objptr
0923c     03 40 66 F0 | 	shl	local14, #3
09240     02 00 00 FF 
09244     38 E4 85 F1 | 	sub	objptr, ##1080
09248     F2 40 02 F1 | 	add	local14, objptr
0924c     04 40 06 F1 | 	add	local14, #4
09250     20 41 02 FB | 	rdlong	local14, local14
09254     FE 41 0E F2 | 	cmp	local14, #510 wz
09258     35 00 00 FF 
0925c     0C E4 85 F1 | 	sub	objptr, ##27148
09260     08 00 90 AD |  if_e	jmp	#LR__0820
09264     68 FF 9F FD | 	jmp	#LR__0818
09268                 | LR__0819
09268     36 42 06 F6 | 	mov	local15, #54
0926c                 | LR__0820
0926c                 | ' return i,err
0926c     17 FB 01 F6 | 	mov	result1, local05
09270     21 FD 01 F6 | 	mov	result2, local15
09274     A7 F0 03 F6 | 	mov	ptra, fp
09278     B2 00 A0 FD | 	call	#popregs_
0927c                 | _compile_input_ret
0927c     2D 00 64 FD | 	ret
09280                 | 
09280                 | ' 
09280                 | ' '----- compile assign to an array element
09280                 | ' 
09280                 | ' function compile_array_assign() as ulong 
09280                 | _compile_array_assign
09280     0B 4A 05 F6 | 	mov	COUNT_, #11
09284     A8 00 A0 FD | 	call	#pushregs_
09288     00 2C 06 F6 | 	mov	local04, #0
0928c     00 2E 06 F6 | 	mov	local05, #0
09290     37 00 00 FF 
09294     44 E4 05 F1 | 	add	objptr, ##28228
09298     F2 30 02 FB | 	rdlong	local06, objptr
0929c     18 FB 01 F6 | 	mov	result1, local06
092a0     01 FA 85 F1 | 	sub	result1, #1
092a4     03 FA 65 F0 | 	shl	result1, #3
092a8     02 00 00 FF 
092ac     38 E4 85 F1 | 	sub	objptr, ##1080
092b0     F2 FA 01 F1 | 	add	result1, objptr
092b4     FD 32 02 FB | 	rdlong	local07, result1
092b8                 | ' numpar=0 : err=0
092b8                 | ' varname$=lparts(ct-1).part$
092b8                 | ' if lparts(ct).token=token_lpar then
092b8     03 30 66 F0 | 	shl	local06, #3
092bc     F2 30 02 F1 | 	add	local06, objptr
092c0     04 30 06 F1 | 	add	local06, #4
092c4     18 31 02 FB | 	rdlong	local06, local06
092c8     15 30 0E F2 | 	cmp	local06, #21 wz
092cc     35 00 00 FF 
092d0     0C E4 85 F1 | 	sub	objptr, ##27148
092d4     F4 01 90 5D |  if_ne	jmp	#LR__0834
092d8     37 00 00 FF 
092dc     44 E4 05 F1 | 	add	objptr, ##28228
092e0     F2 34 02 FB | 	rdlong	local08, objptr
092e4     01 34 06 F1 | 	add	local08, #1
092e8     F2 34 62 FC | 	wrlong	local08, objptr
092ec     37 00 00 FF 
092f0     44 E4 85 F1 | 	sub	objptr, ##28228
092f4                 | '   ct+=1 											' omit this lpar, this is for expr list
092f4                 | '   do
092f4                 | LR__0830
092f4     C8 2A B0 FD | 	call	#_expr
092f8     37 00 00 FF 
092fc     44 E4 05 F1 | 	add	objptr, ##28228
09300     F2 30 02 FB | 	rdlong	local06, objptr
09304     01 30 06 F1 | 	add	local06, #1
09308     F2 30 62 FC | 	wrlong	local06, objptr
0930c     01 2C 06 F1 | 	add	local04, #1
09310     01 30 86 F1 | 	sub	local06, #1
09314     03 30 66 F0 | 	shl	local06, #3
09318     02 00 00 FF 
0931c     38 E4 85 F1 | 	sub	objptr, ##1080
09320     F2 30 02 F1 | 	add	local06, objptr
09324     04 30 06 F1 | 	add	local06, #4
09328     18 35 02 FB | 	rdlong	local08, local06
0932c     14 34 0E F2 | 	cmp	local08, #20 wz
09330     35 00 00 FF 
09334     0C E4 85 F1 | 	sub	objptr, ##27148
09338     34 00 90 AD |  if_e	jmp	#LR__0831
0933c     37 00 00 FF 
09340     44 E4 05 F1 | 	add	objptr, ##28228
09344     F2 34 02 FB | 	rdlong	local08, objptr
09348     03 34 66 F0 | 	shl	local08, #3
0934c     02 00 00 FF 
09350     38 E4 85 F1 | 	sub	objptr, ##1080
09354     F2 34 02 F1 | 	add	local08, objptr
09358     04 34 06 F1 | 	add	local08, #4
0935c     1A 35 02 FB | 	rdlong	local08, local08
09360     FE 35 0E F2 | 	cmp	local08, #510 wz
09364     35 00 00 FF 
09368     0C E4 85 F1 | 	sub	objptr, ##27148
0936c     84 FF 9F 5D |  if_ne	jmp	#LR__0830
09370                 | LR__0831
09370     37 00 00 FF 
09374     44 E4 05 F1 | 	add	objptr, ##28228
09378     F2 34 02 FB | 	rdlong	local08, objptr
0937c     01 34 06 F1 | 	add	local08, #1
09380     F2 34 62 FC | 	wrlong	local08, objptr
09384     37 00 00 FF 
09388     44 E4 85 F1 | 	sub	objptr, ##28228
0938c     30 2A B0 FD | 	call	#_expr
09390     01 36 66 F6 | 	neg	local09, #1
09394     00 38 06 F6 | 	mov	local10, #0
09398                 | '   ct+=1 : expr()
09398                 | '   j=-1 : i=0 
09398                 | '   do 
09398                 | LR__0832
09398                 | '     if variables(i).name=varname$ then j=i: exit loop
09398     1C 31 02 F6 | 	mov	local06, local10
0939c     04 30 66 F0 | 	shl	local06, #4
093a0     14 00 00 FF 
093a4     F8 E5 05 F1 | 	add	objptr, ##10744
093a8     F2 30 02 F1 | 	add	local06, objptr
093ac     18 13 02 FB | 	rdlong	arg01, local06
093b0     19 15 02 F6 | 	mov	arg02, local07
093b4     14 00 00 FF 
093b8     F8 E5 85 F1 | 	sub	objptr, ##10744
093bc     D4 D5 B1 FD | 	call	#__system___string_cmp
093c0     00 FA 0D F2 | 	cmp	result1, #0 wz
093c4     1C 37 02 A6 |  if_e	mov	local09, local10
093c8     20 00 90 AD |  if_e	jmp	#LR__0833
093cc     01 38 06 F1 | 	add	local10, #1
093d0     35 00 00 FF 
093d4     08 E4 05 F1 | 	add	objptr, ##27144
093d8     F2 34 02 FB | 	rdlong	local08, objptr
093dc     35 00 00 FF 
093e0     08 E4 85 F1 | 	sub	objptr, ##27144
093e4     1A 39 5A F2 | 	cmps	local10, local08 wcz
093e8     AC FF 9F ED |  if_be	jmp	#LR__0832
093ec                 | LR__0833
093ec     1B 27 02 F6 | 	mov	local01, local09
093f0     16 29 02 F6 | 	mov	local02, local04
093f4     17 2A 06 F6 | 	mov	local03, #23
093f8     13 35 02 F6 | 	mov	local08, local01
093fc     14 3B 02 F6 | 	mov	local11, local02
09400     15 33 02 F6 | 	mov	local07, local03
09404     4A 00 00 FF 
09408     7C E4 05 F1 | 	add	objptr, ##38012
0940c     F2 26 02 FB | 	rdlong	local01, objptr
09410     13 37 02 F6 | 	mov	local09, local01
09414     01 36 66 F0 | 	shl	local09, #1
09418     13 37 02 F1 | 	add	local09, local01
0941c     02 36 66 F0 | 	shl	local09, #2
09420     03 00 00 FF 
09424     00 E4 85 F1 | 	sub	objptr, ##1536
09428     F2 36 02 F1 | 	add	local09, objptr
0942c     1B 35 62 FC | 	wrlong	local08, local09
09430     03 00 00 FF 
09434     00 E4 05 F1 | 	add	objptr, ##1536
09438     F2 26 02 FB | 	rdlong	local01, objptr
0943c     13 37 02 F6 | 	mov	local09, local01
09440     01 36 66 F0 | 	shl	local09, #1
09444     13 37 02 F1 | 	add	local09, local01
09448     02 36 66 F0 | 	shl	local09, #2
0944c     03 00 00 FF 
09450     00 E4 85 F1 | 	sub	objptr, ##1536
09454     F2 36 02 F1 | 	add	local09, objptr
09458     04 36 06 F1 | 	add	local09, #4
0945c     1B 3B 62 FC | 	wrlong	local11, local09
09460     03 00 00 FF 
09464     00 E4 05 F1 | 	add	objptr, ##1536
09468     F2 3A 02 FB | 	rdlong	local11, objptr
0946c     1D 27 02 F6 | 	mov	local01, local11
09470     01 26 66 F0 | 	shl	local01, #1
09474     1D 27 02 F1 | 	add	local01, local11
09478     02 26 66 F0 | 	shl	local01, #2
0947c     03 00 00 FF 
09480     00 E4 85 F1 | 	sub	objptr, ##1536
09484     F2 26 02 F1 | 	add	local01, objptr
09488     08 26 06 F1 | 	add	local01, #8
0948c     13 33 62 FC | 	wrlong	local07, local01
09490     03 00 00 FF 
09494     00 E4 05 F1 | 	add	objptr, ##1536
09498     F2 34 02 FB | 	rdlong	local08, objptr
0949c     01 34 06 F1 | 	add	local08, #1
094a0     F2 34 62 FC | 	wrlong	local08, objptr
094a4                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
094a4                 | '   if numpar>3 then err=45
094a4     04 2C 16 F2 | 	cmp	local04, #4 wc
094a8     2D 2E 06 36 |  if_ae	mov	local05, #45
094ac                 | '   if i>varnum then err=20
094ac     15 00 00 FF 
094b0     74 E4 85 F1 | 	sub	objptr, ##10868
094b4     F2 34 02 FB | 	rdlong	local08, objptr
094b8     35 00 00 FF 
094bc     08 E4 85 F1 | 	sub	objptr, ##27144
094c0     1A 39 5A F2 | 	cmps	local10, local08 wcz
094c4     14 2E 06 16 |  if_a	mov	local05, #20
094c8     04 00 90 FD | 	jmp	#LR__0835
094cc                 | LR__0834
094cc     0E 2E 06 F6 | 	mov	local05, #14
094d0                 | LR__0835
094d0                 | ' return err
094d0     17 FB 01 F6 | 	mov	result1, local05
094d4     A7 F0 03 F6 | 	mov	ptra, fp
094d8     B2 00 A0 FD | 	call	#popregs_
094dc                 | _compile_array_assign_ret
094dc     2D 00 64 FD | 	ret
094e0                 | 
094e0                 | ' 
094e0                 | ' '----- compile print command with its ";" and "," modifiers
094e0                 | ' 
094e0                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
094e0                 | _compile_print
094e0     0B 4A 05 F6 | 	mov	COUNT_, #11
094e4     A8 00 A0 FD | 	call	#pushregs_
094e8     00 26 06 F6 | 	mov	local01, #0
094ec     1D 2A 06 F6 | 	mov	local03, #29
094f0                 | ' t1.result.uresult=0 : t1.result_type=result_uint
094f0                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
094f0     37 00 00 FF 
094f4     44 E4 05 F1 | 	add	objptr, ##28228
094f8     F2 2C 02 FB | 	rdlong	local04, objptr
094fc     03 2C 66 F0 | 	shl	local04, #3
09500     02 00 00 FF 
09504     38 E4 85 F1 | 	sub	objptr, ##1080
09508     F2 2C 02 F1 | 	add	local04, objptr
0950c     04 2C 06 F1 | 	add	local04, #4
09510     16 2D 02 FB | 	rdlong	local04, local04
09514     FE 2D 0E F2 | 	cmp	local04, #510 wz
09518     35 00 00 FF 
0951c     0C E4 85 F1 | 	sub	objptr, ##27148
09520     68 01 90 5D |  if_ne	jmp	#LR__0840
09524     20 2A 06 F6 | 	mov	local03, #32
09528     13 2F 02 F6 | 	mov	local05, local01
0952c     14 31 02 F6 | 	mov	local06, local02
09530     15 33 02 F6 | 	mov	local07, local03
09534     4A 00 00 FF 
09538     7C E4 05 F1 | 	add	objptr, ##38012
0953c     F2 34 02 FB | 	rdlong	local08, objptr
09540     1A 37 02 F6 | 	mov	local09, local08
09544     01 36 66 F0 | 	shl	local09, #1
09548     1A 37 02 F1 | 	add	local09, local08
0954c     02 36 66 F0 | 	shl	local09, #2
09550     03 00 00 FF 
09554     00 E4 85 F1 | 	sub	objptr, ##1536
09558     F2 36 02 F1 | 	add	local09, objptr
0955c     1B 2F 62 FC | 	wrlong	local05, local09
09560     03 00 00 FF 
09564     00 E4 05 F1 | 	add	objptr, ##1536
09568     F2 2E 02 FB | 	rdlong	local05, objptr
0956c     17 39 02 F6 | 	mov	local10, local05
09570     01 38 66 F0 | 	shl	local10, #1
09574     17 39 02 F1 | 	add	local10, local05
09578     02 38 66 F0 | 	shl	local10, #2
0957c     03 00 00 FF 
09580     00 E4 85 F1 | 	sub	objptr, ##1536
09584     F2 38 02 F1 | 	add	local10, objptr
09588     04 38 06 F1 | 	add	local10, #4
0958c     1C 31 62 FC | 	wrlong	local06, local10
09590     03 00 00 FF 
09594     00 E4 05 F1 | 	add	objptr, ##1536
09598     F2 2E 02 FB | 	rdlong	local05, objptr
0959c     17 3B 02 F6 | 	mov	local11, local05
095a0     01 3A 66 F0 | 	shl	local11, #1
095a4     17 3B 02 F1 | 	add	local11, local05
095a8     02 3A 66 F0 | 	shl	local11, #2
095ac     03 00 00 FF 
095b0     00 E4 85 F1 | 	sub	objptr, ##1536
095b4     F2 3A 02 F1 | 	add	local11, objptr
095b8     08 3A 06 F1 | 	add	local11, #8
095bc     1D 33 62 FC | 	wrlong	local07, local11
095c0     03 00 00 FF 
095c4     00 E4 05 F1 | 	add	objptr, ##1536
095c8     F2 2E 02 FB | 	rdlong	local05, objptr
095cc     01 2E 06 F1 | 	add	local05, #1
095d0     F2 2E 62 FC | 	wrlong	local05, objptr
095d4     44 2A 06 F6 | 	mov	local03, #68
095d8     13 2F 02 F6 | 	mov	local05, local01
095dc     14 31 02 F6 | 	mov	local06, local02
095e0     15 33 02 F6 | 	mov	local07, local03
095e4     F2 34 02 FB | 	rdlong	local08, objptr
095e8     1A 37 02 F6 | 	mov	local09, local08
095ec     01 36 66 F0 | 	shl	local09, #1
095f0     1A 37 02 F1 | 	add	local09, local08
095f4     02 36 66 F0 | 	shl	local09, #2
095f8     03 00 00 FF 
095fc     00 E4 85 F1 | 	sub	objptr, ##1536
09600     F2 36 02 F1 | 	add	local09, objptr
09604     1B 2F 62 FC | 	wrlong	local05, local09
09608     03 00 00 FF 
0960c     00 E4 05 F1 | 	add	objptr, ##1536
09610     F2 3A 02 FB | 	rdlong	local11, objptr
09614     1D 39 02 F6 | 	mov	local10, local11
09618     01 38 66 F0 | 	shl	local10, #1
0961c     1D 39 02 F1 | 	add	local10, local11
09620     02 38 66 F0 | 	shl	local10, #2
09624     03 00 00 FF 
09628     00 E4 85 F1 | 	sub	objptr, ##1536
0962c     F2 38 02 F1 | 	add	local10, objptr
09630     04 38 06 F1 | 	add	local10, #4
09634     1C 31 62 FC | 	wrlong	local06, local10
09638     03 00 00 FF 
0963c     00 E4 05 F1 | 	add	objptr, ##1536
09640     F2 38 02 FB | 	rdlong	local10, objptr
09644     1C 3B 02 F6 | 	mov	local11, local10
09648     01 3A 66 F0 | 	shl	local11, #1
0964c     1C 3B 02 F1 | 	add	local11, local10
09650     02 3A 66 F0 | 	shl	local11, #2
09654     03 00 00 FF 
09658     00 E4 85 F1 | 	sub	objptr, ##1536
0965c     F2 3A 02 F1 | 	add	local11, objptr
09660     08 3A 06 F1 | 	add	local11, #8
09664     1D 33 62 FC | 	wrlong	local07, local11
09668     03 00 00 FF 
0966c     00 E4 05 F1 | 	add	objptr, ##1536
09670     F2 2E 02 FB | 	rdlong	local05, objptr
09674     01 2E 06 F1 | 	add	local05, #1
09678     F2 2E 62 FC | 	wrlong	local05, objptr
0967c     4A 00 00 FF 
09680     7C E4 85 F1 | 	sub	objptr, ##38012
09684     00 FA 05 F6 | 	mov	result1, #0
09688     20 05 90 FD | 	jmp	#LR__0847
0968c                 | LR__0840
0968c                 | ' do
0968c                 | LR__0841
0968c     30 27 B0 FD | 	call	#_expr
09690                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
09690                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09690     37 00 00 FF 
09694     44 E4 05 F1 | 	add	objptr, ##28228
09698     F2 2C 02 FB | 	rdlong	local04, objptr
0969c     03 2C 66 F0 | 	shl	local04, #3
096a0     02 00 00 FF 
096a4     38 E4 85 F1 | 	sub	objptr, ##1080
096a8     F2 2C 02 F1 | 	add	local04, objptr
096ac     04 2C 06 F1 | 	add	local04, #4
096b0     16 35 02 FB | 	rdlong	local08, local04
096b4     11 34 0E F2 | 	cmp	local08, #17 wz
096b8     35 00 00 FF 
096bc     0C E4 85 F1 | 	sub	objptr, ##27148
096c0     60 01 90 5D |  if_ne	jmp	#LR__0842
096c4     21 2A 06 F6 | 	mov	local03, #33
096c8     13 2F 02 F6 | 	mov	local05, local01
096cc     14 31 02 F6 | 	mov	local06, local02
096d0     15 33 02 F6 | 	mov	local07, local03
096d4     4A 00 00 FF 
096d8     7C E4 05 F1 | 	add	objptr, ##38012
096dc     F2 34 02 FB | 	rdlong	local08, objptr
096e0     1A 37 02 F6 | 	mov	local09, local08
096e4     01 36 66 F0 | 	shl	local09, #1
096e8     1A 37 02 F1 | 	add	local09, local08
096ec     02 36 66 F0 | 	shl	local09, #2
096f0     03 00 00 FF 
096f4     00 E4 85 F1 | 	sub	objptr, ##1536
096f8     F2 36 02 F1 | 	add	local09, objptr
096fc     1B 2F 62 FC | 	wrlong	local05, local09
09700     03 00 00 FF 
09704     00 E4 05 F1 | 	add	objptr, ##1536
09708     F2 3A 02 FB | 	rdlong	local11, objptr
0970c     1D 39 02 F6 | 	mov	local10, local11
09710     01 38 66 F0 | 	shl	local10, #1
09714     1D 39 02 F1 | 	add	local10, local11
09718     02 38 66 F0 | 	shl	local10, #2
0971c     03 00 00 FF 
09720     00 E4 85 F1 | 	sub	objptr, ##1536
09724     F2 38 02 F1 | 	add	local10, objptr
09728     04 38 06 F1 | 	add	local10, #4
0972c     1C 31 62 FC | 	wrlong	local06, local10
09730     03 00 00 FF 
09734     00 E4 05 F1 | 	add	objptr, ##1536
09738     F2 2E 02 FB | 	rdlong	local05, objptr
0973c     17 3B 02 F6 | 	mov	local11, local05
09740     01 3A 66 F0 | 	shl	local11, #1
09744     17 3B 02 F1 | 	add	local11, local05
09748     02 3A 66 F0 | 	shl	local11, #2
0974c     03 00 00 FF 
09750     00 E4 85 F1 | 	sub	objptr, ##1536
09754     F2 3A 02 F1 | 	add	local11, objptr
09758     08 3A 06 F1 | 	add	local11, #8
0975c     1D 33 62 FC | 	wrlong	local07, local11
09760     03 00 00 FF 
09764     00 E4 05 F1 | 	add	objptr, ##1536
09768     F2 2E 02 FB | 	rdlong	local05, objptr
0976c     01 2E 06 F1 | 	add	local05, #1
09770     F2 2E 62 FC | 	wrlong	local05, objptr
09774     44 2A 06 F6 | 	mov	local03, #68
09778     13 2F 02 F6 | 	mov	local05, local01
0977c     14 31 02 F6 | 	mov	local06, local02
09780     15 33 02 F6 | 	mov	local07, local03
09784     F2 34 02 FB | 	rdlong	local08, objptr
09788     1A 37 02 F6 | 	mov	local09, local08
0978c     01 36 66 F0 | 	shl	local09, #1
09790     1A 37 02 F1 | 	add	local09, local08
09794     02 36 66 F0 | 	shl	local09, #2
09798     03 00 00 FF 
0979c     00 E4 85 F1 | 	sub	objptr, ##1536
097a0     F2 36 02 F1 | 	add	local09, objptr
097a4     1B 2F 62 FC | 	wrlong	local05, local09
097a8     03 00 00 FF 
097ac     00 E4 05 F1 | 	add	objptr, ##1536
097b0     F2 3A 02 FB | 	rdlong	local11, objptr
097b4     1D 39 02 F6 | 	mov	local10, local11
097b8     01 38 66 F0 | 	shl	local10, #1
097bc     1D 39 02 F1 | 	add	local10, local11
097c0     02 38 66 F0 | 	shl	local10, #2
097c4     03 00 00 FF 
097c8     00 E4 85 F1 | 	sub	objptr, ##1536
097cc     F2 38 02 F1 | 	add	local10, objptr
097d0     04 38 06 F1 | 	add	local10, #4
097d4     1C 31 62 FC | 	wrlong	local06, local10
097d8     03 00 00 FF 
097dc     00 E4 05 F1 | 	add	objptr, ##1536
097e0     F2 38 02 FB | 	rdlong	local10, objptr
097e4     1C 3B 02 F6 | 	mov	local11, local10
097e8     01 3A 66 F0 | 	shl	local11, #1
097ec     1C 3B 02 F1 | 	add	local11, local10
097f0     02 3A 66 F0 | 	shl	local11, #2
097f4     03 00 00 FF 
097f8     00 E4 85 F1 | 	sub	objptr, ##1536
097fc     F2 3A 02 F1 | 	add	local11, objptr
09800     08 3A 06 F1 | 	add	local11, #8
09804     1D 33 62 FC | 	wrlong	local07, local11
09808     03 00 00 FF 
0980c     00 E4 05 F1 | 	add	objptr, ##1536
09810     F2 2E 02 FB | 	rdlong	local05, objptr
09814     01 2E 06 F1 | 	add	local05, #1
09818     F2 2E 62 FC | 	wrlong	local05, objptr
0981c     4A 00 00 FF 
09820     7C E4 85 F1 | 	sub	objptr, ##38012
09824                 | LR__0842
09824                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09824     37 00 00 FF 
09828     44 E4 05 F1 | 	add	objptr, ##28228
0982c     F2 2C 02 FB | 	rdlong	local04, objptr
09830     03 2C 66 F0 | 	shl	local04, #3
09834     02 00 00 FF 
09838     38 E4 85 F1 | 	sub	objptr, ##1080
0983c     F2 2C 02 F1 | 	add	local04, objptr
09840     04 2C 06 F1 | 	add	local04, #4
09844     16 35 02 FB | 	rdlong	local08, local04
09848     12 34 0E F2 | 	cmp	local08, #18 wz
0984c     35 00 00 FF 
09850     0C E4 85 F1 | 	sub	objptr, ##27148
09854     60 01 90 5D |  if_ne	jmp	#LR__0843
09858     22 2A 06 F6 | 	mov	local03, #34
0985c     13 2F 02 F6 | 	mov	local05, local01
09860     14 31 02 F6 | 	mov	local06, local02
09864     15 33 02 F6 | 	mov	local07, local03
09868     4A 00 00 FF 
0986c     7C E4 05 F1 | 	add	objptr, ##38012
09870     F2 34 02 FB | 	rdlong	local08, objptr
09874     1A 37 02 F6 | 	mov	local09, local08
09878     01 36 66 F0 | 	shl	local09, #1
0987c     1A 37 02 F1 | 	add	local09, local08
09880     02 36 66 F0 | 	shl	local09, #2
09884     03 00 00 FF 
09888     00 E4 85 F1 | 	sub	objptr, ##1536
0988c     F2 36 02 F1 | 	add	local09, objptr
09890     1B 2F 62 FC | 	wrlong	local05, local09
09894     03 00 00 FF 
09898     00 E4 05 F1 | 	add	objptr, ##1536
0989c     F2 3A 02 FB | 	rdlong	local11, objptr
098a0     1D 39 02 F6 | 	mov	local10, local11
098a4     01 38 66 F0 | 	shl	local10, #1
098a8     1D 39 02 F1 | 	add	local10, local11
098ac     02 38 66 F0 | 	shl	local10, #2
098b0     03 00 00 FF 
098b4     00 E4 85 F1 | 	sub	objptr, ##1536
098b8     F2 38 02 F1 | 	add	local10, objptr
098bc     04 38 06 F1 | 	add	local10, #4
098c0     1C 31 62 FC | 	wrlong	local06, local10
098c4     03 00 00 FF 
098c8     00 E4 05 F1 | 	add	objptr, ##1536
098cc     F2 2E 02 FB | 	rdlong	local05, objptr
098d0     17 3B 02 F6 | 	mov	local11, local05
098d4     01 3A 66 F0 | 	shl	local11, #1
098d8     17 3B 02 F1 | 	add	local11, local05
098dc     02 3A 66 F0 | 	shl	local11, #2
098e0     03 00 00 FF 
098e4     00 E4 85 F1 | 	sub	objptr, ##1536
098e8     F2 3A 02 F1 | 	add	local11, objptr
098ec     08 3A 06 F1 | 	add	local11, #8
098f0     1D 33 62 FC | 	wrlong	local07, local11
098f4     03 00 00 FF 
098f8     00 E4 05 F1 | 	add	objptr, ##1536
098fc     F2 2E 02 FB | 	rdlong	local05, objptr
09900     01 2E 06 F1 | 	add	local05, #1
09904     F2 2E 62 FC | 	wrlong	local05, objptr
09908     44 2A 06 F6 | 	mov	local03, #68
0990c     13 2F 02 F6 | 	mov	local05, local01
09910     14 31 02 F6 | 	mov	local06, local02
09914     15 33 02 F6 | 	mov	local07, local03
09918     F2 34 02 FB | 	rdlong	local08, objptr
0991c     1A 37 02 F6 | 	mov	local09, local08
09920     01 36 66 F0 | 	shl	local09, #1
09924     1A 37 02 F1 | 	add	local09, local08
09928     02 36 66 F0 | 	shl	local09, #2
0992c     03 00 00 FF 
09930     00 E4 85 F1 | 	sub	objptr, ##1536
09934     F2 36 02 F1 | 	add	local09, objptr
09938     1B 2F 62 FC | 	wrlong	local05, local09
0993c     03 00 00 FF 
09940     00 E4 05 F1 | 	add	objptr, ##1536
09944     F2 3A 02 FB | 	rdlong	local11, objptr
09948     1D 39 02 F6 | 	mov	local10, local11
0994c     01 38 66 F0 | 	shl	local10, #1
09950     1D 39 02 F1 | 	add	local10, local11
09954     02 38 66 F0 | 	shl	local10, #2
09958     03 00 00 FF 
0995c     00 E4 85 F1 | 	sub	objptr, ##1536
09960     F2 38 02 F1 | 	add	local10, objptr
09964     04 38 06 F1 | 	add	local10, #4
09968     1C 31 62 FC | 	wrlong	local06, local10
0996c     03 00 00 FF 
09970     00 E4 05 F1 | 	add	objptr, ##1536
09974     F2 38 02 FB | 	rdlong	local10, objptr
09978     1C 3B 02 F6 | 	mov	local11, local10
0997c     01 3A 66 F0 | 	shl	local11, #1
09980     1C 3B 02 F1 | 	add	local11, local10
09984     02 3A 66 F0 | 	shl	local11, #2
09988     03 00 00 FF 
0998c     00 E4 85 F1 | 	sub	objptr, ##1536
09990     F2 3A 02 F1 | 	add	local11, objptr
09994     08 3A 06 F1 | 	add	local11, #8
09998     1D 33 62 FC | 	wrlong	local07, local11
0999c     03 00 00 FF 
099a0     00 E4 05 F1 | 	add	objptr, ##1536
099a4     F2 2E 02 FB | 	rdlong	local05, objptr
099a8     01 2E 06 F1 | 	add	local05, #1
099ac     F2 2E 62 FC | 	wrlong	local05, objptr
099b0     4A 00 00 FF 
099b4     7C E4 85 F1 | 	sub	objptr, ##38012
099b8                 | LR__0843
099b8                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
099b8     37 00 00 FF 
099bc     44 E4 05 F1 | 	add	objptr, ##28228
099c0     F2 2C 02 FB | 	rdlong	local04, objptr
099c4     03 2C 66 F0 | 	shl	local04, #3
099c8     02 00 00 FF 
099cc     38 E4 85 F1 | 	sub	objptr, ##1080
099d0     F2 2C 02 F1 | 	add	local04, objptr
099d4     04 2C 06 F1 | 	add	local04, #4
099d8     16 35 02 FB | 	rdlong	local08, local04
099dc     FE 35 0E F2 | 	cmp	local08, #510 wz
099e0     35 00 00 FF 
099e4     0C E4 85 F1 | 	sub	objptr, ##27148
099e8     B8 00 90 5D |  if_ne	jmp	#LR__0844
099ec     44 2A 06 F6 | 	mov	local03, #68
099f0     13 2F 02 F6 | 	mov	local05, local01
099f4     14 31 02 F6 | 	mov	local06, local02
099f8     15 33 02 F6 | 	mov	local07, local03
099fc     4A 00 00 FF 
09a00     7C E4 05 F1 | 	add	objptr, ##38012
09a04     F2 34 02 FB | 	rdlong	local08, objptr
09a08     1A 37 02 F6 | 	mov	local09, local08
09a0c     01 36 66 F0 | 	shl	local09, #1
09a10     1A 37 02 F1 | 	add	local09, local08
09a14     02 36 66 F0 | 	shl	local09, #2
09a18     03 00 00 FF 
09a1c     00 E4 85 F1 | 	sub	objptr, ##1536
09a20     F2 36 02 F1 | 	add	local09, objptr
09a24     1B 2F 62 FC | 	wrlong	local05, local09
09a28     03 00 00 FF 
09a2c     00 E4 05 F1 | 	add	objptr, ##1536
09a30     F2 3A 02 FB | 	rdlong	local11, objptr
09a34     1D 39 02 F6 | 	mov	local10, local11
09a38     01 38 66 F0 | 	shl	local10, #1
09a3c     1D 39 02 F1 | 	add	local10, local11
09a40     02 38 66 F0 | 	shl	local10, #2
09a44     03 00 00 FF 
09a48     00 E4 85 F1 | 	sub	objptr, ##1536
09a4c     F2 38 02 F1 | 	add	local10, objptr
09a50     04 38 06 F1 | 	add	local10, #4
09a54     1C 31 62 FC | 	wrlong	local06, local10
09a58     03 00 00 FF 
09a5c     00 E4 05 F1 | 	add	objptr, ##1536
09a60     F2 38 02 FB | 	rdlong	local10, objptr
09a64     1C 3B 02 F6 | 	mov	local11, local10
09a68     01 3A 66 F0 | 	shl	local11, #1
09a6c     1C 3B 02 F1 | 	add	local11, local10
09a70     02 3A 66 F0 | 	shl	local11, #2
09a74     03 00 00 FF 
09a78     00 E4 85 F1 | 	sub	objptr, ##1536
09a7c     F2 3A 02 F1 | 	add	local11, objptr
09a80     08 3A 06 F1 | 	add	local11, #8
09a84     1D 33 62 FC | 	wrlong	local07, local11
09a88     03 00 00 FF 
09a8c     00 E4 05 F1 | 	add	objptr, ##1536
09a90     F2 2E 02 FB | 	rdlong	local05, objptr
09a94     01 2E 06 F1 | 	add	local05, #1
09a98     F2 2E 62 FC | 	wrlong	local05, objptr
09a9c     4A 00 00 FF 
09aa0     7C E4 85 F1 | 	sub	objptr, ##38012
09aa4                 | LR__0844
09aa4                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09aa4     37 00 00 FF 
09aa8     44 E4 05 F1 | 	add	objptr, ##28228
09aac     F2 2C 02 FB | 	rdlong	local04, objptr
09ab0     03 2C 66 F0 | 	shl	local04, #3
09ab4     02 00 00 FF 
09ab8     38 E4 85 F1 | 	sub	objptr, ##1080
09abc     F2 2C 02 F1 | 	add	local04, objptr
09ac0     04 2C 06 F1 | 	add	local04, #4
09ac4     16 35 02 FB | 	rdlong	local08, local04
09ac8     11 34 0E F2 | 	cmp	local08, #17 wz
09acc     35 00 00 FF 
09ad0     0C E4 85 F1 | 	sub	objptr, ##27148
09ad4     6C 00 90 AD |  if_e	jmp	#LR__0845
09ad8     37 00 00 FF 
09adc     44 E4 05 F1 | 	add	objptr, ##28228
09ae0     F2 34 02 FB | 	rdlong	local08, objptr
09ae4     03 34 66 F0 | 	shl	local08, #3
09ae8     02 00 00 FF 
09aec     38 E4 85 F1 | 	sub	objptr, ##1080
09af0     F2 34 02 F1 | 	add	local08, objptr
09af4     04 34 06 F1 | 	add	local08, #4
09af8     1A 35 02 FB | 	rdlong	local08, local08
09afc     12 34 0E F2 | 	cmp	local08, #18 wz
09b00     35 00 00 FF 
09b04     0C E4 85 F1 | 	sub	objptr, ##27148
09b08     38 00 90 AD |  if_e	jmp	#LR__0845
09b0c     37 00 00 FF 
09b10     44 E4 05 F1 | 	add	objptr, ##28228
09b14     F2 3A 02 FB | 	rdlong	local11, objptr
09b18     03 3A 66 F0 | 	shl	local11, #3
09b1c     02 00 00 FF 
09b20     38 E4 85 F1 | 	sub	objptr, ##1080
09b24     F2 3A 02 F1 | 	add	local11, objptr
09b28     04 3A 06 F1 | 	add	local11, #4
09b2c     1D 3B 02 FB | 	rdlong	local11, local11
09b30     FE 3B 0E F2 | 	cmp	local11, #510 wz
09b34     35 00 00 FF 
09b38     0C E4 85 F1 | 	sub	objptr, ##27148
09b3c     16 FA 05 56 |  if_ne	mov	result1, #22
09b40     68 00 90 5D |  if_ne	jmp	#LR__0847
09b44                 | LR__0845
09b44     37 00 00 FF 
09b48     44 E4 05 F1 | 	add	objptr, ##28228
09b4c     F2 2C 02 FB | 	rdlong	local04, objptr
09b50     01 2C 06 F1 | 	add	local04, #1
09b54     F2 2C 62 FC | 	wrlong	local04, objptr
09b58     03 2C 66 F0 | 	shl	local04, #3
09b5c     02 00 00 FF 
09b60     38 E4 85 F1 | 	sub	objptr, ##1080
09b64     F2 2C 02 F1 | 	add	local04, objptr
09b68     04 2C 06 F1 | 	add	local04, #4
09b6c     16 35 02 FB | 	rdlong	local08, local04
09b70     FE 35 0E F2 | 	cmp	local08, #510 wz
09b74     35 00 00 FF 
09b78     0C E4 85 F1 | 	sub	objptr, ##27148
09b7c     28 00 90 AD |  if_e	jmp	#LR__0846
09b80     37 00 00 FF 
09b84     44 E4 05 F1 | 	add	objptr, ##28228
09b88     F2 3A 02 FB | 	rdlong	local11, objptr
09b8c     0E 00 00 FF 
09b90     1C E4 05 F1 | 	add	objptr, ##7196
09b94     F2 38 02 FB | 	rdlong	local10, objptr
09b98     45 00 00 FF 
09b9c     60 E4 85 F1 | 	sub	objptr, ##35424
09ba0     1C 3B 52 F2 | 	cmps	local11, local10 wc
09ba4     E4 FA 9F CD |  if_b	jmp	#LR__0841
09ba8                 | LR__0846
09ba8                 | ' return 0
09ba8     00 FA 05 F6 | 	mov	result1, #0
09bac                 | LR__0847
09bac     A7 F0 03 F6 | 	mov	ptra, fp
09bb0     B2 00 A0 FD | 	call	#popregs_
09bb4                 | _compile_print_ret
09bb4     2D 00 64 FD | 	ret
09bb8                 | 
09bb8                 | ' 
09bb8                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09bb8                 | ' 
09bb8                 | ' function compile_if(aline as ulong) as ulong  
09bb8                 | _compile_if
09bb8     09 4A 05 F6 | 	mov	COUNT_, #9
09bbc     A8 00 A0 FD | 	call	#pushregs_
09bc0                 | _compile_if_enter
09bc0     09 2D 02 F6 | 	mov	local04, arg01
09bc4                 | ' return expr()
09bc4     F8 21 B0 FD | 	call	#_expr
09bc8     37 00 00 FF 
09bcc     44 E4 05 F1 | 	add	objptr, ##28228
09bd0     F2 14 02 FB | 	rdlong	arg02, objptr
09bd4     0A 2F 02 F6 | 	mov	local05, arg02
09bd8     03 2E 66 F0 | 	shl	local05, #3
09bdc     02 00 00 FF 
09be0     38 E4 85 F1 | 	sub	objptr, ##1080
09be4     F2 2E 02 F1 | 	add	local05, objptr
09be8     04 2E 06 F1 | 	add	local05, #4
09bec     17 2F 02 FB | 	rdlong	local05, local05
09bf0     01 14 06 F1 | 	add	arg02, #1
09bf4     02 00 00 FF 
09bf8     38 E4 05 F1 | 	add	objptr, ##1080
09bfc     F2 14 62 FC | 	wrlong	arg02, objptr
09c00     37 00 00 FF 
09c04     44 E4 85 F1 | 	sub	objptr, ##28228
09c08                 | ' 
09c08                 | ' err=compile_fun_1p()
09c08                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09c08     5B 2E 0E F2 | 	cmp	local05, #91 wz
09c0c     34 FA 05 56 |  if_ne	mov	result1, #52
09c10     20 01 90 5D |  if_ne	jmp	#LR__0852
09c14     58 2A 06 F6 | 	mov	local03, #88
09c18     13 31 02 F6 | 	mov	local06, local01
09c1c     14 33 02 F6 | 	mov	local07, local02
09c20     15 15 02 F6 | 	mov	arg02, local03
09c24     4A 00 00 FF 
09c28     7C E4 05 F1 | 	add	objptr, ##38012
09c2c     F2 12 02 FB | 	rdlong	arg01, objptr
09c30     09 35 02 F6 | 	mov	local08, arg01
09c34     01 34 66 F0 | 	shl	local08, #1
09c38     09 35 02 F1 | 	add	local08, arg01
09c3c     02 34 66 F0 | 	shl	local08, #2
09c40     03 00 00 FF 
09c44     00 E4 85 F1 | 	sub	objptr, ##1536
09c48     F2 34 02 F1 | 	add	local08, objptr
09c4c     1A 31 62 FC | 	wrlong	local06, local08
09c50     03 00 00 FF 
09c54     00 E4 05 F1 | 	add	objptr, ##1536
09c58     F2 30 02 FB | 	rdlong	local06, objptr
09c5c     18 13 02 F6 | 	mov	arg01, local06
09c60     01 12 66 F0 | 	shl	arg01, #1
09c64     18 13 02 F1 | 	add	arg01, local06
09c68     02 12 66 F0 | 	shl	arg01, #2
09c6c     03 00 00 FF 
09c70     00 E4 85 F1 | 	sub	objptr, ##1536
09c74     F2 12 02 F1 | 	add	arg01, objptr
09c78     04 12 06 F1 | 	add	arg01, #4
09c7c     09 33 62 FC | 	wrlong	local07, arg01
09c80     03 00 00 FF 
09c84     00 E4 05 F1 | 	add	objptr, ##1536
09c88     F2 30 02 FB | 	rdlong	local06, objptr
09c8c     18 13 02 F6 | 	mov	arg01, local06
09c90     01 12 66 F0 | 	shl	arg01, #1
09c94     18 13 02 F1 | 	add	arg01, local06
09c98     02 12 66 F0 | 	shl	arg01, #2
09c9c     03 00 00 FF 
09ca0     00 E4 85 F1 | 	sub	objptr, ##1536
09ca4     F2 12 02 F1 | 	add	arg01, objptr
09ca8     08 12 06 F1 | 	add	arg01, #8
09cac     09 15 62 FC | 	wrlong	arg02, arg01
09cb0     03 00 00 FF 
09cb4     00 E4 05 F1 | 	add	objptr, ##1536
09cb8     F2 30 02 FB | 	rdlong	local06, objptr
09cbc     01 30 06 F1 | 	add	local06, #1
09cc0     F2 30 62 FC | 	wrlong	local06, objptr
09cc4                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09cc4                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09cc4     13 00 00 FF 
09cc8     38 E4 85 F1 | 	sub	objptr, ##9784
09ccc     F2 14 02 FB | 	rdlong	arg02, objptr
09cd0     01 14 06 F1 | 	add	arg02, #1
09cd4     03 14 66 F0 | 	shl	arg02, #3
09cd8     02 00 00 FF 
09cdc     38 E4 85 F1 | 	sub	objptr, ##1080
09ce0     F2 14 02 F1 | 	add	arg02, objptr
09ce4     0A 13 02 FB | 	rdlong	arg01, arg02
09ce8     35 00 00 FF 
09cec     0C E4 85 F1 | 	sub	objptr, ##27148
09cf0                 | ' 
09cf0                 | ' select case s
09cf0     B3 01 00 FF 
09cf4     B2 14 06 F6 | 	mov	arg02, ##@LR__5547
09cf8     98 CC B1 FD | 	call	#__system___string_cmp
09cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
09d00     1B FA 05 A6 |  if_e	mov	result1, #27
09d04     00 FA 05 56 |  if_ne	mov	result1, #0
09d08     00 FA 0D F2 | 	cmp	result1, #0 wz
09d0c     10 00 90 AD |  if_e	jmp	#LR__0850
09d10     05 12 06 F6 | 	mov	arg01, #5
09d14     38 E4 BF FD | 	call	#_compile_immediate_assign
09d18     FD 36 02 F6 | 	mov	local09, result1
09d1c     10 00 90 FD | 	jmp	#LR__0851
09d20                 | LR__0850
09d20     05 12 06 F6 | 	mov	arg01, #5
09d24     16 15 02 F6 | 	mov	arg02, local04
09d28     54 DA BF FD | 	call	#_compile_immediate
09d2c     FD 36 02 F6 | 	mov	local09, result1
09d30                 | LR__0851
09d30                 | ' return err
09d30     1B FB 01 F6 | 	mov	result1, local09
09d34                 | LR__0852
09d34     A7 F0 03 F6 | 	mov	ptra, fp
09d38     B2 00 A0 FD | 	call	#popregs_
09d3c                 | _compile_if_ret
09d3c     2D 00 64 FD | 	ret
09d40                 | 
09d40                 | ' 
09d40                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09d40                 | ' 
09d40                 | ' function compile_else(aline as ulong) as ulong  
09d40                 | _compile_else
09d40     07 4A 05 F6 | 	mov	COUNT_, #7
09d44     A8 00 A0 FD | 	call	#pushregs_
09d48                 | _compile_else_enter
09d48     09 2D 02 F6 | 	mov	local04, arg01
09d4c     5A 2A 06 F6 | 	mov	local03, #90
09d50     13 2F 02 F6 | 	mov	local05, local01
09d54     14 31 02 F6 | 	mov	local06, local02
09d58     15 27 02 F6 | 	mov	local01, local03
09d5c     4A 00 00 FF 
09d60     7C E4 05 F1 | 	add	objptr, ##38012
09d64     F2 14 02 FB | 	rdlong	arg02, objptr
09d68     0A 13 02 F6 | 	mov	arg01, arg02
09d6c     01 12 66 F0 | 	shl	arg01, #1
09d70     0A 13 02 F1 | 	add	arg01, arg02
09d74     02 12 66 F0 | 	shl	arg01, #2
09d78     03 00 00 FF 
09d7c     00 E4 85 F1 | 	sub	objptr, ##1536
09d80     F2 12 02 F1 | 	add	arg01, objptr
09d84     09 2F 62 FC | 	wrlong	local05, arg01
09d88     03 00 00 FF 
09d8c     00 E4 05 F1 | 	add	objptr, ##1536
09d90     F2 2E 02 FB | 	rdlong	local05, objptr
09d94     17 15 02 F6 | 	mov	arg02, local05
09d98     01 14 66 F0 | 	shl	arg02, #1
09d9c     17 15 02 F1 | 	add	arg02, local05
09da0     02 14 66 F0 | 	shl	arg02, #2
09da4     03 00 00 FF 
09da8     00 E4 85 F1 | 	sub	objptr, ##1536
09dac     F2 14 02 F1 | 	add	arg02, objptr
09db0     04 14 06 F1 | 	add	arg02, #4
09db4     0A 31 62 FC | 	wrlong	local06, arg02
09db8     03 00 00 FF 
09dbc     00 E4 05 F1 | 	add	objptr, ##1536
09dc0     F2 30 02 FB | 	rdlong	local06, objptr
09dc4     18 2F 02 F6 | 	mov	local05, local06
09dc8     01 2E 66 F0 | 	shl	local05, #1
09dcc     18 2F 02 F1 | 	add	local05, local06
09dd0     02 2E 66 F0 | 	shl	local05, #2
09dd4     03 00 00 FF 
09dd8     00 E4 85 F1 | 	sub	objptr, ##1536
09ddc     F2 2E 02 F1 | 	add	local05, objptr
09de0     08 2E 06 F1 | 	add	local05, #8
09de4     17 27 62 FC | 	wrlong	local01, local05
09de8     03 00 00 FF 
09dec     00 E4 05 F1 | 	add	objptr, ##1536
09df0     F2 2E 02 FB | 	rdlong	local05, objptr
09df4     01 2E 06 F1 | 	add	local05, #1
09df8     F2 2E 62 FC | 	wrlong	local05, objptr
09dfc                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09dfc                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09dfc     13 00 00 FF 
09e00     38 E4 85 F1 | 	sub	objptr, ##9784
09e04     F2 30 02 FB | 	rdlong	local06, objptr
09e08     01 30 06 F1 | 	add	local06, #1
09e0c     03 30 66 F0 | 	shl	local06, #3
09e10     02 00 00 FF 
09e14     38 E4 85 F1 | 	sub	objptr, ##1080
09e18     F2 30 02 F1 | 	add	local06, objptr
09e1c     18 13 02 FB | 	rdlong	arg01, local06
09e20     35 00 00 FF 
09e24     0C E4 85 F1 | 	sub	objptr, ##27148
09e28                 | ' 
09e28                 | ' select case s
09e28     B3 01 00 FF 
09e2c     B2 14 06 F6 | 	mov	arg02, ##@LR__5547
09e30     60 CB B1 FD | 	call	#__system___string_cmp
09e34     00 FA 0D F2 | 	cmp	result1, #0 wz
09e38     1B FA 05 A6 |  if_e	mov	result1, #27
09e3c     00 FA 05 56 |  if_ne	mov	result1, #0
09e40     00 FA 0D F2 | 	cmp	result1, #0 wz
09e44     10 00 90 AD |  if_e	jmp	#LR__0860
09e48     05 12 06 F6 | 	mov	arg01, #5
09e4c     00 E3 BF FD | 	call	#_compile_immediate_assign
09e50     FD 32 02 F6 | 	mov	local07, result1
09e54     10 00 90 FD | 	jmp	#LR__0861
09e58                 | LR__0860
09e58     05 12 06 F6 | 	mov	arg01, #5
09e5c     16 15 02 F6 | 	mov	arg02, local04
09e60     1C D9 BF FD | 	call	#_compile_immediate
09e64     FD 32 02 F6 | 	mov	local07, result1
09e68                 | LR__0861
09e68                 | ' return err
09e68     19 FB 01 F6 | 	mov	result1, local07
09e6c     A7 F0 03 F6 | 	mov	ptra, fp
09e70     B2 00 A0 FD | 	call	#popregs_
09e74                 | _compile_else_ret
09e74     2D 00 64 FD | 	ret
09e78                 | 
09e78                 | ' 
09e78                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09e78                 | ' 
09e78                 | ' function compile_dim() as ulong  
09e78                 | _compile_dim
09e78     11 4A 05 F6 | 	mov	COUNT_, #17
09e7c     A8 00 A0 FD | 	call	#pushregs_
09e80     01 26 06 F6 | 	mov	local01, #1
09e84     01 28 06 F6 | 	mov	local02, #1
09e88     01 2A 06 F6 | 	mov	local03, #1
09e8c                 | ' 
09e8c                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09e8c                 | ' if isname(lparts(ct).part$) then 
09e8c     37 00 00 FF 
09e90     44 E4 05 F1 | 	add	objptr, ##28228
09e94     F2 18 02 FB | 	rdlong	arg04, objptr
09e98     03 18 66 F0 | 	shl	arg04, #3
09e9c     02 00 00 FF 
09ea0     38 E4 85 F1 | 	sub	objptr, ##1080
09ea4     F2 18 02 F1 | 	add	arg04, objptr
09ea8     0C 13 02 FB | 	rdlong	arg01, arg04
09eac     35 00 00 FF 
09eb0     0C E4 85 F1 | 	sub	objptr, ##27148
09eb4     20 C7 BF FD | 	call	#_isname
09eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
09ebc     78 05 90 AD |  if_e	jmp	#LR__0893
09ec0     37 00 00 FF 
09ec4     44 E4 05 F1 | 	add	objptr, ##28228
09ec8     F2 2C 02 FB | 	rdlong	local04, objptr
09ecc     03 2C 66 F0 | 	shl	local04, #3
09ed0     02 00 00 FF 
09ed4     38 E4 85 F1 | 	sub	objptr, ##1080
09ed8     F2 2C 02 F1 | 	add	local04, objptr
09edc     16 2F 02 FB | 	rdlong	local05, local04
09ee0     01 30 66 F6 | 	neg	local06, #1
09ee4                 | '   varname2$=lparts(ct).part$ 
09ee4                 | '   j=-1
09ee4                 | '   if varnum>0 then
09ee4     04 E4 85 F1 | 	sub	objptr, #4
09ee8     F2 32 02 FB | 	rdlong	local07, objptr
09eec     35 00 00 FF 
09ef0     08 E4 85 F1 | 	sub	objptr, ##27144
09ef4     01 32 56 F2 | 	cmps	local07, #1 wc
09ef8     58 00 90 CD |  if_b	jmp	#LR__0872
09efc                 | '     for i=0 to varnum-1
09efc     00 34 06 F6 | 	mov	local08, #0
09f00     35 00 00 FF 
09f04     08 E4 05 F1 | 	add	objptr, ##27144
09f08     F2 36 02 FB | 	rdlong	local09, objptr
09f0c     35 00 00 FF 
09f10     08 E4 85 F1 | 	sub	objptr, ##27144
09f14                 | LR__0870
09f14     1B 35 52 F2 | 	cmps	local08, local09 wc
09f18     38 00 90 3D |  if_ae	jmp	#LR__0871
09f1c                 | '       if variables(i).name=varname2$ then j=i : exit
09f1c     1A 2D 02 F6 | 	mov	local04, local08
09f20     04 2C 66 F0 | 	shl	local04, #4
09f24     14 00 00 FF 
09f28     F8 E5 05 F1 | 	add	objptr, ##10744
09f2c     F2 2C 02 F1 | 	add	local04, objptr
09f30     16 13 02 FB | 	rdlong	arg01, local04
09f34     17 15 02 F6 | 	mov	arg02, local05
09f38     14 00 00 FF 
09f3c     F8 E5 85 F1 | 	sub	objptr, ##10744
09f40     50 CA B1 FD | 	call	#__system___string_cmp
09f44     00 FA 0D F2 | 	cmp	result1, #0 wz
09f48     1A 31 02 A6 |  if_e	mov	local06, local08
09f4c     01 34 06 51 |  if_ne	add	local08, #1
09f50     C0 FF 9F 5D |  if_ne	jmp	#LR__0870
09f54                 | LR__0871
09f54                 | LR__0872
09f54                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
09f54     FF FF 7F FF 
09f58     FF 31 0E F2 | 	cmp	local06, ##-1 wz
09f5c     35 00 00 AF 
09f60     08 E4 05 A1 |  if_e	add	objptr, ##27144
09f64     F2 30 02 AB |  if_e	rdlong	local06, objptr
09f68     35 00 00 AF 
09f6c     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09f70     78 00 90 AD |  if_e	jmp	#LR__0873
09f74     00 12 06 F6 | 	mov	arg01, #0
09f78     94 26 B2 FD | 	call	#__system___getiolock_0606
09f7c     FD 12 02 F6 | 	mov	arg01, result1
09f80     E8 C9 B1 FD | 	call	#__system___lockmem
09f84     B5 01 00 FF 
09f88     55 15 06 F6 | 	mov	arg02, ##@LR__5804
09f8c     00 12 06 F6 | 	mov	arg01, #0
09f90     00 16 06 F6 | 	mov	arg03, #0
09f94     CC D6 B1 FD | 	call	#__system___basic_print_string
09f98     52 00 00 FF 
09f9c     B0 E4 05 F1 | 	add	objptr, ##42160
09fa0     F2 14 02 FB | 	rdlong	arg02, objptr
09fa4     52 00 00 FF 
09fa8     B0 E4 85 F1 | 	sub	objptr, ##42160
09fac     00 12 06 F6 | 	mov	arg01, #0
09fb0     00 16 06 F6 | 	mov	arg03, #0
09fb4     0A 18 06 F6 | 	mov	arg04, #10
09fb8     2C D7 B1 FD | 	call	#__system___basic_print_unsigned
09fbc     B5 01 00 FF 
09fc0     63 15 06 F6 | 	mov	arg02, ##@LR__5805
09fc4     00 12 06 F6 | 	mov	arg01, #0
09fc8     00 16 06 F6 | 	mov	arg03, #0
09fcc     94 D6 B1 FD | 	call	#__system___basic_print_string
09fd0     00 12 06 F6 | 	mov	arg01, #0
09fd4     0A 14 06 F6 | 	mov	arg02, #10
09fd8     00 16 06 F6 | 	mov	arg03, #0
09fdc     2C D6 B1 FD | 	call	#__system___basic_print_char
09fe0     00 12 06 F6 | 	mov	arg01, #0
09fe4     28 26 B2 FD | 	call	#__system___getiolock_0606
09fe8     FD 00 68 FC | 	wrlong	#0, result1
09fec                 | LR__0873
09fec                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
09fec     37 00 00 FF 
09ff0     44 E4 05 F1 | 	add	objptr, ##28228
09ff4     F2 14 02 FB | 	rdlong	arg02, objptr
09ff8     01 14 06 F1 | 	add	arg02, #1
09ffc     03 14 66 F0 | 	shl	arg02, #3
0a000     02 00 00 FF 
0a004     38 E4 85 F1 | 	sub	objptr, ##1080
0a008     F2 14 02 F1 | 	add	arg02, objptr
0a00c     0A 13 02 FB | 	rdlong	arg01, arg02
0a010     B5 01 00 FF 
0a014     84 15 06 F6 | 	mov	arg02, ##@LR__5806
0a018     35 00 00 FF 
0a01c     0C E4 85 F1 | 	sub	objptr, ##27148
0a020     70 C9 B1 FD | 	call	#__system___string_cmp
0a024     00 FA 0D F2 | 	cmp	result1, #0 wz
0a028     44 00 90 AD |  if_e	jmp	#LR__0874
0a02c     37 00 00 FF 
0a030     44 E4 05 F1 | 	add	objptr, ##28228
0a034     F2 36 02 FB | 	rdlong	local09, objptr
0a038     01 36 06 F1 | 	add	local09, #1
0a03c     03 36 66 F0 | 	shl	local09, #3
0a040     02 00 00 FF 
0a044     38 E4 85 F1 | 	sub	objptr, ##1080
0a048     F2 36 02 F1 | 	add	local09, objptr
0a04c     1B 13 02 FB | 	rdlong	arg01, local09
0a050     B5 01 00 FF 
0a054     86 15 06 F6 | 	mov	arg02, ##@LR__5807
0a058     35 00 00 FF 
0a05c     0C E4 85 F1 | 	sub	objptr, ##27148
0a060     30 C9 B1 FD | 	call	#__system___string_cmp
0a064     00 FA 0D F2 | 	cmp	result1, #0 wz
0a068     2B FA 05 56 |  if_ne	mov	result1, #43
0a06c     D0 04 90 5D |  if_ne	jmp	#LR__0895
0a070                 | LR__0874
0a070                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
0a070     37 00 00 FF 
0a074     44 E4 05 F1 | 	add	objptr, ##28228
0a078     F2 14 02 FB | 	rdlong	arg02, objptr
0a07c     01 14 06 F1 | 	add	arg02, #1
0a080     03 14 66 F0 | 	shl	arg02, #3
0a084     02 00 00 FF 
0a088     38 E4 85 F1 | 	sub	objptr, ##1080
0a08c     F2 14 02 F1 | 	add	arg02, objptr
0a090     0A 13 02 FB | 	rdlong	arg01, arg02
0a094     B5 01 00 FF 
0a098     89 15 06 F6 | 	mov	arg02, ##@LR__5808
0a09c     35 00 00 FF 
0a0a0     0C E4 85 F1 | 	sub	objptr, ##27148
0a0a4     EC C8 B1 FD | 	call	#__system___string_cmp
0a0a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a0ac     37 00 00 AF 
0a0b0     44 E4 05 A1 |  if_e	add	objptr, ##28228
0a0b4     F2 38 02 AB |  if_e	rdlong	local10, objptr
0a0b8     37 00 00 AF 
0a0bc     44 E4 85 A1 |  if_e	sub	objptr, ##28228
0a0c0     01 38 06 A1 |  if_e	add	local10, #1
0a0c4     5C 01 90 AD |  if_e	jmp	#LR__0879
0a0c8     37 00 00 FF 
0a0cc     44 E4 05 F1 | 	add	objptr, ##28228
0a0d0     F2 38 02 FB | 	rdlong	local10, objptr
0a0d4     37 00 00 FF 
0a0d8     44 E4 85 F1 | 	sub	objptr, ##28228
0a0dc     02 38 06 F1 | 	add	local10, #2
0a0e0     00 3A 06 F6 | 	mov	local11, #0
0a0e4                 | '   l=ct+2 : m=0 : do
0a0e4                 | LR__0875
0a0e4                 | '   if isdec(lparts(l).part$) then 
0a0e4     1C 2D 02 F6 | 	mov	local04, local10
0a0e8     03 2C 66 F0 | 	shl	local04, #3
0a0ec     35 00 00 FF 
0a0f0     0C E4 05 F1 | 	add	objptr, ##27148
0a0f4     F2 2C 02 F1 | 	add	local04, objptr
0a0f8     16 13 02 FB | 	rdlong	arg01, local04
0a0fc     35 00 00 FF 
0a100     0C E4 85 F1 | 	sub	objptr, ##27148
0a104     D4 CD BF FD | 	call	#_isdec
0a108     00 FA 0D F2 | 	cmp	result1, #0 wz
0a10c     44 00 90 AD |  if_e	jmp	#LR__0876
0a110     1D 3D 02 F6 | 	mov	local12, local11
0a114     13 3D 06 F1 | 	add	local12, #local01
0a118     1C 37 02 F6 | 	mov	local09, local10
0a11c     03 36 66 F0 | 	shl	local09, #3
0a120     35 00 00 FF 
0a124     0C E4 05 F1 | 	add	objptr, ##27148
0a128     F2 36 02 F1 | 	add	local09, objptr
0a12c     1B 13 02 FB | 	rdlong	arg01, local09
0a130     00 14 06 F6 | 	mov	arg02, #0
0a134     35 00 00 FF 
0a138     0C E4 85 F1 | 	sub	objptr, ##27148
0a13c     20 FD B1 FD | 	call	#__system____builtin_atoi
0a140     FD 3E 02 F6 | 	mov	local13, result1
0a144                 | 	'.live	local13
0a144                 | 	'.live	local12
0a144     00 3C 8E F9 | 	altd	local12, #0
0a148     1F 3D 02 F6 | 	mov	local12, local13
0a14c     01 3A 06 F1 | 	add	local11, #1
0a150     08 00 90 FD | 	jmp	#LR__0877
0a154                 | LR__0876
0a154                 | '     return(17)
0a154     11 FA 05 F6 | 	mov	result1, #17
0a158     E4 03 90 FD | 	jmp	#LR__0895
0a15c                 | LR__0877
0a15c                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a15c     1C 2D 02 F6 | 	mov	local04, local10
0a160     01 2C 06 F1 | 	add	local04, #1
0a164     03 2C 66 F0 | 	shl	local04, #3
0a168     35 00 00 FF 
0a16c     0C E4 05 F1 | 	add	objptr, ##27148
0a170     F2 2C 02 F1 | 	add	local04, objptr
0a174     16 13 02 FB | 	rdlong	arg01, local04
0a178     B5 01 00 FF 
0a17c     8C 15 06 F6 | 	mov	arg02, ##@LR__5809
0a180     35 00 00 FF 
0a184     0C E4 85 F1 | 	sub	objptr, ##27148
0a188     08 C8 B1 FD | 	call	#__system___string_cmp
0a18c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a190     3C 00 90 AD |  if_e	jmp	#LR__0878
0a194     1C 3F 02 F6 | 	mov	local13, local10
0a198     01 3E 06 F1 | 	add	local13, #1
0a19c     03 3E 66 F0 | 	shl	local13, #3
0a1a0     35 00 00 FF 
0a1a4     0C E4 05 F1 | 	add	objptr, ##27148
0a1a8     F2 3E 02 F1 | 	add	local13, objptr
0a1ac     1F 13 02 FB | 	rdlong	arg01, local13
0a1b0     B5 01 00 FF 
0a1b4     8E 15 06 F6 | 	mov	arg02, ##@LR__5810
0a1b8     35 00 00 FF 
0a1bc     0C E4 85 F1 | 	sub	objptr, ##27148
0a1c0     D0 C7 B1 FD | 	call	#__system___string_cmp
0a1c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1c8     2C FA 05 56 |  if_ne	mov	result1, #44
0a1cc     70 03 90 5D |  if_ne	jmp	#LR__0895
0a1d0                 | LR__0878
0a1d0     02 38 06 F1 | 	add	local10, #2
0a1d4     1C 2D 02 F6 | 	mov	local04, local10
0a1d8     01 2C 86 F1 | 	sub	local04, #1
0a1dc     03 2C 66 F0 | 	shl	local04, #3
0a1e0     35 00 00 FF 
0a1e4     0C E4 05 F1 | 	add	objptr, ##27148
0a1e8     F2 2C 02 F1 | 	add	local04, objptr
0a1ec     16 13 02 FB | 	rdlong	arg01, local04
0a1f0     B5 01 00 FF 
0a1f4     90 15 06 F6 | 	mov	arg02, ##@LR__5811
0a1f8     35 00 00 FF 
0a1fc     0C E4 85 F1 | 	sub	objptr, ##27148
0a200     90 C7 B1 FD | 	call	#__system___string_cmp
0a204     00 FA 0D F2 | 	cmp	result1, #0 wz
0a208     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
0a20c     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0875
0a210                 | '   if m>3 then return 45
0a210     04 3A 56 F2 | 	cmps	local11, #4 wc
0a214     2D FA 05 36 |  if_ae	mov	result1, #45
0a218     24 03 90 3D |  if_ae	jmp	#LR__0895
0a21c     00 41 06 F6 | 	mov	local14, #256
0a220     0C 42 06 F6 | 	mov	local15, #12
0a224                 | LR__0879
0a224                 | '   arraytype=array_no_type : esize=12
0a224                 | ' 1350 
0a224                 | '   if lparts(l).part$="as" then
0a224     1C 2D 02 F6 | 	mov	local04, local10
0a228     03 2C 66 F0 | 	shl	local04, #3
0a22c     35 00 00 FF 
0a230     0C E4 05 F1 | 	add	objptr, ##27148
0a234     F2 2C 02 F1 | 	add	local04, objptr
0a238     16 13 02 FB | 	rdlong	arg01, local04
0a23c     B5 01 00 FF 
0a240     92 15 06 F6 | 	mov	arg02, ##@LR__5812
0a244     35 00 00 FF 
0a248     0C E4 85 F1 | 	sub	objptr, ##27148
0a24c     44 C7 B1 FD | 	call	#__system___string_cmp
0a250     00 FA 0D F2 | 	cmp	result1, #0 wz
0a254     E8 01 90 5D |  if_ne	jmp	#LR__0894
0a258                 | '     select case lparts(l+1).part$
0a258     1C 3D 02 F6 | 	mov	local12, local10
0a25c     01 3C 06 F1 | 	add	local12, #1
0a260     03 3C 66 F0 | 	shl	local12, #3
0a264     35 00 00 FF 
0a268     0C E4 05 F1 | 	add	objptr, ##27148
0a26c     F2 3C 02 F1 | 	add	local12, objptr
0a270     1E 45 02 FB | 	rdlong	local16, local12
0a274     B5 01 00 FF 
0a278     95 15 06 F6 | 	mov	arg02, ##@LR__5813
0a27c     22 13 02 F6 | 	mov	arg01, local16
0a280     35 00 00 FF 
0a284     0C E4 85 F1 | 	sub	objptr, ##27148
0a288     08 C7 B1 FD | 	call	#__system___string_cmp
0a28c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a290     0C 01 90 AD |  if_e	jmp	#LR__0880
0a294     B5 01 00 FF 
0a298     9A 15 06 F6 | 	mov	arg02, ##@LR__5814
0a29c     22 13 02 F6 | 	mov	arg01, local16
0a2a0     F0 C6 B1 FD | 	call	#__system___string_cmp
0a2a4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2a8     00 01 90 AD |  if_e	jmp	#LR__0881
0a2ac     B5 01 00 FF 
0a2b0     A0 15 06 F6 | 	mov	arg02, ##@LR__5815
0a2b4     22 13 02 F6 | 	mov	arg01, local16
0a2b8     D8 C6 B1 FD | 	call	#__system___string_cmp
0a2bc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2c0     F4 00 90 AD |  if_e	jmp	#LR__0882
0a2c4     B5 01 00 FF 
0a2c8     A6 15 06 F6 | 	mov	arg02, ##@LR__5816
0a2cc     22 13 02 F6 | 	mov	arg01, local16
0a2d0     C0 C6 B1 FD | 	call	#__system___string_cmp
0a2d4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2d8     E8 00 90 AD |  if_e	jmp	#LR__0883
0a2dc     B5 01 00 FF 
0a2e0     AD 15 06 F6 | 	mov	arg02, ##@LR__5817
0a2e4     22 13 02 F6 | 	mov	arg01, local16
0a2e8     A8 C6 B1 FD | 	call	#__system___string_cmp
0a2ec     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2f0     DC 00 90 AD |  if_e	jmp	#LR__0884
0a2f4     B5 01 00 FF 
0a2f8     B2 15 06 F6 | 	mov	arg02, ##@LR__5818
0a2fc     22 13 02 F6 | 	mov	arg01, local16
0a300     90 C6 B1 FD | 	call	#__system___string_cmp
0a304     00 FA 0D F2 | 	cmp	result1, #0 wz
0a308     D0 00 90 AD |  if_e	jmp	#LR__0885
0a30c     B5 01 00 FF 
0a310     BA 15 06 F6 | 	mov	arg02, ##@LR__5819
0a314     22 13 02 F6 | 	mov	arg01, local16
0a318     78 C6 B1 FD | 	call	#__system___string_cmp
0a31c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a320     C4 00 90 AD |  if_e	jmp	#LR__0886
0a324     B5 01 00 FF 
0a328     C0 15 06 F6 | 	mov	arg02, ##@LR__5820
0a32c     22 13 02 F6 | 	mov	arg01, local16
0a330     60 C6 B1 FD | 	call	#__system___string_cmp
0a334     00 FA 0D F2 | 	cmp	result1, #0 wz
0a338     B8 00 90 AD |  if_e	jmp	#LR__0887
0a33c     B5 01 00 FF 
0a340     C6 15 06 F6 | 	mov	arg02, ##@LR__5821
0a344     22 13 02 F6 | 	mov	arg01, local16
0a348     48 C6 B1 FD | 	call	#__system___string_cmp
0a34c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a350     AC 00 90 AD |  if_e	jmp	#LR__0888
0a354     B5 01 00 FF 
0a358     CD 15 06 F6 | 	mov	arg02, ##@LR__5822
0a35c     22 13 02 F6 | 	mov	arg01, local16
0a360     30 C6 B1 FD | 	call	#__system___string_cmp
0a364     00 FA 0D F2 | 	cmp	result1, #0 wz
0a368     A0 00 90 AD |  if_e	jmp	#LR__0889
0a36c     B5 01 00 FF 
0a370     D4 15 06 F6 | 	mov	arg02, ##@LR__5823
0a374     22 13 02 F6 | 	mov	arg01, local16
0a378     18 C6 B1 FD | 	call	#__system___string_cmp
0a37c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a380     94 00 90 AD |  if_e	jmp	#LR__0890
0a384     B5 01 00 FF 
0a388     DB 15 06 F6 | 	mov	arg02, ##@LR__5824
0a38c     22 13 02 F6 | 	mov	arg01, local16
0a390     00 C6 B1 FD | 	call	#__system___string_cmp
0a394     00 FA 0D F2 | 	cmp	result1, #0 wz
0a398     88 00 90 AD |  if_e	jmp	#LR__0891
0a39c     90 00 90 FD | 	jmp	#LR__0892
0a3a0                 | LR__0880
0a3a0     01 41 06 F6 | 	mov	local14, #257
0a3a4     01 42 06 F6 | 	mov	local15, #1
0a3a8     94 00 90 FD | 	jmp	#LR__0894
0a3ac                 | LR__0881
0a3ac     02 41 06 F6 | 	mov	local14, #258
0a3b0     01 42 06 F6 | 	mov	local15, #1
0a3b4     88 00 90 FD | 	jmp	#LR__0894
0a3b8                 | LR__0882
0a3b8     03 41 06 F6 | 	mov	local14, #259
0a3bc     02 42 06 F6 | 	mov	local15, #2
0a3c0     7C 00 90 FD | 	jmp	#LR__0894
0a3c4                 | LR__0883
0a3c4     04 41 06 F6 | 	mov	local14, #260
0a3c8     02 42 06 F6 | 	mov	local15, #2
0a3cc     70 00 90 FD | 	jmp	#LR__0894
0a3d0                 | LR__0884
0a3d0     05 41 06 F6 | 	mov	local14, #261
0a3d4     04 42 06 F6 | 	mov	local15, #4
0a3d8     64 00 90 FD | 	jmp	#LR__0894
0a3dc                 | LR__0885
0a3dc     05 41 06 F6 | 	mov	local14, #261
0a3e0     04 42 06 F6 | 	mov	local15, #4
0a3e4     58 00 90 FD | 	jmp	#LR__0894
0a3e8                 | LR__0886
0a3e8     06 41 06 F6 | 	mov	local14, #262
0a3ec     04 42 06 F6 | 	mov	local15, #4
0a3f0     4C 00 90 FD | 	jmp	#LR__0894
0a3f4                 | LR__0887
0a3f4     07 41 06 F6 | 	mov	local14, #263
0a3f8     08 42 06 F6 | 	mov	local15, #8
0a3fc     40 00 90 FD | 	jmp	#LR__0894
0a400                 | LR__0888
0a400     08 41 06 F6 | 	mov	local14, #264
0a404     08 42 06 F6 | 	mov	local15, #8
0a408     34 00 90 FD | 	jmp	#LR__0894
0a40c                 | LR__0889
0a40c     09 41 06 F6 | 	mov	local14, #265
0a410     04 42 06 F6 | 	mov	local15, #4
0a414     28 00 90 FD | 	jmp	#LR__0894
0a418                 | LR__0890
0a418     0A 41 06 F6 | 	mov	local14, #266
0a41c     08 42 06 F6 | 	mov	local15, #8
0a420     1C 00 90 FD | 	jmp	#LR__0894
0a424                 | LR__0891
0a424     0B 41 06 F6 | 	mov	local14, #267
0a428     04 42 06 F6 | 	mov	local15, #4
0a42c     10 00 90 FD | 	jmp	#LR__0894
0a430                 | LR__0892
0a430     2F FA 05 F6 | 	mov	result1, #47
0a434     08 01 90 FD | 	jmp	#LR__0895
0a438                 | LR__0893
0a438                 | '   return 46
0a438     2E FA 05 F6 | 	mov	result1, #46
0a43c     00 01 90 FD | 	jmp	#LR__0895
0a440                 | LR__0894
0a440     13 43 02 FD | 	qmul	local15, local01
0a444     18 32 62 FD | 	getqx	local07
0a448     14 33 02 FD | 	qmul	local07, local02
0a44c     18 44 62 FD | 	getqx	local16
0a450     15 45 02 FD | 	qmul	local16, local03
0a454     52 00 00 FF 
0a458     98 E4 05 F1 | 	add	objptr, ##42136
0a45c     F2 46 02 FB | 	rdlong	local17, objptr
0a460     20 15 02 F6 | 	mov	arg02, local14
0a464     18 44 62 FD | 	getqx	local16
0a468     22 47 82 F1 | 	sub	local17, local16
0a46c     10 46 86 F1 | 	sub	local17, #16
0a470     0F 46 26 F5 | 	andn	local17, #15
0a474     F2 46 62 FC | 	wrlong	local17, objptr
0a478     52 00 00 FF 
0a47c     98 E4 85 F1 | 	sub	objptr, ##42136
0a480     23 13 02 F6 | 	mov	arg01, local17
0a484     DC 8C B1 FD | 	call	#_psdpoke
0a488     23 13 02 F6 | 	mov	arg01, local17
0a48c     02 12 06 F1 | 	add	arg01, #2
0a490     21 15 02 F6 | 	mov	arg02, local15
0a494     CC 8C B1 FD | 	call	#_psdpoke
0a498     23 13 02 F6 | 	mov	arg01, local17
0a49c     04 12 06 F1 | 	add	arg01, #4
0a4a0     13 15 02 F6 | 	mov	arg02, local01
0a4a4     74 8C B1 FD | 	call	#_pslpoke
0a4a8     23 13 02 F6 | 	mov	arg01, local17
0a4ac     08 12 06 F1 | 	add	arg01, #8
0a4b0     14 15 02 F6 | 	mov	arg02, local02
0a4b4     64 8C B1 FD | 	call	#_pslpoke
0a4b8     23 13 02 F6 | 	mov	arg01, local17
0a4bc     0C 12 06 F1 | 	add	arg01, #12
0a4c0     15 15 02 F6 | 	mov	arg02, local03
0a4c4     54 8C B1 FD | 	call	#_pslpoke
0a4c8     18 3D 02 F6 | 	mov	local12, local06
0a4cc     04 3C 66 F0 | 	shl	local12, #4
0a4d0     14 00 00 FF 
0a4d4     F8 E5 05 F1 | 	add	objptr, ##10744
0a4d8     F2 3C 02 F1 | 	add	local12, objptr
0a4dc     1E 2F 62 FC | 	wrlong	local05, local12
0a4e0     18 3D 02 F6 | 	mov	local12, local06
0a4e4     04 3C 66 F0 | 	shl	local12, #4
0a4e8     F2 3C 02 F1 | 	add	local12, objptr
0a4ec     04 3C 06 F1 | 	add	local12, #4
0a4f0     1E 47 62 FC | 	wrlong	local17, local12
0a4f4     18 3D 02 F6 | 	mov	local12, local06
0a4f8     04 3C 66 F0 | 	shl	local12, #4
0a4fc     F2 3C 02 F1 | 	add	local12, objptr
0a500     0C 3C 06 F1 | 	add	local12, #12
0a504     1E 41 62 FC | 	wrlong	local14, local12
0a508                 | ' memtop=arrayptr
0a508                 | ' psdpoke arrayptr,arraytype 
0a508                 | ' psdpoke arrayptr+2,esize 
0a508                 | ' pslpoke arrayptr+4,dims(0)
0a508                 | ' pslpoke arrayptr+8,dims(1)
0a508                 | ' pslpoke arrayptr+12,dims(2)
0a508                 | ' variables(j).name=varname2$
0a508                 | ' variables(j).value.uresult=arrayptr
0a508                 | ' variables(j).vartype=arraytype
0a508                 | ' if j=varnum then varnum+=1
0a508     20 00 00 FF 
0a50c     10 E4 05 F1 | 	add	objptr, ##16400
0a510     F2 32 02 FB | 	rdlong	local07, objptr
0a514     35 00 00 FF 
0a518     08 E4 85 F1 | 	sub	objptr, ##27144
0a51c     19 31 0A F2 | 	cmp	local06, local07 wz
0a520     35 00 00 AF 
0a524     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a528     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a52c     01 32 06 A1 |  if_e	add	local07, #1
0a530     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a534     35 00 00 AF 
0a538     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a53c                 | ' return 0
0a53c     00 FA 05 F6 | 	mov	result1, #0
0a540                 | LR__0895
0a540     A7 F0 03 F6 | 	mov	ptra, fp
0a544     B2 00 A0 FD | 	call	#popregs_
0a548                 | _compile_dim_ret
0a548     2D 00 64 FD | 	ret
0a54c                 | 
0a54c                 | ' 
0a54c                 | ' '----- compile 'for' command. 
0a54c                 | ' 
0a54c                 | ' function compile_for() as ulong  
0a54c                 | _compile_for
0a54c     0E 4A 05 F6 | 	mov	COUNT_, #14
0a550     A8 00 A0 FD | 	call	#pushregs_
0a554                 | ' 
0a554                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a554     37 00 00 FF 
0a558     44 E4 05 F1 | 	add	objptr, ##28228
0a55c     F2 14 02 FB | 	rdlong	arg02, objptr
0a560     01 14 06 F1 | 	add	arg02, #1
0a564     03 14 66 F0 | 	shl	arg02, #3
0a568     02 00 00 FF 
0a56c     38 E4 85 F1 | 	sub	objptr, ##1080
0a570     F2 14 02 F1 | 	add	arg02, objptr
0a574     0A 13 02 FB | 	rdlong	arg01, arg02
0a578     35 00 00 FF 
0a57c     0C E4 85 F1 | 	sub	objptr, ##27148
0a580                 | ' 
0a580                 | ' select case s
0a580     B3 01 00 FF 
0a584     B2 14 06 F6 | 	mov	arg02, ##@LR__5547
0a588     08 C4 B1 FD | 	call	#__system___string_cmp
0a58c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a590     1B FA 05 A6 |  if_e	mov	result1, #27
0a594     00 FA 05 56 |  if_ne	mov	result1, #0
0a598     00 FA 0D F2 | 	cmp	result1, #0 wz
0a59c     0C 00 90 AD |  if_e	jmp	#LR__0900
0a5a0     05 12 06 F6 | 	mov	arg01, #5
0a5a4     A8 DB BF FD | 	call	#_compile_immediate_assign
0a5a8     08 00 90 FD | 	jmp	#LR__0901
0a5ac                 | LR__0900
0a5ac     20 FA 05 F6 | 	mov	result1, #32
0a5b0     58 08 90 FD | 	jmp	#LR__0917
0a5b4                 | LR__0901
0a5b4     4A 00 00 FF 
0a5b8     7C E4 05 F1 | 	add	objptr, ##38012
0a5bc     F2 14 02 FB | 	rdlong	arg02, objptr
0a5c0     0A 13 02 F6 | 	mov	arg01, arg02
0a5c4     01 12 86 F1 | 	sub	arg01, #1
0a5c8     09 2D 02 F6 | 	mov	local04, arg01
0a5cc     01 2C 66 F0 | 	shl	local04, #1
0a5d0     09 2D 02 F1 | 	add	local04, arg01
0a5d4     02 2C 66 F0 | 	shl	local04, #2
0a5d8     03 00 00 FF 
0a5dc     00 E4 85 F1 | 	sub	objptr, ##1536
0a5e0     F2 2C 02 F1 | 	add	local04, objptr
0a5e4     16 27 02 FB | 	rdlong	local01, local04
0a5e8     04 2C 06 F1 | 	add	local04, #4
0a5ec     16 2F 02 FB | 	rdlong	local05, local04
0a5f0     01 14 86 F1 | 	sub	arg02, #1
0a5f4     0A 2D 02 F6 | 	mov	local04, arg02
0a5f8     01 2C 66 F0 | 	shl	local04, #1
0a5fc     0A 2D 02 F1 | 	add	local04, arg02
0a600     02 2C 66 F0 | 	shl	local04, #2
0a604     F2 30 02 F6 | 	mov	local06, objptr
0a608     F2 2C 02 F1 | 	add	local04, objptr
0a60c     08 2C 06 F1 | 	add	local04, #8
0a610     16 2D 02 FB | 	rdlong	local04, local04
0a614     17 29 02 F6 | 	mov	local02, local05
0a618     16 2B 02 F6 | 	mov	local03, local04
0a61c                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a61c     17 2A 0E F2 | 	cmp	local03, #23 wz
0a620     47 00 00 FF 
0a624     7C E4 85 F1 | 	sub	objptr, ##36476
0a628     22 FA 05 56 |  if_ne	mov	result1, #34
0a62c     DC 07 90 5D |  if_ne	jmp	#LR__0917
0a630     13 33 02 F6 | 	mov	local07, local01
0a634                 | ' varnum=t1.result.uresult
0a634                 | ' if lparts(ct).part$<>"to" then return 33
0a634     37 00 00 FF 
0a638     44 E4 05 F1 | 	add	objptr, ##28228
0a63c     F2 2C 02 FB | 	rdlong	local04, objptr
0a640     03 2C 66 F0 | 	shl	local04, #3
0a644     02 00 00 FF 
0a648     38 E4 85 F1 | 	sub	objptr, ##1080
0a64c     F2 2C 02 F1 | 	add	local04, objptr
0a650     16 13 02 FB | 	rdlong	arg01, local04
0a654     B5 01 00 FF 
0a658     E2 15 06 F6 | 	mov	arg02, ##@LR__5825
0a65c     35 00 00 FF 
0a660     0C E4 85 F1 | 	sub	objptr, ##27148
0a664     2C C3 B1 FD | 	call	#__system___string_cmp
0a668     00 FA 0D F2 | 	cmp	result1, #0 wz
0a66c     21 FA 05 56 |  if_ne	mov	result1, #33
0a670     98 07 90 5D |  if_ne	jmp	#LR__0917
0a674     37 00 00 FF 
0a678     44 E4 05 F1 | 	add	objptr, ##28228
0a67c     F2 34 02 FB | 	rdlong	local08, objptr
0a680     01 34 06 F1 | 	add	local08, #1
0a684     F2 34 62 FC | 	wrlong	local08, objptr
0a688     37 00 00 FF 
0a68c     44 E4 85 F1 | 	sub	objptr, ##28228
0a690     2C 17 B0 FD | 	call	#_expr
0a694                 | ' ct+=1
0a694                 | ' expr()  										' there is "to" value pushed on the stack
0a694                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a694     37 00 00 FF 
0a698     44 E4 05 F1 | 	add	objptr, ##28228
0a69c     F2 2C 02 FB | 	rdlong	local04, objptr
0a6a0     03 2C 66 F0 | 	shl	local04, #3
0a6a4     02 00 00 FF 
0a6a8     38 E4 85 F1 | 	sub	objptr, ##1080
0a6ac     F2 2C 02 F1 | 	add	local04, objptr
0a6b0     16 13 02 FB | 	rdlong	arg01, local04
0a6b4     B5 01 00 FF 
0a6b8     E5 15 06 F6 | 	mov	arg02, ##@LR__5826
0a6bc     35 00 00 FF 
0a6c0     0C E4 85 F1 | 	sub	objptr, ##27148
0a6c4     CC C2 B1 FD | 	call	#__system___string_cmp
0a6c8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a6cc     48 00 90 AD |  if_e	jmp	#LR__0902
0a6d0     37 00 00 FF 
0a6d4     44 E4 05 F1 | 	add	objptr, ##28228
0a6d8     F2 2C 02 FB | 	rdlong	local04, objptr
0a6dc     03 2C 66 F0 | 	shl	local04, #3
0a6e0     02 00 00 FF 
0a6e4     38 E4 85 F1 | 	sub	objptr, ##1080
0a6e8     F2 2C 02 F1 | 	add	local04, objptr
0a6ec     16 13 02 FB | 	rdlong	arg01, local04
0a6f0     02 14 06 F6 | 	mov	arg02, #2
0a6f4     35 00 00 FF 
0a6f8     0C E4 85 F1 | 	sub	objptr, ##27148
0a6fc     EC E2 B1 FD | 	call	#__system__Left_S
0a700     FD 12 02 F6 | 	mov	arg01, result1
0a704     B5 01 00 FF 
0a708     EA 15 06 F6 | 	mov	arg02, ##@LR__5827
0a70c     84 C2 B1 FD | 	call	#__system___string_cmp
0a710     00 FA 0D F2 | 	cmp	result1, #0 wz
0a714     9C 05 90 5D |  if_ne	jmp	#LR__0915
0a718                 | LR__0902
0a718                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a718     37 00 00 FF 
0a71c     44 E4 05 F1 | 	add	objptr, ##28228
0a720     F2 2C 02 FB | 	rdlong	local04, objptr
0a724     03 2C 66 F0 | 	shl	local04, #3
0a728     02 00 00 FF 
0a72c     38 E4 85 F1 | 	sub	objptr, ##1080
0a730     F2 2C 02 F1 | 	add	local04, objptr
0a734     16 13 02 FB | 	rdlong	arg01, local04
0a738     02 14 06 F6 | 	mov	arg02, #2
0a73c     35 00 00 FF 
0a740     0C E4 85 F1 | 	sub	objptr, ##27148
0a744     A4 E2 B1 FD | 	call	#__system__Left_S
0a748     FD 12 02 F6 | 	mov	arg01, result1
0a74c     B5 01 00 FF 
0a750     ED 15 06 F6 | 	mov	arg02, ##@LR__5828
0a754     3C C2 B1 FD | 	call	#__system___string_cmp
0a758     00 FA 0D F2 | 	cmp	result1, #0 wz
0a75c     30 05 90 5D |  if_ne	jmp	#LR__0914
0a760     37 00 00 FF 
0a764     44 E4 05 F1 | 	add	objptr, ##28228
0a768     F2 2C 02 FB | 	rdlong	local04, objptr
0a76c     03 2C 66 F0 | 	shl	local04, #3
0a770     02 00 00 FF 
0a774     38 E4 85 F1 | 	sub	objptr, ##1080
0a778     F2 2C 02 F1 | 	add	local04, objptr
0a77c     16 13 02 FB | 	rdlong	arg01, local04
0a780     35 00 00 FF 
0a784     0C E4 85 F1 | 	sub	objptr, ##27148
0a788     09 37 02 F6 | 	mov	local09, arg01
0a78c     97 06 48 FB | 	callpa	#(@LR__0904-@LR__0903)>>2,fcache_load_ptr_
0a790                 | LR__0903
0a790     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a794     01 36 06 51 |  if_ne	add	local09, #1
0a798     F4 FF 9F 5D |  if_ne	jmp	#LR__0903
0a79c                 | LR__0904
0a79c     09 37 82 F1 | 	sub	local09, arg01
0a7a0     03 36 56 F2 | 	cmps	local09, #3 wc
0a7a4     E8 04 90 CD |  if_b	jmp	#LR__0914
0a7a8     37 00 00 FF 
0a7ac     44 E4 05 F1 | 	add	objptr, ##28228
0a7b0     F2 2C 02 FB | 	rdlong	local04, objptr
0a7b4     16 39 02 F6 | 	mov	local10, local04
0a7b8     03 38 66 F0 | 	shl	local10, #3
0a7bc     02 00 00 FF 
0a7c0     38 E4 85 F1 | 	sub	objptr, ##1080
0a7c4     F2 38 02 F1 | 	add	local10, objptr
0a7c8     03 2C 66 F0 | 	shl	local04, #3
0a7cc     F2 2C 02 F1 | 	add	local04, objptr
0a7d0     16 2D 02 FB | 	rdlong	local04, local04
0a7d4     02 00 00 FF 
0a7d8     38 E4 05 F1 | 	add	objptr, ##1080
0a7dc     F2 12 02 FB | 	rdlong	arg01, objptr
0a7e0     03 12 66 F0 | 	shl	arg01, #3
0a7e4     02 00 00 FF 
0a7e8     38 E4 85 F1 | 	sub	objptr, ##1080
0a7ec     F2 12 02 F1 | 	add	arg01, objptr
0a7f0     09 13 02 FB | 	rdlong	arg01, arg01
0a7f4     35 00 00 FF 
0a7f8     0C E4 85 F1 | 	sub	objptr, ##27148
0a7fc     09 37 02 F6 | 	mov	local09, arg01
0a800     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0a804                 | LR__0905
0a804     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a808     01 36 06 51 |  if_ne	add	local09, #1
0a80c     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0a810                 | LR__0906
0a810     09 37 82 F1 | 	sub	local09, arg01
0a814     1B 15 02 F6 | 	mov	arg02, local09
0a818     02 14 86 F1 | 	sub	arg02, #2
0a81c     16 13 02 F6 | 	mov	arg01, local04
0a820     50 E2 B1 FD | 	call	#__system__Right_S
0a824     1C FB 61 FC | 	wrlong	result1, local10
0a828     37 00 00 FF 
0a82c     44 E4 05 F1 | 	add	objptr, ##28228
0a830     F2 2C 02 FB | 	rdlong	local04, objptr
0a834     16 39 02 F6 | 	mov	local10, local04
0a838     03 38 66 F0 | 	shl	local10, #3
0a83c     02 00 00 FF 
0a840     38 E4 85 F1 | 	sub	objptr, ##1080
0a844     F2 38 02 F1 | 	add	local10, objptr
0a848     03 2C 66 F0 | 	shl	local04, #3
0a84c     F2 2C 02 F1 | 	add	local04, objptr
0a850     16 13 02 FB | 	rdlong	arg01, local04
0a854     35 00 00 FF 
0a858     0C E4 85 F1 | 	sub	objptr, ##27148
0a85c     58 B6 BF FD | 	call	#_isfunction
0a860     FD FA E1 F8 | 	getbyte	result1, result1, #0
0a864     04 38 06 F1 | 	add	local10, #4
0a868     1C FB 61 FC | 	wrlong	result1, local10
0a86c                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0a86c     37 00 00 FF 
0a870     44 E4 05 F1 | 	add	objptr, ##28228
0a874     F2 38 02 FB | 	rdlong	local10, objptr
0a878     03 38 66 F0 | 	shl	local10, #3
0a87c     02 00 00 FF 
0a880     38 E4 85 F1 | 	sub	objptr, ##1080
0a884     F2 38 02 F1 | 	add	local10, objptr
0a888     04 38 06 F1 | 	add	local10, #4
0a88c     1C 2D 02 FB | 	rdlong	local04, local10
0a890     01 2C 56 F2 | 	cmps	local04, #1 wc
0a894     35 00 00 FF 
0a898     0C E4 85 F1 | 	sub	objptr, ##27148
0a89c     D4 03 90 3D |  if_ae	jmp	#LR__0913
0a8a0     37 00 00 FF 
0a8a4     44 E4 05 F1 | 	add	objptr, ##28228
0a8a8     F2 2C 02 FB | 	rdlong	local04, objptr
0a8ac     16 39 02 F6 | 	mov	local10, local04
0a8b0     03 38 66 F0 | 	shl	local10, #3
0a8b4     02 00 00 FF 
0a8b8     38 E4 85 F1 | 	sub	objptr, ##1080
0a8bc     F2 38 02 F1 | 	add	local10, objptr
0a8c0     03 2C 66 F0 | 	shl	local04, #3
0a8c4     F2 2C 02 F1 | 	add	local04, objptr
0a8c8     16 13 02 FB | 	rdlong	arg01, local04
0a8cc     35 00 00 FF 
0a8d0     0C E4 85 F1 | 	sub	objptr, ##27148
0a8d4     94 9F BF FD | 	call	#_isnotename
0a8d8     04 38 06 F1 | 	add	local10, #4
0a8dc     1C FB 61 FC | 	wrlong	result1, local10
0a8e0                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0a8e0                 | '     if lparts(ct).token>0 then 
0a8e0     37 00 00 FF 
0a8e4     44 E4 05 F1 | 	add	objptr, ##28228
0a8e8     F2 38 02 FB | 	rdlong	local10, objptr
0a8ec     03 38 66 F0 | 	shl	local10, #3
0a8f0     02 00 00 FF 
0a8f4     38 E4 85 F1 | 	sub	objptr, ##1080
0a8f8     F2 38 02 F1 | 	add	local10, objptr
0a8fc     04 38 06 F1 | 	add	local10, #4
0a900     1C 2D 02 FB | 	rdlong	local04, local10
0a904     01 2C 56 F2 | 	cmps	local04, #1 wc
0a908     35 00 00 FF 
0a90c     0C E4 85 F1 | 	sub	objptr, ##27148
0a910     94 00 90 CD |  if_b	jmp	#LR__0907
0a914     37 00 00 FF 
0a918     44 E4 05 F1 | 	add	objptr, ##28228
0a91c     F2 38 02 FB | 	rdlong	local10, objptr
0a920     03 38 66 F0 | 	shl	local10, #3
0a924     02 00 00 FF 
0a928     38 E4 85 F1 | 	sub	objptr, ##1080
0a92c     F2 38 02 F1 | 	add	local10, objptr
0a930     04 38 06 F1 | 	add	local10, #4
0a934     1C 13 02 FB | 	rdlong	arg01, local10
0a938     35 00 00 FF 
0a93c     0C E4 85 F1 | 	sub	objptr, ##27148
0a940     BC C6 BF FD | 	call	#_getnoteval
0a944     FD 12 02 F6 | 	mov	arg01, result1
0a948     37 00 00 FF 
0a94c     44 E4 05 F1 | 	add	objptr, ##28228
0a950     F2 38 02 FB | 	rdlong	local10, objptr
0a954     03 38 66 F0 | 	shl	local10, #3
0a958     02 00 00 FF 
0a95c     38 E4 85 F1 | 	sub	objptr, ##1080
0a960     F2 38 02 F1 | 	add	local10, objptr
0a964     35 00 00 FF 
0a968     0C E4 85 F1 | 	sub	objptr, ##27148
0a96c     74 E2 B1 FD | 	call	#__system__str_S
0a970     1C FB 61 FC | 	wrlong	result1, local10
0a974     37 00 00 FF 
0a978     44 E4 05 F1 | 	add	objptr, ##28228
0a97c     F2 38 02 FB | 	rdlong	local10, objptr
0a980     03 38 66 F0 | 	shl	local10, #3
0a984     02 00 00 FF 
0a988     38 E4 85 F1 | 	sub	objptr, ##1080
0a98c     F2 38 02 F1 | 	add	local10, objptr
0a990     04 38 06 F1 | 	add	local10, #4
0a994     01 00 80 FF 
0a998     1C 05 68 FC | 	wrlong	##514, local10
0a99c     35 00 00 FF 
0a9a0     0C E4 85 F1 | 	sub	objptr, ##27148
0a9a4     CC 02 90 FD | 	jmp	#LR__0913
0a9a8                 | LR__0907
0a9a8     37 00 00 FF 
0a9ac     44 E4 05 F1 | 	add	objptr, ##28228
0a9b0     F2 2C 02 FB | 	rdlong	local04, objptr
0a9b4     16 39 02 F6 | 	mov	local10, local04
0a9b8     03 38 66 F0 | 	shl	local10, #3
0a9bc     02 00 00 FF 
0a9c0     38 E4 85 F1 | 	sub	objptr, ##1080
0a9c4     F2 38 02 F1 | 	add	local10, objptr
0a9c8     03 2C 66 F0 | 	shl	local04, #3
0a9cc     F2 2C 02 F1 | 	add	local04, objptr
0a9d0     16 13 02 FB | 	rdlong	arg01, local04
0a9d4     35 00 00 FF 
0a9d8     0C E4 85 F1 | 	sub	objptr, ##27148
0a9dc     0C 9E BF FD | 	call	#_isconstant
0a9e0     04 38 06 F1 | 	add	local10, #4
0a9e4     1C FB 61 FC | 	wrlong	result1, local10
0a9e8                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0a9e8     37 00 00 FF 
0a9ec     44 E4 05 F1 | 	add	objptr, ##28228
0a9f0     F2 38 02 FB | 	rdlong	local10, objptr
0a9f4     03 38 66 F0 | 	shl	local10, #3
0a9f8     02 00 00 FF 
0a9fc     38 E4 85 F1 | 	sub	objptr, ##1080
0aa00     F2 38 02 F1 | 	add	local10, objptr
0aa04     04 38 06 F1 | 	add	local10, #4
0aa08     1C 2D 02 FB | 	rdlong	local04, local10
0aa0c     01 2C 56 F2 | 	cmps	local04, #1 wc
0aa10     35 00 00 FF 
0aa14     0C E4 85 F1 | 	sub	objptr, ##27148
0aa18     8C 00 90 CD |  if_b	jmp	#LR__0908
0aa1c     37 00 00 FF 
0aa20     44 E4 05 F1 | 	add	objptr, ##28228
0aa24     F2 34 02 FB | 	rdlong	local08, objptr
0aa28     1A 39 02 F6 | 	mov	local10, local08
0aa2c     03 38 66 F0 | 	shl	local10, #3
0aa30     02 00 00 FF 
0aa34     38 E4 85 F1 | 	sub	objptr, ##1080
0aa38     F2 38 02 F1 | 	add	local10, objptr
0aa3c     03 34 66 F0 | 	shl	local08, #3
0aa40     F2 34 02 F1 | 	add	local08, objptr
0aa44     04 34 06 F1 | 	add	local08, #4
0aa48     1A 13 02 FB | 	rdlong	arg01, local08
0aa4c     35 00 00 FF 
0aa50     0C E4 85 F1 | 	sub	objptr, ##27148
0aa54     09 13 52 F6 | 	abs	arg01, arg01 wc
0aa58     1F 3A C6 C9 |  if_b	decod	local11, #31
0aa5c     00 3A 06 36 |  if_ae	mov	local11, #0
0aa60     80 E9 B1 FD | 	call	#__system___float_fromuns
0aa64     1D FB 61 F5 | 	xor	result1, local11
0aa68     FD 12 02 F6 | 	mov	arg01, result1
0aa6c     74 E1 B1 FD | 	call	#__system__str_S
0aa70     1C FB 61 FC | 	wrlong	result1, local10
0aa74     37 00 00 FF 
0aa78     44 E4 05 F1 | 	add	objptr, ##28228
0aa7c     F2 38 02 FB | 	rdlong	local10, objptr
0aa80     03 38 66 F0 | 	shl	local10, #3
0aa84     02 00 00 FF 
0aa88     38 E4 85 F1 | 	sub	objptr, ##1080
0aa8c     F2 38 02 F1 | 	add	local10, objptr
0aa90     04 38 06 F1 | 	add	local10, #4
0aa94     01 00 80 FF 
0aa98     1C 03 68 FC | 	wrlong	##513, local10
0aa9c     35 00 00 FF 
0aaa0     0C E4 85 F1 | 	sub	objptr, ##27148
0aaa4     CC 01 90 FD | 	jmp	#LR__0913
0aaa8                 | LR__0908
0aaa8     37 00 00 FF 
0aaac     44 E4 05 F1 | 	add	objptr, ##28228
0aab0     F2 38 02 FB | 	rdlong	local10, objptr
0aab4     03 38 66 F0 | 	shl	local10, #3
0aab8     02 00 00 FF 
0aabc     38 E4 85 F1 | 	sub	objptr, ##1080
0aac0     F2 38 02 F1 | 	add	local10, objptr
0aac4     1C 13 02 FB | 	rdlong	arg01, local10
0aac8     35 00 00 FF 
0aacc     0C E4 85 F1 | 	sub	objptr, ##27148
0aad0     78 BD BF FD | 	call	#_isnum
0aad4     FD 3C 02 F6 | 	mov	local12, result1
0aad8     37 00 00 FF 
0aadc     44 E4 05 F1 | 	add	objptr, ##28228
0aae0     F2 38 02 FB | 	rdlong	local10, objptr
0aae4     03 38 66 F0 | 	shl	local10, #3
0aae8     02 00 00 FF 
0aaec     38 E4 85 F1 | 	sub	objptr, ##1080
0aaf0     F2 38 02 F1 | 	add	local10, objptr
0aaf4     1C 13 02 FB | 	rdlong	arg01, local10
0aaf8     35 00 00 FF 
0aafc     0C E4 85 F1 | 	sub	objptr, ##27148
0ab00     34 C1 BF FD | 	call	#_isint
0ab04     FD 3E 02 F6 | 	mov	local13, result1
0ab08     37 00 00 FF 
0ab0c     44 E4 05 F1 | 	add	objptr, ##28228
0ab10     F2 38 02 FB | 	rdlong	local10, objptr
0ab14     03 38 66 F0 | 	shl	local10, #3
0ab18     02 00 00 FF 
0ab1c     38 E4 85 F1 | 	sub	objptr, ##1080
0ab20     F2 38 02 F1 | 	add	local10, objptr
0ab24     1C 13 02 FB | 	rdlong	arg01, local10
0ab28     35 00 00 FF 
0ab2c     0C E4 85 F1 | 	sub	objptr, ##27148
0ab30     A8 C3 BF FD | 	call	#_isdec
0ab34     FD 40 02 F6 | 	mov	local14, result1
0ab38                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0ab38                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0ab38     00 3C 0E F2 | 	cmp	local12, #0 wz
0ab3c     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ab40     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0ab44     34 00 90 AD |  if_e	jmp	#LR__0909
0ab48     37 00 00 FF 
0ab4c     44 E4 05 F1 | 	add	objptr, ##28228
0ab50     F2 38 02 FB | 	rdlong	local10, objptr
0ab54     03 38 66 F0 | 	shl	local10, #3
0ab58     02 00 00 FF 
0ab5c     38 E4 85 F1 | 	sub	objptr, ##1080
0ab60     F2 38 02 F1 | 	add	local10, objptr
0ab64     04 38 06 F1 | 	add	local10, #4
0ab68     01 00 80 FF 
0ab6c     1C 01 68 FC | 	wrlong	##512, local10
0ab70     35 00 00 FF 
0ab74     0C E4 85 F1 | 	sub	objptr, ##27148
0ab78     F8 00 90 FD | 	jmp	#LR__0913
0ab7c                 | LR__0909
0ab7c                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0ab7c     00 3C 0E F2 | 	cmp	local12, #0 wz
0ab80     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ab84     20 35 22 56 |  if_ne	not	local08, local14
0ab88     00 34 0E 52 |  if_ne	cmp	local08, #0 wz
0ab8c     34 00 90 AD |  if_e	jmp	#LR__0910
0ab90     37 00 00 FF 
0ab94     44 E4 05 F1 | 	add	objptr, ##28228
0ab98     F2 38 02 FB | 	rdlong	local10, objptr
0ab9c     03 38 66 F0 | 	shl	local10, #3
0aba0     02 00 00 FF 
0aba4     38 E4 85 F1 | 	sub	objptr, ##1080
0aba8     F2 38 02 F1 | 	add	local10, objptr
0abac     04 38 06 F1 | 	add	local10, #4
0abb0     01 00 80 FF 
0abb4     1C 03 68 FC | 	wrlong	##513, local10
0abb8     35 00 00 FF 
0abbc     0C E4 85 F1 | 	sub	objptr, ##27148
0abc0     B0 00 90 FD | 	jmp	#LR__0913
0abc4                 | LR__0910
0abc4                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0abc4     00 3C 0E F2 | 	cmp	local12, #0 wz
0abc8     1F 3F 22 56 |  if_ne	not	local13, local13
0abcc     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0abd0     20 41 22 56 |  if_ne	not	local14, local14
0abd4     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0abd8     34 00 90 AD |  if_e	jmp	#LR__0911
0abdc     37 00 00 FF 
0abe0     44 E4 05 F1 | 	add	objptr, ##28228
0abe4     F2 38 02 FB | 	rdlong	local10, objptr
0abe8     03 38 66 F0 | 	shl	local10, #3
0abec     02 00 00 FF 
0abf0     38 E4 85 F1 | 	sub	objptr, ##1080
0abf4     F2 38 02 F1 | 	add	local10, objptr
0abf8     04 38 06 F1 | 	add	local10, #4
0abfc     01 00 80 FF 
0ac00     1C 05 68 FC | 	wrlong	##514, local10
0ac04     35 00 00 FF 
0ac08     0C E4 85 F1 | 	sub	objptr, ##27148
0ac0c     64 00 90 FD | 	jmp	#LR__0913
0ac10                 | LR__0911
0ac10                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0ac10     37 00 00 FF 
0ac14     44 E4 05 F1 | 	add	objptr, ##28228
0ac18     F2 38 02 FB | 	rdlong	local10, objptr
0ac1c     03 38 66 F0 | 	shl	local10, #3
0ac20     02 00 00 FF 
0ac24     38 E4 85 F1 | 	sub	objptr, ##1080
0ac28     F2 38 02 F1 | 	add	local10, objptr
0ac2c     1C 13 02 FB | 	rdlong	arg01, local10
0ac30     35 00 00 FF 
0ac34     0C E4 85 F1 | 	sub	objptr, ##27148
0ac38     9C B9 BF FD | 	call	#_isname
0ac3c     00 FA 0D F2 | 	cmp	result1, #0 wz
0ac40     30 00 90 AD |  if_e	jmp	#LR__0912
0ac44     37 00 00 FF 
0ac48     44 E4 05 F1 | 	add	objptr, ##28228
0ac4c     F2 38 02 FB | 	rdlong	local10, objptr
0ac50     03 38 66 F0 | 	shl	local10, #3
0ac54     02 00 00 FF 
0ac58     38 E4 85 F1 | 	sub	objptr, ##1080
0ac5c     F2 38 02 F1 | 	add	local10, objptr
0ac60     04 38 06 F1 | 	add	local10, #4
0ac64     01 00 80 FF 
0ac68     1C 09 68 FC | 	wrlong	##516, local10
0ac6c     35 00 00 FF 
0ac70     0C E4 85 F1 | 	sub	objptr, ##27148
0ac74                 | LR__0912
0ac74                 | LR__0913
0ac74     37 00 00 FF 
0ac78     44 E4 05 F1 | 	add	objptr, ##28228
0ac7c     F2 34 02 FB | 	rdlong	local08, objptr
0ac80     01 34 86 F1 | 	sub	local08, #1
0ac84     F2 34 62 FC | 	wrlong	local08, objptr
0ac88     37 00 00 FF 
0ac8c     44 E4 85 F1 | 	sub	objptr, ##28228
0ac90                 | LR__0914
0ac90     37 00 00 FF 
0ac94     44 E4 05 F1 | 	add	objptr, ##28228
0ac98     F2 34 02 FB | 	rdlong	local08, objptr
0ac9c     01 34 06 F1 | 	add	local08, #1
0aca0     F2 34 62 FC | 	wrlong	local08, objptr
0aca4     37 00 00 FF 
0aca8     44 E4 85 F1 | 	sub	objptr, ##28228
0acac     10 11 B0 FD | 	call	#_expr
0acb0     78 00 90 FD | 	jmp	#LR__0916
0acb4                 | LR__0915
0acb4     4A 00 00 FF 
0acb8     7C E4 05 F1 | 	add	objptr, ##38012
0acbc     F2 40 02 FB | 	rdlong	local14, objptr
0acc0     20 39 02 F6 | 	mov	local10, local14
0acc4     01 38 66 F0 | 	shl	local10, #1
0acc8     20 39 02 F1 | 	add	local10, local14
0accc     02 38 66 F0 | 	shl	local10, #2
0acd0     03 00 00 FF 
0acd4     00 E4 85 F1 | 	sub	objptr, ##1536
0acd8     F2 38 02 F1 | 	add	local10, objptr
0acdc     08 38 06 F1 | 	add	local10, #8
0ace0     1C 39 68 FC | 	wrlong	#28, local10
0ace4     03 00 00 FF 
0ace8     00 E4 05 F1 | 	add	objptr, ##1536
0acec     F2 40 02 FB | 	rdlong	local14, objptr
0acf0     20 39 02 F6 | 	mov	local10, local14
0acf4     01 38 66 F0 | 	shl	local10, #1
0acf8     20 39 02 F1 | 	add	local10, local14
0acfc     02 38 66 F0 | 	shl	local10, #2
0ad00     03 00 00 FF 
0ad04     00 E4 85 F1 | 	sub	objptr, ##1536
0ad08     F2 38 02 F1 | 	add	local10, objptr
0ad0c     1C 03 68 FC | 	wrlong	#1, local10
0ad10     03 00 00 FF 
0ad14     00 E4 05 F1 | 	add	objptr, ##1536
0ad18     F2 34 02 FB | 	rdlong	local08, objptr
0ad1c     01 34 06 F1 | 	add	local08, #1
0ad20     F2 34 62 FC | 	wrlong	local08, objptr
0ad24     4A 00 00 FF 
0ad28     7C E4 85 F1 | 	sub	objptr, ##38012
0ad2c                 | LR__0916
0ad2c     4A 00 00 FF 
0ad30     7C E4 05 F1 | 	add	objptr, ##38012
0ad34     F2 40 02 FB | 	rdlong	local14, objptr
0ad38     20 39 02 F6 | 	mov	local10, local14
0ad3c     01 38 66 F0 | 	shl	local10, #1
0ad40     20 39 02 F1 | 	add	local10, local14
0ad44     02 38 66 F0 | 	shl	local10, #2
0ad48     03 00 00 FF 
0ad4c     00 E4 85 F1 | 	sub	objptr, ##1536
0ad50     F2 38 02 F1 | 	add	local10, objptr
0ad54     08 38 06 F1 | 	add	local10, #8
0ad58     1C 39 68 FC | 	wrlong	#28, local10
0ad5c     03 00 00 FF 
0ad60     00 E4 05 F1 | 	add	objptr, ##1536
0ad64     F2 40 02 FB | 	rdlong	local14, objptr
0ad68     20 39 02 F6 | 	mov	local10, local14
0ad6c     01 38 66 F0 | 	shl	local10, #1
0ad70     20 39 02 F1 | 	add	local10, local14
0ad74     02 38 66 F0 | 	shl	local10, #2
0ad78     03 00 00 FF 
0ad7c     00 E4 85 F1 | 	sub	objptr, ##1536
0ad80     F2 38 02 F1 | 	add	local10, objptr
0ad84     1C 33 62 FC | 	wrlong	local07, local10
0ad88     03 00 00 FF 
0ad8c     00 E4 05 F1 | 	add	objptr, ##1536
0ad90     F2 40 02 FB | 	rdlong	local14, objptr
0ad94     01 40 06 F1 | 	add	local14, #1
0ad98     F2 40 62 FC | 	wrlong	local14, objptr
0ad9c     20 39 02 F6 | 	mov	local10, local14
0ada0     01 38 66 F0 | 	shl	local10, #1
0ada4     20 39 02 F1 | 	add	local10, local14
0ada8     02 38 66 F0 | 	shl	local10, #2
0adac     03 00 00 FF 
0adb0     00 E4 85 F1 | 	sub	objptr, ##1536
0adb4     F2 38 02 F1 | 	add	local10, objptr
0adb8     08 38 06 F1 | 	add	local10, #8
0adbc     1C 95 68 FC | 	wrlong	#74, local10
0adc0     03 00 00 FF 
0adc4     00 E4 05 F1 | 	add	objptr, ##1536
0adc8     F2 40 02 FB | 	rdlong	local14, objptr
0adcc     20 39 02 F6 | 	mov	local10, local14
0add0     01 38 66 F0 | 	shl	local10, #1
0add4     20 39 02 F1 | 	add	local10, local14
0add8     02 38 66 F0 | 	shl	local10, #2
0addc     03 00 00 FF 
0ade0     00 E4 85 F1 | 	sub	objptr, ##1536
0ade4     F2 38 02 F1 | 	add	local10, objptr
0ade8     1C 01 68 FC | 	wrlong	#0, local10
0adec     03 00 00 FF 
0adf0     00 E4 05 F1 | 	add	objptr, ##1536
0adf4     F2 34 02 FB | 	rdlong	local08, objptr
0adf8     01 34 06 F1 | 	add	local08, #1
0adfc     F2 34 62 FC | 	wrlong	local08, objptr
0ae00     4A 00 00 FF 
0ae04     7C E4 85 F1 | 	sub	objptr, ##38012
0ae08                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0ae08                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0ae08                 | ' return 0
0ae08     00 FA 05 F6 | 	mov	result1, #0
0ae0c                 | LR__0917
0ae0c     A7 F0 03 F6 | 	mov	ptra, fp
0ae10     B2 00 A0 FD | 	call	#popregs_
0ae14                 | _compile_for_ret
0ae14     2D 00 64 FD | 	ret
0ae18                 | 
0ae18                 | ' 
0ae18                 | ' '----- compile 'next' command. 
0ae18                 | ' 
0ae18                 | ' function compile_next() as ulong
0ae18                 | _compile_next
0ae18     04 4A 05 F6 | 	mov	COUNT_, #4
0ae1c     A8 00 A0 FD | 	call	#pushregs_
0ae20     37 00 00 FF 
0ae24     44 E4 05 F1 | 	add	objptr, ##28228
0ae28     F2 14 02 FB | 	rdlong	arg02, objptr
0ae2c     03 14 66 F0 | 	shl	arg02, #3
0ae30     02 00 00 FF 
0ae34     38 E4 85 F1 | 	sub	objptr, ##1080
0ae38     F2 14 02 F1 | 	add	arg02, objptr
0ae3c     0A 27 02 FB | 	rdlong	local01, arg02
0ae40                 | ' 
0ae40                 | ' varname$=lparts(ct).part$ 
0ae40                 | ' if varnum=0 then return 35
0ae40     04 E4 85 F1 | 	sub	objptr, #4
0ae44     F2 14 0A FB | 	rdlong	arg02, objptr wz
0ae48     35 00 00 FF 
0ae4c     08 E4 85 F1 | 	sub	objptr, ##27144
0ae50     23 FA 05 A6 |  if_e	mov	result1, #35
0ae54     4C 01 90 AD |  if_e	jmp	#LR__0922
0ae58     01 28 66 F6 | 	neg	local02, #1
0ae5c                 | ' j=-1
0ae5c                 | ' for i=0 to varnum-1
0ae5c     00 2A 06 F6 | 	mov	local03, #0
0ae60     35 00 00 FF 
0ae64     08 E4 05 F1 | 	add	objptr, ##27144
0ae68     F2 2C 02 FB | 	rdlong	local04, objptr
0ae6c     35 00 00 FF 
0ae70     08 E4 85 F1 | 	sub	objptr, ##27144
0ae74                 | LR__0920
0ae74     16 2B 12 F2 | 	cmp	local03, local04 wc
0ae78     38 00 90 3D |  if_ae	jmp	#LR__0921
0ae7c                 | '   if variables(i).name=varname$ then j=i : exit
0ae7c     15 15 02 F6 | 	mov	arg02, local03
0ae80     04 14 66 F0 | 	shl	arg02, #4
0ae84     14 00 00 FF 
0ae88     F8 E5 05 F1 | 	add	objptr, ##10744
0ae8c     F2 14 02 F1 | 	add	arg02, objptr
0ae90     0A 13 02 FB | 	rdlong	arg01, arg02
0ae94     13 15 02 F6 | 	mov	arg02, local01
0ae98     14 00 00 FF 
0ae9c     F8 E5 85 F1 | 	sub	objptr, ##10744
0aea0     F0 BA B1 FD | 	call	#__system___string_cmp
0aea4     00 FA 0D F2 | 	cmp	result1, #0 wz
0aea8     15 29 02 A6 |  if_e	mov	local02, local03
0aeac     01 2A 06 51 |  if_ne	add	local03, #1
0aeb0     C0 FF 9F 5D |  if_ne	jmp	#LR__0920
0aeb4                 | LR__0921
0aeb4                 | ' if j=-1 then return 35
0aeb4     FF FF 7F FF 
0aeb8     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0aebc     23 FA 05 A6 |  if_e	mov	result1, #35
0aec0     E0 00 90 AD |  if_e	jmp	#LR__0922
0aec4     4A 00 00 FF 
0aec8     7C E4 05 F1 | 	add	objptr, ##38012
0aecc     F2 2C 02 FB | 	rdlong	local04, objptr
0aed0     16 2B 02 F6 | 	mov	local03, local04
0aed4     01 2A 66 F0 | 	shl	local03, #1
0aed8     16 2B 02 F1 | 	add	local03, local04
0aedc     02 2A 66 F0 | 	shl	local03, #2
0aee0     03 00 00 FF 
0aee4     00 E4 85 F1 | 	sub	objptr, ##1536
0aee8     F2 2A 02 F1 | 	add	local03, objptr
0aeec     08 2A 06 F1 | 	add	local03, #8
0aef0     15 39 68 FC | 	wrlong	#28, local03
0aef4     03 00 00 FF 
0aef8     00 E4 05 F1 | 	add	objptr, ##1536
0aefc     F2 2C 02 FB | 	rdlong	local04, objptr
0af00     16 2B 02 F6 | 	mov	local03, local04
0af04     01 2A 66 F0 | 	shl	local03, #1
0af08     16 2B 02 F1 | 	add	local03, local04
0af0c     02 2A 66 F0 | 	shl	local03, #2
0af10     03 00 00 FF 
0af14     00 E4 85 F1 | 	sub	objptr, ##1536
0af18     F2 2A 02 F1 | 	add	local03, objptr
0af1c     15 29 62 FC | 	wrlong	local02, local03
0af20     03 00 00 FF 
0af24     00 E4 05 F1 | 	add	objptr, ##1536
0af28     F2 2C 02 FB | 	rdlong	local04, objptr
0af2c     01 2C 06 F1 | 	add	local04, #1
0af30     F2 2C 62 FC | 	wrlong	local04, objptr
0af34     16 2B 02 F6 | 	mov	local03, local04
0af38     01 2A 66 F0 | 	shl	local03, #1
0af3c     16 2B 02 F1 | 	add	local03, local04
0af40     02 2A 66 F0 | 	shl	local03, #2
0af44     03 00 00 FF 
0af48     00 E4 85 F1 | 	sub	objptr, ##1536
0af4c     F2 2A 02 F1 | 	add	local03, objptr
0af50     08 2A 06 F1 | 	add	local03, #8
0af54     15 97 68 FC | 	wrlong	#75, local03
0af58     03 00 00 FF 
0af5c     00 E4 05 F1 | 	add	objptr, ##1536
0af60     F2 2C 02 FB | 	rdlong	local04, objptr
0af64     16 2B 02 F6 | 	mov	local03, local04
0af68     01 2A 66 F0 | 	shl	local03, #1
0af6c     16 2B 02 F1 | 	add	local03, local04
0af70     02 2A 66 F0 | 	shl	local03, #2
0af74     03 00 00 FF 
0af78     00 E4 85 F1 | 	sub	objptr, ##1536
0af7c     F2 2A 02 F1 | 	add	local03, objptr
0af80     15 01 68 FC | 	wrlong	#0, local03
0af84     03 00 00 FF 
0af88     00 E4 05 F1 | 	add	objptr, ##1536
0af8c     F2 2C 02 FB | 	rdlong	local04, objptr
0af90     01 2C 06 F1 | 	add	local04, #1
0af94     F2 2C 62 FC | 	wrlong	local04, objptr
0af98     4A 00 00 FF 
0af9c     7C E4 85 F1 | 	sub	objptr, ##38012
0afa0                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0afa0                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0afa0                 | ' return 0
0afa0     00 FA 05 F6 | 	mov	result1, #0
0afa4                 | LR__0922
0afa4     A7 F0 03 F6 | 	mov	ptra, fp
0afa8     B2 00 A0 FD | 	call	#popregs_
0afac                 | _compile_next_ret
0afac     2D 00 64 FD | 	ret
0afb0                 | 
0afb0                 | ' 
0afb0                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0afb0                 | ' 
0afb0                 | ' function compile_gosub() as ulong
0afb0                 | _compile_gosub
0afb0     02 4A 05 F6 | 	mov	COUNT_, #2
0afb4     A8 00 A0 FD | 	call	#pushregs_
0afb8     4A 00 00 FF 
0afbc     7C E4 05 F1 | 	add	objptr, ##38012
0afc0     F2 26 02 FB | 	rdlong	local01, objptr
0afc4     13 29 02 F6 | 	mov	local02, local01
0afc8     01 28 66 F0 | 	shl	local02, #1
0afcc     13 29 02 F1 | 	add	local02, local01
0afd0     02 28 66 F0 | 	shl	local02, #2
0afd4     03 00 00 FF 
0afd8     00 E4 85 F1 | 	sub	objptr, ##1536
0afdc     F2 28 02 F1 | 	add	local02, objptr
0afe0     08 28 06 F1 | 	add	local02, #8
0afe4     14 53 69 FC | 	wrlong	#169, local02
0afe8     03 00 00 FF 
0afec     00 E4 05 F1 | 	add	objptr, ##1536
0aff0     F2 28 02 FB | 	rdlong	local02, objptr
0aff4     01 28 06 F1 | 	add	local02, #1
0aff8     F2 28 62 FC | 	wrlong	local02, objptr
0affc     4A 00 00 FF 
0b000     7C E4 85 F1 | 	sub	objptr, ##38012
0b004     0C 00 B0 FD | 	call	#_compile_goto
0b008                 | ' compiledline(lineptr).result_type=token_gosub
0b008                 | ' lineptr+=1
0b008                 | ' err=compile_goto()
0b008                 | ' return err
0b008     A7 F0 03 F6 | 	mov	ptra, fp
0b00c     B2 00 A0 FD | 	call	#popregs_
0b010                 | _compile_gosub_ret
0b010     2D 00 64 FD | 	ret
0b014                 | 
0b014                 | ' 
0b014                 | ' '----- compile 'goto' 
0b014                 | ' 
0b014                 | ' function compile_goto() as ulong
0b014                 | _compile_goto
0b014     03 4A 05 F6 | 	mov	COUNT_, #3
0b018     A8 00 A0 FD | 	call	#pushregs_
0b01c     34 F0 07 F1 | 	add	ptra, #52
0b020                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0b020     37 00 00 FF 
0b024     44 E4 05 F1 | 	add	objptr, ##28228
0b028     F2 16 02 FB | 	rdlong	arg03, objptr
0b02c     03 16 66 F0 | 	shl	arg03, #3
0b030     02 00 00 FF 
0b034     38 E4 85 F1 | 	sub	objptr, ##1080
0b038     F2 16 02 F1 | 	add	arg03, objptr
0b03c     04 16 06 F1 | 	add	arg03, #4
0b040     0B 17 02 FB | 	rdlong	arg03, arg03
0b044     01 00 00 FF 
0b048     00 16 0E F2 | 	cmp	arg03, ##512 wz
0b04c     35 00 00 FF 
0b050     0C E4 85 F1 | 	sub	objptr, ##27148
0b054     CC 02 90 5D |  if_ne	jmp	#LR__0935
0b058     37 00 00 FF 
0b05c     44 E4 05 F1 | 	add	objptr, ##28228
0b060     F2 16 02 FB | 	rdlong	arg03, objptr
0b064     01 16 06 F1 | 	add	arg03, #1
0b068     03 16 66 F0 | 	shl	arg03, #3
0b06c     02 00 00 FF 
0b070     38 E4 85 F1 | 	sub	objptr, ##1080
0b074     F2 16 02 F1 | 	add	arg03, objptr
0b078     04 16 06 F1 | 	add	arg03, #4
0b07c     0B 17 02 FB | 	rdlong	arg03, arg03
0b080     FE 17 0E F2 | 	cmp	arg03, #510 wz
0b084     35 00 00 FF 
0b088     0C E4 85 F1 | 	sub	objptr, ##27148
0b08c     94 02 90 5D |  if_ne	jmp	#LR__0935
0b090     37 00 00 FF 
0b094     44 E4 05 F1 | 	add	objptr, ##28228
0b098     F2 16 02 FB | 	rdlong	arg03, objptr
0b09c     03 16 66 F0 | 	shl	arg03, #3
0b0a0     02 00 00 FF 
0b0a4     38 E4 85 F1 | 	sub	objptr, ##1080
0b0a8     F2 16 02 F1 | 	add	arg03, objptr
0b0ac     0B 13 02 FB | 	rdlong	arg01, arg03
0b0b0     00 14 06 F6 | 	mov	arg02, #0
0b0b4     35 00 00 FF 
0b0b8     0C E4 85 F1 | 	sub	objptr, ##27148
0b0bc     A0 ED B1 FD | 	call	#__system____builtin_atoi
0b0c0     04 4E 05 F1 | 	add	fp, #4
0b0c4     A7 FA 61 FC | 	wrlong	result1, fp
0b0c8     4A 00 00 FF 
0b0cc     7C E4 05 F1 | 	add	objptr, ##38012
0b0d0     F2 26 02 FB | 	rdlong	local01, objptr
0b0d4     13 29 02 F6 | 	mov	local02, local01
0b0d8     01 28 66 F0 | 	shl	local02, #1
0b0dc     13 29 02 F1 | 	add	local02, local01
0b0e0     02 28 66 F0 | 	shl	local02, #2
0b0e4     03 00 00 FF 
0b0e8     00 E4 85 F1 | 	sub	objptr, ##1536
0b0ec     F2 28 02 F1 | 	add	local02, objptr
0b0f0     08 28 06 F1 | 	add	local02, #8
0b0f4     14 9D 68 FC | 	wrlong	#78, local02
0b0f8     03 00 00 FF 
0b0fc     0C E4 05 F1 | 	add	objptr, ##1548
0b100     F2 2A 02 FB | 	rdlong	local03, objptr
0b104     4A 00 00 FF 
0b108     88 E4 85 F1 | 	sub	objptr, ##38024
0b10c     04 4E 05 F1 | 	add	fp, #4
0b110     A7 2A 62 FC | 	wrlong	local03, fp
0b114     08 4E 85 F1 | 	sub	fp, #8
0b118                 | '   gotoline=val%(lparts(ct).part$) 
0b118                 | '   compiledline(lineptr).result_type=token_fast_goto
0b118                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b118                 | '   do
0b118                 | LR__0930
0b118     10 4E 05 F1 | 	add	fp, #16
0b11c     A7 12 02 F6 | 	mov	arg01, fp
0b120     08 4E 85 F1 | 	sub	fp, #8
0b124     A7 14 02 FB | 	rdlong	arg02, fp
0b128     08 4E 85 F1 | 	sub	fp, #8
0b12c     18 16 06 F6 | 	mov	arg03, #24
0b130     0B 00 00 FF 
0b134     CC E4 05 F1 | 	add	objptr, ##5836
0b138     A8 AB B1 FD | 	call	#_psram_spin2_read1
0b13c     0B 00 00 FF 
0b140     CC E4 85 F1 | 	sub	objptr, ##5836
0b144                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b144                 | '     if gotoheader(0)<>$FFFFFFFF then
0b144     10 4E 05 F1 | 	add	fp, #16
0b148     A7 2A 02 FB | 	rdlong	local03, fp
0b14c     10 4E 85 F1 | 	sub	fp, #16
0b150     FF FF 7F FF 
0b154     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0b158     24 00 90 AD |  if_e	jmp	#LR__0931
0b15c     08 4E 05 F1 | 	add	fp, #8
0b160     A7 2A 02 FB | 	rdlong	local03, fp
0b164     04 4E 05 F1 | 	add	fp, #4
0b168     A7 2A 62 FC | 	wrlong	local03, fp
0b16c     18 4E 05 F1 | 	add	fp, #24
0b170     A7 2A 02 FB | 	rdlong	local03, fp
0b174     1C 4E 85 F1 | 	sub	fp, #28
0b178     A7 2A 62 FC | 	wrlong	local03, fp
0b17c     08 4E 85 F1 | 	sub	fp, #8
0b180                 | LR__0931
0b180     24 4E 05 F1 | 	add	fp, #36
0b184     A7 2A 02 FB | 	rdlong	local03, fp
0b188     24 4E 85 F1 | 	sub	fp, #36
0b18c     FF FF 3F FF 
0b190     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0b194     10 4E 05 51 |  if_ne	add	fp, #16
0b198     A7 26 02 5B |  if_ne	rdlong	local01, fp
0b19c     10 4E 85 51 |  if_ne	sub	fp, #16
0b1a0     FF FF 7F 5F 
0b1a4     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0b1a8     1C 00 90 AD |  if_e	jmp	#LR__0932
0b1ac     10 4E 05 F1 | 	add	fp, #16
0b1b0     A7 2A 02 FB | 	rdlong	local03, fp
0b1b4     0C 4E 85 F1 | 	sub	fp, #12
0b1b8     A7 28 02 FB | 	rdlong	local02, fp
0b1bc     04 4E 85 F1 | 	sub	fp, #4
0b1c0     14 2B 0A F2 | 	cmp	local03, local02 wz
0b1c4     50 FF 9F 5D |  if_ne	jmp	#LR__0930
0b1c8                 | LR__0932
0b1c8                 | '   if gotoheader(0)=gotoline then
0b1c8     10 4E 05 F1 | 	add	fp, #16
0b1cc     A7 2A 02 FB | 	rdlong	local03, fp
0b1d0     0C 4E 85 F1 | 	sub	fp, #12
0b1d4     A7 26 02 FB | 	rdlong	local01, fp
0b1d8     04 4E 85 F1 | 	sub	fp, #4
0b1dc     13 2B 0A F2 | 	cmp	local03, local01 wz
0b1e0     7C 00 90 5D |  if_ne	jmp	#LR__0933
0b1e4     4A 00 00 FF 
0b1e8     7C E4 05 F1 | 	add	objptr, ##38012
0b1ec     F2 26 02 FB | 	rdlong	local01, objptr
0b1f0     13 29 02 F6 | 	mov	local02, local01
0b1f4     01 28 66 F0 | 	shl	local02, #1
0b1f8     13 29 02 F1 | 	add	local02, local01
0b1fc     02 28 66 F0 | 	shl	local02, #2
0b200     03 00 00 FF 
0b204     00 E4 85 F1 | 	sub	objptr, ##1536
0b208     F2 28 02 F1 | 	add	local02, objptr
0b20c     0C 4E 05 F1 | 	add	fp, #12
0b210     A7 2A 02 FB | 	rdlong	local03, fp
0b214     14 2B 62 FC | 	wrlong	local03, local02
0b218     03 00 00 FF 
0b21c     00 E4 05 F1 | 	add	objptr, ##1536
0b220     F2 26 02 FB | 	rdlong	local01, objptr
0b224     13 29 02 F6 | 	mov	local02, local01
0b228     01 28 66 F0 | 	shl	local02, #1
0b22c     13 29 02 F1 | 	add	local02, local01
0b230     02 28 66 F0 | 	shl	local02, #2
0b234     03 00 00 FF 
0b238     00 E4 85 F1 | 	sub	objptr, ##1536
0b23c     F2 28 02 F1 | 	add	local02, objptr
0b240     08 4E 85 F1 | 	sub	fp, #8
0b244     A7 2A 02 FB | 	rdlong	local03, fp
0b248     04 4E 85 F1 | 	sub	fp, #4
0b24c     04 28 06 F1 | 	add	local02, #4
0b250     14 2B 62 FC | 	wrlong	local03, local02
0b254     47 00 00 FF 
0b258     7C E4 85 F1 | 	sub	objptr, ##36476
0b25c     A4 00 90 FD | 	jmp	#LR__0934
0b260                 | LR__0933
0b260     4A 00 00 FF 
0b264     7C E4 05 F1 | 	add	objptr, ##38012
0b268     F2 26 02 FB | 	rdlong	local01, objptr
0b26c     13 29 02 F6 | 	mov	local02, local01
0b270     01 28 66 F0 | 	shl	local02, #1
0b274     13 29 02 F1 | 	add	local02, local01
0b278     02 28 66 F0 | 	shl	local02, #2
0b27c     03 00 00 FF 
0b280     00 E4 85 F1 | 	sub	objptr, ##1536
0b284     F2 28 02 F1 | 	add	local02, objptr
0b288     00 00 C0 FF 
0b28c     14 01 68 FC | 	wrlong	##-2147483648, local02
0b290     03 00 00 FF 
0b294     00 E4 05 F1 | 	add	objptr, ##1536
0b298     F2 26 02 FB | 	rdlong	local01, objptr
0b29c     13 29 02 F6 | 	mov	local02, local01
0b2a0     01 28 66 F0 | 	shl	local02, #1
0b2a4     13 29 02 F1 | 	add	local02, local01
0b2a8     02 28 66 F0 | 	shl	local02, #2
0b2ac     03 00 00 FF 
0b2b0     00 E4 85 F1 | 	sub	objptr, ##1536
0b2b4     F2 28 02 F1 | 	add	local02, objptr
0b2b8     04 4E 05 F1 | 	add	fp, #4
0b2bc     A7 2A 02 FB | 	rdlong	local03, fp
0b2c0     04 4E 85 F1 | 	sub	fp, #4
0b2c4     04 28 06 F1 | 	add	local02, #4
0b2c8     14 2B 62 FC | 	wrlong	local03, local02
0b2cc     03 00 00 FF 
0b2d0     00 E4 05 F1 | 	add	objptr, ##1536
0b2d4     F2 26 02 FB | 	rdlong	local01, objptr
0b2d8     13 29 02 F6 | 	mov	local02, local01
0b2dc     01 28 66 F0 | 	shl	local02, #1
0b2e0     13 29 02 F1 | 	add	local02, local01
0b2e4     02 28 66 F0 | 	shl	local02, #2
0b2e8     03 00 00 FF 
0b2ec     00 E4 85 F1 | 	sub	objptr, ##1536
0b2f0     F2 28 02 F1 | 	add	local02, objptr
0b2f4     08 28 06 F1 | 	add	local02, #8
0b2f8     14 A7 68 FC | 	wrlong	#83, local02
0b2fc     47 00 00 FF 
0b300     7C E4 85 F1 | 	sub	objptr, ##36476
0b304                 | LR__0934
0b304     4A 00 00 FF 
0b308     7C E4 05 F1 | 	add	objptr, ##38012
0b30c     F2 2A 02 FB | 	rdlong	local03, objptr
0b310     01 2A 06 F1 | 	add	local03, #1
0b314     F2 2A 62 FC | 	wrlong	local03, objptr
0b318     4A 00 00 FF 
0b31c     7C E4 85 F1 | 	sub	objptr, ##38012
0b320     D0 00 90 FD | 	jmp	#LR__0936
0b324                 | LR__0935
0b324     98 0A B0 FD | 	call	#_expr
0b328     30 4E 05 F1 | 	add	fp, #48
0b32c     A7 9E 68 FC | 	wrlong	#79, fp
0b330     08 4E 85 F1 | 	sub	fp, #8
0b334     A7 00 68 FC | 	wrlong	#0, fp
0b338     04 4E 05 F1 | 	add	fp, #4
0b33c     A7 2A 02 FB | 	rdlong	local03, fp
0b340     04 4E 05 F1 | 	add	fp, #4
0b344     A7 26 02 FB | 	rdlong	local01, fp
0b348     30 4E 85 F1 | 	sub	fp, #48
0b34c     4A 00 00 FF 
0b350     7C E4 05 F1 | 	add	objptr, ##38012
0b354     F2 28 02 FB | 	rdlong	local02, objptr
0b358     14 17 02 F6 | 	mov	arg03, local02
0b35c     01 16 66 F0 | 	shl	arg03, #1
0b360     14 17 02 F1 | 	add	arg03, local02
0b364     02 16 66 F0 | 	shl	arg03, #2
0b368     03 00 00 FF 
0b36c     00 E4 85 F1 | 	sub	objptr, ##1536
0b370     F2 16 02 F1 | 	add	arg03, objptr
0b374     0B 01 68 FC | 	wrlong	#0, arg03
0b378     03 00 00 FF 
0b37c     00 E4 05 F1 | 	add	objptr, ##1536
0b380     F2 28 02 FB | 	rdlong	local02, objptr
0b384     14 17 02 F6 | 	mov	arg03, local02
0b388     01 16 66 F0 | 	shl	arg03, #1
0b38c     14 17 02 F1 | 	add	arg03, local02
0b390     02 16 66 F0 | 	shl	arg03, #2
0b394     03 00 00 FF 
0b398     00 E4 85 F1 | 	sub	objptr, ##1536
0b39c     F2 16 02 F1 | 	add	arg03, objptr
0b3a0     04 16 06 F1 | 	add	arg03, #4
0b3a4     0B 2B 62 FC | 	wrlong	local03, arg03
0b3a8     03 00 00 FF 
0b3ac     00 E4 05 F1 | 	add	objptr, ##1536
0b3b0     F2 2A 02 FB | 	rdlong	local03, objptr
0b3b4     15 29 02 F6 | 	mov	local02, local03
0b3b8     01 28 66 F0 | 	shl	local02, #1
0b3bc     15 29 02 F1 | 	add	local02, local03
0b3c0     02 28 66 F0 | 	shl	local02, #2
0b3c4     03 00 00 FF 
0b3c8     00 E4 85 F1 | 	sub	objptr, ##1536
0b3cc     F2 28 02 F1 | 	add	local02, objptr
0b3d0     08 28 06 F1 | 	add	local02, #8
0b3d4     14 27 62 FC | 	wrlong	local01, local02
0b3d8     03 00 00 FF 
0b3dc     00 E4 05 F1 | 	add	objptr, ##1536
0b3e0     F2 2A 02 FB | 	rdlong	local03, objptr
0b3e4     01 2A 06 F1 | 	add	local03, #1
0b3e8     F2 2A 62 FC | 	wrlong	local03, objptr
0b3ec     4A 00 00 FF 
0b3f0     7C E4 85 F1 | 	sub	objptr, ##38012
0b3f4                 | LR__0936
0b3f4                 | ' return 0
0b3f4     00 FA 05 F6 | 	mov	result1, #0
0b3f8     A7 F0 03 F6 | 	mov	ptra, fp
0b3fc     B2 00 A0 FD | 	call	#popregs_
0b400                 | _compile_goto_ret
0b400     2D 00 64 FD | 	ret
0b404                 | 
0b404                 | ' 
0b404                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b404                 | ' 
0b404                 | ' function compile_on() as ulong
0b404                 | _compile_on
0b404     04 4A 05 F6 | 	mov	COUNT_, #4
0b408     A8 00 A0 FD | 	call	#pushregs_
0b40c     B0 09 B0 FD | 	call	#_expr
0b410     00 26 06 F6 | 	mov	local01, #0
0b414     4A 00 00 FF 
0b418     7C E4 05 F1 | 	add	objptr, ##38012
0b41c     F2 14 02 FB | 	rdlong	arg02, objptr
0b420     0A 13 02 F6 | 	mov	arg01, arg02
0b424     01 12 66 F0 | 	shl	arg01, #1
0b428     0A 13 02 F1 | 	add	arg01, arg02
0b42c     02 12 66 F0 | 	shl	arg01, #2
0b430     03 00 00 FF 
0b434     00 E4 85 F1 | 	sub	objptr, ##1536
0b438     F2 12 02 F1 | 	add	arg01, objptr
0b43c     08 12 06 F1 | 	add	arg01, #8
0b440     09 83 69 FC | 	wrlong	#193, arg01
0b444     03 00 00 FF 
0b448     00 E4 05 F1 | 	add	objptr, ##1536
0b44c     F2 14 02 FB | 	rdlong	arg02, objptr
0b450     0A 29 02 F6 | 	mov	local02, arg02
0b454     01 14 06 F1 | 	add	arg02, #1
0b458     F2 14 62 FC | 	wrlong	arg02, objptr
0b45c                 | ' expr()
0b45c                 | ' 'print lparts(ct).part$ 'ok
0b45c                 | ' numpar=0
0b45c                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b45c                 | ' if lparts(ct).part$="goto" then
0b45c     13 00 00 FF 
0b460     38 E4 85 F1 | 	sub	objptr, ##9784
0b464     F2 14 02 FB | 	rdlong	arg02, objptr
0b468     03 14 66 F0 | 	shl	arg02, #3
0b46c     02 00 00 FF 
0b470     38 E4 85 F1 | 	sub	objptr, ##1080
0b474     F2 14 02 F1 | 	add	arg02, objptr
0b478     0A 13 02 FB | 	rdlong	arg01, arg02
0b47c     B5 01 00 FF 
0b480     F0 15 06 F6 | 	mov	arg02, ##@LR__5829
0b484     35 00 00 FF 
0b488     0C E4 85 F1 | 	sub	objptr, ##27148
0b48c     04 B5 B1 FD | 	call	#__system___string_cmp
0b490     00 FA 0D F2 | 	cmp	result1, #0 wz
0b494     14 02 90 5D |  if_ne	jmp	#LR__0945
0b498     37 00 00 FF 
0b49c     44 E4 05 F1 | 	add	objptr, ##28228
0b4a0     F2 2A 02 FB | 	rdlong	local03, objptr
0b4a4     37 00 00 FF 
0b4a8     44 E4 85 F1 | 	sub	objptr, ##28228
0b4ac     01 2A 06 F1 | 	add	local03, #1
0b4b0                 | '   i=ct+1
0b4b0                 | '   do
0b4b0                 | LR__0940
0b4b0                 | '     if lparts(i).token=token_decimal then
0b4b0     15 FB 01 F6 | 	mov	result1, local03
0b4b4     03 FA 65 F0 | 	shl	result1, #3
0b4b8     35 00 00 FF 
0b4bc     0C E4 05 F1 | 	add	objptr, ##27148
0b4c0     F2 FA 01 F1 | 	add	result1, objptr
0b4c4     04 FA 05 F1 | 	add	result1, #4
0b4c8     FD FA 01 FB | 	rdlong	result1, result1
0b4cc     01 00 00 FF 
0b4d0     00 FA 0D F2 | 	cmp	result1, ##512 wz
0b4d4     35 00 00 FF 
0b4d8     0C E4 85 F1 | 	sub	objptr, ##27148
0b4dc     DC 00 90 5D |  if_ne	jmp	#LR__0941
0b4e0     4A 00 00 FF 
0b4e4     7C E4 05 F1 | 	add	objptr, ##38012
0b4e8     F2 FA 01 FB | 	rdlong	result1, objptr
0b4ec     FD 14 02 F6 | 	mov	arg02, result1
0b4f0     01 14 66 F0 | 	shl	arg02, #1
0b4f4     FD 14 02 F1 | 	add	arg02, result1
0b4f8     02 14 66 F0 | 	shl	arg02, #2
0b4fc     03 00 00 FF 
0b500     00 E4 85 F1 | 	sub	objptr, ##1536
0b504     F2 14 02 F1 | 	add	arg02, objptr
0b508     00 00 C0 FF 
0b50c     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0b510     03 00 00 FF 
0b514     00 E4 05 F1 | 	add	objptr, ##1536
0b518     F2 14 02 FB | 	rdlong	arg02, objptr
0b51c     0A 2D 02 F6 | 	mov	local04, arg02
0b520     01 2C 66 F0 | 	shl	local04, #1
0b524     0A 2D 02 F1 | 	add	local04, arg02
0b528     02 2C 66 F0 | 	shl	local04, #2
0b52c     03 00 00 FF 
0b530     00 E4 85 F1 | 	sub	objptr, ##1536
0b534     F2 2C 02 F1 | 	add	local04, objptr
0b538     15 15 02 F6 | 	mov	arg02, local03
0b53c     03 14 66 F0 | 	shl	arg02, #3
0b540     12 00 00 FF 
0b544     70 E4 85 F1 | 	sub	objptr, ##9328
0b548     F2 14 02 F1 | 	add	arg02, objptr
0b54c     0A 13 02 FB | 	rdlong	arg01, arg02
0b550     00 14 06 F6 | 	mov	arg02, #0
0b554     35 00 00 FF 
0b558     0C E4 85 F1 | 	sub	objptr, ##27148
0b55c     00 E9 B1 FD | 	call	#__system____builtin_atoi
0b560     04 2C 06 F1 | 	add	local04, #4
0b564     16 FB 61 FC | 	wrlong	result1, local04
0b568     4A 00 00 FF 
0b56c     7C E4 05 F1 | 	add	objptr, ##38012
0b570     F2 14 02 FB | 	rdlong	arg02, objptr
0b574     0A 2D 02 F6 | 	mov	local04, arg02
0b578     01 2C 66 F0 | 	shl	local04, #1
0b57c     0A 2D 02 F1 | 	add	local04, arg02
0b580     02 2C 66 F0 | 	shl	local04, #2
0b584     03 00 00 FF 
0b588     00 E4 85 F1 | 	sub	objptr, ##1536
0b58c     F2 2C 02 F1 | 	add	local04, objptr
0b590     08 2C 06 F1 | 	add	local04, #8
0b594     16 A7 68 FC | 	wrlong	#83, local04
0b598     03 00 00 FF 
0b59c     00 E4 05 F1 | 	add	objptr, ##1536
0b5a0     F2 2C 02 FB | 	rdlong	local04, objptr
0b5a4     01 2C 06 F1 | 	add	local04, #1
0b5a8     F2 2C 62 FC | 	wrlong	local04, objptr
0b5ac     4A 00 00 FF 
0b5b0     7C E4 85 F1 | 	sub	objptr, ##38012
0b5b4     01 26 06 F1 | 	add	local01, #1
0b5b8     08 00 90 FD | 	jmp	#LR__0942
0b5bc                 | LR__0941
0b5bc                 | '       return 17
0b5bc     11 FA 05 F6 | 	mov	result1, #17
0b5c0     5C 04 90 FD | 	jmp	#LR__0955
0b5c4                 | LR__0942
0b5c4     01 2A 06 F1 | 	add	local03, #1
0b5c8                 | '     i+=1
0b5c8                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b5c8     15 2D 02 F6 | 	mov	local04, local03
0b5cc     03 2C 66 F0 | 	shl	local04, #3
0b5d0     35 00 00 FF 
0b5d4     0C E4 05 F1 | 	add	objptr, ##27148
0b5d8     F2 2C 02 F1 | 	add	local04, objptr
0b5dc     04 2C 06 F1 | 	add	local04, #4
0b5e0     16 2D 02 FB | 	rdlong	local04, local04
0b5e4     11 2C 0E F2 | 	cmp	local04, #17 wz
0b5e8     35 00 00 FF 
0b5ec     0C E4 85 F1 | 	sub	objptr, ##27148
0b5f0     30 00 90 AD |  if_e	jmp	#LR__0943
0b5f4     15 2D 02 F6 | 	mov	local04, local03
0b5f8     03 2C 66 F0 | 	shl	local04, #3
0b5fc     35 00 00 FF 
0b600     0C E4 05 F1 | 	add	objptr, ##27148
0b604     F2 2C 02 F1 | 	add	local04, objptr
0b608     04 2C 06 F1 | 	add	local04, #4
0b60c     16 2D 02 FB | 	rdlong	local04, local04
0b610     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b614     35 00 00 FF 
0b618     0C E4 85 F1 | 	sub	objptr, ##27148
0b61c     15 FA 05 56 |  if_ne	mov	result1, #21
0b620     FC 03 90 5D |  if_ne	jmp	#LR__0955
0b624                 | LR__0943
0b624                 | '     if lparts(i).token=token_end then exit loop
0b624     15 2D 02 F6 | 	mov	local04, local03
0b628     03 2C 66 F0 | 	shl	local04, #3
0b62c     35 00 00 FF 
0b630     0C E4 05 F1 | 	add	objptr, ##27148
0b634     F2 2C 02 F1 | 	add	local04, objptr
0b638     04 2C 06 F1 | 	add	local04, #4
0b63c     16 2D 02 FB | 	rdlong	local04, local04
0b640     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b644     35 00 00 FF 
0b648     0C E4 85 F1 | 	sub	objptr, ##27148
0b64c     30 00 90 AD |  if_e	jmp	#LR__0944
0b650     01 2A 06 F1 | 	add	local03, #1
0b654     15 2D 02 F6 | 	mov	local04, local03
0b658     03 2C 66 F0 | 	shl	local04, #3
0b65c     35 00 00 FF 
0b660     0C E4 05 F1 | 	add	objptr, ##27148
0b664     F2 2C 02 F1 | 	add	local04, objptr
0b668     04 2C 06 F1 | 	add	local04, #4
0b66c     16 2D 02 FB | 	rdlong	local04, local04
0b670     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b674     35 00 00 FF 
0b678     0C E4 85 F1 | 	sub	objptr, ##27148
0b67c     30 FE 9F 5D |  if_ne	jmp	#LR__0940
0b680                 | LR__0944
0b680     14 2D 02 F6 | 	mov	local04, local02
0b684     01 2C 66 F0 | 	shl	local04, #1
0b688     14 2D 02 F1 | 	add	local04, local02
0b68c     02 2C 66 F0 | 	shl	local04, #2
0b690     47 00 00 FF 
0b694     7C E4 05 F1 | 	add	objptr, ##36476
0b698     F2 2C 02 F1 | 	add	local04, objptr
0b69c     04 2C 06 F1 | 	add	local04, #4
0b6a0     16 03 68 FC | 	wrlong	#1, local04
0b6a4     47 00 00 FF 
0b6a8     7C E4 85 F1 | 	sub	objptr, ##36476
0b6ac                 | LR__0945
0b6ac                 | ' 
0b6ac                 | ' if lparts(ct).part$="gosub" then
0b6ac     37 00 00 FF 
0b6b0     44 E4 05 F1 | 	add	objptr, ##28228
0b6b4     F2 2A 02 FB | 	rdlong	local03, objptr
0b6b8     03 2A 66 F0 | 	shl	local03, #3
0b6bc     02 00 00 FF 
0b6c0     38 E4 85 F1 | 	sub	objptr, ##1080
0b6c4     F2 2A 02 F1 | 	add	local03, objptr
0b6c8     15 13 02 FB | 	rdlong	arg01, local03
0b6cc     B5 01 00 FF 
0b6d0     F5 15 06 F6 | 	mov	arg02, ##@LR__5830
0b6d4     35 00 00 FF 
0b6d8     0C E4 85 F1 | 	sub	objptr, ##27148
0b6dc     B4 B2 B1 FD | 	call	#__system___string_cmp
0b6e0     00 FA 0D F2 | 	cmp	result1, #0 wz
0b6e4     84 02 90 5D |  if_ne	jmp	#LR__0951
0b6e8     37 00 00 FF 
0b6ec     44 E4 05 F1 | 	add	objptr, ##28228
0b6f0     F2 2A 02 FB | 	rdlong	local03, objptr
0b6f4     37 00 00 FF 
0b6f8     44 E4 85 F1 | 	sub	objptr, ##28228
0b6fc     01 2A 06 F1 | 	add	local03, #1
0b700                 | '   i=ct+1
0b700                 | '   do
0b700                 | LR__0946
0b700                 | '     if lparts(i).token=token_decimal then
0b700     15 2D 02 F6 | 	mov	local04, local03
0b704     03 2C 66 F0 | 	shl	local04, #3
0b708     35 00 00 FF 
0b70c     0C E4 05 F1 | 	add	objptr, ##27148
0b710     F2 2C 02 F1 | 	add	local04, objptr
0b714     04 2C 06 F1 | 	add	local04, #4
0b718     16 2D 02 FB | 	rdlong	local04, local04
0b71c     01 00 00 FF 
0b720     00 2C 0E F2 | 	cmp	local04, ##512 wz
0b724     35 00 00 FF 
0b728     0C E4 85 F1 | 	sub	objptr, ##27148
0b72c     4C 01 90 5D |  if_ne	jmp	#LR__0947
0b730     4A 00 00 FF 
0b734     7C E4 05 F1 | 	add	objptr, ##38012
0b738     F2 FA 01 FB | 	rdlong	result1, objptr
0b73c     FD 2C 02 F6 | 	mov	local04, result1
0b740     01 2C 66 F0 | 	shl	local04, #1
0b744     FD 2C 02 F1 | 	add	local04, result1
0b748     02 2C 66 F0 | 	shl	local04, #2
0b74c     03 00 00 FF 
0b750     00 E4 85 F1 | 	sub	objptr, ##1536
0b754     F2 2C 02 F1 | 	add	local04, objptr
0b758     08 2C 06 F1 | 	add	local04, #8
0b75c     16 53 69 FC | 	wrlong	#169, local04
0b760     03 00 00 FF 
0b764     00 E4 05 F1 | 	add	objptr, ##1536
0b768     F2 FA 01 FB | 	rdlong	result1, objptr
0b76c     01 FA 05 F1 | 	add	result1, #1
0b770     F2 FA 61 FC | 	wrlong	result1, objptr
0b774     FD 2C 02 F6 | 	mov	local04, result1
0b778     01 2C 66 F0 | 	shl	local04, #1
0b77c     FD 2C 02 F1 | 	add	local04, result1
0b780     02 2C 66 F0 | 	shl	local04, #2
0b784     03 00 00 FF 
0b788     00 E4 85 F1 | 	sub	objptr, ##1536
0b78c     F2 2C 02 F1 | 	add	local04, objptr
0b790     00 00 C0 FF 
0b794     16 01 68 FC | 	wrlong	##-2147483648, local04
0b798     03 00 00 FF 
0b79c     00 E4 05 F1 | 	add	objptr, ##1536
0b7a0     F2 FA 01 FB | 	rdlong	result1, objptr
0b7a4     FD 2C 02 F6 | 	mov	local04, result1
0b7a8     01 2C 66 F0 | 	shl	local04, #1
0b7ac     FD 2C 02 F1 | 	add	local04, result1
0b7b0     02 2C 66 F0 | 	shl	local04, #2
0b7b4     03 00 00 FF 
0b7b8     00 E4 85 F1 | 	sub	objptr, ##1536
0b7bc     F2 2C 02 F1 | 	add	local04, objptr
0b7c0     15 13 02 F6 | 	mov	arg01, local03
0b7c4     03 12 66 F0 | 	shl	arg01, #3
0b7c8     12 00 00 FF 
0b7cc     70 E4 85 F1 | 	sub	objptr, ##9328
0b7d0     F2 12 02 F1 | 	add	arg01, objptr
0b7d4     09 13 02 FB | 	rdlong	arg01, arg01
0b7d8     00 14 06 F6 | 	mov	arg02, #0
0b7dc     35 00 00 FF 
0b7e0     0C E4 85 F1 | 	sub	objptr, ##27148
0b7e4     78 E6 B1 FD | 	call	#__system____builtin_atoi
0b7e8     04 2C 06 F1 | 	add	local04, #4
0b7ec     16 FB 61 FC | 	wrlong	result1, local04
0b7f0     4A 00 00 FF 
0b7f4     7C E4 05 F1 | 	add	objptr, ##38012
0b7f8     F2 12 02 FB | 	rdlong	arg01, objptr
0b7fc     09 2D 02 F6 | 	mov	local04, arg01
0b800     01 2C 66 F0 | 	shl	local04, #1
0b804     09 2D 02 F1 | 	add	local04, arg01
0b808     02 2C 66 F0 | 	shl	local04, #2
0b80c     03 00 00 FF 
0b810     00 E4 85 F1 | 	sub	objptr, ##1536
0b814     F2 2C 02 F1 | 	add	local04, objptr
0b818     08 2C 06 F1 | 	add	local04, #8
0b81c     16 A7 68 FC | 	wrlong	#83, local04
0b820     03 00 00 FF 
0b824     00 E4 05 F1 | 	add	objptr, ##1536
0b828     F2 12 02 FB | 	rdlong	arg01, objptr
0b82c     01 12 06 F1 | 	add	arg01, #1
0b830     F2 12 62 FC | 	wrlong	arg01, objptr
0b834     01 26 06 F1 | 	add	local01, #1
0b838     09 2D 02 F6 | 	mov	local04, arg01
0b83c     01 2C 66 F0 | 	shl	local04, #1
0b840     09 2D 02 F1 | 	add	local04, arg01
0b844     02 2C 66 F0 | 	shl	local04, #2
0b848     03 00 00 FF 
0b84c     00 E4 85 F1 | 	sub	objptr, ##1536
0b850     F2 2C 02 F1 | 	add	local04, objptr
0b854     08 2C 06 F1 | 	add	local04, #8
0b858     16 5B 68 FC | 	wrlong	#45, local04
0b85c     03 00 00 FF 
0b860     00 E4 05 F1 | 	add	objptr, ##1536
0b864     F2 2C 02 FB | 	rdlong	local04, objptr
0b868     01 2C 06 F1 | 	add	local04, #1
0b86c     F2 2C 62 FC | 	wrlong	local04, objptr
0b870     4A 00 00 FF 
0b874     7C E4 85 F1 | 	sub	objptr, ##38012
0b878     08 00 90 FD | 	jmp	#LR__0948
0b87c                 | LR__0947
0b87c                 | '       return 17
0b87c     11 FA 05 F6 | 	mov	result1, #17
0b880     9C 01 90 FD | 	jmp	#LR__0955
0b884                 | LR__0948
0b884     01 2A 06 F1 | 	add	local03, #1
0b888                 | '     i+=1
0b888                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b888     15 2D 02 F6 | 	mov	local04, local03
0b88c     03 2C 66 F0 | 	shl	local04, #3
0b890     35 00 00 FF 
0b894     0C E4 05 F1 | 	add	objptr, ##27148
0b898     F2 2C 02 F1 | 	add	local04, objptr
0b89c     04 2C 06 F1 | 	add	local04, #4
0b8a0     16 2D 02 FB | 	rdlong	local04, local04
0b8a4     11 2C 0E F2 | 	cmp	local04, #17 wz
0b8a8     35 00 00 FF 
0b8ac     0C E4 85 F1 | 	sub	objptr, ##27148
0b8b0     30 00 90 AD |  if_e	jmp	#LR__0949
0b8b4     15 2D 02 F6 | 	mov	local04, local03
0b8b8     03 2C 66 F0 | 	shl	local04, #3
0b8bc     35 00 00 FF 
0b8c0     0C E4 05 F1 | 	add	objptr, ##27148
0b8c4     F2 2C 02 F1 | 	add	local04, objptr
0b8c8     04 2C 06 F1 | 	add	local04, #4
0b8cc     16 2D 02 FB | 	rdlong	local04, local04
0b8d0     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b8d4     35 00 00 FF 
0b8d8     0C E4 85 F1 | 	sub	objptr, ##27148
0b8dc     15 FA 05 56 |  if_ne	mov	result1, #21
0b8e0     3C 01 90 5D |  if_ne	jmp	#LR__0955
0b8e4                 | LR__0949
0b8e4                 | '     if lparts(i).token=token_end then exit loop
0b8e4     15 2D 02 F6 | 	mov	local04, local03
0b8e8     03 2C 66 F0 | 	shl	local04, #3
0b8ec     35 00 00 FF 
0b8f0     0C E4 05 F1 | 	add	objptr, ##27148
0b8f4     F2 2C 02 F1 | 	add	local04, objptr
0b8f8     04 2C 06 F1 | 	add	local04, #4
0b8fc     16 2D 02 FB | 	rdlong	local04, local04
0b900     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b904     35 00 00 FF 
0b908     0C E4 85 F1 | 	sub	objptr, ##27148
0b90c     30 00 90 AD |  if_e	jmp	#LR__0950
0b910     01 2A 06 F1 | 	add	local03, #1
0b914     15 2D 02 F6 | 	mov	local04, local03
0b918     03 2C 66 F0 | 	shl	local04, #3
0b91c     35 00 00 FF 
0b920     0C E4 05 F1 | 	add	objptr, ##27148
0b924     F2 2C 02 F1 | 	add	local04, objptr
0b928     04 2C 06 F1 | 	add	local04, #4
0b92c     16 2D 02 FB | 	rdlong	local04, local04
0b930     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b934     35 00 00 FF 
0b938     0C E4 85 F1 | 	sub	objptr, ##27148
0b93c     C0 FD 9F 5D |  if_ne	jmp	#LR__0946
0b940                 | LR__0950
0b940     14 2D 02 F6 | 	mov	local04, local02
0b944     01 2C 66 F0 | 	shl	local04, #1
0b948     14 2D 02 F1 | 	add	local04, local02
0b94c     02 2C 66 F0 | 	shl	local04, #2
0b950     47 00 00 FF 
0b954     7C E4 05 F1 | 	add	objptr, ##36476
0b958     F2 2C 02 F1 | 	add	local04, objptr
0b95c     04 2C 06 F1 | 	add	local04, #4
0b960     16 07 68 FC | 	wrlong	#3, local04
0b964     47 00 00 FF 
0b968     7C E4 85 F1 | 	sub	objptr, ##36476
0b96c                 | LR__0951
0b96c     14 2B 02 F6 | 	mov	local03, local02
0b970     01 2A 66 F0 | 	shl	local03, #1
0b974     14 2B 02 F1 | 	add	local03, local02
0b978     02 2A 66 F0 | 	shl	local03, #2
0b97c     47 00 00 FF 
0b980     7C E4 05 F1 | 	add	objptr, ##36476
0b984     F2 2A 02 F1 | 	add	local03, objptr
0b988     15 27 62 FC | 	wrlong	local01, local03
0b98c                 | ' compiledline(onlineptr).result.uresult=numpar
0b98c                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0b98c     03 00 00 FF 
0b990     00 E4 05 F1 | 	add	objptr, ##1536
0b994     F2 2A 02 FB | 	rdlong	local03, objptr
0b998     4A 00 00 FF 
0b99c     7C E4 85 F1 | 	sub	objptr, ##38012
0b9a0     97 3C 48 FB | 	callpa	#(@LR__0954-@LR__0952)>>2,fcache_load_ptr_
0b9a4                 | LR__0952
0b9a4     15 2D 02 F6 | 	mov	local04, local03
0b9a8     01 2C 66 F0 | 	shl	local04, #1
0b9ac     15 2D 02 F1 | 	add	local04, local03
0b9b0     02 2C 66 F0 | 	shl	local04, #2
0b9b4     47 00 00 FF 
0b9b8     7C E4 05 F1 | 	add	objptr, ##36476
0b9bc     F2 2C 02 F1 | 	add	local04, objptr
0b9c0     08 2C 06 F1 | 	add	local04, #8
0b9c4     16 2D 02 FB | 	rdlong	local04, local04
0b9c8     2D 2C 0E F2 | 	cmp	local04, #45 wz
0b9cc     47 00 00 FF 
0b9d0     7C E4 85 F1 | 	sub	objptr, ##36476
0b9d4     38 00 90 5D |  if_ne	jmp	#LR__0953
0b9d8     15 2D 02 F6 | 	mov	local04, local03
0b9dc     01 2C 66 F0 | 	shl	local04, #1
0b9e0     15 2D 02 F1 | 	add	local04, local03
0b9e4     02 2C 66 F0 | 	shl	local04, #2
0b9e8     47 00 00 FF 
0b9ec     7C E4 05 F1 | 	add	objptr, ##36476
0b9f0     F2 2C 02 F1 | 	add	local04, objptr
0b9f4     03 00 00 FF 
0b9f8     00 E4 05 F1 | 	add	objptr, ##1536
0b9fc     F2 26 02 FB | 	rdlong	local01, objptr
0ba00     4A 00 00 FF 
0ba04     7C E4 85 F1 | 	sub	objptr, ##38012
0ba08     02 26 86 F1 | 	sub	local01, #2
0ba0c     16 27 62 FC | 	wrlong	local01, local04
0ba10                 | LR__0953
0ba10     01 2A 86 F1 | 	sub	local03, #1
0ba14     14 2B 52 F2 | 	cmps	local03, local02 wc
0ba18     88 FF 9F 3D |  if_ae	jmp	#LR__0952
0ba1c                 | LR__0954
0ba1c                 | ' return 0
0ba1c     00 FA 05 F6 | 	mov	result1, #0
0ba20                 | LR__0955
0ba20     A7 F0 03 F6 | 	mov	ptra, fp
0ba24     B2 00 A0 FD | 	call	#popregs_
0ba28                 | _compile_on_ret
0ba28     2D 00 64 FD | 	ret
0ba2c                 | 
0ba2c                 | ' 
0ba2c                 | ' '----- A helper for compile_input and compile_read
0ba2c                 | '  
0ba2c                 | ' function getaddr() as ulong
0ba2c                 | _getaddr
0ba2c     0B 4A 05 F6 | 	mov	COUNT_, #11
0ba30     A8 00 A0 FD | 	call	#pushregs_
0ba34     37 00 00 FF 
0ba38     44 E4 05 F1 | 	add	objptr, ##28228
0ba3c     F2 2C 02 FB | 	rdlong	local04, objptr
0ba40     03 2C 66 F0 | 	shl	local04, #3
0ba44     02 00 00 FF 
0ba48     38 E4 85 F1 | 	sub	objptr, ##1080
0ba4c     F2 2C 02 F1 | 	add	local04, objptr
0ba50     16 2F 02 FB | 	rdlong	local05, local04
0ba54     01 30 66 F6 | 	neg	local06, #1
0ba58                 | ' 
0ba58                 | ' varname$=lparts(ct).part$
0ba58                 | ' j=-1
0ba58                 | ' 
0ba58                 | ' for i=0 to varnum-1
0ba58     00 32 06 F6 | 	mov	local07, #0
0ba5c     04 E4 85 F1 | 	sub	objptr, #4
0ba60     F2 34 02 FB | 	rdlong	local08, objptr
0ba64     35 00 00 FF 
0ba68     08 E4 85 F1 | 	sub	objptr, ##27144
0ba6c                 | LR__0960
0ba6c     1A 33 52 F2 | 	cmps	local07, local08 wc
0ba70     38 00 90 3D |  if_ae	jmp	#LR__0961
0ba74                 | '   if variables(i).name=varname$ then j=i : exit
0ba74     19 2D 02 F6 | 	mov	local04, local07
0ba78     04 2C 66 F0 | 	shl	local04, #4
0ba7c     14 00 00 FF 
0ba80     F8 E5 05 F1 | 	add	objptr, ##10744
0ba84     F2 2C 02 F1 | 	add	local04, objptr
0ba88     16 13 02 FB | 	rdlong	arg01, local04
0ba8c     17 15 02 F6 | 	mov	arg02, local05
0ba90     14 00 00 FF 
0ba94     F8 E5 85 F1 | 	sub	objptr, ##10744
0ba98     F8 AE B1 FD | 	call	#__system___string_cmp
0ba9c     00 FA 0D F2 | 	cmp	result1, #0 wz
0baa0     19 31 02 A6 |  if_e	mov	local06, local07
0baa4     01 32 06 51 |  if_ne	add	local07, #1
0baa8     C0 FF 9F 5D |  if_ne	jmp	#LR__0960
0baac                 | LR__0961
0baac                 | ' if  j=-1 andalso varnum<maxvars then   
0baac     FF FF 7F FF 
0bab0     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0bab4     A8 00 90 5D |  if_ne	jmp	#LR__0962
0bab8     35 00 00 FF 
0babc     08 E4 05 F1 | 	add	objptr, ##27144
0bac0     F2 34 02 FB | 	rdlong	local08, objptr
0bac4     35 00 00 FF 
0bac8     08 E4 85 F1 | 	sub	objptr, ##27144
0bacc     02 00 00 FF 
0bad0     00 34 56 F2 | 	cmps	local08, ##1024 wc
0bad4     88 00 90 3D |  if_ae	jmp	#LR__0962
0bad8     35 00 00 FF 
0badc     08 E4 05 F1 | 	add	objptr, ##27144
0bae0     F2 2C 02 FB | 	rdlong	local04, objptr
0bae4     04 2C 66 F0 | 	shl	local04, #4
0bae8     20 00 00 FF 
0baec     10 E4 85 F1 | 	sub	objptr, ##16400
0baf0     F2 2C 02 F1 | 	add	local04, objptr
0baf4     16 2F 62 FC | 	wrlong	local05, local04
0baf8     20 00 00 FF 
0bafc     10 E4 05 F1 | 	add	objptr, ##16400
0bb00     F2 2C 02 FB | 	rdlong	local04, objptr
0bb04     04 2C 66 F0 | 	shl	local04, #4
0bb08     20 00 00 FF 
0bb0c     10 E4 85 F1 | 	sub	objptr, ##16400
0bb10     F2 2C 02 F1 | 	add	local04, objptr
0bb14     04 2C 06 F1 | 	add	local04, #4
0bb18     16 01 68 FC | 	wrlong	#0, local04
0bb1c     20 00 00 FF 
0bb20     10 E4 05 F1 | 	add	objptr, ##16400
0bb24     F2 2C 02 FB | 	rdlong	local04, objptr
0bb28     04 2C 66 F0 | 	shl	local04, #4
0bb2c     20 00 00 FF 
0bb30     10 E4 85 F1 | 	sub	objptr, ##16400
0bb34     F2 2C 02 F1 | 	add	local04, objptr
0bb38     0C 2C 06 F1 | 	add	local04, #12
0bb3c     16 39 68 FC | 	wrlong	#28, local04
0bb40     20 00 00 FF 
0bb44     10 E4 05 F1 | 	add	objptr, ##16400
0bb48     F2 34 02 FB | 	rdlong	local08, objptr
0bb4c     1A 31 02 F6 | 	mov	local06, local08
0bb50     01 34 06 F1 | 	add	local08, #1
0bb54     F2 34 62 FC | 	wrlong	local08, objptr
0bb58     35 00 00 FF 
0bb5c     08 E4 85 F1 | 	sub	objptr, ##27144
0bb60                 | LR__0962
0bb60     00 34 06 F6 | 	mov	local08, #0
0bb64                 | ' numpar=0
0bb64                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0bb64     37 00 00 FF 
0bb68     44 E4 05 F1 | 	add	objptr, ##28228
0bb6c     F2 2C 02 FB | 	rdlong	local04, objptr
0bb70     01 2C 06 F1 | 	add	local04, #1
0bb74     03 2C 66 F0 | 	shl	local04, #3
0bb78     02 00 00 FF 
0bb7c     38 E4 85 F1 | 	sub	objptr, ##1080
0bb80     F2 2C 02 F1 | 	add	local04, objptr
0bb84     04 2C 06 F1 | 	add	local04, #4
0bb88     16 33 02 FB | 	rdlong	local07, local04
0bb8c     15 32 0E F2 | 	cmp	local07, #21 wz
0bb90     35 00 00 FF 
0bb94     0C E4 85 F1 | 	sub	objptr, ##27148
0bb98     54 01 90 5D |  if_ne	jmp	#LR__0967
0bb9c     37 00 00 FF 
0bba0     44 E4 05 F1 | 	add	objptr, ##28228
0bba4     F2 36 02 FB | 	rdlong	local09, objptr
0bba8     01 36 06 F1 | 	add	local09, #1
0bbac     F2 36 62 FC | 	wrlong	local09, objptr
0bbb0     37 00 00 FF 
0bbb4     44 E4 85 F1 | 	sub	objptr, ##28228
0bbb8                 | '   ct+=1 											' omit this lpar, this is for expr list
0bbb8                 | '   do
0bbb8                 | LR__0963
0bbb8     37 00 00 FF 
0bbbc     44 E4 05 F1 | 	add	objptr, ##28228
0bbc0     F2 2C 02 FB | 	rdlong	local04, objptr
0bbc4     01 2C 06 F1 | 	add	local04, #1
0bbc8     F2 2C 62 FC | 	wrlong	local04, objptr
0bbcc                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0bbcc                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0bbcc     03 2C 66 F0 | 	shl	local04, #3
0bbd0     02 00 00 FF 
0bbd4     38 E4 85 F1 | 	sub	objptr, ##1080
0bbd8     F2 2C 02 F1 | 	add	local04, objptr
0bbdc     04 2C 06 F1 | 	add	local04, #4
0bbe0     16 37 02 FB | 	rdlong	local09, local04
0bbe4     15 36 0E F2 | 	cmp	local09, #21 wz
0bbe8     35 00 00 FF 
0bbec     0C E4 85 F1 | 	sub	objptr, ##27148
0bbf0     44 00 90 5D |  if_ne	jmp	#LR__0964
0bbf4     37 00 00 FF 
0bbf8     44 E4 05 F1 | 	add	objptr, ##28228
0bbfc     F2 36 02 FB | 	rdlong	local09, objptr
0bc00     01 36 06 F1 | 	add	local09, #1
0bc04     F2 36 62 FC | 	wrlong	local09, objptr
0bc08     37 00 00 FF 
0bc0c     44 E4 85 F1 | 	sub	objptr, ##28228
0bc10     AC 01 B0 FD | 	call	#_expr
0bc14     FD 38 02 F6 | 	mov	local10, result1
0bc18     37 00 00 FF 
0bc1c     44 E4 05 F1 | 	add	objptr, ##28228
0bc20     F2 36 02 FB | 	rdlong	local09, objptr
0bc24     01 36 06 F1 | 	add	local09, #1
0bc28     F2 36 62 FC | 	wrlong	local09, objptr
0bc2c     37 00 00 FF 
0bc30     44 E4 85 F1 | 	sub	objptr, ##28228
0bc34     08 00 90 FD | 	jmp	#LR__0965
0bc38                 | LR__0964
0bc38     84 01 B0 FD | 	call	#_expr
0bc3c     FD 38 02 F6 | 	mov	local10, result1
0bc40                 | LR__0965
0bc40                 | '     if err>0 then return err
0bc40     01 38 56 F2 | 	cmps	local10, #1 wc
0bc44     1C FB 01 36 |  if_ae	mov	result1, local10
0bc48     68 01 90 3D |  if_ae	jmp	#LR__0968
0bc4c     01 34 06 F1 | 	add	local08, #1
0bc50     37 00 00 FF 
0bc54     44 E4 05 F1 | 	add	objptr, ##28228
0bc58     F2 2C 02 FB | 	rdlong	local04, objptr
0bc5c     03 2C 66 F0 | 	shl	local04, #3
0bc60     02 00 00 FF 
0bc64     38 E4 85 F1 | 	sub	objptr, ##1080
0bc68     F2 2C 02 F1 | 	add	local04, objptr
0bc6c     04 2C 06 F1 | 	add	local04, #4
0bc70     16 39 02 FB | 	rdlong	local10, local04
0bc74     14 38 0E F2 | 	cmp	local10, #20 wz
0bc78     35 00 00 FF 
0bc7c     0C E4 85 F1 | 	sub	objptr, ##27148
0bc80     34 00 90 AD |  if_e	jmp	#LR__0966
0bc84     37 00 00 FF 
0bc88     44 E4 05 F1 | 	add	objptr, ##28228
0bc8c     F2 38 02 FB | 	rdlong	local10, objptr
0bc90     03 38 66 F0 | 	shl	local10, #3
0bc94     02 00 00 FF 
0bc98     38 E4 85 F1 | 	sub	objptr, ##1080
0bc9c     F2 38 02 F1 | 	add	local10, objptr
0bca0     04 38 06 F1 | 	add	local10, #4
0bca4     1C 39 02 FB | 	rdlong	local10, local10
0bca8     FE 39 0E F2 | 	cmp	local10, #510 wz
0bcac     35 00 00 FF 
0bcb0     0C E4 85 F1 | 	sub	objptr, ##27148
0bcb4     00 FF 9F 5D |  if_ne	jmp	#LR__0963
0bcb8                 | LR__0966
0bcb8                 | '     if lparts(ct).token=token_end then return 14
0bcb8     37 00 00 FF 
0bcbc     44 E4 05 F1 | 	add	objptr, ##28228
0bcc0     F2 2C 02 FB | 	rdlong	local04, objptr
0bcc4     03 2C 66 F0 | 	shl	local04, #3
0bcc8     02 00 00 FF 
0bccc     38 E4 85 F1 | 	sub	objptr, ##1080
0bcd0     F2 2C 02 F1 | 	add	local04, objptr
0bcd4     04 2C 06 F1 | 	add	local04, #4
0bcd8     16 39 02 FB | 	rdlong	local10, local04
0bcdc     FE 39 0E F2 | 	cmp	local10, #510 wz
0bce0     35 00 00 FF 
0bce4     0C E4 85 F1 | 	sub	objptr, ##27148
0bce8     0E FA 05 A6 |  if_e	mov	result1, #14
0bcec     C4 00 90 AD |  if_e	jmp	#LR__0968
0bcf0                 | LR__0967
0bcf0     1A 29 02 F6 | 	mov	local02, local08
0bcf4     12 2A 06 F6 | 	mov	local03, #18
0bcf8     18 27 02 F6 | 	mov	local01, local06
0bcfc     13 37 02 F6 | 	mov	local09, local01
0bd00     14 3B 02 F6 | 	mov	local11, local02
0bd04     15 27 02 F6 | 	mov	local01, local03
0bd08     4A 00 00 FF 
0bd0c     7C E4 05 F1 | 	add	objptr, ##38012
0bd10     F2 38 02 FB | 	rdlong	local10, objptr
0bd14     1C 35 02 F6 | 	mov	local08, local10
0bd18     01 34 66 F0 | 	shl	local08, #1
0bd1c     1C 35 02 F1 | 	add	local08, local10
0bd20     02 34 66 F0 | 	shl	local08, #2
0bd24     03 00 00 FF 
0bd28     00 E4 85 F1 | 	sub	objptr, ##1536
0bd2c     F2 34 02 F1 | 	add	local08, objptr
0bd30     1A 37 62 FC | 	wrlong	local09, local08
0bd34     03 00 00 FF 
0bd38     00 E4 05 F1 | 	add	objptr, ##1536
0bd3c     F2 38 02 FB | 	rdlong	local10, objptr
0bd40     1C 37 02 F6 | 	mov	local09, local10
0bd44     01 36 66 F0 | 	shl	local09, #1
0bd48     1C 37 02 F1 | 	add	local09, local10
0bd4c     02 36 66 F0 | 	shl	local09, #2
0bd50     03 00 00 FF 
0bd54     00 E4 85 F1 | 	sub	objptr, ##1536
0bd58     F2 36 02 F1 | 	add	local09, objptr
0bd5c     04 36 06 F1 | 	add	local09, #4
0bd60     1B 3B 62 FC | 	wrlong	local11, local09
0bd64     03 00 00 FF 
0bd68     00 E4 05 F1 | 	add	objptr, ##1536
0bd6c     F2 3A 02 FB | 	rdlong	local11, objptr
0bd70     1D 39 02 F6 | 	mov	local10, local11
0bd74     01 38 66 F0 | 	shl	local10, #1
0bd78     1D 39 02 F1 | 	add	local10, local11
0bd7c     02 38 66 F0 | 	shl	local10, #2
0bd80     03 00 00 FF 
0bd84     00 E4 85 F1 | 	sub	objptr, ##1536
0bd88     F2 38 02 F1 | 	add	local10, objptr
0bd8c     08 38 06 F1 | 	add	local10, #8
0bd90     1C 27 62 FC | 	wrlong	local01, local10
0bd94     03 00 00 FF 
0bd98     00 E4 05 F1 | 	add	objptr, ##1536
0bd9c     F2 36 02 FB | 	rdlong	local09, objptr
0bda0     01 36 06 F1 | 	add	local09, #1
0bda4     F2 36 62 FC | 	wrlong	local09, objptr
0bda8     4A 00 00 FF 
0bdac     7C E4 85 F1 | 	sub	objptr, ##38012
0bdb0                 | ' t2.result.twowords(1)=numpar
0bdb0                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0bdb0                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0bdb0                 | ' return 0
0bdb0     00 FA 05 F6 | 	mov	result1, #0
0bdb4                 | LR__0968
0bdb4     A7 F0 03 F6 | 	mov	ptra, fp
0bdb8     B2 00 A0 FD | 	call	#popregs_
0bdbc                 | _getaddr_ret
0bdbc     2D 00 64 FD | 	ret
0bdc0                 | 
0bdc0                 | ' 
0bdc0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bdc0                 | ' '--------------------------------------------- 
0bdc0                 | ' 
0bdc0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bdc0                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0bdc0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bdc0                 | ' 
0bdc0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bdc0                 | ' '
0bdc0                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0bdc0                 | ' '
0bdc0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bdc0                 | ' 
0bdc0                 | ' function expr() as ulong 
0bdc0                 | _expr
0bdc0     07 4A 05 F6 | 	mov	COUNT_, #7
0bdc4     A8 00 A0 FD | 	call	#pushregs_
0bdc8                 | _expr_enter
0bdc8     37 00 00 FF 
0bdcc     44 E4 05 F1 | 	add	objptr, ##28228
0bdd0     F2 2C 02 FB | 	rdlong	local04, objptr
0bdd4     03 2C 66 F0 | 	shl	local04, #3
0bdd8     02 00 00 FF 
0bddc     38 E4 85 F1 | 	sub	objptr, ##1080
0bde0     F2 2C 02 F1 | 	add	local04, objptr
0bde4     04 2C 06 F1 | 	add	local04, #4
0bde8     16 2F 02 FB | 	rdlong	local05, local04
0bdec                 | ' 
0bdec                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0bdec     FE 2F 0E F2 | 	cmp	local05, #510 wz
0bdf0     35 00 00 FF 
0bdf4     0C E4 85 F1 | 	sub	objptr, ##27148
0bdf8     C4 00 90 5D |  if_ne	jmp	#LR__0970
0bdfc     1D 26 06 F6 | 	mov	local01, #29
0be00     FF 2A 06 F6 | 	mov	local03, #255
0be04     13 31 02 F6 | 	mov	local06, local01
0be08     14 33 02 F6 | 	mov	local07, local02
0be0c     15 27 02 F6 | 	mov	local01, local03
0be10     4A 00 00 FF 
0be14     7C E4 05 F1 | 	add	objptr, ##38012
0be18     F2 2E 02 FB | 	rdlong	local05, objptr
0be1c     17 2D 02 F6 | 	mov	local04, local05
0be20     01 2C 66 F0 | 	shl	local04, #1
0be24     17 2D 02 F1 | 	add	local04, local05
0be28     02 2C 66 F0 | 	shl	local04, #2
0be2c     03 00 00 FF 
0be30     00 E4 85 F1 | 	sub	objptr, ##1536
0be34     F2 2C 02 F1 | 	add	local04, objptr
0be38     16 31 62 FC | 	wrlong	local06, local04
0be3c     03 00 00 FF 
0be40     00 E4 05 F1 | 	add	objptr, ##1536
0be44     F2 30 02 FB | 	rdlong	local06, objptr
0be48     18 2F 02 F6 | 	mov	local05, local06
0be4c     01 2E 66 F0 | 	shl	local05, #1
0be50     18 2F 02 F1 | 	add	local05, local06
0be54     02 2E 66 F0 | 	shl	local05, #2
0be58     03 00 00 FF 
0be5c     00 E4 85 F1 | 	sub	objptr, ##1536
0be60     F2 2E 02 F1 | 	add	local05, objptr
0be64     04 2E 06 F1 | 	add	local05, #4
0be68     17 33 62 FC | 	wrlong	local07, local05
0be6c     03 00 00 FF 
0be70     00 E4 05 F1 | 	add	objptr, ##1536
0be74     F2 32 02 FB | 	rdlong	local07, objptr
0be78     19 31 02 F6 | 	mov	local06, local07
0be7c     01 30 66 F0 | 	shl	local06, #1
0be80     19 31 02 F1 | 	add	local06, local07
0be84     02 30 66 F0 | 	shl	local06, #2
0be88     03 00 00 FF 
0be8c     00 E4 85 F1 | 	sub	objptr, ##1536
0be90     F2 30 02 F1 | 	add	local06, objptr
0be94     08 30 06 F1 | 	add	local06, #8
0be98     18 27 62 FC | 	wrlong	local01, local06
0be9c     03 00 00 FF 
0bea0     00 E4 05 F1 | 	add	objptr, ##1536
0bea4     F2 30 02 FB | 	rdlong	local06, objptr
0bea8     01 30 06 F1 | 	add	local06, #1
0beac     F2 30 62 FC | 	wrlong	local06, objptr
0beb0     4A 00 00 FF 
0beb4     7C E4 85 F1 | 	sub	objptr, ##38012
0beb8     1D FA 05 F6 | 	mov	result1, #29
0bebc     64 01 90 FD | 	jmp	#LR__0973
0bec0                 | LR__0970
0bec0     00 26 06 F6 | 	mov	local01, #0
0bec4     68 01 B0 FD | 	call	#_addsub
0bec8                 | ' t3.result.uresult=0
0bec8                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0bec8                 | ' if err>0 then return err
0bec8     01 FA 15 F2 | 	cmp	result1, #1 wc
0becc     54 01 90 3D |  if_ae	jmp	#LR__0973
0bed0     37 00 00 FF 
0bed4     44 E4 05 F1 | 	add	objptr, ##28228
0bed8     F2 2C 02 FB | 	rdlong	local04, objptr
0bedc     03 2C 66 F0 | 	shl	local04, #3
0bee0     02 00 00 FF 
0bee4     38 E4 85 F1 | 	sub	objptr, ##1080
0bee8     F2 2C 02 F1 | 	add	local04, objptr
0beec     04 2C 06 F1 | 	add	local04, #4
0bef0     16 2F 02 FB | 	rdlong	local05, local04
0bef4                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0bef4                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0bef4     35 00 00 FF 
0bef8     0C E4 85 F1 | 	sub	objptr, ##27148
0befc                 | LR__0971
0befc     1B 2E 0E F2 | 	cmp	local05, #27 wz
0bf00     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0bf04     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0bf08     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0bf0c     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0bf10     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0bf14     08 01 90 5D |  if_ne	jmp	#LR__0972
0bf18     37 00 00 FF 
0bf1c     44 E4 05 F1 | 	add	objptr, ##28228
0bf20     F2 30 02 FB | 	rdlong	local06, objptr
0bf24     01 30 06 F1 | 	add	local06, #1
0bf28     F2 30 62 FC | 	wrlong	local06, objptr
0bf2c     37 00 00 FF 
0bf30     44 E4 85 F1 | 	sub	objptr, ##28228
0bf34     F8 00 B0 FD | 	call	#_addsub
0bf38                 | '   ct+=1
0bf38                 | '   err=addsub() : if err>0 then return err
0bf38     01 FA 15 F2 | 	cmp	result1, #1 wc
0bf3c     E4 00 90 3D |  if_ae	jmp	#LR__0973
0bf40     17 2B 02 F6 | 	mov	local03, local05
0bf44     13 31 02 F6 | 	mov	local06, local01
0bf48     14 33 02 F6 | 	mov	local07, local02
0bf4c     15 2F 02 F6 | 	mov	local05, local03
0bf50     4A 00 00 FF 
0bf54     7C E4 05 F1 | 	add	objptr, ##38012
0bf58     F2 2C 02 FB | 	rdlong	local04, objptr
0bf5c     16 FB 01 F6 | 	mov	result1, local04
0bf60     01 FA 65 F0 | 	shl	result1, #1
0bf64     16 FB 01 F1 | 	add	result1, local04
0bf68     02 FA 65 F0 | 	shl	result1, #2
0bf6c     03 00 00 FF 
0bf70     00 E4 85 F1 | 	sub	objptr, ##1536
0bf74     F2 FA 01 F1 | 	add	result1, objptr
0bf78     FD 30 62 FC | 	wrlong	local06, result1
0bf7c     03 00 00 FF 
0bf80     00 E4 05 F1 | 	add	objptr, ##1536
0bf84     F2 30 02 FB | 	rdlong	local06, objptr
0bf88     18 2D 02 F6 | 	mov	local04, local06
0bf8c     01 2C 66 F0 | 	shl	local04, #1
0bf90     18 2D 02 F1 | 	add	local04, local06
0bf94     02 2C 66 F0 | 	shl	local04, #2
0bf98     03 00 00 FF 
0bf9c     00 E4 85 F1 | 	sub	objptr, ##1536
0bfa0     F2 2C 02 F1 | 	add	local04, objptr
0bfa4     04 2C 06 F1 | 	add	local04, #4
0bfa8     16 33 62 FC | 	wrlong	local07, local04
0bfac     03 00 00 FF 
0bfb0     00 E4 05 F1 | 	add	objptr, ##1536
0bfb4     F2 32 02 FB | 	rdlong	local07, objptr
0bfb8     19 31 02 F6 | 	mov	local06, local07
0bfbc     01 30 66 F0 | 	shl	local06, #1
0bfc0     19 31 02 F1 | 	add	local06, local07
0bfc4     02 30 66 F0 | 	shl	local06, #2
0bfc8     03 00 00 FF 
0bfcc     00 E4 85 F1 | 	sub	objptr, ##1536
0bfd0     F2 30 02 F1 | 	add	local06, objptr
0bfd4     08 30 06 F1 | 	add	local06, #8
0bfd8     18 2F 62 FC | 	wrlong	local05, local06
0bfdc     03 00 00 FF 
0bfe0     00 E4 05 F1 | 	add	objptr, ##1536
0bfe4     F2 30 02 FB | 	rdlong	local06, objptr
0bfe8     01 30 06 F1 | 	add	local06, #1
0bfec     F2 30 62 FC | 	wrlong	local06, objptr
0bff0     13 00 00 FF 
0bff4     38 E4 85 F1 | 	sub	objptr, ##9784
0bff8     F2 2C 02 FB | 	rdlong	local04, objptr
0bffc     03 2C 66 F0 | 	shl	local04, #3
0c000     02 00 00 FF 
0c004     38 E4 85 F1 | 	sub	objptr, ##1080
0c008     F2 2C 02 F1 | 	add	local04, objptr
0c00c     04 2C 06 F1 | 	add	local04, #4
0c010     16 2F 02 FB | 	rdlong	local05, local04
0c014     35 00 00 FF 
0c018     0C E4 85 F1 | 	sub	objptr, ##27148
0c01c     DC FE 9F FD | 	jmp	#LR__0971
0c020                 | LR__0972
0c020                 | ' return 0  
0c020     00 FA 05 F6 | 	mov	result1, #0
0c024                 | LR__0973
0c024     A7 F0 03 F6 | 	mov	ptra, fp
0c028     B2 00 A0 FD | 	call	#popregs_
0c02c                 | _expr_ret
0c02c     2D 00 64 FD | 	ret
0c030                 | 
0c030                 | ' 
0c030                 | ' ' Second level operators : add, sub, logic
0c030                 | ' 
0c030                 | ' function addsub() as ulong
0c030                 | _addsub
0c030     07 4A 05 F6 | 	mov	COUNT_, #7
0c034     A8 00 A0 FD | 	call	#pushregs_
0c038                 | _addsub_enter
0c038     00 26 06 F6 | 	mov	local01, #0
0c03c     60 01 B0 FD | 	call	#_muldiv
0c040                 | ' 
0c040                 | ' t3.result.uresult=0
0c040                 | ' err=muldiv() : if err>0 then return err           			 
0c040     01 FA 15 F2 | 	cmp	result1, #1 wc
0c044     4C 01 90 3D |  if_ae	jmp	#LR__0982
0c048     37 00 00 FF 
0c04c     44 E4 05 F1 | 	add	objptr, ##28228
0c050     F2 2C 02 FB | 	rdlong	local04, objptr
0c054     03 2C 66 F0 | 	shl	local04, #3
0c058     02 00 00 FF 
0c05c     38 E4 85 F1 | 	sub	objptr, ##1080
0c060     F2 2C 02 F1 | 	add	local04, objptr
0c064     04 2C 06 F1 | 	add	local04, #4
0c068     16 2F 02 FB | 	rdlong	local05, local04
0c06c                 | ' op = lparts(ct).token				 
0c06c                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0c06c     35 00 00 FF 
0c070     0C E4 85 F1 | 	sub	objptr, ##27148
0c074                 | LR__0980
0c074     01 2E 0E F2 | 	cmp	local05, #1 wz
0c078     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0c07c     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0c080     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0c084     08 01 90 5D |  if_ne	jmp	#LR__0981
0c088     37 00 00 FF 
0c08c     44 E4 05 F1 | 	add	objptr, ##28228
0c090     F2 2C 02 FB | 	rdlong	local04, objptr
0c094     01 2C 06 F1 | 	add	local04, #1
0c098     F2 2C 62 FC | 	wrlong	local04, objptr
0c09c     37 00 00 FF 
0c0a0     44 E4 85 F1 | 	sub	objptr, ##28228
0c0a4     F8 00 B0 FD | 	call	#_muldiv
0c0a8                 | '   ct+=1
0c0a8                 | '   err=muldiv() : if err>0 then return err   
0c0a8     01 FA 15 F2 | 	cmp	result1, #1 wc
0c0ac     E4 00 90 3D |  if_ae	jmp	#LR__0982
0c0b0     17 2B 02 F6 | 	mov	local03, local05
0c0b4     13 31 02 F6 | 	mov	local06, local01
0c0b8     14 33 02 F6 | 	mov	local07, local02
0c0bc     15 2F 02 F6 | 	mov	local05, local03
0c0c0     4A 00 00 FF 
0c0c4     7C E4 05 F1 | 	add	objptr, ##38012
0c0c8     F2 2C 02 FB | 	rdlong	local04, objptr
0c0cc     16 FB 01 F6 | 	mov	result1, local04
0c0d0     01 FA 65 F0 | 	shl	result1, #1
0c0d4     16 FB 01 F1 | 	add	result1, local04
0c0d8     02 FA 65 F0 | 	shl	result1, #2
0c0dc     03 00 00 FF 
0c0e0     00 E4 85 F1 | 	sub	objptr, ##1536
0c0e4     F2 FA 01 F1 | 	add	result1, objptr
0c0e8     FD 30 62 FC | 	wrlong	local06, result1
0c0ec     03 00 00 FF 
0c0f0     00 E4 05 F1 | 	add	objptr, ##1536
0c0f4     F2 30 02 FB | 	rdlong	local06, objptr
0c0f8     18 2D 02 F6 | 	mov	local04, local06
0c0fc     01 2C 66 F0 | 	shl	local04, #1
0c100     18 2D 02 F1 | 	add	local04, local06
0c104     02 2C 66 F0 | 	shl	local04, #2
0c108     03 00 00 FF 
0c10c     00 E4 85 F1 | 	sub	objptr, ##1536
0c110     F2 2C 02 F1 | 	add	local04, objptr
0c114     04 2C 06 F1 | 	add	local04, #4
0c118     16 33 62 FC | 	wrlong	local07, local04
0c11c     03 00 00 FF 
0c120     00 E4 05 F1 | 	add	objptr, ##1536
0c124     F2 32 02 FB | 	rdlong	local07, objptr
0c128     19 31 02 F6 | 	mov	local06, local07
0c12c     01 30 66 F0 | 	shl	local06, #1
0c130     19 31 02 F1 | 	add	local06, local07
0c134     02 30 66 F0 | 	shl	local06, #2
0c138     03 00 00 FF 
0c13c     00 E4 85 F1 | 	sub	objptr, ##1536
0c140     F2 30 02 F1 | 	add	local06, objptr
0c144     08 30 06 F1 | 	add	local06, #8
0c148     18 2F 62 FC | 	wrlong	local05, local06
0c14c     03 00 00 FF 
0c150     00 E4 05 F1 | 	add	objptr, ##1536
0c154     F2 30 02 FB | 	rdlong	local06, objptr
0c158     01 30 06 F1 | 	add	local06, #1
0c15c     F2 30 62 FC | 	wrlong	local06, objptr
0c160     13 00 00 FF 
0c164     38 E4 85 F1 | 	sub	objptr, ##9784
0c168     F2 2C 02 FB | 	rdlong	local04, objptr
0c16c     03 2C 66 F0 | 	shl	local04, #3
0c170     02 00 00 FF 
0c174     38 E4 85 F1 | 	sub	objptr, ##1080
0c178     F2 2C 02 F1 | 	add	local04, objptr
0c17c     04 2C 06 F1 | 	add	local04, #4
0c180     16 2F 02 FB | 	rdlong	local05, local04
0c184     35 00 00 FF 
0c188     0C E4 85 F1 | 	sub	objptr, ##27148
0c18c     E4 FE 9F FD | 	jmp	#LR__0980
0c190                 | LR__0981
0c190                 | ' return 0
0c190     00 FA 05 F6 | 	mov	result1, #0
0c194                 | LR__0982
0c194     A7 F0 03 F6 | 	mov	ptra, fp
0c198     B2 00 A0 FD | 	call	#popregs_
0c19c                 | _addsub_ret
0c19c     2D 00 64 FD | 	ret
0c1a0                 | 
0c1a0                 | ' 
0c1a0                 | ' ' Third level operators : mul,div,shift,power
0c1a0                 | ' 
0c1a0                 | ' function muldiv() as ulong
0c1a0                 | _muldiv
0c1a0     07 4A 05 F6 | 	mov	COUNT_, #7
0c1a4     A8 00 A0 FD | 	call	#pushregs_
0c1a8                 | _muldiv_enter
0c1a8     00 26 06 F6 | 	mov	local01, #0
0c1ac     6C 01 B0 FD | 	call	#_getvalue
0c1b0                 | ' 
0c1b0                 | ' t3.result.uresult=0
0c1b0                 | ' err=getvalue() : if err>0 then return err     
0c1b0     01 FA 15 F2 | 	cmp	result1, #1 wc
0c1b4     58 01 90 3D |  if_ae	jmp	#LR__0992
0c1b8     37 00 00 FF 
0c1bc     44 E4 05 F1 | 	add	objptr, ##28228
0c1c0     F2 2C 02 FB | 	rdlong	local04, objptr
0c1c4     03 2C 66 F0 | 	shl	local04, #3
0c1c8     02 00 00 FF 
0c1cc     38 E4 85 F1 | 	sub	objptr, ##1080
0c1d0     F2 2C 02 F1 | 	add	local04, objptr
0c1d4     04 2C 06 F1 | 	add	local04, #4
0c1d8     16 2F 02 FB | 	rdlong	local05, local04
0c1dc                 | ' op = lparts(ct).token
0c1dc                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c1dc     35 00 00 FF 
0c1e0     0C E4 85 F1 | 	sub	objptr, ##27148
0c1e4                 | LR__0990
0c1e4     05 2E 0E F2 | 	cmp	local05, #5 wz
0c1e8     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0c1ec     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0c1f0     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0c1f4     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0c1f8     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0c1fc     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0c200     08 01 90 5D |  if_ne	jmp	#LR__0991
0c204     37 00 00 FF 
0c208     44 E4 05 F1 | 	add	objptr, ##28228
0c20c     F2 2C 02 FB | 	rdlong	local04, objptr
0c210     01 2C 06 F1 | 	add	local04, #1
0c214     F2 2C 62 FC | 	wrlong	local04, objptr
0c218     37 00 00 FF 
0c21c     44 E4 85 F1 | 	sub	objptr, ##28228
0c220     F8 00 B0 FD | 	call	#_getvalue
0c224                 | '   ct+=1
0c224                 | '   err=getvalue() :if err>0 then return err   
0c224     01 FA 15 F2 | 	cmp	result1, #1 wc
0c228     E4 00 90 3D |  if_ae	jmp	#LR__0992
0c22c     17 2B 02 F6 | 	mov	local03, local05
0c230     13 31 02 F6 | 	mov	local06, local01
0c234     14 33 02 F6 | 	mov	local07, local02
0c238     15 2F 02 F6 | 	mov	local05, local03
0c23c     4A 00 00 FF 
0c240     7C E4 05 F1 | 	add	objptr, ##38012
0c244     F2 2C 02 FB | 	rdlong	local04, objptr
0c248     16 FB 01 F6 | 	mov	result1, local04
0c24c     01 FA 65 F0 | 	shl	result1, #1
0c250     16 FB 01 F1 | 	add	result1, local04
0c254     02 FA 65 F0 | 	shl	result1, #2
0c258     03 00 00 FF 
0c25c     00 E4 85 F1 | 	sub	objptr, ##1536
0c260     F2 FA 01 F1 | 	add	result1, objptr
0c264     FD 30 62 FC | 	wrlong	local06, result1
0c268     03 00 00 FF 
0c26c     00 E4 05 F1 | 	add	objptr, ##1536
0c270     F2 30 02 FB | 	rdlong	local06, objptr
0c274     18 2D 02 F6 | 	mov	local04, local06
0c278     01 2C 66 F0 | 	shl	local04, #1
0c27c     18 2D 02 F1 | 	add	local04, local06
0c280     02 2C 66 F0 | 	shl	local04, #2
0c284     03 00 00 FF 
0c288     00 E4 85 F1 | 	sub	objptr, ##1536
0c28c     F2 2C 02 F1 | 	add	local04, objptr
0c290     04 2C 06 F1 | 	add	local04, #4
0c294     16 33 62 FC | 	wrlong	local07, local04
0c298     03 00 00 FF 
0c29c     00 E4 05 F1 | 	add	objptr, ##1536
0c2a0     F2 32 02 FB | 	rdlong	local07, objptr
0c2a4     19 31 02 F6 | 	mov	local06, local07
0c2a8     01 30 66 F0 | 	shl	local06, #1
0c2ac     19 31 02 F1 | 	add	local06, local07
0c2b0     02 30 66 F0 | 	shl	local06, #2
0c2b4     03 00 00 FF 
0c2b8     00 E4 85 F1 | 	sub	objptr, ##1536
0c2bc     F2 30 02 F1 | 	add	local06, objptr
0c2c0     08 30 06 F1 | 	add	local06, #8
0c2c4     18 2F 62 FC | 	wrlong	local05, local06
0c2c8     03 00 00 FF 
0c2cc     00 E4 05 F1 | 	add	objptr, ##1536
0c2d0     F2 30 02 FB | 	rdlong	local06, objptr
0c2d4     01 30 06 F1 | 	add	local06, #1
0c2d8     F2 30 62 FC | 	wrlong	local06, objptr
0c2dc     13 00 00 FF 
0c2e0     38 E4 85 F1 | 	sub	objptr, ##9784
0c2e4     F2 2C 02 FB | 	rdlong	local04, objptr
0c2e8     03 2C 66 F0 | 	shl	local04, #3
0c2ec     02 00 00 FF 
0c2f0     38 E4 85 F1 | 	sub	objptr, ##1080
0c2f4     F2 2C 02 F1 | 	add	local04, objptr
0c2f8     04 2C 06 F1 | 	add	local04, #4
0c2fc     16 2F 02 FB | 	rdlong	local05, local04
0c300     35 00 00 FF 
0c304     0C E4 85 F1 | 	sub	objptr, ##27148
0c308     D8 FE 9F FD | 	jmp	#LR__0990
0c30c                 | LR__0991
0c30c                 | ' return 0
0c30c     00 FA 05 F6 | 	mov	result1, #0
0c310                 | LR__0992
0c310     A7 F0 03 F6 | 	mov	ptra, fp
0c314     B2 00 A0 FD | 	call	#popregs_
0c318                 | _muldiv_ret
0c318     2D 00 64 FD | 	ret
0c31c                 | 
0c31c                 | ' 
0c31c                 | ' ' Get a value for operations
0c31c                 | ' 
0c31c                 | ' function getvalue()  as ulong
0c31c                 | _getvalue
0c31c     0B 4A 05 F6 | 	mov	COUNT_, #11
0c320     A8 00 A0 FD | 	call	#pushregs_
0c324                 | _getvalue_enter
0c324     01 2C 06 F6 | 	mov	local04, #1
0c328     00 26 06 F6 | 	mov	local01, #0
0c32c     1D 2A 06 F6 | 	mov	local03, #29
0c330     37 00 00 FF 
0c334     44 E4 05 F1 | 	add	objptr, ##28228
0c338     F2 16 02 FB | 	rdlong	arg03, objptr
0c33c     03 16 66 F0 | 	shl	arg03, #3
0c340     02 00 00 FF 
0c344     38 E4 85 F1 | 	sub	objptr, ##1080
0c348     F2 16 02 F1 | 	add	arg03, objptr
0c34c     04 16 06 F1 | 	add	arg03, #4
0c350     0B 2F 02 FB | 	rdlong	local05, arg03
0c354                 | ' 
0c354                 | ' m=1											' for negative numbers
0c354                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c354                 | ' op=lparts(ct).token
0c354                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c354     02 2E 0E F2 | 	cmp	local05, #2 wz
0c358     35 00 00 FF 
0c35c     0C E4 85 F1 | 	sub	objptr, ##27148
0c360     38 00 90 5D |  if_ne	jmp	#LR__1000
0c364     01 2C 66 F6 | 	neg	local04, #1
0c368     37 00 00 FF 
0c36c     44 E4 05 F1 | 	add	objptr, ##28228
0c370     F2 2E 02 FB | 	rdlong	local05, objptr
0c374     01 2E 06 F1 | 	add	local05, #1
0c378     F2 2E 62 FC | 	wrlong	local05, objptr
0c37c     03 2E 66 F0 | 	shl	local05, #3
0c380     02 00 00 FF 
0c384     38 E4 85 F1 | 	sub	objptr, ##1080
0c388     F2 2E 02 F1 | 	add	local05, objptr
0c38c     04 2E 06 F1 | 	add	local05, #4
0c390     17 2F 02 FB | 	rdlong	local05, local05
0c394     35 00 00 FF 
0c398     0C E4 85 F1 | 	sub	objptr, ##27148
0c39c                 | LR__1000
0c39c                 | ' select case op
0c39c     01 00 00 FF 
0c3a0     00 2E 0E F2 | 	cmp	local05, ##512 wz
0c3a4     44 00 90 AD |  if_e	jmp	#LR__1001
0c3a8     01 00 00 FF 
0c3ac     01 2E 0E F2 | 	cmp	local05, ##513 wz
0c3b0     90 01 90 AD |  if_e	jmp	#LR__1004
0c3b4     01 00 00 FF 
0c3b8     02 2E 0E F2 | 	cmp	local05, ##514 wz
0c3bc     44 04 90 AD |  if_e	jmp	#LR__1011
0c3c0     01 00 00 FF 
0c3c4     03 2E 0E F2 | 	cmp	local05, ##515 wz
0c3c8     A8 05 90 AD |  if_e	jmp	#LR__1014
0c3cc     2C 2E 0E F2 | 	cmp	local05, #44 wz
0c3d0     78 07 90 AD |  if_e	jmp	#LR__1019
0c3d4     01 00 00 FF 
0c3d8     04 2E 0E F2 | 	cmp	local05, ##516 wz
0c3dc     70 08 90 AD |  if_e	jmp	#LR__1020
0c3e0     15 2E 0E F2 | 	cmp	local05, #21 wz
0c3e4     98 08 90 AD |  if_e	jmp	#LR__1021
0c3e8     10 09 90 FD | 	jmp	#LR__1022
0c3ec                 | LR__1001
0c3ec                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c3ec     01 2C 0E F2 | 	cmp	local04, #1 wz
0c3f0     3C 00 90 5D |  if_ne	jmp	#LR__1002
0c3f4     37 00 00 FF 
0c3f8     44 E4 05 F1 | 	add	objptr, ##28228
0c3fc     F2 2E 02 FB | 	rdlong	local05, objptr
0c400     03 2E 66 F0 | 	shl	local05, #3
0c404     02 00 00 FF 
0c408     38 E4 85 F1 | 	sub	objptr, ##1080
0c40c     F2 2E 02 F1 | 	add	local05, objptr
0c410     17 13 02 FB | 	rdlong	arg01, local05
0c414     00 14 06 F6 | 	mov	arg02, #0
0c418     35 00 00 FF 
0c41c     0C E4 85 F1 | 	sub	objptr, ##27148
0c420     3C DA B1 FD | 	call	#__system____builtin_atoi
0c424     FD 2C 02 FD | 	qmul	local04, result1
0c428     18 26 62 FD | 	getqx	local01
0c42c     1C 2A 06 F6 | 	mov	local03, #28
0c430                 | LR__1002
0c430                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c430     FF FF 7F FF 
0c434     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c438     3C 00 90 5D |  if_ne	jmp	#LR__1003
0c43c     37 00 00 FF 
0c440     44 E4 05 F1 | 	add	objptr, ##28228
0c444     F2 2E 02 FB | 	rdlong	local05, objptr
0c448     03 2E 66 F0 | 	shl	local05, #3
0c44c     02 00 00 FF 
0c450     38 E4 85 F1 | 	sub	objptr, ##1080
0c454     F2 2E 02 F1 | 	add	local05, objptr
0c458     17 13 02 FB | 	rdlong	arg01, local05
0c45c     00 14 06 F6 | 	mov	arg02, #0
0c460     35 00 00 FF 
0c464     0C E4 85 F1 | 	sub	objptr, ##27148
0c468     F4 D9 B1 FD | 	call	#__system____builtin_atoi
0c46c     FD 2C 02 FD | 	qmul	local04, result1
0c470     18 26 62 FD | 	getqx	local01
0c474     1C 2A 06 F6 | 	mov	local03, #28
0c478                 | LR__1003
0c478     13 31 02 F6 | 	mov	local06, local01
0c47c     14 33 02 F6 | 	mov	local07, local02
0c480     15 2F 02 F6 | 	mov	local05, local03
0c484     4A 00 00 FF 
0c488     7C E4 05 F1 | 	add	objptr, ##38012
0c48c     F2 26 02 FB | 	rdlong	local01, objptr
0c490     13 2D 02 F6 | 	mov	local04, local01
0c494     01 2C 66 F0 | 	shl	local04, #1
0c498     13 2D 02 F1 | 	add	local04, local01
0c49c     02 2C 66 F0 | 	shl	local04, #2
0c4a0     03 00 00 FF 
0c4a4     00 E4 85 F1 | 	sub	objptr, ##1536
0c4a8     F2 2C 02 F1 | 	add	local04, objptr
0c4ac     16 31 62 FC | 	wrlong	local06, local04
0c4b0     03 00 00 FF 
0c4b4     00 E4 05 F1 | 	add	objptr, ##1536
0c4b8     F2 30 02 FB | 	rdlong	local06, objptr
0c4bc     18 27 02 F6 | 	mov	local01, local06
0c4c0     01 26 66 F0 | 	shl	local01, #1
0c4c4     18 27 02 F1 | 	add	local01, local06
0c4c8     02 26 66 F0 | 	shl	local01, #2
0c4cc     03 00 00 FF 
0c4d0     00 E4 85 F1 | 	sub	objptr, ##1536
0c4d4     F2 26 02 F1 | 	add	local01, objptr
0c4d8     04 26 06 F1 | 	add	local01, #4
0c4dc     13 33 62 FC | 	wrlong	local07, local01
0c4e0     03 00 00 FF 
0c4e4     00 E4 05 F1 | 	add	objptr, ##1536
0c4e8     F2 32 02 FB | 	rdlong	local07, objptr
0c4ec     19 31 02 F6 | 	mov	local06, local07
0c4f0     01 30 66 F0 | 	shl	local06, #1
0c4f4     19 31 02 F1 | 	add	local06, local07
0c4f8     02 30 66 F0 | 	shl	local06, #2
0c4fc     03 00 00 FF 
0c500     00 E4 85 F1 | 	sub	objptr, ##1536
0c504     F2 30 02 F1 | 	add	local06, objptr
0c508     08 30 06 F1 | 	add	local06, #8
0c50c     18 2F 62 FC | 	wrlong	local05, local06
0c510     03 00 00 FF 
0c514     00 E4 05 F1 | 	add	objptr, ##1536
0c518     F2 30 02 FB | 	rdlong	local06, objptr
0c51c     01 30 06 F1 | 	add	local06, #1
0c520     F2 30 62 FC | 	wrlong	local06, objptr
0c524     13 00 00 FF 
0c528     38 E4 85 F1 | 	sub	objptr, ##9784
0c52c     F2 30 02 FB | 	rdlong	local06, objptr
0c530     01 30 06 F1 | 	add	local06, #1
0c534     F2 30 62 FC | 	wrlong	local06, objptr
0c538     37 00 00 FF 
0c53c     44 E4 85 F1 | 	sub	objptr, ##28228
0c540     E4 07 90 FD | 	jmp	#LR__1023
0c544                 | LR__1004
0c544                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c544     37 00 00 FF 
0c548     44 E4 05 F1 | 	add	objptr, ##28228
0c54c     F2 16 02 FB | 	rdlong	arg03, objptr
0c550     03 16 66 F0 | 	shl	arg03, #3
0c554     02 00 00 FF 
0c558     38 E4 85 F1 | 	sub	objptr, ##1080
0c55c     F2 16 02 F1 | 	add	arg03, objptr
0c560     0B 13 02 FB | 	rdlong	arg01, arg03
0c564     01 14 06 F6 | 	mov	arg02, #1
0c568     35 00 00 FF 
0c56c     0C E4 85 F1 | 	sub	objptr, ##27148
0c570     78 C4 B1 FD | 	call	#__system__Left_S
0c574     FD 12 02 F6 | 	mov	arg01, result1
0c578     B5 01 00 FF 
0c57c     FB 15 06 F6 | 	mov	arg02, ##@LR__5831
0c580     10 A4 B1 FD | 	call	#__system___string_cmp
0c584     00 FA 0D F2 | 	cmp	result1, #0 wz
0c588     94 00 90 5D |  if_ne	jmp	#LR__1007
0c58c     37 00 00 FF 
0c590     44 E4 05 F1 | 	add	objptr, ##28228
0c594     F2 32 02 FB | 	rdlong	local07, objptr
0c598     19 31 02 F6 | 	mov	local06, local07
0c59c     03 30 66 F0 | 	shl	local06, #3
0c5a0     02 00 00 FF 
0c5a4     38 E4 85 F1 | 	sub	objptr, ##1080
0c5a8     F2 30 02 F1 | 	add	local06, objptr
0c5ac     B5 01 00 FF 
0c5b0     FD 2F 06 F6 | 	mov	local05, ##@LR__5832
0c5b4     03 32 66 F0 | 	shl	local07, #3
0c5b8     F2 32 02 F1 | 	add	local07, objptr
0c5bc     19 33 02 FB | 	rdlong	local07, local07
0c5c0     02 00 00 FF 
0c5c4     38 E4 05 F1 | 	add	objptr, ##1080
0c5c8     F2 26 02 FB | 	rdlong	local01, objptr
0c5cc     03 26 66 F0 | 	shl	local01, #3
0c5d0     02 00 00 FF 
0c5d4     38 E4 85 F1 | 	sub	objptr, ##1080
0c5d8     F2 26 02 F1 | 	add	local01, objptr
0c5dc     13 13 02 FB | 	rdlong	arg01, local01
0c5e0     35 00 00 FF 
0c5e4     0C E4 85 F1 | 	sub	objptr, ##27148
0c5e8     09 35 02 F6 | 	mov	local08, arg01
0c5ec     97 06 48 FB | 	callpa	#(@LR__1006-@LR__1005)>>2,fcache_load_ptr_
0c5f0                 | LR__1005
0c5f0     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c5f4     01 34 06 51 |  if_ne	add	local08, #1
0c5f8     F4 FF 9F 5D |  if_ne	jmp	#LR__1005
0c5fc                 | LR__1006
0c5fc     09 35 82 F1 | 	sub	local08, arg01
0c600     1A 15 02 F6 | 	mov	arg02, local08
0c604     01 14 86 F1 | 	sub	arg02, #1
0c608     19 13 02 F6 | 	mov	arg01, local07
0c60c     64 C4 B1 FD | 	call	#__system__Right_S
0c610     FD 14 02 F6 | 	mov	arg02, result1
0c614     17 13 02 F6 | 	mov	arg01, local05
0c618     AC A3 B1 FD | 	call	#__system___string_concat
0c61c     18 FB 61 FC | 	wrlong	result1, local06
0c620                 | LR__1007
0c620                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c620     37 00 00 FF 
0c624     44 E4 05 F1 | 	add	objptr, ##28228
0c628     F2 16 02 FB | 	rdlong	arg03, objptr
0c62c     03 16 66 F0 | 	shl	arg03, #3
0c630     02 00 00 FF 
0c634     38 E4 85 F1 | 	sub	objptr, ##1080
0c638     F2 16 02 F1 | 	add	arg03, objptr
0c63c     0B 13 02 FB | 	rdlong	arg01, arg03
0c640     01 14 06 F6 | 	mov	arg02, #1
0c644     35 00 00 FF 
0c648     0C E4 85 F1 | 	sub	objptr, ##27148
0c64c     9C C3 B1 FD | 	call	#__system__Left_S
0c650     FD 12 02 F6 | 	mov	arg01, result1
0c654     B6 01 00 FF 
0c658     00 14 06 F6 | 	mov	arg02, ##@LR__5833
0c65c     34 A3 B1 FD | 	call	#__system___string_cmp
0c660     00 FA 0D F2 | 	cmp	result1, #0 wz
0c664     94 00 90 5D |  if_ne	jmp	#LR__1010
0c668     37 00 00 FF 
0c66c     44 E4 05 F1 | 	add	objptr, ##28228
0c670     F2 32 02 FB | 	rdlong	local07, objptr
0c674     19 31 02 F6 | 	mov	local06, local07
0c678     03 30 66 F0 | 	shl	local06, #3
0c67c     02 00 00 FF 
0c680     38 E4 85 F1 | 	sub	objptr, ##1080
0c684     F2 30 02 F1 | 	add	local06, objptr
0c688     B6 01 00 FF 
0c68c     02 2E 06 F6 | 	mov	local05, ##@LR__5834
0c690     03 32 66 F0 | 	shl	local07, #3
0c694     F2 32 02 F1 | 	add	local07, objptr
0c698     19 33 02 FB | 	rdlong	local07, local07
0c69c     02 00 00 FF 
0c6a0     38 E4 05 F1 | 	add	objptr, ##1080
0c6a4     F2 26 02 FB | 	rdlong	local01, objptr
0c6a8     03 26 66 F0 | 	shl	local01, #3
0c6ac     02 00 00 FF 
0c6b0     38 E4 85 F1 | 	sub	objptr, ##1080
0c6b4     F2 26 02 F1 | 	add	local01, objptr
0c6b8     13 13 02 FB | 	rdlong	arg01, local01
0c6bc     35 00 00 FF 
0c6c0     0C E4 85 F1 | 	sub	objptr, ##27148
0c6c4     09 35 02 F6 | 	mov	local08, arg01
0c6c8     97 06 48 FB | 	callpa	#(@LR__1009-@LR__1008)>>2,fcache_load_ptr_
0c6cc                 | LR__1008
0c6cc     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c6d0     01 34 06 51 |  if_ne	add	local08, #1
0c6d4     F4 FF 9F 5D |  if_ne	jmp	#LR__1008
0c6d8                 | LR__1009
0c6d8     09 35 82 F1 | 	sub	local08, arg01
0c6dc     1A 15 02 F6 | 	mov	arg02, local08
0c6e0     01 14 86 F1 | 	sub	arg02, #1
0c6e4     19 13 02 F6 | 	mov	arg01, local07
0c6e8     88 C3 B1 FD | 	call	#__system__Right_S
0c6ec     FD 14 02 F6 | 	mov	arg02, result1
0c6f0     17 13 02 F6 | 	mov	arg01, local05
0c6f4     D0 A2 B1 FD | 	call	#__system___string_concat
0c6f8     18 FB 61 FC | 	wrlong	result1, local06
0c6fc                 | LR__1010
0c6fc     37 00 00 FF 
0c700     44 E4 05 F1 | 	add	objptr, ##28228
0c704     F2 30 02 FB | 	rdlong	local06, objptr
0c708     03 30 66 F0 | 	shl	local06, #3
0c70c     02 00 00 FF 
0c710     38 E4 85 F1 | 	sub	objptr, ##1080
0c714     F2 30 02 F1 | 	add	local06, objptr
0c718     18 13 02 FB | 	rdlong	arg01, local06
0c71c     00 14 06 F6 | 	mov	arg02, #0
0c720     35 00 00 FF 
0c724     0C E4 85 F1 | 	sub	objptr, ##27148
0c728     34 D7 B1 FD | 	call	#__system____builtin_atoi
0c72c     FD 2C 02 FD | 	qmul	local04, result1
0c730     4A 00 00 FF 
0c734     7C E4 05 F1 | 	add	objptr, ##38012
0c738     F2 30 02 FB | 	rdlong	local06, objptr
0c73c     18 37 02 F6 | 	mov	local09, local06
0c740     01 36 66 F0 | 	shl	local09, #1
0c744     18 37 02 F1 | 	add	local09, local06
0c748     02 36 66 F0 | 	shl	local09, #2
0c74c     03 00 00 FF 
0c750     00 E4 85 F1 | 	sub	objptr, ##1536
0c754     F2 36 02 F1 | 	add	local09, objptr
0c758     03 00 00 FF 
0c75c     00 E4 05 F1 | 	add	objptr, ##1536
0c760     18 26 62 FD | 	getqx	local01
0c764     1C 2A 06 F6 | 	mov	local03, #28
0c768     13 31 02 F6 | 	mov	local06, local01
0c76c     14 33 02 F6 | 	mov	local07, local02
0c770     1B 31 62 FC | 	wrlong	local06, local09
0c774     15 37 02 F6 | 	mov	local09, local03
0c778     F2 30 02 FB | 	rdlong	local06, objptr
0c77c     18 2F 02 F6 | 	mov	local05, local06
0c780     01 2E 66 F0 | 	shl	local05, #1
0c784     18 2F 02 F1 | 	add	local05, local06
0c788     02 2E 66 F0 | 	shl	local05, #2
0c78c     03 00 00 FF 
0c790     00 E4 85 F1 | 	sub	objptr, ##1536
0c794     F2 2E 02 F1 | 	add	local05, objptr
0c798     04 2E 06 F1 | 	add	local05, #4
0c79c     17 33 62 FC | 	wrlong	local07, local05
0c7a0     03 00 00 FF 
0c7a4     00 E4 05 F1 | 	add	objptr, ##1536
0c7a8     F2 32 02 FB | 	rdlong	local07, objptr
0c7ac     19 31 02 F6 | 	mov	local06, local07
0c7b0     01 30 66 F0 | 	shl	local06, #1
0c7b4     19 31 02 F1 | 	add	local06, local07
0c7b8     02 30 66 F0 | 	shl	local06, #2
0c7bc     03 00 00 FF 
0c7c0     00 E4 85 F1 | 	sub	objptr, ##1536
0c7c4     F2 30 02 F1 | 	add	local06, objptr
0c7c8     08 30 06 F1 | 	add	local06, #8
0c7cc     18 37 62 FC | 	wrlong	local09, local06
0c7d0     03 00 00 FF 
0c7d4     00 E4 05 F1 | 	add	objptr, ##1536
0c7d8     F2 30 02 FB | 	rdlong	local06, objptr
0c7dc     01 30 06 F1 | 	add	local06, #1
0c7e0     F2 30 62 FC | 	wrlong	local06, objptr
0c7e4     13 00 00 FF 
0c7e8     38 E4 85 F1 | 	sub	objptr, ##9784
0c7ec     F2 30 02 FB | 	rdlong	local06, objptr
0c7f0     01 30 06 F1 | 	add	local06, #1
0c7f4     F2 30 62 FC | 	wrlong	local06, objptr
0c7f8     37 00 00 FF 
0c7fc     44 E4 85 F1 | 	sub	objptr, ##28228
0c800     24 05 90 FD | 	jmp	#LR__1023
0c804                 | LR__1011
0c804                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0c804     01 2C 0E F2 | 	cmp	local04, #1 wz
0c808     48 00 90 5D |  if_ne	jmp	#LR__1012
0c80c     00 C0 1F FF 
0c810     00 30 06 F6 | 	mov	local06, ##1065353216
0c814     37 00 00 FF 
0c818     44 E4 05 F1 | 	add	objptr, ##28228
0c81c     F2 36 02 FB | 	rdlong	local09, objptr
0c820     03 36 66 F0 | 	shl	local09, #3
0c824     02 00 00 FF 
0c828     38 E4 85 F1 | 	sub	objptr, ##1080
0c82c     F2 36 02 F1 | 	add	local09, objptr
0c830     1B 13 02 FB | 	rdlong	arg01, local09
0c834     35 00 00 FF 
0c838     0C E4 85 F1 | 	sub	objptr, ##27148
0c83c     B4 D7 B1 FD | 	call	#__system____builtin_atof
0c840     FD 14 02 F6 | 	mov	arg02, result1
0c844     18 13 02 F6 | 	mov	arg01, local06
0c848     9C CF B1 FD | 	call	#__system___float_mul
0c84c     FD 26 02 F6 | 	mov	local01, result1
0c850     1E 2A 06 F6 | 	mov	local03, #30
0c854                 | LR__1012
0c854                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0c854     FF FF 7F FF 
0c858     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c85c     48 00 90 5D |  if_ne	jmp	#LR__1013
0c860     00 C0 5F FF 
0c864     00 30 06 F6 | 	mov	local06, ##-1082130432
0c868     37 00 00 FF 
0c86c     44 E4 05 F1 | 	add	objptr, ##28228
0c870     F2 36 02 FB | 	rdlong	local09, objptr
0c874     03 36 66 F0 | 	shl	local09, #3
0c878     02 00 00 FF 
0c87c     38 E4 85 F1 | 	sub	objptr, ##1080
0c880     F2 36 02 F1 | 	add	local09, objptr
0c884     1B 13 02 FB | 	rdlong	arg01, local09
0c888     35 00 00 FF 
0c88c     0C E4 85 F1 | 	sub	objptr, ##27148
0c890     60 D7 B1 FD | 	call	#__system____builtin_atof
0c894     FD 14 02 F6 | 	mov	arg02, result1
0c898     18 13 02 F6 | 	mov	arg01, local06
0c89c     48 CF B1 FD | 	call	#__system___float_mul
0c8a0     FD 26 02 F6 | 	mov	local01, result1
0c8a4     1E 2A 06 F6 | 	mov	local03, #30
0c8a8                 | LR__1013
0c8a8     13 31 02 F6 | 	mov	local06, local01
0c8ac     14 33 02 F6 | 	mov	local07, local02
0c8b0     15 2F 02 F6 | 	mov	local05, local03
0c8b4     4A 00 00 FF 
0c8b8     7C E4 05 F1 | 	add	objptr, ##38012
0c8bc     F2 26 02 FB | 	rdlong	local01, objptr
0c8c0     13 37 02 F6 | 	mov	local09, local01
0c8c4     01 36 66 F0 | 	shl	local09, #1
0c8c8     13 37 02 F1 | 	add	local09, local01
0c8cc     02 36 66 F0 | 	shl	local09, #2
0c8d0     03 00 00 FF 
0c8d4     00 E4 85 F1 | 	sub	objptr, ##1536
0c8d8     F2 36 02 F1 | 	add	local09, objptr
0c8dc     1B 31 62 FC | 	wrlong	local06, local09
0c8e0     03 00 00 FF 
0c8e4     00 E4 05 F1 | 	add	objptr, ##1536
0c8e8     F2 36 02 FB | 	rdlong	local09, objptr
0c8ec     1B 31 02 F6 | 	mov	local06, local09
0c8f0     01 30 66 F0 | 	shl	local06, #1
0c8f4     1B 31 02 F1 | 	add	local06, local09
0c8f8     02 30 66 F0 | 	shl	local06, #2
0c8fc     03 00 00 FF 
0c900     00 E4 85 F1 | 	sub	objptr, ##1536
0c904     F2 30 02 F1 | 	add	local06, objptr
0c908     04 30 06 F1 | 	add	local06, #4
0c90c     18 33 62 FC | 	wrlong	local07, local06
0c910     03 00 00 FF 
0c914     00 E4 05 F1 | 	add	objptr, ##1536
0c918     F2 36 02 FB | 	rdlong	local09, objptr
0c91c     1B 33 02 F6 | 	mov	local07, local09
0c920     01 32 66 F0 | 	shl	local07, #1
0c924     1B 33 02 F1 | 	add	local07, local09
0c928     02 32 66 F0 | 	shl	local07, #2
0c92c     03 00 00 FF 
0c930     00 E4 85 F1 | 	sub	objptr, ##1536
0c934     F2 32 02 F1 | 	add	local07, objptr
0c938     08 32 06 F1 | 	add	local07, #8
0c93c     19 2F 62 FC | 	wrlong	local05, local07
0c940     03 00 00 FF 
0c944     00 E4 05 F1 | 	add	objptr, ##1536
0c948     F2 30 02 FB | 	rdlong	local06, objptr
0c94c     01 30 06 F1 | 	add	local06, #1
0c950     F2 30 62 FC | 	wrlong	local06, objptr
0c954     13 00 00 FF 
0c958     38 E4 85 F1 | 	sub	objptr, ##9784
0c95c     F2 30 02 FB | 	rdlong	local06, objptr
0c960     01 30 06 F1 | 	add	local06, #1
0c964     F2 30 62 FC | 	wrlong	local06, objptr
0c968     37 00 00 FF 
0c96c     44 E4 85 F1 | 	sub	objptr, ##28228
0c970     B4 03 90 FD | 	jmp	#LR__1023
0c974                 | LR__1014
0c974     37 00 00 FF 
0c978     44 E4 05 F1 | 	add	objptr, ##28228
0c97c     F2 16 02 FB | 	rdlong	arg03, objptr
0c980     03 16 66 F0 | 	shl	arg03, #3
0c984     02 00 00 FF 
0c988     38 E4 85 F1 | 	sub	objptr, ##1080
0c98c     F2 16 02 F1 | 	add	arg03, objptr
0c990     0B 13 02 FB | 	rdlong	arg01, arg03
0c994     35 00 00 FF 
0c998     0C E4 85 F1 | 	sub	objptr, ##27148
0c99c     09 35 02 F6 | 	mov	local08, arg01
0c9a0     97 06 48 FB | 	callpa	#(@LR__1016-@LR__1015)>>2,fcache_load_ptr_
0c9a4                 | LR__1015
0c9a4     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c9a8     01 34 06 51 |  if_ne	add	local08, #1
0c9ac     F4 FF 9F 5D |  if_ne	jmp	#LR__1015
0c9b0                 | LR__1016
0c9b0     09 35 82 F1 | 	sub	local08, arg01
0c9b4     1A FB 01 F6 | 	mov	result1, local08
0c9b8     52 00 00 FF 
0c9bc     F0 E4 05 F1 | 	add	objptr, ##42224
0c9c0     F2 FA 61 FC | 	wrlong	result1, objptr
0c9c4     58 E4 85 F1 | 	sub	objptr, #88
0c9c8     F2 12 02 FB | 	rdlong	arg01, objptr
0c9cc     FD 12 82 F1 | 	sub	arg01, result1
0c9d0     04 12 86 F1 | 	sub	arg01, #4
0c9d4     03 12 26 F5 | 	andn	arg01, #3
0c9d8     F2 12 62 FC | 	wrlong	arg01, objptr
0c9dc     58 E4 05 F1 | 	add	objptr, #88
0c9e0     F2 14 02 FB | 	rdlong	arg02, objptr
0c9e4     52 00 00 FF 
0c9e8     F0 E4 85 F1 | 	sub	objptr, ##42224
0c9ec     2C 67 B1 FD | 	call	#_pslpoke
0c9f0                 | '     pslpoke memtop,l
0c9f0                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0c9f0     01 38 06 F6 | 	mov	local10, #1
0c9f4     52 00 00 FF 
0c9f8     F0 E4 05 F1 | 	add	objptr, ##42224
0c9fc     F2 3A 02 FB | 	rdlong	local11, objptr
0ca00     52 00 00 FF 
0ca04     F0 E4 85 F1 | 	sub	objptr, ##42224
0ca08     01 3A 06 F1 | 	add	local11, #1
0ca0c                 | LR__1017
0ca0c     1D 39 52 F2 | 	cmps	local10, local11 wc
0ca10     5C 00 90 3D |  if_ae	jmp	#LR__1018
0ca14     52 00 00 FF 
0ca18     98 E4 05 F1 | 	add	objptr, ##42136
0ca1c     F2 32 02 FB | 	rdlong	local07, objptr
0ca20     03 32 06 F1 | 	add	local07, #3
0ca24     1C 33 02 F1 | 	add	local07, local10
0ca28     1B 00 00 FF 
0ca2c     54 E4 85 F1 | 	sub	objptr, ##13908
0ca30     F2 36 02 FB | 	rdlong	local09, objptr
0ca34     03 36 66 F0 | 	shl	local09, #3
0ca38     02 00 00 FF 
0ca3c     38 E4 85 F1 | 	sub	objptr, ##1080
0ca40     F2 36 02 F1 | 	add	local09, objptr
0ca44     1B 13 02 FB | 	rdlong	arg01, local09
0ca48     1C 15 02 F6 | 	mov	arg02, local10
0ca4c     01 16 06 F6 | 	mov	arg03, #1
0ca50     35 00 00 FF 
0ca54     0C E4 85 F1 | 	sub	objptr, ##27148
0ca58     A8 C0 B1 FD | 	call	#__system__Mid_S
0ca5c     FD 14 C2 FA | 	rdbyte	arg02, result1
0ca60     19 13 02 F6 | 	mov	arg01, local07
0ca64     44 67 B1 FD | 	call	#_pspoke
0ca68     01 38 06 F1 | 	add	local10, #1
0ca6c     9C FF 9F FD | 	jmp	#LR__1017
0ca70                 | LR__1018
0ca70     52 00 00 FF 
0ca74     98 E4 05 F1 | 	add	objptr, ##42136
0ca78     F2 26 02 FB | 	rdlong	local01, objptr
0ca7c     2B 2A 06 F6 | 	mov	local03, #43
0ca80     13 31 02 F6 | 	mov	local06, local01
0ca84     14 33 02 F6 | 	mov	local07, local02
0ca88     15 3B 02 F6 | 	mov	local11, local03
0ca8c     08 00 00 FF 
0ca90     1C E4 85 F1 | 	sub	objptr, ##4124
0ca94     F2 38 02 FB | 	rdlong	local10, objptr
0ca98     1C 37 02 F6 | 	mov	local09, local10
0ca9c     01 36 66 F0 | 	shl	local09, #1
0caa0     1C 37 02 F1 | 	add	local09, local10
0caa4     02 36 66 F0 | 	shl	local09, #2
0caa8     03 00 00 FF 
0caac     00 E4 85 F1 | 	sub	objptr, ##1536
0cab0     F2 36 02 F1 | 	add	local09, objptr
0cab4     1B 31 62 FC | 	wrlong	local06, local09
0cab8     03 00 00 FF 
0cabc     00 E4 05 F1 | 	add	objptr, ##1536
0cac0     F2 38 02 FB | 	rdlong	local10, objptr
0cac4     1C 37 02 F6 | 	mov	local09, local10
0cac8     01 36 66 F0 | 	shl	local09, #1
0cacc     1C 37 02 F1 | 	add	local09, local10
0cad0     02 36 66 F0 | 	shl	local09, #2
0cad4     03 00 00 FF 
0cad8     00 E4 85 F1 | 	sub	objptr, ##1536
0cadc     F2 36 02 F1 | 	add	local09, objptr
0cae0     04 36 06 F1 | 	add	local09, #4
0cae4     1B 33 62 FC | 	wrlong	local07, local09
0cae8     03 00 00 FF 
0caec     00 E4 05 F1 | 	add	objptr, ##1536
0caf0     F2 38 02 FB | 	rdlong	local10, objptr
0caf4     1C 37 02 F6 | 	mov	local09, local10
0caf8     01 36 66 F0 | 	shl	local09, #1
0cafc     1C 37 02 F1 | 	add	local09, local10
0cb00     02 36 66 F0 | 	shl	local09, #2
0cb04     03 00 00 FF 
0cb08     00 E4 85 F1 | 	sub	objptr, ##1536
0cb0c     F2 36 02 F1 | 	add	local09, objptr
0cb10     08 36 06 F1 | 	add	local09, #8
0cb14     1B 3B 62 FC | 	wrlong	local11, local09
0cb18     03 00 00 FF 
0cb1c     00 E4 05 F1 | 	add	objptr, ##1536
0cb20     F2 30 02 FB | 	rdlong	local06, objptr
0cb24     01 30 06 F1 | 	add	local06, #1
0cb28     F2 30 62 FC | 	wrlong	local06, objptr
0cb2c     13 00 00 FF 
0cb30     38 E4 85 F1 | 	sub	objptr, ##9784
0cb34     F2 30 02 FB | 	rdlong	local06, objptr
0cb38     01 30 06 F1 | 	add	local06, #1
0cb3c     F2 30 62 FC | 	wrlong	local06, objptr
0cb40     37 00 00 FF 
0cb44     44 E4 85 F1 | 	sub	objptr, ##28228
0cb48     DC 01 90 FD | 	jmp	#LR__1023
0cb4c                 | LR__1019
0cb4c     2C 2A 06 F6 | 	mov	local03, #44
0cb50     37 00 00 FF 
0cb54     44 E4 05 F1 | 	add	objptr, ##28228
0cb58     F2 30 02 FB | 	rdlong	local06, objptr
0cb5c     03 30 66 F0 | 	shl	local06, #3
0cb60     02 00 00 FF 
0cb64     38 E4 85 F1 | 	sub	objptr, ##1080
0cb68     F2 30 02 F1 | 	add	local06, objptr
0cb6c     18 13 02 FB | 	rdlong	arg01, local06
0cb70     00 14 06 F6 | 	mov	arg02, #0
0cb74     35 00 00 FF 
0cb78     0C E4 85 F1 | 	sub	objptr, ##27148
0cb7c     E0 D2 B1 FD | 	call	#__system____builtin_atoi
0cb80     FD 26 02 F6 | 	mov	local01, result1
0cb84     13 31 02 F6 | 	mov	local06, local01
0cb88     14 33 02 F6 | 	mov	local07, local02
0cb8c     15 3B 02 F6 | 	mov	local11, local03
0cb90     4A 00 00 FF 
0cb94     7C E4 05 F1 | 	add	objptr, ##38012
0cb98     F2 38 02 FB | 	rdlong	local10, objptr
0cb9c     1C 37 02 F6 | 	mov	local09, local10
0cba0     01 36 66 F0 | 	shl	local09, #1
0cba4     1C 37 02 F1 | 	add	local09, local10
0cba8     02 36 66 F0 | 	shl	local09, #2
0cbac     03 00 00 FF 
0cbb0     00 E4 85 F1 | 	sub	objptr, ##1536
0cbb4     F2 36 02 F1 | 	add	local09, objptr
0cbb8     1B 31 62 FC | 	wrlong	local06, local09
0cbbc     03 00 00 FF 
0cbc0     00 E4 05 F1 | 	add	objptr, ##1536
0cbc4     F2 38 02 FB | 	rdlong	local10, objptr
0cbc8     1C 37 02 F6 | 	mov	local09, local10
0cbcc     01 36 66 F0 | 	shl	local09, #1
0cbd0     1C 37 02 F1 | 	add	local09, local10
0cbd4     02 36 66 F0 | 	shl	local09, #2
0cbd8     03 00 00 FF 
0cbdc     00 E4 85 F1 | 	sub	objptr, ##1536
0cbe0     F2 36 02 F1 | 	add	local09, objptr
0cbe4     04 36 06 F1 | 	add	local09, #4
0cbe8     1B 33 62 FC | 	wrlong	local07, local09
0cbec     03 00 00 FF 
0cbf0     00 E4 05 F1 | 	add	objptr, ##1536
0cbf4     F2 38 02 FB | 	rdlong	local10, objptr
0cbf8     1C 37 02 F6 | 	mov	local09, local10
0cbfc     01 36 66 F0 | 	shl	local09, #1
0cc00     1C 37 02 F1 | 	add	local09, local10
0cc04     02 36 66 F0 | 	shl	local09, #2
0cc08     03 00 00 FF 
0cc0c     00 E4 85 F1 | 	sub	objptr, ##1536
0cc10     F2 36 02 F1 | 	add	local09, objptr
0cc14     08 36 06 F1 | 	add	local09, #8
0cc18     1B 3B 62 FC | 	wrlong	local11, local09
0cc1c     03 00 00 FF 
0cc20     00 E4 05 F1 | 	add	objptr, ##1536
0cc24     F2 30 02 FB | 	rdlong	local06, objptr
0cc28     01 30 06 F1 | 	add	local06, #1
0cc2c     F2 30 62 FC | 	wrlong	local06, objptr
0cc30     13 00 00 FF 
0cc34     38 E4 85 F1 | 	sub	objptr, ##9784
0cc38     F2 30 02 FB | 	rdlong	local06, objptr
0cc3c     01 30 06 F1 | 	add	local06, #1
0cc40     F2 30 62 FC | 	wrlong	local06, objptr
0cc44     37 00 00 FF 
0cc48     44 E4 85 F1 | 	sub	objptr, ##28228
0cc4c     D8 00 90 FD | 	jmp	#LR__1023
0cc50                 | LR__1020
0cc50     16 13 02 F6 | 	mov	arg01, local04
0cc54     24 04 B0 FD | 	call	#_getvar
0cc58     37 00 00 FF 
0cc5c     44 E4 05 F1 | 	add	objptr, ##28228
0cc60     F2 30 02 FB | 	rdlong	local06, objptr
0cc64     01 30 06 F1 | 	add	local06, #1
0cc68     F2 30 62 FC | 	wrlong	local06, objptr
0cc6c     37 00 00 FF 
0cc70     44 E4 85 F1 | 	sub	objptr, ##28228
0cc74                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0cc74     01 FA 55 F2 | 	cmps	result1, #1 wc
0cc78     B0 00 90 3D |  if_ae	jmp	#LR__1024
0cc7c     A8 00 90 FD | 	jmp	#LR__1023
0cc80                 | LR__1021
0cc80     37 00 00 FF 
0cc84     44 E4 05 F1 | 	add	objptr, ##28228
0cc88     F2 30 02 FB | 	rdlong	local06, objptr
0cc8c     01 30 06 F1 | 	add	local06, #1
0cc90     F2 30 62 FC | 	wrlong	local06, objptr
0cc94     37 00 00 FF 
0cc98     44 E4 85 F1 | 	sub	objptr, ##28228
0cc9c     20 F1 BF FD | 	call	#_expr
0cca0                 | '     ct+=1
0cca0                 | '     err=expr() : if err>0 then return err 
0cca0     01 FA 55 F2 | 	cmps	result1, #1 wc
0cca4     84 00 90 3D |  if_ae	jmp	#LR__1024
0cca8                 | '     if lparts(ct).token=token_rpar then ct+=1
0cca8     37 00 00 FF 
0ccac     44 E4 05 F1 | 	add	objptr, ##28228
0ccb0     F2 3A 02 FB | 	rdlong	local11, objptr
0ccb4     03 3A 66 F0 | 	shl	local11, #3
0ccb8     02 00 00 FF 
0ccbc     38 E4 85 F1 | 	sub	objptr, ##1080
0ccc0     F2 3A 02 F1 | 	add	local11, objptr
0ccc4     04 3A 06 F1 | 	add	local11, #4
0ccc8     1D 3B 02 FB | 	rdlong	local11, local11
0cccc     14 3A 0E F2 | 	cmp	local11, #20 wz
0ccd0     35 00 00 FF 
0ccd4     0C E4 85 F1 | 	sub	objptr, ##27148
0ccd8     4C 00 90 5D |  if_ne	jmp	#LR__1023
0ccdc     37 00 00 FF 
0cce0     44 E4 05 F1 | 	add	objptr, ##28228
0cce4     F2 30 02 FB | 	rdlong	local06, objptr
0cce8     01 30 06 F1 | 	add	local06, #1
0ccec     F2 30 62 FC | 	wrlong	local06, objptr
0ccf0     37 00 00 FF 
0ccf4     44 E4 85 F1 | 	sub	objptr, ##28228
0ccf8     2C 00 90 FD | 	jmp	#LR__1023
0ccfc                 | LR__1022
0ccfc     16 13 02 F6 | 	mov	arg01, local04
0cd00     34 00 B0 FD | 	call	#_getfun
0cd04     37 00 00 FF 
0cd08     44 E4 05 F1 | 	add	objptr, ##28228
0cd0c     F2 30 02 FB | 	rdlong	local06, objptr
0cd10     01 30 06 F1 | 	add	local06, #1
0cd14     F2 30 62 FC | 	wrlong	local06, objptr
0cd18     37 00 00 FF 
0cd1c     44 E4 85 F1 | 	sub	objptr, ##28228
0cd20                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0cd20     01 FA 55 F2 | 	cmps	result1, #1 wc
0cd24     04 00 90 3D |  if_ae	jmp	#LR__1024
0cd28                 | LR__1023
0cd28                 | ' return 0  
0cd28     00 FA 05 F6 | 	mov	result1, #0
0cd2c                 | LR__1024
0cd2c     A7 F0 03 F6 | 	mov	ptra, fp
0cd30     B2 00 A0 FD | 	call	#popregs_
0cd34                 | _getvalue_ret
0cd34     2D 00 64 FD | 	ret
0cd38                 | 
0cd38                 | ' 
0cd38                 | ' ' Get a function result 
0cd38                 | ' 
0cd38                 | ' function getfun(m as integer) as ulong
0cd38                 | _getfun
0cd38     0F 4A 05 F6 | 	mov	COUNT_, #15
0cd3c     A8 00 A0 FD | 	call	#pushregs_
0cd40                 | _getfun_enter
0cd40     09 2D 02 F6 | 	mov	local04, arg01
0cd44     37 00 00 FF 
0cd48     44 E4 05 F1 | 	add	objptr, ##28228
0cd4c     F2 2E 02 FB | 	rdlong	local05, objptr
0cd50     17 31 02 F6 | 	mov	local06, local05
0cd54     00 32 06 F6 | 	mov	local07, #0
0cd58                 | ' oldct=ct
0cd58                 | ' numpar=0
0cd58                 | ' if lparts(ct+1).token=token_lpar then
0cd58     01 2E 06 F1 | 	add	local05, #1
0cd5c     03 2E 66 F0 | 	shl	local05, #3
0cd60     02 00 00 FF 
0cd64     38 E4 85 F1 | 	sub	objptr, ##1080
0cd68     F2 2E 02 F1 | 	add	local05, objptr
0cd6c     04 2E 06 F1 | 	add	local05, #4
0cd70     17 2F 02 FB | 	rdlong	local05, local05
0cd74     15 2E 0E F2 | 	cmp	local05, #21 wz
0cd78     35 00 00 FF 
0cd7c     0C E4 85 F1 | 	sub	objptr, ##27148
0cd80     54 01 90 5D |  if_ne	jmp	#LR__1034
0cd84     37 00 00 FF 
0cd88     44 E4 05 F1 | 	add	objptr, ##28228
0cd8c     F2 34 02 FB | 	rdlong	local08, objptr
0cd90     01 34 06 F1 | 	add	local08, #1
0cd94     F2 34 62 FC | 	wrlong	local08, objptr
0cd98     37 00 00 FF 
0cd9c     44 E4 85 F1 | 	sub	objptr, ##28228
0cda0                 | '   ct+=1 											' omit this lpar, this is for expr list
0cda0                 | '   do
0cda0                 | LR__1030
0cda0     37 00 00 FF 
0cda4     44 E4 05 F1 | 	add	objptr, ##28228
0cda8     F2 2E 02 FB | 	rdlong	local05, objptr
0cdac     01 2E 06 F1 | 	add	local05, #1
0cdb0     F2 2E 62 FC | 	wrlong	local05, objptr
0cdb4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0cdb4                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0cdb4     03 2E 66 F0 | 	shl	local05, #3
0cdb8     02 00 00 FF 
0cdbc     38 E4 85 F1 | 	sub	objptr, ##1080
0cdc0     F2 2E 02 F1 | 	add	local05, objptr
0cdc4     04 2E 06 F1 | 	add	local05, #4
0cdc8     17 35 02 FB | 	rdlong	local08, local05
0cdcc     15 34 0E F2 | 	cmp	local08, #21 wz
0cdd0     35 00 00 FF 
0cdd4     0C E4 85 F1 | 	sub	objptr, ##27148
0cdd8     44 00 90 5D |  if_ne	jmp	#LR__1031
0cddc     37 00 00 FF 
0cde0     44 E4 05 F1 | 	add	objptr, ##28228
0cde4     F2 34 02 FB | 	rdlong	local08, objptr
0cde8     01 34 06 F1 | 	add	local08, #1
0cdec     F2 34 62 FC | 	wrlong	local08, objptr
0cdf0     37 00 00 FF 
0cdf4     44 E4 85 F1 | 	sub	objptr, ##28228
0cdf8     C4 EF BF FD | 	call	#_expr
0cdfc     FD 36 02 F6 | 	mov	local09, result1
0ce00     37 00 00 FF 
0ce04     44 E4 05 F1 | 	add	objptr, ##28228
0ce08     F2 34 02 FB | 	rdlong	local08, objptr
0ce0c     01 34 06 F1 | 	add	local08, #1
0ce10     F2 34 62 FC | 	wrlong	local08, objptr
0ce14     37 00 00 FF 
0ce18     44 E4 85 F1 | 	sub	objptr, ##28228
0ce1c     08 00 90 FD | 	jmp	#LR__1032
0ce20                 | LR__1031
0ce20     9C EF BF FD | 	call	#_expr
0ce24     FD 36 02 F6 | 	mov	local09, result1
0ce28                 | LR__1032
0ce28                 | '     if err>0 then return err
0ce28     01 36 16 F2 | 	cmp	local09, #1 wc
0ce2c     1B FB 01 36 |  if_ae	mov	result1, local09
0ce30     3C 02 90 3D |  if_ae	jmp	#LR__1036
0ce34     01 32 06 F1 | 	add	local07, #1
0ce38     37 00 00 FF 
0ce3c     44 E4 05 F1 | 	add	objptr, ##28228
0ce40     F2 2E 02 FB | 	rdlong	local05, objptr
0ce44     03 2E 66 F0 | 	shl	local05, #3
0ce48     02 00 00 FF 
0ce4c     38 E4 85 F1 | 	sub	objptr, ##1080
0ce50     F2 2E 02 F1 | 	add	local05, objptr
0ce54     04 2E 06 F1 | 	add	local05, #4
0ce58     17 37 02 FB | 	rdlong	local09, local05
0ce5c     14 36 0E F2 | 	cmp	local09, #20 wz
0ce60     35 00 00 FF 
0ce64     0C E4 85 F1 | 	sub	objptr, ##27148
0ce68     34 00 90 AD |  if_e	jmp	#LR__1033
0ce6c     37 00 00 FF 
0ce70     44 E4 05 F1 | 	add	objptr, ##28228
0ce74     F2 36 02 FB | 	rdlong	local09, objptr
0ce78     03 36 66 F0 | 	shl	local09, #3
0ce7c     02 00 00 FF 
0ce80     38 E4 85 F1 | 	sub	objptr, ##1080
0ce84     F2 36 02 F1 | 	add	local09, objptr
0ce88     04 36 06 F1 | 	add	local09, #4
0ce8c     1B 37 02 FB | 	rdlong	local09, local09
0ce90     FE 37 0E F2 | 	cmp	local09, #510 wz
0ce94     35 00 00 FF 
0ce98     0C E4 85 F1 | 	sub	objptr, ##27148
0ce9c     00 FF 9F 5D |  if_ne	jmp	#LR__1030
0cea0                 | LR__1033
0cea0                 | '   if lparts(ct).token=token_end then return 14
0cea0     37 00 00 FF 
0cea4     44 E4 05 F1 | 	add	objptr, ##28228
0cea8     F2 2E 02 FB | 	rdlong	local05, objptr
0ceac     03 2E 66 F0 | 	shl	local05, #3
0ceb0     02 00 00 FF 
0ceb4     38 E4 85 F1 | 	sub	objptr, ##1080
0ceb8     F2 2E 02 F1 | 	add	local05, objptr
0cebc     04 2E 06 F1 | 	add	local05, #4
0cec0     17 37 02 FB | 	rdlong	local09, local05
0cec4     FE 37 0E F2 | 	cmp	local09, #510 wz
0cec8     35 00 00 FF 
0cecc     0C E4 85 F1 | 	sub	objptr, ##27148
0ced0     0E FA 05 A6 |  if_e	mov	result1, #14
0ced4     98 01 90 AD |  if_e	jmp	#LR__1036
0ced8                 | LR__1034
0ced8     19 27 02 F6 | 	mov	local01, local07
0cedc     03 30 66 F0 | 	shl	local06, #3
0cee0     35 00 00 FF 
0cee4     0C E4 05 F1 | 	add	objptr, ##27148
0cee8     F2 30 02 F1 | 	add	local06, objptr
0ceec     04 30 06 F1 | 	add	local06, #4
0cef0     18 2B 02 FB | 	rdlong	local03, local06
0cef4     13 35 02 F6 | 	mov	local08, local01
0cef8     14 39 02 F6 | 	mov	local10, local02
0cefc     15 3B 02 F6 | 	mov	local11, local03
0cf00     15 00 00 FF 
0cf04     70 E4 05 F1 | 	add	objptr, ##10864
0cf08     F2 3C 02 FB | 	rdlong	local12, objptr
0cf0c     1E 3F 02 F6 | 	mov	local13, local12
0cf10     01 3E 66 F0 | 	shl	local13, #1
0cf14     1E 3F 02 F1 | 	add	local13, local12
0cf18     02 3E 66 F0 | 	shl	local13, #2
0cf1c     03 00 00 FF 
0cf20     00 E4 85 F1 | 	sub	objptr, ##1536
0cf24     F2 3E 02 F1 | 	add	local13, objptr
0cf28     1F 35 62 FC | 	wrlong	local08, local13
0cf2c     03 00 00 FF 
0cf30     00 E4 05 F1 | 	add	objptr, ##1536
0cf34     F2 34 02 FB | 	rdlong	local08, objptr
0cf38     1A 41 02 F6 | 	mov	local14, local08
0cf3c     01 40 66 F0 | 	shl	local14, #1
0cf40     1A 41 02 F1 | 	add	local14, local08
0cf44     02 40 66 F0 | 	shl	local14, #2
0cf48     03 00 00 FF 
0cf4c     00 E4 85 F1 | 	sub	objptr, ##1536
0cf50     F2 40 02 F1 | 	add	local14, objptr
0cf54     04 40 06 F1 | 	add	local14, #4
0cf58     20 39 62 FC | 	wrlong	local10, local14
0cf5c     03 00 00 FF 
0cf60     00 E4 05 F1 | 	add	objptr, ##1536
0cf64     F2 34 02 FB | 	rdlong	local08, objptr
0cf68     1A 43 02 F6 | 	mov	local15, local08
0cf6c     01 42 66 F0 | 	shl	local15, #1
0cf70     1A 43 02 F1 | 	add	local15, local08
0cf74     02 42 66 F0 | 	shl	local15, #2
0cf78     03 00 00 FF 
0cf7c     00 E4 85 F1 | 	sub	objptr, ##1536
0cf80     F2 42 02 F1 | 	add	local15, objptr
0cf84     08 42 06 F1 | 	add	local15, #8
0cf88     21 3B 62 FC | 	wrlong	local11, local15
0cf8c     03 00 00 FF 
0cf90     00 E4 05 F1 | 	add	objptr, ##1536
0cf94     F2 34 02 FB | 	rdlong	local08, objptr
0cf98     01 34 06 F1 | 	add	local08, #1
0cf9c     F2 34 62 FC | 	wrlong	local08, objptr
0cfa0     4A 00 00 FF 
0cfa4     7C E4 85 F1 | 	sub	objptr, ##38012
0cfa8                 | ' t2.result.uresult=numpar
0cfa8                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0cfa8                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0cfa8                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0cfa8     FF FF 7F FF 
0cfac     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0cfb0     B8 00 90 5D |  if_ne	jmp	#LR__1035
0cfb4     15 2A 06 F6 | 	mov	local03, #21
0cfb8     13 35 02 F6 | 	mov	local08, local01
0cfbc     14 39 02 F6 | 	mov	local10, local02
0cfc0     15 3B 02 F6 | 	mov	local11, local03
0cfc4     4A 00 00 FF 
0cfc8     7C E4 05 F1 | 	add	objptr, ##38012
0cfcc     F2 3C 02 FB | 	rdlong	local12, objptr
0cfd0     1E 3F 02 F6 | 	mov	local13, local12
0cfd4     01 3E 66 F0 | 	shl	local13, #1
0cfd8     1E 3F 02 F1 | 	add	local13, local12
0cfdc     02 3E 66 F0 | 	shl	local13, #2
0cfe0     03 00 00 FF 
0cfe4     00 E4 85 F1 | 	sub	objptr, ##1536
0cfe8     F2 3E 02 F1 | 	add	local13, objptr
0cfec     1F 35 62 FC | 	wrlong	local08, local13
0cff0     03 00 00 FF 
0cff4     00 E4 05 F1 | 	add	objptr, ##1536
0cff8     F2 42 02 FB | 	rdlong	local15, objptr
0cffc     21 41 02 F6 | 	mov	local14, local15
0d000     01 40 66 F0 | 	shl	local14, #1
0d004     21 41 02 F1 | 	add	local14, local15
0d008     02 40 66 F0 | 	shl	local14, #2
0d00c     03 00 00 FF 
0d010     00 E4 85 F1 | 	sub	objptr, ##1536
0d014     F2 40 02 F1 | 	add	local14, objptr
0d018     04 40 06 F1 | 	add	local14, #4
0d01c     20 39 62 FC | 	wrlong	local10, local14
0d020     03 00 00 FF 
0d024     00 E4 05 F1 | 	add	objptr, ##1536
0d028     F2 40 02 FB | 	rdlong	local14, objptr
0d02c     20 43 02 F6 | 	mov	local15, local14
0d030     01 42 66 F0 | 	shl	local15, #1
0d034     20 43 02 F1 | 	add	local15, local14
0d038     02 42 66 F0 | 	shl	local15, #2
0d03c     03 00 00 FF 
0d040     00 E4 85 F1 | 	sub	objptr, ##1536
0d044     F2 42 02 F1 | 	add	local15, objptr
0d048     08 42 06 F1 | 	add	local15, #8
0d04c     21 3B 62 FC | 	wrlong	local11, local15
0d050     03 00 00 FF 
0d054     00 E4 05 F1 | 	add	objptr, ##1536
0d058     F2 34 02 FB | 	rdlong	local08, objptr
0d05c     01 34 06 F1 | 	add	local08, #1
0d060     F2 34 62 FC | 	wrlong	local08, objptr
0d064     4A 00 00 FF 
0d068     7C E4 85 F1 | 	sub	objptr, ##38012
0d06c                 | LR__1035
0d06c                 | ' return 0
0d06c     00 FA 05 F6 | 	mov	result1, #0
0d070                 | LR__1036
0d070     A7 F0 03 F6 | 	mov	ptra, fp
0d074     B2 00 A0 FD | 	call	#popregs_
0d078                 | _getfun_ret
0d078     2D 00 64 FD | 	ret
0d07c                 | 
0d07c                 | '   
0d07c                 | '   
0d07c                 | ' function getvar(m as integer) as ulong
0d07c                 | _getvar
0d07c     11 4A 05 F6 | 	mov	COUNT_, #17
0d080     A8 00 A0 FD | 	call	#pushregs_
0d084                 | _getvar_enter
0d084     09 2D 02 F6 | 	mov	local04, arg01
0d088     37 00 00 FF 
0d08c     44 E4 05 F1 | 	add	objptr, ##28228
0d090     F2 2E 02 FB | 	rdlong	local05, objptr
0d094     03 2E 66 F0 | 	shl	local05, #3
0d098     02 00 00 FF 
0d09c     38 E4 85 F1 | 	sub	objptr, ##1080
0d0a0     F2 2E 02 F1 | 	add	local05, objptr
0d0a4     17 31 02 FB | 	rdlong	local06, local05
0d0a8     01 32 66 F6 | 	neg	local07, #1
0d0ac                 | ' 
0d0ac                 | ' varname$=lparts(ct).part$
0d0ac                 | ' j=-1
0d0ac                 | ' 
0d0ac                 | ' for i=0 to varnum-1
0d0ac     00 34 06 F6 | 	mov	local08, #0
0d0b0     04 E4 85 F1 | 	sub	objptr, #4
0d0b4     F2 36 02 FB | 	rdlong	local09, objptr
0d0b8     35 00 00 FF 
0d0bc     08 E4 85 F1 | 	sub	objptr, ##27144
0d0c0                 | LR__1040
0d0c0     1B 35 52 F2 | 	cmps	local08, local09 wc
0d0c4     38 00 90 3D |  if_ae	jmp	#LR__1041
0d0c8                 | '   if variables(i).name=varname$ then j=i : exit
0d0c8     1A 2F 02 F6 | 	mov	local05, local08
0d0cc     04 2E 66 F0 | 	shl	local05, #4
0d0d0     14 00 00 FF 
0d0d4     F8 E5 05 F1 | 	add	objptr, ##10744
0d0d8     F2 2E 02 F1 | 	add	local05, objptr
0d0dc     17 13 02 FB | 	rdlong	arg01, local05
0d0e0     18 15 02 F6 | 	mov	arg02, local06
0d0e4     14 00 00 FF 
0d0e8     F8 E5 85 F1 | 	sub	objptr, ##10744
0d0ec     A4 98 B1 FD | 	call	#__system___string_cmp
0d0f0     00 FA 0D F2 | 	cmp	result1, #0 wz
0d0f4     1A 33 02 A6 |  if_e	mov	local07, local08
0d0f8     01 34 06 51 |  if_ne	add	local08, #1
0d0fc     C0 FF 9F 5D |  if_ne	jmp	#LR__1040
0d100                 | LR__1041
0d100                 | ' if  j=-1 andalso varnum<maxvars then   
0d100     FF FF 7F FF 
0d104     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0d108     A8 00 90 5D |  if_ne	jmp	#LR__1042
0d10c     35 00 00 FF 
0d110     08 E4 05 F1 | 	add	objptr, ##27144
0d114     F2 36 02 FB | 	rdlong	local09, objptr
0d118     35 00 00 FF 
0d11c     08 E4 85 F1 | 	sub	objptr, ##27144
0d120     02 00 00 FF 
0d124     00 36 56 F2 | 	cmps	local09, ##1024 wc
0d128     88 00 90 3D |  if_ae	jmp	#LR__1042
0d12c     35 00 00 FF 
0d130     08 E4 05 F1 | 	add	objptr, ##27144
0d134     F2 2E 02 FB | 	rdlong	local05, objptr
0d138     04 2E 66 F0 | 	shl	local05, #4
0d13c     20 00 00 FF 
0d140     10 E4 85 F1 | 	sub	objptr, ##16400
0d144     F2 2E 02 F1 | 	add	local05, objptr
0d148     17 31 62 FC | 	wrlong	local06, local05
0d14c     20 00 00 FF 
0d150     10 E4 05 F1 | 	add	objptr, ##16400
0d154     F2 2E 02 FB | 	rdlong	local05, objptr
0d158     04 2E 66 F0 | 	shl	local05, #4
0d15c     20 00 00 FF 
0d160     10 E4 85 F1 | 	sub	objptr, ##16400
0d164     F2 2E 02 F1 | 	add	local05, objptr
0d168     04 2E 06 F1 | 	add	local05, #4
0d16c     17 01 68 FC | 	wrlong	#0, local05
0d170     20 00 00 FF 
0d174     10 E4 05 F1 | 	add	objptr, ##16400
0d178     F2 2E 02 FB | 	rdlong	local05, objptr
0d17c     04 2E 66 F0 | 	shl	local05, #4
0d180     20 00 00 FF 
0d184     10 E4 85 F1 | 	sub	objptr, ##16400
0d188     F2 2E 02 F1 | 	add	local05, objptr
0d18c     0C 2E 06 F1 | 	add	local05, #12
0d190     17 39 68 FC | 	wrlong	#28, local05
0d194     20 00 00 FF 
0d198     10 E4 05 F1 | 	add	objptr, ##16400
0d19c     F2 36 02 FB | 	rdlong	local09, objptr
0d1a0     1B 33 02 F6 | 	mov	local07, local09
0d1a4     01 36 06 F1 | 	add	local09, #1
0d1a8     F2 36 62 FC | 	wrlong	local09, objptr
0d1ac     35 00 00 FF 
0d1b0     08 E4 85 F1 | 	sub	objptr, ##27144
0d1b4                 | LR__1042
0d1b4     00 36 06 F6 | 	mov	local09, #0
0d1b8                 | ' numpar=0
0d1b8                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d1b8     37 00 00 FF 
0d1bc     44 E4 05 F1 | 	add	objptr, ##28228
0d1c0     F2 2E 02 FB | 	rdlong	local05, objptr
0d1c4     01 2E 06 F1 | 	add	local05, #1
0d1c8     03 2E 66 F0 | 	shl	local05, #3
0d1cc     02 00 00 FF 
0d1d0     38 E4 85 F1 | 	sub	objptr, ##1080
0d1d4     F2 2E 02 F1 | 	add	local05, objptr
0d1d8     04 2E 06 F1 | 	add	local05, #4
0d1dc     17 35 02 FB | 	rdlong	local08, local05
0d1e0     15 34 0E F2 | 	cmp	local08, #21 wz
0d1e4     35 00 00 FF 
0d1e8     0C E4 85 F1 | 	sub	objptr, ##27148
0d1ec     54 01 90 5D |  if_ne	jmp	#LR__1047
0d1f0     37 00 00 FF 
0d1f4     44 E4 05 F1 | 	add	objptr, ##28228
0d1f8     F2 38 02 FB | 	rdlong	local10, objptr
0d1fc     01 38 06 F1 | 	add	local10, #1
0d200     F2 38 62 FC | 	wrlong	local10, objptr
0d204     37 00 00 FF 
0d208     44 E4 85 F1 | 	sub	objptr, ##28228
0d20c                 | '   ct+=1 											' omit this lpar, this is for expr list
0d20c                 | '   do
0d20c                 | LR__1043
0d20c     37 00 00 FF 
0d210     44 E4 05 F1 | 	add	objptr, ##28228
0d214     F2 2E 02 FB | 	rdlong	local05, objptr
0d218     01 2E 06 F1 | 	add	local05, #1
0d21c     F2 2E 62 FC | 	wrlong	local05, objptr
0d220                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d220                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d220     03 2E 66 F0 | 	shl	local05, #3
0d224     02 00 00 FF 
0d228     38 E4 85 F1 | 	sub	objptr, ##1080
0d22c     F2 2E 02 F1 | 	add	local05, objptr
0d230     04 2E 06 F1 | 	add	local05, #4
0d234     17 39 02 FB | 	rdlong	local10, local05
0d238     15 38 0E F2 | 	cmp	local10, #21 wz
0d23c     35 00 00 FF 
0d240     0C E4 85 F1 | 	sub	objptr, ##27148
0d244     44 00 90 5D |  if_ne	jmp	#LR__1044
0d248     37 00 00 FF 
0d24c     44 E4 05 F1 | 	add	objptr, ##28228
0d250     F2 38 02 FB | 	rdlong	local10, objptr
0d254     01 38 06 F1 | 	add	local10, #1
0d258     F2 38 62 FC | 	wrlong	local10, objptr
0d25c     37 00 00 FF 
0d260     44 E4 85 F1 | 	sub	objptr, ##28228
0d264     58 EB BF FD | 	call	#_expr
0d268     FD 3A 02 F6 | 	mov	local11, result1
0d26c     37 00 00 FF 
0d270     44 E4 05 F1 | 	add	objptr, ##28228
0d274     F2 38 02 FB | 	rdlong	local10, objptr
0d278     01 38 06 F1 | 	add	local10, #1
0d27c     F2 38 62 FC | 	wrlong	local10, objptr
0d280     37 00 00 FF 
0d284     44 E4 85 F1 | 	sub	objptr, ##28228
0d288     08 00 90 FD | 	jmp	#LR__1045
0d28c                 | LR__1044
0d28c     30 EB BF FD | 	call	#_expr
0d290     FD 3A 02 F6 | 	mov	local11, result1
0d294                 | LR__1045
0d294                 | '     if err>0 then return err
0d294     01 3A 56 F2 | 	cmps	local11, #1 wc
0d298     1D FB 01 36 |  if_ae	mov	result1, local11
0d29c     2C 02 90 3D |  if_ae	jmp	#LR__1049
0d2a0     01 36 06 F1 | 	add	local09, #1
0d2a4     37 00 00 FF 
0d2a8     44 E4 05 F1 | 	add	objptr, ##28228
0d2ac     F2 2E 02 FB | 	rdlong	local05, objptr
0d2b0     03 2E 66 F0 | 	shl	local05, #3
0d2b4     02 00 00 FF 
0d2b8     38 E4 85 F1 | 	sub	objptr, ##1080
0d2bc     F2 2E 02 F1 | 	add	local05, objptr
0d2c0     04 2E 06 F1 | 	add	local05, #4
0d2c4     17 3B 02 FB | 	rdlong	local11, local05
0d2c8     14 3A 0E F2 | 	cmp	local11, #20 wz
0d2cc     35 00 00 FF 
0d2d0     0C E4 85 F1 | 	sub	objptr, ##27148
0d2d4     34 00 90 AD |  if_e	jmp	#LR__1046
0d2d8     37 00 00 FF 
0d2dc     44 E4 05 F1 | 	add	objptr, ##28228
0d2e0     F2 3A 02 FB | 	rdlong	local11, objptr
0d2e4     03 3A 66 F0 | 	shl	local11, #3
0d2e8     02 00 00 FF 
0d2ec     38 E4 85 F1 | 	sub	objptr, ##1080
0d2f0     F2 3A 02 F1 | 	add	local11, objptr
0d2f4     04 3A 06 F1 | 	add	local11, #4
0d2f8     1D 3B 02 FB | 	rdlong	local11, local11
0d2fc     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d300     35 00 00 FF 
0d304     0C E4 85 F1 | 	sub	objptr, ##27148
0d308     00 FF 9F 5D |  if_ne	jmp	#LR__1043
0d30c                 | LR__1046
0d30c                 | '     if lparts(ct).token=token_end then return 14
0d30c     37 00 00 FF 
0d310     44 E4 05 F1 | 	add	objptr, ##28228
0d314     F2 2E 02 FB | 	rdlong	local05, objptr
0d318     03 2E 66 F0 | 	shl	local05, #3
0d31c     02 00 00 FF 
0d320     38 E4 85 F1 | 	sub	objptr, ##1080
0d324     F2 2E 02 F1 | 	add	local05, objptr
0d328     04 2E 06 F1 | 	add	local05, #4
0d32c     17 3B 02 FB | 	rdlong	local11, local05
0d330     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d334     35 00 00 FF 
0d338     0C E4 85 F1 | 	sub	objptr, ##27148
0d33c     0E FA 05 A6 |  if_e	mov	result1, #14
0d340     88 01 90 AD |  if_e	jmp	#LR__1049
0d344                 | LR__1047
0d344     1B 29 02 F6 | 	mov	local02, local09
0d348     11 2A 06 F6 | 	mov	local03, #17
0d34c     19 27 02 F6 | 	mov	local01, local07
0d350     13 39 02 F6 | 	mov	local10, local01
0d354     14 3D 02 F6 | 	mov	local12, local02
0d358     15 3F 02 F6 | 	mov	local13, local03
0d35c     4A 00 00 FF 
0d360     7C E4 05 F1 | 	add	objptr, ##38012
0d364     F2 40 02 FB | 	rdlong	local14, objptr
0d368     20 43 02 F6 | 	mov	local15, local14
0d36c     01 42 66 F0 | 	shl	local15, #1
0d370     20 43 02 F1 | 	add	local15, local14
0d374     02 42 66 F0 | 	shl	local15, #2
0d378     03 00 00 FF 
0d37c     00 E4 85 F1 | 	sub	objptr, ##1536
0d380     F2 42 02 F1 | 	add	local15, objptr
0d384     21 39 62 FC | 	wrlong	local10, local15
0d388     03 00 00 FF 
0d38c     00 E4 05 F1 | 	add	objptr, ##1536
0d390     F2 38 02 FB | 	rdlong	local10, objptr
0d394     1C 45 02 F6 | 	mov	local16, local10
0d398     01 44 66 F0 | 	shl	local16, #1
0d39c     1C 45 02 F1 | 	add	local16, local10
0d3a0     02 44 66 F0 | 	shl	local16, #2
0d3a4     03 00 00 FF 
0d3a8     00 E4 85 F1 | 	sub	objptr, ##1536
0d3ac     F2 44 02 F1 | 	add	local16, objptr
0d3b0     04 44 06 F1 | 	add	local16, #4
0d3b4     22 3D 62 FC | 	wrlong	local12, local16
0d3b8     03 00 00 FF 
0d3bc     00 E4 05 F1 | 	add	objptr, ##1536
0d3c0     F2 38 02 FB | 	rdlong	local10, objptr
0d3c4     1C 47 02 F6 | 	mov	local17, local10
0d3c8     01 46 66 F0 | 	shl	local17, #1
0d3cc     1C 47 02 F1 | 	add	local17, local10
0d3d0     02 46 66 F0 | 	shl	local17, #2
0d3d4     03 00 00 FF 
0d3d8     00 E4 85 F1 | 	sub	objptr, ##1536
0d3dc     F2 46 02 F1 | 	add	local17, objptr
0d3e0     08 46 06 F1 | 	add	local17, #8
0d3e4     23 3F 62 FC | 	wrlong	local13, local17
0d3e8     03 00 00 FF 
0d3ec     00 E4 05 F1 | 	add	objptr, ##1536
0d3f0     F2 38 02 FB | 	rdlong	local10, objptr
0d3f4     01 38 06 F1 | 	add	local10, #1
0d3f8     F2 38 62 FC | 	wrlong	local10, objptr
0d3fc     4A 00 00 FF 
0d400     7C E4 85 F1 | 	sub	objptr, ##38012
0d404                 | ' t2.result.twowords(1)=numpar
0d404                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d404                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d404                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d404     FF FF 7F FF 
0d408     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d40c     B8 00 90 5D |  if_ne	jmp	#LR__1048
0d410     15 2A 06 F6 | 	mov	local03, #21
0d414     13 39 02 F6 | 	mov	local10, local01
0d418     14 3D 02 F6 | 	mov	local12, local02
0d41c     15 3F 02 F6 | 	mov	local13, local03
0d420     4A 00 00 FF 
0d424     7C E4 05 F1 | 	add	objptr, ##38012
0d428     F2 40 02 FB | 	rdlong	local14, objptr
0d42c     20 43 02 F6 | 	mov	local15, local14
0d430     01 42 66 F0 | 	shl	local15, #1
0d434     20 43 02 F1 | 	add	local15, local14
0d438     02 42 66 F0 | 	shl	local15, #2
0d43c     03 00 00 FF 
0d440     00 E4 85 F1 | 	sub	objptr, ##1536
0d444     F2 42 02 F1 | 	add	local15, objptr
0d448     21 39 62 FC | 	wrlong	local10, local15
0d44c     03 00 00 FF 
0d450     00 E4 05 F1 | 	add	objptr, ##1536
0d454     F2 46 02 FB | 	rdlong	local17, objptr
0d458     23 45 02 F6 | 	mov	local16, local17
0d45c     01 44 66 F0 | 	shl	local16, #1
0d460     23 45 02 F1 | 	add	local16, local17
0d464     02 44 66 F0 | 	shl	local16, #2
0d468     03 00 00 FF 
0d46c     00 E4 85 F1 | 	sub	objptr, ##1536
0d470     F2 44 02 F1 | 	add	local16, objptr
0d474     04 44 06 F1 | 	add	local16, #4
0d478     22 3D 62 FC | 	wrlong	local12, local16
0d47c     03 00 00 FF 
0d480     00 E4 05 F1 | 	add	objptr, ##1536
0d484     F2 44 02 FB | 	rdlong	local16, objptr
0d488     22 47 02 F6 | 	mov	local17, local16
0d48c     01 46 66 F0 | 	shl	local17, #1
0d490     22 47 02 F1 | 	add	local17, local16
0d494     02 46 66 F0 | 	shl	local17, #2
0d498     03 00 00 FF 
0d49c     00 E4 85 F1 | 	sub	objptr, ##1536
0d4a0     F2 46 02 F1 | 	add	local17, objptr
0d4a4     08 46 06 F1 | 	add	local17, #8
0d4a8     23 3F 62 FC | 	wrlong	local13, local17
0d4ac     03 00 00 FF 
0d4b0     00 E4 05 F1 | 	add	objptr, ##1536
0d4b4     F2 38 02 FB | 	rdlong	local10, objptr
0d4b8     01 38 06 F1 | 	add	local10, #1
0d4bc     F2 38 62 FC | 	wrlong	local10, objptr
0d4c0     4A 00 00 FF 
0d4c4     7C E4 85 F1 | 	sub	objptr, ##38012
0d4c8                 | LR__1048
0d4c8                 | ' return 0
0d4c8     00 FA 05 F6 | 	mov	result1, #0
0d4cc                 | LR__1049
0d4cc     A7 F0 03 F6 | 	mov	ptra, fp
0d4d0     B2 00 A0 FD | 	call	#popregs_
0d4d4                 | _getvar_ret
0d4d4     2D 00 64 FD | 	ret
0d4d8                 | 
0d4d8                 | ' 
0d4d8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d4d8                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d4d8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d4d8                 | ' 
0d4d8                 | ' 
0d4d8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d4d8                 | ' '                                                                                                                                       -
0d4d8                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d4d8                 | ' '                                                                                                                                       -
0d4d8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d4d8                 | ' 
0d4d8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d4d8                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d4d8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d4d8                 | ' 
0d4d8                 | ' function execute_line (astart=0 as integer) as integer
0d4d8                 | _execute_line
0d4d8     04 4A 05 F6 | 	mov	COUNT_, #4
0d4dc     A8 00 A0 FD | 	call	#pushregs_
0d4e0     50 00 00 FF 
0d4e4     BC E4 05 F1 | 	add	objptr, ##41148
0d4e8     F2 00 68 FC | 	wrlong	#0, objptr
0d4ec                 | ' 
0d4ec                 | ' runptr2=0
0d4ec                 | ' for lineptr_e=astart to lineptr-1
0d4ec     06 00 00 FF 
0d4f0     3C E4 85 F1 | 	sub	objptr, ##3132
0d4f4     F2 12 62 FC | 	wrlong	arg01, objptr
0d4f8     04 E4 85 F1 | 	sub	objptr, #4
0d4fc     F2 26 02 FB | 	rdlong	local01, objptr
0d500     4A 00 00 FF 
0d504     7C E4 85 F1 | 	sub	objptr, ##38012
0d508                 | LR__1050
0d508     4A 00 00 FF 
0d50c     80 E4 05 F1 | 	add	objptr, ##38016
0d510     F2 FA 01 FB | 	rdlong	result1, objptr
0d514     4A 00 00 FF 
0d518     80 E4 85 F1 | 	sub	objptr, ##38016
0d51c     13 FB 51 F2 | 	cmps	result1, local01 wc
0d520     98 00 90 3D |  if_ae	jmp	#LR__1051
0d524     4A 00 00 FF 
0d528     80 E4 05 F1 | 	add	objptr, ##38016
0d52c     F2 FA 01 FB | 	rdlong	result1, objptr
0d530     FD 28 02 F6 | 	mov	local02, result1
0d534     01 28 66 F0 | 	shl	local02, #1
0d538     FD 28 02 F1 | 	add	local02, result1
0d53c     02 28 66 F0 | 	shl	local02, #2
0d540     03 00 00 FF 
0d544     04 E4 85 F1 | 	sub	objptr, ##1540
0d548     F2 28 02 F1 | 	add	local02, objptr
0d54c     08 28 06 F1 | 	add	local02, #8
0d550     14 29 02 FB | 	rdlong	local02, local02
0d554     14 29 E2 F8 | 	getbyte	local02, local02, #0
0d558     02 28 66 F0 | 	shl	local02, #2
0d55c     04 00 00 FF 
0d560     1C E4 85 F1 | 	sub	objptr, ##2076
0d564     F2 28 02 F1 | 	add	local02, objptr
0d568     14 29 02 FB | 	rdlong	local02, local02
0d56c     14 2B 02 F6 | 	mov	local03, local02
0d570     13 28 46 F7 | 	zerox	local02, #19
0d574     14 2A 46 F0 | 	shr	local03, #20
0d578     02 2A 66 F0 | 	shl	local03, #2
0d57c     ED 2A 02 F1 | 	add	local03, __methods__
0d580     15 2B 02 FB | 	rdlong	local03, local03
0d584     43 00 00 FF 
0d588     60 E4 85 F1 | 	sub	objptr, ##34400
0d58c     F2 2C 02 F6 | 	mov	local04, objptr
0d590     14 E5 01 F6 | 	mov	objptr, local02
0d594     2D 2A 62 FD | 	call	local03
0d598     16 E5 01 F6 | 	mov	objptr, local04
0d59c     4A 00 00 FF 
0d5a0     80 E4 05 F1 | 	add	objptr, ##38016
0d5a4     F2 2C 02 FB | 	rdlong	local04, objptr
0d5a8     01 2C 06 F1 | 	add	local04, #1
0d5ac     F2 2C 62 FC | 	wrlong	local04, objptr
0d5b0     4A 00 00 FF 
0d5b4     80 E4 85 F1 | 	sub	objptr, ##38016
0d5b8     4C FF 9F FD | 	jmp	#LR__1050
0d5bc                 | LR__1051
0d5bc                 | ' return runptr2
0d5bc     50 00 00 FF 
0d5c0     BC E4 05 F1 | 	add	objptr, ##41148
0d5c4     F2 FA 01 FB | 	rdlong	result1, objptr
0d5c8     50 00 00 FF 
0d5cc     BC E4 85 F1 | 	sub	objptr, ##41148
0d5d0     A7 F0 03 F6 | 	mov	ptra, fp
0d5d4     B2 00 A0 FD | 	call	#popregs_
0d5d8                 | _execute_line_ret
0d5d8     2D 00 64 FD | 	ret
0d5dc                 | 
0d5dc                 | ' 
0d5dc                 | ' 
0d5dc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d5dc                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d5dc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d5dc                 | ' 
0d5dc                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d5dc                 | ' 
0d5dc                 | ' function pop() as expr_result
0d5dc                 | _pop
0d5dc                 | ' if stackpointer=0 then
0d5dc     43 00 00 FF 
0d5e0     58 E4 05 F1 | 	add	objptr, ##34392
0d5e4     F2 FA 09 FB | 	rdlong	result1, objptr wz
0d5e8     43 00 00 FF 
0d5ec     58 E4 85 F1 | 	sub	objptr, ##34392
0d5f0     FF 04 06 A6 |  if_e	mov	_var03, #255
0d5f4     18 00 06 A6 |  if_e	mov	_var01, #24
0d5f8     68 00 90 AD |  if_e	jmp	#LR__1060
0d5fc     43 00 00 FF 
0d600     58 E4 05 F1 | 	add	objptr, ##34392
0d604     F2 FA 01 FB | 	rdlong	result1, objptr
0d608     01 FA 85 F1 | 	sub	result1, #1
0d60c     F2 FA 61 FC | 	wrlong	result1, objptr
0d610     FD FE 01 F6 | 	mov	result3, result1
0d614     01 FE 65 F0 | 	shl	result3, #1
0d618     FD FE 01 F1 | 	add	result3, result1
0d61c     02 FE 65 F0 | 	shl	result3, #2
0d620     0C 00 00 FF 
0d624     0C E4 85 F1 | 	sub	objptr, ##6156
0d628     F2 FE 01 F1 | 	add	result3, objptr
0d62c     FF 00 02 FB | 	rdlong	_var01, result3
0d630     04 FE 05 F1 | 	add	result3, #4
0d634     FF FE 01 FB | 	rdlong	result3, result3
0d638     FD FC 01 F6 | 	mov	result2, result1
0d63c     01 FC 65 F0 | 	shl	result2, #1
0d640     FD FC 01 F1 | 	add	result2, result1
0d644     02 FC 65 F0 | 	shl	result2, #2
0d648     F2 FC 01 F1 | 	add	result2, objptr
0d64c     08 FC 05 F1 | 	add	result2, #8
0d650     FE FA 01 FB | 	rdlong	result1, result2
0d654     FF 02 02 F6 | 	mov	_var02, result3
0d658     FD 04 02 F6 | 	mov	_var03, result1
0d65c     37 00 00 FF 
0d660     4C E4 85 F1 | 	sub	objptr, ##28236
0d664                 | LR__1060
0d664                 | ' return t1
0d664     01 FD 01 F6 | 	mov	result2, _var02
0d668     02 FF 01 F6 | 	mov	result3, _var03
0d66c     00 FB 01 F6 | 	mov	result1, _var01
0d670                 | _pop_ret
0d670     2D 00 64 FD | 	ret
0d674                 | 
0d674                 | ' 
0d674                 | ' sub push(t1 as expr_result )
0d674                 | _push
0d674                 | ' if stackpointer<maxstack then 
0d674     43 00 00 FF 
0d678     58 E4 05 F1 | 	add	objptr, ##34392
0d67c     F2 00 02 FB | 	rdlong	_var01, objptr
0d680     43 00 00 FF 
0d684     58 E4 85 F1 | 	sub	objptr, ##34392
0d688     01 00 00 FF 
0d68c     00 00 56 F2 | 	cmps	_var01, ##512 wc
0d690     BC 00 90 3D |  if_ae	jmp	#LR__1070
0d694     09 01 02 FB | 	rdlong	_var01, arg01
0d698     04 12 06 F1 | 	add	arg01, #4
0d69c     09 03 02 FB | 	rdlong	_var02, arg01
0d6a0     04 12 06 F1 | 	add	arg01, #4
0d6a4     09 13 02 FB | 	rdlong	arg01, arg01
0d6a8     43 00 00 FF 
0d6ac     58 E4 05 F1 | 	add	objptr, ##34392
0d6b0     F2 04 02 FB | 	rdlong	_var03, objptr
0d6b4     02 07 02 F6 | 	mov	_var04, _var03
0d6b8     01 06 66 F0 | 	shl	_var04, #1
0d6bc     02 07 02 F1 | 	add	_var04, _var03
0d6c0     02 06 66 F0 | 	shl	_var04, #2
0d6c4     0C 00 00 FF 
0d6c8     0C E4 85 F1 | 	sub	objptr, ##6156
0d6cc     F2 06 02 F1 | 	add	_var04, objptr
0d6d0     03 01 62 FC | 	wrlong	_var01, _var04
0d6d4     0C 00 00 FF 
0d6d8     0C E4 05 F1 | 	add	objptr, ##6156
0d6dc     F2 06 02 FB | 	rdlong	_var04, objptr
0d6e0     03 05 02 F6 | 	mov	_var03, _var04
0d6e4     01 04 66 F0 | 	shl	_var03, #1
0d6e8     03 05 02 F1 | 	add	_var03, _var04
0d6ec     02 04 66 F0 | 	shl	_var03, #2
0d6f0     0C 00 00 FF 
0d6f4     0C E4 85 F1 | 	sub	objptr, ##6156
0d6f8     F2 04 02 F1 | 	add	_var03, objptr
0d6fc     04 04 06 F1 | 	add	_var03, #4
0d700     02 03 62 FC | 	wrlong	_var02, _var03
0d704     0C 00 00 FF 
0d708     0C E4 05 F1 | 	add	objptr, ##6156
0d70c     F2 06 02 FB | 	rdlong	_var04, objptr
0d710     03 05 02 F6 | 	mov	_var03, _var04
0d714     01 04 66 F0 | 	shl	_var03, #1
0d718     03 05 02 F1 | 	add	_var03, _var04
0d71c     02 04 66 F0 | 	shl	_var03, #2
0d720     0C 00 00 FF 
0d724     0C E4 85 F1 | 	sub	objptr, ##6156
0d728     F2 04 02 F1 | 	add	_var03, objptr
0d72c     08 04 06 F1 | 	add	_var03, #8
0d730     02 13 62 FC | 	wrlong	arg01, _var03
0d734     0C 00 00 FF 
0d738     0C E4 05 F1 | 	add	objptr, ##6156
0d73c     F2 00 02 FB | 	rdlong	_var01, objptr
0d740     01 00 06 F1 | 	add	_var01, #1
0d744     F2 00 62 FC | 	wrlong	_var01, objptr
0d748     43 00 00 FF 
0d74c     58 E4 85 F1 | 	sub	objptr, ##34392
0d750                 | LR__1070
0d750                 | _push_ret
0d750     2D 00 64 FD | 	ret
0d754                 | 
0d754                 | ' 
0d754                 | ' ' -------------------------------- Runtime converting functions
0d754                 | ' 
0d754                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d754                 | ' 
0d754                 | ' function  convertstring(psaddr as ulong) as string
0d754                 | _convertstring
0d754     04 4A 05 F6 | 	mov	COUNT_, #4
0d758     A8 00 A0 FD | 	call	#pushregs_
0d75c     09 27 02 F6 | 	mov	local01, arg01
0d760     E8 5A B1 FD | 	call	#_pslpeek
0d764     FD 28 02 F6 | 	mov	local02, result1
0d768     B6 01 00 FF 
0d76c     05 2A 06 F6 | 	mov	local03, ##@LR__5835
0d770                 | ' l=pslpeek(psaddr) 
0d770                 | ' s="" 
0d770                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d770     01 2C 06 F6 | 	mov	local04, #1
0d774     01 28 06 F1 | 	add	local02, #1
0d778                 | LR__1080
0d778     14 2D 52 F2 | 	cmps	local04, local02 wc
0d77c     30 00 90 3D |  if_ae	jmp	#LR__1081
0d780     13 13 02 F6 | 	mov	arg01, local01
0d784     03 12 06 F1 | 	add	arg01, #3
0d788     16 13 02 F1 | 	add	arg01, local04
0d78c     64 5A B1 FD | 	call	#_pspeek
0d790     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0d794     18 B4 B1 FD | 	call	#__system__Chr_S
0d798     FD 14 02 F6 | 	mov	arg02, result1
0d79c     15 13 02 F6 | 	mov	arg01, local03
0d7a0     24 92 B1 FD | 	call	#__system___string_concat
0d7a4     FD 2A 02 F6 | 	mov	local03, result1
0d7a8     01 2C 06 F1 | 	add	local04, #1
0d7ac     C8 FF 9F FD | 	jmp	#LR__1080
0d7b0                 | LR__1081
0d7b0                 | ' return s
0d7b0     15 FB 01 F6 | 	mov	result1, local03
0d7b4     A7 F0 03 F6 | 	mov	ptra, fp
0d7b8     B2 00 A0 FD | 	call	#popregs_
0d7bc                 | _convertstring_ret
0d7bc     2D 00 64 FD | 	ret
0d7c0                 | 
0d7c0                 | ' 
0d7c0                 | ' ' converts a variable to an integer
0d7c0                 | ' 
0d7c0                 | ' function converttoint (t1 as expr_result) as integer 
0d7c0                 | _converttoint
0d7c0     02 4A 05 F6 | 	mov	COUNT_, #2
0d7c4     A8 00 A0 FD | 	call	#pushregs_
0d7c8     09 27 02 F6 | 	mov	local01, arg01
0d7cc                 | ' 
0d7cc                 | ' select case t1.result_type
0d7cc     08 26 06 F1 | 	add	local01, #8
0d7d0     13 29 02 FB | 	rdlong	local02, local01
0d7d4     08 26 86 F1 | 	sub	local01, #8
0d7d8     1C 28 0E F2 | 	cmp	local02, #28 wz
0d7dc     2C 00 90 AD |  if_e	jmp	#LR__1090
0d7e0     1D 28 0E F2 | 	cmp	local02, #29 wz
0d7e4     2C 00 90 AD |  if_e	jmp	#LR__1091
0d7e8     1E 28 0E F2 | 	cmp	local02, #30 wz
0d7ec     2C 00 90 AD |  if_e	jmp	#LR__1092
0d7f0     1F 28 0E F2 | 	cmp	local02, #31 wz
0d7f4     34 00 90 AD |  if_e	jmp	#LR__1093
0d7f8     2B 28 0E F2 | 	cmp	local02, #43 wz
0d7fc     44 00 90 AD |  if_e	jmp	#LR__1094
0d800     2C 28 0E F2 | 	cmp	local02, #44 wz
0d804     5C 00 90 AD |  if_e	jmp	#LR__1095
0d808     60 00 90 FD | 	jmp	#LR__1096
0d80c                 | LR__1090
0d80c     13 FB 01 FB | 	rdlong	result1, local01
0d810     5C 00 90 FD | 	jmp	#LR__1097
0d814                 | LR__1091
0d814     13 FB 01 FB | 	rdlong	result1, local01
0d818     54 00 90 FD | 	jmp	#LR__1097
0d81c                 | LR__1092
0d81c     13 13 02 FB | 	rdlong	arg01, local01
0d820     01 14 06 F6 | 	mov	arg02, #1
0d824     88 C4 B1 FD | 	call	#__system___float_tointeger
0d828     44 00 90 FD | 	jmp	#LR__1097
0d82c                 | LR__1093
0d82c     13 13 02 FB | 	rdlong	arg01, local01
0d830     C0 C7 B1 FD | 	call	#__system____builtin_atof
0d834     FD 12 02 F6 | 	mov	arg01, result1
0d838     01 14 06 F6 | 	mov	arg02, #1
0d83c     70 C4 B1 FD | 	call	#__system___float_tointeger
0d840     2C 00 90 FD | 	jmp	#LR__1097
0d844                 | LR__1094
0d844     13 13 02 FB | 	rdlong	arg01, local01
0d848     08 FF BF FD | 	call	#_convertstring
0d84c     FD 12 02 F6 | 	mov	arg01, result1
0d850     A0 C7 B1 FD | 	call	#__system____builtin_atof
0d854     FD 12 02 F6 | 	mov	arg01, result1
0d858     01 14 06 F6 | 	mov	arg02, #1
0d85c     50 C4 B1 FD | 	call	#__system___float_tointeger
0d860     0C 00 90 FD | 	jmp	#LR__1097
0d864                 | LR__1095
0d864     13 FB 01 FB | 	rdlong	result1, local01
0d868     04 00 90 FD | 	jmp	#LR__1097
0d86c                 | LR__1096
0d86c     00 FA 05 F6 | 	mov	result1, #0
0d870                 | LR__1097
0d870     A7 F0 03 F6 | 	mov	ptra, fp
0d874     B2 00 A0 FD | 	call	#popregs_
0d878                 | _converttoint_ret
0d878     2D 00 64 FD | 	ret
0d87c                 | 
0d87c                 | ' 
0d87c                 | ' ' converts a variable to float
0d87c                 | ' 
0d87c                 | ' function converttofloat (t1 as expr_result) as single
0d87c                 | _converttofloat
0d87c     03 4A 05 F6 | 	mov	COUNT_, #3
0d880     A8 00 A0 FD | 	call	#pushregs_
0d884     09 27 02 F6 | 	mov	local01, arg01
0d888                 | ' 
0d888                 | ' select case t1.result_type
0d888     08 26 06 F1 | 	add	local01, #8
0d88c     13 29 02 FB | 	rdlong	local02, local01
0d890     08 26 86 F1 | 	sub	local01, #8
0d894     1C 28 0E F2 | 	cmp	local02, #28 wz
0d898     24 00 90 AD |  if_e	jmp	#LR__1100
0d89c     1D 28 0E F2 | 	cmp	local02, #29 wz
0d8a0     38 00 90 AD |  if_e	jmp	#LR__1101
0d8a4     1E 28 0E F2 | 	cmp	local02, #30 wz
0d8a8     3C 00 90 AD |  if_e	jmp	#LR__1102
0d8ac     1F 28 0E F2 | 	cmp	local02, #31 wz
0d8b0     3C 00 90 AD |  if_e	jmp	#LR__1103
0d8b4     2B 28 0E F2 | 	cmp	local02, #43 wz
0d8b8     40 00 90 AD |  if_e	jmp	#LR__1104
0d8bc     50 00 90 FD | 	jmp	#LR__1105
0d8c0                 | LR__1100
0d8c0     13 13 02 FB | 	rdlong	arg01, local01
0d8c4     09 13 52 F6 | 	abs	arg01, arg01 wc
0d8c8     1F 2A C6 C9 |  if_b	decod	local03, #31
0d8cc     00 2A 06 36 |  if_ae	mov	local03, #0
0d8d0     10 BB B1 FD | 	call	#__system___float_fromuns
0d8d4     15 FB 61 F5 | 	xor	result1, local03
0d8d8     38 00 90 FD | 	jmp	#LR__1106
0d8dc                 | LR__1101
0d8dc     13 13 02 FB | 	rdlong	arg01, local01
0d8e0     00 BB B1 FD | 	call	#__system___float_fromuns
0d8e4     2C 00 90 FD | 	jmp	#LR__1106
0d8e8                 | LR__1102
0d8e8     13 FB 01 FB | 	rdlong	result1, local01
0d8ec     24 00 90 FD | 	jmp	#LR__1106
0d8f0                 | LR__1103
0d8f0     13 13 02 FB | 	rdlong	arg01, local01
0d8f4     FC C6 B1 FD | 	call	#__system____builtin_atof
0d8f8     18 00 90 FD | 	jmp	#LR__1106
0d8fc                 | LR__1104
0d8fc     13 13 02 FB | 	rdlong	arg01, local01
0d900     50 FE BF FD | 	call	#_convertstring
0d904     FD 12 02 F6 | 	mov	arg01, result1
0d908     E8 C6 B1 FD | 	call	#__system____builtin_atof
0d90c     04 00 90 FD | 	jmp	#LR__1106
0d910                 | LR__1105
0d910     00 FA 05 F6 | 	mov	result1, #0
0d914                 | LR__1106
0d914     A7 F0 03 F6 | 	mov	ptra, fp
0d918     B2 00 A0 FD | 	call	#popregs_
0d91c                 | _converttofloat_ret
0d91c     2D 00 64 FD | 	ret
0d920                 | 
0d920                 | ' 
0d920                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d920                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d920                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d920                 | ' 
0d920                 | ' 
0d920                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d920                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d920                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d920                 | ' 
0d920                 | ' '-------------------- abs
0d920                 | ' 
0d920                 | ' sub do_abs
0d920                 | _do_abs
0d920     01 4A 05 F6 | 	mov	COUNT_, #1
0d924     A8 00 A0 FD | 	call	#pushregs_
0d928     0C F0 07 F1 | 	add	ptra, #12
0d92c     AC FC BF FD | 	call	#_pop
0d930     FF 26 02 F6 | 	mov	local01, result3
0d934     A7 FA 61 FC | 	wrlong	result1, fp
0d938     04 4E 05 F1 | 	add	fp, #4
0d93c     A7 FC 61 FC | 	wrlong	result2, fp
0d940     04 4E 05 F1 | 	add	fp, #4
0d944     A7 26 62 FC | 	wrlong	local01, fp
0d948                 | ' 
0d948                 | ' t1=pop()
0d948                 | ' if t1.result_type=result_int then 
0d948     08 4E 85 F1 | 	sub	fp, #8
0d94c     1C 26 0E F2 | 	cmp	local01, #28 wz
0d950     A7 12 02 AB |  if_e	rdlong	arg01, fp
0d954     09 27 42 A6 |  if_e	abs	local01, arg01
0d958     A7 26 62 AC |  if_e	wrlong	local01, fp
0d95c     2C 00 90 AD |  if_e	jmp	#LR__1110
0d960     08 4E 05 F1 | 	add	fp, #8
0d964     A7 26 02 FB | 	rdlong	local01, fp
0d968     08 4E 85 F1 | 	sub	fp, #8
0d96c     1E 26 0E F2 | 	cmp	local01, #30 wz
0d970     A7 FA 01 AB |  if_e	rdlong	result1, fp
0d974     1F FA 05 A4 |  if_e	bitl	result1, #31
0d978     A7 FA 61 AC |  if_e	wrlong	result1, fp
0d97c     08 4E 05 51 |  if_ne	add	fp, #8
0d980     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d984     08 4E 85 51 |  if_ne	sub	fp, #8
0d988     A7 50 68 5C |  if_ne	wrlong	#40, fp
0d98c                 | LR__1110
0d98c     A7 12 02 F6 | 	mov	arg01, fp
0d990     E0 FC BF FD | 	call	#_push
0d994     A7 F0 03 F6 | 	mov	ptra, fp
0d998     B2 00 A0 FD | 	call	#popregs_
0d99c                 | _do_abs_ret
0d99c     2D 00 64 FD | 	ret
0d9a0                 | 
0d9a0                 | ' 
0d9a0                 | ' '-------------------- acos
0d9a0                 | ' 
0d9a0                 | ' sub do_acos
0d9a0                 | _do_acos
0d9a0     01 4A 05 F6 | 	mov	COUNT_, #1
0d9a4     A8 00 A0 FD | 	call	#pushregs_
0d9a8     10 F0 07 F1 | 	add	ptra, #16
0d9ac     4A 00 00 FF 
0d9b0     80 E4 05 F1 | 	add	objptr, ##38016
0d9b4     F2 26 02 FB | 	rdlong	local01, objptr
0d9b8     13 17 02 F6 | 	mov	arg03, local01
0d9bc     01 16 66 F0 | 	shl	arg03, #1
0d9c0     13 17 02 F1 | 	add	arg03, local01
0d9c4     02 16 66 F0 | 	shl	arg03, #2
0d9c8     03 00 00 FF 
0d9cc     04 E4 85 F1 | 	sub	objptr, ##1540
0d9d0     F2 16 02 F1 | 	add	arg03, objptr
0d9d4     0B 17 02 FB | 	rdlong	arg03, arg03
0d9d8     0C 4E 05 F1 | 	add	fp, #12
0d9dc     A7 16 62 FC | 	wrlong	arg03, fp
0d9e0                 | ' 
0d9e0                 | ' numpar=compiledline(lineptr_e).result.uresult
0d9e0                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0d9e0     0C 4E 85 F1 | 	sub	fp, #12
0d9e4     02 16 16 F2 | 	cmp	arg03, #2 wc
0d9e8     47 00 00 FF 
0d9ec     7C E4 85 F1 | 	sub	objptr, ##36476
0d9f0     0C 4E 05 C1 |  if_b	add	fp, #12
0d9f4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d9f8     0C 4E 85 C1 |  if_b	sub	fp, #12
0d9fc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1120
0da00     00 12 06 F6 | 	mov	arg01, #0
0da04     08 EC B1 FD | 	call	#__system___getiolock_0606
0da08     FD 12 02 F6 | 	mov	arg01, result1
0da0c     5C 8F B1 FD | 	call	#__system___lockmem
0da10     B6 01 00 FF 
0da14     06 14 06 F6 | 	mov	arg02, ##@LR__5836
0da18     00 12 06 F6 | 	mov	arg01, #0
0da1c     00 16 06 F6 | 	mov	arg03, #0
0da20     40 9C B1 FD | 	call	#__system___basic_print_string
0da24     00 12 06 F6 | 	mov	arg01, #0
0da28     E4 EB B1 FD | 	call	#__system___getiolock_0606
0da2c     FD 00 68 FC | 	wrlong	#0, result1
0da30     27 12 06 F6 | 	mov	arg01, #39
0da34     00 14 06 F6 | 	mov	arg02, #0
0da38     40 55 B1 FD | 	call	#_printerror
0da3c     64 00 90 FD | 	jmp	#LR__1121
0da40                 | LR__1120
0da40     98 FB BF FD | 	call	#_pop
0da44     FF 26 02 F6 | 	mov	local01, result3
0da48     A7 FA 61 FC | 	wrlong	result1, fp
0da4c     04 4E 05 F1 | 	add	fp, #4
0da50     A7 FC 61 FC | 	wrlong	result2, fp
0da54     04 4E 05 F1 | 	add	fp, #4
0da58     A7 26 62 FC | 	wrlong	local01, fp
0da5c     08 4E 85 F1 | 	sub	fp, #8
0da60     A7 12 02 F6 | 	mov	arg01, fp
0da64     14 FE BF FD | 	call	#_converttofloat
0da68     FD 12 02 F6 | 	mov	arg01, result1
0da6c     B8 C8 B1 FD | 	call	#__system____builtin_acosf
0da70     FD 12 02 F6 | 	mov	arg01, result1
0da74     52 00 00 FF 
0da78     AC E4 05 F1 | 	add	objptr, ##42156
0da7c     F2 14 02 FB | 	rdlong	arg02, objptr
0da80     52 00 00 FF 
0da84     AC E4 85 F1 | 	sub	objptr, ##42156
0da88     5C BD B1 FD | 	call	#__system___float_mul
0da8c     A7 FA 61 FC | 	wrlong	result1, fp
0da90     08 4E 05 F1 | 	add	fp, #8
0da94     A7 3C 68 FC | 	wrlong	#30, fp
0da98     08 4E 85 F1 | 	sub	fp, #8
0da9c     A7 12 02 F6 | 	mov	arg01, fp
0daa0     D0 FB BF FD | 	call	#_push
0daa4                 | LR__1121
0daa4     A7 F0 03 F6 | 	mov	ptra, fp
0daa8     B2 00 A0 FD | 	call	#popregs_
0daac                 | _do_acos_ret
0daac     2D 00 64 FD | 	ret
0dab0                 | 
0dab0                 | ' 
0dab0                 | ' '-------------------- asc
0dab0                 | ' 
0dab0                 | ' sub do_asc
0dab0                 | _do_asc
0dab0     01 4A 05 F6 | 	mov	COUNT_, #1
0dab4     A8 00 A0 FD | 	call	#pushregs_
0dab8     14 F0 07 F1 | 	add	ptra, #20
0dabc     4A 00 00 FF 
0dac0     80 E4 05 F1 | 	add	objptr, ##38016
0dac4     F2 26 02 FB | 	rdlong	local01, objptr
0dac8     13 17 02 F6 | 	mov	arg03, local01
0dacc     01 16 66 F0 | 	shl	arg03, #1
0dad0     13 17 02 F1 | 	add	arg03, local01
0dad4     02 16 66 F0 | 	shl	arg03, #2
0dad8     03 00 00 FF 
0dadc     04 E4 85 F1 | 	sub	objptr, ##1540
0dae0     F2 16 02 F1 | 	add	arg03, objptr
0dae4     0B 17 02 FB | 	rdlong	arg03, arg03
0dae8     0C 4E 05 F1 | 	add	fp, #12
0daec     A7 16 62 FC | 	wrlong	arg03, fp
0daf0                 | ' 
0daf0                 | ' numpar=compiledline(lineptr_e).result.uresult
0daf0                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0daf0     0C 4E 85 F1 | 	sub	fp, #12
0daf4     02 16 16 F2 | 	cmp	arg03, #2 wc
0daf8     47 00 00 FF 
0dafc     7C E4 85 F1 | 	sub	objptr, ##36476
0db00     0C 4E 05 C1 |  if_b	add	fp, #12
0db04     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0db08     0C 4E 85 C1 |  if_b	sub	fp, #12
0db0c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1130
0db10     00 12 06 F6 | 	mov	arg01, #0
0db14     F8 EA B1 FD | 	call	#__system___getiolock_0606
0db18     FD 12 02 F6 | 	mov	arg01, result1
0db1c     4C 8E B1 FD | 	call	#__system___lockmem
0db20     B6 01 00 FF 
0db24     0D 14 06 F6 | 	mov	arg02, ##@LR__5837
0db28     00 12 06 F6 | 	mov	arg01, #0
0db2c     00 16 06 F6 | 	mov	arg03, #0
0db30     30 9B B1 FD | 	call	#__system___basic_print_string
0db34     00 12 06 F6 | 	mov	arg01, #0
0db38     D4 EA B1 FD | 	call	#__system___getiolock_0606
0db3c     FD 00 68 FC | 	wrlong	#0, result1
0db40     27 12 06 F6 | 	mov	arg01, #39
0db44     00 14 06 F6 | 	mov	arg02, #0
0db48     30 54 B1 FD | 	call	#_printerror
0db4c     B4 00 90 FD | 	jmp	#LR__1133
0db50                 | LR__1130
0db50     88 FA BF FD | 	call	#_pop
0db54     FF 16 02 F6 | 	mov	arg03, result3
0db58     A7 FA 61 FC | 	wrlong	result1, fp
0db5c     04 4E 05 F1 | 	add	fp, #4
0db60     A7 FC 61 FC | 	wrlong	result2, fp
0db64     04 4E 05 F1 | 	add	fp, #4
0db68     A7 16 62 FC | 	wrlong	arg03, fp
0db6c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0db6c     08 4E 85 F1 | 	sub	fp, #8
0db70     2B 16 0E F2 | 	cmp	arg03, #43 wz
0db74     18 00 90 5D |  if_ne	jmp	#LR__1131
0db78     A7 12 02 FB | 	rdlong	arg01, fp
0db7c     D4 FB BF FD | 	call	#_convertstring
0db80     A7 FA 61 FC | 	wrlong	result1, fp
0db84     08 4E 05 F1 | 	add	fp, #8
0db88     A7 3E 68 FC | 	wrlong	#31, fp
0db8c     08 4E 85 F1 | 	sub	fp, #8
0db90                 | LR__1131
0db90                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0db90     08 4E 05 F1 | 	add	fp, #8
0db94     A7 16 02 FB | 	rdlong	arg03, fp
0db98     08 4E 85 F1 | 	sub	fp, #8
0db9c     1F 16 0E F2 | 	cmp	arg03, #31 wz
0dba0     40 00 90 AD |  if_e	jmp	#LR__1132
0dba4     00 12 06 F6 | 	mov	arg01, #0
0dba8     64 EA B1 FD | 	call	#__system___getiolock_0606
0dbac     FD 12 02 F6 | 	mov	arg01, result1
0dbb0     B8 8D B1 FD | 	call	#__system___lockmem
0dbb4     B6 01 00 FF 
0dbb8     13 14 06 F6 | 	mov	arg02, ##@LR__5838
0dbbc     00 12 06 F6 | 	mov	arg01, #0
0dbc0     00 16 06 F6 | 	mov	arg03, #0
0dbc4     9C 9A B1 FD | 	call	#__system___basic_print_string
0dbc8     00 12 06 F6 | 	mov	arg01, #0
0dbcc     40 EA B1 FD | 	call	#__system___getiolock_0606
0dbd0     FD 00 68 FC | 	wrlong	#0, result1
0dbd4     0F 12 06 F6 | 	mov	arg01, #15
0dbd8     00 14 06 F6 | 	mov	arg02, #0
0dbdc     9C 53 B1 FD | 	call	#_printerror
0dbe0     20 00 90 FD | 	jmp	#LR__1133
0dbe4                 | LR__1132
0dbe4     A7 26 02 FB | 	rdlong	local01, fp
0dbe8     13 27 C2 FA | 	rdbyte	local01, local01
0dbec     A7 26 62 FC | 	wrlong	local01, fp
0dbf0     08 4E 05 F1 | 	add	fp, #8
0dbf4     A7 38 68 FC | 	wrlong	#28, fp
0dbf8     08 4E 85 F1 | 	sub	fp, #8
0dbfc     A7 12 02 F6 | 	mov	arg01, fp
0dc00     70 FA BF FD | 	call	#_push
0dc04                 | LR__1133
0dc04     A7 F0 03 F6 | 	mov	ptra, fp
0dc08     B2 00 A0 FD | 	call	#popregs_
0dc0c                 | _do_asc_ret
0dc0c     2D 00 64 FD | 	ret
0dc10                 | 
0dc10                 | ' 
0dc10                 | ' '-------------------- asin
0dc10                 | ' 
0dc10                 | ' sub do_asin
0dc10                 | _do_asin
0dc10     01 4A 05 F6 | 	mov	COUNT_, #1
0dc14     A8 00 A0 FD | 	call	#pushregs_
0dc18     10 F0 07 F1 | 	add	ptra, #16
0dc1c     4A 00 00 FF 
0dc20     80 E4 05 F1 | 	add	objptr, ##38016
0dc24     F2 26 02 FB | 	rdlong	local01, objptr
0dc28     13 17 02 F6 | 	mov	arg03, local01
0dc2c     01 16 66 F0 | 	shl	arg03, #1
0dc30     13 17 02 F1 | 	add	arg03, local01
0dc34     02 16 66 F0 | 	shl	arg03, #2
0dc38     03 00 00 FF 
0dc3c     04 E4 85 F1 | 	sub	objptr, ##1540
0dc40     F2 16 02 F1 | 	add	arg03, objptr
0dc44     0B 17 02 FB | 	rdlong	arg03, arg03
0dc48     0C 4E 05 F1 | 	add	fp, #12
0dc4c     A7 16 62 FC | 	wrlong	arg03, fp
0dc50                 | ' 
0dc50                 | ' numpar=compiledline(lineptr_e).result.uresult
0dc50                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0dc50     0C 4E 85 F1 | 	sub	fp, #12
0dc54     02 16 16 F2 | 	cmp	arg03, #2 wc
0dc58     47 00 00 FF 
0dc5c     7C E4 85 F1 | 	sub	objptr, ##36476
0dc60     0C 4E 05 C1 |  if_b	add	fp, #12
0dc64     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dc68     0C 4E 85 C1 |  if_b	sub	fp, #12
0dc6c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1140
0dc70     00 12 06 F6 | 	mov	arg01, #0
0dc74     98 E9 B1 FD | 	call	#__system___getiolock_0606
0dc78     FD 12 02 F6 | 	mov	arg01, result1
0dc7c     EC 8C B1 FD | 	call	#__system___lockmem
0dc80     B6 01 00 FF 
0dc84     19 14 06 F6 | 	mov	arg02, ##@LR__5839
0dc88     00 12 06 F6 | 	mov	arg01, #0
0dc8c     00 16 06 F6 | 	mov	arg03, #0
0dc90     D0 99 B1 FD | 	call	#__system___basic_print_string
0dc94     00 12 06 F6 | 	mov	arg01, #0
0dc98     74 E9 B1 FD | 	call	#__system___getiolock_0606
0dc9c     FD 00 68 FC | 	wrlong	#0, result1
0dca0     27 12 06 F6 | 	mov	arg01, #39
0dca4     00 14 06 F6 | 	mov	arg02, #0
0dca8     D0 52 B1 FD | 	call	#_printerror
0dcac     64 00 90 FD | 	jmp	#LR__1141
0dcb0                 | LR__1140
0dcb0     28 F9 BF FD | 	call	#_pop
0dcb4     FF 26 02 F6 | 	mov	local01, result3
0dcb8     A7 FA 61 FC | 	wrlong	result1, fp
0dcbc     04 4E 05 F1 | 	add	fp, #4
0dcc0     A7 FC 61 FC | 	wrlong	result2, fp
0dcc4     04 4E 05 F1 | 	add	fp, #4
0dcc8     A7 26 62 FC | 	wrlong	local01, fp
0dccc     08 4E 85 F1 | 	sub	fp, #8
0dcd0     A7 12 02 F6 | 	mov	arg01, fp
0dcd4     A4 FB BF FD | 	call	#_converttofloat
0dcd8     FD 12 02 F6 | 	mov	arg01, result1
0dcdc     FC C5 B1 FD | 	call	#__system____builtin_asinf
0dce0     FD 12 02 F6 | 	mov	arg01, result1
0dce4     52 00 00 FF 
0dce8     AC E4 05 F1 | 	add	objptr, ##42156
0dcec     F2 14 02 FB | 	rdlong	arg02, objptr
0dcf0     52 00 00 FF 
0dcf4     AC E4 85 F1 | 	sub	objptr, ##42156
0dcf8     EC BA B1 FD | 	call	#__system___float_mul
0dcfc     A7 FA 61 FC | 	wrlong	result1, fp
0dd00     08 4E 05 F1 | 	add	fp, #8
0dd04     A7 3C 68 FC | 	wrlong	#30, fp
0dd08     08 4E 85 F1 | 	sub	fp, #8
0dd0c     A7 12 02 F6 | 	mov	arg01, fp
0dd10     60 F9 BF FD | 	call	#_push
0dd14                 | LR__1141
0dd14     A7 F0 03 F6 | 	mov	ptra, fp
0dd18     B2 00 A0 FD | 	call	#popregs_
0dd1c                 | _do_asin_ret
0dd1c     2D 00 64 FD | 	ret
0dd20                 | 
0dd20                 | ' 
0dd20                 | ' '-------------------- atn
0dd20                 | ' 
0dd20                 | ' sub do_atn
0dd20                 | _do_atn
0dd20     01 4A 05 F6 | 	mov	COUNT_, #1
0dd24     A8 00 A0 FD | 	call	#pushregs_
0dd28     10 F0 07 F1 | 	add	ptra, #16
0dd2c     4A 00 00 FF 
0dd30     80 E4 05 F1 | 	add	objptr, ##38016
0dd34     F2 26 02 FB | 	rdlong	local01, objptr
0dd38     13 17 02 F6 | 	mov	arg03, local01
0dd3c     01 16 66 F0 | 	shl	arg03, #1
0dd40     13 17 02 F1 | 	add	arg03, local01
0dd44     02 16 66 F0 | 	shl	arg03, #2
0dd48     03 00 00 FF 
0dd4c     04 E4 85 F1 | 	sub	objptr, ##1540
0dd50     F2 16 02 F1 | 	add	arg03, objptr
0dd54     0B 17 02 FB | 	rdlong	arg03, arg03
0dd58     0C 4E 05 F1 | 	add	fp, #12
0dd5c     A7 16 62 FC | 	wrlong	arg03, fp
0dd60                 | ' 
0dd60                 | ' numpar=compiledline(lineptr_e).result.uresult
0dd60                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0dd60     0C 4E 85 F1 | 	sub	fp, #12
0dd64     02 16 16 F2 | 	cmp	arg03, #2 wc
0dd68     47 00 00 FF 
0dd6c     7C E4 85 F1 | 	sub	objptr, ##36476
0dd70     0C 4E 05 C1 |  if_b	add	fp, #12
0dd74     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dd78     0C 4E 85 C1 |  if_b	sub	fp, #12
0dd7c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0dd80     00 12 06 F6 | 	mov	arg01, #0
0dd84     88 E8 B1 FD | 	call	#__system___getiolock_0606
0dd88     FD 12 02 F6 | 	mov	arg01, result1
0dd8c     DC 8B B1 FD | 	call	#__system___lockmem
0dd90     B6 01 00 FF 
0dd94     20 14 06 F6 | 	mov	arg02, ##@LR__5840
0dd98     00 12 06 F6 | 	mov	arg01, #0
0dd9c     00 16 06 F6 | 	mov	arg03, #0
0dda0     C0 98 B1 FD | 	call	#__system___basic_print_string
0dda4     00 12 06 F6 | 	mov	arg01, #0
0dda8     64 E8 B1 FD | 	call	#__system___getiolock_0606
0ddac     FD 00 68 FC | 	wrlong	#0, result1
0ddb0     27 12 06 F6 | 	mov	arg01, #39
0ddb4     00 14 06 F6 | 	mov	arg02, #0
0ddb8     C0 51 B1 FD | 	call	#_printerror
0ddbc     6C 00 90 FD | 	jmp	#LR__1151
0ddc0                 | LR__1150
0ddc0     18 F8 BF FD | 	call	#_pop
0ddc4     FF 26 02 F6 | 	mov	local01, result3
0ddc8     A7 FA 61 FC | 	wrlong	result1, fp
0ddcc     04 4E 05 F1 | 	add	fp, #4
0ddd0     A7 FC 61 FC | 	wrlong	result2, fp
0ddd4     04 4E 05 F1 | 	add	fp, #4
0ddd8     A7 26 62 FC | 	wrlong	local01, fp
0dddc     08 4E 85 F1 | 	sub	fp, #8
0dde0     A7 12 02 F6 | 	mov	arg01, fp
0dde4     94 FA BF FD | 	call	#_converttofloat
0dde8     FD 12 02 F6 | 	mov	arg01, result1
0ddec     00 C0 1F FF 
0ddf0     00 14 06 F6 | 	mov	arg02, ##1065353216
0ddf4     7C C5 B1 FD | 	call	#__system____builtin_atan2f
0ddf8     FD 12 02 F6 | 	mov	arg01, result1
0ddfc     52 00 00 FF 
0de00     AC E4 05 F1 | 	add	objptr, ##42156
0de04     F2 14 02 FB | 	rdlong	arg02, objptr
0de08     52 00 00 FF 
0de0c     AC E4 85 F1 | 	sub	objptr, ##42156
0de10     D4 B9 B1 FD | 	call	#__system___float_mul
0de14     A7 FA 61 FC | 	wrlong	result1, fp
0de18     08 4E 05 F1 | 	add	fp, #8
0de1c     A7 3C 68 FC | 	wrlong	#30, fp
0de20     08 4E 85 F1 | 	sub	fp, #8
0de24     A7 12 02 F6 | 	mov	arg01, fp
0de28     48 F8 BF FD | 	call	#_push
0de2c                 | LR__1151
0de2c     A7 F0 03 F6 | 	mov	ptra, fp
0de30     B2 00 A0 FD | 	call	#popregs_
0de34                 | _do_atn_ret
0de34     2D 00 64 FD | 	ret
0de38                 | 
0de38                 | ' 
0de38                 | ' '-------------------- beep
0de38                 | ' 
0de38                 | ' sub do_beep
0de38                 | _do_beep
0de38     02 4A 05 F6 | 	mov	COUNT_, #2
0de3c     A8 00 A0 FD | 	call	#pushregs_
0de40     20 F0 07 F1 | 	add	ptra, #32
0de44     94 F7 BF FD | 	call	#_pop
0de48     FD 26 02 F6 | 	mov	local01, result1
0de4c     FE 1C 02 F6 | 	mov	arg06, result2
0de50     FF 28 02 F6 | 	mov	local02, result3
0de54     0C 4E 05 F1 | 	add	fp, #12
0de58     A7 26 62 FC | 	wrlong	local01, fp
0de5c     04 4E 05 F1 | 	add	fp, #4
0de60     A7 1C 62 FC | 	wrlong	arg06, fp
0de64     04 4E 05 F1 | 	add	fp, #4
0de68     A7 28 62 FC | 	wrlong	local02, fp
0de6c     14 4E 85 F1 | 	sub	fp, #20
0de70     68 F7 BF FD | 	call	#_pop
0de74     A7 FA 61 FC | 	wrlong	result1, fp
0de78     04 4E 05 F1 | 	add	fp, #4
0de7c     A7 FC 61 FC | 	wrlong	result2, fp
0de80     04 4E 05 F1 | 	add	fp, #4
0de84     A7 FE 61 FC | 	wrlong	result3, fp
0de88                 | ' 
0de88                 | ' t2=pop()
0de88                 | ' t1=pop()
0de88                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0de88     08 4E 85 F1 | 	sub	fp, #8
0de8c     1C FE 0D F2 | 	cmp	result3, #28 wz
0de90     08 4E 05 51 |  if_ne	add	fp, #8
0de94     A7 28 02 5B |  if_ne	rdlong	local02, fp
0de98     08 4E 85 51 |  if_ne	sub	fp, #8
0de9c     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0dea0     A7 26 02 AB |  if_e	rdlong	local01, fp
0dea4     18 4E 05 A1 |  if_e	add	fp, #24
0dea8     A7 26 62 AC |  if_e	wrlong	local01, fp
0deac     18 4E 85 A1 |  if_e	sub	fp, #24
0deb0     14 00 90 AD |  if_e	jmp	#LR__1160
0deb4     A7 12 02 F6 | 	mov	arg01, fp
0deb8     04 F9 BF FD | 	call	#_converttoint
0debc     18 4E 05 F1 | 	add	fp, #24
0dec0     A7 FA 61 FC | 	wrlong	result1, fp
0dec4     18 4E 85 F1 | 	sub	fp, #24
0dec8                 | LR__1160
0dec8     1C 4E 05 F1 | 	add	fp, #28
0decc     A7 FE 48 FC | 	wrbyte	#127, fp
0ded0     01 4E 05 F1 | 	add	fp, #1
0ded4     A7 00 49 FC | 	wrbyte	#128, fp
0ded8     01 4E 85 F1 | 	sub	fp, #1
0dedc     A7 14 02 F6 | 	mov	arg02, fp
0dee0     04 4E 85 F1 | 	sub	fp, #4
0dee4     A7 16 02 FB | 	rdlong	arg03, fp
0dee8     18 4E 85 F1 | 	sub	fp, #24
0deec     01 16 66 F0 | 	shl	arg03, #1
0def0     07 12 06 F6 | 	mov	arg01, #7
0def4     0E 18 C6 F9 | 	decod	arg04, #14
0def8     02 1A 06 F6 | 	mov	arg05, #2
0defc     00 1C 06 F6 | 	mov	arg06, #0
0df00     0B 00 00 FF 
0df04     CC E4 05 F1 | 	add	objptr, ##5836
0df08     BC 86 B1 FD | 	call	#_audio096_spin2_play8
0df0c     0B 00 00 FF 
0df10     CC E4 85 F1 | 	sub	objptr, ##5836
0df14     0C 4E 05 F1 | 	add	fp, #12
0df18     A7 12 02 F6 | 	mov	arg01, fp
0df1c     0C 4E 85 F1 | 	sub	fp, #12
0df20     50 F7 BF FD | 	call	#_push
0df24     E8 E5 B0 FD | 	call	#_do_waitms
0df28     07 12 06 F6 | 	mov	arg01, #7
0df2c     0B 00 00 FF 
0df30     CC E4 05 F1 | 	add	objptr, ##5836
0df34     34 87 B1 FD | 	call	#_audio096_spin2_stop
0df38     0B 00 00 FF 
0df3c     CC E4 85 F1 | 	sub	objptr, ##5836
0df40     A7 F0 03 F6 | 	mov	ptra, fp
0df44     B2 00 A0 FD | 	call	#popregs_
0df48                 | _do_beep_ret
0df48     2D 00 64 FD | 	ret
0df4c                 | 
0df4c                 | ' 
0df4c                 | ' '-------------------- blit
0df4c                 | ' 
0df4c                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0df4c                 | ' sub do_blit
0df4c                 | _do_blit
0df4c     02 4A 05 F6 | 	mov	COUNT_, #2
0df50     A8 00 A0 FD | 	call	#pushregs_
0df54     3C F0 07 F1 | 	add	ptra, #60
0df58     4A 00 00 FF 
0df5c     80 E4 05 F1 | 	add	objptr, ##38016
0df60     F2 26 02 FB | 	rdlong	local01, objptr
0df64     13 25 02 F6 | 	mov	arg10, local01
0df68     01 24 66 F0 | 	shl	arg10, #1
0df6c     13 25 02 F1 | 	add	arg10, local01
0df70     02 24 66 F0 | 	shl	arg10, #2
0df74     03 00 00 FF 
0df78     04 E4 85 F1 | 	sub	objptr, ##1540
0df7c     F2 24 02 F1 | 	add	arg10, objptr
0df80     12 25 02 FB | 	rdlong	arg10, arg10
0df84     38 4E 05 F1 | 	add	fp, #56
0df88     A7 24 62 FC | 	wrlong	arg10, fp
0df8c                 | ' 
0df8c                 | ' numpar=compiledline(lineptr_e).result.uresult
0df8c                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0df8c     38 4E 85 F1 | 	sub	fp, #56
0df90     0A 24 0E F2 | 	cmp	arg10, #10 wz
0df94     47 00 00 FF 
0df98     7C E4 85 F1 | 	sub	objptr, ##36476
0df9c     38 4E 05 51 |  if_ne	add	fp, #56
0dfa0     A7 26 02 5B |  if_ne	rdlong	local01, fp
0dfa4     38 4E 85 51 |  if_ne	sub	fp, #56
0dfa8     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0dfac     50 00 90 AD |  if_e	jmp	#LR__1170
0dfb0     00 12 06 F6 | 	mov	arg01, #0
0dfb4     58 E6 B1 FD | 	call	#__system___getiolock_0606
0dfb8     FD 12 02 F6 | 	mov	arg01, result1
0dfbc     AC 89 B1 FD | 	call	#__system___lockmem
0dfc0     B6 01 00 FF 
0dfc4     26 14 06 F6 | 	mov	arg02, ##@LR__5841
0dfc8     00 12 06 F6 | 	mov	arg01, #0
0dfcc     00 16 06 F6 | 	mov	arg03, #0
0dfd0     90 96 B1 FD | 	call	#__system___basic_print_string
0dfd4     00 12 06 F6 | 	mov	arg01, #0
0dfd8     34 E6 B1 FD | 	call	#__system___getiolock_0606
0dfdc     FD 00 68 FC | 	wrlong	#0, result1
0dfe0     50 00 00 FF 
0dfe4     F0 E4 05 F1 | 	add	objptr, ##41200
0dfe8     F2 14 02 FB | 	rdlong	arg02, objptr
0dfec     50 00 00 FF 
0dff0     F0 E4 85 F1 | 	sub	objptr, ##41200
0dff4     27 12 06 F6 | 	mov	arg01, #39
0dff8     80 4F B1 FD | 	call	#_printerror
0dffc     44 01 90 FD | 	jmp	#LR__1175
0e000                 | LR__1170
0e000                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0e000     38 4E 05 F1 | 	add	fp, #56
0e004     A7 28 02 FB | 	rdlong	local02, fp
0e008     01 28 86 F1 | 	sub	local02, #1
0e00c     04 4E 85 F1 | 	sub	fp, #4
0e010     A7 28 62 FC | 	wrlong	local02, fp
0e014     34 4E 85 F1 | 	sub	fp, #52
0e018                 | LR__1171
0e018     38 4E 05 F1 | 	add	fp, #56
0e01c     A7 26 02 FB | 	rdlong	local01, fp
0e020     01 26 86 F1 | 	sub	local01, #1
0e024     04 4E 85 F1 | 	sub	fp, #4
0e028     A7 24 02 FB | 	rdlong	arg10, fp
0e02c     34 4E 85 F1 | 	sub	fp, #52
0e030     13 25 1A F2 | 	cmp	arg10, local01 wcz
0e034     54 00 90 1D |  if_a	jmp	#LR__1172
0e038     A0 F5 BF FD | 	call	#_pop
0e03c     A7 FA 61 FC | 	wrlong	result1, fp
0e040     04 4E 05 F1 | 	add	fp, #4
0e044     A7 FC 61 FC | 	wrlong	result2, fp
0e048     04 4E 05 F1 | 	add	fp, #4
0e04c     A7 FE 61 FC | 	wrlong	result3, fp
0e050     2C 4E 05 F1 | 	add	fp, #44
0e054     A7 28 02 FB | 	rdlong	local02, fp
0e058     02 28 66 F0 | 	shl	local02, #2
0e05c     28 4E 85 F1 | 	sub	fp, #40
0e060     A7 28 02 F1 | 	add	local02, fp
0e064     0C 4E 85 F1 | 	sub	fp, #12
0e068     A7 12 02 F6 | 	mov	arg01, fp
0e06c     50 F7 BF FD | 	call	#_converttoint
0e070     14 FB 61 FC | 	wrlong	result1, local02
0e074     34 4E 05 F1 | 	add	fp, #52
0e078     A7 28 02 FB | 	rdlong	local02, fp
0e07c     01 28 86 F1 | 	sub	local02, #1
0e080     A7 28 62 FC | 	wrlong	local02, fp
0e084     34 4E 85 F1 | 	sub	fp, #52
0e088     8C FF 9F FD | 	jmp	#LR__1171
0e08c                 | LR__1172
0e08c                 | ' if numpar=10 then 
0e08c     38 4E 05 F1 | 	add	fp, #56
0e090     A7 28 02 FB | 	rdlong	local02, fp
0e094     38 4E 85 F1 | 	sub	fp, #56
0e098     0A 28 0E F2 | 	cmp	local02, #10 wz
0e09c     5C 00 90 5D |  if_ne	jmp	#LR__1173
0e0a0     0C 4E 05 F1 | 	add	fp, #12
0e0a4     A7 12 02 FB | 	rdlong	arg01, fp
0e0a8     04 4E 05 F1 | 	add	fp, #4
0e0ac     A7 14 02 FB | 	rdlong	arg02, fp
0e0b0     04 4E 05 F1 | 	add	fp, #4
0e0b4     A7 16 02 FB | 	rdlong	arg03, fp
0e0b8     04 4E 05 F1 | 	add	fp, #4
0e0bc     A7 18 02 FB | 	rdlong	arg04, fp
0e0c0     04 4E 05 F1 | 	add	fp, #4
0e0c4     A7 1A 02 FB | 	rdlong	arg05, fp
0e0c8     04 4E 05 F1 | 	add	fp, #4
0e0cc     A7 1C 02 FB | 	rdlong	arg06, fp
0e0d0     04 4E 05 F1 | 	add	fp, #4
0e0d4     A7 1E 02 FB | 	rdlong	arg07, fp
0e0d8     04 4E 05 F1 | 	add	fp, #4
0e0dc     A7 20 02 FB | 	rdlong	arg08, fp
0e0e0     04 4E 05 F1 | 	add	fp, #4
0e0e4     A7 22 02 FB | 	rdlong	arg09, fp
0e0e8     04 4E 05 F1 | 	add	fp, #4
0e0ec     A7 24 02 FB | 	rdlong	arg10, fp
0e0f0     30 4E 85 F1 | 	sub	fp, #48
0e0f4     60 76 B1 FD | 	call	#_hg010b_spin2_blit
0e0f8     48 00 90 FD | 	jmp	#LR__1174
0e0fc                 | LR__1173
0e0fc     F2 1E 02 FB | 	rdlong	arg07, objptr
0e100     0C 4E 05 F1 | 	add	fp, #12
0e104     A7 14 02 FB | 	rdlong	arg02, fp
0e108     04 4E 05 F1 | 	add	fp, #4
0e10c     A7 16 02 FB | 	rdlong	arg03, fp
0e110     04 4E 05 F1 | 	add	fp, #4
0e114     A7 18 02 FB | 	rdlong	arg04, fp
0e118     04 4E 05 F1 | 	add	fp, #4
0e11c     A7 1A 02 FB | 	rdlong	arg05, fp
0e120     04 4E 05 F1 | 	add	fp, #4
0e124     A7 20 02 FB | 	rdlong	arg08, fp
0e128     04 4E 05 F1 | 	add	fp, #4
0e12c     A7 22 02 FB | 	rdlong	arg09, fp
0e130     20 4E 85 F1 | 	sub	fp, #32
0e134     0F 13 02 F6 | 	mov	arg01, arg07
0e138     0A 1C C6 F9 | 	decod	arg06, #10
0e13c     0A 24 C6 F9 | 	decod	arg10, #10
0e140     14 76 B1 FD | 	call	#_hg010b_spin2_blit
0e144                 | LR__1174
0e144                 | LR__1175
0e144     A7 F0 03 F6 | 	mov	ptra, fp
0e148     B2 00 A0 FD | 	call	#popregs_
0e14c                 | _do_blit_ret
0e14c     2D 00 64 FD | 	ret
0e150                 | 
0e150                 | ' 
0e150                 | ' 
0e150                 | ' '-------------------- bin$
0e150                 | ' 
0e150                 | ' sub do_bin
0e150                 | _do_bin
0e150     01 4A 05 F6 | 	mov	COUNT_, #1
0e154     A8 00 A0 FD | 	call	#pushregs_
0e158     18 F0 07 F1 | 	add	ptra, #24
0e15c     4A 00 00 FF 
0e160     80 E4 05 F1 | 	add	objptr, ##38016
0e164     F2 26 02 FB | 	rdlong	local01, objptr
0e168     13 17 02 F6 | 	mov	arg03, local01
0e16c     01 16 66 F0 | 	shl	arg03, #1
0e170     13 17 02 F1 | 	add	arg03, local01
0e174     02 16 66 F0 | 	shl	arg03, #2
0e178     03 00 00 FF 
0e17c     04 E4 85 F1 | 	sub	objptr, ##1540
0e180     F2 16 02 F1 | 	add	arg03, objptr
0e184     0B 17 02 FB | 	rdlong	arg03, arg03
0e188     0C 4E 05 F1 | 	add	fp, #12
0e18c     A7 16 62 FC | 	wrlong	arg03, fp
0e190                 | ' 
0e190                 | ' numpar=compiledline(lineptr_e).result.uresult
0e190                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e190     0C 4E 85 F1 | 	sub	fp, #12
0e194     03 16 16 F2 | 	cmp	arg03, #3 wc
0e198     47 00 00 FF 
0e19c     7C E4 85 F1 | 	sub	objptr, ##36476
0e1a0     0C 4E 05 C1 |  if_b	add	fp, #12
0e1a4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0e1a8     0C 4E 85 C1 |  if_b	sub	fp, #12
0e1ac     40 00 90 4D |  if_c_and_nz	jmp	#LR__1180
0e1b0     00 12 06 F6 | 	mov	arg01, #0
0e1b4     58 E4 B1 FD | 	call	#__system___getiolock_0606
0e1b8     FD 12 02 F6 | 	mov	arg01, result1
0e1bc     AC 87 B1 FD | 	call	#__system___lockmem
0e1c0     B6 01 00 FF 
0e1c4     2D 14 06 F6 | 	mov	arg02, ##@LR__5842
0e1c8     00 12 06 F6 | 	mov	arg01, #0
0e1cc     00 16 06 F6 | 	mov	arg03, #0
0e1d0     90 94 B1 FD | 	call	#__system___basic_print_string
0e1d4     00 12 06 F6 | 	mov	arg01, #0
0e1d8     34 E4 B1 FD | 	call	#__system___getiolock_0606
0e1dc     FD 00 68 FC | 	wrlong	#0, result1
0e1e0     27 12 06 F6 | 	mov	arg01, #39
0e1e4     00 14 06 F6 | 	mov	arg02, #0
0e1e8     90 4D B1 FD | 	call	#_printerror
0e1ec     B8 00 90 FD | 	jmp	#LR__1183
0e1f0                 | LR__1180
0e1f0                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e1f0     0C 4E 05 F1 | 	add	fp, #12
0e1f4     A7 26 02 FB | 	rdlong	local01, fp
0e1f8     0C 4E 85 F1 | 	sub	fp, #12
0e1fc     02 26 0E F2 | 	cmp	local01, #2 wz
0e200     38 00 90 5D |  if_ne	jmp	#LR__1181
0e204     D4 F3 BF FD | 	call	#_pop
0e208     FF 26 02 F6 | 	mov	local01, result3
0e20c     A7 FA 61 FC | 	wrlong	result1, fp
0e210     04 4E 05 F1 | 	add	fp, #4
0e214     A7 FC 61 FC | 	wrlong	result2, fp
0e218     04 4E 05 F1 | 	add	fp, #4
0e21c     A7 26 62 FC | 	wrlong	local01, fp
0e220     08 4E 85 F1 | 	sub	fp, #8
0e224     A7 12 02 F6 | 	mov	arg01, fp
0e228     94 F5 BF FD | 	call	#_converttoint
0e22c     14 4E 05 F1 | 	add	fp, #20
0e230     A7 FA 61 FC | 	wrlong	result1, fp
0e234     14 4E 85 F1 | 	sub	fp, #20
0e238     0C 00 90 FD | 	jmp	#LR__1182
0e23c                 | LR__1181
0e23c     14 4E 05 F1 | 	add	fp, #20
0e240     A7 00 68 FC | 	wrlong	#0, fp
0e244     14 4E 85 F1 | 	sub	fp, #20
0e248                 | LR__1182
0e248     90 F3 BF FD | 	call	#_pop
0e24c     FF 26 02 F6 | 	mov	local01, result3
0e250     A7 FA 61 FC | 	wrlong	result1, fp
0e254     04 4E 05 F1 | 	add	fp, #4
0e258     A7 FC 61 FC | 	wrlong	result2, fp
0e25c     04 4E 05 F1 | 	add	fp, #4
0e260     A7 26 62 FC | 	wrlong	local01, fp
0e264     08 4E 85 F1 | 	sub	fp, #8
0e268     A7 12 02 F6 | 	mov	arg01, fp
0e26c     50 F5 BF FD | 	call	#_converttoint
0e270     10 4E 05 F1 | 	add	fp, #16
0e274     A7 FA 61 FC | 	wrlong	result1, fp
0e278     FD 12 02 F6 | 	mov	arg01, result1
0e27c     04 4E 05 F1 | 	add	fp, #4
0e280     A7 14 02 FB | 	rdlong	arg02, fp
0e284     14 4E 85 F1 | 	sub	fp, #20
0e288     02 16 06 F6 | 	mov	arg03, #2
0e28c     B0 A9 B1 FD | 	call	#__system__Number_S
0e290     A7 FA 61 FC | 	wrlong	result1, fp
0e294     08 4E 05 F1 | 	add	fp, #8
0e298     A7 3E 68 FC | 	wrlong	#31, fp
0e29c     08 4E 85 F1 | 	sub	fp, #8
0e2a0     A7 12 02 F6 | 	mov	arg01, fp
0e2a4     CC F3 BF FD | 	call	#_push
0e2a8                 | LR__1183
0e2a8     A7 F0 03 F6 | 	mov	ptra, fp
0e2ac     B2 00 A0 FD | 	call	#popregs_
0e2b0                 | _do_bin_ret
0e2b0     2D 00 64 FD | 	ret
0e2b4                 | 
0e2b4                 | ' 
0e2b4                 | ' '-------------------- box
0e2b4                 | ' 
0e2b4                 | ' sub do_box
0e2b4                 | _do_box
0e2b4     03 4A 05 F6 | 	mov	COUNT_, #3
0e2b8     A8 00 A0 FD | 	call	#pushregs_
0e2bc     30 F0 07 F1 | 	add	ptra, #48
0e2c0     18 F3 BF FD | 	call	#_pop
0e2c4     FD 1A 02 F6 | 	mov	arg05, result1
0e2c8     FE 18 02 F6 | 	mov	arg04, result2
0e2cc     FF 16 02 F6 | 	mov	arg03, result3
0e2d0     24 4E 05 F1 | 	add	fp, #36
0e2d4     A7 1A 62 FC | 	wrlong	arg05, fp
0e2d8     04 4E 05 F1 | 	add	fp, #4
0e2dc     A7 18 62 FC | 	wrlong	arg04, fp
0e2e0     04 4E 05 F1 | 	add	fp, #4
0e2e4     A7 16 62 FC | 	wrlong	arg03, fp
0e2e8     2C 4E 85 F1 | 	sub	fp, #44
0e2ec     EC F2 BF FD | 	call	#_pop
0e2f0     FD 1A 02 F6 | 	mov	arg05, result1
0e2f4     FE 18 02 F6 | 	mov	arg04, result2
0e2f8     FF 16 02 F6 | 	mov	arg03, result3
0e2fc     18 4E 05 F1 | 	add	fp, #24
0e300     A7 1A 62 FC | 	wrlong	arg05, fp
0e304     04 4E 05 F1 | 	add	fp, #4
0e308     A7 18 62 FC | 	wrlong	arg04, fp
0e30c     04 4E 05 F1 | 	add	fp, #4
0e310     A7 16 62 FC | 	wrlong	arg03, fp
0e314     20 4E 85 F1 | 	sub	fp, #32
0e318     C0 F2 BF FD | 	call	#_pop
0e31c     FD 1A 02 F6 | 	mov	arg05, result1
0e320     FE 18 02 F6 | 	mov	arg04, result2
0e324     FF 26 02 F6 | 	mov	local01, result3
0e328     0C 4E 05 F1 | 	add	fp, #12
0e32c     A7 1A 62 FC | 	wrlong	arg05, fp
0e330     04 4E 05 F1 | 	add	fp, #4
0e334     A7 18 62 FC | 	wrlong	arg04, fp
0e338     04 4E 05 F1 | 	add	fp, #4
0e33c     A7 26 62 FC | 	wrlong	local01, fp
0e340     14 4E 85 F1 | 	sub	fp, #20
0e344     94 F2 BF FD | 	call	#_pop
0e348     A7 FA 61 FC | 	wrlong	result1, fp
0e34c     04 4E 05 F1 | 	add	fp, #4
0e350     A7 FC 61 FC | 	wrlong	result2, fp
0e354     04 4E 05 F1 | 	add	fp, #4
0e358     A7 FE 61 FC | 	wrlong	result3, fp
0e35c                 | ' 
0e35c                 | ' t4=pop()
0e35c                 | ' t3=pop()
0e35c                 | ' t2=pop()
0e35c                 | ' t1=pop()
0e35c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e35c     FF 1A 02 F6 | 	mov	arg05, result3
0e360     08 4E 85 F1 | 	sub	fp, #8
0e364     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e368     08 4E 05 51 |  if_ne	add	fp, #8
0e36c     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e370     08 4E 85 51 |  if_ne	sub	fp, #8
0e374     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e378     A8 00 90 5D |  if_ne	jmp	#LR__1190
0e37c     14 4E 05 F1 | 	add	fp, #20
0e380     A7 26 02 FB | 	rdlong	local01, fp
0e384     14 4E 85 F1 | 	sub	fp, #20
0e388     1C 26 0E F2 | 	cmp	local01, #28 wz
0e38c     14 4E 05 51 |  if_ne	add	fp, #20
0e390     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e394     14 4E 85 51 |  if_ne	sub	fp, #20
0e398     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e39c     84 00 90 5D |  if_ne	jmp	#LR__1190
0e3a0     20 4E 05 F1 | 	add	fp, #32
0e3a4     A7 26 02 FB | 	rdlong	local01, fp
0e3a8     20 4E 85 F1 | 	sub	fp, #32
0e3ac     1C 26 0E F2 | 	cmp	local01, #28 wz
0e3b0     20 4E 05 51 |  if_ne	add	fp, #32
0e3b4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e3b8     20 4E 85 51 |  if_ne	sub	fp, #32
0e3bc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e3c0     60 00 90 5D |  if_ne	jmp	#LR__1190
0e3c4     2C 4E 05 F1 | 	add	fp, #44
0e3c8     A7 26 02 FB | 	rdlong	local01, fp
0e3cc     2C 4E 85 F1 | 	sub	fp, #44
0e3d0     1C 26 0E F2 | 	cmp	local01, #28 wz
0e3d4     2C 4E 05 51 |  if_ne	add	fp, #44
0e3d8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e3dc     2C 4E 85 51 |  if_ne	sub	fp, #44
0e3e0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e3e4     3C 00 90 5D |  if_ne	jmp	#LR__1190
0e3e8     A7 12 02 FB | 	rdlong	arg01, fp
0e3ec     0C 4E 05 F1 | 	add	fp, #12
0e3f0     A7 14 02 FB | 	rdlong	arg02, fp
0e3f4     0C 4E 05 F1 | 	add	fp, #12
0e3f8     A7 16 02 FB | 	rdlong	arg03, fp
0e3fc     0C 4E 05 F1 | 	add	fp, #12
0e400     A7 18 02 FB | 	rdlong	arg04, fp
0e404     24 4E 85 F1 | 	sub	fp, #36
0e408     37 00 00 FF 
0e40c     28 E4 05 F1 | 	add	objptr, ##28200
0e410     F2 1A 02 FB | 	rdlong	arg05, objptr
0e414     37 00 00 FF 
0e418     28 E4 85 F1 | 	sub	objptr, ##28200
0e41c     00 66 B1 FD | 	call	#_hg010b_spin2_box
0e420                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e420     6C 00 90 FD | 	jmp	#LR__1191
0e424                 | LR__1190
0e424     A7 12 02 F6 | 	mov	arg01, fp
0e428     94 F3 BF FD | 	call	#_converttoint
0e42c     FD 28 02 F6 | 	mov	local02, result1
0e430     0C 4E 05 F1 | 	add	fp, #12
0e434     A7 12 02 F6 | 	mov	arg01, fp
0e438     0C 4E 85 F1 | 	sub	fp, #12
0e43c     80 F3 BF FD | 	call	#_converttoint
0e440     FD 2A 02 F6 | 	mov	local03, result1
0e444     18 4E 05 F1 | 	add	fp, #24
0e448     A7 12 02 F6 | 	mov	arg01, fp
0e44c     18 4E 85 F1 | 	sub	fp, #24
0e450     6C F3 BF FD | 	call	#_converttoint
0e454     FD 26 02 F6 | 	mov	local01, result1
0e458     24 4E 05 F1 | 	add	fp, #36
0e45c     A7 12 02 F6 | 	mov	arg01, fp
0e460     24 4E 85 F1 | 	sub	fp, #36
0e464     58 F3 BF FD | 	call	#_converttoint
0e468     FD 18 02 F6 | 	mov	arg04, result1
0e46c     37 00 00 FF 
0e470     28 E4 05 F1 | 	add	objptr, ##28200
0e474     F2 1A 02 FB | 	rdlong	arg05, objptr
0e478     37 00 00 FF 
0e47c     28 E4 85 F1 | 	sub	objptr, ##28200
0e480     14 13 02 F6 | 	mov	arg01, local02
0e484     15 15 02 F6 | 	mov	arg02, local03
0e488     13 17 02 F6 | 	mov	arg03, local01
0e48c     90 65 B1 FD | 	call	#_hg010b_spin2_box
0e490                 | LR__1191
0e490     A7 F0 03 F6 | 	mov	ptra, fp
0e494     B2 00 A0 FD | 	call	#popregs_
0e498                 | _do_box_ret
0e498     2D 00 64 FD | 	ret
0e49c                 | 
0e49c                 | ' 
0e49c                 | ' '-------------------- brun
0e49c                 | ' 
0e49c                 | ' sub do_brun
0e49c                 | _do_brun
0e49c     08 4A 05 F6 | 	mov	COUNT_, #8
0e4a0     A8 00 A0 FD | 	call	#pushregs_
0e4a4     34 F1 BF FD | 	call	#_pop
0e4a8     FE 1A 02 F6 | 	mov	arg05, result2
0e4ac     FF 18 02 F6 | 	mov	arg04, result3
0e4b0     FD 26 02 F6 | 	mov	local01, result1
0e4b4     0D 29 02 F6 | 	mov	local02, arg05
0e4b8     0C 2B 02 F6 | 	mov	local03, arg04
0e4bc                 | ' 
0e4bc                 | ' t1=pop() 
0e4bc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e4bc     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e4c0     10 00 90 5D |  if_ne	jmp	#LR__1200
0e4c4     13 13 02 F6 | 	mov	arg01, local01
0e4c8     88 F2 BF FD | 	call	#_convertstring
0e4cc     FD 26 02 F6 | 	mov	local01, result1
0e4d0     1F 2A 06 F6 | 	mov	local03, #31
0e4d4                 | LR__1200
0e4d4                 | ' if t1.result_type=result_string then
0e4d4     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e4d8     F0 01 90 5D |  if_ne	jmp	#LR__1204
0e4dc     13 2D 02 F6 | 	mov	local04, local01
0e4e0                 | '   filename=t1.result.sresult
0e4e0                 | '   if left$(filename,1)="/" then 
0e4e0     16 13 02 F6 | 	mov	arg01, local04
0e4e4     01 14 06 F6 | 	mov	arg02, #1
0e4e8     00 A5 B1 FD | 	call	#__system__Left_S
0e4ec     FD 12 02 F6 | 	mov	arg01, result1
0e4f0     B6 01 00 FF 
0e4f4     34 14 06 F6 | 	mov	arg02, ##@LR__5843
0e4f8     98 84 B1 FD | 	call	#__system___string_cmp
0e4fc     00 FA 0D F2 | 	cmp	result1, #0 wz
0e500     16 2F 02 A6 |  if_e	mov	local05, local04
0e504     14 00 90 AD |  if_e	jmp	#LR__1201
0e508     B6 01 00 FF 
0e50c     36 12 06 F6 | 	mov	arg01, ##@LR__5844
0e510     16 15 02 F6 | 	mov	arg02, local04
0e514     B0 84 B1 FD | 	call	#__system___string_concat
0e518     FD 2E 02 F6 | 	mov	local05, result1
0e51c                 | LR__1201
0e51c                 | '   open fullfilename for input as #9
0e51c     09 12 06 F6 | 	mov	arg01, #9
0e520     17 15 02 F6 | 	mov	arg02, local05
0e524     00 16 06 F6 | 	mov	arg03, #0
0e528     44 90 B1 FD | 	call	#__system___basic_open_string
0e52c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e530     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e534     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e538     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e53c     FD 30 0A F6 | 	mov	local06, result1 wz
0e540                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e540     8C 00 90 AD |  if_e	jmp	#LR__1202
0e544     00 12 06 F6 | 	mov	arg01, #0
0e548     C4 E0 B1 FD | 	call	#__system___getiolock_0606
0e54c     FD 12 02 F6 | 	mov	arg01, result1
0e550     18 84 B1 FD | 	call	#__system___lockmem
0e554     B6 01 00 FF 
0e558     3F 14 06 F6 | 	mov	arg02, ##@LR__5845
0e55c     00 12 06 F6 | 	mov	arg01, #0
0e560     00 16 06 F6 | 	mov	arg03, #0
0e564     FC 90 B1 FD | 	call	#__system___basic_print_string
0e568     00 12 06 F6 | 	mov	arg01, #0
0e56c     18 15 02 F6 | 	mov	arg02, local06
0e570     00 16 06 F6 | 	mov	arg03, #0
0e574     0A 18 06 F6 | 	mov	arg04, #10
0e578     2C 91 B1 FD | 	call	#__system___basic_print_integer
0e57c     B6 01 00 FF 
0e580     4D 14 06 F6 | 	mov	arg02, ##@LR__5846
0e584     00 12 06 F6 | 	mov	arg01, #0
0e588     00 16 06 F6 | 	mov	arg03, #0
0e58c     D4 90 B1 FD | 	call	#__system___basic_print_string
0e590     18 13 02 F6 | 	mov	arg01, local06
0e594     64 AD B1 FD | 	call	#__system___strerror
0e598     FD 14 02 F6 | 	mov	arg02, result1
0e59c     00 12 06 F6 | 	mov	arg01, #0
0e5a0     00 16 06 F6 | 	mov	arg03, #0
0e5a4     BC 90 B1 FD | 	call	#__system___basic_print_string
0e5a8     00 12 06 F6 | 	mov	arg01, #0
0e5ac     0A 14 06 F6 | 	mov	arg02, #10
0e5b0     00 16 06 F6 | 	mov	arg03, #0
0e5b4     54 90 B1 FD | 	call	#__system___basic_print_char
0e5b8     00 12 06 F6 | 	mov	arg01, #0
0e5bc     50 E0 B1 FD | 	call	#__system___getiolock_0606
0e5c0     FD 00 68 FC | 	wrlong	#0, result1
0e5c4     09 12 06 F6 | 	mov	arg01, #9
0e5c8     FC D6 B1 FD | 	call	#__system__close
0e5cc     FC 00 90 FD | 	jmp	#LR__1205
0e5d0                 | LR__1202
0e5d0     01 32 06 F6 | 	mov	local07, #1
0e5d4     00 34 06 F6 | 	mov	local08, #0
0e5d8                 | '   do
0e5d8                 | LR__1203
0e5d8                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e5d8     4E 00 00 FF 
0e5dc     B4 E4 05 F1 | 	add	objptr, ##40116
0e5e0     F2 16 02 F6 | 	mov	arg03, objptr
0e5e4     4E 00 00 FF 
0e5e8     B4 E4 85 F1 | 	sub	objptr, ##40116
0e5ec     09 12 06 F6 | 	mov	arg01, #9
0e5f0     19 15 02 F6 | 	mov	arg02, local07
0e5f4     0A 18 C6 F9 | 	decod	arg04, #10
0e5f8     01 1A 06 F6 | 	mov	arg05, #1
0e5fc     E0 91 B1 FD | 	call	#__system___basic_get
0e600     FD 30 02 F6 | 	mov	local06, result1
0e604     FD 32 02 F1 | 	add	local07, result1
0e608     4E 00 00 FF 
0e60c     B4 E4 05 F1 | 	add	objptr, ##40116
0e610     F2 12 02 F6 | 	mov	arg01, objptr
0e614     1A 15 02 F6 | 	mov	arg02, local08
0e618     0A 16 C6 F9 | 	decod	arg03, #10
0e61c     42 00 00 FF 
0e620     E8 E5 85 F1 | 	sub	objptr, ##34280
0e624     58 77 B1 FD | 	call	#_psram_spin2_write
0e628     0B 00 00 FF 
0e62c     CC E4 85 F1 | 	sub	objptr, ##5836
0e630     18 35 02 F1 | 	add	local08, local06
0e634     02 00 00 FF 
0e638     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e63c     E0 03 00 AF 
0e640     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e644     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1203
0e648     36 00 00 FF 
0e64c     FC E5 05 F1 | 	add	objptr, ##28156
0e650     F2 12 02 FB | 	rdlong	arg01, objptr
0e654     03 12 62 FD | 	cogstop	arg01
0e658     04 E4 05 F1 | 	add	objptr, #4
0e65c     F2 12 02 FB | 	rdlong	arg01, objptr
0e660     03 12 62 FD | 	cogstop	arg01
0e664     04 E4 05 F1 | 	add	objptr, #4
0e668     F2 12 02 FB | 	rdlong	arg01, objptr
0e66c     03 12 62 FD | 	cogstop	arg01
0e670     19 00 00 FF 
0e674     3C E5 05 F1 | 	add	objptr, ##13116
0e678     F2 12 02 FB | 	rdlong	arg01, objptr
0e67c     03 12 62 FD | 	cogstop	arg01
0e680     18 00 00 FF 
0e684     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e688     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e68c     18 00 00 FF 
0e690     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e694     19 00 00 FF 
0e698     34 E5 85 F1 | 	sub	objptr, ##13108
0e69c     1E 34 06 F6 | 	mov	local08, #30
0e6a0     28 E4 61 FD | 	setq	objptr
0e6a4     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e6a8     01 34 66 C6 |  if_b	neg	local08, #1
0e6ac     1B 00 00 FF 
0e6b0     0C E5 05 F1 | 	add	objptr, ##14092
0e6b4     F2 34 62 FC | 	wrlong	local08, objptr
0e6b8     52 00 00 FF 
0e6bc     18 E5 85 F1 | 	sub	objptr, ##42264
0e6c0     00 12 06 F6 | 	mov	arg01, #0
0e6c4     01 12 62 FD | 	cogid	arg01
0e6c8     03 12 62 FD | 	cogstop	arg01
0e6cc                 | LR__1204
0e6cc                 | LR__1205
0e6cc     A7 F0 03 F6 | 	mov	ptra, fp
0e6d0     B2 00 A0 FD | 	call	#popregs_
0e6d4                 | _do_brun_ret
0e6d4     2D 00 64 FD | 	ret
0e6d8                 | 
0e6d8                 | ' 
0e6d8                 | ' '-------------------- cd
0e6d8                 | ' 
0e6d8                 | ' sub do_cd
0e6d8                 | _do_cd
0e6d8     06 4A 05 F6 | 	mov	COUNT_, #6
0e6dc     A8 00 A0 FD | 	call	#pushregs_
0e6e0     B6 01 00 FF 
0e6e4     50 12 06 F6 | 	mov	arg01, ##@LR__5847
0e6e8     31 14 06 F6 | 	mov	arg02, #49
0e6ec     E0 E0 B1 FD | 	call	#__system___basic_dir
0e6f0     E8 EE BF FD | 	call	#_pop
0e6f4     FE 18 02 F6 | 	mov	arg04, result2
0e6f8     FF 16 02 F6 | 	mov	arg03, result3
0e6fc     FD 26 02 F6 | 	mov	local01, result1
0e700     0C 29 02 F6 | 	mov	local02, arg04
0e704     0B 2B 02 F6 | 	mov	local03, arg03
0e708                 | ' t1=pop()
0e708                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e708     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e70c     10 00 90 5D |  if_ne	jmp	#LR__1210
0e710     13 13 02 F6 | 	mov	arg01, local01
0e714     3C F0 BF FD | 	call	#_convertstring
0e718     FD 26 02 F6 | 	mov	local01, result1
0e71c     1F 2A 06 F6 | 	mov	local03, #31
0e720                 | LR__1210
0e720                 | ' if t1.result_type<>result_string then printerror(15): return
0e720     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e724     10 00 90 AD |  if_e	jmp	#LR__1211
0e728     0F 12 06 F6 | 	mov	arg01, #15
0e72c     00 14 06 F6 | 	mov	arg02, #0
0e730     48 48 B1 FD | 	call	#_printerror
0e734     54 05 90 FD | 	jmp	#LR__1229
0e738                 | LR__1211
0e738     13 2D 02 F6 | 	mov	local04, local01
0e73c                 | ' newdir$=t1.result.sresult
0e73c                 | ' if newdir$=".." then 
0e73c     B6 01 00 FF 
0e740     52 14 06 F6 | 	mov	arg02, ##@LR__5848
0e744     16 13 02 F6 | 	mov	arg01, local04
0e748     48 82 B1 FD | 	call	#__system___string_cmp
0e74c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e750     C8 01 90 5D |  if_ne	jmp	#LR__1218
0e754     4A 00 00 FF 
0e758     94 E4 05 F1 | 	add	objptr, ##38036
0e75c     F2 12 02 FB | 	rdlong	arg01, objptr
0e760     4A 00 00 FF 
0e764     94 E4 85 F1 | 	sub	objptr, ##38036
0e768     09 2F 02 F6 | 	mov	local05, arg01
0e76c     97 06 48 FB | 	callpa	#(@LR__1213-@LR__1212)>>2,fcache_load_ptr_
0e770                 | LR__1212
0e770     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e774     01 2E 06 51 |  if_ne	add	local05, #1
0e778     F4 FF 9F 5D |  if_ne	jmp	#LR__1212
0e77c                 | LR__1213
0e77c     17 13 C2 F2 | 	subr	arg01, local05
0e780     4A 00 00 FF 
0e784     94 E4 05 F1 | 	add	objptr, ##38036
0e788     F2 14 02 FB | 	rdlong	arg02, objptr
0e78c     4A 00 00 FF 
0e790     94 E4 85 F1 | 	sub	objptr, ##38036
0e794     B6 01 00 FF 
0e798     55 16 06 F6 | 	mov	arg03, ##@LR__5849
0e79c     98 A8 B1 FD | 	call	#__system__InstrRev
0e7a0     FD 2C 02 F6 | 	mov	local04, result1
0e7a4                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e7a4     02 2C 56 F2 | 	cmps	local04, #2 wc
0e7a8     28 00 90 CD |  if_b	jmp	#LR__1214
0e7ac     4A 00 00 FF 
0e7b0     94 E4 05 F1 | 	add	objptr, ##38036
0e7b4     F2 12 02 FB | 	rdlong	arg01, objptr
0e7b8     4A 00 00 FF 
0e7bc     94 E4 85 F1 | 	sub	objptr, ##38036
0e7c0     01 2C 86 F1 | 	sub	local04, #1
0e7c4     16 15 02 F6 | 	mov	arg02, local04
0e7c8     20 A2 B1 FD | 	call	#__system__Left_S
0e7cc     FD 2C 02 F6 | 	mov	local04, result1
0e7d0     08 00 90 FD | 	jmp	#LR__1215
0e7d4                 | LR__1214
0e7d4     B6 01 00 FF 
0e7d8     57 2C 06 F6 | 	mov	local04, ##@LR__5850
0e7dc                 | LR__1215
0e7dc     16 13 02 F6 | 	mov	arg01, local04
0e7e0     14 88 B1 FD | 	call	#__system___chdir
0e7e4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e7e8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e7ec     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e7f0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e7f4     FD 30 0A F6 | 	mov	local06, result1 wz
0e7f8                 | '   chdir newdir$
0e7f8                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e7f8     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e7fc     A4 00 90 AD |  if_e	jmp	#LR__1216
0e800     00 12 06 F6 | 	mov	arg01, #0
0e804     08 DE B1 FD | 	call	#__system___getiolock_0606
0e808     FD 12 02 F6 | 	mov	arg01, result1
0e80c     5C 81 B1 FD | 	call	#__system___lockmem
0e810     B6 01 00 FF 
0e814     59 14 06 F6 | 	mov	arg02, ##@LR__5851
0e818     00 12 06 F6 | 	mov	arg01, #0
0e81c     00 16 06 F6 | 	mov	arg03, #0
0e820     40 8E B1 FD | 	call	#__system___basic_print_string
0e824     00 12 06 F6 | 	mov	arg01, #0
0e828     18 15 02 F6 | 	mov	arg02, local06
0e82c     00 16 06 F6 | 	mov	arg03, #0
0e830     0A 18 06 F6 | 	mov	arg04, #10
0e834     70 8E B1 FD | 	call	#__system___basic_print_integer
0e838     B6 01 00 FF 
0e83c     67 14 06 F6 | 	mov	arg02, ##@LR__5852
0e840     00 12 06 F6 | 	mov	arg01, #0
0e844     00 16 06 F6 | 	mov	arg03, #0
0e848     18 8E B1 FD | 	call	#__system___basic_print_string
0e84c     45 00 00 FF 
0e850     50 E5 05 F1 | 	add	objptr, ##35664
0e854     F2 14 02 FB | 	rdlong	arg02, objptr
0e858     45 00 00 FF 
0e85c     50 E5 85 F1 | 	sub	objptr, ##35664
0e860     00 12 06 F6 | 	mov	arg01, #0
0e864     00 16 06 F6 | 	mov	arg03, #0
0e868     F8 8D B1 FD | 	call	#__system___basic_print_string
0e86c     00 12 06 F6 | 	mov	arg01, #0
0e870     0A 14 06 F6 | 	mov	arg02, #10
0e874     00 16 06 F6 | 	mov	arg03, #0
0e878     90 8D B1 FD | 	call	#__system___basic_print_char
0e87c     00 12 06 F6 | 	mov	arg01, #0
0e880     8C DD B1 FD | 	call	#__system___getiolock_0606
0e884     FD 00 68 FC | 	wrlong	#0, result1
0e888     4A 00 00 FF 
0e88c     94 E4 05 F1 | 	add	objptr, ##38036
0e890     F2 12 02 FB | 	rdlong	arg01, objptr
0e894     4A 00 00 FF 
0e898     94 E4 85 F1 | 	sub	objptr, ##38036
0e89c     58 87 B1 FD | 	call	#__system___chdir
0e8a0     14 00 90 FD | 	jmp	#LR__1217
0e8a4                 | LR__1216
0e8a4     4A 00 00 FF 
0e8a8     94 E4 05 F1 | 	add	objptr, ##38036
0e8ac     F2 2C 62 FC | 	wrlong	local04, objptr
0e8b0     4A 00 00 FF 
0e8b4     94 E4 85 F1 | 	sub	objptr, ##38036
0e8b8                 | LR__1217
0e8b8                 | '   print "Current directory: ";currentdir$
0e8b8     00 12 06 F6 | 	mov	arg01, #0
0e8bc     50 DD B1 FD | 	call	#__system___getiolock_0606
0e8c0     FD 12 02 F6 | 	mov	arg01, result1
0e8c4     A4 80 B1 FD | 	call	#__system___lockmem
0e8c8     B6 01 00 FF 
0e8cc     6A 14 06 F6 | 	mov	arg02, ##@LR__5853
0e8d0     00 12 06 F6 | 	mov	arg01, #0
0e8d4     00 16 06 F6 | 	mov	arg03, #0
0e8d8     88 8D B1 FD | 	call	#__system___basic_print_string
0e8dc     4A 00 00 FF 
0e8e0     94 E4 05 F1 | 	add	objptr, ##38036
0e8e4     F2 14 02 FB | 	rdlong	arg02, objptr
0e8e8     4A 00 00 FF 
0e8ec     94 E4 85 F1 | 	sub	objptr, ##38036
0e8f0     00 12 06 F6 | 	mov	arg01, #0
0e8f4     00 16 06 F6 | 	mov	arg03, #0
0e8f8     68 8D B1 FD | 	call	#__system___basic_print_string
0e8fc     00 12 06 F6 | 	mov	arg01, #0
0e900     0A 14 06 F6 | 	mov	arg02, #10
0e904     00 16 06 F6 | 	mov	arg03, #0
0e908     00 8D B1 FD | 	call	#__system___basic_print_char
0e90c     00 12 06 F6 | 	mov	arg01, #0
0e910     FC DC B1 FD | 	call	#__system___getiolock_0606
0e914     FD 00 68 FC | 	wrlong	#0, result1
0e918                 | '   return
0e918     70 03 90 FD | 	jmp	#LR__1229
0e91c                 | LR__1218
0e91c                 | ' if left$(newdir$,1)="/" then 
0e91c     16 13 02 F6 | 	mov	arg01, local04
0e920     01 14 06 F6 | 	mov	arg02, #1
0e924     C4 A0 B1 FD | 	call	#__system__Left_S
0e928     FD 12 02 F6 | 	mov	arg01, result1
0e92c     B6 01 00 FF 
0e930     7E 14 06 F6 | 	mov	arg02, ##@LR__5854
0e934     5C 80 B1 FD | 	call	#__system___string_cmp
0e938     00 FA 0D F2 | 	cmp	result1, #0 wz
0e93c     40 01 90 5D |  if_ne	jmp	#LR__1221
0e940     16 13 02 F6 | 	mov	arg01, local04
0e944     B0 86 B1 FD | 	call	#__system___chdir
0e948     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e94c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e950     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e954     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e958     FD 30 0A F6 | 	mov	local06, result1 wz
0e95c                 | '   chdir(newdir$)
0e95c                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e95c     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e960     A4 00 90 AD |  if_e	jmp	#LR__1219
0e964     00 12 06 F6 | 	mov	arg01, #0
0e968     A4 DC B1 FD | 	call	#__system___getiolock_0606
0e96c     FD 12 02 F6 | 	mov	arg01, result1
0e970     F8 7F B1 FD | 	call	#__system___lockmem
0e974     B6 01 00 FF 
0e978     80 14 06 F6 | 	mov	arg02, ##@LR__5855
0e97c     00 12 06 F6 | 	mov	arg01, #0
0e980     00 16 06 F6 | 	mov	arg03, #0
0e984     DC 8C B1 FD | 	call	#__system___basic_print_string
0e988     00 12 06 F6 | 	mov	arg01, #0
0e98c     18 15 02 F6 | 	mov	arg02, local06
0e990     00 16 06 F6 | 	mov	arg03, #0
0e994     0A 18 06 F6 | 	mov	arg04, #10
0e998     0C 8D B1 FD | 	call	#__system___basic_print_integer
0e99c     B6 01 00 FF 
0e9a0     8E 14 06 F6 | 	mov	arg02, ##@LR__5856
0e9a4     00 12 06 F6 | 	mov	arg01, #0
0e9a8     00 16 06 F6 | 	mov	arg03, #0
0e9ac     B4 8C B1 FD | 	call	#__system___basic_print_string
0e9b0     45 00 00 FF 
0e9b4     50 E5 05 F1 | 	add	objptr, ##35664
0e9b8     F2 14 02 FB | 	rdlong	arg02, objptr
0e9bc     45 00 00 FF 
0e9c0     50 E5 85 F1 | 	sub	objptr, ##35664
0e9c4     00 12 06 F6 | 	mov	arg01, #0
0e9c8     00 16 06 F6 | 	mov	arg03, #0
0e9cc     94 8C B1 FD | 	call	#__system___basic_print_string
0e9d0     00 12 06 F6 | 	mov	arg01, #0
0e9d4     0A 14 06 F6 | 	mov	arg02, #10
0e9d8     00 16 06 F6 | 	mov	arg03, #0
0e9dc     2C 8C B1 FD | 	call	#__system___basic_print_char
0e9e0     00 12 06 F6 | 	mov	arg01, #0
0e9e4     28 DC B1 FD | 	call	#__system___getiolock_0606
0e9e8     FD 00 68 FC | 	wrlong	#0, result1
0e9ec     4A 00 00 FF 
0e9f0     94 E4 05 F1 | 	add	objptr, ##38036
0e9f4     F2 12 02 FB | 	rdlong	arg01, objptr
0e9f8     4A 00 00 FF 
0e9fc     94 E4 85 F1 | 	sub	objptr, ##38036
0ea00     F4 85 B1 FD | 	call	#__system___chdir
0ea04     14 00 90 FD | 	jmp	#LR__1220
0ea08                 | LR__1219
0ea08     4A 00 00 FF 
0ea0c     94 E4 05 F1 | 	add	objptr, ##38036
0ea10     F2 2C 62 FC | 	wrlong	local04, objptr
0ea14     4A 00 00 FF 
0ea18     94 E4 85 F1 | 	sub	objptr, ##38036
0ea1c                 | LR__1220
0ea1c                 | '   print "Current directory: ";currentdir$
0ea1c     00 12 06 F6 | 	mov	arg01, #0
0ea20     EC DB B1 FD | 	call	#__system___getiolock_0606
0ea24     FD 12 02 F6 | 	mov	arg01, result1
0ea28     40 7F B1 FD | 	call	#__system___lockmem
0ea2c     B6 01 00 FF 
0ea30     91 14 06 F6 | 	mov	arg02, ##@LR__5857
0ea34     00 12 06 F6 | 	mov	arg01, #0
0ea38     00 16 06 F6 | 	mov	arg03, #0
0ea3c     24 8C B1 FD | 	call	#__system___basic_print_string
0ea40     4A 00 00 FF 
0ea44     94 E4 05 F1 | 	add	objptr, ##38036
0ea48     F2 14 02 FB | 	rdlong	arg02, objptr
0ea4c     4A 00 00 FF 
0ea50     94 E4 85 F1 | 	sub	objptr, ##38036
0ea54     00 12 06 F6 | 	mov	arg01, #0
0ea58     00 16 06 F6 | 	mov	arg03, #0
0ea5c     04 8C B1 FD | 	call	#__system___basic_print_string
0ea60     00 12 06 F6 | 	mov	arg01, #0
0ea64     0A 14 06 F6 | 	mov	arg02, #10
0ea68     00 16 06 F6 | 	mov	arg03, #0
0ea6c     9C 8B B1 FD | 	call	#__system___basic_print_char
0ea70     00 12 06 F6 | 	mov	arg01, #0
0ea74     98 DB B1 FD | 	call	#__system___getiolock_0606
0ea78     FD 00 68 FC | 	wrlong	#0, result1
0ea7c                 | '   return
0ea7c     0C 02 90 FD | 	jmp	#LR__1229
0ea80                 | LR__1221
0ea80                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0ea80     4A 00 00 FF 
0ea84     94 E4 05 F1 | 	add	objptr, ##38036
0ea88     F2 12 02 FB | 	rdlong	arg01, objptr
0ea8c     4A 00 00 FF 
0ea90     94 E4 85 F1 | 	sub	objptr, ##38036
0ea94     B6 01 00 FF 
0ea98     A5 14 06 F6 | 	mov	arg02, ##@LR__5858
0ea9c     F4 7E B1 FD | 	call	#__system___string_cmp
0eaa0     00 FA 0D F2 | 	cmp	result1, #0 wz
0eaa4     34 00 90 AD |  if_e	jmp	#LR__1222
0eaa8     4A 00 00 FF 
0eaac     94 E4 05 F1 | 	add	objptr, ##38036
0eab0     F2 12 02 FB | 	rdlong	arg01, objptr
0eab4     4A 00 00 FF 
0eab8     94 E4 85 F1 | 	sub	objptr, ##38036
0eabc     B6 01 00 FF 
0eac0     A7 14 06 F6 | 	mov	arg02, ##@LR__5859
0eac4     00 7F B1 FD | 	call	#__system___string_concat
0eac8     FD 12 02 F6 | 	mov	arg01, result1
0eacc     16 15 02 F6 | 	mov	arg02, local04
0ead0     F4 7E B1 FD | 	call	#__system___string_concat
0ead4     FD 2C 02 F6 | 	mov	local04, result1
0ead8     20 00 90 FD | 	jmp	#LR__1223
0eadc                 | LR__1222
0eadc     4A 00 00 FF 
0eae0     94 E4 05 F1 | 	add	objptr, ##38036
0eae4     F2 12 02 FB | 	rdlong	arg01, objptr
0eae8     4A 00 00 FF 
0eaec     94 E4 85 F1 | 	sub	objptr, ##38036
0eaf0     16 15 02 F6 | 	mov	arg02, local04
0eaf4     D0 7E B1 FD | 	call	#__system___string_concat
0eaf8     FD 2C 02 F6 | 	mov	local04, result1
0eafc                 | LR__1223
0eafc                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0eafc     16 13 02 F6 | 	mov	arg01, local04
0eb00     01 14 06 F6 | 	mov	arg02, #1
0eb04     6C 9F B1 FD | 	call	#__system__Right_S
0eb08     FD 12 02 F6 | 	mov	arg01, result1
0eb0c     B6 01 00 FF 
0eb10     A9 14 06 F6 | 	mov	arg02, ##@LR__5860
0eb14     7C 7E B1 FD | 	call	#__system___string_cmp
0eb18     00 FA 0D F2 | 	cmp	result1, #0 wz
0eb1c     30 00 90 5D |  if_ne	jmp	#LR__1226
0eb20     16 13 02 F6 | 	mov	arg01, local04
0eb24     09 2F 02 F6 | 	mov	local05, arg01
0eb28     97 06 48 FB | 	callpa	#(@LR__1225-@LR__1224)>>2,fcache_load_ptr_
0eb2c                 | LR__1224
0eb2c     17 FB C9 FA | 	rdbyte	result1, local05 wz
0eb30     01 2E 06 51 |  if_ne	add	local05, #1
0eb34     F4 FF 9F 5D |  if_ne	jmp	#LR__1224
0eb38                 | LR__1225
0eb38     09 2F 82 F1 | 	sub	local05, arg01
0eb3c     17 15 02 F6 | 	mov	arg02, local05
0eb40     01 14 86 F1 | 	sub	arg02, #1
0eb44     16 13 02 F6 | 	mov	arg01, local04
0eb48     A0 9E B1 FD | 	call	#__system__Left_S
0eb4c     FD 2C 02 F6 | 	mov	local04, result1
0eb50                 | LR__1226
0eb50     16 13 02 F6 | 	mov	arg01, local04
0eb54     A0 84 B1 FD | 	call	#__system___chdir
0eb58     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0eb5c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0eb60     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0eb64     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0eb68     FD 30 0A F6 | 	mov	local06, result1 wz
0eb6c                 | '   chdir(newdir$)
0eb6c                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0eb6c     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0eb70     A4 00 90 AD |  if_e	jmp	#LR__1227
0eb74     00 12 06 F6 | 	mov	arg01, #0
0eb78     94 DA B1 FD | 	call	#__system___getiolock_0606
0eb7c     FD 12 02 F6 | 	mov	arg01, result1
0eb80     E8 7D B1 FD | 	call	#__system___lockmem
0eb84     B6 01 00 FF 
0eb88     AB 14 06 F6 | 	mov	arg02, ##@LR__5861
0eb8c     00 12 06 F6 | 	mov	arg01, #0
0eb90     00 16 06 F6 | 	mov	arg03, #0
0eb94     CC 8A B1 FD | 	call	#__system___basic_print_string
0eb98     00 12 06 F6 | 	mov	arg01, #0
0eb9c     18 15 02 F6 | 	mov	arg02, local06
0eba0     00 16 06 F6 | 	mov	arg03, #0
0eba4     0A 18 06 F6 | 	mov	arg04, #10
0eba8     FC 8A B1 FD | 	call	#__system___basic_print_integer
0ebac     B6 01 00 FF 
0ebb0     B9 14 06 F6 | 	mov	arg02, ##@LR__5862
0ebb4     00 12 06 F6 | 	mov	arg01, #0
0ebb8     00 16 06 F6 | 	mov	arg03, #0
0ebbc     A4 8A B1 FD | 	call	#__system___basic_print_string
0ebc0     45 00 00 FF 
0ebc4     50 E5 05 F1 | 	add	objptr, ##35664
0ebc8     F2 14 02 FB | 	rdlong	arg02, objptr
0ebcc     45 00 00 FF 
0ebd0     50 E5 85 F1 | 	sub	objptr, ##35664
0ebd4     00 12 06 F6 | 	mov	arg01, #0
0ebd8     00 16 06 F6 | 	mov	arg03, #0
0ebdc     84 8A B1 FD | 	call	#__system___basic_print_string
0ebe0     00 12 06 F6 | 	mov	arg01, #0
0ebe4     0A 14 06 F6 | 	mov	arg02, #10
0ebe8     00 16 06 F6 | 	mov	arg03, #0
0ebec     1C 8A B1 FD | 	call	#__system___basic_print_char
0ebf0     00 12 06 F6 | 	mov	arg01, #0
0ebf4     18 DA B1 FD | 	call	#__system___getiolock_0606
0ebf8     FD 00 68 FC | 	wrlong	#0, result1
0ebfc     4A 00 00 FF 
0ec00     94 E4 05 F1 | 	add	objptr, ##38036
0ec04     F2 12 02 FB | 	rdlong	arg01, objptr
0ec08     4A 00 00 FF 
0ec0c     94 E4 85 F1 | 	sub	objptr, ##38036
0ec10     E4 83 B1 FD | 	call	#__system___chdir
0ec14     14 00 90 FD | 	jmp	#LR__1228
0ec18                 | LR__1227
0ec18     4A 00 00 FF 
0ec1c     94 E4 05 F1 | 	add	objptr, ##38036
0ec20     F2 2C 62 FC | 	wrlong	local04, objptr
0ec24     4A 00 00 FF 
0ec28     94 E4 85 F1 | 	sub	objptr, ##38036
0ec2c                 | LR__1228
0ec2c                 | '   print "Current directory: ";currentdir$
0ec2c     00 12 06 F6 | 	mov	arg01, #0
0ec30     DC D9 B1 FD | 	call	#__system___getiolock_0606
0ec34     FD 12 02 F6 | 	mov	arg01, result1
0ec38     30 7D B1 FD | 	call	#__system___lockmem
0ec3c     B6 01 00 FF 
0ec40     BC 14 06 F6 | 	mov	arg02, ##@LR__5863
0ec44     00 12 06 F6 | 	mov	arg01, #0
0ec48     00 16 06 F6 | 	mov	arg03, #0
0ec4c     14 8A B1 FD | 	call	#__system___basic_print_string
0ec50     4A 00 00 FF 
0ec54     94 E4 05 F1 | 	add	objptr, ##38036
0ec58     F2 14 02 FB | 	rdlong	arg02, objptr
0ec5c     4A 00 00 FF 
0ec60     94 E4 85 F1 | 	sub	objptr, ##38036
0ec64     00 12 06 F6 | 	mov	arg01, #0
0ec68     00 16 06 F6 | 	mov	arg03, #0
0ec6c     F4 89 B1 FD | 	call	#__system___basic_print_string
0ec70     00 12 06 F6 | 	mov	arg01, #0
0ec74     0A 14 06 F6 | 	mov	arg02, #10
0ec78     00 16 06 F6 | 	mov	arg03, #0
0ec7c     8C 89 B1 FD | 	call	#__system___basic_print_char
0ec80     00 12 06 F6 | 	mov	arg01, #0
0ec84     88 D9 B1 FD | 	call	#__system___getiolock_0606
0ec88     FD 00 68 FC | 	wrlong	#0, result1
0ec8c                 | LR__1229
0ec8c     A7 F0 03 F6 | 	mov	ptra, fp
0ec90     B2 00 A0 FD | 	call	#popregs_
0ec94                 | _do_cd_ret
0ec94     2D 00 64 FD | 	ret
0ec98                 | 
0ec98                 | ' 
0ec98                 | ' '-------------------- changefreq
0ec98                 | ' 
0ec98                 | ' sub do_changefreq
0ec98                 | _do_changefreq
0ec98     04 4A 05 F6 | 	mov	COUNT_, #4
0ec9c     A8 00 A0 FD | 	call	#pushregs_
0eca0     28 F0 07 F1 | 	add	ptra, #40
0eca4     34 E9 BF FD | 	call	#_pop
0eca8     FF 14 02 F6 | 	mov	arg02, result3
0ecac     A7 FA 61 FC | 	wrlong	result1, fp
0ecb0     04 4E 05 F1 | 	add	fp, #4
0ecb4     A7 FC 61 FC | 	wrlong	result2, fp
0ecb8     04 4E 05 F1 | 	add	fp, #4
0ecbc     A7 14 62 FC | 	wrlong	arg02, fp
0ecc0     08 4E 85 F1 | 	sub	fp, #8
0ecc4     A7 12 02 F6 | 	mov	arg01, fp
0ecc8     B0 EB BF FD | 	call	#_converttofloat
0eccc     24 4E 05 F1 | 	add	fp, #36
0ecd0     A7 FA 61 FC | 	wrlong	result1, fp
0ecd4     24 4E 85 F1 | 	sub	fp, #36
0ecd8     FD 14 02 F6 | 	mov	arg02, result1
0ecdc     FC 16 20 FF 
0ece0     54 12 06 F6 | 	mov	arg01, ##1076754516
0ece4     D0 BA B1 FD | 	call	#__system____builtin_logbase
0ece8     FD 26 02 F6 | 	mov	local01, result1
0ecec     1E 14 C6 F9 | 	decod	arg02, #30
0ecf0     FC 16 20 FF 
0ecf4     54 12 06 F6 | 	mov	arg01, ##1076754516
0ecf8     BC BA B1 FD | 	call	#__system____builtin_logbase
0ecfc     FD 14 02 F6 | 	mov	arg02, result1
0ed00     13 13 02 F6 | 	mov	arg01, local01
0ed04     E4 AC B1 FD | 	call	#__system___float_div
0ed08     FD 12 02 F6 | 	mov	arg01, result1
0ed0c     00 14 06 F6 | 	mov	arg02, #0
0ed10     9C AF B1 FD | 	call	#__system___float_tointeger
0ed14     10 4E 05 F1 | 	add	fp, #16
0ed18     A7 FA 61 FC | 	wrlong	result1, fp
0ed1c     1E 26 C6 F9 | 	decod	local01, #30
0ed20     FD 12 02 F6 | 	mov	arg01, result1
0ed24     10 4E 85 F1 | 	sub	fp, #16
0ed28     05 12 06 F1 | 	add	arg01, #5
0ed2c     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed30     1F 28 C6 C9 |  if_b	decod	local02, #31
0ed34     00 28 06 36 |  if_ae	mov	local02, #0
0ed38     A8 A6 B1 FD | 	call	#__system___float_fromuns
0ed3c     14 FB 61 F5 | 	xor	result1, local02
0ed40     FD 14 02 F6 | 	mov	arg02, result1
0ed44     13 13 02 F6 | 	mov	arg01, local01
0ed48     A4 B9 B1 FD | 	call	#__system____builtin_powf
0ed4c     FD 12 02 F6 | 	mov	arg01, result1
0ed50     01 14 06 F6 | 	mov	arg02, #1
0ed54     58 AF B1 FD | 	call	#__system___float_tointeger
0ed58     14 4E 05 F1 | 	add	fp, #20
0ed5c     A7 FA 61 FC | 	wrlong	result1, fp
0ed60                 | ' skip=round(2^(lfreq+5))
0ed60                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0ed60     14 4E 85 F1 | 	sub	fp, #20
0ed64     40 00 00 FF 
0ed68     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ed6c     30 00 90 CD |  if_b	jmp	#LR__1230
0ed70     14 4E 05 F1 | 	add	fp, #20
0ed74     A7 26 02 FB | 	rdlong	local01, fp
0ed78     13 27 52 F6 | 	abs	local01, local01 wc
0ed7c     0F 26 46 F0 | 	shr	local01, #15
0ed80     13 27 82 F6 | 	negc	local01, local01
0ed84     04 4E 05 F1 | 	add	fp, #4
0ed88     A7 26 62 FC | 	wrlong	local01, fp
0ed8c     04 4E 85 F1 | 	sub	fp, #4
0ed90     40 00 80 FF 
0ed94     A7 00 68 FC | 	wrlong	##32768, fp
0ed98     14 4E 85 F1 | 	sub	fp, #20
0ed9c     0C 00 90 FD | 	jmp	#LR__1231
0eda0                 | LR__1230
0eda0     18 4E 05 F1 | 	add	fp, #24
0eda4     A7 02 68 FC | 	wrlong	#1, fp
0eda8     18 4E 85 F1 | 	sub	fp, #24
0edac                 | LR__1231
0edac     24 4E 05 F1 | 	add	fp, #36
0edb0     A7 14 02 FB | 	rdlong	arg02, fp
0edb4     24 4E 85 F1 | 	sub	fp, #36
0edb8     3E 2C 25 FF 
0edbc     3C 12 06 F6 | 	mov	arg01, ##1247312956
0edc0     28 AC B1 FD | 	call	#__system___float_div
0edc4     FD 26 02 F6 | 	mov	local01, result1
0edc8     18 4E 05 F1 | 	add	fp, #24
0edcc     A7 12 02 FB | 	rdlong	arg01, fp
0edd0     18 4E 85 F1 | 	sub	fp, #24
0edd4     09 13 52 F6 | 	abs	arg01, arg01 wc
0edd8     1F 28 C6 C9 |  if_b	decod	local02, #31
0eddc     00 28 06 36 |  if_ae	mov	local02, #0
0ede0     00 A6 B1 FD | 	call	#__system___float_fromuns
0ede4     14 FB 61 F5 | 	xor	result1, local02
0ede8     FD 2A 02 F6 | 	mov	local03, result1
0edec     1E 2C C6 F9 | 	decod	local04, #30
0edf0     0D 12 06 F6 | 	mov	arg01, #13
0edf4     10 4E 05 F1 | 	add	fp, #16
0edf8     A7 14 02 FB | 	rdlong	arg02, fp
0edfc     10 4E 85 F1 | 	sub	fp, #16
0ee00     0A 13 82 F1 | 	sub	arg01, arg02
0ee04     09 13 52 F6 | 	abs	arg01, arg01 wc
0ee08     1F 28 C6 C9 |  if_b	decod	local02, #31
0ee0c     00 28 06 36 |  if_ae	mov	local02, #0
0ee10     D0 A5 B1 FD | 	call	#__system___float_fromuns
0ee14     14 FB 61 F5 | 	xor	result1, local02
0ee18     FD 14 02 F6 | 	mov	arg02, result1
0ee1c     16 13 02 F6 | 	mov	arg01, local04
0ee20     CC B8 B1 FD | 	call	#__system____builtin_powf
0ee24     FD 14 02 F6 | 	mov	arg02, result1
0ee28     15 13 02 F6 | 	mov	arg01, local03
0ee2c     B8 A9 B1 FD | 	call	#__system___float_mul
0ee30     FD 14 02 F6 | 	mov	arg02, result1
0ee34     13 13 02 F6 | 	mov	arg01, local01
0ee38     B0 AB B1 FD | 	call	#__system___float_div
0ee3c     FD 12 02 F6 | 	mov	arg01, result1
0ee40     01 14 06 F6 | 	mov	arg02, #1
0ee44     68 AE B1 FD | 	call	#__system___float_tointeger
0ee48     FD 26 02 F6 | 	mov	local01, result1
0ee4c     1C 4E 05 F1 | 	add	fp, #28
0ee50     A7 26 62 FC | 	wrlong	local01, fp
0ee54     1C 4E 85 F1 | 	sub	fp, #28
0ee58     80 E7 BF FD | 	call	#_pop
0ee5c     FF 2C 02 F6 | 	mov	local04, result3
0ee60     A7 FA 61 FC | 	wrlong	result1, fp
0ee64     04 4E 05 F1 | 	add	fp, #4
0ee68     A7 FC 61 FC | 	wrlong	result2, fp
0ee6c     04 4E 05 F1 | 	add	fp, #4
0ee70     A7 2C 62 FC | 	wrlong	local04, fp
0ee74     08 4E 85 F1 | 	sub	fp, #8
0ee78     A7 12 02 F6 | 	mov	arg01, fp
0ee7c     40 E9 BF FD | 	call	#_converttoint
0ee80     FD 2A 52 F6 | 	abs	local03, result1 wc
0ee84     07 2A 06 F5 | 	and	local03, #7
0ee88     15 2B 82 F6 | 	negc	local03, local03
0ee8c     0C 4E 05 F1 | 	add	fp, #12
0ee90     A7 2A 62 FC | 	wrlong	local03, fp
0ee94     08 4E 05 F1 | 	add	fp, #8
0ee98     A7 26 02 FB | 	rdlong	local01, fp
0ee9c     10 26 66 F0 | 	shl	local01, #16
0eea0     08 4E 05 F1 | 	add	fp, #8
0eea4     A7 2C 02 FB | 	rdlong	local04, fp
0eea8     16 27 02 F1 | 	add	local01, local04
0eeac     04 4E 05 F1 | 	add	fp, #4
0eeb0     A7 26 62 FC | 	wrlong	local01, fp
0eeb4                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0eeb4     37 00 00 FF 
0eeb8     10 E4 05 F1 | 	add	objptr, ##28176
0eebc     F2 12 02 FB | 	rdlong	arg01, objptr
0eec0     37 00 00 FF 
0eec4     10 E4 85 F1 | 	sub	objptr, ##28176
0eec8     14 4E 85 F1 | 	sub	fp, #20
0eecc     A7 2C 02 FB | 	rdlong	local04, fp
0eed0     0C 4E 85 F1 | 	sub	fp, #12
0eed4     06 2C 66 F0 | 	shl	local04, #6
0eed8     16 13 02 F1 | 	add	arg01, local04
0eedc     08 12 06 F1 | 	add	arg01, #8
0eee0     09 FB 01 FB | 	rdlong	result1, arg01
0eee4     1B FA 2D F4 | 	testbn	result1, #27 wz
0eee8     3C 00 90 5D |  if_ne	jmp	#LR__1232
0eeec     37 00 00 FF 
0eef0     10 E4 05 F1 | 	add	objptr, ##28176
0eef4     F2 12 02 FB | 	rdlong	arg01, objptr
0eef8     37 00 00 FF 
0eefc     10 E4 85 F1 | 	sub	objptr, ##28176
0ef00     0C 4E 05 F1 | 	add	fp, #12
0ef04     A7 2C 02 FB | 	rdlong	local04, fp
0ef08     06 2C 66 F0 | 	shl	local04, #6
0ef0c     16 13 02 F1 | 	add	arg01, local04
0ef10     18 12 06 F1 | 	add	arg01, #24
0ef14     14 4E 05 F1 | 	add	fp, #20
0ef18     A7 14 02 FB | 	rdlong	arg02, fp
0ef1c     20 4E 85 F1 | 	sub	fp, #32
0ef20     09 15 62 FC | 	wrlong	arg02, arg01
0ef24     80 00 90 FD | 	jmp	#LR__1233
0ef28                 | LR__1232
0ef28     37 00 00 FF 
0ef2c     10 E4 05 F1 | 	add	objptr, ##28176
0ef30     F2 26 02 FB | 	rdlong	local01, objptr
0ef34     37 00 00 FF 
0ef38     10 E4 85 F1 | 	sub	objptr, ##28176
0ef3c     0C 4E 05 F1 | 	add	fp, #12
0ef40     A7 2C 02 FB | 	rdlong	local04, fp
0ef44     06 2C 66 F0 | 	shl	local04, #6
0ef48     16 27 02 F1 | 	add	local01, local04
0ef4c     18 26 06 F1 | 	add	local01, #24
0ef50     18 4E 05 F1 | 	add	fp, #24
0ef54     A7 14 02 FB | 	rdlong	arg02, fp
0ef58     24 4E 85 F1 | 	sub	fp, #36
0ef5c     3E 2C 25 FF 
0ef60     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ef64     84 AA B1 FD | 	call	#__system___float_div
0ef68     FD 12 02 F6 | 	mov	arg01, result1
0ef6c     01 14 06 F6 | 	mov	arg02, #1
0ef70     3C AD B1 FD | 	call	#__system___float_tointeger
0ef74     13 FB 51 FC | 	wrword	result1, local01
0ef78     37 00 00 FF 
0ef7c     10 E4 05 F1 | 	add	objptr, ##28176
0ef80     F2 12 02 FB | 	rdlong	arg01, objptr
0ef84     37 00 00 FF 
0ef88     10 E4 85 F1 | 	sub	objptr, ##28176
0ef8c     0C 4E 05 F1 | 	add	fp, #12
0ef90     A7 2C 02 FB | 	rdlong	local04, fp
0ef94     0C 4E 85 F1 | 	sub	fp, #12
0ef98     06 2C 66 F0 | 	shl	local04, #6
0ef9c     16 13 02 F1 | 	add	arg01, local04
0efa0     1A 12 06 F1 | 	add	arg01, #26
0efa4     09 01 5A FC | 	wrword	#256, arg01
0efa8                 | LR__1233
0efa8     A7 F0 03 F6 | 	mov	ptra, fp
0efac     B2 00 A0 FD | 	call	#popregs_
0efb0                 | _do_changefreq_ret
0efb0     2D 00 64 FD | 	ret
0efb4                 | 
0efb4                 | ' 
0efb4                 | ' '-------------------- changepan
0efb4                 | ' 
0efb4                 | ' sub do_changepan
0efb4                 | _do_changepan
0efb4     01 4A 05 F6 | 	mov	COUNT_, #1
0efb8     A8 00 A0 FD | 	call	#pushregs_
0efbc     14 F0 07 F1 | 	add	ptra, #20
0efc0     18 E6 BF FD | 	call	#_pop
0efc4     A7 FA 61 FC | 	wrlong	result1, fp
0efc8     04 4E 05 F1 | 	add	fp, #4
0efcc     A7 FC 61 FC | 	wrlong	result2, fp
0efd0     04 4E 05 F1 | 	add	fp, #4
0efd4     A7 FE 61 FC | 	wrlong	result3, fp
0efd8     08 4E 85 F1 | 	sub	fp, #8
0efdc     00 00 23 FF 
0efe0     00 26 06 F6 | 	mov	local01, ##1174405120
0efe4     A7 12 02 F6 | 	mov	arg01, fp
0efe8     90 E8 BF FD | 	call	#_converttofloat
0efec     FD 14 02 F6 | 	mov	arg02, result1
0eff0     13 13 02 F6 | 	mov	arg01, local01
0eff4     F0 A7 B1 FD | 	call	#__system___float_mul
0eff8     FD 12 02 F6 | 	mov	arg01, result1
0effc     01 14 06 F6 | 	mov	arg02, #1
0f000     AC AC B1 FD | 	call	#__system___float_tointeger
0f004     0D 26 C6 F9 | 	decod	local01, #13
0f008     FD 26 02 F1 | 	add	local01, result1
0f00c     10 4E 05 F1 | 	add	fp, #16
0f010     A7 26 62 FC | 	wrlong	local01, fp
0f014                 | ' 
0f014                 | ' t1=pop()
0f014                 | ' pan=8192+round(8192*converttofloat(t1)) 
0f014                 | ' if pan<0 then pan=0
0f014     10 4E 85 F1 | 	sub	fp, #16
0f018     00 26 56 F2 | 	cmps	local01, #0 wc
0f01c     10 4E 05 C1 |  if_b	add	fp, #16
0f020     A7 00 68 CC |  if_b	wrlong	#0, fp
0f024     10 4E 85 C1 |  if_b	sub	fp, #16
0f028                 | ' if pan>16384 then pan=16384
0f028     10 4E 05 F1 | 	add	fp, #16
0f02c     A7 26 02 FB | 	rdlong	local01, fp
0f030     10 4E 85 F1 | 	sub	fp, #16
0f034     20 00 00 FF 
0f038     01 26 56 F2 | 	cmps	local01, ##16385 wc
0f03c     10 4E 05 31 |  if_ae	add	fp, #16
0f040     20 00 80 3F 
0f044     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0f048     10 4E 85 31 |  if_ae	sub	fp, #16
0f04c     8C E5 BF FD | 	call	#_pop
0f050     FF 26 02 F6 | 	mov	local01, result3
0f054     A7 FA 61 FC | 	wrlong	result1, fp
0f058     04 4E 05 F1 | 	add	fp, #4
0f05c     A7 FC 61 FC | 	wrlong	result2, fp
0f060     04 4E 05 F1 | 	add	fp, #4
0f064     A7 26 62 FC | 	wrlong	local01, fp
0f068     08 4E 85 F1 | 	sub	fp, #8
0f06c     A7 12 02 F6 | 	mov	arg01, fp
0f070     4C E7 BF FD | 	call	#_converttoint
0f074     FD 26 52 F6 | 	abs	local01, result1 wc
0f078     07 26 06 F5 | 	and	local01, #7
0f07c     13 27 82 F6 | 	negc	local01, local01
0f080     0C 4E 05 F1 | 	add	fp, #12
0f084     A7 26 62 FC | 	wrlong	local01, fp
0f088     37 00 00 FF 
0f08c     10 E4 05 F1 | 	add	objptr, ##28176
0f090     F2 12 02 FB | 	rdlong	arg01, objptr
0f094     37 00 00 FF 
0f098     10 E4 85 F1 | 	sub	objptr, ##28176
0f09c     06 26 66 F0 | 	shl	local01, #6
0f0a0     13 13 02 F1 | 	add	arg01, local01
0f0a4     16 12 06 F1 | 	add	arg01, #22
0f0a8     04 4E 05 F1 | 	add	fp, #4
0f0ac     A7 14 02 FB | 	rdlong	arg02, fp
0f0b0     10 4E 85 F1 | 	sub	fp, #16
0f0b4     09 15 52 FC | 	wrword	arg02, arg01
0f0b8     A7 F0 03 F6 | 	mov	ptra, fp
0f0bc     B2 00 A0 FD | 	call	#popregs_
0f0c0                 | _do_changepan_ret
0f0c0     2D 00 64 FD | 	ret
0f0c4                 | 
0f0c4                 | ' 
0f0c4                 | ' '-------------------- changevol
0f0c4                 | ' 
0f0c4                 | ' sub do_changevol
0f0c4                 | _do_changevol
0f0c4     00 4A 05 F6 | 	mov	COUNT_, #0
0f0c8     A8 00 A0 FD | 	call	#pushregs_
0f0cc     14 F0 07 F1 | 	add	ptra, #20
0f0d0     08 E5 BF FD | 	call	#_pop
0f0d4     FF 14 02 F6 | 	mov	arg02, result3
0f0d8     A7 FA 61 FC | 	wrlong	result1, fp
0f0dc     04 4E 05 F1 | 	add	fp, #4
0f0e0     A7 FC 61 FC | 	wrlong	result2, fp
0f0e4     04 4E 05 F1 | 	add	fp, #4
0f0e8     A7 14 62 FC | 	wrlong	arg02, fp
0f0ec     08 4E 85 F1 | 	sub	fp, #8
0f0f0     A7 12 02 F6 | 	mov	arg01, fp
0f0f4     84 E7 BF FD | 	call	#_converttofloat
0f0f8     FD 12 02 F6 | 	mov	arg01, result1
0f0fc     00 3D 22 FF 
0f100     00 14 06 F6 | 	mov	arg02, ##1148846080
0f104     E0 A6 B1 FD | 	call	#__system___float_mul
0f108     FD 12 02 F6 | 	mov	arg01, result1
0f10c     01 14 06 F6 | 	mov	arg02, #1
0f110     9C AB B1 FD | 	call	#__system___float_tointeger
0f114     FD 14 52 F6 | 	abs	arg02, result1 wc
0f118     0D 14 46 F7 | 	zerox	arg02, #13
0f11c     0A 15 82 F6 | 	negc	arg02, arg02
0f120     10 4E 05 F1 | 	add	fp, #16
0f124     A7 14 62 FC | 	wrlong	arg02, fp
0f128     10 4E 85 F1 | 	sub	fp, #16
0f12c     AC E4 BF FD | 	call	#_pop
0f130     FF 14 02 F6 | 	mov	arg02, result3
0f134     A7 FA 61 FC | 	wrlong	result1, fp
0f138     04 4E 05 F1 | 	add	fp, #4
0f13c     A7 FC 61 FC | 	wrlong	result2, fp
0f140     04 4E 05 F1 | 	add	fp, #4
0f144     A7 14 62 FC | 	wrlong	arg02, fp
0f148     08 4E 85 F1 | 	sub	fp, #8
0f14c     A7 12 02 F6 | 	mov	arg01, fp
0f150     6C E6 BF FD | 	call	#_converttoint
0f154     FD 14 52 F6 | 	abs	arg02, result1 wc
0f158     07 14 06 F5 | 	and	arg02, #7
0f15c     0A 15 82 F6 | 	negc	arg02, arg02
0f160     0C 4E 05 F1 | 	add	fp, #12
0f164     A7 14 62 FC | 	wrlong	arg02, fp
0f168     37 00 00 FF 
0f16c     10 E4 05 F1 | 	add	objptr, ##28176
0f170     F2 12 02 FB | 	rdlong	arg01, objptr
0f174     37 00 00 FF 
0f178     10 E4 85 F1 | 	sub	objptr, ##28176
0f17c     06 14 66 F0 | 	shl	arg02, #6
0f180     0A 13 02 F1 | 	add	arg01, arg02
0f184     14 12 06 F1 | 	add	arg01, #20
0f188     04 4E 05 F1 | 	add	fp, #4
0f18c     A7 14 02 FB | 	rdlong	arg02, fp
0f190     10 4E 85 F1 | 	sub	fp, #16
0f194     09 15 52 FC | 	wrword	arg02, arg01
0f198     A7 F0 03 F6 | 	mov	ptra, fp
0f19c     B2 00 A0 FD | 	call	#popregs_
0f1a0                 | _do_changevol_ret
0f1a0     2D 00 64 FD | 	ret
0f1a4                 | 
0f1a4                 | ' 
0f1a4                 | ' '-------------------- changewav
0f1a4                 | ' 
0f1a4                 | ' sub do_changewav
0f1a4                 | _do_changewav
0f1a4     00 4A 05 F6 | 	mov	COUNT_, #0
0f1a8     A8 00 A0 FD | 	call	#pushregs_
0f1ac     14 F0 07 F1 | 	add	ptra, #20
0f1b0     28 E4 BF FD | 	call	#_pop
0f1b4     FF 14 02 F6 | 	mov	arg02, result3
0f1b8     A7 FA 61 FC | 	wrlong	result1, fp
0f1bc     04 4E 05 F1 | 	add	fp, #4
0f1c0     A7 FC 61 FC | 	wrlong	result2, fp
0f1c4     04 4E 05 F1 | 	add	fp, #4
0f1c8     A7 14 62 FC | 	wrlong	arg02, fp
0f1cc     08 4E 85 F1 | 	sub	fp, #8
0f1d0     A7 12 02 F6 | 	mov	arg01, fp
0f1d4     E8 E5 BF FD | 	call	#_converttoint
0f1d8     10 4E 05 F1 | 	add	fp, #16
0f1dc     A7 FA 61 FC | 	wrlong	result1, fp
0f1e0                 | ' 
0f1e0                 | ' t1=pop()
0f1e0                 | ' wave=converttoint(t1)
0f1e0                 | ' if wave<0 then wave=0
0f1e0     FD 14 02 F6 | 	mov	arg02, result1
0f1e4     10 4E 85 F1 | 	sub	fp, #16
0f1e8     00 14 56 F2 | 	cmps	arg02, #0 wc
0f1ec     10 4E 05 C1 |  if_b	add	fp, #16
0f1f0     A7 00 68 CC |  if_b	wrlong	#0, fp
0f1f4     10 4E 85 C1 |  if_b	sub	fp, #16
0f1f8     E0 E3 BF FD | 	call	#_pop
0f1fc     FF 14 02 F6 | 	mov	arg02, result3
0f200     A7 FA 61 FC | 	wrlong	result1, fp
0f204     04 4E 05 F1 | 	add	fp, #4
0f208     A7 FC 61 FC | 	wrlong	result2, fp
0f20c     04 4E 05 F1 | 	add	fp, #4
0f210     A7 14 62 FC | 	wrlong	arg02, fp
0f214     08 4E 85 F1 | 	sub	fp, #8
0f218     A7 12 02 F6 | 	mov	arg01, fp
0f21c     A0 E5 BF FD | 	call	#_converttoint
0f220     FD 14 52 F6 | 	abs	arg02, result1 wc
0f224     07 14 06 F5 | 	and	arg02, #7
0f228     0A 15 82 F6 | 	negc	arg02, arg02
0f22c     0C 4E 05 F1 | 	add	fp, #12
0f230     A7 14 62 FC | 	wrlong	arg02, fp
0f234                 | ' if wave <32 then 
0f234     04 4E 05 F1 | 	add	fp, #4
0f238     A7 14 02 FB | 	rdlong	arg02, fp
0f23c     10 4E 85 F1 | 	sub	fp, #16
0f240     20 14 56 F2 | 	cmps	arg02, #32 wc
0f244     48 00 90 3D |  if_ae	jmp	#LR__1240
0f248     37 00 00 FF 
0f24c     10 E4 05 F1 | 	add	objptr, ##28176
0f250     F2 12 02 FB | 	rdlong	arg01, objptr
0f254     37 00 00 FF 
0f258     10 E4 85 F1 | 	sub	objptr, ##28176
0f25c     0C 4E 05 F1 | 	add	fp, #12
0f260     A7 14 02 FB | 	rdlong	arg02, fp
0f264     06 14 66 F0 | 	shl	arg02, #6
0f268     0A 13 02 F1 | 	add	arg01, arg02
0f26c     08 12 06 F1 | 	add	arg01, #8
0f270     04 4E 05 F1 | 	add	fp, #4
0f274     A7 14 02 FB | 	rdlong	arg02, fp
0f278     10 4E 85 F1 | 	sub	fp, #16
0f27c     0B 14 66 F0 | 	shl	arg02, #11
0f280     00 00 40 FF 
0f284     00 14 06 F1 | 	add	arg02, ##-2147483648
0f288     09 15 62 FC | 	wrlong	arg02, arg01
0f28c     34 00 90 FD | 	jmp	#LR__1241
0f290                 | LR__1240
0f290     37 00 00 FF 
0f294     10 E4 05 F1 | 	add	objptr, ##28176
0f298     F2 12 02 FB | 	rdlong	arg01, objptr
0f29c     37 00 00 FF 
0f2a0     10 E4 85 F1 | 	sub	objptr, ##28176
0f2a4     0C 4E 05 F1 | 	add	fp, #12
0f2a8     A7 14 02 FB | 	rdlong	arg02, fp
0f2ac     0C 4E 85 F1 | 	sub	fp, #12
0f2b0     06 14 66 F0 | 	shl	arg02, #6
0f2b4     0A 13 02 F1 | 	add	arg01, arg02
0f2b8     08 12 06 F1 | 	add	arg01, #8
0f2bc     00 00 C4 FF 
0f2c0     09 01 68 FC | 	wrlong	##-2013265920, arg01
0f2c4                 | LR__1241
0f2c4     A7 F0 03 F6 | 	mov	ptra, fp
0f2c8     B2 00 A0 FD | 	call	#popregs_
0f2cc                 | _do_changewav_ret
0f2cc     2D 00 64 FD | 	ret
0f2d0                 | 
0f2d0                 | ' 
0f2d0                 | ' '-------------------- chr$
0f2d0                 | ' 
0f2d0                 | ' sub do_chr
0f2d0                 | _do_chr
0f2d0     01 4A 05 F6 | 	mov	COUNT_, #1
0f2d4     A8 00 A0 FD | 	call	#pushregs_
0f2d8     14 F0 07 F1 | 	add	ptra, #20
0f2dc     4A 00 00 FF 
0f2e0     80 E4 05 F1 | 	add	objptr, ##38016
0f2e4     F2 26 02 FB | 	rdlong	local01, objptr
0f2e8     13 17 02 F6 | 	mov	arg03, local01
0f2ec     01 16 66 F0 | 	shl	arg03, #1
0f2f0     13 17 02 F1 | 	add	arg03, local01
0f2f4     02 16 66 F0 | 	shl	arg03, #2
0f2f8     03 00 00 FF 
0f2fc     04 E4 85 F1 | 	sub	objptr, ##1540
0f300     F2 16 02 F1 | 	add	arg03, objptr
0f304     0B 17 02 FB | 	rdlong	arg03, arg03
0f308     0C 4E 05 F1 | 	add	fp, #12
0f30c     A7 16 62 FC | 	wrlong	arg03, fp
0f310                 | ' 
0f310                 | ' numpar=compiledline(lineptr_e).result.uresult
0f310                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f310     0C 4E 85 F1 | 	sub	fp, #12
0f314     02 16 16 F2 | 	cmp	arg03, #2 wc
0f318     47 00 00 FF 
0f31c     7C E4 85 F1 | 	sub	objptr, ##36476
0f320     0C 4E 05 C1 |  if_b	add	fp, #12
0f324     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f328     0C 4E 85 C1 |  if_b	sub	fp, #12
0f32c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1250
0f330     00 12 06 F6 | 	mov	arg01, #0
0f334     D8 D2 B1 FD | 	call	#__system___getiolock_0606
0f338     FD 12 02 F6 | 	mov	arg01, result1
0f33c     2C 76 B1 FD | 	call	#__system___lockmem
0f340     B6 01 00 FF 
0f344     D0 14 06 F6 | 	mov	arg02, ##@LR__5864
0f348     00 12 06 F6 | 	mov	arg01, #0
0f34c     00 16 06 F6 | 	mov	arg03, #0
0f350     10 83 B1 FD | 	call	#__system___basic_print_string
0f354     00 12 06 F6 | 	mov	arg01, #0
0f358     B4 D2 B1 FD | 	call	#__system___getiolock_0606
0f35c     FD 00 68 FC | 	wrlong	#0, result1
0f360     27 12 06 F6 | 	mov	arg01, #39
0f364     00 14 06 F6 | 	mov	arg02, #0
0f368     10 3C B1 FD | 	call	#_printerror
0f36c     54 00 90 FD | 	jmp	#LR__1251
0f370                 | LR__1250
0f370     68 E2 BF FD | 	call	#_pop
0f374     FF 26 02 F6 | 	mov	local01, result3
0f378     A7 FA 61 FC | 	wrlong	result1, fp
0f37c     04 4E 05 F1 | 	add	fp, #4
0f380     A7 FC 61 FC | 	wrlong	result2, fp
0f384     04 4E 05 F1 | 	add	fp, #4
0f388     A7 26 62 FC | 	wrlong	local01, fp
0f38c     08 4E 85 F1 | 	sub	fp, #8
0f390     A7 12 02 F6 | 	mov	arg01, fp
0f394     28 E4 BF FD | 	call	#_converttoint
0f398     10 4E 05 F1 | 	add	fp, #16
0f39c     A7 FA 61 FC | 	wrlong	result1, fp
0f3a0     FD 12 02 F6 | 	mov	arg01, result1
0f3a4     10 4E 85 F1 | 	sub	fp, #16
0f3a8     04 98 B1 FD | 	call	#__system__Chr_S
0f3ac     A7 FA 61 FC | 	wrlong	result1, fp
0f3b0     08 4E 05 F1 | 	add	fp, #8
0f3b4     A7 3E 68 FC | 	wrlong	#31, fp
0f3b8     08 4E 85 F1 | 	sub	fp, #8
0f3bc     A7 12 02 F6 | 	mov	arg01, fp
0f3c0     B0 E2 BF FD | 	call	#_push
0f3c4                 | LR__1251
0f3c4     A7 F0 03 F6 | 	mov	ptra, fp
0f3c8     B2 00 A0 FD | 	call	#popregs_
0f3cc                 | _do_chr_ret
0f3cc     2D 00 64 FD | 	ret
0f3d0                 | 
0f3d0                 | ' 
0f3d0                 | ' '-------------------- circle
0f3d0                 | ' 
0f3d0                 | ' sub do_circle
0f3d0                 | _do_circle
0f3d0     02 4A 05 F6 | 	mov	COUNT_, #2
0f3d4     A8 00 A0 FD | 	call	#pushregs_
0f3d8     24 F0 07 F1 | 	add	ptra, #36
0f3dc     FC E1 BF FD | 	call	#_pop
0f3e0     FD 18 02 F6 | 	mov	arg04, result1
0f3e4     FE 16 02 F6 | 	mov	arg03, result2
0f3e8     FF 14 02 F6 | 	mov	arg02, result3
0f3ec     18 4E 05 F1 | 	add	fp, #24
0f3f0     A7 18 62 FC | 	wrlong	arg04, fp
0f3f4     04 4E 05 F1 | 	add	fp, #4
0f3f8     A7 16 62 FC | 	wrlong	arg03, fp
0f3fc     04 4E 05 F1 | 	add	fp, #4
0f400     A7 14 62 FC | 	wrlong	arg02, fp
0f404     20 4E 85 F1 | 	sub	fp, #32
0f408     D0 E1 BF FD | 	call	#_pop
0f40c     FD 18 02 F6 | 	mov	arg04, result1
0f410     FE 16 02 F6 | 	mov	arg03, result2
0f414     FF 26 02 F6 | 	mov	local01, result3
0f418     0C 4E 05 F1 | 	add	fp, #12
0f41c     A7 18 62 FC | 	wrlong	arg04, fp
0f420     04 4E 05 F1 | 	add	fp, #4
0f424     A7 16 62 FC | 	wrlong	arg03, fp
0f428     04 4E 05 F1 | 	add	fp, #4
0f42c     A7 26 62 FC | 	wrlong	local01, fp
0f430     14 4E 85 F1 | 	sub	fp, #20
0f434     A4 E1 BF FD | 	call	#_pop
0f438     A7 FA 61 FC | 	wrlong	result1, fp
0f43c     04 4E 05 F1 | 	add	fp, #4
0f440     A7 FC 61 FC | 	wrlong	result2, fp
0f444     04 4E 05 F1 | 	add	fp, #4
0f448     A7 FE 61 FC | 	wrlong	result3, fp
0f44c                 | ' 
0f44c                 | ' t3=pop()
0f44c                 | ' t2=pop()
0f44c                 | ' t1=pop()
0f44c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f44c     FF 18 02 F6 | 	mov	arg04, result3
0f450     08 4E 85 F1 | 	sub	fp, #8
0f454     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f458     08 4E 05 51 |  if_ne	add	fp, #8
0f45c     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f460     08 4E 85 51 |  if_ne	sub	fp, #8
0f464     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f468     7C 00 90 5D |  if_ne	jmp	#LR__1260
0f46c     14 4E 05 F1 | 	add	fp, #20
0f470     A7 26 02 FB | 	rdlong	local01, fp
0f474     14 4E 85 F1 | 	sub	fp, #20
0f478     1C 26 0E F2 | 	cmp	local01, #28 wz
0f47c     14 4E 05 51 |  if_ne	add	fp, #20
0f480     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f484     14 4E 85 51 |  if_ne	sub	fp, #20
0f488     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f48c     58 00 90 5D |  if_ne	jmp	#LR__1260
0f490     20 4E 05 F1 | 	add	fp, #32
0f494     A7 26 02 FB | 	rdlong	local01, fp
0f498     20 4E 85 F1 | 	sub	fp, #32
0f49c     1C 26 0E F2 | 	cmp	local01, #28 wz
0f4a0     20 4E 05 51 |  if_ne	add	fp, #32
0f4a4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f4a8     20 4E 85 51 |  if_ne	sub	fp, #32
0f4ac     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f4b0     34 00 90 5D |  if_ne	jmp	#LR__1260
0f4b4     A7 12 02 FB | 	rdlong	arg01, fp
0f4b8     0C 4E 05 F1 | 	add	fp, #12
0f4bc     A7 14 02 FB | 	rdlong	arg02, fp
0f4c0     0C 4E 05 F1 | 	add	fp, #12
0f4c4     A7 16 02 FB | 	rdlong	arg03, fp
0f4c8     18 4E 85 F1 | 	sub	fp, #24
0f4cc     37 00 00 FF 
0f4d0     28 E4 05 F1 | 	add	objptr, ##28200
0f4d4     F2 18 02 FB | 	rdlong	arg04, objptr
0f4d8     37 00 00 FF 
0f4dc     28 E4 85 F1 | 	sub	objptr, ##28200
0f4e0     70 53 B1 FD | 	call	#_hg010b_spin2_circle
0f4e4                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f4e4     54 00 90 FD | 	jmp	#LR__1261
0f4e8                 | LR__1260
0f4e8     A7 12 02 F6 | 	mov	arg01, fp
0f4ec     D0 E2 BF FD | 	call	#_converttoint
0f4f0     FD 26 02 F6 | 	mov	local01, result1
0f4f4     0C 4E 05 F1 | 	add	fp, #12
0f4f8     A7 12 02 F6 | 	mov	arg01, fp
0f4fc     0C 4E 85 F1 | 	sub	fp, #12
0f500     BC E2 BF FD | 	call	#_converttoint
0f504     FD 28 02 F6 | 	mov	local02, result1
0f508     18 4E 05 F1 | 	add	fp, #24
0f50c     A7 12 02 F6 | 	mov	arg01, fp
0f510     18 4E 85 F1 | 	sub	fp, #24
0f514     A8 E2 BF FD | 	call	#_converttoint
0f518     FD 16 02 F6 | 	mov	arg03, result1
0f51c     37 00 00 FF 
0f520     28 E4 05 F1 | 	add	objptr, ##28200
0f524     F2 18 02 FB | 	rdlong	arg04, objptr
0f528     37 00 00 FF 
0f52c     28 E4 85 F1 | 	sub	objptr, ##28200
0f530     13 13 02 F6 | 	mov	arg01, local01
0f534     14 15 02 F6 | 	mov	arg02, local02
0f538     18 53 B1 FD | 	call	#_hg010b_spin2_circle
0f53c                 | LR__1261
0f53c     A7 F0 03 F6 | 	mov	ptra, fp
0f540     B2 00 A0 FD | 	call	#popregs_
0f544                 | _do_circle_ret
0f544     2D 00 64 FD | 	ret
0f548                 | 
0f548                 | ' 
0f548                 | ' '-------------------- click
0f548                 | ' 
0f548                 | ' sub do_click
0f548                 | _do_click
0f548     90 E0 BF FD | 	call	#_pop
0f54c     00 FA 4D F2 | 	cmps	result1, #0 wz
0f550                 | ' 
0f550                 | ' t1=pop()
0f550                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f550     50 00 00 AF 
0f554     3C E5 05 A1 |  if_e	add	objptr, ##41276
0f558     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f55c     50 00 00 FF 
0f560     3C E5 C5 F3 | 	sumz	objptr, ##41276
0f564     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f568     50 00 00 5F 
0f56c     3C E5 85 51 |  if_ne	sub	objptr, ##41276
0f570                 | _do_click_ret
0f570     2D 00 64 FD | 	ret
0f574                 | 
0f574                 | ' 
0f574                 | ' '-------------------- close
0f574                 | ' 
0f574                 | ' sub do_close
0f574                 | _do_close
0f574     03 4A 05 F6 | 	mov	COUNT_, #3
0f578     A8 00 A0 FD | 	call	#pushregs_
0f57c     5C E0 BF FD | 	call	#_pop
0f580     FD 26 02 F6 | 	mov	local01, result1
0f584     FF 16 02 F6 | 	mov	arg03, result3
0f588     FE 28 02 F6 | 	mov	local02, result2
0f58c     0B 2B 02 F6 | 	mov	local03, arg03
0f590                 | ' 
0f590                 | ' numpar=compiledline(lineptr_e).result.uresult
0f590                 | ' t1=pop()
0f590                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f590     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f594     44 00 90 AD |  if_e	jmp	#LR__1270
0f598     00 12 06 F6 | 	mov	arg01, #0
0f59c     70 D0 B1 FD | 	call	#__system___getiolock_0606
0f5a0     FD 12 02 F6 | 	mov	arg01, result1
0f5a4     C4 73 B1 FD | 	call	#__system___lockmem
0f5a8     B6 01 00 FF 
0f5ac     D7 14 06 F6 | 	mov	arg02, ##@LR__5865
0f5b0     00 12 06 F6 | 	mov	arg01, #0
0f5b4     00 16 06 F6 | 	mov	arg03, #0
0f5b8     A8 80 B1 FD | 	call	#__system___basic_print_string
0f5bc     00 12 06 F6 | 	mov	arg01, #0
0f5c0     0A 14 06 F6 | 	mov	arg02, #10
0f5c4     00 16 06 F6 | 	mov	arg03, #0
0f5c8     40 80 B1 FD | 	call	#__system___basic_print_char
0f5cc     00 12 06 F6 | 	mov	arg01, #0
0f5d0     3C D0 B1 FD | 	call	#__system___getiolock_0606
0f5d4     FD 00 68 FC | 	wrlong	#0, result1
0f5d8     08 00 90 FD | 	jmp	#LR__1271
0f5dc                 | LR__1270
0f5dc                 | ' channel  = t1.result.iresult
0f5dc                 | ' close #channel
0f5dc     13 13 02 F6 | 	mov	arg01, local01
0f5e0     E4 C6 B1 FD | 	call	#__system__close
0f5e4                 | LR__1271
0f5e4     A7 F0 03 F6 | 	mov	ptra, fp
0f5e8     B2 00 A0 FD | 	call	#popregs_
0f5ec                 | _do_close_ret
0f5ec     2D 00 64 FD | 	ret
0f5f0                 | 
0f5f0                 | ' 
0f5f0                 | ' '-------------------- cls
0f5f0                 | ' 
0f5f0                 | ' sub do_cls
0f5f0                 | _do_cls
0f5f0     37 00 00 FF 
0f5f4     3C E4 05 F1 | 	add	objptr, ##28220
0f5f8     F2 12 02 FB | 	rdlong	arg01, objptr
0f5fc     04 E4 85 F1 | 	sub	objptr, #4
0f600     F2 14 02 FB | 	rdlong	arg02, objptr
0f604     37 00 00 FF 
0f608     38 E4 85 F1 | 	sub	objptr, ##28216
0f60c     D8 56 B1 FD | 	call	#_hg010b_spin2_cls
0f610     37 00 00 FF 
0f614     3C E4 05 F1 | 	add	objptr, ##28220
0f618     F2 14 02 FB | 	rdlong	arg02, objptr
0f61c     14 E4 85 F1 | 	sub	objptr, #20
0f620     F2 14 62 FC | 	wrlong	arg02, objptr
0f624     37 00 00 FF 
0f628     28 E4 85 F1 | 	sub	objptr, ##28200
0f62c                 | _do_cls_ret
0f62c     2D 00 64 FD | 	ret
0f630                 | 
0f630                 | ' 
0f630                 | ' sub do_coginit
0f630                 | _do_coginit
0f630     00 4A 05 F6 | 	mov	COUNT_, #0
0f634     A8 00 A0 FD | 	call	#pushregs_
0f638     08 00 00 FF 
0f63c     1C F0 07 F1 | 	add	ptra, ##4124
0f640     4A 00 00 FF 
0f644     80 E4 05 F1 | 	add	objptr, ##38016
0f648     F2 FA 01 FB | 	rdlong	result1, objptr
0f64c     FD FC 01 F6 | 	mov	result2, result1
0f650     01 FC 65 F0 | 	shl	result2, #1
0f654     FD FC 01 F1 | 	add	result2, result1
0f658     02 FC 65 F0 | 	shl	result2, #2
0f65c     03 00 00 FF 
0f660     04 E4 85 F1 | 	sub	objptr, ##1540
0f664     F2 FC 01 F1 | 	add	result2, objptr
0f668     FE FC 01 FB | 	rdlong	result2, result2
0f66c     A7 FC 61 FC | 	wrlong	result2, fp
0f670                 | ' numpar=compiledline(lineptr_e).result.uresult
0f670                 | ' if numpar<2 orelse numpar>3 then print "coginit: "; : printerror(39) : return
0f670     02 FC 55 F2 | 	cmps	result2, #2 wc
0f674     47 00 00 FF 
0f678     7C E4 85 F1 | 	sub	objptr, ##36476
0f67c     0C 00 90 CD |  if_b	jmp	#LR__1280
0f680     A7 FA 01 FB | 	rdlong	result1, fp
0f684     04 FA 55 F2 | 	cmps	result1, #4 wc
0f688     40 00 90 CD |  if_b	jmp	#LR__1281
0f68c                 | LR__1280
0f68c     00 12 06 F6 | 	mov	arg01, #0
0f690     7C CF B1 FD | 	call	#__system___getiolock_0606
0f694     FD 12 02 F6 | 	mov	arg01, result1
0f698     D0 72 B1 FD | 	call	#__system___lockmem
0f69c     B6 01 00 FF 
0f6a0     E9 14 06 F6 | 	mov	arg02, ##@LR__5866
0f6a4     00 12 06 F6 | 	mov	arg01, #0
0f6a8     00 16 06 F6 | 	mov	arg03, #0
0f6ac     B4 7F B1 FD | 	call	#__system___basic_print_string
0f6b0     00 12 06 F6 | 	mov	arg01, #0
0f6b4     58 CF B1 FD | 	call	#__system___getiolock_0606
0f6b8     FD 00 68 FC | 	wrlong	#0, result1
0f6bc     27 12 06 F6 | 	mov	arg01, #39
0f6c0     00 14 06 F6 | 	mov	arg02, #0
0f6c4     B4 38 B1 FD | 	call	#_printerror
0f6c8     94 01 90 FD | 	jmp	#LR__1285
0f6cc                 | LR__1281
0f6cc     0C DF BF FD | 	call	#_pop
0f6d0     FF 16 02 F6 | 	mov	arg03, result3
0f6d4     08 00 00 FF 
0f6d8     10 4E 05 F1 | 	add	fp, ##4112
0f6dc     A7 FA 61 FC | 	wrlong	result1, fp
0f6e0     04 4E 05 F1 | 	add	fp, #4
0f6e4     A7 FC 61 FC | 	wrlong	result2, fp
0f6e8     04 4E 05 F1 | 	add	fp, #4
0f6ec     A7 16 62 FC | 	wrlong	arg03, fp
0f6f0     08 4E 85 F1 | 	sub	fp, #8
0f6f4     A7 12 02 F6 | 	mov	arg01, fp
0f6f8     08 00 00 FF 
0f6fc     10 4E 85 F1 | 	sub	fp, ##4112
0f700     BC E0 BF FD | 	call	#_converttoint
0f704     FD 16 02 F6 | 	mov	arg03, result1
0f708     04 4E 05 F1 | 	add	fp, #4
0f70c     A7 16 62 FC | 	wrlong	arg03, fp
0f710     04 4E 85 F1 | 	sub	fp, #4
0f714     C4 DE BF FD | 	call	#_pop
0f718     FF 16 02 F6 | 	mov	arg03, result3
0f71c     08 00 00 FF 
0f720     10 4E 05 F1 | 	add	fp, ##4112
0f724     A7 FA 61 FC | 	wrlong	result1, fp
0f728     04 4E 05 F1 | 	add	fp, #4
0f72c     A7 FC 61 FC | 	wrlong	result2, fp
0f730     04 4E 05 F1 | 	add	fp, #4
0f734     A7 16 62 FC | 	wrlong	arg03, fp
0f738     08 4E 85 F1 | 	sub	fp, #8
0f73c     A7 12 02 F6 | 	mov	arg01, fp
0f740     08 00 00 FF 
0f744     10 4E 85 F1 | 	sub	fp, ##4112
0f748     74 E0 BF FD | 	call	#_converttoint
0f74c     08 4E 05 F1 | 	add	fp, #8
0f750     A7 FA 61 FC | 	wrlong	result1, fp
0f754     08 4E 85 F1 | 	sub	fp, #8
0f758                 | ' t1=pop()
0f758                 | ' ptra_val=converttoint(t1)
0f758                 | ' t1=pop()
0f758                 | ' addrval=converttoint(t1)
0f758                 | ' if numpar=3 then 
0f758     A7 FA 01 FB | 	rdlong	result1, fp
0f75c     03 FA 0D F2 | 	cmp	result1, #3 wz
0f760     48 00 90 5D |  if_ne	jmp	#LR__1282
0f764     74 DE BF FD | 	call	#_pop
0f768     FF 16 02 F6 | 	mov	arg03, result3
0f76c     08 00 00 FF 
0f770     10 4E 05 F1 | 	add	fp, ##4112
0f774     A7 FA 61 FC | 	wrlong	result1, fp
0f778     04 4E 05 F1 | 	add	fp, #4
0f77c     A7 FC 61 FC | 	wrlong	result2, fp
0f780     04 4E 05 F1 | 	add	fp, #4
0f784     A7 16 62 FC | 	wrlong	arg03, fp
0f788     08 4E 85 F1 | 	sub	fp, #8
0f78c     A7 12 02 F6 | 	mov	arg01, fp
0f790     08 00 00 FF 
0f794     10 4E 85 F1 | 	sub	fp, ##4112
0f798     24 E0 BF FD | 	call	#_converttoint
0f79c     0C 4E 05 F1 | 	add	fp, #12
0f7a0     A7 FA 61 FC | 	wrlong	result1, fp
0f7a4     0C 4E 85 F1 | 	sub	fp, #12
0f7a8     0C 00 90 FD | 	jmp	#LR__1283
0f7ac                 | LR__1282
0f7ac     0C 4E 05 F1 | 	add	fp, #12
0f7b0     A7 20 68 FC | 	wrlong	#16, fp
0f7b4     0C 4E 85 F1 | 	sub	fp, #12
0f7b8                 | LR__1283
0f7b8                 | '     
0f7b8                 | ' if addrval>$80000 then psram.read1(varptr(tempbuf(0)),addrval,4096) : addrval=varptr(tempbuf(0))
0f7b8     08 4E 05 F1 | 	add	fp, #8
0f7bc     A7 16 02 FB | 	rdlong	arg03, fp
0f7c0     08 4E 85 F1 | 	sub	fp, #8
0f7c4     00 04 00 FF 
0f7c8     01 16 56 F2 | 	cmps	arg03, ##524289 wc
0f7cc     40 00 90 CD |  if_b	jmp	#LR__1284
0f7d0     10 4E 05 F1 | 	add	fp, #16
0f7d4     A7 12 02 F6 | 	mov	arg01, fp
0f7d8     08 4E 85 F1 | 	sub	fp, #8
0f7dc     A7 14 02 FB | 	rdlong	arg02, fp
0f7e0     08 4E 85 F1 | 	sub	fp, #8
0f7e4     0C 16 C6 F9 | 	decod	arg03, #12
0f7e8     0B 00 00 FF 
0f7ec     CC E4 05 F1 | 	add	objptr, ##5836
0f7f0     F0 64 B1 FD | 	call	#_psram_spin2_read1
0f7f4     0B 00 00 FF 
0f7f8     CC E4 85 F1 | 	sub	objptr, ##5836
0f7fc     10 4E 05 F1 | 	add	fp, #16
0f800     A7 FA 01 F6 | 	mov	result1, fp
0f804     08 4E 85 F1 | 	sub	fp, #8
0f808     A7 FA 61 FC | 	wrlong	result1, fp
0f80c     08 4E 85 F1 | 	sub	fp, #8
0f810                 | LR__1284
0f810     0C 4E 05 F1 | 	add	fp, #12
0f814     A7 FA 01 FB | 	rdlong	result1, fp
0f818     04 4E 85 F1 | 	sub	fp, #4
0f81c     A7 14 02 FB | 	rdlong	arg02, fp
0f820     04 4E 85 F1 | 	sub	fp, #4
0f824     A7 16 02 FB | 	rdlong	arg03, fp
0f828                 | ' 
0f828                 | '  asm
0f828     28 16 62 FD | 	setq	arg03
0f82c     0A FB F1 FC | 	coginit	result1, arg02 wc
0f830                 | '  
0f830                 | ' return cog 
0f830     08 4E 05 F1 | 	add	fp, #8
0f834     A7 FA 61 FC | 	wrlong	result1, fp
0f838     08 00 00 FF 
0f83c     04 4E 05 F1 | 	add	fp, ##4100
0f840     A7 FA 61 FC | 	wrlong	result1, fp
0f844     08 4E 05 F1 | 	add	fp, #8
0f848     A7 38 68 FC | 	wrlong	#28, fp
0f84c     08 4E 85 F1 | 	sub	fp, #8
0f850     A7 12 02 F6 | 	mov	arg01, fp
0f854     08 00 00 FF 
0f858     10 4E 85 F1 | 	sub	fp, ##4112
0f85c     14 DE BF FD | 	call	#_push
0f860                 | LR__1285
0f860     A7 F0 03 F6 | 	mov	ptra, fp
0f864     B2 00 A0 FD | 	call	#popregs_
0f868                 | _do_coginit_ret
0f868     2D 00 64 FD | 	ret
0f86c                 | 
0f86c                 | ' 
0f86c                 | ' '-------------------- cogstop
0f86c                 | ' 
0f86c                 | ' sub do_cogstop
0f86c                 | _do_cogstop
0f86c     00 4A 05 F6 | 	mov	COUNT_, #0
0f870     A8 00 A0 FD | 	call	#pushregs_
0f874     0C F0 07 F1 | 	add	ptra, #12
0f878     60 DD BF FD | 	call	#_pop
0f87c     A7 FA 61 FC | 	wrlong	result1, fp
0f880     04 4E 05 F1 | 	add	fp, #4
0f884     A7 FC 61 FC | 	wrlong	result2, fp
0f888     04 4E 05 F1 | 	add	fp, #4
0f88c     A7 FE 61 FC | 	wrlong	result3, fp
0f890     08 4E 85 F1 | 	sub	fp, #8
0f894     A7 12 02 F6 | 	mov	arg01, fp
0f898     24 DF BF FD | 	call	#_converttoint
0f89c     03 FA 61 FD | 	cogstop	result1
0f8a0     A7 F0 03 F6 | 	mov	ptra, fp
0f8a4     B2 00 A0 FD | 	call	#popregs_
0f8a8                 | _do_cogstop_ret
0f8a8     2D 00 64 FD | 	ret
0f8ac                 | 
0f8ac                 | ' 
0f8ac                 | ' '-------------------- color
0f8ac                 | ' 
0f8ac                 | ' sub do_color
0f8ac                 | _do_color
0f8ac     03 4A 05 F6 | 	mov	COUNT_, #3
0f8b0     A8 00 A0 FD | 	call	#pushregs_
0f8b4     24 DD BF FD | 	call	#_pop
0f8b8     FD 26 02 F6 | 	mov	local01, result1
0f8bc     FE 28 02 F6 | 	mov	local02, result2
0f8c0     FF 2A 02 F6 | 	mov	local03, result3
0f8c4     37 00 00 FF 
0f8c8     28 E4 05 F1 | 	add	objptr, ##28200
0f8cc     F2 26 62 FC | 	wrlong	local01, objptr
0f8d0     37 00 00 FF 
0f8d4     28 E4 85 F1 | 	sub	objptr, ##28200
0f8d8     A7 F0 03 F6 | 	mov	ptra, fp
0f8dc     B2 00 A0 FD | 	call	#popregs_
0f8e0                 | _do_color_ret
0f8e0     2D 00 64 FD | 	ret
0f8e4                 | 
0f8e4                 | ' 
0f8e4                 | ' '-------------------- copy
0f8e4                 | ' 
0f8e4                 | ' sub do_copy
0f8e4                 | _do_copy
0f8e4     08 4A 05 F6 | 	mov	COUNT_, #8
0f8e8     A8 00 A0 FD | 	call	#pushregs_
0f8ec     EC DC BF FD | 	call	#_pop
0f8f0     FD 26 02 F6 | 	mov	local01, result1
0f8f4     FE 1A 02 F6 | 	mov	arg05, result2
0f8f8     FF 18 02 F6 | 	mov	arg04, result3
0f8fc     0D 29 02 F6 | 	mov	local02, arg05
0f900     0C 2B 02 F6 | 	mov	local03, arg04
0f904     D4 DC BF FD | 	call	#_pop
0f908     FE 1A 02 F6 | 	mov	arg05, result2
0f90c     FF 18 02 F6 | 	mov	arg04, result3
0f910     FD 2C 02 F6 | 	mov	local04, result1
0f914     0D 2F 02 F6 | 	mov	local05, arg05
0f918     0C 31 02 F6 | 	mov	local06, arg04
0f91c                 | ' 
0f91c                 | ' t1=pop()
0f91c                 | ' t2=pop()
0f91c                 | ' if t2.result_type=result_string2 then 
0f91c     2B 30 0E F2 | 	cmp	local06, #43 wz
0f920     10 00 90 5D |  if_ne	jmp	#LR__1290
0f924     16 13 02 F6 | 	mov	arg01, local04
0f928     28 DE BF FD | 	call	#_convertstring
0f92c     FD 32 02 F6 | 	mov	local07, result1
0f930     2C 00 90 FD | 	jmp	#LR__1292
0f934                 | LR__1290
0f934     1F 30 0E F2 | 	cmp	local06, #31 wz
0f938     16 33 02 A6 |  if_e	mov	local07, local04
0f93c     20 00 90 AD |  if_e	jmp	#LR__1291
0f940     50 00 00 FF 
0f944     F0 E4 05 F1 | 	add	objptr, ##41200
0f948     F2 14 02 FB | 	rdlong	arg02, objptr
0f94c     50 00 00 FF 
0f950     F0 E4 85 F1 | 	sub	objptr, ##41200
0f954     0F 12 06 F6 | 	mov	arg01, #15
0f958     20 36 B1 FD | 	call	#_printerror
0f95c                 | '   printerror(15,runheader(0)) : return
0f95c     58 03 90 FD | 	jmp	#LR__1299
0f960                 | LR__1291
0f960                 | LR__1292
0f960                 | ' if t1.result_type=result_string2 then 
0f960     2B 2A 0E F2 | 	cmp	local03, #43 wz
0f964     10 00 90 5D |  if_ne	jmp	#LR__1293
0f968     13 13 02 F6 | 	mov	arg01, local01
0f96c     E4 DD BF FD | 	call	#_convertstring
0f970     FD 34 02 F6 | 	mov	local08, result1
0f974     2C 00 90 FD | 	jmp	#LR__1295
0f978                 | LR__1293
0f978     1F 2A 0E F2 | 	cmp	local03, #31 wz
0f97c     13 35 02 A6 |  if_e	mov	local08, local01
0f980     20 00 90 AD |  if_e	jmp	#LR__1294
0f984     50 00 00 FF 
0f988     F0 E4 05 F1 | 	add	objptr, ##41200
0f98c     F2 14 02 FB | 	rdlong	arg02, objptr
0f990     50 00 00 FF 
0f994     F0 E4 85 F1 | 	sub	objptr, ##41200
0f998     0F 12 06 F6 | 	mov	arg01, #15
0f99c     DC 35 B1 FD | 	call	#_printerror
0f9a0                 | '   printerror(15,runheader(0)) : return
0f9a0     14 03 90 FD | 	jmp	#LR__1299
0f9a4                 | LR__1294
0f9a4                 | LR__1295
0f9a4                 | ' 
0f9a4                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0f9a4     09 12 06 F6 | 	mov	arg01, #9
0f9a8     19 15 02 F6 | 	mov	arg02, local07
0f9ac     00 16 06 F6 | 	mov	arg03, #0
0f9b0     BC 7B B1 FD | 	call	#__system___basic_open_string
0f9b4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f9b8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f9bc     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0f9c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f9c4     52 00 00 FF 
0f9c8     D8 E4 05 F1 | 	add	objptr, ##42200
0f9cc     F2 FA 61 FC | 	wrlong	result1, objptr
0f9d0     52 00 00 FF 
0f9d4     D8 E4 85 F1 | 	sub	objptr, ##42200
0f9d8     0C 01 90 AD |  if_e	jmp	#LR__1296
0f9dc     00 12 06 F6 | 	mov	arg01, #0
0f9e0     2C CC B1 FD | 	call	#__system___getiolock_0606
0f9e4     FD 12 02 F6 | 	mov	arg01, result1
0f9e8     80 6F B1 FD | 	call	#__system___lockmem
0f9ec     B6 01 00 FF 
0f9f0     F3 14 06 F6 | 	mov	arg02, ##@LR__5867
0f9f4     00 12 06 F6 | 	mov	arg01, #0
0f9f8     00 16 06 F6 | 	mov	arg03, #0
0f9fc     64 7C B1 FD | 	call	#__system___basic_print_string
0fa00     52 00 00 FF 
0fa04     D8 E4 05 F1 | 	add	objptr, ##42200
0fa08     F2 14 02 FB | 	rdlong	arg02, objptr
0fa0c     52 00 00 FF 
0fa10     D8 E4 85 F1 | 	sub	objptr, ##42200
0fa14     00 12 06 F6 | 	mov	arg01, #0
0fa18     00 16 06 F6 | 	mov	arg03, #0
0fa1c     0A 18 06 F6 | 	mov	arg04, #10
0fa20     84 7C B1 FD | 	call	#__system___basic_print_integer
0fa24     B6 01 00 FF 
0fa28     03 15 06 F6 | 	mov	arg02, ##@LR__5868
0fa2c     00 12 06 F6 | 	mov	arg01, #0
0fa30     00 16 06 F6 | 	mov	arg03, #0
0fa34     2C 7C B1 FD | 	call	#__system___basic_print_string
0fa38     50 00 00 FF 
0fa3c     F0 E4 05 F1 | 	add	objptr, ##41200
0fa40     F2 14 02 FB | 	rdlong	arg02, objptr
0fa44     50 00 00 FF 
0fa48     F0 E4 85 F1 | 	sub	objptr, ##41200
0fa4c     00 12 06 F6 | 	mov	arg01, #0
0fa50     00 16 06 F6 | 	mov	arg03, #0
0fa54     0A 18 06 F6 | 	mov	arg04, #10
0fa58     8C 7C B1 FD | 	call	#__system___basic_print_unsigned
0fa5c     B6 01 00 FF 
0fa60     0D 15 06 F6 | 	mov	arg02, ##@LR__5869
0fa64     00 12 06 F6 | 	mov	arg01, #0
0fa68     00 16 06 F6 | 	mov	arg03, #0
0fa6c     F4 7B B1 FD | 	call	#__system___basic_print_string
0fa70     00 34 06 F6 | 	mov	local08, #0
0fa74     52 00 00 FF 
0fa78     D8 E4 05 F1 | 	add	objptr, ##42200
0fa7c     F2 12 02 FB | 	rdlong	arg01, objptr
0fa80     52 00 00 FF 
0fa84     D8 E4 85 F1 | 	sub	objptr, ##42200
0fa88     70 98 B1 FD | 	call	#__system___strerror
0fa8c     FD 14 02 F6 | 	mov	arg02, result1
0fa90     1A 13 02 F6 | 	mov	arg01, local08
0fa94     00 16 06 F6 | 	mov	arg03, #0
0fa98     C8 7B B1 FD | 	call	#__system___basic_print_string
0fa9c     B6 01 00 FF 
0faa0     10 15 06 F6 | 	mov	arg02, ##@LR__5870
0faa4     00 12 06 F6 | 	mov	arg01, #0
0faa8     00 16 06 F6 | 	mov	arg03, #0
0faac     B4 7B B1 FD | 	call	#__system___basic_print_string
0fab0     00 12 06 F6 | 	mov	arg01, #0
0fab4     19 15 02 F6 | 	mov	arg02, local07
0fab8     00 16 06 F6 | 	mov	arg03, #0
0fabc     A4 7B B1 FD | 	call	#__system___basic_print_string
0fac0     00 12 06 F6 | 	mov	arg01, #0
0fac4     0A 14 06 F6 | 	mov	arg02, #10
0fac8     00 16 06 F6 | 	mov	arg03, #0
0facc     3C 7B B1 FD | 	call	#__system___basic_print_char
0fad0     00 12 06 F6 | 	mov	arg01, #0
0fad4     38 CB B1 FD | 	call	#__system___getiolock_0606
0fad8     FD 00 68 FC | 	wrlong	#0, result1
0fadc     09 12 06 F6 | 	mov	arg01, #9
0fae0     E4 C1 B1 FD | 	call	#__system__close
0fae4     D0 01 90 FD | 	jmp	#LR__1299
0fae8                 | LR__1296
0fae8                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0fae8     08 12 06 F6 | 	mov	arg01, #8
0faec     1A 15 02 F6 | 	mov	arg02, local08
0faf0     0D 16 06 F6 | 	mov	arg03, #13
0faf4     78 7A B1 FD | 	call	#__system___basic_open_string
0faf8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fafc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0fb00     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0fb04     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fb08     52 00 00 FF 
0fb0c     D8 E4 05 F1 | 	add	objptr, ##42200
0fb10     F2 FA 61 FC | 	wrlong	result1, objptr
0fb14     52 00 00 FF 
0fb18     D8 E4 85 F1 | 	sub	objptr, ##42200
0fb1c     0C 01 90 AD |  if_e	jmp	#LR__1297
0fb20     00 12 06 F6 | 	mov	arg01, #0
0fb24     E8 CA B1 FD | 	call	#__system___getiolock_0606
0fb28     FD 12 02 F6 | 	mov	arg01, result1
0fb2c     3C 6E B1 FD | 	call	#__system___lockmem
0fb30     B6 01 00 FF 
0fb34     1E 15 06 F6 | 	mov	arg02, ##@LR__5871
0fb38     00 12 06 F6 | 	mov	arg01, #0
0fb3c     00 16 06 F6 | 	mov	arg03, #0
0fb40     20 7B B1 FD | 	call	#__system___basic_print_string
0fb44     52 00 00 FF 
0fb48     D8 E4 05 F1 | 	add	objptr, ##42200
0fb4c     F2 14 02 FB | 	rdlong	arg02, objptr
0fb50     52 00 00 FF 
0fb54     D8 E4 85 F1 | 	sub	objptr, ##42200
0fb58     00 12 06 F6 | 	mov	arg01, #0
0fb5c     00 16 06 F6 | 	mov	arg03, #0
0fb60     0A 18 06 F6 | 	mov	arg04, #10
0fb64     40 7B B1 FD | 	call	#__system___basic_print_integer
0fb68     B6 01 00 FF 
0fb6c     2E 15 06 F6 | 	mov	arg02, ##@LR__5872
0fb70     00 12 06 F6 | 	mov	arg01, #0
0fb74     00 16 06 F6 | 	mov	arg03, #0
0fb78     E8 7A B1 FD | 	call	#__system___basic_print_string
0fb7c     50 00 00 FF 
0fb80     F0 E4 05 F1 | 	add	objptr, ##41200
0fb84     F2 14 02 FB | 	rdlong	arg02, objptr
0fb88     50 00 00 FF 
0fb8c     F0 E4 85 F1 | 	sub	objptr, ##41200
0fb90     00 12 06 F6 | 	mov	arg01, #0
0fb94     00 16 06 F6 | 	mov	arg03, #0
0fb98     0A 18 06 F6 | 	mov	arg04, #10
0fb9c     48 7B B1 FD | 	call	#__system___basic_print_unsigned
0fba0     B6 01 00 FF 
0fba4     38 15 06 F6 | 	mov	arg02, ##@LR__5873
0fba8     00 12 06 F6 | 	mov	arg01, #0
0fbac     00 16 06 F6 | 	mov	arg03, #0
0fbb0     B0 7A B1 FD | 	call	#__system___basic_print_string
0fbb4     00 32 06 F6 | 	mov	local07, #0
0fbb8     52 00 00 FF 
0fbbc     D8 E4 05 F1 | 	add	objptr, ##42200
0fbc0     F2 12 02 FB | 	rdlong	arg01, objptr
0fbc4     52 00 00 FF 
0fbc8     D8 E4 85 F1 | 	sub	objptr, ##42200
0fbcc     2C 97 B1 FD | 	call	#__system___strerror
0fbd0     FD 14 02 F6 | 	mov	arg02, result1
0fbd4     19 13 02 F6 | 	mov	arg01, local07
0fbd8     00 16 06 F6 | 	mov	arg03, #0
0fbdc     84 7A B1 FD | 	call	#__system___basic_print_string
0fbe0     B6 01 00 FF 
0fbe4     3B 15 06 F6 | 	mov	arg02, ##@LR__5874
0fbe8     00 12 06 F6 | 	mov	arg01, #0
0fbec     00 16 06 F6 | 	mov	arg03, #0
0fbf0     70 7A B1 FD | 	call	#__system___basic_print_string
0fbf4     00 12 06 F6 | 	mov	arg01, #0
0fbf8     1A 15 02 F6 | 	mov	arg02, local08
0fbfc     00 16 06 F6 | 	mov	arg03, #0
0fc00     60 7A B1 FD | 	call	#__system___basic_print_string
0fc04     00 12 06 F6 | 	mov	arg01, #0
0fc08     0A 14 06 F6 | 	mov	arg02, #10
0fc0c     00 16 06 F6 | 	mov	arg03, #0
0fc10     F8 79 B1 FD | 	call	#__system___basic_print_char
0fc14     00 12 06 F6 | 	mov	arg01, #0
0fc18     F4 C9 B1 FD | 	call	#__system___getiolock_0606
0fc1c     FD 00 68 FC | 	wrlong	#0, result1
0fc20     08 12 06 F6 | 	mov	arg01, #8
0fc24     A0 C0 B1 FD | 	call	#__system__close
0fc28     8C 00 90 FD | 	jmp	#LR__1299
0fc2c                 | LR__1297
0fc2c                 | ' 
0fc2c                 | ' do
0fc2c                 | LR__1298
0fc2c                 | '   get #9,,block(0),1024,r
0fc2c     4E 00 00 FF 
0fc30     B4 E4 05 F1 | 	add	objptr, ##40116
0fc34     F2 16 02 F6 | 	mov	arg03, objptr
0fc38     4E 00 00 FF 
0fc3c     B4 E4 85 F1 | 	sub	objptr, ##40116
0fc40     09 12 06 F6 | 	mov	arg01, #9
0fc44     00 14 06 F6 | 	mov	arg02, #0
0fc48     0A 18 C6 F9 | 	decod	arg04, #10
0fc4c     01 1A 06 F6 | 	mov	arg05, #1
0fc50     8C 7B B1 FD | 	call	#__system___basic_get
0fc54     52 00 00 FF 
0fc58     10 E5 05 F1 | 	add	objptr, ##42256
0fc5c     F2 FA 61 FC | 	wrlong	result1, objptr
0fc60                 | '   put #8,,block(0),r
0fc60     04 00 00 FF 
0fc64     5C E4 85 F1 | 	sub	objptr, ##2140
0fc68     F2 16 02 F6 | 	mov	arg03, objptr
0fc6c     FD 18 02 F6 | 	mov	arg04, result1
0fc70     4E 00 00 FF 
0fc74     B4 E4 85 F1 | 	sub	objptr, ##40116
0fc78     08 12 06 F6 | 	mov	arg01, #8
0fc7c     00 14 06 F6 | 	mov	arg02, #0
0fc80     01 1A 06 F6 | 	mov	arg05, #1
0fc84     EC 7A B1 FD | 	call	#__system___basic_put
0fc88     52 00 00 FF 
0fc8c     10 E5 05 F1 | 	add	objptr, ##42256
0fc90     F2 34 02 FB | 	rdlong	local08, objptr
0fc94     52 00 00 FF 
0fc98     10 E5 85 F1 | 	sub	objptr, ##42256
0fc9c     02 00 00 FF 
0fca0     00 34 0E F2 | 	cmp	local08, ##1024 wz
0fca4     84 FF 9F AD |  if_e	jmp	#LR__1298
0fca8                 | ' close #8
0fca8     08 12 06 F6 | 	mov	arg01, #8
0fcac     18 C0 B1 FD | 	call	#__system__close
0fcb0                 | ' close #9
0fcb0     09 12 06 F6 | 	mov	arg01, #9
0fcb4     10 C0 B1 FD | 	call	#__system__close
0fcb8                 | LR__1299
0fcb8     A7 F0 03 F6 | 	mov	ptra, fp
0fcbc     B2 00 A0 FD | 	call	#popregs_
0fcc0                 | _do_copy_ret
0fcc0     2D 00 64 FD | 	ret
0fcc4                 | 
0fcc4                 | ' 
0fcc4                 | ' '-------------------- cos
0fcc4                 | ' 
0fcc4                 | ' sub do_cos
0fcc4                 | _do_cos
0fcc4     01 4A 05 F6 | 	mov	COUNT_, #1
0fcc8     A8 00 A0 FD | 	call	#pushregs_
0fccc     10 F0 07 F1 | 	add	ptra, #16
0fcd0     4A 00 00 FF 
0fcd4     80 E4 05 F1 | 	add	objptr, ##38016
0fcd8     F2 26 02 FB | 	rdlong	local01, objptr
0fcdc     13 17 02 F6 | 	mov	arg03, local01
0fce0     01 16 66 F0 | 	shl	arg03, #1
0fce4     13 17 02 F1 | 	add	arg03, local01
0fce8     02 16 66 F0 | 	shl	arg03, #2
0fcec     03 00 00 FF 
0fcf0     04 E4 85 F1 | 	sub	objptr, ##1540
0fcf4     F2 16 02 F1 | 	add	arg03, objptr
0fcf8     0B 17 02 FB | 	rdlong	arg03, arg03
0fcfc     0C 4E 05 F1 | 	add	fp, #12
0fd00     A7 16 62 FC | 	wrlong	arg03, fp
0fd04                 | ' 
0fd04                 | ' numpar=compiledline(lineptr_e).result.uresult
0fd04                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0fd04     0C 4E 85 F1 | 	sub	fp, #12
0fd08     02 16 16 F2 | 	cmp	arg03, #2 wc
0fd0c     47 00 00 FF 
0fd10     7C E4 85 F1 | 	sub	objptr, ##36476
0fd14     0C 4E 05 C1 |  if_b	add	fp, #12
0fd18     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0fd1c     0C 4E 85 C1 |  if_b	sub	fp, #12
0fd20     40 00 90 4D |  if_c_and_nz	jmp	#LR__1300
0fd24     00 12 06 F6 | 	mov	arg01, #0
0fd28     E4 C8 B1 FD | 	call	#__system___getiolock_0606
0fd2c     FD 12 02 F6 | 	mov	arg01, result1
0fd30     38 6C B1 FD | 	call	#__system___lockmem
0fd34     B6 01 00 FF 
0fd38     49 15 06 F6 | 	mov	arg02, ##@LR__5875
0fd3c     00 12 06 F6 | 	mov	arg01, #0
0fd40     00 16 06 F6 | 	mov	arg03, #0
0fd44     1C 79 B1 FD | 	call	#__system___basic_print_string
0fd48     00 12 06 F6 | 	mov	arg01, #0
0fd4c     C0 C8 B1 FD | 	call	#__system___getiolock_0606
0fd50     FD 00 68 FC | 	wrlong	#0, result1
0fd54     27 12 06 F6 | 	mov	arg01, #39
0fd58     00 14 06 F6 | 	mov	arg02, #0
0fd5c     1C 32 B1 FD | 	call	#_printerror
0fd60     78 00 90 FD | 	jmp	#LR__1301
0fd64                 | LR__1300
0fd64     74 D8 BF FD | 	call	#_pop
0fd68     A7 FA 61 FC | 	wrlong	result1, fp
0fd6c     04 4E 05 F1 | 	add	fp, #4
0fd70     A7 FC 61 FC | 	wrlong	result2, fp
0fd74     04 4E 05 F1 | 	add	fp, #4
0fd78     A7 FE 61 FC | 	wrlong	result3, fp
0fd7c     08 4E 85 F1 | 	sub	fp, #8
0fd80     52 00 00 FF 
0fd84     A8 E4 05 F1 | 	add	objptr, ##42152
0fd88     F2 26 02 FB | 	rdlong	local01, objptr
0fd8c     52 00 00 FF 
0fd90     A8 E4 85 F1 | 	sub	objptr, ##42152
0fd94     A7 12 02 F6 | 	mov	arg01, fp
0fd98     E0 DA BF FD | 	call	#_converttofloat
0fd9c     FD 14 02 F6 | 	mov	arg02, result1
0fda0     13 13 02 F6 | 	mov	arg01, local01
0fda4     40 9A B1 FD | 	call	#__system___float_mul
0fda8     FD 14 02 F6 | 	mov	arg02, result1
0fdac     87 E4 1F FF 
0fdb0     DB 13 06 F6 | 	mov	arg01, ##1070141403
0fdb4     1F 14 E6 F4 | 	bitnot	arg02, #31
0fdb8     5C 96 B1 FD | 	call	#__system___float_add
0fdbc     FD 12 02 F6 | 	mov	arg01, result1
0fdc0     84 A3 B1 FD | 	call	#__system____builtin_sinf
0fdc4     A7 FA 61 FC | 	wrlong	result1, fp
0fdc8     08 4E 05 F1 | 	add	fp, #8
0fdcc     A7 3C 68 FC | 	wrlong	#30, fp
0fdd0     08 4E 85 F1 | 	sub	fp, #8
0fdd4     A7 12 02 F6 | 	mov	arg01, fp
0fdd8     98 D8 BF FD | 	call	#_push
0fddc                 | LR__1301
0fddc     A7 F0 03 F6 | 	mov	ptra, fp
0fde0     B2 00 A0 FD | 	call	#popregs_
0fde4                 | _do_cos_ret
0fde4     2D 00 64 FD | 	ret
0fde8                 | 
0fde8                 | ' 
0fde8                 | ' '-------------------- cursor
0fde8                 | ' 
0fde8                 | ' sub do_cursor
0fde8                 | _do_cursor
0fde8     F0 D7 BF FD | 	call	#_pop
0fdec     00 FA 4D F2 | 	cmps	result1, #0 wz
0fdf0                 | ' t1=pop()
0fdf0                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0fdf0     14 00 90 5D |  if_ne	jmp	#LR__1310
0fdf4     11 12 06 F6 | 	mov	arg01, #17
0fdf8     00 14 06 F6 | 	mov	arg02, #0
0fdfc     00 16 06 F6 | 	mov	arg03, #0
0fe00     C4 41 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fe04     10 00 90 FD | 	jmp	#LR__1311
0fe08                 | LR__1310
0fe08     11 12 06 F6 | 	mov	arg01, #17
0fe0c     08 14 06 F6 | 	mov	arg02, #8
0fe10     10 16 06 F6 | 	mov	arg03, #16
0fe14     B0 41 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fe18                 | LR__1311
0fe18                 | _do_cursor_ret
0fe18     2D 00 64 FD | 	ret
0fe1c                 | 
0fe1c                 | ' 
0fe1c                 | ' '-------------------- defenv
0fe1c                 | ' 
0fe1c                 | ' sub do_defenv
0fe1c                 | _do_defenv
0fe1c     08 4A 05 F6 | 	mov	COUNT_, #8
0fe20     A8 00 A0 FD | 	call	#pushregs_
0fe24     58 F0 07 F1 | 	add	ptra, #88
0fe28     4A 00 00 FF 
0fe2c     80 E4 05 F1 | 	add	objptr, ##38016
0fe30     F2 26 02 FB | 	rdlong	local01, objptr
0fe34     13 1B 02 F6 | 	mov	arg05, local01
0fe38     01 1A 66 F0 | 	shl	arg05, #1
0fe3c     13 1B 02 F1 | 	add	arg05, local01
0fe40     02 1A 66 F0 | 	shl	arg05, #2
0fe44     03 00 00 FF 
0fe48     04 E4 85 F1 | 	sub	objptr, ##1540
0fe4c     F2 1A 02 F1 | 	add	arg05, objptr
0fe50     0D 1B 02 FB | 	rdlong	arg05, arg05
0fe54     10 4E 05 F1 | 	add	fp, #16
0fe58     A7 1A 62 FC | 	wrlong	arg05, fp
0fe5c                 | ' 
0fe5c                 | ' numpar=compiledline(lineptr_e).result.uresult
0fe5c                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0fe5c     10 4E 85 F1 | 	sub	fp, #16
0fe60     02 1A 0E F2 | 	cmp	arg05, #2 wz
0fe64     47 00 00 FF 
0fe68     7C E4 85 F1 | 	sub	objptr, ##36476
0fe6c     10 4E 05 51 |  if_ne	add	fp, #16
0fe70     A7 26 02 5B |  if_ne	rdlong	local01, fp
0fe74     10 4E 85 51 |  if_ne	sub	fp, #16
0fe78     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0fe7c     90 0A 90 5D |  if_ne	jmp	#LR__1341
0fe80                 | ' 
0fe80                 | ' if numpar=2 then						' env from .h2 or from a pointer
0fe80     10 4E 05 F1 | 	add	fp, #16
0fe84     A7 26 02 FB | 	rdlong	local01, fp
0fe88     10 4E 85 F1 | 	sub	fp, #16
0fe8c     02 26 0E F2 | 	cmp	local01, #2 wz
0fe90     28 04 90 5D |  if_ne	jmp	#LR__1333
0fe94     44 D7 BF FD | 	call	#_pop
0fe98     FF 1A 02 F6 | 	mov	arg05, result3
0fe9c     40 4E 05 F1 | 	add	fp, #64
0fea0     A7 FA 61 FC | 	wrlong	result1, fp
0fea4     04 4E 05 F1 | 	add	fp, #4
0fea8     A7 FC 61 FC | 	wrlong	result2, fp
0feac     04 4E 05 F1 | 	add	fp, #4
0feb0     A7 1A 62 FC | 	wrlong	arg05, fp
0feb4                 | '   t1=pop()
0feb4                 | '   if t1.result_type=result_string2 then 
0feb4     48 4E 85 F1 | 	sub	fp, #72
0feb8     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0febc     20 00 90 5D |  if_ne	jmp	#LR__1320
0fec0     40 4E 05 F1 | 	add	fp, #64
0fec4     A7 12 02 FB | 	rdlong	arg01, fp
0fec8     40 4E 85 F1 | 	sub	fp, #64
0fecc     84 D8 BF FD | 	call	#_convertstring
0fed0     4C 4E 05 F1 | 	add	fp, #76
0fed4     A7 FA 61 FC | 	wrlong	result1, fp
0fed8     4C 4E 85 F1 | 	sub	fp, #76
0fedc     58 00 90 FD | 	jmp	#LR__1323
0fee0                 | LR__1320
0fee0     48 4E 05 F1 | 	add	fp, #72
0fee4     A7 26 02 FB | 	rdlong	local01, fp
0fee8     48 4E 85 F1 | 	sub	fp, #72
0feec     1F 26 0E F2 | 	cmp	local01, #31 wz
0fef0     18 00 90 5D |  if_ne	jmp	#LR__1321
0fef4     40 4E 05 F1 | 	add	fp, #64
0fef8     A7 26 02 FB | 	rdlong	local01, fp
0fefc     0C 4E 05 F1 | 	add	fp, #12
0ff00     A7 26 62 FC | 	wrlong	local01, fp
0ff04     4C 4E 85 F1 | 	sub	fp, #76
0ff08     2C 00 90 FD | 	jmp	#LR__1322
0ff0c                 | LR__1321
0ff0c     B6 01 00 FF 
0ff10     4F 27 06 F6 | 	mov	local01, ##@LR__5876
0ff14     4C 4E 05 F1 | 	add	fp, #76
0ff18     A7 26 62 FC | 	wrlong	local01, fp
0ff1c     0C 4E 85 F1 | 	sub	fp, #12
0ff20     A7 12 02 F6 | 	mov	arg01, fp
0ff24     40 4E 85 F1 | 	sub	fp, #64
0ff28     94 D8 BF FD | 	call	#_converttoint
0ff2c     1C 4E 05 F1 | 	add	fp, #28
0ff30     A7 FA 61 FC | 	wrlong	result1, fp
0ff34     1C 4E 85 F1 | 	sub	fp, #28
0ff38                 | LR__1322
0ff38                 | LR__1323
0ff38                 | '   if s1<>"" then 
0ff38     4C 4E 05 F1 | 	add	fp, #76
0ff3c     A7 12 02 FB | 	rdlong	arg01, fp
0ff40     4C 4E 85 F1 | 	sub	fp, #76
0ff44     B6 01 00 FF 
0ff48     50 15 06 F6 | 	mov	arg02, ##@LR__5877
0ff4c     44 6A B1 FD | 	call	#__system___string_cmp
0ff50     00 FA 0D F2 | 	cmp	result1, #0 wz
0ff54     28 02 90 AD |  if_e	jmp	#LR__1327
0ff58     80 D6 BF FD | 	call	#_pop
0ff5c     FF 26 02 F6 | 	mov	local01, result3
0ff60     40 4E 05 F1 | 	add	fp, #64
0ff64     A7 FA 61 FC | 	wrlong	result1, fp
0ff68     04 4E 05 F1 | 	add	fp, #4
0ff6c     A7 FC 61 FC | 	wrlong	result2, fp
0ff70     04 4E 05 F1 | 	add	fp, #4
0ff74     A7 26 62 FC | 	wrlong	local01, fp
0ff78     08 4E 85 F1 | 	sub	fp, #8
0ff7c     A7 12 02 F6 | 	mov	arg01, fp
0ff80     40 4E 85 F1 | 	sub	fp, #64
0ff84     38 D8 BF FD | 	call	#_converttoint
0ff88     18 4E 05 F1 | 	add	fp, #24
0ff8c     A7 FA 61 FC | 	wrlong	result1, fp
0ff90     18 4E 85 F1 | 	sub	fp, #24
0ff94                 | '     t1=pop()
0ff94                 | '     channel=converttoint(t1) 
0ff94                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0ff94     09 12 06 F6 | 	mov	arg01, #9
0ff98     2C BD B1 FD | 	call	#__system__close
0ff9c     09 26 06 F6 | 	mov	local01, #9
0ffa0     B6 01 00 FF 
0ffa4     51 13 06 F6 | 	mov	arg01, ##@LR__5878
0ffa8     4C 4E 05 F1 | 	add	fp, #76
0ffac     A7 14 02 FB | 	rdlong	arg02, fp
0ffb0     4C 4E 85 F1 | 	sub	fp, #76
0ffb4     10 6A B1 FD | 	call	#__system___string_concat
0ffb8     FD 14 02 F6 | 	mov	arg02, result1
0ffbc     13 13 02 F6 | 	mov	arg01, local01
0ffc0     00 16 06 F6 | 	mov	arg03, #0
0ffc4     A8 75 B1 FD | 	call	#__system___basic_open_string
0ffc8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ffcc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0ffd0     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0ffd4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ffd8     0C 4E 05 F1 | 	add	fp, #12
0ffdc     A7 FA 61 FC | 	wrlong	result1, fp
0ffe0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0ffe0     0C 4E 85 F1 | 	sub	fp, #12
0ffe4     A0 00 90 AD |  if_e	jmp	#LR__1324
0ffe8     00 12 06 F6 | 	mov	arg01, #0
0ffec     20 C6 B1 FD | 	call	#__system___getiolock_0606
0fff0     FD 12 02 F6 | 	mov	arg01, result1
0fff4     74 69 B1 FD | 	call	#__system___lockmem
0fff8     B6 01 00 FF 
0fffc     5E 15 06 F6 | 	mov	arg02, ##@LR__5879
10000     00 12 06 F6 | 	mov	arg01, #0
10004     00 16 06 F6 | 	mov	arg03, #0
10008     58 76 B1 FD | 	call	#__system___basic_print_string
1000c     0C 4E 05 F1 | 	add	fp, #12
10010     A7 14 02 FB | 	rdlong	arg02, fp
10014     0C 4E 85 F1 | 	sub	fp, #12
10018     00 12 06 F6 | 	mov	arg01, #0
1001c     00 16 06 F6 | 	mov	arg03, #0
10020     0A 18 06 F6 | 	mov	arg04, #10
10024     80 76 B1 FD | 	call	#__system___basic_print_integer
10028     B6 01 00 FF 
1002c     6C 15 06 F6 | 	mov	arg02, ##@LR__5880
10030     00 12 06 F6 | 	mov	arg01, #0
10034     00 16 06 F6 | 	mov	arg03, #0
10038     28 76 B1 FD | 	call	#__system___basic_print_string
1003c     00 26 06 F6 | 	mov	local01, #0
10040     0C 4E 05 F1 | 	add	fp, #12
10044     A7 12 02 FB | 	rdlong	arg01, fp
10048     0C 4E 85 F1 | 	sub	fp, #12
1004c     AC 92 B1 FD | 	call	#__system___strerror
10050     FD 14 02 F6 | 	mov	arg02, result1
10054     13 13 02 F6 | 	mov	arg01, local01
10058     00 16 06 F6 | 	mov	arg03, #0
1005c     04 76 B1 FD | 	call	#__system___basic_print_string
10060     00 12 06 F6 | 	mov	arg01, #0
10064     0A 14 06 F6 | 	mov	arg02, #10
10068     00 16 06 F6 | 	mov	arg03, #0
1006c     9C 75 B1 FD | 	call	#__system___basic_print_char
10070     00 12 06 F6 | 	mov	arg01, #0
10074     98 C5 B1 FD | 	call	#__system___getiolock_0606
10078     FD 00 68 FC | 	wrlong	#0, result1
1007c     09 12 06 F6 | 	mov	arg01, #9
10080     44 BC B1 FD | 	call	#__system__close
10084     88 08 90 FD | 	jmp	#LR__1341
10088                 | LR__1324
10088                 | '     get #9,17,envbuf8(channel,0),256
10088     18 4E 05 F1 | 	add	fp, #24
1008c     A7 1A 02 FB | 	rdlong	arg05, fp
10090     18 4E 85 F1 | 	sub	fp, #24
10094     0D 17 02 F6 | 	mov	arg03, arg05
10098     09 16 66 F0 | 	shl	arg03, #9
1009c     0D 17 02 F1 | 	add	arg03, arg05
100a0     0C 00 00 FF 
100a4     D8 E4 05 F1 | 	add	objptr, ##6360
100a8     F2 16 02 F1 | 	add	arg03, objptr
100ac     09 12 06 F6 | 	mov	arg01, #9
100b0     11 14 06 F6 | 	mov	arg02, #17
100b4     00 19 06 F6 | 	mov	arg04, #256
100b8     01 1A 06 F6 | 	mov	arg05, #1
100bc     0C 00 00 FF 
100c0     D8 E4 85 F1 | 	sub	objptr, ##6360
100c4     18 77 B1 FD | 	call	#__system___basic_get
100c8                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
100c8     14 4E 05 F1 | 	add	fp, #20
100cc     A7 FE 69 FC | 	wrlong	#255, fp
100d0     14 4E 85 F1 | 	sub	fp, #20
100d4     0C 00 00 FF 
100d8     D8 E4 05 F1 | 	add	objptr, ##6360
100dc     97 30 48 FB | 	callpa	#(@LR__1326-@LR__1325)>>2,fcache_load_ptr_
100e0                 | LR__1325
100e0     18 4E 05 F1 | 	add	fp, #24
100e4     A7 16 02 FB | 	rdlong	arg03, fp
100e8     0B 27 02 F6 | 	mov	local01, arg03
100ec     09 26 66 F0 | 	shl	local01, #9
100f0     F2 26 02 F1 | 	add	local01, objptr
100f4     04 4E 85 F1 | 	sub	fp, #4
100f8     A7 1A 02 FB | 	rdlong	arg05, fp
100fc     0D 19 02 F6 | 	mov	arg04, arg05
10100     01 18 66 F0 | 	shl	arg04, #1
10104     13 19 02 F1 | 	add	arg04, local01
10108     0B 27 02 F6 | 	mov	local01, arg03
1010c     09 26 66 F0 | 	shl	local01, #9
10110     0B 27 02 F1 | 	add	local01, arg03
10114     F2 26 02 F1 | 	add	local01, objptr
10118     13 1B 02 F1 | 	add	arg05, local01
1011c     0D 27 C2 FA | 	rdbyte	local01, arg05
10120     00 27 06 FA | 	mul	local01, #256
10124     0C 27 52 FC | 	wrword	local01, arg04
10128     A7 26 02 FB | 	rdlong	local01, fp
1012c     01 26 86 F1 | 	sub	local01, #1
10130     A7 26 62 FC | 	wrlong	local01, fp
10134     14 4E 85 F1 | 	sub	fp, #20
10138     00 26 56 F2 | 	cmps	local01, #0 wc
1013c     A0 FF 9F 3D |  if_ae	jmp	#LR__1325
10140                 | LR__1326
10140     0C 00 00 FF 
10144     D8 E4 85 F1 | 	sub	objptr, ##6360
10148                 | '     close #9
10148     09 12 06 F6 | 	mov	arg01, #9
1014c     78 BB B1 FD | 	call	#__system__close
10150     18 4E 05 F1 | 	add	fp, #24
10154     A7 26 02 FB | 	rdlong	local01, fp
10158     18 4E 85 F1 | 	sub	fp, #24
1015c     09 26 66 F0 | 	shl	local01, #9
10160     0C 00 00 FF 
10164     D8 E4 05 F1 | 	add	objptr, ##6360
10168     F2 26 02 F1 | 	add	local01, objptr
1016c     FE 27 06 F1 | 	add	local01, #510
10170     13 01 58 FC | 	wrword	#0, local01
10174                 | '     envbuf(channel,255)=0                                                              
10174                 | '     return
10174     0C 00 00 FF 
10178     D8 E4 85 F1 | 	sub	objptr, ##6360
1017c     90 07 90 FD | 	jmp	#LR__1341
10180                 | LR__1327
10180                 | '     if wptr < $80000 then 
10180     1C 4E 05 F1 | 	add	fp, #28
10184     A7 28 02 FB | 	rdlong	local02, fp
10188     1C 4E 85 F1 | 	sub	fp, #28
1018c     00 04 00 FF 
10190     00 28 56 F2 | 	cmps	local02, ##524288 wc
10194     7C 00 90 3D |  if_ae	jmp	#LR__1330
10198                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
10198     14 4E 05 F1 | 	add	fp, #20
1019c     A7 00 68 FC | 	wrlong	#0, fp
101a0     14 4E 85 F1 | 	sub	fp, #20
101a4     0C 00 00 FF 
101a8     D8 E4 05 F1 | 	add	objptr, ##6360
101ac     97 2C 48 FB | 	callpa	#(@LR__1329-@LR__1328)>>2,fcache_load_ptr_
101b0                 | LR__1328
101b0     18 4E 05 F1 | 	add	fp, #24
101b4     A7 28 02 FB | 	rdlong	local02, fp
101b8     09 28 66 F0 | 	shl	local02, #9
101bc     F2 28 02 F1 | 	add	local02, objptr
101c0     04 4E 85 F1 | 	sub	fp, #4
101c4     A7 26 02 FB | 	rdlong	local01, fp
101c8     13 1B 02 F6 | 	mov	arg05, local01
101cc     01 1A 66 F0 | 	shl	arg05, #1
101d0     14 1B 02 F1 | 	add	arg05, local02
101d4     08 4E 05 F1 | 	add	fp, #8
101d8     A7 12 02 FB | 	rdlong	arg01, fp
101dc     01 26 66 F0 | 	shl	local01, #1
101e0     13 13 02 F1 | 	add	arg01, local01
101e4     09 FB E1 FA | 	rdword	result1, arg01
101e8     0D FB 51 FC | 	wrword	result1, arg05
101ec     08 4E 85 F1 | 	sub	fp, #8
101f0     A7 28 02 FB | 	rdlong	local02, fp
101f4     01 28 06 F1 | 	add	local02, #1
101f8     A7 28 62 FC | 	wrlong	local02, fp
101fc     14 4E 85 F1 | 	sub	fp, #20
10200     00 29 56 F2 | 	cmps	local02, #256 wc
10204     A8 FF 9F CD |  if_b	jmp	#LR__1328
10208                 | LR__1329
10208     0C 00 00 FF 
1020c     D8 E4 85 F1 | 	sub	objptr, ##6360
10210     78 00 90 FD | 	jmp	#LR__1332
10214                 | LR__1330
10214                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
10214     14 4E 05 F1 | 	add	fp, #20
10218     A7 00 68 FC | 	wrlong	#0, fp
1021c     14 4E 85 F1 | 	sub	fp, #20
10220                 | LR__1331
10220     18 4E 05 F1 | 	add	fp, #24
10224     A7 28 02 FB | 	rdlong	local02, fp
10228     09 28 66 F0 | 	shl	local02, #9
1022c     0C 00 00 FF 
10230     D8 E4 05 F1 | 	add	objptr, ##6360
10234     F2 28 02 F1 | 	add	local02, objptr
10238     04 4E 85 F1 | 	sub	fp, #4
1023c     A7 26 02 FB | 	rdlong	local01, fp
10240     13 2B 02 F6 | 	mov	local03, local01
10244     01 2A 66 F0 | 	shl	local03, #1
10248     14 2B 02 F1 | 	add	local03, local02
1024c     08 4E 05 F1 | 	add	fp, #8
10250     A7 12 02 FB | 	rdlong	arg01, fp
10254     1C 4E 85 F1 | 	sub	fp, #28
10258     01 26 66 F0 | 	shl	local01, #1
1025c     13 13 02 F1 | 	add	arg01, local01
10260     0C 00 00 FF 
10264     D8 E4 85 F1 | 	sub	objptr, ##6360
10268     38 30 B1 FD | 	call	#_psdpeek
1026c     15 FB 51 FC | 	wrword	result1, local03
10270     14 4E 05 F1 | 	add	fp, #20
10274     A7 2A 02 FB | 	rdlong	local03, fp
10278     01 2A 06 F1 | 	add	local03, #1
1027c     A7 2A 62 FC | 	wrlong	local03, fp
10280     14 4E 85 F1 | 	sub	fp, #20
10284     00 2B 56 F2 | 	cmps	local03, #256 wc
10288     94 FF 9F CD |  if_b	jmp	#LR__1331
1028c                 | LR__1332
1028c     18 4E 05 F1 | 	add	fp, #24
10290     A7 2A 02 FB | 	rdlong	local03, fp
10294     18 4E 85 F1 | 	sub	fp, #24
10298     09 2A 66 F0 | 	shl	local03, #9
1029c     0C 00 00 FF 
102a0     D8 E4 05 F1 | 	add	objptr, ##6360
102a4     F2 2A 02 F1 | 	add	local03, objptr
102a8     FE 2B 06 F1 | 	add	local03, #510
102ac     15 01 58 FC | 	wrword	#0, local03
102b0                 | '     envbuf(channel,255)=0
102b0                 | '     return   
102b0     0C 00 00 FF 
102b4     D8 E4 85 F1 | 	sub	objptr, ##6360
102b8     54 06 90 FD | 	jmp	#LR__1341
102bc                 | LR__1333
102bc                 | ' 
102bc                 | ' if numpar=5 then   						 'simple adsr
102bc     10 4E 05 F1 | 	add	fp, #16
102c0     A7 28 02 FB | 	rdlong	local02, fp
102c4     10 4E 85 F1 | 	sub	fp, #16
102c8     05 28 0E F2 | 	cmp	local02, #5 wz
102cc     14 06 90 5D |  if_ne	jmp	#LR__1340
102d0     08 D3 BF FD | 	call	#_pop
102d4     FF 26 02 F6 | 	mov	local01, result3
102d8     40 4E 05 F1 | 	add	fp, #64
102dc     A7 FA 61 FC | 	wrlong	result1, fp
102e0     04 4E 05 F1 | 	add	fp, #4
102e4     A7 FC 61 FC | 	wrlong	result2, fp
102e8     04 4E 05 F1 | 	add	fp, #4
102ec     A7 26 62 FC | 	wrlong	local01, fp
102f0     08 4E 85 F1 | 	sub	fp, #8
102f4     A7 12 02 F6 | 	mov	arg01, fp
102f8     40 4E 85 F1 | 	sub	fp, #64
102fc     7C D5 BF FD | 	call	#_converttofloat
10300     FD 28 02 F6 | 	mov	local02, result1
10304     2C 4E 05 F1 | 	add	fp, #44
10308     A7 28 62 FC | 	wrlong	local02, fp
1030c     2C 4E 85 F1 | 	sub	fp, #44
10310     C8 D2 BF FD | 	call	#_pop
10314     FF 26 02 F6 | 	mov	local01, result3
10318     40 4E 05 F1 | 	add	fp, #64
1031c     A7 FA 61 FC | 	wrlong	result1, fp
10320     04 4E 05 F1 | 	add	fp, #4
10324     A7 FC 61 FC | 	wrlong	result2, fp
10328     04 4E 05 F1 | 	add	fp, #4
1032c     A7 26 62 FC | 	wrlong	local01, fp
10330     08 4E 85 F1 | 	sub	fp, #8
10334     A7 12 02 F6 | 	mov	arg01, fp
10338     40 4E 85 F1 | 	sub	fp, #64
1033c     3C D5 BF FD | 	call	#_converttofloat
10340     FD 28 02 F6 | 	mov	local02, result1
10344     28 4E 05 F1 | 	add	fp, #40
10348     A7 28 62 FC | 	wrlong	local02, fp
1034c     28 4E 85 F1 | 	sub	fp, #40
10350     88 D2 BF FD | 	call	#_pop
10354     FF 26 02 F6 | 	mov	local01, result3
10358     40 4E 05 F1 | 	add	fp, #64
1035c     A7 FA 61 FC | 	wrlong	result1, fp
10360     04 4E 05 F1 | 	add	fp, #4
10364     A7 FC 61 FC | 	wrlong	result2, fp
10368     04 4E 05 F1 | 	add	fp, #4
1036c     A7 26 62 FC | 	wrlong	local01, fp
10370     08 4E 85 F1 | 	sub	fp, #8
10374     A7 12 02 F6 | 	mov	arg01, fp
10378     40 4E 85 F1 | 	sub	fp, #64
1037c     FC D4 BF FD | 	call	#_converttofloat
10380     FD 28 02 F6 | 	mov	local02, result1
10384     24 4E 05 F1 | 	add	fp, #36
10388     A7 28 62 FC | 	wrlong	local02, fp
1038c     24 4E 85 F1 | 	sub	fp, #36
10390     48 D2 BF FD | 	call	#_pop
10394     FF 26 02 F6 | 	mov	local01, result3
10398     40 4E 05 F1 | 	add	fp, #64
1039c     A7 FA 61 FC | 	wrlong	result1, fp
103a0     04 4E 05 F1 | 	add	fp, #4
103a4     A7 FC 61 FC | 	wrlong	result2, fp
103a8     04 4E 05 F1 | 	add	fp, #4
103ac     A7 26 62 FC | 	wrlong	local01, fp
103b0     08 4E 85 F1 | 	sub	fp, #8
103b4     A7 12 02 F6 | 	mov	arg01, fp
103b8     40 4E 85 F1 | 	sub	fp, #64
103bc     BC D4 BF FD | 	call	#_converttofloat
103c0     FD 28 02 F6 | 	mov	local02, result1
103c4     20 4E 05 F1 | 	add	fp, #32
103c8     A7 28 62 FC | 	wrlong	local02, fp
103cc     20 4E 85 F1 | 	sub	fp, #32
103d0     08 D2 BF FD | 	call	#_pop
103d4     FF 26 02 F6 | 	mov	local01, result3
103d8     40 4E 05 F1 | 	add	fp, #64
103dc     A7 FA 61 FC | 	wrlong	result1, fp
103e0     04 4E 05 F1 | 	add	fp, #4
103e4     A7 FC 61 FC | 	wrlong	result2, fp
103e8     04 4E 05 F1 | 	add	fp, #4
103ec     A7 26 62 FC | 	wrlong	local01, fp
103f0     08 4E 85 F1 | 	sub	fp, #8
103f4     A7 12 02 F6 | 	mov	arg01, fp
103f8     40 4E 85 F1 | 	sub	fp, #64
103fc     C0 D3 BF FD | 	call	#_converttoint
10400     18 4E 05 F1 | 	add	fp, #24
10404     A7 FA 61 FC | 	wrlong	result1, fp
10408                 | '   t1=pop() : rr=converttofloat(t1)
10408                 | '   t1=pop() : ss=converttofloat(t1) 
10408                 | '   t1=pop() : dd=converttofloat(t1)
10408                 | '   t1=pop() : aa=converttofloat(t1)
10408                 | '   t1=pop() : channel=converttoint(t1)
10408                 | '   if ss<0.0 then ss=0.0 
10408     10 4E 05 F1 | 	add	fp, #16
1040c     A7 12 02 FB | 	rdlong	arg01, fp
10410     28 4E 85 F1 | 	sub	fp, #40
10414     00 14 06 F6 | 	mov	arg02, #0
10418     01 16 06 F6 | 	mov	arg03, #1
1041c     FC 97 B1 FD | 	call	#__system___float_cmp
10420     00 FA 55 F2 | 	cmps	result1, #0 wc
10424     28 4E 05 C1 |  if_b	add	fp, #40
10428     A7 00 68 CC |  if_b	wrlong	#0, fp
1042c     28 4E 85 C1 |  if_b	sub	fp, #40
10430                 | '   if ss>1.0 then ss=1.0
10430     28 4E 05 F1 | 	add	fp, #40
10434     A7 12 02 FB | 	rdlong	arg01, fp
10438     28 4E 85 F1 | 	sub	fp, #40
1043c     00 C0 1F FF 
10440     00 14 06 F6 | 	mov	arg02, ##1065353216
10444     01 16 66 F6 | 	neg	arg03, #1
10448     D0 97 B1 FD | 	call	#__system___float_cmp
1044c     01 FA 55 F2 | 	cmps	result1, #1 wc
10450     28 4E 05 31 |  if_ae	add	fp, #40
10454     00 C0 9F 3F 
10458     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
1045c     28 4E 85 31 |  if_ae	sub	fp, #40
10460     20 4E 05 F1 | 	add	fp, #32
10464     A7 12 02 FB | 	rdlong	arg01, fp
10468     04 4E 05 F1 | 	add	fp, #4
1046c     A7 14 02 FB | 	rdlong	arg02, fp
10470     24 4E 85 F1 | 	sub	fp, #36
10474     A0 8F B1 FD | 	call	#__system___float_add
10478     FD 12 02 F6 | 	mov	arg01, result1
1047c     2C 4E 05 F1 | 	add	fp, #44
10480     A7 14 02 FB | 	rdlong	arg02, fp
10484     2C 4E 85 F1 | 	sub	fp, #44
10488     8C 8F B1 FD | 	call	#__system___float_add
1048c     30 4E 05 F1 | 	add	fp, #48
10490     A7 FA 61 FC | 	wrlong	result1, fp
10494     FD 14 02 F6 | 	mov	arg02, result1
10498     30 4E 85 F1 | 	sub	fp, #48
1049c     00 C0 21 FF 
104a0     00 12 06 F6 | 	mov	arg01, ##1132462080
104a4     44 95 B1 FD | 	call	#__system___float_div
104a8     34 4E 05 F1 | 	add	fp, #52
104ac     A7 FA 61 FC | 	wrlong	result1, fp
104b0     14 4E 85 F1 | 	sub	fp, #20
104b4     A7 12 02 FB | 	rdlong	arg01, fp
104b8     FD 14 02 F6 | 	mov	arg02, result1
104bc     20 4E 85 F1 | 	sub	fp, #32
104c0     24 93 B1 FD | 	call	#__system___float_mul
104c4     FD 12 02 F6 | 	mov	arg01, result1
104c8     01 14 06 F6 | 	mov	arg02, #1
104cc     E0 97 B1 FD | 	call	#__system___float_tointeger
104d0     A7 FA 61 FC | 	wrlong	result1, fp
104d4     24 4E 05 F1 | 	add	fp, #36
104d8     A7 12 02 FB | 	rdlong	arg01, fp
104dc     10 4E 05 F1 | 	add	fp, #16
104e0     A7 14 02 FB | 	rdlong	arg02, fp
104e4     34 4E 85 F1 | 	sub	fp, #52
104e8     FC 92 B1 FD | 	call	#__system___float_mul
104ec     FD 12 02 F6 | 	mov	arg01, result1
104f0     01 14 06 F6 | 	mov	arg02, #1
104f4     B8 97 B1 FD | 	call	#__system___float_tointeger
104f8     04 4E 05 F1 | 	add	fp, #4
104fc     A7 FA 61 FC | 	wrlong	result1, fp
10500     28 4E 05 F1 | 	add	fp, #40
10504     A7 12 02 FB | 	rdlong	arg01, fp
10508     08 4E 05 F1 | 	add	fp, #8
1050c     A7 14 02 FB | 	rdlong	arg02, fp
10510     34 4E 85 F1 | 	sub	fp, #52
10514     D0 92 B1 FD | 	call	#__system___float_mul
10518     FD 12 02 F6 | 	mov	arg01, result1
1051c     01 14 06 F6 | 	mov	arg02, #1
10520     8C 97 B1 FD | 	call	#__system___float_tointeger
10524     0C 4E 05 F1 | 	add	fp, #12
10528     A7 FA 61 FC | 	wrlong	result1, fp
1052c     0C 4E 85 F1 | 	sub	fp, #12
10530     F8 BF 23 FF 
10534     00 28 06 F6 | 	mov	local02, ##1199566848
10538     A7 12 02 FB | 	rdlong	arg01, fp
1053c     09 13 52 F6 | 	abs	arg01, arg01 wc
10540     1F 2C C6 C9 |  if_b	decod	local04, #31
10544     00 2C 06 36 |  if_ae	mov	local04, #0
10548     98 8E B1 FD | 	call	#__system___float_fromuns
1054c     16 FB 61 F5 | 	xor	result1, local04
10550     FD 14 02 F6 | 	mov	arg02, result1
10554     14 13 02 F6 | 	mov	arg01, local02
10558     90 94 B1 FD | 	call	#__system___float_div
1055c     38 4E 05 F1 | 	add	fp, #56
10560     A7 FA 61 FC | 	wrlong	result1, fp
10564     F8 BF 23 FF 
10568     00 28 06 F6 | 	mov	local02, ##1199566848
1056c     10 4E 85 F1 | 	sub	fp, #16
10570     A7 14 02 FB | 	rdlong	arg02, fp
10574     28 4E 85 F1 | 	sub	fp, #40
10578     F8 BF 23 FF 
1057c     00 12 06 F6 | 	mov	arg01, ##1199566848
10580     64 92 B1 FD | 	call	#__system___float_mul
10584     FD 14 02 F6 | 	mov	arg02, result1
10588     14 13 02 F6 | 	mov	arg01, local02
1058c     1F 14 E6 F4 | 	bitnot	arg02, #31
10590     84 8E B1 FD | 	call	#__system___float_add
10594     FD 28 02 F6 | 	mov	local02, result1
10598     04 4E 05 F1 | 	add	fp, #4
1059c     A7 12 02 FB | 	rdlong	arg01, fp
105a0     04 4E 85 F1 | 	sub	fp, #4
105a4     09 13 52 F6 | 	abs	arg01, arg01 wc
105a8     1F 2C C6 C9 |  if_b	decod	local04, #31
105ac     00 2C 06 36 |  if_ae	mov	local04, #0
105b0     30 8E B1 FD | 	call	#__system___float_fromuns
105b4     16 FB 61 F5 | 	xor	result1, local04
105b8     FD 14 02 F6 | 	mov	arg02, result1
105bc     14 13 02 F6 | 	mov	arg01, local02
105c0     28 94 B1 FD | 	call	#__system___float_div
105c4     24 4E 05 F1 | 	add	fp, #36
105c8     A7 FA 61 FC | 	wrlong	result1, fp
105cc     04 4E 05 F1 | 	add	fp, #4
105d0     A7 14 02 FB | 	rdlong	arg02, fp
105d4     28 4E 85 F1 | 	sub	fp, #40
105d8     F8 BF 23 FF 
105dc     00 12 06 F6 | 	mov	arg01, ##1199566848
105e0     04 92 B1 FD | 	call	#__system___float_mul
105e4     FD 28 02 F6 | 	mov	local02, result1
105e8     0C 4E 05 F1 | 	add	fp, #12
105ec     A7 12 02 FB | 	rdlong	arg01, fp
105f0     0C 4E 85 F1 | 	sub	fp, #12
105f4     09 13 52 F6 | 	abs	arg01, arg01 wc
105f8     1F 2C C6 C9 |  if_b	decod	local04, #31
105fc     00 2C 06 36 |  if_ae	mov	local04, #0
10600     E0 8D B1 FD | 	call	#__system___float_fromuns
10604     16 FB 61 F5 | 	xor	result1, local04
10608     FD 14 02 F6 | 	mov	arg02, result1
1060c     14 13 02 F6 | 	mov	arg01, local02
10610     D8 93 B1 FD | 	call	#__system___float_div
10614     3C 4E 05 F1 | 	add	fp, #60
10618     A7 FA 61 FC | 	wrlong	result1, fp
1061c     24 4E 85 F1 | 	sub	fp, #36
10620     A7 2E 02 FB | 	rdlong	local05, fp
10624     18 4E 85 F1 | 	sub	fp, #24
10628     01 2E 66 F0 | 	shl	local05, #1
1062c     52 00 00 FF 
10630     B4 E4 05 F1 | 	add	objptr, ##42164
10634     F2 2E 02 F1 | 	add	local05, objptr
10638     A7 30 02 FB | 	rdlong	local06, fp
1063c     04 4E 05 F1 | 	add	fp, #4
10640     A7 2A 02 FB | 	rdlong	local03, fp
10644     15 31 02 F1 | 	add	local06, local03
10648     17 31 52 FC | 	wrword	local06, local05
1064c     1C 4E 05 F1 | 	add	fp, #28
10650     A7 00 68 FC | 	wrlong	#0, fp
10654                 | '   fulltime=aa+dd+rr
10654                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
10654                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
10654                 | '   suspoints(channel)=a+d
10654                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
10654     0C 4E 85 F1 | 	sub	fp, #12
10658     A7 00 68 FC | 	wrlong	#0, fp
1065c     14 4E 85 F1 | 	sub	fp, #20
10660     A7 32 02 FB | 	rdlong	local07, fp
10664     52 00 00 FF 
10668     B4 E4 85 F1 | 	sub	objptr, ##42164
1066c                 | LR__1334
1066c     14 4E 05 F1 | 	add	fp, #20
10670     A7 28 02 FB | 	rdlong	local02, fp
10674     14 4E 85 F1 | 	sub	fp, #20
10678     19 29 52 F2 | 	cmps	local02, local07 wc
1067c     80 00 90 3D |  if_ae	jmp	#LR__1335
10680     18 4E 05 F1 | 	add	fp, #24
10684     A7 30 02 FB | 	rdlong	local06, fp
10688     09 30 66 F0 | 	shl	local06, #9
1068c     0C 00 00 FF 
10690     D8 E4 05 F1 | 	add	objptr, ##6360
10694     F2 30 02 F1 | 	add	local06, objptr
10698     04 4E 85 F1 | 	sub	fp, #4
1069c     A7 2E 02 FB | 	rdlong	local05, fp
106a0     01 2E 66 F0 | 	shl	local05, #1
106a4     18 2F 02 F1 | 	add	local05, local06
106a8     0C 4E 05 F1 | 	add	fp, #12
106ac     A7 12 02 FB | 	rdlong	arg01, fp
106b0     20 4E 85 F1 | 	sub	fp, #32
106b4     0C 00 00 FF 
106b8     D8 E4 85 F1 | 	sub	objptr, ##6360
106bc     01 14 06 F6 | 	mov	arg02, #1
106c0     EC 95 B1 FD | 	call	#__system___float_tointeger
106c4     17 FB 51 FC | 	wrword	result1, local05
106c8     20 4E 05 F1 | 	add	fp, #32
106cc     A7 12 02 FB | 	rdlong	arg01, fp
106d0     18 4E 05 F1 | 	add	fp, #24
106d4     A7 14 02 FB | 	rdlong	arg02, fp
106d8     38 4E 85 F1 | 	sub	fp, #56
106dc     38 8D B1 FD | 	call	#__system___float_add
106e0     20 4E 05 F1 | 	add	fp, #32
106e4     A7 FA 61 FC | 	wrlong	result1, fp
106e8     0C 4E 85 F1 | 	sub	fp, #12
106ec     A7 30 02 FB | 	rdlong	local06, fp
106f0     01 30 06 F1 | 	add	local06, #1
106f4     A7 30 62 FC | 	wrlong	local06, fp
106f8     14 4E 85 F1 | 	sub	fp, #20
106fc     6C FF 9F FD | 	jmp	#LR__1334
10700                 | LR__1335
10700                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
10700     A7 28 02 FB | 	rdlong	local02, fp
10704     14 4E 05 F1 | 	add	fp, #20
10708     A7 28 62 FC | 	wrlong	local02, fp
1070c     14 4E 85 F1 | 	sub	fp, #20
10710     A7 34 02 FB | 	rdlong	local08, fp
10714     04 4E 05 F1 | 	add	fp, #4
10718     A7 28 02 FB | 	rdlong	local02, fp
1071c     04 4E 85 F1 | 	sub	fp, #4
10720     14 35 02 F1 | 	add	local08, local02
10724                 | LR__1336
10724     14 4E 05 F1 | 	add	fp, #20
10728     A7 28 02 FB | 	rdlong	local02, fp
1072c     14 4E 85 F1 | 	sub	fp, #20
10730     1A 29 52 F2 | 	cmps	local02, local08 wc
10734     A8 00 90 3D |  if_ae	jmp	#LR__1337
10738     18 4E 05 F1 | 	add	fp, #24
1073c     A7 32 02 FB | 	rdlong	local07, fp
10740     09 32 66 F0 | 	shl	local07, #9
10744     0C 00 00 FF 
10748     D8 E4 05 F1 | 	add	objptr, ##6360
1074c     F2 32 02 F1 | 	add	local07, objptr
10750     04 4E 85 F1 | 	sub	fp, #4
10754     A7 30 02 FB | 	rdlong	local06, fp
10758     01 30 66 F0 | 	shl	local06, #1
1075c     19 31 02 F1 | 	add	local06, local07
10760     0C 4E 05 F1 | 	add	fp, #12
10764     A7 12 02 FB | 	rdlong	arg01, fp
10768     20 4E 85 F1 | 	sub	fp, #32
1076c     0C 00 00 FF 
10770     D8 E4 85 F1 | 	sub	objptr, ##6360
10774     01 14 06 F6 | 	mov	arg02, #1
10778     34 95 B1 FD | 	call	#__system___float_tointeger
1077c     18 FB 51 FC | 	wrword	result1, local06
10780     20 4E 05 F1 | 	add	fp, #32
10784     A7 12 02 FB | 	rdlong	arg01, fp
10788     04 4E 05 F1 | 	add	fp, #4
1078c     A7 14 02 FB | 	rdlong	arg02, fp
10790     24 4E 85 F1 | 	sub	fp, #36
10794     1F 14 E6 F4 | 	bitnot	arg02, #31
10798     7C 8C B1 FD | 	call	#__system___float_add
1079c     20 4E 05 F1 | 	add	fp, #32
107a0     A7 FA 61 FC | 	wrlong	result1, fp
107a4     20 4E 85 F1 | 	sub	fp, #32
107a8     FD 12 02 F6 | 	mov	arg01, result1
107ac     00 14 06 F6 | 	mov	arg02, #0
107b0     01 16 06 F6 | 	mov	arg03, #1
107b4     64 94 B1 FD | 	call	#__system___float_cmp
107b8     00 FA 55 F2 | 	cmps	result1, #0 wc
107bc     20 4E 05 C1 |  if_b	add	fp, #32
107c0     A7 00 68 CC |  if_b	wrlong	#0, fp
107c4     20 4E 85 C1 |  if_b	sub	fp, #32
107c8     14 4E 05 F1 | 	add	fp, #20
107cc     A7 32 02 FB | 	rdlong	local07, fp
107d0     01 32 06 F1 | 	add	local07, #1
107d4     A7 32 62 FC | 	wrlong	local07, fp
107d8     14 4E 85 F1 | 	sub	fp, #20
107dc     44 FF 9F FD | 	jmp	#LR__1336
107e0                 | LR__1337
107e0                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
107e0     A7 28 02 FB | 	rdlong	local02, fp
107e4     04 4E 05 F1 | 	add	fp, #4
107e8     A7 34 02 FB | 	rdlong	local08, fp
107ec     1A 29 02 F1 | 	add	local02, local08
107f0     10 4E 05 F1 | 	add	fp, #16
107f4     A7 28 62 FC | 	wrlong	local02, fp
107f8     14 4E 85 F1 | 	sub	fp, #20
107fc                 | LR__1338
107fc     14 4E 05 F1 | 	add	fp, #20
10800     A7 2E 02 FB | 	rdlong	local05, fp
10804     14 4E 85 F1 | 	sub	fp, #20
10808     00 2F 56 F2 | 	cmps	local05, #256 wc
1080c     A8 00 90 3D |  if_ae	jmp	#LR__1339
10810     18 4E 05 F1 | 	add	fp, #24
10814     A7 34 02 FB | 	rdlong	local08, fp
10818     09 34 66 F0 | 	shl	local08, #9
1081c     0C 00 00 FF 
10820     D8 E4 05 F1 | 	add	objptr, ##6360
10824     F2 34 02 F1 | 	add	local08, objptr
10828     04 4E 85 F1 | 	sub	fp, #4
1082c     A7 32 02 FB | 	rdlong	local07, fp
10830     01 32 66 F0 | 	shl	local07, #1
10834     1A 33 02 F1 | 	add	local07, local08
10838     0C 4E 05 F1 | 	add	fp, #12
1083c     A7 12 02 FB | 	rdlong	arg01, fp
10840     20 4E 85 F1 | 	sub	fp, #32
10844     0C 00 00 FF 
10848     D8 E4 85 F1 | 	sub	objptr, ##6360
1084c     01 14 06 F6 | 	mov	arg02, #1
10850     5C 94 B1 FD | 	call	#__system___float_tointeger
10854     19 FB 51 FC | 	wrword	result1, local07
10858     20 4E 05 F1 | 	add	fp, #32
1085c     A7 12 02 FB | 	rdlong	arg01, fp
10860     1C 4E 05 F1 | 	add	fp, #28
10864     A7 14 02 FB | 	rdlong	arg02, fp
10868     3C 4E 85 F1 | 	sub	fp, #60
1086c     1F 14 E6 F4 | 	bitnot	arg02, #31
10870     A4 8B B1 FD | 	call	#__system___float_add
10874     20 4E 05 F1 | 	add	fp, #32
10878     A7 FA 61 FC | 	wrlong	result1, fp
1087c     20 4E 85 F1 | 	sub	fp, #32
10880     FD 12 02 F6 | 	mov	arg01, result1
10884     00 14 06 F6 | 	mov	arg02, #0
10888     01 16 06 F6 | 	mov	arg03, #1
1088c     8C 93 B1 FD | 	call	#__system___float_cmp
10890     00 FA 55 F2 | 	cmps	result1, #0 wc
10894     20 4E 05 C1 |  if_b	add	fp, #32
10898     A7 00 68 CC |  if_b	wrlong	#0, fp
1089c     20 4E 85 C1 |  if_b	sub	fp, #32
108a0     14 4E 05 F1 | 	add	fp, #20
108a4     A7 34 02 FB | 	rdlong	local08, fp
108a8     01 34 06 F1 | 	add	local08, #1
108ac     A7 34 62 FC | 	wrlong	local08, fp
108b0     14 4E 85 F1 | 	sub	fp, #20
108b4     44 FF 9F FD | 	jmp	#LR__1338
108b8                 | LR__1339
108b8     18 4E 05 F1 | 	add	fp, #24
108bc     A7 2E 02 FB | 	rdlong	local05, fp
108c0     18 4E 85 F1 | 	sub	fp, #24
108c4     09 2E 66 F0 | 	shl	local05, #9
108c8     0C 00 00 FF 
108cc     D8 E4 05 F1 | 	add	objptr, ##6360
108d0     F2 2E 02 F1 | 	add	local05, objptr
108d4     FE 2F 06 F1 | 	add	local05, #510
108d8     17 01 58 FC | 	wrword	#0, local05
108dc     0C 00 00 FF 
108e0     D8 E4 85 F1 | 	sub	objptr, ##6360
108e4                 | LR__1340
108e4     18 4E 05 F1 | 	add	fp, #24
108e8     A7 2E 02 FB | 	rdlong	local05, fp
108ec     18 4E 85 F1 | 	sub	fp, #24
108f0     09 2E 66 F0 | 	shl	local05, #9
108f4     0C 00 00 FF 
108f8     D8 E4 05 F1 | 	add	objptr, ##6360
108fc     F2 2E 02 F1 | 	add	local05, objptr
10900     FE 2F 06 F1 | 	add	local05, #510
10904     17 01 58 FC | 	wrword	#0, local05
10908     0C 00 00 FF 
1090c     D8 E4 85 F1 | 	sub	objptr, ##6360
10910                 | LR__1341
10910     A7 F0 03 F6 | 	mov	ptra, fp
10914     B2 00 A0 FD | 	call	#popregs_
10918                 | _do_defenv_ret
10918     2D 00 64 FD | 	ret
1091c                 | 
1091c                 | ' 
1091c                 | ' '-------------------- defsnd
1091c                 | ' 
1091c                 | ' sub do_defsnd
1091c                 | _do_defsnd
1091c     04 4A 05 F6 | 	mov	COUNT_, #4
10920     A8 00 A0 FD | 	call	#pushregs_
10924     88 F0 07 F1 | 	add	ptra, #136
10928     4A 00 00 FF 
1092c     80 E4 05 F1 | 	add	objptr, ##38016
10930     F2 1A 02 FB | 	rdlong	arg05, objptr
10934     0D 19 02 F6 | 	mov	arg04, arg05
10938     01 18 66 F0 | 	shl	arg04, #1
1093c     0D 19 02 F1 | 	add	arg04, arg05
10940     02 18 66 F0 | 	shl	arg04, #2
10944     03 00 00 FF 
10948     04 E4 85 F1 | 	sub	objptr, ##1540
1094c     F2 18 02 F1 | 	add	arg04, objptr
10950     0C 1B 02 FB | 	rdlong	arg05, arg04
10954     A7 1A 62 FC | 	wrlong	arg05, fp
10958                 | ' 
10958                 | ' numpar=compiledline(lineptr_e).result.uresult
10958                 | ' 
10958                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
10958                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
10958                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
10958                 | ' ' defsnd channel, oneint - loads the wave from the pointer
10958                 | ' 
10958                 | ' if numpar<2 then return
10958     02 1A 56 F2 | 	cmps	arg05, #2 wc
1095c     47 00 00 FF 
10960     7C E4 85 F1 | 	sub	objptr, ##36476
10964     98 08 90 CD |  if_b	jmp	#LR__1373
10968                 | '  
10968                 | ' if numpar=2 then
10968     A7 1A 02 FB | 	rdlong	arg05, fp
1096c     02 1A 0E F2 | 	cmp	arg05, #2 wz
10970     A4 03 90 5D |  if_ne	jmp	#LR__1360
10974     64 CC BF FD | 	call	#_pop
10978     FF 1A 02 F6 | 	mov	arg05, result3
1097c     2C 4E 05 F1 | 	add	fp, #44
10980     A7 FA 61 FC | 	wrlong	result1, fp
10984     04 4E 05 F1 | 	add	fp, #4
10988     A7 FC 61 FC | 	wrlong	result2, fp
1098c     04 4E 05 F1 | 	add	fp, #4
10990     A7 1A 62 FC | 	wrlong	arg05, fp
10994                 | '   t1=pop()
10994                 | '   if t1.result_type=result_string2 then 
10994     34 4E 85 F1 | 	sub	fp, #52
10998     2B 1A 0E F2 | 	cmp	arg05, #43 wz
1099c     20 00 90 5D |  if_ne	jmp	#LR__1350
109a0     2C 4E 05 F1 | 	add	fp, #44
109a4     A7 12 02 FB | 	rdlong	arg01, fp
109a8     2C 4E 85 F1 | 	sub	fp, #44
109ac     A4 CD BF FD | 	call	#_convertstring
109b0     38 4E 05 F1 | 	add	fp, #56
109b4     A7 FA 61 FC | 	wrlong	result1, fp
109b8     38 4E 85 F1 | 	sub	fp, #56
109bc     58 00 90 FD | 	jmp	#LR__1353
109c0                 | LR__1350
109c0     34 4E 05 F1 | 	add	fp, #52
109c4     A7 1A 02 FB | 	rdlong	arg05, fp
109c8     34 4E 85 F1 | 	sub	fp, #52
109cc     1F 1A 0E F2 | 	cmp	arg05, #31 wz
109d0     18 00 90 5D |  if_ne	jmp	#LR__1351
109d4     2C 4E 05 F1 | 	add	fp, #44
109d8     A7 1A 02 FB | 	rdlong	arg05, fp
109dc     0C 4E 05 F1 | 	add	fp, #12
109e0     A7 1A 62 FC | 	wrlong	arg05, fp
109e4     38 4E 85 F1 | 	sub	fp, #56
109e8     2C 00 90 FD | 	jmp	#LR__1352
109ec                 | LR__1351
109ec     B6 01 00 FF 
109f0     6F 1B 06 F6 | 	mov	arg05, ##@LR__5881
109f4     38 4E 05 F1 | 	add	fp, #56
109f8     A7 1A 62 FC | 	wrlong	arg05, fp
109fc     0C 4E 85 F1 | 	sub	fp, #12
10a00     A7 12 02 F6 | 	mov	arg01, fp
10a04     2C 4E 85 F1 | 	sub	fp, #44
10a08     B4 CD BF FD | 	call	#_converttoint
10a0c     14 4E 05 F1 | 	add	fp, #20
10a10     A7 FA 61 FC | 	wrlong	result1, fp
10a14     14 4E 85 F1 | 	sub	fp, #20
10a18                 | LR__1352
10a18                 | LR__1353
10a18                 | '   if s<>"" then 
10a18     38 4E 05 F1 | 	add	fp, #56
10a1c     A7 12 02 FB | 	rdlong	arg01, fp
10a20     38 4E 85 F1 | 	sub	fp, #56
10a24     B6 01 00 FF 
10a28     70 15 06 F6 | 	mov	arg02, ##@LR__5882
10a2c     64 5F B1 FD | 	call	#__system___string_cmp
10a30     00 FA 0D F2 | 	cmp	result1, #0 wz
10a34     E4 01 90 AD |  if_e	jmp	#LR__1356
10a38     A0 CB BF FD | 	call	#_pop
10a3c     FF 1A 02 F6 | 	mov	arg05, result3
10a40     2C 4E 05 F1 | 	add	fp, #44
10a44     A7 FA 61 FC | 	wrlong	result1, fp
10a48     04 4E 05 F1 | 	add	fp, #4
10a4c     A7 FC 61 FC | 	wrlong	result2, fp
10a50     04 4E 05 F1 | 	add	fp, #4
10a54     A7 1A 62 FC | 	wrlong	arg05, fp
10a58     08 4E 85 F1 | 	sub	fp, #8
10a5c     A7 12 02 F6 | 	mov	arg01, fp
10a60     2C 4E 85 F1 | 	sub	fp, #44
10a64     58 CD BF FD | 	call	#_converttoint
10a68     10 4E 05 F1 | 	add	fp, #16
10a6c     A7 FA 61 FC | 	wrlong	result1, fp
10a70                 | '     t1=pop()
10a70                 | '     channel=converttoint(t1) : if channel>31 then return
10a70     FD 1A 02 F6 | 	mov	arg05, result1
10a74     10 4E 85 F1 | 	sub	fp, #16
10a78     20 1A 56 F2 | 	cmps	arg05, #32 wc
10a7c     80 07 90 3D |  if_ae	jmp	#LR__1373
10a80                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10a80     09 12 06 F6 | 	mov	arg01, #9
10a84     40 B2 B1 FD | 	call	#__system__close
10a88     09 26 06 F6 | 	mov	local01, #9
10a8c     B6 01 00 FF 
10a90     71 13 06 F6 | 	mov	arg01, ##@LR__5883
10a94     38 4E 05 F1 | 	add	fp, #56
10a98     A7 14 02 FB | 	rdlong	arg02, fp
10a9c     38 4E 85 F1 | 	sub	fp, #56
10aa0     24 5F B1 FD | 	call	#__system___string_concat
10aa4     FD 14 02 F6 | 	mov	arg02, result1
10aa8     13 13 02 F6 | 	mov	arg01, local01
10aac     00 16 06 F6 | 	mov	arg03, #0
10ab0     BC 6A B1 FD | 	call	#__system___basic_open_string
10ab4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10ab8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
10abc     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
10ac0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10ac4     52 00 00 FF 
10ac8     10 E5 05 F1 | 	add	objptr, ##42256
10acc     F2 FA 61 FC | 	wrlong	result1, objptr
10ad0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
10ad0     52 00 00 FF 
10ad4     10 E5 85 F1 | 	sub	objptr, ##42256
10ad8     B0 00 90 AD |  if_e	jmp	#LR__1354
10adc     00 12 06 F6 | 	mov	arg01, #0
10ae0     2C BB B1 FD | 	call	#__system___getiolock_0606
10ae4     FD 12 02 F6 | 	mov	arg01, result1
10ae8     80 5E B1 FD | 	call	#__system___lockmem
10aec     B6 01 00 FF 
10af0     7E 15 06 F6 | 	mov	arg02, ##@LR__5884
10af4     00 12 06 F6 | 	mov	arg01, #0
10af8     00 16 06 F6 | 	mov	arg03, #0
10afc     64 6B B1 FD | 	call	#__system___basic_print_string
10b00     52 00 00 FF 
10b04     10 E5 05 F1 | 	add	objptr, ##42256
10b08     F2 14 02 FB | 	rdlong	arg02, objptr
10b0c     52 00 00 FF 
10b10     10 E5 85 F1 | 	sub	objptr, ##42256
10b14     00 12 06 F6 | 	mov	arg01, #0
10b18     00 16 06 F6 | 	mov	arg03, #0
10b1c     0A 18 06 F6 | 	mov	arg04, #10
10b20     84 6B B1 FD | 	call	#__system___basic_print_integer
10b24     B6 01 00 FF 
10b28     8C 15 06 F6 | 	mov	arg02, ##@LR__5885
10b2c     00 12 06 F6 | 	mov	arg01, #0
10b30     00 16 06 F6 | 	mov	arg03, #0
10b34     2C 6B B1 FD | 	call	#__system___basic_print_string
10b38     00 26 06 F6 | 	mov	local01, #0
10b3c     52 00 00 FF 
10b40     10 E5 05 F1 | 	add	objptr, ##42256
10b44     F2 12 02 FB | 	rdlong	arg01, objptr
10b48     52 00 00 FF 
10b4c     10 E5 85 F1 | 	sub	objptr, ##42256
10b50     A8 87 B1 FD | 	call	#__system___strerror
10b54     FD 14 02 F6 | 	mov	arg02, result1
10b58     13 13 02 F6 | 	mov	arg01, local01
10b5c     00 16 06 F6 | 	mov	arg03, #0
10b60     00 6B B1 FD | 	call	#__system___basic_print_string
10b64     00 12 06 F6 | 	mov	arg01, #0
10b68     0A 14 06 F6 | 	mov	arg02, #10
10b6c     00 16 06 F6 | 	mov	arg03, #0
10b70     98 6A B1 FD | 	call	#__system___basic_print_char
10b74     00 12 06 F6 | 	mov	arg01, #0
10b78     94 BA B1 FD | 	call	#__system___getiolock_0606
10b7c     FD 00 68 FC | 	wrlong	#0, result1
10b80     09 12 06 F6 | 	mov	arg01, #9
10b84     40 B1 B1 FD | 	call	#__system__close
10b88     74 06 90 FD | 	jmp	#LR__1373
10b8c                 | LR__1354
10b8c                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
10b8c     04 4E 05 F1 | 	add	fp, #4
10b90     A7 00 68 FC | 	wrlong	#0, fp
10b94                 | LR__1355
10b94     A7 26 02 FB | 	rdlong	local01, fp
10b98     01 26 66 F0 | 	shl	local01, #1
10b9c     11 14 06 F6 | 	mov	arg02, #17
10ba0     13 15 02 F1 | 	add	arg02, local01
10ba4     78 4E 05 F1 | 	add	fp, #120
10ba8     A7 16 02 F6 | 	mov	arg03, fp
10bac     7C 4E 85 F1 | 	sub	fp, #124
10bb0     09 12 06 F6 | 	mov	arg01, #9
10bb4     01 18 06 F6 | 	mov	arg04, #1
10bb8     02 1A 06 F6 | 	mov	arg05, #2
10bbc     20 6C B1 FD | 	call	#__system___basic_get
10bc0     10 4E 05 F1 | 	add	fp, #16
10bc4     A7 12 02 FB | 	rdlong	arg01, fp
10bc8     0B 12 66 F0 | 	shl	arg01, #11
10bcc     0C 4E 85 F1 | 	sub	fp, #12
10bd0     A7 26 02 FB | 	rdlong	local01, fp
10bd4     01 26 66 F0 | 	shl	local01, #1
10bd8     13 13 02 F1 | 	add	arg01, local01
10bdc     78 4E 05 F1 | 	add	fp, #120
10be0     A7 14 E2 FA | 	rdword	arg02, fp
10be4     7C 4E 85 F1 | 	sub	fp, #124
10be8     0F 14 66 F7 | 	signx	arg02, #15
10bec     74 25 B1 FD | 	call	#_psdpoke
10bf0     04 4E 05 F1 | 	add	fp, #4
10bf4     A7 26 02 FB | 	rdlong	local01, fp
10bf8     01 26 06 F1 | 	add	local01, #1
10bfc     A7 26 62 FC | 	wrlong	local01, fp
10c00     02 00 00 FF 
10c04     01 26 56 F2 | 	cmps	local01, ##1025 wc
10c08     88 FF 9F CD |  if_b	jmp	#LR__1355
10c0c     04 4E 85 F1 | 	sub	fp, #4
10c10                 | '     close #9
10c10     09 12 06 F6 | 	mov	arg01, #9
10c14     B0 B0 B1 FD | 	call	#__system__close
10c18                 | '     return
10c18     E4 05 90 FD | 	jmp	#LR__1373
10c1c                 | LR__1356
10c1c                 | '     if wptr < ($80000 - 2048) then 
10c1c     14 4E 05 F1 | 	add	fp, #20
10c20     A7 26 02 FB | 	rdlong	local01, fp
10c24     14 4E 85 F1 | 	sub	fp, #20
10c28     FC 03 00 FF 
10c2c     00 26 56 F2 | 	cmps	local01, ##522240 wc
10c30     70 00 90 3D |  if_ae	jmp	#LR__1358
10c34                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
10c34     04 4E 05 F1 | 	add	fp, #4
10c38     A7 00 68 FC | 	wrlong	#0, fp
10c3c     04 4E 85 F1 | 	sub	fp, #4
10c40                 | LR__1357
10c40     10 4E 05 F1 | 	add	fp, #16
10c44     A7 26 02 FB | 	rdlong	local01, fp
10c48     0B 26 66 F0 | 	shl	local01, #11
10c4c     0C 4E 85 F1 | 	sub	fp, #12
10c50     A7 1A 02 FB | 	rdlong	arg05, fp
10c54     0D 19 02 F6 | 	mov	arg04, arg05
10c58     01 18 66 F0 | 	shl	arg04, #1
10c5c     0C 27 02 F1 | 	add	local01, arg04
10c60     10 4E 05 F1 | 	add	fp, #16
10c64     A7 12 02 FB | 	rdlong	arg01, fp
10c68     14 4E 85 F1 | 	sub	fp, #20
10c6c     01 1A 66 F0 | 	shl	arg05, #1
10c70     0D 13 02 F1 | 	add	arg01, arg05
10c74     09 15 E2 FA | 	rdword	arg02, arg01
10c78     13 13 02 F6 | 	mov	arg01, local01
10c7c     E4 24 B1 FD | 	call	#_psdpoke
10c80     04 4E 05 F1 | 	add	fp, #4
10c84     A7 26 02 FB | 	rdlong	local01, fp
10c88     01 26 06 F1 | 	add	local01, #1
10c8c     A7 26 62 FC | 	wrlong	local01, fp
10c90     04 4E 85 F1 | 	sub	fp, #4
10c94     02 00 00 FF 
10c98     00 26 56 F2 | 	cmps	local01, ##1024 wc
10c9c     A0 FF 9F CD |  if_b	jmp	#LR__1357
10ca0     5C 05 90 FD | 	jmp	#LR__1373
10ca4                 | LR__1358
10ca4                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
10ca4     04 4E 05 F1 | 	add	fp, #4
10ca8     A7 00 68 FC | 	wrlong	#0, fp
10cac     04 4E 85 F1 | 	sub	fp, #4
10cb0                 | LR__1359
10cb0     10 4E 05 F1 | 	add	fp, #16
10cb4     A7 26 02 FB | 	rdlong	local01, fp
10cb8     0B 26 66 F0 | 	shl	local01, #11
10cbc     0C 4E 85 F1 | 	sub	fp, #12
10cc0     A7 1A 02 FB | 	rdlong	arg05, fp
10cc4     0D 19 02 F6 | 	mov	arg04, arg05
10cc8     01 18 66 F0 | 	shl	arg04, #1
10ccc     0C 27 02 F1 | 	add	local01, arg04
10cd0     10 4E 05 F1 | 	add	fp, #16
10cd4     A7 12 02 FB | 	rdlong	arg01, fp
10cd8     14 4E 85 F1 | 	sub	fp, #20
10cdc     01 1A 66 F0 | 	shl	arg05, #1
10ce0     0D 13 02 F1 | 	add	arg01, arg05
10ce4     BC 25 B1 FD | 	call	#_psdpeek
10ce8     FD 14 02 F6 | 	mov	arg02, result1
10cec     13 13 02 F6 | 	mov	arg01, local01
10cf0     70 24 B1 FD | 	call	#_psdpoke
10cf4     04 4E 05 F1 | 	add	fp, #4
10cf8     A7 26 02 FB | 	rdlong	local01, fp
10cfc     01 26 06 F1 | 	add	local01, #1
10d00     A7 26 62 FC | 	wrlong	local01, fp
10d04     04 4E 85 F1 | 	sub	fp, #4
10d08     02 00 00 FF 
10d0c     00 26 56 F2 | 	cmps	local01, ##1024 wc
10d10     9C FF 9F CD |  if_b	jmp	#LR__1359
10d14                 | '     return 
10d14     E8 04 90 FD | 	jmp	#LR__1373
10d18                 | '   return
10d18                 | LR__1360
10d18                 | ' for i=0 to 15 : harm(i)=0: next i  
10d18     04 4E 05 F1 | 	add	fp, #4
10d1c     A7 00 68 FC | 	wrlong	#0, fp
10d20     97 16 48 FB | 	callpa	#(@LR__1362-@LR__1361)>>2,fcache_load_ptr_
10d24                 | LR__1361
10d24     A7 26 02 FB | 	rdlong	local01, fp
10d28     02 26 66 F0 | 	shl	local01, #2
10d2c     38 4E 05 F1 | 	add	fp, #56
10d30     A7 26 02 F1 | 	add	local01, fp
10d34     13 01 68 FC | 	wrlong	#0, local01
10d38     38 4E 85 F1 | 	sub	fp, #56
10d3c     A7 26 02 FB | 	rdlong	local01, fp
10d40     01 26 06 F1 | 	add	local01, #1
10d44     A7 26 62 FC | 	wrlong	local01, fp
10d48     10 26 56 F2 | 	cmps	local01, #16 wc
10d4c     D4 FF 9F CD |  if_b	jmp	#LR__1361
10d50                 | LR__1362
10d50     04 4E 85 F1 | 	sub	fp, #4
10d54                 | ' for i=numpar to 2 step -1 
10d54     A7 26 02 FB | 	rdlong	local01, fp
10d58     04 4E 05 F1 | 	add	fp, #4
10d5c     A7 26 62 FC | 	wrlong	local01, fp
10d60     04 4E 85 F1 | 	sub	fp, #4
10d64                 | LR__1363
10d64     74 C8 BF FD | 	call	#_pop
10d68     2C 4E 05 F1 | 	add	fp, #44
10d6c     A7 FA 61 FC | 	wrlong	result1, fp
10d70     04 4E 05 F1 | 	add	fp, #4
10d74     A7 FC 61 FC | 	wrlong	result2, fp
10d78     04 4E 05 F1 | 	add	fp, #4
10d7c     A7 FE 61 FC | 	wrlong	result3, fp
10d80     30 4E 85 F1 | 	sub	fp, #48
10d84     A7 26 02 FB | 	rdlong	local01, fp
10d88     02 26 86 F1 | 	sub	local01, #2
10d8c     02 26 66 F0 | 	shl	local01, #2
10d90     38 4E 05 F1 | 	add	fp, #56
10d94     A7 26 02 F1 | 	add	local01, fp
10d98     10 4E 85 F1 | 	sub	fp, #16
10d9c     A7 12 02 F6 | 	mov	arg01, fp
10da0     2C 4E 85 F1 | 	sub	fp, #44
10da4     D4 CA BF FD | 	call	#_converttofloat
10da8     13 FB 61 FC | 	wrlong	result1, local01
10dac     04 4E 05 F1 | 	add	fp, #4
10db0     A7 26 02 FB | 	rdlong	local01, fp
10db4     01 26 86 F1 | 	sub	local01, #1
10db8     A7 26 62 FC | 	wrlong	local01, fp
10dbc     04 4E 85 F1 | 	sub	fp, #4
10dc0     02 26 56 F2 | 	cmps	local01, #2 wc
10dc4     9C FF 9F 3D |  if_ae	jmp	#LR__1363
10dc8     10 C8 BF FD | 	call	#_pop
10dcc     FF 26 02 F6 | 	mov	local01, result3
10dd0     2C 4E 05 F1 | 	add	fp, #44
10dd4     A7 FA 61 FC | 	wrlong	result1, fp
10dd8     04 4E 05 F1 | 	add	fp, #4
10ddc     A7 FC 61 FC | 	wrlong	result2, fp
10de0     04 4E 05 F1 | 	add	fp, #4
10de4     A7 26 62 FC | 	wrlong	local01, fp
10de8     08 4E 85 F1 | 	sub	fp, #8
10dec     A7 12 02 F6 | 	mov	arg01, fp
10df0     2C 4E 85 F1 | 	sub	fp, #44
10df4     C8 C9 BF FD | 	call	#_converttoint
10df8     10 4E 05 F1 | 	add	fp, #16
10dfc     A7 FA 61 FC | 	wrlong	result1, fp
10e00                 | ' t1=pop()
10e00                 | ' channel=converttoint(t1) : : if channel>31 then return
10e00     FD 26 02 F6 | 	mov	local01, result1
10e04     10 4E 85 F1 | 	sub	fp, #16
10e08     20 26 56 F2 | 	cmps	local01, #32 wc
10e0c     F0 03 90 3D |  if_ae	jmp	#LR__1373
10e10     20 4E 05 F1 | 	add	fp, #32
10e14     A7 00 68 FC | 	wrlong	#0, fp
10e18                 | ' max=0
10e18                 | ' if harm(0)<0 then
10e18     1C 4E 05 F1 | 	add	fp, #28
10e1c     A7 12 02 FB | 	rdlong	arg01, fp
10e20     3C 4E 85 F1 | 	sub	fp, #60
10e24     00 14 06 F6 | 	mov	arg02, #0
10e28     01 16 06 F6 | 	mov	arg03, #1
10e2c     EC 8D B1 FD | 	call	#__system___float_cmp
10e30     00 FA 55 F2 | 	cmps	result1, #0 wc
10e34     04 01 90 3D |  if_ae	jmp	#LR__1366
10e38     3C 4E 05 F1 | 	add	fp, #60
10e3c     A7 FA 01 FB | 	rdlong	result1, fp
10e40     1F FA 05 F4 | 	bitl	result1, #31
10e44     24 4E 85 F1 | 	sub	fp, #36
10e48     A7 FA 61 FC | 	wrlong	result1, fp
10e4c     28 4E 05 F1 | 	add	fp, #40
10e50     A7 FA 01 FB | 	rdlong	result1, fp
10e54     1F FA 05 F4 | 	bitl	result1, #31
10e58     24 4E 85 F1 | 	sub	fp, #36
10e5c     A7 FA 61 FC | 	wrlong	result1, fp
10e60     20 4E 05 F1 | 	add	fp, #32
10e64     00 C0 9F FF 
10e68     A7 00 68 FC | 	wrlong	##1065353216, fp
10e6c     24 4E 85 F1 | 	sub	fp, #36
10e70     A7 26 02 FB | 	rdlong	local01, fp
10e74     28 4E 05 F1 | 	add	fp, #40
10e78     A7 26 62 FC | 	wrlong	local01, fp
10e7c     24 4E 85 F1 | 	sub	fp, #36
10e80     A7 26 02 FB | 	rdlong	local01, fp
10e84     28 4E 05 F1 | 	add	fp, #40
10e88     A7 26 62 FC | 	wrlong	local01, fp
10e8c                 | '   harm(0)=1
10e8c                 | '   harm(1)=even
10e8c                 | '   harm(2)=odd
10e8c                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
10e8c     40 4E 85 F1 | 	sub	fp, #64
10e90     A7 06 68 FC | 	wrlong	#3, fp
10e94                 | LR__1364
10e94     A7 1A 02 FB | 	rdlong	arg05, fp
10e98     0D 29 02 F6 | 	mov	local02, arg05
10e9c     02 28 66 F0 | 	shl	local02, #2
10ea0     38 4E 05 F1 | 	add	fp, #56
10ea4     A7 28 02 F1 | 	add	local02, fp
10ea8     02 1A 86 F1 | 	sub	arg05, #2
10eac     02 1A 66 F0 | 	shl	arg05, #2
10eb0     A7 1A 02 F1 | 	add	arg05, fp
10eb4     0D 13 02 FB | 	rdlong	arg01, arg05
10eb8     24 4E 85 F1 | 	sub	fp, #36
10ebc     A7 14 02 FB | 	rdlong	arg02, fp
10ec0     18 4E 85 F1 | 	sub	fp, #24
10ec4     20 89 B1 FD | 	call	#__system___float_mul
10ec8     14 FB 61 FC | 	wrlong	result1, local02
10ecc     04 4E 05 F1 | 	add	fp, #4
10ed0     A7 2A 02 FB | 	rdlong	local03, fp
10ed4     02 2A 06 F1 | 	add	local03, #2
10ed8     A7 2A 62 FC | 	wrlong	local03, fp
10edc     10 2A 56 F2 | 	cmps	local03, #16 wc
10ee0     B0 FF 9F CD |  if_b	jmp	#LR__1364
10ee4                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
10ee4     A7 08 68 FC | 	wrlong	#4, fp
10ee8                 | LR__1365
10ee8     A7 2A 02 FB | 	rdlong	local03, fp
10eec     15 29 02 F6 | 	mov	local02, local03
10ef0     02 28 66 F0 | 	shl	local02, #2
10ef4     38 4E 05 F1 | 	add	fp, #56
10ef8     A7 28 02 F1 | 	add	local02, fp
10efc     02 2A 86 F1 | 	sub	local03, #2
10f00     02 2A 66 F0 | 	shl	local03, #2
10f04     A7 2A 02 F1 | 	add	local03, fp
10f08     15 13 02 FB | 	rdlong	arg01, local03
10f0c     20 4E 85 F1 | 	sub	fp, #32
10f10     A7 14 02 FB | 	rdlong	arg02, fp
10f14     1C 4E 85 F1 | 	sub	fp, #28
10f18     CC 88 B1 FD | 	call	#__system___float_mul
10f1c     14 FB 61 FC | 	wrlong	result1, local02
10f20     04 4E 05 F1 | 	add	fp, #4
10f24     A7 2A 02 FB | 	rdlong	local03, fp
10f28     02 2A 06 F1 | 	add	local03, #2
10f2c     A7 2A 62 FC | 	wrlong	local03, fp
10f30     0F 2A 56 F2 | 	cmps	local03, #15 wc
10f34     B0 FF 9F CD |  if_b	jmp	#LR__1365
10f38     04 4E 85 F1 | 	sub	fp, #4
10f3c                 | LR__1366
10f3c                 | ' if harm(0)>=0 then ' synthesize with harmonics
10f3c     3C 4E 05 F1 | 	add	fp, #60
10f40     A7 12 02 FB | 	rdlong	arg01, fp
10f44     3C 4E 85 F1 | 	sub	fp, #60
10f48     00 14 06 F6 | 	mov	arg02, #0
10f4c     01 16 66 F6 | 	neg	arg03, #1
10f50     C8 8C B1 FD | 	call	#__system___float_cmp
10f54     00 FA 55 F2 | 	cmps	result1, #0 wc
10f58     A4 02 90 CD |  if_b	jmp	#LR__1372
10f5c                 | '   for i=0 to 1023
10f5c     04 4E 05 F1 | 	add	fp, #4
10f60     A7 00 68 FC | 	wrlong	#0, fp
10f64     04 4E 85 F1 | 	sub	fp, #4
10f68                 | LR__1367
10f68     24 4E 05 F1 | 	add	fp, #36
10f6c     A7 00 68 FC | 	wrlong	#0, fp
10f70                 | '     spl=0
10f70                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
10f70     1C 4E 85 F1 | 	sub	fp, #28
10f74     A7 00 68 FC | 	wrlong	#0, fp
10f78                 | LR__1368
10f78     A7 28 02 FB | 	rdlong	local02, fp
10f7c     02 28 66 F0 | 	shl	local02, #2
10f80     34 4E 05 F1 | 	add	fp, #52
10f84     A7 28 02 F1 | 	add	local02, fp
10f88     14 2B 02 FB | 	rdlong	local03, local02
10f8c     87 E4 1D FF 
10f90     DB 29 06 F6 | 	mov	local02, ##1003032539
10f94     38 4E 85 F1 | 	sub	fp, #56
10f98     A7 12 02 FB | 	rdlong	arg01, fp
10f9c     04 4E 85 F1 | 	sub	fp, #4
10fa0     09 13 52 F6 | 	abs	arg01, arg01 wc
10fa4     1F 2C C6 C9 |  if_b	decod	local04, #31
10fa8     00 2C 06 36 |  if_ae	mov	local04, #0
10fac     34 84 B1 FD | 	call	#__system___float_fromuns
10fb0     16 FB 61 F5 | 	xor	result1, local04
10fb4     FD 14 02 F6 | 	mov	arg02, result1
10fb8     14 13 02 F6 | 	mov	arg01, local02
10fbc     28 88 B1 FD | 	call	#__system___float_mul
10fc0     FD 28 02 F6 | 	mov	local02, result1
10fc4     08 4E 05 F1 | 	add	fp, #8
10fc8     A7 12 02 FB | 	rdlong	arg01, fp
10fcc     08 4E 85 F1 | 	sub	fp, #8
10fd0     01 12 06 F1 | 	add	arg01, #1
10fd4     09 13 52 F6 | 	abs	arg01, arg01 wc
10fd8     1F 2C C6 C9 |  if_b	decod	local04, #31
10fdc     00 2C 06 36 |  if_ae	mov	local04, #0
10fe0     00 84 B1 FD | 	call	#__system___float_fromuns
10fe4     16 FB 61 F5 | 	xor	result1, local04
10fe8     FD 14 02 F6 | 	mov	arg02, result1
10fec     14 13 02 F6 | 	mov	arg01, local02
10ff0     F4 87 B1 FD | 	call	#__system___float_mul
10ff4     FD 12 02 F6 | 	mov	arg01, result1
10ff8     4C 91 B1 FD | 	call	#__system____builtin_sinf
10ffc     FD 14 02 F6 | 	mov	arg02, result1
11000     15 13 02 F6 | 	mov	arg01, local03
11004     E0 87 B1 FD | 	call	#__system___float_mul
11008     FD 14 02 F6 | 	mov	arg02, result1
1100c     24 4E 05 F1 | 	add	fp, #36
11010     A7 12 02 FB | 	rdlong	arg01, fp
11014     24 4E 85 F1 | 	sub	fp, #36
11018     FC 83 B1 FD | 	call	#__system___float_add
1101c     24 4E 05 F1 | 	add	fp, #36
11020     A7 FA 61 FC | 	wrlong	result1, fp
11024     1C 4E 85 F1 | 	sub	fp, #28
11028     A7 16 02 FB | 	rdlong	arg03, fp
1102c     01 16 06 F1 | 	add	arg03, #1
11030     A7 16 62 FC | 	wrlong	arg03, fp
11034     10 16 56 F2 | 	cmps	arg03, #16 wc
11038     3C FF 9F CD |  if_b	jmp	#LR__1368
1103c                 | '     if abs(spl)>max then max=abs(spl)  
1103c     1C 4E 05 F1 | 	add	fp, #28
11040     A7 12 02 FB | 	rdlong	arg01, fp
11044     1F 12 06 F4 | 	bitl	arg01, #31
11048     04 4E 85 F1 | 	sub	fp, #4
1104c     A7 14 02 FB | 	rdlong	arg02, fp
11050     20 4E 85 F1 | 	sub	fp, #32
11054     01 16 66 F6 | 	neg	arg03, #1
11058     C0 8B B1 FD | 	call	#__system___float_cmp
1105c     01 FA 55 F2 | 	cmps	result1, #1 wc
11060     18 00 90 CD |  if_b	jmp	#LR__1369
11064     24 4E 05 F1 | 	add	fp, #36
11068     A7 FA 01 FB | 	rdlong	result1, fp
1106c     1F FA 05 F4 | 	bitl	result1, #31
11070     04 4E 85 F1 | 	sub	fp, #4
11074     A7 FA 61 FC | 	wrlong	result1, fp
11078     20 4E 85 F1 | 	sub	fp, #32
1107c                 | LR__1369
1107c     04 4E 05 F1 | 	add	fp, #4
11080     A7 2A 02 FB | 	rdlong	local03, fp
11084     01 2A 06 F1 | 	add	local03, #1
11088     A7 2A 62 FC | 	wrlong	local03, fp
1108c     04 4E 85 F1 | 	sub	fp, #4
11090     02 00 00 FF 
11094     00 2A 56 F2 | 	cmps	local03, ##1024 wc
11098     CC FE 9F CD |  if_b	jmp	#LR__1367
1109c                 | '   for i=0 to 1023
1109c     04 4E 05 F1 | 	add	fp, #4
110a0     A7 00 68 FC | 	wrlong	#0, fp
110a4     04 4E 85 F1 | 	sub	fp, #4
110a8                 | LR__1370
110a8     24 4E 05 F1 | 	add	fp, #36
110ac     A7 00 68 FC | 	wrlong	#0, fp
110b0                 | '     spl=0
110b0                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
110b0     1C 4E 85 F1 | 	sub	fp, #28
110b4     A7 00 68 FC | 	wrlong	#0, fp
110b8                 | LR__1371
110b8     A7 2A 02 FB | 	rdlong	local03, fp
110bc     02 2A 66 F0 | 	shl	local03, #2
110c0     34 4E 05 F1 | 	add	fp, #52
110c4     A7 2A 02 F1 | 	add	local03, fp
110c8     15 2B 02 FB | 	rdlong	local03, local03
110cc     1C 4E 85 F1 | 	sub	fp, #28
110d0     A7 14 02 FB | 	rdlong	arg02, fp
110d4     20 4E 85 F1 | 	sub	fp, #32
110d8     58 7F 23 FF 
110dc     00 12 06 F6 | 	mov	arg01, ##1191096320
110e0     08 89 B1 FD | 	call	#__system___float_div
110e4     FD 14 02 F6 | 	mov	arg02, result1
110e8     15 13 02 F6 | 	mov	arg01, local03
110ec     F8 86 B1 FD | 	call	#__system___float_mul
110f0     FD 2A 02 F6 | 	mov	local03, result1
110f4     87 E4 1D FF 
110f8     DB 29 06 F6 | 	mov	local02, ##1003032539
110fc     04 4E 05 F1 | 	add	fp, #4
11100     A7 12 02 FB | 	rdlong	arg01, fp
11104     04 4E 85 F1 | 	sub	fp, #4
11108     09 13 52 F6 | 	abs	arg01, arg01 wc
1110c     1F 2C C6 C9 |  if_b	decod	local04, #31
11110     00 2C 06 36 |  if_ae	mov	local04, #0
11114     CC 82 B1 FD | 	call	#__system___float_fromuns
11118     16 FB 61 F5 | 	xor	result1, local04
1111c     FD 14 02 F6 | 	mov	arg02, result1
11120     14 13 02 F6 | 	mov	arg01, local02
11124     C0 86 B1 FD | 	call	#__system___float_mul
11128     FD 28 02 F6 | 	mov	local02, result1
1112c     08 4E 05 F1 | 	add	fp, #8
11130     A7 12 02 FB | 	rdlong	arg01, fp
11134     08 4E 85 F1 | 	sub	fp, #8
11138     01 12 06 F1 | 	add	arg01, #1
1113c     09 13 52 F6 | 	abs	arg01, arg01 wc
11140     1F 2C C6 C9 |  if_b	decod	local04, #31
11144     00 2C 06 36 |  if_ae	mov	local04, #0
11148     98 82 B1 FD | 	call	#__system___float_fromuns
1114c     16 FB 61 F5 | 	xor	result1, local04
11150     FD 14 02 F6 | 	mov	arg02, result1
11154     14 13 02 F6 | 	mov	arg01, local02
11158     8C 86 B1 FD | 	call	#__system___float_mul
1115c     FD 12 02 F6 | 	mov	arg01, result1
11160     E4 8F B1 FD | 	call	#__system____builtin_sinf
11164     FD 14 02 F6 | 	mov	arg02, result1
11168     15 13 02 F6 | 	mov	arg01, local03
1116c     78 86 B1 FD | 	call	#__system___float_mul
11170     FD 14 02 F6 | 	mov	arg02, result1
11174     24 4E 05 F1 | 	add	fp, #36
11178     A7 12 02 FB | 	rdlong	arg01, fp
1117c     24 4E 85 F1 | 	sub	fp, #36
11180     94 82 B1 FD | 	call	#__system___float_add
11184     24 4E 05 F1 | 	add	fp, #36
11188     A7 FA 61 FC | 	wrlong	result1, fp
1118c     1C 4E 85 F1 | 	sub	fp, #28
11190     A7 2A 02 FB | 	rdlong	local03, fp
11194     01 2A 06 F1 | 	add	local03, #1
11198     A7 2A 62 FC | 	wrlong	local03, fp
1119c     10 2A 56 F2 | 	cmps	local03, #16 wc
111a0     14 FF 9F CD |  if_b	jmp	#LR__1371
111a4     08 4E 05 F1 | 	add	fp, #8
111a8     A7 2A 02 FB | 	rdlong	local03, fp
111ac     0B 2A 66 F0 | 	shl	local03, #11
111b0     0C 4E 85 F1 | 	sub	fp, #12
111b4     A7 28 02 FB | 	rdlong	local02, fp
111b8     01 28 66 F0 | 	shl	local02, #1
111bc     14 2B 02 F1 | 	add	local03, local02
111c0     20 4E 05 F1 | 	add	fp, #32
111c4     A7 12 02 FB | 	rdlong	arg01, fp
111c8     24 4E 85 F1 | 	sub	fp, #36
111cc     01 14 06 F6 | 	mov	arg02, #1
111d0     DC 8A B1 FD | 	call	#__system___float_tointeger
111d4     FD 14 02 F6 | 	mov	arg02, result1
111d8     15 13 02 F6 | 	mov	arg01, local03
111dc     84 1F B1 FD | 	call	#_psdpoke
111e0     04 4E 05 F1 | 	add	fp, #4
111e4     A7 2A 02 FB | 	rdlong	local03, fp
111e8     01 2A 06 F1 | 	add	local03, #1
111ec     A7 2A 62 FC | 	wrlong	local03, fp
111f0     04 4E 85 F1 | 	sub	fp, #4
111f4     02 00 00 FF 
111f8     00 2A 56 F2 | 	cmps	local03, ##1024 wc
111fc     A8 FE 9F CD |  if_b	jmp	#LR__1370
11200                 | LR__1372
11200                 | LR__1373
11200     A7 F0 03 F6 | 	mov	ptra, fp
11204     B2 00 A0 FD | 	call	#popregs_
11208                 | _do_defsnd_ret
11208     2D 00 64 FD | 	ret
1120c                 | 
1120c                 | ' 
1120c                 | ' '-------------------- defsprite
1120c                 | ' 
1120c                 | ' sub do_defsprite
1120c                 | _do_defsprite
1120c     07 4A 05 F6 | 	mov	COUNT_, #7
11210     A8 00 A0 FD | 	call	#pushregs_
11214     60 F0 07 F1 | 	add	ptra, #96
11218     C0 C3 BF FD | 	call	#_pop
1121c     FD 16 02 F6 | 	mov	arg03, result1
11220     FE 14 02 F6 | 	mov	arg02, result2
11224     FF 12 02 F6 | 	mov	arg01, result3
11228     30 4E 05 F1 | 	add	fp, #48
1122c     A7 16 62 FC | 	wrlong	arg03, fp
11230     04 4E 05 F1 | 	add	fp, #4
11234     A7 14 62 FC | 	wrlong	arg02, fp
11238     04 4E 05 F1 | 	add	fp, #4
1123c     A7 12 62 FC | 	wrlong	arg01, fp
11240     38 4E 85 F1 | 	sub	fp, #56
11244     94 C3 BF FD | 	call	#_pop
11248     FD 16 02 F6 | 	mov	arg03, result1
1124c     FE 14 02 F6 | 	mov	arg02, result2
11250     FF 12 02 F6 | 	mov	arg01, result3
11254     24 4E 05 F1 | 	add	fp, #36
11258     A7 16 62 FC | 	wrlong	arg03, fp
1125c     04 4E 05 F1 | 	add	fp, #4
11260     A7 14 62 FC | 	wrlong	arg02, fp
11264     04 4E 05 F1 | 	add	fp, #4
11268     A7 12 62 FC | 	wrlong	arg01, fp
1126c     2C 4E 85 F1 | 	sub	fp, #44
11270     68 C3 BF FD | 	call	#_pop
11274     FD 16 02 F6 | 	mov	arg03, result1
11278     FE 14 02 F6 | 	mov	arg02, result2
1127c     FF 12 02 F6 | 	mov	arg01, result3
11280     18 4E 05 F1 | 	add	fp, #24
11284     A7 16 62 FC | 	wrlong	arg03, fp
11288     04 4E 05 F1 | 	add	fp, #4
1128c     A7 14 62 FC | 	wrlong	arg02, fp
11290     04 4E 05 F1 | 	add	fp, #4
11294     A7 12 62 FC | 	wrlong	arg01, fp
11298     20 4E 85 F1 | 	sub	fp, #32
1129c     3C C3 BF FD | 	call	#_pop
112a0     FD 16 02 F6 | 	mov	arg03, result1
112a4     FE 14 02 F6 | 	mov	arg02, result2
112a8     FF 12 02 F6 | 	mov	arg01, result3
112ac     0C 4E 05 F1 | 	add	fp, #12
112b0     A7 16 62 FC | 	wrlong	arg03, fp
112b4     04 4E 05 F1 | 	add	fp, #4
112b8     A7 14 62 FC | 	wrlong	arg02, fp
112bc     04 4E 05 F1 | 	add	fp, #4
112c0     A7 12 62 FC | 	wrlong	arg01, fp
112c4     14 4E 85 F1 | 	sub	fp, #20
112c8     10 C3 BF FD | 	call	#_pop
112cc     FF 16 02 F6 | 	mov	arg03, result3
112d0     A7 FA 61 FC | 	wrlong	result1, fp
112d4     04 4E 05 F1 | 	add	fp, #4
112d8     A7 FC 61 FC | 	wrlong	result2, fp
112dc     04 4E 05 F1 | 	add	fp, #4
112e0     A7 16 62 FC | 	wrlong	arg03, fp
112e4     08 4E 85 F1 | 	sub	fp, #8
112e8     A7 12 02 F6 | 	mov	arg01, fp
112ec     D0 C4 BF FD | 	call	#_converttoint
112f0     3C 4E 05 F1 | 	add	fp, #60
112f4     A7 FA 61 FC | 	wrlong	result1, fp
112f8     30 4E 85 F1 | 	sub	fp, #48
112fc     A7 12 02 F6 | 	mov	arg01, fp
11300     0C 4E 85 F1 | 	sub	fp, #12
11304     B8 C4 BF FD | 	call	#_converttoint
11308     40 4E 05 F1 | 	add	fp, #64
1130c     A7 FA 61 FC | 	wrlong	result1, fp
11310     28 4E 85 F1 | 	sub	fp, #40
11314     A7 12 02 F6 | 	mov	arg01, fp
11318     18 4E 85 F1 | 	sub	fp, #24
1131c     A0 C4 BF FD | 	call	#_converttoint
11320     44 4E 05 F1 | 	add	fp, #68
11324     A7 FA 61 FC | 	wrlong	result1, fp
11328     20 4E 85 F1 | 	sub	fp, #32
1132c     A7 12 02 F6 | 	mov	arg01, fp
11330     24 4E 85 F1 | 	sub	fp, #36
11334     88 C4 BF FD | 	call	#_converttoint
11338     48 4E 05 F1 | 	add	fp, #72
1133c     A7 FA 61 FC | 	wrlong	result1, fp
11340     18 4E 85 F1 | 	sub	fp, #24
11344     A7 12 02 F6 | 	mov	arg01, fp
11348     30 4E 85 F1 | 	sub	fp, #48
1134c     70 C4 BF FD | 	call	#_converttoint
11350     4C 4E 05 F1 | 	add	fp, #76
11354     A7 FA 61 FC | 	wrlong	result1, fp
11358                 | ' 
11358                 | ' t5=pop()
11358                 | ' t4=pop()
11358                 | ' t3=pop()
11358                 | ' t2=pop()
11358                 | ' t1=pop()
11358                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
11358                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
11358     10 4E 85 F1 | 	sub	fp, #16
1135c     A7 16 02 FB | 	rdlong	arg03, fp
11360     3C 4E 85 F1 | 	sub	fp, #60
11364     02 16 66 F0 | 	shl	arg03, #2
11368     52 00 00 FF 
1136c     54 E4 05 F1 | 	add	objptr, ##42068
11370     F2 16 02 F1 | 	add	arg03, objptr
11374     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11378     52 00 00 FF 
1137c     54 E4 85 F1 | 	sub	objptr, ##42068
11380     2C 00 90 AD |  if_e	jmp	#LR__1380
11384     3C 4E 05 F1 | 	add	fp, #60
11388     A7 16 02 FB | 	rdlong	arg03, fp
1138c     3C 4E 85 F1 | 	sub	fp, #60
11390     02 16 66 F0 | 	shl	arg03, #2
11394     52 00 00 FF 
11398     54 E4 05 F1 | 	add	objptr, ##42068
1139c     F2 16 02 F1 | 	add	arg03, objptr
113a0     0B 13 02 FB | 	rdlong	arg01, arg03
113a4     52 00 00 FF 
113a8     54 E4 85 F1 | 	sub	objptr, ##42068
113ac     9C 98 B1 FD | 	call	#__system___gc_free
113b0                 | LR__1380
113b0     3C 4E 05 F1 | 	add	fp, #60
113b4     A7 26 02 FB | 	rdlong	local01, fp
113b8     0C 4E 05 F1 | 	add	fp, #12
113bc     A7 16 02 FB | 	rdlong	arg03, fp
113c0     04 4E 05 F1 | 	add	fp, #4
113c4     A7 14 02 FB | 	rdlong	arg02, fp
113c8     0A 17 02 FD | 	qmul	arg03, arg02
113cc     02 26 66 F0 | 	shl	local01, #2
113d0     52 00 00 FF 
113d4     54 E4 05 F1 | 	add	objptr, ##42068
113d8     F2 26 02 F1 | 	add	local01, objptr
113dc     4C 4E 85 F1 | 	sub	fp, #76
113e0     52 00 00 FF 
113e4     54 E4 85 F1 | 	sub	objptr, ##42068
113e8     18 12 62 FD | 	getqx	arg01
113ec     20 97 B1 FD | 	call	#__system___gc_alloc_managed
113f0     13 FB 61 FC | 	wrlong	result1, local01
113f4                 | ' for y=a3 to a3+a5-1
113f4     44 4E 05 F1 | 	add	fp, #68
113f8     A7 28 02 FB | 	rdlong	local02, fp
113fc     0C 4E 05 F1 | 	add	fp, #12
11400     A7 28 62 FC | 	wrlong	local02, fp
11404     0C 4E 85 F1 | 	sub	fp, #12
11408     A7 2A 02 FB | 	rdlong	local03, fp
1140c     08 4E 05 F1 | 	add	fp, #8
11410     A7 2C 02 FB | 	rdlong	local04, fp
11414     4C 4E 85 F1 | 	sub	fp, #76
11418     16 2B 02 F1 | 	add	local03, local04
1141c                 | LR__1381
1141c     50 4E 05 F1 | 	add	fp, #80
11420     A7 28 02 FB | 	rdlong	local02, fp
11424     50 4E 85 F1 | 	sub	fp, #80
11428     15 29 52 F2 | 	cmps	local02, local03 wc
1142c     F4 00 90 3D |  if_ae	jmp	#LR__1384
11430                 | '   for x=a2 to a4+a2-1
11430     40 4E 05 F1 | 	add	fp, #64
11434     A7 26 02 FB | 	rdlong	local01, fp
11438     14 4E 05 F1 | 	add	fp, #20
1143c     A7 26 62 FC | 	wrlong	local01, fp
11440     0C 4E 85 F1 | 	sub	fp, #12
11444     A7 2E 02 FB | 	rdlong	local05, fp
11448     08 4E 85 F1 | 	sub	fp, #8
1144c     A7 30 02 FB | 	rdlong	local06, fp
11450     40 4E 85 F1 | 	sub	fp, #64
11454     18 2F 02 F1 | 	add	local05, local06
11458                 | LR__1382
11458     54 4E 05 F1 | 	add	fp, #84
1145c     A7 26 02 FB | 	rdlong	local01, fp
11460     54 4E 85 F1 | 	sub	fp, #84
11464     17 27 52 F2 | 	cmps	local01, local05 wc
11468     A0 00 90 3D |  if_ae	jmp	#LR__1383
1146c     3C 4E 05 F1 | 	add	fp, #60
11470     A7 30 02 FB | 	rdlong	local06, fp
11474     18 4E 05 F1 | 	add	fp, #24
11478     A7 2C 02 FB | 	rdlong	local04, fp
1147c     14 4E 85 F1 | 	sub	fp, #20
11480     A7 28 02 FB | 	rdlong	local02, fp
11484     10 4E 05 F1 | 	add	fp, #16
11488     A7 26 02 FB | 	rdlong	local01, fp
1148c     13 17 02 F6 | 	mov	arg03, local01
11490     0C 4E 85 F1 | 	sub	fp, #12
11494     A7 14 02 FB | 	rdlong	arg02, fp
11498     0A 17 82 F1 | 	sub	arg03, arg02
1149c     04 4E 05 F1 | 	add	fp, #4
114a0     A7 14 02 FB | 	rdlong	arg02, fp
114a4     0A 17 02 FD | 	qmul	arg03, arg02
114a8     02 30 66 F0 | 	shl	local06, #2
114ac     52 00 00 FF 
114b0     54 E4 05 F1 | 	add	objptr, ##42068
114b4     F2 30 02 F1 | 	add	local06, objptr
114b8     18 31 02 FB | 	rdlong	local06, local06
114bc     16 33 02 F6 | 	mov	local07, local04
114c0     14 33 82 F1 | 	sub	local07, local02
114c4     52 00 00 FF 
114c8     54 E4 85 F1 | 	sub	objptr, ##42068
114cc     F2 12 02 FB | 	rdlong	arg01, objptr
114d0     16 13 02 F1 | 	add	arg01, local04
114d4     48 4E 85 F1 | 	sub	fp, #72
114d8     0A 26 66 F0 | 	shl	local01, #10
114dc     13 13 02 F1 | 	add	arg01, local01
114e0     18 2C 62 FD | 	getqx	local04
114e4     16 33 02 F1 | 	add	local07, local04
114e8     18 33 02 F1 | 	add	local07, local06
114ec     04 1D B1 FD | 	call	#_pspeek
114f0     19 FB 41 FC | 	wrbyte	result1, local07
114f4     54 4E 05 F1 | 	add	fp, #84
114f8     A7 32 02 FB | 	rdlong	local07, fp
114fc     01 32 06 F1 | 	add	local07, #1
11500     A7 32 62 FC | 	wrlong	local07, fp
11504     54 4E 85 F1 | 	sub	fp, #84
11508     4C FF 9F FD | 	jmp	#LR__1382
1150c                 | LR__1383
1150c     50 4E 05 F1 | 	add	fp, #80
11510     A7 32 02 FB | 	rdlong	local07, fp
11514     01 32 06 F1 | 	add	local07, #1
11518     A7 32 62 FC | 	wrlong	local07, fp
1151c     50 4E 85 F1 | 	sub	fp, #80
11520     F8 FE 9F FD | 	jmp	#LR__1381
11524                 | LR__1384
11524     3C 4E 05 F1 | 	add	fp, #60
11528     A7 32 02 FB | 	rdlong	local07, fp
1152c     19 13 02 F6 | 	mov	arg01, local07
11530     3C 4E 85 F1 | 	sub	fp, #60
11534     02 32 66 F0 | 	shl	local07, #2
11538     52 00 00 FF 
1153c     54 E4 05 F1 | 	add	objptr, ##42068
11540     F2 32 02 F1 | 	add	local07, objptr
11544     19 15 02 FB | 	rdlong	arg02, local07
11548     52 00 00 FF 
1154c     54 E4 85 F1 | 	sub	objptr, ##42068
11550     E4 29 B1 FD | 	call	#_hg010b_spin2_setspriteptr
11554     3C 4E 05 F1 | 	add	fp, #60
11558     A7 12 02 FB | 	rdlong	arg01, fp
1155c     0C 4E 05 F1 | 	add	fp, #12
11560     A7 14 02 FB | 	rdlong	arg02, fp
11564     04 4E 05 F1 | 	add	fp, #4
11568     A7 16 02 FB | 	rdlong	arg03, fp
1156c     4C 4E 85 F1 | 	sub	fp, #76
11570     54 2A B1 FD | 	call	#_hg010b_spin2_setspritesize
11574     A7 F0 03 F6 | 	mov	ptra, fp
11578     B2 00 A0 FD | 	call	#popregs_
1157c                 | _do_defsprite_ret
1157c     2D 00 64 FD | 	ret
11580                 | 
11580                 | ' 
11580                 | ' '-------------------- deg
11580                 | ' 
11580                 | ' sub do_deg
11580                 | _do_deg
11580     52 00 00 FF 
11584     A8 E4 05 F1 | 	add	objptr, ##42152
11588     7D 47 9E FF 
1158c     F2 6A 68 FC | 	wrlong	##1016003125, objptr
11590     04 E4 05 F1 | 	add	objptr, #4
11594     97 32 A1 FF 
11598     F2 C2 69 FC | 	wrlong	##1113927393, objptr
1159c     52 00 00 FF 
115a0     AC E4 85 F1 | 	sub	objptr, ##42156
115a4                 | _do_deg_ret
115a4     2D 00 64 FD | 	ret
115a8                 | 
115a8                 | ' 
115a8                 | ' '-------------------- delete
115a8                 | ' 
115a8                 | ' sub do_delete
115a8                 | _do_delete
115a8     05 4A 05 F6 | 	mov	COUNT_, #5
115ac     A8 00 A0 FD | 	call	#pushregs_
115b0     28 C0 BF FD | 	call	#_pop
115b4     FE 18 02 F6 | 	mov	arg04, result2
115b8     FF 16 02 F6 | 	mov	arg03, result3
115bc     FD 26 02 F6 | 	mov	local01, result1
115c0     0C 29 02 F6 | 	mov	local02, arg04
115c4     0B 2B 02 F6 | 	mov	local03, arg03
115c8                 | ' 
115c8                 | ' t1=pop()
115c8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
115c8     2B 2A 0E F2 | 	cmp	local03, #43 wz
115cc     10 00 90 5D |  if_ne	jmp	#LR__1390
115d0     13 13 02 F6 | 	mov	arg01, local01
115d4     7C C1 BF FD | 	call	#_convertstring
115d8     FD 26 02 F6 | 	mov	local01, result1
115dc     1F 2A 06 F6 | 	mov	local03, #31
115e0                 | LR__1390
115e0                 | ' if t1.result_type<>result_string then printerror(15): return
115e0     1F 2A 0E F2 | 	cmp	local03, #31 wz
115e4     10 00 90 AD |  if_e	jmp	#LR__1391
115e8     0F 12 06 F6 | 	mov	arg01, #15
115ec     00 14 06 F6 | 	mov	arg02, #0
115f0     88 19 B1 FD | 	call	#_printerror
115f4     E4 00 90 FD | 	jmp	#LR__1395
115f8                 | LR__1391
115f8                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
115f8     4A 00 00 FF 
115fc     94 E4 05 F1 | 	add	objptr, ##38036
11600     F2 12 02 FB | 	rdlong	arg01, objptr
11604     4A 00 00 FF 
11608     94 E4 85 F1 | 	sub	objptr, ##38036
1160c     B6 01 00 FF 
11610     8F 15 06 F6 | 	mov	arg02, ##@LR__5886
11614     7C 53 B1 FD | 	call	#__system___string_cmp
11618     00 FA 0D F2 | 	cmp	result1, #0 wz
1161c     34 00 90 AD |  if_e	jmp	#LR__1392
11620     4A 00 00 FF 
11624     94 E4 05 F1 | 	add	objptr, ##38036
11628     F2 12 02 FB | 	rdlong	arg01, objptr
1162c     4A 00 00 FF 
11630     94 E4 85 F1 | 	sub	objptr, ##38036
11634     B6 01 00 FF 
11638     91 15 06 F6 | 	mov	arg02, ##@LR__5887
1163c     88 53 B1 FD | 	call	#__system___string_concat
11640     FD 12 02 F6 | 	mov	arg01, result1
11644     13 15 02 F6 | 	mov	arg02, local01
11648     7C 53 B1 FD | 	call	#__system___string_concat
1164c     FD 2C 02 F6 | 	mov	local04, result1
11650     14 00 90 FD | 	jmp	#LR__1393
11654                 | LR__1392
11654     B6 01 00 FF 
11658     93 13 06 F6 | 	mov	arg01, ##@LR__5888
1165c     13 15 02 F6 | 	mov	arg02, local01
11660     64 53 B1 FD | 	call	#__system___string_concat
11664     FD 2C 02 F6 | 	mov	local04, result1
11668                 | LR__1393
11668     16 13 02 F6 | 	mov	arg01, local04
1166c     CC 7A B1 FD | 	call	#__system___remove
11670     20 E6 05 F1 | 	add	ptr___system__dat__, #32
11674     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
11678     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
1167c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
11680     FD 2E 0A F6 | 	mov	local05, result1 wz
11684                 | ' kill filename$
11684                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
11684     54 00 90 AD |  if_e	jmp	#LR__1394
11688     00 12 06 F6 | 	mov	arg01, #0
1168c     80 AF B1 FD | 	call	#__system___getiolock_0606
11690     FD 12 02 F6 | 	mov	arg01, result1
11694     D4 52 B1 FD | 	call	#__system___lockmem
11698     B6 01 00 FF 
1169c     95 15 06 F6 | 	mov	arg02, ##@LR__5889
116a0     00 12 06 F6 | 	mov	arg01, #0
116a4     00 16 06 F6 | 	mov	arg03, #0
116a8     B8 5F B1 FD | 	call	#__system___basic_print_string
116ac     00 12 06 F6 | 	mov	arg01, #0
116b0     17 15 02 F6 | 	mov	arg02, local05
116b4     00 16 06 F6 | 	mov	arg03, #0
116b8     0A 18 06 F6 | 	mov	arg04, #10
116bc     E8 5F B1 FD | 	call	#__system___basic_print_integer
116c0     00 12 06 F6 | 	mov	arg01, #0
116c4     0A 14 06 F6 | 	mov	arg02, #10
116c8     00 16 06 F6 | 	mov	arg03, #0
116cc     3C 5F B1 FD | 	call	#__system___basic_print_char
116d0     00 12 06 F6 | 	mov	arg01, #0
116d4     38 AF B1 FD | 	call	#__system___getiolock_0606
116d8     FD 00 68 FC | 	wrlong	#0, result1
116dc                 | LR__1394
116dc                 | LR__1395
116dc     A7 F0 03 F6 | 	mov	ptra, fp
116e0     B2 00 A0 FD | 	call	#popregs_
116e4                 | _do_delete_ret
116e4     2D 00 64 FD | 	ret
116e8                 | 
116e8                 | ' 
116e8                 | ' '-------------------- dir
116e8                 | ' 
116e8                 | ' sub do_dir
116e8                 | _do_dir
116e8     13 4A 05 F6 | 	mov	COUNT_, #19
116ec     A8 00 A0 FD | 	call	#pushregs_
116f0     01 00 00 FF 
116f4     38 F0 07 F1 | 	add	ptra, ##568
116f8                 | ' 
116f8                 | ' print "Current directory: "; currentdir$ 
116f8     00 12 06 F6 | 	mov	arg01, #0
116fc     10 AF B1 FD | 	call	#__system___getiolock_0606
11700     FD 12 02 F6 | 	mov	arg01, result1
11704     64 52 B1 FD | 	call	#__system___lockmem
11708     B6 01 00 FF 
1170c     CD 15 06 F6 | 	mov	arg02, ##@LR__5890
11710     00 12 06 F6 | 	mov	arg01, #0
11714     00 16 06 F6 | 	mov	arg03, #0
11718     48 5F B1 FD | 	call	#__system___basic_print_string
1171c     4A 00 00 FF 
11720     94 E4 05 F1 | 	add	objptr, ##38036
11724     F2 14 02 FB | 	rdlong	arg02, objptr
11728     4A 00 00 FF 
1172c     94 E4 85 F1 | 	sub	objptr, ##38036
11730     00 12 06 F6 | 	mov	arg01, #0
11734     00 16 06 F6 | 	mov	arg03, #0
11738     28 5F B1 FD | 	call	#__system___basic_print_string
1173c     00 12 06 F6 | 	mov	arg01, #0
11740     0A 14 06 F6 | 	mov	arg02, #10
11744     00 16 06 F6 | 	mov	arg03, #0
11748     C0 5E B1 FD | 	call	#__system___basic_print_char
1174c     01 26 06 F6 | 	mov	local01, #1
11750     00 12 06 F6 | 	mov	arg01, #0
11754     B8 AE B1 FD | 	call	#__system___getiolock_0606
11758     FD 00 68 FC | 	wrlong	#0, result1
1175c     00 28 06 F6 | 	mov	local02, #0
11760     00 2A 06 F6 | 	mov	local03, #0
11764                 | ' px=0
11764                 | ' for i=0 to 127: filelist(i)="" : next i
11764     00 2C 06 F6 | 	mov	local04, #0
11768     1C 4E 05 F1 | 	add	fp, #28
1176c     97 12 48 FB | 	callpa	#(@LR__1401-@LR__1400)>>2,fcache_load_ptr_
11770                 | LR__1400
11770     16 2F 02 F6 | 	mov	local05, local04
11774     02 2E 66 F0 | 	shl	local05, #2
11778     A7 2E 02 F1 | 	add	local05, fp
1177c     B6 01 00 FF 
11780     E1 31 06 F6 | 	mov	local06, ##@LR__5891
11784     17 31 62 FC | 	wrlong	local06, local05
11788     01 2C 06 F1 | 	add	local04, #1
1178c     80 2C 56 F2 | 	cmps	local04, #128 wc
11790     DC FF 9F CD |  if_b	jmp	#LR__1400
11794                 | LR__1401
11794     1C 4E 85 F1 | 	sub	fp, #28
11798     B6 01 00 FF 
1179c     E2 13 06 F6 | 	mov	arg01, ##@LR__5892
117a0     10 14 06 F6 | 	mov	arg02, #16
117a4     28 B0 B1 FD | 	call	#__system___basic_dir
117a8     FD 32 02 F6 | 	mov	local07, result1
117ac     00 34 06 F6 | 	mov	local08, #0
117b0                 | ' filename=dir$("*", fbDirectory)
117b0                 | ' n=0
117b0                 | ' while filename <> "" andalso filename <> nil andalso n<128
117b0                 | LR__1402
117b0     B6 01 00 FF 
117b4     E4 37 06 F6 | 	mov	local09, ##@LR__5893
117b8     19 13 02 F6 | 	mov	arg01, local07
117bc     1B 15 02 F6 | 	mov	arg02, local09
117c0     D0 51 B1 FD | 	call	#__system___string_cmp
117c4     00 FA 0D F2 | 	cmp	result1, #0 wz
117c8     68 00 90 AD |  if_e	jmp	#LR__1403
117cc     00 36 06 F6 | 	mov	local09, #0
117d0     19 13 02 F6 | 	mov	arg01, local07
117d4     00 14 06 F6 | 	mov	arg02, #0
117d8     B8 51 B1 FD | 	call	#__system___string_cmp
117dc     00 FA 0D F2 | 	cmp	result1, #0 wz
117e0     50 00 90 AD |  if_e	jmp	#LR__1403
117e4     80 34 56 F2 | 	cmps	local08, #128 wc
117e8     48 00 90 3D |  if_ae	jmp	#LR__1403
117ec     B6 01 00 FF 
117f0     E5 13 06 F6 | 	mov	arg01, ##@LR__5894
117f4     19 15 02 F6 | 	mov	arg02, local07
117f8     CC 51 B1 FD | 	call	#__system___string_concat
117fc     FD 32 02 F6 | 	mov	local07, result1
11800     1A 2F 02 F6 | 	mov	local05, local08
11804     02 2E 66 F0 | 	shl	local05, #2
11808     1C 4E 05 F1 | 	add	fp, #28
1180c     A7 2E 02 F1 | 	add	local05, fp
11810     17 33 62 FC | 	wrlong	local07, local05
11814     01 34 06 F1 | 	add	local08, #1
11818     00 2E 06 F6 | 	mov	local05, #0
1181c     00 12 06 F6 | 	mov	arg01, #0
11820     00 14 06 F6 | 	mov	arg02, #0
11824     1C 4E 85 F1 | 	sub	fp, #28
11828     A4 AF B1 FD | 	call	#__system___basic_dir
1182c     FD 32 02 F6 | 	mov	local07, result1
11830     7C FF 9F FD | 	jmp	#LR__1402
11834                 | LR__1403
11834                 | ' for i=0 to n-1			' now sort this
11834     00 2C 06 F6 | 	mov	local04, #0
11838     1A 39 02 F6 | 	mov	local10, local08
1183c                 | LR__1404
1183c     1C 2D 52 F2 | 	cmps	local04, local10 wc
11840     DC 00 90 3D |  if_ae	jmp	#LR__1408
11844     00 3A 06 F6 | 	mov	local11, #0
11848                 | '   swapped=false
11848                 | '   for j=0 to n-i-2
11848     00 3C 06 F6 | 	mov	local12, #0
1184c     1A 3F 02 F6 | 	mov	local13, local08
11850     16 3F 82 F1 | 	sub	local13, local04
11854     01 3E 86 F1 | 	sub	local13, #1
11858                 | LR__1405
11858     1F 3D 52 F2 | 	cmps	local12, local13 wc
1185c     B0 00 90 3D |  if_ae	jmp	#LR__1407
11860                 | '     if filelist(j) > filelist(j+1) then
11860     1E 37 02 F6 | 	mov	local09, local12
11864     02 36 66 F0 | 	shl	local09, #2
11868     1C 4E 05 F1 | 	add	fp, #28
1186c     A7 36 02 F1 | 	add	local09, fp
11870     1B 13 02 FB | 	rdlong	arg01, local09
11874     1E 37 02 F6 | 	mov	local09, local12
11878     01 36 06 F1 | 	add	local09, #1
1187c     1B 31 02 F6 | 	mov	local06, local09
11880     02 30 66 F0 | 	shl	local06, #2
11884     A7 26 02 F6 | 	mov	local01, fp
11888     A7 30 02 F1 | 	add	local06, fp
1188c     18 2F 02 FB | 	rdlong	local05, local06
11890     17 15 02 F6 | 	mov	arg02, local05
11894     1C 4E 85 F1 | 	sub	fp, #28
11898     F8 50 B1 FD | 	call	#__system___string_cmp
1189c     01 FA 55 F2 | 	cmps	result1, #1 wc
118a0     64 00 90 CD |  if_b	jmp	#LR__1406
118a4     1E 37 02 F6 | 	mov	local09, local12
118a8     01 36 06 F1 | 	add	local09, #1
118ac     02 36 66 F0 | 	shl	local09, #2
118b0     1C 4E 05 F1 | 	add	fp, #28
118b4     A7 36 02 F1 | 	add	local09, fp
118b8     1B 3B 02 FB | 	rdlong	local11, local09
118bc     1E 31 02 F6 | 	mov	local06, local12
118c0     02 30 66 F0 | 	shl	local06, #2
118c4     A7 30 02 F1 | 	add	local06, fp
118c8     18 2F 02 FB | 	rdlong	local05, local06
118cc     1E 37 02 F6 | 	mov	local09, local12
118d0     1B 31 02 F6 | 	mov	local06, local09
118d4     02 30 66 F0 | 	shl	local06, #2
118d8     A7 26 02 F6 | 	mov	local01, fp
118dc     A7 30 02 F1 | 	add	local06, fp
118e0     18 3B 62 FC | 	wrlong	local11, local06
118e4     1E 29 02 F6 | 	mov	local02, local12
118e8     01 28 06 F1 | 	add	local02, #1
118ec     14 41 02 F6 | 	mov	local14, local02
118f0     02 40 66 F0 | 	shl	local14, #2
118f4     A7 42 02 F6 | 	mov	local15, fp
118f8     A7 40 02 F1 | 	add	local14, fp
118fc     20 2F 62 FC | 	wrlong	local05, local14
11900     01 3A 66 F6 | 	neg	local11, #1
11904     1C 4E 85 F1 | 	sub	fp, #28
11908                 | LR__1406
11908     01 3C 06 F1 | 	add	local12, #1
1190c     48 FF 9F FD | 	jmp	#LR__1405
11910                 | LR__1407
11910                 | ' if not swapped then exit for
11910     1D 45 22 F6 | 	not	local16, local11
11914     00 44 0E F2 | 	cmp	local16, #0 wz
11918     01 2C 06 A1 |  if_e	add	local04, #1
1191c     1C FF 9F AD |  if_e	jmp	#LR__1404
11920                 | LR__1408
11920                 | ' for i=0 to n-1
11920     00 2C 06 F6 | 	mov	local04, #0
11924     1A 47 02 F6 | 	mov	local17, local08
11928                 | LR__1409
11928     23 2D 52 F2 | 	cmps	local04, local17 wc
1192c     94 00 90 3D |  if_ae	jmp	#LR__1411
11930                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11930     00 12 06 F6 | 	mov	arg01, #0
11934     D8 AC B1 FD | 	call	#__system___getiolock_0606
11938     FD 12 02 F6 | 	mov	arg01, result1
1193c     2C 50 B1 FD | 	call	#__system___lockmem
11940     16 29 02 F6 | 	mov	local02, local04
11944     02 28 66 F0 | 	shl	local02, #2
11948     1C 4E 05 F1 | 	add	fp, #28
1194c     A7 40 02 F6 | 	mov	local14, fp
11950     A7 28 02 F1 | 	add	local02, fp
11954     14 15 02 FB | 	rdlong	arg02, local02
11958     00 26 06 F6 | 	mov	local01, #0
1195c     00 12 06 F6 | 	mov	arg01, #0
11960     00 16 06 F6 | 	mov	arg03, #0
11964     1C 4E 85 F1 | 	sub	fp, #28
11968     F8 5C B1 FD | 	call	#__system___basic_print_string
1196c     00 12 06 F6 | 	mov	arg01, #0
11970     9C AC B1 FD | 	call	#__system___getiolock_0606
11974     FD 00 68 FC | 	wrlong	#0, result1
11978     40 2A 06 F1 | 	add	local03, #64
1197c     15 13 02 F6 | 	mov	arg01, local03
11980     90 32 B1 FD | 	call	#_hg010b_spin2_setcursorx
11984     00 2B 56 F2 | 	cmps	local03, #256 wc
11988     30 00 90 CD |  if_b	jmp	#LR__1410
1198c     00 2A 06 F6 | 	mov	local03, #0
11990     00 12 06 F6 | 	mov	arg01, #0
11994     78 AC B1 FD | 	call	#__system___getiolock_0606
11998     FD 12 02 F6 | 	mov	arg01, result1
1199c     CC 4F B1 FD | 	call	#__system___lockmem
119a0     00 12 06 F6 | 	mov	arg01, #0
119a4     0A 14 06 F6 | 	mov	arg02, #10
119a8     00 16 06 F6 | 	mov	arg03, #0
119ac     5C 5C B1 FD | 	call	#__system___basic_print_char
119b0     00 12 06 F6 | 	mov	arg01, #0
119b4     58 AC B1 FD | 	call	#__system___getiolock_0606
119b8     FD 00 68 FC | 	wrlong	#0, result1
119bc                 | LR__1410
119bc     01 2C 06 F1 | 	add	local04, #1
119c0     64 FF 9F FD | 	jmp	#LR__1409
119c4                 | LR__1411
119c4                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
119c4     80 34 56 F2 | 	cmps	local08, #128 wc
119c8     44 00 90 CD |  if_b	jmp	#LR__1412
119cc     00 12 06 F6 | 	mov	arg01, #0
119d0     3C AC B1 FD | 	call	#__system___getiolock_0606
119d4     FD 12 02 F6 | 	mov	arg01, result1
119d8     90 4F B1 FD | 	call	#__system___lockmem
119dc     B6 01 00 FF 
119e0     EC 15 06 F6 | 	mov	arg02, ##@LR__5895
119e4     00 12 06 F6 | 	mov	arg01, #0
119e8     00 16 06 F6 | 	mov	arg03, #0
119ec     74 5C B1 FD | 	call	#__system___basic_print_string
119f0     00 12 06 F6 | 	mov	arg01, #0
119f4     0A 14 06 F6 | 	mov	arg02, #10
119f8     00 16 06 F6 | 	mov	arg03, #0
119fc     0C 5C B1 FD | 	call	#__system___basic_print_char
11a00     00 12 06 F6 | 	mov	arg01, #0
11a04     08 AC B1 FD | 	call	#__system___getiolock_0606
11a08     FD 00 68 FC | 	wrlong	#0, result1
11a0c     00 26 06 F6 | 	mov	local01, #0
11a10                 | LR__1412
11a10                 | ' print
11a10     00 12 06 F6 | 	mov	arg01, #0
11a14     F8 AB B1 FD | 	call	#__system___getiolock_0606
11a18     FD 12 02 F6 | 	mov	arg01, result1
11a1c     4C 4F B1 FD | 	call	#__system___lockmem
11a20     00 12 06 F6 | 	mov	arg01, #0
11a24     0A 14 06 F6 | 	mov	arg02, #10
11a28     00 16 06 F6 | 	mov	arg03, #0
11a2c     DC 5B B1 FD | 	call	#__system___basic_print_char
11a30     00 12 06 F6 | 	mov	arg01, #0
11a34     D8 AB B1 FD | 	call	#__system___getiolock_0606
11a38     FD 00 68 FC | 	wrlong	#0, result1
11a3c     00 30 06 F6 | 	mov	local06, #0
11a40     00 34 06 F6 | 	mov	local08, #0
11a44     00 2A 06 F6 | 	mov	local03, #0
11a48                 | ' return cursor_y
11a48     3E E4 05 F1 | 	add	objptr, #62
11a4c     F2 48 C2 FA | 	rdbyte	local18, objptr
11a50     3E E4 85 F1 | 	sub	objptr, #62
11a54     B7 01 00 FF 
11a58     1E 12 06 F6 | 	mov	arg01, ##@LR__5896
11a5c     21 14 06 F6 | 	mov	arg02, #33
11a60     6C AD B1 FD | 	call	#__system___basic_dir
11a64     FD 32 02 F6 | 	mov	local07, result1
11a68                 | ' n=0
11a68                 | ' px=0: py=v.getcursory()
11a68                 | ' filename = dir$("*", fbNormal )   
11a68                 | ' do while filename <> "" andalso filename <> nil andalso n<128
11a68                 | LR__1413
11a68     B7 01 00 FF 
11a6c     20 36 06 F6 | 	mov	local09, ##@LR__5897
11a70     19 13 02 F6 | 	mov	arg01, local07
11a74     1B 15 02 F6 | 	mov	arg02, local09
11a78     18 4F B1 FD | 	call	#__system___string_cmp
11a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
11a80     54 00 90 AD |  if_e	jmp	#LR__1414
11a84     00 36 06 F6 | 	mov	local09, #0
11a88     19 13 02 F6 | 	mov	arg01, local07
11a8c     00 14 06 F6 | 	mov	arg02, #0
11a90     00 4F B1 FD | 	call	#__system___string_cmp
11a94     00 FA 0D F2 | 	cmp	result1, #0 wz
11a98     3C 00 90 AD |  if_e	jmp	#LR__1414
11a9c     80 34 56 F2 | 	cmps	local08, #128 wc
11aa0     34 00 90 3D |  if_ae	jmp	#LR__1414
11aa4     1A 2F 02 F6 | 	mov	local05, local08
11aa8     02 2E 66 F0 | 	shl	local05, #2
11aac     1C 4E 05 F1 | 	add	fp, #28
11ab0     A7 2E 02 F1 | 	add	local05, fp
11ab4     17 33 62 FC | 	wrlong	local07, local05
11ab8     01 34 06 F1 | 	add	local08, #1
11abc     00 2E 06 F6 | 	mov	local05, #0
11ac0     00 12 06 F6 | 	mov	arg01, #0
11ac4     00 14 06 F6 | 	mov	arg02, #0
11ac8     1C 4E 85 F1 | 	sub	fp, #28
11acc     00 AD B1 FD | 	call	#__system___basic_dir
11ad0     FD 32 02 F6 | 	mov	local07, result1
11ad4     90 FF 9F FD | 	jmp	#LR__1413
11ad8                 | LR__1414
11ad8                 | ' for i =0 to n-1
11ad8     00 2C 06 F6 | 	mov	local04, #0
11adc                 | LR__1415
11adc     1A 2D 52 F2 | 	cmps	local04, local08 wc
11ae0     D8 00 90 3D |  if_ae	jmp	#LR__1419
11ae4     00 3A 06 F6 | 	mov	local11, #0
11ae8                 | '   swapped=false
11ae8                 | '   for j=0 to n-i-2
11ae8     00 3C 06 F6 | 	mov	local12, #0
11aec     1A 4B 02 F6 | 	mov	local19, local08
11af0     16 4B 82 F1 | 	sub	local19, local04
11af4     01 4A 86 F1 | 	sub	local19, #1
11af8                 | LR__1416
11af8     25 3D 52 F2 | 	cmps	local12, local19 wc
11afc     AC 00 90 3D |  if_ae	jmp	#LR__1418
11b00                 | '     if filelist(j) > filelist(j+1) then
11b00     1E 37 02 F6 | 	mov	local09, local12
11b04     02 36 66 F0 | 	shl	local09, #2
11b08     1C 4E 05 F1 | 	add	fp, #28
11b0c     A7 36 02 F1 | 	add	local09, fp
11b10     1B 13 02 FB | 	rdlong	arg01, local09
11b14     1E 37 02 F6 | 	mov	local09, local12
11b18     01 36 06 F1 | 	add	local09, #1
11b1c     1B 31 02 F6 | 	mov	local06, local09
11b20     02 30 66 F0 | 	shl	local06, #2
11b24     A7 26 02 F6 | 	mov	local01, fp
11b28     A7 30 02 F1 | 	add	local06, fp
11b2c     18 2F 02 FB | 	rdlong	local05, local06
11b30     17 15 02 F6 | 	mov	arg02, local05
11b34     1C 4E 85 F1 | 	sub	fp, #28
11b38     58 4E B1 FD | 	call	#__system___string_cmp
11b3c     01 FA 55 F2 | 	cmps	result1, #1 wc
11b40     60 00 90 CD |  if_b	jmp	#LR__1417
11b44     1E 37 02 F6 | 	mov	local09, local12
11b48     01 36 06 F1 | 	add	local09, #1
11b4c     02 36 66 F0 | 	shl	local09, #2
11b50     1C 4E 05 F1 | 	add	fp, #28
11b54     A7 36 02 F1 | 	add	local09, fp
11b58     1B 45 02 FB | 	rdlong	local16, local09
11b5c     1E 31 02 F6 | 	mov	local06, local12
11b60     02 30 66 F0 | 	shl	local06, #2
11b64     A7 30 02 F1 | 	add	local06, fp
11b68     18 2F 02 FB | 	rdlong	local05, local06
11b6c     1E 37 02 F6 | 	mov	local09, local12
11b70     1B 31 02 F6 | 	mov	local06, local09
11b74     02 30 66 F0 | 	shl	local06, #2
11b78     A7 26 02 F6 | 	mov	local01, fp
11b7c     A7 30 02 F1 | 	add	local06, fp
11b80     18 45 62 FC | 	wrlong	local16, local06
11b84     1E 41 02 F6 | 	mov	local14, local12
11b88     01 40 06 F1 | 	add	local14, #1
11b8c     02 40 66 F0 | 	shl	local14, #2
11b90     A7 42 02 F6 | 	mov	local15, fp
11b94     A7 40 02 F1 | 	add	local14, fp
11b98     20 2F 62 FC | 	wrlong	local05, local14
11b9c     01 3A 66 F6 | 	neg	local11, #1
11ba0     1C 4E 85 F1 | 	sub	fp, #28
11ba4                 | LR__1417
11ba4     01 3C 06 F1 | 	add	local12, #1
11ba8     4C FF 9F FD | 	jmp	#LR__1416
11bac                 | LR__1418
11bac                 | ' if not swapped then exit for
11bac     1D 45 22 F6 | 	not	local16, local11
11bb0     00 44 0E F2 | 	cmp	local16, #0 wz
11bb4     01 2C 06 A1 |  if_e	add	local04, #1
11bb8     20 FF 9F AD |  if_e	jmp	#LR__1415
11bbc                 | LR__1419
11bbc                 | ' for i=0 to n-1
11bbc     00 2C 06 F6 | 	mov	local04, #0
11bc0                 | LR__1420
11bc0     1A 2D 52 F2 | 	cmps	local04, local08 wc
11bc4     8C 00 90 3D |  if_ae	jmp	#LR__1422
11bc8                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11bc8     00 12 06 F6 | 	mov	arg01, #0
11bcc     40 AA B1 FD | 	call	#__system___getiolock_0606
11bd0     FD 12 02 F6 | 	mov	arg01, result1
11bd4     94 4D B1 FD | 	call	#__system___lockmem
11bd8     16 29 02 F6 | 	mov	local02, local04
11bdc     02 28 66 F0 | 	shl	local02, #2
11be0     1C 4E 05 F1 | 	add	fp, #28
11be4     A7 28 02 F1 | 	add	local02, fp
11be8     14 15 02 FB | 	rdlong	arg02, local02
11bec     00 12 06 F6 | 	mov	arg01, #0
11bf0     00 16 06 F6 | 	mov	arg03, #0
11bf4     1C 4E 85 F1 | 	sub	fp, #28
11bf8     68 5A B1 FD | 	call	#__system___basic_print_string
11bfc     00 12 06 F6 | 	mov	arg01, #0
11c00     0C AA B1 FD | 	call	#__system___getiolock_0606
11c04     FD 00 68 FC | 	wrlong	#0, result1
11c08     40 2A 06 F1 | 	add	local03, #64
11c0c     15 13 02 F6 | 	mov	arg01, local03
11c10     00 30 B1 FD | 	call	#_hg010b_spin2_setcursorx
11c14     00 2B 56 F2 | 	cmps	local03, #256 wc
11c18     30 00 90 CD |  if_b	jmp	#LR__1421
11c1c     00 2A 06 F6 | 	mov	local03, #0
11c20     00 12 06 F6 | 	mov	arg01, #0
11c24     E8 A9 B1 FD | 	call	#__system___getiolock_0606
11c28     FD 12 02 F6 | 	mov	arg01, result1
11c2c     3C 4D B1 FD | 	call	#__system___lockmem
11c30     00 12 06 F6 | 	mov	arg01, #0
11c34     0A 14 06 F6 | 	mov	arg02, #10
11c38     00 16 06 F6 | 	mov	arg03, #0
11c3c     CC 59 B1 FD | 	call	#__system___basic_print_char
11c40     00 12 06 F6 | 	mov	arg01, #0
11c44     C8 A9 B1 FD | 	call	#__system___getiolock_0606
11c48     FD 00 68 FC | 	wrlong	#0, result1
11c4c                 | LR__1421
11c4c     01 2C 06 F1 | 	add	local04, #1
11c50     6C FF 9F FD | 	jmp	#LR__1420
11c54                 | LR__1422
11c54                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11c54     80 34 56 F2 | 	cmps	local08, #128 wc
11c58     40 00 90 CD |  if_b	jmp	#LR__1423
11c5c     00 12 06 F6 | 	mov	arg01, #0
11c60     AC A9 B1 FD | 	call	#__system___getiolock_0606
11c64     FD 12 02 F6 | 	mov	arg01, result1
11c68     00 4D B1 FD | 	call	#__system___lockmem
11c6c     B7 01 00 FF 
11c70     21 14 06 F6 | 	mov	arg02, ##@LR__5898
11c74     00 12 06 F6 | 	mov	arg01, #0
11c78     00 16 06 F6 | 	mov	arg03, #0
11c7c     E4 59 B1 FD | 	call	#__system___basic_print_string
11c80     00 12 06 F6 | 	mov	arg01, #0
11c84     0A 14 06 F6 | 	mov	arg02, #10
11c88     00 16 06 F6 | 	mov	arg03, #0
11c8c     7C 59 B1 FD | 	call	#__system___basic_print_char
11c90     00 12 06 F6 | 	mov	arg01, #0
11c94     78 A9 B1 FD | 	call	#__system___getiolock_0606
11c98     FD 00 68 FC | 	wrlong	#0, result1
11c9c                 | LR__1423
11c9c                 | ' print
11c9c     00 12 06 F6 | 	mov	arg01, #0
11ca0     6C A9 B1 FD | 	call	#__system___getiolock_0606
11ca4     FD 12 02 F6 | 	mov	arg01, result1
11ca8     C0 4C B1 FD | 	call	#__system___lockmem
11cac     00 12 06 F6 | 	mov	arg01, #0
11cb0     0A 14 06 F6 | 	mov	arg02, #10
11cb4     00 16 06 F6 | 	mov	arg03, #0
11cb8     50 59 B1 FD | 	call	#__system___basic_print_char
11cbc     00 12 06 F6 | 	mov	arg01, #0
11cc0     4C A9 B1 FD | 	call	#__system___getiolock_0606
11cc4     FD 00 68 FC | 	wrlong	#0, result1
11cc8     A7 F0 03 F6 | 	mov	ptra, fp
11ccc     B2 00 A0 FD | 	call	#popregs_
11cd0                 | _do_dir_ret
11cd0     2D 00 64 FD | 	ret
11cd4                 | 
11cd4                 | ' 
11cd4                 | ' '-------------------- dpeek
11cd4                 | ' 
11cd4                 | ' sub do_dpeek
11cd4                 | _do_dpeek
11cd4     00 4A 05 F6 | 	mov	COUNT_, #0
11cd8     A8 00 A0 FD | 	call	#pushregs_
11cdc     14 F0 07 F1 | 	add	ptra, #20
11ce0     F8 B8 BF FD | 	call	#_pop
11ce4     A7 FA 61 FC | 	wrlong	result1, fp
11ce8     04 4E 05 F1 | 	add	fp, #4
11cec     A7 FC 61 FC | 	wrlong	result2, fp
11cf0     04 4E 05 F1 | 	add	fp, #4
11cf4     A7 FE 61 FC | 	wrlong	result3, fp
11cf8     08 4E 85 F1 | 	sub	fp, #8
11cfc     A7 12 02 F6 | 	mov	arg01, fp
11d00     BC BA BF FD | 	call	#_converttoint
11d04     0C 4E 05 F1 | 	add	fp, #12
11d08     A7 FA 61 FC | 	wrlong	result1, fp
11d0c                 | ' 
11d0c                 | ' t1=pop()
11d0c                 | ' a=converttoint(t1)
11d0c                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
11d0c     0C 4E 85 F1 | 	sub	fp, #12
11d10     00 04 00 FF 
11d14     00 FA 15 F2 | 	cmp	result1, ##524288 wc
11d18     1C 00 90 3D |  if_ae	jmp	#LR__1430
11d1c     0C 4E 05 F1 | 	add	fp, #12
11d20     A7 12 02 FB | 	rdlong	arg01, fp
11d24     09 FB E1 FA | 	rdword	result1, arg01
11d28     04 4E 05 F1 | 	add	fp, #4
11d2c     A7 FA 61 FC | 	wrlong	result1, fp
11d30     10 4E 85 F1 | 	sub	fp, #16
11d34     1C 00 90 FD | 	jmp	#LR__1431
11d38                 | LR__1430
11d38     0C 4E 05 F1 | 	add	fp, #12
11d3c     A7 12 02 FB | 	rdlong	arg01, fp
11d40     0C 4E 85 F1 | 	sub	fp, #12
11d44     5C 15 B1 FD | 	call	#_psdpeek
11d48     10 4E 05 F1 | 	add	fp, #16
11d4c     A7 FA 61 FC | 	wrlong	result1, fp
11d50     10 4E 85 F1 | 	sub	fp, #16
11d54                 | LR__1431
11d54     08 4E 05 F1 | 	add	fp, #8
11d58     A7 3A 68 FC | 	wrlong	#29, fp
11d5c     08 4E 05 F1 | 	add	fp, #8
11d60     A7 12 02 FB | 	rdlong	arg01, fp
11d64     10 4E 85 F1 | 	sub	fp, #16
11d68     A7 12 62 FC | 	wrlong	arg01, fp
11d6c     A7 12 02 F6 | 	mov	arg01, fp
11d70     00 B9 BF FD | 	call	#_push
11d74     A7 F0 03 F6 | 	mov	ptra, fp
11d78     B2 00 A0 FD | 	call	#popregs_
11d7c                 | _do_dpeek_ret
11d7c     2D 00 64 FD | 	ret
11d80                 | 
11d80                 | ' 
11d80                 | ' '-------------------- dpoke
11d80                 | ' 
11d80                 | ' sub do_dpoke
11d80                 | _do_dpoke
11d80     01 4A 05 F6 | 	mov	COUNT_, #1
11d84     A8 00 A0 FD | 	call	#pushregs_
11d88     20 F0 07 F1 | 	add	ptra, #32
11d8c     4C B8 BF FD | 	call	#_pop
11d90     FD 14 02 F6 | 	mov	arg02, result1
11d94     FE 12 02 F6 | 	mov	arg01, result2
11d98     FF 26 02 F6 | 	mov	local01, result3
11d9c     A7 14 62 FC | 	wrlong	arg02, fp
11da0     04 4E 05 F1 | 	add	fp, #4
11da4     A7 12 62 FC | 	wrlong	arg01, fp
11da8     04 4E 05 F1 | 	add	fp, #4
11dac     A7 26 62 FC | 	wrlong	local01, fp
11db0     08 4E 85 F1 | 	sub	fp, #8
11db4     24 B8 BF FD | 	call	#_pop
11db8     FF 26 02 F6 | 	mov	local01, result3
11dbc     0C 4E 05 F1 | 	add	fp, #12
11dc0     A7 FA 61 FC | 	wrlong	result1, fp
11dc4     04 4E 05 F1 | 	add	fp, #4
11dc8     A7 FC 61 FC | 	wrlong	result2, fp
11dcc     04 4E 05 F1 | 	add	fp, #4
11dd0     A7 26 62 FC | 	wrlong	local01, fp
11dd4     08 4E 85 F1 | 	sub	fp, #8
11dd8     A7 12 02 F6 | 	mov	arg01, fp
11ddc     0C 4E 85 F1 | 	sub	fp, #12
11de0     DC B9 BF FD | 	call	#_converttoint
11de4     18 4E 05 F1 | 	add	fp, #24
11de8     A7 FA 61 FC | 	wrlong	result1, fp
11dec     18 4E 85 F1 | 	sub	fp, #24
11df0     A7 12 02 F6 | 	mov	arg01, fp
11df4     C8 B9 BF FD | 	call	#_converttoint
11df8     1C 4E 05 F1 | 	add	fp, #28
11dfc     A7 FA 61 FC | 	wrlong	result1, fp
11e00                 | ' 
11e00                 | ' t1=pop() 'value
11e00                 | ' t2=pop() 
11e00                 | ' a=converttoint(t2) : v=converttoint(t1)
11e00                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
11e00     04 4E 85 F1 | 	sub	fp, #4
11e04     A7 26 02 FB | 	rdlong	local01, fp
11e08     18 4E 85 F1 | 	sub	fp, #24
11e0c     00 04 00 FF 
11e10     00 26 16 F2 | 	cmp	local01, ##524288 wc
11e14     1C 00 90 3D |  if_ae	jmp	#LR__1440
11e18     18 4E 05 F1 | 	add	fp, #24
11e1c     A7 12 02 FB | 	rdlong	arg01, fp
11e20     04 4E 05 F1 | 	add	fp, #4
11e24     A7 14 02 FB | 	rdlong	arg02, fp
11e28     1C 4E 85 F1 | 	sub	fp, #28
11e2c     09 15 52 FC | 	wrword	arg02, arg01
11e30     18 00 90 FD | 	jmp	#LR__1441
11e34                 | LR__1440
11e34     18 4E 05 F1 | 	add	fp, #24
11e38     A7 12 02 FB | 	rdlong	arg01, fp
11e3c     04 4E 05 F1 | 	add	fp, #4
11e40     A7 14 02 FB | 	rdlong	arg02, fp
11e44     1C 4E 85 F1 | 	sub	fp, #28
11e48     18 13 B1 FD | 	call	#_psdpoke
11e4c                 | LR__1441
11e4c     A7 F0 03 F6 | 	mov	ptra, fp
11e50     B2 00 A0 FD | 	call	#popregs_
11e54                 | _do_dpoke_ret
11e54     2D 00 64 FD | 	ret
11e58                 | 
11e58                 | ' '-------------------- draw
11e58                 | ' 
11e58                 | ' sub do_draw
11e58                 | _do_draw
11e58     00 4A 05 F6 | 	mov	COUNT_, #0
11e5c     A8 00 A0 FD | 	call	#pushregs_
11e60     20 F0 07 F1 | 	add	ptra, #32
11e64     74 B7 BF FD | 	call	#_pop
11e68     FD 1A 02 F6 | 	mov	arg05, result1
11e6c     FE 18 02 F6 | 	mov	arg04, result2
11e70     FF 16 02 F6 | 	mov	arg03, result3
11e74     0C 4E 05 F1 | 	add	fp, #12
11e78     A7 1A 62 FC | 	wrlong	arg05, fp
11e7c     04 4E 05 F1 | 	add	fp, #4
11e80     A7 18 62 FC | 	wrlong	arg04, fp
11e84     04 4E 05 F1 | 	add	fp, #4
11e88     A7 16 62 FC | 	wrlong	arg03, fp
11e8c     14 4E 85 F1 | 	sub	fp, #20
11e90     48 B7 BF FD | 	call	#_pop
11e94     FF 1A 02 F6 | 	mov	arg05, result3
11e98     A7 FA 61 FC | 	wrlong	result1, fp
11e9c     04 4E 05 F1 | 	add	fp, #4
11ea0     A7 FC 61 FC | 	wrlong	result2, fp
11ea4     04 4E 05 F1 | 	add	fp, #4
11ea8     A7 1A 62 FC | 	wrlong	arg05, fp
11eac     08 4E 85 F1 | 	sub	fp, #8
11eb0     A7 12 02 F6 | 	mov	arg01, fp
11eb4     08 B9 BF FD | 	call	#_converttoint
11eb8     18 4E 05 F1 | 	add	fp, #24
11ebc     A7 FA 61 FC | 	wrlong	result1, fp
11ec0     0C 4E 85 F1 | 	sub	fp, #12
11ec4     A7 12 02 F6 | 	mov	arg01, fp
11ec8     0C 4E 85 F1 | 	sub	fp, #12
11ecc     F0 B8 BF FD | 	call	#_converttoint
11ed0     1C 4E 05 F1 | 	add	fp, #28
11ed4     A7 FA 61 FC | 	wrlong	result1, fp
11ed8     37 00 00 FF 
11edc     2C E4 05 F1 | 	add	objptr, ##28204
11ee0     F2 12 02 FB | 	rdlong	arg01, objptr
11ee4     04 E4 05 F1 | 	add	objptr, #4
11ee8     F2 14 02 FB | 	rdlong	arg02, objptr
11eec     04 4E 85 F1 | 	sub	fp, #4
11ef0     A7 16 02 FB | 	rdlong	arg03, fp
11ef4     FD 18 02 F6 | 	mov	arg04, result1
11ef8     18 4E 85 F1 | 	sub	fp, #24
11efc     08 E4 85 F1 | 	sub	objptr, #8
11f00     F2 1A 02 FB | 	rdlong	arg05, objptr
11f04     37 00 00 FF 
11f08     28 E4 85 F1 | 	sub	objptr, ##28200
11f0c     B4 23 B1 FD | 	call	#_hg010b_spin2_draw
11f10     18 4E 05 F1 | 	add	fp, #24
11f14     A7 1A 02 FB | 	rdlong	arg05, fp
11f18     37 00 00 FF 
11f1c     2C E4 05 F1 | 	add	objptr, ##28204
11f20     F2 1A 62 FC | 	wrlong	arg05, objptr
11f24     04 4E 05 F1 | 	add	fp, #4
11f28     A7 1A 02 FB | 	rdlong	arg05, fp
11f2c     1C 4E 85 F1 | 	sub	fp, #28
11f30     04 E4 05 F1 | 	add	objptr, #4
11f34     F2 1A 62 FC | 	wrlong	arg05, objptr
11f38     37 00 00 FF 
11f3c     30 E4 85 F1 | 	sub	objptr, ##28208
11f40     A7 F0 03 F6 | 	mov	ptra, fp
11f44     B2 00 A0 FD | 	call	#popregs_
11f48                 | _do_draw_ret
11f48     2D 00 64 FD | 	ret
11f4c                 | 
11f4c                 | ' 
11f4c                 | ' '-------------------- else
11f4c                 | ' 
11f4c                 | ' sub do_else
11f4c                 | _do_else
11f4c     4A 00 00 FF 
11f50     7C E4 05 F1 | 	add	objptr, ##38012
11f54     F2 00 02 FB | 	rdlong	_var01, objptr
11f58     01 00 86 F1 | 	sub	_var01, #1
11f5c     04 E4 05 F1 | 	add	objptr, #4
11f60     F2 00 62 FC | 	wrlong	_var01, objptr
11f64     4A 00 00 FF 
11f68     80 E4 85 F1 | 	sub	objptr, ##38016
11f6c                 | _do_else_ret
11f6c     2D 00 64 FD | 	ret
11f70                 | 
11f70                 | ' 
11f70                 | ' '-------------------- end
11f70                 | ' 
11f70                 | ' sub do_end
11f70                 | _do_end
11f70     4A 00 00 FF 
11f74     7C E4 05 F1 | 	add	objptr, ##38012
11f78     F2 00 02 FB | 	rdlong	_var01, objptr
11f7c     01 00 86 F1 | 	sub	_var01, #1
11f80     04 E4 05 F1 | 	add	objptr, #4
11f84     F2 00 62 FC | 	wrlong	_var01, objptr
11f88     06 00 00 FF 
11f8c     38 E4 05 F1 | 	add	objptr, ##3128
11f90     FF FF BF FF 
11f94     F2 FE 6B FC | 	wrlong	##2147483647, objptr
11f98     50 00 00 FF 
11f9c     B8 E4 85 F1 | 	sub	objptr, ##41144
11fa0                 | _do_end_ret
11fa0     2D 00 64 FD | 	ret
11fa4                 | 
11fa4                 | ' 
11fa4                 | ' '-------------------- enter
11fa4                 | ' 
11fa4                 | ' sub do_enter
11fa4                 | _do_enter
11fa4     02 00 00 FF 
11fa8     D2 12 06 F6 | 	mov	arg01, ##1234
11fac     A0 2E B0 FD | 	call	#_do_load
11fb0                 | _do_enter_ret
11fb0     2D 00 64 FD | 	ret
11fb4                 | 
11fb4                 | ' 
11fb4                 | ' '------------------- error processing
11fb4                 | ' 
11fb4                 | ' sub do_error
11fb4                 | _do_error
11fb4     01 4A 05 F6 | 	mov	COUNT_, #1
11fb8     A8 00 A0 FD | 	call	#pushregs_
11fbc     4A 00 00 FF 
11fc0     80 E4 05 F1 | 	add	objptr, ##38016
11fc4     F2 18 02 FB | 	rdlong	arg04, objptr
11fc8     0C 17 02 F6 | 	mov	arg03, arg04
11fcc     01 16 66 F0 | 	shl	arg03, #1
11fd0     0C 17 02 F1 | 	add	arg03, arg04
11fd4     02 16 66 F0 | 	shl	arg03, #2
11fd8     03 00 00 FF 
11fdc     04 E4 85 F1 | 	sub	objptr, ##1540
11fe0     F2 16 02 F1 | 	add	arg03, objptr
11fe4     0B 27 02 FB | 	rdlong	local01, arg03
11fe8                 | ' r=compiledline(lineptr_e).result.uresult
11fe8                 | ' print "Error ";r;": ";errors$(r)
11fe8     00 12 06 F6 | 	mov	arg01, #0
11fec     47 00 00 FF 
11ff0     7C E4 85 F1 | 	sub	objptr, ##36476
11ff4     18 A6 B1 FD | 	call	#__system___getiolock_0606
11ff8     FD 12 02 F6 | 	mov	arg01, result1
11ffc     6C 49 B1 FD | 	call	#__system___lockmem
12000     B7 01 00 FF 
12004     53 14 06 F6 | 	mov	arg02, ##@LR__5899
12008     00 12 06 F6 | 	mov	arg01, #0
1200c     00 16 06 F6 | 	mov	arg03, #0
12010     50 56 B1 FD | 	call	#__system___basic_print_string
12014     00 12 06 F6 | 	mov	arg01, #0
12018     13 15 02 F6 | 	mov	arg02, local01
1201c     00 16 06 F6 | 	mov	arg03, #0
12020     0A 18 06 F6 | 	mov	arg04, #10
12024     C0 56 B1 FD | 	call	#__system___basic_print_unsigned
12028     B7 01 00 FF 
1202c     5A 14 06 F6 | 	mov	arg02, ##@LR__5900
12030     00 12 06 F6 | 	mov	arg01, #0
12034     00 16 06 F6 | 	mov	arg03, #0
12038     28 56 B1 FD | 	call	#__system___basic_print_string
1203c     02 26 66 F0 | 	shl	local01, #2
12040     45 00 00 FF 
12044     7C E4 05 F1 | 	add	objptr, ##35452
12048     F2 26 02 F1 | 	add	local01, objptr
1204c     13 15 02 FB | 	rdlong	arg02, local01
12050     00 12 06 F6 | 	mov	arg01, #0
12054     00 16 06 F6 | 	mov	arg03, #0
12058     45 00 00 FF 
1205c     7C E4 85 F1 | 	sub	objptr, ##35452
12060     00 56 B1 FD | 	call	#__system___basic_print_string
12064     00 12 06 F6 | 	mov	arg01, #0
12068     0A 14 06 F6 | 	mov	arg02, #10
1206c     00 16 06 F6 | 	mov	arg03, #0
12070     98 55 B1 FD | 	call	#__system___basic_print_char
12074     00 12 06 F6 | 	mov	arg01, #0
12078     94 A5 B1 FD | 	call	#__system___getiolock_0606
1207c     FD 00 68 FC | 	wrlong	#0, result1
12080     A7 F0 03 F6 | 	mov	ptra, fp
12084     B2 00 A0 FD | 	call	#popregs_
12088                 | _do_error_ret
12088     2D 00 64 FD | 	ret
1208c                 | 
1208c                 | ' 
1208c                 | ' '-------------------- fcircle
1208c                 | ' 
1208c                 | ' sub do_fcircle
1208c                 | _do_fcircle
1208c     02 4A 05 F6 | 	mov	COUNT_, #2
12090     A8 00 A0 FD | 	call	#pushregs_
12094     24 F0 07 F1 | 	add	ptra, #36
12098     40 B5 BF FD | 	call	#_pop
1209c     FD 14 02 F6 | 	mov	arg02, result1
120a0     FE 18 02 F6 | 	mov	arg04, result2
120a4     FF 16 02 F6 | 	mov	arg03, result3
120a8     18 4E 05 F1 | 	add	fp, #24
120ac     A7 14 62 FC | 	wrlong	arg02, fp
120b0     04 4E 05 F1 | 	add	fp, #4
120b4     A7 18 62 FC | 	wrlong	arg04, fp
120b8     04 4E 05 F1 | 	add	fp, #4
120bc     A7 16 62 FC | 	wrlong	arg03, fp
120c0     20 4E 85 F1 | 	sub	fp, #32
120c4     14 B5 BF FD | 	call	#_pop
120c8     FD 14 02 F6 | 	mov	arg02, result1
120cc     FE 18 02 F6 | 	mov	arg04, result2
120d0     FF 16 02 F6 | 	mov	arg03, result3
120d4     0C 4E 05 F1 | 	add	fp, #12
120d8     A7 14 62 FC | 	wrlong	arg02, fp
120dc     04 4E 05 F1 | 	add	fp, #4
120e0     A7 18 62 FC | 	wrlong	arg04, fp
120e4     04 4E 05 F1 | 	add	fp, #4
120e8     A7 16 62 FC | 	wrlong	arg03, fp
120ec     14 4E 85 F1 | 	sub	fp, #20
120f0     E8 B4 BF FD | 	call	#_pop
120f4     FF 14 02 F6 | 	mov	arg02, result3
120f8     A7 FA 61 FC | 	wrlong	result1, fp
120fc     04 4E 05 F1 | 	add	fp, #4
12100     A7 FC 61 FC | 	wrlong	result2, fp
12104     04 4E 05 F1 | 	add	fp, #4
12108     A7 14 62 FC | 	wrlong	arg02, fp
1210c     08 4E 85 F1 | 	sub	fp, #8
12110     A7 12 02 F6 | 	mov	arg01, fp
12114     A8 B6 BF FD | 	call	#_converttoint
12118     FD 26 02 F6 | 	mov	local01, result1
1211c     0C 4E 05 F1 | 	add	fp, #12
12120     A7 12 02 F6 | 	mov	arg01, fp
12124     0C 4E 85 F1 | 	sub	fp, #12
12128     94 B6 BF FD | 	call	#_converttoint
1212c     FD 28 02 F6 | 	mov	local02, result1
12130     18 4E 05 F1 | 	add	fp, #24
12134     A7 12 02 F6 | 	mov	arg01, fp
12138     18 4E 85 F1 | 	sub	fp, #24
1213c     80 B6 BF FD | 	call	#_converttoint
12140     FD 16 02 F6 | 	mov	arg03, result1
12144     37 00 00 FF 
12148     28 E4 05 F1 | 	add	objptr, ##28200
1214c     F2 18 02 FB | 	rdlong	arg04, objptr
12150     37 00 00 FF 
12154     28 E4 85 F1 | 	sub	objptr, ##28200
12158     13 13 02 F6 | 	mov	arg01, local01
1215c     14 15 02 F6 | 	mov	arg02, local02
12160     E4 25 B1 FD | 	call	#_hg010b_spin2_fcircle
12164     A7 F0 03 F6 | 	mov	ptra, fp
12168     B2 00 A0 FD | 	call	#popregs_
1216c                 | _do_fcircle_ret
1216c     2D 00 64 FD | 	ret
12170                 | 
12170                 | ' 
12170                 | ' '-------------------- fill
12170                 | ' 
12170                 | ' sub do_fill
12170                 | _do_fill
12170     03 4A 05 F6 | 	mov	COUNT_, #3
12174     A8 00 A0 FD | 	call	#pushregs_
12178     30 F0 07 F1 | 	add	ptra, #48
1217c     5C B4 BF FD | 	call	#_pop
12180     FD 16 02 F6 | 	mov	arg03, result1
12184     FE 14 02 F6 | 	mov	arg02, result2
12188     FF 18 02 F6 | 	mov	arg04, result3
1218c     24 4E 05 F1 | 	add	fp, #36
12190     A7 16 62 FC | 	wrlong	arg03, fp
12194     04 4E 05 F1 | 	add	fp, #4
12198     A7 14 62 FC | 	wrlong	arg02, fp
1219c     04 4E 05 F1 | 	add	fp, #4
121a0     A7 18 62 FC | 	wrlong	arg04, fp
121a4     2C 4E 85 F1 | 	sub	fp, #44
121a8     30 B4 BF FD | 	call	#_pop
121ac     FD 16 02 F6 | 	mov	arg03, result1
121b0     FE 14 02 F6 | 	mov	arg02, result2
121b4     FF 18 02 F6 | 	mov	arg04, result3
121b8     18 4E 05 F1 | 	add	fp, #24
121bc     A7 16 62 FC | 	wrlong	arg03, fp
121c0     04 4E 05 F1 | 	add	fp, #4
121c4     A7 14 62 FC | 	wrlong	arg02, fp
121c8     04 4E 05 F1 | 	add	fp, #4
121cc     A7 18 62 FC | 	wrlong	arg04, fp
121d0     20 4E 85 F1 | 	sub	fp, #32
121d4     04 B4 BF FD | 	call	#_pop
121d8     FD 16 02 F6 | 	mov	arg03, result1
121dc     FE 14 02 F6 | 	mov	arg02, result2
121e0     FF 18 02 F6 | 	mov	arg04, result3
121e4     0C 4E 05 F1 | 	add	fp, #12
121e8     A7 16 62 FC | 	wrlong	arg03, fp
121ec     04 4E 05 F1 | 	add	fp, #4
121f0     A7 14 62 FC | 	wrlong	arg02, fp
121f4     04 4E 05 F1 | 	add	fp, #4
121f8     A7 18 62 FC | 	wrlong	arg04, fp
121fc     14 4E 85 F1 | 	sub	fp, #20
12200     D8 B3 BF FD | 	call	#_pop
12204     FF 16 02 F6 | 	mov	arg03, result3
12208     A7 FA 61 FC | 	wrlong	result1, fp
1220c     04 4E 05 F1 | 	add	fp, #4
12210     A7 FC 61 FC | 	wrlong	result2, fp
12214     04 4E 05 F1 | 	add	fp, #4
12218     A7 16 62 FC | 	wrlong	arg03, fp
1221c     08 4E 85 F1 | 	sub	fp, #8
12220     A7 12 02 F6 | 	mov	arg01, fp
12224     98 B5 BF FD | 	call	#_converttoint
12228     FD 26 02 F6 | 	mov	local01, result1
1222c     0C 4E 05 F1 | 	add	fp, #12
12230     A7 12 02 F6 | 	mov	arg01, fp
12234     0C 4E 85 F1 | 	sub	fp, #12
12238     84 B5 BF FD | 	call	#_converttoint
1223c     FD 28 02 F6 | 	mov	local02, result1
12240     18 4E 05 F1 | 	add	fp, #24
12244     A7 12 02 F6 | 	mov	arg01, fp
12248     18 4E 85 F1 | 	sub	fp, #24
1224c     70 B5 BF FD | 	call	#_converttoint
12250     FD 2A 02 F6 | 	mov	local03, result1
12254     24 4E 05 F1 | 	add	fp, #36
12258     A7 12 02 F6 | 	mov	arg01, fp
1225c     24 4E 85 F1 | 	sub	fp, #36
12260     5C B5 BF FD | 	call	#_converttoint
12264     FD 18 02 F6 | 	mov	arg04, result1
12268     13 13 02 F6 | 	mov	arg01, local01
1226c     14 15 02 F6 | 	mov	arg02, local02
12270     15 17 02 F6 | 	mov	arg03, local03
12274     3C 22 B1 FD | 	call	#_hg010b_spin2_fill
12278     A7 F0 03 F6 | 	mov	ptra, fp
1227c     B2 00 A0 FD | 	call	#popregs_
12280                 | _do_fill_ret
12280     2D 00 64 FD | 	ret
12284                 | 
12284                 | ' 
12284                 | ' '-------------------- font
12284                 | ' 
12284                 | ' sub do_font
12284                 | _do_font
12284     03 4A 05 F6 | 	mov	COUNT_, #3
12288     A8 00 A0 FD | 	call	#pushregs_
1228c     4C B3 BF FD | 	call	#_pop
12290     FD 26 02 F6 | 	mov	local01, result1
12294     FE 28 02 F6 | 	mov	local02, result2
12298     FF 2A 02 F6 | 	mov	local03, result3
1229c                 | ' 
1229c                 | ' t1=pop() 
1229c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1229c     1E 2A 0E F2 | 	cmp	local03, #30 wz
122a0     10 00 90 5D |  if_ne	jmp	#LR__1450
122a4     13 13 02 F6 | 	mov	arg01, local01
122a8     00 14 06 F6 | 	mov	arg02, #0
122ac     00 7A B1 FD | 	call	#__system___float_tointeger
122b0     FD 26 02 F6 | 	mov	local01, result1
122b4                 | LR__1450
122b4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
122b4     1F 2A 0E F2 | 	cmp	local03, #31 wz
122b8     18 00 90 5D |  if_ne	jmp	#LR__1451
122bc     13 13 02 F6 | 	mov	arg01, local01
122c0     30 7D B1 FD | 	call	#__system____builtin_atof
122c4     FD 12 02 F6 | 	mov	arg01, result1
122c8     00 14 06 F6 | 	mov	arg02, #0
122cc     E0 79 B1 FD | 	call	#__system___float_tointeger
122d0     FD 26 02 F6 | 	mov	local01, result1
122d4                 | LR__1451
122d4     37 00 00 FF 
122d8     40 E4 05 F1 | 	add	objptr, ##28224
122dc     F2 26 62 FC | 	wrlong	local01, objptr
122e0     37 00 00 FF 
122e4     40 E4 85 F1 | 	sub	objptr, ##28224
122e8     02 26 66 F0 | 	shl	local01, #2
122ec     13 13 02 F6 | 	mov	arg01, local01
122f0     A4 28 B1 FD | 	call	#_hg010b_spin2_setfontfamily
122f4     A7 F0 03 F6 | 	mov	ptra, fp
122f8     B2 00 A0 FD | 	call	#popregs_
122fc                 | _do_font_ret
122fc     2D 00 64 FD | 	ret
12300                 | 
12300                 | ' 
12300                 | ' '-------------------- for
12300                 | ' 
12300                 | ' sub do_for()
12300                 | _do_for
12300     01 4A 05 F6 | 	mov	COUNT_, #1
12304     A8 00 A0 FD | 	call	#pushregs_
12308     10 F0 07 F1 | 	add	ptra, #16
1230c     50 00 00 FF 
12310     30 E5 05 F1 | 	add	objptr, ##41264
12314     F2 12 02 FB | 	rdlong	arg01, objptr
12318     01 12 06 F1 | 	add	arg01, #1
1231c     F2 12 62 FC | 	wrlong	arg01, objptr
12320     50 00 00 FF 
12324     30 E5 85 F1 | 	sub	objptr, ##41264
12328     B0 B2 BF FD | 	call	#_pop
1232c     A7 FA 61 FC | 	wrlong	result1, fp
12330     04 4E 05 F1 | 	add	fp, #4
12334     A7 FC 61 FC | 	wrlong	result2, fp
12338     04 4E 05 F1 | 	add	fp, #4
1233c     A7 FE 61 FC | 	wrlong	result3, fp
12340     08 4E 85 F1 | 	sub	fp, #8
12344     50 00 00 FF 
12348     30 E5 05 F1 | 	add	objptr, ##41264
1234c     F2 12 02 FB | 	rdlong	arg01, objptr
12350     09 27 02 F6 | 	mov	local01, arg01
12354     02 26 66 F0 | 	shl	local01, #2
12358     09 27 02 F1 | 	add	local01, arg01
1235c     02 26 66 F0 | 	shl	local01, #2
12360     06 00 00 FF 
12364     98 E4 85 F1 | 	sub	objptr, ##3224
12368     F2 26 02 F1 | 	add	local01, objptr
1236c     A7 12 02 FB | 	rdlong	arg01, fp
12370     08 26 06 F1 | 	add	local01, #8
12374     13 13 62 FC | 	wrlong	arg01, local01
12378     4A 00 00 FF 
1237c     98 E4 85 F1 | 	sub	objptr, ##38040
12380     58 B2 BF FD | 	call	#_pop
12384     A7 FA 61 FC | 	wrlong	result1, fp
12388     04 4E 05 F1 | 	add	fp, #4
1238c     A7 FC 61 FC | 	wrlong	result2, fp
12390     04 4E 05 F1 | 	add	fp, #4
12394     A7 FE 61 FC | 	wrlong	result3, fp
12398     08 4E 85 F1 | 	sub	fp, #8
1239c     50 00 00 FF 
123a0     30 E5 05 F1 | 	add	objptr, ##41264
123a4     F2 12 02 FB | 	rdlong	arg01, objptr
123a8     09 27 02 F6 | 	mov	local01, arg01
123ac     02 26 66 F0 | 	shl	local01, #2
123b0     09 27 02 F1 | 	add	local01, arg01
123b4     02 26 66 F0 | 	shl	local01, #2
123b8     06 00 00 FF 
123bc     98 E4 85 F1 | 	sub	objptr, ##3224
123c0     F2 26 02 F1 | 	add	local01, objptr
123c4     A7 12 02 F6 | 	mov	arg01, fp
123c8     4A 00 00 FF 
123cc     98 E4 85 F1 | 	sub	objptr, ##38040
123d0     EC B3 BF FD | 	call	#_converttoint
123d4     FD 12 02 F6 | 	mov	arg01, result1
123d8     0C 26 06 F1 | 	add	local01, #12
123dc     13 13 62 FC | 	wrlong	arg01, local01
123e0     F8 B1 BF FD | 	call	#_pop
123e4     A7 FA 61 FC | 	wrlong	result1, fp
123e8     04 4E 05 F1 | 	add	fp, #4
123ec     A7 FC 61 FC | 	wrlong	result2, fp
123f0     04 4E 05 F1 | 	add	fp, #4
123f4     A7 FE 61 FC | 	wrlong	result3, fp
123f8     08 4E 85 F1 | 	sub	fp, #8
123fc     50 00 00 FF 
12400     30 E5 05 F1 | 	add	objptr, ##41264
12404     F2 12 02 FB | 	rdlong	arg01, objptr
12408     09 27 02 F6 | 	mov	local01, arg01
1240c     02 26 66 F0 | 	shl	local01, #2
12410     09 27 02 F1 | 	add	local01, arg01
12414     02 26 66 F0 | 	shl	local01, #2
12418     06 00 00 FF 
1241c     98 E4 85 F1 | 	sub	objptr, ##3224
12420     F2 26 02 F1 | 	add	local01, objptr
12424     A7 12 02 F6 | 	mov	arg01, fp
12428     4A 00 00 FF 
1242c     98 E4 85 F1 | 	sub	objptr, ##38040
12430     8C B3 BF FD | 	call	#_converttoint
12434     10 26 06 F1 | 	add	local01, #16
12438     13 FB 61 FC | 	wrlong	result1, local01
1243c                 | ' fortop+=1
1243c                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
1243c                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
1243c                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
1243c                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
1243c     4A 00 00 FF 
12440     80 E4 05 F1 | 	add	objptr, ##38016
12444     F2 12 02 FB | 	rdlong	arg01, objptr
12448     09 27 02 F6 | 	mov	local01, arg01
1244c     01 26 66 F0 | 	shl	local01, #1
12450     09 27 02 F1 | 	add	local01, arg01
12454     02 26 66 F0 | 	shl	local01, #2
12458     03 00 00 FF 
1245c     04 E4 85 F1 | 	sub	objptr, ##1540
12460     F2 26 02 F1 | 	add	local01, objptr
12464     08 26 06 F1 | 	add	local01, #8
12468     13 27 02 FB | 	rdlong	local01, local01
1246c     FE 27 0E F2 | 	cmp	local01, #510 wz
12470     47 00 00 FF 
12474     7C E4 85 F1 | 	sub	objptr, ##36476
12478     70 00 90 5D |  if_ne	jmp	#LR__1460
1247c     50 00 00 FF 
12480     30 E5 05 F1 | 	add	objptr, ##41264
12484     F2 12 02 FB | 	rdlong	arg01, objptr
12488     09 27 02 F6 | 	mov	local01, arg01
1248c     02 26 66 F0 | 	shl	local01, #2
12490     09 27 02 F1 | 	add	local01, arg01
12494     02 26 66 F0 | 	shl	local01, #2
12498     06 00 00 FF 
1249c     98 E4 85 F1 | 	sub	objptr, ##3224
124a0     F2 26 02 F1 | 	add	local01, objptr
124a4     06 00 00 FF 
124a8     20 E4 05 F1 | 	add	objptr, ##3104
124ac     F2 12 02 FB | 	rdlong	arg01, objptr
124b0     13 13 62 FC | 	wrlong	arg01, local01
124b4     78 E4 05 F1 | 	add	objptr, #120
124b8     F2 12 02 FB | 	rdlong	arg01, objptr
124bc     09 27 02 F6 | 	mov	local01, arg01
124c0     02 26 66 F0 | 	shl	local01, #2
124c4     09 27 02 F1 | 	add	local01, arg01
124c8     02 26 66 F0 | 	shl	local01, #2
124cc     06 00 00 FF 
124d0     98 E4 85 F1 | 	sub	objptr, ##3224
124d4     F2 26 02 F1 | 	add	local01, objptr
124d8     04 26 06 F1 | 	add	local01, #4
124dc     13 01 68 FC | 	wrlong	#0, local01
124e0     4A 00 00 FF 
124e4     98 E4 85 F1 | 	sub	objptr, ##38040
124e8     78 00 90 FD | 	jmp	#LR__1461
124ec                 | LR__1460
124ec     50 00 00 FF 
124f0     30 E5 05 F1 | 	add	objptr, ##41264
124f4     F2 12 02 FB | 	rdlong	arg01, objptr
124f8     09 27 02 F6 | 	mov	local01, arg01
124fc     02 26 66 F0 | 	shl	local01, #2
12500     09 27 02 F1 | 	add	local01, arg01
12504     02 26 66 F0 | 	shl	local01, #2
12508     06 00 00 FF 
1250c     98 E4 85 F1 | 	sub	objptr, ##3224
12510     F2 26 02 F1 | 	add	local01, objptr
12514     06 00 00 FF 
12518     28 E4 05 F1 | 	add	objptr, ##3112
1251c     F2 12 02 FB | 	rdlong	arg01, objptr
12520     13 13 62 FC | 	wrlong	arg01, local01
12524     70 E4 05 F1 | 	add	objptr, #112
12528     F2 12 02 FB | 	rdlong	arg01, objptr
1252c     09 27 02 F6 | 	mov	local01, arg01
12530     02 26 66 F0 | 	shl	local01, #2
12534     09 27 02 F1 | 	add	local01, arg01
12538     02 26 66 F0 | 	shl	local01, #2
1253c     06 00 00 FF 
12540     98 E4 85 F1 | 	sub	objptr, ##3224
12544     F2 26 02 F1 | 	add	local01, objptr
12548     18 E4 85 F1 | 	sub	objptr, #24
1254c     F2 12 02 FB | 	rdlong	arg01, objptr
12550     4A 00 00 FF 
12554     80 E4 85 F1 | 	sub	objptr, ##38016
12558     01 12 06 F1 | 	add	arg01, #1
1255c     04 26 06 F1 | 	add	local01, #4
12560     13 13 62 FC | 	wrlong	arg01, local01
12564                 | LR__1461
12564     A7 F0 03 F6 | 	mov	ptra, fp
12568     B2 00 A0 FD | 	call	#popregs_
1256c                 | _do_for_ret
1256c     2D 00 64 FD | 	ret
12570                 | 
12570                 | ' 
12570                 | ' '-------------------- frame
12570                 | ' 
12570                 | ' sub do_frame
12570                 | _do_frame
12570     03 4A 05 F6 | 	mov	COUNT_, #3
12574     A8 00 A0 FD | 	call	#pushregs_
12578     30 F0 07 F1 | 	add	ptra, #48
1257c     5C B0 BF FD | 	call	#_pop
12580     FD 16 02 F6 | 	mov	arg03, result1
12584     FE 14 02 F6 | 	mov	arg02, result2
12588     FF 1A 02 F6 | 	mov	arg05, result3
1258c     24 4E 05 F1 | 	add	fp, #36
12590     A7 16 62 FC | 	wrlong	arg03, fp
12594     04 4E 05 F1 | 	add	fp, #4
12598     A7 14 62 FC | 	wrlong	arg02, fp
1259c     04 4E 05 F1 | 	add	fp, #4
125a0     A7 1A 62 FC | 	wrlong	arg05, fp
125a4     2C 4E 85 F1 | 	sub	fp, #44
125a8     30 B0 BF FD | 	call	#_pop
125ac     FD 16 02 F6 | 	mov	arg03, result1
125b0     FE 14 02 F6 | 	mov	arg02, result2
125b4     FF 1A 02 F6 | 	mov	arg05, result3
125b8     18 4E 05 F1 | 	add	fp, #24
125bc     A7 16 62 FC | 	wrlong	arg03, fp
125c0     04 4E 05 F1 | 	add	fp, #4
125c4     A7 14 62 FC | 	wrlong	arg02, fp
125c8     04 4E 05 F1 | 	add	fp, #4
125cc     A7 1A 62 FC | 	wrlong	arg05, fp
125d0     20 4E 85 F1 | 	sub	fp, #32
125d4     04 B0 BF FD | 	call	#_pop
125d8     FD 16 02 F6 | 	mov	arg03, result1
125dc     FE 14 02 F6 | 	mov	arg02, result2
125e0     FF 1A 02 F6 | 	mov	arg05, result3
125e4     0C 4E 05 F1 | 	add	fp, #12
125e8     A7 16 62 FC | 	wrlong	arg03, fp
125ec     04 4E 05 F1 | 	add	fp, #4
125f0     A7 14 62 FC | 	wrlong	arg02, fp
125f4     04 4E 05 F1 | 	add	fp, #4
125f8     A7 1A 62 FC | 	wrlong	arg05, fp
125fc     14 4E 85 F1 | 	sub	fp, #20
12600     D8 AF BF FD | 	call	#_pop
12604     FF 16 02 F6 | 	mov	arg03, result3
12608     A7 FA 61 FC | 	wrlong	result1, fp
1260c     04 4E 05 F1 | 	add	fp, #4
12610     A7 FC 61 FC | 	wrlong	result2, fp
12614     04 4E 05 F1 | 	add	fp, #4
12618     A7 16 62 FC | 	wrlong	arg03, fp
1261c     08 4E 85 F1 | 	sub	fp, #8
12620     A7 12 02 F6 | 	mov	arg01, fp
12624     98 B1 BF FD | 	call	#_converttoint
12628     FD 26 02 F6 | 	mov	local01, result1
1262c     0C 4E 05 F1 | 	add	fp, #12
12630     A7 12 02 F6 | 	mov	arg01, fp
12634     0C 4E 85 F1 | 	sub	fp, #12
12638     84 B1 BF FD | 	call	#_converttoint
1263c     FD 28 02 F6 | 	mov	local02, result1
12640     18 4E 05 F1 | 	add	fp, #24
12644     A7 12 02 F6 | 	mov	arg01, fp
12648     18 4E 85 F1 | 	sub	fp, #24
1264c     70 B1 BF FD | 	call	#_converttoint
12650     FD 2A 02 F6 | 	mov	local03, result1
12654     24 4E 05 F1 | 	add	fp, #36
12658     A7 12 02 F6 | 	mov	arg01, fp
1265c     24 4E 85 F1 | 	sub	fp, #36
12660     5C B1 BF FD | 	call	#_converttoint
12664     FD 18 02 F6 | 	mov	arg04, result1
12668     37 00 00 FF 
1266c     28 E4 05 F1 | 	add	objptr, ##28200
12670     F2 1A 02 FB | 	rdlong	arg05, objptr
12674     37 00 00 FF 
12678     28 E4 85 F1 | 	sub	objptr, ##28200
1267c     13 13 02 F6 | 	mov	arg01, local01
12680     14 15 02 F6 | 	mov	arg02, local02
12684     15 17 02 F6 | 	mov	arg03, local03
12688     14 23 B1 FD | 	call	#_hg010b_spin2_frame
1268c     A7 F0 03 F6 | 	mov	ptra, fp
12690     B2 00 A0 FD | 	call	#popregs_
12694                 | _do_frame_ret
12694     2D 00 64 FD | 	ret
12698                 | 
12698                 | ' 
12698                 | ' '-------------------- framebuf
12698                 | ' 
12698                 | ' sub do_framebuf
12698                 | _do_framebuf
12698     00 4A 05 F6 | 	mov	COUNT_, #0
1269c     A8 00 A0 FD | 	call	#pushregs_
126a0     0C F0 07 F1 | 	add	ptra, #12
126a4     08 4E 05 F1 | 	add	fp, #8
126a8     A7 3A 68 FC | 	wrlong	#29, fp
126ac     F2 12 02 FB | 	rdlong	arg01, objptr
126b0     08 4E 85 F1 | 	sub	fp, #8
126b4     A7 12 62 FC | 	wrlong	arg01, fp
126b8     A7 12 02 F6 | 	mov	arg01, fp
126bc     B4 AF BF FD | 	call	#_push
126c0     A7 F0 03 F6 | 	mov	ptra, fp
126c4     B2 00 A0 FD | 	call	#popregs_
126c8                 | _do_framebuf_ret
126c8     2D 00 64 FD | 	ret
126cc                 | 
126cc                 | ' '-------------------- fre
126cc                 | ' 
126cc                 | ' sub do_fre
126cc                 | _do_fre
126cc     01 4A 05 F6 | 	mov	COUNT_, #1
126d0     A8 00 A0 FD | 	call	#pushregs_
126d4     0C F0 07 F1 | 	add	ptra, #12
126d8     52 00 00 FF 
126dc     98 E4 05 F1 | 	add	objptr, ##42136
126e0     F2 12 02 FB | 	rdlong	arg01, objptr
126e4     0F 00 00 FF 
126e8     3C E4 85 F1 | 	sub	objptr, ##7740
126ec     F2 26 02 FB | 	rdlong	local01, objptr
126f0     13 13 82 F1 | 	sub	arg01, local01
126f4     0F 00 00 FF 
126f8     B4 E4 05 F1 | 	add	objptr, ##7860
126fc     F2 12 62 FC | 	wrlong	arg01, objptr
12700     08 4E 05 F1 | 	add	fp, #8
12704     A7 3A 68 FC | 	wrlong	#29, fp
12708     08 4E 85 F1 | 	sub	fp, #8
1270c     F2 26 02 FB | 	rdlong	local01, objptr
12710     52 00 00 FF 
12714     10 E5 85 F1 | 	sub	objptr, ##42256
12718     A7 26 62 FC | 	wrlong	local01, fp
1271c     A7 12 02 F6 | 	mov	arg01, fp
12720     50 AF BF FD | 	call	#_push
12724     A7 F0 03 F6 | 	mov	ptra, fp
12728     B2 00 A0 FD | 	call	#popregs_
1272c                 | _do_fre_ret
1272c     2D 00 64 FD | 	ret
12730                 | 
12730                 | ' 
12730                 | ' '-------------------- get
12730                 | ' 
12730                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
12730                 | _do_get
12730     09 4A 05 F6 | 	mov	COUNT_, #9
12734     A8 00 A0 FD | 	call	#pushregs_
12738     40 F0 07 F1 | 	add	ptra, #64
1273c     4A 00 00 FF 
12740     80 E4 05 F1 | 	add	objptr, ##38016
12744     F2 1A 02 FB | 	rdlong	arg05, objptr
12748     0D 19 02 F6 | 	mov	arg04, arg05
1274c     01 18 66 F0 | 	shl	arg04, #1
12750     0D 19 02 F1 | 	add	arg04, arg05
12754     02 18 66 F0 | 	shl	arg04, #2
12758     03 00 00 FF 
1275c     04 E4 85 F1 | 	sub	objptr, ##1540
12760     F2 18 02 F1 | 	add	arg04, objptr
12764     0C 1B 02 FB | 	rdlong	arg05, arg04
12768     A7 1A 62 FC | 	wrlong	arg05, fp
1276c                 | ' 
1276c                 | ' numpar=compiledline(lineptr_e).result.uresult
1276c                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
1276c     04 1A 0E F2 | 	cmp	arg05, #4 wz
12770     47 00 00 FF 
12774     7C E4 85 F1 | 	sub	objptr, ##36476
12778     48 00 90 5D |  if_ne	jmp	#LR__1470
1277c     5C AE BF FD | 	call	#_pop
12780     FF 1A 02 F6 | 	mov	arg05, result3
12784     1C 4E 05 F1 | 	add	fp, #28
12788     A7 FA 61 FC | 	wrlong	result1, fp
1278c     04 4E 05 F1 | 	add	fp, #4
12790     A7 FC 61 FC | 	wrlong	result2, fp
12794     04 4E 05 F1 | 	add	fp, #4
12798     A7 1A 62 FC | 	wrlong	arg05, fp
1279c     08 4E 85 F1 | 	sub	fp, #8
127a0     A7 12 02 F6 | 	mov	arg01, fp
127a4     1C 4E 85 F1 | 	sub	fp, #28
127a8     14 B0 BF FD | 	call	#_converttoint
127ac     52 00 00 FF 
127b0     0C E5 05 F1 | 	add	objptr, ##42252
127b4     F2 FA 61 FC | 	wrlong	result1, objptr
127b8     52 00 00 FF 
127bc     0C E5 85 F1 | 	sub	objptr, ##42252
127c0     18 00 90 FD | 	jmp	#LR__1471
127c4                 | LR__1470
127c4     52 00 00 FF 
127c8     0C E5 05 F1 | 	add	objptr, ##42252
127cc     FF FF FF FF 
127d0     F2 FE 6B FC | 	wrlong	##-1, objptr
127d4     52 00 00 FF 
127d8     0C E5 85 F1 | 	sub	objptr, ##42252
127dc                 | LR__1471
127dc                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
127dc     A7 16 02 FB | 	rdlong	arg03, fp
127e0     03 16 56 F2 | 	cmps	arg03, #3 wc
127e4     40 00 90 CD |  if_b	jmp	#LR__1472
127e8     F0 AD BF FD | 	call	#_pop
127ec     FF 16 02 F6 | 	mov	arg03, result3
127f0     1C 4E 05 F1 | 	add	fp, #28
127f4     A7 FA 61 FC | 	wrlong	result1, fp
127f8     04 4E 05 F1 | 	add	fp, #4
127fc     A7 FC 61 FC | 	wrlong	result2, fp
12800     04 4E 05 F1 | 	add	fp, #4
12804     A7 16 62 FC | 	wrlong	arg03, fp
12808     08 4E 85 F1 | 	sub	fp, #8
1280c     A7 12 02 F6 | 	mov	arg01, fp
12810     1C 4E 85 F1 | 	sub	fp, #28
12814     A8 AF BF FD | 	call	#_converttoint
12818     08 4E 05 F1 | 	add	fp, #8
1281c     A7 FA 61 FC | 	wrlong	result1, fp
12820     08 4E 85 F1 | 	sub	fp, #8
12824     0C 00 90 FD | 	jmp	#LR__1473
12828                 | LR__1472
12828     08 4E 05 F1 | 	add	fp, #8
1282c     A7 02 68 FC | 	wrlong	#1, fp
12830     08 4E 85 F1 | 	sub	fp, #8
12834                 | LR__1473
12834                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
12834     A7 16 02 FB | 	rdlong	arg03, fp
12838     02 16 56 F2 | 	cmps	arg03, #2 wc
1283c     3C 00 90 CD |  if_b	jmp	#LR__1474
12840     98 AD BF FD | 	call	#_pop
12844     FF 16 02 F6 | 	mov	arg03, result3
12848     1C 4E 05 F1 | 	add	fp, #28
1284c     A7 FA 61 FC | 	wrlong	result1, fp
12850     04 4E 05 F1 | 	add	fp, #4
12854     A7 FC 61 FC | 	wrlong	result2, fp
12858     04 4E 05 F1 | 	add	fp, #4
1285c     A7 16 62 FC | 	wrlong	arg03, fp
12860     08 4E 85 F1 | 	sub	fp, #8
12864     A7 12 02 F6 | 	mov	arg01, fp
12868     1C 4E 85 F1 | 	sub	fp, #28
1286c     50 AF BF FD | 	call	#_converttoint
12870     0C 4E 05 F1 | 	add	fp, #12
12874     A7 FA 61 FC | 	wrlong	result1, fp
12878     0C 4E 85 F1 | 	sub	fp, #12
1287c                 | LR__1474
1287c     5C AD BF FD | 	call	#_pop
12880     FF 16 02 F6 | 	mov	arg03, result3
12884     1C 4E 05 F1 | 	add	fp, #28
12888     A7 FA 61 FC | 	wrlong	result1, fp
1288c     04 4E 05 F1 | 	add	fp, #4
12890     A7 FC 61 FC | 	wrlong	result2, fp
12894     04 4E 05 F1 | 	add	fp, #4
12898     A7 16 62 FC | 	wrlong	arg03, fp
1289c     08 4E 85 F1 | 	sub	fp, #8
128a0     A7 12 02 F6 | 	mov	arg01, fp
128a4     1C 4E 85 F1 | 	sub	fp, #28
128a8     14 AF BF FD | 	call	#_converttoint
128ac     04 4E 05 F1 | 	add	fp, #4
128b0     A7 FA 61 FC | 	wrlong	result1, fp
128b4     10 4E 05 F1 | 	add	fp, #16
128b8     A7 16 02 FB | 	rdlong	arg03, fp
128bc     14 4E 85 F1 | 	sub	fp, #20
128c0     02 16 66 F0 | 	shl	arg03, #2
128c4     50 00 00 FF 
128c8     C4 E4 05 F1 | 	add	objptr, ##41156
128cc     F2 26 02 F6 | 	mov	local01, objptr
128d0     F2 16 02 F1 | 	add	arg03, objptr
128d4     0B 01 68 FC | 	wrlong	#0, arg03
128d8                 | ' t1=pop() : channel=converttoint(t1)
128d8                 | ' getres(j)=0
128d8                 | ' if pos>=0 then
128d8     02 00 00 FF 
128dc     48 E4 05 F1 | 	add	objptr, ##1096
128e0     F2 28 02 FB | 	rdlong	local02, objptr
128e4     52 00 00 FF 
128e8     0C E5 85 F1 | 	sub	objptr, ##42252
128ec     00 28 56 F2 | 	cmps	local02, #0 wc
128f0     F0 01 90 CD |  if_b	jmp	#LR__1481
128f4                 | '   for i=0 to  amount/1024
128f4     10 4E 05 F1 | 	add	fp, #16
128f8     A7 00 68 FC | 	wrlong	#0, fp
128fc     08 4E 85 F1 | 	sub	fp, #8
12900     A7 2A 02 FB | 	rdlong	local03, fp
12904     08 4E 85 F1 | 	sub	fp, #8
12908     15 2D 52 F6 | 	abs	local04, local03 wc
1290c     0A 2C 46 F0 | 	shr	local04, #10
12910     16 2D 82 F6 | 	negc	local04, local04
12914     01 2C 06 F1 | 	add	local04, #1
12918                 | LR__1475
12918     10 4E 05 F1 | 	add	fp, #16
1291c     A7 2A 02 FB | 	rdlong	local03, fp
12920     10 4E 85 F1 | 	sub	fp, #16
12924     16 2B 52 F2 | 	cmps	local03, local04 wc
12928     9C 03 90 3D |  if_ae	jmp	#LR__1489
1292c                 | '     get #channel,pos+1,block(0),amount,r
1292c     04 4E 05 F1 | 	add	fp, #4
12930     A7 12 02 FB | 	rdlong	arg01, fp
12934     52 00 00 FF 
12938     0C E5 05 F1 | 	add	objptr, ##42252
1293c     F2 14 02 FB | 	rdlong	arg02, objptr
12940     01 14 06 F1 | 	add	arg02, #1
12944     04 00 00 FF 
12948     58 E4 85 F1 | 	sub	objptr, ##2136
1294c     F2 16 02 F6 | 	mov	arg03, objptr
12950     4E 00 00 FF 
12954     B4 E4 85 F1 | 	sub	objptr, ##40116
12958     04 4E 05 F1 | 	add	fp, #4
1295c     A7 18 02 FB | 	rdlong	arg04, fp
12960     08 4E 85 F1 | 	sub	fp, #8
12964     01 1A 06 F6 | 	mov	arg05, #1
12968     74 4E B1 FD | 	call	#__system___basic_get
1296c     18 4E 05 F1 | 	add	fp, #24
12970     A7 FA 61 FC | 	wrlong	result1, fp
12974                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12974     0C 4E 85 F1 | 	sub	fp, #12
12978     A7 28 02 FB | 	rdlong	local02, fp
1297c     0C 4E 85 F1 | 	sub	fp, #12
12980     00 04 00 FF 
12984     00 28 56 F2 | 	cmps	local02, ##524288 wc
12988     7C 00 90 3D |  if_ae	jmp	#LR__1477
1298c     14 4E 05 F1 | 	add	fp, #20
12990     A7 00 68 FC | 	wrlong	#0, fp
12994     04 4E 05 F1 | 	add	fp, #4
12998     A7 2E 02 FB | 	rdlong	local05, fp
1299c     18 4E 85 F1 | 	sub	fp, #24
129a0                 | LR__1476
129a0     14 4E 05 F1 | 	add	fp, #20
129a4     A7 28 02 FB | 	rdlong	local02, fp
129a8     14 4E 85 F1 | 	sub	fp, #20
129ac     17 29 52 F2 | 	cmps	local02, local05 wc
129b0     D8 00 90 3D |  if_ae	jmp	#LR__1480
129b4     0C 4E 05 F1 | 	add	fp, #12
129b8     A7 12 02 FB | 	rdlong	arg01, fp
129bc     04 4E 05 F1 | 	add	fp, #4
129c0     A7 2A 02 FB | 	rdlong	local03, fp
129c4     0A 2A 66 F0 | 	shl	local03, #10
129c8     15 13 02 F1 | 	add	arg01, local03
129cc     04 4E 05 F1 | 	add	fp, #4
129d0     A7 2A 02 FB | 	rdlong	local03, fp
129d4     15 13 02 F1 | 	add	arg01, local03
129d8     4E 00 00 FF 
129dc     B4 E4 05 F1 | 	add	objptr, ##40116
129e0     F2 2A 02 F1 | 	add	local03, objptr
129e4     15 15 C2 FA | 	rdbyte	arg02, local03
129e8     09 15 42 FC | 	wrbyte	arg02, arg01
129ec     4E 00 00 FF 
129f0     B4 E4 85 F1 | 	sub	objptr, ##40116
129f4     A7 2A 02 FB | 	rdlong	local03, fp
129f8     01 2A 06 F1 | 	add	local03, #1
129fc     A7 2A 62 FC | 	wrlong	local03, fp
12a00     14 4E 85 F1 | 	sub	fp, #20
12a04     98 FF 9F FD | 	jmp	#LR__1476
12a08                 | LR__1477
12a08     14 4E 05 F1 | 	add	fp, #20
12a0c     A7 00 68 FC | 	wrlong	#0, fp
12a10     04 4E 05 F1 | 	add	fp, #4
12a14     A7 30 02 FB | 	rdlong	local06, fp
12a18     18 4E 85 F1 | 	sub	fp, #24
12a1c                 | LR__1478
12a1c     14 4E 05 F1 | 	add	fp, #20
12a20     A7 28 02 FB | 	rdlong	local02, fp
12a24     14 4E 85 F1 | 	sub	fp, #20
12a28     18 29 52 F2 | 	cmps	local02, local06 wc
12a2c     5C 00 90 3D |  if_ae	jmp	#LR__1479
12a30     0C 4E 05 F1 | 	add	fp, #12
12a34     A7 12 02 FB | 	rdlong	arg01, fp
12a38     04 4E 05 F1 | 	add	fp, #4
12a3c     A7 2E 02 FB | 	rdlong	local05, fp
12a40     0A 2E 66 F0 | 	shl	local05, #10
12a44     17 13 02 F1 | 	add	arg01, local05
12a48     04 4E 05 F1 | 	add	fp, #4
12a4c     A7 2E 02 FB | 	rdlong	local05, fp
12a50     17 13 02 F1 | 	add	arg01, local05
12a54     14 4E 85 F1 | 	sub	fp, #20
12a58     4E 00 00 FF 
12a5c     B4 E4 05 F1 | 	add	objptr, ##40116
12a60     F2 2E 02 F1 | 	add	local05, objptr
12a64     17 15 C2 FA | 	rdbyte	arg02, local05
12a68     4E 00 00 FF 
12a6c     B4 E4 85 F1 | 	sub	objptr, ##40116
12a70     38 07 B1 FD | 	call	#_pspoke
12a74     14 4E 05 F1 | 	add	fp, #20
12a78     A7 2E 02 FB | 	rdlong	local05, fp
12a7c     01 2E 06 F1 | 	add	local05, #1
12a80     A7 2E 62 FC | 	wrlong	local05, fp
12a84     14 4E 85 F1 | 	sub	fp, #20
12a88     90 FF 9F FD | 	jmp	#LR__1478
12a8c                 | LR__1479
12a8c                 | LR__1480
12a8c     14 4E 05 F1 | 	add	fp, #20
12a90     A7 30 02 FB | 	rdlong	local06, fp
12a94     18 2B 02 F6 | 	mov	local03, local06
12a98     02 2A 66 F0 | 	shl	local03, #2
12a9c     50 00 00 FF 
12aa0     C4 E4 05 F1 | 	add	objptr, ##41156
12aa4     F2 2A 02 F1 | 	add	local03, objptr
12aa8     02 30 66 F0 | 	shl	local06, #2
12aac     F2 30 02 F1 | 	add	local06, objptr
12ab0     18 31 02 FB | 	rdlong	local06, local06
12ab4     04 4E 05 F1 | 	add	fp, #4
12ab8     A7 2E 02 FB | 	rdlong	local05, fp
12abc     17 31 02 F1 | 	add	local06, local05
12ac0     15 31 62 FC | 	wrlong	local06, local03
12ac4     08 4E 85 F1 | 	sub	fp, #8
12ac8     A7 30 02 FB | 	rdlong	local06, fp
12acc     01 30 06 F1 | 	add	local06, #1
12ad0     A7 30 62 FC | 	wrlong	local06, fp
12ad4     10 4E 85 F1 | 	sub	fp, #16
12ad8     50 00 00 FF 
12adc     C4 E4 85 F1 | 	sub	objptr, ##41156
12ae0     34 FE 9F FD | 	jmp	#LR__1475
12ae4                 | LR__1481
12ae4                 | '   for i=0 to  amount/1024
12ae4     10 4E 05 F1 | 	add	fp, #16
12ae8     A7 00 68 FC | 	wrlong	#0, fp
12aec     08 4E 85 F1 | 	sub	fp, #8
12af0     A7 2A 02 FB | 	rdlong	local03, fp
12af4     08 4E 85 F1 | 	sub	fp, #8
12af8     15 33 52 F6 | 	abs	local07, local03 wc
12afc     0A 32 46 F0 | 	shr	local07, #10
12b00     19 33 82 F6 | 	negc	local07, local07
12b04     01 32 06 F1 | 	add	local07, #1
12b08                 | LR__1482
12b08     10 4E 05 F1 | 	add	fp, #16
12b0c     A7 2A 02 FB | 	rdlong	local03, fp
12b10     10 4E 85 F1 | 	sub	fp, #16
12b14     19 2B 52 F2 | 	cmps	local03, local07 wc
12b18     AC 01 90 3D |  if_ae	jmp	#LR__1488
12b1c                 | '     get #channel,,block(0),amount,r
12b1c     04 4E 05 F1 | 	add	fp, #4
12b20     A7 12 02 FB | 	rdlong	arg01, fp
12b24     4E 00 00 FF 
12b28     B4 E4 05 F1 | 	add	objptr, ##40116
12b2c     F2 16 02 F6 | 	mov	arg03, objptr
12b30     4E 00 00 FF 
12b34     B4 E4 85 F1 | 	sub	objptr, ##40116
12b38     04 4E 05 F1 | 	add	fp, #4
12b3c     A7 18 02 FB | 	rdlong	arg04, fp
12b40     08 4E 85 F1 | 	sub	fp, #8
12b44     00 14 06 F6 | 	mov	arg02, #0
12b48     01 1A 06 F6 | 	mov	arg05, #1
12b4c     90 4C B1 FD | 	call	#__system___basic_get
12b50     18 4E 05 F1 | 	add	fp, #24
12b54     A7 FA 61 FC | 	wrlong	result1, fp
12b58                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12b58     0C 4E 85 F1 | 	sub	fp, #12
12b5c     A7 28 02 FB | 	rdlong	local02, fp
12b60     0C 4E 85 F1 | 	sub	fp, #12
12b64     00 04 00 FF 
12b68     00 28 56 F2 | 	cmps	local02, ##524288 wc
12b6c     7C 00 90 3D |  if_ae	jmp	#LR__1484
12b70     14 4E 05 F1 | 	add	fp, #20
12b74     A7 00 68 FC | 	wrlong	#0, fp
12b78     04 4E 05 F1 | 	add	fp, #4
12b7c     A7 34 02 FB | 	rdlong	local08, fp
12b80     18 4E 85 F1 | 	sub	fp, #24
12b84                 | LR__1483
12b84     14 4E 05 F1 | 	add	fp, #20
12b88     A7 28 02 FB | 	rdlong	local02, fp
12b8c     14 4E 85 F1 | 	sub	fp, #20
12b90     1A 29 52 F2 | 	cmps	local02, local08 wc
12b94     D8 00 90 3D |  if_ae	jmp	#LR__1487
12b98     0C 4E 05 F1 | 	add	fp, #12
12b9c     A7 12 02 FB | 	rdlong	arg01, fp
12ba0     04 4E 05 F1 | 	add	fp, #4
12ba4     A7 30 02 FB | 	rdlong	local06, fp
12ba8     0A 30 66 F0 | 	shl	local06, #10
12bac     18 13 02 F1 | 	add	arg01, local06
12bb0     04 4E 05 F1 | 	add	fp, #4
12bb4     A7 30 02 FB | 	rdlong	local06, fp
12bb8     18 13 02 F1 | 	add	arg01, local06
12bbc     4E 00 00 FF 
12bc0     B4 E4 05 F1 | 	add	objptr, ##40116
12bc4     F2 30 02 F1 | 	add	local06, objptr
12bc8     18 15 C2 FA | 	rdbyte	arg02, local06
12bcc     09 15 42 FC | 	wrbyte	arg02, arg01
12bd0     4E 00 00 FF 
12bd4     B4 E4 85 F1 | 	sub	objptr, ##40116
12bd8     A7 30 02 FB | 	rdlong	local06, fp
12bdc     01 30 06 F1 | 	add	local06, #1
12be0     A7 30 62 FC | 	wrlong	local06, fp
12be4     14 4E 85 F1 | 	sub	fp, #20
12be8     98 FF 9F FD | 	jmp	#LR__1483
12bec                 | LR__1484
12bec     14 4E 05 F1 | 	add	fp, #20
12bf0     A7 00 68 FC | 	wrlong	#0, fp
12bf4     04 4E 05 F1 | 	add	fp, #4
12bf8     A7 36 02 FB | 	rdlong	local09, fp
12bfc     18 4E 85 F1 | 	sub	fp, #24
12c00                 | LR__1485
12c00     14 4E 05 F1 | 	add	fp, #20
12c04     A7 28 02 FB | 	rdlong	local02, fp
12c08     14 4E 85 F1 | 	sub	fp, #20
12c0c     1B 29 52 F2 | 	cmps	local02, local09 wc
12c10     5C 00 90 3D |  if_ae	jmp	#LR__1486
12c14     0C 4E 05 F1 | 	add	fp, #12
12c18     A7 12 02 FB | 	rdlong	arg01, fp
12c1c     04 4E 05 F1 | 	add	fp, #4
12c20     A7 34 02 FB | 	rdlong	local08, fp
12c24     0A 34 66 F0 | 	shl	local08, #10
12c28     1A 13 02 F1 | 	add	arg01, local08
12c2c     04 4E 05 F1 | 	add	fp, #4
12c30     A7 34 02 FB | 	rdlong	local08, fp
12c34     1A 13 02 F1 | 	add	arg01, local08
12c38     14 4E 85 F1 | 	sub	fp, #20
12c3c     4E 00 00 FF 
12c40     B4 E4 05 F1 | 	add	objptr, ##40116
12c44     F2 34 02 F1 | 	add	local08, objptr
12c48     1A 15 C2 FA | 	rdbyte	arg02, local08
12c4c     4E 00 00 FF 
12c50     B4 E4 85 F1 | 	sub	objptr, ##40116
12c54     54 05 B1 FD | 	call	#_pspoke
12c58     14 4E 05 F1 | 	add	fp, #20
12c5c     A7 34 02 FB | 	rdlong	local08, fp
12c60     01 34 06 F1 | 	add	local08, #1
12c64     A7 34 62 FC | 	wrlong	local08, fp
12c68     14 4E 85 F1 | 	sub	fp, #20
12c6c     90 FF 9F FD | 	jmp	#LR__1485
12c70                 | LR__1486
12c70                 | LR__1487
12c70     14 4E 05 F1 | 	add	fp, #20
12c74     A7 36 02 FB | 	rdlong	local09, fp
12c78     1B 31 02 F6 | 	mov	local06, local09
12c7c     02 30 66 F0 | 	shl	local06, #2
12c80     50 00 00 FF 
12c84     C4 E4 05 F1 | 	add	objptr, ##41156
12c88     F2 30 02 F1 | 	add	local06, objptr
12c8c     02 36 66 F0 | 	shl	local09, #2
12c90     F2 36 02 F1 | 	add	local09, objptr
12c94     1B 37 02 FB | 	rdlong	local09, local09
12c98     04 4E 05 F1 | 	add	fp, #4
12c9c     A7 34 02 FB | 	rdlong	local08, fp
12ca0     1A 37 02 F1 | 	add	local09, local08
12ca4     18 37 62 FC | 	wrlong	local09, local06
12ca8     08 4E 85 F1 | 	sub	fp, #8
12cac     A7 36 02 FB | 	rdlong	local09, fp
12cb0     01 36 06 F1 | 	add	local09, #1
12cb4     A7 36 62 FC | 	wrlong	local09, fp
12cb8     10 4E 85 F1 | 	sub	fp, #16
12cbc     50 00 00 FF 
12cc0     C4 E4 85 F1 | 	sub	objptr, ##41156
12cc4     40 FE 9F FD | 	jmp	#LR__1482
12cc8                 | LR__1488
12cc8                 | LR__1489
12cc8     A7 F0 03 F6 | 	mov	ptra, fp
12ccc     B2 00 A0 FD | 	call	#popregs_
12cd0                 | _do_get_ret
12cd0     2D 00 64 FD | 	ret
12cd4                 | 
12cd4                 | ' 
12cd4                 | ' '-------------------- getenvsustain
12cd4                 | ' 
12cd4                 | ' sub do_getenvsustain
12cd4                 | _do_getenvsustain
12cd4     01 4A 05 F6 | 	mov	COUNT_, #1
12cd8     A8 00 A0 FD | 	call	#pushregs_
12cdc     10 F0 07 F1 | 	add	ptra, #16
12ce0     4A 00 00 FF 
12ce4     80 E4 05 F1 | 	add	objptr, ##38016
12ce8     F2 26 02 FB | 	rdlong	local01, objptr
12cec     13 17 02 F6 | 	mov	arg03, local01
12cf0     01 16 66 F0 | 	shl	arg03, #1
12cf4     13 17 02 F1 | 	add	arg03, local01
12cf8     02 16 66 F0 | 	shl	arg03, #2
12cfc     03 00 00 FF 
12d00     04 E4 85 F1 | 	sub	objptr, ##1540
12d04     F2 16 02 F1 | 	add	arg03, objptr
12d08     0B 17 02 FB | 	rdlong	arg03, arg03
12d0c     0C 4E 05 F1 | 	add	fp, #12
12d10     A7 16 62 FC | 	wrlong	arg03, fp
12d14                 | ' 
12d14                 | ' numpar=compiledline(lineptr_e).result.uresult
12d14                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12d14     0C 4E 85 F1 | 	sub	fp, #12
12d18     02 16 16 F2 | 	cmp	arg03, #2 wc
12d1c     47 00 00 FF 
12d20     7C E4 85 F1 | 	sub	objptr, ##36476
12d24     0C 4E 05 C1 |  if_b	add	fp, #12
12d28     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12d2c     0C 4E 85 C1 |  if_b	sub	fp, #12
12d30     40 00 90 4D |  if_c_and_nz	jmp	#LR__1490
12d34     00 12 06 F6 | 	mov	arg01, #0
12d38     D4 98 B1 FD | 	call	#__system___getiolock_0606
12d3c     FD 12 02 F6 | 	mov	arg01, result1
12d40     28 3C B1 FD | 	call	#__system___lockmem
12d44     B7 01 00 FF 
12d48     5D 14 06 F6 | 	mov	arg02, ##@LR__5901
12d4c     00 12 06 F6 | 	mov	arg01, #0
12d50     00 16 06 F6 | 	mov	arg03, #0
12d54     0C 49 B1 FD | 	call	#__system___basic_print_string
12d58     00 12 06 F6 | 	mov	arg01, #0
12d5c     B0 98 B1 FD | 	call	#__system___getiolock_0606
12d60     FD 00 68 FC | 	wrlong	#0, result1
12d64     27 12 06 F6 | 	mov	arg01, #39
12d68     00 14 06 F6 | 	mov	arg02, #0
12d6c     0C 02 B1 FD | 	call	#_printerror
12d70     64 00 90 FD | 	jmp	#LR__1491
12d74                 | LR__1490
12d74     64 A8 BF FD | 	call	#_pop
12d78     FD 26 02 F6 | 	mov	local01, result1
12d7c     FE 16 02 F6 | 	mov	arg03, result2
12d80     A7 26 62 FC | 	wrlong	local01, fp
12d84     04 4E 05 F1 | 	add	fp, #4
12d88     A7 16 62 FC | 	wrlong	arg03, fp
12d8c     04 4E 05 F1 | 	add	fp, #4
12d90     A7 FE 61 FC | 	wrlong	result3, fp
12d94     08 4E 85 F1 | 	sub	fp, #8
12d98     A7 12 02 F6 | 	mov	arg01, fp
12d9c     20 AA BF FD | 	call	#_converttoint
12da0     FD 26 02 F6 | 	mov	local01, result1
12da4     01 26 66 F0 | 	shl	local01, #1
12da8     52 00 00 FF 
12dac     B4 E4 05 F1 | 	add	objptr, ##42164
12db0     F2 26 02 F1 | 	add	local01, objptr
12db4     13 27 E2 FA | 	rdword	local01, local01
12db8     A7 26 62 FC | 	wrlong	local01, fp
12dbc     08 4E 05 F1 | 	add	fp, #8
12dc0     A7 38 68 FC | 	wrlong	#28, fp
12dc4     08 4E 85 F1 | 	sub	fp, #8
12dc8     A7 12 02 F6 | 	mov	arg01, fp
12dcc     52 00 00 FF 
12dd0     B4 E4 85 F1 | 	sub	objptr, ##42164
12dd4     9C A8 BF FD | 	call	#_push
12dd8                 | LR__1491
12dd8     A7 F0 03 F6 | 	mov	ptra, fp
12ddc     B2 00 A0 FD | 	call	#popregs_
12de0                 | _do_getenvsustain_ret
12de0     2D 00 64 FD | 	ret
12de4                 | 
12de4                 | ' 
12de4                 | ' '-------------------- getnotevalue
12de4                 | ' 
12de4                 | ' sub do_getnotevalue
12de4                 | _do_getnotevalue
12de4     01 4A 05 F6 | 	mov	COUNT_, #1
12de8     A8 00 A0 FD | 	call	#pushregs_
12dec     1C F0 07 F1 | 	add	ptra, #28
12df0     E8 A7 BF FD | 	call	#_pop
12df4     FF 14 02 F6 | 	mov	arg02, result3
12df8     10 4E 05 F1 | 	add	fp, #16
12dfc     A7 FA 61 FC | 	wrlong	result1, fp
12e00     04 4E 05 F1 | 	add	fp, #4
12e04     A7 FC 61 FC | 	wrlong	result2, fp
12e08     04 4E 05 F1 | 	add	fp, #4
12e0c     A7 14 62 FC | 	wrlong	arg02, fp
12e10     08 4E 85 F1 | 	sub	fp, #8
12e14     A7 12 02 F6 | 	mov	arg01, fp
12e18     10 4E 85 F1 | 	sub	fp, #16
12e1c     A0 A9 BF FD | 	call	#_converttoint
12e20     FD 14 52 F6 | 	abs	arg02, result1 wc
12e24     0C 14 16 FD | 	qdiv	arg02, #12
12e28     0C 4E 05 F1 | 	add	fp, #12
12e2c     A7 FA 61 FC | 	wrlong	result1, fp
12e30     14 00 00 FF 
12e34     D8 E4 05 F1 | 	add	objptr, ##10456
12e38     08 4E 85 F1 | 	sub	fp, #8
12e3c     19 14 62 FD | 	getqy	arg02
12e40     0A 15 82 F6 | 	negc	arg02, arg02
12e44     02 14 66 F0 | 	shl	arg02, #2
12e48     F2 14 02 F1 | 	add	arg02, objptr
12e4c     0A 15 02 FB | 	rdlong	arg02, arg02
12e50     A7 14 62 FC | 	wrlong	arg02, fp
12e54     08 4E 05 F1 | 	add	fp, #8
12e58     A7 14 02 FB | 	rdlong	arg02, fp
12e5c     0A 15 52 F6 | 	abs	arg02, arg02 wc
12e60     0C 14 16 FD | 	qdiv	arg02, #12
12e64     0C 4E 85 F1 | 	sub	fp, #12
12e68     14 00 00 FF 
12e6c     D8 E4 85 F1 | 	sub	objptr, ##10456
12e70     18 14 62 FD | 	getqx	arg02
12e74     0A 13 82 F6 | 	negc	arg01, arg02
12e78     09 13 52 F6 | 	abs	arg01, arg01 wc
12e7c     1F 26 C6 C9 |  if_b	decod	local01, #31
12e80     00 26 06 36 |  if_ae	mov	local01, #0
12e84     5C 65 B1 FD | 	call	#__system___float_fromuns
12e88     13 FB 61 F5 | 	xor	result1, local01
12e8c     08 4E 05 F1 | 	add	fp, #8
12e90     A7 FA 61 FC | 	wrlong	result1, fp
12e94     FD 14 02 F6 | 	mov	arg02, result1
12e98     08 4E 85 F1 | 	sub	fp, #8
12e9c     1E 12 C6 F9 | 	decod	arg01, #30
12ea0     4C 78 B1 FD | 	call	#__system____builtin_powf
12ea4     FD 12 02 F6 | 	mov	arg01, result1
12ea8     04 4E 05 F1 | 	add	fp, #4
12eac     A7 14 02 FB | 	rdlong	arg02, fp
12eb0     04 4E 85 F1 | 	sub	fp, #4
12eb4     30 69 B1 FD | 	call	#__system___float_mul
12eb8     A7 FA 61 FC | 	wrlong	result1, fp
12ebc     10 4E 05 F1 | 	add	fp, #16
12ec0     A7 FA 61 FC | 	wrlong	result1, fp
12ec4     08 4E 05 F1 | 	add	fp, #8
12ec8     A7 3C 68 FC | 	wrlong	#30, fp
12ecc     08 4E 85 F1 | 	sub	fp, #8
12ed0     A7 12 02 F6 | 	mov	arg01, fp
12ed4     10 4E 85 F1 | 	sub	fp, #16
12ed8     98 A7 BF FD | 	call	#_push
12edc     A7 F0 03 F6 | 	mov	ptra, fp
12ee0     B2 00 A0 FD | 	call	#popregs_
12ee4                 | _do_getnotevalue_ret
12ee4     2D 00 64 FD | 	ret
12ee8                 | 
12ee8                 | ' 
12ee8                 | ' '-------------------- getpixel
12ee8                 | ' 
12ee8                 | ' sub do_getpixel
12ee8                 | _do_getpixel
12ee8     00 4A 05 F6 | 	mov	COUNT_, #0
12eec     A8 00 A0 FD | 	call	#pushregs_
12ef0     24 F0 07 F1 | 	add	ptra, #36
12ef4     4A 00 00 FF 
12ef8     80 E4 05 F1 | 	add	objptr, ##38016
12efc     F2 16 02 FB | 	rdlong	arg03, objptr
12f00     0B 15 02 F6 | 	mov	arg02, arg03
12f04     01 14 66 F0 | 	shl	arg02, #1
12f08     0B 15 02 F1 | 	add	arg02, arg03
12f0c     02 14 66 F0 | 	shl	arg02, #2
12f10     03 00 00 FF 
12f14     04 E4 85 F1 | 	sub	objptr, ##1540
12f18     F2 14 02 F1 | 	add	arg02, objptr
12f1c     0A 17 02 FB | 	rdlong	arg03, arg02
12f20     18 4E 05 F1 | 	add	fp, #24
12f24     A7 16 62 FC | 	wrlong	arg03, fp
12f28                 | ' 
12f28                 | ' numpar=compiledline(lineptr_e).result.uresult
12f28                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
12f28     18 4E 85 F1 | 	sub	fp, #24
12f2c     02 16 0E F2 | 	cmp	arg03, #2 wz
12f30     47 00 00 FF 
12f34     7C E4 85 F1 | 	sub	objptr, ##36476
12f38     40 00 90 AD |  if_e	jmp	#LR__1500
12f3c     00 12 06 F6 | 	mov	arg01, #0
12f40     CC 96 B1 FD | 	call	#__system___getiolock_0606
12f44     FD 12 02 F6 | 	mov	arg01, result1
12f48     20 3A B1 FD | 	call	#__system___lockmem
12f4c     B7 01 00 FF 
12f50     6D 14 06 F6 | 	mov	arg02, ##@LR__5902
12f54     00 12 06 F6 | 	mov	arg01, #0
12f58     00 16 06 F6 | 	mov	arg03, #0
12f5c     04 47 B1 FD | 	call	#__system___basic_print_string
12f60     00 12 06 F6 | 	mov	arg01, #0
12f64     A8 96 B1 FD | 	call	#__system___getiolock_0606
12f68     FD 00 68 FC | 	wrlong	#0, result1
12f6c     27 12 06 F6 | 	mov	arg01, #39
12f70     00 14 06 F6 | 	mov	arg02, #0
12f74     04 00 B1 FD | 	call	#_printerror
12f78     B4 00 90 FD | 	jmp	#LR__1501
12f7c                 | LR__1500
12f7c     5C A6 BF FD | 	call	#_pop
12f80     FD 16 02 F6 | 	mov	arg03, result1
12f84     FE 14 02 F6 | 	mov	arg02, result2
12f88     FF 12 02 F6 | 	mov	arg01, result3
12f8c     0C 4E 05 F1 | 	add	fp, #12
12f90     A7 16 62 FC | 	wrlong	arg03, fp
12f94     04 4E 05 F1 | 	add	fp, #4
12f98     A7 14 62 FC | 	wrlong	arg02, fp
12f9c     04 4E 05 F1 | 	add	fp, #4
12fa0     A7 12 62 FC | 	wrlong	arg01, fp
12fa4     14 4E 85 F1 | 	sub	fp, #20
12fa8     30 A6 BF FD | 	call	#_pop
12fac     FF 16 02 F6 | 	mov	arg03, result3
12fb0     A7 FA 61 FC | 	wrlong	result1, fp
12fb4     04 4E 05 F1 | 	add	fp, #4
12fb8     A7 FC 61 FC | 	wrlong	result2, fp
12fbc     04 4E 05 F1 | 	add	fp, #4
12fc0     A7 16 62 FC | 	wrlong	arg03, fp
12fc4     08 4E 85 F1 | 	sub	fp, #8
12fc8     A7 12 02 F6 | 	mov	arg01, fp
12fcc     F0 A7 BF FD | 	call	#_converttoint
12fd0     1C 4E 05 F1 | 	add	fp, #28
12fd4     A7 FA 61 FC | 	wrlong	result1, fp
12fd8     10 4E 85 F1 | 	sub	fp, #16
12fdc     A7 12 02 F6 | 	mov	arg01, fp
12fe0     0C 4E 85 F1 | 	sub	fp, #12
12fe4     D8 A7 BF FD | 	call	#_converttoint
12fe8     FD 16 02 F6 | 	mov	arg03, result1
12fec     20 4E 05 F1 | 	add	fp, #32
12ff0     A7 16 62 FC | 	wrlong	arg03, fp
12ff4     F2 12 02 FB | 	rdlong	arg01, objptr
12ff8     04 4E 85 F1 | 	sub	fp, #4
12ffc     A7 FE 01 FB | 	rdlong	result3, fp
13000     FF 12 02 F1 | 	add	arg01, result3
13004     1C 4E 85 F1 | 	sub	fp, #28
13008     0A 16 66 F0 | 	shl	arg03, #10
1300c     0B 13 02 F1 | 	add	arg01, arg03
13010     E0 01 B1 FD | 	call	#_pspeek
13014     FD FA E1 F8 | 	getbyte	result1, result1, #0
13018     A7 FA 61 FC | 	wrlong	result1, fp
1301c     08 4E 05 F1 | 	add	fp, #8
13020     A7 3A 68 FC | 	wrlong	#29, fp
13024     08 4E 85 F1 | 	sub	fp, #8
13028     A7 12 02 F6 | 	mov	arg01, fp
1302c     44 A6 BF FD | 	call	#_push
13030                 | LR__1501
13030     A7 F0 03 F6 | 	mov	ptra, fp
13034     B2 00 A0 FD | 	call	#popregs_
13038                 | _do_getpixel_ret
13038     2D 00 64 FD | 	ret
1303c                 | 
1303c                 | ' 
1303c                 | ' '-------------------- gettime
1303c                 | ' 
1303c                 | ' sub do_gettime
1303c                 | _do_gettime
1303c     02 4A 05 F6 | 	mov	COUNT_, #2
13040     A8 00 A0 FD | 	call	#pushregs_
13044     14 F0 07 F1 | 	add	ptra, #20
13048                 | ' 
13048                 | ' const asm 
13048     1A 26 72 FD | 	getct	local01 wc
1304c     1A 28 62 FD | 	getct	local02
13050                 | ' return hi1, lo1
13050     14 FD 01 F6 | 	mov	result2, local02
13054     A7 26 62 FC | 	wrlong	local01, fp
13058     04 4E 05 F1 | 	add	fp, #4
1305c     A7 FC 61 FC | 	wrlong	result2, fp
13060     0C 4E 05 F1 | 	add	fp, #12
13064     A7 3A 68 FC | 	wrlong	#29, fp
13068     0C 4E 85 F1 | 	sub	fp, #12
1306c     A7 12 02 FB | 	rdlong	arg01, fp
13070     04 4E 05 F1 | 	add	fp, #4
13074     A7 12 62 FC | 	wrlong	arg01, fp
13078     08 4E 85 F1 | 	sub	fp, #8
1307c     A7 12 02 FB | 	rdlong	arg01, fp
13080     0C 4E 05 F1 | 	add	fp, #12
13084     A7 12 62 FC | 	wrlong	arg01, fp
13088     04 4E 85 F1 | 	sub	fp, #4
1308c     A7 12 02 F6 | 	mov	arg01, fp
13090     08 4E 85 F1 | 	sub	fp, #8
13094     DC A5 BF FD | 	call	#_push
13098     A7 F0 03 F6 | 	mov	ptra, fp
1309c     B2 00 A0 FD | 	call	#popregs_
130a0                 | _do_gettime_ret
130a0     2D 00 64 FD | 	ret
130a4                 | 
130a4                 | ' 
130a4                 | ' '-------------------- gosub
130a4                 | ' 
130a4                 | ' sub do_gosub()
130a4                 | _do_gosub
130a4     50 00 00 FF 
130a8     34 E5 05 F1 | 	add	objptr, ##41268
130ac     F2 00 02 FB | 	rdlong	_var01, objptr
130b0     01 00 06 F1 | 	add	_var01, #1
130b4     F2 00 62 FC | 	wrlong	_var01, objptr
130b8                 | ' gosubtop+=1
130b8                 | ' if compiledline(lineptr_e+1).result_type=token_end then
130b8     06 00 00 FF 
130bc     B4 E4 85 F1 | 	sub	objptr, ##3252
130c0     F2 00 02 FB | 	rdlong	_var01, objptr
130c4     01 00 06 F1 | 	add	_var01, #1
130c8     00 03 02 F6 | 	mov	_var02, _var01
130cc     01 02 66 F0 | 	shl	_var02, #1
130d0     00 03 02 F1 | 	add	_var02, _var01
130d4     02 02 66 F0 | 	shl	_var02, #2
130d8     03 00 00 FF 
130dc     04 E4 85 F1 | 	sub	objptr, ##1540
130e0     F2 02 02 F1 | 	add	_var02, objptr
130e4     08 02 06 F1 | 	add	_var02, #8
130e8     01 03 02 FB | 	rdlong	_var02, _var02
130ec     FE 03 0E F2 | 	cmp	_var02, #510 wz
130f0     47 00 00 FF 
130f4     7C E4 85 F1 | 	sub	objptr, ##36476
130f8     58 00 90 5D |  if_ne	jmp	#LR__1510
130fc     50 00 00 FF 
13100     34 E5 05 F1 | 	add	objptr, ##41268
13104     F2 02 02 FB | 	rdlong	_var02, objptr
13108     03 02 66 F0 | 	shl	_var02, #3
1310c     03 00 00 FF 
13110     88 E5 85 F1 | 	sub	objptr, ##1928
13114     F2 02 02 F1 | 	add	_var02, objptr
13118     03 00 00 FF 
1311c     0C E5 05 F1 | 	add	objptr, ##1804
13120     F2 00 02 FB | 	rdlong	_var01, objptr
13124     01 01 62 FC | 	wrlong	_var01, _var02
13128     7C E4 05 F1 | 	add	objptr, #124
1312c     F2 02 02 FB | 	rdlong	_var02, objptr
13130     03 02 66 F0 | 	shl	_var02, #3
13134     03 00 00 FF 
13138     88 E5 85 F1 | 	sub	objptr, ##1928
1313c     F2 02 02 F1 | 	add	_var02, objptr
13140     04 02 06 F1 | 	add	_var02, #4
13144     01 01 68 FC | 	wrlong	#0, _var02
13148     4C 00 00 FF 
1314c     AC E5 85 F1 | 	sub	objptr, ##39340
13150     64 00 90 FD | 	jmp	#LR__1511
13154                 | LR__1510
13154     50 00 00 FF 
13158     34 E5 05 F1 | 	add	objptr, ##41268
1315c     F2 02 02 FB | 	rdlong	_var02, objptr
13160     03 02 66 F0 | 	shl	_var02, #3
13164     03 00 00 FF 
13168     88 E5 85 F1 | 	sub	objptr, ##1928
1316c     F2 02 02 F1 | 	add	_var02, objptr
13170     03 00 00 FF 
13174     14 E5 05 F1 | 	add	objptr, ##1812
13178     F2 00 02 FB | 	rdlong	_var01, objptr
1317c     01 01 62 FC | 	wrlong	_var01, _var02
13180     74 E4 05 F1 | 	add	objptr, #116
13184     F2 02 02 FB | 	rdlong	_var02, objptr
13188     03 02 66 F0 | 	shl	_var02, #3
1318c     03 00 00 FF 
13190     88 E5 85 F1 | 	sub	objptr, ##1928
13194     F2 02 02 F1 | 	add	_var02, objptr
13198     02 00 00 FF 
1319c     2C E5 85 F1 | 	sub	objptr, ##1324
131a0     F2 00 02 FB | 	rdlong	_var01, objptr
131a4     4A 00 00 FF 
131a8     80 E4 85 F1 | 	sub	objptr, ##38016
131ac     02 00 06 F1 | 	add	_var01, #2
131b0     04 02 06 F1 | 	add	_var02, #4
131b4     01 01 62 FC | 	wrlong	_var01, _var02
131b8                 | LR__1511
131b8                 | _do_gosub_ret
131b8     2D 00 64 FD | 	ret
131bc                 | 
131bc                 | ' 
131bc                 | ' '--------------------- goto
131bc                 | ' 
131bc                 | ' '------- fast goto
131bc                 | ' 
131bc                 | ' sub do_fast_goto
131bc                 | _do_fast_goto
131bc     02 4A 05 F6 | 	mov	COUNT_, #2
131c0     A8 00 A0 FD | 	call	#pushregs_
131c4                 | _do_fast_goto_enter
131c4     4A 00 00 FF 
131c8     80 E4 05 F1 | 	add	objptr, ##38016
131cc     F2 12 02 FB | 	rdlong	arg01, objptr
131d0     09 27 02 F6 | 	mov	local01, arg01
131d4     01 26 66 F0 | 	shl	local01, #1
131d8     09 27 02 F1 | 	add	local01, arg01
131dc     02 26 66 F0 | 	shl	local01, #2
131e0     03 00 00 FF 
131e4     04 E4 85 F1 | 	sub	objptr, ##1540
131e8     F2 26 02 F1 | 	add	local01, objptr
131ec     13 29 02 FB | 	rdlong	local02, local01
131f0     14 13 02 F6 | 	mov	arg01, local02
131f4     47 00 00 FF 
131f8     7C E4 85 F1 | 	sub	objptr, ##36476
131fc     4C 00 B1 FD | 	call	#_pslpeek
13200     FD 12 02 F6 | 	mov	arg01, result1
13204                 | ' 
13204                 | ' testptr=compiledline(lineptr_e).result.uresult
13204                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
13204                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
13204     4A 00 00 FF 
13208     80 E4 05 F1 | 	add	objptr, ##38016
1320c     F2 FA 01 FB | 	rdlong	result1, objptr
13210     FD 26 02 F6 | 	mov	local01, result1
13214     01 26 66 F0 | 	shl	local01, #1
13218     FD 26 02 F1 | 	add	local01, result1
1321c     02 26 66 F0 | 	shl	local01, #2
13220     03 00 00 FF 
13224     04 E4 85 F1 | 	sub	objptr, ##1540
13228     F2 26 02 F1 | 	add	local01, objptr
1322c     04 26 06 F1 | 	add	local01, #4
13230     13 27 02 FB | 	rdlong	local01, local01
13234     13 13 0A F2 | 	cmp	arg01, local01 wz
13238     47 00 00 FF 
1323c     7C E4 85 F1 | 	sub	objptr, ##36476
13240     58 00 90 5D |  if_ne	jmp	#LR__1520
13244     50 00 00 FF 
13248     B8 E4 05 F1 | 	add	objptr, ##41144
1324c     F2 28 62 FC | 	wrlong	local02, objptr
13250     06 00 00 FF 
13254     3C E4 85 F1 | 	sub	objptr, ##3132
13258     F2 28 02 FB | 	rdlong	local02, objptr
1325c     01 28 86 F1 | 	sub	local02, #1
13260     04 E4 05 F1 | 	add	objptr, #4
13264     F2 28 62 FC | 	wrlong	local02, objptr
13268                 | '   runptr=testptr
13268                 | '   lineptr_e=lineptr-1
13268                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
13268     06 00 00 FF 
1326c     84 E4 05 F1 | 	add	objptr, ##3204
13270     F2 28 02 FB | 	rdlong	local02, objptr
13274     50 00 00 FF 
13278     04 E5 85 F1 | 	sub	objptr, ##41220
1327c     FF FF 3F FF 
13280     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13284     50 00 00 AF 
13288     04 E5 05 A1 |  if_e	add	objptr, ##41220
1328c     F2 00 68 AC |  if_e	wrlong	#0, objptr
13290     50 00 00 AF 
13294     04 E5 85 A1 |  if_e	sub	objptr, ##41220
13298     04 00 90 FD | 	jmp	#LR__1521
1329c                 | LR__1520
1329c     0C 00 B0 FD | 	call	#_do_find_goto
132a0                 | LR__1521
132a0     A7 F0 03 F6 | 	mov	ptra, fp
132a4     B2 00 A0 FD | 	call	#popregs_
132a8                 | _do_fast_goto_ret
132a8     2D 00 64 FD | 	ret
132ac                 | 
132ac                 | ' 
132ac                 | ' '------- find goto  
132ac                 | ' 
132ac                 | ' sub do_find_goto
132ac                 | _do_find_goto
132ac     03 4A 05 F6 | 	mov	COUNT_, #3
132b0     A8 00 A0 FD | 	call	#pushregs_
132b4     24 F0 07 F1 | 	add	ptra, #36
132b8                 | _do_find_goto_enter
132b8     4A 00 00 FF 
132bc     80 E4 05 F1 | 	add	objptr, ##38016
132c0     F2 26 02 FB | 	rdlong	local01, objptr
132c4     13 29 02 F6 | 	mov	local02, local01
132c8     01 28 66 F0 | 	shl	local02, #1
132cc     13 29 02 F1 | 	add	local02, local01
132d0     02 28 66 F0 | 	shl	local02, #2
132d4     03 00 00 FF 
132d8     04 E4 85 F1 | 	sub	objptr, ##1540
132dc     F2 28 02 F1 | 	add	local02, objptr
132e0     04 28 06 F1 | 	add	local02, #4
132e4     14 29 02 FB | 	rdlong	local02, local02
132e8     A7 28 62 FC | 	wrlong	local02, fp
132ec     03 00 00 FF 
132f0     0C E4 05 F1 | 	add	objptr, ##1548
132f4     F2 2A 02 FB | 	rdlong	local03, objptr
132f8     4A 00 00 FF 
132fc     88 E4 85 F1 | 	sub	objptr, ##38024
13300     04 4E 05 F1 | 	add	fp, #4
13304     A7 2A 62 FC | 	wrlong	local03, fp
13308     04 4E 85 F1 | 	sub	fp, #4
1330c                 | ' 
1330c                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
1330c                 | ' gotoptr=programstart
1330c                 | ' do
1330c                 | LR__1530
1330c     0C 4E 05 F1 | 	add	fp, #12
13310     A7 12 02 F6 | 	mov	arg01, fp
13314     08 4E 85 F1 | 	sub	fp, #8
13318     A7 14 02 FB | 	rdlong	arg02, fp
1331c     04 4E 85 F1 | 	sub	fp, #4
13320     18 16 06 F6 | 	mov	arg03, #24
13324     0B 00 00 FF 
13328     CC E4 05 F1 | 	add	objptr, ##5836
1332c     B4 29 B1 FD | 	call	#_psram_spin2_read1
13330     0B 00 00 FF 
13334     CC E4 85 F1 | 	sub	objptr, ##5836
13338                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
13338                 | '   if gotoheader(0)<>$FFFFFFFF then
13338     0C 4E 05 F1 | 	add	fp, #12
1333c     A7 2A 02 FB | 	rdlong	local03, fp
13340     0C 4E 85 F1 | 	sub	fp, #12
13344     FF FF 7F FF 
13348     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
1334c     24 00 90 AD |  if_e	jmp	#LR__1531
13350     04 4E 05 F1 | 	add	fp, #4
13354     A7 2A 02 FB | 	rdlong	local03, fp
13358     04 4E 05 F1 | 	add	fp, #4
1335c     A7 2A 62 FC | 	wrlong	local03, fp
13360     18 4E 05 F1 | 	add	fp, #24
13364     A7 2A 02 FB | 	rdlong	local03, fp
13368     1C 4E 85 F1 | 	sub	fp, #28
1336c     A7 2A 62 FC | 	wrlong	local03, fp
13370     04 4E 85 F1 | 	sub	fp, #4
13374                 | LR__1531
13374     20 4E 05 F1 | 	add	fp, #32
13378     A7 2A 02 FB | 	rdlong	local03, fp
1337c     20 4E 85 F1 | 	sub	fp, #32
13380     FF FF 3F FF 
13384     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
13388     0C 4E 05 51 |  if_ne	add	fp, #12
1338c     A7 26 02 5B |  if_ne	rdlong	local01, fp
13390     0C 4E 85 51 |  if_ne	sub	fp, #12
13394     FF FF 7F 5F 
13398     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
1339c     18 00 90 AD |  if_e	jmp	#LR__1532
133a0     0C 4E 05 F1 | 	add	fp, #12
133a4     A7 2A 02 FB | 	rdlong	local03, fp
133a8     0C 4E 85 F1 | 	sub	fp, #12
133ac     A7 28 02 FB | 	rdlong	local02, fp
133b0     14 2B 0A F2 | 	cmp	local03, local02 wz
133b4     54 FF 9F 5D |  if_ne	jmp	#LR__1530
133b8                 | LR__1532
133b8                 | ' 
133b8                 | ' if gotoheader(0)=gotoline then
133b8     0C 4E 05 F1 | 	add	fp, #12
133bc     A7 2A 02 FB | 	rdlong	local03, fp
133c0     0C 4E 85 F1 | 	sub	fp, #12
133c4     A7 26 02 FB | 	rdlong	local01, fp
133c8     13 2B 0A F2 | 	cmp	local03, local01 wz
133cc     D8 00 90 5D |  if_ne	jmp	#LR__1533
133d0     4A 00 00 FF 
133d4     80 E4 05 F1 | 	add	objptr, ##38016
133d8     F2 26 02 FB | 	rdlong	local01, objptr
133dc     13 29 02 F6 | 	mov	local02, local01
133e0     01 28 66 F0 | 	shl	local02, #1
133e4     13 29 02 F1 | 	add	local02, local01
133e8     02 28 66 F0 | 	shl	local02, #2
133ec     03 00 00 FF 
133f0     04 E4 85 F1 | 	sub	objptr, ##1540
133f4     F2 28 02 F1 | 	add	local02, objptr
133f8     08 4E 05 F1 | 	add	fp, #8
133fc     A7 2A 02 FB | 	rdlong	local03, fp
13400     14 2B 62 FC | 	wrlong	local03, local02
13404     03 00 00 FF 
13408     04 E4 05 F1 | 	add	objptr, ##1540
1340c     F2 26 02 FB | 	rdlong	local01, objptr
13410     13 29 02 F6 | 	mov	local02, local01
13414     01 28 66 F0 | 	shl	local02, #1
13418     13 29 02 F1 | 	add	local02, local01
1341c     02 28 66 F0 | 	shl	local02, #2
13420     03 00 00 FF 
13424     04 E4 85 F1 | 	sub	objptr, ##1540
13428     F2 28 02 F1 | 	add	local02, objptr
1342c     08 28 06 F1 | 	add	local02, #8
13430     14 9D 68 FC | 	wrlong	#78, local02
13434     03 00 00 FF 
13438     04 E4 05 F1 | 	add	objptr, ##1540
1343c     F2 28 02 FB | 	rdlong	local02, objptr
13440     14 13 02 F6 | 	mov	arg01, local02
13444     01 12 66 F0 | 	shl	arg01, #1
13448     14 13 02 F1 | 	add	arg01, local02
1344c     02 12 66 F0 | 	shl	arg01, #2
13450     03 00 00 FF 
13454     04 E4 85 F1 | 	sub	objptr, ##1540
13458     F2 12 02 F1 | 	add	arg01, objptr
1345c     09 00 00 FF 
13460     44 E4 05 F1 | 	add	objptr, ##4676
13464     F2 14 02 FB | 	rdlong	arg02, objptr
13468     02 2A 06 F6 | 	mov	local03, #2
1346c     14 2B 02 F1 | 	add	local03, local02
13470     0B 00 00 FF 
13474     5C E4 85 F1 | 	sub	objptr, ##5724
13478     F2 16 02 FB | 	rdlong	arg03, objptr
1347c     0B 2B 02 FD | 	qmul	local03, arg03
13480     08 4E 85 F1 | 	sub	fp, #8
13484     39 00 00 FF 
13488     98 E5 85 F1 | 	sub	objptr, ##29592
1348c     18 2A 62 FD | 	getqx	local03
13490     15 15 02 F1 | 	add	arg02, local03
13494     E8 28 B1 FD | 	call	#_psram_spin2_write
13498     0B 00 00 FF 
1349c     CC E4 85 F1 | 	sub	objptr, ##5836
134a0     18 FD BF FD | 	call	#_do_fast_goto
134a4     0C 00 90 FD | 	jmp	#LR__1534
134a8                 | LR__1533
134a8     26 12 06 F6 | 	mov	arg01, #38
134ac     00 14 06 F6 | 	mov	arg02, #0
134b0     C8 FA B0 FD | 	call	#_printerror
134b4                 | LR__1534
134b4     A7 F0 03 F6 | 	mov	ptra, fp
134b8     B2 00 A0 FD | 	call	#popregs_
134bc                 | _do_find_goto_ret
134bc     2D 00 64 FD | 	ret
134c0                 | 
134c0                 | ' 
134c0                 | ' '------- slow goto  
134c0                 | ' 
134c0                 | ' sub do_slow_goto
134c0                 | _do_slow_goto
134c0     02 4A 05 F6 | 	mov	COUNT_, #2
134c4     A8 00 A0 FD | 	call	#pushregs_
134c8     30 F0 07 F1 | 	add	ptra, #48
134cc     0C A1 BF FD | 	call	#_pop
134d0     FF 26 02 F6 | 	mov	local01, result3
134d4     24 4E 05 F1 | 	add	fp, #36
134d8     A7 FA 61 FC | 	wrlong	result1, fp
134dc     04 4E 05 F1 | 	add	fp, #4
134e0     A7 FC 61 FC | 	wrlong	result2, fp
134e4     04 4E 05 F1 | 	add	fp, #4
134e8     A7 26 62 FC | 	wrlong	local01, fp
134ec     08 4E 85 F1 | 	sub	fp, #8
134f0     A7 12 02 F6 | 	mov	arg01, fp
134f4     24 4E 85 F1 | 	sub	fp, #36
134f8     C4 A2 BF FD | 	call	#_converttoint
134fc     A7 FA 61 FC | 	wrlong	result1, fp
13500     4A 00 00 FF 
13504     88 E4 05 F1 | 	add	objptr, ##38024
13508     F2 28 02 FB | 	rdlong	local02, objptr
1350c     4A 00 00 FF 
13510     88 E4 85 F1 | 	sub	objptr, ##38024
13514     04 4E 05 F1 | 	add	fp, #4
13518     A7 28 62 FC | 	wrlong	local02, fp
1351c     04 4E 85 F1 | 	sub	fp, #4
13520                 | ' 
13520                 | ' t1=pop() : gotoline=converttoint(t1)
13520                 | ' gotoptr=programstart
13520                 | ' do
13520                 | LR__1540
13520     0C 4E 05 F1 | 	add	fp, #12
13524     A7 12 02 F6 | 	mov	arg01, fp
13528     08 4E 85 F1 | 	sub	fp, #8
1352c     A7 14 02 FB | 	rdlong	arg02, fp
13530     04 4E 85 F1 | 	sub	fp, #4
13534     18 16 06 F6 | 	mov	arg03, #24
13538     0B 00 00 FF 
1353c     CC E4 05 F1 | 	add	objptr, ##5836
13540     A0 27 B1 FD | 	call	#_psram_spin2_read1
13544     0B 00 00 FF 
13548     CC E4 85 F1 | 	sub	objptr, ##5836
1354c                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
1354c                 | '   if gotoheader(0)<>$FFFFFFFF then
1354c     0C 4E 05 F1 | 	add	fp, #12
13550     A7 28 02 FB | 	rdlong	local02, fp
13554     0C 4E 85 F1 | 	sub	fp, #12
13558     FF FF 7F FF 
1355c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
13560     24 00 90 AD |  if_e	jmp	#LR__1541
13564     04 4E 05 F1 | 	add	fp, #4
13568     A7 28 02 FB | 	rdlong	local02, fp
1356c     04 4E 05 F1 | 	add	fp, #4
13570     A7 28 62 FC | 	wrlong	local02, fp
13574     18 4E 05 F1 | 	add	fp, #24
13578     A7 28 02 FB | 	rdlong	local02, fp
1357c     1C 4E 85 F1 | 	sub	fp, #28
13580     A7 28 62 FC | 	wrlong	local02, fp
13584     04 4E 85 F1 | 	sub	fp, #4
13588                 | LR__1541
13588     20 4E 05 F1 | 	add	fp, #32
1358c     A7 28 02 FB | 	rdlong	local02, fp
13590     20 4E 85 F1 | 	sub	fp, #32
13594     FF FF 3F FF 
13598     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
1359c     0C 4E 05 51 |  if_ne	add	fp, #12
135a0     A7 26 02 5B |  if_ne	rdlong	local01, fp
135a4     0C 4E 85 51 |  if_ne	sub	fp, #12
135a8     FF FF 7F 5F 
135ac     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
135b0     18 00 90 AD |  if_e	jmp	#LR__1542
135b4     0C 4E 05 F1 | 	add	fp, #12
135b8     A7 28 02 FB | 	rdlong	local02, fp
135bc     0C 4E 85 F1 | 	sub	fp, #12
135c0     A7 16 02 FB | 	rdlong	arg03, fp
135c4     0B 29 0A F2 | 	cmp	local02, arg03 wz
135c8     54 FF 9F 5D |  if_ne	jmp	#LR__1540
135cc                 | LR__1542
135cc                 | ' if gotoheader(0)=gotoline then  
135cc     0C 4E 05 F1 | 	add	fp, #12
135d0     A7 28 02 FB | 	rdlong	local02, fp
135d4     0C 4E 85 F1 | 	sub	fp, #12
135d8     A7 26 02 FB | 	rdlong	local01, fp
135dc     13 29 0A F2 | 	cmp	local02, local01 wz
135e0     60 00 90 5D |  if_ne	jmp	#LR__1543
135e4     08 4E 05 F1 | 	add	fp, #8
135e8     A7 28 02 FB | 	rdlong	local02, fp
135ec     08 4E 85 F1 | 	sub	fp, #8
135f0     50 00 00 FF 
135f4     B8 E4 05 F1 | 	add	objptr, ##41144
135f8     F2 28 62 FC | 	wrlong	local02, objptr
135fc     06 00 00 FF 
13600     3C E4 85 F1 | 	sub	objptr, ##3132
13604     F2 28 02 FB | 	rdlong	local02, objptr
13608     01 28 86 F1 | 	sub	local02, #1
1360c     04 E4 05 F1 | 	add	objptr, #4
13610     F2 28 62 FC | 	wrlong	local02, objptr
13614                 | '    runptr=oldgotoptr
13614                 | '    lineptr_e=lineptr-1
13614                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
13614     06 00 00 FF 
13618     84 E4 05 F1 | 	add	objptr, ##3204
1361c     F2 28 02 FB | 	rdlong	local02, objptr
13620     50 00 00 FF 
13624     04 E5 85 F1 | 	sub	objptr, ##41220
13628     FF FF 3F FF 
1362c     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13630     50 00 00 AF 
13634     04 E5 05 A1 |  if_e	add	objptr, ##41220
13638     F2 00 68 AC |  if_e	wrlong	#0, objptr
1363c     50 00 00 AF 
13640     04 E5 85 A1 |  if_e	sub	objptr, ##41220
13644                 | LR__1543
13644     A7 F0 03 F6 | 	mov	ptra, fp
13648     B2 00 A0 FD | 	call	#popregs_
1364c                 | _do_slow_goto_ret
1364c     2D 00 64 FD | 	ret
13650                 | 
13650                 | ' 
13650                 | ' ' ----------------  hex$
13650                 | ' 
13650                 | ' sub do_hex
13650                 | _do_hex
13650     01 4A 05 F6 | 	mov	COUNT_, #1
13654     A8 00 A0 FD | 	call	#pushregs_
13658     18 F0 07 F1 | 	add	ptra, #24
1365c     4A 00 00 FF 
13660     80 E4 05 F1 | 	add	objptr, ##38016
13664     F2 26 02 FB | 	rdlong	local01, objptr
13668     13 17 02 F6 | 	mov	arg03, local01
1366c     01 16 66 F0 | 	shl	arg03, #1
13670     13 17 02 F1 | 	add	arg03, local01
13674     02 16 66 F0 | 	shl	arg03, #2
13678     03 00 00 FF 
1367c     04 E4 85 F1 | 	sub	objptr, ##1540
13680     F2 16 02 F1 | 	add	arg03, objptr
13684     0B 17 02 FB | 	rdlong	arg03, arg03
13688     0C 4E 05 F1 | 	add	fp, #12
1368c     A7 16 62 FC | 	wrlong	arg03, fp
13690                 | ' 
13690                 | ' numpar=compiledline(lineptr_e).result.uresult
13690                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
13690     0C 4E 85 F1 | 	sub	fp, #12
13694     03 16 16 F2 | 	cmp	arg03, #3 wc
13698     47 00 00 FF 
1369c     7C E4 85 F1 | 	sub	objptr, ##36476
136a0     0C 4E 05 C1 |  if_b	add	fp, #12
136a4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
136a8     0C 4E 85 C1 |  if_b	sub	fp, #12
136ac     40 00 90 4D |  if_c_and_nz	jmp	#LR__1550
136b0     00 12 06 F6 | 	mov	arg01, #0
136b4     58 8F B1 FD | 	call	#__system___getiolock_0606
136b8     FD 12 02 F6 | 	mov	arg01, result1
136bc     AC 32 B1 FD | 	call	#__system___lockmem
136c0     B7 01 00 FF 
136c4     78 14 06 F6 | 	mov	arg02, ##@LR__5903
136c8     00 12 06 F6 | 	mov	arg01, #0
136cc     00 16 06 F6 | 	mov	arg03, #0
136d0     90 3F B1 FD | 	call	#__system___basic_print_string
136d4     00 12 06 F6 | 	mov	arg01, #0
136d8     34 8F B1 FD | 	call	#__system___getiolock_0606
136dc     FD 00 68 FC | 	wrlong	#0, result1
136e0     27 12 06 F6 | 	mov	arg01, #39
136e4     00 14 06 F6 | 	mov	arg02, #0
136e8     90 F8 B0 FD | 	call	#_printerror
136ec     B8 00 90 FD | 	jmp	#LR__1553
136f0                 | LR__1550
136f0                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
136f0     0C 4E 05 F1 | 	add	fp, #12
136f4     A7 26 02 FB | 	rdlong	local01, fp
136f8     0C 4E 85 F1 | 	sub	fp, #12
136fc     02 26 0E F2 | 	cmp	local01, #2 wz
13700     38 00 90 5D |  if_ne	jmp	#LR__1551
13704     D4 9E BF FD | 	call	#_pop
13708     FF 26 02 F6 | 	mov	local01, result3
1370c     A7 FA 61 FC | 	wrlong	result1, fp
13710     04 4E 05 F1 | 	add	fp, #4
13714     A7 FC 61 FC | 	wrlong	result2, fp
13718     04 4E 05 F1 | 	add	fp, #4
1371c     A7 26 62 FC | 	wrlong	local01, fp
13720     08 4E 85 F1 | 	sub	fp, #8
13724     A7 12 02 F6 | 	mov	arg01, fp
13728     94 A0 BF FD | 	call	#_converttoint
1372c     14 4E 05 F1 | 	add	fp, #20
13730     A7 FA 61 FC | 	wrlong	result1, fp
13734     14 4E 85 F1 | 	sub	fp, #20
13738     0C 00 90 FD | 	jmp	#LR__1552
1373c                 | LR__1551
1373c     14 4E 05 F1 | 	add	fp, #20
13740     A7 10 68 FC | 	wrlong	#8, fp
13744     14 4E 85 F1 | 	sub	fp, #20
13748                 | LR__1552
13748     90 9E BF FD | 	call	#_pop
1374c     FF 26 02 F6 | 	mov	local01, result3
13750     A7 FA 61 FC | 	wrlong	result1, fp
13754     04 4E 05 F1 | 	add	fp, #4
13758     A7 FC 61 FC | 	wrlong	result2, fp
1375c     04 4E 05 F1 | 	add	fp, #4
13760     A7 26 62 FC | 	wrlong	local01, fp
13764     08 4E 85 F1 | 	sub	fp, #8
13768     A7 12 02 F6 | 	mov	arg01, fp
1376c     50 A0 BF FD | 	call	#_converttoint
13770     10 4E 05 F1 | 	add	fp, #16
13774     A7 FA 61 FC | 	wrlong	result1, fp
13778     FD 12 02 F6 | 	mov	arg01, result1
1377c     04 4E 05 F1 | 	add	fp, #4
13780     A7 14 02 FB | 	rdlong	arg02, fp
13784     14 4E 85 F1 | 	sub	fp, #20
13788     10 16 06 F6 | 	mov	arg03, #16
1378c     B0 54 B1 FD | 	call	#__system__Number_S
13790     A7 FA 61 FC | 	wrlong	result1, fp
13794     08 4E 05 F1 | 	add	fp, #8
13798     A7 3E 68 FC | 	wrlong	#31, fp
1379c     08 4E 85 F1 | 	sub	fp, #8
137a0     A7 12 02 F6 | 	mov	arg01, fp
137a4     CC 9E BF FD | 	call	#_push
137a8                 | LR__1553
137a8     A7 F0 03 F6 | 	mov	ptra, fp
137ac     B2 00 A0 FD | 	call	#popregs_
137b0                 | _do_hex_ret
137b0     2D 00 64 FD | 	ret
137b4                 | 
137b4                 | ' 
137b4                 | ' ' ----------------  if
137b4                 | ' 
137b4                 | ' sub do_if
137b4                 | _do_if
137b4     05 4A 05 F6 | 	mov	COUNT_, #5
137b8     A8 00 A0 FD | 	call	#pushregs_
137bc     1C 9E BF FD | 	call	#_pop
137c0     FD 26 0A F6 | 	mov	local01, result1 wz
137c4     FE 28 02 F6 | 	mov	local02, result2
137c8     FF 2A 02 F6 | 	mov	local03, result3
137cc                 | ' t1=pop()
137cc                 | ' ' if uresult=0, jump over else
137cc                 | ' if t1.result.uresult = 0 then 
137cc     BC 00 90 5D |  if_ne	jmp	#LR__1562
137d0                 | '   for i=lineptr_e to lineptr-1
137d0     4A 00 00 FF 
137d4     80 E4 05 F1 | 	add	objptr, ##38016
137d8     F2 2C 02 FB | 	rdlong	local04, objptr
137dc     04 E4 85 F1 | 	sub	objptr, #4
137e0     F2 2E 02 FB | 	rdlong	local05, objptr
137e4     4A 00 00 FF 
137e8     7C E4 85 F1 | 	sub	objptr, ##38012
137ec                 | LR__1560
137ec     17 2D 52 F2 | 	cmps	local04, local05 wc
137f0     78 00 90 3D |  if_ae	jmp	#LR__1561
137f4     16 FF 01 F6 | 	mov	result3, local04
137f8     01 FE 65 F0 | 	shl	result3, #1
137fc     16 FF 01 F1 | 	add	result3, local04
13800     02 FE 65 F0 | 	shl	result3, #2
13804     47 00 00 FF 
13808     7C E4 05 F1 | 	add	objptr, ##36476
1380c     F2 FE 01 F1 | 	add	result3, objptr
13810     FF 26 02 FB | 	rdlong	local01, result3
13814     04 FE 05 F1 | 	add	result3, #4
13818     FF FC 01 FB | 	rdlong	result2, result3
1381c     16 FF 01 F6 | 	mov	result3, local04
13820     01 FE 65 F0 | 	shl	result3, #1
13824     16 FF 01 F1 | 	add	result3, local04
13828     02 FE 65 F0 | 	shl	result3, #2
1382c     F2 FE 01 F1 | 	add	result3, objptr
13830     08 FE 05 F1 | 	add	result3, #8
13834     FF FE 01 FB | 	rdlong	result3, result3
13838     FE 28 02 F6 | 	mov	local02, result2
1383c     FF 2A 02 F6 | 	mov	local03, result3
13840                 | '     t1=compiledline(i)
13840                 | '     if t1.result_type=token_else then lineptr_e=i : return
13840     5A 2A 0E F2 | 	cmp	local03, #90 wz
13844     47 00 00 FF 
13848     7C E4 85 F1 | 	sub	objptr, ##36476
1384c     4A 00 00 AF 
13850     80 E4 05 A1 |  if_e	add	objptr, ##38016
13854     F2 2C 62 AC |  if_e	wrlong	local04, objptr
13858     4A 00 00 AF 
1385c     80 E4 85 A1 |  if_e	sub	objptr, ##38016
13860     28 00 90 AD |  if_e	jmp	#LR__1563
13864     01 2C 06 F1 | 	add	local04, #1
13868     80 FF 9F FD | 	jmp	#LR__1560
1386c                 | LR__1561
1386c     4A 00 00 FF 
13870     7C E4 05 F1 | 	add	objptr, ##38012
13874     F2 2E 02 FB | 	rdlong	local05, objptr
13878     01 2E 86 F1 | 	sub	local05, #1
1387c     04 E4 05 F1 | 	add	objptr, #4
13880     F2 2E 62 FC | 	wrlong	local05, objptr
13884     4A 00 00 FF 
13888     80 E4 85 F1 | 	sub	objptr, ##38016
1388c                 | LR__1562
1388c                 | LR__1563
1388c     A7 F0 03 F6 | 	mov	ptra, fp
13890     B2 00 A0 FD | 	call	#popregs_
13894                 | _do_if_ret
13894     2D 00 64 FD | 	ret
13898                 | 
13898                 | ' 
13898                 | ' ' ----------------  inkey$
13898                 | ' 
13898                 | ' sub do_inkey
13898                 | _do_inkey
13898     02 4A 05 F6 | 	mov	COUNT_, #2
1389c     A8 00 A0 FD | 	call	#pushregs_
138a0     0C F0 07 F1 | 	add	ptra, #12
138a4     68 28 B1 FD | 	call	#_usbnew_spin2_get_key
138a8     45 00 00 FF 
138ac     74 E4 05 F1 | 	add	objptr, ##35444
138b0     F2 FA 61 FC | 	wrlong	result1, objptr
138b4                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
138b4     45 00 00 FF 
138b8     74 E4 85 F1 | 	sub	objptr, ##35444
138bc     00 FA 0D F2 | 	cmp	result1, #0 wz
138c0     94 00 90 AD |  if_e	jmp	#LR__1571
138c4     45 00 00 FF 
138c8     74 E4 05 F1 | 	add	objptr, ##35444
138cc     F2 1C 02 FB | 	rdlong	arg06, objptr
138d0     45 00 00 FF 
138d4     74 E4 85 F1 | 	sub	objptr, ##35444
138d8     00 00 40 FF 
138dc     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
138e0     45 00 00 CF 
138e4     74 E4 05 C1 |  if_b	add	objptr, ##35444
138e8     F2 26 02 CB |  if_b	rdlong	local01, objptr
138ec     45 00 00 CF 
138f0     74 E4 85 C1 |  if_b	sub	objptr, ##35444
138f4     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
138f8     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
138fc     58 00 90 3D |  if_ae	jmp	#LR__1571
13900                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
13900     50 00 00 FF 
13904     3C E5 05 F1 | 	add	objptr, ##41276
13908     F2 1C 02 FB | 	rdlong	arg06, objptr
1390c     50 00 00 FF 
13910     3C E5 85 F1 | 	sub	objptr, ##41276
13914     01 1C 0E F2 | 	cmp	arg06, #1 wz
13918     3C 00 90 5D |  if_ne	jmp	#LR__1570
1391c     52 00 00 FF 
13920     A4 E4 05 F1 | 	add	objptr, ##42148
13924     F2 14 02 FB | 	rdlong	arg02, objptr
13928     04 E4 85 F1 | 	sub	objptr, #4
1392c     F2 1A 02 FB | 	rdlong	arg05, objptr
13930     07 12 06 F6 | 	mov	arg01, #7
13934     56 00 00 FF 
13938     44 16 06 F6 | 	mov	arg03, ##44100
1393c     0C 18 C6 F9 | 	decod	arg04, #12
13940     01 1C 66 F6 | 	neg	arg06, #1
13944     46 00 00 FF 
13948     D4 E5 85 F1 | 	sub	objptr, ##36308
1394c     AC 2B B1 FD | 	call	#_audio096_spin2_play
13950     0B 00 00 FF 
13954     CC E4 85 F1 | 	sub	objptr, ##5836
13958                 | LR__1570
13958                 | LR__1571
13958                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
13958     45 00 00 FF 
1395c     74 E4 05 F1 | 	add	objptr, ##35444
13960     F2 1C 0A FB | 	rdlong	arg06, objptr wz
13964     45 00 00 FF 
13968     74 E4 85 F1 | 	sub	objptr, ##35444
1396c     D4 01 90 AD |  if_e	jmp	#LR__1580
13970     45 00 00 FF 
13974     74 E4 05 F1 | 	add	objptr, ##35444
13978     F2 1C 02 FB | 	rdlong	arg06, objptr
1397c     45 00 00 FF 
13980     74 E4 85 F1 | 	sub	objptr, ##35444
13984     00 00 40 FF 
13988     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
1398c     45 00 00 CF 
13990     74 E4 05 C1 |  if_b	add	objptr, ##35444
13994     F2 26 02 CB |  if_b	rdlong	local01, objptr
13998     45 00 00 CF 
1399c     74 E4 85 C1 |  if_b	sub	objptr, ##35444
139a0     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
139a4     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
139a8     98 01 90 3D |  if_ae	jmp	#LR__1580
139ac                 | '   if leds and 2 = 2 then 
139ac     52 00 00 FF 
139b0     E0 E4 05 F1 | 	add	objptr, ##42208
139b4     F2 26 0A FB | 	rdlong	local01, objptr wz
139b8     52 00 00 FF 
139bc     E0 E4 85 F1 | 	sub	objptr, ##42208
139c0     58 01 90 AD |  if_e	jmp	#LR__1579
139c4                 | '     if key>96 andalso key<123 then
139c4     45 00 00 FF 
139c8     74 E4 05 F1 | 	add	objptr, ##35444
139cc     F2 26 02 FB | 	rdlong	local01, objptr
139d0     45 00 00 FF 
139d4     74 E4 85 F1 | 	sub	objptr, ##35444
139d8     61 26 16 F2 | 	cmp	local01, #97 wc
139dc     3C 00 90 CD |  if_b	jmp	#LR__1572
139e0     45 00 00 FF 
139e4     74 E4 05 F1 | 	add	objptr, ##35444
139e8     F2 26 02 FB | 	rdlong	local01, objptr
139ec     45 00 00 FF 
139f0     74 E4 85 F1 | 	sub	objptr, ##35444
139f4     7B 26 16 F2 | 	cmp	local01, #123 wc
139f8     20 00 90 3D |  if_ae	jmp	#LR__1572
139fc     45 00 00 FF 
13a00     74 E4 05 F1 | 	add	objptr, ##35444
13a04     F2 26 02 FB | 	rdlong	local01, objptr
13a08     20 26 86 F1 | 	sub	local01, #32
13a0c     F2 26 62 FC | 	wrlong	local01, objptr
13a10     45 00 00 FF 
13a14     74 E4 85 F1 | 	sub	objptr, ##35444
13a18     00 01 90 FD | 	jmp	#LR__1578
13a1c                 | LR__1572
13a1c     45 00 00 FF 
13a20     74 E4 05 F1 | 	add	objptr, ##35444
13a24     F2 26 02 FB | 	rdlong	local01, objptr
13a28     45 00 00 FF 
13a2c     74 E4 85 F1 | 	sub	objptr, ##35444
13a30     41 26 16 F2 | 	cmp	local01, #65 wc
13a34     3C 00 90 CD |  if_b	jmp	#LR__1573
13a38     45 00 00 FF 
13a3c     74 E4 05 F1 | 	add	objptr, ##35444
13a40     F2 26 02 FB | 	rdlong	local01, objptr
13a44     45 00 00 FF 
13a48     74 E4 85 F1 | 	sub	objptr, ##35444
13a4c     5B 26 16 F2 | 	cmp	local01, #91 wc
13a50     20 00 90 3D |  if_ae	jmp	#LR__1573
13a54     45 00 00 FF 
13a58     74 E4 05 F1 | 	add	objptr, ##35444
13a5c     F2 26 02 FB | 	rdlong	local01, objptr
13a60     20 26 06 F1 | 	add	local01, #32
13a64     F2 26 62 FC | 	wrlong	local01, objptr
13a68     45 00 00 FF 
13a6c     74 E4 85 F1 | 	sub	objptr, ##35444
13a70     A8 00 90 FD | 	jmp	#LR__1577
13a74                 | LR__1573
13a74     45 00 00 FF 
13a78     74 E4 05 F1 | 	add	objptr, ##35444
13a7c     F2 26 02 FB | 	rdlong	local01, objptr
13a80     45 00 00 FF 
13a84     74 E4 85 F1 | 	sub	objptr, ##35444
13a88     17 26 16 F2 | 	cmp	local01, #23 wc
13a8c     3C 00 90 CD |  if_b	jmp	#LR__1574
13a90     45 00 00 FF 
13a94     74 E4 05 F1 | 	add	objptr, ##35444
13a98     F2 26 02 FB | 	rdlong	local01, objptr
13a9c     45 00 00 FF 
13aa0     74 E4 85 F1 | 	sub	objptr, ##35444
13aa4     20 26 16 F2 | 	cmp	local01, #32 wc
13aa8     20 00 90 3D |  if_ae	jmp	#LR__1574
13aac     45 00 00 FF 
13ab0     74 E4 05 F1 | 	add	objptr, ##35444
13ab4     F2 26 02 FB | 	rdlong	local01, objptr
13ab8     09 26 86 F1 | 	sub	local01, #9
13abc     F2 26 62 FC | 	wrlong	local01, objptr
13ac0     45 00 00 FF 
13ac4     74 E4 85 F1 | 	sub	objptr, ##35444
13ac8     50 00 90 FD | 	jmp	#LR__1576
13acc                 | LR__1574
13acc     45 00 00 FF 
13ad0     74 E4 05 F1 | 	add	objptr, ##35444
13ad4     F2 28 02 FB | 	rdlong	local02, objptr
13ad8     45 00 00 FF 
13adc     74 E4 85 F1 | 	sub	objptr, ##35444
13ae0     0E 28 16 F2 | 	cmp	local02, #14 wc
13ae4     34 00 90 CD |  if_b	jmp	#LR__1575
13ae8     45 00 00 FF 
13aec     74 E4 05 F1 | 	add	objptr, ##35444
13af0     F2 26 02 FB | 	rdlong	local01, objptr
13af4     45 00 00 FF 
13af8     74 E4 85 F1 | 	sub	objptr, ##35444
13afc     17 26 16 F2 | 	cmp	local01, #23 wc
13b00     52 00 00 CF 
13b04     E4 E4 05 C1 |  if_b	add	objptr, ##42212
13b08     F2 28 02 CB |  if_b	rdlong	local02, objptr
13b0c     27 28 06 C1 |  if_b	add	local02, #39
13b10     F2 28 62 CC |  if_b	wrlong	local02, objptr
13b14     52 00 00 CF 
13b18     E4 E4 85 C1 |  if_b	sub	objptr, ##42212
13b1c                 | LR__1575
13b1c                 | LR__1576
13b1c                 | LR__1577
13b1c                 | LR__1578
13b1c                 | LR__1579
13b1c     45 00 00 FF 
13b20     74 E4 05 F1 | 	add	objptr, ##35444
13b24     F2 12 02 FB | 	rdlong	arg01, objptr
13b28     45 00 00 FF 
13b2c     74 E4 85 F1 | 	sub	objptr, ##35444
13b30     C8 F7 B0 FD | 	call	#_scantochar
13b34     FD 12 02 F6 | 	mov	arg01, result1
13b38     74 50 B1 FD | 	call	#__system__Chr_S
13b3c     A7 FA 61 FC | 	wrlong	result1, fp
13b40     0C 00 90 FD | 	jmp	#LR__1581
13b44                 | LR__1580
13b44     B7 01 00 FF 
13b48     7F 28 06 F6 | 	mov	local02, ##@LR__5904
13b4c     A7 28 62 FC | 	wrlong	local02, fp
13b50                 | LR__1581
13b50     08 4E 05 F1 | 	add	fp, #8
13b54     A7 3E 68 FC | 	wrlong	#31, fp
13b58     08 4E 85 F1 | 	sub	fp, #8
13b5c     A7 12 02 F6 | 	mov	arg01, fp
13b60     10 9B BF FD | 	call	#_push
13b64     A7 F0 03 F6 | 	mov	ptra, fp
13b68     B2 00 A0 FD | 	call	#popregs_
13b6c                 | _do_inkey_ret
13b6c     2D 00 64 FD | 	ret
13b70                 | 
13b70                 | ' 
13b70                 | ' ' ----------------  ink
13b70                 | ' 
13b70                 | ' sub do_ink
13b70                 | _do_ink
13b70     00 4A 05 F6 | 	mov	COUNT_, #0
13b74     A8 00 A0 FD | 	call	#pushregs_
13b78     0C F0 07 F1 | 	add	ptra, #12
13b7c     5C 9A BF FD | 	call	#_pop
13b80     FF 14 02 F6 | 	mov	arg02, result3
13b84     A7 FA 61 FC | 	wrlong	result1, fp
13b88     04 4E 05 F1 | 	add	fp, #4
13b8c     A7 FC 61 FC | 	wrlong	result2, fp
13b90     04 4E 05 F1 | 	add	fp, #4
13b94     A7 14 62 FC | 	wrlong	arg02, fp
13b98     08 4E 85 F1 | 	sub	fp, #8
13b9c     A7 12 02 F6 | 	mov	arg01, fp
13ba0     1C 9C BF FD | 	call	#_converttoint
13ba4     37 00 00 FF 
13ba8     3C E4 05 F1 | 	add	objptr, ##28220
13bac     F2 FA 61 FC | 	wrlong	result1, objptr
13bb0     04 E4 85 F1 | 	sub	objptr, #4
13bb4     F2 14 02 FB | 	rdlong	arg02, objptr
13bb8                 | ' 
13bb8                 | ' write_color:=ff
13bb8     36 00 00 FF 
13bbc     F7 E5 85 F1 | 	sub	objptr, ##28151
13bc0     F2 FA 61 FC | 	wrlong	result1, objptr
13bc4                 | ' write_background:=bb
13bc4     04 E4 05 F1 | 	add	objptr, #4
13bc8     F2 14 62 FC | 	wrlong	arg02, objptr
13bcc     36 00 00 FF 
13bd0     F7 E5 05 F1 | 	add	objptr, ##28151
13bd4     F2 12 02 FB | 	rdlong	arg01, objptr
13bd8     37 00 00 FF 
13bdc     3C E4 85 F1 | 	sub	objptr, ##28220
13be0     70 FF B0 FD | 	call	#_hg010b_spin2_setcursorcolor
13be4     A7 F0 03 F6 | 	mov	ptra, fp
13be8     B2 00 A0 FD | 	call	#popregs_
13bec                 | _do_ink_ret
13bec     2D 00 64 FD | 	ret
13bf0                 | 
13bf0                 | ' 
13bf0                 | ' ' ----------------  int
13bf0                 | ' 
13bf0                 | ' sub do_int
13bf0                 | _do_int
13bf0     02 4A 05 F6 | 	mov	COUNT_, #2
13bf4     A8 00 A0 FD | 	call	#pushregs_
13bf8     10 F0 07 F1 | 	add	ptra, #16
13bfc     DC 99 BF FD | 	call	#_pop
13c00     FE 26 02 F6 | 	mov	local01, result2
13c04     FF 28 02 F6 | 	mov	local02, result3
13c08     A7 FA 61 FC | 	wrlong	result1, fp
13c0c     04 4E 05 F1 | 	add	fp, #4
13c10     A7 26 62 FC | 	wrlong	local01, fp
13c14     04 4E 05 F1 | 	add	fp, #4
13c18     A7 28 62 FC | 	wrlong	local02, fp
13c1c                 | ' 
13c1c                 | ' t1=pop()
13c1c                 | ' select case t1.result_type
13c1c     08 4E 85 F1 | 	sub	fp, #8
13c20     1E 28 0E F2 | 	cmp	local02, #30 wz
13c24     14 00 90 AD |  if_e	jmp	#LR__1590
13c28     1F 28 0E F2 | 	cmp	local02, #31 wz
13c2c     20 00 90 AD |  if_e	jmp	#LR__1591
13c30     2B 28 0E F2 | 	cmp	local02, #43 wz
13c34     34 00 90 AD |  if_e	jmp	#LR__1592
13c38     50 00 90 FD | 	jmp	#LR__1593
13c3c                 | LR__1590
13c3c     A7 12 02 FB | 	rdlong	arg01, fp
13c40     00 14 06 F6 | 	mov	arg02, #0
13c44     68 60 B1 FD | 	call	#__system___float_tointeger
13c48     A7 FA 61 FC | 	wrlong	result1, fp
13c4c     3C 00 90 FD | 	jmp	#LR__1593
13c50                 | LR__1591
13c50     A7 12 02 FB | 	rdlong	arg01, fp
13c54     9C 63 B1 FD | 	call	#__system____builtin_atof
13c58     FD 12 02 F6 | 	mov	arg01, result1
13c5c     00 14 06 F6 | 	mov	arg02, #0
13c60     4C 60 B1 FD | 	call	#__system___float_tointeger
13c64     A7 FA 61 FC | 	wrlong	result1, fp
13c68     20 00 90 FD | 	jmp	#LR__1593
13c6c                 | LR__1592
13c6c     A7 12 02 FB | 	rdlong	arg01, fp
13c70     E0 9A BF FD | 	call	#_convertstring
13c74     FD 12 02 F6 | 	mov	arg01, result1
13c78     78 63 B1 FD | 	call	#__system____builtin_atof
13c7c     FD 12 02 F6 | 	mov	arg01, result1
13c80     00 14 06 F6 | 	mov	arg02, #0
13c84     28 60 B1 FD | 	call	#__system___float_tointeger
13c88     A7 FA 61 FC | 	wrlong	result1, fp
13c8c                 | LR__1593
13c8c     08 4E 05 F1 | 	add	fp, #8
13c90     A7 38 68 FC | 	wrlong	#28, fp
13c94     08 4E 85 F1 | 	sub	fp, #8
13c98     A7 12 02 F6 | 	mov	arg01, fp
13c9c     D4 99 BF FD | 	call	#_push
13ca0     A7 F0 03 F6 | 	mov	ptra, fp
13ca4     B2 00 A0 FD | 	call	#popregs_
13ca8                 | _do_int_ret
13ca8     2D 00 64 FD | 	ret
13cac                 | 
13cac                 | ' 
13cac                 | ' ' ----------------  input
13cac                 | ' 
13cac                 | ' sub do_input
13cac                 | _do_input
13cac     11 4A 05 F6 | 	mov	COUNT_, #17
13cb0     A8 00 A0 FD | 	call	#pushregs_
13cb4     50 F1 07 F1 | 	add	ptra, #336
13cb8     4A 00 00 FF 
13cbc     80 E4 05 F1 | 	add	objptr, ##38016
13cc0     F2 FE 01 FB | 	rdlong	result3, objptr
13cc4     FF FC 01 F6 | 	mov	result2, result3
13cc8     01 FC 65 F0 | 	shl	result2, #1
13ccc     FF FC 01 F1 | 	add	result2, result3
13cd0     02 FC 65 F0 | 	shl	result2, #2
13cd4     03 00 00 FF 
13cd8     04 E4 85 F1 | 	sub	objptr, ##1540
13cdc     F2 FC 01 F1 | 	add	result2, objptr
13ce0     FE FC 01 FB | 	rdlong	result2, result2
13ce4     08 4E 05 F1 | 	add	fp, #8
13ce8     A7 FC 61 FC | 	wrlong	result2, fp
13cec                 | ' 
13cec                 | ' numpar=compiledline(lineptr_e).result.uresult
13cec                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
13cec     08 4E 85 F1 | 	sub	fp, #8
13cf0     01 FC 15 F2 | 	cmp	result2, #1 wc
13cf4     47 00 00 FF 
13cf8     7C E4 85 F1 | 	sub	objptr, ##36476
13cfc     14 00 90 CD |  if_b	jmp	#LR__1600
13d00     08 4E 05 F1 | 	add	fp, #8
13d04     A7 FC 01 FB | 	rdlong	result2, fp
13d08     08 4E 85 F1 | 	sub	fp, #8
13d0c     41 FC 15 F2 | 	cmp	result2, #65 wc
13d10     50 00 90 CD |  if_b	jmp	#LR__1601
13d14                 | LR__1600
13d14     00 12 06 F6 | 	mov	arg01, #0
13d18     F4 88 B1 FD | 	call	#__system___getiolock_0606
13d1c     FD 12 02 F6 | 	mov	arg01, result1
13d20     48 2C B1 FD | 	call	#__system___lockmem
13d24     B7 01 00 FF 
13d28     80 14 06 F6 | 	mov	arg02, ##@LR__5905
13d2c     00 12 06 F6 | 	mov	arg01, #0
13d30     00 16 06 F6 | 	mov	arg03, #0
13d34     2C 39 B1 FD | 	call	#__system___basic_print_string
13d38     00 12 06 F6 | 	mov	arg01, #0
13d3c     D0 88 B1 FD | 	call	#__system___getiolock_0606
13d40     FD 00 68 FC | 	wrlong	#0, result1
13d44     50 00 00 FF 
13d48     F0 E4 05 F1 | 	add	objptr, ##41200
13d4c     F2 14 02 FB | 	rdlong	arg02, objptr
13d50     50 00 00 FF 
13d54     F0 E4 85 F1 | 	sub	objptr, ##41200
13d58     27 12 06 F6 | 	mov	arg01, #39
13d5c     1C F2 B0 FD | 	call	#_printerror
13d60     44 0B 90 FD | 	jmp	#LR__1650
13d64                 | LR__1601
13d64     08 4E 05 F1 | 	add	fp, #8
13d68     A7 FC 01 FB | 	rdlong	result2, fp
13d6c     01 FC 85 F1 | 	sub	result2, #1
13d70     28 4F 05 F1 | 	add	fp, #296
13d74     A7 FC 61 FC | 	wrlong	result2, fp
13d78     3C E4 05 F1 | 	add	objptr, #60
13d7c     F2 FC E1 FA | 	rdword	result2, objptr
13d80     FE FC 51 F6 | 	abs	result2, result2 wc
13d84     01 FC 45 F0 | 	shr	result2, #1
13d88     FE FC 81 F6 | 	negc	result2, result2
13d8c     0C 4E 05 F1 | 	add	fp, #12
13d90     A7 FC 61 FC | 	wrlong	result2, fp
13d94     02 E4 05 F1 | 	add	objptr, #2
13d98     F2 26 C2 FA | 	rdbyte	local01, objptr
13d9c     3E E4 85 F1 | 	sub	objptr, #62
13da0     04 4E 05 F1 | 	add	fp, #4
13da4     A7 26 62 FC | 	wrlong	local01, fp
13da8     40 4F 85 F1 | 	sub	fp, #320
13dac                 | ' i=numpar-1
13dac                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13dac                 | ' do
13dac                 | LR__1602
13dac     54 CA BE FD | 	call	#_edit
13db0     A7 FA 61 FC | 	wrlong	result1, fp
13db4                 | ' 
13db4                 | '   line$=edit()
13db4                 | ' 
13db4                 | '   if v.cursor_y=cpy+1 then
13db4     3E E4 05 F1 | 	add	objptr, #62
13db8     F2 26 C2 FA | 	rdbyte	local01, objptr
13dbc     3E E4 85 F1 | 	sub	objptr, #62
13dc0     40 4F 05 F1 | 	add	fp, #320
13dc4     A7 16 02 FB | 	rdlong	arg03, fp
13dc8     40 4F 85 F1 | 	sub	fp, #320
13dcc     01 16 06 F1 | 	add	arg03, #1
13dd0     0B 27 0A F2 | 	cmp	local01, arg03 wz
13dd4     6C 00 90 5D |  if_ne	jmp	#LR__1605
13dd8     A7 26 02 FB | 	rdlong	local01, fp
13ddc     13 13 02 F6 | 	mov	arg01, local01
13de0     09 29 02 F6 | 	mov	local02, arg01
13de4     97 06 48 FB | 	callpa	#(@LR__1604-@LR__1603)>>2,fcache_load_ptr_
13de8                 | LR__1603
13de8     14 FB C9 FA | 	rdbyte	result1, local02 wz
13dec     01 28 06 51 |  if_ne	add	local02, #1
13df0     F4 FF 9F 5D |  if_ne	jmp	#LR__1603
13df4                 | LR__1604
13df4     09 29 82 F1 | 	sub	local02, arg01
13df8     14 15 02 F6 | 	mov	arg02, local02
13dfc     3C 4F 05 F1 | 	add	fp, #316
13e00     A7 16 02 FB | 	rdlong	arg03, fp
13e04     3C 4F 85 F1 | 	sub	fp, #316
13e08     0B 15 82 F1 | 	sub	arg02, arg03
13e0c     37 00 00 FF 
13e10     34 E4 05 F1 | 	add	objptr, ##28212
13e14     F2 16 02 FB | 	rdlong	arg03, objptr
13e18     37 00 00 FF 
13e1c     34 E4 85 F1 | 	sub	objptr, ##28212
13e20     0B 15 02 F1 | 	add	arg02, arg03
13e24     13 13 02 F6 | 	mov	arg01, local01
13e28     48 4C B1 FD | 	call	#__system__Right_S
13e2c     FD 12 02 F6 | 	mov	arg01, result1
13e30     48 50 B1 FD | 	call	#__system__RTrim_S
13e34     FD 12 02 F6 | 	mov	arg01, result1
13e38     80 4F B1 FD | 	call	#__system__LTrim_S
13e3c     A7 FA 61 FC | 	wrlong	result1, fp
13e40     14 00 90 FD | 	jmp	#LR__1606
13e44                 | LR__1605
13e44     A7 12 02 FB | 	rdlong	arg01, fp
13e48     30 50 B1 FD | 	call	#__system__RTrim_S
13e4c     FD 12 02 F6 | 	mov	arg01, result1
13e50     68 4F B1 FD | 	call	#__system__LTrim_S
13e54     A7 FA 61 FC | 	wrlong	result1, fp
13e58                 | LR__1606
13e58                 | '   do
13e58                 | LR__1607
13e58     A7 14 02 FB | 	rdlong	arg02, fp
13e5c     B7 01 00 FF 
13e60     8B 16 06 F6 | 	mov	arg03, ##@LR__5906
13e64     01 12 06 F6 | 	mov	arg01, #1
13e68     C8 50 B1 FD | 	call	#__system__Instr
13e6c     0C 4E 05 F1 | 	add	fp, #12
13e70     A7 FA 61 FC | 	wrlong	result1, fp
13e74                 | '    comma=instr(1,line$,",")  
13e74                 | '    if comma>0  then 
13e74     0C 4E 85 F1 | 	sub	fp, #12
13e78     01 FA 15 F2 | 	cmp	result1, #1 wc
13e7c     68 00 90 CD |  if_b	jmp	#LR__1610
13e80     A7 12 02 FB | 	rdlong	arg01, fp
13e84     0C 4E 05 F1 | 	add	fp, #12
13e88     A7 14 02 FB | 	rdlong	arg02, fp
13e8c     0C 4E 85 F1 | 	sub	fp, #12
13e90     01 14 86 F1 | 	sub	arg02, #1
13e94     54 4B B1 FD | 	call	#__system__Left_S
13e98     04 4E 05 F1 | 	add	fp, #4
13e9c     A7 FA 61 FC | 	wrlong	result1, fp
13ea0     04 4E 85 F1 | 	sub	fp, #4
13ea4     A7 26 02 FB | 	rdlong	local01, fp
13ea8     13 13 02 F6 | 	mov	arg01, local01
13eac     09 29 02 F6 | 	mov	local02, arg01
13eb0     97 06 48 FB | 	callpa	#(@LR__1609-@LR__1608)>>2,fcache_load_ptr_
13eb4                 | LR__1608
13eb4     14 FB C9 FA | 	rdbyte	result1, local02 wz
13eb8     01 28 06 51 |  if_ne	add	local02, #1
13ebc     F4 FF 9F 5D |  if_ne	jmp	#LR__1608
13ec0                 | LR__1609
13ec0     09 29 82 F1 | 	sub	local02, arg01
13ec4     14 15 02 F6 | 	mov	arg02, local02
13ec8     0C 4E 05 F1 | 	add	fp, #12
13ecc     A7 16 02 FB | 	rdlong	arg03, fp
13ed0     0C 4E 85 F1 | 	sub	fp, #12
13ed4     0B 15 82 F1 | 	sub	arg02, arg03
13ed8     13 13 02 F6 | 	mov	arg01, local01
13edc     94 4B B1 FD | 	call	#__system__Right_S
13ee0     A7 FA 61 FC | 	wrlong	result1, fp
13ee4     28 00 90 FD | 	jmp	#LR__1611
13ee8                 | LR__1610
13ee8     A7 12 02 FB | 	rdlong	arg01, fp
13eec     8C 4F B1 FD | 	call	#__system__RTrim_S
13ef0     FD 12 02 F6 | 	mov	arg01, result1
13ef4     C4 4E B1 FD | 	call	#__system__LTrim_S
13ef8     04 4E 05 F1 | 	add	fp, #4
13efc     A7 FA 61 FC | 	wrlong	result1, fp
13f00     04 4E 85 F1 | 	sub	fp, #4
13f04     B7 01 00 FF 
13f08     8D 26 06 F6 | 	mov	local01, ##@LR__5907
13f0c     A7 26 62 FC | 	wrlong	local01, fp
13f10                 | LR__1611
13f10     30 4F 05 F1 | 	add	fp, #304
13f14     A7 26 02 FB | 	rdlong	local01, fp
13f18     02 26 66 F0 | 	shl	local01, #2
13f1c     04 4F 85 F1 | 	sub	fp, #260
13f20     A7 26 02 F1 | 	add	local01, fp
13f24     28 4E 85 F1 | 	sub	fp, #40
13f28     A7 FA 01 FB | 	rdlong	result1, fp
13f2c     13 FB 61 FC | 	wrlong	result1, local01
13f30     2C 4F 05 F1 | 	add	fp, #300
13f34     A7 26 02 FB | 	rdlong	local01, fp
13f38     01 26 86 F1 | 	sub	local01, #1
13f3c     A7 26 62 FC | 	wrlong	local01, fp
13f40     30 4F 85 F1 | 	sub	fp, #304
13f44     00 26 56 F2 | 	cmps	local01, #0 wc
13f48     18 00 90 CD |  if_b	jmp	#LR__1612
13f4c     A7 12 02 FB | 	rdlong	arg01, fp
13f50     B7 01 00 FF 
13f54     8E 14 06 F6 | 	mov	arg02, ##@LR__5908
13f58     38 2A B1 FD | 	call	#__system___string_cmp
13f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
13f60     F4 FE 9F 5D |  if_ne	jmp	#LR__1607
13f64                 | LR__1612
13f64     30 4F 05 F1 | 	add	fp, #304
13f68     A7 26 02 FB | 	rdlong	local01, fp
13f6c     30 4F 85 F1 | 	sub	fp, #304
13f70     00 26 56 F2 | 	cmps	local01, #0 wc
13f74     34 FE 9F 3D |  if_ae	jmp	#LR__1602
13f78                 | ' 
13f78                 | ' for i=0 to numpar-1
13f78     30 4F 05 F1 | 	add	fp, #304
13f7c     A7 00 68 FC | 	wrlong	#0, fp
13f80     28 4F 85 F1 | 	sub	fp, #296
13f84     A7 2A 02 FB | 	rdlong	local03, fp
13f88     08 4E 85 F1 | 	sub	fp, #8
13f8c                 | LR__1613
13f8c     30 4F 05 F1 | 	add	fp, #304
13f90     A7 2C 02 FB | 	rdlong	local04, fp
13f94     30 4F 85 F1 | 	sub	fp, #304
13f98     16 27 02 F6 | 	mov	local01, local04
13f9c     15 27 52 F2 | 	cmps	local01, local03 wc
13fa0     04 09 90 3D |  if_ae	jmp	#LR__1649
13fa4                 | ' 
13fa4                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
13fa4     30 4F 05 F1 | 	add	fp, #304
13fa8     A7 16 02 FB | 	rdlong	arg03, fp
13fac     02 16 66 F0 | 	shl	arg03, #2
13fb0     04 4F 85 F1 | 	sub	fp, #260
13fb4     A7 16 02 F1 | 	add	arg03, fp
13fb8     0B 13 02 FB | 	rdlong	arg01, arg03
13fbc     2C 4E 85 F1 | 	sub	fp, #44
13fc0     88 28 BF FD | 	call	#_isnum
13fc4     FD 2E 02 F6 | 	mov	local05, result1
13fc8     30 4F 05 F1 | 	add	fp, #304
13fcc     A7 16 02 FB | 	rdlong	arg03, fp
13fd0     02 16 66 F0 | 	shl	arg03, #2
13fd4     04 4F 85 F1 | 	sub	fp, #260
13fd8     A7 30 02 F6 | 	mov	local06, fp
13fdc     A7 16 02 F1 | 	add	arg03, fp
13fe0     0B 13 02 FB | 	rdlong	arg01, arg03
13fe4     2C 4E 85 F1 | 	sub	fp, #44
13fe8     4C 2C BF FD | 	call	#_isint
13fec     FD 2E 2A F5 | 	andn	local05, result1 wz
13ff0     52 00 00 5F 
13ff4     10 E5 05 51 |  if_ne	add	objptr, ##42256
13ff8     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
13ffc     52 00 00 5F 
14000     10 E5 85 51 |  if_ne	sub	objptr, ##42256
14004                 | '   if isint(args(i)) then r=result_int 
14004     30 4F 05 F1 | 	add	fp, #304
14008     A7 2E 02 FB | 	rdlong	local05, fp
1400c     02 2E 66 F0 | 	shl	local05, #2
14010     04 4F 85 F1 | 	sub	fp, #260
14014     A7 2E 02 F1 | 	add	local05, fp
14018     17 13 02 FB | 	rdlong	arg01, local05
1401c     2C 4E 85 F1 | 	sub	fp, #44
14020     14 2C BF FD | 	call	#_isint
14024     00 FA 0D F2 | 	cmp	result1, #0 wz
14028     52 00 00 5F 
1402c     10 E5 05 51 |  if_ne	add	objptr, ##42256
14030     F2 38 68 5C |  if_ne	wrlong	#28, objptr
14034     52 00 00 5F 
14038     10 E5 85 51 |  if_ne	sub	objptr, ##42256
1403c                 | '   if isdec(args(i)) then r=result_uint 
1403c     30 4F 05 F1 | 	add	fp, #304
14040     A7 2E 02 FB | 	rdlong	local05, fp
14044     02 2E 66 F0 | 	shl	local05, #2
14048     04 4F 85 F1 | 	sub	fp, #260
1404c     A7 2E 02 F1 | 	add	local05, fp
14050     17 13 02 FB | 	rdlong	arg01, local05
14054     2C 4E 85 F1 | 	sub	fp, #44
14058     80 2E BF FD | 	call	#_isdec
1405c     00 FA 0D F2 | 	cmp	result1, #0 wz
14060     52 00 00 5F 
14064     10 E5 05 51 |  if_ne	add	objptr, ##42256
14068     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
1406c     52 00 00 5F 
14070     10 E5 85 51 |  if_ne	sub	objptr, ##42256
14074                 | '   if not isnum(args(i)) then 
14074     30 4F 05 F1 | 	add	fp, #304
14078     A7 32 02 FB | 	rdlong	local07, fp
1407c     19 35 02 F6 | 	mov	local08, local07
14080     02 34 66 F0 | 	shl	local08, #2
14084     04 4F 85 F1 | 	sub	fp, #260
14088     A7 36 02 F6 | 	mov	local09, fp
1408c     A7 34 02 F1 | 	add	local08, fp
14090     1A 13 02 FB | 	rdlong	arg01, local08
14094     2C 4E 85 F1 | 	sub	fp, #44
14098     B0 27 BF FD | 	call	#_isnum
1409c     FD 2E 22 F6 | 	not	local05, result1
140a0     00 2E 0E F2 | 	cmp	local05, #0 wz
140a4     44 01 90 AD |  if_e	jmp	#LR__1618
140a8     52 00 00 FF 
140ac     10 E5 05 F1 | 	add	objptr, ##42256
140b0     F2 56 68 FC | 	wrlong	#43, objptr
140b4     52 00 00 FF 
140b8     10 E5 85 F1 | 	sub	objptr, ##42256
140bc     04 4E 05 F1 | 	add	fp, #4
140c0     A7 12 02 FB | 	rdlong	arg01, fp
140c4     04 4E 85 F1 | 	sub	fp, #4
140c8     09 29 02 F6 | 	mov	local02, arg01
140cc     97 06 48 FB | 	callpa	#(@LR__1615-@LR__1614)>>2,fcache_load_ptr_
140d0                 | LR__1614
140d0     14 FB C9 FA | 	rdbyte	result1, local02 wz
140d4     01 28 06 51 |  if_ne	add	local02, #1
140d8     F4 FF 9F 5D |  if_ne	jmp	#LR__1614
140dc                 | LR__1615
140dc     09 29 82 F1 | 	sub	local02, arg01
140e0     14 33 02 F6 | 	mov	local07, local02
140e4     38 4F 05 F1 | 	add	fp, #312
140e8     A7 32 62 FC | 	wrlong	local07, fp
140ec     52 00 00 FF 
140f0     98 E4 05 F1 | 	add	objptr, ##42136
140f4     F2 12 02 FB | 	rdlong	arg01, objptr
140f8     19 13 82 F1 | 	sub	arg01, local07
140fc     04 12 86 F1 | 	sub	arg01, #4
14100     03 12 26 F5 | 	andn	arg01, #3
14104     F2 12 62 FC | 	wrlong	arg01, objptr
14108     52 00 00 FF 
1410c     98 E4 85 F1 | 	sub	objptr, ##42136
14110     A7 14 02 FB | 	rdlong	arg02, fp
14114     38 4F 85 F1 | 	sub	fp, #312
14118     00 F0 B0 FD | 	call	#_pslpoke
1411c                 | '     pslpoke memtop,l
1411c                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
1411c     34 4F 05 F1 | 	add	fp, #308
14120     A7 02 68 FC | 	wrlong	#1, fp
14124     04 4E 05 F1 | 	add	fp, #4
14128     A7 38 02 FB | 	rdlong	local10, fp
1412c     38 4F 85 F1 | 	sub	fp, #312
14130     01 38 06 F1 | 	add	local10, #1
14134                 | LR__1616
14134     34 4F 05 F1 | 	add	fp, #308
14138     A7 2E 02 FB | 	rdlong	local05, fp
1413c     34 4F 85 F1 | 	sub	fp, #308
14140     1C 2F 52 F2 | 	cmps	local05, local10 wc
14144     84 00 90 3D |  if_ae	jmp	#LR__1617
14148     52 00 00 FF 
1414c     98 E4 05 F1 | 	add	objptr, ##42136
14150     F2 32 02 FB | 	rdlong	local07, objptr
14154     52 00 00 FF 
14158     98 E4 85 F1 | 	sub	objptr, ##42136
1415c     03 32 06 F1 | 	add	local07, #3
14160     34 4F 05 F1 | 	add	fp, #308
14164     A7 3A 02 FB | 	rdlong	local11, fp
14168     1D 33 02 F1 | 	add	local07, local11
1416c     04 4E 85 F1 | 	sub	fp, #4
14170     A7 3C 02 FB | 	rdlong	local12, fp
14174     02 3C 66 F0 | 	shl	local12, #2
14178     04 4F 85 F1 | 	sub	fp, #260
1417c     A7 3E 02 F6 | 	mov	local13, fp
14180     A7 3C 02 F1 | 	add	local12, fp
14184     1E 13 02 FB | 	rdlong	arg01, local12
14188     2C 4E 85 F1 | 	sub	fp, #44
1418c     01 40 06 F6 | 	mov	local14, #1
14190     1D 15 02 F6 | 	mov	arg02, local11
14194     01 16 06 F6 | 	mov	arg03, #1
14198     68 49 B1 FD | 	call	#__system__Mid_S
1419c     FD 14 C2 FA | 	rdbyte	arg02, result1
141a0     19 13 02 F6 | 	mov	arg01, local07
141a4     04 F0 B0 FD | 	call	#_pspoke
141a8     34 4F 05 F1 | 	add	fp, #308
141ac     A7 34 02 FB | 	rdlong	local08, fp
141b0     1A 33 02 F6 | 	mov	local07, local08
141b4     1A 31 02 F6 | 	mov	local06, local08
141b8     18 37 02 F6 | 	mov	local09, local06
141bc     01 36 06 F1 | 	add	local09, #1
141c0     A7 36 62 FC | 	wrlong	local09, fp
141c4     34 4F 85 F1 | 	sub	fp, #308
141c8     68 FF 9F FD | 	jmp	#LR__1616
141cc                 | LR__1617
141cc     52 00 00 FF 
141d0     98 E4 05 F1 | 	add	objptr, ##42136
141d4     F2 2E 02 FB | 	rdlong	local05, objptr
141d8     52 00 00 FF 
141dc     98 E4 85 F1 | 	sub	objptr, ##42136
141e0     10 4E 05 F1 | 	add	fp, #16
141e4     A7 2E 62 FC | 	wrlong	local05, fp
141e8     10 4E 85 F1 | 	sub	fp, #16
141ec                 | LR__1618
141ec     EC 93 BF FD | 	call	#_pop
141f0     FE 2E 02 F6 | 	mov	local05, result2
141f4     FF 42 02 F6 | 	mov	local15, result3
141f8     1C 4E 05 F1 | 	add	fp, #28
141fc     A7 FA 61 FC | 	wrlong	result1, fp
14200     04 4E 05 F1 | 	add	fp, #4
14204     A7 2E 62 FC | 	wrlong	local05, fp
14208     04 4E 05 F1 | 	add	fp, #4
1420c     A7 42 62 FC | 	wrlong	local15, fp
14210     04 4E 85 F1 | 	sub	fp, #4
14214     A7 44 02 FB | 	rdlong	local16, fp
14218     0C 4E 85 F1 | 	sub	fp, #12
1421c     A7 44 62 FC | 	wrlong	local16, fp
14220                 | '   t1=pop() : vartype=t1.result.twowords(1)
14220                 | '   select case vartype
14220     14 4E 85 F1 | 	sub	fp, #20
14224     22 47 0A F6 | 	mov	local17, local16 wz
14228     64 00 90 AD |  if_e	jmp	#LR__1619
1422c     00 47 0E F2 | 	cmp	local17, #256 wz
14230     6C 00 90 AD |  if_e	jmp	#LR__1620
14234     01 47 0E F2 | 	cmp	local17, #257 wz
14238     74 00 90 AD |  if_e	jmp	#LR__1621
1423c     02 47 0E F2 | 	cmp	local17, #258 wz
14240     7C 00 90 AD |  if_e	jmp	#LR__1622
14244     03 47 0E F2 | 	cmp	local17, #259 wz
14248     84 00 90 AD |  if_e	jmp	#LR__1623
1424c     04 47 0E F2 | 	cmp	local17, #260 wz
14250     8C 00 90 AD |  if_e	jmp	#LR__1624
14254     05 47 0E F2 | 	cmp	local17, #261 wz
14258     94 00 90 AD |  if_e	jmp	#LR__1625
1425c     06 47 0E F2 | 	cmp	local17, #262 wz
14260     9C 00 90 AD |  if_e	jmp	#LR__1626
14264     07 47 0E F2 | 	cmp	local17, #263 wz
14268     A4 00 90 AD |  if_e	jmp	#LR__1627
1426c     08 47 0E F2 | 	cmp	local17, #264 wz
14270     AC 00 90 AD |  if_e	jmp	#LR__1628
14274     09 47 0E F2 | 	cmp	local17, #265 wz
14278     B4 00 90 AD |  if_e	jmp	#LR__1629
1427c     0A 47 0E F2 | 	cmp	local17, #266 wz
14280     BC 00 90 AD |  if_e	jmp	#LR__1630
14284     0B 47 0E F2 | 	cmp	local17, #267 wz
14288     C4 00 90 AD |  if_e	jmp	#LR__1631
1428c     D0 00 90 FD | 	jmp	#LR__1632
14290                 | LR__1619
14290     18 4E 05 F1 | 	add	fp, #24
14294     A7 18 68 FC | 	wrlong	#12, fp
14298     18 4E 85 F1 | 	sub	fp, #24
1429c     CC 00 90 FD | 	jmp	#LR__1633
142a0                 | LR__1620
142a0     18 4E 05 F1 | 	add	fp, #24
142a4     A7 18 68 FC | 	wrlong	#12, fp
142a8     18 4E 85 F1 | 	sub	fp, #24
142ac     BC 00 90 FD | 	jmp	#LR__1633
142b0                 | LR__1621
142b0     18 4E 05 F1 | 	add	fp, #24
142b4     A7 02 68 FC | 	wrlong	#1, fp
142b8     18 4E 85 F1 | 	sub	fp, #24
142bc     AC 00 90 FD | 	jmp	#LR__1633
142c0                 | LR__1622
142c0     18 4E 05 F1 | 	add	fp, #24
142c4     A7 02 68 FC | 	wrlong	#1, fp
142c8     18 4E 85 F1 | 	sub	fp, #24
142cc     9C 00 90 FD | 	jmp	#LR__1633
142d0                 | LR__1623
142d0     18 4E 05 F1 | 	add	fp, #24
142d4     A7 04 68 FC | 	wrlong	#2, fp
142d8     18 4E 85 F1 | 	sub	fp, #24
142dc     8C 00 90 FD | 	jmp	#LR__1633
142e0                 | LR__1624
142e0     18 4E 05 F1 | 	add	fp, #24
142e4     A7 04 68 FC | 	wrlong	#2, fp
142e8     18 4E 85 F1 | 	sub	fp, #24
142ec     7C 00 90 FD | 	jmp	#LR__1633
142f0                 | LR__1625
142f0     18 4E 05 F1 | 	add	fp, #24
142f4     A7 08 68 FC | 	wrlong	#4, fp
142f8     18 4E 85 F1 | 	sub	fp, #24
142fc     6C 00 90 FD | 	jmp	#LR__1633
14300                 | LR__1626
14300     18 4E 05 F1 | 	add	fp, #24
14304     A7 08 68 FC | 	wrlong	#4, fp
14308     18 4E 85 F1 | 	sub	fp, #24
1430c     5C 00 90 FD | 	jmp	#LR__1633
14310                 | LR__1627
14310     18 4E 05 F1 | 	add	fp, #24
14314     A7 10 68 FC | 	wrlong	#8, fp
14318     18 4E 85 F1 | 	sub	fp, #24
1431c     4C 00 90 FD | 	jmp	#LR__1633
14320                 | LR__1628
14320     18 4E 05 F1 | 	add	fp, #24
14324     A7 10 68 FC | 	wrlong	#8, fp
14328     18 4E 85 F1 | 	sub	fp, #24
1432c     3C 00 90 FD | 	jmp	#LR__1633
14330                 | LR__1629
14330     18 4E 05 F1 | 	add	fp, #24
14334     A7 0C 68 FC | 	wrlong	#6, fp
14338     18 4E 85 F1 | 	sub	fp, #24
1433c     2C 00 90 FD | 	jmp	#LR__1633
14340                 | LR__1630
14340     18 4E 05 F1 | 	add	fp, #24
14344     A7 10 68 FC | 	wrlong	#8, fp
14348     18 4E 85 F1 | 	sub	fp, #24
1434c     1C 00 90 FD | 	jmp	#LR__1633
14350                 | LR__1631
14350     18 4E 05 F1 | 	add	fp, #24
14354     A7 0A 68 FC | 	wrlong	#5, fp
14358     18 4E 85 F1 | 	sub	fp, #24
1435c     0C 00 90 FD | 	jmp	#LR__1633
14360                 | LR__1632
14360     18 4E 05 F1 | 	add	fp, #24
14364     A7 18 68 FC | 	wrlong	#12, fp
14368     18 4E 85 F1 | 	sub	fp, #24
1436c                 | LR__1633
1436c                 | '   if esize=12 andalso t1.result.uresult<$80000 then
1436c     18 4E 05 F1 | 	add	fp, #24
14370     A7 44 02 FB | 	rdlong	local16, fp
14374     18 4E 85 F1 | 	sub	fp, #24
14378     0C 44 0E F2 | 	cmp	local16, #12 wz
1437c     74 01 90 5D |  if_ne	jmp	#LR__1638
14380     1C 4E 05 F1 | 	add	fp, #28
14384     A7 32 02 FB | 	rdlong	local07, fp
14388     1C 4E 85 F1 | 	sub	fp, #28
1438c     00 04 00 FF 
14390     00 32 16 F2 | 	cmp	local07, ##524288 wc
14394     5C 01 90 3D |  if_ae	jmp	#LR__1638
14398                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
14398     52 00 00 FF 
1439c     10 E5 05 F1 | 	add	objptr, ##42256
143a0     F2 44 02 FB | 	rdlong	local16, objptr
143a4     52 00 00 FF 
143a8     10 E5 85 F1 | 	sub	objptr, ##42256
143ac     1C 44 0E F2 | 	cmp	local16, #28 wz
143b0     38 00 90 5D |  if_ne	jmp	#LR__1634
143b4     1C 4E 05 F1 | 	add	fp, #28
143b8     A7 44 02 FB | 	rdlong	local16, fp
143bc     14 4F 05 F1 | 	add	fp, #276
143c0     A7 32 02 FB | 	rdlong	local07, fp
143c4     19 35 02 F6 | 	mov	local08, local07
143c8     02 34 66 F0 | 	shl	local08, #2
143cc     04 4F 85 F1 | 	sub	fp, #260
143d0     A7 36 02 F6 | 	mov	local09, fp
143d4     A7 34 02 F1 | 	add	local08, fp
143d8     1A 13 02 FB | 	rdlong	arg01, local08
143dc     00 14 06 F6 | 	mov	arg02, #0
143e0     2C 4E 85 F1 | 	sub	fp, #44
143e4     78 5A B1 FD | 	call	#__system____builtin_atoi
143e8     22 FB 61 FC | 	wrlong	result1, local16
143ec                 | LR__1634
143ec                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
143ec     52 00 00 FF 
143f0     10 E5 05 F1 | 	add	objptr, ##42256
143f4     F2 44 02 FB | 	rdlong	local16, objptr
143f8     52 00 00 FF 
143fc     10 E5 85 F1 | 	sub	objptr, ##42256
14400     1D 44 0E F2 | 	cmp	local16, #29 wz
14404     38 00 90 5D |  if_ne	jmp	#LR__1635
14408     1C 4E 05 F1 | 	add	fp, #28
1440c     A7 44 02 FB | 	rdlong	local16, fp
14410     14 4F 05 F1 | 	add	fp, #276
14414     A7 32 02 FB | 	rdlong	local07, fp
14418     19 35 02 F6 | 	mov	local08, local07
1441c     02 34 66 F0 | 	shl	local08, #2
14420     04 4F 85 F1 | 	sub	fp, #260
14424     A7 36 02 F6 | 	mov	local09, fp
14428     A7 34 02 F1 | 	add	local08, fp
1442c     1A 13 02 FB | 	rdlong	arg01, local08
14430     00 14 06 F6 | 	mov	arg02, #0
14434     2C 4E 85 F1 | 	sub	fp, #44
14438     24 5A B1 FD | 	call	#__system____builtin_atoi
1443c     22 FB 61 FC | 	wrlong	result1, local16
14440                 | LR__1635
14440                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
14440     52 00 00 FF 
14444     10 E5 05 F1 | 	add	objptr, ##42256
14448     F2 44 02 FB | 	rdlong	local16, objptr
1444c     52 00 00 FF 
14450     10 E5 85 F1 | 	sub	objptr, ##42256
14454     1E 44 0E F2 | 	cmp	local16, #30 wz
14458     3C 00 90 5D |  if_ne	jmp	#LR__1636
1445c     30 4F 05 F1 | 	add	fp, #304
14460     A7 32 02 FB | 	rdlong	local07, fp
14464     02 32 66 F0 | 	shl	local07, #2
14468     04 4F 85 F1 | 	sub	fp, #260
1446c     A7 34 02 F6 | 	mov	local08, fp
14470     A7 32 02 F1 | 	add	local07, fp
14474     19 13 02 FB | 	rdlong	arg01, local07
14478     2C 4E 85 F1 | 	sub	fp, #44
1447c     74 5B B1 FD | 	call	#__system____builtin_atof
14480     28 4E 05 F1 | 	add	fp, #40
14484     A7 FA 61 FC | 	wrlong	result1, fp
14488     0C 4E 85 F1 | 	sub	fp, #12
1448c     A7 44 02 FB | 	rdlong	local16, fp
14490     1C 4E 85 F1 | 	sub	fp, #28
14494     22 FB 61 FC | 	wrlong	result1, local16
14498                 | LR__1636
14498                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
14498     52 00 00 FF 
1449c     10 E5 05 F1 | 	add	objptr, ##42256
144a0     F2 44 02 FB | 	rdlong	local16, objptr
144a4     52 00 00 FF 
144a8     10 E5 85 F1 | 	sub	objptr, ##42256
144ac     2B 44 0E F2 | 	cmp	local16, #43 wz
144b0     18 00 90 5D |  if_ne	jmp	#LR__1637
144b4     1C 4E 05 F1 | 	add	fp, #28
144b8     A7 12 02 FB | 	rdlong	arg01, fp
144bc     0C 4E 85 F1 | 	sub	fp, #12
144c0     A7 14 02 FB | 	rdlong	arg02, fp
144c4     10 4E 85 F1 | 	sub	fp, #16
144c8     09 15 62 FC | 	wrlong	arg02, arg01
144cc                 | LR__1637
144cc     1C 4E 05 F1 | 	add	fp, #28
144d0     A7 12 02 FB | 	rdlong	arg01, fp
144d4     1C 4E 85 F1 | 	sub	fp, #28
144d8     08 12 06 F1 | 	add	arg01, #8
144dc     52 00 00 FF 
144e0     10 E5 05 F1 | 	add	objptr, ##42256
144e4     F2 14 02 FB | 	rdlong	arg02, objptr
144e8     52 00 00 FF 
144ec     10 E5 85 F1 | 	sub	objptr, ##42256
144f0     09 15 62 FC | 	wrlong	arg02, arg01
144f4                 | LR__1638
144f4                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
144f4     18 4E 05 F1 | 	add	fp, #24
144f8     A7 44 02 FB | 	rdlong	local16, fp
144fc     18 4E 85 F1 | 	sub	fp, #24
14500     0C 44 0E F2 | 	cmp	local16, #12 wz
14504     94 01 90 5D |  if_ne	jmp	#LR__1643
14508     1C 4E 05 F1 | 	add	fp, #28
1450c     A7 32 02 FB | 	rdlong	local07, fp
14510     1C 4E 85 F1 | 	sub	fp, #28
14514     00 04 00 FF 
14518     00 32 16 F2 | 	cmp	local07, ##524288 wc
1451c     7C 01 90 CD |  if_b	jmp	#LR__1643
14520                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
14520     52 00 00 FF 
14524     10 E5 05 F1 | 	add	objptr, ##42256
14528     F2 44 02 FB | 	rdlong	local16, objptr
1452c     52 00 00 FF 
14530     10 E5 85 F1 | 	sub	objptr, ##42256
14534     1C 44 0E F2 | 	cmp	local16, #28 wz
14538     40 00 90 5D |  if_ne	jmp	#LR__1639
1453c     1C 4E 05 F1 | 	add	fp, #28
14540     A7 44 02 FB | 	rdlong	local16, fp
14544     14 4F 05 F1 | 	add	fp, #276
14548     A7 32 02 FB | 	rdlong	local07, fp
1454c     19 35 02 F6 | 	mov	local08, local07
14550     02 34 66 F0 | 	shl	local08, #2
14554     04 4F 85 F1 | 	sub	fp, #260
14558     A7 36 02 F6 | 	mov	local09, fp
1455c     A7 34 02 F1 | 	add	local08, fp
14560     1A 13 02 FB | 	rdlong	arg01, local08
14564     00 14 06 F6 | 	mov	arg02, #0
14568     2C 4E 85 F1 | 	sub	fp, #44
1456c     F0 58 B1 FD | 	call	#__system____builtin_atoi
14570     FD 14 02 F6 | 	mov	arg02, result1
14574     22 13 02 F6 | 	mov	arg01, local16
14578     A0 EB B0 FD | 	call	#_pslpoke
1457c                 | LR__1639
1457c                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
1457c     52 00 00 FF 
14580     10 E5 05 F1 | 	add	objptr, ##42256
14584     F2 44 02 FB | 	rdlong	local16, objptr
14588     52 00 00 FF 
1458c     10 E5 85 F1 | 	sub	objptr, ##42256
14590     1D 44 0E F2 | 	cmp	local16, #29 wz
14594     40 00 90 5D |  if_ne	jmp	#LR__1640
14598     1C 4E 05 F1 | 	add	fp, #28
1459c     A7 44 02 FB | 	rdlong	local16, fp
145a0     14 4F 05 F1 | 	add	fp, #276
145a4     A7 32 02 FB | 	rdlong	local07, fp
145a8     19 35 02 F6 | 	mov	local08, local07
145ac     02 34 66 F0 | 	shl	local08, #2
145b0     04 4F 85 F1 | 	sub	fp, #260
145b4     A7 36 02 F6 | 	mov	local09, fp
145b8     A7 34 02 F1 | 	add	local08, fp
145bc     1A 13 02 FB | 	rdlong	arg01, local08
145c0     00 14 06 F6 | 	mov	arg02, #0
145c4     2C 4E 85 F1 | 	sub	fp, #44
145c8     94 58 B1 FD | 	call	#__system____builtin_atoi
145cc     FD 14 02 F6 | 	mov	arg02, result1
145d0     22 13 02 F6 | 	mov	arg01, local16
145d4     44 EB B0 FD | 	call	#_pslpoke
145d8                 | LR__1640
145d8                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
145d8     52 00 00 FF 
145dc     10 E5 05 F1 | 	add	objptr, ##42256
145e0     F2 44 02 FB | 	rdlong	local16, objptr
145e4     52 00 00 FF 
145e8     10 E5 85 F1 | 	sub	objptr, ##42256
145ec     1E 44 0E F2 | 	cmp	local16, #30 wz
145f0     4C 00 90 5D |  if_ne	jmp	#LR__1641
145f4     30 4F 05 F1 | 	add	fp, #304
145f8     A7 32 02 FB | 	rdlong	local07, fp
145fc     02 32 66 F0 | 	shl	local07, #2
14600     04 4F 85 F1 | 	sub	fp, #260
14604     A7 34 02 F6 | 	mov	local08, fp
14608     A7 32 02 F1 | 	add	local07, fp
1460c     19 13 02 FB | 	rdlong	arg01, local07
14610     2C 4E 85 F1 | 	sub	fp, #44
14614     DC 59 B1 FD | 	call	#__system____builtin_atof
14618     28 4E 05 F1 | 	add	fp, #40
1461c     A7 FA 61 FC | 	wrlong	result1, fp
14620     0C 4E 85 F1 | 	sub	fp, #12
14624     A7 44 02 FB | 	rdlong	local16, fp
14628     0C 4E 05 F1 | 	add	fp, #12
1462c     A7 12 02 F6 | 	mov	arg01, fp
14630     28 4E 85 F1 | 	sub	fp, #40
14634     09 15 02 FB | 	rdlong	arg02, arg01
14638     22 13 02 F6 | 	mov	arg01, local16
1463c     DC EA B0 FD | 	call	#_pslpoke
14640                 | LR__1641
14640                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
14640     52 00 00 FF 
14644     10 E5 05 F1 | 	add	objptr, ##42256
14648     F2 44 02 FB | 	rdlong	local16, objptr
1464c     52 00 00 FF 
14650     10 E5 85 F1 | 	sub	objptr, ##42256
14654     2B 44 0E F2 | 	cmp	local16, #43 wz
14658     18 00 90 5D |  if_ne	jmp	#LR__1642
1465c     1C 4E 05 F1 | 	add	fp, #28
14660     A7 12 02 FB | 	rdlong	arg01, fp
14664     0C 4E 85 F1 | 	sub	fp, #12
14668     A7 14 02 FB | 	rdlong	arg02, fp
1466c     10 4E 85 F1 | 	sub	fp, #16
14670     A8 EA B0 FD | 	call	#_pslpoke
14674                 | LR__1642
14674     1C 4E 05 F1 | 	add	fp, #28
14678     A7 12 02 FB | 	rdlong	arg01, fp
1467c     1C 4E 85 F1 | 	sub	fp, #28
14680     08 12 06 F1 | 	add	arg01, #8
14684     52 00 00 FF 
14688     10 E5 05 F1 | 	add	objptr, ##42256
1468c     F2 14 02 FB | 	rdlong	arg02, objptr
14690     52 00 00 FF 
14694     10 E5 85 F1 | 	sub	objptr, ##42256
14698     80 EA B0 FD | 	call	#_pslpoke
1469c                 | LR__1643
1469c                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
1469c     18 4E 05 F1 | 	add	fp, #24
146a0     A7 44 02 FB | 	rdlong	local16, fp
146a4     18 4E 85 F1 | 	sub	fp, #24
146a8     05 44 0E F2 | 	cmp	local16, #5 wz
146ac     52 00 00 AF 
146b0     10 E5 05 A1 |  if_e	add	objptr, ##42256
146b4     F2 42 02 AB |  if_e	rdlong	local15, objptr
146b8     52 00 00 AF 
146bc     10 E5 85 A1 |  if_e	sub	objptr, ##42256
146c0     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
146c4     18 00 90 5D |  if_ne	jmp	#LR__1644
146c8     1C 4E 05 F1 | 	add	fp, #28
146cc     A7 12 02 FB | 	rdlong	arg01, fp
146d0     0C 4E 85 F1 | 	sub	fp, #12
146d4     A7 14 02 FB | 	rdlong	arg02, fp
146d8     10 4E 85 F1 | 	sub	fp, #16
146dc     3C EA B0 FD | 	call	#_pslpoke
146e0                 | LR__1644
146e0                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
146e0     18 4E 05 F1 | 	add	fp, #24
146e4     A7 44 02 FB | 	rdlong	local16, fp
146e8     18 4E 85 F1 | 	sub	fp, #24
146ec     04 44 0E F2 | 	cmp	local16, #4 wz
146f0     54 00 90 5D |  if_ne	jmp	#LR__1645
146f4     52 00 00 FF 
146f8     10 E5 05 F1 | 	add	objptr, ##42256
146fc     F2 42 02 FB | 	rdlong	local15, objptr
14700     52 00 00 FF 
14704     10 E5 85 F1 | 	sub	objptr, ##42256
14708     2B 42 0E F2 | 	cmp	local15, #43 wz
1470c     38 00 90 AD |  if_e	jmp	#LR__1645
14710     1C 4E 05 F1 | 	add	fp, #28
14714     A7 44 02 FB | 	rdlong	local16, fp
14718     14 4F 05 F1 | 	add	fp, #276
1471c     A7 34 02 FB | 	rdlong	local08, fp
14720     02 34 66 F0 | 	shl	local08, #2
14724     04 4F 85 F1 | 	sub	fp, #260
14728     A7 34 02 F1 | 	add	local08, fp
1472c     1A 13 02 FB | 	rdlong	arg01, local08
14730     00 14 06 F6 | 	mov	arg02, #0
14734     2C 4E 85 F1 | 	sub	fp, #44
14738     24 57 B1 FD | 	call	#__system____builtin_atoi
1473c     FD 14 02 F6 | 	mov	arg02, result1
14740     22 13 02 F6 | 	mov	arg01, local16
14744     D4 E9 B0 FD | 	call	#_pslpoke
14748                 | LR__1645
14748                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
14748     18 4E 05 F1 | 	add	fp, #24
1474c     A7 44 02 FB | 	rdlong	local16, fp
14750     18 4E 85 F1 | 	sub	fp, #24
14754     02 44 0E F2 | 	cmp	local16, #2 wz
14758     54 00 90 5D |  if_ne	jmp	#LR__1646
1475c     52 00 00 FF 
14760     10 E5 05 F1 | 	add	objptr, ##42256
14764     F2 42 02 FB | 	rdlong	local15, objptr
14768     52 00 00 FF 
1476c     10 E5 85 F1 | 	sub	objptr, ##42256
14770     2B 42 0E F2 | 	cmp	local15, #43 wz
14774     38 00 90 AD |  if_e	jmp	#LR__1646
14778     1C 4E 05 F1 | 	add	fp, #28
1477c     A7 44 02 FB | 	rdlong	local16, fp
14780     14 4F 05 F1 | 	add	fp, #276
14784     A7 34 02 FB | 	rdlong	local08, fp
14788     02 34 66 F0 | 	shl	local08, #2
1478c     04 4F 85 F1 | 	sub	fp, #260
14790     A7 34 02 F1 | 	add	local08, fp
14794     1A 13 02 FB | 	rdlong	arg01, local08
14798     00 14 06 F6 | 	mov	arg02, #0
1479c     2C 4E 85 F1 | 	sub	fp, #44
147a0     BC 56 B1 FD | 	call	#__system____builtin_atoi
147a4     FD 14 02 F6 | 	mov	arg02, result1
147a8     22 13 02 F6 | 	mov	arg01, local16
147ac     B4 E9 B0 FD | 	call	#_psdpoke
147b0                 | LR__1646
147b0                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
147b0     18 4E 05 F1 | 	add	fp, #24
147b4     A7 44 02 FB | 	rdlong	local16, fp
147b8     18 4E 85 F1 | 	sub	fp, #24
147bc     01 44 0E F2 | 	cmp	local16, #1 wz
147c0     54 00 90 5D |  if_ne	jmp	#LR__1647
147c4     52 00 00 FF 
147c8     10 E5 05 F1 | 	add	objptr, ##42256
147cc     F2 42 02 FB | 	rdlong	local15, objptr
147d0     52 00 00 FF 
147d4     10 E5 85 F1 | 	sub	objptr, ##42256
147d8     2B 42 0E F2 | 	cmp	local15, #43 wz
147dc     38 00 90 AD |  if_e	jmp	#LR__1647
147e0     1C 4E 05 F1 | 	add	fp, #28
147e4     A7 44 02 FB | 	rdlong	local16, fp
147e8     14 4F 05 F1 | 	add	fp, #276
147ec     A7 34 02 FB | 	rdlong	local08, fp
147f0     02 34 66 F0 | 	shl	local08, #2
147f4     04 4F 85 F1 | 	sub	fp, #260
147f8     A7 34 02 F1 | 	add	local08, fp
147fc     1A 13 02 FB | 	rdlong	arg01, local08
14800     00 14 06 F6 | 	mov	arg02, #0
14804     2C 4E 85 F1 | 	sub	fp, #44
14808     54 56 B1 FD | 	call	#__system____builtin_atoi
1480c     FD 14 02 F6 | 	mov	arg02, result1
14810     22 13 02 F6 | 	mov	arg01, local16
14814     94 E9 B0 FD | 	call	#_pspoke
14818                 | LR__1647
14818                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
14818     18 4E 05 F1 | 	add	fp, #24
1481c     A7 44 02 FB | 	rdlong	local16, fp
14820     18 4E 85 F1 | 	sub	fp, #24
14824     06 44 0E F2 | 	cmp	local16, #6 wz
14828     64 00 90 5D |  if_ne	jmp	#LR__1648
1482c     52 00 00 FF 
14830     10 E5 05 F1 | 	add	objptr, ##42256
14834     F2 42 02 FB | 	rdlong	local15, objptr
14838     52 00 00 FF 
1483c     10 E5 85 F1 | 	sub	objptr, ##42256
14840     2B 42 0E F2 | 	cmp	local15, #43 wz
14844     48 00 90 AD |  if_e	jmp	#LR__1648
14848     30 4F 05 F1 | 	add	fp, #304
1484c     A7 32 02 FB | 	rdlong	local07, fp
14850     02 32 66 F0 | 	shl	local07, #2
14854     04 4F 85 F1 | 	sub	fp, #260
14858     A7 32 02 F1 | 	add	local07, fp
1485c     19 13 02 FB | 	rdlong	arg01, local07
14860     2C 4E 85 F1 | 	sub	fp, #44
14864     8C 57 B1 FD | 	call	#__system____builtin_atof
14868     28 4E 05 F1 | 	add	fp, #40
1486c     A7 FA 61 FC | 	wrlong	result1, fp
14870     0C 4E 85 F1 | 	sub	fp, #12
14874     A7 44 02 FB | 	rdlong	local16, fp
14878     0C 4E 05 F1 | 	add	fp, #12
1487c     A7 12 02 F6 | 	mov	arg01, fp
14880     28 4E 85 F1 | 	sub	fp, #40
14884     09 15 02 FB | 	rdlong	arg02, arg01
14888     22 13 02 F6 | 	mov	arg01, local16
1488c     8C E8 B0 FD | 	call	#_pslpoke
14890                 | LR__1648
14890     30 4F 05 F1 | 	add	fp, #304
14894     A7 42 02 FB | 	rdlong	local15, fp
14898     01 42 06 F1 | 	add	local15, #1
1489c     A7 42 62 FC | 	wrlong	local15, fp
148a0     30 4F 85 F1 | 	sub	fp, #304
148a4     E4 F6 9F FD | 	jmp	#LR__1613
148a8                 | LR__1649
148a8                 | LR__1650
148a8     A7 F0 03 F6 | 	mov	ptra, fp
148ac     B2 00 A0 FD | 	call	#popregs_
148b0                 | _do_input_ret
148b0     2D 00 64 FD | 	ret
148b4                 | 
148b4                 | ' 
148b4                 | ' ' ----------------  left$
148b4                 | ' 
148b4                 | ' sub do_left
148b4                 | _do_left
148b4     00 4A 05 F6 | 	mov	COUNT_, #0
148b8     A8 00 A0 FD | 	call	#pushregs_
148bc     14 F0 07 F1 | 	add	ptra, #20
148c0     4A 00 00 FF 
148c4     80 E4 05 F1 | 	add	objptr, ##38016
148c8     F2 16 02 FB | 	rdlong	arg03, objptr
148cc     0B 15 02 F6 | 	mov	arg02, arg03
148d0     01 14 66 F0 | 	shl	arg02, #1
148d4     0B 15 02 F1 | 	add	arg02, arg03
148d8     02 14 66 F0 | 	shl	arg02, #2
148dc     03 00 00 FF 
148e0     04 E4 85 F1 | 	sub	objptr, ##1540
148e4     F2 14 02 F1 | 	add	arg02, objptr
148e8     0A 17 02 FB | 	rdlong	arg03, arg02
148ec     0C 4E 05 F1 | 	add	fp, #12
148f0     A7 16 62 FC | 	wrlong	arg03, fp
148f4                 | ' 
148f4                 | ' numpar=compiledline(lineptr_e).result.uresult
148f4                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
148f4     0C 4E 85 F1 | 	sub	fp, #12
148f8     02 16 0E F2 | 	cmp	arg03, #2 wz
148fc     47 00 00 FF 
14900     7C E4 85 F1 | 	sub	objptr, ##36476
14904     40 00 90 AD |  if_e	jmp	#LR__1660
14908     00 12 06 F6 | 	mov	arg01, #0
1490c     00 7D B1 FD | 	call	#__system___getiolock_0606
14910     FD 12 02 F6 | 	mov	arg01, result1
14914     54 20 B1 FD | 	call	#__system___lockmem
14918     B7 01 00 FF 
1491c     8F 14 06 F6 | 	mov	arg02, ##@LR__5909
14920     00 12 06 F6 | 	mov	arg01, #0
14924     00 16 06 F6 | 	mov	arg03, #0
14928     38 2D B1 FD | 	call	#__system___basic_print_string
1492c     00 12 06 F6 | 	mov	arg01, #0
14930     DC 7C B1 FD | 	call	#__system___getiolock_0606
14934     FD 00 68 FC | 	wrlong	#0, result1
14938     27 12 06 F6 | 	mov	arg01, #39
1493c     00 14 06 F6 | 	mov	arg02, #0
14940     38 E6 B0 FD | 	call	#_printerror
14944     EC 00 90 FD | 	jmp	#LR__1663
14948                 | LR__1660
14948     90 8C BF FD | 	call	#_pop
1494c     FF 16 02 F6 | 	mov	arg03, result3
14950     A7 FA 61 FC | 	wrlong	result1, fp
14954     04 4E 05 F1 | 	add	fp, #4
14958     A7 FC 61 FC | 	wrlong	result2, fp
1495c     04 4E 05 F1 | 	add	fp, #4
14960     A7 16 62 FC | 	wrlong	arg03, fp
14964     08 4E 85 F1 | 	sub	fp, #8
14968     A7 12 02 F6 | 	mov	arg01, fp
1496c     50 8E BF FD | 	call	#_converttoint
14970     FD 16 02 F6 | 	mov	arg03, result1
14974     10 4E 05 F1 | 	add	fp, #16
14978     A7 16 62 FC | 	wrlong	arg03, fp
1497c     10 4E 85 F1 | 	sub	fp, #16
14980     58 8C BF FD | 	call	#_pop
14984     FF 16 02 F6 | 	mov	arg03, result3
14988     A7 FA 61 FC | 	wrlong	result1, fp
1498c     04 4E 05 F1 | 	add	fp, #4
14990     A7 FC 61 FC | 	wrlong	result2, fp
14994     04 4E 05 F1 | 	add	fp, #4
14998     A7 16 62 FC | 	wrlong	arg03, fp
1499c                 | ' t1=pop() : arg=converttoint(t1)
1499c                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1499c     08 4E 85 F1 | 	sub	fp, #8
149a0     2B 16 0E F2 | 	cmp	arg03, #43 wz
149a4     18 00 90 5D |  if_ne	jmp	#LR__1661
149a8     A7 12 02 FB | 	rdlong	arg01, fp
149ac     A4 8D BF FD | 	call	#_convertstring
149b0     A7 FA 61 FC | 	wrlong	result1, fp
149b4     08 4E 05 F1 | 	add	fp, #8
149b8     A7 3E 68 FC | 	wrlong	#31, fp
149bc     08 4E 85 F1 | 	sub	fp, #8
149c0                 | LR__1661
149c0                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
149c0     08 4E 05 F1 | 	add	fp, #8
149c4     A7 16 02 FB | 	rdlong	arg03, fp
149c8     08 4E 85 F1 | 	sub	fp, #8
149cc     1F 16 0E F2 | 	cmp	arg03, #31 wz
149d0     40 00 90 AD |  if_e	jmp	#LR__1662
149d4     00 12 06 F6 | 	mov	arg01, #0
149d8     34 7C B1 FD | 	call	#__system___getiolock_0606
149dc     FD 12 02 F6 | 	mov	arg01, result1
149e0     88 1F B1 FD | 	call	#__system___lockmem
149e4     B7 01 00 FF 
149e8     97 14 06 F6 | 	mov	arg02, ##@LR__5910
149ec     00 12 06 F6 | 	mov	arg01, #0
149f0     00 16 06 F6 | 	mov	arg03, #0
149f4     6C 2C B1 FD | 	call	#__system___basic_print_string
149f8     00 12 06 F6 | 	mov	arg01, #0
149fc     10 7C B1 FD | 	call	#__system___getiolock_0606
14a00     FD 00 68 FC | 	wrlong	#0, result1
14a04     0F 12 06 F6 | 	mov	arg01, #15
14a08     00 14 06 F6 | 	mov	arg02, #0
14a0c     6C E5 B0 FD | 	call	#_printerror
14a10     20 00 90 FD | 	jmp	#LR__1663
14a14                 | LR__1662
14a14     A7 12 02 FB | 	rdlong	arg01, fp
14a18     10 4E 05 F1 | 	add	fp, #16
14a1c     A7 14 02 FB | 	rdlong	arg02, fp
14a20     10 4E 85 F1 | 	sub	fp, #16
14a24     C4 3F B1 FD | 	call	#__system__Left_S
14a28     A7 FA 61 FC | 	wrlong	result1, fp
14a2c     A7 12 02 F6 | 	mov	arg01, fp
14a30     40 8C BF FD | 	call	#_push
14a34                 | LR__1663
14a34     A7 F0 03 F6 | 	mov	ptra, fp
14a38     B2 00 A0 FD | 	call	#popregs_
14a3c                 | _do_left_ret
14a3c     2D 00 64 FD | 	ret
14a40                 | 
14a40                 | ' 
14a40                 | ' ' ----------------  len
14a40                 | ' 
14a40                 | ' sub do_len
14a40                 | _do_len
14a40     02 4A 05 F6 | 	mov	COUNT_, #2
14a44     A8 00 A0 FD | 	call	#pushregs_
14a48     14 F0 07 F1 | 	add	ptra, #20
14a4c     4A 00 00 FF 
14a50     80 E4 05 F1 | 	add	objptr, ##38016
14a54     F2 26 02 FB | 	rdlong	local01, objptr
14a58     13 17 02 F6 | 	mov	arg03, local01
14a5c     01 16 66 F0 | 	shl	arg03, #1
14a60     13 17 02 F1 | 	add	arg03, local01
14a64     02 16 66 F0 | 	shl	arg03, #2
14a68     03 00 00 FF 
14a6c     04 E4 85 F1 | 	sub	objptr, ##1540
14a70     F2 16 02 F1 | 	add	arg03, objptr
14a74     0B 17 02 FB | 	rdlong	arg03, arg03
14a78     0C 4E 05 F1 | 	add	fp, #12
14a7c     A7 16 62 FC | 	wrlong	arg03, fp
14a80                 | ' 
14a80                 | ' numpar=compiledline(lineptr_e).result.uresult
14a80                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
14a80     0C 4E 85 F1 | 	sub	fp, #12
14a84     02 16 16 F2 | 	cmp	arg03, #2 wc
14a88     47 00 00 FF 
14a8c     7C E4 85 F1 | 	sub	objptr, ##36476
14a90     0C 4E 05 C1 |  if_b	add	fp, #12
14a94     A7 26 0A CB |  if_b	rdlong	local01, fp wz
14a98     0C 4E 85 C1 |  if_b	sub	fp, #12
14a9c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1670
14aa0     00 12 06 F6 | 	mov	arg01, #0
14aa4     68 7B B1 FD | 	call	#__system___getiolock_0606
14aa8     FD 12 02 F6 | 	mov	arg01, result1
14aac     BC 1E B1 FD | 	call	#__system___lockmem
14ab0     B7 01 00 FF 
14ab4     9F 14 06 F6 | 	mov	arg02, ##@LR__5911
14ab8     00 12 06 F6 | 	mov	arg01, #0
14abc     00 16 06 F6 | 	mov	arg03, #0
14ac0     A0 2B B1 FD | 	call	#__system___basic_print_string
14ac4     00 12 06 F6 | 	mov	arg01, #0
14ac8     44 7B B1 FD | 	call	#__system___getiolock_0606
14acc     FD 00 68 FC | 	wrlong	#0, result1
14ad0     27 12 06 F6 | 	mov	arg01, #39
14ad4     00 14 06 F6 | 	mov	arg02, #0
14ad8     A0 E4 B0 FD | 	call	#_printerror
14adc     C8 00 90 FD | 	jmp	#LR__1675
14ae0                 | LR__1670
14ae0     F8 8A BF FD | 	call	#_pop
14ae4     FF 16 02 F6 | 	mov	arg03, result3
14ae8     A7 FA 61 FC | 	wrlong	result1, fp
14aec     04 4E 05 F1 | 	add	fp, #4
14af0     A7 FC 61 FC | 	wrlong	result2, fp
14af4     04 4E 05 F1 | 	add	fp, #4
14af8     A7 16 62 FC | 	wrlong	arg03, fp
14afc                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14afc     08 4E 85 F1 | 	sub	fp, #8
14b00     2B 16 0E F2 | 	cmp	arg03, #43 wz
14b04     18 00 90 5D |  if_ne	jmp	#LR__1671
14b08     A7 12 02 FB | 	rdlong	arg01, fp
14b0c     44 8C BF FD | 	call	#_convertstring
14b10     A7 FA 61 FC | 	wrlong	result1, fp
14b14     08 4E 05 F1 | 	add	fp, #8
14b18     A7 3E 68 FC | 	wrlong	#31, fp
14b1c     08 4E 85 F1 | 	sub	fp, #8
14b20                 | LR__1671
14b20                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
14b20     08 4E 05 F1 | 	add	fp, #8
14b24     A7 16 02 FB | 	rdlong	arg03, fp
14b28     08 4E 85 F1 | 	sub	fp, #8
14b2c     1F 16 0E F2 | 	cmp	arg03, #31 wz
14b30     40 00 90 AD |  if_e	jmp	#LR__1672
14b34     00 12 06 F6 | 	mov	arg01, #0
14b38     D4 7A B1 FD | 	call	#__system___getiolock_0606
14b3c     FD 12 02 F6 | 	mov	arg01, result1
14b40     28 1E B1 FD | 	call	#__system___lockmem
14b44     B7 01 00 FF 
14b48     A5 14 06 F6 | 	mov	arg02, ##@LR__5912
14b4c     00 12 06 F6 | 	mov	arg01, #0
14b50     00 16 06 F6 | 	mov	arg03, #0
14b54     0C 2B B1 FD | 	call	#__system___basic_print_string
14b58     00 12 06 F6 | 	mov	arg01, #0
14b5c     B0 7A B1 FD | 	call	#__system___getiolock_0606
14b60     FD 00 68 FC | 	wrlong	#0, result1
14b64     0F 12 06 F6 | 	mov	arg01, #15
14b68     00 14 06 F6 | 	mov	arg02, #0
14b6c     0C E4 B0 FD | 	call	#_printerror
14b70     34 00 90 FD | 	jmp	#LR__1675
14b74                 | LR__1672
14b74     A7 12 02 FB | 	rdlong	arg01, fp
14b78     09 29 02 F6 | 	mov	local02, arg01
14b7c     97 06 48 FB | 	callpa	#(@LR__1674-@LR__1673)>>2,fcache_load_ptr_
14b80                 | LR__1673
14b80     14 FB C9 FA | 	rdbyte	result1, local02 wz
14b84     01 28 06 51 |  if_ne	add	local02, #1
14b88     F4 FF 9F 5D |  if_ne	jmp	#LR__1673
14b8c                 | LR__1674
14b8c     09 29 82 F1 | 	sub	local02, arg01
14b90     A7 28 62 FC | 	wrlong	local02, fp
14b94     08 4E 05 F1 | 	add	fp, #8
14b98     A7 38 68 FC | 	wrlong	#28, fp
14b9c     08 4E 85 F1 | 	sub	fp, #8
14ba0     A7 12 02 F6 | 	mov	arg01, fp
14ba4     CC 8A BF FD | 	call	#_push
14ba8                 | LR__1675
14ba8     A7 F0 03 F6 | 	mov	ptra, fp
14bac     B2 00 A0 FD | 	call	#popregs_
14bb0                 | _do_len_ret
14bb0     2D 00 64 FD | 	ret
14bb4                 | 
14bb4                 | ' 
14bb4                 | ' ' ----------------  list
14bb4                 | ' 
14bb4                 | ' sub do_list
14bb4                 | _do_list
14bb4     02 4A 05 F6 | 	mov	COUNT_, #2
14bb8     A8 00 A0 FD | 	call	#pushregs_
14bbc     B8 F0 07 F1 | 	add	ptra, #184
14bc0     04 4E 05 F1 | 	add	fp, #4
14bc4     A7 00 68 FC | 	wrlong	#0, fp
14bc8     04 4E 05 F1 | 	add	fp, #4
14bcc     FF FF BF FF 
14bd0     A7 FE 6B FC | 	wrlong	##2147483647, fp
14bd4     08 4E 85 F1 | 	sub	fp, #8
14bd8     4A 00 00 FF 
14bdc     80 E4 05 F1 | 	add	objptr, ##38016
14be0     F2 26 02 FB | 	rdlong	local01, objptr
14be4     13 17 02 F6 | 	mov	arg03, local01
14be8     01 16 66 F0 | 	shl	arg03, #1
14bec     13 17 02 F1 | 	add	arg03, local01
14bf0     02 16 66 F0 | 	shl	arg03, #2
14bf4     03 00 00 FF 
14bf8     04 E4 85 F1 | 	sub	objptr, ##1540
14bfc     F2 16 02 F1 | 	add	arg03, objptr
14c00     0B 17 02 FB | 	rdlong	arg03, arg03
14c04     A7 16 62 FC | 	wrlong	arg03, fp
14c08                 | ' 
14c08                 | ' startline=0 : endline=$7FFFFFFF
14c08                 | ' numpar=compiledline(lineptr_e).result.uresult
14c08                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
14c08     01 16 0E F2 | 	cmp	arg03, #1 wz
14c0c     47 00 00 FF 
14c10     7C E4 85 F1 | 	sub	objptr, ##36476
14c14     3C 00 90 5D |  if_ne	jmp	#LR__1680
14c18     C0 89 BF FD | 	call	#_pop
14c1c     FF 26 02 F6 | 	mov	local01, result3
14c20     0C 4E 05 F1 | 	add	fp, #12
14c24     A7 FA 61 FC | 	wrlong	result1, fp
14c28     04 4E 05 F1 | 	add	fp, #4
14c2c     A7 FC 61 FC | 	wrlong	result2, fp
14c30     04 4E 05 F1 | 	add	fp, #4
14c34     A7 26 62 FC | 	wrlong	local01, fp
14c38     08 4E 85 F1 | 	sub	fp, #8
14c3c     A7 12 02 F6 | 	mov	arg01, fp
14c40     0C 4E 85 F1 | 	sub	fp, #12
14c44     78 8B BF FD | 	call	#_converttoint
14c48     04 4E 05 F1 | 	add	fp, #4
14c4c     A7 FA 61 FC | 	wrlong	result1, fp
14c50     04 4E 85 F1 | 	sub	fp, #4
14c54                 | LR__1680
14c54                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
14c54     A7 16 02 FB | 	rdlong	arg03, fp
14c58     02 16 0E F2 | 	cmp	arg03, #2 wz
14c5c     7C 00 90 5D |  if_ne	jmp	#LR__1681
14c60     78 89 BF FD | 	call	#_pop
14c64     FF 26 02 F6 | 	mov	local01, result3
14c68     0C 4E 05 F1 | 	add	fp, #12
14c6c     A7 FA 61 FC | 	wrlong	result1, fp
14c70     04 4E 05 F1 | 	add	fp, #4
14c74     A7 FC 61 FC | 	wrlong	result2, fp
14c78     04 4E 05 F1 | 	add	fp, #4
14c7c     A7 26 62 FC | 	wrlong	local01, fp
14c80     08 4E 85 F1 | 	sub	fp, #8
14c84     A7 12 02 F6 | 	mov	arg01, fp
14c88     0C 4E 85 F1 | 	sub	fp, #12
14c8c     30 8B BF FD | 	call	#_converttoint
14c90     FD 26 02 F6 | 	mov	local01, result1
14c94     08 4E 05 F1 | 	add	fp, #8
14c98     A7 26 62 FC | 	wrlong	local01, fp
14c9c     08 4E 85 F1 | 	sub	fp, #8
14ca0     38 89 BF FD | 	call	#_pop
14ca4     FF 26 02 F6 | 	mov	local01, result3
14ca8     0C 4E 05 F1 | 	add	fp, #12
14cac     A7 FA 61 FC | 	wrlong	result1, fp
14cb0     04 4E 05 F1 | 	add	fp, #4
14cb4     A7 FC 61 FC | 	wrlong	result2, fp
14cb8     04 4E 05 F1 | 	add	fp, #4
14cbc     A7 26 62 FC | 	wrlong	local01, fp
14cc0     08 4E 85 F1 | 	sub	fp, #8
14cc4     A7 12 02 F6 | 	mov	arg01, fp
14cc8     0C 4E 85 F1 | 	sub	fp, #12
14ccc     F0 8A BF FD | 	call	#_converttoint
14cd0     04 4E 05 F1 | 	add	fp, #4
14cd4     A7 FA 61 FC | 	wrlong	result1, fp
14cd8     04 4E 85 F1 | 	sub	fp, #4
14cdc                 | LR__1681
14cdc                 | ' 
14cdc                 | ' 
14cdc                 | ' print
14cdc     00 12 06 F6 | 	mov	arg01, #0
14ce0     2C 79 B1 FD | 	call	#__system___getiolock_0606
14ce4     FD 12 02 F6 | 	mov	arg01, result1
14ce8     80 1C B1 FD | 	call	#__system___lockmem
14cec     00 12 06 F6 | 	mov	arg01, #0
14cf0     0A 14 06 F6 | 	mov	arg02, #10
14cf4     00 16 06 F6 | 	mov	arg03, #0
14cf8     10 29 B1 FD | 	call	#__system___basic_print_char
14cfc     00 12 06 F6 | 	mov	arg01, #0
14d00     0C 79 B1 FD | 	call	#__system___getiolock_0606
14d04     FD 00 68 FC | 	wrlong	#0, result1
14d08     4A 00 00 FF 
14d0c     88 E4 05 F1 | 	add	objptr, ##38024
14d10     F2 28 02 FB | 	rdlong	local02, objptr
14d14     08 00 00 FF 
14d18     94 E4 05 F1 | 	add	objptr, ##4244
14d1c     F2 28 62 FC | 	wrlong	local02, objptr
14d20     52 00 00 FF 
14d24     1C E5 85 F1 | 	sub	objptr, ##42268
14d28                 | ' do 
14d28                 | LR__1682
14d28     20 4E 05 F1 | 	add	fp, #32
14d2c     A7 12 02 F6 | 	mov	arg01, fp
14d30     20 4E 85 F1 | 	sub	fp, #32
14d34     52 00 00 FF 
14d38     1C E5 05 F1 | 	add	objptr, ##42268
14d3c     F2 14 02 FB | 	rdlong	arg02, objptr
14d40     18 16 06 F6 | 	mov	arg03, #24
14d44     47 00 00 FF 
14d48     50 E4 85 F1 | 	sub	objptr, ##36432
14d4c     94 0F B1 FD | 	call	#_psram_spin2_read1
14d50     0B 00 00 FF 
14d54     CC E4 85 F1 | 	sub	objptr, ##5836
14d58                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
14d58                 | '   
14d58                 | '   if header(0)<> $FFFFFFFF then
14d58     20 4E 05 F1 | 	add	fp, #32
14d5c     A7 28 02 FB | 	rdlong	local02, fp
14d60     20 4E 85 F1 | 	sub	fp, #32
14d64     FF FF 7F FF 
14d68     FF 29 0E F2 | 	cmp	local02, ##-1 wz
14d6c     A8 00 90 AD |  if_e	jmp	#LR__1684
14d70     38 4E 05 F1 | 	add	fp, #56
14d74     3F 16 06 F6 | 	mov	arg03, #63
14d78     28 16 62 FD | 	setq	arg03
14d7c     A7 00 68 FC | 	wrlong	#0, fp
14d80     A7 12 02 F6 | 	mov	arg01, fp
14d84     10 4E 85 F1 | 	sub	fp, #16
14d88     A7 14 02 FB | 	rdlong	arg02, fp
14d8c     04 4E 05 F1 | 	add	fp, #4
14d90     A7 16 02 FB | 	rdlong	arg03, fp
14d94     2C 4E 85 F1 | 	sub	fp, #44
14d98     0B 00 00 FF 
14d9c     CC E4 05 F1 | 	add	objptr, ##5836
14da0     40 0F B1 FD | 	call	#_psram_spin2_read1
14da4     0B 00 00 FF 
14da8     CC E4 85 F1 | 	sub	objptr, ##5836
14dac                 | '     longfill(linebuf,0,64)
14dac                 | '     psram.read1(varptr(linebuf),header(2),header(3))
14dac                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
14dac     20 4E 05 F1 | 	add	fp, #32
14db0     A7 28 02 FB | 	rdlong	local02, fp
14db4     1C 4E 85 F1 | 	sub	fp, #28
14db8     A7 26 02 FB | 	rdlong	local01, fp
14dbc     04 4E 85 F1 | 	sub	fp, #4
14dc0     13 29 52 F2 | 	cmps	local02, local01 wc
14dc4     30 00 90 CD |  if_b	jmp	#LR__1683
14dc8     20 4E 05 F1 | 	add	fp, #32
14dcc     A7 28 02 FB | 	rdlong	local02, fp
14dd0     18 4E 85 F1 | 	sub	fp, #24
14dd4     A7 16 02 FB | 	rdlong	arg03, fp
14dd8     08 4E 85 F1 | 	sub	fp, #8
14ddc     0B 29 5A F2 | 	cmps	local02, arg03 wcz
14de0     14 00 90 1D |  if_a	jmp	#LR__1683
14de4     38 4E 05 F1 | 	add	fp, #56
14de8     A7 12 02 F6 | 	mov	arg01, fp
14dec     38 4E 85 F1 | 	sub	fp, #56
14df0                 | ' 
14df0                 | ' write(text)
14df0     B4 02 B1 FD | 	call	#_hg010b_spin2_write
14df4                 | ' crlf
14df4     B0 07 B1 FD | 	call	#_hg010b_spin2_crlf
14df8                 | LR__1683
14df8     34 4E 05 F1 | 	add	fp, #52
14dfc     A7 28 02 FB | 	rdlong	local02, fp
14e00     34 4E 85 F1 | 	sub	fp, #52
14e04     52 00 00 FF 
14e08     1C E5 05 F1 | 	add	objptr, ##42268
14e0c     F2 28 62 FC | 	wrlong	local02, objptr
14e10     52 00 00 FF 
14e14     1C E5 85 F1 | 	sub	objptr, ##42268
14e18                 | LR__1684
14e18     34 4E 05 F1 | 	add	fp, #52
14e1c     A7 28 02 FB | 	rdlong	local02, fp
14e20     34 4E 85 F1 | 	sub	fp, #52
14e24     FF FF 3F FF 
14e28     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
14e2c     20 4E 05 51 |  if_ne	add	fp, #32
14e30     A7 26 02 5B |  if_ne	rdlong	local01, fp
14e34     20 4E 85 51 |  if_ne	sub	fp, #32
14e38     FF FF 7F 5F 
14e3c     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
14e40     E4 FE 9F 5D |  if_ne	jmp	#LR__1682
14e44     A7 F0 03 F6 | 	mov	ptra, fp
14e48     B2 00 A0 FD | 	call	#popregs_
14e4c                 | _do_list_ret
14e4c     2D 00 64 FD | 	ret
14e50                 | 
14e50                 | ' 
14e50                 | ' '-------------------- load
14e50                 | ' 
14e50                 | ' sub do_load(amode=0 as integer)  
14e50                 | _do_load
14e50     01 4A 05 F6 | 	mov	COUNT_, #1
14e54     A8 00 A0 FD | 	call	#pushregs_
14e58     AC F0 07 F1 | 	add	ptra, #172
14e5c     A7 12 62 FC | 	wrlong	arg01, fp
14e60     52 00 00 FF 
14e64     D4 E4 05 F1 | 	add	objptr, ##42196
14e68     F2 02 68 FC | 	wrlong	#1, objptr
14e6c     08 00 00 FF 
14e70     54 E4 85 F1 | 	sub	objptr, ##4180
14e74     F2 14 02 FB | 	rdlong	arg02, objptr
14e78     0A 13 02 F6 | 	mov	arg01, arg02
14e7c     01 12 66 F0 | 	shl	arg01, #1
14e80     0A 13 02 F1 | 	add	arg01, arg02
14e84     02 12 66 F0 | 	shl	arg01, #2
14e88     03 00 00 FF 
14e8c     04 E4 85 F1 | 	sub	objptr, ##1540
14e90     F2 12 02 F1 | 	add	arg01, objptr
14e94     09 15 02 FB | 	rdlong	arg02, arg01
14e98     1C 4E 05 F1 | 	add	fp, #28
14e9c     A7 14 62 FC | 	wrlong	arg02, fp
14ea0     8C 4E 05 F1 | 	add	fp, #140
14ea4     A7 12 02 F6 | 	mov	arg01, fp
14ea8     47 00 00 FF 
14eac     7C E4 85 F1 | 	sub	objptr, ##36476
14eb0     80 4E 85 F1 | 	sub	fp, #128
14eb4     09 4F 61 FC | 	wrlong	fp, arg01
14eb8                 | ' 
14eb8                 | ' inload=1
14eb8                 | ' numpar=compiledline(lineptr_e).result.uresult
14eb8                 | ' lpoke varptr(line2$),varptr(line2)
14eb8                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
14eb8     0C 4E 85 F1 | 	sub	fp, #12
14ebc     A7 26 02 FB | 	rdlong	local01, fp
14ec0     1C 4E 85 F1 | 	sub	fp, #28
14ec4     01 26 56 F2 | 	cmps	local01, #1 wc
14ec8     24 00 90 CD |  if_b	jmp	#LR__1690
14ecc     0C 87 BF FD | 	call	#_pop
14ed0     04 4E 05 F1 | 	add	fp, #4
14ed4     A7 FA 61 FC | 	wrlong	result1, fp
14ed8     04 4E 05 F1 | 	add	fp, #4
14edc     A7 FC 61 FC | 	wrlong	result2, fp
14ee0     04 4E 05 F1 | 	add	fp, #4
14ee4     A7 FE 61 FC | 	wrlong	result3, fp
14ee8     0C 4E 85 F1 | 	sub	fp, #12
14eec     28 00 90 FD | 	jmp	#LR__1691
14ef0                 | LR__1690
14ef0     52 00 00 FF 
14ef4     C4 E4 05 F1 | 	add	objptr, ##42180
14ef8     F2 26 02 FB | 	rdlong	local01, objptr
14efc     52 00 00 FF 
14f00     C4 E4 85 F1 | 	sub	objptr, ##42180
14f04     04 4E 05 F1 | 	add	fp, #4
14f08     A7 26 62 FC | 	wrlong	local01, fp
14f0c     08 4E 05 F1 | 	add	fp, #8
14f10     A7 3E 68 FC | 	wrlong	#31, fp
14f14     0C 4E 85 F1 | 	sub	fp, #12
14f18                 | LR__1691
14f18                 | ' 'print "popped "; t1.result.uresult, t1.result_type
14f18                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
14f18     0C 4E 05 F1 | 	add	fp, #12
14f1c     A7 26 02 FB | 	rdlong	local01, fp
14f20     0C 4E 85 F1 | 	sub	fp, #12
14f24     2B 26 0E F2 | 	cmp	local01, #43 wz
14f28     24 00 90 5D |  if_ne	jmp	#LR__1692
14f2c     04 4E 05 F1 | 	add	fp, #4
14f30     A7 12 02 FB | 	rdlong	arg01, fp
14f34     04 4E 85 F1 | 	sub	fp, #4
14f38     18 88 BF FD | 	call	#_convertstring
14f3c     04 4E 05 F1 | 	add	fp, #4
14f40     A7 FA 61 FC | 	wrlong	result1, fp
14f44     08 4E 05 F1 | 	add	fp, #8
14f48     A7 3E 68 FC | 	wrlong	#31, fp
14f4c     0C 4E 85 F1 | 	sub	fp, #12
14f50                 | LR__1692
14f50                 | ' if t1.result_type=result_string then
14f50     0C 4E 05 F1 | 	add	fp, #12
14f54     A7 26 02 FB | 	rdlong	local01, fp
14f58     0C 4E 85 F1 | 	sub	fp, #12
14f5c     1F 26 0E F2 | 	cmp	local01, #31 wz
14f60     E8 02 90 5D |  if_ne	jmp	#LR__1698
14f64                 | '   if amode<>1234 then do_new
14f64     A7 26 02 FB | 	rdlong	local01, fp
14f68     02 00 00 FF 
14f6c     D2 26 0E F2 | 	cmp	local01, ##1234 wz
14f70     10 0E B0 5D |  if_ne	call	#_do_new
14f74                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
14f74     04 4E 05 F1 | 	add	fp, #4
14f78     A7 12 02 FB | 	rdlong	arg01, fp
14f7c     04 4E 85 F1 | 	sub	fp, #4
14f80     B7 01 00 FF 
14f84     AB 14 06 F6 | 	mov	arg02, ##@LR__5913
14f88     08 1A B1 FD | 	call	#__system___string_cmp
14f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
14f90     24 00 90 5D |  if_ne	jmp	#LR__1693
14f94     52 00 00 FF 
14f98     C4 E4 05 F1 | 	add	objptr, ##42180
14f9c     F2 26 02 FB | 	rdlong	local01, objptr
14fa0     52 00 00 FF 
14fa4     C4 E4 85 F1 | 	sub	objptr, ##42180
14fa8     04 4E 05 F1 | 	add	fp, #4
14fac     A7 26 62 FC | 	wrlong	local01, fp
14fb0     04 4E 85 F1 | 	sub	fp, #4
14fb4     20 00 90 FD | 	jmp	#LR__1694
14fb8                 | LR__1693
14fb8     04 4E 05 F1 | 	add	fp, #4
14fbc     A7 26 02 FB | 	rdlong	local01, fp
14fc0     04 4E 85 F1 | 	sub	fp, #4
14fc4     52 00 00 FF 
14fc8     C4 E4 05 F1 | 	add	objptr, ##42180
14fcc     F2 26 62 FC | 	wrlong	local01, objptr
14fd0     52 00 00 FF 
14fd4     C4 E4 85 F1 | 	sub	objptr, ##42180
14fd8                 | LR__1694
14fd8                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
14fd8     09 12 06 F6 | 	mov	arg01, #9
14fdc     E8 6C B1 FD | 	call	#__system__close
14fe0     09 26 06 F6 | 	mov	local01, #9
14fe4     4A 00 00 FF 
14fe8     94 E4 05 F1 | 	add	objptr, ##38036
14fec     F2 12 02 FB | 	rdlong	arg01, objptr
14ff0     4A 00 00 FF 
14ff4     94 E4 85 F1 | 	sub	objptr, ##38036
14ff8     B7 01 00 FF 
14ffc     AC 14 06 F6 | 	mov	arg02, ##@LR__5914
15000     C4 19 B1 FD | 	call	#__system___string_concat
15004     FD 12 02 F6 | 	mov	arg01, result1
15008     04 4E 05 F1 | 	add	fp, #4
1500c     A7 14 02 FB | 	rdlong	arg02, fp
15010     04 4E 85 F1 | 	sub	fp, #4
15014     B0 19 B1 FD | 	call	#__system___string_concat
15018     FD 14 02 F6 | 	mov	arg02, result1
1501c     13 13 02 F6 | 	mov	arg01, local01
15020     00 16 06 F6 | 	mov	arg03, #0
15024     48 25 B1 FD | 	call	#__system___basic_open_string
15028     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1502c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
15030     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
15034     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
15038     14 4E 05 F1 | 	add	fp, #20
1503c     A7 FA 61 FC | 	wrlong	result1, fp
15040                 | '   r=geterr() 
15040                 | '   if r then 
15040     14 4E 85 F1 | 	sub	fp, #20
15044     54 01 90 AD |  if_e	jmp	#LR__1696
15048                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
15048     09 12 06 F6 | 	mov	arg01, #9
1504c     78 6C B1 FD | 	call	#__system__close
15050     09 26 06 F6 | 	mov	local01, #9
15054     4A 00 00 FF 
15058     94 E4 05 F1 | 	add	objptr, ##38036
1505c     F2 12 02 FB | 	rdlong	arg01, objptr
15060     4A 00 00 FF 
15064     94 E4 85 F1 | 	sub	objptr, ##38036
15068     B7 01 00 FF 
1506c     AE 14 06 F6 | 	mov	arg02, ##@LR__5915
15070     54 19 B1 FD | 	call	#__system___string_concat
15074     FD 12 02 F6 | 	mov	arg01, result1
15078     04 4E 05 F1 | 	add	fp, #4
1507c     A7 14 02 FB | 	rdlong	arg02, fp
15080     04 4E 85 F1 | 	sub	fp, #4
15084     40 19 B1 FD | 	call	#__system___string_concat
15088     FD 12 02 F6 | 	mov	arg01, result1
1508c     B7 01 00 FF 
15090     B0 14 06 F6 | 	mov	arg02, ##@LR__5916
15094     30 19 B1 FD | 	call	#__system___string_concat
15098     FD 14 02 F6 | 	mov	arg02, result1
1509c     13 13 02 F6 | 	mov	arg01, local01
150a0     00 16 06 F6 | 	mov	arg03, #0
150a4     C8 24 B1 FD | 	call	#__system___basic_open_string
150a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
150ac     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
150b0     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
150b4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
150b8     14 4E 05 F1 | 	add	fp, #20
150bc     A7 FA 61 FC | 	wrlong	result1, fp
150c0                 | '     r=geterr() 
150c0                 | '     if r then 
150c0     14 4E 85 F1 | 	sub	fp, #20
150c4     A0 00 90 AD |  if_e	jmp	#LR__1695
150c8                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
150c8     00 12 06 F6 | 	mov	arg01, #0
150cc     40 75 B1 FD | 	call	#__system___getiolock_0606
150d0     FD 12 02 F6 | 	mov	arg01, result1
150d4     94 18 B1 FD | 	call	#__system___lockmem
150d8     B7 01 00 FF 
150dc     B5 14 06 F6 | 	mov	arg02, ##@LR__5917
150e0     00 12 06 F6 | 	mov	arg01, #0
150e4     00 16 06 F6 | 	mov	arg03, #0
150e8     78 25 B1 FD | 	call	#__system___basic_print_string
150ec     14 4E 05 F1 | 	add	fp, #20
150f0     A7 14 02 FB | 	rdlong	arg02, fp
150f4     14 4E 85 F1 | 	sub	fp, #20
150f8     00 12 06 F6 | 	mov	arg01, #0
150fc     00 16 06 F6 | 	mov	arg03, #0
15100     0A 18 06 F6 | 	mov	arg04, #10
15104     A0 25 B1 FD | 	call	#__system___basic_print_integer
15108     B7 01 00 FF 
1510c     C3 14 06 F6 | 	mov	arg02, ##@LR__5918
15110     00 12 06 F6 | 	mov	arg01, #0
15114     00 16 06 F6 | 	mov	arg03, #0
15118     48 25 B1 FD | 	call	#__system___basic_print_string
1511c     00 26 06 F6 | 	mov	local01, #0
15120     14 4E 05 F1 | 	add	fp, #20
15124     A7 12 02 FB | 	rdlong	arg01, fp
15128     14 4E 85 F1 | 	sub	fp, #20
1512c     CC 41 B1 FD | 	call	#__system___strerror
15130     FD 14 02 F6 | 	mov	arg02, result1
15134     13 13 02 F6 | 	mov	arg01, local01
15138     00 16 06 F6 | 	mov	arg03, #0
1513c     24 25 B1 FD | 	call	#__system___basic_print_string
15140     00 12 06 F6 | 	mov	arg01, #0
15144     0A 14 06 F6 | 	mov	arg02, #10
15148     00 16 06 F6 | 	mov	arg03, #0
1514c     BC 24 B1 FD | 	call	#__system___basic_print_char
15150     00 12 06 F6 | 	mov	arg01, #0
15154     B8 74 B1 FD | 	call	#__system___getiolock_0606
15158     FD 00 68 FC | 	wrlong	#0, result1
1515c     09 12 06 F6 | 	mov	arg01, #9
15160     64 6B B1 FD | 	call	#__system__close
15164     94 01 90 FD | 	jmp	#LR__1700
15168                 | LR__1695
15168     52 00 00 FF 
1516c     C4 E4 05 F1 | 	add	objptr, ##42180
15170     F2 12 02 FB | 	rdlong	arg01, objptr
15174     52 00 00 FF 
15178     C4 E4 85 F1 | 	sub	objptr, ##42180
1517c     B7 01 00 FF 
15180     C6 14 06 F6 | 	mov	arg02, ##@LR__5919
15184     40 18 B1 FD | 	call	#__system___string_concat
15188     52 00 00 FF 
1518c     C4 E4 05 F1 | 	add	objptr, ##42180
15190     F2 FA 61 FC | 	wrlong	result1, objptr
15194     52 00 00 FF 
15198     C4 E4 85 F1 | 	sub	objptr, ##42180
1519c                 | LR__1696
1519c                 | '   close #9: open currentdir$+"/"+loadname for input as #9
1519c     09 12 06 F6 | 	mov	arg01, #9
151a0     24 6B B1 FD | 	call	#__system__close
151a4     09 26 06 F6 | 	mov	local01, #9
151a8     4A 00 00 FF 
151ac     94 E4 05 F1 | 	add	objptr, ##38036
151b0     F2 12 02 FB | 	rdlong	arg01, objptr
151b4     4A 00 00 FF 
151b8     94 E4 85 F1 | 	sub	objptr, ##38036
151bc     B7 01 00 FF 
151c0     CB 14 06 F6 | 	mov	arg02, ##@LR__5920
151c4     00 18 B1 FD | 	call	#__system___string_concat
151c8     FD 12 02 F6 | 	mov	arg01, result1
151cc     52 00 00 FF 
151d0     C4 E4 05 F1 | 	add	objptr, ##42180
151d4     F2 14 02 FB | 	rdlong	arg02, objptr
151d8     52 00 00 FF 
151dc     C4 E4 85 F1 | 	sub	objptr, ##42180
151e0     E4 17 B1 FD | 	call	#__system___string_concat
151e4     FD 14 02 F6 | 	mov	arg02, result1
151e8     13 13 02 F6 | 	mov	arg01, local01
151ec     00 16 06 F6 | 	mov	arg03, #0
151f0     7C 23 B1 FD | 	call	#__system___basic_open_string
151f4                 | '   do
151f4                 | LR__1697
151f4     09 12 06 F6 | 	mov	arg01, #9
151f8     7C 19 B1 FD | 	call	#__system___basic_read_line
151fc     FD 26 02 F6 | 	mov	local01, result1
15200     37 00 00 FF 
15204     1C E4 05 F1 | 	add	objptr, ##28188
15208     F2 26 62 FC | 	wrlong	local01, objptr
1520c     37 00 00 FF 
15210     1C E4 85 F1 | 	sub	objptr, ##28188
15214     10 C6 BE FD | 	call	#_interpret
15218     37 00 00 FF 
1521c     1C E4 05 F1 | 	add	objptr, ##28188
15220     F2 12 02 FB | 	rdlong	arg01, objptr
15224     37 00 00 FF 
15228     1C E4 85 F1 | 	sub	objptr, ##28188
1522c     B7 01 00 FF 
15230     CD 14 06 F6 | 	mov	arg02, ##@LR__5921
15234     5C 17 B1 FD | 	call	#__system___string_cmp
15238     00 FA 0D F2 | 	cmp	result1, #0 wz
1523c     B4 FF 9F 5D |  if_ne	jmp	#LR__1697
15240                 | '   close #9   
15240     09 12 06 F6 | 	mov	arg01, #9
15244     80 6A B1 FD | 	call	#__system__close
15248     0C 00 90 FD | 	jmp	#LR__1699
1524c                 | LR__1698
1524c     1E 12 06 F6 | 	mov	arg01, #30
15250     00 14 06 F6 | 	mov	arg02, #0
15254     24 DD B0 FD | 	call	#_printerror
15258                 | LR__1699
15258                 | ' print "Loaded ";currentdir$+"/"+loadname
15258     00 12 06 F6 | 	mov	arg01, #0
1525c     B0 73 B1 FD | 	call	#__system___getiolock_0606
15260     FD 12 02 F6 | 	mov	arg01, result1
15264     04 17 B1 FD | 	call	#__system___lockmem
15268     B7 01 00 FF 
1526c     CE 14 06 F6 | 	mov	arg02, ##@LR__5922
15270     00 12 06 F6 | 	mov	arg01, #0
15274     00 16 06 F6 | 	mov	arg03, #0
15278     E8 23 B1 FD | 	call	#__system___basic_print_string
1527c     00 26 06 F6 | 	mov	local01, #0
15280     4A 00 00 FF 
15284     94 E4 05 F1 | 	add	objptr, ##38036
15288     F2 12 02 FB | 	rdlong	arg01, objptr
1528c     4A 00 00 FF 
15290     94 E4 85 F1 | 	sub	objptr, ##38036
15294     B7 01 00 FF 
15298     D6 14 06 F6 | 	mov	arg02, ##@LR__5923
1529c     28 17 B1 FD | 	call	#__system___string_concat
152a0     FD 12 02 F6 | 	mov	arg01, result1
152a4     52 00 00 FF 
152a8     C4 E4 05 F1 | 	add	objptr, ##42180
152ac     F2 14 02 FB | 	rdlong	arg02, objptr
152b0     52 00 00 FF 
152b4     C4 E4 85 F1 | 	sub	objptr, ##42180
152b8     0C 17 B1 FD | 	call	#__system___string_concat
152bc     FD 14 02 F6 | 	mov	arg02, result1
152c0     13 13 02 F6 | 	mov	arg01, local01
152c4     00 16 06 F6 | 	mov	arg03, #0
152c8     98 23 B1 FD | 	call	#__system___basic_print_string
152cc     00 12 06 F6 | 	mov	arg01, #0
152d0     0A 14 06 F6 | 	mov	arg02, #10
152d4     00 16 06 F6 | 	mov	arg03, #0
152d8     30 23 B1 FD | 	call	#__system___basic_print_char
152dc     00 12 06 F6 | 	mov	arg01, #0
152e0     2C 73 B1 FD | 	call	#__system___getiolock_0606
152e4     FD 00 68 FC | 	wrlong	#0, result1
152e8     52 00 00 FF 
152ec     D4 E4 05 F1 | 	add	objptr, ##42196
152f0     F2 00 68 FC | 	wrlong	#0, objptr
152f4     52 00 00 FF 
152f8     D4 E4 85 F1 | 	sub	objptr, ##42196
152fc                 | LR__1700
152fc     A7 F0 03 F6 | 	mov	ptra, fp
15300     B2 00 A0 FD | 	call	#popregs_
15304                 | _do_load_ret
15304     2D 00 64 FD | 	ret
15308                 | 
15308                 | ' 
15308                 | ' '-------------------- log
15308                 | ' 
15308                 | ' sub do_log
15308                 | _do_log
15308     01 4A 05 F6 | 	mov	COUNT_, #1
1530c     A8 00 A0 FD | 	call	#pushregs_
15310     14 F0 07 F1 | 	add	ptra, #20
15314     4A 00 00 FF 
15318     80 E4 05 F1 | 	add	objptr, ##38016
1531c     F2 26 02 FB | 	rdlong	local01, objptr
15320     13 17 02 F6 | 	mov	arg03, local01
15324     01 16 66 F0 | 	shl	arg03, #1
15328     13 17 02 F1 | 	add	arg03, local01
1532c     02 16 66 F0 | 	shl	arg03, #2
15330     03 00 00 FF 
15334     04 E4 85 F1 | 	sub	objptr, ##1540
15338     F2 16 02 F1 | 	add	arg03, objptr
1533c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
15340     0C 4E 05 F1 | 	add	fp, #12
15344     A7 16 62 FC | 	wrlong	arg03, fp
15348                 | ' 
15348                 | ' numpar=compiledline(lineptr_e).result.uresult
15348                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
15348     0C 4E 85 F1 | 	sub	fp, #12
1534c     47 00 00 FF 
15350     7C E4 85 F1 | 	sub	objptr, ##36476
15354     0C 4E 05 51 |  if_ne	add	fp, #12
15358     A7 26 02 5B |  if_ne	rdlong	local01, fp
1535c     0C 4E 85 51 |  if_ne	sub	fp, #12
15360     03 26 16 52 |  if_ne	cmp	local01, #3 wc
15364     40 00 90 4D |  if_c_and_nz	jmp	#LR__1710
15368     00 12 06 F6 | 	mov	arg01, #0
1536c     A0 72 B1 FD | 	call	#__system___getiolock_0606
15370     FD 12 02 F6 | 	mov	arg01, result1
15374     F4 15 B1 FD | 	call	#__system___lockmem
15378     B7 01 00 FF 
1537c     D8 14 06 F6 | 	mov	arg02, ##@LR__5924
15380     00 12 06 F6 | 	mov	arg01, #0
15384     00 16 06 F6 | 	mov	arg03, #0
15388     D8 22 B1 FD | 	call	#__system___basic_print_string
1538c     00 12 06 F6 | 	mov	arg01, #0
15390     7C 72 B1 FD | 	call	#__system___getiolock_0606
15394     FD 00 68 FC | 	wrlong	#0, result1
15398     27 12 06 F6 | 	mov	arg01, #39
1539c     00 14 06 F6 | 	mov	arg02, #0
153a0     D8 DB B0 FD | 	call	#_printerror
153a4     D0 00 90 FD | 	jmp	#LR__1713
153a8                 | LR__1710
153a8                 | ' if numpar=2 then 
153a8     0C 4E 05 F1 | 	add	fp, #12
153ac     A7 26 02 FB | 	rdlong	local01, fp
153b0     0C 4E 85 F1 | 	sub	fp, #12
153b4     02 26 0E F2 | 	cmp	local01, #2 wz
153b8     48 00 90 5D |  if_ne	jmp	#LR__1711
153bc     1C 82 BF FD | 	call	#_pop
153c0     FF 26 02 F6 | 	mov	local01, result3
153c4     A7 FA 61 FC | 	wrlong	result1, fp
153c8     04 4E 05 F1 | 	add	fp, #4
153cc     A7 FC 61 FC | 	wrlong	result2, fp
153d0     04 4E 05 F1 | 	add	fp, #4
153d4     A7 26 62 FC | 	wrlong	local01, fp
153d8     08 4E 85 F1 | 	sub	fp, #8
153dc     A7 12 02 F6 | 	mov	arg01, fp
153e0     98 84 BF FD | 	call	#_converttofloat
153e4     FD 14 02 F6 | 	mov	arg02, result1
153e8     FC 16 20 FF 
153ec     54 12 06 F6 | 	mov	arg01, ##1076754516
153f0     C4 53 B1 FD | 	call	#__system____builtin_logbase
153f4     10 4E 05 F1 | 	add	fp, #16
153f8     A7 FA 61 FC | 	wrlong	result1, fp
153fc     10 4E 85 F1 | 	sub	fp, #16
15400     10 00 90 FD | 	jmp	#LR__1712
15404                 | LR__1711
15404     10 4E 05 F1 | 	add	fp, #16
15408     00 C0 9F FF 
1540c     A7 00 68 FC | 	wrlong	##1065353216, fp
15410     10 4E 85 F1 | 	sub	fp, #16
15414                 | LR__1712
15414     C4 81 BF FD | 	call	#_pop
15418     FF 26 02 F6 | 	mov	local01, result3
1541c     A7 FA 61 FC | 	wrlong	result1, fp
15420     04 4E 05 F1 | 	add	fp, #4
15424     A7 FC 61 FC | 	wrlong	result2, fp
15428     04 4E 05 F1 | 	add	fp, #4
1542c     A7 26 62 FC | 	wrlong	local01, fp
15430     08 4E 85 F1 | 	sub	fp, #8
15434     A7 12 02 F6 | 	mov	arg01, fp
15438     40 84 BF FD | 	call	#_converttofloat
1543c     FD 14 02 F6 | 	mov	arg02, result1
15440     FC 16 20 FF 
15444     54 12 06 F6 | 	mov	arg01, ##1076754516
15448     6C 53 B1 FD | 	call	#__system____builtin_logbase
1544c     FD 12 02 F6 | 	mov	arg01, result1
15450     10 4E 05 F1 | 	add	fp, #16
15454     A7 14 02 FB | 	rdlong	arg02, fp
15458     10 4E 85 F1 | 	sub	fp, #16
1545c     8C 45 B1 FD | 	call	#__system___float_div
15460     A7 FA 61 FC | 	wrlong	result1, fp
15464     08 4E 05 F1 | 	add	fp, #8
15468     A7 3C 68 FC | 	wrlong	#30, fp
1546c     08 4E 85 F1 | 	sub	fp, #8
15470     A7 12 02 F6 | 	mov	arg01, fp
15474     FC 81 BF FD | 	call	#_push
15478                 | LR__1713
15478     A7 F0 03 F6 | 	mov	ptra, fp
1547c     B2 00 A0 FD | 	call	#popregs_
15480                 | _do_log_ret
15480     2D 00 64 FD | 	ret
15484                 | 
15484                 | ' 
15484                 | ' '-------------------- lpeek
15484                 | ' 
15484                 | ' sub do_lpeek
15484                 | _do_lpeek
15484     00 4A 05 F6 | 	mov	COUNT_, #0
15488     A8 00 A0 FD | 	call	#pushregs_
1548c     14 F0 07 F1 | 	add	ptra, #20
15490     48 81 BF FD | 	call	#_pop
15494     A7 FA 61 FC | 	wrlong	result1, fp
15498     04 4E 05 F1 | 	add	fp, #4
1549c     A7 FC 61 FC | 	wrlong	result2, fp
154a0     04 4E 05 F1 | 	add	fp, #4
154a4     A7 FE 61 FC | 	wrlong	result3, fp
154a8     08 4E 85 F1 | 	sub	fp, #8
154ac     A7 12 02 F6 | 	mov	arg01, fp
154b0     0C 83 BF FD | 	call	#_converttoint
154b4     0C 4E 05 F1 | 	add	fp, #12
154b8     A7 FA 61 FC | 	wrlong	result1, fp
154bc                 | ' 
154bc                 | ' t1=pop()
154bc                 | ' a=converttoint(t1)
154bc                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
154bc     0C 4E 85 F1 | 	sub	fp, #12
154c0     00 04 00 FF 
154c4     00 FA 15 F2 | 	cmp	result1, ##524288 wc
154c8     1C 00 90 3D |  if_ae	jmp	#LR__1720
154cc     0C 4E 05 F1 | 	add	fp, #12
154d0     A7 12 02 FB | 	rdlong	arg01, fp
154d4     09 FB 01 FB | 	rdlong	result1, arg01
154d8     04 4E 05 F1 | 	add	fp, #4
154dc     A7 FA 61 FC | 	wrlong	result1, fp
154e0     10 4E 85 F1 | 	sub	fp, #16
154e4     1C 00 90 FD | 	jmp	#LR__1721
154e8                 | LR__1720
154e8     0C 4E 05 F1 | 	add	fp, #12
154ec     A7 12 02 FB | 	rdlong	arg01, fp
154f0     0C 4E 85 F1 | 	sub	fp, #12
154f4     54 DD B0 FD | 	call	#_pslpeek
154f8     10 4E 05 F1 | 	add	fp, #16
154fc     A7 FA 61 FC | 	wrlong	result1, fp
15500     10 4E 85 F1 | 	sub	fp, #16
15504                 | LR__1721
15504     08 4E 05 F1 | 	add	fp, #8
15508     A7 3A 68 FC | 	wrlong	#29, fp
1550c     08 4E 05 F1 | 	add	fp, #8
15510     A7 12 02 FB | 	rdlong	arg01, fp
15514     10 4E 85 F1 | 	sub	fp, #16
15518     A7 12 62 FC | 	wrlong	arg01, fp
1551c     A7 12 02 F6 | 	mov	arg01, fp
15520     50 81 BF FD | 	call	#_push
15524     A7 F0 03 F6 | 	mov	ptra, fp
15528     B2 00 A0 FD | 	call	#popregs_
1552c                 | _do_lpeek_ret
1552c     2D 00 64 FD | 	ret
15530                 | 
15530                 | ' 
15530                 | ' '-------------------- lpoke
15530                 | ' 
15530                 | ' sub do_lpoke
15530                 | _do_lpoke
15530     01 4A 05 F6 | 	mov	COUNT_, #1
15534     A8 00 A0 FD | 	call	#pushregs_
15538     20 F0 07 F1 | 	add	ptra, #32
1553c     9C 80 BF FD | 	call	#_pop
15540     FD 14 02 F6 | 	mov	arg02, result1
15544     FE 12 02 F6 | 	mov	arg01, result2
15548     FF 26 02 F6 | 	mov	local01, result3
1554c     A7 14 62 FC | 	wrlong	arg02, fp
15550     04 4E 05 F1 | 	add	fp, #4
15554     A7 12 62 FC | 	wrlong	arg01, fp
15558     04 4E 05 F1 | 	add	fp, #4
1555c     A7 26 62 FC | 	wrlong	local01, fp
15560     08 4E 85 F1 | 	sub	fp, #8
15564     74 80 BF FD | 	call	#_pop
15568     FF 26 02 F6 | 	mov	local01, result3
1556c     0C 4E 05 F1 | 	add	fp, #12
15570     A7 FA 61 FC | 	wrlong	result1, fp
15574     04 4E 05 F1 | 	add	fp, #4
15578     A7 FC 61 FC | 	wrlong	result2, fp
1557c     04 4E 05 F1 | 	add	fp, #4
15580     A7 26 62 FC | 	wrlong	local01, fp
15584     08 4E 85 F1 | 	sub	fp, #8
15588     A7 12 02 F6 | 	mov	arg01, fp
1558c     0C 4E 85 F1 | 	sub	fp, #12
15590     2C 82 BF FD | 	call	#_converttoint
15594     18 4E 05 F1 | 	add	fp, #24
15598     A7 FA 61 FC | 	wrlong	result1, fp
1559c     18 4E 85 F1 | 	sub	fp, #24
155a0     A7 12 02 F6 | 	mov	arg01, fp
155a4     18 82 BF FD | 	call	#_converttoint
155a8     1C 4E 05 F1 | 	add	fp, #28
155ac     A7 FA 61 FC | 	wrlong	result1, fp
155b0                 | ' 
155b0                 | ' t1=pop() 'value
155b0                 | ' t2=pop() 
155b0                 | ' a=converttoint(t2) : v=converttoint(t1)
155b0                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
155b0     04 4E 85 F1 | 	sub	fp, #4
155b4     A7 26 02 FB | 	rdlong	local01, fp
155b8     18 4E 85 F1 | 	sub	fp, #24
155bc     00 04 00 FF 
155c0     00 26 16 F2 | 	cmp	local01, ##524288 wc
155c4     1C 00 90 3D |  if_ae	jmp	#LR__1730
155c8     18 4E 05 F1 | 	add	fp, #24
155cc     A7 12 02 FB | 	rdlong	arg01, fp
155d0     04 4E 05 F1 | 	add	fp, #4
155d4     A7 14 02 FB | 	rdlong	arg02, fp
155d8     1C 4E 85 F1 | 	sub	fp, #28
155dc     09 15 62 FC | 	wrlong	arg02, arg01
155e0     18 00 90 FD | 	jmp	#LR__1731
155e4                 | LR__1730
155e4     18 4E 05 F1 | 	add	fp, #24
155e8     A7 12 02 FB | 	rdlong	arg01, fp
155ec     04 4E 05 F1 | 	add	fp, #4
155f0     A7 14 02 FB | 	rdlong	arg02, fp
155f4     1C 4E 85 F1 | 	sub	fp, #28
155f8     20 DB B0 FD | 	call	#_pslpoke
155fc                 | LR__1731
155fc     A7 F0 03 F6 | 	mov	ptra, fp
15600     B2 00 A0 FD | 	call	#popregs_
15604                 | _do_lpoke_ret
15604     2D 00 64 FD | 	ret
15608                 | 
15608                 | ' 
15608                 | ' '-------------------- mid$
15608                 | ' 
15608                 | ' sub do_mid
15608                 | _do_mid
15608     00 4A 05 F6 | 	mov	COUNT_, #0
1560c     A8 00 A0 FD | 	call	#pushregs_
15610     18 F0 07 F1 | 	add	ptra, #24
15614     4A 00 00 FF 
15618     80 E4 05 F1 | 	add	objptr, ##38016
1561c     F2 16 02 FB | 	rdlong	arg03, objptr
15620     0B 15 02 F6 | 	mov	arg02, arg03
15624     01 14 66 F0 | 	shl	arg02, #1
15628     0B 15 02 F1 | 	add	arg02, arg03
1562c     02 14 66 F0 | 	shl	arg02, #2
15630     03 00 00 FF 
15634     04 E4 85 F1 | 	sub	objptr, ##1540
15638     F2 14 02 F1 | 	add	arg02, objptr
1563c     0A 17 02 FB | 	rdlong	arg03, arg02
15640     0C 4E 05 F1 | 	add	fp, #12
15644     A7 16 62 FC | 	wrlong	arg03, fp
15648                 | ' 
15648                 | ' numpar=compiledline(lineptr_e).result.uresult
15648                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
15648     0C 4E 85 F1 | 	sub	fp, #12
1564c     03 16 0E F2 | 	cmp	arg03, #3 wz
15650     47 00 00 FF 
15654     7C E4 85 F1 | 	sub	objptr, ##36476
15658     40 00 90 AD |  if_e	jmp	#LR__1740
1565c     00 12 06 F6 | 	mov	arg01, #0
15660     AC 6F B1 FD | 	call	#__system___getiolock_0606
15664     FD 12 02 F6 | 	mov	arg01, result1
15668     00 13 B1 FD | 	call	#__system___lockmem
1566c     B7 01 00 FF 
15670     DE 14 06 F6 | 	mov	arg02, ##@LR__5925
15674     00 12 06 F6 | 	mov	arg01, #0
15678     00 16 06 F6 | 	mov	arg03, #0
1567c     E4 1F B1 FD | 	call	#__system___basic_print_string
15680     00 12 06 F6 | 	mov	arg01, #0
15684     88 6F B1 FD | 	call	#__system___getiolock_0606
15688     FD 00 68 FC | 	wrlong	#0, result1
1568c     27 12 06 F6 | 	mov	arg01, #39
15690     00 14 06 F6 | 	mov	arg02, #0
15694     E4 D8 B0 FD | 	call	#_printerror
15698     2C 01 90 FD | 	jmp	#LR__1743
1569c                 | LR__1740
1569c     3C 7F BF FD | 	call	#_pop
156a0     FF 16 02 F6 | 	mov	arg03, result3
156a4     A7 FA 61 FC | 	wrlong	result1, fp
156a8     04 4E 05 F1 | 	add	fp, #4
156ac     A7 FC 61 FC | 	wrlong	result2, fp
156b0     04 4E 05 F1 | 	add	fp, #4
156b4     A7 16 62 FC | 	wrlong	arg03, fp
156b8     08 4E 85 F1 | 	sub	fp, #8
156bc     A7 12 02 F6 | 	mov	arg01, fp
156c0     FC 80 BF FD | 	call	#_converttoint
156c4     FD 16 02 F6 | 	mov	arg03, result1
156c8     14 4E 05 F1 | 	add	fp, #20
156cc     A7 16 62 FC | 	wrlong	arg03, fp
156d0     14 4E 85 F1 | 	sub	fp, #20
156d4     04 7F BF FD | 	call	#_pop
156d8     FF 16 02 F6 | 	mov	arg03, result3
156dc     A7 FA 61 FC | 	wrlong	result1, fp
156e0     04 4E 05 F1 | 	add	fp, #4
156e4     A7 FC 61 FC | 	wrlong	result2, fp
156e8     04 4E 05 F1 | 	add	fp, #4
156ec     A7 16 62 FC | 	wrlong	arg03, fp
156f0     08 4E 85 F1 | 	sub	fp, #8
156f4     A7 12 02 F6 | 	mov	arg01, fp
156f8     C4 80 BF FD | 	call	#_converttoint
156fc     FD 16 02 F6 | 	mov	arg03, result1
15700     10 4E 05 F1 | 	add	fp, #16
15704     A7 16 62 FC | 	wrlong	arg03, fp
15708     10 4E 85 F1 | 	sub	fp, #16
1570c     CC 7E BF FD | 	call	#_pop
15710     FF 16 02 F6 | 	mov	arg03, result3
15714     A7 FA 61 FC | 	wrlong	result1, fp
15718     04 4E 05 F1 | 	add	fp, #4
1571c     A7 FC 61 FC | 	wrlong	result2, fp
15720     04 4E 05 F1 | 	add	fp, #4
15724     A7 16 62 FC | 	wrlong	arg03, fp
15728                 | ' t1=pop() : arg2=converttoint(t1)
15728                 | ' t1=pop() : arg1=converttoint(t1)
15728                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15728     08 4E 85 F1 | 	sub	fp, #8
1572c     2B 16 0E F2 | 	cmp	arg03, #43 wz
15730     18 00 90 5D |  if_ne	jmp	#LR__1741
15734     A7 12 02 FB | 	rdlong	arg01, fp
15738     18 80 BF FD | 	call	#_convertstring
1573c     A7 FA 61 FC | 	wrlong	result1, fp
15740     08 4E 05 F1 | 	add	fp, #8
15744     A7 3E 68 FC | 	wrlong	#31, fp
15748     08 4E 85 F1 | 	sub	fp, #8
1574c                 | LR__1741
1574c                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
1574c     08 4E 05 F1 | 	add	fp, #8
15750     A7 16 02 FB | 	rdlong	arg03, fp
15754     08 4E 85 F1 | 	sub	fp, #8
15758     1F 16 0E F2 | 	cmp	arg03, #31 wz
1575c     40 00 90 AD |  if_e	jmp	#LR__1742
15760     00 12 06 F6 | 	mov	arg01, #0
15764     A8 6E B1 FD | 	call	#__system___getiolock_0606
15768     FD 12 02 F6 | 	mov	arg01, result1
1576c     FC 11 B1 FD | 	call	#__system___lockmem
15770     B7 01 00 FF 
15774     E5 14 06 F6 | 	mov	arg02, ##@LR__5926
15778     00 12 06 F6 | 	mov	arg01, #0
1577c     00 16 06 F6 | 	mov	arg03, #0
15780     E0 1E B1 FD | 	call	#__system___basic_print_string
15784     00 12 06 F6 | 	mov	arg01, #0
15788     84 6E B1 FD | 	call	#__system___getiolock_0606
1578c     FD 00 68 FC | 	wrlong	#0, result1
15790     0F 12 06 F6 | 	mov	arg01, #15
15794     00 14 06 F6 | 	mov	arg02, #0
15798     E0 D7 B0 FD | 	call	#_printerror
1579c     28 00 90 FD | 	jmp	#LR__1743
157a0                 | LR__1742
157a0     A7 12 02 FB | 	rdlong	arg01, fp
157a4     10 4E 05 F1 | 	add	fp, #16
157a8     A7 14 02 FB | 	rdlong	arg02, fp
157ac     04 4E 05 F1 | 	add	fp, #4
157b0     A7 16 02 FB | 	rdlong	arg03, fp
157b4     14 4E 85 F1 | 	sub	fp, #20
157b8     48 33 B1 FD | 	call	#__system__Mid_S
157bc     A7 FA 61 FC | 	wrlong	result1, fp
157c0     A7 12 02 F6 | 	mov	arg01, fp
157c4     AC 7E BF FD | 	call	#_push
157c8                 | LR__1743
157c8     A7 F0 03 F6 | 	mov	ptra, fp
157cc     B2 00 A0 FD | 	call	#popregs_
157d0                 | _do_mid_ret
157d0     2D 00 64 FD | 	ret
157d4                 | 
157d4                 | ' 
157d4                 | ' '-------------------- mkdir
157d4                 | ' 
157d4                 | ' sub do_mkdir
157d4                 | _do_mkdir
157d4     04 4A 05 F6 | 	mov	COUNT_, #4
157d8     A8 00 A0 FD | 	call	#pushregs_
157dc     FC 7D BF FD | 	call	#_pop
157e0     FE 18 02 F6 | 	mov	arg04, result2
157e4     FF 16 02 F6 | 	mov	arg03, result3
157e8     FD 26 02 F6 | 	mov	local01, result1
157ec     0C 29 02 F6 | 	mov	local02, arg04
157f0     0B 2B 02 F6 | 	mov	local03, arg03
157f4                 | ' 
157f4                 | ' t1=pop()
157f4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
157f4     2B 2A 0E F2 | 	cmp	local03, #43 wz
157f8     10 00 90 5D |  if_ne	jmp	#LR__1750
157fc     13 13 02 F6 | 	mov	arg01, local01
15800     50 7F BF FD | 	call	#_convertstring
15804     FD 26 02 F6 | 	mov	local01, result1
15808     1F 2A 06 F6 | 	mov	local03, #31
1580c                 | LR__1750
1580c                 | ' if t1.result_type<>result_string then printerror(15): return
1580c     1F 2A 0E F2 | 	cmp	local03, #31 wz
15810     10 00 90 AD |  if_e	jmp	#LR__1751
15814     0F 12 06 F6 | 	mov	arg01, #15
15818     00 14 06 F6 | 	mov	arg02, #0
1581c     5C D7 B0 FD | 	call	#_printerror
15820     64 00 90 FD | 	jmp	#LR__1753
15824                 | LR__1751
15824     13 13 02 F6 | 	mov	arg01, local01
15828     14 3A B1 FD | 	call	#__system___mkdir
1582c     FD 2C 0A F6 | 	mov	local04, result1 wz
15830                 | ' filename$=t1.result.sresult
15830                 | ' err=mkdir(filename$)
15830                 | ' 'err=geterr() : 
15830                 | ' if err<>0 then print "Cannot create a directory: system error "; err
15830     54 00 90 AD |  if_e	jmp	#LR__1752
15834     00 12 06 F6 | 	mov	arg01, #0
15838     D4 6D B1 FD | 	call	#__system___getiolock_0606
1583c     FD 12 02 F6 | 	mov	arg01, result1
15840     28 11 B1 FD | 	call	#__system___lockmem
15844     B7 01 00 FF 
15848     EC 14 06 F6 | 	mov	arg02, ##@LR__5927
1584c     00 12 06 F6 | 	mov	arg01, #0
15850     00 16 06 F6 | 	mov	arg03, #0
15854     0C 1E B1 FD | 	call	#__system___basic_print_string
15858     00 12 06 F6 | 	mov	arg01, #0
1585c     16 15 02 F6 | 	mov	arg02, local04
15860     00 16 06 F6 | 	mov	arg03, #0
15864     0A 18 06 F6 | 	mov	arg04, #10
15868     3C 1E B1 FD | 	call	#__system___basic_print_integer
1586c     00 12 06 F6 | 	mov	arg01, #0
15870     0A 14 06 F6 | 	mov	arg02, #10
15874     00 16 06 F6 | 	mov	arg03, #0
15878     90 1D B1 FD | 	call	#__system___basic_print_char
1587c     00 12 06 F6 | 	mov	arg01, #0
15880     8C 6D B1 FD | 	call	#__system___getiolock_0606
15884     FD 00 68 FC | 	wrlong	#0, result1
15888                 | LR__1752
15888                 | LR__1753
15888     A7 F0 03 F6 | 	mov	ptra, fp
1588c     B2 00 A0 FD | 	call	#popregs_
15890                 | _do_mkdir_ret
15890     2D 00 64 FD | 	ret
15894                 | 
15894                 | ' 
15894                 | ' '-------------------- mode
15894                 | ' 
15894                 | ' sub do_mode
15894                 | _do_mode
15894     05 4A 05 F6 | 	mov	COUNT_, #5
15898     A8 00 A0 FD | 	call	#pushregs_
1589c     3C 7D BF FD | 	call	#_pop
158a0     FD 26 02 F6 | 	mov	local01, result1
158a4     FE 28 02 F6 | 	mov	local02, result2
158a8     FF 2A 02 F6 | 	mov	local03, result3
158ac                 | ' t1=pop() 
158ac                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
158ac     1E 2A 0E F2 | 	cmp	local03, #30 wz
158b0     10 00 90 5D |  if_ne	jmp	#LR__1760
158b4     13 13 02 F6 | 	mov	arg01, local01
158b8     00 14 06 F6 | 	mov	arg02, #0
158bc     F0 43 B1 FD | 	call	#__system___float_tointeger
158c0     FD 26 02 F6 | 	mov	local01, result1
158c4                 | LR__1760
158c4                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
158c4     1F 2A 0E F2 | 	cmp	local03, #31 wz
158c8     18 00 90 5D |  if_ne	jmp	#LR__1761
158cc     13 13 02 F6 | 	mov	arg01, local01
158d0     20 47 B1 FD | 	call	#__system____builtin_atof
158d4     FD 12 02 F6 | 	mov	arg01, result1
158d8     00 14 06 F6 | 	mov	arg02, #0
158dc     D0 43 B1 FD | 	call	#__system___float_tointeger
158e0     FD 26 02 F6 | 	mov	local01, result1
158e4                 | LR__1761
158e4                 | ' select case t1.result.iresult
158e4     13 2D 02 F6 | 	mov	local04, local01
158e8     05 2C 26 F3 | 	fle	local04, #5
158ec     30 2C 62 FD | 	jmprel	local04
158f0                 | LR__1762
158f0     14 00 90 FD | 	jmp	#LR__1763
158f4     A8 00 90 FD | 	jmp	#LR__1764
158f8     10 01 90 FD | 	jmp	#LR__1765
158fc     78 01 90 FD | 	jmp	#LR__1766
15900     E0 01 90 FD | 	jmp	#LR__1767
15904     70 02 90 FD | 	jmp	#LR__1768
15908                 | LR__1763
15908     37 00 00 FF 
1590c     40 E4 05 F1 | 	add	objptr, ##28224
15910     F2 02 68 FC | 	wrlong	#1, objptr
15914     04 E4 85 F1 | 	sub	objptr, #4
15918     F2 34 69 FC | 	wrlong	#154, objptr
1591c     19 00 00 FF 
15920     00 E5 05 F1 | 	add	objptr, ##13056
15924     F2 02 68 FC | 	wrlong	#1, objptr
15928     19 00 00 FF 
1592c     04 E5 85 F1 | 	sub	objptr, ##13060
15930     F2 26 69 FC | 	wrlong	#147, objptr
15934     37 00 00 FF 
15938     38 E4 85 F1 | 	sub	objptr, ##28216
1593c     04 12 06 F6 | 	mov	arg01, #4
15940     54 F2 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15944     37 00 00 FF 
15948     3C E4 05 F1 | 	add	objptr, ##28220
1594c     F2 12 02 FB | 	rdlong	arg01, objptr
15950     04 E4 85 F1 | 	sub	objptr, #4
15954     F2 14 02 FB | 	rdlong	arg02, objptr
15958                 | ' 
15958                 | ' write_color:=ff
15958     36 00 00 FF 
1595c     F7 E5 85 F1 | 	sub	objptr, ##28151
15960     F2 12 62 FC | 	wrlong	arg01, objptr
15964                 | ' write_background:=bb
15964     04 E4 05 F1 | 	add	objptr, #4
15968     F2 14 62 FC | 	wrlong	arg02, objptr
1596c     01 00 00 FF 
15970     00 EA 05 F1 | 	add	ptr__dat__, ##512
15974     52 00 00 FF 
15978     5F E4 05 F1 | 	add	objptr, ##42079
1597c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15980     04 E4 85 F1 | 	sub	objptr, #4
15984     03 00 80 FF 
15988     F2 30 69 FC | 	wrlong	##1688, objptr
1598c     52 00 00 FF 
15990     A0 E4 85 F1 | 	sub	objptr, ##42144
15994     01 00 00 FF 
15998     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1599c     D8 01 90 FD | 	jmp	#LR__1768
159a0                 | LR__1764
159a0     37 00 00 FF 
159a4     40 E4 05 F1 | 	add	objptr, ##28224
159a8     F2 00 68 FC | 	wrlong	#0, objptr
159ac     04 E4 85 F1 | 	sub	objptr, #4
159b0     F2 2E 68 FC | 	wrlong	#23, objptr
159b4     19 00 00 FF 
159b8     00 E5 05 F1 | 	add	objptr, ##13056
159bc     F2 00 68 FC | 	wrlong	#0, objptr
159c0     19 00 00 FF 
159c4     04 E5 85 F1 | 	sub	objptr, ##13060
159c8     F2 00 68 FC | 	wrlong	#0, objptr
159cc     37 00 00 FF 
159d0     38 E4 85 F1 | 	sub	objptr, ##28216
159d4     00 12 06 F6 | 	mov	arg01, #0
159d8     BC F1 B0 FD | 	call	#_hg010b_spin2_setfontfamily
159dc     37 00 00 FF 
159e0     3C E4 05 F1 | 	add	objptr, ##28220
159e4     F2 12 02 FB | 	rdlong	arg01, objptr
159e8     04 E4 85 F1 | 	sub	objptr, #4
159ec     F2 14 02 FB | 	rdlong	arg02, objptr
159f0                 | ' 
159f0                 | ' write_color:=ff
159f0     36 00 00 FF 
159f4     F7 E5 85 F1 | 	sub	objptr, ##28151
159f8     F2 12 62 FC | 	wrlong	arg01, objptr
159fc                 | ' write_background:=bb
159fc     04 E4 05 F1 | 	add	objptr, #4
15a00     F2 14 62 FC | 	wrlong	arg02, objptr
15a04     45 E4 85 F1 | 	sub	objptr, #69
15a08     6C 01 90 FD | 	jmp	#LR__1768
15a0c                 | LR__1765
15a0c     37 00 00 FF 
15a10     40 E4 05 F1 | 	add	objptr, ##28224
15a14     F2 00 68 FC | 	wrlong	#0, objptr
15a18     04 E4 85 F1 | 	sub	objptr, #4
15a1c     F2 6A 69 FC | 	wrlong	#181, objptr
15a20     19 00 00 FF 
15a24     00 E5 05 F1 | 	add	objptr, ##13056
15a28     F2 00 68 FC | 	wrlong	#0, objptr
15a2c     19 00 00 FF 
15a30     04 E5 85 F1 | 	sub	objptr, ##13060
15a34     F2 00 68 FC | 	wrlong	#0, objptr
15a38     37 00 00 FF 
15a3c     38 E4 85 F1 | 	sub	objptr, ##28216
15a40     00 12 06 F6 | 	mov	arg01, #0
15a44     50 F1 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15a48     37 00 00 FF 
15a4c     3C E4 05 F1 | 	add	objptr, ##28220
15a50     F2 12 02 FB | 	rdlong	arg01, objptr
15a54     04 E4 85 F1 | 	sub	objptr, #4
15a58     F2 14 02 FB | 	rdlong	arg02, objptr
15a5c                 | ' 
15a5c                 | ' write_color:=ff
15a5c     36 00 00 FF 
15a60     F7 E5 85 F1 | 	sub	objptr, ##28151
15a64     F2 12 62 FC | 	wrlong	arg01, objptr
15a68                 | ' write_background:=bb
15a68     04 E4 05 F1 | 	add	objptr, #4
15a6c     F2 14 62 FC | 	wrlong	arg02, objptr
15a70     45 E4 85 F1 | 	sub	objptr, #69
15a74     00 01 90 FD | 	jmp	#LR__1768
15a78                 | LR__1766
15a78     37 00 00 FF 
15a7c     40 E4 05 F1 | 	add	objptr, ##28224
15a80     F2 00 68 FC | 	wrlong	#0, objptr
15a84     04 E4 85 F1 | 	sub	objptr, #4
15a88     F2 1E 68 FC | 	wrlong	#15, objptr
15a8c     19 00 00 FF 
15a90     00 E5 05 F1 | 	add	objptr, ##13056
15a94     F2 00 68 FC | 	wrlong	#0, objptr
15a98     19 00 00 FF 
15a9c     04 E5 85 F1 | 	sub	objptr, ##13060
15aa0     F2 00 68 FC | 	wrlong	#0, objptr
15aa4     37 00 00 FF 
15aa8     38 E4 85 F1 | 	sub	objptr, ##28216
15aac     00 12 06 F6 | 	mov	arg01, #0
15ab0     E4 F0 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15ab4     37 00 00 FF 
15ab8     3C E4 05 F1 | 	add	objptr, ##28220
15abc     F2 12 02 FB | 	rdlong	arg01, objptr
15ac0     04 E4 85 F1 | 	sub	objptr, #4
15ac4     F2 14 02 FB | 	rdlong	arg02, objptr
15ac8                 | ' 
15ac8                 | ' write_color:=ff
15ac8     36 00 00 FF 
15acc     F7 E5 85 F1 | 	sub	objptr, ##28151
15ad0     F2 12 62 FC | 	wrlong	arg01, objptr
15ad4                 | ' write_background:=bb
15ad4     04 E4 05 F1 | 	add	objptr, #4
15ad8     F2 14 62 FC | 	wrlong	arg02, objptr
15adc     45 E4 85 F1 | 	sub	objptr, #69
15ae0     94 00 90 FD | 	jmp	#LR__1768
15ae4                 | LR__1767
15ae4     37 00 00 FF 
15ae8     40 E4 05 F1 | 	add	objptr, ##28224
15aec     F2 02 68 FC | 	wrlong	#1, objptr
15af0     04 E4 85 F1 | 	sub	objptr, #4
15af4     F2 02 68 FC | 	wrlong	#1, objptr
15af8     19 00 00 FF 
15afc     00 E5 05 F1 | 	add	objptr, ##13056
15b00     F2 02 68 FC | 	wrlong	#1, objptr
15b04     19 00 00 FF 
15b08     04 E5 85 F1 | 	sub	objptr, ##13060
15b0c     F2 1C 68 FC | 	wrlong	#14, objptr
15b10     37 00 00 FF 
15b14     38 E4 85 F1 | 	sub	objptr, ##28216
15b18     04 12 06 F6 | 	mov	arg01, #4
15b1c     78 F0 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15b20     37 00 00 FF 
15b24     3C E4 05 F1 | 	add	objptr, ##28220
15b28     F2 12 02 FB | 	rdlong	arg01, objptr
15b2c     04 E4 85 F1 | 	sub	objptr, #4
15b30     F2 14 02 FB | 	rdlong	arg02, objptr
15b34                 | ' 
15b34                 | ' write_color:=ff
15b34     36 00 00 FF 
15b38     F7 E5 85 F1 | 	sub	objptr, ##28151
15b3c     F2 12 62 FC | 	wrlong	arg01, objptr
15b40                 | ' write_background:=bb
15b40     04 E4 05 F1 | 	add	objptr, #4
15b44     F2 14 62 FC | 	wrlong	arg02, objptr
15b48     07 00 00 FF 
15b4c     82 EB 05 F1 | 	add	ptr__dat__, ##3970
15b50     52 00 00 FF 
15b54     5F E4 05 F1 | 	add	objptr, ##42079
15b58     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15b5c     04 E4 85 F1 | 	sub	objptr, #4
15b60     03 00 80 FF 
15b64     F2 30 69 FC | 	wrlong	##1688, objptr
15b68     52 00 00 FF 
15b6c     A0 E4 85 F1 | 	sub	objptr, ##42144
15b70     07 00 00 FF 
15b74     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
15b78                 | LR__1768
15b78     52 00 00 FF 
15b7c     9C E4 05 F1 | 	add	objptr, ##42140
15b80     F2 26 62 FC | 	wrlong	local01, objptr
15b84     04 E4 85 F1 | 	sub	objptr, #4
15b88     F2 12 02 FB | 	rdlong	arg01, objptr
15b8c     0F 00 00 FF 
15b90     3C E4 85 F1 | 	sub	objptr, ##7740
15b94     F2 2E 02 FB | 	rdlong	local05, objptr
15b98     43 00 00 FF 
15b9c     5C E4 85 F1 | 	sub	objptr, ##34396
15ba0     17 13 82 F1 | 	sub	arg01, local05
15ba4     00 14 06 F6 | 	mov	arg02, #0
15ba8     0A 16 06 F6 | 	mov	arg03, #10
15bac     90 30 B1 FD | 	call	#__system__Number_S
15bb0     FD 12 02 F6 | 	mov	arg01, result1
15bb4     B7 01 00 FF 
15bb8     15 15 06 F6 | 	mov	arg02, ##@LR__5928
15bbc     08 0E B1 FD | 	call	#__system___string_concat
15bc0     50 00 00 FF 
15bc4     38 E5 05 F1 | 	add	objptr, ##41272
15bc8     F2 FA 61 FC | 	wrlong	result1, objptr
15bcc     19 00 00 FF 
15bd0     FC E4 85 F1 | 	sub	objptr, ##13052
15bd4     F2 12 02 FB | 	rdlong	arg01, objptr
15bd8     04 E4 85 F1 | 	sub	objptr, #4
15bdc     F2 14 02 FB | 	rdlong	arg02, objptr
15be0     37 00 00 FF 
15be4     38 E4 85 F1 | 	sub	objptr, ##28216
15be8     FC F0 B0 FD | 	call	#_hg010b_spin2_cls
15bec     B7 01 00 FF 
15bf0     27 13 06 F6 | 	mov	arg01, ##@LR__5929
15bf4                 | ' 
15bf4                 | ' write(text)
15bf4     B0 F4 B0 FD | 	call	#_hg010b_spin2_write
15bf8                 | ' crlf
15bf8     AC F9 B0 FD | 	call	#_hg010b_spin2_crlf
15bfc     18 00 00 FF 
15c00     40 EB 05 F1 | 	add	ptr__dat__, ##12608
15c04     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
15c08     18 00 00 FF 
15c0c     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
15c10                 | ' 
15c10                 | ' write(text)
15c10     94 F4 B0 FD | 	call	#_hg010b_spin2_write
15c14                 | ' crlf
15c14     90 F9 B0 FD | 	call	#_hg010b_spin2_crlf
15c18     50 00 00 FF 
15c1c     38 E5 05 F1 | 	add	objptr, ##41272
15c20     F2 12 02 FB | 	rdlong	arg01, objptr
15c24     50 00 00 FF 
15c28     38 E5 85 F1 | 	sub	objptr, ##41272
15c2c                 | ' 
15c2c                 | ' write(text)
15c2c     78 F4 B0 FD | 	call	#_hg010b_spin2_write
15c30                 | ' crlf
15c30     74 F9 B0 FD | 	call	#_hg010b_spin2_crlf
15c34     A7 F0 03 F6 | 	mov	ptra, fp
15c38     B2 00 A0 FD | 	call	#popregs_
15c3c                 | _do_mode_ret
15c3c     2D 00 64 FD | 	ret
15c40                 | 
15c40                 | ' 
15c40                 | ' '-------------------- mouse
15c40                 | ' 
15c40                 | ' sub do_mouse
15c40                 | _do_mouse
15c40     98 79 BF FD | 	call	#_pop
15c44     00 FA 4D F2 | 	cmps	result1, #0 wz
15c48                 | ' 
15c48                 | ' t1=pop()
15c48                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
15c48     14 00 90 5D |  if_ne	jmp	#LR__1770
15c4c     10 12 06 F6 | 	mov	arg01, #16
15c50     00 14 06 F6 | 	mov	arg02, #0
15c54     00 16 06 F6 | 	mov	arg03, #0
15c58     6C E3 B0 FD | 	call	#_hg010b_spin2_setspritesize
15c5c     10 00 90 FD | 	jmp	#LR__1771
15c60                 | LR__1770
15c60     10 12 06 F6 | 	mov	arg01, #16
15c64     20 14 06 F6 | 	mov	arg02, #32
15c68     20 16 06 F6 | 	mov	arg03, #32
15c6c     58 E3 B0 FD | 	call	#_hg010b_spin2_setspritesize
15c70                 | LR__1771
15c70                 | _do_mouse_ret
15c70     2D 00 64 FD | 	ret
15c74                 | 
15c74                 | ' 
15c74                 | ' '-------------------- mousek
15c74                 | ' 
15c74                 | ' sub do_mousek
15c74                 | _do_mousek
15c74     00 4A 05 F6 | 	mov	COUNT_, #0
15c78     A8 00 A0 FD | 	call	#pushregs_
15c7c     0C F0 07 F1 | 	add	ptra, #12
15c80     08 4E 05 F1 | 	add	fp, #8
15c84     A7 3A 68 FC | 	wrlong	#29, fp
15c88     08 4E 85 F1 | 	sub	fp, #8
15c8c     51 00 00 FF 
15c90     50 E5 05 F1 | 	add	objptr, ##41808
15c94     F2 12 02 FB | 	rdlong	arg01, objptr
15c98     51 00 00 FF 
15c9c     50 E5 85 F1 | 	sub	objptr, ##41808
15ca0     A7 12 62 FC | 	wrlong	arg01, fp
15ca4     A7 12 02 F6 | 	mov	arg01, fp
15ca8     C8 79 BF FD | 	call	#_push
15cac     A7 F0 03 F6 | 	mov	ptra, fp
15cb0     B2 00 A0 FD | 	call	#popregs_
15cb4                 | _do_mousek_ret
15cb4     2D 00 64 FD | 	ret
15cb8                 | 
15cb8                 | ' 
15cb8                 | ' '-------------------- mousew
15cb8                 | ' 
15cb8                 | ' sub do_mousew
15cb8                 | _do_mousew
15cb8     00 4A 05 F6 | 	mov	COUNT_, #0
15cbc     A8 00 A0 FD | 	call	#pushregs_
15cc0     0C F0 07 F1 | 	add	ptra, #12
15cc4     08 4E 05 F1 | 	add	fp, #8
15cc8     A7 38 68 FC | 	wrlong	#28, fp
15ccc     08 4E 85 F1 | 	sub	fp, #8
15cd0     51 00 00 FF 
15cd4     54 E5 05 F1 | 	add	objptr, ##41812
15cd8     F2 12 02 FB | 	rdlong	arg01, objptr
15cdc     51 00 00 FF 
15ce0     54 E5 85 F1 | 	sub	objptr, ##41812
15ce4     A7 12 62 FC | 	wrlong	arg01, fp
15ce8     A7 12 02 F6 | 	mov	arg01, fp
15cec     84 79 BF FD | 	call	#_push
15cf0     A7 F0 03 F6 | 	mov	ptra, fp
15cf4     B2 00 A0 FD | 	call	#popregs_
15cf8                 | _do_mousew_ret
15cf8     2D 00 64 FD | 	ret
15cfc                 | 
15cfc                 | ' 
15cfc                 | ' '-------------------- mousex
15cfc                 | ' 
15cfc                 | ' sub do_mousex
15cfc                 | _do_mousex
15cfc     00 4A 05 F6 | 	mov	COUNT_, #0
15d00     A8 00 A0 FD | 	call	#pushregs_
15d04     0C F0 07 F1 | 	add	ptra, #12
15d08     08 4E 05 F1 | 	add	fp, #8
15d0c     A7 3A 68 FC | 	wrlong	#29, fp
15d10     08 4E 85 F1 | 	sub	fp, #8
15d14     51 00 00 FF 
15d18     48 E5 05 F1 | 	add	objptr, ##41800
15d1c     F2 12 02 FB | 	rdlong	arg01, objptr
15d20     51 00 00 FF 
15d24     48 E5 85 F1 | 	sub	objptr, ##41800
15d28     A7 12 62 FC | 	wrlong	arg01, fp
15d2c     A7 12 02 F6 | 	mov	arg01, fp
15d30     40 79 BF FD | 	call	#_push
15d34     A7 F0 03 F6 | 	mov	ptra, fp
15d38     B2 00 A0 FD | 	call	#popregs_
15d3c                 | _do_mousex_ret
15d3c     2D 00 64 FD | 	ret
15d40                 | 
15d40                 | ' 
15d40                 | ' '-------------------- mousey
15d40                 | ' 
15d40                 | ' sub do_mousey
15d40                 | _do_mousey
15d40     00 4A 05 F6 | 	mov	COUNT_, #0
15d44     A8 00 A0 FD | 	call	#pushregs_
15d48     0C F0 07 F1 | 	add	ptra, #12
15d4c     08 4E 05 F1 | 	add	fp, #8
15d50     A7 3A 68 FC | 	wrlong	#29, fp
15d54     08 4E 85 F1 | 	sub	fp, #8
15d58     51 00 00 FF 
15d5c     4C E5 05 F1 | 	add	objptr, ##41804
15d60     F2 12 02 FB | 	rdlong	arg01, objptr
15d64     51 00 00 FF 
15d68     4C E5 85 F1 | 	sub	objptr, ##41804
15d6c     A7 12 62 FC | 	wrlong	arg01, fp
15d70     A7 12 02 F6 | 	mov	arg01, fp
15d74     FC 78 BF FD | 	call	#_push
15d78     A7 F0 03 F6 | 	mov	ptra, fp
15d7c     B2 00 A0 FD | 	call	#popregs_
15d80                 | _do_mousey_ret
15d80     2D 00 64 FD | 	ret
15d84                 | 
15d84                 | ' 
15d84                 | ' '------------------ new
15d84                 | ' 
15d84                 | ' sub do_new
15d84                 | _do_new
15d84     03 4A 05 F6 | 	mov	COUNT_, #3
15d88     A8 00 A0 FD | 	call	#pushregs_
15d8c                 | ' 
15d8c                 | ' if inrun=1 then inrun=2
15d8c     50 00 00 FF 
15d90     EC E4 05 F1 | 	add	objptr, ##41196
15d94     F2 16 02 FB | 	rdlong	arg03, objptr
15d98     50 00 00 FF 
15d9c     EC E4 85 F1 | 	sub	objptr, ##41196
15da0     01 16 0E F2 | 	cmp	arg03, #1 wz
15da4     50 00 00 AF 
15da8     EC E4 05 A1 |  if_e	add	objptr, ##41196
15dac     F2 04 68 AC |  if_e	wrlong	#2, objptr
15db0     50 00 00 AF 
15db4     EC E4 85 A1 |  if_e	sub	objptr, ##41196
15db8     13 12 C6 F9 | 	decod	arg01, #19
15dbc     01 14 66 F6 | 	neg	arg02, #1
15dc0     58 D3 B0 FD | 	call	#_pslpoke
15dc4     35 00 00 FF 
15dc8     08 E4 05 F1 | 	add	objptr, ##27144
15dcc     F2 00 68 FC | 	wrlong	#0, objptr
15dd0                 | ' pslpoke(memlo,$FFFFFFFF)
15dd0                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
15dd0     00 26 06 F6 | 	mov	local01, #0
15dd4     20 00 00 FF 
15dd8     10 E4 85 F1 | 	sub	objptr, ##16400
15ddc     97 1E 48 FB | 	callpa	#(@LR__1781-@LR__1780)>>2,fcache_load_ptr_
15de0                 | LR__1780
15de0     13 17 02 F6 | 	mov	arg03, local01
15de4     04 16 66 F0 | 	shl	arg03, #4
15de8     F2 16 02 F1 | 	add	arg03, objptr
15dec     B7 01 00 FF 
15df0     28 15 06 F6 | 	mov	arg02, ##@LR__5930
15df4     0B 15 62 FC | 	wrlong	arg02, arg03
15df8     13 29 02 F6 | 	mov	local02, local01
15dfc     04 28 66 F0 | 	shl	local02, #4
15e00     F2 28 02 F1 | 	add	local02, objptr
15e04     0C 28 06 F1 | 	add	local02, #12
15e08     14 01 68 FC | 	wrlong	#0, local02
15e0c     01 26 06 F1 | 	add	local01, #1
15e10     02 00 00 FF 
15e14     01 26 56 F2 | 	cmps	local01, ##1025 wc
15e18     C4 FF 9F CD |  if_b	jmp	#LR__1780
15e1c                 | LR__1781
15e1c     35 00 00 FF 
15e20     90 E4 05 F1 | 	add	objptr, ##27280
15e24     00 04 80 FF 
15e28     F2 00 68 FC | 	wrlong	##524288, objptr
15e2c     06 00 00 FF 
15e30     30 E4 05 F1 | 	add	objptr, ##3120
15e34     00 04 80 FF 
15e38     F2 00 68 FC | 	wrlong	##524288, objptr
15e3c     04 E4 05 F1 | 	add	objptr, #4
15e40     00 04 80 FF 
15e44     F2 00 68 FC | 	wrlong	##524288, objptr
15e48     0D 00 00 FF 
15e4c     64 E4 85 F1 | 	sub	objptr, ##6756
15e50     F2 00 68 FC | 	wrlong	#0, objptr
15e54     07 00 00 FF 
15e58     24 E4 05 F1 | 	add	objptr, ##3620
15e5c     F2 00 68 FC | 	wrlong	#0, objptr
15e60     07 00 00 FF 
15e64     20 E4 85 F1 | 	sub	objptr, ##3616
15e68     00 04 80 FF 
15e6c     F2 00 68 FC | 	wrlong	##524288, objptr
15e70     0D 00 00 FF 
15e74     D0 E4 05 F1 | 	add	objptr, ##6864
15e78     F2 00 68 FC | 	wrlong	#0, objptr
15e7c     B7 01 00 FF 
15e80     29 2B 06 F6 | 	mov	local03, ##@LR__5931
15e84     01 00 00 FF 
15e88     B0 E5 05 F1 | 	add	objptr, ##944
15e8c     F2 2A 62 FC | 	wrlong	local03, objptr
15e90     08 00 00 FF 
15e94     50 E4 85 F1 | 	sub	objptr, ##4176
15e98     F2 00 68 FC | 	wrlong	#0, objptr
15e9c     04 E4 05 F1 | 	add	objptr, #4
15ea0     FF FF FF FF 
15ea4     F2 FE 6B FC | 	wrlong	##-1, objptr
15ea8     06 00 00 FF 
15eac     A0 E4 05 F1 | 	add	objptr, ##3232
15eb0     F2 00 68 FC | 	wrlong	#0, objptr
15eb4     04 E4 05 F1 | 	add	objptr, #4
15eb8     F2 00 68 FC | 	wrlong	#0, objptr
15ebc                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
15ebc                 | ' stackpointer=0
15ebc                 | ' lineptr=0 
15ebc                 | ' programptr=memlo ': stringptr=0
15ebc                 | ' dataptr=0 : readline=""
15ebc                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
15ebc                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
15ebc     00 26 06 F6 | 	mov	local01, #0
15ec0     06 00 00 FF 
15ec4     9C E4 85 F1 | 	sub	objptr, ##3228
15ec8     97 16 48 FB | 	callpa	#(@LR__1783-@LR__1782)>>2,fcache_load_ptr_
15ecc                 | LR__1782
15ecc     13 29 02 F6 | 	mov	local02, local01
15ed0     02 28 66 F0 | 	shl	local02, #2
15ed4     13 29 02 F1 | 	add	local02, local01
15ed8     02 28 66 F0 | 	shl	local02, #2
15edc     F2 28 02 F1 | 	add	local02, objptr
15ee0     08 28 06 F1 | 	add	local02, #8
15ee4     FF FF FF FF 
15ee8     14 FF 6B FC | 	wrlong	##-1, local02
15eec     01 26 06 F1 | 	add	local01, #1
15ef0     41 26 56 F2 | 	cmps	local01, #65 wc
15ef4     D4 FF 9F CD |  if_b	jmp	#LR__1782
15ef8                 | LR__1783
15ef8     4A 00 00 FF 
15efc     98 E4 85 F1 | 	sub	objptr, ##38040
15f00                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
15f00     00 26 06 F6 | 	mov	local01, #0
15f04                 | LR__1784
15f04     13 29 02 F6 | 	mov	local02, local01
15f08     02 28 66 F0 | 	shl	local02, #2
15f0c     52 00 00 FF 
15f10     54 E4 05 F1 | 	add	objptr, ##42068
15f14     F2 28 02 F1 | 	add	local02, objptr
15f18     14 2B 0A FB | 	rdlong	local03, local02 wz
15f1c     52 00 00 FF 
15f20     54 E4 85 F1 | 	sub	objptr, ##42068
15f24     34 00 90 AD |  if_e	jmp	#LR__1785
15f28     13 13 02 F6 | 	mov	arg01, local01
15f2c     00 14 06 F6 | 	mov	arg02, #0
15f30     00 16 06 F6 | 	mov	arg03, #0
15f34     90 E0 B0 FD | 	call	#_hg010b_spin2_setspritesize
15f38     13 29 02 F6 | 	mov	local02, local01
15f3c     02 28 66 F0 | 	shl	local02, #2
15f40     52 00 00 FF 
15f44     54 E4 05 F1 | 	add	objptr, ##42068
15f48     F2 28 02 F1 | 	add	local02, objptr
15f4c     14 13 02 FB | 	rdlong	arg01, local02
15f50     52 00 00 FF 
15f54     54 E4 85 F1 | 	sub	objptr, ##42068
15f58     F0 4C B1 FD | 	call	#__system___gc_free
15f5c                 | LR__1785
15f5c     01 26 06 F1 | 	add	local01, #1
15f60     10 26 56 F2 | 	cmps	local01, #16 wc
15f64     9C FF 9F CD |  if_b	jmp	#LR__1784
15f68     52 00 00 FF 
15f6c     A8 E4 05 F1 | 	add	objptr, ##42152
15f70     00 C0 9F FF 
15f74     F2 00 68 FC | 	wrlong	##1065353216, objptr
15f78     04 E4 05 F1 | 	add	objptr, #4
15f7c     00 C0 9F FF 
15f80     F2 00 68 FC | 	wrlong	##1065353216, objptr
15f84     52 00 00 FF 
15f88     A8 E4 85 F1 | 	sub	objptr, ##42152
15f8c     F2 2A 02 FB | 	rdlong	local03, objptr
15f90     52 00 00 FF 
15f94     94 E4 05 F1 | 	add	objptr, ##42132
15f98     F2 2A 62 FC | 	wrlong	local03, objptr
15f9c     52 00 00 FF 
15fa0     98 E4 85 F1 | 	sub	objptr, ##42136
15fa4     11 12 06 F6 | 	mov	arg01, #17
15fa8     08 14 06 F6 | 	mov	arg02, #8
15fac     10 16 06 F6 | 	mov	arg03, #16
15fb0     14 E0 B0 FD | 	call	#_hg010b_spin2_setspritesize
15fb4     10 12 06 F6 | 	mov	arg01, #16
15fb8     20 14 06 F6 | 	mov	arg02, #32
15fbc     20 16 06 F6 | 	mov	arg03, #32
15fc0     04 E0 B0 FD | 	call	#_hg010b_spin2_setspritesize
15fc4     B7 01 00 FF 
15fc8     2A 2B 06 F6 | 	mov	local03, ##@LR__5932
15fcc     52 00 00 FF 
15fd0     C4 E4 05 F1 | 	add	objptr, ##42180
15fd4     F2 2A 62 FC | 	wrlong	local03, objptr
15fd8     52 00 00 FF 
15fdc     C4 E4 85 F1 | 	sub	objptr, ##42180
15fe0     90 C3 B0 FD | 	call	#_init_audio
15fe4     A7 F0 03 F6 | 	mov	ptra, fp
15fe8     B2 00 A0 FD | 	call	#popregs_
15fec                 | _do_new_ret
15fec     2D 00 64 FD | 	ret
15ff0                 | 
15ff0                 | ' 
15ff0                 | ' '-------------------- next
15ff0                 | ' 
15ff0                 | ' sub do_next()
15ff0                 | _do_next
15ff0     04 4A 05 F6 | 	mov	COUNT_, #4
15ff4     A8 00 A0 FD | 	call	#pushregs_
15ff8     E0 75 BF FD | 	call	#_pop
15ffc     FD 26 02 F6 | 	mov	local01, result1
16000     FE 28 02 F6 | 	mov	local02, result2
16004     FF 2A 02 F6 | 	mov	local03, result3
16008                 | ' t1=pop() :varnum=t1.result.uresult
16008                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
16008     50 00 00 FF 
1600c     30 E5 05 F1 | 	add	objptr, ##41264
16010     F2 14 02 FB | 	rdlong	arg02, objptr
16014     0A 13 02 F6 | 	mov	arg01, arg02
16018     02 12 66 F0 | 	shl	arg01, #2
1601c     0A 13 02 F1 | 	add	arg01, arg02
16020     02 12 66 F0 | 	shl	arg01, #2
16024     06 00 00 FF 
16028     98 E4 85 F1 | 	sub	objptr, ##3224
1602c     F2 12 02 F1 | 	add	arg01, objptr
16030     08 12 06 F1 | 	add	arg01, #8
16034     09 15 02 FB | 	rdlong	arg02, arg01
16038     13 15 0A F2 | 	cmp	arg02, local01 wz
1603c     4A 00 00 FF 
16040     98 E4 85 F1 | 	sub	objptr, ##38040
16044     10 00 90 AD |  if_e	jmp	#LR__1790
16048     25 12 06 F6 | 	mov	arg01, #37
1604c     00 14 06 F6 | 	mov	arg02, #0
16050     28 CF B0 FD | 	call	#_printerror
16054     54 03 90 FD | 	jmp	#LR__1797
16058                 | LR__1790
16058                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
16058     13 15 02 F6 | 	mov	arg02, local01
1605c     04 14 66 F0 | 	shl	arg02, #4
16060     14 00 00 FF 
16064     F8 E5 05 F1 | 	add	objptr, ##10744
16068     F2 14 02 F1 | 	add	arg02, objptr
1606c     0C 14 06 F1 | 	add	arg02, #12
16070     0A 15 02 FB | 	rdlong	arg02, arg02
16074     1E 14 0E F2 | 	cmp	arg02, #30 wz
16078     14 00 00 FF 
1607c     F8 E5 85 F1 | 	sub	objptr, ##10744
16080     54 00 90 5D |  if_ne	jmp	#LR__1791
16084     13 15 02 F6 | 	mov	arg02, local01
16088     04 14 66 F0 | 	shl	arg02, #4
1608c     14 00 00 FF 
16090     F8 E5 05 F1 | 	add	objptr, ##10744
16094     F2 14 02 F1 | 	add	arg02, objptr
16098     0C 14 06 F1 | 	add	arg02, #12
1609c     0A 39 68 FC | 	wrlong	#28, arg02
160a0     13 2D 02 F6 | 	mov	local04, local01
160a4     04 2C 66 F0 | 	shl	local04, #4
160a8     F2 2C 02 F1 | 	add	local04, objptr
160ac     13 15 02 F6 | 	mov	arg02, local01
160b0     04 14 66 F0 | 	shl	arg02, #4
160b4     F2 14 02 F1 | 	add	arg02, objptr
160b8     04 14 06 F1 | 	add	arg02, #4
160bc     0A 13 02 FB | 	rdlong	arg01, arg02
160c0     14 00 00 FF 
160c4     F8 E5 85 F1 | 	sub	objptr, ##10744
160c8     01 14 06 F6 | 	mov	arg02, #1
160cc     E0 3B B1 FD | 	call	#__system___float_tointeger
160d0     04 2C 06 F1 | 	add	local04, #4
160d4     16 FB 61 FC | 	wrlong	result1, local04
160d8                 | LR__1791
160d8     50 00 00 FF 
160dc     30 E5 05 F1 | 	add	objptr, ##41264
160e0     F2 2C 02 FB | 	rdlong	local04, objptr
160e4     16 15 02 F6 | 	mov	arg02, local04
160e8     02 14 66 F0 | 	shl	arg02, #2
160ec     16 15 02 F1 | 	add	arg02, local04
160f0     02 14 66 F0 | 	shl	arg02, #2
160f4     06 00 00 FF 
160f8     98 E4 85 F1 | 	sub	objptr, ##3224
160fc     F2 14 02 F1 | 	add	arg02, objptr
16100     0C 14 06 F1 | 	add	arg02, #12
16104     0A FF 01 FB | 	rdlong	result3, arg02
16108     13 2D 02 F6 | 	mov	local04, local01
1610c     04 2C 66 F0 | 	shl	local04, #4
16110     35 00 00 FF 
16114     A0 E4 85 F1 | 	sub	objptr, ##27296
16118     F2 2C 02 F1 | 	add	local04, objptr
1611c     13 15 02 F6 | 	mov	arg02, local01
16120     04 14 66 F0 | 	shl	arg02, #4
16124     F2 14 02 F1 | 	add	arg02, objptr
16128     04 14 06 F1 | 	add	arg02, #4
1612c     0A 13 02 FB | 	rdlong	arg01, arg02
16130     FF 12 02 F1 | 	add	arg01, result3
16134     04 2C 06 F1 | 	add	local04, #4
16138     16 13 62 FC | 	wrlong	arg01, local04
1613c                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
1613c                 | ' if fortable(fortop).stepval>=0 then
1613c     3B 00 00 FF 
16140     38 E5 05 F1 | 	add	objptr, ##30520
16144     F2 2C 02 FB | 	rdlong	local04, objptr
16148     16 13 02 F6 | 	mov	arg01, local04
1614c     02 12 66 F0 | 	shl	arg01, #2
16150     16 13 02 F1 | 	add	arg01, local04
16154     02 12 66 F0 | 	shl	arg01, #2
16158     06 00 00 FF 
1615c     98 E4 85 F1 | 	sub	objptr, ##3224
16160     F2 12 02 F1 | 	add	arg01, objptr
16164     0C 12 06 F1 | 	add	arg01, #12
16168     09 13 02 FB | 	rdlong	arg01, arg01
1616c     00 12 56 F2 | 	cmps	arg01, #0 wc
16170     4A 00 00 FF 
16174     98 E4 85 F1 | 	sub	objptr, ##38040
16178     78 00 90 CD |  if_b	jmp	#LR__1792
1617c                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
1617c     04 26 66 F0 | 	shl	local01, #4
16180     14 00 00 FF 
16184     F8 E5 05 F1 | 	add	objptr, ##10744
16188     F2 26 02 F1 | 	add	local01, objptr
1618c     3B 00 00 FF 
16190     38 E5 05 F1 | 	add	objptr, ##30520
16194     F2 12 02 FB | 	rdlong	arg01, objptr
16198     09 2D 02 F6 | 	mov	local04, arg01
1619c     02 2C 66 F0 | 	shl	local04, #2
161a0     09 2D 02 F1 | 	add	local04, arg01
161a4     02 2C 66 F0 | 	shl	local04, #2
161a8     06 00 00 FF 
161ac     98 E4 85 F1 | 	sub	objptr, ##3224
161b0     F2 2C 02 F1 | 	add	local04, objptr
161b4     04 26 06 F1 | 	add	local01, #4
161b8     13 27 02 FB | 	rdlong	local01, local01
161bc     10 2C 06 F1 | 	add	local04, #16
161c0     16 2D 02 FB | 	rdlong	local04, local04
161c4     16 27 5A F2 | 	cmps	local01, local04 wcz
161c8     4A 00 00 FF 
161cc     98 E4 85 F1 | 	sub	objptr, ##38040
161d0     9C 00 90 ED |  if_be	jmp	#LR__1794
161d4     50 00 00 FF 
161d8     30 E5 05 F1 | 	add	objptr, ##41264
161dc     F2 2C 02 FB | 	rdlong	local04, objptr
161e0     01 2C 86 F1 | 	sub	local04, #1
161e4     F2 2C 62 FC | 	wrlong	local04, objptr
161e8     50 00 00 FF 
161ec     30 E5 85 F1 | 	sub	objptr, ##41264
161f0     B8 01 90 FD | 	jmp	#LR__1797
161f4                 | LR__1792
161f4                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
161f4     13 2D 02 F6 | 	mov	local04, local01
161f8     04 2C 66 F0 | 	shl	local04, #4
161fc     14 00 00 FF 
16200     F8 E5 05 F1 | 	add	objptr, ##10744
16204     F2 2C 02 F1 | 	add	local04, objptr
16208     3B 00 00 FF 
1620c     38 E5 05 F1 | 	add	objptr, ##30520
16210     F2 26 02 FB | 	rdlong	local01, objptr
16214     13 13 02 F6 | 	mov	arg01, local01
16218     02 12 66 F0 | 	shl	arg01, #2
1621c     13 13 02 F1 | 	add	arg01, local01
16220     02 12 66 F0 | 	shl	arg01, #2
16224     06 00 00 FF 
16228     98 E4 85 F1 | 	sub	objptr, ##3224
1622c     F2 12 02 F1 | 	add	arg01, objptr
16230     04 2C 06 F1 | 	add	local04, #4
16234     16 2D 02 FB | 	rdlong	local04, local04
16238     10 12 06 F1 | 	add	arg01, #16
1623c     09 13 02 FB | 	rdlong	arg01, arg01
16240     09 2D 52 F2 | 	cmps	local04, arg01 wc
16244     4A 00 00 FF 
16248     98 E4 85 F1 | 	sub	objptr, ##38040
1624c     20 00 90 3D |  if_ae	jmp	#LR__1793
16250     50 00 00 FF 
16254     30 E5 05 F1 | 	add	objptr, ##41264
16258     F2 2C 02 FB | 	rdlong	local04, objptr
1625c     01 2C 86 F1 | 	sub	local04, #1
16260     F2 2C 62 FC | 	wrlong	local04, objptr
16264     50 00 00 FF 
16268     30 E5 85 F1 | 	sub	objptr, ##41264
1626c     3C 01 90 FD | 	jmp	#LR__1797
16270                 | LR__1793
16270                 | LR__1794
16270                 | ' ' if not returned, goto pointer 
16270                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
16270     50 00 00 FF 
16274     EC E4 05 F1 | 	add	objptr, ##41196
16278     F2 2C 02 FB | 	rdlong	local04, objptr
1627c     50 00 00 FF 
16280     EC E4 85 F1 | 	sub	objptr, ##41196
16284     01 2C 16 F2 | 	cmp	local04, #1 wc
16288     DC 00 90 CD |  if_b	jmp	#LR__1795
1628c     50 00 00 FF 
16290     30 E5 05 F1 | 	add	objptr, ##41264
16294     F2 2C 02 FB | 	rdlong	local04, objptr
16298     16 27 02 F6 | 	mov	local01, local04
1629c     02 26 66 F0 | 	shl	local01, #2
162a0     16 27 02 F1 | 	add	local01, local04
162a4     02 26 66 F0 | 	shl	local01, #2
162a8     06 00 00 FF 
162ac     98 E4 85 F1 | 	sub	objptr, ##3224
162b0     F2 26 02 F1 | 	add	local01, objptr
162b4     06 00 00 FF 
162b8     20 E4 05 F1 | 	add	objptr, ##3104
162bc     F2 2C 02 FB | 	rdlong	local04, objptr
162c0     50 00 00 FF 
162c4     B8 E4 85 F1 | 	sub	objptr, ##41144
162c8     13 27 02 FB | 	rdlong	local01, local01
162cc     13 2D 0A F2 | 	cmp	local04, local01 wz
162d0     94 00 90 AD |  if_e	jmp	#LR__1795
162d4     50 00 00 FF 
162d8     30 E5 05 F1 | 	add	objptr, ##41264
162dc     F2 2C 02 FB | 	rdlong	local04, objptr
162e0     16 27 02 F6 | 	mov	local01, local04
162e4     02 26 66 F0 | 	shl	local01, #2
162e8     16 27 02 F1 | 	add	local01, local04
162ec     02 26 66 F0 | 	shl	local01, #2
162f0     06 00 00 FF 
162f4     98 E4 85 F1 | 	sub	objptr, ##3224
162f8     F2 26 02 F1 | 	add	local01, objptr
162fc     13 27 02 FB | 	rdlong	local01, local01
16300     06 00 00 FF 
16304     20 E4 05 F1 | 	add	objptr, ##3104
16308     F2 26 62 FC | 	wrlong	local01, objptr
1630c     78 E4 05 F1 | 	add	objptr, #120
16310     F2 2C 02 FB | 	rdlong	local04, objptr
16314     16 27 02 F6 | 	mov	local01, local04
16318     02 26 66 F0 | 	shl	local01, #2
1631c     16 27 02 F1 | 	add	local01, local04
16320     02 26 66 F0 | 	shl	local01, #2
16324     06 00 00 FF 
16328     98 E4 85 F1 | 	sub	objptr, ##3224
1632c     F2 26 02 F1 | 	add	local01, objptr
16330     04 26 06 F1 | 	add	local01, #4
16334     13 27 02 FB | 	rdlong	local01, local01
16338     06 00 00 FF 
1633c     24 E4 05 F1 | 	add	objptr, ##3108
16340     F2 26 62 FC | 	wrlong	local01, objptr
16344     06 00 00 FF 
16348     40 E4 85 F1 | 	sub	objptr, ##3136
1634c     F2 2C 02 FB | 	rdlong	local04, objptr
16350     01 2C 86 F1 | 	sub	local04, #1
16354     04 E4 05 F1 | 	add	objptr, #4
16358     F2 2C 62 FC | 	wrlong	local04, objptr
1635c     4A 00 00 FF 
16360     80 E4 85 F1 | 	sub	objptr, ##38016
16364     44 00 90 FD | 	jmp	#LR__1796
16368                 | LR__1795
16368     50 00 00 FF 
1636c     30 E5 05 F1 | 	add	objptr, ##41264
16370     F2 2C 02 FB | 	rdlong	local04, objptr
16374     16 27 02 F6 | 	mov	local01, local04
16378     02 26 66 F0 | 	shl	local01, #2
1637c     16 27 02 F1 | 	add	local01, local04
16380     02 26 66 F0 | 	shl	local01, #2
16384     06 00 00 FF 
16388     98 E4 85 F1 | 	sub	objptr, ##3224
1638c     F2 26 02 F1 | 	add	local01, objptr
16390     04 26 06 F1 | 	add	local01, #4
16394     13 27 02 FB | 	rdlong	local01, local01
16398     01 26 86 F1 | 	sub	local01, #1
1639c     18 E4 85 F1 | 	sub	objptr, #24
163a0     F2 26 62 FC | 	wrlong	local01, objptr
163a4     4A 00 00 FF 
163a8     80 E4 85 F1 | 	sub	objptr, ##38016
163ac                 | LR__1796
163ac                 | LR__1797
163ac     A7 F0 03 F6 | 	mov	ptra, fp
163b0     B2 00 A0 FD | 	call	#popregs_
163b4                 | _do_next_ret
163b4     2D 00 64 FD | 	ret
163b8                 | 
163b8                 | ' 
163b8                 | ' '-------------------- no command (print "Unknown command")
163b8                 | ' 
163b8                 | ' sub do_no_command
163b8                 | _do_no_command
163b8     50 00 00 FF 
163bc     F0 E4 05 F1 | 	add	objptr, ##41200
163c0     F2 14 02 FB | 	rdlong	arg02, objptr
163c4     50 00 00 FF 
163c8     F0 E4 85 F1 | 	sub	objptr, ##41200
163cc     17 12 06 F6 | 	mov	arg01, #23
163d0     A8 CB B0 FD | 	call	#_printerror
163d4                 | _do_no_command_ret
163d4     2D 00 64 FD | 	ret
163d8                 | 
163d8                 | ' 
163d8                 | ' '-------------------- nothing
163d8                 | ' 
163d8                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
163d8                 | _do_nothing
163d8                 | _do_nothing_ret
163d8     2D 00 64 FD | 	ret
163dc                 | 
163dc                 | ' 
163dc                 | ' '-------------------- on
163dc                 | ' 
163dc                 | ' sub do_on
163dc                 | _do_on
163dc     01 4A 05 F6 | 	mov	COUNT_, #1
163e0     A8 00 A0 FD | 	call	#pushregs_
163e4     18 F0 07 F1 | 	add	ptra, #24
163e8     4A 00 00 FF 
163ec     80 E4 05 F1 | 	add	objptr, ##38016
163f0     F2 12 02 FB | 	rdlong	arg01, objptr
163f4     09 FD 01 F6 | 	mov	result2, arg01
163f8     01 FC 65 F0 | 	shl	result2, #1
163fc     09 FD 01 F1 | 	add	result2, arg01
16400     02 FC 65 F0 | 	shl	result2, #2
16404     03 00 00 FF 
16408     04 E4 85 F1 | 	sub	objptr, ##1540
1640c     F2 FC 01 F1 | 	add	result2, objptr
16410     FE 12 02 FB | 	rdlong	arg01, result2
16414     14 4E 05 F1 | 	add	fp, #20
16418     A7 12 62 FC | 	wrlong	arg01, fp
1641c     03 00 00 FF 
16420     04 E4 05 F1 | 	add	objptr, ##1540
16424     F2 12 02 FB | 	rdlong	arg01, objptr
16428     09 27 02 F6 | 	mov	local01, arg01
1642c     01 26 66 F0 | 	shl	local01, #1
16430     09 27 02 F1 | 	add	local01, arg01
16434     02 26 66 F0 | 	shl	local01, #2
16438     03 00 00 FF 
1643c     04 E4 85 F1 | 	sub	objptr, ##1540
16440     F2 26 02 F1 | 	add	local01, objptr
16444     04 26 06 F1 | 	add	local01, #4
16448     13 27 02 FB | 	rdlong	local01, local01
1644c     08 4E 85 F1 | 	sub	fp, #8
16450     A7 26 62 FC | 	wrlong	local01, fp
16454     0C 4E 85 F1 | 	sub	fp, #12
16458     47 00 00 FF 
1645c     7C E4 85 F1 | 	sub	objptr, ##36476
16460     78 71 BF FD | 	call	#_pop
16464     FF 26 02 F6 | 	mov	local01, result3
16468     A7 FA 61 FC | 	wrlong	result1, fp
1646c     04 4E 05 F1 | 	add	fp, #4
16470     A7 FC 61 FC | 	wrlong	result2, fp
16474     04 4E 05 F1 | 	add	fp, #4
16478     A7 26 62 FC | 	wrlong	local01, fp
1647c     08 4E 85 F1 | 	sub	fp, #8
16480     A7 12 02 F6 | 	mov	arg01, fp
16484     38 73 BF FD | 	call	#_converttoint
16488     10 4E 05 F1 | 	add	fp, #16
1648c     A7 FA 61 FC | 	wrlong	result1, fp
16490                 | ' 
16490                 | ' numpar=compiledline(lineptr_e).result.uresult
16490                 | ' skip=compiledline(lineptr_e).result.twowords(1)
16490                 | ' t1=pop()
16490                 | ' t=converttoint(t1)
16490                 | ' if t<1 orelse t>numpar then return
16490     10 4E 85 F1 | 	sub	fp, #16
16494     01 FA 55 F2 | 	cmps	result1, #1 wc
16498     58 00 90 CD |  if_b	jmp	#LR__1800
1649c     10 4E 05 F1 | 	add	fp, #16
164a0     A7 26 02 FB | 	rdlong	local01, fp
164a4     04 4E 05 F1 | 	add	fp, #4
164a8     A7 12 02 FB | 	rdlong	arg01, fp
164ac     14 4E 85 F1 | 	sub	fp, #20
164b0     09 27 5A F2 | 	cmps	local01, arg01 wcz
164b4     3C 00 90 1D |  if_a	jmp	#LR__1800
164b8     10 4E 05 F1 | 	add	fp, #16
164bc     A7 26 02 FB | 	rdlong	local01, fp
164c0     01 26 86 F1 | 	sub	local01, #1
164c4     04 4E 85 F1 | 	sub	fp, #4
164c8     A7 12 02 FB | 	rdlong	arg01, fp
164cc     13 13 02 FD | 	qmul	arg01, local01
164d0     4A 00 00 FF 
164d4     80 E4 05 F1 | 	add	objptr, ##38016
164d8     F2 26 02 FB | 	rdlong	local01, objptr
164dc     0C 4E 85 F1 | 	sub	fp, #12
164e0     18 12 62 FD | 	getqx	arg01
164e4     09 27 02 F1 | 	add	local01, arg01
164e8     F2 26 62 FC | 	wrlong	local01, objptr
164ec     4A 00 00 FF 
164f0     80 E4 85 F1 | 	sub	objptr, ##38016
164f4                 | LR__1800
164f4     A7 F0 03 F6 | 	mov	ptra, fp
164f8     B2 00 A0 FD | 	call	#popregs_
164fc                 | _do_on_ret
164fc     2D 00 64 FD | 	ret
16500                 | 
16500                 | ' 
16500                 | ' '-------------------- open
16500                 | ' 
16500                 | ' sub do_open
16500                 | _do_open
16500     02 4A 05 F6 | 	mov	COUNT_, #2
16504     A8 00 A0 FD | 	call	#pushregs_
16508     20 F0 07 F1 | 	add	ptra, #32
1650c     4A 00 00 FF 
16510     80 E4 05 F1 | 	add	objptr, ##38016
16514     F2 16 02 FB | 	rdlong	arg03, objptr
16518     0B 15 02 F6 | 	mov	arg02, arg03
1651c     01 14 66 F0 | 	shl	arg02, #1
16520     0B 15 02 F1 | 	add	arg02, arg03
16524     02 14 66 F0 | 	shl	arg02, #2
16528     03 00 00 FF 
1652c     04 E4 85 F1 | 	sub	objptr, ##1540
16530     F2 14 02 F1 | 	add	arg02, objptr
16534     0A 17 02 FB | 	rdlong	arg03, arg02
16538     10 4E 05 F1 | 	add	fp, #16
1653c     A7 16 62 FC | 	wrlong	arg03, fp
16540     10 4E 85 F1 | 	sub	fp, #16
16544     47 00 00 FF 
16548     7C E4 85 F1 | 	sub	objptr, ##36476
1654c     8C 70 BF FD | 	call	#_pop
16550     FF 16 02 F6 | 	mov	arg03, result3
16554     A7 FA 61 FC | 	wrlong	result1, fp
16558     04 4E 05 F1 | 	add	fp, #4
1655c     A7 FC 61 FC | 	wrlong	result2, fp
16560     04 4E 05 F1 | 	add	fp, #4
16564     A7 16 62 FC | 	wrlong	arg03, fp
16568                 | ' 
16568                 | ' numpar=compiledline(lineptr_e).result.uresult
16568                 | ' 
16568                 | ' t1=pop()
16568                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16568     08 4E 85 F1 | 	sub	fp, #8
1656c     2B 16 0E F2 | 	cmp	arg03, #43 wz
16570     18 00 90 5D |  if_ne	jmp	#LR__1810
16574     A7 12 02 FB | 	rdlong	arg01, fp
16578     D8 71 BF FD | 	call	#_convertstring
1657c     A7 FA 61 FC | 	wrlong	result1, fp
16580     08 4E 05 F1 | 	add	fp, #8
16584     A7 3E 68 FC | 	wrlong	#31, fp
16588     08 4E 85 F1 | 	sub	fp, #8
1658c                 | LR__1810
1658c                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
1658c     08 4E 05 F1 | 	add	fp, #8
16590     A7 16 02 FB | 	rdlong	arg03, fp
16594     08 4E 85 F1 | 	sub	fp, #8
16598     1F 16 0E F2 | 	cmp	arg03, #31 wz
1659c     44 00 90 AD |  if_e	jmp	#LR__1811
165a0     00 12 06 F6 | 	mov	arg01, #0
165a4     68 60 B1 FD | 	call	#__system___getiolock_0606
165a8     FD 12 02 F6 | 	mov	arg01, result1
165ac     BC 03 B1 FD | 	call	#__system___lockmem
165b0     B7 01 00 FF 
165b4     35 15 06 F6 | 	mov	arg02, ##@LR__5933
165b8     00 12 06 F6 | 	mov	arg01, #0
165bc     00 16 06 F6 | 	mov	arg03, #0
165c0     A0 10 B1 FD | 	call	#__system___basic_print_string
165c4     00 12 06 F6 | 	mov	arg01, #0
165c8     0A 14 06 F6 | 	mov	arg02, #10
165cc     00 16 06 F6 | 	mov	arg03, #0
165d0     38 10 B1 FD | 	call	#__system___basic_print_char
165d4     00 12 06 F6 | 	mov	arg01, #0
165d8     34 60 B1 FD | 	call	#__system___getiolock_0606
165dc     FD 00 68 FC | 	wrlong	#0, result1
165e0     28 02 90 FD | 	jmp	#LR__1822
165e4                 | LR__1811
165e4     A7 16 02 FB | 	rdlong	arg03, fp
165e8     0C 4E 05 F1 | 	add	fp, #12
165ec     A7 16 62 FC | 	wrlong	arg03, fp
165f0     0C 4E 85 F1 | 	sub	fp, #12
165f4     E4 6F BF FD | 	call	#_pop
165f8     FF 16 02 F6 | 	mov	arg03, result3
165fc     A7 FA 61 FC | 	wrlong	result1, fp
16600     04 4E 05 F1 | 	add	fp, #4
16604     A7 FC 61 FC | 	wrlong	result2, fp
16608     04 4E 05 F1 | 	add	fp, #4
1660c     A7 16 62 FC | 	wrlong	arg03, fp
16610                 | ' filename=t1.result.sresult
16610                 | ' t1=pop()
16610                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16610     08 4E 85 F1 | 	sub	fp, #8
16614     2B 16 0E F2 | 	cmp	arg03, #43 wz
16618     18 00 90 5D |  if_ne	jmp	#LR__1812
1661c     A7 12 02 FB | 	rdlong	arg01, fp
16620     30 71 BF FD | 	call	#_convertstring
16624     A7 FA 61 FC | 	wrlong	result1, fp
16628     08 4E 05 F1 | 	add	fp, #8
1662c     A7 3E 68 FC | 	wrlong	#31, fp
16630     08 4E 85 F1 | 	sub	fp, #8
16634                 | LR__1812
16634     14 4E 05 F1 | 	add	fp, #20
16638     A7 00 68 FC | 	wrlong	#0, fp
1663c                 | ' mode=0
1663c                 | ' if t1.result_type=result_string then
1663c     0C 4E 85 F1 | 	sub	fp, #12
16640     A7 14 02 FB | 	rdlong	arg02, fp
16644     08 4E 85 F1 | 	sub	fp, #8
16648     1F 14 0E F2 | 	cmp	arg02, #31 wz
1664c     64 00 90 5D |  if_ne	jmp	#LR__1813
16650                 | '   if t1.result.sresult="read" then mode=1
16650     A7 12 02 FB | 	rdlong	arg01, fp
16654     B7 01 00 FF 
16658     47 15 06 F6 | 	mov	arg02, ##@LR__5934
1665c     34 03 B1 FD | 	call	#__system___string_cmp
16660     00 FA 0D F2 | 	cmp	result1, #0 wz
16664     14 4E 05 A1 |  if_e	add	fp, #20
16668     A7 02 68 AC |  if_e	wrlong	#1, fp
1666c     14 4E 85 A1 |  if_e	sub	fp, #20
16670                 | '   if t1.result.sresult="write" then mode=2
16670     A7 12 02 FB | 	rdlong	arg01, fp
16674     B7 01 00 FF 
16678     4C 15 06 F6 | 	mov	arg02, ##@LR__5935
1667c     14 03 B1 FD | 	call	#__system___string_cmp
16680     00 FA 0D F2 | 	cmp	result1, #0 wz
16684     14 4E 05 A1 |  if_e	add	fp, #20
16688     A7 04 68 AC |  if_e	wrlong	#2, fp
1668c     14 4E 85 A1 |  if_e	sub	fp, #20
16690                 | '   if t1.result.sresult="append" then mode=4
16690     A7 12 02 FB | 	rdlong	arg01, fp
16694     B7 01 00 FF 
16698     52 15 06 F6 | 	mov	arg02, ##@LR__5936
1669c     F4 02 B1 FD | 	call	#__system___string_cmp
166a0     00 FA 0D F2 | 	cmp	result1, #0 wz
166a4     14 4E 05 A1 |  if_e	add	fp, #20
166a8     A7 08 68 AC |  if_e	wrlong	#4, fp
166ac     14 4E 85 A1 |  if_e	sub	fp, #20
166b0     14 00 90 FD | 	jmp	#LR__1814
166b4                 | LR__1813
166b4     A7 12 02 F6 | 	mov	arg01, fp
166b8     04 71 BF FD | 	call	#_converttoint
166bc     14 4E 05 F1 | 	add	fp, #20
166c0     A7 FA 61 FC | 	wrlong	result1, fp
166c4     14 4E 85 F1 | 	sub	fp, #20
166c8                 | LR__1814
166c8     10 6F BF FD | 	call	#_pop
166cc     FF 16 02 F6 | 	mov	arg03, result3
166d0     A7 FA 61 FC | 	wrlong	result1, fp
166d4     04 4E 05 F1 | 	add	fp, #4
166d8     A7 FC 61 FC | 	wrlong	result2, fp
166dc     04 4E 05 F1 | 	add	fp, #4
166e0     A7 16 62 FC | 	wrlong	arg03, fp
166e4                 | ' t1=pop()
166e4                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
166e4     08 4E 85 F1 | 	sub	fp, #8
166e8     2C 16 0E F2 | 	cmp	arg03, #44 wz
166ec     44 00 90 AD |  if_e	jmp	#LR__1815
166f0     00 12 06 F6 | 	mov	arg01, #0
166f4     18 5F B1 FD | 	call	#__system___getiolock_0606
166f8     FD 12 02 F6 | 	mov	arg01, result1
166fc     6C 02 B1 FD | 	call	#__system___lockmem
16700     B7 01 00 FF 
16704     59 15 06 F6 | 	mov	arg02, ##@LR__5937
16708     00 12 06 F6 | 	mov	arg01, #0
1670c     00 16 06 F6 | 	mov	arg03, #0
16710     50 0F B1 FD | 	call	#__system___basic_print_string
16714     00 12 06 F6 | 	mov	arg01, #0
16718     0A 14 06 F6 | 	mov	arg02, #10
1671c     00 16 06 F6 | 	mov	arg03, #0
16720     E8 0E B1 FD | 	call	#__system___basic_print_char
16724     00 12 06 F6 | 	mov	arg01, #0
16728     E4 5E B1 FD | 	call	#__system___getiolock_0606
1672c     FD 00 68 FC | 	wrlong	#0, result1
16730     D8 00 90 FD | 	jmp	#LR__1822
16734                 | LR__1815
16734     A7 26 02 FB | 	rdlong	local01, fp
16738     18 4E 05 F1 | 	add	fp, #24
1673c     A7 26 62 FC | 	wrlong	local01, fp
16740                 | ' channel  = t1.result.iresult
16740                 | ' select case  mode
16740     04 4E 85 F1 | 	sub	fp, #4
16744     A7 28 02 FB | 	rdlong	local02, fp
16748     14 4E 85 F1 | 	sub	fp, #20
1674c     01 28 86 F1 | 	sub	local02, #1
16750     04 28 26 F3 | 	fle	local02, #4
16754     30 28 62 FD | 	jmprel	local02
16758                 | LR__1816
16758     10 00 90 FD | 	jmp	#LR__1817
1675c     2C 00 90 FD | 	jmp	#LR__1818
16760     68 00 90 FD | 	jmp	#LR__1820
16764     44 00 90 FD | 	jmp	#LR__1819
16768     60 00 90 FD | 	jmp	#LR__1820
1676c                 | LR__1817
1676c     18 4E 05 F1 | 	add	fp, #24
16770     A7 12 02 FB | 	rdlong	arg01, fp
16774     0C 4E 85 F1 | 	sub	fp, #12
16778     A7 14 02 FB | 	rdlong	arg02, fp
1677c     0C 4E 85 F1 | 	sub	fp, #12
16780     00 16 06 F6 | 	mov	arg03, #0
16784     E8 0D B1 FD | 	call	#__system___basic_open_string
16788     80 00 90 FD | 	jmp	#LR__1821
1678c                 | LR__1818
1678c     18 4E 05 F1 | 	add	fp, #24
16790     A7 12 02 FB | 	rdlong	arg01, fp
16794     0C 4E 85 F1 | 	sub	fp, #12
16798     A7 14 02 FB | 	rdlong	arg02, fp
1679c     0C 4E 85 F1 | 	sub	fp, #12
167a0     0D 16 06 F6 | 	mov	arg03, #13
167a4     C8 0D B1 FD | 	call	#__system___basic_open_string
167a8     60 00 90 FD | 	jmp	#LR__1821
167ac                 | LR__1819
167ac     18 4E 05 F1 | 	add	fp, #24
167b0     A7 12 02 FB | 	rdlong	arg01, fp
167b4     0C 4E 85 F1 | 	sub	fp, #12
167b8     A7 14 02 FB | 	rdlong	arg02, fp
167bc     0C 4E 85 F1 | 	sub	fp, #12
167c0     25 16 06 F6 | 	mov	arg03, #37
167c4     A8 0D B1 FD | 	call	#__system___basic_open_string
167c8     40 00 90 FD | 	jmp	#LR__1821
167cc                 | LR__1820
167cc     00 12 06 F6 | 	mov	arg01, #0
167d0     3C 5E B1 FD | 	call	#__system___getiolock_0606
167d4     FD 12 02 F6 | 	mov	arg01, result1
167d8     90 01 B1 FD | 	call	#__system___lockmem
167dc     B7 01 00 FF 
167e0     6B 15 06 F6 | 	mov	arg02, ##@LR__5938
167e4     00 12 06 F6 | 	mov	arg01, #0
167e8     00 16 06 F6 | 	mov	arg03, #0
167ec     74 0E B1 FD | 	call	#__system___basic_print_string
167f0     00 12 06 F6 | 	mov	arg01, #0
167f4     0A 14 06 F6 | 	mov	arg02, #10
167f8     00 16 06 F6 | 	mov	arg03, #0
167fc     0C 0E B1 FD | 	call	#__system___basic_print_char
16800     00 12 06 F6 | 	mov	arg01, #0
16804     08 5E B1 FD | 	call	#__system___getiolock_0606
16808     FD 00 68 FC | 	wrlong	#0, result1
1680c                 | LR__1821
1680c                 | LR__1822
1680c     A7 F0 03 F6 | 	mov	ptra, fp
16810     B2 00 A0 FD | 	call	#popregs_
16814                 | _do_open_ret
16814     2D 00 64 FD | 	ret
16818                 | 
16818                 | ' 
16818                 | ' ' ------------------ padh
16818                 | ' 
16818                 | ' sub do_padh
16818                 | _do_padh
16818     01 4A 05 F6 | 	mov	COUNT_, #1
1681c     A8 00 A0 FD | 	call	#pushregs_
16820     14 F0 07 F1 | 	add	ptra, #20
16824     4A 00 00 FF 
16828     80 E4 05 F1 | 	add	objptr, ##38016
1682c     F2 26 02 FB | 	rdlong	local01, objptr
16830     13 17 02 F6 | 	mov	arg03, local01
16834     01 16 66 F0 | 	shl	arg03, #1
16838     13 17 02 F1 | 	add	arg03, local01
1683c     02 16 66 F0 | 	shl	arg03, #2
16840     03 00 00 FF 
16844     04 E4 85 F1 | 	sub	objptr, ##1540
16848     F2 16 02 F1 | 	add	arg03, objptr
1684c     0B 17 02 FB | 	rdlong	arg03, arg03
16850     0C 4E 05 F1 | 	add	fp, #12
16854     A7 16 62 FC | 	wrlong	arg03, fp
16858                 | ' 
16858                 | ' numpar=compiledline(lineptr_e).result.uresult
16858                 | ' if numpar>1 then print "padh: "; : printerror(39) : return
16858     0C 4E 85 F1 | 	sub	fp, #12
1685c     02 16 16 F2 | 	cmp	arg03, #2 wc
16860     47 00 00 FF 
16864     7C E4 85 F1 | 	sub	objptr, ##36476
16868     40 00 90 CD |  if_b	jmp	#LR__1830
1686c     00 12 06 F6 | 	mov	arg01, #0
16870     9C 5D B1 FD | 	call	#__system___getiolock_0606
16874     FD 12 02 F6 | 	mov	arg01, result1
16878     F0 00 B1 FD | 	call	#__system___lockmem
1687c     B7 01 00 FF 
16880     7E 15 06 F6 | 	mov	arg02, ##@LR__5939
16884     00 12 06 F6 | 	mov	arg01, #0
16888     00 16 06 F6 | 	mov	arg03, #0
1688c     D4 0D B1 FD | 	call	#__system___basic_print_string
16890     00 12 06 F6 | 	mov	arg01, #0
16894     78 5D B1 FD | 	call	#__system___getiolock_0606
16898     FD 00 68 FC | 	wrlong	#0, result1
1689c     27 12 06 F6 | 	mov	arg01, #39
168a0     00 14 06 F6 | 	mov	arg02, #0
168a4     D4 C6 B0 FD | 	call	#_printerror
168a8     F0 00 90 FD | 	jmp	#LR__1834
168ac                 | LR__1830
168ac                 | ' if numpar=0 then 
168ac     0C 4E 05 F1 | 	add	fp, #12
168b0     A7 FE 09 FB | 	rdlong	result3, fp wz
168b4     0C 4E 85 F1 | 	sub	fp, #12
168b8     30 00 90 5D |  if_ne	jmp	#LR__1831
168bc     51 00 00 FF 
168c0     AC E5 05 F1 | 	add	objptr, ##41900
168c4     F2 26 02 FB | 	rdlong	local01, objptr
168c8     51 00 00 FF 
168cc     AC E5 85 F1 | 	sub	objptr, ##41900
168d0     A7 26 62 FC | 	wrlong	local01, fp
168d4     08 4E 05 F1 | 	add	fp, #8
168d8     A7 38 68 FC | 	wrlong	#28, fp
168dc     08 4E 85 F1 | 	sub	fp, #8
168e0     A7 12 02 F6 | 	mov	arg01, fp
168e4     8C 6D BF FD | 	call	#_push
168e8                 | '   t1.result.uresult=padh(0): t1.result_type=result_int : push t1 : return
168e8     B0 00 90 FD | 	jmp	#LR__1834
168ec                 | LR__1831
168ec     EC 6C BF FD | 	call	#_pop
168f0     A7 FA 61 FC | 	wrlong	result1, fp
168f4     04 4E 05 F1 | 	add	fp, #4
168f8     A7 FC 61 FC | 	wrlong	result2, fp
168fc     04 4E 05 F1 | 	add	fp, #4
16900     A7 FE 61 FC | 	wrlong	result3, fp
16904                 | ' t1=pop()
16904                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16904     08 4E 85 F1 | 	sub	fp, #8
16908     1C FE 0D F2 | 	cmp	result3, #28 wz
1690c     08 4E 05 51 |  if_ne	add	fp, #8
16910     A7 26 02 5B |  if_ne	rdlong	local01, fp
16914     08 4E 85 51 |  if_ne	sub	fp, #8
16918     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1691c     70 00 90 5D |  if_ne	jmp	#LR__1833
16920     A7 26 02 FB | 	rdlong	local01, fp
16924     52 00 00 FF 
16928     08 E5 05 F1 | 	add	objptr, ##42248
1692c     F2 26 62 FC | 	wrlong	local01, objptr
16930                 | '   q=t1.result.uresult
16930                 | '   if q<7 then 
16930     52 00 00 FF 
16934     08 E5 85 F1 | 	sub	objptr, ##42248
16938     07 26 56 F2 | 	cmps	local01, #7 wc
1693c     40 00 90 3D |  if_ae	jmp	#LR__1832
16940     52 00 00 FF 
16944     08 E5 05 F1 | 	add	objptr, ##42248
16948     F2 26 02 FB | 	rdlong	local01, objptr
1694c     02 26 66 F0 | 	shl	local01, #2
16950     5C E5 85 F1 | 	sub	objptr, #348
16954     F2 26 02 F1 | 	add	local01, objptr
16958     13 27 02 FB | 	rdlong	local01, local01
1695c     A7 26 62 FC | 	wrlong	local01, fp
16960     08 4E 05 F1 | 	add	fp, #8
16964     A7 38 68 FC | 	wrlong	#28, fp
16968     08 4E 85 F1 | 	sub	fp, #8
1696c     A7 12 02 F6 | 	mov	arg01, fp
16970     51 00 00 FF 
16974     AC E5 85 F1 | 	sub	objptr, ##41900
16978     F8 6C BF FD | 	call	#_push
1697c                 | '     t1.result.uresult=padh(q): t1.result_type=result_int : push t1 : return 
1697c     1C 00 90 FD | 	jmp	#LR__1834
16980                 | LR__1832
16980     29 12 06 F6 | 	mov	arg01, #41
16984     00 14 06 F6 | 	mov	arg02, #0
16988     F0 C5 B0 FD | 	call	#_printerror
1698c                 | '      printerror(41) : return
1698c     0C 00 90 FD | 	jmp	#LR__1834
16990                 | LR__1833
16990     29 12 06 F6 | 	mov	arg01, #41
16994     00 14 06 F6 | 	mov	arg02, #0
16998     E0 C5 B0 FD | 	call	#_printerror
1699c                 | LR__1834
1699c     A7 F0 03 F6 | 	mov	ptra, fp
169a0     B2 00 A0 FD | 	call	#popregs_
169a4                 | _do_padh_ret
169a4     2D 00 64 FD | 	ret
169a8                 | 
169a8                 | ' 
169a8                 | ' ' ------------------ padrx
169a8                 | ' 
169a8                 | ' sub do_padrx
169a8                 | _do_padrx
169a8     02 4A 05 F6 | 	mov	COUNT_, #2
169ac     A8 00 A0 FD | 	call	#pushregs_
169b0     14 F0 07 F1 | 	add	ptra, #20
169b4     4A 00 00 FF 
169b8     80 E4 05 F1 | 	add	objptr, ##38016
169bc     F2 26 02 FB | 	rdlong	local01, objptr
169c0     13 17 02 F6 | 	mov	arg03, local01
169c4     01 16 66 F0 | 	shl	arg03, #1
169c8     13 17 02 F1 | 	add	arg03, local01
169cc     02 16 66 F0 | 	shl	arg03, #2
169d0     03 00 00 FF 
169d4     04 E4 85 F1 | 	sub	objptr, ##1540
169d8     F2 16 02 F1 | 	add	arg03, objptr
169dc     0B 17 02 FB | 	rdlong	arg03, arg03
169e0     0C 4E 05 F1 | 	add	fp, #12
169e4     A7 16 62 FC | 	wrlong	arg03, fp
169e8                 | ' 
169e8                 | ' numpar=compiledline(lineptr_e).result.uresult
169e8                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
169e8     0C 4E 85 F1 | 	sub	fp, #12
169ec     02 16 16 F2 | 	cmp	arg03, #2 wc
169f0     47 00 00 FF 
169f4     7C E4 85 F1 | 	sub	objptr, ##36476
169f8     40 00 90 CD |  if_b	jmp	#LR__1840
169fc     00 12 06 F6 | 	mov	arg01, #0
16a00     0C 5C B1 FD | 	call	#__system___getiolock_0606
16a04     FD 12 02 F6 | 	mov	arg01, result1
16a08     60 FF B0 FD | 	call	#__system___lockmem
16a0c     B7 01 00 FF 
16a10     85 15 06 F6 | 	mov	arg02, ##@LR__5940
16a14     00 12 06 F6 | 	mov	arg01, #0
16a18     00 16 06 F6 | 	mov	arg03, #0
16a1c     44 0C B1 FD | 	call	#__system___basic_print_string
16a20     00 12 06 F6 | 	mov	arg01, #0
16a24     E8 5B B1 FD | 	call	#__system___getiolock_0606
16a28     FD 00 68 FC | 	wrlong	#0, result1
16a2c     27 12 06 F6 | 	mov	arg01, #39
16a30     00 14 06 F6 | 	mov	arg02, #0
16a34     44 C5 B0 FD | 	call	#_printerror
16a38     E0 01 90 FD | 	jmp	#LR__1844
16a3c                 | LR__1840
16a3c                 | ' if numpar=0 then 
16a3c     0C 4E 05 F1 | 	add	fp, #12
16a40     A7 FE 09 FB | 	rdlong	result3, fp wz
16a44     0C 4E 85 F1 | 	sub	fp, #12
16a48     A8 00 90 5D |  if_ne	jmp	#LR__1841
16a4c     00 C0 1B FF 
16a50     00 26 06 F6 | 	mov	local01, ##931135488
16a54     51 00 00 FF 
16a58     C8 E5 05 F1 | 	add	objptr, ##41928
16a5c     F2 12 02 FB | 	rdlong	arg01, objptr
16a60     51 00 00 FF 
16a64     C8 E5 85 F1 | 	sub	objptr, ##41928
16a68     09 13 52 F6 | 	abs	arg01, arg01 wc
16a6c     1F 28 C6 C9 |  if_b	decod	local02, #31
16a70     00 28 06 36 |  if_ae	mov	local02, #0
16a74     6C 29 B1 FD | 	call	#__system___float_fromuns
16a78     14 FB 61 F5 | 	xor	result1, local02
16a7c     FD 12 02 F6 | 	mov	arg01, result1
16a80     FF 7F 23 FF 
16a84     00 14 06 F6 | 	mov	arg02, ##1191181824
16a88     60 2F B1 FD | 	call	#__system___float_div
16a8c     FD 14 02 F6 | 	mov	arg02, result1
16a90     13 13 02 F6 | 	mov	arg01, local01
16a94     80 29 B1 FD | 	call	#__system___float_add
16a98     10 4E 05 F1 | 	add	fp, #16
16a9c     A7 FA 61 FC | 	wrlong	result1, fp
16aa0                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16aa0     10 4E 85 F1 | 	sub	fp, #16
16aa4     1F FA 05 F4 | 	bitl	result1, #31
16aa8     FD 12 02 F6 | 	mov	arg01, result1
16aac     89 41 1D FF 
16ab0     6F 14 06 F6 | 	mov	arg02, ##981668463
16ab4     01 16 06 F6 | 	mov	arg03, #1
16ab8     60 31 B1 FD | 	call	#__system___float_cmp
16abc     00 FA 55 F2 | 	cmps	result1, #0 wc
16ac0     10 4E 05 C1 |  if_b	add	fp, #16
16ac4     A7 00 68 CC |  if_b	wrlong	#0, fp
16ac8     10 4E 85 C1 |  if_b	sub	fp, #16
16acc     10 4E 05 F1 | 	add	fp, #16
16ad0     A7 26 02 FB | 	rdlong	local01, fp
16ad4     10 4E 85 F1 | 	sub	fp, #16
16ad8     A7 26 62 FC | 	wrlong	local01, fp
16adc     08 4E 05 F1 | 	add	fp, #8
16ae0     A7 3C 68 FC | 	wrlong	#30, fp
16ae4     08 4E 85 F1 | 	sub	fp, #8
16ae8     A7 12 02 F6 | 	mov	arg01, fp
16aec     84 6B BF FD | 	call	#_push
16af0                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16af0     28 01 90 FD | 	jmp	#LR__1844
16af4                 | LR__1841
16af4     E4 6A BF FD | 	call	#_pop
16af8     A7 FA 61 FC | 	wrlong	result1, fp
16afc     04 4E 05 F1 | 	add	fp, #4
16b00     A7 FC 61 FC | 	wrlong	result2, fp
16b04     04 4E 05 F1 | 	add	fp, #4
16b08     A7 FE 61 FC | 	wrlong	result3, fp
16b0c                 | ' t1=pop()
16b0c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16b0c     08 4E 85 F1 | 	sub	fp, #8
16b10     1C FE 0D F2 | 	cmp	result3, #28 wz
16b14     08 4E 05 51 |  if_ne	add	fp, #8
16b18     A7 26 02 5B |  if_ne	rdlong	local01, fp
16b1c     08 4E 85 51 |  if_ne	sub	fp, #8
16b20     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16b24     E8 00 90 5D |  if_ne	jmp	#LR__1843
16b28     A7 26 02 FB | 	rdlong	local01, fp
16b2c     52 00 00 FF 
16b30     08 E5 05 F1 | 	add	objptr, ##42248
16b34     F2 26 62 FC | 	wrlong	local01, objptr
16b38                 | '   q=t1.result.uresult
16b38                 | '   if q<7 then 
16b38     52 00 00 FF 
16b3c     08 E5 85 F1 | 	sub	objptr, ##42248
16b40     07 26 56 F2 | 	cmps	local01, #7 wc
16b44     B8 00 90 3D |  if_ae	jmp	#LR__1842
16b48     00 C0 1B FF 
16b4c     00 26 06 F6 | 	mov	local01, ##931135488
16b50     52 00 00 FF 
16b54     08 E5 05 F1 | 	add	objptr, ##42248
16b58     F2 16 02 FB | 	rdlong	arg03, objptr
16b5c     02 16 66 F0 | 	shl	arg03, #2
16b60     40 E5 85 F1 | 	sub	objptr, #320
16b64     F2 16 02 F1 | 	add	arg03, objptr
16b68     0B 13 02 FB | 	rdlong	arg01, arg03
16b6c     51 00 00 FF 
16b70     C8 E5 85 F1 | 	sub	objptr, ##41928
16b74     09 13 52 F6 | 	abs	arg01, arg01 wc
16b78     1F 28 C6 C9 |  if_b	decod	local02, #31
16b7c     00 28 06 36 |  if_ae	mov	local02, #0
16b80     60 28 B1 FD | 	call	#__system___float_fromuns
16b84     14 FB 61 F5 | 	xor	result1, local02
16b88     FD 12 02 F6 | 	mov	arg01, result1
16b8c     FF 7F 23 FF 
16b90     00 14 06 F6 | 	mov	arg02, ##1191181824
16b94     54 2E B1 FD | 	call	#__system___float_div
16b98     FD 14 02 F6 | 	mov	arg02, result1
16b9c     13 13 02 F6 | 	mov	arg01, local01
16ba0     74 28 B1 FD | 	call	#__system___float_add
16ba4     10 4E 05 F1 | 	add	fp, #16
16ba8     A7 FA 61 FC | 	wrlong	result1, fp
16bac                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16bac     10 4E 85 F1 | 	sub	fp, #16
16bb0     1F FA 05 F4 | 	bitl	result1, #31
16bb4     FD 12 02 F6 | 	mov	arg01, result1
16bb8     89 41 1D FF 
16bbc     6F 14 06 F6 | 	mov	arg02, ##981668463
16bc0     01 16 06 F6 | 	mov	arg03, #1
16bc4     54 30 B1 FD | 	call	#__system___float_cmp
16bc8     00 FA 55 F2 | 	cmps	result1, #0 wc
16bcc     10 4E 05 C1 |  if_b	add	fp, #16
16bd0     A7 00 68 CC |  if_b	wrlong	#0, fp
16bd4     10 4E 85 C1 |  if_b	sub	fp, #16
16bd8     10 4E 05 F1 | 	add	fp, #16
16bdc     A7 26 02 FB | 	rdlong	local01, fp
16be0     10 4E 85 F1 | 	sub	fp, #16
16be4     A7 26 62 FC | 	wrlong	local01, fp
16be8     08 4E 05 F1 | 	add	fp, #8
16bec     A7 3C 68 FC | 	wrlong	#30, fp
16bf0     08 4E 85 F1 | 	sub	fp, #8
16bf4     A7 12 02 F6 | 	mov	arg01, fp
16bf8     78 6A BF FD | 	call	#_push
16bfc                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16bfc     1C 00 90 FD | 	jmp	#LR__1844
16c00                 | LR__1842
16c00     29 12 06 F6 | 	mov	arg01, #41
16c04     00 14 06 F6 | 	mov	arg02, #0
16c08     70 C3 B0 FD | 	call	#_printerror
16c0c                 | '      printerror(41) : return
16c0c     0C 00 90 FD | 	jmp	#LR__1844
16c10                 | LR__1843
16c10     29 12 06 F6 | 	mov	arg01, #41
16c14     00 14 06 F6 | 	mov	arg02, #0
16c18     60 C3 B0 FD | 	call	#_printerror
16c1c                 | LR__1844
16c1c     A7 F0 03 F6 | 	mov	ptra, fp
16c20     B2 00 A0 FD | 	call	#popregs_
16c24                 | _do_padrx_ret
16c24     2D 00 64 FD | 	ret
16c28                 | 
16c28                 | ' 
16c28                 | ' ' ------------------ padry
16c28                 | ' 
16c28                 | ' sub do_padry
16c28                 | _do_padry
16c28     02 4A 05 F6 | 	mov	COUNT_, #2
16c2c     A8 00 A0 FD | 	call	#pushregs_
16c30     14 F0 07 F1 | 	add	ptra, #20
16c34     4A 00 00 FF 
16c38     80 E4 05 F1 | 	add	objptr, ##38016
16c3c     F2 26 02 FB | 	rdlong	local01, objptr
16c40     13 17 02 F6 | 	mov	arg03, local01
16c44     01 16 66 F0 | 	shl	arg03, #1
16c48     13 17 02 F1 | 	add	arg03, local01
16c4c     02 16 66 F0 | 	shl	arg03, #2
16c50     03 00 00 FF 
16c54     04 E4 85 F1 | 	sub	objptr, ##1540
16c58     F2 16 02 F1 | 	add	arg03, objptr
16c5c     0B 17 02 FB | 	rdlong	arg03, arg03
16c60     0C 4E 05 F1 | 	add	fp, #12
16c64     A7 16 62 FC | 	wrlong	arg03, fp
16c68                 | ' 
16c68                 | ' numpar=compiledline(lineptr_e).result.uresult
16c68                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
16c68     0C 4E 85 F1 | 	sub	fp, #12
16c6c     02 16 16 F2 | 	cmp	arg03, #2 wc
16c70     47 00 00 FF 
16c74     7C E4 85 F1 | 	sub	objptr, ##36476
16c78     40 00 90 CD |  if_b	jmp	#LR__1850
16c7c     00 12 06 F6 | 	mov	arg01, #0
16c80     8C 59 B1 FD | 	call	#__system___getiolock_0606
16c84     FD 12 02 F6 | 	mov	arg01, result1
16c88     E0 FC B0 FD | 	call	#__system___lockmem
16c8c     B7 01 00 FF 
16c90     8D 15 06 F6 | 	mov	arg02, ##@LR__5941
16c94     00 12 06 F6 | 	mov	arg01, #0
16c98     00 16 06 F6 | 	mov	arg03, #0
16c9c     C4 09 B1 FD | 	call	#__system___basic_print_string
16ca0     00 12 06 F6 | 	mov	arg01, #0
16ca4     68 59 B1 FD | 	call	#__system___getiolock_0606
16ca8     FD 00 68 FC | 	wrlong	#0, result1
16cac     27 12 06 F6 | 	mov	arg01, #39
16cb0     00 14 06 F6 | 	mov	arg02, #0
16cb4     C4 C2 B0 FD | 	call	#_printerror
16cb8     E0 01 90 FD | 	jmp	#LR__1854
16cbc                 | LR__1850
16cbc                 | ' if numpar=0 then 
16cbc     0C 4E 05 F1 | 	add	fp, #12
16cc0     A7 FE 09 FB | 	rdlong	result3, fp wz
16cc4     0C 4E 85 F1 | 	sub	fp, #12
16cc8     A8 00 90 5D |  if_ne	jmp	#LR__1851
16ccc     00 C0 1B FF 
16cd0     00 26 06 F6 | 	mov	local01, ##931135488
16cd4     51 00 00 FF 
16cd8     E4 E5 05 F1 | 	add	objptr, ##41956
16cdc     F2 12 02 FB | 	rdlong	arg01, objptr
16ce0     51 00 00 FF 
16ce4     E4 E5 85 F1 | 	sub	objptr, ##41956
16ce8     09 13 52 F6 | 	abs	arg01, arg01 wc
16cec     1F 28 C6 C9 |  if_b	decod	local02, #31
16cf0     00 28 06 36 |  if_ae	mov	local02, #0
16cf4     EC 26 B1 FD | 	call	#__system___float_fromuns
16cf8     14 FB 61 F5 | 	xor	result1, local02
16cfc     FD 12 02 F6 | 	mov	arg01, result1
16d00     FF 7F 23 FF 
16d04     00 14 06 F6 | 	mov	arg02, ##1191181824
16d08     E0 2C B1 FD | 	call	#__system___float_div
16d0c     FD 14 02 F6 | 	mov	arg02, result1
16d10     13 13 02 F6 | 	mov	arg01, local01
16d14     00 27 B1 FD | 	call	#__system___float_add
16d18     10 4E 05 F1 | 	add	fp, #16
16d1c     A7 FA 61 FC | 	wrlong	result1, fp
16d20                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16d20     10 4E 85 F1 | 	sub	fp, #16
16d24     1F FA 05 F4 | 	bitl	result1, #31
16d28     FD 12 02 F6 | 	mov	arg01, result1
16d2c     89 41 1D FF 
16d30     6F 14 06 F6 | 	mov	arg02, ##981668463
16d34     01 16 06 F6 | 	mov	arg03, #1
16d38     E0 2E B1 FD | 	call	#__system___float_cmp
16d3c     00 FA 55 F2 | 	cmps	result1, #0 wc
16d40     10 4E 05 C1 |  if_b	add	fp, #16
16d44     A7 00 68 CC |  if_b	wrlong	#0, fp
16d48     10 4E 85 C1 |  if_b	sub	fp, #16
16d4c     10 4E 05 F1 | 	add	fp, #16
16d50     A7 26 02 FB | 	rdlong	local01, fp
16d54     10 4E 85 F1 | 	sub	fp, #16
16d58     A7 26 62 FC | 	wrlong	local01, fp
16d5c     08 4E 05 F1 | 	add	fp, #8
16d60     A7 3C 68 FC | 	wrlong	#30, fp
16d64     08 4E 85 F1 | 	sub	fp, #8
16d68     A7 12 02 F6 | 	mov	arg01, fp
16d6c     04 69 BF FD | 	call	#_push
16d70                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16d70     28 01 90 FD | 	jmp	#LR__1854
16d74                 | LR__1851
16d74     64 68 BF FD | 	call	#_pop
16d78     A7 FA 61 FC | 	wrlong	result1, fp
16d7c     04 4E 05 F1 | 	add	fp, #4
16d80     A7 FC 61 FC | 	wrlong	result2, fp
16d84     04 4E 05 F1 | 	add	fp, #4
16d88     A7 FE 61 FC | 	wrlong	result3, fp
16d8c                 | ' t1=pop()
16d8c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16d8c     08 4E 85 F1 | 	sub	fp, #8
16d90     1C FE 0D F2 | 	cmp	result3, #28 wz
16d94     08 4E 05 51 |  if_ne	add	fp, #8
16d98     A7 26 02 5B |  if_ne	rdlong	local01, fp
16d9c     08 4E 85 51 |  if_ne	sub	fp, #8
16da0     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16da4     E8 00 90 5D |  if_ne	jmp	#LR__1853
16da8     A7 26 02 FB | 	rdlong	local01, fp
16dac     52 00 00 FF 
16db0     08 E5 05 F1 | 	add	objptr, ##42248
16db4     F2 26 62 FC | 	wrlong	local01, objptr
16db8                 | '   q=t1.result.uresult
16db8                 | '   if q<7 then 
16db8     52 00 00 FF 
16dbc     08 E5 85 F1 | 	sub	objptr, ##42248
16dc0     07 26 56 F2 | 	cmps	local01, #7 wc
16dc4     B8 00 90 3D |  if_ae	jmp	#LR__1852
16dc8     00 C0 1B FF 
16dcc     00 26 06 F6 | 	mov	local01, ##931135488
16dd0     52 00 00 FF 
16dd4     08 E5 05 F1 | 	add	objptr, ##42248
16dd8     F2 16 02 FB | 	rdlong	arg03, objptr
16ddc     02 16 66 F0 | 	shl	arg03, #2
16de0     24 E5 85 F1 | 	sub	objptr, #292
16de4     F2 16 02 F1 | 	add	arg03, objptr
16de8     0B 13 02 FB | 	rdlong	arg01, arg03
16dec     51 00 00 FF 
16df0     E4 E5 85 F1 | 	sub	objptr, ##41956
16df4     09 13 52 F6 | 	abs	arg01, arg01 wc
16df8     1F 28 C6 C9 |  if_b	decod	local02, #31
16dfc     00 28 06 36 |  if_ae	mov	local02, #0
16e00     E0 25 B1 FD | 	call	#__system___float_fromuns
16e04     14 FB 61 F5 | 	xor	result1, local02
16e08     FD 12 02 F6 | 	mov	arg01, result1
16e0c     FF 7F 23 FF 
16e10     00 14 06 F6 | 	mov	arg02, ##1191181824
16e14     D4 2B B1 FD | 	call	#__system___float_div
16e18     FD 14 02 F6 | 	mov	arg02, result1
16e1c     13 13 02 F6 | 	mov	arg01, local01
16e20     F4 25 B1 FD | 	call	#__system___float_add
16e24     10 4E 05 F1 | 	add	fp, #16
16e28     A7 FA 61 FC | 	wrlong	result1, fp
16e2c                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16e2c     10 4E 85 F1 | 	sub	fp, #16
16e30     1F FA 05 F4 | 	bitl	result1, #31
16e34     FD 12 02 F6 | 	mov	arg01, result1
16e38     89 41 1D FF 
16e3c     6F 14 06 F6 | 	mov	arg02, ##981668463
16e40     01 16 06 F6 | 	mov	arg03, #1
16e44     D4 2D B1 FD | 	call	#__system___float_cmp
16e48     00 FA 55 F2 | 	cmps	result1, #0 wc
16e4c     10 4E 05 C1 |  if_b	add	fp, #16
16e50     A7 00 68 CC |  if_b	wrlong	#0, fp
16e54     10 4E 85 C1 |  if_b	sub	fp, #16
16e58     10 4E 05 F1 | 	add	fp, #16
16e5c     A7 26 02 FB | 	rdlong	local01, fp
16e60     10 4E 85 F1 | 	sub	fp, #16
16e64     A7 26 62 FC | 	wrlong	local01, fp
16e68     08 4E 05 F1 | 	add	fp, #8
16e6c     A7 3C 68 FC | 	wrlong	#30, fp
16e70     08 4E 85 F1 | 	sub	fp, #8
16e74     A7 12 02 F6 | 	mov	arg01, fp
16e78     F8 67 BF FD | 	call	#_push
16e7c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16e7c     1C 00 90 FD | 	jmp	#LR__1854
16e80                 | LR__1852
16e80     29 12 06 F6 | 	mov	arg01, #41
16e84     00 14 06 F6 | 	mov	arg02, #0
16e88     F0 C0 B0 FD | 	call	#_printerror
16e8c                 | '      printerror(41) : return
16e8c     0C 00 90 FD | 	jmp	#LR__1854
16e90                 | LR__1853
16e90     29 12 06 F6 | 	mov	arg01, #41
16e94     00 14 06 F6 | 	mov	arg02, #0
16e98     E0 C0 B0 FD | 	call	#_printerror
16e9c                 | LR__1854
16e9c     A7 F0 03 F6 | 	mov	ptra, fp
16ea0     B2 00 A0 FD | 	call	#popregs_
16ea4                 | _do_padry_ret
16ea4     2D 00 64 FD | 	ret
16ea8                 | 
16ea8                 | ' 
16ea8                 | ' ' ------------------ padrz
16ea8                 | ' 
16ea8                 | ' sub do_padrz
16ea8                 | _do_padrz
16ea8     02 4A 05 F6 | 	mov	COUNT_, #2
16eac     A8 00 A0 FD | 	call	#pushregs_
16eb0     14 F0 07 F1 | 	add	ptra, #20
16eb4     4A 00 00 FF 
16eb8     80 E4 05 F1 | 	add	objptr, ##38016
16ebc     F2 26 02 FB | 	rdlong	local01, objptr
16ec0     13 17 02 F6 | 	mov	arg03, local01
16ec4     01 16 66 F0 | 	shl	arg03, #1
16ec8     13 17 02 F1 | 	add	arg03, local01
16ecc     02 16 66 F0 | 	shl	arg03, #2
16ed0     03 00 00 FF 
16ed4     04 E4 85 F1 | 	sub	objptr, ##1540
16ed8     F2 16 02 F1 | 	add	arg03, objptr
16edc     0B 17 02 FB | 	rdlong	arg03, arg03
16ee0     0C 4E 05 F1 | 	add	fp, #12
16ee4     A7 16 62 FC | 	wrlong	arg03, fp
16ee8                 | ' 
16ee8                 | ' numpar=compiledline(lineptr_e).result.uresult
16ee8                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
16ee8     0C 4E 85 F1 | 	sub	fp, #12
16eec     02 16 16 F2 | 	cmp	arg03, #2 wc
16ef0     47 00 00 FF 
16ef4     7C E4 85 F1 | 	sub	objptr, ##36476
16ef8     40 00 90 CD |  if_b	jmp	#LR__1860
16efc     00 12 06 F6 | 	mov	arg01, #0
16f00     0C 57 B1 FD | 	call	#__system___getiolock_0606
16f04     FD 12 02 F6 | 	mov	arg01, result1
16f08     60 FA B0 FD | 	call	#__system___lockmem
16f0c     B7 01 00 FF 
16f10     95 15 06 F6 | 	mov	arg02, ##@LR__5942
16f14     00 12 06 F6 | 	mov	arg01, #0
16f18     00 16 06 F6 | 	mov	arg03, #0
16f1c     44 07 B1 FD | 	call	#__system___basic_print_string
16f20     00 12 06 F6 | 	mov	arg01, #0
16f24     E8 56 B1 FD | 	call	#__system___getiolock_0606
16f28     FD 00 68 FC | 	wrlong	#0, result1
16f2c     27 12 06 F6 | 	mov	arg01, #39
16f30     00 14 06 F6 | 	mov	arg02, #0
16f34     44 C0 B0 FD | 	call	#_printerror
16f38     E0 01 90 FD | 	jmp	#LR__1864
16f3c                 | LR__1860
16f3c                 | ' if numpar=0 then 
16f3c     0C 4E 05 F1 | 	add	fp, #12
16f40     A7 FE 09 FB | 	rdlong	result3, fp wz
16f44     0C 4E 85 F1 | 	sub	fp, #12
16f48     A8 00 90 5D |  if_ne	jmp	#LR__1861
16f4c     00 C0 1B FF 
16f50     00 26 06 F6 | 	mov	local01, ##931135488
16f54     52 00 00 FF 
16f58     00 E4 05 F1 | 	add	objptr, ##41984
16f5c     F2 12 02 FB | 	rdlong	arg01, objptr
16f60     52 00 00 FF 
16f64     00 E4 85 F1 | 	sub	objptr, ##41984
16f68     09 13 52 F6 | 	abs	arg01, arg01 wc
16f6c     1F 28 C6 C9 |  if_b	decod	local02, #31
16f70     00 28 06 36 |  if_ae	mov	local02, #0
16f74     6C 24 B1 FD | 	call	#__system___float_fromuns
16f78     14 FB 61 F5 | 	xor	result1, local02
16f7c     FD 12 02 F6 | 	mov	arg01, result1
16f80     FF 7F 23 FF 
16f84     00 14 06 F6 | 	mov	arg02, ##1191181824
16f88     60 2A B1 FD | 	call	#__system___float_div
16f8c     FD 14 02 F6 | 	mov	arg02, result1
16f90     13 13 02 F6 | 	mov	arg01, local01
16f94     80 24 B1 FD | 	call	#__system___float_add
16f98     10 4E 05 F1 | 	add	fp, #16
16f9c     A7 FA 61 FC | 	wrlong	result1, fp
16fa0                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16fa0     10 4E 85 F1 | 	sub	fp, #16
16fa4     1F FA 05 F4 | 	bitl	result1, #31
16fa8     FD 12 02 F6 | 	mov	arg01, result1
16fac     89 41 1D FF 
16fb0     6F 14 06 F6 | 	mov	arg02, ##981668463
16fb4     01 16 06 F6 | 	mov	arg03, #1
16fb8     60 2C B1 FD | 	call	#__system___float_cmp
16fbc     00 FA 55 F2 | 	cmps	result1, #0 wc
16fc0     10 4E 05 C1 |  if_b	add	fp, #16
16fc4     A7 00 68 CC |  if_b	wrlong	#0, fp
16fc8     10 4E 85 C1 |  if_b	sub	fp, #16
16fcc     10 4E 05 F1 | 	add	fp, #16
16fd0     A7 26 02 FB | 	rdlong	local01, fp
16fd4     10 4E 85 F1 | 	sub	fp, #16
16fd8     A7 26 62 FC | 	wrlong	local01, fp
16fdc     08 4E 05 F1 | 	add	fp, #8
16fe0     A7 3C 68 FC | 	wrlong	#30, fp
16fe4     08 4E 85 F1 | 	sub	fp, #8
16fe8     A7 12 02 F6 | 	mov	arg01, fp
16fec     84 66 BF FD | 	call	#_push
16ff0                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16ff0     28 01 90 FD | 	jmp	#LR__1864
16ff4                 | LR__1861
16ff4     E4 65 BF FD | 	call	#_pop
16ff8     A7 FA 61 FC | 	wrlong	result1, fp
16ffc     04 4E 05 F1 | 	add	fp, #4
17000     A7 FC 61 FC | 	wrlong	result2, fp
17004     04 4E 05 F1 | 	add	fp, #4
17008     A7 FE 61 FC | 	wrlong	result3, fp
1700c                 | ' t1=pop()
1700c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1700c     08 4E 85 F1 | 	sub	fp, #8
17010     1C FE 0D F2 | 	cmp	result3, #28 wz
17014     08 4E 05 51 |  if_ne	add	fp, #8
17018     A7 26 02 5B |  if_ne	rdlong	local01, fp
1701c     08 4E 85 51 |  if_ne	sub	fp, #8
17020     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17024     E8 00 90 5D |  if_ne	jmp	#LR__1863
17028     A7 26 02 FB | 	rdlong	local01, fp
1702c     52 00 00 FF 
17030     08 E5 05 F1 | 	add	objptr, ##42248
17034     F2 26 62 FC | 	wrlong	local01, objptr
17038                 | '   q=t1.result.uresult
17038                 | '   if q<7 then 
17038     52 00 00 FF 
1703c     08 E5 85 F1 | 	sub	objptr, ##42248
17040     07 26 56 F2 | 	cmps	local01, #7 wc
17044     B8 00 90 3D |  if_ae	jmp	#LR__1862
17048     00 C0 1B FF 
1704c     00 26 06 F6 | 	mov	local01, ##931135488
17050     52 00 00 FF 
17054     08 E5 05 F1 | 	add	objptr, ##42248
17058     F2 16 02 FB | 	rdlong	arg03, objptr
1705c     02 16 66 F0 | 	shl	arg03, #2
17060     08 E5 85 F1 | 	sub	objptr, #264
17064     F2 16 02 F1 | 	add	arg03, objptr
17068     0B 13 02 FB | 	rdlong	arg01, arg03
1706c     52 00 00 FF 
17070     00 E4 85 F1 | 	sub	objptr, ##41984
17074     09 13 52 F6 | 	abs	arg01, arg01 wc
17078     1F 28 C6 C9 |  if_b	decod	local02, #31
1707c     00 28 06 36 |  if_ae	mov	local02, #0
17080     60 23 B1 FD | 	call	#__system___float_fromuns
17084     14 FB 61 F5 | 	xor	result1, local02
17088     FD 12 02 F6 | 	mov	arg01, result1
1708c     FF 7F 23 FF 
17090     00 14 06 F6 | 	mov	arg02, ##1191181824
17094     54 29 B1 FD | 	call	#__system___float_div
17098     FD 14 02 F6 | 	mov	arg02, result1
1709c     13 13 02 F6 | 	mov	arg01, local01
170a0     74 23 B1 FD | 	call	#__system___float_add
170a4     10 4E 05 F1 | 	add	fp, #16
170a8     A7 FA 61 FC | 	wrlong	result1, fp
170ac                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
170ac     10 4E 85 F1 | 	sub	fp, #16
170b0     1F FA 05 F4 | 	bitl	result1, #31
170b4     FD 12 02 F6 | 	mov	arg01, result1
170b8     89 41 1D FF 
170bc     6F 14 06 F6 | 	mov	arg02, ##981668463
170c0     01 16 06 F6 | 	mov	arg03, #1
170c4     54 2B B1 FD | 	call	#__system___float_cmp
170c8     00 FA 55 F2 | 	cmps	result1, #0 wc
170cc     10 4E 05 C1 |  if_b	add	fp, #16
170d0     A7 00 68 CC |  if_b	wrlong	#0, fp
170d4     10 4E 85 C1 |  if_b	sub	fp, #16
170d8     10 4E 05 F1 | 	add	fp, #16
170dc     A7 26 02 FB | 	rdlong	local01, fp
170e0     10 4E 85 F1 | 	sub	fp, #16
170e4     A7 26 62 FC | 	wrlong	local01, fp
170e8     08 4E 05 F1 | 	add	fp, #8
170ec     A7 3C 68 FC | 	wrlong	#30, fp
170f0     08 4E 85 F1 | 	sub	fp, #8
170f4     A7 12 02 F6 | 	mov	arg01, fp
170f8     78 65 BF FD | 	call	#_push
170fc                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
170fc     1C 00 90 FD | 	jmp	#LR__1864
17100                 | LR__1862
17100     29 12 06 F6 | 	mov	arg01, #41
17104     00 14 06 F6 | 	mov	arg02, #0
17108     70 BE B0 FD | 	call	#_printerror
1710c                 | '      printerror(41) : return
1710c     0C 00 90 FD | 	jmp	#LR__1864
17110                 | LR__1863
17110     29 12 06 F6 | 	mov	arg01, #41
17114     00 14 06 F6 | 	mov	arg02, #0
17118     60 BE B0 FD | 	call	#_printerror
1711c                 | LR__1864
1711c     A7 F0 03 F6 | 	mov	ptra, fp
17120     B2 00 A0 FD | 	call	#popregs_
17124                 | _do_padrz_ret
17124     2D 00 64 FD | 	ret
17128                 | 
17128                 | ' ' ------------------ padx
17128                 | ' 
17128                 | ' sub do_padx
17128                 | _do_padx
17128     02 4A 05 F6 | 	mov	COUNT_, #2
1712c     A8 00 A0 FD | 	call	#pushregs_
17130     14 F0 07 F1 | 	add	ptra, #20
17134     4A 00 00 FF 
17138     80 E4 05 F1 | 	add	objptr, ##38016
1713c     F2 26 02 FB | 	rdlong	local01, objptr
17140     13 17 02 F6 | 	mov	arg03, local01
17144     01 16 66 F0 | 	shl	arg03, #1
17148     13 17 02 F1 | 	add	arg03, local01
1714c     02 16 66 F0 | 	shl	arg03, #2
17150     03 00 00 FF 
17154     04 E4 85 F1 | 	sub	objptr, ##1540
17158     F2 16 02 F1 | 	add	arg03, objptr
1715c     0B 17 02 FB | 	rdlong	arg03, arg03
17160     0C 4E 05 F1 | 	add	fp, #12
17164     A7 16 62 FC | 	wrlong	arg03, fp
17168                 | ' 
17168                 | ' numpar=compiledline(lineptr_e).result.uresult
17168                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
17168     0C 4E 85 F1 | 	sub	fp, #12
1716c     02 16 16 F2 | 	cmp	arg03, #2 wc
17170     47 00 00 FF 
17174     7C E4 85 F1 | 	sub	objptr, ##36476
17178     40 00 90 CD |  if_b	jmp	#LR__1870
1717c     00 12 06 F6 | 	mov	arg01, #0
17180     8C 54 B1 FD | 	call	#__system___getiolock_0606
17184     FD 12 02 F6 | 	mov	arg01, result1
17188     E0 F7 B0 FD | 	call	#__system___lockmem
1718c     B7 01 00 FF 
17190     9D 15 06 F6 | 	mov	arg02, ##@LR__5943
17194     00 12 06 F6 | 	mov	arg01, #0
17198     00 16 06 F6 | 	mov	arg03, #0
1719c     C4 04 B1 FD | 	call	#__system___basic_print_string
171a0     00 12 06 F6 | 	mov	arg01, #0
171a4     68 54 B1 FD | 	call	#__system___getiolock_0606
171a8     FD 00 68 FC | 	wrlong	#0, result1
171ac     27 12 06 F6 | 	mov	arg01, #39
171b0     00 14 06 F6 | 	mov	arg02, #0
171b4     C4 BD B0 FD | 	call	#_printerror
171b8     E0 01 90 FD | 	jmp	#LR__1874
171bc                 | LR__1870
171bc                 | ' if numpar=0 then 
171bc     0C 4E 05 F1 | 	add	fp, #12
171c0     A7 FE 09 FB | 	rdlong	result3, fp wz
171c4     0C 4E 85 F1 | 	sub	fp, #12
171c8     A8 00 90 5D |  if_ne	jmp	#LR__1871
171cc     00 C0 1B FF 
171d0     00 26 06 F6 | 	mov	local01, ##931135488
171d4     51 00 00 FF 
171d8     58 E5 05 F1 | 	add	objptr, ##41816
171dc     F2 12 02 FB | 	rdlong	arg01, objptr
171e0     51 00 00 FF 
171e4     58 E5 85 F1 | 	sub	objptr, ##41816
171e8     09 13 52 F6 | 	abs	arg01, arg01 wc
171ec     1F 28 C6 C9 |  if_b	decod	local02, #31
171f0     00 28 06 36 |  if_ae	mov	local02, #0
171f4     EC 21 B1 FD | 	call	#__system___float_fromuns
171f8     14 FB 61 F5 | 	xor	result1, local02
171fc     FD 12 02 F6 | 	mov	arg01, result1
17200     FF 7F 23 FF 
17204     00 14 06 F6 | 	mov	arg02, ##1191181824
17208     E0 27 B1 FD | 	call	#__system___float_div
1720c     FD 14 02 F6 | 	mov	arg02, result1
17210     13 13 02 F6 | 	mov	arg01, local01
17214     00 22 B1 FD | 	call	#__system___float_add
17218     10 4E 05 F1 | 	add	fp, #16
1721c     A7 FA 61 FC | 	wrlong	result1, fp
17220                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17220     10 4E 85 F1 | 	sub	fp, #16
17224     1F FA 05 F4 | 	bitl	result1, #31
17228     FD 12 02 F6 | 	mov	arg01, result1
1722c     89 41 1D FF 
17230     6F 14 06 F6 | 	mov	arg02, ##981668463
17234     01 16 06 F6 | 	mov	arg03, #1
17238     E0 29 B1 FD | 	call	#__system___float_cmp
1723c     00 FA 55 F2 | 	cmps	result1, #0 wc
17240     10 4E 05 C1 |  if_b	add	fp, #16
17244     A7 00 68 CC |  if_b	wrlong	#0, fp
17248     10 4E 85 C1 |  if_b	sub	fp, #16
1724c     10 4E 05 F1 | 	add	fp, #16
17250     A7 26 02 FB | 	rdlong	local01, fp
17254     10 4E 85 F1 | 	sub	fp, #16
17258     A7 26 62 FC | 	wrlong	local01, fp
1725c     08 4E 05 F1 | 	add	fp, #8
17260     A7 3C 68 FC | 	wrlong	#30, fp
17264     08 4E 85 F1 | 	sub	fp, #8
17268     A7 12 02 F6 | 	mov	arg01, fp
1726c     04 64 BF FD | 	call	#_push
17270                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17270     28 01 90 FD | 	jmp	#LR__1874
17274                 | LR__1871
17274     64 63 BF FD | 	call	#_pop
17278     A7 FA 61 FC | 	wrlong	result1, fp
1727c     04 4E 05 F1 | 	add	fp, #4
17280     A7 FC 61 FC | 	wrlong	result2, fp
17284     04 4E 05 F1 | 	add	fp, #4
17288     A7 FE 61 FC | 	wrlong	result3, fp
1728c                 | ' t1=pop()
1728c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1728c     08 4E 85 F1 | 	sub	fp, #8
17290     1C FE 0D F2 | 	cmp	result3, #28 wz
17294     08 4E 05 51 |  if_ne	add	fp, #8
17298     A7 26 02 5B |  if_ne	rdlong	local01, fp
1729c     08 4E 85 51 |  if_ne	sub	fp, #8
172a0     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
172a4     E8 00 90 5D |  if_ne	jmp	#LR__1873
172a8     A7 26 02 FB | 	rdlong	local01, fp
172ac     52 00 00 FF 
172b0     08 E5 05 F1 | 	add	objptr, ##42248
172b4     F2 26 62 FC | 	wrlong	local01, objptr
172b8                 | '   q=t1.result.uresult
172b8                 | '   if q<7 then 
172b8     52 00 00 FF 
172bc     08 E5 85 F1 | 	sub	objptr, ##42248
172c0     07 26 56 F2 | 	cmps	local01, #7 wc
172c4     B8 00 90 3D |  if_ae	jmp	#LR__1872
172c8     00 C0 1B FF 
172cc     00 26 06 F6 | 	mov	local01, ##931135488
172d0     52 00 00 FF 
172d4     08 E5 05 F1 | 	add	objptr, ##42248
172d8     F2 16 02 FB | 	rdlong	arg03, objptr
172dc     02 16 66 F0 | 	shl	arg03, #2
172e0     B0 E5 85 F1 | 	sub	objptr, #432
172e4     F2 16 02 F1 | 	add	arg03, objptr
172e8     0B 13 02 FB | 	rdlong	arg01, arg03
172ec     51 00 00 FF 
172f0     58 E5 85 F1 | 	sub	objptr, ##41816
172f4     09 13 52 F6 | 	abs	arg01, arg01 wc
172f8     1F 28 C6 C9 |  if_b	decod	local02, #31
172fc     00 28 06 36 |  if_ae	mov	local02, #0
17300     E0 20 B1 FD | 	call	#__system___float_fromuns
17304     14 FB 61 F5 | 	xor	result1, local02
17308     FD 12 02 F6 | 	mov	arg01, result1
1730c     FF 7F 23 FF 
17310     00 14 06 F6 | 	mov	arg02, ##1191181824
17314     D4 26 B1 FD | 	call	#__system___float_div
17318     FD 14 02 F6 | 	mov	arg02, result1
1731c     13 13 02 F6 | 	mov	arg01, local01
17320     F4 20 B1 FD | 	call	#__system___float_add
17324     10 4E 05 F1 | 	add	fp, #16
17328     A7 FA 61 FC | 	wrlong	result1, fp
1732c                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1732c     10 4E 85 F1 | 	sub	fp, #16
17330     1F FA 05 F4 | 	bitl	result1, #31
17334     FD 12 02 F6 | 	mov	arg01, result1
17338     89 41 1D FF 
1733c     6F 14 06 F6 | 	mov	arg02, ##981668463
17340     01 16 06 F6 | 	mov	arg03, #1
17344     D4 28 B1 FD | 	call	#__system___float_cmp
17348     00 FA 55 F2 | 	cmps	result1, #0 wc
1734c     10 4E 05 C1 |  if_b	add	fp, #16
17350     A7 00 68 CC |  if_b	wrlong	#0, fp
17354     10 4E 85 C1 |  if_b	sub	fp, #16
17358     10 4E 05 F1 | 	add	fp, #16
1735c     A7 26 02 FB | 	rdlong	local01, fp
17360     10 4E 85 F1 | 	sub	fp, #16
17364     A7 26 62 FC | 	wrlong	local01, fp
17368     08 4E 05 F1 | 	add	fp, #8
1736c     A7 3C 68 FC | 	wrlong	#30, fp
17370     08 4E 85 F1 | 	sub	fp, #8
17374     A7 12 02 F6 | 	mov	arg01, fp
17378     F8 62 BF FD | 	call	#_push
1737c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
1737c     1C 00 90 FD | 	jmp	#LR__1874
17380                 | LR__1872
17380     29 12 06 F6 | 	mov	arg01, #41
17384     00 14 06 F6 | 	mov	arg02, #0
17388     F0 BB B0 FD | 	call	#_printerror
1738c                 | '      printerror(41) : return
1738c     0C 00 90 FD | 	jmp	#LR__1874
17390                 | LR__1873
17390     29 12 06 F6 | 	mov	arg01, #41
17394     00 14 06 F6 | 	mov	arg02, #0
17398     E0 BB B0 FD | 	call	#_printerror
1739c                 | LR__1874
1739c     A7 F0 03 F6 | 	mov	ptra, fp
173a0     B2 00 A0 FD | 	call	#popregs_
173a4                 | _do_padx_ret
173a4     2D 00 64 FD | 	ret
173a8                 | 
173a8                 | ' 
173a8                 | ' ' ------------------ pady
173a8                 | ' 
173a8                 | ' sub do_pady
173a8                 | _do_pady
173a8     02 4A 05 F6 | 	mov	COUNT_, #2
173ac     A8 00 A0 FD | 	call	#pushregs_
173b0     14 F0 07 F1 | 	add	ptra, #20
173b4     4A 00 00 FF 
173b8     80 E4 05 F1 | 	add	objptr, ##38016
173bc     F2 26 02 FB | 	rdlong	local01, objptr
173c0     13 17 02 F6 | 	mov	arg03, local01
173c4     01 16 66 F0 | 	shl	arg03, #1
173c8     13 17 02 F1 | 	add	arg03, local01
173cc     02 16 66 F0 | 	shl	arg03, #2
173d0     03 00 00 FF 
173d4     04 E4 85 F1 | 	sub	objptr, ##1540
173d8     F2 16 02 F1 | 	add	arg03, objptr
173dc     0B 17 02 FB | 	rdlong	arg03, arg03
173e0     0C 4E 05 F1 | 	add	fp, #12
173e4     A7 16 62 FC | 	wrlong	arg03, fp
173e8                 | ' 
173e8                 | ' numpar=compiledline(lineptr_e).result.uresult
173e8                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
173e8     0C 4E 85 F1 | 	sub	fp, #12
173ec     02 16 16 F2 | 	cmp	arg03, #2 wc
173f0     47 00 00 FF 
173f4     7C E4 85 F1 | 	sub	objptr, ##36476
173f8     40 00 90 CD |  if_b	jmp	#LR__1880
173fc     00 12 06 F6 | 	mov	arg01, #0
17400     0C 52 B1 FD | 	call	#__system___getiolock_0606
17404     FD 12 02 F6 | 	mov	arg01, result1
17408     60 F5 B0 FD | 	call	#__system___lockmem
1740c     B7 01 00 FF 
17410     A4 15 06 F6 | 	mov	arg02, ##@LR__5944
17414     00 12 06 F6 | 	mov	arg01, #0
17418     00 16 06 F6 | 	mov	arg03, #0
1741c     44 02 B1 FD | 	call	#__system___basic_print_string
17420     00 12 06 F6 | 	mov	arg01, #0
17424     E8 51 B1 FD | 	call	#__system___getiolock_0606
17428     FD 00 68 FC | 	wrlong	#0, result1
1742c     27 12 06 F6 | 	mov	arg01, #39
17430     00 14 06 F6 | 	mov	arg02, #0
17434     44 BB B0 FD | 	call	#_printerror
17438     E0 01 90 FD | 	jmp	#LR__1884
1743c                 | LR__1880
1743c                 | ' if numpar=0 then 
1743c     0C 4E 05 F1 | 	add	fp, #12
17440     A7 FE 09 FB | 	rdlong	result3, fp wz
17444     0C 4E 85 F1 | 	sub	fp, #12
17448     A8 00 90 5D |  if_ne	jmp	#LR__1881
1744c     00 C0 1B FF 
17450     00 26 06 F6 | 	mov	local01, ##931135488
17454     51 00 00 FF 
17458     74 E5 05 F1 | 	add	objptr, ##41844
1745c     F2 12 02 FB | 	rdlong	arg01, objptr
17460     51 00 00 FF 
17464     74 E5 85 F1 | 	sub	objptr, ##41844
17468     09 13 52 F6 | 	abs	arg01, arg01 wc
1746c     1F 28 C6 C9 |  if_b	decod	local02, #31
17470     00 28 06 36 |  if_ae	mov	local02, #0
17474     6C 1F B1 FD | 	call	#__system___float_fromuns
17478     14 FB 61 F5 | 	xor	result1, local02
1747c     FD 12 02 F6 | 	mov	arg01, result1
17480     FF 7F 23 FF 
17484     00 14 06 F6 | 	mov	arg02, ##1191181824
17488     60 25 B1 FD | 	call	#__system___float_div
1748c     FD 14 02 F6 | 	mov	arg02, result1
17490     13 13 02 F6 | 	mov	arg01, local01
17494     80 1F B1 FD | 	call	#__system___float_add
17498     10 4E 05 F1 | 	add	fp, #16
1749c     A7 FA 61 FC | 	wrlong	result1, fp
174a0                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
174a0     10 4E 85 F1 | 	sub	fp, #16
174a4     1F FA 05 F4 | 	bitl	result1, #31
174a8     FD 12 02 F6 | 	mov	arg01, result1
174ac     89 41 1D FF 
174b0     6F 14 06 F6 | 	mov	arg02, ##981668463
174b4     01 16 06 F6 | 	mov	arg03, #1
174b8     60 27 B1 FD | 	call	#__system___float_cmp
174bc     00 FA 55 F2 | 	cmps	result1, #0 wc
174c0     10 4E 05 C1 |  if_b	add	fp, #16
174c4     A7 00 68 CC |  if_b	wrlong	#0, fp
174c8     10 4E 85 C1 |  if_b	sub	fp, #16
174cc     10 4E 05 F1 | 	add	fp, #16
174d0     A7 26 02 FB | 	rdlong	local01, fp
174d4     10 4E 85 F1 | 	sub	fp, #16
174d8     A7 26 62 FC | 	wrlong	local01, fp
174dc     08 4E 05 F1 | 	add	fp, #8
174e0     A7 3C 68 FC | 	wrlong	#30, fp
174e4     08 4E 85 F1 | 	sub	fp, #8
174e8     A7 12 02 F6 | 	mov	arg01, fp
174ec     84 61 BF FD | 	call	#_push
174f0                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
174f0     28 01 90 FD | 	jmp	#LR__1884
174f4                 | LR__1881
174f4     E4 60 BF FD | 	call	#_pop
174f8     A7 FA 61 FC | 	wrlong	result1, fp
174fc     04 4E 05 F1 | 	add	fp, #4
17500     A7 FC 61 FC | 	wrlong	result2, fp
17504     04 4E 05 F1 | 	add	fp, #4
17508     A7 FE 61 FC | 	wrlong	result3, fp
1750c                 | ' t1=pop()
1750c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1750c     08 4E 85 F1 | 	sub	fp, #8
17510     1C FE 0D F2 | 	cmp	result3, #28 wz
17514     08 4E 05 51 |  if_ne	add	fp, #8
17518     A7 26 02 5B |  if_ne	rdlong	local01, fp
1751c     08 4E 85 51 |  if_ne	sub	fp, #8
17520     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17524     E8 00 90 5D |  if_ne	jmp	#LR__1883
17528     A7 26 02 FB | 	rdlong	local01, fp
1752c     52 00 00 FF 
17530     08 E5 05 F1 | 	add	objptr, ##42248
17534     F2 26 62 FC | 	wrlong	local01, objptr
17538                 | '   q=t1.result.uresult
17538                 | '   if q<7 then 
17538     52 00 00 FF 
1753c     08 E5 85 F1 | 	sub	objptr, ##42248
17540     07 26 56 F2 | 	cmps	local01, #7 wc
17544     B8 00 90 3D |  if_ae	jmp	#LR__1882
17548     00 C0 1B FF 
1754c     00 26 06 F6 | 	mov	local01, ##931135488
17550     52 00 00 FF 
17554     08 E5 05 F1 | 	add	objptr, ##42248
17558     F2 16 02 FB | 	rdlong	arg03, objptr
1755c     02 16 66 F0 | 	shl	arg03, #2
17560     94 E5 85 F1 | 	sub	objptr, #404
17564     F2 16 02 F1 | 	add	arg03, objptr
17568     0B 13 02 FB | 	rdlong	arg01, arg03
1756c     51 00 00 FF 
17570     74 E5 85 F1 | 	sub	objptr, ##41844
17574     09 13 52 F6 | 	abs	arg01, arg01 wc
17578     1F 28 C6 C9 |  if_b	decod	local02, #31
1757c     00 28 06 36 |  if_ae	mov	local02, #0
17580     60 1E B1 FD | 	call	#__system___float_fromuns
17584     14 FB 61 F5 | 	xor	result1, local02
17588     FD 12 02 F6 | 	mov	arg01, result1
1758c     FF 7F 23 FF 
17590     00 14 06 F6 | 	mov	arg02, ##1191181824
17594     54 24 B1 FD | 	call	#__system___float_div
17598     FD 14 02 F6 | 	mov	arg02, result1
1759c     13 13 02 F6 | 	mov	arg01, local01
175a0     74 1E B1 FD | 	call	#__system___float_add
175a4     10 4E 05 F1 | 	add	fp, #16
175a8     A7 FA 61 FC | 	wrlong	result1, fp
175ac                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
175ac     10 4E 85 F1 | 	sub	fp, #16
175b0     1F FA 05 F4 | 	bitl	result1, #31
175b4     FD 12 02 F6 | 	mov	arg01, result1
175b8     89 41 1D FF 
175bc     6F 14 06 F6 | 	mov	arg02, ##981668463
175c0     01 16 06 F6 | 	mov	arg03, #1
175c4     54 26 B1 FD | 	call	#__system___float_cmp
175c8     00 FA 55 F2 | 	cmps	result1, #0 wc
175cc     10 4E 05 C1 |  if_b	add	fp, #16
175d0     A7 00 68 CC |  if_b	wrlong	#0, fp
175d4     10 4E 85 C1 |  if_b	sub	fp, #16
175d8     10 4E 05 F1 | 	add	fp, #16
175dc     A7 26 02 FB | 	rdlong	local01, fp
175e0     10 4E 85 F1 | 	sub	fp, #16
175e4     A7 26 62 FC | 	wrlong	local01, fp
175e8     08 4E 05 F1 | 	add	fp, #8
175ec     A7 3C 68 FC | 	wrlong	#30, fp
175f0     08 4E 85 F1 | 	sub	fp, #8
175f4     A7 12 02 F6 | 	mov	arg01, fp
175f8     78 60 BF FD | 	call	#_push
175fc                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
175fc     1C 00 90 FD | 	jmp	#LR__1884
17600                 | LR__1882
17600     29 12 06 F6 | 	mov	arg01, #41
17604     00 14 06 F6 | 	mov	arg02, #0
17608     70 B9 B0 FD | 	call	#_printerror
1760c                 | '      printerror(41) : return
1760c     0C 00 90 FD | 	jmp	#LR__1884
17610                 | LR__1883
17610     29 12 06 F6 | 	mov	arg01, #41
17614     00 14 06 F6 | 	mov	arg02, #0
17618     60 B9 B0 FD | 	call	#_printerror
1761c                 | LR__1884
1761c     A7 F0 03 F6 | 	mov	ptra, fp
17620     B2 00 A0 FD | 	call	#popregs_
17624                 | _do_pady_ret
17624     2D 00 64 FD | 	ret
17628                 | 
17628                 | ' 
17628                 | ' ' ------------------ padz
17628                 | ' 
17628                 | ' sub do_padz
17628                 | _do_padz
17628     02 4A 05 F6 | 	mov	COUNT_, #2
1762c     A8 00 A0 FD | 	call	#pushregs_
17630     14 F0 07 F1 | 	add	ptra, #20
17634     4A 00 00 FF 
17638     80 E4 05 F1 | 	add	objptr, ##38016
1763c     F2 26 02 FB | 	rdlong	local01, objptr
17640     13 17 02 F6 | 	mov	arg03, local01
17644     01 16 66 F0 | 	shl	arg03, #1
17648     13 17 02 F1 | 	add	arg03, local01
1764c     02 16 66 F0 | 	shl	arg03, #2
17650     03 00 00 FF 
17654     04 E4 85 F1 | 	sub	objptr, ##1540
17658     F2 16 02 F1 | 	add	arg03, objptr
1765c     0B 17 02 FB | 	rdlong	arg03, arg03
17660     0C 4E 05 F1 | 	add	fp, #12
17664     A7 16 62 FC | 	wrlong	arg03, fp
17668                 | ' 
17668                 | ' numpar=compiledline(lineptr_e).result.uresult
17668                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
17668     0C 4E 85 F1 | 	sub	fp, #12
1766c     02 16 16 F2 | 	cmp	arg03, #2 wc
17670     47 00 00 FF 
17674     7C E4 85 F1 | 	sub	objptr, ##36476
17678     40 00 90 CD |  if_b	jmp	#LR__1890
1767c     00 12 06 F6 | 	mov	arg01, #0
17680     8C 4F B1 FD | 	call	#__system___getiolock_0606
17684     FD 12 02 F6 | 	mov	arg01, result1
17688     E0 F2 B0 FD | 	call	#__system___lockmem
1768c     B7 01 00 FF 
17690     AB 15 06 F6 | 	mov	arg02, ##@LR__5945
17694     00 12 06 F6 | 	mov	arg01, #0
17698     00 16 06 F6 | 	mov	arg03, #0
1769c     C4 FF B0 FD | 	call	#__system___basic_print_string
176a0     00 12 06 F6 | 	mov	arg01, #0
176a4     68 4F B1 FD | 	call	#__system___getiolock_0606
176a8     FD 00 68 FC | 	wrlong	#0, result1
176ac     27 12 06 F6 | 	mov	arg01, #39
176b0     00 14 06 F6 | 	mov	arg02, #0
176b4     C4 B8 B0 FD | 	call	#_printerror
176b8     E0 01 90 FD | 	jmp	#LR__1894
176bc                 | LR__1890
176bc                 | ' if numpar=0 then 
176bc     0C 4E 05 F1 | 	add	fp, #12
176c0     A7 FE 09 FB | 	rdlong	result3, fp wz
176c4     0C 4E 85 F1 | 	sub	fp, #12
176c8     A8 00 90 5D |  if_ne	jmp	#LR__1891
176cc     00 C0 1B FF 
176d0     00 26 06 F6 | 	mov	local01, ##931135488
176d4     51 00 00 FF 
176d8     90 E5 05 F1 | 	add	objptr, ##41872
176dc     F2 12 02 FB | 	rdlong	arg01, objptr
176e0     51 00 00 FF 
176e4     90 E5 85 F1 | 	sub	objptr, ##41872
176e8     09 13 52 F6 | 	abs	arg01, arg01 wc
176ec     1F 28 C6 C9 |  if_b	decod	local02, #31
176f0     00 28 06 36 |  if_ae	mov	local02, #0
176f4     EC 1C B1 FD | 	call	#__system___float_fromuns
176f8     14 FB 61 F5 | 	xor	result1, local02
176fc     FD 12 02 F6 | 	mov	arg01, result1
17700     FF 7F 23 FF 
17704     00 14 06 F6 | 	mov	arg02, ##1191181824
17708     E0 22 B1 FD | 	call	#__system___float_div
1770c     FD 14 02 F6 | 	mov	arg02, result1
17710     13 13 02 F6 | 	mov	arg01, local01
17714     00 1D B1 FD | 	call	#__system___float_add
17718     10 4E 05 F1 | 	add	fp, #16
1771c     A7 FA 61 FC | 	wrlong	result1, fp
17720                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17720     10 4E 85 F1 | 	sub	fp, #16
17724     1F FA 05 F4 | 	bitl	result1, #31
17728     FD 12 02 F6 | 	mov	arg01, result1
1772c     89 41 1D FF 
17730     6F 14 06 F6 | 	mov	arg02, ##981668463
17734     01 16 06 F6 | 	mov	arg03, #1
17738     E0 24 B1 FD | 	call	#__system___float_cmp
1773c     00 FA 55 F2 | 	cmps	result1, #0 wc
17740     10 4E 05 C1 |  if_b	add	fp, #16
17744     A7 00 68 CC |  if_b	wrlong	#0, fp
17748     10 4E 85 C1 |  if_b	sub	fp, #16
1774c     10 4E 05 F1 | 	add	fp, #16
17750     A7 26 02 FB | 	rdlong	local01, fp
17754     10 4E 85 F1 | 	sub	fp, #16
17758     A7 26 62 FC | 	wrlong	local01, fp
1775c     08 4E 05 F1 | 	add	fp, #8
17760     A7 3C 68 FC | 	wrlong	#30, fp
17764     08 4E 85 F1 | 	sub	fp, #8
17768     A7 12 02 F6 | 	mov	arg01, fp
1776c     04 5F BF FD | 	call	#_push
17770                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17770     28 01 90 FD | 	jmp	#LR__1894
17774                 | LR__1891
17774     64 5E BF FD | 	call	#_pop
17778     A7 FA 61 FC | 	wrlong	result1, fp
1777c     04 4E 05 F1 | 	add	fp, #4
17780     A7 FC 61 FC | 	wrlong	result2, fp
17784     04 4E 05 F1 | 	add	fp, #4
17788     A7 FE 61 FC | 	wrlong	result3, fp
1778c                 | ' t1=pop()
1778c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1778c     08 4E 85 F1 | 	sub	fp, #8
17790     1C FE 0D F2 | 	cmp	result3, #28 wz
17794     08 4E 05 51 |  if_ne	add	fp, #8
17798     A7 26 02 5B |  if_ne	rdlong	local01, fp
1779c     08 4E 85 51 |  if_ne	sub	fp, #8
177a0     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
177a4     E8 00 90 5D |  if_ne	jmp	#LR__1893
177a8     A7 26 02 FB | 	rdlong	local01, fp
177ac     52 00 00 FF 
177b0     08 E5 05 F1 | 	add	objptr, ##42248
177b4     F2 26 62 FC | 	wrlong	local01, objptr
177b8                 | '   q=t1.result.uresult
177b8                 | '   if q<7 then 
177b8     52 00 00 FF 
177bc     08 E5 85 F1 | 	sub	objptr, ##42248
177c0     07 26 56 F2 | 	cmps	local01, #7 wc
177c4     B8 00 90 3D |  if_ae	jmp	#LR__1892
177c8     00 C0 1B FF 
177cc     00 26 06 F6 | 	mov	local01, ##931135488
177d0     52 00 00 FF 
177d4     08 E5 05 F1 | 	add	objptr, ##42248
177d8     F2 16 02 FB | 	rdlong	arg03, objptr
177dc     02 16 66 F0 | 	shl	arg03, #2
177e0     78 E5 85 F1 | 	sub	objptr, #376
177e4     F2 16 02 F1 | 	add	arg03, objptr
177e8     0B 13 02 FB | 	rdlong	arg01, arg03
177ec     51 00 00 FF 
177f0     90 E5 85 F1 | 	sub	objptr, ##41872
177f4     09 13 52 F6 | 	abs	arg01, arg01 wc
177f8     1F 28 C6 C9 |  if_b	decod	local02, #31
177fc     00 28 06 36 |  if_ae	mov	local02, #0
17800     E0 1B B1 FD | 	call	#__system___float_fromuns
17804     14 FB 61 F5 | 	xor	result1, local02
17808     FD 12 02 F6 | 	mov	arg01, result1
1780c     FF 7F 23 FF 
17810     00 14 06 F6 | 	mov	arg02, ##1191181824
17814     D4 21 B1 FD | 	call	#__system___float_div
17818     FD 14 02 F6 | 	mov	arg02, result1
1781c     13 13 02 F6 | 	mov	arg01, local01
17820     F4 1B B1 FD | 	call	#__system___float_add
17824     10 4E 05 F1 | 	add	fp, #16
17828     A7 FA 61 FC | 	wrlong	result1, fp
1782c                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1782c     10 4E 85 F1 | 	sub	fp, #16
17830     1F FA 05 F4 | 	bitl	result1, #31
17834     FD 12 02 F6 | 	mov	arg01, result1
17838     89 41 1D FF 
1783c     6F 14 06 F6 | 	mov	arg02, ##981668463
17840     01 16 06 F6 | 	mov	arg03, #1
17844     D4 23 B1 FD | 	call	#__system___float_cmp
17848     00 FA 55 F2 | 	cmps	result1, #0 wc
1784c     10 4E 05 C1 |  if_b	add	fp, #16
17850     A7 00 68 CC |  if_b	wrlong	#0, fp
17854     10 4E 85 C1 |  if_b	sub	fp, #16
17858     10 4E 05 F1 | 	add	fp, #16
1785c     A7 26 02 FB | 	rdlong	local01, fp
17860     10 4E 85 F1 | 	sub	fp, #16
17864     A7 26 62 FC | 	wrlong	local01, fp
17868     08 4E 05 F1 | 	add	fp, #8
1786c     A7 3C 68 FC | 	wrlong	#30, fp
17870     08 4E 85 F1 | 	sub	fp, #8
17874     A7 12 02 F6 | 	mov	arg01, fp
17878     F8 5D BF FD | 	call	#_push
1787c                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
1787c     1C 00 90 FD | 	jmp	#LR__1894
17880                 | LR__1892
17880     29 12 06 F6 | 	mov	arg01, #41
17884     00 14 06 F6 | 	mov	arg02, #0
17888     F0 B6 B0 FD | 	call	#_printerror
1788c                 | '      printerror(41) : return
1788c     0C 00 90 FD | 	jmp	#LR__1894
17890                 | LR__1893
17890     29 12 06 F6 | 	mov	arg01, #41
17894     00 14 06 F6 | 	mov	arg02, #0
17898     E0 B6 B0 FD | 	call	#_printerror
1789c                 | LR__1894
1789c     A7 F0 03 F6 | 	mov	ptra, fp
178a0     B2 00 A0 FD | 	call	#popregs_
178a4                 | _do_padz_ret
178a4     2D 00 64 FD | 	ret
178a8                 | 
178a8                 | ' 
178a8                 | ' '-------------------- paper
178a8                 | ' 
178a8                 | ' sub do_paper
178a8                 | _do_paper
178a8     03 4A 05 F6 | 	mov	COUNT_, #3
178ac     A8 00 A0 FD | 	call	#pushregs_
178b0     28 5D BF FD | 	call	#_pop
178b4     FD 26 02 F6 | 	mov	local01, result1
178b8     FE 28 02 F6 | 	mov	local02, result2
178bc     FF 2A 02 F6 | 	mov	local03, result3
178c0                 | ' t1=pop() 
178c0                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
178c0     1E 2A 0E F2 | 	cmp	local03, #30 wz
178c4     10 00 90 5D |  if_ne	jmp	#LR__1900
178c8     13 13 02 F6 | 	mov	arg01, local01
178cc     00 14 06 F6 | 	mov	arg02, #0
178d0     DC 23 B1 FD | 	call	#__system___float_tointeger
178d4     FD 26 02 F6 | 	mov	local01, result1
178d8                 | LR__1900
178d8                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
178d8     1F 2A 0E F2 | 	cmp	local03, #31 wz
178dc     18 00 90 5D |  if_ne	jmp	#LR__1901
178e0     13 13 02 F6 | 	mov	arg01, local01
178e4     0C 27 B1 FD | 	call	#__system____builtin_atof
178e8     FD 12 02 F6 | 	mov	arg01, result1
178ec     00 14 06 F6 | 	mov	arg02, #0
178f0     BC 23 B1 FD | 	call	#__system___float_tointeger
178f4     FD 26 02 F6 | 	mov	local01, result1
178f8                 | LR__1901
178f8     37 00 00 FF 
178fc     38 E4 05 F1 | 	add	objptr, ##28216
17900     F2 26 62 FC | 	wrlong	local01, objptr
17904     04 E4 05 F1 | 	add	objptr, #4
17908     F2 12 02 FB | 	rdlong	arg01, objptr
1790c                 | ' 
1790c                 | ' write_color:=ff
1790c     36 00 00 FF 
17910     FB E5 85 F1 | 	sub	objptr, ##28155
17914     F2 12 62 FC | 	wrlong	arg01, objptr
17918                 | ' write_background:=bb
17918     04 E4 05 F1 | 	add	objptr, #4
1791c     F2 26 62 FC | 	wrlong	local01, objptr
17920     45 E4 85 F1 | 	sub	objptr, #69
17924     A7 F0 03 F6 | 	mov	ptra, fp
17928     B2 00 A0 FD | 	call	#popregs_
1792c                 | _do_paper_ret
1792c     2D 00 64 FD | 	ret
17930                 | 
17930                 | ' 
17930                 | ' '-------------------- peek
17930                 | ' 
17930                 | ' sub do_peek
17930                 | _do_peek
17930     00 4A 05 F6 | 	mov	COUNT_, #0
17934     A8 00 A0 FD | 	call	#pushregs_
17938     14 F0 07 F1 | 	add	ptra, #20
1793c     9C 5C BF FD | 	call	#_pop
17940     A7 FA 61 FC | 	wrlong	result1, fp
17944     04 4E 05 F1 | 	add	fp, #4
17948     A7 FC 61 FC | 	wrlong	result2, fp
1794c     04 4E 05 F1 | 	add	fp, #4
17950     A7 FE 61 FC | 	wrlong	result3, fp
17954     08 4E 85 F1 | 	sub	fp, #8
17958     A7 12 02 F6 | 	mov	arg01, fp
1795c     60 5E BF FD | 	call	#_converttoint
17960     0C 4E 05 F1 | 	add	fp, #12
17964     A7 FA 61 FC | 	wrlong	result1, fp
17968                 | ' 
17968                 | ' t1=pop()
17968                 | ' a=converttoint(t1)
17968                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
17968     0C 4E 85 F1 | 	sub	fp, #12
1796c     00 04 00 FF 
17970     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17974     1C 00 90 3D |  if_ae	jmp	#LR__1910
17978     0C 4E 05 F1 | 	add	fp, #12
1797c     A7 12 02 FB | 	rdlong	arg01, fp
17980     09 FB C1 FA | 	rdbyte	result1, arg01
17984     04 4E 05 F1 | 	add	fp, #4
17988     A7 FA 61 FC | 	wrlong	result1, fp
1798c     10 4E 85 F1 | 	sub	fp, #16
17990     20 00 90 FD | 	jmp	#LR__1911
17994                 | LR__1910
17994     0C 4E 05 F1 | 	add	fp, #12
17998     A7 12 02 FB | 	rdlong	arg01, fp
1799c     0C 4E 85 F1 | 	sub	fp, #12
179a0     50 B8 B0 FD | 	call	#_pspeek
179a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
179a8     10 4E 05 F1 | 	add	fp, #16
179ac     A7 FA 61 FC | 	wrlong	result1, fp
179b0     10 4E 85 F1 | 	sub	fp, #16
179b4                 | LR__1911
179b4     08 4E 05 F1 | 	add	fp, #8
179b8     A7 3A 68 FC | 	wrlong	#29, fp
179bc     08 4E 05 F1 | 	add	fp, #8
179c0     A7 12 02 FB | 	rdlong	arg01, fp
179c4     10 4E 85 F1 | 	sub	fp, #16
179c8     A7 12 62 FC | 	wrlong	arg01, fp
179cc     A7 12 02 F6 | 	mov	arg01, fp
179d0     A0 5C BF FD | 	call	#_push
179d4     A7 F0 03 F6 | 	mov	ptra, fp
179d8     B2 00 A0 FD | 	call	#popregs_
179dc                 | _do_peek_ret
179dc     2D 00 64 FD | 	ret
179e0                 | 
179e0                 | ' 
179e0                 | ' '-------------------- pinfloat
179e0                 | ' 
179e0                 | ' sub do_pinfloat
179e0                 | _do_pinfloat
179e0     00 4A 05 F6 | 	mov	COUNT_, #0
179e4     A8 00 A0 FD | 	call	#pushregs_
179e8     0C F0 07 F1 | 	add	ptra, #12
179ec     EC 5B BF FD | 	call	#_pop
179f0     A7 FA 61 FC | 	wrlong	result1, fp
179f4     04 4E 05 F1 | 	add	fp, #4
179f8     A7 FC 61 FC | 	wrlong	result2, fp
179fc     04 4E 05 F1 | 	add	fp, #4
17a00     A7 FE 61 FC | 	wrlong	result3, fp
17a04     08 4E 85 F1 | 	sub	fp, #8
17a08     A7 12 02 F6 | 	mov	arg01, fp
17a0c     B0 5D BF FD | 	call	#_converttoint
17a10     50 FA 61 FD | 	fltl	result1
17a14     A7 F0 03 F6 | 	mov	ptra, fp
17a18     B2 00 A0 FD | 	call	#popregs_
17a1c                 | _do_pinfloat_ret
17a1c     2D 00 64 FD | 	ret
17a20                 | 
17a20                 | ' 
17a20                 | ' '-------------------- pinhi
17a20                 | ' 
17a20                 | ' sub do_pinhi
17a20                 | _do_pinhi
17a20     00 4A 05 F6 | 	mov	COUNT_, #0
17a24     A8 00 A0 FD | 	call	#pushregs_
17a28     0C F0 07 F1 | 	add	ptra, #12
17a2c     AC 5B BF FD | 	call	#_pop
17a30     A7 FA 61 FC | 	wrlong	result1, fp
17a34     04 4E 05 F1 | 	add	fp, #4
17a38     A7 FC 61 FC | 	wrlong	result2, fp
17a3c     04 4E 05 F1 | 	add	fp, #4
17a40     A7 FE 61 FC | 	wrlong	result3, fp
17a44     08 4E 85 F1 | 	sub	fp, #8
17a48     A7 12 02 F6 | 	mov	arg01, fp
17a4c     70 5D BF FD | 	call	#_converttoint
17a50     59 FA 61 FD | 	drvh	result1
17a54     A7 F0 03 F6 | 	mov	ptra, fp
17a58     B2 00 A0 FD | 	call	#popregs_
17a5c                 | _do_pinhi_ret
17a5c     2D 00 64 FD | 	ret
17a60                 | 
17a60                 | ' 
17a60                 | ' '-------------------- pinlo
17a60                 | ' 
17a60                 | ' sub do_pinlo
17a60                 | _do_pinlo
17a60     00 4A 05 F6 | 	mov	COUNT_, #0
17a64     A8 00 A0 FD | 	call	#pushregs_
17a68     0C F0 07 F1 | 	add	ptra, #12
17a6c     6C 5B BF FD | 	call	#_pop
17a70     A7 FA 61 FC | 	wrlong	result1, fp
17a74     04 4E 05 F1 | 	add	fp, #4
17a78     A7 FC 61 FC | 	wrlong	result2, fp
17a7c     04 4E 05 F1 | 	add	fp, #4
17a80     A7 FE 61 FC | 	wrlong	result3, fp
17a84     08 4E 85 F1 | 	sub	fp, #8
17a88     A7 12 02 F6 | 	mov	arg01, fp
17a8c     30 5D BF FD | 	call	#_converttoint
17a90     58 FA 61 FD | 	drvl	result1
17a94     A7 F0 03 F6 | 	mov	ptra, fp
17a98     B2 00 A0 FD | 	call	#popregs_
17a9c                 | _do_pinlo_ret
17a9c     2D 00 64 FD | 	ret
17aa0                 | 
17aa0                 | ' 
17aa0                 | ' '-------------------- pinread
17aa0                 | ' 
17aa0                 | ' sub do_pinread
17aa0                 | _do_pinread
17aa0     00 4A 05 F6 | 	mov	COUNT_, #0
17aa4     A8 00 A0 FD | 	call	#pushregs_
17aa8     0C F0 07 F1 | 	add	ptra, #12
17aac     2C 5B BF FD | 	call	#_pop
17ab0     A7 FA 61 FC | 	wrlong	result1, fp
17ab4     04 4E 05 F1 | 	add	fp, #4
17ab8     A7 FC 61 FC | 	wrlong	result2, fp
17abc     04 4E 05 F1 | 	add	fp, #4
17ac0     A7 FE 61 FC | 	wrlong	result3, fp
17ac4     08 4E 85 F1 | 	sub	fp, #8
17ac8     A7 12 02 F6 | 	mov	arg01, fp
17acc     F0 5C BF FD | 	call	#_converttoint
17ad0     FD 12 02 F6 | 	mov	arg01, result1
17ad4     20 12 CE F7 | 	test	arg01, #32 wz
17ad8     FF FB 01 56 |  if_ne	mov	result1, inb
17adc     FE FB 01 A6 |  if_e	mov	result1, ina
17ae0     09 FB 41 F0 | 	shr	result1, arg01
17ae4     06 12 46 F0 | 	shr	arg01, #6
17ae8     09 FB 41 F7 | 	zerox	result1, arg01
17aec     52 00 00 FF 
17af0     10 E5 05 F1 | 	add	objptr, ##42256
17af4     F2 FA 61 FC | 	wrlong	result1, objptr
17af8     52 00 00 FF 
17afc     10 E5 85 F1 | 	sub	objptr, ##42256
17b00     08 4E 05 F1 | 	add	fp, #8
17b04     A7 3A 68 FC | 	wrlong	#29, fp
17b08     08 4E 85 F1 | 	sub	fp, #8
17b0c     A7 08 68 FC | 	wrlong	#4, fp
17b10     A7 12 02 F6 | 	mov	arg01, fp
17b14     5C 5B BF FD | 	call	#_push
17b18     A7 F0 03 F6 | 	mov	ptra, fp
17b1c     B2 00 A0 FD | 	call	#popregs_
17b20                 | _do_pinread_ret
17b20     2D 00 64 FD | 	ret
17b24                 | 
17b24                 | ' 
17b24                 | ' '-------------------- pinstart
17b24                 | ' 
17b24                 | ' sub do_pinstart
17b24                 | _do_pinstart
17b24     03 4A 05 F6 | 	mov	COUNT_, #3
17b28     A8 00 A0 FD | 	call	#pushregs_
17b2c     30 F0 07 F1 | 	add	ptra, #48
17b30     A8 5A BF FD | 	call	#_pop
17b34     FD 16 02 F6 | 	mov	arg03, result1
17b38     FE 14 02 F6 | 	mov	arg02, result2
17b3c     FF 18 02 F6 | 	mov	arg04, result3
17b40     A7 16 62 FC | 	wrlong	arg03, fp
17b44     04 4E 05 F1 | 	add	fp, #4
17b48     A7 14 62 FC | 	wrlong	arg02, fp
17b4c     04 4E 05 F1 | 	add	fp, #4
17b50     A7 18 62 FC | 	wrlong	arg04, fp
17b54     08 4E 85 F1 | 	sub	fp, #8
17b58     80 5A BF FD | 	call	#_pop
17b5c     FD 16 02 F6 | 	mov	arg03, result1
17b60     FE 14 02 F6 | 	mov	arg02, result2
17b64     FF 18 02 F6 | 	mov	arg04, result3
17b68     0C 4E 05 F1 | 	add	fp, #12
17b6c     A7 16 62 FC | 	wrlong	arg03, fp
17b70     04 4E 05 F1 | 	add	fp, #4
17b74     A7 14 62 FC | 	wrlong	arg02, fp
17b78     04 4E 05 F1 | 	add	fp, #4
17b7c     A7 18 62 FC | 	wrlong	arg04, fp
17b80     14 4E 85 F1 | 	sub	fp, #20
17b84     54 5A BF FD | 	call	#_pop
17b88     FD 16 02 F6 | 	mov	arg03, result1
17b8c     FE 14 02 F6 | 	mov	arg02, result2
17b90     FF 18 02 F6 | 	mov	arg04, result3
17b94     18 4E 05 F1 | 	add	fp, #24
17b98     A7 16 62 FC | 	wrlong	arg03, fp
17b9c     04 4E 05 F1 | 	add	fp, #4
17ba0     A7 14 62 FC | 	wrlong	arg02, fp
17ba4     04 4E 05 F1 | 	add	fp, #4
17ba8     A7 18 62 FC | 	wrlong	arg04, fp
17bac     20 4E 85 F1 | 	sub	fp, #32
17bb0     28 5A BF FD | 	call	#_pop
17bb4     FF 16 02 F6 | 	mov	arg03, result3
17bb8     24 4E 05 F1 | 	add	fp, #36
17bbc     A7 FA 61 FC | 	wrlong	result1, fp
17bc0     04 4E 05 F1 | 	add	fp, #4
17bc4     A7 FC 61 FC | 	wrlong	result2, fp
17bc8     04 4E 05 F1 | 	add	fp, #4
17bcc     A7 16 62 FC | 	wrlong	arg03, fp
17bd0     08 4E 85 F1 | 	sub	fp, #8
17bd4     A7 12 02 F6 | 	mov	arg01, fp
17bd8     24 4E 85 F1 | 	sub	fp, #36
17bdc     E0 5B BF FD | 	call	#_converttoint
17be0     FD 26 02 F6 | 	mov	local01, result1
17be4     18 4E 05 F1 | 	add	fp, #24
17be8     A7 12 02 F6 | 	mov	arg01, fp
17bec     18 4E 85 F1 | 	sub	fp, #24
17bf0     CC 5B BF FD | 	call	#_converttoint
17bf4     FD 28 02 F6 | 	mov	local02, result1
17bf8     0C 4E 05 F1 | 	add	fp, #12
17bfc     A7 12 02 F6 | 	mov	arg01, fp
17c00     0C 4E 85 F1 | 	sub	fp, #12
17c04     B8 5B BF FD | 	call	#_converttoint
17c08     FD 2A 02 F6 | 	mov	local03, result1
17c0c     A7 12 02 F6 | 	mov	arg01, fp
17c10     AC 5B BF FD | 	call	#_converttoint
17c14     40 26 62 FD | 	dirl	local01
17c18     13 29 02 FC | 	wrpin	local02, local01
17c1c     13 2B 12 FC | 	wxpin	local03, local01
17c20     13 FB 21 FC | 	wypin	result1, local01
17c24     41 26 62 FD | 	dirh	local01
17c28     A7 F0 03 F6 | 	mov	ptra, fp
17c2c     B2 00 A0 FD | 	call	#popregs_
17c30                 | _do_pinstart_ret
17c30     2D 00 64 FD | 	ret
17c34                 | 
17c34                 | ' 
17c34                 | ' '-------------------- pintoggle
17c34                 | ' 
17c34                 | ' sub do_pintoggle
17c34                 | _do_pintoggle
17c34     00 4A 05 F6 | 	mov	COUNT_, #0
17c38     A8 00 A0 FD | 	call	#pushregs_
17c3c     0C F0 07 F1 | 	add	ptra, #12
17c40     98 59 BF FD | 	call	#_pop
17c44     A7 FA 61 FC | 	wrlong	result1, fp
17c48     04 4E 05 F1 | 	add	fp, #4
17c4c     A7 FC 61 FC | 	wrlong	result2, fp
17c50     04 4E 05 F1 | 	add	fp, #4
17c54     A7 FE 61 FC | 	wrlong	result3, fp
17c58     08 4E 85 F1 | 	sub	fp, #8
17c5c     A7 12 02 F6 | 	mov	arg01, fp
17c60     5C 5B BF FD | 	call	#_converttoint
17c64     5F FA 61 FD | 	drvnot	result1
17c68     A7 F0 03 F6 | 	mov	ptra, fp
17c6c     B2 00 A0 FD | 	call	#popregs_
17c70                 | _do_pintoggle_ret
17c70     2D 00 64 FD | 	ret
17c74                 | 
17c74                 | ' 
17c74                 | ' '-------------------- pinwrite
17c74                 | ' 
17c74                 | ' sub do_pinwrite
17c74                 | _do_pinwrite
17c74     01 4A 05 F6 | 	mov	COUNT_, #1
17c78     A8 00 A0 FD | 	call	#pushregs_
17c7c     18 F0 07 F1 | 	add	ptra, #24
17c80     58 59 BF FD | 	call	#_pop
17c84     FD 14 02 F6 | 	mov	arg02, result1
17c88     FE 12 02 F6 | 	mov	arg01, result2
17c8c     FF 26 02 F6 | 	mov	local01, result3
17c90     A7 14 62 FC | 	wrlong	arg02, fp
17c94     04 4E 05 F1 | 	add	fp, #4
17c98     A7 12 62 FC | 	wrlong	arg01, fp
17c9c     04 4E 05 F1 | 	add	fp, #4
17ca0     A7 26 62 FC | 	wrlong	local01, fp
17ca4     08 4E 85 F1 | 	sub	fp, #8
17ca8     30 59 BF FD | 	call	#_pop
17cac     FF 26 02 F6 | 	mov	local01, result3
17cb0     0C 4E 05 F1 | 	add	fp, #12
17cb4     A7 FA 61 FC | 	wrlong	result1, fp
17cb8     04 4E 05 F1 | 	add	fp, #4
17cbc     A7 FC 61 FC | 	wrlong	result2, fp
17cc0     04 4E 05 F1 | 	add	fp, #4
17cc4     A7 26 62 FC | 	wrlong	local01, fp
17cc8     08 4E 85 F1 | 	sub	fp, #8
17ccc     A7 12 02 F6 | 	mov	arg01, fp
17cd0     0C 4E 85 F1 | 	sub	fp, #12
17cd4     E8 5A BF FD | 	call	#_converttoint
17cd8     FD 26 02 F6 | 	mov	local01, result1
17cdc     A7 12 02 F6 | 	mov	arg01, fp
17ce0     DC 5A BF FD | 	call	#_converttoint
17ce4     FD 14 02 F6 | 	mov	arg02, result1
17ce8     13 13 02 F6 | 	mov	arg01, local01
17cec     30 EE B0 FD | 	call	#__system___pinwrite
17cf0     A7 F0 03 F6 | 	mov	ptra, fp
17cf4     B2 00 A0 FD | 	call	#popregs_
17cf8                 | _do_pinwrite_ret
17cf8     2D 00 64 FD | 	ret
17cfc                 | 
17cfc                 | ' 
17cfc                 | ' '-------------------- play
17cfc                 | ' 
17cfc                 | ' sub do_play
17cfc                 | _do_play
17cfc     08 4A 05 F6 | 	mov	COUNT_, #8
17d00     A8 00 A0 FD | 	call	#pushregs_
17d04     7C F0 07 F1 | 	add	ptra, #124
17d08     68 4E 05 F1 | 	add	fp, #104
17d0c     77 CC A1 FF 
17d10     A7 7C 6B FC | 	wrlong	##1134096318, fp
17d14                 | ' speed_coeff=305.873
17d14                 | ' 
17d14                 | ' for i=0 to 8 : params(i)=-2.0 : next i
17d14     64 4E 85 F1 | 	sub	fp, #100
17d18     A7 00 68 FC | 	wrlong	#0, fp
17d1c     97 18 48 FB | 	callpa	#(@LR__1921-@LR__1920)>>2,fcache_load_ptr_
17d20                 | LR__1920
17d20     A7 16 02 FB | 	rdlong	arg03, fp
17d24     02 16 66 F0 | 	shl	arg03, #2
17d28     34 4E 05 F1 | 	add	fp, #52
17d2c     A7 16 02 F1 | 	add	arg03, fp
17d30     00 00 E0 FF 
17d34     0B 01 68 FC | 	wrlong	##-1073741824, arg03
17d38     34 4E 85 F1 | 	sub	fp, #52
17d3c     A7 26 02 FB | 	rdlong	local01, fp
17d40     01 26 06 F1 | 	add	local01, #1
17d44     A7 26 62 FC | 	wrlong	local01, fp
17d48     09 26 56 F2 | 	cmps	local01, #9 wc
17d4c     D0 FF 9F CD |  if_b	jmp	#LR__1920
17d50                 | LR__1921
17d50     04 4E 85 F1 | 	sub	fp, #4
17d54     4A 00 00 FF 
17d58     80 E4 05 F1 | 	add	objptr, ##38016
17d5c     F2 28 02 FB | 	rdlong	local02, objptr
17d60     14 2B 02 F6 | 	mov	local03, local02
17d64     01 2A 66 F0 | 	shl	local03, #1
17d68     14 2B 02 F1 | 	add	local03, local02
17d6c     02 2A 66 F0 | 	shl	local03, #2
17d70     03 00 00 FF 
17d74     04 E4 85 F1 | 	sub	objptr, ##1540
17d78     F2 2A 02 F1 | 	add	local03, objptr
17d7c     15 2D 02 FB | 	rdlong	local04, local03
17d80     A7 2C 62 FC | 	wrlong	local04, fp
17d84                 | ' numpar=compiledline(lineptr_e).result.uresult
17d84                 | ' for i=numpar to 1 step -1 
17d84     04 4E 05 F1 | 	add	fp, #4
17d88     A7 2C 62 FC | 	wrlong	local04, fp
17d8c     04 4E 85 F1 | 	sub	fp, #4
17d90     47 00 00 FF 
17d94     7C E4 85 F1 | 	sub	objptr, ##36476
17d98                 | LR__1922
17d98     40 58 BF FD | 	call	#_pop
17d9c     5C 4E 05 F1 | 	add	fp, #92
17da0     A7 FA 61 FC | 	wrlong	result1, fp
17da4     04 4E 05 F1 | 	add	fp, #4
17da8     A7 FC 61 FC | 	wrlong	result2, fp
17dac     04 4E 05 F1 | 	add	fp, #4
17db0     A7 FE 61 FC | 	wrlong	result3, fp
17db4     60 4E 85 F1 | 	sub	fp, #96
17db8     A7 2A 02 FB | 	rdlong	local03, fp
17dbc     01 2A 86 F1 | 	sub	local03, #1
17dc0     02 2A 66 F0 | 	shl	local03, #2
17dc4     34 4E 05 F1 | 	add	fp, #52
17dc8     A7 2A 02 F1 | 	add	local03, fp
17dcc     24 4E 05 F1 | 	add	fp, #36
17dd0     A7 2E 02 F6 | 	mov	local05, fp
17dd4     17 13 02 F6 | 	mov	arg01, local05
17dd8     5C 4E 85 F1 | 	sub	fp, #92
17ddc     9C 5A BF FD | 	call	#_converttofloat
17de0     15 FB 61 FC | 	wrlong	result1, local03
17de4     04 4E 05 F1 | 	add	fp, #4
17de8     A7 26 02 FB | 	rdlong	local01, fp
17dec     01 26 86 F1 | 	sub	local01, #1
17df0     A7 26 62 FC | 	wrlong	local01, fp
17df4     04 4E 85 F1 | 	sub	fp, #4
17df8     01 26 56 F2 | 	cmps	local01, #1 wc
17dfc     98 FF 9F 3D |  if_ae	jmp	#LR__1922
17e00                 | ' 
17e00                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
17e00     38 4E 05 F1 | 	add	fp, #56
17e04     A7 12 02 FB | 	rdlong	arg01, fp
17e08     38 4E 85 F1 | 	sub	fp, #56
17e0c     00 14 06 F6 | 	mov	arg02, #0
17e10     01 16 06 F6 | 	mov	arg03, #1
17e14     04 1E B1 FD | 	call	#__system___float_cmp
17e18     00 FA 55 F2 | 	cmps	result1, #0 wc
17e1c     0C 4E 05 C1 |  if_b	add	fp, #12
17e20     A7 00 68 CC |  if_b	wrlong	#0, fp
17e24     0C 4E 85 C1 |  if_b	sub	fp, #12
17e28     2C 00 90 CD |  if_b	jmp	#LR__1923
17e2c     38 4E 05 F1 | 	add	fp, #56
17e30     A7 12 02 FB | 	rdlong	arg01, fp
17e34     38 4E 85 F1 | 	sub	fp, #56
17e38     01 14 06 F6 | 	mov	arg02, #1
17e3c     70 1E B1 FD | 	call	#__system___float_tointeger
17e40     FD 26 52 F6 | 	abs	local01, result1 wc
17e44     07 26 06 F5 | 	and	local01, #7
17e48     13 27 82 F6 | 	negc	local01, local01
17e4c     0C 4E 05 F1 | 	add	fp, #12
17e50     A7 26 62 FC | 	wrlong	local01, fp
17e54     0C 4E 85 F1 | 	sub	fp, #12
17e58                 | LR__1923
17e58                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
17e58     3C 4E 05 F1 | 	add	fp, #60
17e5c     A7 12 02 FB | 	rdlong	arg01, fp
17e60     3C 4E 85 F1 | 	sub	fp, #60
17e64     00 14 06 F6 | 	mov	arg02, #0
17e68     01 16 06 F6 | 	mov	arg03, #1
17e6c     AC 1D B1 FD | 	call	#__system___float_cmp
17e70     00 FA 55 F2 | 	cmps	result1, #0 wc
17e74     40 00 90 3D |  if_ae	jmp	#LR__1924
17e78     0C 4E 05 F1 | 	add	fp, #12
17e7c     A7 28 02 FB | 	rdlong	local02, fp
17e80     14 2B 02 F6 | 	mov	local03, local02
17e84     01 2A 66 F0 | 	shl	local03, #1
17e88     14 2B 02 F1 | 	add	local03, local02
17e8c     03 2A 66 F0 | 	shl	local03, #3
17e90     14 00 00 FF 
17e94     38 E5 05 F1 | 	add	objptr, ##10552
17e98     F2 2A 02 F1 | 	add	local03, objptr
17e9c     15 31 02 FB | 	rdlong	local06, local03
17ea0     60 4E 05 F1 | 	add	fp, #96
17ea4     A7 30 62 FC | 	wrlong	local06, fp
17ea8     6C 4E 85 F1 | 	sub	fp, #108
17eac     14 00 00 FF 
17eb0     38 E5 85 F1 | 	sub	objptr, ##10552
17eb4     44 00 90 FD | 	jmp	#LR__1925
17eb8                 | LR__1924
17eb8     3C 4E 05 F1 | 	add	fp, #60
17ebc     A7 2C 02 FB | 	rdlong	local04, fp
17ec0     30 4E 05 F1 | 	add	fp, #48
17ec4     A7 2C 62 FC | 	wrlong	local04, fp
17ec8     60 4E 85 F1 | 	sub	fp, #96
17ecc     A7 28 02 FB | 	rdlong	local02, fp
17ed0     14 2B 02 F6 | 	mov	local03, local02
17ed4     01 2A 66 F0 | 	shl	local03, #1
17ed8     14 2B 02 F1 | 	add	local03, local02
17edc     03 2A 66 F0 | 	shl	local03, #3
17ee0     14 00 00 FF 
17ee4     38 E5 05 F1 | 	add	objptr, ##10552
17ee8     F2 2A 02 F1 | 	add	local03, objptr
17eec     0C 4E 85 F1 | 	sub	fp, #12
17ef0     15 2D 62 FC | 	wrlong	local04, local03
17ef4     14 00 00 FF 
17ef8     38 E5 85 F1 | 	sub	objptr, ##10552
17efc                 | LR__1925
17efc                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
17efc     40 4E 05 F1 | 	add	fp, #64
17f00     A7 12 02 FB | 	rdlong	arg01, fp
17f04     40 4E 85 F1 | 	sub	fp, #64
17f08     00 14 06 F6 | 	mov	arg02, #0
17f0c     01 16 06 F6 | 	mov	arg03, #1
17f10     08 1D B1 FD | 	call	#__system___float_cmp
17f14     00 FA 55 F2 | 	cmps	result1, #0 wc
17f18     24 00 90 CD |  if_b	jmp	#LR__1926
17f1c     40 4E 05 F1 | 	add	fp, #64
17f20     A7 12 02 FB | 	rdlong	arg01, fp
17f24     40 4E 85 F1 | 	sub	fp, #64
17f28     20 0E 23 FF 
17f2c     00 14 06 F6 | 	mov	arg02, ##1176256512
17f30     01 16 66 F6 | 	neg	arg03, #1
17f34     E4 1C B1 FD | 	call	#__system___float_cmp
17f38     01 FA 55 F2 | 	cmps	result1, #1 wc
17f3c     48 00 90 CD |  if_b	jmp	#LR__1927
17f40                 | LR__1926
17f40     0C 4E 05 F1 | 	add	fp, #12
17f44     A7 2A 02 FB | 	rdlong	local03, fp
17f48     15 33 02 F6 | 	mov	local07, local03
17f4c     01 32 66 F0 | 	shl	local07, #1
17f50     15 33 02 F1 | 	add	local07, local03
17f54     03 32 66 F0 | 	shl	local07, #3
17f58     14 00 00 FF 
17f5c     38 E5 05 F1 | 	add	objptr, ##10552
17f60     F2 32 02 F1 | 	add	local07, objptr
17f64     06 32 06 F1 | 	add	local07, #6
17f68     19 2F E2 FA | 	rdword	local05, local07
17f6c     17 2D 32 F9 | 	getword	local04, local05, #0
17f70     1C 4E 05 F1 | 	add	fp, #28
17f74     A7 2C 62 FC | 	wrlong	local04, fp
17f78     28 4E 85 F1 | 	sub	fp, #40
17f7c     14 00 00 FF 
17f80     38 E5 85 F1 | 	sub	objptr, ##10552
17f84     54 00 90 FD | 	jmp	#LR__1928
17f88                 | LR__1927
17f88     40 4E 05 F1 | 	add	fp, #64
17f8c     A7 12 02 FB | 	rdlong	arg01, fp
17f90     40 4E 85 F1 | 	sub	fp, #64
17f94     01 14 06 F6 | 	mov	arg02, #1
17f98     14 1D B1 FD | 	call	#__system___float_tointeger
17f9c     28 4E 05 F1 | 	add	fp, #40
17fa0     A7 FA 61 FC | 	wrlong	result1, fp
17fa4     1C 4E 85 F1 | 	sub	fp, #28
17fa8     A7 28 02 FB | 	rdlong	local02, fp
17fac     14 2B 02 F6 | 	mov	local03, local02
17fb0     01 2A 66 F0 | 	shl	local03, #1
17fb4     14 2B 02 F1 | 	add	local03, local02
17fb8     03 2A 66 F0 | 	shl	local03, #3
17fbc     14 00 00 FF 
17fc0     38 E5 05 F1 | 	add	objptr, ##10552
17fc4     F2 2A 02 F1 | 	add	local03, objptr
17fc8     0C 4E 85 F1 | 	sub	fp, #12
17fcc     06 2A 06 F1 | 	add	local03, #6
17fd0     15 FB 51 FC | 	wrword	result1, local03
17fd4     14 00 00 FF 
17fd8     38 E5 85 F1 | 	sub	objptr, ##10552
17fdc                 | LR__1928
17fdc                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
17fdc     44 4E 05 F1 | 	add	fp, #68
17fe0     A7 12 02 FB | 	rdlong	arg01, fp
17fe4     44 4E 85 F1 | 	sub	fp, #68
17fe8     00 14 06 F6 | 	mov	arg02, #0
17fec     01 16 06 F6 | 	mov	arg03, #1
17ff0     28 1C B1 FD | 	call	#__system___float_cmp
17ff4     00 FA 55 F2 | 	cmps	result1, #0 wc
17ff8     24 00 90 CD |  if_b	jmp	#LR__1929
17ffc     44 4E 05 F1 | 	add	fp, #68
18000     A7 12 02 FB | 	rdlong	arg01, fp
18004     44 4E 85 F1 | 	sub	fp, #68
18008     89 C1 20 FF 
1800c     6F 14 06 F6 | 	mov	arg02, ##1099108975
18010     01 16 66 F6 | 	neg	arg03, #1
18014     04 1C B1 FD | 	call	#__system___float_cmp
18018     01 FA 55 F2 | 	cmps	result1, #1 wc
1801c     44 00 90 CD |  if_b	jmp	#LR__1930
18020                 | LR__1929
18020     0C 4E 05 F1 | 	add	fp, #12
18024     A7 28 02 FB | 	rdlong	local02, fp
18028     14 2B 02 F6 | 	mov	local03, local02
1802c     01 2A 66 F0 | 	shl	local03, #1
18030     14 2B 02 F1 | 	add	local03, local02
18034     03 2A 66 F0 | 	shl	local03, #3
18038     14 00 00 FF 
1803c     38 E5 05 F1 | 	add	objptr, ##10552
18040     F2 2A 02 F1 | 	add	local03, objptr
18044     0C 2A 06 F1 | 	add	local03, #12
18048     15 31 02 FB | 	rdlong	local06, local03
1804c     68 4E 05 F1 | 	add	fp, #104
18050     A7 30 62 FC | 	wrlong	local06, fp
18054     74 4E 85 F1 | 	sub	fp, #116
18058     14 00 00 FF 
1805c     38 E5 85 F1 | 	sub	objptr, ##10552
18060     48 00 90 FD | 	jmp	#LR__1931
18064                 | LR__1930
18064     44 4E 05 F1 | 	add	fp, #68
18068     A7 2C 02 FB | 	rdlong	local04, fp
1806c     30 4E 05 F1 | 	add	fp, #48
18070     A7 2C 62 FC | 	wrlong	local04, fp
18074     68 4E 85 F1 | 	sub	fp, #104
18078     A7 28 02 FB | 	rdlong	local02, fp
1807c     14 2B 02 F6 | 	mov	local03, local02
18080     01 2A 66 F0 | 	shl	local03, #1
18084     14 2B 02 F1 | 	add	local03, local02
18088     03 2A 66 F0 | 	shl	local03, #3
1808c     14 00 00 FF 
18090     38 E5 05 F1 | 	add	objptr, ##10552
18094     F2 2A 02 F1 | 	add	local03, objptr
18098     0C 4E 85 F1 | 	sub	fp, #12
1809c     0C 2A 06 F1 | 	add	local03, #12
180a0     15 2D 62 FC | 	wrlong	local04, local03
180a4     14 00 00 FF 
180a8     38 E5 85 F1 | 	sub	objptr, ##10552
180ac                 | LR__1931
180ac                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
180ac     48 4E 05 F1 | 	add	fp, #72
180b0     A7 12 02 FB | 	rdlong	arg01, fp
180b4     48 4E 85 F1 | 	sub	fp, #72
180b8     00 14 06 F6 | 	mov	arg02, #0
180bc     01 16 06 F6 | 	mov	arg03, #1
180c0     58 1B B1 FD | 	call	#__system___float_cmp
180c4     00 FA 55 F2 | 	cmps	result1, #0 wc
180c8     24 00 90 CD |  if_b	jmp	#LR__1932
180cc     48 4E 05 F1 | 	add	fp, #72
180d0     A7 12 02 FB | 	rdlong	arg01, fp
180d4     48 4E 85 F1 | 	sub	fp, #72
180d8     00 00 21 FF 
180dc     00 14 06 F6 | 	mov	arg02, ##1107296256
180e0     01 16 66 F6 | 	neg	arg03, #1
180e4     34 1B B1 FD | 	call	#__system___float_cmp
180e8     01 FA 55 F2 | 	cmps	result1, #1 wc
180ec     48 00 90 CD |  if_b	jmp	#LR__1933
180f0                 | LR__1932
180f0     0C 4E 05 F1 | 	add	fp, #12
180f4     A7 2A 02 FB | 	rdlong	local03, fp
180f8     15 33 02 F6 | 	mov	local07, local03
180fc     01 32 66 F0 | 	shl	local07, #1
18100     15 33 02 F1 | 	add	local07, local03
18104     03 32 66 F0 | 	shl	local07, #3
18108     14 00 00 FF 
1810c     38 E5 05 F1 | 	add	objptr, ##10552
18110     F2 32 02 F1 | 	add	local07, objptr
18114     04 32 06 F1 | 	add	local07, #4
18118     19 2F C2 FA | 	rdbyte	local05, local07
1811c     17 2D E2 F8 | 	getbyte	local04, local05, #0
18120     14 4E 05 F1 | 	add	fp, #20
18124     A7 2C 62 FC | 	wrlong	local04, fp
18128     20 4E 85 F1 | 	sub	fp, #32
1812c     14 00 00 FF 
18130     38 E5 85 F1 | 	sub	objptr, ##10552
18134     54 00 90 FD | 	jmp	#LR__1934
18138                 | LR__1933
18138     48 4E 05 F1 | 	add	fp, #72
1813c     A7 12 02 FB | 	rdlong	arg01, fp
18140     48 4E 85 F1 | 	sub	fp, #72
18144     01 14 06 F6 | 	mov	arg02, #1
18148     64 1B B1 FD | 	call	#__system___float_tointeger
1814c     20 4E 05 F1 | 	add	fp, #32
18150     A7 FA 61 FC | 	wrlong	result1, fp
18154     14 4E 85 F1 | 	sub	fp, #20
18158     A7 28 02 FB | 	rdlong	local02, fp
1815c     14 2B 02 F6 | 	mov	local03, local02
18160     01 2A 66 F0 | 	shl	local03, #1
18164     14 2B 02 F1 | 	add	local03, local02
18168     03 2A 66 F0 | 	shl	local03, #3
1816c     14 00 00 FF 
18170     38 E5 05 F1 | 	add	objptr, ##10552
18174     F2 2A 02 F1 | 	add	local03, objptr
18178     0C 4E 85 F1 | 	sub	fp, #12
1817c     04 2A 06 F1 | 	add	local03, #4
18180     15 FB 41 FC | 	wrbyte	result1, local03
18184     14 00 00 FF 
18188     38 E5 85 F1 | 	sub	objptr, ##10552
1818c                 | LR__1934
1818c                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
1818c     4C 4E 05 F1 | 	add	fp, #76
18190     A7 12 02 FB | 	rdlong	arg01, fp
18194     4C 4E 85 F1 | 	sub	fp, #76
18198     00 14 06 F6 | 	mov	arg02, #0
1819c     01 16 06 F6 | 	mov	arg03, #1
181a0     78 1A B1 FD | 	call	#__system___float_cmp
181a4     00 FA 55 F2 | 	cmps	result1, #0 wc
181a8     24 00 90 CD |  if_b	jmp	#LR__1935
181ac     4C 4E 05 F1 | 	add	fp, #76
181b0     A7 12 02 FB | 	rdlong	arg01, fp
181b4     4C 4E 85 F1 | 	sub	fp, #76
181b8     00 80 20 FF 
181bc     00 14 06 F6 | 	mov	arg02, ##1090519040
181c0     01 16 66 F6 | 	neg	arg03, #1
181c4     54 1A B1 FD | 	call	#__system___float_cmp
181c8     01 FA 55 F2 | 	cmps	result1, #1 wc
181cc     48 00 90 CD |  if_b	jmp	#LR__1936
181d0                 | LR__1935
181d0     0C 4E 05 F1 | 	add	fp, #12
181d4     A7 2A 02 FB | 	rdlong	local03, fp
181d8     15 33 02 F6 | 	mov	local07, local03
181dc     01 32 66 F0 | 	shl	local07, #1
181e0     15 33 02 F1 | 	add	local07, local03
181e4     03 32 66 F0 | 	shl	local07, #3
181e8     14 00 00 FF 
181ec     38 E5 05 F1 | 	add	objptr, ##10552
181f0     F2 32 02 F1 | 	add	local07, objptr
181f4     05 32 06 F1 | 	add	local07, #5
181f8     19 2F C2 FA | 	rdbyte	local05, local07
181fc     17 2D E2 F8 | 	getbyte	local04, local05, #0
18200     18 4E 05 F1 | 	add	fp, #24
18204     A7 2C 62 FC | 	wrlong	local04, fp
18208     24 4E 85 F1 | 	sub	fp, #36
1820c     14 00 00 FF 
18210     38 E5 85 F1 | 	sub	objptr, ##10552
18214     54 00 90 FD | 	jmp	#LR__1937
18218                 | LR__1936
18218     4C 4E 05 F1 | 	add	fp, #76
1821c     A7 12 02 FB | 	rdlong	arg01, fp
18220     4C 4E 85 F1 | 	sub	fp, #76
18224     01 14 06 F6 | 	mov	arg02, #1
18228     84 1A B1 FD | 	call	#__system___float_tointeger
1822c     24 4E 05 F1 | 	add	fp, #36
18230     A7 FA 61 FC | 	wrlong	result1, fp
18234     18 4E 85 F1 | 	sub	fp, #24
18238     A7 28 02 FB | 	rdlong	local02, fp
1823c     14 2B 02 F6 | 	mov	local03, local02
18240     01 2A 66 F0 | 	shl	local03, #1
18244     14 2B 02 F1 | 	add	local03, local02
18248     03 2A 66 F0 | 	shl	local03, #3
1824c     14 00 00 FF 
18250     38 E5 05 F1 | 	add	objptr, ##10552
18254     F2 2A 02 F1 | 	add	local03, objptr
18258     0C 4E 85 F1 | 	sub	fp, #12
1825c     05 2A 06 F1 | 	add	local03, #5
18260     15 FB 41 FC | 	wrbyte	result1, local03
18264     14 00 00 FF 
18268     38 E5 85 F1 | 	sub	objptr, ##10552
1826c                 | LR__1937
1826c                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
1826c     50 4E 05 F1 | 	add	fp, #80
18270     A7 12 02 FB | 	rdlong	arg01, fp
18274     50 4E 85 F1 | 	sub	fp, #80
18278     00 14 06 F6 | 	mov	arg02, #0
1827c     01 16 06 F6 | 	mov	arg03, #1
18280     98 19 B1 FD | 	call	#__system___float_cmp
18284     00 FA 55 F2 | 	cmps	result1, #0 wc
18288     24 00 90 CD |  if_b	jmp	#LR__1938
1828c     50 4E 05 F1 | 	add	fp, #80
18290     A7 12 02 FB | 	rdlong	arg01, fp
18294     50 4E 85 F1 | 	sub	fp, #80
18298     00 3D 22 FF 
1829c     00 14 06 F6 | 	mov	arg02, ##1148846080
182a0     01 16 66 F6 | 	neg	arg03, #1
182a4     74 19 B1 FD | 	call	#__system___float_cmp
182a8     01 FA 55 F2 | 	cmps	result1, #1 wc
182ac     44 00 90 CD |  if_b	jmp	#LR__1939
182b0                 | LR__1938
182b0     0C 4E 05 F1 | 	add	fp, #12
182b4     A7 28 02 FB | 	rdlong	local02, fp
182b8     14 2B 02 F6 | 	mov	local03, local02
182bc     01 2A 66 F0 | 	shl	local03, #1
182c0     14 2B 02 F1 | 	add	local03, local02
182c4     03 2A 66 F0 | 	shl	local03, #3
182c8     14 00 00 FF 
182cc     38 E5 05 F1 | 	add	objptr, ##10552
182d0     F2 2A 02 F1 | 	add	local03, objptr
182d4     08 2A 06 F1 | 	add	local03, #8
182d8     15 31 02 FB | 	rdlong	local06, local03
182dc     6C 4E 05 F1 | 	add	fp, #108
182e0     A7 30 62 FC | 	wrlong	local06, fp
182e4     78 4E 85 F1 | 	sub	fp, #120
182e8     14 00 00 FF 
182ec     38 E5 85 F1 | 	sub	objptr, ##10552
182f0     48 00 90 FD | 	jmp	#LR__1940
182f4                 | LR__1939
182f4     50 4E 05 F1 | 	add	fp, #80
182f8     A7 30 02 FB | 	rdlong	local06, fp
182fc     28 4E 05 F1 | 	add	fp, #40
18300     A7 30 62 FC | 	wrlong	local06, fp
18304     6C 4E 85 F1 | 	sub	fp, #108
18308     A7 28 02 FB | 	rdlong	local02, fp
1830c     14 2B 02 F6 | 	mov	local03, local02
18310     01 2A 66 F0 | 	shl	local03, #1
18314     14 2B 02 F1 | 	add	local03, local02
18318     03 2A 66 F0 | 	shl	local03, #3
1831c     14 00 00 FF 
18320     38 E5 05 F1 | 	add	objptr, ##10552
18324     F2 2A 02 F1 | 	add	local03, objptr
18328     0C 4E 85 F1 | 	sub	fp, #12
1832c     08 2A 06 F1 | 	add	local03, #8
18330     15 31 62 FC | 	wrlong	local06, local03
18334     14 00 00 FF 
18338     38 E5 85 F1 | 	sub	objptr, ##10552
1833c                 | LR__1940
1833c                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
1833c     54 4E 05 F1 | 	add	fp, #84
18340     A7 12 02 FB | 	rdlong	arg01, fp
18344     54 4E 85 F1 | 	sub	fp, #84
18348     00 C0 5F FF 
1834c     00 14 06 F6 | 	mov	arg02, ##-1082130432
18350     01 16 06 F6 | 	mov	arg03, #1
18354     C4 18 B1 FD | 	call	#__system___float_cmp
18358     00 FA 55 F2 | 	cmps	result1, #0 wc
1835c     24 00 90 CD |  if_b	jmp	#LR__1941
18360     54 4E 05 F1 | 	add	fp, #84
18364     A7 12 02 FB | 	rdlong	arg01, fp
18368     54 4E 85 F1 | 	sub	fp, #84
1836c     00 C0 1F FF 
18370     00 14 06 F6 | 	mov	arg02, ##1065353216
18374     01 16 66 F6 | 	neg	arg03, #1
18378     A0 18 B1 FD | 	call	#__system___float_cmp
1837c     01 FA 55 F2 | 	cmps	result1, #1 wc
18380     44 00 90 CD |  if_b	jmp	#LR__1942
18384                 | LR__1941
18384     0C 4E 05 F1 | 	add	fp, #12
18388     A7 28 02 FB | 	rdlong	local02, fp
1838c     14 2B 02 F6 | 	mov	local03, local02
18390     01 2A 66 F0 | 	shl	local03, #1
18394     14 2B 02 F1 | 	add	local03, local02
18398     03 2A 66 F0 | 	shl	local03, #3
1839c     14 00 00 FF 
183a0     38 E5 05 F1 | 	add	objptr, ##10552
183a4     F2 2A 02 F1 | 	add	local03, objptr
183a8     10 2A 06 F1 | 	add	local03, #16
183ac     15 31 02 FB | 	rdlong	local06, local03
183b0     64 4E 05 F1 | 	add	fp, #100
183b4     A7 30 62 FC | 	wrlong	local06, fp
183b8     70 4E 85 F1 | 	sub	fp, #112
183bc     14 00 00 FF 
183c0     38 E5 85 F1 | 	sub	objptr, ##10552
183c4     48 00 90 FD | 	jmp	#LR__1943
183c8                 | LR__1942
183c8     54 4E 05 F1 | 	add	fp, #84
183cc     A7 30 02 FB | 	rdlong	local06, fp
183d0     1C 4E 05 F1 | 	add	fp, #28
183d4     A7 30 62 FC | 	wrlong	local06, fp
183d8     64 4E 85 F1 | 	sub	fp, #100
183dc     A7 28 02 FB | 	rdlong	local02, fp
183e0     14 2B 02 F6 | 	mov	local03, local02
183e4     01 2A 66 F0 | 	shl	local03, #1
183e8     14 2B 02 F1 | 	add	local03, local02
183ec     03 2A 66 F0 | 	shl	local03, #3
183f0     14 00 00 FF 
183f4     38 E5 05 F1 | 	add	objptr, ##10552
183f8     F2 2A 02 F1 | 	add	local03, objptr
183fc     0C 4E 85 F1 | 	sub	fp, #12
18400     10 2A 06 F1 | 	add	local03, #16
18404     15 31 62 FC | 	wrlong	local06, local03
18408     14 00 00 FF 
1840c     38 E5 85 F1 | 	sub	objptr, ##10552
18410                 | LR__1943
18410                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
18410     58 4E 05 F1 | 	add	fp, #88
18414     A7 12 02 FB | 	rdlong	arg01, fp
18418     58 4E 85 F1 | 	sub	fp, #88
1841c     00 14 06 F6 | 	mov	arg02, #0
18420     01 16 06 F6 | 	mov	arg03, #1
18424     F4 17 B1 FD | 	call	#__system___float_cmp
18428     00 FA 55 F2 | 	cmps	result1, #0 wc
1842c     24 00 90 CD |  if_b	jmp	#LR__1944
18430     58 4E 05 F1 | 	add	fp, #88
18434     A7 12 02 FB | 	rdlong	arg01, fp
18438     58 4E 85 F1 | 	sub	fp, #88
1843c     80 BF 21 FF 
18440     00 14 06 F6 | 	mov	arg02, ##1132396544
18444     01 16 66 F6 | 	neg	arg03, #1
18448     D0 17 B1 FD | 	call	#__system___float_cmp
1844c     01 FA 55 F2 | 	cmps	result1, #1 wc
18450     44 00 90 CD |  if_b	jmp	#LR__1945
18454                 | LR__1944
18454     0C 4E 05 F1 | 	add	fp, #12
18458     A7 2A 02 FB | 	rdlong	local03, fp
1845c     15 33 02 F6 | 	mov	local07, local03
18460     01 32 66 F0 | 	shl	local07, #1
18464     15 33 02 F1 | 	add	local07, local03
18468     03 32 66 F0 | 	shl	local07, #3
1846c     14 00 00 FF 
18470     38 E5 05 F1 | 	add	objptr, ##10552
18474     F2 32 02 F1 | 	add	local07, objptr
18478     14 32 06 F1 | 	add	local07, #20
1847c     19 2D E2 FA | 	rdword	local04, local07
18480     20 4E 05 F1 | 	add	fp, #32
18484     A7 2C 62 FC | 	wrlong	local04, fp
18488     2C 4E 85 F1 | 	sub	fp, #44
1848c     14 00 00 FF 
18490     38 E5 85 F1 | 	sub	objptr, ##10552
18494     54 00 90 FD | 	jmp	#LR__1946
18498                 | LR__1945
18498     58 4E 05 F1 | 	add	fp, #88
1849c     A7 12 02 FB | 	rdlong	arg01, fp
184a0     58 4E 85 F1 | 	sub	fp, #88
184a4     01 14 06 F6 | 	mov	arg02, #1
184a8     04 18 B1 FD | 	call	#__system___float_tointeger
184ac     2C 4E 05 F1 | 	add	fp, #44
184b0     A7 FA 61 FC | 	wrlong	result1, fp
184b4     20 4E 85 F1 | 	sub	fp, #32
184b8     A7 28 02 FB | 	rdlong	local02, fp
184bc     14 2B 02 F6 | 	mov	local03, local02
184c0     01 2A 66 F0 | 	shl	local03, #1
184c4     14 2B 02 F1 | 	add	local03, local02
184c8     03 2A 66 F0 | 	shl	local03, #3
184cc     14 00 00 FF 
184d0     38 E5 05 F1 | 	add	objptr, ##10552
184d4     F2 2A 02 F1 | 	add	local03, objptr
184d8     0C 4E 85 F1 | 	sub	fp, #12
184dc     14 2A 06 F1 | 	add	local03, #20
184e0     15 FB 51 FC | 	wrword	result1, local03
184e4     14 00 00 FF 
184e8     38 E5 85 F1 | 	sub	objptr, ##10552
184ec                 | LR__1946
184ec     6C 4E 05 F1 | 	add	fp, #108
184f0     A7 14 02 FB | 	rdlong	arg02, fp
184f4     6C 4E 85 F1 | 	sub	fp, #108
184f8     FC 16 20 FF 
184fc     54 12 06 F6 | 	mov	arg01, ##1076754516
18500     B4 22 B1 FD | 	call	#__system____builtin_logbase
18504     FD 2C 02 F6 | 	mov	local04, result1
18508     1E 14 C6 F9 | 	decod	arg02, #30
1850c     FC 16 20 FF 
18510     54 12 06 F6 | 	mov	arg01, ##1076754516
18514     A0 22 B1 FD | 	call	#__system____builtin_logbase
18518     FD 14 02 F6 | 	mov	arg02, result1
1851c     16 13 02 F6 | 	mov	arg01, local04
18520     C8 14 B1 FD | 	call	#__system___float_div
18524     FD 12 02 F6 | 	mov	arg01, result1
18528     00 14 06 F6 | 	mov	arg02, #0
1852c     80 17 B1 FD | 	call	#__system___float_tointeger
18530     30 4E 05 F1 | 	add	fp, #48
18534     A7 FA 61 FC | 	wrlong	result1, fp
18538     1E 2C C6 F9 | 	decod	local04, #30
1853c     FD 12 02 F6 | 	mov	arg01, result1
18540     30 4E 85 F1 | 	sub	fp, #48
18544     05 12 06 F1 | 	add	arg01, #5
18548     09 13 52 F6 | 	abs	arg01, arg01 wc
1854c     1F 34 C6 C9 |  if_b	decod	local08, #31
18550     00 34 06 36 |  if_ae	mov	local08, #0
18554     8C 0E B1 FD | 	call	#__system___float_fromuns
18558     1A FB 61 F5 | 	xor	result1, local08
1855c     FD 14 02 F6 | 	mov	arg02, result1
18560     16 13 02 F6 | 	mov	arg01, local04
18564     88 21 B1 FD | 	call	#__system____builtin_powf
18568     FD 12 02 F6 | 	mov	arg01, result1
1856c     01 14 06 F6 | 	mov	arg02, #1
18570     3C 17 B1 FD | 	call	#__system___float_tointeger
18574     10 4E 05 F1 | 	add	fp, #16
18578     A7 FA 61 FC | 	wrlong	result1, fp
1857c                 | ' skip=round(2^(lfreq+5))
1857c                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
1857c     10 4E 85 F1 | 	sub	fp, #16
18580     40 00 00 FF 
18584     01 FA 55 F2 | 	cmps	result1, ##32769 wc
18588     30 00 90 CD |  if_b	jmp	#LR__1947
1858c     10 4E 05 F1 | 	add	fp, #16
18590     A7 26 02 FB | 	rdlong	local01, fp
18594     13 2D 52 F6 | 	abs	local04, local01 wc
18598     0F 2C 46 F0 | 	shr	local04, #15
1859c     16 2D 82 F6 | 	negc	local04, local04
185a0     0C 4E 85 F1 | 	sub	fp, #12
185a4     A7 2C 62 FC | 	wrlong	local04, fp
185a8     0C 4E 05 F1 | 	add	fp, #12
185ac     40 00 80 FF 
185b0     A7 00 68 FC | 	wrlong	##32768, fp
185b4     10 4E 85 F1 | 	sub	fp, #16
185b8     0C 00 90 FD | 	jmp	#LR__1948
185bc                 | LR__1947
185bc     04 4E 05 F1 | 	add	fp, #4
185c0     A7 02 68 FC | 	wrlong	#1, fp
185c4     04 4E 85 F1 | 	sub	fp, #4
185c8                 | LR__1948
185c8     6C 4E 05 F1 | 	add	fp, #108
185cc     A7 14 02 FB | 	rdlong	arg02, fp
185d0     6C 4E 85 F1 | 	sub	fp, #108
185d4     3E 2C 25 FF 
185d8     3C 12 06 F6 | 	mov	arg01, ##1247312956
185dc     0C 14 B1 FD | 	call	#__system___float_div
185e0     FD 2C 02 F6 | 	mov	local04, result1
185e4     04 4E 05 F1 | 	add	fp, #4
185e8     A7 12 02 FB | 	rdlong	arg01, fp
185ec     04 4E 85 F1 | 	sub	fp, #4
185f0     09 13 52 F6 | 	abs	arg01, arg01 wc
185f4     1F 34 C6 C9 |  if_b	decod	local08, #31
185f8     00 34 06 36 |  if_ae	mov	local08, #0
185fc     E4 0D B1 FD | 	call	#__system___float_fromuns
18600     1A FB 61 F5 | 	xor	result1, local08
18604     FD 26 02 F6 | 	mov	local01, result1
18608     1E 28 C6 F9 | 	decod	local02, #30
1860c     0D 12 06 F6 | 	mov	arg01, #13
18610     30 4E 05 F1 | 	add	fp, #48
18614     A7 30 02 FB | 	rdlong	local06, fp
18618     30 4E 85 F1 | 	sub	fp, #48
1861c     18 13 82 F1 | 	sub	arg01, local06
18620     09 13 52 F6 | 	abs	arg01, arg01 wc
18624     1F 34 C6 C9 |  if_b	decod	local08, #31
18628     00 34 06 36 |  if_ae	mov	local08, #0
1862c     B4 0D B1 FD | 	call	#__system___float_fromuns
18630     1A FB 61 F5 | 	xor	result1, local08
18634     FD 14 02 F6 | 	mov	arg02, result1
18638     14 13 02 F6 | 	mov	arg01, local02
1863c     B0 20 B1 FD | 	call	#__system____builtin_powf
18640     FD 14 02 F6 | 	mov	arg02, result1
18644     13 13 02 F6 | 	mov	arg01, local01
18648     9C 11 B1 FD | 	call	#__system___float_mul
1864c     FD 14 02 F6 | 	mov	arg02, result1
18650     16 13 02 F6 | 	mov	arg01, local04
18654     94 13 B1 FD | 	call	#__system___float_div
18658     FD 12 02 F6 | 	mov	arg01, result1
1865c     01 14 06 F6 | 	mov	arg02, #1
18660     4C 16 B1 FD | 	call	#__system___float_tointeger
18664     34 4E 05 F1 | 	add	fp, #52
18668     A7 FA 61 FC | 	wrlong	result1, fp
1866c     34 4E 05 F1 | 	add	fp, #52
18670     A7 12 02 FB | 	rdlong	arg01, fp
18674     10 4E 05 F1 | 	add	fp, #16
18678     A7 14 02 FB | 	rdlong	arg02, fp
1867c     78 4E 85 F1 | 	sub	fp, #120
18680     68 13 B1 FD | 	call	#__system___float_div
18684     FD 12 02 F6 | 	mov	arg01, result1
18688     01 14 06 F6 | 	mov	arg02, #1
1868c     20 16 B1 FD | 	call	#__system___float_tointeger
18690     FD 2C 02 F6 | 	mov	local04, result1
18694     14 4E 05 F1 | 	add	fp, #20
18698     A7 2C 62 FC | 	wrlong	local04, fp
1869c     5C 4E 05 F1 | 	add	fp, #92
186a0     A7 14 02 FB | 	rdlong	arg02, fp
186a4     70 4E 85 F1 | 	sub	fp, #112
186a8     00 00 23 FF 
186ac     00 12 06 F6 | 	mov	arg01, ##1174405120
186b0     34 11 B1 FD | 	call	#__system___float_mul
186b4     FD 12 02 F6 | 	mov	arg01, result1
186b8     01 14 06 F6 | 	mov	arg02, #1
186bc     F0 15 B1 FD | 	call	#__system___float_tointeger
186c0     0D 2C C6 F9 | 	decod	local04, #13
186c4     FD 2C 02 F1 | 	add	local04, result1
186c8     18 4E 05 F1 | 	add	fp, #24
186cc     A7 2C 62 FC | 	wrlong	local04, fp
186d0     5C 4E 05 F1 | 	add	fp, #92
186d4     A7 14 02 FB | 	rdlong	arg02, fp
186d8     74 4E 85 F1 | 	sub	fp, #116
186dc     00 3D 22 FF 
186e0     00 12 06 F6 | 	mov	arg01, ##1148846080
186e4     00 11 B1 FD | 	call	#__system___float_mul
186e8     FD 12 02 F6 | 	mov	arg01, result1
186ec     01 14 06 F6 | 	mov	arg02, #1
186f0     BC 15 B1 FD | 	call	#__system___float_tointeger
186f4     1C 4E 05 F1 | 	add	fp, #28
186f8     A7 FA 61 FC | 	wrlong	result1, fp
186fc     37 00 00 FF 
18700     10 E4 05 F1 | 	add	objptr, ##28176
18704     F2 2C 02 FB | 	rdlong	local04, objptr
18708     37 00 00 FF 
1870c     10 E4 85 F1 | 	sub	objptr, ##28176
18710     10 4E 85 F1 | 	sub	fp, #16
18714     A7 28 02 FB | 	rdlong	local02, fp
18718     06 28 66 F0 | 	shl	local02, #6
1871c     14 2D 02 F1 | 	add	local04, local02
18720     04 4E 85 F1 | 	sub	fp, #4
18724     A7 2C 62 FC | 	wrlong	local04, fp
18728                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
18728                 | ' speed=round(speed_coeff/slen)
18728                 | ' ipan=8192+round(8192*pan)
18728                 | ' ivol=round(1000.0*vol)
18728                 | ' base2=base+64*channel
18728                 | ' if wave <32 then 
18728     18 4E 05 F1 | 	add	fp, #24
1872c     A7 2C 02 FB | 	rdlong	local04, fp
18730     20 4E 85 F1 | 	sub	fp, #32
18734     20 2C 56 F2 | 	cmps	local04, #32 wc
18738     2C 00 90 3D |  if_ae	jmp	#LR__1949
1873c     08 4E 05 F1 | 	add	fp, #8
18740     A7 12 02 FB | 	rdlong	arg01, fp
18744     08 12 06 F1 | 	add	arg01, #8
18748     18 4E 05 F1 | 	add	fp, #24
1874c     A7 14 02 FB | 	rdlong	arg02, fp
18750     20 4E 85 F1 | 	sub	fp, #32
18754     0B 14 66 F0 | 	shl	arg02, #11
18758     00 00 60 FF 
1875c     00 14 06 F1 | 	add	arg02, ##-1073741824
18760     09 15 62 FC | 	wrlong	arg02, arg01
18764     18 00 90 FD | 	jmp	#LR__1950
18768                 | LR__1949
18768     08 4E 05 F1 | 	add	fp, #8
1876c     A7 12 02 FB | 	rdlong	arg01, fp
18770     08 4E 85 F1 | 	sub	fp, #8
18774     08 12 06 F1 | 	add	arg01, #8
18778     00 00 E4 FF 
1877c     09 01 68 FC | 	wrlong	##-939524096, arg01
18780                 | LR__1950
18780     08 4E 05 F1 | 	add	fp, #8
18784     A7 12 02 FB | 	rdlong	arg01, fp
18788     10 12 06 F1 | 	add	arg01, #16
1878c     04 00 80 FF 
18790     09 01 68 FC | 	wrlong	##2048, arg01
18794     A7 12 02 FB | 	rdlong	arg01, fp
18798     0C 12 06 F1 | 	add	arg01, #12
1879c     09 01 68 FC | 	wrlong	#0, arg01
187a0     A7 12 02 FB | 	rdlong	arg01, fp
187a4     14 12 06 F1 | 	add	arg01, #20
187a8     14 4E 05 F1 | 	add	fp, #20
187ac     A7 14 02 FB | 	rdlong	arg02, fp
187b0     09 15 52 FC | 	wrword	arg02, arg01
187b4     14 4E 85 F1 | 	sub	fp, #20
187b8     A7 12 02 FB | 	rdlong	arg01, fp
187bc     16 12 06 F1 | 	add	arg01, #22
187c0     10 4E 05 F1 | 	add	fp, #16
187c4     A7 14 02 FB | 	rdlong	arg02, fp
187c8     09 15 52 FC | 	wrword	arg02, arg01
187cc                 | ' lpoke base2+16,2048
187cc                 | ' lpoke base2+12,0
187cc                 | ' dpoke base2+20,ivol 
187cc                 | ' dpoke base2+22,ipan 
187cc                 | ' if wave<32 then
187cc     08 4E 05 F1 | 	add	fp, #8
187d0     A7 2C 02 FB | 	rdlong	local04, fp
187d4     20 4E 85 F1 | 	sub	fp, #32
187d8     20 2C 56 F2 | 	cmps	local04, #32 wc
187dc     38 00 90 3D |  if_ae	jmp	#LR__1951
187e0     08 4E 05 F1 | 	add	fp, #8
187e4     A7 12 02 FB | 	rdlong	arg01, fp
187e8     18 12 06 F1 | 	add	arg01, #24
187ec     2C 4E 05 F1 | 	add	fp, #44
187f0     A7 14 02 FB | 	rdlong	arg02, fp
187f4     09 15 52 FC | 	wrword	arg02, arg01
187f8     2C 4E 85 F1 | 	sub	fp, #44
187fc     A7 12 02 FB | 	rdlong	arg01, fp
18800     1A 12 06 F1 | 	add	arg01, #26
18804     08 4E 05 F1 | 	add	fp, #8
18808     A7 14 02 FB | 	rdlong	arg02, fp
1880c     10 4E 85 F1 | 	sub	fp, #16
18810     09 15 52 FC | 	wrword	arg02, arg01
18814     48 00 90 FD | 	jmp	#LR__1952
18818                 | LR__1951
18818     08 4E 05 F1 | 	add	fp, #8
1881c     A7 2C 02 FB | 	rdlong	local04, fp
18820     18 2C 06 F1 | 	add	local04, #24
18824     64 4E 05 F1 | 	add	fp, #100
18828     A7 14 02 FB | 	rdlong	arg02, fp
1882c     6C 4E 85 F1 | 	sub	fp, #108
18830     3E 2C 25 FF 
18834     3C 12 06 F6 | 	mov	arg01, ##1247312956
18838     B0 11 B1 FD | 	call	#__system___float_div
1883c     FD 12 02 F6 | 	mov	arg01, result1
18840     01 14 06 F6 | 	mov	arg02, #1
18844     68 14 B1 FD | 	call	#__system___float_tointeger
18848     16 FB 51 FC | 	wrword	result1, local04
1884c     08 4E 05 F1 | 	add	fp, #8
18850     A7 12 02 FB | 	rdlong	arg01, fp
18854     08 4E 85 F1 | 	sub	fp, #8
18858     1A 12 06 F1 | 	add	arg01, #26
1885c     09 01 5A FC | 	wrword	#256, arg01
18860                 | LR__1952
18860     08 4E 05 F1 | 	add	fp, #8
18864     A7 12 02 FB | 	rdlong	arg01, fp
18868     1C 12 06 F1 | 	add	arg01, #28
1886c     09 01 68 FC | 	wrlong	#0, arg01
18870     A7 12 02 FB | 	rdlong	arg01, fp
18874     20 12 06 F1 | 	add	arg01, #32
18878     09 01 68 FC | 	wrlong	#0, arg01
1887c                 | ' lpoke base2+28,$0000_0000
1887c                 | ' lpoke base2+32,0 
1887c                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
1887c     1C 4E 05 F1 | 	add	fp, #28
18880     A7 2C 02 FB | 	rdlong	local04, fp
18884     24 4E 85 F1 | 	sub	fp, #36
18888     08 2C 0E F2 | 	cmp	local04, #8 wz
1888c     18 00 90 5D |  if_ne	jmp	#LR__1953
18890     08 4E 05 F1 | 	add	fp, #8
18894     A7 12 02 FB | 	rdlong	arg01, fp
18898     08 4E 85 F1 | 	sub	fp, #8
1889c     24 12 06 F1 | 	add	arg01, #36
188a0     09 01 68 FC | 	wrlong	#0, arg01
188a4     34 00 90 FD | 	jmp	#LR__1954
188a8                 | LR__1953
188a8     08 4E 05 F1 | 	add	fp, #8
188ac     A7 12 02 FB | 	rdlong	arg01, fp
188b0     24 12 06 F1 | 	add	arg01, #36
188b4     1C 4E 05 F1 | 	add	fp, #28
188b8     A7 14 02 FB | 	rdlong	arg02, fp
188bc     24 4E 85 F1 | 	sub	fp, #36
188c0     09 14 66 F0 | 	shl	arg02, #9
188c4     0C 00 00 FF 
188c8     D8 E4 05 F1 | 	add	objptr, ##6360
188cc     F2 14 02 F1 | 	add	arg02, objptr
188d0     0C 00 00 FF 
188d4     D8 E4 85 F1 | 	sub	objptr, ##6360
188d8     09 15 62 FC | 	wrlong	arg02, arg01
188dc                 | LR__1954
188dc     08 4E 05 F1 | 	add	fp, #8
188e0     A7 12 02 FB | 	rdlong	arg01, fp
188e4     28 12 06 F1 | 	add	arg01, #40
188e8     0C 4E 05 F1 | 	add	fp, #12
188ec     A7 14 02 FB | 	rdlong	arg02, fp
188f0     09 15 62 FC | 	wrlong	arg02, arg01
188f4     0C 4E 85 F1 | 	sub	fp, #12
188f8     A7 12 02 FB | 	rdlong	arg01, fp
188fc     2C 12 06 F1 | 	add	arg01, #44
18900     24 4E 05 F1 | 	add	fp, #36
18904     A7 14 02 FB | 	rdlong	arg02, fp
18908     09 15 62 FC | 	wrlong	arg02, arg01
1890c                 | ' lpoke base2+40,speed 
1890c                 | ' lpoke base2+44,sus 
1890c                 | ' if delay>0 then waitms(delay) 
1890c     04 4E 85 F1 | 	sub	fp, #4
18910     A7 2C 02 FB | 	rdlong	local04, fp
18914     28 4E 85 F1 | 	sub	fp, #40
18918     01 2C 56 F2 | 	cmps	local04, #1 wc
1891c     28 4E 05 31 |  if_ae	add	fp, #40
18920     A7 12 02 3B |  if_ae	rdlong	arg01, fp
18924     28 4E 85 31 |  if_ae	sub	fp, #40
18928     34 E3 B0 3D |  if_ae	call	#__system___waitms
1892c     A7 F0 03 F6 | 	mov	ptra, fp
18930     B2 00 A0 FD | 	call	#popregs_
18934                 | _do_play_ret
18934     2D 00 64 FD | 	ret
18938                 | 
18938                 | ' 
18938                 | ' '-------------------- plot
18938                 | ' 
18938                 | ' sub do_plot
18938                 | _do_plot
18938     00 4A 05 F6 | 	mov	COUNT_, #0
1893c     A8 00 A0 FD | 	call	#pushregs_
18940     20 F0 07 F1 | 	add	ptra, #32
18944     94 4C BF FD | 	call	#_pop
18948     FD 16 02 F6 | 	mov	arg03, result1
1894c     FE 14 02 F6 | 	mov	arg02, result2
18950     FF 12 02 F6 | 	mov	arg01, result3
18954     0C 4E 05 F1 | 	add	fp, #12
18958     A7 16 62 FC | 	wrlong	arg03, fp
1895c     04 4E 05 F1 | 	add	fp, #4
18960     A7 14 62 FC | 	wrlong	arg02, fp
18964     04 4E 05 F1 | 	add	fp, #4
18968     A7 12 62 FC | 	wrlong	arg01, fp
1896c     14 4E 85 F1 | 	sub	fp, #20
18970     68 4C BF FD | 	call	#_pop
18974     FF 16 02 F6 | 	mov	arg03, result3
18978     A7 FA 61 FC | 	wrlong	result1, fp
1897c     04 4E 05 F1 | 	add	fp, #4
18980     A7 FC 61 FC | 	wrlong	result2, fp
18984     04 4E 05 F1 | 	add	fp, #4
18988     A7 16 62 FC | 	wrlong	arg03, fp
1898c     08 4E 85 F1 | 	sub	fp, #8
18990     A7 12 02 F6 | 	mov	arg01, fp
18994     28 4E BF FD | 	call	#_converttoint
18998     18 4E 05 F1 | 	add	fp, #24
1899c     A7 FA 61 FC | 	wrlong	result1, fp
189a0     0C 4E 85 F1 | 	sub	fp, #12
189a4     A7 12 02 F6 | 	mov	arg01, fp
189a8     0C 4E 85 F1 | 	sub	fp, #12
189ac     10 4E BF FD | 	call	#_converttoint
189b0     1C 4E 05 F1 | 	add	fp, #28
189b4     A7 FA 61 FC | 	wrlong	result1, fp
189b8     04 4E 85 F1 | 	sub	fp, #4
189bc     A7 16 02 FB | 	rdlong	arg03, fp
189c0     37 00 00 FF 
189c4     2C E4 05 F1 | 	add	objptr, ##28204
189c8     F2 16 62 FC | 	wrlong	arg03, objptr
189cc     04 4E 05 F1 | 	add	fp, #4
189d0     A7 14 02 FB | 	rdlong	arg02, fp
189d4     1C 4E 85 F1 | 	sub	fp, #28
189d8     04 E4 05 F1 | 	add	objptr, #4
189dc     F2 14 62 FC | 	wrlong	arg02, objptr
189e0     04 E4 85 F1 | 	sub	objptr, #4
189e4     F2 12 02 FB | 	rdlong	arg01, objptr
189e8     04 E4 85 F1 | 	sub	objptr, #4
189ec     F2 16 02 FB | 	rdlong	arg03, objptr
189f0     37 00 00 FF 
189f4     28 E4 85 F1 | 	sub	objptr, ##28200
189f8     18 B6 B0 FD | 	call	#_hg010b_spin2_putpixel
189fc     A7 F0 03 F6 | 	mov	ptra, fp
18a00     B2 00 A0 FD | 	call	#popregs_
18a04                 | _do_plot_ret
18a04     2D 00 64 FD | 	ret
18a08                 | 
18a08                 | ' 
18a08                 | ' '-------------------- poke
18a08                 | ' 
18a08                 | ' sub do_poke
18a08                 | _do_poke
18a08     01 4A 05 F6 | 	mov	COUNT_, #1
18a0c     A8 00 A0 FD | 	call	#pushregs_
18a10     20 F0 07 F1 | 	add	ptra, #32
18a14     C4 4B BF FD | 	call	#_pop
18a18     FD 14 02 F6 | 	mov	arg02, result1
18a1c     FE 12 02 F6 | 	mov	arg01, result2
18a20     FF 26 02 F6 | 	mov	local01, result3
18a24     A7 14 62 FC | 	wrlong	arg02, fp
18a28     04 4E 05 F1 | 	add	fp, #4
18a2c     A7 12 62 FC | 	wrlong	arg01, fp
18a30     04 4E 05 F1 | 	add	fp, #4
18a34     A7 26 62 FC | 	wrlong	local01, fp
18a38     08 4E 85 F1 | 	sub	fp, #8
18a3c     9C 4B BF FD | 	call	#_pop
18a40     FF 26 02 F6 | 	mov	local01, result3
18a44     0C 4E 05 F1 | 	add	fp, #12
18a48     A7 FA 61 FC | 	wrlong	result1, fp
18a4c     04 4E 05 F1 | 	add	fp, #4
18a50     A7 FC 61 FC | 	wrlong	result2, fp
18a54     04 4E 05 F1 | 	add	fp, #4
18a58     A7 26 62 FC | 	wrlong	local01, fp
18a5c     08 4E 85 F1 | 	sub	fp, #8
18a60     A7 12 02 F6 | 	mov	arg01, fp
18a64     0C 4E 85 F1 | 	sub	fp, #12
18a68     54 4D BF FD | 	call	#_converttoint
18a6c     18 4E 05 F1 | 	add	fp, #24
18a70     A7 FA 61 FC | 	wrlong	result1, fp
18a74     18 4E 85 F1 | 	sub	fp, #24
18a78     A7 12 02 F6 | 	mov	arg01, fp
18a7c     40 4D BF FD | 	call	#_converttoint
18a80     1C 4E 05 F1 | 	add	fp, #28
18a84     A7 FA 61 FC | 	wrlong	result1, fp
18a88                 | ' t1=pop() 'value
18a88                 | ' t2=pop() 
18a88                 | ' a=converttoint(t2) : v=converttoint(t1)
18a88                 | ' if a<$80000 then poke a,v else pspoke a,v
18a88     04 4E 85 F1 | 	sub	fp, #4
18a8c     A7 26 02 FB | 	rdlong	local01, fp
18a90     18 4E 85 F1 | 	sub	fp, #24
18a94     00 04 00 FF 
18a98     00 26 16 F2 | 	cmp	local01, ##524288 wc
18a9c     1C 00 90 3D |  if_ae	jmp	#LR__1960
18aa0     18 4E 05 F1 | 	add	fp, #24
18aa4     A7 12 02 FB | 	rdlong	arg01, fp
18aa8     04 4E 05 F1 | 	add	fp, #4
18aac     A7 14 02 FB | 	rdlong	arg02, fp
18ab0     1C 4E 85 F1 | 	sub	fp, #28
18ab4     09 15 42 FC | 	wrbyte	arg02, arg01
18ab8     18 00 90 FD | 	jmp	#LR__1961
18abc                 | LR__1960
18abc     18 4E 05 F1 | 	add	fp, #24
18ac0     A7 12 02 FB | 	rdlong	arg01, fp
18ac4     04 4E 05 F1 | 	add	fp, #4
18ac8     A7 14 02 FB | 	rdlong	arg02, fp
18acc     1C 4E 85 F1 | 	sub	fp, #28
18ad0     D8 A6 B0 FD | 	call	#_pspoke
18ad4                 | LR__1961
18ad4     A7 F0 03 F6 | 	mov	ptra, fp
18ad8     B2 00 A0 FD | 	call	#popregs_
18adc                 | _do_poke_ret
18adc     2D 00 64 FD | 	ret
18ae0                 | 
18ae0                 | ' 
18ae0                 | ' '-------------------- pop
18ae0                 | ' 
18ae0                 | ' sub do_pop()
18ae0                 | _do_pop
18ae0                 | ' if gosubtop>0 then  gosubtop -=1 
18ae0     50 00 00 FF 
18ae4     34 E5 05 F1 | 	add	objptr, ##41268
18ae8     F2 00 02 FB | 	rdlong	_var01, objptr
18aec     50 00 00 FF 
18af0     34 E5 85 F1 | 	sub	objptr, ##41268
18af4     01 00 56 F2 | 	cmps	_var01, #1 wc
18af8     50 00 00 3F 
18afc     34 E5 05 31 |  if_ae	add	objptr, ##41268
18b00     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
18b04     01 00 86 31 |  if_ae	sub	_var01, #1
18b08     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
18b0c     50 00 00 3F 
18b10     34 E5 85 31 |  if_ae	sub	objptr, ##41268
18b14                 | _do_pop_ret
18b14     2D 00 64 FD | 	ret
18b18                 | 
18b18                 | ' 
18b18                 | ' '-------------------- position
18b18                 | ' 
18b18                 | ' sub do_position
18b18                 | _do_position
18b18     01 4A 05 F6 | 	mov	COUNT_, #1
18b1c     A8 00 A0 FD | 	call	#pushregs_
18b20     18 F0 07 F1 | 	add	ptra, #24
18b24     B4 4A BF FD | 	call	#_pop
18b28     FD 14 02 F6 | 	mov	arg02, result1
18b2c     FE 12 02 F6 | 	mov	arg01, result2
18b30     FF 26 02 F6 | 	mov	local01, result3
18b34     A7 14 62 FC | 	wrlong	arg02, fp
18b38     04 4E 05 F1 | 	add	fp, #4
18b3c     A7 12 62 FC | 	wrlong	arg01, fp
18b40     04 4E 05 F1 | 	add	fp, #4
18b44     A7 26 62 FC | 	wrlong	local01, fp
18b48     08 4E 85 F1 | 	sub	fp, #8
18b4c     8C 4A BF FD | 	call	#_pop
18b50     FF 26 02 F6 | 	mov	local01, result3
18b54     0C 4E 05 F1 | 	add	fp, #12
18b58     A7 FA 61 FC | 	wrlong	result1, fp
18b5c     04 4E 05 F1 | 	add	fp, #4
18b60     A7 FC 61 FC | 	wrlong	result2, fp
18b64     04 4E 05 F1 | 	add	fp, #4
18b68     A7 26 62 FC | 	wrlong	local01, fp
18b6c     08 4E 85 F1 | 	sub	fp, #8
18b70     A7 12 02 F6 | 	mov	arg01, fp
18b74     0C 4E 85 F1 | 	sub	fp, #12
18b78     44 4C BF FD | 	call	#_converttoint
18b7c     FD 26 02 F6 | 	mov	local01, result1
18b80     A7 12 02 F6 | 	mov	arg01, fp
18b84     38 4C BF FD | 	call	#_converttoint
18b88     FD 14 02 F6 | 	mov	arg02, result1
18b8c     13 13 02 F6 | 	mov	arg01, local01
18b90     44 C0 B0 FD | 	call	#_hg010b_spin2_setcursorpos
18b94     A7 F0 03 F6 | 	mov	ptra, fp
18b98     B2 00 A0 FD | 	call	#popregs_
18b9c                 | _do_position_ret
18b9c     2D 00 64 FD | 	ret
18ba0                 | 
18ba0                 | ' 
18ba0                 | ' '-------------------- print
18ba0                 | ' 
18ba0                 | ' sub do_print  
18ba0                 | _do_print
18ba0     0B 4A 05 F6 | 	mov	COUNT_, #11
18ba4     A8 00 A0 FD | 	call	#pushregs_
18ba8     00 2C 06 F6 | 	mov	local04, #0
18bac     2C 4A BF FD | 	call	#_pop
18bb0     FD 2E 02 F6 | 	mov	local05, result1
18bb4     FE 30 02 F6 | 	mov	local06, result2
18bb8     FF 32 02 F6 | 	mov	local07, result3
18bbc     17 27 02 F6 | 	mov	local01, local05
18bc0     18 29 02 F6 | 	mov	local02, local06
18bc4     19 2B 02 F6 | 	mov	local03, local07
18bc8                 | '  
18bc8                 | ' r=0
18bc8                 | ' t1=pop() 
18bc8                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
18bc8     21 2A 0E F2 | 	cmp	local03, #33 wz
18bcc     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
18bd0     20 00 90 5D |  if_ne	jmp	#LR__1970
18bd4     15 2D 02 F6 | 	mov	local04, local03
18bd8     00 4A BF FD | 	call	#_pop
18bdc     FD 2E 02 F6 | 	mov	local05, result1
18be0     FE 30 02 F6 | 	mov	local06, result2
18be4     FF 32 02 F6 | 	mov	local07, result3
18be8     17 27 02 F6 | 	mov	local01, local05
18bec     18 29 02 F6 | 	mov	local02, local06
18bf0     19 2B 02 F6 | 	mov	local03, local07
18bf4                 | LR__1970
18bf4                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
18bf4     20 2A 0E F2 | 	cmp	local03, #32 wz
18bf8     15 2D 02 A6 |  if_e	mov	local04, local03
18bfc                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
18bfc     FF 2A 0E F2 | 	cmp	local03, #255 wz
18c00     10 00 90 5D |  if_ne	jmp	#LR__1971
18c04     13 13 02 F6 | 	mov	arg01, local01
18c08     00 14 06 F6 | 	mov	arg02, #0
18c0c     6C A3 B0 FD | 	call	#_printerror
18c10     D4 04 90 FD | 	jmp	#LR__1990
18c14                 | LR__1971
18c14                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
18c14     2B 2A 0E F2 | 	cmp	local03, #43 wz
18c18     14 00 90 5D |  if_ne	jmp	#LR__1972
18c1c     13 13 02 F6 | 	mov	arg01, local01
18c20     30 4B BF FD | 	call	#_convertstring
18c24     FD 2E 02 F6 | 	mov	local05, result1
18c28     17 27 02 F6 | 	mov	local01, local05
18c2c     1F 2A 06 F6 | 	mov	local03, #31
18c30                 | LR__1972
18c30                 | ' 
18c30                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
18c30     2C 2A 0E F2 | 	cmp	local03, #44 wz
18c34     80 00 90 5D |  if_ne	jmp	#LR__1973
18c38     00 12 06 F6 | 	mov	arg01, #0
18c3c     D0 39 B1 FD | 	call	#__system___getiolock_0606
18c40     FD 12 02 F6 | 	mov	arg01, result1
18c44     24 DD B0 FD | 	call	#__system___lockmem
18c48     B7 01 00 FF 
18c4c     B2 15 06 F6 | 	mov	arg02, ##@LR__5946
18c50     00 12 06 F6 | 	mov	arg01, #0
18c54     00 16 06 F6 | 	mov	arg03, #0
18c58     08 EA B0 FD | 	call	#__system___basic_print_string
18c5c     0A 34 06 F6 | 	mov	local08, #10
18c60     00 12 06 F6 | 	mov	arg01, #0
18c64     13 15 02 F6 | 	mov	arg02, local01
18c68     00 16 06 F6 | 	mov	arg03, #0
18c6c     0A 18 06 F6 | 	mov	arg04, #10
18c70     34 EA B0 FD | 	call	#__system___basic_print_integer
18c74     FD 36 02 F6 | 	mov	local09, result1
18c78     00 12 06 F6 | 	mov	arg01, #0
18c7c     0A 14 06 F6 | 	mov	arg02, #10
18c80     00 16 06 F6 | 	mov	arg03, #0
18c84     84 E9 B0 FD | 	call	#__system___basic_print_char
18c88     01 38 06 F6 | 	mov	local10, #1
18c8c     00 12 06 F6 | 	mov	arg01, #0
18c90     7C 39 B1 FD | 	call	#__system___getiolock_0606
18c94     FD 00 68 FC | 	wrlong	#0, result1
18c98     00 3A 06 F6 | 	mov	local11, #0
18c9c     3C 49 BF FD | 	call	#_pop
18ca0     FD 2E 02 F6 | 	mov	local05, result1
18ca4     FE 30 02 F6 | 	mov	local06, result2
18ca8     FF 32 02 F6 | 	mov	local07, result3
18cac     17 27 02 F6 | 	mov	local01, local05
18cb0     18 29 02 F6 | 	mov	local02, local06
18cb4     19 2B 02 F6 | 	mov	local03, local07
18cb8                 | LR__1973
18cb8                 | ' 
18cb8                 | ' if r=print_mod_comma  then
18cb8     21 2C 0E F2 | 	cmp	local04, #33 wz
18cbc     AC 01 90 5D |  if_ne	jmp	#LR__1978
18cc0                 | '   if t1.result_type=result_int then print t1.result.iresult,
18cc0     1C 2A 0E F2 | 	cmp	local03, #28 wz
18cc4     64 00 90 5D |  if_ne	jmp	#LR__1974
18cc8     00 12 06 F6 | 	mov	arg01, #0
18ccc     40 39 B1 FD | 	call	#__system___getiolock_0606
18cd0     FD 12 02 F6 | 	mov	arg01, result1
18cd4     94 DC B0 FD | 	call	#__system___lockmem
18cd8     00 30 06 F6 | 	mov	local06, #0
18cdc     00 12 06 F6 | 	mov	arg01, #0
18ce0     13 15 02 F6 | 	mov	arg02, local01
18ce4     00 16 06 F6 | 	mov	arg03, #0
18ce8     0A 18 06 F6 | 	mov	arg04, #10
18cec     B8 E9 B0 FD | 	call	#__system___basic_print_integer
18cf0     FD 32 02 F6 | 	mov	local07, result1
18cf4     18 2F 02 F6 | 	mov	local05, local06
18cf8     19 2F 02 F1 | 	add	local05, local07
18cfc     00 3A 06 F6 | 	mov	local11, #0
18d00     00 12 06 F6 | 	mov	arg01, #0
18d04     09 14 06 F6 | 	mov	arg02, #9
18d08     00 16 06 F6 | 	mov	arg03, #0
18d0c     FC E8 B0 FD | 	call	#__system___basic_print_char
18d10     FD 36 02 F6 | 	mov	local09, result1
18d14     FD 2E 02 F1 | 	add	local05, result1
18d18     00 12 06 F6 | 	mov	arg01, #0
18d1c     F0 38 B1 FD | 	call	#__system___getiolock_0606
18d20     FD 00 68 FC | 	wrlong	#0, result1
18d24     00 FA 05 F6 | 	mov	result1, #0
18d28     00 38 06 F6 | 	mov	local10, #0
18d2c                 | LR__1974
18d2c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
18d2c     1D 2A 0E F2 | 	cmp	local03, #29 wz
18d30     64 00 90 5D |  if_ne	jmp	#LR__1975
18d34     00 12 06 F6 | 	mov	arg01, #0
18d38     D4 38 B1 FD | 	call	#__system___getiolock_0606
18d3c     FD 12 02 F6 | 	mov	arg01, result1
18d40     28 DC B0 FD | 	call	#__system___lockmem
18d44     00 30 06 F6 | 	mov	local06, #0
18d48     00 12 06 F6 | 	mov	arg01, #0
18d4c     13 15 02 F6 | 	mov	arg02, local01
18d50     00 16 06 F6 | 	mov	arg03, #0
18d54     0A 18 06 F6 | 	mov	arg04, #10
18d58     8C E9 B0 FD | 	call	#__system___basic_print_unsigned
18d5c     FD 32 02 F6 | 	mov	local07, result1
18d60     18 2F 02 F6 | 	mov	local05, local06
18d64     19 2F 02 F1 | 	add	local05, local07
18d68     00 3A 06 F6 | 	mov	local11, #0
18d6c     00 12 06 F6 | 	mov	arg01, #0
18d70     09 14 06 F6 | 	mov	arg02, #9
18d74     00 16 06 F6 | 	mov	arg03, #0
18d78     90 E8 B0 FD | 	call	#__system___basic_print_char
18d7c     FD 36 02 F6 | 	mov	local09, result1
18d80     FD 2E 02 F1 | 	add	local05, result1
18d84     00 12 06 F6 | 	mov	arg01, #0
18d88     84 38 B1 FD | 	call	#__system___getiolock_0606
18d8c     FD 00 68 FC | 	wrlong	#0, result1
18d90     00 FA 05 F6 | 	mov	result1, #0
18d94     00 38 06 F6 | 	mov	local10, #0
18d98                 | LR__1975
18d98                 | '   if t1.result_type=result_float then print t1.result.fresult,
18d98     1E 2A 0E F2 | 	cmp	local03, #30 wz
18d9c     64 00 90 5D |  if_ne	jmp	#LR__1976
18da0     00 12 06 F6 | 	mov	arg01, #0
18da4     68 38 B1 FD | 	call	#__system___getiolock_0606
18da8     FD 12 02 F6 | 	mov	arg01, result1
18dac     BC DB B0 FD | 	call	#__system___lockmem
18db0     00 30 06 F6 | 	mov	local06, #0
18db4     00 12 06 F6 | 	mov	arg01, #0
18db8     13 15 02 F6 | 	mov	arg02, local01
18dbc     00 16 06 F6 | 	mov	arg03, #0
18dc0     23 18 06 F6 | 	mov	arg04, #35
18dc4     38 10 B1 FD | 	call	#__system___basic_print_float
18dc8     FD 32 02 F6 | 	mov	local07, result1
18dcc     18 2F 02 F6 | 	mov	local05, local06
18dd0     19 2F 02 F1 | 	add	local05, local07
18dd4     00 3A 06 F6 | 	mov	local11, #0
18dd8     00 12 06 F6 | 	mov	arg01, #0
18ddc     09 14 06 F6 | 	mov	arg02, #9
18de0     00 16 06 F6 | 	mov	arg03, #0
18de4     24 E8 B0 FD | 	call	#__system___basic_print_char
18de8     FD 36 02 F6 | 	mov	local09, result1
18dec     FD 2E 02 F1 | 	add	local05, result1
18df0     00 12 06 F6 | 	mov	arg01, #0
18df4     18 38 B1 FD | 	call	#__system___getiolock_0606
18df8     FD 00 68 FC | 	wrlong	#0, result1
18dfc     00 FA 05 F6 | 	mov	result1, #0
18e00     00 38 06 F6 | 	mov	local10, #0
18e04                 | LR__1976
18e04                 | '   if t1.result_type=result_string then print t1.result.sresult,
18e04     1F 2A 0E F2 | 	cmp	local03, #31 wz
18e08     60 00 90 5D |  if_ne	jmp	#LR__1977
18e0c     00 12 06 F6 | 	mov	arg01, #0
18e10     FC 37 B1 FD | 	call	#__system___getiolock_0606
18e14     FD 12 02 F6 | 	mov	arg01, result1
18e18     50 DB B0 FD | 	call	#__system___lockmem
18e1c     00 30 06 F6 | 	mov	local06, #0
18e20     00 12 06 F6 | 	mov	arg01, #0
18e24     13 15 02 F6 | 	mov	arg02, local01
18e28     00 16 06 F6 | 	mov	arg03, #0
18e2c     34 E8 B0 FD | 	call	#__system___basic_print_string
18e30     FD 32 02 F6 | 	mov	local07, result1
18e34     18 2F 02 F6 | 	mov	local05, local06
18e38     19 2F 02 F1 | 	add	local05, local07
18e3c     00 3A 06 F6 | 	mov	local11, #0
18e40     00 12 06 F6 | 	mov	arg01, #0
18e44     09 14 06 F6 | 	mov	arg02, #9
18e48     00 16 06 F6 | 	mov	arg03, #0
18e4c     BC E7 B0 FD | 	call	#__system___basic_print_char
18e50     FD 36 02 F6 | 	mov	local09, result1
18e54     FD 2E 02 F1 | 	add	local05, result1
18e58     00 12 06 F6 | 	mov	arg01, #0
18e5c     B0 37 B1 FD | 	call	#__system___getiolock_0606
18e60     FD 00 68 FC | 	wrlong	#0, result1
18e64     00 FA 05 F6 | 	mov	result1, #0
18e68     00 38 06 F6 | 	mov	local10, #0
18e6c                 | LR__1977
18e6c                 | LR__1978
18e6c                 | ' if r=print_mod_semicolon then 
18e6c     22 2C 0E F2 | 	cmp	local04, #34 wz
18e70     1C 01 90 5D |  if_ne	jmp	#LR__1983
18e74                 | '   if t1.result_type=result_int then print t1.result.iresult;
18e74     1C 2A 0E F2 | 	cmp	local03, #28 wz
18e78     50 00 90 5D |  if_ne	jmp	#LR__1979
18e7c     00 12 06 F6 | 	mov	arg01, #0
18e80     8C 37 B1 FD | 	call	#__system___getiolock_0606
18e84     FD 12 02 F6 | 	mov	arg01, result1
18e88     E0 DA B0 FD | 	call	#__system___lockmem
18e8c     00 30 06 F6 | 	mov	local06, #0
18e90     00 38 06 F6 | 	mov	local10, #0
18e94     0A 3A 06 F6 | 	mov	local11, #10
18e98     00 12 06 F6 | 	mov	arg01, #0
18e9c     13 15 02 F6 | 	mov	arg02, local01
18ea0     00 16 06 F6 | 	mov	arg03, #0
18ea4     0A 18 06 F6 | 	mov	arg04, #10
18ea8     FC E7 B0 FD | 	call	#__system___basic_print_integer
18eac     FD 32 02 F6 | 	mov	local07, result1
18eb0     18 2F 02 F6 | 	mov	local05, local06
18eb4     19 2F 02 F1 | 	add	local05, local07
18eb8     00 12 06 F6 | 	mov	arg01, #0
18ebc     50 37 B1 FD | 	call	#__system___getiolock_0606
18ec0     FD 00 68 FC | 	wrlong	#0, result1
18ec4     00 FA 05 F6 | 	mov	result1, #0
18ec8     00 36 06 F6 | 	mov	local09, #0
18ecc                 | LR__1979
18ecc                 | '   if t1.result_type=result_uint then print t1.result.uresult;
18ecc     1D 2A 0E F2 | 	cmp	local03, #29 wz
18ed0     50 00 90 5D |  if_ne	jmp	#LR__1980
18ed4     00 12 06 F6 | 	mov	arg01, #0
18ed8     34 37 B1 FD | 	call	#__system___getiolock_0606
18edc     FD 12 02 F6 | 	mov	arg01, result1
18ee0     88 DA B0 FD | 	call	#__system___lockmem
18ee4     00 30 06 F6 | 	mov	local06, #0
18ee8     00 38 06 F6 | 	mov	local10, #0
18eec     0A 3A 06 F6 | 	mov	local11, #10
18ef0     00 12 06 F6 | 	mov	arg01, #0
18ef4     13 15 02 F6 | 	mov	arg02, local01
18ef8     00 16 06 F6 | 	mov	arg03, #0
18efc     0A 18 06 F6 | 	mov	arg04, #10
18f00     E4 E7 B0 FD | 	call	#__system___basic_print_unsigned
18f04     FD 32 02 F6 | 	mov	local07, result1
18f08     18 2F 02 F6 | 	mov	local05, local06
18f0c     19 2F 02 F1 | 	add	local05, local07
18f10     00 12 06 F6 | 	mov	arg01, #0
18f14     F8 36 B1 FD | 	call	#__system___getiolock_0606
18f18     FD 00 68 FC | 	wrlong	#0, result1
18f1c     00 FA 05 F6 | 	mov	result1, #0
18f20     00 36 06 F6 | 	mov	local09, #0
18f24                 | LR__1980
18f24                 | '   if t1.result_type=result_float then print t1.result.fresult;
18f24     1E 2A 0E F2 | 	cmp	local03, #30 wz
18f28     30 00 90 5D |  if_ne	jmp	#LR__1981
18f2c     00 12 06 F6 | 	mov	arg01, #0
18f30     DC 36 B1 FD | 	call	#__system___getiolock_0606
18f34     FD 12 02 F6 | 	mov	arg01, result1
18f38     30 DA B0 FD | 	call	#__system___lockmem
18f3c     00 12 06 F6 | 	mov	arg01, #0
18f40     13 15 02 F6 | 	mov	arg02, local01
18f44     00 16 06 F6 | 	mov	arg03, #0
18f48     23 18 06 F6 | 	mov	arg04, #35
18f4c     B0 0E B1 FD | 	call	#__system___basic_print_float
18f50     00 12 06 F6 | 	mov	arg01, #0
18f54     B8 36 B1 FD | 	call	#__system___getiolock_0606
18f58     FD 00 68 FC | 	wrlong	#0, result1
18f5c                 | LR__1981
18f5c                 | '   if t1.result_type=result_string then print t1.result.sresult;
18f5c     1F 2A 0E F2 | 	cmp	local03, #31 wz
18f60     2C 00 90 5D |  if_ne	jmp	#LR__1982
18f64     00 12 06 F6 | 	mov	arg01, #0
18f68     A4 36 B1 FD | 	call	#__system___getiolock_0606
18f6c     FD 12 02 F6 | 	mov	arg01, result1
18f70     F8 D9 B0 FD | 	call	#__system___lockmem
18f74     00 12 06 F6 | 	mov	arg01, #0
18f78     13 15 02 F6 | 	mov	arg02, local01
18f7c     00 16 06 F6 | 	mov	arg03, #0
18f80     E0 E6 B0 FD | 	call	#__system___basic_print_string
18f84     00 12 06 F6 | 	mov	arg01, #0
18f88     84 36 B1 FD | 	call	#__system___getiolock_0606
18f8c     FD 00 68 FC | 	wrlong	#0, result1
18f90                 | LR__1982
18f90                 | LR__1983
18f90                 | ' if r=0 then 
18f90     00 2C 0E F2 | 	cmp	local04, #0 wz
18f94     1C 01 90 5D |  if_ne	jmp	#LR__1988
18f98                 | '   if t1.result_type=result_int then print t1.result.iresult
18f98     1C 2A 0E F2 | 	cmp	local03, #28 wz
18f9c     40 00 90 5D |  if_ne	jmp	#LR__1984
18fa0     00 12 06 F6 | 	mov	arg01, #0
18fa4     68 36 B1 FD | 	call	#__system___getiolock_0606
18fa8     FD 12 02 F6 | 	mov	arg01, result1
18fac     BC D9 B0 FD | 	call	#__system___lockmem
18fb0     00 12 06 F6 | 	mov	arg01, #0
18fb4     13 15 02 F6 | 	mov	arg02, local01
18fb8     00 16 06 F6 | 	mov	arg03, #0
18fbc     0A 18 06 F6 | 	mov	arg04, #10
18fc0     E4 E6 B0 FD | 	call	#__system___basic_print_integer
18fc4     00 12 06 F6 | 	mov	arg01, #0
18fc8     0A 14 06 F6 | 	mov	arg02, #10
18fcc     00 16 06 F6 | 	mov	arg03, #0
18fd0     38 E6 B0 FD | 	call	#__system___basic_print_char
18fd4     00 12 06 F6 | 	mov	arg01, #0
18fd8     34 36 B1 FD | 	call	#__system___getiolock_0606
18fdc     FD 00 68 FC | 	wrlong	#0, result1
18fe0                 | LR__1984
18fe0                 | '   if t1.result_type=result_uint then print t1.result.uresult
18fe0     1D 2A 0E F2 | 	cmp	local03, #29 wz
18fe4     40 00 90 5D |  if_ne	jmp	#LR__1985
18fe8     00 12 06 F6 | 	mov	arg01, #0
18fec     20 36 B1 FD | 	call	#__system___getiolock_0606
18ff0     FD 12 02 F6 | 	mov	arg01, result1
18ff4     74 D9 B0 FD | 	call	#__system___lockmem
18ff8     00 12 06 F6 | 	mov	arg01, #0
18ffc     13 15 02 F6 | 	mov	arg02, local01
19000     00 16 06 F6 | 	mov	arg03, #0
19004     0A 18 06 F6 | 	mov	arg04, #10
19008     DC E6 B0 FD | 	call	#__system___basic_print_unsigned
1900c     00 12 06 F6 | 	mov	arg01, #0
19010     0A 14 06 F6 | 	mov	arg02, #10
19014     00 16 06 F6 | 	mov	arg03, #0
19018     F0 E5 B0 FD | 	call	#__system___basic_print_char
1901c     00 12 06 F6 | 	mov	arg01, #0
19020     EC 35 B1 FD | 	call	#__system___getiolock_0606
19024     FD 00 68 FC | 	wrlong	#0, result1
19028                 | LR__1985
19028                 | '   if t1.result_type=result_float then print t1.result.fresult
19028     1E 2A 0E F2 | 	cmp	local03, #30 wz
1902c     40 00 90 5D |  if_ne	jmp	#LR__1986
19030     00 12 06 F6 | 	mov	arg01, #0
19034     D8 35 B1 FD | 	call	#__system___getiolock_0606
19038     FD 12 02 F6 | 	mov	arg01, result1
1903c     2C D9 B0 FD | 	call	#__system___lockmem
19040     00 12 06 F6 | 	mov	arg01, #0
19044     13 15 02 F6 | 	mov	arg02, local01
19048     00 16 06 F6 | 	mov	arg03, #0
1904c     23 18 06 F6 | 	mov	arg04, #35
19050     AC 0D B1 FD | 	call	#__system___basic_print_float
19054     00 12 06 F6 | 	mov	arg01, #0
19058     0A 14 06 F6 | 	mov	arg02, #10
1905c     00 16 06 F6 | 	mov	arg03, #0
19060     A8 E5 B0 FD | 	call	#__system___basic_print_char
19064     00 12 06 F6 | 	mov	arg01, #0
19068     A4 35 B1 FD | 	call	#__system___getiolock_0606
1906c     FD 00 68 FC | 	wrlong	#0, result1
19070                 | LR__1986
19070                 | '   if t1.result_type=result_string then print t1.result.sresult
19070     1F 2A 0E F2 | 	cmp	local03, #31 wz
19074     3C 00 90 5D |  if_ne	jmp	#LR__1987
19078     00 12 06 F6 | 	mov	arg01, #0
1907c     90 35 B1 FD | 	call	#__system___getiolock_0606
19080     FD 12 02 F6 | 	mov	arg01, result1
19084     E4 D8 B0 FD | 	call	#__system___lockmem
19088     00 12 06 F6 | 	mov	arg01, #0
1908c     13 15 02 F6 | 	mov	arg02, local01
19090     00 16 06 F6 | 	mov	arg03, #0
19094     CC E5 B0 FD | 	call	#__system___basic_print_string
19098     00 12 06 F6 | 	mov	arg01, #0
1909c     0A 14 06 F6 | 	mov	arg02, #10
190a0     00 16 06 F6 | 	mov	arg03, #0
190a4     64 E5 B0 FD | 	call	#__system___basic_print_char
190a8     00 12 06 F6 | 	mov	arg01, #0
190ac     60 35 B1 FD | 	call	#__system___getiolock_0606
190b0     FD 00 68 FC | 	wrlong	#0, result1
190b4                 | LR__1987
190b4                 | LR__1988
190b4                 | ' if r=print_mod_empty then print
190b4     20 2C 0E F2 | 	cmp	local04, #32 wz
190b8     2C 00 90 5D |  if_ne	jmp	#LR__1989
190bc     00 12 06 F6 | 	mov	arg01, #0
190c0     4C 35 B1 FD | 	call	#__system___getiolock_0606
190c4     FD 12 02 F6 | 	mov	arg01, result1
190c8     A0 D8 B0 FD | 	call	#__system___lockmem
190cc     00 12 06 F6 | 	mov	arg01, #0
190d0     0A 14 06 F6 | 	mov	arg02, #10
190d4     00 16 06 F6 | 	mov	arg03, #0
190d8     30 E5 B0 FD | 	call	#__system___basic_print_char
190dc     00 12 06 F6 | 	mov	arg01, #0
190e0     2C 35 B1 FD | 	call	#__system___getiolock_0606
190e4     FD 00 68 FC | 	wrlong	#0, result1
190e8                 | LR__1989
190e8                 | LR__1990
190e8     A7 F0 03 F6 | 	mov	ptra, fp
190ec     B2 00 A0 FD | 	call	#popregs_
190f0                 | _do_print_ret
190f0     2D 00 64 FD | 	ret
190f4                 | 
190f4                 | ' 
190f4                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
190f4                 | ' 
190f4                 | ' sub do_push
190f4                 | _do_push
190f4                 | ' if stackpointer<maxstack then 
190f4     43 00 00 FF 
190f8     58 E4 05 F1 | 	add	objptr, ##34392
190fc     F2 00 02 FB | 	rdlong	_var01, objptr
19100     43 00 00 FF 
19104     58 E4 85 F1 | 	sub	objptr, ##34392
19108     01 00 00 FF 
1910c     00 00 56 F2 | 	cmps	_var01, ##512 wc
19110     F8 00 90 3D |  if_ae	jmp	#LR__2000
19114     4A 00 00 FF 
19118     80 E4 05 F1 | 	add	objptr, ##38016
1911c     F2 02 02 FB | 	rdlong	_var02, objptr
19120     01 05 02 F6 | 	mov	_var03, _var02
19124     01 04 66 F0 | 	shl	_var03, #1
19128     01 05 02 F1 | 	add	_var03, _var02
1912c     02 04 66 F0 | 	shl	_var03, #2
19130     03 00 00 FF 
19134     04 E4 85 F1 | 	sub	objptr, ##1540
19138     F2 04 02 F1 | 	add	_var03, objptr
1913c     02 01 02 FB | 	rdlong	_var01, _var03
19140     04 04 06 F1 | 	add	_var03, #4
19144     02 07 02 FB | 	rdlong	_var04, _var03
19148     01 05 02 F6 | 	mov	_var03, _var02
1914c     01 04 66 F0 | 	shl	_var03, #1
19150     01 05 02 F1 | 	add	_var03, _var02
19154     02 04 66 F0 | 	shl	_var03, #2
19158     F2 04 02 F1 | 	add	_var03, objptr
1915c     08 04 06 F1 | 	add	_var03, #8
19160     02 03 02 FB | 	rdlong	_var02, _var03
19164     04 00 00 FF 
19168     24 E4 85 F1 | 	sub	objptr, ##2084
1916c     F2 04 02 FB | 	rdlong	_var03, objptr
19170     02 09 02 F6 | 	mov	_var05, _var03
19174     01 08 66 F0 | 	shl	_var05, #1
19178     02 09 02 F1 | 	add	_var05, _var03
1917c     02 08 66 F0 | 	shl	_var05, #2
19180     0C 00 00 FF 
19184     0C E4 85 F1 | 	sub	objptr, ##6156
19188     F2 08 02 F1 | 	add	_var05, objptr
1918c     04 01 62 FC | 	wrlong	_var01, _var05
19190     0C 00 00 FF 
19194     0C E4 05 F1 | 	add	objptr, ##6156
19198     F2 08 02 FB | 	rdlong	_var05, objptr
1919c     04 05 02 F6 | 	mov	_var03, _var05
191a0     01 04 66 F0 | 	shl	_var03, #1
191a4     04 05 02 F1 | 	add	_var03, _var05
191a8     02 04 66 F0 | 	shl	_var03, #2
191ac     0C 00 00 FF 
191b0     0C E4 85 F1 | 	sub	objptr, ##6156
191b4     F2 04 02 F1 | 	add	_var03, objptr
191b8     04 04 06 F1 | 	add	_var03, #4
191bc     02 07 62 FC | 	wrlong	_var04, _var03
191c0     0C 00 00 FF 
191c4     0C E4 05 F1 | 	add	objptr, ##6156
191c8     F2 08 02 FB | 	rdlong	_var05, objptr
191cc     04 07 02 F6 | 	mov	_var04, _var05
191d0     01 06 66 F0 | 	shl	_var04, #1
191d4     04 07 02 F1 | 	add	_var04, _var05
191d8     02 06 66 F0 | 	shl	_var04, #2
191dc     0C 00 00 FF 
191e0     0C E4 85 F1 | 	sub	objptr, ##6156
191e4     F2 06 02 F1 | 	add	_var04, objptr
191e8     08 06 06 F1 | 	add	_var04, #8
191ec     03 03 62 FC | 	wrlong	_var02, _var04
191f0     0C 00 00 FF 
191f4     0C E4 05 F1 | 	add	objptr, ##6156
191f8     F2 00 02 FB | 	rdlong	_var01, objptr
191fc     01 00 06 F1 | 	add	_var01, #1
19200     F2 00 62 FC | 	wrlong	_var01, objptr
19204     43 00 00 FF 
19208     58 E4 85 F1 | 	sub	objptr, ##34392
1920c                 | LR__2000
1920c                 | _do_push_ret
1920c     2D 00 64 FD | 	ret
19210                 | 
19210                 | ' 
19210                 | ' '-------------------- put
19210                 | ' 
19210                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
19210                 | _do_put
19210     03 4A 05 F6 | 	mov	COUNT_, #3
19214     A8 00 A0 FD | 	call	#pushregs_
19218     28 F0 07 F1 | 	add	ptra, #40
1921c     4A 00 00 FF 
19220     80 E4 05 F1 | 	add	objptr, ##38016
19224     F2 1A 02 FB | 	rdlong	arg05, objptr
19228     0D 19 02 F6 | 	mov	arg04, arg05
1922c     01 18 66 F0 | 	shl	arg04, #1
19230     0D 19 02 F1 | 	add	arg04, arg05
19234     02 18 66 F0 | 	shl	arg04, #2
19238     03 00 00 FF 
1923c     04 E4 85 F1 | 	sub	objptr, ##1540
19240     F2 18 02 F1 | 	add	arg04, objptr
19244     0C 1B 02 FB | 	rdlong	arg05, arg04
19248     A7 1A 62 FC | 	wrlong	arg05, fp
1924c                 | ' 
1924c                 | ' numpar=compiledline(lineptr_e).result.uresult
1924c                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
1924c     04 1A 0E F2 | 	cmp	arg05, #4 wz
19250     47 00 00 FF 
19254     7C E4 85 F1 | 	sub	objptr, ##36476
19258     48 00 90 5D |  if_ne	jmp	#LR__2010
1925c     7C 43 BF FD | 	call	#_pop
19260     FF 1A 02 F6 | 	mov	arg05, result3
19264     1C 4E 05 F1 | 	add	fp, #28
19268     A7 FA 61 FC | 	wrlong	result1, fp
1926c     04 4E 05 F1 | 	add	fp, #4
19270     A7 FC 61 FC | 	wrlong	result2, fp
19274     04 4E 05 F1 | 	add	fp, #4
19278     A7 1A 62 FC | 	wrlong	arg05, fp
1927c     08 4E 85 F1 | 	sub	fp, #8
19280     A7 12 02 F6 | 	mov	arg01, fp
19284     1C 4E 85 F1 | 	sub	fp, #28
19288     34 45 BF FD | 	call	#_converttoint
1928c     52 00 00 FF 
19290     0C E5 05 F1 | 	add	objptr, ##42252
19294     F2 FA 61 FC | 	wrlong	result1, objptr
19298     52 00 00 FF 
1929c     0C E5 85 F1 | 	sub	objptr, ##42252
192a0     18 00 90 FD | 	jmp	#LR__2011
192a4                 | LR__2010
192a4     52 00 00 FF 
192a8     0C E5 05 F1 | 	add	objptr, ##42252
192ac     FF FF FF FF 
192b0     F2 FE 6B FC | 	wrlong	##-1, objptr
192b4     52 00 00 FF 
192b8     0C E5 85 F1 | 	sub	objptr, ##42252
192bc                 | LR__2011
192bc                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
192bc     A7 1A 02 FB | 	rdlong	arg05, fp
192c0     03 1A 56 F2 | 	cmps	arg05, #3 wc
192c4     40 00 90 CD |  if_b	jmp	#LR__2012
192c8     10 43 BF FD | 	call	#_pop
192cc     FF 1A 02 F6 | 	mov	arg05, result3
192d0     1C 4E 05 F1 | 	add	fp, #28
192d4     A7 FA 61 FC | 	wrlong	result1, fp
192d8     04 4E 05 F1 | 	add	fp, #4
192dc     A7 FC 61 FC | 	wrlong	result2, fp
192e0     04 4E 05 F1 | 	add	fp, #4
192e4     A7 1A 62 FC | 	wrlong	arg05, fp
192e8     08 4E 85 F1 | 	sub	fp, #8
192ec     A7 12 02 F6 | 	mov	arg01, fp
192f0     1C 4E 85 F1 | 	sub	fp, #28
192f4     C8 44 BF FD | 	call	#_converttoint
192f8     08 4E 05 F1 | 	add	fp, #8
192fc     A7 FA 61 FC | 	wrlong	result1, fp
19300     08 4E 85 F1 | 	sub	fp, #8
19304     0C 00 90 FD | 	jmp	#LR__2013
19308                 | LR__2012
19308     08 4E 05 F1 | 	add	fp, #8
1930c     A7 02 68 FC | 	wrlong	#1, fp
19310     08 4E 85 F1 | 	sub	fp, #8
19314                 | LR__2013
19314                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
19314     A7 18 02 FB | 	rdlong	arg04, fp
19318     02 18 56 F2 | 	cmps	arg04, #2 wc
1931c     3C 00 90 CD |  if_b	jmp	#LR__2014
19320     B8 42 BF FD | 	call	#_pop
19324     FF 18 02 F6 | 	mov	arg04, result3
19328     1C 4E 05 F1 | 	add	fp, #28
1932c     A7 FA 61 FC | 	wrlong	result1, fp
19330     04 4E 05 F1 | 	add	fp, #4
19334     A7 FC 61 FC | 	wrlong	result2, fp
19338     04 4E 05 F1 | 	add	fp, #4
1933c     A7 18 62 FC | 	wrlong	arg04, fp
19340     08 4E 85 F1 | 	sub	fp, #8
19344     A7 12 02 F6 | 	mov	arg01, fp
19348     1C 4E 85 F1 | 	sub	fp, #28
1934c     70 44 BF FD | 	call	#_converttoint
19350     0C 4E 05 F1 | 	add	fp, #12
19354     A7 FA 61 FC | 	wrlong	result1, fp
19358     0C 4E 85 F1 | 	sub	fp, #12
1935c                 | LR__2014
1935c     7C 42 BF FD | 	call	#_pop
19360     FF 18 02 F6 | 	mov	arg04, result3
19364     1C 4E 05 F1 | 	add	fp, #28
19368     A7 FA 61 FC | 	wrlong	result1, fp
1936c     04 4E 05 F1 | 	add	fp, #4
19370     A7 FC 61 FC | 	wrlong	result2, fp
19374     04 4E 05 F1 | 	add	fp, #4
19378     A7 18 62 FC | 	wrlong	arg04, fp
1937c     08 4E 85 F1 | 	sub	fp, #8
19380     A7 12 02 F6 | 	mov	arg01, fp
19384     1C 4E 85 F1 | 	sub	fp, #28
19388     34 44 BF FD | 	call	#_converttoint
1938c     04 4E 05 F1 | 	add	fp, #4
19390     A7 FA 61 FC | 	wrlong	result1, fp
19394     10 4E 05 F1 | 	add	fp, #16
19398     A7 26 02 FB | 	rdlong	local01, fp
1939c     14 4E 85 F1 | 	sub	fp, #20
193a0     02 26 66 F0 | 	shl	local01, #2
193a4     50 00 00 FF 
193a8     C4 E4 05 F1 | 	add	objptr, ##41156
193ac     F2 26 02 F1 | 	add	local01, objptr
193b0     13 01 68 FC | 	wrlong	#0, local01
193b4                 | ' t1=pop() : channel=converttoint(t1)
193b4                 | ' getres(j)=0
193b4                 | ' if pos>=0 then
193b4     02 00 00 FF 
193b8     48 E4 05 F1 | 	add	objptr, ##1096
193bc     F2 28 02 FB | 	rdlong	local02, objptr
193c0     52 00 00 FF 
193c4     0C E5 85 F1 | 	sub	objptr, ##42252
193c8     00 28 56 F2 | 	cmps	local02, #0 wc
193cc     C0 01 90 CD |  if_b	jmp	#LR__2020
193d0     10 4E 05 F1 | 	add	fp, #16
193d4     A7 00 68 FC | 	wrlong	#0, fp
193d8     10 4E 85 F1 | 	sub	fp, #16
193dc                 | '    i=0: do
193dc                 | LR__2015
193dc     14 4E 05 F1 | 	add	fp, #20
193e0     A7 00 68 FC | 	wrlong	#0, fp
193e4     14 4E 85 F1 | 	sub	fp, #20
193e8                 | '    j=0: do    
193e8                 | LR__2016
193e8                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
193e8     0C 4E 05 F1 | 	add	fp, #12
193ec     A7 28 02 FB | 	rdlong	local02, fp
193f0     0C 4E 85 F1 | 	sub	fp, #12
193f4     00 04 00 FF 
193f8     00 28 56 F2 | 	cmps	local02, ##524288 wc
193fc     4C 00 90 3D |  if_ae	jmp	#LR__2017
19400     14 4E 05 F1 | 	add	fp, #20
19404     A7 28 02 FB | 	rdlong	local02, fp
19408     14 27 02 F6 | 	mov	local01, local02
1940c     4E 00 00 FF 
19410     B4 E4 05 F1 | 	add	objptr, ##40116
19414     F2 26 02 F1 | 	add	local01, objptr
19418     08 4E 85 F1 | 	sub	fp, #8
1941c     A7 12 02 FB | 	rdlong	arg01, fp
19420     04 4E 05 F1 | 	add	fp, #4
19424     A7 18 02 FB | 	rdlong	arg04, fp
19428     0A 18 66 F0 | 	shl	arg04, #10
1942c     0C 13 02 F1 | 	add	arg01, arg04
19430     10 4E 85 F1 | 	sub	fp, #16
19434     14 13 02 F1 | 	add	arg01, local02
19438     09 FB C1 FA | 	rdbyte	result1, arg01
1943c     4E 00 00 FF 
19440     B4 E4 85 F1 | 	sub	objptr, ##40116
19444     13 FB 41 FC | 	wrbyte	result1, local01
19448     48 00 90 FD | 	jmp	#LR__2018
1944c                 | LR__2017
1944c     14 4E 05 F1 | 	add	fp, #20
19450     A7 28 02 FB | 	rdlong	local02, fp
19454     14 27 02 F6 | 	mov	local01, local02
19458     4E 00 00 FF 
1945c     B4 E4 05 F1 | 	add	objptr, ##40116
19460     F2 26 02 F1 | 	add	local01, objptr
19464     08 4E 85 F1 | 	sub	fp, #8
19468     A7 12 02 FB | 	rdlong	arg01, fp
1946c     04 4E 05 F1 | 	add	fp, #4
19470     A7 18 02 FB | 	rdlong	arg04, fp
19474     0A 18 66 F0 | 	shl	arg04, #10
19478     0C 13 02 F1 | 	add	arg01, arg04
1947c     10 4E 85 F1 | 	sub	fp, #16
19480     14 13 02 F1 | 	add	arg01, local02
19484     4E 00 00 FF 
19488     B4 E4 85 F1 | 	sub	objptr, ##40116
1948c     64 9D B0 FD | 	call	#_pspeek
19490     13 FB 41 FC | 	wrbyte	result1, local01
19494                 | LR__2018
19494     14 4E 05 F1 | 	add	fp, #20
19498     A7 28 02 FB | 	rdlong	local02, fp
1949c     01 28 06 F1 | 	add	local02, #1
194a0     A7 28 62 FC | 	wrlong	local02, fp
194a4     14 4E 85 F1 | 	sub	fp, #20
194a8     02 00 00 FF 
194ac     00 28 56 F2 | 	cmps	local02, ##1024 wc
194b0     2C 00 90 3D |  if_ae	jmp	#LR__2019
194b4     10 4E 05 F1 | 	add	fp, #16
194b8     A7 26 02 FB | 	rdlong	local01, fp
194bc     0A 26 66 F0 | 	shl	local01, #10
194c0     04 4E 05 F1 | 	add	fp, #4
194c4     A7 28 02 FB | 	rdlong	local02, fp
194c8     14 27 02 F1 | 	add	local01, local02
194cc     0C 4E 85 F1 | 	sub	fp, #12
194d0     A7 28 02 FB | 	rdlong	local02, fp
194d4     08 4E 85 F1 | 	sub	fp, #8
194d8     14 27 5A F2 | 	cmps	local01, local02 wcz
194dc     08 FF 9F ED |  if_be	jmp	#LR__2016
194e0                 | LR__2019
194e0                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
194e0     04 4E 05 F1 | 	add	fp, #4
194e4     A7 12 02 FB | 	rdlong	arg01, fp
194e8     52 00 00 FF 
194ec     0C E5 05 F1 | 	add	objptr, ##42252
194f0     F2 14 02 FB | 	rdlong	arg02, objptr
194f4     01 14 06 F1 | 	add	arg02, #1
194f8     04 00 00 FF 
194fc     58 E4 85 F1 | 	sub	objptr, ##2136
19500     F2 16 02 F6 | 	mov	arg03, objptr
19504     4E 00 00 FF 
19508     B4 E4 85 F1 | 	sub	objptr, ##40116
1950c     04 4E 05 F1 | 	add	fp, #4
19510     A7 18 02 FB | 	rdlong	arg04, fp
19514     08 4E 85 F1 | 	sub	fp, #8
19518     01 1A 06 F6 | 	mov	arg05, #1
1951c     54 E2 B0 FD | 	call	#__system___basic_put
19520     18 4E 05 F1 | 	add	fp, #24
19524     A7 FA 61 FC | 	wrlong	result1, fp
19528     14 4E 85 F1 | 	sub	fp, #20
1952c     A7 26 02 FB | 	rdlong	local01, fp
19530     02 26 66 F0 | 	shl	local01, #2
19534     50 00 00 FF 
19538     C4 E4 05 F1 | 	add	objptr, ##41156
1953c     F2 26 02 F1 | 	add	local01, objptr
19540     13 FB 61 FC | 	wrlong	result1, local01
19544                 | '    if 1024*i+j>amount then exit loop
19544     0C 4E 05 F1 | 	add	fp, #12
19548     A7 28 02 FB | 	rdlong	local02, fp
1954c     0A 28 66 F0 | 	shl	local02, #10
19550     04 4E 05 F1 | 	add	fp, #4
19554     A7 26 02 FB | 	rdlong	local01, fp
19558     13 29 02 F1 | 	add	local02, local01
1955c     0C 4E 85 F1 | 	sub	fp, #12
19560     A7 26 02 FB | 	rdlong	local01, fp
19564     08 4E 85 F1 | 	sub	fp, #8
19568     13 29 5A F2 | 	cmps	local02, local01 wcz
1956c     50 00 00 FF 
19570     C4 E4 85 F1 | 	sub	objptr, ##41156
19574     CC 01 90 1D |  if_a	jmp	#LR__2027
19578     10 4E 05 F1 | 	add	fp, #16
1957c     A7 28 02 FB | 	rdlong	local02, fp
19580     01 28 06 F1 | 	add	local02, #1
19584     A7 28 62 FC | 	wrlong	local02, fp
19588     10 4E 85 F1 | 	sub	fp, #16
1958c     4C FE 9F FD | 	jmp	#LR__2015
19590                 | LR__2020
19590     10 4E 05 F1 | 	add	fp, #16
19594     A7 00 68 FC | 	wrlong	#0, fp
19598     10 4E 85 F1 | 	sub	fp, #16
1959c                 | '    i=0: do
1959c                 | LR__2021
1959c     14 4E 05 F1 | 	add	fp, #20
195a0     A7 00 68 FC | 	wrlong	#0, fp
195a4     14 4E 85 F1 | 	sub	fp, #20
195a8                 | '    j=0: do  
195a8                 | LR__2022
195a8                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
195a8     0C 4E 05 F1 | 	add	fp, #12
195ac     A7 28 02 FB | 	rdlong	local02, fp
195b0     0C 4E 85 F1 | 	sub	fp, #12
195b4     00 04 00 FF 
195b8     00 28 56 F2 | 	cmps	local02, ##524288 wc
195bc     4C 00 90 3D |  if_ae	jmp	#LR__2023
195c0     14 4E 05 F1 | 	add	fp, #20
195c4     A7 28 02 FB | 	rdlong	local02, fp
195c8     14 27 02 F6 | 	mov	local01, local02
195cc     4E 00 00 FF 
195d0     B4 E4 05 F1 | 	add	objptr, ##40116
195d4     F2 26 02 F1 | 	add	local01, objptr
195d8     08 4E 85 F1 | 	sub	fp, #8
195dc     A7 12 02 FB | 	rdlong	arg01, fp
195e0     04 4E 05 F1 | 	add	fp, #4
195e4     A7 18 02 FB | 	rdlong	arg04, fp
195e8     0A 18 66 F0 | 	shl	arg04, #10
195ec     0C 13 02 F1 | 	add	arg01, arg04
195f0     10 4E 85 F1 | 	sub	fp, #16
195f4     14 13 02 F1 | 	add	arg01, local02
195f8     09 FB C1 FA | 	rdbyte	result1, arg01
195fc     4E 00 00 FF 
19600     B4 E4 85 F1 | 	sub	objptr, ##40116
19604     13 FB 41 FC | 	wrbyte	result1, local01
19608     48 00 90 FD | 	jmp	#LR__2024
1960c                 | LR__2023
1960c     14 4E 05 F1 | 	add	fp, #20
19610     A7 28 02 FB | 	rdlong	local02, fp
19614     14 27 02 F6 | 	mov	local01, local02
19618     4E 00 00 FF 
1961c     B4 E4 05 F1 | 	add	objptr, ##40116
19620     F2 26 02 F1 | 	add	local01, objptr
19624     08 4E 85 F1 | 	sub	fp, #8
19628     A7 12 02 FB | 	rdlong	arg01, fp
1962c     04 4E 05 F1 | 	add	fp, #4
19630     A7 18 02 FB | 	rdlong	arg04, fp
19634     0A 18 66 F0 | 	shl	arg04, #10
19638     0C 13 02 F1 | 	add	arg01, arg04
1963c     10 4E 85 F1 | 	sub	fp, #16
19640     14 13 02 F1 | 	add	arg01, local02
19644     4E 00 00 FF 
19648     B4 E4 85 F1 | 	sub	objptr, ##40116
1964c     A4 9B B0 FD | 	call	#_pspeek
19650     13 FB 41 FC | 	wrbyte	result1, local01
19654                 | LR__2024
19654     14 4E 05 F1 | 	add	fp, #20
19658     A7 28 02 FB | 	rdlong	local02, fp
1965c     01 28 06 F1 | 	add	local02, #1
19660     A7 28 62 FC | 	wrlong	local02, fp
19664     14 4E 85 F1 | 	sub	fp, #20
19668     02 00 00 FF 
1966c     00 28 56 F2 | 	cmps	local02, ##1024 wc
19670     2C 00 90 3D |  if_ae	jmp	#LR__2025
19674     10 4E 05 F1 | 	add	fp, #16
19678     A7 26 02 FB | 	rdlong	local01, fp
1967c     0A 26 66 F0 | 	shl	local01, #10
19680     04 4E 05 F1 | 	add	fp, #4
19684     A7 28 02 FB | 	rdlong	local02, fp
19688     14 27 02 F1 | 	add	local01, local02
1968c     0C 4E 85 F1 | 	sub	fp, #12
19690     A7 28 02 FB | 	rdlong	local02, fp
19694     08 4E 85 F1 | 	sub	fp, #8
19698     14 27 5A F2 | 	cmps	local01, local02 wcz
1969c     08 FF 9F ED |  if_be	jmp	#LR__2022
196a0                 | LR__2025
196a0                 | '    put #channel,,block(0),amount, r : getres(channel)=r
196a0     04 4E 05 F1 | 	add	fp, #4
196a4     A7 12 02 FB | 	rdlong	arg01, fp
196a8     4E 00 00 FF 
196ac     B4 E4 05 F1 | 	add	objptr, ##40116
196b0     F2 16 02 F6 | 	mov	arg03, objptr
196b4     4E 00 00 FF 
196b8     B4 E4 85 F1 | 	sub	objptr, ##40116
196bc     04 4E 05 F1 | 	add	fp, #4
196c0     A7 18 02 FB | 	rdlong	arg04, fp
196c4     08 4E 85 F1 | 	sub	fp, #8
196c8     00 14 06 F6 | 	mov	arg02, #0
196cc     01 1A 06 F6 | 	mov	arg05, #1
196d0     A0 E0 B0 FD | 	call	#__system___basic_put
196d4     18 4E 05 F1 | 	add	fp, #24
196d8     A7 FA 61 FC | 	wrlong	result1, fp
196dc     14 4E 85 F1 | 	sub	fp, #20
196e0     A7 26 02 FB | 	rdlong	local01, fp
196e4     02 26 66 F0 | 	shl	local01, #2
196e8     50 00 00 FF 
196ec     C4 E4 05 F1 | 	add	objptr, ##41156
196f0     F2 26 02 F1 | 	add	local01, objptr
196f4     13 FB 61 FC | 	wrlong	result1, local01
196f8                 | '    if 1024*i+j>amount then exit loop
196f8     0C 4E 05 F1 | 	add	fp, #12
196fc     A7 28 02 FB | 	rdlong	local02, fp
19700     0A 28 66 F0 | 	shl	local02, #10
19704     04 4E 05 F1 | 	add	fp, #4
19708     A7 26 02 FB | 	rdlong	local01, fp
1970c     13 29 02 F1 | 	add	local02, local01
19710     0C 4E 85 F1 | 	sub	fp, #12
19714     A7 2A 02 FB | 	rdlong	local03, fp
19718     08 4E 85 F1 | 	sub	fp, #8
1971c     15 29 5A F2 | 	cmps	local02, local03 wcz
19720     50 00 00 FF 
19724     C4 E4 85 F1 | 	sub	objptr, ##41156
19728     18 00 90 1D |  if_a	jmp	#LR__2026
1972c     10 4E 05 F1 | 	add	fp, #16
19730     A7 28 02 FB | 	rdlong	local02, fp
19734     01 28 06 F1 | 	add	local02, #1
19738     A7 28 62 FC | 	wrlong	local02, fp
1973c     10 4E 85 F1 | 	sub	fp, #16
19740     58 FE 9F FD | 	jmp	#LR__2021
19744                 | LR__2026
19744                 | LR__2027
19744     A7 F0 03 F6 | 	mov	ptra, fp
19748     B2 00 A0 FD | 	call	#popregs_
1974c                 | _do_put_ret
1974c     2D 00 64 FD | 	ret
19750                 | 
19750                 | ' 
19750                 | ' '-------------------- rad
19750                 | ' 
19750                 | ' sub do_rad
19750                 | _do_rad
19750     52 00 00 FF 
19754     A8 E4 05 F1 | 	add	objptr, ##42152
19758     00 C0 9F FF 
1975c     F2 00 68 FC | 	wrlong	##1065353216, objptr
19760     04 E4 05 F1 | 	add	objptr, #4
19764     00 C0 9F FF 
19768     F2 00 68 FC | 	wrlong	##1065353216, objptr
1976c     52 00 00 FF 
19770     AC E4 85 F1 | 	sub	objptr, ##42156
19774                 | _do_rad_ret
19774     2D 00 64 FD | 	ret
19778                 | 
19778                 | ' 
19778                 | ' '-------------------- rdpin
19778                 | ' 
19778                 | ' sub do_rdpin
19778                 | _do_rdpin
19778     00 4A 05 F6 | 	mov	COUNT_, #0
1977c     A8 00 A0 FD | 	call	#pushregs_
19780     0C F0 07 F1 | 	add	ptra, #12
19784     54 3E BF FD | 	call	#_pop
19788     A7 FA 61 FC | 	wrlong	result1, fp
1978c     04 4E 05 F1 | 	add	fp, #4
19790     A7 FC 61 FC | 	wrlong	result2, fp
19794     04 4E 05 F1 | 	add	fp, #4
19798     A7 FE 61 FC | 	wrlong	result3, fp
1979c     08 4E 85 F1 | 	sub	fp, #8
197a0     A7 12 02 F6 | 	mov	arg01, fp
197a4     18 40 BF FD | 	call	#_converttoint
197a8     FD FA 89 FA | 	rdpin	result1, result1
197ac     52 00 00 FF 
197b0     10 E5 05 F1 | 	add	objptr, ##42256
197b4     F2 FA 61 FC | 	wrlong	result1, objptr
197b8     52 00 00 FF 
197bc     10 E5 85 F1 | 	sub	objptr, ##42256
197c0     08 4E 05 F1 | 	add	fp, #8
197c4     A7 3A 68 FC | 	wrlong	#29, fp
197c8     08 4E 85 F1 | 	sub	fp, #8
197cc     A7 08 68 FC | 	wrlong	#4, fp
197d0     A7 12 02 F6 | 	mov	arg01, fp
197d4     9C 3E BF FD | 	call	#_push
197d8     A7 F0 03 F6 | 	mov	ptra, fp
197dc     B2 00 A0 FD | 	call	#popregs_
197e0                 | _do_rdpin_ret
197e0     2D 00 64 FD | 	ret
197e4                 | 
197e4                 | ' 
197e4                 | ' ' ----------------  read
197e4                 | ' 
197e4                 | ' function read_next_line() as string
197e4                 | _read_next_line
197e4     07 4A 05 F6 | 	mov	COUNT_, #7
197e8     A8 00 A0 FD | 	call	#pushregs_
197ec                 | ' if dataptr=$7FFFFFFF then return("")
197ec     50 00 00 FF 
197f0     2C E5 05 F1 | 	add	objptr, ##41260
197f4     F2 26 02 FB | 	rdlong	local01, objptr
197f8     50 00 00 FF 
197fc     2C E5 85 F1 | 	sub	objptr, ##41260
19800     FF FF 3F FF 
19804     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
19808     B7 01 00 AF 
1980c     D9 FB 05 A6 |  if_e	mov	result1, ##@LR__5947
19810     BC 01 90 AD |  if_e	jmp	#LR__2037
19814                 | ' do
19814                 | LR__2030
19814     50 00 00 FF 
19818     08 E5 05 F1 | 	add	objptr, ##41224
1981c     F2 12 02 F6 | 	mov	arg01, objptr
19820     24 E4 05 F1 | 	add	objptr, #36
19824     F2 14 02 FB | 	rdlong	arg02, objptr
19828     24 16 06 F6 | 	mov	arg03, #36
1982c     45 00 00 FF 
19830     60 E4 85 F1 | 	sub	objptr, ##35424
19834     AC C4 B0 FD | 	call	#_psram_spin2_read1
19838                 | '  ' print dataptr
19838                 | '   psram.read1(varptr(dataheader),dataptr,36) 
19838                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
19838     45 00 00 FF 
1983c     3C E4 05 F1 | 	add	objptr, ##35388
19840     F2 26 02 FB | 	rdlong	local01, objptr
19844     50 00 00 FF 
19848     08 E5 85 F1 | 	sub	objptr, ##41224
1984c     FF FF 7F FF 
19850     FF 27 0E F2 | 	cmp	local01, ##-1 wz
19854     50 00 00 5F 
19858     1C E5 05 51 |  if_ne	add	objptr, ##41244
1985c     F2 26 02 5B |  if_ne	rdlong	local01, objptr
19860     10 E4 05 51 |  if_ne	add	objptr, #16
19864     F2 26 62 5C |  if_ne	wrlong	local01, objptr
19868     50 00 00 5F 
1986c     2C E5 85 51 |  if_ne	sub	objptr, ##41260
19870     50 00 00 FF 
19874     1C E5 05 F1 | 	add	objptr, ##41244
19878     F2 26 02 FB | 	rdlong	local01, objptr
1987c     50 00 00 FF 
19880     1C E5 85 F1 | 	sub	objptr, ##41244
19884     FF FF 3F FF 
19888     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
1988c     50 00 00 5F 
19890     08 E5 05 51 |  if_ne	add	objptr, ##41224
19894     F2 28 02 5B |  if_ne	rdlong	local02, objptr
19898     50 00 00 5F 
1989c     08 E5 85 51 |  if_ne	sub	objptr, ##41224
198a0     FF FF 7F 5F 
198a4     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
198a8     50 00 00 5F 
198ac     28 E5 05 51 |  if_ne	add	objptr, ##41256
198b0     F2 2A 02 5B |  if_ne	rdlong	local03, objptr
198b4     50 00 00 5F 
198b8     28 E5 85 51 |  if_ne	sub	objptr, ##41256
198bc     B7 2A 0E 52 |  if_ne	cmp	local03, #183 wz
198c0     50 FF 9F 5D |  if_ne	jmp	#LR__2030
198c4                 | ' if dataheader(8)=token_data then 
198c4     50 00 00 FF 
198c8     28 E5 05 F1 | 	add	objptr, ##41256
198cc     F2 26 02 FB | 	rdlong	local01, objptr
198d0     50 00 00 FF 
198d4     28 E5 85 F1 | 	sub	objptr, ##41256
198d8     B7 26 0E F2 | 	cmp	local01, #183 wz
198dc     E0 00 90 5D |  if_ne	jmp	#LR__2035
198e0     50 00 00 FF 
198e4     10 E5 05 F1 | 	add	objptr, ##41232
198e8     F2 26 02 FB | 	rdlong	local01, objptr
198ec     01 00 00 FF 
198f0     E0 E5 05 F1 | 	add	objptr, ##992
198f4     F2 26 62 FC | 	wrlong	local01, objptr
198f8     01 00 00 FF 
198fc     DC E5 85 F1 | 	sub	objptr, ##988
19900     F2 2C 02 FB | 	rdlong	local04, objptr
19904     01 00 00 FF 
19908     D4 E5 05 F1 | 	add	objptr, ##980
1990c     F2 2C 62 FC | 	wrlong	local04, objptr
19910                 | '  'print "data found at line "; dataheader(0)
19910                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
19910     00 2E 06 F6 | 	mov	local05, #0
19914     52 00 00 FF 
19918     E8 E4 85 F1 | 	sub	objptr, ##42216
1991c                 | LR__2031
1991c     16 2F 52 F2 | 	cmps	local05, local04 wc
19920     3C 00 90 3D |  if_ae	jmp	#LR__2032
19924     52 00 00 FF 
19928     F0 E4 05 F1 | 	add	objptr, ##42224
1992c     F2 12 02 FB | 	rdlong	arg01, objptr
19930     52 00 00 FF 
19934     F0 E4 85 F1 | 	sub	objptr, ##42224
19938     17 13 02 F1 | 	add	arg01, local05
1993c     B4 98 B0 FD | 	call	#_pspeek
19940     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
19944     68 F2 B0 FD | 	call	#__system__Chr_S
19948     FD 14 02 F6 | 	mov	arg02, result1
1994c     18 13 02 F6 | 	mov	arg01, local06
19950     74 D0 B0 FD | 	call	#__system___string_concat
19954     FD 30 02 F6 | 	mov	local06, result1
19958     01 2E 06 F1 | 	add	local05, #1
1995c     BC FF 9F FD | 	jmp	#LR__2031
19960                 | LR__2032
19960     B7 01 00 FF 
19964     DA 17 06 F6 | 	mov	arg03, ##@LR__5948
19968     01 12 06 F6 | 	mov	arg01, #1
1996c     18 15 02 F6 | 	mov	arg02, local06
19970     C0 F5 B0 FD | 	call	#__system__Instr
19974     FD 2E 02 F6 | 	mov	local05, result1
19978     18 13 02 F6 | 	mov	arg01, local06
1997c     09 33 02 F6 | 	mov	local07, arg01
19980     97 06 48 FB | 	callpa	#(@LR__2034-@LR__2033)>>2,fcache_load_ptr_
19984                 | LR__2033
19984     19 FB C9 FA | 	rdbyte	result1, local07 wz
19988     01 32 06 51 |  if_ne	add	local07, #1
1998c     F4 FF 9F 5D |  if_ne	jmp	#LR__2033
19990                 | LR__2034
19990     09 33 82 F1 | 	sub	local07, arg01
19994     19 15 02 F6 | 	mov	arg02, local07
19998     17 15 82 F1 | 	sub	arg02, local05
1999c     04 14 86 F1 | 	sub	arg02, #4
199a0     18 13 02 F6 | 	mov	arg01, local06
199a4     CC F0 B0 FD | 	call	#__system__Right_S
199a8     FD 12 02 F6 | 	mov	arg01, result1
199ac     CC F4 B0 FD | 	call	#__system__RTrim_S
199b0     FD 12 02 F6 | 	mov	arg01, result1
199b4     04 F4 B0 FD | 	call	#__system__LTrim_S
199b8     FD 30 02 F6 | 	mov	local06, result1
199bc     0C 00 90 FD | 	jmp	#LR__2036
199c0                 | LR__2035
199c0                 | '   return ("") 'todo proper err
199c0     B7 01 00 FF 
199c4     DF FB 05 F6 | 	mov	result1, ##@LR__5949
199c8     04 00 90 FD | 	jmp	#LR__2037
199cc                 | LR__2036
199cc                 | ' return readline
199cc     18 FB 01 F6 | 	mov	result1, local06
199d0                 | LR__2037
199d0     A7 F0 03 F6 | 	mov	ptra, fp
199d4     B2 00 A0 FD | 	call	#popregs_
199d8                 | _read_next_line_ret
199d8     2D 00 64 FD | 	ret
199dc                 | 
199dc                 | ' 
199dc                 | ' sub do_read
199dc                 | _do_read
199dc     11 4A 05 F6 | 	mov	COUNT_, #17
199e0     A8 00 A0 FD | 	call	#pushregs_
199e4     58 F1 07 F1 | 	add	ptra, #344
199e8     4A 00 00 FF 
199ec     80 E4 05 F1 | 	add	objptr, ##38016
199f0     F2 FE 01 FB | 	rdlong	result3, objptr
199f4     FF FC 01 F6 | 	mov	result2, result3
199f8     01 FC 65 F0 | 	shl	result2, #1
199fc     FF FC 01 F1 | 	add	result2, result3
19a00     02 FC 65 F0 | 	shl	result2, #2
19a04     03 00 00 FF 
19a08     04 E4 85 F1 | 	sub	objptr, ##1540
19a0c     F2 FC 01 F1 | 	add	result2, objptr
19a10     FE FC 01 FB | 	rdlong	result2, result2
19a14     08 4E 05 F1 | 	add	fp, #8
19a18     A7 FC 61 FC | 	wrlong	result2, fp
19a1c                 | ' 
19a1c                 | ' 
19a1c                 | ' numpar=compiledline(lineptr_e).result.uresult
19a1c                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
19a1c     08 4E 85 F1 | 	sub	fp, #8
19a20     01 FC 15 F2 | 	cmp	result2, #1 wc
19a24     47 00 00 FF 
19a28     7C E4 85 F1 | 	sub	objptr, ##36476
19a2c     14 00 90 CD |  if_b	jmp	#LR__2040
19a30     08 4E 05 F1 | 	add	fp, #8
19a34     A7 FC 01 FB | 	rdlong	result2, fp
19a38     08 4E 85 F1 | 	sub	fp, #8
19a3c     41 FC 15 F2 | 	cmp	result2, #65 wc
19a40     50 00 90 CD |  if_b	jmp	#LR__2041
19a44                 | LR__2040
19a44     00 12 06 F6 | 	mov	arg01, #0
19a48     C4 2B B1 FD | 	call	#__system___getiolock_0606
19a4c     FD 12 02 F6 | 	mov	arg01, result1
19a50     18 CF B0 FD | 	call	#__system___lockmem
19a54     B7 01 00 FF 
19a58     E0 15 06 F6 | 	mov	arg02, ##@LR__5950
19a5c     00 12 06 F6 | 	mov	arg01, #0
19a60     00 16 06 F6 | 	mov	arg03, #0
19a64     FC DB B0 FD | 	call	#__system___basic_print_string
19a68     00 12 06 F6 | 	mov	arg01, #0
19a6c     A0 2B B1 FD | 	call	#__system___getiolock_0606
19a70     FD 00 68 FC | 	wrlong	#0, result1
19a74     50 00 00 FF 
19a78     F0 E4 05 F1 | 	add	objptr, ##41200
19a7c     F2 14 02 FB | 	rdlong	arg02, objptr
19a80     50 00 00 FF 
19a84     F0 E4 85 F1 | 	sub	objptr, ##41200
19a88     27 12 06 F6 | 	mov	arg01, #39
19a8c     EC 94 B0 FD | 	call	#_printerror
19a90     D0 0C 90 FD | 	jmp	#LR__2091
19a94                 | LR__2041
19a94     08 4E 05 F1 | 	add	fp, #8
19a98     A7 16 02 FB | 	rdlong	arg03, fp
19a9c     01 16 86 F1 | 	sub	arg03, #1
19aa0     28 4F 05 F1 | 	add	fp, #296
19aa4     A7 16 62 FC | 	wrlong	arg03, fp
19aa8     30 4F 85 F1 | 	sub	fp, #304
19aac                 | ' i=numpar-1
19aac                 | ' if readline="" then readline=read_next_line() ': print readline
19aac     52 00 00 FF 
19ab0     DC E4 05 F1 | 	add	objptr, ##42204
19ab4     F2 12 02 FB | 	rdlong	arg01, objptr
19ab8     52 00 00 FF 
19abc     DC E4 85 F1 | 	sub	objptr, ##42204
19ac0     B7 01 00 FF 
19ac4     EA 15 06 F6 | 	mov	arg02, ##@LR__5951
19ac8     C8 CE B0 FD | 	call	#__system___string_cmp
19acc     00 FA 0D F2 | 	cmp	result1, #0 wz
19ad0     18 00 90 5D |  if_ne	jmp	#LR__2042
19ad4     0C FD BF FD | 	call	#_read_next_line
19ad8     52 00 00 FF 
19adc     DC E4 05 F1 | 	add	objptr, ##42204
19ae0     F2 FA 61 FC | 	wrlong	result1, objptr
19ae4     52 00 00 FF 
19ae8     DC E4 85 F1 | 	sub	objptr, ##42204
19aec                 | LR__2042
19aec                 | ' if readline="" then printerror(55,runheader(0)) :return
19aec     52 00 00 FF 
19af0     DC E4 05 F1 | 	add	objptr, ##42204
19af4     F2 12 02 FB | 	rdlong	arg01, objptr
19af8     52 00 00 FF 
19afc     DC E4 85 F1 | 	sub	objptr, ##42204
19b00     B7 01 00 FF 
19b04     EB 15 06 F6 | 	mov	arg02, ##@LR__5952
19b08     88 CE B0 FD | 	call	#__system___string_cmp
19b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
19b10     20 00 90 5D |  if_ne	jmp	#LR__2043
19b14     50 00 00 FF 
19b18     F0 E4 05 F1 | 	add	objptr, ##41200
19b1c     F2 14 02 FB | 	rdlong	arg02, objptr
19b20     50 00 00 FF 
19b24     F0 E4 85 F1 | 	sub	objptr, ##41200
19b28     37 12 06 F6 | 	mov	arg01, #55
19b2c     4C 94 B0 FD | 	call	#_printerror
19b30     30 0C 90 FD | 	jmp	#LR__2091
19b34                 | LR__2043
19b34     34 4F 05 F1 | 	add	fp, #308
19b38     A7 00 68 FC | 	wrlong	#0, fp
19b3c     2C 4F 85 F1 | 	sub	fp, #300
19b40     A7 26 02 FB | 	rdlong	local01, fp
19b44     01 26 86 F1 | 	sub	local01, #1
19b48     28 4F 05 F1 | 	add	fp, #296
19b4c     A7 26 62 FC | 	wrlong	local01, fp
19b50     30 4F 85 F1 | 	sub	fp, #304
19b54                 | ' j=0
19b54                 | ' i=numpar-1
19b54                 | ' do
19b54                 | LR__2044
19b54                 | '   do
19b54                 | LR__2045
19b54     52 00 00 FF 
19b58     DC E4 05 F1 | 	add	objptr, ##42204
19b5c     F2 14 02 FB | 	rdlong	arg02, objptr
19b60     52 00 00 FF 
19b64     DC E4 85 F1 | 	sub	objptr, ##42204
19b68     B7 01 00 FF 
19b6c     EC 17 06 F6 | 	mov	arg03, ##@LR__5953
19b70     01 12 06 F6 | 	mov	arg01, #1
19b74     BC F3 B0 FD | 	call	#__system__Instr
19b78     0C 4E 05 F1 | 	add	fp, #12
19b7c     A7 FA 61 FC | 	wrlong	result1, fp
19b80                 | '     comma=instr(1,readline,"'") : if comma>0 then readline=left$(readline,comma-1) ' allows comments in data
19b80     0C 4E 85 F1 | 	sub	fp, #12
19b84     01 FA 15 F2 | 	cmp	result1, #1 wc
19b88     3C 00 90 CD |  if_b	jmp	#LR__2046
19b8c     52 00 00 FF 
19b90     DC E4 05 F1 | 	add	objptr, ##42204
19b94     F2 12 02 FB | 	rdlong	arg01, objptr
19b98     52 00 00 FF 
19b9c     DC E4 85 F1 | 	sub	objptr, ##42204
19ba0     0C 4E 05 F1 | 	add	fp, #12
19ba4     A7 14 02 FB | 	rdlong	arg02, fp
19ba8     0C 4E 85 F1 | 	sub	fp, #12
19bac     01 14 86 F1 | 	sub	arg02, #1
19bb0     38 EE B0 FD | 	call	#__system__Left_S
19bb4     52 00 00 FF 
19bb8     DC E4 05 F1 | 	add	objptr, ##42204
19bbc     F2 FA 61 FC | 	wrlong	result1, objptr
19bc0     52 00 00 FF 
19bc4     DC E4 85 F1 | 	sub	objptr, ##42204
19bc8                 | LR__2046
19bc8     52 00 00 FF 
19bcc     DC E4 05 F1 | 	add	objptr, ##42204
19bd0     F2 14 02 FB | 	rdlong	arg02, objptr
19bd4     52 00 00 FF 
19bd8     DC E4 85 F1 | 	sub	objptr, ##42204
19bdc     B7 01 00 FF 
19be0     EE 17 06 F6 | 	mov	arg03, ##@LR__5954
19be4     01 12 06 F6 | 	mov	arg01, #1
19be8     48 F3 B0 FD | 	call	#__system__Instr
19bec     0C 4E 05 F1 | 	add	fp, #12
19bf0     A7 FA 61 FC | 	wrlong	result1, fp
19bf4                 | '     comma=instr(1,readline,",")  
19bf4                 | '       if comma>0  then 
19bf4     0C 4E 85 F1 | 	sub	fp, #12
19bf8     01 FA 15 F2 | 	cmp	result1, #1 wc
19bfc     98 00 90 CD |  if_b	jmp	#LR__2049
19c00     52 00 00 FF 
19c04     DC E4 05 F1 | 	add	objptr, ##42204
19c08     F2 12 02 FB | 	rdlong	arg01, objptr
19c0c     52 00 00 FF 
19c10     DC E4 85 F1 | 	sub	objptr, ##42204
19c14     0C 4E 05 F1 | 	add	fp, #12
19c18     A7 14 02 FB | 	rdlong	arg02, fp
19c1c     0C 4E 85 F1 | 	sub	fp, #12
19c20     01 14 86 F1 | 	sub	arg02, #1
19c24     C4 ED B0 FD | 	call	#__system__Left_S
19c28     04 4E 05 F1 | 	add	fp, #4
19c2c     A7 FA 61 FC | 	wrlong	result1, fp
19c30     04 4E 85 F1 | 	sub	fp, #4
19c34     52 00 00 FF 
19c38     DC E4 05 F1 | 	add	objptr, ##42204
19c3c     F2 12 02 FB | 	rdlong	arg01, objptr
19c40     09 27 02 F6 | 	mov	local01, arg01
19c44     52 00 00 FF 
19c48     DC E4 85 F1 | 	sub	objptr, ##42204
19c4c     09 29 02 F6 | 	mov	local02, arg01
19c50     97 06 48 FB | 	callpa	#(@LR__2048-@LR__2047)>>2,fcache_load_ptr_
19c54                 | LR__2047
19c54     14 FB C9 FA | 	rdbyte	result1, local02 wz
19c58     01 28 06 51 |  if_ne	add	local02, #1
19c5c     F4 FF 9F 5D |  if_ne	jmp	#LR__2047
19c60                 | LR__2048
19c60     09 29 82 F1 | 	sub	local02, arg01
19c64     14 15 02 F6 | 	mov	arg02, local02
19c68     0C 4E 05 F1 | 	add	fp, #12
19c6c     A7 16 02 FB | 	rdlong	arg03, fp
19c70     0C 4E 85 F1 | 	sub	fp, #12
19c74     0B 15 82 F1 | 	sub	arg02, arg03
19c78     13 13 02 F6 | 	mov	arg01, local01
19c7c     F4 ED B0 FD | 	call	#__system__Right_S
19c80     52 00 00 FF 
19c84     DC E4 05 F1 | 	add	objptr, ##42204
19c88     F2 FA 61 FC | 	wrlong	result1, objptr
19c8c     52 00 00 FF 
19c90     DC E4 85 F1 | 	sub	objptr, ##42204
19c94     48 00 90 FD | 	jmp	#LR__2050
19c98                 | LR__2049
19c98     52 00 00 FF 
19c9c     DC E4 05 F1 | 	add	objptr, ##42204
19ca0     F2 12 02 FB | 	rdlong	arg01, objptr
19ca4     52 00 00 FF 
19ca8     DC E4 85 F1 | 	sub	objptr, ##42204
19cac     CC F1 B0 FD | 	call	#__system__RTrim_S
19cb0     FD 12 02 F6 | 	mov	arg01, result1
19cb4     04 F1 B0 FD | 	call	#__system__LTrim_S
19cb8     04 4E 05 F1 | 	add	fp, #4
19cbc     A7 FA 61 FC | 	wrlong	result1, fp
19cc0     04 4E 85 F1 | 	sub	fp, #4
19cc4     B7 01 00 FF 
19cc8     F0 27 06 F6 | 	mov	local01, ##@LR__5955
19ccc     52 00 00 FF 
19cd0     DC E4 05 F1 | 	add	objptr, ##42204
19cd4     F2 26 62 FC | 	wrlong	local01, objptr
19cd8     52 00 00 FF 
19cdc     DC E4 85 F1 | 	sub	objptr, ##42204
19ce0                 | LR__2050
19ce0                 | '      
19ce0                 | '      if part$<>"" then j=j+1
19ce0     04 4E 05 F1 | 	add	fp, #4
19ce4     A7 12 02 FB | 	rdlong	arg01, fp
19ce8     04 4E 85 F1 | 	sub	fp, #4
19cec     B7 01 00 FF 
19cf0     F1 15 06 F6 | 	mov	arg02, ##@LR__5956
19cf4     9C CC B0 FD | 	call	#__system___string_cmp
19cf8     00 FA 0D F2 | 	cmp	result1, #0 wz
19cfc     34 4F 05 51 |  if_ne	add	fp, #308
19d00     A7 26 02 5B |  if_ne	rdlong	local01, fp
19d04     01 26 06 51 |  if_ne	add	local01, #1
19d08     A7 26 62 5C |  if_ne	wrlong	local01, fp
19d0c     34 4F 85 51 |  if_ne	sub	fp, #308
19d10     30 4F 05 F1 | 	add	fp, #304
19d14     A7 26 02 FB | 	rdlong	local01, fp
19d18     02 26 66 F0 | 	shl	local01, #2
19d1c     04 4F 85 F1 | 	sub	fp, #260
19d20     A7 26 02 F1 | 	add	local01, fp
19d24     28 4E 85 F1 | 	sub	fp, #40
19d28     A7 FA 01 FB | 	rdlong	result1, fp
19d2c     13 FB 61 FC | 	wrlong	result1, local01
19d30     2C 4F 05 F1 | 	add	fp, #300
19d34     A7 26 02 FB | 	rdlong	local01, fp
19d38     01 26 86 F1 | 	sub	local01, #1
19d3c     A7 26 62 FC | 	wrlong	local01, fp
19d40     30 4F 85 F1 | 	sub	fp, #304
19d44                 | '      args(i)=part$  
19d44                 | '      i=i-1
19d44                 | '     if readline="" then readline=read_next_line() 
19d44     52 00 00 FF 
19d48     DC E4 05 F1 | 	add	objptr, ##42204
19d4c     F2 12 02 FB | 	rdlong	arg01, objptr
19d50     52 00 00 FF 
19d54     DC E4 85 F1 | 	sub	objptr, ##42204
19d58     B7 01 00 FF 
19d5c     F2 15 06 F6 | 	mov	arg02, ##@LR__5957
19d60     30 CC B0 FD | 	call	#__system___string_cmp
19d64     00 FA 0D F2 | 	cmp	result1, #0 wz
19d68     18 00 90 5D |  if_ne	jmp	#LR__2051
19d6c     74 FA BF FD | 	call	#_read_next_line
19d70     52 00 00 FF 
19d74     DC E4 05 F1 | 	add	objptr, ##42204
19d78     F2 FA 61 FC | 	wrlong	result1, objptr
19d7c     52 00 00 FF 
19d80     DC E4 85 F1 | 	sub	objptr, ##42204
19d84                 | LR__2051
19d84     30 4F 05 F1 | 	add	fp, #304
19d88     A7 26 02 FB | 	rdlong	local01, fp
19d8c     30 4F 85 F1 | 	sub	fp, #304
19d90     00 26 56 F2 | 	cmps	local01, #0 wc
19d94     28 00 90 CD |  if_b	jmp	#LR__2052
19d98     52 00 00 FF 
19d9c     DC E4 05 F1 | 	add	objptr, ##42204
19da0     F2 12 02 FB | 	rdlong	arg01, objptr
19da4     52 00 00 FF 
19da8     DC E4 85 F1 | 	sub	objptr, ##42204
19dac     B7 01 00 FF 
19db0     F3 15 06 F6 | 	mov	arg02, ##@LR__5958
19db4     DC CB B0 FD | 	call	#__system___string_cmp
19db8     00 FA 0D F2 | 	cmp	result1, #0 wz
19dbc     94 FD 9F 5D |  if_ne	jmp	#LR__2045
19dc0                 | LR__2052
19dc0     30 4F 05 F1 | 	add	fp, #304
19dc4     A7 26 02 FB | 	rdlong	local01, fp
19dc8     30 4F 85 F1 | 	sub	fp, #304
19dcc     00 26 56 F2 | 	cmps	local01, #0 wc
19dd0     80 FD 9F 3D |  if_ae	jmp	#LR__2044
19dd4                 | ' if j<numpar then printerror(55,runheader(0))
19dd4     34 4F 05 F1 | 	add	fp, #308
19dd8     A7 26 02 FB | 	rdlong	local01, fp
19ddc     2C 4F 85 F1 | 	sub	fp, #300
19de0     A7 16 02 FB | 	rdlong	arg03, fp
19de4     08 4E 85 F1 | 	sub	fp, #8
19de8     0B 27 52 F2 | 	cmps	local01, arg03 wc
19dec     50 00 00 CF 
19df0     F0 E4 05 C1 |  if_b	add	objptr, ##41200
19df4     F2 14 02 CB |  if_b	rdlong	arg02, objptr
19df8     50 00 00 CF 
19dfc     F0 E4 85 C1 |  if_b	sub	objptr, ##41200
19e00     37 12 06 C6 |  if_b	mov	arg01, #55
19e04     74 91 B0 CD |  if_b	call	#_printerror
19e08                 | ' 
19e08                 | ' for i=0 to numpar-1
19e08     30 4F 05 F1 | 	add	fp, #304
19e0c     A7 00 68 FC | 	wrlong	#0, fp
19e10     28 4F 85 F1 | 	sub	fp, #296
19e14     A7 2A 02 FB | 	rdlong	local03, fp
19e18     08 4E 85 F1 | 	sub	fp, #8
19e1c                 | LR__2053
19e1c     30 4F 05 F1 | 	add	fp, #304
19e20     A7 2C 02 FB | 	rdlong	local04, fp
19e24     30 4F 85 F1 | 	sub	fp, #304
19e28     16 27 02 F6 | 	mov	local01, local04
19e2c     15 27 52 F2 | 	cmps	local01, local03 wc
19e30     30 09 90 3D |  if_ae	jmp	#LR__2090
19e34                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
19e34     30 4F 05 F1 | 	add	fp, #304
19e38     A7 16 02 FB | 	rdlong	arg03, fp
19e3c     02 16 66 F0 | 	shl	arg03, #2
19e40     04 4F 85 F1 | 	sub	fp, #260
19e44     A7 16 02 F1 | 	add	arg03, fp
19e48     0B 13 02 FB | 	rdlong	arg01, arg03
19e4c     2C 4E 85 F1 | 	sub	fp, #44
19e50     F8 C9 BE FD | 	call	#_isnum
19e54     FD 2E 02 F6 | 	mov	local05, result1
19e58     30 4F 05 F1 | 	add	fp, #304
19e5c     A7 16 02 FB | 	rdlong	arg03, fp
19e60     02 16 66 F0 | 	shl	arg03, #2
19e64     04 4F 85 F1 | 	sub	fp, #260
19e68     A7 30 02 F6 | 	mov	local06, fp
19e6c     A7 16 02 F1 | 	add	arg03, fp
19e70     0B 13 02 FB | 	rdlong	arg01, arg03
19e74     2C 4E 85 F1 | 	sub	fp, #44
19e78     BC CD BE FD | 	call	#_isint
19e7c     FD 2E 2A F5 | 	andn	local05, result1 wz
19e80     52 00 00 5F 
19e84     10 E5 05 51 |  if_ne	add	objptr, ##42256
19e88     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
19e8c     52 00 00 5F 
19e90     10 E5 85 51 |  if_ne	sub	objptr, ##42256
19e94                 | '   if isint(args(i)) then r=result_int 
19e94     30 4F 05 F1 | 	add	fp, #304
19e98     A7 2E 02 FB | 	rdlong	local05, fp
19e9c     02 2E 66 F0 | 	shl	local05, #2
19ea0     04 4F 85 F1 | 	sub	fp, #260
19ea4     A7 2E 02 F1 | 	add	local05, fp
19ea8     17 13 02 FB | 	rdlong	arg01, local05
19eac     2C 4E 85 F1 | 	sub	fp, #44
19eb0     84 CD BE FD | 	call	#_isint
19eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
19eb8     52 00 00 5F 
19ebc     10 E5 05 51 |  if_ne	add	objptr, ##42256
19ec0     F2 38 68 5C |  if_ne	wrlong	#28, objptr
19ec4     52 00 00 5F 
19ec8     10 E5 85 51 |  if_ne	sub	objptr, ##42256
19ecc                 | '   if isdec(args(i)) then r=result_uint 
19ecc     30 4F 05 F1 | 	add	fp, #304
19ed0     A7 2E 02 FB | 	rdlong	local05, fp
19ed4     02 2E 66 F0 | 	shl	local05, #2
19ed8     04 4F 85 F1 | 	sub	fp, #260
19edc     A7 2E 02 F1 | 	add	local05, fp
19ee0     17 13 02 FB | 	rdlong	arg01, local05
19ee4     2C 4E 85 F1 | 	sub	fp, #44
19ee8     F0 CF BE FD | 	call	#_isdec
19eec     00 FA 0D F2 | 	cmp	result1, #0 wz
19ef0     52 00 00 5F 
19ef4     10 E5 05 51 |  if_ne	add	objptr, ##42256
19ef8     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
19efc     52 00 00 5F 
19f00     10 E5 85 51 |  if_ne	sub	objptr, ##42256
19f04                 | '   if not isnum(args(i)) then 
19f04     30 4F 05 F1 | 	add	fp, #304
19f08     A7 2E 02 FB | 	rdlong	local05, fp
19f0c     02 2E 66 F0 | 	shl	local05, #2
19f10     04 4F 85 F1 | 	sub	fp, #260
19f14     A7 2E 02 F1 | 	add	local05, fp
19f18     17 13 02 FB | 	rdlong	arg01, local05
19f1c     2C 4E 85 F1 | 	sub	fp, #44
19f20     28 C9 BE FD | 	call	#_isnum
19f24     FD 2E 22 F6 | 	not	local05, result1
19f28     00 2E 0E F2 | 	cmp	local05, #0 wz
19f2c     4C 01 90 AD |  if_e	jmp	#LR__2058
19f30     52 00 00 FF 
19f34     10 E5 05 F1 | 	add	objptr, ##42256
19f38     F2 56 68 FC | 	wrlong	#43, objptr
19f3c     52 00 00 FF 
19f40     10 E5 85 F1 | 	sub	objptr, ##42256
19f44     30 4F 05 F1 | 	add	fp, #304
19f48     A7 16 02 FB | 	rdlong	arg03, fp
19f4c     02 16 66 F0 | 	shl	arg03, #2
19f50     04 4F 85 F1 | 	sub	fp, #260
19f54     A7 16 02 F1 | 	add	arg03, fp
19f58     0B 13 02 FB | 	rdlong	arg01, arg03
19f5c     2C 4E 85 F1 | 	sub	fp, #44
19f60     09 29 02 F6 | 	mov	local02, arg01
19f64     97 06 48 FB | 	callpa	#(@LR__2055-@LR__2054)>>2,fcache_load_ptr_
19f68                 | LR__2054
19f68     14 FB C9 FA | 	rdbyte	result1, local02 wz
19f6c     01 28 06 51 |  if_ne	add	local02, #1
19f70     F4 FF 9F 5D |  if_ne	jmp	#LR__2054
19f74                 | LR__2055
19f74     09 29 82 F1 | 	sub	local02, arg01
19f78     14 FB 01 F6 | 	mov	result1, local02
19f7c     38 4F 05 F1 | 	add	fp, #312
19f80     A7 FA 61 FC | 	wrlong	result1, fp
19f84     52 00 00 FF 
19f88     98 E4 05 F1 | 	add	objptr, ##42136
19f8c     F2 12 02 FB | 	rdlong	arg01, objptr
19f90     FD 12 82 F1 | 	sub	arg01, result1
19f94     04 12 86 F1 | 	sub	arg01, #4
19f98     03 12 26 F5 | 	andn	arg01, #3
19f9c     F2 12 62 FC | 	wrlong	arg01, objptr
19fa0     52 00 00 FF 
19fa4     98 E4 85 F1 | 	sub	objptr, ##42136
19fa8     A7 14 02 FB | 	rdlong	arg02, fp
19fac     38 4F 85 F1 | 	sub	fp, #312
19fb0     68 91 B0 FD | 	call	#_pslpoke
19fb4                 | '     pslpoke memtop,l
19fb4                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
19fb4     34 4F 05 F1 | 	add	fp, #308
19fb8     A7 02 68 FC | 	wrlong	#1, fp
19fbc     04 4E 05 F1 | 	add	fp, #4
19fc0     A7 32 02 FB | 	rdlong	local07, fp
19fc4     38 4F 85 F1 | 	sub	fp, #312
19fc8     01 32 06 F1 | 	add	local07, #1
19fcc                 | LR__2056
19fcc     34 4F 05 F1 | 	add	fp, #308
19fd0     A7 2E 02 FB | 	rdlong	local05, fp
19fd4     34 4F 85 F1 | 	sub	fp, #308
19fd8     19 2F 52 F2 | 	cmps	local05, local07 wc
19fdc     7C 00 90 3D |  if_ae	jmp	#LR__2057
19fe0     52 00 00 FF 
19fe4     98 E4 05 F1 | 	add	objptr, ##42136
19fe8     F2 30 02 FB | 	rdlong	local06, objptr
19fec     52 00 00 FF 
19ff0     98 E4 85 F1 | 	sub	objptr, ##42136
19ff4     03 30 06 F1 | 	add	local06, #3
19ff8     34 4F 05 F1 | 	add	fp, #308
19ffc     A7 34 02 FB | 	rdlong	local08, fp
1a000     1A 31 02 F1 | 	add	local06, local08
1a004     04 4E 85 F1 | 	sub	fp, #4
1a008     A7 36 02 FB | 	rdlong	local09, fp
1a00c     02 36 66 F0 | 	shl	local09, #2
1a010     04 4F 85 F1 | 	sub	fp, #260
1a014     A7 38 02 F6 | 	mov	local10, fp
1a018     A7 36 02 F1 | 	add	local09, fp
1a01c     1B 13 02 FB | 	rdlong	arg01, local09
1a020     2C 4E 85 F1 | 	sub	fp, #44
1a024     01 3A 06 F6 | 	mov	local11, #1
1a028     1A 15 02 F6 | 	mov	arg02, local08
1a02c     01 16 06 F6 | 	mov	arg03, #1
1a030     D0 EA B0 FD | 	call	#__system__Mid_S
1a034     FD 14 C2 FA | 	rdbyte	arg02, result1
1a038     18 13 02 F6 | 	mov	arg01, local06
1a03c     6C 91 B0 FD | 	call	#_pspoke
1a040     34 4F 05 F1 | 	add	fp, #308
1a044     A7 30 02 FB | 	rdlong	local06, fp
1a048     18 2F 02 F6 | 	mov	local05, local06
1a04c     01 2E 06 F1 | 	add	local05, #1
1a050     A7 2E 62 FC | 	wrlong	local05, fp
1a054     34 4F 85 F1 | 	sub	fp, #308
1a058     70 FF 9F FD | 	jmp	#LR__2056
1a05c                 | LR__2057
1a05c     52 00 00 FF 
1a060     98 E4 05 F1 | 	add	objptr, ##42136
1a064     F2 2E 02 FB | 	rdlong	local05, objptr
1a068     52 00 00 FF 
1a06c     98 E4 85 F1 | 	sub	objptr, ##42136
1a070     10 4E 05 F1 | 	add	fp, #16
1a074     A7 2E 62 FC | 	wrlong	local05, fp
1a078     10 4E 85 F1 | 	sub	fp, #16
1a07c                 | LR__2058
1a07c     5C 35 BF FD | 	call	#_pop
1a080     1C 4E 05 F1 | 	add	fp, #28
1a084     A7 FA 61 FC | 	wrlong	result1, fp
1a088     04 4E 05 F1 | 	add	fp, #4
1a08c     A7 FC 61 FC | 	wrlong	result2, fp
1a090     04 4E 05 F1 | 	add	fp, #4
1a094     A7 FE 61 FC | 	wrlong	result3, fp
1a098                 | '   t1=pop() 
1a098                 | '   if i>=numpar-j then
1a098     1C 4E 85 F1 | 	sub	fp, #28
1a09c     A7 2E 02 FB | 	rdlong	local05, fp
1a0a0     17 3D 02 F6 | 	mov	local12, local05
1a0a4     2C 4F 05 F1 | 	add	fp, #300
1a0a8     A7 3E 02 FB | 	rdlong	local13, fp
1a0ac     1F 41 02 F6 | 	mov	local14, local13
1a0b0     20 3D 82 F1 | 	sub	local12, local14
1a0b4     04 4E 85 F1 | 	sub	fp, #4
1a0b8     A7 42 02 FB | 	rdlong	local15, fp
1a0bc     30 4F 85 F1 | 	sub	fp, #304
1a0c0     21 45 02 F6 | 	mov	local16, local15
1a0c4     1E 45 52 F2 | 	cmps	local16, local12 wc
1a0c8     80 06 90 CD |  if_b	jmp	#LR__2089
1a0cc     20 4E 05 F1 | 	add	fp, #32
1a0d0     A7 3C 02 FB | 	rdlong	local12, fp
1a0d4     0C 4E 85 F1 | 	sub	fp, #12
1a0d8     A7 3C 62 FC | 	wrlong	local12, fp
1a0dc                 | '     vartype=t1.result.twowords(1)
1a0dc                 | '     select case vartype
1a0dc     14 4E 85 F1 | 	sub	fp, #20
1a0e0     1E 47 0A F6 | 	mov	local17, local12 wz
1a0e4     64 00 90 AD |  if_e	jmp	#LR__2059
1a0e8     00 47 0E F2 | 	cmp	local17, #256 wz
1a0ec     6C 00 90 AD |  if_e	jmp	#LR__2060
1a0f0     01 47 0E F2 | 	cmp	local17, #257 wz
1a0f4     74 00 90 AD |  if_e	jmp	#LR__2061
1a0f8     02 47 0E F2 | 	cmp	local17, #258 wz
1a0fc     7C 00 90 AD |  if_e	jmp	#LR__2062
1a100     03 47 0E F2 | 	cmp	local17, #259 wz
1a104     84 00 90 AD |  if_e	jmp	#LR__2063
1a108     04 47 0E F2 | 	cmp	local17, #260 wz
1a10c     8C 00 90 AD |  if_e	jmp	#LR__2064
1a110     05 47 0E F2 | 	cmp	local17, #261 wz
1a114     94 00 90 AD |  if_e	jmp	#LR__2065
1a118     06 47 0E F2 | 	cmp	local17, #262 wz
1a11c     9C 00 90 AD |  if_e	jmp	#LR__2066
1a120     07 47 0E F2 | 	cmp	local17, #263 wz
1a124     A4 00 90 AD |  if_e	jmp	#LR__2067
1a128     08 47 0E F2 | 	cmp	local17, #264 wz
1a12c     AC 00 90 AD |  if_e	jmp	#LR__2068
1a130     09 47 0E F2 | 	cmp	local17, #265 wz
1a134     B4 00 90 AD |  if_e	jmp	#LR__2069
1a138     0A 47 0E F2 | 	cmp	local17, #266 wz
1a13c     BC 00 90 AD |  if_e	jmp	#LR__2070
1a140     0B 47 0E F2 | 	cmp	local17, #267 wz
1a144     C4 00 90 AD |  if_e	jmp	#LR__2071
1a148     D0 00 90 FD | 	jmp	#LR__2072
1a14c                 | LR__2059
1a14c     18 4E 05 F1 | 	add	fp, #24
1a150     A7 18 68 FC | 	wrlong	#12, fp
1a154     18 4E 85 F1 | 	sub	fp, #24
1a158     CC 00 90 FD | 	jmp	#LR__2073
1a15c                 | LR__2060
1a15c     18 4E 05 F1 | 	add	fp, #24
1a160     A7 18 68 FC | 	wrlong	#12, fp
1a164     18 4E 85 F1 | 	sub	fp, #24
1a168     BC 00 90 FD | 	jmp	#LR__2073
1a16c                 | LR__2061
1a16c     18 4E 05 F1 | 	add	fp, #24
1a170     A7 02 68 FC | 	wrlong	#1, fp
1a174     18 4E 85 F1 | 	sub	fp, #24
1a178     AC 00 90 FD | 	jmp	#LR__2073
1a17c                 | LR__2062
1a17c     18 4E 05 F1 | 	add	fp, #24
1a180     A7 02 68 FC | 	wrlong	#1, fp
1a184     18 4E 85 F1 | 	sub	fp, #24
1a188     9C 00 90 FD | 	jmp	#LR__2073
1a18c                 | LR__2063
1a18c     18 4E 05 F1 | 	add	fp, #24
1a190     A7 04 68 FC | 	wrlong	#2, fp
1a194     18 4E 85 F1 | 	sub	fp, #24
1a198     8C 00 90 FD | 	jmp	#LR__2073
1a19c                 | LR__2064
1a19c     18 4E 05 F1 | 	add	fp, #24
1a1a0     A7 04 68 FC | 	wrlong	#2, fp
1a1a4     18 4E 85 F1 | 	sub	fp, #24
1a1a8     7C 00 90 FD | 	jmp	#LR__2073
1a1ac                 | LR__2065
1a1ac     18 4E 05 F1 | 	add	fp, #24
1a1b0     A7 08 68 FC | 	wrlong	#4, fp
1a1b4     18 4E 85 F1 | 	sub	fp, #24
1a1b8     6C 00 90 FD | 	jmp	#LR__2073
1a1bc                 | LR__2066
1a1bc     18 4E 05 F1 | 	add	fp, #24
1a1c0     A7 08 68 FC | 	wrlong	#4, fp
1a1c4     18 4E 85 F1 | 	sub	fp, #24
1a1c8     5C 00 90 FD | 	jmp	#LR__2073
1a1cc                 | LR__2067
1a1cc     18 4E 05 F1 | 	add	fp, #24
1a1d0     A7 10 68 FC | 	wrlong	#8, fp
1a1d4     18 4E 85 F1 | 	sub	fp, #24
1a1d8     4C 00 90 FD | 	jmp	#LR__2073
1a1dc                 | LR__2068
1a1dc     18 4E 05 F1 | 	add	fp, #24
1a1e0     A7 10 68 FC | 	wrlong	#8, fp
1a1e4     18 4E 85 F1 | 	sub	fp, #24
1a1e8     3C 00 90 FD | 	jmp	#LR__2073
1a1ec                 | LR__2069
1a1ec     18 4E 05 F1 | 	add	fp, #24
1a1f0     A7 0C 68 FC | 	wrlong	#6, fp
1a1f4     18 4E 85 F1 | 	sub	fp, #24
1a1f8     2C 00 90 FD | 	jmp	#LR__2073
1a1fc                 | LR__2070
1a1fc     18 4E 05 F1 | 	add	fp, #24
1a200     A7 10 68 FC | 	wrlong	#8, fp
1a204     18 4E 85 F1 | 	sub	fp, #24
1a208     1C 00 90 FD | 	jmp	#LR__2073
1a20c                 | LR__2071
1a20c     18 4E 05 F1 | 	add	fp, #24
1a210     A7 0A 68 FC | 	wrlong	#5, fp
1a214     18 4E 85 F1 | 	sub	fp, #24
1a218     0C 00 90 FD | 	jmp	#LR__2073
1a21c                 | LR__2072
1a21c     18 4E 05 F1 | 	add	fp, #24
1a220     A7 18 68 FC | 	wrlong	#12, fp
1a224     18 4E 85 F1 | 	sub	fp, #24
1a228                 | LR__2073
1a228                 | '     if esize=12 andalso t1.result.uresult<$80000 then
1a228     18 4E 05 F1 | 	add	fp, #24
1a22c     A7 3C 02 FB | 	rdlong	local12, fp
1a230     18 4E 85 F1 | 	sub	fp, #24
1a234     0C 3C 0E F2 | 	cmp	local12, #12 wz
1a238     74 01 90 5D |  if_ne	jmp	#LR__2078
1a23c     1C 4E 05 F1 | 	add	fp, #28
1a240     A7 3E 02 FB | 	rdlong	local13, fp
1a244     1C 4E 85 F1 | 	sub	fp, #28
1a248     00 04 00 FF 
1a24c     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1a250     5C 01 90 3D |  if_ae	jmp	#LR__2078
1a254                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
1a254     52 00 00 FF 
1a258     10 E5 05 F1 | 	add	objptr, ##42256
1a25c     F2 3C 02 FB | 	rdlong	local12, objptr
1a260     52 00 00 FF 
1a264     10 E5 85 F1 | 	sub	objptr, ##42256
1a268     1C 3C 0E F2 | 	cmp	local12, #28 wz
1a26c     38 00 90 5D |  if_ne	jmp	#LR__2074
1a270     1C 4E 05 F1 | 	add	fp, #28
1a274     A7 3C 02 FB | 	rdlong	local12, fp
1a278     14 4F 05 F1 | 	add	fp, #276
1a27c     A7 3E 02 FB | 	rdlong	local13, fp
1a280     1F 45 02 F6 | 	mov	local16, local13
1a284     02 44 66 F0 | 	shl	local16, #2
1a288     04 4F 85 F1 | 	sub	fp, #260
1a28c     A7 42 02 F6 | 	mov	local15, fp
1a290     A7 44 02 F1 | 	add	local16, fp
1a294     22 13 02 FB | 	rdlong	arg01, local16
1a298     00 14 06 F6 | 	mov	arg02, #0
1a29c     2C 4E 85 F1 | 	sub	fp, #44
1a2a0     BC FB B0 FD | 	call	#__system____builtin_atoi
1a2a4     1E FB 61 FC | 	wrlong	result1, local12
1a2a8                 | LR__2074
1a2a8                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
1a2a8     52 00 00 FF 
1a2ac     10 E5 05 F1 | 	add	objptr, ##42256
1a2b0     F2 3C 02 FB | 	rdlong	local12, objptr
1a2b4     52 00 00 FF 
1a2b8     10 E5 85 F1 | 	sub	objptr, ##42256
1a2bc     1D 3C 0E F2 | 	cmp	local12, #29 wz
1a2c0     38 00 90 5D |  if_ne	jmp	#LR__2075
1a2c4     1C 4E 05 F1 | 	add	fp, #28
1a2c8     A7 3C 02 FB | 	rdlong	local12, fp
1a2cc     14 4F 05 F1 | 	add	fp, #276
1a2d0     A7 3E 02 FB | 	rdlong	local13, fp
1a2d4     1F 45 02 F6 | 	mov	local16, local13
1a2d8     02 44 66 F0 | 	shl	local16, #2
1a2dc     04 4F 85 F1 | 	sub	fp, #260
1a2e0     A7 42 02 F6 | 	mov	local15, fp
1a2e4     A7 44 02 F1 | 	add	local16, fp
1a2e8     22 13 02 FB | 	rdlong	arg01, local16
1a2ec     00 14 06 F6 | 	mov	arg02, #0
1a2f0     2C 4E 85 F1 | 	sub	fp, #44
1a2f4     68 FB B0 FD | 	call	#__system____builtin_atoi
1a2f8     1E FB 61 FC | 	wrlong	result1, local12
1a2fc                 | LR__2075
1a2fc                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
1a2fc     52 00 00 FF 
1a300     10 E5 05 F1 | 	add	objptr, ##42256
1a304     F2 3C 02 FB | 	rdlong	local12, objptr
1a308     52 00 00 FF 
1a30c     10 E5 85 F1 | 	sub	objptr, ##42256
1a310     1E 3C 0E F2 | 	cmp	local12, #30 wz
1a314     3C 00 90 5D |  if_ne	jmp	#LR__2076
1a318     30 4F 05 F1 | 	add	fp, #304
1a31c     A7 3E 02 FB | 	rdlong	local13, fp
1a320     02 3E 66 F0 | 	shl	local13, #2
1a324     04 4F 85 F1 | 	sub	fp, #260
1a328     A7 44 02 F6 | 	mov	local16, fp
1a32c     A7 3E 02 F1 | 	add	local13, fp
1a330     1F 13 02 FB | 	rdlong	arg01, local13
1a334     2C 4E 85 F1 | 	sub	fp, #44
1a338     B8 FC B0 FD | 	call	#__system____builtin_atof
1a33c     28 4E 05 F1 | 	add	fp, #40
1a340     A7 FA 61 FC | 	wrlong	result1, fp
1a344     0C 4E 85 F1 | 	sub	fp, #12
1a348     A7 3C 02 FB | 	rdlong	local12, fp
1a34c     1C 4E 85 F1 | 	sub	fp, #28
1a350     1E FB 61 FC | 	wrlong	result1, local12
1a354                 | LR__2076
1a354                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
1a354     52 00 00 FF 
1a358     10 E5 05 F1 | 	add	objptr, ##42256
1a35c     F2 3C 02 FB | 	rdlong	local12, objptr
1a360     52 00 00 FF 
1a364     10 E5 85 F1 | 	sub	objptr, ##42256
1a368     2B 3C 0E F2 | 	cmp	local12, #43 wz
1a36c     18 00 90 5D |  if_ne	jmp	#LR__2077
1a370     1C 4E 05 F1 | 	add	fp, #28
1a374     A7 12 02 FB | 	rdlong	arg01, fp
1a378     0C 4E 85 F1 | 	sub	fp, #12
1a37c     A7 14 02 FB | 	rdlong	arg02, fp
1a380     10 4E 85 F1 | 	sub	fp, #16
1a384     09 15 62 FC | 	wrlong	arg02, arg01
1a388                 | LR__2077
1a388     1C 4E 05 F1 | 	add	fp, #28
1a38c     A7 12 02 FB | 	rdlong	arg01, fp
1a390     1C 4E 85 F1 | 	sub	fp, #28
1a394     08 12 06 F1 | 	add	arg01, #8
1a398     52 00 00 FF 
1a39c     10 E5 05 F1 | 	add	objptr, ##42256
1a3a0     F2 14 02 FB | 	rdlong	arg02, objptr
1a3a4     52 00 00 FF 
1a3a8     10 E5 85 F1 | 	sub	objptr, ##42256
1a3ac     09 15 62 FC | 	wrlong	arg02, arg01
1a3b0                 | LR__2078
1a3b0                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
1a3b0     18 4E 05 F1 | 	add	fp, #24
1a3b4     A7 3C 02 FB | 	rdlong	local12, fp
1a3b8     18 4E 85 F1 | 	sub	fp, #24
1a3bc     0C 3C 0E F2 | 	cmp	local12, #12 wz
1a3c0     94 01 90 5D |  if_ne	jmp	#LR__2083
1a3c4     1C 4E 05 F1 | 	add	fp, #28
1a3c8     A7 3E 02 FB | 	rdlong	local13, fp
1a3cc     1C 4E 85 F1 | 	sub	fp, #28
1a3d0     00 04 00 FF 
1a3d4     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1a3d8     7C 01 90 CD |  if_b	jmp	#LR__2083
1a3dc                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
1a3dc     52 00 00 FF 
1a3e0     10 E5 05 F1 | 	add	objptr, ##42256
1a3e4     F2 3C 02 FB | 	rdlong	local12, objptr
1a3e8     52 00 00 FF 
1a3ec     10 E5 85 F1 | 	sub	objptr, ##42256
1a3f0     1C 3C 0E F2 | 	cmp	local12, #28 wz
1a3f4     40 00 90 5D |  if_ne	jmp	#LR__2079
1a3f8     1C 4E 05 F1 | 	add	fp, #28
1a3fc     A7 3C 02 FB | 	rdlong	local12, fp
1a400     14 4F 05 F1 | 	add	fp, #276
1a404     A7 3E 02 FB | 	rdlong	local13, fp
1a408     1F 45 02 F6 | 	mov	local16, local13
1a40c     02 44 66 F0 | 	shl	local16, #2
1a410     04 4F 85 F1 | 	sub	fp, #260
1a414     A7 42 02 F6 | 	mov	local15, fp
1a418     A7 44 02 F1 | 	add	local16, fp
1a41c     22 13 02 FB | 	rdlong	arg01, local16
1a420     00 14 06 F6 | 	mov	arg02, #0
1a424     2C 4E 85 F1 | 	sub	fp, #44
1a428     34 FA B0 FD | 	call	#__system____builtin_atoi
1a42c     FD 14 02 F6 | 	mov	arg02, result1
1a430     1E 13 02 F6 | 	mov	arg01, local12
1a434     E4 8C B0 FD | 	call	#_pslpoke
1a438                 | LR__2079
1a438                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
1a438     52 00 00 FF 
1a43c     10 E5 05 F1 | 	add	objptr, ##42256
1a440     F2 3C 02 FB | 	rdlong	local12, objptr
1a444     52 00 00 FF 
1a448     10 E5 85 F1 | 	sub	objptr, ##42256
1a44c     1D 3C 0E F2 | 	cmp	local12, #29 wz
1a450     40 00 90 5D |  if_ne	jmp	#LR__2080
1a454     1C 4E 05 F1 | 	add	fp, #28
1a458     A7 3C 02 FB | 	rdlong	local12, fp
1a45c     14 4F 05 F1 | 	add	fp, #276
1a460     A7 3E 02 FB | 	rdlong	local13, fp
1a464     1F 45 02 F6 | 	mov	local16, local13
1a468     02 44 66 F0 | 	shl	local16, #2
1a46c     04 4F 85 F1 | 	sub	fp, #260
1a470     A7 42 02 F6 | 	mov	local15, fp
1a474     A7 44 02 F1 | 	add	local16, fp
1a478     22 13 02 FB | 	rdlong	arg01, local16
1a47c     00 14 06 F6 | 	mov	arg02, #0
1a480     2C 4E 85 F1 | 	sub	fp, #44
1a484     D8 F9 B0 FD | 	call	#__system____builtin_atoi
1a488     FD 14 02 F6 | 	mov	arg02, result1
1a48c     1E 13 02 F6 | 	mov	arg01, local12
1a490     88 8C B0 FD | 	call	#_pslpoke
1a494                 | LR__2080
1a494                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1a494     52 00 00 FF 
1a498     10 E5 05 F1 | 	add	objptr, ##42256
1a49c     F2 3C 02 FB | 	rdlong	local12, objptr
1a4a0     52 00 00 FF 
1a4a4     10 E5 85 F1 | 	sub	objptr, ##42256
1a4a8     1E 3C 0E F2 | 	cmp	local12, #30 wz
1a4ac     4C 00 90 5D |  if_ne	jmp	#LR__2081
1a4b0     30 4F 05 F1 | 	add	fp, #304
1a4b4     A7 3E 02 FB | 	rdlong	local13, fp
1a4b8     02 3E 66 F0 | 	shl	local13, #2
1a4bc     04 4F 85 F1 | 	sub	fp, #260
1a4c0     A7 44 02 F6 | 	mov	local16, fp
1a4c4     A7 3E 02 F1 | 	add	local13, fp
1a4c8     1F 13 02 FB | 	rdlong	arg01, local13
1a4cc     2C 4E 85 F1 | 	sub	fp, #44
1a4d0     20 FB B0 FD | 	call	#__system____builtin_atof
1a4d4     28 4E 05 F1 | 	add	fp, #40
1a4d8     A7 FA 61 FC | 	wrlong	result1, fp
1a4dc     0C 4E 85 F1 | 	sub	fp, #12
1a4e0     A7 3C 02 FB | 	rdlong	local12, fp
1a4e4     0C 4E 05 F1 | 	add	fp, #12
1a4e8     A7 12 02 F6 | 	mov	arg01, fp
1a4ec     28 4E 85 F1 | 	sub	fp, #40
1a4f0     09 15 02 FB | 	rdlong	arg02, arg01
1a4f4     1E 13 02 F6 | 	mov	arg01, local12
1a4f8     20 8C B0 FD | 	call	#_pslpoke
1a4fc                 | LR__2081
1a4fc                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
1a4fc     52 00 00 FF 
1a500     10 E5 05 F1 | 	add	objptr, ##42256
1a504     F2 3C 02 FB | 	rdlong	local12, objptr
1a508     52 00 00 FF 
1a50c     10 E5 85 F1 | 	sub	objptr, ##42256
1a510     2B 3C 0E F2 | 	cmp	local12, #43 wz
1a514     18 00 90 5D |  if_ne	jmp	#LR__2082
1a518     1C 4E 05 F1 | 	add	fp, #28
1a51c     A7 12 02 FB | 	rdlong	arg01, fp
1a520     0C 4E 85 F1 | 	sub	fp, #12
1a524     A7 14 02 FB | 	rdlong	arg02, fp
1a528     10 4E 85 F1 | 	sub	fp, #16
1a52c     EC 8B B0 FD | 	call	#_pslpoke
1a530                 | LR__2082
1a530     1C 4E 05 F1 | 	add	fp, #28
1a534     A7 12 02 FB | 	rdlong	arg01, fp
1a538     1C 4E 85 F1 | 	sub	fp, #28
1a53c     08 12 06 F1 | 	add	arg01, #8
1a540     52 00 00 FF 
1a544     10 E5 05 F1 | 	add	objptr, ##42256
1a548     F2 14 02 FB | 	rdlong	arg02, objptr
1a54c     52 00 00 FF 
1a550     10 E5 85 F1 | 	sub	objptr, ##42256
1a554     C4 8B B0 FD | 	call	#_pslpoke
1a558                 | LR__2083
1a558                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
1a558     18 4E 05 F1 | 	add	fp, #24
1a55c     A7 3C 02 FB | 	rdlong	local12, fp
1a560     18 4E 85 F1 | 	sub	fp, #24
1a564     05 3C 0E F2 | 	cmp	local12, #5 wz
1a568     52 00 00 AF 
1a56c     10 E5 05 A1 |  if_e	add	objptr, ##42256
1a570     F2 40 02 AB |  if_e	rdlong	local14, objptr
1a574     52 00 00 AF 
1a578     10 E5 85 A1 |  if_e	sub	objptr, ##42256
1a57c     2B 40 0E A2 |  if_e	cmp	local14, #43 wz
1a580     18 00 90 5D |  if_ne	jmp	#LR__2084
1a584     1C 4E 05 F1 | 	add	fp, #28
1a588     A7 12 02 FB | 	rdlong	arg01, fp
1a58c     0C 4E 85 F1 | 	sub	fp, #12
1a590     A7 14 02 FB | 	rdlong	arg02, fp
1a594     10 4E 85 F1 | 	sub	fp, #16
1a598     80 8B B0 FD | 	call	#_pslpoke
1a59c                 | LR__2084
1a59c                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
1a59c     18 4E 05 F1 | 	add	fp, #24
1a5a0     A7 3C 02 FB | 	rdlong	local12, fp
1a5a4     18 4E 85 F1 | 	sub	fp, #24
1a5a8     04 3C 0E F2 | 	cmp	local12, #4 wz
1a5ac     54 00 90 5D |  if_ne	jmp	#LR__2085
1a5b0     52 00 00 FF 
1a5b4     10 E5 05 F1 | 	add	objptr, ##42256
1a5b8     F2 40 02 FB | 	rdlong	local14, objptr
1a5bc     52 00 00 FF 
1a5c0     10 E5 85 F1 | 	sub	objptr, ##42256
1a5c4     2B 40 0E F2 | 	cmp	local14, #43 wz
1a5c8     38 00 90 AD |  if_e	jmp	#LR__2085
1a5cc     1C 4E 05 F1 | 	add	fp, #28
1a5d0     A7 3C 02 FB | 	rdlong	local12, fp
1a5d4     14 4F 05 F1 | 	add	fp, #276
1a5d8     A7 44 02 FB | 	rdlong	local16, fp
1a5dc     02 44 66 F0 | 	shl	local16, #2
1a5e0     04 4F 85 F1 | 	sub	fp, #260
1a5e4     A7 44 02 F1 | 	add	local16, fp
1a5e8     22 13 02 FB | 	rdlong	arg01, local16
1a5ec     00 14 06 F6 | 	mov	arg02, #0
1a5f0     2C 4E 85 F1 | 	sub	fp, #44
1a5f4     68 F8 B0 FD | 	call	#__system____builtin_atoi
1a5f8     FD 14 02 F6 | 	mov	arg02, result1
1a5fc     1E 13 02 F6 | 	mov	arg01, local12
1a600     18 8B B0 FD | 	call	#_pslpoke
1a604                 | LR__2085
1a604                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
1a604     18 4E 05 F1 | 	add	fp, #24
1a608     A7 3C 02 FB | 	rdlong	local12, fp
1a60c     18 4E 85 F1 | 	sub	fp, #24
1a610     02 3C 0E F2 | 	cmp	local12, #2 wz
1a614     54 00 90 5D |  if_ne	jmp	#LR__2086
1a618     52 00 00 FF 
1a61c     10 E5 05 F1 | 	add	objptr, ##42256
1a620     F2 40 02 FB | 	rdlong	local14, objptr
1a624     52 00 00 FF 
1a628     10 E5 85 F1 | 	sub	objptr, ##42256
1a62c     2B 40 0E F2 | 	cmp	local14, #43 wz
1a630     38 00 90 AD |  if_e	jmp	#LR__2086
1a634     1C 4E 05 F1 | 	add	fp, #28
1a638     A7 3C 02 FB | 	rdlong	local12, fp
1a63c     14 4F 05 F1 | 	add	fp, #276
1a640     A7 44 02 FB | 	rdlong	local16, fp
1a644     02 44 66 F0 | 	shl	local16, #2
1a648     04 4F 85 F1 | 	sub	fp, #260
1a64c     A7 44 02 F1 | 	add	local16, fp
1a650     22 13 02 FB | 	rdlong	arg01, local16
1a654     00 14 06 F6 | 	mov	arg02, #0
1a658     2C 4E 85 F1 | 	sub	fp, #44
1a65c     00 F8 B0 FD | 	call	#__system____builtin_atoi
1a660     FD 14 02 F6 | 	mov	arg02, result1
1a664     1E 13 02 F6 | 	mov	arg01, local12
1a668     F8 8A B0 FD | 	call	#_psdpoke
1a66c                 | LR__2086
1a66c                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
1a66c     18 4E 05 F1 | 	add	fp, #24
1a670     A7 3C 02 FB | 	rdlong	local12, fp
1a674     18 4E 85 F1 | 	sub	fp, #24
1a678     01 3C 0E F2 | 	cmp	local12, #1 wz
1a67c     54 00 90 5D |  if_ne	jmp	#LR__2087
1a680     52 00 00 FF 
1a684     10 E5 05 F1 | 	add	objptr, ##42256
1a688     F2 40 02 FB | 	rdlong	local14, objptr
1a68c     52 00 00 FF 
1a690     10 E5 85 F1 | 	sub	objptr, ##42256
1a694     2B 40 0E F2 | 	cmp	local14, #43 wz
1a698     38 00 90 AD |  if_e	jmp	#LR__2087
1a69c     1C 4E 05 F1 | 	add	fp, #28
1a6a0     A7 3C 02 FB | 	rdlong	local12, fp
1a6a4     14 4F 05 F1 | 	add	fp, #276
1a6a8     A7 44 02 FB | 	rdlong	local16, fp
1a6ac     02 44 66 F0 | 	shl	local16, #2
1a6b0     04 4F 85 F1 | 	sub	fp, #260
1a6b4     A7 44 02 F1 | 	add	local16, fp
1a6b8     22 13 02 FB | 	rdlong	arg01, local16
1a6bc     00 14 06 F6 | 	mov	arg02, #0
1a6c0     2C 4E 85 F1 | 	sub	fp, #44
1a6c4     98 F7 B0 FD | 	call	#__system____builtin_atoi
1a6c8     FD 14 02 F6 | 	mov	arg02, result1
1a6cc     1E 13 02 F6 | 	mov	arg01, local12
1a6d0     D8 8A B0 FD | 	call	#_pspoke
1a6d4                 | LR__2087
1a6d4                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1a6d4     18 4E 05 F1 | 	add	fp, #24
1a6d8     A7 3C 02 FB | 	rdlong	local12, fp
1a6dc     18 4E 85 F1 | 	sub	fp, #24
1a6e0     06 3C 0E F2 | 	cmp	local12, #6 wz
1a6e4     64 00 90 5D |  if_ne	jmp	#LR__2088
1a6e8     52 00 00 FF 
1a6ec     10 E5 05 F1 | 	add	objptr, ##42256
1a6f0     F2 40 02 FB | 	rdlong	local14, objptr
1a6f4     52 00 00 FF 
1a6f8     10 E5 85 F1 | 	sub	objptr, ##42256
1a6fc     2B 40 0E F2 | 	cmp	local14, #43 wz
1a700     48 00 90 AD |  if_e	jmp	#LR__2088
1a704     30 4F 05 F1 | 	add	fp, #304
1a708     A7 3E 02 FB | 	rdlong	local13, fp
1a70c     02 3E 66 F0 | 	shl	local13, #2
1a710     04 4F 85 F1 | 	sub	fp, #260
1a714     A7 3E 02 F1 | 	add	local13, fp
1a718     1F 13 02 FB | 	rdlong	arg01, local13
1a71c     2C 4E 85 F1 | 	sub	fp, #44
1a720     D0 F8 B0 FD | 	call	#__system____builtin_atof
1a724     28 4E 05 F1 | 	add	fp, #40
1a728     A7 FA 61 FC | 	wrlong	result1, fp
1a72c     0C 4E 85 F1 | 	sub	fp, #12
1a730     A7 3C 02 FB | 	rdlong	local12, fp
1a734     0C 4E 05 F1 | 	add	fp, #12
1a738     A7 12 02 F6 | 	mov	arg01, fp
1a73c     28 4E 85 F1 | 	sub	fp, #40
1a740     09 15 02 FB | 	rdlong	arg02, arg01
1a744     1E 13 02 F6 | 	mov	arg01, local12
1a748     D0 89 B0 FD | 	call	#_pslpoke
1a74c                 | LR__2088
1a74c                 | LR__2089
1a74c     30 4F 05 F1 | 	add	fp, #304
1a750     A7 40 02 FB | 	rdlong	local14, fp
1a754     01 40 06 F1 | 	add	local14, #1
1a758     A7 40 62 FC | 	wrlong	local14, fp
1a75c     30 4F 85 F1 | 	sub	fp, #304
1a760     B8 F6 9F FD | 	jmp	#LR__2053
1a764                 | LR__2090
1a764                 | LR__2091
1a764     A7 F0 03 F6 | 	mov	ptra, fp
1a768     B2 00 A0 FD | 	call	#popregs_
1a76c                 | _do_read_ret
1a76c     2D 00 64 FD | 	ret
1a770                 | 
1a770                 | ' 
1a770                 | ' '------------------- release
1a770                 | ' 
1a770                 | ' sub do_release
1a770                 | _do_release
1a770     00 4A 05 F6 | 	mov	COUNT_, #0
1a774     A8 00 A0 FD | 	call	#pushregs_
1a778     10 F0 07 F1 | 	add	ptra, #16
1a77c     5C 2E BF FD | 	call	#_pop
1a780     FF 14 02 F6 | 	mov	arg02, result3
1a784     A7 FA 61 FC | 	wrlong	result1, fp
1a788     04 4E 05 F1 | 	add	fp, #4
1a78c     A7 FC 61 FC | 	wrlong	result2, fp
1a790     04 4E 05 F1 | 	add	fp, #4
1a794     A7 14 62 FC | 	wrlong	arg02, fp
1a798     08 4E 85 F1 | 	sub	fp, #8
1a79c     A7 12 02 F6 | 	mov	arg01, fp
1a7a0     1C 30 BF FD | 	call	#_converttoint
1a7a4     0C 4E 05 F1 | 	add	fp, #12
1a7a8     A7 FA 61 FC | 	wrlong	result1, fp
1a7ac                 | ' 
1a7ac                 | ' t1=pop()
1a7ac                 | ' channel=converttoint(t1)
1a7ac                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
1a7ac     0C 4E 85 F1 | 	sub	fp, #12
1a7b0     00 FA 55 F2 | 	cmps	result1, #0 wc
1a7b4     44 00 90 CD |  if_b	jmp	#LR__2100
1a7b8     0C 4E 05 F1 | 	add	fp, #12
1a7bc     A7 14 02 FB | 	rdlong	arg02, fp
1a7c0     0C 4E 85 F1 | 	sub	fp, #12
1a7c4     08 14 56 F2 | 	cmps	arg02, #8 wc
1a7c8     30 00 90 3D |  if_ae	jmp	#LR__2100
1a7cc     37 00 00 FF 
1a7d0     10 E4 05 F1 | 	add	objptr, ##28176
1a7d4     F2 12 02 FB | 	rdlong	arg01, objptr
1a7d8     37 00 00 FF 
1a7dc     10 E4 85 F1 | 	sub	objptr, ##28176
1a7e0     0C 4E 05 F1 | 	add	fp, #12
1a7e4     A7 14 02 FB | 	rdlong	arg02, fp
1a7e8     0C 4E 85 F1 | 	sub	fp, #12
1a7ec     06 14 66 F0 | 	shl	arg02, #6
1a7f0     0A 13 02 F1 | 	add	arg01, arg02
1a7f4     2C 12 06 F1 | 	add	arg01, #44
1a7f8     09 FF 69 FC | 	wrlong	#255, arg01
1a7fc                 | LR__2100
1a7fc     A7 F0 03 F6 | 	mov	ptra, fp
1a800     B2 00 A0 FD | 	call	#popregs_
1a804                 | _do_release_ret
1a804     2D 00 64 FD | 	ret
1a808                 | 
1a808                 | ' 
1a808                 | ' '------------------- restore
1a808                 | ' 
1a808                 | ' sub do_restore()
1a808                 | _do_restore
1a808     4A 00 00 FF 
1a80c     88 E4 05 F1 | 	add	objptr, ##38024
1a810     F2 00 02 FB | 	rdlong	_var01, objptr
1a814     06 00 00 FF 
1a818     A4 E4 05 F1 | 	add	objptr, ##3236
1a81c     F2 00 62 FC | 	wrlong	_var01, objptr
1a820     B7 01 00 FF 
1a824     F4 01 06 F6 | 	mov	_var01, ##@LR__5959
1a828     01 00 00 FF 
1a82c     B0 E5 05 F1 | 	add	objptr, ##944
1a830     F2 00 62 FC | 	wrlong	_var01, objptr
1a834     52 00 00 FF 
1a838     DC E4 85 F1 | 	sub	objptr, ##42204
1a83c                 | _do_restore_ret
1a83c     2D 00 64 FD | 	ret
1a840                 | 
1a840                 | ' 
1a840                 | ' '------------------- return
1a840                 | ' 
1a840                 | ' sub do_return()
1a840                 | _do_return
1a840                 | ' if gosubtop>0 then
1a840     50 00 00 FF 
1a844     34 E5 05 F1 | 	add	objptr, ##41268
1a848     F2 00 02 FB | 	rdlong	_var01, objptr
1a84c     50 00 00 FF 
1a850     34 E5 85 F1 | 	sub	objptr, ##41268
1a854     01 00 56 F2 | 	cmps	_var01, #1 wc
1a858     8C 00 90 CD |  if_b	jmp	#LR__2110
1a85c     50 00 00 FF 
1a860     34 E5 05 F1 | 	add	objptr, ##41268
1a864     F2 00 02 FB | 	rdlong	_var01, objptr
1a868     03 00 66 F0 | 	shl	_var01, #3
1a86c     03 00 00 FF 
1a870     88 E5 85 F1 | 	sub	objptr, ##1928
1a874     F2 00 02 F1 | 	add	_var01, objptr
1a878     00 01 02 FB | 	rdlong	_var01, _var01
1a87c     03 00 00 FF 
1a880     0C E5 05 F1 | 	add	objptr, ##1804
1a884     F2 00 62 FC | 	wrlong	_var01, objptr
1a888     7C E4 05 F1 | 	add	objptr, #124
1a88c     F2 00 02 FB | 	rdlong	_var01, objptr
1a890     03 00 66 F0 | 	shl	_var01, #3
1a894     03 00 00 FF 
1a898     88 E5 85 F1 | 	sub	objptr, ##1928
1a89c     F2 00 02 F1 | 	add	_var01, objptr
1a8a0     04 00 06 F1 | 	add	_var01, #4
1a8a4     00 01 02 FB | 	rdlong	_var01, _var01
1a8a8     03 00 00 FF 
1a8ac     10 E5 05 F1 | 	add	objptr, ##1808
1a8b0     F2 00 62 FC | 	wrlong	_var01, objptr
1a8b4     06 00 00 FF 
1a8b8     40 E4 85 F1 | 	sub	objptr, ##3136
1a8bc     F2 00 02 FB | 	rdlong	_var01, objptr
1a8c0     01 00 86 F1 | 	sub	_var01, #1
1a8c4     04 E4 05 F1 | 	add	objptr, #4
1a8c8     F2 00 62 FC | 	wrlong	_var01, objptr
1a8cc     06 00 00 FF 
1a8d0     B4 E4 05 F1 | 	add	objptr, ##3252
1a8d4     F2 00 02 FB | 	rdlong	_var01, objptr
1a8d8     01 00 86 F1 | 	sub	_var01, #1
1a8dc     F2 00 62 FC | 	wrlong	_var01, objptr
1a8e0     50 00 00 FF 
1a8e4     34 E5 85 F1 | 	sub	objptr, ##41268
1a8e8                 | LR__2110
1a8e8                 | _do_return_ret
1a8e8     2D 00 64 FD | 	ret
1a8ec                 | 
1a8ec                 | ' 
1a8ec                 | ' '------------------- right$
1a8ec                 | ' 
1a8ec                 | ' sub do_right
1a8ec                 | _do_right
1a8ec     00 4A 05 F6 | 	mov	COUNT_, #0
1a8f0     A8 00 A0 FD | 	call	#pushregs_
1a8f4     14 F0 07 F1 | 	add	ptra, #20
1a8f8     4A 00 00 FF 
1a8fc     80 E4 05 F1 | 	add	objptr, ##38016
1a900     F2 16 02 FB | 	rdlong	arg03, objptr
1a904     0B 15 02 F6 | 	mov	arg02, arg03
1a908     01 14 66 F0 | 	shl	arg02, #1
1a90c     0B 15 02 F1 | 	add	arg02, arg03
1a910     02 14 66 F0 | 	shl	arg02, #2
1a914     03 00 00 FF 
1a918     04 E4 85 F1 | 	sub	objptr, ##1540
1a91c     F2 14 02 F1 | 	add	arg02, objptr
1a920     0A 17 02 FB | 	rdlong	arg03, arg02
1a924     0C 4E 05 F1 | 	add	fp, #12
1a928     A7 16 62 FC | 	wrlong	arg03, fp
1a92c                 | ' 
1a92c                 | ' numpar=compiledline(lineptr_e).result.uresult
1a92c                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
1a92c     0C 4E 85 F1 | 	sub	fp, #12
1a930     02 16 0E F2 | 	cmp	arg03, #2 wz
1a934     47 00 00 FF 
1a938     7C E4 85 F1 | 	sub	objptr, ##36476
1a93c     40 00 90 AD |  if_e	jmp	#LR__2120
1a940     00 12 06 F6 | 	mov	arg01, #0
1a944     C8 1C B1 FD | 	call	#__system___getiolock_0606
1a948     FD 12 02 F6 | 	mov	arg01, result1
1a94c     1C C0 B0 FD | 	call	#__system___lockmem
1a950     B7 01 00 FF 
1a954     F5 15 06 F6 | 	mov	arg02, ##@LR__5960
1a958     00 12 06 F6 | 	mov	arg01, #0
1a95c     00 16 06 F6 | 	mov	arg03, #0
1a960     00 CD B0 FD | 	call	#__system___basic_print_string
1a964     00 12 06 F6 | 	mov	arg01, #0
1a968     A4 1C B1 FD | 	call	#__system___getiolock_0606
1a96c     FD 00 68 FC | 	wrlong	#0, result1
1a970     27 12 06 F6 | 	mov	arg01, #39
1a974     00 14 06 F6 | 	mov	arg02, #0
1a978     00 86 B0 FD | 	call	#_printerror
1a97c     EC 00 90 FD | 	jmp	#LR__2123
1a980                 | LR__2120
1a980     58 2C BF FD | 	call	#_pop
1a984     FF 16 02 F6 | 	mov	arg03, result3
1a988     A7 FA 61 FC | 	wrlong	result1, fp
1a98c     04 4E 05 F1 | 	add	fp, #4
1a990     A7 FC 61 FC | 	wrlong	result2, fp
1a994     04 4E 05 F1 | 	add	fp, #4
1a998     A7 16 62 FC | 	wrlong	arg03, fp
1a99c     08 4E 85 F1 | 	sub	fp, #8
1a9a0     A7 12 02 F6 | 	mov	arg01, fp
1a9a4     18 2E BF FD | 	call	#_converttoint
1a9a8     FD 16 02 F6 | 	mov	arg03, result1
1a9ac     10 4E 05 F1 | 	add	fp, #16
1a9b0     A7 16 62 FC | 	wrlong	arg03, fp
1a9b4     10 4E 85 F1 | 	sub	fp, #16
1a9b8     20 2C BF FD | 	call	#_pop
1a9bc     FF 16 02 F6 | 	mov	arg03, result3
1a9c0     A7 FA 61 FC | 	wrlong	result1, fp
1a9c4     04 4E 05 F1 | 	add	fp, #4
1a9c8     A7 FC 61 FC | 	wrlong	result2, fp
1a9cc     04 4E 05 F1 | 	add	fp, #4
1a9d0     A7 16 62 FC | 	wrlong	arg03, fp
1a9d4                 | ' t1=pop() : arg=converttoint(t1)
1a9d4                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1a9d4     08 4E 85 F1 | 	sub	fp, #8
1a9d8     2B 16 0E F2 | 	cmp	arg03, #43 wz
1a9dc     18 00 90 5D |  if_ne	jmp	#LR__2121
1a9e0     A7 12 02 FB | 	rdlong	arg01, fp
1a9e4     6C 2D BF FD | 	call	#_convertstring
1a9e8     A7 FA 61 FC | 	wrlong	result1, fp
1a9ec     08 4E 05 F1 | 	add	fp, #8
1a9f0     A7 3E 68 FC | 	wrlong	#31, fp
1a9f4     08 4E 85 F1 | 	sub	fp, #8
1a9f8                 | LR__2121
1a9f8                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1a9f8     08 4E 05 F1 | 	add	fp, #8
1a9fc     A7 16 02 FB | 	rdlong	arg03, fp
1aa00     08 4E 85 F1 | 	sub	fp, #8
1aa04     1F 16 0E F2 | 	cmp	arg03, #31 wz
1aa08     40 00 90 AD |  if_e	jmp	#LR__2122
1aa0c     00 12 06 F6 | 	mov	arg01, #0
1aa10     FC 1B B1 FD | 	call	#__system___getiolock_0606
1aa14     FD 12 02 F6 | 	mov	arg01, result1
1aa18     50 BF B0 FD | 	call	#__system___lockmem
1aa1c     B7 01 00 FF 
1aa20     FE 15 06 F6 | 	mov	arg02, ##@LR__5961
1aa24     00 12 06 F6 | 	mov	arg01, #0
1aa28     00 16 06 F6 | 	mov	arg03, #0
1aa2c     34 CC B0 FD | 	call	#__system___basic_print_string
1aa30     00 12 06 F6 | 	mov	arg01, #0
1aa34     D8 1B B1 FD | 	call	#__system___getiolock_0606
1aa38     FD 00 68 FC | 	wrlong	#0, result1
1aa3c     0F 12 06 F6 | 	mov	arg01, #15
1aa40     00 14 06 F6 | 	mov	arg02, #0
1aa44     34 85 B0 FD | 	call	#_printerror
1aa48     20 00 90 FD | 	jmp	#LR__2123
1aa4c                 | LR__2122
1aa4c     A7 12 02 FB | 	rdlong	arg01, fp
1aa50     10 4E 05 F1 | 	add	fp, #16
1aa54     A7 14 02 FB | 	rdlong	arg02, fp
1aa58     10 4E 85 F1 | 	sub	fp, #16
1aa5c     14 E0 B0 FD | 	call	#__system__Right_S
1aa60     A7 FA 61 FC | 	wrlong	result1, fp
1aa64     A7 12 02 F6 | 	mov	arg01, fp
1aa68     08 2C BF FD | 	call	#_push
1aa6c                 | LR__2123
1aa6c     A7 F0 03 F6 | 	mov	ptra, fp
1aa70     B2 00 A0 FD | 	call	#popregs_
1aa74                 | _do_right_ret
1aa74     2D 00 64 FD | 	ret
1aa78                 | 
1aa78                 | ' 
1aa78                 | ' '------------------- rnd
1aa78                 | ' 
1aa78                 | ' sub do_rnd
1aa78                 | _do_rnd
1aa78     01 4A 05 F6 | 	mov	COUNT_, #1
1aa7c     A8 00 A0 FD | 	call	#pushregs_
1aa80     10 F0 07 F1 | 	add	ptra, #16
1aa84     4A 00 00 FF 
1aa88     80 E4 05 F1 | 	add	objptr, ##38016
1aa8c     F2 26 02 FB | 	rdlong	local01, objptr
1aa90     13 17 02 F6 | 	mov	arg03, local01
1aa94     01 16 66 F0 | 	shl	arg03, #1
1aa98     13 17 02 F1 | 	add	arg03, local01
1aa9c     02 16 66 F0 | 	shl	arg03, #2
1aaa0     03 00 00 FF 
1aaa4     04 E4 85 F1 | 	sub	objptr, ##1540
1aaa8     F2 16 02 F1 | 	add	arg03, objptr
1aaac     0B 17 02 FB | 	rdlong	arg03, arg03
1aab0     0C 4E 05 F1 | 	add	fp, #12
1aab4     A7 16 62 FC | 	wrlong	arg03, fp
1aab8                 | ' 
1aab8                 | ' numpar=compiledline(lineptr_e).result.uresult
1aab8                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1aab8     0C 4E 85 F1 | 	sub	fp, #12
1aabc     02 16 16 F2 | 	cmp	arg03, #2 wc
1aac0     47 00 00 FF 
1aac4     7C E4 85 F1 | 	sub	objptr, ##36476
1aac8     40 00 90 CD |  if_b	jmp	#LR__2130
1aacc     00 12 06 F6 | 	mov	arg01, #0
1aad0     3C 1B B1 FD | 	call	#__system___getiolock_0606
1aad4     FD 12 02 F6 | 	mov	arg01, result1
1aad8     90 BE B0 FD | 	call	#__system___lockmem
1aadc     B8 01 00 FF 
1aae0     07 14 06 F6 | 	mov	arg02, ##@LR__5962
1aae4     00 12 06 F6 | 	mov	arg01, #0
1aae8     00 16 06 F6 | 	mov	arg03, #0
1aaec     74 CB B0 FD | 	call	#__system___basic_print_string
1aaf0     00 12 06 F6 | 	mov	arg01, #0
1aaf4     18 1B B1 FD | 	call	#__system___getiolock_0606
1aaf8     FD 00 68 FC | 	wrlong	#0, result1
1aafc     27 12 06 F6 | 	mov	arg01, #39
1ab00     00 14 06 F6 | 	mov	arg02, #0
1ab04     74 84 B0 FD | 	call	#_printerror
1ab08     30 01 90 FD | 	jmp	#LR__2137
1ab0c                 | LR__2130
1ab0c                 | ' if numpar=0 then
1ab0c     0C 4E 05 F1 | 	add	fp, #12
1ab10     A7 FE 09 FB | 	rdlong	result3, fp wz
1ab14     0C 4E 85 F1 | 	sub	fp, #12
1ab18     20 00 90 5D |  if_ne	jmp	#LR__2131
1ab1c     08 4E 05 F1 | 	add	fp, #8
1ab20     A7 3A 68 FC | 	wrlong	#29, fp
1ab24     08 4E 85 F1 | 	sub	fp, #8
1ab28     1B FA 61 FD | 	getrnd	result1
1ab2c     A7 FA 61 FC | 	wrlong	result1, fp
1ab30     A7 12 02 F6 | 	mov	arg01, fp
1ab34     3C 2B BF FD | 	call	#_push
1ab38     00 01 90 FD | 	jmp	#LR__2136
1ab3c                 | LR__2131
1ab3c     9C 2A BF FD | 	call	#_pop
1ab40     A7 FA 61 FC | 	wrlong	result1, fp
1ab44     04 4E 05 F1 | 	add	fp, #4
1ab48     A7 FC 61 FC | 	wrlong	result2, fp
1ab4c     04 4E 05 F1 | 	add	fp, #4
1ab50     A7 FE 61 FC | 	wrlong	result3, fp
1ab54                 | '   t1=pop()
1ab54                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1ab54     08 4E 85 F1 | 	sub	fp, #8
1ab58     1C FE 0D F2 | 	cmp	result3, #28 wz
1ab5c     08 4E 05 51 |  if_ne	add	fp, #8
1ab60     A7 26 02 5B |  if_ne	rdlong	local01, fp
1ab64     08 4E 85 51 |  if_ne	sub	fp, #8
1ab68     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1ab6c     2C 00 90 5D |  if_ne	jmp	#LR__2132
1ab70     1B FA 61 FD | 	getrnd	result1
1ab74     A7 26 02 FB | 	rdlong	local01, fp
1ab78     13 FB 11 FD | 	qdiv	result1, local01
1ab7c     A7 12 02 F6 | 	mov	arg01, fp
1ab80     19 26 62 FD | 	getqy	local01
1ab84     A7 26 62 FC | 	wrlong	local01, fp
1ab88     08 4E 05 F1 | 	add	fp, #8
1ab8c     A7 3A 68 FC | 	wrlong	#29, fp
1ab90     08 4E 85 F1 | 	sub	fp, #8
1ab94     DC 2A BF FD | 	call	#_push
1ab98     A0 00 90 FD | 	jmp	#LR__2135
1ab9c                 | LR__2132
1ab9c     08 4E 05 F1 | 	add	fp, #8
1aba0     A7 26 02 FB | 	rdlong	local01, fp
1aba4     08 4E 85 F1 | 	sub	fp, #8
1aba8     1E 26 0E F2 | 	cmp	local01, #30 wz
1abac     48 00 90 5D |  if_ne	jmp	#LR__2133
1abb0     A7 12 02 FB | 	rdlong	arg01, fp
1abb4     00 C0 24 FF 
1abb8     00 14 06 F6 | 	mov	arg02, ##1233125376
1abbc     2C EE B0 FD | 	call	#__system___float_div
1abc0     FD 26 02 F6 | 	mov	local01, result1
1abc4     1B 12 62 FD | 	getrnd	arg01
1abc8     74 13 06 F4 | 	bitl	arg01, #372
1abcc     14 E8 B0 FD | 	call	#__system___float_fromuns
1abd0     FD 14 02 F6 | 	mov	arg02, result1
1abd4     13 13 02 F6 | 	mov	arg01, local01
1abd8     0C EC B0 FD | 	call	#__system___float_mul
1abdc     A7 FA 61 FC | 	wrlong	result1, fp
1abe0     08 4E 05 F1 | 	add	fp, #8
1abe4     A7 3C 68 FC | 	wrlong	#30, fp
1abe8     08 4E 85 F1 | 	sub	fp, #8
1abec     A7 12 02 F6 | 	mov	arg01, fp
1abf0     80 2A BF FD | 	call	#_push
1abf4     44 00 90 FD | 	jmp	#LR__2134
1abf8                 | LR__2133
1abf8                 | '     print "rnd: "; : printerror(40) 
1abf8     00 12 06 F6 | 	mov	arg01, #0
1abfc     10 1A B1 FD | 	call	#__system___getiolock_0606
1ac00     FD 12 02 F6 | 	mov	arg01, result1
1ac04     64 BD B0 FD | 	call	#__system___lockmem
1ac08     B8 01 00 FF 
1ac0c     0D 14 06 F6 | 	mov	arg02, ##@LR__5963
1ac10     00 12 06 F6 | 	mov	arg01, #0
1ac14     00 16 06 F6 | 	mov	arg03, #0
1ac18     48 CA B0 FD | 	call	#__system___basic_print_string
1ac1c     00 12 06 F6 | 	mov	arg01, #0
1ac20     EC 19 B1 FD | 	call	#__system___getiolock_0606
1ac24     FD 00 68 FC | 	wrlong	#0, result1
1ac28     28 12 06 F6 | 	mov	arg01, #40
1ac2c     00 14 06 F6 | 	mov	arg02, #0
1ac30     48 83 B0 FD | 	call	#_printerror
1ac34     A7 12 02 F6 | 	mov	arg01, fp
1ac38     38 2A BF FD | 	call	#_push
1ac3c                 | LR__2134
1ac3c                 | LR__2135
1ac3c                 | LR__2136
1ac3c                 | LR__2137
1ac3c     A7 F0 03 F6 | 	mov	ptra, fp
1ac40     B2 00 A0 FD | 	call	#popregs_
1ac44                 | _do_rnd_ret
1ac44     2D 00 64 FD | 	ret
1ac48                 | 
1ac48                 | ' 
1ac48                 | ' '-------------------- round
1ac48                 | ' 
1ac48                 | ' sub do_round
1ac48                 | _do_round
1ac48     00 4A 05 F6 | 	mov	COUNT_, #0
1ac4c     A8 00 A0 FD | 	call	#pushregs_
1ac50     0C F0 07 F1 | 	add	ptra, #12
1ac54     84 29 BF FD | 	call	#_pop
1ac58     A7 FA 61 FC | 	wrlong	result1, fp
1ac5c     04 4E 05 F1 | 	add	fp, #4
1ac60     A7 FC 61 FC | 	wrlong	result2, fp
1ac64     04 4E 05 F1 | 	add	fp, #4
1ac68     A7 FE 61 FC | 	wrlong	result3, fp
1ac6c     08 4E 85 F1 | 	sub	fp, #8
1ac70     A7 12 02 F6 | 	mov	arg01, fp
1ac74     48 2B BF FD | 	call	#_converttoint
1ac78     A7 FA 61 FC | 	wrlong	result1, fp
1ac7c     08 4E 05 F1 | 	add	fp, #8
1ac80     A7 38 68 FC | 	wrlong	#28, fp
1ac84     08 4E 85 F1 | 	sub	fp, #8
1ac88     A7 12 02 F6 | 	mov	arg01, fp
1ac8c     E4 29 BF FD | 	call	#_push
1ac90     A7 F0 03 F6 | 	mov	ptra, fp
1ac94     B2 00 A0 FD | 	call	#popregs_
1ac98                 | _do_round_ret
1ac98     2D 00 64 FD | 	ret
1ac9c                 | 
1ac9c                 | ' 
1ac9c                 | ' '-------------------- rqpin
1ac9c                 | ' 
1ac9c                 | ' sub do_rqpin
1ac9c                 | _do_rqpin
1ac9c     00 4A 05 F6 | 	mov	COUNT_, #0
1aca0     A8 00 A0 FD | 	call	#pushregs_
1aca4     0C F0 07 F1 | 	add	ptra, #12
1aca8     30 29 BF FD | 	call	#_pop
1acac     A7 FA 61 FC | 	wrlong	result1, fp
1acb0     04 4E 05 F1 | 	add	fp, #4
1acb4     A7 FC 61 FC | 	wrlong	result2, fp
1acb8     04 4E 05 F1 | 	add	fp, #4
1acbc     A7 FE 61 FC | 	wrlong	result3, fp
1acc0     08 4E 85 F1 | 	sub	fp, #8
1acc4     A7 12 02 F6 | 	mov	arg01, fp
1acc8     F4 2A BF FD | 	call	#_converttoint
1accc     FD 12 02 F6 | 	mov	arg01, result1
1acd0     00 FA 05 F6 | 	mov	result1, #0
1acd4     09 FB 81 FA | 	rqpin	result1, arg01
1acd8     52 00 00 FF 
1acdc     10 E5 05 F1 | 	add	objptr, ##42256
1ace0     F2 FA 61 FC | 	wrlong	result1, objptr
1ace4     52 00 00 FF 
1ace8     10 E5 85 F1 | 	sub	objptr, ##42256
1acec     08 4E 05 F1 | 	add	fp, #8
1acf0     A7 3A 68 FC | 	wrlong	#29, fp
1acf4     08 4E 85 F1 | 	sub	fp, #8
1acf8     A7 08 68 FC | 	wrlong	#4, fp
1acfc     A7 12 02 F6 | 	mov	arg01, fp
1ad00     70 29 BF FD | 	call	#_push
1ad04     A7 F0 03 F6 | 	mov	ptra, fp
1ad08     B2 00 A0 FD | 	call	#popregs_
1ad0c                 | _do_rqpin_ret
1ad0c     2D 00 64 FD | 	ret
1ad10                 | 
1ad10                 | ' 
1ad10                 | ' ' ------------------ run
1ad10                 | ' 
1ad10                 | ' sub do_run
1ad10                 | _do_run
1ad10     04 4A 05 F6 | 	mov	COUNT_, #4
1ad14     A8 00 A0 FD | 	call	#pushregs_
1ad18     4A 00 00 FF 
1ad1c     80 E4 05 F1 | 	add	objptr, ##38016
1ad20     F2 26 02 FB | 	rdlong	local01, objptr
1ad24     06 00 00 FF 
1ad28     38 E4 05 F1 | 	add	objptr, ##3128
1ad2c     F2 28 02 FB | 	rdlong	local02, objptr
1ad30     04 E4 05 F1 | 	add	objptr, #4
1ad34     F2 2A 02 FB | 	rdlong	local03, objptr
1ad38     13 19 02 F6 | 	mov	arg04, local01
1ad3c     0C 17 02 F6 | 	mov	arg03, arg04
1ad40     01 16 66 F0 | 	shl	arg03, #1
1ad44     0C 17 02 F1 | 	add	arg03, arg04
1ad48     02 16 66 F0 | 	shl	arg03, #2
1ad4c     09 00 00 FF 
1ad50     40 E4 85 F1 | 	sub	objptr, ##4672
1ad54     F2 16 02 F1 | 	add	arg03, objptr
1ad58     0B 15 02 FB | 	rdlong	arg02, arg03
1ad5c                 | ' 
1ad5c                 | ' r_lineptr_e=lineptr_e
1ad5c                 | ' r_runptr=runptr
1ad5c                 | ' r_runptr2=runptr2
1ad5c                 | ' 
1ad5c                 | ' numpar=compiledline(lineptr_e).result.uresult
1ad5c                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
1ad5c     01 14 0E F2 | 	cmp	arg02, #1 wz
1ad60     47 00 00 FF 
1ad64     7C E4 85 F1 | 	sub	objptr, ##36476
1ad68     00 12 06 A6 |  if_e	mov	arg01, #0
1ad6c     E0 A0 BF AD |  if_e	call	#_do_load
1ad70     4A 00 00 FF 
1ad74     88 E4 05 F1 | 	add	objptr, ##38024
1ad78     F2 18 02 FB | 	rdlong	arg04, objptr
1ad7c     06 00 00 FF 
1ad80     30 E4 05 F1 | 	add	objptr, ##3120
1ad84     F2 18 62 FC | 	wrlong	arg04, objptr
1ad88     04 E4 05 F1 | 	add	objptr, #4
1ad8c     F2 00 68 FC | 	wrlong	#0, objptr
1ad90     04 E4 05 F1 | 	add	objptr, #4
1ad94     FF FF FF FF 
1ad98     F2 FE 6B FC | 	wrlong	##-1, objptr
1ad9c     06 00 00 FF 
1ada0     38 E4 85 F1 | 	sub	objptr, ##3128
1ada4     F2 18 02 FB | 	rdlong	arg04, objptr
1ada8     06 00 00 FF 
1adac     A4 E4 05 F1 | 	add	objptr, ##3236
1adb0     F2 18 62 FC | 	wrlong	arg04, objptr
1adb4     B8 01 00 FF 
1adb8     13 18 06 F6 | 	mov	arg04, ##@LR__5964
1adbc     01 00 00 FF 
1adc0     B0 E5 05 F1 | 	add	objptr, ##944
1adc4     F2 18 62 FC | 	wrlong	arg04, objptr
1adc8                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
1adc8                 | ' dataptr=programstart : readline="" ' reset the data pointer
1adc8                 | ' if inrun>0 then 
1adc8     01 00 00 FF 
1adcc     F0 E5 85 F1 | 	sub	objptr, ##1008
1add0     F2 18 02 FB | 	rdlong	arg04, objptr
1add4     50 00 00 FF 
1add8     EC E4 85 F1 | 	sub	objptr, ##41196
1addc     01 18 16 F2 | 	cmp	arg04, #1 wc
1ade0     30 00 90 CD |  if_b	jmp	#LR__2140
1ade4     50 00 00 FF 
1ade8     F0 E4 05 F1 | 	add	objptr, ##41200
1adec     F2 12 02 F6 | 	mov	arg01, objptr
1adf0     38 E4 85 F1 | 	sub	objptr, #56
1adf4     F2 14 02 FB | 	rdlong	arg02, objptr
1adf8     18 16 06 F6 | 	mov	arg03, #24
1adfc     44 00 00 FF 
1ae00     EC E5 85 F1 | 	sub	objptr, ##35308
1ae04     DC AE B0 FD | 	call	#_psram_spin2_read1
1ae08     0B 00 00 FF 
1ae0c     CC E4 85 F1 | 	sub	objptr, ##5836
1ae10                 | '   psram.read1(varptr(runheader),runptr,24)  
1ae10                 | '   return
1ae10     0C 03 90 FD | 	jmp	#LR__2147
1ae14                 | LR__2140
1ae14     50 00 00 FF 
1ae18     EC E4 05 F1 | 	add	objptr, ##41196
1ae1c     F2 02 68 FC | 	wrlong	#1, objptr
1ae20     04 E4 05 F1 | 	add	objptr, #4
1ae24     F2 12 02 F6 | 	mov	arg01, objptr
1ae28     38 E4 85 F1 | 	sub	objptr, #56
1ae2c     F2 14 02 FB | 	rdlong	arg02, objptr
1ae30     18 16 06 F6 | 	mov	arg03, #24
1ae34     44 00 00 FF 
1ae38     EC E5 85 F1 | 	sub	objptr, ##35308
1ae3c     A4 AE B0 FD | 	call	#_psram_spin2_read1
1ae40                 | ' inrun=1
1ae40                 | ' psram.read1(varptr(runheader),runptr,24) 
1ae40                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
1ae40     45 00 00 FF 
1ae44     24 E4 05 F1 | 	add	objptr, ##35364
1ae48     F2 2C 02 FB | 	rdlong	local04, objptr
1ae4c     50 00 00 FF 
1ae50     F0 E4 85 F1 | 	sub	objptr, ##41200
1ae54     FF FF 7F FF 
1ae58     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
1ae5c     50 00 00 AF 
1ae60     EC E4 05 A1 |  if_e	add	objptr, ##41196
1ae64     F2 00 68 AC |  if_e	wrlong	#0, objptr
1ae68     50 00 00 AF 
1ae6c     EC E4 85 A1 |  if_e	sub	objptr, ##41196
1ae70     AC 02 90 AD |  if_e	jmp	#LR__2147
1ae74                 | ' do 
1ae74                 | LR__2141
1ae74                 | '   if runptr<>oldrunptr then
1ae74     50 00 00 FF 
1ae78     B8 E4 05 F1 | 	add	objptr, ##41144
1ae7c     F2 2C 02 FB | 	rdlong	local04, objptr
1ae80     08 E4 05 F1 | 	add	objptr, #8
1ae84     F2 18 02 FB | 	rdlong	arg04, objptr
1ae88     50 00 00 FF 
1ae8c     C0 E4 85 F1 | 	sub	objptr, ##41152
1ae90     0C 2D 0A F2 | 	cmp	local04, arg04 wz
1ae94     CC 00 90 AD |  if_e	jmp	#LR__2142
1ae98     50 00 00 FF 
1ae9c     F0 E4 05 F1 | 	add	objptr, ##41200
1aea0     F2 12 02 F6 | 	mov	arg01, objptr
1aea4     38 E4 85 F1 | 	sub	objptr, #56
1aea8     F2 14 02 FB | 	rdlong	arg02, objptr
1aeac     18 16 06 F6 | 	mov	arg03, #24
1aeb0     44 00 00 FF 
1aeb4     EC E5 85 F1 | 	sub	objptr, ##35308
1aeb8     28 AE B0 FD | 	call	#_psram_spin2_read1
1aebc     3B 00 00 FF 
1aec0     B0 E5 05 F1 | 	add	objptr, ##30640
1aec4     F2 12 02 F6 | 	mov	arg01, objptr
1aec8     09 00 00 FF 
1aecc     3C E4 05 F1 | 	add	objptr, ##4668
1aed0     F2 14 02 FB | 	rdlong	arg02, objptr
1aed4     0B 00 00 FF 
1aed8     54 E4 85 F1 | 	sub	objptr, ##5716
1aedc     F2 2C 02 FB | 	rdlong	local04, objptr
1aee0     01 2C 66 F0 | 	shl	local04, #1
1aee4     16 15 02 F1 | 	add	arg02, local04
1aee8     0B 00 00 FF 
1aeec     94 E4 05 F1 | 	add	objptr, ##5780
1aef0     F2 16 02 FB | 	rdlong	arg03, objptr
1aef4     40 E4 85 F1 | 	sub	objptr, #64
1aef8     F2 2C 02 FB | 	rdlong	local04, objptr
1aefc     16 17 82 F1 | 	sub	arg03, local04
1af00     44 00 00 FF 
1af04     EC E5 85 F1 | 	sub	objptr, ##35308
1af08     D8 AD B0 FD | 	call	#_psram_spin2_read1
1af0c     45 00 00 FF 
1af10     2C E4 05 F1 | 	add	objptr, ##35372
1af14     F2 2C 02 FB | 	rdlong	local04, objptr
1af18     40 E4 85 F1 | 	sub	objptr, #64
1af1c     F2 14 02 FB | 	rdlong	arg02, objptr
1af20     0A 2D 82 F1 | 	sub	local04, arg02
1af24     0B 00 00 FF 
1af28     54 E4 85 F1 | 	sub	objptr, ##5716
1af2c     F2 14 02 FB | 	rdlong	arg02, objptr
1af30     0A 2D 12 FD | 	qdiv	local04, arg02
1af34     05 00 00 FF 
1af38     18 E4 05 F1 | 	add	objptr, ##2584
1af3c     18 2C 62 FD | 	getqx	local04
1af40     03 2C 86 F1 | 	sub	local04, #3
1af44     F2 2C 62 FC | 	wrlong	local04, objptr
1af48     06 00 00 FF 
1af4c     3C E4 05 F1 | 	add	objptr, ##3132
1af50     F2 2C 02 FB | 	rdlong	local04, objptr
1af54     08 E4 05 F1 | 	add	objptr, #8
1af58     F2 2C 62 FC | 	wrlong	local04, objptr
1af5c     50 00 00 FF 
1af60     C0 E4 85 F1 | 	sub	objptr, ##41152
1af64                 | LR__2142
1af64     50 00 00 FF 
1af68     04 E5 05 F1 | 	add	objptr, ##41220
1af6c     F2 2C 02 FB | 	rdlong	local04, objptr
1af70     4C E4 85 F1 | 	sub	objptr, #76
1af74     F2 2C 62 FC | 	wrlong	local04, objptr
1af78     04 E4 05 F1 | 	add	objptr, #4
1af7c     F2 12 02 FB | 	rdlong	arg01, objptr
1af80     50 00 00 FF 
1af84     BC E4 85 F1 | 	sub	objptr, ##41148
1af88     4C 25 BF FD | 	call	#_execute_line
1af8c     50 00 00 FF 
1af90     BC E4 05 F1 | 	add	objptr, ##41148
1af94     F2 FA 61 FC | 	wrlong	result1, objptr
1af98     04 E4 85 F1 | 	sub	objptr, #4
1af9c     F2 2C 02 FB | 	rdlong	local04, objptr
1afa0     50 00 00 FF 
1afa4     B8 E4 85 F1 | 	sub	objptr, ##41144
1afa8     FF FF 3F FF 
1afac     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1afb0     4C 00 90 AD |  if_e	jmp	#LR__2145
1afb4     E0 12 06 F6 | 	mov	arg01, #224
1afb8     B8 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1afbc     00 FA 0D F2 | 	cmp	result1, #0 wz
1afc0     10 00 90 5D |  if_ne	jmp	#LR__2143
1afc4     E4 12 06 F6 | 	mov	arg01, #228
1afc8     A8 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1afcc     00 FA 0D F2 | 	cmp	result1, #0 wz
1afd0     10 00 90 AD |  if_e	jmp	#LR__2144
1afd4                 | LR__2143
1afd4     06 12 06 F6 | 	mov	arg01, #6
1afd8     98 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1afdc     00 FA 0D F2 | 	cmp	result1, #0 wz
1afe0     1C 00 90 5D |  if_ne	jmp	#LR__2145
1afe4                 | LR__2144
1afe4     50 00 00 FF 
1afe8     EC E4 05 F1 | 	add	objptr, ##41196
1afec     F2 2C 02 FB | 	rdlong	local04, objptr
1aff0     50 00 00 FF 
1aff4     EC E4 85 F1 | 	sub	objptr, ##41196
1aff8     02 2C 0E F2 | 	cmp	local04, #2 wz
1affc     74 FE 9F 5D |  if_ne	jmp	#LR__2141
1b000                 | LR__2145
1b000                 | '   ''do whatever kbm.peek_latest_key()=$106 
1b000                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1b000     50 00 00 FF 
1b004     B8 E4 05 F1 | 	add	objptr, ##41144
1b008     F2 2C 02 FB | 	rdlong	local04, objptr
1b00c     50 00 00 FF 
1b010     B8 E4 85 F1 | 	sub	objptr, ##41144
1b014     FF FF 3F FF 
1b018     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1b01c     AC 00 90 AD |  if_e	jmp	#LR__2146
1b020     50 00 00 FF 
1b024     EC E4 05 F1 | 	add	objptr, ##41196
1b028     F2 2C 02 FB | 	rdlong	local04, objptr
1b02c     50 00 00 FF 
1b030     EC E4 85 F1 | 	sub	objptr, ##41196
1b034     01 2C 0E F2 | 	cmp	local04, #1 wz
1b038     90 00 90 5D |  if_ne	jmp	#LR__2146
1b03c                 | '   print: print "Stopped at line ";runheader(0) 
1b03c     00 12 06 F6 | 	mov	arg01, #0
1b040     CC 15 B1 FD | 	call	#__system___getiolock_0606
1b044     FD 12 02 F6 | 	mov	arg01, result1
1b048     20 B9 B0 FD | 	call	#__system___lockmem
1b04c     00 12 06 F6 | 	mov	arg01, #0
1b050     0A 14 06 F6 | 	mov	arg02, #10
1b054     00 16 06 F6 | 	mov	arg03, #0
1b058     B0 C5 B0 FD | 	call	#__system___basic_print_char
1b05c     00 12 06 F6 | 	mov	arg01, #0
1b060     AC 15 B1 FD | 	call	#__system___getiolock_0606
1b064     FD 00 68 FC | 	wrlong	#0, result1
1b068     00 12 06 F6 | 	mov	arg01, #0
1b06c     A0 15 B1 FD | 	call	#__system___getiolock_0606
1b070     FD 12 02 F6 | 	mov	arg01, result1
1b074     F4 B8 B0 FD | 	call	#__system___lockmem
1b078     B8 01 00 FF 
1b07c     14 14 06 F6 | 	mov	arg02, ##@LR__5965
1b080     00 12 06 F6 | 	mov	arg01, #0
1b084     00 16 06 F6 | 	mov	arg03, #0
1b088     D8 C5 B0 FD | 	call	#__system___basic_print_string
1b08c     50 00 00 FF 
1b090     F0 E4 05 F1 | 	add	objptr, ##41200
1b094     F2 14 02 FB | 	rdlong	arg02, objptr
1b098     50 00 00 FF 
1b09c     F0 E4 85 F1 | 	sub	objptr, ##41200
1b0a0     00 12 06 F6 | 	mov	arg01, #0
1b0a4     00 16 06 F6 | 	mov	arg03, #0
1b0a8     0A 18 06 F6 | 	mov	arg04, #10
1b0ac     38 C6 B0 FD | 	call	#__system___basic_print_unsigned
1b0b0     00 12 06 F6 | 	mov	arg01, #0
1b0b4     0A 14 06 F6 | 	mov	arg02, #10
1b0b8     00 16 06 F6 | 	mov	arg03, #0
1b0bc     4C C5 B0 FD | 	call	#__system___basic_print_char
1b0c0     00 12 06 F6 | 	mov	arg01, #0
1b0c4     48 15 B1 FD | 	call	#__system___getiolock_0606
1b0c8     FD 00 68 FC | 	wrlong	#0, result1
1b0cc                 | LR__2146
1b0cc     50 00 00 FF 
1b0d0     EC E4 05 F1 | 	add	objptr, ##41196
1b0d4     F2 00 68 FC | 	wrlong	#0, objptr
1b0d8     06 00 00 FF 
1b0dc     6C E4 85 F1 | 	sub	objptr, ##3180
1b0e0     F2 26 62 FC | 	wrlong	local01, objptr
1b0e4     06 00 00 FF 
1b0e8     38 E4 05 F1 | 	add	objptr, ##3128
1b0ec     F2 28 62 FC | 	wrlong	local02, objptr
1b0f0     04 E4 05 F1 | 	add	objptr, #4
1b0f4     F2 2A 62 FC | 	wrlong	local03, objptr
1b0f8     50 00 00 FF 
1b0fc     BC E4 85 F1 | 	sub	objptr, ##41148
1b100     11 12 06 F6 | 	mov	arg01, #17
1b104     08 14 06 F6 | 	mov	arg02, #8
1b108     10 16 06 F6 | 	mov	arg03, #16
1b10c     B8 8E B0 FD | 	call	#_hg010b_spin2_setspritesize
1b110     10 12 06 F6 | 	mov	arg01, #16
1b114     20 14 06 F6 | 	mov	arg02, #32
1b118     20 16 06 F6 | 	mov	arg03, #32
1b11c     A8 8E B0 FD | 	call	#_hg010b_spin2_setspritesize
1b120                 | LR__2147
1b120     A7 F0 03 F6 | 	mov	ptra, fp
1b124     B2 00 A0 FD | 	call	#popregs_
1b128                 | _do_run_ret
1b128     2D 00 64 FD | 	ret
1b12c                 | 
1b12c                 | ' 
1b12c                 | ' ' ------------------ save
1b12c                 | ' 
1b12c                 | ' sub do_save                        
1b12c                 | _do_save
1b12c     04 4A 05 F6 | 	mov	COUNT_, #4
1b130     A8 00 A0 FD | 	call	#pushregs_
1b134     B8 F0 07 F1 | 	add	ptra, #184
1b138     4A 00 00 FF 
1b13c     80 E4 05 F1 | 	add	objptr, ##38016
1b140     F2 26 02 FB | 	rdlong	local01, objptr
1b144     13 29 02 F6 | 	mov	local02, local01
1b148     01 28 66 F0 | 	shl	local02, #1
1b14c     13 29 02 F1 | 	add	local02, local01
1b150     02 28 66 F0 | 	shl	local02, #2
1b154     03 00 00 FF 
1b158     04 E4 85 F1 | 	sub	objptr, ##1540
1b15c     F2 28 02 F1 | 	add	local02, objptr
1b160     14 2B 02 FB | 	rdlong	local03, local02
1b164     10 4E 05 F1 | 	add	fp, #16
1b168     A7 2A 62 FC | 	wrlong	local03, fp
1b16c                 | ' 
1b16c                 | ' numpar=compiledline(lineptr_e).result.uresult
1b16c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1b16c     10 4E 85 F1 | 	sub	fp, #16
1b170     01 2A 56 F2 | 	cmps	local03, #1 wc
1b174     47 00 00 FF 
1b178     7C E4 85 F1 | 	sub	objptr, ##36476
1b17c     20 00 90 CD |  if_b	jmp	#LR__2150
1b180     58 24 BF FD | 	call	#_pop
1b184     A7 FA 61 FC | 	wrlong	result1, fp
1b188     04 4E 05 F1 | 	add	fp, #4
1b18c     A7 FC 61 FC | 	wrlong	result2, fp
1b190     04 4E 05 F1 | 	add	fp, #4
1b194     A7 FE 61 FC | 	wrlong	result3, fp
1b198     08 4E 85 F1 | 	sub	fp, #8
1b19c     24 00 90 FD | 	jmp	#LR__2151
1b1a0                 | LR__2150
1b1a0     52 00 00 FF 
1b1a4     C4 E4 05 F1 | 	add	objptr, ##42180
1b1a8     F2 2A 02 FB | 	rdlong	local03, objptr
1b1ac     52 00 00 FF 
1b1b0     C4 E4 85 F1 | 	sub	objptr, ##42180
1b1b4     A7 2A 62 FC | 	wrlong	local03, fp
1b1b8     08 4E 05 F1 | 	add	fp, #8
1b1bc     A7 3E 68 FC | 	wrlong	#31, fp
1b1c0     08 4E 85 F1 | 	sub	fp, #8
1b1c4                 | LR__2151
1b1c4                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1b1c4     4A 00 00 FF 
1b1c8     88 E4 05 F1 | 	add	objptr, ##38024
1b1cc     F2 12 02 FB | 	rdlong	arg01, objptr
1b1d0     4A 00 00 FF 
1b1d4     88 E4 85 F1 | 	sub	objptr, ##38024
1b1d8     70 80 B0 FD | 	call	#_pslpeek
1b1dc     FF FF 7F FF 
1b1e0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1b1e4     10 00 90 5D |  if_ne	jmp	#LR__2152
1b1e8     1B 12 06 F6 | 	mov	arg01, #27
1b1ec     00 14 06 F6 | 	mov	arg02, #0
1b1f0     88 7D B0 FD | 	call	#_printerror
1b1f4     CC 02 90 FD | 	jmp	#LR__2158
1b1f8                 | LR__2152
1b1f8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1b1f8     08 4E 05 F1 | 	add	fp, #8
1b1fc     A7 2A 02 FB | 	rdlong	local03, fp
1b200     08 4E 85 F1 | 	sub	fp, #8
1b204     2B 2A 0E F2 | 	cmp	local03, #43 wz
1b208     18 00 90 5D |  if_ne	jmp	#LR__2153
1b20c     A7 12 02 FB | 	rdlong	arg01, fp
1b210     40 25 BF FD | 	call	#_convertstring
1b214     A7 FA 61 FC | 	wrlong	result1, fp
1b218     08 4E 05 F1 | 	add	fp, #8
1b21c     A7 3E 68 FC | 	wrlong	#31, fp
1b220     08 4E 85 F1 | 	sub	fp, #8
1b224                 | LR__2153
1b224                 | ' if t1.result_type=result_string then
1b224     08 4E 05 F1 | 	add	fp, #8
1b228     A7 2A 02 FB | 	rdlong	local03, fp
1b22c     08 4E 85 F1 | 	sub	fp, #8
1b230     1F 2A 0E F2 | 	cmp	local03, #31 wz
1b234     8C 02 90 5D |  if_ne	jmp	#LR__2157
1b238                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1b238     A7 12 02 FB | 	rdlong	arg01, fp
1b23c     B8 01 00 FF 
1b240     25 14 06 F6 | 	mov	arg02, ##@LR__5966
1b244     4C B7 B0 FD | 	call	#__system___string_cmp
1b248     00 FA 0D F2 | 	cmp	result1, #0 wz
1b24c     52 00 00 AF 
1b250     C4 E4 05 A1 |  if_e	add	objptr, ##42180
1b254     F2 2A 02 AB |  if_e	rdlong	local03, objptr
1b258     A7 2A 62 AC |  if_e	wrlong	local03, fp
1b25c     52 00 00 AF 
1b260     C4 E4 85 A1 |  if_e	sub	objptr, ##42180
1b264     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1b268     52 00 00 5F 
1b26c     C4 E4 05 51 |  if_ne	add	objptr, ##42180
1b270     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
1b274     52 00 00 5F 
1b278     C4 E4 85 51 |  if_ne	sub	objptr, ##42180
1b27c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1b27c     09 12 06 F6 | 	mov	arg01, #9
1b280     44 0A B1 FD | 	call	#__system__close
1b284     09 2A 06 F6 | 	mov	local03, #9
1b288     4A 00 00 FF 
1b28c     94 E4 05 F1 | 	add	objptr, ##38036
1b290     F2 12 02 FB | 	rdlong	arg01, objptr
1b294     4A 00 00 FF 
1b298     94 E4 85 F1 | 	sub	objptr, ##38036
1b29c     B8 01 00 FF 
1b2a0     26 14 06 F6 | 	mov	arg02, ##@LR__5967
1b2a4     20 B7 B0 FD | 	call	#__system___string_concat
1b2a8     FD 12 02 F6 | 	mov	arg01, result1
1b2ac     A7 14 02 FB | 	rdlong	arg02, fp
1b2b0     14 B7 B0 FD | 	call	#__system___string_concat
1b2b4     FD 14 02 F6 | 	mov	arg02, result1
1b2b8     15 13 02 F6 | 	mov	arg01, local03
1b2bc     0D 16 06 F6 | 	mov	arg03, #13
1b2c0     AC C2 B0 FD | 	call	#__system___basic_open_string
1b2c4     4A 00 00 FF 
1b2c8     88 E4 05 F1 | 	add	objptr, ##38024
1b2cc     F2 2A 02 FB | 	rdlong	local03, objptr
1b2d0     4A 00 00 FF 
1b2d4     88 E4 85 F1 | 	sub	objptr, ##38024
1b2d8     B0 4E 05 F1 | 	add	fp, #176
1b2dc     A7 2A 62 FC | 	wrlong	local03, fp
1b2e0     B0 4E 85 F1 | 	sub	fp, #176
1b2e4                 | '   saveptr=programstart
1b2e4                 | '   do
1b2e4                 | LR__2154
1b2e4     14 4E 05 F1 | 	add	fp, #20
1b2e8     A7 12 02 F6 | 	mov	arg01, fp
1b2ec     9C 4E 05 F1 | 	add	fp, #156
1b2f0     A7 14 02 FB | 	rdlong	arg02, fp
1b2f4     B0 4E 85 F1 | 	sub	fp, #176
1b2f8     18 16 06 F6 | 	mov	arg03, #24
1b2fc     0B 00 00 FF 
1b300     CC E4 05 F1 | 	add	objptr, ##5836
1b304     DC A9 B0 FD | 	call	#_psram_spin2_read1
1b308     2C 4E 05 F1 | 	add	fp, #44
1b30c     A7 12 02 F6 | 	mov	arg01, fp
1b310     10 4E 85 F1 | 	sub	fp, #16
1b314     A7 14 02 FB | 	rdlong	arg02, fp
1b318     04 4E 05 F1 | 	add	fp, #4
1b31c     A7 16 02 FB | 	rdlong	arg03, fp
1b320     20 4E 85 F1 | 	sub	fp, #32
1b324     BC A9 B0 FD | 	call	#_psram_spin2_read1
1b328     0B 00 00 FF 
1b32c     CC E4 85 F1 | 	sub	objptr, ##5836
1b330     B8 01 00 FF 
1b334     28 2A 06 F6 | 	mov	local03, ##@LR__5968
1b338     AC 4E 05 F1 | 	add	fp, #172
1b33c     A7 2A 62 FC | 	wrlong	local03, fp
1b340                 | '     psram.read1(varptr(header(0)),saveptr,24)
1b340                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1b340                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1b340     A0 4E 85 F1 | 	sub	fp, #160
1b344     A7 02 68 FC | 	wrlong	#1, fp
1b348     14 4E 05 F1 | 	add	fp, #20
1b34c     A7 2C 02 FB | 	rdlong	local04, fp
1b350     20 4E 85 F1 | 	sub	fp, #32
1b354     01 2C 06 F1 | 	add	local04, #1
1b358                 | LR__2155
1b358     0C 4E 05 F1 | 	add	fp, #12
1b35c     A7 2A 02 FB | 	rdlong	local03, fp
1b360     0C 4E 85 F1 | 	sub	fp, #12
1b364     16 2B 52 F2 | 	cmps	local03, local04 wc
1b368     54 00 90 3D |  if_ae	jmp	#LR__2156
1b36c     AC 4E 05 F1 | 	add	fp, #172
1b370     A7 26 02 FB | 	rdlong	local01, fp
1b374     A0 4E 85 F1 | 	sub	fp, #160
1b378     A7 2A 02 FB | 	rdlong	local03, fp
1b37c     01 2A 86 F1 | 	sub	local03, #1
1b380     20 4E 05 F1 | 	add	fp, #32
1b384     A7 2A 02 F1 | 	add	local03, fp
1b388     15 13 C2 FA | 	rdbyte	arg01, local03
1b38c     2C 4E 85 F1 | 	sub	fp, #44
1b390     1C D8 B0 FD | 	call	#__system__Chr_S
1b394     FD 14 02 F6 | 	mov	arg02, result1
1b398     13 13 02 F6 | 	mov	arg01, local01
1b39c     28 B6 B0 FD | 	call	#__system___string_concat
1b3a0     AC 4E 05 F1 | 	add	fp, #172
1b3a4     A7 FA 61 FC | 	wrlong	result1, fp
1b3a8     A0 4E 85 F1 | 	sub	fp, #160
1b3ac     A7 2A 02 FB | 	rdlong	local03, fp
1b3b0     01 2A 06 F1 | 	add	local03, #1
1b3b4     A7 2A 62 FC | 	wrlong	local03, fp
1b3b8     0C 4E 85 F1 | 	sub	fp, #12
1b3bc     98 FF 9F FD | 	jmp	#LR__2155
1b3c0                 | LR__2156
1b3c0                 | '     print #9, saveline$
1b3c0     09 12 06 F6 | 	mov	arg01, #9
1b3c4     48 12 B1 FD | 	call	#__system___getiolock_0606
1b3c8     FD 12 02 F6 | 	mov	arg01, result1
1b3cc     9C B5 B0 FD | 	call	#__system___lockmem
1b3d0     AC 4E 05 F1 | 	add	fp, #172
1b3d4     A7 14 02 FB | 	rdlong	arg02, fp
1b3d8     AC 4E 85 F1 | 	sub	fp, #172
1b3dc     09 12 06 F6 | 	mov	arg01, #9
1b3e0     00 16 06 F6 | 	mov	arg03, #0
1b3e4     7C C2 B0 FD | 	call	#__system___basic_print_string
1b3e8     09 12 06 F6 | 	mov	arg01, #9
1b3ec     0A 14 06 F6 | 	mov	arg02, #10
1b3f0     00 16 06 F6 | 	mov	arg03, #0
1b3f4     14 C2 B0 FD | 	call	#__system___basic_print_char
1b3f8     09 12 06 F6 | 	mov	arg01, #9
1b3fc     10 12 B1 FD | 	call	#__system___getiolock_0606
1b400     FD 00 68 FC | 	wrlong	#0, result1
1b404     28 4E 05 F1 | 	add	fp, #40
1b408     A7 2A 02 FB | 	rdlong	local03, fp
1b40c     88 4E 05 F1 | 	add	fp, #136
1b410     A7 2A 62 FC | 	wrlong	local03, fp
1b414     88 4E 85 F1 | 	sub	fp, #136
1b418     A7 2A 02 FB | 	rdlong	local03, fp
1b41c     28 4E 85 F1 | 	sub	fp, #40
1b420     FF FF 3F FF 
1b424     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
1b428     B8 FE 9F 5D |  if_ne	jmp	#LR__2154
1b42c                 | '   close #9  
1b42c     09 12 06 F6 | 	mov	arg01, #9
1b430     94 08 B1 FD | 	call	#__system__close
1b434                 | '   print "Saved as ";currentdir$+"/"+loadname
1b434     00 12 06 F6 | 	mov	arg01, #0
1b438     D4 11 B1 FD | 	call	#__system___getiolock_0606
1b43c     FD 12 02 F6 | 	mov	arg01, result1
1b440     28 B5 B0 FD | 	call	#__system___lockmem
1b444     B8 01 00 FF 
1b448     29 14 06 F6 | 	mov	arg02, ##@LR__5969
1b44c     00 12 06 F6 | 	mov	arg01, #0
1b450     00 16 06 F6 | 	mov	arg03, #0
1b454     0C C2 B0 FD | 	call	#__system___basic_print_string
1b458     00 28 06 F6 | 	mov	local02, #0
1b45c     4A 00 00 FF 
1b460     94 E4 05 F1 | 	add	objptr, ##38036
1b464     F2 12 02 FB | 	rdlong	arg01, objptr
1b468     4A 00 00 FF 
1b46c     94 E4 85 F1 | 	sub	objptr, ##38036
1b470     B8 01 00 FF 
1b474     33 14 06 F6 | 	mov	arg02, ##@LR__5970
1b478     4C B5 B0 FD | 	call	#__system___string_concat
1b47c     FD 12 02 F6 | 	mov	arg01, result1
1b480     52 00 00 FF 
1b484     C4 E4 05 F1 | 	add	objptr, ##42180
1b488     F2 14 02 FB | 	rdlong	arg02, objptr
1b48c     52 00 00 FF 
1b490     C4 E4 85 F1 | 	sub	objptr, ##42180
1b494     30 B5 B0 FD | 	call	#__system___string_concat
1b498     FD 14 02 F6 | 	mov	arg02, result1
1b49c     14 13 02 F6 | 	mov	arg01, local02
1b4a0     00 16 06 F6 | 	mov	arg03, #0
1b4a4     BC C1 B0 FD | 	call	#__system___basic_print_string
1b4a8     00 12 06 F6 | 	mov	arg01, #0
1b4ac     0A 14 06 F6 | 	mov	arg02, #10
1b4b0     00 16 06 F6 | 	mov	arg03, #0
1b4b4     54 C1 B0 FD | 	call	#__system___basic_print_char
1b4b8     00 12 06 F6 | 	mov	arg01, #0
1b4bc     50 11 B1 FD | 	call	#__system___getiolock_0606
1b4c0     FD 00 68 FC | 	wrlong	#0, result1
1b4c4                 | LR__2157
1b4c4                 | LR__2158
1b4c4     A7 F0 03 F6 | 	mov	ptra, fp
1b4c8     B2 00 A0 FD | 	call	#popregs_
1b4cc                 | _do_save_ret
1b4cc     2D 00 64 FD | 	ret
1b4d0                 | 
1b4d0                 | ' 
1b4d0                 | ' ' ------------------ setdelay
1b4d0                 | ' 
1b4d0                 | ' sub do_setdelay
1b4d0                 | _do_setdelay
1b4d0     02 4A 05 F6 | 	mov	COUNT_, #2
1b4d4     A8 00 A0 FD | 	call	#pushregs_
1b4d8     18 F0 07 F1 | 	add	ptra, #24
1b4dc     FC 20 BF FD | 	call	#_pop
1b4e0     FD 12 02 F6 | 	mov	arg01, result1
1b4e4     FE 26 02 F6 | 	mov	local01, result2
1b4e8     FF 28 02 F6 | 	mov	local02, result3
1b4ec     A7 12 62 FC | 	wrlong	arg01, fp
1b4f0     04 4E 05 F1 | 	add	fp, #4
1b4f4     A7 26 62 FC | 	wrlong	local01, fp
1b4f8     04 4E 05 F1 | 	add	fp, #4
1b4fc     A7 28 62 FC | 	wrlong	local02, fp
1b500     08 4E 85 F1 | 	sub	fp, #8
1b504     D4 20 BF FD | 	call	#_pop
1b508     FD 28 02 F6 | 	mov	local02, result1
1b50c     0C 4E 05 F1 | 	add	fp, #12
1b510     A7 28 62 FC | 	wrlong	local02, fp
1b514     04 4E 05 F1 | 	add	fp, #4
1b518     A7 FC 61 FC | 	wrlong	result2, fp
1b51c     04 4E 05 F1 | 	add	fp, #4
1b520     A7 FE 61 FC | 	wrlong	result3, fp
1b524     08 4E 85 F1 | 	sub	fp, #8
1b528     A7 12 02 F6 | 	mov	arg01, fp
1b52c     0C 4E 85 F1 | 	sub	fp, #12
1b530     8C 22 BF FD | 	call	#_converttoint
1b534     FD 28 02 F6 | 	mov	local02, result1
1b538     14 27 02 F6 | 	mov	local01, local02
1b53c     01 26 66 F0 | 	shl	local01, #1
1b540     14 27 02 F1 | 	add	local01, local02
1b544     03 26 66 F0 | 	shl	local01, #3
1b548     14 00 00 FF 
1b54c     38 E5 05 F1 | 	add	objptr, ##10552
1b550     F2 26 02 F1 | 	add	local01, objptr
1b554     A7 12 02 F6 | 	mov	arg01, fp
1b558     14 00 00 FF 
1b55c     38 E5 85 F1 | 	sub	objptr, ##10552
1b560     5C 22 BF FD | 	call	#_converttoint
1b564     06 26 06 F1 | 	add	local01, #6
1b568     13 FB 51 FC | 	wrword	result1, local01
1b56c     A7 F0 03 F6 | 	mov	ptra, fp
1b570     B2 00 A0 FD | 	call	#popregs_
1b574                 | _do_setdelay_ret
1b574     2D 00 64 FD | 	ret
1b578                 | 
1b578                 | ' 
1b578                 | ' ' ------------------ setenv
1b578                 | ' 
1b578                 | ' sub do_setenv
1b578                 | _do_setenv
1b578     02 4A 05 F6 | 	mov	COUNT_, #2
1b57c     A8 00 A0 FD | 	call	#pushregs_
1b580     18 F0 07 F1 | 	add	ptra, #24
1b584     54 20 BF FD | 	call	#_pop
1b588     FD 12 02 F6 | 	mov	arg01, result1
1b58c     FE 26 02 F6 | 	mov	local01, result2
1b590     FF 28 02 F6 | 	mov	local02, result3
1b594     A7 12 62 FC | 	wrlong	arg01, fp
1b598     04 4E 05 F1 | 	add	fp, #4
1b59c     A7 26 62 FC | 	wrlong	local01, fp
1b5a0     04 4E 05 F1 | 	add	fp, #4
1b5a4     A7 28 62 FC | 	wrlong	local02, fp
1b5a8     08 4E 85 F1 | 	sub	fp, #8
1b5ac     2C 20 BF FD | 	call	#_pop
1b5b0     FD 28 02 F6 | 	mov	local02, result1
1b5b4     0C 4E 05 F1 | 	add	fp, #12
1b5b8     A7 28 62 FC | 	wrlong	local02, fp
1b5bc     04 4E 05 F1 | 	add	fp, #4
1b5c0     A7 FC 61 FC | 	wrlong	result2, fp
1b5c4     04 4E 05 F1 | 	add	fp, #4
1b5c8     A7 FE 61 FC | 	wrlong	result3, fp
1b5cc     08 4E 85 F1 | 	sub	fp, #8
1b5d0     A7 12 02 F6 | 	mov	arg01, fp
1b5d4     0C 4E 85 F1 | 	sub	fp, #12
1b5d8     E4 21 BF FD | 	call	#_converttoint
1b5dc     FD 28 02 F6 | 	mov	local02, result1
1b5e0     14 27 02 F6 | 	mov	local01, local02
1b5e4     01 26 66 F0 | 	shl	local01, #1
1b5e8     14 27 02 F1 | 	add	local01, local02
1b5ec     03 26 66 F0 | 	shl	local01, #3
1b5f0     14 00 00 FF 
1b5f4     38 E5 05 F1 | 	add	objptr, ##10552
1b5f8     F2 26 02 F1 | 	add	local01, objptr
1b5fc     A7 12 02 F6 | 	mov	arg01, fp
1b600     14 00 00 FF 
1b604     38 E5 85 F1 | 	sub	objptr, ##10552
1b608     B4 21 BF FD | 	call	#_converttoint
1b60c     05 26 06 F1 | 	add	local01, #5
1b610     13 FB 41 FC | 	wrbyte	result1, local01
1b614     A7 F0 03 F6 | 	mov	ptra, fp
1b618     B2 00 A0 FD | 	call	#popregs_
1b61c                 | _do_setenv_ret
1b61c     2D 00 64 FD | 	ret
1b620                 | 
1b620                 | ' 
1b620                 | ' ' ------------------ setlen
1b620                 | ' 
1b620                 | ' sub do_setlen
1b620                 | _do_setlen
1b620     02 4A 05 F6 | 	mov	COUNT_, #2
1b624     A8 00 A0 FD | 	call	#pushregs_
1b628     18 F0 07 F1 | 	add	ptra, #24
1b62c     AC 1F BF FD | 	call	#_pop
1b630     FD 12 02 F6 | 	mov	arg01, result1
1b634     FE 26 02 F6 | 	mov	local01, result2
1b638     FF 28 02 F6 | 	mov	local02, result3
1b63c     A7 12 62 FC | 	wrlong	arg01, fp
1b640     04 4E 05 F1 | 	add	fp, #4
1b644     A7 26 62 FC | 	wrlong	local01, fp
1b648     04 4E 05 F1 | 	add	fp, #4
1b64c     A7 28 62 FC | 	wrlong	local02, fp
1b650     08 4E 85 F1 | 	sub	fp, #8
1b654     84 1F BF FD | 	call	#_pop
1b658     FD 28 02 F6 | 	mov	local02, result1
1b65c     0C 4E 05 F1 | 	add	fp, #12
1b660     A7 28 62 FC | 	wrlong	local02, fp
1b664     04 4E 05 F1 | 	add	fp, #4
1b668     A7 FC 61 FC | 	wrlong	result2, fp
1b66c     04 4E 05 F1 | 	add	fp, #4
1b670     A7 FE 61 FC | 	wrlong	result3, fp
1b674     08 4E 85 F1 | 	sub	fp, #8
1b678     A7 12 02 F6 | 	mov	arg01, fp
1b67c     0C 4E 85 F1 | 	sub	fp, #12
1b680     3C 21 BF FD | 	call	#_converttoint
1b684     FD 28 02 F6 | 	mov	local02, result1
1b688     14 27 02 F6 | 	mov	local01, local02
1b68c     01 26 66 F0 | 	shl	local01, #1
1b690     14 27 02 F1 | 	add	local01, local02
1b694     03 26 66 F0 | 	shl	local01, #3
1b698     14 00 00 FF 
1b69c     38 E5 05 F1 | 	add	objptr, ##10552
1b6a0     F2 26 02 F1 | 	add	local01, objptr
1b6a4     A7 12 02 F6 | 	mov	arg01, fp
1b6a8     14 00 00 FF 
1b6ac     38 E5 85 F1 | 	sub	objptr, ##10552
1b6b0     C8 21 BF FD | 	call	#_converttofloat
1b6b4     08 26 06 F1 | 	add	local01, #8
1b6b8     13 FB 61 FC | 	wrlong	result1, local01
1b6bc     A7 F0 03 F6 | 	mov	ptra, fp
1b6c0     B2 00 A0 FD | 	call	#popregs_
1b6c4                 | _do_setlen_ret
1b6c4     2D 00 64 FD | 	ret
1b6c8                 | 
1b6c8                 | ' 
1b6c8                 | ' ' ------------------ setpan
1b6c8                 | ' 
1b6c8                 | ' sub do_setpan
1b6c8                 | _do_setpan
1b6c8     02 4A 05 F6 | 	mov	COUNT_, #2
1b6cc     A8 00 A0 FD | 	call	#pushregs_
1b6d0     18 F0 07 F1 | 	add	ptra, #24
1b6d4     04 1F BF FD | 	call	#_pop
1b6d8     FD 12 02 F6 | 	mov	arg01, result1
1b6dc     FE 26 02 F6 | 	mov	local01, result2
1b6e0     FF 28 02 F6 | 	mov	local02, result3
1b6e4     A7 12 62 FC | 	wrlong	arg01, fp
1b6e8     04 4E 05 F1 | 	add	fp, #4
1b6ec     A7 26 62 FC | 	wrlong	local01, fp
1b6f0     04 4E 05 F1 | 	add	fp, #4
1b6f4     A7 28 62 FC | 	wrlong	local02, fp
1b6f8     08 4E 85 F1 | 	sub	fp, #8
1b6fc     DC 1E BF FD | 	call	#_pop
1b700     FD 28 02 F6 | 	mov	local02, result1
1b704     0C 4E 05 F1 | 	add	fp, #12
1b708     A7 28 62 FC | 	wrlong	local02, fp
1b70c     04 4E 05 F1 | 	add	fp, #4
1b710     A7 FC 61 FC | 	wrlong	result2, fp
1b714     04 4E 05 F1 | 	add	fp, #4
1b718     A7 FE 61 FC | 	wrlong	result3, fp
1b71c     08 4E 85 F1 | 	sub	fp, #8
1b720     A7 12 02 F6 | 	mov	arg01, fp
1b724     0C 4E 85 F1 | 	sub	fp, #12
1b728     94 20 BF FD | 	call	#_converttoint
1b72c     FD 28 02 F6 | 	mov	local02, result1
1b730     14 27 02 F6 | 	mov	local01, local02
1b734     01 26 66 F0 | 	shl	local01, #1
1b738     14 27 02 F1 | 	add	local01, local02
1b73c     03 26 66 F0 | 	shl	local01, #3
1b740     14 00 00 FF 
1b744     38 E5 05 F1 | 	add	objptr, ##10552
1b748     F2 26 02 F1 | 	add	local01, objptr
1b74c     A7 12 02 F6 | 	mov	arg01, fp
1b750     14 00 00 FF 
1b754     38 E5 85 F1 | 	sub	objptr, ##10552
1b758     20 21 BF FD | 	call	#_converttofloat
1b75c     10 26 06 F1 | 	add	local01, #16
1b760     13 FB 61 FC | 	wrlong	result1, local01
1b764     A7 F0 03 F6 | 	mov	ptra, fp
1b768     B2 00 A0 FD | 	call	#popregs_
1b76c                 | _do_setpan_ret
1b76c     2D 00 64 FD | 	ret
1b770                 | 
1b770                 | ' 
1b770                 | ' ' ------------------ setsustain
1b770                 | ' 
1b770                 | ' sub do_setsustain
1b770                 | _do_setsustain
1b770     02 4A 05 F6 | 	mov	COUNT_, #2
1b774     A8 00 A0 FD | 	call	#pushregs_
1b778     18 F0 07 F1 | 	add	ptra, #24
1b77c     5C 1E BF FD | 	call	#_pop
1b780     FD 12 02 F6 | 	mov	arg01, result1
1b784     FE 26 02 F6 | 	mov	local01, result2
1b788     FF 28 02 F6 | 	mov	local02, result3
1b78c     A7 12 62 FC | 	wrlong	arg01, fp
1b790     04 4E 05 F1 | 	add	fp, #4
1b794     A7 26 62 FC | 	wrlong	local01, fp
1b798     04 4E 05 F1 | 	add	fp, #4
1b79c     A7 28 62 FC | 	wrlong	local02, fp
1b7a0     08 4E 85 F1 | 	sub	fp, #8
1b7a4     34 1E BF FD | 	call	#_pop
1b7a8     FD 28 02 F6 | 	mov	local02, result1
1b7ac     0C 4E 05 F1 | 	add	fp, #12
1b7b0     A7 28 62 FC | 	wrlong	local02, fp
1b7b4     04 4E 05 F1 | 	add	fp, #4
1b7b8     A7 FC 61 FC | 	wrlong	result2, fp
1b7bc     04 4E 05 F1 | 	add	fp, #4
1b7c0     A7 FE 61 FC | 	wrlong	result3, fp
1b7c4     08 4E 85 F1 | 	sub	fp, #8
1b7c8     A7 12 02 F6 | 	mov	arg01, fp
1b7cc     0C 4E 85 F1 | 	sub	fp, #12
1b7d0     EC 1F BF FD | 	call	#_converttoint
1b7d4     FD 28 02 F6 | 	mov	local02, result1
1b7d8     14 27 02 F6 | 	mov	local01, local02
1b7dc     01 26 66 F0 | 	shl	local01, #1
1b7e0     14 27 02 F1 | 	add	local01, local02
1b7e4     03 26 66 F0 | 	shl	local01, #3
1b7e8     14 00 00 FF 
1b7ec     38 E5 05 F1 | 	add	objptr, ##10552
1b7f0     F2 26 02 F1 | 	add	local01, objptr
1b7f4     A7 12 02 F6 | 	mov	arg01, fp
1b7f8     14 00 00 FF 
1b7fc     38 E5 85 F1 | 	sub	objptr, ##10552
1b800     BC 1F BF FD | 	call	#_converttoint
1b804     14 26 06 F1 | 	add	local01, #20
1b808     13 FB 51 FC | 	wrword	result1, local01
1b80c     A7 F0 03 F6 | 	mov	ptra, fp
1b810     B2 00 A0 FD | 	call	#popregs_
1b814                 | _do_setsustain_ret
1b814     2D 00 64 FD | 	ret
1b818                 | 
1b818                 | ' 
1b818                 | ' ' ------------------ setvol
1b818                 | ' 
1b818                 | ' sub do_setvol
1b818                 | _do_setvol
1b818     02 4A 05 F6 | 	mov	COUNT_, #2
1b81c     A8 00 A0 FD | 	call	#pushregs_
1b820     18 F0 07 F1 | 	add	ptra, #24
1b824     B4 1D BF FD | 	call	#_pop
1b828     FD 12 02 F6 | 	mov	arg01, result1
1b82c     FE 26 02 F6 | 	mov	local01, result2
1b830     FF 28 02 F6 | 	mov	local02, result3
1b834     A7 12 62 FC | 	wrlong	arg01, fp
1b838     04 4E 05 F1 | 	add	fp, #4
1b83c     A7 26 62 FC | 	wrlong	local01, fp
1b840     04 4E 05 F1 | 	add	fp, #4
1b844     A7 28 62 FC | 	wrlong	local02, fp
1b848     08 4E 85 F1 | 	sub	fp, #8
1b84c     8C 1D BF FD | 	call	#_pop
1b850     FD 28 02 F6 | 	mov	local02, result1
1b854     0C 4E 05 F1 | 	add	fp, #12
1b858     A7 28 62 FC | 	wrlong	local02, fp
1b85c     04 4E 05 F1 | 	add	fp, #4
1b860     A7 FC 61 FC | 	wrlong	result2, fp
1b864     04 4E 05 F1 | 	add	fp, #4
1b868     A7 FE 61 FC | 	wrlong	result3, fp
1b86c     08 4E 85 F1 | 	sub	fp, #8
1b870     A7 12 02 F6 | 	mov	arg01, fp
1b874     0C 4E 85 F1 | 	sub	fp, #12
1b878     44 1F BF FD | 	call	#_converttoint
1b87c     FD 28 02 F6 | 	mov	local02, result1
1b880     14 27 02 F6 | 	mov	local01, local02
1b884     01 26 66 F0 | 	shl	local01, #1
1b888     14 27 02 F1 | 	add	local01, local02
1b88c     03 26 66 F0 | 	shl	local01, #3
1b890     14 00 00 FF 
1b894     38 E5 05 F1 | 	add	objptr, ##10552
1b898     F2 26 02 F1 | 	add	local01, objptr
1b89c     A7 12 02 F6 | 	mov	arg01, fp
1b8a0     14 00 00 FF 
1b8a4     38 E5 85 F1 | 	sub	objptr, ##10552
1b8a8     D0 1F BF FD | 	call	#_converttofloat
1b8ac     0C 26 06 F1 | 	add	local01, #12
1b8b0     13 FB 61 FC | 	wrlong	result1, local01
1b8b4     A7 F0 03 F6 | 	mov	ptra, fp
1b8b8     B2 00 A0 FD | 	call	#popregs_
1b8bc                 | _do_setvol_ret
1b8bc     2D 00 64 FD | 	ret
1b8c0                 | 
1b8c0                 | ' 
1b8c0                 | ' ' ------------------ setwave
1b8c0                 | ' 
1b8c0                 | ' sub do_setwave
1b8c0                 | _do_setwave
1b8c0     02 4A 05 F6 | 	mov	COUNT_, #2
1b8c4     A8 00 A0 FD | 	call	#pushregs_
1b8c8     18 F0 07 F1 | 	add	ptra, #24
1b8cc     0C 1D BF FD | 	call	#_pop
1b8d0     FD 12 02 F6 | 	mov	arg01, result1
1b8d4     FE 26 02 F6 | 	mov	local01, result2
1b8d8     FF 28 02 F6 | 	mov	local02, result3
1b8dc     A7 12 62 FC | 	wrlong	arg01, fp
1b8e0     04 4E 05 F1 | 	add	fp, #4
1b8e4     A7 26 62 FC | 	wrlong	local01, fp
1b8e8     04 4E 05 F1 | 	add	fp, #4
1b8ec     A7 28 62 FC | 	wrlong	local02, fp
1b8f0     08 4E 85 F1 | 	sub	fp, #8
1b8f4     E4 1C BF FD | 	call	#_pop
1b8f8     FD 28 02 F6 | 	mov	local02, result1
1b8fc     0C 4E 05 F1 | 	add	fp, #12
1b900     A7 28 62 FC | 	wrlong	local02, fp
1b904     04 4E 05 F1 | 	add	fp, #4
1b908     A7 FC 61 FC | 	wrlong	result2, fp
1b90c     04 4E 05 F1 | 	add	fp, #4
1b910     A7 FE 61 FC | 	wrlong	result3, fp
1b914     08 4E 85 F1 | 	sub	fp, #8
1b918     A7 12 02 F6 | 	mov	arg01, fp
1b91c     0C 4E 85 F1 | 	sub	fp, #12
1b920     9C 1E BF FD | 	call	#_converttoint
1b924     FD 28 02 F6 | 	mov	local02, result1
1b928     14 27 02 F6 | 	mov	local01, local02
1b92c     01 26 66 F0 | 	shl	local01, #1
1b930     14 27 02 F1 | 	add	local01, local02
1b934     03 26 66 F0 | 	shl	local01, #3
1b938     14 00 00 FF 
1b93c     38 E5 05 F1 | 	add	objptr, ##10552
1b940     F2 26 02 F1 | 	add	local01, objptr
1b944     A7 12 02 F6 | 	mov	arg01, fp
1b948     14 00 00 FF 
1b94c     38 E5 85 F1 | 	sub	objptr, ##10552
1b950     6C 1E BF FD | 	call	#_converttoint
1b954     04 26 06 F1 | 	add	local01, #4
1b958     13 FB 41 FC | 	wrbyte	result1, local01
1b95c     A7 F0 03 F6 | 	mov	ptra, fp
1b960     B2 00 A0 FD | 	call	#popregs_
1b964                 | _do_setwave_ret
1b964     2D 00 64 FD | 	ret
1b968                 | 
1b968                 | ' 
1b968                 | ' ' ------------------ shutup
1b968                 | ' 
1b968                 | ' sub do_shutup
1b968                 | _do_shutup
1b968     03 4A 05 F6 | 	mov	COUNT_, #3
1b96c     A8 00 A0 FD | 	call	#pushregs_
1b970     18 F0 07 F1 | 	add	ptra, #24
1b974     4A 00 00 FF 
1b978     80 E4 05 F1 | 	add	objptr, ##38016
1b97c     F2 26 02 FB | 	rdlong	local01, objptr
1b980     13 29 02 F6 | 	mov	local02, local01
1b984     01 28 66 F0 | 	shl	local02, #1
1b988     13 29 02 F1 | 	add	local02, local01
1b98c     02 28 66 F0 | 	shl	local02, #2
1b990     03 00 00 FF 
1b994     04 E4 85 F1 | 	sub	objptr, ##1540
1b998     F2 28 02 F1 | 	add	local02, objptr
1b99c     14 2B 0A FB | 	rdlong	local03, local02 wz
1b9a0     14 4E 05 F1 | 	add	fp, #20
1b9a4     A7 2A 62 FC | 	wrlong	local03, fp
1b9a8                 | ' 
1b9a8                 | ' numpar=compiledline(lineptr_e).result.uresult
1b9a8                 | ' if numpar=0 then
1b9a8     14 4E 85 F1 | 	sub	fp, #20
1b9ac     47 00 00 FF 
1b9b0     7C E4 85 F1 | 	sub	objptr, ##36476
1b9b4     50 00 90 5D |  if_ne	jmp	#LR__2162
1b9b8                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1b9b8     10 4E 05 F1 | 	add	fp, #16
1b9bc     A7 00 68 FC | 	wrlong	#0, fp
1b9c0     37 00 00 FF 
1b9c4     10 E4 05 F1 | 	add	objptr, ##28176
1b9c8     97 16 48 FB | 	callpa	#(@LR__2161-@LR__2160)>>2,fcache_load_ptr_
1b9cc                 | LR__2160
1b9cc     F2 12 02 FB | 	rdlong	arg01, objptr
1b9d0     A7 2A 02 FB | 	rdlong	local03, fp
1b9d4     06 2A 66 F0 | 	shl	local03, #6
1b9d8     15 13 02 F1 | 	add	arg01, local03
1b9dc     14 12 06 F1 | 	add	arg01, #20
1b9e0     09 01 58 FC | 	wrword	#0, arg01
1b9e4     A7 2A 02 FB | 	rdlong	local03, fp
1b9e8     01 2A 06 F1 | 	add	local03, #1
1b9ec     A7 2A 62 FC | 	wrlong	local03, fp
1b9f0     08 2A 56 F2 | 	cmps	local03, #8 wc
1b9f4     D4 FF 9F CD |  if_b	jmp	#LR__2160
1b9f8                 | LR__2161
1b9f8     37 00 00 FF 
1b9fc     10 E4 85 F1 | 	sub	objptr, ##28176
1ba00     10 4E 85 F1 | 	sub	fp, #16
1ba04     64 00 90 FD | 	jmp	#LR__2163
1ba08                 | LR__2162
1ba08     D0 1B BF FD | 	call	#_pop
1ba0c     FF 26 02 F6 | 	mov	local01, result3
1ba10     A7 FA 61 FC | 	wrlong	result1, fp
1ba14     04 4E 05 F1 | 	add	fp, #4
1ba18     A7 FC 61 FC | 	wrlong	result2, fp
1ba1c     04 4E 05 F1 | 	add	fp, #4
1ba20     A7 26 62 FC | 	wrlong	local01, fp
1ba24     08 4E 85 F1 | 	sub	fp, #8
1ba28     A7 12 02 F6 | 	mov	arg01, fp
1ba2c     90 1D BF FD | 	call	#_converttoint
1ba30     FD 2A 52 F6 | 	abs	local03, result1 wc
1ba34     07 2A 06 F5 | 	and	local03, #7
1ba38     15 29 82 F6 | 	negc	local02, local03
1ba3c     0C 4E 05 F1 | 	add	fp, #12
1ba40     A7 28 62 FC | 	wrlong	local02, fp
1ba44     37 00 00 FF 
1ba48     10 E4 05 F1 | 	add	objptr, ##28176
1ba4c     F2 12 02 FB | 	rdlong	arg01, objptr
1ba50     37 00 00 FF 
1ba54     10 E4 85 F1 | 	sub	objptr, ##28176
1ba58     0C 4E 85 F1 | 	sub	fp, #12
1ba5c     06 28 66 F0 | 	shl	local02, #6
1ba60     14 13 02 F1 | 	add	arg01, local02
1ba64     14 12 06 F1 | 	add	arg01, #20
1ba68     09 01 58 FC | 	wrword	#0, arg01
1ba6c                 | LR__2163
1ba6c     A7 F0 03 F6 | 	mov	ptra, fp
1ba70     B2 00 A0 FD | 	call	#popregs_
1ba74                 | _do_shutup_ret
1ba74     2D 00 64 FD | 	ret
1ba78                 | 
1ba78                 | ' 
1ba78                 | ' ' ------------------ sin
1ba78                 | ' 
1ba78                 | ' sub do_sin
1ba78                 | _do_sin
1ba78     01 4A 05 F6 | 	mov	COUNT_, #1
1ba7c     A8 00 A0 FD | 	call	#pushregs_
1ba80     10 F0 07 F1 | 	add	ptra, #16
1ba84     4A 00 00 FF 
1ba88     80 E4 05 F1 | 	add	objptr, ##38016
1ba8c     F2 26 02 FB | 	rdlong	local01, objptr
1ba90     13 17 02 F6 | 	mov	arg03, local01
1ba94     01 16 66 F0 | 	shl	arg03, #1
1ba98     13 17 02 F1 | 	add	arg03, local01
1ba9c     02 16 66 F0 | 	shl	arg03, #2
1baa0     03 00 00 FF 
1baa4     04 E4 85 F1 | 	sub	objptr, ##1540
1baa8     F2 16 02 F1 | 	add	arg03, objptr
1baac     0B 17 02 FB | 	rdlong	arg03, arg03
1bab0     0C 4E 05 F1 | 	add	fp, #12
1bab4     A7 16 62 FC | 	wrlong	arg03, fp
1bab8                 | ' 
1bab8                 | ' numpar=compiledline(lineptr_e).result.uresult
1bab8                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1bab8     0C 4E 85 F1 | 	sub	fp, #12
1babc     02 16 16 F2 | 	cmp	arg03, #2 wc
1bac0     47 00 00 FF 
1bac4     7C E4 85 F1 | 	sub	objptr, ##36476
1bac8     0C 4E 05 C1 |  if_b	add	fp, #12
1bacc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1bad0     0C 4E 85 C1 |  if_b	sub	fp, #12
1bad4     40 00 90 4D |  if_c_and_nz	jmp	#LR__2170
1bad8     00 12 06 F6 | 	mov	arg01, #0
1badc     30 0B B1 FD | 	call	#__system___getiolock_0606
1bae0     FD 12 02 F6 | 	mov	arg01, result1
1bae4     84 AE B0 FD | 	call	#__system___lockmem
1bae8     B8 01 00 FF 
1baec     35 14 06 F6 | 	mov	arg02, ##@LR__5971
1baf0     00 12 06 F6 | 	mov	arg01, #0
1baf4     00 16 06 F6 | 	mov	arg03, #0
1baf8     68 BB B0 FD | 	call	#__system___basic_print_string
1bafc     00 12 06 F6 | 	mov	arg01, #0
1bb00     0C 0B B1 FD | 	call	#__system___getiolock_0606
1bb04     FD 00 68 FC | 	wrlong	#0, result1
1bb08     27 12 06 F6 | 	mov	arg01, #39
1bb0c     00 14 06 F6 | 	mov	arg02, #0
1bb10     68 74 B0 FD | 	call	#_printerror
1bb14     64 00 90 FD | 	jmp	#LR__2171
1bb18                 | LR__2170
1bb18     C0 1A BF FD | 	call	#_pop
1bb1c     A7 FA 61 FC | 	wrlong	result1, fp
1bb20     04 4E 05 F1 | 	add	fp, #4
1bb24     A7 FC 61 FC | 	wrlong	result2, fp
1bb28     04 4E 05 F1 | 	add	fp, #4
1bb2c     A7 FE 61 FC | 	wrlong	result3, fp
1bb30     08 4E 85 F1 | 	sub	fp, #8
1bb34     52 00 00 FF 
1bb38     A8 E4 05 F1 | 	add	objptr, ##42152
1bb3c     F2 26 02 FB | 	rdlong	local01, objptr
1bb40     52 00 00 FF 
1bb44     A8 E4 85 F1 | 	sub	objptr, ##42152
1bb48     A7 12 02 F6 | 	mov	arg01, fp
1bb4c     2C 1D BF FD | 	call	#_converttofloat
1bb50     FD 14 02 F6 | 	mov	arg02, result1
1bb54     13 13 02 F6 | 	mov	arg01, local01
1bb58     8C DC B0 FD | 	call	#__system___float_mul
1bb5c     FD 12 02 F6 | 	mov	arg01, result1
1bb60     E4 E5 B0 FD | 	call	#__system____builtin_sinf
1bb64     A7 FA 61 FC | 	wrlong	result1, fp
1bb68     08 4E 05 F1 | 	add	fp, #8
1bb6c     A7 3C 68 FC | 	wrlong	#30, fp
1bb70     08 4E 85 F1 | 	sub	fp, #8
1bb74     A7 12 02 F6 | 	mov	arg01, fp
1bb78     F8 1A BF FD | 	call	#_push
1bb7c                 | LR__2171
1bb7c     A7 F0 03 F6 | 	mov	ptra, fp
1bb80     B2 00 A0 FD | 	call	#popregs_
1bb84                 | _do_sin_ret
1bb84     2D 00 64 FD | 	ret
1bb88                 | 
1bb88                 | ' 
1bb88                 | ' ' ------------------ skip
1bb88                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1bb88                 | ' 
1bb88                 | ' sub do_skip
1bb88                 | _do_skip
1bb88     4A 00 00 FF 
1bb8c     80 E4 05 F1 | 	add	objptr, ##38016
1bb90     F2 00 02 FB | 	rdlong	_var01, objptr
1bb94     00 03 02 F6 | 	mov	_var02, _var01
1bb98     01 02 66 F0 | 	shl	_var02, #1
1bb9c     00 03 02 F1 | 	add	_var02, _var01
1bba0     02 02 66 F0 | 	shl	_var02, #2
1bba4     03 00 00 FF 
1bba8     04 E4 85 F1 | 	sub	objptr, ##1540
1bbac     F2 02 02 F1 | 	add	_var02, objptr
1bbb0     01 03 02 FB | 	rdlong	_var02, _var02
1bbb4     01 02 86 F1 | 	sub	_var02, #1
1bbb8     03 00 00 FF 
1bbbc     04 E4 05 F1 | 	add	objptr, ##1540
1bbc0     F2 02 62 FC | 	wrlong	_var02, objptr
1bbc4     4A 00 00 FF 
1bbc8     80 E4 85 F1 | 	sub	objptr, ##38016
1bbcc                 | _do_skip_ret
1bbcc     2D 00 64 FD | 	ret
1bbd0                 | 
1bbd0                 | ' 
1bbd0                 | ' ' ------------------ sprite
1bbd0                 | ' 
1bbd0                 | ' sub do_sprite
1bbd0                 | _do_sprite
1bbd0     00 4A 05 F6 | 	mov	COUNT_, #0
1bbd4     A8 00 A0 FD | 	call	#pushregs_
1bbd8     30 F0 07 F1 | 	add	ptra, #48
1bbdc     FC 19 BF FD | 	call	#_pop
1bbe0     FD 16 02 F6 | 	mov	arg03, result1
1bbe4     FE 14 02 F6 | 	mov	arg02, result2
1bbe8     FF 12 02 F6 | 	mov	arg01, result3
1bbec     18 4E 05 F1 | 	add	fp, #24
1bbf0     A7 16 62 FC | 	wrlong	arg03, fp
1bbf4     04 4E 05 F1 | 	add	fp, #4
1bbf8     A7 14 62 FC | 	wrlong	arg02, fp
1bbfc     04 4E 05 F1 | 	add	fp, #4
1bc00     A7 12 62 FC | 	wrlong	arg01, fp
1bc04     20 4E 85 F1 | 	sub	fp, #32
1bc08     D0 19 BF FD | 	call	#_pop
1bc0c     FD 16 02 F6 | 	mov	arg03, result1
1bc10     FE 14 02 F6 | 	mov	arg02, result2
1bc14     FF 12 02 F6 | 	mov	arg01, result3
1bc18     0C 4E 05 F1 | 	add	fp, #12
1bc1c     A7 16 62 FC | 	wrlong	arg03, fp
1bc20     04 4E 05 F1 | 	add	fp, #4
1bc24     A7 14 62 FC | 	wrlong	arg02, fp
1bc28     04 4E 05 F1 | 	add	fp, #4
1bc2c     A7 12 62 FC | 	wrlong	arg01, fp
1bc30     14 4E 85 F1 | 	sub	fp, #20
1bc34     A4 19 BF FD | 	call	#_pop
1bc38     FF 16 02 F6 | 	mov	arg03, result3
1bc3c     A7 FA 61 FC | 	wrlong	result1, fp
1bc40     04 4E 05 F1 | 	add	fp, #4
1bc44     A7 FC 61 FC | 	wrlong	result2, fp
1bc48     04 4E 05 F1 | 	add	fp, #4
1bc4c     A7 16 62 FC | 	wrlong	arg03, fp
1bc50     08 4E 85 F1 | 	sub	fp, #8
1bc54     A7 12 02 F6 | 	mov	arg01, fp
1bc58     64 1B BF FD | 	call	#_converttoint
1bc5c     24 4E 05 F1 | 	add	fp, #36
1bc60     A7 FA 61 FC | 	wrlong	result1, fp
1bc64     18 4E 85 F1 | 	sub	fp, #24
1bc68     A7 12 02 F6 | 	mov	arg01, fp
1bc6c     0C 4E 85 F1 | 	sub	fp, #12
1bc70     4C 1B BF FD | 	call	#_converttoint
1bc74     28 4E 05 F1 | 	add	fp, #40
1bc78     A7 FA 61 FC | 	wrlong	result1, fp
1bc7c     10 4E 85 F1 | 	sub	fp, #16
1bc80     A7 12 02 F6 | 	mov	arg01, fp
1bc84     18 4E 85 F1 | 	sub	fp, #24
1bc88     34 1B BF FD | 	call	#_converttoint
1bc8c     2C 4E 05 F1 | 	add	fp, #44
1bc90     A7 FA 61 FC | 	wrlong	result1, fp
1bc94     08 4E 85 F1 | 	sub	fp, #8
1bc98     A7 12 02 FB | 	rdlong	arg01, fp
1bc9c     04 4E 05 F1 | 	add	fp, #4
1bca0     A7 14 02 FB | 	rdlong	arg02, fp
1bca4     FD 16 02 F6 | 	mov	arg03, result1
1bca8     28 4E 85 F1 | 	sub	fp, #40
1bcac     B0 82 B0 FD | 	call	#_hg010b_spin2_setspritepos
1bcb0     A7 F0 03 F6 | 	mov	ptra, fp
1bcb4     B2 00 A0 FD | 	call	#popregs_
1bcb8                 | _do_sprite_ret
1bcb8     2D 00 64 FD | 	ret
1bcbc                 | 
1bcbc                 | ' 
1bcbc                 | ' ' ------------------ sqr
1bcbc                 | ' 
1bcbc                 | ' sub do_sqr
1bcbc                 | _do_sqr
1bcbc     01 4A 05 F6 | 	mov	COUNT_, #1
1bcc0     A8 00 A0 FD | 	call	#pushregs_
1bcc4     10 F0 07 F1 | 	add	ptra, #16
1bcc8     4A 00 00 FF 
1bccc     80 E4 05 F1 | 	add	objptr, ##38016
1bcd0     F2 26 02 FB | 	rdlong	local01, objptr
1bcd4     13 17 02 F6 | 	mov	arg03, local01
1bcd8     01 16 66 F0 | 	shl	arg03, #1
1bcdc     13 17 02 F1 | 	add	arg03, local01
1bce0     02 16 66 F0 | 	shl	arg03, #2
1bce4     03 00 00 FF 
1bce8     04 E4 85 F1 | 	sub	objptr, ##1540
1bcec     F2 16 02 F1 | 	add	arg03, objptr
1bcf0     0B 17 02 FB | 	rdlong	arg03, arg03
1bcf4     0C 4E 05 F1 | 	add	fp, #12
1bcf8     A7 16 62 FC | 	wrlong	arg03, fp
1bcfc                 | ' 
1bcfc                 | ' numpar=compiledline(lineptr_e).result.uresult
1bcfc                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1bcfc     0C 4E 85 F1 | 	sub	fp, #12
1bd00     02 16 16 F2 | 	cmp	arg03, #2 wc
1bd04     47 00 00 FF 
1bd08     7C E4 85 F1 | 	sub	objptr, ##36476
1bd0c     0C 4E 05 C1 |  if_b	add	fp, #12
1bd10     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1bd14     0C 4E 85 C1 |  if_b	sub	fp, #12
1bd18     40 00 90 4D |  if_c_and_nz	jmp	#LR__2180
1bd1c     00 12 06 F6 | 	mov	arg01, #0
1bd20     EC 08 B1 FD | 	call	#__system___getiolock_0606
1bd24     FD 12 02 F6 | 	mov	arg01, result1
1bd28     40 AC B0 FD | 	call	#__system___lockmem
1bd2c     B8 01 00 FF 
1bd30     3B 14 06 F6 | 	mov	arg02, ##@LR__5972
1bd34     00 12 06 F6 | 	mov	arg01, #0
1bd38     00 16 06 F6 | 	mov	arg03, #0
1bd3c     24 B9 B0 FD | 	call	#__system___basic_print_string
1bd40     00 12 06 F6 | 	mov	arg01, #0
1bd44     C8 08 B1 FD | 	call	#__system___getiolock_0606
1bd48     FD 00 68 FC | 	wrlong	#0, result1
1bd4c     27 12 06 F6 | 	mov	arg01, #39
1bd50     00 14 06 F6 | 	mov	arg02, #0
1bd54     24 72 B0 FD | 	call	#_printerror
1bd58     48 00 90 FD | 	jmp	#LR__2181
1bd5c                 | LR__2180
1bd5c     7C 18 BF FD | 	call	#_pop
1bd60     FF 26 02 F6 | 	mov	local01, result3
1bd64     A7 FA 61 FC | 	wrlong	result1, fp
1bd68     04 4E 05 F1 | 	add	fp, #4
1bd6c     A7 FC 61 FC | 	wrlong	result2, fp
1bd70     04 4E 05 F1 | 	add	fp, #4
1bd74     A7 26 62 FC | 	wrlong	local01, fp
1bd78     08 4E 85 F1 | 	sub	fp, #8
1bd7c     A7 12 02 F6 | 	mov	arg01, fp
1bd80     F8 1A BF FD | 	call	#_converttofloat
1bd84     FD 12 02 F6 | 	mov	arg01, result1
1bd88     84 D9 B0 FD | 	call	#__system___float_sqrt
1bd8c     A7 FA 61 FC | 	wrlong	result1, fp
1bd90     08 4E 05 F1 | 	add	fp, #8
1bd94     A7 3C 68 FC | 	wrlong	#30, fp
1bd98     08 4E 85 F1 | 	sub	fp, #8
1bd9c     A7 12 02 F6 | 	mov	arg01, fp
1bda0     D0 18 BF FD | 	call	#_push
1bda4                 | LR__2181
1bda4     A7 F0 03 F6 | 	mov	ptra, fp
1bda8     B2 00 A0 FD | 	call	#popregs_
1bdac                 | _do_sqr_ret
1bdac     2D 00 64 FD | 	ret
1bdb0                 | 
1bdb0                 | ' 
1bdb0                 | ' ' ------------------ stick
1bdb0                 | ' 
1bdb0                 | ' sub do_stick
1bdb0                 | _do_stick
1bdb0     01 4A 05 F6 | 	mov	COUNT_, #1
1bdb4     A8 00 A0 FD | 	call	#pushregs_
1bdb8     10 F0 07 F1 | 	add	ptra, #16
1bdbc     4A 00 00 FF 
1bdc0     80 E4 05 F1 | 	add	objptr, ##38016
1bdc4     F2 26 02 FB | 	rdlong	local01, objptr
1bdc8     13 17 02 F6 | 	mov	arg03, local01
1bdcc     01 16 66 F0 | 	shl	arg03, #1
1bdd0     13 17 02 F1 | 	add	arg03, local01
1bdd4     02 16 66 F0 | 	shl	arg03, #2
1bdd8     03 00 00 FF 
1bddc     04 E4 85 F1 | 	sub	objptr, ##1540
1bde0     F2 16 02 F1 | 	add	arg03, objptr
1bde4     0B 17 02 FB | 	rdlong	arg03, arg03
1bde8     0C 4E 05 F1 | 	add	fp, #12
1bdec     A7 16 62 FC | 	wrlong	arg03, fp
1bdf0                 | ' 
1bdf0                 | ' numpar=compiledline(lineptr_e).result.uresult
1bdf0                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1bdf0     0C 4E 85 F1 | 	sub	fp, #12
1bdf4     02 16 16 F2 | 	cmp	arg03, #2 wc
1bdf8     47 00 00 FF 
1bdfc     7C E4 85 F1 | 	sub	objptr, ##36476
1be00     40 00 90 CD |  if_b	jmp	#LR__2190
1be04     00 12 06 F6 | 	mov	arg01, #0
1be08     04 08 B1 FD | 	call	#__system___getiolock_0606
1be0c     FD 12 02 F6 | 	mov	arg01, result1
1be10     58 AB B0 FD | 	call	#__system___lockmem
1be14     B8 01 00 FF 
1be18     41 14 06 F6 | 	mov	arg02, ##@LR__5973
1be1c     00 12 06 F6 | 	mov	arg01, #0
1be20     00 16 06 F6 | 	mov	arg03, #0
1be24     3C B8 B0 FD | 	call	#__system___basic_print_string
1be28     00 12 06 F6 | 	mov	arg01, #0
1be2c     E0 07 B1 FD | 	call	#__system___getiolock_0606
1be30     FD 00 68 FC | 	wrlong	#0, result1
1be34     27 12 06 F6 | 	mov	arg01, #39
1be38     00 14 06 F6 | 	mov	arg02, #0
1be3c     3C 71 B0 FD | 	call	#_printerror
1be40     F0 00 90 FD | 	jmp	#LR__2194
1be44                 | LR__2190
1be44                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1be44     0C 4E 05 F1 | 	add	fp, #12
1be48     A7 FE 09 FB | 	rdlong	result3, fp wz
1be4c     0C 4E 85 F1 | 	sub	fp, #12
1be50     30 00 90 5D |  if_ne	jmp	#LR__2191
1be54     52 00 00 FF 
1be58     1C E4 05 F1 | 	add	objptr, ##42012
1be5c     F2 26 02 FB | 	rdlong	local01, objptr
1be60     52 00 00 FF 
1be64     1C E4 85 F1 | 	sub	objptr, ##42012
1be68     A7 26 62 FC | 	wrlong	local01, fp
1be6c     08 4E 05 F1 | 	add	fp, #8
1be70     A7 3A 68 FC | 	wrlong	#29, fp
1be74     08 4E 85 F1 | 	sub	fp, #8
1be78     A7 12 02 F6 | 	mov	arg01, fp
1be7c     F4 17 BF FD | 	call	#_push
1be80     B0 00 90 FD | 	jmp	#LR__2194
1be84                 | LR__2191
1be84     54 17 BF FD | 	call	#_pop
1be88     A7 FA 61 FC | 	wrlong	result1, fp
1be8c     04 4E 05 F1 | 	add	fp, #4
1be90     A7 FC 61 FC | 	wrlong	result2, fp
1be94     04 4E 05 F1 | 	add	fp, #4
1be98     A7 FE 61 FC | 	wrlong	result3, fp
1be9c                 | ' t1=pop()
1be9c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1be9c     08 4E 85 F1 | 	sub	fp, #8
1bea0     1C FE 0D F2 | 	cmp	result3, #28 wz
1bea4     08 4E 05 51 |  if_ne	add	fp, #8
1bea8     A7 26 02 5B |  if_ne	rdlong	local01, fp
1beac     08 4E 85 51 |  if_ne	sub	fp, #8
1beb0     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1beb4     70 00 90 5D |  if_ne	jmp	#LR__2193
1beb8     A7 26 02 FB | 	rdlong	local01, fp
1bebc     52 00 00 FF 
1bec0     08 E5 05 F1 | 	add	objptr, ##42248
1bec4     F2 26 62 FC | 	wrlong	local01, objptr
1bec8                 | '   q=t1.result.uresult
1bec8                 | '   if q<7 then 
1bec8     52 00 00 FF 
1becc     08 E5 85 F1 | 	sub	objptr, ##42248
1bed0     07 26 56 F2 | 	cmps	local01, #7 wc
1bed4     40 00 90 3D |  if_ae	jmp	#LR__2192
1bed8     52 00 00 FF 
1bedc     08 E5 05 F1 | 	add	objptr, ##42248
1bee0     F2 26 02 FB | 	rdlong	local01, objptr
1bee4     02 26 66 F0 | 	shl	local01, #2
1bee8     EC E4 85 F1 | 	sub	objptr, #236
1beec     F2 26 02 F1 | 	add	local01, objptr
1bef0     13 27 02 FB | 	rdlong	local01, local01
1bef4     A7 26 62 FC | 	wrlong	local01, fp
1bef8     08 4E 05 F1 | 	add	fp, #8
1befc     A7 3A 68 FC | 	wrlong	#29, fp
1bf00     08 4E 85 F1 | 	sub	fp, #8
1bf04     A7 12 02 F6 | 	mov	arg01, fp
1bf08     52 00 00 FF 
1bf0c     1C E4 85 F1 | 	sub	objptr, ##42012
1bf10     60 17 BF FD | 	call	#_push
1bf14                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1bf14     1C 00 90 FD | 	jmp	#LR__2194
1bf18                 | LR__2192
1bf18     29 12 06 F6 | 	mov	arg01, #41
1bf1c     00 14 06 F6 | 	mov	arg02, #0
1bf20     58 70 B0 FD | 	call	#_printerror
1bf24                 | '      printerror(41) : return
1bf24     0C 00 90 FD | 	jmp	#LR__2194
1bf28                 | LR__2193
1bf28     29 12 06 F6 | 	mov	arg01, #41
1bf2c     00 14 06 F6 | 	mov	arg02, #0
1bf30     48 70 B0 FD | 	call	#_printerror
1bf34                 | LR__2194
1bf34     A7 F0 03 F6 | 	mov	ptra, fp
1bf38     B2 00 A0 FD | 	call	#popregs_
1bf3c                 | _do_stick_ret
1bf3c     2D 00 64 FD | 	ret
1bf40                 | 
1bf40                 | ' 
1bf40                 | ' ' ------------------ strig
1bf40                 | ' 
1bf40                 | ' sub do_strig
1bf40                 | _do_strig
1bf40     01 4A 05 F6 | 	mov	COUNT_, #1
1bf44     A8 00 A0 FD | 	call	#pushregs_
1bf48     10 F0 07 F1 | 	add	ptra, #16
1bf4c     4A 00 00 FF 
1bf50     80 E4 05 F1 | 	add	objptr, ##38016
1bf54     F2 26 02 FB | 	rdlong	local01, objptr
1bf58     13 17 02 F6 | 	mov	arg03, local01
1bf5c     01 16 66 F0 | 	shl	arg03, #1
1bf60     13 17 02 F1 | 	add	arg03, local01
1bf64     02 16 66 F0 | 	shl	arg03, #2
1bf68     03 00 00 FF 
1bf6c     04 E4 85 F1 | 	sub	objptr, ##1540
1bf70     F2 16 02 F1 | 	add	arg03, objptr
1bf74     0B 17 02 FB | 	rdlong	arg03, arg03
1bf78     0C 4E 05 F1 | 	add	fp, #12
1bf7c     A7 16 62 FC | 	wrlong	arg03, fp
1bf80                 | ' 
1bf80                 | ' numpar=compiledline(lineptr_e).result.uresult
1bf80                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1bf80     0C 4E 85 F1 | 	sub	fp, #12
1bf84     02 16 16 F2 | 	cmp	arg03, #2 wc
1bf88     47 00 00 FF 
1bf8c     7C E4 85 F1 | 	sub	objptr, ##36476
1bf90     40 00 90 CD |  if_b	jmp	#LR__2200
1bf94     00 12 06 F6 | 	mov	arg01, #0
1bf98     74 06 B1 FD | 	call	#__system___getiolock_0606
1bf9c     FD 12 02 F6 | 	mov	arg01, result1
1bfa0     C8 A9 B0 FD | 	call	#__system___lockmem
1bfa4     B8 01 00 FF 
1bfa8     49 14 06 F6 | 	mov	arg02, ##@LR__5974
1bfac     00 12 06 F6 | 	mov	arg01, #0
1bfb0     00 16 06 F6 | 	mov	arg03, #0
1bfb4     AC B6 B0 FD | 	call	#__system___basic_print_string
1bfb8     00 12 06 F6 | 	mov	arg01, #0
1bfbc     50 06 B1 FD | 	call	#__system___getiolock_0606
1bfc0     FD 00 68 FC | 	wrlong	#0, result1
1bfc4     27 12 06 F6 | 	mov	arg01, #39
1bfc8     00 14 06 F6 | 	mov	arg02, #0
1bfcc     AC 6F B0 FD | 	call	#_printerror
1bfd0     F0 00 90 FD | 	jmp	#LR__2204
1bfd4                 | LR__2200
1bfd4                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1bfd4     0C 4E 05 F1 | 	add	fp, #12
1bfd8     A7 FE 09 FB | 	rdlong	result3, fp wz
1bfdc     0C 4E 85 F1 | 	sub	fp, #12
1bfe0     30 00 90 5D |  if_ne	jmp	#LR__2201
1bfe4     52 00 00 FF 
1bfe8     38 E4 05 F1 | 	add	objptr, ##42040
1bfec     F2 26 02 FB | 	rdlong	local01, objptr
1bff0     52 00 00 FF 
1bff4     38 E4 85 F1 | 	sub	objptr, ##42040
1bff8     A7 26 62 FC | 	wrlong	local01, fp
1bffc     08 4E 05 F1 | 	add	fp, #8
1c000     A7 3A 68 FC | 	wrlong	#29, fp
1c004     08 4E 85 F1 | 	sub	fp, #8
1c008     A7 12 02 F6 | 	mov	arg01, fp
1c00c     64 16 BF FD | 	call	#_push
1c010     B0 00 90 FD | 	jmp	#LR__2204
1c014                 | LR__2201
1c014     C4 15 BF FD | 	call	#_pop
1c018     A7 FA 61 FC | 	wrlong	result1, fp
1c01c     04 4E 05 F1 | 	add	fp, #4
1c020     A7 FC 61 FC | 	wrlong	result2, fp
1c024     04 4E 05 F1 | 	add	fp, #4
1c028     A7 FE 61 FC | 	wrlong	result3, fp
1c02c                 | ' t1=pop()
1c02c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1c02c     08 4E 85 F1 | 	sub	fp, #8
1c030     1C FE 0D F2 | 	cmp	result3, #28 wz
1c034     08 4E 05 51 |  if_ne	add	fp, #8
1c038     A7 26 02 5B |  if_ne	rdlong	local01, fp
1c03c     08 4E 85 51 |  if_ne	sub	fp, #8
1c040     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1c044     70 00 90 5D |  if_ne	jmp	#LR__2203
1c048     A7 26 02 FB | 	rdlong	local01, fp
1c04c     52 00 00 FF 
1c050     08 E5 05 F1 | 	add	objptr, ##42248
1c054     F2 26 62 FC | 	wrlong	local01, objptr
1c058                 | '   q=t1.result.uresult
1c058                 | '   if q<7 then 
1c058     52 00 00 FF 
1c05c     08 E5 85 F1 | 	sub	objptr, ##42248
1c060     07 26 56 F2 | 	cmps	local01, #7 wc
1c064     40 00 90 3D |  if_ae	jmp	#LR__2202
1c068     52 00 00 FF 
1c06c     08 E5 05 F1 | 	add	objptr, ##42248
1c070     F2 26 02 FB | 	rdlong	local01, objptr
1c074     02 26 66 F0 | 	shl	local01, #2
1c078     D0 E4 85 F1 | 	sub	objptr, #208
1c07c     F2 26 02 F1 | 	add	local01, objptr
1c080     13 27 02 FB | 	rdlong	local01, local01
1c084     A7 26 62 FC | 	wrlong	local01, fp
1c088     08 4E 05 F1 | 	add	fp, #8
1c08c     A7 3A 68 FC | 	wrlong	#29, fp
1c090     08 4E 85 F1 | 	sub	fp, #8
1c094     A7 12 02 F6 | 	mov	arg01, fp
1c098     52 00 00 FF 
1c09c     38 E4 85 F1 | 	sub	objptr, ##42040
1c0a0     D0 15 BF FD | 	call	#_push
1c0a4                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1c0a4     1C 00 90 FD | 	jmp	#LR__2204
1c0a8                 | LR__2202
1c0a8     29 12 06 F6 | 	mov	arg01, #41
1c0ac     00 14 06 F6 | 	mov	arg02, #0
1c0b0     C8 6E B0 FD | 	call	#_printerror
1c0b4                 | '      printerror(41) : return
1c0b4     0C 00 90 FD | 	jmp	#LR__2204
1c0b8                 | LR__2203
1c0b8     29 12 06 F6 | 	mov	arg01, #41
1c0bc     00 14 06 F6 | 	mov	arg02, #0
1c0c0     B8 6E B0 FD | 	call	#_printerror
1c0c4                 | LR__2204
1c0c4     A7 F0 03 F6 | 	mov	ptra, fp
1c0c8     B2 00 A0 FD | 	call	#popregs_
1c0cc                 | _do_strig_ret
1c0cc     2D 00 64 FD | 	ret
1c0d0                 | 
1c0d0                 | ' 
1c0d0                 | ' ' ------------------ tan
1c0d0                 | ' 
1c0d0                 | ' sub do_tan
1c0d0                 | _do_tan
1c0d0     01 4A 05 F6 | 	mov	COUNT_, #1
1c0d4     A8 00 A0 FD | 	call	#pushregs_
1c0d8     10 F0 07 F1 | 	add	ptra, #16
1c0dc     4A 00 00 FF 
1c0e0     80 E4 05 F1 | 	add	objptr, ##38016
1c0e4     F2 26 02 FB | 	rdlong	local01, objptr
1c0e8     13 17 02 F6 | 	mov	arg03, local01
1c0ec     01 16 66 F0 | 	shl	arg03, #1
1c0f0     13 17 02 F1 | 	add	arg03, local01
1c0f4     02 16 66 F0 | 	shl	arg03, #2
1c0f8     03 00 00 FF 
1c0fc     04 E4 85 F1 | 	sub	objptr, ##1540
1c100     F2 16 02 F1 | 	add	arg03, objptr
1c104     0B 17 02 FB | 	rdlong	arg03, arg03
1c108     0C 4E 05 F1 | 	add	fp, #12
1c10c     A7 16 62 FC | 	wrlong	arg03, fp
1c110                 | ' 
1c110                 | ' numpar=compiledline(lineptr_e).result.uresult
1c110                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1c110     0C 4E 85 F1 | 	sub	fp, #12
1c114     02 16 16 F2 | 	cmp	arg03, #2 wc
1c118     47 00 00 FF 
1c11c     7C E4 85 F1 | 	sub	objptr, ##36476
1c120     0C 4E 05 C1 |  if_b	add	fp, #12
1c124     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c128     0C 4E 85 C1 |  if_b	sub	fp, #12
1c12c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2210
1c130     00 12 06 F6 | 	mov	arg01, #0
1c134     D8 04 B1 FD | 	call	#__system___getiolock_0606
1c138     FD 12 02 F6 | 	mov	arg01, result1
1c13c     2C A8 B0 FD | 	call	#__system___lockmem
1c140     B8 01 00 FF 
1c144     51 14 06 F6 | 	mov	arg02, ##@LR__5975
1c148     00 12 06 F6 | 	mov	arg01, #0
1c14c     00 16 06 F6 | 	mov	arg03, #0
1c150     10 B5 B0 FD | 	call	#__system___basic_print_string
1c154     00 12 06 F6 | 	mov	arg01, #0
1c158     B4 04 B1 FD | 	call	#__system___getiolock_0606
1c15c     FD 00 68 FC | 	wrlong	#0, result1
1c160     27 12 06 F6 | 	mov	arg01, #39
1c164     00 14 06 F6 | 	mov	arg02, #0
1c168     10 6E B0 FD | 	call	#_printerror
1c16c     64 00 90 FD | 	jmp	#LR__2211
1c170                 | LR__2210
1c170     68 14 BF FD | 	call	#_pop
1c174     A7 FA 61 FC | 	wrlong	result1, fp
1c178     04 4E 05 F1 | 	add	fp, #4
1c17c     A7 FC 61 FC | 	wrlong	result2, fp
1c180     04 4E 05 F1 | 	add	fp, #4
1c184     A7 FE 61 FC | 	wrlong	result3, fp
1c188     08 4E 85 F1 | 	sub	fp, #8
1c18c     52 00 00 FF 
1c190     A8 E4 05 F1 | 	add	objptr, ##42152
1c194     F2 26 02 FB | 	rdlong	local01, objptr
1c198     52 00 00 FF 
1c19c     A8 E4 85 F1 | 	sub	objptr, ##42152
1c1a0     A7 12 02 F6 | 	mov	arg01, fp
1c1a4     D4 16 BF FD | 	call	#_converttofloat
1c1a8     FD 14 02 F6 | 	mov	arg02, result1
1c1ac     13 13 02 F6 | 	mov	arg01, local01
1c1b0     34 D6 B0 FD | 	call	#__system___float_mul
1c1b4     FD 12 02 F6 | 	mov	arg01, result1
1c1b8     D8 E0 B0 FD | 	call	#__system____builtin_tanf
1c1bc     A7 FA 61 FC | 	wrlong	result1, fp
1c1c0     08 4E 05 F1 | 	add	fp, #8
1c1c4     A7 3C 68 FC | 	wrlong	#30, fp
1c1c8     08 4E 85 F1 | 	sub	fp, #8
1c1cc     A7 12 02 F6 | 	mov	arg01, fp
1c1d0     A0 14 BF FD | 	call	#_push
1c1d4                 | LR__2211
1c1d4     A7 F0 03 F6 | 	mov	ptra, fp
1c1d8     B2 00 A0 FD | 	call	#popregs_
1c1dc                 | _do_tan_ret
1c1dc     2D 00 64 FD | 	ret
1c1e0                 | 
1c1e0                 | ' 
1c1e0                 | ' ' ------------------ val
1c1e0                 | ' 
1c1e0                 | ' sub do_val
1c1e0                 | _do_val
1c1e0     03 4A 05 F6 | 	mov	COUNT_, #3
1c1e4     A8 00 A0 FD | 	call	#pushregs_
1c1e8     20 F0 07 F1 | 	add	ptra, #32
1c1ec     4A 00 00 FF 
1c1f0     80 E4 05 F1 | 	add	objptr, ##38016
1c1f4     F2 16 02 FB | 	rdlong	arg03, objptr
1c1f8     0B 27 02 F6 | 	mov	local01, arg03
1c1fc     01 26 66 F0 | 	shl	local01, #1
1c200     0B 27 02 F1 | 	add	local01, arg03
1c204     02 26 66 F0 | 	shl	local01, #2
1c208     03 00 00 FF 
1c20c     04 E4 85 F1 | 	sub	objptr, ##1540
1c210     F2 26 02 F1 | 	add	local01, objptr
1c214     13 17 02 FB | 	rdlong	arg03, local01
1c218     0C 4E 05 F1 | 	add	fp, #12
1c21c     A7 16 62 FC | 	wrlong	arg03, fp
1c220                 | ' 
1c220                 | ' numpar=compiledline(lineptr_e).result.uresult
1c220                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1c220     0C 4E 85 F1 | 	sub	fp, #12
1c224     02 16 16 F2 | 	cmp	arg03, #2 wc
1c228     47 00 00 FF 
1c22c     7C E4 85 F1 | 	sub	objptr, ##36476
1c230     0C 4E 05 C1 |  if_b	add	fp, #12
1c234     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c238     0C 4E 85 C1 |  if_b	sub	fp, #12
1c23c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2220
1c240     00 12 06 F6 | 	mov	arg01, #0
1c244     C8 03 B1 FD | 	call	#__system___getiolock_0606
1c248     FD 12 02 F6 | 	mov	arg01, result1
1c24c     1C A7 B0 FD | 	call	#__system___lockmem
1c250     B8 01 00 FF 
1c254     57 14 06 F6 | 	mov	arg02, ##@LR__5976
1c258     00 12 06 F6 | 	mov	arg01, #0
1c25c     00 16 06 F6 | 	mov	arg03, #0
1c260     00 B4 B0 FD | 	call	#__system___basic_print_string
1c264     00 12 06 F6 | 	mov	arg01, #0
1c268     A4 03 B1 FD | 	call	#__system___getiolock_0606
1c26c     FD 00 68 FC | 	wrlong	#0, result1
1c270     27 12 06 F6 | 	mov	arg01, #39
1c274     00 14 06 F6 | 	mov	arg02, #0
1c278     00 6D B0 FD | 	call	#_printerror
1c27c     60 02 90 FD | 	jmp	#LR__2233
1c280                 | LR__2220
1c280     58 13 BF FD | 	call	#_pop
1c284     FF 16 02 F6 | 	mov	arg03, result3
1c288     A7 FA 61 FC | 	wrlong	result1, fp
1c28c     04 4E 05 F1 | 	add	fp, #4
1c290     A7 FC 61 FC | 	wrlong	result2, fp
1c294     04 4E 05 F1 | 	add	fp, #4
1c298     A7 16 62 FC | 	wrlong	arg03, fp
1c29c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1c29c     08 4E 85 F1 | 	sub	fp, #8
1c2a0     2B 16 0E F2 | 	cmp	arg03, #43 wz
1c2a4     18 00 90 5D |  if_ne	jmp	#LR__2221
1c2a8     A7 12 02 FB | 	rdlong	arg01, fp
1c2ac     A4 14 BF FD | 	call	#_convertstring
1c2b0     A7 FA 61 FC | 	wrlong	result1, fp
1c2b4     08 4E 05 F1 | 	add	fp, #8
1c2b8     A7 3E 68 FC | 	wrlong	#31, fp
1c2bc     08 4E 85 F1 | 	sub	fp, #8
1c2c0                 | LR__2221
1c2c0                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1c2c0     08 4E 05 F1 | 	add	fp, #8
1c2c4     A7 16 02 FB | 	rdlong	arg03, fp
1c2c8     08 4E 85 F1 | 	sub	fp, #8
1c2cc     1F 16 0E F2 | 	cmp	arg03, #31 wz
1c2d0     40 00 90 AD |  if_e	jmp	#LR__2222
1c2d4     00 12 06 F6 | 	mov	arg01, #0
1c2d8     34 03 B1 FD | 	call	#__system___getiolock_0606
1c2dc     FD 12 02 F6 | 	mov	arg01, result1
1c2e0     88 A6 B0 FD | 	call	#__system___lockmem
1c2e4     B8 01 00 FF 
1c2e8     5D 14 06 F6 | 	mov	arg02, ##@LR__5977
1c2ec     00 12 06 F6 | 	mov	arg01, #0
1c2f0     00 16 06 F6 | 	mov	arg03, #0
1c2f4     6C B3 B0 FD | 	call	#__system___basic_print_string
1c2f8     00 12 06 F6 | 	mov	arg01, #0
1c2fc     10 03 B1 FD | 	call	#__system___getiolock_0606
1c300     FD 00 68 FC | 	wrlong	#0, result1
1c304     0F 12 06 F6 | 	mov	arg01, #15
1c308     00 14 06 F6 | 	mov	arg02, #0
1c30c     6C 6C B0 FD | 	call	#_printerror
1c310     CC 01 90 FD | 	jmp	#LR__2233
1c314                 | LR__2222
1c314                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1c314     A7 12 02 FB | 	rdlong	arg01, fp
1c318     01 14 06 F6 | 	mov	arg02, #1
1c31c     CC C6 B0 FD | 	call	#__system__Left_S
1c320     FD 12 02 F6 | 	mov	arg01, result1
1c324     B8 01 00 FF 
1c328     63 14 06 F6 | 	mov	arg02, ##@LR__5978
1c32c     64 A6 B0 FD | 	call	#__system___string_cmp
1c330     00 FA 0D F2 | 	cmp	result1, #0 wz
1c334     48 00 90 5D |  if_ne	jmp	#LR__2225
1c338     B8 01 00 FF 
1c33c     65 26 06 F6 | 	mov	local01, ##@LR__5979
1c340     A7 16 02 FB | 	rdlong	arg03, fp
1c344     0B 13 02 F6 | 	mov	arg01, arg03
1c348     09 29 02 F6 | 	mov	local02, arg01
1c34c     97 06 48 FB | 	callpa	#(@LR__2224-@LR__2223)>>2,fcache_load_ptr_
1c350                 | LR__2223
1c350     14 FB C9 FA | 	rdbyte	result1, local02 wz
1c354     01 28 06 51 |  if_ne	add	local02, #1
1c358     F4 FF 9F 5D |  if_ne	jmp	#LR__2223
1c35c                 | LR__2224
1c35c     09 29 82 F1 | 	sub	local02, arg01
1c360     14 15 02 F6 | 	mov	arg02, local02
1c364     01 14 86 F1 | 	sub	arg02, #1
1c368     0B 13 02 F6 | 	mov	arg01, arg03
1c36c     04 C7 B0 FD | 	call	#__system__Right_S
1c370     FD 14 02 F6 | 	mov	arg02, result1
1c374     13 13 02 F6 | 	mov	arg01, local01
1c378     4C A6 B0 FD | 	call	#__system___string_concat
1c37c     A7 FA 61 FC | 	wrlong	result1, fp
1c380                 | LR__2225
1c380                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1c380     A7 12 02 FB | 	rdlong	arg01, fp
1c384     01 14 06 F6 | 	mov	arg02, #1
1c388     60 C6 B0 FD | 	call	#__system__Left_S
1c38c     FD 12 02 F6 | 	mov	arg01, result1
1c390     B8 01 00 FF 
1c394     68 14 06 F6 | 	mov	arg02, ##@LR__5980
1c398     F8 A5 B0 FD | 	call	#__system___string_cmp
1c39c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c3a0     48 00 90 5D |  if_ne	jmp	#LR__2228
1c3a4     B8 01 00 FF 
1c3a8     6A 26 06 F6 | 	mov	local01, ##@LR__5981
1c3ac     A7 16 02 FB | 	rdlong	arg03, fp
1c3b0     0B 13 02 F6 | 	mov	arg01, arg03
1c3b4     09 29 02 F6 | 	mov	local02, arg01
1c3b8     97 06 48 FB | 	callpa	#(@LR__2227-@LR__2226)>>2,fcache_load_ptr_
1c3bc                 | LR__2226
1c3bc     14 FB C9 FA | 	rdbyte	result1, local02 wz
1c3c0     01 28 06 51 |  if_ne	add	local02, #1
1c3c4     F4 FF 9F 5D |  if_ne	jmp	#LR__2226
1c3c8                 | LR__2227
1c3c8     09 29 82 F1 | 	sub	local02, arg01
1c3cc     14 15 02 F6 | 	mov	arg02, local02
1c3d0     01 14 86 F1 | 	sub	arg02, #1
1c3d4     0B 13 02 F6 | 	mov	arg01, arg03
1c3d8     98 C6 B0 FD | 	call	#__system__Right_S
1c3dc     FD 14 02 F6 | 	mov	arg02, result1
1c3e0     13 13 02 F6 | 	mov	arg01, local01
1c3e4     E0 A5 B0 FD | 	call	#__system___string_concat
1c3e8     A7 FA 61 FC | 	wrlong	result1, fp
1c3ec                 | LR__2228
1c3ec     A7 12 02 FB | 	rdlong	arg01, fp
1c3f0     00 DC B0 FD | 	call	#__system____builtin_atof
1c3f4     1C 4E 05 F1 | 	add	fp, #28
1c3f8     A7 FA 61 FC | 	wrlong	result1, fp
1c3fc     1C 4E 85 F1 | 	sub	fp, #28
1c400     A7 12 02 FB | 	rdlong	arg01, fp
1c404     00 14 06 F6 | 	mov	arg02, #0
1c408     54 DA B0 FD | 	call	#__system____builtin_atoi
1c40c     18 4E 05 F1 | 	add	fp, #24
1c410     A7 FA 61 FC | 	wrlong	result1, fp
1c414                 | ' fval=val(t1.result.sresult)
1c414                 | ' ival=val%(t1.result.sresult)
1c414                 | ' if fval=ival then
1c414     04 4E 05 F1 | 	add	fp, #4
1c418     A7 26 02 FB | 	rdlong	local01, fp
1c41c     1C 4E 85 F1 | 	sub	fp, #28
1c420     FD 12 52 F6 | 	abs	arg01, result1 wc
1c424     1F 2A C6 C9 |  if_b	decod	local03, #31
1c428     00 2A 06 36 |  if_ae	mov	local03, #0
1c42c     B4 CF B0 FD | 	call	#__system___float_fromuns
1c430     15 FB 61 F5 | 	xor	result1, local03
1c434     FD 14 02 F6 | 	mov	arg02, result1
1c438     13 13 02 F6 | 	mov	arg01, local01
1c43c     01 16 06 F6 | 	mov	arg03, #1
1c440     D8 D7 B0 FD | 	call	#__system___float_cmp
1c444     00 FA 0D F2 | 	cmp	result1, #0 wz
1c448     20 00 90 5D |  if_ne	jmp	#LR__2229
1c44c     18 4E 05 F1 | 	add	fp, #24
1c450     A7 26 02 FB | 	rdlong	local01, fp
1c454     18 4E 85 F1 | 	sub	fp, #24
1c458     A7 26 62 FC | 	wrlong	local01, fp
1c45c     08 4E 05 F1 | 	add	fp, #8
1c460     A7 38 68 FC | 	wrlong	#28, fp
1c464     08 4E 85 F1 | 	sub	fp, #8
1c468     6C 00 90 FD | 	jmp	#LR__2232
1c46c                 | LR__2229
1c46c                 | '   if fval=0 andalso ival<>0 then
1c46c     1C 4E 05 F1 | 	add	fp, #28
1c470     A7 12 02 FB | 	rdlong	arg01, fp
1c474     1C 4E 85 F1 | 	sub	fp, #28
1c478     00 14 06 F6 | 	mov	arg02, #0
1c47c     01 16 06 F6 | 	mov	arg03, #1
1c480     98 D7 B0 FD | 	call	#__system___float_cmp
1c484     00 FA 0D F2 | 	cmp	result1, #0 wz
1c488     30 00 90 5D |  if_ne	jmp	#LR__2230
1c48c     18 4E 05 F1 | 	add	fp, #24
1c490     A7 26 0A FB | 	rdlong	local01, fp wz
1c494     18 4E 85 F1 | 	sub	fp, #24
1c498     20 00 90 AD |  if_e	jmp	#LR__2230
1c49c     18 4E 05 F1 | 	add	fp, #24
1c4a0     A7 26 02 FB | 	rdlong	local01, fp
1c4a4     18 4E 85 F1 | 	sub	fp, #24
1c4a8     A7 26 62 FC | 	wrlong	local01, fp
1c4ac     08 4E 05 F1 | 	add	fp, #8
1c4b0     A7 38 68 FC | 	wrlong	#28, fp
1c4b4     08 4E 85 F1 | 	sub	fp, #8
1c4b8     1C 00 90 FD | 	jmp	#LR__2231
1c4bc                 | LR__2230
1c4bc     1C 4E 05 F1 | 	add	fp, #28
1c4c0     A7 26 02 FB | 	rdlong	local01, fp
1c4c4     1C 4E 85 F1 | 	sub	fp, #28
1c4c8     A7 26 62 FC | 	wrlong	local01, fp
1c4cc     08 4E 05 F1 | 	add	fp, #8
1c4d0     A7 3C 68 FC | 	wrlong	#30, fp
1c4d4     08 4E 85 F1 | 	sub	fp, #8
1c4d8                 | LR__2231
1c4d8                 | LR__2232
1c4d8     A7 12 02 F6 | 	mov	arg01, fp
1c4dc     94 11 BF FD | 	call	#_push
1c4e0                 | LR__2233
1c4e0     A7 F0 03 F6 | 	mov	ptra, fp
1c4e4     B2 00 A0 FD | 	call	#popregs_
1c4e8                 | _do_val_ret
1c4e8     2D 00 64 FD | 	ret
1c4ec                 | 
1c4ec                 | ' 
1c4ec                 | ' ' ------------------ waitclock
1c4ec                 | ' 
1c4ec                 | ' sub do_waitclock
1c4ec                 | _do_waitclock
1c4ec     52 00 00 FF 
1c4f0     94 E4 05 F1 | 	add	objptr, ##42132
1c4f4     F2 00 02 FB | 	rdlong	_var01, objptr
1c4f8                 | ' c=hkcnt
1c4f8                 | ' do: loop until hkcnt<>c
1c4f8                 | LR__2240
1c4f8     F2 02 02 FB | 	rdlong	_var02, objptr
1c4fc     00 03 0A F2 | 	cmp	_var02, _var01 wz
1c500     F4 FF 9F AD |  if_e	jmp	#LR__2240
1c504     52 00 00 FF 
1c508     94 E4 85 F1 | 	sub	objptr, ##42132
1c50c                 | _do_waitclock_ret
1c50c     2D 00 64 FD | 	ret
1c510                 | 
1c510                 | ' 
1c510                 | ' ' ------------------ waitms
1c510                 | ' 
1c510                 | ' sub do_waitms
1c510                 | _do_waitms
1c510     01 4A 05 F6 | 	mov	COUNT_, #1
1c514     A8 00 A0 FD | 	call	#pushregs_
1c518     18 F0 07 F1 | 	add	ptra, #24
1c51c     BC 10 BF FD | 	call	#_pop
1c520     A7 FA 61 FC | 	wrlong	result1, fp
1c524     04 4E 05 F1 | 	add	fp, #4
1c528     A7 FC 61 FC | 	wrlong	result2, fp
1c52c     04 4E 05 F1 | 	add	fp, #4
1c530     A7 FE 61 FC | 	wrlong	result3, fp
1c534     08 4E 85 F1 | 	sub	fp, #8
1c538     A7 12 02 F6 | 	mov	arg01, fp
1c53c     80 12 BF FD | 	call	#_converttoint
1c540     0C 4E 05 F1 | 	add	fp, #12
1c544     A7 FA 61 FC | 	wrlong	result1, fp
1c548                 | ' 
1c548                 | ' t1=pop()  
1c548                 | ' t=converttoint(t1)
1c548                 | ' if t<0 then return
1c548     0C 4E 85 F1 | 	sub	fp, #12
1c54c     00 FA 55 F2 | 	cmps	result1, #0 wc
1c550     E4 00 90 CD |  if_b	jmp	#LR__2256
1c554                 | ' if t < 1000 then 
1c554     0C 4E 05 F1 | 	add	fp, #12
1c558     A7 12 02 FB | 	rdlong	arg01, fp
1c55c     0C 4E 85 F1 | 	sub	fp, #12
1c560     01 00 00 FF 
1c564     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
1c568     14 00 90 3D |  if_ae	jmp	#LR__2250
1c56c     0C 4E 05 F1 | 	add	fp, #12
1c570     A7 12 02 FB | 	rdlong	arg01, fp
1c574     0C 4E 85 F1 | 	sub	fp, #12
1c578     E4 A6 B0 FD | 	call	#__system___waitms
1c57c     B8 00 90 FD | 	jmp	#LR__2255
1c580                 | LR__2250
1c580     10 4E 05 F1 | 	add	fp, #16
1c584     A7 02 68 FC | 	wrlong	#1, fp
1c588     04 4E 85 F1 | 	sub	fp, #4
1c58c     A7 12 02 FB | 	rdlong	arg01, fp
1c590     09 13 52 F6 | 	abs	arg01, arg01 wc
1c594     01 00 00 FF 
1c598     E8 13 16 FD | 	qdiv	arg01, ##1000
1c59c                 | '   for i=1 to t/1000
1c59c     0C 4E 85 F1 | 	sub	fp, #12
1c5a0     18 26 62 FD | 	getqx	local01
1c5a4     13 27 82 F6 | 	negc	local01, local01
1c5a8     01 26 06 F1 | 	add	local01, #1
1c5ac                 | LR__2251
1c5ac     10 4E 05 F1 | 	add	fp, #16
1c5b0     A7 12 02 FB | 	rdlong	arg01, fp
1c5b4     10 4E 85 F1 | 	sub	fp, #16
1c5b8     13 13 52 F2 | 	cmps	arg01, local01 wc
1c5bc     54 00 90 3D |  if_ae	jmp	#LR__2254
1c5c0     01 00 00 FF 
1c5c4     E8 13 06 F6 | 	mov	arg01, ##1000
1c5c8     94 A6 B0 FD | 	call	#__system___waitms
1c5cc                 | '     waitms(1000)
1c5cc                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1c5cc     E0 12 06 F6 | 	mov	arg01, #224
1c5d0     A0 9A B0 FD | 	call	#_usbnew_spin2_keystate
1c5d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c5d8     10 00 90 5D |  if_ne	jmp	#LR__2252
1c5dc     E4 12 06 F6 | 	mov	arg01, #228
1c5e0     90 9A B0 FD | 	call	#_usbnew_spin2_keystate
1c5e4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c5e8     10 00 90 AD |  if_e	jmp	#LR__2253
1c5ec                 | LR__2252
1c5ec     06 12 06 F6 | 	mov	arg01, #6
1c5f0     80 9A B0 FD | 	call	#_usbnew_spin2_keystate
1c5f4     00 FA 0D F2 | 	cmp	result1, #0 wz
1c5f8     3C 00 90 5D |  if_ne	jmp	#LR__2256
1c5fc                 | LR__2253
1c5fc     10 4E 05 F1 | 	add	fp, #16
1c600     A7 12 02 FB | 	rdlong	arg01, fp
1c604     01 12 06 F1 | 	add	arg01, #1
1c608     A7 12 62 FC | 	wrlong	arg01, fp
1c60c     10 4E 85 F1 | 	sub	fp, #16
1c610     98 FF 9F FD | 	jmp	#LR__2251
1c614                 | LR__2254
1c614     0C 4E 05 F1 | 	add	fp, #12
1c618     A7 26 02 FB | 	rdlong	local01, fp
1c61c     13 27 52 F6 | 	abs	local01, local01 wc
1c620     01 00 00 FF 
1c624     E8 27 16 FD | 	qdiv	local01, ##1000
1c628     0C 4E 85 F1 | 	sub	fp, #12
1c62c     19 26 62 FD | 	getqy	local01
1c630     13 13 82 F6 | 	negc	arg01, local01
1c634     28 A6 B0 FD | 	call	#__system___waitms
1c638                 | LR__2255
1c638                 | LR__2256
1c638     A7 F0 03 F6 | 	mov	ptra, fp
1c63c     B2 00 A0 FD | 	call	#popregs_
1c640                 | _do_waitms_ret
1c640     2D 00 64 FD | 	ret
1c644                 | 
1c644                 | ' 
1c644                 | ' ' ------------------ waitvbl
1c644                 | ' 
1c644                 | ' sub do_waitvbl
1c644                 | _do_waitvbl
1c644     01 12 06 F6 | 	mov	arg01, #1
1c648     2C 86 B0 FD | 	call	#_hg010b_spin2_waitvbl
1c64c                 | _do_waitvbl_ret
1c64c     2D 00 64 FD | 	ret
1c650                 | 
1c650                 | ' 
1c650                 | ' ' ------------------ wrpin
1c650                 | ' 
1c650                 | ' sub do_wrpin
1c650                 | _do_wrpin
1c650     01 4A 05 F6 | 	mov	COUNT_, #1
1c654     A8 00 A0 FD | 	call	#pushregs_
1c658     18 F0 07 F1 | 	add	ptra, #24
1c65c     7C 0F BF FD | 	call	#_pop
1c660     FD 14 02 F6 | 	mov	arg02, result1
1c664     FE 12 02 F6 | 	mov	arg01, result2
1c668     FF 26 02 F6 | 	mov	local01, result3
1c66c     A7 14 62 FC | 	wrlong	arg02, fp
1c670     04 4E 05 F1 | 	add	fp, #4
1c674     A7 12 62 FC | 	wrlong	arg01, fp
1c678     04 4E 05 F1 | 	add	fp, #4
1c67c     A7 26 62 FC | 	wrlong	local01, fp
1c680     08 4E 85 F1 | 	sub	fp, #8
1c684     54 0F BF FD | 	call	#_pop
1c688     FF 26 02 F6 | 	mov	local01, result3
1c68c     0C 4E 05 F1 | 	add	fp, #12
1c690     A7 FA 61 FC | 	wrlong	result1, fp
1c694     04 4E 05 F1 | 	add	fp, #4
1c698     A7 FC 61 FC | 	wrlong	result2, fp
1c69c     04 4E 05 F1 | 	add	fp, #4
1c6a0     A7 26 62 FC | 	wrlong	local01, fp
1c6a4     08 4E 85 F1 | 	sub	fp, #8
1c6a8     A7 12 02 F6 | 	mov	arg01, fp
1c6ac     0C 4E 85 F1 | 	sub	fp, #12
1c6b0     0C 11 BF FD | 	call	#_converttoint
1c6b4     FD 26 02 F6 | 	mov	local01, result1
1c6b8     A7 12 02 F6 | 	mov	arg01, fp
1c6bc     00 11 BF FD | 	call	#_converttoint
1c6c0     13 FB 01 FC | 	wrpin	result1, local01
1c6c4     A7 F0 03 F6 | 	mov	ptra, fp
1c6c8     B2 00 A0 FD | 	call	#popregs_
1c6cc                 | _do_wrpin_ret
1c6cc     2D 00 64 FD | 	ret
1c6d0                 | 
1c6d0                 | ' 
1c6d0                 | ' ' ------------------ wxpin
1c6d0                 | ' 
1c6d0                 | ' sub do_wxpin
1c6d0                 | _do_wxpin
1c6d0     01 4A 05 F6 | 	mov	COUNT_, #1
1c6d4     A8 00 A0 FD | 	call	#pushregs_
1c6d8     18 F0 07 F1 | 	add	ptra, #24
1c6dc     FC 0E BF FD | 	call	#_pop
1c6e0     FD 14 02 F6 | 	mov	arg02, result1
1c6e4     FE 12 02 F6 | 	mov	arg01, result2
1c6e8     FF 26 02 F6 | 	mov	local01, result3
1c6ec     A7 14 62 FC | 	wrlong	arg02, fp
1c6f0     04 4E 05 F1 | 	add	fp, #4
1c6f4     A7 12 62 FC | 	wrlong	arg01, fp
1c6f8     04 4E 05 F1 | 	add	fp, #4
1c6fc     A7 26 62 FC | 	wrlong	local01, fp
1c700     08 4E 85 F1 | 	sub	fp, #8
1c704     D4 0E BF FD | 	call	#_pop
1c708     FF 26 02 F6 | 	mov	local01, result3
1c70c     0C 4E 05 F1 | 	add	fp, #12
1c710     A7 FA 61 FC | 	wrlong	result1, fp
1c714     04 4E 05 F1 | 	add	fp, #4
1c718     A7 FC 61 FC | 	wrlong	result2, fp
1c71c     04 4E 05 F1 | 	add	fp, #4
1c720     A7 26 62 FC | 	wrlong	local01, fp
1c724     08 4E 85 F1 | 	sub	fp, #8
1c728     A7 12 02 F6 | 	mov	arg01, fp
1c72c     0C 4E 85 F1 | 	sub	fp, #12
1c730     8C 10 BF FD | 	call	#_converttoint
1c734     FD 26 02 F6 | 	mov	local01, result1
1c738     A7 12 02 F6 | 	mov	arg01, fp
1c73c     80 10 BF FD | 	call	#_converttoint
1c740     13 FB 11 FC | 	wxpin	result1, local01
1c744     A7 F0 03 F6 | 	mov	ptra, fp
1c748     B2 00 A0 FD | 	call	#popregs_
1c74c                 | _do_wxpin_ret
1c74c     2D 00 64 FD | 	ret
1c750                 | 
1c750                 | ' 
1c750                 | ' ' ------------------ wypin
1c750                 | ' 
1c750                 | ' sub do_wypin
1c750                 | _do_wypin
1c750     01 4A 05 F6 | 	mov	COUNT_, #1
1c754     A8 00 A0 FD | 	call	#pushregs_
1c758     18 F0 07 F1 | 	add	ptra, #24
1c75c     7C 0E BF FD | 	call	#_pop
1c760     FD 14 02 F6 | 	mov	arg02, result1
1c764     FE 12 02 F6 | 	mov	arg01, result2
1c768     FF 26 02 F6 | 	mov	local01, result3
1c76c     A7 14 62 FC | 	wrlong	arg02, fp
1c770     04 4E 05 F1 | 	add	fp, #4
1c774     A7 12 62 FC | 	wrlong	arg01, fp
1c778     04 4E 05 F1 | 	add	fp, #4
1c77c     A7 26 62 FC | 	wrlong	local01, fp
1c780     08 4E 85 F1 | 	sub	fp, #8
1c784     54 0E BF FD | 	call	#_pop
1c788     FF 26 02 F6 | 	mov	local01, result3
1c78c     0C 4E 05 F1 | 	add	fp, #12
1c790     A7 FA 61 FC | 	wrlong	result1, fp
1c794     04 4E 05 F1 | 	add	fp, #4
1c798     A7 FC 61 FC | 	wrlong	result2, fp
1c79c     04 4E 05 F1 | 	add	fp, #4
1c7a0     A7 26 62 FC | 	wrlong	local01, fp
1c7a4     08 4E 85 F1 | 	sub	fp, #8
1c7a8     A7 12 02 F6 | 	mov	arg01, fp
1c7ac     0C 4E 85 F1 | 	sub	fp, #12
1c7b0     0C 10 BF FD | 	call	#_converttoint
1c7b4     FD 26 02 F6 | 	mov	local01, result1
1c7b8     A7 12 02 F6 | 	mov	arg01, fp
1c7bc     00 10 BF FD | 	call	#_converttoint
1c7c0     13 FB 21 FC | 	wypin	result1, local01
1c7c4     A7 F0 03 F6 | 	mov	ptra, fp
1c7c8     B2 00 A0 FD | 	call	#popregs_
1c7cc                 | _do_wypin_ret
1c7cc     2D 00 64 FD | 	ret
1c7d0                 | 
1c7d0                 | ' 
1c7d0                 | ' 
1c7d0                 | ' 
1c7d0                 | ' 
1c7d0                 | ' 
1c7d0                 | ' 
1c7d0                 | ' 
1c7d0                 | ' 
1c7d0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c7d0                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1c7d0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c7d0                 | ' 
1c7d0                 | ' 
1c7d0                 | ' '------------------ Assign
1c7d0                 | ' 
1c7d0                 | ' sub do_assign
1c7d0                 | _do_assign
1c7d0     05 4A 05 F6 | 	mov	COUNT_, #5
1c7d4     A8 00 A0 FD | 	call	#pushregs_
1c7d8     44 F0 07 F1 | 	add	ptra, #68
1c7dc     4A 00 00 FF 
1c7e0     80 E4 05 F1 | 	add	objptr, ##38016
1c7e4     F2 16 02 FB | 	rdlong	arg03, objptr
1c7e8     0B 15 02 F6 | 	mov	arg02, arg03
1c7ec     01 14 66 F0 | 	shl	arg02, #1
1c7f0     0B 15 02 F1 | 	add	arg02, arg03
1c7f4     02 14 66 F0 | 	shl	arg02, #2
1c7f8     03 00 00 FF 
1c7fc     04 E4 85 F1 | 	sub	objptr, ##1540
1c800     F2 14 02 F1 | 	add	arg02, objptr
1c804     0A 15 02 FB | 	rdlong	arg02, arg02
1c808     18 4E 05 F1 | 	add	fp, #24
1c80c     A7 14 62 FC | 	wrlong	arg02, fp
1c810                 | ' 
1c810                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1c810                 | ' if variables(varnum).vartype<array_no_type then 
1c810     18 4E 85 F1 | 	sub	fp, #24
1c814     04 14 66 F0 | 	shl	arg02, #4
1c818     32 00 00 FF 
1c81c     84 E4 85 F1 | 	sub	objptr, ##25732
1c820     F2 14 02 F1 | 	add	arg02, objptr
1c824     0C 14 06 F1 | 	add	arg02, #12
1c828     0A 17 02 FB | 	rdlong	arg03, arg02
1c82c     00 17 16 F2 | 	cmp	arg03, #256 wc
1c830     14 00 00 FF 
1c834     F8 E5 85 F1 | 	sub	objptr, ##10744
1c838     18 01 90 3D |  if_ae	jmp	#LR__2260
1c83c     9C 0D BF FD | 	call	#_pop
1c840     A7 FA 61 FC | 	wrlong	result1, fp
1c844     04 4E 05 F1 | 	add	fp, #4
1c848     A7 FC 61 FC | 	wrlong	result2, fp
1c84c     04 4E 05 F1 | 	add	fp, #4
1c850     A7 FE 61 FC | 	wrlong	result3, fp
1c854     08 4E 85 F1 | 	sub	fp, #8
1c858     A7 16 02 FB | 	rdlong	arg03, fp
1c85c     04 4E 05 F1 | 	add	fp, #4
1c860     A7 14 02 FB | 	rdlong	arg02, fp
1c864     14 4E 05 F1 | 	add	fp, #20
1c868     A7 12 02 FB | 	rdlong	arg01, fp
1c86c     04 12 66 F0 | 	shl	arg01, #4
1c870     14 00 00 FF 
1c874     F8 E5 05 F1 | 	add	objptr, ##10744
1c878     F2 12 02 F1 | 	add	arg01, objptr
1c87c     04 12 06 F1 | 	add	arg01, #4
1c880     09 17 62 FC | 	wrlong	arg03, arg01
1c884     A7 16 02 FB | 	rdlong	arg03, fp
1c888     04 16 66 F0 | 	shl	arg03, #4
1c88c     F2 16 02 F1 | 	add	arg03, objptr
1c890     08 16 06 F1 | 	add	arg03, #8
1c894     0B 15 62 FC | 	wrlong	arg02, arg03
1c898     A7 16 02 FB | 	rdlong	arg03, fp
1c89c     04 16 66 F0 | 	shl	arg03, #4
1c8a0     F2 16 02 F1 | 	add	arg03, objptr
1c8a4     10 4E 85 F1 | 	sub	fp, #16
1c8a8     A7 14 02 FB | 	rdlong	arg02, fp
1c8ac     0C 16 06 F1 | 	add	arg03, #12
1c8b0     0B 15 62 FC | 	wrlong	arg02, arg03
1c8b4                 | '   t1=pop() 
1c8b4                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1c8b4                 | '   if variables(varnum).vartype<>result_string2 then return
1c8b4     10 4E 05 F1 | 	add	fp, #16
1c8b8     A7 16 02 FB | 	rdlong	arg03, fp
1c8bc     18 4E 85 F1 | 	sub	fp, #24
1c8c0     04 16 66 F0 | 	shl	arg03, #4
1c8c4     F2 16 02 F1 | 	add	arg03, objptr
1c8c8     0C 16 06 F1 | 	add	arg03, #12
1c8cc     0B 17 02 FB | 	rdlong	arg03, arg03
1c8d0     2B 16 0E F2 | 	cmp	arg03, #43 wz
1c8d4     14 00 00 FF 
1c8d8     F8 E5 85 F1 | 	sub	objptr, ##10744
1c8dc     EC 04 90 5D |  if_ne	jmp	#LR__2283
1c8e0     18 4E 05 F1 | 	add	fp, #24
1c8e4     A7 16 02 FB | 	rdlong	arg03, fp
1c8e8     0B 27 02 F6 | 	mov	local01, arg03
1c8ec     04 26 66 F0 | 	shl	local01, #4
1c8f0     14 00 00 FF 
1c8f4     F8 E5 05 F1 | 	add	objptr, ##10744
1c8f8     F2 26 02 F1 | 	add	local01, objptr
1c8fc     18 4E 85 F1 | 	sub	fp, #24
1c900     04 16 66 F0 | 	shl	arg03, #4
1c904     F2 16 02 F1 | 	add	arg03, objptr
1c908     04 16 06 F1 | 	add	arg03, #4
1c90c     0B 13 02 FB | 	rdlong	arg01, arg03
1c910     14 00 00 FF 
1c914     F8 E5 85 F1 | 	sub	objptr, ##10744
1c918     38 0E BF FD | 	call	#_convertstring
1c91c     04 26 06 F1 | 	add	local01, #4
1c920     13 FB 61 FC | 	wrlong	result1, local01
1c924     18 4E 05 F1 | 	add	fp, #24
1c928     A7 26 02 FB | 	rdlong	local01, fp
1c92c     18 4E 85 F1 | 	sub	fp, #24
1c930     04 26 66 F0 | 	shl	local01, #4
1c934     14 00 00 FF 
1c938     F8 E5 05 F1 | 	add	objptr, ##10744
1c93c     F2 26 02 F1 | 	add	local01, objptr
1c940     0C 26 06 F1 | 	add	local01, #12
1c944     13 3F 68 FC | 	wrlong	#31, local01
1c948                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1c948                 | '   variables(varnum).vartype=result_string
1c948                 | '   return
1c948     14 00 00 FF 
1c94c     F8 E5 85 F1 | 	sub	objptr, ##10744
1c950     78 04 90 FD | 	jmp	#LR__2283
1c954                 | LR__2260
1c954                 | ' for i=0 to 2 : arrid(i)=0 : next i
1c954     1C 4E 05 F1 | 	add	fp, #28
1c958     A7 00 68 FC | 	wrlong	#0, fp
1c95c     97 16 48 FB | 	callpa	#(@LR__2262-@LR__2261)>>2,fcache_load_ptr_
1c960                 | LR__2261
1c960     A7 26 02 FB | 	rdlong	local01, fp
1c964     02 26 66 F0 | 	shl	local01, #2
1c968     18 4E 05 F1 | 	add	fp, #24
1c96c     A7 26 02 F1 | 	add	local01, fp
1c970     13 01 68 FC | 	wrlong	#0, local01
1c974     18 4E 85 F1 | 	sub	fp, #24
1c978     A7 26 02 FB | 	rdlong	local01, fp
1c97c     01 26 06 F1 | 	add	local01, #1
1c980     A7 26 62 FC | 	wrlong	local01, fp
1c984     03 26 16 F2 | 	cmp	local01, #3 wc
1c988     D4 FF 9F CD |  if_b	jmp	#LR__2261
1c98c                 | LR__2262
1c98c     4A 00 00 FF 
1c990     80 E4 05 F1 | 	add	objptr, ##38016
1c994     F2 16 02 FB | 	rdlong	arg03, objptr
1c998     0B 27 02 F6 | 	mov	local01, arg03
1c99c     01 26 66 F0 | 	shl	local01, #1
1c9a0     0B 27 02 F1 | 	add	local01, arg03
1c9a4     02 26 66 F0 | 	shl	local01, #2
1c9a8     03 00 00 FF 
1c9ac     04 E4 85 F1 | 	sub	objptr, ##1540
1c9b0     F2 26 02 F1 | 	add	local01, objptr
1c9b4     04 26 06 F1 | 	add	local01, #4
1c9b8     13 29 02 FB | 	rdlong	local02, local01
1c9bc     04 4E 05 F1 | 	add	fp, #4
1c9c0     A7 28 62 FC | 	wrlong	local02, fp
1c9c4     20 4E 85 F1 | 	sub	fp, #32
1c9c8     47 00 00 FF 
1c9cc     7C E4 85 F1 | 	sub	objptr, ##36476
1c9d0     08 0C BF FD | 	call	#_pop
1c9d4     A7 FA 61 FC | 	wrlong	result1, fp
1c9d8     04 4E 05 F1 | 	add	fp, #4
1c9dc     A7 FC 61 FC | 	wrlong	result2, fp
1c9e0     04 4E 05 F1 | 	add	fp, #4
1c9e4     A7 FE 61 FC | 	wrlong	result3, fp
1c9e8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1c9e8                 | ' t1=pop() ' var value
1c9e8                 | ' if numpar>0 then
1c9e8     18 4E 05 F1 | 	add	fp, #24
1c9ec     A7 2A 02 FB | 	rdlong	local03, fp
1c9f0     20 4E 85 F1 | 	sub	fp, #32
1c9f4     01 2A 16 F2 | 	cmp	local03, #1 wc
1c9f8     78 00 90 CD |  if_b	jmp	#LR__2265
1c9fc                 | '   for i=numpar to 1 step -1
1c9fc     20 4E 05 F1 | 	add	fp, #32
1ca00     A7 2C 0A FB | 	rdlong	local04, fp wz
1ca04     04 4E 85 F1 | 	sub	fp, #4
1ca08     A7 2C 62 FC | 	wrlong	local04, fp
1ca0c     1C 4E 85 F1 | 	sub	fp, #28
1ca10     60 00 90 AD |  if_e	jmp	#LR__2264
1ca14                 | LR__2263
1ca14     C4 0B BF FD | 	call	#_pop
1ca18     0C 4E 05 F1 | 	add	fp, #12
1ca1c     A7 FA 61 FC | 	wrlong	result1, fp
1ca20     04 4E 05 F1 | 	add	fp, #4
1ca24     A7 FC 61 FC | 	wrlong	result2, fp
1ca28     04 4E 05 F1 | 	add	fp, #4
1ca2c     A7 FE 61 FC | 	wrlong	result3, fp
1ca30     08 4E 05 F1 | 	add	fp, #8
1ca34     A7 2A 02 FB | 	rdlong	local03, fp
1ca38     01 2A 86 F1 | 	sub	local03, #1
1ca3c     02 2A 66 F0 | 	shl	local03, #2
1ca40     18 4E 05 F1 | 	add	fp, #24
1ca44     A7 2A 02 F1 | 	add	local03, fp
1ca48     28 4E 85 F1 | 	sub	fp, #40
1ca4c     A7 12 02 F6 | 	mov	arg01, fp
1ca50     0C 4E 85 F1 | 	sub	fp, #12
1ca54     68 0D BF FD | 	call	#_converttoint
1ca58     15 FB 61 FC | 	wrlong	result1, local03
1ca5c     1C 4E 05 F1 | 	add	fp, #28
1ca60     A7 2C 02 FB | 	rdlong	local04, fp
1ca64     01 2C 8E F1 | 	sub	local04, #1 wz
1ca68     A7 2C 62 FC | 	wrlong	local04, fp
1ca6c     1C 4E 85 F1 | 	sub	fp, #28
1ca70     A0 FF 9F 5D |  if_ne	jmp	#LR__2263
1ca74                 | LR__2264
1ca74                 | LR__2265
1ca74     18 4E 05 F1 | 	add	fp, #24
1ca78     A7 26 02 FB | 	rdlong	local01, fp
1ca7c     04 26 66 F0 | 	shl	local01, #4
1ca80     14 00 00 FF 
1ca84     F8 E5 05 F1 | 	add	objptr, ##10744
1ca88     F2 26 02 F1 | 	add	local01, objptr
1ca8c     04 26 06 F1 | 	add	local01, #4
1ca90     13 13 02 FB | 	rdlong	arg01, local01
1ca94     0C 4E 05 F1 | 	add	fp, #12
1ca98     A7 12 62 FC | 	wrlong	arg01, fp
1ca9c     24 4E 85 F1 | 	sub	fp, #36
1caa0     14 00 00 FF 
1caa4     F8 E5 85 F1 | 	sub	objptr, ##10744
1caa8     A0 67 B0 FD | 	call	#_pslpeek
1caac     FD 2C 32 F9 | 	getword	local04, result1, #0
1cab0     28 4E 05 F1 | 	add	fp, #40
1cab4     A7 2C 62 FC | 	wrlong	local04, fp
1cab8     04 4E 85 F1 | 	sub	fp, #4
1cabc     A7 12 02 FB | 	rdlong	arg01, fp
1cac0     24 4E 85 F1 | 	sub	fp, #36
1cac4     02 12 06 F1 | 	add	arg01, #2
1cac8     28 67 B0 FD | 	call	#_pspeek
1cacc     FD FA E1 F8 | 	getbyte	result1, result1, #0
1cad0     2C 4E 05 F1 | 	add	fp, #44
1cad4     A7 FA 61 FC | 	wrlong	result1, fp
1cad8                 | ' esize=pspeek(arrptr+2)
1cad8                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1cad8     08 4E 85 F1 | 	sub	fp, #8
1cadc     A7 12 02 FB | 	rdlong	arg01, fp
1cae0     24 4E 85 F1 | 	sub	fp, #36
1cae4     04 12 06 F1 | 	add	arg01, #4
1cae8     60 67 B0 FD | 	call	#_pslpeek
1caec     FD 2C 02 F6 | 	mov	local04, result1
1caf0     34 4E 05 F1 | 	add	fp, #52
1caf4     A7 26 02 FB | 	rdlong	local01, fp
1caf8     34 4E 85 F1 | 	sub	fp, #52
1cafc     16 27 12 F2 | 	cmp	local01, local04 wc
1cb00     54 00 90 3D |  if_ae	jmp	#LR__2266
1cb04     24 4E 05 F1 | 	add	fp, #36
1cb08     A7 12 02 FB | 	rdlong	arg01, fp
1cb0c     24 4E 85 F1 | 	sub	fp, #36
1cb10     08 12 06 F1 | 	add	arg01, #8
1cb14     34 67 B0 FD | 	call	#_pslpeek
1cb18     FD 26 02 F6 | 	mov	local01, result1
1cb1c     38 4E 05 F1 | 	add	fp, #56
1cb20     A7 2C 02 FB | 	rdlong	local04, fp
1cb24     38 4E 85 F1 | 	sub	fp, #56
1cb28     13 2D 12 F2 | 	cmp	local04, local01 wc
1cb2c     28 00 90 3D |  if_ae	jmp	#LR__2266
1cb30     24 4E 05 F1 | 	add	fp, #36
1cb34     A7 12 02 FB | 	rdlong	arg01, fp
1cb38     24 4E 85 F1 | 	sub	fp, #36
1cb3c     0C 12 06 F1 | 	add	arg01, #12
1cb40     08 67 B0 FD | 	call	#_pslpeek
1cb44     3C 4E 05 F1 | 	add	fp, #60
1cb48     A7 2C 02 FB | 	rdlong	local04, fp
1cb4c     3C 4E 85 F1 | 	sub	fp, #60
1cb50     FD 2C 12 F2 | 	cmp	local04, result1 wc
1cb54     10 00 90 CD |  if_b	jmp	#LR__2267
1cb58                 | LR__2266
1cb58     31 12 06 F6 | 	mov	arg01, #49
1cb5c     00 14 06 F6 | 	mov	arg02, #0
1cb60     18 64 B0 FD | 	call	#_printerror
1cb64     64 02 90 FD | 	jmp	#LR__2283
1cb68                 | LR__2267
1cb68     24 4E 05 F1 | 	add	fp, #36
1cb6c     A7 12 02 FB | 	rdlong	arg01, fp
1cb70     09 2D 02 F6 | 	mov	local04, arg01
1cb74     10 2C 06 F1 | 	add	local04, #16
1cb78     24 4E 85 F1 | 	sub	fp, #36
1cb7c     04 12 06 F1 | 	add	arg01, #4
1cb80     C8 66 B0 FD | 	call	#_pslpeek
1cb84     FD 26 02 F6 | 	mov	local01, result1
1cb88     38 4E 05 F1 | 	add	fp, #56
1cb8c     A7 28 02 FB | 	rdlong	local02, fp
1cb90     14 27 02 FD | 	qmul	local01, local02
1cb94     04 4E 85 F1 | 	sub	fp, #4
1cb98     A7 2A 02 FB | 	rdlong	local03, fp
1cb9c     10 4E 85 F1 | 	sub	fp, #16
1cba0     A7 12 02 FB | 	rdlong	arg01, fp
1cba4     24 4E 85 F1 | 	sub	fp, #36
1cba8     08 12 06 F1 | 	add	arg01, #8
1cbac     18 28 62 FD | 	getqx	local02
1cbb0     14 2B 02 F1 | 	add	local03, local02
1cbb4     94 66 B0 FD | 	call	#_pslpeek
1cbb8     FD 28 02 F6 | 	mov	local02, result1
1cbbc     24 4E 05 F1 | 	add	fp, #36
1cbc0     A7 12 02 FB | 	rdlong	arg01, fp
1cbc4     24 4E 85 F1 | 	sub	fp, #36
1cbc8     04 12 06 F1 | 	add	arg01, #4
1cbcc     7C 66 B0 FD | 	call	#_pslpeek
1cbd0     FD 28 02 FD | 	qmul	local02, result1
1cbd4     3C 4E 05 F1 | 	add	fp, #60
1cbd8     A7 28 02 FB | 	rdlong	local02, fp
1cbdc     18 26 62 FD | 	getqx	local01
1cbe0     14 27 02 FD | 	qmul	local01, local02
1cbe4     10 4E 85 F1 | 	sub	fp, #16
1cbe8     A7 28 02 FB | 	rdlong	local02, fp
1cbec     18 26 62 FD | 	getqx	local01
1cbf0     13 2B 02 F1 | 	add	local03, local01
1cbf4     15 29 02 FD | 	qmul	local02, local03
1cbf8     04 4E 05 F1 | 	add	fp, #4
1cbfc                 | ' 
1cbfc                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1cbfc                 | ' select case arrtype
1cbfc     18 2A 62 FD | 	getqx	local03
1cc00     15 2D 02 F1 | 	add	local04, local03
1cc04     A7 2C 62 FC | 	wrlong	local04, fp
1cc08     08 4E 85 F1 | 	sub	fp, #8
1cc0c     A7 2E 02 FB | 	rdlong	local05, fp
1cc10     28 4E 85 F1 | 	sub	fp, #40
1cc14     00 2F 86 F1 | 	sub	local05, #256
1cc18     0C 2E 26 F3 | 	fle	local05, #12
1cc1c     30 2E 62 FD | 	jmprel	local05
1cc20                 | LR__2268
1cc20     30 00 90 FD | 	jmp	#LR__2269
1cc24     58 00 90 FD | 	jmp	#LR__2270
1cc28     6C 00 90 FD | 	jmp	#LR__2271
1cc2c     80 00 90 FD | 	jmp	#LR__2272
1cc30     B0 00 90 FD | 	jmp	#LR__2273
1cc34     E0 00 90 FD | 	jmp	#LR__2274
1cc38     F4 00 90 FD | 	jmp	#LR__2275
1cc3c     08 01 90 FD | 	jmp	#LR__2276
1cc40     1C 01 90 FD | 	jmp	#LR__2277
1cc44     30 01 90 FD | 	jmp	#LR__2278
1cc48     44 01 90 FD | 	jmp	#LR__2279
1cc4c     58 01 90 FD | 	jmp	#LR__2280
1cc50     6C 01 90 FD | 	jmp	#LR__2281
1cc54                 | LR__2269
1cc54     A7 12 02 F6 | 	mov	arg01, fp
1cc58     30 4E 05 F1 | 	add	fp, #48
1cc5c     A7 14 02 FB | 	rdlong	arg02, fp
1cc60     30 4E 85 F1 | 	sub	fp, #48
1cc64     0C 16 06 F6 | 	mov	arg03, #12
1cc68     0B 00 00 FF 
1cc6c     CC E4 05 F1 | 	add	objptr, ##5836
1cc70     0C 91 B0 FD | 	call	#_psram_spin2_write
1cc74     0B 00 00 FF 
1cc78     CC E4 85 F1 | 	sub	objptr, ##5836
1cc7c     4C 01 90 FD | 	jmp	#LR__2282
1cc80                 | LR__2270
1cc80     30 4E 05 F1 | 	add	fp, #48
1cc84     A7 12 02 FB | 	rdlong	arg01, fp
1cc88     30 4E 85 F1 | 	sub	fp, #48
1cc8c     A7 14 02 FB | 	rdlong	arg02, fp
1cc90     18 65 B0 FD | 	call	#_pspoke
1cc94     34 01 90 FD | 	jmp	#LR__2282
1cc98                 | LR__2271
1cc98     30 4E 05 F1 | 	add	fp, #48
1cc9c     A7 12 02 FB | 	rdlong	arg01, fp
1cca0     30 4E 85 F1 | 	sub	fp, #48
1cca4     A7 14 02 FB | 	rdlong	arg02, fp
1cca8     00 65 B0 FD | 	call	#_pspoke
1ccac     1C 01 90 FD | 	jmp	#LR__2282
1ccb0                 | LR__2272
1ccb0     30 4E 05 F1 | 	add	fp, #48
1ccb4     A7 12 02 FB | 	rdlong	arg01, fp
1ccb8     30 4E 85 F1 | 	sub	fp, #48
1ccbc     A7 14 02 FB | 	rdlong	arg02, fp
1ccc0     E8 64 B0 FD | 	call	#_pspoke
1ccc4     30 4E 05 F1 | 	add	fp, #48
1ccc8     A7 12 02 FB | 	rdlong	arg01, fp
1cccc     30 4E 85 F1 | 	sub	fp, #48
1ccd0     01 12 06 F1 | 	add	arg01, #1
1ccd4     A7 14 02 FB | 	rdlong	arg02, fp
1ccd8     08 14 46 F0 | 	shr	arg02, #8
1ccdc     CC 64 B0 FD | 	call	#_pspoke
1cce0     E8 00 90 FD | 	jmp	#LR__2282
1cce4                 | LR__2273
1cce4     30 4E 05 F1 | 	add	fp, #48
1cce8     A7 12 02 FB | 	rdlong	arg01, fp
1ccec     30 4E 85 F1 | 	sub	fp, #48
1ccf0     A7 14 02 FB | 	rdlong	arg02, fp
1ccf4     B4 64 B0 FD | 	call	#_pspoke
1ccf8     30 4E 05 F1 | 	add	fp, #48
1ccfc     A7 12 02 FB | 	rdlong	arg01, fp
1cd00     30 4E 85 F1 | 	sub	fp, #48
1cd04     01 12 06 F1 | 	add	arg01, #1
1cd08     A7 14 02 FB | 	rdlong	arg02, fp
1cd0c     08 14 46 F0 | 	shr	arg02, #8
1cd10     98 64 B0 FD | 	call	#_pspoke
1cd14     B4 00 90 FD | 	jmp	#LR__2282
1cd18                 | LR__2274
1cd18     30 4E 05 F1 | 	add	fp, #48
1cd1c     A7 12 02 FB | 	rdlong	arg01, fp
1cd20     30 4E 85 F1 | 	sub	fp, #48
1cd24     A7 14 02 FB | 	rdlong	arg02, fp
1cd28     F0 63 B0 FD | 	call	#_pslpoke
1cd2c     9C 00 90 FD | 	jmp	#LR__2282
1cd30                 | LR__2275
1cd30     30 4E 05 F1 | 	add	fp, #48
1cd34     A7 12 02 FB | 	rdlong	arg01, fp
1cd38     30 4E 85 F1 | 	sub	fp, #48
1cd3c     A7 14 02 FB | 	rdlong	arg02, fp
1cd40     D8 63 B0 FD | 	call	#_pslpoke
1cd44     84 00 90 FD | 	jmp	#LR__2282
1cd48                 | LR__2276
1cd48     30 4E 05 F1 | 	add	fp, #48
1cd4c     A7 12 02 FB | 	rdlong	arg01, fp
1cd50     30 4E 85 F1 | 	sub	fp, #48
1cd54     A7 14 02 FB | 	rdlong	arg02, fp
1cd58     C0 63 B0 FD | 	call	#_pslpoke
1cd5c     6C 00 90 FD | 	jmp	#LR__2282
1cd60                 | LR__2277
1cd60     30 4E 05 F1 | 	add	fp, #48
1cd64     A7 12 02 FB | 	rdlong	arg01, fp
1cd68     30 4E 85 F1 | 	sub	fp, #48
1cd6c     A7 14 02 FB | 	rdlong	arg02, fp
1cd70     A8 63 B0 FD | 	call	#_pslpoke
1cd74     54 00 90 FD | 	jmp	#LR__2282
1cd78                 | LR__2278
1cd78     30 4E 05 F1 | 	add	fp, #48
1cd7c     A7 12 02 FB | 	rdlong	arg01, fp
1cd80     30 4E 85 F1 | 	sub	fp, #48
1cd84     A7 14 02 FB | 	rdlong	arg02, fp
1cd88     90 63 B0 FD | 	call	#_pslpoke
1cd8c     3C 00 90 FD | 	jmp	#LR__2282
1cd90                 | LR__2279
1cd90     30 4E 05 F1 | 	add	fp, #48
1cd94     A7 12 02 FB | 	rdlong	arg01, fp
1cd98     30 4E 85 F1 | 	sub	fp, #48
1cd9c     A7 14 02 FB | 	rdlong	arg02, fp
1cda0     78 63 B0 FD | 	call	#_pslpoke
1cda4     24 00 90 FD | 	jmp	#LR__2282
1cda8                 | LR__2280
1cda8     30 4E 05 F1 | 	add	fp, #48
1cdac     A7 12 02 FB | 	rdlong	arg01, fp
1cdb0     30 4E 85 F1 | 	sub	fp, #48
1cdb4     A7 14 02 FB | 	rdlong	arg02, fp
1cdb8     60 63 B0 FD | 	call	#_pslpoke
1cdbc     0C 00 90 FD | 	jmp	#LR__2282
1cdc0                 | LR__2281
1cdc0     32 12 06 F6 | 	mov	arg01, #50
1cdc4     00 14 06 F6 | 	mov	arg02, #0
1cdc8     B0 61 B0 FD | 	call	#_printerror
1cdcc                 | LR__2282
1cdcc                 | LR__2283
1cdcc     A7 F0 03 F6 | 	mov	ptra, fp
1cdd0     B2 00 A0 FD | 	call	#popregs_
1cdd4                 | _do_assign_ret
1cdd4     2D 00 64 FD | 	ret
1cdd8                 | 
1cdd8                 | ' 
1cdd8                 | ' 
1cdd8                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1cdd8                 | ' 
1cdd8                 | ' sub do_getvar
1cdd8                 | _do_getvar
1cdd8     04 4A 05 F6 | 	mov	COUNT_, #4
1cddc     A8 00 A0 FD | 	call	#pushregs_
1cde0     3C F0 07 F1 | 	add	ptra, #60
1cde4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1cde4     4A 00 00 FF 
1cde8     80 E4 05 F1 | 	add	objptr, ##38016
1cdec     F2 26 02 FB | 	rdlong	local01, objptr
1cdf0     13 17 02 F6 | 	mov	arg03, local01
1cdf4     01 16 66 F0 | 	shl	arg03, #1
1cdf8     13 17 02 F1 | 	add	arg03, local01
1cdfc     02 16 66 F0 | 	shl	arg03, #2
1ce00     03 00 00 FF 
1ce04     04 E4 85 F1 | 	sub	objptr, ##1540
1ce08     F2 16 02 F1 | 	add	arg03, objptr
1ce0c     04 16 06 F1 | 	add	arg03, #4
1ce10     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1ce14     47 00 00 FF 
1ce18     7C E4 85 F1 | 	sub	objptr, ##36476
1ce1c     C4 00 90 5D |  if_ne	jmp	#LR__2291
1ce20     4A 00 00 FF 
1ce24     80 E4 05 F1 | 	add	objptr, ##38016
1ce28     F2 26 02 FB | 	rdlong	local01, objptr
1ce2c     13 13 02 F6 | 	mov	arg01, local01
1ce30     01 12 66 F0 | 	shl	arg01, #1
1ce34     13 13 02 F1 | 	add	arg01, local01
1ce38     02 12 66 F0 | 	shl	arg01, #2
1ce3c     03 00 00 FF 
1ce40     04 E4 85 F1 | 	sub	objptr, ##1540
1ce44     F2 12 02 F1 | 	add	arg01, objptr
1ce48     09 27 02 FB | 	rdlong	local01, arg01
1ce4c     04 26 66 F0 | 	shl	local01, #4
1ce50     32 00 00 FF 
1ce54     84 E4 85 F1 | 	sub	objptr, ##25732
1ce58     F2 26 02 F1 | 	add	local01, objptr
1ce5c     04 26 06 F1 | 	add	local01, #4
1ce60     13 13 02 FB | 	rdlong	arg01, local01
1ce64     04 26 06 F1 | 	add	local01, #4
1ce68     13 27 02 FB | 	rdlong	local01, local01
1ce6c     A7 12 62 FC | 	wrlong	arg01, fp
1ce70     04 4E 05 F1 | 	add	fp, #4
1ce74     A7 26 62 FC | 	wrlong	local01, fp
1ce78     35 00 00 FF 
1ce7c     88 E4 05 F1 | 	add	objptr, ##27272
1ce80     F2 26 02 FB | 	rdlong	local01, objptr
1ce84     13 13 02 F6 | 	mov	arg01, local01
1ce88     01 12 66 F0 | 	shl	arg01, #1
1ce8c     13 13 02 F1 | 	add	arg01, local01
1ce90     02 12 66 F0 | 	shl	arg01, #2
1ce94     03 00 00 FF 
1ce98     04 E4 85 F1 | 	sub	objptr, ##1540
1ce9c     F2 12 02 F1 | 	add	arg01, objptr
1cea0     09 27 02 FB | 	rdlong	local01, arg01
1cea4     04 26 66 F0 | 	shl	local01, #4
1cea8     32 00 00 FF 
1ceac     84 E4 85 F1 | 	sub	objptr, ##25732
1ceb0     F2 26 02 F1 | 	add	local01, objptr
1ceb4     0C 26 06 F1 | 	add	local01, #12
1ceb8     13 27 02 FB | 	rdlong	local01, local01
1cebc     04 4E 05 F1 | 	add	fp, #4
1cec0     A7 26 62 FC | 	wrlong	local01, fp
1cec4                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1cec4                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1cec4                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1cec4     08 4E 85 F1 | 	sub	fp, #8
1cec8     00 27 16 F2 | 	cmp	local01, #256 wc
1cecc     14 00 00 FF 
1ced0     F8 E5 85 F1 | 	sub	objptr, ##10744
1ced4     0C 00 90 3D |  if_ae	jmp	#LR__2290
1ced8     A7 12 02 F6 | 	mov	arg01, fp
1cedc     94 07 BF FD | 	call	#_push
1cee0     A0 04 90 FD | 	jmp	#LR__2312
1cee4                 | LR__2290
1cee4                 | LR__2291
1cee4     4A 00 00 FF 
1cee8     80 E4 05 F1 | 	add	objptr, ##38016
1ceec     F2 16 02 FB | 	rdlong	arg03, objptr
1cef0     0B 15 02 F6 | 	mov	arg02, arg03
1cef4     01 14 66 F0 | 	shl	arg02, #1
1cef8     0B 15 02 F1 | 	add	arg02, arg03
1cefc     02 14 66 F0 | 	shl	arg02, #2
1cf00     03 00 00 FF 
1cf04     04 E4 85 F1 | 	sub	objptr, ##1540
1cf08     F2 14 02 F1 | 	add	arg02, objptr
1cf0c     0A 17 02 FB | 	rdlong	arg03, arg02
1cf10     04 16 66 F0 | 	shl	arg03, #4
1cf14     32 00 00 FF 
1cf18     84 E4 85 F1 | 	sub	objptr, ##25732
1cf1c     F2 16 02 F1 | 	add	arg03, objptr
1cf20     04 16 06 F1 | 	add	arg03, #4
1cf24     0B 13 02 FB | 	rdlong	arg01, arg03
1cf28     0C 4E 05 F1 | 	add	fp, #12
1cf2c     A7 12 62 FC | 	wrlong	arg01, fp
1cf30     0C 4E 85 F1 | 	sub	fp, #12
1cf34     14 00 00 FF 
1cf38     F8 E5 85 F1 | 	sub	objptr, ##10744
1cf3c     0C 63 B0 FD | 	call	#_pslpeek
1cf40     FD FA 31 F9 | 	getword	result1, result1, #0
1cf44     10 4E 05 F1 | 	add	fp, #16
1cf48     A7 FA 61 FC | 	wrlong	result1, fp
1cf4c     4A 00 00 FF 
1cf50     80 E4 05 F1 | 	add	objptr, ##38016
1cf54     F2 16 02 FB | 	rdlong	arg03, objptr
1cf58     0B 15 02 F6 | 	mov	arg02, arg03
1cf5c     01 14 66 F0 | 	shl	arg02, #1
1cf60     0B 15 02 F1 | 	add	arg02, arg03
1cf64     02 14 66 F0 | 	shl	arg02, #2
1cf68     03 00 00 FF 
1cf6c     04 E4 85 F1 | 	sub	objptr, ##1540
1cf70     F2 14 02 F1 | 	add	arg02, objptr
1cf74     04 14 06 F1 | 	add	arg02, #4
1cf78     0A 17 02 FB | 	rdlong	arg03, arg02
1cf7c     04 4E 05 F1 | 	add	fp, #4
1cf80     A7 16 62 FC | 	wrlong	arg03, fp
1cf84     08 4E 85 F1 | 	sub	fp, #8
1cf88     A7 12 02 FB | 	rdlong	arg01, fp
1cf8c     0C 4E 85 F1 | 	sub	fp, #12
1cf90     02 12 06 F1 | 	add	arg01, #2
1cf94     47 00 00 FF 
1cf98     7C E4 85 F1 | 	sub	objptr, ##36476
1cf9c     54 62 B0 FD | 	call	#_pspeek
1cfa0     FD FA E1 F8 | 	getbyte	result1, result1, #0
1cfa4     18 4E 05 F1 | 	add	fp, #24
1cfa8     A7 FA 61 FC | 	wrlong	result1, fp
1cfac     0C 4E 85 F1 | 	sub	fp, #12
1cfb0     A7 12 02 FB | 	rdlong	arg01, fp
1cfb4     0C 4E 85 F1 | 	sub	fp, #12
1cfb8     04 12 06 F1 | 	add	arg01, #4
1cfbc     8C 62 B0 FD | 	call	#_pslpeek
1cfc0     1C 4E 05 F1 | 	add	fp, #28
1cfc4     A7 FA 61 FC | 	wrlong	result1, fp
1cfc8     10 4E 85 F1 | 	sub	fp, #16
1cfcc     A7 12 02 FB | 	rdlong	arg01, fp
1cfd0     0C 4E 85 F1 | 	sub	fp, #12
1cfd4     08 12 06 F1 | 	add	arg01, #8
1cfd8     70 62 B0 FD | 	call	#_pslpeek
1cfdc     20 4E 05 F1 | 	add	fp, #32
1cfe0     A7 FA 61 FC | 	wrlong	result1, fp
1cfe4     14 4E 85 F1 | 	sub	fp, #20
1cfe8     A7 12 02 FB | 	rdlong	arg01, fp
1cfec     0C 4E 85 F1 | 	sub	fp, #12
1cff0     0C 12 06 F1 | 	add	arg01, #12
1cff4     54 62 B0 FD | 	call	#_pslpeek
1cff8     24 4E 05 F1 | 	add	fp, #36
1cffc     A7 FA 61 FC | 	wrlong	result1, fp
1d000                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1d000                 | ' esize=pspeek(arrptr+2)
1d000                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1d000                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1d000                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1d000                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1d000     10 4E 85 F1 | 	sub	fp, #16
1d004     A7 16 02 FB | 	rdlong	arg03, fp
1d008     14 4E 85 F1 | 	sub	fp, #20
1d00c     03 16 16 F2 | 	cmp	arg03, #3 wc
1d010     38 00 90 CD |  if_b	jmp	#LR__2292
1d014     C4 05 BF FD | 	call	#_pop
1d018     FF 16 02 F6 | 	mov	arg03, result3
1d01c     A7 FA 61 FC | 	wrlong	result1, fp
1d020     04 4E 05 F1 | 	add	fp, #4
1d024     A7 FC 61 FC | 	wrlong	result2, fp
1d028     04 4E 05 F1 | 	add	fp, #4
1d02c     A7 16 62 FC | 	wrlong	arg03, fp
1d030     08 4E 85 F1 | 	sub	fp, #8
1d034     A7 12 02 F6 | 	mov	arg01, fp
1d038     84 07 BF FD | 	call	#_converttoint
1d03c     30 4E 05 F1 | 	add	fp, #48
1d040     A7 FA 61 FC | 	wrlong	result1, fp
1d044     30 4E 85 F1 | 	sub	fp, #48
1d048     0C 00 90 FD | 	jmp	#LR__2293
1d04c                 | LR__2292
1d04c     30 4E 05 F1 | 	add	fp, #48
1d050     A7 00 68 FC | 	wrlong	#0, fp
1d054     30 4E 85 F1 | 	sub	fp, #48
1d058                 | LR__2293
1d058                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1d058     14 4E 05 F1 | 	add	fp, #20
1d05c     A7 16 02 FB | 	rdlong	arg03, fp
1d060     14 4E 85 F1 | 	sub	fp, #20
1d064     02 16 16 F2 | 	cmp	arg03, #2 wc
1d068     38 00 90 CD |  if_b	jmp	#LR__2294
1d06c     6C 05 BF FD | 	call	#_pop
1d070     FF 16 02 F6 | 	mov	arg03, result3
1d074     A7 FA 61 FC | 	wrlong	result1, fp
1d078     04 4E 05 F1 | 	add	fp, #4
1d07c     A7 FC 61 FC | 	wrlong	result2, fp
1d080     04 4E 05 F1 | 	add	fp, #4
1d084     A7 16 62 FC | 	wrlong	arg03, fp
1d088     08 4E 85 F1 | 	sub	fp, #8
1d08c     A7 12 02 F6 | 	mov	arg01, fp
1d090     2C 07 BF FD | 	call	#_converttoint
1d094     2C 4E 05 F1 | 	add	fp, #44
1d098     A7 FA 61 FC | 	wrlong	result1, fp
1d09c     2C 4E 85 F1 | 	sub	fp, #44
1d0a0     0C 00 90 FD | 	jmp	#LR__2295
1d0a4                 | LR__2294
1d0a4     2C 4E 05 F1 | 	add	fp, #44
1d0a8     A7 00 68 FC | 	wrlong	#0, fp
1d0ac     2C 4E 85 F1 | 	sub	fp, #44
1d0b0                 | LR__2295
1d0b0                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1d0b0     14 4E 05 F1 | 	add	fp, #20
1d0b4     A7 16 02 FB | 	rdlong	arg03, fp
1d0b8     14 4E 85 F1 | 	sub	fp, #20
1d0bc     01 16 16 F2 | 	cmp	arg03, #1 wc
1d0c0     38 00 90 CD |  if_b	jmp	#LR__2296
1d0c4     14 05 BF FD | 	call	#_pop
1d0c8     FF 16 02 F6 | 	mov	arg03, result3
1d0cc     A7 FA 61 FC | 	wrlong	result1, fp
1d0d0     04 4E 05 F1 | 	add	fp, #4
1d0d4     A7 FC 61 FC | 	wrlong	result2, fp
1d0d8     04 4E 05 F1 | 	add	fp, #4
1d0dc     A7 16 62 FC | 	wrlong	arg03, fp
1d0e0     08 4E 85 F1 | 	sub	fp, #8
1d0e4     A7 12 02 F6 | 	mov	arg01, fp
1d0e8     D4 06 BF FD | 	call	#_converttoint
1d0ec     28 4E 05 F1 | 	add	fp, #40
1d0f0     A7 FA 61 FC | 	wrlong	result1, fp
1d0f4     28 4E 85 F1 | 	sub	fp, #40
1d0f8     0C 00 90 FD | 	jmp	#LR__2297
1d0fc                 | LR__2296
1d0fc     28 4E 05 F1 | 	add	fp, #40
1d100     A7 00 68 FC | 	wrlong	#0, fp
1d104     28 4E 85 F1 | 	sub	fp, #40
1d108                 | LR__2297
1d108     0C 4E 05 F1 | 	add	fp, #12
1d10c     A7 28 02 FB | 	rdlong	local02, fp
1d110     1C 4E 05 F1 | 	add	fp, #28
1d114     A7 2A 02 FB | 	rdlong	local03, fp
1d118     04 4E 05 F1 | 	add	fp, #4
1d11c     A7 FC 01 FB | 	rdlong	result2, fp
1d120     10 4E 85 F1 | 	sub	fp, #16
1d124     A7 FE 01 FB | 	rdlong	result3, fp
1d128     FF FC 01 FD | 	qmul	result2, result3
1d12c     10 28 06 F1 | 	add	local02, #16
1d130     14 4E 05 F1 | 	add	fp, #20
1d134     A7 FC 01 FB | 	rdlong	result2, fp
1d138     18 FA 61 FD | 	getqx	result1
1d13c     FF FC 01 FD | 	qmul	result2, result3
1d140     FD 2A 02 F1 | 	add	local03, result1
1d144     10 4E 85 F1 | 	sub	fp, #16
1d148     A7 FE 01 FB | 	rdlong	result3, fp
1d14c     18 FC 61 FD | 	getqx	result2
1d150     FF FC 01 FD | 	qmul	result2, result3
1d154     08 4E 85 F1 | 	sub	fp, #8
1d158     A7 FE 01 FB | 	rdlong	result3, fp
1d15c     18 FC 61 FD | 	getqx	result2
1d160     FE 2A 02 F1 | 	add	local03, result2
1d164     FF 2A 02 FD | 	qmul	local03, result3
1d168     1C 4E 05 F1 | 	add	fp, #28
1d16c                 | ' 
1d16c                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1d16c                 | ' 
1d16c                 | ' select case vartype
1d16c     18 FC 61 FD | 	getqx	result2
1d170     FE 28 02 F1 | 	add	local02, result2
1d174     A7 28 62 FC | 	wrlong	local02, fp
1d178     24 4E 85 F1 | 	sub	fp, #36
1d17c     A7 2C 02 FB | 	rdlong	local04, fp
1d180     10 4E 85 F1 | 	sub	fp, #16
1d184     00 2D 86 F1 | 	sub	local04, #256
1d188     0C 2C 26 F3 | 	fle	local04, #12
1d18c     30 2C 62 FD | 	jmprel	local04
1d190                 | LR__2298
1d190     30 00 90 FD | 	jmp	#LR__2299
1d194     58 00 90 FD | 	jmp	#LR__2300
1d198     8C 00 90 FD | 	jmp	#LR__2301
1d19c     AC 00 90 FD | 	jmp	#LR__2302
1d1a0     E8 00 90 FD | 	jmp	#LR__2303
1d1a4     08 01 90 FD | 	jmp	#LR__2304
1d1a8     24 01 90 FD | 	jmp	#LR__2305
1d1ac     40 01 90 FD | 	jmp	#LR__2306
1d1b0     50 01 90 FD | 	jmp	#LR__2307
1d1b4     60 01 90 FD | 	jmp	#LR__2308
1d1b8     7C 01 90 FD | 	jmp	#LR__2309
1d1bc     8C 01 90 FD | 	jmp	#LR__2310
1d1c0     B8 01 90 FD | 	jmp	#LR__2311
1d1c4                 | LR__2299
1d1c4     A7 12 02 F6 | 	mov	arg01, fp
1d1c8     34 4E 05 F1 | 	add	fp, #52
1d1cc     A7 14 02 FB | 	rdlong	arg02, fp
1d1d0     34 4E 85 F1 | 	sub	fp, #52
1d1d4     0C 16 06 F6 | 	mov	arg03, #12
1d1d8     0B 00 00 FF 
1d1dc     CC E4 05 F1 | 	add	objptr, ##5836
1d1e0     00 8B B0 FD | 	call	#_psram_spin2_read1
1d1e4     0B 00 00 FF 
1d1e8     CC E4 85 F1 | 	sub	objptr, ##5836
1d1ec     8C 01 90 FD | 	jmp	#LR__2311
1d1f0                 | LR__2300
1d1f0     08 4E 05 F1 | 	add	fp, #8
1d1f4     A7 38 68 FC | 	wrlong	#28, fp
1d1f8     2C 4E 05 F1 | 	add	fp, #44
1d1fc     A7 12 02 FB | 	rdlong	arg01, fp
1d200     34 4E 85 F1 | 	sub	fp, #52
1d204     EC 5F B0 FD | 	call	#_pspeek
1d208     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d20c     A7 FA 61 FC | 	wrlong	result1, fp
1d210     80 FA 15 F2 | 	cmp	result1, #128 wc
1d214     00 27 66 36 |  if_ae	neg	local01, #256
1d218     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1d21c     15 27 42 35 |  if_ae	or	local01, local03
1d220     A7 26 62 3C |  if_ae	wrlong	local01, fp
1d224     54 01 90 FD | 	jmp	#LR__2311
1d228                 | LR__2301
1d228     08 4E 05 F1 | 	add	fp, #8
1d22c     A7 3A 68 FC | 	wrlong	#29, fp
1d230     2C 4E 05 F1 | 	add	fp, #44
1d234     A7 12 02 FB | 	rdlong	arg01, fp
1d238     34 4E 85 F1 | 	sub	fp, #52
1d23c     B4 5F B0 FD | 	call	#_pspeek
1d240     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d244     A7 FA 61 FC | 	wrlong	result1, fp
1d248     30 01 90 FD | 	jmp	#LR__2311
1d24c                 | LR__2302
1d24c     08 4E 05 F1 | 	add	fp, #8
1d250     A7 38 68 FC | 	wrlong	#28, fp
1d254     2C 4E 05 F1 | 	add	fp, #44
1d258     A7 12 02 FB | 	rdlong	arg01, fp
1d25c     34 4E 85 F1 | 	sub	fp, #52
1d260     E8 5F B0 FD | 	call	#_pslpeek
1d264     FD FA 31 F9 | 	getword	result1, result1, #0
1d268     A7 FA 61 FC | 	wrlong	result1, fp
1d26c     40 00 00 FF 
1d270     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1d274     FF 7F 00 3F 
1d278     00 27 06 36 |  if_ae	mov	local01, ##16776960
1d27c     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1d280     15 27 42 35 |  if_ae	or	local01, local03
1d284     A7 26 62 3C |  if_ae	wrlong	local01, fp
1d288     F0 00 90 FD | 	jmp	#LR__2311
1d28c                 | LR__2303
1d28c     08 4E 05 F1 | 	add	fp, #8
1d290     A7 3A 68 FC | 	wrlong	#29, fp
1d294     2C 4E 05 F1 | 	add	fp, #44
1d298     A7 12 02 FB | 	rdlong	arg01, fp
1d29c     34 4E 85 F1 | 	sub	fp, #52
1d2a0     A8 5F B0 FD | 	call	#_pslpeek
1d2a4     FD FA 31 F9 | 	getword	result1, result1, #0
1d2a8     A7 FA 61 FC | 	wrlong	result1, fp
1d2ac     CC 00 90 FD | 	jmp	#LR__2311
1d2b0                 | LR__2304
1d2b0     08 4E 05 F1 | 	add	fp, #8
1d2b4     A7 38 68 FC | 	wrlong	#28, fp
1d2b8     2C 4E 05 F1 | 	add	fp, #44
1d2bc     A7 12 02 FB | 	rdlong	arg01, fp
1d2c0     34 4E 85 F1 | 	sub	fp, #52
1d2c4     84 5F B0 FD | 	call	#_pslpeek
1d2c8     A7 FA 61 FC | 	wrlong	result1, fp
1d2cc     AC 00 90 FD | 	jmp	#LR__2311
1d2d0                 | LR__2305
1d2d0     08 4E 05 F1 | 	add	fp, #8
1d2d4     A7 3A 68 FC | 	wrlong	#29, fp
1d2d8     2C 4E 05 F1 | 	add	fp, #44
1d2dc     A7 12 02 FB | 	rdlong	arg01, fp
1d2e0     34 4E 85 F1 | 	sub	fp, #52
1d2e4     64 5F B0 FD | 	call	#_pslpeek
1d2e8     A7 FA 61 FC | 	wrlong	result1, fp
1d2ec     8C 00 90 FD | 	jmp	#LR__2311
1d2f0                 | LR__2306
1d2f0     08 4E 05 F1 | 	add	fp, #8
1d2f4     A7 FE 69 FC | 	wrlong	#255, fp
1d2f8     08 4E 85 F1 | 	sub	fp, #8
1d2fc     A7 60 68 FC | 	wrlong	#48, fp
1d300     78 00 90 FD | 	jmp	#LR__2311
1d304                 | LR__2307
1d304     08 4E 05 F1 | 	add	fp, #8
1d308     A7 FE 69 FC | 	wrlong	#255, fp
1d30c     08 4E 85 F1 | 	sub	fp, #8
1d310     A7 60 68 FC | 	wrlong	#48, fp
1d314     64 00 90 FD | 	jmp	#LR__2311
1d318                 | LR__2308
1d318     08 4E 05 F1 | 	add	fp, #8
1d31c     A7 3C 68 FC | 	wrlong	#30, fp
1d320     2C 4E 05 F1 | 	add	fp, #44
1d324     A7 12 02 FB | 	rdlong	arg01, fp
1d328     34 4E 85 F1 | 	sub	fp, #52
1d32c     1C 5F B0 FD | 	call	#_pslpeek
1d330     A7 FA 61 FC | 	wrlong	result1, fp
1d334     44 00 90 FD | 	jmp	#LR__2311
1d338                 | LR__2309
1d338     08 4E 05 F1 | 	add	fp, #8
1d33c     A7 FE 69 FC | 	wrlong	#255, fp
1d340     08 4E 85 F1 | 	sub	fp, #8
1d344     A7 60 68 FC | 	wrlong	#48, fp
1d348     30 00 90 FD | 	jmp	#LR__2311
1d34c                 | LR__2310
1d34c     08 4E 05 F1 | 	add	fp, #8
1d350     A7 3E 68 FC | 	wrlong	#31, fp
1d354     2C 4E 05 F1 | 	add	fp, #44
1d358     A7 12 02 FB | 	rdlong	arg01, fp
1d35c     34 4E 85 F1 | 	sub	fp, #52
1d360     E8 5E B0 FD | 	call	#_pslpeek
1d364     A7 FA 61 FC | 	wrlong	result1, fp
1d368     00 04 00 FF 
1d36c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1d370     08 4E 05 31 |  if_ae	add	fp, #8
1d374     A7 56 68 3C |  if_ae	wrlong	#43, fp
1d378     08 4E 85 31 |  if_ae	sub	fp, #8
1d37c                 | LR__2311
1d37c     A7 12 02 F6 | 	mov	arg01, fp
1d380     F0 02 BF FD | 	call	#_push
1d384                 | LR__2312
1d384     A7 F0 03 F6 | 	mov	ptra, fp
1d388     B2 00 A0 FD | 	call	#popregs_
1d38c                 | _do_getvar_ret
1d38c     2D 00 64 FD | 	ret
1d390                 | 
1d390                 | ' 
1d390                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1d390                 | ' 
1d390                 | ' sub do_getaddr
1d390                 | _do_getaddr
1d390     01 4A 05 F6 | 	mov	COUNT_, #1
1d394     A8 00 A0 FD | 	call	#pushregs_
1d398     38 F0 07 F1 | 	add	ptra, #56
1d39c                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1d39c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1d39c     4A 00 00 FF 
1d3a0     80 E4 05 F1 | 	add	objptr, ##38016
1d3a4     F2 12 02 FB | 	rdlong	arg01, objptr
1d3a8     09 FD 01 F6 | 	mov	result2, arg01
1d3ac     01 FC 65 F0 | 	shl	result2, #1
1d3b0     09 FD 01 F1 | 	add	result2, arg01
1d3b4     02 FC 65 F0 | 	shl	result2, #2
1d3b8     03 00 00 FF 
1d3bc     04 E4 85 F1 | 	sub	objptr, ##1540
1d3c0     F2 FC 01 F1 | 	add	result2, objptr
1d3c4     04 FC 05 F1 | 	add	result2, #4
1d3c8     FE FC 09 FB | 	rdlong	result2, result2 wz
1d3cc     47 00 00 FF 
1d3d0     7C E4 85 F1 | 	sub	objptr, ##36476
1d3d4     10 01 90 5D |  if_ne	jmp	#LR__2320
1d3d8     4A 00 00 FF 
1d3dc     80 E4 05 F1 | 	add	objptr, ##38016
1d3e0     F2 12 02 FB | 	rdlong	arg01, objptr
1d3e4     09 FD 01 F6 | 	mov	result2, arg01
1d3e8     01 FC 65 F0 | 	shl	result2, #1
1d3ec     09 FD 01 F1 | 	add	result2, arg01
1d3f0     02 FC 65 F0 | 	shl	result2, #2
1d3f4     03 00 00 FF 
1d3f8     04 E4 85 F1 | 	sub	objptr, ##1540
1d3fc     F2 FC 01 F1 | 	add	result2, objptr
1d400     FE 12 02 FB | 	rdlong	arg01, result2
1d404     04 12 66 F0 | 	shl	arg01, #4
1d408     32 00 00 FF 
1d40c     84 E4 85 F1 | 	sub	objptr, ##25732
1d410     F2 12 02 F1 | 	add	arg01, objptr
1d414     0C 12 06 F1 | 	add	arg01, #12
1d418     09 13 02 FB | 	rdlong	arg01, arg01
1d41c     08 4E 05 F1 | 	add	fp, #8
1d420     A7 12 62 FC | 	wrlong	arg01, fp
1d424                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1d424                 | '    if t1.result_type>=array_no_type then goto 2200
1d424     08 4E 85 F1 | 	sub	fp, #8
1d428     00 13 16 F2 | 	cmp	arg01, #256 wc
1d42c     14 00 00 FF 
1d430     F8 E5 85 F1 | 	sub	objptr, ##10744
1d434     B0 00 90 3D |  if_ae	jmp	#LR__2321
1d438     4A 00 00 FF 
1d43c     80 E4 05 F1 | 	add	objptr, ##38016
1d440     F2 12 02 FB | 	rdlong	arg01, objptr
1d444     09 FF 01 F6 | 	mov	result3, arg01
1d448     01 FE 65 F0 | 	shl	result3, #1
1d44c     09 FF 01 F1 | 	add	result3, arg01
1d450     02 FE 65 F0 | 	shl	result3, #2
1d454     03 00 00 FF 
1d458     04 E4 85 F1 | 	sub	objptr, ##1540
1d45c     F2 FE 01 F1 | 	add	result3, objptr
1d460     FF FA 01 FB | 	rdlong	result1, result3
1d464     04 FA 65 F0 | 	shl	result1, #4
1d468     32 00 00 FF 
1d46c     84 E4 85 F1 | 	sub	objptr, ##25732
1d470     F2 FA 01 F1 | 	add	result1, objptr
1d474     04 FA 05 F1 | 	add	result1, #4
1d478     A7 FA 61 FC | 	wrlong	result1, fp
1d47c     35 00 00 FF 
1d480     88 E4 05 F1 | 	add	objptr, ##27272
1d484     F2 FE 01 FB | 	rdlong	result3, objptr
1d488     FF 12 02 F6 | 	mov	arg01, result3
1d48c     01 12 66 F0 | 	shl	arg01, #1
1d490     FF 12 02 F1 | 	add	arg01, result3
1d494     02 12 66 F0 | 	shl	arg01, #2
1d498     03 00 00 FF 
1d49c     04 E4 85 F1 | 	sub	objptr, ##1540
1d4a0     F2 12 02 F1 | 	add	arg01, objptr
1d4a4     09 13 02 FB | 	rdlong	arg01, arg01
1d4a8     04 12 66 F0 | 	shl	arg01, #4
1d4ac     32 00 00 FF 
1d4b0     84 E4 85 F1 | 	sub	objptr, ##25732
1d4b4     F2 12 02 F1 | 	add	arg01, objptr
1d4b8     0C 12 06 F1 | 	add	arg01, #12
1d4bc     09 13 02 FB | 	rdlong	arg01, arg01
1d4c0     04 4E 05 F1 | 	add	fp, #4
1d4c4     A7 12 62 FC | 	wrlong	arg01, fp
1d4c8     04 4E 05 F1 | 	add	fp, #4
1d4cc     A7 3A 68 FC | 	wrlong	#29, fp
1d4d0     08 4E 85 F1 | 	sub	fp, #8
1d4d4     A7 12 02 F6 | 	mov	arg01, fp
1d4d8     14 00 00 FF 
1d4dc     F8 E5 85 F1 | 	sub	objptr, ##10744
1d4e0     90 01 BF FD | 	call	#_push
1d4e4                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1d4e4                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1d4e4                 | '   t1.result_type=result_uint
1d4e4                 | '   push t1 : return
1d4e4     2C 03 90 FD | 	jmp	#LR__2330
1d4e8                 | LR__2320
1d4e8                 | LR__2321
1d4e8     4A 00 00 FF 
1d4ec     80 E4 05 F1 | 	add	objptr, ##38016
1d4f0     F2 FE 01 FB | 	rdlong	result3, objptr
1d4f4     FF FC 01 F6 | 	mov	result2, result3
1d4f8     01 FC 65 F0 | 	shl	result2, #1
1d4fc     FF FC 01 F1 | 	add	result2, result3
1d500     02 FC 65 F0 | 	shl	result2, #2
1d504     03 00 00 FF 
1d508     04 E4 85 F1 | 	sub	objptr, ##1540
1d50c     F2 FC 01 F1 | 	add	result2, objptr
1d510     FE FE 01 FB | 	rdlong	result3, result2
1d514     04 FE 65 F0 | 	shl	result3, #4
1d518     32 00 00 FF 
1d51c     84 E4 85 F1 | 	sub	objptr, ##25732
1d520     F2 FE 01 F1 | 	add	result3, objptr
1d524     04 FE 05 F1 | 	add	result3, #4
1d528     FF FE 01 FB | 	rdlong	result3, result3
1d52c     0C 4E 05 F1 | 	add	fp, #12
1d530     A7 FE 61 FC | 	wrlong	result3, fp
1d534     35 00 00 FF 
1d538     88 E4 05 F1 | 	add	objptr, ##27272
1d53c     F2 FE 01 FB | 	rdlong	result3, objptr
1d540     FF 12 02 F6 | 	mov	arg01, result3
1d544     01 12 66 F0 | 	shl	arg01, #1
1d548     FF 12 02 F1 | 	add	arg01, result3
1d54c     02 12 66 F0 | 	shl	arg01, #2
1d550     03 00 00 FF 
1d554     04 E4 85 F1 | 	sub	objptr, ##1540
1d558     F2 12 02 F1 | 	add	arg01, objptr
1d55c     09 13 02 FB | 	rdlong	arg01, arg01
1d560     04 12 66 F0 | 	shl	arg01, #4
1d564     32 00 00 FF 
1d568     84 E4 85 F1 | 	sub	objptr, ##25732
1d56c     F2 12 02 F1 | 	add	arg01, objptr
1d570     0C 12 06 F1 | 	add	arg01, #12
1d574     09 13 02 FB | 	rdlong	arg01, arg01
1d578     08 4E 85 F1 | 	sub	fp, #8
1d57c     A7 12 62 FC | 	wrlong	arg01, fp
1d580     08 4E 05 F1 | 	add	fp, #8
1d584     A7 12 02 FB | 	rdlong	arg01, fp
1d588     0C 4E 85 F1 | 	sub	fp, #12
1d58c     14 00 00 FF 
1d590     F8 E5 85 F1 | 	sub	objptr, ##10744
1d594     B4 5C B0 FD | 	call	#_pslpeek
1d598     FD FA 31 F9 | 	getword	result1, result1, #0
1d59c     10 4E 05 F1 | 	add	fp, #16
1d5a0     A7 FA 61 FC | 	wrlong	result1, fp
1d5a4     4A 00 00 FF 
1d5a8     80 E4 05 F1 | 	add	objptr, ##38016
1d5ac     F2 FE 01 FB | 	rdlong	result3, objptr
1d5b0     FF 12 02 F6 | 	mov	arg01, result3
1d5b4     01 12 66 F0 | 	shl	arg01, #1
1d5b8     FF 12 02 F1 | 	add	arg01, result3
1d5bc     02 12 66 F0 | 	shl	arg01, #2
1d5c0     03 00 00 FF 
1d5c4     04 E4 85 F1 | 	sub	objptr, ##1540
1d5c8     F2 12 02 F1 | 	add	arg01, objptr
1d5cc     04 12 06 F1 | 	add	arg01, #4
1d5d0     09 13 02 FB | 	rdlong	arg01, arg01
1d5d4     04 4E 05 F1 | 	add	fp, #4
1d5d8     A7 12 62 FC | 	wrlong	arg01, fp
1d5dc     08 4E 85 F1 | 	sub	fp, #8
1d5e0     A7 12 02 FB | 	rdlong	arg01, fp
1d5e4     0C 4E 85 F1 | 	sub	fp, #12
1d5e8     02 12 06 F1 | 	add	arg01, #2
1d5ec     47 00 00 FF 
1d5f0     7C E4 85 F1 | 	sub	objptr, ##36476
1d5f4     FC 5B B0 FD | 	call	#_pspeek
1d5f8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d5fc     18 4E 05 F1 | 	add	fp, #24
1d600     A7 FA 61 FC | 	wrlong	result1, fp
1d604     0C 4E 85 F1 | 	sub	fp, #12
1d608     A7 12 02 FB | 	rdlong	arg01, fp
1d60c     0C 4E 85 F1 | 	sub	fp, #12
1d610     04 12 06 F1 | 	add	arg01, #4
1d614     34 5C B0 FD | 	call	#_pslpeek
1d618     1C 4E 05 F1 | 	add	fp, #28
1d61c     A7 FA 61 FC | 	wrlong	result1, fp
1d620     10 4E 85 F1 | 	sub	fp, #16
1d624     A7 12 02 FB | 	rdlong	arg01, fp
1d628     0C 4E 85 F1 | 	sub	fp, #12
1d62c     08 12 06 F1 | 	add	arg01, #8
1d630     18 5C B0 FD | 	call	#_pslpeek
1d634     20 4E 05 F1 | 	add	fp, #32
1d638     A7 FA 61 FC | 	wrlong	result1, fp
1d63c     14 4E 85 F1 | 	sub	fp, #20
1d640     A7 12 02 FB | 	rdlong	arg01, fp
1d644     0C 4E 85 F1 | 	sub	fp, #12
1d648     0C 12 06 F1 | 	add	arg01, #12
1d64c     FC 5B B0 FD | 	call	#_pslpeek
1d650     24 4E 05 F1 | 	add	fp, #36
1d654     A7 FA 61 FC | 	wrlong	result1, fp
1d658                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1d658                 | ' esize=pspeek(arrptr+2)
1d658                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1d658                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1d658                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1d658                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1d658     10 4E 85 F1 | 	sub	fp, #16
1d65c     A7 12 02 FB | 	rdlong	arg01, fp
1d660     14 4E 85 F1 | 	sub	fp, #20
1d664     03 12 16 F2 | 	cmp	arg01, #3 wc
1d668     34 00 90 CD |  if_b	jmp	#LR__2322
1d66c     6C FF BE FD | 	call	#_pop
1d670     A7 FA 61 FC | 	wrlong	result1, fp
1d674     04 4E 05 F1 | 	add	fp, #4
1d678     A7 FC 61 FC | 	wrlong	result2, fp
1d67c     04 4E 05 F1 | 	add	fp, #4
1d680     A7 FE 61 FC | 	wrlong	result3, fp
1d684     08 4E 85 F1 | 	sub	fp, #8
1d688     A7 12 02 F6 | 	mov	arg01, fp
1d68c     30 01 BF FD | 	call	#_converttoint
1d690     30 4E 05 F1 | 	add	fp, #48
1d694     A7 FA 61 FC | 	wrlong	result1, fp
1d698     30 4E 85 F1 | 	sub	fp, #48
1d69c     0C 00 90 FD | 	jmp	#LR__2323
1d6a0                 | LR__2322
1d6a0     30 4E 05 F1 | 	add	fp, #48
1d6a4     A7 00 68 FC | 	wrlong	#0, fp
1d6a8     30 4E 85 F1 | 	sub	fp, #48
1d6ac                 | LR__2323
1d6ac                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1d6ac     14 4E 05 F1 | 	add	fp, #20
1d6b0     A7 12 02 FB | 	rdlong	arg01, fp
1d6b4     14 4E 85 F1 | 	sub	fp, #20
1d6b8     02 12 16 F2 | 	cmp	arg01, #2 wc
1d6bc     34 00 90 CD |  if_b	jmp	#LR__2324
1d6c0     18 FF BE FD | 	call	#_pop
1d6c4     A7 FA 61 FC | 	wrlong	result1, fp
1d6c8     04 4E 05 F1 | 	add	fp, #4
1d6cc     A7 FC 61 FC | 	wrlong	result2, fp
1d6d0     04 4E 05 F1 | 	add	fp, #4
1d6d4     A7 FE 61 FC | 	wrlong	result3, fp
1d6d8     08 4E 85 F1 | 	sub	fp, #8
1d6dc     A7 12 02 F6 | 	mov	arg01, fp
1d6e0     DC 00 BF FD | 	call	#_converttoint
1d6e4     2C 4E 05 F1 | 	add	fp, #44
1d6e8     A7 FA 61 FC | 	wrlong	result1, fp
1d6ec     2C 4E 85 F1 | 	sub	fp, #44
1d6f0     0C 00 90 FD | 	jmp	#LR__2325
1d6f4                 | LR__2324
1d6f4     2C 4E 05 F1 | 	add	fp, #44
1d6f8     A7 00 68 FC | 	wrlong	#0, fp
1d6fc     2C 4E 85 F1 | 	sub	fp, #44
1d700                 | LR__2325
1d700                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1d700     14 4E 05 F1 | 	add	fp, #20
1d704     A7 12 02 FB | 	rdlong	arg01, fp
1d708     14 4E 85 F1 | 	sub	fp, #20
1d70c     01 12 16 F2 | 	cmp	arg01, #1 wc
1d710     34 00 90 CD |  if_b	jmp	#LR__2326
1d714     C4 FE BE FD | 	call	#_pop
1d718     A7 FA 61 FC | 	wrlong	result1, fp
1d71c     04 4E 05 F1 | 	add	fp, #4
1d720     A7 FC 61 FC | 	wrlong	result2, fp
1d724     04 4E 05 F1 | 	add	fp, #4
1d728     A7 FE 61 FC | 	wrlong	result3, fp
1d72c     08 4E 85 F1 | 	sub	fp, #8
1d730     A7 12 02 F6 | 	mov	arg01, fp
1d734     88 00 BF FD | 	call	#_converttoint
1d738     28 4E 05 F1 | 	add	fp, #40
1d73c     A7 FA 61 FC | 	wrlong	result1, fp
1d740     28 4E 85 F1 | 	sub	fp, #40
1d744     0C 00 90 FD | 	jmp	#LR__2327
1d748                 | LR__2326
1d748     28 4E 05 F1 | 	add	fp, #40
1d74c     A7 00 68 FC | 	wrlong	#0, fp
1d750     28 4E 85 F1 | 	sub	fp, #40
1d754                 | LR__2327
1d754                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1d754                 | ' if numpar>0 then
1d754     14 4E 05 F1 | 	add	fp, #20
1d758     A7 FE 01 FB | 	rdlong	result3, fp
1d75c     14 4E 85 F1 | 	sub	fp, #20
1d760     01 FE 15 F2 | 	cmp	result3, #1 wc
1d764     8C 00 90 CD |  if_b	jmp	#LR__2328
1d768     0C 4E 05 F1 | 	add	fp, #12
1d76c     A7 FC 01 FB | 	rdlong	result2, fp
1d770     1C 4E 05 F1 | 	add	fp, #28
1d774     A7 FE 01 FB | 	rdlong	result3, fp
1d778     04 4E 05 F1 | 	add	fp, #4
1d77c     A7 12 02 FB | 	rdlong	arg01, fp
1d780     10 4E 85 F1 | 	sub	fp, #16
1d784     A7 FA 01 FB | 	rdlong	result1, fp
1d788     FD 12 02 FD | 	qmul	arg01, result1
1d78c     10 FC 05 F1 | 	add	result2, #16
1d790     14 4E 05 F1 | 	add	fp, #20
1d794     A7 26 02 FB | 	rdlong	local01, fp
1d798     18 12 62 FD | 	getqx	arg01
1d79c     FD 26 02 FD | 	qmul	local01, result1
1d7a0     09 FF 01 F1 | 	add	result3, arg01
1d7a4     10 4E 85 F1 | 	sub	fp, #16
1d7a8     A7 26 02 FB | 	rdlong	local01, fp
1d7ac     18 FA 61 FD | 	getqx	result1
1d7b0     13 FB 01 FD | 	qmul	result1, local01
1d7b4     08 4E 85 F1 | 	sub	fp, #8
1d7b8     A7 26 02 FB | 	rdlong	local01, fp
1d7bc     18 FA 61 FD | 	getqx	result1
1d7c0     FD FE 01 F1 | 	add	result3, result1
1d7c4     13 FF 01 FD | 	qmul	result3, local01
1d7c8     1C 4E 05 F1 | 	add	fp, #28
1d7cc     18 26 62 FD | 	getqx	local01
1d7d0     13 FD 01 F1 | 	add	result2, local01
1d7d4     A7 FC 61 FC | 	wrlong	result2, fp
1d7d8     2C 4E 85 F1 | 	sub	fp, #44
1d7dc     A7 3A 68 FC | 	wrlong	#29, fp
1d7e0     2C 4E 05 F1 | 	add	fp, #44
1d7e4     A7 26 02 FB | 	rdlong	local01, fp
1d7e8     34 4E 85 F1 | 	sub	fp, #52
1d7ec     A7 26 62 FC | 	wrlong	local01, fp
1d7f0     18 00 90 FD | 	jmp	#LR__2329
1d7f4                 | LR__2328
1d7f4     08 4E 05 F1 | 	add	fp, #8
1d7f8     A7 3A 68 FC | 	wrlong	#29, fp
1d7fc     04 4E 05 F1 | 	add	fp, #4
1d800     A7 26 02 FB | 	rdlong	local01, fp
1d804     0C 4E 85 F1 | 	sub	fp, #12
1d808     A7 26 62 FC | 	wrlong	local01, fp
1d80c                 | LR__2329
1d80c     A7 12 02 F6 | 	mov	arg01, fp
1d810     60 FE BE FD | 	call	#_push
1d814                 | LR__2330
1d814     A7 F0 03 F6 | 	mov	ptra, fp
1d818     B2 00 A0 FD | 	call	#popregs_
1d81c                 | _do_getaddr_ret
1d81c     2D 00 64 FD | 	ret
1d820                 | 
1d820                 | ' 
1d820                 | ' 
1d820                 | ' 
1d820                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1d820                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1d820                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1d820                 | ' 
1d820                 | ' '--------------------------------- AND 
1d820                 | ' 
1d820                 | ' sub do_and 
1d820                 | _do_and
1d820     03 4A 05 F6 | 	mov	COUNT_, #3
1d824     A8 00 A0 FD | 	call	#pushregs_
1d828     18 F0 07 F1 | 	add	ptra, #24
1d82c     AC FD BE FD | 	call	#_pop
1d830     FD 12 02 F6 | 	mov	arg01, result1
1d834     FE 26 02 F6 | 	mov	local01, result2
1d838     FF 28 02 F6 | 	mov	local02, result3
1d83c     0C 4E 05 F1 | 	add	fp, #12
1d840     A7 12 62 FC | 	wrlong	arg01, fp
1d844     04 4E 05 F1 | 	add	fp, #4
1d848     A7 26 62 FC | 	wrlong	local01, fp
1d84c     04 4E 05 F1 | 	add	fp, #4
1d850     A7 28 62 FC | 	wrlong	local02, fp
1d854     14 4E 85 F1 | 	sub	fp, #20
1d858     80 FD BE FD | 	call	#_pop
1d85c     FF 2A 02 F6 | 	mov	local03, result3
1d860     A7 FA 61 FC | 	wrlong	result1, fp
1d864     04 4E 05 F1 | 	add	fp, #4
1d868     A7 FC 61 FC | 	wrlong	result2, fp
1d86c     04 4E 05 F1 | 	add	fp, #4
1d870     A7 2A 62 FC | 	wrlong	local03, fp
1d874                 | ' 
1d874                 | ' t2=pop()
1d874                 | ' t1=pop()
1d874                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1d874     08 4E 85 F1 | 	sub	fp, #8
1d878     1C 2A 0E F2 | 	cmp	local03, #28 wz
1d87c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d880     A7 2A 62 AC |  if_e	wrlong	local03, fp
1d884     08 4E 05 A1 |  if_e	add	fp, #8
1d888     A7 3A 68 AC |  if_e	wrlong	#29, fp
1d88c     08 4E 85 A1 |  if_e	sub	fp, #8
1d890                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1d890     14 4E 05 F1 | 	add	fp, #20
1d894     A7 2A 02 FB | 	rdlong	local03, fp
1d898     14 4E 85 F1 | 	sub	fp, #20
1d89c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1d8a0     18 00 90 5D |  if_ne	jmp	#LR__2340
1d8a4     0C 4E 05 F1 | 	add	fp, #12
1d8a8     A7 2A 02 FB | 	rdlong	local03, fp
1d8ac     A7 2A 62 FC | 	wrlong	local03, fp
1d8b0     08 4E 05 F1 | 	add	fp, #8
1d8b4     A7 3A 68 FC | 	wrlong	#29, fp
1d8b8     14 4E 85 F1 | 	sub	fp, #20
1d8bc                 | LR__2340
1d8bc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1d8bc     08 4E 05 F1 | 	add	fp, #8
1d8c0     A7 2A 02 FB | 	rdlong	local03, fp
1d8c4     08 4E 85 F1 | 	sub	fp, #8
1d8c8     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d8cc     14 4E 05 51 |  if_ne	add	fp, #20
1d8d0     A7 28 02 5B |  if_ne	rdlong	local02, fp
1d8d4     14 4E 85 51 |  if_ne	sub	fp, #20
1d8d8     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1d8dc     08 4E 05 51 |  if_ne	add	fp, #8
1d8e0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1d8e4     08 4E 85 51 |  if_ne	sub	fp, #8
1d8e8     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1d8ec     14 4E 05 51 |  if_ne	add	fp, #20
1d8f0     14 4E 85 51 |  if_ne	sub	fp, #20
1d8f4     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1d8f8     A7 0C 68 AC |  if_e	wrlong	#6, fp
1d8fc     08 4E 05 A1 |  if_e	add	fp, #8
1d900     A7 FE 69 AC |  if_e	wrlong	#255, fp
1d904     08 4E 85 A1 |  if_e	sub	fp, #8
1d908     18 00 90 AD |  if_e	jmp	#LR__2341
1d90c     A7 2A 02 FB | 	rdlong	local03, fp
1d910     0C 4E 05 F1 | 	add	fp, #12
1d914     A7 26 02 FB | 	rdlong	local01, fp
1d918     0C 4E 85 F1 | 	sub	fp, #12
1d91c     13 2B 02 F5 | 	and	local03, local01
1d920     A7 2A 62 FC | 	wrlong	local03, fp
1d924                 | LR__2341
1d924     A7 12 02 F6 | 	mov	arg01, fp
1d928     48 FD BE FD | 	call	#_push
1d92c     A7 F0 03 F6 | 	mov	ptra, fp
1d930     B2 00 A0 FD | 	call	#popregs_
1d934                 | _do_and_ret
1d934     2D 00 64 FD | 	ret
1d938                 | 
1d938                 | ' 
1d938                 | ' '--------------------------------- DIV (integer divide)
1d938                 | ' 
1d938                 | ' sub do_div 
1d938                 | _do_div
1d938     01 4A 05 F6 | 	mov	COUNT_, #1
1d93c     A8 00 A0 FD | 	call	#pushregs_
1d940     18 F0 07 F1 | 	add	ptra, #24
1d944     94 FC BE FD | 	call	#_pop
1d948     FD 92 02 F6 | 	mov	muldivb_, result1
1d94c     FE 90 02 F6 | 	mov	muldiva_, result2
1d950     FF 26 02 F6 | 	mov	local01, result3
1d954     0C 4E 05 F1 | 	add	fp, #12
1d958     A7 92 62 FC | 	wrlong	muldivb_, fp
1d95c     04 4E 05 F1 | 	add	fp, #4
1d960     A7 90 62 FC | 	wrlong	muldiva_, fp
1d964     04 4E 05 F1 | 	add	fp, #4
1d968     A7 26 62 FC | 	wrlong	local01, fp
1d96c     14 4E 85 F1 | 	sub	fp, #20
1d970     68 FC BE FD | 	call	#_pop
1d974     A7 FA 61 FC | 	wrlong	result1, fp
1d978     04 4E 05 F1 | 	add	fp, #4
1d97c     A7 FC 61 FC | 	wrlong	result2, fp
1d980     04 4E 05 F1 | 	add	fp, #4
1d984     A7 FE 61 FC | 	wrlong	result3, fp
1d988                 | ' 
1d988                 | ' t2=pop()
1d988                 | ' t1=pop()
1d988                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1d988     08 4E 85 F1 | 	sub	fp, #8
1d98c     1F FE 0D F2 | 	cmp	result3, #31 wz
1d990     14 4E 05 51 |  if_ne	add	fp, #20
1d994     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1d998     14 4E 85 51 |  if_ne	sub	fp, #20
1d99c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1d9a0     A7 14 68 AC |  if_e	wrlong	#10, fp
1d9a4     08 4E 05 A1 |  if_e	add	fp, #8
1d9a8     A7 FE 69 AC |  if_e	wrlong	#255, fp
1d9ac     08 4E 85 A1 |  if_e	sub	fp, #8
1d9b0     90 01 90 AD |  if_e	jmp	#LR__2356
1d9b4                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1d9b4     08 4E 05 F1 | 	add	fp, #8
1d9b8     A7 92 02 FB | 	rdlong	muldivb_, fp
1d9bc     08 4E 85 F1 | 	sub	fp, #8
1d9c0     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1d9c4     1C 00 90 5D |  if_ne	jmp	#LR__2350
1d9c8     08 4E 05 F1 | 	add	fp, #8
1d9cc     A7 38 68 FC | 	wrlong	#28, fp
1d9d0     08 4E 85 F1 | 	sub	fp, #8
1d9d4     A7 12 02 FB | 	rdlong	arg01, fp
1d9d8     00 14 06 F6 | 	mov	arg02, #0
1d9dc     D0 C2 B0 FD | 	call	#__system___float_tointeger
1d9e0     A7 FA 61 FC | 	wrlong	result1, fp
1d9e4                 | LR__2350
1d9e4                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1d9e4     14 4E 05 F1 | 	add	fp, #20
1d9e8     A7 92 02 FB | 	rdlong	muldivb_, fp
1d9ec     14 4E 85 F1 | 	sub	fp, #20
1d9f0     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1d9f4     28 00 90 5D |  if_ne	jmp	#LR__2351
1d9f8     14 4E 05 F1 | 	add	fp, #20
1d9fc     A7 38 68 FC | 	wrlong	#28, fp
1da00     08 4E 85 F1 | 	sub	fp, #8
1da04     A7 12 02 FB | 	rdlong	arg01, fp
1da08     0C 4E 85 F1 | 	sub	fp, #12
1da0c     00 14 06 F6 | 	mov	arg02, #0
1da10     9C C2 B0 FD | 	call	#__system___float_tointeger
1da14     0C 4E 05 F1 | 	add	fp, #12
1da18     A7 FA 61 FC | 	wrlong	result1, fp
1da1c     0C 4E 85 F1 | 	sub	fp, #12
1da20                 | LR__2351
1da20                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1da20     08 4E 05 F1 | 	add	fp, #8
1da24     A7 92 02 FB | 	rdlong	muldivb_, fp
1da28     08 4E 85 F1 | 	sub	fp, #8
1da2c     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1da30     14 4E 05 A1 |  if_e	add	fp, #20
1da34     A7 26 02 AB |  if_e	rdlong	local01, fp
1da38     14 4E 85 A1 |  if_e	sub	fp, #20
1da3c     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1da40     20 00 90 5D |  if_ne	jmp	#LR__2352
1da44     0C 4E 05 F1 | 	add	fp, #12
1da48     A7 26 02 FB | 	rdlong	local01, fp
1da4c     0C 4E 85 F1 | 	sub	fp, #12
1da50     A7 92 02 FB | 	rdlong	muldivb_, fp
1da54     13 93 12 FD | 	qdiv	muldivb_, local01
1da58     18 26 62 FD | 	getqx	local01
1da5c     A7 26 62 FC | 	wrlong	local01, fp
1da60     E0 00 90 FD | 	jmp	#LR__2356
1da64                 | LR__2352
1da64                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1da64     08 4E 05 F1 | 	add	fp, #8
1da68     A7 92 02 FB | 	rdlong	muldivb_, fp
1da6c     08 4E 85 F1 | 	sub	fp, #8
1da70     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1da74     14 4E 05 A1 |  if_e	add	fp, #20
1da78     A7 26 02 AB |  if_e	rdlong	local01, fp
1da7c     14 4E 85 A1 |  if_e	sub	fp, #20
1da80     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1da84     2C 00 90 5D |  if_ne	jmp	#LR__2353
1da88     0C 4E 05 F1 | 	add	fp, #12
1da8c     A7 26 02 FB | 	rdlong	local01, fp
1da90     0C 4E 85 F1 | 	sub	fp, #12
1da94     A7 92 02 FB | 	rdlong	muldivb_, fp
1da98     13 93 12 FD | 	qdiv	muldivb_, local01
1da9c     18 26 62 FD | 	getqx	local01
1daa0     A7 26 62 FC | 	wrlong	local01, fp
1daa4     08 4E 05 F1 | 	add	fp, #8
1daa8     A7 38 68 FC | 	wrlong	#28, fp
1daac     08 4E 85 F1 | 	sub	fp, #8
1dab0     90 00 90 FD | 	jmp	#LR__2356
1dab4                 | LR__2353
1dab4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1dab4     08 4E 05 F1 | 	add	fp, #8
1dab8     A7 92 02 FB | 	rdlong	muldivb_, fp
1dabc     08 4E 85 F1 | 	sub	fp, #8
1dac0     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1dac4     14 4E 05 A1 |  if_e	add	fp, #20
1dac8     A7 26 02 AB |  if_e	rdlong	local01, fp
1dacc     14 4E 85 A1 |  if_e	sub	fp, #20
1dad0     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1dad4     1C 00 90 5D |  if_ne	jmp	#LR__2354
1dad8     A7 90 02 FB | 	rdlong	muldiva_, fp
1dadc     0C 4E 05 F1 | 	add	fp, #12
1dae0     A7 92 02 FB | 	rdlong	muldivb_, fp
1dae4     0C 4E 85 F1 | 	sub	fp, #12
1dae8     BA 00 A0 FD | 	call	#divide_
1daec     A7 92 62 FC | 	wrlong	muldivb_, fp
1daf0     50 00 90 FD | 	jmp	#LR__2356
1daf4                 | LR__2354
1daf4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1daf4     08 4E 05 F1 | 	add	fp, #8
1daf8     A7 92 02 FB | 	rdlong	muldivb_, fp
1dafc     08 4E 85 F1 | 	sub	fp, #8
1db00     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1db04     14 4E 05 A1 |  if_e	add	fp, #20
1db08     A7 26 02 AB |  if_e	rdlong	local01, fp
1db0c     14 4E 85 A1 |  if_e	sub	fp, #20
1db10     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1db14     1C 00 90 5D |  if_ne	jmp	#LR__2355
1db18     A7 90 02 FB | 	rdlong	muldiva_, fp
1db1c     0C 4E 05 F1 | 	add	fp, #12
1db20     A7 92 02 FB | 	rdlong	muldivb_, fp
1db24     0C 4E 85 F1 | 	sub	fp, #12
1db28     BA 00 A0 FD | 	call	#divide_
1db2c     A7 92 62 FC | 	wrlong	muldivb_, fp
1db30     10 00 90 FD | 	jmp	#LR__2356
1db34                 | LR__2355
1db34     A7 16 68 FC | 	wrlong	#11, fp
1db38     08 4E 05 F1 | 	add	fp, #8
1db3c     A7 FE 69 FC | 	wrlong	#255, fp
1db40     08 4E 85 F1 | 	sub	fp, #8
1db44                 | LR__2356
1db44     A7 12 02 F6 | 	mov	arg01, fp
1db48     28 FB BE FD | 	call	#_push
1db4c     A7 F0 03 F6 | 	mov	ptra, fp
1db50     B2 00 A0 FD | 	call	#popregs_
1db54                 | _do_div_ret
1db54     2D 00 64 FD | 	ret
1db58                 | 
1db58                 | ' 
1db58                 | ' '--------------------------------- equal (=)
1db58                 | ' 
1db58                 | ' sub do_eq
1db58                 | _do_eq
1db58     05 4A 05 F6 | 	mov	COUNT_, #5
1db5c     A8 00 A0 FD | 	call	#pushregs_
1db60     18 F0 07 F1 | 	add	ptra, #24
1db64     74 FA BE FD | 	call	#_pop
1db68     FD 26 02 F6 | 	mov	local01, result1
1db6c     FE 28 02 F6 | 	mov	local02, result2
1db70     FF 2A 02 F6 | 	mov	local03, result3
1db74     0C 4E 05 F1 | 	add	fp, #12
1db78     A7 26 62 FC | 	wrlong	local01, fp
1db7c     04 4E 05 F1 | 	add	fp, #4
1db80     A7 28 62 FC | 	wrlong	local02, fp
1db84     04 4E 05 F1 | 	add	fp, #4
1db88     A7 2A 62 FC | 	wrlong	local03, fp
1db8c     14 4E 85 F1 | 	sub	fp, #20
1db90     48 FA BE FD | 	call	#_pop
1db94     FF 2A 02 F6 | 	mov	local03, result3
1db98     A7 FA 61 FC | 	wrlong	result1, fp
1db9c     04 4E 05 F1 | 	add	fp, #4
1dba0     A7 FC 61 FC | 	wrlong	result2, fp
1dba4     04 4E 05 F1 | 	add	fp, #4
1dba8     A7 2A 62 FC | 	wrlong	local03, fp
1dbac                 | ' 
1dbac                 | ' t2=pop()
1dbac                 | ' t1=pop()
1dbac                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1dbac     08 4E 85 F1 | 	sub	fp, #8
1dbb0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1dbb4     14 4E 05 A1 |  if_e	add	fp, #20
1dbb8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dbbc     14 4E 85 A1 |  if_e	sub	fp, #20
1dbc0     16 2B 02 A6 |  if_e	mov	local03, local04
1dbc4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1dbc8     28 00 90 5D |  if_ne	jmp	#LR__2360
1dbcc     00 26 06 F6 | 	mov	local01, #0
1dbd0     A7 12 02 FB | 	rdlong	arg01, fp
1dbd4     0C 4E 05 F1 | 	add	fp, #12
1dbd8     A7 14 02 FB | 	rdlong	arg02, fp
1dbdc     0C 4E 85 F1 | 	sub	fp, #12
1dbe0     B0 8D B0 FD | 	call	#__system___string_cmp
1dbe4     00 FA 0D F2 | 	cmp	result1, #0 wz
1dbe8     00 26 26 A6 |  if_e	not	local01, #0
1dbec     A7 26 62 FC | 	wrlong	local01, fp
1dbf0     20 04 90 FD | 	jmp	#LR__2373
1dbf4                 | LR__2360
1dbf4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1dbf4     08 4E 05 F1 | 	add	fp, #8
1dbf8     A7 26 02 FB | 	rdlong	local01, fp
1dbfc     08 4E 85 F1 | 	sub	fp, #8
1dc00     1E 26 0E F2 | 	cmp	local01, #30 wz
1dc04     14 4E 05 A1 |  if_e	add	fp, #20
1dc08     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dc0c     14 4E 85 A1 |  if_e	sub	fp, #20
1dc10     16 2B 02 A6 |  if_e	mov	local03, local04
1dc14     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1dc18     2C 00 90 5D |  if_ne	jmp	#LR__2361
1dc1c     00 26 06 F6 | 	mov	local01, #0
1dc20     A7 12 02 FB | 	rdlong	arg01, fp
1dc24     0C 4E 05 F1 | 	add	fp, #12
1dc28     A7 14 02 FB | 	rdlong	arg02, fp
1dc2c     0C 4E 85 F1 | 	sub	fp, #12
1dc30     01 16 06 F6 | 	mov	arg03, #1
1dc34     E4 BF B0 FD | 	call	#__system___float_cmp
1dc38     00 FA 0D F2 | 	cmp	result1, #0 wz
1dc3c     00 26 26 A6 |  if_e	not	local01, #0
1dc40     A7 26 62 FC | 	wrlong	local01, fp
1dc44     CC 03 90 FD | 	jmp	#LR__2373
1dc48                 | LR__2361
1dc48                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1dc48     08 4E 05 F1 | 	add	fp, #8
1dc4c     A7 26 02 FB | 	rdlong	local01, fp
1dc50     08 4E 85 F1 | 	sub	fp, #8
1dc54     1E 26 0E F2 | 	cmp	local01, #30 wz
1dc58     14 4E 05 A1 |  if_e	add	fp, #20
1dc5c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dc60     14 4E 85 A1 |  if_e	sub	fp, #20
1dc64     16 2B 02 A6 |  if_e	mov	local03, local04
1dc68     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dc6c     48 00 90 5D |  if_ne	jmp	#LR__2362
1dc70     00 26 06 F6 | 	mov	local01, #0
1dc74     A7 28 02 FB | 	rdlong	local02, fp
1dc78     0C 4E 05 F1 | 	add	fp, #12
1dc7c     A7 12 02 FB | 	rdlong	arg01, fp
1dc80     0C 4E 85 F1 | 	sub	fp, #12
1dc84     09 13 52 F6 | 	abs	arg01, arg01 wc
1dc88     1F 2E C6 C9 |  if_b	decod	local05, #31
1dc8c     00 2E 06 36 |  if_ae	mov	local05, #0
1dc90     50 B7 B0 FD | 	call	#__system___float_fromuns
1dc94     17 FB 61 F5 | 	xor	result1, local05
1dc98     FD 14 02 F6 | 	mov	arg02, result1
1dc9c     14 13 02 F6 | 	mov	arg01, local02
1dca0     01 16 06 F6 | 	mov	arg03, #1
1dca4     74 BF B0 FD | 	call	#__system___float_cmp
1dca8     00 FA 0D F2 | 	cmp	result1, #0 wz
1dcac     00 26 26 A6 |  if_e	not	local01, #0
1dcb0     A7 26 62 FC | 	wrlong	local01, fp
1dcb4     5C 03 90 FD | 	jmp	#LR__2373
1dcb8                 | LR__2362
1dcb8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1dcb8     08 4E 05 F1 | 	add	fp, #8
1dcbc     A7 26 02 FB | 	rdlong	local01, fp
1dcc0     08 4E 85 F1 | 	sub	fp, #8
1dcc4     1E 26 0E F2 | 	cmp	local01, #30 wz
1dcc8     14 4E 05 A1 |  if_e	add	fp, #20
1dccc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dcd0     14 4E 85 A1 |  if_e	sub	fp, #20
1dcd4     16 2B 02 A6 |  if_e	mov	local03, local04
1dcd8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dcdc     38 00 90 5D |  if_ne	jmp	#LR__2363
1dce0     00 26 06 F6 | 	mov	local01, #0
1dce4     A7 28 02 FB | 	rdlong	local02, fp
1dce8     0C 4E 05 F1 | 	add	fp, #12
1dcec     A7 12 02 FB | 	rdlong	arg01, fp
1dcf0     0C 4E 85 F1 | 	sub	fp, #12
1dcf4     EC B6 B0 FD | 	call	#__system___float_fromuns
1dcf8     FD 14 02 F6 | 	mov	arg02, result1
1dcfc     14 13 02 F6 | 	mov	arg01, local02
1dd00     01 16 06 F6 | 	mov	arg03, #1
1dd04     14 BF B0 FD | 	call	#__system___float_cmp
1dd08     00 FA 0D F2 | 	cmp	result1, #0 wz
1dd0c     00 26 26 A6 |  if_e	not	local01, #0
1dd10     A7 26 62 FC | 	wrlong	local01, fp
1dd14     FC 02 90 FD | 	jmp	#LR__2373
1dd18                 | LR__2363
1dd18                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1dd18     08 4E 05 F1 | 	add	fp, #8
1dd1c     A7 26 02 FB | 	rdlong	local01, fp
1dd20     08 4E 85 F1 | 	sub	fp, #8
1dd24     1C 26 0E F2 | 	cmp	local01, #28 wz
1dd28     14 4E 05 A1 |  if_e	add	fp, #20
1dd2c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dd30     14 4E 85 A1 |  if_e	sub	fp, #20
1dd34     16 2B 02 A6 |  if_e	mov	local03, local04
1dd38     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1dd3c     44 00 90 5D |  if_ne	jmp	#LR__2364
1dd40     00 26 06 F6 | 	mov	local01, #0
1dd44     A7 12 02 FB | 	rdlong	arg01, fp
1dd48     09 13 52 F6 | 	abs	arg01, arg01 wc
1dd4c     1F 2E C6 C9 |  if_b	decod	local05, #31
1dd50     00 2E 06 36 |  if_ae	mov	local05, #0
1dd54     8C B6 B0 FD | 	call	#__system___float_fromuns
1dd58     17 FB 61 F5 | 	xor	result1, local05
1dd5c     FD 12 02 F6 | 	mov	arg01, result1
1dd60     0C 4E 05 F1 | 	add	fp, #12
1dd64     A7 14 02 FB | 	rdlong	arg02, fp
1dd68     0C 4E 85 F1 | 	sub	fp, #12
1dd6c     01 16 06 F6 | 	mov	arg03, #1
1dd70     A8 BE B0 FD | 	call	#__system___float_cmp
1dd74     00 FA 0D F2 | 	cmp	result1, #0 wz
1dd78     00 26 26 A6 |  if_e	not	local01, #0
1dd7c     A7 26 62 FC | 	wrlong	local01, fp
1dd80     90 02 90 FD | 	jmp	#LR__2373
1dd84                 | LR__2364
1dd84                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1dd84     08 4E 05 F1 | 	add	fp, #8
1dd88     A7 26 02 FB | 	rdlong	local01, fp
1dd8c     08 4E 85 F1 | 	sub	fp, #8
1dd90     1C 26 0E F2 | 	cmp	local01, #28 wz
1dd94     14 4E 05 A1 |  if_e	add	fp, #20
1dd98     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dd9c     14 4E 85 A1 |  if_e	sub	fp, #20
1dda0     16 2B 02 A6 |  if_e	mov	local03, local04
1dda4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dda8     24 00 90 5D |  if_ne	jmp	#LR__2365
1ddac     00 26 06 F6 | 	mov	local01, #0
1ddb0     A7 28 02 FB | 	rdlong	local02, fp
1ddb4     0C 4E 05 F1 | 	add	fp, #12
1ddb8     A7 2A 02 FB | 	rdlong	local03, fp
1ddbc     0C 4E 85 F1 | 	sub	fp, #12
1ddc0     15 29 0A F2 | 	cmp	local02, local03 wz
1ddc4     01 26 66 A6 |  if_e	neg	local01, #1
1ddc8     A7 26 62 FC | 	wrlong	local01, fp
1ddcc     44 02 90 FD | 	jmp	#LR__2373
1ddd0                 | LR__2365
1ddd0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1ddd0     08 4E 05 F1 | 	add	fp, #8
1ddd4     A7 26 02 FB | 	rdlong	local01, fp
1ddd8     08 4E 85 F1 | 	sub	fp, #8
1dddc     1C 26 0E F2 | 	cmp	local01, #28 wz
1dde0     14 4E 05 A1 |  if_e	add	fp, #20
1dde4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dde8     14 4E 85 A1 |  if_e	sub	fp, #20
1ddec     16 2B 02 A6 |  if_e	mov	local03, local04
1ddf0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ddf4     24 00 90 5D |  if_ne	jmp	#LR__2366
1ddf8     00 26 06 F6 | 	mov	local01, #0
1ddfc     A7 28 02 FB | 	rdlong	local02, fp
1de00     0C 4E 05 F1 | 	add	fp, #12
1de04     A7 2A 02 FB | 	rdlong	local03, fp
1de08     0C 4E 85 F1 | 	sub	fp, #12
1de0c     15 29 0A F2 | 	cmp	local02, local03 wz
1de10     01 26 66 A6 |  if_e	neg	local01, #1
1de14     A7 26 62 FC | 	wrlong	local01, fp
1de18     F8 01 90 FD | 	jmp	#LR__2373
1de1c                 | LR__2366
1de1c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1de1c     08 4E 05 F1 | 	add	fp, #8
1de20     A7 26 02 FB | 	rdlong	local01, fp
1de24     08 4E 85 F1 | 	sub	fp, #8
1de28     1D 26 0E F2 | 	cmp	local01, #29 wz
1de2c     14 4E 05 A1 |  if_e	add	fp, #20
1de30     A7 2C 02 AB |  if_e	rdlong	local04, fp
1de34     14 4E 85 A1 |  if_e	sub	fp, #20
1de38     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1de3c     34 00 90 5D |  if_ne	jmp	#LR__2367
1de40     00 26 06 F6 | 	mov	local01, #0
1de44     A7 12 02 FB | 	rdlong	arg01, fp
1de48     98 B5 B0 FD | 	call	#__system___float_fromuns
1de4c     FD 12 02 F6 | 	mov	arg01, result1
1de50     0C 4E 05 F1 | 	add	fp, #12
1de54     A7 14 02 FB | 	rdlong	arg02, fp
1de58     0C 4E 85 F1 | 	sub	fp, #12
1de5c     01 16 06 F6 | 	mov	arg03, #1
1de60     B8 BD B0 FD | 	call	#__system___float_cmp
1de64     00 FA 0D F2 | 	cmp	result1, #0 wz
1de68     00 26 26 A6 |  if_e	not	local01, #0
1de6c     A7 26 62 FC | 	wrlong	local01, fp
1de70     A0 01 90 FD | 	jmp	#LR__2373
1de74                 | LR__2367
1de74                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1de74     08 4E 05 F1 | 	add	fp, #8
1de78     A7 26 02 FB | 	rdlong	local01, fp
1de7c     08 4E 85 F1 | 	sub	fp, #8
1de80     1D 26 0E F2 | 	cmp	local01, #29 wz
1de84     14 4E 05 A1 |  if_e	add	fp, #20
1de88     A7 2A 02 AB |  if_e	rdlong	local03, fp
1de8c     14 4E 85 A1 |  if_e	sub	fp, #20
1de90     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1de94     24 00 90 5D |  if_ne	jmp	#LR__2368
1de98     00 26 06 F6 | 	mov	local01, #0
1de9c     A7 28 02 FB | 	rdlong	local02, fp
1dea0     0C 4E 05 F1 | 	add	fp, #12
1dea4     A7 2A 02 FB | 	rdlong	local03, fp
1dea8     0C 4E 85 F1 | 	sub	fp, #12
1deac     15 29 0A F2 | 	cmp	local02, local03 wz
1deb0     01 26 66 A6 |  if_e	neg	local01, #1
1deb4     A7 26 62 FC | 	wrlong	local01, fp
1deb8     58 01 90 FD | 	jmp	#LR__2373
1debc                 | LR__2368
1debc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1debc     08 4E 05 F1 | 	add	fp, #8
1dec0     A7 26 02 FB | 	rdlong	local01, fp
1dec4     08 4E 85 F1 | 	sub	fp, #8
1dec8     1D 26 0E F2 | 	cmp	local01, #29 wz
1decc     14 4E 05 A1 |  if_e	add	fp, #20
1ded0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ded4     14 4E 85 A1 |  if_e	sub	fp, #20
1ded8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dedc     24 00 90 5D |  if_ne	jmp	#LR__2369
1dee0     00 26 06 F6 | 	mov	local01, #0
1dee4     A7 28 02 FB | 	rdlong	local02, fp
1dee8     0C 4E 05 F1 | 	add	fp, #12
1deec     A7 2A 02 FB | 	rdlong	local03, fp
1def0     0C 4E 85 F1 | 	sub	fp, #12
1def4     15 29 0A F2 | 	cmp	local02, local03 wz
1def8     01 26 66 A6 |  if_e	neg	local01, #1
1defc     A7 26 62 FC | 	wrlong	local01, fp
1df00     10 01 90 FD | 	jmp	#LR__2373
1df04                 | LR__2369
1df04                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1df04     08 4E 05 F1 | 	add	fp, #8
1df08     A7 26 02 FB | 	rdlong	local01, fp
1df0c     08 4E 85 F1 | 	sub	fp, #8
1df10     2B 26 0E F2 | 	cmp	local01, #43 wz
1df14     14 4E 05 A1 |  if_e	add	fp, #20
1df18     A7 2A 02 AB |  if_e	rdlong	local03, fp
1df1c     14 4E 85 A1 |  if_e	sub	fp, #20
1df20     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1df24     30 00 90 5D |  if_ne	jmp	#LR__2370
1df28     00 26 06 F6 | 	mov	local01, #0
1df2c     A7 12 02 FB | 	rdlong	arg01, fp
1df30     20 F8 BE FD | 	call	#_convertstring
1df34     FD 12 02 F6 | 	mov	arg01, result1
1df38     0C 4E 05 F1 | 	add	fp, #12
1df3c     A7 14 02 FB | 	rdlong	arg02, fp
1df40     0C 4E 85 F1 | 	sub	fp, #12
1df44     4C 8A B0 FD | 	call	#__system___string_cmp
1df48     00 FA 0D F2 | 	cmp	result1, #0 wz
1df4c     00 26 26 A6 |  if_e	not	local01, #0
1df50     A7 26 62 FC | 	wrlong	local01, fp
1df54     BC 00 90 FD | 	jmp	#LR__2373
1df58                 | LR__2370
1df58                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1df58     08 4E 05 F1 | 	add	fp, #8
1df5c     A7 26 02 FB | 	rdlong	local01, fp
1df60     08 4E 85 F1 | 	sub	fp, #8
1df64     1F 26 0E F2 | 	cmp	local01, #31 wz
1df68     14 4E 05 A1 |  if_e	add	fp, #20
1df6c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1df70     14 4E 85 A1 |  if_e	sub	fp, #20
1df74     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1df78     34 00 90 5D |  if_ne	jmp	#LR__2371
1df7c     00 26 06 F6 | 	mov	local01, #0
1df80     A7 28 02 FB | 	rdlong	local02, fp
1df84     0C 4E 05 F1 | 	add	fp, #12
1df88     A7 12 02 FB | 	rdlong	arg01, fp
1df8c     0C 4E 85 F1 | 	sub	fp, #12
1df90     C0 F7 BE FD | 	call	#_convertstring
1df94     FD 14 02 F6 | 	mov	arg02, result1
1df98     14 13 02 F6 | 	mov	arg01, local02
1df9c     F4 89 B0 FD | 	call	#__system___string_cmp
1dfa0     00 FA 0D F2 | 	cmp	result1, #0 wz
1dfa4     00 26 26 A6 |  if_e	not	local01, #0
1dfa8     A7 26 62 FC | 	wrlong	local01, fp
1dfac     64 00 90 FD | 	jmp	#LR__2373
1dfb0                 | LR__2371
1dfb0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1dfb0     08 4E 05 F1 | 	add	fp, #8
1dfb4     A7 26 02 FB | 	rdlong	local01, fp
1dfb8     08 4E 85 F1 | 	sub	fp, #8
1dfbc     2B 26 0E F2 | 	cmp	local01, #43 wz
1dfc0     14 4E 05 A1 |  if_e	add	fp, #20
1dfc4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dfc8     14 4E 85 A1 |  if_e	sub	fp, #20
1dfcc     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1dfd0     3C 00 90 5D |  if_ne	jmp	#LR__2372
1dfd4     00 26 06 F6 | 	mov	local01, #0
1dfd8     A7 12 02 FB | 	rdlong	arg01, fp
1dfdc     74 F7 BE FD | 	call	#_convertstring
1dfe0     FD 28 02 F6 | 	mov	local02, result1
1dfe4     0C 4E 05 F1 | 	add	fp, #12
1dfe8     A7 12 02 FB | 	rdlong	arg01, fp
1dfec     0C 4E 85 F1 | 	sub	fp, #12
1dff0     60 F7 BE FD | 	call	#_convertstring
1dff4     FD 14 02 F6 | 	mov	arg02, result1
1dff8     14 13 02 F6 | 	mov	arg01, local02
1dffc     94 89 B0 FD | 	call	#__system___string_cmp
1e000     00 FA 0D F2 | 	cmp	result1, #0 wz
1e004     00 26 26 A6 |  if_e	not	local01, #0
1e008     A7 26 62 FC | 	wrlong	local01, fp
1e00c     04 00 90 FD | 	jmp	#LR__2373
1e010                 | LR__2372
1e010     A7 00 68 FC | 	wrlong	#0, fp
1e014                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e014                 | LR__2373
1e014     08 4E 05 F1 | 	add	fp, #8
1e018     A7 38 68 FC | 	wrlong	#28, fp
1e01c     08 4E 85 F1 | 	sub	fp, #8
1e020     A7 12 02 F6 | 	mov	arg01, fp
1e024     4C F6 BE FD | 	call	#_push
1e028     A7 F0 03 F6 | 	mov	ptra, fp
1e02c     B2 00 A0 FD | 	call	#popregs_
1e030                 | _do_eq_ret
1e030     2D 00 64 FD | 	ret
1e034                 | 
1e034                 | ' 
1e034                 | ' '--------------------------------- fdiv (/) - float divide
1e034                 | ' 
1e034                 | ' sub do_fdiv 
1e034                 | _do_fdiv
1e034     02 4A 05 F6 | 	mov	COUNT_, #2
1e038     A8 00 A0 FD | 	call	#pushregs_
1e03c     18 F0 07 F1 | 	add	ptra, #24
1e040     98 F5 BE FD | 	call	#_pop
1e044     FD 14 02 F6 | 	mov	arg02, result1
1e048     FE 12 02 F6 | 	mov	arg01, result2
1e04c     FF 26 02 F6 | 	mov	local01, result3
1e050     0C 4E 05 F1 | 	add	fp, #12
1e054     A7 14 62 FC | 	wrlong	arg02, fp
1e058     04 4E 05 F1 | 	add	fp, #4
1e05c     A7 12 62 FC | 	wrlong	arg01, fp
1e060     04 4E 05 F1 | 	add	fp, #4
1e064     A7 26 62 FC | 	wrlong	local01, fp
1e068     14 4E 85 F1 | 	sub	fp, #20
1e06c     6C F5 BE FD | 	call	#_pop
1e070     A7 FA 61 FC | 	wrlong	result1, fp
1e074     04 4E 05 F1 | 	add	fp, #4
1e078     A7 FC 61 FC | 	wrlong	result2, fp
1e07c     04 4E 05 F1 | 	add	fp, #4
1e080     A7 FE 61 FC | 	wrlong	result3, fp
1e084                 | ' 
1e084                 | ' t2=pop()
1e084                 | ' t1=pop()
1e084                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1e084     08 4E 85 F1 | 	sub	fp, #8
1e088     1F FE 0D F2 | 	cmp	result3, #31 wz
1e08c     14 4E 05 51 |  if_ne	add	fp, #20
1e090     A7 26 02 5B |  if_ne	rdlong	local01, fp
1e094     14 4E 85 51 |  if_ne	sub	fp, #20
1e098     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1e09c     A7 14 68 AC |  if_e	wrlong	#10, fp
1e0a0     08 4E 05 A1 |  if_e	add	fp, #8
1e0a4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e0a8     08 4E 85 A1 |  if_e	sub	fp, #8
1e0ac     38 01 90 AD |  if_e	jmp	#LR__2385
1e0b0                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1e0b0     08 4E 05 F1 | 	add	fp, #8
1e0b4     A7 14 02 FB | 	rdlong	arg02, fp
1e0b8     08 4E 85 F1 | 	sub	fp, #8
1e0bc     1C 14 0E F2 | 	cmp	arg02, #28 wz
1e0c0     28 00 90 5D |  if_ne	jmp	#LR__2380
1e0c4     08 4E 05 F1 | 	add	fp, #8
1e0c8     A7 3C 68 FC | 	wrlong	#30, fp
1e0cc     08 4E 85 F1 | 	sub	fp, #8
1e0d0     A7 12 02 FB | 	rdlong	arg01, fp
1e0d4     09 13 52 F6 | 	abs	arg01, arg01 wc
1e0d8     1F 28 C6 C9 |  if_b	decod	local02, #31
1e0dc     00 28 06 36 |  if_ae	mov	local02, #0
1e0e0     00 B3 B0 FD | 	call	#__system___float_fromuns
1e0e4     14 FB 61 F5 | 	xor	result1, local02
1e0e8     A7 FA 61 FC | 	wrlong	result1, fp
1e0ec                 | LR__2380
1e0ec                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1e0ec     08 4E 05 F1 | 	add	fp, #8
1e0f0     A7 14 02 FB | 	rdlong	arg02, fp
1e0f4     08 4E 85 F1 | 	sub	fp, #8
1e0f8     1D 14 0E F2 | 	cmp	arg02, #29 wz
1e0fc     18 00 90 5D |  if_ne	jmp	#LR__2381
1e100     08 4E 05 F1 | 	add	fp, #8
1e104     A7 3C 68 FC | 	wrlong	#30, fp
1e108     08 4E 85 F1 | 	sub	fp, #8
1e10c     A7 12 02 FB | 	rdlong	arg01, fp
1e110     D0 B2 B0 FD | 	call	#__system___float_fromuns
1e114     A7 FA 61 FC | 	wrlong	result1, fp
1e118                 | LR__2381
1e118                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1e118     14 4E 05 F1 | 	add	fp, #20
1e11c     A7 14 02 FB | 	rdlong	arg02, fp
1e120     14 4E 85 F1 | 	sub	fp, #20
1e124     1C 14 0E F2 | 	cmp	arg02, #28 wz
1e128     34 00 90 5D |  if_ne	jmp	#LR__2382
1e12c     14 4E 05 F1 | 	add	fp, #20
1e130     A7 3C 68 FC | 	wrlong	#30, fp
1e134     08 4E 85 F1 | 	sub	fp, #8
1e138     A7 12 02 FB | 	rdlong	arg01, fp
1e13c     0C 4E 85 F1 | 	sub	fp, #12
1e140     09 13 52 F6 | 	abs	arg01, arg01 wc
1e144     1F 28 C6 C9 |  if_b	decod	local02, #31
1e148     00 28 06 36 |  if_ae	mov	local02, #0
1e14c     94 B2 B0 FD | 	call	#__system___float_fromuns
1e150     14 FB 61 F5 | 	xor	result1, local02
1e154     0C 4E 05 F1 | 	add	fp, #12
1e158     A7 FA 61 FC | 	wrlong	result1, fp
1e15c     0C 4E 85 F1 | 	sub	fp, #12
1e160                 | LR__2382
1e160                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1e160     14 4E 05 F1 | 	add	fp, #20
1e164     A7 14 02 FB | 	rdlong	arg02, fp
1e168     14 4E 85 F1 | 	sub	fp, #20
1e16c     1D 14 0E F2 | 	cmp	arg02, #29 wz
1e170     24 00 90 5D |  if_ne	jmp	#LR__2383
1e174     14 4E 05 F1 | 	add	fp, #20
1e178     A7 3C 68 FC | 	wrlong	#30, fp
1e17c     08 4E 85 F1 | 	sub	fp, #8
1e180     A7 12 02 FB | 	rdlong	arg01, fp
1e184     0C 4E 85 F1 | 	sub	fp, #12
1e188     58 B2 B0 FD | 	call	#__system___float_fromuns
1e18c     0C 4E 05 F1 | 	add	fp, #12
1e190     A7 FA 61 FC | 	wrlong	result1, fp
1e194     0C 4E 85 F1 | 	sub	fp, #12
1e198                 | LR__2383
1e198                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1e198     08 4E 05 F1 | 	add	fp, #8
1e19c     A7 14 02 FB | 	rdlong	arg02, fp
1e1a0     08 4E 85 F1 | 	sub	fp, #8
1e1a4     1E 14 0E F2 | 	cmp	arg02, #30 wz
1e1a8     14 4E 05 A1 |  if_e	add	fp, #20
1e1ac     A7 26 02 AB |  if_e	rdlong	local01, fp
1e1b0     14 4E 85 A1 |  if_e	sub	fp, #20
1e1b4     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1e1b8     1C 00 90 5D |  if_ne	jmp	#LR__2384
1e1bc     A7 12 02 FB | 	rdlong	arg01, fp
1e1c0     0C 4E 05 F1 | 	add	fp, #12
1e1c4     A7 14 02 FB | 	rdlong	arg02, fp
1e1c8     0C 4E 85 F1 | 	sub	fp, #12
1e1cc     1C B8 B0 FD | 	call	#__system___float_div
1e1d0     A7 FA 61 FC | 	wrlong	result1, fp
1e1d4     10 00 90 FD | 	jmp	#LR__2385
1e1d8                 | LR__2384
1e1d8     A7 16 68 FC | 	wrlong	#11, fp
1e1dc     08 4E 05 F1 | 	add	fp, #8
1e1e0     A7 FE 69 FC | 	wrlong	#255, fp
1e1e4     08 4E 85 F1 | 	sub	fp, #8
1e1e8                 | LR__2385
1e1e8     A7 12 02 F6 | 	mov	arg01, fp
1e1ec     84 F4 BE FD | 	call	#_push
1e1f0     A7 F0 03 F6 | 	mov	ptra, fp
1e1f4     B2 00 A0 FD | 	call	#popregs_
1e1f8                 | _do_fdiv_ret
1e1f8     2D 00 64 FD | 	ret
1e1fc                 | 
1e1fc                 | ' 
1e1fc                 | ' '--------------------------------- greater or equal (>=)
1e1fc                 | ' 
1e1fc                 | ' sub do_ge
1e1fc                 | _do_ge
1e1fc     05 4A 05 F6 | 	mov	COUNT_, #5
1e200     A8 00 A0 FD | 	call	#pushregs_
1e204     18 F0 07 F1 | 	add	ptra, #24
1e208     D0 F3 BE FD | 	call	#_pop
1e20c     FD 26 02 F6 | 	mov	local01, result1
1e210     FE 28 02 F6 | 	mov	local02, result2
1e214     FF 2A 02 F6 | 	mov	local03, result3
1e218     0C 4E 05 F1 | 	add	fp, #12
1e21c     A7 26 62 FC | 	wrlong	local01, fp
1e220     04 4E 05 F1 | 	add	fp, #4
1e224     A7 28 62 FC | 	wrlong	local02, fp
1e228     04 4E 05 F1 | 	add	fp, #4
1e22c     A7 2A 62 FC | 	wrlong	local03, fp
1e230     14 4E 85 F1 | 	sub	fp, #20
1e234     A4 F3 BE FD | 	call	#_pop
1e238     FF 2A 02 F6 | 	mov	local03, result3
1e23c     A7 FA 61 FC | 	wrlong	result1, fp
1e240     04 4E 05 F1 | 	add	fp, #4
1e244     A7 FC 61 FC | 	wrlong	result2, fp
1e248     04 4E 05 F1 | 	add	fp, #4
1e24c     A7 2A 62 FC | 	wrlong	local03, fp
1e250                 | ' 
1e250                 | ' t2=pop()
1e250                 | ' t1=pop()
1e250                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1e250     08 4E 85 F1 | 	sub	fp, #8
1e254     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e258     14 4E 05 A1 |  if_e	add	fp, #20
1e25c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e260     14 4E 85 A1 |  if_e	sub	fp, #20
1e264     16 2B 02 A6 |  if_e	mov	local03, local04
1e268     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e26c     28 00 90 5D |  if_ne	jmp	#LR__2390
1e270     00 26 06 F6 | 	mov	local01, #0
1e274     A7 12 02 FB | 	rdlong	arg01, fp
1e278     0C 4E 05 F1 | 	add	fp, #12
1e27c     A7 14 02 FB | 	rdlong	arg02, fp
1e280     0C 4E 85 F1 | 	sub	fp, #12
1e284     0C 87 B0 FD | 	call	#__system___string_cmp
1e288     00 FA 55 F2 | 	cmps	result1, #0 wc
1e28c     00 26 26 36 |  if_ae	not	local01, #0
1e290     A7 26 62 FC | 	wrlong	local01, fp
1e294     24 04 90 FD | 	jmp	#LR__2403
1e298                 | LR__2390
1e298                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1e298     08 4E 05 F1 | 	add	fp, #8
1e29c     A7 26 02 FB | 	rdlong	local01, fp
1e2a0     08 4E 85 F1 | 	sub	fp, #8
1e2a4     1E 26 0E F2 | 	cmp	local01, #30 wz
1e2a8     14 4E 05 A1 |  if_e	add	fp, #20
1e2ac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e2b0     14 4E 85 A1 |  if_e	sub	fp, #20
1e2b4     16 2B 02 A6 |  if_e	mov	local03, local04
1e2b8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e2bc     2C 00 90 5D |  if_ne	jmp	#LR__2391
1e2c0     00 26 06 F6 | 	mov	local01, #0
1e2c4     A7 12 02 FB | 	rdlong	arg01, fp
1e2c8     0C 4E 05 F1 | 	add	fp, #12
1e2cc     A7 14 02 FB | 	rdlong	arg02, fp
1e2d0     0C 4E 85 F1 | 	sub	fp, #12
1e2d4     01 16 66 F6 | 	neg	arg03, #1
1e2d8     40 B9 B0 FD | 	call	#__system___float_cmp
1e2dc     00 FA 55 F2 | 	cmps	result1, #0 wc
1e2e0     00 26 26 36 |  if_ae	not	local01, #0
1e2e4     A7 26 62 FC | 	wrlong	local01, fp
1e2e8     D0 03 90 FD | 	jmp	#LR__2403
1e2ec                 | LR__2391
1e2ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1e2ec     08 4E 05 F1 | 	add	fp, #8
1e2f0     A7 26 02 FB | 	rdlong	local01, fp
1e2f4     08 4E 85 F1 | 	sub	fp, #8
1e2f8     1E 26 0E F2 | 	cmp	local01, #30 wz
1e2fc     14 4E 05 A1 |  if_e	add	fp, #20
1e300     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e304     14 4E 85 A1 |  if_e	sub	fp, #20
1e308     16 2B 02 A6 |  if_e	mov	local03, local04
1e30c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e310     48 00 90 5D |  if_ne	jmp	#LR__2392
1e314     00 26 06 F6 | 	mov	local01, #0
1e318     A7 28 02 FB | 	rdlong	local02, fp
1e31c     0C 4E 05 F1 | 	add	fp, #12
1e320     A7 12 02 FB | 	rdlong	arg01, fp
1e324     0C 4E 85 F1 | 	sub	fp, #12
1e328     09 13 52 F6 | 	abs	arg01, arg01 wc
1e32c     1F 2E C6 C9 |  if_b	decod	local05, #31
1e330     00 2E 06 36 |  if_ae	mov	local05, #0
1e334     AC B0 B0 FD | 	call	#__system___float_fromuns
1e338     17 FB 61 F5 | 	xor	result1, local05
1e33c     FD 14 02 F6 | 	mov	arg02, result1
1e340     14 13 02 F6 | 	mov	arg01, local02
1e344     01 16 66 F6 | 	neg	arg03, #1
1e348     D0 B8 B0 FD | 	call	#__system___float_cmp
1e34c     00 FA 55 F2 | 	cmps	result1, #0 wc
1e350     00 26 26 36 |  if_ae	not	local01, #0
1e354     A7 26 62 FC | 	wrlong	local01, fp
1e358     60 03 90 FD | 	jmp	#LR__2403
1e35c                 | LR__2392
1e35c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1e35c     08 4E 05 F1 | 	add	fp, #8
1e360     A7 26 02 FB | 	rdlong	local01, fp
1e364     08 4E 85 F1 | 	sub	fp, #8
1e368     1E 26 0E F2 | 	cmp	local01, #30 wz
1e36c     14 4E 05 A1 |  if_e	add	fp, #20
1e370     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e374     14 4E 85 A1 |  if_e	sub	fp, #20
1e378     16 2B 02 A6 |  if_e	mov	local03, local04
1e37c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e380     38 00 90 5D |  if_ne	jmp	#LR__2393
1e384     00 26 06 F6 | 	mov	local01, #0
1e388     A7 28 02 FB | 	rdlong	local02, fp
1e38c     0C 4E 05 F1 | 	add	fp, #12
1e390     A7 12 02 FB | 	rdlong	arg01, fp
1e394     0C 4E 85 F1 | 	sub	fp, #12
1e398     48 B0 B0 FD | 	call	#__system___float_fromuns
1e39c     FD 14 02 F6 | 	mov	arg02, result1
1e3a0     14 13 02 F6 | 	mov	arg01, local02
1e3a4     01 16 66 F6 | 	neg	arg03, #1
1e3a8     70 B8 B0 FD | 	call	#__system___float_cmp
1e3ac     00 FA 55 F2 | 	cmps	result1, #0 wc
1e3b0     00 26 26 36 |  if_ae	not	local01, #0
1e3b4     A7 26 62 FC | 	wrlong	local01, fp
1e3b8     00 03 90 FD | 	jmp	#LR__2403
1e3bc                 | LR__2393
1e3bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1e3bc     08 4E 05 F1 | 	add	fp, #8
1e3c0     A7 26 02 FB | 	rdlong	local01, fp
1e3c4     08 4E 85 F1 | 	sub	fp, #8
1e3c8     1C 26 0E F2 | 	cmp	local01, #28 wz
1e3cc     14 4E 05 A1 |  if_e	add	fp, #20
1e3d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e3d4     14 4E 85 A1 |  if_e	sub	fp, #20
1e3d8     16 2B 02 A6 |  if_e	mov	local03, local04
1e3dc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e3e0     44 00 90 5D |  if_ne	jmp	#LR__2394
1e3e4     00 26 06 F6 | 	mov	local01, #0
1e3e8     A7 12 02 FB | 	rdlong	arg01, fp
1e3ec     09 13 52 F6 | 	abs	arg01, arg01 wc
1e3f0     1F 2E C6 C9 |  if_b	decod	local05, #31
1e3f4     00 2E 06 36 |  if_ae	mov	local05, #0
1e3f8     E8 AF B0 FD | 	call	#__system___float_fromuns
1e3fc     17 FB 61 F5 | 	xor	result1, local05
1e400     FD 12 02 F6 | 	mov	arg01, result1
1e404     0C 4E 05 F1 | 	add	fp, #12
1e408     A7 14 02 FB | 	rdlong	arg02, fp
1e40c     0C 4E 85 F1 | 	sub	fp, #12
1e410     01 16 66 F6 | 	neg	arg03, #1
1e414     04 B8 B0 FD | 	call	#__system___float_cmp
1e418     00 FA 55 F2 | 	cmps	result1, #0 wc
1e41c     00 26 26 36 |  if_ae	not	local01, #0
1e420     A7 26 62 FC | 	wrlong	local01, fp
1e424     94 02 90 FD | 	jmp	#LR__2403
1e428                 | LR__2394
1e428                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1e428     08 4E 05 F1 | 	add	fp, #8
1e42c     A7 26 02 FB | 	rdlong	local01, fp
1e430     08 4E 85 F1 | 	sub	fp, #8
1e434     1C 26 0E F2 | 	cmp	local01, #28 wz
1e438     14 4E 05 A1 |  if_e	add	fp, #20
1e43c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e440     14 4E 85 A1 |  if_e	sub	fp, #20
1e444     16 2B 02 A6 |  if_e	mov	local03, local04
1e448     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e44c     24 00 90 5D |  if_ne	jmp	#LR__2395
1e450     00 26 06 F6 | 	mov	local01, #0
1e454     A7 28 02 FB | 	rdlong	local02, fp
1e458     0C 4E 05 F1 | 	add	fp, #12
1e45c     A7 2A 02 FB | 	rdlong	local03, fp
1e460     0C 4E 85 F1 | 	sub	fp, #12
1e464     15 29 52 F2 | 	cmps	local02, local03 wc
1e468     01 26 66 36 |  if_ae	neg	local01, #1
1e46c     A7 26 62 FC | 	wrlong	local01, fp
1e470     48 02 90 FD | 	jmp	#LR__2403
1e474                 | LR__2395
1e474                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1e474     08 4E 05 F1 | 	add	fp, #8
1e478     A7 26 02 FB | 	rdlong	local01, fp
1e47c     08 4E 85 F1 | 	sub	fp, #8
1e480     1C 26 0E F2 | 	cmp	local01, #28 wz
1e484     14 4E 05 A1 |  if_e	add	fp, #20
1e488     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e48c     14 4E 85 A1 |  if_e	sub	fp, #20
1e490     16 2B 02 A6 |  if_e	mov	local03, local04
1e494     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e498     24 00 90 5D |  if_ne	jmp	#LR__2396
1e49c     00 26 06 F6 | 	mov	local01, #0
1e4a0     A7 28 02 FB | 	rdlong	local02, fp
1e4a4     0C 4E 05 F1 | 	add	fp, #12
1e4a8     A7 2A 02 FB | 	rdlong	local03, fp
1e4ac     0C 4E 85 F1 | 	sub	fp, #12
1e4b0     15 29 52 F2 | 	cmps	local02, local03 wc
1e4b4     01 26 66 36 |  if_ae	neg	local01, #1
1e4b8     A7 26 62 FC | 	wrlong	local01, fp
1e4bc     FC 01 90 FD | 	jmp	#LR__2403
1e4c0                 | LR__2396
1e4c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1e4c0     08 4E 05 F1 | 	add	fp, #8
1e4c4     A7 26 02 FB | 	rdlong	local01, fp
1e4c8     08 4E 85 F1 | 	sub	fp, #8
1e4cc     1D 26 0E F2 | 	cmp	local01, #29 wz
1e4d0     14 4E 05 A1 |  if_e	add	fp, #20
1e4d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e4d8     14 4E 85 A1 |  if_e	sub	fp, #20
1e4dc     16 2B 02 A6 |  if_e	mov	local03, local04
1e4e0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e4e4     34 00 90 5D |  if_ne	jmp	#LR__2397
1e4e8     00 26 06 F6 | 	mov	local01, #0
1e4ec     A7 12 02 FB | 	rdlong	arg01, fp
1e4f0     F0 AE B0 FD | 	call	#__system___float_fromuns
1e4f4     FD 12 02 F6 | 	mov	arg01, result1
1e4f8     0C 4E 05 F1 | 	add	fp, #12
1e4fc     A7 14 02 FB | 	rdlong	arg02, fp
1e500     0C 4E 85 F1 | 	sub	fp, #12
1e504     01 16 66 F6 | 	neg	arg03, #1
1e508     10 B7 B0 FD | 	call	#__system___float_cmp
1e50c     00 FA 55 F2 | 	cmps	result1, #0 wc
1e510     00 26 26 36 |  if_ae	not	local01, #0
1e514     A7 26 62 FC | 	wrlong	local01, fp
1e518     A0 01 90 FD | 	jmp	#LR__2403
1e51c                 | LR__2397
1e51c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1e51c     08 4E 05 F1 | 	add	fp, #8
1e520     A7 26 02 FB | 	rdlong	local01, fp
1e524     08 4E 85 F1 | 	sub	fp, #8
1e528     1D 26 0E F2 | 	cmp	local01, #29 wz
1e52c     14 4E 05 A1 |  if_e	add	fp, #20
1e530     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e534     14 4E 85 A1 |  if_e	sub	fp, #20
1e538     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1e53c     24 00 90 5D |  if_ne	jmp	#LR__2398
1e540     00 26 06 F6 | 	mov	local01, #0
1e544     A7 28 02 FB | 	rdlong	local02, fp
1e548     0C 4E 05 F1 | 	add	fp, #12
1e54c     A7 2A 02 FB | 	rdlong	local03, fp
1e550     0C 4E 85 F1 | 	sub	fp, #12
1e554     15 29 52 F2 | 	cmps	local02, local03 wc
1e558     01 26 66 36 |  if_ae	neg	local01, #1
1e55c     A7 26 62 FC | 	wrlong	local01, fp
1e560     58 01 90 FD | 	jmp	#LR__2403
1e564                 | LR__2398
1e564                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1e564     08 4E 05 F1 | 	add	fp, #8
1e568     A7 26 02 FB | 	rdlong	local01, fp
1e56c     08 4E 85 F1 | 	sub	fp, #8
1e570     1D 26 0E F2 | 	cmp	local01, #29 wz
1e574     14 4E 05 A1 |  if_e	add	fp, #20
1e578     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e57c     14 4E 85 A1 |  if_e	sub	fp, #20
1e580     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e584     24 00 90 5D |  if_ne	jmp	#LR__2399
1e588     00 26 06 F6 | 	mov	local01, #0
1e58c     A7 28 02 FB | 	rdlong	local02, fp
1e590     0C 4E 05 F1 | 	add	fp, #12
1e594     A7 2A 02 FB | 	rdlong	local03, fp
1e598     0C 4E 85 F1 | 	sub	fp, #12
1e59c     15 29 12 F2 | 	cmp	local02, local03 wc
1e5a0     01 26 66 36 |  if_ae	neg	local01, #1
1e5a4     A7 26 62 FC | 	wrlong	local01, fp
1e5a8     10 01 90 FD | 	jmp	#LR__2403
1e5ac                 | LR__2399
1e5ac                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1e5ac     08 4E 05 F1 | 	add	fp, #8
1e5b0     A7 26 02 FB | 	rdlong	local01, fp
1e5b4     08 4E 85 F1 | 	sub	fp, #8
1e5b8     2B 26 0E F2 | 	cmp	local01, #43 wz
1e5bc     14 4E 05 A1 |  if_e	add	fp, #20
1e5c0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e5c4     14 4E 85 A1 |  if_e	sub	fp, #20
1e5c8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e5cc     30 00 90 5D |  if_ne	jmp	#LR__2400
1e5d0     00 26 06 F6 | 	mov	local01, #0
1e5d4     A7 12 02 FB | 	rdlong	arg01, fp
1e5d8     78 F1 BE FD | 	call	#_convertstring
1e5dc     FD 12 02 F6 | 	mov	arg01, result1
1e5e0     0C 4E 05 F1 | 	add	fp, #12
1e5e4     A7 14 02 FB | 	rdlong	arg02, fp
1e5e8     0C 4E 85 F1 | 	sub	fp, #12
1e5ec     A4 83 B0 FD | 	call	#__system___string_cmp
1e5f0     00 FA 55 F2 | 	cmps	result1, #0 wc
1e5f4     00 26 26 36 |  if_ae	not	local01, #0
1e5f8     A7 26 62 FC | 	wrlong	local01, fp
1e5fc     BC 00 90 FD | 	jmp	#LR__2403
1e600                 | LR__2400
1e600                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1e600     08 4E 05 F1 | 	add	fp, #8
1e604     A7 26 02 FB | 	rdlong	local01, fp
1e608     08 4E 85 F1 | 	sub	fp, #8
1e60c     1F 26 0E F2 | 	cmp	local01, #31 wz
1e610     14 4E 05 A1 |  if_e	add	fp, #20
1e614     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e618     14 4E 85 A1 |  if_e	sub	fp, #20
1e61c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e620     34 00 90 5D |  if_ne	jmp	#LR__2401
1e624     00 26 06 F6 | 	mov	local01, #0
1e628     A7 28 02 FB | 	rdlong	local02, fp
1e62c     0C 4E 05 F1 | 	add	fp, #12
1e630     A7 12 02 FB | 	rdlong	arg01, fp
1e634     0C 4E 85 F1 | 	sub	fp, #12
1e638     18 F1 BE FD | 	call	#_convertstring
1e63c     FD 14 02 F6 | 	mov	arg02, result1
1e640     14 13 02 F6 | 	mov	arg01, local02
1e644     4C 83 B0 FD | 	call	#__system___string_cmp
1e648     00 FA 55 F2 | 	cmps	result1, #0 wc
1e64c     00 26 26 36 |  if_ae	not	local01, #0
1e650     A7 26 62 FC | 	wrlong	local01, fp
1e654     64 00 90 FD | 	jmp	#LR__2403
1e658                 | LR__2401
1e658                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1e658     08 4E 05 F1 | 	add	fp, #8
1e65c     A7 26 02 FB | 	rdlong	local01, fp
1e660     08 4E 85 F1 | 	sub	fp, #8
1e664     2B 26 0E F2 | 	cmp	local01, #43 wz
1e668     14 4E 05 A1 |  if_e	add	fp, #20
1e66c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e670     14 4E 85 A1 |  if_e	sub	fp, #20
1e674     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e678     3C 00 90 5D |  if_ne	jmp	#LR__2402
1e67c     00 26 06 F6 | 	mov	local01, #0
1e680     A7 12 02 FB | 	rdlong	arg01, fp
1e684     CC F0 BE FD | 	call	#_convertstring
1e688     FD 28 02 F6 | 	mov	local02, result1
1e68c     0C 4E 05 F1 | 	add	fp, #12
1e690     A7 12 02 FB | 	rdlong	arg01, fp
1e694     0C 4E 85 F1 | 	sub	fp, #12
1e698     B8 F0 BE FD | 	call	#_convertstring
1e69c     FD 14 02 F6 | 	mov	arg02, result1
1e6a0     14 13 02 F6 | 	mov	arg01, local02
1e6a4     EC 82 B0 FD | 	call	#__system___string_cmp
1e6a8     00 FA 55 F2 | 	cmps	result1, #0 wc
1e6ac     00 26 26 36 |  if_ae	not	local01, #0
1e6b0     A7 26 62 FC | 	wrlong	local01, fp
1e6b4     04 00 90 FD | 	jmp	#LR__2403
1e6b8                 | LR__2402
1e6b8     A7 00 68 FC | 	wrlong	#0, fp
1e6bc                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e6bc                 | LR__2403
1e6bc     08 4E 05 F1 | 	add	fp, #8
1e6c0     A7 38 68 FC | 	wrlong	#28, fp
1e6c4     08 4E 85 F1 | 	sub	fp, #8
1e6c8                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e6c8     A7 26 0A FB | 	rdlong	local01, fp wz
1e6cc     A7 02 68 5C |  if_ne	wrlong	#1, fp
1e6d0     A7 12 02 F6 | 	mov	arg01, fp
1e6d4     9C EF BE FD | 	call	#_push
1e6d8     A7 F0 03 F6 | 	mov	ptra, fp
1e6dc     B2 00 A0 FD | 	call	#popregs_
1e6e0                 | _do_ge_ret
1e6e0     2D 00 64 FD | 	ret
1e6e4                 | 
1e6e4                 | ' 
1e6e4                 | ' '--------------------------------- greater than (>)
1e6e4                 | ' 
1e6e4                 | ' sub do_gt
1e6e4                 | _do_gt
1e6e4     05 4A 05 F6 | 	mov	COUNT_, #5
1e6e8     A8 00 A0 FD | 	call	#pushregs_
1e6ec     18 F0 07 F1 | 	add	ptra, #24
1e6f0     E8 EE BE FD | 	call	#_pop
1e6f4     FD 26 02 F6 | 	mov	local01, result1
1e6f8     FE 28 02 F6 | 	mov	local02, result2
1e6fc     FF 2A 02 F6 | 	mov	local03, result3
1e700     0C 4E 05 F1 | 	add	fp, #12
1e704     A7 26 62 FC | 	wrlong	local01, fp
1e708     04 4E 05 F1 | 	add	fp, #4
1e70c     A7 28 62 FC | 	wrlong	local02, fp
1e710     04 4E 05 F1 | 	add	fp, #4
1e714     A7 2A 62 FC | 	wrlong	local03, fp
1e718     14 4E 85 F1 | 	sub	fp, #20
1e71c     BC EE BE FD | 	call	#_pop
1e720     FF 2A 02 F6 | 	mov	local03, result3
1e724     A7 FA 61 FC | 	wrlong	result1, fp
1e728     04 4E 05 F1 | 	add	fp, #4
1e72c     A7 FC 61 FC | 	wrlong	result2, fp
1e730     04 4E 05 F1 | 	add	fp, #4
1e734     A7 2A 62 FC | 	wrlong	local03, fp
1e738                 | ' 
1e738                 | ' t2=pop()
1e738                 | ' t1=pop()
1e738                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1e738     08 4E 85 F1 | 	sub	fp, #8
1e73c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e740     14 4E 05 A1 |  if_e	add	fp, #20
1e744     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e748     14 4E 85 A1 |  if_e	sub	fp, #20
1e74c     16 2B 02 A6 |  if_e	mov	local03, local04
1e750     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e754     28 00 90 5D |  if_ne	jmp	#LR__2410
1e758     00 26 06 F6 | 	mov	local01, #0
1e75c     A7 12 02 FB | 	rdlong	arg01, fp
1e760     0C 4E 05 F1 | 	add	fp, #12
1e764     A7 14 02 FB | 	rdlong	arg02, fp
1e768     0C 4E 85 F1 | 	sub	fp, #12
1e76c     24 82 B0 FD | 	call	#__system___string_cmp
1e770     01 FA 55 F2 | 	cmps	result1, #1 wc
1e774     00 26 26 36 |  if_ae	not	local01, #0
1e778     A7 26 62 FC | 	wrlong	local01, fp
1e77c     20 04 90 FD | 	jmp	#LR__2423
1e780                 | LR__2410
1e780                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1e780     08 4E 05 F1 | 	add	fp, #8
1e784     A7 26 02 FB | 	rdlong	local01, fp
1e788     08 4E 85 F1 | 	sub	fp, #8
1e78c     1E 26 0E F2 | 	cmp	local01, #30 wz
1e790     14 4E 05 A1 |  if_e	add	fp, #20
1e794     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e798     14 4E 85 A1 |  if_e	sub	fp, #20
1e79c     16 2B 02 A6 |  if_e	mov	local03, local04
1e7a0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e7a4     2C 00 90 5D |  if_ne	jmp	#LR__2411
1e7a8     00 26 06 F6 | 	mov	local01, #0
1e7ac     A7 12 02 FB | 	rdlong	arg01, fp
1e7b0     0C 4E 05 F1 | 	add	fp, #12
1e7b4     A7 14 02 FB | 	rdlong	arg02, fp
1e7b8     0C 4E 85 F1 | 	sub	fp, #12
1e7bc     01 16 66 F6 | 	neg	arg03, #1
1e7c0     58 B4 B0 FD | 	call	#__system___float_cmp
1e7c4     01 FA 55 F2 | 	cmps	result1, #1 wc
1e7c8     00 26 26 36 |  if_ae	not	local01, #0
1e7cc     A7 26 62 FC | 	wrlong	local01, fp
1e7d0     CC 03 90 FD | 	jmp	#LR__2423
1e7d4                 | LR__2411
1e7d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1e7d4     08 4E 05 F1 | 	add	fp, #8
1e7d8     A7 26 02 FB | 	rdlong	local01, fp
1e7dc     08 4E 85 F1 | 	sub	fp, #8
1e7e0     1E 26 0E F2 | 	cmp	local01, #30 wz
1e7e4     14 4E 05 A1 |  if_e	add	fp, #20
1e7e8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e7ec     14 4E 85 A1 |  if_e	sub	fp, #20
1e7f0     16 2B 02 A6 |  if_e	mov	local03, local04
1e7f4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e7f8     48 00 90 5D |  if_ne	jmp	#LR__2412
1e7fc     00 26 06 F6 | 	mov	local01, #0
1e800     A7 28 02 FB | 	rdlong	local02, fp
1e804     0C 4E 05 F1 | 	add	fp, #12
1e808     A7 12 02 FB | 	rdlong	arg01, fp
1e80c     0C 4E 85 F1 | 	sub	fp, #12
1e810     09 13 52 F6 | 	abs	arg01, arg01 wc
1e814     1F 2E C6 C9 |  if_b	decod	local05, #31
1e818     00 2E 06 36 |  if_ae	mov	local05, #0
1e81c     C4 AB B0 FD | 	call	#__system___float_fromuns
1e820     17 FB 61 F5 | 	xor	result1, local05
1e824     FD 14 02 F6 | 	mov	arg02, result1
1e828     14 13 02 F6 | 	mov	arg01, local02
1e82c     01 16 66 F6 | 	neg	arg03, #1
1e830     E8 B3 B0 FD | 	call	#__system___float_cmp
1e834     01 FA 55 F2 | 	cmps	result1, #1 wc
1e838     00 26 26 36 |  if_ae	not	local01, #0
1e83c     A7 26 62 FC | 	wrlong	local01, fp
1e840     5C 03 90 FD | 	jmp	#LR__2423
1e844                 | LR__2412
1e844                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1e844     08 4E 05 F1 | 	add	fp, #8
1e848     A7 26 02 FB | 	rdlong	local01, fp
1e84c     08 4E 85 F1 | 	sub	fp, #8
1e850     1E 26 0E F2 | 	cmp	local01, #30 wz
1e854     14 4E 05 A1 |  if_e	add	fp, #20
1e858     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e85c     14 4E 85 A1 |  if_e	sub	fp, #20
1e860     16 2B 02 A6 |  if_e	mov	local03, local04
1e864     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e868     38 00 90 5D |  if_ne	jmp	#LR__2413
1e86c     00 26 06 F6 | 	mov	local01, #0
1e870     A7 28 02 FB | 	rdlong	local02, fp
1e874     0C 4E 05 F1 | 	add	fp, #12
1e878     A7 12 02 FB | 	rdlong	arg01, fp
1e87c     0C 4E 85 F1 | 	sub	fp, #12
1e880     60 AB B0 FD | 	call	#__system___float_fromuns
1e884     FD 14 02 F6 | 	mov	arg02, result1
1e888     14 13 02 F6 | 	mov	arg01, local02
1e88c     01 16 66 F6 | 	neg	arg03, #1
1e890     88 B3 B0 FD | 	call	#__system___float_cmp
1e894     01 FA 55 F2 | 	cmps	result1, #1 wc
1e898     00 26 26 36 |  if_ae	not	local01, #0
1e89c     A7 26 62 FC | 	wrlong	local01, fp
1e8a0     FC 02 90 FD | 	jmp	#LR__2423
1e8a4                 | LR__2413
1e8a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1e8a4     08 4E 05 F1 | 	add	fp, #8
1e8a8     A7 26 02 FB | 	rdlong	local01, fp
1e8ac     08 4E 85 F1 | 	sub	fp, #8
1e8b0     1C 26 0E F2 | 	cmp	local01, #28 wz
1e8b4     14 4E 05 A1 |  if_e	add	fp, #20
1e8b8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e8bc     14 4E 85 A1 |  if_e	sub	fp, #20
1e8c0     16 2B 02 A6 |  if_e	mov	local03, local04
1e8c4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e8c8     44 00 90 5D |  if_ne	jmp	#LR__2414
1e8cc     00 26 06 F6 | 	mov	local01, #0
1e8d0     A7 12 02 FB | 	rdlong	arg01, fp
1e8d4     09 13 52 F6 | 	abs	arg01, arg01 wc
1e8d8     1F 2E C6 C9 |  if_b	decod	local05, #31
1e8dc     00 2E 06 36 |  if_ae	mov	local05, #0
1e8e0     00 AB B0 FD | 	call	#__system___float_fromuns
1e8e4     17 FB 61 F5 | 	xor	result1, local05
1e8e8     FD 12 02 F6 | 	mov	arg01, result1
1e8ec     0C 4E 05 F1 | 	add	fp, #12
1e8f0     A7 14 02 FB | 	rdlong	arg02, fp
1e8f4     0C 4E 85 F1 | 	sub	fp, #12
1e8f8     01 16 66 F6 | 	neg	arg03, #1
1e8fc     1C B3 B0 FD | 	call	#__system___float_cmp
1e900     01 FA 55 F2 | 	cmps	result1, #1 wc
1e904     00 26 26 36 |  if_ae	not	local01, #0
1e908     A7 26 62 FC | 	wrlong	local01, fp
1e90c     90 02 90 FD | 	jmp	#LR__2423
1e910                 | LR__2414
1e910                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1e910     08 4E 05 F1 | 	add	fp, #8
1e914     A7 26 02 FB | 	rdlong	local01, fp
1e918     08 4E 85 F1 | 	sub	fp, #8
1e91c     1C 26 0E F2 | 	cmp	local01, #28 wz
1e920     14 4E 05 A1 |  if_e	add	fp, #20
1e924     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e928     14 4E 85 A1 |  if_e	sub	fp, #20
1e92c     16 2B 02 A6 |  if_e	mov	local03, local04
1e930     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e934     24 00 90 5D |  if_ne	jmp	#LR__2415
1e938     00 26 06 F6 | 	mov	local01, #0
1e93c     A7 28 02 FB | 	rdlong	local02, fp
1e940     0C 4E 05 F1 | 	add	fp, #12
1e944     A7 2A 02 FB | 	rdlong	local03, fp
1e948     0C 4E 85 F1 | 	sub	fp, #12
1e94c     15 29 5A F2 | 	cmps	local02, local03 wcz
1e950     01 26 66 16 |  if_a	neg	local01, #1
1e954     A7 26 62 FC | 	wrlong	local01, fp
1e958     44 02 90 FD | 	jmp	#LR__2423
1e95c                 | LR__2415
1e95c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1e95c     08 4E 05 F1 | 	add	fp, #8
1e960     A7 26 02 FB | 	rdlong	local01, fp
1e964     08 4E 85 F1 | 	sub	fp, #8
1e968     1C 26 0E F2 | 	cmp	local01, #28 wz
1e96c     14 4E 05 A1 |  if_e	add	fp, #20
1e970     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e974     14 4E 85 A1 |  if_e	sub	fp, #20
1e978     16 2B 02 A6 |  if_e	mov	local03, local04
1e97c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e980     24 00 90 5D |  if_ne	jmp	#LR__2416
1e984     00 26 06 F6 | 	mov	local01, #0
1e988     A7 28 02 FB | 	rdlong	local02, fp
1e98c     0C 4E 05 F1 | 	add	fp, #12
1e990     A7 2A 02 FB | 	rdlong	local03, fp
1e994     0C 4E 85 F1 | 	sub	fp, #12
1e998     15 29 5A F2 | 	cmps	local02, local03 wcz
1e99c     01 26 66 16 |  if_a	neg	local01, #1
1e9a0     A7 26 62 FC | 	wrlong	local01, fp
1e9a4     F8 01 90 FD | 	jmp	#LR__2423
1e9a8                 | LR__2416
1e9a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1e9a8     08 4E 05 F1 | 	add	fp, #8
1e9ac     A7 26 02 FB | 	rdlong	local01, fp
1e9b0     08 4E 85 F1 | 	sub	fp, #8
1e9b4     1D 26 0E F2 | 	cmp	local01, #29 wz
1e9b8     14 4E 05 A1 |  if_e	add	fp, #20
1e9bc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e9c0     14 4E 85 A1 |  if_e	sub	fp, #20
1e9c4     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1e9c8     34 00 90 5D |  if_ne	jmp	#LR__2417
1e9cc     00 26 06 F6 | 	mov	local01, #0
1e9d0     A7 12 02 FB | 	rdlong	arg01, fp
1e9d4     0C AA B0 FD | 	call	#__system___float_fromuns
1e9d8     FD 12 02 F6 | 	mov	arg01, result1
1e9dc     0C 4E 05 F1 | 	add	fp, #12
1e9e0     A7 14 02 FB | 	rdlong	arg02, fp
1e9e4     0C 4E 85 F1 | 	sub	fp, #12
1e9e8     01 16 66 F6 | 	neg	arg03, #1
1e9ec     2C B2 B0 FD | 	call	#__system___float_cmp
1e9f0     01 FA 55 F2 | 	cmps	result1, #1 wc
1e9f4     00 26 26 36 |  if_ae	not	local01, #0
1e9f8     A7 26 62 FC | 	wrlong	local01, fp
1e9fc     A0 01 90 FD | 	jmp	#LR__2423
1ea00                 | LR__2417
1ea00                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1ea00     08 4E 05 F1 | 	add	fp, #8
1ea04     A7 26 02 FB | 	rdlong	local01, fp
1ea08     08 4E 85 F1 | 	sub	fp, #8
1ea0c     1D 26 0E F2 | 	cmp	local01, #29 wz
1ea10     14 4E 05 A1 |  if_e	add	fp, #20
1ea14     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ea18     14 4E 85 A1 |  if_e	sub	fp, #20
1ea1c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ea20     24 00 90 5D |  if_ne	jmp	#LR__2418
1ea24     00 26 06 F6 | 	mov	local01, #0
1ea28     A7 28 02 FB | 	rdlong	local02, fp
1ea2c     0C 4E 05 F1 | 	add	fp, #12
1ea30     A7 2A 02 FB | 	rdlong	local03, fp
1ea34     0C 4E 85 F1 | 	sub	fp, #12
1ea38     15 29 5A F2 | 	cmps	local02, local03 wcz
1ea3c     01 26 66 16 |  if_a	neg	local01, #1
1ea40     A7 26 62 FC | 	wrlong	local01, fp
1ea44     58 01 90 FD | 	jmp	#LR__2423
1ea48                 | LR__2418
1ea48                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1ea48     08 4E 05 F1 | 	add	fp, #8
1ea4c     A7 26 02 FB | 	rdlong	local01, fp
1ea50     08 4E 85 F1 | 	sub	fp, #8
1ea54     1D 26 0E F2 | 	cmp	local01, #29 wz
1ea58     14 4E 05 A1 |  if_e	add	fp, #20
1ea5c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ea60     14 4E 85 A1 |  if_e	sub	fp, #20
1ea64     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ea68     24 00 90 5D |  if_ne	jmp	#LR__2419
1ea6c     00 26 06 F6 | 	mov	local01, #0
1ea70     A7 28 02 FB | 	rdlong	local02, fp
1ea74     0C 4E 05 F1 | 	add	fp, #12
1ea78     A7 2A 02 FB | 	rdlong	local03, fp
1ea7c     0C 4E 85 F1 | 	sub	fp, #12
1ea80     15 29 1A F2 | 	cmp	local02, local03 wcz
1ea84     01 26 66 16 |  if_a	neg	local01, #1
1ea88     A7 26 62 FC | 	wrlong	local01, fp
1ea8c     10 01 90 FD | 	jmp	#LR__2423
1ea90                 | LR__2419
1ea90                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1ea90     08 4E 05 F1 | 	add	fp, #8
1ea94     A7 26 02 FB | 	rdlong	local01, fp
1ea98     08 4E 85 F1 | 	sub	fp, #8
1ea9c     2B 26 0E F2 | 	cmp	local01, #43 wz
1eaa0     14 4E 05 A1 |  if_e	add	fp, #20
1eaa4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eaa8     14 4E 85 A1 |  if_e	sub	fp, #20
1eaac     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1eab0     30 00 90 5D |  if_ne	jmp	#LR__2420
1eab4     00 26 06 F6 | 	mov	local01, #0
1eab8     A7 12 02 FB | 	rdlong	arg01, fp
1eabc     94 EC BE FD | 	call	#_convertstring
1eac0     FD 12 02 F6 | 	mov	arg01, result1
1eac4     0C 4E 05 F1 | 	add	fp, #12
1eac8     A7 14 02 FB | 	rdlong	arg02, fp
1eacc     0C 4E 85 F1 | 	sub	fp, #12
1ead0     C0 7E B0 FD | 	call	#__system___string_cmp
1ead4     01 FA 55 F2 | 	cmps	result1, #1 wc
1ead8     00 26 26 36 |  if_ae	not	local01, #0
1eadc     A7 26 62 FC | 	wrlong	local01, fp
1eae0     BC 00 90 FD | 	jmp	#LR__2423
1eae4                 | LR__2420
1eae4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1eae4     08 4E 05 F1 | 	add	fp, #8
1eae8     A7 26 02 FB | 	rdlong	local01, fp
1eaec     08 4E 85 F1 | 	sub	fp, #8
1eaf0     1F 26 0E F2 | 	cmp	local01, #31 wz
1eaf4     14 4E 05 A1 |  if_e	add	fp, #20
1eaf8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eafc     14 4E 85 A1 |  if_e	sub	fp, #20
1eb00     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1eb04     34 00 90 5D |  if_ne	jmp	#LR__2421
1eb08     00 26 06 F6 | 	mov	local01, #0
1eb0c     A7 28 02 FB | 	rdlong	local02, fp
1eb10     0C 4E 05 F1 | 	add	fp, #12
1eb14     A7 12 02 FB | 	rdlong	arg01, fp
1eb18     0C 4E 85 F1 | 	sub	fp, #12
1eb1c     34 EC BE FD | 	call	#_convertstring
1eb20     FD 14 02 F6 | 	mov	arg02, result1
1eb24     14 13 02 F6 | 	mov	arg01, local02
1eb28     68 7E B0 FD | 	call	#__system___string_cmp
1eb2c     01 FA 55 F2 | 	cmps	result1, #1 wc
1eb30     00 26 26 36 |  if_ae	not	local01, #0
1eb34     A7 26 62 FC | 	wrlong	local01, fp
1eb38     64 00 90 FD | 	jmp	#LR__2423
1eb3c                 | LR__2421
1eb3c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1eb3c     08 4E 05 F1 | 	add	fp, #8
1eb40     A7 26 02 FB | 	rdlong	local01, fp
1eb44     08 4E 85 F1 | 	sub	fp, #8
1eb48     2B 26 0E F2 | 	cmp	local01, #43 wz
1eb4c     14 4E 05 A1 |  if_e	add	fp, #20
1eb50     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eb54     14 4E 85 A1 |  if_e	sub	fp, #20
1eb58     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1eb5c     3C 00 90 5D |  if_ne	jmp	#LR__2422
1eb60     00 26 06 F6 | 	mov	local01, #0
1eb64     A7 12 02 FB | 	rdlong	arg01, fp
1eb68     E8 EB BE FD | 	call	#_convertstring
1eb6c     FD 28 02 F6 | 	mov	local02, result1
1eb70     0C 4E 05 F1 | 	add	fp, #12
1eb74     A7 12 02 FB | 	rdlong	arg01, fp
1eb78     0C 4E 85 F1 | 	sub	fp, #12
1eb7c     D4 EB BE FD | 	call	#_convertstring
1eb80     FD 14 02 F6 | 	mov	arg02, result1
1eb84     14 13 02 F6 | 	mov	arg01, local02
1eb88     08 7E B0 FD | 	call	#__system___string_cmp
1eb8c     01 FA 55 F2 | 	cmps	result1, #1 wc
1eb90     00 26 26 36 |  if_ae	not	local01, #0
1eb94     A7 26 62 FC | 	wrlong	local01, fp
1eb98     04 00 90 FD | 	jmp	#LR__2423
1eb9c                 | LR__2422
1eb9c     A7 00 68 FC | 	wrlong	#0, fp
1eba0                 | LR__2423
1eba0     08 4E 05 F1 | 	add	fp, #8
1eba4     A7 38 68 FC | 	wrlong	#28, fp
1eba8     08 4E 85 F1 | 	sub	fp, #8
1ebac                 | ' t1.result.uresult=0
1ebac                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1ebac     A7 26 0A FB | 	rdlong	local01, fp wz
1ebb0     A7 02 68 5C |  if_ne	wrlong	#1, fp
1ebb4     A7 12 02 F6 | 	mov	arg01, fp
1ebb8     B8 EA BE FD | 	call	#_push
1ebbc     A7 F0 03 F6 | 	mov	ptra, fp
1ebc0     B2 00 A0 FD | 	call	#popregs_
1ebc4                 | _do_gt_ret
1ebc4     2D 00 64 FD | 	ret
1ebc8                 | 
1ebc8                 | ' 
1ebc8                 | ' '--------------------------------- less or equal (<=)
1ebc8                 | ' 
1ebc8                 | ' sub do_le
1ebc8                 | _do_le
1ebc8     05 4A 05 F6 | 	mov	COUNT_, #5
1ebcc     A8 00 A0 FD | 	call	#pushregs_
1ebd0     18 F0 07 F1 | 	add	ptra, #24
1ebd4     04 EA BE FD | 	call	#_pop
1ebd8     FD 26 02 F6 | 	mov	local01, result1
1ebdc     FE 28 02 F6 | 	mov	local02, result2
1ebe0     FF 2A 02 F6 | 	mov	local03, result3
1ebe4     0C 4E 05 F1 | 	add	fp, #12
1ebe8     A7 26 62 FC | 	wrlong	local01, fp
1ebec     04 4E 05 F1 | 	add	fp, #4
1ebf0     A7 28 62 FC | 	wrlong	local02, fp
1ebf4     04 4E 05 F1 | 	add	fp, #4
1ebf8     A7 2A 62 FC | 	wrlong	local03, fp
1ebfc     14 4E 85 F1 | 	sub	fp, #20
1ec00     D8 E9 BE FD | 	call	#_pop
1ec04     FF 2A 02 F6 | 	mov	local03, result3
1ec08     A7 FA 61 FC | 	wrlong	result1, fp
1ec0c     04 4E 05 F1 | 	add	fp, #4
1ec10     A7 FC 61 FC | 	wrlong	result2, fp
1ec14     04 4E 05 F1 | 	add	fp, #4
1ec18     A7 2A 62 FC | 	wrlong	local03, fp
1ec1c                 | ' 
1ec1c                 | ' t2=pop()
1ec1c                 | ' t1=pop()
1ec1c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1ec1c     08 4E 85 F1 | 	sub	fp, #8
1ec20     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ec24     14 4E 05 A1 |  if_e	add	fp, #20
1ec28     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ec2c     14 4E 85 A1 |  if_e	sub	fp, #20
1ec30     16 2B 02 A6 |  if_e	mov	local03, local04
1ec34     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ec38     28 00 90 5D |  if_ne	jmp	#LR__2430
1ec3c     00 26 06 F6 | 	mov	local01, #0
1ec40     A7 12 02 FB | 	rdlong	arg01, fp
1ec44     0C 4E 05 F1 | 	add	fp, #12
1ec48     A7 14 02 FB | 	rdlong	arg02, fp
1ec4c     0C 4E 85 F1 | 	sub	fp, #12
1ec50     40 7D B0 FD | 	call	#__system___string_cmp
1ec54     01 FA 55 F2 | 	cmps	result1, #1 wc
1ec58     00 26 26 C6 |  if_b	not	local01, #0
1ec5c     A7 26 62 FC | 	wrlong	local01, fp
1ec60     20 04 90 FD | 	jmp	#LR__2443
1ec64                 | LR__2430
1ec64                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1ec64     08 4E 05 F1 | 	add	fp, #8
1ec68     A7 26 02 FB | 	rdlong	local01, fp
1ec6c     08 4E 85 F1 | 	sub	fp, #8
1ec70     1E 26 0E F2 | 	cmp	local01, #30 wz
1ec74     14 4E 05 A1 |  if_e	add	fp, #20
1ec78     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ec7c     14 4E 85 A1 |  if_e	sub	fp, #20
1ec80     16 2B 02 A6 |  if_e	mov	local03, local04
1ec84     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ec88     2C 00 90 5D |  if_ne	jmp	#LR__2431
1ec8c     00 26 06 F6 | 	mov	local01, #0
1ec90     A7 12 02 FB | 	rdlong	arg01, fp
1ec94     0C 4E 05 F1 | 	add	fp, #12
1ec98     A7 14 02 FB | 	rdlong	arg02, fp
1ec9c     0C 4E 85 F1 | 	sub	fp, #12
1eca0     01 16 06 F6 | 	mov	arg03, #1
1eca4     74 AF B0 FD | 	call	#__system___float_cmp
1eca8     01 FA 55 F2 | 	cmps	result1, #1 wc
1ecac     00 26 26 C6 |  if_b	not	local01, #0
1ecb0     A7 26 62 FC | 	wrlong	local01, fp
1ecb4     CC 03 90 FD | 	jmp	#LR__2443
1ecb8                 | LR__2431
1ecb8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1ecb8     08 4E 05 F1 | 	add	fp, #8
1ecbc     A7 26 02 FB | 	rdlong	local01, fp
1ecc0     08 4E 85 F1 | 	sub	fp, #8
1ecc4     1E 26 0E F2 | 	cmp	local01, #30 wz
1ecc8     14 4E 05 A1 |  if_e	add	fp, #20
1eccc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ecd0     14 4E 85 A1 |  if_e	sub	fp, #20
1ecd4     16 2B 02 A6 |  if_e	mov	local03, local04
1ecd8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ecdc     48 00 90 5D |  if_ne	jmp	#LR__2432
1ece0     00 26 06 F6 | 	mov	local01, #0
1ece4     A7 28 02 FB | 	rdlong	local02, fp
1ece8     0C 4E 05 F1 | 	add	fp, #12
1ecec     A7 12 02 FB | 	rdlong	arg01, fp
1ecf0     0C 4E 85 F1 | 	sub	fp, #12
1ecf4     09 13 52 F6 | 	abs	arg01, arg01 wc
1ecf8     1F 2E C6 C9 |  if_b	decod	local05, #31
1ecfc     00 2E 06 36 |  if_ae	mov	local05, #0
1ed00     E0 A6 B0 FD | 	call	#__system___float_fromuns
1ed04     17 FB 61 F5 | 	xor	result1, local05
1ed08     FD 14 02 F6 | 	mov	arg02, result1
1ed0c     14 13 02 F6 | 	mov	arg01, local02
1ed10     01 16 06 F6 | 	mov	arg03, #1
1ed14     04 AF B0 FD | 	call	#__system___float_cmp
1ed18     01 FA 55 F2 | 	cmps	result1, #1 wc
1ed1c     00 26 26 C6 |  if_b	not	local01, #0
1ed20     A7 26 62 FC | 	wrlong	local01, fp
1ed24     5C 03 90 FD | 	jmp	#LR__2443
1ed28                 | LR__2432
1ed28                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1ed28     08 4E 05 F1 | 	add	fp, #8
1ed2c     A7 26 02 FB | 	rdlong	local01, fp
1ed30     08 4E 85 F1 | 	sub	fp, #8
1ed34     1E 26 0E F2 | 	cmp	local01, #30 wz
1ed38     14 4E 05 A1 |  if_e	add	fp, #20
1ed3c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed40     14 4E 85 A1 |  if_e	sub	fp, #20
1ed44     16 2B 02 A6 |  if_e	mov	local03, local04
1ed48     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ed4c     38 00 90 5D |  if_ne	jmp	#LR__2433
1ed50     00 26 06 F6 | 	mov	local01, #0
1ed54     A7 28 02 FB | 	rdlong	local02, fp
1ed58     0C 4E 05 F1 | 	add	fp, #12
1ed5c     A7 12 02 FB | 	rdlong	arg01, fp
1ed60     0C 4E 85 F1 | 	sub	fp, #12
1ed64     7C A6 B0 FD | 	call	#__system___float_fromuns
1ed68     FD 14 02 F6 | 	mov	arg02, result1
1ed6c     14 13 02 F6 | 	mov	arg01, local02
1ed70     01 16 06 F6 | 	mov	arg03, #1
1ed74     A4 AE B0 FD | 	call	#__system___float_cmp
1ed78     01 FA 55 F2 | 	cmps	result1, #1 wc
1ed7c     00 26 26 C6 |  if_b	not	local01, #0
1ed80     A7 26 62 FC | 	wrlong	local01, fp
1ed84     FC 02 90 FD | 	jmp	#LR__2443
1ed88                 | LR__2433
1ed88                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1ed88     08 4E 05 F1 | 	add	fp, #8
1ed8c     A7 26 02 FB | 	rdlong	local01, fp
1ed90     08 4E 85 F1 | 	sub	fp, #8
1ed94     1C 26 0E F2 | 	cmp	local01, #28 wz
1ed98     14 4E 05 A1 |  if_e	add	fp, #20
1ed9c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eda0     14 4E 85 A1 |  if_e	sub	fp, #20
1eda4     16 2B 02 A6 |  if_e	mov	local03, local04
1eda8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1edac     44 00 90 5D |  if_ne	jmp	#LR__2434
1edb0     00 26 06 F6 | 	mov	local01, #0
1edb4     A7 12 02 FB | 	rdlong	arg01, fp
1edb8     09 13 52 F6 | 	abs	arg01, arg01 wc
1edbc     1F 2E C6 C9 |  if_b	decod	local05, #31
1edc0     00 2E 06 36 |  if_ae	mov	local05, #0
1edc4     1C A6 B0 FD | 	call	#__system___float_fromuns
1edc8     17 FB 61 F5 | 	xor	result1, local05
1edcc     FD 12 02 F6 | 	mov	arg01, result1
1edd0     0C 4E 05 F1 | 	add	fp, #12
1edd4     A7 14 02 FB | 	rdlong	arg02, fp
1edd8     0C 4E 85 F1 | 	sub	fp, #12
1eddc     01 16 06 F6 | 	mov	arg03, #1
1ede0     38 AE B0 FD | 	call	#__system___float_cmp
1ede4     01 FA 55 F2 | 	cmps	result1, #1 wc
1ede8     00 26 26 C6 |  if_b	not	local01, #0
1edec     A7 26 62 FC | 	wrlong	local01, fp
1edf0     90 02 90 FD | 	jmp	#LR__2443
1edf4                 | LR__2434
1edf4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1edf4     08 4E 05 F1 | 	add	fp, #8
1edf8     A7 26 02 FB | 	rdlong	local01, fp
1edfc     08 4E 85 F1 | 	sub	fp, #8
1ee00     1C 26 0E F2 | 	cmp	local01, #28 wz
1ee04     14 4E 05 A1 |  if_e	add	fp, #20
1ee08     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ee0c     14 4E 85 A1 |  if_e	sub	fp, #20
1ee10     16 2B 02 A6 |  if_e	mov	local03, local04
1ee14     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ee18     24 00 90 5D |  if_ne	jmp	#LR__2435
1ee1c     00 26 06 F6 | 	mov	local01, #0
1ee20     A7 28 02 FB | 	rdlong	local02, fp
1ee24     0C 4E 05 F1 | 	add	fp, #12
1ee28     A7 2A 02 FB | 	rdlong	local03, fp
1ee2c     0C 4E 85 F1 | 	sub	fp, #12
1ee30     15 29 5A F2 | 	cmps	local02, local03 wcz
1ee34     01 26 66 E6 |  if_be	neg	local01, #1
1ee38     A7 26 62 FC | 	wrlong	local01, fp
1ee3c     44 02 90 FD | 	jmp	#LR__2443
1ee40                 | LR__2435
1ee40                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1ee40     08 4E 05 F1 | 	add	fp, #8
1ee44     A7 26 02 FB | 	rdlong	local01, fp
1ee48     08 4E 85 F1 | 	sub	fp, #8
1ee4c     1C 26 0E F2 | 	cmp	local01, #28 wz
1ee50     14 4E 05 A1 |  if_e	add	fp, #20
1ee54     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ee58     14 4E 85 A1 |  if_e	sub	fp, #20
1ee5c     16 2B 02 A6 |  if_e	mov	local03, local04
1ee60     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ee64     24 00 90 5D |  if_ne	jmp	#LR__2436
1ee68     00 26 06 F6 | 	mov	local01, #0
1ee6c     A7 28 02 FB | 	rdlong	local02, fp
1ee70     0C 4E 05 F1 | 	add	fp, #12
1ee74     A7 2A 02 FB | 	rdlong	local03, fp
1ee78     0C 4E 85 F1 | 	sub	fp, #12
1ee7c     15 29 5A F2 | 	cmps	local02, local03 wcz
1ee80     01 26 66 E6 |  if_be	neg	local01, #1
1ee84     A7 26 62 FC | 	wrlong	local01, fp
1ee88     F8 01 90 FD | 	jmp	#LR__2443
1ee8c                 | LR__2436
1ee8c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1ee8c     08 4E 05 F1 | 	add	fp, #8
1ee90     A7 26 02 FB | 	rdlong	local01, fp
1ee94     08 4E 85 F1 | 	sub	fp, #8
1ee98     1D 26 0E F2 | 	cmp	local01, #29 wz
1ee9c     14 4E 05 A1 |  if_e	add	fp, #20
1eea0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eea4     14 4E 85 A1 |  if_e	sub	fp, #20
1eea8     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1eeac     34 00 90 5D |  if_ne	jmp	#LR__2437
1eeb0     00 26 06 F6 | 	mov	local01, #0
1eeb4     A7 12 02 FB | 	rdlong	arg01, fp
1eeb8     28 A5 B0 FD | 	call	#__system___float_fromuns
1eebc     FD 12 02 F6 | 	mov	arg01, result1
1eec0     0C 4E 05 F1 | 	add	fp, #12
1eec4     A7 14 02 FB | 	rdlong	arg02, fp
1eec8     0C 4E 85 F1 | 	sub	fp, #12
1eecc     01 16 06 F6 | 	mov	arg03, #1
1eed0     48 AD B0 FD | 	call	#__system___float_cmp
1eed4     01 FA 55 F2 | 	cmps	result1, #1 wc
1eed8     00 26 26 C6 |  if_b	not	local01, #0
1eedc     A7 26 62 FC | 	wrlong	local01, fp
1eee0     A0 01 90 FD | 	jmp	#LR__2443
1eee4                 | LR__2437
1eee4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1eee4     08 4E 05 F1 | 	add	fp, #8
1eee8     A7 26 02 FB | 	rdlong	local01, fp
1eeec     08 4E 85 F1 | 	sub	fp, #8
1eef0     1D 26 0E F2 | 	cmp	local01, #29 wz
1eef4     14 4E 05 A1 |  if_e	add	fp, #20
1eef8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eefc     14 4E 85 A1 |  if_e	sub	fp, #20
1ef00     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ef04     24 00 90 5D |  if_ne	jmp	#LR__2438
1ef08     00 26 06 F6 | 	mov	local01, #0
1ef0c     A7 28 02 FB | 	rdlong	local02, fp
1ef10     0C 4E 05 F1 | 	add	fp, #12
1ef14     A7 2A 02 FB | 	rdlong	local03, fp
1ef18     0C 4E 85 F1 | 	sub	fp, #12
1ef1c     15 29 5A F2 | 	cmps	local02, local03 wcz
1ef20     01 26 66 E6 |  if_be	neg	local01, #1
1ef24     A7 26 62 FC | 	wrlong	local01, fp
1ef28     58 01 90 FD | 	jmp	#LR__2443
1ef2c                 | LR__2438
1ef2c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1ef2c     08 4E 05 F1 | 	add	fp, #8
1ef30     A7 26 02 FB | 	rdlong	local01, fp
1ef34     08 4E 85 F1 | 	sub	fp, #8
1ef38     1D 26 0E F2 | 	cmp	local01, #29 wz
1ef3c     14 4E 05 A1 |  if_e	add	fp, #20
1ef40     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ef44     14 4E 85 A1 |  if_e	sub	fp, #20
1ef48     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ef4c     24 00 90 5D |  if_ne	jmp	#LR__2439
1ef50     00 26 06 F6 | 	mov	local01, #0
1ef54     A7 28 02 FB | 	rdlong	local02, fp
1ef58     0C 4E 05 F1 | 	add	fp, #12
1ef5c     A7 2A 02 FB | 	rdlong	local03, fp
1ef60     0C 4E 85 F1 | 	sub	fp, #12
1ef64     15 29 1A F2 | 	cmp	local02, local03 wcz
1ef68     01 26 66 E6 |  if_be	neg	local01, #1
1ef6c     A7 26 62 FC | 	wrlong	local01, fp
1ef70     10 01 90 FD | 	jmp	#LR__2443
1ef74                 | LR__2439
1ef74                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1ef74     08 4E 05 F1 | 	add	fp, #8
1ef78     A7 26 02 FB | 	rdlong	local01, fp
1ef7c     08 4E 85 F1 | 	sub	fp, #8
1ef80     2B 26 0E F2 | 	cmp	local01, #43 wz
1ef84     14 4E 05 A1 |  if_e	add	fp, #20
1ef88     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ef8c     14 4E 85 A1 |  if_e	sub	fp, #20
1ef90     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ef94     30 00 90 5D |  if_ne	jmp	#LR__2440
1ef98     00 26 06 F6 | 	mov	local01, #0
1ef9c     A7 12 02 FB | 	rdlong	arg01, fp
1efa0     B0 E7 BE FD | 	call	#_convertstring
1efa4     FD 12 02 F6 | 	mov	arg01, result1
1efa8     0C 4E 05 F1 | 	add	fp, #12
1efac     A7 14 02 FB | 	rdlong	arg02, fp
1efb0     0C 4E 85 F1 | 	sub	fp, #12
1efb4     DC 79 B0 FD | 	call	#__system___string_cmp
1efb8     01 FA 55 F2 | 	cmps	result1, #1 wc
1efbc     00 26 26 C6 |  if_b	not	local01, #0
1efc0     A7 26 62 FC | 	wrlong	local01, fp
1efc4     BC 00 90 FD | 	jmp	#LR__2443
1efc8                 | LR__2440
1efc8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1efc8     08 4E 05 F1 | 	add	fp, #8
1efcc     A7 26 02 FB | 	rdlong	local01, fp
1efd0     08 4E 85 F1 | 	sub	fp, #8
1efd4     1F 26 0E F2 | 	cmp	local01, #31 wz
1efd8     14 4E 05 A1 |  if_e	add	fp, #20
1efdc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1efe0     14 4E 85 A1 |  if_e	sub	fp, #20
1efe4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1efe8     34 00 90 5D |  if_ne	jmp	#LR__2441
1efec     00 26 06 F6 | 	mov	local01, #0
1eff0     A7 28 02 FB | 	rdlong	local02, fp
1eff4     0C 4E 05 F1 | 	add	fp, #12
1eff8     A7 12 02 FB | 	rdlong	arg01, fp
1effc     0C 4E 85 F1 | 	sub	fp, #12
1f000     50 E7 BE FD | 	call	#_convertstring
1f004     FD 14 02 F6 | 	mov	arg02, result1
1f008     14 13 02 F6 | 	mov	arg01, local02
1f00c     84 79 B0 FD | 	call	#__system___string_cmp
1f010     01 FA 55 F2 | 	cmps	result1, #1 wc
1f014     00 26 26 C6 |  if_b	not	local01, #0
1f018     A7 26 62 FC | 	wrlong	local01, fp
1f01c     64 00 90 FD | 	jmp	#LR__2443
1f020                 | LR__2441
1f020                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1f020     08 4E 05 F1 | 	add	fp, #8
1f024     A7 26 02 FB | 	rdlong	local01, fp
1f028     08 4E 85 F1 | 	sub	fp, #8
1f02c     2B 26 0E F2 | 	cmp	local01, #43 wz
1f030     14 4E 05 A1 |  if_e	add	fp, #20
1f034     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f038     14 4E 85 A1 |  if_e	sub	fp, #20
1f03c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f040     3C 00 90 5D |  if_ne	jmp	#LR__2442
1f044     00 26 06 F6 | 	mov	local01, #0
1f048     A7 12 02 FB | 	rdlong	arg01, fp
1f04c     04 E7 BE FD | 	call	#_convertstring
1f050     FD 28 02 F6 | 	mov	local02, result1
1f054     0C 4E 05 F1 | 	add	fp, #12
1f058     A7 12 02 FB | 	rdlong	arg01, fp
1f05c     0C 4E 85 F1 | 	sub	fp, #12
1f060     F0 E6 BE FD | 	call	#_convertstring
1f064     FD 14 02 F6 | 	mov	arg02, result1
1f068     14 13 02 F6 | 	mov	arg01, local02
1f06c     24 79 B0 FD | 	call	#__system___string_cmp
1f070     01 FA 55 F2 | 	cmps	result1, #1 wc
1f074     00 26 26 C6 |  if_b	not	local01, #0
1f078     A7 26 62 FC | 	wrlong	local01, fp
1f07c     04 00 90 FD | 	jmp	#LR__2443
1f080                 | LR__2442
1f080     A7 00 68 FC | 	wrlong	#0, fp
1f084                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f084                 | LR__2443
1f084     08 4E 05 F1 | 	add	fp, #8
1f088     A7 38 68 FC | 	wrlong	#28, fp
1f08c     08 4E 85 F1 | 	sub	fp, #8
1f090     A7 12 02 F6 | 	mov	arg01, fp
1f094     DC E5 BE FD | 	call	#_push
1f098     A7 F0 03 F6 | 	mov	ptra, fp
1f09c     B2 00 A0 FD | 	call	#popregs_
1f0a0                 | _do_le_ret
1f0a0     2D 00 64 FD | 	ret
1f0a4                 | 
1f0a4                 | ' 
1f0a4                 | ' '--------------------------------- less than (<)
1f0a4                 | ' 
1f0a4                 | ' sub do_lt
1f0a4                 | _do_lt
1f0a4     05 4A 05 F6 | 	mov	COUNT_, #5
1f0a8     A8 00 A0 FD | 	call	#pushregs_
1f0ac     18 F0 07 F1 | 	add	ptra, #24
1f0b0     28 E5 BE FD | 	call	#_pop
1f0b4     FD 26 02 F6 | 	mov	local01, result1
1f0b8     FE 28 02 F6 | 	mov	local02, result2
1f0bc     FF 2A 02 F6 | 	mov	local03, result3
1f0c0     0C 4E 05 F1 | 	add	fp, #12
1f0c4     A7 26 62 FC | 	wrlong	local01, fp
1f0c8     04 4E 05 F1 | 	add	fp, #4
1f0cc     A7 28 62 FC | 	wrlong	local02, fp
1f0d0     04 4E 05 F1 | 	add	fp, #4
1f0d4     A7 2A 62 FC | 	wrlong	local03, fp
1f0d8     14 4E 85 F1 | 	sub	fp, #20
1f0dc     FC E4 BE FD | 	call	#_pop
1f0e0     FF 2A 02 F6 | 	mov	local03, result3
1f0e4     A7 FA 61 FC | 	wrlong	result1, fp
1f0e8     04 4E 05 F1 | 	add	fp, #4
1f0ec     A7 FC 61 FC | 	wrlong	result2, fp
1f0f0     04 4E 05 F1 | 	add	fp, #4
1f0f4     A7 2A 62 FC | 	wrlong	local03, fp
1f0f8                 | ' 
1f0f8                 | ' t2=pop()
1f0f8                 | ' t1=pop()
1f0f8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1f0f8     08 4E 85 F1 | 	sub	fp, #8
1f0fc     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f100     14 4E 05 A1 |  if_e	add	fp, #20
1f104     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f108     14 4E 85 A1 |  if_e	sub	fp, #20
1f10c     16 2B 02 A6 |  if_e	mov	local03, local04
1f110     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f114     28 00 90 5D |  if_ne	jmp	#LR__2450
1f118     00 26 06 F6 | 	mov	local01, #0
1f11c     A7 12 02 FB | 	rdlong	arg01, fp
1f120     0C 4E 05 F1 | 	add	fp, #12
1f124     A7 14 02 FB | 	rdlong	arg02, fp
1f128     0C 4E 85 F1 | 	sub	fp, #12
1f12c     64 78 B0 FD | 	call	#__system___string_cmp
1f130     00 FA 55 F2 | 	cmps	result1, #0 wc
1f134     00 26 26 C6 |  if_b	not	local01, #0
1f138     A7 26 62 FC | 	wrlong	local01, fp
1f13c     10 04 90 FD | 	jmp	#LR__2463
1f140                 | LR__2450
1f140                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1f140     08 4E 05 F1 | 	add	fp, #8
1f144     A7 26 02 FB | 	rdlong	local01, fp
1f148     08 4E 85 F1 | 	sub	fp, #8
1f14c     1E 26 0E F2 | 	cmp	local01, #30 wz
1f150     14 4E 05 A1 |  if_e	add	fp, #20
1f154     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f158     14 4E 85 A1 |  if_e	sub	fp, #20
1f15c     16 2B 02 A6 |  if_e	mov	local03, local04
1f160     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f164     2C 00 90 5D |  if_ne	jmp	#LR__2451
1f168     00 26 06 F6 | 	mov	local01, #0
1f16c     A7 12 02 FB | 	rdlong	arg01, fp
1f170     0C 4E 05 F1 | 	add	fp, #12
1f174     A7 14 02 FB | 	rdlong	arg02, fp
1f178     0C 4E 85 F1 | 	sub	fp, #12
1f17c     01 16 06 F6 | 	mov	arg03, #1
1f180     98 AA B0 FD | 	call	#__system___float_cmp
1f184     00 FA 55 F2 | 	cmps	result1, #0 wc
1f188     00 26 26 C6 |  if_b	not	local01, #0
1f18c     A7 26 62 FC | 	wrlong	local01, fp
1f190     BC 03 90 FD | 	jmp	#LR__2463
1f194                 | LR__2451
1f194                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1f194     08 4E 05 F1 | 	add	fp, #8
1f198     A7 26 02 FB | 	rdlong	local01, fp
1f19c     08 4E 85 F1 | 	sub	fp, #8
1f1a0     1E 26 0E F2 | 	cmp	local01, #30 wz
1f1a4     14 4E 05 A1 |  if_e	add	fp, #20
1f1a8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f1ac     14 4E 85 A1 |  if_e	sub	fp, #20
1f1b0     16 2B 02 A6 |  if_e	mov	local03, local04
1f1b4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f1b8     48 00 90 5D |  if_ne	jmp	#LR__2452
1f1bc     00 26 06 F6 | 	mov	local01, #0
1f1c0     A7 28 02 FB | 	rdlong	local02, fp
1f1c4     0C 4E 05 F1 | 	add	fp, #12
1f1c8     A7 12 02 FB | 	rdlong	arg01, fp
1f1cc     0C 4E 85 F1 | 	sub	fp, #12
1f1d0     09 13 52 F6 | 	abs	arg01, arg01 wc
1f1d4     1F 2E C6 C9 |  if_b	decod	local05, #31
1f1d8     00 2E 06 36 |  if_ae	mov	local05, #0
1f1dc     04 A2 B0 FD | 	call	#__system___float_fromuns
1f1e0     17 FB 61 F5 | 	xor	result1, local05
1f1e4     FD 14 02 F6 | 	mov	arg02, result1
1f1e8     14 13 02 F6 | 	mov	arg01, local02
1f1ec     01 16 06 F6 | 	mov	arg03, #1
1f1f0     28 AA B0 FD | 	call	#__system___float_cmp
1f1f4     00 FA 55 F2 | 	cmps	result1, #0 wc
1f1f8     00 26 26 C6 |  if_b	not	local01, #0
1f1fc     A7 26 62 FC | 	wrlong	local01, fp
1f200     4C 03 90 FD | 	jmp	#LR__2463
1f204                 | LR__2452
1f204                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1f204     08 4E 05 F1 | 	add	fp, #8
1f208     A7 26 02 FB | 	rdlong	local01, fp
1f20c     08 4E 85 F1 | 	sub	fp, #8
1f210     1E 26 0E F2 | 	cmp	local01, #30 wz
1f214     14 4E 05 A1 |  if_e	add	fp, #20
1f218     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f21c     14 4E 85 A1 |  if_e	sub	fp, #20
1f220     16 2B 02 A6 |  if_e	mov	local03, local04
1f224     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f228     38 00 90 5D |  if_ne	jmp	#LR__2453
1f22c     00 26 06 F6 | 	mov	local01, #0
1f230     A7 28 02 FB | 	rdlong	local02, fp
1f234     0C 4E 05 F1 | 	add	fp, #12
1f238     A7 12 02 FB | 	rdlong	arg01, fp
1f23c     0C 4E 85 F1 | 	sub	fp, #12
1f240     A0 A1 B0 FD | 	call	#__system___float_fromuns
1f244     FD 14 02 F6 | 	mov	arg02, result1
1f248     14 13 02 F6 | 	mov	arg01, local02
1f24c     01 16 06 F6 | 	mov	arg03, #1
1f250     C8 A9 B0 FD | 	call	#__system___float_cmp
1f254     00 FA 55 F2 | 	cmps	result1, #0 wc
1f258     00 26 26 C6 |  if_b	not	local01, #0
1f25c     A7 26 62 FC | 	wrlong	local01, fp
1f260     EC 02 90 FD | 	jmp	#LR__2463
1f264                 | LR__2453
1f264                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1f264     08 4E 05 F1 | 	add	fp, #8
1f268     A7 26 02 FB | 	rdlong	local01, fp
1f26c     08 4E 85 F1 | 	sub	fp, #8
1f270     1C 26 0E F2 | 	cmp	local01, #28 wz
1f274     14 4E 05 A1 |  if_e	add	fp, #20
1f278     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f27c     14 4E 85 A1 |  if_e	sub	fp, #20
1f280     16 2B 02 A6 |  if_e	mov	local03, local04
1f284     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f288     44 00 90 5D |  if_ne	jmp	#LR__2454
1f28c     00 26 06 F6 | 	mov	local01, #0
1f290     A7 12 02 FB | 	rdlong	arg01, fp
1f294     09 13 52 F6 | 	abs	arg01, arg01 wc
1f298     1F 2E C6 C9 |  if_b	decod	local05, #31
1f29c     00 2E 06 36 |  if_ae	mov	local05, #0
1f2a0     40 A1 B0 FD | 	call	#__system___float_fromuns
1f2a4     17 FB 61 F5 | 	xor	result1, local05
1f2a8     FD 12 02 F6 | 	mov	arg01, result1
1f2ac     0C 4E 05 F1 | 	add	fp, #12
1f2b0     A7 14 02 FB | 	rdlong	arg02, fp
1f2b4     0C 4E 85 F1 | 	sub	fp, #12
1f2b8     01 16 06 F6 | 	mov	arg03, #1
1f2bc     5C A9 B0 FD | 	call	#__system___float_cmp
1f2c0     00 FA 55 F2 | 	cmps	result1, #0 wc
1f2c4     00 26 26 C6 |  if_b	not	local01, #0
1f2c8     A7 26 62 FC | 	wrlong	local01, fp
1f2cc     80 02 90 FD | 	jmp	#LR__2463
1f2d0                 | LR__2454
1f2d0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1f2d0     08 4E 05 F1 | 	add	fp, #8
1f2d4     A7 26 02 FB | 	rdlong	local01, fp
1f2d8     08 4E 85 F1 | 	sub	fp, #8
1f2dc     1C 26 0E F2 | 	cmp	local01, #28 wz
1f2e0     14 4E 05 A1 |  if_e	add	fp, #20
1f2e4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f2e8     14 4E 85 A1 |  if_e	sub	fp, #20
1f2ec     16 2B 02 A6 |  if_e	mov	local03, local04
1f2f0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f2f4     20 00 90 5D |  if_ne	jmp	#LR__2455
1f2f8     A7 28 02 FB | 	rdlong	local02, fp
1f2fc     0C 4E 05 F1 | 	add	fp, #12
1f300     A7 2A 02 FB | 	rdlong	local03, fp
1f304     0C 4E 85 F1 | 	sub	fp, #12
1f308     15 29 52 F2 | 	cmps	local02, local03 wc
1f30c     13 27 A2 F1 | 	subx	local01, local01
1f310     A7 26 62 FC | 	wrlong	local01, fp
1f314     38 02 90 FD | 	jmp	#LR__2463
1f318                 | LR__2455
1f318                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1f318     08 4E 05 F1 | 	add	fp, #8
1f31c     A7 26 02 FB | 	rdlong	local01, fp
1f320     08 4E 85 F1 | 	sub	fp, #8
1f324     1C 26 0E F2 | 	cmp	local01, #28 wz
1f328     14 4E 05 A1 |  if_e	add	fp, #20
1f32c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f330     14 4E 85 A1 |  if_e	sub	fp, #20
1f334     16 2B 02 A6 |  if_e	mov	local03, local04
1f338     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f33c     20 00 90 5D |  if_ne	jmp	#LR__2456
1f340     A7 28 02 FB | 	rdlong	local02, fp
1f344     0C 4E 05 F1 | 	add	fp, #12
1f348     A7 2A 02 FB | 	rdlong	local03, fp
1f34c     0C 4E 85 F1 | 	sub	fp, #12
1f350     15 29 52 F2 | 	cmps	local02, local03 wc
1f354     13 27 A2 F1 | 	subx	local01, local01
1f358     A7 26 62 FC | 	wrlong	local01, fp
1f35c     F0 01 90 FD | 	jmp	#LR__2463
1f360                 | LR__2456
1f360                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1f360     08 4E 05 F1 | 	add	fp, #8
1f364     A7 26 02 FB | 	rdlong	local01, fp
1f368     08 4E 85 F1 | 	sub	fp, #8
1f36c     1D 26 0E F2 | 	cmp	local01, #29 wz
1f370     14 4E 05 A1 |  if_e	add	fp, #20
1f374     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f378     14 4E 85 A1 |  if_e	sub	fp, #20
1f37c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f380     34 00 90 5D |  if_ne	jmp	#LR__2457
1f384     00 26 06 F6 | 	mov	local01, #0
1f388     A7 12 02 FB | 	rdlong	arg01, fp
1f38c     54 A0 B0 FD | 	call	#__system___float_fromuns
1f390     FD 12 02 F6 | 	mov	arg01, result1
1f394     0C 4E 05 F1 | 	add	fp, #12
1f398     A7 14 02 FB | 	rdlong	arg02, fp
1f39c     0C 4E 85 F1 | 	sub	fp, #12
1f3a0     01 16 06 F6 | 	mov	arg03, #1
1f3a4     74 A8 B0 FD | 	call	#__system___float_cmp
1f3a8     00 FA 55 F2 | 	cmps	result1, #0 wc
1f3ac     00 26 26 C6 |  if_b	not	local01, #0
1f3b0     A7 26 62 FC | 	wrlong	local01, fp
1f3b4     98 01 90 FD | 	jmp	#LR__2463
1f3b8                 | LR__2457
1f3b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1f3b8     08 4E 05 F1 | 	add	fp, #8
1f3bc     A7 26 02 FB | 	rdlong	local01, fp
1f3c0     08 4E 85 F1 | 	sub	fp, #8
1f3c4     1D 26 0E F2 | 	cmp	local01, #29 wz
1f3c8     14 4E 05 A1 |  if_e	add	fp, #20
1f3cc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f3d0     14 4E 85 A1 |  if_e	sub	fp, #20
1f3d4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f3d8     20 00 90 5D |  if_ne	jmp	#LR__2458
1f3dc     A7 28 02 FB | 	rdlong	local02, fp
1f3e0     0C 4E 05 F1 | 	add	fp, #12
1f3e4     A7 2A 02 FB | 	rdlong	local03, fp
1f3e8     0C 4E 85 F1 | 	sub	fp, #12
1f3ec     15 29 52 F2 | 	cmps	local02, local03 wc
1f3f0     13 27 A2 F1 | 	subx	local01, local01
1f3f4     A7 26 62 FC | 	wrlong	local01, fp
1f3f8     54 01 90 FD | 	jmp	#LR__2463
1f3fc                 | LR__2458
1f3fc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1f3fc     08 4E 05 F1 | 	add	fp, #8
1f400     A7 26 02 FB | 	rdlong	local01, fp
1f404     08 4E 85 F1 | 	sub	fp, #8
1f408     1D 26 0E F2 | 	cmp	local01, #29 wz
1f40c     14 4E 05 A1 |  if_e	add	fp, #20
1f410     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f414     14 4E 85 A1 |  if_e	sub	fp, #20
1f418     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f41c     20 00 90 5D |  if_ne	jmp	#LR__2459
1f420     A7 28 02 FB | 	rdlong	local02, fp
1f424     0C 4E 05 F1 | 	add	fp, #12
1f428     A7 2A 02 FB | 	rdlong	local03, fp
1f42c     0C 4E 85 F1 | 	sub	fp, #12
1f430     15 29 12 F2 | 	cmp	local02, local03 wc
1f434     13 27 A2 F1 | 	subx	local01, local01
1f438     A7 26 62 FC | 	wrlong	local01, fp
1f43c     10 01 90 FD | 	jmp	#LR__2463
1f440                 | LR__2459
1f440                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1f440     08 4E 05 F1 | 	add	fp, #8
1f444     A7 26 02 FB | 	rdlong	local01, fp
1f448     08 4E 85 F1 | 	sub	fp, #8
1f44c     2B 26 0E F2 | 	cmp	local01, #43 wz
1f450     14 4E 05 A1 |  if_e	add	fp, #20
1f454     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f458     14 4E 85 A1 |  if_e	sub	fp, #20
1f45c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f460     30 00 90 5D |  if_ne	jmp	#LR__2460
1f464     00 26 06 F6 | 	mov	local01, #0
1f468     A7 12 02 FB | 	rdlong	arg01, fp
1f46c     E4 E2 BE FD | 	call	#_convertstring
1f470     FD 12 02 F6 | 	mov	arg01, result1
1f474     0C 4E 05 F1 | 	add	fp, #12
1f478     A7 14 02 FB | 	rdlong	arg02, fp
1f47c     0C 4E 85 F1 | 	sub	fp, #12
1f480     10 75 B0 FD | 	call	#__system___string_cmp
1f484     00 FA 55 F2 | 	cmps	result1, #0 wc
1f488     00 26 26 C6 |  if_b	not	local01, #0
1f48c     A7 26 62 FC | 	wrlong	local01, fp
1f490     BC 00 90 FD | 	jmp	#LR__2463
1f494                 | LR__2460
1f494                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1f494     08 4E 05 F1 | 	add	fp, #8
1f498     A7 26 02 FB | 	rdlong	local01, fp
1f49c     08 4E 85 F1 | 	sub	fp, #8
1f4a0     1F 26 0E F2 | 	cmp	local01, #31 wz
1f4a4     14 4E 05 A1 |  if_e	add	fp, #20
1f4a8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f4ac     14 4E 85 A1 |  if_e	sub	fp, #20
1f4b0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f4b4     34 00 90 5D |  if_ne	jmp	#LR__2461
1f4b8     00 26 06 F6 | 	mov	local01, #0
1f4bc     A7 28 02 FB | 	rdlong	local02, fp
1f4c0     0C 4E 05 F1 | 	add	fp, #12
1f4c4     A7 12 02 FB | 	rdlong	arg01, fp
1f4c8     0C 4E 85 F1 | 	sub	fp, #12
1f4cc     84 E2 BE FD | 	call	#_convertstring
1f4d0     FD 14 02 F6 | 	mov	arg02, result1
1f4d4     14 13 02 F6 | 	mov	arg01, local02
1f4d8     B8 74 B0 FD | 	call	#__system___string_cmp
1f4dc     00 FA 55 F2 | 	cmps	result1, #0 wc
1f4e0     00 26 26 C6 |  if_b	not	local01, #0
1f4e4     A7 26 62 FC | 	wrlong	local01, fp
1f4e8     64 00 90 FD | 	jmp	#LR__2463
1f4ec                 | LR__2461
1f4ec                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1f4ec     08 4E 05 F1 | 	add	fp, #8
1f4f0     A7 26 02 FB | 	rdlong	local01, fp
1f4f4     08 4E 85 F1 | 	sub	fp, #8
1f4f8     2B 26 0E F2 | 	cmp	local01, #43 wz
1f4fc     14 4E 05 A1 |  if_e	add	fp, #20
1f500     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f504     14 4E 85 A1 |  if_e	sub	fp, #20
1f508     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f50c     3C 00 90 5D |  if_ne	jmp	#LR__2462
1f510     00 26 06 F6 | 	mov	local01, #0
1f514     A7 12 02 FB | 	rdlong	arg01, fp
1f518     38 E2 BE FD | 	call	#_convertstring
1f51c     FD 28 02 F6 | 	mov	local02, result1
1f520     0C 4E 05 F1 | 	add	fp, #12
1f524     A7 12 02 FB | 	rdlong	arg01, fp
1f528     0C 4E 85 F1 | 	sub	fp, #12
1f52c     24 E2 BE FD | 	call	#_convertstring
1f530     FD 14 02 F6 | 	mov	arg02, result1
1f534     14 13 02 F6 | 	mov	arg01, local02
1f538     58 74 B0 FD | 	call	#__system___string_cmp
1f53c     00 FA 55 F2 | 	cmps	result1, #0 wc
1f540     00 26 26 C6 |  if_b	not	local01, #0
1f544     A7 26 62 FC | 	wrlong	local01, fp
1f548     04 00 90 FD | 	jmp	#LR__2463
1f54c                 | LR__2462
1f54c     A7 00 68 FC | 	wrlong	#0, fp
1f550                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f550                 | LR__2463
1f550     08 4E 05 F1 | 	add	fp, #8
1f554     A7 38 68 FC | 	wrlong	#28, fp
1f558     08 4E 85 F1 | 	sub	fp, #8
1f55c     A7 12 02 F6 | 	mov	arg01, fp
1f560     10 E1 BE FD | 	call	#_push
1f564     A7 F0 03 F6 | 	mov	ptra, fp
1f568     B2 00 A0 FD | 	call	#popregs_
1f56c                 | _do_lt_ret
1f56c     2D 00 64 FD | 	ret
1f570                 | 
1f570                 | ' 
1f570                 | ' '--------------------------------- minus (-)
1f570                 | ' 
1f570                 | ' sub do_minus
1f570                 | _do_minus
1f570     05 4A 05 F6 | 	mov	COUNT_, #5
1f574     A8 00 A0 FD | 	call	#pushregs_
1f578     18 F0 07 F1 | 	add	ptra, #24
1f57c     5C E0 BE FD | 	call	#_pop
1f580     FD 26 02 F6 | 	mov	local01, result1
1f584     FE 28 02 F6 | 	mov	local02, result2
1f588     FF 2A 02 F6 | 	mov	local03, result3
1f58c     0C 4E 05 F1 | 	add	fp, #12
1f590     A7 26 62 FC | 	wrlong	local01, fp
1f594     04 4E 05 F1 | 	add	fp, #4
1f598     A7 28 62 FC | 	wrlong	local02, fp
1f59c     04 4E 05 F1 | 	add	fp, #4
1f5a0     A7 2A 62 FC | 	wrlong	local03, fp
1f5a4     14 4E 85 F1 | 	sub	fp, #20
1f5a8     30 E0 BE FD | 	call	#_pop
1f5ac     FF 2A 02 F6 | 	mov	local03, result3
1f5b0     A7 FA 61 FC | 	wrlong	result1, fp
1f5b4     04 4E 05 F1 | 	add	fp, #4
1f5b8     A7 FC 61 FC | 	wrlong	result2, fp
1f5bc     04 4E 05 F1 | 	add	fp, #4
1f5c0     A7 2A 62 FC | 	wrlong	local03, fp
1f5c4                 | ' 
1f5c4                 | ' t2=pop()
1f5c4                 | ' t1=pop()
1f5c4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1f5c4     08 4E 85 F1 | 	sub	fp, #8
1f5c8     1D 2A 0E F2 | 	cmp	local03, #29 wz
1f5cc     14 4E 05 A1 |  if_e	add	fp, #20
1f5d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f5d4     14 4E 85 A1 |  if_e	sub	fp, #20
1f5d8     16 2B 02 A6 |  if_e	mov	local03, local04
1f5dc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f5e0     5C 00 90 5D |  if_ne	jmp	#LR__2471
1f5e4                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1f5e4     0C 4E 05 F1 | 	add	fp, #12
1f5e8     A7 26 02 FB | 	rdlong	local01, fp
1f5ec     0C 4E 85 F1 | 	sub	fp, #12
1f5f0     A7 2A 02 FB | 	rdlong	local03, fp
1f5f4     15 27 12 F2 | 	cmp	local01, local03 wc
1f5f8     1C 00 90 3D |  if_ae	jmp	#LR__2470
1f5fc     A7 26 02 FB | 	rdlong	local01, fp
1f600     0C 4E 05 F1 | 	add	fp, #12
1f604     A7 28 02 FB | 	rdlong	local02, fp
1f608     0C 4E 85 F1 | 	sub	fp, #12
1f60c     14 27 82 F1 | 	sub	local01, local02
1f610     A7 26 62 FC | 	wrlong	local01, fp
1f614     F4 02 90 FD | 	jmp	#LR__2480
1f618                 | LR__2470
1f618     A7 26 02 FB | 	rdlong	local01, fp
1f61c     0C 4E 05 F1 | 	add	fp, #12
1f620     A7 28 02 FB | 	rdlong	local02, fp
1f624     0C 4E 85 F1 | 	sub	fp, #12
1f628     14 27 82 F1 | 	sub	local01, local02
1f62c     A7 26 62 FC | 	wrlong	local01, fp
1f630     08 4E 05 F1 | 	add	fp, #8
1f634     A7 38 68 FC | 	wrlong	#28, fp
1f638     08 4E 85 F1 | 	sub	fp, #8
1f63c     CC 02 90 FD | 	jmp	#LR__2480
1f640                 | LR__2471
1f640                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1f640     08 4E 05 F1 | 	add	fp, #8
1f644     A7 26 02 FB | 	rdlong	local01, fp
1f648     08 4E 85 F1 | 	sub	fp, #8
1f64c     1D 26 0E F2 | 	cmp	local01, #29 wz
1f650     14 4E 05 A1 |  if_e	add	fp, #20
1f654     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f658     14 4E 85 A1 |  if_e	sub	fp, #20
1f65c     16 2B 02 A6 |  if_e	mov	local03, local04
1f660     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f664     28 00 90 5D |  if_ne	jmp	#LR__2472
1f668     A7 26 02 FB | 	rdlong	local01, fp
1f66c     0C 4E 05 F1 | 	add	fp, #12
1f670     A7 28 02 FB | 	rdlong	local02, fp
1f674     0C 4E 85 F1 | 	sub	fp, #12
1f678     14 27 82 F1 | 	sub	local01, local02
1f67c     A7 26 62 FC | 	wrlong	local01, fp
1f680     08 4E 05 F1 | 	add	fp, #8
1f684     A7 38 68 FC | 	wrlong	#28, fp
1f688     08 4E 85 F1 | 	sub	fp, #8
1f68c     7C 02 90 FD | 	jmp	#LR__2480
1f690                 | LR__2472
1f690                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1f690     08 4E 05 F1 | 	add	fp, #8
1f694     A7 26 02 FB | 	rdlong	local01, fp
1f698     08 4E 85 F1 | 	sub	fp, #8
1f69c     1D 26 0E F2 | 	cmp	local01, #29 wz
1f6a0     14 4E 05 A1 |  if_e	add	fp, #20
1f6a4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f6a8     14 4E 85 A1 |  if_e	sub	fp, #20
1f6ac     16 2B 02 A6 |  if_e	mov	local03, local04
1f6b0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f6b4     34 00 90 5D |  if_ne	jmp	#LR__2473
1f6b8     A7 12 02 FB | 	rdlong	arg01, fp
1f6bc     24 9D B0 FD | 	call	#__system___float_fromuns
1f6c0     FD 12 02 F6 | 	mov	arg01, result1
1f6c4     0C 4E 05 F1 | 	add	fp, #12
1f6c8     A7 14 02 FB | 	rdlong	arg02, fp
1f6cc     0C 4E 85 F1 | 	sub	fp, #12
1f6d0     1F 14 E6 F4 | 	bitnot	arg02, #31
1f6d4     40 9D B0 FD | 	call	#__system___float_add
1f6d8     A7 FA 61 FC | 	wrlong	result1, fp
1f6dc     08 4E 05 F1 | 	add	fp, #8
1f6e0     A7 3C 68 FC | 	wrlong	#30, fp
1f6e4     08 4E 85 F1 | 	sub	fp, #8
1f6e8     20 02 90 FD | 	jmp	#LR__2480
1f6ec                 | LR__2473
1f6ec                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1f6ec     08 4E 05 F1 | 	add	fp, #8
1f6f0     A7 26 02 FB | 	rdlong	local01, fp
1f6f4     08 4E 85 F1 | 	sub	fp, #8
1f6f8     1C 26 0E F2 | 	cmp	local01, #28 wz
1f6fc     14 4E 05 A1 |  if_e	add	fp, #20
1f700     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f704     14 4E 85 A1 |  if_e	sub	fp, #20
1f708     16 2B 02 A6 |  if_e	mov	local03, local04
1f70c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f710     1C 00 90 5D |  if_ne	jmp	#LR__2474
1f714     A7 26 02 FB | 	rdlong	local01, fp
1f718     0C 4E 05 F1 | 	add	fp, #12
1f71c     A7 28 02 FB | 	rdlong	local02, fp
1f720     0C 4E 85 F1 | 	sub	fp, #12
1f724     14 27 82 F1 | 	sub	local01, local02
1f728     A7 26 62 FC | 	wrlong	local01, fp
1f72c     DC 01 90 FD | 	jmp	#LR__2480
1f730                 | LR__2474
1f730                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1f730     08 4E 05 F1 | 	add	fp, #8
1f734     A7 26 02 FB | 	rdlong	local01, fp
1f738     08 4E 85 F1 | 	sub	fp, #8
1f73c     1C 26 0E F2 | 	cmp	local01, #28 wz
1f740     14 4E 05 A1 |  if_e	add	fp, #20
1f744     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f748     14 4E 85 A1 |  if_e	sub	fp, #20
1f74c     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1f750     1C 00 90 5D |  if_ne	jmp	#LR__2475
1f754     A7 26 02 FB | 	rdlong	local01, fp
1f758     0C 4E 05 F1 | 	add	fp, #12
1f75c     A7 28 02 FB | 	rdlong	local02, fp
1f760     0C 4E 85 F1 | 	sub	fp, #12
1f764     14 27 82 F1 | 	sub	local01, local02
1f768     A7 26 62 FC | 	wrlong	local01, fp
1f76c     9C 01 90 FD | 	jmp	#LR__2480
1f770                 | LR__2475
1f770                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1f770     08 4E 05 F1 | 	add	fp, #8
1f774     A7 26 02 FB | 	rdlong	local01, fp
1f778     08 4E 85 F1 | 	sub	fp, #8
1f77c     1C 26 0E F2 | 	cmp	local01, #28 wz
1f780     14 4E 05 A1 |  if_e	add	fp, #20
1f784     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f788     14 4E 85 A1 |  if_e	sub	fp, #20
1f78c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f790     44 00 90 5D |  if_ne	jmp	#LR__2476
1f794     A7 12 02 FB | 	rdlong	arg01, fp
1f798     09 13 52 F6 | 	abs	arg01, arg01 wc
1f79c     1F 2E C6 C9 |  if_b	decod	local05, #31
1f7a0     00 2E 06 36 |  if_ae	mov	local05, #0
1f7a4     3C 9C B0 FD | 	call	#__system___float_fromuns
1f7a8     17 FB 61 F5 | 	xor	result1, local05
1f7ac     FD 12 02 F6 | 	mov	arg01, result1
1f7b0     0C 4E 05 F1 | 	add	fp, #12
1f7b4     A7 14 02 FB | 	rdlong	arg02, fp
1f7b8     0C 4E 85 F1 | 	sub	fp, #12
1f7bc     1F 14 E6 F4 | 	bitnot	arg02, #31
1f7c0     54 9C B0 FD | 	call	#__system___float_add
1f7c4     A7 FA 61 FC | 	wrlong	result1, fp
1f7c8     08 4E 05 F1 | 	add	fp, #8
1f7cc     A7 3C 68 FC | 	wrlong	#30, fp
1f7d0     08 4E 85 F1 | 	sub	fp, #8
1f7d4     34 01 90 FD | 	jmp	#LR__2480
1f7d8                 | LR__2476
1f7d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1f7d8     08 4E 05 F1 | 	add	fp, #8
1f7dc     A7 26 02 FB | 	rdlong	local01, fp
1f7e0     08 4E 85 F1 | 	sub	fp, #8
1f7e4     1E 26 0E F2 | 	cmp	local01, #30 wz
1f7e8     14 4E 05 A1 |  if_e	add	fp, #20
1f7ec     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f7f0     14 4E 85 A1 |  if_e	sub	fp, #20
1f7f4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f7f8     2C 00 90 5D |  if_ne	jmp	#LR__2477
1f7fc     A7 26 02 FB | 	rdlong	local01, fp
1f800     0C 4E 05 F1 | 	add	fp, #12
1f804     A7 12 02 FB | 	rdlong	arg01, fp
1f808     0C 4E 85 F1 | 	sub	fp, #12
1f80c     D4 9B B0 FD | 	call	#__system___float_fromuns
1f810     FD 14 02 F6 | 	mov	arg02, result1
1f814     13 13 02 F6 | 	mov	arg01, local01
1f818     1F 14 E6 F4 | 	bitnot	arg02, #31
1f81c     F8 9B B0 FD | 	call	#__system___float_add
1f820     A7 FA 61 FC | 	wrlong	result1, fp
1f824     E4 00 90 FD | 	jmp	#LR__2480
1f828                 | LR__2477
1f828                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1f828     08 4E 05 F1 | 	add	fp, #8
1f82c     A7 26 02 FB | 	rdlong	local01, fp
1f830     08 4E 85 F1 | 	sub	fp, #8
1f834     1E 26 0E F2 | 	cmp	local01, #30 wz
1f838     14 4E 05 A1 |  if_e	add	fp, #20
1f83c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f840     14 4E 85 A1 |  if_e	sub	fp, #20
1f844     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f848     3C 00 90 5D |  if_ne	jmp	#LR__2478
1f84c     A7 26 02 FB | 	rdlong	local01, fp
1f850     0C 4E 05 F1 | 	add	fp, #12
1f854     A7 12 02 FB | 	rdlong	arg01, fp
1f858     0C 4E 85 F1 | 	sub	fp, #12
1f85c     09 13 52 F6 | 	abs	arg01, arg01 wc
1f860     1F 2E C6 C9 |  if_b	decod	local05, #31
1f864     00 2E 06 36 |  if_ae	mov	local05, #0
1f868     78 9B B0 FD | 	call	#__system___float_fromuns
1f86c     17 FB 61 F5 | 	xor	result1, local05
1f870     FD 14 02 F6 | 	mov	arg02, result1
1f874     13 13 02 F6 | 	mov	arg01, local01
1f878     1F 14 E6 F4 | 	bitnot	arg02, #31
1f87c     98 9B B0 FD | 	call	#__system___float_add
1f880     A7 FA 61 FC | 	wrlong	result1, fp
1f884     84 00 90 FD | 	jmp	#LR__2480
1f888                 | LR__2478
1f888                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1f888     08 4E 05 F1 | 	add	fp, #8
1f88c     A7 26 02 FB | 	rdlong	local01, fp
1f890     08 4E 85 F1 | 	sub	fp, #8
1f894     1E 26 0E F2 | 	cmp	local01, #30 wz
1f898     14 4E 05 A1 |  if_e	add	fp, #20
1f89c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f8a0     14 4E 85 A1 |  if_e	sub	fp, #20
1f8a4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f8a8     20 00 90 5D |  if_ne	jmp	#LR__2479
1f8ac     A7 12 02 FB | 	rdlong	arg01, fp
1f8b0     0C 4E 05 F1 | 	add	fp, #12
1f8b4     A7 14 02 FB | 	rdlong	arg02, fp
1f8b8     0C 4E 85 F1 | 	sub	fp, #12
1f8bc     1F 14 E6 F4 | 	bitnot	arg02, #31
1f8c0     54 9B B0 FD | 	call	#__system___float_add
1f8c4     A7 FA 61 FC | 	wrlong	result1, fp
1f8c8     40 00 90 FD | 	jmp	#LR__2480
1f8cc                 | LR__2479
1f8cc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1f8cc     08 4E 05 F1 | 	add	fp, #8
1f8d0     A7 26 02 FB | 	rdlong	local01, fp
1f8d4     08 4E 85 F1 | 	sub	fp, #8
1f8d8     1F 26 0E F2 | 	cmp	local01, #31 wz
1f8dc     14 4E 05 51 |  if_ne	add	fp, #20
1f8e0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1f8e4     14 4E 85 51 |  if_ne	sub	fp, #20
1f8e8     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1f8ec     A7 06 68 AC |  if_e	wrlong	#3, fp
1f8f0     08 4E 05 A1 |  if_e	add	fp, #8
1f8f4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f8f8     08 4E 85 A1 |  if_e	sub	fp, #8
1f8fc     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1f900     08 4E 05 51 |  if_ne	add	fp, #8
1f904     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1f908     08 4E 85 51 |  if_ne	sub	fp, #8
1f90c                 | LR__2480
1f90c     A7 12 02 F6 | 	mov	arg01, fp
1f910     60 DD BE FD | 	call	#_push
1f914     A7 F0 03 F6 | 	mov	ptra, fp
1f918     B2 00 A0 FD | 	call	#popregs_
1f91c                 | _do_minus_ret
1f91c     2D 00 64 FD | 	ret
1f920                 | 
1f920                 | ' 
1f920                 | ' '--------------------------------- negative (-), one argument negative
1f920                 | ' 
1f920                 | ' sub do_negative
1f920                 | _do_negative
1f920     02 4A 05 F6 | 	mov	COUNT_, #2
1f924     A8 00 A0 FD | 	call	#pushregs_
1f928     0C F0 07 F1 | 	add	ptra, #12
1f92c     AC DC BE FD | 	call	#_pop
1f930     FF 26 02 F6 | 	mov	local01, result3
1f934     A7 FA 61 FC | 	wrlong	result1, fp
1f938     04 4E 05 F1 | 	add	fp, #4
1f93c     A7 FC 61 FC | 	wrlong	result2, fp
1f940     04 4E 05 F1 | 	add	fp, #4
1f944     A7 26 62 FC | 	wrlong	local01, fp
1f948                 | ' 
1f948                 | ' t1=pop()
1f948                 | ' if t1.result_type=result_int then 
1f948     08 4E 85 F1 | 	sub	fp, #8
1f94c     1C 26 0E F2 | 	cmp	local01, #28 wz
1f950     A7 28 02 AB |  if_e	rdlong	local02, fp
1f954     14 27 62 A6 |  if_e	neg	local01, local02
1f958     A7 26 62 AC |  if_e	wrlong	local01, fp
1f95c     5C 00 90 AD |  if_e	jmp	#LR__2492
1f960     08 4E 05 F1 | 	add	fp, #8
1f964     A7 26 02 FB | 	rdlong	local01, fp
1f968     08 4E 85 F1 | 	sub	fp, #8
1f96c     1D 26 0E F2 | 	cmp	local01, #29 wz
1f970     1C 00 90 5D |  if_ne	jmp	#LR__2490
1f974     A7 28 02 FB | 	rdlong	local02, fp
1f978     14 27 62 F6 | 	neg	local01, local02
1f97c     A7 26 62 FC | 	wrlong	local01, fp
1f980     08 4E 05 F1 | 	add	fp, #8
1f984     A7 38 68 FC | 	wrlong	#28, fp
1f988     08 4E 85 F1 | 	sub	fp, #8
1f98c     2C 00 90 FD | 	jmp	#LR__2491
1f990                 | LR__2490
1f990     08 4E 05 F1 | 	add	fp, #8
1f994     A7 26 02 FB | 	rdlong	local01, fp
1f998     08 4E 85 F1 | 	sub	fp, #8
1f99c     1E 26 0E F2 | 	cmp	local01, #30 wz
1f9a0     A7 FA 01 AB |  if_e	rdlong	result1, fp
1f9a4     1F FA E5 A4 |  if_e	bitnot	result1, #31
1f9a8     A7 FA 61 AC |  if_e	wrlong	result1, fp
1f9ac     08 4E 05 51 |  if_ne	add	fp, #8
1f9b0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1f9b4     08 4E 85 51 |  if_ne	sub	fp, #8
1f9b8     A7 50 68 5C |  if_ne	wrlong	#40, fp
1f9bc                 | LR__2491
1f9bc                 | LR__2492
1f9bc     A7 12 02 F6 | 	mov	arg01, fp
1f9c0     B0 DC BE FD | 	call	#_push
1f9c4     A7 F0 03 F6 | 	mov	ptra, fp
1f9c8     B2 00 A0 FD | 	call	#popregs_
1f9cc                 | _do_negative_ret
1f9cc     2D 00 64 FD | 	ret
1f9d0                 | 
1f9d0                 | ' 
1f9d0                 | ' '--------------------------------- MOD (modulo)
1f9d0                 | ' 
1f9d0                 | ' sub do_mod 
1f9d0                 | _do_mod
1f9d0     01 4A 05 F6 | 	mov	COUNT_, #1
1f9d4     A8 00 A0 FD | 	call	#pushregs_
1f9d8     18 F0 07 F1 | 	add	ptra, #24
1f9dc     FC DB BE FD | 	call	#_pop
1f9e0     FD 92 02 F6 | 	mov	muldivb_, result1
1f9e4     FE 90 02 F6 | 	mov	muldiva_, result2
1f9e8     FF 26 02 F6 | 	mov	local01, result3
1f9ec     0C 4E 05 F1 | 	add	fp, #12
1f9f0     A7 92 62 FC | 	wrlong	muldivb_, fp
1f9f4     04 4E 05 F1 | 	add	fp, #4
1f9f8     A7 90 62 FC | 	wrlong	muldiva_, fp
1f9fc     04 4E 05 F1 | 	add	fp, #4
1fa00     A7 26 62 FC | 	wrlong	local01, fp
1fa04     14 4E 85 F1 | 	sub	fp, #20
1fa08     D0 DB BE FD | 	call	#_pop
1fa0c     A7 FA 61 FC | 	wrlong	result1, fp
1fa10     04 4E 05 F1 | 	add	fp, #4
1fa14     A7 FC 61 FC | 	wrlong	result2, fp
1fa18     04 4E 05 F1 | 	add	fp, #4
1fa1c     A7 FE 61 FC | 	wrlong	result3, fp
1fa20                 | ' 
1fa20                 | ' t2=pop()
1fa20                 | ' t1=pop()
1fa20                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1fa20     08 4E 85 F1 | 	sub	fp, #8
1fa24     1F FE 0D F2 | 	cmp	result3, #31 wz
1fa28     14 4E 05 51 |  if_ne	add	fp, #20
1fa2c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1fa30     14 4E 85 51 |  if_ne	sub	fp, #20
1fa34     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1fa38     A7 14 68 AC |  if_e	wrlong	#10, fp
1fa3c     08 4E 05 A1 |  if_e	add	fp, #8
1fa40     A7 FE 69 AC |  if_e	wrlong	#255, fp
1fa44     08 4E 85 A1 |  if_e	sub	fp, #8
1fa48     90 01 90 AD |  if_e	jmp	#LR__2506
1fa4c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1fa4c     08 4E 05 F1 | 	add	fp, #8
1fa50     A7 92 02 FB | 	rdlong	muldivb_, fp
1fa54     08 4E 85 F1 | 	sub	fp, #8
1fa58     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1fa5c     1C 00 90 5D |  if_ne	jmp	#LR__2500
1fa60     08 4E 05 F1 | 	add	fp, #8
1fa64     A7 38 68 FC | 	wrlong	#28, fp
1fa68     08 4E 85 F1 | 	sub	fp, #8
1fa6c     A7 12 02 FB | 	rdlong	arg01, fp
1fa70     00 14 06 F6 | 	mov	arg02, #0
1fa74     38 A2 B0 FD | 	call	#__system___float_tointeger
1fa78     A7 FA 61 FC | 	wrlong	result1, fp
1fa7c                 | LR__2500
1fa7c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1fa7c     14 4E 05 F1 | 	add	fp, #20
1fa80     A7 92 02 FB | 	rdlong	muldivb_, fp
1fa84     14 4E 85 F1 | 	sub	fp, #20
1fa88     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1fa8c     28 00 90 5D |  if_ne	jmp	#LR__2501
1fa90     14 4E 05 F1 | 	add	fp, #20
1fa94     A7 38 68 FC | 	wrlong	#28, fp
1fa98     08 4E 85 F1 | 	sub	fp, #8
1fa9c     A7 12 02 FB | 	rdlong	arg01, fp
1faa0     0C 4E 85 F1 | 	sub	fp, #12
1faa4     00 14 06 F6 | 	mov	arg02, #0
1faa8     04 A2 B0 FD | 	call	#__system___float_tointeger
1faac     0C 4E 05 F1 | 	add	fp, #12
1fab0     A7 FA 61 FC | 	wrlong	result1, fp
1fab4     0C 4E 85 F1 | 	sub	fp, #12
1fab8                 | LR__2501
1fab8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1fab8     08 4E 05 F1 | 	add	fp, #8
1fabc     A7 92 02 FB | 	rdlong	muldivb_, fp
1fac0     08 4E 85 F1 | 	sub	fp, #8
1fac4     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1fac8     14 4E 05 A1 |  if_e	add	fp, #20
1facc     A7 26 02 AB |  if_e	rdlong	local01, fp
1fad0     14 4E 85 A1 |  if_e	sub	fp, #20
1fad4     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1fad8     20 00 90 5D |  if_ne	jmp	#LR__2502
1fadc     0C 4E 05 F1 | 	add	fp, #12
1fae0     A7 26 02 FB | 	rdlong	local01, fp
1fae4     0C 4E 85 F1 | 	sub	fp, #12
1fae8     A7 92 02 FB | 	rdlong	muldivb_, fp
1faec     13 93 12 FD | 	qdiv	muldivb_, local01
1faf0     19 26 62 FD | 	getqy	local01
1faf4     A7 26 62 FC | 	wrlong	local01, fp
1faf8     E0 00 90 FD | 	jmp	#LR__2506
1fafc                 | LR__2502
1fafc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1fafc     08 4E 05 F1 | 	add	fp, #8
1fb00     A7 92 02 FB | 	rdlong	muldivb_, fp
1fb04     08 4E 85 F1 | 	sub	fp, #8
1fb08     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1fb0c     14 4E 05 A1 |  if_e	add	fp, #20
1fb10     A7 26 02 AB |  if_e	rdlong	local01, fp
1fb14     14 4E 85 A1 |  if_e	sub	fp, #20
1fb18     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1fb1c     2C 00 90 5D |  if_ne	jmp	#LR__2503
1fb20     0C 4E 05 F1 | 	add	fp, #12
1fb24     A7 26 02 FB | 	rdlong	local01, fp
1fb28     0C 4E 85 F1 | 	sub	fp, #12
1fb2c     A7 92 02 FB | 	rdlong	muldivb_, fp
1fb30     13 93 12 FD | 	qdiv	muldivb_, local01
1fb34     19 26 62 FD | 	getqy	local01
1fb38     A7 26 62 FC | 	wrlong	local01, fp
1fb3c     08 4E 05 F1 | 	add	fp, #8
1fb40     A7 38 68 FC | 	wrlong	#28, fp
1fb44     08 4E 85 F1 | 	sub	fp, #8
1fb48     90 00 90 FD | 	jmp	#LR__2506
1fb4c                 | LR__2503
1fb4c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1fb4c     08 4E 05 F1 | 	add	fp, #8
1fb50     A7 92 02 FB | 	rdlong	muldivb_, fp
1fb54     08 4E 85 F1 | 	sub	fp, #8
1fb58     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1fb5c     14 4E 05 A1 |  if_e	add	fp, #20
1fb60     A7 26 02 AB |  if_e	rdlong	local01, fp
1fb64     14 4E 85 A1 |  if_e	sub	fp, #20
1fb68     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1fb6c     1C 00 90 5D |  if_ne	jmp	#LR__2504
1fb70     A7 90 02 FB | 	rdlong	muldiva_, fp
1fb74     0C 4E 05 F1 | 	add	fp, #12
1fb78     A7 92 02 FB | 	rdlong	muldivb_, fp
1fb7c     0C 4E 85 F1 | 	sub	fp, #12
1fb80     BA 00 A0 FD | 	call	#divide_
1fb84     A7 90 62 FC | 	wrlong	muldiva_, fp
1fb88     50 00 90 FD | 	jmp	#LR__2506
1fb8c                 | LR__2504
1fb8c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1fb8c     08 4E 05 F1 | 	add	fp, #8
1fb90     A7 92 02 FB | 	rdlong	muldivb_, fp
1fb94     08 4E 85 F1 | 	sub	fp, #8
1fb98     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1fb9c     14 4E 05 A1 |  if_e	add	fp, #20
1fba0     A7 26 02 AB |  if_e	rdlong	local01, fp
1fba4     14 4E 85 A1 |  if_e	sub	fp, #20
1fba8     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1fbac     1C 00 90 5D |  if_ne	jmp	#LR__2505
1fbb0     A7 90 02 FB | 	rdlong	muldiva_, fp
1fbb4     0C 4E 05 F1 | 	add	fp, #12
1fbb8     A7 92 02 FB | 	rdlong	muldivb_, fp
1fbbc     0C 4E 85 F1 | 	sub	fp, #12
1fbc0     BA 00 A0 FD | 	call	#divide_
1fbc4     A7 90 62 FC | 	wrlong	muldiva_, fp
1fbc8     10 00 90 FD | 	jmp	#LR__2506
1fbcc                 | LR__2505
1fbcc     A7 16 68 FC | 	wrlong	#11, fp
1fbd0     08 4E 05 F1 | 	add	fp, #8
1fbd4     A7 FE 69 FC | 	wrlong	#255, fp
1fbd8     08 4E 85 F1 | 	sub	fp, #8
1fbdc                 | LR__2506
1fbdc     A7 12 02 F6 | 	mov	arg01, fp
1fbe0     90 DA BE FD | 	call	#_push
1fbe4     A7 F0 03 F6 | 	mov	ptra, fp
1fbe8     B2 00 A0 FD | 	call	#popregs_
1fbec                 | _do_mod_ret
1fbec     2D 00 64 FD | 	ret
1fbf0                 | 
1fbf0                 | ' 
1fbf0                 | ' '--------------------------------- mul (*)
1fbf0                 | ' 
1fbf0                 | ' sub do_mul
1fbf0                 | _do_mul
1fbf0     05 4A 05 F6 | 	mov	COUNT_, #5
1fbf4     A8 00 A0 FD | 	call	#pushregs_
1fbf8     18 F0 07 F1 | 	add	ptra, #24
1fbfc     DC D9 BE FD | 	call	#_pop
1fc00     FD 26 02 F6 | 	mov	local01, result1
1fc04     FE 28 02 F6 | 	mov	local02, result2
1fc08     FF 2A 02 F6 | 	mov	local03, result3
1fc0c     0C 4E 05 F1 | 	add	fp, #12
1fc10     A7 26 62 FC | 	wrlong	local01, fp
1fc14     04 4E 05 F1 | 	add	fp, #4
1fc18     A7 28 62 FC | 	wrlong	local02, fp
1fc1c     04 4E 05 F1 | 	add	fp, #4
1fc20     A7 2A 62 FC | 	wrlong	local03, fp
1fc24     14 4E 85 F1 | 	sub	fp, #20
1fc28     B0 D9 BE FD | 	call	#_pop
1fc2c     FF 2A 02 F6 | 	mov	local03, result3
1fc30     A7 FA 61 FC | 	wrlong	result1, fp
1fc34     04 4E 05 F1 | 	add	fp, #4
1fc38     A7 FC 61 FC | 	wrlong	result2, fp
1fc3c     04 4E 05 F1 | 	add	fp, #4
1fc40     A7 2A 62 FC | 	wrlong	local03, fp
1fc44                 | ' 
1fc44                 | ' t2=pop()
1fc44                 | ' t1=pop()
1fc44                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1fc44     08 4E 85 F1 | 	sub	fp, #8
1fc48     1D 2A 0E F2 | 	cmp	local03, #29 wz
1fc4c     14 4E 05 A1 |  if_e	add	fp, #20
1fc50     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fc54     14 4E 85 A1 |  if_e	sub	fp, #20
1fc58     16 2B 02 A6 |  if_e	mov	local03, local04
1fc5c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fc60     20 00 90 5D |  if_ne	jmp	#LR__2510
1fc64     A7 28 02 FB | 	rdlong	local02, fp
1fc68     0C 4E 05 F1 | 	add	fp, #12
1fc6c     A7 2A 02 FB | 	rdlong	local03, fp
1fc70     15 29 02 FD | 	qmul	local02, local03
1fc74     0C 4E 85 F1 | 	sub	fp, #12
1fc78     18 26 62 FD | 	getqx	local01
1fc7c     A7 26 62 FC | 	wrlong	local01, fp
1fc80     C4 02 90 FD | 	jmp	#LR__2519
1fc84                 | LR__2510
1fc84                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1fc84     08 4E 05 F1 | 	add	fp, #8
1fc88     A7 26 02 FB | 	rdlong	local01, fp
1fc8c     08 4E 85 F1 | 	sub	fp, #8
1fc90     1D 26 0E F2 | 	cmp	local01, #29 wz
1fc94     14 4E 05 A1 |  if_e	add	fp, #20
1fc98     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fc9c     14 4E 85 A1 |  if_e	sub	fp, #20
1fca0     16 2B 02 A6 |  if_e	mov	local03, local04
1fca4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fca8     2C 00 90 5D |  if_ne	jmp	#LR__2511
1fcac     A7 28 02 FB | 	rdlong	local02, fp
1fcb0     0C 4E 05 F1 | 	add	fp, #12
1fcb4     A7 2A 02 FB | 	rdlong	local03, fp
1fcb8     15 29 02 FD | 	qmul	local02, local03
1fcbc     0C 4E 85 F1 | 	sub	fp, #12
1fcc0     18 26 62 FD | 	getqx	local01
1fcc4     A7 26 62 FC | 	wrlong	local01, fp
1fcc8     08 4E 05 F1 | 	add	fp, #8
1fccc     A7 38 68 FC | 	wrlong	#28, fp
1fcd0     08 4E 85 F1 | 	sub	fp, #8
1fcd4     70 02 90 FD | 	jmp	#LR__2519
1fcd8                 | LR__2511
1fcd8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1fcd8     08 4E 05 F1 | 	add	fp, #8
1fcdc     A7 26 02 FB | 	rdlong	local01, fp
1fce0     08 4E 85 F1 | 	sub	fp, #8
1fce4     1D 26 0E F2 | 	cmp	local01, #29 wz
1fce8     14 4E 05 A1 |  if_e	add	fp, #20
1fcec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fcf0     14 4E 85 A1 |  if_e	sub	fp, #20
1fcf4     16 2B 02 A6 |  if_e	mov	local03, local04
1fcf8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fcfc     30 00 90 5D |  if_ne	jmp	#LR__2512
1fd00     A7 12 02 FB | 	rdlong	arg01, fp
1fd04     DC 96 B0 FD | 	call	#__system___float_fromuns
1fd08     FD 12 02 F6 | 	mov	arg01, result1
1fd0c     0C 4E 05 F1 | 	add	fp, #12
1fd10     A7 14 02 FB | 	rdlong	arg02, fp
1fd14     0C 4E 85 F1 | 	sub	fp, #12
1fd18     CC 9A B0 FD | 	call	#__system___float_mul
1fd1c     A7 FA 61 FC | 	wrlong	result1, fp
1fd20     08 4E 05 F1 | 	add	fp, #8
1fd24     A7 3C 68 FC | 	wrlong	#30, fp
1fd28     08 4E 85 F1 | 	sub	fp, #8
1fd2c     18 02 90 FD | 	jmp	#LR__2519
1fd30                 | LR__2512
1fd30                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1fd30     08 4E 05 F1 | 	add	fp, #8
1fd34     A7 26 02 FB | 	rdlong	local01, fp
1fd38     08 4E 85 F1 | 	sub	fp, #8
1fd3c     1C 26 0E F2 | 	cmp	local01, #28 wz
1fd40     14 4E 05 A1 |  if_e	add	fp, #20
1fd44     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fd48     14 4E 85 A1 |  if_e	sub	fp, #20
1fd4c     16 2B 02 A6 |  if_e	mov	local03, local04
1fd50     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fd54     20 00 90 5D |  if_ne	jmp	#LR__2513
1fd58     A7 28 02 FB | 	rdlong	local02, fp
1fd5c     0C 4E 05 F1 | 	add	fp, #12
1fd60     A7 2A 02 FB | 	rdlong	local03, fp
1fd64     15 29 02 FD | 	qmul	local02, local03
1fd68     0C 4E 85 F1 | 	sub	fp, #12
1fd6c     18 26 62 FD | 	getqx	local01
1fd70     A7 26 62 FC | 	wrlong	local01, fp
1fd74     D0 01 90 FD | 	jmp	#LR__2519
1fd78                 | LR__2513
1fd78                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1fd78     08 4E 05 F1 | 	add	fp, #8
1fd7c     A7 26 02 FB | 	rdlong	local01, fp
1fd80     08 4E 85 F1 | 	sub	fp, #8
1fd84     1C 26 0E F2 | 	cmp	local01, #28 wz
1fd88     14 4E 05 A1 |  if_e	add	fp, #20
1fd8c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fd90     14 4E 85 A1 |  if_e	sub	fp, #20
1fd94     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1fd98     20 00 90 5D |  if_ne	jmp	#LR__2514
1fd9c     A7 28 02 FB | 	rdlong	local02, fp
1fda0     0C 4E 05 F1 | 	add	fp, #12
1fda4     A7 2A 02 FB | 	rdlong	local03, fp
1fda8     15 29 02 FD | 	qmul	local02, local03
1fdac     0C 4E 85 F1 | 	sub	fp, #12
1fdb0     18 26 62 FD | 	getqx	local01
1fdb4     A7 26 62 FC | 	wrlong	local01, fp
1fdb8     8C 01 90 FD | 	jmp	#LR__2519
1fdbc                 | LR__2514
1fdbc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1fdbc     08 4E 05 F1 | 	add	fp, #8
1fdc0     A7 26 02 FB | 	rdlong	local01, fp
1fdc4     08 4E 85 F1 | 	sub	fp, #8
1fdc8     1C 26 0E F2 | 	cmp	local01, #28 wz
1fdcc     14 4E 05 A1 |  if_e	add	fp, #20
1fdd0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fdd4     14 4E 85 A1 |  if_e	sub	fp, #20
1fdd8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fddc     40 00 90 5D |  if_ne	jmp	#LR__2515
1fde0     A7 12 02 FB | 	rdlong	arg01, fp
1fde4     09 13 52 F6 | 	abs	arg01, arg01 wc
1fde8     1F 2E C6 C9 |  if_b	decod	local05, #31
1fdec     00 2E 06 36 |  if_ae	mov	local05, #0
1fdf0     F0 95 B0 FD | 	call	#__system___float_fromuns
1fdf4     17 FB 61 F5 | 	xor	result1, local05
1fdf8     FD 12 02 F6 | 	mov	arg01, result1
1fdfc     0C 4E 05 F1 | 	add	fp, #12
1fe00     A7 14 02 FB | 	rdlong	arg02, fp
1fe04     0C 4E 85 F1 | 	sub	fp, #12
1fe08     DC 99 B0 FD | 	call	#__system___float_mul
1fe0c     A7 FA 61 FC | 	wrlong	result1, fp
1fe10     08 4E 05 F1 | 	add	fp, #8
1fe14     A7 3C 68 FC | 	wrlong	#30, fp
1fe18     08 4E 85 F1 | 	sub	fp, #8
1fe1c     28 01 90 FD | 	jmp	#LR__2519
1fe20                 | LR__2515
1fe20                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1fe20     08 4E 05 F1 | 	add	fp, #8
1fe24     A7 26 02 FB | 	rdlong	local01, fp
1fe28     08 4E 85 F1 | 	sub	fp, #8
1fe2c     1E 26 0E F2 | 	cmp	local01, #30 wz
1fe30     14 4E 05 A1 |  if_e	add	fp, #20
1fe34     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fe38     14 4E 85 A1 |  if_e	sub	fp, #20
1fe3c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fe40     28 00 90 5D |  if_ne	jmp	#LR__2516
1fe44     A7 26 02 FB | 	rdlong	local01, fp
1fe48     0C 4E 05 F1 | 	add	fp, #12
1fe4c     A7 12 02 FB | 	rdlong	arg01, fp
1fe50     0C 4E 85 F1 | 	sub	fp, #12
1fe54     8C 95 B0 FD | 	call	#__system___float_fromuns
1fe58     FD 14 02 F6 | 	mov	arg02, result1
1fe5c     13 13 02 F6 | 	mov	arg01, local01
1fe60     84 99 B0 FD | 	call	#__system___float_mul
1fe64     A7 FA 61 FC | 	wrlong	result1, fp
1fe68     DC 00 90 FD | 	jmp	#LR__2519
1fe6c                 | LR__2516
1fe6c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1fe6c     08 4E 05 F1 | 	add	fp, #8
1fe70     A7 26 02 FB | 	rdlong	local01, fp
1fe74     08 4E 85 F1 | 	sub	fp, #8
1fe78     1E 26 0E F2 | 	cmp	local01, #30 wz
1fe7c     14 4E 05 A1 |  if_e	add	fp, #20
1fe80     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fe84     14 4E 85 A1 |  if_e	sub	fp, #20
1fe88     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fe8c     38 00 90 5D |  if_ne	jmp	#LR__2517
1fe90     A7 26 02 FB | 	rdlong	local01, fp
1fe94     0C 4E 05 F1 | 	add	fp, #12
1fe98     A7 12 02 FB | 	rdlong	arg01, fp
1fe9c     0C 4E 85 F1 | 	sub	fp, #12
1fea0     09 13 52 F6 | 	abs	arg01, arg01 wc
1fea4     1F 2E C6 C9 |  if_b	decod	local05, #31
1fea8     00 2E 06 36 |  if_ae	mov	local05, #0
1feac     34 95 B0 FD | 	call	#__system___float_fromuns
1feb0     17 FB 61 F5 | 	xor	result1, local05
1feb4     FD 14 02 F6 | 	mov	arg02, result1
1feb8     13 13 02 F6 | 	mov	arg01, local01
1febc     28 99 B0 FD | 	call	#__system___float_mul
1fec0     A7 FA 61 FC | 	wrlong	result1, fp
1fec4     80 00 90 FD | 	jmp	#LR__2519
1fec8                 | LR__2517
1fec8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1fec8     08 4E 05 F1 | 	add	fp, #8
1fecc     A7 26 02 FB | 	rdlong	local01, fp
1fed0     08 4E 85 F1 | 	sub	fp, #8
1fed4     1E 26 0E F2 | 	cmp	local01, #30 wz
1fed8     14 4E 05 A1 |  if_e	add	fp, #20
1fedc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fee0     14 4E 85 A1 |  if_e	sub	fp, #20
1fee4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fee8     1C 00 90 5D |  if_ne	jmp	#LR__2518
1feec     A7 12 02 FB | 	rdlong	arg01, fp
1fef0     0C 4E 05 F1 | 	add	fp, #12
1fef4     A7 14 02 FB | 	rdlong	arg02, fp
1fef8     0C 4E 85 F1 | 	sub	fp, #12
1fefc     E8 98 B0 FD | 	call	#__system___float_mul
1ff00     A7 FA 61 FC | 	wrlong	result1, fp
1ff04     40 00 90 FD | 	jmp	#LR__2519
1ff08                 | LR__2518
1ff08                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1ff08     08 4E 05 F1 | 	add	fp, #8
1ff0c     A7 26 02 FB | 	rdlong	local01, fp
1ff10     08 4E 85 F1 | 	sub	fp, #8
1ff14     1F 26 0E F2 | 	cmp	local01, #31 wz
1ff18     14 4E 05 51 |  if_ne	add	fp, #20
1ff1c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1ff20     14 4E 85 51 |  if_ne	sub	fp, #20
1ff24     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1ff28     A7 10 68 AC |  if_e	wrlong	#8, fp
1ff2c     08 4E 05 A1 |  if_e	add	fp, #8
1ff30     A7 FE 69 AC |  if_e	wrlong	#255, fp
1ff34     08 4E 85 A1 |  if_e	sub	fp, #8
1ff38     A7 12 68 5C |  if_ne	wrlong	#9, fp
1ff3c     08 4E 05 51 |  if_ne	add	fp, #8
1ff40     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1ff44     08 4E 85 51 |  if_ne	sub	fp, #8
1ff48                 | LR__2519
1ff48     A7 12 02 F6 | 	mov	arg01, fp
1ff4c     24 D7 BE FD | 	call	#_push
1ff50     A7 F0 03 F6 | 	mov	ptra, fp
1ff54     B2 00 A0 FD | 	call	#popregs_
1ff58                 | _do_mul_ret
1ff58     2D 00 64 FD | 	ret
1ff5c                 | 
1ff5c                 | ' 
1ff5c                 | ' '--------------------------------- not equal (<>)
1ff5c                 | ' 
1ff5c                 | ' sub do_ne
1ff5c                 | _do_ne
1ff5c     05 4A 05 F6 | 	mov	COUNT_, #5
1ff60     A8 00 A0 FD | 	call	#pushregs_
1ff64     18 F0 07 F1 | 	add	ptra, #24
1ff68     70 D6 BE FD | 	call	#_pop
1ff6c     FD 26 02 F6 | 	mov	local01, result1
1ff70     FE 28 02 F6 | 	mov	local02, result2
1ff74     FF 2A 02 F6 | 	mov	local03, result3
1ff78     0C 4E 05 F1 | 	add	fp, #12
1ff7c     A7 26 62 FC | 	wrlong	local01, fp
1ff80     04 4E 05 F1 | 	add	fp, #4
1ff84     A7 28 62 FC | 	wrlong	local02, fp
1ff88     04 4E 05 F1 | 	add	fp, #4
1ff8c     A7 2A 62 FC | 	wrlong	local03, fp
1ff90     14 4E 85 F1 | 	sub	fp, #20
1ff94     44 D6 BE FD | 	call	#_pop
1ff98     FF 2A 02 F6 | 	mov	local03, result3
1ff9c     A7 FA 61 FC | 	wrlong	result1, fp
1ffa0     04 4E 05 F1 | 	add	fp, #4
1ffa4     A7 FC 61 FC | 	wrlong	result2, fp
1ffa8     04 4E 05 F1 | 	add	fp, #4
1ffac     A7 2A 62 FC | 	wrlong	local03, fp
1ffb0                 | ' 
1ffb0                 | ' t2=pop()
1ffb0                 | ' t1=pop()
1ffb0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1ffb0     08 4E 85 F1 | 	sub	fp, #8
1ffb4     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ffb8     14 4E 05 A1 |  if_e	add	fp, #20
1ffbc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ffc0     14 4E 85 A1 |  if_e	sub	fp, #20
1ffc4     16 2B 02 A6 |  if_e	mov	local03, local04
1ffc8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ffcc     28 00 90 5D |  if_ne	jmp	#LR__2520
1ffd0     00 26 06 F6 | 	mov	local01, #0
1ffd4     A7 12 02 FB | 	rdlong	arg01, fp
1ffd8     0C 4E 05 F1 | 	add	fp, #12
1ffdc     A7 14 02 FB | 	rdlong	arg02, fp
1ffe0     0C 4E 85 F1 | 	sub	fp, #12
1ffe4     AC 69 B0 FD | 	call	#__system___string_cmp
1ffe8     00 FA 0D F2 | 	cmp	result1, #0 wz
1ffec     00 26 26 56 |  if_ne	not	local01, #0
1fff0     A7 26 62 FC | 	wrlong	local01, fp
1fff4     20 04 90 FD | 	jmp	#LR__2533
1fff8                 | LR__2520
1fff8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1fff8     08 4E 05 F1 | 	add	fp, #8
1fffc     A7 26 02 FB | 	rdlong	local01, fp
20000     08 4E 85 F1 | 	sub	fp, #8
20004     1E 26 0E F2 | 	cmp	local01, #30 wz
20008     14 4E 05 A1 |  if_e	add	fp, #20
2000c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20010     14 4E 85 A1 |  if_e	sub	fp, #20
20014     16 2B 02 A6 |  if_e	mov	local03, local04
20018     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
2001c     2C 00 90 5D |  if_ne	jmp	#LR__2521
20020     00 26 06 F6 | 	mov	local01, #0
20024     A7 12 02 FB | 	rdlong	arg01, fp
20028     0C 4E 05 F1 | 	add	fp, #12
2002c     A7 14 02 FB | 	rdlong	arg02, fp
20030     0C 4E 85 F1 | 	sub	fp, #12
20034     01 16 06 F6 | 	mov	arg03, #1
20038     E0 9B B0 FD | 	call	#__system___float_cmp
2003c     00 FA 0D F2 | 	cmp	result1, #0 wz
20040     00 26 26 56 |  if_ne	not	local01, #0
20044     A7 26 62 FC | 	wrlong	local01, fp
20048     CC 03 90 FD | 	jmp	#LR__2533
2004c                 | LR__2521
2004c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
2004c     08 4E 05 F1 | 	add	fp, #8
20050     A7 26 02 FB | 	rdlong	local01, fp
20054     08 4E 85 F1 | 	sub	fp, #8
20058     1E 26 0E F2 | 	cmp	local01, #30 wz
2005c     14 4E 05 A1 |  if_e	add	fp, #20
20060     A7 2C 02 AB |  if_e	rdlong	local04, fp
20064     14 4E 85 A1 |  if_e	sub	fp, #20
20068     16 2B 02 A6 |  if_e	mov	local03, local04
2006c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20070     48 00 90 5D |  if_ne	jmp	#LR__2522
20074     00 26 06 F6 | 	mov	local01, #0
20078     A7 28 02 FB | 	rdlong	local02, fp
2007c     0C 4E 05 F1 | 	add	fp, #12
20080     A7 12 02 FB | 	rdlong	arg01, fp
20084     0C 4E 85 F1 | 	sub	fp, #12
20088     09 13 52 F6 | 	abs	arg01, arg01 wc
2008c     1F 2E C6 C9 |  if_b	decod	local05, #31
20090     00 2E 06 36 |  if_ae	mov	local05, #0
20094     4C 93 B0 FD | 	call	#__system___float_fromuns
20098     17 FB 61 F5 | 	xor	result1, local05
2009c     FD 14 02 F6 | 	mov	arg02, result1
200a0     14 13 02 F6 | 	mov	arg01, local02
200a4     01 16 06 F6 | 	mov	arg03, #1
200a8     70 9B B0 FD | 	call	#__system___float_cmp
200ac     00 FA 0D F2 | 	cmp	result1, #0 wz
200b0     00 26 26 56 |  if_ne	not	local01, #0
200b4     A7 26 62 FC | 	wrlong	local01, fp
200b8     5C 03 90 FD | 	jmp	#LR__2533
200bc                 | LR__2522
200bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
200bc     08 4E 05 F1 | 	add	fp, #8
200c0     A7 26 02 FB | 	rdlong	local01, fp
200c4     08 4E 85 F1 | 	sub	fp, #8
200c8     1E 26 0E F2 | 	cmp	local01, #30 wz
200cc     14 4E 05 A1 |  if_e	add	fp, #20
200d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
200d4     14 4E 85 A1 |  if_e	sub	fp, #20
200d8     16 2B 02 A6 |  if_e	mov	local03, local04
200dc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
200e0     38 00 90 5D |  if_ne	jmp	#LR__2523
200e4     00 26 06 F6 | 	mov	local01, #0
200e8     A7 28 02 FB | 	rdlong	local02, fp
200ec     0C 4E 05 F1 | 	add	fp, #12
200f0     A7 12 02 FB | 	rdlong	arg01, fp
200f4     0C 4E 85 F1 | 	sub	fp, #12
200f8     E8 92 B0 FD | 	call	#__system___float_fromuns
200fc     FD 14 02 F6 | 	mov	arg02, result1
20100     14 13 02 F6 | 	mov	arg01, local02
20104     01 16 06 F6 | 	mov	arg03, #1
20108     10 9B B0 FD | 	call	#__system___float_cmp
2010c     00 FA 0D F2 | 	cmp	result1, #0 wz
20110     00 26 26 56 |  if_ne	not	local01, #0
20114     A7 26 62 FC | 	wrlong	local01, fp
20118     FC 02 90 FD | 	jmp	#LR__2533
2011c                 | LR__2523
2011c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
2011c     08 4E 05 F1 | 	add	fp, #8
20120     A7 26 02 FB | 	rdlong	local01, fp
20124     08 4E 85 F1 | 	sub	fp, #8
20128     1C 26 0E F2 | 	cmp	local01, #28 wz
2012c     14 4E 05 A1 |  if_e	add	fp, #20
20130     A7 2C 02 AB |  if_e	rdlong	local04, fp
20134     14 4E 85 A1 |  if_e	sub	fp, #20
20138     16 2B 02 A6 |  if_e	mov	local03, local04
2013c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20140     44 00 90 5D |  if_ne	jmp	#LR__2524
20144     00 26 06 F6 | 	mov	local01, #0
20148     A7 12 02 FB | 	rdlong	arg01, fp
2014c     09 13 52 F6 | 	abs	arg01, arg01 wc
20150     1F 2E C6 C9 |  if_b	decod	local05, #31
20154     00 2E 06 36 |  if_ae	mov	local05, #0
20158     88 92 B0 FD | 	call	#__system___float_fromuns
2015c     17 FB 61 F5 | 	xor	result1, local05
20160     FD 12 02 F6 | 	mov	arg01, result1
20164     0C 4E 05 F1 | 	add	fp, #12
20168     A7 14 02 FB | 	rdlong	arg02, fp
2016c     0C 4E 85 F1 | 	sub	fp, #12
20170     01 16 06 F6 | 	mov	arg03, #1
20174     A4 9A B0 FD | 	call	#__system___float_cmp
20178     00 FA 0D F2 | 	cmp	result1, #0 wz
2017c     00 26 26 56 |  if_ne	not	local01, #0
20180     A7 26 62 FC | 	wrlong	local01, fp
20184     90 02 90 FD | 	jmp	#LR__2533
20188                 | LR__2524
20188                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
20188     08 4E 05 F1 | 	add	fp, #8
2018c     A7 26 02 FB | 	rdlong	local01, fp
20190     08 4E 85 F1 | 	sub	fp, #8
20194     1C 26 0E F2 | 	cmp	local01, #28 wz
20198     14 4E 05 A1 |  if_e	add	fp, #20
2019c     A7 2C 02 AB |  if_e	rdlong	local04, fp
201a0     14 4E 85 A1 |  if_e	sub	fp, #20
201a4     16 2B 02 A6 |  if_e	mov	local03, local04
201a8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
201ac     24 00 90 5D |  if_ne	jmp	#LR__2525
201b0     00 26 06 F6 | 	mov	local01, #0
201b4     A7 28 02 FB | 	rdlong	local02, fp
201b8     0C 4E 05 F1 | 	add	fp, #12
201bc     A7 2A 02 FB | 	rdlong	local03, fp
201c0     0C 4E 85 F1 | 	sub	fp, #12
201c4     15 29 0A F2 | 	cmp	local02, local03 wz
201c8     01 26 66 56 |  if_ne	neg	local01, #1
201cc     A7 26 62 FC | 	wrlong	local01, fp
201d0     44 02 90 FD | 	jmp	#LR__2533
201d4                 | LR__2525
201d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
201d4     08 4E 05 F1 | 	add	fp, #8
201d8     A7 26 02 FB | 	rdlong	local01, fp
201dc     08 4E 85 F1 | 	sub	fp, #8
201e0     1C 26 0E F2 | 	cmp	local01, #28 wz
201e4     14 4E 05 A1 |  if_e	add	fp, #20
201e8     A7 2C 02 AB |  if_e	rdlong	local04, fp
201ec     14 4E 85 A1 |  if_e	sub	fp, #20
201f0     16 2B 02 A6 |  if_e	mov	local03, local04
201f4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
201f8     24 00 90 5D |  if_ne	jmp	#LR__2526
201fc     00 26 06 F6 | 	mov	local01, #0
20200     A7 28 02 FB | 	rdlong	local02, fp
20204     0C 4E 05 F1 | 	add	fp, #12
20208     A7 2A 02 FB | 	rdlong	local03, fp
2020c     0C 4E 85 F1 | 	sub	fp, #12
20210     15 29 0A F2 | 	cmp	local02, local03 wz
20214     01 26 66 56 |  if_ne	neg	local01, #1
20218     A7 26 62 FC | 	wrlong	local01, fp
2021c     F8 01 90 FD | 	jmp	#LR__2533
20220                 | LR__2526
20220                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
20220     08 4E 05 F1 | 	add	fp, #8
20224     A7 26 02 FB | 	rdlong	local01, fp
20228     08 4E 85 F1 | 	sub	fp, #8
2022c     1D 26 0E F2 | 	cmp	local01, #29 wz
20230     14 4E 05 A1 |  if_e	add	fp, #20
20234     A7 2C 02 AB |  if_e	rdlong	local04, fp
20238     14 4E 85 A1 |  if_e	sub	fp, #20
2023c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
20240     34 00 90 5D |  if_ne	jmp	#LR__2527
20244     00 26 06 F6 | 	mov	local01, #0
20248     A7 12 02 FB | 	rdlong	arg01, fp
2024c     94 91 B0 FD | 	call	#__system___float_fromuns
20250     FD 12 02 F6 | 	mov	arg01, result1
20254     0C 4E 05 F1 | 	add	fp, #12
20258     A7 14 02 FB | 	rdlong	arg02, fp
2025c     0C 4E 85 F1 | 	sub	fp, #12
20260     01 16 06 F6 | 	mov	arg03, #1
20264     B4 99 B0 FD | 	call	#__system___float_cmp
20268     00 FA 0D F2 | 	cmp	result1, #0 wz
2026c     00 26 26 56 |  if_ne	not	local01, #0
20270     A7 26 62 FC | 	wrlong	local01, fp
20274     A0 01 90 FD | 	jmp	#LR__2533
20278                 | LR__2527
20278                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
20278     08 4E 05 F1 | 	add	fp, #8
2027c     A7 26 02 FB | 	rdlong	local01, fp
20280     08 4E 85 F1 | 	sub	fp, #8
20284     1D 26 0E F2 | 	cmp	local01, #29 wz
20288     14 4E 05 A1 |  if_e	add	fp, #20
2028c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20290     14 4E 85 A1 |  if_e	sub	fp, #20
20294     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20298     24 00 90 5D |  if_ne	jmp	#LR__2528
2029c     00 26 06 F6 | 	mov	local01, #0
202a0     A7 28 02 FB | 	rdlong	local02, fp
202a4     0C 4E 05 F1 | 	add	fp, #12
202a8     A7 2A 02 FB | 	rdlong	local03, fp
202ac     0C 4E 85 F1 | 	sub	fp, #12
202b0     15 29 0A F2 | 	cmp	local02, local03 wz
202b4     01 26 66 56 |  if_ne	neg	local01, #1
202b8     A7 26 62 FC | 	wrlong	local01, fp
202bc     58 01 90 FD | 	jmp	#LR__2533
202c0                 | LR__2528
202c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
202c0     08 4E 05 F1 | 	add	fp, #8
202c4     A7 26 02 FB | 	rdlong	local01, fp
202c8     08 4E 85 F1 | 	sub	fp, #8
202cc     1D 26 0E F2 | 	cmp	local01, #29 wz
202d0     14 4E 05 A1 |  if_e	add	fp, #20
202d4     A7 2A 02 AB |  if_e	rdlong	local03, fp
202d8     14 4E 85 A1 |  if_e	sub	fp, #20
202dc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
202e0     24 00 90 5D |  if_ne	jmp	#LR__2529
202e4     00 26 06 F6 | 	mov	local01, #0
202e8     A7 28 02 FB | 	rdlong	local02, fp
202ec     0C 4E 05 F1 | 	add	fp, #12
202f0     A7 2A 02 FB | 	rdlong	local03, fp
202f4     0C 4E 85 F1 | 	sub	fp, #12
202f8     15 29 0A F2 | 	cmp	local02, local03 wz
202fc     01 26 66 56 |  if_ne	neg	local01, #1
20300     A7 26 62 FC | 	wrlong	local01, fp
20304     10 01 90 FD | 	jmp	#LR__2533
20308                 | LR__2529
20308                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
20308     08 4E 05 F1 | 	add	fp, #8
2030c     A7 26 02 FB | 	rdlong	local01, fp
20310     08 4E 85 F1 | 	sub	fp, #8
20314     2B 26 0E F2 | 	cmp	local01, #43 wz
20318     14 4E 05 A1 |  if_e	add	fp, #20
2031c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20320     14 4E 85 A1 |  if_e	sub	fp, #20
20324     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20328     30 00 90 5D |  if_ne	jmp	#LR__2530
2032c     00 26 06 F6 | 	mov	local01, #0
20330     A7 12 02 FB | 	rdlong	arg01, fp
20334     1C D4 BE FD | 	call	#_convertstring
20338     FD 12 02 F6 | 	mov	arg01, result1
2033c     0C 4E 05 F1 | 	add	fp, #12
20340     A7 14 02 FB | 	rdlong	arg02, fp
20344     0C 4E 85 F1 | 	sub	fp, #12
20348     48 66 B0 FD | 	call	#__system___string_cmp
2034c     00 FA 0D F2 | 	cmp	result1, #0 wz
20350     00 26 26 56 |  if_ne	not	local01, #0
20354     A7 26 62 FC | 	wrlong	local01, fp
20358     BC 00 90 FD | 	jmp	#LR__2533
2035c                 | LR__2530
2035c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
2035c     08 4E 05 F1 | 	add	fp, #8
20360     A7 26 02 FB | 	rdlong	local01, fp
20364     08 4E 85 F1 | 	sub	fp, #8
20368     1F 26 0E F2 | 	cmp	local01, #31 wz
2036c     14 4E 05 A1 |  if_e	add	fp, #20
20370     A7 2A 02 AB |  if_e	rdlong	local03, fp
20374     14 4E 85 A1 |  if_e	sub	fp, #20
20378     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
2037c     34 00 90 5D |  if_ne	jmp	#LR__2531
20380     00 26 06 F6 | 	mov	local01, #0
20384     A7 28 02 FB | 	rdlong	local02, fp
20388     0C 4E 05 F1 | 	add	fp, #12
2038c     A7 12 02 FB | 	rdlong	arg01, fp
20390     0C 4E 85 F1 | 	sub	fp, #12
20394     BC D3 BE FD | 	call	#_convertstring
20398     FD 14 02 F6 | 	mov	arg02, result1
2039c     14 13 02 F6 | 	mov	arg01, local02
203a0     F0 65 B0 FD | 	call	#__system___string_cmp
203a4     00 FA 0D F2 | 	cmp	result1, #0 wz
203a8     00 26 26 56 |  if_ne	not	local01, #0
203ac     A7 26 62 FC | 	wrlong	local01, fp
203b0     64 00 90 FD | 	jmp	#LR__2533
203b4                 | LR__2531
203b4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
203b4     08 4E 05 F1 | 	add	fp, #8
203b8     A7 26 02 FB | 	rdlong	local01, fp
203bc     08 4E 85 F1 | 	sub	fp, #8
203c0     2B 26 0E F2 | 	cmp	local01, #43 wz
203c4     14 4E 05 A1 |  if_e	add	fp, #20
203c8     A7 2A 02 AB |  if_e	rdlong	local03, fp
203cc     14 4E 85 A1 |  if_e	sub	fp, #20
203d0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
203d4     3C 00 90 5D |  if_ne	jmp	#LR__2532
203d8     00 26 06 F6 | 	mov	local01, #0
203dc     A7 12 02 FB | 	rdlong	arg01, fp
203e0     70 D3 BE FD | 	call	#_convertstring
203e4     FD 28 02 F6 | 	mov	local02, result1
203e8     0C 4E 05 F1 | 	add	fp, #12
203ec     A7 12 02 FB | 	rdlong	arg01, fp
203f0     0C 4E 85 F1 | 	sub	fp, #12
203f4     5C D3 BE FD | 	call	#_convertstring
203f8     FD 14 02 F6 | 	mov	arg02, result1
203fc     14 13 02 F6 | 	mov	arg01, local02
20400     90 65 B0 FD | 	call	#__system___string_cmp
20404     00 FA 0D F2 | 	cmp	result1, #0 wz
20408     00 26 26 56 |  if_ne	not	local01, #0
2040c     A7 26 62 FC | 	wrlong	local01, fp
20410     04 00 90 FD | 	jmp	#LR__2533
20414                 | LR__2532
20414     A7 00 68 FC | 	wrlong	#0, fp
20418                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
20418                 | LR__2533
20418     08 4E 05 F1 | 	add	fp, #8
2041c     A7 38 68 FC | 	wrlong	#28, fp
20420     08 4E 85 F1 | 	sub	fp, #8
20424     A7 12 02 F6 | 	mov	arg01, fp
20428     48 D2 BE FD | 	call	#_push
2042c     A7 F0 03 F6 | 	mov	ptra, fp
20430     B2 00 A0 FD | 	call	#popregs_
20434                 | _do_ne_ret
20434     2D 00 64 FD | 	ret
20438                 | 
20438                 | ' 
20438                 | ' '--------------------------------- OR
20438                 | ' 
20438                 | ' sub do_or 
20438                 | _do_or
20438     03 4A 05 F6 | 	mov	COUNT_, #3
2043c     A8 00 A0 FD | 	call	#pushregs_
20440     18 F0 07 F1 | 	add	ptra, #24
20444     94 D1 BE FD | 	call	#_pop
20448     FD 12 02 F6 | 	mov	arg01, result1
2044c     FE 26 02 F6 | 	mov	local01, result2
20450     FF 28 02 F6 | 	mov	local02, result3
20454     0C 4E 05 F1 | 	add	fp, #12
20458     A7 12 62 FC | 	wrlong	arg01, fp
2045c     04 4E 05 F1 | 	add	fp, #4
20460     A7 26 62 FC | 	wrlong	local01, fp
20464     04 4E 05 F1 | 	add	fp, #4
20468     A7 28 62 FC | 	wrlong	local02, fp
2046c     14 4E 85 F1 | 	sub	fp, #20
20470     68 D1 BE FD | 	call	#_pop
20474     FF 2A 02 F6 | 	mov	local03, result3
20478     A7 FA 61 FC | 	wrlong	result1, fp
2047c     04 4E 05 F1 | 	add	fp, #4
20480     A7 FC 61 FC | 	wrlong	result2, fp
20484     04 4E 05 F1 | 	add	fp, #4
20488     A7 2A 62 FC | 	wrlong	local03, fp
2048c                 | ' 
2048c                 | ' t2=pop()
2048c                 | ' t1=pop()
2048c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
2048c     08 4E 85 F1 | 	sub	fp, #8
20490     1C 2A 0E F2 | 	cmp	local03, #28 wz
20494     A7 2A 02 AB |  if_e	rdlong	local03, fp
20498     A7 2A 62 AC |  if_e	wrlong	local03, fp
2049c     08 4E 05 A1 |  if_e	add	fp, #8
204a0     A7 3A 68 AC |  if_e	wrlong	#29, fp
204a4     08 4E 85 A1 |  if_e	sub	fp, #8
204a8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
204a8     14 4E 05 F1 | 	add	fp, #20
204ac     A7 2A 02 FB | 	rdlong	local03, fp
204b0     14 4E 85 F1 | 	sub	fp, #20
204b4     1C 2A 0E F2 | 	cmp	local03, #28 wz
204b8     18 00 90 5D |  if_ne	jmp	#LR__2540
204bc     0C 4E 05 F1 | 	add	fp, #12
204c0     A7 2A 02 FB | 	rdlong	local03, fp
204c4     A7 2A 62 FC | 	wrlong	local03, fp
204c8     08 4E 05 F1 | 	add	fp, #8
204cc     A7 3A 68 FC | 	wrlong	#29, fp
204d0     14 4E 85 F1 | 	sub	fp, #20
204d4                 | LR__2540
204d4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
204d4     08 4E 05 F1 | 	add	fp, #8
204d8     A7 2A 02 FB | 	rdlong	local03, fp
204dc     08 4E 85 F1 | 	sub	fp, #8
204e0     1F 2A 0E F2 | 	cmp	local03, #31 wz
204e4     14 4E 05 51 |  if_ne	add	fp, #20
204e8     A7 28 02 5B |  if_ne	rdlong	local02, fp
204ec     14 4E 85 51 |  if_ne	sub	fp, #20
204f0     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
204f4     08 4E 05 51 |  if_ne	add	fp, #8
204f8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
204fc     08 4E 85 51 |  if_ne	sub	fp, #8
20500     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
20504     14 4E 05 51 |  if_ne	add	fp, #20
20508     14 4E 85 51 |  if_ne	sub	fp, #20
2050c     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
20510     A7 0C 68 AC |  if_e	wrlong	#6, fp
20514     08 4E 05 A1 |  if_e	add	fp, #8
20518     A7 FE 69 AC |  if_e	wrlong	#255, fp
2051c     08 4E 85 A1 |  if_e	sub	fp, #8
20520     18 00 90 AD |  if_e	jmp	#LR__2541
20524     A7 2A 02 FB | 	rdlong	local03, fp
20528     0C 4E 05 F1 | 	add	fp, #12
2052c     A7 26 02 FB | 	rdlong	local01, fp
20530     0C 4E 85 F1 | 	sub	fp, #12
20534     13 2B 42 F5 | 	or	local03, local01
20538     A7 2A 62 FC | 	wrlong	local03, fp
2053c                 | LR__2541
2053c     A7 12 02 F6 | 	mov	arg01, fp
20540     30 D1 BE FD | 	call	#_push
20544     A7 F0 03 F6 | 	mov	ptra, fp
20548     B2 00 A0 FD | 	call	#popregs_
2054c                 | _do_or_ret
2054c     2D 00 64 FD | 	ret
20550                 | 
20550                 | ' 
20550                 | ' '--------------------------------- plus (+)
20550                 | ' 
20550                 | ' sub do_plus 
20550                 | _do_plus
20550     05 4A 05 F6 | 	mov	COUNT_, #5
20554     A8 00 A0 FD | 	call	#pushregs_
20558     18 F0 07 F1 | 	add	ptra, #24
2055c     7C D0 BE FD | 	call	#_pop
20560     FD 26 02 F6 | 	mov	local01, result1
20564     FE 28 02 F6 | 	mov	local02, result2
20568     FF 2A 02 F6 | 	mov	local03, result3
2056c     0C 4E 05 F1 | 	add	fp, #12
20570     A7 26 62 FC | 	wrlong	local01, fp
20574     04 4E 05 F1 | 	add	fp, #4
20578     A7 28 62 FC | 	wrlong	local02, fp
2057c     04 4E 05 F1 | 	add	fp, #4
20580     A7 2A 62 FC | 	wrlong	local03, fp
20584     14 4E 85 F1 | 	sub	fp, #20
20588     50 D0 BE FD | 	call	#_pop
2058c     FF 2A 02 F6 | 	mov	local03, result3
20590     A7 FA 61 FC | 	wrlong	result1, fp
20594     04 4E 05 F1 | 	add	fp, #4
20598     A7 FC 61 FC | 	wrlong	result2, fp
2059c     04 4E 05 F1 | 	add	fp, #4
205a0     A7 2A 62 FC | 	wrlong	local03, fp
205a4                 | ' 
205a4                 | ' t2=pop()
205a4                 | ' t1=pop()
205a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
205a4     08 4E 85 F1 | 	sub	fp, #8
205a8     1D 2A 0E F2 | 	cmp	local03, #29 wz
205ac     14 4E 05 A1 |  if_e	add	fp, #20
205b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
205b4     14 4E 85 A1 |  if_e	sub	fp, #20
205b8     16 2B 02 A6 |  if_e	mov	local03, local04
205bc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
205c0     1C 00 90 5D |  if_ne	jmp	#LR__2550
205c4     A7 26 02 FB | 	rdlong	local01, fp
205c8     0C 4E 05 F1 | 	add	fp, #12
205cc     A7 28 02 FB | 	rdlong	local02, fp
205d0     0C 4E 85 F1 | 	sub	fp, #12
205d4     14 27 02 F1 | 	add	local01, local02
205d8     A7 26 62 FC | 	wrlong	local01, fp
205dc     48 04 90 FD | 	jmp	#LR__2565
205e0                 | LR__2550
205e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
205e0     08 4E 05 F1 | 	add	fp, #8
205e4     A7 26 02 FB | 	rdlong	local01, fp
205e8     08 4E 85 F1 | 	sub	fp, #8
205ec     1D 26 0E F2 | 	cmp	local01, #29 wz
205f0     14 4E 05 A1 |  if_e	add	fp, #20
205f4     A7 2C 02 AB |  if_e	rdlong	local04, fp
205f8     14 4E 85 A1 |  if_e	sub	fp, #20
205fc     16 2B 02 A6 |  if_e	mov	local03, local04
20600     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20604     28 00 90 5D |  if_ne	jmp	#LR__2551
20608     A7 26 02 FB | 	rdlong	local01, fp
2060c     0C 4E 05 F1 | 	add	fp, #12
20610     A7 28 02 FB | 	rdlong	local02, fp
20614     0C 4E 85 F1 | 	sub	fp, #12
20618     14 27 02 F1 | 	add	local01, local02
2061c     A7 26 62 FC | 	wrlong	local01, fp
20620     08 4E 05 F1 | 	add	fp, #8
20624     A7 38 68 FC | 	wrlong	#28, fp
20628     08 4E 85 F1 | 	sub	fp, #8
2062c     F8 03 90 FD | 	jmp	#LR__2565
20630                 | LR__2551
20630                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
20630     08 4E 05 F1 | 	add	fp, #8
20634     A7 26 02 FB | 	rdlong	local01, fp
20638     08 4E 85 F1 | 	sub	fp, #8
2063c     1D 26 0E F2 | 	cmp	local01, #29 wz
20640     14 4E 05 A1 |  if_e	add	fp, #20
20644     A7 2C 02 AB |  if_e	rdlong	local04, fp
20648     14 4E 85 A1 |  if_e	sub	fp, #20
2064c     16 2B 02 A6 |  if_e	mov	local03, local04
20650     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20654     30 00 90 5D |  if_ne	jmp	#LR__2552
20658     A7 12 02 FB | 	rdlong	arg01, fp
2065c     84 8D B0 FD | 	call	#__system___float_fromuns
20660     FD 12 02 F6 | 	mov	arg01, result1
20664     0C 4E 05 F1 | 	add	fp, #12
20668     A7 14 02 FB | 	rdlong	arg02, fp
2066c     0C 4E 85 F1 | 	sub	fp, #12
20670     A4 8D B0 FD | 	call	#__system___float_add
20674     A7 FA 61 FC | 	wrlong	result1, fp
20678     08 4E 05 F1 | 	add	fp, #8
2067c     A7 3C 68 FC | 	wrlong	#30, fp
20680     08 4E 85 F1 | 	sub	fp, #8
20684     A0 03 90 FD | 	jmp	#LR__2565
20688                 | LR__2552
20688                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
20688     08 4E 05 F1 | 	add	fp, #8
2068c     A7 26 02 FB | 	rdlong	local01, fp
20690     08 4E 85 F1 | 	sub	fp, #8
20694     1C 26 0E F2 | 	cmp	local01, #28 wz
20698     14 4E 05 A1 |  if_e	add	fp, #20
2069c     A7 2C 02 AB |  if_e	rdlong	local04, fp
206a0     14 4E 85 A1 |  if_e	sub	fp, #20
206a4     16 2B 02 A6 |  if_e	mov	local03, local04
206a8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
206ac     1C 00 90 5D |  if_ne	jmp	#LR__2553
206b0     A7 26 02 FB | 	rdlong	local01, fp
206b4     0C 4E 05 F1 | 	add	fp, #12
206b8     A7 28 02 FB | 	rdlong	local02, fp
206bc     0C 4E 85 F1 | 	sub	fp, #12
206c0     14 27 02 F1 | 	add	local01, local02
206c4     A7 26 62 FC | 	wrlong	local01, fp
206c8     5C 03 90 FD | 	jmp	#LR__2565
206cc                 | LR__2553
206cc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
206cc     08 4E 05 F1 | 	add	fp, #8
206d0     A7 26 02 FB | 	rdlong	local01, fp
206d4     08 4E 85 F1 | 	sub	fp, #8
206d8     1C 26 0E F2 | 	cmp	local01, #28 wz
206dc     14 4E 05 A1 |  if_e	add	fp, #20
206e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
206e4     14 4E 85 A1 |  if_e	sub	fp, #20
206e8     16 2B 02 A6 |  if_e	mov	local03, local04
206ec     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
206f0     1C 00 90 5D |  if_ne	jmp	#LR__2554
206f4     A7 26 02 FB | 	rdlong	local01, fp
206f8     0C 4E 05 F1 | 	add	fp, #12
206fc     A7 28 02 FB | 	rdlong	local02, fp
20700     0C 4E 85 F1 | 	sub	fp, #12
20704     14 27 02 F1 | 	add	local01, local02
20708     A7 26 62 FC | 	wrlong	local01, fp
2070c     18 03 90 FD | 	jmp	#LR__2565
20710                 | LR__2554
20710                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
20710     08 4E 05 F1 | 	add	fp, #8
20714     A7 26 02 FB | 	rdlong	local01, fp
20718     08 4E 85 F1 | 	sub	fp, #8
2071c     1C 26 0E F2 | 	cmp	local01, #28 wz
20720     14 4E 05 A1 |  if_e	add	fp, #20
20724     A7 2C 02 AB |  if_e	rdlong	local04, fp
20728     14 4E 85 A1 |  if_e	sub	fp, #20
2072c     16 2B 02 A6 |  if_e	mov	local03, local04
20730     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20734     40 00 90 5D |  if_ne	jmp	#LR__2555
20738     A7 12 02 FB | 	rdlong	arg01, fp
2073c     09 13 52 F6 | 	abs	arg01, arg01 wc
20740     1F 2E C6 C9 |  if_b	decod	local05, #31
20744     00 2E 06 36 |  if_ae	mov	local05, #0
20748     98 8C B0 FD | 	call	#__system___float_fromuns
2074c     17 FB 61 F5 | 	xor	result1, local05
20750     FD 12 02 F6 | 	mov	arg01, result1
20754     0C 4E 05 F1 | 	add	fp, #12
20758     A7 14 02 FB | 	rdlong	arg02, fp
2075c     0C 4E 85 F1 | 	sub	fp, #12
20760     B4 8C B0 FD | 	call	#__system___float_add
20764     A7 FA 61 FC | 	wrlong	result1, fp
20768     08 4E 05 F1 | 	add	fp, #8
2076c     A7 3C 68 FC | 	wrlong	#30, fp
20770     08 4E 85 F1 | 	sub	fp, #8
20774     B0 02 90 FD | 	jmp	#LR__2565
20778                 | LR__2555
20778                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
20778     08 4E 05 F1 | 	add	fp, #8
2077c     A7 26 02 FB | 	rdlong	local01, fp
20780     08 4E 85 F1 | 	sub	fp, #8
20784     1E 26 0E F2 | 	cmp	local01, #30 wz
20788     14 4E 05 A1 |  if_e	add	fp, #20
2078c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20790     14 4E 85 A1 |  if_e	sub	fp, #20
20794     16 2B 02 A6 |  if_e	mov	local03, local04
20798     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
2079c     28 00 90 5D |  if_ne	jmp	#LR__2556
207a0     A7 26 02 FB | 	rdlong	local01, fp
207a4     0C 4E 05 F1 | 	add	fp, #12
207a8     A7 12 02 FB | 	rdlong	arg01, fp
207ac     0C 4E 85 F1 | 	sub	fp, #12
207b0     30 8C B0 FD | 	call	#__system___float_fromuns
207b4     FD 14 02 F6 | 	mov	arg02, result1
207b8     13 13 02 F6 | 	mov	arg01, local01
207bc     58 8C B0 FD | 	call	#__system___float_add
207c0     A7 FA 61 FC | 	wrlong	result1, fp
207c4     60 02 90 FD | 	jmp	#LR__2565
207c8                 | LR__2556
207c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
207c8     08 4E 05 F1 | 	add	fp, #8
207cc     A7 26 02 FB | 	rdlong	local01, fp
207d0     08 4E 85 F1 | 	sub	fp, #8
207d4     1E 26 0E F2 | 	cmp	local01, #30 wz
207d8     14 4E 05 A1 |  if_e	add	fp, #20
207dc     A7 2C 02 AB |  if_e	rdlong	local04, fp
207e0     14 4E 85 A1 |  if_e	sub	fp, #20
207e4     16 2B 02 A6 |  if_e	mov	local03, local04
207e8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
207ec     38 00 90 5D |  if_ne	jmp	#LR__2557
207f0     A7 26 02 FB | 	rdlong	local01, fp
207f4     0C 4E 05 F1 | 	add	fp, #12
207f8     A7 12 02 FB | 	rdlong	arg01, fp
207fc     0C 4E 85 F1 | 	sub	fp, #12
20800     09 13 52 F6 | 	abs	arg01, arg01 wc
20804     1F 2E C6 C9 |  if_b	decod	local05, #31
20808     00 2E 06 36 |  if_ae	mov	local05, #0
2080c     D4 8B B0 FD | 	call	#__system___float_fromuns
20810     17 FB 61 F5 | 	xor	result1, local05
20814     FD 14 02 F6 | 	mov	arg02, result1
20818     13 13 02 F6 | 	mov	arg01, local01
2081c     F8 8B B0 FD | 	call	#__system___float_add
20820     A7 FA 61 FC | 	wrlong	result1, fp
20824     00 02 90 FD | 	jmp	#LR__2565
20828                 | LR__2557
20828                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
20828     08 4E 05 F1 | 	add	fp, #8
2082c     A7 26 02 FB | 	rdlong	local01, fp
20830     08 4E 85 F1 | 	sub	fp, #8
20834     1E 26 0E F2 | 	cmp	local01, #30 wz
20838     14 4E 05 A1 |  if_e	add	fp, #20
2083c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20840     14 4E 85 A1 |  if_e	sub	fp, #20
20844     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
20848     1C 00 90 5D |  if_ne	jmp	#LR__2558
2084c     A7 12 02 FB | 	rdlong	arg01, fp
20850     0C 4E 05 F1 | 	add	fp, #12
20854     A7 14 02 FB | 	rdlong	arg02, fp
20858     0C 4E 85 F1 | 	sub	fp, #12
2085c     B8 8B B0 FD | 	call	#__system___float_add
20860     A7 FA 61 FC | 	wrlong	result1, fp
20864     C0 01 90 FD | 	jmp	#LR__2565
20868                 | LR__2558
20868                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
20868     08 4E 05 F1 | 	add	fp, #8
2086c     A7 26 02 FB | 	rdlong	local01, fp
20870     08 4E 85 F1 | 	sub	fp, #8
20874     1F 26 0E F2 | 	cmp	local01, #31 wz
20878     24 00 90 5D |  if_ne	jmp	#LR__2559
2087c     14 4E 05 F1 | 	add	fp, #20
20880     A7 2A 02 FB | 	rdlong	local03, fp
20884     14 4E 85 F1 | 	sub	fp, #20
20888     1F 2A 0E F2 | 	cmp	local03, #31 wz
2088c     A7 04 68 5C |  if_ne	wrlong	#2, fp
20890     08 4E 05 51 |  if_ne	add	fp, #8
20894     A7 FE 69 5C |  if_ne	wrlong	#255, fp
20898     08 4E 85 51 |  if_ne	sub	fp, #8
2089c     88 01 90 5D |  if_ne	jmp	#LR__2565
208a0                 | LR__2559
208a0                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
208a0     14 4E 05 F1 | 	add	fp, #20
208a4     A7 26 02 FB | 	rdlong	local01, fp
208a8     14 4E 85 F1 | 	sub	fp, #20
208ac     1F 26 0E F2 | 	cmp	local01, #31 wz
208b0     24 00 90 5D |  if_ne	jmp	#LR__2560
208b4     08 4E 05 F1 | 	add	fp, #8
208b8     A7 2A 02 FB | 	rdlong	local03, fp
208bc     08 4E 85 F1 | 	sub	fp, #8
208c0     1F 2A 0E F2 | 	cmp	local03, #31 wz
208c4     A7 04 68 5C |  if_ne	wrlong	#2, fp
208c8     08 4E 05 51 |  if_ne	add	fp, #8
208cc     A7 FE 69 5C |  if_ne	wrlong	#255, fp
208d0     08 4E 85 51 |  if_ne	sub	fp, #8
208d4     50 01 90 5D |  if_ne	jmp	#LR__2565
208d8                 | LR__2560
208d8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
208d8     08 4E 05 F1 | 	add	fp, #8
208dc     A7 26 02 FB | 	rdlong	local01, fp
208e0     08 4E 85 F1 | 	sub	fp, #8
208e4     1F 26 0E F2 | 	cmp	local01, #31 wz
208e8     14 4E 05 A1 |  if_e	add	fp, #20
208ec     A7 2A 02 AB |  if_e	rdlong	local03, fp
208f0     14 4E 85 A1 |  if_e	sub	fp, #20
208f4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
208f8     1C 00 90 5D |  if_ne	jmp	#LR__2561
208fc     A7 12 02 FB | 	rdlong	arg01, fp
20900     0C 4E 05 F1 | 	add	fp, #12
20904     A7 14 02 FB | 	rdlong	arg02, fp
20908     0C 4E 85 F1 | 	sub	fp, #12
2090c     B8 60 B0 FD | 	call	#__system___string_concat
20910     A7 FA 61 FC | 	wrlong	result1, fp
20914     10 01 90 FD | 	jmp	#LR__2565
20918                 | LR__2561
20918                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
20918     08 4E 05 F1 | 	add	fp, #8
2091c     A7 26 02 FB | 	rdlong	local01, fp
20920     08 4E 85 F1 | 	sub	fp, #8
20924     2B 26 0E F2 | 	cmp	local01, #43 wz
20928     14 4E 05 A1 |  if_e	add	fp, #20
2092c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20930     14 4E 85 A1 |  if_e	sub	fp, #20
20934     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20938     30 00 90 5D |  if_ne	jmp	#LR__2562
2093c     A7 12 02 FB | 	rdlong	arg01, fp
20940     10 CE BE FD | 	call	#_convertstring
20944     FD 12 02 F6 | 	mov	arg01, result1
20948     0C 4E 05 F1 | 	add	fp, #12
2094c     A7 14 02 FB | 	rdlong	arg02, fp
20950     0C 4E 85 F1 | 	sub	fp, #12
20954     70 60 B0 FD | 	call	#__system___string_concat
20958     A7 FA 61 FC | 	wrlong	result1, fp
2095c     08 4E 05 F1 | 	add	fp, #8
20960     A7 3E 68 FC | 	wrlong	#31, fp
20964     08 4E 85 F1 | 	sub	fp, #8
20968     BC 00 90 FD | 	jmp	#LR__2565
2096c                 | LR__2562
2096c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
2096c     08 4E 05 F1 | 	add	fp, #8
20970     A7 26 02 FB | 	rdlong	local01, fp
20974     08 4E 85 F1 | 	sub	fp, #8
20978     1F 26 0E F2 | 	cmp	local01, #31 wz
2097c     14 4E 05 A1 |  if_e	add	fp, #20
20980     A7 2A 02 AB |  if_e	rdlong	local03, fp
20984     14 4E 85 A1 |  if_e	sub	fp, #20
20988     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
2098c     28 00 90 5D |  if_ne	jmp	#LR__2563
20990     A7 26 02 FB | 	rdlong	local01, fp
20994     0C 4E 05 F1 | 	add	fp, #12
20998     A7 12 02 FB | 	rdlong	arg01, fp
2099c     0C 4E 85 F1 | 	sub	fp, #12
209a0     B0 CD BE FD | 	call	#_convertstring
209a4     FD 14 02 F6 | 	mov	arg02, result1
209a8     13 13 02 F6 | 	mov	arg01, local01
209ac     18 60 B0 FD | 	call	#__system___string_concat
209b0     A7 FA 61 FC | 	wrlong	result1, fp
209b4     70 00 90 FD | 	jmp	#LR__2565
209b8                 | LR__2563
209b8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
209b8     08 4E 05 F1 | 	add	fp, #8
209bc     A7 26 02 FB | 	rdlong	local01, fp
209c0     08 4E 85 F1 | 	sub	fp, #8
209c4     2B 26 0E F2 | 	cmp	local01, #43 wz
209c8     14 4E 05 A1 |  if_e	add	fp, #20
209cc     A7 2A 02 AB |  if_e	rdlong	local03, fp
209d0     14 4E 85 A1 |  if_e	sub	fp, #20
209d4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
209d8     3C 00 90 5D |  if_ne	jmp	#LR__2564
209dc     A7 12 02 FB | 	rdlong	arg01, fp
209e0     70 CD BE FD | 	call	#_convertstring
209e4     FD 26 02 F6 | 	mov	local01, result1
209e8     0C 4E 05 F1 | 	add	fp, #12
209ec     A7 12 02 FB | 	rdlong	arg01, fp
209f0     0C 4E 85 F1 | 	sub	fp, #12
209f4     5C CD BE FD | 	call	#_convertstring
209f8     FD 14 02 F6 | 	mov	arg02, result1
209fc     13 13 02 F6 | 	mov	arg01, local01
20a00     C4 5F B0 FD | 	call	#__system___string_concat
20a04     A7 FA 61 FC | 	wrlong	result1, fp
20a08     08 4E 05 F1 | 	add	fp, #8
20a0c     A7 3E 68 FC | 	wrlong	#31, fp
20a10     08 4E 85 F1 | 	sub	fp, #8
20a14     10 00 90 FD | 	jmp	#LR__2565
20a18                 | LR__2564
20a18     A7 08 68 FC | 	wrlong	#4, fp
20a1c     08 4E 05 F1 | 	add	fp, #8
20a20     A7 FE 69 FC | 	wrlong	#255, fp
20a24     08 4E 85 F1 | 	sub	fp, #8
20a28                 | LR__2565
20a28     A7 12 02 F6 | 	mov	arg01, fp
20a2c     44 CC BE FD | 	call	#_push
20a30     A7 F0 03 F6 | 	mov	ptra, fp
20a34     B2 00 A0 FD | 	call	#popregs_
20a38                 | _do_plus_ret
20a38     2D 00 64 FD | 	ret
20a3c                 | 
20a3c                 | ' 
20a3c                 | ' '--------------------------------- power (^)
20a3c                 | ' 
20a3c                 | ' sub do_power 
20a3c                 | _do_power
20a3c     02 4A 05 F6 | 	mov	COUNT_, #2
20a40     A8 00 A0 FD | 	call	#pushregs_
20a44     18 F0 07 F1 | 	add	ptra, #24
20a48     90 CB BE FD | 	call	#_pop
20a4c     FD 14 02 F6 | 	mov	arg02, result1
20a50     FE 12 02 F6 | 	mov	arg01, result2
20a54     FF 26 02 F6 | 	mov	local01, result3
20a58     0C 4E 05 F1 | 	add	fp, #12
20a5c     A7 14 62 FC | 	wrlong	arg02, fp
20a60     04 4E 05 F1 | 	add	fp, #4
20a64     A7 12 62 FC | 	wrlong	arg01, fp
20a68     04 4E 05 F1 | 	add	fp, #4
20a6c     A7 26 62 FC | 	wrlong	local01, fp
20a70     14 4E 85 F1 | 	sub	fp, #20
20a74     64 CB BE FD | 	call	#_pop
20a78     A7 FA 61 FC | 	wrlong	result1, fp
20a7c     04 4E 05 F1 | 	add	fp, #4
20a80     A7 FC 61 FC | 	wrlong	result2, fp
20a84     04 4E 05 F1 | 	add	fp, #4
20a88     A7 FE 61 FC | 	wrlong	result3, fp
20a8c                 | ' 
20a8c                 | ' t2=pop()
20a8c                 | ' t1=pop()
20a8c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
20a8c     08 4E 85 F1 | 	sub	fp, #8
20a90     1F FE 0D F2 | 	cmp	result3, #31 wz
20a94     14 4E 05 51 |  if_ne	add	fp, #20
20a98     A7 26 02 5B |  if_ne	rdlong	local01, fp
20a9c     14 4E 85 51 |  if_ne	sub	fp, #20
20aa0     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
20aa4     A7 18 68 AC |  if_e	wrlong	#12, fp
20aa8     08 4E 05 A1 |  if_e	add	fp, #8
20aac     A7 FE 69 AC |  if_e	wrlong	#255, fp
20ab0     08 4E 85 A1 |  if_e	sub	fp, #8
20ab4     38 01 90 AD |  if_e	jmp	#LR__2575
20ab8                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
20ab8     08 4E 05 F1 | 	add	fp, #8
20abc     A7 14 02 FB | 	rdlong	arg02, fp
20ac0     08 4E 85 F1 | 	sub	fp, #8
20ac4     1C 14 0E F2 | 	cmp	arg02, #28 wz
20ac8     28 00 90 5D |  if_ne	jmp	#LR__2570
20acc     08 4E 05 F1 | 	add	fp, #8
20ad0     A7 3C 68 FC | 	wrlong	#30, fp
20ad4     08 4E 85 F1 | 	sub	fp, #8
20ad8     A7 12 02 FB | 	rdlong	arg01, fp
20adc     09 13 52 F6 | 	abs	arg01, arg01 wc
20ae0     1F 28 C6 C9 |  if_b	decod	local02, #31
20ae4     00 28 06 36 |  if_ae	mov	local02, #0
20ae8     F8 88 B0 FD | 	call	#__system___float_fromuns
20aec     14 FB 61 F5 | 	xor	result1, local02
20af0     A7 FA 61 FC | 	wrlong	result1, fp
20af4                 | LR__2570
20af4                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
20af4     08 4E 05 F1 | 	add	fp, #8
20af8     A7 14 02 FB | 	rdlong	arg02, fp
20afc     08 4E 85 F1 | 	sub	fp, #8
20b00     1D 14 0E F2 | 	cmp	arg02, #29 wz
20b04     18 00 90 5D |  if_ne	jmp	#LR__2571
20b08     08 4E 05 F1 | 	add	fp, #8
20b0c     A7 3C 68 FC | 	wrlong	#30, fp
20b10     08 4E 85 F1 | 	sub	fp, #8
20b14     A7 12 02 FB | 	rdlong	arg01, fp
20b18     C8 88 B0 FD | 	call	#__system___float_fromuns
20b1c     A7 FA 61 FC | 	wrlong	result1, fp
20b20                 | LR__2571
20b20                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
20b20     14 4E 05 F1 | 	add	fp, #20
20b24     A7 14 02 FB | 	rdlong	arg02, fp
20b28     14 4E 85 F1 | 	sub	fp, #20
20b2c     1C 14 0E F2 | 	cmp	arg02, #28 wz
20b30     34 00 90 5D |  if_ne	jmp	#LR__2572
20b34     14 4E 05 F1 | 	add	fp, #20
20b38     A7 3C 68 FC | 	wrlong	#30, fp
20b3c     08 4E 85 F1 | 	sub	fp, #8
20b40     A7 12 02 FB | 	rdlong	arg01, fp
20b44     0C 4E 85 F1 | 	sub	fp, #12
20b48     09 13 52 F6 | 	abs	arg01, arg01 wc
20b4c     1F 28 C6 C9 |  if_b	decod	local02, #31
20b50     00 28 06 36 |  if_ae	mov	local02, #0
20b54     8C 88 B0 FD | 	call	#__system___float_fromuns
20b58     14 FB 61 F5 | 	xor	result1, local02
20b5c     0C 4E 05 F1 | 	add	fp, #12
20b60     A7 FA 61 FC | 	wrlong	result1, fp
20b64     0C 4E 85 F1 | 	sub	fp, #12
20b68                 | LR__2572
20b68                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
20b68     14 4E 05 F1 | 	add	fp, #20
20b6c     A7 14 02 FB | 	rdlong	arg02, fp
20b70     14 4E 85 F1 | 	sub	fp, #20
20b74     1D 14 0E F2 | 	cmp	arg02, #29 wz
20b78     24 00 90 5D |  if_ne	jmp	#LR__2573
20b7c     14 4E 05 F1 | 	add	fp, #20
20b80     A7 3C 68 FC | 	wrlong	#30, fp
20b84     08 4E 85 F1 | 	sub	fp, #8
20b88     A7 12 02 FB | 	rdlong	arg01, fp
20b8c     0C 4E 85 F1 | 	sub	fp, #12
20b90     50 88 B0 FD | 	call	#__system___float_fromuns
20b94     0C 4E 05 F1 | 	add	fp, #12
20b98     A7 FA 61 FC | 	wrlong	result1, fp
20b9c     0C 4E 85 F1 | 	sub	fp, #12
20ba0                 | LR__2573
20ba0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
20ba0     08 4E 05 F1 | 	add	fp, #8
20ba4     A7 14 02 FB | 	rdlong	arg02, fp
20ba8     08 4E 85 F1 | 	sub	fp, #8
20bac     1E 14 0E F2 | 	cmp	arg02, #30 wz
20bb0     14 4E 05 A1 |  if_e	add	fp, #20
20bb4     A7 26 02 AB |  if_e	rdlong	local01, fp
20bb8     14 4E 85 A1 |  if_e	sub	fp, #20
20bbc     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
20bc0     1C 00 90 5D |  if_ne	jmp	#LR__2574
20bc4     A7 12 02 FB | 	rdlong	arg01, fp
20bc8     0C 4E 05 F1 | 	add	fp, #12
20bcc     A7 14 02 FB | 	rdlong	arg02, fp
20bd0     0C 4E 85 F1 | 	sub	fp, #12
20bd4     18 9B B0 FD | 	call	#__system____builtin_powf
20bd8     A7 FA 61 FC | 	wrlong	result1, fp
20bdc     10 00 90 FD | 	jmp	#LR__2575
20be0                 | LR__2574
20be0     A7 1A 68 FC | 	wrlong	#13, fp
20be4     08 4E 05 F1 | 	add	fp, #8
20be8     A7 FE 69 FC | 	wrlong	#255, fp
20bec     08 4E 85 F1 | 	sub	fp, #8
20bf0                 | LR__2575
20bf0     A7 12 02 F6 | 	mov	arg01, fp
20bf4     7C CA BE FD | 	call	#_push
20bf8     A7 F0 03 F6 | 	mov	ptra, fp
20bfc     B2 00 A0 FD | 	call	#popregs_
20c00                 | _do_power_ret
20c00     2D 00 64 FD | 	ret
20c04                 | 
20c04                 | ' 
20c04                 | ' '--------------------------------- SHL
20c04                 | ' 
20c04                 | ' sub do_shl 
20c04                 | _do_shl
20c04     03 4A 05 F6 | 	mov	COUNT_, #3
20c08     A8 00 A0 FD | 	call	#pushregs_
20c0c     18 F0 07 F1 | 	add	ptra, #24
20c10     C8 C9 BE FD | 	call	#_pop
20c14     FD 12 02 F6 | 	mov	arg01, result1
20c18     FE 26 02 F6 | 	mov	local01, result2
20c1c     FF 28 02 F6 | 	mov	local02, result3
20c20     0C 4E 05 F1 | 	add	fp, #12
20c24     A7 12 62 FC | 	wrlong	arg01, fp
20c28     04 4E 05 F1 | 	add	fp, #4
20c2c     A7 26 62 FC | 	wrlong	local01, fp
20c30     04 4E 05 F1 | 	add	fp, #4
20c34     A7 28 62 FC | 	wrlong	local02, fp
20c38     14 4E 85 F1 | 	sub	fp, #20
20c3c     9C C9 BE FD | 	call	#_pop
20c40     FF 2A 02 F6 | 	mov	local03, result3
20c44     A7 FA 61 FC | 	wrlong	result1, fp
20c48     04 4E 05 F1 | 	add	fp, #4
20c4c     A7 FC 61 FC | 	wrlong	result2, fp
20c50     04 4E 05 F1 | 	add	fp, #4
20c54     A7 2A 62 FC | 	wrlong	local03, fp
20c58                 | ' 
20c58                 | ' t2=pop()
20c58                 | ' t1=pop()
20c58                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
20c58     08 4E 85 F1 | 	sub	fp, #8
20c5c     1C 2A 0E F2 | 	cmp	local03, #28 wz
20c60     A7 2A 02 AB |  if_e	rdlong	local03, fp
20c64     A7 2A 62 AC |  if_e	wrlong	local03, fp
20c68     08 4E 05 A1 |  if_e	add	fp, #8
20c6c     A7 3A 68 AC |  if_e	wrlong	#29, fp
20c70     08 4E 85 A1 |  if_e	sub	fp, #8
20c74                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
20c74     14 4E 05 F1 | 	add	fp, #20
20c78     A7 2A 02 FB | 	rdlong	local03, fp
20c7c     14 4E 85 F1 | 	sub	fp, #20
20c80     1C 2A 0E F2 | 	cmp	local03, #28 wz
20c84     18 00 90 5D |  if_ne	jmp	#LR__2580
20c88     0C 4E 05 F1 | 	add	fp, #12
20c8c     A7 2A 02 FB | 	rdlong	local03, fp
20c90     A7 2A 62 FC | 	wrlong	local03, fp
20c94     08 4E 05 F1 | 	add	fp, #8
20c98     A7 3A 68 FC | 	wrlong	#29, fp
20c9c     14 4E 85 F1 | 	sub	fp, #20
20ca0                 | LR__2580
20ca0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
20ca0     08 4E 05 F1 | 	add	fp, #8
20ca4     A7 2A 02 FB | 	rdlong	local03, fp
20ca8     08 4E 85 F1 | 	sub	fp, #8
20cac     1F 2A 0E F2 | 	cmp	local03, #31 wz
20cb0     14 4E 05 51 |  if_ne	add	fp, #20
20cb4     A7 28 02 5B |  if_ne	rdlong	local02, fp
20cb8     14 4E 85 51 |  if_ne	sub	fp, #20
20cbc     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
20cc0     08 4E 05 51 |  if_ne	add	fp, #8
20cc4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20cc8     08 4E 85 51 |  if_ne	sub	fp, #8
20ccc     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
20cd0     14 4E 05 51 |  if_ne	add	fp, #20
20cd4     14 4E 85 51 |  if_ne	sub	fp, #20
20cd8     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
20cdc     A7 0C 68 AC |  if_e	wrlong	#6, fp
20ce0     08 4E 05 A1 |  if_e	add	fp, #8
20ce4     A7 FE 69 AC |  if_e	wrlong	#255, fp
20ce8     08 4E 85 A1 |  if_e	sub	fp, #8
20cec     18 00 90 AD |  if_e	jmp	#LR__2581
20cf0     A7 2A 02 FB | 	rdlong	local03, fp
20cf4     0C 4E 05 F1 | 	add	fp, #12
20cf8     A7 26 02 FB | 	rdlong	local01, fp
20cfc     0C 4E 85 F1 | 	sub	fp, #12
20d00     13 2B 62 F0 | 	shl	local03, local01
20d04     A7 2A 62 FC | 	wrlong	local03, fp
20d08                 | LR__2581
20d08     A7 12 02 F6 | 	mov	arg01, fp
20d0c     64 C9 BE FD | 	call	#_push
20d10     A7 F0 03 F6 | 	mov	ptra, fp
20d14     B2 00 A0 FD | 	call	#popregs_
20d18                 | _do_shl_ret
20d18     2D 00 64 FD | 	ret
20d1c                 | 
20d1c                 | ' 
20d1c                 | ' '--------------------------------- SHR
20d1c                 | ' 
20d1c                 | ' sub do_shr 
20d1c                 | _do_shr
20d1c     03 4A 05 F6 | 	mov	COUNT_, #3
20d20     A8 00 A0 FD | 	call	#pushregs_
20d24     18 F0 07 F1 | 	add	ptra, #24
20d28     B0 C8 BE FD | 	call	#_pop
20d2c     FD 12 02 F6 | 	mov	arg01, result1
20d30     FE 26 02 F6 | 	mov	local01, result2
20d34     FF 28 02 F6 | 	mov	local02, result3
20d38     0C 4E 05 F1 | 	add	fp, #12
20d3c     A7 12 62 FC | 	wrlong	arg01, fp
20d40     04 4E 05 F1 | 	add	fp, #4
20d44     A7 26 62 FC | 	wrlong	local01, fp
20d48     04 4E 05 F1 | 	add	fp, #4
20d4c     A7 28 62 FC | 	wrlong	local02, fp
20d50     14 4E 85 F1 | 	sub	fp, #20
20d54     84 C8 BE FD | 	call	#_pop
20d58     FF 2A 02 F6 | 	mov	local03, result3
20d5c     A7 FA 61 FC | 	wrlong	result1, fp
20d60     04 4E 05 F1 | 	add	fp, #4
20d64     A7 FC 61 FC | 	wrlong	result2, fp
20d68     04 4E 05 F1 | 	add	fp, #4
20d6c     A7 2A 62 FC | 	wrlong	local03, fp
20d70                 | ' 
20d70                 | ' t2=pop()
20d70                 | ' t1=pop()
20d70                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
20d70     08 4E 85 F1 | 	sub	fp, #8
20d74     1C 2A 0E F2 | 	cmp	local03, #28 wz
20d78     A7 2A 02 AB |  if_e	rdlong	local03, fp
20d7c     A7 2A 62 AC |  if_e	wrlong	local03, fp
20d80     08 4E 05 A1 |  if_e	add	fp, #8
20d84     A7 3A 68 AC |  if_e	wrlong	#29, fp
20d88     08 4E 85 A1 |  if_e	sub	fp, #8
20d8c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
20d8c     14 4E 05 F1 | 	add	fp, #20
20d90     A7 2A 02 FB | 	rdlong	local03, fp
20d94     14 4E 85 F1 | 	sub	fp, #20
20d98     1C 2A 0E F2 | 	cmp	local03, #28 wz
20d9c     18 00 90 5D |  if_ne	jmp	#LR__2590
20da0     0C 4E 05 F1 | 	add	fp, #12
20da4     A7 2A 02 FB | 	rdlong	local03, fp
20da8     A7 2A 62 FC | 	wrlong	local03, fp
20dac     08 4E 05 F1 | 	add	fp, #8
20db0     A7 3A 68 FC | 	wrlong	#29, fp
20db4     14 4E 85 F1 | 	sub	fp, #20
20db8                 | LR__2590
20db8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
20db8     08 4E 05 F1 | 	add	fp, #8
20dbc     A7 2A 02 FB | 	rdlong	local03, fp
20dc0     08 4E 85 F1 | 	sub	fp, #8
20dc4     1F 2A 0E F2 | 	cmp	local03, #31 wz
20dc8     14 4E 05 51 |  if_ne	add	fp, #20
20dcc     A7 28 02 5B |  if_ne	rdlong	local02, fp
20dd0     14 4E 85 51 |  if_ne	sub	fp, #20
20dd4     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
20dd8     08 4E 05 51 |  if_ne	add	fp, #8
20ddc     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20de0     08 4E 85 51 |  if_ne	sub	fp, #8
20de4     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
20de8     14 4E 05 51 |  if_ne	add	fp, #20
20dec     14 4E 85 51 |  if_ne	sub	fp, #20
20df0     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
20df4     A7 0C 68 AC |  if_e	wrlong	#6, fp
20df8     08 4E 05 A1 |  if_e	add	fp, #8
20dfc     A7 FE 69 AC |  if_e	wrlong	#255, fp
20e00     08 4E 85 A1 |  if_e	sub	fp, #8
20e04     18 00 90 AD |  if_e	jmp	#LR__2591
20e08     A7 2A 02 FB | 	rdlong	local03, fp
20e0c     0C 4E 05 F1 | 	add	fp, #12
20e10     A7 26 02 FB | 	rdlong	local01, fp
20e14     0C 4E 85 F1 | 	sub	fp, #12
20e18     13 2B 42 F0 | 	shr	local03, local01
20e1c     A7 2A 62 FC | 	wrlong	local03, fp
20e20                 | LR__2591
20e20     A7 12 02 F6 | 	mov	arg01, fp
20e24     4C C8 BE FD | 	call	#_push
20e28     A7 F0 03 F6 | 	mov	ptra, fp
20e2c     B2 00 A0 FD | 	call	#popregs_
20e30                 | _do_shr_ret
20e30     2D 00 64 FD | 	ret
20e34                 | 
20e34                 | ' 
20e34                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
20e34                 | ' 
20e34                 | ' ''----------------------------------------------------------------------------------------------------
20e34                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
20e34                 | ' ''----------------------------------------------------------------------------------------------------
20e34                 | ' 
20e34                 | ' ''--------------------------- Command function pointers
20e34                 | ' 
20e34                 | ' sub init_commands
20e34                 | _init_commands
20e34                 | ' 
20e34                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
20e34     00 00 06 F6 | 	mov	_var01, #0
20e38     97 16 48 FB | 	callpa	#(@LR__2601-@LR__2600)>>2,fcache_load_ptr_
20e3c                 | LR__2600
20e3c     00 FB 01 F6 | 	mov	result1, _var01
20e40     02 FA 65 F0 | 	shl	result1, #2
20e44     43 00 00 FF 
20e48     60 E4 05 F1 | 	add	objptr, ##34400
20e4c     F2 FA 01 F1 | 	add	result1, objptr
20e50     43 00 00 FF 
20e54     60 E4 85 F1 | 	sub	objptr, ##34400
20e58     FD E4 61 FC | 	wrlong	objptr, result1
20e5c     01 00 06 F1 | 	add	_var01, #1
20e60     00 01 56 F2 | 	cmps	_var01, #256 wc
20e64     D4 FF 9F CD |  if_b	jmp	#LR__2600
20e68                 | LR__2601
20e68     F2 FA 01 F6 | 	mov	result1, objptr
20e6c     14 FA 25 F4 | 	bith	result1, #20
20e70     43 00 00 FF 
20e74     64 E4 05 F1 | 	add	objptr, ##34404
20e78     F2 FA 61 FC | 	wrlong	result1, objptr
20e7c     43 00 00 FF 
20e80     64 E4 85 F1 | 	sub	objptr, ##34404
20e84     F2 FA 01 F6 | 	mov	result1, objptr
20e88     15 FA 25 F4 | 	bith	result1, #21
20e8c     43 00 00 FF 
20e90     68 E4 05 F1 | 	add	objptr, ##34408
20e94     F2 FA 61 FC | 	wrlong	result1, objptr
20e98     43 00 00 FF 
20e9c     68 E4 85 F1 | 	sub	objptr, ##34408
20ea0     F2 FA 01 F6 | 	mov	result1, objptr
20ea4     34 FA 25 F4 | 	bith	result1, #52
20ea8     43 00 00 FF 
20eac     6C E4 05 F1 | 	add	objptr, ##34412
20eb0     F2 FA 61 FC | 	wrlong	result1, objptr
20eb4     43 00 00 FF 
20eb8     6C E4 85 F1 | 	sub	objptr, ##34412
20ebc     F2 FA 01 F6 | 	mov	result1, objptr
20ec0     16 FA 25 F4 | 	bith	result1, #22
20ec4     43 00 00 FF 
20ec8     74 E4 05 F1 | 	add	objptr, ##34420
20ecc     F2 FA 61 FC | 	wrlong	result1, objptr
20ed0     43 00 00 FF 
20ed4     74 E4 85 F1 | 	sub	objptr, ##34420
20ed8     F2 FA 01 F6 | 	mov	result1, objptr
20edc     00 28 00 FF 
20ee0     00 FA 45 F5 | 	or	result1, ##5242880
20ee4     43 00 00 FF 
20ee8     78 E4 05 F1 | 	add	objptr, ##34424
20eec     F2 FA 61 FC | 	wrlong	result1, objptr
20ef0     43 00 00 FF 
20ef4     78 E4 85 F1 | 	sub	objptr, ##34424
20ef8     F2 FA 01 F6 | 	mov	result1, objptr
20efc     35 FA 25 F4 | 	bith	result1, #53
20f00     43 00 00 FF 
20f04     7C E4 05 F1 | 	add	objptr, ##34428
20f08     F2 FA 61 FC | 	wrlong	result1, objptr
20f0c     43 00 00 FF 
20f10     7C E4 85 F1 | 	sub	objptr, ##34428
20f14     F2 FA 01 F6 | 	mov	result1, objptr
20f18     54 FA 25 F4 | 	bith	result1, #84
20f1c     43 00 00 FF 
20f20     80 E4 05 F1 | 	add	objptr, ##34432
20f24     F2 FA 61 FC | 	wrlong	result1, objptr
20f28     43 00 00 FF 
20f2c     80 E4 85 F1 | 	sub	objptr, ##34432
20f30     F2 FA 01 F6 | 	mov	result1, objptr
20f34     17 FA 25 F4 | 	bith	result1, #23
20f38     43 00 00 FF 
20f3c     84 E4 05 F1 | 	add	objptr, ##34436
20f40     F2 FA 61 FC | 	wrlong	result1, objptr
20f44     43 00 00 FF 
20f48     84 E4 85 F1 | 	sub	objptr, ##34436
20f4c     F2 FA 01 F6 | 	mov	result1, objptr
20f50     00 48 00 FF 
20f54     00 FA 45 F5 | 	or	result1, ##9437184
20f58     43 00 00 FF 
20f5c     88 E4 05 F1 | 	add	objptr, ##34440
20f60     F2 FA 61 FC | 	wrlong	result1, objptr
20f64     43 00 00 FF 
20f68     88 E4 85 F1 | 	sub	objptr, ##34440
20f6c     F2 FA 01 F6 | 	mov	result1, objptr
20f70     00 50 00 FF 
20f74     00 FA 45 F5 | 	or	result1, ##10485760
20f78     43 00 00 FF 
20f7c     8C E4 05 F1 | 	add	objptr, ##34444
20f80     F2 FA 61 FC | 	wrlong	result1, objptr
20f84     43 00 00 FF 
20f88     8C E4 85 F1 | 	sub	objptr, ##34444
20f8c     F2 FA 01 F6 | 	mov	result1, objptr
20f90     00 58 00 FF 
20f94     00 FA 45 F5 | 	or	result1, ##11534336
20f98     43 00 00 FF 
20f9c     90 E4 05 F1 | 	add	objptr, ##34448
20fa0     F2 FA 61 FC | 	wrlong	result1, objptr
20fa4     43 00 00 FF 
20fa8     90 E4 85 F1 | 	sub	objptr, ##34448
20fac     F2 FA 01 F6 | 	mov	result1, objptr
20fb0     36 FA 25 F4 | 	bith	result1, #54
20fb4     43 00 00 FF 
20fb8     A4 E4 05 F1 | 	add	objptr, ##34468
20fbc     F2 FA 61 FC | 	wrlong	result1, objptr
20fc0     43 00 00 FF 
20fc4     A4 E4 85 F1 | 	sub	objptr, ##34468
20fc8     F2 FA 01 F6 | 	mov	result1, objptr
20fcc     00 68 00 FF 
20fd0     00 FA 45 F5 | 	or	result1, ##13631488
20fd4     43 00 00 FF 
20fd8     D4 E4 05 F1 | 	add	objptr, ##34516
20fdc     F2 FA 61 FC | 	wrlong	result1, objptr
20fe0     43 00 00 FF 
20fe4     D4 E4 85 F1 | 	sub	objptr, ##34516
20fe8     F2 FA 01 F6 | 	mov	result1, objptr
20fec     00 68 00 FF 
20ff0     00 FA 45 F5 | 	or	result1, ##13631488
20ff4     43 00 00 FF 
20ff8     D0 E4 05 F1 | 	add	objptr, ##34512
20ffc     F2 FA 61 FC | 	wrlong	result1, objptr
21000     43 00 00 FF 
21004     D0 E4 85 F1 | 	sub	objptr, ##34512
21008     F2 FA 01 F6 | 	mov	result1, objptr
2100c     00 68 00 FF 
21010     00 FA 45 F5 | 	or	result1, ##13631488
21014     43 00 00 FF 
21018     D8 E4 05 F1 | 	add	objptr, ##34520
2101c     F2 FA 61 FC | 	wrlong	result1, objptr
21020     43 00 00 FF 
21024     D8 E4 85 F1 | 	sub	objptr, ##34520
21028     F2 FA 01 F6 | 	mov	result1, objptr
2102c     00 68 00 FF 
21030     00 FA 45 F5 | 	or	result1, ##13631488
21034     43 00 00 FF 
21038     DC E4 05 F1 | 	add	objptr, ##34524
2103c     F2 FA 61 FC | 	wrlong	result1, objptr
21040     43 00 00 FF 
21044     DC E4 85 F1 | 	sub	objptr, ##34524
21048     F2 FA 01 F6 | 	mov	result1, objptr
2104c     00 68 00 FF 
21050     00 FA 45 F5 | 	or	result1, ##13631488
21054     43 00 00 FF 
21058     0C E5 05 F1 | 	add	objptr, ##34572
2105c     F2 FA 61 FC | 	wrlong	result1, objptr
21060     43 00 00 FF 
21064     0C E5 85 F1 | 	sub	objptr, ##34572
21068     F2 FA 01 F6 | 	mov	result1, objptr
2106c     55 FA 25 F4 | 	bith	result1, #85
21070     43 00 00 FF 
21074     BC E4 05 F1 | 	add	objptr, ##34492
21078     F2 FA 61 FC | 	wrlong	result1, objptr
2107c     43 00 00 FF 
21080     BC E4 85 F1 | 	sub	objptr, ##34492
21084     F2 FA 01 F6 | 	mov	result1, objptr
21088     00 68 00 FF 
2108c     00 FA 45 F5 | 	or	result1, ##13631488
21090     43 00 00 FF 
21094     10 E5 05 F1 | 	add	objptr, ##34576
21098     F2 FA 61 FC | 	wrlong	result1, objptr
2109c     43 00 00 FF 
210a0     10 E5 85 F1 | 	sub	objptr, ##34576
210a4     F2 FA 01 F6 | 	mov	result1, objptr
210a8     00 68 00 FF 
210ac     00 FA 45 F5 | 	or	result1, ##13631488
210b0     43 00 00 FF 
210b4     E0 E4 05 F1 | 	add	objptr, ##34528
210b8     F2 FA 61 FC | 	wrlong	result1, objptr
210bc     43 00 00 FF 
210c0     E0 E4 85 F1 | 	sub	objptr, ##34528
210c4     F2 FA 01 F6 | 	mov	result1, objptr
210c8     00 68 00 FF 
210cc     00 FA 45 F5 | 	or	result1, ##13631488
210d0     43 00 00 FF 
210d4     E4 E4 05 F1 | 	add	objptr, ##34532
210d8     F2 FA 61 FC | 	wrlong	result1, objptr
210dc     43 00 00 FF 
210e0     E4 E4 85 F1 | 	sub	objptr, ##34532
210e4     F2 FA 01 F6 | 	mov	result1, objptr
210e8     00 68 00 FF 
210ec     00 FA 45 F5 | 	or	result1, ##13631488
210f0     43 00 00 FF 
210f4     E8 E4 05 F1 | 	add	objptr, ##34536
210f8     F2 FA 61 FC | 	wrlong	result1, objptr
210fc     43 00 00 FF 
21100     E8 E4 85 F1 | 	sub	objptr, ##34536
21104     F2 FA 01 F6 | 	mov	result1, objptr
21108     74 FA 25 F4 | 	bith	result1, #116
2110c     43 00 00 FF 
21110     60 E5 05 F1 | 	add	objptr, ##34656
21114     F2 FA 61 FC | 	wrlong	result1, objptr
21118     43 00 00 FF 
2111c     60 E5 85 F1 | 	sub	objptr, ##34656
21120     F2 FA 01 F6 | 	mov	result1, objptr
21124     18 FA 25 F4 | 	bith	result1, #24
21128     43 00 00 FF 
2112c     64 E5 05 F1 | 	add	objptr, ##34660
21130     F2 FA 61 FC | 	wrlong	result1, objptr
21134     43 00 00 FF 
21138     64 E5 85 F1 | 	sub	objptr, ##34660
2113c     F2 FA 01 F6 | 	mov	result1, objptr
21140     00 88 00 FF 
21144     00 FA 45 F5 | 	or	result1, ##17825792
21148     43 00 00 FF 
2114c     68 E5 05 F1 | 	add	objptr, ##34664
21150     F2 FA 61 FC | 	wrlong	result1, objptr
21154     43 00 00 FF 
21158     68 E5 85 F1 | 	sub	objptr, ##34664
2115c     F2 FA 01 F6 | 	mov	result1, objptr
21160     00 90 00 FF 
21164     00 FA 45 F5 | 	or	result1, ##18874368
21168     43 00 00 FF 
2116c     6C E5 05 F1 | 	add	objptr, ##34668
21170     F2 FA 61 FC | 	wrlong	result1, objptr
21174     43 00 00 FF 
21178     6C E5 85 F1 | 	sub	objptr, ##34668
2117c     F2 FA 01 F6 | 	mov	result1, objptr
21180     00 98 00 FF 
21184     00 FA 45 F5 | 	or	result1, ##19922944
21188     43 00 00 FF 
2118c     70 E5 05 F1 | 	add	objptr, ##34672
21190     F2 FA 61 FC | 	wrlong	result1, objptr
21194     43 00 00 FF 
21198     70 E5 85 F1 | 	sub	objptr, ##34672
2119c     F2 FA 01 F6 | 	mov	result1, objptr
211a0     00 A0 00 FF 
211a4     00 FA 45 F5 | 	or	result1, ##20971520
211a8     43 00 00 FF 
211ac     74 E5 05 F1 | 	add	objptr, ##34676
211b0     F2 FA 61 FC | 	wrlong	result1, objptr
211b4     43 00 00 FF 
211b8     74 E5 85 F1 | 	sub	objptr, ##34676
211bc     F2 FA 01 F6 | 	mov	result1, objptr
211c0     00 A8 00 FF 
211c4     00 FA 45 F5 | 	or	result1, ##22020096
211c8     43 00 00 FF 
211cc     78 E5 05 F1 | 	add	objptr, ##34680
211d0     F2 FA 61 FC | 	wrlong	result1, objptr
211d4     43 00 00 FF 
211d8     78 E5 85 F1 | 	sub	objptr, ##34680
211dc     F2 FA 01 F6 | 	mov	result1, objptr
211e0     00 B0 00 FF 
211e4     00 FA 45 F5 | 	or	result1, ##23068672
211e8     43 00 00 FF 
211ec     7C E5 05 F1 | 	add	objptr, ##34684
211f0     F2 FA 61 FC | 	wrlong	result1, objptr
211f4     43 00 00 FF 
211f8     7C E5 85 F1 | 	sub	objptr, ##34684
211fc     F2 FA 01 F6 | 	mov	result1, objptr
21200     00 B8 00 FF 
21204     00 FA 45 F5 | 	or	result1, ##24117248
21208     43 00 00 FF 
2120c     80 E5 05 F1 | 	add	objptr, ##34688
21210     F2 FA 61 FC | 	wrlong	result1, objptr
21214     43 00 00 FF 
21218     80 E5 85 F1 | 	sub	objptr, ##34688
2121c     F2 FA 01 F6 | 	mov	result1, objptr
21220     37 FA 25 F4 | 	bith	result1, #55
21224     43 00 00 FF 
21228     84 E5 05 F1 | 	add	objptr, ##34692
2122c     F2 FA 61 FC | 	wrlong	result1, objptr
21230     43 00 00 FF 
21234     84 E5 85 F1 | 	sub	objptr, ##34692
21238     F2 FA 01 F6 | 	mov	result1, objptr
2123c     00 C8 00 FF 
21240     00 FA 45 F5 | 	or	result1, ##26214400
21244     43 00 00 FF 
21248     88 E5 05 F1 | 	add	objptr, ##34696
2124c     F2 FA 61 FC | 	wrlong	result1, objptr
21250     43 00 00 FF 
21254     88 E5 85 F1 | 	sub	objptr, ##34696
21258     F2 FA 01 F6 | 	mov	result1, objptr
2125c     00 D0 00 FF 
21260     00 FA 45 F5 | 	or	result1, ##27262976
21264     43 00 00 FF 
21268     8C E5 05 F1 | 	add	objptr, ##34700
2126c     F2 FA 61 FC | 	wrlong	result1, objptr
21270     43 00 00 FF 
21274     8C E5 85 F1 | 	sub	objptr, ##34700
21278     F2 FA 01 F6 | 	mov	result1, objptr
2127c     00 D8 00 FF 
21280     00 FA 45 F5 | 	or	result1, ##28311552
21284     43 00 00 FF 
21288     90 E5 05 F1 | 	add	objptr, ##34704
2128c     F2 FA 61 FC | 	wrlong	result1, objptr
21290     43 00 00 FF 
21294     90 E5 85 F1 | 	sub	objptr, ##34704
21298     F2 FA 01 F6 | 	mov	result1, objptr
2129c     56 FA 25 F4 | 	bith	result1, #86
212a0     43 00 00 FF 
212a4     94 E5 05 F1 | 	add	objptr, ##34708
212a8     F2 FA 61 FC | 	wrlong	result1, objptr
212ac     43 00 00 FF 
212b0     94 E5 85 F1 | 	sub	objptr, ##34708
212b4     F2 FA 01 F6 | 	mov	result1, objptr
212b8     00 E8 00 FF 
212bc     00 FA 45 F5 | 	or	result1, ##30408704
212c0     45 00 00 FF 
212c4     5C E4 05 F1 | 	add	objptr, ##35420
212c8     F2 FA 61 FC | 	wrlong	result1, objptr
212cc     45 00 00 FF 
212d0     5C E4 85 F1 | 	sub	objptr, ##35420
212d4     F2 FA 01 F6 | 	mov	result1, objptr
212d8     75 FA 25 F4 | 	bith	result1, #117
212dc     43 00 00 FF 
212e0     98 E5 05 F1 | 	add	objptr, ##34712
212e4     F2 FA 61 FC | 	wrlong	result1, objptr
212e8     43 00 00 FF 
212ec     98 E5 85 F1 | 	sub	objptr, ##34712
212f0     F2 FA 01 F6 | 	mov	result1, objptr
212f4     94 FA 25 F4 | 	bith	result1, #148
212f8     43 00 00 FF 
212fc     AC E5 05 F1 | 	add	objptr, ##34732
21300     F2 FA 61 FC | 	wrlong	result1, objptr
21304     43 00 00 FF 
21308     AC E5 85 F1 | 	sub	objptr, ##34732
2130c     F2 FA 01 F6 | 	mov	result1, objptr
21310     19 FA 25 F4 | 	bith	result1, #25
21314     43 00 00 FF 
21318     9C E5 05 F1 | 	add	objptr, ##34716
2131c     F2 FA 61 FC | 	wrlong	result1, objptr
21320     43 00 00 FF 
21324     9C E5 85 F1 | 	sub	objptr, ##34716
21328     F2 FA 01 F6 | 	mov	result1, objptr
2132c     00 08 01 FF 
21330     00 FA 45 F5 | 	or	result1, ##34603008
21334     43 00 00 FF 
21338     B8 E4 05 F1 | 	add	objptr, ##34488
2133c     F2 FA 61 FC | 	wrlong	result1, objptr
21340     43 00 00 FF 
21344     B8 E4 85 F1 | 	sub	objptr, ##34488
21348     F2 FA 01 F6 | 	mov	result1, objptr
2134c     00 10 01 FF 
21350     00 FA 45 F5 | 	or	result1, ##35651584
21354     43 00 00 FF 
21358     A4 E5 05 F1 | 	add	objptr, ##34724
2135c     F2 FA 61 FC | 	wrlong	result1, objptr
21360     43 00 00 FF 
21364     A4 E5 85 F1 | 	sub	objptr, ##34724
21368     F2 FA 01 F6 | 	mov	result1, objptr
2136c     00 18 01 FF 
21370     00 FA 45 F5 | 	or	result1, ##36700160
21374     43 00 00 FF 
21378     A8 E5 05 F1 | 	add	objptr, ##34728
2137c     F2 FA 61 FC | 	wrlong	result1, objptr
21380     43 00 00 FF 
21384     A8 E5 85 F1 | 	sub	objptr, ##34728
21388     F2 FA 01 F6 | 	mov	result1, objptr
2138c     00 20 01 FF 
21390     00 FA 45 F5 | 	or	result1, ##37748736
21394     43 00 00 FF 
21398     B4 E5 05 F1 | 	add	objptr, ##34740
2139c     F2 FA 61 FC | 	wrlong	result1, objptr
213a0     43 00 00 FF 
213a4     B4 E5 85 F1 | 	sub	objptr, ##34740
213a8     F2 FA 01 F6 | 	mov	result1, objptr
213ac     00 28 01 FF 
213b0     00 FA 45 F5 | 	or	result1, ##38797312
213b4     43 00 00 FF 
213b8     B8 E5 05 F1 | 	add	objptr, ##34744
213bc     F2 FA 61 FC | 	wrlong	result1, objptr
213c0     43 00 00 FF 
213c4     B8 E5 85 F1 | 	sub	objptr, ##34744
213c8     F2 FA 01 F6 | 	mov	result1, objptr
213cc     00 30 01 FF 
213d0     00 FA 45 F5 | 	or	result1, ##39845888
213d4     43 00 00 FF 
213d8     BC E5 05 F1 | 	add	objptr, ##34748
213dc     F2 FA 61 FC | 	wrlong	result1, objptr
213e0     43 00 00 FF 
213e4     BC E5 85 F1 | 	sub	objptr, ##34748
213e8     F2 FA 01 F6 | 	mov	result1, objptr
213ec     00 38 01 FF 
213f0     00 FA 45 F5 | 	or	result1, ##40894464
213f4     43 00 00 FF 
213f8     C0 E5 05 F1 | 	add	objptr, ##34752
213fc     F2 FA 61 FC | 	wrlong	result1, objptr
21400     43 00 00 FF 
21404     C0 E5 85 F1 | 	sub	objptr, ##34752
21408     F2 FA 01 F6 | 	mov	result1, objptr
2140c     00 40 01 FF 
21410     00 FA 45 F5 | 	or	result1, ##41943040
21414     43 00 00 FF 
21418     C8 E5 05 F1 | 	add	objptr, ##34760
2141c     F2 FA 61 FC | 	wrlong	result1, objptr
21420     43 00 00 FF 
21424     C8 E5 85 F1 | 	sub	objptr, ##34760
21428     F2 FA 01 F6 | 	mov	result1, objptr
2142c     00 08 01 FF 
21430     00 FA 45 F5 | 	or	result1, ##34603008
21434     43 00 00 FF 
21438     CC E5 05 F1 | 	add	objptr, ##34764
2143c     F2 FA 61 FC | 	wrlong	result1, objptr
21440     43 00 00 FF 
21444     CC E5 85 F1 | 	sub	objptr, ##34764
21448     F2 FA 01 F6 | 	mov	result1, objptr
2144c     00 48 01 FF 
21450     00 FA 45 F5 | 	or	result1, ##42991616
21454     43 00 00 FF 
21458     CC E4 05 F1 | 	add	objptr, ##34508
2145c     F2 FA 61 FC | 	wrlong	result1, objptr
21460     43 00 00 FF 
21464     CC E4 85 F1 | 	sub	objptr, ##34508
21468     F2 FA 01 F6 | 	mov	result1, objptr
2146c     00 50 01 FF 
21470     00 FA 45 F5 | 	or	result1, ##44040192
21474     43 00 00 FF 
21478     FC E4 05 F1 | 	add	objptr, ##34556
2147c     F2 FA 61 FC | 	wrlong	result1, objptr
21480     43 00 00 FF 
21484     FC E4 85 F1 | 	sub	objptr, ##34556
21488     F2 FA 01 F6 | 	mov	result1, objptr
2148c     00 58 01 FF 
21490     00 FA 45 F5 | 	or	result1, ##45088768
21494     43 00 00 FF 
21498     F8 E4 05 F1 | 	add	objptr, ##34552
2149c     F2 FA 61 FC | 	wrlong	result1, objptr
214a0     43 00 00 FF 
214a4     F8 E4 85 F1 | 	sub	objptr, ##34552
214a8     F2 FA 01 F6 | 	mov	result1, objptr
214ac     00 60 01 FF 
214b0     00 FA 45 F5 | 	or	result1, ##46137344
214b4     43 00 00 FF 
214b8     9C E4 05 F1 | 	add	objptr, ##34460
214bc     F2 FA 61 FC | 	wrlong	result1, objptr
214c0     43 00 00 FF 
214c4     9C E4 85 F1 | 	sub	objptr, ##34460
214c8     F2 FA 01 F6 | 	mov	result1, objptr
214cc     00 68 01 FF 
214d0     00 FA 45 F5 | 	or	result1, ##47185920
214d4     43 00 00 FF 
214d8     A0 E4 05 F1 | 	add	objptr, ##34464
214dc     F2 FA 61 FC | 	wrlong	result1, objptr
214e0     43 00 00 FF 
214e4     A0 E4 85 F1 | 	sub	objptr, ##34464
214e8     F2 FA 01 F6 | 	mov	result1, objptr
214ec     00 70 01 FF 
214f0     00 FA 45 F5 | 	or	result1, ##48234496
214f4     43 00 00 FF 
214f8     08 E5 05 F1 | 	add	objptr, ##34568
214fc     F2 FA 61 FC | 	wrlong	result1, objptr
21500     43 00 00 FF 
21504     08 E5 85 F1 | 	sub	objptr, ##34568
21508     F2 FA 01 F6 | 	mov	result1, objptr
2150c     00 78 01 FF 
21510     00 FA 45 F5 | 	or	result1, ##49283072
21514     43 00 00 FF 
21518     B0 E5 05 F1 | 	add	objptr, ##34736
2151c     F2 FA 61 FC | 	wrlong	result1, objptr
21520     43 00 00 FF 
21524     B0 E5 85 F1 | 	sub	objptr, ##34736
21528     F2 FA 01 F6 | 	mov	result1, objptr
2152c     38 FA 25 F4 | 	bith	result1, #56
21530     43 00 00 FF 
21534     C4 E5 05 F1 | 	add	objptr, ##34756
21538     F2 FA 61 FC | 	wrlong	result1, objptr
2153c     43 00 00 FF 
21540     C4 E5 85 F1 | 	sub	objptr, ##34756
21544     F2 FA 01 F6 | 	mov	result1, objptr
21548     00 88 01 FF 
2154c     00 FA 45 F5 | 	or	result1, ##51380224
21550     43 00 00 FF 
21554     D0 E5 05 F1 | 	add	objptr, ##34768
21558     F2 FA 61 FC | 	wrlong	result1, objptr
2155c     43 00 00 FF 
21560     D0 E5 85 F1 | 	sub	objptr, ##34768
21564     F2 FA 01 F6 | 	mov	result1, objptr
21568     00 90 01 FF 
2156c     00 FA 45 F5 | 	or	result1, ##52428800
21570     43 00 00 FF 
21574     D4 E5 05 F1 | 	add	objptr, ##34772
21578     F2 FA 61 FC | 	wrlong	result1, objptr
2157c     43 00 00 FF 
21580     D4 E5 85 F1 | 	sub	objptr, ##34772
21584     F2 FA 01 F6 | 	mov	result1, objptr
21588     00 98 01 FF 
2158c     00 FA 45 F5 | 	or	result1, ##53477376
21590     43 00 00 FF 
21594     D8 E5 05 F1 | 	add	objptr, ##34776
21598     F2 FA 61 FC | 	wrlong	result1, objptr
2159c     43 00 00 FF 
215a0     D8 E5 85 F1 | 	sub	objptr, ##34776
215a4     F2 FA 01 F6 | 	mov	result1, objptr
215a8     00 A0 01 FF 
215ac     00 FA 45 F5 | 	or	result1, ##54525952
215b0     43 00 00 FF 
215b4     DC E5 05 F1 | 	add	objptr, ##34780
215b8     F2 FA 61 FC | 	wrlong	result1, objptr
215bc     43 00 00 FF 
215c0     DC E5 85 F1 | 	sub	objptr, ##34780
215c4     F2 FA 01 F6 | 	mov	result1, objptr
215c8     00 A8 01 FF 
215cc     00 FA 45 F5 | 	or	result1, ##55574528
215d0     43 00 00 FF 
215d4     E0 E5 05 F1 | 	add	objptr, ##34784
215d8     F2 FA 61 FC | 	wrlong	result1, objptr
215dc     43 00 00 FF 
215e0     E0 E5 85 F1 | 	sub	objptr, ##34784
215e4     F2 FA 01 F6 | 	mov	result1, objptr
215e8     00 B0 01 FF 
215ec     00 FA 45 F5 | 	or	result1, ##56623104
215f0     43 00 00 FF 
215f4     E4 E5 05 F1 | 	add	objptr, ##34788
215f8     F2 FA 61 FC | 	wrlong	result1, objptr
215fc     43 00 00 FF 
21600     E4 E5 85 F1 | 	sub	objptr, ##34788
21604     F2 FA 01 F6 | 	mov	result1, objptr
21608     94 FA 25 F4 | 	bith	result1, #148
2160c     43 00 00 FF 
21610     AC E5 05 F1 | 	add	objptr, ##34732
21614     F2 FA 61 FC | 	wrlong	result1, objptr
21618     43 00 00 FF 
2161c     AC E5 85 F1 | 	sub	objptr, ##34732
21620     F2 FA 01 F6 | 	mov	result1, objptr
21624     00 B8 01 FF 
21628     00 FA 45 F5 | 	or	result1, ##57671680
2162c     43 00 00 FF 
21630     EC E5 05 F1 | 	add	objptr, ##34796
21634     F2 FA 61 FC | 	wrlong	result1, objptr
21638     43 00 00 FF 
2163c     EC E5 85 F1 | 	sub	objptr, ##34796
21640     F2 FA 01 F6 | 	mov	result1, objptr
21644     57 FA 25 F4 | 	bith	result1, #87
21648     43 00 00 FF 
2164c     E8 E5 05 F1 | 	add	objptr, ##34792
21650     F2 FA 61 FC | 	wrlong	result1, objptr
21654     43 00 00 FF 
21658     E8 E5 85 F1 | 	sub	objptr, ##34792
2165c     F2 FA 01 F6 | 	mov	result1, objptr
21660     00 C8 01 FF 
21664     00 FA 45 F5 | 	or	result1, ##59768832
21668     44 00 00 FF 
2166c     00 E4 05 F1 | 	add	objptr, ##34816
21670     F2 FA 61 FC | 	wrlong	result1, objptr
21674     44 00 00 FF 
21678     00 E4 85 F1 | 	sub	objptr, ##34816
2167c     F2 FA 01 F6 | 	mov	result1, objptr
21680     00 D0 01 FF 
21684     00 FA 45 F5 | 	or	result1, ##60817408
21688     44 00 00 FF 
2168c     04 E4 05 F1 | 	add	objptr, ##34820
21690     F2 FA 61 FC | 	wrlong	result1, objptr
21694     44 00 00 FF 
21698     04 E4 85 F1 | 	sub	objptr, ##34820
2169c     F2 FA 01 F6 | 	mov	result1, objptr
216a0     00 D8 01 FF 
216a4     00 FA 45 F5 | 	or	result1, ##61865984
216a8     43 00 00 FF 
216ac     F0 E5 05 F1 | 	add	objptr, ##34800
216b0     F2 FA 61 FC | 	wrlong	result1, objptr
216b4     43 00 00 FF 
216b8     F0 E5 85 F1 | 	sub	objptr, ##34800
216bc     F2 FA 01 F6 | 	mov	result1, objptr
216c0     76 FA 25 F4 | 	bith	result1, #118
216c4     43 00 00 FF 
216c8     F4 E5 05 F1 | 	add	objptr, ##34804
216cc     F2 FA 61 FC | 	wrlong	result1, objptr
216d0     43 00 00 FF 
216d4     F4 E5 85 F1 | 	sub	objptr, ##34804
216d8     F2 FA 01 F6 | 	mov	result1, objptr
216dc     00 E8 01 FF 
216e0     00 FA 45 F5 | 	or	result1, ##63963136
216e4     43 00 00 FF 
216e8     F8 E5 05 F1 | 	add	objptr, ##34808
216ec     F2 FA 61 FC | 	wrlong	result1, objptr
216f0     43 00 00 FF 
216f4     F8 E5 85 F1 | 	sub	objptr, ##34808
216f8     F2 FA 01 F6 | 	mov	result1, objptr
216fc     95 FA 25 F4 | 	bith	result1, #149
21700     43 00 00 FF 
21704     FC E5 05 F1 | 	add	objptr, ##34812
21708     F2 FA 61 FC | 	wrlong	result1, objptr
2170c     43 00 00 FF 
21710     FC E5 85 F1 | 	sub	objptr, ##34812
21714     F2 FA 01 F6 | 	mov	result1, objptr
21718     B4 FA 25 F4 | 	bith	result1, #180
2171c     44 00 00 FF 
21720     0C E4 05 F1 | 	add	objptr, ##34828
21724     F2 FA 61 FC | 	wrlong	result1, objptr
21728     44 00 00 FF 
2172c     0C E4 85 F1 | 	sub	objptr, ##34828
21730     F2 FA 01 F6 | 	mov	result1, objptr
21734     1A FA 25 F4 | 	bith	result1, #26
21738     44 00 00 FF 
2173c     08 E4 05 F1 | 	add	objptr, ##34824
21740     F2 FA 61 FC | 	wrlong	result1, objptr
21744     44 00 00 FF 
21748     08 E4 85 F1 | 	sub	objptr, ##34824
2174c     F2 FA 01 F6 | 	mov	result1, objptr
21750     00 08 02 FF 
21754     00 FA 45 F5 | 	or	result1, ##68157440
21758     44 00 00 FF 
2175c     18 E4 05 F1 | 	add	objptr, ##34840
21760     F2 FA 61 FC | 	wrlong	result1, objptr
21764     44 00 00 FF 
21768     18 E4 85 F1 | 	sub	objptr, ##34840
2176c     F2 FA 01 F6 | 	mov	result1, objptr
21770     00 10 02 FF 
21774     00 FA 45 F5 | 	or	result1, ##69206016
21778     44 00 00 FF 
2177c     14 E4 05 F1 | 	add	objptr, ##34836
21780     F2 FA 61 FC | 	wrlong	result1, objptr
21784     44 00 00 FF 
21788     14 E4 85 F1 | 	sub	objptr, ##34836
2178c     F2 FA 01 F6 | 	mov	result1, objptr
21790     00 18 02 FF 
21794     00 FA 45 F5 | 	or	result1, ##70254592
21798     44 00 00 FF 
2179c     10 E4 05 F1 | 	add	objptr, ##34832
217a0     F2 FA 61 FC | 	wrlong	result1, objptr
217a4     44 00 00 FF 
217a8     10 E4 85 F1 | 	sub	objptr, ##34832
217ac     F2 FA 01 F6 | 	mov	result1, objptr
217b0     00 20 02 FF 
217b4     00 FA 45 F5 | 	or	result1, ##71303168
217b8     44 00 00 FF 
217bc     1C E4 05 F1 | 	add	objptr, ##34844
217c0     F2 FA 61 FC | 	wrlong	result1, objptr
217c4     44 00 00 FF 
217c8     1C E4 85 F1 | 	sub	objptr, ##34844
217cc     F2 FA 01 F6 | 	mov	result1, objptr
217d0     00 28 02 FF 
217d4     00 FA 45 F5 | 	or	result1, ##72351744
217d8     44 00 00 FF 
217dc     20 E4 05 F1 | 	add	objptr, ##34848
217e0     F2 FA 61 FC | 	wrlong	result1, objptr
217e4     44 00 00 FF 
217e8     20 E4 85 F1 | 	sub	objptr, ##34848
217ec     F2 FA 01 F6 | 	mov	result1, objptr
217f0     00 30 02 FF 
217f4     00 FA 45 F5 | 	or	result1, ##73400320
217f8     43 00 00 FF 
217fc     B4 E4 05 F1 | 	add	objptr, ##34484
21800     F2 FA 61 FC | 	wrlong	result1, objptr
21804     43 00 00 FF 
21808     B4 E4 85 F1 | 	sub	objptr, ##34484
2180c     F2 FA 01 F6 | 	mov	result1, objptr
21810     00 38 02 FF 
21814     00 FA 45 F5 | 	or	result1, ##74448896
21818     44 00 00 FF 
2181c     38 E4 05 F1 | 	add	objptr, ##34872
21820     F2 FA 61 FC | 	wrlong	result1, objptr
21824     44 00 00 FF 
21828     38 E4 85 F1 | 	sub	objptr, ##34872
2182c     F2 FA 01 F6 | 	mov	result1, objptr
21830     00 40 02 FF 
21834     00 FA 45 F5 | 	or	result1, ##75497472
21838     44 00 00 FF 
2183c     48 E4 05 F1 | 	add	objptr, ##34888
21840     F2 FA 61 FC | 	wrlong	result1, objptr
21844     44 00 00 FF 
21848     48 E4 85 F1 | 	sub	objptr, ##34888
2184c     F2 FA 01 F6 | 	mov	result1, objptr
21850     00 48 02 FF 
21854     00 FA 45 F5 | 	or	result1, ##76546048
21858     44 00 00 FF 
2185c     4C E4 05 F1 | 	add	objptr, ##34892
21860     F2 FA 61 FC | 	wrlong	result1, objptr
21864     44 00 00 FF 
21868     4C E4 85 F1 | 	sub	objptr, ##34892
2186c     F2 FA 01 F6 | 	mov	result1, objptr
21870     00 50 02 FF 
21874     00 FA 45 F5 | 	or	result1, ##77594624
21878     44 00 00 FF 
2187c     44 E4 05 F1 | 	add	objptr, ##34884
21880     F2 FA 61 FC | 	wrlong	result1, objptr
21884     44 00 00 FF 
21888     44 E4 85 F1 | 	sub	objptr, ##34884
2188c     F2 FA 01 F6 | 	mov	result1, objptr
21890     00 58 02 FF 
21894     00 FA 45 F5 | 	or	result1, ##78643200
21898     44 00 00 FF 
2189c     3C E4 05 F1 | 	add	objptr, ##34876
218a0     F2 FA 61 FC | 	wrlong	result1, objptr
218a4     44 00 00 FF 
218a8     3C E4 85 F1 | 	sub	objptr, ##34876
218ac     F2 FA 01 F6 | 	mov	result1, objptr
218b0     00 60 02 FF 
218b4     00 FA 45 F5 | 	or	result1, ##79691776
218b8     44 00 00 FF 
218bc     40 E4 05 F1 | 	add	objptr, ##34880
218c0     F2 FA 61 FC | 	wrlong	result1, objptr
218c4     44 00 00 FF 
218c8     40 E4 85 F1 | 	sub	objptr, ##34880
218cc     F2 FA 01 F6 | 	mov	result1, objptr
218d0     00 68 02 FF 
218d4     00 FA 45 F5 | 	or	result1, ##80740352
218d8     44 00 00 FF 
218dc     50 E4 05 F1 | 	add	objptr, ##34896
218e0     F2 FA 61 FC | 	wrlong	result1, objptr
218e4     44 00 00 FF 
218e8     50 E4 85 F1 | 	sub	objptr, ##34896
218ec     F2 FA 01 F6 | 	mov	result1, objptr
218f0     00 70 02 FF 
218f4     00 FA 45 F5 | 	or	result1, ##81788928
218f8     44 00 00 FF 
218fc     54 E4 05 F1 | 	add	objptr, ##34900
21900     F2 FA 61 FC | 	wrlong	result1, objptr
21904     44 00 00 FF 
21908     54 E4 85 F1 | 	sub	objptr, ##34900
2190c     F2 FA 01 F6 | 	mov	result1, objptr
21910     00 78 02 FF 
21914     00 FA 45 F5 | 	or	result1, ##82837504
21918     44 00 00 FF 
2191c     58 E4 05 F1 | 	add	objptr, ##34904
21920     F2 FA 61 FC | 	wrlong	result1, objptr
21924     44 00 00 FF 
21928     58 E4 85 F1 | 	sub	objptr, ##34904
2192c     F2 FA 01 F6 | 	mov	result1, objptr
21930     00 80 02 FF 
21934     00 FA 45 F5 | 	or	result1, ##83886080
21938     44 00 00 FF 
2193c     5C E4 05 F1 | 	add	objptr, ##34908
21940     F2 FA 61 FC | 	wrlong	result1, objptr
21944     44 00 00 FF 
21948     5C E4 85 F1 | 	sub	objptr, ##34908
2194c     F2 FA 01 F6 | 	mov	result1, objptr
21950     00 88 02 FF 
21954     00 FA 45 F5 | 	or	result1, ##84934656
21958     44 00 00 FF 
2195c     60 E4 05 F1 | 	add	objptr, ##34912
21960     F2 FA 61 FC | 	wrlong	result1, objptr
21964     44 00 00 FF 
21968     60 E4 85 F1 | 	sub	objptr, ##34912
2196c     F2 FA 01 F6 | 	mov	result1, objptr
21970     00 90 02 FF 
21974     00 FA 45 F5 | 	or	result1, ##85983232
21978     44 00 00 FF 
2197c     64 E4 05 F1 | 	add	objptr, ##34916
21980     F2 FA 61 FC | 	wrlong	result1, objptr
21984     44 00 00 FF 
21988     64 E4 85 F1 | 	sub	objptr, ##34916
2198c     F2 FA 01 F6 | 	mov	result1, objptr
21990     00 98 02 FF 
21994     00 FA 45 F5 | 	or	result1, ##87031808
21998     44 00 00 FF 
2199c     68 E4 05 F1 | 	add	objptr, ##34920
219a0     F2 FA 61 FC | 	wrlong	result1, objptr
219a4     44 00 00 FF 
219a8     68 E4 85 F1 | 	sub	objptr, ##34920
219ac     F2 FA 01 F6 | 	mov	result1, objptr
219b0     00 A0 02 FF 
219b4     00 FA 45 F5 | 	or	result1, ##88080384
219b8     44 00 00 FF 
219bc     6C E4 05 F1 | 	add	objptr, ##34924
219c0     F2 FA 61 FC | 	wrlong	result1, objptr
219c4     44 00 00 FF 
219c8     6C E4 85 F1 | 	sub	objptr, ##34924
219cc     F2 FA 01 F6 | 	mov	result1, objptr
219d0     00 A8 02 FF 
219d4     00 FA 45 F5 | 	or	result1, ##89128960
219d8     44 00 00 FF 
219dc     78 E4 05 F1 | 	add	objptr, ##34936
219e0     F2 FA 61 FC | 	wrlong	result1, objptr
219e4     44 00 00 FF 
219e8     78 E4 85 F1 | 	sub	objptr, ##34936
219ec     F2 FA 01 F6 | 	mov	result1, objptr
219f0     00 B0 02 FF 
219f4     00 FA 45 F5 | 	or	result1, ##90177536
219f8     44 00 00 FF 
219fc     70 E4 05 F1 | 	add	objptr, ##34928
21a00     F2 FA 61 FC | 	wrlong	result1, objptr
21a04     44 00 00 FF 
21a08     70 E4 85 F1 | 	sub	objptr, ##34928
21a0c     F2 FA 01 F6 | 	mov	result1, objptr
21a10     00 B8 02 FF 
21a14     00 FA 45 F5 | 	or	result1, ##91226112
21a18     44 00 00 FF 
21a1c     74 E4 05 F1 | 	add	objptr, ##34932
21a20     F2 FA 61 FC | 	wrlong	result1, objptr
21a24     44 00 00 FF 
21a28     74 E4 85 F1 | 	sub	objptr, ##34932
21a2c     F2 FA 01 F6 | 	mov	result1, objptr
21a30     00 C0 02 FF 
21a34     00 FA 45 F5 | 	or	result1, ##92274688
21a38     44 00 00 FF 
21a3c     7C E4 05 F1 | 	add	objptr, ##34940
21a40     F2 FA 61 FC | 	wrlong	result1, objptr
21a44     44 00 00 FF 
21a48     7C E4 85 F1 | 	sub	objptr, ##34940
21a4c     F2 FA 01 F6 | 	mov	result1, objptr
21a50     00 C8 02 FF 
21a54     00 FA 45 F5 | 	or	result1, ##93323264
21a58     44 00 00 FF 
21a5c     24 E4 05 F1 | 	add	objptr, ##34852
21a60     F2 FA 61 FC | 	wrlong	result1, objptr
21a64     44 00 00 FF 
21a68     24 E4 85 F1 | 	sub	objptr, ##34852
21a6c     F2 FA 01 F6 | 	mov	result1, objptr
21a70     00 D0 02 FF 
21a74     00 FA 45 F5 | 	or	result1, ##94371840
21a78     44 00 00 FF 
21a7c     2C E4 05 F1 | 	add	objptr, ##34860
21a80     F2 FA 61 FC | 	wrlong	result1, objptr
21a84     44 00 00 FF 
21a88     2C E4 85 F1 | 	sub	objptr, ##34860
21a8c     F2 FA 01 F6 | 	mov	result1, objptr
21a90     00 D8 02 FF 
21a94     00 FA 45 F5 | 	or	result1, ##95420416
21a98     44 00 00 FF 
21a9c     30 E4 05 F1 | 	add	objptr, ##34864
21aa0     F2 FA 61 FC | 	wrlong	result1, objptr
21aa4     44 00 00 FF 
21aa8     30 E4 85 F1 | 	sub	objptr, ##34864
21aac     F2 FA 01 F6 | 	mov	result1, objptr
21ab0     00 E0 02 FF 
21ab4     00 FA 45 F5 | 	or	result1, ##96468992
21ab8     44 00 00 FF 
21abc     80 E4 05 F1 | 	add	objptr, ##34944
21ac0     F2 FA 61 FC | 	wrlong	result1, objptr
21ac4     44 00 00 FF 
21ac8     80 E4 85 F1 | 	sub	objptr, ##34944
21acc     F2 FA 01 F6 | 	mov	result1, objptr
21ad0     00 E8 02 FF 
21ad4     00 FA 45 F5 | 	or	result1, ##97517568
21ad8     44 00 00 FF 
21adc     84 E4 05 F1 | 	add	objptr, ##34948
21ae0     F2 FA 61 FC | 	wrlong	result1, objptr
21ae4     44 00 00 FF 
21ae8     84 E4 85 F1 | 	sub	objptr, ##34948
21aec     F2 FA 01 F6 | 	mov	result1, objptr
21af0     00 F0 02 FF 
21af4     00 FA 45 F5 | 	or	result1, ##98566144
21af8     44 00 00 FF 
21afc     88 E4 05 F1 | 	add	objptr, ##34952
21b00     F2 FA 61 FC | 	wrlong	result1, objptr
21b04     44 00 00 FF 
21b08     88 E4 85 F1 | 	sub	objptr, ##34952
21b0c     F2 FA 01 F6 | 	mov	result1, objptr
21b10     00 F8 02 FF 
21b14     00 FA 45 F5 | 	or	result1, ##99614720
21b18     44 00 00 FF 
21b1c     34 E4 05 F1 | 	add	objptr, ##34868
21b20     F2 FA 61 FC | 	wrlong	result1, objptr
21b24     44 00 00 FF 
21b28     34 E4 85 F1 | 	sub	objptr, ##34868
21b2c     F2 FA 01 F6 | 	mov	result1, objptr
21b30     39 FA 25 F4 | 	bith	result1, #57
21b34     44 00 00 FF 
21b38     98 E4 05 F1 | 	add	objptr, ##34968
21b3c     F2 FA 61 FC | 	wrlong	result1, objptr
21b40     44 00 00 FF 
21b44     98 E4 85 F1 | 	sub	objptr, ##34968
21b48     F2 FA 01 F6 | 	mov	result1, objptr
21b4c     00 08 03 FF 
21b50     00 FA 45 F5 | 	or	result1, ##101711872
21b54     44 00 00 FF 
21b58     A0 E4 05 F1 | 	add	objptr, ##34976
21b5c     F2 FA 61 FC | 	wrlong	result1, objptr
21b60     44 00 00 FF 
21b64     A0 E4 85 F1 | 	sub	objptr, ##34976
21b68     F2 FA 01 F6 | 	mov	result1, objptr
21b6c     00 10 03 FF 
21b70     00 FA 45 F5 | 	or	result1, ##102760448
21b74     44 00 00 FF 
21b78     94 E4 05 F1 | 	add	objptr, ##34964
21b7c     F2 FA 61 FC | 	wrlong	result1, objptr
21b80     44 00 00 FF 
21b84     94 E4 85 F1 | 	sub	objptr, ##34964
21b88     F2 FA 01 F6 | 	mov	result1, objptr
21b8c     00 18 03 FF 
21b90     00 FA 45 F5 | 	or	result1, ##103809024
21b94     44 00 00 FF 
21b98     90 E4 05 F1 | 	add	objptr, ##34960
21b9c     F2 FA 61 FC | 	wrlong	result1, objptr
21ba0     44 00 00 FF 
21ba4     90 E4 85 F1 | 	sub	objptr, ##34960
21ba8     F2 FA 01 F6 | 	mov	result1, objptr
21bac     00 20 03 FF 
21bb0     00 FA 45 F5 | 	or	result1, ##104857600
21bb4     44 00 00 FF 
21bb8     8C E4 05 F1 | 	add	objptr, ##34956
21bbc     F2 FA 61 FC | 	wrlong	result1, objptr
21bc0     44 00 00 FF 
21bc4     8C E4 85 F1 | 	sub	objptr, ##34956
21bc8     F2 FA 01 F6 | 	mov	result1, objptr
21bcc     00 28 03 FF 
21bd0     00 FA 45 F5 | 	or	result1, ##105906176
21bd4     44 00 00 FF 
21bd8     9C E4 05 F1 | 	add	objptr, ##34972
21bdc     F2 FA 61 FC | 	wrlong	result1, objptr
21be0     44 00 00 FF 
21be4     9C E4 85 F1 | 	sub	objptr, ##34972
21be8     F2 FA 01 F6 | 	mov	result1, objptr
21bec     00 30 03 FF 
21bf0     00 FA 45 F5 | 	or	result1, ##106954752
21bf4     44 00 00 FF 
21bf8     A4 E4 05 F1 | 	add	objptr, ##34980
21bfc     F2 FA 61 FC | 	wrlong	result1, objptr
21c00     44 00 00 FF 
21c04     A4 E4 85 F1 | 	sub	objptr, ##34980
21c08     F2 FA 01 F6 | 	mov	result1, objptr
21c0c     00 38 03 FF 
21c10     00 FA 45 F5 | 	or	result1, ##108003328
21c14     44 00 00 FF 
21c18     A8 E4 05 F1 | 	add	objptr, ##34984
21c1c     F2 FA 61 FC | 	wrlong	result1, objptr
21c20     44 00 00 FF 
21c24     A8 E4 85 F1 | 	sub	objptr, ##34984
21c28     F2 FA 01 F6 | 	mov	result1, objptr
21c2c     00 40 03 FF 
21c30     00 FA 45 F5 | 	or	result1, ##109051904
21c34     44 00 00 FF 
21c38     AC E4 05 F1 | 	add	objptr, ##34988
21c3c     F2 FA 61 FC | 	wrlong	result1, objptr
21c40     44 00 00 FF 
21c44     AC E4 85 F1 | 	sub	objptr, ##34988
21c48     F2 FA 01 F6 | 	mov	result1, objptr
21c4c     00 48 03 FF 
21c50     00 FA 45 F5 | 	or	result1, ##110100480
21c54     44 00 00 FF 
21c58     B4 E4 05 F1 | 	add	objptr, ##34996
21c5c     F2 FA 61 FC | 	wrlong	result1, objptr
21c60     44 00 00 FF 
21c64     B4 E4 85 F1 | 	sub	objptr, ##34996
21c68     F2 FA 01 F6 | 	mov	result1, objptr
21c6c     00 50 03 FF 
21c70     00 FA 45 F5 | 	or	result1, ##111149056
21c74     44 00 00 FF 
21c78     B8 E4 05 F1 | 	add	objptr, ##35000
21c7c     F2 FA 61 FC | 	wrlong	result1, objptr
21c80     44 00 00 FF 
21c84     B8 E4 85 F1 | 	sub	objptr, ##35000
21c88     F2 FA 01 F6 | 	mov	result1, objptr
21c8c     00 58 03 FF 
21c90     00 FA 45 F5 | 	or	result1, ##112197632
21c94     44 00 00 FF 
21c98     BC E4 05 F1 | 	add	objptr, ##35004
21c9c     F2 FA 61 FC | 	wrlong	result1, objptr
21ca0     44 00 00 FF 
21ca4     BC E4 85 F1 | 	sub	objptr, ##35004
21ca8     F2 FA 01 F6 | 	mov	result1, objptr
21cac     00 60 03 FF 
21cb0     00 FA 45 F5 | 	or	result1, ##113246208
21cb4     44 00 00 FF 
21cb8     C0 E4 05 F1 | 	add	objptr, ##35008
21cbc     F2 FA 61 FC | 	wrlong	result1, objptr
21cc0     44 00 00 FF 
21cc4     C0 E4 85 F1 | 	sub	objptr, ##35008
21cc8     F2 FA 01 F6 | 	mov	result1, objptr
21ccc     00 68 03 FF 
21cd0     00 FA 45 F5 | 	or	result1, ##114294784
21cd4     44 00 00 FF 
21cd8     C4 E4 05 F1 | 	add	objptr, ##35012
21cdc     F2 FA 61 FC | 	wrlong	result1, objptr
21ce0     44 00 00 FF 
21ce4     C4 E4 85 F1 | 	sub	objptr, ##35012
21ce8     F2 FA 01 F6 | 	mov	result1, objptr
21cec     00 70 03 FF 
21cf0     00 FA 45 F5 | 	or	result1, ##115343360
21cf4     44 00 00 FF 
21cf8     C8 E4 05 F1 | 	add	objptr, ##35016
21cfc     F2 FA 61 FC | 	wrlong	result1, objptr
21d00     44 00 00 FF 
21d04     C8 E4 85 F1 | 	sub	objptr, ##35016
21d08     F2 FA 01 F6 | 	mov	result1, objptr
21d0c     00 08 01 FF 
21d10     00 FA 45 F5 | 	or	result1, ##34603008
21d14     44 00 00 FF 
21d18     CC E4 05 F1 | 	add	objptr, ##35020
21d1c     F2 FA 61 FC | 	wrlong	result1, objptr
21d20     44 00 00 FF 
21d24     CC E4 85 F1 | 	sub	objptr, ##35020
21d28     F2 FA 01 F6 | 	mov	result1, objptr
21d2c     00 78 03 FF 
21d30     00 FA 45 F5 | 	or	result1, ##116391936
21d34     44 00 00 FF 
21d38     D0 E4 05 F1 | 	add	objptr, ##35024
21d3c     F2 FA 61 FC | 	wrlong	result1, objptr
21d40     44 00 00 FF 
21d44     D0 E4 85 F1 | 	sub	objptr, ##35024
21d48     F2 FA 01 F6 | 	mov	result1, objptr
21d4c     58 FA 25 F4 | 	bith	result1, #88
21d50     44 00 00 FF 
21d54     B0 E4 05 F1 | 	add	objptr, ##34992
21d58     F2 FA 61 FC | 	wrlong	result1, objptr
21d5c     44 00 00 FF 
21d60     B0 E4 85 F1 | 	sub	objptr, ##34992
21d64     F2 FA 01 F6 | 	mov	result1, objptr
21d68     00 88 03 FF 
21d6c     00 FA 45 F5 | 	or	result1, ##118489088
21d70     43 00 00 FF 
21d74     A8 E4 05 F1 | 	add	objptr, ##34472
21d78     F2 FA 61 FC | 	wrlong	result1, objptr
21d7c     43 00 00 FF 
21d80     A8 E4 85 F1 | 	sub	objptr, ##34472
21d84     F2 FA 01 F6 | 	mov	result1, objptr
21d88     00 90 03 FF 
21d8c     00 FA 45 F5 | 	or	result1, ##119537664
21d90     44 00 00 FF 
21d94     D4 E4 05 F1 | 	add	objptr, ##35028
21d98     F2 FA 61 FC | 	wrlong	result1, objptr
21d9c     44 00 00 FF 
21da0     D4 E4 85 F1 | 	sub	objptr, ##35028
21da4     F2 FA 01 F6 | 	mov	result1, objptr
21da8     00 98 03 FF 
21dac     00 FA 45 F5 | 	or	result1, ##120586240
21db0     44 00 00 FF 
21db4     D8 E4 05 F1 | 	add	objptr, ##35032
21db8     F2 FA 61 FC | 	wrlong	result1, objptr
21dbc     44 00 00 FF 
21dc0     D8 E4 85 F1 | 	sub	objptr, ##35032
21dc4     F2 FA 01 F6 | 	mov	result1, objptr
21dc8     00 A0 03 FF 
21dcc     00 FA 45 F5 | 	or	result1, ##121634816
21dd0     44 00 00 FF 
21dd4     EC E4 05 F1 | 	add	objptr, ##35052
21dd8     F2 FA 61 FC | 	wrlong	result1, objptr
21ddc     44 00 00 FF 
21de0     EC E4 85 F1 | 	sub	objptr, ##35052
21de4     F2 FA 01 F6 | 	mov	result1, objptr
21de8     00 A8 03 FF 
21dec     00 FA 45 F5 | 	or	result1, ##122683392
21df0     44 00 00 FF 
21df4     E8 E4 05 F1 | 	add	objptr, ##35048
21df8     F2 FA 61 FC | 	wrlong	result1, objptr
21dfc     44 00 00 FF 
21e00     E8 E4 85 F1 | 	sub	objptr, ##35048
21e04     F2 FA 01 F6 | 	mov	result1, objptr
21e08     00 B0 03 FF 
21e0c     00 FA 45 F5 | 	or	result1, ##123731968
21e10     44 00 00 FF 
21e14     E0 E4 05 F1 | 	add	objptr, ##35040
21e18     F2 FA 61 FC | 	wrlong	result1, objptr
21e1c     44 00 00 FF 
21e20     E0 E4 85 F1 | 	sub	objptr, ##35040
21e24     F2 FA 01 F6 | 	mov	result1, objptr
21e28     00 B8 03 FF 
21e2c     00 FA 45 F5 | 	or	result1, ##124780544
21e30     44 00 00 FF 
21e34     DC E4 05 F1 | 	add	objptr, ##35036
21e38     F2 FA 61 FC | 	wrlong	result1, objptr
21e3c     44 00 00 FF 
21e40     DC E4 85 F1 | 	sub	objptr, ##35036
21e44     F2 FA 01 F6 | 	mov	result1, objptr
21e48     77 FA 25 F4 | 	bith	result1, #119
21e4c     44 00 00 FF 
21e50     FC E4 05 F1 | 	add	objptr, ##35068
21e54     F2 FA 61 FC | 	wrlong	result1, objptr
21e58     44 00 00 FF 
21e5c     FC E4 85 F1 | 	sub	objptr, ##35068
21e60     F2 FA 01 F6 | 	mov	result1, objptr
21e64     00 C8 03 FF 
21e68     00 FA 45 F5 | 	or	result1, ##126877696
21e6c     44 00 00 FF 
21e70     F0 E4 05 F1 | 	add	objptr, ##35056
21e74     F2 FA 61 FC | 	wrlong	result1, objptr
21e78     44 00 00 FF 
21e7c     F0 E4 85 F1 | 	sub	objptr, ##35056
21e80     F2 FA 01 F6 | 	mov	result1, objptr
21e84     00 D0 03 FF 
21e88     00 FA 45 F5 | 	or	result1, ##127926272
21e8c     44 00 00 FF 
21e90     F4 E4 05 F1 | 	add	objptr, ##35060
21e94     F2 FA 61 FC | 	wrlong	result1, objptr
21e98     44 00 00 FF 
21e9c     F4 E4 85 F1 | 	sub	objptr, ##35060
21ea0     F2 FA 01 F6 | 	mov	result1, objptr
21ea4     00 D8 03 FF 
21ea8     00 FA 45 F5 | 	or	result1, ##128974848
21eac     44 00 00 FF 
21eb0     F8 E4 05 F1 | 	add	objptr, ##35064
21eb4     F2 FA 61 FC | 	wrlong	result1, objptr
21eb8     44 00 00 FF 
21ebc     F8 E4 85 F1 | 	sub	objptr, ##35064
21ec0     F2 FA 01 F6 | 	mov	result1, objptr
21ec4     96 FA 25 F4 | 	bith	result1, #150
21ec8     44 00 00 FF 
21ecc     00 E5 05 F1 | 	add	objptr, ##35072
21ed0     F2 FA 61 FC | 	wrlong	result1, objptr
21ed4     44 00 00 FF 
21ed8     00 E5 85 F1 | 	sub	objptr, ##35072
21edc     F2 FA 01 F6 | 	mov	result1, objptr
21ee0     00 E8 03 FF 
21ee4     00 FA 45 F5 | 	or	result1, ##131072000
21ee8     44 00 00 FF 
21eec     04 E5 05 F1 | 	add	objptr, ##35076
21ef0     F2 FA 61 FC | 	wrlong	result1, objptr
21ef4     44 00 00 FF 
21ef8     04 E5 85 F1 | 	sub	objptr, ##35076
21efc     F2 FA 01 F6 | 	mov	result1, objptr
21f00     B5 FA 25 F4 | 	bith	result1, #181
21f04     44 00 00 FF 
21f08     08 E5 05 F1 | 	add	objptr, ##35080
21f0c     F2 FA 61 FC | 	wrlong	result1, objptr
21f10     44 00 00 FF 
21f14     08 E5 85 F1 | 	sub	objptr, ##35080
21f18     F2 FA 01 F6 | 	mov	result1, objptr
21f1c     D4 FA 25 F4 | 	bith	result1, #212
21f20     44 00 00 FF 
21f24     0C E5 05 F1 | 	add	objptr, ##35084
21f28     F2 FA 61 FC | 	wrlong	result1, objptr
21f2c     44 00 00 FF 
21f30     0C E5 85 F1 | 	sub	objptr, ##35084
21f34     F2 FA 01 F6 | 	mov	result1, objptr
21f38     1B FA 25 F4 | 	bith	result1, #27
21f3c     44 00 00 FF 
21f40     10 E5 05 F1 | 	add	objptr, ##35088
21f44     F2 FA 61 FC | 	wrlong	result1, objptr
21f48     44 00 00 FF 
21f4c     10 E5 85 F1 | 	sub	objptr, ##35088
21f50     F2 FA 01 F6 | 	mov	result1, objptr
21f54     00 08 04 FF 
21f58     00 FA 45 F5 | 	or	result1, ##135266304
21f5c     44 00 00 FF 
21f60     14 E5 05 F1 | 	add	objptr, ##35092
21f64     F2 FA 61 FC | 	wrlong	result1, objptr
21f68     44 00 00 FF 
21f6c     14 E5 85 F1 | 	sub	objptr, ##35092
21f70     F2 FA 01 F6 | 	mov	result1, objptr
21f74     00 10 04 FF 
21f78     00 FA 45 F5 | 	or	result1, ##136314880
21f7c     44 00 00 FF 
21f80     1C E5 05 F1 | 	add	objptr, ##35100
21f84     F2 FA 61 FC | 	wrlong	result1, objptr
21f88     44 00 00 FF 
21f8c     1C E5 85 F1 | 	sub	objptr, ##35100
21f90     F2 FA 01 F6 | 	mov	result1, objptr
21f94     00 18 04 FF 
21f98     00 FA 45 F5 | 	or	result1, ##137363456
21f9c     44 00 00 FF 
21fa0     20 E5 05 F1 | 	add	objptr, ##35104
21fa4     F2 FA 61 FC | 	wrlong	result1, objptr
21fa8     44 00 00 FF 
21fac     20 E5 85 F1 | 	sub	objptr, ##35104
21fb0     F2 FA 01 F6 | 	mov	result1, objptr
21fb4     00 20 04 FF 
21fb8     00 FA 45 F5 | 	or	result1, ##138412032
21fbc     44 00 00 FF 
21fc0     24 E5 05 F1 | 	add	objptr, ##35108
21fc4     F2 FA 61 FC | 	wrlong	result1, objptr
21fc8     44 00 00 FF 
21fcc     24 E5 85 F1 | 	sub	objptr, ##35108
21fd0     F2 FA 01 F6 | 	mov	result1, objptr
21fd4     00 28 04 FF 
21fd8     00 FA 45 F5 | 	or	result1, ##139460608
21fdc     44 00 00 FF 
21fe0     18 E5 05 F1 | 	add	objptr, ##35096
21fe4     F2 FA 61 FC | 	wrlong	result1, objptr
21fe8     44 00 00 FF 
21fec     18 E5 85 F1 | 	sub	objptr, ##35096
21ff0     F2 FA 01 F6 | 	mov	result1, objptr
21ff4     00 30 04 FF 
21ff8     00 FA 45 F5 | 	or	result1, ##140509184
21ffc     44 00 00 FF 
22000     28 E5 05 F1 | 	add	objptr, ##35112
22004     F2 FA 61 FC | 	wrlong	result1, objptr
22008     44 00 00 FF 
2200c     28 E5 85 F1 | 	sub	objptr, ##35112
22010     F2 FA 01 F6 | 	mov	result1, objptr
22014     00 38 04 FF 
22018     00 FA 45 F5 | 	or	result1, ##141557760
2201c     44 00 00 FF 
22020     5C E5 05 F1 | 	add	objptr, ##35164
22024     F2 FA 61 FC | 	wrlong	result1, objptr
22028     44 00 00 FF 
2202c     5C E5 85 F1 | 	sub	objptr, ##35164
22030     F2 FA 01 F6 | 	mov	result1, objptr
22034     00 40 04 FF 
22038     00 FA 45 F5 | 	or	result1, ##142606336
2203c     44 00 00 FF 
22040     54 E5 05 F1 | 	add	objptr, ##35156
22044     F2 FA 61 FC | 	wrlong	result1, objptr
22048     44 00 00 FF 
2204c     54 E5 85 F1 | 	sub	objptr, ##35156
22050     F2 FA 01 F6 | 	mov	result1, objptr
22054     00 48 04 FF 
22058     00 FA 45 F5 | 	or	result1, ##143654912
2205c     44 00 00 FF 
22060     2C E5 05 F1 | 	add	objptr, ##35116
22064     F2 FA 61 FC | 	wrlong	result1, objptr
22068     44 00 00 FF 
2206c     2C E5 85 F1 | 	sub	objptr, ##35116
22070     F2 FA 01 F6 | 	mov	result1, objptr
22074     00 50 04 FF 
22078     00 FA 45 F5 | 	or	result1, ##144703488
2207c     44 00 00 FF 
22080     30 E5 05 F1 | 	add	objptr, ##35120
22084     F2 FA 61 FC | 	wrlong	result1, objptr
22088     44 00 00 FF 
2208c     30 E5 85 F1 | 	sub	objptr, ##35120
22090     F2 FA 01 F6 | 	mov	result1, objptr
22094     00 58 04 FF 
22098     00 FA 45 F5 | 	or	result1, ##145752064
2209c     44 00 00 FF 
220a0     4C E5 05 F1 | 	add	objptr, ##35148
220a4     F2 FA 61 FC | 	wrlong	result1, objptr
220a8     44 00 00 FF 
220ac     4C E5 85 F1 | 	sub	objptr, ##35148
220b0     F2 FA 01 F6 | 	mov	result1, objptr
220b4     00 60 04 FF 
220b8     00 FA 45 F5 | 	or	result1, ##146800640
220bc     44 00 00 FF 
220c0     50 E5 05 F1 | 	add	objptr, ##35152
220c4     F2 FA 61 FC | 	wrlong	result1, objptr
220c8     44 00 00 FF 
220cc     50 E5 85 F1 | 	sub	objptr, ##35152
220d0     F2 FA 01 F6 | 	mov	result1, objptr
220d4     00 68 04 FF 
220d8     00 FA 45 F5 | 	or	result1, ##147849216
220dc     44 00 00 FF 
220e0     6C E5 05 F1 | 	add	objptr, ##35180
220e4     F2 FA 61 FC | 	wrlong	result1, objptr
220e8     44 00 00 FF 
220ec     6C E5 85 F1 | 	sub	objptr, ##35180
220f0     F2 FA 01 F6 | 	mov	result1, objptr
220f4     00 70 04 FF 
220f8     00 FA 45 F5 | 	or	result1, ##148897792
220fc     44 00 00 FF 
22100     68 E5 05 F1 | 	add	objptr, ##35176
22104     F2 FA 61 FC | 	wrlong	result1, objptr
22108     44 00 00 FF 
2210c     68 E5 85 F1 | 	sub	objptr, ##35176
22110     F2 FA 01 F6 | 	mov	result1, objptr
22114     00 78 04 FF 
22118     00 FA 45 F5 | 	or	result1, ##149946368
2211c     44 00 00 FF 
22120     78 E5 05 F1 | 	add	objptr, ##35192
22124     F2 FA 61 FC | 	wrlong	result1, objptr
22128     44 00 00 FF 
2212c     78 E5 85 F1 | 	sub	objptr, ##35192
22130     F2 FA 01 F6 | 	mov	result1, objptr
22134     00 80 04 FF 
22138     00 FA 45 F5 | 	or	result1, ##150994944
2213c     44 00 00 FF 
22140     44 E5 05 F1 | 	add	objptr, ##35140
22144     F2 FA 61 FC | 	wrlong	result1, objptr
22148     44 00 00 FF 
2214c     44 E5 85 F1 | 	sub	objptr, ##35140
22150     F2 FA 01 F6 | 	mov	result1, objptr
22154     00 88 04 FF 
22158     00 FA 45 F5 | 	or	result1, ##152043520
2215c     44 00 00 FF 
22160     74 E5 05 F1 | 	add	objptr, ##35188
22164     F2 FA 61 FC | 	wrlong	result1, objptr
22168     44 00 00 FF 
2216c     74 E5 85 F1 | 	sub	objptr, ##35188
22170     F2 FA 01 F6 | 	mov	result1, objptr
22174     00 90 04 FF 
22178     00 FA 45 F5 | 	or	result1, ##153092096
2217c     44 00 00 FF 
22180     64 E5 05 F1 | 	add	objptr, ##35172
22184     F2 FA 61 FC | 	wrlong	result1, objptr
22188     44 00 00 FF 
2218c     64 E5 85 F1 | 	sub	objptr, ##35172
22190     F2 FA 01 F6 | 	mov	result1, objptr
22194     00 98 04 FF 
22198     00 FA 45 F5 | 	or	result1, ##154140672
2219c     43 00 00 FF 
221a0     14 E5 05 F1 | 	add	objptr, ##34580
221a4     F2 FA 61 FC | 	wrlong	result1, objptr
221a8     43 00 00 FF 
221ac     14 E5 85 F1 | 	sub	objptr, ##34580
221b0     F2 FA 01 F6 | 	mov	result1, objptr
221b4     00 A0 04 FF 
221b8     00 FA 45 F5 | 	or	result1, ##155189248
221bc     44 00 00 FF 
221c0     34 E5 05 F1 | 	add	objptr, ##35124
221c4     F2 FA 61 FC | 	wrlong	result1, objptr
221c8     44 00 00 FF 
221cc     34 E5 85 F1 | 	sub	objptr, ##35124
221d0     F2 FA 01 F6 | 	mov	result1, objptr
221d4     00 08 01 FF 
221d8     00 FA 45 F5 | 	or	result1, ##34603008
221dc     44 00 00 FF 
221e0     3C E5 05 F1 | 	add	objptr, ##35132
221e4     F2 FA 61 FC | 	wrlong	result1, objptr
221e8     44 00 00 FF 
221ec     3C E5 85 F1 | 	sub	objptr, ##35132
221f0     F2 FA 01 F6 | 	mov	result1, objptr
221f4     00 A8 04 FF 
221f8     00 FA 45 F5 | 	or	result1, ##156237824
221fc     44 00 00 FF 
22200     38 E5 05 F1 | 	add	objptr, ##35128
22204     F2 FA 61 FC | 	wrlong	result1, objptr
22208     44 00 00 FF 
2220c     38 E5 85 F1 | 	sub	objptr, ##35128
22210     F2 FA 01 F6 | 	mov	result1, objptr
22214     00 B0 04 FF 
22218     00 FA 45 F5 | 	or	result1, ##157286400
2221c     44 00 00 FF 
22220     7C E5 05 F1 | 	add	objptr, ##35196
22224     F2 FA 61 FC | 	wrlong	result1, objptr
22228     44 00 00 FF 
2222c     7C E5 85 F1 | 	sub	objptr, ##35196
22230     F2 FA 01 F6 | 	mov	result1, objptr
22234     00 B8 04 FF 
22238     00 FA 45 F5 | 	or	result1, ##158334976
2223c     44 00 00 FF 
22240     80 E5 05 F1 | 	add	objptr, ##35200
22244     F2 FA 61 FC | 	wrlong	result1, objptr
22248     44 00 00 FF 
2224c     80 E5 85 F1 | 	sub	objptr, ##35200
22250     F2 FA 01 F6 | 	mov	result1, objptr
22254     00 C0 04 FF 
22258     00 FA 45 F5 | 	or	result1, ##159383552
2225c     44 00 00 FF 
22260     84 E5 05 F1 | 	add	objptr, ##35204
22264     F2 FA 61 FC | 	wrlong	result1, objptr
22268     44 00 00 FF 
2226c     84 E5 85 F1 | 	sub	objptr, ##35204
22270     F2 FA 01 F6 | 	mov	result1, objptr
22274     00 C8 04 FF 
22278     00 FA 45 F5 | 	or	result1, ##160432128
2227c     44 00 00 FF 
22280     88 E5 05 F1 | 	add	objptr, ##35208
22284     F2 FA 61 FC | 	wrlong	result1, objptr
22288     44 00 00 FF 
2228c     88 E5 85 F1 | 	sub	objptr, ##35208
22290     F2 FA 01 F6 | 	mov	result1, objptr
22294     00 D0 04 FF 
22298     00 FA 45 F5 | 	or	result1, ##161480704
2229c     44 00 00 FF 
222a0     90 E5 05 F1 | 	add	objptr, ##35216
222a4     F2 FA 61 FC | 	wrlong	result1, objptr
222a8     44 00 00 FF 
222ac     90 E5 85 F1 | 	sub	objptr, ##35216
222b0     F2 FA 01 F6 | 	mov	result1, objptr
222b4     00 D8 04 FF 
222b8     00 FA 45 F5 | 	or	result1, ##162529280
222bc     44 00 00 FF 
222c0     94 E5 05 F1 | 	add	objptr, ##35220
222c4     F2 FA 61 FC | 	wrlong	result1, objptr
222c8     44 00 00 FF 
222cc     94 E5 85 F1 | 	sub	objptr, ##35220
222d0     F2 FA 01 F6 | 	mov	result1, objptr
222d4     00 E0 04 FF 
222d8     00 FA 45 F5 | 	or	result1, ##163577856
222dc     44 00 00 FF 
222e0     98 E5 05 F1 | 	add	objptr, ##35224
222e4     F2 FA 61 FC | 	wrlong	result1, objptr
222e8     44 00 00 FF 
222ec     98 E5 85 F1 | 	sub	objptr, ##35224
222f0     F2 FA 01 F6 | 	mov	result1, objptr
222f4     00 E8 04 FF 
222f8     00 FA 45 F5 | 	or	result1, ##164626432
222fc     44 00 00 FF 
22300     8C E5 05 F1 | 	add	objptr, ##35212
22304     F2 FA 61 FC | 	wrlong	result1, objptr
22308     44 00 00 FF 
2230c     8C E5 85 F1 | 	sub	objptr, ##35212
22310     F2 FA 01 F6 | 	mov	result1, objptr
22314     00 F0 04 FF 
22318     00 FA 45 F5 | 	or	result1, ##165675008
2231c     44 00 00 FF 
22320     70 E5 05 F1 | 	add	objptr, ##35184
22324     F2 FA 61 FC | 	wrlong	result1, objptr
22328     44 00 00 FF 
2232c     70 E5 85 F1 | 	sub	objptr, ##35184
22330     F2 FA 01 F6 | 	mov	result1, objptr
22334     00 F8 04 FF 
22338     00 FA 45 F5 | 	or	result1, ##166723584
2233c     44 00 00 FF 
22340     60 E5 05 F1 | 	add	objptr, ##35168
22344     F2 FA 61 FC | 	wrlong	result1, objptr
22348     44 00 00 FF 
2234c     60 E5 85 F1 | 	sub	objptr, ##35168
22350     F2 FA 01 F6 | 	mov	result1, objptr
22354     00 00 05 FF 
22358     00 FA 45 F5 | 	or	result1, ##167772160
2235c     44 00 00 FF 
22360     9C E5 05 F1 | 	add	objptr, ##35228
22364     F2 FA 61 FC | 	wrlong	result1, objptr
22368     44 00 00 FF 
2236c     9C E5 85 F1 | 	sub	objptr, ##35228
22370                 | _init_commands_ret
22370     2D 00 64 FD | 	ret
22374                 | 
22374                 | ' 
22374                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
22374                 | ' 
22374                 | ' sub init_audio
22374                 | _init_audio
22374     06 4A 05 F6 | 	mov	COUNT_, #6
22378     A8 00 A0 FD | 	call	#pushregs_
2237c     00 C0 1F FF 
22380     00 26 06 F6 | 	mov	local01, ##1065353216
22384                 | ' 
22384                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
22384     00 28 06 F6 | 	mov	local02, #0
22388                 | LR__2610
22388     14 2B 02 F6 | 	mov	local03, local02
2238c     01 2A 66 F0 | 	shl	local03, #1
22390     58 7F 23 FF 
22394     00 2C 06 F6 | 	mov	local04, ##1191096320
22398     14 13 52 F6 | 	abs	arg01, local02 wc
2239c     1F 2E C6 C9 |  if_b	decod	local05, #31
223a0     00 2E 06 36 |  if_ae	mov	local05, #0
223a4     3C 70 B0 FD | 	call	#__system___float_fromuns
223a8     17 FB 61 F5 | 	xor	result1, local05
223ac     FD 12 02 F6 | 	mov	arg01, result1
223b0     87 24 20 FF 
223b4     DB 15 06 F6 | 	mov	arg02, ##1078530011
223b8     2C 74 B0 FD | 	call	#__system___float_mul
223bc     FD 12 02 F6 | 	mov	arg01, result1
223c0     00 00 22 FF 
223c4     00 14 06 F6 | 	mov	arg02, ##1140850688
223c8     20 76 B0 FD | 	call	#__system___float_div
223cc     FD 12 02 F6 | 	mov	arg01, result1
223d0     74 7D B0 FD | 	call	#__system____builtin_sinf
223d4     FD 14 02 F6 | 	mov	arg02, result1
223d8     16 13 02 F6 | 	mov	arg01, local04
223dc     08 74 B0 FD | 	call	#__system___float_mul
223e0     FD 12 02 F6 | 	mov	arg01, result1
223e4     01 14 06 F6 | 	mov	arg02, #1
223e8     C4 78 B0 FD | 	call	#__system___float_tointeger
223ec     FD 14 02 F6 | 	mov	arg02, result1
223f0     15 13 02 F6 | 	mov	arg01, local03
223f4     6C 0D B0 FD | 	call	#_psdpoke
223f8     01 28 06 F1 | 	add	local02, #1
223fc     02 00 00 FF 
22400     00 28 56 F2 | 	cmps	local02, ##1024 wc
22404     80 FF 9F CD |  if_b	jmp	#LR__2610
22408                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
22408     00 28 06 F6 | 	mov	local02, #0
2240c                 | LR__2611
2240c     14 15 02 F6 | 	mov	arg02, local02
22410     01 14 66 F0 | 	shl	arg02, #1
22414     0B 12 C6 F9 | 	decod	arg01, #11
22418     0A 13 02 F1 | 	add	arg01, arg02
2241c     14 2D 02 F6 | 	mov	local04, local02
22420     07 2C 66 F0 | 	shl	local04, #7
22424     14 2D 82 F1 | 	sub	local04, local02
22428     C0 FF 7F FF 
2242c     00 15 06 F6 | 	mov	arg02, ##-32512
22430     16 15 02 F1 | 	add	arg02, local04
22434     2C 0D B0 FD | 	call	#_psdpoke
22438     09 2C C6 F9 | 	decod	local04, #9
2243c     14 2D 02 F1 | 	add	local04, local02
22440     01 2C 66 F0 | 	shl	local04, #1
22444     0B 12 C6 F9 | 	decod	arg01, #11
22448     16 13 02 F1 | 	add	arg01, local04
2244c     14 2F 02 F6 | 	mov	local05, local02
22450     07 2E 66 F0 | 	shl	local05, #7
22454     14 2F 82 F1 | 	sub	local05, local02
22458     3F 00 00 FF 
2245c     00 15 06 F6 | 	mov	arg02, ##32512
22460     17 15 82 F1 | 	sub	arg02, local05
22464     FC 0C B0 FD | 	call	#_psdpoke
22468     01 28 06 F1 | 	add	local02, #1
2246c     01 00 00 FF 
22470     00 28 56 F2 | 	cmps	local02, ##512 wc
22474     94 FF 9F CD |  if_b	jmp	#LR__2611
22478                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
22478     00 28 06 F6 | 	mov	local02, #0
2247c                 | LR__2612
2247c     14 2F 02 F6 | 	mov	local05, local02
22480     01 2E 66 F0 | 	shl	local05, #1
22484     0C 12 C6 F9 | 	decod	arg01, #12
22488     17 13 02 F1 | 	add	arg01, local05
2248c     14 2F 02 F6 | 	mov	local05, local02
22490     06 2E 66 F0 | 	shl	local05, #6
22494     14 2F 82 F1 | 	sub	local05, local02
22498     C1 FF 7F FF 
2249c     00 14 06 F6 | 	mov	arg02, ##-32256
224a0     17 15 02 F1 | 	add	arg02, local05
224a4     BC 0C B0 FD | 	call	#_psdpoke
224a8     01 28 06 F1 | 	add	local02, #1
224ac     02 00 00 FF 
224b0     00 28 56 F2 | 	cmps	local02, ##1024 wc
224b4     C4 FF 9F CD |  if_b	jmp	#LR__2612
224b8                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
224b8     00 28 06 F6 | 	mov	local02, #0
224bc                 | LR__2613
224bc     14 2F 02 F6 | 	mov	local05, local02
224c0     01 2E 66 F0 | 	shl	local05, #1
224c4     0C 00 00 FF 
224c8     00 12 06 F6 | 	mov	arg01, ##6144
224cc     17 13 02 F1 | 	add	arg01, local05
224d0     C0 FF 7F FF 
224d4     A8 14 06 F6 | 	mov	arg02, ##-32600
224d8     88 0C B0 FD | 	call	#_psdpoke
224dc     01 28 06 F1 | 	add	local02, #1
224e0     80 28 56 F2 | 	cmps	local02, #128 wc
224e4     D4 FF 9F CD |  if_b	jmp	#LR__2613
224e8     80 28 06 F6 | 	mov	local02, #128
224ec                 | LR__2614
224ec     14 2F 02 F6 | 	mov	local05, local02
224f0     01 2E 66 F0 | 	shl	local05, #1
224f4     0C 00 00 FF 
224f8     00 12 06 F6 | 	mov	arg01, ##6144
224fc     17 13 02 F1 | 	add	arg01, local05
22500     3F 00 00 FF 
22504     58 15 06 F6 | 	mov	arg02, ##32600
22508     58 0C B0 FD | 	call	#_psdpoke
2250c     01 28 06 F1 | 	add	local02, #1
22510     02 00 00 FF 
22514     00 28 16 F2 | 	cmp	local02, ##1024 wc
22518     D0 FF 9F CD |  if_b	jmp	#LR__2614
2251c                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
2251c     00 28 06 F6 | 	mov	local02, #0
22520                 | LR__2615
22520     14 2F 02 F6 | 	mov	local05, local02
22524     01 2E 66 F0 | 	shl	local05, #1
22528     0D 12 C6 F9 | 	decod	arg01, #13
2252c     17 13 02 F1 | 	add	arg01, local05
22530     C0 FF 7F FF 
22534     A8 14 06 F6 | 	mov	arg02, ##-32600
22538     28 0C B0 FD | 	call	#_psdpoke
2253c     01 28 06 F1 | 	add	local02, #1
22540     01 00 00 FF 
22544     00 28 56 F2 | 	cmps	local02, ##512 wc
22548     D4 FF 9F CD |  if_b	jmp	#LR__2615
2254c     09 28 C6 F9 | 	decod	local02, #9
22550                 | LR__2616
22550     14 2F 02 F6 | 	mov	local05, local02
22554     01 2E 66 F0 | 	shl	local05, #1
22558     0D 12 C6 F9 | 	decod	arg01, #13
2255c     17 13 02 F1 | 	add	arg01, local05
22560     3F 00 00 FF 
22564     58 15 06 F6 | 	mov	arg02, ##32600
22568     F8 0B B0 FD | 	call	#_psdpoke
2256c     01 28 06 F1 | 	add	local02, #1
22570     02 00 00 FF 
22574     00 28 16 F2 | 	cmp	local02, ##1024 wc
22578     D4 FF 9F CD |  if_b	jmp	#LR__2616
2257c                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
2257c     00 28 06 F6 | 	mov	local02, #0
22580                 | LR__2617
22580     14 2F 02 F6 | 	mov	local05, local02
22584     01 2E 66 F0 | 	shl	local05, #1
22588     14 00 00 FF 
2258c     00 12 06 F6 | 	mov	arg01, ##10240
22590     17 13 02 F1 | 	add	arg01, local05
22594     C0 FF 7F FF 
22598     A8 14 06 F6 | 	mov	arg02, ##-32600
2259c     C4 0B B0 FD | 	call	#_psdpoke
225a0     01 28 06 F1 | 	add	local02, #1
225a4     00 29 56 F2 | 	cmps	local02, #256 wc
225a8     D4 FF 9F CD |  if_b	jmp	#LR__2617
225ac     00 29 06 F6 | 	mov	local02, #256
225b0                 | LR__2618
225b0     14 2F 02 F6 | 	mov	local05, local02
225b4     01 2E 66 F0 | 	shl	local05, #1
225b8     14 00 00 FF 
225bc     00 12 06 F6 | 	mov	arg01, ##10240
225c0     17 13 02 F1 | 	add	arg01, local05
225c4     3F 00 00 FF 
225c8     58 15 06 F6 | 	mov	arg02, ##32600
225cc     94 0B B0 FD | 	call	#_psdpoke
225d0     01 28 06 F1 | 	add	local02, #1
225d4     02 00 00 FF 
225d8     00 28 16 F2 | 	cmp	local02, ##1024 wc
225dc     D0 FF 9F CD |  if_b	jmp	#LR__2618
225e0                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
225e0     18 00 00 FF 
225e4     00 28 06 F6 | 	mov	local02, ##12288
225e8                 | LR__2619
225e8     14 13 02 F6 | 	mov	arg01, local02
225ec     00 14 06 F6 | 	mov	arg02, #0
225f0     28 0B B0 FD | 	call	#_pslpoke
225f4     04 28 06 F1 | 	add	local02, #4
225f8     77 00 00 FF 
225fc     FD 29 56 F2 | 	cmps	local02, ##61437 wc
22600     E4 FF 9F CD |  if_b	jmp	#LR__2619
22604                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
22604     00 28 06 F6 | 	mov	local02, #0
22608                 | LR__2620
22608     14 2F 02 F6 | 	mov	local05, local02
2260c     01 2E 66 F0 | 	shl	local05, #1
22610     78 00 00 FF 
22614     00 2A 06 F6 | 	mov	local03, ##61440
22618     17 2B 02 F1 | 	add	local03, local05
2261c     12 00 00 FF 
22620     BA EA 05 F1 | 	add	ptr__dat__, ##9402
22624     F5 12 02 F6 | 	mov	arg01, ptr__dat__
22628     12 00 00 FF 
2262c     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
22630     10 12 06 F1 | 	add	arg01, #16
22634     14 15 02 F6 | 	mov	arg02, local02
22638     01 14 66 F0 | 	shl	arg02, #1
2263c     0A 13 02 F1 | 	add	arg01, arg02
22640     09 15 E2 FA | 	rdword	arg02, arg01
22644     15 13 02 F6 | 	mov	arg01, local03
22648     18 0B B0 FD | 	call	#_psdpoke
2264c     01 28 06 F1 | 	add	local02, #1
22650     02 00 00 FF 
22654     00 28 56 F2 | 	cmps	local02, ##1024 wc
22658     AC FF 9F CD |  if_b	jmp	#LR__2620
2265c                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
2265c     00 28 06 F6 | 	mov	local02, #0
22660                 | LR__2621
22660     14 2F 02 F6 | 	mov	local05, local02
22664     01 2E 66 F0 | 	shl	local05, #1
22668     7C 00 00 FF 
2266c     00 2A 06 F6 | 	mov	local03, ##63488
22670     17 2B 02 F1 | 	add	local03, local05
22674     0E 00 00 FF 
22678     AA EA 05 F1 | 	add	ptr__dat__, ##7338
2267c     F5 12 02 F6 | 	mov	arg01, ptr__dat__
22680     0E 00 00 FF 
22684     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
22688     10 12 06 F1 | 	add	arg01, #16
2268c     14 15 02 F6 | 	mov	arg02, local02
22690     01 14 66 F0 | 	shl	arg02, #1
22694     0A 13 02 F1 | 	add	arg01, arg02
22698     09 15 E2 FA | 	rdword	arg02, arg01
2269c     15 13 02 F6 | 	mov	arg01, local03
226a0     C0 0A B0 FD | 	call	#_psdpoke
226a4     01 28 06 F1 | 	add	local02, #1
226a8     02 00 00 FF 
226ac     00 28 56 F2 | 	cmps	local02, ##1024 wc
226b0     AC FF 9F CD |  if_b	jmp	#LR__2621
226b4                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
226b4     00 28 06 F6 | 	mov	local02, #0
226b8     0C 00 00 FF 
226bc     D8 E4 05 F1 | 	add	objptr, ##6360
226c0     97 18 48 FB | 	callpa	#(@LR__2623-@LR__2622)>>2,fcache_load_ptr_
226c4                 | LR__2622
226c4     14 2F 02 F6 | 	mov	local05, local02
226c8     01 2E 66 F0 | 	shl	local05, #1
226cc     F2 2E 02 F1 | 	add	local05, objptr
226d0     14 2B 02 F6 | 	mov	local03, local02
226d4     08 2A 66 F0 | 	shl	local03, #8
226d8     7F 00 00 FF 
226dc     00 31 06 F6 | 	mov	local06, ##65280
226e0     15 31 82 F1 | 	sub	local06, local03
226e4     17 31 52 FC | 	wrword	local06, local05
226e8     01 28 06 F1 | 	add	local02, #1
226ec     00 29 56 F2 | 	cmps	local02, #256 wc
226f0     D0 FF 9F CD |  if_b	jmp	#LR__2622
226f4                 | LR__2623
226f4     0C 00 00 FF 
226f8     D8 E4 85 F1 | 	sub	objptr, ##6360
226fc                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
226fc     00 28 06 F6 | 	mov	local02, #0
22700                 | LR__2624
22700     14 2F 02 F6 | 	mov	local05, local02
22704     01 2E 66 F0 | 	shl	local05, #1
22708     0D 00 00 FF 
2270c     D8 E4 05 F1 | 	add	objptr, ##6872
22710     F2 2E 02 F1 | 	add	local05, objptr
22714     80 BF 23 FF 
22718     00 12 06 F6 | 	mov	arg01, ##1199505408
2271c     13 15 02 F6 | 	mov	arg02, local01
22720     0D 00 00 FF 
22724     D8 E4 85 F1 | 	sub	objptr, ##6872
22728     BC 70 B0 FD | 	call	#__system___float_mul
2272c     FD 12 02 F6 | 	mov	arg01, result1
22730     01 14 06 F6 | 	mov	arg02, #1
22734     78 75 B0 FD | 	call	#__system___float_tointeger
22738     17 FB 51 FC | 	wrword	result1, local05
2273c     13 13 02 F6 | 	mov	arg01, local01
22740     CC BC 1F FF 
22744     9A 15 06 F6 | 	mov	arg02, ##1064933786
22748     9C 70 B0 FD | 	call	#__system___float_mul
2274c     FD 26 02 F6 | 	mov	local01, result1
22750     01 28 06 F1 | 	add	local02, #1
22754     00 29 56 F2 | 	cmps	local02, #256 wc
22758     A4 FF 9F CD |  if_b	jmp	#LR__2624
2275c     0E 00 00 FF 
22760     D6 E4 05 F1 | 	add	objptr, ##7382
22764     F2 00 58 FC | 	wrword	#0, objptr
22768                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
22768     00 28 06 F6 | 	mov	local02, #0
2276c     02 E4 05 F1 | 	add	objptr, #2
22770     97 10 48 FB | 	callpa	#(@LR__2626-@LR__2625)>>2,fcache_load_ptr_
22774                 | LR__2625
22774     14 2F 02 F6 | 	mov	local05, local02
22778     01 2E 66 F0 | 	shl	local05, #1
2277c     F2 2E 02 F1 | 	add	local05, objptr
22780     7F 00 80 FF 
22784     17 01 5A FC | 	wrword	##65280, local05
22788     01 28 06 F1 | 	add	local02, #1
2278c     FF 28 56 F2 | 	cmps	local02, #255 wc
22790     E0 FF 9F CD |  if_b	jmp	#LR__2625
22794                 | LR__2626
22794     FE E5 05 F1 | 	add	objptr, #510
22798     F2 00 58 FC | 	wrword	#0, objptr
2279c                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
2279c     00 28 06 F6 | 	mov	local02, #0
227a0     02 E4 05 F1 | 	add	objptr, #2
227a4     97 52 48 FB | 	callpa	#(@LR__2631-@LR__2627)>>2,fcache_load_ptr_
227a8                 | LR__2627
227a8     14 2F 02 F6 | 	mov	local05, local02
227ac     01 2E 66 F0 | 	shl	local05, #1
227b0     F2 2E 02 F1 | 	add	local05, objptr
227b4     14 31 02 F6 | 	mov	local06, local02
227b8     0C 30 66 F0 | 	shl	local06, #12
227bc     17 31 52 FC | 	wrword	local06, local05
227c0     01 28 06 F1 | 	add	local02, #1
227c4     10 28 56 F2 | 	cmps	local02, #16 wc
227c8     DC FF 9F CD |  if_b	jmp	#LR__2627
227cc                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
227cc     10 28 06 F6 | 	mov	local02, #16
227d0                 | LR__2628
227d0     14 2F 02 F6 | 	mov	local05, local02
227d4     01 2E 66 F0 | 	shl	local05, #1
227d8     F2 2E 02 F1 | 	add	local05, objptr
227dc     7F 00 80 FF 
227e0     17 01 5A FC | 	wrword	##65280, local05
227e4     01 28 06 F1 | 	add	local02, #1
227e8     F0 28 16 F2 | 	cmp	local02, #240 wc
227ec     E0 FF 9F CD |  if_b	jmp	#LR__2628
227f0                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
227f0     F0 28 06 F6 | 	mov	local02, #240
227f4                 | LR__2629
227f4     14 2F 02 F6 | 	mov	local05, local02
227f8     01 2E 66 F0 | 	shl	local05, #1
227fc     F2 2E 02 F1 | 	add	local05, objptr
22800     FF 2A 06 F6 | 	mov	local03, #255
22804     14 2B 82 F1 | 	sub	local03, local02
22808     0C 2A 66 F0 | 	shl	local03, #12
2280c     17 2B 52 FC | 	wrword	local03, local05
22810     01 28 06 F1 | 	add	local02, #1
22814     00 29 16 F2 | 	cmp	local02, #256 wc
22818     D8 FF 9F CD |  if_b	jmp	#LR__2629
2281c                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
2281c     00 28 06 F6 | 	mov	local02, #0
22820     01 00 00 FF 
22824     00 E4 05 F1 | 	add	objptr, ##512
22828                 | LR__2630
22828     14 2F 02 F6 | 	mov	local05, local02
2282c     01 2E 66 F0 | 	shl	local05, #1
22830     F2 2E 02 F1 | 	add	local05, objptr
22834     14 31 02 F6 | 	mov	local06, local02
22838     08 30 66 F0 | 	shl	local06, #8
2283c     17 31 52 FC | 	wrword	local06, local05
22840     01 28 06 F1 | 	add	local02, #1
22844     00 29 56 F2 | 	cmps	local02, #256 wc
22848     DC FF 9F CD |  if_b	jmp	#LR__2630
2284c                 | LR__2631
2284c     FE E5 05 F1 | 	add	objptr, #510
22850     F2 00 58 FC | 	wrword	#0, objptr
22854                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
22854     00 28 06 F6 | 	mov	local02, #0
22858     02 E4 05 F1 | 	add	objptr, #2
2285c     97 6A 48 FB | 	callpa	#(@LR__2636-@LR__2632)>>2,fcache_load_ptr_
22860                 | LR__2632
22860     14 2F 02 F6 | 	mov	local05, local02
22864     01 2E 66 F0 | 	shl	local05, #1
22868     F2 2E 02 F1 | 	add	local05, objptr
2286c     14 31 02 F6 | 	mov	local06, local02
22870     04 30 66 F0 | 	shl	local06, #4
22874     14 31 02 F1 | 	add	local06, local02
22878     04 30 66 F0 | 	shl	local06, #4
2287c     17 31 52 FC | 	wrword	local06, local05
22880     01 28 06 F1 | 	add	local02, #1
22884     F0 28 56 F2 | 	cmps	local02, #240 wc
22888     D4 FF 9F CD |  if_b	jmp	#LR__2632
2288c     F0 28 06 F6 | 	mov	local02, #240
22890                 | LR__2633
22890     14 2F 02 F6 | 	mov	local05, local02
22894     01 2E 66 F0 | 	shl	local05, #1
22898     F2 2E 02 F1 | 	add	local05, objptr
2289c     FF 2A 06 F6 | 	mov	local03, #255
228a0     14 2B 82 F1 | 	sub	local03, local02
228a4     0C 2A 66 F0 | 	shl	local03, #12
228a8     17 2B 52 FC | 	wrword	local03, local05
228ac     01 28 06 F1 | 	add	local02, #1
228b0     00 29 16 F2 | 	cmp	local02, #256 wc
228b4     D8 FF 9F CD |  if_b	jmp	#LR__2633
228b8                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
228b8     00 28 06 F6 | 	mov	local02, #0
228bc     01 00 00 FF 
228c0     00 E4 05 F1 | 	add	objptr, ##512
228c4                 | LR__2634
228c4     14 2F 02 F6 | 	mov	local05, local02
228c8     01 2E 66 F0 | 	shl	local05, #1
228cc     F2 2E 02 F1 | 	add	local05, objptr
228d0     14 31 02 F6 | 	mov	local06, local02
228d4     09 30 66 F0 | 	shl	local06, #9
228d8     17 31 52 FC | 	wrword	local06, local05
228dc     FF 2E 06 F6 | 	mov	local05, #255
228e0     14 2F 82 F1 | 	sub	local05, local02
228e4     01 2E 66 F0 | 	shl	local05, #1
228e8     F2 2E 02 F1 | 	add	local05, objptr
228ec     14 31 02 F6 | 	mov	local06, local02
228f0     09 30 66 F0 | 	shl	local06, #9
228f4     17 31 52 FC | 	wrword	local06, local05
228f8     01 28 06 F1 | 	add	local02, #1
228fc     80 28 56 F2 | 	cmps	local02, #128 wc
22900     C0 FF 9F CD |  if_b	jmp	#LR__2634
22904                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
22904     00 28 06 F6 | 	mov	local02, #0
22908     01 00 00 FF 
2290c     00 E4 05 F1 | 	add	objptr, ##512
22910                 | LR__2635
22910     14 2F 02 F6 | 	mov	local05, local02
22914     01 2E 66 F0 | 	shl	local05, #1
22918     F2 2E 02 F1 | 	add	local05, objptr
2291c     14 31 02 F6 | 	mov	local06, local02
22920     0D 30 66 F0 | 	shl	local06, #13
22924     17 31 52 FC | 	wrword	local06, local05
22928     01 28 06 F1 | 	add	local02, #1
2292c     08 28 56 F2 | 	cmps	local02, #8 wc
22930     DC FF 9F CD |  if_b	jmp	#LR__2635
22934                 | LR__2636
22934                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
22934     08 28 06 F6 | 	mov	local02, #8
22938     97 42 48 FB | 	callpa	#(@LR__2640-@LR__2637)>>2,fcache_load_ptr_
2293c                 | LR__2637
2293c     14 2F 02 F6 | 	mov	local05, local02
22940     01 2E 66 F0 | 	shl	local05, #1
22944     F2 2E 02 F1 | 	add	local05, objptr
22948     14 27 02 F6 | 	mov	local01, local02
2294c     08 26 86 F1 | 	sub	local01, #8
22950     0B 26 66 F0 | 	shl	local01, #11
22954     7F 00 00 FF 
22958     00 31 06 F6 | 	mov	local06, ##65280
2295c     13 31 82 F1 | 	sub	local06, local01
22960     17 31 52 FC | 	wrword	local06, local05
22964     01 28 06 F1 | 	add	local02, #1
22968     18 28 16 F2 | 	cmp	local02, #24 wc
2296c     CC FF 9F CD |  if_b	jmp	#LR__2637
22970                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
22970     18 28 06 F6 | 	mov	local02, #24
22974                 | LR__2638
22974     14 2F 02 F6 | 	mov	local05, local02
22978     01 2E 66 F0 | 	shl	local05, #1
2297c     F2 2E 02 F1 | 	add	local05, objptr
22980     40 00 80 FF 
22984     17 01 58 FC | 	wrword	##32768, local05
22988     01 28 06 F1 | 	add	local02, #1
2298c     81 28 16 F2 | 	cmp	local02, #129 wc
22990     E0 FF 9F CD |  if_b	jmp	#LR__2638
22994                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
22994     81 28 06 F6 | 	mov	local02, #129
22998                 | LR__2639
22998     14 2F 02 F6 | 	mov	local05, local02
2299c     01 2E 66 F0 | 	shl	local05, #1
229a0     F2 2E 02 F1 | 	add	local05, objptr
229a4     FF 2A 06 F6 | 	mov	local03, #255
229a8     14 2B 82 F1 | 	sub	local03, local02
229ac     08 2A 66 F0 | 	shl	local03, #8
229b0     17 2B 52 FC | 	wrword	local03, local05
229b4     01 28 06 F1 | 	add	local02, #1
229b8     00 29 16 F2 | 	cmp	local02, #256 wc
229bc     D8 FF 9F CD |  if_b	jmp	#LR__2639
229c0                 | LR__2640
229c0     3E 00 00 FF 
229c4     EA E5 05 F1 | 	add	objptr, ##32234
229c8     F2 00 59 FC | 	wrword	#128, objptr
229cc     52 00 00 FF 
229d0     C2 E4 85 F1 | 	sub	objptr, ##42178
229d4                 | ' for i=0 to 7
229d4     00 28 06 F6 | 	mov	local02, #0
229d8     97 8E 48 FB | 	callpa	#(@LR__2642-@LR__2641)>>2,fcache_load_ptr_
229dc                 | LR__2641
229dc     14 2F 02 F6 | 	mov	local05, local02
229e0     01 2E 66 F0 | 	shl	local05, #1
229e4     14 2F 02 F1 | 	add	local05, local02
229e8     03 2E 66 F0 | 	shl	local05, #3
229ec     14 00 00 FF 
229f0     38 E5 05 F1 | 	add	objptr, ##10552
229f4     F2 2E 02 F1 | 	add	local05, objptr
229f8     00 EE A1 FF 
229fc     17 01 68 FC | 	wrlong	##1138491392, local05
22a00     14 2F 02 F6 | 	mov	local05, local02
22a04     01 2E 66 F0 | 	shl	local05, #1
22a08     14 2F 02 F1 | 	add	local05, local02
22a0c     03 2E 66 F0 | 	shl	local05, #3
22a10     F2 2E 02 F1 | 	add	local05, objptr
22a14     04 2E 06 F1 | 	add	local05, #4
22a18     17 29 42 FC | 	wrbyte	local02, local05
22a1c     14 2F 02 F6 | 	mov	local05, local02
22a20     01 2E 66 F0 | 	shl	local05, #1
22a24     14 2F 02 F1 | 	add	local05, local02
22a28     03 2E 66 F0 | 	shl	local05, #3
22a2c     F2 2E 02 F1 | 	add	local05, objptr
22a30     05 2E 06 F1 | 	add	local05, #5
22a34     17 29 42 FC | 	wrbyte	local02, local05
22a38     14 2F 02 F6 | 	mov	local05, local02
22a3c     01 2E 66 F0 | 	shl	local05, #1
22a40     14 2F 02 F1 | 	add	local05, local02
22a44     03 2E 66 F0 | 	shl	local05, #3
22a48     F2 2E 02 F1 | 	add	local05, objptr
22a4c     06 2E 06 F1 | 	add	local05, #6
22a50     17 01 58 FC | 	wrword	#0, local05
22a54     14 2F 02 F6 | 	mov	local05, local02
22a58     01 2E 66 F0 | 	shl	local05, #1
22a5c     14 2F 02 F1 | 	add	local05, local02
22a60     03 2E 66 F0 | 	shl	local05, #3
22a64     F2 2E 02 F1 | 	add	local05, objptr
22a68     08 2E 06 F1 | 	add	local05, #8
22a6c     00 C0 9F FF 
22a70     17 01 68 FC | 	wrlong	##1065353216, local05
22a74     14 2F 02 F6 | 	mov	local05, local02
22a78     01 2E 66 F0 | 	shl	local05, #1
22a7c     14 2F 02 F1 | 	add	local05, local02
22a80     03 2E 66 F0 | 	shl	local05, #3
22a84     F2 2E 02 F1 | 	add	local05, objptr
22a88     0C 2E 06 F1 | 	add	local05, #12
22a8c     00 40 A0 FF 
22a90     17 01 68 FC | 	wrlong	##1082130432, local05
22a94     14 2F 02 F6 | 	mov	local05, local02
22a98     01 2E 66 F0 | 	shl	local05, #1
22a9c     14 2F 02 F1 | 	add	local05, local02
22aa0     03 2E 66 F0 | 	shl	local05, #3
22aa4     F2 2E 02 F1 | 	add	local05, objptr
22aa8     10 2E 06 F1 | 	add	local05, #16
22aac     17 01 68 FC | 	wrlong	#0, local05
22ab0     14 2F 02 F6 | 	mov	local05, local02
22ab4     01 2E 66 F0 | 	shl	local05, #1
22ab8     14 2F 02 F1 | 	add	local05, local02
22abc     03 2E 66 F0 | 	shl	local05, #3
22ac0     F2 2E 02 F1 | 	add	local05, objptr
22ac4     14 2E 06 F1 | 	add	local05, #20
22ac8     17 FF 59 FC | 	wrword	#255, local05
22acc     14 2F 02 F6 | 	mov	local05, local02
22ad0     01 2E 66 F0 | 	shl	local05, #1
22ad4     3D 00 00 FF 
22ad8     7C E5 05 F1 | 	add	objptr, ##31612
22adc     F2 2E 02 F1 | 	add	local05, objptr
22ae0     17 FF 59 FC | 	wrword	#255, local05
22ae4     01 28 06 F1 | 	add	local02, #1
22ae8     08 28 56 F2 | 	cmps	local02, #8 wc
22aec     52 00 00 FF 
22af0     B4 E4 85 F1 | 	sub	objptr, ##42164
22af4     E4 FE 9F CD |  if_b	jmp	#LR__2641
22af8                 | LR__2642
22af8     00 6E 20 FF 
22afc     00 30 06 F6 | 	mov	local06, ##1088159744
22b00                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
22b00     03 2E 06 F6 | 	mov	local05, #3
22b04                 | LR__2643
22b04     18 13 02 F6 | 	mov	arg01, local06
22b08     CE C3 1F FF 
22b0c     7D 14 06 F6 | 	mov	arg02, ##1065852029
22b10     D4 6C B0 FD | 	call	#__system___float_mul
22b14     FD 30 02 F6 | 	mov	local06, result1
22b18     FA 2F 6E FB | 	djnz	local05, #LR__2643
22b1c     00 28 06 F6 | 	mov	local02, #0
22b20                 | LR__2644
22b20     14 2D 02 F6 | 	mov	local04, local02
22b24     02 2C 66 F0 | 	shl	local04, #2
22b28     14 00 00 FF 
22b2c     D8 E4 05 F1 | 	add	objptr, ##10456
22b30     F2 2C 02 F1 | 	add	local04, objptr
22b34     16 31 62 FC | 	wrlong	local06, local04
22b38     18 13 02 F6 | 	mov	arg01, local06
22b3c     CE C3 1F FF 
22b40     7D 14 06 F6 | 	mov	arg02, ##1065852029
22b44     14 00 00 FF 
22b48     D8 E4 85 F1 | 	sub	objptr, ##10456
22b4c     98 6C B0 FD | 	call	#__system___float_mul
22b50     FD 30 02 F6 | 	mov	local06, result1
22b54     01 28 06 F1 | 	add	local02, #1
22b58     0C 28 56 F2 | 	cmps	local02, #12 wc
22b5c     C0 FF 9F CD |  if_b	jmp	#LR__2644
22b60     14 00 00 FF 
22b64     08 E5 05 F1 | 	add	objptr, ##10504
22b68     F2 50 6B FC | 	wrlong	#424, objptr
22b6c     04 E4 05 F1 | 	add	objptr, #4
22b70     F2 20 6B FC | 	wrlong	#400, objptr
22b74     04 E4 05 F1 | 	add	objptr, #4
22b78     F2 F2 6A FC | 	wrlong	#377, objptr
22b7c     04 E4 05 F1 | 	add	objptr, #4
22b80     F2 C8 6A FC | 	wrlong	#356, objptr
22b84     04 E4 05 F1 | 	add	objptr, #4
22b88     F2 A0 6A FC | 	wrlong	#336, objptr
22b8c     04 E4 05 F1 | 	add	objptr, #4
22b90     F2 7A 6A FC | 	wrlong	#317, objptr
22b94     04 E4 05 F1 | 	add	objptr, #4
22b98     F2 58 6A FC | 	wrlong	#300, objptr
22b9c     04 E4 05 F1 | 	add	objptr, #4
22ba0     F2 36 6A FC | 	wrlong	#283, objptr
22ba4     04 E4 05 F1 | 	add	objptr, #4
22ba8     F2 16 6A FC | 	wrlong	#267, objptr
22bac     04 E4 05 F1 | 	add	objptr, #4
22bb0     F2 F8 69 FC | 	wrlong	#252, objptr
22bb4     04 E4 05 F1 | 	add	objptr, #4
22bb8     F2 DC 69 FC | 	wrlong	#238, objptr
22bbc     04 E4 05 F1 | 	add	objptr, #4
22bc0     F2 C0 69 FC | 	wrlong	#224, objptr
22bc4     3D 00 00 FF 
22bc8     8E E5 05 F1 | 	add	objptr, ##31630
22bcc     F2 00 59 FC | 	wrword	#128, objptr
22bd0     02 E4 85 F1 | 	sub	objptr, #2
22bd4     F2 00 59 FC | 	wrword	#128, objptr
22bd8     52 00 00 FF 
22bdc     C0 E4 85 F1 | 	sub	objptr, ##42176
22be0     A7 F0 03 F6 | 	mov	ptra, fp
22be4     B2 00 A0 FD | 	call	#popregs_
22be8                 | _init_audio_ret
22be8     2D 00 64 FD | 	ret
22bec                 | 
22bec                 | ' 
22bec                 | ' '------------------- Error messages
22bec                 | ' 
22bec                 | ' sub init_error_strings
22bec                 | _init_error_strings
22bec     B8 01 00 FF 
22bf0     6D 00 06 F6 | 	mov	_var01, ##@LR__5982
22bf4     45 00 00 FF 
22bf8     7C E4 05 F1 | 	add	objptr, ##35452
22bfc     F2 00 62 FC | 	wrlong	_var01, objptr
22c00     B8 01 00 FF 
22c04     6E 00 06 F6 | 	mov	_var01, ##@LR__5983
22c08     04 E4 05 F1 | 	add	objptr, #4
22c0c     F2 00 62 FC | 	wrlong	_var01, objptr
22c10     B8 01 00 FF 
22c14     92 00 06 F6 | 	mov	_var01, ##@LR__5984
22c18     04 E4 05 F1 | 	add	objptr, #4
22c1c     F2 00 62 FC | 	wrlong	_var01, objptr
22c20     B8 01 00 FF 
22c24     B2 00 06 F6 | 	mov	_var01, ##@LR__5985
22c28     04 E4 05 F1 | 	add	objptr, #4
22c2c     F2 00 62 FC | 	wrlong	_var01, objptr
22c30     B8 01 00 FF 
22c34     CB 00 06 F6 | 	mov	_var01, ##@LR__5986
22c38     04 E4 05 F1 | 	add	objptr, #4
22c3c     F2 00 62 FC | 	wrlong	_var01, objptr
22c40     B8 01 00 FF 
22c44     E6 00 06 F6 | 	mov	_var01, ##@LR__5987
22c48     04 E4 05 F1 | 	add	objptr, #4
22c4c     F2 00 62 FC | 	wrlong	_var01, objptr
22c50     B8 01 00 FF 
22c54     07 01 06 F6 | 	mov	_var01, ##@LR__5988
22c58     04 E4 05 F1 | 	add	objptr, #4
22c5c     F2 00 62 FC | 	wrlong	_var01, objptr
22c60     B8 01 00 FF 
22c64     34 01 06 F6 | 	mov	_var01, ##@LR__5989
22c68     04 E4 05 F1 | 	add	objptr, #4
22c6c     F2 00 62 FC | 	wrlong	_var01, objptr
22c70     B8 01 00 FF 
22c74     5E 01 06 F6 | 	mov	_var01, ##@LR__5990
22c78     04 E4 05 F1 | 	add	objptr, #4
22c7c     F2 00 62 FC | 	wrlong	_var01, objptr
22c80     B8 01 00 FF 
22c84     76 01 06 F6 | 	mov	_var01, ##@LR__5991
22c88     04 E4 05 F1 | 	add	objptr, #4
22c8c     F2 00 62 FC | 	wrlong	_var01, objptr
22c90     B8 01 00 FF 
22c94     96 01 06 F6 | 	mov	_var01, ##@LR__5992
22c98     04 E4 05 F1 | 	add	objptr, #4
22c9c     F2 00 62 FC | 	wrlong	_var01, objptr
22ca0     B8 01 00 FF 
22ca4     AC 01 06 F6 | 	mov	_var01, ##@LR__5993
22ca8     04 E4 05 F1 | 	add	objptr, #4
22cac     F2 00 62 FC | 	wrlong	_var01, objptr
22cb0     B8 01 00 FF 
22cb4     C9 01 06 F6 | 	mov	_var01, ##@LR__5994
22cb8     04 E4 05 F1 | 	add	objptr, #4
22cbc     F2 00 62 FC | 	wrlong	_var01, objptr
22cc0     B8 01 00 FF 
22cc4     EC 01 06 F6 | 	mov	_var01, ##@LR__5995
22cc8     04 E4 05 F1 | 	add	objptr, #4
22ccc     F2 00 62 FC | 	wrlong	_var01, objptr
22cd0     B9 01 00 FF 
22cd4     12 00 06 F6 | 	mov	_var01, ##@LR__5996
22cd8     04 E4 05 F1 | 	add	objptr, #4
22cdc     F2 00 62 FC | 	wrlong	_var01, objptr
22ce0     B9 01 00 FF 
22ce4     2D 00 06 F6 | 	mov	_var01, ##@LR__5997
22ce8     04 E4 05 F1 | 	add	objptr, #4
22cec     F2 00 62 FC | 	wrlong	_var01, objptr
22cf0     B9 01 00 FF 
22cf4     3D 00 06 F6 | 	mov	_var01, ##@LR__5998
22cf8     04 E4 05 F1 | 	add	objptr, #4
22cfc     F2 00 62 FC | 	wrlong	_var01, objptr
22d00     B9 01 00 FF 
22d04     4C 00 06 F6 | 	mov	_var01, ##@LR__5999
22d08     04 E4 05 F1 | 	add	objptr, #4
22d0c     F2 00 62 FC | 	wrlong	_var01, objptr
22d10     B9 01 00 FF 
22d14     66 00 06 F6 | 	mov	_var01, ##@LR__6000
22d18     04 E4 05 F1 | 	add	objptr, #4
22d1c     F2 00 62 FC | 	wrlong	_var01, objptr
22d20     B9 01 00 FF 
22d24     77 00 06 F6 | 	mov	_var01, ##@LR__6001
22d28     04 E4 05 F1 | 	add	objptr, #4
22d2c     F2 00 62 FC | 	wrlong	_var01, objptr
22d30     B9 01 00 FF 
22d34     8E 00 06 F6 | 	mov	_var01, ##@LR__6002
22d38     04 E4 05 F1 | 	add	objptr, #4
22d3c     F2 00 62 FC | 	wrlong	_var01, objptr
22d40     B9 01 00 FF 
22d44     A1 00 06 F6 | 	mov	_var01, ##@LR__6003
22d48     04 E4 05 F1 | 	add	objptr, #4
22d4c     F2 00 62 FC | 	wrlong	_var01, objptr
22d50     B9 01 00 FF 
22d54     B0 00 06 F6 | 	mov	_var01, ##@LR__6004
22d58     04 E4 05 F1 | 	add	objptr, #4
22d5c     F2 00 62 FC | 	wrlong	_var01, objptr
22d60     B9 01 00 FF 
22d64     CC 00 06 F6 | 	mov	_var01, ##@LR__6005
22d68     04 E4 05 F1 | 	add	objptr, #4
22d6c     F2 00 62 FC | 	wrlong	_var01, objptr
22d70     B9 01 00 FF 
22d74     DC 00 06 F6 | 	mov	_var01, ##@LR__6006
22d78     04 E4 05 F1 | 	add	objptr, #4
22d7c     F2 00 62 FC | 	wrlong	_var01, objptr
22d80     B9 01 00 FF 
22d84     EC 00 06 F6 | 	mov	_var01, ##@LR__6007
22d88     04 E4 05 F1 | 	add	objptr, #4
22d8c     F2 00 62 FC | 	wrlong	_var01, objptr
22d90     B9 01 00 FF 
22d94     1F 01 06 F6 | 	mov	_var01, ##@LR__6008
22d98     04 E4 05 F1 | 	add	objptr, #4
22d9c     F2 00 62 FC | 	wrlong	_var01, objptr
22da0     B9 01 00 FF 
22da4     3A 01 06 F6 | 	mov	_var01, ##@LR__6009
22da8     04 E4 05 F1 | 	add	objptr, #4
22dac     F2 00 62 FC | 	wrlong	_var01, objptr
22db0     B9 01 00 FF 
22db4     4F 01 06 F6 | 	mov	_var01, ##@LR__6010
22db8     04 E4 05 F1 | 	add	objptr, #4
22dbc     F2 00 62 FC | 	wrlong	_var01, objptr
22dc0     B9 01 00 FF 
22dc4     5B 01 06 F6 | 	mov	_var01, ##@LR__6011
22dc8     04 E4 05 F1 | 	add	objptr, #4
22dcc     F2 00 62 FC | 	wrlong	_var01, objptr
22dd0     B9 01 00 FF 
22dd4     6C 01 06 F6 | 	mov	_var01, ##@LR__6012
22dd8     04 E4 05 F1 | 	add	objptr, #4
22ddc     F2 00 62 FC | 	wrlong	_var01, objptr
22de0     B9 01 00 FF 
22de4     7C 01 06 F6 | 	mov	_var01, ##@LR__6013
22de8     04 E4 05 F1 | 	add	objptr, #4
22dec     F2 00 62 FC | 	wrlong	_var01, objptr
22df0     B9 01 00 FF 
22df4     97 01 06 F6 | 	mov	_var01, ##@LR__6014
22df8     04 E4 05 F1 | 	add	objptr, #4
22dfc     F2 00 62 FC | 	wrlong	_var01, objptr
22e00     B9 01 00 FF 
22e04     A7 01 06 F6 | 	mov	_var01, ##@LR__6015
22e08     04 E4 05 F1 | 	add	objptr, #4
22e0c     F2 00 62 FC | 	wrlong	_var01, objptr
22e10     B9 01 00 FF 
22e14     B5 01 06 F6 | 	mov	_var01, ##@LR__6016
22e18     04 E4 05 F1 | 	add	objptr, #4
22e1c     F2 00 62 FC | 	wrlong	_var01, objptr
22e20     B9 01 00 FF 
22e24     CF 01 06 F6 | 	mov	_var01, ##@LR__6017
22e28     04 E4 05 F1 | 	add	objptr, #4
22e2c     F2 00 62 FC | 	wrlong	_var01, objptr
22e30     BA 01 00 FF 
22e34     02 00 06 F6 | 	mov	_var01, ##@LR__6018
22e38     04 E4 05 F1 | 	add	objptr, #4
22e3c     F2 00 62 FC | 	wrlong	_var01, objptr
22e40     BA 01 00 FF 
22e44     1A 00 06 F6 | 	mov	_var01, ##@LR__6019
22e48     04 E4 05 F1 | 	add	objptr, #4
22e4c     F2 00 62 FC | 	wrlong	_var01, objptr
22e50     BA 01 00 FF 
22e54     35 00 06 F6 | 	mov	_var01, ##@LR__6020
22e58     04 E4 05 F1 | 	add	objptr, #4
22e5c     F2 00 62 FC | 	wrlong	_var01, objptr
22e60     BA 01 00 FF 
22e64     52 00 06 F6 | 	mov	_var01, ##@LR__6021
22e68     04 E4 05 F1 | 	add	objptr, #4
22e6c     F2 00 62 FC | 	wrlong	_var01, objptr
22e70     BA 01 00 FF 
22e74     6B 00 06 F6 | 	mov	_var01, ##@LR__6022
22e78     04 E4 05 F1 | 	add	objptr, #4
22e7c     F2 00 62 FC | 	wrlong	_var01, objptr
22e80     BA 01 00 FF 
22e84     8A 00 06 F6 | 	mov	_var01, ##@LR__6023
22e88     04 E4 05 F1 | 	add	objptr, #4
22e8c     F2 00 62 FC | 	wrlong	_var01, objptr
22e90     BA 01 00 FF 
22e94     98 00 06 F6 | 	mov	_var01, ##@LR__6024
22e98     04 E4 05 F1 | 	add	objptr, #4
22e9c     F2 00 62 FC | 	wrlong	_var01, objptr
22ea0     BA 01 00 FF 
22ea4     C5 00 06 F6 | 	mov	_var01, ##@LR__6025
22ea8     04 E4 05 F1 | 	add	objptr, #4
22eac     F2 00 62 FC | 	wrlong	_var01, objptr
22eb0     BA 01 00 FF 
22eb4     D2 00 06 F6 | 	mov	_var01, ##@LR__6026
22eb8     04 E4 05 F1 | 	add	objptr, #4
22ebc     F2 00 62 FC | 	wrlong	_var01, objptr
22ec0     BA 01 00 FF 
22ec4     E6 00 06 F6 | 	mov	_var01, ##@LR__6027
22ec8     04 E4 05 F1 | 	add	objptr, #4
22ecc     F2 00 62 FC | 	wrlong	_var01, objptr
22ed0     BA 01 00 FF 
22ed4     0A 01 06 F6 | 	mov	_var01, ##@LR__6028
22ed8     04 E4 05 F1 | 	add	objptr, #4
22edc     F2 00 62 FC | 	wrlong	_var01, objptr
22ee0     BA 01 00 FF 
22ee4     21 01 06 F6 | 	mov	_var01, ##@LR__6029
22ee8     04 E4 05 F1 | 	add	objptr, #4
22eec     F2 00 62 FC | 	wrlong	_var01, objptr
22ef0     BA 01 00 FF 
22ef4     34 01 06 F6 | 	mov	_var01, ##@LR__6030
22ef8     04 E4 05 F1 | 	add	objptr, #4
22efc     F2 00 62 FC | 	wrlong	_var01, objptr
22f00     BA 01 00 FF 
22f04     4B 01 06 F6 | 	mov	_var01, ##@LR__6031
22f08     04 E4 05 F1 | 	add	objptr, #4
22f0c     F2 00 62 FC | 	wrlong	_var01, objptr
22f10     BA 01 00 FF 
22f14     64 01 06 F6 | 	mov	_var01, ##@LR__6032
22f18     04 E4 05 F1 | 	add	objptr, #4
22f1c     F2 00 62 FC | 	wrlong	_var01, objptr
22f20     BA 01 00 FF 
22f24     86 01 06 F6 | 	mov	_var01, ##@LR__6033
22f28     04 E4 05 F1 | 	add	objptr, #4
22f2c     F2 00 62 FC | 	wrlong	_var01, objptr
22f30     BA 01 00 FF 
22f34     99 01 06 F6 | 	mov	_var01, ##@LR__6034
22f38     04 E4 05 F1 | 	add	objptr, #4
22f3c     F2 00 62 FC | 	wrlong	_var01, objptr
22f40     BA 01 00 FF 
22f44     A9 01 06 F6 | 	mov	_var01, ##@LR__6035
22f48     04 E4 05 F1 | 	add	objptr, #4
22f4c     F2 00 62 FC | 	wrlong	_var01, objptr
22f50     BA 01 00 FF 
22f54     C1 01 06 F6 | 	mov	_var01, ##@LR__6036
22f58     04 E4 05 F1 | 	add	objptr, #4
22f5c     F2 00 62 FC | 	wrlong	_var01, objptr
22f60     BA 01 00 FF 
22f64     D8 01 06 F6 | 	mov	_var01, ##@LR__6037
22f68     04 E4 05 F1 | 	add	objptr, #4
22f6c     F2 00 62 FC | 	wrlong	_var01, objptr
22f70     45 00 00 FF 
22f74     58 E5 85 F1 | 	sub	objptr, ##35672
22f78                 | _init_error_strings_ret
22f78     2D 00 64 FD | 	ret
22f7c                 | 
22f7c                 | '         
22f7c                 | ' sub printerror(err as integer, linenum=0 as integer)
22f7c                 | _printerror
22f7c     02 4A 05 F6 | 	mov	COUNT_, #2
22f80     A8 00 A0 FD | 	call	#pushregs_
22f84     09 27 02 F6 | 	mov	local01, arg01
22f88     0A 29 02 F6 | 	mov	local02, arg02
22f8c     BA 01 00 FF 
22f90     E5 13 06 F6 | 	mov	arg01, ##@LR__6038
22f94     10 21 B0 FD | 	call	#_hg010b_spin2_write
22f98     13 13 02 F6 | 	mov	arg01, local01
22f9c     AC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
22fa0     FD 12 02 F6 | 	mov	arg01, result1
22fa4     00 21 B0 FD | 	call	#_hg010b_spin2_write
22fa8     BA 01 00 FF 
22fac     EC 13 06 F6 | 	mov	arg01, ##@LR__6039
22fb0     F4 20 B0 FD | 	call	#_hg010b_spin2_write
22fb4     02 26 66 F0 | 	shl	local01, #2
22fb8     45 00 00 FF 
22fbc     7C E4 05 F1 | 	add	objptr, ##35452
22fc0     F2 26 02 F1 | 	add	local01, objptr
22fc4     13 13 02 FB | 	rdlong	arg01, local01
22fc8     45 00 00 FF 
22fcc     7C E4 85 F1 | 	sub	objptr, ##35452
22fd0     D4 20 B0 FD | 	call	#_hg010b_spin2_write
22fd4                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
22fd4                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
22fd4     01 28 56 F2 | 	cmps	local02, #1 wc
22fd8     24 00 90 CD |  if_b	jmp	#LR__2650
22fdc     BA 01 00 FF 
22fe0     F0 13 06 F6 | 	mov	arg01, ##@LR__6040
22fe4     C0 20 B0 FD | 	call	#_hg010b_spin2_write
22fe8     14 13 02 F6 | 	mov	arg01, local02
22fec     5C 26 B0 FD | 	call	#_hg010b_spin2_inttostr
22ff0     FD 12 02 F6 | 	mov	arg01, result1
22ff4                 | ' 
22ff4                 | ' write(text)
22ff4     B0 20 B0 FD | 	call	#_hg010b_spin2_write
22ff8                 | ' crlf
22ff8     AC 25 B0 FD | 	call	#_hg010b_spin2_crlf
22ffc     10 00 90 FD | 	jmp	#LR__2651
23000                 | LR__2650
23000     BA 01 00 FF 
23004     FA 13 06 F6 | 	mov	arg01, ##@LR__6041
23008                 | ' 
23008                 | ' write(text)
23008     9C 20 B0 FD | 	call	#_hg010b_spin2_write
2300c                 | ' crlf
2300c     98 25 B0 FD | 	call	#_hg010b_spin2_crlf
23010                 | LR__2651
23010     A7 F0 03 F6 | 	mov	ptra, fp
23014     B2 00 A0 FD | 	call	#popregs_
23018                 | _printerror_ret
23018     2D 00 64 FD | 	ret
2301c                 | 
2301c                 | ' 
2301c                 | ' '' ------------------------------- Hardware start/stop/initialization 
2301c                 | ' 
2301c                 | ' sub startpsram
2301c                 | _startpsram
2301c     00 12 06 F6 | 	mov	arg01, #0
23020     0A 14 C6 F9 | 	decod	arg02, #10
23024     0B 16 06 F6 | 	mov	arg03, #11
23028     07 18 06 F6 | 	mov	arg04, #7
2302c     0B 00 00 FF 
23030     CC E4 05 F1 | 	add	objptr, ##5836
23034     80 2A B0 FD | 	call	#_psram_spin2_startx
23038     2B 00 00 FF 
2303c     3C E5 05 F1 | 	add	objptr, ##22332
23040     F2 FA 61 FC | 	wrlong	result1, objptr
23044                 | '     return $7FF00 + cog*12
23044     0C E4 05 F1 | 	add	objptr, #12
23048     FF 03 80 FF 
2304c     F2 00 6A FC | 	wrlong	##524032, objptr
23050     37 00 00 FF 
23054     14 E4 85 F1 | 	sub	objptr, ##28180
23058                 | _startpsram_ret
23058     2D 00 64 FD | 	ret
2305c                 | 
2305c                 | ' 
2305c                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
2305c                 | _startvideo
2305c     01 4A 05 F6 | 	mov	COUNT_, #1
23060     A8 00 A0 FD | 	call	#pushregs_
23064     37 00 00 FF 
23068     14 E4 05 F1 | 	add	objptr, ##28180
2306c     F2 18 02 FB | 	rdlong	arg04, objptr
23070     37 00 00 FF 
23074     14 E4 85 F1 | 	sub	objptr, ##28180
23078     0A 13 02 F6 | 	mov	arg01, arg02
2307c     0C 15 02 F6 | 	mov	arg02, arg04
23080     1C 08 B0 FD | 	call	#_hg010b_spin2_start
23084     37 00 00 FF 
23088     00 E4 05 F1 | 	add	objptr, ##28160
2308c     F2 FA 61 FC | 	wrlong	result1, objptr
23090                 | ' 
23090                 | ' videocog=v.start(pin,mbox)
23090                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
23090     00 26 06 F6 | 	mov	local01, #0
23094     2B 00 00 FF 
23098     34 E5 85 F1 | 	sub	objptr, ##22324
2309c                 | LR__2660
2309c     13 13 02 F6 | 	mov	arg01, local01
230a0     00 28 00 FF 
230a4     00 14 06 F6 | 	mov	arg02, ##5242880
230a8     64 2E B0 FD | 	call	#_psram_spin2_setQos
230ac     01 26 06 F1 | 	add	local01, #1
230b0     08 26 56 F2 | 	cmps	local01, #8 wc
230b4     E4 FF 9F CD |  if_b	jmp	#LR__2660
230b8     2B 00 00 FF 
230bc     34 E5 05 F1 | 	add	objptr, ##22324
230c0     F2 12 02 FB | 	rdlong	arg01, objptr
230c4     7A 00 02 FF 
230c8     00 14 06 F6 | 	mov	arg02, ##67171328
230cc     2B 00 00 FF 
230d0     34 E5 85 F1 | 	sub	objptr, ##22324
230d4     38 2E B0 FD | 	call	#_psram_spin2_setQos
230d8     0B 00 00 FF 
230dc     CC E4 85 F1 | 	sub	objptr, ##5836
230e0                 | ' psram.setQoS(videocog, $0400f400) 
230e0                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
230e0     F2 14 02 F6 | 	mov	arg02, objptr
230e4     00 08 05 FF 
230e8     00 14 46 F5 | 	or	arg02, ##168820736
230ec     00 16 06 F6 | 	mov	arg03, #0
230f0     00 18 06 F6 | 	mov	arg04, #0
230f4     00 12 06 F6 | 	mov	arg01, #0
230f8     18 43 B0 FD | 	call	#__system___basic_open
230fc                 | ' return videocog
230fc     37 00 00 FF 
23100     00 E4 05 F1 | 	add	objptr, ##28160
23104     F2 FA 01 FB | 	rdlong	result1, objptr
23108     37 00 00 FF 
2310c     00 E4 85 F1 | 	sub	objptr, ##28160
23110     A7 F0 03 F6 | 	mov	ptra, fp
23114     B2 00 A0 FD | 	call	#popregs_
23118                 | _startvideo_ret
23118     2D 00 64 FD | 	ret
2311c                 | 
2311c                 | ' 
2311c                 | ' 
2311c                 | ' 
2311c                 | ' '' ------------------------------- Convenient psram peek/poke
2311c                 | ' 
2311c                 | ' sub pslpoke(addr as ulong,value as ulong)
2311c                 | _pslpoke
2311c     00 4A 05 F6 | 	mov	COUNT_, #0
23120     A8 00 A0 FD | 	call	#pushregs_
23124     08 F0 07 F1 | 	add	ptra, #8
23128     A7 12 62 FC | 	wrlong	arg01, fp
2312c     04 4E 05 F1 | 	add	fp, #4
23130     A7 14 62 FC | 	wrlong	arg02, fp
23134     A7 12 02 F6 | 	mov	arg01, fp
23138     04 4E 85 F1 | 	sub	fp, #4
2313c     A7 14 02 FB | 	rdlong	arg02, fp
23140     04 16 06 F6 | 	mov	arg03, #4
23144     0B 00 00 FF 
23148     CC E4 05 F1 | 	add	objptr, ##5836
2314c     30 2C B0 FD | 	call	#_psram_spin2_write
23150     0B 00 00 FF 
23154     CC E4 85 F1 | 	sub	objptr, ##5836
23158     A7 F0 03 F6 | 	mov	ptra, fp
2315c     B2 00 A0 FD | 	call	#popregs_
23160                 | _pslpoke_ret
23160     2D 00 64 FD | 	ret
23164                 | 
23164                 | ' 
23164                 | ' sub psdpoke(addr as ulong,value as ulong)
23164                 | _psdpoke
23164     00 4A 05 F6 | 	mov	COUNT_, #0
23168     A8 00 A0 FD | 	call	#pushregs_
2316c     08 F0 07 F1 | 	add	ptra, #8
23170     A7 12 62 FC | 	wrlong	arg01, fp
23174     04 4E 05 F1 | 	add	fp, #4
23178     A7 14 62 FC | 	wrlong	arg02, fp
2317c     A7 12 02 F6 | 	mov	arg01, fp
23180     04 4E 85 F1 | 	sub	fp, #4
23184     A7 14 02 FB | 	rdlong	arg02, fp
23188     02 16 06 F6 | 	mov	arg03, #2
2318c     0B 00 00 FF 
23190     CC E4 05 F1 | 	add	objptr, ##5836
23194     E8 2B B0 FD | 	call	#_psram_spin2_write
23198     0B 00 00 FF 
2319c     CC E4 85 F1 | 	sub	objptr, ##5836
231a0     A7 F0 03 F6 | 	mov	ptra, fp
231a4     B2 00 A0 FD | 	call	#popregs_
231a8                 | _psdpoke_ret
231a8     2D 00 64 FD | 	ret
231ac                 | 
231ac                 | ' 
231ac                 | ' sub pspoke(addr as ulong,value as ulong)
231ac                 | _pspoke
231ac     00 4A 05 F6 | 	mov	COUNT_, #0
231b0     A8 00 A0 FD | 	call	#pushregs_
231b4     08 F0 07 F1 | 	add	ptra, #8
231b8     A7 12 62 FC | 	wrlong	arg01, fp
231bc     04 4E 05 F1 | 	add	fp, #4
231c0     A7 14 62 FC | 	wrlong	arg02, fp
231c4     A7 12 02 F6 | 	mov	arg01, fp
231c8     04 4E 85 F1 | 	sub	fp, #4
231cc     A7 14 02 FB | 	rdlong	arg02, fp
231d0     01 16 06 F6 | 	mov	arg03, #1
231d4     0B 00 00 FF 
231d8     CC E4 05 F1 | 	add	objptr, ##5836
231dc     A0 2B B0 FD | 	call	#_psram_spin2_write
231e0     0B 00 00 FF 
231e4     CC E4 85 F1 | 	sub	objptr, ##5836
231e8     A7 F0 03 F6 | 	mov	ptra, fp
231ec     B2 00 A0 FD | 	call	#popregs_
231f0                 | _pspoke_ret
231f0     2D 00 64 FD | 	ret
231f4                 | 
231f4                 | ' 
231f4                 | ' function pspeek(adr as ulong) as ubyte
231f4                 | _pspeek
231f4     00 4A 05 F6 | 	mov	COUNT_, #0
231f8     A8 00 A0 FD | 	call	#pushregs_
231fc     0C F0 07 F1 | 	add	ptra, #12
23200     04 4E 05 F1 | 	add	fp, #4
23204     A7 12 62 FC | 	wrlong	arg01, fp
23208     04 4E 05 F1 | 	add	fp, #4
2320c     A7 12 02 F6 | 	mov	arg01, fp
23210     04 4E 85 F1 | 	sub	fp, #4
23214     A7 14 02 FB | 	rdlong	arg02, fp
23218     04 4E 85 F1 | 	sub	fp, #4
2321c     01 16 06 F6 | 	mov	arg03, #1
23220     0B 00 00 FF 
23224     CC E4 05 F1 | 	add	objptr, ##5836
23228     B8 2A B0 FD | 	call	#_psram_spin2_read1
2322c     0B 00 00 FF 
23230     CC E4 85 F1 | 	sub	objptr, ##5836
23234                 | ' psram.read1(varptr(res),adr,1)
23234                 | ' return res
23234     08 4E 05 F1 | 	add	fp, #8
23238     A7 FA C1 FA | 	rdbyte	result1, fp
2323c     08 4E 85 F1 | 	sub	fp, #8
23240     A7 F0 03 F6 | 	mov	ptra, fp
23244     B2 00 A0 FD | 	call	#popregs_
23248                 | _pspeek_ret
23248     2D 00 64 FD | 	ret
2324c                 | 
2324c                 | ' 
2324c                 | ' function pslpeek(adr as ulong) as ulong
2324c                 | _pslpeek
2324c     00 4A 05 F6 | 	mov	COUNT_, #0
23250     A8 00 A0 FD | 	call	#pushregs_
23254     0C F0 07 F1 | 	add	ptra, #12
23258     04 4E 05 F1 | 	add	fp, #4
2325c     A7 12 62 FC | 	wrlong	arg01, fp
23260     04 4E 05 F1 | 	add	fp, #4
23264     A7 12 02 F6 | 	mov	arg01, fp
23268     04 4E 85 F1 | 	sub	fp, #4
2326c     A7 14 02 FB | 	rdlong	arg02, fp
23270     04 4E 85 F1 | 	sub	fp, #4
23274     04 16 06 F6 | 	mov	arg03, #4
23278     0B 00 00 FF 
2327c     CC E4 05 F1 | 	add	objptr, ##5836
23280     60 2A B0 FD | 	call	#_psram_spin2_read1
23284     0B 00 00 FF 
23288     CC E4 85 F1 | 	sub	objptr, ##5836
2328c                 | ' psram.read1(varptr(res),adr,4)
2328c                 | ' return res
2328c     08 4E 05 F1 | 	add	fp, #8
23290     A7 FA 01 FB | 	rdlong	result1, fp
23294     08 4E 85 F1 | 	sub	fp, #8
23298     A7 F0 03 F6 | 	mov	ptra, fp
2329c     B2 00 A0 FD | 	call	#popregs_
232a0                 | _pslpeek_ret
232a0     2D 00 64 FD | 	ret
232a4                 | 
232a4                 | ' 
232a4                 | ' function psdpeek(adr as ulong) as ulong
232a4                 | _psdpeek
232a4     00 4A 05 F6 | 	mov	COUNT_, #0
232a8     A8 00 A0 FD | 	call	#pushregs_
232ac     0C F0 07 F1 | 	add	ptra, #12
232b0     04 4E 05 F1 | 	add	fp, #4
232b4     A7 12 62 FC | 	wrlong	arg01, fp
232b8     04 4E 05 F1 | 	add	fp, #4
232bc     A7 12 02 F6 | 	mov	arg01, fp
232c0     04 4E 85 F1 | 	sub	fp, #4
232c4     A7 14 02 FB | 	rdlong	arg02, fp
232c8     04 4E 85 F1 | 	sub	fp, #4
232cc     02 16 06 F6 | 	mov	arg03, #2
232d0     0B 00 00 FF 
232d4     CC E4 05 F1 | 	add	objptr, ##5836
232d8     08 2A B0 FD | 	call	#_psram_spin2_read1
232dc     0B 00 00 FF 
232e0     CC E4 85 F1 | 	sub	objptr, ##5836
232e4                 | ' psram.read1(varptr(res),adr,2)
232e4                 | ' return res
232e4     08 4E 05 F1 | 	add	fp, #8
232e8     A7 FA E1 FA | 	rdword	result1, fp
232ec     08 4E 85 F1 | 	sub	fp, #8
232f0     A7 F0 03 F6 | 	mov	ptra, fp
232f4     B2 00 A0 FD | 	call	#popregs_
232f8                 | _psdpeek_ret
232f8     2D 00 64 FD | 	ret
232fc                 | 
232fc                 | ' 
232fc                 | ' '' ------------------------------- USB keyboard scan to char translator
232fc                 | ' 
232fc                 | ' function scantochar(key)
232fc                 | _scantochar
232fc                 | ' 
232fc                 | ' select case (key shr 8) and 255
232fc     09 01 02 F6 | 	mov	_var01, arg01
23300     08 00 C6 F0 | 	sar	_var01, #8
23304     FF 00 0E F5 | 	and	_var01, #255 wz
23308     24 00 90 AD |  if_e	jmp	#LR__2670
2330c     02 00 0E F2 | 	cmp	_var01, #2 wz
23310     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
23314     30 00 90 AD |  if_e	jmp	#LR__2671
23318     40 00 0E F2 | 	cmp	_var01, #64 wz
2331c     44 00 90 AD |  if_e	jmp	#LR__2672
23320     42 00 0E F2 | 	cmp	_var01, #66 wz
23324     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
23328     70 00 90 5D |  if_ne	jmp	#LR__2674
2332c     50 00 90 FD | 	jmp	#LR__2673
23330                 | LR__2670
23330     09 FB 01 F6 | 	mov	result1, arg01
23334     7F FA 05 F5 | 	and	result1, #127
23338     02 FA 65 F0 | 	shl	result1, #2
2333c     F5 FA 01 F1 | 	add	result1, ptr__dat__
23340     FD FA C1 FA | 	rdbyte	result1, result1
23344     54 00 90 FD | 	jmp	#_scantochar_ret
23348                 | LR__2671
23348     09 FB 01 F6 | 	mov	result1, arg01
2334c     7F FA 05 F5 | 	and	result1, #127
23350     02 FA 65 F0 | 	shl	result1, #2
23354     01 FA 05 F1 | 	add	result1, #1
23358     F5 FA 01 F1 | 	add	result1, ptr__dat__
2335c     FD FA C1 FA | 	rdbyte	result1, result1
23360     38 00 90 FD | 	jmp	#_scantochar_ret
23364                 | LR__2672
23364     09 FB 01 F6 | 	mov	result1, arg01
23368     7F FA 05 F5 | 	and	result1, #127
2336c     02 FA 65 F0 | 	shl	result1, #2
23370     02 FA 05 F1 | 	add	result1, #2
23374     F5 FA 01 F1 | 	add	result1, ptr__dat__
23378     FD FA C1 FA | 	rdbyte	result1, result1
2337c     1C 00 90 FD | 	jmp	#_scantochar_ret
23380                 | LR__2673
23380     09 FB 01 F6 | 	mov	result1, arg01
23384     7F FA 05 F5 | 	and	result1, #127
23388     02 FA 65 F0 | 	shl	result1, #2
2338c     03 FA 05 F1 | 	add	result1, #3
23390     F5 FA 01 F1 | 	add	result1, ptr__dat__
23394     FD FA C1 FA | 	rdbyte	result1, result1
23398     00 00 90 FD | 	jmp	#_scantochar_ret
2339c                 | LR__2674
2339c                 | _scantochar_ret
2339c     2D 00 64 FD | 	ret
233a0                 | 
233a0                 | _program
233a0     01 4A 05 F6 | 	mov	COUNT_, #1
233a4     A8 00 A0 FD | 	call	#pushregs_
233a8     70 FC BF FD | 	call	#_startpsram
233ac     40 12 06 F6 | 	mov	arg01, #64
233b0     00 14 06 F6 | 	mov	arg02, #0
233b4     00 16 06 F6 | 	mov	arg03, #0
233b8     A0 FC BF FD | 	call	#_startvideo
233bc     37 00 00 FF 
233c0     14 E4 05 F1 | 	add	objptr, ##28180
233c4     F2 12 02 FB | 	rdlong	arg01, objptr
233c8     00 14 06 F6 | 	mov	arg02, #0
233cc     FB 03 00 FF 
233d0     00 17 06 F6 | 	mov	arg03, ##521984
233d4     2B 00 00 FF 
233d8     48 E5 85 F1 | 	sub	objptr, ##22344
233dc     28 2F B0 FD | 	call	#_audio096_spin2_start
233e0     FE 16 02 F6 | 	mov	arg03, result2
233e4     2B 00 00 FF 
233e8     30 E5 05 F1 | 	add	objptr, ##22320
233ec     F2 FA 61 FC | 	wrlong	result1, objptr
233f0     14 E4 05 F1 | 	add	objptr, #20
233f4     F2 16 62 FC | 	wrlong	arg03, objptr
233f8     37 00 00 FF 
233fc     10 E4 85 F1 | 	sub	objptr, ##28176
23400     32 12 06 F6 | 	mov	arg01, #50
23404     58 38 B0 FD | 	call	#__system___waitms
23408     37 00 00 FF 
2340c     10 E4 05 F1 | 	add	objptr, ##28176
23410     F2 12 02 FB | 	rdlong	arg01, objptr
23414     37 00 00 FF 
23418     10 E4 85 F1 | 	sub	objptr, ##28176
2341c     14 12 06 F1 | 	add	arg01, #20
23420     20 00 80 FF 
23424     09 01 58 FC | 	wrword	##16384, arg01
23428     EC 2B B0 FD | 	call	#_usbnew_spin2_start
2342c     37 00 00 FF 
23430     04 E4 05 F1 | 	add	objptr, ##28164
23434     F2 FA 61 FC | 	wrlong	result1, objptr
23438                 | '   mouse_limits[0] := xlim
23438     0F 00 00 FF 
2343c     B8 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7864
23440     01 00 80 FF 
23444     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
23448                 | '   mouse_limits[1] := ylim
23448     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
2344c     01 00 80 FF 
23450     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
23454     36 00 00 FF 
23458     F3 E4 85 F1 | 	sub	objptr, ##27891
2345c     F2 12 02 F6 | 	mov	arg01, objptr
23460     11 E5 85 F1 | 	sub	objptr, #273
23464     C4 12 06 F1 | 	add	arg01, #196
23468                 | '   mouse_outptr := ptr
23468     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
2346c     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
23470     0F 00 00 FF 
23474     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
23478     16 00 00 FF 
2347c     CA EA 05 F1 | 	add	ptr__dat__, ##11466
23480     F5 14 02 F6 | 	mov	arg02, ptr__dat__
23484     16 00 00 FF 
23488     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
2348c     10 12 06 F6 | 	mov	arg01, #16
23490     A4 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
23494     10 12 06 F6 | 	mov	arg01, #16
23498     20 14 06 F6 | 	mov	arg02, #32
2349c     20 16 06 F6 | 	mov	arg03, #32
234a0     24 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
234a4     09 12 C6 F9 | 	decod	arg01, #9
234a8     2C 15 06 F6 | 	mov	arg02, #300
234ac     C0 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
234b0     F2 16 02 F6 | 	mov	arg03, objptr
234b4     50 00 00 FF 
234b8     44 E5 05 F1 | 	add	objptr, ##41284
234bc     F2 14 02 F6 | 	mov	arg02, objptr
234c0     0A 17 62 FC | 	wrlong	arg03, arg02
234c4     04 14 06 F1 | 	add	arg02, #4
234c8     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
234cc     EF 14 02 F6 | 	mov	arg02, entryptr__
234d0     1E FA 05 F6 | 	mov	result1, #30
234d4     28 E4 61 FD | 	setq	objptr
234d8     0A FB F1 FC | 	coginit	result1, arg02 wc
234dc     01 FA 65 C6 |  if_b	neg	result1, #1
234e0     04 E4 85 F1 | 	sub	objptr, #4
234e4     F2 FA 61 FC | 	wrlong	result1, objptr
234e8     01 00 00 FF 
234ec     54 E5 05 F1 | 	add	objptr, ##852
234f0     F2 00 68 FC | 	wrlong	#0, objptr
234f4     1B 00 00 FF 
234f8     60 E4 85 F1 | 	sub	objptr, ##13920
234fc     F2 04 68 FC | 	wrlong	#2, objptr
23500     04 E4 05 F1 | 	add	objptr, #4
23504     F2 26 69 FC | 	wrlong	#147, objptr
23508     04 E4 05 F1 | 	add	objptr, #4
2350c     F2 34 69 FC | 	wrlong	#154, objptr
23510     04 E4 05 F1 | 	add	objptr, #4
23514     F2 08 68 FC | 	wrlong	#4, objptr
23518     04 E4 85 F1 | 	sub	objptr, #4
2351c     F2 16 02 FB | 	rdlong	arg03, objptr
23520     14 E4 85 F1 | 	sub	objptr, #20
23524     F2 16 62 FC | 	wrlong	arg03, objptr
23528     04 E4 05 F1 | 	add	objptr, #4
2352c     F2 00 68 FC | 	wrlong	#0, objptr
23530     04 E4 05 F1 | 	add	objptr, #4
23534     F2 00 68 FC | 	wrlong	#0, objptr
23538     19 00 00 FF 
2353c     0C E5 05 F1 | 	add	objptr, ##13068
23540     F2 02 68 FC | 	wrlong	#1, objptr
23544     01 00 00 FF 
23548     60 E5 05 F1 | 	add	objptr, ##864
2354c     F2 00 68 FC | 	wrlong	#0, objptr
23550     01 00 00 FF 
23554     00 EA 05 F1 | 	add	ptr__dat__, ##512
23558     08 E4 05 F1 | 	add	objptr, #8
2355c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
23560     04 E4 85 F1 | 	sub	objptr, #4
23564     03 00 80 FF 
23568     F2 3C 69 FC | 	wrlong	##1694, objptr
2356c     0D 00 00 FF 
23570     3C E4 85 F1 | 	sub	objptr, ##6716
23574     F2 18 68 FC | 	wrlong	#12, objptr
23578     45 00 00 FF 
2357c     64 E4 85 F1 | 	sub	objptr, ##35428
23580     01 00 00 FF 
23584     00 EA 85 F1 | 	sub	ptr__dat__, ##512
23588     A8 D8 BF FD | 	call	#_init_commands
2358c     5C F6 BF FD | 	call	#_init_error_strings
23590     E0 ED BF FD | 	call	#_init_audio
23594     EC 27 BF FD | 	call	#_do_new
23598     37 00 00 FF 
2359c     3C E4 05 F1 | 	add	objptr, ##28220
235a0     F2 12 02 FB | 	rdlong	arg01, objptr
235a4     04 E4 85 F1 | 	sub	objptr, #4
235a8     F2 14 02 FB | 	rdlong	arg02, objptr
235ac     37 00 00 FF 
235b0     38 E4 85 F1 | 	sub	objptr, ##28216
235b4     30 17 B0 FD | 	call	#_hg010b_spin2_cls
235b8     37 00 00 FF 
235bc     40 E4 05 F1 | 	add	objptr, ##28224
235c0     F2 12 02 FB | 	rdlong	arg01, objptr
235c4     37 00 00 FF 
235c8     40 E4 85 F1 | 	sub	objptr, ##28224
235cc     C8 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
235d0                 | ' 
235d0                 | ' leading_spaces:=amount
235d0     01 00 00 FF 
235d4     B6 E4 05 F1 | 	add	objptr, ##694
235d8     F2 04 68 FC | 	wrlong	#2, objptr
235dc     01 00 00 FF 
235e0     B6 E4 85 F1 | 	sub	objptr, ##694
235e4     BA 01 00 FF 
235e8     FB 27 06 F6 | 	mov	local01, ##@LR__6042
235ec     3D 12 06 F6 | 	mov	arg01, #61
235f0     3C 14 06 F6 | 	mov	arg02, #60
235f4     3B 16 06 F6 | 	mov	arg03, #59
235f8     3A 18 06 F6 | 	mov	arg04, #58
235fc     F4 80 B0 FD | 	call	#__system___vfs_open_sdcardx
23600     FD 14 02 F6 | 	mov	arg02, result1
23604     13 13 02 F6 | 	mov	arg01, local01
23608     2C 37 B0 FD | 	call	#__system___mount
2360c     BA 01 00 FF 
23610     FF 13 06 F6 | 	mov	arg01, ##@LR__6043
23614     E0 39 B0 FD | 	call	#__system___chdir
23618     BB 01 00 FF 
2361c     07 26 06 F6 | 	mov	local01, ##@LR__6044
23620     4A 00 00 FF 
23624     94 E4 05 F1 | 	add	objptr, ##38036
23628     F2 26 62 FC | 	wrlong	local01, objptr
2362c     13 00 00 FF 
23630     60 E4 85 F1 | 	sub	objptr, ##9824
23634     F2 12 02 FB | 	rdlong	arg01, objptr
23638     37 00 00 FF 
2363c     34 E4 85 F1 | 	sub	objptr, ##28212
23640     01 12 66 F0 | 	shl	arg01, #1
23644     01 14 06 F6 | 	mov	arg02, #1
23648     8C 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
2364c                 | ' init_commands
2364c                 | ' init_error_strings
2364c                 | ' init_audio
2364c                 | ' do_new
2364c                 | ' cls(ink, paper)
2364c                 | ' v.setfontfamily(font) 				' use ST Mono font
2364c                 | ' v.setleadingspaces(2)
2364c                 | ' mount "/sd", _vfs_open_sdcard()
2364c                 | ' chdir "/sd/bas"
2364c                 | ' currentdir$="/sd/bas"
2364c                 | ' position 2*editor_spaces,1 : print ver$
2364c     00 12 06 F6 | 	mov	arg01, #0
23650     BC 8F B0 FD | 	call	#__system___getiolock_0606
23654     FD 12 02 F6 | 	mov	arg01, result1
23658     10 33 B0 FD | 	call	#__system___lockmem
2365c     18 00 00 FF 
23660     40 EB 05 F1 | 	add	ptr__dat__, ##12608
23664     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
23668     18 00 00 FF 
2366c     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
23670     00 12 06 F6 | 	mov	arg01, #0
23674     00 16 06 F6 | 	mov	arg03, #0
23678     E8 3F B0 FD | 	call	#__system___basic_print_string
2367c     00 12 06 F6 | 	mov	arg01, #0
23680     0A 14 06 F6 | 	mov	arg02, #10
23684     00 16 06 F6 | 	mov	arg03, #0
23688     80 3F B0 FD | 	call	#__system___basic_print_char
2368c     00 12 06 F6 | 	mov	arg01, #0
23690     7C 8F B0 FD | 	call	#__system___getiolock_0606
23694     FD 00 68 FC | 	wrlong	#0, result1
23698     52 00 00 FF 
2369c     98 E4 05 F1 | 	add	objptr, ##42136
236a0     F2 12 02 FB | 	rdlong	arg01, objptr
236a4     0F 00 00 FF 
236a8     3C E4 85 F1 | 	sub	objptr, ##7740
236ac     F2 26 02 FB | 	rdlong	local01, objptr
236b0     43 00 00 FF 
236b4     5C E4 85 F1 | 	sub	objptr, ##34396
236b8     13 13 82 F1 | 	sub	arg01, local01
236bc     00 14 06 F6 | 	mov	arg02, #0
236c0     0A 16 06 F6 | 	mov	arg03, #10
236c4     78 55 B0 FD | 	call	#__system__Number_S
236c8     FD 12 02 F6 | 	mov	arg01, result1
236cc     BB 01 00 FF 
236d0     0F 14 06 F6 | 	mov	arg02, ##@LR__6045
236d4     F0 32 B0 FD | 	call	#__system___string_concat
236d8     FD 26 02 F6 | 	mov	local01, result1
236dc     50 00 00 FF 
236e0     38 E5 05 F1 | 	add	objptr, ##41272
236e4     F2 26 62 FC | 	wrlong	local01, objptr
236e8     50 00 00 FF 
236ec     38 E5 85 F1 | 	sub	objptr, ##41272
236f0                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
236f0     00 12 06 F6 | 	mov	arg01, #0
236f4     18 8F B0 FD | 	call	#__system___getiolock_0606
236f8     FD 12 02 F6 | 	mov	arg01, result1
236fc     6C 32 B0 FD | 	call	#__system___lockmem
23700     50 00 00 FF 
23704     38 E5 05 F1 | 	add	objptr, ##41272
23708     F2 14 02 FB | 	rdlong	arg02, objptr
2370c     50 00 00 FF 
23710     38 E5 85 F1 | 	sub	objptr, ##41272
23714     00 12 06 F6 | 	mov	arg01, #0
23718     00 16 06 F6 | 	mov	arg03, #0
2371c     44 3F B0 FD | 	call	#__system___basic_print_string
23720     00 12 06 F6 | 	mov	arg01, #0
23724     0A 14 06 F6 | 	mov	arg02, #10
23728     00 16 06 F6 | 	mov	arg03, #0
2372c     DC 3E B0 FD | 	call	#__system___basic_print_char
23730     00 12 06 F6 | 	mov	arg01, #0
23734     D8 8E B0 FD | 	call	#__system___getiolock_0606
23738     FD 00 68 FC | 	wrlong	#0, result1
2373c     37 00 00 FF 
23740     34 E4 05 F1 | 	add	objptr, ##28212
23744     F2 12 02 FB | 	rdlong	arg01, objptr
23748     37 00 00 FF 
2374c     34 E4 85 F1 | 	sub	objptr, ##28212
23750     01 12 66 F0 | 	shl	arg01, #1
23754     04 14 06 F6 | 	mov	arg02, #4
23758     7C 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
2375c                 | ' position 2*editor_spaces,4 : print "Ready"
2375c     00 12 06 F6 | 	mov	arg01, #0
23760     AC 8E B0 FD | 	call	#__system___getiolock_0606
23764     FD 12 02 F6 | 	mov	arg01, result1
23768     00 32 B0 FD | 	call	#__system___lockmem
2376c     BB 01 00 FF 
23770     21 14 06 F6 | 	mov	arg02, ##@LR__6046
23774     00 12 06 F6 | 	mov	arg01, #0
23778     00 16 06 F6 | 	mov	arg03, #0
2377c     E4 3E B0 FD | 	call	#__system___basic_print_string
23780     00 12 06 F6 | 	mov	arg01, #0
23784     0A 14 06 F6 | 	mov	arg02, #10
23788     00 16 06 F6 | 	mov	arg03, #0
2378c     7C 3E B0 FD | 	call	#__system___basic_print_char
23790     00 12 06 F6 | 	mov	arg01, #0
23794     78 8E B0 FD | 	call	#__system___getiolock_0606
23798     FD 00 68 FC | 	wrlong	#0, result1
2379c     00 14 06 F6 | 	mov	arg02, #0
237a0     01 14 D6 F7 | 	test	arg02, #1 wc
237a4     5A 4C 64 FD | 	drvc	#38
237a8     01 14 D6 F7 | 	test	arg02, #1 wc
237ac     5A 4E 64 FD | 	drvc	#39
237b0     BB 01 00 FF 
237b4     27 26 06 F6 | 	mov	local01, ##@LR__6047
237b8     52 00 00 FF 
237bc     C4 E4 05 F1 | 	add	objptr, ##42180
237c0     F2 26 62 FC | 	wrlong	local01, objptr
237c4     04 E4 05 F1 | 	add	objptr, #4
237c8     FF FF FF FF 
237cc     F2 FE 6B FC | 	wrlong	##-1, objptr
237d0     0C E4 05 F1 | 	add	objptr, #12
237d4     F2 00 68 FC | 	wrlong	#0, objptr
237d8     52 00 00 FF 
237dc     D4 E4 85 F1 | 	sub	objptr, ##42196
237e0                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
237e0                 | ' loadname="noname.bas"
237e0                 | ' do_insert=-1
237e0                 | ' inload=0
237e0                 | ' 
237e0                 | ' open "/sd/bas/autorun.bas" for input as #9
237e0     BB 01 00 FF 
237e4     32 14 06 F6 | 	mov	arg02, ##@LR__6048
237e8     09 12 06 F6 | 	mov	arg01, #9
237ec     00 16 06 F6 | 	mov	arg03, #0
237f0     7C 3D B0 FD | 	call	#__system___basic_open_string
237f4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
237f8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
237fc     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
23800     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23804     52 00 00 FF 
23808     D8 E4 05 F1 | 	add	objptr, ##42200
2380c     F2 FA 61 FC | 	wrlong	result1, objptr
23810     52 00 00 FF 
23814     D8 E4 85 F1 | 	sub	objptr, ##42200
23818                 | ' err=geterr()
23818                 | ' close #9
23818     09 12 06 F6 | 	mov	arg01, #9
2381c     A8 84 B0 FD | 	call	#__system__close
23820                 | ' if err=0 then line$="run autorun.bas" : interpret
23820     52 00 00 FF 
23824     D8 E4 05 F1 | 	add	objptr, ##42200
23828     F2 26 0A FB | 	rdlong	local01, objptr wz
2382c     52 00 00 FF 
23830     D8 E4 85 F1 | 	sub	objptr, ##42200
23834     BB 01 00 AF 
23838     46 26 06 A6 |  if_e	mov	local01, ##@LR__6049
2383c     37 00 00 AF 
23840     1C E4 05 A1 |  if_e	add	objptr, ##28188
23844     F2 26 62 AC |  if_e	wrlong	local01, objptr
23848     37 00 00 AF 
2384c     1C E4 85 A1 |  if_e	sub	objptr, ##28188
23850     D4 DF BD AD |  if_e	call	#_interpret
23854                 | ' 
23854                 | ' 
23854                 | ' '-------------------------------------------------------------------------------------------------------- 
23854                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
23854                 | ' '--------------------------------------------------------------------------------------------------------
23854                 | ' 
23854                 | ' do
23854                 | LR__2680
23854     AC CF BD FD | 	call	#_edit
23858     FD 26 02 F6 | 	mov	local01, result1
2385c     37 00 00 FF 
23860     1C E4 05 F1 | 	add	objptr, ##28188
23864     F2 26 62 FC | 	wrlong	local01, objptr
23868     37 00 00 FF 
2386c     1C E4 85 F1 | 	sub	objptr, ##28188
23870     B4 DF BD FD | 	call	#_interpret
23874     BB 01 00 FF 
23878     56 26 06 F6 | 	mov	local01, ##@LR__6050
2387c     37 00 00 FF 
23880     1C E4 05 F1 | 	add	objptr, ##28188
23884     F2 26 62 FC | 	wrlong	local01, objptr
23888     37 00 00 FF 
2388c     1C E4 85 F1 | 	sub	objptr, ##28188
23890     C0 FF 9F FD | 	jmp	#LR__2680
23894     A7 F0 03 F6 | 	mov	ptra, fp
23898     B2 00 A0 FD | 	call	#popregs_
2389c                 | _program_ret
2389c     2D 00 64 FD | 	ret
238a0                 | 
238a0                 | ' '' this is not a main program.
238a0                 | ' 
238a0                 | ' '****************************************************************************************************************
238a0                 | ' '                                                                                                             	*
238a0                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
238a0                 | ' '                                                                                                            	*
238a0                 | ' ' base - HDMI base pin												*
238a0                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
238a0                 | ' '														*
238a0                 | ' '														*
238a0                 | ' '****************************************************************************************************************
238a0                 | ' 
238a0                 | ' pub start(base,mb):result |i
238a0                 | _hg010b_spin2_start
238a0                 | ' 
238a0                 | ' '--------------------------- initialize pointers and variables
238a0                 | ' 
238a0                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
238a0     34 E4 05 F1 | 	add	objptr, #52
238a4     F2 FA 01 F6 | 	mov	result1, objptr
238a8     28 E4 85 F1 | 	sub	objptr, #40
238ac     F2 FA 61 FC | 	wrlong	result1, objptr
238b0                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
238b0                 | ' hdmibase:=base							' HDMI base pin, 8*n
238b0     18 E4 05 F1 | 	add	objptr, #24
238b4     F2 12 62 FC | 	wrlong	arg01, objptr
238b8                 | ' mailbox_ptr:=mb		
238b8     04 E4 05 F1 | 	add	objptr, #4
238bc     F2 14 62 FC | 	wrlong	arg02, objptr
238c0                 | ' mailbox0:=mb				' PSRAM mailbox pointer
238c0     C1 E5 05 F1 | 	add	objptr, #449
238c4     F2 14 62 FC | 	wrlong	arg02, objptr
238c8                 | ' sprite_ptr:=@spr1ptr
238c8     D8 E4 85 F1 | 	sub	objptr, #216
238cc     F2 FA 01 F6 | 	mov	result1, objptr
238d0     E5 E4 85 F1 | 	sub	objptr, #229
238d4     F2 FA 61 FC | 	wrlong	result1, objptr
238d8                 | ' 
238d8                 | ' 		'
238d8                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
238d8     E5 E4 05 F1 | 	add	objptr, #229
238dc     F2 FA 01 FB | 	rdlong	result1, objptr
238e0     D0 FA 05 F1 | 	add	result1, #208
238e4     FD 10 58 FC | 	wrword	#8, result1
238e8                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
238e8     F2 16 02 FB | 	rdlong	arg03, objptr
238ec     D2 16 06 F1 | 	add	arg03, #210
238f0     0B 21 58 FC | 	wrword	#16, arg03
238f4                 | ' leading_spaces:=0				'
238f4     A5 E5 05 F1 | 	add	objptr, #421
238f8     F2 00 68 FC | 	wrlong	#0, objptr
238fc                 | ' 
238fc                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
238fc     99 E4 85 F1 | 	sub	objptr, #153
23900     00 00 A0 FF 
23904     F2 0E 68 FC | 	wrlong	##1073741831, objptr
23908                 | ' emptydl[1]:=0
23908     04 E4 05 F1 | 	add	objptr, #4
2390c     F2 00 68 FC | 	wrlong	#0, objptr
23910                 | ' 
23910                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
23910                 | ' 
23910                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
23910     28 E5 85 F1 | 	sub	objptr, #296
23914     F2 02 68 FC | 	wrlong	#1, objptr
23918                 | ' if s_debug<>0
23918                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
23918     20 00 80 FF 
2391c     F2 00 68 FC | 	wrlong	##16384, objptr
23920     F9 E4 85 F1 | 	sub	objptr, #249
23924                 | ' setmode()							' set the mode, see below
23924     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
23928                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
23928     49 E4 05 F1 | 	add	objptr, #73
2392c     F2 FA 01 F6 | 	mov	result1, objptr
23930     35 E4 85 F1 | 	sub	objptr, #53
23934     F2 FA 61 FC | 	wrlong	result1, objptr
23938                 | ' cursor_ptr:=@cursor_x						
23938     28 E4 05 F1 | 	add	objptr, #40
2393c     F2 16 02 F6 | 	mov	arg03, objptr
23940     2C E4 85 F1 | 	sub	objptr, #44
23944     F2 16 62 FC | 	wrlong	arg03, objptr
23948                 | ' fontnum:=0  							' start with a PC type font 
23948     55 E4 05 F1 | 	add	objptr, #85
2394c     F2 00 68 FC | 	wrlong	#0, objptr
23950                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
23950     1C E4 05 F1 | 	add	objptr, #28
23954     F2 12 02 F6 | 	mov	arg01, objptr
23958     81 E4 85 F1 | 	sub	objptr, #129
2395c     10 00 00 FF 
23960     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
23964     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
23968     10 00 00 FF 
2396c     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
23970     10 16 06 F6 | 	mov	arg03, #16
23974     14 2F B0 FD | 	call	#__system____builtin_memmove
23978                 | ' leading_spaces:=0
23978     01 00 00 FF 
2397c     B6 E4 05 F1 | 	add	objptr, ##694
23980     F2 00 68 FC | 	wrlong	#0, objptr
23984     01 00 00 FF 
23988     B6 E4 85 F1 | 	sub	objptr, ##694
2398c                 | ' '---------------------------- initialize a cursor (MSDOS type)
2398c                 | ' 
2398c                 | ' initcursor(154)
2398c     9A 12 06 F6 | 	mov	arg01, #154
23990     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
23994                 | ' 
23994                 | ' '---------------------------- start the cog
23994                 | ' 
23994                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
23994     10 00 00 FF 
23998     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
2399c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
239a0     10 00 00 FF 
239a4     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
239a8     14 E4 05 F1 | 	add	objptr, #20
239ac     10 FA 05 F6 | 	mov	result1, #16
239b0     28 E4 61 FD | 	setq	objptr
239b4     0A FB F1 FC | 	coginit	result1, arg02 wc
239b8     01 FA 65 C6 |  if_b	neg	result1, #1
239bc     1C E4 05 F1 | 	add	objptr, #28
239c0     F2 FA 61 FC | 	wrlong	result1, objptr
239c4     30 E4 85 F1 | 	sub	objptr, #48
239c8                 | ' waitms(40)							' wait for stabilize
239c8     28 12 06 F6 | 	mov	arg01, #40
239cc     90 32 B0 FD | 	call	#__system___waitms
239d0                 | ' return cog							' return the driver's cog #
239d0     30 E4 05 F1 | 	add	objptr, #48
239d4     F2 FA 01 FB | 	rdlong	result1, objptr
239d8     30 E4 85 F1 | 	sub	objptr, #48
239dc                 | _hg010b_spin2_start_ret
239dc     2D 00 64 FD | 	ret
239e0                 | 
239e0                 | ' 
239e0                 | ' 
239e0                 | ' '**************************************************************************************************************** 
239e0                 | ' '                                                                                                             	*
239e0                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
239e0                 | ' '  Mode number - see start() above or bits below								*
239e0                 | ' '                                                                                                             	*
239e0                 | ' '****************************************************************************************************************
239e0                 | ' 
239e0                 | ' '---------------------------- initialize a cursor (MSDOS type)
239e0                 | ' pub initcursor(color) |i
239e0                 | _hg010b_spin2_initcursor
239e0     03 4A 05 F6 | 	mov	COUNT_, #3
239e4     A8 00 A0 FD | 	call	#pushregs_
239e8     09 27 02 F6 | 	mov	local01, arg01
239ec                 | ' 
239ec                 | ' cursor_x:=0							' place the cursor at 0:0
239ec     3C E4 05 F1 | 	add	objptr, #60
239f0     F2 00 58 FC | 	wrword	#0, objptr
239f4                 | ' cursor_y:=0
239f4     02 E4 05 F1 | 	add	objptr, #2
239f8     F2 00 48 FC | 	wrbyte	#0, objptr
239fc                 | ' repeat i from 0 to 111
239fc     00 28 06 F6 | 	mov	local02, #0
23a00     F8 E5 05 F1 | 	add	objptr, #504
23a04     97 1A 48 FB | 	callpa	#(@LR__2692-@LR__2690)>>2,fcache_load_ptr_
23a08                 | LR__2690
23a08                 | '   cursor[i]:=0
23a08     14 2B 02 F6 | 	mov	local03, local02
23a0c     F2 2A 02 F1 | 	add	local03, objptr
23a10     15 01 48 FC | 	wrbyte	#0, local03
23a14     01 28 06 F1 | 	add	local02, #1
23a18     70 28 56 F2 | 	cmps	local02, #112 wc
23a1c     E8 FF 9F CD |  if_b	jmp	#LR__2690
23a20                 | ' repeat i from 112 to 127
23a20     70 28 06 F6 | 	mov	local02, #112
23a24                 | LR__2691
23a24                 | '   cursor[i]:=color  
23a24     14 2B 02 F6 | 	mov	local03, local02
23a28     F2 2A 02 F1 | 	add	local03, objptr
23a2c     15 27 42 FC | 	wrbyte	local01, local03
23a30     01 28 06 F1 | 	add	local02, #1
23a34     80 28 16 F2 | 	cmp	local02, #128 wc
23a38     E8 FF 9F CD |  if_b	jmp	#LR__2691
23a3c                 | LR__2692
23a3c                 | ' 'repeat i from 0 to 127
23a3c                 | ' '  if ((i/8)//2)
23a3c                 | ' '    cursor[i]:=15
23a3c                 | ' '  else
23a3c                 | ' '    cursor[i]:=0
23a3c                 | ' '  if i>=120    
23a3c                 | ' '    cursor[i]:=40
23a3c                 | ' setspriteptr(17,@cursor)
23a3c     F2 14 02 F6 | 	mov	arg02, objptr
23a40     01 00 00 FF 
23a44     36 E4 85 F1 | 	sub	objptr, ##566
23a48     11 12 06 F6 | 	mov	arg01, #17
23a4c     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
23a50                 | ' setspritesize(17,8,16)
23a50     11 12 06 F6 | 	mov	arg01, #17
23a54     08 14 06 F6 | 	mov	arg02, #8
23a58     10 16 06 F6 | 	mov	arg03, #16
23a5c     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
23a60                 | ' setspritepos(17,0,0)
23a60     11 12 06 F6 | 	mov	arg01, #17
23a64     00 14 06 F6 | 	mov	arg02, #0
23a68     00 16 06 F6 | 	mov	arg03, #0
23a6c     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
23a70                 | ' cursorshape:=14
23a70     0B 00 00 FF 
23a74     C6 E4 05 F1 | 	add	objptr, ##5830
23a78     F2 1C 68 FC | 	wrlong	#14, objptr
23a7c                 | ' cursorcolor:=color
23a7c     04 E4 85 F1 | 	sub	objptr, #4
23a80     F2 26 62 FC | 	wrlong	local01, objptr
23a84     0B 00 00 FF 
23a88     C2 E4 85 F1 | 	sub	objptr, ##5826
23a8c     A7 F0 03 F6 | 	mov	ptra, fp
23a90     B2 00 A0 FD | 	call	#popregs_
23a94                 | _hg010b_spin2_initcursor_ret
23a94     2D 00 64 FD | 	ret
23a98                 | 
23a98                 | ' 
23a98                 | ' pub setcursorshape(shape) | i
23a98                 | _hg010b_spin2_setcursorshape
23a98                 | ' 
23a98                 | ' cursorshape:=shape
23a98     0B 00 00 FF 
23a9c     C6 E4 05 F1 | 	add	objptr, ##5830
23aa0     F2 12 62 FC | 	wrlong	arg01, objptr
23aa4                 | ' repeat i from 0 to (8*cursorshape)-1
23aa4     00 00 06 F6 | 	mov	_var01, #0
23aa8     09 03 02 F6 | 	mov	_var02, arg01
23aac     03 02 66 F0 | 	shl	_var02, #3
23ab0     01 02 86 F1 | 	sub	_var02, #1
23ab4     00 02 56 F2 | 	cmps	_var02, #0 wc
23ab8     01 04 86 F6 | 	negc	_var03, #1
23abc     02 07 02 F6 | 	mov	_var04, _var03
23ac0     02 03 02 F1 | 	add	_var02, _var03
23ac4     0A 00 00 FF 
23ac8     90 E4 85 F1 | 	sub	objptr, ##5264
23acc     97 0C 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
23ad0                 | LR__2700
23ad0                 | '   cursor[i]:=0
23ad0     00 05 02 F6 | 	mov	_var03, _var01
23ad4     F2 04 02 F1 | 	add	_var03, objptr
23ad8     02 01 48 FC | 	wrbyte	#0, _var03
23adc     03 01 02 F1 | 	add	_var01, _var04
23ae0     01 01 0A F2 | 	cmp	_var01, _var02 wz
23ae4     E8 FF 9F 5D |  if_ne	jmp	#LR__2700
23ae8                 | LR__2701
23ae8                 | ' repeat i from 8*cursorshape to 127
23ae8     0A 00 00 FF 
23aec     90 E4 05 F1 | 	add	objptr, ##5264
23af0     F2 06 02 FB | 	rdlong	_var04, objptr
23af4     03 01 02 F6 | 	mov	_var01, _var04
23af8     03 00 66 F0 | 	shl	_var01, #3
23afc     0B 00 00 FF 
23b00     C6 E4 85 F1 | 	sub	objptr, ##5830
23b04     03 06 66 F0 | 	shl	_var04, #3
23b08     80 06 56 F2 | 	cmps	_var04, #128 wc
23b0c     01 04 A6 F6 | 	negnc	_var03, #1
23b10     7F 02 06 F6 | 	mov	_var02, #127
23b14     02 03 02 F1 | 	add	_var02, _var03
23b18     97 1A 48 FB | 	callpa	#(@LR__2703-@LR__2702)>>2,fcache_load_ptr_
23b1c                 | LR__2702
23b1c                 | '   cursor[i]:=cursorcolor
23b1c     00 07 02 F6 | 	mov	_var04, _var01
23b20     01 00 00 FF 
23b24     36 E4 05 F1 | 	add	objptr, ##566
23b28     F2 06 02 F1 | 	add	_var04, objptr
23b2c     0A 00 00 FF 
23b30     8C E4 05 F1 | 	add	objptr, ##5260
23b34     F2 12 02 FB | 	rdlong	arg01, objptr
23b38     0B 00 00 FF 
23b3c     C2 E4 85 F1 | 	sub	objptr, ##5826
23b40     03 13 42 FC | 	wrbyte	arg01, _var04
23b44     02 01 02 F1 | 	add	_var01, _var03
23b48     01 01 0A F2 | 	cmp	_var01, _var02 wz
23b4c     CC FF 9F 5D |  if_ne	jmp	#LR__2702
23b50                 | LR__2703
23b50                 | _hg010b_spin2_setcursorshape_ret
23b50     2D 00 64 FD | 	ret
23b54                 | 
23b54                 | ' 
23b54                 | ' pub setcursorcolor(color) | i
23b54                 | _hg010b_spin2_setcursorcolor
23b54                 | ' 
23b54                 | ' cursorcolor:=color
23b54     0B 00 00 FF 
23b58     C2 E4 05 F1 | 	add	objptr, ##5826
23b5c     F2 12 62 FC | 	wrlong	arg01, objptr
23b60                 | ' repeat i from 0 to (8*cursorshape)-1
23b60     00 12 06 F6 | 	mov	arg01, #0
23b64     04 E4 05 F1 | 	add	objptr, #4
23b68     F2 00 02 FB | 	rdlong	_var01, objptr
23b6c     03 00 66 F0 | 	shl	_var01, #3
23b70     01 00 86 F1 | 	sub	_var01, #1
23b74     00 00 56 F2 | 	cmps	_var01, #0 wc
23b78     01 02 86 F6 | 	negc	_var02, #1
23b7c     01 05 02 F6 | 	mov	_var03, _var02
23b80     01 01 02 F1 | 	add	_var01, _var02
23b84     0A 00 00 FF 
23b88     90 E4 85 F1 | 	sub	objptr, ##5264
23b8c     97 0C 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
23b90                 | LR__2710
23b90                 | '   cursor[i]:=0
23b90     09 03 02 F6 | 	mov	_var02, arg01
23b94     F2 02 02 F1 | 	add	_var02, objptr
23b98     01 01 48 FC | 	wrbyte	#0, _var02
23b9c     02 13 02 F1 | 	add	arg01, _var03
23ba0     00 13 0A F2 | 	cmp	arg01, _var01 wz
23ba4     E8 FF 9F 5D |  if_ne	jmp	#LR__2710
23ba8                 | LR__2711
23ba8                 | ' repeat i from 8*cursorshape to 127
23ba8     0A 00 00 FF 
23bac     90 E4 05 F1 | 	add	objptr, ##5264
23bb0     F2 04 02 FB | 	rdlong	_var03, objptr
23bb4     02 13 02 F6 | 	mov	arg01, _var03
23bb8     03 12 66 F0 | 	shl	arg01, #3
23bbc     0B 00 00 FF 
23bc0     C6 E4 85 F1 | 	sub	objptr, ##5830
23bc4     03 04 66 F0 | 	shl	_var03, #3
23bc8     80 04 56 F2 | 	cmps	_var03, #128 wc
23bcc     01 02 A6 F6 | 	negnc	_var02, #1
23bd0     7F 00 06 F6 | 	mov	_var01, #127
23bd4     01 01 02 F1 | 	add	_var01, _var02
23bd8     97 1A 48 FB | 	callpa	#(@LR__2713-@LR__2712)>>2,fcache_load_ptr_
23bdc                 | LR__2712
23bdc                 | '   cursor[i]:=cursorcolor
23bdc     09 05 02 F6 | 	mov	_var03, arg01
23be0     01 00 00 FF 
23be4     36 E4 05 F1 | 	add	objptr, ##566
23be8     F2 04 02 F1 | 	add	_var03, objptr
23bec     0A 00 00 FF 
23bf0     8C E4 05 F1 | 	add	objptr, ##5260
23bf4     F2 06 02 FB | 	rdlong	_var04, objptr
23bf8     0B 00 00 FF 
23bfc     C2 E4 85 F1 | 	sub	objptr, ##5826
23c00     02 07 42 FC | 	wrbyte	_var04, _var03
23c04     01 13 02 F1 | 	add	arg01, _var02
23c08     00 13 0A F2 | 	cmp	arg01, _var01 wz
23c0c     CC FF 9F 5D |  if_ne	jmp	#LR__2712
23c10                 | LR__2713
23c10                 | _hg010b_spin2_setcursorcolor_ret
23c10     2D 00 64 FD | 	ret
23c14                 | 
23c14                 | '   
23c14                 | '   
23c14                 | '   
23c14                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
23c14                 | _hg010b_spin2_setmode
23c14     02 4A 05 F6 | 	mov	COUNT_, #2
23c18     A8 00 A0 FD | 	call	#pushregs_
23c1c                 | ' 
23c1c                 | ' 
23c1c                 | ' dl_ptr:=@emptydl[0]
23c1c     01 00 00 FF 
23c20     1D E4 05 F1 | 	add	objptr, ##541
23c24     F2 1A 02 F6 | 	mov	arg05, objptr
23c28     FD E5 85 F1 | 	sub	objptr, #509
23c2c     F2 1A 62 FC | 	wrlong	arg05, objptr
23c30                 | ' 
23c30                 | ' if cog>0 
23c30     10 E4 05 F1 | 	add	objptr, #16
23c34     F2 1A 02 FB | 	rdlong	arg05, objptr
23c38     30 E4 85 F1 | 	sub	objptr, #48
23c3c     01 1A 56 F2 | 	cmps	arg05, #1 wc
23c40                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
23c40     01 12 06 36 |  if_ae	mov	arg01, #1
23c44     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
23c48                 | ' xres:=1024
23c48     01 00 00 FF 
23c4c     26 E4 05 F1 | 	add	objptr, ##550
23c50     02 00 80 FF 
23c54     F2 00 68 FC | 	wrlong	##1024, objptr
23c58                 | ' yres:=600
23c58     04 E4 05 F1 | 	add	objptr, #4
23c5c     01 00 80 FF 
23c60     F2 B0 68 FC | 	wrlong	##600, objptr
23c64                 | ' ppl:=(timings[3])
23c64     10 00 00 FF 
23c68     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
23c6c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
23c70     51 E5 85 F1 | 	sub	objptr, #337
23c74     F2 1A 62 FC | 	wrlong	arg05, objptr
23c78                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
23c78     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
23c7c     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
23c80     01 26 66 F0 | 	shl	local01, #1
23c84     80 E4 85 F1 | 	sub	objptr, #128
23c88     F2 26 62 FC | 	wrlong	local01, objptr
23c8c                 | ' cpl1:=cpl '' todo remove
23c8c     04 E4 05 F1 | 	add	objptr, #4
23c90     F2 26 62 FC | 	wrlong	local01, objptr
23c94                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
23c94     02 00 00 FF 
23c98     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
23c9c     41 E4 85 F1 | 	sub	objptr, #65
23ca0     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
23ca4                 | ' repeat i from 0 to 3
23ca4     00 28 06 F6 | 	mov	local02, #0
23ca8     02 00 00 FF 
23cac     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
23cb0     08 E4 05 F1 | 	add	objptr, #8
23cb4     97 20 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
23cb8                 | LR__2720
23cb8                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
23cb8     14 27 02 F6 | 	mov	local01, local02
23cbc     02 26 66 F0 | 	shl	local01, #2
23cc0     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
23cc4     F2 1A 02 FB | 	rdlong	arg05, objptr
23cc8     11 1A 66 F0 | 	shl	arg05, #17
23ccc     13 27 02 FB | 	rdlong	local01, local01
23cd0     0D 27 02 F1 | 	add	local01, arg05
23cd4     80 40 38 FF 
23cd8     00 26 06 F1 | 	add	local01, ##1887502336
23cdc     14 1B 02 F6 | 	mov	arg05, local02
23ce0     02 1A 66 F0 | 	shl	arg05, #2
23ce4     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
23ce8     0D 27 62 FC | 	wrlong	local01, arg05
23cec     01 28 06 F1 | 	add	local02, #1
23cf0     04 28 56 F2 | 	cmps	local02, #4 wc
23cf4     C0 FF 9F CD |  if_b	jmp	#LR__2720
23cf8                 | LR__2721
23cf8     24 E4 85 F1 | 	sub	objptr, #36
23cfc                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
23cfc     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
23d00     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
23d04     14 26 66 FC | 	wrlong	local01, #20
23d08                 | ' hubset(timings[10])
23d08     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
23d0c     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
23d10     10 00 00 FF 
23d14     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
23d18     00 12 62 FD | 	hubset	arg01
23d1c                 | ' waitms(1)                                                   	' wait for stabilization
23d1c     01 12 06 F6 | 	mov	arg01, #1
23d20     3C 2F B0 FD | 	call	#__system___waitms
23d24     10 00 00 FF 
23d28     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
23d2c     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
23d30     61 E4 05 F1 | 	add	objptr, #97
23d34     F2 28 62 FC | 	wrlong	local02, objptr
23d38     14 27 52 F6 | 	abs	local01, local02 wc
23d3c     04 26 46 F0 | 	shr	local01, #4
23d40     13 27 82 F6 | 	negc	local01, local01
23d44     9C E4 05 F1 | 	add	objptr, #156
23d48     F2 26 62 FC | 	wrlong	local01, objptr
23d4c     A4 E4 85 F1 | 	sub	objptr, #164
23d50     F2 28 02 FB | 	rdlong	local02, objptr
23d54     08 E4 05 F1 | 	add	objptr, #8
23d58     F2 26 02 FB | 	rdlong	local01, objptr
23d5c     13 29 02 FD | 	qmul	local02, local01
23d60                 | ' lines:=timings[11]
23d60                 | ' t_lines:=lines/16
23d60                 | ' buflen:=cpl*lines						' framebuffer length in longs
23d60     29 E4 85 F1 | 	sub	objptr, #41
23d64     19 26 C6 F9 | 	decod	local01, #25
23d68     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
23d6c     18 28 62 FD | 	getqx	local02
23d70     F2 28 62 FC | 	wrlong	local02, objptr
23d74     38 E4 85 F1 | 	sub	objptr, #56
23d78     02 28 66 F0 | 	shl	local02, #2
23d7c     14 27 82 F1 | 	sub	local01, local02
23d80     F2 26 62 FC | 	wrlong	local01, objptr
23d84     FD E4 05 F1 | 	add	objptr, #253
23d88     F2 28 02 FB | 	rdlong	local02, objptr
23d8c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
23d90     0D 29 02 FD | 	qmul	local02, arg05
23d94                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
23d94                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
23d94     F9 E4 85 F1 | 	sub	objptr, #249
23d98                 | ' mode_ptr:=@timings						' set pointers to timings
23d98     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
23d9c                 | ' graphmode:=1024+512+192+48							' det global variable
23d9c                 | ' makedl(graphmode)							' make a DL for the mode
23d9c     03 00 00 FF 
23da0     F0 12 06 F6 | 	mov	arg01, ##1776
23da4     18 28 62 FD | 	getqx	local02
23da8     14 27 82 F1 | 	sub	local01, local02
23dac     F2 26 62 FC | 	wrlong	local01, objptr
23db0     14 E4 05 F1 | 	add	objptr, #20
23db4     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
23db8     79 E4 05 F1 | 	add	objptr, #121
23dbc     03 00 80 FF 
23dc0     F2 E0 69 FC | 	wrlong	##1776, objptr
23dc4     91 E4 85 F1 | 	sub	objptr, #145
23dc8     10 00 00 FF 
23dcc     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
23dd0     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
23dd4                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
23dd4     F2 26 02 FB | 	rdlong	local01, objptr
23dd8     DD E4 05 F1 | 	add	objptr, #221
23ddc     F2 26 62 FC | 	wrlong	local01, objptr
23de0                 | ' s_font_ptr:=font_ptr
23de0     D5 E4 85 F1 | 	sub	objptr, #213
23de4     F2 26 02 FB | 	rdlong	local01, objptr
23de8     D9 E4 05 F1 | 	add	objptr, #217
23dec     F2 26 62 FC | 	wrlong	local01, objptr
23df0                 | ' s_lines:=lines
23df0     80 E4 85 F1 | 	sub	objptr, #128
23df4     F2 26 02 FB | 	rdlong	local01, objptr
23df8     84 E4 05 F1 | 	add	objptr, #132
23dfc     F2 26 62 FC | 	wrlong	local01, objptr
23e00                 | ' s_buflen:=buflen
23e00     AD E4 85 F1 | 	sub	objptr, #173
23e04     F2 26 02 FB | 	rdlong	local01, objptr
23e08     B5 E4 05 F1 | 	add	objptr, #181
23e0c     F2 26 62 FC | 	wrlong	local01, objptr
23e10                 | ' s_cpl:=cpl
23e10     94 E4 85 F1 | 	sub	objptr, #148
23e14     F2 26 02 FB | 	rdlong	local01, objptr
23e18     90 E4 05 F1 | 	add	objptr, #144
23e1c     F2 26 62 FC | 	wrlong	local01, objptr
23e20                 | ' s_cpl1:=cpl
23e20     90 E4 85 F1 | 	sub	objptr, #144
23e24     F2 26 02 FB | 	rdlong	local01, objptr
23e28     98 E4 05 F1 | 	add	objptr, #152
23e2c     F2 26 62 FC | 	wrlong	local01, objptr
23e30                 | ' st_lines:=t_lines
23e30     0C E4 05 F1 | 	add	objptr, #12
23e34     F2 26 02 FB | 	rdlong	local01, objptr
23e38     04 E4 05 F1 | 	add	objptr, #4
23e3c     F2 26 62 FC | 	wrlong	local01, objptr
23e40                 | ' ppl:=ppl/xzoom  
23e40     28 E4 85 F1 | 	sub	objptr, #40
23e44     F2 90 02 FB | 	rdlong	muldiva_, objptr
23e48     2C E4 05 F1 | 	add	objptr, #44
23e4c     F2 92 02 FB | 	rdlong	muldivb_, objptr
23e50     05 E5 85 F1 | 	sub	objptr, #261
23e54     BA 00 A0 FD | 	call	#divide_
23e58     D9 E4 05 F1 | 	add	objptr, #217
23e5c     F2 92 62 FC | 	wrlong	muldivb_, objptr
23e60                 | ' s_ppl:=ppl
23e60     1C E4 05 F1 | 	add	objptr, #28
23e64     F2 92 62 FC | 	wrlong	muldivb_, objptr
23e68     F5 E4 85 F1 | 	sub	objptr, #245
23e6c                 | ' waitms(20)							' wait 
23e6c     14 12 06 F6 | 	mov	arg01, #20
23e70     EC 2D B0 FD | 	call	#__system___waitms
23e74                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
23e74     04 E4 05 F1 | 	add	objptr, #4
23e78     F2 12 02 FB | 	rdlong	arg01, objptr
23e7c     04 E4 85 F1 | 	sub	objptr, #4
23e80     F2 16 02 FB | 	rdlong	arg03, objptr
23e84     09 17 82 F1 | 	sub	arg03, arg01
23e88     20 14 06 F6 | 	mov	arg02, #32
23e8c     00 18 06 F6 | 	mov	arg04, #0
23e90     01 1A 06 F6 | 	mov	arg05, #1
23e94     0B 00 00 FF 
23e98     CC E4 05 F1 | 	add	objptr, ##5836
23e9c     7C 1F B0 FD | 	call	#_psram_spin2_fill
23ea0     0B 00 00 FF 
23ea4     CC E4 85 F1 | 	sub	objptr, ##5836
23ea8     A7 F0 03 F6 | 	mov	ptra, fp
23eac     B2 00 A0 FD | 	call	#popregs_
23eb0                 | _hg010b_spin2_setmode_ret
23eb0     2D 00 64 FD | 	ret
23eb4                 | 
23eb4                 | ' 
23eb4                 | ' '****************************************************************************************************************
23eb4                 | ' '                                                                                                             	*
23eb4                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
23eb4                 | ' '                                                                                                             	*
23eb4                 | ' '****************************************************************************************************************
23eb4                 | ' 
23eb4                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
23eb4                 | _hg010b_spin2_makedl
23eb4                 | ' 
23eb4                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
23eb4                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
23eb4                 | ' repeat i from 0 to 11                                                           ' clear DL
23eb4     00 00 06 F6 | 	mov	_var01, #0
23eb8     ED E5 05 F1 | 	add	objptr, #493
23ebc     97 0E 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
23ec0                 | LR__2730
23ec0                 | '   displaylist[i]:=0 
23ec0     00 03 02 F6 | 	mov	_var02, _var01
23ec4     02 02 66 F0 | 	shl	_var02, #2
23ec8     F2 02 02 F1 | 	add	_var02, objptr
23ecc     01 01 68 FC | 	wrlong	#0, _var02
23ed0     01 00 06 F1 | 	add	_var01, #1
23ed4     0C 00 56 F2 | 	cmps	_var01, #12 wc
23ed8     E4 FF 9F CD |  if_b	jmp	#LR__2730
23edc                 | LR__2731
23edc                 | '                         ' 
23edc                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
23edc     8C E5 85 F1 | 	sub	objptr, #396
23ee0     F2 02 02 FB | 	rdlong	_var02, objptr
23ee4     14 02 66 F0 | 	shl	_var02, #20
23ee8     01 02 06 F1 | 	add	_var02, #1
23eec     04 E4 85 F1 | 	sub	objptr, #4
23ef0     F2 00 02 FB | 	rdlong	_var01, objptr
23ef4     02 00 66 F0 | 	shl	_var01, #2
23ef8     04 00 66 F0 | 	shl	_var01, #4
23efc     00 03 02 F1 | 	add	_var02, _var01
23f00     90 E5 05 F1 | 	add	objptr, #400
23f04     F2 02 62 FC | 	wrlong	_var02, objptr
23f08     ED E5 85 F1 | 	sub	objptr, #493
23f0c                 | ' displaylist[1]:=buf_ptr<<4+%10  
23f0c     F2 02 02 FB | 	rdlong	_var02, objptr
23f10     04 02 66 F0 | 	shl	_var02, #4
23f14     02 02 06 F1 | 	add	_var02, #2
23f18     F1 E5 05 F1 | 	add	objptr, #497
23f1c     F2 02 62 FC | 	wrlong	_var02, objptr
23f20                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
23f20     04 E4 85 F1 | 	sub	objptr, #4
23f24     F2 02 02 F6 | 	mov	_var02, objptr
23f28     CD E5 85 F1 | 	sub	objptr, #461
23f2c     F2 02 62 FC | 	wrlong	_var02, objptr
23f30     20 E4 85 F1 | 	sub	objptr, #32
23f34                 | _hg010b_spin2_makedl_ret
23f34     2D 00 64 FD | 	ret
23f38                 | 
23f38                 | ' 
23f38                 | ' 
23f38                 | ' '****************************************************************************************************************
23f38                 | ' '                                                                        					*
23f38                 | ' '  Graphic primitives                                                    					*
23f38                 | ' '                                                                        					*
23f38                 | ' '****************************************************************************************************************
23f38                 | ' 
23f38                 | ' pub setspriteptr(num,ptr)
23f38                 | _hg010b_spin2_setspriteptr
23f38                 | ' long[@spr1ptr+12*num]:=ptr
23f38     11 E5 05 F1 | 	add	objptr, #273
23f3c     F2 00 02 F6 | 	mov	_var01, objptr
23f40     09 03 02 F6 | 	mov	_var02, arg01
23f44     01 02 66 F0 | 	shl	_var02, #1
23f48     09 03 02 F1 | 	add	_var02, arg01
23f4c     02 02 66 F0 | 	shl	_var02, #2
23f50     01 01 02 F1 | 	add	_var01, _var02
23f54     00 15 62 FC | 	wrlong	arg02, _var01
23f58     11 E5 85 F1 | 	sub	objptr, #273
23f5c                 | _hg010b_spin2_setspriteptr_ret
23f5c     2D 00 64 FD | 	ret
23f60                 | 
23f60                 | ' 
23f60                 | ' pub setspritepos(num,x,y)
23f60                 | _hg010b_spin2_setspritepos
23f60                 | ' if y>601
23f60     01 00 00 FF 
23f64     5A 16 56 F2 | 	cmps	arg03, ##602 wc
23f68                 | '   y:=601
23f68     01 00 00 3F 
23f6c     59 16 06 36 |  if_ae	mov	arg03, ##601
23f70                 | ' if x>1024
23f70     02 00 00 FF 
23f74     01 14 56 F2 | 	cmps	arg02, ##1025 wc
23f78                 | '   x:=1024
23f78     0A 14 C6 39 |  if_ae	decod	arg02, #10
23f7c                 | ' word[@spr1ptr+12*num+4]:=x
23f7c     11 E5 05 F1 | 	add	objptr, #273
23f80     F2 00 02 F6 | 	mov	_var01, objptr
23f84     09 03 02 F6 | 	mov	_var02, arg01
23f88     01 02 66 F0 | 	shl	_var02, #1
23f8c     09 03 02 F1 | 	add	_var02, arg01
23f90     02 02 66 F0 | 	shl	_var02, #2
23f94     01 01 02 F1 | 	add	_var01, _var02
23f98     04 00 06 F1 | 	add	_var01, #4
23f9c     00 15 52 FC | 	wrword	arg02, _var01
23fa0                 | ' word[@spr1ptr+12*num+6]:=y
23fa0     F2 00 02 F6 | 	mov	_var01, objptr
23fa4     09 03 02 F6 | 	mov	_var02, arg01
23fa8     01 02 66 F0 | 	shl	_var02, #1
23fac     09 03 02 F1 | 	add	_var02, arg01
23fb0     02 02 66 F0 | 	shl	_var02, #2
23fb4     01 01 02 F1 | 	add	_var01, _var02
23fb8     06 00 06 F1 | 	add	_var01, #6
23fbc     00 17 52 FC | 	wrword	arg03, _var01
23fc0     11 E5 85 F1 | 	sub	objptr, #273
23fc4                 | _hg010b_spin2_setspritepos_ret
23fc4     2D 00 64 FD | 	ret
23fc8                 | 
23fc8                 | ' 
23fc8                 | ' pub setspritesize(num,w,h)
23fc8                 | _hg010b_spin2_setspritesize
23fc8                 | ' word[@spr1ptr+12*num+8]:=w
23fc8     11 E5 05 F1 | 	add	objptr, #273
23fcc     F2 00 02 F6 | 	mov	_var01, objptr
23fd0     09 03 02 F6 | 	mov	_var02, arg01
23fd4     01 02 66 F0 | 	shl	_var02, #1
23fd8     09 03 02 F1 | 	add	_var02, arg01
23fdc     02 02 66 F0 | 	shl	_var02, #2
23fe0     01 01 02 F1 | 	add	_var01, _var02
23fe4     08 00 06 F1 | 	add	_var01, #8
23fe8     00 15 52 FC | 	wrword	arg02, _var01
23fec                 | ' word[@spr1ptr+12*num+10]:=h
23fec     F2 00 02 F6 | 	mov	_var01, objptr
23ff0     09 03 02 F6 | 	mov	_var02, arg01
23ff4     01 02 66 F0 | 	shl	_var02, #1
23ff8     09 03 02 F1 | 	add	_var02, arg01
23ffc     02 02 66 F0 | 	shl	_var02, #2
24000     01 01 02 F1 | 	add	_var01, _var02
24004     0A 00 06 F1 | 	add	_var01, #10
24008     00 17 52 FC | 	wrword	arg03, _var01
2400c     11 E5 85 F1 | 	sub	objptr, #273
24010                 | _hg010b_spin2_setspritesize_ret
24010     2D 00 64 FD | 	ret
24014                 | 
24014                 | ' 
24014                 | ' 
24014                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
24014                 | ' 
24014                 | ' 
24014                 | ' pub putpixel(x,y,c)
24014                 | _hg010b_spin2_putpixel
24014     04 4A 05 F6 | 	mov	COUNT_, #4
24018     A8 00 A0 FD | 	call	#pushregs_
2401c     09 27 02 F6 | 	mov	local01, arg01
24020                 | ' 
24020                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
24020     00 28 06 F6 | 	mov	local02, #0
24024     00 26 56 F2 | 	cmps	local01, #0 wc
24028     01 28 66 36 |  if_ae	neg	local02, #1
2402c     E9 E4 05 F1 | 	add	objptr, #233
24030     F2 1A 02 FB | 	rdlong	arg05, objptr
24034     02 1A 66 F0 | 	shl	arg05, #2
24038     0D 27 52 F2 | 	cmps	local01, arg05 wc
2403c     15 2B A2 F1 | 	subx	local03, local03
24040     15 29 02 F5 | 	and	local02, local03
24044     00 2A 06 F6 | 	mov	local03, #0
24048     00 14 56 F2 | 	cmps	arg02, #0 wc
2404c     01 2A 66 36 |  if_ae	neg	local03, #1
24050     15 29 02 F5 | 	and	local02, local03
24054     04 E4 85 F1 | 	sub	objptr, #4
24058     F2 2A 02 FB | 	rdlong	local03, objptr
2405c     E5 E4 85 F1 | 	sub	objptr, #229
24060     15 15 52 F2 | 	cmps	arg02, local03 wc
24064     16 2D A2 F1 | 	subx	local04, local04
24068     16 29 CA F7 | 	test	local02, local04 wz
2406c     48 00 90 AD |  if_e	jmp	#LR__2740
24070     DD E4 05 F1 | 	add	objptr, #221
24074     F2 12 02 FB | 	rdlong	arg01, objptr
24078     14 E4 05 F1 | 	add	objptr, #20
2407c     F2 2C 02 FB | 	rdlong	local04, objptr
24080     02 2C 66 F0 | 	shl	local04, #2
24084     0A 2D 02 FD | 	qmul	local04, arg02
24088                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
24088     0B 15 02 F6 | 	mov	arg02, arg03
2408c     01 16 06 F6 | 	mov	arg03, #1
24090     00 18 06 F6 | 	mov	arg04, #0
24094     01 1A 06 F6 | 	mov	arg05, #1
24098     0A 00 00 FF 
2409c     DB E5 05 F1 | 	add	objptr, ##5595
240a0     18 2C 62 FD | 	getqx	local04
240a4     13 2D 02 F1 | 	add	local04, local01
240a8     16 13 02 F1 | 	add	arg01, local04
240ac     6C 1D B0 FD | 	call	#_psram_spin2_fill
240b0     0B 00 00 FF 
240b4     CC E4 85 F1 | 	sub	objptr, ##5836
240b8                 | LR__2740
240b8     A7 F0 03 F6 | 	mov	ptra, fp
240bc     B2 00 A0 FD | 	call	#popregs_
240c0                 | _hg010b_spin2_putpixel_ret
240c0     2D 00 64 FD | 	ret
240c4                 | 
240c4                 | ' 
240c4                 | ' pub putpixel2(x,y,c)
240c4                 | _hg010b_spin2_putpixel2
240c4     02 4A 05 F6 | 	mov	COUNT_, #2
240c8     A8 00 A0 FD | 	call	#pushregs_
240cc     DD E4 05 F1 | 	add	objptr, #221
240d0     F2 26 02 FB | 	rdlong	local01, objptr
240d4     14 E4 05 F1 | 	add	objptr, #20
240d8     F2 1A 02 FB | 	rdlong	arg05, objptr
240dc     02 1A 66 F0 | 	shl	arg05, #2
240e0     0A 1B 02 FD | 	qmul	arg05, arg02
240e4                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
240e4     0B 15 02 F6 | 	mov	arg02, arg03
240e8     01 16 06 F6 | 	mov	arg03, #1
240ec     00 18 06 F6 | 	mov	arg04, #0
240f0     01 1A 06 F6 | 	mov	arg05, #1
240f4     0A 00 00 FF 
240f8     DB E5 05 F1 | 	add	objptr, ##5595
240fc     18 28 62 FD | 	getqx	local02
24100     09 29 02 F1 | 	add	local02, arg01
24104     14 27 02 F1 | 	add	local01, local02
24108     13 13 02 F6 | 	mov	arg01, local01
2410c     0C 1D B0 FD | 	call	#_psram_spin2_fill
24110     0B 00 00 FF 
24114     CC E4 85 F1 | 	sub	objptr, ##5836
24118     A7 F0 03 F6 | 	mov	ptra, fp
2411c     B2 00 A0 FD | 	call	#popregs_
24120                 | _hg010b_spin2_putpixel2_ret
24120     2D 00 64 FD | 	ret
24124                 | 
24124                 | ' 
24124                 | ' pub getpixel2(x,y): c 
24124                 | _hg010b_spin2_getpixel2
24124     02 4A 05 F6 | 	mov	COUNT_, #2
24128     A8 00 A0 FD | 	call	#pushregs_
2412c     0C F0 07 F1 | 	add	ptra, #12
24130     04 4E 05 F1 | 	add	fp, #4
24134     A7 12 62 FC | 	wrlong	arg01, fp
24138     04 4E 05 F1 | 	add	fp, #4
2413c     A7 14 62 FC | 	wrlong	arg02, fp
24140     08 4E 85 F1 | 	sub	fp, #8
24144     A7 00 68 FC | 	wrlong	#0, fp
24148     A7 12 02 F6 | 	mov	arg01, fp
2414c     DD E4 05 F1 | 	add	objptr, #221
24150     F2 14 02 FB | 	rdlong	arg02, objptr
24154     14 E4 05 F1 | 	add	objptr, #20
24158     F2 16 02 FB | 	rdlong	arg03, objptr
2415c     02 16 66 F0 | 	shl	arg03, #2
24160     08 4E 05 F1 | 	add	fp, #8
24164     A7 FA 01 FB | 	rdlong	result1, fp
24168     FD 16 02 FD | 	qmul	arg03, result1
2416c                 | ' 
2416c                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
2416c     04 4E 85 F1 | 	sub	fp, #4
24170     A7 26 02 FB | 	rdlong	local01, fp
24174     04 4E 85 F1 | 	sub	fp, #4
24178     01 16 06 F6 | 	mov	arg03, #1
2417c     0A 00 00 FF 
24180     DB E5 05 F1 | 	add	objptr, ##5595
24184     18 28 62 FD | 	getqx	local02
24188     13 29 02 F1 | 	add	local02, local01
2418c     14 15 02 F1 | 	add	arg02, local02
24190     50 1B B0 FD | 	call	#_psram_spin2_read1
24194     0B 00 00 FF 
24198     CC E4 85 F1 | 	sub	objptr, ##5836
2419c                 | ' return c
2419c     A7 FA 01 FB | 	rdlong	result1, fp
241a0     A7 F0 03 F6 | 	mov	ptra, fp
241a4     B2 00 A0 FD | 	call	#popregs_
241a8                 | _hg010b_spin2_getpixel2_ret
241a8     2D 00 64 FD | 	ret
241ac                 | 
241ac                 | '   
241ac                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
241ac                 | ' 
241ac                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
241ac                 | _hg010b_spin2_fastline
241ac     02 4A 05 F6 | 	mov	COUNT_, #2
241b0     A8 00 A0 FD | 	call	#pushregs_
241b4     09 27 02 F6 | 	mov	local01, arg01
241b8     0A 29 02 F6 | 	mov	local02, arg02
241bc                 | ' 
241bc                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
241bc     00 16 56 F2 | 	cmps	arg03, #0 wc
241c0     F4 00 90 CD |  if_b	jmp	#LR__2750
241c4     01 00 00 FF 
241c8     2A E4 05 F1 | 	add	objptr, ##554
241cc     F2 1A 02 FB | 	rdlong	arg05, objptr
241d0     01 00 00 FF 
241d4     2A E4 85 F1 | 	sub	objptr, ##554
241d8     0D 17 52 F2 | 	cmps	arg03, arg05 wc
241dc     D8 00 90 3D |  if_ae	jmp	#LR__2750
241e0     00 26 56 F2 | 	cmps	local01, #0 wc
241e4     00 28 56 C2 |  if_b	cmps	local02, #0 wc
241e8     CC 00 90 CD |  if_b	jmp	#LR__2750
241ec     01 00 00 FF 
241f0     26 E4 05 F1 | 	add	objptr, ##550
241f4     F2 1A 02 FB | 	rdlong	arg05, objptr
241f8     01 00 00 FF 
241fc     26 E4 85 F1 | 	sub	objptr, ##550
24200     0D 27 5A F2 | 	cmps	local01, arg05 wcz
24204     01 00 00 1F 
24208     26 E4 05 11 |  if_a	add	objptr, ##550
2420c     F2 12 02 1B |  if_a	rdlong	arg01, objptr
24210     01 00 00 1F 
24214     26 E4 85 11 |  if_a	sub	objptr, ##550
24218     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
2421c                 | '   return
2421c     98 00 90 1D |  if_a	jmp	#LR__2750
24220     14 27 5A F2 | 	cmps	local01, local02 wcz
24224     13 1B 02 16 |  if_a	mov	arg05, local01
24228     14 27 02 16 |  if_a	mov	local01, local02
2422c     0D 29 02 16 |  if_a	mov	local02, arg05
24230     00 26 56 F2 | 	cmps	local01, #0 wc
24234     00 26 06 C6 |  if_b	mov	local01, #0
24238     01 00 00 FF 
2423c     26 E4 05 F1 | 	add	objptr, ##550
24240     F2 1A 02 FB | 	rdlong	arg05, objptr
24244     01 00 00 FF 
24248     26 E4 85 F1 | 	sub	objptr, ##550
2424c     0D 29 52 F2 | 	cmps	local02, arg05 wc
24250     01 00 00 3F 
24254     26 E4 05 31 |  if_ae	add	objptr, ##550
24258     F2 28 02 3B |  if_ae	rdlong	local02, objptr
2425c     01 00 00 3F 
24260     26 E4 85 31 |  if_ae	sub	objptr, ##550
24264     DD E4 05 F1 | 	add	objptr, #221
24268     F2 12 02 FB | 	rdlong	arg01, objptr
2426c     14 E4 05 F1 | 	add	objptr, #20
24270     F2 1A 02 FB | 	rdlong	arg05, objptr
24274     02 1A 66 F0 | 	shl	arg05, #2
24278     0B 1B 02 FD | 	qmul	arg05, arg03
2427c                 | ' if x1>x2
2427c                 | '   x1,x2:=x2,x1
2427c                 | ' if x1<0 
2427c                 | '   x1:=0
2427c                 | ' if x2>=xres
2427c                 | '   x2:=xres-1  
2427c     01 28 86 31 |  if_ae	sub	local02, #1
24280                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
24280     01 16 06 F6 | 	mov	arg03, #1
24284     14 17 02 F1 | 	add	arg03, local02
24288     13 17 82 F1 | 	sub	arg03, local01
2428c     0C 15 02 F6 | 	mov	arg02, arg04
24290     00 18 06 F6 | 	mov	arg04, #0
24294     01 1A 06 F6 | 	mov	arg05, #1
24298     0A 00 00 FF 
2429c     DB E5 05 F1 | 	add	objptr, ##5595
242a0     18 28 62 FD | 	getqx	local02
242a4     13 29 02 F1 | 	add	local02, local01
242a8     14 13 02 F1 | 	add	arg01, local02
242ac     6C 1B B0 FD | 	call	#_psram_spin2_fill
242b0     0B 00 00 FF 
242b4     CC E4 85 F1 | 	sub	objptr, ##5836
242b8                 | LR__2750
242b8     A7 F0 03 F6 | 	mov	ptra, fp
242bc     B2 00 A0 FD | 	call	#popregs_
242c0                 | _hg010b_spin2_fastline_ret
242c0     2D 00 64 FD | 	ret
242c4                 | 
242c4                 | ' 
242c4                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
242c4                 | _hg010b_spin2_draw
242c4     0E 4A 05 F6 | 	mov	COUNT_, #14
242c8     A8 00 A0 FD | 	call	#pushregs_
242cc     09 27 02 F6 | 	mov	local01, arg01
242d0     0A 29 02 F6 | 	mov	local02, arg02
242d4     0B 2B 02 F6 | 	mov	local03, arg03
242d8     0C 2D 02 F6 | 	mov	local04, arg04
242dc     0D 2F 02 F6 | 	mov	local05, arg05
242e0                 | ' 
242e0                 | ' if (y1==y2)
242e0     16 29 0A F2 | 	cmp	local02, local04 wz
242e4     18 00 90 5D |  if_ne	jmp	#LR__2760
242e8                 | '   fastline(x1,x2,y1,c)
242e8     13 13 02 F6 | 	mov	arg01, local01
242ec     15 15 02 F6 | 	mov	arg02, local03
242f0     14 17 02 F6 | 	mov	arg03, local02
242f4     17 19 02 F6 | 	mov	arg04, local05
242f8     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
242fc     F8 00 90 FD | 	jmp	#LR__2766
24300                 | LR__2760
24300                 | ' else  
24300                 | '   x:=x1
24300     13 31 02 F6 | 	mov	local06, local01
24304                 | '   y:=y1
24304     14 33 02 F6 | 	mov	local07, local02
24308                 | ' 
24308                 | '   if (x1<x2) 
24308     15 27 52 F2 | 	cmps	local01, local03 wc
2430c                 | '     xi:=1
2430c     01 34 06 C6 |  if_b	mov	local08, #1
24310                 | '     dx:=x2-x1
24310     15 37 02 C6 |  if_b	mov	local09, local03
24314     13 37 82 C1 |  if_b	sub	local09, local01
24318                 | '   else
24318                 | '     xi:=-1
24318     01 34 66 36 |  if_ae	neg	local08, #1
2431c                 | '     dx:=x1-x2
2431c     15 27 82 31 |  if_ae	sub	local01, local03
24320     13 37 02 36 |  if_ae	mov	local09, local01
24324                 | '   
24324                 | '   if (y1<y2) 
24324     16 29 52 F2 | 	cmps	local02, local04 wc
24328                 | '     yi:=1
24328     01 38 06 C6 |  if_b	mov	local10, #1
2432c                 | '     dy:=y2-y1
2432c     16 3B 02 C6 |  if_b	mov	local11, local04
24330     14 3B 82 C1 |  if_b	sub	local11, local02
24334                 | '   else
24334                 | '     yi:=-1
24334     01 38 66 36 |  if_ae	neg	local10, #1
24338                 | '     dy:=y1-y2
24338     16 29 82 31 |  if_ae	sub	local02, local04
2433c     14 3B 02 36 |  if_ae	mov	local11, local02
24340                 | ' 
24340                 | '   putpixel(x,y,c)
24340     17 17 02 F6 | 	mov	arg03, local05
24344     18 13 02 F6 | 	mov	arg01, local06
24348     19 15 02 F6 | 	mov	arg02, local07
2434c     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
24350                 | ' 
24350                 | '   if (dx>dy)
24350     1D 37 5A F2 | 	cmps	local09, local11 wcz
24354     50 00 90 ED |  if_be	jmp	#LR__2762
24358                 | '     ai:=(dy-dx)*2
24358     1D 3D 02 F6 | 	mov	local12, local11
2435c     1B 3D 82 F1 | 	sub	local12, local09
24360     01 3C 66 F0 | 	shl	local12, #1
24364                 | '     bi:=dy*2
24364     01 3A 66 F0 | 	shl	local11, #1
24368     1D 3F 02 F6 | 	mov	local13, local11
2436c                 | '     d:= bi-dx
2436c     1F 41 02 F6 | 	mov	local14, local13
24370     1B 41 82 F1 | 	sub	local14, local09
24374                 | '     repeat while (x<>x2) 
24374                 | LR__2761
24374     15 31 0A F2 | 	cmp	local06, local03 wz
24378     7C 00 90 AD |  if_e	jmp	#LR__2765
2437c                 | '       if (d>=0) 
2437c     00 40 56 F2 | 	cmps	local14, #0 wc
24380                 | '         x+=xi
24380     1A 31 02 31 |  if_ae	add	local06, local08
24384                 | '         y+=yi
24384     1C 33 02 31 |  if_ae	add	local07, local10
24388                 | '         d+=ai
24388     1E 41 02 31 |  if_ae	add	local14, local12
2438c                 | '       else
2438c                 | '         d+=bi
2438c     1F 41 02 C1 |  if_b	add	local14, local13
24390                 | '         x+=xi
24390     1A 31 02 C1 |  if_b	add	local06, local08
24394                 | '       putpixel(x,y,c)
24394     18 13 02 F6 | 	mov	arg01, local06
24398     19 15 02 F6 | 	mov	arg02, local07
2439c     17 17 02 F6 | 	mov	arg03, local05
243a0     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
243a4     CC FF 9F FD | 	jmp	#LR__2761
243a8                 | LR__2762
243a8                 | '   else
243a8                 | '     ai:=(dx-dy)*2
243a8     1B 3D 02 F6 | 	mov	local12, local09
243ac     1D 3D 82 F1 | 	sub	local12, local11
243b0     01 3C 66 F0 | 	shl	local12, #1
243b4                 | '     bi:=dx*2
243b4     01 36 66 F0 | 	shl	local09, #1
243b8     1B 3F 02 F6 | 	mov	local13, local09
243bc                 | '     d:=bi-dy
243bc     1F 41 02 F6 | 	mov	local14, local13
243c0     1D 41 82 F1 | 	sub	local14, local11
243c4                 | '     repeat while (y<>y2)
243c4                 | LR__2763
243c4     16 33 0A F2 | 	cmp	local07, local04 wz
243c8     2C 00 90 AD |  if_e	jmp	#LR__2764
243cc                 | '       if (d>=0)
243cc     00 40 56 F2 | 	cmps	local14, #0 wc
243d0                 | '         x+=xi
243d0     1A 31 02 31 |  if_ae	add	local06, local08
243d4                 | '         y+=yi
243d4     1C 33 02 31 |  if_ae	add	local07, local10
243d8                 | '         d+=ai
243d8     1E 41 02 31 |  if_ae	add	local14, local12
243dc                 | '       else
243dc                 | '         d+=bi
243dc     1F 41 02 C1 |  if_b	add	local14, local13
243e0                 | '         y+=yi
243e0     1C 33 02 C1 |  if_b	add	local07, local10
243e4                 | '       putpixel(x, y,c)
243e4     18 13 02 F6 | 	mov	arg01, local06
243e8     19 15 02 F6 | 	mov	arg02, local07
243ec     17 17 02 F6 | 	mov	arg03, local05
243f0     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
243f4     CC FF 9F FD | 	jmp	#LR__2763
243f8                 | LR__2764
243f8                 | LR__2765
243f8                 | LR__2766
243f8     A7 F0 03 F6 | 	mov	ptra, fp
243fc     B2 00 A0 FD | 	call	#popregs_
24400                 | _hg010b_spin2_draw_ret
24400     2D 00 64 FD | 	ret
24404                 | 
24404                 | '  
24404                 | ' pub fillpush(val) 
24404                 | _hg010b_spin2_fillpush
24404                 | ' fillstack[fillptr]:=val
24404     0B 00 00 FF 
24408     BA E4 05 F1 | 	add	objptr, ##5818
2440c     F2 00 02 FB | 	rdlong	_var01, objptr
24410     02 00 66 F0 | 	shl	_var01, #2
24414     0A 00 00 FF 
24418     00 E4 85 F1 | 	sub	objptr, ##5120
2441c     F2 00 02 F1 | 	add	_var01, objptr
24420     00 13 62 FC | 	wrlong	arg01, _var01
24424                 | ' fillptr+=1   
24424     0A 00 00 FF 
24428     00 E4 05 F1 | 	add	objptr, ##5120
2442c     F2 00 02 FB | 	rdlong	_var01, objptr
24430     01 00 06 F1 | 	add	_var01, #1
24434     F2 00 62 FC | 	wrlong	_var01, objptr
24438     0B 00 00 FF 
2443c     BA E4 85 F1 | 	sub	objptr, ##5818
24440                 | _hg010b_spin2_fillpush_ret
24440     2D 00 64 FD | 	ret
24444                 | 
24444                 | ' 
24444                 | '     
24444                 | ' pub fillpop() : val
24444                 | _hg010b_spin2_fillpop
24444                 | ' 
24444                 | ' fillptr-=1
24444     0B 00 00 FF 
24448     BA E4 05 F1 | 	add	objptr, ##5818
2444c     F2 FA 01 FB | 	rdlong	result1, objptr
24450     01 FA 85 F1 | 	sub	result1, #1
24454     F2 FA 61 FC | 	wrlong	result1, objptr
24458                 | ' if fillptr<0
24458     0B 00 00 FF 
2445c     BA E4 85 F1 | 	sub	objptr, ##5818
24460     00 FA 55 F2 | 	cmps	result1, #0 wc
24464                 | '   fillptr:=0
24464     0B 00 00 CF 
24468     BA E4 05 C1 |  if_b	add	objptr, ##5818
2446c     F2 00 68 CC |  if_b	wrlong	#0, objptr
24470     0B 00 00 CF 
24474     BA E4 85 C1 |  if_b	sub	objptr, ##5818
24478                 | '   val:=-12345
24478     E7 FF 7F CF 
2447c     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
24480     28 00 90 CD |  if_b	jmp	#LR__2770
24484                 | ' else 
24484                 | '   val:=fillstack[fillptr]
24484     0B 00 00 FF 
24488     BA E4 05 F1 | 	add	objptr, ##5818
2448c     F2 00 02 FB | 	rdlong	_var01, objptr
24490     02 00 66 F0 | 	shl	_var01, #2
24494     0A 00 00 FF 
24498     00 E4 85 F1 | 	sub	objptr, ##5120
2449c     F2 00 02 F1 | 	add	_var01, objptr
244a0     00 01 02 FB | 	rdlong	_var01, _var01
244a4     01 00 00 FF 
244a8     BA E4 85 F1 | 	sub	objptr, ##698
244ac                 | LR__2770
244ac                 | ' return val
244ac     00 FB 01 F6 | 	mov	result1, _var01
244b0                 | _hg010b_spin2_fillpop_ret
244b0     2D 00 64 FD | 	ret
244b4                 | 
244b4                 | ' 
244b4                 | '       
244b4                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
244b4                 | _hg010b_spin2_fill
244b4     0B 4A 05 F6 | 	mov	COUNT_, #11
244b8     A8 00 A0 FD | 	call	#pushregs_
244bc                 | ' 
244bc                 | ' newcolor:=newcolor & 255
244bc     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
244c0                 | ' oldcolor:=oldcolor & 255
244c0     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
244c4                 | ' 
244c4                 | ' if (oldcolor == newcolor) 
244c4     13 29 0A F2 | 	cmp	local02, local01 wz
244c8                 | '   return
244c8     70 02 90 AD |  if_e	jmp	#LR__2789
244cc                 | ' 
244cc                 | ' fillptr:=0
244cc     0B 00 00 FF 
244d0     BA E4 05 F1 | 	add	objptr, ##5818
244d4     F2 00 68 FC | 	wrlong	#0, objptr
244d8                 | ' fillmax:=0
244d8     04 E4 05 F1 | 	add	objptr, #4
244dc     F2 00 68 FC | 	wrlong	#0, objptr
244e0     0B 00 00 FF 
244e4     BE E4 85 F1 | 	sub	objptr, ##5822
244e8                 | ' fillpush(x)
244e8     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
244ec                 | ' fillpush(y)
244ec     0A 13 02 F6 | 	mov	arg01, arg02
244f0     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
244f4                 | ' y:=fillpop()
244f4     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
244f8     FD 2A 02 F6 | 	mov	local03, result1
244fc                 | ' x:=fillpop()
244fc     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
24500     FD 2C 02 F6 | 	mov	local04, result1
24504                 | ' 'pinhigh(38)
24504                 | ' repeat while (x>-1)       
24504                 | LR__2780
24504     00 2C 56 F2 | 	cmps	local04, #0 wc
24508     30 02 90 CD |  if_b	jmp	#LR__2788
2450c                 | '  ' pintoggle(39)
2450c                 | '   x1 := x
2450c     16 2F 02 F6 | 	mov	local05, local04
24510                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
24510                 | LR__2781
24510     00 30 06 F6 | 	mov	local06, #0
24514     00 32 06 F6 | 	mov	local07, #0
24518     00 2E 56 F2 | 	cmps	local05, #0 wc
2451c     01 32 66 36 |  if_ae	neg	local07, #1
24520     00 32 0E F2 | 	cmp	local07, #0 wz
24524     00 30 26 56 |  if_ne	not	local06, #0
24528     00 34 06 F6 | 	mov	local08, #0
2452c     00 36 06 F6 | 	mov	local09, #0
24530     15 15 02 F6 | 	mov	arg02, local03
24534     17 13 02 F6 | 	mov	arg01, local05
24538     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
2453c     14 FB 09 F2 | 	cmp	result1, local02 wz
24540     00 36 26 A6 |  if_e	not	local09, #0
24544     00 36 0E F2 | 	cmp	local09, #0 wz
24548     00 34 26 56 |  if_ne	not	local08, #0
2454c     1A 31 CA F7 | 	test	local06, local08 wz
24550                 | '     x1--
24550     01 2E 86 51 |  if_ne	sub	local05, #1
24554     B8 FF 9F 5D |  if_ne	jmp	#LR__2781
24558                 | '   x1++
24558     01 2E 06 F1 | 	add	local05, #1
2455c                 | '   spanabove := 0
2455c     00 38 06 F6 | 	mov	local10, #0
24560                 | '   spanbelow := 0
24560     00 3A 06 F6 | 	mov	local11, #0
24564                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
24564                 | LR__2782
24564     00 30 06 F6 | 	mov	local06, #0
24568     02 00 00 FF 
2456c     00 2E 56 F2 | 	cmps	local05, ##1024 wc
24570     00 30 26 C6 |  if_b	not	local06, #0
24574     00 34 06 F6 | 	mov	local08, #0
24578     00 36 06 F6 | 	mov	local09, #0
2457c     15 15 02 F6 | 	mov	arg02, local03
24580     17 13 02 F6 | 	mov	arg01, local05
24584     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
24588     14 FB 09 F2 | 	cmp	result1, local02 wz
2458c     00 36 26 A6 |  if_e	not	local09, #0
24590     00 36 0E F2 | 	cmp	local09, #0 wz
24594     00 34 26 56 |  if_ne	not	local08, #0
24598     1A 31 CA F7 | 	test	local06, local08 wz
2459c     88 01 90 AD |  if_e	jmp	#LR__2787
245a0                 | '     putpixel2 (x1,y, newcolor & 255)
245a0     13 17 E2 F8 | 	getbyte	arg03, local01, #0
245a4     17 13 02 F6 | 	mov	arg01, local05
245a8     15 15 02 F6 | 	mov	arg02, local03
245ac     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
245b0                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
245b0     00 30 06 F6 | 	mov	local06, #0
245b4     00 32 06 F6 | 	mov	local07, #0
245b8     00 38 0E F2 | 	cmp	local10, #0 wz
245bc     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
245c0     01 32 66 26 |  if_nc_and_z	neg	local07, #1
245c4     00 32 0E F2 | 	cmp	local07, #0 wz
245c8     00 30 26 56 |  if_ne	not	local06, #0
245cc     00 34 06 F6 | 	mov	local08, #0
245d0     00 36 06 F6 | 	mov	local09, #0
245d4     15 15 02 F6 | 	mov	arg02, local03
245d8     01 14 86 F1 | 	sub	arg02, #1
245dc     17 13 02 F6 | 	mov	arg01, local05
245e0     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
245e4     14 FB 09 F2 | 	cmp	result1, local02 wz
245e8     00 36 26 A6 |  if_e	not	local09, #0
245ec     00 36 0E F2 | 	cmp	local09, #0 wz
245f0     00 34 26 56 |  if_ne	not	local08, #0
245f4     1A 31 CA F7 | 	test	local06, local08 wz
245f8     1C 00 90 AD |  if_e	jmp	#LR__2783
245fc                 | '       fillpush(x1)
245fc     17 13 02 F6 | 	mov	arg01, local05
24600     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
24604                 | '       fillpush(y-1)
24604     15 13 02 F6 | 	mov	arg01, local03
24608     01 12 86 F1 | 	sub	arg01, #1
2460c     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
24610                 | '       spanabove := 1 
24610     01 38 06 F6 | 	mov	local10, #1
24614     4C 00 90 FD | 	jmp	#LR__2784
24618                 | LR__2783
24618                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
24618     00 30 06 F6 | 	mov	local06, #0
2461c     00 32 06 F6 | 	mov	local07, #0
24620     00 38 0E F2 | 	cmp	local10, #0 wz
24624     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
24628     01 32 66 16 |  if_a	neg	local07, #1
2462c     00 32 0E F2 | 	cmp	local07, #0 wz
24630     00 30 26 56 |  if_ne	not	local06, #0
24634     00 34 06 F6 | 	mov	local08, #0
24638     00 36 06 F6 | 	mov	local09, #0
2463c     15 15 02 F6 | 	mov	arg02, local03
24640     01 14 86 F1 | 	sub	arg02, #1
24644     17 13 02 F6 | 	mov	arg01, local05
24648     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
2464c     14 FB 09 F2 | 	cmp	result1, local02 wz
24650     00 36 26 56 |  if_ne	not	local09, #0
24654     00 36 0E F2 | 	cmp	local09, #0 wz
24658     00 34 26 56 |  if_ne	not	local08, #0
2465c     1A 31 CA F7 | 	test	local06, local08 wz
24660                 | '       spanabove := 0 
24660     00 38 06 56 |  if_ne	mov	local10, #0
24664                 | LR__2784
24664                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
24664     00 30 06 F6 | 	mov	local06, #0
24668     00 32 06 F6 | 	mov	local07, #0
2466c     00 3A 0E F2 | 	cmp	local11, #0 wz
24670     01 00 00 AF 
24674     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
24678     01 32 66 86 |  if_c_and_z	neg	local07, #1
2467c     00 32 0E F2 | 	cmp	local07, #0 wz
24680     00 30 26 56 |  if_ne	not	local06, #0
24684     00 34 06 F6 | 	mov	local08, #0
24688     00 36 06 F6 | 	mov	local09, #0
2468c     15 15 02 F6 | 	mov	arg02, local03
24690     01 14 06 F1 | 	add	arg02, #1
24694     17 13 02 F6 | 	mov	arg01, local05
24698     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
2469c     14 FB 09 F2 | 	cmp	result1, local02 wz
246a0     00 36 26 A6 |  if_e	not	local09, #0
246a4     00 36 0E F2 | 	cmp	local09, #0 wz
246a8     00 34 26 56 |  if_ne	not	local08, #0
246ac     1A 31 CA F7 | 	test	local06, local08 wz
246b0     1C 00 90 AD |  if_e	jmp	#LR__2785
246b4                 | '       fillpush(x1)
246b4     17 13 02 F6 | 	mov	arg01, local05
246b8     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
246bc                 | '       fillpush(y + 1)
246bc     15 13 02 F6 | 	mov	arg01, local03
246c0     01 12 06 F1 | 	add	arg01, #1
246c4     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
246c8                 | '       spanBelow := 1
246c8     01 3A 06 F6 | 	mov	local11, #1
246cc     50 00 90 FD | 	jmp	#LR__2786
246d0                 | LR__2785
246d0                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
246d0     00 30 06 F6 | 	mov	local06, #0
246d4     00 32 06 F6 | 	mov	local07, #0
246d8     00 3A 0E F2 | 	cmp	local11, #0 wz
246dc     01 00 00 5F 
246e0     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
246e4     01 32 66 46 |  if_c_and_nz	neg	local07, #1
246e8     00 32 0E F2 | 	cmp	local07, #0 wz
246ec     00 30 26 56 |  if_ne	not	local06, #0
246f0     00 34 06 F6 | 	mov	local08, #0
246f4     00 36 06 F6 | 	mov	local09, #0
246f8     15 15 02 F6 | 	mov	arg02, local03
246fc     01 14 06 F1 | 	add	arg02, #1
24700     17 13 02 F6 | 	mov	arg01, local05
24704     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
24708     14 FB 09 F2 | 	cmp	result1, local02 wz
2470c     00 36 26 56 |  if_ne	not	local09, #0
24710     00 36 0E F2 | 	cmp	local09, #0 wz
24714     00 34 26 56 |  if_ne	not	local08, #0
24718     1A 31 CA F7 | 	test	local06, local08 wz
2471c                 | '       spanbelow := 0
2471c     00 3A 06 56 |  if_ne	mov	local11, #0
24720                 | LR__2786
24720                 | '     x1++
24720     01 2E 06 F1 | 	add	local05, #1
24724     3C FE 9F FD | 	jmp	#LR__2782
24728                 | LR__2787
24728                 | '   y:=fillpop()
24728     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
2472c     FD 2A 02 F6 | 	mov	local03, result1
24730                 | '   x:=fillpop()
24730     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
24734     FD 2C 02 F6 | 	mov	local04, result1
24738     C8 FD 9F FD | 	jmp	#LR__2780
2473c                 | LR__2788
2473c                 | LR__2789
2473c     A7 F0 03 F6 | 	mov	ptra, fp
24740     B2 00 A0 FD | 	call	#popregs_
24744                 | _hg010b_spin2_fill_ret
24744     2D 00 64 FD | 	ret
24748                 | 
24748                 | ' 'pinlow(38)    
24748                 | ' 
24748                 | ' '-- A filled circle -----------------------------------------------------
24748                 | ' 
24748                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
24748                 | _hg010b_spin2_fcircle
24748     08 4A 05 F6 | 	mov	COUNT_, #8
2474c     A8 00 A0 FD | 	call	#pushregs_
24750     0B 27 02 F6 | 	mov	local01, arg03
24754     FF FF 7F FF 
24758     FE 27 06 FD | 	qmul	local01, ##-2
2475c     09 29 02 F6 | 	mov	local02, arg01
24760     0A 2B 02 F6 | 	mov	local03, arg02
24764     0C 2D 02 F6 | 	mov	local04, arg04
24768                 | ' 
24768                 | ' d:=5-4*r
24768     13 19 02 F6 | 	mov	arg04, local01
2476c     02 18 66 F0 | 	shl	arg04, #2
24770     05 2E 06 F6 | 	mov	local05, #5
24774     0C 2F 82 F1 | 	sub	local05, arg04
24778                 | ' x:=0
24778     00 30 06 F6 | 	mov	local06, #0
2477c                 | ' y:=r
2477c                 | ' da:=(-2*r+5)*4
2477c                 | ' db:=3*4
2477c     0C 32 06 F6 | 	mov	local07, #12
24780                 | ' repeat while (x<=y) 
24780     18 34 62 FD | 	getqx	local08
24784     05 34 06 F1 | 	add	local08, #5
24788     02 34 66 F0 | 	shl	local08, #2
2478c                 | LR__2790
2478c     13 31 5A F2 | 	cmps	local06, local01 wcz
24790     B4 00 90 1D |  if_a	jmp	#LR__2792
24794                 | '   fastline(x0-x,x0+x,y0-y,c)
24794     14 13 02 F6 | 	mov	arg01, local02
24798     18 13 82 F1 | 	sub	arg01, local06
2479c     14 15 02 F6 | 	mov	arg02, local02
247a0     18 15 02 F1 | 	add	arg02, local06
247a4     15 17 02 F6 | 	mov	arg03, local03
247a8     13 17 82 F1 | 	sub	arg03, local01
247ac     16 19 02 F6 | 	mov	arg04, local04
247b0     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
247b4                 | '   fastline(x0-x,x0+x,y0+y,c)
247b4     14 13 02 F6 | 	mov	arg01, local02
247b8     18 13 82 F1 | 	sub	arg01, local06
247bc     14 15 02 F6 | 	mov	arg02, local02
247c0     18 15 02 F1 | 	add	arg02, local06
247c4     15 17 02 F6 | 	mov	arg03, local03
247c8     13 17 02 F1 | 	add	arg03, local01
247cc     16 19 02 F6 | 	mov	arg04, local04
247d0     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
247d4                 | '   fastline(x0-y,x0+y,y0-x,c)
247d4     14 13 02 F6 | 	mov	arg01, local02
247d8     13 13 82 F1 | 	sub	arg01, local01
247dc     14 15 02 F6 | 	mov	arg02, local02
247e0     13 15 02 F1 | 	add	arg02, local01
247e4     15 17 02 F6 | 	mov	arg03, local03
247e8     18 17 82 F1 | 	sub	arg03, local06
247ec     16 19 02 F6 | 	mov	arg04, local04
247f0     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
247f4                 | '   fastline(x0-y,x0+y,y0+x,c)
247f4     14 13 02 F6 | 	mov	arg01, local02
247f8     13 13 82 F1 | 	sub	arg01, local01
247fc     14 15 02 F6 | 	mov	arg02, local02
24800     13 15 02 F1 | 	add	arg02, local01
24804     15 17 02 F6 | 	mov	arg03, local03
24808     18 17 02 F1 | 	add	arg03, local06
2480c     16 19 02 F6 | 	mov	arg04, local04
24810     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
24814                 | '   if d>0 
24814     01 2E 56 F2 | 	cmps	local05, #1 wc
24818     18 00 90 CD |  if_b	jmp	#LR__2791
2481c                 | '     d+=da
2481c     1A 2F 02 F1 | 	add	local05, local08
24820                 | '     y-=1
24820     01 26 86 F1 | 	sub	local01, #1
24824                 | '     x+=1
24824     01 30 06 F1 | 	add	local06, #1
24828                 | '     da+=4*4
24828     10 34 06 F1 | 	add	local08, #16
2482c                 | '     db+=2*4
2482c     08 32 06 F1 | 	add	local07, #8
24830     58 FF 9F FD | 	jmp	#LR__2790
24834                 | LR__2791
24834                 | '   else
24834                 | '     d+=db
24834     19 2F 02 F1 | 	add	local05, local07
24838                 | '     x+=1
24838     01 30 06 F1 | 	add	local06, #1
2483c                 | '     da+=2*4
2483c     08 34 06 F1 | 	add	local08, #8
24840                 | '     db+=2*4
24840     08 32 06 F1 | 	add	local07, #8
24844     44 FF 9F FD | 	jmp	#LR__2790
24848                 | LR__2792
24848     A7 F0 03 F6 | 	mov	ptra, fp
2484c     B2 00 A0 FD | 	call	#popregs_
24850                 | _hg010b_spin2_fcircle_ret
24850     2D 00 64 FD | 	ret
24854                 | 
24854                 | '  
24854                 | ' '-- A circle ------------------------------------------------------------ 
24854                 | '  
24854                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
24854                 | _hg010b_spin2_circle
24854     08 4A 05 F6 | 	mov	COUNT_, #8
24858     A8 00 A0 FD | 	call	#pushregs_
2485c     0B 27 02 F6 | 	mov	local01, arg03
24860     FF FF 7F FF 
24864     FE 27 06 FD | 	qmul	local01, ##-2
24868     09 29 02 F6 | 	mov	local02, arg01
2486c     0A 2B 02 F6 | 	mov	local03, arg02
24870     0C 2D 02 F6 | 	mov	local04, arg04
24874                 | ' 
24874                 | '  
24874                 | ' d:=5-4*r
24874     13 19 02 F6 | 	mov	arg04, local01
24878     02 18 66 F0 | 	shl	arg04, #2
2487c     05 2E 06 F6 | 	mov	local05, #5
24880     0C 2F 82 F1 | 	sub	local05, arg04
24884                 | ' x:=0
24884     00 30 06 F6 | 	mov	local06, #0
24888                 | ' y:=r
24888                 | ' da:=(-2*r+5)*4
24888                 | ' db:=3*4
24888     0C 32 06 F6 | 	mov	local07, #12
2488c                 | ' repeat while (x<=y) 
2488c     18 34 62 FD | 	getqx	local08
24890     05 34 06 F1 | 	add	local08, #5
24894     02 34 66 F0 | 	shl	local08, #2
24898                 | LR__2800
24898     13 31 5A F2 | 	cmps	local06, local01 wcz
2489c     F4 00 90 1D |  if_a	jmp	#LR__2802
248a0                 | '   putpixel(x0-x,y0-y,c)
248a0     14 13 02 F6 | 	mov	arg01, local02
248a4     18 13 82 F1 | 	sub	arg01, local06
248a8     15 15 02 F6 | 	mov	arg02, local03
248ac     13 15 82 F1 | 	sub	arg02, local01
248b0     16 17 02 F6 | 	mov	arg03, local04
248b4     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
248b8                 | '   putpixel(x0-x,y0+y,c)
248b8     14 13 02 F6 | 	mov	arg01, local02
248bc     18 13 82 F1 | 	sub	arg01, local06
248c0     15 15 02 F6 | 	mov	arg02, local03
248c4     13 15 02 F1 | 	add	arg02, local01
248c8     16 17 02 F6 | 	mov	arg03, local04
248cc     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
248d0                 | '   putpixel(x0+x,y0-y,c)
248d0     14 13 02 F6 | 	mov	arg01, local02
248d4     18 13 02 F1 | 	add	arg01, local06
248d8     15 15 02 F6 | 	mov	arg02, local03
248dc     13 15 82 F1 | 	sub	arg02, local01
248e0     16 17 02 F6 | 	mov	arg03, local04
248e4     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
248e8                 | '   putpixel(x0+x,y0+y,c)
248e8     14 13 02 F6 | 	mov	arg01, local02
248ec     18 13 02 F1 | 	add	arg01, local06
248f0     15 15 02 F6 | 	mov	arg02, local03
248f4     13 15 02 F1 | 	add	arg02, local01
248f8     16 17 02 F6 | 	mov	arg03, local04
248fc     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
24900                 | '   putpixel(x0-y,y0-x,c)
24900     14 13 02 F6 | 	mov	arg01, local02
24904     13 13 82 F1 | 	sub	arg01, local01
24908     15 15 02 F6 | 	mov	arg02, local03
2490c     18 15 82 F1 | 	sub	arg02, local06
24910     16 17 02 F6 | 	mov	arg03, local04
24914     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
24918                 | '   putpixel(x0-y,y0+x,c)
24918     14 13 02 F6 | 	mov	arg01, local02
2491c     13 13 82 F1 | 	sub	arg01, local01
24920     15 15 02 F6 | 	mov	arg02, local03
24924     18 15 02 F1 | 	add	arg02, local06
24928     16 17 02 F6 | 	mov	arg03, local04
2492c     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
24930                 | '   putpixel(x0+y,y0-x,c)
24930     14 13 02 F6 | 	mov	arg01, local02
24934     13 13 02 F1 | 	add	arg01, local01
24938     15 15 02 F6 | 	mov	arg02, local03
2493c     18 15 82 F1 | 	sub	arg02, local06
24940     16 17 02 F6 | 	mov	arg03, local04
24944     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
24948                 | '   putpixel(x0+y,y0+x,c)
24948     14 13 02 F6 | 	mov	arg01, local02
2494c     13 13 02 F1 | 	add	arg01, local01
24950     15 15 02 F6 | 	mov	arg02, local03
24954     18 15 02 F1 | 	add	arg02, local06
24958     16 17 02 F6 | 	mov	arg03, local04
2495c     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
24960                 | '   if d>0 
24960     01 2E 56 F2 | 	cmps	local05, #1 wc
24964     18 00 90 CD |  if_b	jmp	#LR__2801
24968                 | '     d+=da
24968     1A 2F 02 F1 | 	add	local05, local08
2496c                 | '     y-=1
2496c     01 26 86 F1 | 	sub	local01, #1
24970                 | '     x+=1
24970     01 30 06 F1 | 	add	local06, #1
24974                 | '     da+=4*4
24974     10 34 06 F1 | 	add	local08, #16
24978                 | '     db+=2*4
24978     08 32 06 F1 | 	add	local07, #8
2497c     18 FF 9F FD | 	jmp	#LR__2800
24980                 | LR__2801
24980                 | '   else
24980                 | '     d+=db
24980     19 2F 02 F1 | 	add	local05, local07
24984                 | '     x+=1
24984     01 30 06 F1 | 	add	local06, #1
24988                 | '     da+=2*4
24988     08 34 06 F1 | 	add	local08, #8
2498c                 | '     db+=2*4
2498c     08 32 06 F1 | 	add	local07, #8
24990     04 FF 9F FD | 	jmp	#LR__2800
24994                 | LR__2802
24994     A7 F0 03 F6 | 	mov	ptra, fp
24998     B2 00 A0 FD | 	call	#popregs_
2499c                 | _hg010b_spin2_circle_ret
2499c     2D 00 64 FD | 	ret
249a0                 | 
249a0                 | '     
249a0                 | ' '-- A frame (an empty rectangle) ---------------------------------------
249a0                 | ' 
249a0                 | ' pub frame(x1,y1,x2,y2,c)
249a0                 | _hg010b_spin2_frame
249a0     05 4A 05 F6 | 	mov	COUNT_, #5
249a4     A8 00 A0 FD | 	call	#pushregs_
249a8     09 27 02 F6 | 	mov	local01, arg01
249ac     0A 29 02 F6 | 	mov	local02, arg02
249b0     0B 2B 02 F6 | 	mov	local03, arg03
249b4     0C 2D 02 F6 | 	mov	local04, arg04
249b8     0D 2F 02 F6 | 	mov	local05, arg05
249bc                 | ' 
249bc                 | ' fastline(x1,x2,y1,c)
249bc     13 13 02 F6 | 	mov	arg01, local01
249c0     15 15 02 F6 | 	mov	arg02, local03
249c4     14 17 02 F6 | 	mov	arg03, local02
249c8     17 19 02 F6 | 	mov	arg04, local05
249cc     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
249d0                 | ' fastline(x1,x2,y2,c)
249d0     13 13 02 F6 | 	mov	arg01, local01
249d4     15 15 02 F6 | 	mov	arg02, local03
249d8     16 17 02 F6 | 	mov	arg03, local04
249dc     17 19 02 F6 | 	mov	arg04, local05
249e0     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
249e4                 | ' line(x1,y1,x1,y2,c)
249e4     13 13 02 F6 | 	mov	arg01, local01
249e8     14 15 02 F6 | 	mov	arg02, local02
249ec     13 17 02 F6 | 	mov	arg03, local01
249f0     16 19 02 F6 | 	mov	arg04, local04
249f4     17 1B 02 F6 | 	mov	arg05, local05
249f8                 | ' draw(x1,y1,x2,y2,c)
249f8     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
249fc                 | ' line(x2,y1,x2,y2,c)
249fc     15 13 02 F6 | 	mov	arg01, local03
24a00     14 15 02 F6 | 	mov	arg02, local02
24a04     15 17 02 F6 | 	mov	arg03, local03
24a08     16 19 02 F6 | 	mov	arg04, local04
24a0c     17 1B 02 F6 | 	mov	arg05, local05
24a10                 | ' draw(x1,y1,x2,y2,c)
24a10     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
24a14     A7 F0 03 F6 | 	mov	ptra, fp
24a18     B2 00 A0 FD | 	call	#popregs_
24a1c                 | _hg010b_spin2_frame_ret
24a1c     2D 00 64 FD | 	ret
24a20                 | 
24a20                 | ' 
24a20                 | ' '-- A box (a filled rectangle) ----------------------------------------
24a20                 | ' 
24a20                 | ' pub box(x1,y1,x2,y2,c) |yy
24a20                 | _hg010b_spin2_box
24a20     06 4A 05 F6 | 	mov	COUNT_, #6
24a24     A8 00 A0 FD | 	call	#pushregs_
24a28     09 27 02 F6 | 	mov	local01, arg01
24a2c     0A 29 02 F6 | 	mov	local02, arg02
24a30     0B 2B 02 F6 | 	mov	local03, arg03
24a34     0C 2D 02 F6 | 	mov	local04, arg04
24a38     0D 2F 02 F6 | 	mov	local05, arg05
24a3c                 | ' 
24a3c                 | ' repeat yy from y1 to y2
24a3c     14 2D 52 F2 | 	cmps	local04, local02 wc
24a40     01 30 86 F6 | 	negc	local06, #1
24a44     18 2D 02 F1 | 	add	local04, local06
24a48                 | LR__2810
24a48                 | '   fastline(x1,x2,yy,c)
24a48     13 13 02 F6 | 	mov	arg01, local01
24a4c     15 15 02 F6 | 	mov	arg02, local03
24a50     17 19 02 F6 | 	mov	arg04, local05
24a54     14 17 02 F6 | 	mov	arg03, local02
24a58     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
24a5c     18 29 02 F1 | 	add	local02, local06
24a60     16 29 0A F2 | 	cmp	local02, local04 wz
24a64     E0 FF 9F 5D |  if_ne	jmp	#LR__2810
24a68     A7 F0 03 F6 | 	mov	ptra, fp
24a6c     B2 00 A0 FD | 	call	#popregs_
24a70                 | _hg010b_spin2_box_ret
24a70     2D 00 64 FD | 	ret
24a74                 | 
24a74                 | '       
24a74                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
24a74                 | _hg010b_spin2_putcharxycgf
24a74                 | ' 
24a74                 | '  
24a74                 | ' repeat yy from 0 to 15
24a74     00 00 06 F6 | 	mov	_var01, #0
24a78     97 8C 48 FB | 	callpa	#(@LR__2822-@LR__2820)>>2,fcache_load_ptr_
24a7c                 | LR__2820
24a7c                 | ' 
24a7c                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
24a7c     95 E4 05 F1 | 	add	objptr, #149
24a80     F2 02 02 FB | 	rdlong	_var02, objptr
24a84     0A 02 66 F0 | 	shl	_var02, #10
24a88     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
24a8c     01 05 02 F1 | 	add	_var03, _var02
24a90     0B 03 02 F6 | 	mov	_var02, arg03
24a94     04 02 66 F0 | 	shl	_var02, #4
24a98     01 05 02 F1 | 	add	_var03, _var02
24a9c     00 05 02 F1 | 	add	_var03, _var01
24aa0     02 05 C2 FA | 	rdbyte	_var03, _var03
24aa4                 | '   asm
24aa4     00 04 0E F4 | 	testb	_var03, #0 wz
24aa8     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
24aac     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
24ab0     01 04 0E F4 | 	testb	_var03, #1 wz
24ab4     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
24ab8     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
24abc     02 04 0E F4 | 	testb	_var03, #2 wz
24ac0     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
24ac4     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
24ac8     03 04 0E F4 | 	testb	_var03, #3 wz
24acc     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
24ad0     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
24ad4     04 04 0E F4 | 	testb	_var03, #4 wz
24ad8     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
24adc     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
24ae0     05 04 0E F4 | 	testb	_var03, #5 wz
24ae4     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
24ae8     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
24aec     06 04 0E F4 | 	testb	_var03, #6 wz
24af0     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
24af4     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
24af8     07 04 0E F4 | 	testb	_var03, #7 wz
24afc     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
24b00     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
24b04                 | '   
24b04                 | '   ccc[0]:=c1
24b04     99 E5 05 F1 | 	add	objptr, #409
24b08     F2 06 62 FC | 	wrlong	_var04, objptr
24b0c                 | '   ccc[1]:=c2 
24b0c     04 E4 05 F1 | 	add	objptr, #4
24b10     F2 08 62 FC | 	wrlong	_var05, objptr
24b14                 | '   long[mailbox0][2]:=8
24b14     49 E4 85 F1 | 	sub	objptr, #73
24b18     F2 04 02 FB | 	rdlong	_var03, objptr
24b1c     08 04 06 F1 | 	add	_var03, #8
24b20     02 11 68 FC | 	wrlong	#8, _var03
24b24                 | '   long[mailbox0][1]:=@ccc
24b24     45 E4 05 F1 | 	add	objptr, #69
24b28     F2 04 02 F6 | 	mov	_var03, objptr
24b2c     45 E4 85 F1 | 	sub	objptr, #69
24b30     F2 02 02 FB | 	rdlong	_var02, objptr
24b34     04 02 06 F1 | 	add	_var02, #4
24b38     01 05 62 FC | 	wrlong	_var03, _var02
24b3c                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
24b3c     0C E5 85 F1 | 	sub	objptr, #268
24b40     F2 04 02 FB | 	rdlong	_var03, objptr
24b44     0A 03 02 F6 | 	mov	_var02, arg02
24b48     00 03 02 F1 | 	add	_var02, _var01
24b4c     0A 02 66 F0 | 	shl	_var02, #10
24b50     09 0B 02 F6 | 	mov	_var06, arg01
24b54     02 0A 66 F0 | 	shl	_var06, #2
24b58     05 03 02 F1 | 	add	_var02, _var06
24b5c     01 05 02 F1 | 	add	_var03, _var02
24b60     00 00 78 FF 
24b64     00 04 06 F1 | 	add	_var03, ##-268435456
24b68     0C E5 05 F1 | 	add	objptr, #268
24b6c     F2 0A 02 FB | 	rdlong	_var06, objptr
24b70     05 05 62 FC | 	wrlong	_var03, _var06
24b74                 | '   repeat
24b74                 | LR__2821
24b74     F2 04 02 FB | 	rdlong	_var03, objptr
24b78     02 03 02 FB | 	rdlong	_var02, _var03
24b7c     00 02 56 F2 | 	cmps	_var02, #0 wc
24b80     F0 FF 9F CD |  if_b	jmp	#LR__2821
24b84     E9 E5 85 F1 | 	sub	objptr, #489
24b88     01 00 06 F1 | 	add	_var01, #1
24b8c     10 00 56 F2 | 	cmps	_var01, #16 wc
24b90     E8 FE 9F CD |  if_b	jmp	#LR__2820
24b94                 | LR__2822
24b94                 | _hg010b_spin2_putcharxycgf_ret
24b94     2D 00 64 FD | 	ret
24b98                 | 
24b98                 | ' 
24b98                 | ' 
24b98                 | ' '**********************************************************************r***
24b98                 | ' '                                                                        *
24b98                 | ' ' Font related functions                                                 *
24b98                 | ' '                                                                        *
24b98                 | ' '*************************************************************************
24b98                 | ' 
24b98                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
24b98                 | ' 
24b98                 | ' pub setfontfamily(afontnum)
24b98                 | _hg010b_spin2_setfontfamily
24b98                 | ' 
24b98                 | ' font_family:=afontnum
24b98     95 E4 05 F1 | 	add	objptr, #149
24b9c     F2 12 62 FC | 	wrlong	arg01, objptr
24ba0     95 E4 85 F1 | 	sub	objptr, #149
24ba4                 | ' 'if afontnum==8
24ba4                 | ' '  font_ptr:=@amiga_font
24ba4                 | ' 
24ba4                 | ' if afontnum==4
24ba4     04 12 0E F2 | 	cmp	arg01, #4 wz
24ba8                 | '   font_ptr:=@st_font
24ba8     08 00 00 AF 
24bac     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
24bb0     08 E4 05 A1 |  if_e	add	objptr, #8
24bb4     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
24bb8     08 E4 85 A1 |  if_e	sub	objptr, #8
24bbc     08 00 00 AF 
24bc0     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
24bc4                 | ' if afontnum==0
24bc4     00 12 0E F2 | 	cmp	arg01, #0 wz
24bc8                 | '   font_ptr:=@vga_font
24bc8     08 E4 05 A1 |  if_e	add	objptr, #8
24bcc     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
24bd0     08 E4 85 A1 |  if_e	sub	objptr, #8
24bd4                 | _hg010b_spin2_setfontfamily_ret
24bd4     2D 00 64 FD | 	ret
24bd8                 | 
24bd8                 | ' 
24bd8                 | ' '*************************************************************************
24bd8                 | ' '                                                                        *
24bd8                 | ' '  Cursor functions                                                      *
24bd8                 | ' '                                                                        *
24bd8                 | ' '*************************************************************************
24bd8                 | ' 
24bd8                 | ' 
24bd8                 | ' pub setcursorpos(x,y)
24bd8                 | _hg010b_spin2_setcursorpos
24bd8                 | ' 
24bd8                 | ' ''---------- Set the (x,y) position of cursor
24bd8                 | ' 
24bd8                 | ' cursor_x:=x
24bd8     3C E4 05 F1 | 	add	objptr, #60
24bdc     F2 12 52 FC | 	wrword	arg01, objptr
24be0                 | ' cursor_y:=y
24be0     02 E4 05 F1 | 	add	objptr, #2
24be4     F2 14 42 FC | 	wrbyte	arg02, objptr
24be8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
24be8     02 E4 85 F1 | 	sub	objptr, #2
24bec     F2 14 E2 FA | 	rdword	arg02, objptr
24bf0     02 14 66 F0 | 	shl	arg02, #2
24bf4     02 E4 05 F1 | 	add	objptr, #2
24bf8     F2 16 C2 FA | 	rdbyte	arg03, objptr
24bfc     3E E4 85 F1 | 	sub	objptr, #62
24c00     04 16 66 F0 | 	shl	arg03, #4
24c04     04 16 06 F1 | 	add	arg03, #4
24c08     11 12 06 F6 | 	mov	arg01, #17
24c0c     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
24c10                 | _hg010b_spin2_setcursorpos_ret
24c10     2D 00 64 FD | 	ret
24c14                 | 
24c14                 | ' 
24c14                 | ' pub setcursorx(x)
24c14                 | _hg010b_spin2_setcursorx
24c14                 | ' cursor_x:=x
24c14     3C E4 05 F1 | 	add	objptr, #60
24c18     F2 12 52 FC | 	wrword	arg01, objptr
24c1c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
24c1c     F2 14 E2 FA | 	rdword	arg02, objptr
24c20     02 14 66 F0 | 	shl	arg02, #2
24c24     02 E4 05 F1 | 	add	objptr, #2
24c28     F2 16 C2 FA | 	rdbyte	arg03, objptr
24c2c     3E E4 85 F1 | 	sub	objptr, #62
24c30     04 16 66 F0 | 	shl	arg03, #4
24c34     04 16 06 F1 | 	add	arg03, #4
24c38     11 12 06 F6 | 	mov	arg01, #17
24c3c     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
24c40                 | _hg010b_spin2_setcursorx_ret
24c40     2D 00 64 FD | 	ret
24c44                 | 
24c44                 | ' 
24c44                 | ' pub setcursory(y) 
24c44                 | _hg010b_spin2_setcursory
24c44                 | ' cursor_y:=y
24c44     3E E4 05 F1 | 	add	objptr, #62
24c48     F2 12 42 FC | 	wrbyte	arg01, objptr
24c4c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
24c4c     02 E4 85 F1 | 	sub	objptr, #2
24c50     F2 14 E2 FA | 	rdword	arg02, objptr
24c54     02 14 66 F0 | 	shl	arg02, #2
24c58     02 E4 05 F1 | 	add	objptr, #2
24c5c     F2 16 C2 FA | 	rdbyte	arg03, objptr
24c60     3E E4 85 F1 | 	sub	objptr, #62
24c64     04 16 66 F0 | 	shl	arg03, #4
24c68     04 16 06 F1 | 	add	arg03, #4
24c6c     11 12 06 F6 | 	mov	arg01, #17
24c70     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
24c74                 | _hg010b_spin2_setcursory_ret
24c74     2D 00 64 FD | 	ret
24c78                 | 
24c78                 | ' 
24c78                 | ' '*************************************************************************
24c78                 | ' '                                                                        *
24c78                 | ' '  VBlank functions                                                      *
24c78                 | ' '                                                                        *
24c78                 | ' '*************************************************************************
24c78                 | ' 
24c78                 | ' pub waitvbl(amount) | i
24c78                 | _hg010b_spin2_waitvbl
24c78     03 4A 05 F6 | 	mov	COUNT_, #3
24c7c     A8 00 A0 FD | 	call	#pushregs_
24c80     09 27 02 F6 | 	mov	local01, arg01
24c84                 | ' 
24c84                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
24c84                 | ' 
24c84                 | ' repeat i from 1 to amount
24c84     01 28 06 F6 | 	mov	local02, #1
24c88     01 26 56 F2 | 	cmps	local01, #1 wc
24c8c     01 2A 86 F6 | 	negc	local03, #1
24c90     15 27 02 F1 | 	add	local01, local03
24c94                 | LR__2830
24c94                 | '   repeat until vblank==0
24c94                 | LR__2831
24c94     49 E4 05 F1 | 	add	objptr, #73
24c98     F2 12 0A FB | 	rdlong	arg01, objptr wz
24c9c     49 E4 85 F1 | 	sub	objptr, #73
24ca0     0C 00 90 AD |  if_e	jmp	#LR__2832
24ca4                 | '     waitus(100)
24ca4     64 12 06 F6 | 	mov	arg01, #100
24ca8     20 20 B0 FD | 	call	#__system___waitus
24cac     E4 FF 9F FD | 	jmp	#LR__2831
24cb0                 | LR__2832
24cb0                 | '   repeat until vblank==1
24cb0                 | LR__2833
24cb0     49 E4 05 F1 | 	add	objptr, #73
24cb4     F2 12 02 FB | 	rdlong	arg01, objptr
24cb8     49 E4 85 F1 | 	sub	objptr, #73
24cbc     01 12 0E F2 | 	cmp	arg01, #1 wz
24cc0     0C 00 90 AD |  if_e	jmp	#LR__2834
24cc4                 | '     waitus(100)
24cc4     64 12 06 F6 | 	mov	arg01, #100
24cc8     00 20 B0 FD | 	call	#__system___waitus
24ccc     E0 FF 9F FD | 	jmp	#LR__2833
24cd0                 | LR__2834
24cd0     15 29 02 F1 | 	add	local02, local03
24cd4     13 29 0A F2 | 	cmp	local02, local01 wz
24cd8     B8 FF 9F 5D |  if_ne	jmp	#LR__2830
24cdc     A7 F0 03 F6 | 	mov	ptra, fp
24ce0     B2 00 A0 FD | 	call	#popregs_
24ce4                 | _hg010b_spin2_waitvbl_ret
24ce4     2D 00 64 FD | 	ret
24ce8                 | 
24ce8                 | ' 
24ce8                 | ' 
24ce8                 | ' pub cls(fc,bc)   :c,i
24ce8                 | _hg010b_spin2_cls
24ce8     02 4A 05 F6 | 	mov	COUNT_, #2
24cec     A8 00 A0 FD | 	call	#pushregs_
24cf0     09 27 02 F6 | 	mov	local01, arg01
24cf4     0A 29 02 F6 | 	mov	local02, arg02
24cf8                 | ' 
24cf8                 | ' c:=bc
24cf8                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
24cf8     DD E4 05 F1 | 	add	objptr, #221
24cfc     F2 12 02 FB | 	rdlong	arg01, objptr
24d00     A5 E4 85 F1 | 	sub	objptr, #165
24d04     F2 16 02 FB | 	rdlong	arg03, objptr
24d08     02 16 66 F0 | 	shl	arg03, #2
24d0c     14 15 02 F6 | 	mov	arg02, local02
24d10     00 18 06 F6 | 	mov	arg04, #0
24d14     01 1A 06 F6 | 	mov	arg05, #1
24d18     0B 00 00 FF 
24d1c     94 E4 05 F1 | 	add	objptr, ##5780
24d20     F8 10 B0 FD | 	call	#_psram_spin2_fill
24d24                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
24d24     0B 00 00 FF 
24d28     C8 E4 85 F1 | 	sub	objptr, ##5832
24d2c     F2 12 02 FB | 	rdlong	arg01, objptr
24d30     04 E4 85 F1 | 	sub	objptr, #4
24d34     F2 16 02 FB | 	rdlong	arg03, objptr
24d38     09 17 82 F1 | 	sub	arg03, arg01
24d3c     20 14 06 F6 | 	mov	arg02, #32
24d40     00 18 06 F6 | 	mov	arg04, #0
24d44     01 1A 06 F6 | 	mov	arg05, #1
24d48     0B 00 00 FF 
24d4c     CC E4 05 F1 | 	add	objptr, ##5836
24d50     C8 10 B0 FD | 	call	#_psram_spin2_fill
24d54                 | ' setwritecolors(fc,bc)
24d54                 | ' 
24d54                 | ' write_color:=ff
24d54     0B 00 00 FF 
24d58     8B E4 85 F1 | 	sub	objptr, ##5771
24d5c     F2 26 62 FC | 	wrlong	local01, objptr
24d60                 | ' write_background:=bb
24d60     04 E4 05 F1 | 	add	objptr, #4
24d64     F2 28 62 FC | 	wrlong	local02, objptr
24d68                 | ' cursor_x:=0
24d68     09 E4 85 F1 | 	sub	objptr, #9
24d6c     F2 00 58 FC | 	wrword	#0, objptr
24d70                 | ' cursor_y:=0
24d70     02 E4 05 F1 | 	add	objptr, #2
24d74     F2 00 48 FC | 	wrbyte	#0, objptr
24d78                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
24d78     02 E4 85 F1 | 	sub	objptr, #2
24d7c     F2 14 E2 FA | 	rdword	arg02, objptr
24d80     02 14 66 F0 | 	shl	arg02, #2
24d84     02 E4 05 F1 | 	add	objptr, #2
24d88     F2 16 C2 FA | 	rdbyte	arg03, objptr
24d8c     3E E4 85 F1 | 	sub	objptr, #62
24d90     04 16 66 F0 | 	shl	arg03, #4
24d94     04 16 06 F1 | 	add	arg03, #4
24d98     11 12 06 F6 | 	mov	arg01, #17
24d9c     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
24da0                 | ' setcursorcolor(fc)
24da0     13 13 02 F6 | 	mov	arg01, local01
24da4     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
24da8     14 FB 01 F6 | 	mov	result1, local02
24dac     00 FC 05 F6 | 	mov	result2, #0
24db0     A7 F0 03 F6 | 	mov	ptra, fp
24db4     B2 00 A0 FD | 	call	#popregs_
24db8                 | _hg010b_spin2_cls_ret
24db8     2D 00 64 FD | 	ret
24dbc                 | 
24dbc                 | ' 
24dbc                 | ' ''---------- Output a char at the cursor position, move the cursor 
24dbc                 | ' 
24dbc                 | ' pub putchar(achar) | c,x,y,l,newcpl
24dbc                 | _hg010b_spin2_putchar
24dbc     02 4A 05 F6 | 	mov	COUNT_, #2
24dc0     A8 00 A0 FD | 	call	#pushregs_
24dc4     09 27 02 F6 | 	mov	local01, arg01
24dc8                 | ' 
24dc8                 | ' if achar==10
24dc8     0A 26 0E F2 | 	cmp	local01, #10 wz
24dcc                 | '   crlf()
24dcc     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
24dd0                 | ' if achar==9
24dd0     09 26 0E F2 | 	cmp	local01, #9 wz
24dd4     18 00 90 5D |  if_ne	jmp	#LR__2840
24dd8                 | '   cursor_x:=(cursor_x& %11110000)+16
24dd8     3C E4 05 F1 | 	add	objptr, #60
24ddc     F2 16 E2 FA | 	rdword	arg03, objptr
24de0     F0 16 06 F5 | 	and	arg03, #240
24de4     10 16 06 F1 | 	add	arg03, #16
24de8     F2 16 52 FC | 	wrword	arg03, objptr
24dec     3C E4 85 F1 | 	sub	objptr, #60
24df0                 | LR__2840
24df0                 | '   
24df0                 | ' if (achar<>9) && (achar<>10) 
24df0     09 26 0E F2 | 	cmp	local01, #9 wz
24df4     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
24df8     A8 00 90 AD |  if_e	jmp	#LR__2841
24dfc                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
24dfc     3C E4 05 F1 | 	add	objptr, #60
24e00     F2 12 E2 FA | 	rdword	arg01, objptr
24e04     02 E4 05 F1 | 	add	objptr, #2
24e08     F2 14 C2 FA | 	rdbyte	arg02, objptr
24e0c     04 14 66 F0 | 	shl	arg02, #4
24e10     04 14 06 F1 | 	add	arg02, #4
24e14     03 E4 05 F1 | 	add	objptr, #3
24e18     F2 18 02 FB | 	rdlong	arg04, objptr
24e1c     04 E4 05 F1 | 	add	objptr, #4
24e20     F2 1A 02 FB | 	rdlong	arg05, objptr
24e24     45 E4 85 F1 | 	sub	objptr, #69
24e28     13 17 02 F6 | 	mov	arg03, local01
24e2c     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
24e30     04 E4 05 F1 | 	add	objptr, #4
24e34     F2 12 02 FB | 	rdlong	arg01, objptr
24e38     10 00 00 FF 
24e3c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
24e40     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
24e44     3A E4 05 F1 | 	add	objptr, #58
24e48     F2 1A C2 FA | 	rdbyte	arg05, objptr
24e4c     0D 17 02 FD | 	qmul	arg03, arg05
24e50                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
24e50     10 00 00 FF 
24e54     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
24e58     02 E4 85 F1 | 	sub	objptr, #2
24e5c     F2 28 E2 FA | 	rdword	local02, objptr
24e60     01 28 46 F0 | 	shr	local02, #1
24e64     13 15 02 F6 | 	mov	arg02, local01
24e68     01 16 06 F6 | 	mov	arg03, #1
24e6c     00 18 06 F6 | 	mov	arg04, #0
24e70     01 1A 06 F6 | 	mov	arg05, #1
24e74     0B 00 00 FF 
24e78     90 E4 05 F1 | 	add	objptr, ##5776
24e7c     18 26 62 FD | 	getqx	local01
24e80     14 27 02 F1 | 	add	local01, local02
24e84     13 13 02 F1 | 	add	arg01, local01
24e88     90 0F B0 FD | 	call	#_psram_spin2_fill
24e8c                 | '   cursor_x+=2
24e8c     0B 00 00 FF 
24e90     90 E4 85 F1 | 	sub	objptr, ##5776
24e94     F2 28 E2 FA | 	rdword	local02, objptr
24e98     02 28 06 F1 | 	add	local02, #2
24e9c     F2 28 52 FC | 	wrword	local02, objptr
24ea0     3C E4 85 F1 | 	sub	objptr, #60
24ea4                 | LR__2841
24ea4                 | ' 
24ea4                 | ' if cursor_x>=256
24ea4     3C E4 05 F1 | 	add	objptr, #60
24ea8     F2 28 E2 FA | 	rdword	local02, objptr
24eac     3C E4 85 F1 | 	sub	objptr, #60
24eb0     00 29 56 F2 | 	cmps	local02, #256 wc
24eb4     64 00 90 CD |  if_b	jmp	#LR__2843
24eb8                 | '   cursor_x:=0
24eb8     3C E4 05 F1 | 	add	objptr, #60
24ebc     F2 00 58 FC | 	wrword	#0, objptr
24ec0                 | '   cursor_y+=1
24ec0     02 E4 05 F1 | 	add	objptr, #2
24ec4     F2 28 C2 FA | 	rdbyte	local02, objptr
24ec8     01 28 06 F1 | 	add	local02, #1
24ecc     F2 28 42 FC | 	wrbyte	local02, objptr
24ed0                 | '   if cursor_y>st_lines-1
24ed0     C3 E4 05 F1 | 	add	objptr, #195
24ed4     F2 28 02 FB | 	rdlong	local02, objptr
24ed8     01 28 86 F1 | 	sub	local02, #1
24edc     C3 E4 85 F1 | 	sub	objptr, #195
24ee0     F2 16 C2 FA | 	rdbyte	arg03, objptr
24ee4     3E E4 85 F1 | 	sub	objptr, #62
24ee8     14 17 5A F2 | 	cmps	arg03, local02 wcz
24eec     2C 00 90 ED |  if_be	jmp	#LR__2842
24ef0                 | '     scrollup2()
24ef0     00 12 06 F6 | 	mov	arg01, #0
24ef4     01 00 00 FF 
24ef8     58 14 06 F6 | 	mov	arg02, ##600
24efc     10 16 06 F6 | 	mov	arg03, #16
24f00     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
24f04                 | '     cursor_y:=st_lines-1
24f04     01 E5 05 F1 | 	add	objptr, #257
24f08     F2 28 02 FB | 	rdlong	local02, objptr
24f0c     01 28 86 F1 | 	sub	local02, #1
24f10     C3 E4 85 F1 | 	sub	objptr, #195
24f14     F2 28 42 FC | 	wrbyte	local02, objptr
24f18     3E E4 85 F1 | 	sub	objptr, #62
24f1c                 | LR__2842
24f1c                 | LR__2843
24f1c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
24f1c     3C E4 05 F1 | 	add	objptr, #60
24f20     F2 14 E2 FA | 	rdword	arg02, objptr
24f24     02 14 66 F0 | 	shl	arg02, #2
24f28     02 E4 05 F1 | 	add	objptr, #2
24f2c     F2 16 C2 FA | 	rdbyte	arg03, objptr
24f30     3E E4 85 F1 | 	sub	objptr, #62
24f34     04 16 66 F0 | 	shl	arg03, #4
24f38     04 16 06 F1 | 	add	arg03, #4
24f3c     11 12 06 F6 | 	mov	arg01, #17
24f40     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
24f44     A7 F0 03 F6 | 	mov	ptra, fp
24f48     B2 00 A0 FD | 	call	#popregs_
24f4c                 | _hg010b_spin2_putchar_ret
24f4c     2D 00 64 FD | 	ret
24f50                 | 
24f50                 | '     
24f50                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
24f50                 | ' 
24f50                 | ' pub putchar2(achar) | c,x,y,l,newcpl
24f50                 | _hg010b_spin2_putchar2
24f50     02 4A 05 F6 | 	mov	COUNT_, #2
24f54     A8 00 A0 FD | 	call	#pushregs_
24f58     09 27 02 F6 | 	mov	local01, arg01
24f5c                 | ' 
24f5c                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
24f5c     3C E4 05 F1 | 	add	objptr, #60
24f60     F2 12 E2 FA | 	rdword	arg01, objptr
24f64     02 E4 05 F1 | 	add	objptr, #2
24f68     F2 14 C2 FA | 	rdbyte	arg02, objptr
24f6c     04 14 66 F0 | 	shl	arg02, #4
24f70     04 14 06 F1 | 	add	arg02, #4
24f74     03 E4 05 F1 | 	add	objptr, #3
24f78     F2 18 02 FB | 	rdlong	arg04, objptr
24f7c     04 E4 05 F1 | 	add	objptr, #4
24f80     F2 1A 02 FB | 	rdlong	arg05, objptr
24f84     45 E4 85 F1 | 	sub	objptr, #69
24f88     13 17 02 F6 | 	mov	arg03, local01
24f8c     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
24f90     04 E4 05 F1 | 	add	objptr, #4
24f94     F2 12 02 FB | 	rdlong	arg01, objptr
24f98     10 00 00 FF 
24f9c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
24fa0     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
24fa4     3A E4 05 F1 | 	add	objptr, #58
24fa8     F2 1A C2 FA | 	rdbyte	arg05, objptr
24fac     0D 17 02 FD | 	qmul	arg03, arg05
24fb0                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
24fb0     10 00 00 FF 
24fb4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
24fb8     02 E4 85 F1 | 	sub	objptr, #2
24fbc     F2 28 E2 FA | 	rdword	local02, objptr
24fc0     01 28 46 F0 | 	shr	local02, #1
24fc4     13 15 02 F6 | 	mov	arg02, local01
24fc8     01 16 06 F6 | 	mov	arg03, #1
24fcc     00 18 06 F6 | 	mov	arg04, #0
24fd0     01 1A 06 F6 | 	mov	arg05, #1
24fd4     0B 00 00 FF 
24fd8     90 E4 05 F1 | 	add	objptr, ##5776
24fdc     18 26 62 FD | 	getqx	local01
24fe0     14 27 02 F1 | 	add	local01, local02
24fe4     13 13 02 F1 | 	add	arg01, local01
24fe8     30 0E B0 FD | 	call	#_psram_spin2_fill
24fec                 | ' 
24fec                 | ' cursor_x+=2
24fec     0B 00 00 FF 
24ff0     90 E4 85 F1 | 	sub	objptr, ##5776
24ff4     F2 28 E2 FA | 	rdword	local02, objptr
24ff8     02 28 06 F1 | 	add	local02, #2
24ffc     F2 28 52 FC | 	wrword	local02, objptr
25000                 | ' if cursor_x>=256
25000     F2 28 E2 FA | 	rdword	local02, objptr
25004     3C E4 85 F1 | 	sub	objptr, #60
25008     00 29 56 F2 | 	cmps	local02, #256 wc
2500c     64 00 90 CD |  if_b	jmp	#LR__2851
25010                 | '   cursor_x:=0
25010     3C E4 05 F1 | 	add	objptr, #60
25014     F2 00 58 FC | 	wrword	#0, objptr
25018                 | '   cursor_y+=1
25018     02 E4 05 F1 | 	add	objptr, #2
2501c     F2 28 C2 FA | 	rdbyte	local02, objptr
25020     01 28 06 F1 | 	add	local02, #1
25024     F2 28 42 FC | 	wrbyte	local02, objptr
25028                 | '   if cursor_y>st_lines-1
25028     C3 E4 05 F1 | 	add	objptr, #195
2502c     F2 28 02 FB | 	rdlong	local02, objptr
25030     01 28 86 F1 | 	sub	local02, #1
25034     C3 E4 85 F1 | 	sub	objptr, #195
25038     F2 16 C2 FA | 	rdbyte	arg03, objptr
2503c     3E E4 85 F1 | 	sub	objptr, #62
25040     14 17 5A F2 | 	cmps	arg03, local02 wcz
25044     2C 00 90 ED |  if_be	jmp	#LR__2850
25048                 | '     scrollup2()
25048     00 12 06 F6 | 	mov	arg01, #0
2504c     01 00 00 FF 
25050     58 14 06 F6 | 	mov	arg02, ##600
25054     10 16 06 F6 | 	mov	arg03, #16
25058     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
2505c                 | '     cursor_y:=st_lines-1
2505c     01 E5 05 F1 | 	add	objptr, #257
25060     F2 28 02 FB | 	rdlong	local02, objptr
25064     01 28 86 F1 | 	sub	local02, #1
25068     C3 E4 85 F1 | 	sub	objptr, #195
2506c     F2 28 42 FC | 	wrbyte	local02, objptr
25070     3E E4 85 F1 | 	sub	objptr, #62
25074                 | LR__2850
25074                 | LR__2851
25074                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
25074     3C E4 05 F1 | 	add	objptr, #60
25078     F2 14 E2 FA | 	rdword	arg02, objptr
2507c     02 14 66 F0 | 	shl	arg02, #2
25080     02 E4 05 F1 | 	add	objptr, #2
25084     F2 16 C2 FA | 	rdbyte	arg03, objptr
25088     3E E4 85 F1 | 	sub	objptr, #62
2508c     04 16 66 F0 | 	shl	arg03, #4
25090     04 16 06 F1 | 	add	arg03, #4
25094     11 12 06 F6 | 	mov	arg01, #17
25098     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
2509c     A7 F0 03 F6 | 	mov	ptra, fp
250a0     B2 00 A0 FD | 	call	#popregs_
250a4                 | _hg010b_spin2_putchar2_ret
250a4     2D 00 64 FD | 	ret
250a8                 | 
250a8                 | ' ''--------- Output a string at the cursor position, move the cursor  
250a8                 | ' 
250a8                 | ' pub write(text) | iii,c,ncx,ncy
250a8                 | _hg010b_spin2_write
250a8     04 4A 05 F6 | 	mov	COUNT_, #4
250ac     A8 00 A0 FD | 	call	#pushregs_
250b0     09 27 02 F6 | 	mov	local01, arg01
250b4                 | ' 
250b4                 | ' repeat iii from 0 to strsize(text)-1
250b4     00 28 06 F6 | 	mov	local02, #0
250b8     13 13 02 F6 | 	mov	arg01, local01
250bc     09 2B 02 F6 | 	mov	local03, arg01
250c0     97 06 48 FB | 	callpa	#(@LR__2861-@LR__2860)>>2,fcache_load_ptr_
250c4                 | LR__2860
250c4     15 FB C9 FA | 	rdbyte	result1, local03 wz
250c8     01 2A 06 51 |  if_ne	add	local03, #1
250cc     F4 FF 9F 5D |  if_ne	jmp	#LR__2860
250d0                 | LR__2861
250d0     09 2B 82 F1 | 	sub	local03, arg01
250d4     01 2A 86 F1 | 	sub	local03, #1
250d8     00 2A 56 F2 | 	cmps	local03, #0 wc
250dc     01 2C 86 F6 | 	negc	local04, #1
250e0     16 2B 02 F1 | 	add	local03, local04
250e4                 | LR__2862
250e4                 | '   putchar2(byte[text+iii])
250e4     13 13 02 F6 | 	mov	arg01, local01
250e8     14 13 02 F1 | 	add	arg01, local02
250ec     09 13 C2 FA | 	rdbyte	arg01, arg01
250f0     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
250f4     16 29 02 F1 | 	add	local02, local04
250f8     15 29 0A F2 | 	cmp	local02, local03 wz
250fc     E4 FF 9F 5D |  if_ne	jmp	#LR__2862
25100     A7 F0 03 F6 | 	mov	ptra, fp
25104     B2 00 A0 FD | 	call	#popregs_
25108                 | _hg010b_spin2_write_ret
25108     2D 00 64 FD | 	ret
2510c                 | 
2510c                 | '    
2510c                 | ' ' a version for text scrolling in Basic shifted 4 lines down
2510c                 | ' 
2510c                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
2510c                 | _hg010b_spin2_scrollup2
2510c     03 4A 05 F6 | 	mov	COUNT_, #3
25110     A8 00 A0 FD | 	call	#pushregs_
25114                 | ' 	
25114                 | ' repeat i from 4 to 579 
25114     04 26 06 F6 | 	mov	local01, #4
25118                 | LR__2870
25118     F9 E4 05 F1 | 	add	objptr, #249
2511c     F2 1A 02 FB | 	rdlong	arg05, objptr
25120     1C E4 85 F1 | 	sub	objptr, #28
25124     F2 14 02 FB | 	rdlong	arg02, objptr
25128     13 19 02 F6 | 	mov	arg04, local01
2512c     10 18 06 F1 | 	add	arg04, #16
25130     02 18 66 F0 | 	shl	arg04, #2
25134     14 E4 05 F1 | 	add	objptr, #20
25138     F2 16 02 FB | 	rdlong	arg03, objptr
2513c     0B 19 02 FD | 	qmul	arg04, arg03
25140                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
25140     F6 03 00 FF 
25144     00 12 06 F6 | 	mov	arg01, ##519168
25148     0D 13 82 F1 | 	sub	arg01, arg05
2514c     02 16 66 F0 | 	shl	arg03, #2
25150     0A 00 00 FF 
25154     DB E5 05 F1 | 	add	objptr, ##5595
25158     18 1A 62 FD | 	getqx	arg05
2515c     0D 15 02 F1 | 	add	arg02, arg05
25160     80 0B B0 FD | 	call	#_psram_spin2_read1
25164     0A 00 00 FF 
25168     D3 E5 85 F1 | 	sub	objptr, ##5587
2516c     F2 1A 02 FB | 	rdlong	arg05, objptr
25170     1C E4 85 F1 | 	sub	objptr, #28
25174     F2 14 02 FB | 	rdlong	arg02, objptr
25178     13 19 02 F6 | 	mov	arg04, local01
2517c     02 18 66 F0 | 	shl	arg04, #2
25180     14 E4 05 F1 | 	add	objptr, #20
25184     F2 16 02 FB | 	rdlong	arg03, objptr
25188     0B 19 02 FD | 	qmul	arg04, arg03
2518c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
2518c     F6 03 00 FF 
25190     00 12 06 F6 | 	mov	arg01, ##519168
25194     0D 13 82 F1 | 	sub	arg01, arg05
25198     02 16 66 F0 | 	shl	arg03, #2
2519c     0A 00 00 FF 
251a0     DB E5 05 F1 | 	add	objptr, ##5595
251a4     18 1A 62 FD | 	getqx	arg05
251a8     0D 15 02 F1 | 	add	arg02, arg05
251ac     D0 0B B0 FD | 	call	#_psram_spin2_write
251b0     0B 00 00 FF 
251b4     CC E4 85 F1 | 	sub	objptr, ##5836
251b8     01 26 06 F1 | 	add	local01, #1
251bc     01 00 00 FF 
251c0     44 26 16 F2 | 	cmp	local01, ##580 wc
251c4     50 FF 9F CD |  if_b	jmp	#LR__2870
251c8                 | ' 
251c8                 | ' repeat i from 580 to 599
251c8     01 00 00 FF 
251cc     44 26 06 F6 | 	mov	local01, ##580
251d0                 | LR__2871
251d0                 | '    fastline(0,1023,i,write_background)   
251d0     45 E4 05 F1 | 	add	objptr, #69
251d4     F2 18 02 FB | 	rdlong	arg04, objptr
251d8     45 E4 85 F1 | 	sub	objptr, #69
251dc     00 12 06 F6 | 	mov	arg01, #0
251e0     09 14 CE F9 | 	bmask	arg02, #9
251e4     13 17 02 F6 | 	mov	arg03, local01
251e8     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
251ec     01 26 06 F1 | 	add	local01, #1
251f0     01 00 00 FF 
251f4     58 26 16 F2 | 	cmp	local01, ##600 wc
251f8     D4 FF 9F CD |  if_b	jmp	#LR__2871
251fc                 | ' repeat i from 0 to 3
251fc     00 26 06 F6 | 	mov	local01, #0
25200                 | LR__2872
25200                 | '    fastline(0,1023,i,write_background)      
25200     45 E4 05 F1 | 	add	objptr, #69
25204     F2 18 02 FB | 	rdlong	arg04, objptr
25208     45 E4 85 F1 | 	sub	objptr, #69
2520c     00 12 06 F6 | 	mov	arg01, #0
25210     09 14 CE F9 | 	bmask	arg02, #9
25214     13 17 02 F6 | 	mov	arg03, local01
25218     90 EF BF FD | 	call	#_hg010b_spin2_fastline
2521c     01 26 06 F1 | 	add	local01, #1
25220     04 26 56 F2 | 	cmps	local01, #4 wc
25224     D8 FF 9F CD |  if_b	jmp	#LR__2872
25228                 | ' 
25228                 | ' repeat i from 0 to 35
25228     00 26 06 F6 | 	mov	local01, #0
2522c                 | LR__2873
2522c     13 1B 02 F6 | 	mov	arg05, local01
25230     01 1A 06 F1 | 	add	arg05, #1
25234     10 00 00 FF 
25238     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
2523c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
25240     0B 1B 02 FD | 	qmul	arg05, arg03
25244                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
25244     F6 03 00 FF 
25248     00 12 06 F6 | 	mov	arg01, ##519168
2524c     F9 E4 05 F1 | 	add	objptr, #249
25250     F2 1A 02 FB | 	rdlong	arg05, objptr
25254     0D 13 82 F1 | 	sub	arg01, arg05
25258     F5 E4 85 F1 | 	sub	objptr, #245
2525c     F2 14 02 FB | 	rdlong	arg02, objptr
25260     10 00 00 FF 
25264     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
25268     0B 00 00 FF 
2526c     C8 E4 05 F1 | 	add	objptr, ##5832
25270     18 1A 62 FD | 	getqx	arg05
25274     0D 15 02 F1 | 	add	arg02, arg05
25278     68 0A B0 FD | 	call	#_psram_spin2_read1
2527c     10 00 00 FF 
25280     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
25284     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
25288     0B 27 02 FD | 	qmul	local01, arg03
2528c                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
2528c     F6 03 00 FF 
25290     00 12 06 F6 | 	mov	arg01, ##519168
25294     0A 00 00 FF 
25298     D3 E5 85 F1 | 	sub	objptr, ##5587
2529c     F2 1A 02 FB | 	rdlong	arg05, objptr
252a0     0D 13 82 F1 | 	sub	arg01, arg05
252a4     F5 E4 85 F1 | 	sub	objptr, #245
252a8     F2 14 02 FB | 	rdlong	arg02, objptr
252ac     10 00 00 FF 
252b0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
252b4     0B 00 00 FF 
252b8     C8 E4 05 F1 | 	add	objptr, ##5832
252bc     18 1A 62 FD | 	getqx	arg05
252c0     0D 15 02 F1 | 	add	arg02, arg05
252c4     B8 0A B0 FD | 	call	#_psram_spin2_write
252c8     0B 00 00 FF 
252cc     CC E4 85 F1 | 	sub	objptr, ##5836
252d0     01 26 06 F1 | 	add	local01, #1
252d4     24 26 56 F2 | 	cmps	local01, #36 wc
252d8     50 FF 9F CD |  if_b	jmp	#LR__2873
252dc                 | ' repeat i from 0 to timings[7]-1
252dc     00 26 06 F6 | 	mov	local01, #0
252e0     10 00 00 FF 
252e4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
252e8     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
252ec     10 00 00 FF 
252f0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
252f4     01 28 86 F1 | 	sub	local02, #1
252f8     00 28 56 F2 | 	cmps	local02, #0 wc
252fc     01 2A 86 F6 | 	negc	local03, #1
25300     15 29 02 F1 | 	add	local02, local03
25304                 | LR__2874
25304                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
25304     04 E4 05 F1 | 	add	objptr, #4
25308     F2 12 02 FB | 	rdlong	arg01, objptr
2530c     10 00 00 FF 
25310     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
25314     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
25318     10 00 00 FF 
2531c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
25320     0D 19 02 F6 | 	mov	arg04, arg05
25324     03 18 66 F0 | 	shl	arg04, #3
25328     0D 19 02 F1 | 	add	arg04, arg05
2532c     02 18 66 F0 | 	shl	arg04, #2
25330     13 19 02 F1 | 	add	arg04, local01
25334     0C 13 02 F1 | 	add	arg01, arg04
25338     20 14 06 F6 | 	mov	arg02, #32
2533c     01 16 06 F6 | 	mov	arg03, #1
25340     00 18 06 F6 | 	mov	arg04, #0
25344     01 1A 06 F6 | 	mov	arg05, #1
25348     0B 00 00 FF 
2534c     C8 E4 05 F1 | 	add	objptr, ##5832
25350     C8 0A B0 FD | 	call	#_psram_spin2_fill
25354     0B 00 00 FF 
25358     CC E4 85 F1 | 	sub	objptr, ##5836
2535c     15 27 02 F1 | 	add	local01, local03
25360     14 27 0A F2 | 	cmp	local01, local02 wz
25364     9C FF 9F 5D |  if_ne	jmp	#LR__2874
25368     A7 F0 03 F6 | 	mov	ptra, fp
2536c     B2 00 A0 FD | 	call	#popregs_
25370                 | _hg010b_spin2_scrollup2_ret
25370     2D 00 64 FD | 	ret
25374                 | 
25374                 | '  
25374                 | ' ''----------- Scroll the screen one line down 
25374                 | ' 
25374                 | ' pub scrolldown(start=0) | i
25374                 | _hg010b_spin2_scrolldown
25374     05 4A 05 F6 | 	mov	COUNT_, #5
25378     A8 00 A0 FD | 	call	#pushregs_
2537c     09 27 02 F6 | 	mov	local01, arg01
25380                 | ' 
25380                 | ' repeat i from 579 to (start*16)+4
25380     01 00 00 FF 
25384     43 28 06 F6 | 	mov	local02, ##579
25388     13 2B 02 F6 | 	mov	local03, local01
2538c     04 2A 66 F0 | 	shl	local03, #4
25390     04 2A 06 F1 | 	add	local03, #4
25394     01 00 00 FF 
25398     43 2A 56 F2 | 	cmps	local03, ##579 wc
2539c     01 2C 86 F6 | 	negc	local04, #1
253a0     16 2F 02 F6 | 	mov	local05, local04
253a4     16 2B 02 F1 | 	add	local03, local04
253a8                 | LR__2880
253a8     F9 E4 05 F1 | 	add	objptr, #249
253ac     F2 2C 02 FB | 	rdlong	local04, objptr
253b0     1C E4 85 F1 | 	sub	objptr, #28
253b4     F2 14 02 FB | 	rdlong	arg02, objptr
253b8     14 1B 02 F6 | 	mov	arg05, local02
253bc     02 1A 66 F0 | 	shl	arg05, #2
253c0     14 E4 05 F1 | 	add	objptr, #20
253c4     F2 16 02 FB | 	rdlong	arg03, objptr
253c8     0B 1B 02 FD | 	qmul	arg05, arg03
253cc                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
253cc     F6 03 00 FF 
253d0     00 12 06 F6 | 	mov	arg01, ##519168
253d4     16 13 82 F1 | 	sub	arg01, local04
253d8     02 16 66 F0 | 	shl	arg03, #2
253dc     0A 00 00 FF 
253e0     DB E5 05 F1 | 	add	objptr, ##5595
253e4     18 2C 62 FD | 	getqx	local04
253e8     16 15 02 F1 | 	add	arg02, local04
253ec     F4 08 B0 FD | 	call	#_psram_spin2_read1
253f0     0A 00 00 FF 
253f4     D3 E5 85 F1 | 	sub	objptr, ##5587
253f8     F2 2C 02 FB | 	rdlong	local04, objptr
253fc     1C E4 85 F1 | 	sub	objptr, #28
25400     F2 14 02 FB | 	rdlong	arg02, objptr
25404     14 1B 02 F6 | 	mov	arg05, local02
25408     10 1A 06 F1 | 	add	arg05, #16
2540c     02 1A 66 F0 | 	shl	arg05, #2
25410     14 E4 05 F1 | 	add	objptr, #20
25414     F2 16 02 FB | 	rdlong	arg03, objptr
25418     0B 1B 02 FD | 	qmul	arg05, arg03
2541c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
2541c     F6 03 00 FF 
25420     00 12 06 F6 | 	mov	arg01, ##519168
25424     16 13 82 F1 | 	sub	arg01, local04
25428     02 16 66 F0 | 	shl	arg03, #2
2542c     0A 00 00 FF 
25430     DB E5 05 F1 | 	add	objptr, ##5595
25434     18 2C 62 FD | 	getqx	local04
25438     16 15 02 F1 | 	add	arg02, local04
2543c     40 09 B0 FD | 	call	#_psram_spin2_write
25440     0B 00 00 FF 
25444     CC E4 85 F1 | 	sub	objptr, ##5836
25448     17 29 02 F1 | 	add	local02, local05
2544c     15 29 0A F2 | 	cmp	local02, local03 wz
25450     54 FF 9F 5D |  if_ne	jmp	#LR__2880
25454                 | ' 
25454                 | ' repeat i from (start*16)+4 to (start*16)+19
25454     13 29 02 F6 | 	mov	local02, local01
25458     04 28 66 F0 | 	shl	local02, #4
2545c     04 28 06 F1 | 	add	local02, #4
25460     13 2F 02 F6 | 	mov	local05, local01
25464     04 2E 66 F0 | 	shl	local05, #4
25468     13 2E 06 F1 | 	add	local05, #19
2546c     13 2D 02 F6 | 	mov	local04, local01
25470     04 2C 66 F0 | 	shl	local04, #4
25474     04 2C 06 F1 | 	add	local04, #4
25478     16 2F 52 F2 | 	cmps	local05, local04 wc
2547c     01 2C 86 F6 | 	negc	local04, #1
25480     16 2B 02 F6 | 	mov	local03, local04
25484     16 2F 02 F1 | 	add	local05, local04
25488                 | LR__2881
25488                 | '    fastline(0,1023,i,write_background)    
25488     45 E4 05 F1 | 	add	objptr, #69
2548c     F2 18 02 FB | 	rdlong	arg04, objptr
25490     45 E4 85 F1 | 	sub	objptr, #69
25494     00 12 06 F6 | 	mov	arg01, #0
25498     09 14 CE F9 | 	bmask	arg02, #9
2549c     14 17 02 F6 | 	mov	arg03, local02
254a0     08 ED BF FD | 	call	#_hg010b_spin2_fastline
254a4     15 29 02 F1 | 	add	local02, local03
254a8     17 29 0A F2 | 	cmp	local02, local05 wz
254ac     D8 FF 9F 5D |  if_ne	jmp	#LR__2881
254b0                 | '    
254b0                 | ' repeat i from 35 to start
254b0     23 28 06 F6 | 	mov	local02, #35
254b4     23 26 56 F2 | 	cmps	local01, #35 wc
254b8     01 2C 86 F6 | 	negc	local04, #1
254bc     13 2F 02 F6 | 	mov	local05, local01
254c0     16 2F 02 F1 | 	add	local05, local04
254c4                 | LR__2882
254c4                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
254c4     F6 03 00 FF 
254c8     00 12 06 F6 | 	mov	arg01, ##519168
254cc     F9 E4 05 F1 | 	add	objptr, #249
254d0     F2 2A 02 FB | 	rdlong	local03, objptr
254d4     15 13 82 F1 | 	sub	arg01, local03
254d8     F5 E4 85 F1 | 	sub	objptr, #245
254dc     F2 14 02 FB | 	rdlong	arg02, objptr
254e0     14 2B 02 F6 | 	mov	local03, local02
254e4     07 2A 66 F0 | 	shl	local03, #7
254e8     15 15 02 F1 | 	add	arg02, local03
254ec     80 16 06 F6 | 	mov	arg03, #128
254f0     0B 00 00 FF 
254f4     C8 E4 05 F1 | 	add	objptr, ##5832
254f8     E8 07 B0 FD | 	call	#_psram_spin2_read1
254fc                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
254fc     F6 03 00 FF 
25500     00 12 06 F6 | 	mov	arg01, ##519168
25504     0A 00 00 FF 
25508     D3 E5 85 F1 | 	sub	objptr, ##5587
2550c     F2 2A 02 FB | 	rdlong	local03, objptr
25510     15 13 82 F1 | 	sub	arg01, local03
25514     F5 E4 85 F1 | 	sub	objptr, #245
25518     F2 14 02 FB | 	rdlong	arg02, objptr
2551c     14 2B 02 F6 | 	mov	local03, local02
25520     01 2A 06 F1 | 	add	local03, #1
25524     07 2A 66 F0 | 	shl	local03, #7
25528     15 15 02 F1 | 	add	arg02, local03
2552c     80 16 06 F6 | 	mov	arg03, #128
25530     0B 00 00 FF 
25534     C8 E4 05 F1 | 	add	objptr, ##5832
25538     44 08 B0 FD | 	call	#_psram_spin2_write
2553c     0B 00 00 FF 
25540     CC E4 85 F1 | 	sub	objptr, ##5836
25544     16 29 02 F1 | 	add	local02, local04
25548     17 29 0A F2 | 	cmp	local02, local05 wz
2554c     74 FF 9F 5D |  if_ne	jmp	#LR__2882
25550                 | ' repeat i from 0 to 127
25550     00 28 06 F6 | 	mov	local02, #0
25554                 | LR__2883
25554                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
25554     04 E4 05 F1 | 	add	objptr, #4
25558     F2 12 02 FB | 	rdlong	arg01, objptr
2555c     13 2F 02 F6 | 	mov	local05, local01
25560     07 2E 66 F0 | 	shl	local05, #7
25564     17 13 02 F1 | 	add	arg01, local05
25568     14 13 02 F1 | 	add	arg01, local02
2556c     20 14 06 F6 | 	mov	arg02, #32
25570     01 16 06 F6 | 	mov	arg03, #1
25574     00 18 06 F6 | 	mov	arg04, #0
25578     01 1A 06 F6 | 	mov	arg05, #1
2557c     0B 00 00 FF 
25580     C8 E4 05 F1 | 	add	objptr, ##5832
25584     94 08 B0 FD | 	call	#_psram_spin2_fill
25588     0B 00 00 FF 
2558c     CC E4 85 F1 | 	sub	objptr, ##5836
25590     01 28 06 F1 | 	add	local02, #1
25594     80 28 56 F2 | 	cmps	local02, #128 wc
25598     B8 FF 9F CD |  if_b	jmp	#LR__2883
2559c     A7 F0 03 F6 | 	mov	ptra, fp
255a0     B2 00 A0 FD | 	call	#popregs_
255a4                 | _hg010b_spin2_scrolldown_ret
255a4     2D 00 64 FD | 	ret
255a8                 | 
255a8                 | ' 
255a8                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
255a8                 | ' 
255a8                 | ' pub crlf()
255a8                 | _hg010b_spin2_crlf
255a8                 | ' 
255a8                 | ' cursor_x:=leading_spaces*2
255a8     01 00 00 FF 
255ac     B6 E4 05 F1 | 	add	objptr, ##694
255b0     F2 16 02 FB | 	rdlong	arg03, objptr
255b4     01 16 66 F0 | 	shl	arg03, #1
255b8     01 00 00 FF 
255bc     7A E4 85 F1 | 	sub	objptr, ##634
255c0     F2 16 52 FC | 	wrword	arg03, objptr
255c4                 | ' cursor_y+=1
255c4     02 E4 05 F1 | 	add	objptr, #2
255c8     F2 16 C2 FA | 	rdbyte	arg03, objptr
255cc     01 16 06 F1 | 	add	arg03, #1
255d0     F2 16 42 FC | 	wrbyte	arg03, objptr
255d4                 | ' if cursor_y>st_lines-1
255d4     C3 E4 05 F1 | 	add	objptr, #195
255d8     F2 16 02 FB | 	rdlong	arg03, objptr
255dc     01 16 86 F1 | 	sub	arg03, #1
255e0     C3 E4 85 F1 | 	sub	objptr, #195
255e4     F2 14 C2 FA | 	rdbyte	arg02, objptr
255e8     3E E4 85 F1 | 	sub	objptr, #62
255ec     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
255f0     2C 00 90 ED |  if_be	jmp	#LR__2890
255f4                 | '   scrollup2()
255f4     00 12 06 F6 | 	mov	arg01, #0
255f8     01 00 00 FF 
255fc     58 14 06 F6 | 	mov	arg02, ##600
25600     10 16 06 F6 | 	mov	arg03, #16
25604     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
25608                 | '   cursor_y:=st_lines-1
25608     01 E5 05 F1 | 	add	objptr, #257
2560c     F2 16 02 FB | 	rdlong	arg03, objptr
25610     01 16 86 F1 | 	sub	arg03, #1
25614     C3 E4 85 F1 | 	sub	objptr, #195
25618     F2 16 42 FC | 	wrbyte	arg03, objptr
2561c     3E E4 85 F1 | 	sub	objptr, #62
25620                 | LR__2890
25620                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
25620     3C E4 05 F1 | 	add	objptr, #60
25624     F2 14 E2 FA | 	rdword	arg02, objptr
25628     02 14 66 F0 | 	shl	arg02, #2
2562c     02 E4 05 F1 | 	add	objptr, #2
25630     F2 16 C2 FA | 	rdbyte	arg03, objptr
25634     3E E4 85 F1 | 	sub	objptr, #62
25638     04 16 66 F0 | 	shl	arg03, #4
2563c     04 16 06 F1 | 	add	arg03, #4
25640     11 12 06 F6 | 	mov	arg01, #17
25644     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
25648                 | _hg010b_spin2_crlf_ret
25648     2D 00 64 FD | 	ret
2564c                 | 
2564c                 | ' 
2564c                 | ' 
2564c                 | ' '*************************************************************************
2564c                 | ' '                                                                        *
2564c                 | ' '  Conversions                                                           *
2564c                 | ' '                                                                        *
2564c                 | ' '*************************************************************************
2564c                 | ' 
2564c                 | ' ''---------- Convert a integer to dec string, return a pointer
2564c                 | ' 
2564c                 | ' pub inttostr(i):result |q,pos,k,j
2564c                 | _hg010b_spin2_inttostr
2564c     03 4A 05 F6 | 	mov	COUNT_, #3
25650     A8 00 A0 FD | 	call	#pushregs_
25654     09 27 0A F6 | 	mov	local01, arg01 wz
25658                 | ' 
25658                 | ' j:=i
25658                 | ' pos:=10
25658     0A 28 06 F6 | 	mov	local02, #10
2565c                 | ' k:=0
2565c     00 2A 06 F6 | 	mov	local03, #0
25660                 | ' 
25660                 | ' if (j==0)
25660     18 00 90 5D |  if_ne	jmp	#LR__2900
25664                 | '   n_string[0]:=48
25664     4D E4 05 F1 | 	add	objptr, #77
25668     F2 60 48 FC | 	wrbyte	#48, objptr
2566c                 | '   n_string[1]:=0
2566c     01 E4 05 F1 | 	add	objptr, #1
25670     F2 00 48 FC | 	wrbyte	#0, objptr
25674     4E E4 85 F1 | 	sub	objptr, #78
25678     C4 00 90 FD | 	jmp	#LR__2907
2567c                 | LR__2900
2567c                 | ' 
2567c                 | ' else
2567c                 | '   if (j<0)
2567c     13 27 52 F6 | 	abs	local01, local01 wc
25680                 | '     j:=0-j
25680                 | '     k:=45
25680     2D 2A 06 C6 |  if_b	mov	local03, #45
25684                 | ' 
25684                 | '   n_string[11]:=0
25684     58 E4 05 F1 | 	add	objptr, #88
25688     F2 00 48 FC | 	wrbyte	#0, objptr
2568c     58 E4 85 F1 | 	sub	objptr, #88
25690     97 24 48 FB | 	callpa	#(@LR__2902-@LR__2901)>>2,fcache_load_ptr_
25694                 | '   repeat while (pos>-1)
25694                 | LR__2901
25694     00 28 56 F2 | 	cmps	local02, #0 wc
25698     40 00 90 CD |  if_b	jmp	#LR__2903
2569c     13 FB 51 F6 | 	abs	result1, local01 wc
256a0     0A FA 15 FD | 	qdiv	result1, #10
256a4                 | '     q:=j//10
256a4     19 FA 61 FD | 	getqy	result1
256a8     FD FA 81 F6 | 	negc	result1, result1
256ac     13 27 52 F6 | 	abs	local01, local01 wc
256b0     0A 26 16 FD | 	qdiv	local01, #10
256b4                 | '     q:=48+q
256b4     30 FA 05 F1 | 	add	result1, #48
256b8                 | '     n_string[pos]:=q
256b8     14 27 02 F6 | 	mov	local01, local02
256bc     4D E4 05 F1 | 	add	objptr, #77
256c0     F2 26 02 F1 | 	add	local01, objptr
256c4     13 FB 41 FC | 	wrbyte	result1, local01
256c8                 | '     j:=j/10
256c8     4D E4 85 F1 | 	sub	objptr, #77
256cc                 | '     pos-=1
256cc     01 28 86 F1 | 	sub	local02, #1
256d0     18 26 62 FD | 	getqx	local01
256d4     13 27 82 F6 | 	negc	local01, local01
256d8     B8 FF 9F FD | 	jmp	#LR__2901
256dc                 | LR__2902
256dc                 | LR__2903
256dc                 | '   repeat while n_string[0]==48
256dc                 | LR__2904
256dc     4D E4 05 F1 | 	add	objptr, #77
256e0     F2 16 C2 FA | 	rdbyte	arg03, objptr
256e4     4D E4 85 F1 | 	sub	objptr, #77
256e8     30 16 0E F2 | 	cmp	arg03, #48 wz
256ec     20 00 90 5D |  if_ne	jmp	#LR__2905
256f0                 | '     bytemove(@n_string,@n_string+1,12)
256f0     4D E4 05 F1 | 	add	objptr, #77
256f4     F2 12 02 F6 | 	mov	arg01, objptr
256f8     F2 14 02 F6 | 	mov	arg02, objptr
256fc     4D E4 85 F1 | 	sub	objptr, #77
25700     01 14 06 F1 | 	add	arg02, #1
25704     0C 16 06 F6 | 	mov	arg03, #12
25708     80 11 B0 FD | 	call	#__system____builtin_memmove
2570c     CC FF 9F FD | 	jmp	#LR__2904
25710                 | LR__2905
25710                 | ' 
25710                 | '   if k==45
25710     2D 2A 0E F2 | 	cmp	local03, #45 wz
25714     28 00 90 5D |  if_ne	jmp	#LR__2906
25718                 | '      bytemove(@n_string+1,@n_string,12)
25718     4D E4 05 F1 | 	add	objptr, #77
2571c     F2 12 02 F6 | 	mov	arg01, objptr
25720     01 12 06 F1 | 	add	arg01, #1
25724     F2 14 02 F6 | 	mov	arg02, objptr
25728     4D E4 85 F1 | 	sub	objptr, #77
2572c     0C 16 06 F6 | 	mov	arg03, #12
25730     58 11 B0 FD | 	call	#__system____builtin_memmove
25734                 | '      n_string[0]:=k
25734     4D E4 05 F1 | 	add	objptr, #77
25738     F2 2A 42 FC | 	wrbyte	local03, objptr
2573c     4D E4 85 F1 | 	sub	objptr, #77
25740                 | LR__2906
25740                 | LR__2907
25740                 | ' 
25740                 | ' q:=@n_string
25740     4D E4 05 F1 | 	add	objptr, #77
25744     F2 FA 01 F6 | 	mov	result1, objptr
25748     4D E4 85 F1 | 	sub	objptr, #77
2574c                 | ' return q
2574c     A7 F0 03 F6 | 	mov	ptra, fp
25750     B2 00 A0 FD | 	call	#popregs_
25754                 | _hg010b_spin2_inttostr_ret
25754     2D 00 64 FD | 	ret
25758                 | 
25758                 | ' 
25758                 | ' '**********************************************************************************
25758                 | ' '
25758                 | ' '        Blitting
25758                 | ' '
25758                 | ' '**********************************************************************************
25758                 | ' 
25758                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
25758                 | _hg010b_spin2_blit
25758     18 4A 05 F6 | 	mov	COUNT_, #24
2575c     A8 00 A0 FD | 	call	#pushregs_
25760     09 27 02 F6 | 	mov	local01, arg01
25764     0A 29 02 F6 | 	mov	local02, arg02
25768     0B 2B 02 F6 | 	mov	local03, arg03
2576c     0C 2D 02 F6 | 	mov	local04, arg04
25770     0D 2F 02 F6 | 	mov	local05, arg05
25774     0E 31 02 F6 | 	mov	local06, arg06
25778     0F 33 02 F6 | 	mov	local07, arg07
2577c     10 35 02 F6 | 	mov	local08, arg08
25780     11 37 02 F6 | 	mov	local09, arg09
25784     12 39 02 F6 | 	mov	local10, arg10
25788                 | ' 
25788                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
25788     00 04 00 FF 
2578c     00 26 56 F2 | 	cmps	local01, ##524288 wc
25790     00 04 00 3F 
25794     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
25798     7C 01 90 CD |  if_b	jmp	#LR__2914
2579c     16 29 5A F2 | 	cmps	local02, local04 wcz
257a0     14 3B 02 16 |  if_a	mov	local11, local02
257a4     16 29 02 16 |  if_a	mov	local02, local04
257a8     1D 2D 02 16 |  if_a	mov	local04, local11
257ac     17 2B 5A F2 | 	cmps	local03, local05 wcz
257b0     15 3B 02 16 |  if_a	mov	local11, local03
257b4     17 2B 02 16 |  if_a	mov	local03, local05
257b8     18 2B 02 FD | 	qmul	local03, local06
257bc                 | '   if x1a>x2a
257bc                 | '     x1a,x2a:=x2a,x1a
257bc                 | '   if y1a>y2a
257bc                 | '     y1a,y2a:=y2a,y1a  
257bc     1D 2F 02 16 |  if_a	mov	local05, local11
257c0                 | ' 
257c0                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
257c0     19 3D 02 F6 | 	mov	local12, local07
257c4     14 3D 02 F1 | 	add	local12, local02
257c8     18 3A 62 FD | 	getqx	local11
257cc     1C 37 02 FD | 	qmul	local09, local10
257d0     1D 3D 02 F1 | 	add	local12, local11
257d4     13 3F 02 F6 | 	mov	local13, local01
257d8     1A 3F 02 F1 | 	add	local13, local08
257dc     18 3A 62 FD | 	getqx	local11
257e0     1D 3F 02 F1 | 	add	local13, local11
257e4     1F 3D 5A F2 | 	cmps	local12, local13 wcz
257e8     98 00 90 ED |  if_be	jmp	#LR__2911
257ec                 | '     repeat y from y1a to y2a
257ec     15 41 02 F6 | 	mov	local14, local03
257f0     15 2F 52 F2 | 	cmps	local05, local03 wc
257f4     01 42 86 F6 | 	negc	local15, #1
257f8     17 45 02 F6 | 	mov	local16, local05
257fc     21 45 02 F1 | 	add	local16, local15
25800     0B 00 00 FF 
25804     CC E4 05 F1 | 	add	objptr, ##5836
25808                 | LR__2910
25808     18 41 02 FD | 	qmul	local14, local06
2580c                 | '   '    writeln(string("I am here"))
2580c                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
2580c     13 15 02 F6 | 	mov	arg02, local01
25810     16 17 02 F6 | 	mov	arg03, local04
25814     14 17 82 F1 | 	sub	arg03, local02
25818     01 16 06 F1 | 	add	arg03, #1
2581c     F6 03 00 FF 
25820     00 12 06 F6 | 	mov	arg01, ##519168
25824     18 3E 62 FD | 	getqx	local13
25828     1F 15 02 F1 | 	add	arg02, local13
2582c     14 15 02 F1 | 	add	arg02, local02
25830     B0 04 B0 FD | 	call	#_psram_spin2_read1
25834     1B 3F 02 F6 | 	mov	local13, local09
25838     15 3F 82 F1 | 	sub	local13, local03
2583c     20 3F 02 F1 | 	add	local13, local14
25840     1C 3F 02 FD | 	qmul	local13, local10
25844                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
25844     19 15 02 F6 | 	mov	arg02, local07
25848     16 17 02 F6 | 	mov	arg03, local04
2584c     14 17 82 F1 | 	sub	arg03, local02
25850     01 16 06 F1 | 	add	arg03, #1
25854     F6 03 00 FF 
25858     00 12 06 F6 | 	mov	arg01, ##519168
2585c     18 3E 62 FD | 	getqx	local13
25860     1F 15 02 F1 | 	add	arg02, local13
25864     1A 15 02 F1 | 	add	arg02, local08
25868     14 05 B0 FD | 	call	#_psram_spin2_write
2586c     21 41 02 F1 | 	add	local14, local15
25870     22 41 0A F2 | 	cmp	local14, local16 wz
25874     90 FF 9F 5D |  if_ne	jmp	#LR__2910
25878     0B 00 00 FF 
2587c     CC E4 85 F1 | 	sub	objptr, ##5836
25880     94 00 90 FD | 	jmp	#LR__2913
25884                 | LR__2911
25884                 | '   else
25884                 | '     repeat y from y2a to y1a
25884     17 41 02 F6 | 	mov	local14, local05
25888     17 2B 52 F2 | 	cmps	local03, local05 wc
2588c     01 46 86 F6 | 	negc	local17, #1
25890     15 49 02 F6 | 	mov	local18, local03
25894     23 49 02 F1 | 	add	local18, local17
25898     0B 00 00 FF 
2589c     CC E4 05 F1 | 	add	objptr, ##5836
258a0                 | LR__2912
258a0     18 41 02 FD | 	qmul	local14, local06
258a4                 | '  '     writeln(string("I am there"))
258a4                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
258a4     13 15 02 F6 | 	mov	arg02, local01
258a8     16 17 02 F6 | 	mov	arg03, local04
258ac     14 17 82 F1 | 	sub	arg03, local02
258b0     01 16 06 F1 | 	add	arg03, #1
258b4     F6 03 00 FF 
258b8     00 12 06 F6 | 	mov	arg01, ##519168
258bc     18 44 62 FD | 	getqx	local16
258c0     22 15 02 F1 | 	add	arg02, local16
258c4     14 15 02 F1 | 	add	arg02, local02
258c8     18 04 B0 FD | 	call	#_psram_spin2_read1
258cc     1B 45 02 F6 | 	mov	local16, local09
258d0     15 45 82 F1 | 	sub	local16, local03
258d4     20 45 02 F1 | 	add	local16, local14
258d8     1C 45 02 FD | 	qmul	local16, local10
258dc                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
258dc     19 15 02 F6 | 	mov	arg02, local07
258e0     16 17 02 F6 | 	mov	arg03, local04
258e4     14 17 82 F1 | 	sub	arg03, local02
258e8     01 16 06 F1 | 	add	arg03, #1
258ec     F6 03 00 FF 
258f0     00 12 06 F6 | 	mov	arg01, ##519168
258f4     18 44 62 FD | 	getqx	local16
258f8     22 15 02 F1 | 	add	arg02, local16
258fc     1A 15 02 F1 | 	add	arg02, local08
25900     7C 04 B0 FD | 	call	#_psram_spin2_write
25904     23 41 02 F1 | 	add	local14, local17
25908     24 41 0A F2 | 	cmp	local14, local18 wz
2590c     90 FF 9F 5D |  if_ne	jmp	#LR__2912
25910     0B 00 00 FF 
25914     CC E4 85 F1 | 	sub	objptr, ##5836
25918                 | LR__2913
25918                 | LR__2914
25918                 | '     
25918                 | ' if ((f>=$80000) && (t<$80000)) 
25918     00 04 00 FF 
2591c     00 26 56 F2 | 	cmps	local01, ##524288 wc
25920     80 00 90 CD |  if_b	jmp	#LR__2916
25924     00 04 00 FF 
25928     00 32 56 F2 | 	cmps	local07, ##524288 wc
2592c     74 00 90 3D |  if_ae	jmp	#LR__2916
25930                 | '   repeat y from y1a to y2a
25930     15 41 02 F6 | 	mov	local14, local03
25934     15 2F 52 F2 | 	cmps	local05, local03 wc
25938     01 4A 86 F6 | 	negc	local19, #1
2593c     17 4D 02 F6 | 	mov	local20, local05
25940     25 4D 02 F1 | 	add	local20, local19
25944     0B 00 00 FF 
25948     CC E4 05 F1 | 	add	objptr, ##5836
2594c                 | LR__2915
2594c     1B 49 02 F6 | 	mov	local18, local09
25950     15 49 82 F1 | 	sub	local18, local03
25954     20 49 02 F1 | 	add	local18, local14
25958     1C 49 02 FD | 	qmul	local18, local10
2595c                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
2595c     19 13 02 F6 | 	mov	arg01, local07
25960     18 48 62 FD | 	getqx	local18
25964     18 41 02 FD | 	qmul	local14, local06
25968     24 13 02 F1 | 	add	arg01, local18
2596c     1A 13 02 F1 | 	add	arg01, local08
25970     13 15 02 F6 | 	mov	arg02, local01
25974     16 17 02 F6 | 	mov	arg03, local04
25978     14 17 82 F1 | 	sub	arg03, local02
2597c     01 16 06 F1 | 	add	arg03, #1
25980     18 48 62 FD | 	getqx	local18
25984     24 15 02 F1 | 	add	arg02, local18
25988     14 15 02 F1 | 	add	arg02, local02
2598c     54 03 B0 FD | 	call	#_psram_spin2_read1
25990     25 41 02 F1 | 	add	local14, local19
25994     26 41 0A F2 | 	cmp	local14, local20 wz
25998     B0 FF 9F 5D |  if_ne	jmp	#LR__2915
2599c     0B 00 00 FF 
259a0     CC E4 85 F1 | 	sub	objptr, ##5836
259a4                 | LR__2916
259a4                 | '     
259a4                 | ' if ((f<$80000) && (t>=$80000)) 
259a4     00 04 00 FF 
259a8     00 26 56 F2 | 	cmps	local01, ##524288 wc
259ac     84 00 90 3D |  if_ae	jmp	#LR__2918
259b0     00 04 00 FF 
259b4     00 32 56 F2 | 	cmps	local07, ##524288 wc
259b8     78 00 90 CD |  if_b	jmp	#LR__2918
259bc                 | '   t:=t & $FFFFFFF
259bc     7C 32 06 F4 | 	bitl	local07, #124
259c0                 | '   repeat y from y1a to y2a
259c0     15 41 02 F6 | 	mov	local14, local03
259c4     15 2F 52 F2 | 	cmps	local05, local03 wc
259c8     01 4E 86 F6 | 	negc	local21, #1
259cc     17 51 02 F6 | 	mov	local22, local05
259d0     27 51 02 F1 | 	add	local22, local21
259d4     0B 00 00 FF 
259d8     CC E4 05 F1 | 	add	objptr, ##5836
259dc                 | LR__2917
259dc     18 41 02 FD | 	qmul	local14, local06
259e0                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
259e0     13 13 02 F6 | 	mov	arg01, local01
259e4     1B 4D 02 F6 | 	mov	local20, local09
259e8     15 4D 82 F1 | 	sub	local20, local03
259ec     20 4D 02 F1 | 	add	local20, local14
259f0     18 4A 62 FD | 	getqx	local19
259f4     1C 4D 02 FD | 	qmul	local20, local10
259f8     25 13 02 F1 | 	add	arg01, local19
259fc     14 13 02 F1 | 	add	arg01, local02
25a00     19 15 02 F6 | 	mov	arg02, local07
25a04     16 17 02 F6 | 	mov	arg03, local04
25a08     14 17 82 F1 | 	sub	arg03, local02
25a0c     01 16 06 F1 | 	add	arg03, #1
25a10     18 4C 62 FD | 	getqx	local20
25a14     26 15 02 F1 | 	add	arg02, local20
25a18     1A 15 02 F1 | 	add	arg02, local08
25a1c     60 03 B0 FD | 	call	#_psram_spin2_write
25a20     27 41 02 F1 | 	add	local14, local21
25a24     28 41 0A F2 | 	cmp	local14, local22 wz
25a28     B0 FF 9F 5D |  if_ne	jmp	#LR__2917
25a2c     0B 00 00 FF 
25a30     CC E4 85 F1 | 	sub	objptr, ##5836
25a34                 | LR__2918
25a34                 | '     
25a34                 | ' if ((f<$80000) && (t<$80000)) 
25a34     00 04 00 FF 
25a38     00 26 56 F2 | 	cmps	local01, ##524288 wc
25a3c     00 04 00 CF 
25a40     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
25a44     64 00 90 3D |  if_ae	jmp	#LR__2920
25a48                 | '   repeat y from y1a to y2a
25a48     15 41 02 F6 | 	mov	local14, local03
25a4c     15 2F 52 F2 | 	cmps	local05, local03 wc
25a50     01 52 86 F6 | 	negc	local23, #1
25a54     17 55 02 F6 | 	mov	local24, local05
25a58     29 55 02 F1 | 	add	local24, local23
25a5c                 | LR__2919
25a5c     18 41 02 FD | 	qmul	local14, local06
25a60                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
25a60     13 13 02 F6 | 	mov	arg01, local01
25a64     1B 51 02 F6 | 	mov	local22, local09
25a68     15 51 82 F1 | 	sub	local22, local03
25a6c     20 51 02 F1 | 	add	local22, local14
25a70     18 4E 62 FD | 	getqx	local21
25a74     1C 51 02 FD | 	qmul	local22, local10
25a78     27 13 02 F1 | 	add	arg01, local21
25a7c     14 13 02 F1 | 	add	arg01, local02
25a80     19 15 02 F6 | 	mov	arg02, local07
25a84     16 17 02 F6 | 	mov	arg03, local04
25a88     14 17 82 F1 | 	sub	arg03, local02
25a8c     01 16 06 F1 | 	add	arg03, #1
25a90     18 50 62 FD | 	getqx	local22
25a94     28 15 02 F1 | 	add	arg02, local22
25a98     1A 15 02 F1 | 	add	arg02, local08
25a9c     EC 0D B0 FD | 	call	#__system____builtin_memmove
25aa0     29 41 02 F1 | 	add	local14, local23
25aa4     2A 41 0A F2 | 	cmp	local14, local24 wz
25aa8     B0 FF 9F 5D |  if_ne	jmp	#LR__2919
25aac                 | LR__2920
25aac     A7 F0 03 F6 | 	mov	ptra, fp
25ab0     B2 00 A0 FD | 	call	#popregs_
25ab4                 | _hg010b_spin2_blit_ret
25ab4     2D 00 64 FD | 	ret
25ab8                 | 
25ab8                 | ' 
25ab8                 | ' '..............................................................................
25ab8                 | ' 
25ab8                 | ' {{
25ab8                 | ' }}
25ab8                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
25ab8                 | _psram_spin2_startx
25ab8     04 4A 05 F6 | 	mov	COUNT_, #4
25abc     A8 00 A0 FD | 	call	#pushregs_
25ac0     09 27 02 F6 | 	mov	local01, arg01
25ac4     0B 29 02 F6 | 	mov	local02, arg03
25ac8     0C 2B 02 F6 | 	mov	local03, arg04
25acc                 | '     stop() ' restart driver if required
25acc     54 01 B0 FD | 	call	#_psram_spin2_stop
25ad0     00 26 0E F2 | 	cmp	local01, #0 wz
25ad4     14 26 06 AB |  if_e	rdlong	local01, #20
25ad8     13 15 52 F6 | 	abs	arg02, local01 wc
25adc     A1 07 00 FF 
25ae0     40 14 16 FD | 	qdiv	arg02, ##1000000
25ae4                 | ' 
25ae4                 | '     ' use current frequency if none specified
25ae4                 | ' 
25ae4                 | '     if freq == 0 
25ae4                 | '         freq := clkfreq 
25ae4                 | ' 
25ae4                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
25ae4                 | ' 
25ae4                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
25ae4                 | '     if burst < 0
25ae4                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
25ae4     18 14 62 FD | 	getqx	arg02
25ae8     0A 19 82 F6 | 	negc	arg04, arg02
25aec     03 18 66 F0 | 	shl	arg04, #3
25af0     84 18 86 F1 | 	sub	arg04, #132
25af4     04 18 46 F0 | 	shr	arg04, #4
25af8     04 18 66 F0 | 	shl	arg04, #4
25afc     00 18 56 F2 | 	cmps	arg04, #0 wc
25b00     0E FA 65 C6 |  if_b	neg	result1, #14
25b04     10 01 90 CD |  if_b	jmp	#LR__2933
25b08                 | ' 
25b08                 | '     ' compute the input delay
25b08                 | ' 
25b08                 | '     if delay <= 0
25b08     01 28 56 F2 | 	cmps	local02, #1 wc
25b0c     10 00 90 3D |  if_ae	jmp	#LR__2930
25b10                 | '         delay := lookupDelay(freq)
25b10     13 13 02 F6 | 	mov	arg01, local01
25b14     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
25b18     FD 28 02 F6 | 	mov	local02, result1
25b1c     04 00 90 FD | 	jmp	#LR__2931
25b20                 | LR__2930
25b20                 | '     else
25b20                 | '         delay <#= $f ' limit to 15
25b20     0F 28 66 F3 | 	fles	local02, #15
25b24                 | LR__2931
25b24                 | ' 
25b24                 | '     ' create our lock
25b24                 | ' 
25b24                 | '     driverlock := LOCKNEW()  
25b24     00 FA 05 F6 | 	mov	result1, #0
25b28     04 FA 61 FD | 	locknew	result1
25b2c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
25b30     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
25b34                 | '     if driverlock == -1
25b34     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25b38     FF FF 7F FF 
25b3c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
25b40                 | '         return ERR_NO_LOCK
25b40     1A FA 65 A6 |  if_e	neg	result1, #26
25b44     D0 00 90 AD |  if_e	jmp	#LR__2933
25b48                 | ' 
25b48                 | '     ' patch in the proper data and HUB addresses to the startup structure
25b48                 | ' 
25b48                 | '     long[@startupData][0]:=clkfreq
25b48     14 26 06 FB | 	rdlong	local01, #20
25b4c     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
25b50     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
25b54                 | ' '    long[@startupData][1]:=$1000_0000
25b54                 | '     long[@startupData][5]:=@deviceData
25b54     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
25b58     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
25b5c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
25b60     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
25b64     14 14 06 F1 | 	add	arg02, #20
25b68     0A 27 62 FC | 	wrlong	local01, arg02
25b6c                 | '     long[@startupData][6]:=@qosData
25b6c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
25b70     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
25b74     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
25b78     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
25b7c     18 14 06 F1 | 	add	arg02, #24
25b80     0A 27 62 FC | 	wrlong	local01, arg02
25b84                 | '     long[@startupData][7]:=$7FF00
25b84     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
25b88     1C 26 06 F1 | 	add	local01, #28
25b8c     FF 03 80 FF 
25b90     13 01 6A FC | 	wrlong	##524032, local01
25b94                 | ' 
25b94                 | '     ' setup some default bank and QoS parameter values
25b94                 | ' 
25b94                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
25b94     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
25b98     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
25b9c     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
25ba0     10 18 66 F0 | 	shl	arg04, #16
25ba4     0C 28 66 F0 | 	shl	local02, #12
25ba8     14 19 42 F5 | 	or	arg04, local02
25bac     18 18 46 F5 | 	or	arg04, #24
25bb0     0C 15 02 F6 | 	mov	arg02, arg04
25bb4     02 16 06 F6 | 	mov	arg03, #2
25bb8     A0 00 A0 FD | 	call	#\builtin_longfill_
25bbc                 | '     longfill(@qosData, $FFFF0000, 8)
25bbc     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
25bc0     07 16 06 F6 | 	mov	arg03, #7
25bc4     28 16 62 FD | 	setq	arg03
25bc8     80 FF FF FF 
25bcc     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
25bd0                 | ' 
25bd0                 | '     ' get the address of the PSRAM memory driver so we can start it
25bd0                 | ' 
25bd0                 | '     driverAddr:= driver.getDriverAddr()
25bd0                 | '     return @driver_start
25bd0     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
25bd4     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
25bd8     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
25bdc                 | ' 
25bdc                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
25bdc                 | ' 
25bdc                 | '     if desiredcog < 0
25bdc     00 2A 56 F2 | 	cmps	local03, #0 wc
25be0                 | '         desiredcog := NEWCOG
25be0     10 2A 06 C6 |  if_b	mov	local03, #16
25be4                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
25be4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
25be8     15 2D 02 F6 | 	mov	local04, local03
25bec     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
25bf0     0A 2D F2 FC | 	coginit	local04, arg02 wc
25bf4     01 2C 66 C6 |  if_b	neg	local04, #1
25bf8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
25bfc     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
25c00                 | '     repeat until long[@startupData] == 0 
25c00     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
25c04                 | LR__2932
25c04     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
25c08     F8 FF 9F 5D |  if_ne	jmp	#LR__2932
25c0c                 | ' 
25c0c                 | '     return drivercog
25c0c     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
25c10     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
25c14     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25c18                 | LR__2933
25c18     A7 F0 03 F6 | 	mov	ptra, fp
25c1c     B2 00 A0 FD | 	call	#popregs_
25c20                 | _psram_spin2_startx_ret
25c20     2D 00 64 FD | 	ret
25c24                 | 
25c24                 | ' 
25c24                 | ' '..............................................................................
25c24                 | ' 
25c24                 | ' {{
25c24                 | ' }}
25c24                 | ' PUB stop() : i
25c24                 | _psram_spin2_stop
25c24     00 00 06 F6 | 	mov	_var01, #0
25c28                 | '     if drivercog <> -1
25c28     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25c2c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
25c30     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25c34     FF FF 7F FF 
25c38     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
25c3c     70 00 90 AD |  if_e	jmp	#LR__2943
25c40                 | '         cogstop(drivercog) ' a rather brutal stop
25c40     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25c44     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
25c48     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25c4c     03 12 62 FD | 	cogstop	arg01
25c50     97 26 48 FB | 	callpa	#(@LR__2942-@LR__2940)>>2,fcache_load_ptr_
25c54                 | '         repeat i from 0 to 7
25c54                 | LR__2940
25c54                 | '             if long[$7FF00][i*3] < 0
25c54     00 FB 01 F6 | 	mov	result1, _var01
25c58     01 FA 65 F0 | 	shl	result1, #1
25c5c     00 FB 01 F1 | 	add	result1, _var01
25c60     02 FA 65 F0 | 	shl	result1, #2
25c64     FF 03 00 FF 
25c68     00 FB 05 F1 | 	add	result1, ##524032
25c6c     FD FA 01 FB | 	rdlong	result1, result1
25c70     00 FA 55 F2 | 	cmps	result1, #0 wc
25c74     1C 00 90 3D |  if_ae	jmp	#LR__2941
25c78                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
25c78     00 FB 01 F6 | 	mov	result1, _var01
25c7c     01 FA 65 F0 | 	shl	result1, #1
25c80     00 FB 01 F1 | 	add	result1, _var01
25c84     02 FA 65 F0 | 	shl	result1, #2
25c88     FF 03 00 FF 
25c8c     00 FB 05 F1 | 	add	result1, ##524032
25c90     FD 20 68 FC | 	wrlong	#16, result1
25c94                 | LR__2941
25c94     01 00 06 F1 | 	add	_var01, #1
25c98     08 00 56 F2 | 	cmps	_var01, #8 wc
25c9c     B4 FF 9F CD |  if_b	jmp	#LR__2940
25ca0                 | LR__2942
25ca0                 | '         drivercog := -1
25ca0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25ca4     FF FF FF FF 
25ca8     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
25cac     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25cb0                 | LR__2943
25cb0                 | '     if driverlock <> -1
25cb0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
25cb4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
25cb8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25cbc     FF FF 7F FF 
25cc0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
25cc4                 | '         LOCKRET(driverlock)
25cc4     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
25cc8     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
25ccc     05 12 62 5D |  if_ne	lockret	arg01
25cd0                 | '         driverlock := -1
25cd0     FF FF FF 5F 
25cd4     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
25cd8     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
25cdc     00 FB 01 F6 | 	mov	result1, _var01
25ce0                 | _psram_spin2_stop_ret
25ce0     2D 00 64 FD | 	ret
25ce4                 | 
25ce4                 | ' 
25ce4                 | ' '..............................................................................
25ce4                 | ' 
25ce4                 | ' {{
25ce4                 | ' }}
25ce4                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
25ce4                 | _psram_spin2_read1
25ce4                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
25ce4                 | '     if drivercog == -1 ' driver must be running
25ce4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25ce8     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
25cec     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25cf0     FF FF 7F FF 
25cf4     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
25cf8                 | '         return ERR_INACTIVE
25cf8     0F FA 65 A6 |  if_e	neg	result1, #15
25cfc     7C 00 90 AD |  if_e	jmp	#LR__2951
25d00                 | '     if count == 0 ' don't even bother reading
25d00     00 16 0E F2 | 	cmp	arg03, #0 wz
25d04                 | '         return 0
25d04     00 FA 05 A6 |  if_e	mov	result1, #0
25d08     70 00 90 AD |  if_e	jmp	#LR__2951
25d0c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
25d0c     00 FA 05 F6 | 	mov	result1, #0
25d10     01 FA 61 FD | 	cogid	result1
25d14     FD 00 02 F6 | 	mov	_var01, result1
25d18     01 00 66 F0 | 	shl	_var01, #1
25d1c     FD 00 02 F1 | 	add	_var01, result1
25d20     02 00 66 F0 | 	shl	_var01, #2
25d24     FF 03 00 FF 
25d28     00 03 06 F6 | 	mov	_var02, ##524032
25d2c     00 03 02 F1 | 	add	_var02, _var01
25d30                 | '     if long[mailbox] < 0
25d30     01 01 02 FB | 	rdlong	_var01, _var02
25d34     00 00 56 F2 | 	cmps	_var01, #0 wc
25d38                 | '         return ERR_MAILBOX_BUSY
25d38     1C FA 65 C6 |  if_b	neg	result1, #28
25d3c     3C 00 90 CD |  if_b	jmp	#LR__2951
25d40                 | '     long[mailbox][2] := count
25d40     08 02 06 F1 | 	add	_var02, #8
25d44     01 17 62 FC | 	wrlong	arg03, _var02
25d48                 | '     long[mailbox][1] := dstHubAddr
25d48     04 02 86 F1 | 	sub	_var02, #4
25d4c     01 13 62 FC | 	wrlong	arg01, _var02
25d50     04 02 86 F1 | 	sub	_var02, #4
25d54                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
25d54     0A 05 02 F6 | 	mov	_var03, arg02
25d58     D9 04 06 F4 | 	bitl	_var03, #217
25d5c     00 00 58 FF 
25d60     00 00 06 F6 | 	mov	_var01, ##-1342177280
25d64     02 01 02 F1 | 	add	_var01, _var03
25d68     01 01 62 FC | 	wrlong	_var01, _var02
25d6c                 | '     repeat
25d6c                 | LR__2950
25d6c                 | '         result := long[mailbox]    
25d6c     01 05 02 FB | 	rdlong	_var03, _var02
25d70     00 04 56 F2 | 	cmps	_var03, #0 wc
25d74     F4 FF 9F CD |  if_b	jmp	#LR__2950
25d78                 | '     while result < 0   
25d78                 | '     return -result                       'return success or error
25d78     02 FB 61 F6 | 	neg	result1, _var03
25d7c                 | LR__2951
25d7c                 | _psram_spin2_read1_ret
25d7c     2D 00 64 FD | 	ret
25d80                 | 
25d80                 | ' 
25d80                 | ' '..............................................................................
25d80                 | ' 
25d80                 | ' {{
25d80                 | ' }}
25d80                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
25d80                 | _psram_spin2_write
25d80                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
25d80                 | '     if drivercog == -1 ' driver must be running
25d80     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25d84     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
25d88     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25d8c     FF FF 7F FF 
25d90     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
25d94                 | '         return ERR_INACTIVE
25d94     0F FA 65 A6 |  if_e	neg	result1, #15
25d98     7C 00 90 AD |  if_e	jmp	#LR__2961
25d9c                 | '     if count == 0 ' don't even bother writing
25d9c     00 16 0E F2 | 	cmp	arg03, #0 wz
25da0                 | '         return 0
25da0     00 FA 05 A6 |  if_e	mov	result1, #0
25da4     70 00 90 AD |  if_e	jmp	#LR__2961
25da8                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
25da8     00 FA 05 F6 | 	mov	result1, #0
25dac     01 FA 61 FD | 	cogid	result1
25db0     FD 00 02 F6 | 	mov	_var01, result1
25db4     01 00 66 F0 | 	shl	_var01, #1
25db8     FD 00 02 F1 | 	add	_var01, result1
25dbc     02 00 66 F0 | 	shl	_var01, #2
25dc0     FF 03 00 FF 
25dc4     00 03 06 F6 | 	mov	_var02, ##524032
25dc8     00 03 02 F1 | 	add	_var02, _var01
25dcc                 | '     if long[mailbox] < 0
25dcc     01 01 02 FB | 	rdlong	_var01, _var02
25dd0     00 00 56 F2 | 	cmps	_var01, #0 wc
25dd4                 | '         return ERR_MAILBOX_BUSY
25dd4     1C FA 65 C6 |  if_b	neg	result1, #28
25dd8     3C 00 90 CD |  if_b	jmp	#LR__2961
25ddc                 | '     long[mailbox][2] := count
25ddc     08 02 06 F1 | 	add	_var02, #8
25de0     01 17 62 FC | 	wrlong	arg03, _var02
25de4                 | '     long[mailbox][1] := srcHubAddr
25de4     04 02 86 F1 | 	sub	_var02, #4
25de8     01 13 62 FC | 	wrlong	arg01, _var02
25dec     04 02 86 F1 | 	sub	_var02, #4
25df0                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
25df0     0A 05 02 F6 | 	mov	_var03, arg02
25df4     D9 04 06 F4 | 	bitl	_var03, #217
25df8     00 00 78 FF 
25dfc     00 00 06 F6 | 	mov	_var01, ##-268435456
25e00     02 01 02 F1 | 	add	_var01, _var03
25e04     01 01 62 FC | 	wrlong	_var01, _var02
25e08                 | '     repeat
25e08                 | LR__2960
25e08                 | '         result := long[mailbox]    
25e08     01 05 02 FB | 	rdlong	_var03, _var02
25e0c     00 04 56 F2 | 	cmps	_var03, #0 wc
25e10     F4 FF 9F CD |  if_b	jmp	#LR__2960
25e14                 | '     while result < 0   
25e14                 | '     return -result                       'return success or error
25e14     02 FB 61 F6 | 	neg	result1, _var03
25e18                 | LR__2961
25e18                 | _psram_spin2_write_ret
25e18     2D 00 64 FD | 	ret
25e1c                 | 
25e1c                 | ' 
25e1c                 | ' ' generalized fill
25e1c                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
25e1c                 | _psram_spin2_fill
25e1c     09 01 02 F6 | 	mov	_var01, arg01
25e20     0A 03 02 F6 | 	mov	_var02, arg02
25e24     0B 05 02 F6 | 	mov	_var03, arg03
25e28     0D 07 02 F6 | 	mov	_var04, arg05
25e2c                 | '     case datasize 
25e2c     01 06 86 F1 | 	sub	_var04, #1
25e30     04 06 26 F3 | 	fle	_var04, #4
25e34     30 06 62 FD | 	jmprel	_var04
25e38                 | LR__2970
25e38     10 00 90 FD | 	jmp	#LR__2971
25e3c     18 00 90 FD | 	jmp	#LR__2972
25e40     2C 00 90 FD | 	jmp	#LR__2974
25e44     1C 00 90 FD | 	jmp	#LR__2973
25e48     24 00 90 FD | 	jmp	#LR__2974
25e4c                 | LR__2971
25e4c                 | '         1: req := driver.R_WRITEBYTE
25e4c     00 00 60 FF 
25e50     00 08 06 F6 | 	mov	_var05, ##-1073741824
25e54     20 00 90 FD | 	jmp	#LR__2975
25e58                 | LR__2972
25e58                 | '         2: req := driver.R_WRITEWORD
25e58     00 00 68 FF 
25e5c     00 08 06 F6 | 	mov	_var05, ##-805306368
25e60     14 00 90 FD | 	jmp	#LR__2975
25e64                 | LR__2973
25e64                 | '         4: req := driver.R_WRITELONG
25e64     00 00 70 FF 
25e68     00 08 06 F6 | 	mov	_var05, ##-536870912
25e6c     08 00 90 FD | 	jmp	#LR__2975
25e70                 | LR__2974
25e70                 | '         other : return ERR_INVALID
25e70     06 FA 65 F6 | 	neg	result1, #6
25e74     94 00 90 FD | 	jmp	#LR__2977
25e78                 | LR__2975
25e78                 | '     if count == 0   ' nothing to do
25e78     00 04 0E F2 | 	cmp	_var03, #0 wz
25e7c                 | '         return 0
25e7c     00 FA 05 A6 |  if_e	mov	result1, #0
25e80     88 00 90 AD |  if_e	jmp	#LR__2977
25e84                 | '     if drivercog == -1
25e84     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25e88     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
25e8c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25e90     FF FF 7F FF 
25e94     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
25e98                 | '         return ERR_INACTIVE
25e98     0F FA 65 A6 |  if_e	neg	result1, #15
25e9c     6C 00 90 AD |  if_e	jmp	#LR__2977
25ea0                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
25ea0     00 FA 05 F6 | 	mov	result1, #0
25ea4     01 FA 61 FD | 	cogid	result1
25ea8     FD 06 02 F6 | 	mov	_var04, result1
25eac     01 06 66 F0 | 	shl	_var04, #1
25eb0     FD 06 02 F1 | 	add	_var04, result1
25eb4     02 06 66 F0 | 	shl	_var04, #2
25eb8     FF 03 00 FF 
25ebc     00 0B 06 F6 | 	mov	_var06, ##524032
25ec0     03 0B 02 F1 | 	add	_var06, _var04
25ec4                 | '     if long[mailbox] < 0
25ec4     05 07 02 FB | 	rdlong	_var04, _var06
25ec8     00 06 56 F2 | 	cmps	_var04, #0 wc
25ecc                 | '         return ERR_MAILBOX_BUSY
25ecc     1C FA 65 C6 |  if_b	neg	result1, #28
25ed0     38 00 90 CD |  if_b	jmp	#LR__2977
25ed4                 | '     long[mailbox][2] := count
25ed4     08 0A 06 F1 | 	add	_var06, #8
25ed8     05 05 62 FC | 	wrlong	_var03, _var06
25edc                 | '     long[mailbox][1] := pattern
25edc     04 0A 86 F1 | 	sub	_var06, #4
25ee0     05 03 62 FC | 	wrlong	_var02, _var06
25ee4     04 0A 86 F1 | 	sub	_var06, #4
25ee8                 | '     long[mailbox] := req + (addr & $1ffffff)
25ee8     04 0D 02 F6 | 	mov	_var07, _var05
25eec     00 0F 02 F6 | 	mov	_var08, _var01
25ef0     D9 0E 06 F4 | 	bitl	_var08, #217
25ef4     07 0D 02 F1 | 	add	_var07, _var08
25ef8     05 0D 62 FC | 	wrlong	_var07, _var06
25efc                 | '     repeat
25efc                 | LR__2976
25efc                 | '         r := long[mailbox]
25efc     05 0F 02 FB | 	rdlong	_var08, _var06
25f00     00 0E 56 F2 | 	cmps	_var08, #0 wc
25f04     F4 FF 9F CD |  if_b	jmp	#LR__2976
25f08                 | '     while r < 0
25f08                 | '     return -r                  ' return 0 for success or negated error code
25f08     07 FB 61 F6 | 	neg	result1, _var08
25f0c                 | LR__2977
25f0c                 | _psram_spin2_fill_ret
25f0c     2D 00 64 FD | 	ret
25f10                 | 
25f10                 | ' 
25f10                 | ' '..............................................................................
25f10                 | ' 
25f10                 | ' {{
25f10                 | ' }}
25f10                 | ' PUB setQos(cog, qos) : result | mailbox
25f10                 | _psram_spin2_setQos
25f10     09 01 02 F6 | 	mov	_var01, arg01
25f14                 | '     if drivercog == -1 ' driver must be running
25f14     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25f18     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
25f1c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25f20     FF FF 7F FF 
25f24     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
25f28                 | '         return ERR_INACTIVE
25f28     0F FA 65 A6 |  if_e	neg	result1, #15
25f2c     9C 00 90 AD |  if_e	jmp	#LR__2984
25f30                 | '     if cog < 0 or cog > 7 ' enforce cog id range
25f30     00 00 56 F2 | 	cmps	_var01, #0 wc
25f34     08 00 90 CD |  if_b	jmp	#LR__2980
25f38     08 00 56 F2 | 	cmps	_var01, #8 wc
25f3c     08 00 90 CD |  if_b	jmp	#LR__2981
25f40                 | LR__2980
25f40                 | '         return ERR_INVALID
25f40     06 FA 65 F6 | 	neg	result1, #6
25f44     84 00 90 FD | 	jmp	#LR__2984
25f48                 | LR__2981
25f48                 | '     long[@qosData][cog] := qos & !$1ff
25f48     FF 15 26 F5 | 	andn	arg02, #511
25f4c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
25f50     02 00 66 F0 | 	shl	_var01, #2
25f54     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
25f58     00 15 62 FC | 	wrlong	arg02, _var01
25f5c                 | '     mailbox := $7FF00 + drivercog*12
25f5c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
25f60     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
25f64     02 07 02 F6 | 	mov	_var04, _var03
25f68     01 06 66 F0 | 	shl	_var04, #1
25f6c     02 07 02 F1 | 	add	_var04, _var03
25f70     02 06 66 F0 | 	shl	_var04, #2
25f74     FF 03 00 FF 
25f78     00 09 06 F6 | 	mov	_var05, ##524032
25f7c     03 09 02 F1 | 	add	_var05, _var04
25f80                 | '     repeat until LOCKTRY(driverlock)
25f80     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
25f84                 | LR__2982
25f84     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
25f88     06 12 72 FD | 	locktry	arg01 wc
25f8c     F4 FF 9F 3D |  if_ae	jmp	#LR__2982
25f90     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25f94                 | '     long[mailbox] := driver.R_CONFIG + cogid()
25f94     00 06 06 F6 | 	mov	_var04, #0
25f98     01 06 62 FD | 	cogid	_var04
25f9c     00 00 78 FF 
25fa0     00 02 06 F6 | 	mov	_var02, ##-268435456
25fa4     03 03 02 F1 | 	add	_var02, _var04
25fa8     04 03 62 FC | 	wrlong	_var02, _var05
25fac                 | '     repeat while long[mailbox] < 0
25fac                 | LR__2983
25fac     04 03 02 FB | 	rdlong	_var02, _var05
25fb0     00 02 56 F2 | 	cmps	_var02, #0 wc
25fb4     F4 FF 9F CD |  if_b	jmp	#LR__2983
25fb8                 | '     LOCKREL(driverlock)
25fb8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
25fbc     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
25fc0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25fc4     07 12 72 FD | 	lockrel	arg01 wc
25fc8     00 FA 05 F6 | 	mov	result1, #0
25fcc                 | LR__2984
25fcc                 | _psram_spin2_setQos_ret
25fcc     2D 00 64 FD | 	ret
25fd0                 | 
25fd0                 | ' 
25fd0                 | ' '..............................................................................
25fd0                 | ' 
25fd0                 | ' {{
25fd0                 | ' }}
25fd0                 | ' PRI lookupDelay(freq) : delay | profile
25fd0                 | _psram_spin2_lookupDelay
25fd0                 | '     profile := @delayTable
25fd0     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
25fd4     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
25fd8                 | '     delay := long[profile][0]
25fd8     00 03 02 FB | 	rdlong	_var02, _var01
25fdc                 | '     repeat while long[profile][1] 
25fdc     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
25fe0     97 16 48 FB | 	callpa	#(@LR__2991-@LR__2990)>>2,fcache_load_ptr_
25fe4                 | LR__2990
25fe4     04 00 06 F1 | 	add	_var01, #4
25fe8     00 FB 09 FB | 	rdlong	result1, _var01 wz
25fec     04 00 86 F1 | 	sub	_var01, #4
25ff0     1C 00 90 AD |  if_e	jmp	#LR__2992
25ff4                 | '         if freq +< long[profile][1] 
25ff4     04 00 06 F1 | 	add	_var01, #4
25ff8     00 FB 01 FB | 	rdlong	result1, _var01
25ffc     04 00 86 F1 | 	sub	_var01, #4
26000     FD 12 12 F2 | 	cmp	arg01, result1 wc
26004                 | '             quit
26004                 | '         profile += 4
26004     04 00 06 31 |  if_ae	add	_var01, #4
26008                 | '         delay++
26008     01 02 06 31 |  if_ae	add	_var02, #1
2600c     D4 FF 9F 3D |  if_ae	jmp	#LR__2990
26010                 | LR__2991
26010                 | LR__2992
26010     01 FB 01 F6 | 	mov	result1, _var02
26014                 | _psram_spin2_lookupDelay_ret
26014     2D 00 64 FD | 	ret
26018                 | 
26018                 | ' 
26018                 | ' PUB start() : r
26018                 | _usbnew_spin2_start
26018     00 00 06 F6 | 	mov	_var01, #0
2601c                 | '   ifnot driver_cog
2601c     15 00 00 FF 
26020     47 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10823
26024     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
26028     15 00 00 FF 
2602c     47 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10823
26030     38 00 90 5D |  if_ne	jmp	#LR__3000
26034                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
26034     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
26038     10 00 06 F6 | 	mov	_var01, #16
2603c     00 16 06 F6 | 	mov	arg03, #0
26040     28 16 62 FD | 	setq	arg03
26044     0A 01 F2 FC | 	coginit	_var01, arg02 wc
26048     01 00 66 C6 |  if_b	neg	_var01, #1
2604c                 | '     if r >= 0
2604c     00 00 56 F2 | 	cmps	_var01, #0 wc
26050                 | '       driver_cog := r+1
26050     00 03 02 36 |  if_ae	mov	_var02, _var01
26054     01 02 06 31 |  if_ae	add	_var02, #1
26058     15 00 00 3F 
2605c     47 F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10823
26060     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
26064     15 00 00 3F 
26068     47 F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10823
2606c                 | LR__3000
2606c     00 FB 01 F6 | 	mov	result1, _var01
26070                 | _usbnew_spin2_start_ret
26070     2D 00 64 FD | 	ret
26074                 | 
26074                 | '     '' (Always enabled)
26074                 | ' 
26074                 | ' '' Get current pressed state of a keyboard key
26074                 | ' PUB keystate(key) : r | buf[2],tmp
26074                 | _usbnew_spin2_keystate
26074     00 04 06 F6 | 	mov	_var03, #0
26078                 | '   if key >= $E0 && key < $E8
26078     E0 12 56 F2 | 	cmps	arg01, #224 wc
2607c     34 00 90 CD |  if_b	jmp	#LR__3010
26080     E8 12 56 F2 | 	cmps	arg01, #232 wc
26084     2C 00 90 3D |  if_ae	jmp	#LR__3010
26088                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
26088     00 FA 05 F6 | 	mov	result1, #0
2608c     13 00 00 FF 
26090     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
26094     09 07 02 F6 | 	mov	_var04, arg01
26098     E0 06 86 F1 | 	sub	_var04, #224
2609c     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
260a0     03 09 4A F0 | 	shr	_var05, _var04 wz
260a4     13 00 00 FF 
260a8     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
260ac     01 FA 65 56 |  if_ne	neg	result1, #1
260b0     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
260b4                 | LR__3010
260b4                 | '   else
260b4                 | '     '' Do this in inline ASM to ensure atomicity
260b4                 | '     tmp := @hkbd_report
260b4     13 00 00 FF 
260b8     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
260bc     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
260c0                 | '     org
260c0     13 00 00 FF 
260c4     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
260c8     97 1E 48 FB | 	callpa	#(@LR__3012-@LR__3011)>>2,fcache_load_ptr_
260cc                 | LR__3011
260cc 000             | 	org	0
260cc 000 28 02 64 FD | 	setq	#1
260d0 001 04 01 02 FB | 	rdlong	_var01, _var05
260d4 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
260d8 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
260dc 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
260e0 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
260e4 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
260e8 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
260ec 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
260f0 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
260f4 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
260f8 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
260fc 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
26100 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
26104 00e 01 04 66 A6 |  if_e	neg	_var03, #1
26108 00f             | LR__3012
26108                 | 	orgh
26108     02 FB 01 F6 | 	mov	result1, _var03
2610c                 | _usbnew_spin2_keystate_ret
2610c     2D 00 64 FD | 	ret
26110                 | 
26110                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
26110                 | ' 
26110                 | ' '' Return key event from buffer if there is one
26110                 | ' PUB get_key() : r | tail
26110                 | _usbnew_spin2_get_key
26110                 | '   tail := keyq_tail
26110     0F 00 00 FF 
26114     C5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7877
26118     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
2611c                 | '   if keyq_head == tail
2611c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
26120     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
26124     0F 00 00 FF 
26128     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
2612c     00 03 0A F2 | 	cmp	_var02, _var01 wz
26130                 | '     return 0 ' No event
26130     00 FA 05 A6 |  if_e	mov	result1, #0
26134     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
26138                 | '   r := keyq_data[tail]
26138     00 03 02 F6 | 	mov	_var02, _var01
2613c     02 02 66 F0 | 	shl	_var02, #2
26140     0F 00 00 FF 
26144     C6 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7878
26148     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
2614c     01 FB 01 FB | 	rdlong	result1, _var02
26150                 | '   if ++tail == KEYQUEUE_SIZE
26150     01 00 06 F1 | 	add	_var01, #1
26154     80 00 0E F2 | 	cmp	_var01, #128 wz
26158                 | '     tail := 0
26158     00 00 06 A6 |  if_e	mov	_var01, #0
2615c                 | '   keyq_tail := tail
2615c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
26160     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
26164     0F 00 00 FF 
26168     C5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7877
2616c                 | _usbnew_spin2_get_key_ret
2616c     2D 00 64 FD | 	ret
26170                 | 
26170                 | ' 
26170                 | ' '' Emulate mouse movement
26170                 | ' PUB mouse_move(x,y)
26170                 | _usbnew_spin2_mouse_move
26170     02 4A 05 F6 | 	mov	COUNT_, #2
26174     A8 00 A0 FD | 	call	#pushregs_
26178     09 27 02 F6 | 	mov	local01, arg01
2617c     0A 29 02 F6 | 	mov	local02, arg02
26180                 | '   mouse_lock := 1
26180     14 00 00 FF 
26184     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
26188     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
2618c     14 00 00 FF 
26190     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
26194                 | '   waitus(2) ' hope driver is now done
26194     02 12 06 F6 | 	mov	arg01, #2
26198     30 0B B0 FD | 	call	#__system___waitus
2619c                 | '   mouse_xacc := x
2619c     14 00 00 FF 
261a0     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
261a4     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
261a8                 | '   mouse_yacc := y
261a8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
261ac     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
261b0                 | '   if mouse_outptr
261b0     04 00 00 FF 
261b4     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
261b8     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
261bc     0F 00 00 FF 
261c0     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
261c4     24 00 90 AD |  if_e	jmp	#LR__3020
261c8                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
261c8     10 28 66 F0 | 	shl	local02, #16
261cc     13 27 32 F9 | 	getword	local01, local01, #0
261d0     13 29 42 F5 | 	or	local02, local01
261d4     0F 00 00 FF 
261d8     C0 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7872
261dc     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
261e0     0F 00 00 FF 
261e4     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
261e8     13 29 62 FC | 	wrlong	local02, local01
261ec                 | LR__3020
261ec                 | '   mouse_lock := 0
261ec     14 00 00 FF 
261f0     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
261f4     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
261f8     14 00 00 FF 
261fc     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
26200     A7 F0 03 F6 | 	mov	ptra, fp
26204     B2 00 A0 FD | 	call	#popregs_
26208                 | _usbnew_spin2_mouse_move_ret
26208     2D 00 64 FD | 	ret
2620c                 | 
2620c                 | '     '' Set HAVE_HIDPAD to enable.
2620c                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
2620c                 | ' 
2620c                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
2620c                 | ' PUB hidpad_id(dev) : r
2620c                 | _usbnew_spin2_hidpad_id
2620c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
2620c     13 00 00 FF 
26210     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
26214     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
26218     09 01 02 F6 | 	mov	_var01, arg01
2621c     03 00 66 F0 | 	shl	_var01, #3
26220     09 01 82 F1 | 	sub	_var01, arg01
26224     02 00 66 F0 | 	shl	_var01, #2
26228     00 FB 01 F1 | 	add	result1, _var01
2622c     FD FA 01 FB | 	rdlong	result1, result1
26230     13 00 00 FF 
26234     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
26238                 | _usbnew_spin2_hidpad_id_ret
26238     2D 00 64 FD | 	ret
2623c                 | 
2623c                 | ' 
2623c                 | ' '' Get all button states for a device
2623c                 | ' PUB hidpad_buttons(dev) : r 
2623c                 | _usbnew_spin2_hidpad_buttons
2623c                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
2623c     13 00 00 FF 
26240     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
26244     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
26248     09 01 02 F6 | 	mov	_var01, arg01
2624c     03 00 66 F0 | 	shl	_var01, #3
26250     09 01 82 F1 | 	sub	_var01, arg01
26254     02 00 66 F0 | 	shl	_var01, #2
26258     00 FB 01 F1 | 	add	result1, _var01
2625c     14 FA 05 F1 | 	add	result1, #20
26260     FD FA 01 FB | 	rdlong	result1, result1
26264     13 00 00 FF 
26268     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
2626c                 | _usbnew_spin2_hidpad_buttons_ret
2626c     2D 00 64 FD | 	ret
26270                 | 
26270                 | ' 
26270                 | ' '' Get state of an axis (normalized between -32768 and 32767)
26270                 | ' PUB hidpad_axis(dev,axnum) : r
26270                 | _usbnew_spin2_hidpad_axis
26270                 | '   if axnum +>= 6
26270     06 14 16 F2 | 	cmp	arg02, #6 wc
26274                 | '     return 0
26274     00 FA 05 36 |  if_ae	mov	result1, #0
26278     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
2627c                 | '   else 
2627c                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
2627c     13 00 00 FF 
26280     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
26284     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
26288     09 01 02 F6 | 	mov	_var01, arg01
2628c     03 00 66 F0 | 	shl	_var01, #3
26290     09 01 82 F1 | 	sub	_var01, arg01
26294     02 00 66 F0 | 	shl	_var01, #2
26298     00 FB 01 F1 | 	add	result1, _var01
2629c     04 00 06 F6 | 	mov	_var01, #4
262a0     0A 01 02 F1 | 	add	_var01, arg02
262a4     01 00 66 F0 | 	shl	_var01, #1
262a8     FD 00 02 F1 | 	add	_var01, result1
262ac     00 FB E1 FA | 	rdword	result1, _var01
262b0     0F FA 65 F7 | 	signx	result1, #15
262b4     13 00 00 FF 
262b8     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
262bc                 | _usbnew_spin2_hidpad_axis_ret
262bc     2D 00 64 FD | 	ret
262c0                 | 
262c0                 | ' 
262c0                 | ' '' Get state of a hat
262c0                 | ' PUB hidpad_hat(dev,hatnum) : r
262c0                 | _usbnew_spin2_hidpad_hat
262c0                 | '   if hatnum +>= 4
262c0     04 14 16 F2 | 	cmp	arg02, #4 wc
262c4                 | '     return 0
262c4     00 FA 05 36 |  if_ae	mov	result1, #0
262c8     38 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
262cc                 | '   else 
262cc                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6*4+hatnum]
262cc     13 00 00 FF 
262d0     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
262d4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
262d8     09 01 02 F6 | 	mov	_var01, arg01
262dc     03 00 66 F0 | 	shl	_var01, #3
262e0     09 01 82 F1 | 	sub	_var01, arg01
262e4     02 00 66 F0 | 	shl	_var01, #2
262e8     00 FB 01 F1 | 	add	result1, _var01
262ec     18 00 06 F6 | 	mov	_var01, #24
262f0     0A 01 02 F1 | 	add	_var01, arg02
262f4     FD 00 02 F1 | 	add	_var01, result1
262f8     00 FB C1 FA | 	rdbyte	result1, _var01
262fc     13 00 00 FF 
26300     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
26304                 | _usbnew_spin2_hidpad_hat_ret
26304     2D 00 64 FD | 	ret
26308                 | 
26308                 | ' 
26308                 | ' 
26308                 | ' '--------------------------------------------------------------
26308                 | ' '---------- Init the variables, start the cog. ----------------
26308                 | ' '--------------------------------------------------------------
26308                 | ' 
26308                 | ' pub start(mbox,scope,cache) :cog,base | iii
26308                 | _audio096_spin2_start
26308     04 4A 05 F6 | 	mov	COUNT_, #4
2630c     A8 00 A0 FD | 	call	#pushregs_
26310     09 27 02 F6 | 	mov	local01, arg01
26314                 | ' 
26314                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
26314                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
26314                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
26314                 | ' 
26314                 | ' mailboxaddr:=mbox 
26314     F2 26 62 FC | 	wrlong	local01, objptr
26318                 | ' scope_ptr:=scope
26318     04 E4 05 F1 | 	add	objptr, #4
2631c     F2 14 62 FC | 	wrlong	arg02, objptr
26320                 | ' cache_ptr:=cache
26320     04 E4 05 F1 | 	add	objptr, #4
26324     F2 16 62 FC | 	wrlong	arg03, objptr
26328                 | ' base:=@channel1[0]
26328     04 E4 05 F1 | 	add	objptr, #4
2632c     F2 28 02 F6 | 	mov	local02, objptr
26330                 | ' long[$40]:=mbox
26330     40 26 66 FC | 	wrlong	local01, #64
26334                 | ' repeat iii from 0 to 7
26334     00 2A 06 F6 | 	mov	local03, #0
26338     02 00 00 FF 
2633c     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
26340     0C E4 85 F1 | 	sub	objptr, #12
26344     97 BC 48 FB | 	callpa	#(@LR__3031-@LR__3030)>>2,fcache_load_ptr_
26348                 | LR__3030
26348                 | '   long[base+64*iii]:=0
26348     14 27 02 F6 | 	mov	local01, local02
2634c     15 FD 01 F6 | 	mov	result2, local03
26350     06 FC 65 F0 | 	shl	result2, #6
26354     FE 26 02 F1 | 	add	local01, result2
26358     13 01 68 FC | 	wrlong	#0, local01
2635c                 | '   long[base+64*iii+4]:=0
2635c     14 27 02 F6 | 	mov	local01, local02
26360     15 FD 01 F6 | 	mov	result2, local03
26364     06 FC 65 F0 | 	shl	result2, #6
26368     FE 26 02 F1 | 	add	local01, result2
2636c     04 26 06 F1 | 	add	local01, #4
26370     13 01 68 FC | 	wrlong	#0, local01
26374                 | '   long[base+64*iii+12]:=0
26374     14 2D 02 F6 | 	mov	local04, local02
26378     15 27 02 F6 | 	mov	local01, local03
2637c     06 26 66 F0 | 	shl	local01, #6
26380     13 2D 02 F1 | 	add	local04, local01
26384     0C 2C 06 F1 | 	add	local04, #12
26388     16 01 68 FC | 	wrlong	#0, local04
2638c                 | '   long[base+64*iii+16]:=2 
2638c     14 2D 02 F6 | 	mov	local04, local02
26390     15 27 02 F6 | 	mov	local01, local03
26394     06 26 66 F0 | 	shl	local01, #6
26398     13 2D 02 F1 | 	add	local04, local01
2639c     10 2C 06 F1 | 	add	local04, #16
263a0     16 05 68 FC | 	wrlong	#2, local04
263a4                 | '   word[base+64*iii+20]:=0
263a4     14 2D 02 F6 | 	mov	local04, local02
263a8     15 27 02 F6 | 	mov	local01, local03
263ac     06 26 66 F0 | 	shl	local01, #6
263b0     13 2D 02 F1 | 	add	local04, local01
263b4     14 2C 06 F1 | 	add	local04, #20
263b8     16 01 58 FC | 	wrword	#0, local04
263bc                 | '   word[base+64*iii+22]:=8192
263bc     14 2D 02 F6 | 	mov	local04, local02
263c0     15 27 02 F6 | 	mov	local01, local03
263c4     06 26 66 F0 | 	shl	local01, #6
263c8     13 2D 02 F1 | 	add	local04, local01
263cc     16 2C 06 F1 | 	add	local04, #22
263d0     10 00 80 FF 
263d4     16 01 58 FC | 	wrword	##8192, local04
263d8                 | '   word[base+64*iii+24]:=4000+2*iii
263d8     15 2D 02 F6 | 	mov	local04, local03
263dc     01 2C 66 F0 | 	shl	local04, #1
263e0     07 00 00 FF 
263e4     A0 27 06 F6 | 	mov	local01, ##4000
263e8     16 27 02 F1 | 	add	local01, local04
263ec     14 2D 02 F6 | 	mov	local04, local02
263f0     15 FD 01 F6 | 	mov	result2, local03
263f4     06 FC 65 F0 | 	shl	result2, #6
263f8     FE 2C 02 F1 | 	add	local04, result2
263fc     18 2C 06 F1 | 	add	local04, #24
26400     16 27 52 FC | 	wrword	local01, local04
26404                 | '   word[base+64*iii+26]:=2
26404     14 2D 02 F6 | 	mov	local04, local02
26408     15 27 02 F6 | 	mov	local01, local03
2640c     06 26 66 F0 | 	shl	local01, #6
26410     13 2D 02 F1 | 	add	local04, local01
26414     1A 2C 06 F1 | 	add	local04, #26
26418     16 05 58 FC | 	wrword	#2, local04
2641c                 | '   long [base+64*iii+8]:=@null | $C0000000
2641c     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
26420     3E 26 26 F4 | 	bith	local01, #62
26424     14 2D 02 F6 | 	mov	local04, local02
26428     15 17 02 F6 | 	mov	arg03, local03
2642c     06 16 66 F0 | 	shl	arg03, #6
26430     0B 2D 02 F1 | 	add	local04, arg03
26434     08 2C 06 F1 | 	add	local04, #8
26438     16 27 62 FC | 	wrlong	local01, local04
2643c                 | '   long[base+64*iii+32]:=0
2643c     14 2D 02 F6 | 	mov	local04, local02
26440     15 27 02 F6 | 	mov	local01, local03
26444     06 26 66 F0 | 	shl	local01, #6
26448     13 2D 02 F1 | 	add	local04, local01
2644c     20 2C 06 F1 | 	add	local04, #32
26450     16 01 68 FC | 	wrlong	#0, local04
26454                 | '   long[base+64*iii+36]:=0
26454     14 2D 02 F6 | 	mov	local04, local02
26458     15 27 02 F6 | 	mov	local01, local03
2645c     06 26 66 F0 | 	shl	local01, #6
26460     13 2D 02 F1 | 	add	local04, local01
26464     24 2C 06 F1 | 	add	local04, #36
26468     16 01 68 FC | 	wrlong	#0, local04
2646c                 | '   long[base+64*iii+40]:=0
2646c     14 2D 02 F6 | 	mov	local04, local02
26470     15 27 02 F6 | 	mov	local01, local03
26474     06 26 66 F0 | 	shl	local01, #6
26478     13 2D 02 F1 | 	add	local04, local01
2647c     28 2C 06 F1 | 	add	local04, #40
26480     16 01 68 FC | 	wrlong	#0, local04
26484                 | '   long[base+64*iii+44]:=0
26484     14 2D 02 F6 | 	mov	local04, local02
26488     15 27 02 F6 | 	mov	local01, local03
2648c     06 26 66 F0 | 	shl	local01, #6
26490     13 2D 02 F1 | 	add	local04, local01
26494     2C 2C 06 F1 | 	add	local04, #44
26498     16 01 68 FC | 	wrlong	#0, local04
2649c                 | '   long[base+64*iii+28]:=0
2649c     14 2D 02 F6 | 	mov	local04, local02
264a0     15 27 02 F6 | 	mov	local01, local03
264a4     06 26 66 F0 | 	shl	local01, #6
264a8     13 2D 02 F1 | 	add	local04, local01
264ac     1C 2C 06 F1 | 	add	local04, #28
264b0     16 01 68 FC | 	wrlong	#0, local04
264b4     01 2A 06 F1 | 	add	local03, #1
264b8     08 2A 56 F2 | 	cmps	local03, #8 wc
264bc     88 FE 9F CD |  if_b	jmp	#LR__3030
264c0                 | LR__3031
264c0     02 00 00 FF 
264c4     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
264c8                 | '   
264c8                 | ' cog:=coginit(16,@audio,@mailboxaddr)
264c8     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
264cc     F2 16 02 F6 | 	mov	arg03, objptr
264d0     10 2C 06 F6 | 	mov	local04, #16
264d4     28 16 62 FD | 	setq	arg03
264d8     0A 2D F2 FC | 	coginit	local04, arg02 wc
264dc     01 2C 66 C6 |  if_b	neg	local04, #1
264e0                 | ' waitms(100)
264e0     64 12 06 F6 | 	mov	arg01, #100
264e4     78 07 B0 FD | 	call	#__system___waitms
264e8                 | ' return cog,base
264e8     14 FD 01 F6 | 	mov	result2, local02
264ec     16 FB 01 F6 | 	mov	result1, local04
264f0     A7 F0 03 F6 | 	mov	ptra, fp
264f4     B2 00 A0 FD | 	call	#popregs_
264f8                 | _audio096_spin2_start_ret
264f8     2D 00 64 FD | 	ret
264fc                 | 
264fc                 | ' 
264fc                 | ' ' a simple play procedure to not poke everything. 
264fc                 | ' 
264fc                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
264fc                 | _audio096_spin2_play
264fc     0C E4 05 F1 | 	add	objptr, #12
26500     F2 00 02 F6 | 	mov	_var01, objptr
26504     06 12 66 F0 | 	shl	arg01, #6
26508     09 01 02 F1 | 	add	_var01, arg01
2650c     00 13 02 F6 | 	mov	arg01, _var01
26510     0C 12 06 F1 | 	add	arg01, #12
26514     09 1B 62 FC | 	wrlong	arg05, arg01
26518     00 1C 56 F2 | 	cmps	arg06, #0 wc
2651c     00 13 02 36 |  if_ae	mov	arg01, _var01
26520     10 12 06 31 |  if_ae	add	arg01, #16
26524     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
26528     02 1A 06 C1 |  if_b	add	arg05, #2
2652c     00 13 02 C6 |  if_b	mov	arg01, _var01
26530     10 12 06 C1 |  if_b	add	arg01, #16
26534     09 1B 62 CC |  if_b	wrlong	arg05, arg01
26538     0B 13 52 F6 | 	abs	arg01, arg03 wc
2653c     0F 1B 80 FF 
26540     09 1F 1A FD | 	qdiv	##3546895, arg01
26544                 | ' 
26544                 | ' base2:=@channel1[0]+64*channel
26544                 | ' 
26544                 | ' 
26544                 | ' long[base2+12]:= len
26544                 | ' if loop >=0 
26544                 | '   long[base2+16]:= loop
26544     0C E4 85 F1 | 	sub	objptr, #12
26548                 | ' else
26548                 | '   long[base2+16]:= len+2
26548                 | ' word[base2+20]:=vol
26548     00 13 02 F6 | 	mov	arg01, _var01
2654c     14 12 06 F1 | 	add	arg01, #20
26550     09 19 52 FC | 	wrword	arg04, arg01
26554                 | ' word[base2+24]:= 3546895/splfreq 
26554     00 19 02 F6 | 	mov	arg04, _var01
26558     18 18 06 F1 | 	add	arg04, #24
2655c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
2655c                 | ' long[base2+28]:=$40000000    
2655c                 | ' long[base2+32]:=0    
2655c                 | ' long[base2+36]:=0    
2655c                 | ' long[base2+40]:=0    
2655c                 | ' long[base2+44]:=0    
2655c                 | ' long[base2+8]:=sample+$C0000000     
2655c     00 00 60 FF 
26560     00 14 06 F1 | 	add	arg02, ##-1073741824
26564     18 12 62 FD | 	getqx	arg01
26568     09 13 82 F6 | 	negc	arg01, arg01
2656c     0C 13 52 FC | 	wrword	arg01, arg04
26570     00 13 02 F6 | 	mov	arg01, _var01
26574     1A 12 06 F1 | 	add	arg01, #26
26578     09 01 5A FC | 	wrword	#256, arg01
2657c     00 13 02 F6 | 	mov	arg01, _var01
26580     1C 12 06 F1 | 	add	arg01, #28
26584     00 00 A0 FF 
26588     09 01 68 FC | 	wrlong	##1073741824, arg01
2658c     00 13 02 F6 | 	mov	arg01, _var01
26590     20 12 06 F1 | 	add	arg01, #32
26594     09 01 68 FC | 	wrlong	#0, arg01
26598     00 13 02 F6 | 	mov	arg01, _var01
2659c     24 12 06 F1 | 	add	arg01, #36
265a0     09 01 68 FC | 	wrlong	#0, arg01
265a4     00 13 02 F6 | 	mov	arg01, _var01
265a8     28 12 06 F1 | 	add	arg01, #40
265ac     09 01 68 FC | 	wrlong	#0, arg01
265b0     00 13 02 F6 | 	mov	arg01, _var01
265b4     2C 12 06 F1 | 	add	arg01, #44
265b8     09 01 68 FC | 	wrlong	#0, arg01
265bc     08 00 06 F1 | 	add	_var01, #8
265c0     00 15 62 FC | 	wrlong	arg02, _var01
265c4                 | _audio096_spin2_play_ret
265c4     2D 00 64 FD | 	ret
265c8                 | 
265c8                 | ' 
265c8                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
265c8                 | _audio096_spin2_play8
265c8                 | ' 
265c8                 | ' base2:=@channel1[0]+64*channel
265c8     0C E4 05 F1 | 	add	objptr, #12
265cc     F2 00 02 F6 | 	mov	_var01, objptr
265d0     06 12 66 F0 | 	shl	arg01, #6
265d4     09 01 02 F1 | 	add	_var01, arg01
265d8                 | ' long[base2]:=0
265d8     00 01 68 FC | 	wrlong	#0, _var01
265dc                 | ' long[base2+8]:=sample+$40000000 
265dc     00 00 20 FF 
265e0     00 14 06 F1 | 	add	arg02, ##1073741824
265e4     00 13 02 F6 | 	mov	arg01, _var01
265e8     08 12 06 F1 | 	add	arg01, #8
265ec     09 15 62 FC | 	wrlong	arg02, arg01
265f0                 | ' if loop>=0
265f0     00 1C 56 F2 | 	cmps	arg06, #0 wc
265f4     0C E4 85 F1 | 	sub	objptr, #12
265f8     1C 00 90 CD |  if_b	jmp	#LR__3040
265fc                 | '   long[base2+12]:=loop
265fc     00 15 02 F6 | 	mov	arg02, _var01
26600     0C 14 06 F1 | 	add	arg02, #12
26604     0A 1D 62 FC | 	wrlong	arg06, arg02
26608                 | '   long[base2+16]:= len
26608     00 1D 02 F6 | 	mov	arg06, _var01
2660c     10 1C 06 F1 | 	add	arg06, #16
26610     0E 1B 62 FC | 	wrlong	arg05, arg06
26614     1C 00 90 FD | 	jmp	#LR__3041
26618                 | LR__3040
26618                 | ' else
26618                 | '   long[base2+12]:= len
26618     00 1D 02 F6 | 	mov	arg06, _var01
2661c     0C 1C 06 F1 | 	add	arg06, #12
26620     0E 1B 62 FC | 	wrlong	arg05, arg06
26624                 | '   long[base2+16]:= len+1
26624     01 1A 06 F1 | 	add	arg05, #1
26628     00 13 02 F6 | 	mov	arg01, _var01
2662c     10 12 06 F1 | 	add	arg01, #16
26630     09 1B 62 FC | 	wrlong	arg05, arg01
26634                 | LR__3041
26634     0B 17 52 F6 | 	abs	arg03, arg03 wc
26638     0F 1B 80 FF 
2663c     0B 1F 1A FD | 	qdiv	##3546895, arg03
26640                 | ' word[base2+20]:=vol
26640     00 17 02 F6 | 	mov	arg03, _var01
26644     14 16 06 F1 | 	add	arg03, #20
26648     0B 19 52 FC | 	wrword	arg04, arg03
2664c                 | ' word[base2+24]:= 3546895 /splfreq 
2664c     00 13 02 F6 | 	mov	arg01, _var01
26650     18 12 06 F1 | 	add	arg01, #24
26654                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
26654     1A 00 06 F1 | 	add	_var01, #26
26658     18 18 62 FD | 	getqx	arg04
2665c     0C 19 82 F6 | 	negc	arg04, arg04
26660     09 19 52 FC | 	wrword	arg04, arg01
26664     00 01 5A FC | 	wrword	#256, _var01
26668                 | _audio096_spin2_play8_ret
26668     2D 00 64 FD | 	ret
2666c                 | 
2666c                 | ' 'long[base2+28]:=$40000000
2666c                 | ' 
2666c                 | '     
2666c                 | ' pub stop(channel) 'silence it
2666c                 | _audio096_spin2_stop
2666c                 | ' 
2666c                 | ' word[@channel1[0]+64*channel+20]:=0
2666c     0C E4 05 F1 | 	add	objptr, #12
26670     F2 00 02 F6 | 	mov	_var01, objptr
26674     09 03 02 F6 | 	mov	_var02, arg01
26678     06 02 66 F0 | 	shl	_var02, #6
2667c     01 01 02 F1 | 	add	_var01, _var02
26680     14 00 06 F1 | 	add	_var01, #20
26684     00 01 58 FC | 	wrword	#0, _var01
26688                 | ' word[@channel1[0]+64*channel+20]:=0
26688     F2 00 02 F6 | 	mov	_var01, objptr
2668c     06 12 66 F0 | 	shl	arg01, #6
26690     09 01 02 F1 | 	add	_var01, arg01
26694     14 00 06 F1 | 	add	_var01, #20
26698     00 01 58 FC | 	wrword	#0, _var01
2669c     0C E4 85 F1 | 	sub	objptr, #12
266a0                 | _audio096_spin2_stop_ret
266a0     2D 00 64 FD | 	ret
266a4                 | hubexit
266a4     81 00 80 FD | 	jmp	#cogexit
266a8                 | 
266a8                 | __system___setbaud
266a8     14 90 06 FB | 	rdlong	muldiva_, #20
266ac     09 93 02 F6 | 	mov	muldivb_, arg01
266b0     BA 00 A0 FD | 	call	#divide_
266b4     97 06 48 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
266b8                 | LR__3050
266b8     3E FA 9D FA | 	rdpin	result1, #62 wc
266bc     FE FC A1 F1 | 	subx	result2, result2
266c0     F4 FF 9F CD |  if_b	jmp	#LR__3050
266c4                 | LR__3051
266c4     40 7C 64 FD | 	dirl	#62
266c8     40 7E 64 FD | 	dirl	#63
266cc     F3 92 62 FC | 	wrlong	muldivb_, ptr___system__dat__
266d0     10 92 66 F0 | 	shl	muldivb_, #16
266d4     07 14 06 F6 | 	mov	arg02, #7
266d8     49 15 02 F1 | 	add	arg02, muldivb_
266dc     3E F8 0C FC | 	wrpin	#124, #62
266e0     3E 14 16 FC | 	wxpin	arg02, #62
266e4     3F 7C 0C FC | 	wrpin	#62, #63
266e8     14 14 06 F1 | 	add	arg02, #20
266ec     3F 14 16 FC | 	wxpin	arg02, #63
266f0     41 7C 64 FD | 	dirh	#62
266f4     41 7E 64 FD | 	dirh	#63
266f8                 | __system___setbaud_ret
266f8     2D 00 64 FD | 	ret
266fc                 | 
266fc                 | __system___txraw
266fc     01 4A 05 F6 | 	mov	COUNT_, #1
26700     A8 00 A0 FD | 	call	#pushregs_
26704     09 27 02 F6 | 	mov	local01, arg01
26708     97 06 48 FB | 	callpa	#(@LR__3061-@LR__3060)>>2,fcache_load_ptr_
2670c                 | LR__3060
2670c     3E FA 9D FA | 	rdpin	result1, #62 wc
26710     FE FC A1 F1 | 	subx	result2, result2
26714     F4 FF 9F CD |  if_b	jmp	#LR__3060
26718                 | LR__3061
26718     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
2671c     C2 01 00 AF 
26720     00 12 06 A6 |  if_e	mov	arg01, ##230400
26724     80 FF BF AD |  if_e	call	#__system___setbaud
26728     58 7C 64 FD | 	drvl	#62
2672c     3E 26 26 FC | 	wypin	local01, #62
26730     01 FA 05 F6 | 	mov	result1, #1
26734     A7 F0 03 F6 | 	mov	ptra, fp
26738     B2 00 A0 FD | 	call	#popregs_
2673c                 | __system___txraw_ret
2673c     2D 00 64 FD | 	ret
26740                 | 
26740                 | __system___rxraw
26740     0D 4A 05 F6 | 	mov	COUNT_, #13
26744     A8 00 A0 FD | 	call	#pushregs_
26748     09 27 02 F6 | 	mov	local01, arg01
2674c     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26750     C2 01 00 AF 
26754     00 12 06 A6 |  if_e	mov	arg01, ##230400
26758     4C FF BF AD |  if_e	call	#__system___setbaud
2675c     00 26 0E F2 | 	cmp	local01, #0 wz
26760     20 00 90 AD |  if_e	jmp	#LR__3070
26764     14 2A 06 FB | 	rdlong	local03, #20
26768     0A 2A 46 F0 | 	shr	local03, #10
2676c     15 27 02 FD | 	qmul	local01, local03
26770     1A FA 61 FD | 	getct	result1
26774     18 2C 62 FD | 	getqx	local04
26778     16 FB 01 F1 | 	add	result1, local04
2677c     FD 2E 02 F6 | 	mov	local05, result1
26780     04 00 90 FD | 	jmp	#LR__3071
26784                 | LR__3070
26784     00 2E 06 F6 | 	mov	local05, #0
26788                 | LR__3071
26788     01 30 66 F6 | 	neg	local06, #1
2678c     3F 32 06 F6 | 	mov	local07, #63
26790     00 34 06 F6 | 	mov	local08, #0
26794     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26798     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
2679c     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
267a0                 | LR__3072
267a0     08 36 16 F4 | 	testb	local09, #8 wc
267a4     09 36 76 F4 | 	testbn	local09, #9 andc
267a8     0A 36 46 F0 | 	shr	local09, #10
267ac     01 34 06 C6 |  if_b	mov	local08, #1
267b0     40 7E 6C 3D |  if_ae	testp	#63 wz
267b4     01 34 06 26 |  if_nc_and_z	mov	local08, #1
267b8     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
267bc     04 36 46 20 |  if_nc_and_z	shr	local09, #4
267c0                 | LR__3073
267c0     00 28 06 F6 | 	mov	local02, #0
267c4     00 34 0E F2 | 	cmp	local08, #0 wz
267c8     01 28 66 56 |  if_ne	neg	local02, #1
267cc     00 38 06 F6 | 	mov	local10, #0
267d0     00 2A 06 F6 | 	mov	local03, #0
267d4     00 26 0E F2 | 	cmp	local01, #0 wz
267d8     01 2A 66 56 |  if_ne	neg	local03, #1
267dc     00 2C 06 F6 | 	mov	local04, #0
267e0     00 3A 06 F6 | 	mov	local11, #0
267e4     17 3D 02 F6 | 	mov	local12, local05
267e8     1A FA 61 FD | 	getct	result1
267ec     FD 3E 02 F6 | 	mov	local13, result1
267f0     1F 3D 82 F1 | 	sub	local12, local13
267f4     00 3C 56 F2 | 	cmps	local12, #0 wc
267f8     00 3A 26 C6 |  if_b	not	local11, #0
267fc     00 3A 0E F2 | 	cmp	local11, #0 wz
26800     00 2C 26 56 |  if_ne	not	local04, #0
26804     16 2B CA F7 | 	test	local03, local04 wz
26808     00 38 26 56 |  if_ne	not	local10, #0
2680c     1C 29 4A F5 | 	or	local02, local10 wz
26810     8C FF 9F AD |  if_e	jmp	#LR__3072
26814     00 34 0E F2 | 	cmp	local08, #0 wz
26818     1B 31 02 56 |  if_ne	mov	local06, local09
2681c     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
26820     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26824     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
26828     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
2682c     18 FB 01 F6 | 	mov	result1, local06
26830     A7 F0 03 F6 | 	mov	ptra, fp
26834     B2 00 A0 FD | 	call	#popregs_
26838                 | __system___rxraw_ret
26838     2D 00 64 FD | 	ret
2683c                 | 
2683c                 | __system___getus
2683c     1A FC 71 FD | 	getct	result2 wc
26840     1A 00 62 FD | 	getct	_var01
26844     10 E6 05 F1 | 	add	ptr___system__dat__, #16
26848     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
2684c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
26850     20 00 90 5D |  if_ne	jmp	#LR__3080
26854     14 02 06 FB | 	rdlong	_var02, #20
26858     A1 07 00 FF 
2685c     40 02 16 FD | 	qdiv	_var02, ##1000000
26860     10 E6 05 F1 | 	add	ptr___system__dat__, #16
26864     18 FA 61 FD | 	getqx	result1
26868     FD 02 02 F6 | 	mov	_var02, result1
2686c     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
26870     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
26874                 | LR__3080
26874     01 FD 11 FD | 	qdiv	result2, _var02
26878     19 FC 61 FD | 	getqy	result2
2687c     28 FC 61 FD | 	setq	result2
26880     01 01 12 FD | 	qdiv	_var01, _var02
26884     18 FA 61 FD | 	getqx	result1
26888                 | __system___getus_ret
26888     2D 00 64 FD | 	ret
2688c                 | 
2688c                 | __system____builtin_memmove
2688c     09 01 02 F6 | 	mov	_var01, arg01
26890     0A 13 52 F2 | 	cmps	arg01, arg02 wc
26894     10 00 90 CD |  if_b	jmp	#LR__3090
26898     0A 03 02 F6 | 	mov	_var02, arg02
2689c     0B 03 02 F1 | 	add	_var02, arg03
268a0     01 13 52 F2 | 	cmps	arg01, _var02 wc
268a4     48 00 90 CD |  if_b	jmp	#LR__3096
268a8                 | LR__3090
268a8     0B 05 02 F6 | 	mov	_var03, arg03
268ac     02 04 4E F0 | 	shr	_var03, #2 wz
268b0     18 00 90 AD |  if_e	jmp	#LR__3095
268b4     97 0A 48 FB | 	callpa	#(@LR__3093-@LR__3091)>>2,fcache_load_ptr_
268b8                 | LR__3091
268b8     02 09 D8 FC | 	rep	@LR__3094, _var03
268bc                 | LR__3092
268bc     0A 05 02 FB | 	rdlong	_var03, arg02
268c0     09 05 62 FC | 	wrlong	_var03, arg01
268c4     04 12 06 F1 | 	add	arg01, #4
268c8     04 14 06 F1 | 	add	arg02, #4
268cc                 | LR__3093
268cc                 | LR__3094
268cc                 | LR__3095
268cc     02 16 CE F7 | 	test	arg03, #2 wz
268d0     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
268d4     09 03 52 5C |  if_ne	wrword	_var02, arg01
268d8     02 12 06 51 |  if_ne	add	arg01, #2
268dc     02 14 06 51 |  if_ne	add	arg02, #2
268e0     01 16 CE F7 | 	test	arg03, #1 wz
268e4     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
268e8     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
268ec     28 00 90 FD | 	jmp	#LR__3102
268f0                 | LR__3096
268f0     0B 13 02 F1 | 	add	arg01, arg03
268f4     0B 15 02 F1 | 	add	arg02, arg03
268f8     0B 07 0A F6 | 	mov	_var04, arg03 wz
268fc     18 00 90 AD |  if_e	jmp	#LR__3101
26900     97 0A 48 FB | 	callpa	#(@LR__3099-@LR__3097)>>2,fcache_load_ptr_
26904                 | LR__3097
26904     03 09 D8 FC | 	rep	@LR__3100, _var04
26908                 | LR__3098
26908     01 12 86 F1 | 	sub	arg01, #1
2690c     01 14 86 F1 | 	sub	arg02, #1
26910     0A 03 C2 FA | 	rdbyte	_var02, arg02
26914     09 03 42 FC | 	wrbyte	_var02, arg01
26918                 | LR__3099
26918                 | LR__3100
26918                 | LR__3101
26918                 | LR__3102
26918     00 FB 01 F6 | 	mov	result1, _var01
2691c                 | __system____builtin_memmove_ret
2691c     2D 00 64 FD | 	ret
26920                 | 
26920                 | __system____builtin_strcpy
26920     09 01 02 F6 | 	mov	_var01, arg01
26924     97 0A 48 FB | 	callpa	#(@LR__3111-@LR__3110)>>2,fcache_load_ptr_
26928                 | LR__3110
26928     0A FB C9 FA | 	rdbyte	result1, arg02 wz
2692c     09 FB 41 FC | 	wrbyte	result1, arg01
26930     01 14 06 F1 | 	add	arg02, #1
26934     01 12 06 F1 | 	add	arg01, #1
26938     EC FF 9F 5D |  if_ne	jmp	#LR__3110
2693c                 | LR__3111
2693c     00 FB 01 F6 | 	mov	result1, _var01
26940                 | __system____builtin_strcpy_ret
26940     2D 00 64 FD | 	ret
26944                 | 
26944                 | __system____topofstack
26944     00 4A 05 F6 | 	mov	COUNT_, #0
26948     A8 00 A0 FD | 	call	#pushregs_
2694c     08 F0 07 F1 | 	add	ptra, #8
26950     04 4E 05 F1 | 	add	fp, #4
26954     A7 12 62 FC | 	wrlong	arg01, fp
26958     A7 FA 01 F6 | 	mov	result1, fp
2695c     04 4E 85 F1 | 	sub	fp, #4
26960     A7 F0 03 F6 | 	mov	ptra, fp
26964     B2 00 A0 FD | 	call	#popregs_
26968                 | __system____topofstack_ret
26968     2D 00 64 FD | 	ret
2696c                 | 
2696c                 | __system___lockmem
2696c     00 FA 05 F6 | 	mov	result1, #0
26970     01 FA 61 FD | 	cogid	result1
26974     00 FB 05 F1 | 	add	result1, #256
26978                 | LR__3120
26978     09 01 0A FB | 	rdlong	_var01, arg01 wz
2697c     09 FB 61 AC |  if_e	wrlong	result1, arg01
26980     09 01 02 AB |  if_e	rdlong	_var01, arg01
26984     09 01 02 AB |  if_e	rdlong	_var01, arg01
26988     FD 00 0A F2 | 	cmp	_var01, result1 wz
2698c     E8 FF 9F 5D |  if_ne	jmp	#LR__3120
26990                 | __system___lockmem_ret
26990     2D 00 64 FD | 	ret
26994                 | 
26994                 | __system___string_cmp
26994     97 14 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
26998                 | LR__3130
26998     09 01 C2 FA | 	rdbyte	_var01, arg01
2699c     0A 03 C2 FA | 	rdbyte	_var02, arg02
269a0     00 05 02 F6 | 	mov	_var03, _var01
269a4     01 05 8A F1 | 	sub	_var03, _var02 wz
269a8     01 12 06 F1 | 	add	arg01, #1
269ac     01 14 06 F1 | 	add	arg02, #1
269b0     0C 00 90 5D |  if_ne	jmp	#LR__3132
269b4     00 00 0E F2 | 	cmp	_var01, #0 wz
269b8     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
269bc     D8 FF 9F 5D |  if_ne	jmp	#LR__3130
269c0                 | LR__3131
269c0                 | LR__3132
269c0     02 FB 01 F6 | 	mov	result1, _var03
269c4                 | __system___string_cmp_ret
269c4     2D 00 64 FD | 	ret
269c8                 | 
269c8                 | __system___string_concat
269c8     05 4A 05 F6 | 	mov	COUNT_, #5
269cc     A8 00 A0 FD | 	call	#pushregs_
269d0     09 27 02 F6 | 	mov	local01, arg01
269d4     0A 29 02 F6 | 	mov	local02, arg02
269d8     13 13 02 F6 | 	mov	arg01, local01
269dc     09 2B 02 F6 | 	mov	local03, arg01
269e0     97 06 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
269e4                 | LR__3140
269e4     15 FB C9 FA | 	rdbyte	result1, local03 wz
269e8     01 2A 06 51 |  if_ne	add	local03, #1
269ec     F4 FF 9F 5D |  if_ne	jmp	#LR__3140
269f0                 | LR__3141
269f0     09 2B 82 F1 | 	sub	local03, arg01
269f4     15 2D 02 F6 | 	mov	local04, local03
269f8     14 13 02 F6 | 	mov	arg01, local02
269fc     09 2B 02 F6 | 	mov	local03, arg01
26a00     97 06 48 FB | 	callpa	#(@LR__3143-@LR__3142)>>2,fcache_load_ptr_
26a04                 | LR__3142
26a04     15 FB C9 FA | 	rdbyte	result1, local03 wz
26a08     01 2A 06 51 |  if_ne	add	local03, #1
26a0c     F4 FF 9F 5D |  if_ne	jmp	#LR__3142
26a10                 | LR__3143
26a10     09 2B 82 F1 | 	sub	local03, arg01
26a14     16 13 02 F6 | 	mov	arg01, local04
26a18     15 13 02 F1 | 	add	arg01, local03
26a1c     01 12 06 F1 | 	add	arg01, #1
26a20     EC 40 B0 FD | 	call	#__system___gc_alloc_managed
26a24     FD 2E 0A F6 | 	mov	local05, result1 wz
26a28     28 00 90 AD |  if_e	jmp	#LR__3144
26a2c     17 13 02 F6 | 	mov	arg01, local05
26a30     13 15 02 F6 | 	mov	arg02, local01
26a34     16 17 02 F6 | 	mov	arg03, local04
26a38     50 FE BF FD | 	call	#__system____builtin_memmove
26a3c     17 13 02 F6 | 	mov	arg01, local05
26a40     16 13 02 F1 | 	add	arg01, local04
26a44     01 2A 06 F1 | 	add	local03, #1
26a48     14 15 02 F6 | 	mov	arg02, local02
26a4c     15 17 02 F6 | 	mov	arg03, local03
26a50     38 FE BF FD | 	call	#__system____builtin_memmove
26a54                 | LR__3144
26a54     17 FB 01 F6 | 	mov	result1, local05
26a58     A7 F0 03 F6 | 	mov	ptra, fp
26a5c     B2 00 A0 FD | 	call	#popregs_
26a60                 | __system___string_concat_ret
26a60     2D 00 64 FD | 	ret
26a64                 | 
26a64                 | __system___tx
26a64     02 4A 05 F6 | 	mov	COUNT_, #2
26a68     A8 00 A0 FD | 	call	#pushregs_
26a6c     09 27 02 F6 | 	mov	local01, arg01
26a70     0A 26 0E F2 | 	cmp	local01, #10 wz
26a74     18 00 90 5D |  if_ne	jmp	#LR__3150
26a78     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26a7c     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
26a80     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26a84     02 28 CE F7 | 	test	local02, #2 wz
26a88     0D 12 06 56 |  if_ne	mov	arg01, #13
26a8c     6C FC BF 5D |  if_ne	call	#__system___txraw
26a90                 | LR__3150
26a90     13 13 02 F6 | 	mov	arg01, local01
26a94     64 FC BF FD | 	call	#__system___txraw
26a98     A7 F0 03 F6 | 	mov	ptra, fp
26a9c     B2 00 A0 FD | 	call	#popregs_
26aa0                 | __system___tx_ret
26aa0     2D 00 64 FD | 	ret
26aa4                 | 
26aa4                 | __system___rx
26aa4     01 4A 05 F6 | 	mov	COUNT_, #1
26aa8     A8 00 A0 FD | 	call	#pushregs_
26aac                 | LR__3160
26aac     00 12 06 F6 | 	mov	arg01, #0
26ab0     8C FC BF FD | 	call	#__system___rxraw
26ab4     FD 26 02 F6 | 	mov	local01, result1
26ab8     FF FF 7F FF 
26abc     FF 27 0E F2 | 	cmp	local01, ##-1 wz
26ac0     E8 FF 9F AD |  if_e	jmp	#LR__3160
26ac4     0D 26 0E F2 | 	cmp	local01, #13 wz
26ac8     14 00 90 5D |  if_ne	jmp	#LR__3161
26acc     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26ad0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
26ad4     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26ad8     02 FA CD F7 | 	test	result1, #2 wz
26adc     0A 26 06 56 |  if_ne	mov	local01, #10
26ae0                 | LR__3161
26ae0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26ae4     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
26ae8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26aec     01 12 CE F7 | 	test	arg01, #1 wz
26af0     1C 00 90 AD |  if_e	jmp	#LR__3164
26af4     7F 26 0E F2 | 	cmp	local01, #127 wz
26af8     0C 00 90 5D |  if_ne	jmp	#LR__3162
26afc     08 12 06 F6 | 	mov	arg01, #8
26b00     60 FF BF FD | 	call	#__system___tx
26b04     08 00 90 FD | 	jmp	#LR__3163
26b08                 | LR__3162
26b08     13 13 02 F6 | 	mov	arg01, local01
26b0c     54 FF BF FD | 	call	#__system___tx
26b10                 | LR__3163
26b10                 | LR__3164
26b10     13 FB 01 F6 | 	mov	result1, local01
26b14     A7 F0 03 F6 | 	mov	ptra, fp
26b18     B2 00 A0 FD | 	call	#popregs_
26b1c                 | __system___rx_ret
26b1c     2D 00 64 FD | 	ret
26b20                 | 
26b20                 | __system___pinwrite
26b20     09 01 02 F6 | 	mov	_var01, arg01
26b24     1F 00 06 F5 | 	and	_var01, #31
26b28     20 12 CE F7 | 	test	arg01, #32 wz
26b2c     06 12 46 F0 | 	shr	arg01, #6
26b30     09 13 CA F9 | 	bmask	arg01, arg01
26b34     00 13 62 F0 | 	shl	arg01, _var01
26b38     00 15 62 F0 | 	shl	arg02, _var01
26b3c     1C 00 90 AD |  if_e	jmp	#LR__3170
26b40     09 F7 43 F5 | 	or	dirb, arg01
26b44     FD 01 02 F6 | 	mov	_var01, outb
26b48     09 01 22 F5 | 	andn	_var01, arg01
26b4c     09 15 02 F5 | 	and	arg02, arg01
26b50     0A 01 42 F5 | 	or	_var01, arg02
26b54     00 FB 03 F6 | 	mov	outb, _var01
26b58     18 00 90 FD | 	jmp	#LR__3171
26b5c                 | LR__3170
26b5c     09 F5 43 F5 | 	or	dira, arg01
26b60     FC 01 02 F6 | 	mov	_var01, outa
26b64     09 01 22 F5 | 	andn	_var01, arg01
26b68     09 15 02 F5 | 	and	arg02, arg01
26b6c     0A 01 42 F5 | 	or	_var01, arg02
26b70     00 F9 03 F6 | 	mov	outa, _var01
26b74                 | LR__3171
26b74                 | __system___pinwrite_ret
26b74     2D 00 64 FD | 	ret
26b78                 | 
26b78                 | __system___basic_read_line
26b78     06 4A 05 F6 | 	mov	COUNT_, #6
26b7c     A8 00 A0 FD | 	call	#pushregs_
26b80     09 27 02 F6 | 	mov	local01, arg01
26b84     00 28 06 F6 | 	mov	local02, #0
26b88     18 2A 06 F6 | 	mov	local03, #24
26b8c     00 2C 06 F6 | 	mov	local04, #0
26b90     18 12 06 F6 | 	mov	arg01, #24
26b94     78 3F B0 FD | 	call	#__system___gc_alloc_managed
26b98     FD 2E 0A F6 | 	mov	local05, result1 wz
26b9c     17 FB 01 A6 |  if_e	mov	result1, local05
26ba0     B0 00 90 AD |  if_e	jmp	#LR__3183
26ba4                 | LR__3180
26ba4     13 13 02 F6 | 	mov	arg01, local01
26ba8     7C 0B B0 FD | 	call	#__system___basic_get_char
26bac     FD 30 02 F6 | 	mov	local06, result1
26bb0     01 30 56 F2 | 	cmps	local06, #1 wc
26bb4     8C 00 90 CD |  if_b	jmp	#LR__3182
26bb8     0A 30 0E F2 | 	cmp	local06, #10 wz
26bbc     10 00 90 5D |  if_ne	jmp	#LR__3181
26bc0     00 2C 0E F2 | 	cmp	local04, #0 wz
26bc4     01 28 56 52 |  if_ne	cmps	local02, #1 wc
26bc8     01 28 86 11 |  if_a	sub	local02, #1
26bcc     74 00 90 FD | 	jmp	#LR__3182
26bd0                 | LR__3181
26bd0     0D 30 0E F2 | 	cmp	local06, #13 wz
26bd4     01 2C 06 A6 |  if_e	mov	local04, #1
26bd8     00 2C 06 56 |  if_ne	mov	local04, #0
26bdc     08 30 0E F2 | 	cmp	local06, #8 wz
26be0     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
26be4     01 28 56 A2 |  if_e	cmps	local02, #1 wc
26be8     01 28 86 21 |  if_nc_and_z	sub	local02, #1
26bec     B4 FF 9F AD |  if_e	jmp	#LR__3180
26bf0     17 17 02 F6 | 	mov	arg03, local05
26bf4     14 17 02 F1 | 	add	arg03, local02
26bf8     0B 31 42 FC | 	wrbyte	local06, arg03
26bfc     01 28 06 F1 | 	add	local02, #1
26c00     15 29 0A F2 | 	cmp	local02, local03 wz
26c04     9C FF 9F 5D |  if_ne	jmp	#LR__3180
26c08     15 13 02 F6 | 	mov	arg01, local03
26c0c     20 12 06 F1 | 	add	arg01, #32
26c10     FC 3E B0 FD | 	call	#__system___gc_alloc_managed
26c14     FD 30 0A F6 | 	mov	local06, result1 wz
26c18     18 FB 01 A6 |  if_e	mov	result1, local06
26c1c     34 00 90 AD |  if_e	jmp	#LR__3183
26c20     18 13 02 F6 | 	mov	arg01, local06
26c24     17 15 02 F6 | 	mov	arg02, local05
26c28     15 17 02 F6 | 	mov	arg03, local03
26c2c     5C FC BF FD | 	call	#__system____builtin_memmove
26c30     20 2A 06 F1 | 	add	local03, #32
26c34     17 13 02 F6 | 	mov	arg01, local05
26c38     10 40 B0 FD | 	call	#__system___gc_free
26c3c     18 2F 02 F6 | 	mov	local05, local06
26c40     60 FF 9F FD | 	jmp	#LR__3180
26c44                 | LR__3182
26c44     17 31 02 F6 | 	mov	local06, local05
26c48     14 31 02 F1 | 	add	local06, local02
26c4c     18 01 48 FC | 	wrbyte	#0, local06
26c50     17 FB 01 F6 | 	mov	result1, local05
26c54                 | LR__3183
26c54     A7 F0 03 F6 | 	mov	ptra, fp
26c58     B2 00 A0 FD | 	call	#popregs_
26c5c                 | __system___basic_read_line_ret
26c5c     2D 00 64 FD | 	ret
26c60                 | 
26c60                 | __system___waitms
26c60     09 01 02 F6 | 	mov	_var01, arg01
26c64     1A 02 62 FD | 	getct	_var02
26c68     14 04 06 FB | 	rdlong	_var03, #20
26c6c     97 14 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
26c70                 | LR__3190
26c70     01 00 00 FF 
26c74     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
26c78     1C 00 90 CD |  if_b	jmp	#LR__3192
26c7c     02 03 02 F1 | 	add	_var02, _var03
26c80     01 13 02 F6 | 	mov	arg01, _var02
26c84     00 12 66 FA | 	addct1	arg01, #0
26c88     24 22 60 FD | 	waitct1
26c8c     01 00 00 FF 
26c90     E8 01 86 F1 | 	sub	_var01, ##1000
26c94     D8 FF 9F FD | 	jmp	#LR__3190
26c98                 | LR__3191
26c98                 | LR__3192
26c98     01 00 56 F2 | 	cmps	_var01, #1 wc
26c9c     28 00 90 CD |  if_b	jmp	#LR__3193
26ca0     02 01 02 FD | 	qmul	_var01, _var03
26ca4     01 00 00 FF 
26ca8     E8 17 06 F6 | 	mov	arg03, ##1000
26cac     19 FA 61 FD | 	getqy	result1
26cb0     18 12 62 FD | 	getqx	arg01
26cb4     28 FA 61 FD | 	setq	result1
26cb8     0B 13 12 FD | 	qdiv	arg01, arg03
26cbc     18 12 62 FD | 	getqx	arg01
26cc0     01 13 62 FA | 	addct1	arg01, _var02
26cc4     24 22 60 FD | 	waitct1
26cc8                 | LR__3193
26cc8                 | __system___waitms_ret
26cc8     2D 00 64 FD | 	ret
26ccc                 | 
26ccc                 | __system___waitus
26ccc     09 01 02 F6 | 	mov	_var01, arg01
26cd0     1A 02 62 FD | 	getct	_var02
26cd4     14 04 06 FB | 	rdlong	_var03, #20
26cd8     97 14 48 FB | 	callpa	#(@LR__3201-@LR__3200)>>2,fcache_load_ptr_
26cdc                 | LR__3200
26cdc     A1 07 00 FF 
26ce0     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
26ce4     1C 00 90 CD |  if_b	jmp	#LR__3202
26ce8     02 03 02 F1 | 	add	_var02, _var03
26cec     01 13 02 F6 | 	mov	arg01, _var02
26cf0     00 12 66 FA | 	addct1	arg01, #0
26cf4     24 22 60 FD | 	waitct1
26cf8     A1 07 00 FF 
26cfc     40 00 86 F1 | 	sub	_var01, ##1000000
26d00     D8 FF 9F FD | 	jmp	#LR__3200
26d04                 | LR__3201
26d04                 | LR__3202
26d04     01 00 56 F2 | 	cmps	_var01, #1 wc
26d08     28 00 90 CD |  if_b	jmp	#LR__3203
26d0c     02 01 02 FD | 	qmul	_var01, _var03
26d10     A1 07 00 FF 
26d14     40 16 06 F6 | 	mov	arg03, ##1000000
26d18     19 FA 61 FD | 	getqy	result1
26d1c     18 12 62 FD | 	getqx	arg01
26d20     28 FA 61 FD | 	setq	result1
26d24     0B 13 12 FD | 	qdiv	arg01, arg03
26d28     18 FA 61 FD | 	getqx	result1
26d2c     FD 02 62 FA | 	addct1	_var02, result1
26d30     24 22 60 FD | 	waitct1
26d34                 | LR__3203
26d34                 | __system___waitus_ret
26d34     2D 00 64 FD | 	ret
26d38                 | 
26d38                 | __system___mount
26d38     0B 4A 05 F6 | 	mov	COUNT_, #11
26d3c     A8 00 A0 FD | 	call	#pushregs_
26d40     09 27 02 F6 | 	mov	local01, arg01
26d44     0A 29 0A F6 | 	mov	local02, arg02 wz
26d48     01 2A 66 F6 | 	neg	local03, #1
26d4c     01 FA 65 A6 |  if_e	neg	result1, #1
26d50     98 02 90 AD |  if_e	jmp	#LR__3225
26d54     13 FB C1 FA | 	rdbyte	result1, local01
26d58     2F FA 0D F2 | 	cmp	result1, #47 wz
26d5c     28 00 90 5D |  if_ne	jmp	#LR__3212
26d60     13 13 02 F6 | 	mov	arg01, local01
26d64     09 2D 02 F6 | 	mov	local04, arg01
26d68     97 06 48 FB | 	callpa	#(@LR__3211-@LR__3210)>>2,fcache_load_ptr_
26d6c                 | LR__3210
26d6c     16 FB C9 FA | 	rdbyte	result1, local04 wz
26d70     01 2C 06 51 |  if_ne	add	local04, #1
26d74     F4 FF 9F 5D |  if_ne	jmp	#LR__3210
26d78                 | LR__3211
26d78     09 2D 82 F1 | 	sub	local04, arg01
26d7c     16 FB 01 F6 | 	mov	result1, local04
26d80     10 FA 55 F2 | 	cmps	result1, #16 wc
26d84     14 00 90 CD |  if_b	jmp	#LR__3213
26d88                 | LR__3212
26d88     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26d8c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
26d90     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26d94     01 FA 65 F6 | 	neg	result1, #1
26d98     50 02 90 FD | 	jmp	#LR__3225
26d9c                 | LR__3213
26d9c     00 2E 06 F6 | 	mov	local05, #0
26da0                 | LR__3214
26da0     04 2E 56 F2 | 	cmps	local05, #4 wc
26da4     B0 00 90 3D |  if_ae	jmp	#LR__3219
26da8     17 13 02 F6 | 	mov	arg01, local05
26dac     02 12 66 F0 | 	shl	arg01, #2
26db0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26db4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
26db8     09 FB 09 FB | 	rdlong	result1, arg01 wz
26dbc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26dc0     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
26dc4     17 2B 02 86 |  if_c_and_z	mov	local03, local05
26dc8     84 00 90 8D |  if_c_and_z	jmp	#LR__3218
26dcc     17 13 02 F6 | 	mov	arg01, local05
26dd0     02 12 66 F0 | 	shl	arg01, #2
26dd4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26dd8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
26ddc     09 13 02 FB | 	rdlong	arg01, arg01
26de0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26de4     09 2D 02 F6 | 	mov	local04, arg01
26de8     97 06 48 FB | 	callpa	#(@LR__3216-@LR__3215)>>2,fcache_load_ptr_
26dec                 | LR__3215
26dec     16 FB C9 FA | 	rdbyte	result1, local04 wz
26df0     01 2C 06 51 |  if_ne	add	local04, #1
26df4     F4 FF 9F 5D |  if_ne	jmp	#LR__3215
26df8                 | LR__3216
26df8     09 2D 82 F1 | 	sub	local04, arg01
26dfc     16 31 02 F6 | 	mov	local06, local04
26e00     18 13 02 F6 | 	mov	arg01, local06
26e04     13 13 02 F1 | 	add	arg01, local01
26e08     09 FB C1 FA | 	rdbyte	result1, arg01
26e0c     2F FA 0D F2 | 	cmp	result1, #47 wz
26e10     18 33 02 56 |  if_ne	mov	local07, local06
26e14     13 33 02 51 |  if_ne	add	local07, local01
26e18     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
26e1c     30 00 90 5D |  if_ne	jmp	#LR__3217
26e20     17 17 02 F6 | 	mov	arg03, local05
26e24     02 16 66 F0 | 	shl	arg03, #2
26e28     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26e2c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
26e30     0B 15 02 FB | 	rdlong	arg02, arg03
26e34     13 13 02 F6 | 	mov	arg01, local01
26e38     18 17 02 F6 | 	mov	arg03, local06
26e3c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26e40     4C 51 B0 FD | 	call	#__system__strncmp
26e44     00 FA 0D F2 | 	cmp	result1, #0 wz
26e48     17 2B 02 A6 |  if_e	mov	local03, local05
26e4c     08 00 90 AD |  if_e	jmp	#LR__3219
26e50                 | LR__3217
26e50                 | LR__3218
26e50     01 2E 06 F1 | 	add	local05, #1
26e54     48 FF 9F FD | 	jmp	#LR__3214
26e58                 | LR__3219
26e58     FF FF 7F FF 
26e5c     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
26e60     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26e64     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
26e68     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26e6c     01 FA 65 A6 |  if_e	neg	result1, #1
26e70     78 01 90 AD |  if_e	jmp	#LR__3225
26e74     15 2F 02 F6 | 	mov	local05, local03
26e78     17 33 02 F6 | 	mov	local07, local05
26e7c     02 32 66 F0 | 	shl	local07, #2
26e80     74 E6 05 F1 | 	add	ptr___system__dat__, #116
26e84     F3 32 02 F1 | 	add	local07, ptr___system__dat__
26e88     19 31 0A FB | 	rdlong	local06, local07 wz
26e8c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
26e90     58 00 90 AD |  if_e	jmp	#LR__3220
26e94     4C 30 06 F1 | 	add	local06, #76
26e98     18 33 0A FB | 	rdlong	local07, local06 wz
26e9c     4C 30 86 F1 | 	sub	local06, #76
26ea0     48 00 90 AD |  if_e	jmp	#LR__3220
26ea4     4C 30 06 F1 | 	add	local06, #76
26ea8     18 33 02 FB | 	rdlong	local07, local06
26eac     19 2B 02 F6 | 	mov	local03, local07
26eb0     13 32 46 F7 | 	zerox	local07, #19
26eb4     14 2A 46 F0 | 	shr	local03, #20
26eb8     02 2A 66 F0 | 	shl	local03, #2
26ebc     ED 2A 02 F1 | 	add	local03, __methods__
26ec0     15 2B 02 FB | 	rdlong	local03, local03
26ec4     17 31 02 F6 | 	mov	local06, local05
26ec8     02 30 66 F0 | 	shl	local06, #2
26ecc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26ed0     F3 30 02 F1 | 	add	local06, ptr___system__dat__
26ed4     18 13 02 FB | 	rdlong	arg01, local06
26ed8     F2 30 02 F6 | 	mov	local06, objptr
26edc     19 E5 01 F6 | 	mov	objptr, local07
26ee0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26ee4     2D 2A 62 FD | 	call	local03
26ee8     18 E5 01 F6 | 	mov	objptr, local06
26eec                 | LR__3220
26eec     17 35 02 F6 | 	mov	local08, local05
26ef0     02 34 66 F0 | 	shl	local08, #2
26ef4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
26ef8     F3 34 02 F1 | 	add	local08, ptr___system__dat__
26efc     1A 29 62 FC | 	wrlong	local02, local08
26f00     00 28 0E F2 | 	cmp	local02, #0 wz
26f04     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
26f08     18 00 90 5D |  if_ne	jmp	#LR__3221
26f0c     02 2E 66 F0 | 	shl	local05, #2
26f10     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26f14     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
26f18     17 01 68 FC | 	wrlong	#0, local05
26f1c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26f20     C4 00 90 FD | 	jmp	#LR__3224
26f24                 | LR__3221
26f24     17 37 02 F6 | 	mov	local09, local05
26f28     04 36 66 F0 | 	shl	local09, #4
26f2c     24 E6 05 F1 | 	add	ptr___system__dat__, #36
26f30     F3 36 02 F1 | 	add	local09, ptr___system__dat__
26f34     1B 13 02 F6 | 	mov	arg01, local09
26f38     13 15 02 F6 | 	mov	arg02, local01
26f3c     10 16 06 F6 | 	mov	arg03, #16
26f40     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
26f44     9C 4F B0 FD | 	call	#__system__strncpy
26f48     48 28 06 F1 | 	add	local02, #72
26f4c     14 35 0A FB | 	rdlong	local08, local02 wz
26f50     48 28 86 F1 | 	sub	local02, #72
26f54     7C 00 90 AD |  if_e	jmp	#LR__3223
26f58     48 28 06 F1 | 	add	local02, #72
26f5c     14 35 02 FB | 	rdlong	local08, local02
26f60     1A 39 02 F6 | 	mov	local10, local08
26f64     13 34 46 F7 | 	zerox	local08, #19
26f68     14 38 46 F0 | 	shr	local10, #20
26f6c     02 38 66 F0 | 	shl	local10, #2
26f70     ED 38 02 F1 | 	add	local10, __methods__
26f74     1C 39 02 FB | 	rdlong	local10, local10
26f78     1B 13 02 F6 | 	mov	arg01, local09
26f7c     F2 3A 02 F6 | 	mov	local11, objptr
26f80     1A E5 01 F6 | 	mov	objptr, local08
26f84     2D 38 62 FD | 	call	local10
26f88     1D E5 01 F6 | 	mov	objptr, local11
26f8c     FD 12 0A F6 | 	mov	arg01, result1 wz
26f90     40 00 90 AD |  if_e	jmp	#LR__3222
26f94     17 35 02 F6 | 	mov	local08, local05
26f98     02 34 66 F0 | 	shl	local08, #2
26f9c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
26fa0     F3 34 02 F1 | 	add	local08, ptr___system__dat__
26fa4     1A 01 68 FC | 	wrlong	#0, local08
26fa8     02 2E 66 F0 | 	shl	local05, #2
26fac     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
26fb0     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
26fb4     17 01 68 FC | 	wrlong	#0, local05
26fb8     09 13 6A F6 | 	neg	arg01, arg01 wz
26fbc     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
26fc0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26fc4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26fc8     01 FA 65 56 |  if_ne	neg	result1, #1
26fcc     00 FA 05 A6 |  if_e	mov	result1, #0
26fd0     18 00 90 FD | 	jmp	#LR__3225
26fd4                 | LR__3222
26fd4                 | LR__3223
26fd4     02 2E 66 F0 | 	shl	local05, #2
26fd8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26fdc     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
26fe0     17 37 62 FC | 	wrlong	local09, local05
26fe4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26fe8                 | LR__3224
26fe8     00 FA 05 F6 | 	mov	result1, #0
26fec                 | LR__3225
26fec     A7 F0 03 F6 | 	mov	ptra, fp
26ff0     B2 00 A0 FD | 	call	#popregs_
26ff4                 | __system___mount_ret
26ff4     2D 00 64 FD | 	ret
26ff8                 | 
26ff8                 | __system___chdir
26ff8     00 4A 05 F6 | 	mov	COUNT_, #0
26ffc     A8 00 A0 FD | 	call	#pushregs_
27000     40 F0 07 F1 | 	add	ptra, #64
27004     04 4E 05 F1 | 	add	fp, #4
27008     A7 12 62 FC | 	wrlong	arg01, fp
2700c     04 4E 05 F1 | 	add	fp, #4
27010     A7 14 02 F6 | 	mov	arg02, fp
27014     08 4E 85 F1 | 	sub	fp, #8
27018     6C 4B B0 FD | 	call	#__system__stat
2701c     3C 4E 05 F1 | 	add	fp, #60
27020     A7 FA 61 FC | 	wrlong	result1, fp
27024     3C 4E 85 F1 | 	sub	fp, #60
27028     00 FA 0D F2 | 	cmp	result1, #0 wz
2702c     3C 4E 05 51 |  if_ne	add	fp, #60
27030     A7 FA 01 5B |  if_ne	rdlong	result1, fp
27034     3C 4E 85 51 |  if_ne	sub	fp, #60
27038     BC 00 90 5D |  if_ne	jmp	#LR__3232
2703c     10 4E 05 F1 | 	add	fp, #16
27040     A7 12 02 FB | 	rdlong	arg01, fp
27044     10 4E 85 F1 | 	sub	fp, #16
27048     78 00 00 FF 
2704c     00 12 06 F5 | 	and	arg01, ##61440
27050     08 00 00 FF 
27054     00 12 0E F2 | 	cmp	arg01, ##4096 wz
27058     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
2705c     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
27060     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
27064     01 FA 65 56 |  if_ne	neg	result1, #1
27068     8C 00 90 5D |  if_ne	jmp	#LR__3232
2706c     04 4E 05 F1 | 	add	fp, #4
27070     A7 16 02 FB | 	rdlong	arg03, fp
27074     04 4E 85 F1 | 	sub	fp, #4
27078     0B 17 C2 FA | 	rdbyte	arg03, arg03
2707c     2F 16 0E F2 | 	cmp	arg03, #47 wz
27080     24 00 90 5D |  if_ne	jmp	#LR__3230
27084     84 E6 05 F1 | 	add	ptr___system__dat__, #132
27088     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2708c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
27090     04 4E 05 F1 | 	add	fp, #4
27094     A7 14 02 FB | 	rdlong	arg02, fp
27098     04 4E 85 F1 | 	sub	fp, #4
2709c     00 17 06 F6 | 	mov	arg03, #256
270a0     40 4E B0 FD | 	call	#__system__strncpy
270a4     4C 00 90 FD | 	jmp	#LR__3231
270a8                 | LR__3230
270a8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
270ac     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
270b0     38 4E 05 F1 | 	add	fp, #56
270b4     A7 12 62 FC | 	wrlong	arg01, fp
270b8     38 4E 85 F1 | 	sub	fp, #56
270bc     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
270c0     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
270c4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
270c8     00 17 06 F6 | 	mov	arg03, #256
270cc     14 4E B0 FD | 	call	#__system__strncpy
270d0     38 4E 05 F1 | 	add	fp, #56
270d4     A7 12 02 FB | 	rdlong	arg01, fp
270d8     34 4E 85 F1 | 	sub	fp, #52
270dc     A7 14 02 FB | 	rdlong	arg02, fp
270e0     04 4E 85 F1 | 	sub	fp, #4
270e4     84 E6 05 F1 | 	add	ptr___system__dat__, #132
270e8     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
270ec     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
270f0     10 00 B0 FD | 	call	#__system____getvfsforfile
270f4                 | LR__3231
270f4     00 FA 05 F6 | 	mov	result1, #0
270f8                 | LR__3232
270f8     A7 F0 03 F6 | 	mov	ptra, fp
270fc     B2 00 A0 FD | 	call	#popregs_
27100                 | __system___chdir_ret
27100     2D 00 64 FD | 	ret
27104                 | 
27104                 | __system____getvfsforfile
27104     0E 4A 05 F6 | 	mov	COUNT_, #14
27108     A8 00 A0 FD | 	call	#pushregs_
2710c     09 27 02 F6 | 	mov	local01, arg01
27110     0A 29 02 F6 | 	mov	local02, arg02
27114     0B 2B 02 F6 | 	mov	local03, arg03
27118     97 10 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
2711c                 | LR__3240
2711c     14 FB C1 FA | 	rdbyte	result1, local02
27120     2F FA 0D F2 | 	cmp	result1, #47 wz
27124     01 28 06 A1 |  if_e	add	local02, #1
27128     14 2D C2 AA |  if_e	rdbyte	local04, local02
2712c     01 28 86 A1 |  if_e	sub	local02, #1
27130     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
27134     01 28 06 A1 |  if_e	add	local02, #1
27138     E0 FF 9F AD |  if_e	jmp	#LR__3240
2713c                 | LR__3241
2713c     14 2D C2 FA | 	rdbyte	local04, local02
27140     2F 2C 0E F2 | 	cmp	local04, #47 wz
27144     14 00 90 5D |  if_ne	jmp	#LR__3242
27148     13 13 02 F6 | 	mov	arg01, local01
2714c     14 15 02 F6 | 	mov	arg02, local02
27150     00 17 06 F6 | 	mov	arg03, #256
27154     8C 4D B0 FD | 	call	#__system__strncpy
27158     7C 00 90 FD | 	jmp	#LR__3244
2715c                 | LR__3242
2715c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
27160     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
27164     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
27168     13 13 02 F6 | 	mov	arg01, local01
2716c     00 17 06 F6 | 	mov	arg03, #256
27170     70 4D B0 FD | 	call	#__system__strncpy
27174     14 2D CA FA | 	rdbyte	local04, local02 wz
27178     5C 00 90 AD |  if_e	jmp	#LR__3243
2717c     14 2D C2 FA | 	rdbyte	local04, local02
27180     2E 2C 0E F2 | 	cmp	local04, #46 wz
27184     01 28 06 A1 |  if_e	add	local02, #1
27188     14 2F C2 AA |  if_e	rdbyte	local05, local02
2718c     01 28 86 A1 |  if_e	sub	local02, #1
27190     17 31 02 A6 |  if_e	mov	local06, local05
27194     07 30 4E A7 |  if_e	zerox	local06, #7 wz
27198     3C 00 90 AD |  if_e	jmp	#LR__3243
2719c     13 2F C2 FA | 	rdbyte	local05, local01
271a0     2F 2E 0E F2 | 	cmp	local05, #47 wz
271a4     01 26 06 A1 |  if_e	add	local01, #1
271a8     13 2D C2 AA |  if_e	rdbyte	local04, local01
271ac     01 26 86 A1 |  if_e	sub	local01, #1
271b0     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
271b4     B2 01 00 5F 
271b8     7C 14 06 56 |  if_ne	mov	arg02, ##@LR__5370
271bc     13 13 02 56 |  if_ne	mov	arg01, local01
271c0     00 17 06 56 |  if_ne	mov	arg03, #256
271c4     68 4D B0 5D |  if_ne	call	#__system__strncat
271c8     13 13 02 F6 | 	mov	arg01, local01
271cc     14 15 02 F6 | 	mov	arg02, local02
271d0     00 17 06 F6 | 	mov	arg03, #256
271d4     58 4D B0 FD | 	call	#__system__strncat
271d8                 | LR__3243
271d8                 | LR__3244
271d8     13 13 02 F6 | 	mov	arg01, local01
271dc     10 4F B0 FD | 	call	#__system___normalizeName
271e0     13 2D CA FA | 	rdbyte	local04, local01 wz
271e4     1C 00 90 AD |  if_e	jmp	#LR__3245
271e8     13 2D C2 FA | 	rdbyte	local04, local01
271ec     2F 2C 0E F2 | 	cmp	local04, #47 wz
271f0     01 26 06 A1 |  if_e	add	local01, #1
271f4     13 31 C2 AA |  if_e	rdbyte	local06, local01
271f8     01 26 86 A1 |  if_e	sub	local01, #1
271fc     00 30 4E A2 |  if_e	cmps	local06, #0 wz
27200     18 00 90 5D |  if_ne	jmp	#LR__3246
27204                 | LR__3245
27204     01 00 00 FF 
27208     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
2720c     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
27210     01 00 00 FF 
27214     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
27218     EC 01 90 FD | 	jmp	#LR__3260
2721c                 | LR__3246
2721c     00 32 06 F6 | 	mov	local07, #0
27220                 | LR__3247
27220     04 32 56 F2 | 	cmps	local07, #4 wc
27224     CC 01 90 3D |  if_ae	jmp	#LR__3259
27228     19 31 02 F6 | 	mov	local06, local07
2722c     02 30 66 F0 | 	shl	local06, #2
27230     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27234     F3 30 02 F1 | 	add	local06, ptr___system__dat__
27238     18 31 0A FB | 	rdlong	local06, local06 wz
2723c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27240     A8 01 90 AD |  if_e	jmp	#LR__3258
27244     19 2D 02 F6 | 	mov	local04, local07
27248     02 2C 66 F0 | 	shl	local04, #2
2724c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27250     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
27254     16 13 02 FB | 	rdlong	arg01, local04
27258     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2725c     09 35 02 F6 | 	mov	local08, arg01
27260     97 06 48 FB | 	callpa	#(@LR__3249-@LR__3248)>>2,fcache_load_ptr_
27264                 | LR__3248
27264     1A FB C9 FA | 	rdbyte	result1, local08 wz
27268     01 34 06 51 |  if_ne	add	local08, #1
2726c     F4 FF 9F 5D |  if_ne	jmp	#LR__3248
27270                 | LR__3249
27270     09 35 82 F1 | 	sub	local08, arg01
27274     1A 37 02 F6 | 	mov	local09, local08
27278     1B 2D 02 F6 | 	mov	local04, local09
2727c     13 2D 02 F1 | 	add	local04, local01
27280     16 31 C2 FA | 	rdbyte	local06, local04
27284     2F 30 0E F2 | 	cmp	local06, #47 wz
27288     1B 39 02 56 |  if_ne	mov	local10, local09
2728c     13 39 02 51 |  if_ne	add	local10, local01
27290     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
27294     54 01 90 5D |  if_ne	jmp	#LR__3257
27298     19 17 02 F6 | 	mov	arg03, local07
2729c     02 16 66 F0 | 	shl	arg03, #2
272a0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
272a4     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
272a8     0B 15 02 FB | 	rdlong	arg02, arg03
272ac     1B 17 02 F6 | 	mov	arg03, local09
272b0     13 13 02 F6 | 	mov	arg01, local01
272b4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
272b8     D4 4C B0 FD | 	call	#__system__strncmp
272bc     00 FA 4D F2 | 	cmps	result1, #0 wz
272c0     28 01 90 5D |  if_ne	jmp	#LR__3257
272c4     19 3B 02 F6 | 	mov	local11, local07
272c8     02 3A 66 F0 | 	shl	local11, #2
272cc     74 E6 05 F1 | 	add	ptr___system__dat__, #116
272d0     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
272d4     1D 3D 02 FB | 	rdlong	local12, local11
272d8     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
272dc     97 22 48 FB | 	callpa	#(@LR__3251-@LR__3250)>>2,fcache_load_ptr_
272e0                 | LR__3250
272e0     1B 31 02 F6 | 	mov	local06, local09
272e4     01 30 06 F1 | 	add	local06, #1
272e8     13 31 02 F1 | 	add	local06, local01
272ec     18 3B C2 FA | 	rdbyte	local11, local06
272f0     2E 3A 0E F2 | 	cmp	local11, #46 wz
272f4     2C 00 90 5D |  if_ne	jmp	#LR__3252
272f8     1B 3B 02 F6 | 	mov	local11, local09
272fc     02 3A 06 F1 | 	add	local11, #2
27300     13 3B 02 F1 | 	add	local11, local01
27304     1D 39 C2 FA | 	rdbyte	local10, local11
27308     2F 38 0E F2 | 	cmp	local10, #47 wz
2730c     1B 3F 02 56 |  if_ne	mov	local13, local09
27310     02 3E 06 51 |  if_ne	add	local13, #2
27314     13 3F 02 51 |  if_ne	add	local13, local01
27318     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
2731c     01 36 06 A1 |  if_e	add	local09, #1
27320     BC FF 9F AD |  if_e	jmp	#LR__3250
27324                 | LR__3251
27324                 | LR__3252
27324     00 2A 0E F2 | 	cmp	local03, #0 wz
27328     15 13 02 56 |  if_ne	mov	arg01, local03
2732c     13 15 02 56 |  if_ne	mov	arg02, local01
27330     00 17 06 56 |  if_ne	mov	arg03, #256
27334     AC 4B B0 5D |  if_ne	call	#__system__strncpy
27338     13 15 02 F6 | 	mov	arg02, local01
2733c     1B 15 02 F1 | 	add	arg02, local09
27340     01 14 06 F1 | 	add	arg02, #1
27344     13 13 02 F6 | 	mov	arg01, local01
27348     D4 F5 BF FD | 	call	#__system____builtin_strcpy
2734c     13 13 02 F6 | 	mov	arg01, local01
27350     09 35 02 F6 | 	mov	local08, arg01
27354     97 06 48 FB | 	callpa	#(@LR__3254-@LR__3253)>>2,fcache_load_ptr_
27358                 | LR__3253
27358     1A FB C9 FA | 	rdbyte	result1, local08 wz
2735c     01 34 06 51 |  if_ne	add	local08, #1
27360     F4 FF 9F 5D |  if_ne	jmp	#LR__3253
27364                 | LR__3254
27364     09 35 82 F1 | 	sub	local08, arg01
27368     1A 37 02 F6 | 	mov	local09, local08
2736c                 | LR__3255
2736c     01 36 56 F2 | 	cmps	local09, #1 wc
27370     70 00 90 CD |  if_b	jmp	#LR__3256
27374     1B 2D 02 F6 | 	mov	local04, local09
27378     13 2D 02 F1 | 	add	local04, local01
2737c     16 3B C2 FA | 	rdbyte	local11, local04
27380     2F 3A 0E F2 | 	cmp	local11, #47 wz
27384     1B 3B 02 A6 |  if_e	mov	local11, local09
27388     13 3B 02 A1 |  if_e	add	local11, local01
2738c     1D 01 48 AC |  if_e	wrbyte	#0, local11
27390     01 36 86 A1 |  if_e	sub	local09, #1
27394     D4 FF 9F AD |  if_e	jmp	#LR__3255
27398     1B 2D 02 F6 | 	mov	local04, local09
2739c     13 2D 02 F1 | 	add	local04, local01
273a0     16 3B C2 FA | 	rdbyte	local11, local04
273a4     2E 3A 0E F2 | 	cmp	local11, #46 wz
273a8     38 00 90 5D |  if_ne	jmp	#LR__3256
273ac     02 36 56 F2 | 	cmps	local09, #2 wc
273b0     30 00 90 CD |  if_b	jmp	#LR__3256
273b4     1B 41 02 F6 | 	mov	local14, local09
273b8     01 40 86 F1 | 	sub	local14, #1
273bc     13 41 02 F1 | 	add	local14, local01
273c0     20 2F C2 FA | 	rdbyte	local05, local14
273c4     2F 2E 0E F2 | 	cmp	local05, #47 wz
273c8     18 00 90 5D |  if_ne	jmp	#LR__3256
273cc     1B 2D 02 F6 | 	mov	local04, local09
273d0     01 2C 86 F1 | 	sub	local04, #1
273d4     13 2D 02 F1 | 	add	local04, local01
273d8     16 01 48 FC | 	wrbyte	#0, local04
273dc     02 36 86 F1 | 	sub	local09, #2
273e0     88 FF 9F FD | 	jmp	#LR__3255
273e4                 | LR__3256
273e4     1E FB 01 F6 | 	mov	result1, local12
273e8     1C 00 90 FD | 	jmp	#LR__3260
273ec                 | LR__3257
273ec                 | LR__3258
273ec     01 32 06 F1 | 	add	local07, #1
273f0     2C FE 9F FD | 	jmp	#LR__3247
273f4                 | LR__3259
273f4     02 00 00 FF 
273f8     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
273fc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
27400     02 00 00 FF 
27404     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
27408                 | LR__3260
27408     A7 F0 03 F6 | 	mov	ptra, fp
2740c     B2 00 A0 FD | 	call	#popregs_
27410                 | __system____getvfsforfile_ret
27410     2D 00 64 FD | 	ret
27414                 | 
27414                 | __system___basic_open
27414     05 4A 05 F6 | 	mov	COUNT_, #5
27418     A8 00 A0 FD | 	call	#pushregs_
2741c     0A 27 02 F6 | 	mov	local01, arg02
27420     0B 29 02 F6 | 	mov	local02, arg03
27424     0C 2B 02 F6 | 	mov	local03, arg04
27428     00 2C 06 F6 | 	mov	local04, #0
2742c     8C 4A B0 FD | 	call	#__system____getftab
27430     FD 2E 0A F6 | 	mov	local05, result1 wz
27434     18 00 90 5D |  if_ne	jmp	#LR__3270
27438     EE 12 02 F6 | 	mov	arg01, abortchain
2743c     0C 14 06 F6 | 	mov	arg02, #12
27440     01 16 06 F6 | 	mov	arg03, #1
27444     DA 00 A0 FD | 	call	#__longjmp
27448     01 FA 65 F6 | 	neg	result1, #1
2744c     14 01 90 FD | 	jmp	#LR__3279
27450                 | LR__3270
27450     08 2E 06 F1 | 	add	local05, #8
27454     17 FB 09 FB | 	rdlong	result1, local05 wz
27458     08 2E 86 F1 | 	sub	local05, #8
2745c     17 13 02 56 |  if_ne	mov	arg01, local05
27460     AC 41 B0 5D |  if_ne	call	#__system___closeraw
27464     00 26 0E F2 | 	cmp	local01, #0 wz
27468     00 28 0E A2 |  if_e	cmp	local02, #0 wz
2746c     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
27470     3C 00 90 AD |  if_e	jmp	#LR__3272
27474     0C 12 06 F6 | 	mov	arg01, #12
27478     94 36 B0 FD | 	call	#__system___gc_alloc_managed
2747c     FD 2C 0A F6 | 	mov	local04, result1 wz
27480     18 00 90 5D |  if_ne	jmp	#LR__3271
27484     EE 12 02 F6 | 	mov	arg01, abortchain
27488     07 14 06 F6 | 	mov	arg02, #7
2748c     01 16 06 F6 | 	mov	arg03, #1
27490     DA 00 A0 FD | 	call	#__longjmp
27494     01 FA 65 F6 | 	neg	result1, #1
27498     C8 00 90 FD | 	jmp	#LR__3279
2749c                 | LR__3271
2749c     16 01 68 FC | 	wrlong	#0, local04
274a0     04 2C 06 F1 | 	add	local04, #4
274a4     16 01 68 FC | 	wrlong	#0, local04
274a8     04 2C 86 F1 | 	sub	local04, #4
274ac     17 2D 62 FC | 	wrlong	local04, local05
274b0                 | LR__3272
274b0     00 26 0E F2 | 	cmp	local01, #0 wz
274b4     20 00 90 AD |  if_e	jmp	#LR__3273
274b8     16 27 62 FC | 	wrlong	local01, local04
274bc     16 FB 01 F6 | 	mov	result1, local04
274c0     00 10 05 FF 
274c4     00 FA 45 F5 | 	or	result1, ##169869312
274c8     1C 2E 06 F1 | 	add	local05, #28
274cc     17 FB 61 FC | 	wrlong	result1, local05
274d0     1C 2E 86 F1 | 	sub	local05, #28
274d4     0C 00 90 FD | 	jmp	#LR__3274
274d8                 | LR__3273
274d8     1C 2E 06 F1 | 	add	local05, #28
274dc     17 01 68 FC | 	wrlong	#0, local05
274e0     1C 2E 86 F1 | 	sub	local05, #28
274e4                 | LR__3274
274e4     00 28 0E F2 | 	cmp	local02, #0 wz
274e8     28 00 90 AD |  if_e	jmp	#LR__3275
274ec     04 2C 06 F1 | 	add	local04, #4
274f0     16 29 62 FC | 	wrlong	local02, local04
274f4     04 2C 86 F1 | 	sub	local04, #4
274f8     16 FB 01 F6 | 	mov	result1, local04
274fc     00 18 05 FF 
27500     00 FA 45 F5 | 	or	result1, ##170917888
27504     20 2E 06 F1 | 	add	local05, #32
27508     17 FB 61 FC | 	wrlong	result1, local05
2750c     20 2E 86 F1 | 	sub	local05, #32
27510     0C 00 90 FD | 	jmp	#LR__3276
27514                 | LR__3275
27514     20 2E 06 F1 | 	add	local05, #32
27518     17 01 68 FC | 	wrlong	#0, local05
2751c     20 2E 86 F1 | 	sub	local05, #32
27520                 | LR__3276
27520     00 2A 0E F2 | 	cmp	local03, #0 wz
27524     24 00 90 AD |  if_e	jmp	#LR__3277
27528     08 2C 06 F1 | 	add	local04, #8
2752c     16 2B 62 FC | 	wrlong	local03, local04
27530     08 2C 86 F1 | 	sub	local04, #8
27534     00 20 05 FF 
27538     00 2C 46 F5 | 	or	local04, ##171966464
2753c     24 2E 06 F1 | 	add	local05, #36
27540     17 2D 62 FC | 	wrlong	local04, local05
27544     24 2E 86 F1 | 	sub	local05, #36
27548     0C 00 90 FD | 	jmp	#LR__3278
2754c                 | LR__3277
2754c     24 2E 06 F1 | 	add	local05, #36
27550     17 01 68 FC | 	wrlong	#0, local05
27554     24 2E 86 F1 | 	sub	local05, #36
27558                 | LR__3278
27558     08 2E 06 F1 | 	add	local05, #8
2755c     17 0F 68 FC | 	wrlong	#7, local05
27560     00 FA 05 F6 | 	mov	result1, #0
27564                 | LR__3279
27564     A7 F0 03 F6 | 	mov	ptra, fp
27568     B2 00 A0 FD | 	call	#popregs_
2756c                 | __system___basic_open_ret
2756c     2D 00 64 FD | 	ret
27570                 | 
27570                 | __system___basic_open_string
27570     04 4A 05 F6 | 	mov	COUNT_, #4
27574     A8 00 A0 FD | 	call	#pushregs_
27578     0A 27 02 F6 | 	mov	local01, arg02
2757c     0B 29 02 F6 | 	mov	local02, arg03
27580     38 49 B0 FD | 	call	#__system____getftab
27584     FD 2A 0A F6 | 	mov	local03, result1 wz
27588     18 00 90 5D |  if_ne	jmp	#LR__3280
2758c     EE 12 02 F6 | 	mov	arg01, abortchain
27590     0C 14 06 F6 | 	mov	arg02, #12
27594     01 16 06 F6 | 	mov	arg03, #1
27598     DA 00 A0 FD | 	call	#__longjmp
2759c     01 FA 65 F6 | 	neg	result1, #1
275a0     5C 00 90 FD | 	jmp	#LR__3282
275a4                 | LR__3280
275a4     08 2A 06 F1 | 	add	local03, #8
275a8     15 19 0A FB | 	rdlong	arg04, local03 wz
275ac     08 2A 86 F1 | 	sub	local03, #8
275b0     15 13 02 56 |  if_ne	mov	arg01, local03
275b4     58 40 B0 5D |  if_ne	call	#__system___closeraw
275b8     13 15 02 F6 | 	mov	arg02, local01
275bc     14 17 02 F6 | 	mov	arg03, local02
275c0     15 13 02 F6 | 	mov	arg01, local03
275c4     B6 19 06 F6 | 	mov	arg04, #438
275c8     40 3D B0 FD | 	call	#__system___openraw
275cc     FD 2C 02 F6 | 	mov	local04, result1
275d0     00 2C 56 F2 | 	cmps	local04, #0 wc
275d4     24 00 90 3D |  if_ae	jmp	#LR__3281
275d8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
275dc     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
275e0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
275e4     EE 12 02 F6 | 	mov	arg01, abortchain
275e8     FD 14 02 FB | 	rdlong	arg02, result1
275ec     01 16 06 F6 | 	mov	arg03, #1
275f0     DA 00 A0 FD | 	call	#__longjmp
275f4     01 FA 65 F6 | 	neg	result1, #1
275f8     04 00 90 FD | 	jmp	#LR__3282
275fc                 | LR__3281
275fc     16 FB 01 F6 | 	mov	result1, local04
27600                 | LR__3282
27600     A7 F0 03 F6 | 	mov	ptra, fp
27604     B2 00 A0 FD | 	call	#popregs_
27608                 | __system___basic_open_string_ret
27608     2D 00 64 FD | 	ret
2760c                 | 
2760c                 | __system___basic_print_char
2760c     03 4A 05 F6 | 	mov	COUNT_, #3
27610     A8 00 A0 FD | 	call	#pushregs_
27614     0A 27 02 F6 | 	mov	local01, arg02
27618     44 50 B0 FD | 	call	#__system___gettxfunc
2761c     FD 28 0A F6 | 	mov	local02, result1 wz
27620     00 FA 05 A6 |  if_e	mov	result1, #0
27624     30 00 90 AD |  if_e	jmp	#LR__3290
27628     14 2B 02 F6 | 	mov	local03, local02
2762c     13 28 46 F7 | 	zerox	local02, #19
27630     14 2A 46 F0 | 	shr	local03, #20
27634     02 2A 66 F0 | 	shl	local03, #2
27638     ED 2A 02 F1 | 	add	local03, __methods__
2763c     15 2B 02 FB | 	rdlong	local03, local03
27640     13 13 02 F6 | 	mov	arg01, local01
27644     F2 26 02 F6 | 	mov	local01, objptr
27648     14 E5 01 F6 | 	mov	objptr, local02
2764c     2D 2A 62 FD | 	call	local03
27650     13 E5 01 F6 | 	mov	objptr, local01
27654     01 FA 05 F6 | 	mov	result1, #1
27658                 | LR__3290
27658     A7 F0 03 F6 | 	mov	ptra, fp
2765c     B2 00 A0 FD | 	call	#popregs_
27660                 | __system___basic_print_char_ret
27660     2D 00 64 FD | 	ret
27664                 | 
27664                 | __system___basic_print_string
27664     03 4A 05 F6 | 	mov	COUNT_, #3
27668     A8 00 A0 FD | 	call	#pushregs_
2766c     0A 27 02 F6 | 	mov	local01, arg02
27670     0B 29 02 F6 | 	mov	local02, arg03
27674     E8 4F B0 FD | 	call	#__system___gettxfunc
27678     FD 2A 0A F6 | 	mov	local03, result1 wz
2767c     00 FA 05 A6 |  if_e	mov	result1, #0
27680     18 00 90 AD |  if_e	jmp	#LR__3300
27684     00 26 0E F2 | 	cmp	local01, #0 wz
27688     00 FA 05 A6 |  if_e	mov	result1, #0
2768c     15 13 02 56 |  if_ne	mov	arg01, local03
27690     14 15 02 56 |  if_ne	mov	arg02, local02
27694     13 17 02 56 |  if_ne	mov	arg03, local01
27698     08 02 B0 5D |  if_ne	call	#__system___fmtstr
2769c                 | LR__3300
2769c     A7 F0 03 F6 | 	mov	ptra, fp
276a0     B2 00 A0 FD | 	call	#popregs_
276a4                 | __system___basic_print_string_ret
276a4     2D 00 64 FD | 	ret
276a8                 | 
276a8                 | __system___basic_print_integer
276a8     04 4A 05 F6 | 	mov	COUNT_, #4
276ac     A8 00 A0 FD | 	call	#pushregs_
276b0     0A 27 02 F6 | 	mov	local01, arg02
276b4     0B 29 02 F6 | 	mov	local02, arg03
276b8     0C 2B 02 F6 | 	mov	local03, arg04
276bc     A0 4F B0 FD | 	call	#__system___gettxfunc
276c0     FD 2C 0A F6 | 	mov	local04, result1 wz
276c4     00 FA 05 A6 |  if_e	mov	result1, #0
276c8     16 13 02 56 |  if_ne	mov	arg01, local04
276cc     14 15 02 56 |  if_ne	mov	arg02, local02
276d0     13 17 02 56 |  if_ne	mov	arg03, local01
276d4     15 19 02 56 |  if_ne	mov	arg04, local03
276d8     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
276dc     A7 F0 03 F6 | 	mov	ptra, fp
276e0     B2 00 A0 FD | 	call	#popregs_
276e4                 | __system___basic_print_integer_ret
276e4     2D 00 64 FD | 	ret
276e8                 | 
276e8                 | __system___basic_print_unsigned
276e8     03 4A 05 F6 | 	mov	COUNT_, #3
276ec     A8 00 A0 FD | 	call	#pushregs_
276f0     0A 27 02 F6 | 	mov	local01, arg02
276f4     0B 29 02 F6 | 	mov	local02, arg03
276f8     0C 2B 02 F6 | 	mov	local03, arg04
276fc     60 4F B0 FD | 	call	#__system___gettxfunc
27700     FD 12 0A F6 | 	mov	arg01, result1 wz
27704     00 FA 05 A6 |  if_e	mov	result1, #0
27708     3A 28 26 54 |  if_ne	bith	local02, #58
2770c     14 15 02 56 |  if_ne	mov	arg02, local02
27710     13 17 02 56 |  if_ne	mov	arg03, local01
27714     15 19 02 56 |  if_ne	mov	arg04, local03
27718     74 02 B0 5D |  if_ne	call	#__system___fmtnum
2771c     A7 F0 03 F6 | 	mov	ptra, fp
27720     B2 00 A0 FD | 	call	#popregs_
27724                 | __system___basic_print_unsigned_ret
27724     2D 00 64 FD | 	ret
27728                 | 
27728                 | __system___basic_get_char
27728     03 4A 05 F6 | 	mov	COUNT_, #3
2772c     A8 00 A0 FD | 	call	#pushregs_
27730     70 4F B0 FD | 	call	#__system___getrxfunc
27734     FD 26 0A F6 | 	mov	local01, result1 wz
27738     01 FA 65 A6 |  if_e	neg	result1, #1
2773c     28 00 90 AD |  if_e	jmp	#LR__3310
27740     13 29 02 F6 | 	mov	local02, local01
27744     13 26 46 F7 | 	zerox	local01, #19
27748     14 28 46 F0 | 	shr	local02, #20
2774c     02 28 66 F0 | 	shl	local02, #2
27750     ED 28 02 F1 | 	add	local02, __methods__
27754     14 29 02 FB | 	rdlong	local02, local02
27758     F2 2A 02 F6 | 	mov	local03, objptr
2775c     13 E5 01 F6 | 	mov	objptr, local01
27760     2D 28 62 FD | 	call	local02
27764     15 E5 01 F6 | 	mov	objptr, local03
27768                 | LR__3310
27768     A7 F0 03 F6 | 	mov	ptra, fp
2776c     B2 00 A0 FD | 	call	#popregs_
27770                 | __system___basic_get_char_ret
27770     2D 00 64 FD | 	ret
27774                 | 
27774                 | __system___basic_put
27774     04 4A 05 F6 | 	mov	COUNT_, #4
27778     A8 00 A0 FD | 	call	#pushregs_
2777c     0D 27 02 F6 | 	mov	local01, arg05
27780     13 19 02 FD | 	qmul	arg04, local01
27784     09 29 02 F6 | 	mov	local02, arg01
27788     0B 2B 02 F6 | 	mov	local03, arg03
2778c     00 14 0E F2 | 	cmp	arg02, #0 wz
27790     01 14 86 51 |  if_ne	sub	arg02, #1
27794     14 13 02 56 |  if_ne	mov	arg01, local02
27798     00 16 06 56 |  if_ne	mov	arg03, #0
2779c     18 2C 62 FD | 	getqx	local04
277a0     60 45 B0 5D |  if_ne	call	#__system__lseek
277a4     15 15 02 F6 | 	mov	arg02, local03
277a8     16 17 02 F6 | 	mov	arg03, local04
277ac     14 13 02 F6 | 	mov	arg01, local02
277b0     9C 44 B0 FD | 	call	#__system__write
277b4     FD 2C 02 F6 | 	mov	local04, result1
277b8     01 2C 56 F2 | 	cmps	local04, #1 wc
277bc     10 00 90 CD |  if_b	jmp	#LR__3320
277c0     16 91 02 F6 | 	mov	muldiva_, local04
277c4     13 93 02 F6 | 	mov	muldivb_, local01
277c8     BA 00 A0 FD | 	call	#divide_
277cc     49 2D 02 F6 | 	mov	local04, muldivb_
277d0                 | LR__3320
277d0     16 FB 01 F6 | 	mov	result1, local04
277d4     A7 F0 03 F6 | 	mov	ptra, fp
277d8     B2 00 A0 FD | 	call	#popregs_
277dc                 | __system___basic_put_ret
277dc     2D 00 64 FD | 	ret
277e0                 | 
277e0                 | __system___basic_get
277e0     04 4A 05 F6 | 	mov	COUNT_, #4
277e4     A8 00 A0 FD | 	call	#pushregs_
277e8     0D 27 02 F6 | 	mov	local01, arg05
277ec     13 19 02 FD | 	qmul	arg04, local01
277f0     09 29 02 F6 | 	mov	local02, arg01
277f4     0B 2B 02 F6 | 	mov	local03, arg03
277f8     00 14 0E F2 | 	cmp	arg02, #0 wz
277fc     01 14 86 51 |  if_ne	sub	arg02, #1
27800     14 13 02 56 |  if_ne	mov	arg01, local02
27804     00 16 06 56 |  if_ne	mov	arg03, #0
27808     18 2C 62 FD | 	getqx	local04
2780c     F4 44 B0 5D |  if_ne	call	#__system__lseek
27810     15 15 02 F6 | 	mov	arg02, local03
27814     16 17 02 F6 | 	mov	arg03, local04
27818     14 13 02 F6 | 	mov	arg01, local02
2781c     6C 44 B0 FD | 	call	#__system__read
27820     FD 2C 02 F6 | 	mov	local04, result1
27824     01 2C 56 F2 | 	cmps	local04, #1 wc
27828     10 00 90 CD |  if_b	jmp	#LR__3330
2782c     16 91 02 F6 | 	mov	muldiva_, local04
27830     13 93 02 F6 | 	mov	muldivb_, local01
27834     BA 00 A0 FD | 	call	#divide_
27838     49 2D 02 F6 | 	mov	local04, muldivb_
2783c                 | LR__3330
2783c     16 FB 01 F6 | 	mov	result1, local04
27840     A7 F0 03 F6 | 	mov	ptra, fp
27844     B2 00 A0 FD | 	call	#popregs_
27848                 | __system___basic_get_ret
27848     2D 00 64 FD | 	ret
2784c                 | 
2784c                 | __system___fmtchar
2784c     00 4A 05 F6 | 	mov	COUNT_, #0
27850     A8 00 A0 FD | 	call	#pushregs_
27854     10 F0 07 F1 | 	add	ptra, #16
27858     04 4E 05 F1 | 	add	fp, #4
2785c     A7 12 62 FC | 	wrlong	arg01, fp
27860     04 4E 05 F1 | 	add	fp, #4
27864     A7 14 62 FC | 	wrlong	arg02, fp
27868     04 4E 05 F1 | 	add	fp, #4
2786c     A7 16 62 FC | 	wrlong	arg03, fp
27870     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
27874     A7 16 62 FC | 	wrlong	arg03, fp
27878     08 4E 85 F1 | 	sub	fp, #8
2787c     A7 12 02 FB | 	rdlong	arg01, fp
27880     04 4E 05 F1 | 	add	fp, #4
27884     A7 14 02 FB | 	rdlong	arg02, fp
27888     04 4E 05 F1 | 	add	fp, #4
2788c     A7 16 02 F6 | 	mov	arg03, fp
27890     0C 4E 85 F1 | 	sub	fp, #12
27894     0C 00 B0 FD | 	call	#__system___fmtstr
27898     A7 F0 03 F6 | 	mov	ptra, fp
2789c     B2 00 A0 FD | 	call	#popregs_
278a0                 | __system___fmtchar_ret
278a0     2D 00 64 FD | 	ret
278a4                 | 
278a4                 | __system___fmtstr
278a4     09 4A 05 F6 | 	mov	COUNT_, #9
278a8     A8 00 A0 FD | 	call	#pushregs_
278ac     09 27 02 F6 | 	mov	local01, arg01
278b0     0A 29 02 F6 | 	mov	local02, arg02
278b4     0B 2B 02 F6 | 	mov	local03, arg03
278b8     14 19 E2 F8 | 	getbyte	arg04, local02, #0
278bc     15 13 02 F6 | 	mov	arg01, local03
278c0     09 2D 02 F6 | 	mov	local04, arg01
278c4     97 06 48 FB | 	callpa	#(@LR__3341-@LR__3340)>>2,fcache_load_ptr_
278c8                 | LR__3340
278c8     16 FB C9 FA | 	rdbyte	result1, local04 wz
278cc     01 2C 06 51 |  if_ne	add	local04, #1
278d0     F4 FF 9F 5D |  if_ne	jmp	#LR__3340
278d4                 | LR__3341
278d4     09 2D 82 F1 | 	sub	local04, arg01
278d8     00 18 0E F2 | 	cmp	arg04, #0 wz
278dc     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
278e0     14 15 02 F6 | 	mov	arg02, local02
278e4     16 17 02 F6 | 	mov	arg03, local04
278e8     13 13 02 F6 | 	mov	arg01, local01
278ec     02 18 06 F6 | 	mov	arg04, #2
278f0     BC 49 B0 FD | 	call	#__system___fmtpad
278f4     FD 2E 02 F6 | 	mov	local05, result1
278f8     00 2E 56 F2 | 	cmps	local05, #0 wc
278fc     17 FB 01 C6 |  if_b	mov	result1, local05
27900     80 00 90 CD |  if_b	jmp	#LR__3344
27904     01 2C 56 F2 | 	cmps	local04, #1 wc
27908     50 00 90 CD |  if_b	jmp	#LR__3343
2790c     16 31 02 F6 | 	mov	local06, local04
27910                 | LR__3342
27910     13 33 02 F6 | 	mov	local07, local01
27914     13 35 02 F6 | 	mov	local08, local01
27918     13 32 46 F7 | 	zerox	local07, #19
2791c     14 34 46 F0 | 	shr	local08, #20
27920     02 34 66 F0 | 	shl	local08, #2
27924     ED 34 02 F1 | 	add	local08, __methods__
27928     1A 35 02 FB | 	rdlong	local08, local08
2792c     15 13 C2 FA | 	rdbyte	arg01, local03
27930     F2 36 02 F6 | 	mov	local09, objptr
27934     19 E5 01 F6 | 	mov	objptr, local07
27938     01 2A 06 F1 | 	add	local03, #1
2793c     2D 34 62 FD | 	call	local08
27940     1B E5 01 F6 | 	mov	objptr, local09
27944     FD 36 02 F6 | 	mov	local09, result1
27948     00 36 56 F2 | 	cmps	local09, #0 wc
2794c     1B FB 01 C6 |  if_b	mov	result1, local09
27950     30 00 90 CD |  if_b	jmp	#LR__3344
27954     1B 2F 02 F1 | 	add	local05, local09
27958     ED 31 6E FB | 	djnz	local06, #LR__3342
2795c                 | LR__3343
2795c     14 15 02 F6 | 	mov	arg02, local02
27960     16 17 02 F6 | 	mov	arg03, local04
27964     13 13 02 F6 | 	mov	arg01, local01
27968     01 18 06 F6 | 	mov	arg04, #1
2796c     40 49 B0 FD | 	call	#__system___fmtpad
27970     FD 36 02 F6 | 	mov	local09, result1
27974     00 36 56 F2 | 	cmps	local09, #0 wc
27978     1B FB 01 C6 |  if_b	mov	result1, local09
2797c     1B 2F 02 31 |  if_ae	add	local05, local09
27980     17 FB 01 36 |  if_ae	mov	result1, local05
27984                 | LR__3344
27984     A7 F0 03 F6 | 	mov	ptra, fp
27988     B2 00 A0 FD | 	call	#popregs_
2798c                 | __system___fmtstr_ret
2798c     2D 00 64 FD | 	ret
27990                 | 
27990                 | __system___fmtnum
27990     0B 4A 05 F6 | 	mov	COUNT_, #11
27994     A8 00 A0 FD | 	call	#pushregs_
27998     09 27 02 F6 | 	mov	local01, arg01
2799c     0A 29 02 F6 | 	mov	local02, arg02
279a0     0B 2B 02 F6 | 	mov	local03, arg03
279a4     0C 2D 02 F6 | 	mov	local04, arg04
279a8     F8 2F 02 F6 | 	mov	local05, ptra
279ac     17 31 02 F6 | 	mov	local06, local05
279b0     00 32 06 F6 | 	mov	local07, #0
279b4     14 35 02 F6 | 	mov	local08, local02
279b8     10 34 46 F0 | 	shr	local08, #16
279bc     3F 34 06 F5 | 	and	local08, #63
279c0     14 37 E2 F8 | 	getbyte	local09, local02, #0
279c4     14 39 02 F6 | 	mov	local10, local02
279c8     1A 38 46 F0 | 	shr	local10, #26
279cc     03 38 06 F5 | 	and	local10, #3
279d0     1C 3B 02 F6 | 	mov	local11, local10
279d4     01 34 56 F2 | 	cmps	local08, #1 wc
279d8     44 F0 07 F1 | 	add	ptra, #68
279dc     01 34 86 31 |  if_ae	sub	local08, #1
279e0     41 36 56 F2 | 	cmps	local09, #65 wc
279e4     00 36 0E C2 |  if_b	cmp	local09, #0 wz
279e8     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
279ec     03 3A 0E F2 | 	cmp	local11, #3 wz
279f0     00 3A 06 A6 |  if_e	mov	local11, #0
279f4     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
279f8     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
279fc     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
27a00     00 3A 0E F2 | 	cmp	local11, #0 wz
27a04     4C 00 90 AD |  if_e	jmp	#LR__3353
27a08     01 32 06 F6 | 	mov	local07, #1
27a0c     1B 35 0A F2 | 	cmp	local08, local09 wz
27a10     18 00 90 5D |  if_ne	jmp	#LR__3351
27a14     05 34 6E FB | 	djnz	local08, #LR__3350
27a18     13 13 02 F6 | 	mov	arg01, local01
27a1c     14 15 02 F6 | 	mov	arg02, local02
27a20     23 16 06 F6 | 	mov	arg03, #35
27a24     24 FE BF FD | 	call	#__system___fmtchar
27a28     88 00 90 FD | 	jmp	#LR__3357
27a2c                 | LR__3350
27a2c                 | LR__3351
27a2c     02 3A 0E F2 | 	cmp	local11, #2 wz
27a30     18 39 02 A6 |  if_e	mov	local10, local06
27a34     01 30 06 A1 |  if_e	add	local06, #1
27a38     1C 41 48 AC |  if_e	wrbyte	#32, local10
27a3c     14 00 90 AD |  if_e	jmp	#LR__3352
27a40     04 3A 0E F2 | 	cmp	local11, #4 wz
27a44     18 5B 48 AC |  if_e	wrbyte	#45, local06
27a48     01 30 06 A1 |  if_e	add	local06, #1
27a4c     18 57 48 5C |  if_ne	wrbyte	#43, local06
27a50     01 30 06 51 |  if_ne	add	local06, #1
27a54                 | LR__3352
27a54                 | LR__3353
27a54     18 13 02 F6 | 	mov	arg01, local06
27a58     15 15 02 F6 | 	mov	arg02, local03
27a5c     16 17 02 F6 | 	mov	arg03, local04
27a60     1A 19 02 F6 | 	mov	arg04, local08
27a64     00 1A 06 F6 | 	mov	arg05, #0
27a68     1D 28 2E F4 | 	testbn	local02, #29 wz
27a6c     01 1A 06 56 |  if_ne	mov	arg05, #1
27a70     04 49 B0 FD | 	call	#__system___uitoa
27a74     FD 32 02 F1 | 	add	local07, result1
27a78     1B 33 5A F2 | 	cmps	local07, local09 wcz
27a7c     24 00 90 ED |  if_be	jmp	#LR__3356
27a80     97 0E 48 FB | 	callpa	#(@LR__3355-@LR__3354)>>2,fcache_load_ptr_
27a84                 | LR__3354
27a84     1B 39 02 F6 | 	mov	local10, local09
27a88     01 38 56 F2 | 	cmps	local10, #1 wc
27a8c     01 36 86 F1 | 	sub	local09, #1
27a90     18 39 02 36 |  if_ae	mov	local10, local06
27a94     01 30 06 31 |  if_ae	add	local06, #1
27a98     1C 47 48 3C |  if_ae	wrbyte	#35, local10
27a9c     E4 FF 9F 3D |  if_ae	jmp	#LR__3354
27aa0                 | LR__3355
27aa0     18 01 48 FC | 	wrbyte	#0, local06
27aa4                 | LR__3356
27aa4     13 13 02 F6 | 	mov	arg01, local01
27aa8     14 15 02 F6 | 	mov	arg02, local02
27aac     17 17 02 F6 | 	mov	arg03, local05
27ab0     F0 FD BF FD | 	call	#__system___fmtstr
27ab4                 | LR__3357
27ab4     A7 F0 03 F6 | 	mov	ptra, fp
27ab8     B2 00 A0 FD | 	call	#popregs_
27abc                 | __system___fmtnum_ret
27abc     2D 00 64 FD | 	ret
27ac0                 | 
27ac0                 | __system___fmtfloat
27ac0     10 4A 05 F6 | 	mov	COUNT_, #16
27ac4     A8 00 A0 FD | 	call	#pushregs_
27ac8     24 F1 07 F1 | 	add	ptra, #292
27acc     04 4E 05 F1 | 	add	fp, #4
27ad0     A7 12 62 FC | 	wrlong	arg01, fp
27ad4     04 4E 05 F1 | 	add	fp, #4
27ad8     A7 14 62 FC | 	wrlong	arg02, fp
27adc     04 4E 05 F1 | 	add	fp, #4
27ae0     A7 16 62 FC | 	wrlong	arg03, fp
27ae4     04 4E 05 F1 | 	add	fp, #4
27ae8     A7 18 62 FC | 	wrlong	arg04, fp
27aec     0C 4E 05 F1 | 	add	fp, #12
27af0     A7 14 68 FC | 	wrlong	#10, fp
27af4     08 4E 05 F1 | 	add	fp, #8
27af8     A7 00 68 FC | 	wrlong	#0, fp
27afc     08 4E 05 F1 | 	add	fp, #8
27b00     A7 00 68 FC | 	wrlong	#0, fp
27b04     08 4E 05 F1 | 	add	fp, #8
27b08     A7 00 68 FC | 	wrlong	#0, fp
27b0c     04 4E 05 F1 | 	add	fp, #4
27b10     A7 04 68 FC | 	wrlong	#2, fp
27b14     04 4E 05 F1 | 	add	fp, #4
27b18     A7 00 68 FC | 	wrlong	#0, fp
27b1c     04 4E 05 F1 | 	add	fp, #4
27b20     A7 00 68 FC | 	wrlong	#0, fp
27b24     04 4E 05 F1 | 	add	fp, #4
27b28     A7 00 68 FC | 	wrlong	#0, fp
27b2c     04 4E 05 F1 | 	add	fp, #4
27b30     A7 00 68 FC | 	wrlong	#0, fp
27b34     18 4E 05 F1 | 	add	fp, #24
27b38     A7 00 68 FC | 	wrlong	#0, fp
27b3c     68 4E 05 F1 | 	add	fp, #104
27b40     A7 26 02 F6 | 	mov	local01, fp
27b44     08 4E 85 F1 | 	sub	fp, #8
27b48     A7 26 62 FC | 	wrlong	local01, fp
27b4c     04 4E 05 F1 | 	add	fp, #4
27b50     A7 26 62 FC | 	wrlong	local01, fp
27b54     BC 4E 85 F1 | 	sub	fp, #188
27b58     A7 26 02 FB | 	rdlong	local01, fp
27b5c     10 26 46 F0 | 	shr	local01, #16
27b60     3F 26 06 F5 | 	and	local01, #63
27b64     B0 4E 05 F1 | 	add	fp, #176
27b68     A7 26 62 FC | 	wrlong	local01, fp
27b6c     B0 4E 85 F1 | 	sub	fp, #176
27b70     A7 26 02 FB | 	rdlong	local01, fp
27b74     1C 26 46 F0 | 	shr	local01, #28
27b78     01 26 06 F5 | 	and	local01, #1
27b7c     08 4F 05 F1 | 	add	fp, #264
27b80     A7 26 62 FC | 	wrlong	local01, fp
27b84     58 4E 85 F1 | 	sub	fp, #88
27b88     A7 26 0A FB | 	rdlong	local01, fp wz
27b8c     B8 4E 85 F1 | 	sub	fp, #184
27b90     3C 00 90 5D |  if_ne	jmp	#LR__3361
27b94     10 4E 05 F1 | 	add	fp, #16
27b98     A7 26 02 FB | 	rdlong	local01, fp
27b9c     10 4E 85 F1 | 	sub	fp, #16
27ba0     61 26 0E F2 | 	cmp	local01, #97 wz
27ba4     18 00 90 5D |  if_ne	jmp	#LR__3360
27ba8     B8 4E 05 F1 | 	add	fp, #184
27bac     A7 1A 68 FC | 	wrlong	#13, fp
27bb0     84 4E 85 F1 | 	sub	fp, #132
27bb4     A7 02 68 FC | 	wrlong	#1, fp
27bb8     34 4E 85 F1 | 	sub	fp, #52
27bbc     24 00 90 FD | 	jmp	#LR__3362
27bc0                 | LR__3360
27bc0     B8 4E 05 F1 | 	add	fp, #184
27bc4     A7 0C 68 FC | 	wrlong	#6, fp
27bc8     B8 4E 85 F1 | 	sub	fp, #184
27bcc     14 00 90 FD | 	jmp	#LR__3362
27bd0                 | LR__3361
27bd0     B8 4E 05 F1 | 	add	fp, #184
27bd4     A7 26 02 FB | 	rdlong	local01, fp
27bd8     01 26 86 F1 | 	sub	local01, #1
27bdc     A7 26 62 FC | 	wrlong	local01, fp
27be0     B8 4E 85 F1 | 	sub	fp, #184
27be4                 | LR__3362
27be4     08 4E 05 F1 | 	add	fp, #8
27be8     A7 26 02 FB | 	rdlong	local01, fp
27bec     16 26 46 F0 | 	shr	local01, #22
27bf0     03 26 06 F5 | 	and	local01, #3
27bf4     04 4F 05 F1 | 	add	fp, #260
27bf8     A7 26 62 FC | 	wrlong	local01, fp
27bfc     04 4F 85 F1 | 	sub	fp, #260
27c00     A7 26 02 FB | 	rdlong	local01, fp
27c04     1D 26 46 F0 | 	shr	local01, #29
27c08     01 26 06 F5 | 	and	local01, #1
27c0c     B4 4E 05 F1 | 	add	fp, #180
27c10     A7 26 62 FC | 	wrlong	local01, fp
27c14     B4 4E 85 F1 | 	sub	fp, #180
27c18     A7 26 02 FB | 	rdlong	local01, fp
27c1c     13 27 EA F8 | 	getbyte	local01, local01, #1
27c20     60 4E 05 F1 | 	add	fp, #96
27c24     A7 26 62 FC | 	wrlong	local01, fp
27c28     60 4E 85 F1 | 	sub	fp, #96
27c2c     A7 26 02 FB | 	rdlong	local01, fp
27c30     13 27 E2 F8 | 	getbyte	local01, local01, #0
27c34     64 4E 05 F1 | 	add	fp, #100
27c38     A7 26 62 FC | 	wrlong	local01, fp
27c3c     00 26 06 F6 | 	mov	local01, #0
27c40     5C 4E 85 F1 | 	sub	fp, #92
27c44     A7 1A 02 FB | 	rdlong	arg05, fp
27c48     65 1A 0E F2 | 	cmp	arg05, #101 wz
27c4c     01 26 06 A6 |  if_e	mov	local01, #1
27c50     14 4E 05 F1 | 	add	fp, #20
27c54     A7 26 62 FC | 	wrlong	local01, fp
27c58     98 4E 05 F1 | 	add	fp, #152
27c5c     A7 28 0A FB | 	rdlong	local02, fp wz
27c60     45 26 06 56 |  if_ne	mov	local01, #69
27c64     65 26 06 A6 |  if_e	mov	local01, #101
27c68     8C 4E 85 F1 | 	sub	fp, #140
27c6c     A7 26 62 FC | 	wrlong	local01, fp
27c70     20 4E 85 F1 | 	sub	fp, #32
27c74     A7 26 02 FB | 	rdlong	local01, fp
27c78     10 4E 85 F1 | 	sub	fp, #16
27c7c     61 26 0E F2 | 	cmp	local01, #97 wz
27c80     4C 00 90 5D |  if_ne	jmp	#LR__3363
27c84     24 4E 05 F1 | 	add	fp, #36
27c88     A7 02 68 FC | 	wrlong	#1, fp
27c8c     98 4E 05 F1 | 	add	fp, #152
27c90     A7 28 0A FB | 	rdlong	local02, fp wz
27c94     50 26 06 56 |  if_ne	mov	local01, #80
27c98     70 26 06 A6 |  if_e	mov	local01, #112
27c9c     8C 4E 85 F1 | 	sub	fp, #140
27ca0     A7 26 62 FC | 	wrlong	local01, fp
27ca4     14 4E 85 F1 | 	sub	fp, #20
27ca8     A7 04 68 FC | 	wrlong	#2, fp
27cac     1C 4E 05 F1 | 	add	fp, #28
27cb0     A7 02 68 FC | 	wrlong	#1, fp
27cb4     84 4E 05 F1 | 	add	fp, #132
27cb8     A7 28 0A FB | 	rdlong	local02, fp wz
27cbc     58 26 06 56 |  if_ne	mov	local01, #88
27cc0     78 26 06 A6 |  if_e	mov	local01, #120
27cc4     7C 4E 85 F1 | 	sub	fp, #124
27cc8     A7 26 62 FC | 	wrlong	local01, fp
27ccc     40 4E 85 F1 | 	sub	fp, #64
27cd0                 | LR__3363
27cd0     10 4E 05 F1 | 	add	fp, #16
27cd4     A7 26 02 FB | 	rdlong	local01, fp
27cd8     10 4E 85 F1 | 	sub	fp, #16
27cdc     23 26 0E F2 | 	cmp	local01, #35 wz
27ce0     3C 00 90 5D |  if_ne	jmp	#LR__3366
27ce4     48 4E 05 F1 | 	add	fp, #72
27ce8     A7 02 68 FC | 	wrlong	#1, fp
27cec     C8 4E 05 F1 | 	add	fp, #200
27cf0     A7 26 0A FB | 	rdlong	local01, fp wz
27cf4     10 4F 85 F1 | 	sub	fp, #272
27cf8     18 00 90 AD |  if_e	jmp	#LR__3364
27cfc     10 4E 05 F1 | 	add	fp, #16
27d00     A7 CC 68 FC | 	wrlong	#102, fp
27d04     00 4F 05 F1 | 	add	fp, #256
27d08     A7 00 68 FC | 	wrlong	#0, fp
27d0c     10 4F 85 F1 | 	sub	fp, #272
27d10     0C 00 90 FD | 	jmp	#LR__3365
27d14                 | LR__3364
27d14     10 4F 05 F1 | 	add	fp, #272
27d18     A7 02 68 FC | 	wrlong	#1, fp
27d1c     10 4F 85 F1 | 	sub	fp, #272
27d20                 | LR__3365
27d20                 | LR__3366
27d20     08 4E 05 F1 | 	add	fp, #8
27d24     A7 26 02 FB | 	rdlong	local01, fp
27d28     1A 26 46 F0 | 	shr	local01, #26
27d2c     03 26 06 F5 | 	and	local01, #3
27d30     5C 4E 05 F1 | 	add	fp, #92
27d34     A7 26 62 FC | 	wrlong	local01, fp
27d38     58 4E 85 F1 | 	sub	fp, #88
27d3c     A7 FA 01 FB | 	rdlong	result1, fp
27d40     0C 4E 85 F1 | 	sub	fp, #12
27d44     1F FA 4D F0 | 	shr	result1, #31 wz
27d48     20 00 90 AD |  if_e	jmp	#LR__3367
27d4c     2C 4E 05 F1 | 	add	fp, #44
27d50     A7 5A 68 FC | 	wrlong	#45, fp
27d54     20 4E 85 F1 | 	sub	fp, #32
27d58     A7 FA 01 FB | 	rdlong	result1, fp
27d5c     1F FA E5 F4 | 	bitnot	result1, #31
27d60     A7 FA 61 FC | 	wrlong	result1, fp
27d64     0C 4E 85 F1 | 	sub	fp, #12
27d68     3C 00 90 FD | 	jmp	#LR__3369
27d6c                 | LR__3367
27d6c     64 4E 05 F1 | 	add	fp, #100
27d70     A7 26 02 FB | 	rdlong	local01, fp
27d74     64 4E 85 F1 | 	sub	fp, #100
27d78     01 26 0E F2 | 	cmp	local01, #1 wz
27d7c     2C 4E 05 A1 |  if_e	add	fp, #44
27d80     A7 56 68 AC |  if_e	wrlong	#43, fp
27d84     2C 4E 85 A1 |  if_e	sub	fp, #44
27d88     1C 00 90 AD |  if_e	jmp	#LR__3368
27d8c     64 4E 05 F1 | 	add	fp, #100
27d90     A7 26 02 FB | 	rdlong	local01, fp
27d94     64 4E 85 F1 | 	sub	fp, #100
27d98     02 26 0E F2 | 	cmp	local01, #2 wz
27d9c     2C 4E 05 A1 |  if_e	add	fp, #44
27da0     A7 40 68 AC |  if_e	wrlong	#32, fp
27da4     2C 4E 85 A1 |  if_e	sub	fp, #44
27da8                 | LR__3368
27da8                 | LR__3369
27da8     08 4E 05 F1 | 	add	fp, #8
27dac     A7 26 02 FB | 	rdlong	local01, fp
27db0     18 26 46 F0 | 	shr	local01, #24
27db4     03 26 06 F5 | 	and	local01, #3
27db8     3C 4E 05 F1 | 	add	fp, #60
27dbc     A7 26 62 FC | 	wrlong	local01, fp
27dc0     00 26 06 F6 | 	mov	local01, #0
27dc4     18 4E 85 F1 | 	sub	fp, #24
27dc8     A7 2A 0A FB | 	rdlong	local03, fp wz
27dcc     2C 4E 85 F1 | 	sub	fp, #44
27dd0     18 00 90 5D |  if_ne	jmp	#LR__3370
27dd4     1C 4E 05 F1 | 	add	fp, #28
27dd8     A7 2C 02 FB | 	rdlong	local04, fp
27ddc     1C 4E 85 F1 | 	sub	fp, #28
27de0     16 2F 02 F6 | 	mov	local05, local04
27de4     0A 2E 0E F2 | 	cmp	local05, #10 wz
27de8     04 00 90 AD |  if_e	jmp	#LR__3371
27dec                 | LR__3370
27dec     01 26 66 F5 | 	xor	local01, #1
27df0                 | LR__3371
27df0     3C 4E 05 F1 | 	add	fp, #60
27df4     A7 26 62 FC | 	wrlong	local01, fp
27df8     3C 4E 85 F1 | 	sub	fp, #60
27dfc     00 26 0E F2 | 	cmp	local01, #0 wz
27e00     0C 01 90 AD |  if_e	jmp	#LR__3373
27e04     44 4E 05 F1 | 	add	fp, #68
27e08     A7 2E 02 FB | 	rdlong	local05, fp
27e0c     44 4E 85 F1 | 	sub	fp, #68
27e10     17 2B 02 F6 | 	mov	local03, local05
27e14     02 2A 0E F2 | 	cmp	local03, #2 wz
27e18     F4 00 90 5D |  if_ne	jmp	#LR__3373
27e1c     0C 4F 05 F1 | 	add	fp, #268
27e20     A7 30 02 FB | 	rdlong	local06, fp
27e24     0C 4F 85 F1 | 	sub	fp, #268
27e28     18 2D 02 F6 | 	mov	local04, local06
27e2c     02 2C 0E F2 | 	cmp	local04, #2 wz
27e30     DC 00 90 AD |  if_e	jmp	#LR__3373
27e34     C0 4E 05 F1 | 	add	fp, #192
27e38     A7 12 02 FB | 	rdlong	arg01, fp
27e3c     94 4E 85 F1 | 	sub	fp, #148
27e40     A7 14 02 FB | 	rdlong	arg02, fp
27e44     14 4E 05 F1 | 	add	fp, #20
27e48     A7 16 02 FB | 	rdlong	arg03, fp
27e4c     40 4E 85 F1 | 	sub	fp, #64
27e50     8C 47 B0 FD | 	call	#__system__emitsign_0568
27e54     14 4F 05 F1 | 	add	fp, #276
27e58     A7 FA 61 FC | 	wrlong	result1, fp
27e5c     14 4F 85 F1 | 	sub	fp, #276
27e60     00 FA 55 F2 | 	cmps	result1, #0 wc
27e64     14 4F 05 C1 |  if_b	add	fp, #276
27e68     A7 FA 01 CB |  if_b	rdlong	result1, fp
27e6c     14 4F 85 C1 |  if_b	sub	fp, #276
27e70     6C 0B 90 CD |  if_b	jmp	#LR__3423
27e74     C0 4E 05 F1 | 	add	fp, #192
27e78     A7 26 02 FB | 	rdlong	local01, fp
27e7c     54 4E 05 F1 | 	add	fp, #84
27e80     A7 2E 02 FB | 	rdlong	local05, fp
27e84     17 2B 02 F6 | 	mov	local03, local05
27e88     17 27 02 F1 | 	add	local01, local05
27e8c     54 4E 85 F1 | 	sub	fp, #84
27e90     A7 26 62 FC | 	wrlong	local01, fp
27e94     58 4E 85 F1 | 	sub	fp, #88
27e98     A7 26 0A FB | 	rdlong	local01, fp wz
27e9c     68 4E 85 F1 | 	sub	fp, #104
27ea0     60 00 90 AD |  if_e	jmp	#LR__3372
27ea4     68 4E 05 F1 | 	add	fp, #104
27ea8     A7 26 02 FB | 	rdlong	local01, fp
27eac     AC 4E 05 F1 | 	add	fp, #172
27eb0     A7 2A 02 FB | 	rdlong	local03, fp
27eb4     15 27 82 F1 | 	sub	local01, local03
27eb8     AC 4E 85 F1 | 	sub	fp, #172
27ebc     A7 26 62 FC | 	wrlong	local01, fp
27ec0     68 4E 85 F1 | 	sub	fp, #104
27ec4     00 26 56 F2 | 	cmps	local01, #0 wc
27ec8     68 4E 05 C1 |  if_b	add	fp, #104
27ecc     A7 00 68 CC |  if_b	wrlong	#0, fp
27ed0     68 4E 85 C1 |  if_b	sub	fp, #104
27ed4     08 4E 05 F1 | 	add	fp, #8
27ed8     A7 26 02 FB | 	rdlong	local01, fp
27edc     E8 26 06 F4 | 	bitl	local01, #232
27ee0     A7 26 62 FC | 	wrlong	local01, fp
27ee4     60 4E 05 F1 | 	add	fp, #96
27ee8     A7 2E 02 FB | 	rdlong	local05, fp
27eec     17 2B 02 F6 | 	mov	local03, local05
27ef0     08 2A 66 F0 | 	shl	local03, #8
27ef4     15 27 42 F5 | 	or	local01, local03
27ef8     60 4E 85 F1 | 	sub	fp, #96
27efc     A7 26 62 FC | 	wrlong	local01, fp
27f00     08 4E 85 F1 | 	sub	fp, #8
27f04                 | LR__3372
27f04     3C 4E 05 F1 | 	add	fp, #60
27f08     A7 00 68 FC | 	wrlong	#0, fp
27f0c     3C 4E 85 F1 | 	sub	fp, #60
27f10                 | LR__3373
27f10     0C 4E 05 F1 | 	add	fp, #12
27f14     A7 12 02 FB | 	rdlong	arg01, fp
27f18     0C 4E 85 F1 | 	sub	fp, #12
27f1c     EC 21 B0 FD | 	call	#__system____builtin_ilogb
27f20     FF FF 3F FF 
27f24     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
27f28     50 00 90 5D |  if_ne	jmp	#LR__3375
27f2c     2C 4E 05 F1 | 	add	fp, #44
27f30     A7 26 0A FB | 	rdlong	local01, fp wz
27f34     2C 4E 85 F1 | 	sub	fp, #44
27f38     24 00 90 AD |  if_e	jmp	#LR__3374
27f3c     C0 4E 05 F1 | 	add	fp, #192
27f40     A7 28 02 FB | 	rdlong	local02, fp
27f44     14 2B 02 F6 | 	mov	local03, local02
27f48     01 2A 06 F1 | 	add	local03, #1
27f4c     A7 2A 62 FC | 	wrlong	local03, fp
27f50     94 4E 85 F1 | 	sub	fp, #148
27f54     A7 2C 02 FB | 	rdlong	local04, fp
27f58     2C 4E 85 F1 | 	sub	fp, #44
27f5c     14 2D 42 FC | 	wrbyte	local04, local02
27f60                 | LR__3374
27f60     C0 4E 05 F1 | 	add	fp, #192
27f64     A7 12 02 FB | 	rdlong	arg01, fp
27f68     C0 4E 85 F1 | 	sub	fp, #192
27f6c     B2 01 00 FF 
27f70     7E 14 06 F6 | 	mov	arg02, ##@LR__5371
27f74     A8 E9 BF FD | 	call	#__system____builtin_strcpy
27f78     A4 08 90 FD | 	jmp	#LR__3411
27f7c                 | LR__3375
27f7c     0C 4E 05 F1 | 	add	fp, #12
27f80     A7 28 02 FB | 	rdlong	local02, fp
27f84     0C 4E 85 F1 | 	sub	fp, #12
27f88     14 13 02 F6 | 	mov	arg01, local02
27f8c     7C 21 B0 FD | 	call	#__system____builtin_ilogb
27f90     00 00 40 FF 
27f94     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
27f98     50 00 90 5D |  if_ne	jmp	#LR__3377
27f9c     2C 4E 05 F1 | 	add	fp, #44
27fa0     A7 26 0A FB | 	rdlong	local01, fp wz
27fa4     2C 4E 85 F1 | 	sub	fp, #44
27fa8     24 00 90 AD |  if_e	jmp	#LR__3376
27fac     C0 4E 05 F1 | 	add	fp, #192
27fb0     A7 28 02 FB | 	rdlong	local02, fp
27fb4     14 2B 02 F6 | 	mov	local03, local02
27fb8     01 2A 06 F1 | 	add	local03, #1
27fbc     A7 2A 62 FC | 	wrlong	local03, fp
27fc0     94 4E 85 F1 | 	sub	fp, #148
27fc4     A7 2C 02 FB | 	rdlong	local04, fp
27fc8     2C 4E 85 F1 | 	sub	fp, #44
27fcc     14 2D 42 FC | 	wrbyte	local04, local02
27fd0                 | LR__3376
27fd0     C0 4E 05 F1 | 	add	fp, #192
27fd4     A7 12 02 FB | 	rdlong	arg01, fp
27fd8     C0 4E 85 F1 | 	sub	fp, #192
27fdc     B2 01 00 FF 
27fe0     82 14 06 F6 | 	mov	arg02, ##@LR__5372
27fe4     38 E9 BF FD | 	call	#__system____builtin_strcpy
27fe8     34 08 90 FD | 	jmp	#LR__3411
27fec                 | LR__3377
27fec     10 4E 05 F1 | 	add	fp, #16
27ff0     A7 26 02 FB | 	rdlong	local01, fp
27ff4     10 4E 85 F1 | 	sub	fp, #16
27ff8     67 26 0E F2 | 	cmp	local01, #103 wz
27ffc     10 4E 05 51 |  if_ne	add	fp, #16
28000     A7 2A 02 5B |  if_ne	rdlong	local03, fp
28004     10 4E 85 51 |  if_ne	sub	fp, #16
28008     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
2800c     94 01 90 5D |  if_ne	jmp	#LR__3382
28010     0C 4E 05 F1 | 	add	fp, #12
28014     A7 12 02 FB | 	rdlong	arg01, fp
28018     08 4E 05 F1 | 	add	fp, #8
2801c     A7 14 02 F6 | 	mov	arg02, fp
28020     0C 4E 05 F1 | 	add	fp, #12
28024     A7 16 02 F6 | 	mov	arg03, fp
28028     98 4E 05 F1 | 	add	fp, #152
2802c     A7 18 02 FB | 	rdlong	arg04, fp
28030     9C 4E 85 F1 | 	sub	fp, #156
28034     A7 1A 02 FB | 	rdlong	arg05, fp
28038     1C 4E 85 F1 | 	sub	fp, #28
2803c     AC 43 B0 FD | 	call	#__system__disassemble_0566
28040     10 4E 05 F1 | 	add	fp, #16
28044     A7 26 02 FB | 	rdlong	local01, fp
28048     10 4E 85 F1 | 	sub	fp, #16
2804c     23 26 0E F2 | 	cmp	local01, #35 wz
28050     A0 00 90 5D |  if_ne	jmp	#LR__3379
28054     20 4E 05 F1 | 	add	fp, #32
28058     A7 26 02 FB | 	rdlong	local01, fp
2805c     98 4E 05 F1 | 	add	fp, #152
28060     A7 2A 02 FB | 	rdlong	local03, fp
28064     B8 4E 85 F1 | 	sub	fp, #184
28068     15 27 5A F2 | 	cmps	local01, local03 wcz
2806c     24 4E 05 11 |  if_a	add	fp, #36
28070     A7 02 68 1C |  if_a	wrlong	#1, fp
28074     24 4E 85 11 |  if_a	sub	fp, #36
28078     A4 01 90 1D |  if_a	jmp	#LR__3385
2807c     20 4E 05 F1 | 	add	fp, #32
28080     A7 26 02 FB | 	rdlong	local01, fp
28084     20 4E 85 F1 | 	sub	fp, #32
28088     00 26 56 F2 | 	cmps	local01, #0 wc
2808c     2C 00 90 3D |  if_ae	jmp	#LR__3378
28090     B8 4E 05 F1 | 	add	fp, #184
28094     A7 26 02 FB | 	rdlong	local01, fp
28098     13 27 62 F6 | 	neg	local01, local01
2809c     98 4E 85 F1 | 	sub	fp, #152
280a0     A7 2A 02 FB | 	rdlong	local03, fp
280a4     20 4E 85 F1 | 	sub	fp, #32
280a8     13 2B 5A F2 | 	cmps	local03, local01 wcz
280ac     24 4E 05 E1 |  if_be	add	fp, #36
280b0     A7 02 68 EC |  if_be	wrlong	#1, fp
280b4     24 4E 85 E1 |  if_be	sub	fp, #36
280b8     64 01 90 FD | 	jmp	#LR__3385
280bc                 | LR__3378
280bc     20 4E 05 F1 | 	add	fp, #32
280c0     A7 26 02 FB | 	rdlong	local01, fp
280c4     20 4E 85 F1 | 	sub	fp, #32
280c8     01 26 56 F2 | 	cmps	local01, #1 wc
280cc     50 01 90 CD |  if_b	jmp	#LR__3385
280d0     B8 4E 05 F1 | 	add	fp, #184
280d4     A7 26 02 FB | 	rdlong	local01, fp
280d8     98 4E 85 F1 | 	sub	fp, #152
280dc     A7 2A 02 FB | 	rdlong	local03, fp
280e0     15 27 82 F1 | 	sub	local01, local03
280e4     98 4E 05 F1 | 	add	fp, #152
280e8     A7 26 62 FC | 	wrlong	local01, fp
280ec     B8 4E 85 F1 | 	sub	fp, #184
280f0     2C 01 90 FD | 	jmp	#LR__3385
280f4                 | LR__3379
280f4     00 26 06 F6 | 	mov	local01, #0
280f8     08 4E 05 F1 | 	add	fp, #8
280fc     A7 28 02 FB | 	rdlong	local02, fp
28100     1C 28 46 F0 | 	shr	local02, #28
28104     01 28 0E F5 | 	and	local02, #1 wz
28108     01 26 06 A6 |  if_e	mov	local01, #1
2810c     2C 4E 05 F1 | 	add	fp, #44
28110     A7 26 62 FC | 	wrlong	local01, fp
28114     14 4E 85 F1 | 	sub	fp, #20
28118     A7 26 02 FB | 	rdlong	local01, fp
2811c     98 4E 05 F1 | 	add	fp, #152
28120     A7 2A 02 FB | 	rdlong	local03, fp
28124     B8 4E 85 F1 | 	sub	fp, #184
28128     15 27 52 F2 | 	cmps	local01, local03 wc
2812c     18 00 90 3D |  if_ae	jmp	#LR__3380
28130     20 4E 05 F1 | 	add	fp, #32
28134     A7 2C 02 FB | 	rdlong	local04, fp
28138     20 4E 85 F1 | 	sub	fp, #32
2813c     FF FF 7F FF 
28140     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
28144     10 00 90 3D |  if_ae	jmp	#LR__3381
28148                 | LR__3380
28148     24 4E 05 F1 | 	add	fp, #36
2814c     A7 02 68 FC | 	wrlong	#1, fp
28150     24 4E 85 F1 | 	sub	fp, #36
28154     C8 00 90 FD | 	jmp	#LR__3385
28158                 | LR__3381
28158     B8 4E 05 F1 | 	add	fp, #184
2815c     A7 2C 02 FB | 	rdlong	local04, fp
28160     98 4E 85 F1 | 	sub	fp, #152
28164     A7 2A 02 FB | 	rdlong	local03, fp
28168     15 2D 82 F1 | 	sub	local04, local03
2816c     98 4E 05 F1 | 	add	fp, #152
28170     A7 2C 62 FC | 	wrlong	local04, fp
28174     AC 4E 85 F1 | 	sub	fp, #172
28178     A7 12 02 FB | 	rdlong	arg01, fp
2817c     08 4E 05 F1 | 	add	fp, #8
28180     A7 14 02 F6 | 	mov	arg02, fp
28184     0C 4E 05 F1 | 	add	fp, #12
28188     A7 16 02 F6 | 	mov	arg03, fp
2818c     16 19 62 F6 | 	neg	arg04, local04
28190     04 4E 85 F1 | 	sub	fp, #4
28194     A7 1A 02 FB | 	rdlong	arg05, fp
28198     1C 4E 85 F1 | 	sub	fp, #28
2819c     4C 42 B0 FD | 	call	#__system__disassemble_0566
281a0     7C 00 90 FD | 	jmp	#LR__3385
281a4                 | LR__3382
281a4     24 4E 05 F1 | 	add	fp, #36
281a8     A7 26 0A FB | 	rdlong	local01, fp wz
281ac     24 4E 85 F1 | 	sub	fp, #36
281b0     34 00 90 AD |  if_e	jmp	#LR__3383
281b4     0C 4E 05 F1 | 	add	fp, #12
281b8     A7 12 02 FB | 	rdlong	arg01, fp
281bc     08 4E 05 F1 | 	add	fp, #8
281c0     A7 14 02 F6 | 	mov	arg02, fp
281c4     0C 4E 05 F1 | 	add	fp, #12
281c8     A7 16 02 F6 | 	mov	arg03, fp
281cc     98 4E 05 F1 | 	add	fp, #152
281d0     A7 18 02 FB | 	rdlong	arg04, fp
281d4     9C 4E 85 F1 | 	sub	fp, #156
281d8     A7 1A 02 FB | 	rdlong	arg05, fp
281dc     1C 4E 85 F1 | 	sub	fp, #28
281e0     08 42 B0 FD | 	call	#__system__disassemble_0566
281e4     38 00 90 FD | 	jmp	#LR__3384
281e8                 | LR__3383
281e8     0C 4E 05 F1 | 	add	fp, #12
281ec     A7 12 02 FB | 	rdlong	arg01, fp
281f0     08 4E 05 F1 | 	add	fp, #8
281f4     A7 14 02 F6 | 	mov	arg02, fp
281f8     0C 4E 05 F1 | 	add	fp, #12
281fc     A7 16 02 F6 | 	mov	arg03, fp
28200     98 4E 05 F1 | 	add	fp, #152
28204     A7 2C 02 FB | 	rdlong	local04, fp
28208     01 2C 06 F1 | 	add	local04, #1
2820c     16 19 62 F6 | 	neg	arg04, local04
28210     9C 4E 85 F1 | 	sub	fp, #156
28214     A7 1A 02 FB | 	rdlong	arg05, fp
28218     1C 4E 85 F1 | 	sub	fp, #28
2821c     CC 41 B0 FD | 	call	#__system__disassemble_0566
28220                 | LR__3384
28220                 | LR__3385
28220     1C 4E 05 F1 | 	add	fp, #28
28224     A7 26 02 FB | 	rdlong	local01, fp
28228     1C 4E 85 F1 | 	sub	fp, #28
2822c     02 26 0E F2 | 	cmp	local01, #2 wz
28230     4C 00 90 5D |  if_ne	jmp	#LR__3388
28234     1C 4E 05 F1 | 	add	fp, #28
28238     A7 20 68 FC | 	wrlong	#16, fp
2823c     1C 4E 85 F1 | 	sub	fp, #28
28240                 | LR__3386
28240     14 4E 05 F1 | 	add	fp, #20
28244     A7 26 0A FB | 	rdlong	local01, fp wz
28248     14 4E 85 F1 | 	sub	fp, #20
2824c     30 00 90 AD |  if_e	jmp	#LR__3387
28250     14 4E 05 F1 | 	add	fp, #20
28254     A7 2A 02 FB | 	rdlong	local03, fp
28258     14 4E 85 F1 | 	sub	fp, #20
2825c     00 80 00 FF 
28260     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
28264     18 00 90 3D |  if_ae	jmp	#LR__3387
28268     14 4E 05 F1 | 	add	fp, #20
2826c     A7 26 02 FB | 	rdlong	local01, fp
28270     01 26 66 F0 | 	shl	local01, #1
28274     A7 26 62 FC | 	wrlong	local01, fp
28278     14 4E 85 F1 | 	sub	fp, #20
2827c     C0 FF 9F FD | 	jmp	#LR__3386
28280                 | LR__3387
28280                 | LR__3388
28280     70 4E 05 F1 | 	add	fp, #112
28284     A7 12 02 F6 | 	mov	arg01, fp
28288     5C 4E 85 F1 | 	sub	fp, #92
2828c     A7 14 02 FB | 	rdlong	arg02, fp
28290     08 4E 05 F1 | 	add	fp, #8
28294     A7 16 02 FB | 	rdlong	arg03, fp
28298     A0 4E 05 F1 | 	add	fp, #160
2829c     A7 1A 02 FB | 	rdlong	arg05, fp
282a0     BC 4E 85 F1 | 	sub	fp, #188
282a4     01 18 06 F6 | 	mov	arg04, #1
282a8     CC 40 B0 FD | 	call	#__system___uitoa
282ac     58 4E 05 F1 | 	add	fp, #88
282b0     A7 FA 61 FC | 	wrlong	result1, fp
282b4     38 4E 85 F1 | 	sub	fp, #56
282b8     A7 26 02 FB | 	rdlong	local01, fp
282bc     20 4E 85 F1 | 	sub	fp, #32
282c0     00 26 56 F2 | 	cmps	local01, #0 wc
282c4     50 00 90 3D |  if_ae	jmp	#LR__3389
282c8     60 4E 05 F1 | 	add	fp, #96
282cc     A7 5A 68 FC | 	wrlong	#45, fp
282d0     50 4E 05 F1 | 	add	fp, #80
282d4     A7 12 02 F6 | 	mov	arg01, fp
282d8     90 4E 85 F1 | 	sub	fp, #144
282dc     A7 2A 02 FB | 	rdlong	local03, fp
282e0     15 15 62 F6 | 	neg	arg02, local03
282e4     18 4E 05 F1 | 	add	fp, #24
282e8     A7 18 02 FB | 	rdlong	arg04, fp
282ec     84 4E 05 F1 | 	add	fp, #132
282f0     A7 30 02 FB | 	rdlong	local06, fp
282f4     BC 4E 85 F1 | 	sub	fp, #188
282f8     18 2D 02 F6 | 	mov	local04, local06
282fc     0A 16 06 F6 | 	mov	arg03, #10
28300     16 1B 02 F6 | 	mov	arg05, local04
28304     70 40 B0 FD | 	call	#__system___uitoa
28308     5C 4E 05 F1 | 	add	fp, #92
2830c     A7 FA 61 FC | 	wrlong	result1, fp
28310     5C 4E 85 F1 | 	sub	fp, #92
28314     48 00 90 FD | 	jmp	#LR__3390
28318                 | LR__3389
28318     60 4E 05 F1 | 	add	fp, #96
2831c     A7 56 68 FC | 	wrlong	#43, fp
28320     50 4E 05 F1 | 	add	fp, #80
28324     A7 12 02 F6 | 	mov	arg01, fp
28328     90 4E 85 F1 | 	sub	fp, #144
2832c     A7 14 02 FB | 	rdlong	arg02, fp
28330     18 4E 05 F1 | 	add	fp, #24
28334     A7 18 02 FB | 	rdlong	arg04, fp
28338     84 4E 05 F1 | 	add	fp, #132
2833c     A7 30 02 FB | 	rdlong	local06, fp
28340     BC 4E 85 F1 | 	sub	fp, #188
28344     18 2D 02 F6 | 	mov	local04, local06
28348     0A 16 06 F6 | 	mov	arg03, #10
2834c     16 1B 02 F6 | 	mov	arg05, local04
28350     24 40 B0 FD | 	call	#__system___uitoa
28354     5C 4E 05 F1 | 	add	fp, #92
28358     A7 FA 61 FC | 	wrlong	result1, fp
2835c     5C 4E 85 F1 | 	sub	fp, #92
28360                 | LR__3390
28360     24 4E 05 F1 | 	add	fp, #36
28364     A7 26 0A FB | 	rdlong	local01, fp wz
28368     24 4E 85 F1 | 	sub	fp, #36
2836c     2C 00 90 AD |  if_e	jmp	#LR__3391
28370     50 4E 05 F1 | 	add	fp, #80
28374     A7 00 68 FC | 	wrlong	#0, fp
28378     04 4E 85 F1 | 	sub	fp, #4
2837c     A7 00 68 FC | 	wrlong	#0, fp
28380     6C 4E 05 F1 | 	add	fp, #108
28384     A7 26 02 FB | 	rdlong	local01, fp
28388     01 26 06 F1 | 	add	local01, #1
2838c     64 4E 85 F1 | 	sub	fp, #100
28390     A7 26 62 FC | 	wrlong	local01, fp
28394     54 4E 85 F1 | 	sub	fp, #84
28398     88 00 90 FD | 	jmp	#LR__3394
2839c                 | LR__3391
2839c     20 4E 05 F1 | 	add	fp, #32
283a0     A7 26 02 FB | 	rdlong	local01, fp
283a4     20 4E 85 F1 | 	sub	fp, #32
283a8     00 26 56 F2 | 	cmps	local01, #0 wc
283ac     40 00 90 3D |  if_ae	jmp	#LR__3392
283b0     20 4E 05 F1 | 	add	fp, #32
283b4     A7 28 02 FB | 	rdlong	local02, fp
283b8     30 4E 05 F1 | 	add	fp, #48
283bc     A7 28 62 FC | 	wrlong	local02, fp
283c0     04 4E 85 F1 | 	sub	fp, #4
283c4     A7 28 62 FC | 	wrlong	local02, fp
283c8     2C 4E 85 F1 | 	sub	fp, #44
283cc     A7 26 02 FB | 	rdlong	local01, fp
283d0     98 4E 05 F1 | 	add	fp, #152
283d4     A7 2A 02 FB | 	rdlong	local03, fp
283d8     15 27 02 F1 | 	add	local01, local03
283dc     01 26 06 F1 | 	add	local01, #1
283e0     64 4E 85 F1 | 	sub	fp, #100
283e4     A7 26 62 FC | 	wrlong	local01, fp
283e8     54 4E 85 F1 | 	sub	fp, #84
283ec     34 00 90 FD | 	jmp	#LR__3393
283f0                 | LR__3392
283f0     4C 4E 05 F1 | 	add	fp, #76
283f4     A7 00 68 FC | 	wrlong	#0, fp
283f8     2C 4E 85 F1 | 	sub	fp, #44
283fc     A7 26 02 FB | 	rdlong	local01, fp
28400     30 4E 05 F1 | 	add	fp, #48
28404     A7 26 62 FC | 	wrlong	local01, fp
28408     68 4E 05 F1 | 	add	fp, #104
2840c     A7 2A 02 FB | 	rdlong	local03, fp
28410     15 27 02 F1 | 	add	local01, local03
28414     01 26 06 F1 | 	add	local01, #1
28418     64 4E 85 F1 | 	sub	fp, #100
2841c     A7 26 62 FC | 	wrlong	local01, fp
28420     54 4E 85 F1 | 	sub	fp, #84
28424                 | LR__3393
28424                 | LR__3394
28424     54 4E 05 F1 | 	add	fp, #84
28428     A7 26 02 FB | 	rdlong	local01, fp
2842c     08 4E 85 F1 | 	sub	fp, #8
28430     A7 2A 02 FB | 	rdlong	local03, fp
28434     15 27 82 F1 | 	sub	local01, local03
28438     01 26 06 F1 | 	add	local01, #1
2843c     24 4E 85 F1 | 	sub	fp, #36
28440     A7 26 62 FC | 	wrlong	local01, fp
28444     04 4E 05 F1 | 	add	fp, #4
28448     A7 26 0A FB | 	rdlong	local01, fp wz
2844c     2C 4E 85 F1 | 	sub	fp, #44
28450     28 4E 05 51 |  if_ne	add	fp, #40
28454     A7 2A 02 5B |  if_ne	rdlong	local03, fp
28458     01 2A 06 51 |  if_ne	add	local03, #1
2845c     A7 2A 62 5C |  if_ne	wrlong	local03, fp
28460     28 4E 85 51 |  if_ne	sub	fp, #40
28464     1C 4E 05 F1 | 	add	fp, #28
28468     A7 26 02 FB | 	rdlong	local01, fp
2846c     1C 4E 85 F1 | 	sub	fp, #28
28470     10 26 0E F2 | 	cmp	local01, #16 wz
28474     28 4E 05 A1 |  if_e	add	fp, #40
28478     A7 26 02 AB |  if_e	rdlong	local01, fp
2847c     02 26 06 A1 |  if_e	add	local01, #2
28480     A7 26 62 AC |  if_e	wrlong	local01, fp
28484     28 4E 85 A1 |  if_e	sub	fp, #40
28488     24 4E 05 F1 | 	add	fp, #36
2848c     A7 26 0A FB | 	rdlong	local01, fp wz
28490     24 4E 85 F1 | 	sub	fp, #36
28494     28 00 90 AD |  if_e	jmp	#LR__3395
28498     28 4E 05 F1 | 	add	fp, #40
2849c     A7 26 02 FB | 	rdlong	local01, fp
284a0     02 2A 06 F6 | 	mov	local03, #2
284a4     34 4E 05 F1 | 	add	fp, #52
284a8     A7 2E 02 FB | 	rdlong	local05, fp
284ac     17 2B 02 F1 | 	add	local03, local05
284b0     15 27 02 F1 | 	add	local01, local03
284b4     34 4E 85 F1 | 	sub	fp, #52
284b8     A7 26 62 FC | 	wrlong	local01, fp
284bc     28 4E 85 F1 | 	sub	fp, #40
284c0                 | LR__3395
284c0     28 4E 05 F1 | 	add	fp, #40
284c4     A7 26 02 FB | 	rdlong	local01, fp
284c8     28 4E 85 F1 | 	sub	fp, #40
284cc     41 26 56 F2 | 	cmps	local01, #65 wc
284d0     01 FA 65 36 |  if_ae	neg	result1, #1
284d4     08 05 90 3D |  if_ae	jmp	#LR__3423
284d8     3C 4E 05 F1 | 	add	fp, #60
284dc     A7 26 0A FB | 	rdlong	local01, fp wz
284e0     3C 4E 85 F1 | 	sub	fp, #60
284e4     60 00 90 AD |  if_e	jmp	#LR__3396
284e8     C0 4E 05 F1 | 	add	fp, #192
284ec     A7 12 02 FB | 	rdlong	arg01, fp
284f0     94 4E 85 F1 | 	sub	fp, #148
284f4     A7 14 02 FB | 	rdlong	arg02, fp
284f8     14 4E 05 F1 | 	add	fp, #20
284fc     A7 16 02 FB | 	rdlong	arg03, fp
28500     40 4E 85 F1 | 	sub	fp, #64
28504     D8 40 B0 FD | 	call	#__system__emitsign_0568
28508     18 4F 05 F1 | 	add	fp, #280
2850c     A7 FA 61 FC | 	wrlong	result1, fp
28510     18 4F 85 F1 | 	sub	fp, #280
28514     00 FA 55 F2 | 	cmps	result1, #0 wc
28518     18 4F 05 C1 |  if_b	add	fp, #280
2851c     A7 FA 01 CB |  if_b	rdlong	result1, fp
28520     18 4F 85 C1 |  if_b	sub	fp, #280
28524     B8 04 90 CD |  if_b	jmp	#LR__3423
28528     C0 4E 05 F1 | 	add	fp, #192
2852c     A7 26 02 FB | 	rdlong	local01, fp
28530     58 4E 05 F1 | 	add	fp, #88
28534     A7 2A 02 FB | 	rdlong	local03, fp
28538     15 27 02 F1 | 	add	local01, local03
2853c     58 4E 85 F1 | 	sub	fp, #88
28540     A7 26 62 FC | 	wrlong	local01, fp
28544     C0 4E 85 F1 | 	sub	fp, #192
28548                 | LR__3396
28548     4C 4E 05 F1 | 	add	fp, #76
2854c     A7 26 02 FB | 	rdlong	local01, fp
28550     34 4E 85 F1 | 	sub	fp, #52
28554     A7 26 62 FC | 	wrlong	local01, fp
28558     18 4E 85 F1 | 	sub	fp, #24
2855c     97 9E 48 FB | 	callpa	#(@LR__3402-@LR__3397)>>2,fcache_load_ptr_
28560                 | LR__3397
28560     18 4E 05 F1 | 	add	fp, #24
28564     A7 28 02 FB | 	rdlong	local02, fp
28568     3C 4E 05 F1 | 	add	fp, #60
2856c     A7 2E 02 FB | 	rdlong	local05, fp
28570     54 4E 85 F1 | 	sub	fp, #84
28574     17 29 52 F2 | 	cmps	local02, local05 wc
28578     20 01 90 3D |  if_ae	jmp	#LR__3403
2857c     18 4E 05 F1 | 	add	fp, #24
28580     A7 30 02 FB | 	rdlong	local06, fp
28584     18 4E 85 F1 | 	sub	fp, #24
28588     00 30 56 F2 | 	cmps	local06, #0 wc
2858c     58 00 90 CD |  if_b	jmp	#LR__3398
28590     18 4E 05 F1 | 	add	fp, #24
28594     A7 30 02 FB | 	rdlong	local06, fp
28598     40 4E 05 F1 | 	add	fp, #64
2859c     A7 32 02 FB | 	rdlong	local07, fp
285a0     58 4E 85 F1 | 	sub	fp, #88
285a4     19 31 52 F2 | 	cmps	local06, local07 wc
285a8     3C 00 90 3D |  if_ae	jmp	#LR__3398
285ac     C0 4E 05 F1 | 	add	fp, #192
285b0     A7 34 02 FB | 	rdlong	local08, fp
285b4     1A 33 02 F6 | 	mov	local07, local08
285b8     01 32 06 F1 | 	add	local07, #1
285bc     A7 32 62 FC | 	wrlong	local07, fp
285c0     A8 4E 85 F1 | 	sub	fp, #168
285c4     A7 32 02 FB | 	rdlong	local07, fp
285c8     19 37 02 F6 | 	mov	local09, local07
285cc     58 4E 05 F1 | 	add	fp, #88
285d0     A7 38 02 F6 | 	mov	local10, fp
285d4     A7 36 02 F1 | 	add	local09, fp
285d8     1B 3B C2 FA | 	rdbyte	local11, local09
285dc     1A 3B 42 FC | 	wrbyte	local11, local08
285e0     70 4E 85 F1 | 	sub	fp, #112
285e4     20 00 90 FD | 	jmp	#LR__3399
285e8                 | LR__3398
285e8     C0 4E 05 F1 | 	add	fp, #192
285ec     A7 34 02 FB | 	rdlong	local08, fp
285f0     1A 37 02 F6 | 	mov	local09, local08
285f4     01 36 06 F1 | 	add	local09, #1
285f8     A7 36 62 FC | 	wrlong	local09, fp
285fc     C0 4E 85 F1 | 	sub	fp, #192
28600     30 36 06 F6 | 	mov	local09, #48
28604     1A 61 48 FC | 	wrbyte	#48, local08
28608                 | LR__3399
28608     18 4E 05 F1 | 	add	fp, #24
2860c     A7 30 02 FB | 	rdlong	local06, fp
28610     38 4E 05 F1 | 	add	fp, #56
28614     A7 3C 02 FB | 	rdlong	local12, fp
28618     50 4E 85 F1 | 	sub	fp, #80
2861c     1E 31 0A F2 | 	cmp	local06, local12 wz
28620     5C 00 90 5D |  if_ne	jmp	#LR__3401
28624     10 4F 05 F1 | 	add	fp, #272
28628     A7 32 02 FB | 	rdlong	local07, fp
2862c     10 4F 85 F1 | 	sub	fp, #272
28630     19 37 0A F6 | 	mov	local09, local07 wz
28634     28 00 90 5D |  if_ne	jmp	#LR__3400
28638     54 4E 05 F1 | 	add	fp, #84
2863c     A7 3A 02 FB | 	rdlong	local11, fp
28640     1D 39 02 F6 | 	mov	local10, local11
28644     01 38 86 F1 | 	sub	local10, #1
28648     3C 4E 85 F1 | 	sub	fp, #60
2864c     A7 3E 02 FB | 	rdlong	local13, fp
28650     18 4E 85 F1 | 	sub	fp, #24
28654     1F 41 02 F6 | 	mov	local14, local13
28658     1C 41 52 F2 | 	cmps	local14, local10 wc
2865c     20 00 90 3D |  if_ae	jmp	#LR__3401
28660                 | LR__3400
28660     C0 4E 05 F1 | 	add	fp, #192
28664     A7 34 02 FB | 	rdlong	local08, fp
28668     1A 3D 02 F6 | 	mov	local12, local08
2866c     01 3C 06 F1 | 	add	local12, #1
28670     A7 3C 62 FC | 	wrlong	local12, fp
28674     C0 4E 85 F1 | 	sub	fp, #192
28678     2E 36 06 F6 | 	mov	local09, #46
2867c     1A 5D 48 FC | 	wrbyte	#46, local08
28680                 | LR__3401
28680     18 4E 05 F1 | 	add	fp, #24
28684     A7 42 02 FB | 	rdlong	local15, fp
28688     21 3D 02 F6 | 	mov	local12, local15
2868c     01 3C 06 F1 | 	add	local12, #1
28690     A7 3C 62 FC | 	wrlong	local12, fp
28694     18 4E 85 F1 | 	sub	fp, #24
28698     C4 FE 9F FD | 	jmp	#LR__3397
2869c                 | LR__3402
2869c                 | LR__3403
2869c     34 4E 05 F1 | 	add	fp, #52
286a0     A7 26 0A FB | 	rdlong	local01, fp wz
286a4     34 4E 85 F1 | 	sub	fp, #52
286a8     A0 00 90 AD |  if_e	jmp	#LR__3407
286ac     C0 4E 05 F1 | 	add	fp, #192
286b0     A7 26 02 FB | 	rdlong	local01, fp
286b4     01 26 86 F1 | 	sub	local01, #1
286b8     A7 26 62 FC | 	wrlong	local01, fp
286bc     C0 4E 85 F1 | 	sub	fp, #192
286c0     97 26 48 FB | 	callpa	#(@LR__3405-@LR__3404)>>2,fcache_load_ptr_
286c4                 | LR__3404
286c4     C0 4E 05 F1 | 	add	fp, #192
286c8     A7 26 02 FB | 	rdlong	local01, fp
286cc     04 4E 05 F1 | 	add	fp, #4
286d0     A7 2A 02 FB | 	rdlong	local03, fp
286d4     C4 4E 85 F1 | 	sub	fp, #196
286d8     15 27 5A F2 | 	cmps	local01, local03 wcz
286dc     30 00 90 ED |  if_be	jmp	#LR__3406
286e0     C0 4E 05 F1 | 	add	fp, #192
286e4     A7 30 02 FB | 	rdlong	local06, fp
286e8     C0 4E 85 F1 | 	sub	fp, #192
286ec     18 2D C2 FA | 	rdbyte	local04, local06
286f0     30 2C 0E F2 | 	cmp	local04, #48 wz
286f4     18 00 90 5D |  if_ne	jmp	#LR__3406
286f8     C0 4E 05 F1 | 	add	fp, #192
286fc     A7 26 02 FB | 	rdlong	local01, fp
28700     01 26 86 F1 | 	sub	local01, #1
28704     A7 26 62 FC | 	wrlong	local01, fp
28708     C0 4E 85 F1 | 	sub	fp, #192
2870c     B4 FF 9F FD | 	jmp	#LR__3404
28710                 | LR__3405
28710                 | LR__3406
28710     C0 4E 05 F1 | 	add	fp, #192
28714     A7 28 02 FB | 	rdlong	local02, fp
28718     C0 4E 85 F1 | 	sub	fp, #192
2871c     14 27 C2 FA | 	rdbyte	local01, local02
28720     2E 26 0E F2 | 	cmp	local01, #46 wz
28724     C0 4E 05 A1 |  if_e	add	fp, #192
28728     A7 26 02 AB |  if_e	rdlong	local01, fp
2872c     01 26 86 A1 |  if_e	sub	local01, #1
28730     A7 26 62 AC |  if_e	wrlong	local01, fp
28734     C0 4E 85 A1 |  if_e	sub	fp, #192
28738     C0 4E 05 F1 | 	add	fp, #192
2873c     A7 2A 02 FB | 	rdlong	local03, fp
28740     01 2A 06 F1 | 	add	local03, #1
28744     A7 2A 62 FC | 	wrlong	local03, fp
28748     C0 4E 85 F1 | 	sub	fp, #192
2874c                 | LR__3407
2874c     24 4E 05 F1 | 	add	fp, #36
28750     A7 26 0A FB | 	rdlong	local01, fp wz
28754     24 4E 85 F1 | 	sub	fp, #36
28758     B4 00 90 AD |  if_e	jmp	#LR__3410
2875c     C0 4E 05 F1 | 	add	fp, #192
28760     A7 28 02 FB | 	rdlong	local02, fp
28764     14 2B 02 F6 | 	mov	local03, local02
28768     01 2A 06 F1 | 	add	local03, #1
2876c     A7 2A 62 FC | 	wrlong	local03, fp
28770     90 4E 85 F1 | 	sub	fp, #144
28774     A7 2C 02 FB | 	rdlong	local04, fp
28778     14 2D 42 FC | 	wrbyte	local04, local02
2877c     90 4E 05 F1 | 	add	fp, #144
28780     A7 28 02 FB | 	rdlong	local02, fp
28784     14 2B 02 F6 | 	mov	local03, local02
28788     01 2A 06 F1 | 	add	local03, #1
2878c     A7 2A 62 FC | 	wrlong	local03, fp
28790     60 4E 85 F1 | 	sub	fp, #96
28794     A7 2C 02 FB | 	rdlong	local04, fp
28798     14 2D 42 FC | 	wrbyte	local04, local02
2879c     48 4E 85 F1 | 	sub	fp, #72
287a0     A7 00 68 FC | 	wrlong	#0, fp
287a4     18 4E 85 F1 | 	sub	fp, #24
287a8                 | LR__3408
287a8     18 4E 05 F1 | 	add	fp, #24
287ac     A7 28 02 FB | 	rdlong	local02, fp
287b0     44 4E 05 F1 | 	add	fp, #68
287b4     A7 2E 02 FB | 	rdlong	local05, fp
287b8     5C 4E 85 F1 | 	sub	fp, #92
287bc     17 29 52 F2 | 	cmps	local02, local05 wc
287c0     4C 00 90 3D |  if_ae	jmp	#LR__3409
287c4     C0 4E 05 F1 | 	add	fp, #192
287c8     A7 34 02 FB | 	rdlong	local08, fp
287cc     1A 3D 02 F6 | 	mov	local12, local08
287d0     01 3C 06 F1 | 	add	local12, #1
287d4     A7 3C 62 FC | 	wrlong	local12, fp
287d8     A8 4E 85 F1 | 	sub	fp, #168
287dc     A7 32 02 FB | 	rdlong	local07, fp
287e0     19 37 02 F6 | 	mov	local09, local07
287e4     98 4E 05 F1 | 	add	fp, #152
287e8     A7 38 02 F6 | 	mov	local10, fp
287ec     A7 36 02 F1 | 	add	local09, fp
287f0     1B 3B C2 FA | 	rdbyte	local11, local09
287f4     1A 3B 42 FC | 	wrbyte	local11, local08
287f8     98 4E 85 F1 | 	sub	fp, #152
287fc     A7 3C 02 FB | 	rdlong	local12, fp
28800     01 3C 06 F1 | 	add	local12, #1
28804     A7 3C 62 FC | 	wrlong	local12, fp
28808     18 4E 85 F1 | 	sub	fp, #24
2880c     98 FF 9F FD | 	jmp	#LR__3408
28810                 | LR__3409
28810                 | LR__3410
28810     C0 4E 05 F1 | 	add	fp, #192
28814     A7 26 02 FB | 	rdlong	local01, fp
28818     C0 4E 85 F1 | 	sub	fp, #192
2881c     13 01 48 FC | 	wrbyte	#0, local01
28820                 | LR__3411
28820     6C 4E 05 F1 | 	add	fp, #108
28824     A7 26 0A FB | 	rdlong	local01, fp wz
28828     6C 4E 85 F1 | 	sub	fp, #108
2882c     90 01 90 AD |  if_e	jmp	#LR__3422
28830     48 4E 05 F1 | 	add	fp, #72
28834     A7 2A 0A FB | 	rdlong	local03, fp wz
28838     48 4E 85 F1 | 	sub	fp, #72
2883c     80 01 90 AD |  if_e	jmp	#LR__3422
28840     C4 4E 05 F1 | 	add	fp, #196
28844     A7 12 02 FB | 	rdlong	arg01, fp
28848     C4 4E 85 F1 | 	sub	fp, #196
2884c     09 45 02 F6 | 	mov	local16, arg01
28850     97 06 48 FB | 	callpa	#(@LR__3413-@LR__3412)>>2,fcache_load_ptr_
28854                 | LR__3412
28854     22 FB C9 FA | 	rdbyte	result1, local16 wz
28858     01 44 06 51 |  if_ne	add	local16, #1
2885c     F4 FF 9F 5D |  if_ne	jmp	#LR__3412
28860                 | LR__3413
28860     09 45 82 F1 | 	sub	local16, arg01
28864     22 2D 02 F6 | 	mov	local04, local16
28868     6C 4E 05 F1 | 	add	fp, #108
2886c     A7 30 02 FB | 	rdlong	local06, fp
28870     6C 4E 85 F1 | 	sub	fp, #108
28874     18 2D 5A F2 | 	cmps	local04, local06 wcz
28878     44 01 90 ED |  if_be	jmp	#LR__3422
2887c     C4 4E 05 F1 | 	add	fp, #196
28880     A7 26 02 FB | 	rdlong	local01, fp
28884     5C 4E 05 F1 | 	add	fp, #92
28888     A7 26 62 FC | 	wrlong	local01, fp
2888c     FC 4E 85 F1 | 	sub	fp, #252
28890     A7 26 0A FB | 	rdlong	local01, fp wz
28894     24 4E 85 F1 | 	sub	fp, #36
28898     20 00 90 AD |  if_e	jmp	#LR__3414
2889c     B8 4E 05 F1 | 	add	fp, #184
288a0     A7 00 68 FC | 	wrlong	#0, fp
288a4     4C 4E 85 F1 | 	sub	fp, #76
288a8     A7 26 02 FB | 	rdlong	local01, fp
288ac     B0 4E 05 F1 | 	add	fp, #176
288b0     A7 26 62 FC | 	wrlong	local01, fp
288b4     1C 4F 85 F1 | 	sub	fp, #284
288b8     24 00 90 FD | 	jmp	#LR__3415
288bc                 | LR__3414
288bc     6C 4E 05 F1 | 	add	fp, #108
288c0     A7 26 02 FB | 	rdlong	local01, fp
288c4     01 26 86 F1 | 	sub	local01, #1
288c8     4C 4E 05 F1 | 	add	fp, #76
288cc     A7 2A 02 FB | 	rdlong	local03, fp
288d0     15 27 82 F1 | 	sub	local01, local03
288d4     64 4E 05 F1 | 	add	fp, #100
288d8     A7 26 62 FC | 	wrlong	local01, fp
288dc     1C 4F 85 F1 | 	sub	fp, #284
288e0                 | LR__3415
288e0     97 20 48 FB | 	callpa	#(@LR__3417-@LR__3416)>>2,fcache_load_ptr_
288e4                 | LR__3416
288e4     1C 4F 05 F1 | 	add	fp, #284
288e8     A7 26 0A FB | 	rdlong	local01, fp wz
288ec     1C 4F 85 F1 | 	sub	fp, #284
288f0     30 00 90 AD |  if_e	jmp	#LR__3418
288f4     20 4F 05 F1 | 	add	fp, #288
288f8     A7 28 02 FB | 	rdlong	local02, fp
288fc     14 2B 02 F6 | 	mov	local03, local02
28900     01 2A 06 F1 | 	add	local03, #1
28904     A7 2A 62 FC | 	wrlong	local03, fp
28908     14 55 48 FC | 	wrbyte	#42, local02
2890c     04 4E 85 F1 | 	sub	fp, #4
28910     A7 26 02 FB | 	rdlong	local01, fp
28914     01 26 86 F1 | 	sub	local01, #1
28918     A7 26 62 FC | 	wrlong	local01, fp
2891c     1C 4F 85 F1 | 	sub	fp, #284
28920     C0 FF 9F FD | 	jmp	#LR__3416
28924                 | LR__3417
28924                 | LR__3418
28924     B8 4E 05 F1 | 	add	fp, #184
28928     A7 26 0A FB | 	rdlong	local01, fp wz
2892c     B8 4E 85 F1 | 	sub	fp, #184
28930     70 00 90 AD |  if_e	jmp	#LR__3421
28934     20 4F 05 F1 | 	add	fp, #288
28938     A7 28 02 FB | 	rdlong	local02, fp
2893c     14 2B 02 F6 | 	mov	local03, local02
28940     01 2A 06 F1 | 	add	local03, #1
28944     A7 2A 62 FC | 	wrlong	local03, fp
28948     14 5D 48 FC | 	wrbyte	#46, local02
2894c     04 4E 85 F1 | 	sub	fp, #4
28950     A7 00 68 FC | 	wrlong	#0, fp
28954     1C 4F 85 F1 | 	sub	fp, #284
28958                 | LR__3419
28958     1C 4F 05 F1 | 	add	fp, #284
2895c     A7 28 02 FB | 	rdlong	local02, fp
28960     64 4E 85 F1 | 	sub	fp, #100
28964     A7 2E 02 FB | 	rdlong	local05, fp
28968     B8 4E 85 F1 | 	sub	fp, #184
2896c     17 29 52 F2 | 	cmps	local02, local05 wc
28970     30 00 90 3D |  if_ae	jmp	#LR__3420
28974     20 4F 05 F1 | 	add	fp, #288
28978     A7 34 02 FB | 	rdlong	local08, fp
2897c     1A 3D 02 F6 | 	mov	local12, local08
28980     01 3C 06 F1 | 	add	local12, #1
28984     A7 3C 62 FC | 	wrlong	local12, fp
28988     1A 55 48 FC | 	wrbyte	#42, local08
2898c     04 4E 85 F1 | 	sub	fp, #4
28990     A7 3C 02 FB | 	rdlong	local12, fp
28994     01 3C 06 F1 | 	add	local12, #1
28998     A7 3C 62 FC | 	wrlong	local12, fp
2899c     1C 4F 85 F1 | 	sub	fp, #284
289a0     B4 FF 9F FD | 	jmp	#LR__3419
289a4                 | LR__3420
289a4                 | LR__3421
289a4     20 4F 05 F1 | 	add	fp, #288
289a8     A7 28 02 FB | 	rdlong	local02, fp
289ac     14 2B 02 F6 | 	mov	local03, local02
289b0     01 2A 06 F1 | 	add	local03, #1
289b4     A7 2A 62 FC | 	wrlong	local03, fp
289b8     20 4F 85 F1 | 	sub	fp, #288
289bc     14 01 48 FC | 	wrbyte	#0, local02
289c0                 | LR__3422
289c0     04 4E 05 F1 | 	add	fp, #4
289c4     A7 12 02 FB | 	rdlong	arg01, fp
289c8     04 4E 05 F1 | 	add	fp, #4
289cc     A7 14 02 FB | 	rdlong	arg02, fp
289d0     BC 4E 05 F1 | 	add	fp, #188
289d4     A7 16 02 FB | 	rdlong	arg03, fp
289d8     C4 4E 85 F1 | 	sub	fp, #196
289dc     C4 EE BF FD | 	call	#__system___fmtstr
289e0                 | LR__3423
289e0     A7 F0 03 F6 | 	mov	ptra, fp
289e4     B2 00 A0 FD | 	call	#popregs_
289e8                 | __system___fmtfloat_ret
289e8     2D 00 64 FD | 	ret
289ec                 | 
289ec                 | __system__Left_S
289ec     04 4A 05 F6 | 	mov	COUNT_, #4
289f0     A8 00 A0 FD | 	call	#pushregs_
289f4     09 27 02 F6 | 	mov	local01, arg01
289f8     0A 29 02 F6 | 	mov	local02, arg02
289fc     01 28 56 F2 | 	cmps	local02, #1 wc
28a00     B2 01 00 CF 
28a04     86 FA 05 C6 |  if_b	mov	result1, ##@LR__5373
28a08     5C 00 90 CD |  if_b	jmp	#LR__3433
28a0c     13 13 02 F6 | 	mov	arg01, local01
28a10     09 2B 02 F6 | 	mov	local03, arg01
28a14     97 06 48 FB | 	callpa	#(@LR__3431-@LR__3430)>>2,fcache_load_ptr_
28a18                 | LR__3430
28a18     15 FB C9 FA | 	rdbyte	result1, local03 wz
28a1c     01 2A 06 51 |  if_ne	add	local03, #1
28a20     F4 FF 9F 5D |  if_ne	jmp	#LR__3430
28a24                 | LR__3431
28a24     09 2B 82 F1 | 	sub	local03, arg01
28a28     15 FB 01 F6 | 	mov	result1, local03
28a2c     14 FB 59 F2 | 	cmps	result1, local02 wcz
28a30     13 FB 01 E6 |  if_be	mov	result1, local01
28a34     30 00 90 ED |  if_be	jmp	#LR__3433
28a38     14 13 02 F6 | 	mov	arg01, local02
28a3c     02 12 06 F1 | 	add	arg01, #2
28a40     CC 20 B0 FD | 	call	#__system___gc_alloc_managed
28a44     FD 2C 0A F6 | 	mov	local04, result1 wz
28a48     18 00 90 AD |  if_e	jmp	#LR__3432
28a4c     16 13 02 F6 | 	mov	arg01, local04
28a50     13 15 02 F6 | 	mov	arg02, local01
28a54     14 17 02 F6 | 	mov	arg03, local02
28a58     30 DE BF FD | 	call	#__system____builtin_memmove
28a5c     16 29 02 F1 | 	add	local02, local04
28a60     14 01 48 FC | 	wrbyte	#0, local02
28a64                 | LR__3432
28a64     16 FB 01 F6 | 	mov	result1, local04
28a68                 | LR__3433
28a68     A7 F0 03 F6 | 	mov	ptra, fp
28a6c     B2 00 A0 FD | 	call	#popregs_
28a70                 | __system__Left_S_ret
28a70     2D 00 64 FD | 	ret
28a74                 | 
28a74                 | __system__Right_S
28a74     05 4A 05 F6 | 	mov	COUNT_, #5
28a78     A8 00 A0 FD | 	call	#pushregs_
28a7c     09 27 02 F6 | 	mov	local01, arg01
28a80     0A 29 02 F6 | 	mov	local02, arg02
28a84     01 28 56 F2 | 	cmps	local02, #1 wc
28a88     B2 01 00 CF 
28a8c     87 FA 05 C6 |  if_b	mov	result1, ##@LR__5374
28a90     64 00 90 CD |  if_b	jmp	#LR__3443
28a94     13 13 02 F6 | 	mov	arg01, local01
28a98     09 2B 02 F6 | 	mov	local03, arg01
28a9c     97 06 48 FB | 	callpa	#(@LR__3441-@LR__3440)>>2,fcache_load_ptr_
28aa0                 | LR__3440
28aa0     15 FB C9 FA | 	rdbyte	result1, local03 wz
28aa4     01 2A 06 51 |  if_ne	add	local03, #1
28aa8     F4 FF 9F 5D |  if_ne	jmp	#LR__3440
28aac                 | LR__3441
28aac     09 2B 82 F1 | 	sub	local03, arg01
28ab0     15 FB 01 F6 | 	mov	result1, local03
28ab4     FD 2C 02 F6 | 	mov	local04, result1
28ab8     14 2D 5A F2 | 	cmps	local04, local02 wcz
28abc     13 FB 01 E6 |  if_be	mov	result1, local01
28ac0     34 00 90 ED |  if_be	jmp	#LR__3443
28ac4     14 13 02 F6 | 	mov	arg01, local02
28ac8     02 12 06 F1 | 	add	arg01, #2
28acc     40 20 B0 FD | 	call	#__system___gc_alloc_managed
28ad0     FD 2E 0A F6 | 	mov	local05, result1 wz
28ad4     1C 00 90 AD |  if_e	jmp	#LR__3442
28ad8     14 2D 82 F1 | 	sub	local04, local02
28adc     13 2D 02 F1 | 	add	local04, local01
28ae0     01 28 06 F1 | 	add	local02, #1
28ae4     17 13 02 F6 | 	mov	arg01, local05
28ae8     16 15 02 F6 | 	mov	arg02, local04
28aec     14 17 02 F6 | 	mov	arg03, local02
28af0     98 DD BF FD | 	call	#__system____builtin_memmove
28af4                 | LR__3442
28af4     17 FB 01 F6 | 	mov	result1, local05
28af8                 | LR__3443
28af8     A7 F0 03 F6 | 	mov	ptra, fp
28afc     B2 00 A0 FD | 	call	#popregs_
28b00                 | __system__Right_S_ret
28b00     2D 00 64 FD | 	ret
28b04                 | 
28b04                 | __system__Mid_S
28b04     05 4A 05 F6 | 	mov	COUNT_, #5
28b08     A8 00 A0 FD | 	call	#pushregs_
28b0c     09 27 02 F6 | 	mov	local01, arg01
28b10     0A 29 02 F6 | 	mov	local02, arg02
28b14     01 16 56 F2 | 	cmps	arg03, #1 wc
28b18     B2 01 00 CF 
28b1c     88 FA 05 C6 |  if_b	mov	result1, ##@LR__5375
28b20     80 00 90 CD |  if_b	jmp	#LR__3453
28b24     01 28 86 F1 | 	sub	local02, #1
28b28     00 28 56 F3 | 	fges	local02, #0 wc
28b2c     13 13 02 F6 | 	mov	arg01, local01
28b30     09 2B 02 F6 | 	mov	local03, arg01
28b34     97 06 48 FB | 	callpa	#(@LR__3451-@LR__3450)>>2,fcache_load_ptr_
28b38                 | LR__3450
28b38     15 FB C9 FA | 	rdbyte	result1, local03 wz
28b3c     01 2A 06 51 |  if_ne	add	local03, #1
28b40     F4 FF 9F 5D |  if_ne	jmp	#LR__3450
28b44                 | LR__3451
28b44     09 2B 82 F1 | 	sub	local03, arg01
28b48     15 FB 01 F6 | 	mov	result1, local03
28b4c     FD 14 02 F6 | 	mov	arg02, result1
28b50     14 15 52 F2 | 	cmps	arg02, local02 wc
28b54     B2 01 00 CF 
28b58     89 FA 05 C6 |  if_b	mov	result1, ##@LR__5376
28b5c     44 00 90 CD |  if_b	jmp	#LR__3453
28b60     0A 2D 02 F6 | 	mov	local04, arg02
28b64     14 2D 82 F1 | 	sub	local04, local02
28b68     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
28b6c     0B 2D 02 16 |  if_a	mov	local04, arg03
28b70     16 13 02 F6 | 	mov	arg01, local04
28b74     02 12 06 F1 | 	add	arg01, #2
28b78     94 1F B0 FD | 	call	#__system___gc_alloc_managed
28b7c     FD 2E 0A F6 | 	mov	local05, result1 wz
28b80     1C 00 90 AD |  if_e	jmp	#LR__3452
28b84     13 29 02 F1 | 	add	local02, local01
28b88     17 13 02 F6 | 	mov	arg01, local05
28b8c     14 15 02 F6 | 	mov	arg02, local02
28b90     16 17 02 F6 | 	mov	arg03, local04
28b94     F4 DC BF FD | 	call	#__system____builtin_memmove
28b98     17 2D 02 F1 | 	add	local04, local05
28b9c     16 01 48 FC | 	wrbyte	#0, local04
28ba0                 | LR__3452
28ba0     17 FB 01 F6 | 	mov	result1, local05
28ba4                 | LR__3453
28ba4     A7 F0 03 F6 | 	mov	ptra, fp
28ba8     B2 00 A0 FD | 	call	#popregs_
28bac                 | __system__Mid_S_ret
28bac     2D 00 64 FD | 	ret
28bb0                 | 
28bb0                 | __system__Chr_S
28bb0     01 4A 05 F6 | 	mov	COUNT_, #1
28bb4     A8 00 A0 FD | 	call	#pushregs_
28bb8     09 27 02 F6 | 	mov	local01, arg01
28bbc     03 12 06 F6 | 	mov	arg01, #3
28bc0     4C 1F B0 FD | 	call	#__system___gc_alloc_managed
28bc4     00 FA 4D F2 | 	cmps	result1, #0 wz
28bc8     FD 26 42 5C |  if_ne	wrbyte	local01, result1
28bcc     01 FA 05 51 |  if_ne	add	result1, #1
28bd0     FD 00 48 5C |  if_ne	wrbyte	#0, result1
28bd4     01 FA 85 51 |  if_ne	sub	result1, #1
28bd8     A7 F0 03 F6 | 	mov	ptra, fp
28bdc     B2 00 A0 FD | 	call	#popregs_
28be0                 | __system__Chr_S_ret
28be0     2D 00 64 FD | 	ret
28be4                 | 
28be4                 | __system__str_S
28be4     02 4A 05 F6 | 	mov	COUNT_, #2
28be8     A8 00 A0 FD | 	call	#pushregs_
28bec     09 27 02 F6 | 	mov	local01, arg01
28bf0     10 12 06 F6 | 	mov	arg01, #16
28bf4     18 1F B0 FD | 	call	#__system___gc_alloc_managed
28bf8     FD 28 0A F6 | 	mov	local02, result1 wz
28bfc     30 00 90 AD |  if_e	jmp	#LR__3460
28c00     F8 13 02 F6 | 	mov	arg01, ptra
28c04     08 F0 07 F1 | 	add	ptra, #8
28c08     09 29 62 FC | 	wrlong	local02, arg01
28c0c     04 12 06 F1 | 	add	arg01, #4
28c10     09 01 68 FC | 	wrlong	#0, arg01
28c14     04 12 86 F1 | 	sub	arg01, #4
28c18     00 38 05 FF 
28c1c     00 12 46 F5 | 	or	arg01, ##175112192
28c20     00 14 06 F6 | 	mov	arg02, #0
28c24     13 17 02 F6 | 	mov	arg03, local01
28c28     67 18 06 F6 | 	mov	arg04, #103
28c2c     90 EE BF FD | 	call	#__system___fmtfloat
28c30                 | LR__3460
28c30     14 FB 01 F6 | 	mov	result1, local02
28c34     A7 F0 03 F6 | 	mov	ptra, fp
28c38     B2 00 A0 FD | 	call	#popregs_
28c3c                 | __system__str_S_ret
28c3c     2D 00 64 FD | 	ret
28c40                 | 
28c40                 | __system__Number_S
28c40     08 4A 05 F6 | 	mov	COUNT_, #8
28c44     A8 00 A0 FD | 	call	#pushregs_
28c48     09 27 02 F6 | 	mov	local01, arg01
28c4c     0A 29 0A F6 | 	mov	local02, arg02 wz
28c50     0B 2B 02 F6 | 	mov	local03, arg03
28c54     3C 00 90 5D |  if_ne	jmp	#LR__3472
28c58     01 28 06 F6 | 	mov	local02, #1
28c5c     15 2D 02 F6 | 	mov	local04, local03
28c60     01 2E 06 F6 | 	mov	local05, #1
28c64     97 16 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
28c68                 | LR__3470
28c68     00 30 06 F6 | 	mov	local06, #0
28c6c     13 2D 1A F2 | 	cmp	local04, local01 wcz
28c70     01 30 66 E6 |  if_be	neg	local06, #1
28c74     16 2F 12 F2 | 	cmp	local05, local04 wc
28c78     19 33 A2 F1 | 	subx	local07, local07
28c7c     19 31 CA F7 | 	test	local06, local07 wz
28c80     15 2D 02 5D |  if_ne	qmul	local04, local03
28c84     16 2F 02 56 |  if_ne	mov	local05, local04
28c88     01 28 06 51 |  if_ne	add	local02, #1
28c8c     18 2C 62 5D |  if_ne	getqx	local04
28c90     D4 FF 9F 5D |  if_ne	jmp	#LR__3470
28c94                 | LR__3471
28c94                 | LR__3472
28c94     20 28 36 F3 | 	fle	local02, #32 wc
28c98     14 13 02 F6 | 	mov	arg01, local02
28c9c     02 12 06 F1 | 	add	arg01, #2
28ca0     6C 1E B0 FD | 	call	#__system___gc_alloc_managed
28ca4     FD 30 02 F6 | 	mov	local06, result1
28ca8     14 33 02 F6 | 	mov	local07, local02
28cac     18 33 02 F1 | 	add	local07, local06
28cb0     19 01 48 FC | 	wrbyte	#0, local07
28cb4     97 1A 48 FB | 	callpa	#(@LR__3474-@LR__3473)>>2,fcache_load_ptr_
28cb8                 | LR__3473
28cb8     01 28 16 F2 | 	cmp	local02, #1 wc
28cbc     2C 00 90 CD |  if_b	jmp	#LR__3475
28cc0     15 27 12 FD | 	qdiv	local01, local03
28cc4     01 28 86 F1 | 	sub	local02, #1
28cc8     14 33 02 F6 | 	mov	local07, local02
28ccc     18 33 02 F1 | 	add	local07, local06
28cd0     19 34 62 FD | 	getqy	local08
28cd4     0A 34 16 F2 | 	cmp	local08, #10 wc
28cd8     30 34 06 C1 |  if_b	add	local08, #48
28cdc     37 34 06 31 |  if_ae	add	local08, #55
28ce0     19 35 42 FC | 	wrbyte	local08, local07
28ce4     18 26 62 FD | 	getqx	local01
28ce8     CC FF 9F FD | 	jmp	#LR__3473
28cec                 | LR__3474
28cec                 | LR__3475
28cec     18 FB 01 F6 | 	mov	result1, local06
28cf0     A7 F0 03 F6 | 	mov	ptra, fp
28cf4     B2 00 A0 FD | 	call	#popregs_
28cf8                 | __system__Number_S_ret
28cf8     2D 00 64 FD | 	ret
28cfc                 | 
28cfc                 | __system__LCase_S
28cfc     07 4A 05 F6 | 	mov	COUNT_, #7
28d00     A8 00 A0 FD | 	call	#pushregs_
28d04     09 27 02 F6 | 	mov	local01, arg01
28d08     09 29 02 F6 | 	mov	local02, arg01
28d0c     97 06 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
28d10                 | LR__3480
28d10     14 FB C9 FA | 	rdbyte	result1, local02 wz
28d14     01 28 06 51 |  if_ne	add	local02, #1
28d18     F4 FF 9F 5D |  if_ne	jmp	#LR__3480
28d1c                 | LR__3481
28d1c     09 29 82 F1 | 	sub	local02, arg01
28d20     14 FB 01 F6 | 	mov	result1, local02
28d24     FD 28 0A F6 | 	mov	local02, result1 wz
28d28     B2 01 00 AF 
28d2c     8A FA 05 A6 |  if_e	mov	result1, ##@LR__5377
28d30     7C 00 90 AD |  if_e	jmp	#LR__3487
28d34     14 13 02 F6 | 	mov	arg01, local02
28d38     02 12 06 F1 | 	add	arg01, #2
28d3c     D0 1D B0 FD | 	call	#__system___gc_alloc_managed
28d40     FD 2A 0A F6 | 	mov	local03, result1 wz
28d44     64 00 90 AD |  if_e	jmp	#LR__3486
28d48     01 2C 66 F6 | 	neg	local04, #1
28d4c     97 26 48 FB | 	callpa	#(@LR__3485-@LR__3482)>>2,fcache_load_ptr_
28d50                 | LR__3482
28d50     01 2C 06 F1 | 	add	local04, #1
28d54     16 2F 02 F6 | 	mov	local05, local04
28d58     13 2F 02 F1 | 	add	local05, local01
28d5c     17 31 C2 FA | 	rdbyte	local06, local05
28d60     41 30 56 F2 | 	cmps	local06, #65 wc
28d64     18 00 90 CD |  if_b	jmp	#LR__3483
28d68     5B 30 56 F2 | 	cmps	local06, #91 wc
28d6c     16 33 02 C6 |  if_b	mov	local07, local04
28d70     15 33 02 C1 |  if_b	add	local07, local03
28d74     20 30 06 C1 |  if_b	add	local06, #32
28d78     19 31 42 CC |  if_b	wrbyte	local06, local07
28d7c     0C 00 90 CD |  if_b	jmp	#LR__3484
28d80                 | LR__3483
28d80     16 33 02 F6 | 	mov	local07, local04
28d84     15 33 02 F1 | 	add	local07, local03
28d88     19 31 42 FC | 	wrbyte	local06, local07
28d8c                 | LR__3484
28d8c     14 31 02 F6 | 	mov	local06, local02
28d90     01 30 86 F1 | 	sub	local06, #1
28d94     18 2D 0A F2 | 	cmp	local04, local06 wz
28d98     B4 FF 9F 5D |  if_ne	jmp	#LR__3482
28d9c                 | LR__3485
28d9c     15 29 02 F1 | 	add	local02, local03
28da0     14 01 48 FC | 	wrbyte	#0, local02
28da4     15 FB 01 F6 | 	mov	result1, local03
28da8     04 00 90 FD | 	jmp	#LR__3487
28dac                 | LR__3486
28dac     15 FB 01 F6 | 	mov	result1, local03
28db0                 | LR__3487
28db0     A7 F0 03 F6 | 	mov	ptra, fp
28db4     B2 00 A0 FD | 	call	#popregs_
28db8                 | __system__LCase_S_ret
28db8     2D 00 64 FD | 	ret
28dbc                 | 
28dbc                 | __system__LTrim_S
28dbc     05 4A 05 F6 | 	mov	COUNT_, #5
28dc0     A8 00 A0 FD | 	call	#pushregs_
28dc4     09 27 02 F6 | 	mov	local01, arg01
28dc8     09 29 02 F6 | 	mov	local02, arg01
28dcc     97 06 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
28dd0                 | LR__3490
28dd0     14 FB C9 FA | 	rdbyte	result1, local02 wz
28dd4     01 28 06 51 |  if_ne	add	local02, #1
28dd8     F4 FF 9F 5D |  if_ne	jmp	#LR__3490
28ddc                 | LR__3491
28ddc     09 29 82 F1 | 	sub	local02, arg01
28de0     14 FB 01 F6 | 	mov	result1, local02
28de4     FD 28 0A F6 | 	mov	local02, result1 wz
28de8     B2 01 00 AF 
28dec     8B FA 05 A6 |  if_e	mov	result1, ##@LR__5378
28df0     7C 00 90 AD |  if_e	jmp	#LR__3496
28df4     00 2A 06 F6 | 	mov	local03, #0
28df8     14 2D 02 F6 | 	mov	local04, local02
28dfc                 | LR__3492
28dfc     16 2B 52 F2 | 	cmps	local03, local04 wc
28e00     68 00 90 3D |  if_ae	jmp	#LR__3495
28e04     15 17 02 F6 | 	mov	arg03, local03
28e08     13 17 02 F1 | 	add	arg03, local01
28e0c     0B 17 C2 FA | 	rdbyte	arg03, arg03
28e10     20 16 0E F2 | 	cmp	arg03, #32 wz
28e14     4C 00 90 AD |  if_e	jmp	#LR__3494
28e18     14 13 02 F6 | 	mov	arg01, local02
28e1c     15 13 82 F1 | 	sub	arg01, local03
28e20     02 12 06 F1 | 	add	arg01, #2
28e24     E8 1C B0 FD | 	call	#__system___gc_alloc_managed
28e28     FD 2E 0A F6 | 	mov	local05, result1 wz
28e2c     2C 00 90 AD |  if_e	jmp	#LR__3493
28e30     15 15 02 F6 | 	mov	arg02, local03
28e34     13 15 02 F1 | 	add	arg02, local01
28e38     14 17 02 F6 | 	mov	arg03, local02
28e3c     15 17 82 F1 | 	sub	arg03, local03
28e40     17 13 02 F6 | 	mov	arg01, local05
28e44     44 DA BF FD | 	call	#__system____builtin_memmove
28e48     15 29 82 F1 | 	sub	local02, local03
28e4c     17 29 02 F1 | 	add	local02, local05
28e50     14 01 48 FC | 	wrbyte	#0, local02
28e54     17 FB 01 F6 | 	mov	result1, local05
28e58     14 00 90 FD | 	jmp	#LR__3496
28e5c                 | LR__3493
28e5c     17 FB 01 F6 | 	mov	result1, local05
28e60     0C 00 90 FD | 	jmp	#LR__3496
28e64                 | LR__3494
28e64     01 2A 06 F1 | 	add	local03, #1
28e68     90 FF 9F FD | 	jmp	#LR__3492
28e6c                 | LR__3495
28e6c     13 FB 01 F6 | 	mov	result1, local01
28e70                 | LR__3496
28e70     A7 F0 03 F6 | 	mov	ptra, fp
28e74     B2 00 A0 FD | 	call	#popregs_
28e78                 | __system__LTrim_S_ret
28e78     2D 00 64 FD | 	ret
28e7c                 | 
28e7c                 | __system__RTrim_S
28e7c     04 4A 05 F6 | 	mov	COUNT_, #4
28e80     A8 00 A0 FD | 	call	#pushregs_
28e84     09 27 02 F6 | 	mov	local01, arg01
28e88     09 29 02 F6 | 	mov	local02, arg01
28e8c     97 06 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
28e90                 | LR__3500
28e90     14 FB C9 FA | 	rdbyte	result1, local02 wz
28e94     01 28 06 51 |  if_ne	add	local02, #1
28e98     F4 FF 9F 5D |  if_ne	jmp	#LR__3500
28e9c                 | LR__3501
28e9c     09 29 82 F1 | 	sub	local02, arg01
28ea0     14 FB 01 F6 | 	mov	result1, local02
28ea4     FD 28 0A F6 | 	mov	local02, result1 wz
28ea8     B2 01 00 AF 
28eac     8C FA 05 A6 |  if_e	mov	result1, ##@LR__5379
28eb0     74 00 90 AD |  if_e	jmp	#LR__3505
28eb4     14 2B 02 F6 | 	mov	local03, local02
28eb8     01 2A 86 F1 | 	sub	local03, #1
28ebc                 | LR__3502
28ebc     15 15 02 F6 | 	mov	arg02, local03
28ec0     13 15 02 F1 | 	add	arg02, local01
28ec4     0A 29 C2 FA | 	rdbyte	local02, arg02
28ec8     20 28 0E F2 | 	cmp	local02, #32 wz
28ecc     44 00 90 AD |  if_e	jmp	#LR__3504
28ed0     15 13 02 F6 | 	mov	arg01, local03
28ed4     02 12 06 F1 | 	add	arg01, #2
28ed8     34 1C B0 FD | 	call	#__system___gc_alloc_managed
28edc     FD 2C 0A F6 | 	mov	local04, result1 wz
28ee0     28 00 90 AD |  if_e	jmp	#LR__3503
28ee4     15 17 02 F6 | 	mov	arg03, local03
28ee8     01 16 06 F1 | 	add	arg03, #1
28eec     16 13 02 F6 | 	mov	arg01, local04
28ef0     13 15 02 F6 | 	mov	arg02, local01
28ef4     94 D9 BF FD | 	call	#__system____builtin_memmove
28ef8     01 2A 06 F1 | 	add	local03, #1
28efc     16 2B 02 F1 | 	add	local03, local04
28f00     15 01 48 FC | 	wrbyte	#0, local03
28f04     16 FB 01 F6 | 	mov	result1, local04
28f08     1C 00 90 FD | 	jmp	#LR__3505
28f0c                 | LR__3503
28f0c     16 FB 01 F6 | 	mov	result1, local04
28f10     14 00 90 FD | 	jmp	#LR__3505
28f14                 | LR__3504
28f14     01 2A 86 F1 | 	sub	local03, #1
28f18     00 2A 56 F2 | 	cmps	local03, #0 wc
28f1c     9C FF 9F 3D |  if_ae	jmp	#LR__3502
28f20     B2 01 00 FF 
28f24     8D FA 05 F6 | 	mov	result1, ##@LR__5380
28f28                 | LR__3505
28f28     A7 F0 03 F6 | 	mov	ptra, fp
28f2c     B2 00 A0 FD | 	call	#popregs_
28f30                 | __system__RTrim_S_ret
28f30     2D 00 64 FD | 	ret
28f34                 | 
28f34                 | __system__Instr
28f34     07 4A 05 F6 | 	mov	COUNT_, #7
28f38     A8 00 A0 FD | 	call	#pushregs_
28f3c     09 27 02 F6 | 	mov	local01, arg01
28f40     0A 29 02 F6 | 	mov	local02, arg02
28f44     0B 2B 02 F6 | 	mov	local03, arg03
28f48     15 13 02 F6 | 	mov	arg01, local03
28f4c     09 2D 02 F6 | 	mov	local04, arg01
28f50     97 06 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
28f54                 | LR__3510
28f54     16 FB C9 FA | 	rdbyte	result1, local04 wz
28f58     01 2C 06 51 |  if_ne	add	local04, #1
28f5c     F4 FF 9F 5D |  if_ne	jmp	#LR__3510
28f60                 | LR__3511
28f60     09 2D 82 F1 | 	sub	local04, arg01
28f64     16 2F 02 F6 | 	mov	local05, local04
28f68     14 13 02 F6 | 	mov	arg01, local02
28f6c     09 2D 02 F6 | 	mov	local04, arg01
28f70     97 06 48 FB | 	callpa	#(@LR__3513-@LR__3512)>>2,fcache_load_ptr_
28f74                 | LR__3512
28f74     16 FB C9 FA | 	rdbyte	result1, local04 wz
28f78     01 2C 06 51 |  if_ne	add	local04, #1
28f7c     F4 FF 9F 5D |  if_ne	jmp	#LR__3512
28f80                 | LR__3513
28f80     09 2D 82 F1 | 	sub	local04, arg01
28f84     16 FB 01 F6 | 	mov	result1, local04
28f88     FD 18 0A F6 | 	mov	arg04, result1 wz
28f8c     00 FA 05 A6 |  if_e	mov	result1, #0
28f90     98 00 90 AD |  if_e	jmp	#LR__3517
28f94     00 2E 0E F2 | 	cmp	local05, #0 wz
28f98     00 FA 05 A6 |  if_e	mov	result1, #0
28f9c     8C 00 90 AD |  if_e	jmp	#LR__3517
28fa0     0C 27 5A F2 | 	cmps	local01, arg04 wcz
28fa4     00 FA 05 16 |  if_a	mov	result1, #0
28fa8     80 00 90 1D |  if_a	jmp	#LR__3517
28fac     01 26 56 F2 | 	cmps	local01, #1 wc
28fb0     01 26 06 C6 |  if_b	mov	local01, #1
28fb4     15 31 C2 FA | 	rdbyte	local06, local03
28fb8     01 2E 0E F2 | 	cmp	local05, #1 wz
28fbc     18 00 90 5D |  if_ne	jmp	#LR__3514
28fc0     14 13 02 F6 | 	mov	arg01, local02
28fc4     18 15 02 F6 | 	mov	arg02, local06
28fc8     13 17 02 F6 | 	mov	arg03, local01
28fcc     00 18 06 F6 | 	mov	arg04, #0
28fd0     14 37 B0 FD | 	call	#__system____ScanForChar
28fd4     54 00 90 FD | 	jmp	#LR__3517
28fd8                 | LR__3514
28fd8     13 33 02 F6 | 	mov	local07, local01
28fdc                 | LR__3515
28fdc     14 13 02 F6 | 	mov	arg01, local02
28fe0     18 15 02 F6 | 	mov	arg02, local06
28fe4     19 17 02 F6 | 	mov	arg03, local07
28fe8     00 18 06 F6 | 	mov	arg04, #0
28fec     F8 36 B0 FD | 	call	#__system____ScanForChar
28ff0     FD 32 0A F6 | 	mov	local07, result1 wz
28ff4     30 00 90 AD |  if_e	jmp	#LR__3516
28ff8     17 17 02 F6 | 	mov	arg03, local05
28ffc     14 13 02 F6 | 	mov	arg01, local02
29000     19 15 02 F6 | 	mov	arg02, local07
29004     FC FA BF FD | 	call	#__system__Mid_S
29008     FD 12 02 F6 | 	mov	arg01, result1
2900c     15 15 02 F6 | 	mov	arg02, local03
29010     80 D9 BF FD | 	call	#__system___string_cmp
29014     00 FA 0D F2 | 	cmp	result1, #0 wz
29018     19 FB 01 A6 |  if_e	mov	result1, local07
2901c     0C 00 90 AD |  if_e	jmp	#LR__3517
29020     17 33 02 F1 | 	add	local07, local05
29024     B4 FF 9F FD | 	jmp	#LR__3515
29028                 | LR__3516
29028     00 FA 05 F6 | 	mov	result1, #0
2902c                 | LR__3517
2902c     A7 F0 03 F6 | 	mov	ptra, fp
29030     B2 00 A0 FD | 	call	#popregs_
29034                 | __system__Instr_ret
29034     2D 00 64 FD | 	ret
29038                 | 
29038                 | __system__InstrRev
29038     07 4A 05 F6 | 	mov	COUNT_, #7
2903c     A8 00 A0 FD | 	call	#pushregs_
29040     09 27 02 F6 | 	mov	local01, arg01
29044     0A 29 02 F6 | 	mov	local02, arg02
29048     0B 2B 02 F6 | 	mov	local03, arg03
2904c     15 13 02 F6 | 	mov	arg01, local03
29050     09 2D 02 F6 | 	mov	local04, arg01
29054     97 06 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
29058                 | LR__3520
29058     16 FB C9 FA | 	rdbyte	result1, local04 wz
2905c     01 2C 06 51 |  if_ne	add	local04, #1
29060     F4 FF 9F 5D |  if_ne	jmp	#LR__3520
29064                 | LR__3521
29064     09 2D 82 F1 | 	sub	local04, arg01
29068     16 2F 02 F6 | 	mov	local05, local04
2906c     14 13 02 F6 | 	mov	arg01, local02
29070     09 2D 02 F6 | 	mov	local04, arg01
29074     97 06 48 FB | 	callpa	#(@LR__3523-@LR__3522)>>2,fcache_load_ptr_
29078                 | LR__3522
29078     16 FB C9 FA | 	rdbyte	result1, local04 wz
2907c     01 2C 06 51 |  if_ne	add	local04, #1
29080     F4 FF 9F 5D |  if_ne	jmp	#LR__3522
29084                 | LR__3523
29084     09 2D 82 F1 | 	sub	local04, arg01
29088     16 FB 01 F6 | 	mov	result1, local04
2908c     FD 18 0A F6 | 	mov	arg04, result1 wz
29090     00 FA 05 A6 |  if_e	mov	result1, #0
29094     98 00 90 AD |  if_e	jmp	#LR__3527
29098     00 2E 0E F2 | 	cmp	local05, #0 wz
2909c     00 FA 05 A6 |  if_e	mov	result1, #0
290a0     8C 00 90 AD |  if_e	jmp	#LR__3527
290a4     0C 27 5A F2 | 	cmps	local01, arg04 wcz
290a8     0C 27 02 16 |  if_a	mov	local01, arg04
290ac     01 26 56 F2 | 	cmps	local01, #1 wc
290b0     01 26 06 C6 |  if_b	mov	local01, #1
290b4     15 31 C2 FA | 	rdbyte	local06, local03
290b8     01 2E 0E F2 | 	cmp	local05, #1 wz
290bc     18 00 90 5D |  if_ne	jmp	#LR__3524
290c0     14 13 02 F6 | 	mov	arg01, local02
290c4     18 15 02 F6 | 	mov	arg02, local06
290c8     13 17 02 F6 | 	mov	arg03, local01
290cc     01 18 06 F6 | 	mov	arg04, #1
290d0     14 36 B0 FD | 	call	#__system____ScanForChar
290d4     58 00 90 FD | 	jmp	#LR__3527
290d8                 | LR__3524
290d8     17 33 02 F6 | 	mov	local07, local05
290dc     01 32 86 F1 | 	sub	local07, #1
290e0                 | LR__3525
290e0     14 13 02 F6 | 	mov	arg01, local02
290e4     18 15 02 F6 | 	mov	arg02, local06
290e8     19 17 02 F6 | 	mov	arg03, local07
290ec     01 18 06 F6 | 	mov	arg04, #1
290f0     F4 35 B0 FD | 	call	#__system____ScanForChar
290f4     FD 32 0A F6 | 	mov	local07, result1 wz
290f8     30 00 90 AD |  if_e	jmp	#LR__3526
290fc     17 17 02 F6 | 	mov	arg03, local05
29100     14 13 02 F6 | 	mov	arg01, local02
29104     19 15 02 F6 | 	mov	arg02, local07
29108     F8 F9 BF FD | 	call	#__system__Mid_S
2910c     FD 12 02 F6 | 	mov	arg01, result1
29110     15 15 02 F6 | 	mov	arg02, local03
29114     7C D8 BF FD | 	call	#__system___string_cmp
29118     00 FA 0D F2 | 	cmp	result1, #0 wz
2911c     19 FB 01 A6 |  if_e	mov	result1, local07
29120     0C 00 90 AD |  if_e	jmp	#LR__3527
29124     17 33 82 F1 | 	sub	local07, local05
29128     B4 FF 9F FD | 	jmp	#LR__3525
2912c                 | LR__3526
2912c     00 FA 05 F6 | 	mov	result1, #0
29130                 | LR__3527
29130     A7 F0 03 F6 | 	mov	ptra, fp
29134     B2 00 A0 FD | 	call	#popregs_
29138                 | __system__InstrRev_ret
29138     2D 00 64 FD | 	ret
2913c                 | 
2913c                 | __system___remove
2913c     06 4A 05 F6 | 	mov	COUNT_, #6
29140     A8 00 A0 FD | 	call	#pushregs_
29144     84 E7 05 F1 | 	add	ptr___system__dat__, #388
29148     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2914c     09 15 02 F6 | 	mov	arg02, arg01
29150     13 13 02 F6 | 	mov	arg01, local01
29154     00 16 06 F6 | 	mov	arg03, #0
29158     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2915c     A4 DF BF FD | 	call	#__system____getvfsforfile
29160     FD 28 0A F6 | 	mov	local02, result1 wz
29164     10 00 90 AD |  if_e	jmp	#LR__3530
29168     20 28 06 F1 | 	add	local02, #32
2916c     14 13 0A FB | 	rdlong	arg01, local02 wz
29170     20 28 86 F1 | 	sub	local02, #32
29174     14 00 90 5D |  if_ne	jmp	#LR__3531
29178                 | LR__3530
29178     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2917c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
29180     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29184     01 FA 65 F6 | 	neg	result1, #1
29188     A8 00 90 FD | 	jmp	#LR__3534
2918c                 | LR__3531
2918c     40 28 06 F1 | 	add	local02, #64
29190     14 2B 02 FB | 	rdlong	local03, local02
29194     15 2D 02 F6 | 	mov	local04, local03
29198     40 28 86 F1 | 	sub	local02, #64
2919c     13 2C 46 F7 | 	zerox	local04, #19
291a0     14 2A 46 F0 | 	shr	local03, #20
291a4     02 2A 66 F0 | 	shl	local03, #2
291a8     ED 2A 02 F1 | 	add	local03, __methods__
291ac     15 2B 02 FB | 	rdlong	local03, local03
291b0     13 13 02 F6 | 	mov	arg01, local01
291b4     F2 2E 02 F6 | 	mov	local05, objptr
291b8     16 E5 01 F6 | 	mov	objptr, local04
291bc     2D 2A 62 FD | 	call	local03
291c0     17 E5 01 F6 | 	mov	objptr, local05
291c4     FD 30 02 F6 | 	mov	local06, result1
291c8     FF FF 7F FF 
291cc     F2 31 0E F2 | 	cmp	local06, ##-14 wz
291d0     38 00 90 5D |  if_ne	jmp	#LR__3532
291d4     3C 28 06 F1 | 	add	local02, #60
291d8     14 31 02 FB | 	rdlong	local06, local02
291dc     18 2B 02 F6 | 	mov	local03, local06
291e0     13 30 46 F7 | 	zerox	local06, #19
291e4     14 2A 46 F0 | 	shr	local03, #20
291e8     02 2A 66 F0 | 	shl	local03, #2
291ec     ED 2A 02 F1 | 	add	local03, __methods__
291f0     15 2B 02 FB | 	rdlong	local03, local03
291f4     13 13 02 F6 | 	mov	arg01, local01
291f8     F2 2E 02 F6 | 	mov	local05, objptr
291fc     18 E5 01 F6 | 	mov	objptr, local06
29200     2D 2A 62 FD | 	call	local03
29204     17 E5 01 F6 | 	mov	objptr, local05
29208     FD 30 02 F6 | 	mov	local06, result1
2920c                 | LR__3532
2920c     00 30 0E F2 | 	cmp	local06, #0 wz
29210     1C 00 90 AD |  if_e	jmp	#LR__3533
29214     18 13 6A F6 | 	neg	arg01, local06 wz
29218     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2921c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
29220     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29224     01 FA 65 56 |  if_ne	neg	result1, #1
29228     00 FA 05 A6 |  if_e	mov	result1, #0
2922c     04 00 90 FD | 	jmp	#LR__3534
29230                 | LR__3533
29230     00 FA 05 F6 | 	mov	result1, #0
29234                 | LR__3534
29234     A7 F0 03 F6 | 	mov	ptra, fp
29238     B2 00 A0 FD | 	call	#popregs_
2923c                 | __system___remove_ret
2923c     2D 00 64 FD | 	ret
29240                 | 
29240                 | __system___mkdir
29240     05 4A 05 F6 | 	mov	COUNT_, #5
29244     A8 00 A0 FD | 	call	#pushregs_
29248     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2924c     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
29250     09 15 02 F6 | 	mov	arg02, arg01
29254     13 13 02 F6 | 	mov	arg01, local01
29258     00 16 06 F6 | 	mov	arg03, #0
2925c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
29260     A0 DE BF FD | 	call	#__system____getvfsforfile
29264     FD 28 0A F6 | 	mov	local02, result1 wz
29268     10 00 90 AD |  if_e	jmp	#LR__3540
2926c     20 28 06 F1 | 	add	local02, #32
29270     14 15 0A FB | 	rdlong	arg02, local02 wz
29274     20 28 86 F1 | 	sub	local02, #32
29278     14 00 90 5D |  if_ne	jmp	#LR__3541
2927c                 | LR__3540
2927c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29280     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
29284     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29288     01 FA 65 F6 | 	neg	result1, #1
2928c     60 00 90 FD | 	jmp	#LR__3543
29290                 | LR__3541
29290     38 28 06 F1 | 	add	local02, #56
29294     14 2B 02 FB | 	rdlong	local03, local02
29298     15 2D 02 F6 | 	mov	local04, local03
2929c     13 2A 46 F7 | 	zerox	local03, #19
292a0     14 2C 46 F0 | 	shr	local04, #20
292a4     02 2C 66 F0 | 	shl	local04, #2
292a8     ED 2C 02 F1 | 	add	local04, __methods__
292ac     16 2D 02 FB | 	rdlong	local04, local04
292b0     13 13 02 F6 | 	mov	arg01, local01
292b4     FF 15 06 F6 | 	mov	arg02, #511
292b8     F2 2E 02 F6 | 	mov	local05, objptr
292bc     15 E5 01 F6 | 	mov	objptr, local03
292c0     2D 2C 62 FD | 	call	local04
292c4     17 E5 01 F6 | 	mov	objptr, local05
292c8     FD 12 0A F6 | 	mov	arg01, result1 wz
292cc     1C 00 90 AD |  if_e	jmp	#LR__3542
292d0     09 13 6A F6 | 	neg	arg01, arg01 wz
292d4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
292d8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
292dc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
292e0     01 FA 65 56 |  if_ne	neg	result1, #1
292e4     00 FA 05 A6 |  if_e	mov	result1, #0
292e8     04 00 90 FD | 	jmp	#LR__3543
292ec                 | LR__3542
292ec     00 FA 05 F6 | 	mov	result1, #0
292f0                 | LR__3543
292f0     A7 F0 03 F6 | 	mov	ptra, fp
292f4     B2 00 A0 FD | 	call	#popregs_
292f8                 | __system___mkdir_ret
292f8     2D 00 64 FD | 	ret
292fc                 | 
292fc                 | __system___strerror
292fc     00 12 56 F2 | 	cmps	arg01, #0 wc
29300     08 00 90 CD |  if_b	jmp	#LR__3550
29304     1A 12 56 F2 | 	cmps	arg01, #26 wc
29308     04 00 90 CD |  if_b	jmp	#LR__3551
2930c                 | LR__3550
2930c     19 12 06 F6 | 	mov	arg01, #25
29310                 | LR__3551
29310     02 12 66 F0 | 	shl	arg01, #2
29314     01 00 00 FF 
29318     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
2931c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
29320     09 FB 01 FB | 	rdlong	result1, arg01
29324     01 00 00 FF 
29328     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
2932c                 | __system___strerror_ret
2932c     2D 00 64 FD | 	ret
29330                 | 
29330                 | __system___int64_shl
29330     20 16 CE F7 | 	test	arg03, #32 wz
29334     09 15 02 56 |  if_ne	mov	arg02, arg01
29338     00 12 06 56 |  if_ne	mov	arg01, #0
2933c     1F 16 CE F7 | 	test	arg03, #31 wz
29340     18 00 90 AD |  if_e	jmp	#LR__3560
29344     0B 15 62 F0 | 	shl	arg02, arg03
29348     09 FB 01 F6 | 	mov	result1, arg01
2934c     0B FD 61 F6 | 	neg	result2, arg03
29350     FE FA 41 F0 | 	shr	result1, result2
29354     FD 14 42 F5 | 	or	arg02, result1
29358     0B 13 62 F0 | 	shl	arg01, arg03
2935c                 | LR__3560
2935c     0A FD 01 F6 | 	mov	result2, arg02
29360     09 FB 01 F6 | 	mov	result1, arg01
29364                 | __system___int64_shl_ret
29364     2D 00 64 FD | 	ret
29368                 | 
29368                 | __system___usepins
29368     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2936c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
29370     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
29374     00 13 CA F7 | 	test	arg01, _var01 wz
29378     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
2937c     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
29380     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
29384     01 15 CA A7 |  if_e	test	arg02, _var02 wz
29388     00 FA 05 56 |  if_ne	mov	result1, #0
2938c     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
29390     14 E6 05 F1 | 	add	ptr___system__dat__, #20
29394     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
29398     09 03 42 F5 | 	or	_var02, arg01
2939c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
293a0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
293a4     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
293a8     0A 03 42 F5 | 	or	_var02, arg02
293ac     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
293b0     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
293b4     01 FA 65 F6 | 	neg	result1, #1
293b8                 | __system___usepins_ret
293b8     2D 00 64 FD | 	ret
293bc                 | 
293bc                 | __system___freepins
293bc     14 E6 05 F1 | 	add	ptr___system__dat__, #20
293c0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
293c4     09 01 22 F5 | 	andn	_var01, arg01
293c8     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
293cc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
293d0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
293d4     0A 01 22 F5 | 	andn	_var01, arg02
293d8     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
293dc     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
293e0                 | __system___freepins_ret
293e0     2D 00 64 FD | 	ret
293e4                 | 
293e4                 | __system___float_fromuns
293e4     09 17 0A F6 | 	mov	arg03, arg01 wz
293e8     0B FB 01 A6 |  if_e	mov	result1, arg03
293ec     24 00 90 AD |  if_e	jmp	#LR__3570
293f0     0B 15 92 F7 | 	encod	arg02, arg03 wc
293f4     01 14 06 C1 |  if_b	add	arg02, #1
293f8     01 14 86 F1 | 	sub	arg02, #1
293fc     1F 12 06 F6 | 	mov	arg01, #31
29400     0A 13 82 F1 | 	sub	arg01, arg02
29404     09 17 62 F0 | 	shl	arg03, arg01
29408     02 16 46 F0 | 	shr	arg03, #2
2940c     00 12 06 F6 | 	mov	arg01, #0
29410     4C 09 B0 FD | 	call	#__system___float_Pack
29414                 | LR__3570
29414                 | __system___float_fromuns_ret
29414     2D 00 64 FD | 	ret
29418                 | 
29418                 | __system___float_add
29418     0F 4A 05 F6 | 	mov	COUNT_, #15
2941c     A8 00 A0 FD | 	call	#pushregs_
29420     09 27 02 F6 | 	mov	local01, arg01
29424     0A 29 02 F6 | 	mov	local02, arg02
29428     00 2A 06 F6 | 	mov	local03, #0
2942c     13 2D 02 F6 | 	mov	local04, local01
29430     16 2F 02 F6 | 	mov	local05, local04
29434     16 2E 46 F7 | 	zerox	local05, #22
29438     16 31 02 F6 | 	mov	local06, local04
2943c     01 30 66 F0 | 	shl	local06, #1
29440     18 30 46 F0 | 	shr	local06, #24
29444     1F 2C 46 F0 | 	shr	local04, #31
29448     14 13 02 F6 | 	mov	arg01, local02
2944c     09 FB 01 F6 | 	mov	result1, arg01
29450     FD 32 02 F6 | 	mov	local07, result1
29454     19 35 02 F6 | 	mov	local08, local07
29458     16 34 46 F7 | 	zerox	local08, #22
2945c     19 37 02 F6 | 	mov	local09, local07
29460     01 36 66 F0 | 	shl	local09, #1
29464     18 36 46 F0 | 	shr	local09, #24
29468     1B 39 02 F6 | 	mov	local10, local09
2946c     1F 32 46 F0 | 	shr	local07, #31
29470     00 3A 06 F6 | 	mov	local11, #0
29474     00 3C 06 F6 | 	mov	local12, #0
29478     1C 31 12 F2 | 	cmp	local06, local10 wc
2947c     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
29480     2C 00 90 1D |  if_a	jmp	#LR__3580
29484     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
29488     24 00 90 3D |  if_ae	jmp	#LR__3580
2948c     17 3F 02 F6 | 	mov	local13, local05
29490     1A 2F 02 F6 | 	mov	local05, local08
29494     1F 35 02 F6 | 	mov	local08, local13
29498     18 3F 02 F6 | 	mov	local13, local06
2949c     1C 31 02 F6 | 	mov	local06, local10
294a0     1F 39 02 F6 | 	mov	local10, local13
294a4     16 3F 02 F6 | 	mov	local13, local04
294a8     19 2D 02 F6 | 	mov	local04, local07
294ac     1F 33 02 F6 | 	mov	local07, local13
294b0                 | LR__3580
294b0     FF 30 0E F2 | 	cmp	local06, #255 wz
294b4     70 01 90 AD |  if_e	jmp	#LR__3595
294b8     00 30 0E F2 | 	cmp	local06, #0 wz
294bc     AC 01 90 AD |  if_e	jmp	#LR__3597
294c0     17 2E 26 F4 | 	bith	local05, #23
294c4                 | LR__3581
294c4     00 38 0E F2 | 	cmp	local10, #0 wz
294c8     F0 01 90 AD |  if_e	jmp	#LR__3601
294cc     17 34 26 F4 | 	bith	local08, #23
294d0                 | LR__3582
294d0     7F 30 86 F1 | 	sub	local06, #127
294d4     7F 38 86 F1 | 	sub	local10, #127
294d8     18 41 02 F6 | 	mov	local14, local06
294dc     1C 41 82 F1 | 	sub	local14, local10
294e0     97 14 48 FB | 	callpa	#(@LR__3584-@LR__3583)>>2,fcache_load_ptr_
294e4                 | LR__3583
294e4     20 40 56 F2 | 	cmps	local14, #32 wc
294e8     20 00 90 CD |  if_b	jmp	#LR__3585
294ec     1A 37 02 F6 | 	mov	local09, local08
294f0     00 3A 0E F2 | 	cmp	local11, #0 wz
294f4     6F 3A 62 FD | 	wrnz	local11
294f8     1D 37 42 F5 | 	or	local09, local11
294fc     1B 3B 02 F6 | 	mov	local11, local09
29500     00 34 06 F6 | 	mov	local08, #0
29504     20 40 86 F1 | 	sub	local14, #32
29508     D8 FF 9F FD | 	jmp	#LR__3583
2950c                 | LR__3584
2950c                 | LR__3585
2950c     00 40 0E F2 | 	cmp	local14, #0 wz
29510     38 00 90 AD |  if_e	jmp	#LR__3586
29514     1A 3F 02 F6 | 	mov	local13, local08
29518     20 38 06 F6 | 	mov	local10, #32
2951c     20 39 82 F1 | 	sub	local10, local14
29520     1C 3F 62 F0 | 	shl	local13, local10
29524     1D 39 02 F6 | 	mov	local10, local11
29528     20 36 06 F6 | 	mov	local09, #32
2952c     20 37 82 F1 | 	sub	local09, local14
29530     1B 39 6A F0 | 	shl	local10, local09 wz
29534     20 3B 42 F0 | 	shr	local11, local14
29538     20 35 42 F0 | 	shr	local08, local14
2953c     1F 3B 42 F5 | 	or	local11, local13
29540     00 42 06 F6 | 	mov	local15, #0
29544     01 42 06 56 |  if_ne	mov	local15, #1
29548     21 3B 42 F5 | 	or	local11, local15
2954c                 | LR__3586
2954c     16 43 02 F6 | 	mov	local15, local04
29550     19 43 62 F5 | 	xor	local15, local07
29554     01 42 CE F7 | 	test	local15, #1 wz
29558     18 00 90 AD |  if_e	jmp	#LR__3587
2955c     1A 35 22 F6 | 	not	local08, local08
29560     1D 3B 22 F6 | 	not	local11, local11
29564     01 3A 0E F1 | 	add	local11, #1 wz
29568     00 42 06 F6 | 	mov	local15, #0
2956c     01 42 06 A6 |  if_e	mov	local15, #1
29570     21 35 02 F1 | 	add	local08, local15
29574                 | LR__3587
29574     1D 3D 12 F1 | 	add	local12, local11 wc
29578     1A 2F 22 F1 | 	addx	local05, local08
2957c     00 2E 56 F2 | 	cmps	local05, #0 wc
29580     1C 00 90 3D |  if_ae	jmp	#LR__3588
29584     01 2C 66 F5 | 	xor	local04, #1
29588     17 2F 22 F6 | 	not	local05, local05
2958c     1E 3D 22 F6 | 	not	local12, local12
29590     01 3C 0E F1 | 	add	local12, #1 wz
29594     00 42 06 F6 | 	mov	local15, #0
29598     01 42 06 A6 |  if_e	mov	local15, #1
2959c     21 2F 02 F1 | 	add	local05, local15
295a0                 | LR__3588
295a0     00 80 00 FF 
295a4     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
295a8     28 00 90 CD |  if_b	jmp	#LR__3589
295ac     01 30 06 F1 | 	add	local06, #1
295b0     1E 41 02 F6 | 	mov	local14, local12
295b4     01 40 06 F5 | 	and	local14, #1
295b8     01 3C 46 F0 | 	shr	local12, #1
295bc     17 43 02 F6 | 	mov	local15, local05
295c0     1F 42 66 F0 | 	shl	local15, #31
295c4     21 3D 42 F5 | 	or	local12, local15
295c8     20 3D 42 F5 | 	or	local12, local14
295cc     01 2E 46 F0 | 	shr	local05, #1
295d0     3C 00 90 FD | 	jmp	#LR__3594
295d4                 | LR__3589
295d4     00 40 00 FF 
295d8     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
295dc     30 00 90 3D |  if_ae	jmp	#LR__3593
295e0     00 2E 0E F2 | 	cmp	local05, #0 wz
295e4     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
295e8     08 2C 46 A5 |  if_e	or	local04, #8
295ec     01 2C 26 A5 |  if_e	andn	local04, #1
295f0     1C 00 90 AD |  if_e	jmp	#LR__3592
295f4                 | LR__3590
295f4     00 40 00 FF 
295f8     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
295fc     10 00 90 3D |  if_ae	jmp	#LR__3591
29600     1E 3D 12 F1 | 	add	local12, local12 wc
29604     17 2F 22 F1 | 	addx	local05, local05
29608     01 30 86 F1 | 	sub	local06, #1
2960c     E4 FF 9F FD | 	jmp	#LR__3590
29610                 | LR__3591
29610                 | LR__3592
29610                 | LR__3593
29610                 | LR__3594
29610     17 13 02 F6 | 	mov	arg01, local05
29614     1E 15 02 F6 | 	mov	arg02, local12
29618     18 17 02 F6 | 	mov	arg03, local06
2961c     16 19 02 F6 | 	mov	arg04, local04
29620     08 35 B0 FD | 	call	#__system__pack_0681
29624     DC 00 90 FD | 	jmp	#LR__3605
29628                 | LR__3595
29628     FF 38 0E F2 | 	cmp	local10, #255 wz
2962c     10 00 90 5D |  if_ne	jmp	#LR__3596
29630     16 33 0A F2 | 	cmp	local07, local04 wz
29634     00 F8 3F 5F 
29638     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2963c     C4 00 90 5D |  if_ne	jmp	#LR__3605
29640                 | LR__3596
29640     00 2E 0E F2 | 	cmp	local05, #0 wz
29644     00 F8 3F 5F 
29648     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
2964c     B4 00 90 5D |  if_ne	jmp	#LR__3605
29650     1E 15 02 F6 | 	mov	arg02, local12
29654     18 17 02 F6 | 	mov	arg03, local06
29658     16 19 02 F6 | 	mov	arg04, local04
2965c     02 18 46 F5 | 	or	arg04, #2
29660     17 13 02 F6 | 	mov	arg01, local05
29664     C4 34 B0 FD | 	call	#__system__pack_0681
29668     98 00 90 FD | 	jmp	#LR__3605
2966c                 | LR__3597
2966c     00 2E 0E F2 | 	cmp	local05, #0 wz
29670     28 00 90 AD |  if_e	jmp	#LR__3600
29674     01 2E 66 F0 | 	shl	local05, #1
29678     97 0E 48 FB | 	callpa	#(@LR__3599-@LR__3598)>>2,fcache_load_ptr_
2967c                 | LR__3598
2967c     00 40 00 FF 
29680     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
29684     18 43 02 C6 |  if_b	mov	local15, local06
29688     01 42 86 C1 |  if_b	sub	local15, #1
2968c     21 31 02 C6 |  if_b	mov	local06, local15
29690     01 2E 66 C0 |  if_b	shl	local05, #1
29694     E4 FF 9F CD |  if_b	jmp	#LR__3598
29698                 | LR__3599
29698     28 FE 9F FD | 	jmp	#LR__3581
2969c                 | LR__3600
2969c     19 2D 02 F5 | 	and	local04, local07
296a0     16 19 02 F6 | 	mov	arg04, local04
296a4     08 18 46 F5 | 	or	arg04, #8
296a8     00 12 06 F6 | 	mov	arg01, #0
296ac     00 14 06 F6 | 	mov	arg02, #0
296b0     00 16 06 F6 | 	mov	arg03, #0
296b4     74 34 B0 FD | 	call	#__system__pack_0681
296b8     48 00 90 FD | 	jmp	#LR__3605
296bc                 | LR__3601
296bc     00 34 0E F2 | 	cmp	local08, #0 wz
296c0     28 00 90 AD |  if_e	jmp	#LR__3604
296c4     01 34 66 F0 | 	shl	local08, #1
296c8     97 0E 48 FB | 	callpa	#(@LR__3603-@LR__3602)>>2,fcache_load_ptr_
296cc                 | LR__3602
296cc     00 40 00 FF 
296d0     00 34 16 F2 | 	cmp	local08, ##8388608 wc
296d4     1C 43 02 C6 |  if_b	mov	local15, local10
296d8     01 42 86 C1 |  if_b	sub	local15, #1
296dc     21 39 02 C6 |  if_b	mov	local10, local15
296e0     01 34 66 C0 |  if_b	shl	local08, #1
296e4     E4 FF 9F CD |  if_b	jmp	#LR__3602
296e8                 | LR__3603
296e8     E4 FD 9F FD | 	jmp	#LR__3582
296ec                 | LR__3604
296ec     7F 30 86 F1 | 	sub	local06, #127
296f0     17 13 02 F6 | 	mov	arg01, local05
296f4     1E 15 02 F6 | 	mov	arg02, local12
296f8     18 17 02 F6 | 	mov	arg03, local06
296fc     16 19 02 F6 | 	mov	arg04, local04
29700     28 34 B0 FD | 	call	#__system__pack_0681
29704                 | LR__3605
29704     A7 F0 03 F6 | 	mov	ptra, fp
29708     B2 00 A0 FD | 	call	#popregs_
2970c                 | __system___float_add_ret
2970c     2D 00 64 FD | 	ret
29710                 | 
29710                 | __system___float_sqrt
29710     04 4A 05 F6 | 	mov	COUNT_, #4
29714     A8 00 A0 FD | 	call	#pushregs_
29718     09 27 02 F6 | 	mov	local01, arg01
2971c     09 FB 01 F6 | 	mov	result1, arg01
29720     FD 28 02 F6 | 	mov	local02, result1
29724     14 2B 02 F6 | 	mov	local03, local02
29728     16 2A 46 F7 | 	zerox	local03, #22
2972c     14 2D 02 F6 | 	mov	local04, local02
29730     01 2C 66 F0 | 	shl	local04, #1
29734     18 2C 4E F0 | 	shr	local04, #24 wz
29738     1F 28 46 F0 | 	shr	local02, #31
2973c     70 00 90 AD |  if_e	jmp	#LR__3611
29740     17 2A 26 F4 | 	bith	local03, #23
29744                 | LR__3610
29744     00 28 0E F2 | 	cmp	local02, #0 wz
29748     00 F8 3F 5F 
2974c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
29750     88 00 90 5D |  if_ne	jmp	#LR__3614
29754     FF 2C 0E F2 | 	cmp	local04, #255 wz
29758     13 FB 01 A6 |  if_e	mov	result1, local01
2975c     7C 00 90 AD |  if_e	jmp	#LR__3614
29760     7F 2C 86 F1 | 	sub	local04, #127
29764     01 2C CE F7 | 	test	local04, #1 wz
29768     01 2A 66 50 |  if_ne	shl	local03, #1
2976c     05 2A 66 F0 | 	shl	local03, #5
29770     15 01 38 FD | 	qsqrt	#0, local03
29774     01 2C 86 51 |  if_ne	sub	local04, #1
29778     16 2D 52 F6 | 	abs	local04, local04 wc
2977c     01 2C 46 F0 | 	shr	local04, #1
29780     16 17 82 F6 | 	negc	arg03, local04
29784     14 19 02 F6 | 	mov	arg04, local02
29788     18 12 62 FD | 	getqx	arg01
2978c     09 15 02 F6 | 	mov	arg02, arg01
29790     19 14 66 F0 | 	shl	arg02, #25
29794     07 12 46 F0 | 	shr	arg01, #7
29798     00 80 00 FF 
2979c     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
297a0     01 16 06 31 |  if_ae	add	arg03, #1
297a4     01 12 46 30 |  if_ae	shr	arg01, #1
297a8     80 33 B0 FD | 	call	#__system__pack_0681
297ac     2C 00 90 FD | 	jmp	#LR__3614
297b0                 | LR__3611
297b0     00 2A 0E F2 | 	cmp	local03, #0 wz
297b4     13 FB 01 A6 |  if_e	mov	result1, local01
297b8     20 00 90 AD |  if_e	jmp	#LR__3614
297bc     01 2A 66 F0 | 	shl	local03, #1
297c0     97 0A 48 FB | 	callpa	#(@LR__3613-@LR__3612)>>2,fcache_load_ptr_
297c4                 | LR__3612
297c4     00 40 00 FF 
297c8     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
297cc     01 2C 86 C1 |  if_b	sub	local04, #1
297d0     01 2A 66 C0 |  if_b	shl	local03, #1
297d4     EC FF 9F CD |  if_b	jmp	#LR__3612
297d8                 | LR__3613
297d8     68 FF 9F FD | 	jmp	#LR__3610
297dc                 | LR__3614
297dc     A7 F0 03 F6 | 	mov	ptra, fp
297e0     B2 00 A0 FD | 	call	#popregs_
297e4                 | __system___float_sqrt_ret
297e4     2D 00 64 FD | 	ret
297e8                 | 
297e8                 | __system___float_mul
297e8     0B 4A 05 F6 | 	mov	COUNT_, #11
297ec     A8 00 A0 FD | 	call	#pushregs_
297f0     09 27 02 F6 | 	mov	local01, arg01
297f4     0A 29 02 F6 | 	mov	local02, arg02
297f8     13 2B 02 F6 | 	mov	local03, local01
297fc     15 2D 02 F6 | 	mov	local04, local03
29800     16 2C 46 F7 | 	zerox	local04, #22
29804     15 2F 02 F6 | 	mov	local05, local03
29808     01 2E 66 F0 | 	shl	local05, #1
2980c     18 2E 46 F0 | 	shr	local05, #24
29810     1F 2A 46 F0 | 	shr	local03, #31
29814     14 FB 01 F6 | 	mov	result1, local02
29818     FD 30 02 F6 | 	mov	local06, result1
2981c     18 33 02 F6 | 	mov	local07, local06
29820     16 32 46 F7 | 	zerox	local07, #22
29824     18 35 02 F6 | 	mov	local08, local06
29828     01 34 66 F0 | 	shl	local08, #1
2982c     18 34 46 F0 | 	shr	local08, #24
29830     1F 30 46 F0 | 	shr	local06, #31
29834     18 2B 62 F5 | 	xor	local03, local06
29838     FF 2E 0E F2 | 	cmp	local05, #255 wz
2983c     90 00 90 AD |  if_e	jmp	#LR__3623
29840     FF 34 0E F2 | 	cmp	local08, #255 wz
29844     D8 00 90 AD |  if_e	jmp	#LR__3625
29848     00 2E 0E F2 | 	cmp	local05, #0 wz
2984c     0C 01 90 AD |  if_e	jmp	#LR__3626
29850     17 2C 26 F4 | 	bith	local04, #23
29854                 | LR__3620
29854     00 34 0E F2 | 	cmp	local08, #0 wz
29858     44 01 90 AD |  if_e	jmp	#LR__3630
2985c     17 32 26 F4 | 	bith	local07, #23
29860                 | LR__3621
29860     16 29 02 F6 | 	mov	local02, local04
29864     04 28 66 F0 | 	shl	local02, #4
29868     19 31 02 F6 | 	mov	local06, local07
2986c     05 30 66 F0 | 	shl	local06, #5
29870     18 29 02 FD | 	qmul	local02, local06
29874     1A 2F 02 F1 | 	add	local05, local08
29878     FE 2E 86 F1 | 	sub	local05, #254
2987c     17 37 02 F6 | 	mov	local09, local05
29880     04 2C 66 F0 | 	shl	local04, #4
29884     05 32 66 F0 | 	shl	local07, #5
29888     18 38 62 FD | 	getqx	local10
2988c     19 2D 02 FD | 	qmul	local04, local07
29890     19 3A 62 FD | 	getqy	local11
29894     00 80 00 FF 
29898     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
2989c     18 00 90 CD |  if_b	jmp	#LR__3622
298a0     01 36 06 F1 | 	add	local09, #1
298a4     01 38 46 F0 | 	shr	local10, #1
298a8     1D 35 02 F6 | 	mov	local08, local11
298ac     1F 34 66 F0 | 	shl	local08, #31
298b0     1A 39 42 F5 | 	or	local10, local08
298b4     01 3A 46 F0 | 	shr	local11, #1
298b8                 | LR__3622
298b8     1D 13 02 F6 | 	mov	arg01, local11
298bc     1C 15 02 F6 | 	mov	arg02, local10
298c0     1B 17 02 F6 | 	mov	arg03, local09
298c4     15 19 02 F6 | 	mov	arg04, local03
298c8     60 32 B0 FD | 	call	#__system__pack_0681
298cc     10 01 90 FD | 	jmp	#LR__3634
298d0                 | LR__3623
298d0     00 2C 0E F2 | 	cmp	local04, #0 wz
298d4     13 FB 01 56 |  if_ne	mov	result1, local01
298d8     04 01 90 5D |  if_ne	jmp	#LR__3634
298dc     FF 34 56 F2 | 	cmps	local08, #255 wc
298e0     00 34 0E C2 |  if_b	cmp	local08, #0 wz
298e4     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
298e8     18 00 90 4D |  if_c_and_nz	jmp	#LR__3624
298ec     00 F8 3F CF 
298f0     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
298f4     E8 00 90 CD |  if_b	jmp	#LR__3634
298f8     00 32 0E F2 | 	cmp	local07, #0 wz
298fc     14 FB 01 56 |  if_ne	mov	result1, local02
29900     DC 00 90 5D |  if_ne	jmp	#LR__3634
29904                 | LR__3624
29904     02 2A 46 F5 | 	or	local03, #2
29908     00 12 06 F6 | 	mov	arg01, #0
2990c     00 14 06 F6 | 	mov	arg02, #0
29910     17 17 02 F6 | 	mov	arg03, local05
29914     15 19 02 F6 | 	mov	arg04, local03
29918     10 32 B0 FD | 	call	#__system__pack_0681
2991c     C0 00 90 FD | 	jmp	#LR__3634
29920                 | LR__3625
29920     00 2E 0E F2 | 	cmp	local05, #0 wz
29924     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
29928     00 F8 3F AF 
2992c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
29930     AC 00 90 AD |  if_e	jmp	#LR__3634
29934     00 32 0E F2 | 	cmp	local07, #0 wz
29938     14 FB 01 56 |  if_ne	mov	result1, local02
2993c     A0 00 90 5D |  if_ne	jmp	#LR__3634
29940     1A 17 02 F6 | 	mov	arg03, local08
29944     15 19 02 F6 | 	mov	arg04, local03
29948     02 18 46 F5 | 	or	arg04, #2
2994c     00 12 06 F6 | 	mov	arg01, #0
29950     00 14 06 F6 | 	mov	arg02, #0
29954     D4 31 B0 FD | 	call	#__system__pack_0681
29958     84 00 90 FD | 	jmp	#LR__3634
2995c                 | LR__3626
2995c     00 2C 0E F2 | 	cmp	local04, #0 wz
29960     20 00 90 AD |  if_e	jmp	#LR__3629
29964     01 2C 66 F0 | 	shl	local04, #1
29968     97 0A 48 FB | 	callpa	#(@LR__3628-@LR__3627)>>2,fcache_load_ptr_
2996c                 | LR__3627
2996c     00 40 00 FF 
29970     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
29974     01 2E 86 C1 |  if_b	sub	local05, #1
29978     01 2C 66 C0 |  if_b	shl	local04, #1
2997c     EC FF 9F CD |  if_b	jmp	#LR__3627
29980                 | LR__3628
29980     D0 FE 9F FD | 	jmp	#LR__3620
29984                 | LR__3629
29984     08 2A 46 F5 | 	or	local03, #8
29988     00 12 06 F6 | 	mov	arg01, #0
2998c     00 14 06 F6 | 	mov	arg02, #0
29990     00 16 06 F6 | 	mov	arg03, #0
29994     15 19 02 F6 | 	mov	arg04, local03
29998     90 31 B0 FD | 	call	#__system__pack_0681
2999c     40 00 90 FD | 	jmp	#LR__3634
299a0                 | LR__3630
299a0     00 32 0E F2 | 	cmp	local07, #0 wz
299a4     20 00 90 AD |  if_e	jmp	#LR__3633
299a8     01 32 66 F0 | 	shl	local07, #1
299ac     97 0A 48 FB | 	callpa	#(@LR__3632-@LR__3631)>>2,fcache_load_ptr_
299b0                 | LR__3631
299b0     00 40 00 FF 
299b4     00 32 16 F2 | 	cmp	local07, ##8388608 wc
299b8     01 34 86 C1 |  if_b	sub	local08, #1
299bc     01 32 66 C0 |  if_b	shl	local07, #1
299c0     EC FF 9F CD |  if_b	jmp	#LR__3631
299c4                 | LR__3632
299c4     98 FE 9F FD | 	jmp	#LR__3621
299c8                 | LR__3633
299c8     08 2A 46 F5 | 	or	local03, #8
299cc     00 12 06 F6 | 	mov	arg01, #0
299d0     00 14 06 F6 | 	mov	arg02, #0
299d4     00 16 06 F6 | 	mov	arg03, #0
299d8     15 19 02 F6 | 	mov	arg04, local03
299dc     4C 31 B0 FD | 	call	#__system__pack_0681
299e0                 | LR__3634
299e0     A7 F0 03 F6 | 	mov	ptra, fp
299e4     B2 00 A0 FD | 	call	#popregs_
299e8                 | __system___float_mul_ret
299e8     2D 00 64 FD | 	ret
299ec                 | 
299ec                 | __system___float_div
299ec     0E 4A 05 F6 | 	mov	COUNT_, #14
299f0     A8 00 A0 FD | 	call	#pushregs_
299f4     09 2B 02 F6 | 	mov	local03, arg01
299f8     0A 2D 02 F6 | 	mov	local04, arg02
299fc     15 2F 02 F6 | 	mov	local05, local03
29a00     17 31 02 F6 | 	mov	local06, local05
29a04     16 30 46 F7 | 	zerox	local06, #22
29a08     17 33 02 F6 | 	mov	local07, local05
29a0c     01 32 66 F0 | 	shl	local07, #1
29a10     18 32 46 F0 | 	shr	local07, #24
29a14     1F 2E 46 F0 | 	shr	local05, #31
29a18     16 FB 01 F6 | 	mov	result1, local04
29a1c     FD 34 02 F6 | 	mov	local08, result1
29a20     1A 37 02 F6 | 	mov	local09, local08
29a24     16 36 46 F7 | 	zerox	local09, #22
29a28     1A 39 02 F6 | 	mov	local10, local08
29a2c     01 38 66 F0 | 	shl	local10, #1
29a30     18 38 46 F0 | 	shr	local10, #24
29a34     1F 34 46 F0 | 	shr	local08, #31
29a38     1A 2F 62 F5 | 	xor	local05, local08
29a3c     FF 32 0E F2 | 	cmp	local07, #255 wz
29a40     D4 00 90 AD |  if_e	jmp	#LR__3645
29a44     FF 38 0E F2 | 	cmp	local10, #255 wz
29a48     04 01 90 AD |  if_e	jmp	#LR__3646
29a4c     00 32 0E F2 | 	cmp	local07, #0 wz
29a50     24 01 90 AD |  if_e	jmp	#LR__3647
29a54     17 30 26 F4 | 	bith	local06, #23
29a58                 | LR__3640
29a58     00 38 0E F2 | 	cmp	local10, #0 wz
29a5c     70 01 90 AD |  if_e	jmp	#LR__3651
29a60     17 36 26 F4 | 	bith	local09, #23
29a64                 | LR__3641
29a64     1C 33 82 F1 | 	sub	local07, local10
29a68     19 3B 02 F6 | 	mov	local11, local07
29a6c     18 13 02 F6 | 	mov	arg01, local06
29a70     02 12 46 F0 | 	shr	arg01, #2
29a74     1E 30 66 F0 | 	shl	local06, #30
29a78     18 15 02 F6 | 	mov	arg02, local06
29a7c     1B 17 02 F6 | 	mov	arg03, local09
29a80     28 12 62 FD | 	setq	arg01
29a84     0B 15 12 FD | 	qdiv	arg02, arg03
29a88     00 3C 06 F6 | 	mov	local12, #0
29a8c     18 26 62 FD | 	getqx	local01
29a90     19 FC 61 FD | 	getqy	result2
29a94     FE 28 02 F6 | 	mov	local02, result2
29a98     13 3F 02 F6 | 	mov	local13, local01
29a9c     00 28 4E F2 | 	cmps	local02, #0 wz
29aa0     1F 41 02 F6 | 	mov	local14, local13
29aa4     19 40 66 F0 | 	shl	local14, #25
29aa8     01 3C 06 56 |  if_ne	mov	local12, #1
29aac     1E 41 42 F5 | 	or	local14, local12
29ab0     07 3E 46 F0 | 	shr	local13, #7
29ab4     00 80 00 FF 
29ab8     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
29abc     1C 00 90 CD |  if_b	jmp	#LR__3642
29ac0     01 3A 06 F1 | 	add	local11, #1
29ac4     01 40 46 F0 | 	shr	local14, #1
29ac8     1F 3D 02 F6 | 	mov	local12, local13
29acc     1F 3C 66 F0 | 	shl	local12, #31
29ad0     1E 41 42 F5 | 	or	local14, local12
29ad4     01 3E 46 F0 | 	shr	local13, #1
29ad8     24 00 90 FD | 	jmp	#LR__3644
29adc                 | LR__3642
29adc     00 40 00 FF 
29ae0     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
29ae4     18 00 90 3D |  if_ae	jmp	#LR__3643
29ae8     01 3A 86 F1 | 	sub	local11, #1
29aec     01 3E 66 F0 | 	shl	local13, #1
29af0     20 3D 02 F6 | 	mov	local12, local14
29af4     1F 3C 46 F0 | 	shr	local12, #31
29af8     1E 3F 42 F5 | 	or	local13, local12
29afc     01 40 66 F0 | 	shl	local14, #1
29b00                 | LR__3643
29b00                 | LR__3644
29b00     1F 13 02 F6 | 	mov	arg01, local13
29b04     20 15 02 F6 | 	mov	arg02, local14
29b08     1D 17 02 F6 | 	mov	arg03, local11
29b0c     17 19 02 F6 | 	mov	arg04, local05
29b10     18 30 B0 FD | 	call	#__system__pack_0681
29b14     F8 00 90 FD | 	jmp	#LR__3655
29b18                 | LR__3645
29b18     00 30 0E F2 | 	cmp	local06, #0 wz
29b1c     15 FB 01 56 |  if_ne	mov	result1, local03
29b20     EC 00 90 5D |  if_ne	jmp	#LR__3655
29b24     FF 38 0E F2 | 	cmp	local10, #255 wz
29b28     00 F8 3F AF 
29b2c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
29b30     DC 00 90 AD |  if_e	jmp	#LR__3655
29b34     02 2E 46 F5 | 	or	local05, #2
29b38     00 12 06 F6 | 	mov	arg01, #0
29b3c     00 14 06 F6 | 	mov	arg02, #0
29b40     19 17 02 F6 | 	mov	arg03, local07
29b44     17 19 02 F6 | 	mov	arg04, local05
29b48     E0 2F B0 FD | 	call	#__system__pack_0681
29b4c     C0 00 90 FD | 	jmp	#LR__3655
29b50                 | LR__3646
29b50     00 36 0E F2 | 	cmp	local09, #0 wz
29b54     16 FB 01 56 |  if_ne	mov	result1, local04
29b58     B4 00 90 5D |  if_ne	jmp	#LR__3655
29b5c     17 19 02 F6 | 	mov	arg04, local05
29b60     08 18 46 F5 | 	or	arg04, #8
29b64     00 12 06 F6 | 	mov	arg01, #0
29b68     00 14 06 F6 | 	mov	arg02, #0
29b6c     00 16 06 F6 | 	mov	arg03, #0
29b70     B8 2F B0 FD | 	call	#__system__pack_0681
29b74     98 00 90 FD | 	jmp	#LR__3655
29b78                 | LR__3647
29b78     00 30 0E F2 | 	cmp	local06, #0 wz
29b7c     20 00 90 AD |  if_e	jmp	#LR__3650
29b80     01 30 66 F0 | 	shl	local06, #1
29b84     97 0A 48 FB | 	callpa	#(@LR__3649-@LR__3648)>>2,fcache_load_ptr_
29b88                 | LR__3648
29b88     00 40 00 FF 
29b8c     00 30 16 F2 | 	cmp	local06, ##8388608 wc
29b90     01 32 86 C1 |  if_b	sub	local07, #1
29b94     01 30 66 C0 |  if_b	shl	local06, #1
29b98     EC FF 9F CD |  if_b	jmp	#LR__3648
29b9c                 | LR__3649
29b9c     B8 FE 9F FD | 	jmp	#LR__3640
29ba0                 | LR__3650
29ba0     00 38 0E F2 | 	cmp	local10, #0 wz
29ba4     00 36 0E A2 |  if_e	cmp	local09, #0 wz
29ba8     00 F8 3F AF 
29bac     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
29bb0     5C 00 90 AD |  if_e	jmp	#LR__3655
29bb4     17 19 02 F6 | 	mov	arg04, local05
29bb8     08 18 46 F5 | 	or	arg04, #8
29bbc     00 12 06 F6 | 	mov	arg01, #0
29bc0     00 14 06 F6 | 	mov	arg02, #0
29bc4     00 16 06 F6 | 	mov	arg03, #0
29bc8     60 2F B0 FD | 	call	#__system__pack_0681
29bcc     40 00 90 FD | 	jmp	#LR__3655
29bd0                 | LR__3651
29bd0     00 36 0E F2 | 	cmp	local09, #0 wz
29bd4     20 00 90 AD |  if_e	jmp	#LR__3654
29bd8     01 36 66 F0 | 	shl	local09, #1
29bdc     97 0A 48 FB | 	callpa	#(@LR__3653-@LR__3652)>>2,fcache_load_ptr_
29be0                 | LR__3652
29be0     00 40 00 FF 
29be4     00 36 16 F2 | 	cmp	local09, ##8388608 wc
29be8     01 38 86 C1 |  if_b	sub	local10, #1
29bec     01 36 66 C0 |  if_b	shl	local09, #1
29bf0     EC FF 9F CD |  if_b	jmp	#LR__3652
29bf4                 | LR__3653
29bf4     6C FE 9F FD | 	jmp	#LR__3641
29bf8                 | LR__3654
29bf8     02 2E 46 F5 | 	or	local05, #2
29bfc     00 12 06 F6 | 	mov	arg01, #0
29c00     00 14 06 F6 | 	mov	arg02, #0
29c04     00 16 06 F6 | 	mov	arg03, #0
29c08     17 19 02 F6 | 	mov	arg04, local05
29c0c     1C 2F B0 FD | 	call	#__system__pack_0681
29c10                 | LR__3655
29c10     A7 F0 03 F6 | 	mov	ptra, fp
29c14     B2 00 A0 FD | 	call	#popregs_
29c18                 | __system___float_div_ret
29c18     2D 00 64 FD | 	ret
29c1c                 | 
29c1c                 | __system___float_cmp
29c1c     00 C0 3F FF 
29c20     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
29c24     00 C0 3F CF 
29c28     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
29c2c     0B FB 01 36 |  if_ae	mov	result1, arg03
29c30     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
29c34     00 C0 7F FF 
29c38     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
29c3c     00 C0 7F CF 
29c40     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
29c44     0B FB 01 36 |  if_ae	mov	result1, arg03
29c48     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
29c4c     00 12 56 F2 | 	cmps	arg01, #0 wc
29c50     2C 00 90 3D |  if_ae	jmp	#LR__3660
29c54     00 14 56 F2 | 	cmps	arg02, #0 wc
29c58     0A FB 01 C6 |  if_b	mov	result1, arg02
29c5c     09 FB 81 C1 |  if_b	sub	result1, arg01
29c60     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
29c64     00 14 0E F2 | 	cmp	arg02, #0 wz
29c68     00 00 40 AF 
29c6c     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
29c70     00 FA 05 A6 |  if_e	mov	result1, #0
29c74     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
29c78     01 FA 65 F6 | 	neg	result1, #1
29c7c     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
29c80                 | LR__3660
29c80     00 14 56 F2 | 	cmps	arg02, #0 wc
29c84     1C 00 90 3D |  if_ae	jmp	#LR__3661
29c88     00 12 0E F2 | 	cmp	arg01, #0 wz
29c8c     00 00 40 AF 
29c90     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
29c94     00 FA 05 A6 |  if_e	mov	result1, #0
29c98     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
29c9c     01 FA 05 F6 | 	mov	result1, #1
29ca0     08 00 90 FD | 	jmp	#__system___float_cmp_ret
29ca4                 | LR__3661
29ca4     0A 13 82 F1 | 	sub	arg01, arg02
29ca8     09 FB 01 F6 | 	mov	result1, arg01
29cac                 | __system___float_cmp_ret
29cac     2D 00 64 FD | 	ret
29cb0                 | 
29cb0                 | __system___float_tointeger
29cb0     02 4A 05 F6 | 	mov	COUNT_, #2
29cb4     A8 00 A0 FD | 	call	#pushregs_
29cb8     50 00 B0 FD | 	call	#__system___float_Unpack
29cbc     FF FF 7F FF 
29cc0     FF FD 55 F2 | 	cmps	result2, ##-1 wc
29cc4     34 00 90 CD |  if_b	jmp	#LR__3670
29cc8     1F FC 55 F2 | 	cmps	result2, #31 wc
29ccc     2C 00 90 3D |  if_ae	jmp	#LR__3670
29cd0     02 FE 65 F0 | 	shl	result3, #2
29cd4     1E 26 06 F6 | 	mov	local01, #30
29cd8     FE 26 82 F1 | 	sub	local01, result2
29cdc     13 FF 41 F0 | 	shr	result3, local01
29ce0     FF 28 02 F6 | 	mov	local02, result3
29ce4     0A 29 02 F1 | 	add	local02, arg02
29ce8     01 28 46 F0 | 	shr	local02, #1
29cec     00 FA 0D F2 | 	cmp	result1, #0 wz
29cf0     14 29 62 56 |  if_ne	neg	local02, local02
29cf4     14 FB 01 F6 | 	mov	result1, local02
29cf8     04 00 90 FD | 	jmp	#LR__3671
29cfc                 | LR__3670
29cfc     00 FA 05 F6 | 	mov	result1, #0
29d00                 | LR__3671
29d00     A7 F0 03 F6 | 	mov	ptra, fp
29d04     B2 00 A0 FD | 	call	#popregs_
29d08                 | __system___float_tointeger_ret
29d08     2D 00 64 FD | 	ret
29d0c                 | 
29d0c                 | __system___float_Unpack
29d0c     09 01 02 F6 | 	mov	_var01, arg01
29d10     1F 00 46 F0 | 	shr	_var01, #31
29d14     09 03 02 F6 | 	mov	_var02, arg01
29d18     01 02 66 F0 | 	shl	_var02, #1
29d1c     18 02 4E F0 | 	shr	_var02, #24 wz
29d20     17 13 06 F4 | 	bitl	arg01, #279
29d24     06 12 66 50 |  if_ne	shl	arg01, #6
29d28     1D 12 26 54 |  if_ne	bith	arg01, #29
29d2c     1C 00 90 5D |  if_ne	jmp	#LR__3680
29d30     09 05 92 F7 | 	encod	_var03, arg01 wc
29d34     01 04 06 C1 |  if_b	add	_var03, #1
29d38     17 04 86 F1 | 	sub	_var03, #23
29d3c     02 03 02 F6 | 	mov	_var02, _var03
29d40     07 FC 05 F6 | 	mov	result2, #7
29d44     02 FD 81 F1 | 	sub	result2, _var03
29d48     FE 12 62 F0 | 	shl	arg01, result2
29d4c                 | LR__3680
29d4c     7F 02 86 F1 | 	sub	_var02, #127
29d50     09 FF 01 F6 | 	mov	result3, arg01
29d54     00 FB 01 F6 | 	mov	result1, _var01
29d58     01 FD 01 F6 | 	mov	result2, _var02
29d5c                 | __system___float_Unpack_ret
29d5c     2D 00 64 FD | 	ret
29d60                 | 
29d60                 | __system___float_Pack
29d60     00 00 06 F6 | 	mov	_var01, #0
29d64     00 16 0E F2 | 	cmp	arg03, #0 wz
29d68     8C 00 90 AD |  if_e	jmp	#LR__3691
29d6c     0B 03 92 F7 | 	encod	_var02, arg03 wc
29d70     01 02 06 C1 |  if_b	add	_var02, #1
29d74     21 00 06 F6 | 	mov	_var01, #33
29d78     01 01 82 F1 | 	sub	_var01, _var02
29d7c     00 17 62 F0 | 	shl	arg03, _var01
29d80     03 02 06 F6 | 	mov	_var02, #3
29d84     00 03 82 F1 | 	sub	_var02, _var01
29d88     01 15 02 F1 | 	add	arg02, _var02
29d8c     0A 05 02 F6 | 	mov	_var03, arg02
29d90     00 17 06 F1 | 	add	arg03, #256
29d94     0B 03 02 F6 | 	mov	_var02, arg03
29d98     FF 02 2E F5 | 	andn	_var02, #255 wz
29d9c     01 04 06 A1 |  if_e	add	_var03, #1
29da0     7F 04 06 F1 | 	add	_var03, #127
29da4     FF FF 7F FF 
29da8     E9 05 46 F3 | 	fges	_var03, ##-23
29dac     FF 04 66 F3 | 	fles	_var03, #255
29db0     01 04 56 F2 | 	cmps	_var03, #1 wc
29db4     1C 00 90 3D |  if_ae	jmp	#LR__3690
29db8     01 16 46 F0 | 	shr	arg03, #1
29dbc     1F 02 C6 F9 | 	decod	_var02, #31
29dc0     0B 03 02 F1 | 	add	_var02, arg03
29dc4     02 05 62 F6 | 	neg	_var03, _var03
29dc8     02 03 42 F0 | 	shr	_var02, _var03
29dcc     01 17 02 F6 | 	mov	arg03, _var02
29dd0     00 04 06 F6 | 	mov	_var03, #0
29dd4                 | LR__3690
29dd4     09 FB 01 F6 | 	mov	result1, arg01
29dd8     1F FA 65 F0 | 	shl	result1, #31
29ddc     02 03 02 F6 | 	mov	_var02, _var03
29de0     17 02 66 F0 | 	shl	_var02, #23
29de4     01 FB 41 F5 | 	or	result1, _var02
29de8     0B 07 02 F6 | 	mov	_var04, arg03
29dec     09 06 46 F0 | 	shr	_var04, #9
29df0     03 FB 41 F5 | 	or	result1, _var04
29df4     04 00 90 FD | 	jmp	#__system___float_Pack_ret
29df8                 | LR__3691
29df8     00 FB 01 F6 | 	mov	result1, _var01
29dfc                 | __system___float_Pack_ret
29dfc     2D 00 64 FD | 	ret
29e00                 | 
29e00                 | __system___basic_print_float
29e00     05 4A 05 F6 | 	mov	COUNT_, #5
29e04     A8 00 A0 FD | 	call	#pushregs_
29e08     09 27 02 F6 | 	mov	local01, arg01
29e0c     0A 29 02 F6 | 	mov	local02, arg02
29e10     0B 2B 0A F6 | 	mov	local03, arg03 wz
29e14     0C 2D 02 F6 | 	mov	local04, arg04
29e18     14 00 90 5D |  if_ne	jmp	#LR__3700
29e1c     23 2C 0E F2 | 	cmp	local04, #35 wz
29e20     80 02 10 AF 
29e24     00 2E 06 A6 |  if_e	mov	local05, ##537198592
29e28     1D 2E C6 59 |  if_ne	decod	local05, #29
29e2c     17 2B 02 F6 | 	mov	local03, local05
29e30                 | LR__3700
29e30     13 13 02 F6 | 	mov	arg01, local01
29e34     28 28 B0 FD | 	call	#__system___gettxfunc
29e38     FD 2E 0A F6 | 	mov	local05, result1 wz
29e3c     00 FA 05 A6 |  if_e	mov	result1, #0
29e40     17 13 02 56 |  if_ne	mov	arg01, local05
29e44     15 15 02 56 |  if_ne	mov	arg02, local03
29e48     14 17 02 56 |  if_ne	mov	arg03, local02
29e4c     16 19 02 56 |  if_ne	mov	arg04, local04
29e50     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
29e54     A7 F0 03 F6 | 	mov	ptra, fp
29e58     B2 00 A0 FD | 	call	#popregs_
29e5c                 | __system___basic_print_float_ret
29e5c     2D 00 64 FD | 	ret
29e60                 | 
29e60                 | __system____builtin_atoi
29e60     07 4A 05 F6 | 	mov	COUNT_, #7
29e64     A8 00 A0 FD | 	call	#pushregs_
29e68                 | __system____builtin_atoi_enter
29e68     09 27 02 F6 | 	mov	local01, arg01
29e6c     0A 29 02 F6 | 	mov	local02, arg02
29e70     00 2A 06 F6 | 	mov	local03, #0
29e74     00 2C 06 F6 | 	mov	local04, #0
29e78     00 2E 06 F6 | 	mov	local05, #0
29e7c     97 1C 48 FB | 	callpa	#(@LR__3712-@LR__3710)>>2,fcache_load_ptr_
29e80                 | LR__3710
29e80     13 31 C2 FA | 	rdbyte	local06, local01
29e84     20 30 0E F2 | 	cmp	local06, #32 wz
29e88     01 26 06 A1 |  if_e	add	local01, #1
29e8c     F0 FF 9F AD |  if_e	jmp	#LR__3710
29e90     13 33 C2 FA | 	rdbyte	local07, local01
29e94                 | LR__3711
29e94     2D 32 0E F2 | 	cmp	local07, #45 wz
29e98     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
29e9c     18 00 90 5D |  if_ne	jmp	#LR__3713
29ea0     01 26 06 F1 | 	add	local01, #1
29ea4     2D 32 0E F2 | 	cmp	local07, #45 wz
29ea8     01 30 06 A6 |  if_e	mov	local06, #1
29eac     18 2F C2 A2 |  if_e	subr	local05, local06
29eb0     13 33 C2 FA | 	rdbyte	local07, local01
29eb4     DC FF 9F FD | 	jmp	#LR__3711
29eb8                 | LR__3712
29eb8                 | LR__3713
29eb8     00 28 0E F2 | 	cmp	local02, #0 wz
29ebc     1C 00 90 5D |  if_ne	jmp	#LR__3715
29ec0     24 32 0E F2 | 	cmp	local07, #36 wz
29ec4     10 28 06 A6 |  if_e	mov	local02, #16
29ec8     01 26 06 A1 |  if_e	add	local01, #1
29ecc     0C 00 90 AD |  if_e	jmp	#LR__3714
29ed0     25 32 0E F2 | 	cmp	local07, #37 wz
29ed4     02 28 06 A6 |  if_e	mov	local02, #2
29ed8     01 26 06 A1 |  if_e	add	local01, #1
29edc                 | LR__3714
29edc                 | LR__3715
29edc     97 48 48 FB | 	callpa	#(@LR__3723-@LR__3716)>>2,fcache_load_ptr_
29ee0                 | LR__3716
29ee0                 | LR__3717
29ee0     13 33 C2 FA | 	rdbyte	local07, local01
29ee4     5F 32 0E F2 | 	cmp	local07, #95 wz
29ee8     01 26 06 F1 | 	add	local01, #1
29eec     F0 FF 9F AD |  if_e	jmp	#LR__3717
29ef0     30 32 0E F2 | 	cmp	local07, #48 wz
29ef4     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
29ef8     00 2C 06 A6 |  if_e	mov	local04, #0
29efc     60 00 90 AD |  if_e	jmp	#LR__3722
29f00     31 32 56 F2 | 	cmps	local07, #49 wc
29f04     18 00 90 CD |  if_b	jmp	#LR__3718
29f08     3A 32 56 F2 | 	cmps	local07, #58 wc
29f0c     19 2D 02 C6 |  if_b	mov	local04, local07
29f10     30 2C 86 C1 |  if_b	sub	local04, #48
29f14     00 28 0E C2 |  if_b	cmp	local02, #0 wz
29f18     0A 28 06 86 |  if_c_and_z	mov	local02, #10
29f1c     40 00 90 CD |  if_b	jmp	#LR__3721
29f20                 | LR__3718
29f20     0B 28 56 F2 | 	cmps	local02, #11 wc
29f24     61 32 56 32 |  if_ae	cmps	local07, #97 wc
29f28     14 00 90 CD |  if_b	jmp	#LR__3719
29f2c     67 32 56 F2 | 	cmps	local07, #103 wc
29f30     61 32 86 C1 |  if_b	sub	local07, #97
29f34     0A 2C 06 C6 |  if_b	mov	local04, #10
29f38     19 2D 02 C1 |  if_b	add	local04, local07
29f3c     20 00 90 CD |  if_b	jmp	#LR__3720
29f40                 | LR__3719
29f40     0B 28 56 F2 | 	cmps	local02, #11 wc
29f44     41 32 56 32 |  if_ae	cmps	local07, #65 wc
29f48     24 00 90 CD |  if_b	jmp	#LR__3724
29f4c     47 32 56 F2 | 	cmps	local07, #71 wc
29f50     41 32 86 C1 |  if_b	sub	local07, #65
29f54     0A 2C 06 C6 |  if_b	mov	local04, #10
29f58     19 2D 02 C1 |  if_b	add	local04, local07
29f5c     10 00 90 3D |  if_ae	jmp	#LR__3724
29f60                 | LR__3720
29f60                 | LR__3721
29f60                 | LR__3722
29f60     15 29 02 FD | 	qmul	local02, local03
29f64     18 2A 62 FD | 	getqx	local03
29f68     16 2B 02 F1 | 	add	local03, local04
29f6c     70 FF 9F FD | 	jmp	#LR__3716
29f70                 | LR__3723
29f70                 | LR__3724
29f70     00 28 0E F2 | 	cmp	local02, #0 wz
29f74     64 00 90 5D |  if_ne	jmp	#LR__3730
29f78     78 32 0E F2 | 	cmp	local07, #120 wz
29f7c     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
29f80     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
29f84     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
29f88     14 00 90 5D |  if_ne	jmp	#LR__3725
29f8c     13 13 02 F6 | 	mov	arg01, local01
29f90     10 14 06 F6 | 	mov	arg02, #16
29f94     C8 FE BF FD | 	call	#__system____builtin_atoi
29f98     FD 2A 02 F6 | 	mov	local03, result1
29f9c     3C 00 90 FD | 	jmp	#LR__3729
29fa0                 | LR__3725
29fa0     62 32 0E F2 | 	cmp	local07, #98 wz
29fa4     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
29fa8     14 00 90 5D |  if_ne	jmp	#LR__3726
29fac     13 13 02 F6 | 	mov	arg01, local01
29fb0     02 14 06 F6 | 	mov	arg02, #2
29fb4     A8 FE BF FD | 	call	#__system____builtin_atoi
29fb8     FD 2A 02 F6 | 	mov	local03, result1
29fbc     1C 00 90 FD | 	jmp	#LR__3728
29fc0                 | LR__3726
29fc0     6F 32 0E F2 | 	cmp	local07, #111 wz
29fc4     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
29fc8     10 00 90 5D |  if_ne	jmp	#LR__3727
29fcc     13 13 02 F6 | 	mov	arg01, local01
29fd0     08 14 06 F6 | 	mov	arg02, #8
29fd4     88 FE BF FD | 	call	#__system____builtin_atoi
29fd8     FD 2A 02 F6 | 	mov	local03, result1
29fdc                 | LR__3727
29fdc                 | LR__3728
29fdc                 | LR__3729
29fdc                 | LR__3730
29fdc     00 2E 0E F2 | 	cmp	local05, #0 wz
29fe0     15 2B 62 56 |  if_ne	neg	local03, local03
29fe4     15 FB 01 F6 | 	mov	result1, local03
29fe8     A7 F0 03 F6 | 	mov	ptra, fp
29fec     B2 00 A0 FD | 	call	#popregs_
29ff0                 | __system____builtin_atoi_ret
29ff0     2D 00 64 FD | 	ret
29ff4                 | 
29ff4                 | __system____builtin_atof
29ff4     07 4A 05 F6 | 	mov	COUNT_, #7
29ff8     A8 00 A0 FD | 	call	#pushregs_
29ffc     09 27 02 F6 | 	mov	local01, arg01
2a000     00 28 06 F6 | 	mov	local02, #0
2a004     00 2A 06 F6 | 	mov	local03, #0
2a008     00 2C 06 F6 | 	mov	local04, #0
2a00c     00 2E 06 F6 | 	mov	local05, #0
2a010     97 08 48 FB | 	callpa	#(@LR__3741-@LR__3740)>>2,fcache_load_ptr_
2a014                 | LR__3740
2a014     13 17 C2 FA | 	rdbyte	arg03, local01
2a018     20 16 0E F2 | 	cmp	arg03, #32 wz
2a01c     01 26 06 A1 |  if_e	add	local01, #1
2a020     F0 FF 9F AD |  if_e	jmp	#LR__3740
2a024                 | LR__3741
2a024     13 31 C2 FA | 	rdbyte	local06, local01
2a028                 | LR__3742
2a028     2B 30 0E F2 | 	cmp	local06, #43 wz
2a02c     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
2a030     14 00 90 5D |  if_ne	jmp	#LR__3743
2a034     2D 30 0E F2 | 	cmp	local06, #45 wz
2a038     1F 2C E6 A4 |  if_e	bitnot	local04, #31
2a03c     01 26 06 F1 | 	add	local01, #1
2a040     13 31 C2 FA | 	rdbyte	local06, local01
2a044     E0 FF 9F FD | 	jmp	#LR__3742
2a048                 | LR__3743
2a048                 | LR__3744
2a048     97 08 48 FB | 	callpa	#(@LR__3746-@LR__3745)>>2,fcache_load_ptr_
2a04c                 | LR__3745
2a04c     13 31 C2 FA | 	rdbyte	local06, local01
2a050     5F 30 0E F2 | 	cmp	local06, #95 wz
2a054     01 26 06 F1 | 	add	local01, #1
2a058     F0 FF 9F AD |  if_e	jmp	#LR__3745
2a05c                 | LR__3746
2a05c     00 30 0E F2 | 	cmp	local06, #0 wz
2a060     5C 00 90 AD |  if_e	jmp	#LR__3748
2a064     30 30 56 F2 | 	cmps	local06, #48 wc
2a068     44 00 90 CD |  if_b	jmp	#LR__3747
2a06c     3A 30 56 F2 | 	cmps	local06, #58 wc
2a070     3C 00 90 3D |  if_ae	jmp	#LR__3747
2a074     14 13 02 F6 | 	mov	arg01, local02
2a078     00 90 20 FF 
2a07c     00 14 06 F6 | 	mov	arg02, ##1092616192
2a080     64 F7 BF FD | 	call	#__system___float_mul
2a084     FD 28 02 F6 | 	mov	local02, result1
2a088     30 30 86 F1 | 	sub	local06, #48
2a08c     18 13 02 F6 | 	mov	arg01, local06
2a090     50 F3 BF FD | 	call	#__system___float_fromuns
2a094     FD 14 02 F6 | 	mov	arg02, result1
2a098     14 13 02 F6 | 	mov	arg01, local02
2a09c     78 F3 BF FD | 	call	#__system___float_add
2a0a0     FD 28 02 F6 | 	mov	local02, result1
2a0a4     00 2E 0E F2 | 	cmp	local05, #0 wz
2a0a8     01 2A 86 51 |  if_ne	sub	local03, #1
2a0ac     98 FF 9F FD | 	jmp	#LR__3744
2a0b0                 | LR__3747
2a0b0     2E 30 0E F2 | 	cmp	local06, #46 wz
2a0b4     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
2a0b8     01 2E 06 A6 |  if_e	mov	local05, #1
2a0bc     88 FF 9F AD |  if_e	jmp	#LR__3744
2a0c0                 | LR__3748
2a0c0     45 30 0E F2 | 	cmp	local06, #69 wz
2a0c4     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
2a0c8     18 00 90 5D |  if_ne	jmp	#LR__3749
2a0cc     13 13 02 F6 | 	mov	arg01, local01
2a0d0     00 14 06 F6 | 	mov	arg02, #0
2a0d4     88 FD BF FD | 	call	#__system____builtin_atoi
2a0d8     15 FB 01 F1 | 	add	result1, local03
2a0dc     FD 32 02 F6 | 	mov	local07, result1
2a0e0     04 00 90 FD | 	jmp	#LR__3750
2a0e4                 | LR__3749
2a0e4     15 33 02 F6 | 	mov	local07, local03
2a0e8                 | LR__3750
2a0e8     19 17 02 F6 | 	mov	arg03, local07
2a0ec     14 13 02 F6 | 	mov	arg01, local02
2a0f0     00 90 20 FF 
2a0f4     00 14 06 F6 | 	mov	arg02, ##1092616192
2a0f8     F4 06 B0 FD | 	call	#__system___float_pow_n
2a0fc     16 FB 61 F5 | 	xor	result1, local04
2a100     A7 F0 03 F6 | 	mov	ptra, fp
2a104     B2 00 A0 FD | 	call	#popregs_
2a108                 | __system____builtin_atof_ret
2a108     2D 00 64 FD | 	ret
2a10c                 | 
2a10c                 | __system____builtin_ilogb
2a10c     FC FB BF FD | 	call	#__system___float_Unpack
2a110     00 FE 0D F2 | 	cmp	result3, #0 wz
2a114     00 00 40 AF 
2a118     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
2a11c     24 00 90 AD |  if_e	jmp	#LR__3761
2a120     80 FC 0D F2 | 	cmp	result2, #128 wz
2a124     18 00 90 5D |  if_ne	jmp	#LR__3760
2a128     00 00 10 FF 
2a12c     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
2a130     1E FA CD A9 |  if_e	bmask	result1, #30
2a134     0C 00 90 AD |  if_e	jmp	#LR__3761
2a138     1F FA C5 F9 | 	decod	result1, #31
2a13c     04 00 90 FD | 	jmp	#LR__3761
2a140                 | LR__3760
2a140     FE FA 01 F6 | 	mov	result1, result2
2a144                 | LR__3761
2a144                 | __system____builtin_ilogb_ret
2a144     2D 00 64 FD | 	ret
2a148                 | 
2a148                 | __system____builtin_sinf
2a148     03 4A 05 F6 | 	mov	COUNT_, #3
2a14c     A8 00 A0 FD | 	call	#pushregs_
2a150     09 27 02 F6 | 	mov	local01, arg01
2a154     87 64 20 FF 
2a158     DB 15 06 F6 | 	mov	arg02, ##1086918619
2a15c     8C F8 BF FD | 	call	#__system___float_div
2a160     FD 12 02 F6 | 	mov	arg01, result1
2a164     00 14 06 F6 | 	mov	arg02, #0
2a168     44 FB BF FD | 	call	#__system___float_tointeger
2a16c     FD 16 0A F6 | 	mov	arg03, result1 wz
2a170     44 00 90 AD |  if_e	jmp	#LR__3770
2a174     0B 13 52 F6 | 	abs	arg01, arg03 wc
2a178     1F 28 C6 C9 |  if_b	decod	local02, #31
2a17c     00 28 06 36 |  if_ae	mov	local02, #0
2a180     60 F2 BF FD | 	call	#__system___float_fromuns
2a184     14 FB 61 F5 | 	xor	result1, local02
2a188     FD 12 02 F6 | 	mov	arg01, result1
2a18c     1E 14 C6 F9 | 	decod	arg02, #30
2a190     54 F6 BF FD | 	call	#__system___float_mul
2a194     FD 12 02 F6 | 	mov	arg01, result1
2a198     87 24 20 FF 
2a19c     DB 15 06 F6 | 	mov	arg02, ##1078530011
2a1a0     44 F6 BF FD | 	call	#__system___float_mul
2a1a4     FD 14 02 F6 | 	mov	arg02, result1
2a1a8     13 13 02 F6 | 	mov	arg01, local01
2a1ac     1F 14 E6 F4 | 	bitnot	arg02, #31
2a1b0     64 F2 BF FD | 	call	#__system___float_add
2a1b4     FD 26 02 F6 | 	mov	local01, result1
2a1b8                 | LR__3770
2a1b8     13 13 02 F6 | 	mov	arg01, local01
2a1bc     66 E6 1E FF 
2a1c0     CD 14 06 F6 | 	mov	arg02, ##1036831949
2a1c4     01 16 06 F6 | 	mov	arg03, #1
2a1c8     50 FA BF FD | 	call	#__system___float_cmp
2a1cc     00 FA 55 F2 | 	cmps	result1, #0 wc
2a1d0     5C 00 90 3D |  if_ae	jmp	#LR__3771
2a1d4     13 13 02 F6 | 	mov	arg01, local01
2a1d8     66 E6 5E FF 
2a1dc     CD 14 06 F6 | 	mov	arg02, ##-1110651699
2a1e0     01 16 66 F6 | 	neg	arg03, #1
2a1e4     34 FA BF FD | 	call	#__system___float_cmp
2a1e8     01 FA 55 F2 | 	cmps	result1, #1 wc
2a1ec     40 00 90 CD |  if_b	jmp	#LR__3771
2a1f0     13 13 02 F6 | 	mov	arg01, local01
2a1f4     13 15 02 F6 | 	mov	arg02, local01
2a1f8     EC F5 BF FD | 	call	#__system___float_mul
2a1fc     FD 12 02 F6 | 	mov	arg01, result1
2a200     13 15 02 F6 | 	mov	arg02, local01
2a204     E0 F5 BF FD | 	call	#__system___float_mul
2a208     FD 12 02 F6 | 	mov	arg01, result1
2a20c     00 60 20 FF 
2a210     00 14 06 F6 | 	mov	arg02, ##1086324736
2a214     D4 F7 BF FD | 	call	#__system___float_div
2a218     FD 14 02 F6 | 	mov	arg02, result1
2a21c     13 13 02 F6 | 	mov	arg01, local01
2a220     1F 14 E6 F4 | 	bitnot	arg02, #31
2a224     F0 F1 BF FD | 	call	#__system___float_add
2a228     FD 2A 02 F6 | 	mov	local03, result1
2a22c     54 00 90 FD | 	jmp	#LR__3772
2a230                 | LR__3771
2a230     13 13 02 F6 | 	mov	arg01, local01
2a234     7C 91 26 FF 
2a238     83 15 06 F6 | 	mov	arg02, ##1294137731
2a23c     A8 F5 BF FD | 	call	#__system___float_mul
2a240     FD 12 02 F6 | 	mov	arg01, result1
2a244     00 14 06 F6 | 	mov	arg02, #0
2a248     64 FA BF FD | 	call	#__system___float_tointeger
2a24c     02 FA 65 F0 | 	shl	result1, #2
2a250     00 00 A0 FF 
2a254     FD 00 48 FD | 	qrotate	##1073741824, result1
2a258     19 12 62 FD | 	getqy	arg01
2a25c     09 13 52 F6 | 	abs	arg01, arg01 wc
2a260     1F 28 C6 C9 |  if_b	decod	local02, #31
2a264     00 28 06 36 |  if_ae	mov	local02, #0
2a268     78 F1 BF FD | 	call	#__system___float_fromuns
2a26c     14 FB 61 F5 | 	xor	result1, local02
2a270     FD 12 02 F6 | 	mov	arg01, result1
2a274     00 40 27 FF 
2a278     00 14 06 F6 | 	mov	arg02, ##1317011456
2a27c     6C F7 BF FD | 	call	#__system___float_div
2a280     FD 2A 02 F6 | 	mov	local03, result1
2a284                 | LR__3772
2a284     15 FB 01 F6 | 	mov	result1, local03
2a288     A7 F0 03 F6 | 	mov	ptra, fp
2a28c     B2 00 A0 FD | 	call	#popregs_
2a290                 | __system____builtin_sinf_ret
2a290     2D 00 64 FD | 	ret
2a294                 | 
2a294                 | __system____builtin_tanf
2a294     02 4A 05 F6 | 	mov	COUNT_, #2
2a298     A8 00 A0 FD | 	call	#pushregs_
2a29c     09 27 02 F6 | 	mov	local01, arg01
2a2a0     A4 FE BF FD | 	call	#__system____builtin_sinf
2a2a4     FD 28 02 F6 | 	mov	local02, result1
2a2a8     13 15 02 F6 | 	mov	arg02, local01
2a2ac     87 E4 1F FF 
2a2b0     DB 13 06 F6 | 	mov	arg01, ##1070141403
2a2b4     1F 14 E6 F4 | 	bitnot	arg02, #31
2a2b8     5C F1 BF FD | 	call	#__system___float_add
2a2bc     FD 12 02 F6 | 	mov	arg01, result1
2a2c0     84 FE BF FD | 	call	#__system____builtin_sinf
2a2c4     FD 14 02 F6 | 	mov	arg02, result1
2a2c8     14 13 02 F6 | 	mov	arg01, local02
2a2cc     1C F7 BF FD | 	call	#__system___float_div
2a2d0     A7 F0 03 F6 | 	mov	ptra, fp
2a2d4     B2 00 A0 FD | 	call	#popregs_
2a2d8                 | __system____builtin_tanf_ret
2a2d8     2D 00 64 FD | 	ret
2a2dc                 | 
2a2dc                 | __system____builtin_asinf
2a2dc     01 4A 05 F6 | 	mov	COUNT_, #1
2a2e0     A8 00 A0 FD | 	call	#pushregs_
2a2e4     09 27 02 F6 | 	mov	local01, arg01
2a2e8     13 15 02 F6 | 	mov	arg02, local01
2a2ec     13 13 02 F6 | 	mov	arg01, local01
2a2f0     F4 F4 BF FD | 	call	#__system___float_mul
2a2f4     FD 14 02 F6 | 	mov	arg02, result1
2a2f8     00 C0 1F FF 
2a2fc     00 12 06 F6 | 	mov	arg01, ##1065353216
2a300     1F 14 E6 F4 | 	bitnot	arg02, #31
2a304     10 F1 BF FD | 	call	#__system___float_add
2a308     FD 12 02 F6 | 	mov	arg01, result1
2a30c     00 F4 BF FD | 	call	#__system___float_sqrt
2a310     FD 14 02 F6 | 	mov	arg02, result1
2a314     13 13 02 F6 | 	mov	arg01, local01
2a318     58 00 B0 FD | 	call	#__system____builtin_atan2f
2a31c     A7 F0 03 F6 | 	mov	ptra, fp
2a320     B2 00 A0 FD | 	call	#popregs_
2a324                 | __system____builtin_asinf_ret
2a324     2D 00 64 FD | 	ret
2a328                 | 
2a328                 | __system____builtin_acosf
2a328     01 4A 05 F6 | 	mov	COUNT_, #1
2a32c     A8 00 A0 FD | 	call	#pushregs_
2a330     09 27 02 F6 | 	mov	local01, arg01
2a334     13 15 02 F6 | 	mov	arg02, local01
2a338     13 13 02 F6 | 	mov	arg01, local01
2a33c     A8 F4 BF FD | 	call	#__system___float_mul
2a340     FD 14 02 F6 | 	mov	arg02, result1
2a344     00 C0 1F FF 
2a348     00 12 06 F6 | 	mov	arg01, ##1065353216
2a34c     1F 14 E6 F4 | 	bitnot	arg02, #31
2a350     C4 F0 BF FD | 	call	#__system___float_add
2a354     FD 12 02 F6 | 	mov	arg01, result1
2a358     B4 F3 BF FD | 	call	#__system___float_sqrt
2a35c     FD 12 02 F6 | 	mov	arg01, result1
2a360     13 15 02 F6 | 	mov	arg02, local01
2a364     0C 00 B0 FD | 	call	#__system____builtin_atan2f
2a368     A7 F0 03 F6 | 	mov	ptra, fp
2a36c     B2 00 A0 FD | 	call	#popregs_
2a370                 | __system____builtin_acosf_ret
2a370     2D 00 64 FD | 	ret
2a374                 | 
2a374                 | __system____builtin_atan2f
2a374     04 4A 05 F6 | 	mov	COUNT_, #4
2a378     A8 00 A0 FD | 	call	#pushregs_
2a37c     09 27 02 F6 | 	mov	local01, arg01
2a380     0A 29 02 F6 | 	mov	local02, arg02
2a384     13 13 02 F6 | 	mov	arg01, local01
2a388     00 14 06 F6 | 	mov	arg02, #0
2a38c     01 16 06 F6 | 	mov	arg03, #1
2a390     88 F8 BF FD | 	call	#__system___float_cmp
2a394     00 FA 0D F2 | 	cmp	result1, #0 wz
2a398     28 00 90 5D |  if_ne	jmp	#LR__3780
2a39c     14 13 02 F6 | 	mov	arg01, local02
2a3a0     00 14 06 F6 | 	mov	arg02, #0
2a3a4     01 16 06 F6 | 	mov	arg03, #1
2a3a8     70 F8 BF FD | 	call	#__system___float_cmp
2a3ac     00 FA 55 F2 | 	cmps	result1, #0 wc
2a3b0     87 24 60 CF 
2a3b4     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
2a3b8     DC 00 90 CD |  if_b	jmp	#LR__3781
2a3bc     00 FA 05 F6 | 	mov	result1, #0
2a3c0     D4 00 90 FD | 	jmp	#LR__3781
2a3c4                 | LR__3780
2a3c4     14 13 02 F6 | 	mov	arg01, local02
2a3c8     14 15 02 F6 | 	mov	arg02, local02
2a3cc     18 F4 BF FD | 	call	#__system___float_mul
2a3d0     FD 2A 02 F6 | 	mov	local03, result1
2a3d4     13 13 02 F6 | 	mov	arg01, local01
2a3d8     13 15 02 F6 | 	mov	arg02, local01
2a3dc     08 F4 BF FD | 	call	#__system___float_mul
2a3e0     FD 14 02 F6 | 	mov	arg02, result1
2a3e4     15 13 02 F6 | 	mov	arg01, local03
2a3e8     2C F0 BF FD | 	call	#__system___float_add
2a3ec     FD 12 02 F6 | 	mov	arg01, result1
2a3f0     1C F3 BF FD | 	call	#__system___float_sqrt
2a3f4     FD 2A 02 F6 | 	mov	local03, result1
2a3f8     14 13 02 F6 | 	mov	arg01, local02
2a3fc     15 15 02 F6 | 	mov	arg02, local03
2a400     E8 F5 BF FD | 	call	#__system___float_div
2a404     FD 28 02 F6 | 	mov	local02, result1
2a408     13 13 02 F6 | 	mov	arg01, local01
2a40c     15 15 02 F6 | 	mov	arg02, local03
2a410     D8 F5 BF FD | 	call	#__system___float_div
2a414     FD 26 02 F6 | 	mov	local01, result1
2a418     00 40 27 FF 
2a41c     00 12 06 F6 | 	mov	arg01, ##1317011456
2a420     14 15 02 F6 | 	mov	arg02, local02
2a424     C0 F3 BF FD | 	call	#__system___float_mul
2a428     FD 12 02 F6 | 	mov	arg01, result1
2a42c     00 14 06 F6 | 	mov	arg02, #0
2a430     7C F8 BF FD | 	call	#__system___float_tointeger
2a434     FD 2A 02 F6 | 	mov	local03, result1
2a438     00 40 27 FF 
2a43c     00 12 06 F6 | 	mov	arg01, ##1317011456
2a440     13 15 02 F6 | 	mov	arg02, local01
2a444     A0 F3 BF FD | 	call	#__system___float_mul
2a448     FD 12 02 F6 | 	mov	arg01, result1
2a44c     00 14 06 F6 | 	mov	arg02, #0
2a450     5C F8 BF FD | 	call	#__system___float_tointeger
2a454     FD 2A 52 FD | 	qvector	local03, result1
2a458     87 24 20 FF 
2a45c     DB 2B 06 F6 | 	mov	local03, ##1078530011
2a460     19 12 62 FD | 	getqy	arg01
2a464     01 12 C6 F0 | 	sar	arg01, #1
2a468     09 13 52 F6 | 	abs	arg01, arg01 wc
2a46c     1F 2C C6 C9 |  if_b	decod	local04, #31
2a470     00 2C 06 36 |  if_ae	mov	local04, #0
2a474     6C EF BF FD | 	call	#__system___float_fromuns
2a478     16 FB 61 F5 | 	xor	result1, local04
2a47c     FD 12 02 F6 | 	mov	arg01, result1
2a480     00 40 27 FF 
2a484     00 14 06 F6 | 	mov	arg02, ##1317011456
2a488     60 F5 BF FD | 	call	#__system___float_div
2a48c     FD 14 02 F6 | 	mov	arg02, result1
2a490     15 13 02 F6 | 	mov	arg01, local03
2a494     50 F3 BF FD | 	call	#__system___float_mul
2a498                 | LR__3781
2a498     A7 F0 03 F6 | 	mov	ptra, fp
2a49c     B2 00 A0 FD | 	call	#popregs_
2a4a0                 | __system____builtin_atan2f_ret
2a4a0     2D 00 64 FD | 	ret
2a4a4                 | 
2a4a4                 | __system____builtin_exp2f
2a4a4     04 4A 05 F6 | 	mov	COUNT_, #4
2a4a8     A8 00 A0 FD | 	call	#pushregs_
2a4ac     09 27 02 F6 | 	mov	local01, arg01
2a4b0     00 7F 21 FF 
2a4b4     00 14 06 F6 | 	mov	arg02, ##1123942400
2a4b8     01 16 66 F6 | 	neg	arg03, #1
2a4bc     5C F7 BF FD | 	call	#__system___float_cmp
2a4c0     00 FA 55 F2 | 	cmps	result1, #0 wc
2a4c4     00 C0 3F 3F 
2a4c8     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
2a4cc     DC 00 90 3D |  if_ae	jmp	#LR__3791
2a4d0     13 13 02 F6 | 	mov	arg01, local01
2a4d4     00 7F 61 FF 
2a4d8     00 14 06 F6 | 	mov	arg02, ##-1023541248
2a4dc     01 16 06 F6 | 	mov	arg03, #1
2a4e0     38 F7 BF FD | 	call	#__system___float_cmp
2a4e4     00 FA 55 F2 | 	cmps	result1, #0 wc
2a4e8     00 FA 05 C6 |  if_b	mov	result1, #0
2a4ec     BC 00 90 CD |  if_b	jmp	#LR__3791
2a4f0     13 13 02 F6 | 	mov	arg01, local01
2a4f4     00 14 06 F6 | 	mov	arg02, #0
2a4f8     B4 F7 BF FD | 	call	#__system___float_tointeger
2a4fc     FD 28 02 F6 | 	mov	local02, result1
2a500     14 13 52 F6 | 	abs	arg01, local02 wc
2a504     1F 2A C6 C9 |  if_b	decod	local03, #31
2a508     00 2A 06 36 |  if_ae	mov	local03, #0
2a50c     D4 EE BF FD | 	call	#__system___float_fromuns
2a510     15 FB 61 F5 | 	xor	result1, local03
2a514     FD 14 02 F6 | 	mov	arg02, result1
2a518     13 13 02 F6 | 	mov	arg01, local01
2a51c     1F 14 E6 F4 | 	bitnot	arg02, #31
2a520     F4 EE BF FD | 	call	#__system___float_add
2a524     FD 2C 02 F6 | 	mov	local04, result1
2a528     16 13 02 F6 | 	mov	arg01, local04
2a52c     00 14 06 F6 | 	mov	arg02, #0
2a530     01 16 06 F6 | 	mov	arg03, #1
2a534     E4 F6 BF FD | 	call	#__system___float_cmp
2a538     00 FA 55 F2 | 	cmps	result1, #0 wc
2a53c     18 00 90 3D |  if_ae	jmp	#LR__3790
2a540     16 13 02 F6 | 	mov	arg01, local04
2a544     00 C0 1F FF 
2a548     00 14 06 F6 | 	mov	arg02, ##1065353216
2a54c     C8 EE BF FD | 	call	#__system___float_add
2a550     FD 2C 02 F6 | 	mov	local04, result1
2a554     01 28 86 F1 | 	sub	local02, #1
2a558                 | LR__3790
2a558     7F 28 06 F1 | 	add	local02, #127
2a55c     17 28 66 F0 | 	shl	local02, #23
2a560     16 13 02 F6 | 	mov	arg01, local04
2a564     00 80 26 FF 
2a568     00 14 06 F6 | 	mov	arg02, ##1291845632
2a56c     78 F2 BF FD | 	call	#__system___float_mul
2a570     FD 12 02 F6 | 	mov	arg01, result1
2a574     00 14 06 F6 | 	mov	arg02, #0
2a578     34 F7 BF FD | 	call	#__system___float_tointeger
2a57c     FD 2C 0A F6 | 	mov	local04, result1 wz
2a580     14 FB 01 A6 |  if_e	mov	result1, local02
2a584     24 00 90 AD |  if_e	jmp	#LR__3791
2a588     3E 2C 26 F4 | 	bith	local04, #62
2a58c     0F 2C 62 FD | 	qexp	local04
2a590     14 13 02 F6 | 	mov	arg01, local02
2a594     18 14 62 FD | 	getqx	arg02
2a598     01 14 06 F1 | 	add	arg02, #1
2a59c     01 14 46 F0 | 	shr	arg02, #1
2a5a0     00 80 1F FF 
2a5a4     00 14 06 F1 | 	add	arg02, ##1056964608
2a5a8     3C F2 BF FD | 	call	#__system___float_mul
2a5ac                 | LR__3791
2a5ac     A7 F0 03 F6 | 	mov	ptra, fp
2a5b0     B2 00 A0 FD | 	call	#popregs_
2a5b4                 | __system____builtin_exp2f_ret
2a5b4     2D 00 64 FD | 	ret
2a5b8                 | 
2a5b8                 | __system____builtin_log2f
2a5b8     06 4A 05 F6 | 	mov	COUNT_, #6
2a5bc     A8 00 A0 FD | 	call	#pushregs_
2a5c0     09 27 02 F6 | 	mov	local01, arg01
2a5c4     09 29 0A F6 | 	mov	local02, arg01 wz
2a5c8     00 00 40 5F 
2a5cc     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
2a5d0     00 40 00 AF 
2a5d4     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2a5d8     08 01 90 AD |  if_e	jmp	#LR__3804
2a5dc     00 28 56 F2 | 	cmps	local02, #0 wc
2a5e0     00 E0 3F CF 
2a5e4     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2a5e8     F8 00 90 CD |  if_b	jmp	#LR__3804
2a5ec     13 13 02 F6 | 	mov	arg01, local01
2a5f0     00 90 20 FF 
2a5f4     00 14 06 F6 | 	mov	arg02, ##1092616192
2a5f8     01 16 06 F6 | 	mov	arg03, #1
2a5fc     1C F6 BF FD | 	call	#__system___float_cmp
2a600     00 FA 0D F2 | 	cmp	result1, #0 wz
2a604     4D 2A 20 AF 
2a608     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
2a60c     D4 00 90 AD |  if_e	jmp	#LR__3804
2a610     13 13 02 F6 | 	mov	arg01, local01
2a614     FC 16 20 FF 
2a618     54 14 06 F6 | 	mov	arg02, ##1076754516
2a61c     01 16 06 F6 | 	mov	arg03, #1
2a620     F8 F5 BF FD | 	call	#__system___float_cmp
2a624     00 FA 0D F2 | 	cmp	result1, #0 wz
2a628     55 DC 1F AF 
2a62c     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
2a630     B0 00 90 AD |  if_e	jmp	#LR__3804
2a634     14 2B 02 F6 | 	mov	local03, local02
2a638     17 2A 46 F0 | 	shr	local03, #23
2a63c     15 2B E2 F8 | 	getbyte	local03, local03, #0
2a640     17 29 06 F4 | 	bitl	local02, #279
2a644     14 2D 02 F6 | 	mov	local04, local02
2a648     FF 2A 0E F2 | 	cmp	local03, #255 wz
2a64c     1C 00 90 5D |  if_ne	jmp	#LR__3800
2a650     00 2C 0E F2 | 	cmp	local04, #0 wz
2a654     00 C0 3F 5F 
2a658     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
2a65c     00 E0 3F AF 
2a660     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
2a664     17 FB 01 F6 | 	mov	result1, local05
2a668     78 00 90 FD | 	jmp	#LR__3804
2a66c                 | LR__3800
2a66c     00 2A 0E F2 | 	cmp	local03, #0 wz
2a670     17 2C 26 54 |  if_ne	bith	local04, #23
2a674     7F 2A 86 51 |  if_ne	sub	local03, #127
2a678     28 00 90 5D |  if_ne	jmp	#LR__3803
2a67c     00 2C 0E F2 | 	cmp	local04, #0 wz
2a680     00 40 00 AF 
2a684     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2a688     58 00 90 AD |  if_e	jmp	#LR__3804
2a68c     7E 2A 66 F6 | 	neg	local03, #126
2a690     97 08 48 FB | 	callpa	#(@LR__3802-@LR__3801)>>2,fcache_load_ptr_
2a694                 | LR__3801
2a694     17 2C 2E F4 | 	testbn	local04, #23 wz
2a698     01 2C 66 A0 |  if_e	shl	local04, #1
2a69c     01 2A 06 A1 |  if_e	add	local03, #1
2a6a0     F0 FF 9F AD |  if_e	jmp	#LR__3801
2a6a4                 | LR__3802
2a6a4                 | LR__3803
2a6a4     0E 2C 62 FD | 	qlog	local04
2a6a8     01 2A 86 F1 | 	sub	local03, #1
2a6ac     15 13 52 F6 | 	abs	arg01, local03 wc
2a6b0     1F 30 C6 C9 |  if_b	decod	local06, #31
2a6b4     00 30 06 36 |  if_ae	mov	local06, #0
2a6b8     18 2E 62 FD | 	getqx	local05
2a6bc     9B 2E 06 F4 | 	bitl	local05, #155
2a6c0     08 2E 06 F1 | 	add	local05, #8
2a6c4     04 2E 46 F0 | 	shr	local05, #4
2a6c8     00 C0 1F FF 
2a6cc     00 2E 06 F1 | 	add	local05, ##1065353216
2a6d0     10 ED BF FD | 	call	#__system___float_fromuns
2a6d4     18 FB 61 F5 | 	xor	result1, local06
2a6d8     FD 14 02 F6 | 	mov	arg02, result1
2a6dc     17 13 02 F6 | 	mov	arg01, local05
2a6e0     34 ED BF FD | 	call	#__system___float_add
2a6e4                 | LR__3804
2a6e4     A7 F0 03 F6 | 	mov	ptra, fp
2a6e8     B2 00 A0 FD | 	call	#popregs_
2a6ec                 | __system____builtin_log2f_ret
2a6ec     2D 00 64 FD | 	ret
2a6f0                 | 
2a6f0                 | __system____builtin_powf
2a6f0     04 4A 05 F6 | 	mov	COUNT_, #4
2a6f4     A8 00 A0 FD | 	call	#pushregs_
2a6f8     09 27 02 F6 | 	mov	local01, arg01
2a6fc     0A 29 02 F6 | 	mov	local02, arg02
2a700     14 13 02 F6 | 	mov	arg01, local02
2a704     00 14 06 F6 | 	mov	arg02, #0
2a708     A4 F5 BF FD | 	call	#__system___float_tointeger
2a70c     FD 2A 02 F6 | 	mov	local03, result1
2a710     15 13 52 F6 | 	abs	arg01, local03 wc
2a714     1F 2C C6 C9 |  if_b	decod	local04, #31
2a718     00 2C 06 36 |  if_ae	mov	local04, #0
2a71c     C4 EC BF FD | 	call	#__system___float_fromuns
2a720     16 FB 61 F5 | 	xor	result1, local04
2a724     FD 12 02 F6 | 	mov	arg01, result1
2a728     14 15 02 F6 | 	mov	arg02, local02
2a72c     01 16 06 F6 | 	mov	arg03, #1
2a730     E8 F4 BF FD | 	call	#__system___float_cmp
2a734     00 FA 0D F2 | 	cmp	result1, #0 wz
2a738     18 00 90 5D |  if_ne	jmp	#LR__3810
2a73c     00 C0 1F FF 
2a740     00 12 06 F6 | 	mov	arg01, ##1065353216
2a744     13 15 02 F6 | 	mov	arg02, local01
2a748     15 17 02 F6 | 	mov	arg03, local03
2a74c     A0 00 B0 FD | 	call	#__system___float_pow_n
2a750     58 00 90 FD | 	jmp	#LR__3811
2a754                 | LR__3810
2a754     13 13 02 F6 | 	mov	arg01, local01
2a758     00 14 06 F6 | 	mov	arg02, #0
2a75c     01 16 06 F6 | 	mov	arg03, #1
2a760     B8 F4 BF FD | 	call	#__system___float_cmp
2a764     00 FA 55 F2 | 	cmps	result1, #0 wc
2a768     00 E0 3F CF 
2a76c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2a770     38 00 90 CD |  if_b	jmp	#LR__3811
2a774     13 13 02 F6 | 	mov	arg01, local01
2a778     00 14 06 F6 | 	mov	arg02, #0
2a77c     01 16 06 F6 | 	mov	arg03, #1
2a780     98 F4 BF FD | 	call	#__system___float_cmp
2a784     00 FA 0D F2 | 	cmp	result1, #0 wz
2a788     00 FA 05 A6 |  if_e	mov	result1, #0
2a78c     1C 00 90 AD |  if_e	jmp	#LR__3811
2a790     13 13 02 F6 | 	mov	arg01, local01
2a794     20 FE BF FD | 	call	#__system____builtin_log2f
2a798     FD 12 02 F6 | 	mov	arg01, result1
2a79c     14 15 02 F6 | 	mov	arg02, local02
2a7a0     44 F0 BF FD | 	call	#__system___float_mul
2a7a4     FD 12 02 F6 | 	mov	arg01, result1
2a7a8     F8 FC BF FD | 	call	#__system____builtin_exp2f
2a7ac                 | LR__3811
2a7ac     A7 F0 03 F6 | 	mov	ptra, fp
2a7b0     B2 00 A0 FD | 	call	#popregs_
2a7b4                 | __system____builtin_powf_ret
2a7b4     2D 00 64 FD | 	ret
2a7b8                 | 
2a7b8                 | __system____builtin_logbase
2a7b8     02 4A 05 F6 | 	mov	COUNT_, #2
2a7bc     A8 00 A0 FD | 	call	#pushregs_
2a7c0     09 27 02 F6 | 	mov	local01, arg01
2a7c4     0A 13 02 F6 | 	mov	arg01, arg02
2a7c8     EC FD BF FD | 	call	#__system____builtin_log2f
2a7cc     FD 28 02 F6 | 	mov	local02, result1
2a7d0     13 13 02 F6 | 	mov	arg01, local01
2a7d4     E0 FD BF FD | 	call	#__system____builtin_log2f
2a7d8     FD 14 02 F6 | 	mov	arg02, result1
2a7dc     14 13 02 F6 | 	mov	arg01, local02
2a7e0     08 F2 BF FD | 	call	#__system___float_div
2a7e4     A7 F0 03 F6 | 	mov	ptra, fp
2a7e8     B2 00 A0 FD | 	call	#popregs_
2a7ec                 | __system____builtin_logbase_ret
2a7ec     2D 00 64 FD | 	ret
2a7f0                 | 
2a7f0                 | __system___float_pow_n
2a7f0     05 4A 05 F6 | 	mov	COUNT_, #5
2a7f4     A8 00 A0 FD | 	call	#pushregs_
2a7f8     09 27 02 F6 | 	mov	local01, arg01
2a7fc     0A 29 02 F6 | 	mov	local02, arg02
2a800     0B 2B 02 F6 | 	mov	local03, arg03
2a804     00 2A 56 F2 | 	cmps	local03, #0 wc
2a808     18 00 90 3D |  if_ae	jmp	#LR__3820
2a80c     01 2C 06 F6 | 	mov	local04, #1
2a810     15 2B 62 F6 | 	neg	local03, local03
2a814     00 2A 56 F2 | 	cmps	local03, #0 wc
2a818     00 FA 05 C6 |  if_b	mov	result1, #0
2a81c     94 00 90 CD |  if_b	jmp	#LR__3828
2a820     04 00 90 FD | 	jmp	#LR__3821
2a824                 | LR__3820
2a824     00 2C 06 F6 | 	mov	local04, #0
2a828                 | LR__3821
2a828     00 C0 1F FF 
2a82c     00 2E 06 F6 | 	mov	local05, ##1065353216
2a830                 | LR__3822
2a830     01 2A 56 F2 | 	cmps	local03, #1 wc
2a834     30 00 90 CD |  if_b	jmp	#LR__3824
2a838     01 2A CE F7 | 	test	local03, #1 wz
2a83c     10 00 90 AD |  if_e	jmp	#LR__3823
2a840     17 13 02 F6 | 	mov	arg01, local05
2a844     14 15 02 F6 | 	mov	arg02, local02
2a848     9C EF BF FD | 	call	#__system___float_mul
2a84c     FD 2E 02 F6 | 	mov	local05, result1
2a850                 | LR__3823
2a850     01 2A C6 F0 | 	sar	local03, #1
2a854     14 13 02 F6 | 	mov	arg01, local02
2a858     14 15 02 F6 | 	mov	arg02, local02
2a85c     88 EF BF FD | 	call	#__system___float_mul
2a860     FD 28 02 F6 | 	mov	local02, result1
2a864     C8 FF 9F FD | 	jmp	#LR__3822
2a868                 | LR__3824
2a868     00 2C 0E F2 | 	cmp	local04, #0 wz
2a86c     14 00 90 AD |  if_e	jmp	#LR__3825
2a870     13 13 02 F6 | 	mov	arg01, local01
2a874     17 15 02 F6 | 	mov	arg02, local05
2a878     70 F1 BF FD | 	call	#__system___float_div
2a87c     FD 2E 02 F6 | 	mov	local05, result1
2a880     2C 00 90 FD | 	jmp	#LR__3827
2a884                 | LR__3825
2a884     13 13 02 F6 | 	mov	arg01, local01
2a888     00 C0 1F FF 
2a88c     00 14 06 F6 | 	mov	arg02, ##1065353216
2a890     01 16 06 F6 | 	mov	arg03, #1
2a894     84 F3 BF FD | 	call	#__system___float_cmp
2a898     00 FA 0D F2 | 	cmp	result1, #0 wz
2a89c     10 00 90 AD |  if_e	jmp	#LR__3826
2a8a0     13 13 02 F6 | 	mov	arg01, local01
2a8a4     17 15 02 F6 | 	mov	arg02, local05
2a8a8     3C EF BF FD | 	call	#__system___float_mul
2a8ac     FD 2E 02 F6 | 	mov	local05, result1
2a8b0                 | LR__3826
2a8b0                 | LR__3827
2a8b0     17 FB 01 F6 | 	mov	result1, local05
2a8b4                 | LR__3828
2a8b4     A7 F0 03 F6 | 	mov	ptra, fp
2a8b8     B2 00 A0 FD | 	call	#popregs_
2a8bc                 | __system___float_pow_n_ret
2a8bc     2D 00 64 FD | 	ret
2a8c0                 | 
2a8c0                 | __system___gc_ptrs
2a8c0     EC 00 02 F6 | 	mov	_var01, __heap_ptr
2a8c4     00 03 02 F6 | 	mov	_var02, _var01
2a8c8     BB 00 00 FF 
2a8cc     F8 02 06 F1 | 	add	_var02, ##95992
2a8d0     00 FD 09 FB | 	rdlong	result2, _var01 wz
2a8d4     74 00 90 5D |  if_ne	jmp	#LR__3830
2a8d8     01 FD 01 F6 | 	mov	result2, _var02
2a8dc     00 FD 81 F1 | 	sub	result2, _var01
2a8e0     00 03 58 FC | 	wrword	#1, _var01
2a8e4     00 FB 01 F6 | 	mov	result1, _var01
2a8e8     02 FA 05 F1 | 	add	result1, #2
2a8ec     36 00 80 FF 
2a8f0     FD 20 59 FC | 	wrword	##27792, result1
2a8f4     00 FB 01 F6 | 	mov	result1, _var01
2a8f8     04 FA 05 F1 | 	add	result1, #4
2a8fc     FD 00 58 FC | 	wrword	#0, result1
2a900     00 FB 01 F6 | 	mov	result1, _var01
2a904     06 FA 05 F1 | 	add	result1, #6
2a908     FD 02 58 FC | 	wrword	#1, result1
2a90c     10 00 06 F1 | 	add	_var01, #16
2a910     FE FC 51 F6 | 	abs	result2, result2 wc
2a914     04 FC 45 F0 | 	shr	result2, #4
2a918     FE FC 81 F6 | 	negc	result2, result2
2a91c     00 FD 51 FC | 	wrword	result2, _var01
2a920     00 FD 01 F6 | 	mov	result2, _var01
2a924     02 FC 05 F1 | 	add	result2, #2
2a928     36 00 80 FF 
2a92c     FE 1E 59 FC | 	wrword	##27791, result2
2a930     00 FD 01 F6 | 	mov	result2, _var01
2a934     04 FC 05 F1 | 	add	result2, #4
2a938     FE 00 58 FC | 	wrword	#0, result2
2a93c     00 FD 01 F6 | 	mov	result2, _var01
2a940     06 FC 05 F1 | 	add	result2, #6
2a944     FE 00 58 FC | 	wrword	#0, result2
2a948     10 00 86 F1 | 	sub	_var01, #16
2a94c                 | LR__3830
2a94c     00 FB 01 F6 | 	mov	result1, _var01
2a950     01 FD 01 F6 | 	mov	result2, _var02
2a954                 | __system___gc_ptrs_ret
2a954     2D 00 64 FD | 	ret
2a958                 | 
2a958                 | __system___gc_tryalloc
2a958     0B 4A 05 F6 | 	mov	COUNT_, #11
2a95c     A8 00 A0 FD | 	call	#pushregs_
2a960     09 27 02 F6 | 	mov	local01, arg01
2a964     0A 29 02 F6 | 	mov	local02, arg02
2a968     54 FF BF FD | 	call	#__system___gc_ptrs
2a96c     FD 2A 02 F6 | 	mov	local03, result1
2a970     FE 2C 02 F6 | 	mov	local04, result2
2a974     15 2F 02 F6 | 	mov	local05, local03
2a978     00 30 06 F6 | 	mov	local06, #0
2a97c     97 1E 48 FB | 	callpa	#(@LR__3841-@LR__3840)>>2,fcache_load_ptr_
2a980                 | LR__3840
2a980     17 33 02 F6 | 	mov	local07, local05
2a984     06 2E 06 F1 | 	add	local05, #6
2a988     17 15 EA FA | 	rdword	arg02, local05 wz
2a98c     15 13 02 F6 | 	mov	arg01, local03
2a990     00 FA 05 A6 |  if_e	mov	result1, #0
2a994     04 14 66 50 |  if_ne	shl	arg02, #4
2a998     0A 13 02 51 |  if_ne	add	arg01, arg02
2a99c     09 FB 01 56 |  if_ne	mov	result1, arg01
2a9a0     FD 2E 0A F6 | 	mov	local05, result1 wz
2a9a4     17 31 E2 5A |  if_ne	rdword	local06, local05
2a9a8     00 2E 0E F2 | 	cmp	local05, #0 wz
2a9ac     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
2a9b0     08 00 90 1D |  if_a	jmp	#LR__3842
2a9b4     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
2a9b8     C4 FF 9F 1D |  if_a	jmp	#LR__3840
2a9bc                 | LR__3841
2a9bc                 | LR__3842
2a9bc     00 2E 0E F2 | 	cmp	local05, #0 wz
2a9c0     17 FB 01 A6 |  if_e	mov	result1, local05
2a9c4     3C 01 90 AD |  if_e	jmp	#LR__3845
2a9c8     17 FD 01 F6 | 	mov	result2, local05
2a9cc     06 FC 05 F1 | 	add	result2, #6
2a9d0     FE 34 E2 FA | 	rdword	local08, result2
2a9d4     18 27 52 F2 | 	cmps	local01, local06 wc
2a9d8     C0 00 90 3D |  if_ae	jmp	#LR__3844
2a9dc     17 27 52 FC | 	wrword	local01, local05
2a9e0     17 13 02 F6 | 	mov	arg01, local05
2a9e4     13 35 02 F6 | 	mov	local08, local01
2a9e8     04 34 66 F0 | 	shl	local08, #4
2a9ec     1A 13 02 F1 | 	add	arg01, local08
2a9f0     13 31 82 F1 | 	sub	local06, local01
2a9f4     09 31 52 FC | 	wrword	local06, arg01
2a9f8     09 35 02 F6 | 	mov	local08, arg01
2a9fc     02 34 06 F1 | 	add	local08, #2
2aa00     36 00 80 FF 
2aa04     1A 1F 59 FC | 	wrword	##27791, local08
2aa08     17 15 0A F6 | 	mov	arg02, local05 wz
2aa0c     00 FA 05 A6 |  if_e	mov	result1, #0
2aa10     15 15 82 51 |  if_ne	sub	arg02, local03
2aa14     04 14 46 50 |  if_ne	shr	arg02, #4
2aa18     0A FB 01 56 |  if_ne	mov	result1, arg02
2aa1c     09 35 02 F6 | 	mov	local08, arg01
2aa20     04 34 06 F1 | 	add	local08, #4
2aa24     1A FB 51 FC | 	wrword	result1, local08
2aa28     17 35 02 F6 | 	mov	local08, local05
2aa2c     06 34 06 F1 | 	add	local08, #6
2aa30     09 15 02 F6 | 	mov	arg02, arg01
2aa34     1A 35 E2 FA | 	rdword	local08, local08
2aa38     06 14 06 F1 | 	add	arg02, #6
2aa3c     0A 35 52 FC | 	wrword	local08, arg02
2aa40     09 37 02 F6 | 	mov	local09, arg01
2aa44     1B 15 0A F6 | 	mov	arg02, local09 wz
2aa48     00 FA 05 A6 |  if_e	mov	result1, #0
2aa4c     15 15 82 51 |  if_ne	sub	arg02, local03
2aa50     04 14 46 50 |  if_ne	shr	arg02, #4
2aa54     0A FB 01 56 |  if_ne	mov	result1, arg02
2aa58     FD 34 02 F6 | 	mov	local08, result1
2aa5c     09 39 EA FA | 	rdword	local10, arg01 wz
2aa60     00 FA 05 A6 |  if_e	mov	result1, #0
2aa64     04 38 66 50 |  if_ne	shl	local10, #4
2aa68     1C 13 02 51 |  if_ne	add	arg01, local10
2aa6c     09 FB 01 56 |  if_ne	mov	result1, arg01
2aa70     FD 3A 0A F6 | 	mov	local11, result1 wz
2aa74     24 00 90 AD |  if_e	jmp	#LR__3843
2aa78     16 3B 52 F2 | 	cmps	local11, local04 wc
2aa7c     1C 00 90 3D |  if_ae	jmp	#LR__3843
2aa80     1B 15 0A F6 | 	mov	arg02, local09 wz
2aa84     00 FA 05 A6 |  if_e	mov	result1, #0
2aa88     15 15 82 51 |  if_ne	sub	arg02, local03
2aa8c     04 14 46 50 |  if_ne	shr	arg02, #4
2aa90     0A FB 01 56 |  if_ne	mov	result1, arg02
2aa94     04 3A 06 F1 | 	add	local11, #4
2aa98     1D FB 51 FC | 	wrword	result1, local11
2aa9c                 | LR__3843
2aa9c                 | LR__3844
2aa9c     06 32 06 F1 | 	add	local07, #6
2aaa0     19 35 52 FC | 	wrword	local08, local07
2aaa4     36 00 00 FF 
2aaa8     80 36 06 F6 | 	mov	local09, ##27776
2aaac     14 37 42 F5 | 	or	local09, local02
2aab0     00 FA 05 F6 | 	mov	result1, #0
2aab4     01 FA 61 FD | 	cogid	result1
2aab8     FD 36 42 F5 | 	or	local09, result1
2aabc     17 3B 02 F6 | 	mov	local11, local05
2aac0     02 3A 06 F1 | 	add	local11, #2
2aac4     1D 37 52 FC | 	wrword	local09, local11
2aac8     15 37 02 F6 | 	mov	local09, local03
2aacc     08 36 06 F1 | 	add	local09, #8
2aad0     17 3B 02 F6 | 	mov	local11, local05
2aad4     1B 37 E2 FA | 	rdword	local09, local09
2aad8     06 3A 06 F1 | 	add	local11, #6
2aadc     1D 37 52 FC | 	wrword	local09, local11
2aae0     17 15 0A F6 | 	mov	arg02, local05 wz
2aae4     00 FA 05 A6 |  if_e	mov	result1, #0
2aae8     15 15 82 51 |  if_ne	sub	arg02, local03
2aaec     04 14 46 50 |  if_ne	shr	arg02, #4
2aaf0     0A FB 01 56 |  if_ne	mov	result1, arg02
2aaf4     08 2A 06 F1 | 	add	local03, #8
2aaf8     15 FB 51 FC | 	wrword	result1, local03
2aafc     08 2E 06 F1 | 	add	local05, #8
2ab00     17 FB 01 F6 | 	mov	result1, local05
2ab04                 | LR__3845
2ab04     A7 F0 03 F6 | 	mov	ptra, fp
2ab08     B2 00 A0 FD | 	call	#popregs_
2ab0c                 | __system___gc_tryalloc_ret
2ab0c     2D 00 64 FD | 	ret
2ab10                 | 
2ab10                 | __system___gc_alloc_managed
2ab10     01 4A 05 F6 | 	mov	COUNT_, #1
2ab14     A8 00 A0 FD | 	call	#pushregs_
2ab18     09 27 02 F6 | 	mov	local01, arg01
2ab1c     00 14 06 F6 | 	mov	arg02, #0
2ab20     1C 00 B0 FD | 	call	#__system___gc_doalloc
2ab24     FD 14 0A F6 | 	mov	arg02, result1 wz
2ab28     01 26 56 A2 |  if_e	cmps	local01, #1 wc
2ab2c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
2ab30     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2ab34     A7 F0 03 F6 | 	mov	ptra, fp
2ab38     B2 00 A0 FD | 	call	#popregs_
2ab3c                 | __system___gc_alloc_managed_ret
2ab3c     2D 00 64 FD | 	ret
2ab40                 | 
2ab40                 | __system___gc_doalloc
2ab40     06 4A 05 F6 | 	mov	COUNT_, #6
2ab44     A8 00 A0 FD | 	call	#pushregs_
2ab48     09 27 0A F6 | 	mov	local01, arg01 wz
2ab4c     0A 29 02 F6 | 	mov	local02, arg02
2ab50     00 FA 05 A6 |  if_e	mov	result1, #0
2ab54     8C 00 90 AD |  if_e	jmp	#LR__3857
2ab58     17 26 06 F1 | 	add	local01, #23
2ab5c     0F 26 26 F5 | 	andn	local01, #15
2ab60     04 26 46 F0 | 	shr	local01, #4
2ab64     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2ab68     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2ab6c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2ab70     F8 BD BF FD | 	call	#__system___lockmem
2ab74     13 13 02 F6 | 	mov	arg01, local01
2ab78     14 15 02 F6 | 	mov	arg02, local02
2ab7c     D8 FD BF FD | 	call	#__system___gc_tryalloc
2ab80     FD 2A 0A F6 | 	mov	local03, result1 wz
2ab84     14 00 90 5D |  if_ne	jmp	#LR__3850
2ab88     70 03 B0 FD | 	call	#__system___gc_docollect
2ab8c     13 13 02 F6 | 	mov	arg01, local01
2ab90     14 15 02 F6 | 	mov	arg02, local02
2ab94     C0 FD BF FD | 	call	#__system___gc_tryalloc
2ab98     FD 2A 02 F6 | 	mov	local03, result1
2ab9c                 | LR__3850
2ab9c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2aba0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2aba4     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2aba8     09 01 68 FC | 	wrlong	#0, arg01
2abac     00 2A 0E F2 | 	cmp	local03, #0 wz
2abb0     2C 00 90 AD |  if_e	jmp	#LR__3856
2abb4     04 26 66 F0 | 	shl	local01, #4
2abb8     08 26 86 F1 | 	sub	local01, #8
2abbc     13 2D 52 F6 | 	abs	local04, local01 wc
2abc0     02 2C 46 F0 | 	shr	local04, #2
2abc4     16 2F 8A F6 | 	negc	local05, local04 wz
2abc8     15 31 02 F6 | 	mov	local06, local03
2abcc     10 00 90 AD |  if_e	jmp	#LR__3855
2abd0     97 06 48 FB | 	callpa	#(@LR__3853-@LR__3851)>>2,fcache_load_ptr_
2abd4                 | LR__3851
2abd4     17 05 D8 FC | 	rep	@LR__3854, local05
2abd8                 | LR__3852
2abd8     18 01 68 FC | 	wrlong	#0, local06
2abdc     04 30 06 F1 | 	add	local06, #4
2abe0                 | LR__3853
2abe0                 | LR__3854
2abe0                 | LR__3855
2abe0                 | LR__3856
2abe0     15 FB 01 F6 | 	mov	result1, local03
2abe4                 | LR__3857
2abe4     A7 F0 03 F6 | 	mov	ptra, fp
2abe8     B2 00 A0 FD | 	call	#popregs_
2abec                 | __system___gc_doalloc_ret
2abec     2D 00 64 FD | 	ret
2abf0                 | 
2abf0                 | __system___gc_isvalidptr
2abf0     F8 16 06 F4 | 	bitl	arg03, #248
2abf4     08 16 86 F1 | 	sub	arg03, #8
2abf8     09 17 52 F2 | 	cmps	arg03, arg01 wc
2abfc     08 00 90 CD |  if_b	jmp	#LR__3860
2ac00     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2ac04     08 00 90 CD |  if_b	jmp	#LR__3861
2ac08                 | LR__3860
2ac08     00 FA 05 F6 | 	mov	result1, #0
2ac0c     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
2ac10                 | LR__3861
2ac10     0B 01 02 F6 | 	mov	_var01, arg03
2ac14     09 01 62 F5 | 	xor	_var01, arg01
2ac18     0F 00 CE F7 | 	test	_var01, #15 wz
2ac1c     00 FA 05 56 |  if_ne	mov	result1, #0
2ac20     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2ac24     0B 01 02 F6 | 	mov	_var01, arg03
2ac28     02 00 06 F1 | 	add	_var01, #2
2ac2c     00 01 E2 FA | 	rdword	_var01, _var01
2ac30     7F 00 00 FF 
2ac34     C0 01 06 F5 | 	and	_var01, ##65472
2ac38     36 00 00 FF 
2ac3c     80 00 0E F2 | 	cmp	_var01, ##27776 wz
2ac40     00 FA 05 56 |  if_ne	mov	result1, #0
2ac44     0B FB 01 A6 |  if_e	mov	result1, arg03
2ac48                 | __system___gc_isvalidptr_ret
2ac48     2D 00 64 FD | 	ret
2ac4c                 | 
2ac4c                 | __system___gc_free
2ac4c     09 17 02 F6 | 	mov	arg03, arg01
2ac50     6C FC BF FD | 	call	#__system___gc_ptrs
2ac54     FD 12 02 F6 | 	mov	arg01, result1
2ac58     FE 14 02 F6 | 	mov	arg02, result2
2ac5c     90 FF BF FD | 	call	#__system___gc_isvalidptr
2ac60     FD 14 0A F6 | 	mov	arg02, result1 wz
2ac64     28 00 90 AD |  if_e	jmp	#LR__3870
2ac68     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2ac6c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2ac70     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2ac74     F4 BC BF FD | 	call	#__system___lockmem
2ac78     0A 13 02 F6 | 	mov	arg01, arg02
2ac7c     14 00 B0 FD | 	call	#__system___gc_dofree
2ac80     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2ac84     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2ac88     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2ac8c     09 01 68 FC | 	wrlong	#0, arg01
2ac90                 | LR__3870
2ac90                 | __system___gc_free_ret
2ac90     2D 00 64 FD | 	ret
2ac94                 | 
2ac94                 | __system___gc_dofree
2ac94     06 4A 05 F6 | 	mov	COUNT_, #6
2ac98     A8 00 A0 FD | 	call	#pushregs_
2ac9c     09 27 02 F6 | 	mov	local01, arg01
2aca0     1C FC BF FD | 	call	#__system___gc_ptrs
2aca4     FD 28 02 F6 | 	mov	local02, result1
2aca8     FE 2A 02 F6 | 	mov	local03, result2
2acac     13 15 02 F6 | 	mov	arg02, local01
2acb0     02 14 06 F1 | 	add	arg02, #2
2acb4     36 00 80 FF 
2acb8     0A 1F 59 FC | 	wrword	##27791, arg02
2acbc     13 2D 02 F6 | 	mov	local04, local01
2acc0     13 13 02 F6 | 	mov	arg01, local01
2acc4     09 2F EA FA | 	rdword	local05, arg01 wz
2acc8     00 FA 05 A6 |  if_e	mov	result1, #0
2accc     04 2E 66 50 |  if_ne	shl	local05, #4
2acd0     17 13 02 51 |  if_ne	add	arg01, local05
2acd4     09 FB 01 56 |  if_ne	mov	result1, arg01
2acd8     FD 30 02 F6 | 	mov	local06, result1
2acdc     97 24 48 FB | 	callpa	#(@LR__3881-@LR__3880)>>2,fcache_load_ptr_
2ace0                 | LR__3880
2ace0     04 2C 06 F1 | 	add	local04, #4
2ace4     16 15 EA FA | 	rdword	arg02, local04 wz
2ace8     14 13 02 F6 | 	mov	arg01, local02
2acec     00 FA 05 A6 |  if_e	mov	result1, #0
2acf0     04 14 66 50 |  if_ne	shl	arg02, #4
2acf4     0A 13 02 51 |  if_ne	add	arg01, arg02
2acf8     09 FB 01 56 |  if_ne	mov	result1, arg01
2acfc     FD 2C 0A F6 | 	mov	local04, result1 wz
2ad00     24 00 90 AD |  if_e	jmp	#LR__3882
2ad04     16 13 02 F6 | 	mov	arg01, local04
2ad08     00 FA 05 F6 | 	mov	result1, #0
2ad0c     02 12 06 F1 | 	add	arg01, #2
2ad10     09 13 E2 FA | 	rdword	arg01, arg01
2ad14     36 00 00 FF 
2ad18     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2ad1c     01 FA 65 A6 |  if_e	neg	result1, #1
2ad20     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad24     B8 FF 9F AD |  if_e	jmp	#LR__3880
2ad28                 | LR__3881
2ad28                 | LR__3882
2ad28     00 2C 0E F2 | 	cmp	local04, #0 wz
2ad2c     14 2D 02 A6 |  if_e	mov	local04, local02
2ad30     16 15 02 F6 | 	mov	arg02, local04
2ad34     06 14 06 F1 | 	add	arg02, #6
2ad38     13 13 02 F6 | 	mov	arg01, local01
2ad3c     0A 15 E2 FA | 	rdword	arg02, arg02
2ad40     06 12 06 F1 | 	add	arg01, #6
2ad44     09 15 52 FC | 	wrword	arg02, arg01
2ad48     13 15 0A F6 | 	mov	arg02, local01 wz
2ad4c     00 FA 05 A6 |  if_e	mov	result1, #0
2ad50     14 15 82 51 |  if_ne	sub	arg02, local02
2ad54     04 14 46 50 |  if_ne	shr	arg02, #4
2ad58     0A FB 01 56 |  if_ne	mov	result1, arg02
2ad5c     16 15 02 F6 | 	mov	arg02, local04
2ad60     06 14 06 F1 | 	add	arg02, #6
2ad64     0A FB 51 FC | 	wrword	result1, arg02
2ad68     14 2D 0A F2 | 	cmp	local04, local02 wz
2ad6c     A4 00 90 AD |  if_e	jmp	#LR__3885
2ad70     16 13 02 F6 | 	mov	arg01, local04
2ad74     09 2F EA FA | 	rdword	local05, arg01 wz
2ad78     00 FA 05 A6 |  if_e	mov	result1, #0
2ad7c     04 2E 66 50 |  if_ne	shl	local05, #4
2ad80     17 13 02 51 |  if_ne	add	arg01, local05
2ad84     09 FB 01 56 |  if_ne	mov	result1, arg01
2ad88     13 FB 09 F2 | 	cmp	result1, local01 wz
2ad8c     84 00 90 5D |  if_ne	jmp	#LR__3884
2ad90     16 31 E2 FA | 	rdword	local06, local04
2ad94     13 15 E2 FA | 	rdword	arg02, local01
2ad98     0A 31 02 F1 | 	add	local06, arg02
2ad9c     16 31 52 FC | 	wrword	local06, local04
2ada0     13 31 02 F6 | 	mov	local06, local01
2ada4     02 30 06 F1 | 	add	local06, #2
2ada8     18 01 58 FC | 	wrword	#0, local06
2adac     13 13 02 F6 | 	mov	arg01, local01
2adb0     09 2F EA FA | 	rdword	local05, arg01 wz
2adb4     00 FA 05 A6 |  if_e	mov	result1, #0
2adb8     04 2E 66 50 |  if_ne	shl	local05, #4
2adbc     17 13 02 51 |  if_ne	add	arg01, local05
2adc0     09 FB 01 56 |  if_ne	mov	result1, arg01
2adc4     FD 30 02 F6 | 	mov	local06, result1
2adc8     15 31 52 F2 | 	cmps	local06, local03 wc
2adcc     20 00 90 3D |  if_ae	jmp	#LR__3883
2add0     16 15 0A F6 | 	mov	arg02, local04 wz
2add4     00 FA 05 A6 |  if_e	mov	result1, #0
2add8     14 15 82 51 |  if_ne	sub	arg02, local02
2addc     04 14 46 50 |  if_ne	shr	arg02, #4
2ade0     0A FB 01 56 |  if_ne	mov	result1, arg02
2ade4     18 15 02 F6 | 	mov	arg02, local06
2ade8     04 14 06 F1 | 	add	arg02, #4
2adec     0A FB 51 FC | 	wrword	result1, arg02
2adf0                 | LR__3883
2adf0     13 15 02 F6 | 	mov	arg02, local01
2adf4     06 14 06 F1 | 	add	arg02, #6
2adf8     16 FD 01 F6 | 	mov	result2, local04
2adfc     0A 15 E2 FA | 	rdword	arg02, arg02
2ae00     06 FC 05 F1 | 	add	result2, #6
2ae04     FE 14 52 FC | 	wrword	arg02, result2
2ae08     06 26 06 F1 | 	add	local01, #6
2ae0c     13 01 58 FC | 	wrword	#0, local01
2ae10     16 27 02 F6 | 	mov	local01, local04
2ae14                 | LR__3884
2ae14                 | LR__3885
2ae14     13 13 02 F6 | 	mov	arg01, local01
2ae18     09 2F EA FA | 	rdword	local05, arg01 wz
2ae1c     00 FA 05 A6 |  if_e	mov	result1, #0
2ae20     04 2E 66 50 |  if_ne	shl	local05, #4
2ae24     17 13 02 51 |  if_ne	add	arg01, local05
2ae28     09 FB 01 56 |  if_ne	mov	result1, arg01
2ae2c     FD 14 0A F6 | 	mov	arg02, result1 wz
2ae30     B8 00 90 AD |  if_e	jmp	#LR__3887
2ae34     15 15 52 F2 | 	cmps	arg02, local03 wc
2ae38     B0 00 90 3D |  if_ae	jmp	#LR__3887
2ae3c     0A 13 02 F6 | 	mov	arg01, arg02
2ae40     00 FA 05 F6 | 	mov	result1, #0
2ae44     02 12 06 F1 | 	add	arg01, #2
2ae48     09 13 E2 FA | 	rdword	arg01, arg01
2ae4c     36 00 00 FF 
2ae50     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2ae54     01 FA 65 A6 |  if_e	neg	result1, #1
2ae58     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae5c     8C 00 90 AD |  if_e	jmp	#LR__3887
2ae60     13 2D 02 F6 | 	mov	local04, local01
2ae64     16 31 E2 FA | 	rdword	local06, local04
2ae68     0A 13 02 F6 | 	mov	arg01, arg02
2ae6c     09 27 E2 FA | 	rdword	local01, arg01
2ae70     13 31 02 F1 | 	add	local06, local01
2ae74     16 31 52 FC | 	wrword	local06, local04
2ae78     09 31 02 F6 | 	mov	local06, arg01
2ae7c     06 30 06 F1 | 	add	local06, #6
2ae80     16 27 02 F6 | 	mov	local01, local04
2ae84     18 31 E2 FA | 	rdword	local06, local06
2ae88     06 26 06 F1 | 	add	local01, #6
2ae8c     13 31 52 FC | 	wrword	local06, local01
2ae90     09 31 02 F6 | 	mov	local06, arg01
2ae94     02 30 06 F1 | 	add	local06, #2
2ae98     18 55 59 FC | 	wrword	#170, local06
2ae9c     09 31 02 F6 | 	mov	local06, arg01
2aea0     06 30 06 F1 | 	add	local06, #6
2aea4     18 01 58 FC | 	wrword	#0, local06
2aea8     09 2F EA FA | 	rdword	local05, arg01 wz
2aeac     00 FA 05 A6 |  if_e	mov	result1, #0
2aeb0     04 2E 66 50 |  if_ne	shl	local05, #4
2aeb4     17 13 02 51 |  if_ne	add	arg01, local05
2aeb8     09 FB 01 56 |  if_ne	mov	result1, arg01
2aebc     FD 30 0A F6 | 	mov	local06, result1 wz
2aec0     28 00 90 AD |  if_e	jmp	#LR__3886
2aec4     15 31 52 F2 | 	cmps	local06, local03 wc
2aec8     20 00 90 3D |  if_ae	jmp	#LR__3886
2aecc     16 15 0A F6 | 	mov	arg02, local04 wz
2aed0     00 FA 05 A6 |  if_e	mov	result1, #0
2aed4     14 15 82 51 |  if_ne	sub	arg02, local02
2aed8     04 14 46 50 |  if_ne	shr	arg02, #4
2aedc     0A FB 01 56 |  if_ne	mov	result1, arg02
2aee0     18 2D 02 F6 | 	mov	local04, local06
2aee4     04 2C 06 F1 | 	add	local04, #4
2aee8     16 FB 51 FC | 	wrword	result1, local04
2aeec                 | LR__3886
2aeec                 | LR__3887
2aeec     18 FB 01 F6 | 	mov	result1, local06
2aef0     A7 F0 03 F6 | 	mov	ptra, fp
2aef4     B2 00 A0 FD | 	call	#popregs_
2aef8                 | __system___gc_dofree_ret
2aef8     2D 00 64 FD | 	ret
2aefc                 | 
2aefc                 | __system___gc_docollect
2aefc     05 4A 05 F6 | 	mov	COUNT_, #5
2af00     A8 00 A0 FD | 	call	#pushregs_
2af04     B8 F9 BF FD | 	call	#__system___gc_ptrs
2af08     FE 26 02 F6 | 	mov	local01, result2
2af0c     FD 28 02 F6 | 	mov	local02, result1
2af10     14 13 02 F6 | 	mov	arg01, local02
2af14     09 2B EA FA | 	rdword	local03, arg01 wz
2af18     00 FA 05 A6 |  if_e	mov	result1, #0
2af1c     04 2A 66 50 |  if_ne	shl	local03, #4
2af20     15 13 02 51 |  if_ne	add	arg01, local03
2af24     09 FB 01 56 |  if_ne	mov	result1, arg01
2af28     FD 2C 0A F6 | 	mov	local04, result1 wz
2af2c     00 FA 05 F6 | 	mov	result1, #0
2af30     01 FA 61 FD | 	cogid	result1
2af34     FD 2E 02 F6 | 	mov	local05, result1
2af38     48 00 90 AD |  if_e	jmp	#LR__3892
2af3c     97 22 48 FB | 	callpa	#(@LR__3891-@LR__3890)>>2,fcache_load_ptr_
2af40                 | LR__3890
2af40     13 2D 52 F2 | 	cmps	local04, local01 wc
2af44     3C 00 90 3D |  if_ae	jmp	#LR__3892
2af48     16 15 02 F6 | 	mov	arg02, local04
2af4c     02 14 06 F1 | 	add	arg02, #2
2af50     0A 15 E2 FA | 	rdword	arg02, arg02
2af54     20 14 26 F5 | 	andn	arg02, #32
2af58     16 13 02 F6 | 	mov	arg01, local04
2af5c     02 12 06 F1 | 	add	arg01, #2
2af60     09 15 52 FC | 	wrword	arg02, arg01
2af64     16 13 02 F6 | 	mov	arg01, local04
2af68     09 2B EA FA | 	rdword	local03, arg01 wz
2af6c     00 FA 05 A6 |  if_e	mov	result1, #0
2af70     04 2A 66 50 |  if_ne	shl	local03, #4
2af74     15 13 02 51 |  if_ne	add	arg01, local03
2af78     09 FB 01 56 |  if_ne	mov	result1, arg01
2af7c     FD 2C 0A F6 | 	mov	local04, result1 wz
2af80     BC FF 9F 5D |  if_ne	jmp	#LR__3890
2af84                 | LR__3891
2af84                 | LR__3892
2af84     00 2A 06 F6 | 	mov	local03, #0
2af88     00 12 06 F6 | 	mov	arg01, #0
2af8c     B4 B9 BF FD | 	call	#__system____topofstack
2af90     FD 14 02 F6 | 	mov	arg02, result1
2af94     15 13 02 F6 | 	mov	arg01, local03
2af98     90 00 B0 FD | 	call	#__system___gc_markhub
2af9c     1C 01 B0 FD | 	call	#__system___gc_markcog
2afa0     14 13 02 F6 | 	mov	arg01, local02
2afa4     09 2B EA FA | 	rdword	local03, arg01 wz
2afa8     00 FA 05 A6 |  if_e	mov	result1, #0
2afac     04 2A 66 50 |  if_ne	shl	local03, #4
2afb0     15 13 02 51 |  if_ne	add	arg01, local03
2afb4     09 FB 01 56 |  if_ne	mov	result1, arg01
2afb8     FD 28 0A F6 | 	mov	local02, result1 wz
2afbc     60 00 90 AD |  if_e	jmp	#LR__3896
2afc0                 | LR__3893
2afc0     14 2D 02 F6 | 	mov	local04, local02
2afc4     16 13 02 F6 | 	mov	arg01, local04
2afc8     09 2B EA FA | 	rdword	local03, arg01 wz
2afcc     00 FA 05 A6 |  if_e	mov	result1, #0
2afd0     04 2A 66 50 |  if_ne	shl	local03, #4
2afd4     15 13 02 51 |  if_ne	add	arg01, local03
2afd8     09 FB 01 56 |  if_ne	mov	result1, arg01
2afdc     FD 28 02 F6 | 	mov	local02, result1
2afe0     16 15 02 F6 | 	mov	arg02, local04
2afe4     02 14 06 F1 | 	add	arg02, #2
2afe8     0A 15 E2 FA | 	rdword	arg02, arg02
2afec     20 14 CE F7 | 	test	arg02, #32 wz
2aff0     10 14 CE A7 |  if_e	test	arg02, #16 wz
2aff4     1C 00 90 5D |  if_ne	jmp	#LR__3895
2aff8     0A 15 42 F8 | 	getnib	arg02, arg02, #0
2affc     17 15 0A F2 | 	cmp	arg02, local05 wz
2b000     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
2b004     0C 00 90 5D |  if_ne	jmp	#LR__3894
2b008     16 13 02 F6 | 	mov	arg01, local04
2b00c     84 FC BF FD | 	call	#__system___gc_dofree
2b010     FD 28 02 F6 | 	mov	local02, result1
2b014                 | LR__3894
2b014                 | LR__3895
2b014     00 28 0E F2 | 	cmp	local02, #0 wz
2b018     13 29 52 52 |  if_ne	cmps	local02, local01 wc
2b01c     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3893
2b020                 | LR__3896
2b020     A7 F0 03 F6 | 	mov	ptra, fp
2b024     B2 00 A0 FD | 	call	#popregs_
2b028                 | __system___gc_docollect_ret
2b028     2D 00 64 FD | 	ret
2b02c                 | 
2b02c                 | __system___gc_markhub
2b02c     04 4A 05 F6 | 	mov	COUNT_, #4
2b030     A8 00 A0 FD | 	call	#pushregs_
2b034     09 27 02 F6 | 	mov	local01, arg01
2b038     0A 29 02 F6 | 	mov	local02, arg02
2b03c     80 F8 BF FD | 	call	#__system___gc_ptrs
2b040     FD 2A 02 F6 | 	mov	local03, result1
2b044     FE 2C 02 F6 | 	mov	local04, result2
2b048                 | LR__3900
2b048     14 27 52 F2 | 	cmps	local01, local02 wc
2b04c     60 00 90 3D |  if_ae	jmp	#LR__3901
2b050     13 17 02 FB | 	rdlong	arg03, local01
2b054     04 26 06 F1 | 	add	local01, #4
2b058     16 15 02 F6 | 	mov	arg02, local04
2b05c     15 13 02 F6 | 	mov	arg01, local03
2b060     8C FB BF FD | 	call	#__system___gc_isvalidptr
2b064     FD 16 0A F6 | 	mov	arg03, result1 wz
2b068     DC FF 9F AD |  if_e	jmp	#LR__3900
2b06c     0B 13 02 F6 | 	mov	arg01, arg03
2b070     00 FA 05 F6 | 	mov	result1, #0
2b074     02 12 06 F1 | 	add	arg01, #2
2b078     09 13 E2 FA | 	rdword	arg01, arg01
2b07c     36 00 00 FF 
2b080     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2b084     01 FA 65 A6 |  if_e	neg	result1, #1
2b088     00 FA 0D F2 | 	cmp	result1, #0 wz
2b08c     B8 FF 9F 5D |  if_ne	jmp	#LR__3900
2b090     0B FD 01 F6 | 	mov	result2, arg03
2b094     02 FC 05 F1 | 	add	result2, #2
2b098     FE FC E1 FA | 	rdword	result2, result2
2b09c     0F FC 25 F5 | 	andn	result2, #15
2b0a0     2E FC 45 F5 | 	or	result2, #46
2b0a4     02 16 06 F1 | 	add	arg03, #2
2b0a8     0B FD 51 FC | 	wrword	result2, arg03
2b0ac     98 FF 9F FD | 	jmp	#LR__3900
2b0b0                 | LR__3901
2b0b0     A7 F0 03 F6 | 	mov	ptra, fp
2b0b4     B2 00 A0 FD | 	call	#popregs_
2b0b8                 | __system___gc_markhub_ret
2b0b8     2D 00 64 FD | 	ret
2b0bc                 | 
2b0bc                 | __system___gc_markcog
2b0bc     04 4A 05 F6 | 	mov	COUNT_, #4
2b0c0     A8 00 A0 FD | 	call	#pushregs_
2b0c4     F8 F7 BF FD | 	call	#__system___gc_ptrs
2b0c8     FD 26 02 F6 | 	mov	local01, result1
2b0cc     FE 28 02 F6 | 	mov	local02, result2
2b0d0     EF 2B 06 F6 | 	mov	local03, #495
2b0d4                 | LR__3910
2b0d4                 | 	'.live	local03
2b0d4     00 2A 96 F9 | 	alts	local03, #0
2b0d8     15 2D 02 F6 | 	mov	local04, local03
2b0dc     13 13 02 F6 | 	mov	arg01, local01
2b0e0     14 15 02 F6 | 	mov	arg02, local02
2b0e4     16 17 02 F6 | 	mov	arg03, local04
2b0e8     04 FB BF FD | 	call	#__system___gc_isvalidptr
2b0ec     00 FA 0D F2 | 	cmp	result1, #0 wz
2b0f0     18 00 90 AD |  if_e	jmp	#LR__3911
2b0f4     FD 2C 02 F6 | 	mov	local04, result1
2b0f8     02 2C 06 F1 | 	add	local04, #2
2b0fc     16 2D E2 FA | 	rdword	local04, local04
2b100     20 2C 46 F5 | 	or	local04, #32
2b104     02 FA 05 F1 | 	add	result1, #2
2b108     FD 2C 52 FC | 	wrword	local04, result1
2b10c                 | LR__3911
2b10c     01 2A 86 F1 | 	sub	local03, #1
2b110     00 2A 56 F2 | 	cmps	local03, #0 wc
2b114     BC FF 9F 3D |  if_ae	jmp	#LR__3910
2b118     A7 F0 03 F6 | 	mov	ptra, fp
2b11c     B2 00 A0 FD | 	call	#popregs_
2b120                 | __system___gc_markcog_ret
2b120     2D 00 64 FD | 	ret
2b124                 | 
2b124                 | __system__opendir
2b124     06 4A 05 F6 | 	mov	COUNT_, #6
2b128     A8 00 A0 FD | 	call	#pushregs_
2b12c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2b130     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2b134     09 15 02 F6 | 	mov	arg02, arg01
2b138     13 13 02 F6 | 	mov	arg01, local01
2b13c     00 16 06 F6 | 	mov	arg03, #0
2b140     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2b144     BC BF BF FD | 	call	#__system____getvfsforfile
2b148     FD 28 0A F6 | 	mov	local02, result1 wz
2b14c     10 00 90 AD |  if_e	jmp	#LR__3920
2b150     28 28 06 F1 | 	add	local02, #40
2b154     14 17 0A FB | 	rdlong	arg03, local02 wz
2b158     28 28 86 F1 | 	sub	local02, #40
2b15c     14 00 90 5D |  if_ne	jmp	#LR__3921
2b160                 | LR__3920
2b160     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b164     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2b168     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b16c     00 FA 05 F6 | 	mov	result1, #0
2b170     90 00 90 FD | 	jmp	#LR__3923
2b174                 | LR__3921
2b174     5C 12 06 F6 | 	mov	arg01, #92
2b178     10 14 06 F6 | 	mov	arg02, #16
2b17c     C0 F9 BF FD | 	call	#__system___gc_doalloc
2b180     FD 2A 0A F6 | 	mov	local03, result1 wz
2b184     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b188     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2b18c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b190     00 FA 05 A6 |  if_e	mov	result1, #0
2b194     6C 00 90 AD |  if_e	jmp	#LR__3923
2b198     28 28 06 F1 | 	add	local02, #40
2b19c     14 2D 02 FB | 	rdlong	local04, local02
2b1a0     16 2F 02 F6 | 	mov	local05, local04
2b1a4     28 28 86 F1 | 	sub	local02, #40
2b1a8     13 2E 46 F7 | 	zerox	local05, #19
2b1ac     14 2C 46 F0 | 	shr	local04, #20
2b1b0     02 2C 66 F0 | 	shl	local04, #2
2b1b4     ED 2C 02 F1 | 	add	local04, __methods__
2b1b8     16 2D 02 FB | 	rdlong	local04, local04
2b1bc     15 13 02 F6 | 	mov	arg01, local03
2b1c0     13 15 02 F6 | 	mov	arg02, local01
2b1c4     F2 30 02 F6 | 	mov	local06, objptr
2b1c8     17 E5 01 F6 | 	mov	objptr, local05
2b1cc     2D 2C 62 FD | 	call	local04
2b1d0     18 E5 01 F6 | 	mov	objptr, local06
2b1d4     FD 16 0A F6 | 	mov	arg03, result1 wz
2b1d8     20 00 90 AD |  if_e	jmp	#LR__3922
2b1dc     00 16 4E F2 | 	cmps	arg03, #0 wz
2b1e0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b1e4     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2b1e8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b1ec     15 13 02 F6 | 	mov	arg01, local03
2b1f0     58 FA BF FD | 	call	#__system___gc_free
2b1f4     00 FA 05 F6 | 	mov	result1, #0
2b1f8     08 00 90 FD | 	jmp	#LR__3923
2b1fc                 | LR__3922
2b1fc     15 29 62 FC | 	wrlong	local02, local03
2b200     15 FB 01 F6 | 	mov	result1, local03
2b204                 | LR__3923
2b204     A7 F0 03 F6 | 	mov	ptra, fp
2b208     B2 00 A0 FD | 	call	#popregs_
2b20c                 | __system__opendir_ret
2b20c     2D 00 64 FD | 	ret
2b210                 | 
2b210                 | __system__closedir
2b210     04 4A 05 F6 | 	mov	COUNT_, #4
2b214     A8 00 A0 FD | 	call	#pushregs_
2b218     09 27 02 F6 | 	mov	local01, arg01
2b21c     13 13 02 FB | 	rdlong	arg01, local01
2b220     2C 12 06 F1 | 	add	arg01, #44
2b224     09 29 02 FB | 	rdlong	local02, arg01
2b228     14 2B 02 F6 | 	mov	local03, local02
2b22c     13 2A 46 F7 | 	zerox	local03, #19
2b230     14 28 46 F0 | 	shr	local02, #20
2b234     02 28 66 F0 | 	shl	local02, #2
2b238     ED 28 02 F1 | 	add	local02, __methods__
2b23c     14 29 02 FB | 	rdlong	local02, local02
2b240     13 13 02 F6 | 	mov	arg01, local01
2b244     F2 2C 02 F6 | 	mov	local04, objptr
2b248     15 E5 01 F6 | 	mov	objptr, local03
2b24c     2D 28 62 FD | 	call	local02
2b250     16 E5 01 F6 | 	mov	objptr, local04
2b254     FD 2C 02 F6 | 	mov	local04, result1
2b258     13 13 02 F6 | 	mov	arg01, local01
2b25c     EC F9 BF FD | 	call	#__system___gc_free
2b260     00 2C 4E F2 | 	cmps	local04, #0 wz
2b264     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b268     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
2b26c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b270     01 FA 65 56 |  if_ne	neg	result1, #1
2b274     00 FA 05 A6 |  if_e	mov	result1, #0
2b278     A7 F0 03 F6 | 	mov	ptra, fp
2b27c     B2 00 A0 FD | 	call	#popregs_
2b280                 | __system__closedir_ret
2b280     2D 00 64 FD | 	ret
2b284                 | 
2b284                 | __system__readdir
2b284     04 4A 05 F6 | 	mov	COUNT_, #4
2b288     A8 00 A0 FD | 	call	#pushregs_
2b28c     09 15 0A FB | 	rdlong	arg02, arg01 wz
2b290     08 12 06 F1 | 	add	arg01, #8
2b294     09 27 02 F6 | 	mov	local01, arg01
2b298     08 12 86 F1 | 	sub	arg01, #8
2b29c     00 FA 05 A6 |  if_e	mov	result1, #0
2b2a0     5C 00 90 AD |  if_e	jmp	#LR__3931
2b2a4     30 14 06 F1 | 	add	arg02, #48
2b2a8     0A 29 02 FB | 	rdlong	local02, arg02
2b2ac     14 2B 02 F6 | 	mov	local03, local02
2b2b0     13 2A 46 F7 | 	zerox	local03, #19
2b2b4     14 28 46 F0 | 	shr	local02, #20
2b2b8     02 28 66 F0 | 	shl	local02, #2
2b2bc     ED 28 02 F1 | 	add	local02, __methods__
2b2c0     14 29 02 FB | 	rdlong	local02, local02
2b2c4     13 15 02 F6 | 	mov	arg02, local01
2b2c8     F2 2C 02 F6 | 	mov	local04, objptr
2b2cc     15 E5 01 F6 | 	mov	objptr, local03
2b2d0     2D 28 62 FD | 	call	local02
2b2d4     16 E5 01 F6 | 	mov	objptr, local04
2b2d8     00 FA 4D F2 | 	cmps	result1, #0 wz
2b2dc     1C 00 90 AD |  if_e	jmp	#LR__3930
2b2e0     01 FA 55 F2 | 	cmps	result1, #1 wc
2b2e4     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2b2e8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2b2ec     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
2b2f0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2b2f4     00 FA 05 F6 | 	mov	result1, #0
2b2f8     04 00 90 FD | 	jmp	#LR__3931
2b2fc                 | LR__3930
2b2fc     13 FB 01 F6 | 	mov	result1, local01
2b300                 | LR__3931
2b300     A7 F0 03 F6 | 	mov	ptra, fp
2b304     B2 00 A0 FD | 	call	#popregs_
2b308                 | __system__readdir_ret
2b308     2D 00 64 FD | 	ret
2b30c                 | 
2b30c                 | __system___openraw
2b30c     15 4A 05 F6 | 	mov	COUNT_, #21
2b310     A8 00 A0 FD | 	call	#pushregs_
2b314     09 27 02 F6 | 	mov	local01, arg01
2b318     0A 29 02 F6 | 	mov	local02, arg02
2b31c     0B 2B 02 F6 | 	mov	local03, arg03
2b320     0C 2D 02 F6 | 	mov	local04, arg04
2b324     04 2E 06 F6 | 	mov	local05, #4
2b328     13 31 02 F6 | 	mov	local06, local01
2b32c     00 32 06 F6 | 	mov	local07, #0
2b330     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2b334     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
2b338     1A 13 02 F6 | 	mov	arg01, local08
2b33c     14 15 02 F6 | 	mov	arg02, local02
2b340     00 16 06 F6 | 	mov	arg03, #0
2b344     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2b348     B8 BD BF FD | 	call	#__system____getvfsforfile
2b34c     FD 36 0A F6 | 	mov	local09, result1 wz
2b350     10 00 90 AD |  if_e	jmp	#LR__3940
2b354     20 36 06 F1 | 	add	local09, #32
2b358     1B FB 09 FB | 	rdlong	result1, local09 wz
2b35c     20 36 86 F1 | 	sub	local09, #32
2b360     14 00 90 5D |  if_ne	jmp	#LR__3941
2b364                 | LR__3940
2b364     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b368     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2b36c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b370     01 FA 65 F6 | 	neg	result1, #1
2b374     8C 02 90 FD | 	jmp	#LR__3954
2b378                 | LR__3941
2b378     18 13 02 F6 | 	mov	arg01, local06
2b37c     00 14 06 F6 | 	mov	arg02, #0
2b380     34 16 06 F6 | 	mov	arg03, #52
2b384     09 39 02 F6 | 	mov	local10, arg01
2b388     98 00 A0 FD | 	call	#\builtin_bytefill_
2b38c     20 36 06 F1 | 	add	local09, #32
2b390     1B 3B 02 FB | 	rdlong	local11, local09
2b394     1D 3D 02 F6 | 	mov	local12, local11
2b398     1D 3F 02 F6 | 	mov	local13, local11
2b39c     20 36 86 F1 | 	sub	local09, #32
2b3a0     1F 41 02 F6 | 	mov	local14, local13
2b3a4     13 3C 46 F7 | 	zerox	local12, #19
2b3a8     14 40 46 F0 | 	shr	local14, #20
2b3ac     02 40 66 F0 | 	shl	local14, #2
2b3b0     ED 40 02 F1 | 	add	local14, __methods__
2b3b4     20 41 02 FB | 	rdlong	local14, local14
2b3b8     18 43 02 F6 | 	mov	local15, local06
2b3bc     1A 45 02 F6 | 	mov	local16, local08
2b3c0     15 47 02 F6 | 	mov	local17, local03
2b3c4     21 13 02 F6 | 	mov	arg01, local15
2b3c8     22 15 02 F6 | 	mov	arg02, local16
2b3cc     23 17 02 F6 | 	mov	arg03, local17
2b3d0     F2 48 02 F6 | 	mov	local18, objptr
2b3d4     1E E5 01 F6 | 	mov	objptr, local12
2b3d8     2D 40 62 FD | 	call	local14
2b3dc     24 E5 01 F6 | 	mov	objptr, local18
2b3e0     FD 4A 0A F6 | 	mov	local19, result1 wz
2b3e4     04 2A CE 57 |  if_ne	test	local03, #4 wz
2b3e8     58 00 90 AD |  if_e	jmp	#LR__3942
2b3ec     24 36 06 F1 | 	add	local09, #36
2b3f0     1B 3B 02 FB | 	rdlong	local11, local09
2b3f4     1D 3D 02 F6 | 	mov	local12, local11
2b3f8     1D 3F 02 F6 | 	mov	local13, local11
2b3fc     24 36 86 F1 | 	sub	local09, #36
2b400     1F 41 02 F6 | 	mov	local14, local13
2b404     13 3C 46 F7 | 	zerox	local12, #19
2b408     14 40 46 F0 | 	shr	local14, #20
2b40c     02 40 66 F0 | 	shl	local14, #2
2b410     ED 40 02 F1 | 	add	local14, __methods__
2b414     20 41 02 FB | 	rdlong	local14, local14
2b418     18 43 02 F6 | 	mov	local15, local06
2b41c     1A 45 02 F6 | 	mov	local16, local08
2b420     16 47 02 F6 | 	mov	local17, local04
2b424     21 13 02 F6 | 	mov	arg01, local15
2b428     22 15 02 F6 | 	mov	arg02, local16
2b42c     23 17 02 F6 | 	mov	arg03, local17
2b430     F2 48 02 F6 | 	mov	local18, objptr
2b434     1E E5 01 F6 | 	mov	objptr, local12
2b438     2D 40 62 FD | 	call	local14
2b43c     24 E5 01 F6 | 	mov	objptr, local18
2b440     FD 4A 02 F6 | 	mov	local19, result1
2b444                 | LR__3942
2b444     00 4A 0E F2 | 	cmp	local19, #0 wz
2b448     8C 01 90 5D |  if_ne	jmp	#LR__3952
2b44c     15 4D 02 F6 | 	mov	local20, local03
2b450     03 4C 0E F5 | 	and	local20, #3 wz
2b454     02 2E 46 55 |  if_ne	or	local05, #2
2b458     01 4C 0E F2 | 	cmp	local20, #1 wz
2b45c     01 2E 46 55 |  if_ne	or	local05, #1
2b460     20 2A CE F7 | 	test	local03, #32 wz
2b464     C0 2E 46 55 |  if_ne	or	local05, #192
2b468     08 30 06 F1 | 	add	local06, #8
2b46c     18 2F 62 FC | 	wrlong	local05, local06
2b470     0C 30 06 F1 | 	add	local06, #12
2b474     18 4F 0A FB | 	rdlong	local21, local06 wz
2b478     14 30 86 F1 | 	sub	local06, #20
2b47c     18 00 90 5D |  if_ne	jmp	#LR__3943
2b480     04 36 06 F1 | 	add	local09, #4
2b484     1B 4F 02 FB | 	rdlong	local21, local09
2b488     04 36 86 F1 | 	sub	local09, #4
2b48c     14 30 06 F1 | 	add	local06, #20
2b490     18 4F 62 FC | 	wrlong	local21, local06
2b494     14 30 86 F1 | 	sub	local06, #20
2b498                 | LR__3943
2b498     18 30 06 F1 | 	add	local06, #24
2b49c     18 4F 0A FB | 	rdlong	local21, local06 wz
2b4a0     18 30 86 F1 | 	sub	local06, #24
2b4a4     18 00 90 5D |  if_ne	jmp	#LR__3944
2b4a8     08 36 06 F1 | 	add	local09, #8
2b4ac     1B 4F 02 FB | 	rdlong	local21, local09
2b4b0     08 36 86 F1 | 	sub	local09, #8
2b4b4     18 30 06 F1 | 	add	local06, #24
2b4b8     18 4F 62 FC | 	wrlong	local21, local06
2b4bc     18 30 86 F1 | 	sub	local06, #24
2b4c0                 | LR__3944
2b4c0     24 30 06 F1 | 	add	local06, #36
2b4c4     18 4F 0A FB | 	rdlong	local21, local06 wz
2b4c8     24 30 86 F1 | 	sub	local06, #36
2b4cc     1B 4F 02 AB |  if_e	rdlong	local21, local09
2b4d0     24 30 06 A1 |  if_e	add	local06, #36
2b4d4     18 4F 62 AC |  if_e	wrlong	local21, local06
2b4d8     24 30 86 A1 |  if_e	sub	local06, #36
2b4dc     28 30 06 F1 | 	add	local06, #40
2b4e0     18 4F 0A FB | 	rdlong	local21, local06 wz
2b4e4     28 30 86 F1 | 	sub	local06, #40
2b4e8     18 00 90 5D |  if_ne	jmp	#LR__3945
2b4ec     10 36 06 F1 | 	add	local09, #16
2b4f0     1B 4F 02 FB | 	rdlong	local21, local09
2b4f4     10 36 86 F1 | 	sub	local09, #16
2b4f8     28 30 06 F1 | 	add	local06, #40
2b4fc     18 4F 62 FC | 	wrlong	local21, local06
2b500     28 30 86 F1 | 	sub	local06, #40
2b504                 | LR__3945
2b504     30 30 06 F1 | 	add	local06, #48
2b508     18 4F 0A FB | 	rdlong	local21, local06 wz
2b50c     30 30 86 F1 | 	sub	local06, #48
2b510     18 00 90 5D |  if_ne	jmp	#LR__3946
2b514     0C 36 06 F1 | 	add	local09, #12
2b518     1B 4F 02 FB | 	rdlong	local21, local09
2b51c     0C 36 86 F1 | 	sub	local09, #12
2b520     30 30 06 F1 | 	add	local06, #48
2b524     18 4F 62 FC | 	wrlong	local21, local06
2b528     30 30 86 F1 | 	sub	local06, #48
2b52c                 | LR__3946
2b52c     1C 30 06 F1 | 	add	local06, #28
2b530     18 4F 0A FB | 	rdlong	local21, local06 wz
2b534     1C 30 86 F1 | 	sub	local06, #28
2b538     1C 00 90 5D |  if_ne	jmp	#LR__3947
2b53c     01 32 06 F6 | 	mov	local07, #1
2b540     F2 12 02 F6 | 	mov	arg01, objptr
2b544     00 60 05 FF 
2b548     00 12 46 F5 | 	or	arg01, ##180355072
2b54c     1C 30 06 F1 | 	add	local06, #28
2b550     18 13 62 FC | 	wrlong	arg01, local06
2b554     1C 30 86 F1 | 	sub	local06, #28
2b558                 | LR__3947
2b558     20 30 06 F1 | 	add	local06, #32
2b55c     18 4F 0A FB | 	rdlong	local21, local06 wz
2b560     20 30 86 F1 | 	sub	local06, #32
2b564     1C 00 90 5D |  if_ne	jmp	#LR__3948
2b568     01 32 06 F6 | 	mov	local07, #1
2b56c     F2 12 02 F6 | 	mov	arg01, objptr
2b570     00 68 05 FF 
2b574     00 12 46 F5 | 	or	arg01, ##181403648
2b578     20 30 06 F1 | 	add	local06, #32
2b57c     18 13 62 FC | 	wrlong	arg01, local06
2b580     20 30 86 F1 | 	sub	local06, #32
2b584                 | LR__3948
2b584     2C 30 06 F1 | 	add	local06, #44
2b588     18 4F 0A FB | 	rdlong	local21, local06 wz
2b58c     2C 30 86 F1 | 	sub	local06, #44
2b590     44 00 90 5D |  if_ne	jmp	#LR__3951
2b594     14 36 06 F1 | 	add	local09, #20
2b598     1B 4F 0A FB | 	rdlong	local21, local09 wz
2b59c     14 36 86 F1 | 	sub	local09, #20
2b5a0     18 00 90 AD |  if_e	jmp	#LR__3949
2b5a4     14 36 06 F1 | 	add	local09, #20
2b5a8     1B 4F 02 FB | 	rdlong	local21, local09
2b5ac     2C 30 06 F1 | 	add	local06, #44
2b5b0     18 4F 62 FC | 	wrlong	local21, local06
2b5b4     2C 30 86 F1 | 	sub	local06, #44
2b5b8     1C 00 90 FD | 	jmp	#LR__3950
2b5bc                 | LR__3949
2b5bc     01 32 06 F6 | 	mov	local07, #1
2b5c0     F2 12 02 F6 | 	mov	arg01, objptr
2b5c4     00 70 05 FF 
2b5c8     00 12 46 F5 | 	or	arg01, ##182452224
2b5cc     2C 30 06 F1 | 	add	local06, #44
2b5d0     18 13 62 FC | 	wrlong	arg01, local06
2b5d4     2C 30 86 F1 | 	sub	local06, #44
2b5d8                 | LR__3950
2b5d8                 | LR__3951
2b5d8                 | LR__3952
2b5d8     00 32 0E F2 | 	cmp	local07, #0 wz
2b5dc     18 13 02 56 |  if_ne	mov	arg01, local06
2b5e0     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2b5e4     00 4A 0E F2 | 	cmp	local19, #0 wz
2b5e8     00 12 06 A6 |  if_e	mov	arg01, #0
2b5ec     10 00 90 5D |  if_ne	jmp	#LR__3953
2b5f0     00 12 4E F2 | 	cmps	arg01, #0 wz
2b5f4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b5f8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2b5fc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b600                 | LR__3953
2b600     25 FB 01 F6 | 	mov	result1, local19
2b604                 | LR__3954
2b604     A7 F0 03 F6 | 	mov	ptra, fp
2b608     B2 00 A0 FD | 	call	#popregs_
2b60c                 | __system___openraw_ret
2b60c     2D 00 64 FD | 	ret
2b610                 | 
2b610                 | __system___closeraw
2b610     05 4A 05 F6 | 	mov	COUNT_, #5
2b614     A8 00 A0 FD | 	call	#pushregs_
2b618     09 27 02 F6 | 	mov	local01, arg01
2b61c     00 28 06 F6 | 	mov	local02, #0
2b620     08 26 06 F1 | 	add	local01, #8
2b624     13 FB 09 FB | 	rdlong	result1, local01 wz
2b628     08 26 86 F1 | 	sub	local01, #8
2b62c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b630     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2b634     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b638     01 FA 65 A6 |  if_e	neg	result1, #1
2b63c     A8 00 90 AD |  if_e	jmp	#LR__3962
2b640     2C 26 06 F1 | 	add	local01, #44
2b644     13 FB 09 FB | 	rdlong	result1, local01 wz
2b648     2C 26 86 F1 | 	sub	local01, #44
2b64c     38 00 90 AD |  if_e	jmp	#LR__3960
2b650     2C 26 06 F1 | 	add	local01, #44
2b654     13 2B 02 FB | 	rdlong	local03, local01
2b658     15 2D 02 F6 | 	mov	local04, local03
2b65c     2C 26 86 F1 | 	sub	local01, #44
2b660     13 2C 46 F7 | 	zerox	local04, #19
2b664     14 2A 46 F0 | 	shr	local03, #20
2b668     02 2A 66 F0 | 	shl	local03, #2
2b66c     ED 2A 02 F1 | 	add	local03, __methods__
2b670     15 2B 02 FB | 	rdlong	local03, local03
2b674     13 13 02 F6 | 	mov	arg01, local01
2b678     F2 2E 02 F6 | 	mov	local05, objptr
2b67c     16 E5 01 F6 | 	mov	objptr, local04
2b680     2D 2A 62 FD | 	call	local03
2b684     17 E5 01 F6 | 	mov	objptr, local05
2b688                 | LR__3960
2b688     24 26 06 F1 | 	add	local01, #36
2b68c     13 2F 0A FB | 	rdlong	local05, local01 wz
2b690     24 26 86 F1 | 	sub	local01, #36
2b694     3C 00 90 AD |  if_e	jmp	#LR__3961
2b698     24 26 06 F1 | 	add	local01, #36
2b69c     13 2B 02 FB | 	rdlong	local03, local01
2b6a0     15 2D 02 F6 | 	mov	local04, local03
2b6a4     24 26 86 F1 | 	sub	local01, #36
2b6a8     13 2C 46 F7 | 	zerox	local04, #19
2b6ac     14 2A 46 F0 | 	shr	local03, #20
2b6b0     02 2A 66 F0 | 	shl	local03, #2
2b6b4     ED 2A 02 F1 | 	add	local03, __methods__
2b6b8     15 2B 02 FB | 	rdlong	local03, local03
2b6bc     13 13 02 F6 | 	mov	arg01, local01
2b6c0     F2 2E 02 F6 | 	mov	local05, objptr
2b6c4     16 E5 01 F6 | 	mov	objptr, local04
2b6c8     2D 2A 62 FD | 	call	local03
2b6cc     17 E5 01 F6 | 	mov	objptr, local05
2b6d0     FD 28 02 F6 | 	mov	local02, result1
2b6d4                 | LR__3961
2b6d4     13 13 02 F6 | 	mov	arg01, local01
2b6d8     00 14 06 F6 | 	mov	arg02, #0
2b6dc     34 16 06 F6 | 	mov	arg03, #52
2b6e0     98 00 A0 FD | 	call	#\builtin_bytefill_
2b6e4     14 FB 01 F6 | 	mov	result1, local02
2b6e8                 | LR__3962
2b6e8     A7 F0 03 F6 | 	mov	ptra, fp
2b6ec     B2 00 A0 FD | 	call	#popregs_
2b6f0                 | __system___closeraw_ret
2b6f0     2D 00 64 FD | 	ret
2b6f4                 | 
2b6f4                 | __system___vfs_open_sdcardx
2b6f4     0B 4A 05 F6 | 	mov	COUNT_, #11
2b6f8     A8 00 A0 FD | 	call	#pushregs_
2b6fc     09 2B 02 F6 | 	mov	local03, arg01
2b700     0A 2D 02 F6 | 	mov	local04, arg02
2b704     0B 2F 02 F6 | 	mov	local05, arg03
2b708     0C 31 02 F6 | 	mov	local06, arg04
2b70c     01 00 00 FF 
2b710     24 12 06 F6 | 	mov	arg01, ##548
2b714     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
2b718     FD 32 02 F6 | 	mov	local07, result1
2b71c     01 00 00 FF 
2b720     34 12 06 F6 | 	mov	arg01, ##564
2b724     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
2b728     FD 34 02 F6 | 	mov	local08, result1
2b72c     15 19 02 F6 | 	mov	arg04, local03
2b730     1F 18 C6 F0 | 	sar	arg04, #31
2b734     15 17 02 F6 | 	mov	arg03, local03
2b738     01 12 06 F6 | 	mov	arg01, #1
2b73c     00 14 06 F6 | 	mov	arg02, #0
2b740     EC DB BF FD | 	call	#__system___int64_shl
2b744     FD 26 02 F6 | 	mov	local01, result1
2b748     FE 36 02 F6 | 	mov	local09, result2
2b74c     16 19 02 F6 | 	mov	arg04, local04
2b750     1F 18 C6 F0 | 	sar	arg04, #31
2b754     16 17 02 F6 | 	mov	arg03, local04
2b758     01 12 06 F6 | 	mov	arg01, #1
2b75c     00 14 06 F6 | 	mov	arg02, #0
2b760     CC DB BF FD | 	call	#__system___int64_shl
2b764     FD 26 42 F5 | 	or	local01, result1
2b768     FE 36 42 F5 | 	or	local09, result2
2b76c     17 19 02 F6 | 	mov	arg04, local05
2b770     1F 18 C6 F0 | 	sar	arg04, #31
2b774     17 17 02 F6 | 	mov	arg03, local05
2b778     01 12 06 F6 | 	mov	arg01, #1
2b77c     00 14 06 F6 | 	mov	arg02, #0
2b780     AC DB BF FD | 	call	#__system___int64_shl
2b784     FD 26 42 F5 | 	or	local01, result1
2b788     FE 36 42 F5 | 	or	local09, result2
2b78c     18 19 02 F6 | 	mov	arg04, local06
2b790     1F 18 C6 F0 | 	sar	arg04, #31
2b794     18 17 02 F6 | 	mov	arg03, local06
2b798     01 12 06 F6 | 	mov	arg01, #1
2b79c     00 14 06 F6 | 	mov	arg02, #0
2b7a0     8C DB BF FD | 	call	#__system___int64_shl
2b7a4     1B 15 02 F6 | 	mov	arg02, local09
2b7a8     FD 26 42 F5 | 	or	local01, result1
2b7ac     0A FD 41 F5 | 	or	result2, arg02
2b7b0     FE 28 02 F6 | 	mov	local02, result2
2b7b4     13 13 02 F6 | 	mov	arg01, local01
2b7b8     14 15 02 F6 | 	mov	arg02, local02
2b7bc     A8 DB BF FD | 	call	#__system___usepins
2b7c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2b7c4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b7c8     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2b7cc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b7d0     00 FA 05 A6 |  if_e	mov	result1, #0
2b7d4     B4 00 90 AD |  if_e	jmp	#LR__3972
2b7d8     13 39 02 F6 | 	mov	local10, local01
2b7dc     14 37 02 F6 | 	mov	local09, local02
2b7e0     01 00 00 FF 
2b7e4     08 32 06 F1 | 	add	local07, ##520
2b7e8     19 39 62 FC | 	wrlong	local10, local07
2b7ec     04 32 06 F1 | 	add	local07, #4
2b7f0     19 37 62 FC | 	wrlong	local09, local07
2b7f4     01 00 00 FF 
2b7f8     0C 32 86 F1 | 	sub	local07, ##524
2b7fc     18 1B 02 F6 | 	mov	arg05, local06
2b800     00 12 06 F6 | 	mov	arg01, #0
2b804     15 15 02 F6 | 	mov	arg02, local03
2b808     16 17 02 F6 | 	mov	arg03, local04
2b80c     17 19 02 F6 | 	mov	arg04, local05
2b810     F2 38 02 F6 | 	mov	local10, objptr
2b814     19 E5 01 F6 | 	mov	objptr, local07
2b818     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
2b81c     1C E5 01 F6 | 	mov	objptr, local10
2b820     FD 3A 0A F6 | 	mov	local11, result1 wz
2b824     24 00 90 5D |  if_ne	jmp	#LR__3970
2b828     B2 01 00 FF 
2b82c     E6 14 06 F6 | 	mov	arg02, ##@LR__5387
2b830     1A 13 02 F6 | 	mov	arg01, local08
2b834     00 16 06 F6 | 	mov	arg03, #0
2b838     F2 3A 02 F6 | 	mov	local11, objptr
2b83c     19 E5 01 F6 | 	mov	objptr, local07
2b840     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
2b844     1D E5 01 F6 | 	mov	objptr, local11
2b848     FD 3A 02 F6 | 	mov	local11, result1
2b84c                 | LR__3970
2b84c     00 3A 0E F2 | 	cmp	local11, #0 wz
2b850     24 00 90 AD |  if_e	jmp	#LR__3971
2b854     13 13 02 F6 | 	mov	arg01, local01
2b858     14 15 02 F6 | 	mov	arg02, local02
2b85c     5C DB BF FD | 	call	#__system___freepins
2b860     1D 13 6A F6 | 	neg	arg01, local11 wz
2b864     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b868     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2b86c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b870     00 FA 05 F6 | 	mov	result1, #0
2b874     14 00 90 FD | 	jmp	#LR__3972
2b878                 | LR__3971
2b878     19 13 02 F6 | 	mov	arg01, local07
2b87c     F2 3A 02 F6 | 	mov	local11, objptr
2b880     19 E5 01 F6 | 	mov	objptr, local07
2b884     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
2b888     1D E5 01 F6 | 	mov	objptr, local11
2b88c                 | LR__3972
2b88c     A7 F0 03 F6 | 	mov	ptra, fp
2b890     B2 00 A0 FD | 	call	#popregs_
2b894                 | __system___vfs_open_sdcardx_ret
2b894     2D 00 64 FD | 	ret
2b898                 | 
2b898                 | __system____default_getc
2b898     03 4A 05 F6 | 	mov	COUNT_, #3
2b89c     A8 00 A0 FD | 	call	#pushregs_
2b8a0     09 27 02 F6 | 	mov	local01, arg01
2b8a4     13 29 02 FB | 	rdlong	local02, local01
2b8a8     08 28 06 F1 | 	add	local02, #8
2b8ac     14 2B 02 FB | 	rdlong	local03, local02
2b8b0     02 2A CE F7 | 	test	local03, #2 wz
2b8b4     13 13 02 56 |  if_ne	mov	arg01, local01
2b8b8     00 01 B0 5D |  if_ne	call	#__system____default_flush
2b8bc     14 2B 02 FB | 	rdlong	local03, local02
2b8c0     01 2A 46 F5 | 	or	local03, #1
2b8c4     14 2B 62 FC | 	wrlong	local03, local02
2b8c8     08 28 86 F1 | 	sub	local02, #8
2b8cc     14 2B 0A FB | 	rdlong	local03, local02 wz
2b8d0     0C 00 90 5D |  if_ne	jmp	#LR__3980
2b8d4     13 13 02 F6 | 	mov	arg01, local01
2b8d8     68 18 B0 FD | 	call	#__system____default_filbuf
2b8dc     FD 2A 02 F6 | 	mov	local03, result1
2b8e0                 | LR__3980
2b8e0     01 2A 56 F2 | 	cmps	local03, #1 wc
2b8e4     01 FA 65 C6 |  if_b	neg	result1, #1
2b8e8     1C 00 90 CD |  if_b	jmp	#LR__3981
2b8ec     01 2A 86 F1 | 	sub	local03, #1
2b8f0     14 2B 62 FC | 	wrlong	local03, local02
2b8f4     04 28 06 F1 | 	add	local02, #4
2b8f8     14 2B 02 FB | 	rdlong	local03, local02
2b8fc     15 FB C1 FA | 	rdbyte	result1, local03
2b900     01 2A 06 F1 | 	add	local03, #1
2b904     14 2B 62 FC | 	wrlong	local03, local02
2b908                 | LR__3981
2b908     A7 F0 03 F6 | 	mov	ptra, fp
2b90c     B2 00 A0 FD | 	call	#popregs_
2b910                 | __system____default_getc_ret
2b910     2D 00 64 FD | 	ret
2b914                 | 
2b914                 | __system____default_putc
2b914     06 4A 05 F6 | 	mov	COUNT_, #6
2b918     A8 00 A0 FD | 	call	#pushregs_
2b91c     09 27 02 F6 | 	mov	local01, arg01
2b920     0A 29 02 F6 | 	mov	local02, arg02
2b924     14 2B 02 FB | 	rdlong	local03, local02
2b928     08 2A 06 F1 | 	add	local03, #8
2b92c     15 FB 01 FB | 	rdlong	result1, local03
2b930     01 FA CD F7 | 	test	result1, #1 wz
2b934     14 13 02 56 |  if_ne	mov	arg01, local02
2b938     80 00 B0 5D |  if_ne	call	#__system____default_flush
2b93c     15 2D 02 FB | 	rdlong	local04, local03
2b940     02 2C 46 F5 | 	or	local04, #2
2b944     15 2D 62 FC | 	wrlong	local04, local03
2b948     08 2A 86 F1 | 	sub	local03, #8
2b94c     15 2F 02 FB | 	rdlong	local05, local03
2b950     10 2A 06 F1 | 	add	local03, #16
2b954     15 15 02 FB | 	rdlong	arg02, local03
2b958     10 2A 86 F1 | 	sub	local03, #16
2b95c     17 FB 01 F6 | 	mov	result1, local05
2b960     0A FB 01 F1 | 	add	result1, arg02
2b964     FD 26 42 FC | 	wrbyte	local01, result1
2b968     13 27 E2 F8 | 	getbyte	local01, local01, #0
2b96c     01 2E 06 F1 | 	add	local05, #1
2b970     15 2F 62 FC | 	wrlong	local05, local03
2b974     06 28 06 F1 | 	add	local02, #6
2b978     14 31 EA FA | 	rdword	local06, local02 wz
2b97c     06 28 86 F1 | 	sub	local02, #6
2b980     0C 2A 06 51 |  if_ne	add	local03, #12
2b984     15 2D 02 5B |  if_ne	rdlong	local04, local03
2b988     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
2b98c     0C 00 90 AD |  if_e	jmp	#LR__3990
2b990     0A 26 0E F2 | 	cmp	local01, #10 wz
2b994     01 30 0E A2 |  if_e	cmp	local06, #1 wz
2b998     10 00 90 5D |  if_ne	jmp	#LR__3991
2b99c                 | LR__3990
2b99c     14 13 02 F6 | 	mov	arg01, local02
2b9a0     18 00 B0 FD | 	call	#__system____default_flush
2b9a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b9a8     01 26 66 56 |  if_ne	neg	local01, #1
2b9ac                 | LR__3991
2b9ac     13 FB 01 F6 | 	mov	result1, local01
2b9b0     A7 F0 03 F6 | 	mov	ptra, fp
2b9b4     B2 00 A0 FD | 	call	#popregs_
2b9b8                 | __system____default_putc_ret
2b9b8     2D 00 64 FD | 	ret
2b9bc                 | 
2b9bc                 | __system____default_flush
2b9bc     06 4A 05 F6 | 	mov	COUNT_, #6
2b9c0     A8 00 A0 FD | 	call	#pushregs_
2b9c4     09 27 02 F6 | 	mov	local01, arg01
2b9c8     13 29 02 FB | 	rdlong	local02, local01
2b9cc     14 2B 02 FB | 	rdlong	local03, local02
2b9d0     08 28 06 F1 | 	add	local02, #8
2b9d4     14 FB 01 FB | 	rdlong	result1, local02
2b9d8     08 28 86 F1 | 	sub	local02, #8
2b9dc     02 FA CD F7 | 	test	result1, #2 wz
2b9e0     D0 00 90 AD |  if_e	jmp	#LR__4002
2b9e4     01 2A 56 F2 | 	cmps	local03, #1 wc
2b9e8     20 01 90 CD |  if_b	jmp	#LR__4004
2b9ec     08 26 06 F1 | 	add	local01, #8
2b9f0     13 FB 01 FB | 	rdlong	result1, local01
2b9f4     08 26 86 F1 | 	sub	local01, #8
2b9f8     40 FA CD F7 | 	test	result1, #64 wz
2b9fc     68 00 90 AD |  if_e	jmp	#LR__4001
2ba00     08 26 06 F1 | 	add	local01, #8
2ba04     13 17 02 FB | 	rdlong	arg03, local01
2ba08     08 26 86 F1 | 	sub	local01, #8
2ba0c     80 16 CE F7 | 	test	arg03, #128 wz
2ba10     54 00 90 AD |  if_e	jmp	#LR__4000
2ba14     30 26 06 F1 | 	add	local01, #48
2ba18     13 2D 02 FB | 	rdlong	local04, local01
2ba1c     16 2F 02 F6 | 	mov	local05, local04
2ba20     30 26 86 F1 | 	sub	local01, #48
2ba24     13 2E 46 F7 | 	zerox	local05, #19
2ba28     14 2C 46 F0 | 	shr	local04, #20
2ba2c     02 2C 66 F0 | 	shl	local04, #2
2ba30     ED 2C 02 F1 | 	add	local04, __methods__
2ba34     16 2D 02 FB | 	rdlong	local04, local04
2ba38     13 13 02 F6 | 	mov	arg01, local01
2ba3c     00 14 06 F6 | 	mov	arg02, #0
2ba40     02 16 06 F6 | 	mov	arg03, #2
2ba44     F2 30 02 F6 | 	mov	local06, objptr
2ba48     17 E5 01 F6 | 	mov	objptr, local05
2ba4c     2D 2C 62 FD | 	call	local04
2ba50     18 E5 01 F6 | 	mov	objptr, local06
2ba54     08 26 06 F1 | 	add	local01, #8
2ba58     13 31 02 FB | 	rdlong	local06, local01
2ba5c     80 30 26 F5 | 	andn	local06, #128
2ba60     13 31 62 FC | 	wrlong	local06, local01
2ba64     08 26 86 F1 | 	sub	local01, #8
2ba68                 | LR__4000
2ba68                 | LR__4001
2ba68     18 26 06 F1 | 	add	local01, #24
2ba6c     13 2D 02 FB | 	rdlong	local04, local01
2ba70     16 2F 02 F6 | 	mov	local05, local04
2ba74     18 26 86 F1 | 	sub	local01, #24
2ba78     13 2E 46 F7 | 	zerox	local05, #19
2ba7c     14 2C 46 F0 | 	shr	local04, #20
2ba80     02 2C 66 F0 | 	shl	local04, #2
2ba84     ED 2C 02 F1 | 	add	local04, __methods__
2ba88     16 2D 02 FB | 	rdlong	local04, local04
2ba8c     10 28 06 F1 | 	add	local02, #16
2ba90     14 15 02 FB | 	rdlong	arg02, local02
2ba94     10 28 86 F1 | 	sub	local02, #16
2ba98     13 13 02 F6 | 	mov	arg01, local01
2ba9c     15 17 02 F6 | 	mov	arg03, local03
2baa0     F2 30 02 F6 | 	mov	local06, objptr
2baa4     17 E5 01 F6 | 	mov	objptr, local05
2baa8     2D 2C 62 FD | 	call	local04
2baac     18 E5 01 F6 | 	mov	objptr, local06
2bab0     58 00 90 FD | 	jmp	#LR__4004
2bab4                 | LR__4002
2bab4     08 28 06 F1 | 	add	local02, #8
2bab8     14 31 02 FB | 	rdlong	local06, local02
2babc     08 28 86 F1 | 	sub	local02, #8
2bac0     01 30 CE F7 | 	test	local06, #1 wz
2bac4     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2bac8     40 00 90 AD |  if_e	jmp	#LR__4003
2bacc     30 26 06 F1 | 	add	local01, #48
2bad0     13 2D 02 FB | 	rdlong	local04, local01
2bad4     16 2F 02 F6 | 	mov	local05, local04
2bad8     30 26 86 F1 | 	sub	local01, #48
2badc     13 2E 46 F7 | 	zerox	local05, #19
2bae0     14 2C 46 F0 | 	shr	local04, #20
2bae4     02 2C 66 F0 | 	shl	local04, #2
2bae8     ED 2C 02 F1 | 	add	local04, __methods__
2baec     16 2D 02 FB | 	rdlong	local04, local04
2baf0     13 13 02 F6 | 	mov	arg01, local01
2baf4     15 15 62 F6 | 	neg	arg02, local03
2baf8     01 16 06 F6 | 	mov	arg03, #1
2bafc     F2 30 02 F6 | 	mov	local06, objptr
2bb00     17 E5 01 F6 | 	mov	objptr, local05
2bb04     2D 2C 62 FD | 	call	local04
2bb08     18 E5 01 F6 | 	mov	objptr, local06
2bb0c                 | LR__4003
2bb0c                 | LR__4004
2bb0c     14 01 68 FC | 	wrlong	#0, local02
2bb10     04 28 06 F1 | 	add	local02, #4
2bb14     14 01 68 FC | 	wrlong	#0, local02
2bb18     04 28 06 F1 | 	add	local02, #4
2bb1c     14 01 68 FC | 	wrlong	#0, local02
2bb20     00 FA 05 F6 | 	mov	result1, #0
2bb24     A7 F0 03 F6 | 	mov	ptra, fp
2bb28     B2 00 A0 FD | 	call	#popregs_
2bb2c                 | __system____default_flush_ret
2bb2c     2D 00 64 FD | 	ret
2bb30                 | 
2bb30                 | __system____default_buffer_init
2bb30     02 4A 05 F6 | 	mov	COUNT_, #2
2bb34     A8 00 A0 FD | 	call	#pushregs_
2bb38     09 27 02 F6 | 	mov	local01, arg01
2bb3c     13 29 02 FB | 	rdlong	local02, local01
2bb40     13 13 02 F6 | 	mov	arg01, local01
2bb44     34 03 B0 FD | 	call	#__system___isatty
2bb48     00 FA 0D F2 | 	cmp	result1, #0 wz
2bb4c     06 26 06 51 |  if_ne	add	local01, #6
2bb50     13 0B 58 5C |  if_ne	wrword	#5, local01
2bb54     06 26 06 A1 |  if_e	add	local01, #6
2bb58     13 0D 58 AC |  if_e	wrword	#6, local01
2bb5c     14 28 06 F1 | 	add	local02, #20
2bb60     14 27 02 F6 | 	mov	local01, local02
2bb64     04 28 86 F1 | 	sub	local02, #4
2bb68     14 27 62 FC | 	wrlong	local01, local02
2bb6c     04 28 86 F1 | 	sub	local02, #4
2bb70     02 00 80 FF 
2bb74     14 01 68 FC | 	wrlong	##1024, local02
2bb78     00 FA 05 F6 | 	mov	result1, #0
2bb7c     A7 F0 03 F6 | 	mov	ptra, fp
2bb80     B2 00 A0 FD | 	call	#popregs_
2bb84                 | __system____default_buffer_init_ret
2bb84     2D 00 64 FD | 	ret
2bb88                 | 
2bb88                 | __system__stat
2bb88     04 4A 05 F6 | 	mov	COUNT_, #4
2bb8c     A8 00 A0 FD | 	call	#pushregs_
2bb90     0A 27 02 F6 | 	mov	local01, arg02
2bb94     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2bb98     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2bb9c     09 15 02 F6 | 	mov	arg02, arg01
2bba0     14 13 02 F6 | 	mov	arg01, local02
2bba4     00 16 06 F6 | 	mov	arg03, #0
2bba8     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2bbac     54 B5 BF FD | 	call	#__system____getvfsforfile
2bbb0     FD 2A 0A F6 | 	mov	local03, result1 wz
2bbb4     10 00 90 AD |  if_e	jmp	#LR__4010
2bbb8     34 2A 06 F1 | 	add	local03, #52
2bbbc     15 17 0A FB | 	rdlong	arg03, local03 wz
2bbc0     34 2A 86 F1 | 	sub	local03, #52
2bbc4     14 00 90 5D |  if_ne	jmp	#LR__4011
2bbc8                 | LR__4010
2bbc8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bbcc     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2bbd0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bbd4     01 FA 65 F6 | 	neg	result1, #1
2bbd8     68 00 90 FD | 	jmp	#LR__4012
2bbdc                 | LR__4011
2bbdc     13 13 02 F6 | 	mov	arg01, local01
2bbe0     00 14 06 F6 | 	mov	arg02, #0
2bbe4     30 16 06 F6 | 	mov	arg03, #48
2bbe8     09 2D 02 F6 | 	mov	local04, arg01
2bbec     98 00 A0 FD | 	call	#\builtin_bytefill_
2bbf0     16 FB 01 F6 | 	mov	result1, local04
2bbf4     14 13 CA FA | 	rdbyte	arg01, local02 wz
2bbf8     08 26 06 A1 |  if_e	add	local01, #8
2bbfc     08 00 80 AF 
2bc00     13 FF 6B AC |  if_e	wrlong	##4607, local01
2bc04     00 FA 05 A6 |  if_e	mov	result1, #0
2bc08     38 00 90 AD |  if_e	jmp	#LR__4012
2bc0c     34 2A 06 F1 | 	add	local03, #52
2bc10     15 2B 02 FB | 	rdlong	local03, local03
2bc14     15 2D 02 F6 | 	mov	local04, local03
2bc18     13 2A 46 F7 | 	zerox	local03, #19
2bc1c     14 2C 46 F0 | 	shr	local04, #20
2bc20     02 2C 66 F0 | 	shl	local04, #2
2bc24     ED 2C 02 F1 | 	add	local04, __methods__
2bc28     16 2D 02 FB | 	rdlong	local04, local04
2bc2c     14 13 02 F6 | 	mov	arg01, local02
2bc30     13 15 02 F6 | 	mov	arg02, local01
2bc34     F2 28 02 F6 | 	mov	local02, objptr
2bc38     15 E5 01 F6 | 	mov	objptr, local03
2bc3c     2D 2C 62 FD | 	call	local04
2bc40     14 E5 01 F6 | 	mov	objptr, local02
2bc44                 | LR__4012
2bc44     A7 F0 03 F6 | 	mov	ptra, fp
2bc48     B2 00 A0 FD | 	call	#popregs_
2bc4c                 | __system__stat_ret
2bc4c     2D 00 64 FD | 	ret
2bc50                 | 
2bc50                 | __system__write
2bc50     0A 12 16 F2 | 	cmp	arg01, #10 wc
2bc54     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2bc58     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2bc5c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2bc60     01 FA 65 36 |  if_ae	neg	result1, #1
2bc64     20 00 90 3D |  if_ae	jmp	#LR__4020
2bc68     34 12 06 FD | 	qmul	arg01, #52
2bc6c     02 00 00 FF 
2bc70     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2bc74     18 12 62 FD | 	getqx	arg01
2bc78     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2bc7c     02 00 00 FF 
2bc80     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2bc84     0C 10 B0 FD | 	call	#__system___vfswrite
2bc88                 | LR__4020
2bc88                 | __system__write_ret
2bc88     2D 00 64 FD | 	ret
2bc8c                 | 
2bc8c                 | __system__read
2bc8c     0A 12 16 F2 | 	cmp	arg01, #10 wc
2bc90     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2bc94     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2bc98     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2bc9c     01 FA 65 36 |  if_ae	neg	result1, #1
2bca0     20 00 90 3D |  if_ae	jmp	#LR__4030
2bca4     34 12 06 FD | 	qmul	arg01, #52
2bca8     02 00 00 FF 
2bcac     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2bcb0     18 12 62 FD | 	getqx	arg01
2bcb4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2bcb8     02 00 00 FF 
2bcbc     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2bcc0     98 11 B0 FD | 	call	#__system___vfsread
2bcc4                 | LR__4030
2bcc4                 | __system__read_ret
2bcc4     2D 00 64 FD | 	ret
2bcc8                 | 
2bcc8                 | __system__close
2bcc8     0A 12 16 F2 | 	cmp	arg01, #10 wc
2bccc     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2bcd0     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2bcd4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2bcd8     01 FA 65 36 |  if_ae	neg	result1, #1
2bcdc     20 00 90 3D |  if_ae	jmp	#LR__4040
2bce0     34 12 06 FD | 	qmul	arg01, #52
2bce4     02 00 00 FF 
2bce8     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2bcec     18 12 62 FD | 	getqx	arg01
2bcf0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2bcf4     02 00 00 FF 
2bcf8     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2bcfc     10 F9 BF FD | 	call	#__system___closeraw
2bd00                 | LR__4040
2bd00                 | __system__close_ret
2bd00     2D 00 64 FD | 	ret
2bd04                 | 
2bd04                 | __system__lseek
2bd04     06 4A 05 F6 | 	mov	COUNT_, #6
2bd08     A8 00 A0 FD | 	call	#pushregs_
2bd0c     0A 12 16 F2 | 	cmp	arg01, #10 wc
2bd10     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2bd14     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2bd18     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2bd1c     01 FA 65 36 |  if_ae	neg	result1, #1
2bd20     C4 00 90 3D |  if_ae	jmp	#LR__4051
2bd24     34 12 06 FD | 	qmul	arg01, #52
2bd28     02 00 00 FF 
2bd2c     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2bd30     18 26 62 FD | 	getqx	local01
2bd34     F3 26 02 F1 | 	add	local01, ptr___system__dat__
2bd38     30 26 06 F1 | 	add	local01, #48
2bd3c     13 13 0A FB | 	rdlong	arg01, local01 wz
2bd40     30 26 86 F1 | 	sub	local01, #48
2bd44     02 00 00 FF 
2bd48     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2bd4c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bd50     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2bd54     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bd58     01 FA 65 A6 |  if_e	neg	result1, #1
2bd5c     88 00 90 AD |  if_e	jmp	#LR__4051
2bd60     08 26 06 F1 | 	add	local01, #8
2bd64     13 29 02 FB | 	rdlong	local02, local01
2bd68     08 26 86 F1 | 	sub	local01, #8
2bd6c     40 28 CE F7 | 	test	local02, #64 wz
2bd70     08 26 06 51 |  if_ne	add	local01, #8
2bd74     13 29 02 5B |  if_ne	rdlong	local02, local01
2bd78     80 28 46 55 |  if_ne	or	local02, #128
2bd7c     13 29 62 5C |  if_ne	wrlong	local02, local01
2bd80     08 26 86 51 |  if_ne	sub	local01, #8
2bd84     30 26 06 F1 | 	add	local01, #48
2bd88     13 2B 02 FB | 	rdlong	local03, local01
2bd8c     15 2D 02 F6 | 	mov	local04, local03
2bd90     30 26 86 F1 | 	sub	local01, #48
2bd94     13 2C 46 F7 | 	zerox	local04, #19
2bd98     14 2A 46 F0 | 	shr	local03, #20
2bd9c     02 2A 66 F0 | 	shl	local03, #2
2bda0     ED 2A 02 F1 | 	add	local03, __methods__
2bda4     15 2B 02 FB | 	rdlong	local03, local03
2bda8     13 13 02 F6 | 	mov	arg01, local01
2bdac     F2 2E 02 F6 | 	mov	local05, objptr
2bdb0     16 E5 01 F6 | 	mov	objptr, local04
2bdb4     2D 2A 62 FD | 	call	local03
2bdb8     17 E5 01 F6 | 	mov	objptr, local05
2bdbc     FD 30 02 F6 | 	mov	local06, result1
2bdc0     00 30 56 F2 | 	cmps	local06, #0 wc
2bdc4     1C 00 90 3D |  if_ae	jmp	#LR__4050
2bdc8     18 13 6A F6 | 	neg	arg01, local06 wz
2bdcc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bdd0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2bdd4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bdd8     01 FA 65 56 |  if_ne	neg	result1, #1
2bddc     00 FA 05 A6 |  if_e	mov	result1, #0
2bde0     04 00 90 FD | 	jmp	#LR__4051
2bde4                 | LR__4050
2bde4     18 FB 01 F6 | 	mov	result1, local06
2bde8                 | LR__4051
2bde8     A7 F0 03 F6 | 	mov	ptra, fp
2bdec     B2 00 A0 FD | 	call	#popregs_
2bdf0                 | __system__lseek_ret
2bdf0     2D 00 64 FD | 	ret
2bdf4                 | 
2bdf4                 | __system___ioctl
2bdf4     03 4A 05 F6 | 	mov	COUNT_, #3
2bdf8     A8 00 A0 FD | 	call	#pushregs_
2bdfc     00 12 4E F2 | 	cmps	arg01, #0 wz
2be00     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2be04     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2be08     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2be0c     01 FA 65 A6 |  if_e	neg	result1, #1
2be10     5C 00 90 AD |  if_e	jmp	#LR__4061
2be14     28 12 06 F1 | 	add	arg01, #40
2be18     09 27 02 FB | 	rdlong	local01, arg01
2be1c     13 29 02 F6 | 	mov	local02, local01
2be20     28 12 86 F1 | 	sub	arg01, #40
2be24     13 28 46 F7 | 	zerox	local02, #19
2be28     14 26 46 F0 | 	shr	local01, #20
2be2c     02 26 66 F0 | 	shl	local01, #2
2be30     ED 26 02 F1 | 	add	local01, __methods__
2be34     13 27 02 FB | 	rdlong	local01, local01
2be38     F2 2A 02 F6 | 	mov	local03, objptr
2be3c     14 E5 01 F6 | 	mov	objptr, local02
2be40     2D 26 62 FD | 	call	local01
2be44     15 E5 01 F6 | 	mov	objptr, local03
2be48     FD 12 0A F6 | 	mov	arg01, result1 wz
2be4c     1C 00 90 AD |  if_e	jmp	#LR__4060
2be50     00 12 4E F2 | 	cmps	arg01, #0 wz
2be54     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2be58     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2be5c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2be60     01 FA 65 56 |  if_ne	neg	result1, #1
2be64     00 FA 05 A6 |  if_e	mov	result1, #0
2be68     04 00 90 FD | 	jmp	#LR__4061
2be6c                 | LR__4060
2be6c     00 FA 05 F6 | 	mov	result1, #0
2be70                 | LR__4061
2be70     A7 F0 03 F6 | 	mov	ptra, fp
2be74     B2 00 A0 FD | 	call	#popregs_
2be78                 | __system___ioctl_ret
2be78     2D 00 64 FD | 	ret
2be7c                 | 
2be7c                 | __system___isatty
2be7c     00 4A 05 F6 | 	mov	COUNT_, #0
2be80     A8 00 A0 FD | 	call	#pushregs_
2be84     0C F0 07 F1 | 	add	ptra, #12
2be88     04 4E 05 F1 | 	add	fp, #4
2be8c     A7 12 62 FC | 	wrlong	arg01, fp
2be90     04 4E 05 F1 | 	add	fp, #4
2be94     A7 16 02 F6 | 	mov	arg03, fp
2be98     08 4E 85 F1 | 	sub	fp, #8
2be9c     00 15 06 F6 | 	mov	arg02, #256
2bea0     50 FF BF FD | 	call	#__system___ioctl
2bea4     00 FA 0D F2 | 	cmp	result1, #0 wz
2bea8     01 FA 05 A6 |  if_e	mov	result1, #1
2beac     00 FA 05 56 |  if_ne	mov	result1, #0
2beb0     A7 F0 03 F6 | 	mov	ptra, fp
2beb4     B2 00 A0 FD | 	call	#popregs_
2beb8                 | __system___isatty_ret
2beb8     2D 00 64 FD | 	ret
2bebc                 | 
2bebc                 | __system____getftab
2bebc     0A 12 16 F2 | 	cmp	arg01, #10 wc
2bec0     34 12 06 CD |  if_b	qmul	arg01, #52
2bec4     00 FA 05 36 |  if_ae	mov	result1, #0
2bec8     02 00 00 CF 
2becc     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
2bed0     18 FA 61 CD |  if_b	getqx	result1
2bed4     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2bed8     02 00 00 CF 
2bedc     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
2bee0                 | __system____getftab_ret
2bee0     2D 00 64 FD | 	ret
2bee4                 | 
2bee4                 | __system__strncpy
2bee4     09 01 02 F6 | 	mov	_var01, arg01
2bee8                 | LR__4070
2bee8     01 16 86 F1 | 	sub	arg03, #1
2beec     00 16 56 F2 | 	cmps	arg03, #0 wc
2bef0     18 00 90 CD |  if_b	jmp	#LR__4071
2bef4     0A FB C1 FA | 	rdbyte	result1, arg02
2bef8     00 FB 41 FC | 	wrbyte	result1, _var01
2befc     01 14 06 F1 | 	add	arg02, #1
2bf00     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2bf04     01 00 06 F1 | 	add	_var01, #1
2bf08     DC FF 9F 5D |  if_ne	jmp	#LR__4070
2bf0c                 | LR__4071
2bf0c     97 0C 48 FB | 	callpa	#(@LR__4073-@LR__4072)>>2,fcache_load_ptr_
2bf10                 | LR__4072
2bf10     01 16 86 F1 | 	sub	arg03, #1
2bf14     00 16 56 F2 | 	cmps	arg03, #0 wc
2bf18     00 03 02 36 |  if_ae	mov	_var02, _var01
2bf1c     01 00 06 31 |  if_ae	add	_var01, #1
2bf20     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2bf24     E8 FF 9F 3D |  if_ae	jmp	#LR__4072
2bf28                 | LR__4073
2bf28     09 FB 01 F6 | 	mov	result1, arg01
2bf2c                 | __system__strncpy_ret
2bf2c     2D 00 64 FD | 	ret
2bf30                 | 
2bf30                 | __system__strncat
2bf30     00 14 4E F2 | 	cmps	arg02, #0 wz
2bf34     50 00 90 AD |  if_e	jmp	#LR__4084
2bf38     01 16 16 F2 | 	cmp	arg03, #1 wc
2bf3c     48 00 90 CD |  if_b	jmp	#LR__4084
2bf40     09 01 02 F6 | 	mov	_var01, arg01
2bf44     97 1E 48 FB | 	callpa	#(@LR__4082-@LR__4080)>>2,fcache_load_ptr_
2bf48                 | LR__4080
2bf48     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2bf4c     01 00 06 51 |  if_ne	add	_var01, #1
2bf50     F4 FF 9F 5D |  if_ne	jmp	#LR__4080
2bf54     0B 03 02 F6 | 	mov	_var02, arg03
2bf58                 | LR__4081
2bf58     0A 05 C2 FA | 	rdbyte	_var03, arg02
2bf5c     02 07 02 F6 | 	mov	_var04, _var03
2bf60     07 06 4E F7 | 	zerox	_var04, #7 wz
2bf64     01 14 06 F1 | 	add	arg02, #1
2bf68     18 00 90 AD |  if_e	jmp	#LR__4083
2bf6c     01 02 86 F1 | 	sub	_var02, #1
2bf70     00 02 56 F2 | 	cmps	_var02, #0 wc
2bf74     00 07 02 36 |  if_ae	mov	_var04, _var01
2bf78     01 00 06 31 |  if_ae	add	_var01, #1
2bf7c     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
2bf80     D4 FF 9F 3D |  if_ae	jmp	#LR__4081
2bf84                 | LR__4082
2bf84                 | LR__4083
2bf84     00 01 48 FC | 	wrbyte	#0, _var01
2bf88                 | LR__4084
2bf88     09 FB 01 F6 | 	mov	result1, arg01
2bf8c                 | __system__strncat_ret
2bf8c     2D 00 64 FD | 	ret
2bf90                 | 
2bf90                 | __system__strncmp
2bf90     09 01 0A F6 | 	mov	_var01, arg01 wz
2bf94     14 00 90 5D |  if_ne	jmp	#LR__4090
2bf98     00 14 0E F2 | 	cmp	arg02, #0 wz
2bf9c     01 02 66 56 |  if_ne	neg	_var02, #1
2bfa0     00 02 06 A6 |  if_e	mov	_var02, #0
2bfa4     01 FB 01 F6 | 	mov	result1, _var02
2bfa8     74 00 90 FD | 	jmp	#__system__strncmp_ret
2bfac                 | LR__4090
2bfac     00 14 0E F2 | 	cmp	arg02, #0 wz
2bfb0     01 FA 05 A6 |  if_e	mov	result1, #1
2bfb4     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2bfb8     0B 05 02 F6 | 	mov	_var03, arg03
2bfbc     97 16 48 FB | 	callpa	#(@LR__4092-@LR__4091)>>2,fcache_load_ptr_
2bfc0                 | LR__4091
2bfc0     00 07 C2 FA | 	rdbyte	_var04, _var01
2bfc4     0A 09 02 F6 | 	mov	_var05, arg02
2bfc8     04 0B C2 FA | 	rdbyte	_var06, _var05
2bfcc     01 04 86 F1 | 	sub	_var03, #1
2bfd0     00 04 56 F2 | 	cmps	_var03, #0 wc
2bfd4     01 00 06 F1 | 	add	_var01, #1
2bfd8     01 14 06 F1 | 	add	arg02, #1
2bfdc     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2bfe0     08 00 90 2D |  if_nc_and_z	jmp	#LR__4093
2bfe4     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2bfe8     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4091
2bfec                 | LR__4092
2bfec                 | LR__4093
2bfec     00 04 56 F2 | 	cmps	_var03, #0 wc
2bff0     00 FA 05 C6 |  if_b	mov	result1, #0
2bff4     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2bff8     05 07 0A F2 | 	cmp	_var04, _var06 wz
2bffc     00 FA 05 A6 |  if_e	mov	result1, #0
2c000     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2c004     00 06 0E F2 | 	cmp	_var04, #0 wz
2c008     01 FA 65 A6 |  if_e	neg	result1, #1
2c00c     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2c010     00 0A 0E F2 | 	cmp	_var06, #0 wz
2c014     01 FA 05 A6 |  if_e	mov	result1, #1
2c018     03 FB 01 56 |  if_ne	mov	result1, _var04
2c01c     05 FB 81 51 |  if_ne	sub	result1, _var06
2c020                 | __system__strncmp_ret
2c020     2D 00 64 FD | 	ret
2c024                 | 
2c024                 | __system____root_opendir
2c024     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2c028     04 12 06 F1 | 	add	arg01, #4
2c02c     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
2c030     00 FA 05 F6 | 	mov	result1, #0
2c034     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2c038                 | __system____root_opendir_ret
2c038     2D 00 64 FD | 	ret
2c03c                 | 
2c03c                 | __system____root_readdir
2c03c     03 4A 05 F6 | 	mov	COUNT_, #3
2c040     A8 00 A0 FD | 	call	#pushregs_
2c044     09 27 02 F6 | 	mov	local01, arg01
2c048     0A 29 02 F6 | 	mov	local02, arg02
2c04c     04 26 06 F1 | 	add	local01, #4
2c050     13 2B 02 FB | 	rdlong	local03, local01
2c054     04 26 86 F1 | 	sub	local01, #4
2c058                 | LR__4100
2c058     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2c05c     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
2c060     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2c064     01 FA 65 A6 |  if_e	neg	result1, #1
2c068     48 00 90 AD |  if_e	jmp	#LR__4101
2c06c     15 17 0A FB | 	rdlong	arg03, local03 wz
2c070     04 2A 06 A1 |  if_e	add	local03, #4
2c074     E0 FF 9F AD |  if_e	jmp	#LR__4100
2c078     15 15 02 FB | 	rdlong	arg02, local03
2c07c     01 14 06 F1 | 	add	arg02, #1
2c080     14 13 02 F6 | 	mov	arg01, local02
2c084     40 16 06 F6 | 	mov	arg03, #64
2c088     58 FE BF FD | 	call	#__system__strncpy
2c08c     50 28 06 F1 | 	add	local02, #80
2c090     14 03 48 FC | 	wrbyte	#1, local02
2c094     08 28 86 F1 | 	sub	local02, #8
2c098     14 01 68 FC | 	wrlong	#0, local02
2c09c     04 28 06 F1 | 	add	local02, #4
2c0a0     14 01 68 FC | 	wrlong	#0, local02
2c0a4     04 2A 06 F1 | 	add	local03, #4
2c0a8     04 26 06 F1 | 	add	local01, #4
2c0ac     13 2B 62 FC | 	wrlong	local03, local01
2c0b0     00 FA 05 F6 | 	mov	result1, #0
2c0b4                 | LR__4101
2c0b4     A7 F0 03 F6 | 	mov	ptra, fp
2c0b8     B2 00 A0 FD | 	call	#popregs_
2c0bc                 | __system____root_readdir_ret
2c0bc     2D 00 64 FD | 	ret
2c0c0                 | 
2c0c0                 | __system____root_closedir
2c0c0     00 FA 05 F6 | 	mov	result1, #0
2c0c4                 | __system____root_closedir_ret
2c0c4     2D 00 64 FD | 	ret
2c0c8                 | 
2c0c8                 | __system____root_stat
2c0c8     0A 01 02 F6 | 	mov	_var01, arg02
2c0cc     00 13 02 F6 | 	mov	arg01, _var01
2c0d0     00 14 06 F6 | 	mov	arg02, #0
2c0d4     30 16 06 F6 | 	mov	arg03, #48
2c0d8     98 00 A0 FD | 	call	#\builtin_bytefill_
2c0dc     08 00 06 F1 | 	add	_var01, #8
2c0e0     08 00 80 FF 
2c0e4     00 FF 6B FC | 	wrlong	##4607, _var01
2c0e8     00 FA 05 F6 | 	mov	result1, #0
2c0ec                 | __system____root_stat_ret
2c0ec     2D 00 64 FD | 	ret
2c0f0                 | 
2c0f0                 | __system___normalizeName
2c0f0     00 00 06 F6 | 	mov	_var01, #0
2c0f4     09 03 02 F6 | 	mov	_var02, arg01
2c0f8     01 05 02 F6 | 	mov	_var03, _var02
2c0fc                 | LR__4110
2c0fc     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2c100     5C 01 90 AD |  if_e	jmp	#LR__4129
2c104     00 00 0E F2 | 	cmp	_var01, #0 wz
2c108     02 07 02 56 |  if_ne	mov	_var04, _var03
2c10c     01 04 06 51 |  if_ne	add	_var03, #1
2c110     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2c114     00 00 06 56 |  if_ne	mov	_var01, #0
2c118     01 07 C2 FA | 	rdbyte	_var04, _var02
2c11c     2E 06 0E F2 | 	cmp	_var04, #46 wz
2c120     D8 00 90 5D |  if_ne	jmp	#LR__4122
2c124     01 02 06 F1 | 	add	_var02, #1
2c128     01 07 C2 FA | 	rdbyte	_var04, _var02
2c12c     01 02 86 F1 | 	sub	_var02, #1
2c130     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c134     18 00 90 AD |  if_e	jmp	#LR__4111
2c138     01 02 06 F1 | 	add	_var02, #1
2c13c     01 09 C2 FA | 	rdbyte	_var05, _var02
2c140     01 02 86 F1 | 	sub	_var02, #1
2c144     04 0B 02 F6 | 	mov	_var06, _var05
2c148     07 0A 4E F7 | 	zerox	_var06, #7 wz
2c14c     10 00 90 5D |  if_ne	jmp	#LR__4112
2c150                 | LR__4111
2c150     01 0D 02 F6 | 	mov	_var07, _var02
2c154     01 0C 06 F1 | 	add	_var07, #1
2c158     06 03 02 F6 | 	mov	_var02, _var07
2c15c     E0 00 90 FD | 	jmp	#LR__4126
2c160                 | LR__4112
2c160     01 02 06 F1 | 	add	_var02, #1
2c164     01 0D C2 FA | 	rdbyte	_var07, _var02
2c168     01 02 86 F1 | 	sub	_var02, #1
2c16c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2c170     2E 06 0E F2 | 	cmp	_var04, #46 wz
2c174     84 00 90 5D |  if_ne	jmp	#LR__4121
2c178     02 02 06 F1 | 	add	_var02, #2
2c17c     01 0D C2 FA | 	rdbyte	_var07, _var02
2c180     02 02 86 F1 | 	sub	_var02, #2
2c184     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2c188     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c18c     18 00 90 AD |  if_e	jmp	#LR__4113
2c190     02 02 06 F1 | 	add	_var02, #2
2c194     01 09 C2 FA | 	rdbyte	_var05, _var02
2c198     02 02 86 F1 | 	sub	_var02, #2
2c19c     04 0B 02 F6 | 	mov	_var06, _var05
2c1a0     07 0A 4E F7 | 	zerox	_var06, #7 wz
2c1a4     54 00 90 5D |  if_ne	jmp	#LR__4120
2c1a8                 | LR__4113
2c1a8     02 02 06 F1 | 	add	_var02, #2
2c1ac     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2c1b0     40 00 90 ED |  if_be	jmp	#LR__4119
2c1b4     02 0F 02 F6 | 	mov	_var08, _var03
2c1b8     01 0E 86 F1 | 	sub	_var08, #1
2c1bc                 | LR__4114
2c1bc     07 07 C2 FA | 	rdbyte	_var04, _var08
2c1c0     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c1c4     0C 00 90 5D |  if_ne	jmp	#LR__4115
2c1c8     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2c1cc     01 0E 86 11 |  if_a	sub	_var08, #1
2c1d0     E8 FF 9F 1D |  if_a	jmp	#LR__4114
2c1d4                 | LR__4115
2c1d4     97 0C 48 FB | 	callpa	#(@LR__4117-@LR__4116)>>2,fcache_load_ptr_
2c1d8                 | LR__4116
2c1d8     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2c1dc     10 00 90 ED |  if_be	jmp	#LR__4118
2c1e0     07 07 C2 FA | 	rdbyte	_var04, _var08
2c1e4     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c1e8     01 0E 86 51 |  if_ne	sub	_var08, #1
2c1ec     E8 FF 9F 5D |  if_ne	jmp	#LR__4116
2c1f0                 | LR__4117
2c1f0                 | LR__4118
2c1f0     07 05 02 F6 | 	mov	_var03, _var08
2c1f4                 | LR__4119
2c1f4     01 00 06 F6 | 	mov	_var01, #1
2c1f8     44 00 90 FD | 	jmp	#LR__4126
2c1fc                 | LR__4120
2c1fc                 | LR__4121
2c1fc                 | LR__4122
2c1fc     97 18 48 FB | 	callpa	#(@LR__4124-@LR__4123)>>2,fcache_load_ptr_
2c200                 | LR__4123
2c200     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2c204     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2c208     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2c20c     20 00 90 AD |  if_e	jmp	#LR__4125
2c210     01 0B 02 F6 | 	mov	_var06, _var02
2c214     01 09 02 F6 | 	mov	_var05, _var02
2c218     01 08 06 F1 | 	add	_var05, #1
2c21c     05 11 C2 FA | 	rdbyte	_var09, _var06
2c220     04 03 02 F6 | 	mov	_var02, _var05
2c224     02 11 42 FC | 	wrbyte	_var09, _var03
2c228     01 04 06 F1 | 	add	_var03, #1
2c22c     D0 FF 9F FD | 	jmp	#LR__4123
2c230                 | LR__4124
2c230                 | LR__4125
2c230     01 07 C2 FA | 	rdbyte	_var04, _var02
2c234     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c238     C0 FE 9F 5D |  if_ne	jmp	#LR__4110
2c23c     01 00 06 F6 | 	mov	_var01, #1
2c240                 | LR__4126
2c240     97 0C 48 FB | 	callpa	#(@LR__4128-@LR__4127)>>2,fcache_load_ptr_
2c244                 | LR__4127
2c244     01 07 C2 FA | 	rdbyte	_var04, _var02
2c248     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c24c     01 0D 02 A6 |  if_e	mov	_var07, _var02
2c250     01 0C 06 A1 |  if_e	add	_var07, #1
2c254     06 03 02 A6 |  if_e	mov	_var02, _var07
2c258     E8 FF 9F AD |  if_e	jmp	#LR__4127
2c25c                 | LR__4128
2c25c     9C FE 9F FD | 	jmp	#LR__4110
2c260                 | LR__4129
2c260     02 01 48 FC | 	wrbyte	#0, _var03
2c264                 | __system___normalizeName_ret
2c264     2D 00 64 FD | 	ret
2c268                 | 
2c268                 | __system___strrev
2c268     09 01 CA FA | 	rdbyte	_var01, arg01 wz
2c26c     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
2c270     09 03 02 F6 | 	mov	_var02, arg01
2c274     97 1A 48 FB | 	callpa	#(@LR__4132-@LR__4130)>>2,fcache_load_ptr_
2c278                 | LR__4130
2c278     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2c27c     01 02 06 51 |  if_ne	add	_var02, #1
2c280     F4 FF 9F 5D |  if_ne	jmp	#LR__4130
2c284     01 02 86 F1 | 	sub	_var02, #1
2c288                 | LR__4131
2c288     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2c28c     1C 00 90 ED |  if_be	jmp	#LR__4133
2c290     09 01 C2 FA | 	rdbyte	_var01, arg01
2c294     01 05 C2 FA | 	rdbyte	_var03, _var02
2c298     09 05 42 FC | 	wrbyte	_var03, arg01
2c29c     01 01 42 FC | 	wrbyte	_var01, _var02
2c2a0     01 12 06 F1 | 	add	arg01, #1
2c2a4     01 02 86 F1 | 	sub	_var02, #1
2c2a8     DC FF 9F FD | 	jmp	#LR__4131
2c2ac                 | LR__4132
2c2ac                 | LR__4133
2c2ac                 | __system___strrev_ret
2c2ac     2D 00 64 FD | 	ret
2c2b0                 | 
2c2b0                 | __system___fmtpad
2c2b0     06 4A 05 F6 | 	mov	COUNT_, #6
2c2b4     A8 00 A0 FD | 	call	#pushregs_
2c2b8     09 27 02 F6 | 	mov	local01, arg01
2c2bc     0A 29 02 F6 | 	mov	local02, arg02
2c2c0     0B 2B 02 F6 | 	mov	local03, arg03
2c2c4     14 13 EA F8 | 	getbyte	arg01, local02, #1
2c2c8     16 28 46 F0 | 	shr	local02, #22
2c2cc     03 28 0E F5 | 	and	local02, #3 wz
2c2d0     00 2C 06 F6 | 	mov	local04, #0
2c2d4     01 28 06 A6 |  if_e	mov	local02, #1
2c2d8     0C 29 CA F7 | 	test	local02, arg04 wz
2c2dc     00 FA 05 A6 |  if_e	mov	result1, #0
2c2e0     88 00 90 AD |  if_e	jmp	#LR__4143
2c2e4     09 2B C2 F2 | 	subr	local03, arg01
2c2e8     01 2A 56 F2 | 	cmps	local03, #1 wc
2c2ec     00 FA 05 C6 |  if_b	mov	result1, #0
2c2f0     78 00 90 CD |  if_b	jmp	#LR__4143
2c2f4     03 28 0E F2 | 	cmp	local02, #3 wz
2c2f8     18 00 90 5D |  if_ne	jmp	#LR__4140
2c2fc     01 18 0E F2 | 	cmp	arg04, #1 wz
2c300     6E 28 62 FD | 	wrz	local02
2c304     14 2B 02 F1 | 	add	local03, local02
2c308     15 2B 52 F6 | 	abs	local03, local03 wc
2c30c     01 2A 46 F0 | 	shr	local03, #1
2c310     15 2B 82 F6 | 	negc	local03, local03
2c314                 | LR__4140
2c314     01 2A 56 F2 | 	cmps	local03, #1 wc
2c318     4C 00 90 CD |  if_b	jmp	#LR__4142
2c31c     15 2F 02 F6 | 	mov	local05, local03
2c320                 | LR__4141
2c320     13 29 02 F6 | 	mov	local02, local01
2c324     13 31 02 F6 | 	mov	local06, local01
2c328     13 28 46 F7 | 	zerox	local02, #19
2c32c     14 30 46 F0 | 	shr	local06, #20
2c330     02 30 66 F0 | 	shl	local06, #2
2c334     ED 30 02 F1 | 	add	local06, __methods__
2c338     18 31 02 FB | 	rdlong	local06, local06
2c33c     20 12 06 F6 | 	mov	arg01, #32
2c340     F2 2A 02 F6 | 	mov	local03, objptr
2c344     14 E5 01 F6 | 	mov	objptr, local02
2c348     2D 30 62 FD | 	call	local06
2c34c     15 E5 01 F6 | 	mov	objptr, local03
2c350     FD 30 02 F6 | 	mov	local06, result1
2c354     00 30 56 F2 | 	cmps	local06, #0 wc
2c358     18 FB 01 C6 |  if_b	mov	result1, local06
2c35c     0C 00 90 CD |  if_b	jmp	#LR__4143
2c360     18 2D 02 F1 | 	add	local04, local06
2c364     EE 2F 6E FB | 	djnz	local05, #LR__4141
2c368                 | LR__4142
2c368     16 FB 01 F6 | 	mov	result1, local04
2c36c                 | LR__4143
2c36c     A7 F0 03 F6 | 	mov	ptra, fp
2c370     B2 00 A0 FD | 	call	#popregs_
2c374                 | __system___fmtpad_ret
2c374     2D 00 64 FD | 	ret
2c378                 | 
2c378                 | __system___uitoa
2c378     04 4A 05 F6 | 	mov	COUNT_, #4
2c37c     A8 00 A0 FD | 	call	#pushregs_
2c380     09 27 02 F6 | 	mov	local01, arg01
2c384     00 1A 4E F2 | 	cmps	arg05, #0 wz
2c388     13 1B 02 F6 | 	mov	arg05, local01
2c38c     00 28 06 F6 | 	mov	local02, #0
2c390     37 2A 06 56 |  if_ne	mov	local03, #55
2c394     57 2A 06 A6 |  if_e	mov	local03, #87
2c398                 | LR__4150
2c398     0B 15 12 FD | 	qdiv	arg02, arg03
2c39c     19 2C 62 FD | 	getqy	local04
2c3a0     0B 15 12 FD | 	qdiv	arg02, arg03
2c3a4     0A 2C 16 F2 | 	cmp	local04, #10 wc
2c3a8     30 2C 06 C1 |  if_b	add	local04, #48
2c3ac     15 2D 02 31 |  if_ae	add	local04, local03
2c3b0     0D 2D 42 FC | 	wrbyte	local04, arg05
2c3b4     01 1A 06 F1 | 	add	arg05, #1
2c3b8     01 28 06 F1 | 	add	local02, #1
2c3bc     18 14 62 FD | 	getqx	arg02
2c3c0     00 14 0E F2 | 	cmp	arg02, #0 wz
2c3c4     D0 FF 9F 5D |  if_ne	jmp	#LR__4150
2c3c8     0C 29 12 F2 | 	cmp	local02, arg04 wc
2c3cc     C8 FF 9F CD |  if_b	jmp	#LR__4150
2c3d0     0D 01 48 FC | 	wrbyte	#0, arg05
2c3d4     13 13 02 F6 | 	mov	arg01, local01
2c3d8     8C FE BF FD | 	call	#__system___strrev
2c3dc     14 FB 01 F6 | 	mov	result1, local02
2c3e0     A7 F0 03 F6 | 	mov	ptra, fp
2c3e4     B2 00 A0 FD | 	call	#popregs_
2c3e8                 | __system___uitoa_ret
2c3e8     2D 00 64 FD | 	ret
2c3ec                 | 
2c3ec                 | __system__disassemble_0566
2c3ec     10 4A 05 F6 | 	mov	COUNT_, #16
2c3f0     A8 00 A0 FD | 	call	#pushregs_
2c3f4     09 27 02 F6 | 	mov	local01, arg01
2c3f8     0A 29 02 F6 | 	mov	local02, arg02
2c3fc     0B 2B 02 F6 | 	mov	local03, arg03
2c400     0C 2D 02 F6 | 	mov	local04, arg04
2c404     0D 2F 02 F6 | 	mov	local05, arg05
2c408     17 13 52 F6 | 	abs	arg01, local05 wc
2c40c     1F 30 C6 C9 |  if_b	decod	local06, #31
2c410     00 30 06 36 |  if_ae	mov	local06, #0
2c414     CC CF BF FD | 	call	#__system___float_fromuns
2c418     18 FB 61 F5 | 	xor	result1, local06
2c41c     FD 32 02 F6 | 	mov	local07, result1
2c420     00 34 06 F6 | 	mov	local08, #0
2c424     13 13 02 F6 | 	mov	arg01, local01
2c428     00 14 06 F6 | 	mov	arg02, #0
2c42c     01 16 06 F6 | 	mov	arg03, #1
2c430     E8 D7 BF FD | 	call	#__system___float_cmp
2c434     00 FA 0D F2 | 	cmp	result1, #0 wz
2c438     00 36 06 A6 |  if_e	mov	local09, #0
2c43c     14 01 68 AC |  if_e	wrlong	#0, local02
2c440     15 37 62 AC |  if_e	wrlong	local09, local03
2c444     8C 01 90 AD |  if_e	jmp	#LR__4172
2c448     13 13 02 F6 | 	mov	arg01, local01
2c44c     BC DC BF FD | 	call	#__system____builtin_ilogb
2c450     FD 38 02 F6 | 	mov	local10, result1
2c454     0A 2E 0E F2 | 	cmp	local05, #10 wz
2c458     24 00 90 5D |  if_ne	jmp	#LR__4160
2c45c     1C 37 02 F6 | 	mov	local09, local10
2c460     01 36 66 F0 | 	shl	local09, #1
2c464     1C 37 02 F1 | 	add	local09, local10
2c468     1B 39 52 F6 | 	abs	local10, local09 wc
2c46c     0A 38 16 FD | 	qdiv	local10, #10
2c470     09 3A 06 F6 | 	mov	local11, #9
2c474     18 38 62 FD | 	getqx	local10
2c478     1C 39 82 F6 | 	negc	local10, local10
2c47c     04 00 90 FD | 	jmp	#LR__4161
2c480                 | LR__4160
2c480     18 3A 06 F6 | 	mov	local11, #24
2c484                 | LR__4161
2c484                 | LR__4162
2c484     08 34 56 F2 | 	cmps	local08, #8 wc
2c488     01 34 06 F1 | 	add	local08, #1
2c48c     60 00 90 3D |  if_ae	jmp	#LR__4163
2c490     00 C0 1F FF 
2c494     00 12 06 F6 | 	mov	arg01, ##1065353216
2c498     19 15 02 F6 | 	mov	arg02, local07
2c49c     1C 17 02 F6 | 	mov	arg03, local10
2c4a0     4C E3 BF FD | 	call	#__system___float_pow_n
2c4a4     FD 14 02 F6 | 	mov	arg02, result1
2c4a8     13 13 02 F6 | 	mov	arg01, local01
2c4ac     3C D5 BF FD | 	call	#__system___float_div
2c4b0     FD 3C 02 F6 | 	mov	local12, result1
2c4b4     1E 13 02 F6 | 	mov	arg01, local12
2c4b8     00 C0 1F FF 
2c4bc     00 14 06 F6 | 	mov	arg02, ##1065353216
2c4c0     01 16 06 F6 | 	mov	arg03, #1
2c4c4     54 D7 BF FD | 	call	#__system___float_cmp
2c4c8     00 FA 55 F2 | 	cmps	result1, #0 wc
2c4cc     01 38 86 C1 |  if_b	sub	local10, #1
2c4d0     B0 FF 9F CD |  if_b	jmp	#LR__4162
2c4d4     19 15 02 F6 | 	mov	arg02, local07
2c4d8     1E 13 02 F6 | 	mov	arg01, local12
2c4dc     01 16 66 F6 | 	neg	arg03, #1
2c4e0     38 D7 BF FD | 	call	#__system___float_cmp
2c4e4     00 FA 55 F2 | 	cmps	result1, #0 wc
2c4e8     01 38 06 31 |  if_ae	add	local10, #1
2c4ec     94 FF 9F 3D |  if_ae	jmp	#LR__4162
2c4f0                 | LR__4163
2c4f0     1E 13 02 F6 | 	mov	arg01, local12
2c4f4     14 DC BF FD | 	call	#__system____builtin_ilogb
2c4f8     FD 3E 02 F6 | 	mov	local13, result1
2c4fc     1E 41 02 F6 | 	mov	local14, local12
2c500     17 41 06 F4 | 	bitl	local14, #279
2c504     17 40 26 F4 | 	bith	local14, #23
2c508     1F 41 62 F0 | 	shl	local14, local13
2c50c     02 2E 0E F2 | 	cmp	local05, #2 wz
2c510     02 2C 66 A0 |  if_e	shl	local04, #2
2c514     00 42 06 F6 | 	mov	local15, #0
2c518     00 2C 56 F2 | 	cmps	local04, #0 wc
2c51c     10 00 90 3D |  if_ae	jmp	#LR__4164
2c520     1C 2D C2 F2 | 	subr	local04, local10
2c524     00 2C 56 F2 | 	cmps	local04, #0 wc
2c528     A0 00 90 CD |  if_b	jmp	#LR__4171
2c52c     04 00 90 FD | 	jmp	#LR__4165
2c530                 | LR__4164
2c530     01 2C 06 F1 | 	add	local04, #1
2c534                 | LR__4165
2c534     1D 2D 7A F3 | 	fles	local04, local11 wcz
2c538     01 44 06 F6 | 	mov	local16, #1
2c53c     97 22 48 FB | 	callpa	#(@LR__4167-@LR__4166)>>2,fcache_load_ptr_
2c540                 | LR__4166
2c540     00 40 00 FF 
2c544     00 42 16 F2 | 	cmp	local15, ##8388608 wc
2c548     38 00 90 3D |  if_ae	jmp	#LR__4168
2c54c     01 2C 56 F2 | 	cmps	local04, #1 wc
2c550     01 2C 86 F1 | 	sub	local04, #1
2c554     2C 00 90 CD |  if_b	jmp	#LR__4168
2c558     17 43 02 FD | 	qmul	local15, local05
2c55c     20 3F 02 F6 | 	mov	local13, local14
2c560     17 3E 46 F0 | 	shr	local13, #23
2c564     17 41 06 F4 | 	bitl	local14, #279
2c568     18 42 62 FD | 	getqx	local15
2c56c     17 45 02 FD | 	qmul	local16, local05
2c570     18 44 62 FD | 	getqx	local16
2c574     17 41 02 FD | 	qmul	local14, local05
2c578     1F 43 02 F1 | 	add	local15, local13
2c57c     18 40 62 FD | 	getqx	local14
2c580     BC FF 9F FD | 	jmp	#LR__4166
2c584                 | LR__4167
2c584                 | LR__4168
2c584     17 37 02 F6 | 	mov	local09, local05
2c588     17 36 66 F0 | 	shl	local09, #23
2c58c     1B 3F 52 F6 | 	abs	local13, local09 wc
2c590     01 3E 46 F0 | 	shr	local13, #1
2c594     1F 3F 82 F6 | 	negc	local13, local13
2c598     1F 41 1A F2 | 	cmp	local14, local13 wcz
2c59c     20 00 90 1D |  if_a	jmp	#LR__4169
2c5a0     17 2E 66 F0 | 	shl	local05, #23
2c5a4     17 3F 52 F6 | 	abs	local13, local05 wc
2c5a8     01 3E 46 F0 | 	shr	local13, #1
2c5ac     1F 3F 82 F6 | 	negc	local13, local13
2c5b0     1F 41 0A F2 | 	cmp	local14, local13 wz
2c5b4     14 00 90 5D |  if_ne	jmp	#LR__4170
2c5b8     01 42 CE F7 | 	test	local15, #1 wz
2c5bc     0C 00 90 AD |  if_e	jmp	#LR__4170
2c5c0                 | LR__4169
2c5c0     01 42 06 F1 | 	add	local15, #1
2c5c4     22 43 0A F2 | 	cmp	local15, local16 wz
2c5c8     01 38 06 A1 |  if_e	add	local10, #1
2c5cc                 | LR__4170
2c5cc                 | LR__4171
2c5cc     14 43 62 FC | 	wrlong	local15, local02
2c5d0     15 39 62 FC | 	wrlong	local10, local03
2c5d4                 | LR__4172
2c5d4     A7 F0 03 F6 | 	mov	ptra, fp
2c5d8     B2 00 A0 FD | 	call	#popregs_
2c5dc                 | __system__disassemble_0566_ret
2c5dc     2D 00 64 FD | 	ret
2c5e0                 | 
2c5e0                 | __system__emitsign_0568
2c5e0     00 FA 05 F6 | 	mov	result1, #0
2c5e4     00 14 0E F2 | 	cmp	arg02, #0 wz
2c5e8     09 01 02 56 |  if_ne	mov	_var01, arg01
2c5ec     01 12 06 51 |  if_ne	add	arg01, #1
2c5f0     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2c5f4     01 FA 05 56 |  if_ne	mov	result1, #1
2c5f8     00 16 0E F2 | 	cmp	arg03, #0 wz
2c5fc     09 61 48 5C |  if_ne	wrbyte	#48, arg01
2c600     01 12 06 51 |  if_ne	add	arg01, #1
2c604     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2c608     02 FA 05 51 |  if_ne	add	result1, #2
2c60c                 | __system__emitsign_0568_ret
2c60c     2D 00 64 FD | 	ret
2c610                 | 
2c610                 | __system___getiolock_0606
2c610     01 4A 05 F6 | 	mov	COUNT_, #1
2c614     A8 00 A0 FD | 	call	#pushregs_
2c618     A0 F8 BF FD | 	call	#__system____getftab
2c61c     FD 26 0A F6 | 	mov	local01, result1 wz
2c620     10 00 90 AD |  if_e	jmp	#LR__4180
2c624     08 26 06 F1 | 	add	local01, #8
2c628     13 FB 09 FB | 	rdlong	result1, local01 wz
2c62c     08 26 86 F1 | 	sub	local01, #8
2c630     18 00 90 5D |  if_ne	jmp	#LR__4181
2c634                 | LR__4180
2c634     01 00 00 FF 
2c638     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2c63c     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2c640     01 00 00 FF 
2c644     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
2c648     08 00 90 FD | 	jmp	#LR__4182
2c64c                 | LR__4181
2c64c     0C 26 06 F1 | 	add	local01, #12
2c650     13 FB 01 F6 | 	mov	result1, local01
2c654                 | LR__4182
2c654     A7 F0 03 F6 | 	mov	ptra, fp
2c658     B2 00 A0 FD | 	call	#popregs_
2c65c                 | __system___getiolock_0606_ret
2c65c     2D 00 64 FD | 	ret
2c660                 | 
2c660                 | __system___gettxfunc
2c660     01 4A 05 F6 | 	mov	COUNT_, #1
2c664     A8 00 A0 FD | 	call	#pushregs_
2c668     50 F8 BF FD | 	call	#__system____getftab
2c66c     FD 26 0A F6 | 	mov	local01, result1 wz
2c670     10 00 90 AD |  if_e	jmp	#LR__4190
2c674     08 26 06 F1 | 	add	local01, #8
2c678     13 15 0A FB | 	rdlong	arg02, local01 wz
2c67c     08 26 86 F1 | 	sub	local01, #8
2c680     08 00 90 5D |  if_ne	jmp	#LR__4191
2c684                 | LR__4190
2c684     00 FA 05 F6 | 	mov	result1, #0
2c688     0C 00 90 FD | 	jmp	#LR__4192
2c68c                 | LR__4191
2c68c     00 28 05 FF 
2c690     00 26 46 F5 | 	or	local01, ##173015040
2c694     13 FB 01 F6 | 	mov	result1, local01
2c698                 | LR__4192
2c698     A7 F0 03 F6 | 	mov	ptra, fp
2c69c     B2 00 A0 FD | 	call	#popregs_
2c6a0                 | __system___gettxfunc_ret
2c6a0     2D 00 64 FD | 	ret
2c6a4                 | 
2c6a4                 | __system___getrxfunc
2c6a4     01 4A 05 F6 | 	mov	COUNT_, #1
2c6a8     A8 00 A0 FD | 	call	#pushregs_
2c6ac     0C F8 BF FD | 	call	#__system____getftab
2c6b0     FD 26 0A F6 | 	mov	local01, result1 wz
2c6b4     10 00 90 AD |  if_e	jmp	#LR__4200
2c6b8     08 26 06 F1 | 	add	local01, #8
2c6bc     13 15 0A FB | 	rdlong	arg02, local01 wz
2c6c0     08 26 86 F1 | 	sub	local01, #8
2c6c4     08 00 90 5D |  if_ne	jmp	#LR__4201
2c6c8                 | LR__4200
2c6c8     00 FA 05 F6 | 	mov	result1, #0
2c6cc     0C 00 90 FD | 	jmp	#LR__4202
2c6d0                 | LR__4201
2c6d0     00 30 05 FF 
2c6d4     00 26 46 F5 | 	or	local01, ##174063616
2c6d8     13 FB 01 F6 | 	mov	result1, local01
2c6dc                 | LR__4202
2c6dc     A7 F0 03 F6 | 	mov	ptra, fp
2c6e0     B2 00 A0 FD | 	call	#popregs_
2c6e4                 | __system___getrxfunc_ret
2c6e4     2D 00 64 FD | 	ret
2c6e8                 | 
2c6e8                 | __system____ScanForChar
2c6e8     09 01 02 F6 | 	mov	_var01, arg01
2c6ec     09 03 02 F6 | 	mov	_var02, arg01
2c6f0     97 06 48 FB | 	callpa	#(@LR__4211-@LR__4210)>>2,fcache_load_ptr_
2c6f4                 | LR__4210
2c6f4     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2c6f8     01 02 06 51 |  if_ne	add	_var02, #1
2c6fc     F4 FF 9F 5D |  if_ne	jmp	#LR__4210
2c700                 | LR__4211
2c700     09 03 82 F1 | 	sub	_var02, arg01
2c704     01 FB 01 F6 | 	mov	result1, _var02
2c708     FD 12 0A F6 | 	mov	arg01, result1 wz
2c70c     00 FA 05 A6 |  if_e	mov	result1, #0
2c710     B8 00 90 AD |  if_e	jmp	#LR__4218
2c714     0A 05 02 F6 | 	mov	_var03, arg02
2c718     07 04 4E F7 | 	zerox	_var03, #7 wz
2c71c     00 FA 05 A6 |  if_e	mov	result1, #0
2c720     A8 00 90 AD |  if_e	jmp	#LR__4218
2c724     01 16 16 F2 | 	cmp	arg03, #1 wc
2c728     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2c72c     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2c730     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2c734     94 00 90 4D |  if_c_and_nz	jmp	#LR__4218
2c738     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2c73c     10 00 90 ED |  if_be	jmp	#LR__4212
2c740     00 18 0E F2 | 	cmp	arg04, #0 wz
2c744     00 FA 05 A6 |  if_e	mov	result1, #0
2c748     80 00 90 AD |  if_e	jmp	#LR__4218
2c74c     09 17 02 F6 | 	mov	arg03, arg01
2c750                 | LR__4212
2c750     01 16 86 F1 | 	sub	arg03, #1
2c754     00 18 0E F2 | 	cmp	arg04, #0 wz
2c758     38 00 90 5D |  if_ne	jmp	#LR__4214
2c75c     0B 07 02 F6 | 	mov	_var04, arg03
2c760     09 09 02 F6 | 	mov	_var05, arg01
2c764                 | LR__4213
2c764     04 07 12 F2 | 	cmp	_var04, _var05 wc
2c768     5C 00 90 3D |  if_ae	jmp	#LR__4217
2c76c     03 05 02 F6 | 	mov	_var03, _var04
2c770     00 05 02 F1 | 	add	_var03, _var01
2c774     02 05 C2 FA | 	rdbyte	_var03, _var03
2c778     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2c77c     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2c780     01 06 06 A1 |  if_e	add	_var04, #1
2c784     03 FB 01 A6 |  if_e	mov	result1, _var04
2c788     40 00 90 AD |  if_e	jmp	#LR__4218
2c78c     01 06 06 F1 | 	add	_var04, #1
2c790     D0 FF 9F FD | 	jmp	#LR__4213
2c794                 | LR__4214
2c794     0B 07 02 F6 | 	mov	_var04, arg03
2c798                 | LR__4215
2c798     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2c79c     28 00 90 1D |  if_a	jmp	#LR__4216
2c7a0     03 09 02 F6 | 	mov	_var05, _var04
2c7a4     00 09 02 F1 | 	add	_var05, _var01
2c7a8     04 05 C2 FA | 	rdbyte	_var03, _var05
2c7ac     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2c7b0     04 05 0A F2 | 	cmp	_var03, _var05 wz
2c7b4     01 06 06 A1 |  if_e	add	_var04, #1
2c7b8     03 FB 01 A6 |  if_e	mov	result1, _var04
2c7bc     0C 00 90 AD |  if_e	jmp	#LR__4218
2c7c0     01 06 86 F1 | 	sub	_var04, #1
2c7c4     D0 FF 9F FD | 	jmp	#LR__4215
2c7c8                 | LR__4216
2c7c8                 | LR__4217
2c7c8     00 FA 05 F6 | 	mov	result1, #0
2c7cc                 | LR__4218
2c7cc                 | __system____ScanForChar_ret
2c7cc     2D 00 64 FD | 	ret
2c7d0                 | 
2c7d0                 | __system___basic_dir
2c7d0     05 4A 05 F6 | 	mov	COUNT_, #5
2c7d4     A8 00 A0 FD | 	call	#pushregs_
2c7d8     4C F0 07 F1 | 	add	ptra, #76
2c7dc     04 4E 05 F1 | 	add	fp, #4
2c7e0     A7 12 62 FC | 	wrlong	arg01, fp
2c7e4     04 4E 05 F1 | 	add	fp, #4
2c7e8     A7 14 62 FC | 	wrlong	arg02, fp
2c7ec     04 4E 85 F1 | 	sub	fp, #4
2c7f0     A7 14 0A FB | 	rdlong	arg02, fp wz
2c7f4     04 4E 85 F1 | 	sub	fp, #4
2c7f8     04 4E 05 51 |  if_ne	add	fp, #4
2c7fc     A7 26 02 5B |  if_ne	rdlong	local01, fp
2c800     04 4E 85 51 |  if_ne	sub	fp, #4
2c804     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
2c808     70 00 90 AD |  if_e	jmp	#LR__4220
2c80c     03 00 00 FF 
2c810     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c814     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2c818     03 00 00 FF 
2c81c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2c820     03 00 00 5F 
2c824     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
2c828     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2c82c     03 00 00 5F 
2c830     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2c834     D8 E9 BF 5D |  if_ne	call	#__system__closedir
2c838     B2 01 00 FF 
2c83c     E8 12 06 F6 | 	mov	arg01, ##@LR__5388
2c840     E0 E8 BF FD | 	call	#__system__opendir
2c844     03 00 00 FF 
2c848     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c84c     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2c850     08 4E 05 F1 | 	add	fp, #8
2c854     A7 28 02 FB | 	rdlong	local02, fp
2c858     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2c85c     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2c860     04 4E 85 F1 | 	sub	fp, #4
2c864     A7 28 02 FB | 	rdlong	local02, fp
2c868     04 4E 85 F1 | 	sub	fp, #4
2c86c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2c870     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2c874     03 00 00 FF 
2c878     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2c87c                 | LR__4220
2c87c     03 00 00 FF 
2c880     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c884     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2c888     03 00 00 FF 
2c88c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2c890     B2 01 00 AF 
2c894     EA FA 05 A6 |  if_e	mov	result1, ##@LR__5389
2c898     84 02 90 AD |  if_e	jmp	#LR__4233
2c89c                 | LR__4221
2c89c     03 00 00 FF 
2c8a0     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c8a4     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2c8a8     03 00 00 FF 
2c8ac     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2c8b0     D0 E9 BF FD | 	call	#__system__readdir
2c8b4     0C 4E 05 F1 | 	add	fp, #12
2c8b8     A7 FA 61 FC | 	wrlong	result1, fp
2c8bc     0C 4E 85 F1 | 	sub	fp, #12
2c8c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c8c4     38 00 90 5D |  if_ne	jmp	#LR__4222
2c8c8     03 00 00 FF 
2c8cc     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c8d0     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2c8d4     03 00 00 FF 
2c8d8     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2c8dc     30 E9 BF FD | 	call	#__system__closedir
2c8e0     03 00 00 FF 
2c8e4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c8e8     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2c8ec     03 00 00 FF 
2c8f0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2c8f4     B2 01 00 FF 
2c8f8     EC FA 05 F6 | 	mov	result1, ##@LR__5390
2c8fc     20 02 90 FD | 	jmp	#LR__4233
2c900                 | LR__4222
2c900     0C 4E 05 F1 | 	add	fp, #12
2c904     A7 12 02 FB | 	rdlong	arg01, fp
2c908     0C 4E 85 F1 | 	sub	fp, #12
2c90c     03 00 00 FF 
2c910     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2c914     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2c918     03 00 00 FF 
2c91c     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2c920     10 09 B0 FD | 	call	#__system___pat_match
2c924     00 FA 0D F2 | 	cmp	result1, #0 wz
2c928     70 FF 9F AD |  if_e	jmp	#LR__4221
2c92c     03 00 00 FF 
2c930     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2c934     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2c938     03 00 00 FF 
2c93c     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2c940     78 01 90 AD |  if_e	jmp	#LR__4229
2c944     0C 4E 05 F1 | 	add	fp, #12
2c948     A7 12 02 FB | 	rdlong	arg01, fp
2c94c     04 4E 05 F1 | 	add	fp, #4
2c950     A7 14 02 F6 | 	mov	arg02, fp
2c954     10 4E 85 F1 | 	sub	fp, #16
2c958     2C F2 BF FD | 	call	#__system__stat
2c95c     40 4E 05 F1 | 	add	fp, #64
2c960     A7 FA 61 FC | 	wrlong	result1, fp
2c964     40 4E 85 F1 | 	sub	fp, #64
2c968     00 FA 0D F2 | 	cmp	result1, #0 wz
2c96c     B2 01 00 5F 
2c970     EE FA 05 56 |  if_ne	mov	result1, ##@LR__5391
2c974     A8 01 90 5D |  if_ne	jmp	#LR__4233
2c978     18 4E 05 F1 | 	add	fp, #24
2c97c     A7 28 02 FB | 	rdlong	local02, fp
2c980     78 00 00 FF 
2c984     00 28 06 F5 | 	and	local02, ##61440
2c988     2C 4E 05 F1 | 	add	fp, #44
2c98c     A7 28 62 FC | 	wrlong	local02, fp
2c990     38 4E 85 F1 | 	sub	fp, #56
2c994     A7 28 02 FB | 	rdlong	local02, fp
2c998     0C 4E 85 F1 | 	sub	fp, #12
2c99c     14 29 C2 FA | 	rdbyte	local02, local02
2c9a0     2E 28 0E F2 | 	cmp	local02, #46 wz
2c9a4     08 4E 05 A1 |  if_e	add	fp, #8
2c9a8     A7 04 68 AC |  if_e	wrlong	#2, fp
2c9ac     08 4E C5 F3 | 	sumz	fp, #8
2c9b0     A7 00 68 5C |  if_ne	wrlong	#0, fp
2c9b4     08 4E 85 51 |  if_ne	sub	fp, #8
2c9b8     44 4E 05 F1 | 	add	fp, #68
2c9bc     A7 28 02 FB | 	rdlong	local02, fp
2c9c0     44 4E 85 F1 | 	sub	fp, #68
2c9c4     08 00 00 FF 
2c9c8     00 28 0E F2 | 	cmp	local02, ##4096 wz
2c9cc     18 00 90 5D |  if_ne	jmp	#LR__4223
2c9d0     08 4E 05 F1 | 	add	fp, #8
2c9d4     A7 28 02 FB | 	rdlong	local02, fp
2c9d8     10 28 46 F5 | 	or	local02, #16
2c9dc     A7 28 62 FC | 	wrlong	local02, fp
2c9e0     08 4E 85 F1 | 	sub	fp, #8
2c9e4     AC 00 90 FD | 	jmp	#LR__4228
2c9e8                 | LR__4223
2c9e8     44 4E 05 F1 | 	add	fp, #68
2c9ec     A7 28 02 FB | 	rdlong	local02, fp
2c9f0     44 4E 85 F1 | 	sub	fp, #68
2c9f4     10 00 00 FF 
2c9f8     00 28 0E F2 | 	cmp	local02, ##8192 wz
2c9fc     44 4E 05 51 |  if_ne	add	fp, #68
2ca00     A7 26 02 5B |  if_ne	rdlong	local01, fp
2ca04     44 4E 85 51 |  if_ne	sub	fp, #68
2ca08     18 00 00 5F 
2ca0c     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
2ca10     44 4E 05 51 |  if_ne	add	fp, #68
2ca14     13 2B 02 56 |  if_ne	mov	local03, local01
2ca18     44 4E 85 51 |  if_ne	sub	fp, #68
2ca1c     20 00 00 5F 
2ca20     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
2ca24     18 00 90 5D |  if_ne	jmp	#LR__4224
2ca28     08 4E 05 F1 | 	add	fp, #8
2ca2c     A7 28 02 FB | 	rdlong	local02, fp
2ca30     04 28 46 F5 | 	or	local02, #4
2ca34     A7 28 62 FC | 	wrlong	local02, fp
2ca38     08 4E 85 F1 | 	sub	fp, #8
2ca3c     54 00 90 FD | 	jmp	#LR__4227
2ca40                 | LR__4224
2ca40     18 4E 05 F1 | 	add	fp, #24
2ca44     A7 28 02 FB | 	rdlong	local02, fp
2ca48     18 4E 85 F1 | 	sub	fp, #24
2ca4c     92 28 CE F7 | 	test	local02, #146 wz
2ca50     18 00 90 5D |  if_ne	jmp	#LR__4225
2ca54     08 4E 05 F1 | 	add	fp, #8
2ca58     A7 28 02 FB | 	rdlong	local02, fp
2ca5c     01 28 46 F5 | 	or	local02, #1
2ca60     A7 28 62 FC | 	wrlong	local02, fp
2ca64     08 4E 85 F1 | 	sub	fp, #8
2ca68     28 00 90 FD | 	jmp	#LR__4226
2ca6c                 | LR__4225
2ca6c     44 4E 05 F1 | 	add	fp, #68
2ca70     A7 2C 02 FB | 	rdlong	local04, fp
2ca74     44 4E 85 F1 | 	sub	fp, #68
2ca78     08 00 00 FF 
2ca7c     00 2C 0E F2 | 	cmp	local04, ##4096 wz
2ca80     08 4E 05 51 |  if_ne	add	fp, #8
2ca84     A7 2C 02 5B |  if_ne	rdlong	local04, fp
2ca88     20 2C 46 55 |  if_ne	or	local04, #32
2ca8c     A7 2C 62 5C |  if_ne	wrlong	local04, fp
2ca90     08 4E 85 51 |  if_ne	sub	fp, #8
2ca94                 | LR__4226
2ca94                 | LR__4227
2ca94                 | LR__4228
2ca94     08 4E 05 F1 | 	add	fp, #8
2ca98     A7 2C 02 FB | 	rdlong	local04, fp
2ca9c     08 4E 85 F1 | 	sub	fp, #8
2caa0     03 00 00 FF 
2caa4     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2caa8     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2caac     03 00 00 FF 
2cab0     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2cab4     13 2D CA F7 | 	test	local04, local01 wz
2cab8     E0 FD 9F AD |  if_e	jmp	#LR__4221
2cabc                 | LR__4229
2cabc     0C 4E 05 F1 | 	add	fp, #12
2cac0     A7 12 02 FB | 	rdlong	arg01, fp
2cac4     0C 4E 85 F1 | 	sub	fp, #12
2cac8     09 2F 02 F6 | 	mov	local05, arg01
2cacc     97 06 48 FB | 	callpa	#(@LR__4231-@LR__4230)>>2,fcache_load_ptr_
2cad0                 | LR__4230
2cad0     17 FB C9 FA | 	rdbyte	result1, local05 wz
2cad4     01 2E 06 51 |  if_ne	add	local05, #1
2cad8     F4 FF 9F 5D |  if_ne	jmp	#LR__4230
2cadc                 | LR__4231
2cadc     17 13 C2 F2 | 	subr	arg01, local05
2cae0     01 12 06 F1 | 	add	arg01, #1
2cae4     28 E0 BF FD | 	call	#__system___gc_alloc_managed
2cae8     48 4E 05 F1 | 	add	fp, #72
2caec     A7 FA 61 FC | 	wrlong	result1, fp
2caf0     48 4E 85 F1 | 	sub	fp, #72
2caf4     00 FA 0D F2 | 	cmp	result1, #0 wz
2caf8     18 00 90 AD |  if_e	jmp	#LR__4232
2cafc     48 4E 05 F1 | 	add	fp, #72
2cb00     A7 12 02 FB | 	rdlong	arg01, fp
2cb04     3C 4E 85 F1 | 	sub	fp, #60
2cb08     A7 14 02 FB | 	rdlong	arg02, fp
2cb0c     0C 4E 85 F1 | 	sub	fp, #12
2cb10     0C 9E BF FD | 	call	#__system____builtin_strcpy
2cb14                 | LR__4232
2cb14     48 4E 05 F1 | 	add	fp, #72
2cb18     A7 FA 01 FB | 	rdlong	result1, fp
2cb1c     48 4E 85 F1 | 	sub	fp, #72
2cb20                 | LR__4233
2cb20     A7 F0 03 F6 | 	mov	ptra, fp
2cb24     B2 00 A0 FD | 	call	#popregs_
2cb28                 | __system___basic_dir_ret
2cb28     2D 00 64 FD | 	ret
2cb2c                 | 
2cb2c                 | __system__pack_0681
2cb2c     09 01 02 F6 | 	mov	_var01, arg01
2cb30     7F 16 06 F1 | 	add	arg03, #127
2cb34     04 18 CE F7 | 	test	arg04, #4 wz
2cb38     10 00 90 AD |  if_e	jmp	#LR__4240
2cb3c     00 00 0E F2 | 	cmp	_var01, #0 wz
2cb40     16 00 C6 A9 |  if_e	decod	_var01, #22
2cb44     F7 00 26 F4 | 	bith	_var01, #247
2cb48     B4 00 90 FD | 	jmp	#LR__4249
2cb4c                 | LR__4240
2cb4c     02 18 CE F7 | 	test	arg04, #2 wz
2cb50     00 C0 3F 5F 
2cb54     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2cb58     00 14 06 56 |  if_ne	mov	arg02, #0
2cb5c     A0 00 90 5D |  if_ne	jmp	#LR__4248
2cb60     08 18 CE F7 | 	test	arg04, #8 wz
2cb64     00 00 06 56 |  if_ne	mov	_var01, #0
2cb68     94 00 90 5D |  if_ne	jmp	#LR__4247
2cb6c     FF 16 56 F2 | 	cmps	arg03, #255 wc
2cb70     00 C0 3F 3F 
2cb74     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2cb78     00 14 06 36 |  if_ae	mov	arg02, #0
2cb7c     80 00 90 3D |  if_ae	jmp	#LR__4246
2cb80     01 16 56 F2 | 	cmps	arg03, #1 wc
2cb84     6C 00 90 3D |  if_ae	jmp	#LR__4244
2cb88     01 14 46 F0 | 	shr	arg02, #1
2cb8c     00 03 02 F6 | 	mov	_var02, _var01
2cb90     01 02 06 F5 | 	and	_var02, #1
2cb94     1F 02 66 F0 | 	shl	_var02, #31
2cb98     01 15 42 F5 | 	or	arg02, _var02
2cb9c     01 00 46 F0 | 	shr	_var01, #1
2cba0     97 1E 48 FB | 	callpa	#(@LR__4242-@LR__4241)>>2,fcache_load_ptr_
2cba4                 | LR__4241
2cba4     00 16 56 F2 | 	cmps	arg03, #0 wc
2cba8     34 00 90 3D |  if_ae	jmp	#LR__4243
2cbac     00 00 0E F2 | 	cmp	_var01, #0 wz
2cbb0     2C 00 90 AD |  if_e	jmp	#LR__4243
2cbb4     0A 13 02 F6 | 	mov	arg01, arg02
2cbb8     01 12 06 F5 | 	and	arg01, #1
2cbbc     01 16 06 F1 | 	add	arg03, #1
2cbc0     01 14 46 F0 | 	shr	arg02, #1
2cbc4     00 03 02 F6 | 	mov	_var02, _var01
2cbc8     01 02 06 F5 | 	and	_var02, #1
2cbcc     1F 02 66 F0 | 	shl	_var02, #31
2cbd0     01 15 42 F5 | 	or	arg02, _var02
2cbd4     09 15 42 F5 | 	or	arg02, arg01
2cbd8     01 00 46 F0 | 	shr	_var01, #1
2cbdc     C4 FF 9F FD | 	jmp	#LR__4241
2cbe0                 | LR__4242
2cbe0                 | LR__4243
2cbe0     00 16 56 F2 | 	cmps	arg03, #0 wc
2cbe4     18 00 90 3D |  if_ae	jmp	#LR__4245
2cbe8     00 14 0E F2 | 	cmp	arg02, #0 wz
2cbec     6F 14 62 FD | 	wrnz	arg02
2cbf0     0C 00 90 FD | 	jmp	#LR__4245
2cbf4                 | LR__4244
2cbf4     17 01 06 F4 | 	bitl	_var01, #279
2cbf8     17 16 66 F0 | 	shl	arg03, #23
2cbfc     0B 01 42 F5 | 	or	_var01, arg03
2cc00                 | LR__4245
2cc00                 | LR__4246
2cc00                 | LR__4247
2cc00                 | LR__4248
2cc00                 | LR__4249
2cc00     01 00 CE F7 | 	test	_var01, #1 wz
2cc04     01 14 46 55 |  if_ne	or	arg02, #1
2cc08     0A 17 02 F6 | 	mov	arg03, arg02
2cc0c     00 02 06 F6 | 	mov	_var02, #0
2cc10     FF FF 3F FF 
2cc14     FF 15 06 F1 | 	add	arg02, ##2147483647
2cc18     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2cc1c     01 02 06 C6 |  if_b	mov	_var02, #1
2cc20     01 01 02 F1 | 	add	_var01, _var02
2cc24     01 18 CE F7 | 	test	arg04, #1 wz
2cc28     1F 00 26 54 |  if_ne	bith	_var01, #31
2cc2c     00 FB 01 F6 | 	mov	result1, _var01
2cc30                 | __system__pack_0681_ret
2cc30     2D 00 64 FD | 	ret
2cc34                 | 
2cc34                 | __system___rxtxioctl_0771
2cc34     00 15 0E F2 | 	cmp	arg02, #256 wz
2cc38     0C 00 90 AD |  if_e	jmp	#LR__4250
2cc3c     01 15 0E F2 | 	cmp	arg02, #257 wz
2cc40     1C 00 90 AD |  if_e	jmp	#LR__4251
2cc44     30 00 90 FD | 	jmp	#LR__4252
2cc48                 | LR__4250
2cc48     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2cc4c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2cc50     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2cc54     0B FB 61 FC | 	wrlong	result1, arg03
2cc58     00 FA 05 F6 | 	mov	result1, #0
2cc5c     28 00 90 FD | 	jmp	#LR__4253
2cc60                 | LR__4251
2cc60     0B 13 02 FB | 	rdlong	arg01, arg03
2cc64     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2cc68     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2cc6c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2cc70     00 FA 05 F6 | 	mov	result1, #0
2cc74     10 00 90 FD | 	jmp	#LR__4253
2cc78                 | LR__4252
2cc78     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cc7c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2cc80     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cc84     01 FA 65 F6 | 	neg	result1, #1
2cc88                 | LR__4253
2cc88                 | __system___rxtxioctl_0771_ret
2cc88     2D 00 64 FD | 	ret
2cc8c                 | 
2cc8c                 | __system____dummy_flush_0772
2cc8c     00 FA 05 F6 | 	mov	result1, #0
2cc90                 | __system____dummy_flush_0772_ret
2cc90     2D 00 64 FD | 	ret
2cc94                 | 
2cc94                 | __system___vfswrite
2cc94     09 4A 05 F6 | 	mov	COUNT_, #9
2cc98     A8 00 A0 FD | 	call	#pushregs_
2cc9c     09 27 02 F6 | 	mov	local01, arg01
2cca0     0A 29 02 F6 | 	mov	local02, arg02
2cca4     0B 2B 02 F6 | 	mov	local03, arg03
2cca8     14 2D 02 F6 | 	mov	local04, local02
2ccac     08 26 06 F1 | 	add	local01, #8
2ccb0     13 13 02 FB | 	rdlong	arg01, local01
2ccb4     08 26 86 F1 | 	sub	local01, #8
2ccb8     02 12 CE F7 | 	test	arg01, #2 wz
2ccbc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ccc0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2ccc4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ccc8     01 FA 65 A6 |  if_e	neg	result1, #1
2cccc     80 01 90 AD |  if_e	jmp	#LR__4266
2ccd0     08 26 06 F1 | 	add	local01, #8
2ccd4     13 FB 01 FB | 	rdlong	result1, local01
2ccd8     08 26 86 F1 | 	sub	local01, #8
2ccdc     40 FA CD F7 | 	test	result1, #64 wz
2cce0     68 00 90 AD |  if_e	jmp	#LR__4261
2cce4     08 26 06 F1 | 	add	local01, #8
2cce8     13 15 02 FB | 	rdlong	arg02, local01
2ccec     08 26 86 F1 | 	sub	local01, #8
2ccf0     80 14 CE F7 | 	test	arg02, #128 wz
2ccf4     54 00 90 AD |  if_e	jmp	#LR__4260
2ccf8     30 26 06 F1 | 	add	local01, #48
2ccfc     13 2F 02 FB | 	rdlong	local05, local01
2cd00     17 31 02 F6 | 	mov	local06, local05
2cd04     30 26 86 F1 | 	sub	local01, #48
2cd08     13 30 46 F7 | 	zerox	local06, #19
2cd0c     14 2E 46 F0 | 	shr	local05, #20
2cd10     02 2E 66 F0 | 	shl	local05, #2
2cd14     ED 2E 02 F1 | 	add	local05, __methods__
2cd18     17 2F 02 FB | 	rdlong	local05, local05
2cd1c     13 13 02 F6 | 	mov	arg01, local01
2cd20     00 14 06 F6 | 	mov	arg02, #0
2cd24     02 16 06 F6 | 	mov	arg03, #2
2cd28     F2 32 02 F6 | 	mov	local07, objptr
2cd2c     18 E5 01 F6 | 	mov	objptr, local06
2cd30     2D 2E 62 FD | 	call	local05
2cd34     19 E5 01 F6 | 	mov	objptr, local07
2cd38     08 26 06 F1 | 	add	local01, #8
2cd3c     13 33 02 FB | 	rdlong	local07, local01
2cd40     80 32 26 F5 | 	andn	local07, #128
2cd44     13 33 62 FC | 	wrlong	local07, local01
2cd48     08 26 86 F1 | 	sub	local01, #8
2cd4c                 | LR__4260
2cd4c                 | LR__4261
2cd4c     18 26 06 F1 | 	add	local01, #24
2cd50     13 33 0A FB | 	rdlong	local07, local01 wz
2cd54     18 26 86 F1 | 	sub	local01, #24
2cd58     80 00 90 AD |  if_e	jmp	#LR__4263
2cd5c     18 26 06 F1 | 	add	local01, #24
2cd60     13 2F 02 FB | 	rdlong	local05, local01
2cd64     17 31 02 F6 | 	mov	local06, local05
2cd68     18 26 86 F1 | 	sub	local01, #24
2cd6c     13 30 46 F7 | 	zerox	local06, #19
2cd70     14 2E 46 F0 | 	shr	local05, #20
2cd74     02 2E 66 F0 | 	shl	local05, #2
2cd78     ED 2E 02 F1 | 	add	local05, __methods__
2cd7c     17 2F 02 FB | 	rdlong	local05, local05
2cd80     14 15 02 F6 | 	mov	arg02, local02
2cd84     15 17 02 F6 | 	mov	arg03, local03
2cd88     13 13 02 F6 | 	mov	arg01, local01
2cd8c     F2 32 02 F6 | 	mov	local07, objptr
2cd90     18 E5 01 F6 | 	mov	objptr, local06
2cd94     2D 2E 62 FD | 	call	local05
2cd98     19 E5 01 F6 | 	mov	objptr, local07
2cd9c     FD 34 02 F6 | 	mov	local08, result1
2cda0     00 34 56 F2 | 	cmps	local08, #0 wc
2cda4     2C 00 90 3D |  if_ae	jmp	#LR__4262
2cda8     08 26 06 F1 | 	add	local01, #8
2cdac     13 33 02 FB | 	rdlong	local07, local01
2cdb0     20 32 46 F5 | 	or	local07, #32
2cdb4     13 33 62 FC | 	wrlong	local07, local01
2cdb8     00 34 4E F2 | 	cmps	local08, #0 wz
2cdbc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cdc0     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2cdc4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cdc8     01 FA 65 56 |  if_ne	neg	result1, #1
2cdcc     00 FA 05 A6 |  if_e	mov	result1, #0
2cdd0     7C 00 90 FD | 	jmp	#LR__4266
2cdd4                 | LR__4262
2cdd4     1A FB 01 F6 | 	mov	result1, local08
2cdd8     74 00 90 FD | 	jmp	#LR__4266
2cddc                 | LR__4263
2cddc     1C 26 06 F1 | 	add	local01, #28
2cde0     13 37 0A FB | 	rdlong	local09, local01 wz
2cde4     1C 26 86 F1 | 	sub	local01, #28
2cde8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cdec     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2cdf0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cdf4     01 FA 65 A6 |  if_e	neg	result1, #1
2cdf8     54 00 90 AD |  if_e	jmp	#LR__4266
2cdfc     00 34 06 F6 | 	mov	local08, #0
2ce00                 | LR__4264
2ce00     01 2A 16 F2 | 	cmp	local03, #1 wc
2ce04     44 00 90 CD |  if_b	jmp	#LR__4265
2ce08     1B 31 02 F6 | 	mov	local06, local09
2ce0c     1B 2F 02 F6 | 	mov	local05, local09
2ce10     13 30 46 F7 | 	zerox	local06, #19
2ce14     14 2E 46 F0 | 	shr	local05, #20
2ce18     02 2E 66 F0 | 	shl	local05, #2
2ce1c     ED 2E 02 F1 | 	add	local05, __methods__
2ce20     17 2F 02 FB | 	rdlong	local05, local05
2ce24     16 13 C2 FA | 	rdbyte	arg01, local04
2ce28     13 15 02 F6 | 	mov	arg02, local01
2ce2c     F2 32 02 F6 | 	mov	local07, objptr
2ce30     18 E5 01 F6 | 	mov	objptr, local06
2ce34     01 2C 06 F1 | 	add	local04, #1
2ce38     2D 2E 62 FD | 	call	local05
2ce3c     19 E5 01 F6 | 	mov	objptr, local07
2ce40     FD 34 02 F1 | 	add	local08, result1
2ce44     01 2A 86 F1 | 	sub	local03, #1
2ce48     B4 FF 9F FD | 	jmp	#LR__4264
2ce4c                 | LR__4265
2ce4c     1A FB 01 F6 | 	mov	result1, local08
2ce50                 | LR__4266
2ce50     A7 F0 03 F6 | 	mov	ptra, fp
2ce54     B2 00 A0 FD | 	call	#popregs_
2ce58                 | __system___vfswrite_ret
2ce58     2D 00 64 FD | 	ret
2ce5c                 | 
2ce5c                 | __system___vfsread
2ce5c     03 4A 05 F6 | 	mov	COUNT_, #3
2ce60     A8 00 A0 FD | 	call	#pushregs_
2ce64     28 F0 07 F1 | 	add	ptra, #40
2ce68     04 4E 05 F1 | 	add	fp, #4
2ce6c     A7 12 62 FC | 	wrlong	arg01, fp
2ce70     04 4E 05 F1 | 	add	fp, #4
2ce74     A7 14 62 FC | 	wrlong	arg02, fp
2ce78     04 4E 05 F1 | 	add	fp, #4
2ce7c     A7 16 62 FC | 	wrlong	arg03, fp
2ce80     04 4E 85 F1 | 	sub	fp, #4
2ce84     A7 FA 01 FB | 	rdlong	result1, fp
2ce88     14 4E 05 F1 | 	add	fp, #20
2ce8c     A7 FA 61 FC | 	wrlong	result1, fp
2ce90     04 4E 05 F1 | 	add	fp, #4
2ce94     A7 00 68 FC | 	wrlong	#0, fp
2ce98     1C 4E 85 F1 | 	sub	fp, #28
2ce9c     A7 12 02 FB | 	rdlong	arg01, fp
2cea0     04 4E 85 F1 | 	sub	fp, #4
2cea4     08 12 06 F1 | 	add	arg01, #8
2cea8     09 FB 01 FB | 	rdlong	result1, arg01
2ceac     01 FA CD F7 | 	test	result1, #1 wz
2ceb0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ceb4     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2ceb8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cebc     01 FA 65 A6 |  if_e	neg	result1, #1
2cec0     74 02 90 AD |  if_e	jmp	#LR__4276
2cec4     04 4E 05 F1 | 	add	fp, #4
2cec8     A7 12 02 FB | 	rdlong	arg01, fp
2cecc     04 4E 85 F1 | 	sub	fp, #4
2ced0     14 12 06 F1 | 	add	arg01, #20
2ced4     09 FB 09 FB | 	rdlong	result1, arg01 wz
2ced8     B8 00 90 AD |  if_e	jmp	#LR__4271
2cedc     04 4E 05 F1 | 	add	fp, #4
2cee0     A7 12 02 FB | 	rdlong	arg01, fp
2cee4     09 17 02 F6 | 	mov	arg03, arg01
2cee8     14 16 06 F1 | 	add	arg03, #20
2ceec     0B 27 02 FB | 	rdlong	local01, arg03
2cef0     13 29 02 F6 | 	mov	local02, local01
2cef4     13 26 46 F7 | 	zerox	local01, #19
2cef8     14 28 46 F0 | 	shr	local02, #20
2cefc     02 28 66 F0 | 	shl	local02, #2
2cf00     ED 28 02 F1 | 	add	local02, __methods__
2cf04     14 29 02 FB | 	rdlong	local02, local02
2cf08     04 4E 05 F1 | 	add	fp, #4
2cf0c     A7 14 02 FB | 	rdlong	arg02, fp
2cf10     04 4E 05 F1 | 	add	fp, #4
2cf14     A7 16 02 FB | 	rdlong	arg03, fp
2cf18     0C 4E 85 F1 | 	sub	fp, #12
2cf1c     F2 2A 02 F6 | 	mov	local03, objptr
2cf20     13 E5 01 F6 | 	mov	objptr, local01
2cf24     2D 28 62 FD | 	call	local02
2cf28     15 E5 01 F6 | 	mov	objptr, local03
2cf2c     10 4E 05 F1 | 	add	fp, #16
2cf30     A7 FA 61 FC | 	wrlong	result1, fp
2cf34     10 4E 85 F1 | 	sub	fp, #16
2cf38     00 FA 55 F2 | 	cmps	result1, #0 wc
2cf3c     44 00 90 3D |  if_ae	jmp	#LR__4270
2cf40     04 4E 05 F1 | 	add	fp, #4
2cf44     A7 2A 02 FB | 	rdlong	local03, fp
2cf48     15 27 02 F6 | 	mov	local01, local03
2cf4c     08 2A 06 F1 | 	add	local03, #8
2cf50     15 29 02 FB | 	rdlong	local02, local03
2cf54     20 28 46 F5 | 	or	local02, #32
2cf58     08 26 06 F1 | 	add	local01, #8
2cf5c     13 29 62 FC | 	wrlong	local02, local01
2cf60     0C 4E 05 F1 | 	add	fp, #12
2cf64     A7 12 0A FB | 	rdlong	arg01, fp wz
2cf68     10 4E 85 F1 | 	sub	fp, #16
2cf6c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cf70     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2cf74     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cf78     01 FA 65 56 |  if_ne	neg	result1, #1
2cf7c     00 FA 05 A6 |  if_e	mov	result1, #0
2cf80     B4 01 90 FD | 	jmp	#LR__4276
2cf84                 | LR__4270
2cf84     10 4E 05 F1 | 	add	fp, #16
2cf88     A7 FA 01 FB | 	rdlong	result1, fp
2cf8c     10 4E 85 F1 | 	sub	fp, #16
2cf90     A4 01 90 FD | 	jmp	#LR__4276
2cf94                 | LR__4271
2cf94     04 4E 05 F1 | 	add	fp, #4
2cf98     A7 12 02 FB | 	rdlong	arg01, fp
2cf9c     20 12 06 F1 | 	add	arg01, #32
2cfa0     09 13 0A FB | 	rdlong	arg01, arg01 wz
2cfa4     14 4E 05 F1 | 	add	fp, #20
2cfa8     A7 12 62 FC | 	wrlong	arg01, fp
2cfac     18 4E 85 F1 | 	sub	fp, #24
2cfb0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cfb4     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2cfb8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cfbc     01 FA 65 A6 |  if_e	neg	result1, #1
2cfc0     74 01 90 AD |  if_e	jmp	#LR__4276
2cfc4     04 4E 05 F1 | 	add	fp, #4
2cfc8     A7 2A 02 FB | 	rdlong	local03, fp
2cfcc     04 4E 85 F1 | 	sub	fp, #4
2cfd0     28 2A 06 F1 | 	add	local03, #40
2cfd4     15 29 0A FB | 	rdlong	local02, local03 wz
2cfd8     7C 00 90 AD |  if_e	jmp	#LR__4273
2cfdc     04 4E 05 F1 | 	add	fp, #4
2cfe0     A7 12 02 FB | 	rdlong	arg01, fp
2cfe4     09 2B 02 F6 | 	mov	local03, arg01
2cfe8     28 2A 06 F1 | 	add	local03, #40
2cfec     15 27 02 FB | 	rdlong	local01, local03
2cff0     13 29 02 F6 | 	mov	local02, local01
2cff4     13 26 46 F7 | 	zerox	local01, #19
2cff8     14 28 46 F0 | 	shr	local02, #20
2cffc     02 28 66 F0 | 	shl	local02, #2
2d000     ED 28 02 F1 | 	add	local02, __methods__
2d004     14 29 02 FB | 	rdlong	local02, local02
2d008     20 4E 05 F1 | 	add	fp, #32
2d00c     A7 16 02 F6 | 	mov	arg03, fp
2d010     24 4E 85 F1 | 	sub	fp, #36
2d014     00 15 06 F6 | 	mov	arg02, #256
2d018     F2 2A 02 F6 | 	mov	local03, objptr
2d01c     13 E5 01 F6 | 	mov	objptr, local01
2d020     2D 28 62 FD | 	call	local02
2d024     15 E5 01 F6 | 	mov	objptr, local03
2d028     10 4E 05 F1 | 	add	fp, #16
2d02c     A7 FA 61 FC | 	wrlong	result1, fp
2d030     00 FA 4D F2 | 	cmps	result1, #0 wz
2d034     10 4E 85 F1 | 	sub	fp, #16
2d038     1C 00 90 5D |  if_ne	jmp	#LR__4272
2d03c     24 4E 05 F1 | 	add	fp, #36
2d040     A7 28 02 FB | 	rdlong	local02, fp
2d044     24 4E 85 F1 | 	sub	fp, #36
2d048     02 28 CE F7 | 	test	local02, #2 wz
2d04c     20 4E 05 51 |  if_ne	add	fp, #32
2d050     A7 02 68 5C |  if_ne	wrlong	#1, fp
2d054     20 4E 85 51 |  if_ne	sub	fp, #32
2d058                 | LR__4272
2d058                 | LR__4273
2d058     10 4E 05 F1 | 	add	fp, #16
2d05c     A7 00 68 FC | 	wrlong	#0, fp
2d060     10 4E 85 F1 | 	sub	fp, #16
2d064                 | LR__4274
2d064     0C 4E 05 F1 | 	add	fp, #12
2d068     A7 2A 02 FB | 	rdlong	local03, fp
2d06c     0C 4E 85 F1 | 	sub	fp, #12
2d070     01 2A 16 F2 | 	cmp	local03, #1 wc
2d074     B4 00 90 CD |  if_b	jmp	#LR__4275
2d078     18 4E 05 F1 | 	add	fp, #24
2d07c     A7 28 02 FB | 	rdlong	local02, fp
2d080     14 2B 02 F6 | 	mov	local03, local02
2d084     13 2A 46 F7 | 	zerox	local03, #19
2d088     14 28 46 F0 | 	shr	local02, #20
2d08c     02 28 66 F0 | 	shl	local02, #2
2d090     ED 28 02 F1 | 	add	local02, __methods__
2d094     14 29 02 FB | 	rdlong	local02, local02
2d098     14 4E 85 F1 | 	sub	fp, #20
2d09c     A7 12 02 FB | 	rdlong	arg01, fp
2d0a0     04 4E 85 F1 | 	sub	fp, #4
2d0a4     F2 26 02 F6 | 	mov	local01, objptr
2d0a8     15 E5 01 F6 | 	mov	objptr, local03
2d0ac     2D 28 62 FD | 	call	local02
2d0b0     13 E5 01 F6 | 	mov	objptr, local01
2d0b4     14 4E 05 F1 | 	add	fp, #20
2d0b8     A7 FA 61 FC | 	wrlong	result1, fp
2d0bc     14 4E 85 F1 | 	sub	fp, #20
2d0c0     00 FA 55 F2 | 	cmps	result1, #0 wc
2d0c4     64 00 90 CD |  if_b	jmp	#LR__4275
2d0c8     1C 4E 05 F1 | 	add	fp, #28
2d0cc     A7 2A 02 FB | 	rdlong	local03, fp
2d0d0     15 29 02 F6 | 	mov	local02, local03
2d0d4     01 28 06 F1 | 	add	local02, #1
2d0d8     A7 28 62 FC | 	wrlong	local02, fp
2d0dc     08 4E 85 F1 | 	sub	fp, #8
2d0e0     A7 28 02 FB | 	rdlong	local02, fp
2d0e4     15 29 42 FC | 	wrbyte	local02, local03
2d0e8     04 4E 85 F1 | 	sub	fp, #4
2d0ec     A7 2A 02 FB | 	rdlong	local03, fp
2d0f0     01 2A 06 F1 | 	add	local03, #1
2d0f4     A7 2A 62 FC | 	wrlong	local03, fp
2d0f8     04 4E 85 F1 | 	sub	fp, #4
2d0fc     A7 2A 02 FB | 	rdlong	local03, fp
2d100     01 2A 86 F1 | 	sub	local03, #1
2d104     A7 2A 62 FC | 	wrlong	local03, fp
2d108     14 4E 05 F1 | 	add	fp, #20
2d10c     A7 2A 0A FB | 	rdlong	local03, fp wz
2d110     20 4E 85 F1 | 	sub	fp, #32
2d114     4C FF 9F AD |  if_e	jmp	#LR__4274
2d118     14 4E 05 F1 | 	add	fp, #20
2d11c     A7 28 02 FB | 	rdlong	local02, fp
2d120     14 4E 85 F1 | 	sub	fp, #20
2d124     0A 28 0E F2 | 	cmp	local02, #10 wz
2d128     38 FF 9F 5D |  if_ne	jmp	#LR__4274
2d12c                 | LR__4275
2d12c     10 4E 05 F1 | 	add	fp, #16
2d130     A7 FA 01 FB | 	rdlong	result1, fp
2d134     10 4E 85 F1 | 	sub	fp, #16
2d138                 | LR__4276
2d138     A7 F0 03 F6 | 	mov	ptra, fp
2d13c     B2 00 A0 FD | 	call	#popregs_
2d140                 | __system___vfsread_ret
2d140     2D 00 64 FD | 	ret
2d144                 | 
2d144                 | __system____default_filbuf
2d144     04 4A 05 F6 | 	mov	COUNT_, #4
2d148     A8 00 A0 FD | 	call	#pushregs_
2d14c     09 27 02 F6 | 	mov	local01, arg01
2d150     13 29 02 FB | 	rdlong	local02, local01
2d154     0C 28 06 F1 | 	add	local02, #12
2d158     14 FB 09 FB | 	rdlong	result1, local02 wz
2d15c     0C 28 86 F1 | 	sub	local02, #12
2d160     20 00 90 5D |  if_ne	jmp	#LR__4280
2d164     14 28 06 F1 | 	add	local02, #20
2d168     14 FB 01 F6 | 	mov	result1, local02
2d16c     04 28 86 F1 | 	sub	local02, #4
2d170     14 FB 61 FC | 	wrlong	result1, local02
2d174     04 28 86 F1 | 	sub	local02, #4
2d178     02 00 80 FF 
2d17c     14 01 68 FC | 	wrlong	##1024, local02
2d180     0C 28 86 F1 | 	sub	local02, #12
2d184                 | LR__4280
2d184     14 26 06 F1 | 	add	local01, #20
2d188     13 2B 02 FB | 	rdlong	local03, local01
2d18c     15 2D 02 F6 | 	mov	local04, local03
2d190     14 26 86 F1 | 	sub	local01, #20
2d194     13 2C 46 F7 | 	zerox	local04, #19
2d198     14 2A 46 F0 | 	shr	local03, #20
2d19c     02 2A 66 F0 | 	shl	local03, #2
2d1a0     ED 2A 02 F1 | 	add	local03, __methods__
2d1a4     15 2B 02 FB | 	rdlong	local03, local03
2d1a8     10 28 06 F1 | 	add	local02, #16
2d1ac     14 15 02 FB | 	rdlong	arg02, local02
2d1b0     04 28 86 F1 | 	sub	local02, #4
2d1b4     14 17 02 FB | 	rdlong	arg03, local02
2d1b8     0C 28 86 F1 | 	sub	local02, #12
2d1bc     13 13 02 F6 | 	mov	arg01, local01
2d1c0     F2 26 02 F6 | 	mov	local01, objptr
2d1c4     16 E5 01 F6 | 	mov	objptr, local04
2d1c8     2D 2A 62 FD | 	call	local03
2d1cc     13 E5 01 F6 | 	mov	objptr, local01
2d1d0     FD 2C 02 F6 | 	mov	local04, result1
2d1d4     00 2C 56 F2 | 	cmps	local04, #0 wc
2d1d8     01 FA 65 C6 |  if_b	neg	result1, #1
2d1dc     28 00 90 CD |  if_b	jmp	#LR__4281
2d1e0     14 2D 62 FC | 	wrlong	local04, local02
2d1e4     10 28 06 F1 | 	add	local02, #16
2d1e8     14 2B 02 FB | 	rdlong	local03, local02
2d1ec     0C 28 86 F1 | 	sub	local02, #12
2d1f0     14 2B 62 FC | 	wrlong	local03, local02
2d1f4     04 28 06 F1 | 	add	local02, #4
2d1f8     14 2B 02 FB | 	rdlong	local03, local02
2d1fc     01 2A 46 F5 | 	or	local03, #1
2d200     14 2B 62 FC | 	wrlong	local03, local02
2d204     16 FB 01 F6 | 	mov	result1, local04
2d208                 | LR__4281
2d208     A7 F0 03 F6 | 	mov	ptra, fp
2d20c     B2 00 A0 FD | 	call	#popregs_
2d210                 | __system____default_filbuf_ret
2d210     2D 00 64 FD | 	ret
2d214                 | 
2d214                 | __system__getlower_1161
2d214     41 12 56 F2 | 	cmps	arg01, #65 wc
2d218     10 00 90 CD |  if_b	jmp	#LR__4290
2d21c     5B 12 56 F2 | 	cmps	arg01, #91 wc
2d220     09 FB 01 C6 |  if_b	mov	result1, arg01
2d224     20 FA 05 C1 |  if_b	add	result1, #32
2d228     04 00 90 CD |  if_b	jmp	#__system__getlower_1161_ret
2d22c                 | LR__4290
2d22c     09 FB 01 F6 | 	mov	result1, arg01
2d230                 | __system__getlower_1161_ret
2d230     2D 00 64 FD | 	ret
2d234                 | 
2d234                 | __system___pat_match
2d234     08 4A 05 F6 | 	mov	COUNT_, #8
2d238     A8 00 A0 FD | 	call	#pushregs_
2d23c     09 27 02 F6 | 	mov	local01, arg01
2d240                 | LR__4300
2d240     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2d244     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2d248     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2d24c     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2d250     2C 00 90 AD |  if_e	jmp	#LR__4301
2d254     0A 13 C2 FA | 	rdbyte	arg01, arg02
2d258     B8 FF BF FD | 	call	#__system__getlower_1161
2d25c     FD 2A 02 F6 | 	mov	local03, result1
2d260     13 13 C2 FA | 	rdbyte	arg01, local01
2d264     AC FF BF FD | 	call	#__system__getlower_1161
2d268     15 FB 09 F2 | 	cmp	result1, local03 wz
2d26c     00 FA 05 56 |  if_ne	mov	result1, #0
2d270     FC 00 90 5D |  if_ne	jmp	#LR__4309
2d274     01 26 06 F1 | 	add	local01, #1
2d278     01 14 06 F1 | 	add	arg02, #1
2d27c     C0 FF 9F FD | 	jmp	#LR__4300
2d280                 | LR__4301
2d280     0A 2B C2 FA | 	rdbyte	local03, arg02
2d284     2A 2A 0E F2 | 	cmp	local03, #42 wz
2d288     D4 00 90 5D |  if_ne	jmp	#LR__4308
2d28c     01 14 06 F1 | 	add	arg02, #1
2d290     0A 29 C2 FA | 	rdbyte	local02, arg02
2d294     01 14 86 F1 | 	sub	arg02, #1
2d298     2E 28 0E F2 | 	cmp	local02, #46 wz
2d29c     28 00 90 5D |  if_ne	jmp	#LR__4302
2d2a0     02 14 06 F1 | 	add	arg02, #2
2d2a4     0A 29 C2 FA | 	rdbyte	local02, arg02
2d2a8     02 14 86 F1 | 	sub	arg02, #2
2d2ac     2A 28 0E F2 | 	cmp	local02, #42 wz
2d2b0     03 14 06 A1 |  if_e	add	arg02, #3
2d2b4     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2d2b8     03 14 86 A1 |  if_e	sub	arg02, #3
2d2bc     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2d2c0     01 FA 05 A6 |  if_e	mov	result1, #1
2d2c4     A8 00 90 AD |  if_e	jmp	#LR__4309
2d2c8                 | LR__4302
2d2c8     01 14 06 F1 | 	add	arg02, #1
2d2cc     00 30 06 F6 | 	mov	local06, #0
2d2d0     97 1E 48 FB | 	callpa	#(@LR__4305-@LR__4303)>>2,fcache_load_ptr_
2d2d4                 | LR__4303
2d2d4     18 33 02 F6 | 	mov	local07, local06
2d2d8     0A 33 02 F1 | 	add	local07, arg02
2d2dc     19 33 CA FA | 	rdbyte	local07, local07 wz
2d2e0     18 2F 02 56 |  if_ne	mov	local05, local06
2d2e4     01 2E 06 51 |  if_ne	add	local05, #1
2d2e8     17 31 02 56 |  if_ne	mov	local06, local05
2d2ec     E4 FF 9F 5D |  if_ne	jmp	#LR__4303
2d2f0     00 34 06 F6 | 	mov	local08, #0
2d2f4                 | LR__4304
2d2f4     1A 33 02 F6 | 	mov	local07, local08
2d2f8     13 33 02 F1 | 	add	local07, local01
2d2fc     19 33 CA FA | 	rdbyte	local07, local07 wz
2d300     1A 2F 02 56 |  if_ne	mov	local05, local08
2d304     01 2E 06 51 |  if_ne	add	local05, #1
2d308     17 35 02 56 |  if_ne	mov	local08, local05
2d30c     E4 FF 9F 5D |  if_ne	jmp	#LR__4304
2d310                 | LR__4305
2d310     18 35 52 F2 | 	cmps	local08, local06 wc
2d314     00 FA 05 C6 |  if_b	mov	result1, #0
2d318     54 00 90 CD |  if_b	jmp	#LR__4309
2d31c     1A 29 02 F6 | 	mov	local02, local08
2d320     18 29 82 F1 | 	sub	local02, local06
2d324     14 27 02 F1 | 	add	local01, local02
2d328                 | LR__4306
2d328     01 30 56 F2 | 	cmps	local06, #1 wc
2d32c     30 00 90 CD |  if_b	jmp	#LR__4307
2d330     13 13 C2 FA | 	rdbyte	arg01, local01
2d334     DC FE BF FD | 	call	#__system__getlower_1161
2d338     FD 34 02 F6 | 	mov	local08, result1
2d33c     0A 13 C2 FA | 	rdbyte	arg01, arg02
2d340     D0 FE BF FD | 	call	#__system__getlower_1161
2d344     FD 34 0A F2 | 	cmp	local08, result1 wz
2d348     00 FA 05 56 |  if_ne	mov	result1, #0
2d34c     20 00 90 5D |  if_ne	jmp	#LR__4309
2d350     01 26 06 F1 | 	add	local01, #1
2d354     01 14 06 F1 | 	add	arg02, #1
2d358     01 30 86 F1 | 	sub	local06, #1
2d35c     C8 FF 9F FD | 	jmp	#LR__4306
2d360                 | LR__4307
2d360                 | LR__4308
2d360     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2d364     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2d368     01 FA 05 A6 |  if_e	mov	result1, #1
2d36c     00 FA 05 56 |  if_ne	mov	result1, #0
2d370                 | LR__4309
2d370     A7 F0 03 F6 | 	mov	ptra, fp
2d374     B2 00 A0 FD | 	call	#popregs_
2d378                 | __system___pat_match_ret
2d378     2D 00 64 FD | 	ret
2d37c                 | 
2d37c                 | _fatfs_cc_ff_uni2oem
2d37c     00 00 06 F6 | 	mov	_var01, #0
2d380     80 12 16 F2 | 	cmp	arg01, #128 wc
2d384     09 01 02 C6 |  if_b	mov	_var01, arg01
2d388     58 00 90 CD |  if_b	jmp	#LR__4314
2d38c     80 00 00 FF 
2d390     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2d394     4C 00 90 3D |  if_ae	jmp	#LR__4313
2d398     0A FB 31 F9 | 	getword	result1, arg02, #0
2d39c     01 00 00 FF 
2d3a0     52 FB 0D F2 | 	cmp	result1, ##850 wz
2d3a4     3C 00 90 5D |  if_ne	jmp	#LR__4313
2d3a8                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2d3a8     00 00 06 F6 | 	mov	_var01, #0
2d3ac     97 14 48 FB | 	callpa	#(@LR__4311-@LR__4310)>>2,fcache_load_ptr_
2d3b0                 | LR__4310
2d3b0     00 FB 31 F9 | 	getword	result1, _var01, #0
2d3b4     80 FA 15 F2 | 	cmp	result1, #128 wc
2d3b8     1C 00 90 3D |  if_ae	jmp	#LR__4312
2d3bc     00 FB 31 F9 | 	getword	result1, _var01, #0
2d3c0     01 FA 65 F0 | 	shl	result1, #1
2d3c4     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2d3c8     FD FA E1 FA | 	rdword	result1, result1
2d3cc     FD 12 0A F2 | 	cmp	arg01, result1 wz
2d3d0     01 00 06 51 |  if_ne	add	_var01, #1
2d3d4     D8 FF 9F 5D |  if_ne	jmp	#LR__4310
2d3d8                 | LR__4311
2d3d8                 | LR__4312
2d3d8     00 01 32 F9 | 	getword	_var01, _var01, #0
2d3dc     80 00 06 F1 | 	add	_var01, #128
2d3e0     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2d3e4                 | LR__4313
2d3e4                 | LR__4314
2d3e4                 | ' 			c = (c + 0x80) & 0xFF;
2d3e4                 | ' 		}
2d3e4                 | ' 	}
2d3e4                 | ' 
2d3e4                 | ' 	return c;
2d3e4     00 FB 01 F6 | 	mov	result1, _var01
2d3e8                 | _fatfs_cc_ff_uni2oem_ret
2d3e8     2D 00 64 FD | 	ret
2d3ec                 | 
2d3ec                 | _fatfs_cc_ff_oem2uni
2d3ec     00 00 06 F6 | 	mov	_var01, #0
2d3f0     09 FB 31 F9 | 	getword	result1, arg01, #0
2d3f4     80 FA 15 F2 | 	cmp	result1, #128 wc
2d3f8     09 01 02 C6 |  if_b	mov	_var01, arg01
2d3fc     2C 00 90 CD |  if_b	jmp	#LR__4321
2d400     0A 15 32 F9 | 	getword	arg02, arg02, #0
2d404     01 00 00 FF 
2d408     52 15 0E F2 | 	cmp	arg02, ##850 wz
2d40c     1C 00 90 5D |  if_ne	jmp	#LR__4320
2d410     09 FB 31 F9 | 	getword	result1, arg01, #0
2d414     00 FB 15 F2 | 	cmp	result1, #256 wc
2d418     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2d41c     80 12 86 C1 |  if_b	sub	arg01, #128
2d420     01 12 66 C0 |  if_b	shl	arg01, #1
2d424     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2d428     09 01 E2 CA |  if_b	rdword	_var01, arg01
2d42c                 | LR__4320
2d42c                 | LR__4321
2d42c                 | ' 		}
2d42c                 | ' 	}
2d42c                 | ' 
2d42c                 | ' 	return c;
2d42c     00 FB 01 F6 | 	mov	result1, _var01
2d430                 | _fatfs_cc_ff_oem2uni_ret
2d430     2D 00 64 FD | 	ret
2d434                 | 
2d434                 | _fatfs_cc_ff_wtoupper
2d434     09 01 02 F6 | 	mov	_var01, arg01
2d438     80 00 00 FF 
2d43c     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2d440     60 01 90 3D |  if_ae	jmp	#LR__4343
2d444     00 03 02 F6 | 	mov	_var02, _var01
2d448     01 01 32 F9 | 	getword	_var01, _var02, #0
2d44c     08 00 00 FF 
2d450     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2d454     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2d458     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2d45c     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2d460     01 00 00 3F 
2d464     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2d468     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2d46c     01 00 00 3F 
2d470     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2d474     02 07 02 F6 | 	mov	_var04, _var03
2d478                 | ' 		uc = (WORD)uni;
2d478                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2d478                 | ' 		for (;;) {
2d478                 | LR__4330
2d478     03 09 E2 FA | 	rdword	_var05, _var04
2d47c     04 05 02 F6 | 	mov	_var03, _var05
2d480     0F 04 4E F7 | 	zerox	_var03, #15 wz
2d484     02 06 06 F1 | 	add	_var04, #2
2d488     14 01 90 AD |  if_e	jmp	#LR__4342
2d48c     01 05 32 F9 | 	getword	_var03, _var02, #0
2d490     04 01 32 F9 | 	getword	_var01, _var05, #0
2d494     00 05 12 F2 | 	cmp	_var03, _var01 wc
2d498     04 01 90 CD |  if_b	jmp	#LR__4342
2d49c     03 0B E2 FA | 	rdword	_var06, _var04
2d4a0     05 0D 32 F9 | 	getword	_var07, _var06, #0
2d4a4     08 0C 46 F0 | 	shr	_var07, #8
2d4a8     05 0B 32 F9 | 	getword	_var06, _var06, #0
2d4ac     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2d4b0     01 05 32 F9 | 	getword	_var03, _var02, #0
2d4b4     04 0F 32 F9 | 	getword	_var08, _var05, #0
2d4b8     05 01 32 F9 | 	getword	_var01, _var06, #0
2d4bc     00 0F 02 F1 | 	add	_var08, _var01
2d4c0     07 05 52 F2 | 	cmps	_var03, _var08 wc
2d4c4     02 06 06 F1 | 	add	_var04, #2
2d4c8     C4 00 90 3D |  if_ae	jmp	#LR__4341
2d4cc                 | ' 				switch (cmd) {
2d4cc     06 11 32 F9 | 	getword	_var09, _var07, #0
2d4d0     09 10 26 F3 | 	fle	_var09, #9
2d4d4     30 10 62 FD | 	jmprel	_var09
2d4d8                 | LR__4331
2d4d8     24 00 90 FD | 	jmp	#LR__4332
2d4dc     3C 00 90 FD | 	jmp	#LR__4333
2d4e0     54 00 90 FD | 	jmp	#LR__4334
2d4e4     5C 00 90 FD | 	jmp	#LR__4335
2d4e8     64 00 90 FD | 	jmp	#LR__4336
2d4ec     6C 00 90 FD | 	jmp	#LR__4337
2d4f0     74 00 90 FD | 	jmp	#LR__4338
2d4f4     7C 00 90 FD | 	jmp	#LR__4339
2d4f8     84 00 90 FD | 	jmp	#LR__4340
2d4fc     A0 00 90 FD | 	jmp	#LR__4342
2d500                 | LR__4332
2d500     01 03 32 F9 | 	getword	_var02, _var02, #0
2d504     04 09 32 F9 | 	getword	_var05, _var05, #0
2d508     04 03 82 F1 | 	sub	_var02, _var05
2d50c     01 02 66 F0 | 	shl	_var02, #1
2d510     03 03 02 F1 | 	add	_var02, _var04
2d514     01 03 E2 FA | 	rdword	_var02, _var02
2d518     84 00 90 FD | 	jmp	#LR__4342
2d51c                 | LR__4333
2d51c     01 05 32 F9 | 	getword	_var03, _var02, #0
2d520     01 03 32 F9 | 	getword	_var02, _var02, #0
2d524     04 09 32 F9 | 	getword	_var05, _var05, #0
2d528     04 03 82 F1 | 	sub	_var02, _var05
2d52c     01 02 06 F5 | 	and	_var02, #1
2d530     02 03 C2 F2 | 	subr	_var02, _var03
2d534     68 00 90 FD | 	jmp	#LR__4342
2d538                 | LR__4334
2d538     01 03 32 F9 | 	getword	_var02, _var02, #0
2d53c     10 02 86 F1 | 	sub	_var02, #16
2d540     5C 00 90 FD | 	jmp	#LR__4342
2d544                 | LR__4335
2d544     01 03 32 F9 | 	getword	_var02, _var02, #0
2d548     20 02 86 F1 | 	sub	_var02, #32
2d54c     50 00 90 FD | 	jmp	#LR__4342
2d550                 | LR__4336
2d550     01 03 32 F9 | 	getword	_var02, _var02, #0
2d554     30 02 86 F1 | 	sub	_var02, #48
2d558     44 00 90 FD | 	jmp	#LR__4342
2d55c                 | LR__4337
2d55c     01 03 32 F9 | 	getword	_var02, _var02, #0
2d560     1A 02 86 F1 | 	sub	_var02, #26
2d564     38 00 90 FD | 	jmp	#LR__4342
2d568                 | LR__4338
2d568     01 03 32 F9 | 	getword	_var02, _var02, #0
2d56c     08 02 06 F1 | 	add	_var02, #8
2d570     2C 00 90 FD | 	jmp	#LR__4342
2d574                 | LR__4339
2d574     01 03 32 F9 | 	getword	_var02, _var02, #0
2d578     50 02 86 F1 | 	sub	_var02, #80
2d57c     20 00 90 FD | 	jmp	#LR__4342
2d580                 | LR__4340
2d580     01 03 32 F9 | 	getword	_var02, _var02, #0
2d584     0E 00 00 FF 
2d588     60 02 86 F1 | 	sub	_var02, ##7264
2d58c                 | ' 				}
2d58c                 | ' 				break;
2d58c     10 00 90 FD | 	jmp	#LR__4342
2d590                 | LR__4341
2d590     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2d594     02 0A 06 AA |  if_e	mul	_var06, #2
2d598     05 07 02 A1 |  if_e	add	_var04, _var06
2d59c     D8 FE 9F FD | 	jmp	#LR__4330
2d5a0                 | LR__4342
2d5a0     01 01 32 F9 | 	getword	_var01, _var02, #0
2d5a4                 | LR__4343
2d5a4                 | ' 		}
2d5a4                 | ' 		uni = uc;
2d5a4                 | ' 	}
2d5a4                 | ' 
2d5a4                 | ' 	return uni;
2d5a4     00 FB 01 F6 | 	mov	result1, _var01
2d5a8                 | _fatfs_cc_ff_wtoupper_ret
2d5a8     2D 00 64 FD | 	ret
2d5ac                 | 
2d5ac                 | _fatfs_cc_strncpy
2d5ac     09 01 02 F6 | 	mov	_var01, arg01
2d5b0     97 12 48 FB | 	callpa	#(@LR__4351-@LR__4350)>>2,fcache_load_ptr_
2d5b4                 | ' 
2d5b4                 | ' 	dscan = dst;
2d5b4                 | ' 	sscan = src;
2d5b4                 | ' 	count = n;
2d5b4                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2d5b4                 | LR__4350
2d5b4     01 16 86 F1 | 	sub	arg03, #1
2d5b8     00 16 56 F2 | 	cmps	arg03, #0 wc
2d5bc     18 00 90 CD |  if_b	jmp	#LR__4352
2d5c0     0A FB C1 FA | 	rdbyte	result1, arg02
2d5c4     00 FB 41 FC | 	wrbyte	result1, _var01
2d5c8     01 14 06 F1 | 	add	arg02, #1
2d5cc     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2d5d0                 | ' 		continue;
2d5d0     01 00 06 F1 | 	add	_var01, #1
2d5d4     DC FF 9F 5D |  if_ne	jmp	#LR__4350
2d5d8                 | LR__4351
2d5d8                 | LR__4352
2d5d8     97 0C 48 FB | 	callpa	#(@LR__4354-@LR__4353)>>2,fcache_load_ptr_
2d5dc                 | ' 	while (--count >= 0)
2d5dc                 | LR__4353
2d5dc     01 16 86 F1 | 	sub	arg03, #1
2d5e0     00 16 56 F2 | 	cmps	arg03, #0 wc
2d5e4     00 03 02 36 |  if_ae	mov	_var02, _var01
2d5e8     01 00 06 31 |  if_ae	add	_var01, #1
2d5ec     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2d5f0     E8 FF 9F 3D |  if_ae	jmp	#LR__4353
2d5f4                 | LR__4354
2d5f4                 | ' 		*dscan++ = '\0';
2d5f4                 | ' 	return(dst);
2d5f4     09 FB 01 F6 | 	mov	result1, arg01
2d5f8                 | _fatfs_cc_strncpy_ret
2d5f8     2D 00 64 FD | 	ret
2d5fc                 | 
2d5fc                 | _fatfs_cc_memcmp
2d5fc                 | ' 	for (n = size; n > 0; n--)
2d5fc     00 16 0E F2 | 	cmp	arg03, #0 wz
2d600     28 00 90 AD |  if_e	jmp	#LR__4361
2d604                 | LR__4360
2d604     09 01 C2 FA | 	rdbyte	_var01, arg01
2d608     0A 03 C2 FA | 	rdbyte	_var02, arg02
2d60c     01 01 0A F2 | 	cmp	_var01, _var02 wz
2d610     01 12 06 A1 |  if_e	add	arg01, #1
2d614     01 14 06 A1 |  if_e	add	arg02, #1
2d618                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2d618     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2d61c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2d620     01 FB 81 51 |  if_ne	sub	result1, _var02
2d624     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2d628     F6 17 6E FB | 	djnz	arg03, #LR__4360
2d62c                 | LR__4361
2d62c                 | ' 
2d62c                 | ' 	return(0);
2d62c     00 FA 05 F6 | 	mov	result1, #0
2d630                 | _fatfs_cc_memcmp_ret
2d630     2D 00 64 FD | 	ret
2d634                 | 
2d634                 | _fatfs_cc_strncmp
2d634     09 01 0A F6 | 	mov	_var01, arg01 wz
2d638     14 00 90 5D |  if_ne	jmp	#LR__4370
2d63c                 | ' 		return scan2 ? -1 : 0;
2d63c     00 14 0E F2 | 	cmp	arg02, #0 wz
2d640     01 02 66 56 |  if_ne	neg	_var02, #1
2d644     00 02 06 A6 |  if_e	mov	_var02, #0
2d648     01 FB 01 F6 | 	mov	result1, _var02
2d64c     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2d650                 | LR__4370
2d650     00 14 0E F2 | 	cmp	arg02, #0 wz
2d654     01 FA 05 A6 |  if_e	mov	result1, #1
2d658     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2d65c     0B 05 02 F6 | 	mov	_var03, arg03
2d660     97 16 48 FB | 	callpa	#(@LR__4372-@LR__4371)>>2,fcache_load_ptr_
2d664                 | ' 	count = n;
2d664                 | ' 	do {
2d664                 | LR__4371
2d664     00 07 C2 FA | 	rdbyte	_var04, _var01
2d668     0A 09 02 F6 | 	mov	_var05, arg02
2d66c     04 0B C2 FA | 	rdbyte	_var06, _var05
2d670     01 04 86 F1 | 	sub	_var03, #1
2d674     00 04 56 F2 | 	cmps	_var03, #0 wc
2d678     01 00 06 F1 | 	add	_var01, #1
2d67c     01 14 06 F1 | 	add	arg02, #1
2d680     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2d684     08 00 90 2D |  if_nc_and_z	jmp	#LR__4373
2d688     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2d68c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4371
2d690                 | LR__4372
2d690                 | LR__4373
2d690     00 04 56 F2 | 	cmps	_var03, #0 wc
2d694                 | ' 		return(0);
2d694     00 FA 05 C6 |  if_b	mov	result1, #0
2d698     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2d69c     05 07 0A F2 | 	cmp	_var04, _var06 wz
2d6a0                 | ' 		return(0);
2d6a0     00 FA 05 A6 |  if_e	mov	result1, #0
2d6a4     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2d6a8     00 06 0E F2 | 	cmp	_var04, #0 wz
2d6ac                 | ' 		return(-1);
2d6ac     01 FA 65 A6 |  if_e	neg	result1, #1
2d6b0     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2d6b4     00 0A 0E F2 | 	cmp	_var06, #0 wz
2d6b8                 | ' 		return(1);
2d6b8     01 FA 05 A6 |  if_e	mov	result1, #1
2d6bc                 | ' 		return(c1 - c2);
2d6bc     03 FB 01 56 |  if_ne	mov	result1, _var04
2d6c0     05 FB 81 51 |  if_ne	sub	result1, _var06
2d6c4                 | _fatfs_cc_strncmp_ret
2d6c4     2D 00 64 FD | 	ret
2d6c8                 | 
2d6c8                 | _fatfs_cc_strchr
2d6c8                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
2d6c8                 | ' 	while ((c = *s++) != (char) charwanted)
2d6c8                 | LR__4380
2d6c8     09 01 02 F6 | 	mov	_var01, arg01
2d6cc     00 03 C2 FA | 	rdbyte	_var02, _var01
2d6d0     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2d6d4     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2d6d8     03 05 0A F2 | 	cmp	_var03, _var04 wz
2d6dc     01 12 06 F1 | 	add	arg01, #1
2d6e0     14 00 90 AD |  if_e	jmp	#LR__4381
2d6e4     01 05 02 F6 | 	mov	_var03, _var02
2d6e8     07 04 4E F7 | 	zerox	_var03, #7 wz
2d6ec     00 FA 05 A6 |  if_e	mov	result1, #0
2d6f0     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2d6f4     D0 FF 9F FD | 	jmp	#LR__4380
2d6f8                 | LR__4381
2d6f8                 | ' 	return((char *)--s);
2d6f8     01 12 86 F1 | 	sub	arg01, #1
2d6fc     09 FB 01 F6 | 	mov	result1, arg01
2d700                 | _fatfs_cc_strchr_ret
2d700     2D 00 64 FD | 	ret
2d704                 | 
2d704                 | _fatfs_cc_disk_initialize
2d704     04 4A 05 F6 | 	mov	COUNT_, #4
2d708     A8 00 A0 FD | 	call	#pushregs_
2d70c     40 F0 07 F1 | 	add	ptra, #64
2d710     04 4E 05 F1 | 	add	fp, #4
2d714     A7 12 42 FC | 	wrbyte	arg01, fp
2d718     01 00 00 FF 
2d71c     14 E4 05 F1 | 	add	objptr, ##532
2d720     F2 18 02 FB | 	rdlong	arg04, objptr
2d724     2C 4E 05 F1 | 	add	fp, #44
2d728     A7 18 62 FC | 	wrlong	arg04, fp
2d72c     04 E4 85 F1 | 	sub	objptr, #4
2d730     F2 18 02 FB | 	rdlong	arg04, objptr
2d734     04 4E 05 F1 | 	add	fp, #4
2d738     A7 18 62 FC | 	wrlong	arg04, fp
2d73c     08 E4 05 F1 | 	add	objptr, #8
2d740     F2 18 02 FB | 	rdlong	arg04, objptr
2d744     04 4E 05 F1 | 	add	fp, #4
2d748     A7 18 62 FC | 	wrlong	arg04, fp
2d74c     04 E4 05 F1 | 	add	objptr, #4
2d750     F2 18 02 FB | 	rdlong	arg04, objptr
2d754     04 4E 05 F1 | 	add	fp, #4
2d758     A7 18 62 FC | 	wrlong	arg04, fp
2d75c     04 E4 05 F1 | 	add	objptr, #4
2d760     F2 02 48 FC | 	wrbyte	#1, objptr
2d764     01 00 00 FF 
2d768     20 E4 85 F1 | 	sub	objptr, ##544
2d76c     38 4E 85 F1 | 	sub	fp, #56
2d770     A7 18 CA FA | 	rdbyte	arg04, fp wz
2d774     04 4E 85 F1 | 	sub	fp, #4
2d778                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2d778                 | '             return RES_NOTRDY;
2d778     03 FA 05 56 |  if_ne	mov	result1, #3
2d77c     D8 05 90 5D |  if_ne	jmp	#LR__4408
2d780     13 00 00 FF 
2d784     10 13 06 F6 | 	mov	arg01, ##10000
2d788     40 95 BF FD | 	call	#__system___waitus
2d78c     30 4E 05 F1 | 	add	fp, #48
2d790     A7 12 02 FB | 	rdlong	arg01, fp
2d794     09 01 08 FC | 	wrpin	#0, arg01
2d798     04 4E 05 F1 | 	add	fp, #4
2d79c     A7 12 02 FB | 	rdlong	arg01, fp
2d7a0     09 01 08 FC | 	wrpin	#0, arg01
2d7a4     04 4E 05 F1 | 	add	fp, #4
2d7a8     A7 12 02 FB | 	rdlong	arg01, fp
2d7ac     09 01 08 FC | 	wrpin	#0, arg01
2d7b0     04 4E 05 F1 | 	add	fp, #4
2d7b4     A7 12 02 FB | 	rdlong	arg01, fp
2d7b8     09 00 80 FF 
2d7bc     09 01 08 FC | 	wrpin	##4608, arg01
2d7c0     0C 4E 85 F1 | 	sub	fp, #12
2d7c4     A7 12 02 FB | 	rdlong	arg01, fp
2d7c8     59 12 62 FD | 	drvh	arg01
2d7cc     04 4E 05 F1 | 	add	fp, #4
2d7d0     A7 12 02 FB | 	rdlong	arg01, fp
2d7d4     59 12 62 FD | 	drvh	arg01
2d7d8     04 4E 05 F1 | 	add	fp, #4
2d7dc     A7 12 02 FB | 	rdlong	arg01, fp
2d7e0     59 12 62 FD | 	drvh	arg01
2d7e4     04 4E 05 F1 | 	add	fp, #4
2d7e8     A7 12 02 FB | 	rdlong	arg01, fp
2d7ec     59 12 62 FD | 	drvh	arg01
2d7f0     20 4E 85 F1 | 	sub	fp, #32
2d7f4     00 04 80 FF 
2d7f8     A7 20 68 FC | 	wrlong	##524304, fp
2d7fc     04 4E 05 F1 | 	add	fp, #4
2d800     20 03 80 FF 
2d804     A7 90 68 FC | 	wrlong	##409672, fp
2d808     14 4E 05 F1 | 	add	fp, #20
2d80c     A7 26 02 FB | 	rdlong	local01, fp
2d810     18 4E 85 F1 | 	sub	fp, #24
2d814     A7 16 02 FB | 	rdlong	arg03, fp
2d818     40 26 62 FD | 	dirl	local01
2d81c     A0 03 80 FF 
2d820     13 91 08 FC | 	wrpin	##475208, local01
2d824     13 17 12 FC | 	wxpin	arg03, local01
2d828     13 01 28 FC | 	wypin	#0, local01
2d82c     41 26 62 FD | 	dirh	local01
2d830     1C 4E 05 F1 | 	add	fp, #28
2d834     A7 28 02 FB | 	rdlong	local02, fp
2d838     14 27 82 F1 | 	sub	local01, local02
2d83c     07 26 06 F5 | 	and	local01, #7
2d840     18 26 66 F0 | 	shl	local01, #24
2d844     78 14 06 F6 | 	mov	arg02, #120
2d848     13 15 42 F5 | 	or	arg02, local01
2d84c     14 4E 85 F1 | 	sub	fp, #20
2d850     A7 14 62 FC | 	wrlong	arg02, fp
2d854     14 4E 05 F1 | 	add	fp, #20
2d858     A7 12 02 FB | 	rdlong	arg01, fp
2d85c     10 14 26 F4 | 	bith	arg02, #16
2d860     40 12 62 FD | 	dirl	arg01
2d864     09 15 02 FC | 	wrpin	arg02, arg01
2d868     09 3F 18 FC | 	wxpin	#31, arg01
2d86c     FF FF FF FF 
2d870     09 FF 2B FC | 	wypin	##-1, arg01
2d874     41 12 62 FD | 	dirh	arg01
2d878     04 4E 85 F1 | 	sub	fp, #4
2d87c     A7 14 02 FB | 	rdlong	arg02, fp
2d880     08 4E 05 F1 | 	add	fp, #8
2d884     A7 2A 02 FB | 	rdlong	local03, fp
2d888     15 15 82 F1 | 	sub	arg02, local03
2d88c     07 14 06 F5 | 	and	arg02, #7
2d890     18 14 66 F0 | 	shl	arg02, #24
2d894     14 4E 85 F1 | 	sub	fp, #20
2d898     A7 14 62 FC | 	wrlong	arg02, fp
2d89c     29 00 00 FF 
2d8a0     7A 14 46 F5 | 	or	arg02, ##21114
2d8a4     A7 14 62 FC | 	wrlong	arg02, fp
2d8a8     14 4E 05 F1 | 	add	fp, #20
2d8ac     A7 12 02 FB | 	rdlong	arg01, fp
2d8b0     40 12 62 FD | 	dirl	arg01
2d8b4     09 15 02 FC | 	wrpin	arg02, arg01
2d8b8     09 4F 18 FC | 	wxpin	#39, arg01
2d8bc     09 01 28 FC | 	wypin	#0, arg01
2d8c0     41 12 62 FD | 	dirh	arg01
2d8c4     28 4E 85 F1 | 	sub	fp, #40
2d8c8     A7 12 02 F6 | 	mov	arg01, fp
2d8cc     14 4E 85 F1 | 	sub	fp, #20
2d8d0     0A 14 06 F6 | 	mov	arg02, #10
2d8d4     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1195
2d8d8     00 12 06 F6 | 	mov	arg01, #0
2d8dc     00 14 06 F6 | 	mov	arg02, #0
2d8e0     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1219
2d8e4     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1205
2d8e8     64 12 06 F6 | 	mov	arg01, #100
2d8ec     DC 93 BF FD | 	call	#__system___waitus
2d8f0     14 4E 05 F1 | 	add	fp, #20
2d8f4     A7 12 02 F6 | 	mov	arg01, fp
2d8f8     14 4E 85 F1 | 	sub	fp, #20
2d8fc     0A 14 06 F6 | 	mov	arg02, #10
2d900     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1195
2d904     0C 4E 05 F1 | 	add	fp, #12
2d908     A7 00 48 FC | 	wrbyte	#0, fp
2d90c     0C 4E 85 F1 | 	sub	fp, #12
2d910     00 12 06 F6 | 	mov	arg01, #0
2d914     00 14 06 F6 | 	mov	arg02, #0
2d918     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1219
2d91c     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2d920     01 18 0E F2 | 	cmp	arg04, #1 wz
2d924     B8 03 90 5D |  if_ne	jmp	#LR__4407
2d928     08 12 06 F6 | 	mov	arg01, #8
2d92c     AA 15 06 F6 | 	mov	arg02, #426
2d930     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1219
2d934     FD FA E1 F8 | 	getbyte	result1, result1, #0
2d938     01 FA 0D F2 | 	cmp	result1, #1 wz
2d93c     98 01 90 5D |  if_ne	jmp	#LR__4393
2d940     14 4E 05 F1 | 	add	fp, #20
2d944     A7 12 02 F6 | 	mov	arg01, fp
2d948     14 4E 85 F1 | 	sub	fp, #20
2d94c     04 14 06 F6 | 	mov	arg02, #4
2d950     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1195
2d954     16 4E 05 F1 | 	add	fp, #22
2d958     A7 2C C2 FA | 	rdbyte	local04, fp
2d95c     16 4E 85 F1 | 	sub	fp, #22
2d960     01 2C 0E F2 | 	cmp	local04, #1 wz
2d964     17 4E 05 A1 |  if_e	add	fp, #23
2d968     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2d96c     17 4E 85 A1 |  if_e	sub	fp, #23
2d970     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2d974     68 03 90 5D |  if_ne	jmp	#LR__4406
2d978                 | ' 				for (tmr = 1000; tmr; tmr--) {
2d978     18 4E 05 F1 | 	add	fp, #24
2d97c     01 00 80 FF 
2d980     A7 D0 6B FC | 	wrlong	##1000, fp
2d984     18 4E 85 F1 | 	sub	fp, #24
2d988                 | LR__4390
2d988     18 4E 05 F1 | 	add	fp, #24
2d98c     A7 26 0A FB | 	rdlong	local01, fp wz
2d990     18 4E 85 F1 | 	sub	fp, #24
2d994     3C 00 90 AD |  if_e	jmp	#LR__4391
2d998     A9 12 06 F6 | 	mov	arg01, #169
2d99c     1E 14 C6 F9 | 	decod	arg02, #30
2d9a0     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1219
2d9a4     FD 2C 02 F6 | 	mov	local04, result1
2d9a8     07 2C 4E F7 | 	zerox	local04, #7 wz
2d9ac     24 00 90 AD |  if_e	jmp	#LR__4391
2d9b0     01 00 00 FF 
2d9b4     E8 13 06 F6 | 	mov	arg01, ##1000
2d9b8     10 93 BF FD | 	call	#__system___waitus
2d9bc     18 4E 05 F1 | 	add	fp, #24
2d9c0     A7 2C 02 FB | 	rdlong	local04, fp
2d9c4     01 2C 86 F1 | 	sub	local04, #1
2d9c8     A7 2C 62 FC | 	wrlong	local04, fp
2d9cc     18 4E 85 F1 | 	sub	fp, #24
2d9d0     B4 FF 9F FD | 	jmp	#LR__4390
2d9d4                 | LR__4391
2d9d4     18 4E 05 F1 | 	add	fp, #24
2d9d8     A7 2C 0A FB | 	rdlong	local04, fp wz
2d9dc     18 4E 85 F1 | 	sub	fp, #24
2d9e0     4C 00 90 AD |  if_e	jmp	#LR__4392
2d9e4     3A 12 06 F6 | 	mov	arg01, #58
2d9e8     00 14 06 F6 | 	mov	arg02, #0
2d9ec     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1219
2d9f0     FD 2A 02 F6 | 	mov	local03, result1
2d9f4     07 2A 4E F7 | 	zerox	local03, #7 wz
2d9f8     34 00 90 5D |  if_ne	jmp	#LR__4392
2d9fc     14 4E 05 F1 | 	add	fp, #20
2da00     A7 12 02 F6 | 	mov	arg01, fp
2da04     14 4E 85 F1 | 	sub	fp, #20
2da08     04 14 06 F6 | 	mov	arg02, #4
2da0c     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1195
2da10     14 4E 05 F1 | 	add	fp, #20
2da14     A7 26 C2 FA | 	rdbyte	local01, fp
2da18     40 26 CE F7 | 	test	local01, #64 wz
2da1c     0C 2C 06 56 |  if_ne	mov	local04, #12
2da20     04 2C 06 A6 |  if_e	mov	local04, #4
2da24     08 4E 85 F1 | 	sub	fp, #8
2da28     A7 2C 42 FC | 	wrbyte	local04, fp
2da2c     0C 4E 85 F1 | 	sub	fp, #12
2da30                 | LR__4392
2da30     14 2C 06 FB | 	rdlong	local04, #20
2da34     18 4E 05 F1 | 	add	fp, #24
2da38     A7 2C 62 FC | 	wrlong	local04, fp
2da3c     0C 4E 05 F1 | 	add	fp, #12
2da40     A7 2C 02 FB | 	rdlong	local04, fp
2da44     1B 2C 26 F4 | 	bith	local04, #27
2da48     A7 2C 62 FC | 	wrlong	local04, fp
2da4c     0C 4E 85 F1 | 	sub	fp, #12
2da50     A7 2C 02 FB | 	rdlong	local04, fp
2da54     18 4E 85 F1 | 	sub	fp, #24
2da58     68 78 04 FF 
2da5c     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2da60     1C 4E 05 C1 |  if_b	add	fp, #28
2da64     00 01 80 CF 
2da68     A7 08 68 CC |  if_b	wrlong	##131076, fp
2da6c     1C 4E 85 C1 |  if_b	sub	fp, #28
2da70     6C 02 90 CD |  if_b	jmp	#LR__4406
2da74     18 4E 05 F1 | 	add	fp, #24
2da78     A7 2C 02 FB | 	rdlong	local04, fp
2da7c     18 4E 85 F1 | 	sub	fp, #24
2da80     E1 F5 05 FF 
2da84     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2da88     1C 4E 05 C1 |  if_b	add	fp, #28
2da8c     00 01 80 CF 
2da90     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2da94     1C 4E 85 C1 |  if_b	sub	fp, #28
2da98     44 02 90 CD |  if_b	jmp	#LR__4406
2da9c     18 4E 05 F1 | 	add	fp, #24
2daa0     A7 2C 02 FB | 	rdlong	local04, fp
2daa4     18 4E 85 F1 | 	sub	fp, #24
2daa8     3B 58 08 FF 
2daac     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2dab0     1C 4E 05 C1 |  if_b	add	fp, #28
2dab4     00 01 80 CF 
2dab8     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2dabc     1C 4E 85 C1 |  if_b	sub	fp, #28
2dac0     1C 02 90 CD |  if_b	jmp	#LR__4406
2dac4     1C 4E 05 F1 | 	add	fp, #28
2dac8     80 01 80 FF 
2dacc     A7 10 68 FC | 	wrlong	##196616, fp
2dad0     1C 4E 85 F1 | 	sub	fp, #28
2dad4     08 02 90 FD | 	jmp	#LR__4406
2dad8                 | LR__4393
2dad8     A9 12 06 F6 | 	mov	arg01, #169
2dadc     00 14 06 F6 | 	mov	arg02, #0
2dae0     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1219
2dae4     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2dae8     02 2C 16 F2 | 	cmp	local04, #2 wc
2daec     18 00 90 3D |  if_ae	jmp	#LR__4394
2daf0     0C 4E 05 F1 | 	add	fp, #12
2daf4     A7 04 48 FC | 	wrbyte	#2, fp
2daf8     04 4E 05 F1 | 	add	fp, #4
2dafc     A7 52 49 FC | 	wrbyte	#169, fp
2db00     10 4E 85 F1 | 	sub	fp, #16
2db04     14 00 90 FD | 	jmp	#LR__4395
2db08                 | LR__4394
2db08     0C 4E 05 F1 | 	add	fp, #12
2db0c     A7 02 48 FC | 	wrbyte	#1, fp
2db10     04 4E 05 F1 | 	add	fp, #4
2db14     A7 02 48 FC | 	wrbyte	#1, fp
2db18     10 4E 85 F1 | 	sub	fp, #16
2db1c                 | LR__4395
2db1c                 | ' 				ty =  0x01 ; cmd =  (1) ;
2db1c                 | ' 			}
2db1c                 | ' 			for (tmr = 1000; tmr; tmr--) {
2db1c     18 4E 05 F1 | 	add	fp, #24
2db20     01 00 80 FF 
2db24     A7 D0 6B FC | 	wrlong	##1000, fp
2db28     18 4E 85 F1 | 	sub	fp, #24
2db2c                 | LR__4396
2db2c     18 4E 05 F1 | 	add	fp, #24
2db30     A7 2A 0A FB | 	rdlong	local03, fp wz
2db34     18 4E 85 F1 | 	sub	fp, #24
2db38     44 00 90 AD |  if_e	jmp	#LR__4397
2db3c     10 4E 05 F1 | 	add	fp, #16
2db40     A7 12 C2 FA | 	rdbyte	arg01, fp
2db44     10 4E 85 F1 | 	sub	fp, #16
2db48     00 14 06 F6 | 	mov	arg02, #0
2db4c     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1219
2db50     FD 2C 02 F6 | 	mov	local04, result1
2db54     07 2C 4E F7 | 	zerox	local04, #7 wz
2db58     24 00 90 AD |  if_e	jmp	#LR__4397
2db5c     01 00 00 FF 
2db60     E8 13 06 F6 | 	mov	arg01, ##1000
2db64     64 91 BF FD | 	call	#__system___waitus
2db68     18 4E 05 F1 | 	add	fp, #24
2db6c     A7 2C 02 FB | 	rdlong	local04, fp
2db70     01 2C 86 F1 | 	sub	local04, #1
2db74     A7 2C 62 FC | 	wrlong	local04, fp
2db78     18 4E 85 F1 | 	sub	fp, #24
2db7c     AC FF 9F FD | 	jmp	#LR__4396
2db80                 | LR__4397
2db80     18 4E 05 F1 | 	add	fp, #24
2db84     A7 2C 0A FB | 	rdlong	local04, fp wz
2db88     18 4E 85 F1 | 	sub	fp, #24
2db8c     14 00 90 AD |  if_e	jmp	#LR__4398
2db90     10 12 06 F6 | 	mov	arg01, #16
2db94     09 14 C6 F9 | 	decod	arg02, #9
2db98     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1219
2db9c     07 FA 4D F7 | 	zerox	result1, #7 wz
2dba0     0C 00 90 AD |  if_e	jmp	#LR__4399
2dba4                 | LR__4398
2dba4     0C 4E 05 F1 | 	add	fp, #12
2dba8     A7 00 48 FC | 	wrbyte	#0, fp
2dbac     0C 4E 85 F1 | 	sub	fp, #12
2dbb0                 | LR__4399
2dbb0     14 2C 06 FB | 	rdlong	local04, #20
2dbb4     18 4E 05 F1 | 	add	fp, #24
2dbb8     A7 2C 62 FC | 	wrlong	local04, fp
2dbbc     18 4E 85 F1 | 	sub	fp, #24
2dbc0     F0 FA 02 FF 
2dbc4     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2dbc8     18 00 90 3D |  if_ae	jmp	#LR__4400
2dbcc     24 4E 05 F1 | 	add	fp, #36
2dbd0     A7 2C 02 FB | 	rdlong	local04, fp
2dbd4     1B 2C 26 F4 | 	bith	local04, #27
2dbd8     A7 2C 62 FC | 	wrlong	local04, fp
2dbdc     24 4E 85 F1 | 	sub	fp, #36
2dbe0     2C 00 90 FD | 	jmp	#LR__4401
2dbe4                 | LR__4400
2dbe4     18 4E 05 F1 | 	add	fp, #24
2dbe8     A7 2C 02 FB | 	rdlong	local04, fp
2dbec     18 4E 85 F1 | 	sub	fp, #24
2dbf0     E1 F5 05 FF 
2dbf4     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2dbf8     24 4E 05 C1 |  if_b	add	fp, #36
2dbfc     A7 2C 02 CB |  if_b	rdlong	local04, fp
2dc00     80 00 04 CF 
2dc04     00 2C 46 C5 |  if_b	or	local04, ##134283264
2dc08     A7 2C 62 CC |  if_b	wrlong	local04, fp
2dc0c     24 4E 85 C1 |  if_b	sub	fp, #36
2dc10                 | LR__4401
2dc10     18 4E 05 F1 | 	add	fp, #24
2dc14     A7 2C 02 FB | 	rdlong	local04, fp
2dc18     18 4E 85 F1 | 	sub	fp, #24
2dc1c     F0 FA 02 FF 
2dc20     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2dc24     1C 4E 05 C1 |  if_b	add	fp, #28
2dc28     00 01 80 CF 
2dc2c     A7 08 68 CC |  if_b	wrlong	##131076, fp
2dc30     1C 4E 85 C1 |  if_b	sub	fp, #28
2dc34     A8 00 90 CD |  if_b	jmp	#LR__4405
2dc38     18 4E 05 F1 | 	add	fp, #24
2dc3c     A7 2C 02 FB | 	rdlong	local04, fp
2dc40     18 4E 85 F1 | 	sub	fp, #24
2dc44     68 78 04 FF 
2dc48     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2dc4c     1C 4E 05 C1 |  if_b	add	fp, #28
2dc50     80 01 80 CF 
2dc54     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2dc58     1C 4E 85 C1 |  if_b	sub	fp, #28
2dc5c     80 00 90 CD |  if_b	jmp	#LR__4404
2dc60     18 4E 05 F1 | 	add	fp, #24
2dc64     A7 2C 02 FB | 	rdlong	local04, fp
2dc68     18 4E 85 F1 | 	sub	fp, #24
2dc6c     E1 F5 05 FF 
2dc70     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2dc74     1C 4E 05 C1 |  if_b	add	fp, #28
2dc78     00 02 80 CF 
2dc7c     A7 10 68 CC |  if_b	wrlong	##262152, fp
2dc80     1C 4E 85 C1 |  if_b	sub	fp, #28
2dc84     58 00 90 CD |  if_b	jmp	#LR__4403
2dc88     18 4E 05 F1 | 	add	fp, #24
2dc8c     A7 2C 02 FB | 	rdlong	local04, fp
2dc90     18 4E 85 F1 | 	sub	fp, #24
2dc94     59 73 07 FF 
2dc98     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2dc9c     1C 4E 05 C1 |  if_b	add	fp, #28
2dca0     80 02 80 CF 
2dca4     A7 14 68 CC |  if_b	wrlong	##327690, fp
2dca8     1C 4E 85 C1 |  if_b	sub	fp, #28
2dcac     30 00 90 CD |  if_b	jmp	#LR__4402
2dcb0     18 4E 05 F1 | 	add	fp, #24
2dcb4     A7 2C 02 FB | 	rdlong	local04, fp
2dcb8     18 4E 85 F1 | 	sub	fp, #24
2dcbc     D1 F0 08 FF 
2dcc0     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2dcc4     1C 4E 05 C1 |  if_b	add	fp, #28
2dcc8     00 03 80 CF 
2dccc     A7 18 68 CC |  if_b	wrlong	##393228, fp
2dcd0     1C 4E 85 F3 | 	sumc	fp, #28
2dcd4     80 03 80 3F 
2dcd8     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2dcdc     1C 4E 85 31 |  if_ae	sub	fp, #28
2dce0                 | LR__4402
2dce0                 | LR__4403
2dce0                 | LR__4404
2dce0                 | LR__4405
2dce0                 | LR__4406
2dce0                 | LR__4407
2dce0     0C 4E 05 F1 | 	add	fp, #12
2dce4     A7 2C C2 FA | 	rdbyte	local04, fp
2dce8     01 00 00 FF 
2dcec     21 E4 05 F1 | 	add	objptr, ##545
2dcf0     F2 2C 42 FC | 	wrbyte	local04, objptr
2dcf4     A7 26 CA FA | 	rdbyte	local01, fp wz
2dcf8     00 2C 06 56 |  if_ne	mov	local04, #0
2dcfc     01 2C 06 A6 |  if_e	mov	local04, #1
2dd00     20 4E 05 F1 | 	add	fp, #32
2dd04     A7 2C 42 FC | 	wrbyte	local04, fp
2dd08     A7 2C C2 FA | 	rdbyte	local04, fp
2dd0c     2C 4E 85 F1 | 	sub	fp, #44
2dd10     01 E4 85 F1 | 	sub	objptr, #1
2dd14     F2 2C 42 FC | 	wrbyte	local04, objptr
2dd18     01 00 00 FF 
2dd1c     20 E4 85 F1 | 	sub	objptr, ##544
2dd20     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1205
2dd24     34 4E 05 F1 | 	add	fp, #52
2dd28     A7 12 02 FB | 	rdlong	arg01, fp
2dd2c     18 4E 85 F1 | 	sub	fp, #24
2dd30     A7 14 02 FB | 	rdlong	arg02, fp
2dd34     09 15 12 FC | 	wxpin	arg02, arg01
2dd38     1C 4E 05 F1 | 	add	fp, #28
2dd3c     A7 12 02 FB | 	rdlong	arg01, fp
2dd40     14 4E 85 F1 | 	sub	fp, #20
2dd44     A7 14 02 FB | 	rdlong	arg02, fp
2dd48     09 15 02 FC | 	wrpin	arg02, arg01
2dd4c                 | ' 
2dd4c                 | ' 		}
2dd4c                 | ' 	}
2dd4c                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2dd4c                 | ' 	CardType = ty;
2dd4c                 | ' 	s = ty ? 0 :  0x01 ;
2dd4c                 | ' 	Stat = s;
2dd4c                 | ' 
2dd4c                 | ' 	deselect();
2dd4c                 | ' 
2dd4c                 | ' 
2dd4c                 | ' 	_wxpin( PIN_CLK, ck_div );
2dd4c                 | ' 	_wrpin( PIN_DI, spm_tx );
2dd4c                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2dd4c                 | ' 	return s;
2dd4c     08 4E 05 F1 | 	add	fp, #8
2dd50     A7 FA C1 FA | 	rdbyte	result1, fp
2dd54     2C 4E 85 F1 | 	sub	fp, #44
2dd58                 | LR__4408
2dd58     A7 F0 03 F6 | 	mov	ptra, fp
2dd5c     B2 00 A0 FD | 	call	#popregs_
2dd60                 | _fatfs_cc_disk_initialize_ret
2dd60     2D 00 64 FD | 	ret
2dd64                 | 
2dd64                 | _fatfs_cc_disk_read
2dd64     05 4A 05 F6 | 	mov	COUNT_, #5
2dd68     A8 00 A0 FD | 	call	#pushregs_
2dd6c     0A 27 02 F6 | 	mov	local01, arg02
2dd70     0B 29 02 F6 | 	mov	local02, arg03
2dd74     0C 2B 02 F6 | 	mov	local03, arg04
2dd78     00 12 0E F2 | 	cmp	arg01, #0 wz
2dd7c     01 FA 05 56 |  if_ne	mov	result1, #1
2dd80                 | ' 
2dd80                 | ' 	return Stat;
2dd80     01 00 00 AF 
2dd84     20 E4 05 A1 |  if_e	add	objptr, ##544
2dd88     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2dd8c     01 00 00 AF 
2dd90     20 E4 85 A1 |  if_e	sub	objptr, ##544
2dd94     FD FA E1 F8 | 	getbyte	result1, result1, #0
2dd98     01 FA CD F7 | 	test	result1, #1 wz
2dd9c     03 FA 05 56 |  if_ne	mov	result1, #3
2dda0     84 00 90 5D |  if_ne	jmp	#LR__4412
2dda4     01 00 00 FF 
2dda8     21 E4 05 F1 | 	add	objptr, ##545
2ddac     F2 2C C2 FA | 	rdbyte	local04, objptr
2ddb0     01 00 00 FF 
2ddb4     21 E4 85 F1 | 	sub	objptr, ##545
2ddb8     08 2C CE F7 | 	test	local04, #8 wz
2ddbc     09 28 66 A0 |  if_e	shl	local02, #9
2ddc0     02 2A 16 F2 | 	cmp	local03, #2 wc
2ddc4     12 2C 06 36 |  if_ae	mov	local04, #18
2ddc8     11 2C 06 C6 |  if_b	mov	local04, #17
2ddcc     14 15 02 F6 | 	mov	arg02, local02
2ddd0     16 13 02 F6 | 	mov	arg01, local04
2ddd4     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1219
2ddd8     FD 2E 02 F6 | 	mov	local05, result1
2dddc     07 2E 4E F7 | 	zerox	local05, #7 wz
2dde0     30 00 90 5D |  if_ne	jmp	#LR__4411
2dde4                 | ' 		do {
2dde4                 | LR__4410
2dde4     13 13 02 F6 | 	mov	arg01, local01
2dde8     09 14 C6 F9 | 	decod	arg02, #9
2ddec     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1213
2ddf0     00 FA 0D F2 | 	cmp	result1, #0 wz
2ddf4     01 00 00 5F 
2ddf8     00 26 06 51 |  if_ne	add	local01, ##512
2ddfc     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4410
2de00     16 2D E2 F8 | 	getbyte	local04, local04, #0
2de04     12 2C 0E F2 | 	cmp	local04, #18 wz
2de08     0C 12 06 A6 |  if_e	mov	arg01, #12
2de0c     00 14 06 A6 |  if_e	mov	arg02, #0
2de10     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1219
2de14                 | LR__4411
2de14     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1205
2de18                 | ' 	}
2de18                 | ' 	deselect();
2de18                 | ' 
2de18                 | ' 	return count ? RES_ERROR : RES_OK;
2de18     00 2A 0E F2 | 	cmp	local03, #0 wz
2de1c     01 2E 06 56 |  if_ne	mov	local05, #1
2de20     00 2E 06 A6 |  if_e	mov	local05, #0
2de24     17 FB 01 F6 | 	mov	result1, local05
2de28                 | LR__4412
2de28     A7 F0 03 F6 | 	mov	ptra, fp
2de2c     B2 00 A0 FD | 	call	#popregs_
2de30                 | _fatfs_cc_disk_read_ret
2de30     2D 00 64 FD | 	ret
2de34                 | 
2de34                 | _fatfs_cc_disk_write
2de34     04 4A 05 F6 | 	mov	COUNT_, #4
2de38     A8 00 A0 FD | 	call	#pushregs_
2de3c     0A 27 02 F6 | 	mov	local01, arg02
2de40     0C 29 02 F6 | 	mov	local02, arg04
2de44     0B 2B 02 F6 | 	mov	local03, arg03
2de48     00 12 0E F2 | 	cmp	arg01, #0 wz
2de4c     01 FA 05 56 |  if_ne	mov	result1, #1
2de50                 | ' 
2de50                 | ' 	return Stat;
2de50     01 00 00 AF 
2de54     20 E4 05 A1 |  if_e	add	objptr, ##544
2de58     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2de5c     01 00 00 AF 
2de60     20 E4 85 A1 |  if_e	sub	objptr, ##544
2de64     FD FA E1 F8 | 	getbyte	result1, result1, #0
2de68     01 FA CD F7 | 	test	result1, #1 wz
2de6c     03 FA 05 56 |  if_ne	mov	result1, #3
2de70     D4 00 90 5D |  if_ne	jmp	#LR__4424
2de74     01 00 00 FF 
2de78     21 E4 05 F1 | 	add	objptr, ##545
2de7c     F2 16 C2 FA | 	rdbyte	arg03, objptr
2de80     01 00 00 FF 
2de84     21 E4 85 F1 | 	sub	objptr, ##545
2de88     08 16 CE F7 | 	test	arg03, #8 wz
2de8c     09 2A 66 A0 |  if_e	shl	local03, #9
2de90     01 28 0E F2 | 	cmp	local02, #1 wz
2de94     30 00 90 5D |  if_ne	jmp	#LR__4420
2de98     18 12 06 F6 | 	mov	arg01, #24
2de9c     15 15 02 F6 | 	mov	arg02, local03
2dea0     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1219
2dea4     FD 2C 02 F6 | 	mov	local04, result1
2dea8     07 2C 4E F7 | 	zerox	local04, #7 wz
2deac     84 00 90 5D |  if_ne	jmp	#LR__4423
2deb0     13 13 02 F6 | 	mov	arg01, local01
2deb4     FE 14 06 F6 | 	mov	arg02, #254
2deb8     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1215
2debc     00 FA 0D F2 | 	cmp	result1, #0 wz
2dec0     00 28 06 56 |  if_ne	mov	local02, #0
2dec4     6C 00 90 FD | 	jmp	#LR__4423
2dec8                 | LR__4420
2dec8     01 00 00 FF 
2decc     21 E4 05 F1 | 	add	objptr, ##545
2ded0     F2 2C C2 FA | 	rdbyte	local04, objptr
2ded4     01 00 00 FF 
2ded8     21 E4 85 F1 | 	sub	objptr, ##545
2dedc     06 2C CE F7 | 	test	local04, #6 wz
2dee0     97 12 06 56 |  if_ne	mov	arg01, #151
2dee4     14 15 02 56 |  if_ne	mov	arg02, local02
2dee8     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1219
2deec     15 15 02 F6 | 	mov	arg02, local03
2def0     19 12 06 F6 | 	mov	arg01, #25
2def4     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1219
2def8     FD 2C 02 F6 | 	mov	local04, result1
2defc     07 2C 4E F7 | 	zerox	local04, #7 wz
2df00     30 00 90 5D |  if_ne	jmp	#LR__4422
2df04                 | ' 			do {
2df04                 | LR__4421
2df04     13 13 02 F6 | 	mov	arg01, local01
2df08     FC 14 06 F6 | 	mov	arg02, #252
2df0c     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1215
2df10     00 FA 0D F2 | 	cmp	result1, #0 wz
2df14     01 00 00 5F 
2df18     00 26 06 51 |  if_ne	add	local01, ##512
2df1c     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4421
2df20     00 12 06 F6 | 	mov	arg01, #0
2df24     FD 14 06 F6 | 	mov	arg02, #253
2df28     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1215
2df2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2df30     01 28 06 A6 |  if_e	mov	local02, #1
2df34                 | LR__4422
2df34                 | LR__4423
2df34     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1205
2df38                 | ' 				count = 1;
2df38                 | ' 		}
2df38                 | ' 	}
2df38                 | ' 	deselect();
2df38                 | ' 
2df38                 | ' 	return count ? RES_ERROR : RES_OK;
2df38     00 28 0E F2 | 	cmp	local02, #0 wz
2df3c     01 2C 06 56 |  if_ne	mov	local04, #1
2df40     00 2C 06 A6 |  if_e	mov	local04, #0
2df44     16 FB 01 F6 | 	mov	result1, local04
2df48                 | LR__4424
2df48     A7 F0 03 F6 | 	mov	ptra, fp
2df4c     B2 00 A0 FD | 	call	#popregs_
2df50                 | _fatfs_cc_disk_write_ret
2df50     2D 00 64 FD | 	ret
2df54                 | 
2df54                 | _fatfs_cc_disk_ioctl
2df54     01 4A 05 F6 | 	mov	COUNT_, #1
2df58     A8 00 A0 FD | 	call	#pushregs_
2df5c     30 F0 07 F1 | 	add	ptra, #48
2df60     04 4E 05 F1 | 	add	fp, #4
2df64     A7 12 42 FC | 	wrbyte	arg01, fp
2df68     04 4E 05 F1 | 	add	fp, #4
2df6c     A7 14 42 FC | 	wrbyte	arg02, fp
2df70     04 4E 05 F1 | 	add	fp, #4
2df74     A7 16 62 FC | 	wrlong	arg03, fp
2df78     08 4E 85 F1 | 	sub	fp, #8
2df7c     A7 12 CA FA | 	rdbyte	arg01, fp wz
2df80     04 4E 85 F1 | 	sub	fp, #4
2df84     01 FA 05 56 |  if_ne	mov	result1, #1
2df88                 | ' 
2df88                 | ' 	return Stat;
2df88     01 00 00 AF 
2df8c     20 E4 05 A1 |  if_e	add	objptr, ##544
2df90     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2df94     01 00 00 AF 
2df98     20 E4 85 A1 |  if_e	sub	objptr, ##544
2df9c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2dfa0     01 FA CD F7 | 	test	result1, #1 wz
2dfa4     03 FA 05 56 |  if_ne	mov	result1, #3
2dfa8     E4 01 90 5D |  if_ne	jmp	#LR__4438
2dfac     10 4E 05 F1 | 	add	fp, #16
2dfb0     A7 02 68 FC | 	wrlong	#1, fp
2dfb4                 | ' 
2dfb4                 | ' 	res = RES_ERROR;
2dfb4                 | ' 	switch (ctrl) {
2dfb4     08 4E 85 F1 | 	sub	fp, #8
2dfb8     A7 26 C2 FA | 	rdbyte	local01, fp
2dfbc     08 4E 85 F1 | 	sub	fp, #8
2dfc0     04 26 26 F3 | 	fle	local01, #4
2dfc4     30 26 62 FD | 	jmprel	local01
2dfc8                 | LR__4430
2dfc8     10 00 90 FD | 	jmp	#LR__4431
2dfcc     24 00 90 FD | 	jmp	#LR__4432
2dfd0     A0 01 90 FD | 	jmp	#LR__4436
2dfd4     80 01 90 FD | 	jmp	#LR__4435
2dfd8     98 01 90 FD | 	jmp	#LR__4436
2dfdc                 | LR__4431
2dfdc     B4 79 B0 FD | 	call	#_fatfs_cc_select_1209
2dfe0     00 FA 0D F2 | 	cmp	result1, #0 wz
2dfe4     10 4E 05 51 |  if_ne	add	fp, #16
2dfe8     A7 00 68 5C |  if_ne	wrlong	#0, fp
2dfec     10 4E 85 51 |  if_ne	sub	fp, #16
2dff0                 | ' 			break;
2dff0     8C 01 90 FD | 	jmp	#LR__4437
2dff4                 | LR__4432
2dff4     09 12 06 F6 | 	mov	arg01, #9
2dff8     00 14 06 F6 | 	mov	arg02, #0
2dffc     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1219
2e000     FD 26 02 F6 | 	mov	local01, result1
2e004     07 26 4E F7 | 	zerox	local01, #7 wz
2e008     74 01 90 5D |  if_ne	jmp	#LR__4437
2e00c     18 4E 05 F1 | 	add	fp, #24
2e010     A7 12 02 F6 | 	mov	arg01, fp
2e014     18 4E 85 F1 | 	sub	fp, #24
2e018     10 14 06 F6 | 	mov	arg02, #16
2e01c     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1213
2e020     00 FA 0D F2 | 	cmp	result1, #0 wz
2e024     58 01 90 AD |  if_e	jmp	#LR__4437
2e028     18 4E 05 F1 | 	add	fp, #24
2e02c     A7 26 C2 FA | 	rdbyte	local01, fp
2e030     18 4E 85 F1 | 	sub	fp, #24
2e034     06 26 46 F0 | 	shr	local01, #6
2e038     01 26 0E F2 | 	cmp	local01, #1 wz
2e03c     5C 00 90 5D |  if_ne	jmp	#LR__4433
2e040     21 4E 05 F1 | 	add	fp, #33
2e044     A7 26 C2 FA | 	rdbyte	local01, fp
2e048     01 4E 85 F1 | 	sub	fp, #1
2e04c     A7 FA C1 FA | 	rdbyte	result1, fp
2e050     FD FA 31 F9 | 	getword	result1, result1, #0
2e054     08 FA 65 F0 | 	shl	result1, #8
2e058     FD 26 02 F1 | 	add	local01, result1
2e05c     01 4E 85 F1 | 	sub	fp, #1
2e060     A7 FA C1 FA | 	rdbyte	result1, fp
2e064     3F FA 05 F5 | 	and	result1, #63
2e068     10 FA 65 F0 | 	shl	result1, #16
2e06c     FD 26 02 F1 | 	add	local01, result1
2e070     01 26 06 F1 | 	add	local01, #1
2e074     09 4E 05 F1 | 	add	fp, #9
2e078     A7 26 62 FC | 	wrlong	local01, fp
2e07c     1C 4E 85 F1 | 	sub	fp, #28
2e080     A7 26 02 FB | 	rdlong	local01, fp
2e084     1C 4E 05 F1 | 	add	fp, #28
2e088     A7 FA 01 FB | 	rdlong	result1, fp
2e08c     28 4E 85 F1 | 	sub	fp, #40
2e090     0A FA 65 F0 | 	shl	result1, #10
2e094     13 FB 61 FC | 	wrlong	result1, local01
2e098     AC 00 90 FD | 	jmp	#LR__4434
2e09c                 | LR__4433
2e09c     1D 4E 05 F1 | 	add	fp, #29
2e0a0     A7 26 C2 FA | 	rdbyte	local01, fp
2e0a4     13 27 42 F8 | 	getnib	local01, local01, #0
2e0a8     05 4E 05 F1 | 	add	fp, #5
2e0ac     A7 FA C1 FA | 	rdbyte	result1, fp
2e0b0     80 FA 05 F5 | 	and	result1, #128
2e0b4     07 FA C5 F0 | 	sar	result1, #7
2e0b8     FD 26 02 F1 | 	add	local01, result1
2e0bc     01 4E 85 F1 | 	sub	fp, #1
2e0c0     A7 FA C1 FA | 	rdbyte	result1, fp
2e0c4     03 FA 05 F5 | 	and	result1, #3
2e0c8     01 FA 65 F0 | 	shl	result1, #1
2e0cc     FD 26 02 F1 | 	add	local01, result1
2e0d0     02 26 06 F1 | 	add	local01, #2
2e0d4     0D 4E 85 F1 | 	sub	fp, #13
2e0d8     A7 26 42 FC | 	wrbyte	local01, fp
2e0dc     0C 4E 05 F1 | 	add	fp, #12
2e0e0     A7 26 C2 FA | 	rdbyte	local01, fp
2e0e4     06 26 46 F0 | 	shr	local01, #6
2e0e8     01 4E 85 F1 | 	sub	fp, #1
2e0ec     A7 FA C1 FA | 	rdbyte	result1, fp
2e0f0     FD FA 31 F9 | 	getword	result1, result1, #0
2e0f4     02 FA 65 F0 | 	shl	result1, #2
2e0f8     FD 26 02 F1 | 	add	local01, result1
2e0fc     01 4E 85 F1 | 	sub	fp, #1
2e100     A7 FA C1 FA | 	rdbyte	result1, fp
2e104     03 FA 05 F5 | 	and	result1, #3
2e108     FD FA 31 F9 | 	getword	result1, result1, #0
2e10c     0A FA 65 F0 | 	shl	result1, #10
2e110     FD 26 02 F1 | 	add	local01, result1
2e114     01 26 06 F1 | 	add	local01, #1
2e118     0A 4E 05 F1 | 	add	fp, #10
2e11c     A7 26 62 FC | 	wrlong	local01, fp
2e120     1C 4E 85 F1 | 	sub	fp, #28
2e124     A7 26 02 FB | 	rdlong	local01, fp
2e128     1C 4E 05 F1 | 	add	fp, #28
2e12c     A7 FA 01 FB | 	rdlong	result1, fp
2e130     14 4E 85 F1 | 	sub	fp, #20
2e134     A7 16 C2 FA | 	rdbyte	arg03, fp
2e138     14 4E 85 F1 | 	sub	fp, #20
2e13c     09 16 86 F1 | 	sub	arg03, #9
2e140     0B FB 61 F0 | 	shl	result1, arg03
2e144     13 FB 61 FC | 	wrlong	result1, local01
2e148                 | LR__4434
2e148     10 4E 05 F1 | 	add	fp, #16
2e14c     A7 00 68 FC | 	wrlong	#0, fp
2e150     10 4E 85 F1 | 	sub	fp, #16
2e154                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2e154                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2e154                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2e154                 | ' 				}
2e154                 | ' 				res = RES_OK;
2e154                 | ' 			}
2e154                 | ' 			break;
2e154     28 00 90 FD | 	jmp	#LR__4437
2e158                 | LR__4435
2e158     0C 4E 05 F1 | 	add	fp, #12
2e15c     A7 26 02 FB | 	rdlong	local01, fp
2e160     13 01 69 FC | 	wrlong	#128, local01
2e164     04 4E 05 F1 | 	add	fp, #4
2e168     A7 00 68 FC | 	wrlong	#0, fp
2e16c     10 4E 85 F1 | 	sub	fp, #16
2e170                 | ' 			*(DWORD*)buff = 128;
2e170                 | ' 			res = RES_OK;
2e170                 | ' 			break;
2e170     0C 00 90 FD | 	jmp	#LR__4437
2e174                 | LR__4436
2e174     10 4E 05 F1 | 	add	fp, #16
2e178     A7 08 68 FC | 	wrlong	#4, fp
2e17c     10 4E 85 F1 | 	sub	fp, #16
2e180                 | LR__4437
2e180     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1205
2e184                 | ' 			res = RES_PARERR;
2e184                 | ' 	}
2e184                 | ' 
2e184                 | ' 	deselect();
2e184                 | ' 
2e184                 | ' 	return res;
2e184     10 4E 05 F1 | 	add	fp, #16
2e188     A7 FA 01 FB | 	rdlong	result1, fp
2e18c     10 4E 85 F1 | 	sub	fp, #16
2e190                 | LR__4438
2e190     A7 F0 03 F6 | 	mov	ptra, fp
2e194     B2 00 A0 FD | 	call	#popregs_
2e198                 | _fatfs_cc_disk_ioctl_ret
2e198     2D 00 64 FD | 	ret
2e19c                 | 
2e19c                 | _fatfs_cc_disk_setpins
2e19c     00 12 0E F2 | 	cmp	arg01, #0 wz
2e1a0     01 FA 65 56 |  if_ne	neg	result1, #1
2e1a4     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2e1a8     01 00 00 FF 
2e1ac     10 E4 05 F1 | 	add	objptr, ##528
2e1b0     F2 14 62 FC | 	wrlong	arg02, objptr
2e1b4     04 E4 05 F1 | 	add	objptr, #4
2e1b8     F2 16 62 FC | 	wrlong	arg03, objptr
2e1bc     04 E4 05 F1 | 	add	objptr, #4
2e1c0     F2 18 62 FC | 	wrlong	arg04, objptr
2e1c4     04 E4 05 F1 | 	add	objptr, #4
2e1c8     F2 1A 62 FC | 	wrlong	arg05, objptr
2e1cc     01 00 00 FF 
2e1d0     1C E4 85 F1 | 	sub	objptr, ##540
2e1d4     00 FA 05 F6 | 	mov	result1, #0
2e1d8                 | _fatfs_cc_disk_setpins_ret
2e1d8     2D 00 64 FD | 	ret
2e1dc                 | 
2e1dc                 | _fatfs_cc_tchar2uni
2e1dc     09 01 02 FB | 	rdlong	_var01, arg01
2e1e0     00 03 02 F6 | 	mov	_var02, _var01
2e1e4     01 00 06 F1 | 	add	_var01, #1
2e1e8     00 05 02 F6 | 	mov	_var03, _var01
2e1ec     01 07 C2 FA | 	rdbyte	_var04, _var02
2e1f0     80 06 CE F7 | 	test	_var04, #128 wz
2e1f4     E8 00 90 AD |  if_e	jmp	#LR__4447
2e1f8     03 09 02 F6 | 	mov	_var05, _var04
2e1fc     E0 08 06 F5 | 	and	_var05, #224
2e200     C0 08 0E F2 | 	cmp	_var05, #192 wz
2e204     1F 06 06 A5 |  if_e	and	_var04, #31
2e208     01 0A 06 A6 |  if_e	mov	_var06, #1
2e20c     34 00 90 AD |  if_e	jmp	#LR__4441
2e210     03 09 02 F6 | 	mov	_var05, _var04
2e214     F0 08 06 F5 | 	and	_var05, #240
2e218     E0 08 0E F2 | 	cmp	_var05, #224 wz
2e21c     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2e220     02 0A 06 A6 |  if_e	mov	_var06, #2
2e224     1C 00 90 AD |  if_e	jmp	#LR__4440
2e228     03 09 02 F6 | 	mov	_var05, _var04
2e22c     F8 08 06 F5 | 	and	_var05, #248
2e230     F0 08 0E F2 | 	cmp	_var05, #240 wz
2e234     07 06 06 A5 |  if_e	and	_var04, #7
2e238     03 0A 06 A6 |  if_e	mov	_var06, #3
2e23c                 | ' 			return 0xFFFFFFFF;
2e23c     01 FA 65 56 |  if_ne	neg	result1, #1
2e240     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2e244                 | LR__4440
2e244                 | LR__4441
2e244                 | ' 		}
2e244                 | ' 		do {
2e244                 | LR__4442
2e244     02 0D C2 FA | 	rdbyte	_var07, _var03
2e248     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2e24c     C0 08 06 F5 | 	and	_var05, #192
2e250     80 08 0E F2 | 	cmp	_var05, #128 wz
2e254     01 04 06 F1 | 	add	_var03, #1
2e258     01 FA 65 56 |  if_ne	neg	result1, #1
2e25c     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2e260     06 06 66 F0 | 	shl	_var04, #6
2e264     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2e268     3F 02 06 F5 | 	and	_var02, #63
2e26c     01 07 42 F5 | 	or	_var04, _var02
2e270     F4 0B 6E FB | 	djnz	_var06, #LR__4442
2e274     80 06 16 F2 | 	cmp	_var04, #128 wc
2e278     24 00 90 CD |  if_b	jmp	#LR__4444
2e27c     6C 00 00 FF 
2e280     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2e284     0C 00 90 CD |  if_b	jmp	#LR__4443
2e288     70 00 00 FF 
2e28c     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2e290     0C 00 90 CD |  if_b	jmp	#LR__4444
2e294                 | LR__4443
2e294     80 08 00 FF 
2e298     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2e29c     08 00 90 CD |  if_b	jmp	#LR__4445
2e2a0                 | LR__4444
2e2a0     01 FA 65 F6 | 	neg	result1, #1
2e2a4     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2e2a8                 | LR__4445
2e2a8     80 00 00 FF 
2e2ac     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2e2b0     2C 00 90 CD |  if_b	jmp	#LR__4446
2e2b4     03 03 02 F6 | 	mov	_var02, _var04
2e2b8     80 00 00 FF 
2e2bc     00 02 86 F1 | 	sub	_var02, ##65536
2e2c0     06 02 66 F0 | 	shl	_var02, #6
2e2c4     80 FF 01 FF 
2e2c8     00 02 06 F5 | 	and	_var02, ##67043328
2e2cc     6E 00 6C FF 
2e2d0     00 08 06 F6 | 	mov	_var05, ##-671032320
2e2d4     01 09 42 F5 | 	or	_var05, _var02
2e2d8     09 06 46 F7 | 	zerox	_var04, #9
2e2dc     04 07 42 F5 | 	or	_var04, _var05
2e2e0                 | LR__4446
2e2e0                 | LR__4447
2e2e0     09 05 62 FC | 	wrlong	_var03, arg01
2e2e4                 | ' 	}
2e2e4                 | ' #line 811 "ff.c"
2e2e4                 | ' 	*str = p;
2e2e4                 | ' 	return uc;
2e2e4     03 FB 01 F6 | 	mov	result1, _var04
2e2e8                 | _fatfs_cc_tchar2uni_ret
2e2e8     2D 00 64 FD | 	ret
2e2ec                 | 
2e2ec                 | _fatfs_cc_put_utf
2e2ec     80 12 16 F2 | 	cmp	arg01, #128 wc
2e2f0     18 00 90 3D |  if_ae	jmp	#LR__4450
2e2f4     01 16 16 F2 | 	cmp	arg03, #1 wc
2e2f8     00 FA 05 C6 |  if_b	mov	result1, #0
2e2fc     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2e300     0A 13 42 FC | 	wrbyte	arg01, arg02
2e304                 | ' 		*buf = (TCHAR)chr;
2e304                 | ' 		return 1;
2e304     01 FA 05 F6 | 	mov	result1, #1
2e308     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e30c                 | LR__4450
2e30c     04 00 00 FF 
2e310     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2e314     40 00 90 3D |  if_ae	jmp	#LR__4451
2e318     02 16 16 F2 | 	cmp	arg03, #2 wc
2e31c     00 FA 05 C6 |  if_b	mov	result1, #0
2e320     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2e324     09 FB 01 F6 | 	mov	result1, arg01
2e328     06 FA 45 F0 | 	shr	result1, #6
2e32c     1F FA 05 F5 | 	and	result1, #31
2e330     C0 16 06 F6 | 	mov	arg03, #192
2e334     FD 16 42 F5 | 	or	arg03, result1
2e338     0A 17 42 FC | 	wrbyte	arg03, arg02
2e33c     01 14 06 F1 | 	add	arg02, #1
2e340     3F 12 06 F5 | 	and	arg01, #63
2e344     80 FA 05 F6 | 	mov	result1, #128
2e348     09 FB 41 F5 | 	or	result1, arg01
2e34c     0A FB 41 FC | 	wrbyte	result1, arg02
2e350                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2e350                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2e350                 | ' 		return 2;
2e350     02 FA 05 F6 | 	mov	result1, #2
2e354     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e358                 | LR__4451
2e358     80 00 00 FF 
2e35c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2e360     70 00 90 3D |  if_ae	jmp	#LR__4454
2e364     03 16 16 F2 | 	cmp	arg03, #3 wc
2e368     18 00 90 CD |  if_b	jmp	#LR__4452
2e36c     6C 00 00 FF 
2e370     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2e374     14 00 90 CD |  if_b	jmp	#LR__4453
2e378     70 00 00 FF 
2e37c     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2e380     08 00 90 3D |  if_ae	jmp	#LR__4453
2e384                 | LR__4452
2e384     00 FA 05 F6 | 	mov	result1, #0
2e388     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e38c                 | LR__4453
2e38c     09 FB 59 F8 | 	getnib	result1, arg01, #3
2e390     E0 16 06 F6 | 	mov	arg03, #224
2e394     FD 16 42 F5 | 	or	arg03, result1
2e398     0A 17 42 FC | 	wrbyte	arg03, arg02
2e39c     01 14 06 F1 | 	add	arg02, #1
2e3a0     09 FB 01 F6 | 	mov	result1, arg01
2e3a4     06 FA 45 F0 | 	shr	result1, #6
2e3a8     3F FA 05 F5 | 	and	result1, #63
2e3ac     80 16 06 F6 | 	mov	arg03, #128
2e3b0     FD 16 42 F5 | 	or	arg03, result1
2e3b4     0A 17 42 FC | 	wrbyte	arg03, arg02
2e3b8     01 14 06 F1 | 	add	arg02, #1
2e3bc     3F 12 06 F5 | 	and	arg01, #63
2e3c0     80 FA 05 F6 | 	mov	result1, #128
2e3c4     09 FB 41 F5 | 	or	result1, arg01
2e3c8     0A FB 41 FC | 	wrbyte	result1, arg02
2e3cc                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2e3cc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2e3cc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2e3cc                 | ' 		return 3;
2e3cc     03 FA 05 F6 | 	mov	result1, #3
2e3d0     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e3d4                 | LR__4454
2e3d4     04 16 16 F2 | 	cmp	arg03, #4 wc
2e3d8     00 FA 05 C6 |  if_b	mov	result1, #0
2e3dc     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2e3e0     09 01 02 F6 | 	mov	_var01, arg01
2e3e4     E0 01 06 F4 | 	bitl	_var01, #480
2e3e8     00 00 6C FF 
2e3ec     00 00 86 F1 | 	sub	_var01, ##-671088640
2e3f0     06 00 46 F0 | 	shr	_var01, #6
2e3f4     09 13 32 F9 | 	getword	arg01, arg01, #0
2e3f8     6E 00 00 FF 
2e3fc     00 12 86 F1 | 	sub	arg01, ##56320
2e400     00 08 00 FF 
2e404     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2e408     02 00 00 CF 
2e40c     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2e410     00 FA 05 36 |  if_ae	mov	result1, #0
2e414     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2e418     09 01 42 F5 | 	or	_var01, arg01
2e41c     80 00 00 FF 
2e420     00 00 06 F1 | 	add	_var01, ##65536
2e424     00 FB 01 F6 | 	mov	result1, _var01
2e428     12 FA 45 F0 | 	shr	result1, #18
2e42c     07 FA 05 F5 | 	and	result1, #7
2e430     F0 16 06 F6 | 	mov	arg03, #240
2e434     FD 16 42 F5 | 	or	arg03, result1
2e438     0A 17 42 FC | 	wrbyte	arg03, arg02
2e43c     01 14 06 F1 | 	add	arg02, #1
2e440     00 FB 01 F6 | 	mov	result1, _var01
2e444     0C FA 45 F0 | 	shr	result1, #12
2e448     3F FA 05 F5 | 	and	result1, #63
2e44c     80 16 06 F6 | 	mov	arg03, #128
2e450     FD 16 42 F5 | 	or	arg03, result1
2e454     0A 17 42 FC | 	wrbyte	arg03, arg02
2e458     01 14 06 F1 | 	add	arg02, #1
2e45c     00 FB 01 F6 | 	mov	result1, _var01
2e460     06 FA 45 F0 | 	shr	result1, #6
2e464     3F FA 05 F5 | 	and	result1, #63
2e468     80 16 06 F6 | 	mov	arg03, #128
2e46c     FD 16 42 F5 | 	or	arg03, result1
2e470     0A 17 42 FC | 	wrbyte	arg03, arg02
2e474     01 14 06 F1 | 	add	arg02, #1
2e478     3F 00 06 F5 | 	and	_var01, #63
2e47c     80 FA 05 F6 | 	mov	result1, #128
2e480     00 FB 41 F5 | 	or	result1, _var01
2e484     0A FB 41 FC | 	wrbyte	result1, arg02
2e488                 | ' 	chr = (hc | chr) + 0x10000;
2e488                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2e488                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2e488                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2e488                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2e488                 | ' 	return 4;
2e488     04 FA 05 F6 | 	mov	result1, #4
2e48c                 | _fatfs_cc_put_utf_ret
2e48c     2D 00 64 FD | 	ret
2e490                 | 
2e490                 | _fatfs_cc_sync_window
2e490     02 4A 05 F6 | 	mov	COUNT_, #2
2e494     A8 00 A0 FD | 	call	#pushregs_
2e498     09 27 02 F6 | 	mov	local01, arg01
2e49c     00 28 06 F6 | 	mov	local02, #0
2e4a0     03 26 06 F1 | 	add	local01, #3
2e4a4     13 FB C9 FA | 	rdbyte	result1, local01 wz
2e4a8     03 26 86 F1 | 	sub	local01, #3
2e4ac     A4 00 90 AD |  if_e	jmp	#LR__4462
2e4b0     01 26 06 F1 | 	add	local01, #1
2e4b4     13 13 C2 FA | 	rdbyte	arg01, local01
2e4b8     33 26 06 F1 | 	add	local01, #51
2e4bc     13 15 02 F6 | 	mov	arg02, local01
2e4c0     04 26 86 F1 | 	sub	local01, #4
2e4c4     13 17 02 FB | 	rdlong	arg03, local01
2e4c8     30 26 86 F1 | 	sub	local01, #48
2e4cc     01 18 06 F6 | 	mov	arg04, #1
2e4d0     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2e4d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e4d8     74 00 90 5D |  if_ne	jmp	#LR__4460
2e4dc     03 26 06 F1 | 	add	local01, #3
2e4e0     13 01 48 FC | 	wrbyte	#0, local01
2e4e4     2D 26 06 F1 | 	add	local01, #45
2e4e8     13 FB 01 FB | 	rdlong	result1, local01
2e4ec     0C 26 86 F1 | 	sub	local01, #12
2e4f0     13 19 02 FB | 	rdlong	arg04, local01
2e4f4     0C FB 81 F1 | 	sub	result1, arg04
2e4f8     08 26 86 F1 | 	sub	local01, #8
2e4fc     13 19 02 FB | 	rdlong	arg04, local01
2e500     1C 26 86 F1 | 	sub	local01, #28
2e504     0C FB 11 F2 | 	cmp	result1, arg04 wc
2e508     48 00 90 3D |  if_ae	jmp	#LR__4461
2e50c     02 26 06 F1 | 	add	local01, #2
2e510     13 19 C2 FA | 	rdbyte	arg04, local01
2e514     02 26 86 F1 | 	sub	local01, #2
2e518     02 18 0E F2 | 	cmp	arg04, #2 wz
2e51c     34 00 90 5D |  if_ne	jmp	#LR__4461
2e520     01 26 06 F1 | 	add	local01, #1
2e524     13 13 C2 FA | 	rdbyte	arg01, local01
2e528     33 26 06 F1 | 	add	local01, #51
2e52c     13 15 02 F6 | 	mov	arg02, local01
2e530     04 26 86 F1 | 	sub	local01, #4
2e534     13 17 02 FB | 	rdlong	arg03, local01
2e538     14 26 86 F1 | 	sub	local01, #20
2e53c     13 27 02 FB | 	rdlong	local01, local01
2e540     13 17 02 F1 | 	add	arg03, local01
2e544     01 18 06 F6 | 	mov	arg04, #1
2e548     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2e54c     04 00 90 FD | 	jmp	#LR__4461
2e550                 | LR__4460
2e550     01 28 06 F6 | 	mov	local02, #1
2e554                 | LR__4461
2e554                 | LR__4462
2e554                 | ' 			res = FR_DISK_ERR;
2e554                 | ' 		}
2e554                 | ' 	}
2e554                 | ' 	return res;
2e554     14 FB 01 F6 | 	mov	result1, local02
2e558     A7 F0 03 F6 | 	mov	ptra, fp
2e55c     B2 00 A0 FD | 	call	#popregs_
2e560                 | _fatfs_cc_sync_window_ret
2e560     2D 00 64 FD | 	ret
2e564                 | 
2e564                 | _fatfs_cc_move_window
2e564     03 4A 05 F6 | 	mov	COUNT_, #3
2e568     A8 00 A0 FD | 	call	#pushregs_
2e56c     09 27 02 F6 | 	mov	local01, arg01
2e570     0A 29 02 F6 | 	mov	local02, arg02
2e574     00 2A 06 F6 | 	mov	local03, #0
2e578     30 26 06 F1 | 	add	local01, #48
2e57c     13 19 02 FB | 	rdlong	arg04, local01
2e580     30 26 86 F1 | 	sub	local01, #48
2e584     0C 29 0A F2 | 	cmp	local02, arg04 wz
2e588     40 00 90 AD |  if_e	jmp	#LR__4471
2e58c     13 13 02 F6 | 	mov	arg01, local01
2e590     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2e594     FD 2A 0A F6 | 	mov	local03, result1 wz
2e598     30 00 90 5D |  if_ne	jmp	#LR__4470
2e59c     01 26 06 F1 | 	add	local01, #1
2e5a0     13 13 C2 FA | 	rdbyte	arg01, local01
2e5a4     33 26 06 F1 | 	add	local01, #51
2e5a8     13 15 02 F6 | 	mov	arg02, local01
2e5ac     14 17 02 F6 | 	mov	arg03, local02
2e5b0     01 18 06 F6 | 	mov	arg04, #1
2e5b4     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2e5b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e5bc     01 28 66 56 |  if_ne	neg	local02, #1
2e5c0     01 2A 06 56 |  if_ne	mov	local03, #1
2e5c4     04 26 86 F1 | 	sub	local01, #4
2e5c8     13 29 62 FC | 	wrlong	local02, local01
2e5cc                 | LR__4470
2e5cc                 | LR__4471
2e5cc                 | ' 				sect = (LBA_t)0 - 1;
2e5cc                 | ' 				res = FR_DISK_ERR;
2e5cc                 | ' 			}
2e5cc                 | ' 			fs->winsect = sect;
2e5cc                 | ' 		}
2e5cc                 | ' 	}
2e5cc                 | ' 	return res;
2e5cc     15 FB 01 F6 | 	mov	result1, local03
2e5d0     A7 F0 03 F6 | 	mov	ptra, fp
2e5d4     B2 00 A0 FD | 	call	#popregs_
2e5d8                 | _fatfs_cc_move_window_ret
2e5d8     2D 00 64 FD | 	ret
2e5dc                 | 
2e5dc                 | _fatfs_cc_sync_fs
2e5dc     02 4A 05 F6 | 	mov	COUNT_, #2
2e5e0     A8 00 A0 FD | 	call	#pushregs_
2e5e4     09 27 02 F6 | 	mov	local01, arg01
2e5e8     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2e5ec     FD 28 0A F6 | 	mov	local02, result1 wz
2e5f0     D8 00 90 5D |  if_ne	jmp	#LR__4481
2e5f4     13 19 C2 FA | 	rdbyte	arg04, local01
2e5f8     03 18 0E F2 | 	cmp	arg04, #3 wz
2e5fc     04 26 06 A1 |  if_e	add	local01, #4
2e600     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2e604     04 26 86 A1 |  if_e	sub	local01, #4
2e608     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2e60c     A0 00 90 5D |  if_ne	jmp	#LR__4480
2e610     34 26 06 F1 | 	add	local01, #52
2e614     13 13 02 F6 | 	mov	arg01, local01
2e618     00 14 06 F6 | 	mov	arg02, #0
2e61c     09 16 C6 F9 | 	decod	arg03, #9
2e620     98 00 A0 FD | 	call	#\builtin_bytefill_
2e624     13 13 02 F6 | 	mov	arg01, local01
2e628     FE 13 06 F1 | 	add	arg01, #510
2e62c     55 00 80 FF 
2e630     09 AB 58 FC | 	wrword	##43605, arg01
2e634     A9 B0 A0 FF 
2e638     13 A5 68 FC | 	wrlong	##1096897106, local01
2e63c     13 13 02 F6 | 	mov	arg01, local01
2e640     E4 13 06 F1 | 	add	arg01, #484
2e644     B9 A0 B0 FF 
2e648     09 E5 68 FC | 	wrlong	##1631679090, arg01
2e64c     13 13 02 F6 | 	mov	arg01, local01
2e650     E8 13 06 F1 | 	add	arg01, #488
2e654     20 26 86 F1 | 	sub	local01, #32
2e658     13 15 02 FB | 	rdlong	arg02, local01
2e65c     09 15 62 FC | 	wrlong	arg02, arg01
2e660     20 26 06 F1 | 	add	local01, #32
2e664     13 13 02 F6 | 	mov	arg01, local01
2e668     EC 13 06 F1 | 	add	arg01, #492
2e66c     24 26 86 F1 | 	sub	local01, #36
2e670     13 15 02 FB | 	rdlong	arg02, local01
2e674     09 15 62 FC | 	wrlong	arg02, arg01
2e678     10 26 06 F1 | 	add	local01, #16
2e67c     13 17 02 FB | 	rdlong	arg03, local01
2e680     01 16 06 F1 | 	add	arg03, #1
2e684     10 26 06 F1 | 	add	local01, #16
2e688     13 17 62 FC | 	wrlong	arg03, local01
2e68c     2F 26 86 F1 | 	sub	local01, #47
2e690     13 13 C2 FA | 	rdbyte	arg01, local01
2e694     33 26 06 F1 | 	add	local01, #51
2e698     13 15 02 F6 | 	mov	arg02, local01
2e69c     01 18 06 F6 | 	mov	arg04, #1
2e6a0     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2e6a4     30 26 86 F1 | 	sub	local01, #48
2e6a8     13 01 48 FC | 	wrbyte	#0, local01
2e6ac     04 26 86 F1 | 	sub	local01, #4
2e6b0                 | LR__4480
2e6b0     01 26 06 F1 | 	add	local01, #1
2e6b4     13 13 C2 FA | 	rdbyte	arg01, local01
2e6b8     00 14 06 F6 | 	mov	arg02, #0
2e6bc     00 16 06 F6 | 	mov	arg03, #0
2e6c0     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2e6c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e6c8     01 28 06 56 |  if_ne	mov	local02, #1
2e6cc                 | LR__4481
2e6cc                 | ' 	}
2e6cc                 | ' 
2e6cc                 | ' 	return res;
2e6cc     14 FB 01 F6 | 	mov	result1, local02
2e6d0     A7 F0 03 F6 | 	mov	ptra, fp
2e6d4     B2 00 A0 FD | 	call	#popregs_
2e6d8                 | _fatfs_cc_sync_fs_ret
2e6d8     2D 00 64 FD | 	ret
2e6dc                 | 
2e6dc                 | _fatfs_cc_clst2sect
2e6dc     02 14 86 F1 | 	sub	arg02, #2
2e6e0     18 12 06 F1 | 	add	arg01, #24
2e6e4     09 01 02 FB | 	rdlong	_var01, arg01
2e6e8     18 12 86 F1 | 	sub	arg01, #24
2e6ec     02 00 86 F1 | 	sub	_var01, #2
2e6f0     00 15 12 F2 | 	cmp	arg02, _var01 wc
2e6f4     00 FA 05 36 |  if_ae	mov	result1, #0
2e6f8     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2e6fc     0A 12 06 F1 | 	add	arg01, #10
2e700     09 01 E2 FA | 	rdword	_var01, arg01
2e704     0A 01 02 FD | 	qmul	_var01, arg02
2e708                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2e708     22 12 06 F1 | 	add	arg01, #34
2e70c     09 FB 01 FB | 	rdlong	result1, arg01
2e710     18 00 62 FD | 	getqx	_var01
2e714     00 FB 01 F1 | 	add	result1, _var01
2e718                 | _fatfs_cc_clst2sect_ret
2e718     2D 00 64 FD | 	ret
2e71c                 | 
2e71c                 | _fatfs_cc_get_fat
2e71c     07 4A 05 F6 | 	mov	COUNT_, #7
2e720     A8 00 A0 FD | 	call	#pushregs_
2e724     0A 27 02 F6 | 	mov	local01, arg02
2e728     09 29 02 FB | 	rdlong	local02, arg01
2e72c     02 26 16 F2 | 	cmp	local01, #2 wc
2e730     14 00 90 CD |  if_b	jmp	#LR__4490
2e734     18 28 06 F1 | 	add	local02, #24
2e738     14 2B 02 FB | 	rdlong	local03, local02
2e73c     18 28 86 F1 | 	sub	local02, #24
2e740     15 27 12 F2 | 	cmp	local01, local03 wc
2e744     08 00 90 CD |  if_b	jmp	#LR__4491
2e748                 | LR__4490
2e748     01 2C 06 F6 | 	mov	local04, #1
2e74c     60 01 90 FD | 	jmp	#LR__4498
2e750                 | LR__4491
2e750     01 2C 66 F6 | 	neg	local04, #1
2e754                 | ' 		val = 0xFFFFFFFF;
2e754                 | ' 
2e754                 | ' 		switch (fs->fs_type) {
2e754     14 2F C2 FA | 	rdbyte	local05, local02
2e758     01 2E 86 F1 | 	sub	local05, #1
2e75c     03 2E 26 F3 | 	fle	local05, #3
2e760     30 2E 62 FD | 	jmprel	local05
2e764                 | LR__4492
2e764     0C 00 90 FD | 	jmp	#LR__4493
2e768     B8 00 90 FD | 	jmp	#LR__4494
2e76c     F8 00 90 FD | 	jmp	#LR__4495
2e770     38 01 90 FD | 	jmp	#LR__4496
2e774                 | LR__4493
2e774     13 2F 02 F6 | 	mov	local05, local01
2e778     13 13 02 F6 | 	mov	arg01, local01
2e77c     01 12 46 F0 | 	shr	arg01, #1
2e780     09 2F 02 F1 | 	add	local05, arg01
2e784     14 13 02 F6 | 	mov	arg01, local02
2e788     17 31 02 F6 | 	mov	local06, local05
2e78c     09 30 46 F0 | 	shr	local06, #9
2e790     24 28 06 F1 | 	add	local02, #36
2e794     14 15 02 FB | 	rdlong	arg02, local02
2e798     24 28 86 F1 | 	sub	local02, #36
2e79c     18 15 02 F1 | 	add	arg02, local06
2e7a0     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2e7a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e7a8     04 01 90 5D |  if_ne	jmp	#LR__4497
2e7ac     17 31 02 F6 | 	mov	local06, local05
2e7b0     FF 31 06 F5 | 	and	local06, #511
2e7b4     34 28 06 F1 | 	add	local02, #52
2e7b8     14 31 02 F1 | 	add	local06, local02
2e7bc     18 33 C2 FA | 	rdbyte	local07, local06
2e7c0     34 28 86 F1 | 	sub	local02, #52
2e7c4     14 13 02 F6 | 	mov	arg01, local02
2e7c8     01 2E 06 F1 | 	add	local05, #1
2e7cc     17 31 02 F6 | 	mov	local06, local05
2e7d0     09 30 46 F0 | 	shr	local06, #9
2e7d4     24 28 06 F1 | 	add	local02, #36
2e7d8     14 15 02 FB | 	rdlong	arg02, local02
2e7dc     24 28 86 F1 | 	sub	local02, #36
2e7e0     18 15 02 F1 | 	add	arg02, local06
2e7e4     7C FD BF FD | 	call	#_fatfs_cc_move_window
2e7e8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e7ec     C0 00 90 5D |  if_ne	jmp	#LR__4497
2e7f0     FF 2F 06 F5 | 	and	local05, #511
2e7f4     34 28 06 F1 | 	add	local02, #52
2e7f8     14 2F 02 F1 | 	add	local05, local02
2e7fc     17 31 C2 FA | 	rdbyte	local06, local05
2e800     08 30 66 F0 | 	shl	local06, #8
2e804     18 33 42 F5 | 	or	local07, local06
2e808     01 26 CE F7 | 	test	local01, #1 wz
2e80c     04 32 46 50 |  if_ne	shr	local07, #4
2e810     19 2B 02 56 |  if_ne	mov	local03, local07
2e814     0B 32 46 A7 |  if_e	zerox	local07, #11
2e818     19 2B 02 A6 |  if_e	mov	local03, local07
2e81c     15 2D 02 F6 | 	mov	local04, local03
2e820                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2e820                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2e820                 | ' 			break;
2e820     8C 00 90 FD | 	jmp	#LR__4497
2e824                 | LR__4494
2e824     14 13 02 F6 | 	mov	arg01, local02
2e828     13 31 02 F6 | 	mov	local06, local01
2e82c     08 30 46 F0 | 	shr	local06, #8
2e830     24 28 06 F1 | 	add	local02, #36
2e834     14 15 02 FB | 	rdlong	arg02, local02
2e838     24 28 86 F1 | 	sub	local02, #36
2e83c     18 15 02 F1 | 	add	arg02, local06
2e840     20 FD BF FD | 	call	#_fatfs_cc_move_window
2e844     00 FA 0D F2 | 	cmp	result1, #0 wz
2e848     64 00 90 5D |  if_ne	jmp	#LR__4497
2e84c     34 28 06 F1 | 	add	local02, #52
2e850     01 26 66 F0 | 	shl	local01, #1
2e854     FF 27 06 F5 | 	and	local01, #511
2e858     13 29 02 F1 | 	add	local02, local01
2e85c                 | ' {
2e85c                 | ' 
2e85c                 | ' 	return *((WORD*)ptr);
2e85c     14 FB E1 FA | 	rdword	result1, local02
2e860     FD 2C 32 F9 | 	getword	local04, result1, #0
2e864                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2e864                 | ' 			break;
2e864     48 00 90 FD | 	jmp	#LR__4497
2e868                 | LR__4495
2e868     14 13 02 F6 | 	mov	arg01, local02
2e86c     13 31 02 F6 | 	mov	local06, local01
2e870     07 30 46 F0 | 	shr	local06, #7
2e874     24 28 06 F1 | 	add	local02, #36
2e878     14 15 02 FB | 	rdlong	arg02, local02
2e87c     24 28 86 F1 | 	sub	local02, #36
2e880     18 15 02 F1 | 	add	arg02, local06
2e884     DC FC BF FD | 	call	#_fatfs_cc_move_window
2e888     00 FA 0D F2 | 	cmp	result1, #0 wz
2e88c     20 00 90 5D |  if_ne	jmp	#LR__4497
2e890     34 28 06 F1 | 	add	local02, #52
2e894     02 26 66 F0 | 	shl	local01, #2
2e898     FF 27 06 F5 | 	and	local01, #511
2e89c     13 29 02 F1 | 	add	local02, local01
2e8a0                 | ' {
2e8a0                 | ' 
2e8a0                 | ' 	return *((DWORD*)ptr);
2e8a0     14 2D 02 FB | 	rdlong	local04, local02
2e8a4     7C 2C 06 F4 | 	bitl	local04, #124
2e8a8                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2e8a8                 | ' 			break;
2e8a8     04 00 90 FD | 	jmp	#LR__4497
2e8ac                 | LR__4496
2e8ac     01 2C 06 F6 | 	mov	local04, #1
2e8b0                 | LR__4497
2e8b0                 | LR__4498
2e8b0                 | ' 			val = 1;
2e8b0                 | ' 		}
2e8b0                 | ' 	}
2e8b0                 | ' 
2e8b0                 | ' 	return val;
2e8b0     16 FB 01 F6 | 	mov	result1, local04
2e8b4     A7 F0 03 F6 | 	mov	ptra, fp
2e8b8     B2 00 A0 FD | 	call	#popregs_
2e8bc                 | _fatfs_cc_get_fat_ret
2e8bc     2D 00 64 FD | 	ret
2e8c0                 | 
2e8c0                 | _fatfs_cc_put_fat
2e8c0     08 4A 05 F6 | 	mov	COUNT_, #8
2e8c4     A8 00 A0 FD | 	call	#pushregs_
2e8c8     09 27 02 F6 | 	mov	local01, arg01
2e8cc     0A 29 02 F6 | 	mov	local02, arg02
2e8d0     0B 2B 02 F6 | 	mov	local03, arg03
2e8d4     02 2C 06 F6 | 	mov	local04, #2
2e8d8     02 28 16 F2 | 	cmp	local02, #2 wc
2e8dc     E0 01 90 CD |  if_b	jmp	#LR__4507
2e8e0     18 26 06 F1 | 	add	local01, #24
2e8e4     13 2F 02 FB | 	rdlong	local05, local01
2e8e8     18 26 86 F1 | 	sub	local01, #24
2e8ec     17 29 12 F2 | 	cmp	local02, local05 wc
2e8f0     CC 01 90 3D |  if_ae	jmp	#LR__4507
2e8f4                 | ' 		switch (fs->fs_type) {
2e8f4     13 31 C2 FA | 	rdbyte	local06, local01
2e8f8     01 30 86 F1 | 	sub	local06, #1
2e8fc     03 30 26 F3 | 	fle	local06, #3
2e900     30 30 62 FD | 	jmprel	local06
2e904                 | LR__4500
2e904     0C 00 90 FD | 	jmp	#LR__4501
2e908     F8 00 90 FD | 	jmp	#LR__4504
2e90c     40 01 90 FD | 	jmp	#LR__4505
2e910     AC 01 90 FD | 	jmp	#LR__4506
2e914                 | LR__4501
2e914     14 33 02 F6 | 	mov	local07, local02
2e918     14 2F 02 F6 | 	mov	local05, local02
2e91c     01 2E 46 F0 | 	shr	local05, #1
2e920     17 33 02 F1 | 	add	local07, local05
2e924     13 13 02 F6 | 	mov	arg01, local01
2e928     19 31 02 F6 | 	mov	local06, local07
2e92c     09 30 46 F0 | 	shr	local06, #9
2e930     24 26 06 F1 | 	add	local01, #36
2e934     13 15 02 FB | 	rdlong	arg02, local01
2e938     24 26 86 F1 | 	sub	local01, #36
2e93c     18 15 02 F1 | 	add	arg02, local06
2e940     20 FC BF FD | 	call	#_fatfs_cc_move_window
2e944     FD 2C 0A F6 | 	mov	local04, result1 wz
2e948     74 01 90 5D |  if_ne	jmp	#LR__4506
2e94c     34 26 06 F1 | 	add	local01, #52
2e950     13 35 02 F6 | 	mov	local08, local01
2e954     19 2F 02 F6 | 	mov	local05, local07
2e958     FF 2F 06 F5 | 	and	local05, #511
2e95c     17 35 02 F1 | 	add	local08, local05
2e960     01 28 CE F7 | 	test	local02, #1 wz
2e964     34 26 86 F1 | 	sub	local01, #52
2e968     01 32 06 F1 | 	add	local07, #1
2e96c     18 00 90 AD |  if_e	jmp	#LR__4502
2e970     1A 2F C2 FA | 	rdbyte	local05, local08
2e974     17 2F 42 F8 | 	getnib	local05, local05, #0
2e978     15 31 E2 F8 | 	getbyte	local06, local03, #0
2e97c     04 30 66 F0 | 	shl	local06, #4
2e980     18 2F 42 F5 | 	or	local05, local06
2e984     04 00 90 FD | 	jmp	#LR__4503
2e988                 | LR__4502
2e988     15 2F 02 F6 | 	mov	local05, local03
2e98c                 | LR__4503
2e98c     1A 2F 42 FC | 	wrbyte	local05, local08
2e990     03 26 06 F1 | 	add	local01, #3
2e994     13 03 48 FC | 	wrbyte	#1, local01
2e998     03 26 86 F1 | 	sub	local01, #3
2e99c     13 13 02 F6 | 	mov	arg01, local01
2e9a0     19 35 02 F6 | 	mov	local08, local07
2e9a4     09 34 46 F0 | 	shr	local08, #9
2e9a8     24 26 06 F1 | 	add	local01, #36
2e9ac     13 15 02 FB | 	rdlong	arg02, local01
2e9b0     24 26 86 F1 | 	sub	local01, #36
2e9b4     1A 15 02 F1 | 	add	arg02, local08
2e9b8     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2e9bc     FD 2C 0A F6 | 	mov	local04, result1 wz
2e9c0     FC 00 90 5D |  if_ne	jmp	#LR__4506
2e9c4     34 26 06 F1 | 	add	local01, #52
2e9c8     13 35 02 F6 | 	mov	local08, local01
2e9cc     FF 33 06 F5 | 	and	local07, #511
2e9d0     19 35 02 F1 | 	add	local08, local07
2e9d4     01 28 CE F7 | 	test	local02, #1 wz
2e9d8     04 2A 46 50 |  if_ne	shr	local03, #4
2e9dc     15 2F 02 56 |  if_ne	mov	local05, local03
2e9e0     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2e9e4     F0 2E 06 A5 |  if_e	and	local05, #240
2e9e8     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2e9ec     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2e9f0     15 2F 42 A5 |  if_e	or	local05, local03
2e9f4     1A 2F 42 FC | 	wrbyte	local05, local08
2e9f8     31 26 86 F1 | 	sub	local01, #49
2e9fc     13 03 48 FC | 	wrbyte	#1, local01
2ea00                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2ea00                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2ea00                 | ' 			fs->wflag = 1;
2ea00                 | ' 			break;
2ea00     BC 00 90 FD | 	jmp	#LR__4506
2ea04                 | LR__4504
2ea04     13 13 02 F6 | 	mov	arg01, local01
2ea08     14 35 02 F6 | 	mov	local08, local02
2ea0c     08 34 46 F0 | 	shr	local08, #8
2ea10     24 26 06 F1 | 	add	local01, #36
2ea14     13 15 02 FB | 	rdlong	arg02, local01
2ea18     24 26 86 F1 | 	sub	local01, #36
2ea1c     1A 15 02 F1 | 	add	arg02, local08
2ea20     40 FB BF FD | 	call	#_fatfs_cc_move_window
2ea24     FD 2C 0A F6 | 	mov	local04, result1 wz
2ea28     94 00 90 5D |  if_ne	jmp	#LR__4506
2ea2c     34 26 06 F1 | 	add	local01, #52
2ea30     13 13 02 F6 | 	mov	arg01, local01
2ea34     01 28 66 F0 | 	shl	local02, #1
2ea38     FF 29 06 F5 | 	and	local02, #511
2ea3c     14 13 02 F1 | 	add	arg01, local02
2ea40     09 2B 52 FC | 	wrword	local03, arg01
2ea44     31 26 86 F1 | 	sub	local01, #49
2ea48     13 03 48 FC | 	wrbyte	#1, local01
2ea4c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2ea4c                 | ' 			fs->wflag = 1;
2ea4c                 | ' 			break;
2ea4c     70 00 90 FD | 	jmp	#LR__4506
2ea50                 | LR__4505
2ea50     13 13 02 F6 | 	mov	arg01, local01
2ea54     14 35 02 F6 | 	mov	local08, local02
2ea58     07 34 46 F0 | 	shr	local08, #7
2ea5c     24 26 06 F1 | 	add	local01, #36
2ea60     13 15 02 FB | 	rdlong	arg02, local01
2ea64     24 26 86 F1 | 	sub	local01, #36
2ea68     1A 15 02 F1 | 	add	arg02, local08
2ea6c     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2ea70     FD 2C 0A F6 | 	mov	local04, result1 wz
2ea74     48 00 90 5D |  if_ne	jmp	#LR__4506
2ea78     7C 2A 06 F4 | 	bitl	local03, #124
2ea7c     34 26 06 F1 | 	add	local01, #52
2ea80     14 35 02 F6 | 	mov	local08, local02
2ea84     02 34 66 F0 | 	shl	local08, #2
2ea88     FF 35 06 F5 | 	and	local08, #511
2ea8c     13 13 02 F6 | 	mov	arg01, local01
2ea90     1A 13 02 F1 | 	add	arg01, local08
2ea94                 | ' {
2ea94                 | ' 
2ea94                 | ' 	return *((DWORD*)ptr);
2ea94     09 35 02 FB | 	rdlong	local08, arg01
2ea98     00 00 78 FF 
2ea9c     00 34 06 F5 | 	and	local08, ##-268435456
2eaa0     1A 2B 42 F5 | 	or	local03, local08
2eaa4     13 13 02 F6 | 	mov	arg01, local01
2eaa8     02 28 66 F0 | 	shl	local02, #2
2eaac     FF 29 06 F5 | 	and	local02, #511
2eab0     14 13 02 F1 | 	add	arg01, local02
2eab4     09 2B 62 FC | 	wrlong	local03, arg01
2eab8     31 26 86 F1 | 	sub	local01, #49
2eabc     13 03 48 FC | 	wrbyte	#1, local01
2eac0                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2eac0                 | ' 			}
2eac0                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2eac0                 | ' 			fs->wflag = 1;
2eac0                 | ' 			break;
2eac0                 | LR__4506
2eac0                 | LR__4507
2eac0                 | ' 		}
2eac0                 | ' 	}
2eac0                 | ' 	return res;
2eac0     16 FB 01 F6 | 	mov	result1, local04
2eac4     A7 F0 03 F6 | 	mov	ptra, fp
2eac8     B2 00 A0 FD | 	call	#popregs_
2eacc                 | _fatfs_cc_put_fat_ret
2eacc     2D 00 64 FD | 	ret
2ead0                 | 
2ead0                 | _fatfs_cc_remove_chain
2ead0     05 4A 05 F6 | 	mov	COUNT_, #5
2ead4     A8 00 A0 FD | 	call	#pushregs_
2ead8     09 27 02 F6 | 	mov	local01, arg01
2eadc     0A 29 02 F6 | 	mov	local02, arg02
2eae0     0B 2B 02 F6 | 	mov	local03, arg03
2eae4     13 2D 02 FB | 	rdlong	local04, local01
2eae8     02 28 16 F2 | 	cmp	local02, #2 wc
2eaec     14 00 90 CD |  if_b	jmp	#LR__4510
2eaf0     18 2C 06 F1 | 	add	local04, #24
2eaf4     16 FB 01 FB | 	rdlong	result1, local04
2eaf8     18 2C 86 F1 | 	sub	local04, #24
2eafc     FD 28 12 F2 | 	cmp	local02, result1 wc
2eb00     08 00 90 CD |  if_b	jmp	#LR__4511
2eb04                 | LR__4510
2eb04     02 FA 05 F6 | 	mov	result1, #2
2eb08     CC 00 90 FD | 	jmp	#LR__4516
2eb0c                 | LR__4511
2eb0c     00 2A 0E F2 | 	cmp	local03, #0 wz
2eb10     18 00 90 AD |  if_e	jmp	#LR__4512
2eb14     15 15 02 F6 | 	mov	arg02, local03
2eb18     16 13 02 F6 | 	mov	arg01, local04
2eb1c     01 16 66 F6 | 	neg	arg03, #1
2eb20     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2eb24     00 FA 0D F2 | 	cmp	result1, #0 wz
2eb28     AC 00 90 5D |  if_ne	jmp	#LR__4516
2eb2c                 | LR__4512
2eb2c                 | ' 	}
2eb2c                 | ' 
2eb2c                 | ' 
2eb2c                 | ' 	do {
2eb2c                 | LR__4513
2eb2c     14 15 02 F6 | 	mov	arg02, local02
2eb30     13 13 02 F6 | 	mov	arg01, local01
2eb34     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2eb38     FD 2E 0A F6 | 	mov	local05, result1 wz
2eb3c     94 00 90 AD |  if_e	jmp	#LR__4515
2eb40     01 2E 0E F2 | 	cmp	local05, #1 wz
2eb44     02 FA 05 A6 |  if_e	mov	result1, #2
2eb48     8C 00 90 AD |  if_e	jmp	#LR__4516
2eb4c     FF FF 7F FF 
2eb50     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2eb54     01 FA 05 A6 |  if_e	mov	result1, #1
2eb58     7C 00 90 AD |  if_e	jmp	#LR__4516
2eb5c     14 15 02 F6 | 	mov	arg02, local02
2eb60     16 13 02 F6 | 	mov	arg01, local04
2eb64     00 16 06 F6 | 	mov	arg03, #0
2eb68     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2eb6c     FD 2A 0A F6 | 	mov	local03, result1 wz
2eb70     15 FB 01 56 |  if_ne	mov	result1, local03
2eb74     60 00 90 5D |  if_ne	jmp	#LR__4516
2eb78     18 2C 06 F1 | 	add	local04, #24
2eb7c     16 2B 02 FB | 	rdlong	local03, local04
2eb80     02 2A 86 F1 | 	sub	local03, #2
2eb84     04 2C 86 F1 | 	sub	local04, #4
2eb88     16 29 02 FB | 	rdlong	local02, local04
2eb8c     14 2C 86 F1 | 	sub	local04, #20
2eb90     15 29 12 F2 | 	cmp	local02, local03 wc
2eb94     24 00 90 3D |  if_ae	jmp	#LR__4514
2eb98     14 2C 06 F1 | 	add	local04, #20
2eb9c     16 2B 02 FB | 	rdlong	local03, local04
2eba0     01 2A 06 F1 | 	add	local03, #1
2eba4     16 2B 62 FC | 	wrlong	local03, local04
2eba8     10 2C 86 F1 | 	sub	local04, #16
2ebac     16 2B C2 FA | 	rdbyte	local03, local04
2ebb0     01 2A 46 F5 | 	or	local03, #1
2ebb4     16 2B 42 FC | 	wrbyte	local03, local04
2ebb8     04 2C 86 F1 | 	sub	local04, #4
2ebbc                 | LR__4514
2ebbc     17 29 02 F6 | 	mov	local02, local05
2ebc0     18 2C 06 F1 | 	add	local04, #24
2ebc4     16 2F 02 FB | 	rdlong	local05, local04
2ebc8     18 2C 86 F1 | 	sub	local04, #24
2ebcc     17 29 12 F2 | 	cmp	local02, local05 wc
2ebd0     58 FF 9F CD |  if_b	jmp	#LR__4513
2ebd4                 | LR__4515
2ebd4                 | ' #line 1500 "ff.c"
2ebd4                 | ' 	return FR_OK;
2ebd4     00 FA 05 F6 | 	mov	result1, #0
2ebd8                 | LR__4516
2ebd8     A7 F0 03 F6 | 	mov	ptra, fp
2ebdc     B2 00 A0 FD | 	call	#popregs_
2ebe0                 | _fatfs_cc_remove_chain_ret
2ebe0     2D 00 64 FD | 	ret
2ebe4                 | 
2ebe4                 | _fatfs_cc_create_chain
2ebe4     09 4A 05 F6 | 	mov	COUNT_, #9
2ebe8     A8 00 A0 FD | 	call	#pushregs_
2ebec     09 27 02 F6 | 	mov	local01, arg01
2ebf0     0A 29 0A F6 | 	mov	local02, arg02 wz
2ebf4     13 2B 02 FB | 	rdlong	local03, local01
2ebf8     28 00 90 5D |  if_ne	jmp	#LR__4520
2ebfc     10 2A 06 F1 | 	add	local03, #16
2ec00     15 2D 0A FB | 	rdlong	local04, local03 wz
2ec04     10 2A 86 F1 | 	sub	local03, #16
2ec08     18 2A 06 51 |  if_ne	add	local03, #24
2ec0c     15 2F 02 5B |  if_ne	rdlong	local05, local03
2ec10     18 2A 86 51 |  if_ne	sub	local03, #24
2ec14     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2ec18     50 00 90 4D |  if_c_and_nz	jmp	#LR__4521
2ec1c     01 2C 06 F6 | 	mov	local04, #1
2ec20     48 00 90 FD | 	jmp	#LR__4521
2ec24                 | LR__4520
2ec24     14 15 02 F6 | 	mov	arg02, local02
2ec28     13 13 02 F6 | 	mov	arg01, local01
2ec2c     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2ec30     FD 2C 02 F6 | 	mov	local04, result1
2ec34     02 2C 16 F2 | 	cmp	local04, #2 wc
2ec38     01 FA 05 C6 |  if_b	mov	result1, #1
2ec3c     BC 01 90 CD |  if_b	jmp	#LR__4531
2ec40     FF FF 7F FF 
2ec44     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2ec48     16 FB 01 A6 |  if_e	mov	result1, local04
2ec4c     AC 01 90 AD |  if_e	jmp	#LR__4531
2ec50     18 2A 06 F1 | 	add	local03, #24
2ec54     15 2F 02 FB | 	rdlong	local05, local03
2ec58     18 2A 86 F1 | 	sub	local03, #24
2ec5c     17 2D 12 F2 | 	cmp	local04, local05 wc
2ec60     16 FB 01 C6 |  if_b	mov	result1, local04
2ec64     94 01 90 CD |  if_b	jmp	#LR__4531
2ec68     14 2D 02 F6 | 	mov	local04, local02
2ec6c                 | LR__4521
2ec6c     14 2A 06 F1 | 	add	local03, #20
2ec70     15 2F 0A FB | 	rdlong	local05, local03 wz
2ec74     14 2A 86 F1 | 	sub	local03, #20
2ec78     00 FA 05 A6 |  if_e	mov	result1, #0
2ec7c     7C 01 90 AD |  if_e	jmp	#LR__4531
2ec80     00 30 06 F6 | 	mov	local06, #0
2ec84     14 2D 0A F2 | 	cmp	local04, local02 wz
2ec88     74 00 90 5D |  if_ne	jmp	#LR__4524
2ec8c     16 31 02 F6 | 	mov	local06, local04
2ec90     01 30 06 F1 | 	add	local06, #1
2ec94     18 2A 06 F1 | 	add	local03, #24
2ec98     15 2F 02 FB | 	rdlong	local05, local03
2ec9c     18 2A 86 F1 | 	sub	local03, #24
2eca0     17 31 12 F2 | 	cmp	local06, local05 wc
2eca4     02 30 06 36 |  if_ae	mov	local06, #2
2eca8     18 15 02 F6 | 	mov	arg02, local06
2ecac     13 13 02 F6 | 	mov	arg01, local01
2ecb0     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2ecb4     FD 2E 02 F6 | 	mov	local05, result1
2ecb8     01 2E 0E F2 | 	cmp	local05, #1 wz
2ecbc     FF FF 7F 5F 
2ecc0     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2ecc4     17 FB 01 A6 |  if_e	mov	result1, local05
2ecc8     30 01 90 AD |  if_e	jmp	#LR__4531
2eccc     00 2E 0E F2 | 	cmp	local05, #0 wz
2ecd0     2C 00 90 AD |  if_e	jmp	#LR__4523
2ecd4     10 2A 06 F1 | 	add	local03, #16
2ecd8     15 33 02 FB | 	rdlong	local07, local03
2ecdc     10 2A 86 F1 | 	sub	local03, #16
2ece0     02 32 16 F2 | 	cmp	local07, #2 wc
2ece4     14 00 90 CD |  if_b	jmp	#LR__4522
2ece8     18 2A 06 F1 | 	add	local03, #24
2ecec     15 2F 02 FB | 	rdlong	local05, local03
2ecf0     18 2A 86 F1 | 	sub	local03, #24
2ecf4     17 33 12 F2 | 	cmp	local07, local05 wc
2ecf8     19 2D 02 C6 |  if_b	mov	local04, local07
2ecfc                 | LR__4522
2ecfc     00 30 06 F6 | 	mov	local06, #0
2ed00                 | LR__4523
2ed00                 | LR__4524
2ed00     00 30 0E F2 | 	cmp	local06, #0 wz
2ed04     60 00 90 5D |  if_ne	jmp	#LR__4527
2ed08     16 31 02 F6 | 	mov	local06, local04
2ed0c                 | ' 			ncl = scl;
2ed0c                 | ' 			for (;;) {
2ed0c                 | LR__4525
2ed0c     01 30 06 F1 | 	add	local06, #1
2ed10     18 2A 06 F1 | 	add	local03, #24
2ed14     15 2F 02 FB | 	rdlong	local05, local03
2ed18     18 2A 86 F1 | 	sub	local03, #24
2ed1c     17 31 12 F2 | 	cmp	local06, local05 wc
2ed20     02 30 06 36 |  if_ae	mov	local06, #2
2ed24     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2ed28     00 FA 05 16 |  if_a	mov	result1, #0
2ed2c     CC 00 90 1D |  if_a	jmp	#LR__4531
2ed30     18 15 02 F6 | 	mov	arg02, local06
2ed34     13 13 02 F6 | 	mov	arg01, local01
2ed38     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2ed3c     FD 32 0A F6 | 	mov	local07, result1 wz
2ed40     24 00 90 AD |  if_e	jmp	#LR__4526
2ed44     01 32 0E F2 | 	cmp	local07, #1 wz
2ed48     FF FF 7F 5F 
2ed4c     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2ed50     19 FB 01 A6 |  if_e	mov	result1, local07
2ed54     A4 00 90 AD |  if_e	jmp	#LR__4531
2ed58     16 31 0A F2 | 	cmp	local06, local04 wz
2ed5c     00 FA 05 A6 |  if_e	mov	result1, #0
2ed60     98 00 90 AD |  if_e	jmp	#LR__4531
2ed64     A4 FF 9F FD | 	jmp	#LR__4525
2ed68                 | LR__4526
2ed68                 | LR__4527
2ed68     15 13 02 F6 | 	mov	arg01, local03
2ed6c     18 15 02 F6 | 	mov	arg02, local06
2ed70     01 16 66 F6 | 	neg	arg03, #1
2ed74     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2ed78     FD 34 0A F6 | 	mov	local08, result1 wz
2ed7c     1C 00 90 5D |  if_ne	jmp	#LR__4528
2ed80     00 28 0E F2 | 	cmp	local02, #0 wz
2ed84     14 00 90 AD |  if_e	jmp	#LR__4528
2ed88     15 13 02 F6 | 	mov	arg01, local03
2ed8c     14 15 02 F6 | 	mov	arg02, local02
2ed90     18 17 02 F6 | 	mov	arg03, local06
2ed94     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2ed98     FD 34 02 F6 | 	mov	local08, result1
2ed9c                 | LR__4528
2ed9c     00 34 0E F2 | 	cmp	local08, #0 wz
2eda0     4C 00 90 5D |  if_ne	jmp	#LR__4529
2eda4     10 2A 06 F1 | 	add	local03, #16
2eda8     15 31 62 FC | 	wrlong	local06, local03
2edac     08 2A 06 F1 | 	add	local03, #8
2edb0     15 2F 02 FB | 	rdlong	local05, local03
2edb4     02 2E 86 F1 | 	sub	local05, #2
2edb8     04 2A 86 F1 | 	sub	local03, #4
2edbc     15 37 02 FB | 	rdlong	local09, local03
2edc0     14 2A 86 F1 | 	sub	local03, #20
2edc4     17 37 1A F2 | 	cmp	local09, local05 wcz
2edc8     14 2A 06 E1 |  if_be	add	local03, #20
2edcc     15 37 02 EB |  if_be	rdlong	local09, local03
2edd0     01 36 86 E1 |  if_be	sub	local09, #1
2edd4     15 37 62 EC |  if_be	wrlong	local09, local03
2edd8     14 2A 86 E1 |  if_be	sub	local03, #20
2eddc     04 2A 06 F1 | 	add	local03, #4
2ede0     15 2F C2 FA | 	rdbyte	local05, local03
2ede4     01 2E 46 F5 | 	or	local05, #1
2ede8     15 2F 42 FC | 	wrbyte	local05, local03
2edec     08 00 90 FD | 	jmp	#LR__4530
2edf0                 | LR__4529
2edf0     01 34 0E F2 | 	cmp	local08, #1 wz
2edf4     01 30 C6 F6 | 	negz	local06, #1
2edf8                 | LR__4530
2edf8                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2edf8                 | ' 	}
2edf8                 | ' 
2edf8                 | ' 	return ncl;
2edf8     18 FB 01 F6 | 	mov	result1, local06
2edfc                 | LR__4531
2edfc     A7 F0 03 F6 | 	mov	ptra, fp
2ee00     B2 00 A0 FD | 	call	#popregs_
2ee04                 | _fatfs_cc_create_chain_ret
2ee04     2D 00 64 FD | 	ret
2ee08                 | 
2ee08                 | _fatfs_cc_dir_clear
2ee08     06 4A 05 F6 | 	mov	COUNT_, #6
2ee0c     A8 00 A0 FD | 	call	#pushregs_
2ee10     09 27 02 F6 | 	mov	local01, arg01
2ee14     0A 29 02 F6 | 	mov	local02, arg02
2ee18     13 13 02 F6 | 	mov	arg01, local01
2ee1c     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2ee20     00 FA 0D F2 | 	cmp	result1, #0 wz
2ee24     01 FA 05 56 |  if_ne	mov	result1, #1
2ee28     90 00 90 5D |  if_ne	jmp	#LR__4542
2ee2c     13 13 02 F6 | 	mov	arg01, local01
2ee30     14 15 02 F6 | 	mov	arg02, local02
2ee34     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2ee38     FD 2A 02 F6 | 	mov	local03, result1
2ee3c     30 26 06 F1 | 	add	local01, #48
2ee40     13 2B 62 FC | 	wrlong	local03, local01
2ee44     04 26 06 F1 | 	add	local01, #4
2ee48     13 13 02 F6 | 	mov	arg01, local01
2ee4c     00 14 06 F6 | 	mov	arg02, #0
2ee50     09 16 C6 F9 | 	decod	arg03, #9
2ee54     98 00 A0 FD | 	call	#\builtin_bytefill_
2ee58     13 2D 02 F6 | 	mov	local04, local01
2ee5c                 | ' #line 1667 "ff.c"
2ee5c                 | ' 	{
2ee5c                 | ' 		ibuf = fs->win; szb = 1;
2ee5c                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2ee5c     00 2E 06 F6 | 	mov	local05, #0
2ee60     34 26 86 F1 | 	sub	local01, #52
2ee64                 | LR__4540
2ee64     0A 26 06 F1 | 	add	local01, #10
2ee68     13 31 E2 FA | 	rdword	local06, local01
2ee6c     0A 26 86 F1 | 	sub	local01, #10
2ee70     18 2F 12 F2 | 	cmp	local05, local06 wc
2ee74     2C 00 90 3D |  if_ae	jmp	#LR__4541
2ee78     01 26 06 F1 | 	add	local01, #1
2ee7c     13 13 C2 FA | 	rdbyte	arg01, local01
2ee80     01 26 86 F1 | 	sub	local01, #1
2ee84     16 15 02 F6 | 	mov	arg02, local04
2ee88     15 17 02 F6 | 	mov	arg03, local03
2ee8c     17 17 02 F1 | 	add	arg03, local05
2ee90     01 18 06 F6 | 	mov	arg04, #1
2ee94     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2ee98     00 FA 0D F2 | 	cmp	result1, #0 wz
2ee9c     01 2E 06 A1 |  if_e	add	local05, #1
2eea0     C0 FF 9F AD |  if_e	jmp	#LR__4540
2eea4                 | LR__4541
2eea4                 | ' 	}
2eea4                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2eea4     0A 26 06 F1 | 	add	local01, #10
2eea8     13 2D E2 FA | 	rdword	local04, local01
2eeac     16 2F 0A F2 | 	cmp	local05, local04 wz
2eeb0     00 30 06 A6 |  if_e	mov	local06, #0
2eeb4     01 30 06 56 |  if_ne	mov	local06, #1
2eeb8     18 FB 01 F6 | 	mov	result1, local06
2eebc                 | LR__4542
2eebc     A7 F0 03 F6 | 	mov	ptra, fp
2eec0     B2 00 A0 FD | 	call	#popregs_
2eec4                 | _fatfs_cc_dir_clear_ret
2eec4     2D 00 64 FD | 	ret
2eec8                 | 
2eec8                 | _fatfs_cc_dir_sdi
2eec8     06 4A 05 F6 | 	mov	COUNT_, #6
2eecc     A8 00 A0 FD | 	call	#pushregs_
2eed0     09 27 02 F6 | 	mov	local01, arg01
2eed4     0A 29 02 F6 | 	mov	local02, arg02
2eed8     13 2B 02 FB | 	rdlong	local03, local01
2eedc     00 10 00 FF 
2eee0     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2eee4     1F 28 CE C7 |  if_b	test	local02, #31 wz
2eee8                 | ' 		return FR_INT_ERR;
2eee8     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2eeec     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4556
2eef0     10 26 06 F1 | 	add	local01, #16
2eef4     13 29 62 FC | 	wrlong	local02, local01
2eef8     08 26 86 F1 | 	sub	local01, #8
2eefc     13 2D 0A FB | 	rdlong	local04, local01 wz
2ef00     08 26 86 F1 | 	sub	local01, #8
2ef04     15 2F C2 AA |  if_e	rdbyte	local05, local03
2ef08     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2ef0c     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2ef10     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2ef14     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2ef18     00 2C 0E F2 | 	cmp	local04, #0 wz
2ef1c     3C 00 90 5D |  if_ne	jmp	#LR__4550
2ef20     14 2F 02 F6 | 	mov	local05, local02
2ef24     05 2E 46 F0 | 	shr	local05, #5
2ef28     08 2A 06 F1 | 	add	local03, #8
2ef2c     15 15 E2 FA | 	rdword	arg02, local03
2ef30     08 2A 86 F1 | 	sub	local03, #8
2ef34     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2ef38     02 FA 05 36 |  if_ae	mov	result1, #2
2ef3c     E4 00 90 3D |  if_ae	jmp	#LR__4556
2ef40     28 2A 06 F1 | 	add	local03, #40
2ef44     15 2F 02 FB | 	rdlong	local05, local03
2ef48     28 2A 86 F1 | 	sub	local03, #40
2ef4c     18 26 06 F1 | 	add	local01, #24
2ef50     13 2F 62 FC | 	wrlong	local05, local01
2ef54     18 26 86 F1 | 	sub	local01, #24
2ef58     7C 00 90 FD | 	jmp	#LR__4555
2ef5c                 | LR__4550
2ef5c     0A 2A 06 F1 | 	add	local03, #10
2ef60     15 31 E2 FA | 	rdword	local06, local03
2ef64     0A 2A 86 F1 | 	sub	local03, #10
2ef68     09 30 66 F0 | 	shl	local06, #9
2ef6c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2ef6c                 | ' 		while (ofs >= csz) {
2ef6c                 | LR__4551
2ef6c     18 29 12 F2 | 	cmp	local02, local06 wc
2ef70     4C 00 90 CD |  if_b	jmp	#LR__4554
2ef74     13 13 02 F6 | 	mov	arg01, local01
2ef78     16 15 02 F6 | 	mov	arg02, local04
2ef7c     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2ef80     FD 2C 02 F6 | 	mov	local04, result1
2ef84     FF FF 7F FF 
2ef88     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2ef8c     01 FA 05 A6 |  if_e	mov	result1, #1
2ef90     90 00 90 AD |  if_e	jmp	#LR__4556
2ef94     02 2C 16 F2 | 	cmp	local04, #2 wc
2ef98     14 00 90 CD |  if_b	jmp	#LR__4552
2ef9c     18 2A 06 F1 | 	add	local03, #24
2efa0     15 2F 02 FB | 	rdlong	local05, local03
2efa4     18 2A 86 F1 | 	sub	local03, #24
2efa8     17 2D 12 F2 | 	cmp	local04, local05 wc
2efac     08 00 90 CD |  if_b	jmp	#LR__4553
2efb0                 | LR__4552
2efb0     02 FA 05 F6 | 	mov	result1, #2
2efb4     6C 00 90 FD | 	jmp	#LR__4556
2efb8                 | LR__4553
2efb8     18 29 82 F1 | 	sub	local02, local06
2efbc     AC FF 9F FD | 	jmp	#LR__4551
2efc0                 | LR__4554
2efc0     15 13 02 F6 | 	mov	arg01, local03
2efc4     16 15 02 F6 | 	mov	arg02, local04
2efc8     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2efcc     18 26 06 F1 | 	add	local01, #24
2efd0     13 FB 61 FC | 	wrlong	result1, local01
2efd4     18 26 86 F1 | 	sub	local01, #24
2efd8                 | LR__4555
2efd8     14 26 06 F1 | 	add	local01, #20
2efdc     13 2D 62 FC | 	wrlong	local04, local01
2efe0     04 26 06 F1 | 	add	local01, #4
2efe4     13 2F 0A FB | 	rdlong	local05, local01 wz
2efe8     18 26 86 F1 | 	sub	local01, #24
2efec     02 FA 05 A6 |  if_e	mov	result1, #2
2eff0     30 00 90 AD |  if_e	jmp	#LR__4556
2eff4     14 31 02 F6 | 	mov	local06, local02
2eff8     09 30 46 F0 | 	shr	local06, #9
2effc     18 26 06 F1 | 	add	local01, #24
2f000     13 2F 02 FB | 	rdlong	local05, local01
2f004     18 2F 02 F1 | 	add	local05, local06
2f008     13 2F 62 FC | 	wrlong	local05, local01
2f00c     34 2A 06 F1 | 	add	local03, #52
2f010     FF 29 06 F5 | 	and	local02, #511
2f014     14 2B 02 F1 | 	add	local03, local02
2f018     04 26 06 F1 | 	add	local01, #4
2f01c     13 2B 62 FC | 	wrlong	local03, local01
2f020                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2f020                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2f020                 | ' 
2f020                 | ' 	return FR_OK;
2f020     00 FA 05 F6 | 	mov	result1, #0
2f024                 | LR__4556
2f024     A7 F0 03 F6 | 	mov	ptra, fp
2f028     B2 00 A0 FD | 	call	#popregs_
2f02c                 | _fatfs_cc_dir_sdi_ret
2f02c     2D 00 64 FD | 	ret
2f030                 | 
2f030                 | _fatfs_cc_dir_next
2f030     05 4A 05 F6 | 	mov	COUNT_, #5
2f034     A8 00 A0 FD | 	call	#pushregs_
2f038     09 27 02 F6 | 	mov	local01, arg01
2f03c     0A 29 02 F6 | 	mov	local02, arg02
2f040     13 2B 02 FB | 	rdlong	local03, local01
2f044     10 26 06 F1 | 	add	local01, #16
2f048     13 2D 02 FB | 	rdlong	local04, local01
2f04c     10 26 86 F1 | 	sub	local01, #16
2f050     20 2C 06 F1 | 	add	local04, #32
2f054     00 10 00 FF 
2f058     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2f05c     18 26 06 31 |  if_ae	add	local01, #24
2f060     13 01 68 3C |  if_ae	wrlong	#0, local01
2f064     18 26 86 31 |  if_ae	sub	local01, #24
2f068     18 26 06 F1 | 	add	local01, #24
2f06c     13 15 0A FB | 	rdlong	arg02, local01 wz
2f070     18 26 86 F1 | 	sub	local01, #24
2f074     04 FA 05 A6 |  if_e	mov	result1, #4
2f078     64 01 90 AD |  if_e	jmp	#LR__4565
2f07c     FF 2D CE F7 | 	test	local04, #511 wz
2f080     3C 01 90 5D |  if_ne	jmp	#LR__4564
2f084     18 26 06 F1 | 	add	local01, #24
2f088     13 15 02 FB | 	rdlong	arg02, local01
2f08c     01 14 06 F1 | 	add	arg02, #1
2f090     13 15 62 FC | 	wrlong	arg02, local01
2f094     04 26 86 F1 | 	sub	local01, #4
2f098     13 15 0A FB | 	rdlong	arg02, local01 wz
2f09c     14 26 86 F1 | 	sub	local01, #20
2f0a0     2C 00 90 5D |  if_ne	jmp	#LR__4560
2f0a4     16 15 02 F6 | 	mov	arg02, local04
2f0a8     05 14 46 F0 | 	shr	arg02, #5
2f0ac     08 2A 06 F1 | 	add	local03, #8
2f0b0     15 29 E2 FA | 	rdword	local02, local03
2f0b4     08 2A 86 F1 | 	sub	local03, #8
2f0b8     14 15 12 F2 | 	cmp	arg02, local02 wc
2f0bc     18 26 06 31 |  if_ae	add	local01, #24
2f0c0     13 01 68 3C |  if_ae	wrlong	#0, local01
2f0c4                 | ' 				dp->sect = 0; return FR_NO_FILE;
2f0c4     04 FA 05 36 |  if_ae	mov	result1, #4
2f0c8     14 01 90 3D |  if_ae	jmp	#LR__4565
2f0cc     F0 00 90 FD | 	jmp	#LR__4563
2f0d0                 | LR__4560
2f0d0     16 13 02 F6 | 	mov	arg01, local04
2f0d4     09 12 46 F0 | 	shr	arg01, #9
2f0d8     0A 2A 06 F1 | 	add	local03, #10
2f0dc     15 15 E2 FA | 	rdword	arg02, local03
2f0e0     0A 2A 86 F1 | 	sub	local03, #10
2f0e4     01 14 86 F1 | 	sub	arg02, #1
2f0e8     0A 13 CA F7 | 	test	arg01, arg02 wz
2f0ec     D0 00 90 5D |  if_ne	jmp	#LR__4562
2f0f0     13 13 02 F6 | 	mov	arg01, local01
2f0f4     14 26 06 F1 | 	add	local01, #20
2f0f8     13 15 02 FB | 	rdlong	arg02, local01
2f0fc     14 26 86 F1 | 	sub	local01, #20
2f100     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2f104     FD 2E 02 F6 | 	mov	local05, result1
2f108     02 2E 16 F2 | 	cmp	local05, #2 wc
2f10c     02 FA 05 C6 |  if_b	mov	result1, #2
2f110     CC 00 90 CD |  if_b	jmp	#LR__4565
2f114     FF FF 7F FF 
2f118     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2f11c     01 FA 05 A6 |  if_e	mov	result1, #1
2f120     BC 00 90 AD |  if_e	jmp	#LR__4565
2f124     18 2A 06 F1 | 	add	local03, #24
2f128     15 15 02 FB | 	rdlong	arg02, local03
2f12c     18 2A 86 F1 | 	sub	local03, #24
2f130     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2f134     68 00 90 CD |  if_b	jmp	#LR__4561
2f138     00 28 0E F2 | 	cmp	local02, #0 wz
2f13c     18 26 06 A1 |  if_e	add	local01, #24
2f140     13 01 68 AC |  if_e	wrlong	#0, local01
2f144                 | ' 						dp->sect = 0; return FR_NO_FILE;
2f144     04 FA 05 A6 |  if_e	mov	result1, #4
2f148     94 00 90 AD |  if_e	jmp	#LR__4565
2f14c     13 13 02 F6 | 	mov	arg01, local01
2f150     14 26 06 F1 | 	add	local01, #20
2f154     13 15 02 FB | 	rdlong	arg02, local01
2f158     14 26 86 F1 | 	sub	local01, #20
2f15c     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2f160     FD 2E 0A F6 | 	mov	local05, result1 wz
2f164     07 FA 05 A6 |  if_e	mov	result1, #7
2f168     74 00 90 AD |  if_e	jmp	#LR__4565
2f16c     01 2E 0E F2 | 	cmp	local05, #1 wz
2f170     02 FA 05 A6 |  if_e	mov	result1, #2
2f174     68 00 90 AD |  if_e	jmp	#LR__4565
2f178     FF FF 7F FF 
2f17c     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2f180     01 FA 05 A6 |  if_e	mov	result1, #1
2f184     58 00 90 AD |  if_e	jmp	#LR__4565
2f188     17 15 02 F6 | 	mov	arg02, local05
2f18c     15 13 02 F6 | 	mov	arg01, local03
2f190     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2f194     00 FA 0D F2 | 	cmp	result1, #0 wz
2f198     01 FA 05 56 |  if_ne	mov	result1, #1
2f19c     40 00 90 5D |  if_ne	jmp	#LR__4565
2f1a0                 | LR__4561
2f1a0     14 26 06 F1 | 	add	local01, #20
2f1a4     13 2F 62 FC | 	wrlong	local05, local01
2f1a8     15 13 02 F6 | 	mov	arg01, local03
2f1ac     17 15 02 F6 | 	mov	arg02, local05
2f1b0     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2f1b4     04 26 06 F1 | 	add	local01, #4
2f1b8     13 FB 61 FC | 	wrlong	result1, local01
2f1bc     18 26 86 F1 | 	sub	local01, #24
2f1c0                 | LR__4562
2f1c0                 | LR__4563
2f1c0                 | LR__4564
2f1c0     10 26 06 F1 | 	add	local01, #16
2f1c4     13 2D 62 FC | 	wrlong	local04, local01
2f1c8     34 2A 06 F1 | 	add	local03, #52
2f1cc     FF 2D 06 F5 | 	and	local04, #511
2f1d0     16 2B 02 F1 | 	add	local03, local04
2f1d4     0C 26 06 F1 | 	add	local01, #12
2f1d8     13 2B 62 FC | 	wrlong	local03, local01
2f1dc                 | ' #line 1771 "ff.c"
2f1dc                 | ' 				}
2f1dc                 | ' 				dp->clust = clst;
2f1dc                 | ' 				dp->sect = clst2sect(fs, clst);
2f1dc                 | ' 			}
2f1dc                 | ' 		}
2f1dc                 | ' 	}
2f1dc                 | ' 	dp->dptr = ofs;
2f1dc                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2f1dc                 | ' 
2f1dc                 | ' 	return FR_OK;
2f1dc     00 FA 05 F6 | 	mov	result1, #0
2f1e0                 | LR__4565
2f1e0     A7 F0 03 F6 | 	mov	ptra, fp
2f1e4     B2 00 A0 FD | 	call	#popregs_
2f1e8                 | _fatfs_cc_dir_next_ret
2f1e8     2D 00 64 FD | 	ret
2f1ec                 | 
2f1ec                 | _fatfs_cc_dir_alloc
2f1ec     08 4A 05 F6 | 	mov	COUNT_, #8
2f1f0     A8 00 A0 FD | 	call	#pushregs_
2f1f4     09 27 02 F6 | 	mov	local01, arg01
2f1f8     0A 29 02 F6 | 	mov	local02, arg02
2f1fc     13 2B 02 FB | 	rdlong	local03, local01
2f200     13 13 02 F6 | 	mov	arg01, local01
2f204     00 14 06 F6 | 	mov	arg02, #0
2f208     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2f20c     FD 2C 0A F6 | 	mov	local04, result1 wz
2f210     70 00 90 5D |  if_ne	jmp	#LR__4574
2f214     00 2E 06 F6 | 	mov	local05, #0
2f218                 | ' 		n = 0;
2f218                 | ' 		do {
2f218                 | LR__4570
2f218     18 26 06 F1 | 	add	local01, #24
2f21c     13 15 02 FB | 	rdlong	arg02, local01
2f220     18 26 86 F1 | 	sub	local01, #24
2f224     15 13 02 F6 | 	mov	arg01, local03
2f228     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2f22c     FD 2C 0A F6 | 	mov	local04, result1 wz
2f230     50 00 90 5D |  if_ne	jmp	#LR__4573
2f234     1C 26 06 F1 | 	add	local01, #28
2f238     13 31 02 FB | 	rdlong	local06, local01
2f23c     1C 26 86 F1 | 	sub	local01, #28
2f240     18 31 C2 FA | 	rdbyte	local06, local06
2f244     E5 30 0E F2 | 	cmp	local06, #229 wz
2f248     1C 26 06 51 |  if_ne	add	local01, #28
2f24c     13 33 02 5B |  if_ne	rdlong	local07, local01
2f250     1C 26 86 51 |  if_ne	sub	local01, #28
2f254     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2f258     10 00 90 5D |  if_ne	jmp	#LR__4571
2f25c     01 2E 06 F1 | 	add	local05, #1
2f260     14 2F 0A F2 | 	cmp	local05, local02 wz
2f264     1C 00 90 AD |  if_e	jmp	#LR__4573
2f268     04 00 90 FD | 	jmp	#LR__4572
2f26c                 | LR__4571
2f26c     00 2E 06 F6 | 	mov	local05, #0
2f270                 | LR__4572
2f270     13 13 02 F6 | 	mov	arg01, local01
2f274     01 14 06 F6 | 	mov	arg02, #1
2f278     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2f27c     FD 2C 0A F6 | 	mov	local04, result1 wz
2f280     94 FF 9F AD |  if_e	jmp	#LR__4570
2f284                 | LR__4573
2f284                 | LR__4574
2f284     04 2C 0E F2 | 	cmp	local04, #4 wz
2f288     07 2C 06 A6 |  if_e	mov	local04, #7
2f28c                 | ' 	return res;
2f28c     16 FB 01 F6 | 	mov	result1, local04
2f290     A7 F0 03 F6 | 	mov	ptra, fp
2f294     B2 00 A0 FD | 	call	#popregs_
2f298                 | _fatfs_cc_dir_alloc_ret
2f298     2D 00 64 FD | 	ret
2f29c                 | 
2f29c                 | _fatfs_cc_ld_clust
2f29c     09 01 02 F6 | 	mov	_var01, arg01
2f2a0     0A 13 02 F6 | 	mov	arg01, arg02
2f2a4     1A 12 06 F1 | 	add	arg01, #26
2f2a8                 | ' {
2f2a8                 | ' 
2f2a8                 | ' 	return *((WORD*)ptr);
2f2a8     09 FB E1 FA | 	rdword	result1, arg01
2f2ac     FD 12 32 F9 | 	getword	arg01, result1, #0
2f2b0     00 01 C2 FA | 	rdbyte	_var01, _var01
2f2b4     03 00 0E F2 | 	cmp	_var01, #3 wz
2f2b8     14 14 06 A1 |  if_e	add	arg02, #20
2f2bc                 | ' {
2f2bc                 | ' 
2f2bc                 | ' 	return *((WORD*)ptr);
2f2bc     0A FB E1 AA |  if_e	rdword	result1, arg02
2f2c0     10 FA 65 A0 |  if_e	shl	result1, #16
2f2c4     FD 12 42 A5 |  if_e	or	arg01, result1
2f2c8                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2f2c8                 | ' 	}
2f2c8                 | ' 
2f2c8                 | ' 	return cl;
2f2c8     09 FB 01 F6 | 	mov	result1, arg01
2f2cc                 | _fatfs_cc_ld_clust_ret
2f2cc     2D 00 64 FD | 	ret
2f2d0                 | 
2f2d0                 | _fatfs_cc_st_clust
2f2d0     09 01 02 F6 | 	mov	_var01, arg01
2f2d4     0A 13 02 F6 | 	mov	arg01, arg02
2f2d8     1A 12 06 F1 | 	add	arg01, #26
2f2dc     09 17 52 FC | 	wrword	arg03, arg01
2f2e0     00 01 C2 FA | 	rdbyte	_var01, _var01
2f2e4     03 00 0E F2 | 	cmp	_var01, #3 wz
2f2e8     14 14 06 A1 |  if_e	add	arg02, #20
2f2ec     10 16 46 A0 |  if_e	shr	arg03, #16
2f2f0     0A 17 52 AC |  if_e	wrword	arg03, arg02
2f2f4                 | _fatfs_cc_st_clust_ret
2f2f4     2D 00 64 FD | 	ret
2f2f8                 | 
2f2f8                 | _fatfs_cc_cmp_lfn
2f2f8     07 4A 05 F6 | 	mov	COUNT_, #7
2f2fc     A8 00 A0 FD | 	call	#pushregs_
2f300     09 27 02 F6 | 	mov	local01, arg01
2f304     0A 13 02 F6 | 	mov	arg01, arg02
2f308     1A 12 06 F1 | 	add	arg01, #26
2f30c                 | ' {
2f30c                 | ' 
2f30c                 | ' 	return *((WORD*)ptr);
2f30c     09 FB E9 FA | 	rdword	result1, arg01 wz
2f310     00 FA 05 56 |  if_ne	mov	result1, #0
2f314     E0 00 90 5D |  if_ne	jmp	#LR__4586
2f318     0A 29 C2 FA | 	rdbyte	local02, arg02
2f31c     3F 28 06 F5 | 	and	local02, #63
2f320     01 28 86 F1 | 	sub	local02, #1
2f324     0D 28 06 FD | 	qmul	local02, #13
2f328                 | ' 
2f328                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2f328                 | ' 
2f328                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2f328     01 2A 06 F6 | 	mov	local03, #1
2f32c     00 2C 06 F6 | 	mov	local04, #0
2f330     18 2E 62 FD | 	getqx	local05
2f334                 | LR__4580
2f334     0D 2C 16 F2 | 	cmp	local04, #13 wc
2f338     9C 00 90 3D |  if_ae	jmp	#LR__4585
2f33c     0A 13 02 F6 | 	mov	arg01, arg02
2f340     16 29 02 F6 | 	mov	local02, local04
2f344     01 00 00 FF 
2f348     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2f34c     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2f350     14 29 C2 FA | 	rdbyte	local02, local02
2f354     01 28 06 FA | 	mul	local02, #1
2f358     14 13 02 F1 | 	add	arg01, local02
2f35c     01 00 00 FF 
2f360     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2f364                 | ' {
2f364                 | ' 
2f364                 | ' 	return *((WORD*)ptr);
2f364     09 FB E1 FA | 	rdword	result1, arg01
2f368     FD 30 02 F6 | 	mov	local06, result1
2f36c     15 29 02 F6 | 	mov	local02, local03
2f370     0F 28 4E F7 | 	zerox	local02, #15 wz
2f374     44 00 90 AD |  if_e	jmp	#LR__4583
2f378     00 2F 16 F2 | 	cmp	local05, #256 wc
2f37c     2C 00 90 3D |  if_ae	jmp	#LR__4581
2f380     18 13 32 F9 | 	getword	arg01, local06, #0
2f384     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2f388     FD 28 02 F6 | 	mov	local02, result1
2f38c     17 2B 02 F6 | 	mov	local03, local05
2f390     01 2A 66 F0 | 	shl	local03, #1
2f394     13 2B 02 F1 | 	add	local03, local01
2f398     15 13 E2 FA | 	rdword	arg01, local03
2f39c     01 2E 06 F1 | 	add	local05, #1
2f3a0     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2f3a4     FD 28 0A F2 | 	cmp	local02, result1 wz
2f3a8     08 00 90 AD |  if_e	jmp	#LR__4582
2f3ac                 | LR__4581
2f3ac                 | ' 				return 0;
2f3ac     00 FA 05 F6 | 	mov	result1, #0
2f3b0     44 00 90 FD | 	jmp	#LR__4586
2f3b4                 | LR__4582
2f3b4     18 2B 02 F6 | 	mov	local03, local06
2f3b8     14 00 90 FD | 	jmp	#LR__4584
2f3bc                 | LR__4583
2f3bc     18 31 32 F9 | 	getword	local06, local06, #0
2f3c0     7F 00 00 FF 
2f3c4     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2f3c8     00 FA 05 56 |  if_ne	mov	result1, #0
2f3cc     28 00 90 5D |  if_ne	jmp	#LR__4586
2f3d0                 | LR__4584
2f3d0     01 2C 06 F1 | 	add	local04, #1
2f3d4     5C FF 9F FD | 	jmp	#LR__4580
2f3d8                 | LR__4585
2f3d8     0A 29 C2 FA | 	rdbyte	local02, arg02
2f3dc     40 28 CE F7 | 	test	local02, #64 wz
2f3e0     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2f3e4     01 2E 66 50 |  if_ne	shl	local05, #1
2f3e8     13 2F 02 51 |  if_ne	add	local05, local01
2f3ec     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2f3f0     00 FA 05 56 |  if_ne	mov	result1, #0
2f3f4                 | ' 
2f3f4                 | ' 	return 1;
2f3f4     01 FA 05 A6 |  if_e	mov	result1, #1
2f3f8                 | LR__4586
2f3f8     A7 F0 03 F6 | 	mov	ptra, fp
2f3fc     B2 00 A0 FD | 	call	#popregs_
2f400                 | _fatfs_cc_cmp_lfn_ret
2f400     2D 00 64 FD | 	ret
2f404                 | 
2f404                 | _fatfs_cc_pick_lfn
2f404     09 01 02 F6 | 	mov	_var01, arg01
2f408     0A 13 02 F6 | 	mov	arg01, arg02
2f40c     1A 12 06 F1 | 	add	arg01, #26
2f410                 | ' {
2f410                 | ' 
2f410                 | ' 	return *((WORD*)ptr);
2f410     09 FB E9 FA | 	rdword	result1, arg01 wz
2f414     00 FA 05 56 |  if_ne	mov	result1, #0
2f418     D4 00 90 5D |  if_ne	jmp	#LR__4595
2f41c     0A 03 C2 FA | 	rdbyte	_var02, arg02
2f420     40 02 26 F5 | 	andn	_var02, #64
2f424     01 02 86 F1 | 	sub	_var02, #1
2f428     0D 02 06 FD | 	qmul	_var02, #13
2f42c                 | ' 
2f42c                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2f42c                 | ' 
2f42c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2f42c     01 04 06 F6 | 	mov	_var03, #1
2f430     00 06 06 F6 | 	mov	_var04, #0
2f434     18 08 62 FD | 	getqx	_var05
2f438                 | LR__4590
2f438     0D 06 16 F2 | 	cmp	_var04, #13 wc
2f43c     80 00 90 3D |  if_ae	jmp	#LR__4593
2f440     0A 13 02 F6 | 	mov	arg01, arg02
2f444     03 03 02 F6 | 	mov	_var02, _var04
2f448     01 00 00 FF 
2f44c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2f450     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2f454     01 03 C2 FA | 	rdbyte	_var02, _var02
2f458     01 02 06 FA | 	mul	_var02, #1
2f45c     01 13 02 F1 | 	add	arg01, _var02
2f460     01 00 00 FF 
2f464     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2f468                 | ' {
2f468                 | ' 
2f468                 | ' 	return *((WORD*)ptr);
2f468     09 FB E1 FA | 	rdword	result1, arg01
2f46c     FD 0A 02 F6 | 	mov	_var06, result1
2f470     02 03 02 F6 | 	mov	_var02, _var03
2f474     0F 02 4E F7 | 	zerox	_var02, #15 wz
2f478     28 00 90 AD |  if_e	jmp	#LR__4591
2f47c     00 09 16 F2 | 	cmp	_var05, #256 wc
2f480     00 FA 05 36 |  if_ae	mov	result1, #0
2f484     68 00 90 3D |  if_ae	jmp	#LR__4595
2f488     04 03 02 F6 | 	mov	_var02, _var05
2f48c     01 02 66 F0 | 	shl	_var02, #1
2f490     00 03 02 F1 | 	add	_var02, _var01
2f494     05 05 02 F6 | 	mov	_var03, _var06
2f498     01 05 52 FC | 	wrword	_var03, _var02
2f49c     01 08 06 F1 | 	add	_var05, #1
2f4a0     14 00 90 FD | 	jmp	#LR__4592
2f4a4                 | LR__4591
2f4a4     05 0B 32 F9 | 	getword	_var06, _var06, #0
2f4a8     7F 00 00 FF 
2f4ac     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2f4b0     00 FA 05 56 |  if_ne	mov	result1, #0
2f4b4     38 00 90 5D |  if_ne	jmp	#LR__4595
2f4b8                 | LR__4592
2f4b8     01 06 06 F1 | 	add	_var04, #1
2f4bc     78 FF 9F FD | 	jmp	#LR__4590
2f4c0                 | LR__4593
2f4c0     0A 03 C2 FA | 	rdbyte	_var02, arg02
2f4c4     40 02 CE F7 | 	test	_var02, #64 wz
2f4c8     02 0D 02 56 |  if_ne	mov	_var07, _var03
2f4cc     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2f4d0     18 00 90 AD |  if_e	jmp	#LR__4594
2f4d4     00 09 16 F2 | 	cmp	_var05, #256 wc
2f4d8     00 FA 05 36 |  if_ae	mov	result1, #0
2f4dc     10 00 90 3D |  if_ae	jmp	#LR__4595
2f4e0     01 08 66 F0 | 	shl	_var05, #1
2f4e4     00 09 02 F1 | 	add	_var05, _var01
2f4e8     04 01 58 FC | 	wrword	#0, _var05
2f4ec                 | LR__4594
2f4ec                 | ' 		lfnbuf[i] = 0;
2f4ec                 | ' 	}
2f4ec                 | ' 
2f4ec                 | ' 	return 1;
2f4ec     01 FA 05 F6 | 	mov	result1, #1
2f4f0                 | LR__4595
2f4f0                 | _fatfs_cc_pick_lfn_ret
2f4f0     2D 00 64 FD | 	ret
2f4f4                 | 
2f4f4                 | _fatfs_cc_put_lfn
2f4f4     0D 14 06 F1 | 	add	arg02, #13
2f4f8     0A 19 42 FC | 	wrbyte	arg04, arg02
2f4fc     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2f500     01 18 86 F1 | 	sub	arg04, #1
2f504     0D 18 06 FD | 	qmul	arg04, #13
2f508     09 01 02 F6 | 	mov	_var01, arg01
2f50c     02 14 86 F1 | 	sub	arg02, #2
2f510     0A 1F 48 FC | 	wrbyte	#15, arg02
2f514     01 14 06 F1 | 	add	arg02, #1
2f518     0A 01 48 FC | 	wrbyte	#0, arg02
2f51c     0C 14 86 F1 | 	sub	arg02, #12
2f520     0A 13 02 F6 | 	mov	arg01, arg02
2f524     1A 12 06 F1 | 	add	arg01, #26
2f528     09 01 58 FC | 	wrword	#0, arg01
2f52c     00 02 06 F6 | 	mov	_var02, #0
2f530     00 04 06 F6 | 	mov	_var03, #0
2f534                 | ' 	BYTE* dir,
2f534                 | ' 	BYTE ord,
2f534                 | ' 	BYTE sum
2f534                 | ' )
2f534                 | ' {
2f534                 | ' 	UINT i, s;
2f534                 | ' 	WCHAR wc;
2f534                 | ' 
2f534                 | ' 
2f534                 | ' 	dir[ 13 ] = sum;
2f534                 | ' 	dir[ 11 ] =  0x0F ;
2f534                 | ' 	dir[ 12 ] = 0;
2f534                 | ' 	st_word(dir +  26 , 0);
2f534                 | ' 
2f534                 | ' 	i = (ord - 1) * 13;
2f534                 | ' 	s = wc = 0;
2f534                 | ' 	do {
2f534     01 00 00 FF 
2f538     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2f53c     18 06 62 FD | 	getqx	_var04
2f540     97 2A 48 FB | 	callpa	#(@LR__4601-@LR__4600)>>2,fcache_load_ptr_
2f544                 | LR__4600
2f544     01 19 32 F9 | 	getword	arg04, _var02, #0
2f548     7F 00 00 FF 
2f54c     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2f550     03 13 02 56 |  if_ne	mov	arg01, _var04
2f554     01 06 06 51 |  if_ne	add	_var04, #1
2f558     01 12 66 50 |  if_ne	shl	arg01, #1
2f55c     00 13 02 51 |  if_ne	add	arg01, _var01
2f560     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2f564     0A 13 02 F6 | 	mov	arg01, arg02
2f568     02 19 02 F6 | 	mov	arg04, _var03
2f56c     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2f570     0C 19 C2 FA | 	rdbyte	arg04, arg04
2f574     01 18 06 FA | 	mul	arg04, #1
2f578     0C 13 02 F1 | 	add	arg01, arg04
2f57c     09 03 52 FC | 	wrword	_var02, arg01
2f580     01 19 02 F6 | 	mov	arg04, _var02
2f584     0F 18 4E F7 | 	zerox	arg04, #15 wz
2f588     0F 02 CE A9 |  if_e	bmask	_var02, #15
2f58c     01 04 06 F1 | 	add	_var03, #1
2f590     0D 04 16 F2 | 	cmp	_var03, #13 wc
2f594     AC FF 9F CD |  if_b	jmp	#LR__4600
2f598                 | LR__4601
2f598     01 00 00 FF 
2f59c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2f5a0     01 03 32 F9 | 	getword	_var02, _var02, #0
2f5a4     7F 00 00 FF 
2f5a8     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2f5ac     01 06 66 50 |  if_ne	shl	_var04, #1
2f5b0     00 07 02 51 |  if_ne	add	_var04, _var01
2f5b4     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2f5b8     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2f5bc     40 16 46 A5 |  if_e	or	arg03, #64
2f5c0     0A 17 42 FC | 	wrbyte	arg03, arg02
2f5c4                 | _fatfs_cc_put_lfn_ret
2f5c4     2D 00 64 FD | 	ret
2f5c8                 | 
2f5c8                 | _fatfs_cc_gen_numname
2f5c8     08 4A 05 F6 | 	mov	COUNT_, #8
2f5cc     A8 00 A0 FD | 	call	#pushregs_
2f5d0     2C F0 07 F1 | 	add	ptra, #44
2f5d4     09 27 02 F6 | 	mov	local01, arg01
2f5d8     0A 29 02 F6 | 	mov	local02, arg02
2f5dc     0B 2B 02 F6 | 	mov	local03, arg03
2f5e0     0C 2D 02 F6 | 	mov	local04, arg04
2f5e4     13 13 02 F6 | 	mov	arg01, local01
2f5e8     14 15 02 F6 | 	mov	arg02, local02
2f5ec     0B 16 06 F6 | 	mov	arg03, #11
2f5f0     98 72 BF FD | 	call	#__system____builtin_memmove
2f5f4     06 2C 16 F2 | 	cmp	local04, #6 wc
2f5f8     48 00 90 CD |  if_b	jmp	#LR__4615
2f5fc     16 2F 02 F6 | 	mov	local05, local04
2f600     97 1E 48 FB | 	callpa	#(@LR__4613-@LR__4610)>>2,fcache_load_ptr_
2f604                 | ' 		sreg = seq;
2f604                 | ' 		while (*lfn) {
2f604                 | LR__4610
2f604     15 31 EA FA | 	rdword	local06, local03 wz
2f608     34 00 90 AD |  if_e	jmp	#LR__4614
2f60c     15 33 E2 FA | 	rdword	local07, local03
2f610                 | ' 			wc = *lfn++;
2f610                 | ' 			for (i = 0; i < 16; i++) {
2f610     02 2A 06 F1 | 	add	local03, #2
2f614     10 12 DC FC | 	rep	@LR__4612, #16
2f618                 | LR__4611
2f618     01 2E 66 F0 | 	shl	local05, #1
2f61c     19 31 32 F9 | 	getword	local06, local07, #0
2f620     01 30 06 F5 | 	and	local06, #1
2f624     18 2F 02 F1 | 	add	local05, local06
2f628     19 33 32 F9 | 	getword	local07, local07, #0
2f62c     01 32 46 F0 | 	shr	local07, #1
2f630     10 2E 2E F4 | 	testbn	local05, #16 wz
2f634     88 00 00 5F 
2f638     21 2E 66 55 |  if_ne	xor	local05, ##69665
2f63c                 | LR__4612
2f63c     C4 FF 9F FD | 	jmp	#LR__4610
2f640                 | LR__4613
2f640                 | LR__4614
2f640     17 2D 02 F6 | 	mov	local04, local05
2f644                 | LR__4615
2f644     07 32 06 F6 | 	mov	local07, #7
2f648                 | ' 			}
2f648                 | ' 		}
2f648                 | ' 		seq = (UINT)sreg;
2f648                 | ' 	}
2f648                 | ' 
2f648                 | ' 
2f648                 | ' 	i = 7;
2f648                 | ' 	do {
2f648     10 4E 05 F1 | 	add	fp, #16
2f64c     97 1A 48 FB | 	callpa	#(@LR__4617-@LR__4616)>>2,fcache_load_ptr_
2f650                 | LR__4616
2f650     16 2F 42 F8 | 	getnib	local05, local04, #0
2f654     30 2E 06 F1 | 	add	local05, #48
2f658     04 2C 46 F0 | 	shr	local04, #4
2f65c     17 31 E2 F8 | 	getbyte	local06, local05, #0
2f660     3A 30 16 F2 | 	cmp	local06, #58 wc
2f664     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2f668     07 2E 06 31 |  if_ae	add	local05, #7
2f66c     19 31 02 F6 | 	mov	local06, local07
2f670     01 32 8E F1 | 	sub	local07, #1 wz
2f674     A7 30 02 F1 | 	add	local06, fp
2f678     18 2F 42 FC | 	wrbyte	local05, local06
2f67c     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2f680     CC FF 9F 5D |  if_ne	jmp	#LR__4616
2f684                 | LR__4617
2f684     19 31 02 F6 | 	mov	local06, local07
2f688     A7 30 02 F1 | 	add	local06, fp
2f68c     18 FD 48 FC | 	wrbyte	#126, local06
2f690                 | ' 	ns[i] = '~';
2f690                 | ' 
2f690                 | ' 
2f690                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2f690     00 2E 06 F6 | 	mov	local05, #0
2f694     10 4E 85 F1 | 	sub	fp, #16
2f698     97 2A 48 FB | 	callpa	#(@LR__4620-@LR__4618)>>2,fcache_load_ptr_
2f69c                 | LR__4618
2f69c     19 2F 12 F2 | 	cmp	local05, local07 wc
2f6a0     4C 00 90 3D |  if_ae	jmp	#LR__4621
2f6a4     17 31 02 F6 | 	mov	local06, local05
2f6a8     13 31 02 F1 | 	add	local06, local01
2f6ac     18 31 C2 FA | 	rdbyte	local06, local06
2f6b0     20 30 0E F2 | 	cmp	local06, #32 wz
2f6b4     38 00 90 AD |  if_e	jmp	#LR__4621
2f6b8     17 13 02 F6 | 	mov	arg01, local05
2f6bc     13 13 02 F1 | 	add	arg01, local01
2f6c0     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2f6c4     00 FA 05 56 |  if_ne	mov	result1, #0
2f6c8                 | ' 
2f6c8                 | ' 	return 0;
2f6c8     00 FA 05 A6 |  if_e	mov	result1, #0
2f6cc     00 FA 0D F2 | 	cmp	result1, #0 wz
2f6d0     14 00 90 AD |  if_e	jmp	#LR__4619
2f6d4     19 31 02 F6 | 	mov	local06, local07
2f6d8     01 30 86 F1 | 	sub	local06, #1
2f6dc     18 2F 0A F2 | 	cmp	local05, local06 wz
2f6e0     0C 00 90 AD |  if_e	jmp	#LR__4621
2f6e4     01 2E 06 F1 | 	add	local05, #1
2f6e8                 | LR__4619
2f6e8     01 2E 06 F1 | 	add	local05, #1
2f6ec     AC FF 9F FD | 	jmp	#LR__4618
2f6f0                 | LR__4620
2f6f0                 | LR__4621
2f6f0     97 20 48 FB | 	callpa	#(@LR__4625-@LR__4622)>>2,fcache_load_ptr_
2f6f4                 | ' 			j++;
2f6f4                 | ' 		}
2f6f4                 | ' 	}
2f6f4                 | ' 	do {
2f6f4                 | LR__4622
2f6f4     17 31 02 F6 | 	mov	local06, local05
2f6f8     13 31 02 F1 | 	add	local06, local01
2f6fc     08 32 16 F2 | 	cmp	local07, #8 wc
2f700     01 2E 06 F1 | 	add	local05, #1
2f704     1C 00 90 3D |  if_ae	jmp	#LR__4623
2f708     19 2D 02 F6 | 	mov	local04, local07
2f70c     10 4E 05 F1 | 	add	fp, #16
2f710     A7 2C 02 F1 | 	add	local04, fp
2f714     16 35 C2 FA | 	rdbyte	local08, local04
2f718     01 32 06 F1 | 	add	local07, #1
2f71c     10 4E 85 F1 | 	sub	fp, #16
2f720     04 00 90 FD | 	jmp	#LR__4624
2f724                 | LR__4623
2f724     20 34 06 F6 | 	mov	local08, #32
2f728                 | LR__4624
2f728     18 35 42 FC | 	wrbyte	local08, local06
2f72c     08 2E 16 F2 | 	cmp	local05, #8 wc
2f730     C0 FF 9F CD |  if_b	jmp	#LR__4622
2f734                 | LR__4625
2f734     A7 F0 03 F6 | 	mov	ptra, fp
2f738     B2 00 A0 FD | 	call	#popregs_
2f73c                 | _fatfs_cc_gen_numname_ret
2f73c     2D 00 64 FD | 	ret
2f740                 | 
2f740                 | _fatfs_cc_sum_sfn
2f740     00 00 06 F6 | 	mov	_var01, #0
2f744                 | ' )
2f744                 | ' {
2f744                 | ' 	BYTE sum = 0;
2f744                 | ' 	UINT n = 11;
2f744                 | ' 
2f744                 | ' 	do {
2f744     97 12 48 FB | 	callpa	#(@LR__4632-@LR__4630)>>2,fcache_load_ptr_
2f748                 | LR__4630
2f748     0B 10 DC FC | 	rep	@LR__4633, #11
2f74c                 | LR__4631
2f74c     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2f750     01 FA 45 F0 | 	shr	result1, #1
2f754     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2f758     07 00 66 F0 | 	shl	_var01, #7
2f75c     00 FB 01 F1 | 	add	result1, _var01
2f760     09 01 C2 FA | 	rdbyte	_var01, arg01
2f764     FD 00 02 F1 | 	add	_var01, result1
2f768     01 12 06 F1 | 	add	arg01, #1
2f76c                 | LR__4632
2f76c                 | LR__4633
2f76c                 | ' 	return sum;
2f76c     00 FB 01 F6 | 	mov	result1, _var01
2f770                 | _fatfs_cc_sum_sfn_ret
2f770     2D 00 64 FD | 	ret
2f774                 | 
2f774                 | _fatfs_cc_dir_read
2f774     0C 4A 05 F6 | 	mov	COUNT_, #12
2f778     A8 00 A0 FD | 	call	#pushregs_
2f77c     09 27 02 F6 | 	mov	local01, arg01
2f780     0A 29 02 F6 | 	mov	local02, arg02
2f784     04 2A 06 F6 | 	mov	local03, #4
2f788     13 2D 02 FB | 	rdlong	local04, local01
2f78c     FF 2E 06 F6 | 	mov	local05, #255
2f790     FF 30 06 F6 | 	mov	local06, #255
2f794                 | ' )
2f794                 | ' {
2f794                 | ' 	FRESULT res = FR_NO_FILE;
2f794                 | ' 	FATFS *fs = dp->obj.fs;
2f794                 | ' 	BYTE attr, b;
2f794                 | ' 
2f794                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2f794                 | ' 
2f794                 | ' 
2f794                 | ' 	while (dp->sect) {
2f794                 | LR__4640
2f794     18 26 06 F1 | 	add	local01, #24
2f798     13 FB 09 FB | 	rdlong	result1, local01 wz
2f79c     18 26 86 F1 | 	sub	local01, #24
2f7a0     AC 01 90 AD |  if_e	jmp	#LR__4650
2f7a4     18 26 06 F1 | 	add	local01, #24
2f7a8     13 15 02 FB | 	rdlong	arg02, local01
2f7ac     18 26 86 F1 | 	sub	local01, #24
2f7b0     16 13 02 F6 | 	mov	arg01, local04
2f7b4     AC ED BF FD | 	call	#_fatfs_cc_move_window
2f7b8     FD 2A 0A F6 | 	mov	local03, result1 wz
2f7bc     90 01 90 5D |  if_ne	jmp	#LR__4650
2f7c0     1C 26 06 F1 | 	add	local01, #28
2f7c4     13 FB 01 FB | 	rdlong	result1, local01
2f7c8     1C 26 86 F1 | 	sub	local01, #28
2f7cc     FD 32 C2 FA | 	rdbyte	local07, result1
2f7d0     19 FB 01 F6 | 	mov	result1, local07
2f7d4     07 FA 4D F7 | 	zerox	result1, #7 wz
2f7d8     04 2A 06 A6 |  if_e	mov	local03, #4
2f7dc                 | ' 			res = FR_NO_FILE; break;
2f7dc     70 01 90 AD |  if_e	jmp	#LR__4650
2f7e0     1C 26 06 F1 | 	add	local01, #28
2f7e4     13 35 02 FB | 	rdlong	local08, local01
2f7e8     0B 34 06 F1 | 	add	local08, #11
2f7ec     1A 37 C2 FA | 	rdbyte	local09, local08
2f7f0     3F 36 06 F5 | 	and	local09, #63
2f7f4     16 26 86 F1 | 	sub	local01, #22
2f7f8     13 37 42 FC | 	wrbyte	local09, local01
2f7fc     06 26 86 F1 | 	sub	local01, #6
2f800     19 FB E1 F8 | 	getbyte	result1, local07, #0
2f804     E5 FA 0D F2 | 	cmp	result1, #229 wz
2f808     19 35 02 56 |  if_ne	mov	local08, local07
2f80c     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2f810     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2f814     1C 00 90 AD |  if_e	jmp	#LR__4641
2f818     00 38 06 F6 | 	mov	local10, #0
2f81c     1B 35 E2 F8 | 	getbyte	local08, local09, #0
2f820     20 34 26 F5 | 	andn	local08, #32
2f824     08 34 0E F2 | 	cmp	local08, #8 wz
2f828     01 38 06 A6 |  if_e	mov	local10, #1
2f82c     14 39 0A F2 | 	cmp	local10, local02 wz
2f830     08 00 90 AD |  if_e	jmp	#LR__4642
2f834                 | LR__4641
2f834     FF 2E 06 F6 | 	mov	local05, #255
2f838     00 01 90 FD | 	jmp	#LR__4649
2f83c                 | LR__4642
2f83c     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2f840     0F 36 0E F2 | 	cmp	local09, #15 wz
2f844     B4 00 90 5D |  if_ne	jmp	#LR__4646
2f848     19 3B E2 F8 | 	getbyte	local11, local07, #0
2f84c     40 3A CE F7 | 	test	local11, #64 wz
2f850     30 00 90 AD |  if_e	jmp	#LR__4643
2f854     1C 26 06 F1 | 	add	local01, #28
2f858     13 3B 02 FB | 	rdlong	local11, local01
2f85c     0D 3A 06 F1 | 	add	local11, #13
2f860     1D 31 C2 FA | 	rdbyte	local06, local11
2f864     19 33 E2 F8 | 	getbyte	local07, local07, #0
2f868     BF 32 06 F5 | 	and	local07, #191
2f86c     19 2F 02 F6 | 	mov	local05, local07
2f870     0C 26 86 F1 | 	sub	local01, #12
2f874     13 3B 02 FB | 	rdlong	local11, local01
2f878     1C 26 06 F1 | 	add	local01, #28
2f87c     13 3B 62 FC | 	wrlong	local11, local01
2f880     2C 26 86 F1 | 	sub	local01, #44
2f884                 | LR__4643
2f884     19 35 E2 F8 | 	getbyte	local08, local07, #0
2f888     17 39 E2 F8 | 	getbyte	local10, local05, #0
2f88c     1C 35 0A F2 | 	cmp	local08, local10 wz
2f890     5C 00 90 5D |  if_ne	jmp	#LR__4644
2f894     18 39 E2 F8 | 	getbyte	local10, local06, #0
2f898     1C 26 06 F1 | 	add	local01, #28
2f89c     13 37 02 FB | 	rdlong	local09, local01
2f8a0     1C 26 86 F1 | 	sub	local01, #28
2f8a4     0D 36 06 F1 | 	add	local09, #13
2f8a8     1B 35 C2 FA | 	rdbyte	local08, local09
2f8ac     1A 37 E2 F8 | 	getbyte	local09, local08, #0
2f8b0     1B 39 0A F2 | 	cmp	local10, local09 wz
2f8b4     38 00 90 5D |  if_ne	jmp	#LR__4644
2f8b8     0C 2C 06 F1 | 	add	local04, #12
2f8bc     16 13 02 FB | 	rdlong	arg01, local04
2f8c0     0C 2C 86 F1 | 	sub	local04, #12
2f8c4     1C 26 06 F1 | 	add	local01, #28
2f8c8     13 3D 02 FB | 	rdlong	local12, local01
2f8cc     1C 26 86 F1 | 	sub	local01, #28
2f8d0     1E 15 02 F6 | 	mov	arg02, local12
2f8d4     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2f8d8     00 FA 4D F2 | 	cmps	result1, #0 wz
2f8dc     17 3D 02 56 |  if_ne	mov	local12, local05
2f8e0     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
2f8e4     01 3C 86 51 |  if_ne	sub	local12, #1
2f8e8     1E 3B 02 56 |  if_ne	mov	local11, local12
2f8ec     04 00 90 5D |  if_ne	jmp	#LR__4645
2f8f0                 | LR__4644
2f8f0     FF 3A 06 F6 | 	mov	local11, #255
2f8f4                 | LR__4645
2f8f4     1D 2F 02 F6 | 	mov	local05, local11
2f8f8     40 00 90 FD | 	jmp	#LR__4648
2f8fc                 | LR__4646
2f8fc     17 3B 02 F6 | 	mov	local11, local05
2f900     07 3A 4E F7 | 	zerox	local11, #7 wz
2f904     20 00 90 5D |  if_ne	jmp	#LR__4647
2f908     18 31 E2 F8 | 	getbyte	local06, local06, #0
2f90c     1C 26 06 F1 | 	add	local01, #28
2f910     13 13 02 FB | 	rdlong	arg01, local01
2f914     1C 26 86 F1 | 	sub	local01, #28
2f918     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2f91c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2f920     FD 30 0A F2 | 	cmp	local06, result1 wz
2f924     28 00 90 AD |  if_e	jmp	#LR__4650
2f928                 | LR__4647
2f928     2C 26 06 F1 | 	add	local01, #44
2f92c     FF FF FF FF 
2f930     13 FF 6B FC | 	wrlong	##-1, local01
2f934     2C 26 86 F1 | 	sub	local01, #44
2f938                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2f938                 | ' 					}
2f938                 | ' 					break;
2f938     14 00 90 FD | 	jmp	#LR__4650
2f93c                 | LR__4648
2f93c                 | LR__4649
2f93c     13 13 02 F6 | 	mov	arg01, local01
2f940     00 14 06 F6 | 	mov	arg02, #0
2f944     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2f948     FD 2A 0A F6 | 	mov	local03, result1 wz
2f94c     44 FE 9F AD |  if_e	jmp	#LR__4640
2f950                 | LR__4650
2f950     00 2A 0E F2 | 	cmp	local03, #0 wz
2f954     18 26 06 51 |  if_ne	add	local01, #24
2f958     13 01 68 5C |  if_ne	wrlong	#0, local01
2f95c                 | ' 	return res;
2f95c     15 FB 01 F6 | 	mov	result1, local03
2f960     A7 F0 03 F6 | 	mov	ptra, fp
2f964     B2 00 A0 FD | 	call	#popregs_
2f968                 | _fatfs_cc_dir_read_ret
2f968     2D 00 64 FD | 	ret
2f96c                 | 
2f96c                 | _fatfs_cc_dir_find
2f96c     0B 4A 05 F6 | 	mov	COUNT_, #11
2f970     A8 00 A0 FD | 	call	#pushregs_
2f974     09 27 02 F6 | 	mov	local01, arg01
2f978     13 29 02 FB | 	rdlong	local02, local01
2f97c     13 13 02 F6 | 	mov	arg01, local01
2f980     00 14 06 F6 | 	mov	arg02, #0
2f984     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2f988     00 FA 0D F2 | 	cmp	result1, #0 wz
2f98c     18 02 90 5D |  if_ne	jmp	#LR__4672
2f990     FF 2A 06 F6 | 	mov	local03, #255
2f994     FF 2C 06 F6 | 	mov	local04, #255
2f998     2C 26 06 F1 | 	add	local01, #44
2f99c     FF FF FF FF 
2f9a0     13 FF 6B FC | 	wrlong	##-1, local01
2f9a4     2C 26 86 F1 | 	sub	local01, #44
2f9a8                 | ' #line 2404 "ff.c"
2f9a8                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2f9a8                 | ' 
2f9a8                 | ' 	do {
2f9a8                 | LR__4660
2f9a8     18 26 06 F1 | 	add	local01, #24
2f9ac     13 15 02 FB | 	rdlong	arg02, local01
2f9b0     18 26 86 F1 | 	sub	local01, #24
2f9b4     14 13 02 F6 | 	mov	arg01, local02
2f9b8     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2f9bc     FD 2E 0A F6 | 	mov	local05, result1 wz
2f9c0     E0 01 90 5D |  if_ne	jmp	#LR__4671
2f9c4     1C 26 06 F1 | 	add	local01, #28
2f9c8     13 17 02 FB | 	rdlong	arg03, local01
2f9cc     1C 26 86 F1 | 	sub	local01, #28
2f9d0     0B 31 C2 FA | 	rdbyte	local06, arg03
2f9d4     18 17 02 F6 | 	mov	arg03, local06
2f9d8     07 16 4E F7 | 	zerox	arg03, #7 wz
2f9dc     04 2E 06 A6 |  if_e	mov	local05, #4
2f9e0     C0 01 90 AD |  if_e	jmp	#LR__4671
2f9e4     1C 26 06 F1 | 	add	local01, #28
2f9e8     13 33 02 FB | 	rdlong	local07, local01
2f9ec     19 17 02 F6 | 	mov	arg03, local07
2f9f0     0B 16 06 F1 | 	add	arg03, #11
2f9f4     0B 35 C2 FA | 	rdbyte	local08, arg03
2f9f8     3F 34 06 F5 | 	and	local08, #63
2f9fc     16 26 86 F1 | 	sub	local01, #22
2fa00     13 35 42 FC | 	wrbyte	local08, local01
2fa04     06 26 86 F1 | 	sub	local01, #6
2fa08     18 17 E2 F8 | 	getbyte	arg03, local06, #0
2fa0c     E5 16 0E F2 | 	cmp	arg03, #229 wz
2fa10     18 00 90 AD |  if_e	jmp	#LR__4661
2fa14     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
2fa18     08 16 CE F7 | 	test	arg03, #8 wz
2fa1c     1A 33 02 56 |  if_ne	mov	local07, local08
2fa20     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
2fa24     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
2fa28     18 00 90 AD |  if_e	jmp	#LR__4662
2fa2c                 | LR__4661
2fa2c     FF 2C 06 F6 | 	mov	local04, #255
2fa30     2C 26 06 F1 | 	add	local01, #44
2fa34     FF FF FF FF 
2fa38     13 FF 6B FC | 	wrlong	##-1, local01
2fa3c     2C 26 86 F1 | 	sub	local01, #44
2fa40     4C 01 90 FD | 	jmp	#LR__4670
2fa44                 | LR__4662
2fa44     1A 35 E2 F8 | 	getbyte	local08, local08, #0
2fa48     0F 34 0E F2 | 	cmp	local08, #15 wz
2fa4c     C8 00 90 5D |  if_ne	jmp	#LR__4666
2fa50     2B 26 06 F1 | 	add	local01, #43
2fa54     13 35 C2 FA | 	rdbyte	local08, local01
2fa58     2B 26 86 F1 | 	sub	local01, #43
2fa5c     40 34 CE F7 | 	test	local08, #64 wz
2fa60     2C 01 90 5D |  if_ne	jmp	#LR__4669
2fa64     18 37 E2 F8 | 	getbyte	local09, local06, #0
2fa68     40 36 CE F7 | 	test	local09, #64 wz
2fa6c     30 00 90 AD |  if_e	jmp	#LR__4663
2fa70     1C 26 06 F1 | 	add	local01, #28
2fa74     13 37 02 FB | 	rdlong	local09, local01
2fa78     0D 36 06 F1 | 	add	local09, #13
2fa7c     1B 2B C2 FA | 	rdbyte	local03, local09
2fa80     18 31 E2 F8 | 	getbyte	local06, local06, #0
2fa84     BF 30 06 F5 | 	and	local06, #191
2fa88     18 2D 02 F6 | 	mov	local04, local06
2fa8c     0C 26 86 F1 | 	sub	local01, #12
2fa90     13 37 02 FB | 	rdlong	local09, local01
2fa94     1C 26 06 F1 | 	add	local01, #28
2fa98     13 37 62 FC | 	wrlong	local09, local01
2fa9c     2C 26 86 F1 | 	sub	local01, #44
2faa0                 | LR__4663
2faa0     18 39 E2 F8 | 	getbyte	local10, local06, #0
2faa4     16 33 E2 F8 | 	getbyte	local07, local04, #0
2faa8     19 39 0A F2 | 	cmp	local10, local07 wz
2faac     5C 00 90 5D |  if_ne	jmp	#LR__4664
2fab0     15 35 E2 F8 | 	getbyte	local08, local03, #0
2fab4     1C 26 06 F1 | 	add	local01, #28
2fab8     13 33 02 FB | 	rdlong	local07, local01
2fabc     1C 26 86 F1 | 	sub	local01, #28
2fac0     0D 32 06 F1 | 	add	local07, #13
2fac4     19 31 C2 FA | 	rdbyte	local06, local07
2fac8     18 33 E2 F8 | 	getbyte	local07, local06, #0
2facc     19 35 0A F2 | 	cmp	local08, local07 wz
2fad0     38 00 90 5D |  if_ne	jmp	#LR__4664
2fad4     0C 28 06 F1 | 	add	local02, #12
2fad8     14 13 02 FB | 	rdlong	arg01, local02
2fadc     0C 28 86 F1 | 	sub	local02, #12
2fae0     1C 26 06 F1 | 	add	local01, #28
2fae4     13 3B 02 FB | 	rdlong	local11, local01
2fae8     1C 26 86 F1 | 	sub	local01, #28
2faec     1D 15 02 F6 | 	mov	arg02, local11
2faf0     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2faf4     00 FA 4D F2 | 	cmps	result1, #0 wz
2faf8     16 3B 02 56 |  if_ne	mov	local11, local04
2fafc     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
2fb00     01 3A 86 51 |  if_ne	sub	local11, #1
2fb04     1D 37 02 56 |  if_ne	mov	local09, local11
2fb08     04 00 90 5D |  if_ne	jmp	#LR__4665
2fb0c                 | LR__4664
2fb0c     FF 36 06 F6 | 	mov	local09, #255
2fb10                 | LR__4665
2fb10     1B 2D 02 F6 | 	mov	local04, local09
2fb14     78 00 90 FD | 	jmp	#LR__4669
2fb18                 | LR__4666
2fb18     16 37 02 F6 | 	mov	local09, local04
2fb1c     07 36 4E F7 | 	zerox	local09, #7 wz
2fb20     20 00 90 5D |  if_ne	jmp	#LR__4667
2fb24     15 39 E2 F8 | 	getbyte	local10, local03, #0
2fb28     1C 26 06 F1 | 	add	local01, #28
2fb2c     13 13 02 FB | 	rdlong	arg01, local01
2fb30     1C 26 86 F1 | 	sub	local01, #28
2fb34     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2fb38     FD FA E1 F8 | 	getbyte	result1, result1, #0
2fb3c     FD 38 0A F2 | 	cmp	local10, result1 wz
2fb40     60 00 90 AD |  if_e	jmp	#LR__4671
2fb44                 | LR__4667
2fb44     2B 26 06 F1 | 	add	local01, #43
2fb48     13 37 C2 FA | 	rdbyte	local09, local01
2fb4c     2B 26 86 F1 | 	sub	local01, #43
2fb50     01 36 CE F7 | 	test	local09, #1 wz
2fb54     24 00 90 5D |  if_ne	jmp	#LR__4668
2fb58     1C 26 06 F1 | 	add	local01, #28
2fb5c     13 13 02 FB | 	rdlong	arg01, local01
2fb60     04 26 06 F1 | 	add	local01, #4
2fb64     13 15 02 F6 | 	mov	arg02, local01
2fb68     20 26 86 F1 | 	sub	local01, #32
2fb6c     0B 16 06 F6 | 	mov	arg03, #11
2fb70     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2fb74     00 FA 0D F2 | 	cmp	result1, #0 wz
2fb78     28 00 90 AD |  if_e	jmp	#LR__4671
2fb7c                 | LR__4668
2fb7c     FF 2C 06 F6 | 	mov	local04, #255
2fb80     2C 26 06 F1 | 	add	local01, #44
2fb84     FF FF FF FF 
2fb88     13 FF 6B FC | 	wrlong	##-1, local01
2fb8c     2C 26 86 F1 | 	sub	local01, #44
2fb90                 | LR__4669
2fb90                 | LR__4670
2fb90     13 13 02 F6 | 	mov	arg01, local01
2fb94     00 14 06 F6 | 	mov	arg02, #0
2fb98     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2fb9c     FD 2E 0A F6 | 	mov	local05, result1 wz
2fba0     04 FE 9F AD |  if_e	jmp	#LR__4660
2fba4                 | LR__4671
2fba4                 | ' 
2fba4                 | ' 	return res;
2fba4     17 FB 01 F6 | 	mov	result1, local05
2fba8                 | LR__4672
2fba8     A7 F0 03 F6 | 	mov	ptra, fp
2fbac     B2 00 A0 FD | 	call	#popregs_
2fbb0                 | _fatfs_cc_dir_find_ret
2fbb0     2D 00 64 FD | 	ret
2fbb4                 | 
2fbb4                 | _fatfs_cc_dir_register
2fbb4     0A 4A 05 F6 | 	mov	COUNT_, #10
2fbb8     A8 00 A0 FD | 	call	#pushregs_
2fbbc     2C F0 07 F1 | 	add	ptra, #44
2fbc0     04 4E 05 F1 | 	add	fp, #4
2fbc4     A7 12 62 FC | 	wrlong	arg01, fp
2fbc8     09 27 02 FB | 	rdlong	local01, arg01
2fbcc     08 4E 05 F1 | 	add	fp, #8
2fbd0     A7 26 62 FC | 	wrlong	local01, fp
2fbd4     08 4E 85 F1 | 	sub	fp, #8
2fbd8     A7 28 02 FB | 	rdlong	local02, fp
2fbdc     04 4E 85 F1 | 	sub	fp, #4
2fbe0     2B 28 06 F1 | 	add	local02, #43
2fbe4     14 29 C2 FA | 	rdbyte	local02, local02
2fbe8     A0 28 CE F7 | 	test	local02, #160 wz
2fbec     06 FA 05 56 |  if_ne	mov	result1, #6
2fbf0     F8 03 90 5D |  if_ne	jmp	#LR__4695
2fbf4                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2fbf4     14 4E 05 F1 | 	add	fp, #20
2fbf8     A7 00 68 FC | 	wrlong	#0, fp
2fbfc     14 4E 85 F1 | 	sub	fp, #20
2fc00     97 28 48 FB | 	callpa	#(@LR__4681-@LR__4680)>>2,fcache_load_ptr_
2fc04                 | LR__4680
2fc04     0C 4E 05 F1 | 	add	fp, #12
2fc08     A7 28 02 FB | 	rdlong	local02, fp
2fc0c     0C 28 06 F1 | 	add	local02, #12
2fc10     14 2B 02 FB | 	rdlong	local03, local02
2fc14     08 4E 05 F1 | 	add	fp, #8
2fc18     A7 2C 02 FB | 	rdlong	local04, fp
2fc1c     14 4E 85 F1 | 	sub	fp, #20
2fc20     01 2C 66 F0 | 	shl	local04, #1
2fc24     15 2D 02 F1 | 	add	local04, local03
2fc28     16 29 EA FA | 	rdword	local02, local04 wz
2fc2c     24 00 90 AD |  if_e	jmp	#LR__4682
2fc30     14 4E 05 F1 | 	add	fp, #20
2fc34     A7 2E 02 FB | 	rdlong	local05, fp
2fc38     17 31 02 F6 | 	mov	local06, local05
2fc3c     17 33 02 F6 | 	mov	local07, local05
2fc40     19 35 02 F6 | 	mov	local08, local07
2fc44     01 34 06 F1 | 	add	local08, #1
2fc48     A7 34 62 FC | 	wrlong	local08, fp
2fc4c     14 4E 85 F1 | 	sub	fp, #20
2fc50     B0 FF 9F FD | 	jmp	#LR__4680
2fc54                 | LR__4681
2fc54                 | LR__4682
2fc54     1C 4E 05 F1 | 	add	fp, #28
2fc58     A7 12 02 F6 | 	mov	arg01, fp
2fc5c     18 4E 85 F1 | 	sub	fp, #24
2fc60     A7 14 02 FB | 	rdlong	arg02, fp
2fc64     04 4E 85 F1 | 	sub	fp, #4
2fc68     20 14 06 F1 | 	add	arg02, #32
2fc6c     0C 16 06 F6 | 	mov	arg03, #12
2fc70     18 6C BF FD | 	call	#__system____builtin_memmove
2fc74     27 4E 05 F1 | 	add	fp, #39
2fc78     A7 36 C2 FA | 	rdbyte	local09, fp
2fc7c     27 4E 85 F1 | 	sub	fp, #39
2fc80     01 36 CE F7 | 	test	local09, #1 wz
2fc84     F4 00 90 AD |  if_e	jmp	#LR__4685
2fc88     04 4E 05 F1 | 	add	fp, #4
2fc8c     A7 38 02 FB | 	rdlong	local10, fp
2fc90     2B 38 06 F1 | 	add	local10, #43
2fc94     1C 81 48 FC | 	wrbyte	#64, local10
2fc98                 | ' 		dp->fn[ 11 ] =  0x40 ;
2fc98                 | ' 		for (n = 1; n < 100; n++) {
2fc98     0C 4E 05 F1 | 	add	fp, #12
2fc9c     A7 02 68 FC | 	wrlong	#1, fp
2fca0     10 4E 85 F1 | 	sub	fp, #16
2fca4                 | LR__4683
2fca4     10 4E 05 F1 | 	add	fp, #16
2fca8     A7 28 02 FB | 	rdlong	local02, fp
2fcac     10 4E 85 F1 | 	sub	fp, #16
2fcb0     64 28 16 F2 | 	cmp	local02, #100 wc
2fcb4     70 00 90 3D |  if_ae	jmp	#LR__4684
2fcb8     04 4E 05 F1 | 	add	fp, #4
2fcbc     A7 12 02 FB | 	rdlong	arg01, fp
2fcc0     20 12 06 F1 | 	add	arg01, #32
2fcc4     18 4E 05 F1 | 	add	fp, #24
2fcc8     A7 14 02 F6 | 	mov	arg02, fp
2fccc     10 4E 85 F1 | 	sub	fp, #16
2fcd0     A7 38 02 FB | 	rdlong	local10, fp
2fcd4     0C 38 06 F1 | 	add	local10, #12
2fcd8     1C 17 02 FB | 	rdlong	arg03, local10
2fcdc     04 4E 05 F1 | 	add	fp, #4
2fce0     A7 18 02 FB | 	rdlong	arg04, fp
2fce4     10 4E 85 F1 | 	sub	fp, #16
2fce8     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2fcec     04 4E 05 F1 | 	add	fp, #4
2fcf0     A7 12 02 FB | 	rdlong	arg01, fp
2fcf4     04 4E 85 F1 | 	sub	fp, #4
2fcf8     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2fcfc     08 4E 05 F1 | 	add	fp, #8
2fd00     A7 FA 61 FC | 	wrlong	result1, fp
2fd04     00 FA 4D F2 | 	cmps	result1, #0 wz
2fd08     08 4E 85 F1 | 	sub	fp, #8
2fd0c     18 00 90 5D |  if_ne	jmp	#LR__4684
2fd10     10 4E 05 F1 | 	add	fp, #16
2fd14     A7 38 02 FB | 	rdlong	local10, fp
2fd18     01 38 06 F1 | 	add	local10, #1
2fd1c     A7 38 62 FC | 	wrlong	local10, fp
2fd20     10 4E 85 F1 | 	sub	fp, #16
2fd24     7C FF 9F FD | 	jmp	#LR__4683
2fd28                 | LR__4684
2fd28     10 4E 05 F1 | 	add	fp, #16
2fd2c     A7 38 02 FB | 	rdlong	local10, fp
2fd30     10 4E 85 F1 | 	sub	fp, #16
2fd34     64 38 0E F2 | 	cmp	local10, #100 wz
2fd38     07 FA 05 A6 |  if_e	mov	result1, #7
2fd3c     AC 02 90 AD |  if_e	jmp	#LR__4695
2fd40     08 4E 05 F1 | 	add	fp, #8
2fd44     A7 38 02 FB | 	rdlong	local10, fp
2fd48     08 4E 85 F1 | 	sub	fp, #8
2fd4c     04 38 0E F2 | 	cmp	local10, #4 wz
2fd50     08 4E 05 51 |  if_ne	add	fp, #8
2fd54     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2fd58     08 4E 85 51 |  if_ne	sub	fp, #8
2fd5c     8C 02 90 5D |  if_ne	jmp	#LR__4695
2fd60     04 4E 05 F1 | 	add	fp, #4
2fd64     A7 38 02 FB | 	rdlong	local10, fp
2fd68     23 4E 05 F1 | 	add	fp, #35
2fd6c     A7 26 C2 FA | 	rdbyte	local01, fp
2fd70     27 4E 85 F1 | 	sub	fp, #39
2fd74     2B 38 06 F1 | 	add	local10, #43
2fd78     1C 27 42 FC | 	wrbyte	local01, local10
2fd7c                 | LR__4685
2fd7c     27 4E 05 F1 | 	add	fp, #39
2fd80     A7 28 C2 FA | 	rdbyte	local02, fp
2fd84     27 4E 85 F1 | 	sub	fp, #39
2fd88     02 28 CE F7 | 	test	local02, #2 wz
2fd8c     20 00 90 AD |  if_e	jmp	#LR__4686
2fd90     14 4E 05 F1 | 	add	fp, #20
2fd94     A7 38 02 FB | 	rdlong	local10, fp
2fd98     0C 38 06 F1 | 	add	local10, #12
2fd9c     0D 38 16 FD | 	qdiv	local10, #13
2fda0     14 4E 85 F1 | 	sub	fp, #20
2fda4     18 38 62 FD | 	getqx	local10
2fda8     01 38 06 F1 | 	add	local10, #1
2fdac     04 00 90 FD | 	jmp	#LR__4687
2fdb0                 | LR__4686
2fdb0     01 38 06 F6 | 	mov	local10, #1
2fdb4                 | LR__4687
2fdb4     18 4E 05 F1 | 	add	fp, #24
2fdb8     A7 38 62 FC | 	wrlong	local10, fp
2fdbc     14 4E 85 F1 | 	sub	fp, #20
2fdc0     A7 12 02 FB | 	rdlong	arg01, fp
2fdc4     1C 15 02 F6 | 	mov	arg02, local10
2fdc8     04 4E 85 F1 | 	sub	fp, #4
2fdcc     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2fdd0     08 4E 05 F1 | 	add	fp, #8
2fdd4     A7 FA 61 FC | 	wrlong	result1, fp
2fdd8     08 4E 85 F1 | 	sub	fp, #8
2fddc     00 FA 0D F2 | 	cmp	result1, #0 wz
2fde0     38 01 90 5D |  if_ne	jmp	#LR__4692
2fde4     18 4E 05 F1 | 	add	fp, #24
2fde8     A7 38 02 FB | 	rdlong	local10, fp
2fdec     01 38 8E F1 | 	sub	local10, #1 wz
2fdf0     A7 38 62 FC | 	wrlong	local10, fp
2fdf4     18 4E 85 F1 | 	sub	fp, #24
2fdf8     20 01 90 AD |  if_e	jmp	#LR__4692
2fdfc     04 4E 05 F1 | 	add	fp, #4
2fe00     A7 38 02 FB | 	rdlong	local10, fp
2fe04     1C 13 02 F6 | 	mov	arg01, local10
2fe08     14 4E 05 F1 | 	add	fp, #20
2fe0c     A7 18 02 FB | 	rdlong	arg04, fp
2fe10     18 4E 85 F1 | 	sub	fp, #24
2fe14     05 18 66 F0 | 	shl	arg04, #5
2fe18     10 38 06 F1 | 	add	local10, #16
2fe1c     1C 15 02 FB | 	rdlong	arg02, local10
2fe20     0C 15 82 F1 | 	sub	arg02, arg04
2fe24     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2fe28     08 4E 05 F1 | 	add	fp, #8
2fe2c     A7 FA 61 FC | 	wrlong	result1, fp
2fe30     08 4E 85 F1 | 	sub	fp, #8
2fe34     00 FA 0D F2 | 	cmp	result1, #0 wz
2fe38     E0 00 90 5D |  if_ne	jmp	#LR__4691
2fe3c     04 4E 05 F1 | 	add	fp, #4
2fe40     A7 12 02 FB | 	rdlong	arg01, fp
2fe44     04 4E 85 F1 | 	sub	fp, #4
2fe48     20 12 06 F1 | 	add	arg01, #32
2fe4c     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2fe50     FD 38 02 F6 | 	mov	local10, result1
2fe54     28 4E 05 F1 | 	add	fp, #40
2fe58     A7 38 42 FC | 	wrbyte	local10, fp
2fe5c     28 4E 85 F1 | 	sub	fp, #40
2fe60                 | ' 			sum = sum_sfn(dp->fn);
2fe60                 | ' 			do {
2fe60                 | LR__4688
2fe60     0C 4E 05 F1 | 	add	fp, #12
2fe64     A7 12 02 FB | 	rdlong	arg01, fp
2fe68     08 4E 85 F1 | 	sub	fp, #8
2fe6c     A7 26 02 FB | 	rdlong	local01, fp
2fe70     04 4E 85 F1 | 	sub	fp, #4
2fe74     18 26 06 F1 | 	add	local01, #24
2fe78     13 15 02 FB | 	rdlong	arg02, local01
2fe7c     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2fe80     08 4E 05 F1 | 	add	fp, #8
2fe84     A7 FA 61 FC | 	wrlong	result1, fp
2fe88     00 FA 4D F2 | 	cmps	result1, #0 wz
2fe8c     08 4E 85 F1 | 	sub	fp, #8
2fe90     88 00 90 5D |  if_ne	jmp	#LR__4690
2fe94     0C 4E 05 F1 | 	add	fp, #12
2fe98     A7 28 02 FB | 	rdlong	local02, fp
2fe9c     0C 28 06 F1 | 	add	local02, #12
2fea0     14 13 02 FB | 	rdlong	arg01, local02
2fea4     08 4E 85 F1 | 	sub	fp, #8
2fea8     A7 26 02 FB | 	rdlong	local01, fp
2feac     1C 26 06 F1 | 	add	local01, #28
2feb0     13 15 02 FB | 	rdlong	arg02, local01
2feb4     14 4E 05 F1 | 	add	fp, #20
2feb8     A7 16 02 FB | 	rdlong	arg03, fp
2febc     10 4E 05 F1 | 	add	fp, #16
2fec0     A7 18 C2 FA | 	rdbyte	arg04, fp
2fec4     28 4E 85 F1 | 	sub	fp, #40
2fec8     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2fecc     0C 4E 05 F1 | 	add	fp, #12
2fed0     A7 38 02 FB | 	rdlong	local10, fp
2fed4     03 38 06 F1 | 	add	local10, #3
2fed8     1C 03 48 FC | 	wrbyte	#1, local10
2fedc     08 4E 85 F1 | 	sub	fp, #8
2fee0     A7 12 02 FB | 	rdlong	arg01, fp
2fee4     04 4E 85 F1 | 	sub	fp, #4
2fee8     00 14 06 F6 | 	mov	arg02, #0
2feec     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2fef0     08 4E 05 F1 | 	add	fp, #8
2fef4     A7 FA 61 FC | 	wrlong	result1, fp
2fef8     00 FA 4D F2 | 	cmps	result1, #0 wz
2fefc     08 4E 85 F1 | 	sub	fp, #8
2ff00     18 00 90 5D |  if_ne	jmp	#LR__4689
2ff04     18 4E 05 F1 | 	add	fp, #24
2ff08     A7 38 02 FB | 	rdlong	local10, fp
2ff0c     01 38 8E F1 | 	sub	local10, #1 wz
2ff10     A7 38 62 FC | 	wrlong	local10, fp
2ff14     18 4E 85 F1 | 	sub	fp, #24
2ff18     44 FF 9F 5D |  if_ne	jmp	#LR__4688
2ff1c                 | LR__4689
2ff1c                 | LR__4690
2ff1c                 | LR__4691
2ff1c                 | LR__4692
2ff1c     08 4E 05 F1 | 	add	fp, #8
2ff20     A7 38 0A FB | 	rdlong	local10, fp wz
2ff24     08 4E 85 F1 | 	sub	fp, #8
2ff28     B4 00 90 5D |  if_ne	jmp	#LR__4694
2ff2c     0C 4E 05 F1 | 	add	fp, #12
2ff30     A7 12 02 FB | 	rdlong	arg01, fp
2ff34     08 4E 85 F1 | 	sub	fp, #8
2ff38     A7 26 02 FB | 	rdlong	local01, fp
2ff3c     04 4E 85 F1 | 	sub	fp, #4
2ff40     18 26 06 F1 | 	add	local01, #24
2ff44     13 15 02 FB | 	rdlong	arg02, local01
2ff48     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2ff4c     08 4E 05 F1 | 	add	fp, #8
2ff50     A7 FA 61 FC | 	wrlong	result1, fp
2ff54     08 4E 85 F1 | 	sub	fp, #8
2ff58     00 FA 0D F2 | 	cmp	result1, #0 wz
2ff5c     80 00 90 5D |  if_ne	jmp	#LR__4693
2ff60     04 4E 05 F1 | 	add	fp, #4
2ff64     A7 28 02 FB | 	rdlong	local02, fp
2ff68     04 4E 85 F1 | 	sub	fp, #4
2ff6c     1C 28 06 F1 | 	add	local02, #28
2ff70     14 13 02 FB | 	rdlong	arg01, local02
2ff74     00 14 06 F6 | 	mov	arg02, #0
2ff78     20 16 06 F6 | 	mov	arg03, #32
2ff7c     98 00 A0 FD | 	call	#\builtin_bytefill_
2ff80     04 4E 05 F1 | 	add	fp, #4
2ff84     A7 14 02 FB | 	rdlong	arg02, fp
2ff88     0A 27 02 F6 | 	mov	local01, arg02
2ff8c     1C 26 06 F1 | 	add	local01, #28
2ff90     13 13 02 FB | 	rdlong	arg01, local01
2ff94     04 4E 85 F1 | 	sub	fp, #4
2ff98     20 14 06 F1 | 	add	arg02, #32
2ff9c     0B 16 06 F6 | 	mov	arg03, #11
2ffa0     E8 68 BF FD | 	call	#__system____builtin_memmove
2ffa4     04 4E 05 F1 | 	add	fp, #4
2ffa8     A7 36 02 FB | 	rdlong	local09, fp
2ffac     1B 39 02 F6 | 	mov	local10, local09
2ffb0     1C 38 06 F1 | 	add	local10, #28
2ffb4     1C 27 02 FB | 	rdlong	local01, local10
2ffb8     2B 36 06 F1 | 	add	local09, #43
2ffbc     1B 39 C2 FA | 	rdbyte	local10, local09
2ffc0     18 38 06 F5 | 	and	local10, #24
2ffc4     0C 26 06 F1 | 	add	local01, #12
2ffc8     13 39 42 FC | 	wrbyte	local10, local01
2ffcc     08 4E 05 F1 | 	add	fp, #8
2ffd0     A7 38 02 FB | 	rdlong	local10, fp
2ffd4     0C 4E 85 F1 | 	sub	fp, #12
2ffd8     03 38 06 F1 | 	add	local10, #3
2ffdc     1C 03 48 FC | 	wrbyte	#1, local10
2ffe0                 | LR__4693
2ffe0                 | LR__4694
2ffe0                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2ffe0                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2ffe0                 | ' 
2ffe0                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2ffe0                 | ' 
2ffe0                 | ' 			fs->wflag = 1;
2ffe0                 | ' 		}
2ffe0                 | ' 	}
2ffe0                 | ' 
2ffe0                 | ' 	return res;
2ffe0     08 4E 05 F1 | 	add	fp, #8
2ffe4     A7 FA 01 FB | 	rdlong	result1, fp
2ffe8     08 4E 85 F1 | 	sub	fp, #8
2ffec                 | LR__4695
2ffec     A7 F0 03 F6 | 	mov	ptra, fp
2fff0     B2 00 A0 FD | 	call	#popregs_
2fff4                 | _fatfs_cc_dir_register_ret
2fff4     2D 00 64 FD | 	ret
2fff8                 | 
2fff8                 | _fatfs_cc_dir_remove
2fff8     05 4A 05 F6 | 	mov	COUNT_, #5
2fffc     A8 00 A0 FD | 	call	#pushregs_
30000     09 27 02 F6 | 	mov	local01, arg01
30004     13 29 02 FB | 	rdlong	local02, local01
30008     10 26 06 F1 | 	add	local01, #16
3000c     13 2B 02 FB | 	rdlong	local03, local01
30010     1C 26 06 F1 | 	add	local01, #28
30014     13 15 02 FB | 	rdlong	arg02, local01
30018     2C 26 86 F1 | 	sub	local01, #44
3001c     FF FF 7F FF 
30020     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
30024     00 2C 06 A6 |  if_e	mov	local04, #0
30028     18 00 90 AD |  if_e	jmp	#LR__4700
3002c     13 13 02 F6 | 	mov	arg01, local01
30030     2C 26 06 F1 | 	add	local01, #44
30034     13 15 02 FB | 	rdlong	arg02, local01
30038     2C 26 86 F1 | 	sub	local01, #44
3003c     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
30040     FD 2C 02 F6 | 	mov	local04, result1
30044                 | LR__4700
30044     16 2F 0A F6 | 	mov	local05, local04 wz
30048     64 00 90 5D |  if_ne	jmp	#LR__4703
3004c                 | ' 		do {
3004c                 | LR__4701
3004c     18 26 06 F1 | 	add	local01, #24
30050     13 15 02 FB | 	rdlong	arg02, local01
30054     18 26 86 F1 | 	sub	local01, #24
30058     14 13 02 F6 | 	mov	arg01, local02
3005c     04 E5 BF FD | 	call	#_fatfs_cc_move_window
30060     FD 2E 0A F6 | 	mov	local05, result1 wz
30064     40 00 90 5D |  if_ne	jmp	#LR__4702
30068     1C 26 06 F1 | 	add	local01, #28
3006c     13 2D 02 FB | 	rdlong	local04, local01
30070     16 CB 49 FC | 	wrbyte	#229, local04
30074     03 28 06 F1 | 	add	local02, #3
30078     14 03 48 FC | 	wrbyte	#1, local02
3007c     03 28 86 F1 | 	sub	local02, #3
30080     0C 26 86 F1 | 	sub	local01, #12
30084     13 2D 02 FB | 	rdlong	local04, local01
30088     10 26 86 F1 | 	sub	local01, #16
3008c     15 2D 12 F2 | 	cmp	local04, local03 wc
30090     14 00 90 3D |  if_ae	jmp	#LR__4702
30094     13 13 02 F6 | 	mov	arg01, local01
30098     00 14 06 F6 | 	mov	arg02, #0
3009c     90 EF BF FD | 	call	#_fatfs_cc_dir_next
300a0     FD 2E 0A F6 | 	mov	local05, result1 wz
300a4     A4 FF 9F AD |  if_e	jmp	#LR__4701
300a8                 | LR__4702
300a8     04 2E 0E F2 | 	cmp	local05, #4 wz
300ac     02 2E 06 A6 |  if_e	mov	local05, #2
300b0                 | LR__4703
300b0                 | ' 	}
300b0                 | ' #line 2590 "ff.c"
300b0                 | ' 	return res;
300b0     17 FB 01 F6 | 	mov	result1, local05
300b4     A7 F0 03 F6 | 	mov	ptra, fp
300b8     B2 00 A0 FD | 	call	#popregs_
300bc                 | _fatfs_cc_dir_remove_ret
300bc     2D 00 64 FD | 	ret
300c0                 | 
300c0                 | _fatfs_cc_get_fileinfo
300c0     0F 4A 05 F6 | 	mov	COUNT_, #15
300c4     A8 00 A0 FD | 	call	#pushregs_
300c8     09 27 02 F6 | 	mov	local01, arg01
300cc     0A 29 02 F6 | 	mov	local02, arg02
300d0     13 2B 02 FB | 	rdlong	local03, local01
300d4     1C 28 06 F1 | 	add	local02, #28
300d8     14 01 48 FC | 	wrbyte	#0, local02
300dc     1C 28 86 F1 | 	sub	local02, #28
300e0     18 26 06 F1 | 	add	local01, #24
300e4     13 2D 0A FB | 	rdlong	local04, local01 wz
300e8     18 26 86 F1 | 	sub	local01, #24
300ec     90 03 90 AD |  if_e	jmp	#LR__4724
300f0     2C 26 06 F1 | 	add	local01, #44
300f4     13 2D 02 FB | 	rdlong	local04, local01
300f8     2C 26 86 F1 | 	sub	local01, #44
300fc     FF FF 7F FF 
30100     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
30104     D8 00 90 AD |  if_e	jmp	#LR__4713
30108     00 2E 06 F6 | 	mov	local05, #0
3010c     00 30 06 F6 | 	mov	local06, #0
30110     00 32 06 F6 | 	mov	local07, #0
30114                 | ' 			si = di = 0;
30114                 | ' 			hs = 0;
30114                 | ' 			while (fs->lfnbuf[si] != 0) {
30114                 | LR__4710
30114     0C 2A 06 F1 | 	add	local03, #12
30118     15 2D 02 FB | 	rdlong	local04, local03
3011c     0C 2A 86 F1 | 	sub	local03, #12
30120     18 35 02 F6 | 	mov	local08, local06
30124     01 34 66 F0 | 	shl	local08, #1
30128     16 35 02 F1 | 	add	local08, local04
3012c     1A 2D EA FA | 	rdword	local04, local08 wz
30130     90 00 90 AD |  if_e	jmp	#LR__4712
30134     0C 2A 06 F1 | 	add	local03, #12
30138     15 37 02 FB | 	rdlong	local09, local03
3013c     0C 2A 86 F1 | 	sub	local03, #12
30140     18 39 02 F6 | 	mov	local10, local06
30144     01 38 66 F0 | 	shl	local10, #1
30148     1B 39 02 F1 | 	add	local10, local09
3014c     1C 3B E2 FA | 	rdword	local11, local10
30150     19 2D 02 F6 | 	mov	local04, local07
30154     0F 2C 4E F7 | 	zerox	local04, #15 wz
30158     01 30 06 F1 | 	add	local06, #1
3015c     24 00 90 5D |  if_ne	jmp	#LR__4711
30160     1D 3D 32 F9 | 	getword	local12, local11, #0
30164     6C 00 00 FF 
30168     00 3C 16 F2 | 	cmp	local12, ##55296 wc
3016c     14 00 90 CD |  if_b	jmp	#LR__4711
30170     1D 3F 32 F9 | 	getword	local13, local11, #0
30174     70 00 00 FF 
30178     00 3E 16 F2 | 	cmp	local13, ##57344 wc
3017c     1D 33 02 C6 |  if_b	mov	local07, local11
30180                 | ' 					hs = wc; continue;
30180     90 FF 9F CD |  if_b	jmp	#LR__4710
30184                 | LR__4711
30184     19 13 32 F9 | 	getword	arg01, local07, #0
30188     10 12 66 F0 | 	shl	arg01, #16
3018c     1D 3B 32 F9 | 	getword	local11, local11, #0
30190     1D 13 42 F5 | 	or	arg01, local11
30194     17 15 02 F6 | 	mov	arg02, local05
30198     1C 28 06 F1 | 	add	local02, #28
3019c     14 15 02 F1 | 	add	arg02, local02
301a0     FF 16 06 F6 | 	mov	arg03, #255
301a4     17 17 82 F1 | 	sub	arg03, local05
301a8     1C 28 86 F1 | 	sub	local02, #28
301ac     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
301b0     FD 40 0A F6 | 	mov	local14, result1 wz
301b4     00 2E 06 A6 |  if_e	mov	local05, #0
301b8     20 2F 02 51 |  if_ne	add	local05, local14
301bc     00 32 06 56 |  if_ne	mov	local07, #0
301c0     50 FF 9F 5D |  if_ne	jmp	#LR__4710
301c4                 | LR__4712
301c4     19 2D 02 F6 | 	mov	local04, local07
301c8     0F 2C 4E F7 | 	zerox	local04, #15 wz
301cc     00 2E 06 56 |  if_ne	mov	local05, #0
301d0     1C 28 06 F1 | 	add	local02, #28
301d4     14 2F 02 F1 | 	add	local05, local02
301d8     17 01 48 FC | 	wrbyte	#0, local05
301dc     1C 28 86 F1 | 	sub	local02, #28
301e0                 | LR__4713
301e0     00 2E 06 F6 | 	mov	local05, #0
301e4     00 30 06 F6 | 	mov	local06, #0
301e8                 | ' 			fno->fname[di] = 0;
301e8                 | ' 		}
301e8                 | ' 	}
301e8                 | ' 
301e8                 | ' 	si = di = 0;
301e8                 | ' 	while (si < 11) {
301e8                 | LR__4714
301e8     0B 30 16 F2 | 	cmp	local06, #11 wc
301ec     20 01 90 3D |  if_ae	jmp	#LR__4717
301f0     1C 26 06 F1 | 	add	local01, #28
301f4     13 37 02 FB | 	rdlong	local09, local01
301f8     1C 26 86 F1 | 	sub	local01, #28
301fc     18 39 02 F6 | 	mov	local10, local06
30200     1B 39 02 F1 | 	add	local10, local09
30204     1C 3B C2 FA | 	rdbyte	local11, local10
30208     1D 2D 32 F9 | 	getword	local04, local11, #0
3020c     20 2C 0E F2 | 	cmp	local04, #32 wz
30210     01 30 06 F1 | 	add	local06, #1
30214     D0 FF 9F AD |  if_e	jmp	#LR__4714
30218     1D 2D 32 F9 | 	getword	local04, local11, #0
3021c     05 2C 0E F2 | 	cmp	local04, #5 wz
30220     E5 3A 06 A6 |  if_e	mov	local11, #229
30224     09 30 0E F2 | 	cmp	local06, #9 wz
30228     20 00 90 5D |  if_ne	jmp	#LR__4715
3022c     0C 2E 16 F2 | 	cmp	local05, #12 wc
30230     18 00 90 3D |  if_ae	jmp	#LR__4715
30234     17 3F 02 F6 | 	mov	local13, local05
30238     0C 28 06 F1 | 	add	local02, #12
3023c     14 3F 02 F1 | 	add	local13, local02
30240     1F 5D 48 FC | 	wrbyte	#46, local13
30244     01 2E 06 F1 | 	add	local05, #1
30248     0C 28 86 F1 | 	sub	local02, #12
3024c                 | LR__4715
3024c     1D 13 32 F9 | 	getword	arg01, local11, #0
30250     07 12 4E F7 | 	zerox	arg01, #7 wz
30254     00 FA 05 56 |  if_ne	mov	result1, #0
30258                 | ' 
30258                 | ' 	return 0;
30258     00 FA 05 A6 |  if_e	mov	result1, #0
3025c     00 FA 0D F2 | 	cmp	result1, #0 wz
30260     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
30264     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
30268     50 00 90 AD |  if_e	jmp	#LR__4716
3026c     1C 26 06 F1 | 	add	local01, #28
30270     13 39 02 FB | 	rdlong	local10, local01
30274     1C 26 86 F1 | 	sub	local01, #28
30278     18 35 02 F6 | 	mov	local08, local06
3027c     1C 35 02 F1 | 	add	local08, local10
30280     1A 13 CA FA | 	rdbyte	arg01, local08 wz
30284     00 FA 05 56 |  if_ne	mov	result1, #0
30288                 | ' 
30288                 | ' 	return 0;
30288     00 FA 05 A6 |  if_e	mov	result1, #0
3028c     00 FA 0D F2 | 	cmp	result1, #0 wz
30290     28 00 90 AD |  if_e	jmp	#LR__4716
30294     1D 3B 32 F9 | 	getword	local11, local11, #0
30298     08 3A 66 F0 | 	shl	local11, #8
3029c     1C 26 06 F1 | 	add	local01, #28
302a0     13 41 02 FB | 	rdlong	local14, local01
302a4     1C 26 86 F1 | 	sub	local01, #28
302a8     18 37 02 F6 | 	mov	local09, local06
302ac     20 37 02 F1 | 	add	local09, local14
302b0     1B 3D C2 FA | 	rdbyte	local12, local09
302b4     1E 3B 42 F5 | 	or	local11, local12
302b8     01 30 06 F1 | 	add	local06, #1
302bc                 | LR__4716
302bc     1D 13 02 F6 | 	mov	arg01, local11
302c0     01 00 00 FF 
302c4     52 15 06 F6 | 	mov	arg02, ##850
302c8     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
302cc     FD 3A 02 F6 | 	mov	local11, result1
302d0     1D 2D 02 F6 | 	mov	local04, local11
302d4     0F 2C 4E F7 | 	zerox	local04, #15 wz
302d8     00 2E 06 A6 |  if_e	mov	local05, #0
302dc     30 00 90 AD |  if_e	jmp	#LR__4717
302e0     1D 13 32 F9 | 	getword	arg01, local11, #0
302e4     17 15 02 F6 | 	mov	arg02, local05
302e8     0C 28 06 F1 | 	add	local02, #12
302ec     14 15 02 F1 | 	add	arg02, local02
302f0     0C 16 06 F6 | 	mov	arg03, #12
302f4     17 17 82 F1 | 	sub	arg03, local05
302f8     0C 28 86 F1 | 	sub	local02, #12
302fc     EC DF BF FD | 	call	#_fatfs_cc_put_utf
30300     FD 40 0A F6 | 	mov	local14, result1 wz
30304     00 2E 06 A6 |  if_e	mov	local05, #0
30308     20 2F 02 51 |  if_ne	add	local05, local14
3030c     D8 FE 9F 5D |  if_ne	jmp	#LR__4714
30310                 | LR__4717
30310     17 2D 02 F6 | 	mov	local04, local05
30314     0C 28 06 F1 | 	add	local02, #12
30318     14 2D 02 F1 | 	add	local04, local02
3031c     16 01 48 FC | 	wrbyte	#0, local04
30320     10 28 06 F1 | 	add	local02, #16
30324     14 2D CA FA | 	rdbyte	local04, local02 wz
30328     1C 28 86 F1 | 	sub	local02, #28
3032c     F8 00 90 5D |  if_ne	jmp	#LR__4723
30330     00 2E 0E F2 | 	cmp	local05, #0 wz
30334     1C 00 90 5D |  if_ne	jmp	#LR__4718
30338     17 3F 02 F6 | 	mov	local13, local05
3033c     1C 28 06 F1 | 	add	local02, #28
30340     14 3F 02 F1 | 	add	local13, local02
30344     1F 7F 48 FC | 	wrbyte	#63, local13
30348     01 2E 06 F1 | 	add	local05, #1
3034c     1C 28 86 F1 | 	sub	local02, #28
30350     A4 00 90 FD | 	jmp	#LR__4722
30354                 | LR__4718
30354                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
30354     00 2E 06 F6 | 	mov	local05, #0
30358     00 30 06 F6 | 	mov	local06, #0
3035c     08 42 06 F6 | 	mov	local15, #8
30360                 | LR__4719
30360     18 2D 02 F6 | 	mov	local04, local06
30364     0C 28 06 F1 | 	add	local02, #12
30368     14 2D 02 F1 | 	add	local04, local02
3036c     16 3F CA FA | 	rdbyte	local13, local04 wz
30370     0C 28 86 F1 | 	sub	local02, #12
30374     80 00 90 AD |  if_e	jmp	#LR__4721
30378     18 35 02 F6 | 	mov	local08, local06
3037c     0C 28 06 F1 | 	add	local02, #12
30380     14 35 02 F1 | 	add	local08, local02
30384     1A 3B C2 FA | 	rdbyte	local11, local08
30388     1D 41 32 F9 | 	getword	local14, local11, #0
3038c     2E 40 0E F2 | 	cmp	local14, #46 wz
30390     0C 28 86 F1 | 	sub	local02, #12
30394     10 42 06 A6 |  if_e	mov	local15, #16
30398     1D 41 32 F9 | 	getword	local14, local11, #0
3039c     41 40 16 F2 | 	cmp	local14, #65 wc
303a0     30 00 90 CD |  if_b	jmp	#LR__4720
303a4     1D 35 32 F9 | 	getword	local08, local11, #0
303a8     5B 34 16 F2 | 	cmp	local08, #91 wc
303ac     24 00 90 3D |  if_ae	jmp	#LR__4720
303b0     1C 26 06 F1 | 	add	local01, #28
303b4     13 37 02 FB | 	rdlong	local09, local01
303b8     1C 26 86 F1 | 	sub	local01, #28
303bc     0C 36 06 F1 | 	add	local09, #12
303c0     1B 39 C2 FA | 	rdbyte	local10, local09
303c4     21 41 E2 F8 | 	getbyte	local14, local15, #0
303c8     20 39 CA F7 | 	test	local10, local14 wz
303cc     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
303d0     20 3A 06 51 |  if_ne	add	local11, #32
303d4                 | LR__4720
303d4     17 41 02 F6 | 	mov	local14, local05
303d8     1C 28 06 F1 | 	add	local02, #28
303dc     14 41 02 F1 | 	add	local14, local02
303e0     1D 3B 32 F9 | 	getword	local11, local11, #0
303e4     20 3B 42 FC | 	wrbyte	local11, local14
303e8     01 30 06 F1 | 	add	local06, #1
303ec     01 2E 06 F1 | 	add	local05, #1
303f0     1C 28 86 F1 | 	sub	local02, #28
303f4     68 FF 9F FD | 	jmp	#LR__4719
303f8                 | LR__4721
303f8                 | LR__4722
303f8     1C 28 06 F1 | 	add	local02, #28
303fc     14 2F 02 F1 | 	add	local05, local02
30400     17 01 48 FC | 	wrbyte	#0, local05
30404     1C 26 06 F1 | 	add	local01, #28
30408     13 2D 02 FB | 	rdlong	local04, local01
3040c     1C 26 86 F1 | 	sub	local01, #28
30410     0C 2C 06 F1 | 	add	local04, #12
30414     16 3F CA FA | 	rdbyte	local13, local04 wz
30418     1C 28 86 F1 | 	sub	local02, #28
3041c     0C 28 06 A1 |  if_e	add	local02, #12
30420     14 01 48 AC |  if_e	wrbyte	#0, local02
30424     0C 28 86 A1 |  if_e	sub	local02, #12
30428                 | LR__4723
30428     1C 26 06 F1 | 	add	local01, #28
3042c     13 3D 02 FB | 	rdlong	local12, local01
30430     0B 3C 06 F1 | 	add	local12, #11
30434     1E 2D C2 FA | 	rdbyte	local04, local12
30438     3F 2C 06 F5 | 	and	local04, #63
3043c     08 28 06 F1 | 	add	local02, #8
30440     14 2D 42 FC | 	wrbyte	local04, local02
30444     08 28 86 F1 | 	sub	local02, #8
30448     13 13 02 FB | 	rdlong	arg01, local01
3044c     1C 12 06 F1 | 	add	arg01, #28
30450                 | ' {
30450                 | ' 
30450                 | ' 	return *((DWORD*)ptr);
30450     09 FB 01 FB | 	rdlong	result1, arg01
30454     14 FB 61 FC | 	wrlong	result1, local02
30458     13 13 02 FB | 	rdlong	arg01, local01
3045c     16 12 06 F1 | 	add	arg01, #22
30460                 | ' {
30460                 | ' 
30460                 | ' 	return *((WORD*)ptr);
30460     09 FB E1 FA | 	rdword	result1, arg01
30464     06 28 06 F1 | 	add	local02, #6
30468     14 FB 51 FC | 	wrword	result1, local02
3046c     13 13 02 FB | 	rdlong	arg01, local01
30470     18 12 06 F1 | 	add	arg01, #24
30474                 | ' {
30474                 | ' 
30474                 | ' 	return *((WORD*)ptr);
30474     09 FB E1 FA | 	rdword	result1, arg01
30478     02 28 86 F1 | 	sub	local02, #2
3047c     14 FB 51 FC | 	wrword	result1, local02
30480                 | LR__4724
30480     A7 F0 03 F6 | 	mov	ptra, fp
30484     B2 00 A0 FD | 	call	#popregs_
30488                 | _fatfs_cc_get_fileinfo_ret
30488     2D 00 64 FD | 	ret
3048c                 | 
3048c                 | _fatfs_cc_create_name
3048c     0D 4A 05 F6 | 	mov	COUNT_, #13
30490     A8 00 A0 FD | 	call	#pushregs_
30494     34 F0 07 F1 | 	add	ptra, #52
30498     04 4E 05 F1 | 	add	fp, #4
3049c     A7 12 62 FC | 	wrlong	arg01, fp
304a0     04 4E 05 F1 | 	add	fp, #4
304a4     A7 14 62 FC | 	wrlong	arg02, fp
304a8     0A FB 01 FB | 	rdlong	result1, arg02
304ac     28 4E 05 F1 | 	add	fp, #40
304b0     A7 FA 61 FC | 	wrlong	result1, fp
304b4     2C 4E 85 F1 | 	sub	fp, #44
304b8     A7 FA 01 FB | 	rdlong	result1, fp
304bc     FD 26 02 FB | 	rdlong	local01, result1
304c0     0C 26 06 F1 | 	add	local01, #12
304c4     13 29 02 FB | 	rdlong	local02, local01
304c8     14 4E 05 F1 | 	add	fp, #20
304cc     A7 28 62 FC | 	wrlong	local02, fp
304d0     14 4E 05 F1 | 	add	fp, #20
304d4     A7 00 68 FC | 	wrlong	#0, fp
304d8     2C 4E 85 F1 | 	sub	fp, #44
304dc                 | ' 
304dc                 | ' 
304dc                 | ' 
304dc                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
304dc                 | ' 	for (;;) {
304dc                 | LR__4730
304dc     30 4E 05 F1 | 	add	fp, #48
304e0     A7 12 02 F6 | 	mov	arg01, fp
304e4     30 4E 85 F1 | 	sub	fp, #48
304e8     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
304ec     1C 4E 05 F1 | 	add	fp, #28
304f0     A7 FA 61 FC | 	wrlong	result1, fp
304f4     1C 4E 85 F1 | 	sub	fp, #28
304f8     FF FF 7F FF 
304fc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
30500     06 FA 05 A6 |  if_e	mov	result1, #6
30504     74 08 90 AD |  if_e	jmp	#LR__4770
30508     1C 4E 05 F1 | 	add	fp, #28
3050c     A7 26 02 FB | 	rdlong	local01, fp
30510     1C 4E 85 F1 | 	sub	fp, #28
30514     80 00 00 FF 
30518     00 26 16 F2 | 	cmp	local01, ##65536 wc
3051c     3C 00 90 CD |  if_b	jmp	#LR__4731
30520     18 4E 05 F1 | 	add	fp, #24
30524     A7 2A 02 FB | 	rdlong	local03, fp
30528     14 4E 05 F1 | 	add	fp, #20
3052c     A7 26 02 FB | 	rdlong	local01, fp
30530     13 2D 02 F6 | 	mov	local04, local01
30534     01 2C 06 F1 | 	add	local04, #1
30538     A7 2C 62 FC | 	wrlong	local04, fp
3053c     01 26 66 F0 | 	shl	local01, #1
30540     15 27 02 F1 | 	add	local01, local03
30544     10 4E 85 F1 | 	sub	fp, #16
30548     A7 2E 02 FB | 	rdlong	local05, fp
3054c     1C 4E 85 F1 | 	sub	fp, #28
30550     17 31 02 F6 | 	mov	local06, local05
30554     10 30 46 F0 | 	shr	local06, #16
30558     13 31 52 FC | 	wrword	local06, local01
3055c                 | LR__4731
3055c     1C 4E 05 F1 | 	add	fp, #28
30560     A7 26 02 FB | 	rdlong	local01, fp
30564     08 4E 85 F1 | 	sub	fp, #8
30568     A7 26 52 FC | 	wrword	local01, fp
3056c     A7 26 E2 FA | 	rdword	local01, fp
30570     14 4E 85 F1 | 	sub	fp, #20
30574     20 26 16 F2 | 	cmp	local01, #32 wc
30578     B0 00 90 CD |  if_b	jmp	#LR__4733
3057c     14 4E 05 F1 | 	add	fp, #20
30580     A7 26 E2 FA | 	rdword	local01, fp
30584     14 4E 85 F1 | 	sub	fp, #20
30588     2F 26 0E F2 | 	cmp	local01, #47 wz
3058c     14 4E 05 51 |  if_ne	add	fp, #20
30590     A7 2C E2 5A |  if_ne	rdword	local04, fp
30594     14 4E 85 51 |  if_ne	sub	fp, #20
30598     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
3059c     8C 00 90 AD |  if_e	jmp	#LR__4733
305a0     14 4E 05 F1 | 	add	fp, #20
305a4     A7 12 E2 FA | 	rdword	arg01, fp
305a8     14 4E 85 F1 | 	sub	fp, #20
305ac     80 12 16 F2 | 	cmp	arg01, #128 wc
305b0     24 00 90 3D |  if_ae	jmp	#LR__4732
305b4     B2 01 00 FF 
305b8     F0 12 06 F6 | 	mov	arg01, ##@LR__5392
305bc     14 4E 05 F1 | 	add	fp, #20
305c0     A7 14 E2 FA | 	rdword	arg02, fp
305c4     14 4E 85 F1 | 	sub	fp, #20
305c8     FC D0 BF FD | 	call	#_fatfs_cc_strchr
305cc     00 FA 0D F2 | 	cmp	result1, #0 wz
305d0     06 FA 05 56 |  if_ne	mov	result1, #6
305d4     A4 07 90 5D |  if_ne	jmp	#LR__4770
305d8                 | LR__4732
305d8     2C 4E 05 F1 | 	add	fp, #44
305dc     A7 30 02 FB | 	rdlong	local06, fp
305e0     2C 4E 85 F1 | 	sub	fp, #44
305e4     FF 30 16 F2 | 	cmp	local06, #255 wc
305e8     06 FA 05 36 |  if_ae	mov	result1, #6
305ec     8C 07 90 3D |  if_ae	jmp	#LR__4770
305f0     18 4E 05 F1 | 	add	fp, #24
305f4     A7 2A 02 FB | 	rdlong	local03, fp
305f8     14 4E 05 F1 | 	add	fp, #20
305fc     A7 28 02 FB | 	rdlong	local02, fp
30600     14 2D 02 F6 | 	mov	local04, local02
30604     01 2C 06 F1 | 	add	local04, #1
30608     A7 2C 62 FC | 	wrlong	local04, fp
3060c     14 27 02 F6 | 	mov	local01, local02
30610     01 26 66 F0 | 	shl	local01, #1
30614     15 27 02 F1 | 	add	local01, local03
30618     18 4E 85 F1 | 	sub	fp, #24
3061c     A7 30 E2 FA | 	rdword	local06, fp
30620     14 4E 85 F1 | 	sub	fp, #20
30624     13 31 52 FC | 	wrword	local06, local01
30628     B0 FE 9F FD | 	jmp	#LR__4730
3062c                 | LR__4733
3062c     14 4E 05 F1 | 	add	fp, #20
30630     A7 32 E2 FA | 	rdword	local07, fp
30634     14 4E 85 F1 | 	sub	fp, #20
30638     20 32 16 F2 | 	cmp	local07, #32 wc
3063c     10 4E 05 C1 |  if_b	add	fp, #16
30640     A7 08 48 CC |  if_b	wrbyte	#4, fp
30644     10 4E 85 C1 |  if_b	sub	fp, #16
30648     74 00 90 CD |  if_b	jmp	#LR__4738
3064c     97 24 48 FB | 	callpa	#(@LR__4736-@LR__4734)>>2,fcache_load_ptr_
30650                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
30650                 | LR__4734
30650     30 4E 05 F1 | 	add	fp, #48
30654     A7 2C 02 FB | 	rdlong	local04, fp
30658     30 4E 85 F1 | 	sub	fp, #48
3065c     16 33 C2 FA | 	rdbyte	local07, local04
30660     2F 32 0E F2 | 	cmp	local07, #47 wz
30664     18 00 90 AD |  if_e	jmp	#LR__4735
30668     30 4E 05 F1 | 	add	fp, #48
3066c     A7 2C 02 FB | 	rdlong	local04, fp
30670     30 4E 85 F1 | 	sub	fp, #48
30674     16 29 C2 FA | 	rdbyte	local02, local04
30678     5C 28 0E F2 | 	cmp	local02, #92 wz
3067c     18 00 90 5D |  if_ne	jmp	#LR__4737
30680                 | LR__4735
30680     30 4E 05 F1 | 	add	fp, #48
30684     A7 26 02 FB | 	rdlong	local01, fp
30688     01 26 06 F1 | 	add	local01, #1
3068c     A7 26 62 FC | 	wrlong	local01, fp
30690     30 4E 85 F1 | 	sub	fp, #48
30694     B8 FF 9F FD | 	jmp	#LR__4734
30698                 | LR__4736
30698                 | LR__4737
30698     10 4E 05 F1 | 	add	fp, #16
3069c     A7 00 48 FC | 	wrbyte	#0, fp
306a0     20 4E 05 F1 | 	add	fp, #32
306a4     A7 30 02 FB | 	rdlong	local06, fp
306a8     30 4E 85 F1 | 	sub	fp, #48
306ac     18 33 C2 FA | 	rdbyte	local07, local06
306b0     20 32 16 F2 | 	cmp	local07, #32 wc
306b4     10 4E 05 C1 |  if_b	add	fp, #16
306b8     A7 08 48 CC |  if_b	wrbyte	#4, fp
306bc     10 4E 85 C1 |  if_b	sub	fp, #16
306c0                 | LR__4738
306c0     08 4E 05 F1 | 	add	fp, #8
306c4     A7 32 02 FB | 	rdlong	local07, fp
306c8     28 4E 05 F1 | 	add	fp, #40
306cc     A7 26 02 FB | 	rdlong	local01, fp
306d0     30 4E 85 F1 | 	sub	fp, #48
306d4     19 27 62 FC | 	wrlong	local01, local07
306d8     97 38 48 FB | 	callpa	#(@LR__4740-@LR__4739)>>2,fcache_load_ptr_
306dc                 | ' 	}
306dc                 | ' 	*path = p;
306dc                 | ' #line 2862 "ff.c"
306dc                 | ' 	while (di) {
306dc                 | LR__4739
306dc     2C 4E 05 F1 | 	add	fp, #44
306e0     A7 32 0A FB | 	rdlong	local07, fp wz
306e4     2C 4E 85 F1 | 	sub	fp, #44
306e8     60 00 90 AD |  if_e	jmp	#LR__4741
306ec     18 4E 05 F1 | 	add	fp, #24
306f0     A7 30 02 FB | 	rdlong	local06, fp
306f4     14 4E 05 F1 | 	add	fp, #20
306f8     A7 2C 02 FB | 	rdlong	local04, fp
306fc     01 2C 86 F1 | 	sub	local04, #1
30700     01 2C 66 F0 | 	shl	local04, #1
30704     18 2D 02 F1 | 	add	local04, local06
30708     16 31 E2 FA | 	rdword	local06, local04
3070c     18 4E 85 F1 | 	sub	fp, #24
30710     A7 30 52 FC | 	wrword	local06, fp
30714     A7 32 E2 FA | 	rdword	local07, fp
30718     14 4E 85 F1 | 	sub	fp, #20
3071c     20 32 0E F2 | 	cmp	local07, #32 wz
30720     14 4E 05 51 |  if_ne	add	fp, #20
30724     A7 26 E2 5A |  if_ne	rdword	local01, fp
30728     14 4E 85 51 |  if_ne	sub	fp, #20
3072c     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
30730     18 00 90 5D |  if_ne	jmp	#LR__4741
30734     2C 4E 05 F1 | 	add	fp, #44
30738     A7 26 02 FB | 	rdlong	local01, fp
3073c     01 26 86 F1 | 	sub	local01, #1
30740     A7 26 62 FC | 	wrlong	local01, fp
30744     2C 4E 85 F1 | 	sub	fp, #44
30748     90 FF 9F FD | 	jmp	#LR__4739
3074c                 | LR__4740
3074c                 | LR__4741
3074c     18 4E 05 F1 | 	add	fp, #24
30750     A7 34 02 FB | 	rdlong	local08, fp
30754     14 4E 05 F1 | 	add	fp, #20
30758     A7 2C 02 FB | 	rdlong	local04, fp
3075c     01 2C 66 F0 | 	shl	local04, #1
30760     1A 2D 02 F1 | 	add	local04, local08
30764     16 01 58 FC | 	wrword	#0, local04
30768     A7 32 0A FB | 	rdlong	local07, fp wz
3076c     2C 4E 85 F1 | 	sub	fp, #44
30770     06 FA 05 A6 |  if_e	mov	result1, #6
30774     04 06 90 AD |  if_e	jmp	#LR__4770
30778                 | ' 
30778                 | ' 
30778                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
30778     28 4E 05 F1 | 	add	fp, #40
3077c     A7 00 68 FC | 	wrlong	#0, fp
30780     28 4E 85 F1 | 	sub	fp, #40
30784     97 22 48 FB | 	callpa	#(@LR__4743-@LR__4742)>>2,fcache_load_ptr_
30788                 | LR__4742
30788     18 4E 05 F1 | 	add	fp, #24
3078c     A7 36 02 FB | 	rdlong	local09, fp
30790     10 4E 05 F1 | 	add	fp, #16
30794     A7 38 02 FB | 	rdlong	local10, fp
30798     28 4E 85 F1 | 	sub	fp, #40
3079c     01 38 66 F0 | 	shl	local10, #1
307a0     1B 39 02 F1 | 	add	local10, local09
307a4     1C 3B E2 FA | 	rdword	local11, local10
307a8     20 3A 0E F2 | 	cmp	local11, #32 wz
307ac     1C 00 90 5D |  if_ne	jmp	#LR__4744
307b0     28 4E 05 F1 | 	add	fp, #40
307b4     A7 3C 02 FB | 	rdlong	local12, fp
307b8     1E 2F 02 F6 | 	mov	local05, local12
307bc     01 2E 06 F1 | 	add	local05, #1
307c0     A7 2E 62 FC | 	wrlong	local05, fp
307c4     28 4E 85 F1 | 	sub	fp, #40
307c8     BC FF 9F FD | 	jmp	#LR__4742
307cc                 | LR__4743
307cc                 | LR__4744
307cc     28 4E 05 F1 | 	add	fp, #40
307d0     A7 32 02 FB | 	rdlong	local07, fp
307d4     28 4E 85 F1 | 	sub	fp, #40
307d8     01 32 16 F2 | 	cmp	local07, #1 wc
307dc     28 00 90 3D |  if_ae	jmp	#LR__4745
307e0     18 4E 05 F1 | 	add	fp, #24
307e4     A7 2A 02 FB | 	rdlong	local03, fp
307e8     10 4E 05 F1 | 	add	fp, #16
307ec     A7 36 02 FB | 	rdlong	local09, fp
307f0     28 4E 85 F1 | 	sub	fp, #40
307f4     01 36 66 F0 | 	shl	local09, #1
307f8     15 37 02 F1 | 	add	local09, local03
307fc     1B 27 E2 FA | 	rdword	local01, local09
30800     2E 26 0E F2 | 	cmp	local01, #46 wz
30804     14 00 90 5D |  if_ne	jmp	#LR__4746
30808                 | LR__4745
30808     10 4E 05 F1 | 	add	fp, #16
3080c     A7 32 C2 FA | 	rdbyte	local07, fp
30810     03 32 46 F5 | 	or	local07, #3
30814     A7 32 42 FC | 	wrbyte	local07, fp
30818     10 4E 85 F1 | 	sub	fp, #16
3081c                 | LR__4746
3081c     97 2C 48 FB | 	callpa	#(@LR__4748-@LR__4747)>>2,fcache_load_ptr_
30820                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
30820                 | LR__4747
30820     2C 4E 05 F1 | 	add	fp, #44
30824     A7 32 02 FB | 	rdlong	local07, fp
30828     2C 4E 85 F1 | 	sub	fp, #44
3082c     01 32 16 F2 | 	cmp	local07, #1 wc
30830     44 00 90 CD |  if_b	jmp	#LR__4749
30834     18 4E 05 F1 | 	add	fp, #24
30838     A7 30 02 FB | 	rdlong	local06, fp
3083c     14 4E 05 F1 | 	add	fp, #20
30840     A7 2A 02 FB | 	rdlong	local03, fp
30844     2C 4E 85 F1 | 	sub	fp, #44
30848     01 2A 86 F1 | 	sub	local03, #1
3084c     01 2A 66 F0 | 	shl	local03, #1
30850     18 2B 02 F1 | 	add	local03, local06
30854     15 27 E2 FA | 	rdword	local01, local03
30858     2E 26 0E F2 | 	cmp	local01, #46 wz
3085c     18 00 90 AD |  if_e	jmp	#LR__4749
30860     2C 4E 05 F1 | 	add	fp, #44
30864     A7 26 02 FB | 	rdlong	local01, fp
30868     01 26 86 F1 | 	sub	local01, #1
3086c     A7 26 62 FC | 	wrlong	local01, fp
30870     2C 4E 85 F1 | 	sub	fp, #44
30874     A8 FF 9F FD | 	jmp	#LR__4747
30878                 | LR__4748
30878                 | LR__4749
30878     04 4E 05 F1 | 	add	fp, #4
3087c     A7 12 02 FB | 	rdlong	arg01, fp
30880     04 4E 85 F1 | 	sub	fp, #4
30884     20 12 06 F1 | 	add	arg01, #32
30888     20 14 06 F6 | 	mov	arg02, #32
3088c     0B 16 06 F6 | 	mov	arg03, #11
30890     09 3F 02 F6 | 	mov	local13, arg01
30894     98 00 A0 FD | 	call	#\builtin_bytefill_
30898     1F FB 01 F6 | 	mov	result1, local13
3089c     0C 4E 05 F1 | 	add	fp, #12
308a0     A7 00 48 FC | 	wrbyte	#0, fp
308a4     A7 32 C2 FA | 	rdbyte	local07, fp
308a8     14 4E 05 F1 | 	add	fp, #20
308ac     A7 32 62 FC | 	wrlong	local07, fp
308b0     04 4E 05 F1 | 	add	fp, #4
308b4     A7 10 68 FC | 	wrlong	#8, fp
308b8     24 4E 85 F1 | 	sub	fp, #36
308bc                 | ' 
308bc                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
308bc                 | ' 	i = b = 0; ni = 8;
308bc                 | ' 	for (;;) {
308bc                 | LR__4750
308bc     18 4E 05 F1 | 	add	fp, #24
308c0     A7 2A 02 FB | 	rdlong	local03, fp
308c4     10 4E 05 F1 | 	add	fp, #16
308c8     A7 36 02 FB | 	rdlong	local09, fp
308cc     1B 2D 02 F6 | 	mov	local04, local09
308d0     01 2C 06 F1 | 	add	local04, #1
308d4     A7 2C 62 FC | 	wrlong	local04, fp
308d8     01 36 66 F0 | 	shl	local09, #1
308dc     15 37 02 F1 | 	add	local09, local03
308e0     1B 31 E2 FA | 	rdword	local06, local09
308e4     14 4E 85 F1 | 	sub	fp, #20
308e8     A7 30 52 FC | 	wrword	local06, fp
308ec     A7 32 EA FA | 	rdword	local07, fp wz
308f0     14 4E 85 F1 | 	sub	fp, #20
308f4     74 03 90 AD |  if_e	jmp	#LR__4766
308f8     14 4E 05 F1 | 	add	fp, #20
308fc     A7 32 E2 FA | 	rdword	local07, fp
30900     14 4E 85 F1 | 	sub	fp, #20
30904     20 32 0E F2 | 	cmp	local07, #32 wz
30908     30 00 90 AD |  if_e	jmp	#LR__4751
3090c     14 4E 05 F1 | 	add	fp, #20
30910     A7 26 E2 FA | 	rdword	local01, fp
30914     14 4E 85 F1 | 	sub	fp, #20
30918     2E 26 0E F2 | 	cmp	local01, #46 wz
3091c     34 00 90 5D |  if_ne	jmp	#LR__4752
30920     28 4E 05 F1 | 	add	fp, #40
30924     A7 2C 02 FB | 	rdlong	local04, fp
30928     04 4E 05 F1 | 	add	fp, #4
3092c     A7 38 02 FB | 	rdlong	local10, fp
30930     2C 4E 85 F1 | 	sub	fp, #44
30934     1C 2D 0A F2 | 	cmp	local04, local10 wz
30938     18 00 90 AD |  if_e	jmp	#LR__4752
3093c                 | LR__4751
3093c     10 4E 05 F1 | 	add	fp, #16
30940     A7 32 C2 FA | 	rdbyte	local07, fp
30944     03 32 46 F5 | 	or	local07, #3
30948     A7 32 42 FC | 	wrbyte	local07, fp
3094c     10 4E 85 F1 | 	sub	fp, #16
30950                 | ' 			cf |=  0x01  |  0x02 ;
30950                 | ' 			continue;
30950     68 FF 9F FD | 	jmp	#LR__4750
30954                 | LR__4752
30954     20 4E 05 F1 | 	add	fp, #32
30958     A7 32 02 FB | 	rdlong	local07, fp
3095c     04 4E 05 F1 | 	add	fp, #4
30960     A7 26 02 FB | 	rdlong	local01, fp
30964     24 4E 85 F1 | 	sub	fp, #36
30968     13 33 12 F2 | 	cmp	local07, local01 wc
3096c     1C 00 90 3D |  if_ae	jmp	#LR__4753
30970     28 4E 05 F1 | 	add	fp, #40
30974     A7 34 02 FB | 	rdlong	local08, fp
30978     04 4E 05 F1 | 	add	fp, #4
3097c     A7 38 02 FB | 	rdlong	local10, fp
30980     2C 4E 85 F1 | 	sub	fp, #44
30984     1C 35 0A F2 | 	cmp	local08, local10 wz
30988     B0 00 90 5D |  if_ne	jmp	#LR__4755
3098c                 | LR__4753
3098c     24 4E 05 F1 | 	add	fp, #36
30990     A7 32 02 FB | 	rdlong	local07, fp
30994     24 4E 85 F1 | 	sub	fp, #36
30998     0B 32 0E F2 | 	cmp	local07, #11 wz
3099c     18 00 90 5D |  if_ne	jmp	#LR__4754
309a0     10 4E 05 F1 | 	add	fp, #16
309a4     A7 32 C2 FA | 	rdbyte	local07, fp
309a8     03 32 46 F5 | 	or	local07, #3
309ac     A7 32 42 FC | 	wrbyte	local07, fp
309b0     10 4E 85 F1 | 	sub	fp, #16
309b4                 | ' 				cf |=  0x01  |  0x02 ;
309b4                 | ' 				break;
309b4     B4 02 90 FD | 	jmp	#LR__4766
309b8                 | LR__4754
309b8     28 4E 05 F1 | 	add	fp, #40
309bc     A7 32 02 FB | 	rdlong	local07, fp
309c0     04 4E 05 F1 | 	add	fp, #4
309c4     A7 26 02 FB | 	rdlong	local01, fp
309c8     2C 4E 85 F1 | 	sub	fp, #44
309cc     13 33 0A F2 | 	cmp	local07, local01 wz
309d0     10 4E 05 51 |  if_ne	add	fp, #16
309d4     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
309d8     03 32 46 55 |  if_ne	or	local07, #3
309dc     A7 32 42 5C |  if_ne	wrbyte	local07, fp
309e0     10 4E 85 51 |  if_ne	sub	fp, #16
309e4     28 4E 05 F1 | 	add	fp, #40
309e8     A7 32 02 FB | 	rdlong	local07, fp
309ec     04 4E 05 F1 | 	add	fp, #4
309f0     A7 28 02 FB | 	rdlong	local02, fp
309f4     2C 4E 85 F1 | 	sub	fp, #44
309f8     14 33 1A F2 | 	cmp	local07, local02 wcz
309fc     6C 02 90 1D |  if_a	jmp	#LR__4766
30a00     2C 4E 05 F1 | 	add	fp, #44
30a04     A7 32 02 FB | 	rdlong	local07, fp
30a08     04 4E 85 F1 | 	sub	fp, #4
30a0c     A7 32 62 FC | 	wrlong	local07, fp
30a10     08 4E 85 F1 | 	sub	fp, #8
30a14     A7 10 68 FC | 	wrlong	#8, fp
30a18     04 4E 05 F1 | 	add	fp, #4
30a1c     A7 16 68 FC | 	wrlong	#11, fp
30a20     18 4E 85 F1 | 	sub	fp, #24
30a24     A7 3A C2 FA | 	rdbyte	local11, fp
30a28     1D 33 E2 F8 | 	getbyte	local07, local11, #0
30a2c     02 32 66 F0 | 	shl	local07, #2
30a30     A7 32 42 FC | 	wrbyte	local07, fp
30a34     0C 4E 85 F1 | 	sub	fp, #12
30a38                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
30a38                 | ' 			continue;
30a38     80 FE 9F FD | 	jmp	#LR__4750
30a3c                 | LR__4755
30a3c     14 4E 05 F1 | 	add	fp, #20
30a40     A7 32 E2 FA | 	rdword	local07, fp
30a44     14 4E 85 F1 | 	sub	fp, #20
30a48     80 32 16 F2 | 	cmp	local07, #128 wc
30a4c     6C 00 90 CD |  if_b	jmp	#LR__4757
30a50     10 4E 05 F1 | 	add	fp, #16
30a54     A7 32 C2 FA | 	rdbyte	local07, fp
30a58     02 32 46 F5 | 	or	local07, #2
30a5c     A7 32 42 FC | 	wrbyte	local07, fp
30a60     04 4E 05 F1 | 	add	fp, #4
30a64     A7 12 E2 FA | 	rdword	arg01, fp
30a68     14 4E 85 F1 | 	sub	fp, #20
30a6c     01 00 00 FF 
30a70     52 15 06 F6 | 	mov	arg02, ##850
30a74     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
30a78     14 4E 05 F1 | 	add	fp, #20
30a7c     A7 FA 51 FC | 	wrword	result1, fp
30a80     A7 32 E2 FA | 	rdword	local07, fp
30a84     14 4E 85 F1 | 	sub	fp, #20
30a88     80 32 CE F7 | 	test	local07, #128 wz
30a8c     2C 00 90 AD |  if_e	jmp	#LR__4756
30a90     14 4E 05 F1 | 	add	fp, #20
30a94     A7 28 E2 FA | 	rdword	local02, fp
30a98     7F 28 06 F5 | 	and	local02, #127
30a9c     01 00 00 FF 
30aa0     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
30aa4     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
30aa8     14 33 C2 FA | 	rdbyte	local07, local02
30aac     A7 32 52 FC | 	wrword	local07, fp
30ab0     14 4E 85 F1 | 	sub	fp, #20
30ab4     01 00 00 FF 
30ab8     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
30abc                 | LR__4756
30abc                 | LR__4757
30abc     14 4E 05 F1 | 	add	fp, #20
30ac0     A7 32 E2 FA | 	rdword	local07, fp
30ac4     14 4E 85 F1 | 	sub	fp, #20
30ac8     00 33 16 F2 | 	cmp	local07, #256 wc
30acc     88 00 90 CD |  if_b	jmp	#LR__4759
30ad0     24 4E 05 F1 | 	add	fp, #36
30ad4     A7 32 02 FB | 	rdlong	local07, fp
30ad8     01 32 86 F1 | 	sub	local07, #1
30adc     04 4E 85 F1 | 	sub	fp, #4
30ae0     A7 28 02 FB | 	rdlong	local02, fp
30ae4     20 4E 85 F1 | 	sub	fp, #32
30ae8     19 29 12 F2 | 	cmp	local02, local07 wc
30aec     2C 00 90 CD |  if_b	jmp	#LR__4758
30af0     10 4E 05 F1 | 	add	fp, #16
30af4     A7 3A C2 FA | 	rdbyte	local11, fp
30af8     1D 33 E2 F8 | 	getbyte	local07, local11, #0
30afc     03 32 46 F5 | 	or	local07, #3
30b00     A7 32 42 FC | 	wrbyte	local07, fp
30b04     14 4E 05 F1 | 	add	fp, #20
30b08     A7 32 02 FB | 	rdlong	local07, fp
30b0c     04 4E 85 F1 | 	sub	fp, #4
30b10     A7 32 62 FC | 	wrlong	local07, fp
30b14     20 4E 85 F1 | 	sub	fp, #32
30b18                 | ' 				cf |=  0x01  |  0x02 ;
30b18                 | ' 				i = ni; continue;
30b18     A0 FD 9F FD | 	jmp	#LR__4750
30b1c                 | LR__4758
30b1c     04 4E 05 F1 | 	add	fp, #4
30b20     A7 36 02 FB | 	rdlong	local09, fp
30b24     1C 4E 05 F1 | 	add	fp, #28
30b28     A7 38 02 FB | 	rdlong	local10, fp
30b2c     1C 2D 02 F6 | 	mov	local04, local10
30b30     01 2C 06 F1 | 	add	local04, #1
30b34     A7 2C 62 FC | 	wrlong	local04, fp
30b38     20 36 06 F1 | 	add	local09, #32
30b3c     1B 39 02 F1 | 	add	local10, local09
30b40     0C 4E 85 F1 | 	sub	fp, #12
30b44     A7 2A E2 FA | 	rdword	local03, fp
30b48     14 4E 85 F1 | 	sub	fp, #20
30b4c     08 2A 46 F0 | 	shr	local03, #8
30b50     1C 2B 42 FC | 	wrbyte	local03, local10
30b54     D4 00 90 FD | 	jmp	#LR__4765
30b58                 | LR__4759
30b58     14 4E 05 F1 | 	add	fp, #20
30b5c     A7 32 EA FA | 	rdword	local07, fp wz
30b60     14 4E 85 F1 | 	sub	fp, #20
30b64     20 00 90 AD |  if_e	jmp	#LR__4760
30b68     B2 01 00 FF 
30b6c     F9 12 06 F6 | 	mov	arg01, ##@LR__5393
30b70     14 4E 05 F1 | 	add	fp, #20
30b74     A7 14 E2 FA | 	rdword	arg02, fp
30b78     14 4E 85 F1 | 	sub	fp, #20
30b7c     48 CB BF FD | 	call	#_fatfs_cc_strchr
30b80     00 FA 0D F2 | 	cmp	result1, #0 wz
30b84     20 00 90 AD |  if_e	jmp	#LR__4761
30b88                 | LR__4760
30b88     14 4E 05 F1 | 	add	fp, #20
30b8c     A7 BE 58 FC | 	wrword	#95, fp
30b90     04 4E 85 F1 | 	sub	fp, #4
30b94     A7 32 C2 FA | 	rdbyte	local07, fp
30b98     03 32 46 F5 | 	or	local07, #3
30b9c     A7 32 42 FC | 	wrbyte	local07, fp
30ba0     10 4E 85 F1 | 	sub	fp, #16
30ba4     84 00 90 FD | 	jmp	#LR__4764
30ba8                 | LR__4761
30ba8     14 4E 05 F1 | 	add	fp, #20
30bac     A7 32 E2 FA | 	rdword	local07, fp
30bb0     14 4E 85 F1 | 	sub	fp, #20
30bb4     41 32 16 F2 | 	cmp	local07, #65 wc
30bb8     24 00 90 CD |  if_b	jmp	#LR__4762
30bbc     14 4E 05 F1 | 	add	fp, #20
30bc0     A7 26 E2 FA | 	rdword	local01, fp
30bc4     14 4E 85 F1 | 	sub	fp, #20
30bc8     5B 26 16 F2 | 	cmp	local01, #91 wc
30bcc     0C 4E 05 C1 |  if_b	add	fp, #12
30bd0     A7 32 C2 CA |  if_b	rdbyte	local07, fp
30bd4     02 32 46 C5 |  if_b	or	local07, #2
30bd8     A7 32 42 CC |  if_b	wrbyte	local07, fp
30bdc     0C 4E 85 C1 |  if_b	sub	fp, #12
30be0                 | LR__4762
30be0     14 4E 05 F1 | 	add	fp, #20
30be4     A7 32 E2 FA | 	rdword	local07, fp
30be8     14 4E 85 F1 | 	sub	fp, #20
30bec     61 32 16 F2 | 	cmp	local07, #97 wc
30bf0     38 00 90 CD |  if_b	jmp	#LR__4763
30bf4     14 4E 05 F1 | 	add	fp, #20
30bf8     A7 26 E2 FA | 	rdword	local01, fp
30bfc     14 4E 85 F1 | 	sub	fp, #20
30c00     7B 26 16 F2 | 	cmp	local01, #123 wc
30c04     24 00 90 3D |  if_ae	jmp	#LR__4763
30c08     0C 4E 05 F1 | 	add	fp, #12
30c0c     A7 32 C2 FA | 	rdbyte	local07, fp
30c10     01 32 46 F5 | 	or	local07, #1
30c14     A7 32 42 FC | 	wrbyte	local07, fp
30c18     08 4E 05 F1 | 	add	fp, #8
30c1c     A7 32 E2 FA | 	rdword	local07, fp
30c20     20 32 86 F1 | 	sub	local07, #32
30c24     A7 32 52 FC | 	wrword	local07, fp
30c28     14 4E 85 F1 | 	sub	fp, #20
30c2c                 | LR__4763
30c2c                 | LR__4764
30c2c                 | LR__4765
30c2c     04 4E 05 F1 | 	add	fp, #4
30c30     A7 3A 02 FB | 	rdlong	local11, fp
30c34     1D 37 02 F6 | 	mov	local09, local11
30c38     1C 4E 05 F1 | 	add	fp, #28
30c3c     A7 28 02 FB | 	rdlong	local02, fp
30c40     14 2D 02 F6 | 	mov	local04, local02
30c44     01 2C 06 F1 | 	add	local04, #1
30c48     A7 2C 62 FC | 	wrlong	local04, fp
30c4c     14 39 02 F6 | 	mov	local10, local02
30c50     20 36 06 F1 | 	add	local09, #32
30c54     1B 39 02 F1 | 	add	local10, local09
30c58     0C 4E 85 F1 | 	sub	fp, #12
30c5c     A7 2A E2 FA | 	rdword	local03, fp
30c60     14 4E 85 F1 | 	sub	fp, #20
30c64     1C 2B 42 FC | 	wrbyte	local03, local10
30c68     50 FC 9F FD | 	jmp	#LR__4750
30c6c                 | LR__4766
30c6c     04 4E 05 F1 | 	add	fp, #4
30c70     A7 3A 02 FB | 	rdlong	local11, fp
30c74     04 4E 85 F1 | 	sub	fp, #4
30c78     20 3A 06 F1 | 	add	local11, #32
30c7c     1D 33 C2 FA | 	rdbyte	local07, local11
30c80     E5 32 0E F2 | 	cmp	local07, #229 wz
30c84     04 4E 05 A1 |  if_e	add	fp, #4
30c88     A7 32 02 AB |  if_e	rdlong	local07, fp
30c8c     04 4E 85 A1 |  if_e	sub	fp, #4
30c90     20 32 06 A1 |  if_e	add	local07, #32
30c94     19 0B 48 AC |  if_e	wrbyte	#5, local07
30c98     24 4E 05 F1 | 	add	fp, #36
30c9c     A7 32 02 FB | 	rdlong	local07, fp
30ca0     24 4E 85 F1 | 	sub	fp, #36
30ca4     08 32 0E F2 | 	cmp	local07, #8 wz
30ca8     0C 4E 05 A1 |  if_e	add	fp, #12
30cac     A7 32 C2 AA |  if_e	rdbyte	local07, fp
30cb0     02 32 66 A0 |  if_e	shl	local07, #2
30cb4     A7 32 42 AC |  if_e	wrbyte	local07, fp
30cb8     0C 4E 85 A1 |  if_e	sub	fp, #12
30cbc     0C 4E 05 F1 | 	add	fp, #12
30cc0     A7 32 C2 FA | 	rdbyte	local07, fp
30cc4     0C 4E 85 F1 | 	sub	fp, #12
30cc8     0C 32 06 F5 | 	and	local07, #12
30ccc     0C 32 0E F2 | 	cmp	local07, #12 wz
30cd0     18 00 90 AD |  if_e	jmp	#LR__4767
30cd4     0C 4E 05 F1 | 	add	fp, #12
30cd8     A7 26 C2 FA | 	rdbyte	local01, fp
30cdc     0C 4E 85 F1 | 	sub	fp, #12
30ce0     03 26 06 F5 | 	and	local01, #3
30ce4     03 26 0E F2 | 	cmp	local01, #3 wz
30ce8     14 00 90 5D |  if_ne	jmp	#LR__4768
30cec                 | LR__4767
30cec     10 4E 05 F1 | 	add	fp, #16
30cf0     A7 32 C2 FA | 	rdbyte	local07, fp
30cf4     02 32 46 F5 | 	or	local07, #2
30cf8     A7 32 42 FC | 	wrbyte	local07, fp
30cfc     10 4E 85 F1 | 	sub	fp, #16
30d00                 | LR__4768
30d00     10 4E 05 F1 | 	add	fp, #16
30d04     A7 32 C2 FA | 	rdbyte	local07, fp
30d08     10 4E 85 F1 | 	sub	fp, #16
30d0c     02 32 CE F7 | 	test	local07, #2 wz
30d10     48 00 90 5D |  if_ne	jmp	#LR__4769
30d14     0C 4E 05 F1 | 	add	fp, #12
30d18     A7 32 C2 FA | 	rdbyte	local07, fp
30d1c     0C 4E 85 F1 | 	sub	fp, #12
30d20     01 32 CE F7 | 	test	local07, #1 wz
30d24     10 4E 05 51 |  if_ne	add	fp, #16
30d28     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
30d2c     10 32 46 55 |  if_ne	or	local07, #16
30d30     A7 32 42 5C |  if_ne	wrbyte	local07, fp
30d34     10 4E 85 51 |  if_ne	sub	fp, #16
30d38     0C 4E 05 F1 | 	add	fp, #12
30d3c     A7 32 C2 FA | 	rdbyte	local07, fp
30d40     0C 4E 85 F1 | 	sub	fp, #12
30d44     04 32 CE F7 | 	test	local07, #4 wz
30d48     10 4E 05 51 |  if_ne	add	fp, #16
30d4c     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
30d50     08 32 46 55 |  if_ne	or	local07, #8
30d54     A7 32 42 5C |  if_ne	wrbyte	local07, fp
30d58     10 4E 85 51 |  if_ne	sub	fp, #16
30d5c                 | LR__4769
30d5c     04 4E 05 F1 | 	add	fp, #4
30d60     A7 32 02 FB | 	rdlong	local07, fp
30d64     0C 4E 05 F1 | 	add	fp, #12
30d68     A7 26 C2 FA | 	rdbyte	local01, fp
30d6c     10 4E 85 F1 | 	sub	fp, #16
30d70     2B 32 06 F1 | 	add	local07, #43
30d74     19 27 42 FC | 	wrbyte	local01, local07
30d78                 | ' 	}
30d78                 | ' 
30d78                 | ' 	dp->fn[ 11 ] = cf;
30d78                 | ' 
30d78                 | ' 	return FR_OK;
30d78     00 FA 05 F6 | 	mov	result1, #0
30d7c                 | LR__4770
30d7c     A7 F0 03 F6 | 	mov	ptra, fp
30d80     B2 00 A0 FD | 	call	#popregs_
30d84                 | _fatfs_cc_create_name_ret
30d84     2D 00 64 FD | 	ret
30d88                 | 
30d88                 | _fatfs_cc_follow_path
30d88     02 4A 05 F6 | 	mov	COUNT_, #2
30d8c     A8 00 A0 FD | 	call	#pushregs_
30d90     18 F0 07 F1 | 	add	ptra, #24
30d94     04 4E 05 F1 | 	add	fp, #4
30d98     A7 12 62 FC | 	wrlong	arg01, fp
30d9c     04 4E 05 F1 | 	add	fp, #4
30da0     A7 14 62 FC | 	wrlong	arg02, fp
30da4     04 4E 85 F1 | 	sub	fp, #4
30da8     A7 FA 01 FB | 	rdlong	result1, fp
30dac     FD 26 02 FB | 	rdlong	local01, result1
30db0     10 4E 05 F1 | 	add	fp, #16
30db4     A7 26 62 FC | 	wrlong	local01, fp
30db8     14 4E 85 F1 | 	sub	fp, #20
30dbc     97 24 48 FB | 	callpa	#(@LR__4782-@LR__4780)>>2,fcache_load_ptr_
30dc0                 | ' )
30dc0                 | ' {
30dc0                 | ' 	FRESULT res;
30dc0                 | ' 	BYTE ns;
30dc0                 | ' 	FATFS *fs = dp->obj.fs;
30dc0                 | ' #line 3034 "ff.c"
30dc0                 | ' 	{
30dc0                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
30dc0                 | LR__4780
30dc0     08 4E 05 F1 | 	add	fp, #8
30dc4     A7 26 02 FB | 	rdlong	local01, fp
30dc8     08 4E 85 F1 | 	sub	fp, #8
30dcc     13 27 C2 FA | 	rdbyte	local01, local01
30dd0     2F 26 0E F2 | 	cmp	local01, #47 wz
30dd4     18 00 90 AD |  if_e	jmp	#LR__4781
30dd8     08 4E 05 F1 | 	add	fp, #8
30ddc     A7 26 02 FB | 	rdlong	local01, fp
30de0     08 4E 85 F1 | 	sub	fp, #8
30de4     13 27 C2 FA | 	rdbyte	local01, local01
30de8     5C 26 0E F2 | 	cmp	local01, #92 wz
30dec     18 00 90 5D |  if_ne	jmp	#LR__4783
30df0                 | LR__4781
30df0     08 4E 05 F1 | 	add	fp, #8
30df4     A7 26 02 FB | 	rdlong	local01, fp
30df8     01 26 06 F1 | 	add	local01, #1
30dfc     A7 26 62 FC | 	wrlong	local01, fp
30e00     08 4E 85 F1 | 	sub	fp, #8
30e04     B8 FF 9F FD | 	jmp	#LR__4780
30e08                 | LR__4782
30e08                 | LR__4783
30e08     04 4E 05 F1 | 	add	fp, #4
30e0c     A7 26 02 FB | 	rdlong	local01, fp
30e10     08 26 06 F1 | 	add	local01, #8
30e14     13 01 68 FC | 	wrlong	#0, local01
30e18     04 4E 05 F1 | 	add	fp, #4
30e1c     A7 26 02 FB | 	rdlong	local01, fp
30e20     08 4E 85 F1 | 	sub	fp, #8
30e24     13 27 C2 FA | 	rdbyte	local01, local01
30e28     20 26 16 F2 | 	cmp	local01, #32 wc
30e2c     30 00 90 3D |  if_ae	jmp	#LR__4784
30e30     04 4E 05 F1 | 	add	fp, #4
30e34     A7 26 02 FB | 	rdlong	local01, fp
30e38     2B 26 06 F1 | 	add	local01, #43
30e3c     13 01 49 FC | 	wrbyte	#128, local01
30e40     A7 12 02 FB | 	rdlong	arg01, fp
30e44     04 4E 85 F1 | 	sub	fp, #4
30e48     00 14 06 F6 | 	mov	arg02, #0
30e4c     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
30e50     0C 4E 05 F1 | 	add	fp, #12
30e54     A7 FA 61 FC | 	wrlong	result1, fp
30e58     0C 4E 85 F1 | 	sub	fp, #12
30e5c     1C 01 90 FD | 	jmp	#LR__4788
30e60                 | LR__4784
30e60                 | ' 		for (;;) {
30e60                 | LR__4785
30e60     04 4E 05 F1 | 	add	fp, #4
30e64     A7 12 02 FB | 	rdlong	arg01, fp
30e68     04 4E 05 F1 | 	add	fp, #4
30e6c     A7 14 02 F6 | 	mov	arg02, fp
30e70     08 4E 85 F1 | 	sub	fp, #8
30e74     14 F6 BF FD | 	call	#_fatfs_cc_create_name
30e78     0C 4E 05 F1 | 	add	fp, #12
30e7c     A7 FA 61 FC | 	wrlong	result1, fp
30e80     00 FA 4D F2 | 	cmps	result1, #0 wz
30e84     0C 4E 85 F1 | 	sub	fp, #12
30e88     F0 00 90 5D |  if_ne	jmp	#LR__4787
30e8c     04 4E 05 F1 | 	add	fp, #4
30e90     A7 12 02 FB | 	rdlong	arg01, fp
30e94     04 4E 85 F1 | 	sub	fp, #4
30e98     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
30e9c     0C 4E 05 F1 | 	add	fp, #12
30ea0     A7 FA 61 FC | 	wrlong	result1, fp
30ea4     08 4E 85 F1 | 	sub	fp, #8
30ea8     A7 26 02 FB | 	rdlong	local01, fp
30eac     2B 26 06 F1 | 	add	local01, #43
30eb0     13 27 C2 FA | 	rdbyte	local01, local01
30eb4     0C 4E 05 F1 | 	add	fp, #12
30eb8     A7 26 42 FC | 	wrbyte	local01, fp
30ebc     04 4E 85 F1 | 	sub	fp, #4
30ec0     A7 26 0A FB | 	rdlong	local01, fp wz
30ec4     0C 4E 85 F1 | 	sub	fp, #12
30ec8     34 00 90 AD |  if_e	jmp	#LR__4786
30ecc     0C 4E 05 F1 | 	add	fp, #12
30ed0     A7 26 02 FB | 	rdlong	local01, fp
30ed4     0C 4E 85 F1 | 	sub	fp, #12
30ed8     04 26 0E F2 | 	cmp	local01, #4 wz
30edc     9C 00 90 5D |  if_ne	jmp	#LR__4787
30ee0     10 4E 05 F1 | 	add	fp, #16
30ee4     A7 26 C2 FA | 	rdbyte	local01, fp
30ee8     10 4E 85 F1 | 	sub	fp, #16
30eec     04 26 CE F7 | 	test	local01, #4 wz
30ef0     0C 4E 05 A1 |  if_e	add	fp, #12
30ef4     A7 0A 68 AC |  if_e	wrlong	#5, fp
30ef8     0C 4E 85 A1 |  if_e	sub	fp, #12
30efc                 | ' 					}
30efc                 | ' 				}
30efc                 | ' 				break;
30efc     7C 00 90 FD | 	jmp	#LR__4787
30f00                 | LR__4786
30f00     10 4E 05 F1 | 	add	fp, #16
30f04     A7 26 C2 FA | 	rdbyte	local01, fp
30f08     10 4E 85 F1 | 	sub	fp, #16
30f0c     04 26 CE F7 | 	test	local01, #4 wz
30f10     68 00 90 5D |  if_ne	jmp	#LR__4787
30f14     04 4E 05 F1 | 	add	fp, #4
30f18     A7 26 02 FB | 	rdlong	local01, fp
30f1c     04 4E 85 F1 | 	sub	fp, #4
30f20     06 26 06 F1 | 	add	local01, #6
30f24     13 27 C2 FA | 	rdbyte	local01, local01
30f28     10 26 CE F7 | 	test	local01, #16 wz
30f2c     0C 4E 05 A1 |  if_e	add	fp, #12
30f30     A7 0A 68 AC |  if_e	wrlong	#5, fp
30f34     0C 4E 85 A1 |  if_e	sub	fp, #12
30f38                 | ' 				res = FR_NO_PATH; break;
30f38     40 00 90 AD |  if_e	jmp	#LR__4787
30f3c     04 4E 05 F1 | 	add	fp, #4
30f40     A7 28 02 FB | 	rdlong	local02, fp
30f44     14 27 02 F6 | 	mov	local01, local02
30f48     10 4E 05 F1 | 	add	fp, #16
30f4c     A7 14 02 FB | 	rdlong	arg02, fp
30f50     0A 13 02 F6 | 	mov	arg01, arg02
30f54     34 14 06 F1 | 	add	arg02, #52
30f58     14 4E 85 F1 | 	sub	fp, #20
30f5c     10 28 06 F1 | 	add	local02, #16
30f60     14 29 02 FB | 	rdlong	local02, local02
30f64     FF 29 06 F5 | 	and	local02, #511
30f68     14 15 02 F1 | 	add	arg02, local02
30f6c     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
30f70     08 26 06 F1 | 	add	local01, #8
30f74     13 FB 61 FC | 	wrlong	result1, local01
30f78     E4 FE 9F FD | 	jmp	#LR__4785
30f7c                 | LR__4787
30f7c                 | LR__4788
30f7c                 | ' 			}
30f7c                 | ' #line 3090 "ff.c"
30f7c                 | ' 			{
30f7c                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
30f7c                 | ' 			}
30f7c                 | ' 		}
30f7c                 | ' 	}
30f7c                 | ' 
30f7c                 | ' 	return res;
30f7c     0C 4E 05 F1 | 	add	fp, #12
30f80     A7 FA 01 FB | 	rdlong	result1, fp
30f84     0C 4E 85 F1 | 	sub	fp, #12
30f88     A7 F0 03 F6 | 	mov	ptra, fp
30f8c     B2 00 A0 FD | 	call	#popregs_
30f90                 | _fatfs_cc_follow_path_ret
30f90     2D 00 64 FD | 	ret
30f94                 | 
30f94                 | _fatfs_cc_get_ldnumber
30f94     01 00 66 F6 | 	neg	_var01, #1
30f98     09 03 0A FB | 	rdlong	_var02, arg01 wz
30f9c     01 05 02 F6 | 	mov	_var03, _var02
30fa0     01 FA 65 A6 |  if_e	neg	result1, #1
30fa4     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
30fa8     97 10 48 FB | 	callpa	#(@LR__4791-@LR__4790)>>2,fcache_load_ptr_
30fac                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
30fac                 | LR__4790
30fac     02 07 C2 FA | 	rdbyte	_var04, _var03
30fb0     03 FB E1 F8 | 	getbyte	result1, _var04, #0
30fb4     20 FA 15 F2 | 	cmp	result1, #32 wc
30fb8     01 04 06 F1 | 	add	_var03, #1
30fbc     03 09 02 36 |  if_ae	mov	_var05, _var04
30fc0     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
30fc4     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
30fc8     E0 FF 9F 1D |  if_a	jmp	#LR__4790
30fcc                 | LR__4791
30fcc     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
30fd0     3A 06 0E F2 | 	cmp	_var04, #58 wz
30fd4     40 00 90 5D |  if_ne	jmp	#LR__4793
30fd8     01 0A 06 F6 | 	mov	_var06, #1
30fdc     01 09 C2 FA | 	rdbyte	_var05, _var02
30fe0     30 08 16 F2 | 	cmp	_var05, #48 wc
30fe4     1C 00 90 CD |  if_b	jmp	#LR__4792
30fe8     01 09 C2 FA | 	rdbyte	_var05, _var02
30fec     3A 08 16 F2 | 	cmp	_var05, #58 wc
30ff0     01 0D 02 C6 |  if_b	mov	_var07, _var02
30ff4     02 0C 06 C1 |  if_b	add	_var07, #2
30ff8     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
30ffc     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
31000     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
31004                 | LR__4792
31004     01 0A 56 F2 | 	cmps	_var06, #1 wc
31008     05 01 02 C6 |  if_b	mov	_var01, _var06
3100c     09 05 62 CC |  if_b	wrlong	_var03, arg01
31010                 | ' 			vol = i;
31010                 | ' 			*path = tt;
31010                 | ' 		}
31010                 | ' 		return vol;
31010     00 FB 01 F6 | 	mov	result1, _var01
31014     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
31018                 | LR__4793
31018                 | ' 	}
31018                 | ' #line 3170 "ff.c"
31018                 | ' 	vol = 0;
31018                 | ' 
31018                 | ' 	return vol;
31018     00 FA 05 F6 | 	mov	result1, #0
3101c                 | _fatfs_cc_get_ldnumber_ret
3101c     2D 00 64 FD | 	ret
31020                 | 
31020                 | _fatfs_cc_check_fs
31020     04 4A 05 F6 | 	mov	COUNT_, #4
31024     A8 00 A0 FD | 	call	#pushregs_
31028     09 27 02 F6 | 	mov	local01, arg01
3102c     03 26 06 F1 | 	add	local01, #3
31030     13 01 48 FC | 	wrbyte	#0, local01
31034     2D 26 06 F1 | 	add	local01, #45
31038     FF FF FF FF 
3103c     13 FF 6B FC | 	wrlong	##-1, local01
31040     30 26 86 F1 | 	sub	local01, #48
31044     13 13 02 F6 | 	mov	arg01, local01
31048     18 D5 BF FD | 	call	#_fatfs_cc_move_window
3104c     00 FA 0D F2 | 	cmp	result1, #0 wz
31050     04 FA 05 56 |  if_ne	mov	result1, #4
31054     94 01 90 5D |  if_ne	jmp	#LR__4804
31058     34 26 06 F1 | 	add	local01, #52
3105c     13 13 02 F6 | 	mov	arg01, local01
31060     FE 13 06 F1 | 	add	arg01, #510
31064                 | ' {
31064                 | ' 
31064                 | ' 	return *((WORD*)ptr);
31064     09 29 E2 FA | 	rdword	local02, arg01
31068     13 2B C2 FA | 	rdbyte	local03, local01
3106c     34 26 86 F1 | 	sub	local01, #52
31070     15 2D E2 F8 | 	getbyte	local04, local03, #0
31074     EB 2C 0E F2 | 	cmp	local04, #235 wz
31078     15 17 02 56 |  if_ne	mov	arg03, local03
3107c     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
31080     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
31084     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
31088     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
3108c     44 01 90 5D |  if_ne	jmp	#LR__4803
31090     14 2D 32 F9 | 	getword	local04, local02, #0
31094     55 00 00 FF 
31098     55 2C 0E F2 | 	cmp	local04, ##43605 wz
3109c     2C 00 90 5D |  if_ne	jmp	#LR__4800
310a0     34 26 06 F1 | 	add	local01, #52
310a4     13 13 02 F6 | 	mov	arg01, local01
310a8     34 26 86 F1 | 	sub	local01, #52
310ac     52 12 06 F1 | 	add	arg01, #82
310b0     B2 01 00 FF 
310b4     00 15 06 F6 | 	mov	arg02, ##@LR__5394
310b8     08 16 06 F6 | 	mov	arg03, #8
310bc     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
310c0     00 FA 0D F2 | 	cmp	result1, #0 wz
310c4                 | ' 			return 0;
310c4     00 FA 05 A6 |  if_e	mov	result1, #0
310c8     20 01 90 AD |  if_e	jmp	#LR__4804
310cc                 | LR__4800
310cc     34 26 06 F1 | 	add	local01, #52
310d0     13 13 02 F6 | 	mov	arg01, local01
310d4     0B 12 06 F1 | 	add	arg01, #11
310d8                 | ' {
310d8                 | ' 
310d8                 | ' 	return *((WORD*)ptr);
310d8     09 FB E1 FA | 	rdword	result1, arg01
310dc     0D 26 06 F1 | 	add	local01, #13
310e0     13 2B C2 FA | 	rdbyte	local03, local01
310e4     41 26 86 F1 | 	sub	local01, #65
310e8     FD 2C 32 F9 | 	getword	local04, result1, #0
310ec     FD 14 32 F9 | 	getword	arg02, result1, #0
310f0     01 14 86 F1 | 	sub	arg02, #1
310f4     0A 2D CA F7 | 	test	local04, arg02 wz
310f8     D8 00 90 5D |  if_ne	jmp	#LR__4802
310fc     FD 14 32 F9 | 	getword	arg02, result1, #0
31100     01 00 00 FF 
31104     00 14 16 F2 | 	cmp	arg02, ##512 wc
31108     C8 00 90 CD |  if_b	jmp	#LR__4802
3110c     FD 14 32 F9 | 	getword	arg02, result1, #0
31110     01 00 00 FF 
31114     01 14 16 F2 | 	cmp	arg02, ##513 wc
31118     B8 00 90 3D |  if_ae	jmp	#LR__4802
3111c     15 13 02 F6 | 	mov	arg01, local03
31120     07 12 4E F7 | 	zerox	arg01, #7 wz
31124     AC 00 90 AD |  if_e	jmp	#LR__4802
31128     15 13 E2 F8 | 	getbyte	arg01, local03, #0
3112c     15 2B E2 F8 | 	getbyte	local03, local03, #0
31130     01 2A 86 F1 | 	sub	local03, #1
31134     15 13 CA F7 | 	test	arg01, local03 wz
31138     98 00 90 5D |  if_ne	jmp	#LR__4802
3113c     34 26 06 F1 | 	add	local01, #52
31140     13 13 02 F6 | 	mov	arg01, local01
31144     34 26 86 F1 | 	sub	local01, #52
31148     0E 12 06 F1 | 	add	arg01, #14
3114c                 | ' {
3114c                 | ' 
3114c                 | ' 	return *((WORD*)ptr);
3114c     09 FB E9 FA | 	rdword	result1, arg01 wz
31150     80 00 90 AD |  if_e	jmp	#LR__4802
31154     44 26 06 F1 | 	add	local01, #68
31158     13 13 C2 FA | 	rdbyte	arg01, local01
3115c     44 26 86 F1 | 	sub	local01, #68
31160     01 12 86 F1 | 	sub	arg01, #1
31164     02 12 16 F2 | 	cmp	arg01, #2 wc
31168     68 00 90 3D |  if_ae	jmp	#LR__4802
3116c     34 26 06 F1 | 	add	local01, #52
31170     13 13 02 F6 | 	mov	arg01, local01
31174     34 26 86 F1 | 	sub	local01, #52
31178     11 12 06 F1 | 	add	arg01, #17
3117c                 | ' {
3117c                 | ' 
3117c                 | ' 	return *((WORD*)ptr);
3117c     09 FB E9 FA | 	rdword	result1, arg01 wz
31180     50 00 90 AD |  if_e	jmp	#LR__4802
31184     34 26 06 F1 | 	add	local01, #52
31188     13 13 02 F6 | 	mov	arg01, local01
3118c     34 26 86 F1 | 	sub	local01, #52
31190     13 12 06 F1 | 	add	arg01, #19
31194                 | ' {
31194                 | ' 
31194                 | ' 	return *((WORD*)ptr);
31194     09 FB E1 FA | 	rdword	result1, arg01
31198     FD 2A 32 F9 | 	getword	local03, result1, #0
3119c     80 2A 16 F2 | 	cmp	local03, #128 wc
311a0     20 00 90 3D |  if_ae	jmp	#LR__4801
311a4     34 26 06 F1 | 	add	local01, #52
311a8     13 13 02 F6 | 	mov	arg01, local01
311ac     34 26 86 F1 | 	sub	local01, #52
311b0     20 12 06 F1 | 	add	arg01, #32
311b4                 | ' {
311b4                 | ' 
311b4                 | ' 	return *((DWORD*)ptr);
311b4     09 FB 01 FB | 	rdlong	result1, arg01
311b8     80 00 00 FF 
311bc     00 FA 15 F2 | 	cmp	result1, ##65536 wc
311c0     10 00 90 CD |  if_b	jmp	#LR__4802
311c4                 | LR__4801
311c4     4A 26 06 F1 | 	add	local01, #74
311c8                 | ' {
311c8                 | ' 
311c8                 | ' 	return *((WORD*)ptr);
311c8     13 FB E9 FA | 	rdword	result1, local01 wz
311cc                 | ' 			&& b != 0 && (b & (b - 1)) == 0
311cc                 | ' 			&& ld_word(fs->win +  14 ) != 0
311cc                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
311cc                 | ' 			&& ld_word(fs->win +  17 ) != 0
311cc                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
311cc                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
311cc                 | ' 				return 0;
311cc     00 FA 05 56 |  if_ne	mov	result1, #0
311d0     18 00 90 5D |  if_ne	jmp	#LR__4804
311d4                 | LR__4802
311d4                 | LR__4803
311d4                 | ' 		}
311d4                 | ' 	}
311d4                 | ' 	return sign == 0xAA55 ? 2 : 3;
311d4     14 2B 32 F9 | 	getword	local03, local02, #0
311d8     55 00 00 FF 
311dc     55 2A 0E F2 | 	cmp	local03, ##43605 wz
311e0     02 2C 06 A6 |  if_e	mov	local04, #2
311e4     03 2C 06 56 |  if_ne	mov	local04, #3
311e8     16 FB 01 F6 | 	mov	result1, local04
311ec                 | LR__4804
311ec     A7 F0 03 F6 | 	mov	ptra, fp
311f0     B2 00 A0 FD | 	call	#popregs_
311f4                 | _fatfs_cc_check_fs_ret
311f4     2D 00 64 FD | 	ret
311f8                 | 
311f8                 | _fatfs_cc_find_volume
311f8     05 4A 05 F6 | 	mov	COUNT_, #5
311fc     A8 00 A0 FD | 	call	#pushregs_
31200     24 F0 07 F1 | 	add	ptra, #36
31204     09 27 02 F6 | 	mov	local01, arg01
31208     0A 29 02 F6 | 	mov	local02, arg02
3120c     13 13 02 F6 | 	mov	arg01, local01
31210     00 14 06 F6 | 	mov	arg02, #0
31214     08 FE BF FD | 	call	#_fatfs_cc_check_fs
31218     02 FA 0D F2 | 	cmp	result1, #2 wz
3121c     0C 00 90 AD |  if_e	jmp	#LR__4810
31220     03 FA 15 F2 | 	cmp	result1, #3 wc
31224     00 28 0E C2 |  if_b	cmp	local02, #0 wz
31228     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4818
3122c                 | LR__4810
3122c                 | ' 	for (i = 0; i < 4; i++) {
3122c     00 2A 06 F6 | 	mov	local03, #0
31230     97 26 48 FB | 	callpa	#(@LR__4812-@LR__4811)>>2,fcache_load_ptr_
31234                 | LR__4811
31234     04 2A 16 F2 | 	cmp	local03, #4 wc
31238     44 00 90 3D |  if_ae	jmp	#LR__4813
3123c     15 2D 02 F6 | 	mov	local04, local03
31240     02 2C 66 F0 | 	shl	local04, #2
31244     14 4E 05 F1 | 	add	fp, #20
31248     A7 2C 02 F1 | 	add	local04, fp
3124c     34 26 06 F1 | 	add	local01, #52
31250     13 13 02 F6 | 	mov	arg01, local01
31254     34 26 86 F1 | 	sub	local01, #52
31258     BE 13 06 F1 | 	add	arg01, #446
3125c     15 15 02 F6 | 	mov	arg02, local03
31260     04 14 66 F0 | 	shl	arg02, #4
31264     0A 13 02 F1 | 	add	arg01, arg02
31268     08 12 06 F1 | 	add	arg01, #8
3126c                 | ' {
3126c                 | ' 
3126c                 | ' 	return *((DWORD*)ptr);
3126c     09 FB 01 FB | 	rdlong	result1, arg01
31270     14 4E 85 F1 | 	sub	fp, #20
31274     16 FB 61 FC | 	wrlong	result1, local04
31278     01 2A 06 F1 | 	add	local03, #1
3127c     B4 FF 9F FD | 	jmp	#LR__4811
31280                 | LR__4812
31280                 | LR__4813
31280     00 28 0E F2 | 	cmp	local02, #0 wz
31284     14 2D 02 56 |  if_ne	mov	local04, local02
31288     01 2C 86 51 |  if_ne	sub	local04, #1
3128c     00 2C 06 A6 |  if_e	mov	local04, #0
31290     16 2B 02 F6 | 	mov	local03, local04
31294                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
31294                 | ' 	}
31294                 | ' 	i = part ? part - 1 : 0;
31294                 | ' 	do {
31294                 | LR__4814
31294     15 2D 02 F6 | 	mov	local04, local03
31298     02 2C 66 F0 | 	shl	local04, #2
3129c     14 4E 05 F1 | 	add	fp, #20
312a0     A7 2C 02 F1 | 	add	local04, fp
312a4     16 2D 0A FB | 	rdlong	local04, local04 wz
312a8     14 4E 85 F1 | 	sub	fp, #20
312ac     28 00 90 AD |  if_e	jmp	#LR__4815
312b0     15 2D 02 F6 | 	mov	local04, local03
312b4     02 2C 66 F0 | 	shl	local04, #2
312b8     14 4E 05 F1 | 	add	fp, #20
312bc     A7 2C 02 F1 | 	add	local04, fp
312c0     16 15 02 FB | 	rdlong	arg02, local04
312c4     13 13 02 F6 | 	mov	arg01, local01
312c8     14 4E 85 F1 | 	sub	fp, #20
312cc     50 FD BF FD | 	call	#_fatfs_cc_check_fs
312d0     FD 2C 02 F6 | 	mov	local04, result1
312d4     04 00 90 FD | 	jmp	#LR__4816
312d8                 | LR__4815
312d8     03 2C 06 F6 | 	mov	local04, #3
312dc                 | LR__4816
312dc     16 2F 02 F6 | 	mov	local05, local04
312e0     00 28 0E F2 | 	cmp	local02, #0 wz
312e4     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
312e8     0C 00 90 8D |  if_c_and_z	jmp	#LR__4817
312ec     01 2A 06 A1 |  if_e	add	local03, #1
312f0     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
312f4     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4814
312f8                 | LR__4817
312f8                 | ' 	return fmt;
312f8     17 FB 01 F6 | 	mov	result1, local05
312fc                 | LR__4818
312fc     A7 F0 03 F6 | 	mov	ptra, fp
31300     B2 00 A0 FD | 	call	#popregs_
31304                 | _fatfs_cc_find_volume_ret
31304     2D 00 64 FD | 	ret
31308                 | 
31308                 | _fatfs_cc_mount_volume
31308     0B 4A 05 F6 | 	mov	COUNT_, #11
3130c     A8 00 A0 FD | 	call	#pushregs_
31310     0A 27 02 F6 | 	mov	local01, arg02
31314     0B 29 02 F6 | 	mov	local02, arg03
31318     13 01 68 FC | 	wrlong	#0, local01
3131c     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
31320     FD 2A 02 F6 | 	mov	local03, result1
31324     00 2A 56 F2 | 	cmps	local03, #0 wc
31328     0B FA 05 C6 |  if_b	mov	result1, #11
3132c     3C 05 90 CD |  if_b	jmp	#LR__4830
31330     15 17 02 F6 | 	mov	arg03, local03
31334     02 16 66 F0 | 	shl	arg03, #2
31338     F2 16 02 F1 | 	add	arg03, objptr
3133c     0B 2D 0A FB | 	rdlong	local04, arg03 wz
31340     0C FA 05 A6 |  if_e	mov	result1, #12
31344     24 05 90 AD |  if_e	jmp	#LR__4830
31348     13 2D 62 FC | 	wrlong	local04, local01
3134c     14 29 E2 F8 | 	getbyte	local02, local02, #0
31350     FE 28 06 F5 | 	and	local02, #254
31354     16 17 CA FA | 	rdbyte	arg03, local04 wz
31358     4C 00 90 AD |  if_e	jmp	#LR__4821
3135c     01 2C 06 F1 | 	add	local04, #1
31360     16 13 CA FA | 	rdbyte	arg01, local04 wz
31364     01 2C 86 F1 | 	sub	local04, #1
31368     01 FA 05 56 |  if_ne	mov	result1, #1
3136c                 | ' 
3136c                 | ' 	return Stat;
3136c     01 00 00 AF 
31370     20 E4 05 A1 |  if_e	add	objptr, ##544
31374     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
31378     01 00 00 AF 
3137c     20 E4 85 A1 |  if_e	sub	objptr, ##544
31380     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
31384     01 16 CE F7 | 	test	arg03, #1 wz
31388     1C 00 90 5D |  if_ne	jmp	#LR__4820
3138c     00 28 0E F2 | 	cmp	local02, #0 wz
31390     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
31394     04 FA CD 57 |  if_ne	test	result1, #4 wz
31398                 | ' 				return FR_WRITE_PROTECTED;
31398     0A FA 05 56 |  if_ne	mov	result1, #10
3139c     CC 04 90 5D |  if_ne	jmp	#LR__4830
313a0                 | ' 			}
313a0                 | ' 			return FR_OK;
313a0     00 FA 05 F6 | 	mov	result1, #0
313a4     C4 04 90 FD | 	jmp	#LR__4830
313a8                 | LR__4820
313a8                 | LR__4821
313a8     16 01 48 FC | 	wrbyte	#0, local04
313ac     01 2C 06 F1 | 	add	local04, #1
313b0     16 2B 42 FC | 	wrbyte	local03, local04
313b4     16 13 C2 FA | 	rdbyte	arg01, local04
313b8     01 2C 86 F1 | 	sub	local04, #1
313bc     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
313c0     FD 16 02 F6 | 	mov	arg03, result1
313c4     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
313c8     01 2E CE F7 | 	test	local05, #1 wz
313cc                 | ' 		return FR_NOT_READY;
313cc     03 FA 05 56 |  if_ne	mov	result1, #3
313d0     98 04 90 5D |  if_ne	jmp	#LR__4830
313d4     00 28 0E F2 | 	cmp	local02, #0 wz
313d8     0B 2F 02 56 |  if_ne	mov	local05, arg03
313dc     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
313e0     04 2E CE 57 |  if_ne	test	local05, #4 wz
313e4                 | ' 		return FR_WRITE_PROTECTED;
313e4     0A FA 05 56 |  if_ne	mov	result1, #10
313e8     80 04 90 5D |  if_ne	jmp	#LR__4830
313ec     16 13 02 F6 | 	mov	arg01, local04
313f0     00 14 06 F6 | 	mov	arg02, #0
313f4     00 FE BF FD | 	call	#_fatfs_cc_find_volume
313f8     FD 12 02 F6 | 	mov	arg01, result1
313fc     04 12 0E F2 | 	cmp	arg01, #4 wz
31400     01 FA 05 A6 |  if_e	mov	result1, #1
31404     64 04 90 AD |  if_e	jmp	#LR__4830
31408     02 12 16 F2 | 	cmp	arg01, #2 wc
3140c     0D FA 05 36 |  if_ae	mov	result1, #13
31410     58 04 90 3D |  if_ae	jmp	#LR__4830
31414     30 2C 06 F1 | 	add	local04, #48
31418     16 31 02 FB | 	rdlong	local06, local04
3141c     04 2C 06 F1 | 	add	local04, #4
31420     16 13 02 F6 | 	mov	arg01, local04
31424     34 2C 86 F1 | 	sub	local04, #52
31428     0B 12 06 F1 | 	add	arg01, #11
3142c                 | ' {
3142c                 | ' 
3142c                 | ' 	return *((WORD*)ptr);
3142c     09 FB E1 FA | 	rdword	result1, arg01
31430     01 00 00 FF 
31434     00 FA 0D F2 | 	cmp	result1, ##512 wz
31438     0D FA 05 56 |  if_ne	mov	result1, #13
3143c     2C 04 90 5D |  if_ne	jmp	#LR__4830
31440     34 2C 06 F1 | 	add	local04, #52
31444     16 13 02 F6 | 	mov	arg01, local04
31448     34 2C 86 F1 | 	sub	local04, #52
3144c     16 12 06 F1 | 	add	arg01, #22
31450                 | ' {
31450                 | ' 
31450                 | ' 	return *((WORD*)ptr);
31450     09 FB E1 FA | 	rdword	result1, arg01
31454     FD 32 0A F6 | 	mov	local07, result1 wz
31458     18 00 90 5D |  if_ne	jmp	#LR__4822
3145c     34 2C 06 F1 | 	add	local04, #52
31460     16 13 02 F6 | 	mov	arg01, local04
31464     34 2C 86 F1 | 	sub	local04, #52
31468     24 12 06 F1 | 	add	arg01, #36
3146c                 | ' {
3146c                 | ' 
3146c                 | ' 	return *((DWORD*)ptr);
3146c     09 FB 01 FB | 	rdlong	result1, arg01
31470     FD 32 02 F6 | 	mov	local07, result1
31474                 | LR__4822
31474     1C 2C 06 F1 | 	add	local04, #28
31478     16 33 62 FC | 	wrlong	local07, local04
3147c     28 2C 06 F1 | 	add	local04, #40
31480     16 2F C2 FA | 	rdbyte	local05, local04
31484     42 2C 86 F1 | 	sub	local04, #66
31488     16 2F 42 FC | 	wrbyte	local05, local04
3148c     16 2F C2 FA | 	rdbyte	local05, local04
31490     02 2C 86 F1 | 	sub	local04, #2
31494     01 2E 0E F2 | 	cmp	local05, #1 wz
31498     02 2C 06 51 |  if_ne	add	local04, #2
3149c     16 2F C2 5A |  if_ne	rdbyte	local05, local04
314a0     02 2C 86 51 |  if_ne	sub	local04, #2
314a4     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
314a8     0D FA 05 56 |  if_ne	mov	result1, #13
314ac     BC 03 90 5D |  if_ne	jmp	#LR__4830
314b0     02 2C 06 F1 | 	add	local04, #2
314b4     16 2F C2 FA | 	rdbyte	local05, local04
314b8     17 33 02 FD | 	qmul	local07, local05
314bc     3F 2C 06 F1 | 	add	local04, #63
314c0     16 2F C2 FA | 	rdbyte	local05, local04
314c4     37 2C 86 F1 | 	sub	local04, #55
314c8     16 2F 52 FC | 	wrword	local05, local04
314cc     16 2F EA FA | 	rdword	local05, local04 wz
314d0     0A 2C 86 F1 | 	sub	local04, #10
314d4     18 32 62 FD | 	getqx	local07
314d8     20 00 90 AD |  if_e	jmp	#LR__4823
314dc     0A 2C 06 F1 | 	add	local04, #10
314e0     16 2F E2 FA | 	rdword	local05, local04
314e4     17 2B 32 F9 | 	getword	local03, local05, #0
314e8     0A 2C 86 F1 | 	sub	local04, #10
314ec     17 2F 32 F9 | 	getword	local05, local05, #0
314f0     01 2E 86 F1 | 	sub	local05, #1
314f4     17 2B CA F7 | 	test	local03, local05 wz
314f8     08 00 90 AD |  if_e	jmp	#LR__4824
314fc                 | LR__4823
314fc     0D FA 05 F6 | 	mov	result1, #13
31500     68 03 90 FD | 	jmp	#LR__4830
31504                 | LR__4824
31504     34 2C 06 F1 | 	add	local04, #52
31508     16 13 02 F6 | 	mov	arg01, local04
3150c     11 12 06 F1 | 	add	arg01, #17
31510                 | ' {
31510                 | ' 
31510                 | ' 	return *((WORD*)ptr);
31510     09 FB E1 FA | 	rdword	result1, arg01
31514     2C 2C 86 F1 | 	sub	local04, #44
31518     16 FB 51 FC | 	wrword	result1, local04
3151c     16 2F E2 FA | 	rdword	local05, local04
31520     08 2C 86 F1 | 	sub	local04, #8
31524     17 13 52 F6 | 	abs	arg01, local05 wc
31528     09 13 42 F8 | 	getnib	arg01, arg01, #0
3152c     09 13 8A F6 | 	negc	arg01, arg01 wz
31530     0D FA 05 56 |  if_ne	mov	result1, #13
31534     34 03 90 5D |  if_ne	jmp	#LR__4830
31538     34 2C 06 F1 | 	add	local04, #52
3153c     16 13 02 F6 | 	mov	arg01, local04
31540     34 2C 86 F1 | 	sub	local04, #52
31544     13 12 06 F1 | 	add	arg01, #19
31548                 | ' {
31548                 | ' 
31548                 | ' 	return *((WORD*)ptr);
31548     09 FB E1 FA | 	rdword	result1, arg01
3154c     FD 34 0A F6 | 	mov	local08, result1 wz
31550     34 2C 06 A1 |  if_e	add	local04, #52
31554     16 13 02 A6 |  if_e	mov	arg01, local04
31558     34 2C 86 A1 |  if_e	sub	local04, #52
3155c     20 12 06 A1 |  if_e	add	arg01, #32
31560                 | ' {
31560                 | ' 
31560                 | ' 	return *((DWORD*)ptr);
31560     09 35 02 AB |  if_e	rdlong	local08, arg01
31564     34 2C 06 F1 | 	add	local04, #52
31568     16 13 02 F6 | 	mov	arg01, local04
3156c     34 2C 86 F1 | 	sub	local04, #52
31570     0E 12 06 F1 | 	add	arg01, #14
31574                 | ' {
31574                 | ' 
31574                 | ' 	return *((WORD*)ptr);
31574     09 FB E1 FA | 	rdword	result1, arg01
31578     FD 12 02 F6 | 	mov	arg01, result1
3157c     09 2F 02 F6 | 	mov	local05, arg01
31580     0F 2E 4E F7 | 	zerox	local05, #15 wz
31584     0D FA 05 A6 |  if_e	mov	result1, #13
31588     E0 02 90 AD |  if_e	jmp	#LR__4830
3158c     09 37 32 F9 | 	getword	local09, arg01, #0
31590     19 37 02 F1 | 	add	local09, local07
31594     08 2C 06 F1 | 	add	local04, #8
31598     16 2F E2 FA | 	rdword	local05, local04
3159c     08 2C 86 F1 | 	sub	local04, #8
315a0     17 2F 52 F6 | 	abs	local05, local05 wc
315a4     04 2E 46 F0 | 	shr	local05, #4
315a8     17 37 82 F3 | 	sumc	local09, local05
315ac     1B 35 12 F2 | 	cmp	local08, local09 wc
315b0     0D FA 05 C6 |  if_b	mov	result1, #13
315b4     B4 02 90 CD |  if_b	jmp	#LR__4830
315b8     1B 35 82 F1 | 	sub	local08, local09
315bc     0A 2C 06 F1 | 	add	local04, #10
315c0     16 2F E2 FA | 	rdword	local05, local04
315c4     17 35 12 FD | 	qdiv	local08, local05
315c8     0A 2C 86 F1 | 	sub	local04, #10
315cc     18 2E 62 FD | 	getqx	local05
315d0     00 2E 0E F2 | 	cmp	local05, #0 wz
315d4     0D FA 05 A6 |  if_e	mov	result1, #13
315d8     90 02 90 AD |  if_e	jmp	#LR__4830
315dc     00 38 06 F6 | 	mov	local10, #0
315e0     FF FF 07 FF 
315e4     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
315e8     03 38 06 C6 |  if_b	mov	local10, #3
315ec     7F 00 00 FF 
315f0     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
315f4     02 38 06 C6 |  if_b	mov	local10, #2
315f8     07 00 00 FF 
315fc     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
31600     01 38 06 C6 |  if_b	mov	local10, #1
31604     00 38 0E F2 | 	cmp	local10, #0 wz
31608     0D FA 05 A6 |  if_e	mov	result1, #13
3160c     5C 02 90 AD |  if_e	jmp	#LR__4830
31610     02 2E 06 F1 | 	add	local05, #2
31614     18 2C 06 F1 | 	add	local04, #24
31618     16 2F 62 FC | 	wrlong	local05, local04
3161c     08 2C 06 F1 | 	add	local04, #8
31620     16 31 62 FC | 	wrlong	local06, local04
31624     18 2F 02 F6 | 	mov	local05, local06
31628     09 13 32 F9 | 	getword	arg01, arg01, #0
3162c     09 2F 02 F1 | 	add	local05, arg01
31630     04 2C 06 F1 | 	add	local04, #4
31634     16 2F 62 FC | 	wrlong	local05, local04
31638     18 2F 02 F6 | 	mov	local05, local06
3163c     1B 2F 02 F1 | 	add	local05, local09
31640     08 2C 06 F1 | 	add	local04, #8
31644     16 2F 62 FC | 	wrlong	local05, local04
31648     2C 2C 86 F1 | 	sub	local04, #44
3164c     03 38 0E F2 | 	cmp	local10, #3 wz
31650     5C 00 90 5D |  if_ne	jmp	#LR__4825
31654     34 2C 06 F1 | 	add	local04, #52
31658     16 13 02 F6 | 	mov	arg01, local04
3165c     34 2C 86 F1 | 	sub	local04, #52
31660     2A 12 06 F1 | 	add	arg01, #42
31664                 | ' {
31664                 | ' 
31664                 | ' 	return *((WORD*)ptr);
31664     09 FB E9 FA | 	rdword	result1, arg01 wz
31668     0D FA 05 56 |  if_ne	mov	result1, #13
3166c     FC 01 90 5D |  if_ne	jmp	#LR__4830
31670     08 2C 06 F1 | 	add	local04, #8
31674     16 2F EA FA | 	rdword	local05, local04 wz
31678     08 2C 86 F1 | 	sub	local04, #8
3167c     0D FA 05 56 |  if_ne	mov	result1, #13
31680     E8 01 90 5D |  if_ne	jmp	#LR__4830
31684     34 2C 06 F1 | 	add	local04, #52
31688     16 13 02 F6 | 	mov	arg01, local04
3168c     2C 12 06 F1 | 	add	arg01, #44
31690                 | ' {
31690                 | ' 
31690                 | ' 	return *((DWORD*)ptr);
31690     09 FB 01 FB | 	rdlong	result1, arg01
31694     0C 2C 86 F1 | 	sub	local04, #12
31698     16 FB 61 FC | 	wrlong	result1, local04
3169c     10 2C 86 F1 | 	sub	local04, #16
316a0     16 3B 02 FB | 	rdlong	local11, local04
316a4     18 2C 86 F1 | 	sub	local04, #24
316a8     02 3A 66 F0 | 	shl	local11, #2
316ac     6C 00 90 FD | 	jmp	#LR__4827
316b0                 | LR__4825
316b0     08 2C 06 F1 | 	add	local04, #8
316b4     16 2F EA FA | 	rdword	local05, local04 wz
316b8     08 2C 86 F1 | 	sub	local04, #8
316bc     0D FA 05 A6 |  if_e	mov	result1, #13
316c0     A8 01 90 AD |  if_e	jmp	#LR__4830
316c4     24 2C 06 F1 | 	add	local04, #36
316c8     16 2F 02 FB | 	rdlong	local05, local04
316cc     19 2F 02 F1 | 	add	local05, local07
316d0     04 2C 06 F1 | 	add	local04, #4
316d4     16 2F 62 FC | 	wrlong	local05, local04
316d8     28 2C 86 F1 | 	sub	local04, #40
316dc     02 38 0E F2 | 	cmp	local10, #2 wz
316e0     18 2C 06 A1 |  if_e	add	local04, #24
316e4     16 2F 02 AB |  if_e	rdlong	local05, local04
316e8     18 2C 86 A1 |  if_e	sub	local04, #24
316ec     01 2E 66 A0 |  if_e	shl	local05, #1
316f0     24 00 90 AD |  if_e	jmp	#LR__4826
316f4     18 2C 06 F1 | 	add	local04, #24
316f8     16 3B 02 FB | 	rdlong	local11, local04
316fc     1D 2F 02 F6 | 	mov	local05, local11
31700     01 2E 66 F0 | 	shl	local05, #1
31704     1D 2F 02 F1 | 	add	local05, local11
31708     01 2E 46 F0 | 	shr	local05, #1
3170c     18 2C 86 F1 | 	sub	local04, #24
31710     01 3A 06 F5 | 	and	local11, #1
31714     1D 2F 02 F1 | 	add	local05, local11
31718                 | LR__4826
31718     17 3B 02 F6 | 	mov	local11, local05
3171c                 | LR__4827
3171c     FF 3B 06 F1 | 	add	local11, #511
31720     09 3A 46 F0 | 	shr	local11, #9
31724     1C 2C 06 F1 | 	add	local04, #28
31728     16 17 02 FB | 	rdlong	arg03, local04
3172c     1C 2C 86 F1 | 	sub	local04, #28
31730     1D 17 12 F2 | 	cmp	arg03, local11 wc
31734     0D FA 05 C6 |  if_b	mov	result1, #13
31738     30 01 90 CD |  if_b	jmp	#LR__4830
3173c     14 2C 06 F1 | 	add	local04, #20
31740     FF FF FF FF 
31744     16 FF 6B FC | 	wrlong	##-1, local04
31748     04 2C 86 F1 | 	sub	local04, #4
3174c     FF FF FF FF 
31750     16 FF 6B FC | 	wrlong	##-1, local04
31754     0C 2C 86 F1 | 	sub	local04, #12
31758     16 01 49 FC | 	wrbyte	#128, local04
3175c     04 2C 86 F1 | 	sub	local04, #4
31760     03 38 0E F2 | 	cmp	local10, #3 wz
31764     D0 00 90 5D |  if_ne	jmp	#LR__4829
31768     34 2C 06 F1 | 	add	local04, #52
3176c     16 13 02 F6 | 	mov	arg01, local04
31770     34 2C 86 F1 | 	sub	local04, #52
31774     30 12 06 F1 | 	add	arg01, #48
31778                 | ' {
31778                 | ' 
31778                 | ' 	return *((WORD*)ptr);
31778     09 FB E1 FA | 	rdword	result1, arg01
3177c     FD 2E 32 F9 | 	getword	local05, result1, #0
31780     01 2E 0E F2 | 	cmp	local05, #1 wz
31784     B0 00 90 5D |  if_ne	jmp	#LR__4829
31788     01 30 06 F1 | 	add	local06, #1
3178c     16 13 02 F6 | 	mov	arg01, local04
31790     18 15 02 F6 | 	mov	arg02, local06
31794     CC CD BF FD | 	call	#_fatfs_cc_move_window
31798     00 FA 0D F2 | 	cmp	result1, #0 wz
3179c     98 00 90 5D |  if_ne	jmp	#LR__4829
317a0     04 2C 06 F1 | 	add	local04, #4
317a4     16 01 48 FC | 	wrbyte	#0, local04
317a8     30 2C 06 F1 | 	add	local04, #48
317ac     16 13 02 F6 | 	mov	arg01, local04
317b0     34 2C 86 F1 | 	sub	local04, #52
317b4     FE 13 06 F1 | 	add	arg01, #510
317b8                 | ' {
317b8                 | ' 
317b8                 | ' 	return *((WORD*)ptr);
317b8     09 FB E1 FA | 	rdword	result1, arg01
317bc     FD 2E 32 F9 | 	getword	local05, result1, #0
317c0     55 00 00 FF 
317c4     55 2E 0E F2 | 	cmp	local05, ##43605 wz
317c8     34 2C 06 A1 |  if_e	add	local04, #52
317cc     16 13 02 A6 |  if_e	mov	arg01, local04
317d0     34 2C 86 A1 |  if_e	sub	local04, #52
317d4                 | ' {
317d4                 | ' 
317d4                 | ' 	return *((DWORD*)ptr);
317d4     09 FB 01 AB |  if_e	rdlong	result1, arg01
317d8     A9 B0 20 AF 
317dc     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
317e0     54 00 90 5D |  if_ne	jmp	#LR__4828
317e4     34 2C 06 F1 | 	add	local04, #52
317e8     16 13 02 F6 | 	mov	arg01, local04
317ec     34 2C 86 F1 | 	sub	local04, #52
317f0     E4 13 06 F1 | 	add	arg01, #484
317f4                 | ' {
317f4                 | ' 
317f4                 | ' 	return *((DWORD*)ptr);
317f4     09 FB 01 FB | 	rdlong	result1, arg01
317f8     B9 A0 30 FF 
317fc     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
31800     34 00 90 5D |  if_ne	jmp	#LR__4828
31804     34 2C 06 F1 | 	add	local04, #52
31808     16 13 02 F6 | 	mov	arg01, local04
3180c     E8 13 06 F1 | 	add	arg01, #488
31810                 | ' {
31810                 | ' 
31810                 | ' 	return *((DWORD*)ptr);
31810     09 FB 01 FB | 	rdlong	result1, arg01
31814     20 2C 86 F1 | 	sub	local04, #32
31818     16 FB 61 FC | 	wrlong	result1, local04
3181c     20 2C 06 F1 | 	add	local04, #32
31820     16 13 02 F6 | 	mov	arg01, local04
31824     EC 13 06 F1 | 	add	arg01, #492
31828                 | ' {
31828                 | ' 
31828                 | ' 	return *((DWORD*)ptr);
31828     09 FB 01 FB | 	rdlong	result1, arg01
3182c     24 2C 86 F1 | 	sub	local04, #36
31830     16 FB 61 FC | 	wrlong	result1, local04
31834     10 2C 86 F1 | 	sub	local04, #16
31838                 | LR__4828
31838                 | LR__4829
31838     16 39 42 FC | 	wrbyte	local10, local04
3183c     04 E4 05 F1 | 	add	objptr, #4
31840     F2 2E E2 FA | 	rdword	local05, objptr
31844     01 2E 06 F1 | 	add	local05, #1
31848     F2 2E 52 FC | 	wrword	local05, objptr
3184c     F2 3A E2 FA | 	rdword	local11, objptr
31850     06 2C 06 F1 | 	add	local04, #6
31854     16 3B 52 FC | 	wrword	local11, local04
31858     04 E4 05 F1 | 	add	objptr, #4
3185c     06 2C 06 F1 | 	add	local04, #6
31860     16 E5 61 FC | 	wrlong	objptr, local04
31864                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
31864                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
31864                 | ' 			{
31864                 | ' 
31864                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
31864                 | ' 
31864                 | ' 
31864                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
31864                 | ' 
31864                 | ' 			}
31864                 | ' 		}
31864                 | ' 
31864                 | ' 
31864                 | ' 	}
31864                 | ' 
31864                 | ' 	fs->fs_type = (BYTE)fmt;
31864                 | ' 	fs->id = ++Fsid;
31864                 | ' 
31864                 | ' 	fs->lfnbuf = LfnBuf;
31864                 | ' #line 3567 "ff.c"
31864                 | ' 	return FR_OK;
31864     00 FA 05 F6 | 	mov	result1, #0
31868     08 E4 85 F1 | 	sub	objptr, #8
3186c                 | LR__4830
3186c     A7 F0 03 F6 | 	mov	ptra, fp
31870     B2 00 A0 FD | 	call	#popregs_
31874                 | _fatfs_cc_mount_volume_ret
31874     2D 00 64 FD | 	ret
31878                 | 
31878                 | _fatfs_cc_validate
31878     09 01 0A F6 | 	mov	_var01, arg01 wz
3187c     09 02 06 F6 | 	mov	_var02, #9
31880     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
31884     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
31888     50 00 90 AD |  if_e	jmp	#LR__4840
3188c     04 00 06 F1 | 	add	_var01, #4
31890     00 07 E2 FA | 	rdword	_var04, _var01
31894     04 00 86 F1 | 	sub	_var01, #4
31898     00 13 02 FB | 	rdlong	arg01, _var01
3189c     06 12 06 F1 | 	add	arg01, #6
318a0     09 FB E1 FA | 	rdword	result1, arg01
318a4     FD 06 0A F2 | 	cmp	_var04, result1 wz
318a8     30 00 90 5D |  if_ne	jmp	#LR__4840
318ac     00 07 02 FB | 	rdlong	_var04, _var01
318b0     01 06 06 F1 | 	add	_var04, #1
318b4     03 13 CA FA | 	rdbyte	arg01, _var04 wz
318b8     01 FA 05 56 |  if_ne	mov	result1, #1
318bc                 | ' 
318bc                 | ' 	return Stat;
318bc     01 00 00 AF 
318c0     20 E4 05 A1 |  if_e	add	objptr, ##544
318c4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
318c8     01 00 00 AF 
318cc     20 E4 85 A1 |  if_e	sub	objptr, ##544
318d0     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
318d4     01 04 CE F7 | 	test	_var03, #1 wz
318d8     00 02 06 A6 |  if_e	mov	_var02, #0
318dc                 | LR__4840
318dc     00 02 0E F2 | 	cmp	_var02, #0 wz
318e0     00 05 02 AB |  if_e	rdlong	_var03, _var01
318e4     00 04 06 56 |  if_ne	mov	_var03, #0
318e8     0A 05 62 FC | 	wrlong	_var03, arg02
318ec                 | ' 			res = FR_OK;
318ec                 | ' 		}
318ec                 | ' 
318ec                 | ' 	}
318ec                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
318ec                 | ' 	return res;
318ec     01 FB 01 F6 | 	mov	result1, _var02
318f0                 | _fatfs_cc_validate_ret
318f0     2D 00 64 FD | 	ret
318f4                 | 
318f4                 | _fatfs_cc_f_mount
318f4     01 4A 05 F6 | 	mov	COUNT_, #1
318f8     A8 00 A0 FD | 	call	#pushregs_
318fc     20 F0 07 F1 | 	add	ptra, #32
31900     04 4E 05 F1 | 	add	fp, #4
31904     A7 12 62 FC | 	wrlong	arg01, fp
31908     04 4E 05 F1 | 	add	fp, #4
3190c     A7 14 62 FC | 	wrlong	arg02, fp
31910     04 4E 05 F1 | 	add	fp, #4
31914     A7 16 42 FC | 	wrbyte	arg03, fp
31918     04 4E 85 F1 | 	sub	fp, #4
3191c     A7 16 02 FB | 	rdlong	arg03, fp
31920     14 4E 05 F1 | 	add	fp, #20
31924     A7 16 62 FC | 	wrlong	arg03, fp
31928     A7 12 02 F6 | 	mov	arg01, fp
3192c     1C 4E 85 F1 | 	sub	fp, #28
31930     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
31934     14 4E 05 F1 | 	add	fp, #20
31938     A7 FA 61 FC | 	wrlong	result1, fp
3193c     14 4E 85 F1 | 	sub	fp, #20
31940     00 FA 55 F2 | 	cmps	result1, #0 wc
31944     0B FA 05 C6 |  if_b	mov	result1, #11
31948     C0 00 90 CD |  if_b	jmp	#LR__4851
3194c     14 4E 05 F1 | 	add	fp, #20
31950     A7 16 02 FB | 	rdlong	arg03, fp
31954     02 16 66 F0 | 	shl	arg03, #2
31958     F2 16 02 F1 | 	add	arg03, objptr
3195c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
31960     04 4E 85 F1 | 	sub	fp, #4
31964     A7 16 62 FC | 	wrlong	arg03, fp
31968     10 4E 85 F1 | 	sub	fp, #16
3196c     28 00 90 AD |  if_e	jmp	#LR__4850
31970     10 4E 05 F1 | 	add	fp, #16
31974     A7 16 02 FB | 	rdlong	arg03, fp
31978     10 4E 85 F1 | 	sub	fp, #16
3197c     01 16 06 F1 | 	add	arg03, #1
31980     0B 13 C2 FA | 	rdbyte	arg01, arg03
31984     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
31988     10 4E 05 F1 | 	add	fp, #16
3198c     A7 16 02 FB | 	rdlong	arg03, fp
31990     10 4E 85 F1 | 	sub	fp, #16
31994     0B 01 48 FC | 	wrbyte	#0, arg03
31998                 | LR__4850
31998     04 4E 05 F1 | 	add	fp, #4
3199c     A7 26 0A FB | 	rdlong	local01, fp wz
319a0     04 4E 85 F1 | 	sub	fp, #4
319a4     04 4E 05 51 |  if_ne	add	fp, #4
319a8     A7 26 02 5B |  if_ne	rdlong	local01, fp
319ac     04 4E 85 51 |  if_ne	sub	fp, #4
319b0     13 01 48 5C |  if_ne	wrbyte	#0, local01
319b4     14 4E 05 F1 | 	add	fp, #20
319b8     A7 26 02 FB | 	rdlong	local01, fp
319bc     02 26 66 F0 | 	shl	local01, #2
319c0     F2 26 02 F1 | 	add	local01, objptr
319c4     10 4E 85 F1 | 	sub	fp, #16
319c8     A7 16 02 FB | 	rdlong	arg03, fp
319cc     13 17 62 FC | 	wrlong	arg03, local01
319d0     08 4E 05 F1 | 	add	fp, #8
319d4     A7 26 CA FA | 	rdbyte	local01, fp wz
319d8     0C 4E 85 F1 | 	sub	fp, #12
319dc     00 FA 05 A6 |  if_e	mov	result1, #0
319e0     28 00 90 AD |  if_e	jmp	#LR__4851
319e4     08 4E 05 F1 | 	add	fp, #8
319e8     A7 12 02 F6 | 	mov	arg01, fp
319ec     04 4E 85 F1 | 	sub	fp, #4
319f0     A7 14 02 F6 | 	mov	arg02, fp
319f4     04 4E 85 F1 | 	sub	fp, #4
319f8     00 16 06 F6 | 	mov	arg03, #0
319fc     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
31a00     18 4E 05 F1 | 	add	fp, #24
31a04     A7 FA 61 FC | 	wrlong	result1, fp
31a08                 | ' 
31a08                 | ' 	res = mount_volume(&path, &fs, 0);
31a08                 | ' 	return res ;
31a08     18 4E 85 F1 | 	sub	fp, #24
31a0c                 | LR__4851
31a0c     A7 F0 03 F6 | 	mov	ptra, fp
31a10     B2 00 A0 FD | 	call	#popregs_
31a14                 | _fatfs_cc_f_mount_ret
31a14     2D 00 64 FD | 	ret
31a18                 | 
31a18                 | _fatfs_cc_f_open
31a18     02 4A 05 F6 | 	mov	COUNT_, #2
31a1c     A8 00 A0 FD | 	call	#pushregs_
31a20     60 F0 07 F1 | 	add	ptra, #96
31a24     04 4E 05 F1 | 	add	fp, #4
31a28     A7 12 62 FC | 	wrlong	arg01, fp
31a2c     04 4E 05 F1 | 	add	fp, #4
31a30     A7 14 62 FC | 	wrlong	arg02, fp
31a34     04 4E 05 F1 | 	add	fp, #4
31a38     A7 16 42 FC | 	wrbyte	arg03, fp
31a3c     08 4E 85 F1 | 	sub	fp, #8
31a40     A7 18 0A FB | 	rdlong	arg04, fp wz
31a44     04 4E 85 F1 | 	sub	fp, #4
31a48     09 FA 05 A6 |  if_e	mov	result1, #9
31a4c     98 06 90 AD |  if_e	jmp	#LR__4877
31a50     0C 4E 05 F1 | 	add	fp, #12
31a54     A7 18 C2 FA | 	rdbyte	arg04, fp
31a58     3F 18 06 F5 | 	and	arg04, #63
31a5c     A7 18 42 FC | 	wrbyte	arg04, fp
31a60     04 4E 85 F1 | 	sub	fp, #4
31a64     A7 12 02 F6 | 	mov	arg01, fp
31a68     3C 4E 05 F1 | 	add	fp, #60
31a6c     A7 14 02 F6 | 	mov	arg02, fp
31a70     38 4E 85 F1 | 	sub	fp, #56
31a74     A7 16 C2 FA | 	rdbyte	arg03, fp
31a78     0C 4E 85 F1 | 	sub	fp, #12
31a7c     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
31a80     10 4E 05 F1 | 	add	fp, #16
31a84     A7 FA 61 FC | 	wrlong	result1, fp
31a88     10 4E 85 F1 | 	sub	fp, #16
31a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
31a90     2C 06 90 5D |  if_ne	jmp	#LR__4876
31a94     44 4E 05 F1 | 	add	fp, #68
31a98     A7 18 02 FB | 	rdlong	arg04, fp
31a9c     30 4E 85 F1 | 	sub	fp, #48
31aa0     A7 18 62 FC | 	wrlong	arg04, fp
31aa4     A7 12 02 F6 | 	mov	arg01, fp
31aa8     0C 4E 85 F1 | 	sub	fp, #12
31aac     A7 26 02 FB | 	rdlong	local01, fp
31ab0     08 4E 85 F1 | 	sub	fp, #8
31ab4     13 15 02 F6 | 	mov	arg02, local01
31ab8     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
31abc     10 4E 05 F1 | 	add	fp, #16
31ac0     A7 FA 61 FC | 	wrlong	result1, fp
31ac4     10 4E 85 F1 | 	sub	fp, #16
31ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
31acc     1C 00 90 5D |  if_ne	jmp	#LR__4860
31ad0     3F 4E 05 F1 | 	add	fp, #63
31ad4     A7 18 C2 FA | 	rdbyte	arg04, fp
31ad8     3F 4E 85 F1 | 	sub	fp, #63
31adc     80 18 CE F7 | 	test	arg04, #128 wz
31ae0     10 4E 05 51 |  if_ne	add	fp, #16
31ae4     A7 0C 68 5C |  if_ne	wrlong	#6, fp
31ae8     10 4E 85 51 |  if_ne	sub	fp, #16
31aec                 | LR__4860
31aec     0C 4E 05 F1 | 	add	fp, #12
31af0     A7 18 C2 FA | 	rdbyte	arg04, fp
31af4     0C 4E 85 F1 | 	sub	fp, #12
31af8     1C 18 CE F7 | 	test	arg04, #28 wz
31afc     F0 01 90 AD |  if_e	jmp	#LR__4865
31b00     10 4E 05 F1 | 	add	fp, #16
31b04     A7 26 0A FB | 	rdlong	local01, fp wz
31b08     10 4E 85 F1 | 	sub	fp, #16
31b0c     48 00 90 AD |  if_e	jmp	#LR__4862
31b10     10 4E 05 F1 | 	add	fp, #16
31b14     A7 18 02 FB | 	rdlong	arg04, fp
31b18     10 4E 85 F1 | 	sub	fp, #16
31b1c     04 18 0E F2 | 	cmp	arg04, #4 wz
31b20     1C 00 90 5D |  if_ne	jmp	#LR__4861
31b24     14 4E 05 F1 | 	add	fp, #20
31b28     A7 12 02 F6 | 	mov	arg01, fp
31b2c     14 4E 85 F1 | 	sub	fp, #20
31b30     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
31b34     10 4E 05 F1 | 	add	fp, #16
31b38     A7 FA 61 FC | 	wrlong	result1, fp
31b3c     10 4E 85 F1 | 	sub	fp, #16
31b40                 | LR__4861
31b40     0C 4E 05 F1 | 	add	fp, #12
31b44     A7 26 C2 FA | 	rdbyte	local01, fp
31b48     08 26 46 F5 | 	or	local01, #8
31b4c     A7 26 42 FC | 	wrbyte	local01, fp
31b50     0C 4E 85 F1 | 	sub	fp, #12
31b54     3C 00 90 FD | 	jmp	#LR__4864
31b58                 | LR__4862
31b58     1A 4E 05 F1 | 	add	fp, #26
31b5c     A7 26 C2 FA | 	rdbyte	local01, fp
31b60     1A 4E 85 F1 | 	sub	fp, #26
31b64     11 26 CE F7 | 	test	local01, #17 wz
31b68     10 4E 05 51 |  if_ne	add	fp, #16
31b6c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
31b70     10 4E 85 51 |  if_ne	sub	fp, #16
31b74     1C 00 90 5D |  if_ne	jmp	#LR__4863
31b78     0C 4E 05 F1 | 	add	fp, #12
31b7c     A7 26 C2 FA | 	rdbyte	local01, fp
31b80     0C 4E 85 F1 | 	sub	fp, #12
31b84     04 26 CE F7 | 	test	local01, #4 wz
31b88     10 4E 05 51 |  if_ne	add	fp, #16
31b8c     A7 10 68 5C |  if_ne	wrlong	#8, fp
31b90     10 4E 85 51 |  if_ne	sub	fp, #16
31b94                 | LR__4863
31b94                 | LR__4864
31b94     10 4E 05 F1 | 	add	fp, #16
31b98     A7 26 0A FB | 	rdlong	local01, fp wz
31b9c     10 4E 85 F1 | 	sub	fp, #16
31ba0     A8 01 90 5D |  if_ne	jmp	#LR__4868
31ba4     0C 4E 05 F1 | 	add	fp, #12
31ba8     A7 26 C2 FA | 	rdbyte	local01, fp
31bac     0C 4E 85 F1 | 	sub	fp, #12
31bb0     08 26 CE F7 | 	test	local01, #8 wz
31bb4     94 01 90 AD |  if_e	jmp	#LR__4868
31bb8     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
31bbc     54 4E 05 F1 | 	add	fp, #84
31bc0     A7 FA 61 FC | 	wrlong	result1, fp
31bc4     24 4E 85 F1 | 	sub	fp, #36
31bc8     A7 12 02 FB | 	rdlong	arg01, fp
31bcc     0E 12 06 F1 | 	add	arg01, #14
31bd0     09 FB 61 FC | 	wrlong	result1, arg01
31bd4     A7 12 02 FB | 	rdlong	arg01, fp
31bd8     16 12 06 F1 | 	add	arg01, #22
31bdc     24 4E 05 F1 | 	add	fp, #36
31be0     A7 14 02 FB | 	rdlong	arg02, fp
31be4     09 15 62 FC | 	wrlong	arg02, arg01
31be8     10 4E 85 F1 | 	sub	fp, #16
31bec     A7 12 02 FB | 	rdlong	arg01, fp
31bf0     14 4E 85 F1 | 	sub	fp, #20
31bf4     A7 14 02 FB | 	rdlong	arg02, fp
31bf8     30 4E 85 F1 | 	sub	fp, #48
31bfc     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
31c00     48 4E 05 F1 | 	add	fp, #72
31c04     A7 FA 61 FC | 	wrlong	result1, fp
31c08     18 4E 85 F1 | 	sub	fp, #24
31c0c     A7 26 02 FB | 	rdlong	local01, fp
31c10     0B 26 06 F1 | 	add	local01, #11
31c14     13 41 48 FC | 	wrbyte	#32, local01
31c18     14 4E 05 F1 | 	add	fp, #20
31c1c     A7 12 02 FB | 	rdlong	arg01, fp
31c20     14 4E 85 F1 | 	sub	fp, #20
31c24     A7 14 02 FB | 	rdlong	arg02, fp
31c28     30 4E 85 F1 | 	sub	fp, #48
31c2c     00 16 06 F6 | 	mov	arg03, #0
31c30     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
31c34     30 4E 05 F1 | 	add	fp, #48
31c38     A7 12 02 FB | 	rdlong	arg01, fp
31c3c     1C 12 06 F1 | 	add	arg01, #28
31c40     09 01 68 FC | 	wrlong	#0, arg01
31c44     14 4E 05 F1 | 	add	fp, #20
31c48     A7 26 02 FB | 	rdlong	local01, fp
31c4c     03 26 06 F1 | 	add	local01, #3
31c50     13 03 48 FC | 	wrbyte	#1, local01
31c54     04 4E 05 F1 | 	add	fp, #4
31c58     A7 26 0A FB | 	rdlong	local01, fp wz
31c5c     48 4E 85 F1 | 	sub	fp, #72
31c60     E8 00 90 AD |  if_e	jmp	#LR__4868
31c64     44 4E 05 F1 | 	add	fp, #68
31c68     A7 26 02 FB | 	rdlong	local01, fp
31c6c     30 26 06 F1 | 	add	local01, #48
31c70     13 27 02 FB | 	rdlong	local01, local01
31c74     14 4E 05 F1 | 	add	fp, #20
31c78     A7 26 62 FC | 	wrlong	local01, fp
31c7c     44 4E 85 F1 | 	sub	fp, #68
31c80     A7 12 02 F6 | 	mov	arg01, fp
31c84     34 4E 05 F1 | 	add	fp, #52
31c88     A7 14 02 FB | 	rdlong	arg02, fp
31c8c     48 4E 85 F1 | 	sub	fp, #72
31c90     00 16 06 F6 | 	mov	arg03, #0
31c94     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
31c98     10 4E 05 F1 | 	add	fp, #16
31c9c     A7 FA 61 FC | 	wrlong	result1, fp
31ca0     10 4E 85 F1 | 	sub	fp, #16
31ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
31ca8     A0 00 90 5D |  if_ne	jmp	#LR__4868
31cac     44 4E 05 F1 | 	add	fp, #68
31cb0     A7 12 02 FB | 	rdlong	arg01, fp
31cb4     14 4E 05 F1 | 	add	fp, #20
31cb8     A7 14 02 FB | 	rdlong	arg02, fp
31cbc     58 4E 85 F1 | 	sub	fp, #88
31cc0     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
31cc4     10 4E 05 F1 | 	add	fp, #16
31cc8     A7 FA 61 FC | 	wrlong	result1, fp
31ccc     34 4E 05 F1 | 	add	fp, #52
31cd0     A7 18 02 FB | 	rdlong	arg04, fp
31cd4     04 4E 05 F1 | 	add	fp, #4
31cd8     A7 26 02 FB | 	rdlong	local01, fp
31cdc     48 4E 85 F1 | 	sub	fp, #72
31ce0     01 26 86 F1 | 	sub	local01, #1
31ce4     10 18 06 F1 | 	add	arg04, #16
31ce8     0C 27 62 FC | 	wrlong	local01, arg04
31cec     5C 00 90 FD | 	jmp	#LR__4868
31cf0                 | LR__4865
31cf0     10 4E 05 F1 | 	add	fp, #16
31cf4     A7 18 0A FB | 	rdlong	arg04, fp wz
31cf8     10 4E 85 F1 | 	sub	fp, #16
31cfc     4C 00 90 5D |  if_ne	jmp	#LR__4867
31d00     1A 4E 05 F1 | 	add	fp, #26
31d04     A7 18 C2 FA | 	rdbyte	arg04, fp
31d08     1A 4E 85 F1 | 	sub	fp, #26
31d0c     10 18 CE F7 | 	test	arg04, #16 wz
31d10     10 4E 05 51 |  if_ne	add	fp, #16
31d14     A7 08 68 5C |  if_ne	wrlong	#4, fp
31d18     10 4E 85 51 |  if_ne	sub	fp, #16
31d1c     2C 00 90 5D |  if_ne	jmp	#LR__4866
31d20     0C 4E 05 F1 | 	add	fp, #12
31d24     A7 18 C2 FA | 	rdbyte	arg04, fp
31d28     0C 4E 85 F1 | 	sub	fp, #12
31d2c     02 18 CE F7 | 	test	arg04, #2 wz
31d30     1A 4E 05 51 |  if_ne	add	fp, #26
31d34     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
31d38     1A 4E 85 51 |  if_ne	sub	fp, #26
31d3c     01 26 CE 57 |  if_ne	test	local01, #1 wz
31d40     10 4E 05 51 |  if_ne	add	fp, #16
31d44     A7 0E 68 5C |  if_ne	wrlong	#7, fp
31d48     10 4E 85 51 |  if_ne	sub	fp, #16
31d4c                 | LR__4866
31d4c                 | LR__4867
31d4c                 | LR__4868
31d4c     10 4E 05 F1 | 	add	fp, #16
31d50     A7 26 0A FB | 	rdlong	local01, fp wz
31d54     10 4E 85 F1 | 	sub	fp, #16
31d58     60 00 90 5D |  if_ne	jmp	#LR__4869
31d5c     0C 4E 05 F1 | 	add	fp, #12
31d60     A7 28 C2 FA | 	rdbyte	local02, fp
31d64     0C 4E 85 F1 | 	sub	fp, #12
31d68     08 28 CE F7 | 	test	local02, #8 wz
31d6c     0C 4E 05 51 |  if_ne	add	fp, #12
31d70     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
31d74     40 28 46 55 |  if_ne	or	local02, #64
31d78     A7 28 42 5C |  if_ne	wrbyte	local02, fp
31d7c     0C 4E 85 51 |  if_ne	sub	fp, #12
31d80     04 4E 05 F1 | 	add	fp, #4
31d84     A7 28 02 FB | 	rdlong	local02, fp
31d88     40 4E 05 F1 | 	add	fp, #64
31d8c     A7 26 02 FB | 	rdlong	local01, fp
31d90     30 26 06 F1 | 	add	local01, #48
31d94     13 27 02 FB | 	rdlong	local01, local01
31d98     20 28 06 F1 | 	add	local02, #32
31d9c     14 27 62 FC | 	wrlong	local01, local02
31da0     40 4E 85 F1 | 	sub	fp, #64
31da4     A7 28 02 FB | 	rdlong	local02, fp
31da8     2C 4E 05 F1 | 	add	fp, #44
31dac     A7 26 02 FB | 	rdlong	local01, fp
31db0     30 4E 85 F1 | 	sub	fp, #48
31db4     24 28 06 F1 | 	add	local02, #36
31db8     14 27 62 FC | 	wrlong	local01, local02
31dbc                 | LR__4869
31dbc     10 4E 05 F1 | 	add	fp, #16
31dc0     A7 28 0A FB | 	rdlong	local02, fp wz
31dc4     10 4E 85 F1 | 	sub	fp, #16
31dc8     F4 02 90 5D |  if_ne	jmp	#LR__4875
31dcc     04 4E 05 F1 | 	add	fp, #4
31dd0     A7 28 02 FB | 	rdlong	local02, fp
31dd4     40 4E 05 F1 | 	add	fp, #64
31dd8     A7 12 02 FB | 	rdlong	arg01, fp
31ddc     14 4E 85 F1 | 	sub	fp, #20
31de0     A7 14 02 FB | 	rdlong	arg02, fp
31de4     30 4E 85 F1 | 	sub	fp, #48
31de8     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
31dec     08 28 06 F1 | 	add	local02, #8
31df0     14 FB 61 FC | 	wrlong	result1, local02
31df4     04 4E 05 F1 | 	add	fp, #4
31df8     A7 28 02 FB | 	rdlong	local02, fp
31dfc     2C 4E 05 F1 | 	add	fp, #44
31e00     A7 12 02 FB | 	rdlong	arg01, fp
31e04     1C 12 06 F1 | 	add	arg01, #28
31e08                 | ' {
31e08                 | ' 
31e08                 | ' 	return *((DWORD*)ptr);
31e08     09 FB 01 FB | 	rdlong	result1, arg01
31e0c     0C 28 06 F1 | 	add	local02, #12
31e10     14 FB 61 FC | 	wrlong	result1, local02
31e14     2C 4E 85 F1 | 	sub	fp, #44
31e18     A7 28 02 FB | 	rdlong	local02, fp
31e1c     40 4E 05 F1 | 	add	fp, #64
31e20     A7 26 02 FB | 	rdlong	local01, fp
31e24     14 27 62 FC | 	wrlong	local01, local02
31e28     40 4E 85 F1 | 	sub	fp, #64
31e2c     A7 28 02 FB | 	rdlong	local02, fp
31e30     40 4E 05 F1 | 	add	fp, #64
31e34     A7 26 02 FB | 	rdlong	local01, fp
31e38     06 26 06 F1 | 	add	local01, #6
31e3c     13 27 E2 FA | 	rdword	local01, local01
31e40     04 28 06 F1 | 	add	local02, #4
31e44     14 27 52 FC | 	wrword	local01, local02
31e48     40 4E 85 F1 | 	sub	fp, #64
31e4c     A7 28 02 FB | 	rdlong	local02, fp
31e50     08 4E 05 F1 | 	add	fp, #8
31e54     A7 26 C2 FA | 	rdbyte	local01, fp
31e58     10 28 06 F1 | 	add	local02, #16
31e5c     14 27 42 FC | 	wrbyte	local01, local02
31e60     08 4E 85 F1 | 	sub	fp, #8
31e64     A7 28 02 FB | 	rdlong	local02, fp
31e68     11 28 06 F1 | 	add	local02, #17
31e6c     14 01 48 FC | 	wrbyte	#0, local02
31e70     A7 28 02 FB | 	rdlong	local02, fp
31e74     1C 28 06 F1 | 	add	local02, #28
31e78     14 01 68 FC | 	wrlong	#0, local02
31e7c     A7 28 02 FB | 	rdlong	local02, fp
31e80     14 28 06 F1 | 	add	local02, #20
31e84     14 01 68 FC | 	wrlong	#0, local02
31e88     A7 12 02 FB | 	rdlong	arg01, fp
31e8c     04 4E 85 F1 | 	sub	fp, #4
31e90     28 12 06 F1 | 	add	arg01, #40
31e94     00 14 06 F6 | 	mov	arg02, #0
31e98     09 16 C6 F9 | 	decod	arg03, #9
31e9c     98 00 A0 FD | 	call	#\builtin_bytefill_
31ea0     0C 4E 05 F1 | 	add	fp, #12
31ea4     A7 28 C2 FA | 	rdbyte	local02, fp
31ea8     0C 4E 85 F1 | 	sub	fp, #12
31eac     20 28 CE F7 | 	test	local02, #32 wz
31eb0     0C 02 90 AD |  if_e	jmp	#LR__4874
31eb4     04 4E 05 F1 | 	add	fp, #4
31eb8     A7 26 02 FB | 	rdlong	local01, fp
31ebc     04 4E 85 F1 | 	sub	fp, #4
31ec0     0C 26 06 F1 | 	add	local01, #12
31ec4     13 29 02 FB | 	rdlong	local02, local01
31ec8     01 28 16 F2 | 	cmp	local02, #1 wc
31ecc     F0 01 90 CD |  if_b	jmp	#LR__4874
31ed0     04 4E 05 F1 | 	add	fp, #4
31ed4     A7 26 02 FB | 	rdlong	local01, fp
31ed8     13 29 02 F6 | 	mov	local02, local01
31edc     0C 26 06 F1 | 	add	local01, #12
31ee0     13 27 02 FB | 	rdlong	local01, local01
31ee4     14 28 06 F1 | 	add	local02, #20
31ee8     14 27 62 FC | 	wrlong	local01, local02
31eec     40 4E 05 F1 | 	add	fp, #64
31ef0     A7 28 02 FB | 	rdlong	local02, fp
31ef4     0A 28 06 F1 | 	add	local02, #10
31ef8     14 29 E2 FA | 	rdword	local02, local02
31efc     09 28 66 F0 | 	shl	local02, #9
31f00     08 4E 05 F1 | 	add	fp, #8
31f04     A7 28 62 FC | 	wrlong	local02, fp
31f08     48 4E 85 F1 | 	sub	fp, #72
31f0c     A7 28 02 FB | 	rdlong	local02, fp
31f10     08 28 06 F1 | 	add	local02, #8
31f14     14 27 02 FB | 	rdlong	local01, local02
31f18     4C 4E 05 F1 | 	add	fp, #76
31f1c     A7 26 62 FC | 	wrlong	local01, fp
31f20                 | ' 				fp->fptr = fp->obj.objsize;
31f20                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
31f20                 | ' 				clst = fp->obj.sclust;
31f20                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
31f20     4C 4E 85 F1 | 	sub	fp, #76
31f24     A7 28 02 FB | 	rdlong	local02, fp
31f28     0C 28 06 F1 | 	add	local02, #12
31f2c     14 27 02 FB | 	rdlong	local01, local02
31f30     58 4E 05 F1 | 	add	fp, #88
31f34     A7 26 62 FC | 	wrlong	local01, fp
31f38     5C 4E 85 F1 | 	sub	fp, #92
31f3c                 | LR__4870
31f3c     10 4E 05 F1 | 	add	fp, #16
31f40     A7 28 0A FB | 	rdlong	local02, fp wz
31f44     10 4E 85 F1 | 	sub	fp, #16
31f48     94 00 90 5D |  if_ne	jmp	#LR__4871
31f4c     5C 4E 05 F1 | 	add	fp, #92
31f50     A7 28 02 FB | 	rdlong	local02, fp
31f54     10 4E 85 F1 | 	sub	fp, #16
31f58     A7 26 02 FB | 	rdlong	local01, fp
31f5c     4C 4E 85 F1 | 	sub	fp, #76
31f60     13 29 1A F2 | 	cmp	local02, local01 wcz
31f64     78 00 90 ED |  if_be	jmp	#LR__4871
31f68     04 4E 05 F1 | 	add	fp, #4
31f6c     A7 12 02 FB | 	rdlong	arg01, fp
31f70     4C 4E 05 F1 | 	add	fp, #76
31f74     A7 14 02 FB | 	rdlong	arg02, fp
31f78     50 4E 85 F1 | 	sub	fp, #80
31f7c     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
31f80     50 4E 05 F1 | 	add	fp, #80
31f84     A7 FA 61 FC | 	wrlong	result1, fp
31f88     50 4E 85 F1 | 	sub	fp, #80
31f8c     02 FA 15 F2 | 	cmp	result1, #2 wc
31f90     10 4E 05 C1 |  if_b	add	fp, #16
31f94     A7 04 68 CC |  if_b	wrlong	#2, fp
31f98     10 4E 85 C1 |  if_b	sub	fp, #16
31f9c     50 4E 05 F1 | 	add	fp, #80
31fa0     A7 28 02 FB | 	rdlong	local02, fp
31fa4     50 4E 85 F1 | 	sub	fp, #80
31fa8     FF FF 7F FF 
31fac     FF 29 0E F2 | 	cmp	local02, ##-1 wz
31fb0     10 4E 05 A1 |  if_e	add	fp, #16
31fb4     A7 02 68 AC |  if_e	wrlong	#1, fp
31fb8     10 4E 85 A1 |  if_e	sub	fp, #16
31fbc     5C 4E 05 F1 | 	add	fp, #92
31fc0     A7 28 02 FB | 	rdlong	local02, fp
31fc4     10 4E 85 F1 | 	sub	fp, #16
31fc8     A7 26 02 FB | 	rdlong	local01, fp
31fcc     13 29 82 F1 | 	sub	local02, local01
31fd0     10 4E 05 F1 | 	add	fp, #16
31fd4     A7 28 62 FC | 	wrlong	local02, fp
31fd8     5C 4E 85 F1 | 	sub	fp, #92
31fdc     5C FF 9F FD | 	jmp	#LR__4870
31fe0                 | LR__4871
31fe0     04 4E 05 F1 | 	add	fp, #4
31fe4     A7 28 02 FB | 	rdlong	local02, fp
31fe8     4C 4E 05 F1 | 	add	fp, #76
31fec     A7 26 02 FB | 	rdlong	local01, fp
31ff0     18 28 06 F1 | 	add	local02, #24
31ff4     14 27 62 FC | 	wrlong	local01, local02
31ff8     40 4E 85 F1 | 	sub	fp, #64
31ffc     A7 28 0A FB | 	rdlong	local02, fp wz
32000     10 4E 85 F1 | 	sub	fp, #16
32004     B8 00 90 5D |  if_ne	jmp	#LR__4873
32008     5C 4E 05 F1 | 	add	fp, #92
3200c     A7 26 02 FB | 	rdlong	local01, fp
32010     5C 4E 85 F1 | 	sub	fp, #92
32014     FF 27 CE F7 | 	test	local01, #511 wz
32018     A4 00 90 AD |  if_e	jmp	#LR__4873
3201c     44 4E 05 F1 | 	add	fp, #68
32020     A7 12 02 FB | 	rdlong	arg01, fp
32024     0C 4E 05 F1 | 	add	fp, #12
32028     A7 14 02 FB | 	rdlong	arg02, fp
3202c     50 4E 85 F1 | 	sub	fp, #80
32030     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
32034     58 4E 05 F1 | 	add	fp, #88
32038     A7 FA 61 FC | 	wrlong	result1, fp
3203c     00 FA 4D F2 | 	cmps	result1, #0 wz
32040     58 4E 85 F1 | 	sub	fp, #88
32044     10 4E 05 A1 |  if_e	add	fp, #16
32048     A7 04 68 AC |  if_e	wrlong	#2, fp
3204c     10 4E 85 A1 |  if_e	sub	fp, #16
32050     6C 00 90 AD |  if_e	jmp	#LR__4872
32054     04 4E 05 F1 | 	add	fp, #4
32058     A7 28 02 FB | 	rdlong	local02, fp
3205c     54 4E 05 F1 | 	add	fp, #84
32060     A7 26 02 FB | 	rdlong	local01, fp
32064     04 4E 05 F1 | 	add	fp, #4
32068     A7 18 02 FB | 	rdlong	arg04, fp
3206c     09 18 46 F0 | 	shr	arg04, #9
32070     0C 27 02 F1 | 	add	local01, arg04
32074     1C 28 06 F1 | 	add	local02, #28
32078     14 27 62 FC | 	wrlong	local01, local02
3207c     18 4E 85 F1 | 	sub	fp, #24
32080     A7 28 02 FB | 	rdlong	local02, fp
32084     01 28 06 F1 | 	add	local02, #1
32088     14 13 C2 FA | 	rdbyte	arg01, local02
3208c     40 4E 85 F1 | 	sub	fp, #64
32090     A7 28 02 FB | 	rdlong	local02, fp
32094     14 15 02 F6 | 	mov	arg02, local02
32098     28 14 06 F1 | 	add	arg02, #40
3209c     04 4E 85 F1 | 	sub	fp, #4
320a0     1C 28 06 F1 | 	add	local02, #28
320a4     14 17 02 FB | 	rdlong	arg03, local02
320a8     01 18 06 F6 | 	mov	arg04, #1
320ac     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
320b0     00 FA 0D F2 | 	cmp	result1, #0 wz
320b4     10 4E 05 51 |  if_ne	add	fp, #16
320b8     A7 02 68 5C |  if_ne	wrlong	#1, fp
320bc     10 4E 85 51 |  if_ne	sub	fp, #16
320c0                 | LR__4872
320c0                 | LR__4873
320c0                 | LR__4874
320c0                 | LR__4875
320c0                 | LR__4876
320c0     10 4E 05 F1 | 	add	fp, #16
320c4     A7 28 0A FB | 	rdlong	local02, fp wz
320c8     10 4E 85 F1 | 	sub	fp, #16
320cc     04 4E 05 51 |  if_ne	add	fp, #4
320d0     A7 28 02 5B |  if_ne	rdlong	local02, fp
320d4     04 4E 85 51 |  if_ne	sub	fp, #4
320d8     14 01 68 5C |  if_ne	wrlong	#0, local02
320dc                 | ' 
320dc                 | ' 	return res ;
320dc     10 4E 05 F1 | 	add	fp, #16
320e0     A7 FA 01 FB | 	rdlong	result1, fp
320e4     10 4E 85 F1 | 	sub	fp, #16
320e8                 | LR__4877
320e8     A7 F0 03 F6 | 	mov	ptra, fp
320ec     B2 00 A0 FD | 	call	#popregs_
320f0                 | _fatfs_cc_f_open_ret
320f0     2D 00 64 FD | 	ret
320f4                 | 
320f4                 | _fatfs_cc_f_read
320f4     0E 4A 05 F6 | 	mov	COUNT_, #14
320f8     A8 00 A0 FD | 	call	#pushregs_
320fc     38 F0 07 F1 | 	add	ptra, #56
32100     04 4E 05 F1 | 	add	fp, #4
32104     A7 12 62 FC | 	wrlong	arg01, fp
32108     04 4E 05 F1 | 	add	fp, #4
3210c     A7 14 62 FC | 	wrlong	arg02, fp
32110     04 4E 05 F1 | 	add	fp, #4
32114     A7 16 62 FC | 	wrlong	arg03, fp
32118     04 4E 05 F1 | 	add	fp, #4
3211c     A7 18 62 FC | 	wrlong	arg04, fp
32120     08 4E 85 F1 | 	sub	fp, #8
32124     A7 FA 01 FB | 	rdlong	result1, fp
32128     2C 4E 05 F1 | 	add	fp, #44
3212c     A7 FA 61 FC | 	wrlong	result1, fp
32130     24 4E 85 F1 | 	sub	fp, #36
32134     A7 FA 01 FB | 	rdlong	result1, fp
32138     FD 00 68 FC | 	wrlong	#0, result1
3213c     0C 4E 85 F1 | 	sub	fp, #12
32140     A7 12 02 FB | 	rdlong	arg01, fp
32144     14 4E 05 F1 | 	add	fp, #20
32148     A7 14 02 F6 | 	mov	arg02, fp
3214c     18 4E 85 F1 | 	sub	fp, #24
32150     24 F7 BF FD | 	call	#_fatfs_cc_validate
32154     14 4E 05 F1 | 	add	fp, #20
32158     A7 FA 61 FC | 	wrlong	result1, fp
3215c     00 FA 4D F2 | 	cmps	result1, #0 wz
32160     14 4E 85 F1 | 	sub	fp, #20
32164     20 00 90 5D |  if_ne	jmp	#LR__4880
32168     04 4E 05 F1 | 	add	fp, #4
3216c     A7 14 02 FB | 	rdlong	arg02, fp
32170     11 14 06 F1 | 	add	arg02, #17
32174     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
32178     10 4E 05 F1 | 	add	fp, #16
3217c     A7 14 62 FC | 	wrlong	arg02, fp
32180     14 4E 85 F1 | 	sub	fp, #20
32184     10 00 90 AD |  if_e	jmp	#LR__4881
32188                 | LR__4880
32188     14 4E 05 F1 | 	add	fp, #20
3218c     A7 FA 01 FB | 	rdlong	result1, fp
32190     14 4E 85 F1 | 	sub	fp, #20
32194     EC 05 90 FD | 	jmp	#LR__4900
32198                 | LR__4881
32198     04 4E 05 F1 | 	add	fp, #4
3219c     A7 18 02 FB | 	rdlong	arg04, fp
321a0     04 4E 85 F1 | 	sub	fp, #4
321a4     10 18 06 F1 | 	add	arg04, #16
321a8     0C 19 C2 FA | 	rdbyte	arg04, arg04
321ac     01 18 CE F7 | 	test	arg04, #1 wz
321b0     07 FA 05 A6 |  if_e	mov	result1, #7
321b4     CC 05 90 AD |  if_e	jmp	#LR__4900
321b8     04 4E 05 F1 | 	add	fp, #4
321bc     A7 26 02 FB | 	rdlong	local01, fp
321c0     13 29 02 F6 | 	mov	local02, local01
321c4     0C 28 06 F1 | 	add	local02, #12
321c8     14 2B 02 FB | 	rdlong	local03, local02
321cc     14 26 06 F1 | 	add	local01, #20
321d0     13 27 02 FB | 	rdlong	local01, local01
321d4     13 2B 82 F1 | 	sub	local03, local01
321d8     20 4E 05 F1 | 	add	fp, #32
321dc     A7 2A 62 FC | 	wrlong	local03, fp
321e0     18 4E 85 F1 | 	sub	fp, #24
321e4     A7 2C 02 FB | 	rdlong	local04, fp
321e8     0C 4E 85 F1 | 	sub	fp, #12
321ec     15 2D 1A F2 | 	cmp	local04, local03 wcz
321f0     24 4E 05 11 |  if_a	add	fp, #36
321f4     A7 2C 02 1B |  if_a	rdlong	local04, fp
321f8     18 4E 85 11 |  if_a	sub	fp, #24
321fc     A7 2C 62 1C |  if_a	wrlong	local04, fp
32200     0C 4E 85 11 |  if_a	sub	fp, #12
32204                 | ' 
32204                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
32204                 | LR__4882
32204     0C 4E 05 F1 | 	add	fp, #12
32208     A7 28 02 FB | 	rdlong	local02, fp
3220c     0C 4E 85 F1 | 	sub	fp, #12
32210     14 2D 02 F6 | 	mov	local04, local02
32214     01 2C 16 F2 | 	cmp	local04, #1 wc
32218     64 05 90 CD |  if_b	jmp	#LR__4899
3221c     04 4E 05 F1 | 	add	fp, #4
32220     A7 2A 02 FB | 	rdlong	local03, fp
32224     04 4E 85 F1 | 	sub	fp, #4
32228     14 2A 06 F1 | 	add	local03, #20
3222c     15 2B 02 FB | 	rdlong	local03, local03
32230     FF 2B CE F7 | 	test	local03, #511 wz
32234     3C 04 90 5D |  if_ne	jmp	#LR__4897
32238     04 4E 05 F1 | 	add	fp, #4
3223c     A7 26 02 FB | 	rdlong	local01, fp
32240     14 26 06 F1 | 	add	local01, #20
32244     13 2B 02 FB | 	rdlong	local03, local01
32248     09 2A 46 F0 | 	shr	local03, #9
3224c     14 4E 05 F1 | 	add	fp, #20
32250     A7 2E 02 FB | 	rdlong	local05, fp
32254     17 31 02 F6 | 	mov	local06, local05
32258     0A 30 06 F1 | 	add	local06, #10
3225c     18 33 E2 FA | 	rdword	local07, local06
32260     0A 30 86 F1 | 	sub	local06, #10
32264     19 35 32 F9 | 	getword	local08, local07, #0
32268     01 34 86 F1 | 	sub	local08, #1
3226c     1A 2B 0A F5 | 	and	local03, local08 wz
32270     18 4E 05 F1 | 	add	fp, #24
32274     A7 2A 62 FC | 	wrlong	local03, fp
32278     30 4E 85 F1 | 	sub	fp, #48
3227c     E0 00 90 5D |  if_ne	jmp	#LR__4887
32280     04 4E 05 F1 | 	add	fp, #4
32284     A7 2A 02 FB | 	rdlong	local03, fp
32288     04 4E 85 F1 | 	sub	fp, #4
3228c     14 2A 06 F1 | 	add	local03, #20
32290     15 2B 0A FB | 	rdlong	local03, local03 wz
32294     20 00 90 5D |  if_ne	jmp	#LR__4883
32298     04 4E 05 F1 | 	add	fp, #4
3229c     A7 2A 02 FB | 	rdlong	local03, fp
322a0     08 2A 06 F1 | 	add	local03, #8
322a4     15 2B 02 FB | 	rdlong	local03, local03
322a8     18 4E 05 F1 | 	add	fp, #24
322ac     A7 2A 62 FC | 	wrlong	local03, fp
322b0     1C 4E 85 F1 | 	sub	fp, #28
322b4     28 00 90 FD | 	jmp	#LR__4884
322b8                 | LR__4883
322b8     04 4E 05 F1 | 	add	fp, #4
322bc     A7 34 02 FB | 	rdlong	local08, fp
322c0     1A 13 02 F6 | 	mov	arg01, local08
322c4     04 4E 85 F1 | 	sub	fp, #4
322c8     18 34 06 F1 | 	add	local08, #24
322cc     1A 15 02 FB | 	rdlong	arg02, local08
322d0     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
322d4     1C 4E 05 F1 | 	add	fp, #28
322d8     A7 FA 61 FC | 	wrlong	result1, fp
322dc     1C 4E 85 F1 | 	sub	fp, #28
322e0                 | LR__4884
322e0     1C 4E 05 F1 | 	add	fp, #28
322e4     A7 2A 02 FB | 	rdlong	local03, fp
322e8     1C 4E 85 F1 | 	sub	fp, #28
322ec     02 2A 16 F2 | 	cmp	local03, #2 wc
322f0     1C 00 90 3D |  if_ae	jmp	#LR__4885
322f4     04 4E 05 F1 | 	add	fp, #4
322f8     A7 2A 02 FB | 	rdlong	local03, fp
322fc     04 4E 85 F1 | 	sub	fp, #4
32300     11 2A 06 F1 | 	add	local03, #17
32304     15 05 48 FC | 	wrbyte	#2, local03
32308     02 FA 05 F6 | 	mov	result1, #2
3230c     74 04 90 FD | 	jmp	#LR__4900
32310                 | LR__4885
32310     1C 4E 05 F1 | 	add	fp, #28
32314     A7 2A 02 FB | 	rdlong	local03, fp
32318     1C 4E 85 F1 | 	sub	fp, #28
3231c     FF FF 7F FF 
32320     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
32324     1C 00 90 5D |  if_ne	jmp	#LR__4886
32328     04 4E 05 F1 | 	add	fp, #4
3232c     A7 2A 02 FB | 	rdlong	local03, fp
32330     04 4E 85 F1 | 	sub	fp, #4
32334     11 2A 06 F1 | 	add	local03, #17
32338     15 03 48 FC | 	wrbyte	#1, local03
3233c     01 FA 05 F6 | 	mov	result1, #1
32340     40 04 90 FD | 	jmp	#LR__4900
32344                 | LR__4886
32344     04 4E 05 F1 | 	add	fp, #4
32348     A7 2A 02 FB | 	rdlong	local03, fp
3234c     18 4E 05 F1 | 	add	fp, #24
32350     A7 34 02 FB | 	rdlong	local08, fp
32354     1C 4E 85 F1 | 	sub	fp, #28
32358     18 2A 06 F1 | 	add	local03, #24
3235c     15 35 62 FC | 	wrlong	local08, local03
32360                 | LR__4887
32360     18 4E 05 F1 | 	add	fp, #24
32364     A7 12 02 FB | 	rdlong	arg01, fp
32368     14 4E 85 F1 | 	sub	fp, #20
3236c     A7 2A 02 FB | 	rdlong	local03, fp
32370     04 4E 85 F1 | 	sub	fp, #4
32374     18 2A 06 F1 | 	add	local03, #24
32378     15 15 02 FB | 	rdlong	arg02, local03
3237c     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
32380     20 4E 05 F1 | 	add	fp, #32
32384     A7 FA 61 FC | 	wrlong	result1, fp
32388     20 4E 85 F1 | 	sub	fp, #32
3238c     00 FA 0D F2 | 	cmp	result1, #0 wz
32390     1C 00 90 5D |  if_ne	jmp	#LR__4888
32394     04 4E 05 F1 | 	add	fp, #4
32398     A7 2A 02 FB | 	rdlong	local03, fp
3239c     04 4E 85 F1 | 	sub	fp, #4
323a0     11 2A 06 F1 | 	add	local03, #17
323a4     15 05 48 FC | 	wrbyte	#2, local03
323a8     02 FA 05 F6 | 	mov	result1, #2
323ac     D4 03 90 FD | 	jmp	#LR__4900
323b0                 | LR__4888
323b0     20 4E 05 F1 | 	add	fp, #32
323b4     A7 2A 02 FB | 	rdlong	local03, fp
323b8     10 4E 05 F1 | 	add	fp, #16
323bc     A7 34 02 FB | 	rdlong	local08, fp
323c0     1A 2B 02 F1 | 	add	local03, local08
323c4     10 4E 85 F1 | 	sub	fp, #16
323c8     A7 2A 62 FC | 	wrlong	local03, fp
323cc     14 4E 85 F1 | 	sub	fp, #20
323d0     A7 2A 02 FB | 	rdlong	local03, fp
323d4     09 2A 46 F0 | 	shr	local03, #9
323d8     20 4E 05 F1 | 	add	fp, #32
323dc     A7 2A 62 FC | 	wrlong	local03, fp
323e0     2C 4E 85 F1 | 	sub	fp, #44
323e4     01 2A 16 F2 | 	cmp	local03, #1 wc
323e8     5C 01 90 CD |  if_b	jmp	#LR__4892
323ec     30 4E 05 F1 | 	add	fp, #48
323f0     A7 2A 02 FB | 	rdlong	local03, fp
323f4     04 4E 85 F1 | 	sub	fp, #4
323f8     A7 34 02 FB | 	rdlong	local08, fp
323fc     1A 2B 02 F1 | 	add	local03, local08
32400     14 4E 85 F1 | 	sub	fp, #20
32404     A7 34 02 FB | 	rdlong	local08, fp
32408     18 4E 85 F1 | 	sub	fp, #24
3240c     0A 34 06 F1 | 	add	local08, #10
32410     1A 35 E2 FA | 	rdword	local08, local08
32414     1A 2B 1A F2 | 	cmp	local03, local08 wcz
32418     28 00 90 ED |  if_be	jmp	#LR__4889
3241c     18 4E 05 F1 | 	add	fp, #24
32420     A7 26 02 FB | 	rdlong	local01, fp
32424     0A 26 06 F1 | 	add	local01, #10
32428     13 2B E2 FA | 	rdword	local03, local01
3242c     18 4E 05 F1 | 	add	fp, #24
32430     A7 34 02 FB | 	rdlong	local08, fp
32434     1A 2B 82 F1 | 	sub	local03, local08
32438     04 4E 85 F1 | 	sub	fp, #4
3243c     A7 2A 62 FC | 	wrlong	local03, fp
32440     2C 4E 85 F1 | 	sub	fp, #44
32444                 | LR__4889
32444     18 4E 05 F1 | 	add	fp, #24
32448     A7 26 02 FB | 	rdlong	local01, fp
3244c     01 26 06 F1 | 	add	local01, #1
32450     13 13 C2 FA | 	rdbyte	arg01, local01
32454     1C 4E 05 F1 | 	add	fp, #28
32458     A7 14 02 FB | 	rdlong	arg02, fp
3245c     14 4E 85 F1 | 	sub	fp, #20
32460     A7 16 02 FB | 	rdlong	arg03, fp
32464     0C 4E 05 F1 | 	add	fp, #12
32468     A7 18 02 FB | 	rdlong	arg04, fp
3246c     2C 4E 85 F1 | 	sub	fp, #44
32470     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
32474     00 FA 0D F2 | 	cmp	result1, #0 wz
32478     1C 00 90 AD |  if_e	jmp	#LR__4890
3247c     04 4E 05 F1 | 	add	fp, #4
32480     A7 2A 02 FB | 	rdlong	local03, fp
32484     04 4E 85 F1 | 	sub	fp, #4
32488     11 2A 06 F1 | 	add	local03, #17
3248c     15 03 48 FC | 	wrbyte	#1, local03
32490     01 FA 05 F6 | 	mov	result1, #1
32494     EC 02 90 FD | 	jmp	#LR__4900
32498                 | LR__4890
32498     04 4E 05 F1 | 	add	fp, #4
3249c     A7 26 02 FB | 	rdlong	local01, fp
324a0     04 4E 85 F1 | 	sub	fp, #4
324a4     10 26 06 F1 | 	add	local01, #16
324a8     13 2B C2 FA | 	rdbyte	local03, local01
324ac     80 2A CE F7 | 	test	local03, #128 wz
324b0     78 00 90 AD |  if_e	jmp	#LR__4891
324b4     04 4E 05 F1 | 	add	fp, #4
324b8     A7 34 02 FB | 	rdlong	local08, fp
324bc     1C 34 06 F1 | 	add	local08, #28
324c0     1A 35 02 FB | 	rdlong	local08, local08
324c4     1C 4E 05 F1 | 	add	fp, #28
324c8     A7 36 02 FB | 	rdlong	local09, fp
324cc     1B 35 82 F1 | 	sub	local08, local09
324d0     0C 4E 05 F1 | 	add	fp, #12
324d4     A7 38 02 FB | 	rdlong	local10, fp
324d8     2C 4E 85 F1 | 	sub	fp, #44
324dc     1C 3B 02 F6 | 	mov	local11, local10
324e0     1D 35 12 F2 | 	cmp	local08, local11 wc
324e4     44 00 90 3D |  if_ae	jmp	#LR__4891
324e8     34 4E 05 F1 | 	add	fp, #52
324ec     A7 12 02 FB | 	rdlong	arg01, fp
324f0     30 4E 85 F1 | 	sub	fp, #48
324f4     A7 14 02 FB | 	rdlong	arg02, fp
324f8     0A 3B 02 F6 | 	mov	local11, arg02
324fc     1C 3A 06 F1 | 	add	local11, #28
32500     1D 37 02 FB | 	rdlong	local09, local11
32504     1C 4E 05 F1 | 	add	fp, #28
32508     A7 2E 02 FB | 	rdlong	local05, fp
3250c     17 37 82 F1 | 	sub	local09, local05
32510     09 36 66 F0 | 	shl	local09, #9
32514     1B 3B 02 F6 | 	mov	local11, local09
32518     1B 13 02 F1 | 	add	arg01, local09
3251c     20 4E 85 F1 | 	sub	fp, #32
32520     28 14 06 F1 | 	add	arg02, #40
32524     09 16 C6 F9 | 	decod	arg03, #9
32528     60 43 BF FD | 	call	#__system____builtin_memmove
3252c                 | LR__4891
3252c     2C 4E 05 F1 | 	add	fp, #44
32530     A7 2A 02 FB | 	rdlong	local03, fp
32534     09 2A 66 F0 | 	shl	local03, #9
32538     04 4E 85 F1 | 	sub	fp, #4
3253c     A7 2A 62 FC | 	wrlong	local03, fp
32540     28 4E 85 F1 | 	sub	fp, #40
32544                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
32544                 | ' 				}
32544                 | ' 
32544                 | ' 
32544                 | ' 				rcnt =  ((UINT) 512 )  * cc;
32544                 | ' 				continue;
32544     B4 01 90 FD | 	jmp	#LR__4898
32548                 | LR__4892
32548     04 4E 05 F1 | 	add	fp, #4
3254c     A7 2A 02 FB | 	rdlong	local03, fp
32550     1C 2A 06 F1 | 	add	local03, #28
32554     15 2B 02 FB | 	rdlong	local03, local03
32558     1C 4E 05 F1 | 	add	fp, #28
3255c     A7 26 02 FB | 	rdlong	local01, fp
32560     20 4E 85 F1 | 	sub	fp, #32
32564     13 2B 0A F2 | 	cmp	local03, local01 wz
32568     EC 00 90 AD |  if_e	jmp	#LR__4896
3256c     04 4E 05 F1 | 	add	fp, #4
32570     A7 26 02 FB | 	rdlong	local01, fp
32574     04 4E 85 F1 | 	sub	fp, #4
32578     10 26 06 F1 | 	add	local01, #16
3257c     13 2B C2 FA | 	rdbyte	local03, local01
32580     80 2A CE F7 | 	test	local03, #128 wz
32584     7C 00 90 AD |  if_e	jmp	#LR__4894
32588     18 4E 05 F1 | 	add	fp, #24
3258c     A7 26 02 FB | 	rdlong	local01, fp
32590     01 26 06 F1 | 	add	local01, #1
32594     13 13 C2 FA | 	rdbyte	arg01, local01
32598     14 4E 85 F1 | 	sub	fp, #20
3259c     A7 2A 02 FB | 	rdlong	local03, fp
325a0     15 15 02 F6 | 	mov	arg02, local03
325a4     28 14 06 F1 | 	add	arg02, #40
325a8     04 4E 85 F1 | 	sub	fp, #4
325ac     1C 2A 06 F1 | 	add	local03, #28
325b0     15 17 02 FB | 	rdlong	arg03, local03
325b4     01 18 06 F6 | 	mov	arg04, #1
325b8     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
325bc     00 FA 0D F2 | 	cmp	result1, #0 wz
325c0     1C 00 90 AD |  if_e	jmp	#LR__4893
325c4     04 4E 05 F1 | 	add	fp, #4
325c8     A7 2A 02 FB | 	rdlong	local03, fp
325cc     04 4E 85 F1 | 	sub	fp, #4
325d0     11 2A 06 F1 | 	add	local03, #17
325d4     15 03 48 FC | 	wrbyte	#1, local03
325d8     01 FA 05 F6 | 	mov	result1, #1
325dc     A4 01 90 FD | 	jmp	#LR__4900
325e0                 | LR__4893
325e0     04 4E 05 F1 | 	add	fp, #4
325e4     A7 3A 02 FB | 	rdlong	local11, fp
325e8     1D 2B 02 F6 | 	mov	local03, local11
325ec     04 4E 85 F1 | 	sub	fp, #4
325f0     10 3A 06 F1 | 	add	local11, #16
325f4     1D 3B C2 FA | 	rdbyte	local11, local11
325f8     7F 3A 06 F5 | 	and	local11, #127
325fc     10 2A 06 F1 | 	add	local03, #16
32600     15 3B 42 FC | 	wrbyte	local11, local03
32604                 | LR__4894
32604     18 4E 05 F1 | 	add	fp, #24
32608     A7 26 02 FB | 	rdlong	local01, fp
3260c     01 26 06 F1 | 	add	local01, #1
32610     13 13 C2 FA | 	rdbyte	arg01, local01
32614     14 4E 85 F1 | 	sub	fp, #20
32618     A7 14 02 FB | 	rdlong	arg02, fp
3261c     28 14 06 F1 | 	add	arg02, #40
32620     1C 4E 05 F1 | 	add	fp, #28
32624     A7 16 02 FB | 	rdlong	arg03, fp
32628     20 4E 85 F1 | 	sub	fp, #32
3262c     01 18 06 F6 | 	mov	arg04, #1
32630     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
32634     00 FA 0D F2 | 	cmp	result1, #0 wz
32638     1C 00 90 AD |  if_e	jmp	#LR__4895
3263c     04 4E 05 F1 | 	add	fp, #4
32640     A7 2A 02 FB | 	rdlong	local03, fp
32644     04 4E 85 F1 | 	sub	fp, #4
32648     11 2A 06 F1 | 	add	local03, #17
3264c     15 03 48 FC | 	wrbyte	#1, local03
32650     01 FA 05 F6 | 	mov	result1, #1
32654     2C 01 90 FD | 	jmp	#LR__4900
32658                 | LR__4895
32658                 | LR__4896
32658     04 4E 05 F1 | 	add	fp, #4
3265c     A7 2A 02 FB | 	rdlong	local03, fp
32660     1C 4E 05 F1 | 	add	fp, #28
32664     A7 3A 02 FB | 	rdlong	local11, fp
32668     20 4E 85 F1 | 	sub	fp, #32
3266c     1C 2A 06 F1 | 	add	local03, #28
32670     15 3B 62 FC | 	wrlong	local11, local03
32674                 | LR__4897
32674     04 4E 05 F1 | 	add	fp, #4
32678     A7 26 02 FB | 	rdlong	local01, fp
3267c     14 26 06 F1 | 	add	local01, #20
32680     13 3B 02 FB | 	rdlong	local11, local01
32684     FF 3B 06 F5 | 	and	local11, #511
32688     09 2A C6 F9 | 	decod	local03, #9
3268c     1D 2B 82 F1 | 	sub	local03, local11
32690     24 4E 05 F1 | 	add	fp, #36
32694     A7 2A 62 FC | 	wrlong	local03, fp
32698     1C 4E 85 F1 | 	sub	fp, #28
3269c     A7 3A 02 FB | 	rdlong	local11, fp
326a0     0C 4E 85 F1 | 	sub	fp, #12
326a4     1D 2B 1A F2 | 	cmp	local03, local11 wcz
326a8     0C 4E 05 11 |  if_a	add	fp, #12
326ac     A7 2A 02 1B |  if_a	rdlong	local03, fp
326b0     1C 4E 05 11 |  if_a	add	fp, #28
326b4     A7 2A 62 1C |  if_a	wrlong	local03, fp
326b8     28 4E 85 11 |  if_a	sub	fp, #40
326bc     34 4E 05 F1 | 	add	fp, #52
326c0     A7 12 02 FB | 	rdlong	arg01, fp
326c4     30 4E 85 F1 | 	sub	fp, #48
326c8     A7 30 02 FB | 	rdlong	local06, fp
326cc     18 15 02 F6 | 	mov	arg02, local06
326d0     28 14 06 F1 | 	add	arg02, #40
326d4     14 30 06 F1 | 	add	local06, #20
326d8     18 3B 02 FB | 	rdlong	local11, local06
326dc     1D 37 02 F6 | 	mov	local09, local11
326e0     1B 39 02 F6 | 	mov	local10, local09
326e4     FF 39 06 F5 | 	and	local10, #511
326e8     1C 15 02 F1 | 	add	arg02, local10
326ec     24 4E 05 F1 | 	add	fp, #36
326f0     A7 16 02 FB | 	rdlong	arg03, fp
326f4     28 4E 85 F1 | 	sub	fp, #40
326f8     90 41 BF FD | 	call	#__system____builtin_memmove
326fc                 | LR__4898
326fc     0C 4E 05 F1 | 	add	fp, #12
32700     A7 2A 02 FB | 	rdlong	local03, fp
32704     1C 4E 05 F1 | 	add	fp, #28
32708     A7 34 02 FB | 	rdlong	local08, fp
3270c     1A 2B 82 F1 | 	sub	local03, local08
32710     1C 4E 85 F1 | 	sub	fp, #28
32714     A7 2A 62 FC | 	wrlong	local03, fp
32718     04 4E 05 F1 | 	add	fp, #4
3271c     A7 26 02 FB | 	rdlong	local01, fp
32720     13 33 02 FB | 	rdlong	local07, local01
32724     18 4E 05 F1 | 	add	fp, #24
32728     A7 34 02 FB | 	rdlong	local08, fp
3272c     1A 33 02 F1 | 	add	local07, local08
32730     13 33 62 FC | 	wrlong	local07, local01
32734     0C 4E 05 F1 | 	add	fp, #12
32738     A7 2A 02 FB | 	rdlong	local03, fp
3273c     0C 4E 85 F1 | 	sub	fp, #12
32740     A7 3C 02 FB | 	rdlong	local12, fp
32744     1E 2B 02 F1 | 	add	local03, local12
32748     0C 4E 05 F1 | 	add	fp, #12
3274c     A7 2A 62 FC | 	wrlong	local03, fp
32750     30 4E 85 F1 | 	sub	fp, #48
32754     A7 3E 02 FB | 	rdlong	local13, fp
32758     1F 2B 02 F6 | 	mov	local03, local13
3275c     14 3E 06 F1 | 	add	local13, #20
32760     1F 41 02 FB | 	rdlong	local14, local13
32764     24 4E 05 F1 | 	add	fp, #36
32768     A7 30 02 FB | 	rdlong	local06, fp
3276c     28 4E 85 F1 | 	sub	fp, #40
32770     18 41 02 F1 | 	add	local14, local06
32774     14 2A 06 F1 | 	add	local03, #20
32778     15 41 62 FC | 	wrlong	local14, local03
3277c     84 FA 9F FD | 	jmp	#LR__4882
32780                 | LR__4899
32780                 | ' 
32780                 | ' 
32780                 | ' 
32780                 | ' 
32780                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
32780                 | ' 
32780                 | ' 	}
32780                 | ' 
32780                 | ' 	return FR_OK ;
32780     00 FA 05 F6 | 	mov	result1, #0
32784                 | LR__4900
32784     A7 F0 03 F6 | 	mov	ptra, fp
32788     B2 00 A0 FD | 	call	#popregs_
3278c                 | _fatfs_cc_f_read_ret
3278c     2D 00 64 FD | 	ret
32790                 | 
32790                 | _fatfs_cc_f_write
32790     15 4A 05 F6 | 	mov	COUNT_, #21
32794     A8 00 A0 FD | 	call	#pushregs_
32798     34 F0 07 F1 | 	add	ptra, #52
3279c     04 4E 05 F1 | 	add	fp, #4
327a0     A7 12 62 FC | 	wrlong	arg01, fp
327a4     04 4E 05 F1 | 	add	fp, #4
327a8     A7 14 62 FC | 	wrlong	arg02, fp
327ac     04 4E 05 F1 | 	add	fp, #4
327b0     A7 16 62 FC | 	wrlong	arg03, fp
327b4     04 4E 05 F1 | 	add	fp, #4
327b8     A7 18 62 FC | 	wrlong	arg04, fp
327bc     08 4E 85 F1 | 	sub	fp, #8
327c0     A7 FA 01 FB | 	rdlong	result1, fp
327c4     28 4E 05 F1 | 	add	fp, #40
327c8     A7 FA 61 FC | 	wrlong	result1, fp
327cc     20 4E 85 F1 | 	sub	fp, #32
327d0     A7 FA 01 FB | 	rdlong	result1, fp
327d4     FD 00 68 FC | 	wrlong	#0, result1
327d8     0C 4E 85 F1 | 	sub	fp, #12
327dc     A7 12 02 FB | 	rdlong	arg01, fp
327e0     14 4E 05 F1 | 	add	fp, #20
327e4     A7 14 02 F6 | 	mov	arg02, fp
327e8     18 4E 85 F1 | 	sub	fp, #24
327ec     88 F0 BF FD | 	call	#_fatfs_cc_validate
327f0     14 4E 05 F1 | 	add	fp, #20
327f4     A7 FA 61 FC | 	wrlong	result1, fp
327f8     00 FA 4D F2 | 	cmps	result1, #0 wz
327fc     14 4E 85 F1 | 	sub	fp, #20
32800     20 00 90 5D |  if_ne	jmp	#LR__4910
32804     04 4E 05 F1 | 	add	fp, #4
32808     A7 14 02 FB | 	rdlong	arg02, fp
3280c     11 14 06 F1 | 	add	arg02, #17
32810     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
32814     10 4E 05 F1 | 	add	fp, #16
32818     A7 14 62 FC | 	wrlong	arg02, fp
3281c     14 4E 85 F1 | 	sub	fp, #20
32820     10 00 90 AD |  if_e	jmp	#LR__4911
32824                 | LR__4910
32824     14 4E 05 F1 | 	add	fp, #20
32828     A7 FA 01 FB | 	rdlong	result1, fp
3282c     14 4E 85 F1 | 	sub	fp, #20
32830     44 07 90 FD | 	jmp	#LR__4933
32834                 | LR__4911
32834     04 4E 05 F1 | 	add	fp, #4
32838     A7 14 02 FB | 	rdlong	arg02, fp
3283c     04 4E 85 F1 | 	sub	fp, #4
32840     10 14 06 F1 | 	add	arg02, #16
32844     0A 15 C2 FA | 	rdbyte	arg02, arg02
32848     02 14 CE F7 | 	test	arg02, #2 wz
3284c     07 FA 05 A6 |  if_e	mov	result1, #7
32850     24 07 90 AD |  if_e	jmp	#LR__4933
32854     04 4E 05 F1 | 	add	fp, #4
32858     A7 14 02 FB | 	rdlong	arg02, fp
3285c     0A 13 02 F6 | 	mov	arg01, arg02
32860     14 12 06 F1 | 	add	arg01, #20
32864     09 13 02 FB | 	rdlong	arg01, arg01
32868     08 4E 05 F1 | 	add	fp, #8
3286c     A7 FA 01 FB | 	rdlong	result1, fp
32870     FD 12 02 F1 | 	add	arg01, result1
32874     0C 4E 85 F1 | 	sub	fp, #12
32878     14 14 06 F1 | 	add	arg02, #20
3287c     0A FB 01 FB | 	rdlong	result1, arg02
32880     FD 12 12 F2 | 	cmp	arg01, result1 wc
32884     24 00 90 3D |  if_ae	jmp	#LR__4912
32888     04 4E 05 F1 | 	add	fp, #4
3288c     A7 14 02 FB | 	rdlong	arg02, fp
32890     01 FA 65 F6 | 	neg	result1, #1
32894     14 14 06 F1 | 	add	arg02, #20
32898     0A 15 02 FB | 	rdlong	arg02, arg02
3289c     0A FB 81 F1 | 	sub	result1, arg02
328a0     08 4E 05 F1 | 	add	fp, #8
328a4     A7 FA 61 FC | 	wrlong	result1, fp
328a8     0C 4E 85 F1 | 	sub	fp, #12
328ac                 | LR__4912
328ac                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
328ac                 | ' 	}
328ac                 | ' 
328ac                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
328ac                 | LR__4913
328ac     0C 4E 05 F1 | 	add	fp, #12
328b0     A7 FA 01 FB | 	rdlong	result1, fp
328b4     0C 4E 85 F1 | 	sub	fp, #12
328b8     01 FA 15 F2 | 	cmp	result1, #1 wc
328bc     90 06 90 CD |  if_b	jmp	#LR__4932
328c0     04 4E 05 F1 | 	add	fp, #4
328c4     A7 FA 01 FB | 	rdlong	result1, fp
328c8     04 4E 85 F1 | 	sub	fp, #4
328cc     14 FA 05 F1 | 	add	result1, #20
328d0     FD FA 01 FB | 	rdlong	result1, result1
328d4     FF FB CD F7 | 	test	result1, #511 wz
328d8     D8 04 90 5D |  if_ne	jmp	#LR__4928
328dc     04 4E 05 F1 | 	add	fp, #4
328e0     A7 FA 01 FB | 	rdlong	result1, fp
328e4     14 FA 05 F1 | 	add	result1, #20
328e8     FD FA 01 FB | 	rdlong	result1, result1
328ec     09 FA 45 F0 | 	shr	result1, #9
328f0     14 4E 05 F1 | 	add	fp, #20
328f4     A7 14 02 FB | 	rdlong	arg02, fp
328f8     0A 14 06 F1 | 	add	arg02, #10
328fc     0A 19 E2 FA | 	rdword	arg04, arg02
32900     0C 15 32 F9 | 	getword	arg02, arg04, #0
32904     01 14 86 F1 | 	sub	arg02, #1
32908     0A FB 09 F5 | 	and	result1, arg02 wz
3290c     14 4E 05 F1 | 	add	fp, #20
32910     A7 FA 61 FC | 	wrlong	result1, fp
32914     2C 4E 85 F1 | 	sub	fp, #44
32918     44 01 90 5D |  if_ne	jmp	#LR__4919
3291c     04 4E 05 F1 | 	add	fp, #4
32920     A7 FA 01 FB | 	rdlong	result1, fp
32924     04 4E 85 F1 | 	sub	fp, #4
32928     14 FA 05 F1 | 	add	result1, #20
3292c     FD 14 0A FB | 	rdlong	arg02, result1 wz
32930     44 00 90 5D |  if_ne	jmp	#LR__4914
32934     04 4E 05 F1 | 	add	fp, #4
32938     A7 14 02 FB | 	rdlong	arg02, fp
3293c     08 14 06 F1 | 	add	arg02, #8
32940     0A 15 0A FB | 	rdlong	arg02, arg02 wz
32944     18 4E 05 F1 | 	add	fp, #24
32948     A7 14 62 FC | 	wrlong	arg02, fp
3294c     1C 4E 85 F1 | 	sub	fp, #28
32950     4C 00 90 5D |  if_ne	jmp	#LR__4915
32954     04 4E 05 F1 | 	add	fp, #4
32958     A7 12 02 FB | 	rdlong	arg01, fp
3295c     04 4E 85 F1 | 	sub	fp, #4
32960     00 14 06 F6 | 	mov	arg02, #0
32964     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
32968     1C 4E 05 F1 | 	add	fp, #28
3296c     A7 FA 61 FC | 	wrlong	result1, fp
32970     1C 4E 85 F1 | 	sub	fp, #28
32974     28 00 90 FD | 	jmp	#LR__4915
32978                 | LR__4914
32978     04 4E 05 F1 | 	add	fp, #4
3297c     A7 18 02 FB | 	rdlong	arg04, fp
32980     0C 13 02 F6 | 	mov	arg01, arg04
32984     04 4E 85 F1 | 	sub	fp, #4
32988     18 18 06 F1 | 	add	arg04, #24
3298c     0C 15 02 FB | 	rdlong	arg02, arg04
32990     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
32994     1C 4E 05 F1 | 	add	fp, #28
32998     A7 FA 61 FC | 	wrlong	result1, fp
3299c     1C 4E 85 F1 | 	sub	fp, #28
329a0                 | LR__4915
329a0     1C 4E 05 F1 | 	add	fp, #28
329a4     A7 FA 09 FB | 	rdlong	result1, fp wz
329a8     1C 4E 85 F1 | 	sub	fp, #28
329ac     A0 05 90 AD |  if_e	jmp	#LR__4932
329b0     1C 4E 05 F1 | 	add	fp, #28
329b4     A7 FA 01 FB | 	rdlong	result1, fp
329b8     1C 4E 85 F1 | 	sub	fp, #28
329bc     01 FA 0D F2 | 	cmp	result1, #1 wz
329c0     1C 00 90 5D |  if_ne	jmp	#LR__4916
329c4     04 4E 05 F1 | 	add	fp, #4
329c8     A7 FA 01 FB | 	rdlong	result1, fp
329cc     04 4E 85 F1 | 	sub	fp, #4
329d0     11 FA 05 F1 | 	add	result1, #17
329d4     FD 04 48 FC | 	wrbyte	#2, result1
329d8     02 FA 05 F6 | 	mov	result1, #2
329dc     98 05 90 FD | 	jmp	#LR__4933
329e0                 | LR__4916
329e0     1C 4E 05 F1 | 	add	fp, #28
329e4     A7 FA 01 FB | 	rdlong	result1, fp
329e8     1C 4E 85 F1 | 	sub	fp, #28
329ec     FF FF 7F FF 
329f0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
329f4     1C 00 90 5D |  if_ne	jmp	#LR__4917
329f8     04 4E 05 F1 | 	add	fp, #4
329fc     A7 FA 01 FB | 	rdlong	result1, fp
32a00     04 4E 85 F1 | 	sub	fp, #4
32a04     11 FA 05 F1 | 	add	result1, #17
32a08     FD 02 48 FC | 	wrbyte	#1, result1
32a0c     01 FA 05 F6 | 	mov	result1, #1
32a10     64 05 90 FD | 	jmp	#LR__4933
32a14                 | LR__4917
32a14     04 4E 05 F1 | 	add	fp, #4
32a18     A7 FA 01 FB | 	rdlong	result1, fp
32a1c     18 4E 05 F1 | 	add	fp, #24
32a20     A7 18 02 FB | 	rdlong	arg04, fp
32a24     18 FA 05 F1 | 	add	result1, #24
32a28     FD 18 62 FC | 	wrlong	arg04, result1
32a2c     18 4E 85 F1 | 	sub	fp, #24
32a30     A7 FA 01 FB | 	rdlong	result1, fp
32a34     04 4E 85 F1 | 	sub	fp, #4
32a38     08 FA 05 F1 | 	add	result1, #8
32a3c     FD FA 09 FB | 	rdlong	result1, result1 wz
32a40     1C 00 90 5D |  if_ne	jmp	#LR__4918
32a44     04 4E 05 F1 | 	add	fp, #4
32a48     A7 18 02 FB | 	rdlong	arg04, fp
32a4c     18 4E 05 F1 | 	add	fp, #24
32a50     A7 FA 01 FB | 	rdlong	result1, fp
32a54     1C 4E 85 F1 | 	sub	fp, #28
32a58     08 18 06 F1 | 	add	arg04, #8
32a5c     0C FB 61 FC | 	wrlong	result1, arg04
32a60                 | LR__4918
32a60                 | LR__4919
32a60     04 4E 05 F1 | 	add	fp, #4
32a64     A7 18 02 FB | 	rdlong	arg04, fp
32a68     04 4E 85 F1 | 	sub	fp, #4
32a6c     10 18 06 F1 | 	add	arg04, #16
32a70     0C 19 C2 FA | 	rdbyte	arg04, arg04
32a74     80 18 CE F7 | 	test	arg04, #128 wz
32a78     7C 00 90 AD |  if_e	jmp	#LR__4921
32a7c     18 4E 05 F1 | 	add	fp, #24
32a80     A7 18 02 FB | 	rdlong	arg04, fp
32a84     01 18 06 F1 | 	add	arg04, #1
32a88     0C 13 C2 FA | 	rdbyte	arg01, arg04
32a8c     14 4E 85 F1 | 	sub	fp, #20
32a90     A7 18 02 FB | 	rdlong	arg04, fp
32a94     0C 15 02 F6 | 	mov	arg02, arg04
32a98     28 14 06 F1 | 	add	arg02, #40
32a9c     04 4E 85 F1 | 	sub	fp, #4
32aa0     1C 18 06 F1 | 	add	arg04, #28
32aa4     0C 17 02 FB | 	rdlong	arg03, arg04
32aa8     01 18 06 F6 | 	mov	arg04, #1
32aac     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
32ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
32ab4     1C 00 90 AD |  if_e	jmp	#LR__4920
32ab8     04 4E 05 F1 | 	add	fp, #4
32abc     A7 FA 01 FB | 	rdlong	result1, fp
32ac0     04 4E 85 F1 | 	sub	fp, #4
32ac4     11 FA 05 F1 | 	add	result1, #17
32ac8     FD 02 48 FC | 	wrbyte	#1, result1
32acc     01 FA 05 F6 | 	mov	result1, #1
32ad0     A4 04 90 FD | 	jmp	#LR__4933
32ad4                 | LR__4920
32ad4     04 4E 05 F1 | 	add	fp, #4
32ad8     A7 18 02 FB | 	rdlong	arg04, fp
32adc     0C FB 01 F6 | 	mov	result1, arg04
32ae0     04 4E 85 F1 | 	sub	fp, #4
32ae4     10 18 06 F1 | 	add	arg04, #16
32ae8     0C 19 C2 FA | 	rdbyte	arg04, arg04
32aec     7F 18 06 F5 | 	and	arg04, #127
32af0     10 FA 05 F1 | 	add	result1, #16
32af4     FD 18 42 FC | 	wrbyte	arg04, result1
32af8                 | LR__4921
32af8     18 4E 05 F1 | 	add	fp, #24
32afc     A7 12 02 FB | 	rdlong	arg01, fp
32b00     14 4E 85 F1 | 	sub	fp, #20
32b04     A7 14 02 FB | 	rdlong	arg02, fp
32b08     04 4E 85 F1 | 	sub	fp, #4
32b0c     18 14 06 F1 | 	add	arg02, #24
32b10     0A 15 02 FB | 	rdlong	arg02, arg02
32b14     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
32b18     20 4E 05 F1 | 	add	fp, #32
32b1c     A7 FA 61 FC | 	wrlong	result1, fp
32b20     20 4E 85 F1 | 	sub	fp, #32
32b24     00 FA 0D F2 | 	cmp	result1, #0 wz
32b28     1C 00 90 5D |  if_ne	jmp	#LR__4922
32b2c     04 4E 05 F1 | 	add	fp, #4
32b30     A7 FA 01 FB | 	rdlong	result1, fp
32b34     04 4E 85 F1 | 	sub	fp, #4
32b38     11 FA 05 F1 | 	add	result1, #17
32b3c     FD 04 48 FC | 	wrbyte	#2, result1
32b40     02 FA 05 F6 | 	mov	result1, #2
32b44     30 04 90 FD | 	jmp	#LR__4933
32b48                 | LR__4922
32b48     20 4E 05 F1 | 	add	fp, #32
32b4c     A7 FA 01 FB | 	rdlong	result1, fp
32b50     0C 4E 05 F1 | 	add	fp, #12
32b54     A7 26 02 FB | 	rdlong	local01, fp
32b58     13 FB 01 F1 | 	add	result1, local01
32b5c     0C 4E 85 F1 | 	sub	fp, #12
32b60     A7 FA 61 FC | 	wrlong	result1, fp
32b64     14 4E 85 F1 | 	sub	fp, #20
32b68     A7 FA 01 FB | 	rdlong	result1, fp
32b6c     09 FA 45 F0 | 	shr	result1, #9
32b70     1C 4E 05 F1 | 	add	fp, #28
32b74     A7 FA 61 FC | 	wrlong	result1, fp
32b78     28 4E 85 F1 | 	sub	fp, #40
32b7c     01 FA 15 F2 | 	cmp	result1, #1 wc
32b80     60 01 90 CD |  if_b	jmp	#LR__4926
32b84     2C 4E 05 F1 | 	add	fp, #44
32b88     A7 FA 01 FB | 	rdlong	result1, fp
32b8c     04 4E 85 F1 | 	sub	fp, #4
32b90     A7 18 02 FB | 	rdlong	arg04, fp
32b94     0C FB 01 F1 | 	add	result1, arg04
32b98     10 4E 85 F1 | 	sub	fp, #16
32b9c     A7 18 02 FB | 	rdlong	arg04, fp
32ba0     18 4E 85 F1 | 	sub	fp, #24
32ba4     0A 18 06 F1 | 	add	arg04, #10
32ba8     0C 19 E2 FA | 	rdword	arg04, arg04
32bac     0C FB 19 F2 | 	cmp	result1, arg04 wcz
32bb0     28 00 90 ED |  if_be	jmp	#LR__4923
32bb4     18 4E 05 F1 | 	add	fp, #24
32bb8     A7 FA 01 FB | 	rdlong	result1, fp
32bbc     0A FA 05 F1 | 	add	result1, #10
32bc0     FD FA E1 FA | 	rdword	result1, result1
32bc4     14 4E 05 F1 | 	add	fp, #20
32bc8     A7 18 02 FB | 	rdlong	arg04, fp
32bcc     0C FB 81 F1 | 	sub	result1, arg04
32bd0     04 4E 85 F1 | 	sub	fp, #4
32bd4     A7 FA 61 FC | 	wrlong	result1, fp
32bd8     28 4E 85 F1 | 	sub	fp, #40
32bdc                 | LR__4923
32bdc     18 4E 05 F1 | 	add	fp, #24
32be0     A7 18 02 FB | 	rdlong	arg04, fp
32be4     01 18 06 F1 | 	add	arg04, #1
32be8     0C 13 C2 FA | 	rdbyte	arg01, arg04
32bec     18 4E 05 F1 | 	add	fp, #24
32bf0     A7 14 02 FB | 	rdlong	arg02, fp
32bf4     10 4E 85 F1 | 	sub	fp, #16
32bf8     A7 16 02 FB | 	rdlong	arg03, fp
32bfc     08 4E 05 F1 | 	add	fp, #8
32c00     A7 18 02 FB | 	rdlong	arg04, fp
32c04     28 4E 85 F1 | 	sub	fp, #40
32c08     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
32c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
32c10     1C 00 90 AD |  if_e	jmp	#LR__4924
32c14     04 4E 05 F1 | 	add	fp, #4
32c18     A7 26 02 FB | 	rdlong	local01, fp
32c1c     04 4E 85 F1 | 	sub	fp, #4
32c20     11 26 06 F1 | 	add	local01, #17
32c24     13 03 48 FC | 	wrbyte	#1, local01
32c28     01 FA 05 F6 | 	mov	result1, #1
32c2c     48 03 90 FD | 	jmp	#LR__4933
32c30                 | LR__4924
32c30     04 4E 05 F1 | 	add	fp, #4
32c34     A7 FA 01 FB | 	rdlong	result1, fp
32c38     1C FA 05 F1 | 	add	result1, #28
32c3c     FD FA 01 FB | 	rdlong	result1, result1
32c40     1C 4E 05 F1 | 	add	fp, #28
32c44     A7 28 02 FB | 	rdlong	local02, fp
32c48     14 FB 81 F1 | 	sub	result1, local02
32c4c     08 4E 05 F1 | 	add	fp, #8
32c50     A7 18 02 FB | 	rdlong	arg04, fp
32c54     28 4E 85 F1 | 	sub	fp, #40
32c58     0C FB 11 F2 | 	cmp	result1, arg04 wc
32c5c     68 00 90 3D |  if_ae	jmp	#LR__4925
32c60     04 4E 05 F1 | 	add	fp, #4
32c64     A7 12 02 FB | 	rdlong	arg01, fp
32c68     28 12 06 F1 | 	add	arg01, #40
32c6c     2C 4E 05 F1 | 	add	fp, #44
32c70     A7 14 02 FB | 	rdlong	arg02, fp
32c74     2C 4E 85 F1 | 	sub	fp, #44
32c78     A7 FA 01 FB | 	rdlong	result1, fp
32c7c     1C FA 05 F1 | 	add	result1, #28
32c80     FD 2A 02 FB | 	rdlong	local03, result1
32c84     1C 4E 05 F1 | 	add	fp, #28
32c88     A7 18 02 FB | 	rdlong	arg04, fp
32c8c     20 4E 85 F1 | 	sub	fp, #32
32c90     0C 2B 82 F1 | 	sub	local03, arg04
32c94     09 2A 66 F0 | 	shl	local03, #9
32c98     15 15 02 F1 | 	add	arg02, local03
32c9c     09 16 C6 F9 | 	decod	arg03, #9
32ca0     E8 3B BF FD | 	call	#__system____builtin_memmove
32ca4     04 4E 05 F1 | 	add	fp, #4
32ca8     A7 18 02 FB | 	rdlong	arg04, fp
32cac     0C FB 01 F6 | 	mov	result1, arg04
32cb0     04 4E 85 F1 | 	sub	fp, #4
32cb4     10 18 06 F1 | 	add	arg04, #16
32cb8     0C 19 C2 FA | 	rdbyte	arg04, arg04
32cbc     7F 18 06 F5 | 	and	arg04, #127
32cc0     10 FA 05 F1 | 	add	result1, #16
32cc4     FD 18 42 FC | 	wrbyte	arg04, result1
32cc8                 | LR__4925
32cc8     28 4E 05 F1 | 	add	fp, #40
32ccc     A7 FA 01 FB | 	rdlong	result1, fp
32cd0     09 FA 65 F0 | 	shl	result1, #9
32cd4     04 4E 85 F1 | 	sub	fp, #4
32cd8     A7 FA 61 FC | 	wrlong	result1, fp
32cdc     24 4E 85 F1 | 	sub	fp, #36
32ce0                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
32ce0                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
32ce0                 | ' 				}
32ce0                 | ' 
32ce0                 | ' 
32ce0                 | ' 				wcnt =  ((UINT) 512 )  * cc;
32ce0                 | ' 				continue;
32ce0     74 01 90 FD | 	jmp	#LR__4929
32ce4                 | LR__4926
32ce4     04 4E 05 F1 | 	add	fp, #4
32ce8     A7 28 02 FB | 	rdlong	local02, fp
32cec     1C 28 06 F1 | 	add	local02, #28
32cf0     14 FB 01 FB | 	rdlong	result1, local02
32cf4     1C 4E 05 F1 | 	add	fp, #28
32cf8     A7 28 02 FB | 	rdlong	local02, fp
32cfc     20 4E 85 F1 | 	sub	fp, #32
32d00     14 FB 09 F2 | 	cmp	result1, local02 wz
32d04     90 00 90 AD |  if_e	jmp	#LR__4927
32d08     04 4E 05 F1 | 	add	fp, #4
32d0c     A7 FA 01 FB | 	rdlong	result1, fp
32d10     FD 2A 02 F6 | 	mov	local03, result1
32d14     04 4E 85 F1 | 	sub	fp, #4
32d18     14 2A 06 F1 | 	add	local03, #20
32d1c     15 2B 02 FB | 	rdlong	local03, local03
32d20     0C FA 05 F1 | 	add	result1, #12
32d24     FD 2C 02 FB | 	rdlong	local04, result1
32d28     16 2F 02 F6 | 	mov	local05, local04
32d2c     17 2B 12 F2 | 	cmp	local03, local05 wc
32d30     64 00 90 3D |  if_ae	jmp	#LR__4927
32d34     18 4E 05 F1 | 	add	fp, #24
32d38     A7 18 02 FB | 	rdlong	arg04, fp
32d3c     01 18 06 F1 | 	add	arg04, #1
32d40     0C 13 C2 FA | 	rdbyte	arg01, arg04
32d44     14 4E 85 F1 | 	sub	fp, #20
32d48     A7 30 02 FB | 	rdlong	local06, fp
32d4c     28 30 06 F1 | 	add	local06, #40
32d50     18 33 02 F6 | 	mov	local07, local06
32d54     1C 4E 05 F1 | 	add	fp, #28
32d58     A7 34 02 FB | 	rdlong	local08, fp
32d5c     20 4E 85 F1 | 	sub	fp, #32
32d60     01 36 06 F6 | 	mov	local09, #1
32d64     19 15 02 F6 | 	mov	arg02, local07
32d68     1A 17 02 F6 | 	mov	arg03, local08
32d6c     01 18 06 F6 | 	mov	arg04, #1
32d70     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
32d74     FD 38 0A F6 | 	mov	local10, result1 wz
32d78     1C 00 90 AD |  if_e	jmp	#LR__4927
32d7c     04 4E 05 F1 | 	add	fp, #4
32d80     A7 38 02 FB | 	rdlong	local10, fp
32d84     04 4E 85 F1 | 	sub	fp, #4
32d88     11 38 06 F1 | 	add	local10, #17
32d8c     1C 03 48 FC | 	wrbyte	#1, local10
32d90                 | ' 				fp->fptr < fp->obj.objsize &&
32d90                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
32d90                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
32d90     01 FA 05 F6 | 	mov	result1, #1
32d94     E0 01 90 FD | 	jmp	#LR__4933
32d98                 | LR__4927
32d98     04 4E 05 F1 | 	add	fp, #4
32d9c     A7 18 02 FB | 	rdlong	arg04, fp
32da0     1C 4E 05 F1 | 	add	fp, #28
32da4     A7 FA 01 FB | 	rdlong	result1, fp
32da8     20 4E 85 F1 | 	sub	fp, #32
32dac     1C 18 06 F1 | 	add	arg04, #28
32db0     0C FB 61 FC | 	wrlong	result1, arg04
32db4                 | LR__4928
32db4     04 4E 05 F1 | 	add	fp, #4
32db8     A7 FA 01 FB | 	rdlong	result1, fp
32dbc     14 FA 05 F1 | 	add	result1, #20
32dc0     FD FA 01 FB | 	rdlong	result1, result1
32dc4     FF FB 05 F5 | 	and	result1, #511
32dc8     09 3A C6 F9 | 	decod	local11, #9
32dcc     FD 3A 82 F1 | 	sub	local11, result1
32dd0     20 4E 05 F1 | 	add	fp, #32
32dd4     A7 3A 62 FC | 	wrlong	local11, fp
32dd8     18 4E 85 F1 | 	sub	fp, #24
32ddc     A7 FA 01 FB | 	rdlong	result1, fp
32de0     0C 4E 85 F1 | 	sub	fp, #12
32de4     FD 3A 1A F2 | 	cmp	local11, result1 wcz
32de8     0C 4E 05 11 |  if_a	add	fp, #12
32dec     A7 3A 02 1B |  if_a	rdlong	local11, fp
32df0     18 4E 05 11 |  if_a	add	fp, #24
32df4     A7 3A 62 1C |  if_a	wrlong	local11, fp
32df8     24 4E 85 11 |  if_a	sub	fp, #36
32dfc     04 4E 05 F1 | 	add	fp, #4
32e00     A7 3A 02 FB | 	rdlong	local11, fp
32e04     1D 13 02 F6 | 	mov	arg01, local11
32e08     28 12 06 F1 | 	add	arg01, #40
32e0c     14 3A 06 F1 | 	add	local11, #20
32e10     1D 3B 02 FB | 	rdlong	local11, local11
32e14     FF 3B 06 F5 | 	and	local11, #511
32e18     1D 13 02 F1 | 	add	arg01, local11
32e1c     2C 4E 05 F1 | 	add	fp, #44
32e20     A7 14 02 FB | 	rdlong	arg02, fp
32e24     0C 4E 85 F1 | 	sub	fp, #12
32e28     A7 16 02 FB | 	rdlong	arg03, fp
32e2c     24 4E 85 F1 | 	sub	fp, #36
32e30     58 3A BF FD | 	call	#__system____builtin_memmove
32e34     04 4E 05 F1 | 	add	fp, #4
32e38     A7 FA 01 FB | 	rdlong	result1, fp
32e3c     FD 3A 02 F6 | 	mov	local11, result1
32e40     04 4E 85 F1 | 	sub	fp, #4
32e44     10 FA 05 F1 | 	add	result1, #16
32e48     FD FA C1 FA | 	rdbyte	result1, result1
32e4c     80 FA 45 F5 | 	or	result1, #128
32e50     10 3A 06 F1 | 	add	local11, #16
32e54     1D FB 41 FC | 	wrbyte	result1, local11
32e58                 | LR__4929
32e58     0C 4E 05 F1 | 	add	fp, #12
32e5c     A7 3A 02 FB | 	rdlong	local11, fp
32e60     18 4E 05 F1 | 	add	fp, #24
32e64     A7 FA 01 FB | 	rdlong	result1, fp
32e68     FD 3A 82 F1 | 	sub	local11, result1
32e6c     18 4E 85 F1 | 	sub	fp, #24
32e70     A7 3A 62 FC | 	wrlong	local11, fp
32e74     04 4E 05 F1 | 	add	fp, #4
32e78     A7 3C 02 FB | 	rdlong	local12, fp
32e7c     1E 3B 02 FB | 	rdlong	local11, local12
32e80     14 4E 05 F1 | 	add	fp, #20
32e84     A7 3E 02 FB | 	rdlong	local13, fp
32e88     1F 3B 02 F1 | 	add	local11, local13
32e8c     1E 3B 62 FC | 	wrlong	local11, local12
32e90     0C 4E 05 F1 | 	add	fp, #12
32e94     A7 3A 02 FB | 	rdlong	local11, fp
32e98     0C 4E 85 F1 | 	sub	fp, #12
32e9c     A7 40 02 FB | 	rdlong	local14, fp
32ea0     20 3B 02 F1 | 	add	local11, local14
32ea4     0C 4E 05 F1 | 	add	fp, #12
32ea8     A7 3A 62 FC | 	wrlong	local11, fp
32eac     2C 4E 85 F1 | 	sub	fp, #44
32eb0     A7 42 02 FB | 	rdlong	local15, fp
32eb4     21 3B 02 F6 | 	mov	local11, local15
32eb8     14 42 06 F1 | 	add	local15, #20
32ebc     21 43 02 FB | 	rdlong	local15, local15
32ec0     20 4E 05 F1 | 	add	fp, #32
32ec4     A7 44 02 FB | 	rdlong	local16, fp
32ec8     22 43 02 F1 | 	add	local15, local16
32ecc     14 3A 06 F1 | 	add	local11, #20
32ed0     1D 43 62 FC | 	wrlong	local15, local11
32ed4     20 4E 85 F1 | 	sub	fp, #32
32ed8     A7 46 02 FB | 	rdlong	local17, fp
32edc     23 3B 02 F6 | 	mov	local11, local17
32ee0     23 49 02 F6 | 	mov	local18, local17
32ee4     04 4E 85 F1 | 	sub	fp, #4
32ee8     14 46 06 F1 | 	add	local17, #20
32eec     23 4B 02 FB | 	rdlong	local19, local17
32ef0     0C 48 06 F1 | 	add	local18, #12
32ef4     24 4D 02 FB | 	rdlong	local20, local18
32ef8     26 4B 1A F2 | 	cmp	local19, local20 wcz
32efc     24 00 90 ED |  if_be	jmp	#LR__4930
32f00     04 4E 05 F1 | 	add	fp, #4
32f04     A7 2E 02 FB | 	rdlong	local05, fp
32f08     04 4E 85 F1 | 	sub	fp, #4
32f0c     17 2B 02 F6 | 	mov	local03, local05
32f10     14 2A 06 F1 | 	add	local03, #20
32f14     15 2D 02 FB | 	rdlong	local04, local03
32f18     14 2A 86 F1 | 	sub	local03, #20
32f1c     16 4F 02 F6 | 	mov	local21, local04
32f20     20 00 90 FD | 	jmp	#LR__4931
32f24                 | LR__4930
32f24     04 4E 05 F1 | 	add	fp, #4
32f28     A7 32 02 FB | 	rdlong	local07, fp
32f2c     04 4E 85 F1 | 	sub	fp, #4
32f30     19 39 02 F6 | 	mov	local10, local07
32f34     0C 38 06 F1 | 	add	local10, #12
32f38     1C 35 02 FB | 	rdlong	local08, local10
32f3c     0C 38 86 F1 | 	sub	local10, #12
32f40     1A 4F 02 F6 | 	mov	local21, local08
32f44                 | LR__4931
32f44     0C 3A 06 F1 | 	add	local11, #12
32f48     1D 4F 62 FC | 	wrlong	local21, local11
32f4c     5C F9 9F FD | 	jmp	#LR__4913
32f50                 | LR__4932
32f50     04 4E 05 F1 | 	add	fp, #4
32f54     A7 3C 02 FB | 	rdlong	local12, fp
32f58     1E 27 02 F6 | 	mov	local01, local12
32f5c     04 4E 85 F1 | 	sub	fp, #4
32f60     10 3C 06 F1 | 	add	local12, #16
32f64     1E 3B C2 FA | 	rdbyte	local11, local12
32f68     40 3A 46 F5 | 	or	local11, #64
32f6c     10 26 06 F1 | 	add	local01, #16
32f70     13 3B 42 FC | 	wrbyte	local11, local01
32f74                 | ' 
32f74                 | ' 
32f74                 | ' 
32f74                 | ' 
32f74                 | ' 
32f74                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
32f74                 | ' 		fp->flag |=  0x80 ;
32f74                 | ' 
32f74                 | ' 	}
32f74                 | ' 
32f74                 | ' 	fp->flag |=  0x40 ;
32f74                 | ' 
32f74                 | ' 	return FR_OK ;
32f74     00 FA 05 F6 | 	mov	result1, #0
32f78                 | LR__4933
32f78     A7 F0 03 F6 | 	mov	ptra, fp
32f7c     B2 00 A0 FD | 	call	#popregs_
32f80                 | _fatfs_cc_f_write_ret
32f80     2D 00 64 FD | 	ret
32f84                 | 
32f84                 | _fatfs_cc_f_sync
32f84     00 4A 05 F6 | 	mov	COUNT_, #0
32f88     A8 00 A0 FD | 	call	#pushregs_
32f8c     18 F0 07 F1 | 	add	ptra, #24
32f90     04 4E 05 F1 | 	add	fp, #4
32f94     A7 12 62 FC | 	wrlong	arg01, fp
32f98     08 4E 05 F1 | 	add	fp, #8
32f9c     A7 14 02 F6 | 	mov	arg02, fp
32fa0     0C 4E 85 F1 | 	sub	fp, #12
32fa4     D0 E8 BF FD | 	call	#_fatfs_cc_validate
32fa8     08 4E 05 F1 | 	add	fp, #8
32fac     A7 FA 61 FC | 	wrlong	result1, fp
32fb0     08 4E 85 F1 | 	sub	fp, #8
32fb4     00 FA 0D F2 | 	cmp	result1, #0 wz
32fb8     C0 01 90 5D |  if_ne	jmp	#LR__4943
32fbc     04 4E 05 F1 | 	add	fp, #4
32fc0     A7 18 02 FB | 	rdlong	arg04, fp
32fc4     04 4E 85 F1 | 	sub	fp, #4
32fc8     10 18 06 F1 | 	add	arg04, #16
32fcc     0C 19 C2 FA | 	rdbyte	arg04, arg04
32fd0     40 18 CE F7 | 	test	arg04, #64 wz
32fd4     A4 01 90 AD |  if_e	jmp	#LR__4942
32fd8     04 4E 05 F1 | 	add	fp, #4
32fdc     A7 18 02 FB | 	rdlong	arg04, fp
32fe0     04 4E 85 F1 | 	sub	fp, #4
32fe4     10 18 06 F1 | 	add	arg04, #16
32fe8     0C 19 C2 FA | 	rdbyte	arg04, arg04
32fec     80 18 CE F7 | 	test	arg04, #128 wz
32ff0     64 00 90 AD |  if_e	jmp	#LR__4940
32ff4     0C 4E 05 F1 | 	add	fp, #12
32ff8     A7 18 02 FB | 	rdlong	arg04, fp
32ffc     01 18 06 F1 | 	add	arg04, #1
33000     0C 13 C2 FA | 	rdbyte	arg01, arg04
33004     08 4E 85 F1 | 	sub	fp, #8
33008     A7 18 02 FB | 	rdlong	arg04, fp
3300c     0C 15 02 F6 | 	mov	arg02, arg04
33010     28 14 06 F1 | 	add	arg02, #40
33014     04 4E 85 F1 | 	sub	fp, #4
33018     1C 18 06 F1 | 	add	arg04, #28
3301c     0C 17 02 FB | 	rdlong	arg03, arg04
33020     01 18 06 F6 | 	mov	arg04, #1
33024     0C AE BF FD | 	call	#_fatfs_cc_disk_write
33028     00 FA 0D F2 | 	cmp	result1, #0 wz
3302c     01 FA 05 56 |  if_ne	mov	result1, #1
33030     54 01 90 5D |  if_ne	jmp	#LR__4944
33034     04 4E 05 F1 | 	add	fp, #4
33038     A7 18 02 FB | 	rdlong	arg04, fp
3303c     0C 17 02 F6 | 	mov	arg03, arg04
33040     04 4E 85 F1 | 	sub	fp, #4
33044     10 18 06 F1 | 	add	arg04, #16
33048     0C 19 C2 FA | 	rdbyte	arg04, arg04
3304c     7F 18 06 F5 | 	and	arg04, #127
33050     10 16 06 F1 | 	add	arg03, #16
33054     0B 19 42 FC | 	wrbyte	arg04, arg03
33058                 | LR__4940
33058     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
3305c     10 4E 05 F1 | 	add	fp, #16
33060     A7 FA 61 FC | 	wrlong	result1, fp
33064     04 4E 85 F1 | 	sub	fp, #4
33068     A7 12 02 FB | 	rdlong	arg01, fp
3306c     08 4E 85 F1 | 	sub	fp, #8
33070     A7 18 02 FB | 	rdlong	arg04, fp
33074     04 4E 85 F1 | 	sub	fp, #4
33078     20 18 06 F1 | 	add	arg04, #32
3307c     0C 15 02 FB | 	rdlong	arg02, arg04
33080     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
33084     08 4E 05 F1 | 	add	fp, #8
33088     A7 FA 61 FC | 	wrlong	result1, fp
3308c     08 4E 85 F1 | 	sub	fp, #8
33090     00 FA 0D F2 | 	cmp	result1, #0 wz
33094     E4 00 90 5D |  if_ne	jmp	#LR__4941
33098     04 4E 05 F1 | 	add	fp, #4
3309c     A7 18 02 FB | 	rdlong	arg04, fp
330a0     24 18 06 F1 | 	add	arg04, #36
330a4     0C 19 02 FB | 	rdlong	arg04, arg04
330a8     10 4E 05 F1 | 	add	fp, #16
330ac     A7 18 62 FC | 	wrlong	arg04, fp
330b0     0C 17 02 F6 | 	mov	arg03, arg04
330b4     0B 16 06 F1 | 	add	arg03, #11
330b8     0B 17 C2 FA | 	rdbyte	arg03, arg03
330bc     20 16 46 F5 | 	or	arg03, #32
330c0     0B 18 06 F1 | 	add	arg04, #11
330c4     0C 17 42 FC | 	wrbyte	arg03, arg04
330c8     10 4E 85 F1 | 	sub	fp, #16
330cc     A7 18 02 FB | 	rdlong	arg04, fp
330d0     0C 13 02 FB | 	rdlong	arg01, arg04
330d4     10 4E 05 F1 | 	add	fp, #16
330d8     A7 14 02 FB | 	rdlong	arg02, fp
330dc     14 4E 85 F1 | 	sub	fp, #20
330e0     08 18 06 F1 | 	add	arg04, #8
330e4     0C 17 02 FB | 	rdlong	arg03, arg04
330e8     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
330ec     14 4E 05 F1 | 	add	fp, #20
330f0     A7 12 02 FB | 	rdlong	arg01, fp
330f4     1C 12 06 F1 | 	add	arg01, #28
330f8     10 4E 85 F1 | 	sub	fp, #16
330fc     A7 18 02 FB | 	rdlong	arg04, fp
33100     0C 18 06 F1 | 	add	arg04, #12
33104     0C 15 02 FB | 	rdlong	arg02, arg04
33108     09 15 62 FC | 	wrlong	arg02, arg01
3310c     10 4E 05 F1 | 	add	fp, #16
33110     A7 12 02 FB | 	rdlong	arg01, fp
33114     16 12 06 F1 | 	add	arg01, #22
33118     04 4E 85 F1 | 	sub	fp, #4
3311c     A7 14 02 FB | 	rdlong	arg02, fp
33120     09 15 62 FC | 	wrlong	arg02, arg01
33124     04 4E 05 F1 | 	add	fp, #4
33128     A7 12 02 FB | 	rdlong	arg01, fp
3312c     12 12 06 F1 | 	add	arg01, #18
33130     09 01 58 FC | 	wrword	#0, arg01
33134     08 4E 85 F1 | 	sub	fp, #8
33138     A7 18 02 FB | 	rdlong	arg04, fp
3313c     03 18 06 F1 | 	add	arg04, #3
33140     0C 03 48 FC | 	wrbyte	#1, arg04
33144     A7 12 02 FB | 	rdlong	arg01, fp
33148     0C 4E 85 F1 | 	sub	fp, #12
3314c     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
33150     08 4E 05 F1 | 	add	fp, #8
33154     A7 FA 61 FC | 	wrlong	result1, fp
33158     04 4E 85 F1 | 	sub	fp, #4
3315c     A7 18 02 FB | 	rdlong	arg04, fp
33160     0C 17 02 F6 | 	mov	arg03, arg04
33164     04 4E 85 F1 | 	sub	fp, #4
33168     10 18 06 F1 | 	add	arg04, #16
3316c     0C 19 C2 FA | 	rdbyte	arg04, arg04
33170     BF 18 06 F5 | 	and	arg04, #191
33174     10 16 06 F1 | 	add	arg03, #16
33178     0B 19 42 FC | 	wrbyte	arg04, arg03
3317c                 | LR__4941
3317c                 | LR__4942
3317c                 | LR__4943
3317c                 | ' 					dir = fp->dir_ptr;
3317c                 | ' 					dir[ 11 ] |=  0x20 ;
3317c                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
3317c                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
3317c                 | ' 					st_dword(dir +  22 , tm);
3317c                 | ' 					st_word(dir +  18 , 0);
3317c                 | ' 					fs->wflag = 1;
3317c                 | ' 					res = sync_fs(fs);
3317c                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
3317c                 | ' 				}
3317c                 | ' 			}
3317c                 | ' 		}
3317c                 | ' 	}
3317c                 | ' 
3317c                 | ' 	return res ;
3317c     08 4E 05 F1 | 	add	fp, #8
33180     A7 FA 01 FB | 	rdlong	result1, fp
33184     08 4E 85 F1 | 	sub	fp, #8
33188                 | LR__4944
33188     A7 F0 03 F6 | 	mov	ptra, fp
3318c     B2 00 A0 FD | 	call	#popregs_
33190                 | _fatfs_cc_f_sync_ret
33190     2D 00 64 FD | 	ret
33194                 | 
33194                 | _fatfs_cc_f_close
33194     01 4A 05 F6 | 	mov	COUNT_, #1
33198     A8 00 A0 FD | 	call	#pushregs_
3319c     10 F0 07 F1 | 	add	ptra, #16
331a0     04 4E 05 F1 | 	add	fp, #4
331a4     A7 12 62 FC | 	wrlong	arg01, fp
331a8     04 4E 85 F1 | 	sub	fp, #4
331ac     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
331b0     08 4E 05 F1 | 	add	fp, #8
331b4     A7 FA 61 FC | 	wrlong	result1, fp
331b8     08 4E 85 F1 | 	sub	fp, #8
331bc     00 FA 0D F2 | 	cmp	result1, #0 wz
331c0     38 00 90 5D |  if_ne	jmp	#LR__4950
331c4     04 4E 05 F1 | 	add	fp, #4
331c8     A7 12 02 FB | 	rdlong	arg01, fp
331cc     08 4E 05 F1 | 	add	fp, #8
331d0     A7 14 02 F6 | 	mov	arg02, fp
331d4     0C 4E 85 F1 | 	sub	fp, #12
331d8     9C E6 BF FD | 	call	#_fatfs_cc_validate
331dc     08 4E 05 F1 | 	add	fp, #8
331e0     A7 FA 61 FC | 	wrlong	result1, fp
331e4     08 4E 85 F1 | 	sub	fp, #8
331e8     00 FA 0D F2 | 	cmp	result1, #0 wz
331ec     04 4E 05 A1 |  if_e	add	fp, #4
331f0     A7 26 02 AB |  if_e	rdlong	local01, fp
331f4     04 4E 85 A1 |  if_e	sub	fp, #4
331f8     13 01 68 AC |  if_e	wrlong	#0, local01
331fc                 | LR__4950
331fc                 | ' 
331fc                 | ' 
331fc                 | ' 
331fc                 | ' 
331fc                 | ' 			fp->obj.fs = 0;
331fc                 | ' #line 4192 "ff.c"
331fc                 | ' 		}
331fc                 | ' 	}
331fc                 | ' 	return res;
331fc     08 4E 05 F1 | 	add	fp, #8
33200     A7 FA 01 FB | 	rdlong	result1, fp
33204     08 4E 85 F1 | 	sub	fp, #8
33208     A7 F0 03 F6 | 	mov	ptra, fp
3320c     B2 00 A0 FD | 	call	#popregs_
33210                 | _fatfs_cc_f_close_ret
33210     2D 00 64 FD | 	ret
33214                 | 
33214                 | _fatfs_cc_f_lseek
33214     00 4A 05 F6 | 	mov	COUNT_, #0
33218     A8 00 A0 FD | 	call	#pushregs_
3321c     24 F0 07 F1 | 	add	ptra, #36
33220     04 4E 05 F1 | 	add	fp, #4
33224     A7 12 62 FC | 	wrlong	arg01, fp
33228     04 4E 05 F1 | 	add	fp, #4
3322c     A7 14 62 FC | 	wrlong	arg02, fp
33230     04 4E 85 F1 | 	sub	fp, #4
33234     A7 12 02 FB | 	rdlong	arg01, fp
33238     0C 4E 05 F1 | 	add	fp, #12
3323c     A7 14 02 F6 | 	mov	arg02, fp
33240     10 4E 85 F1 | 	sub	fp, #16
33244     30 E6 BF FD | 	call	#_fatfs_cc_validate
33248     0C 4E 05 F1 | 	add	fp, #12
3324c     A7 FA 61 FC | 	wrlong	result1, fp
33250     0C 4E 85 F1 | 	sub	fp, #12
33254     00 FA 0D F2 | 	cmp	result1, #0 wz
33258     1C 00 90 5D |  if_ne	jmp	#LR__4960
3325c     04 4E 05 F1 | 	add	fp, #4
33260     A7 18 02 FB | 	rdlong	arg04, fp
33264     11 18 06 F1 | 	add	arg04, #17
33268     0C 19 C2 FA | 	rdbyte	arg04, arg04
3326c     08 4E 05 F1 | 	add	fp, #8
33270     A7 18 62 FC | 	wrlong	arg04, fp
33274     0C 4E 85 F1 | 	sub	fp, #12
33278                 | LR__4960
33278     0C 4E 05 F1 | 	add	fp, #12
3327c     A7 18 0A FB | 	rdlong	arg04, fp wz
33280     0C 4E 85 F1 | 	sub	fp, #12
33284     0C 4E 05 51 |  if_ne	add	fp, #12
33288     A7 FA 01 5B |  if_ne	rdlong	result1, fp
3328c     0C 4E 85 51 |  if_ne	sub	fp, #12
33290     40 06 90 5D |  if_ne	jmp	#LR__4983
33294     04 4E 05 F1 | 	add	fp, #4
33298     A7 18 02 FB | 	rdlong	arg04, fp
3329c     04 4E 05 F1 | 	add	fp, #4
332a0     A7 16 02 FB | 	rdlong	arg03, fp
332a4     08 4E 85 F1 | 	sub	fp, #8
332a8     0C 18 06 F1 | 	add	arg04, #12
332ac     0C 19 02 FB | 	rdlong	arg04, arg04
332b0     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
332b4     3C 00 90 ED |  if_be	jmp	#LR__4961
332b8     04 4E 05 F1 | 	add	fp, #4
332bc     A7 16 02 FB | 	rdlong	arg03, fp
332c0     04 4E 85 F1 | 	sub	fp, #4
332c4     10 16 06 F1 | 	add	arg03, #16
332c8     0B 17 C2 FA | 	rdbyte	arg03, arg03
332cc     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
332d0     02 16 CE F7 | 	test	arg03, #2 wz
332d4     1C 00 90 5D |  if_ne	jmp	#LR__4961
332d8     04 4E 05 F1 | 	add	fp, #4
332dc     A7 16 02 FB | 	rdlong	arg03, fp
332e0     0C 16 06 F1 | 	add	arg03, #12
332e4     0B 17 02 FB | 	rdlong	arg03, arg03
332e8     04 4E 05 F1 | 	add	fp, #4
332ec     A7 16 62 FC | 	wrlong	arg03, fp
332f0     08 4E 85 F1 | 	sub	fp, #8
332f4                 | LR__4961
332f4     04 4E 05 F1 | 	add	fp, #4
332f8     A7 16 02 FB | 	rdlong	arg03, fp
332fc     14 16 06 F1 | 	add	arg03, #20
33300     0B 17 02 FB | 	rdlong	arg03, arg03
33304     1C 4E 05 F1 | 	add	fp, #28
33308     A7 16 62 FC | 	wrlong	arg03, fp
3330c     1C 4E 85 F1 | 	sub	fp, #28
33310     A7 16 02 FB | 	rdlong	arg03, fp
33314     18 4E 05 F1 | 	add	fp, #24
33318     A7 00 68 FC | 	wrlong	#0, fp
3331c     14 16 06 F1 | 	add	arg03, #20
33320     0B 01 68 FC | 	wrlong	#0, arg03
33324     14 4E 85 F1 | 	sub	fp, #20
33328     A7 16 02 FB | 	rdlong	arg03, fp
3332c     08 4E 85 F1 | 	sub	fp, #8
33330     01 16 16 F2 | 	cmp	arg03, #1 wc
33334     E4 03 90 CD |  if_b	jmp	#LR__4977
33338     10 4E 05 F1 | 	add	fp, #16
3333c     A7 16 02 FB | 	rdlong	arg03, fp
33340     0A 16 06 F1 | 	add	arg03, #10
33344     0B 19 E2 FA | 	rdword	arg04, arg03
33348     09 18 66 F0 | 	shl	arg04, #9
3334c     08 4E 05 F1 | 	add	fp, #8
33350     A7 18 62 FC | 	wrlong	arg04, fp
33354     08 4E 05 F1 | 	add	fp, #8
33358     A7 18 02 FB | 	rdlong	arg04, fp
3335c     20 4E 85 F1 | 	sub	fp, #32
33360     01 18 16 F2 | 	cmp	arg04, #1 wc
33364     AC 00 90 CD |  if_b	jmp	#LR__4962
33368     08 4E 05 F1 | 	add	fp, #8
3336c     A7 18 02 FB | 	rdlong	arg04, fp
33370     01 18 86 F1 | 	sub	arg04, #1
33374     10 4E 05 F1 | 	add	fp, #16
33378     A7 16 02 FB | 	rdlong	arg03, fp
3337c     0B 19 12 FD | 	qdiv	arg04, arg03
33380     08 4E 05 F1 | 	add	fp, #8
33384     A7 FA 01 FB | 	rdlong	result1, fp
33388     01 FA 85 F1 | 	sub	result1, #1
3338c     18 18 62 FD | 	getqx	arg04
33390     0B FB 11 FD | 	qdiv	result1, arg03
33394     20 4E 85 F1 | 	sub	fp, #32
33398     18 16 62 FD | 	getqx	arg03
3339c     0B 19 12 F2 | 	cmp	arg04, arg03 wc
333a0     70 00 90 CD |  if_b	jmp	#LR__4962
333a4     04 4E 05 F1 | 	add	fp, #4
333a8     A7 16 02 FB | 	rdlong	arg03, fp
333ac     1C 4E 05 F1 | 	add	fp, #28
333b0     A7 FA 01 FB | 	rdlong	result1, fp
333b4     01 FA 85 F1 | 	sub	result1, #1
333b8     08 4E 85 F1 | 	sub	fp, #8
333bc     A7 18 02 FB | 	rdlong	arg04, fp
333c0     01 18 86 F1 | 	sub	arg04, #1
333c4     0C FB 21 F5 | 	andn	result1, arg04
333c8     14 16 06 F1 | 	add	arg03, #20
333cc     0B FB 61 FC | 	wrlong	result1, arg03
333d0     10 4E 85 F1 | 	sub	fp, #16
333d4     A7 16 02 FB | 	rdlong	arg03, fp
333d8     04 4E 85 F1 | 	sub	fp, #4
333dc     A7 18 02 FB | 	rdlong	arg04, fp
333e0     14 18 06 F1 | 	add	arg04, #20
333e4     0C 19 02 FB | 	rdlong	arg04, arg04
333e8     0C 17 82 F1 | 	sub	arg03, arg04
333ec     04 4E 05 F1 | 	add	fp, #4
333f0     A7 16 62 FC | 	wrlong	arg03, fp
333f4     04 4E 85 F1 | 	sub	fp, #4
333f8     A7 16 02 FB | 	rdlong	arg03, fp
333fc     18 16 06 F1 | 	add	arg03, #24
33400     0B 17 02 FB | 	rdlong	arg03, arg03
33404     10 4E 05 F1 | 	add	fp, #16
33408     A7 16 62 FC | 	wrlong	arg03, fp
3340c     14 4E 85 F1 | 	sub	fp, #20
33410     D0 00 90 FD | 	jmp	#LR__4966
33414                 | LR__4962
33414     04 4E 05 F1 | 	add	fp, #4
33418     A7 16 02 FB | 	rdlong	arg03, fp
3341c     08 16 06 F1 | 	add	arg03, #8
33420     0B 17 0A FB | 	rdlong	arg03, arg03 wz
33424     10 4E 05 F1 | 	add	fp, #16
33428     A7 16 62 FC | 	wrlong	arg03, fp
3342c     14 4E 85 F1 | 	sub	fp, #20
33430     94 00 90 5D |  if_ne	jmp	#LR__4965
33434     04 4E 05 F1 | 	add	fp, #4
33438     A7 12 02 FB | 	rdlong	arg01, fp
3343c     04 4E 85 F1 | 	sub	fp, #4
33440     00 14 06 F6 | 	mov	arg02, #0
33444     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
33448     14 4E 05 F1 | 	add	fp, #20
3344c     A7 FA 61 FC | 	wrlong	result1, fp
33450     14 4E 85 F1 | 	sub	fp, #20
33454     01 FA 0D F2 | 	cmp	result1, #1 wz
33458     1C 00 90 5D |  if_ne	jmp	#LR__4963
3345c     04 4E 05 F1 | 	add	fp, #4
33460     A7 16 02 FB | 	rdlong	arg03, fp
33464     04 4E 85 F1 | 	sub	fp, #4
33468     11 16 06 F1 | 	add	arg03, #17
3346c     0B 05 48 FC | 	wrbyte	#2, arg03
33470     02 FA 05 F6 | 	mov	result1, #2
33474     5C 04 90 FD | 	jmp	#LR__4983
33478                 | LR__4963
33478     14 4E 05 F1 | 	add	fp, #20
3347c     A7 FA 01 FB | 	rdlong	result1, fp
33480     14 4E 85 F1 | 	sub	fp, #20
33484     FF FF 7F FF 
33488     FF FB 0D F2 | 	cmp	result1, ##-1 wz
3348c     1C 00 90 5D |  if_ne	jmp	#LR__4964
33490     04 4E 05 F1 | 	add	fp, #4
33494     A7 16 02 FB | 	rdlong	arg03, fp
33498     04 4E 85 F1 | 	sub	fp, #4
3349c     11 16 06 F1 | 	add	arg03, #17
334a0     0B 03 48 FC | 	wrbyte	#1, arg03
334a4     01 FA 05 F6 | 	mov	result1, #1
334a8     28 04 90 FD | 	jmp	#LR__4983
334ac                 | LR__4964
334ac     04 4E 05 F1 | 	add	fp, #4
334b0     A7 16 02 FB | 	rdlong	arg03, fp
334b4     10 4E 05 F1 | 	add	fp, #16
334b8     A7 18 02 FB | 	rdlong	arg04, fp
334bc     14 4E 85 F1 | 	sub	fp, #20
334c0     08 16 06 F1 | 	add	arg03, #8
334c4     0B 19 62 FC | 	wrlong	arg04, arg03
334c8                 | LR__4965
334c8     04 4E 05 F1 | 	add	fp, #4
334cc     A7 16 02 FB | 	rdlong	arg03, fp
334d0     10 4E 05 F1 | 	add	fp, #16
334d4     A7 18 02 FB | 	rdlong	arg04, fp
334d8     14 4E 85 F1 | 	sub	fp, #20
334dc     18 16 06 F1 | 	add	arg03, #24
334e0     0B 19 62 FC | 	wrlong	arg04, arg03
334e4                 | LR__4966
334e4     14 4E 05 F1 | 	add	fp, #20
334e8     A7 16 0A FB | 	rdlong	arg03, fp wz
334ec     14 4E 85 F1 | 	sub	fp, #20
334f0     28 02 90 AD |  if_e	jmp	#LR__4976
334f4                 | ' 				while (ofs > bcs) {
334f4                 | LR__4967
334f4     08 4E 05 F1 | 	add	fp, #8
334f8     A7 18 02 FB | 	rdlong	arg04, fp
334fc     10 4E 05 F1 | 	add	fp, #16
33500     A7 16 02 FB | 	rdlong	arg03, fp
33504     18 4E 85 F1 | 	sub	fp, #24
33508     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
3350c     68 01 90 ED |  if_be	jmp	#LR__4973
33510     08 4E 05 F1 | 	add	fp, #8
33514     A7 18 02 FB | 	rdlong	arg04, fp
33518     10 4E 05 F1 | 	add	fp, #16
3351c     A7 16 02 FB | 	rdlong	arg03, fp
33520     0B 19 82 F1 | 	sub	arg04, arg03
33524     10 4E 85 F1 | 	sub	fp, #16
33528     A7 18 62 FC | 	wrlong	arg04, fp
3352c     04 4E 85 F1 | 	sub	fp, #4
33530     A7 18 02 FB | 	rdlong	arg04, fp
33534     0C FB 01 F6 | 	mov	result1, arg04
33538     14 18 06 F1 | 	add	arg04, #20
3353c     0C 19 02 FB | 	rdlong	arg04, arg04
33540     14 4E 05 F1 | 	add	fp, #20
33544     A7 16 02 FB | 	rdlong	arg03, fp
33548     0B 19 02 F1 | 	add	arg04, arg03
3354c     14 FA 05 F1 | 	add	result1, #20
33550     FD 18 62 FC | 	wrlong	arg04, result1
33554     14 4E 85 F1 | 	sub	fp, #20
33558     A7 16 02 FB | 	rdlong	arg03, fp
3355c     04 4E 85 F1 | 	sub	fp, #4
33560     10 16 06 F1 | 	add	arg03, #16
33564     0B 17 C2 FA | 	rdbyte	arg03, arg03
33568     02 16 CE F7 | 	test	arg03, #2 wz
3356c     3C 00 90 AD |  if_e	jmp	#LR__4968
33570     04 4E 05 F1 | 	add	fp, #4
33574     A7 12 02 FB | 	rdlong	arg01, fp
33578     10 4E 05 F1 | 	add	fp, #16
3357c     A7 14 02 FB | 	rdlong	arg02, fp
33580     14 4E 85 F1 | 	sub	fp, #20
33584     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
33588     14 4E 05 F1 | 	add	fp, #20
3358c     A7 FA 61 FC | 	wrlong	result1, fp
33590     00 FA 4D F2 | 	cmps	result1, #0 wz
33594     14 4E 85 F1 | 	sub	fp, #20
33598     08 4E 05 A1 |  if_e	add	fp, #8
3359c     A7 00 68 AC |  if_e	wrlong	#0, fp
335a0     08 4E 85 A1 |  if_e	sub	fp, #8
335a4                 | ' 							ofs = 0; break;
335a4     D0 00 90 AD |  if_e	jmp	#LR__4973
335a8     24 00 90 FD | 	jmp	#LR__4969
335ac                 | LR__4968
335ac     04 4E 05 F1 | 	add	fp, #4
335b0     A7 12 02 FB | 	rdlong	arg01, fp
335b4     10 4E 05 F1 | 	add	fp, #16
335b8     A7 14 02 FB | 	rdlong	arg02, fp
335bc     14 4E 85 F1 | 	sub	fp, #20
335c0     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
335c4     14 4E 05 F1 | 	add	fp, #20
335c8     A7 FA 61 FC | 	wrlong	result1, fp
335cc     14 4E 85 F1 | 	sub	fp, #20
335d0                 | LR__4969
335d0     14 4E 05 F1 | 	add	fp, #20
335d4     A7 16 02 FB | 	rdlong	arg03, fp
335d8     14 4E 85 F1 | 	sub	fp, #20
335dc     FF FF 7F FF 
335e0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
335e4     1C 00 90 5D |  if_ne	jmp	#LR__4970
335e8     04 4E 05 F1 | 	add	fp, #4
335ec     A7 16 02 FB | 	rdlong	arg03, fp
335f0     04 4E 85 F1 | 	sub	fp, #4
335f4     11 16 06 F1 | 	add	arg03, #17
335f8     0B 03 48 FC | 	wrbyte	#1, arg03
335fc     01 FA 05 F6 | 	mov	result1, #1
33600     D0 02 90 FD | 	jmp	#LR__4983
33604                 | LR__4970
33604     14 4E 05 F1 | 	add	fp, #20
33608     A7 16 02 FB | 	rdlong	arg03, fp
3360c     14 4E 85 F1 | 	sub	fp, #20
33610     02 16 16 F2 | 	cmp	arg03, #2 wc
33614     24 00 90 CD |  if_b	jmp	#LR__4971
33618     10 4E 05 F1 | 	add	fp, #16
3361c     A7 18 02 FB | 	rdlong	arg04, fp
33620     04 4E 05 F1 | 	add	fp, #4
33624     A7 16 02 FB | 	rdlong	arg03, fp
33628     14 4E 85 F1 | 	sub	fp, #20
3362c     18 18 06 F1 | 	add	arg04, #24
33630     0C 19 02 FB | 	rdlong	arg04, arg04
33634     0C 17 12 F2 | 	cmp	arg03, arg04 wc
33638     1C 00 90 CD |  if_b	jmp	#LR__4972
3363c                 | LR__4971
3363c     04 4E 05 F1 | 	add	fp, #4
33640     A7 16 02 FB | 	rdlong	arg03, fp
33644     04 4E 85 F1 | 	sub	fp, #4
33648     11 16 06 F1 | 	add	arg03, #17
3364c     0B 05 48 FC | 	wrbyte	#2, arg03
33650     02 FA 05 F6 | 	mov	result1, #2
33654     7C 02 90 FD | 	jmp	#LR__4983
33658                 | LR__4972
33658     04 4E 05 F1 | 	add	fp, #4
3365c     A7 18 02 FB | 	rdlong	arg04, fp
33660     10 4E 05 F1 | 	add	fp, #16
33664     A7 16 02 FB | 	rdlong	arg03, fp
33668     14 4E 85 F1 | 	sub	fp, #20
3366c     18 18 06 F1 | 	add	arg04, #24
33670     0C 17 62 FC | 	wrlong	arg03, arg04
33674     7C FE 9F FD | 	jmp	#LR__4967
33678                 | LR__4973
33678     04 4E 05 F1 | 	add	fp, #4
3367c     A7 16 02 FB | 	rdlong	arg03, fp
33680     0B 13 02 F6 | 	mov	arg01, arg03
33684     14 16 06 F1 | 	add	arg03, #20
33688     0B 15 02 FB | 	rdlong	arg02, arg03
3368c     04 4E 05 F1 | 	add	fp, #4
33690     A7 16 02 FB | 	rdlong	arg03, fp
33694     0B 15 02 F1 | 	add	arg02, arg03
33698     14 12 06 F1 | 	add	arg01, #20
3369c     09 15 62 FC | 	wrlong	arg02, arg01
336a0     A7 16 02 FB | 	rdlong	arg03, fp
336a4     08 4E 85 F1 | 	sub	fp, #8
336a8     FF 17 CE F7 | 	test	arg03, #511 wz
336ac     6C 00 90 AD |  if_e	jmp	#LR__4975
336b0     10 4E 05 F1 | 	add	fp, #16
336b4     A7 12 02 FB | 	rdlong	arg01, fp
336b8     04 4E 05 F1 | 	add	fp, #4
336bc     A7 14 02 FB | 	rdlong	arg02, fp
336c0     14 4E 85 F1 | 	sub	fp, #20
336c4     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
336c8     1C 4E 05 F1 | 	add	fp, #28
336cc     A7 FA 61 FC | 	wrlong	result1, fp
336d0     1C 4E 85 F1 | 	sub	fp, #28
336d4     00 FA 0D F2 | 	cmp	result1, #0 wz
336d8     1C 00 90 5D |  if_ne	jmp	#LR__4974
336dc     04 4E 05 F1 | 	add	fp, #4
336e0     A7 16 02 FB | 	rdlong	arg03, fp
336e4     04 4E 85 F1 | 	sub	fp, #4
336e8     11 16 06 F1 | 	add	arg03, #17
336ec     0B 05 48 FC | 	wrbyte	#2, arg03
336f0     02 FA 05 F6 | 	mov	result1, #2
336f4     DC 01 90 FD | 	jmp	#LR__4983
336f8                 | LR__4974
336f8     1C 4E 05 F1 | 	add	fp, #28
336fc     A7 18 02 FB | 	rdlong	arg04, fp
33700     14 4E 85 F1 | 	sub	fp, #20
33704     A7 16 02 FB | 	rdlong	arg03, fp
33708     09 16 46 F0 | 	shr	arg03, #9
3370c     0B 19 02 F1 | 	add	arg04, arg03
33710     14 4E 05 F1 | 	add	fp, #20
33714     A7 18 62 FC | 	wrlong	arg04, fp
33718     1C 4E 85 F1 | 	sub	fp, #28
3371c                 | LR__4975
3371c                 | LR__4976
3371c                 | LR__4977
3371c     04 4E 05 F1 | 	add	fp, #4
33720     A7 18 02 FB | 	rdlong	arg04, fp
33724     0C 17 02 F6 | 	mov	arg03, arg04
33728     04 4E 85 F1 | 	sub	fp, #4
3372c     14 16 06 F1 | 	add	arg03, #20
33730     0B 17 02 FB | 	rdlong	arg03, arg03
33734     0C 18 06 F1 | 	add	arg04, #12
33738     0C 19 02 FB | 	rdlong	arg04, arg04
3373c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
33740     3C 00 90 ED |  if_be	jmp	#LR__4978
33744     04 4E 05 F1 | 	add	fp, #4
33748     A7 18 02 FB | 	rdlong	arg04, fp
3374c     0C 17 02 F6 | 	mov	arg03, arg04
33750     14 18 06 F1 | 	add	arg04, #20
33754     0C 19 02 FB | 	rdlong	arg04, arg04
33758     0C 16 06 F1 | 	add	arg03, #12
3375c     0B 19 62 FC | 	wrlong	arg04, arg03
33760     A7 18 02 FB | 	rdlong	arg04, fp
33764     0C 17 02 F6 | 	mov	arg03, arg04
33768     04 4E 85 F1 | 	sub	fp, #4
3376c     10 18 06 F1 | 	add	arg04, #16
33770     0C 19 C2 FA | 	rdbyte	arg04, arg04
33774     40 18 46 F5 | 	or	arg04, #64
33778     10 16 06 F1 | 	add	arg03, #16
3377c     0B 19 42 FC | 	wrbyte	arg04, arg03
33780                 | LR__4978
33780     04 4E 05 F1 | 	add	fp, #4
33784     A7 16 02 FB | 	rdlong	arg03, fp
33788     04 4E 85 F1 | 	sub	fp, #4
3378c     14 16 06 F1 | 	add	arg03, #20
33790     0B 17 02 FB | 	rdlong	arg03, arg03
33794     FF 17 CE F7 | 	test	arg03, #511 wz
33798     2C 01 90 AD |  if_e	jmp	#LR__4982
3379c     04 4E 05 F1 | 	add	fp, #4
337a0     A7 18 02 FB | 	rdlong	arg04, fp
337a4     18 4E 05 F1 | 	add	fp, #24
337a8     A7 16 02 FB | 	rdlong	arg03, fp
337ac     1C 4E 85 F1 | 	sub	fp, #28
337b0     1C 18 06 F1 | 	add	arg04, #28
337b4     0C 19 02 FB | 	rdlong	arg04, arg04
337b8     0C 17 0A F2 | 	cmp	arg03, arg04 wz
337bc     08 01 90 AD |  if_e	jmp	#LR__4982
337c0     04 4E 05 F1 | 	add	fp, #4
337c4     A7 16 02 FB | 	rdlong	arg03, fp
337c8     04 4E 85 F1 | 	sub	fp, #4
337cc     10 16 06 F1 | 	add	arg03, #16
337d0     0B 17 C2 FA | 	rdbyte	arg03, arg03
337d4     80 16 CE F7 | 	test	arg03, #128 wz
337d8     7C 00 90 AD |  if_e	jmp	#LR__4980
337dc     10 4E 05 F1 | 	add	fp, #16
337e0     A7 16 02 FB | 	rdlong	arg03, fp
337e4     01 16 06 F1 | 	add	arg03, #1
337e8     0B 13 C2 FA | 	rdbyte	arg01, arg03
337ec     0C 4E 85 F1 | 	sub	fp, #12
337f0     A7 16 02 FB | 	rdlong	arg03, fp
337f4     0B 15 02 F6 | 	mov	arg02, arg03
337f8     28 14 06 F1 | 	add	arg02, #40
337fc     04 4E 85 F1 | 	sub	fp, #4
33800     1C 16 06 F1 | 	add	arg03, #28
33804     0B 17 02 FB | 	rdlong	arg03, arg03
33808     01 18 06 F6 | 	mov	arg04, #1
3380c     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
33810     00 FA 0D F2 | 	cmp	result1, #0 wz
33814     1C 00 90 AD |  if_e	jmp	#LR__4979
33818     04 4E 05 F1 | 	add	fp, #4
3381c     A7 16 02 FB | 	rdlong	arg03, fp
33820     04 4E 85 F1 | 	sub	fp, #4
33824     11 16 06 F1 | 	add	arg03, #17
33828     0B 03 48 FC | 	wrbyte	#1, arg03
3382c     01 FA 05 F6 | 	mov	result1, #1
33830     A0 00 90 FD | 	jmp	#LR__4983
33834                 | LR__4979
33834     04 4E 05 F1 | 	add	fp, #4
33838     A7 18 02 FB | 	rdlong	arg04, fp
3383c     0C 17 02 F6 | 	mov	arg03, arg04
33840     04 4E 85 F1 | 	sub	fp, #4
33844     10 18 06 F1 | 	add	arg04, #16
33848     0C 19 C2 FA | 	rdbyte	arg04, arg04
3384c     7F 18 06 F5 | 	and	arg04, #127
33850     10 16 06 F1 | 	add	arg03, #16
33854     0B 19 42 FC | 	wrbyte	arg04, arg03
33858                 | LR__4980
33858     10 4E 05 F1 | 	add	fp, #16
3385c     A7 16 02 FB | 	rdlong	arg03, fp
33860     01 16 06 F1 | 	add	arg03, #1
33864     0B 13 C2 FA | 	rdbyte	arg01, arg03
33868     0C 4E 85 F1 | 	sub	fp, #12
3386c     A7 14 02 FB | 	rdlong	arg02, fp
33870     28 14 06 F1 | 	add	arg02, #40
33874     18 4E 05 F1 | 	add	fp, #24
33878     A7 16 02 FB | 	rdlong	arg03, fp
3387c     1C 4E 85 F1 | 	sub	fp, #28
33880     01 18 06 F6 | 	mov	arg04, #1
33884     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
33888     00 FA 0D F2 | 	cmp	result1, #0 wz
3388c     1C 00 90 AD |  if_e	jmp	#LR__4981
33890     04 4E 05 F1 | 	add	fp, #4
33894     A7 16 02 FB | 	rdlong	arg03, fp
33898     04 4E 85 F1 | 	sub	fp, #4
3389c     11 16 06 F1 | 	add	arg03, #17
338a0     0B 03 48 FC | 	wrbyte	#1, arg03
338a4     01 FA 05 F6 | 	mov	result1, #1
338a8     28 00 90 FD | 	jmp	#LR__4983
338ac                 | LR__4981
338ac     04 4E 05 F1 | 	add	fp, #4
338b0     A7 18 02 FB | 	rdlong	arg04, fp
338b4     18 4E 05 F1 | 	add	fp, #24
338b8     A7 16 02 FB | 	rdlong	arg03, fp
338bc     1C 4E 85 F1 | 	sub	fp, #28
338c0     1C 18 06 F1 | 	add	arg04, #28
338c4     0C 17 62 FC | 	wrlong	arg03, arg04
338c8                 | LR__4982
338c8                 | ' 
338c8                 | ' 			fp->sect = nsect;
338c8                 | ' 		}
338c8                 | ' 	}
338c8                 | ' 
338c8                 | ' 	return res ;
338c8     0C 4E 05 F1 | 	add	fp, #12
338cc     A7 FA 01 FB | 	rdlong	result1, fp
338d0     0C 4E 85 F1 | 	sub	fp, #12
338d4                 | LR__4983
338d4     A7 F0 03 F6 | 	mov	ptra, fp
338d8     B2 00 A0 FD | 	call	#popregs_
338dc                 | _fatfs_cc_f_lseek_ret
338dc     2D 00 64 FD | 	ret
338e0                 | 
338e0                 | _fatfs_cc_f_opendir
338e0     01 4A 05 F6 | 	mov	COUNT_, #1
338e4     A8 00 A0 FD | 	call	#pushregs_
338e8     14 F0 07 F1 | 	add	ptra, #20
338ec     04 4E 05 F1 | 	add	fp, #4
338f0     A7 12 62 FC | 	wrlong	arg01, fp
338f4     04 4E 05 F1 | 	add	fp, #4
338f8     A7 14 62 FC | 	wrlong	arg02, fp
338fc     04 4E 85 F1 | 	sub	fp, #4
33900     A7 16 0A FB | 	rdlong	arg03, fp wz
33904     04 4E 85 F1 | 	sub	fp, #4
33908     09 FA 05 A6 |  if_e	mov	result1, #9
3390c     78 01 90 AD |  if_e	jmp	#LR__4996
33910     08 4E 05 F1 | 	add	fp, #8
33914     A7 12 02 F6 | 	mov	arg01, fp
33918     08 4E 05 F1 | 	add	fp, #8
3391c     A7 14 02 F6 | 	mov	arg02, fp
33920     10 4E 85 F1 | 	sub	fp, #16
33924     00 16 06 F6 | 	mov	arg03, #0
33928     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
3392c     0C 4E 05 F1 | 	add	fp, #12
33930     A7 FA 61 FC | 	wrlong	result1, fp
33934     0C 4E 85 F1 | 	sub	fp, #12
33938     00 FA 0D F2 | 	cmp	result1, #0 wz
3393c     20 01 90 5D |  if_ne	jmp	#LR__4995
33940     04 4E 05 F1 | 	add	fp, #4
33944     A7 16 02 FB | 	rdlong	arg03, fp
33948     0C 4E 05 F1 | 	add	fp, #12
3394c     A7 FA 01 FB | 	rdlong	result1, fp
33950     0B FB 61 FC | 	wrlong	result1, arg03
33954     0C 4E 85 F1 | 	sub	fp, #12
33958     A7 12 02 FB | 	rdlong	arg01, fp
3395c     04 4E 05 F1 | 	add	fp, #4
33960     A7 14 02 FB | 	rdlong	arg02, fp
33964     08 4E 85 F1 | 	sub	fp, #8
33968     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
3396c     0C 4E 05 F1 | 	add	fp, #12
33970     A7 FA 61 FC | 	wrlong	result1, fp
33974     0C 4E 85 F1 | 	sub	fp, #12
33978     00 FA 0D F2 | 	cmp	result1, #0 wz
3397c     C4 00 90 5D |  if_ne	jmp	#LR__4994
33980     04 4E 05 F1 | 	add	fp, #4
33984     A7 16 02 FB | 	rdlong	arg03, fp
33988     04 4E 85 F1 | 	sub	fp, #4
3398c     2B 16 06 F1 | 	add	arg03, #43
33990     0B 17 C2 FA | 	rdbyte	arg03, arg03
33994     80 16 CE F7 | 	test	arg03, #128 wz
33998     58 00 90 5D |  if_ne	jmp	#LR__4992
3399c     04 4E 05 F1 | 	add	fp, #4
339a0     A7 16 02 FB | 	rdlong	arg03, fp
339a4     04 4E 85 F1 | 	sub	fp, #4
339a8     06 16 06 F1 | 	add	arg03, #6
339ac     0B 17 C2 FA | 	rdbyte	arg03, arg03
339b0     10 16 CE F7 | 	test	arg03, #16 wz
339b4     30 00 90 AD |  if_e	jmp	#LR__4990
339b8     04 4E 05 F1 | 	add	fp, #4
339bc     A7 16 02 FB | 	rdlong	arg03, fp
339c0     0B 27 02 F6 | 	mov	local01, arg03
339c4     0C 4E 05 F1 | 	add	fp, #12
339c8     A7 12 02 FB | 	rdlong	arg01, fp
339cc     10 4E 85 F1 | 	sub	fp, #16
339d0     1C 16 06 F1 | 	add	arg03, #28
339d4     0B 15 02 FB | 	rdlong	arg02, arg03
339d8     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
339dc     08 26 06 F1 | 	add	local01, #8
339e0     13 FB 61 FC | 	wrlong	result1, local01
339e4     0C 00 90 FD | 	jmp	#LR__4991
339e8                 | LR__4990
339e8     0C 4E 05 F1 | 	add	fp, #12
339ec     A7 0A 68 FC | 	wrlong	#5, fp
339f0     0C 4E 85 F1 | 	sub	fp, #12
339f4                 | LR__4991
339f4                 | LR__4992
339f4     0C 4E 05 F1 | 	add	fp, #12
339f8     A7 26 0A FB | 	rdlong	local01, fp wz
339fc     0C 4E 85 F1 | 	sub	fp, #12
33a00     40 00 90 5D |  if_ne	jmp	#LR__4993
33a04     04 4E 05 F1 | 	add	fp, #4
33a08     A7 26 02 FB | 	rdlong	local01, fp
33a0c     0C 4E 05 F1 | 	add	fp, #12
33a10     A7 16 02 FB | 	rdlong	arg03, fp
33a14     06 16 06 F1 | 	add	arg03, #6
33a18     0B 17 E2 FA | 	rdword	arg03, arg03
33a1c     04 26 06 F1 | 	add	local01, #4
33a20     13 17 52 FC | 	wrword	arg03, local01
33a24     0C 4E 85 F1 | 	sub	fp, #12
33a28     A7 12 02 FB | 	rdlong	arg01, fp
33a2c     04 4E 85 F1 | 	sub	fp, #4
33a30     00 14 06 F6 | 	mov	arg02, #0
33a34     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
33a38     0C 4E 05 F1 | 	add	fp, #12
33a3c     A7 FA 61 FC | 	wrlong	result1, fp
33a40     0C 4E 85 F1 | 	sub	fp, #12
33a44                 | LR__4993
33a44                 | LR__4994
33a44     0C 4E 05 F1 | 	add	fp, #12
33a48     A7 26 02 FB | 	rdlong	local01, fp
33a4c     0C 4E 85 F1 | 	sub	fp, #12
33a50     04 26 0E F2 | 	cmp	local01, #4 wz
33a54     0C 4E 05 A1 |  if_e	add	fp, #12
33a58     A7 0A 68 AC |  if_e	wrlong	#5, fp
33a5c     0C 4E 85 A1 |  if_e	sub	fp, #12
33a60                 | LR__4995
33a60     0C 4E 05 F1 | 	add	fp, #12
33a64     A7 26 0A FB | 	rdlong	local01, fp wz
33a68     0C 4E 85 F1 | 	sub	fp, #12
33a6c     04 4E 05 51 |  if_ne	add	fp, #4
33a70     A7 26 02 5B |  if_ne	rdlong	local01, fp
33a74     04 4E 85 51 |  if_ne	sub	fp, #4
33a78     13 01 68 5C |  if_ne	wrlong	#0, local01
33a7c                 | ' 
33a7c                 | ' 	return res ;
33a7c     0C 4E 05 F1 | 	add	fp, #12
33a80     A7 FA 01 FB | 	rdlong	result1, fp
33a84     0C 4E 85 F1 | 	sub	fp, #12
33a88                 | LR__4996
33a88     A7 F0 03 F6 | 	mov	ptra, fp
33a8c     B2 00 A0 FD | 	call	#popregs_
33a90                 | _fatfs_cc_f_opendir_ret
33a90     2D 00 64 FD | 	ret
33a94                 | 
33a94                 | _fatfs_cc_f_closedir
33a94     00 4A 05 F6 | 	mov	COUNT_, #0
33a98     A8 00 A0 FD | 	call	#pushregs_
33a9c     10 F0 07 F1 | 	add	ptra, #16
33aa0     04 4E 05 F1 | 	add	fp, #4
33aa4     A7 12 62 FC | 	wrlong	arg01, fp
33aa8     08 4E 05 F1 | 	add	fp, #8
33aac     A7 14 02 F6 | 	mov	arg02, fp
33ab0     0C 4E 85 F1 | 	sub	fp, #12
33ab4     C0 DD BF FD | 	call	#_fatfs_cc_validate
33ab8     08 4E 05 F1 | 	add	fp, #8
33abc     A7 FA 61 FC | 	wrlong	result1, fp
33ac0     08 4E 85 F1 | 	sub	fp, #8
33ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
33ac8     04 4E 05 A1 |  if_e	add	fp, #4
33acc     A7 FA 01 AB |  if_e	rdlong	result1, fp
33ad0     04 4E 85 A1 |  if_e	sub	fp, #4
33ad4     FD 00 68 AC |  if_e	wrlong	#0, result1
33ad8                 | ' 
33ad8                 | ' 
33ad8                 | ' 
33ad8                 | ' 
33ad8                 | ' 		dp->obj.fs = 0;
33ad8                 | ' #line 4633 "ff.c"
33ad8                 | ' 	}
33ad8                 | ' 	return res;
33ad8     08 4E 05 F1 | 	add	fp, #8
33adc     A7 FA 01 FB | 	rdlong	result1, fp
33ae0     08 4E 85 F1 | 	sub	fp, #8
33ae4     A7 F0 03 F6 | 	mov	ptra, fp
33ae8     B2 00 A0 FD | 	call	#popregs_
33aec                 | _fatfs_cc_f_closedir_ret
33aec     2D 00 64 FD | 	ret
33af0                 | 
33af0                 | _fatfs_cc_f_readdir
33af0     00 4A 05 F6 | 	mov	COUNT_, #0
33af4     A8 00 A0 FD | 	call	#pushregs_
33af8     14 F0 07 F1 | 	add	ptra, #20
33afc     04 4E 05 F1 | 	add	fp, #4
33b00     A7 12 62 FC | 	wrlong	arg01, fp
33b04     04 4E 05 F1 | 	add	fp, #4
33b08     A7 14 62 FC | 	wrlong	arg02, fp
33b0c     04 4E 85 F1 | 	sub	fp, #4
33b10     A7 12 02 FB | 	rdlong	arg01, fp
33b14     0C 4E 05 F1 | 	add	fp, #12
33b18     A7 14 02 F6 | 	mov	arg02, fp
33b1c     10 4E 85 F1 | 	sub	fp, #16
33b20     54 DD BF FD | 	call	#_fatfs_cc_validate
33b24     0C 4E 05 F1 | 	add	fp, #12
33b28     A7 FA 61 FC | 	wrlong	result1, fp
33b2c     0C 4E 85 F1 | 	sub	fp, #12
33b30     00 FA 0D F2 | 	cmp	result1, #0 wz
33b34     BC 00 90 5D |  if_ne	jmp	#LR__5003
33b38     08 4E 05 F1 | 	add	fp, #8
33b3c     A7 FA 09 FB | 	rdlong	result1, fp wz
33b40     08 4E 85 F1 | 	sub	fp, #8
33b44     24 00 90 5D |  if_ne	jmp	#LR__5000
33b48     04 4E 05 F1 | 	add	fp, #4
33b4c     A7 12 02 FB | 	rdlong	arg01, fp
33b50     04 4E 85 F1 | 	sub	fp, #4
33b54     00 14 06 F6 | 	mov	arg02, #0
33b58     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
33b5c     0C 4E 05 F1 | 	add	fp, #12
33b60     A7 FA 61 FC | 	wrlong	result1, fp
33b64     0C 4E 85 F1 | 	sub	fp, #12
33b68     88 00 90 FD | 	jmp	#LR__5002
33b6c                 | LR__5000
33b6c     04 4E 05 F1 | 	add	fp, #4
33b70     A7 12 02 FB | 	rdlong	arg01, fp
33b74     04 4E 85 F1 | 	sub	fp, #4
33b78     00 14 06 F6 | 	mov	arg02, #0
33b7c     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
33b80     0C 4E 05 F1 | 	add	fp, #12
33b84     A7 FA 61 FC | 	wrlong	result1, fp
33b88     0C 4E 85 F1 | 	sub	fp, #12
33b8c     04 FA 0D F2 | 	cmp	result1, #4 wz
33b90     0C 4E 05 A1 |  if_e	add	fp, #12
33b94     A7 00 68 AC |  if_e	wrlong	#0, fp
33b98     0C 4E 85 A1 |  if_e	sub	fp, #12
33b9c     0C 4E 05 F1 | 	add	fp, #12
33ba0     A7 FA 09 FB | 	rdlong	result1, fp wz
33ba4     0C 4E 85 F1 | 	sub	fp, #12
33ba8     48 00 90 5D |  if_ne	jmp	#LR__5001
33bac     04 4E 05 F1 | 	add	fp, #4
33bb0     A7 12 02 FB | 	rdlong	arg01, fp
33bb4     04 4E 05 F1 | 	add	fp, #4
33bb8     A7 14 02 FB | 	rdlong	arg02, fp
33bbc     08 4E 85 F1 | 	sub	fp, #8
33bc0     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
33bc4     04 4E 05 F1 | 	add	fp, #4
33bc8     A7 12 02 FB | 	rdlong	arg01, fp
33bcc     04 4E 85 F1 | 	sub	fp, #4
33bd0     00 14 06 F6 | 	mov	arg02, #0
33bd4     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
33bd8     0C 4E 05 F1 | 	add	fp, #12
33bdc     A7 FA 61 FC | 	wrlong	result1, fp
33be0     0C 4E 85 F1 | 	sub	fp, #12
33be4     04 FA 0D F2 | 	cmp	result1, #4 wz
33be8     0C 4E 05 A1 |  if_e	add	fp, #12
33bec     A7 00 68 AC |  if_e	wrlong	#0, fp
33bf0     0C 4E 85 A1 |  if_e	sub	fp, #12
33bf4                 | LR__5001
33bf4                 | LR__5002
33bf4                 | LR__5003
33bf4                 | ' 			}
33bf4                 | ' 			;
33bf4                 | ' 		}
33bf4                 | ' 	}
33bf4                 | ' 	return res ;
33bf4     0C 4E 05 F1 | 	add	fp, #12
33bf8     A7 FA 01 FB | 	rdlong	result1, fp
33bfc     0C 4E 85 F1 | 	sub	fp, #12
33c00     A7 F0 03 F6 | 	mov	ptra, fp
33c04     B2 00 A0 FD | 	call	#popregs_
33c08                 | _fatfs_cc_f_readdir_ret
33c08     2D 00 64 FD | 	ret
33c0c                 | 
33c0c                 | _fatfs_cc_f_stat
33c0c     00 4A 05 F6 | 	mov	COUNT_, #0
33c10     A8 00 A0 FD | 	call	#pushregs_
33c14     40 F0 07 F1 | 	add	ptra, #64
33c18     04 4E 05 F1 | 	add	fp, #4
33c1c     A7 12 62 FC | 	wrlong	arg01, fp
33c20     04 4E 05 F1 | 	add	fp, #4
33c24     A7 14 62 FC | 	wrlong	arg02, fp
33c28     04 4E 85 F1 | 	sub	fp, #4
33c2c     A7 12 02 F6 | 	mov	arg01, fp
33c30     0C 4E 05 F1 | 	add	fp, #12
33c34     A7 14 02 F6 | 	mov	arg02, fp
33c38     10 4E 85 F1 | 	sub	fp, #16
33c3c     00 16 06 F6 | 	mov	arg03, #0
33c40     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
33c44     0C 4E 05 F1 | 	add	fp, #12
33c48     A7 FA 61 FC | 	wrlong	result1, fp
33c4c     0C 4E 85 F1 | 	sub	fp, #12
33c50     00 FA 0D F2 | 	cmp	result1, #0 wz
33c54     74 00 90 5D |  if_ne	jmp	#LR__5013
33c58     10 4E 05 F1 | 	add	fp, #16
33c5c     A7 12 02 F6 | 	mov	arg01, fp
33c60     0C 4E 85 F1 | 	sub	fp, #12
33c64     A7 14 02 FB | 	rdlong	arg02, fp
33c68     04 4E 85 F1 | 	sub	fp, #4
33c6c     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
33c70     0C 4E 05 F1 | 	add	fp, #12
33c74     A7 FA 61 FC | 	wrlong	result1, fp
33c78     0C 4E 85 F1 | 	sub	fp, #12
33c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
33c80     48 00 90 5D |  if_ne	jmp	#LR__5012
33c84     3B 4E 05 F1 | 	add	fp, #59
33c88     A7 FA C1 FA | 	rdbyte	result1, fp
33c8c     3B 4E 85 F1 | 	sub	fp, #59
33c90     80 FA CD F7 | 	test	result1, #128 wz
33c94     0C 4E 05 51 |  if_ne	add	fp, #12
33c98     A7 0C 68 5C |  if_ne	wrlong	#6, fp
33c9c     0C 4E 85 51 |  if_ne	sub	fp, #12
33ca0     28 00 90 5D |  if_ne	jmp	#LR__5011
33ca4     08 4E 05 F1 | 	add	fp, #8
33ca8     A7 FA 09 FB | 	rdlong	result1, fp wz
33cac     08 4E 85 F1 | 	sub	fp, #8
33cb0     18 00 90 AD |  if_e	jmp	#LR__5010
33cb4     10 4E 05 F1 | 	add	fp, #16
33cb8     A7 12 02 F6 | 	mov	arg01, fp
33cbc     08 4E 85 F1 | 	sub	fp, #8
33cc0     A7 14 02 FB | 	rdlong	arg02, fp
33cc4     08 4E 85 F1 | 	sub	fp, #8
33cc8     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
33ccc                 | LR__5010
33ccc                 | LR__5011
33ccc                 | LR__5012
33ccc                 | LR__5013
33ccc                 | ' 			}
33ccc                 | ' 		}
33ccc                 | ' 		;
33ccc                 | ' 	}
33ccc                 | ' 
33ccc                 | ' 	return res ;
33ccc     0C 4E 05 F1 | 	add	fp, #12
33cd0     A7 FA 01 FB | 	rdlong	result1, fp
33cd4     0C 4E 85 F1 | 	sub	fp, #12
33cd8     A7 F0 03 F6 | 	mov	ptra, fp
33cdc     B2 00 A0 FD | 	call	#popregs_
33ce0                 | _fatfs_cc_f_stat_ret
33ce0     2D 00 64 FD | 	ret
33ce4                 | 
33ce4                 | _fatfs_cc_f_unlink
33ce4     00 4A 05 F6 | 	mov	COUNT_, #0
33ce8     A8 00 A0 FD | 	call	#pushregs_
33cec     74 F0 07 F1 | 	add	ptra, #116
33cf0     04 4E 05 F1 | 	add	fp, #4
33cf4     A7 12 62 FC | 	wrlong	arg01, fp
33cf8     68 4E 05 F1 | 	add	fp, #104
33cfc     A7 00 68 FC | 	wrlong	#0, fp
33d00     68 4E 85 F1 | 	sub	fp, #104
33d04     A7 12 02 F6 | 	mov	arg01, fp
33d08     6C 4E 05 F1 | 	add	fp, #108
33d0c     A7 14 02 F6 | 	mov	arg02, fp
33d10     70 4E 85 F1 | 	sub	fp, #112
33d14     02 16 06 F6 | 	mov	arg03, #2
33d18     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
33d1c     08 4E 05 F1 | 	add	fp, #8
33d20     A7 FA 61 FC | 	wrlong	result1, fp
33d24     08 4E 85 F1 | 	sub	fp, #8
33d28     00 FA 0D F2 | 	cmp	result1, #0 wz
33d2c     E4 01 90 5D |  if_ne	jmp	#LR__5028
33d30     70 4E 05 F1 | 	add	fp, #112
33d34     A7 16 02 FB | 	rdlong	arg03, fp
33d38     64 4E 85 F1 | 	sub	fp, #100
33d3c     A7 16 62 FC | 	wrlong	arg03, fp
33d40     A7 12 02 F6 | 	mov	arg01, fp
33d44     08 4E 85 F1 | 	sub	fp, #8
33d48     A7 14 02 FB | 	rdlong	arg02, fp
33d4c     04 4E 85 F1 | 	sub	fp, #4
33d50     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
33d54     08 4E 05 F1 | 	add	fp, #8
33d58     A7 FA 61 FC | 	wrlong	result1, fp
33d5c     00 FA 4D F2 | 	cmps	result1, #0 wz
33d60     08 4E 85 F1 | 	sub	fp, #8
33d64     AC 01 90 5D |  if_ne	jmp	#LR__5027
33d68     37 4E 05 F1 | 	add	fp, #55
33d6c     A7 FA C1 FA | 	rdbyte	result1, fp
33d70     37 4E 85 F1 | 	sub	fp, #55
33d74     80 FA CD F7 | 	test	result1, #128 wz
33d78     08 4E 05 51 |  if_ne	add	fp, #8
33d7c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
33d80     08 4E 85 51 |  if_ne	sub	fp, #8
33d84     1C 00 90 5D |  if_ne	jmp	#LR__5020
33d88     12 4E 05 F1 | 	add	fp, #18
33d8c     A7 FA C1 FA | 	rdbyte	result1, fp
33d90     12 4E 85 F1 | 	sub	fp, #18
33d94     01 FA CD F7 | 	test	result1, #1 wz
33d98     08 4E 05 51 |  if_ne	add	fp, #8
33d9c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
33da0     08 4E 85 51 |  if_ne	sub	fp, #8
33da4                 | LR__5020
33da4     08 4E 05 F1 | 	add	fp, #8
33da8     A7 FA 09 FB | 	rdlong	result1, fp wz
33dac     08 4E 85 F1 | 	sub	fp, #8
33db0     C8 00 90 5D |  if_ne	jmp	#LR__5023
33db4     70 4E 05 F1 | 	add	fp, #112
33db8     A7 12 02 FB | 	rdlong	arg01, fp
33dbc     48 4E 85 F1 | 	sub	fp, #72
33dc0     A7 14 02 FB | 	rdlong	arg02, fp
33dc4     28 4E 85 F1 | 	sub	fp, #40
33dc8     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
33dcc     6C 4E 05 F1 | 	add	fp, #108
33dd0     A7 FA 61 FC | 	wrlong	result1, fp
33dd4     5A 4E 85 F1 | 	sub	fp, #90
33dd8     A7 FA C1 FA | 	rdbyte	result1, fp
33ddc     12 4E 85 F1 | 	sub	fp, #18
33de0     10 FA CD F7 | 	test	result1, #16 wz
33de4     94 00 90 AD |  if_e	jmp	#LR__5022
33de8     70 4E 05 F1 | 	add	fp, #112
33dec     A7 FA 01 FB | 	rdlong	result1, fp
33df0     34 4E 85 F1 | 	sub	fp, #52
33df4     A7 FA 61 FC | 	wrlong	result1, fp
33df8     30 4E 05 F1 | 	add	fp, #48
33dfc     A7 16 02 FB | 	rdlong	arg03, fp
33e00     28 4E 85 F1 | 	sub	fp, #40
33e04     A7 16 62 FC | 	wrlong	arg03, fp
33e08     08 4E 85 F1 | 	sub	fp, #8
33e0c     A7 12 02 F6 | 	mov	arg01, fp
33e10     3C 4E 85 F1 | 	sub	fp, #60
33e14     00 14 06 F6 | 	mov	arg02, #0
33e18     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
33e1c     08 4E 05 F1 | 	add	fp, #8
33e20     A7 FA 61 FC | 	wrlong	result1, fp
33e24     08 4E 85 F1 | 	sub	fp, #8
33e28     00 FA 0D F2 | 	cmp	result1, #0 wz
33e2c     4C 00 90 5D |  if_ne	jmp	#LR__5021
33e30     3C 4E 05 F1 | 	add	fp, #60
33e34     A7 12 02 F6 | 	mov	arg01, fp
33e38     3C 4E 85 F1 | 	sub	fp, #60
33e3c     00 14 06 F6 | 	mov	arg02, #0
33e40     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
33e44     08 4E 05 F1 | 	add	fp, #8
33e48     A7 FA 61 FC | 	wrlong	result1, fp
33e4c     00 FA 4D F2 | 	cmps	result1, #0 wz
33e50     08 4E 85 F1 | 	sub	fp, #8
33e54     08 4E 05 A1 |  if_e	add	fp, #8
33e58     A7 0E 68 AC |  if_e	wrlong	#7, fp
33e5c     08 4E 85 A1 |  if_e	sub	fp, #8
33e60     08 4E 05 F1 | 	add	fp, #8
33e64     A7 FA 01 FB | 	rdlong	result1, fp
33e68     08 4E 85 F1 | 	sub	fp, #8
33e6c     04 FA 0D F2 | 	cmp	result1, #4 wz
33e70     08 4E 05 A1 |  if_e	add	fp, #8
33e74     A7 00 68 AC |  if_e	wrlong	#0, fp
33e78     08 4E 85 A1 |  if_e	sub	fp, #8
33e7c                 | LR__5021
33e7c                 | LR__5022
33e7c                 | LR__5023
33e7c     08 4E 05 F1 | 	add	fp, #8
33e80     A7 FA 09 FB | 	rdlong	result1, fp wz
33e84     08 4E 85 F1 | 	sub	fp, #8
33e88     88 00 90 5D |  if_ne	jmp	#LR__5026
33e8c     0C 4E 05 F1 | 	add	fp, #12
33e90     A7 12 02 F6 | 	mov	arg01, fp
33e94     0C 4E 85 F1 | 	sub	fp, #12
33e98     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
33e9c     08 4E 05 F1 | 	add	fp, #8
33ea0     A7 FA 61 FC | 	wrlong	result1, fp
33ea4     08 4E 85 F1 | 	sub	fp, #8
33ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
33eac     38 00 90 5D |  if_ne	jmp	#LR__5024
33eb0     6C 4E 05 F1 | 	add	fp, #108
33eb4     A7 FA 09 FB | 	rdlong	result1, fp wz
33eb8     6C 4E 85 F1 | 	sub	fp, #108
33ebc     28 00 90 AD |  if_e	jmp	#LR__5024
33ec0     0C 4E 05 F1 | 	add	fp, #12
33ec4     A7 12 02 F6 | 	mov	arg01, fp
33ec8     60 4E 05 F1 | 	add	fp, #96
33ecc     A7 14 02 FB | 	rdlong	arg02, fp
33ed0     6C 4E 85 F1 | 	sub	fp, #108
33ed4     00 16 06 F6 | 	mov	arg03, #0
33ed8     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
33edc     08 4E 05 F1 | 	add	fp, #8
33ee0     A7 FA 61 FC | 	wrlong	result1, fp
33ee4     08 4E 85 F1 | 	sub	fp, #8
33ee8                 | LR__5024
33ee8     08 4E 05 F1 | 	add	fp, #8
33eec     A7 FA 09 FB | 	rdlong	result1, fp wz
33ef0     08 4E 85 F1 | 	sub	fp, #8
33ef4     1C 00 90 5D |  if_ne	jmp	#LR__5025
33ef8     70 4E 05 F1 | 	add	fp, #112
33efc     A7 12 02 FB | 	rdlong	arg01, fp
33f00     70 4E 85 F1 | 	sub	fp, #112
33f04     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
33f08     08 4E 05 F1 | 	add	fp, #8
33f0c     A7 FA 61 FC | 	wrlong	result1, fp
33f10     08 4E 85 F1 | 	sub	fp, #8
33f14                 | LR__5025
33f14                 | LR__5026
33f14                 | LR__5027
33f14                 | LR__5028
33f14                 | ' 			}
33f14                 | ' 		}
33f14                 | ' 		;
33f14                 | ' 	}
33f14                 | ' 
33f14                 | ' 	return res ;
33f14     08 4E 05 F1 | 	add	fp, #8
33f18     A7 FA 01 FB | 	rdlong	result1, fp
33f1c     08 4E 85 F1 | 	sub	fp, #8
33f20     A7 F0 03 F6 | 	mov	ptra, fp
33f24     B2 00 A0 FD | 	call	#popregs_
33f28                 | _fatfs_cc_f_unlink_ret
33f28     2D 00 64 FD | 	ret
33f2c                 | 
33f2c                 | _fatfs_cc_f_mkdir
33f2c     00 4A 05 F6 | 	mov	COUNT_, #0
33f30     A8 00 A0 FD | 	call	#pushregs_
33f34     5C F0 07 F1 | 	add	ptra, #92
33f38     04 4E 05 F1 | 	add	fp, #4
33f3c     A7 12 62 FC | 	wrlong	arg01, fp
33f40     A7 12 02 F6 | 	mov	arg01, fp
33f44     48 4E 05 F1 | 	add	fp, #72
33f48     A7 14 02 F6 | 	mov	arg02, fp
33f4c     4C 4E 85 F1 | 	sub	fp, #76
33f50     02 16 06 F6 | 	mov	arg03, #2
33f54     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
33f58     08 4E 05 F1 | 	add	fp, #8
33f5c     A7 FA 61 FC | 	wrlong	result1, fp
33f60     08 4E 85 F1 | 	sub	fp, #8
33f64     00 FA 0D F2 | 	cmp	result1, #0 wz
33f68     C4 02 90 5D |  if_ne	jmp	#LR__5035
33f6c     4C 4E 05 F1 | 	add	fp, #76
33f70     A7 16 02 FB | 	rdlong	arg03, fp
33f74     40 4E 85 F1 | 	sub	fp, #64
33f78     A7 16 62 FC | 	wrlong	arg03, fp
33f7c     A7 12 02 F6 | 	mov	arg01, fp
33f80     08 4E 85 F1 | 	sub	fp, #8
33f84     A7 14 02 FB | 	rdlong	arg02, fp
33f88     04 4E 85 F1 | 	sub	fp, #4
33f8c     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
33f90     08 4E 05 F1 | 	add	fp, #8
33f94     A7 FA 61 FC | 	wrlong	result1, fp
33f98     00 FA 4D F2 | 	cmps	result1, #0 wz
33f9c     08 4E 85 F1 | 	sub	fp, #8
33fa0     08 4E 05 A1 |  if_e	add	fp, #8
33fa4     A7 10 68 AC |  if_e	wrlong	#8, fp
33fa8     08 4E 85 A1 |  if_e	sub	fp, #8
33fac     08 4E 05 F1 | 	add	fp, #8
33fb0     A7 FA 01 FB | 	rdlong	result1, fp
33fb4     08 4E 85 F1 | 	sub	fp, #8
33fb8     04 FA 0D F2 | 	cmp	result1, #4 wz
33fbc     70 02 90 5D |  if_ne	jmp	#LR__5034
33fc0     4C 4E 05 F1 | 	add	fp, #76
33fc4     A7 16 02 FB | 	rdlong	arg03, fp
33fc8     10 4E 85 F1 | 	sub	fp, #16
33fcc     A7 16 62 FC | 	wrlong	arg03, fp
33fd0     A7 12 02 F6 | 	mov	arg01, fp
33fd4     3C 4E 85 F1 | 	sub	fp, #60
33fd8     00 14 06 F6 | 	mov	arg02, #0
33fdc     04 AC BF FD | 	call	#_fatfs_cc_create_chain
33fe0     50 4E 05 F1 | 	add	fp, #80
33fe4     A7 FA 61 FC | 	wrlong	result1, fp
33fe8     48 4E 85 F1 | 	sub	fp, #72
33fec     A7 00 68 FC | 	wrlong	#0, fp
33ff0     48 4E 05 F1 | 	add	fp, #72
33ff4     A7 FA 09 FB | 	rdlong	result1, fp wz
33ff8     50 4E 85 F1 | 	sub	fp, #80
33ffc     08 4E 05 A1 |  if_e	add	fp, #8
34000     A7 0E 68 AC |  if_e	wrlong	#7, fp
34004     08 4E 85 A1 |  if_e	sub	fp, #8
34008     50 4E 05 F1 | 	add	fp, #80
3400c     A7 FA 01 FB | 	rdlong	result1, fp
34010     50 4E 85 F1 | 	sub	fp, #80
34014     01 FA 0D F2 | 	cmp	result1, #1 wz
34018     08 4E 05 A1 |  if_e	add	fp, #8
3401c     A7 04 68 AC |  if_e	wrlong	#2, fp
34020     08 4E 85 A1 |  if_e	sub	fp, #8
34024     50 4E 05 F1 | 	add	fp, #80
34028     A7 16 02 FB | 	rdlong	arg03, fp
3402c     50 4E 85 F1 | 	sub	fp, #80
34030     FF FF 7F FF 
34034     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
34038     08 4E 05 A1 |  if_e	add	fp, #8
3403c     A7 02 68 AC |  if_e	wrlong	#1, fp
34040     08 4E 85 A1 |  if_e	sub	fp, #8
34044     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
34048     58 4E 05 F1 | 	add	fp, #88
3404c     A7 FA 61 FC | 	wrlong	result1, fp
34050     50 4E 85 F1 | 	sub	fp, #80
34054     A7 FA 09 FB | 	rdlong	result1, fp wz
34058     08 4E 85 F1 | 	sub	fp, #8
3405c     1C 01 90 5D |  if_ne	jmp	#LR__5031
34060     4C 4E 05 F1 | 	add	fp, #76
34064     A7 12 02 FB | 	rdlong	arg01, fp
34068     04 4E 05 F1 | 	add	fp, #4
3406c     A7 14 02 FB | 	rdlong	arg02, fp
34070     50 4E 85 F1 | 	sub	fp, #80
34074     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
34078     08 4E 05 F1 | 	add	fp, #8
3407c     A7 FA 61 FC | 	wrlong	result1, fp
34080     00 FA 4D F2 | 	cmps	result1, #0 wz
34084     08 4E 85 F1 | 	sub	fp, #8
34088     F0 00 90 5D |  if_ne	jmp	#LR__5030
3408c     4C 4E 05 F1 | 	add	fp, #76
34090     A7 12 02 FB | 	rdlong	arg01, fp
34094     4C 4E 85 F1 | 	sub	fp, #76
34098     34 12 06 F1 | 	add	arg01, #52
3409c     20 14 06 F6 | 	mov	arg02, #32
340a0     0B 16 06 F6 | 	mov	arg03, #11
340a4     98 00 A0 FD | 	call	#\builtin_bytefill_
340a8     4C 4E 05 F1 | 	add	fp, #76
340ac     A7 FA 01 FB | 	rdlong	result1, fp
340b0     34 FA 05 F1 | 	add	result1, #52
340b4     FD 5C 48 FC | 	wrbyte	#46, result1
340b8     A7 16 02 FB | 	rdlong	arg03, fp
340bc     3F 16 06 F1 | 	add	arg03, #63
340c0     0B 21 48 FC | 	wrbyte	#16, arg03
340c4     A7 12 02 FB | 	rdlong	arg01, fp
340c8     4A 12 06 F1 | 	add	arg01, #74
340cc     0C 4E 05 F1 | 	add	fp, #12
340d0     A7 14 02 FB | 	rdlong	arg02, fp
340d4     09 15 62 FC | 	wrlong	arg02, arg01
340d8     0C 4E 85 F1 | 	sub	fp, #12
340dc     A7 14 02 FB | 	rdlong	arg02, fp
340e0     0A 13 02 F6 | 	mov	arg01, arg02
340e4     34 14 06 F1 | 	add	arg02, #52
340e8     04 4E 05 F1 | 	add	fp, #4
340ec     A7 16 02 FB | 	rdlong	arg03, fp
340f0     50 4E 85 F1 | 	sub	fp, #80
340f4     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
340f8     4C 4E 05 F1 | 	add	fp, #76
340fc     A7 14 02 FB | 	rdlong	arg02, fp
34100     0A 13 02 F6 | 	mov	arg01, arg02
34104     54 12 06 F1 | 	add	arg01, #84
34108     4C 4E 85 F1 | 	sub	fp, #76
3410c     34 14 06 F1 | 	add	arg02, #52
34110     20 16 06 F6 | 	mov	arg03, #32
34114     74 27 BF FD | 	call	#__system____builtin_memmove
34118     4C 4E 05 F1 | 	add	fp, #76
3411c     A7 16 02 FB | 	rdlong	arg03, fp
34120     55 16 06 F1 | 	add	arg03, #85
34124     0B 5D 48 FC | 	wrbyte	#46, arg03
34128     38 4E 85 F1 | 	sub	fp, #56
3412c     A7 16 02 FB | 	rdlong	arg03, fp
34130     40 4E 05 F1 | 	add	fp, #64
34134     A7 16 62 FC | 	wrlong	arg03, fp
34138     08 4E 85 F1 | 	sub	fp, #8
3413c     A7 14 02 FB | 	rdlong	arg02, fp
34140     0A 13 02 F6 | 	mov	arg01, arg02
34144     54 14 06 F1 | 	add	arg02, #84
34148     4C 4E 85 F1 | 	sub	fp, #76
3414c     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
34150     4C 4E 05 F1 | 	add	fp, #76
34154     A7 16 02 FB | 	rdlong	arg03, fp
34158     03 16 06 F1 | 	add	arg03, #3
3415c     0B 03 48 FC | 	wrbyte	#1, arg03
34160     40 4E 85 F1 | 	sub	fp, #64
34164     A7 12 02 F6 | 	mov	arg01, fp
34168     0C 4E 85 F1 | 	sub	fp, #12
3416c     44 BA BF FD | 	call	#_fatfs_cc_dir_register
34170     08 4E 05 F1 | 	add	fp, #8
34174     A7 FA 61 FC | 	wrlong	result1, fp
34178     08 4E 85 F1 | 	sub	fp, #8
3417c                 | LR__5030
3417c                 | LR__5031
3417c     08 4E 05 F1 | 	add	fp, #8
34180     A7 FA 09 FB | 	rdlong	result1, fp wz
34184     08 4E 85 F1 | 	sub	fp, #8
34188     88 00 90 5D |  if_ne	jmp	#LR__5032
3418c     28 4E 05 F1 | 	add	fp, #40
34190     A7 12 02 FB | 	rdlong	arg01, fp
34194     16 12 06 F1 | 	add	arg01, #22
34198     30 4E 05 F1 | 	add	fp, #48
3419c     A7 14 02 FB | 	rdlong	arg02, fp
341a0     09 15 62 FC | 	wrlong	arg02, arg01
341a4     0C 4E 85 F1 | 	sub	fp, #12
341a8     A7 12 02 FB | 	rdlong	arg01, fp
341ac     24 4E 85 F1 | 	sub	fp, #36
341b0     A7 14 02 FB | 	rdlong	arg02, fp
341b4     28 4E 05 F1 | 	add	fp, #40
341b8     A7 16 02 FB | 	rdlong	arg03, fp
341bc     50 4E 85 F1 | 	sub	fp, #80
341c0     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
341c4     28 4E 05 F1 | 	add	fp, #40
341c8     A7 FA 01 FB | 	rdlong	result1, fp
341cc     0B FA 05 F1 | 	add	result1, #11
341d0     FD 20 48 FC | 	wrbyte	#16, result1
341d4     24 4E 05 F1 | 	add	fp, #36
341d8     A7 FA 01 FB | 	rdlong	result1, fp
341dc     03 FA 05 F1 | 	add	result1, #3
341e0     FD 02 48 FC | 	wrbyte	#1, result1
341e4     44 4E 85 F1 | 	sub	fp, #68
341e8     A7 FA 09 FB | 	rdlong	result1, fp wz
341ec     08 4E 85 F1 | 	sub	fp, #8
341f0     3C 00 90 5D |  if_ne	jmp	#LR__5033
341f4     4C 4E 05 F1 | 	add	fp, #76
341f8     A7 12 02 FB | 	rdlong	arg01, fp
341fc     4C 4E 85 F1 | 	sub	fp, #76
34200     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
34204     08 4E 05 F1 | 	add	fp, #8
34208     A7 FA 61 FC | 	wrlong	result1, fp
3420c     08 4E 85 F1 | 	sub	fp, #8
34210     1C 00 90 FD | 	jmp	#LR__5033
34214                 | LR__5032
34214     3C 4E 05 F1 | 	add	fp, #60
34218     A7 12 02 F6 | 	mov	arg01, fp
3421c     14 4E 05 F1 | 	add	fp, #20
34220     A7 14 02 FB | 	rdlong	arg02, fp
34224     50 4E 85 F1 | 	sub	fp, #80
34228     00 16 06 F6 | 	mov	arg03, #0
3422c     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
34230                 | LR__5033
34230                 | LR__5034
34230                 | LR__5035
34230                 | ' 				remove_chain(&sobj, dcl, 0);
34230                 | ' 			}
34230                 | ' 		}
34230                 | ' 		;
34230                 | ' 	}
34230                 | ' 
34230                 | ' 	return res ;
34230     08 4E 05 F1 | 	add	fp, #8
34234     A7 FA 01 FB | 	rdlong	result1, fp
34238     08 4E 85 F1 | 	sub	fp, #8
3423c     A7 F0 03 F6 | 	mov	ptra, fp
34240     B2 00 A0 FD | 	call	#popregs_
34244                 | _fatfs_cc_f_mkdir_ret
34244     2D 00 64 FD | 	ret
34248                 | 
34248                 | _fatfs_cc_f_rename
34248     01 4A 05 F6 | 	mov	COUNT_, #1
3424c     A8 00 A0 FD | 	call	#pushregs_
34250     9C F0 07 F1 | 	add	ptra, #156
34254     04 4E 05 F1 | 	add	fp, #4
34258     A7 12 62 FC | 	wrlong	arg01, fp
3425c     04 4E 05 F1 | 	add	fp, #4
34260     A7 14 62 FC | 	wrlong	arg02, fp
34264     A7 12 02 F6 | 	mov	arg01, fp
34268     08 4E 85 F1 | 	sub	fp, #8
3426c     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
34270     04 4E 05 F1 | 	add	fp, #4
34274     A7 12 02 F6 | 	mov	arg01, fp
34278     6C 4E 05 F1 | 	add	fp, #108
3427c     A7 14 02 F6 | 	mov	arg02, fp
34280     70 4E 85 F1 | 	sub	fp, #112
34284     02 16 06 F6 | 	mov	arg03, #2
34288     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
3428c     0C 4E 05 F1 | 	add	fp, #12
34290     A7 FA 61 FC | 	wrlong	result1, fp
34294     0C 4E 85 F1 | 	sub	fp, #12
34298     00 FA 0D F2 | 	cmp	result1, #0 wz
3429c     44 03 90 5D |  if_ne	jmp	#LR__5053
342a0     70 4E 05 F1 | 	add	fp, #112
342a4     A7 16 02 FB | 	rdlong	arg03, fp
342a8     60 4E 85 F1 | 	sub	fp, #96
342ac     A7 16 62 FC | 	wrlong	arg03, fp
342b0     A7 12 02 F6 | 	mov	arg01, fp
342b4     0C 4E 85 F1 | 	sub	fp, #12
342b8     A7 14 02 FB | 	rdlong	arg02, fp
342bc     04 4E 85 F1 | 	sub	fp, #4
342c0     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
342c4     0C 4E 05 F1 | 	add	fp, #12
342c8     A7 FA 61 FC | 	wrlong	result1, fp
342cc     00 FA 4D F2 | 	cmps	result1, #0 wz
342d0     0C 4E 85 F1 | 	sub	fp, #12
342d4     1C 00 90 5D |  if_ne	jmp	#LR__5040
342d8     3B 4E 05 F1 | 	add	fp, #59
342dc     A7 FA C1 FA | 	rdbyte	result1, fp
342e0     3B 4E 85 F1 | 	sub	fp, #59
342e4     A0 FA CD F7 | 	test	result1, #160 wz
342e8     0C 4E 05 51 |  if_ne	add	fp, #12
342ec     A7 0C 68 5C |  if_ne	wrlong	#6, fp
342f0     0C 4E 85 51 |  if_ne	sub	fp, #12
342f4                 | LR__5040
342f4     0C 4E 05 F1 | 	add	fp, #12
342f8     A7 26 0A FB | 	rdlong	local01, fp wz
342fc     0C 4E 85 F1 | 	sub	fp, #12
34300     E0 02 90 5D |  if_ne	jmp	#LR__5052
34304     74 4E 05 F1 | 	add	fp, #116
34308     A7 12 02 F6 | 	mov	arg01, fp
3430c     48 4E 85 F1 | 	sub	fp, #72
34310     A7 14 02 FB | 	rdlong	arg02, fp
34314     2C 4E 85 F1 | 	sub	fp, #44
34318     20 16 06 F6 | 	mov	arg03, #32
3431c     6C 25 BF FD | 	call	#__system____builtin_memmove
34320     40 4E 05 F1 | 	add	fp, #64
34324     A7 12 02 F6 | 	mov	arg01, fp
34328     30 4E 85 F1 | 	sub	fp, #48
3432c     A7 14 02 F6 | 	mov	arg02, fp
34330     10 4E 85 F1 | 	sub	fp, #16
34334     30 16 06 F6 | 	mov	arg03, #48
34338     50 25 BF FD | 	call	#__system____builtin_memmove
3433c     40 4E 05 F1 | 	add	fp, #64
34340     A7 12 02 F6 | 	mov	arg01, fp
34344     38 4E 85 F1 | 	sub	fp, #56
34348     A7 14 02 FB | 	rdlong	arg02, fp
3434c     08 4E 85 F1 | 	sub	fp, #8
34350     34 CA BF FD | 	call	#_fatfs_cc_follow_path
34354     0C 4E 05 F1 | 	add	fp, #12
34358     A7 FA 61 FC | 	wrlong	result1, fp
3435c     0C 4E 85 F1 | 	sub	fp, #12
34360     00 FA 0D F2 | 	cmp	result1, #0 wz
34364     4C 00 90 5D |  if_ne	jmp	#LR__5043
34368     48 4E 05 F1 | 	add	fp, #72
3436c     A7 FA 01 FB | 	rdlong	result1, fp
34370     30 4E 85 F1 | 	sub	fp, #48
34374     A7 16 02 FB | 	rdlong	arg03, fp
34378     18 4E 85 F1 | 	sub	fp, #24
3437c     0B FB 09 F2 | 	cmp	result1, arg03 wz
34380     20 00 90 5D |  if_ne	jmp	#LR__5041
34384     50 4E 05 F1 | 	add	fp, #80
34388     A7 FA 01 FB | 	rdlong	result1, fp
3438c     30 4E 85 F1 | 	sub	fp, #48
34390     A7 16 02 FB | 	rdlong	arg03, fp
34394     20 4E 85 F1 | 	sub	fp, #32
34398     0B FB 09 F2 | 	cmp	result1, arg03 wz
3439c     04 26 06 A6 |  if_e	mov	local01, #4
343a0     04 00 90 AD |  if_e	jmp	#LR__5042
343a4                 | LR__5041
343a4     08 26 06 F6 | 	mov	local01, #8
343a8                 | LR__5042
343a8     0C 4E 05 F1 | 	add	fp, #12
343ac     A7 26 62 FC | 	wrlong	local01, fp
343b0     0C 4E 85 F1 | 	sub	fp, #12
343b4                 | LR__5043
343b4     0C 4E 05 F1 | 	add	fp, #12
343b8     A7 26 02 FB | 	rdlong	local01, fp
343bc     0C 4E 85 F1 | 	sub	fp, #12
343c0     04 26 0E F2 | 	cmp	local01, #4 wz
343c4     CC 01 90 5D |  if_ne	jmp	#LR__5049
343c8     40 4E 05 F1 | 	add	fp, #64
343cc     A7 12 02 F6 | 	mov	arg01, fp
343d0     40 4E 85 F1 | 	sub	fp, #64
343d4     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
343d8     0C 4E 05 F1 | 	add	fp, #12
343dc     A7 FA 61 FC | 	wrlong	result1, fp
343e0     0C 4E 85 F1 | 	sub	fp, #12
343e4     00 FA 0D F2 | 	cmp	result1, #0 wz
343e8     A8 01 90 5D |  if_ne	jmp	#LR__5048
343ec     5C 4E 05 F1 | 	add	fp, #92
343f0     A7 12 02 FB | 	rdlong	arg01, fp
343f4     38 4E 05 F1 | 	add	fp, #56
343f8     A7 12 62 FC | 	wrlong	arg01, fp
343fc     0D 12 06 F1 | 	add	arg01, #13
34400     20 4E 85 F1 | 	sub	fp, #32
34404     A7 14 02 F6 | 	mov	arg02, fp
34408     74 4E 85 F1 | 	sub	fp, #116
3440c     0D 14 06 F1 | 	add	arg02, #13
34410     13 16 06 F6 | 	mov	arg03, #19
34414     74 24 BF FD | 	call	#__system____builtin_memmove
34418     94 4E 05 F1 | 	add	fp, #148
3441c     A7 26 02 FB | 	rdlong	local01, fp
34420     15 4E 85 F1 | 	sub	fp, #21
34424     A7 FA C1 FA | 	rdbyte	result1, fp
34428     0B 26 06 F1 | 	add	local01, #11
3442c     13 FB 41 FC | 	wrbyte	result1, local01
34430     15 4E 05 F1 | 	add	fp, #21
34434     A7 26 02 FB | 	rdlong	local01, fp
34438     94 4E 85 F1 | 	sub	fp, #148
3443c     0B 26 06 F1 | 	add	local01, #11
34440     13 27 C2 FA | 	rdbyte	local01, local01
34444     10 26 CE F7 | 	test	local01, #16 wz
34448     24 00 90 5D |  if_ne	jmp	#LR__5044
3444c     94 4E 05 F1 | 	add	fp, #148
34450     A7 FA 01 FB | 	rdlong	result1, fp
34454     FD 26 02 F6 | 	mov	local01, result1
34458     94 4E 85 F1 | 	sub	fp, #148
3445c     0B FA 05 F1 | 	add	result1, #11
34460     FD FA C1 FA | 	rdbyte	result1, result1
34464     20 FA 45 F5 | 	or	result1, #32
34468     0B 26 06 F1 | 	add	local01, #11
3446c     13 FB 41 FC | 	wrbyte	result1, local01
34470                 | LR__5044
34470     70 4E 05 F1 | 	add	fp, #112
34474     A7 26 02 FB | 	rdlong	local01, fp
34478     03 26 06 F1 | 	add	local01, #3
3447c     13 03 48 FC | 	wrbyte	#1, local01
34480     24 4E 05 F1 | 	add	fp, #36
34484     A7 26 02 FB | 	rdlong	local01, fp
34488     94 4E 85 F1 | 	sub	fp, #148
3448c     0B 26 06 F1 | 	add	local01, #11
34490     13 27 C2 FA | 	rdbyte	local01, local01
34494     10 26 CE F7 | 	test	local01, #16 wz
34498     F8 00 90 AD |  if_e	jmp	#LR__5047
3449c     18 4E 05 F1 | 	add	fp, #24
344a0     A7 16 02 FB | 	rdlong	arg03, fp
344a4     30 4E 05 F1 | 	add	fp, #48
344a8     A7 26 02 FB | 	rdlong	local01, fp
344ac     48 4E 85 F1 | 	sub	fp, #72
344b0     13 17 0A F2 | 	cmp	arg03, local01 wz
344b4     DC 00 90 AD |  if_e	jmp	#LR__5047
344b8     70 4E 05 F1 | 	add	fp, #112
344bc     A7 12 02 FB | 	rdlong	arg01, fp
344c0     09 27 02 F6 | 	mov	local01, arg01
344c4     24 4E 05 F1 | 	add	fp, #36
344c8     A7 14 02 FB | 	rdlong	arg02, fp
344cc     94 4E 85 F1 | 	sub	fp, #148
344d0     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
344d4     FD 14 02 F6 | 	mov	arg02, result1
344d8     13 13 02 F6 | 	mov	arg01, local01
344dc     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
344e0     98 4E 05 F1 | 	add	fp, #152
344e4     A7 FA 61 FC | 	wrlong	result1, fp
344e8     00 FA 4D F2 | 	cmps	result1, #0 wz
344ec     98 4E 85 F1 | 	sub	fp, #152
344f0     0C 4E 05 A1 |  if_e	add	fp, #12
344f4     A7 04 68 AC |  if_e	wrlong	#2, fp
344f8     0C 4E 85 A1 |  if_e	sub	fp, #12
344fc     94 00 90 AD |  if_e	jmp	#LR__5046
34500     70 4E 05 F1 | 	add	fp, #112
34504     A7 12 02 FB | 	rdlong	arg01, fp
34508     28 4E 05 F1 | 	add	fp, #40
3450c     A7 14 02 FB | 	rdlong	arg02, fp
34510     98 4E 85 F1 | 	sub	fp, #152
34514     4C A0 BF FD | 	call	#_fatfs_cc_move_window
34518     0C 4E 05 F1 | 	add	fp, #12
3451c     A7 FA 61 FC | 	wrlong	result1, fp
34520     64 4E 05 F1 | 	add	fp, #100
34524     A7 26 02 FB | 	rdlong	local01, fp
34528     54 26 06 F1 | 	add	local01, #84
3452c     24 4E 05 F1 | 	add	fp, #36
34530     A7 26 62 FC | 	wrlong	local01, fp
34534     88 4E 85 F1 | 	sub	fp, #136
34538     A7 26 0A FB | 	rdlong	local01, fp wz
3453c     0C 4E 85 F1 | 	sub	fp, #12
34540     50 00 90 5D |  if_ne	jmp	#LR__5045
34544     94 4E 05 F1 | 	add	fp, #148
34548     A7 26 02 FB | 	rdlong	local01, fp
3454c     94 4E 85 F1 | 	sub	fp, #148
34550     01 26 06 F1 | 	add	local01, #1
34554     13 27 C2 FA | 	rdbyte	local01, local01
34558     2E 26 0E F2 | 	cmp	local01, #46 wz
3455c     34 00 90 5D |  if_ne	jmp	#LR__5045
34560     70 4E 05 F1 | 	add	fp, #112
34564     A7 12 02 FB | 	rdlong	arg01, fp
34568     24 4E 05 F1 | 	add	fp, #36
3456c     A7 14 02 FB | 	rdlong	arg02, fp
34570     4C 4E 85 F1 | 	sub	fp, #76
34574     A7 16 02 FB | 	rdlong	arg03, fp
34578     48 4E 85 F1 | 	sub	fp, #72
3457c     50 AD BF FD | 	call	#_fatfs_cc_st_clust
34580     70 4E 05 F1 | 	add	fp, #112
34584     A7 26 02 FB | 	rdlong	local01, fp
34588     70 4E 85 F1 | 	sub	fp, #112
3458c     03 26 06 F1 | 	add	local01, #3
34590     13 03 48 FC | 	wrbyte	#1, local01
34594                 | LR__5045
34594                 | LR__5046
34594                 | LR__5047
34594                 | LR__5048
34594                 | LR__5049
34594     0C 4E 05 F1 | 	add	fp, #12
34598     A7 26 0A FB | 	rdlong	local01, fp wz
3459c     0C 4E 85 F1 | 	sub	fp, #12
345a0     40 00 90 5D |  if_ne	jmp	#LR__5051
345a4     10 4E 05 F1 | 	add	fp, #16
345a8     A7 12 02 F6 | 	mov	arg01, fp
345ac     10 4E 85 F1 | 	sub	fp, #16
345b0     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
345b4     0C 4E 05 F1 | 	add	fp, #12
345b8     A7 FA 61 FC | 	wrlong	result1, fp
345bc     0C 4E 85 F1 | 	sub	fp, #12
345c0     00 FA 0D F2 | 	cmp	result1, #0 wz
345c4     1C 00 90 5D |  if_ne	jmp	#LR__5050
345c8     70 4E 05 F1 | 	add	fp, #112
345cc     A7 12 02 FB | 	rdlong	arg01, fp
345d0     70 4E 85 F1 | 	sub	fp, #112
345d4     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
345d8     0C 4E 05 F1 | 	add	fp, #12
345dc     A7 FA 61 FC | 	wrlong	result1, fp
345e0     0C 4E 85 F1 | 	sub	fp, #12
345e4                 | LR__5050
345e4                 | LR__5051
345e4                 | LR__5052
345e4                 | LR__5053
345e4                 | ' 					res = sync_fs(fs);
345e4                 | ' 				}
345e4                 | ' 			}
345e4                 | ' 
345e4                 | ' 		}
345e4                 | ' 		;
345e4                 | ' 	}
345e4                 | ' 
345e4                 | ' 	return res ;
345e4     0C 4E 05 F1 | 	add	fp, #12
345e8     A7 FA 01 FB | 	rdlong	result1, fp
345ec     0C 4E 85 F1 | 	sub	fp, #12
345f0     A7 F0 03 F6 | 	mov	ptra, fp
345f4     B2 00 A0 FD | 	call	#popregs_
345f8                 | _fatfs_cc_f_rename_ret
345f8     2D 00 64 FD | 	ret
345fc                 | 
345fc                 | _fatfs_cc_time
345fc     00 4A 05 F6 | 	mov	COUNT_, #0
34600     A8 00 A0 FD | 	call	#pushregs_
34604     14 F0 07 F1 | 	add	ptra, #20
34608     04 4E 05 F1 | 	add	fp, #4
3460c     A7 12 62 FC | 	wrlong	arg01, fp
34610     04 4E 05 F1 | 	add	fp, #4
34614     A7 12 02 F6 | 	mov	arg01, fp
34618     08 4E 85 F1 | 	sub	fp, #8
3461c     00 14 06 F6 | 	mov	arg02, #0
34620     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
34624     08 4E 05 F1 | 	add	fp, #8
34628     A7 FA 01 FB | 	rdlong	result1, fp
3462c     08 4E 05 F1 | 	add	fp, #8
34630     A7 FA 61 FC | 	wrlong	result1, fp
34634     0C 4E 85 F1 | 	sub	fp, #12
34638     A7 FA 09 FB | 	rdlong	result1, fp wz
3463c     04 4E 85 F1 | 	sub	fp, #4
34640     18 00 90 AD |  if_e	jmp	#LR__5060
34644     04 4E 05 F1 | 	add	fp, #4
34648     A7 FA 01 FB | 	rdlong	result1, fp
3464c     0C 4E 05 F1 | 	add	fp, #12
34650     A7 14 02 FB | 	rdlong	arg02, fp
34654     10 4E 85 F1 | 	sub	fp, #16
34658     FD 14 62 FC | 	wrlong	arg02, result1
3465c                 | LR__5060
3465c                 | '         *tp = now;
3465c                 | '     return now;
3465c     10 4E 05 F1 | 	add	fp, #16
34660     A7 FA 01 FB | 	rdlong	result1, fp
34664     10 4E 85 F1 | 	sub	fp, #16
34668     A7 F0 03 F6 | 	mov	ptra, fp
3466c     B2 00 A0 FD | 	call	#popregs_
34670                 | _fatfs_cc_time_ret
34670     2D 00 64 FD | 	ret
34674                 | 
34674                 | _fatfs_cc_mktime
34674     06 4A 05 F6 | 	mov	COUNT_, #6
34678     A8 00 A0 FD | 	call	#pushregs_
3467c     09 27 02 F6 | 	mov	local01, arg01
34680     14 26 06 F1 | 	add	local01, #20
34684     13 13 02 FB | 	rdlong	arg01, local01
34688     14 26 86 F1 | 	sub	local01, #20
3468c     46 12 56 F2 | 	cmps	arg01, #70 wc
34690                 | '                 return (time_t) -1;
34690     01 FA 65 C6 |  if_b	neg	result1, #1
34694     7C 01 90 CD |  if_b	jmp	#LR__5074
34698     03 00 00 FF 
3469c     6C 29 06 F6 | 	mov	local02, ##1900
346a0     14 26 06 F1 | 	add	local01, #20
346a4     13 FB 01 FB | 	rdlong	result1, local01
346a8     FD 28 02 F1 | 	add	local02, result1
346ac     08 26 86 F1 | 	sub	local01, #8
346b0     13 2B 02 FB | 	rdlong	local03, local01
346b4     01 2A 86 F1 | 	sub	local03, #1
346b8     04 26 06 F1 | 	add	local01, #4
346bc     13 13 02 FB | 	rdlong	arg01, local01
346c0     10 26 86 F1 | 	sub	local01, #16
346c4     02 12 66 F0 | 	shl	arg01, #2
346c8     02 00 00 FF 
346cc     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
346d0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
346d4     09 FB 01 FB | 	rdlong	result1, arg01
346d8     FD 2A 02 F1 | 	add	local03, result1
346dc     14 13 02 F6 | 	mov	arg01, local02
346e0     02 00 00 FF 
346e4     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
346e8     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
346ec     00 FA 0D F2 | 	cmp	result1, #0 wz
346f0     1C 00 90 AD |  if_e	jmp	#LR__5070
346f4     00 2C 06 F6 | 	mov	local04, #0
346f8     10 26 06 F1 | 	add	local01, #16
346fc     13 FB 01 FB | 	rdlong	result1, local01
34700     10 26 86 F1 | 	sub	local01, #16
34704     02 FA 55 F2 | 	cmps	result1, #2 wc
34708     01 2C 06 36 |  if_ae	mov	local04, #1
3470c     04 00 90 FD | 	jmp	#LR__5071
34710                 | LR__5070
34710     00 2C 06 F6 | 	mov	local04, #0
34714                 | LR__5071
34714     04 26 06 F1 | 	add	local01, #4
34718     13 FB 01 FB | 	rdlong	result1, local01
3471c     04 26 86 F1 | 	sub	local01, #4
34720     13 2F 02 FB | 	rdlong	local05, local01
34724     08 26 06 F1 | 	add	local01, #8
34728     13 13 02 FB | 	rdlong	arg01, local01
3472c     07 00 00 FF 
34730     10 12 06 FD | 	qmul	arg01, ##3600
34734     16 2B 02 F1 | 	add	local03, local04
34738     FD 2C 02 F6 | 	mov	local04, result1
3473c     04 2C 66 F0 | 	shl	local04, #4
34740     FD 2C 82 F1 | 	sub	local04, result1
34744     02 2C 66 F0 | 	shl	local04, #2
34748     16 2F 02 F1 | 	add	local05, local04
3474c     08 26 86 F1 | 	sub	local01, #8
34750     18 2C 62 FD | 	getqx	local04
34754     A8 00 00 FF 
34758     80 2B 06 FD | 	qmul	local03, ##86400
3475c     16 2F 02 F1 | 	add	local05, local04
34760     14 2B 02 F6 | 	mov	local03, local02
34764     03 00 00 FF 
34768     B2 2B 86 F1 | 	sub	local03, ##1970
3476c     18 2C 62 FD | 	getqx	local04
34770     99 F0 00 FF 
34774     80 2B 06 FD | 	qmul	local03, ##31536000
34778     16 2F 02 F1 | 	add	local05, local04
3477c     14 2B 02 F6 | 	mov	local03, local02
34780     03 00 00 FF 
34784     B1 2B 86 F1 | 	sub	local03, ##1969
34788     15 31 52 F6 | 	abs	local06, local03 wc
3478c     02 30 46 F0 | 	shr	local06, #2
34790     18 31 82 F6 | 	negc	local06, local06
34794     03 00 00 FF 
34798     D1 29 56 F2 | 	cmps	local02, ##2001 wc
3479c     18 2C 62 FD | 	getqx	local04
347a0     16 2F 02 F1 | 	add	local05, local04
347a4     18 00 90 CD |  if_b	jmp	#LR__5072
347a8     03 00 00 FF 
347ac     D0 29 86 F1 | 	sub	local02, ##2000
347b0     14 2D 52 F6 | 	abs	local04, local02 wc
347b4     64 2C 16 FD | 	qdiv	local04, #100
347b8     18 2C 62 FD | 	getqx	local04
347bc     16 31 A2 F3 | 	sumnc	local06, local04
347c0                 | LR__5072
347c0     A8 00 00 FF 
347c4     80 31 06 FD | 	qmul	local06, ##86400
347c8     18 30 62 FD | 	getqx	local06
347cc     18 2F 02 F1 | 	add	local05, local06
347d0     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
347d4     02 00 00 FF 
347d8     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
347dc     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
347e0     18 2F 02 F1 | 	add	local05, local06
347e4     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
347e8     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
347ec     02 00 00 FF 
347f0     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
347f4     01 2A 0E F2 | 	cmp	local03, #1 wz
347f8     14 00 90 5D |  if_ne	jmp	#LR__5073
347fc     13 13 02 F6 | 	mov	arg01, local01
34800     DC 19 B0 FD | 	call	#_fatfs_cc___indst
34804     00 FA 0D F2 | 	cmp	result1, #0 wz
34808     07 00 00 5F 
3480c     10 2E 86 51 |  if_ne	sub	local05, ##3600
34810                 | LR__5073
34810                 | '                 s -=  (3600L) ;
34810                 | ' 
34810                 | '         return s;
34810     17 FB 01 F6 | 	mov	result1, local05
34814                 | LR__5074
34814     A7 F0 03 F6 | 	mov	ptra, fp
34818     B2 00 A0 FD | 	call	#popregs_
3481c                 | _fatfs_cc_mktime_ret
3481c     2D 00 64 FD | 	ret
34820                 | 
34820                 | _fatfs_cc__gmtime_r
34820     03 4A 05 F6 | 	mov	COUNT_, #3
34824     A8 00 A0 FD | 	call	#pushregs_
34828     09 27 02 FB | 	rdlong	local01, arg01
3482c     A8 00 00 FF 
34830     80 27 16 FD | 	qdiv	local01, ##86400
34834     18 FA 61 FD | 	getqx	result1
34838     04 FA 05 F1 | 	add	result1, #4
3483c     07 FA 15 FD | 	qdiv	result1, #7
34840     18 14 06 F1 | 	add	arg02, #24
34844     D1 7F 27 FF 
34848     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
3484c     D1 7F 27 3F 
34850     00 26 86 31 |  if_ae	sub	local01, ##1325376000
34854     03 00 00 3F 
34858     DC 29 06 36 |  if_ae	mov	local02, ##2012
3485c     03 00 00 CF 
34860     B2 29 06 C6 |  if_b	mov	local02, ##1970
34864                 | ' 	  year = 1970;
34864                 | ' 	}
34864                 | ' 
34864                 | ' 	for(;;) {
34864     19 FA 61 FD | 	getqy	result1
34868     0A FB 61 FC | 	wrlong	result1, arg02
3486c     18 14 86 F1 | 	sub	arg02, #24
34870                 | LR__5080
34870     14 13 02 F6 | 	mov	arg01, local02
34874     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
34878     00 FA 0D F2 | 	cmp	result1, #0 wz
3487c     42 F1 00 5F 
34880     00 2B 06 56 |  if_ne	mov	local03, ##31622400
34884     99 F0 00 AF 
34888     80 2B 06 A6 |  if_e	mov	local03, ##31536000
3488c     15 27 12 F2 | 	cmp	local01, local03 wc
34890                 | ' 	    break;
34890     01 28 06 31 |  if_ae	add	local02, #1
34894     15 27 82 31 |  if_ae	sub	local01, local03
34898     D4 FF 9F 3D |  if_ae	jmp	#LR__5080
3489c     A8 00 00 FF 
348a0     80 27 16 FD | 	qdiv	local01, ##86400
348a4     14 2B 02 F6 | 	mov	local03, local02
348a8     03 00 00 FF 
348ac     6C 2B 86 F1 | 	sub	local03, ##1900
348b0     14 14 06 F1 | 	add	arg02, #20
348b4     0A 2B 62 FC | 	wrlong	local03, arg02
348b8     08 14 06 F1 | 	add	arg02, #8
348bc     14 13 02 F6 | 	mov	arg01, local02
348c0     18 28 62 FD | 	getqx	local02
348c4     0A 29 62 FC | 	wrlong	local02, arg02
348c8     1C 14 86 F1 | 	sub	arg02, #28
348cc     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
348d0     00 FA 0D F2 | 	cmp	result1, #0 wz
348d4     1D 2A 06 56 |  if_ne	mov	local03, #29
348d8     1C 2A 06 A6 |  if_e	mov	local03, #28
348dc     02 00 00 FF 
348e0     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
348e4     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
348e8     02 00 00 FF 
348ec     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
348f0                 | ' 
348f0                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
348f0                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
348f0     00 12 06 F6 | 	mov	arg01, #0
348f4     97 2A 48 FB | 	callpa	#(@LR__5082-@LR__5081)>>2,fcache_load_ptr_
348f8                 | LR__5081
348f8     09 2B 02 F6 | 	mov	local03, arg01
348fc     02 2A 66 F0 | 	shl	local03, #2
34900     02 00 00 FF 
34904     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
34908     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
3490c     15 2B 02 FB | 	rdlong	local03, local03
34910     15 29 52 F2 | 	cmps	local02, local03 wc
34914     02 00 00 FF 
34918     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
3491c     2C 00 90 CD |  if_b	jmp	#LR__5083
34920     09 2B 02 F6 | 	mov	local03, arg01
34924     02 2A 66 F0 | 	shl	local03, #2
34928     02 00 00 FF 
3492c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
34930     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
34934     15 2B 02 FB | 	rdlong	local03, local03
34938     15 29 82 F1 | 	sub	local02, local03
3493c     01 12 06 F1 | 	add	arg01, #1
34940     02 00 00 FF 
34944     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
34948     AC FF 9F FD | 	jmp	#LR__5081
3494c                 | LR__5082
3494c                 | LR__5083
3494c     A8 00 00 FF 
34950     80 27 16 FD | 	qdiv	local01, ##86400
34954     10 14 06 F1 | 	add	arg02, #16
34958     0A 13 62 FC | 	wrlong	arg01, arg02
3495c     01 28 06 F1 | 	add	local02, #1
34960     04 14 86 F1 | 	sub	arg02, #4
34964     0A 29 62 FC | 	wrlong	local02, arg02
34968     19 26 62 FD | 	getqy	local01
3496c     07 00 00 FF 
34970     10 26 16 FD | 	qdiv	local01, ##3600
34974     18 2A 62 FD | 	getqx	local03
34978     07 00 00 FF 
3497c     10 26 16 FD | 	qdiv	local01, ##3600
34980     04 14 86 F1 | 	sub	arg02, #4
34984     0A 2B 62 FC | 	wrlong	local03, arg02
34988     19 26 62 FD | 	getqy	local01
3498c     3C 26 16 FD | 	qdiv	local01, #60
34990     18 2A 62 FD | 	getqx	local03
34994     3C 26 16 FD | 	qdiv	local01, #60
34998     04 14 86 F1 | 	sub	arg02, #4
3499c     0A 2B 62 FC | 	wrlong	local03, arg02
349a0     04 14 86 F1 | 	sub	arg02, #4
349a4                 | '         stm->tm_isdst = 0;
349a4                 | ' 
349a4                 | ' ;
349a4                 | '         return stm;
349a4     0A FB 01 F6 | 	mov	result1, arg02
349a8     19 2A 62 FD | 	getqy	local03
349ac     0A 2B 62 FC | 	wrlong	local03, arg02
349b0     20 14 06 F1 | 	add	arg02, #32
349b4     0A 01 68 FC | 	wrlong	#0, arg02
349b8     A7 F0 03 F6 | 	mov	ptra, fp
349bc     B2 00 A0 FD | 	call	#popregs_
349c0                 | _fatfs_cc__gmtime_r_ret
349c0     2D 00 64 FD | 	ret
349c4                 | 
349c4                 | _fatfs_cc__tzset
349c4     B2 01 00 FF 
349c8     09 13 06 F6 | 	mov	arg01, ##@LR__5395
349cc     34 00 B0 FD | 	call	#_fatfs_cc_getenv
349d0     FD 12 02 F6 | 	mov	arg01, result1
349d4     02 00 00 FF 
349d8     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
349dc     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
349e0     02 00 00 FF 
349e4     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
349e8     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
349ec     02 00 00 FF 
349f0     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
349f4     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
349f8     02 00 00 FF 
349fc     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
34a00                 | _fatfs_cc__tzset_ret
34a00     2D 00 64 FD | 	ret
34a04                 | 
34a04                 | _fatfs_cc_getenv
34a04     06 4A 05 F6 | 	mov	COUNT_, #6
34a08     A8 00 A0 FD | 	call	#pushregs_
34a0c     09 27 02 F6 | 	mov	local01, arg01
34a10     09 29 02 F6 | 	mov	local02, arg01
34a14     97 06 48 FB | 	callpa	#(@LR__5091-@LR__5090)>>2,fcache_load_ptr_
34a18                 | LR__5090
34a18     14 FB C9 FA | 	rdbyte	result1, local02 wz
34a1c     01 28 06 51 |  if_ne	add	local02, #1
34a20     F4 FF 9F 5D |  if_ne	jmp	#LR__5090
34a24                 | LR__5091
34a24     09 29 82 F1 | 	sub	local02, arg01
34a28     14 FB 01 F6 | 	mov	result1, local02
34a2c     02 00 00 FF 
34a30     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
34a34     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
34a38     02 00 00 FF 
34a3c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
34a40                 | '             return 0;
34a40     00 FA 05 A6 |  if_e	mov	result1, #0
34a44     5C 00 90 AD |  if_e	jmp	#LR__5094
34a48                 | ' 
34a48                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
34a48     02 00 00 FF 
34a4c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
34a50     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
34a54     02 00 00 FF 
34a58     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
34a5c                 | LR__5092
34a5c     15 2D 0A FB | 	rdlong	local04, local03 wz
34a60     3C 00 90 AD |  if_e	jmp	#LR__5093
34a64     16 13 02 F6 | 	mov	arg01, local04
34a68     13 15 02 F6 | 	mov	arg02, local01
34a6c     14 17 02 F6 | 	mov	arg03, local02
34a70     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
34a74     00 FA 0D F2 | 	cmp	result1, #0 wz
34a78     14 2F 02 A6 |  if_e	mov	local05, local02
34a7c     16 2F 02 A1 |  if_e	add	local05, local04
34a80     17 31 C2 AA |  if_e	rdbyte	local06, local05
34a84     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
34a88                 | ' 			return name+len+1;
34a88     14 2D 02 A1 |  if_e	add	local04, local02
34a8c     01 2C 06 A1 |  if_e	add	local04, #1
34a90     16 FB 01 A6 |  if_e	mov	result1, local04
34a94     0C 00 90 AD |  if_e	jmp	#LR__5094
34a98     04 2A 06 F1 | 	add	local03, #4
34a9c     BC FF 9F FD | 	jmp	#LR__5092
34aa0                 | LR__5093
34aa0                 | ' 	}
34aa0                 | ' 	return 0;
34aa0     00 FA 05 F6 | 	mov	result1, #0
34aa4                 | LR__5094
34aa4     A7 F0 03 F6 | 	mov	ptra, fp
34aa8     B2 00 A0 FD | 	call	#popregs_
34aac                 | _fatfs_cc_getenv_ret
34aac     2D 00 64 FD | 	ret
34ab0                 | 
34ab0                 | _fatfs_cc__get_fattime
34ab0     00 4A 05 F6 | 	mov	COUNT_, #0
34ab4     A8 00 A0 FD | 	call	#pushregs_
34ab8     34 F0 07 F1 | 	add	ptra, #52
34abc     00 12 06 F6 | 	mov	arg01, #0
34ac0     38 FB BF FD | 	call	#_fatfs_cc_time
34ac4     04 4E 05 F1 | 	add	fp, #4
34ac8     A7 FA 61 FC | 	wrlong	result1, fp
34acc     A7 12 02 F6 | 	mov	arg01, fp
34ad0     0C 4E 05 F1 | 	add	fp, #12
34ad4     A7 14 02 F6 | 	mov	arg02, fp
34ad8     10 4E 85 F1 | 	sub	fp, #16
34adc     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
34ae0     24 4E 05 F1 | 	add	fp, #36
34ae4     A7 14 02 FB | 	rdlong	arg02, fp
34ae8     50 14 86 F1 | 	sub	arg02, #80
34aec     09 14 66 F0 | 	shl	arg02, #9
34af0     04 4E 85 F1 | 	sub	fp, #4
34af4     A7 FA 01 FB | 	rdlong	result1, fp
34af8     01 FA 05 F1 | 	add	result1, #1
34afc     05 FA 65 F0 | 	shl	result1, #5
34b00     FD 14 42 F5 | 	or	arg02, result1
34b04     04 4E 85 F1 | 	sub	fp, #4
34b08     A7 FA 01 FB | 	rdlong	result1, fp
34b0c     FD 14 42 F5 | 	or	arg02, result1
34b10     14 4E 85 F1 | 	sub	fp, #20
34b14     A7 14 62 FC | 	wrlong	arg02, fp
34b18     10 4E 05 F1 | 	add	fp, #16
34b1c     A7 14 02 FB | 	rdlong	arg02, fp
34b20     0B 14 66 F0 | 	shl	arg02, #11
34b24     04 4E 85 F1 | 	sub	fp, #4
34b28     A7 FA 01 FB | 	rdlong	result1, fp
34b2c     05 FA 65 F0 | 	shl	result1, #5
34b30     FD 14 42 F5 | 	or	arg02, result1
34b34     04 4E 85 F1 | 	sub	fp, #4
34b38     A7 FA 01 FB | 	rdlong	result1, fp
34b3c     FD 14 42 F5 | 	or	arg02, result1
34b40     04 4E 85 F1 | 	sub	fp, #4
34b44     A7 14 62 FC | 	wrlong	arg02, fp
34b48                 | ' 
34b48                 | '     now = time(0);
34b48                 | '     _gmtime_r (&now, &date);
34b48                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
34b48                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
34b48                 | '     return (ffdate << 16) | fftime;
34b48     04 4E 85 F1 | 	sub	fp, #4
34b4c     A7 FA 01 FB | 	rdlong	result1, fp
34b50     10 FA 65 F0 | 	shl	result1, #16
34b54     08 4E 85 F1 | 	sub	fp, #8
34b58     0A FB 41 F5 | 	or	result1, arg02
34b5c     A7 F0 03 F6 | 	mov	ptra, fp
34b60     B2 00 A0 FD | 	call	#popregs_
34b64                 | _fatfs_cc__get_fattime_ret
34b64     2D 00 64 FD | 	ret
34b68                 | 
34b68                 | _fatfs_cc_unixtime_1035
34b68     00 4A 05 F6 | 	mov	COUNT_, #0
34b6c     A8 00 A0 FD | 	call	#pushregs_
34b70     34 F0 07 F1 | 	add	ptra, #52
34b74     04 4E 05 F1 | 	add	fp, #4
34b78     A7 12 62 FC | 	wrlong	arg01, fp
34b7c     04 4E 05 F1 | 	add	fp, #4
34b80     A7 14 62 FC | 	wrlong	arg02, fp
34b84     04 4E 85 F1 | 	sub	fp, #4
34b88     A7 14 02 FB | 	rdlong	arg02, fp
34b8c     09 14 46 F0 | 	shr	arg02, #9
34b90     7F 14 06 F5 | 	and	arg02, #127
34b94     50 FA 05 F6 | 	mov	result1, #80
34b98     0A FB 01 F1 | 	add	result1, arg02
34b9c     20 4E 05 F1 | 	add	fp, #32
34ba0     A7 FA 61 FC | 	wrlong	result1, fp
34ba4     20 4E 85 F1 | 	sub	fp, #32
34ba8     A7 FA 01 FB | 	rdlong	result1, fp
34bac     05 FA 45 F0 | 	shr	result1, #5
34bb0     FD FA 41 F8 | 	getnib	result1, result1, #0
34bb4     01 FA 85 F1 | 	sub	result1, #1
34bb8     1C 4E 05 F1 | 	add	fp, #28
34bbc     A7 FA 61 FC | 	wrlong	result1, fp
34bc0     1C 4E 85 F1 | 	sub	fp, #28
34bc4     A7 FA 01 FB | 	rdlong	result1, fp
34bc8     1F FA 05 F5 | 	and	result1, #31
34bcc     18 4E 05 F1 | 	add	fp, #24
34bd0     A7 FA 61 FC | 	wrlong	result1, fp
34bd4     14 4E 85 F1 | 	sub	fp, #20
34bd8     A7 FA 01 FB | 	rdlong	result1, fp
34bdc     0B FA 45 F0 | 	shr	result1, #11
34be0     1F FA 05 F5 | 	and	result1, #31
34be4     10 4E 05 F1 | 	add	fp, #16
34be8     A7 FA 61 FC | 	wrlong	result1, fp
34bec     10 4E 85 F1 | 	sub	fp, #16
34bf0     A7 FA 01 FB | 	rdlong	result1, fp
34bf4     05 FA 45 F0 | 	shr	result1, #5
34bf8     3F FA 05 F5 | 	and	result1, #63
34bfc     0C 4E 05 F1 | 	add	fp, #12
34c00     A7 FA 61 FC | 	wrlong	result1, fp
34c04     0C 4E 85 F1 | 	sub	fp, #12
34c08     A7 14 02 FB | 	rdlong	arg02, fp
34c0c     1F 14 06 F5 | 	and	arg02, #31
34c10     01 14 66 F0 | 	shl	arg02, #1
34c14     08 4E 05 F1 | 	add	fp, #8
34c18     A7 14 62 FC | 	wrlong	arg02, fp
34c1c     A7 12 02 F6 | 	mov	arg01, fp
34c20     10 4E 85 F1 | 	sub	fp, #16
34c24     4C FA BF FD | 	call	#_fatfs_cc_mktime
34c28     0C 4E 05 F1 | 	add	fp, #12
34c2c     A7 FA 61 FC | 	wrlong	result1, fp
34c30                 | ' 
34c30                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
34c30                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
34c30                 | '     date.tm_mday = (dosdate & 0x1f);
34c30                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
34c30                 | '     date.tm_min = (dostime >> 5) & 0x3f;
34c30                 | '     date.tm_sec = (dostime & 0x1f) << 1;
34c30                 | ' 
34c30                 | '     t = mktime(&date);
34c30                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34c30                 | '     return t;
34c30     0C 4E 85 F1 | 	sub	fp, #12
34c34     A7 F0 03 F6 | 	mov	ptra, fp
34c38     B2 00 A0 FD | 	call	#popregs_
34c3c                 | _fatfs_cc_unixtime_1035_ret
34c3c     2D 00 64 FD | 	ret
34c40                 | 
34c40                 | _fatfs_cc__set_dos_error_1037
34c40     09 01 02 F6 | 	mov	_var01, arg01
34c44                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34c44                 | '     switch (derr) {
34c44     14 00 26 F3 | 	fle	_var01, #20
34c48     30 00 62 FD | 	jmprel	_var01
34c4c                 | LR__5100
34c4c     50 00 90 FD | 	jmp	#LR__5101
34c50     84 00 90 FD | 	jmp	#LR__5115
34c54     80 00 90 FD | 	jmp	#LR__5116
34c58     7C 00 90 FD | 	jmp	#LR__5117
34c5c     48 00 90 FD | 	jmp	#LR__5102
34c60     44 00 90 FD | 	jmp	#LR__5103
34c64     40 00 90 FD | 	jmp	#LR__5104
34c68     44 00 90 FD | 	jmp	#LR__5105
34c6c     48 00 90 FD | 	jmp	#LR__5107
34c70     54 00 90 FD | 	jmp	#LR__5110
34c74     38 00 90 FD | 	jmp	#LR__5106
34c78     4C 00 90 FD | 	jmp	#LR__5111
34c7c     48 00 90 FD | 	jmp	#LR__5112
34c80     44 00 90 FD | 	jmp	#LR__5113
34c84     50 00 90 FD | 	jmp	#LR__5118
34c88     4C 00 90 FD | 	jmp	#LR__5118
34c8c     48 00 90 FD | 	jmp	#LR__5118
34c90     2C 00 90 FD | 	jmp	#LR__5108
34c94     38 00 90 FD | 	jmp	#LR__5114
34c98     2C 00 90 FD | 	jmp	#LR__5109
34c9c     38 00 90 FD | 	jmp	#LR__5118
34ca0                 | LR__5101
34ca0     00 02 06 F6 | 	mov	_var02, #0
34ca4                 | '         r = 0;
34ca4                 | '         break;
34ca4     34 00 90 FD | 	jmp	#LR__5119
34ca8                 | LR__5102
34ca8                 | LR__5103
34ca8                 | LR__5104
34ca8     04 02 06 F6 | 	mov	_var02, #4
34cac                 | '         r =  4 ;
34cac                 | '         break;
34cac     2C 00 90 FD | 	jmp	#LR__5119
34cb0                 | LR__5105
34cb0                 | LR__5106
34cb0     06 02 06 F6 | 	mov	_var02, #6
34cb4                 | '         r =  6 ;
34cb4                 | '         break;
34cb4     24 00 90 FD | 	jmp	#LR__5119
34cb8                 | LR__5107
34cb8     09 02 06 F6 | 	mov	_var02, #9
34cbc                 | '         r =  9 ;
34cbc                 | '         break;
34cbc     1C 00 90 FD | 	jmp	#LR__5119
34cc0                 | LR__5108
34cc0     07 02 06 F6 | 	mov	_var02, #7
34cc4                 | '         r =  7 ;
34cc4                 | '         break;
34cc4     14 00 90 FD | 	jmp	#LR__5119
34cc8                 | LR__5109
34cc8                 | LR__5110
34cc8                 | LR__5111
34cc8                 | LR__5112
34cc8                 | LR__5113
34cc8     0A 02 06 F6 | 	mov	_var02, #10
34ccc                 | '         r =  10 ;
34ccc                 | '         break;
34ccc     0C 00 90 FD | 	jmp	#LR__5119
34cd0                 | LR__5114
34cd0     0B 02 06 F6 | 	mov	_var02, #11
34cd4                 | '         r =  11 ;
34cd4                 | '         break;
34cd4     04 00 90 FD | 	jmp	#LR__5119
34cd8                 | LR__5115
34cd8                 | LR__5116
34cd8                 | LR__5117
34cd8                 | LR__5118
34cd8     0C 02 06 F6 | 	mov	_var02, #12
34cdc                 | '         r =  12 ;
34cdc                 | '         break;
34cdc                 | LR__5119
34cdc                 | '     }
34cdc                 | '     return _seterror(r);
34cdc     00 02 4E F2 | 	cmps	_var02, #0 wz
34ce0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
34ce4     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
34ce8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
34cec     01 FA 65 56 |  if_ne	neg	result1, #1
34cf0     00 FA 05 A6 |  if_e	mov	result1, #0
34cf4                 | _fatfs_cc__set_dos_error_1037_ret
34cf4     2D 00 64 FD | 	ret
34cf8                 | 
34cf8                 | _fatfs_cc_v_creat
34cf8     04 4A 05 F6 | 	mov	COUNT_, #4
34cfc     A8 00 A0 FD | 	call	#pushregs_
34d00     09 27 02 F6 | 	mov	local01, arg01
34d04     0A 29 02 F6 | 	mov	local02, arg02
34d08     03 00 00 FF 
34d0c     3C 12 06 F6 | 	mov	arg01, ##1596
34d10                 | '     return _gc_alloc(size);
34d10     10 14 06 F6 | 	mov	arg02, #16
34d14     28 5E BF FD | 	call	#__system___gc_doalloc
34d18     FD 2A 0A F6 | 	mov	local03, result1 wz
34d1c                 | '       return _seterror( 7 );
34d1c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34d20     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
34d24     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34d28     01 FA 65 A6 |  if_e	neg	result1, #1
34d2c     58 00 90 AD |  if_e	jmp	#LR__5121
34d30     15 13 02 F6 | 	mov	arg01, local03
34d34     00 14 06 F6 | 	mov	arg02, #0
34d38     03 00 00 FF 
34d3c     3C 16 06 F6 | 	mov	arg03, ##1596
34d40     98 00 A0 FD | 	call	#\builtin_bytefill_
34d44     02 00 00 FF 
34d48     14 2A 06 F1 | 	add	local03, ##1044
34d4c     15 13 02 F6 | 	mov	arg01, local03
34d50     02 00 00 FF 
34d54     14 2A 86 F1 | 	sub	local03, ##1044
34d58     14 15 02 F6 | 	mov	arg02, local02
34d5c     07 16 06 F6 | 	mov	arg03, #7
34d60     B4 CC BF FD | 	call	#_fatfs_cc_f_open
34d64     FD 2C 0A F6 | 	mov	local04, result1 wz
34d68     14 00 90 AD |  if_e	jmp	#LR__5120
34d6c     15 13 02 F6 | 	mov	arg01, local03
34d70                 | '     return _gc_free(ptr);
34d70     D8 5E BF FD | 	call	#__system___gc_free
34d74                 | '     free(f);
34d74                 | '     return _set_dos_error(r);
34d74     16 13 02 F6 | 	mov	arg01, local04
34d78     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1037
34d7c     08 00 90 FD | 	jmp	#LR__5121
34d80                 | LR__5120
34d80     13 2B 62 FC | 	wrlong	local03, local01
34d84                 | '   }
34d84                 | '   fil->vfsdata = f;
34d84                 | '   return 0;
34d84     00 FA 05 F6 | 	mov	result1, #0
34d88                 | LR__5121
34d88     A7 F0 03 F6 | 	mov	ptra, fp
34d8c     B2 00 A0 FD | 	call	#popregs_
34d90                 | _fatfs_cc_v_creat_ret
34d90     2D 00 64 FD | 	ret
34d94                 | 
34d94                 | _fatfs_cc_v_close
34d94     02 4A 05 F6 | 	mov	COUNT_, #2
34d98     A8 00 A0 FD | 	call	#pushregs_
34d9c     09 27 02 FB | 	rdlong	local01, arg01
34da0     02 00 00 FF 
34da4     14 26 06 F1 | 	add	local01, ##1044
34da8     13 13 02 F6 | 	mov	arg01, local01
34dac     02 00 00 FF 
34db0     14 26 86 F1 | 	sub	local01, ##1044
34db4     DC E3 BF FD | 	call	#_fatfs_cc_f_close
34db8     FD 28 02 F6 | 	mov	local02, result1
34dbc     13 13 02 F6 | 	mov	arg01, local01
34dc0                 | '     return _gc_free(ptr);
34dc0     88 5E BF FD | 	call	#__system___gc_free
34dc4                 | '     FAT_FIL *f = fil->vfsdata;
34dc4                 | '     r=f_close(&f->fil);
34dc4                 | '     free(f);
34dc4                 | '     return _set_dos_error(r);
34dc4     14 13 02 F6 | 	mov	arg01, local02
34dc8     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1037
34dcc     A7 F0 03 F6 | 	mov	ptra, fp
34dd0     B2 00 A0 FD | 	call	#popregs_
34dd4                 | _fatfs_cc_v_close_ret
34dd4     2D 00 64 FD | 	ret
34dd8                 | 
34dd8                 | _fatfs_cc_v_opendir
34dd8     04 4A 05 F6 | 	mov	COUNT_, #4
34ddc     A8 00 A0 FD | 	call	#pushregs_
34de0     09 27 02 F6 | 	mov	local01, arg01
34de4     0A 29 02 F6 | 	mov	local02, arg02
34de8     30 12 06 F6 | 	mov	arg01, #48
34dec                 | '     return _gc_alloc(size);
34dec     10 14 06 F6 | 	mov	arg02, #16
34df0     4C 5D BF FD | 	call	#__system___gc_doalloc
34df4     FD 2A 0A F6 | 	mov	local03, result1 wz
34df8                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34df8                 | '       return _seterror( 7 );
34df8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34dfc     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
34e00     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34e04     01 FA 65 A6 |  if_e	neg	result1, #1
34e08     34 00 90 AD |  if_e	jmp	#LR__5131
34e0c     14 15 02 F6 | 	mov	arg02, local02
34e10     15 13 02 F6 | 	mov	arg01, local03
34e14     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
34e18     FD 2C 0A F6 | 	mov	local04, result1 wz
34e1c     14 00 90 AD |  if_e	jmp	#LR__5130
34e20     15 13 02 F6 | 	mov	arg01, local03
34e24                 | '     return _gc_free(ptr);
34e24     24 5E BF FD | 	call	#__system___gc_free
34e28                 | '         free(f);
34e28                 | '         return _set_dos_error(r);
34e28     16 13 02 F6 | 	mov	arg01, local04
34e2c     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1037
34e30     0C 00 90 FD | 	jmp	#LR__5131
34e34                 | LR__5130
34e34     04 26 06 F1 | 	add	local01, #4
34e38     13 2B 62 FC | 	wrlong	local03, local01
34e3c                 | '     }
34e3c                 | '     dir->vfsdata = f;
34e3c                 | '     return 0;
34e3c     00 FA 05 F6 | 	mov	result1, #0
34e40                 | LR__5131
34e40     A7 F0 03 F6 | 	mov	ptra, fp
34e44     B2 00 A0 FD | 	call	#popregs_
34e48                 | _fatfs_cc_v_opendir_ret
34e48     2D 00 64 FD | 	ret
34e4c                 | 
34e4c                 | _fatfs_cc_v_closedir
34e4c     02 4A 05 F6 | 	mov	COUNT_, #2
34e50     A8 00 A0 FD | 	call	#pushregs_
34e54     04 12 06 F1 | 	add	arg01, #4
34e58     09 27 02 FB | 	rdlong	local01, arg01
34e5c     13 13 02 F6 | 	mov	arg01, local01
34e60     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
34e64     FD 28 02 F6 | 	mov	local02, result1
34e68     13 13 02 F6 | 	mov	arg01, local01
34e6c                 | '     return _gc_free(ptr);
34e6c     DC 5D BF FD | 	call	#__system___gc_free
34e70     00 28 0E F2 | 	cmp	local02, #0 wz
34e74     14 13 02 56 |  if_ne	mov	arg01, local02
34e78     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1037
34e7c                 | '     return r;
34e7c     14 FB 01 F6 | 	mov	result1, local02
34e80     A7 F0 03 F6 | 	mov	ptra, fp
34e84     B2 00 A0 FD | 	call	#popregs_
34e88                 | _fatfs_cc_v_closedir_ret
34e88     2D 00 64 FD | 	ret
34e8c                 | 
34e8c                 | _fatfs_cc_v_readdir
34e8c     01 4A 05 F6 | 	mov	COUNT_, #1
34e90     A8 00 A0 FD | 	call	#pushregs_
34e94     2C F1 07 F1 | 	add	ptra, #300
34e98     04 4E 05 F1 | 	add	fp, #4
34e9c     A7 12 62 FC | 	wrlong	arg01, fp
34ea0     04 4E 05 F1 | 	add	fp, #4
34ea4     A7 14 62 FC | 	wrlong	arg02, fp
34ea8     04 4E 85 F1 | 	sub	fp, #4
34eac     A7 16 02 FB | 	rdlong	arg03, fp
34eb0     04 16 06 F1 | 	add	arg03, #4
34eb4     0B 13 02 FB | 	rdlong	arg01, arg03
34eb8     08 4E 05 F1 | 	add	fp, #8
34ebc     A7 14 02 F6 | 	mov	arg02, fp
34ec0     0C 4E 85 F1 | 	sub	fp, #12
34ec4     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
34ec8     28 4F 05 F1 | 	add	fp, #296
34ecc     A7 FA 61 FC | 	wrlong	result1, fp
34ed0     28 4F 85 F1 | 	sub	fp, #296
34ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
34ed8     14 00 90 AD |  if_e	jmp	#LR__5140
34edc                 | '         return _set_dos_error(r);
34edc     28 4F 05 F1 | 	add	fp, #296
34ee0     A7 12 02 FB | 	rdlong	arg01, fp
34ee4     28 4F 85 F1 | 	sub	fp, #296
34ee8     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1037
34eec     C4 00 90 FD | 	jmp	#LR__5143
34ef0                 | LR__5140
34ef0     28 4E 05 F1 | 	add	fp, #40
34ef4     A7 16 CA FA | 	rdbyte	arg03, fp wz
34ef8     28 4E 85 F1 | 	sub	fp, #40
34efc                 | '         return -1;
34efc     01 FA 65 A6 |  if_e	neg	result1, #1
34f00     B0 00 90 AD |  if_e	jmp	#LR__5143
34f04     08 4E 05 F1 | 	add	fp, #8
34f08     A7 12 02 FB | 	rdlong	arg01, fp
34f0c     20 4E 05 F1 | 	add	fp, #32
34f10     A7 14 02 F6 | 	mov	arg02, fp
34f14     28 4E 85 F1 | 	sub	fp, #40
34f18     3F 16 06 F6 | 	mov	arg03, #63
34f1c     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
34f20     08 4E 05 F1 | 	add	fp, #8
34f24     A7 16 02 FB | 	rdlong	arg03, fp
34f28     3F 16 06 F1 | 	add	arg03, #63
34f2c     0B 01 48 FC | 	wrbyte	#0, arg03
34f30     0C 4E 05 F1 | 	add	fp, #12
34f34     A7 16 C2 FA | 	rdbyte	arg03, fp
34f38     14 4E 85 F1 | 	sub	fp, #20
34f3c     10 16 CE F7 | 	test	arg03, #16 wz
34f40     18 00 90 AD |  if_e	jmp	#LR__5141
34f44     08 4E 05 F1 | 	add	fp, #8
34f48     A7 16 02 FB | 	rdlong	arg03, fp
34f4c     08 4E 85 F1 | 	sub	fp, #8
34f50     50 16 06 F1 | 	add	arg03, #80
34f54     0B 03 48 FC | 	wrbyte	#1, arg03
34f58     14 00 90 FD | 	jmp	#LR__5142
34f5c                 | LR__5141
34f5c     08 4E 05 F1 | 	add	fp, #8
34f60     A7 16 02 FB | 	rdlong	arg03, fp
34f64     08 4E 85 F1 | 	sub	fp, #8
34f68     50 16 06 F1 | 	add	arg03, #80
34f6c     0B 01 48 FC | 	wrbyte	#0, arg03
34f70                 | LR__5142
34f70     08 4E 05 F1 | 	add	fp, #8
34f74     A7 16 02 FB | 	rdlong	arg03, fp
34f78     04 4E 05 F1 | 	add	fp, #4
34f7c     A7 14 02 FB | 	rdlong	arg02, fp
34f80     48 16 06 F1 | 	add	arg03, #72
34f84     0B 15 62 FC | 	wrlong	arg02, arg03
34f88     04 4E 85 F1 | 	sub	fp, #4
34f8c     A7 26 02 FB | 	rdlong	local01, fp
34f90     08 4E 05 F1 | 	add	fp, #8
34f94     A7 12 E2 FA | 	rdword	arg01, fp
34f98     02 4E 05 F1 | 	add	fp, #2
34f9c     A7 14 E2 FA | 	rdword	arg02, fp
34fa0     12 4E 85 F1 | 	sub	fp, #18
34fa4     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_1035
34fa8     4C 26 06 F1 | 	add	local01, #76
34fac     13 FB 61 FC | 	wrlong	result1, local01
34fb0                 | '         ent->d_type =  (0) ;
34fb0                 | '     }
34fb0                 | '     ent->d_size = finfo.fsize;
34fb0                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
34fb0                 | '     return 0;
34fb0     00 FA 05 F6 | 	mov	result1, #0
34fb4                 | LR__5143
34fb4     A7 F0 03 F6 | 	mov	ptra, fp
34fb8     B2 00 A0 FD | 	call	#popregs_
34fbc                 | _fatfs_cc_v_readdir_ret
34fbc     2D 00 64 FD | 	ret
34fc0                 | 
34fc0                 | _fatfs_cc_v_stat
34fc0     03 4A 05 F6 | 	mov	COUNT_, #3
34fc4     A8 00 A0 FD | 	call	#pushregs_
34fc8     30 F1 07 F1 | 	add	ptra, #304
34fcc     04 4E 05 F1 | 	add	fp, #4
34fd0     A7 12 62 FC | 	wrlong	arg01, fp
34fd4     04 4E 05 F1 | 	add	fp, #4
34fd8     A7 14 62 FC | 	wrlong	arg02, fp
34fdc     08 4E 85 F1 | 	sub	fp, #8
34fe0     0A 13 02 F6 | 	mov	arg01, arg02
34fe4     00 14 06 F6 | 	mov	arg02, #0
34fe8     30 16 06 F6 | 	mov	arg03, #48
34fec     98 00 A0 FD | 	call	#\builtin_bytefill_
34ff0     04 4E 05 F1 | 	add	fp, #4
34ff4     A7 FA 01 FB | 	rdlong	result1, fp
34ff8     04 4E 85 F1 | 	sub	fp, #4
34ffc     FD FA C9 FA | 	rdbyte	result1, result1 wz
35000     2C 00 90 AD |  if_e	jmp	#LR__5150
35004     04 4E 05 F1 | 	add	fp, #4
35008     A7 FA 01 FB | 	rdlong	result1, fp
3500c     04 4E 85 F1 | 	sub	fp, #4
35010     FD FA C1 FA | 	rdbyte	result1, result1
35014     2E FA 0D F2 | 	cmp	result1, #46 wz
35018     04 4E 05 A1 |  if_e	add	fp, #4
3501c     A7 26 02 AB |  if_e	rdlong	local01, fp
35020     04 4E 85 A1 |  if_e	sub	fp, #4
35024     01 26 06 A1 |  if_e	add	local01, #1
35028     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
3502c     18 00 90 5D |  if_ne	jmp	#LR__5151
35030                 | LR__5150
35030     18 4E 05 F1 | 	add	fp, #24
35034     A7 20 48 FC | 	wrbyte	#16, fp
35038     0C 4E 85 F1 | 	sub	fp, #12
3503c     A7 00 68 FC | 	wrlong	#0, fp
35040     0C 4E 85 F1 | 	sub	fp, #12
35044     24 00 90 FD | 	jmp	#LR__5152
35048                 | LR__5151
35048     04 4E 05 F1 | 	add	fp, #4
3504c     A7 12 02 FB | 	rdlong	arg01, fp
35050     0C 4E 05 F1 | 	add	fp, #12
35054     A7 14 02 F6 | 	mov	arg02, fp
35058     10 4E 85 F1 | 	sub	fp, #16
3505c     AC EB BF FD | 	call	#_fatfs_cc_f_stat
35060     0C 4E 05 F1 | 	add	fp, #12
35064     A7 FA 61 FC | 	wrlong	result1, fp
35068     0C 4E 85 F1 | 	sub	fp, #12
3506c                 | LR__5152
3506c     0C 4E 05 F1 | 	add	fp, #12
35070     A7 28 0A FB | 	rdlong	local02, fp wz
35074     0C 4E 85 F1 | 	sub	fp, #12
35078     14 00 90 AD |  if_e	jmp	#LR__5153
3507c                 | '         return _set_dos_error(r);
3507c     0C 4E 05 F1 | 	add	fp, #12
35080     A7 12 02 FB | 	rdlong	arg01, fp
35084     0C 4E 85 F1 | 	sub	fp, #12
35088     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1037
3508c     14 01 90 FD | 	jmp	#LR__5154
35090                 | LR__5153
35090     2C 4F 05 F1 | 	add	fp, #300
35094     A7 48 6A FC | 	wrlong	#292, fp
35098     14 4F 85 F1 | 	sub	fp, #276
3509c     A7 2A C2 FA | 	rdbyte	local03, fp
350a0     18 4E 85 F1 | 	sub	fp, #24
350a4     01 2A CE F7 | 	test	local03, #1 wz
350a8     2C 4F 05 A1 |  if_e	add	fp, #300
350ac     A7 2A 02 AB |  if_e	rdlong	local03, fp
350b0     92 2A 46 A5 |  if_e	or	local03, #146
350b4     A7 2A 62 AC |  if_e	wrlong	local03, fp
350b8     2C 4F 85 A1 |  if_e	sub	fp, #300
350bc     18 4E 05 F1 | 	add	fp, #24
350c0     A7 2A C2 FA | 	rdbyte	local03, fp
350c4     18 4E 85 F1 | 	sub	fp, #24
350c8     10 2A CE F7 | 	test	local03, #16 wz
350cc     2C 4F 05 51 |  if_ne	add	fp, #300
350d0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
350d4     08 00 00 5F 
350d8     49 2A 46 55 |  if_ne	or	local03, ##4169
350dc     A7 2A 62 5C |  if_ne	wrlong	local03, fp
350e0     2C 4F 85 51 |  if_ne	sub	fp, #300
350e4     08 4E 05 F1 | 	add	fp, #8
350e8     A7 2A 02 FB | 	rdlong	local03, fp
350ec     24 4F 05 F1 | 	add	fp, #292
350f0     A7 28 02 FB | 	rdlong	local02, fp
350f4     08 2A 06 F1 | 	add	local03, #8
350f8     15 29 62 FC | 	wrlong	local02, local03
350fc     24 4F 85 F1 | 	sub	fp, #292
35100     A7 2A 02 FB | 	rdlong	local03, fp
35104     0C 2A 06 F1 | 	add	local03, #12
35108     15 03 68 FC | 	wrlong	#1, local03
3510c     A7 2A 02 FB | 	rdlong	local03, fp
35110     08 4E 05 F1 | 	add	fp, #8
35114     A7 28 02 FB | 	rdlong	local02, fp
35118     18 2A 06 F1 | 	add	local03, #24
3511c     15 29 62 FC | 	wrlong	local02, local03
35120     08 4E 85 F1 | 	sub	fp, #8
35124     A7 2A 02 FB | 	rdlong	local03, fp
35128     1C 2A 06 F1 | 	add	local03, #28
3512c     01 00 80 FF 
35130     15 01 68 FC | 	wrlong	##512, local03
35134     A7 28 02 FB | 	rdlong	local02, fp
35138     14 2B 02 F6 | 	mov	local03, local02
3513c     18 28 06 F1 | 	add	local02, #24
35140     14 29 02 FB | 	rdlong	local02, local02
35144     FF 29 06 F1 | 	add	local02, #511
35148     14 29 52 F6 | 	abs	local02, local02 wc
3514c     09 28 46 F0 | 	shr	local02, #9
35150     14 29 82 F6 | 	negc	local02, local02
35154     20 2A 06 F1 | 	add	local03, #32
35158     15 29 62 FC | 	wrlong	local02, local03
3515c     A7 28 02 FB | 	rdlong	local02, fp
35160     14 2B 02 F6 | 	mov	local03, local02
35164     14 27 02 F6 | 	mov	local01, local02
35168     0C 4E 05 F1 | 	add	fp, #12
3516c     A7 12 E2 FA | 	rdword	arg01, fp
35170     02 4E 05 F1 | 	add	fp, #2
35174     A7 14 E2 FA | 	rdword	arg02, fp
35178     16 4E 85 F1 | 	sub	fp, #22
3517c     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_1035
35180     2C 26 06 F1 | 	add	local01, #44
35184     13 FB 61 FC | 	wrlong	result1, local01
35188     28 28 06 F1 | 	add	local02, #40
3518c     14 FB 61 FC | 	wrlong	result1, local02
35190     24 2A 06 F1 | 	add	local03, #36
35194     15 FB 61 FC | 	wrlong	result1, local03
35198                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
35198                 | '     }
35198                 | '     buf->st_mode = mode;
35198                 | '     buf->st_nlink = 1;
35198                 | '     buf->st_size = finfo.fsize;
35198                 | '     buf->st_blksize = 512;
35198                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
35198                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
35198                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35198                 | '     return r;
35198     0C 4E 05 F1 | 	add	fp, #12
3519c     A7 FA 01 FB | 	rdlong	result1, fp
351a0     0C 4E 85 F1 | 	sub	fp, #12
351a4                 | LR__5154
351a4     A7 F0 03 F6 | 	mov	ptra, fp
351a8     B2 00 A0 FD | 	call	#popregs_
351ac                 | _fatfs_cc_v_stat_ret
351ac     2D 00 64 FD | 	ret
351b0                 | 
351b0                 | _fatfs_cc_v_read
351b0     00 4A 05 F6 | 	mov	COUNT_, #0
351b4     A8 00 A0 FD | 	call	#pushregs_
351b8     1C F0 07 F1 | 	add	ptra, #28
351bc     04 4E 05 F1 | 	add	fp, #4
351c0     A7 12 62 FC | 	wrlong	arg01, fp
351c4     04 4E 05 F1 | 	add	fp, #4
351c8     A7 14 62 FC | 	wrlong	arg02, fp
351cc     04 4E 05 F1 | 	add	fp, #4
351d0     A7 16 62 FC | 	wrlong	arg03, fp
351d4     08 4E 85 F1 | 	sub	fp, #8
351d8     A7 12 02 FB | 	rdlong	arg01, fp
351dc     09 13 0A FB | 	rdlong	arg01, arg01 wz
351e0     0C 4E 05 F1 | 	add	fp, #12
351e4     A7 12 62 FC | 	wrlong	arg01, fp
351e8     10 4E 85 F1 | 	sub	fp, #16
351ec                 | '         return _seterror( 5 );
351ec     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
351f0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
351f4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
351f8     01 FA 65 A6 |  if_e	neg	result1, #1
351fc     B8 00 90 AD |  if_e	jmp	#LR__5162
35200     10 4E 05 F1 | 	add	fp, #16
35204     A7 12 02 FB | 	rdlong	arg01, fp
35208     02 00 00 FF 
3520c     14 12 06 F1 | 	add	arg01, ##1044
35210     08 4E 85 F1 | 	sub	fp, #8
35214     A7 14 02 FB | 	rdlong	arg02, fp
35218     04 4E 05 F1 | 	add	fp, #4
3521c     A7 16 02 FB | 	rdlong	arg03, fp
35220     0C 4E 05 F1 | 	add	fp, #12
35224     A7 18 02 F6 | 	mov	arg04, fp
35228     18 4E 85 F1 | 	sub	fp, #24
3522c     C4 CE BF FD | 	call	#_fatfs_cc_f_read
35230     14 4E 05 F1 | 	add	fp, #20
35234     A7 FA 61 FC | 	wrlong	result1, fp
35238     14 4E 85 F1 | 	sub	fp, #20
3523c     00 FA 0D F2 | 	cmp	result1, #0 wz
35240     34 00 90 AD |  if_e	jmp	#LR__5160
35244     04 4E 05 F1 | 	add	fp, #4
35248     A7 18 02 FB | 	rdlong	arg04, fp
3524c     0C 17 02 F6 | 	mov	arg03, arg04
35250     08 18 06 F1 | 	add	arg04, #8
35254     0C 19 02 FB | 	rdlong	arg04, arg04
35258     20 18 46 F5 | 	or	arg04, #32
3525c     08 16 06 F1 | 	add	arg03, #8
35260     0B 19 62 FC | 	wrlong	arg04, arg03
35264                 | '         fil->state |=  (0x20) ;
35264                 | '         return _set_dos_error(r);
35264     10 4E 05 F1 | 	add	fp, #16
35268     A7 12 02 FB | 	rdlong	arg01, fp
3526c     14 4E 85 F1 | 	sub	fp, #20
35270     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1037
35274     40 00 90 FD | 	jmp	#LR__5162
35278                 | LR__5160
35278     18 4E 05 F1 | 	add	fp, #24
3527c     A7 FA 09 FB | 	rdlong	result1, fp wz
35280     18 4E 85 F1 | 	sub	fp, #24
35284     24 00 90 5D |  if_ne	jmp	#LR__5161
35288     04 4E 05 F1 | 	add	fp, #4
3528c     A7 FA 01 FB | 	rdlong	result1, fp
35290     FD 18 02 F6 | 	mov	arg04, result1
35294     04 4E 85 F1 | 	sub	fp, #4
35298     08 FA 05 F1 | 	add	result1, #8
3529c     FD FA 01 FB | 	rdlong	result1, result1
352a0     10 FA 45 F5 | 	or	result1, #16
352a4     08 18 06 F1 | 	add	arg04, #8
352a8     0C FB 61 FC | 	wrlong	result1, arg04
352ac                 | LR__5161
352ac                 | '         fil->state |=  (0x10) ;
352ac                 | '     }
352ac                 | '     return x;
352ac     18 4E 05 F1 | 	add	fp, #24
352b0     A7 FA 01 FB | 	rdlong	result1, fp
352b4     18 4E 85 F1 | 	sub	fp, #24
352b8                 | LR__5162
352b8     A7 F0 03 F6 | 	mov	ptra, fp
352bc     B2 00 A0 FD | 	call	#popregs_
352c0                 | _fatfs_cc_v_read_ret
352c0     2D 00 64 FD | 	ret
352c4                 | 
352c4                 | _fatfs_cc_v_write
352c4     00 4A 05 F6 | 	mov	COUNT_, #0
352c8     A8 00 A0 FD | 	call	#pushregs_
352cc     1C F0 07 F1 | 	add	ptra, #28
352d0     04 4E 05 F1 | 	add	fp, #4
352d4     A7 12 62 FC | 	wrlong	arg01, fp
352d8     04 4E 05 F1 | 	add	fp, #4
352dc     A7 14 62 FC | 	wrlong	arg02, fp
352e0     04 4E 05 F1 | 	add	fp, #4
352e4     A7 16 62 FC | 	wrlong	arg03, fp
352e8     08 4E 85 F1 | 	sub	fp, #8
352ec     A7 12 02 FB | 	rdlong	arg01, fp
352f0     09 13 0A FB | 	rdlong	arg01, arg01 wz
352f4     0C 4E 05 F1 | 	add	fp, #12
352f8     A7 12 62 FC | 	wrlong	arg01, fp
352fc     10 4E 85 F1 | 	sub	fp, #16
35300                 | '         return _seterror( 5 );
35300     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35304     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35308     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
3530c     01 FA 65 A6 |  if_e	neg	result1, #1
35310     84 00 90 AD |  if_e	jmp	#LR__5171
35314     10 4E 05 F1 | 	add	fp, #16
35318     A7 12 02 FB | 	rdlong	arg01, fp
3531c     02 00 00 FF 
35320     14 12 06 F1 | 	add	arg01, ##1044
35324     08 4E 85 F1 | 	sub	fp, #8
35328     A7 14 02 FB | 	rdlong	arg02, fp
3532c     04 4E 05 F1 | 	add	fp, #4
35330     A7 16 02 FB | 	rdlong	arg03, fp
35334     0C 4E 05 F1 | 	add	fp, #12
35338     A7 18 02 F6 | 	mov	arg04, fp
3533c     18 4E 85 F1 | 	sub	fp, #24
35340     4C D4 BF FD | 	call	#_fatfs_cc_f_write
35344     14 4E 05 F1 | 	add	fp, #20
35348     A7 FA 61 FC | 	wrlong	result1, fp
3534c     14 4E 85 F1 | 	sub	fp, #20
35350     00 FA 0D F2 | 	cmp	result1, #0 wz
35354     34 00 90 AD |  if_e	jmp	#LR__5170
35358     04 4E 05 F1 | 	add	fp, #4
3535c     A7 18 02 FB | 	rdlong	arg04, fp
35360     0C 17 02 F6 | 	mov	arg03, arg04
35364     08 18 06 F1 | 	add	arg04, #8
35368     0C 19 02 FB | 	rdlong	arg04, arg04
3536c     20 18 46 F5 | 	or	arg04, #32
35370     08 16 06 F1 | 	add	arg03, #8
35374     0B 19 62 FC | 	wrlong	arg04, arg03
35378                 | '         fil->state |=  (0x20) ;
35378                 | '         return _set_dos_error(r);
35378     10 4E 05 F1 | 	add	fp, #16
3537c     A7 12 02 FB | 	rdlong	arg01, fp
35380     14 4E 85 F1 | 	sub	fp, #20
35384     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1037
35388     0C 00 90 FD | 	jmp	#LR__5171
3538c                 | LR__5170
3538c                 | '     }
3538c                 | '     return x;
3538c     18 4E 05 F1 | 	add	fp, #24
35390     A7 FA 01 FB | 	rdlong	result1, fp
35394     18 4E 85 F1 | 	sub	fp, #24
35398                 | LR__5171
35398     A7 F0 03 F6 | 	mov	ptra, fp
3539c     B2 00 A0 FD | 	call	#popregs_
353a0                 | _fatfs_cc_v_write_ret
353a0     2D 00 64 FD | 	ret
353a4                 | 
353a4                 | _fatfs_cc_v_lseek
353a4     04 4A 05 F6 | 	mov	COUNT_, #4
353a8     A8 00 A0 FD | 	call	#pushregs_
353ac     0A 27 02 F6 | 	mov	local01, arg02
353b0     0B 29 02 F6 | 	mov	local02, arg03
353b4     09 2B 02 FB | 	rdlong	local03, arg01
353b8     02 00 00 FF 
353bc     14 2A 0E F1 | 	add	local03, ##1044 wz
353c0                 | '         return _seterror( 5 );
353c0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
353c4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
353c8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
353cc     01 FA 65 A6 |  if_e	neg	result1, #1
353d0     4C 00 90 AD |  if_e	jmp	#LR__5182
353d4     00 28 0E F2 | 	cmp	local02, #0 wz
353d8     24 00 90 AD |  if_e	jmp	#LR__5180
353dc     01 28 0E F2 | 	cmp	local02, #1 wz
353e0     14 2A 06 A1 |  if_e	add	local03, #20
353e4     15 2D 02 AB |  if_e	rdlong	local04, local03
353e8     14 2A 86 A1 |  if_e	sub	local03, #20
353ec     16 27 02 A1 |  if_e	add	local01, local04
353f0     0C 2A 06 51 |  if_ne	add	local03, #12
353f4     15 2D 02 5B |  if_ne	rdlong	local04, local03
353f8     0C 2A 86 51 |  if_ne	sub	local03, #12
353fc     16 27 02 51 |  if_ne	add	local01, local04
35400                 | LR__5180
35400     13 15 02 F6 | 	mov	arg02, local01
35404     15 13 02 F6 | 	mov	arg01, local03
35408     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
3540c     FD 12 0A F6 | 	mov	arg01, result1 wz
35410     08 00 90 AD |  if_e	jmp	#LR__5181
35414                 | '         return _set_dos_error(result);
35414     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1037
35418     04 00 90 FD | 	jmp	#LR__5182
3541c                 | LR__5181
3541c                 | '     }
3541c                 | '     return offset;
3541c     13 FB 01 F6 | 	mov	result1, local01
35420                 | LR__5182
35420     A7 F0 03 F6 | 	mov	ptra, fp
35424     B2 00 A0 FD | 	call	#popregs_
35428                 | _fatfs_cc_v_lseek_ret
35428     2D 00 64 FD | 	ret
3542c                 | 
3542c                 | _fatfs_cc_v_ioctl
3542c                 | ' {
3542c                 | '     return _seterror( 10 );
3542c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
35430     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
35434     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
35438     01 FA 65 F6 | 	neg	result1, #1
3543c                 | _fatfs_cc_v_ioctl_ret
3543c     2D 00 64 FD | 	ret
35440                 | 
35440                 | _fatfs_cc_v_mkdir
35440     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
35444     FD 12 02 F6 | 	mov	arg01, result1
35448                 | ' 
35448                 | '     r = f_mkdir(name);
35448                 | '     return _set_dos_error(r);
35448     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1037
3544c                 | _fatfs_cc_v_mkdir_ret
3544c     2D 00 64 FD | 	ret
35450                 | 
35450                 | _fatfs_cc_v_remove
35450     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
35454     FD 12 02 F6 | 	mov	arg01, result1
35458                 | ' 
35458                 | '     r = f_unlink(name);
35458                 | '     return _set_dos_error(r);
35458     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1037
3545c                 | _fatfs_cc_v_remove_ret
3545c     2D 00 64 FD | 	ret
35460                 | 
35460                 | _fatfs_cc_v_rmdir
35460     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
35464     FD 12 02 F6 | 	mov	arg01, result1
35468                 | ' 
35468                 | '     r = f_unlink(name);
35468                 | '     return _set_dos_error(r);
35468     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1037
3546c                 | _fatfs_cc_v_rmdir_ret
3546c     2D 00 64 FD | 	ret
35470                 | 
35470                 | _fatfs_cc_v_rename
35470     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
35474     FD 12 02 F6 | 	mov	arg01, result1
35478                 | '     return _set_dos_error(r);
35478     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1037
3547c                 | _fatfs_cc_v_rename_ret
3547c     2D 00 64 FD | 	ret
35480                 | 
35480                 | _fatfs_cc_v_open
35480     07 4A 05 F6 | 	mov	COUNT_, #7
35484     A8 00 A0 FD | 	call	#pushregs_
35488     09 27 02 F6 | 	mov	local01, arg01
3548c     0A 29 02 F6 | 	mov	local02, arg02
35490     0B 2B 02 F6 | 	mov	local03, arg03
35494     03 00 00 FF 
35498     3C 12 06 F6 | 	mov	arg01, ##1596
3549c                 | '     return _gc_alloc(size);
3549c     10 14 06 F6 | 	mov	arg02, #16
354a0     9C 56 BF FD | 	call	#__system___gc_doalloc
354a4     FD 2C 0A F6 | 	mov	local04, result1 wz
354a8                 | '       return _seterror( 7 );
354a8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
354ac     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
354b0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
354b4     01 FA 65 A6 |  if_e	neg	result1, #1
354b8     98 00 90 AD |  if_e	jmp	#LR__5196
354bc     16 13 02 F6 | 	mov	arg01, local04
354c0     00 14 06 F6 | 	mov	arg02, #0
354c4     03 00 00 FF 
354c8     3C 16 06 F6 | 	mov	arg03, ##1596
354cc     98 00 A0 FD | 	call	#\builtin_bytefill_
354d0                 | '   switch (flags & 3) {
354d0     15 2F 02 F6 | 	mov	local05, local03
354d4     03 2E 0E F5 | 	and	local05, #3 wz
354d8     0C 00 90 AD |  if_e	jmp	#LR__5190
354dc     01 2E 0E F2 | 	cmp	local05, #1 wz
354e0     0C 00 90 AD |  if_e	jmp	#LR__5191
354e4     10 00 90 FD | 	jmp	#LR__5192
354e8                 | LR__5190
354e8     01 30 06 F6 | 	mov	local06, #1
354ec                 | '       fs_flags =  0x01 ;
354ec                 | '       break;
354ec     0C 00 90 FD | 	jmp	#LR__5193
354f0                 | LR__5191
354f0     02 30 06 F6 | 	mov	local06, #2
354f4                 | '       fs_flags =  0x02 ;
354f4                 | '       break;
354f4     04 00 90 FD | 	jmp	#LR__5193
354f8                 | LR__5192
354f8     03 30 06 F6 | 	mov	local06, #3
354fc                 | '       fs_flags =  0x01  |  0x02 ;
354fc                 | '       break;
354fc                 | LR__5193
354fc     08 2A CE F7 | 	test	local03, #8 wz
35500     18 30 46 55 |  if_ne	or	local06, #24
35504     08 00 90 5D |  if_ne	jmp	#LR__5194
35508     20 2A CE F7 | 	test	local03, #32 wz
3550c     30 30 46 55 |  if_ne	or	local06, #48
35510                 | LR__5194
35510     02 00 00 FF 
35514     14 2C 06 F1 | 	add	local04, ##1044
35518     16 13 02 F6 | 	mov	arg01, local04
3551c     02 00 00 FF 
35520     14 2C 86 F1 | 	sub	local04, ##1044
35524     14 15 02 F6 | 	mov	arg02, local02
35528     18 17 02 F6 | 	mov	arg03, local06
3552c     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
35530     FD 32 0A F6 | 	mov	local07, result1 wz
35534     14 00 90 AD |  if_e	jmp	#LR__5195
35538     16 13 02 F6 | 	mov	arg01, local04
3553c                 | '     return _gc_free(ptr);
3553c     0C 57 BF FD | 	call	#__system___gc_free
35540                 | '     free(f);
35540                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35540                 | '     return _set_dos_error(r);
35540     19 13 02 F6 | 	mov	arg01, local07
35544     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1037
35548     08 00 90 FD | 	jmp	#LR__5196
3554c                 | LR__5195
3554c     13 2D 62 FC | 	wrlong	local04, local01
35550                 | '   }
35550                 | '   fil->vfsdata = f;
35550                 | '   return 0;
35550     00 FA 05 F6 | 	mov	result1, #0
35554                 | LR__5196
35554     A7 F0 03 F6 | 	mov	ptra, fp
35558     B2 00 A0 FD | 	call	#popregs_
3555c                 | _fatfs_cc_v_open_ret
3555c     2D 00 64 FD | 	ret
35560                 | 
35560                 | _fatfs_cc_v_flush
35560     09 13 02 FB | 	rdlong	arg01, arg01
35564     02 00 00 FF 
35568     14 12 0E F1 | 	add	arg01, ##1044 wz
3556c                 | '         return _seterror( 5 );
3556c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35570     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35574     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35578     01 FA 65 A6 |  if_e	neg	result1, #1
3557c     0C 00 90 AD |  if_e	jmp	#LR__5200
35580     00 DA BF FD | 	call	#_fatfs_cc_f_sync
35584     FD 12 02 F6 | 	mov	arg01, result1
35588                 | '     }
35588                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35588                 | '     result = f_sync(f);
35588                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35588                 | '     return _set_dos_error(result);
35588     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1037
3558c                 | LR__5200
3558c                 | _fatfs_cc_v_flush_ret
3558c     2D 00 64 FD | 	ret
35590                 | 
35590                 | _fatfs_cc_v_init
35590                 | ' {
35590                 | '     return 0;
35590     00 FA 05 F6 | 	mov	result1, #0
35594                 | _fatfs_cc_v_init_ret
35594     2D 00 64 FD | 	ret
35598                 | 
35598                 | _fatfs_cc_v_deinit
35598     B2 01 00 FF 
3559c     0C 15 06 F6 | 	mov	arg02, ##@LR__5396
355a0     00 12 06 F6 | 	mov	arg01, #0
355a4     00 16 06 F6 | 	mov	arg03, #0
355a8     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
355ac     01 00 00 FF 
355b0     08 E4 05 F1 | 	add	objptr, ##520
355b4     F2 12 02 FB | 	rdlong	arg01, objptr
355b8     04 E4 05 F1 | 	add	objptr, #4
355bc     F2 14 02 FB | 	rdlong	arg02, objptr
355c0     01 00 00 FF 
355c4     0C E4 85 F1 | 	sub	objptr, ##524
355c8     F0 3D BF FD | 	call	#__system___freepins
355cc                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
355cc                 | '     _freepins(f_pinmask);
355cc                 | '     return 0;
355cc     00 FA 05 F6 | 	mov	result1, #0
355d0                 | _fatfs_cc_v_deinit_ret
355d0     2D 00 64 FD | 	ret
355d4                 | 
355d4                 | _fatfs_cc_get_vfs
355d4     01 4A 05 F6 | 	mov	COUNT_, #1
355d8     A8 00 A0 FD | 	call	#pushregs_
355dc     09 27 02 F6 | 	mov	local01, arg01
355e0     50 12 06 F6 | 	mov	arg01, #80
355e4     28 55 BF FD | 	call	#__system___gc_alloc_managed
355e8     FD 12 02 F6 | 	mov	arg01, result1
355ec     F2 FA 01 F6 | 	mov	result1, objptr
355f0     00 78 05 FF 
355f4     00 FA 45 F5 | 	or	result1, ##183500800
355f8     09 FB 61 FC | 	wrlong	result1, arg01
355fc     F2 FA 01 F6 | 	mov	result1, objptr
35600     00 80 05 FF 
35604     00 FA 45 F5 | 	or	result1, ##184549376
35608     04 12 06 F1 | 	add	arg01, #4
3560c     09 FB 61 FC | 	wrlong	result1, arg01
35610     F2 FA 01 F6 | 	mov	result1, objptr
35614     00 88 05 FF 
35618     00 FA 45 F5 | 	or	result1, ##185597952
3561c     04 12 06 F1 | 	add	arg01, #4
35620     09 FB 61 FC | 	wrlong	result1, arg01
35624     F2 FA 01 F6 | 	mov	result1, objptr
35628     00 90 05 FF 
3562c     00 FA 45 F5 | 	or	result1, ##186646528
35630     04 12 06 F1 | 	add	arg01, #4
35634     09 FB 61 FC | 	wrlong	result1, arg01
35638     F2 FA 01 F6 | 	mov	result1, objptr
3563c     00 98 05 FF 
35640     00 FA 45 F5 | 	or	result1, ##187695104
35644     04 12 06 F1 | 	add	arg01, #4
35648     09 FB 61 FC | 	wrlong	result1, arg01
3564c     04 12 06 F1 | 	add	arg01, #4
35650     09 01 68 FC | 	wrlong	#0, arg01
35654     04 12 06 F1 | 	add	arg01, #4
35658     09 27 62 FC | 	wrlong	local01, arg01
3565c     04 12 06 F1 | 	add	arg01, #4
35660     09 01 68 FC | 	wrlong	#0, arg01
35664     F2 FA 01 F6 | 	mov	result1, objptr
35668     00 A0 05 FF 
3566c     00 FA 45 F5 | 	or	result1, ##188743680
35670     04 12 06 F1 | 	add	arg01, #4
35674     09 FB 61 FC | 	wrlong	result1, arg01
35678     F2 FA 01 F6 | 	mov	result1, objptr
3567c     00 A8 05 FF 
35680     00 FA 45 F5 | 	or	result1, ##189792256
35684     04 12 06 F1 | 	add	arg01, #4
35688     09 FB 61 FC | 	wrlong	result1, arg01
3568c     F2 FA 01 F6 | 	mov	result1, objptr
35690     00 B0 05 FF 
35694     00 FA 45 F5 | 	or	result1, ##190840832
35698     04 12 06 F1 | 	add	arg01, #4
3569c     09 FB 61 FC | 	wrlong	result1, arg01
356a0     F2 FA 01 F6 | 	mov	result1, objptr
356a4     00 B8 05 FF 
356a8     00 FA 45 F5 | 	or	result1, ##191889408
356ac     04 12 06 F1 | 	add	arg01, #4
356b0     09 FB 61 FC | 	wrlong	result1, arg01
356b4     F2 FA 01 F6 | 	mov	result1, objptr
356b8     00 C0 05 FF 
356bc     00 FA 45 F5 | 	or	result1, ##192937984
356c0     04 12 06 F1 | 	add	arg01, #4
356c4     09 FB 61 FC | 	wrlong	result1, arg01
356c8     F2 FA 01 F6 | 	mov	result1, objptr
356cc     00 C8 05 FF 
356d0     00 FA 45 F5 | 	or	result1, ##193986560
356d4     04 12 06 F1 | 	add	arg01, #4
356d8     09 FB 61 FC | 	wrlong	result1, arg01
356dc     F2 FA 01 F6 | 	mov	result1, objptr
356e0     00 D0 05 FF 
356e4     00 FA 45 F5 | 	or	result1, ##195035136
356e8     04 12 06 F1 | 	add	arg01, #4
356ec     09 FB 61 FC | 	wrlong	result1, arg01
356f0     F2 FA 01 F6 | 	mov	result1, objptr
356f4     00 D8 05 FF 
356f8     00 FA 45 F5 | 	or	result1, ##196083712
356fc     04 12 06 F1 | 	add	arg01, #4
35700     09 FB 61 FC | 	wrlong	result1, arg01
35704     F2 FA 01 F6 | 	mov	result1, objptr
35708     00 E0 05 FF 
3570c     00 FA 45 F5 | 	or	result1, ##197132288
35710     04 12 06 F1 | 	add	arg01, #4
35714     09 FB 61 FC | 	wrlong	result1, arg01
35718     F2 FA 01 F6 | 	mov	result1, objptr
3571c     00 E8 05 FF 
35720     00 FA 45 F5 | 	or	result1, ##198180864
35724     04 12 06 F1 | 	add	arg01, #4
35728     09 FB 61 FC | 	wrlong	result1, arg01
3572c     F2 FA 01 F6 | 	mov	result1, objptr
35730     00 F0 05 FF 
35734     00 FA 45 F5 | 	or	result1, ##199229440
35738     04 12 06 F1 | 	add	arg01, #4
3573c     09 FB 61 FC | 	wrlong	result1, arg01
35740     F2 FA 01 F6 | 	mov	result1, objptr
35744     00 F8 05 FF 
35748     00 FA 45 F5 | 	or	result1, ##200278016
3574c     04 12 06 F1 | 	add	arg01, #4
35750     09 FB 61 FC | 	wrlong	result1, arg01
35754     4C 12 86 F1 | 	sub	arg01, #76
35758                 | ' 
35758                 | '     v->close = &v_close;
35758                 | '     v->read = &v_read;
35758                 | '     v->write = &v_write;
35758                 | '     v->lseek = &v_lseek;
35758                 | '     v->ioctl = &v_ioctl;
35758                 | '     v->flush = 0;
35758                 | '     v->vfs_data = ptr;
35758                 | '     v->reserved = 0;
35758                 | ' 
35758                 | '     v->open = &v_open;
35758                 | '     v->creat = &v_creat;
35758                 | '     v->opendir = &v_opendir;
35758                 | '     v->closedir = &v_closedir;
35758                 | '     v->readdir = &v_readdir;
35758                 | '     v->stat = &v_stat;
35758                 | ' 
35758                 | '     v->mkdir = &v_mkdir;
35758                 | '     v->rmdir = &v_rmdir;
35758                 | ' 
35758                 | '     v->remove = &v_remove;
35758                 | '     v->rename = &v_rename;
35758                 | ' 
35758                 | '     v->init = &v_init;
35758                 | '     v->deinit = &v_deinit;
35758                 | ' 
35758                 | '     return v;
35758     09 FB 01 F6 | 	mov	result1, arg01
3575c     A7 F0 03 F6 | 	mov	ptra, fp
35760     B2 00 A0 FD | 	call	#popregs_
35764                 | _fatfs_cc_get_vfs_ret
35764     2D 00 64 FD | 	ret
35768                 | 
35768                 | _fatfs_cc_xmit_mmc_1188
35768     01 00 00 FF 
3576c     10 E4 05 F1 | 	add	objptr, ##528
35770     F2 00 02 FB | 	rdlong	_var01, objptr
35774     08 E4 05 F1 | 	add	objptr, #8
35778     F2 02 02 FB | 	rdlong	_var02, objptr
3577c     01 00 00 FF 
35780     18 E4 85 F1 | 	sub	objptr, ##536
35784     40 02 62 FD | 	dirl	_var02
35788     28 02 64 FD | 	setq	#1
3578c     09 05 02 FB | 	rdlong	_var03, arg01
35790     69 04 62 FD | 	rev	_var03
35794     1B 04 FE F9 | 	movbyts	_var03, #27
35798     01 05 22 FC | 	wypin	_var03, _var02
3579c     0A 05 02 F6 | 	mov	_var03, arg02
357a0     02 14 4E F0 | 	shr	arg02, #2 wz
357a4     03 04 66 F0 | 	shl	_var03, #3
357a8     00 05 22 FC | 	wypin	_var03, _var01
357ac     41 02 62 FD | 	dirh	_var02
357b0     08 12 06 F1 | 	add	arg01, #8
357b4     69 06 62 FD | 	rev	_var04
357b8     1B 06 FE F9 | 	movbyts	_var04, #27
357bc                 | LR__5210
357bc     01 07 22 5C |  if_ne	wypin	_var04, _var02
357c0     09 07 02 5B |  if_ne	rdlong	_var04, arg01
357c4     04 12 06 51 |  if_ne	add	arg01, #4
357c8     69 06 62 5D |  if_ne	rev	_var04
357cc     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
357d0                 | LR__5211
357d0     40 02 72 5D |  if_ne	testp	_var02 wc
357d4     F8 FF 9F 1D |  if_a	jmp	#LR__5211
357d8     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5210
357dc                 | LR__5212
357dc     40 00 72 FD | 	testp	_var01 wc
357e0     F8 FF 9F 3D |  if_ae	jmp	#LR__5212
357e4     40 02 62 FD | 	dirl	_var02
357e8     FF FF FF FF 
357ec     01 FF 2B FC | 	wypin	##-1, _var02
357f0     41 02 62 FD | 	dirh	_var02
357f4                 | _fatfs_cc_xmit_mmc_1188_ret
357f4     2D 00 64 FD | 	ret
357f8                 | 
357f8                 | _fatfs_cc_rcvr_mmc_1195
357f8     01 00 00 FF 
357fc     10 E4 05 F1 | 	add	objptr, ##528
35800     F2 00 02 FB | 	rdlong	_var01, objptr
35804     0C E4 05 F1 | 	add	objptr, #12
35808     F2 02 02 FB | 	rdlong	_var02, objptr
3580c     01 00 00 FF 
35810     1C E4 85 F1 | 	sub	objptr, ##540
35814     01 03 08 FC | 	akpin	_var02
35818     0A 05 0A F6 | 	mov	_var03, arg02 wz
3581c     02 04 4E F0 | 	shr	_var03, #2 wz
35820     30 00 90 AD |  if_e	jmp	#LR__5222
35824     02 07 02 F6 | 	mov	_var04, _var03
35828     05 06 66 F0 | 	shl	_var04, #5
3582c     00 07 22 FC | 	wypin	_var04, _var01
35830     01 7F 18 FC | 	wxpin	#63, _var02
35834                 | LR__5220
35834                 | LR__5221
35834     40 02 72 FD | 	testp	_var02 wc
35838     F8 FF 9F 3D |  if_ae	jmp	#LR__5221
3583c     01 07 8A FA | 	rdpin	_var04, _var02
35840     69 06 62 FD | 	rev	_var04
35844     1B 06 FE F9 | 	movbyts	_var04, #27
35848     09 07 62 FC | 	wrlong	_var04, arg01
3584c     04 12 06 F1 | 	add	arg01, #4
35850     F8 05 6E FB | 	djnz	_var03, #LR__5220
35854                 | LR__5222
35854     03 14 0E F5 | 	and	arg02, #3 wz
35858     24 00 90 AD |  if_e	jmp	#LR__5225
3585c     01 4F 18 FC | 	wxpin	#39, _var02
35860                 | LR__5223
35860     00 11 28 FC | 	wypin	#8, _var01
35864                 | LR__5224
35864     40 02 72 FD | 	testp	_var02 wc
35868     F8 FF 9F 3D |  if_ae	jmp	#LR__5224
3586c     01 07 8A FA | 	rdpin	_var04, _var02
35870     69 06 62 FD | 	rev	_var04
35874     09 07 42 FC | 	wrbyte	_var04, arg01
35878     01 12 06 F1 | 	add	arg01, #1
3587c     F8 15 6E FB | 	djnz	arg02, #LR__5223
35880                 | LR__5225
35880                 | _fatfs_cc_rcvr_mmc_1195_ret
35880     2D 00 64 FD | 	ret
35884                 | 
35884                 | _fatfs_cc_wait_ready_1199
35884     01 4A 05 F6 | 	mov	COUNT_, #1
35888     A8 00 A0 FD | 	call	#pushregs_
3588c     10 F0 07 F1 | 	add	ptra, #16
35890     1A FA 61 FD | 	getct	result1
35894     08 4E 05 F1 | 	add	fp, #8
35898     A7 FA 61 FC | 	wrlong	result1, fp
3589c     14 26 06 FB | 	rdlong	local01, #20
358a0     01 26 46 F0 | 	shr	local01, #1
358a4     04 4E 05 F1 | 	add	fp, #4
358a8     A7 26 62 FC | 	wrlong	local01, fp
358ac     0C 4E 85 F1 | 	sub	fp, #12
358b0                 | ' {
358b0                 | ' 	BYTE d;
358b0                 | ' 	UINT tmr, tmout;
358b0                 | ' 
358b0                 | ' 	tmr = _cnt();
358b0                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
358b0                 | ' 	for(;;) {
358b0                 | LR__5230
358b0     04 4E 05 F1 | 	add	fp, #4
358b4     A7 12 02 F6 | 	mov	arg01, fp
358b8     04 4E 85 F1 | 	sub	fp, #4
358bc     01 14 06 F6 | 	mov	arg02, #1
358c0     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1195
358c4     04 4E 05 F1 | 	add	fp, #4
358c8     A7 26 C2 FA | 	rdbyte	local01, fp
358cc     04 4E 85 F1 | 	sub	fp, #4
358d0     FF 26 0E F2 | 	cmp	local01, #255 wz
358d4     01 FA 05 A6 |  if_e	mov	result1, #1
358d8     28 00 90 AD |  if_e	jmp	#LR__5231
358dc     1A FA 61 FD | 	getct	result1
358e0     08 4E 05 F1 | 	add	fp, #8
358e4     A7 26 02 FB | 	rdlong	local01, fp
358e8     13 FB 81 F1 | 	sub	result1, local01
358ec     04 4E 05 F1 | 	add	fp, #4
358f0     A7 26 02 FB | 	rdlong	local01, fp
358f4     0C 4E 85 F1 | 	sub	fp, #12
358f8     13 FB 11 F2 | 	cmp	result1, local01 wc
358fc     00 FA 05 36 |  if_ae	mov	result1, #0
35900     AC FF 9F CD |  if_b	jmp	#LR__5230
35904                 | LR__5231
35904     A7 F0 03 F6 | 	mov	ptra, fp
35908     B2 00 A0 FD | 	call	#popregs_
3590c                 | _fatfs_cc_wait_ready_1199_ret
3590c     2D 00 64 FD | 	ret
35910                 | 
35910                 | _fatfs_cc_deselect_1205
35910     00 4A 05 F6 | 	mov	COUNT_, #0
35914     A8 00 A0 FD | 	call	#pushregs_
35918     14 F0 07 F1 | 	add	ptra, #20
3591c     01 00 00 FF 
35920     14 E4 05 F1 | 	add	objptr, ##532
35924     F2 14 02 FB | 	rdlong	arg02, objptr
35928     04 4E 05 F1 | 	add	fp, #4
3592c     A7 14 62 FC | 	wrlong	arg02, fp
35930     04 E4 85 F1 | 	sub	objptr, #4
35934     F2 14 02 FB | 	rdlong	arg02, objptr
35938     04 4E 05 F1 | 	add	fp, #4
3593c     A7 14 62 FC | 	wrlong	arg02, fp
35940     08 E4 05 F1 | 	add	objptr, #8
35944     F2 14 02 FB | 	rdlong	arg02, objptr
35948     04 4E 05 F1 | 	add	fp, #4
3594c     A7 14 62 FC | 	wrlong	arg02, fp
35950     04 E4 05 F1 | 	add	objptr, #4
35954     F2 14 02 FB | 	rdlong	arg02, objptr
35958     01 00 00 FF 
3595c     1C E4 85 F1 | 	sub	objptr, ##540
35960     04 4E 05 F1 | 	add	fp, #4
35964     A7 14 62 FC | 	wrlong	arg02, fp
35968     0C 4E 85 F1 | 	sub	fp, #12
3596c     A7 12 02 FB | 	rdlong	arg01, fp
35970     04 4E 85 F1 | 	sub	fp, #4
35974     59 12 62 FD | 	drvh	arg01
35978     1F 20 64 FD | 	waitx	#16
3597c     A7 12 02 F6 | 	mov	arg01, fp
35980     01 14 06 F6 | 	mov	arg02, #1
35984     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1195
35988     A7 F0 03 F6 | 	mov	ptra, fp
3598c     B2 00 A0 FD | 	call	#popregs_
35990                 | _fatfs_cc_deselect_1205_ret
35990     2D 00 64 FD | 	ret
35994                 | 
35994                 | _fatfs_cc_select_1209
35994     00 4A 05 F6 | 	mov	COUNT_, #0
35998     A8 00 A0 FD | 	call	#pushregs_
3599c     10 F0 07 F1 | 	add	ptra, #16
359a0     01 00 00 FF 
359a4     14 E4 05 F1 | 	add	objptr, ##532
359a8     F2 14 02 FB | 	rdlong	arg02, objptr
359ac     08 4E 05 F1 | 	add	fp, #8
359b0     A7 14 62 FC | 	wrlong	arg02, fp
359b4     08 E4 05 F1 | 	add	objptr, #8
359b8     F2 12 02 FB | 	rdlong	arg01, objptr
359bc     01 00 00 FF 
359c0     1C E4 85 F1 | 	sub	objptr, ##540
359c4     04 4E 05 F1 | 	add	fp, #4
359c8     A7 12 62 FC | 	wrlong	arg01, fp
359cc     50 12 62 FD | 	fltl	arg01
359d0     04 4E 85 F1 | 	sub	fp, #4
359d4     A7 12 02 FB | 	rdlong	arg01, fp
359d8     58 12 62 FD | 	drvl	arg01
359dc     1F 20 64 FD | 	waitx	#16
359e0     04 4E 05 F1 | 	add	fp, #4
359e4     A7 12 02 FB | 	rdlong	arg01, fp
359e8     41 12 62 FD | 	dirh	arg01
359ec     08 4E 85 F1 | 	sub	fp, #8
359f0     A7 12 02 F6 | 	mov	arg01, fp
359f4     04 4E 85 F1 | 	sub	fp, #4
359f8     01 14 06 F6 | 	mov	arg02, #1
359fc     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1195
35a00     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1199
35a04     00 FA 0D F2 | 	cmp	result1, #0 wz
35a08     01 FA 05 56 |  if_ne	mov	result1, #1
35a0c     08 00 90 5D |  if_ne	jmp	#LR__5240
35a10     FC FE BF FD | 	call	#_fatfs_cc_deselect_1205
35a14                 | ' 
35a14                 | ' 	deselect();
35a14                 | ' 	return 0;
35a14     00 FA 05 F6 | 	mov	result1, #0
35a18                 | LR__5240
35a18     A7 F0 03 F6 | 	mov	ptra, fp
35a1c     B2 00 A0 FD | 	call	#popregs_
35a20                 | _fatfs_cc_select_1209_ret
35a20     2D 00 64 FD | 	ret
35a24                 | 
35a24                 | _fatfs_cc_rcvr_datablock_1213
35a24     01 4A 05 F6 | 	mov	COUNT_, #1
35a28     A8 00 A0 FD | 	call	#pushregs_
35a2c     18 F0 07 F1 | 	add	ptra, #24
35a30     04 4E 05 F1 | 	add	fp, #4
35a34     A7 12 62 FC | 	wrlong	arg01, fp
35a38     04 4E 05 F1 | 	add	fp, #4
35a3c     A7 14 62 FC | 	wrlong	arg02, fp
35a40     1A FA 61 FD | 	getct	result1
35a44     08 4E 05 F1 | 	add	fp, #8
35a48     A7 FA 61 FC | 	wrlong	result1, fp
35a4c     14 26 06 FB | 	rdlong	local01, #20
35a50     03 26 46 F0 | 	shr	local01, #3
35a54     04 4E 05 F1 | 	add	fp, #4
35a58     A7 26 62 FC | 	wrlong	local01, fp
35a5c     14 4E 85 F1 | 	sub	fp, #20
35a60                 | ' 	BYTE *buff,
35a60                 | ' 	UINT btr
35a60                 | ' )
35a60                 | ' {
35a60                 | ' 	BYTE d[2];
35a60                 | ' 	UINT tmr, tmout;
35a60                 | ' 
35a60                 | ' 	tmr = _cnt();
35a60                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
35a60                 | ' 	for(;;) {
35a60                 | LR__5250
35a60     0C 4E 05 F1 | 	add	fp, #12
35a64     A7 12 02 F6 | 	mov	arg01, fp
35a68     0C 4E 85 F1 | 	sub	fp, #12
35a6c     01 14 06 F6 | 	mov	arg02, #1
35a70     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1195
35a74     0C 4E 05 F1 | 	add	fp, #12
35a78     A7 26 C2 FA | 	rdbyte	local01, fp
35a7c     0C 4E 85 F1 | 	sub	fp, #12
35a80     FF 26 0E F2 | 	cmp	local01, #255 wz
35a84     28 00 90 5D |  if_ne	jmp	#LR__5251
35a88     1A FA 61 FD | 	getct	result1
35a8c     FD 26 02 F6 | 	mov	local01, result1
35a90     10 4E 05 F1 | 	add	fp, #16
35a94     A7 14 02 FB | 	rdlong	arg02, fp
35a98     0A 27 82 F1 | 	sub	local01, arg02
35a9c     04 4E 05 F1 | 	add	fp, #4
35aa0     A7 14 02 FB | 	rdlong	arg02, fp
35aa4     14 4E 85 F1 | 	sub	fp, #20
35aa8     0A 27 12 F2 | 	cmp	local01, arg02 wc
35aac     B0 FF 9F CD |  if_b	jmp	#LR__5250
35ab0                 | LR__5251
35ab0     0C 4E 05 F1 | 	add	fp, #12
35ab4     A7 26 C2 FA | 	rdbyte	local01, fp
35ab8     0C 4E 85 F1 | 	sub	fp, #12
35abc     FE 26 0E F2 | 	cmp	local01, #254 wz
35ac0     00 FA 05 56 |  if_ne	mov	result1, #0
35ac4     30 00 90 5D |  if_ne	jmp	#LR__5252
35ac8     04 4E 05 F1 | 	add	fp, #4
35acc     A7 12 02 FB | 	rdlong	arg01, fp
35ad0     04 4E 05 F1 | 	add	fp, #4
35ad4     A7 14 02 FB | 	rdlong	arg02, fp
35ad8     08 4E 85 F1 | 	sub	fp, #8
35adc     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1195
35ae0     0C 4E 05 F1 | 	add	fp, #12
35ae4     A7 12 02 F6 | 	mov	arg01, fp
35ae8     0C 4E 85 F1 | 	sub	fp, #12
35aec     02 14 06 F6 | 	mov	arg02, #2
35af0     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1195
35af4                 | ' 
35af4                 | ' 	rcvr_mmc(buff, btr);
35af4                 | ' 	rcvr_mmc(d, 2);
35af4                 | ' 
35af4                 | ' 	return 1;
35af4     01 FA 05 F6 | 	mov	result1, #1
35af8                 | LR__5252
35af8     A7 F0 03 F6 | 	mov	ptra, fp
35afc     B2 00 A0 FD | 	call	#popregs_
35b00                 | _fatfs_cc_rcvr_datablock_1213_ret
35b00     2D 00 64 FD | 	ret
35b04                 | 
35b04                 | _fatfs_cc_xmit_datablock_1215
35b04     00 4A 05 F6 | 	mov	COUNT_, #0
35b08     A8 00 A0 FD | 	call	#pushregs_
35b0c     10 F0 07 F1 | 	add	ptra, #16
35b10     04 4E 05 F1 | 	add	fp, #4
35b14     A7 12 62 FC | 	wrlong	arg01, fp
35b18     04 4E 05 F1 | 	add	fp, #4
35b1c     A7 14 42 FC | 	wrbyte	arg02, fp
35b20     08 4E 85 F1 | 	sub	fp, #8
35b24     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1199
35b28     00 FA 0D F2 | 	cmp	result1, #0 wz
35b2c     00 FA 05 A6 |  if_e	mov	result1, #0
35b30     90 00 90 AD |  if_e	jmp	#LR__5261
35b34     08 4E 05 F1 | 	add	fp, #8
35b38     A7 14 C2 FA | 	rdbyte	arg02, fp
35b3c     04 4E 05 F1 | 	add	fp, #4
35b40     A7 14 42 FC | 	wrbyte	arg02, fp
35b44     A7 12 02 F6 | 	mov	arg01, fp
35b48     0C 4E 85 F1 | 	sub	fp, #12
35b4c     01 14 06 F6 | 	mov	arg02, #1
35b50     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1188
35b54     08 4E 05 F1 | 	add	fp, #8
35b58     A7 14 C2 FA | 	rdbyte	arg02, fp
35b5c     08 4E 85 F1 | 	sub	fp, #8
35b60     FD 14 0E F2 | 	cmp	arg02, #253 wz
35b64     58 00 90 AD |  if_e	jmp	#LR__5260
35b68     04 4E 05 F1 | 	add	fp, #4
35b6c     A7 12 02 FB | 	rdlong	arg01, fp
35b70     04 4E 85 F1 | 	sub	fp, #4
35b74     09 14 C6 F9 | 	decod	arg02, #9
35b78     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1188
35b7c     0C 4E 05 F1 | 	add	fp, #12
35b80     A7 12 02 F6 | 	mov	arg01, fp
35b84     0C 4E 85 F1 | 	sub	fp, #12
35b88     02 14 06 F6 | 	mov	arg02, #2
35b8c     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1195
35b90     0C 4E 05 F1 | 	add	fp, #12
35b94     A7 12 02 F6 | 	mov	arg01, fp
35b98     0C 4E 85 F1 | 	sub	fp, #12
35b9c     01 14 06 F6 | 	mov	arg02, #1
35ba0     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1195
35ba4     0C 4E 05 F1 | 	add	fp, #12
35ba8     A7 14 C2 FA | 	rdbyte	arg02, fp
35bac     0C 4E 85 F1 | 	sub	fp, #12
35bb0     1F 14 06 F5 | 	and	arg02, #31
35bb4     05 14 0E F2 | 	cmp	arg02, #5 wz
35bb8                 | ' 			return 0;
35bb8     00 FA 05 56 |  if_ne	mov	result1, #0
35bbc     04 00 90 5D |  if_ne	jmp	#LR__5261
35bc0                 | LR__5260
35bc0                 | ' 	}
35bc0                 | ' 
35bc0                 | ' 	return 1;
35bc0     01 FA 05 F6 | 	mov	result1, #1
35bc4                 | LR__5261
35bc4     A7 F0 03 F6 | 	mov	ptra, fp
35bc8     B2 00 A0 FD | 	call	#popregs_
35bcc                 | _fatfs_cc_xmit_datablock_1215_ret
35bcc     2D 00 64 FD | 	ret
35bd0                 | 
35bd0                 | _fatfs_cc_send_cmd_1219
35bd0     01 4A 05 F6 | 	mov	COUNT_, #1
35bd4     A8 00 A0 FD | 	call	#pushregs_
35bd8     1C F0 07 F1 | 	add	ptra, #28
35bdc                 | _fatfs_cc_send_cmd_1219_enter
35bdc     04 4E 05 F1 | 	add	fp, #4
35be0     A7 12 42 FC | 	wrbyte	arg01, fp
35be4     04 4E 05 F1 | 	add	fp, #4
35be8     A7 14 62 FC | 	wrlong	arg02, fp
35bec     04 4E 85 F1 | 	sub	fp, #4
35bf0     A7 FA C1 FA | 	rdbyte	result1, fp
35bf4     04 4E 85 F1 | 	sub	fp, #4
35bf8     80 FA CD F7 | 	test	result1, #128 wz
35bfc     44 00 90 AD |  if_e	jmp	#LR__5270
35c00     04 4E 05 F1 | 	add	fp, #4
35c04     A7 14 C2 FA | 	rdbyte	arg02, fp
35c08     7F 14 06 F5 | 	and	arg02, #127
35c0c     A7 14 42 FC | 	wrbyte	arg02, fp
35c10     04 4E 85 F1 | 	sub	fp, #4
35c14     37 12 06 F6 | 	mov	arg01, #55
35c18     00 14 06 F6 | 	mov	arg02, #0
35c1c     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1219
35c20     0C 4E 05 F1 | 	add	fp, #12
35c24     A7 FA 41 FC | 	wrbyte	result1, fp
35c28     A7 14 C2 FA | 	rdbyte	arg02, fp
35c2c     0C 4E 85 F1 | 	sub	fp, #12
35c30     02 14 16 F2 | 	cmp	arg02, #2 wc
35c34     0C 4E 05 31 |  if_ae	add	fp, #12
35c38     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
35c3c     0C 4E 85 31 |  if_ae	sub	fp, #12
35c40     6C 01 90 3D |  if_ae	jmp	#LR__5274
35c44                 | LR__5270
35c44     04 4E 05 F1 | 	add	fp, #4
35c48     A7 14 C2 FA | 	rdbyte	arg02, fp
35c4c     04 4E 85 F1 | 	sub	fp, #4
35c50     0C 14 0E F2 | 	cmp	arg02, #12 wz
35c54     14 00 90 AD |  if_e	jmp	#LR__5271
35c58     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1205
35c5c     34 FD BF FD | 	call	#_fatfs_cc_select_1209
35c60     00 FA 0D F2 | 	cmp	result1, #0 wz
35c64     FF FA 05 A6 |  if_e	mov	result1, #255
35c68     44 01 90 AD |  if_e	jmp	#LR__5274
35c6c                 | LR__5271
35c6c     04 4E 05 F1 | 	add	fp, #4
35c70     A7 14 C2 FA | 	rdbyte	arg02, fp
35c74     40 FA 05 F6 | 	mov	result1, #64
35c78     0A FB 41 F5 | 	or	result1, arg02
35c7c     10 4E 05 F1 | 	add	fp, #16
35c80     A7 FA 41 FC | 	wrbyte	result1, fp
35c84     0C 4E 85 F1 | 	sub	fp, #12
35c88     A7 FA 01 FB | 	rdlong	result1, fp
35c8c     18 FA 45 F0 | 	shr	result1, #24
35c90     0D 4E 05 F1 | 	add	fp, #13
35c94     A7 FA 41 FC | 	wrbyte	result1, fp
35c98     0D 4E 85 F1 | 	sub	fp, #13
35c9c     A7 FA 01 FB | 	rdlong	result1, fp
35ca0     10 FA 45 F0 | 	shr	result1, #16
35ca4     0E 4E 05 F1 | 	add	fp, #14
35ca8     A7 FA 41 FC | 	wrbyte	result1, fp
35cac     0E 4E 85 F1 | 	sub	fp, #14
35cb0     A7 FA 01 FB | 	rdlong	result1, fp
35cb4     08 FA 45 F0 | 	shr	result1, #8
35cb8     0F 4E 05 F1 | 	add	fp, #15
35cbc     A7 FA 41 FC | 	wrbyte	result1, fp
35cc0     0F 4E 85 F1 | 	sub	fp, #15
35cc4     A7 FA 01 FB | 	rdlong	result1, fp
35cc8     10 4E 05 F1 | 	add	fp, #16
35ccc     A7 FA 41 FC | 	wrbyte	result1, fp
35cd0     0C 4E 85 F1 | 	sub	fp, #12
35cd4     A7 02 48 FC | 	wrbyte	#1, fp
35cd8     08 4E 85 F1 | 	sub	fp, #8
35cdc     A7 FA C9 FA | 	rdbyte	result1, fp wz
35ce0     04 4E 85 F1 | 	sub	fp, #4
35ce4     0C 4E 05 A1 |  if_e	add	fp, #12
35ce8     A7 2A 49 AC |  if_e	wrbyte	#149, fp
35cec     0C 4E 85 A1 |  if_e	sub	fp, #12
35cf0     04 4E 05 F1 | 	add	fp, #4
35cf4     A7 FA C1 FA | 	rdbyte	result1, fp
35cf8     04 4E 85 F1 | 	sub	fp, #4
35cfc     08 FA 0D F2 | 	cmp	result1, #8 wz
35d00     0C 4E 05 A1 |  if_e	add	fp, #12
35d04     A7 0E 49 AC |  if_e	wrbyte	#135, fp
35d08     0C 4E 85 A1 |  if_e	sub	fp, #12
35d0c     0C 4E 05 F1 | 	add	fp, #12
35d10     A7 14 C2 FA | 	rdbyte	arg02, fp
35d14     0D 4E 05 F1 | 	add	fp, #13
35d18     A7 14 42 FC | 	wrbyte	arg02, fp
35d1c     05 4E 85 F1 | 	sub	fp, #5
35d20     A7 12 02 F6 | 	mov	arg01, fp
35d24     14 4E 85 F1 | 	sub	fp, #20
35d28     06 14 06 F6 | 	mov	arg02, #6
35d2c     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1188
35d30     04 4E 05 F1 | 	add	fp, #4
35d34     A7 26 C2 FA | 	rdbyte	local01, fp
35d38     04 4E 85 F1 | 	sub	fp, #4
35d3c     0C 26 0E F2 | 	cmp	local01, #12 wz
35d40     10 4E 05 A1 |  if_e	add	fp, #16
35d44     A7 12 02 A6 |  if_e	mov	arg01, fp
35d48     10 4E 85 A1 |  if_e	sub	fp, #16
35d4c     01 14 06 A6 |  if_e	mov	arg02, #1
35d50     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1195
35d54     0C 4E 05 F1 | 	add	fp, #12
35d58     A7 14 48 FC | 	wrbyte	#10, fp
35d5c     0C 4E 85 F1 | 	sub	fp, #12
35d60                 | ' 	n = 10;
35d60                 | ' 	do
35d60                 | LR__5272
35d60     10 4E 05 F1 | 	add	fp, #16
35d64     A7 12 02 F6 | 	mov	arg01, fp
35d68     10 4E 85 F1 | 	sub	fp, #16
35d6c     01 14 06 F6 | 	mov	arg02, #1
35d70     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1195
35d74     10 4E 05 F1 | 	add	fp, #16
35d78     A7 26 C2 FA | 	rdbyte	local01, fp
35d7c     10 4E 85 F1 | 	sub	fp, #16
35d80     80 26 CE F7 | 	test	local01, #128 wz
35d84     1C 00 90 AD |  if_e	jmp	#LR__5273
35d88     0C 4E 05 F1 | 	add	fp, #12
35d8c     A7 26 C2 FA | 	rdbyte	local01, fp
35d90     01 26 86 F1 | 	sub	local01, #1
35d94     A7 26 42 FC | 	wrbyte	local01, fp
35d98     A7 26 CA FA | 	rdbyte	local01, fp wz
35d9c     0C 4E 85 F1 | 	sub	fp, #12
35da0     BC FF 9F 5D |  if_ne	jmp	#LR__5272
35da4                 | LR__5273
35da4                 | ' 
35da4                 | ' 	return d;
35da4     10 4E 05 F1 | 	add	fp, #16
35da8     A7 FA C1 FA | 	rdbyte	result1, fp
35dac     10 4E 85 F1 | 	sub	fp, #16
35db0                 | LR__5274
35db0     A7 F0 03 F6 | 	mov	ptra, fp
35db4     B2 00 A0 FD | 	call	#popregs_
35db8                 | _fatfs_cc_send_cmd_1219_ret
35db8     2D 00 64 FD | 	ret
35dbc                 | 
35dbc                 | _fatfs_cc_disk_deinitialize
35dbc     03 4A 05 F6 | 	mov	COUNT_, #3
35dc0     A8 00 A0 FD | 	call	#pushregs_
35dc4     00 12 4E F2 | 	cmps	arg01, #0 wz
35dc8     01 00 00 FF 
35dcc     14 E4 05 F1 | 	add	objptr, ##532
35dd0     F2 12 02 FB | 	rdlong	arg01, objptr
35dd4     04 E4 85 F1 | 	sub	objptr, #4
35dd8     F2 26 02 FB | 	rdlong	local01, objptr
35ddc     08 E4 05 F1 | 	add	objptr, #8
35de0     F2 28 02 FB | 	rdlong	local02, objptr
35de4     04 E4 05 F1 | 	add	objptr, #4
35de8     F2 2A 02 FB | 	rdlong	local03, objptr
35dec     01 00 00 FF 
35df0     1C E4 85 F1 | 	sub	objptr, ##540
35df4                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
35df4                 | '         return RES_NOTRDY;
35df4     03 FA 05 56 |  if_ne	mov	result1, #3
35df8     2C 00 90 5D |  if_ne	jmp	#LR__5280
35dfc     50 12 62 FD | 	fltl	arg01
35e00     09 01 08 FC | 	wrpin	#0, arg01
35e04     50 26 62 FD | 	fltl	local01
35e08     13 01 08 FC | 	wrpin	#0, local01
35e0c     50 28 62 FD | 	fltl	local02
35e10     14 01 08 FC | 	wrpin	#0, local02
35e14     50 2A 62 FD | 	fltl	local03
35e18     15 01 08 FC | 	wrpin	#0, local03
35e1c     0A 12 06 F6 | 	mov	arg01, #10
35e20     3C 0E BF FD | 	call	#__system___waitms
35e24                 | '     }
35e24                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
35e24                 | '     _pinclear(PIN_SS);
35e24                 | '     _pinclear(PIN_CLK);
35e24                 | '     _pinclear(PIN_DI);
35e24                 | '     _pinclear(PIN_DO);
35e24                 | ' 
35e24                 | '     _waitms(10);
35e24                 | ' 
35e24                 | '     return 0;
35e24     00 FA 05 F6 | 	mov	result1, #0
35e28                 | LR__5280
35e28     A7 F0 03 F6 | 	mov	ptra, fp
35e2c     B2 00 A0 FD | 	call	#popregs_
35e30                 | _fatfs_cc_disk_deinitialize_ret
35e30     2D 00 64 FD | 	ret
35e34                 | 
35e34                 | _fatfs_cc_gettimeofday
35e34     04 4A 05 F6 | 	mov	COUNT_, #4
35e38     A8 00 A0 FD | 	call	#pushregs_
35e3c     09 27 02 F6 | 	mov	local01, arg01
35e40     F8 09 BF FD | 	call	#__system___getus
35e44     FD 12 02 F6 | 	mov	arg01, result1
35e48     02 00 00 FF 
35e4c     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
35e50     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
35e54     09 FB 01 F6 | 	mov	result1, arg01
35e58     14 FB 81 F1 | 	sub	result1, local02
35e5c     A1 07 00 FF 
35e60     40 FA 15 FD | 	qdiv	result1, ##1000000
35e64     02 00 00 FF 
35e68     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
35e6c     18 28 62 FD | 	getqx	local02
35e70     A1 07 00 FF 
35e74     40 FA 15 FD | 	qdiv	result1, ##1000000
35e78     00 28 0E F2 | 	cmp	local02, #0 wz
35e7c     19 2A 62 FD | 	getqy	local03
35e80     28 00 90 AD |  if_e	jmp	#LR__5290
35e84     02 00 00 FF 
35e88     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
35e8c     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
35e90     14 2D 02 F1 | 	add	local04, local02
35e94     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
35e98     15 13 82 F1 | 	sub	arg01, local03
35e9c     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
35ea0     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
35ea4     02 00 00 FF 
35ea8     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
35eac                 | LR__5290
35eac     02 00 00 FF 
35eb0     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
35eb4     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
35eb8     02 00 00 FF 
35ebc     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
35ec0     13 2D 62 FC | 	wrlong	local04, local01
35ec4     04 26 06 F1 | 	add	local01, #4
35ec8     13 2B 62 FC | 	wrlong	local03, local01
35ecc                 | '         lastsec += secs;
35ecc                 | '         lastus = now - leftover;
35ecc                 | '     }
35ecc                 | '     tv->tv_sec = lastsec;
35ecc                 | '     tv->tv_usec = leftover;
35ecc                 | '     return 0;
35ecc     00 FA 05 F6 | 	mov	result1, #0
35ed0     A7 F0 03 F6 | 	mov	ptra, fp
35ed4     B2 00 A0 FD | 	call	#popregs_
35ed8                 | _fatfs_cc_gettimeofday_ret
35ed8     2D 00 64 FD | 	ret
35edc                 | 
35edc                 | _fatfs_cc__is_leap_year
35edc     09 FB 51 F6 | 	abs	result1, arg01 wc
35ee0     03 FA 05 F5 | 	and	result1, #3
35ee4     FD FA 89 F6 | 	negc	result1, result1 wz
35ee8     38 00 90 5D |  if_ne	jmp	#LR__5301
35eec     09 FB 51 F6 | 	abs	result1, arg01 wc
35ef0     64 FA 15 FD | 	qdiv	result1, #100
35ef4     19 FA 61 FD | 	getqy	result1
35ef8     FD FA 89 F6 | 	negc	result1, result1 wz
35efc     1C 00 90 5D |  if_ne	jmp	#LR__5300
35f00     09 FB 51 F6 | 	abs	result1, arg01 wc
35f04     90 FB 15 FD | 	qdiv	result1, #400
35f08                 | '       return (0 == y % 400);
35f08     00 FA 05 F6 | 	mov	result1, #0
35f0c     19 00 62 FD | 	getqy	_var01
35f10     00 01 8A F6 | 	negc	_var01, _var01 wz
35f14     01 FA 05 A6 |  if_e	mov	result1, #1
35f18     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
35f1c                 | LR__5300
35f1c                 | '     return 1;
35f1c     01 FA 05 F6 | 	mov	result1, #1
35f20     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
35f24                 | LR__5301
35f24                 | '   }
35f24                 | '   return 0;
35f24     00 FA 05 F6 | 	mov	result1, #0
35f28                 | _fatfs_cc__is_leap_year_ret
35f28     2D 00 64 FD | 	ret
35f2c                 | 
35f2c                 | _fatfs_cc___tzoffset
35f2c     09 01 0A F6 | 	mov	_var01, arg01 wz
35f30     FF FF FF FF 
35f34     0A FF 6B FC | 	wrlong	##-1, arg02
35f38     01 02 06 F6 | 	mov	_var02, #1
35f3c     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
35f40                 | '                 return 0;
35f40     00 FA 05 A6 |  if_e	mov	result1, #0
35f44     94 02 90 AD |  if_e	jmp	#LR__5327
35f48     0A 01 68 FC | 	wrlong	#0, arg02
35f4c     02 00 00 FF 
35f50     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
35f54     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
35f58                 | ' 
35f58                 | '        *hasdst = 0;
35f58                 | ' 
35f58                 | ' 	n = stdname;
35f58                 | '         while (*s && isalpha(*s)) {
35f58     02 00 00 FF 
35f5c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
35f60     97 28 48 FB | 	callpa	#(@LR__5311-@LR__5310)>>2,fcache_load_ptr_
35f64                 | LR__5310
35f64     00 05 CA FA | 	rdbyte	_var03, _var01 wz
35f68     48 00 90 AD |  if_e	jmp	#LR__5312
35f6c     00 13 C2 FA | 	rdbyte	arg01, _var01
35f70                 | ' {
35f70                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
35f70     80 12 36 F3 | 	fle	arg01, #128 wc
35f74                 | '     return __ctype[c];
35f74     02 00 00 FF 
35f78     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
35f7c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35f80     09 FB C1 FA | 	rdbyte	result1, arg01
35f84     02 00 00 FF 
35f88     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
35f8c     0C FA CD F7 | 	test	result1, #12 wz
35f90     20 00 90 AD |  if_e	jmp	#LR__5312
35f94     00 09 02 F6 | 	mov	_var05, _var01
35f98     00 0B 02 F6 | 	mov	_var06, _var01
35f9c     01 0A 06 F1 | 	add	_var06, #1
35fa0     04 0D C2 FA | 	rdbyte	_var07, _var05
35fa4     05 01 02 F6 | 	mov	_var01, _var06
35fa8     03 0D 42 FC | 	wrbyte	_var07, _var04
35fac     01 06 06 F1 | 	add	_var04, #1
35fb0     B0 FF 9F FD | 	jmp	#LR__5310
35fb4                 | LR__5311
35fb4                 | LR__5312
35fb4     03 01 48 FC | 	wrbyte	#0, _var04
35fb8     00 0E 06 F6 | 	mov	_var08, #0
35fbc     00 05 C2 FA | 	rdbyte	_var03, _var01
35fc0     2D 04 0E F2 | 	cmp	_var03, #45 wz
35fc4     01 02 66 A6 |  if_e	neg	_var02, #1
35fc8     01 00 06 A1 |  if_e	add	_var01, #1
35fcc     97 28 48 FB | 	callpa	#(@LR__5314-@LR__5313)>>2,fcache_load_ptr_
35fd0                 | '                 sgn = -1;
35fd0                 | '                 s++;
35fd0                 | '         }
35fd0                 | '         while (isdigit(*s)) {
35fd0                 | LR__5313
35fd0     00 13 C2 FA | 	rdbyte	arg01, _var01
35fd4                 | ' {
35fd4                 | '   return  (__ctype_get(c) & 0x02 ) ;
35fd4     80 12 36 F3 | 	fle	arg01, #128 wc
35fd8                 | '     return __ctype[c];
35fd8     02 00 00 FF 
35fdc     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
35fe0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35fe4     09 FB C1 FA | 	rdbyte	result1, arg01
35fe8     02 00 00 FF 
35fec     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
35ff0     02 FA CD F7 | 	test	result1, #2 wz
35ff4     28 00 90 AD |  if_e	jmp	#LR__5315
35ff8     07 05 02 F6 | 	mov	_var03, _var08
35ffc     02 04 66 F0 | 	shl	_var03, #2
36000     07 05 02 F1 | 	add	_var03, _var08
36004     01 04 66 F0 | 	shl	_var03, #1
36008     00 09 C2 FA | 	rdbyte	_var05, _var01
3600c     30 08 86 F1 | 	sub	_var05, #48
36010     04 05 02 F1 | 	add	_var03, _var05
36014     02 0F 02 F6 | 	mov	_var08, _var03
36018     01 00 06 F1 | 	add	_var01, #1
3601c     B0 FF 9F FD | 	jmp	#LR__5313
36020                 | LR__5314
36020                 | LR__5315
36020     07 00 00 FF 
36024     10 0E 06 FD | 	qmul	_var08, ##3600
36028     00 05 C2 FA | 	rdbyte	_var03, _var01
3602c     3A 04 0E F2 | 	cmp	_var03, #58 wz
36030     18 10 62 FD | 	getqx	_var09
36034     70 00 90 5D |  if_ne	jmp	#LR__5319
36038     00 0E 06 F6 | 	mov	_var08, #0
3603c     01 00 06 F1 | 	add	_var01, #1
36040     97 28 48 FB | 	callpa	#(@LR__5317-@LR__5316)>>2,fcache_load_ptr_
36044                 | '                 x = 0;
36044                 | '                 s++;
36044                 | '                 while (isdigit(*s)) {
36044                 | LR__5316
36044     00 13 C2 FA | 	rdbyte	arg01, _var01
36048                 | ' {
36048                 | '   return  (__ctype_get(c) & 0x02 ) ;
36048     80 12 36 F3 | 	fle	arg01, #128 wc
3604c                 | '     return __ctype[c];
3604c     02 00 00 FF 
36050     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
36054     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
36058     09 FB C1 FA | 	rdbyte	result1, arg01
3605c     02 00 00 FF 
36060     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
36064     02 FA CD F7 | 	test	result1, #2 wz
36068     28 00 90 AD |  if_e	jmp	#LR__5318
3606c     07 05 02 F6 | 	mov	_var03, _var08
36070     02 04 66 F0 | 	shl	_var03, #2
36074     07 05 02 F1 | 	add	_var03, _var08
36078     01 04 66 F0 | 	shl	_var03, #1
3607c     00 09 C2 FA | 	rdbyte	_var05, _var01
36080     30 08 86 F1 | 	sub	_var05, #48
36084     04 05 02 F1 | 	add	_var03, _var05
36088     02 0F 02 F6 | 	mov	_var08, _var03
3608c     01 00 06 F1 | 	add	_var01, #1
36090     B0 FF 9F FD | 	jmp	#LR__5316
36094                 | LR__5317
36094                 | LR__5318
36094     07 0D 02 F6 | 	mov	_var07, _var08
36098     04 0C 66 F0 | 	shl	_var07, #4
3609c     07 0D 82 F1 | 	sub	_var07, _var08
360a0     02 0C 66 F0 | 	shl	_var07, #2
360a4     06 11 02 F1 | 	add	_var09, _var07
360a8                 | LR__5319
360a8     02 00 00 FF 
360ac     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
360b0     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
360b4     00 13 C2 FA | 	rdbyte	arg01, _var01
360b8                 | ' {
360b8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
360b8     80 12 36 F3 | 	fle	arg01, #128 wc
360bc                 | '     return __ctype[c];
360bc     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
360c0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
360c4     09 FB C1 FA | 	rdbyte	result1, arg01
360c8     02 00 00 FF 
360cc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
360d0     0C FA CD F7 | 	test	result1, #12 wz
360d4     50 00 90 AD |  if_e	jmp	#LR__5322
360d8     0A 03 68 FC | 	wrlong	#1, arg02
360dc                 | '                 *hasdst = 1;
360dc                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
360dc                 | LR__5320
360dc     00 05 CA FA | 	rdbyte	_var03, _var01 wz
360e0     44 00 90 AD |  if_e	jmp	#LR__5321
360e4     00 13 C2 FA | 	rdbyte	arg01, _var01
360e8                 | ' {
360e8                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
360e8     80 12 36 F3 | 	fle	arg01, #128 wc
360ec                 | '     return __ctype[c];
360ec     02 00 00 FF 
360f0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
360f4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
360f8     09 FB C1 FA | 	rdbyte	result1, arg01
360fc     02 00 00 FF 
36100     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
36104     0C FA CD F7 | 	test	result1, #12 wz
36108     1C 00 90 AD |  if_e	jmp	#LR__5321
3610c     00 0B 02 F6 | 	mov	_var06, _var01
36110     01 0A 06 F1 | 	add	_var06, #1
36114     00 0D C2 FA | 	rdbyte	_var07, _var01
36118     05 01 02 F6 | 	mov	_var01, _var06
3611c     03 0D 42 FC | 	wrbyte	_var07, _var04
36120     01 06 06 F1 | 	add	_var04, #1
36124     B4 FF 9F FD | 	jmp	#LR__5320
36128                 | LR__5321
36128                 | LR__5322
36128     03 01 48 FC | 	wrbyte	#0, _var04
3612c     02 00 00 FF 
36130     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
36134     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
36138     02 00 00 FF 
3613c     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
36140     20 00 90 AD |  if_e	jmp	#LR__5323
36144     02 00 00 FF 
36148     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
3614c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
36150     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
36154     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36158     02 00 00 FF 
3615c     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
36160     1C 00 90 FD | 	jmp	#LR__5324
36164                 | LR__5323
36164     02 00 00 FF 
36168     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
3616c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
36170     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
36174     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36178     02 00 00 FF 
3617c     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
36180                 | LR__5324
36180     02 00 00 FF 
36184     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
36188     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
3618c     02 00 00 FF 
36190     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
36194     20 00 90 AD |  if_e	jmp	#LR__5325
36198     02 00 00 FF 
3619c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
361a0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
361a4     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
361a8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
361ac     02 00 00 FF 
361b0     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
361b4     1C 00 90 FD | 	jmp	#LR__5326
361b8                 | LR__5325
361b8     02 00 00 FF 
361bc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
361c0     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
361c4     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
361c8     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
361cc     02 00 00 FF 
361d0     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
361d4                 | LR__5326
361d4     08 03 02 FD | 	qmul	_var02, _var09
361d8                 | ' 		_tzname[1] = stdname;
361d8                 | ' 
361d8                 | '         return sgn * off;
361d8     18 FA 61 FD | 	getqx	result1
361dc                 | LR__5327
361dc                 | _fatfs_cc___tzoffset_ret
361dc     2D 00 64 FD | 	ret
361e0                 | 
361e0                 | _fatfs_cc___indst
361e0     10 12 06 F1 | 	add	arg01, #16
361e4     09 01 02 FB | 	rdlong	_var01, arg01
361e8     10 12 86 F1 | 	sub	arg01, #16
361ec     02 00 0E F2 | 	cmp	_var01, #2 wz
361f0     30 00 90 5D |  if_ne	jmp	#LR__5330
361f4     07 00 06 F6 | 	mov	_var01, #7
361f8     18 12 06 F1 | 	add	arg01, #24
361fc     09 03 02 FB | 	rdlong	_var02, arg01
36200     01 01 02 F1 | 	add	_var01, _var02
36204     0C 12 86 F1 | 	sub	arg01, #12
36208     09 05 02 FB | 	rdlong	_var03, arg01
3620c     02 01 82 F1 | 	sub	_var01, _var03
36210     00 00 56 F2 | 	cmps	_var01, #0 wc
36214                 | '                         return 1;
36214     01 FA 05 C6 |  if_b	mov	result1, #1
36218     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
3621c                 | '                 return 0;
3621c     00 FA 05 F6 | 	mov	result1, #0
36220     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
36224                 | LR__5330
36224     10 12 06 F1 | 	add	arg01, #16
36228     09 01 02 FB | 	rdlong	_var01, arg01
3622c     10 12 86 F1 | 	sub	arg01, #16
36230     0A 00 0E F2 | 	cmp	_var01, #10 wz
36234     28 00 90 5D |  if_ne	jmp	#LR__5331
36238     18 12 06 F1 | 	add	arg01, #24
3623c     09 01 02 FB | 	rdlong	_var01, arg01
36240     0C 12 86 F1 | 	sub	arg01, #12
36244     09 07 02 FB | 	rdlong	_var04, arg01
36248     03 01 82 F1 | 	sub	_var01, _var04
3624c     00 00 56 F2 | 	cmps	_var01, #0 wc
36250                 | '                         return 0;
36250     00 FA 05 C6 |  if_b	mov	result1, #0
36254     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
36258                 | '                 return 1;
36258     01 FA 05 F6 | 	mov	result1, #1
3625c     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
36260                 | LR__5331
36260                 | '         }
36260                 | ' 
36260                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
36260     00 00 06 F6 | 	mov	_var01, #0
36264     10 12 06 F1 | 	add	arg01, #16
36268     09 03 02 FB | 	rdlong	_var02, arg01
3626c     10 12 86 F1 | 	sub	arg01, #16
36270     03 02 56 F2 | 	cmps	_var02, #3 wc
36274     10 00 90 CD |  if_b	jmp	#LR__5332
36278     10 12 06 F1 | 	add	arg01, #16
3627c     09 05 02 FB | 	rdlong	_var03, arg01
36280     0A 04 56 F2 | 	cmps	_var03, #10 wc
36284     01 00 06 C6 |  if_b	mov	_var01, #1
36288                 | LR__5332
36288     00 FB 01 F6 | 	mov	result1, _var01
3628c                 | _fatfs_cc___indst_ret
3628c     2D 00 64 FD | 	ret
36290                 | 
36290                 | ' 	
36290                 | ' 	FUNCTION pfunc(c as integer) as integer
36290                 | ___strs_cl_pfunc
36290                 | ' 		if (i < 16) then
36290     04 E4 05 F1 | 	add	objptr, #4
36294     F2 FA 01 FB | 	rdlong	result1, objptr
36298     04 E4 85 F1 | 	sub	objptr, #4
3629c     10 FA 55 F2 | 	cmps	result1, #16 wc
362a0     2C 00 90 3D |  if_ae	jmp	#LR__5340
362a4     F2 FA 01 FB | 	rdlong	result1, objptr
362a8     04 E4 05 F1 | 	add	objptr, #4
362ac     F2 00 02 FB | 	rdlong	_var01, objptr
362b0     FD 00 02 F1 | 	add	_var01, result1
362b4     00 13 42 FC | 	wrbyte	arg01, _var01
362b8     F2 FA 01 FB | 	rdlong	result1, objptr
362bc     01 FA 05 F1 | 	add	result1, #1
362c0     F2 FA 61 FC | 	wrlong	result1, objptr
362c4     04 E4 85 F1 | 	sub	objptr, #4
362c8                 | ' 			p(i) = c
362c8                 | ' 			i = i+1
362c8                 | ' 			return 1
362c8     01 FA 05 F6 | 	mov	result1, #1
362cc     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
362d0                 | LR__5340
362d0                 | ' 			return -1
362d0     01 FA 65 F6 | 	neg	result1, #1
362d4                 | ___strs_cl_pfunc_ret
362d4     2D 00 64 FD | 	ret
362d8                 | 
362d8                 | __struct__s_vfs_file_t_putchar
362d8     04 4A 05 F6 | 	mov	COUNT_, #4
362dc     A8 00 A0 FD | 	call	#pushregs_
362e0     1C E4 05 F1 | 	add	objptr, #28
362e4     F2 26 0A FB | 	rdlong	local01, objptr wz
362e8     1C E4 85 F1 | 	sub	objptr, #28
362ec     00 FA 05 A6 |  if_e	mov	result1, #0
362f0     48 00 90 AD |  if_e	jmp	#LR__5350
362f4     1C E4 05 F1 | 	add	objptr, #28
362f8     F2 28 02 FB | 	rdlong	local02, objptr
362fc     14 2B 02 F6 | 	mov	local03, local02
36300     1C E4 85 F1 | 	sub	objptr, #28
36304     13 2A 46 F7 | 	zerox	local03, #19
36308     14 28 46 F0 | 	shr	local02, #20
3630c     02 28 66 F0 | 	shl	local02, #2
36310     ED 28 02 F1 | 	add	local02, __methods__
36314     14 29 02 FB | 	rdlong	local02, local02
36318     F2 14 02 F6 | 	mov	arg02, objptr
3631c     F2 2C 02 F6 | 	mov	local04, objptr
36320     15 E5 01 F6 | 	mov	objptr, local03
36324     2D 28 62 FD | 	call	local02
36328     16 E5 01 F6 | 	mov	objptr, local04
3632c                 | '     return (i < 0) ? 0 : 1;
3632c     00 FA 55 F2 | 	cmps	result1, #0 wc
36330     00 26 06 C6 |  if_b	mov	local01, #0
36334     01 26 06 36 |  if_ae	mov	local01, #1
36338     13 FB 01 F6 | 	mov	result1, local01
3633c                 | LR__5350
3633c     A7 F0 03 F6 | 	mov	ptra, fp
36340     B2 00 A0 FD | 	call	#popregs_
36344                 | __struct__s_vfs_file_t_putchar_ret
36344     2D 00 64 FD | 	ret
36348                 | 
36348                 | __struct__s_vfs_file_t_getchar
36348     03 4A 05 F6 | 	mov	COUNT_, #3
3634c     A8 00 A0 FD | 	call	#pushregs_
36350     20 E4 05 F1 | 	add	objptr, #32
36354     F2 12 0A FB | 	rdlong	arg01, objptr wz
36358     20 E4 85 F1 | 	sub	objptr, #32
3635c     01 FA 65 A6 |  if_e	neg	result1, #1
36360     38 00 90 AD |  if_e	jmp	#LR__5360
36364                 | '     return getcf(__this);
36364     20 E4 05 F1 | 	add	objptr, #32
36368     F2 26 02 FB | 	rdlong	local01, objptr
3636c     13 29 02 F6 | 	mov	local02, local01
36370     20 E4 85 F1 | 	sub	objptr, #32
36374     13 28 46 F7 | 	zerox	local02, #19
36378     14 26 46 F0 | 	shr	local01, #20
3637c     02 26 66 F0 | 	shl	local01, #2
36380     ED 26 02 F1 | 	add	local01, __methods__
36384     13 27 02 FB | 	rdlong	local01, local01
36388     F2 12 02 F6 | 	mov	arg01, objptr
3638c     F2 2A 02 F6 | 	mov	local03, objptr
36390     14 E5 01 F6 | 	mov	objptr, local02
36394     2D 26 62 FD | 	call	local01
36398     15 E5 01 F6 | 	mov	objptr, local03
3639c                 | LR__5360
3639c     A7 F0 03 F6 | 	mov	ptra, fp
363a0     B2 00 A0 FD | 	call	#popregs_
363a4                 | __struct__s_vfs_file_t_getchar_ret
363a4     2D 00 64 FD | 	ret
363a8                 | 
363a8                 | __struct___bas_wrap_sender_tx
363a8     03 4A 05 F6 | 	mov	COUNT_, #3
363ac     A8 00 A0 FD | 	call	#pushregs_
363b0     F2 26 02 FB | 	rdlong	local01, objptr
363b4     13 29 02 F6 | 	mov	local02, local01
363b8     13 26 46 F7 | 	zerox	local01, #19
363bc     14 28 46 F0 | 	shr	local02, #20
363c0     02 28 66 F0 | 	shl	local02, #2
363c4     ED 28 02 F1 | 	add	local02, __methods__
363c8     14 29 02 FB | 	rdlong	local02, local02
363cc     F2 2A 02 F6 | 	mov	local03, objptr
363d0     13 E5 01 F6 | 	mov	objptr, local01
363d4     2D 28 62 FD | 	call	local02
363d8     15 E5 01 F6 | 	mov	objptr, local03
363dc     01 FA 05 F6 | 	mov	result1, #1
363e0     A7 F0 03 F6 | 	mov	ptra, fp
363e4     B2 00 A0 FD | 	call	#popregs_
363e8                 | __struct___bas_wrap_sender_tx_ret
363e8     2D 00 64 FD | 	ret
363ec                 | 
363ec                 | __struct___bas_wrap_sender_rx
363ec     03 4A 05 F6 | 	mov	COUNT_, #3
363f0     A8 00 A0 FD | 	call	#pushregs_
363f4     04 E4 05 F1 | 	add	objptr, #4
363f8     F2 26 02 FB | 	rdlong	local01, objptr
363fc     13 29 02 F6 | 	mov	local02, local01
36400     04 E4 85 F1 | 	sub	objptr, #4
36404     13 28 46 F7 | 	zerox	local02, #19
36408     14 26 46 F0 | 	shr	local01, #20
3640c     02 26 66 F0 | 	shl	local01, #2
36410     ED 26 02 F1 | 	add	local01, __methods__
36414     13 27 02 FB | 	rdlong	local01, local01
36418     F2 2A 02 F6 | 	mov	local03, objptr
3641c     14 E5 01 F6 | 	mov	objptr, local02
36420     2D 26 62 FD | 	call	local01
36424     15 E5 01 F6 | 	mov	objptr, local03
36428     A7 F0 03 F6 | 	mov	ptra, fp
3642c     B2 00 A0 FD | 	call	#popregs_
36430                 | __struct___bas_wrap_sender_rx_ret
36430     2D 00 64 FD | 	ret
36434                 | 
36434                 | __struct___bas_wrap_sender_close
36434     03 4A 05 F6 | 	mov	COUNT_, #3
36438     A8 00 A0 FD | 	call	#pushregs_
3643c     08 E4 05 F1 | 	add	objptr, #8
36440     F2 26 02 FB | 	rdlong	local01, objptr
36444     13 29 02 F6 | 	mov	local02, local01
36448     08 E4 85 F1 | 	sub	objptr, #8
3644c     13 28 46 F7 | 	zerox	local02, #19
36450     14 26 46 F0 | 	shr	local01, #20
36454     02 26 66 F0 | 	shl	local01, #2
36458     ED 26 02 F1 | 	add	local01, __methods__
3645c     13 27 02 FB | 	rdlong	local01, local01
36460     F2 2A 02 F6 | 	mov	local03, objptr
36464     14 E5 01 F6 | 	mov	objptr, local02
36468     2D 26 62 FD | 	call	local01
3646c     15 E5 01 F6 | 	mov	objptr, local03
36470     A7 F0 03 F6 | 	mov	ptra, fp
36474     B2 00 A0 FD | 	call	#popregs_
36478                 | __struct___bas_wrap_sender_close_ret
36478     2D 00 64 FD | 	ret
3647c                 | 
3647c                 | LR__5370
3647c     2F          | 	byte	"/"
3647d     00          | 	byte	0
3647e                 | LR__5371
3647e     69 6E 66    | 	byte	"inf"
36481     00          | 	byte	0
36482                 | LR__5372
36482     6E 61 6E    | 	byte	"nan"
36485     00          | 	byte	0
36486                 | LR__5373
36486                 | 	byte	
36486     00          | 	byte	0
36487                 | LR__5374
36487                 | 	byte	
36487     00          | 	byte	0
36488                 | LR__5375
36488                 | 	byte	
36488     00          | 	byte	0
36489                 | LR__5376
36489                 | 	byte	
36489     00          | 	byte	0
3648a                 | LR__5377
3648a                 | 	byte	
3648a     00          | 	byte	0
3648b                 | LR__5378
3648b                 | 	byte	
3648b     00          | 	byte	0
3648c                 | LR__5379
3648c                 | 	byte	
3648c     00          | 	byte	0
3648d                 | LR__5380
3648d                 | 	byte	
3648d     00          | 	byte	0
3648e                 | LR__5381
3648e     00          | 	byte	0
3648f     00          | 	byte	0
36490                 | LR__5382
36490     00          | 	byte	0
36491     00          | 	byte	0
36492                 | LR__5383
36492     00          | 	byte	0
36493     00          | 	byte	0
36494                 | LR__5384
36494     20 21 21 21 
36498     20 63 6F 72 
3649c     72 75 70 74 
364a0     65 64 20 68 
364a4     65 61 70 3F 
364a8     3F 3F 20 21 
364ac     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
364af     00          | 	byte	0
364b0                 | LR__5385
364b0     20 21 21 21 
364b4     20 6F 75 74 
364b8     20 6F 66 20 
364bc     68 65 61 70 
364c0     20 6D 65 6D 
364c4     6F 72 79 20 
364c8     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
364cc     00          | 	byte	0
364cd                 | LR__5386
364cd     20 21 21 21 
364d1     20 63 6F 72 
364d5     72 75 70 74 
364d9     65 64 20 68 
364dd     65 61 70 20 
364e1     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
364e5     00          | 	byte	0
364e6                 | LR__5387
364e6     00          | 	byte	0
364e7     00          | 	byte	0
364e8                 | LR__5388
364e8     2E          | 	byte	"."
364e9     00          | 	byte	0
364ea                 | LR__5389
364ea     00          | 	byte	0
364eb     00          | 	byte	0
364ec                 | LR__5390
364ec     00          | 	byte	0
364ed     00          | 	byte	0
364ee                 | LR__5391
364ee     00          | 	byte	0
364ef     00          | 	byte	0
364f0                 | LR__5392
364f0     2A 3A 3C 3E 
364f4     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
364f8     00          | 	byte	0
364f9                 | LR__5393
364f9     2B 2C 3B 3D 
364fd     5B 5D       | 	byte	"+,;=[]"
364ff     00          | 	byte	0
36500                 | LR__5394
36500     46 41 54 33 
36504     32 20 20 20 | 	byte	"FAT32   "
36508     00          | 	byte	0
36509                 | LR__5395
36509     54 5A       | 	byte	"TZ"
3650b     00          | 	byte	0
3650c                 | LR__5396
3650c     00          | 	byte	0
3650d     00          | 	byte	0
3650e                 | LR__5397
3650e                 | 	byte	
3650e     00          | 	byte	0
3650f                 | LR__5398
3650f                 | 	byte	
3650f     00          | 	byte	0
36510                 | LR__5399
36510                 | 	byte	
36510     00          | 	byte	0
36511                 | LR__5400
36511                 | 	byte	
36511     00          | 	byte	0
36512                 | LR__5401
36512     22          | 	byte	34
36513     00          | 	byte	0
36514                 | LR__5402
36514     22          | 	byte	34
36515     00          | 	byte	0
36516                 | LR__5403
36516     3A          | 	byte	":"
36517     00          | 	byte	0
36518                 | LR__5404
36518                 | 	byte	
36518     00          | 	byte	0
36519                 | LR__5405
36519                 | 	byte	
36519     00          | 	byte	0
3651a                 | LR__5406
3651a                 | 	byte	
3651a     00          | 	byte	0
3651b                 | LR__5407
3651b                 | 	byte	
3651b     00          | 	byte	0
3651c                 | LR__5408
3651c                 | 	byte	
3651c     00          | 	byte	0
3651d                 | LR__5409
3651d                 | 	byte	
3651d     00          | 	byte	0
3651e                 | LR__5410
3651e                 | 	byte	
3651e     00          | 	byte	0
3651f                 | LR__5411
3651f     30          | 	byte	"0"
36520     00          | 	byte	0
36521                 | LR__5412
36521     22          | 	byte	34
36522     00          | 	byte	0
36523                 | LR__5413
36523     22          | 	byte	34
36524     00          | 	byte	0
36525                 | LR__5414
36525     22          | 	byte	34
36526     00          | 	byte	0
36527                 | LR__5415
36527     22          | 	byte	34
36528     00          | 	byte	0
36529                 | LR__5416
36529     22          | 	byte	34
3652a     00          | 	byte	0
3652b                 | LR__5417
3652b     3E          | 	byte	">"
3652c     00          | 	byte	0
3652d                 | LR__5418
3652d     3C          | 	byte	"<"
3652e     00          | 	byte	0
3652f                 | LR__5419
3652f     2B          | 	byte	"+"
36530     00          | 	byte	0
36531                 | LR__5420
36531     2D          | 	byte	"-"
36532     00          | 	byte	0
36533                 | LR__5421
36533     2A          | 	byte	"*"
36534     00          | 	byte	0
36535                 | LR__5422
36535     2F          | 	byte	"/"
36536     00          | 	byte	0
36537                 | LR__5423
36537     5E          | 	byte	"^"
36538     00          | 	byte	0
36539                 | LR__5424
36539     3D          | 	byte	"="
3653a     00          | 	byte	0
3653b                 | LR__5425
3653b     2B          | 	byte	"+"
3653c     00          | 	byte	0
3653d                 | LR__5426
3653d     2B          | 	byte	"+"
3653e     00          | 	byte	0
3653f                 | LR__5427
3653f     2D          | 	byte	"-"
36540     00          | 	byte	0
36541                 | LR__5428
36541     2D          | 	byte	"-"
36542     00          | 	byte	0
36543                 | LR__5429
36543     3C          | 	byte	"<"
36544     00          | 	byte	0
36545                 | LR__5430
36545     3E          | 	byte	">"
36546     00          | 	byte	0
36547                 | LR__5431
36547     22          | 	byte	34
36548     00          | 	byte	0
36549                 | LR__5432
36549     22          | 	byte	34
3654a     00          | 	byte	0
3654b                 | LR__5433
3654b     65 6C 73 65 | 	byte	"else"
3654f     00          | 	byte	0
36550                 | LR__5434
36550     74 68 65 6E | 	byte	"then"
36554     00          | 	byte	0
36555                 | LR__5435
36555     3F          | 	byte	"?"
36556     00          | 	byte	0
36557                 | LR__5436
36557     3F          | 	byte	"?"
36558     00          | 	byte	0
36559                 | LR__5437
36559     2E          | 	byte	"."
3655a     00          | 	byte	0
3655b                 | LR__5438
3655b     6D 6F 75 73 
3655f     65          | 	byte	"mouse"
36560     00          | 	byte	0
36561                 | LR__5439
36561     63 75 72 73 
36565     6F 72       | 	byte	"cursor"
36567     00          | 	byte	0
36568                 | LR__5440
36568     63 6C 69 63 
3656c     6B          | 	byte	"click"
3656d     00          | 	byte	0
3656e                 | LR__5441
3656e     6F 6E       | 	byte	"on"
36570     00          | 	byte	0
36571                 | LR__5442
36571     31          | 	byte	"1"
36572     00          | 	byte	0
36573                 | LR__5443
36573     6F 66 66    | 	byte	"off"
36576     00          | 	byte	0
36577                 | LR__5444
36577     30          | 	byte	"0"
36578     00          | 	byte	0
36579                 | LR__5445
36579     6D 6F 64 65 | 	byte	"mode"
3657d     00          | 	byte	0
3657e                 | LR__5446
3657e     6D 2E       | 	byte	"m."
36580     00          | 	byte	0
36581                 | LR__5447
36581     61 74 61 72 
36585     69          | 	byte	"atari"
36586     00          | 	byte	0
36587                 | LR__5448
36587     30          | 	byte	"0"
36588     00          | 	byte	0
36589                 | LR__5449
36589     70 63 5F 61 
3658d     6D 62 65 72 | 	byte	"pc_amber"
36591     00          | 	byte	0
36592                 | LR__5450
36592     31          | 	byte	"1"
36593     00          | 	byte	0
36594                 | LR__5451
36594     70 63 5F 67 
36598     72 65 65 6E | 	byte	"pc_green"
3659c     00          | 	byte	0
3659d                 | LR__5452
3659d     32          | 	byte	"2"
3659e     00          | 	byte	0
3659f                 | LR__5453
3659f     70 63 5F 77 
365a3     68 69 74 65 | 	byte	"pc_white"
365a7     00          | 	byte	0
365a8                 | LR__5454
365a8     33          | 	byte	"3"
365a9     00          | 	byte	0
365aa                 | LR__5455
365aa     73 74       | 	byte	"st"
365ac     00          | 	byte	0
365ad                 | LR__5456
365ad     34          | 	byte	"4"
365ae     00          | 	byte	0
365af                 | LR__5457
365af                 | 	byte	
365af     00          | 	byte	0
365b0                 | LR__5458
365b0     6C 6F 61 64 | 	byte	"load"
365b4     00          | 	byte	0
365b5                 | LR__5459
365b5     73 61 76 65 | 	byte	"save"
365b9     00          | 	byte	0
365ba                 | LR__5460
365ba     62 72 75 6E | 	byte	"brun"
365be     00          | 	byte	0
365bf                 | LR__5461
365bf     72 75 6E    | 	byte	"run"
365c2     00          | 	byte	0
365c3                 | LR__5462
365c3     6C 6F 2E    | 	byte	"lo."
365c6     00          | 	byte	0
365c7                 | LR__5463
365c7     73 2E       | 	byte	"s."
365c9     00          | 	byte	0
365ca                 | LR__5464
365ca     62 72 2E    | 	byte	"br."
365cd     00          | 	byte	0
365ce                 | LR__5465
365ce     65 6E 74 65 
365d2     72          | 	byte	"enter"
365d3     00          | 	byte	0
365d4                 | LR__5466
365d4     65 2E       | 	byte	"e."
365d6     00          | 	byte	0
365d7                 | LR__5467
365d7     24          | 	byte	"$"
365d8     00          | 	byte	0
365d9                 | LR__5468
365d9     64 65 6C 65 
365dd     74 65       | 	byte	"delete"
365df     00          | 	byte	0
365e0                 | LR__5469
365e0     6D 6B 64 69 
365e4     72          | 	byte	"mkdir"
365e5     00          | 	byte	0
365e6                 | LR__5470
365e6     24          | 	byte	"$"
365e7     00          | 	byte	0
365e8                 | LR__5471
365e8     63 6F 70 79 | 	byte	"copy"
365ec     00          | 	byte	0
365ed                 | LR__5472
365ed     24          | 	byte	"$"
365ee     00          | 	byte	0
365ef                 | LR__5473
365ef     63 6F 70 79 | 	byte	"copy"
365f3     00          | 	byte	0
365f4                 | LR__5474
365f4     24          | 	byte	"$"
365f5     00          | 	byte	0
365f6                 | LR__5475
365f6     63 64       | 	byte	"cd"
365f8     00          | 	byte	0
365f9                 | LR__5476
365f9     63 64 2E    | 	byte	"cd."
365fc     00          | 	byte	0
365fd                 | LR__5477
365fd     2E          | 	byte	"."
365fe     00          | 	byte	0
365ff                 | LR__5478
365ff     2E 2E       | 	byte	".."
36601     00          | 	byte	0
36602                 | LR__5479
36602     63 64       | 	byte	"cd"
36604     00          | 	byte	0
36605                 | LR__5480
36605     2F          | 	byte	"/"
36606     00          | 	byte	0
36607                 | LR__5481
36607                 | 	byte	
36607     00          | 	byte	0
36608                 | LR__5482
36608                 | 	byte	
36608     00          | 	byte	0
36609                 | LR__5483
36609                 | 	byte	
36609     00          | 	byte	0
3660a                 | LR__5484
3660a                 | 	byte	
3660a     00          | 	byte	0
3660b                 | LR__5485
3660b                 | 	byte	
3660b     00          | 	byte	0
3660c                 | LR__5486
3660c     52 65 61 64 
36610     79          | 	byte	"Ready"
36611     00          | 	byte	0
36612                 | LR__5487
36612     2B          | 	byte	"+"
36613     00          | 	byte	0
36614                 | LR__5488
36614     2D          | 	byte	"-"
36615     00          | 	byte	0
36616                 | LR__5489
36616     6F 72       | 	byte	"or"
36618     00          | 	byte	0
36619                 | LR__5490
36619     78 6F 72    | 	byte	"xor"
3661c     00          | 	byte	0
3661d                 | LR__5491
3661d     2A          | 	byte	"*"
3661e     00          | 	byte	0
3661f                 | LR__5492
3661f     2F          | 	byte	"/"
36620     00          | 	byte	0
36621                 | LR__5493
36621     61 6E 64    | 	byte	"and"
36624     00          | 	byte	0
36625                 | LR__5494
36625     64 69 76    | 	byte	"div"
36628     00          | 	byte	0
36629                 | LR__5495
36629     6D 6F 64    | 	byte	"mod"
3662c     00          | 	byte	0
3662d                 | LR__5496
3662d     73 68 6C    | 	byte	"shl"
36630     00          | 	byte	0
36631                 | LR__5497
36631     73 68 72    | 	byte	"shr"
36634     00          | 	byte	0
36635                 | LR__5498
36635     5E          | 	byte	"^"
36636     00          | 	byte	0
36637                 | LR__5499
36637     6E 6F 74    | 	byte	"not"
3663a     00          | 	byte	0
3663b                 | LR__5500
3663b     40          | 	byte	"@"
3663c     00          | 	byte	0
3663d                 | LR__5501
3663d     3D          | 	byte	"="
3663e     00          | 	byte	0
3663f                 | LR__5502
3663f     3E 3D       | 	byte	">="
36641     00          | 	byte	0
36642                 | LR__5503
36642     3C 3D       | 	byte	"<="
36644     00          | 	byte	0
36645                 | LR__5504
36645     3C          | 	byte	"<"
36646     00          | 	byte	0
36647                 | LR__5505
36647     3E          | 	byte	">"
36648     00          | 	byte	0
36649                 | LR__5506
36649     3C 3E       | 	byte	"<>"
3664b     00          | 	byte	0
3664c                 | LR__5507
3664c     2B 2B       | 	byte	"++"
3664e     00          | 	byte	0
3664f                 | LR__5508
3664f     2D 2D       | 	byte	"--"
36651     00          | 	byte	0
36652                 | LR__5509
36652     23          | 	byte	"#"
36653     00          | 	byte	0
36654                 | LR__5510
36654     30          | 	byte	"0"
36655     00          | 	byte	0
36656                 | LR__5511
36656     39          | 	byte	"9"
36657     00          | 	byte	0
36658                 | LR__5512
36658     23 72 65 61 
3665c     64          | 	byte	"#read"
3665d     00          | 	byte	0
3665e                 | LR__5513
3665e     23 77 72 69 
36662     74 65       | 	byte	"#write"
36664     00          | 	byte	0
36665                 | LR__5514
36665     23 61 70 70 
36669     65 6E 64    | 	byte	"#append"
3666c     00          | 	byte	0
3666d                 | LR__5515
3666d     23          | 	byte	"#"
3666e     00          | 	byte	0
3666f                 | LR__5516
3666f     23          | 	byte	"#"
36670     00          | 	byte	0
36671                 | LR__5517
36671     2D          | 	byte	"-"
36672     00          | 	byte	0
36673                 | LR__5518
36673     30          | 	byte	"0"
36674     00          | 	byte	0
36675                 | LR__5519
36675     63          | 	byte	"c"
36676     00          | 	byte	0
36677                 | LR__5520
36677     63 23       | 	byte	"c#"
36679     00          | 	byte	0
3667a                 | LR__5521
3667a     64          | 	byte	"d"
3667b     00          | 	byte	0
3667c                 | LR__5522
3667c     64 23       | 	byte	"d#"
3667e     00          | 	byte	0
3667f                 | LR__5523
3667f     65          | 	byte	"e"
36680     00          | 	byte	0
36681                 | LR__5524
36681     66          | 	byte	"f"
36682     00          | 	byte	0
36683                 | LR__5525
36683     66 23       | 	byte	"f#"
36685     00          | 	byte	0
36686                 | LR__5526
36686     67          | 	byte	"g"
36687     00          | 	byte	0
36688                 | LR__5527
36688     67 23       | 	byte	"g#"
3668a     00          | 	byte	0
3668b                 | LR__5528
3668b     61          | 	byte	"a"
3668c     00          | 	byte	0
3668d                 | LR__5529
3668d     61 23       | 	byte	"a#"
3668f     00          | 	byte	0
36690                 | LR__5530
36690     68          | 	byte	"h"
36691     00          | 	byte	0
36692                 | LR__5531
36692     62          | 	byte	"b"
36693     00          | 	byte	0
36694                 | LR__5532
36694     2B          | 	byte	"+"
36695     00          | 	byte	0
36696                 | LR__5533
36696     2D          | 	byte	"-"
36697     00          | 	byte	0
36698                 | LR__5534
36698     3D          | 	byte	"="
36699     00          | 	byte	0
3669a                 | LR__5535
3669a     2C          | 	byte	","
3669b     00          | 	byte	0
3669c                 | LR__5536
3669c     2A          | 	byte	"*"
3669d     00          | 	byte	0
3669e                 | LR__5537
3669e     2F          | 	byte	"/"
3669f     00          | 	byte	0
366a0                 | LR__5538
366a0     3B          | 	byte	";"
366a1     00          | 	byte	0
366a2                 | LR__5539
366a2     22          | 	byte	34
366a3     00          | 	byte	0
366a4                 | LR__5540
366a4     5E          | 	byte	"^"
366a5     00          | 	byte	0
366a6                 | LR__5541
366a6     29          | 	byte	")"
366a7     00          | 	byte	0
366a8                 | LR__5542
366a8     28          | 	byte	"("
366a9     00          | 	byte	0
366aa                 | LR__5543
366aa     3A          | 	byte	":"
366ab     00          | 	byte	0
366ac                 | LR__5544
366ac     20          | 	byte	" "
366ad     00          | 	byte	0
366ae                 | LR__5545
366ae     3E          | 	byte	">"
366af     00          | 	byte	0
366b0                 | LR__5546
366b0     3C          | 	byte	"<"
366b1     00          | 	byte	0
366b2                 | LR__5547
366b2     3D          | 	byte	"="
366b3     00          | 	byte	0
366b4                 | LR__5548
366b4     62 65 65 70 | 	byte	"beep"
366b8     00          | 	byte	0
366b9                 | LR__5549
366b9     62 2E       | 	byte	"b."
366bb     00          | 	byte	0
366bc                 | LR__5550
366bc     62 6C 69 74 | 	byte	"blit"
366c0     00          | 	byte	0
366c1                 | LR__5551
366c1     62 6F 78    | 	byte	"box"
366c4     00          | 	byte	0
366c5                 | LR__5552
366c5     62 72 75 6E | 	byte	"brun"
366c9     00          | 	byte	0
366ca                 | LR__5553
366ca     62 72 2E    | 	byte	"br."
366cd     00          | 	byte	0
366ce                 | LR__5554
366ce     63 64       | 	byte	"cd"
366d0     00          | 	byte	0
366d1                 | LR__5555
366d1     63 68 61 6E 
366d5     67 65 66 72 
366d9     65 71       | 	byte	"changefreq"
366db     00          | 	byte	0
366dc                 | LR__5556
366dc     63 66 2E    | 	byte	"cf."
366df     00          | 	byte	0
366e0                 | LR__5557
366e0     63 68 61 6E 
366e4     67 65 70 61 
366e8     6E          | 	byte	"changepan"
366e9     00          | 	byte	0
366ea                 | LR__5558
366ea     63 70 2E    | 	byte	"cp."
366ed     00          | 	byte	0
366ee                 | LR__5559
366ee     63 68 61 6E 
366f2     67 65 76 6F 
366f6     6C          | 	byte	"changevol"
366f7     00          | 	byte	0
366f8                 | LR__5560
366f8     63 76 2E    | 	byte	"cv."
366fb     00          | 	byte	0
366fc                 | LR__5561
366fc     63 68 61 6E 
36700     67 65 77 61 
36704     76 65       | 	byte	"changewave"
36706     00          | 	byte	0
36707                 | LR__5562
36707     63 77 2E    | 	byte	"cw."
3670a     00          | 	byte	0
3670b                 | LR__5563
3670b     63 69 72 63 
3670f     6C 65       | 	byte	"circle"
36711     00          | 	byte	0
36712                 | LR__5564
36712     63 69 2E    | 	byte	"ci."
36715     00          | 	byte	0
36716                 | LR__5565
36716     63 6C 69 63 
3671a     6B          | 	byte	"click"
3671b     00          | 	byte	0
3671c                 | LR__5566
3671c     63 6C 6F 73 
36720     65          | 	byte	"close"
36721     00          | 	byte	0
36722                 | LR__5567
36722     63 6C 73    | 	byte	"cls"
36725     00          | 	byte	0
36726                 | LR__5568
36726     63 6F 67 73 
3672a     74 6F 70    | 	byte	"cogstop"
3672d     00          | 	byte	0
3672e                 | LR__5569
3672e     63 6F 6C 6F 
36732     72          | 	byte	"color"
36733     00          | 	byte	0
36734                 | LR__5570
36734     63 2E       | 	byte	"c."
36736     00          | 	byte	0
36737                 | LR__5571
36737     63 6F 70 79 | 	byte	"copy"
3673b     00          | 	byte	0
3673c                 | LR__5572
3673c     63 75 72 73 
36740     6F 72       | 	byte	"cursor"
36742     00          | 	byte	0
36743                 | LR__5573
36743     64 61 74 61 | 	byte	"data"
36747     00          | 	byte	0
36748                 | LR__5574
36748     64 65 66 73 
3674c     6E 64       | 	byte	"defsnd"
3674e     00          | 	byte	0
3674f                 | LR__5575
3674f     64 65 66 65 
36753     6E 76       | 	byte	"defenv"
36755     00          | 	byte	0
36756                 | LR__5576
36756     64 65 66 73 
3675a     70 72 69 74 
3675e     65          | 	byte	"defsprite"
3675f     00          | 	byte	0
36760                 | LR__5577
36760     64 73 2E    | 	byte	"ds."
36763     00          | 	byte	0
36764                 | LR__5578
36764     64 65 67    | 	byte	"deg"
36767     00          | 	byte	0
36768                 | LR__5579
36768     64 65 6C 65 
3676c     74 65       | 	byte	"delete"
3676e     00          | 	byte	0
3676f                 | LR__5580
3676f     64 69 6D    | 	byte	"dim"
36772     00          | 	byte	0
36773                 | LR__5581
36773     64 69 72    | 	byte	"dir"
36776     00          | 	byte	0
36777                 | LR__5582
36777     64 70 6F 6B 
3677b     65          | 	byte	"dpoke"
3677c     00          | 	byte	0
3677d                 | LR__5583
3677d     64 72 61 77 | 	byte	"draw"
36781     00          | 	byte	0
36782                 | LR__5584
36782     64 72 61 77 
36786     74 6F       | 	byte	"drawto"
36788     00          | 	byte	0
36789                 | LR__5585
36789     64 72 2E    | 	byte	"dr."
3678c     00          | 	byte	0
3678d                 | LR__5586
3678d     65 6C 73 65 | 	byte	"else"
36791     00          | 	byte	0
36792                 | LR__5587
36792     65 6E 64    | 	byte	"end"
36795     00          | 	byte	0
36796                 | LR__5588
36796     65 6E 74 65 
3679a     72          | 	byte	"enter"
3679b     00          | 	byte	0
3679c                 | LR__5589
3679c     65 2E       | 	byte	"e."
3679e     00          | 	byte	0
3679f                 | LR__5590
3679f     66 63 69 72 
367a3     63 6C 65    | 	byte	"fcircle"
367a6     00          | 	byte	0
367a7                 | LR__5591
367a7     66 63 2E    | 	byte	"fc."
367aa     00          | 	byte	0
367ab                 | LR__5592
367ab     66 69 6C 6C | 	byte	"fill"
367af     00          | 	byte	0
367b0                 | LR__5593
367b0     66 69 2E    | 	byte	"fi."
367b3     00          | 	byte	0
367b4                 | LR__5594
367b4     66 6F 6E 74 | 	byte	"font"
367b8     00          | 	byte	0
367b9                 | LR__5595
367b9     66 6F 72    | 	byte	"for"
367bc     00          | 	byte	0
367bd                 | LR__5596
367bd     66 2E       | 	byte	"f."
367bf     00          | 	byte	0
367c0                 | LR__5597
367c0     66 72 61 6D 
367c4     65          | 	byte	"frame"
367c5     00          | 	byte	0
367c6                 | LR__5598
367c6     66 72 2E    | 	byte	"fr."
367c9     00          | 	byte	0
367ca                 | LR__5599
367ca     67 65 74    | 	byte	"get"
367cd     00          | 	byte	0
367ce                 | LR__5600
367ce     67 6F 73 75 
367d2     62          | 	byte	"gosub"
367d3     00          | 	byte	0
367d4                 | LR__5601
367d4     67 6F 74 6F | 	byte	"goto"
367d8     00          | 	byte	0
367d9                 | LR__5602
367d9     67 2E       | 	byte	"g."
367db     00          | 	byte	0
367dc                 | LR__5603
367dc     69 66       | 	byte	"if"
367de     00          | 	byte	0
367df                 | LR__5604
367df     69 6E 6B    | 	byte	"ink"
367e2     00          | 	byte	0
367e3                 | LR__5605
367e3     69 2E       | 	byte	"i."
367e5     00          | 	byte	0
367e6                 | LR__5606
367e6     69 6E 70 75 
367ea     74          | 	byte	"input"
367eb     00          | 	byte	0
367ec                 | LR__5607
367ec     6C 69 73 74 | 	byte	"list"
367f0     00          | 	byte	0
367f1                 | LR__5608
367f1     6C 2E       | 	byte	"l."
367f3     00          | 	byte	0
367f4                 | LR__5609
367f4     6C 6F 61 64 | 	byte	"load"
367f8     00          | 	byte	0
367f9                 | LR__5610
367f9     6C 6F 2E    | 	byte	"lo."
367fc     00          | 	byte	0
367fd                 | LR__5611
367fd     6C 70 6F 6B 
36801     65          | 	byte	"lpoke"
36802     00          | 	byte	0
36803                 | LR__5612
36803     6D 6B 64 69 
36807     72          | 	byte	"mkdir"
36808     00          | 	byte	0
36809                 | LR__5613
36809     6D 6F 64 65 | 	byte	"mode"
3680d     00          | 	byte	0
3680e                 | LR__5614
3680e     6D 2E       | 	byte	"m."
36810     00          | 	byte	0
36811                 | LR__5615
36811     6D 6F 75 73 
36815     65          | 	byte	"mouse"
36816     00          | 	byte	0
36817                 | LR__5616
36817     6E 65 77    | 	byte	"new"
3681a     00          | 	byte	0
3681b                 | LR__5617
3681b     6E 65 78 74 | 	byte	"next"
3681f     00          | 	byte	0
36820                 | LR__5618
36820     6E 2E       | 	byte	"n."
36822     00          | 	byte	0
36823                 | LR__5619
36823     6F 6E       | 	byte	"on"
36825     00          | 	byte	0
36826                 | LR__5620
36826     6F 70 65 6E | 	byte	"open"
3682a     00          | 	byte	0
3682b                 | LR__5621
3682b     70 61 70 65 
3682f     72          | 	byte	"paper"
36830     00          | 	byte	0
36831                 | LR__5622
36831     70 61 2E    | 	byte	"pa."
36834     00          | 	byte	0
36835                 | LR__5623
36835     70 69 6E 66 
36839     6C 6F 61 74 | 	byte	"pinfloat"
3683d     00          | 	byte	0
3683e                 | LR__5624
3683e     70 69 6E 68 
36842     69          | 	byte	"pinhi"
36843     00          | 	byte	0
36844                 | LR__5625
36844     70 69 6E 6C 
36848     6F          | 	byte	"pinlo"
36849     00          | 	byte	0
3684a                 | LR__5626
3684a     70 69 6E 73 
3684e     74 61 72 74 | 	byte	"pinstart"
36852     00          | 	byte	0
36853                 | LR__5627
36853     70 69 6E 74 
36857     6F 67 67 6C 
3685b     65          | 	byte	"pintoggle"
3685c     00          | 	byte	0
3685d                 | LR__5628
3685d     70 69 6E 77 
36861     72 69 74 65 | 	byte	"pinwrite"
36865     00          | 	byte	0
36866                 | LR__5629
36866     70 6C 61 79 | 	byte	"play"
3686a     00          | 	byte	0
3686b                 | LR__5630
3686b     70 2E       | 	byte	"p."
3686d     00          | 	byte	0
3686e                 | LR__5631
3686e     70 6C 6F 74 | 	byte	"plot"
36872     00          | 	byte	0
36873                 | LR__5632
36873     70 6C 2E    | 	byte	"pl."
36876     00          | 	byte	0
36877                 | LR__5633
36877     70 6F 6B 65 | 	byte	"poke"
3687b     00          | 	byte	0
3687c                 | LR__5634
3687c     70 6F 70    | 	byte	"pop"
3687f     00          | 	byte	0
36880                 | LR__5635
36880     70 6F 73 69 
36884     74 69 6F 6E | 	byte	"position"
36888     00          | 	byte	0
36889                 | LR__5636
36889     70 6F 73 2E | 	byte	"pos."
3688d     00          | 	byte	0
3688e                 | LR__5637
3688e     70 72 69 6E 
36892     74          | 	byte	"print"
36893     00          | 	byte	0
36894                 | LR__5638
36894     3F          | 	byte	"?"
36895     00          | 	byte	0
36896                 | LR__5639
36896     70 75 74    | 	byte	"put"
36899     00          | 	byte	0
3689a                 | LR__5640
3689a     72 61 64    | 	byte	"rad"
3689d     00          | 	byte	0
3689e                 | LR__5641
3689e     72 65 61 64 | 	byte	"read"
368a2     00          | 	byte	0
368a3                 | LR__5642
368a3     72 65 6C 65 
368a7     61 73 65    | 	byte	"release"
368aa     00          | 	byte	0
368ab                 | LR__5643
368ab     72 65 6D    | 	byte	"rem"
368ae     00          | 	byte	0
368af                 | LR__5644
368af     27          | 	byte	"'"
368b0     00          | 	byte	0
368b1                 | LR__5645
368b1     72 65 73 74 
368b5     6F 72 65    | 	byte	"restore"
368b8     00          | 	byte	0
368b9                 | LR__5646
368b9     72 65 74 75 
368bd     72 6E       | 	byte	"return"
368bf     00          | 	byte	0
368c0                 | LR__5647
368c0     72 75 6E    | 	byte	"run"
368c3     00          | 	byte	0
368c4                 | LR__5648
368c4     73 61 76 65 | 	byte	"save"
368c8     00          | 	byte	0
368c9                 | LR__5649
368c9     73 65 74 63 
368cd     6F 6C 6F 72 | 	byte	"setcolor"
368d1     00          | 	byte	0
368d2                 | LR__5650
368d2     73 2E       | 	byte	"s."
368d4     00          | 	byte	0
368d5                 | LR__5651
368d5     73 65 74 64 
368d9     65 6C 61 79 | 	byte	"setdelay"
368dd     00          | 	byte	0
368de                 | LR__5652
368de     73 64 2E    | 	byte	"sd."
368e1     00          | 	byte	0
368e2                 | LR__5653
368e2     73 65 74 65 
368e6     6E 76       | 	byte	"setenv"
368e8     00          | 	byte	0
368e9                 | LR__5654
368e9     73 65 2E    | 	byte	"se."
368ec     00          | 	byte	0
368ed                 | LR__5655
368ed     73 65 74 6C 
368f1     65 6E       | 	byte	"setlen"
368f3     00          | 	byte	0
368f4                 | LR__5656
368f4     73 6C 2E    | 	byte	"sl."
368f7     00          | 	byte	0
368f8                 | LR__5657
368f8     73 65 74 70 
368fc     61 6E       | 	byte	"setpan"
368fe     00          | 	byte	0
368ff                 | LR__5658
368ff     73 70 2E    | 	byte	"sp."
36902     00          | 	byte	0
36903                 | LR__5659
36903     73 65 74 73 
36907     75 73 74 61 
3690b     69 6E       | 	byte	"setsustain"
3690d     00          | 	byte	0
3690e                 | LR__5660
3690e     73 73 2E    | 	byte	"ss."
36911     00          | 	byte	0
36912                 | LR__5661
36912     73 65 74 76 
36916     6F 6C       | 	byte	"setvol"
36918     00          | 	byte	0
36919                 | LR__5662
36919     73 76 2E    | 	byte	"sv."
3691c     00          | 	byte	0
3691d                 | LR__5663
3691d     73 65 74 77 
36921     61 76 65    | 	byte	"setwave"
36924     00          | 	byte	0
36925                 | LR__5664
36925     73 77 2E    | 	byte	"sw."
36928     00          | 	byte	0
36929                 | LR__5665
36929     73 65 74 77 
3692d     61 76       | 	byte	"setwav"
3692f     00          | 	byte	0
36930                 | LR__5666
36930     73 68 75 74 
36934     75 70       | 	byte	"shutup"
36936     00          | 	byte	0
36937                 | LR__5667
36937     73 68 2E    | 	byte	"sh."
3693a     00          | 	byte	0
3693b                 | LR__5668
3693b     73 6F 75 6E 
3693f     64          | 	byte	"sound"
36940     00          | 	byte	0
36941                 | LR__5669
36941     73 6F 2E    | 	byte	"so."
36944     00          | 	byte	0
36945                 | LR__5670
36945     73 70 72 69 
36949     74 65       | 	byte	"sprite"
3694b     00          | 	byte	0
3694c                 | LR__5671
3694c     73 70 72 2E | 	byte	"spr."
36950     00          | 	byte	0
36951                 | LR__5672
36951     74 68 65 6E | 	byte	"then"
36955     00          | 	byte	0
36956                 | LR__5673
36956     77 61 69 74 
3695a     6D 73       | 	byte	"waitms"
3695c     00          | 	byte	0
3695d                 | LR__5674
3695d     77 2E       | 	byte	"w."
3695f     00          | 	byte	0
36960                 | LR__5675
36960     77 61 69 74 
36964     63 6C 6F 63 
36968     6B          | 	byte	"waitclock"
36969     00          | 	byte	0
3696a                 | LR__5676
3696a     77 63 2E    | 	byte	"wc."
3696d     00          | 	byte	0
3696e                 | LR__5677
3696e     77 61 69 74 
36972     76 62 6C    | 	byte	"waitvbl"
36975     00          | 	byte	0
36976                 | LR__5678
36976     77 76 2E    | 	byte	"wv."
36979     00          | 	byte	0
3697a                 | LR__5679
3697a     77 72 70 69 
3697e     6E          | 	byte	"wrpin"
3697f     00          | 	byte	0
36980                 | LR__5680
36980     77 78 70 69 
36984     6E          | 	byte	"wxpin"
36985     00          | 	byte	0
36986                 | LR__5681
36986     77 79 70 69 
3698a     6E          | 	byte	"wypin"
3698b     00          | 	byte	0
3698c                 | LR__5682
3698c     61 62 73    | 	byte	"abs"
3698f     00          | 	byte	0
36990                 | LR__5683
36990     61 63 6F 73 | 	byte	"acos"
36994     00          | 	byte	0
36995                 | LR__5684
36995     61 64 72    | 	byte	"adr"
36998     00          | 	byte	0
36999                 | LR__5685
36999     61 64 64 72 | 	byte	"addr"
3699d     00          | 	byte	0
3699e                 | LR__5686
3699e     61 73 63    | 	byte	"asc"
369a1     00          | 	byte	0
369a2                 | LR__5687
369a2     61 73 69 6E | 	byte	"asin"
369a6     00          | 	byte	0
369a7                 | LR__5688
369a7     61 74 6E    | 	byte	"atn"
369aa     00          | 	byte	0
369ab                 | LR__5689
369ab     62 69 6E 24 | 	byte	"bin$"
369af     00          | 	byte	0
369b0                 | LR__5690
369b0     63 68 72 24 | 	byte	"chr$"
369b4     00          | 	byte	0
369b5                 | LR__5691
369b5     63 6F 67 69 
369b9     6E 69 74    | 	byte	"coginit"
369bc     00          | 	byte	0
369bd                 | LR__5692
369bd     63 6F 73    | 	byte	"cos"
369c0     00          | 	byte	0
369c1                 | LR__5693
369c1     64 70 65 65 
369c5     6B          | 	byte	"dpeek"
369c6     00          | 	byte	0
369c7                 | LR__5694
369c7     66 72 61 6D 
369cb     65 62 75 66 | 	byte	"framebuf"
369cf     00          | 	byte	0
369d0                 | LR__5695
369d0     66 62 2E    | 	byte	"fb."
369d3     00          | 	byte	0
369d4                 | LR__5696
369d4     66 72 65    | 	byte	"fre"
369d7     00          | 	byte	0
369d8                 | LR__5697
369d8     67 65 74 70 
369dc     69 78 65 6C | 	byte	"getpixel"
369e0     00          | 	byte	0
369e1                 | LR__5698
369e1     67 65 2E    | 	byte	"ge."
369e4     00          | 	byte	0
369e5                 | LR__5699
369e5     67 65 74 65 
369e9     6E 76 73 75 
369ed     73 74 61 69 
369f1     6E          | 	byte	"getenvsustain"
369f2     00          | 	byte	0
369f3                 | LR__5700
369f3     67 65 74 6E 
369f7     6F 74 65 76 
369fb     61 6C 75 65 | 	byte	"getnotevalue"
369ff     00          | 	byte	0
36a00                 | LR__5701
36a00     67 65 74 74 
36a04     69 6D 65    | 	byte	"gettime"
36a07     00          | 	byte	0
36a08                 | LR__5702
36a08     68 65 78 24 | 	byte	"hex$"
36a0c     00          | 	byte	0
36a0d                 | LR__5703
36a0d     69 6E 6B 65 
36a11     79 24       | 	byte	"inkey$"
36a13     00          | 	byte	0
36a14                 | LR__5704
36a14     69 6E 74    | 	byte	"int"
36a17     00          | 	byte	0
36a18                 | LR__5705
36a18     6C 65 66 74 
36a1c     24          | 	byte	"left$"
36a1d     00          | 	byte	0
36a1e                 | LR__5706
36a1e     6C 65 6E    | 	byte	"len"
36a21     00          | 	byte	0
36a22                 | LR__5707
36a22     6C 6F 67    | 	byte	"log"
36a25     00          | 	byte	0
36a26                 | LR__5708
36a26     6C 70 65 65 
36a2a     6B          | 	byte	"lpeek"
36a2b     00          | 	byte	0
36a2c                 | LR__5709
36a2c     6D 65 6D 68 
36a30     69          | 	byte	"memhi"
36a31     00          | 	byte	0
36a32                 | LR__5710
36a32     6D 65 6D 6C 
36a36     6F          | 	byte	"memlo"
36a37     00          | 	byte	0
36a38                 | LR__5711
36a38     6D 69 64 24 | 	byte	"mid$"
36a3c     00          | 	byte	0
36a3d                 | LR__5712
36a3d     6D 6F 75 73 
36a41     65 6B       | 	byte	"mousek"
36a43     00          | 	byte	0
36a44                 | LR__5713
36a44     6D 6F 75 73 
36a48     65 77       | 	byte	"mousew"
36a4a     00          | 	byte	0
36a4b                 | LR__5714
36a4b     6D 6F 75 73 
36a4f     65 78       | 	byte	"mousex"
36a51     00          | 	byte	0
36a52                 | LR__5715
36a52     6D 6F 75 73 
36a56     65 79       | 	byte	"mousey"
36a58     00          | 	byte	0
36a59                 | LR__5716
36a59     70 61 64 78 | 	byte	"padx"
36a5d     00          | 	byte	0
36a5e                 | LR__5717
36a5e     70 61 64 79 | 	byte	"pady"
36a62     00          | 	byte	0
36a63                 | LR__5718
36a63     70 61 64 7A | 	byte	"padz"
36a67     00          | 	byte	0
36a68                 | LR__5719
36a68     70 61 64 72 
36a6c     78          | 	byte	"padrx"
36a6d     00          | 	byte	0
36a6e                 | LR__5720
36a6e     70 61 64 72 
36a72     79          | 	byte	"padry"
36a73     00          | 	byte	0
36a74                 | LR__5721
36a74     70 61 64 72 
36a78     7A          | 	byte	"padrz"
36a79     00          | 	byte	0
36a7a                 | LR__5722
36a7a     70 61 64 68 | 	byte	"padh"
36a7e     00          | 	byte	0
36a7f                 | LR__5723
36a7f     70 65 65 6B | 	byte	"peek"
36a83     00          | 	byte	0
36a84                 | LR__5724
36a84     70 69 6E 72 
36a88     65 61 64    | 	byte	"pinread"
36a8b     00          | 	byte	0
36a8c                 | LR__5725
36a8c     72 64 70 69 
36a90     6E          | 	byte	"rdpin"
36a91     00          | 	byte	0
36a92                 | LR__5726
36a92     72 69 67 68 
36a96     74 24       | 	byte	"right$"
36a98     00          | 	byte	0
36a99                 | LR__5727
36a99     72 71 70 69 
36a9d     6E          | 	byte	"rqpin"
36a9e     00          | 	byte	0
36a9f                 | LR__5728
36a9f     72 6F 75 6E 
36aa3     64          | 	byte	"round"
36aa4     00          | 	byte	0
36aa5                 | LR__5729
36aa5     72 6E 64    | 	byte	"rnd"
36aa8     00          | 	byte	0
36aa9                 | LR__5730
36aa9     73 69 6E    | 	byte	"sin"
36aac     00          | 	byte	0
36aad                 | LR__5731
36aad     73 71 72    | 	byte	"sqr"
36ab0     00          | 	byte	0
36ab1                 | LR__5732
36ab1     73 74 69 63 
36ab5     6B          | 	byte	"stick"
36ab6     00          | 	byte	0
36ab7                 | LR__5733
36ab7     73 74 72 69 
36abb     67          | 	byte	"strig"
36abc     00          | 	byte	0
36abd                 | LR__5734
36abd     73 74 72 24 | 	byte	"str$"
36ac1     00          | 	byte	0
36ac2                 | LR__5735
36ac2     74 61 6E    | 	byte	"tan"
36ac5     00          | 	byte	0
36ac6                 | LR__5736
36ac6     76 61 6C    | 	byte	"val"
36ac9     00          | 	byte	0
36aca                 | LR__5737
36aca     76 61 72 70 
36ace     74 72       | 	byte	"varptr"
36ad0     00          | 	byte	0
36ad1                 | LR__5738
36ad1     61          | 	byte	"a"
36ad2     00          | 	byte	0
36ad3                 | LR__5739
36ad3     7A          | 	byte	"z"
36ad4     00          | 	byte	0
36ad5                 | LR__5740
36ad5     5F          | 	byte	"_"
36ad6     00          | 	byte	0
36ad7                 | LR__5741
36ad7     61          | 	byte	"a"
36ad8     00          | 	byte	0
36ad9                 | LR__5742
36ad9     7A          | 	byte	"z"
36ada     00          | 	byte	0
36adb                 | LR__5743
36adb     30          | 	byte	"0"
36adc     00          | 	byte	0
36add                 | LR__5744
36add     39          | 	byte	"9"
36ade     00          | 	byte	0
36adf                 | LR__5745
36adf     5F          | 	byte	"_"
36ae0     00          | 	byte	0
36ae1                 | LR__5746
36ae1     2E          | 	byte	"."
36ae2     00          | 	byte	0
36ae3                 | LR__5747
36ae3     61          | 	byte	"a"
36ae4     00          | 	byte	0
36ae5                 | LR__5748
36ae5     7A          | 	byte	"z"
36ae6     00          | 	byte	0
36ae7                 | LR__5749
36ae7     30          | 	byte	"0"
36ae8     00          | 	byte	0
36ae9                 | LR__5750
36ae9     39          | 	byte	"9"
36aea     00          | 	byte	0
36aeb                 | LR__5751
36aeb     5F          | 	byte	"_"
36aec     00          | 	byte	0
36aed                 | LR__5752
36aed     24          | 	byte	"$"
36aee     00          | 	byte	0
36aef                 | LR__5753
36aef     25          | 	byte	"%"
36af0     00          | 	byte	0
36af1                 | LR__5754
36af1     21          | 	byte	"!"
36af2     00          | 	byte	0
36af3                 | LR__5755
36af3     30          | 	byte	"0"
36af4     00          | 	byte	0
36af5                 | LR__5756
36af5     39          | 	byte	"9"
36af6     00          | 	byte	0
36af7                 | LR__5757
36af7     2E          | 	byte	"."
36af8     00          | 	byte	0
36af9                 | LR__5758
36af9     24          | 	byte	"$"
36afa     00          | 	byte	0
36afb                 | LR__5759
36afb     25          | 	byte	"%"
36afc     00          | 	byte	0
36afd                 | LR__5760
36afd     2D          | 	byte	"-"
36afe     00          | 	byte	0
36aff                 | LR__5761
36aff     2E          | 	byte	"."
36b00     00          | 	byte	0
36b01                 | LR__5762
36b01     24          | 	byte	"$"
36b02     00          | 	byte	0
36b03                 | LR__5763
36b03     25          | 	byte	"%"
36b04     00          | 	byte	0
36b05                 | LR__5764
36b05     30          | 	byte	"0"
36b06     00          | 	byte	0
36b07                 | LR__5765
36b07     39          | 	byte	"9"
36b08     00          | 	byte	0
36b09                 | LR__5766
36b09     5F          | 	byte	"_"
36b0a     00          | 	byte	0
36b0b                 | LR__5767
36b0b     2E          | 	byte	"."
36b0c     00          | 	byte	0
36b0d                 | LR__5768
36b0d     45          | 	byte	"E"
36b0e     00          | 	byte	0
36b0f                 | LR__5769
36b0f     65          | 	byte	"e"
36b10     00          | 	byte	0
36b11                 | LR__5770
36b11     2D          | 	byte	"-"
36b12     00          | 	byte	0
36b13                 | LR__5771
36b13     61          | 	byte	"a"
36b14     00          | 	byte	0
36b15                 | LR__5772
36b15     66          | 	byte	"f"
36b16     00          | 	byte	0
36b17                 | LR__5773
36b17     30          | 	byte	"0"
36b18     00          | 	byte	0
36b19                 | LR__5774
36b19     31          | 	byte	"1"
36b1a     00          | 	byte	0
36b1b                 | LR__5775
36b1b     5F          | 	byte	"_"
36b1c     00          | 	byte	0
36b1d                 | LR__5776
36b1d     2D          | 	byte	"-"
36b1e     00          | 	byte	0
36b1f                 | LR__5777
36b1f     65          | 	byte	"e"
36b20     00          | 	byte	0
36b21                 | LR__5778
36b21     2E          | 	byte	"."
36b22     00          | 	byte	0
36b23                 | LR__5779
36b23     45          | 	byte	"E"
36b24     00          | 	byte	0
36b25                 | LR__5780
36b25     65          | 	byte	"e"
36b26     00          | 	byte	0
36b27                 | LR__5781
36b27     30          | 	byte	"0"
36b28     00          | 	byte	0
36b29                 | LR__5782
36b29     39          | 	byte	"9"
36b2a     00          | 	byte	0
36b2b                 | LR__5783
36b2b     24          | 	byte	"$"
36b2c     00          | 	byte	0
36b2d                 | LR__5784
36b2d     25          | 	byte	"%"
36b2e     00          | 	byte	0
36b2f                 | LR__5785
36b2f     2D          | 	byte	"-"
36b30     00          | 	byte	0
36b31                 | LR__5786
36b31     24          | 	byte	"$"
36b32     00          | 	byte	0
36b33                 | LR__5787
36b33     25          | 	byte	"%"
36b34     00          | 	byte	0
36b35                 | LR__5788
36b35     30          | 	byte	"0"
36b36     00          | 	byte	0
36b37                 | LR__5789
36b37     39          | 	byte	"9"
36b38     00          | 	byte	0
36b39                 | LR__5790
36b39     5F          | 	byte	"_"
36b3a     00          | 	byte	0
36b3b                 | LR__5791
36b3b     30          | 	byte	"0"
36b3c     00          | 	byte	0
36b3d                 | LR__5792
36b3d     39          | 	byte	"9"
36b3e     00          | 	byte	0
36b3f                 | LR__5793
36b3f     61          | 	byte	"a"
36b40     00          | 	byte	0
36b41                 | LR__5794
36b41     66          | 	byte	"f"
36b42     00          | 	byte	0
36b43                 | LR__5795
36b43     5F          | 	byte	"_"
36b44     00          | 	byte	0
36b45                 | LR__5796
36b45     30          | 	byte	"0"
36b46     00          | 	byte	0
36b47                 | LR__5797
36b47     31          | 	byte	"1"
36b48     00          | 	byte	0
36b49                 | LR__5798
36b49     5F          | 	byte	"_"
36b4a     00          | 	byte	0
36b4b                 | LR__5799
36b4b     30          | 	byte	"0"
36b4c     00          | 	byte	0
36b4d                 | LR__5800
36b4d     39          | 	byte	"9"
36b4e     00          | 	byte	0
36b4f                 | LR__5801
36b4f     5F          | 	byte	"_"
36b50     00          | 	byte	0
36b51                 | LR__5802
36b51     22          | 	byte	34
36b52     00          | 	byte	0
36b53                 | LR__5803
36b53     22          | 	byte	34
36b54     00          | 	byte	0
36b55                 | LR__5804
36b55     44 69 6D 3A 
36b59     20 61 74 20 
36b5d     6C 69 6E 65 
36b61     20          | 	byte	"Dim: at line "
36b62     00          | 	byte	0
36b63                 | LR__5805
36b63     3A 20 77 61 
36b67     72 6E 69 6E 
36b6b     67 3A 20 74 
36b6f     68 65 20 76 
36b73     61 72 69 61 
36b77     62 6C 65 20 
36b7b     65 78 69 73 
36b7f     74 65 64 2E | 	byte	": warning: the variable existed."
36b83     00          | 	byte	0
36b84                 | LR__5806
36b84     28          | 	byte	"("
36b85     00          | 	byte	0
36b86                 | LR__5807
36b86     61 73       | 	byte	"as"
36b88     00          | 	byte	0
36b89                 | LR__5808
36b89     61 73       | 	byte	"as"
36b8b     00          | 	byte	0
36b8c                 | LR__5809
36b8c     2C          | 	byte	","
36b8d     00          | 	byte	0
36b8e                 | LR__5810
36b8e     29          | 	byte	")"
36b8f     00          | 	byte	0
36b90                 | LR__5811
36b90     29          | 	byte	")"
36b91     00          | 	byte	0
36b92                 | LR__5812
36b92     61 73       | 	byte	"as"
36b94     00          | 	byte	0
36b95                 | LR__5813
36b95     62 79 74 65 | 	byte	"byte"
36b99     00          | 	byte	0
36b9a                 | LR__5814
36b9a     75 62 79 74 
36b9e     65          | 	byte	"ubyte"
36b9f     00          | 	byte	0
36ba0                 | LR__5815
36ba0     73 68 6F 72 
36ba4     74          | 	byte	"short"
36ba5     00          | 	byte	0
36ba6                 | LR__5816
36ba6     75 73 68 6F 
36baa     72 74       | 	byte	"ushort"
36bac     00          | 	byte	0
36bad                 | LR__5817
36bad     6C 6F 6E 67 | 	byte	"long"
36bb1     00          | 	byte	0
36bb2                 | LR__5818
36bb2     69 6E 74 65 
36bb6     67 65 72    | 	byte	"integer"
36bb9     00          | 	byte	0
36bba                 | LR__5819
36bba     75 6C 6F 6E 
36bbe     67          | 	byte	"ulong"
36bbf     00          | 	byte	0
36bc0                 | LR__5820
36bc0     69 6E 74 36 
36bc4     34          | 	byte	"int64"
36bc5     00          | 	byte	0
36bc6                 | LR__5821
36bc6     75 69 6E 74 
36bca     36 34       | 	byte	"uint64"
36bcc     00          | 	byte	0
36bcd                 | LR__5822
36bcd     73 69 6E 67 
36bd1     6C 65       | 	byte	"single"
36bd3     00          | 	byte	0
36bd4                 | LR__5823
36bd4     64 6F 75 62 
36bd8     6C 65       | 	byte	"double"
36bda     00          | 	byte	0
36bdb                 | LR__5824
36bdb     73 74 72 69 
36bdf     6E 67       | 	byte	"string"
36be1     00          | 	byte	0
36be2                 | LR__5825
36be2     74 6F       | 	byte	"to"
36be4     00          | 	byte	0
36be5                 | LR__5826
36be5     73 74 65 70 | 	byte	"step"
36be9     00          | 	byte	0
36bea                 | LR__5827
36bea     73 2E       | 	byte	"s."
36bec     00          | 	byte	0
36bed                 | LR__5828
36bed     73 2E       | 	byte	"s."
36bef     00          | 	byte	0
36bf0                 | LR__5829
36bf0     67 6F 74 6F | 	byte	"goto"
36bf4     00          | 	byte	0
36bf5                 | LR__5830
36bf5     67 6F 73 75 
36bf9     62          | 	byte	"gosub"
36bfa     00          | 	byte	0
36bfb                 | LR__5831
36bfb     24          | 	byte	"$"
36bfc     00          | 	byte	0
36bfd                 | LR__5832
36bfd     26 68       | 	byte	"&h"
36bff     00          | 	byte	0
36c00                 | LR__5833
36c00     25          | 	byte	"%"
36c01     00          | 	byte	0
36c02                 | LR__5834
36c02     26 62       | 	byte	"&b"
36c04     00          | 	byte	0
36c05                 | LR__5835
36c05                 | 	byte	
36c05     00          | 	byte	0
36c06                 | LR__5836
36c06     61 63 6F 73 
36c0a     3A 20       | 	byte	"acos: "
36c0c     00          | 	byte	0
36c0d                 | LR__5837
36c0d     61 73 63 3A 
36c11     20          | 	byte	"asc: "
36c12     00          | 	byte	0
36c13                 | LR__5838
36c13     61 73 63 3A 
36c17     20          | 	byte	"asc: "
36c18     00          | 	byte	0
36c19                 | LR__5839
36c19     61 73 69 6E 
36c1d     3A 20       | 	byte	"asin: "
36c1f     00          | 	byte	0
36c20                 | LR__5840
36c20     61 74 6E 3A 
36c24     20          | 	byte	"atn: "
36c25     00          | 	byte	0
36c26                 | LR__5841
36c26     62 6C 69 74 
36c2a     3A 20       | 	byte	"blit: "
36c2c     00          | 	byte	0
36c2d                 | LR__5842
36c2d     62 69 6E 24 
36c31     3A 20       | 	byte	"bin$: "
36c33     00          | 	byte	0
36c34                 | LR__5843
36c34     2F          | 	byte	"/"
36c35     00          | 	byte	0
36c36                 | LR__5844
36c36     2F 73 64 2F 
36c3a     62 69 6E 2F | 	byte	"/sd/bin/"
36c3e     00          | 	byte	0
36c3f                 | LR__5845
36c3f     53 79 73 74 
36c43     65 6D 20 65 
36c47     72 72 6F 72 
36c4b     20          | 	byte	"System error "
36c4c     00          | 	byte	0
36c4d                 | LR__5846
36c4d     3A 20       | 	byte	": "
36c4f     00          | 	byte	0
36c50                 | LR__5847
36c50     2A          | 	byte	"*"
36c51     00          | 	byte	0
36c52                 | LR__5848
36c52     2E 2E       | 	byte	".."
36c54     00          | 	byte	0
36c55                 | LR__5849
36c55     2F          | 	byte	"/"
36c56     00          | 	byte	0
36c57                 | LR__5850
36c57     2F          | 	byte	"/"
36c58     00          | 	byte	0
36c59                 | LR__5851
36c59     53 79 73 74 
36c5d     65 6D 20 65 
36c61     72 72 6F 72 
36c65     20          | 	byte	"System error "
36c66     00          | 	byte	0
36c67                 | LR__5852
36c67     3A 20       | 	byte	": "
36c69     00          | 	byte	0
36c6a                 | LR__5853
36c6a     43 75 72 72 
36c6e     65 6E 74 20 
36c72     64 69 72 65 
36c76     63 74 6F 72 
36c7a     79 3A 20    | 	byte	"Current directory: "
36c7d     00          | 	byte	0
36c7e                 | LR__5854
36c7e     2F          | 	byte	"/"
36c7f     00          | 	byte	0
36c80                 | LR__5855
36c80     53 79 73 74 
36c84     65 6D 20 65 
36c88     72 72 6F 72 
36c8c     20          | 	byte	"System error "
36c8d     00          | 	byte	0
36c8e                 | LR__5856
36c8e     3A 20       | 	byte	": "
36c90     00          | 	byte	0
36c91                 | LR__5857
36c91     43 75 72 72 
36c95     65 6E 74 20 
36c99     64 69 72 65 
36c9d     63 74 6F 72 
36ca1     79 3A 20    | 	byte	"Current directory: "
36ca4     00          | 	byte	0
36ca5                 | LR__5858
36ca5     2F          | 	byte	"/"
36ca6     00          | 	byte	0
36ca7                 | LR__5859
36ca7     2F          | 	byte	"/"
36ca8     00          | 	byte	0
36ca9                 | LR__5860
36ca9     2F          | 	byte	"/"
36caa     00          | 	byte	0
36cab                 | LR__5861
36cab     53 79 73 74 
36caf     65 6D 20 65 
36cb3     72 72 6F 72 
36cb7     20          | 	byte	"System error "
36cb8     00          | 	byte	0
36cb9                 | LR__5862
36cb9     3A 20       | 	byte	": "
36cbb     00          | 	byte	0
36cbc                 | LR__5863
36cbc     43 75 72 72 
36cc0     65 6E 74 20 
36cc4     64 69 72 65 
36cc8     63 74 6F 72 
36ccc     79 3A 20    | 	byte	"Current directory: "
36ccf     00          | 	byte	0
36cd0                 | LR__5864
36cd0     63 68 72 24 
36cd4     3A 20       | 	byte	"chr$: "
36cd6     00          | 	byte	0
36cd7                 | LR__5865
36cd7     63 68 61 6E 
36cdb     6E 65 6C 23 
36cdf     20 65 78 70 
36ce3     65 63 74 65 
36ce7     64          | 	byte	"channel# expected"
36ce8     00          | 	byte	0
36ce9                 | LR__5866
36ce9     63 6F 67 69 
36ced     6E 69 74 3A 
36cf1     20          | 	byte	"coginit: "
36cf2     00          | 	byte	0
36cf3                 | LR__5867
36cf3     53 79 73 74 
36cf7     65 6D 20 65 
36cfb     72 72 6F 72 
36cff     20 2D 20    | 	byte	"System error - "
36d02     00          | 	byte	0
36d03                 | LR__5868
36d03     20 69 6E 20 
36d07     6C 69 6E 65 
36d0b     20          | 	byte	" in line "
36d0c     00          | 	byte	0
36d0d                 | LR__5869
36d0d     3A 20       | 	byte	": "
36d0f     00          | 	byte	0
36d10                 | LR__5870
36d10     2C 20 66 69 
36d14     6C 65 20 6E 
36d18     61 6D 65 3A 
36d1c     20          | 	byte	", file name: "
36d1d     00          | 	byte	0
36d1e                 | LR__5871
36d1e     53 79 73 74 
36d22     65 6D 20 65 
36d26     72 72 6F 72 
36d2a     20 2D 20    | 	byte	"System error - "
36d2d     00          | 	byte	0
36d2e                 | LR__5872
36d2e     20 69 6E 20 
36d32     6C 69 6E 65 
36d36     20          | 	byte	" in line "
36d37     00          | 	byte	0
36d38                 | LR__5873
36d38     3A 20       | 	byte	": "
36d3a     00          | 	byte	0
36d3b                 | LR__5874
36d3b     2C 20 66 69 
36d3f     6C 65 20 6E 
36d43     61 6D 65 3A 
36d47     20          | 	byte	", file name: "
36d48     00          | 	byte	0
36d49                 | LR__5875
36d49     63 6F 73 3A 
36d4d     20          | 	byte	"cos: "
36d4e     00          | 	byte	0
36d4f                 | LR__5876
36d4f                 | 	byte	
36d4f     00          | 	byte	0
36d50                 | LR__5877
36d50                 | 	byte	
36d50     00          | 	byte	0
36d51                 | LR__5878
36d51     2F 73 64 2F 
36d55     6D 65 64 69 
36d59     61 2F 68 2F | 	byte	"/sd/media/h/"
36d5d     00          | 	byte	0
36d5e                 | LR__5879
36d5e     53 79 73 74 
36d62     65 6D 20 65 
36d66     72 72 6F 72 
36d6a     20          | 	byte	"System error "
36d6b     00          | 	byte	0
36d6c                 | LR__5880
36d6c     3A 20       | 	byte	": "
36d6e     00          | 	byte	0
36d6f                 | LR__5881
36d6f                 | 	byte	
36d6f     00          | 	byte	0
36d70                 | LR__5882
36d70                 | 	byte	
36d70     00          | 	byte	0
36d71                 | LR__5883
36d71     2F 73 64 2F 
36d75     6D 65 64 69 
36d79     61 2F 73 2F | 	byte	"/sd/media/s/"
36d7d     00          | 	byte	0
36d7e                 | LR__5884
36d7e     53 79 73 74 
36d82     65 6D 20 65 
36d86     72 72 6F 72 
36d8a     20          | 	byte	"System error "
36d8b     00          | 	byte	0
36d8c                 | LR__5885
36d8c     3A 20       | 	byte	": "
36d8e     00          | 	byte	0
36d8f                 | LR__5886
36d8f     2F          | 	byte	"/"
36d90     00          | 	byte	0
36d91                 | LR__5887
36d91     2F          | 	byte	"/"
36d92     00          | 	byte	0
36d93                 | LR__5888
36d93     2F          | 	byte	"/"
36d94     00          | 	byte	0
36d95                 | LR__5889
36d95     43 61 6E 6E 
36d99     6F 74 20 64 
36d9d     65 6C 65 74 
36da1     65 20 66 69 
36da5     6C 65 20 6F 
36da9     72 20 66 69 
36dad     6C 65 20 64 
36db1     6F 65 73 6E 
36db5     27 74 20 65 
36db9     78 69 73 74 
36dbd     3A 20 73 79 
36dc1     73 74 65 6D 
36dc5     20 65 72 72 
36dc9     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
36dcc     00          | 	byte	0
36dcd                 | LR__5890
36dcd     43 75 72 72 
36dd1     65 6E 74 20 
36dd5     64 69 72 65 
36dd9     63 74 6F 72 
36ddd     79 3A 20    | 	byte	"Current directory: "
36de0     00          | 	byte	0
36de1                 | LR__5891
36de1                 | 	byte	
36de1     00          | 	byte	0
36de2                 | LR__5892
36de2     2A          | 	byte	"*"
36de3     00          | 	byte	0
36de4                 | LR__5893
36de4                 | 	byte	
36de4     00          | 	byte	0
36de5                 | LR__5894
36de5     5B 64 69 72 
36de9     5D 20       | 	byte	"[dir] "
36deb     00          | 	byte	0
36dec                 | LR__5895
36dec     4D 6F 72 65 
36df0     20 74 68 61 
36df4     6E 20 31 32 
36df8     38 20 65 6E 
36dfc     74 72 69 65 
36e00     73 20 66 6F 
36e04     75 6E 64 3A 
36e08     20 63 6C 65 
36e0c     61 6E 20 79 
36e10     6F 75 72 20 
36e14     64 69 72 65 
36e18     63 74 6F 72 
36e1c     79          | 	byte	"More than 128 entries found: clean your directory"
36e1d     00          | 	byte	0
36e1e                 | LR__5896
36e1e     2A          | 	byte	"*"
36e1f     00          | 	byte	0
36e20                 | LR__5897
36e20                 | 	byte	
36e20     00          | 	byte	0
36e21                 | LR__5898
36e21     4D 6F 72 65 
36e25     20 74 68 61 
36e29     6E 20 31 32 
36e2d     38 20 65 6E 
36e31     74 72 69 65 
36e35     73 20 66 6F 
36e39     75 6E 64 3A 
36e3d     20 63 6C 65 
36e41     61 6E 20 79 
36e45     6F 75 72 20 
36e49     64 69 72 65 
36e4d     63 74 6F 72 
36e51     79          | 	byte	"More than 128 entries found: clean your directory"
36e52     00          | 	byte	0
36e53                 | LR__5899
36e53     45 72 72 6F 
36e57     72 20       | 	byte	"Error "
36e59     00          | 	byte	0
36e5a                 | LR__5900
36e5a     3A 20       | 	byte	": "
36e5c     00          | 	byte	0
36e5d                 | LR__5901
36e5d     67 65 74 65 
36e61     6E 76 73 75 
36e65     73 74 61 69 
36e69     6E 3A 20    | 	byte	"getenvsustain: "
36e6c     00          | 	byte	0
36e6d                 | LR__5902
36e6d     67 65 74 70 
36e71     69 78 65 6C 
36e75     3A 20       | 	byte	"getpixel: "
36e77     00          | 	byte	0
36e78                 | LR__5903
36e78     68 65 78 24 
36e7c     3A 20       | 	byte	"hex$: "
36e7e     00          | 	byte	0
36e7f                 | LR__5904
36e7f                 | 	byte	
36e7f     00          | 	byte	0
36e80                 | LR__5905
36e80     49 6E 20 69 
36e84     6E 70 75 74 
36e88     3A 20       | 	byte	"In input: "
36e8a     00          | 	byte	0
36e8b                 | LR__5906
36e8b     2C          | 	byte	","
36e8c     00          | 	byte	0
36e8d                 | LR__5907
36e8d                 | 	byte	
36e8d     00          | 	byte	0
36e8e                 | LR__5908
36e8e                 | 	byte	
36e8e     00          | 	byte	0
36e8f                 | LR__5909
36e8f     6C 65 66 74 
36e93     24 3A 20    | 	byte	"left$: "
36e96     00          | 	byte	0
36e97                 | LR__5910
36e97     6C 65 66 74 
36e9b     24 3A 20    | 	byte	"left$: "
36e9e     00          | 	byte	0
36e9f                 | LR__5911
36e9f     6C 65 6E 3A 
36ea3     20          | 	byte	"len: "
36ea4     00          | 	byte	0
36ea5                 | LR__5912
36ea5     6C 65 6E 3A 
36ea9     20          | 	byte	"len: "
36eaa     00          | 	byte	0
36eab                 | LR__5913
36eab                 | 	byte	
36eab     00          | 	byte	0
36eac                 | LR__5914
36eac     2F          | 	byte	"/"
36ead     00          | 	byte	0
36eae                 | LR__5915
36eae     2F          | 	byte	"/"
36eaf     00          | 	byte	0
36eb0                 | LR__5916
36eb0     2E 62 61 73 | 	byte	".bas"
36eb4     00          | 	byte	0
36eb5                 | LR__5917
36eb5     53 79 73 74 
36eb9     65 6D 20 65 
36ebd     72 72 6F 72 
36ec1     20          | 	byte	"System error "
36ec2     00          | 	byte	0
36ec3                 | LR__5918
36ec3     3A 20       | 	byte	": "
36ec5     00          | 	byte	0
36ec6                 | LR__5919
36ec6     2E 62 61 73 | 	byte	".bas"
36eca     00          | 	byte	0
36ecb                 | LR__5920
36ecb     2F          | 	byte	"/"
36ecc     00          | 	byte	0
36ecd                 | LR__5921
36ecd                 | 	byte	
36ecd     00          | 	byte	0
36ece                 | LR__5922
36ece     4C 6F 61 64 
36ed2     65 64 20    | 	byte	"Loaded "
36ed5     00          | 	byte	0
36ed6                 | LR__5923
36ed6     2F          | 	byte	"/"
36ed7     00          | 	byte	0
36ed8                 | LR__5924
36ed8     6C 6F 67 3A 
36edc     20          | 	byte	"log: "
36edd     00          | 	byte	0
36ede                 | LR__5925
36ede     6D 69 64 24 
36ee2     3A 20       | 	byte	"mid$: "
36ee4     00          | 	byte	0
36ee5                 | LR__5926
36ee5     6D 69 64 24 
36ee9     3A 20       | 	byte	"mid$: "
36eeb     00          | 	byte	0
36eec                 | LR__5927
36eec     43 61 6E 6E 
36ef0     6F 74 20 63 
36ef4     72 65 61 74 
36ef8     65 20 61 20 
36efc     64 69 72 65 
36f00     63 74 6F 72 
36f04     79 3A 20 73 
36f08     79 73 74 65 
36f0c     6D 20 65 72 
36f10     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
36f14     00          | 	byte	0
36f15                 | LR__5928
36f15     20 42 41 53 
36f19     49 43 20 62 
36f1d     79 74 65 73 
36f21     20 66 72 65 
36f25     65          | 	byte	" BASIC bytes free"
36f26     00          | 	byte	0
36f27                 | LR__5929
36f27                 | 	byte	
36f27     00          | 	byte	0
36f28                 | LR__5930
36f28                 | 	byte	
36f28     00          | 	byte	0
36f29                 | LR__5931
36f29                 | 	byte	
36f29     00          | 	byte	0
36f2a                 | LR__5932
36f2a     6E 6F 6E 61 
36f2e     6D 65 2E 62 
36f32     61 73       | 	byte	"noname.bas"
36f34     00          | 	byte	0
36f35                 | LR__5933
36f35     66 69 6C 65 
36f39     6E 61 6D 65 
36f3d     20 65 78 70 
36f41     65 63 74 65 
36f45     64          | 	byte	"filename expected"
36f46     00          | 	byte	0
36f47                 | LR__5934
36f47     72 65 61 64 | 	byte	"read"
36f4b     00          | 	byte	0
36f4c                 | LR__5935
36f4c     77 72 69 74 
36f50     65          | 	byte	"write"
36f51     00          | 	byte	0
36f52                 | LR__5936
36f52     61 70 70 65 
36f56     6E 64       | 	byte	"append"
36f58     00          | 	byte	0
36f59                 | LR__5937
36f59     63 68 61 6E 
36f5d     6E 65 6C 23 
36f61     20 65 78 70 
36f65     65 63 74 65 
36f69     64          | 	byte	"channel# expected"
36f6a     00          | 	byte	0
36f6b                 | LR__5938
36f6b     4F 70 65 6E 
36f6f     3A 20 69 6E 
36f73     76 61 6C 69 
36f77     64 20 6D 6F 
36f7b     64 65       | 	byte	"Open: invalid mode"
36f7d     00          | 	byte	0
36f7e                 | LR__5939
36f7e     70 61 64 68 
36f82     3A 20       | 	byte	"padh: "
36f84     00          | 	byte	0
36f85                 | LR__5940
36f85     70 61 64 72 
36f89     78 3A 20    | 	byte	"padrx: "
36f8c     00          | 	byte	0
36f8d                 | LR__5941
36f8d     70 61 64 72 
36f91     79 3A 20    | 	byte	"padry: "
36f94     00          | 	byte	0
36f95                 | LR__5942
36f95     70 61 64 72 
36f99     7A 3A 20    | 	byte	"padrz: "
36f9c     00          | 	byte	0
36f9d                 | LR__5943
36f9d     70 61 64 78 
36fa1     3A 20       | 	byte	"padx: "
36fa3     00          | 	byte	0
36fa4                 | LR__5944
36fa4     70 61 64 79 
36fa8     3A 20       | 	byte	"pady: "
36faa     00          | 	byte	0
36fab                 | LR__5945
36fab     70 61 64 7A 
36faf     3A 20       | 	byte	"padz: "
36fb1     00          | 	byte	0
36fb2                 | LR__5946
36fb2     50 72 69 6E 
36fb6     74 20 74 6F 
36fba     20 63 68 61 
36fbe     6E 6E 65 6C 
36fc2     20 28 6E 6F 
36fc6     74 20 79 65 
36fca     74 20 69 6D 
36fce     70 6C 65 6D 
36fd2     65 6E 74 65 
36fd6     64 29       | 	byte	"Print to channel (not yet implemented)"
36fd8     00          | 	byte	0
36fd9                 | LR__5947
36fd9                 | 	byte	
36fd9     00          | 	byte	0
36fda                 | LR__5948
36fda     64 61 74 61 | 	byte	"data"
36fde     00          | 	byte	0
36fdf                 | LR__5949
36fdf                 | 	byte	
36fdf     00          | 	byte	0
36fe0                 | LR__5950
36fe0     49 6E 20 72 
36fe4     65 61 64 3A 
36fe8     20          | 	byte	"In read: "
36fe9     00          | 	byte	0
36fea                 | LR__5951
36fea                 | 	byte	
36fea     00          | 	byte	0
36feb                 | LR__5952
36feb                 | 	byte	
36feb     00          | 	byte	0
36fec                 | LR__5953
36fec     27          | 	byte	"'"
36fed     00          | 	byte	0
36fee                 | LR__5954
36fee     2C          | 	byte	","
36fef     00          | 	byte	0
36ff0                 | LR__5955
36ff0                 | 	byte	
36ff0     00          | 	byte	0
36ff1                 | LR__5956
36ff1                 | 	byte	
36ff1     00          | 	byte	0
36ff2                 | LR__5957
36ff2                 | 	byte	
36ff2     00          | 	byte	0
36ff3                 | LR__5958
36ff3                 | 	byte	
36ff3     00          | 	byte	0
36ff4                 | LR__5959
36ff4                 | 	byte	
36ff4     00          | 	byte	0
36ff5                 | LR__5960
36ff5     72 69 67 68 
36ff9     74 24 3A 20 | 	byte	"right$: "
36ffd     00          | 	byte	0
36ffe                 | LR__5961
36ffe     72 69 67 68 
37002     74 24 3A 20 | 	byte	"right$: "
37006     00          | 	byte	0
37007                 | LR__5962
37007     72 6E 64 3A 
3700b     20          | 	byte	"rnd: "
3700c     00          | 	byte	0
3700d                 | LR__5963
3700d     72 6E 64 3A 
37011     20          | 	byte	"rnd: "
37012     00          | 	byte	0
37013                 | LR__5964
37013                 | 	byte	
37013     00          | 	byte	0
37014                 | LR__5965
37014     53 74 6F 70 
37018     70 65 64 20 
3701c     61 74 20 6C 
37020     69 6E 65 20 | 	byte	"Stopped at line "
37024     00          | 	byte	0
37025                 | LR__5966
37025                 | 	byte	
37025     00          | 	byte	0
37026                 | LR__5967
37026     2F          | 	byte	"/"
37027     00          | 	byte	0
37028                 | LR__5968
37028                 | 	byte	
37028     00          | 	byte	0
37029                 | LR__5969
37029     53 61 76 65 
3702d     64 20 61 73 
37031     20          | 	byte	"Saved as "
37032     00          | 	byte	0
37033                 | LR__5970
37033     2F          | 	byte	"/"
37034     00          | 	byte	0
37035                 | LR__5971
37035     73 69 6E 3A 
37039     20          | 	byte	"sin: "
3703a     00          | 	byte	0
3703b                 | LR__5972
3703b     73 71 72 3A 
3703f     20          | 	byte	"sqr: "
37040     00          | 	byte	0
37041                 | LR__5973
37041     73 74 69 63 
37045     6B 3A 20    | 	byte	"stick: "
37048     00          | 	byte	0
37049                 | LR__5974
37049     73 74 72 69 
3704d     67 3A 20    | 	byte	"strig: "
37050     00          | 	byte	0
37051                 | LR__5975
37051     74 61 6E 3A 
37055     20          | 	byte	"tan: "
37056     00          | 	byte	0
37057                 | LR__5976
37057     76 61 6C 3A 
3705b     20          | 	byte	"val: "
3705c     00          | 	byte	0
3705d                 | LR__5977
3705d     76 61 6C 3A 
37061     20          | 	byte	"val: "
37062     00          | 	byte	0
37063                 | LR__5978
37063     24          | 	byte	"$"
37064     00          | 	byte	0
37065                 | LR__5979
37065     26 68       | 	byte	"&h"
37067     00          | 	byte	0
37068                 | LR__5980
37068     25          | 	byte	"%"
37069     00          | 	byte	0
3706a                 | LR__5981
3706a     26 62       | 	byte	"&b"
3706c     00          | 	byte	0
3706d                 | LR__5982
3706d                 | 	byte	
3706d     00          | 	byte	0
3706e                 | LR__5983
3706e     45 78 70 65 
37072     63 74 65 64 
37076     20 6E 75 6D 
3707a     62 65 72 2C 
3707e     20 67 6F 74 
37082     20 73 6F 6D 
37086     65 74 68 69 
3708a     6E 67 20 65 
3708e     6C 73 65    | 	byte	"Expected number, got something else"
37091     00          | 	byte	0
37092                 | LR__5984
37092     43 61 6E 6E 
37096     6F 74 20 61 
3709a     64 64 20 61 
3709e     20 6E 75 6D 
370a2     62 65 72 20 
370a6     74 6F 20 61 
370aa     20 73 74 72 
370ae     69 6E 67    | 	byte	"Cannot add a number to a string"
370b1     00          | 	byte	0
370b2                 | LR__5985
370b2     43 61 6E 6E 
370b6     6F 74 20 73 
370ba     75 62 73 74 
370be     72 61 63 74 
370c2     20 73 74 72 
370c6     69 6E 67 73 | 	byte	"Cannot substract strings"
370ca     00          | 	byte	0
370cb                 | LR__5986
370cb     55 6E 6B 6E 
370cf     6F 77 6E 20 
370d3     65 72 72 6F 
370d7     72 20 77 68 
370db     69 6C 65 20 
370df     61 64 64 69 
370e3     6E 67       | 	byte	"Unknown error while adding"
370e5     00          | 	byte	0
370e6                 | LR__5987
370e6     55 6E 6B 6E 
370ea     6F 77 6E 20 
370ee     65 72 72 6F 
370f2     72 20 77 68 
370f6     69 6C 65 20 
370fa     73 75 62 73 
370fe     74 72 61 63 
37102     74 69 6E 67 | 	byte	"Unknown error while substracting"
37106     00          | 	byte	0
37107                 | LR__5988
37107     43 61 6E 6E 
3710b     6F 74 20 64 
3710f     6F 20 6C 6F 
37113     67 69 63 20 
37117     6F 70 65 72 
3711b     61 74 69 6F 
3711f     6E 20 6F 6E 
37123     20 73 74 72 
37127     69 6E 67 20 
3712b     6F 72 20 66 
3712f     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
37133     00          | 	byte	0
37134                 | LR__5989
37134     55 6E 6B 6E 
37138     6F 77 6E 20 
3713c     65 72 72 6F 
37140     72 20 77 68 
37144     69 6C 65 20 
37148     64 6F 69 6E 
3714c     67 20 6C 6F 
37150     67 69 63 20 
37154     6F 70 65 72 
37158     61 74 69 6F 
3715c     6E          | 	byte	"Unknown error while doing logic operation"
3715d     00          | 	byte	0
3715e                 | LR__5990
3715e     43 61 6E 6E 
37162     6F 74 20 6D 
37166     75 6C 74 69 
3716a     70 6C 79 20 
3716e     73 74 72 69 
37172     6E 67 73    | 	byte	"Cannot multiply strings"
37175     00          | 	byte	0
37176                 | LR__5991
37176     55 6E 6B 6E 
3717a     6F 77 6E 20 
3717e     65 72 72 6F 
37182     72 20 77 68 
37186     69 6C 65 20 
3718a     6D 75 6C 74 
3718e     69 70 6C 79 
37192     69 6E 67    | 	byte	"Unknown error while multiplying"
37195     00          | 	byte	0
37196                 | LR__5992
37196     43 61 6E 6E 
3719a     6F 74 20 64 
3719e     69 76 69 64 
371a2     65 20 73 74 
371a6     72 69 6E 67 
371aa     73          | 	byte	"Cannot divide strings"
371ab     00          | 	byte	0
371ac                 | LR__5993
371ac     55 6E 6B 6E 
371b0     6F 77 6E 20 
371b4     65 72 72 6F 
371b8     72 20 77 68 
371bc     69 6C 65 20 
371c0     64 69 76 69 
371c4     64 69 6E 67 | 	byte	"Unknown error while dividing"
371c8     00          | 	byte	0
371c9                 | LR__5994
371c9     43 61 6E 6E 
371cd     6F 74 20 63 
371d1     6F 6D 70 75 
371d5     74 65 20 61 
371d9     20 70 6F 77 
371dd     65 72 20 6F 
371e1     66 20 61 20 
371e5     73 74 72 69 
371e9     6E 67       | 	byte	"Cannot compute a power of a string"
371eb     00          | 	byte	0
371ec                 | LR__5995
371ec     55 6E 6B 6E 
371f0     6F 77 6E 20 
371f4     65 72 72 6F 
371f8     72 20 77 68 
371fc     69 6C 65 20 
37200     63 6F 6D 70 
37204     75 74 69 6E 
37208     67 20 61 20 
3720c     70 6F 77 65 
37210     72          | 	byte	"Unknown error while computing a power"
37211     00          | 	byte	0
37212                 | LR__5996
37212     52 69 67 68 
37216     74 20 70 61 
3721a     72 65 6E 74 
3721e     68 65 73 69 
37222     73 20 65 78 
37226     70 65 63 74 
3722a     65 64       | 	byte	"Right parenthesis expected"
3722c     00          | 	byte	0
3722d                 | LR__5997
3722d     45 78 70 65 
37231     63 74 65 64 
37235     20 73 74 72 
37239     69 6E 67    | 	byte	"Expected string"
3723c     00          | 	byte	0
3723d                 | LR__5998
3723d     45 78 70 65 
37241     63 74 65 64 
37245     20 66 6C 6F 
37249     61 74       | 	byte	"Expected float"
3724b     00          | 	byte	0
3724c                 | LR__5999
3724c     45 78 70 65 
37250     63 74 65 64 
37254     20 75 6E 73 
37258     69 67 6E 65 
3725c     64 20 69 6E 
37260     74 65 67 65 
37264     72          | 	byte	"Expected unsigned integer"
37265     00          | 	byte	0
37266                 | LR__6000
37266     45 78 70 65 
3726a     63 74 65 64 
3726e     20 69 6E 74 
37272     65 67 65 72 | 	byte	"Expected integer"
37276     00          | 	byte	0
37277                 | LR__6001
37277     4E 6F 20 6D 
3727b     6F 72 65 20 
3727f     76 61 72 69 
37283     61 62 6C 65 
37287     20 73 6C 6F 
3728b     74 73       | 	byte	"No more variable slots"
3728d     00          | 	byte	0
3728e                 | LR__6002
3728e     56 61 72 69 
37292     61 62 6C 65 
37296     20 6E 6F 74 
3729a     20 66 6F 75 
3729e     6E 64       | 	byte	"Variable not found"
372a0     00          | 	byte	0
372a1                 | LR__6003
372a1     43 6F 6D 6D 
372a5     61 20 65 78 
372a9     70 65 63 74 
372ad     65 64       | 	byte	"Comma expected"
372af     00          | 	byte	0
372b0                 | LR__6004
372b0     43 6F 6D 6D 
372b4     61 20 6F 72 
372b8     20 73 65 6D 
372bc     69 63 6F 6C 
372c0     6F 6E 20 65 
372c4     78 70 65 63 
372c8     74 65 64    | 	byte	"Comma or semicolon expected"
372cb     00          | 	byte	0
372cc                 | LR__6005
372cc     55 6E 6B 6E 
372d0     6F 77 6E 20 
372d4     63 6F 6D 6D 
372d8     61 6E 64    | 	byte	"Unknown command"
372db     00          | 	byte	0
372dc                 | LR__6006
372dc     53 74 61 63 
372e0     6B 20 75 6E 
372e4     64 65 72 66 
372e8     6C 6F 77    | 	byte	"Stack underflow"
372eb     00          | 	byte	0
372ec                 | LR__6007
372ec     43 61 6E 6E 
372f0     6F 74 20 65 
372f4     78 65 63 75 
372f8     74 65 20 67 
372fc     6F 74 6F 20 
37300     6F 72 20 67 
37304     6F 73 75 62 
37308     20 69 6E 20 
3730c     74 68 65 20 
37310     69 6D 6D 65 
37314     64 69 61 74 
37318     65 20 6D 6F 
3731c     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
3731e     00          | 	byte	0
3731f                 | LR__6008
3731f     43 61 6E 6E 
37323     6F 74 20 6C 
37327     6F 61 64 20 
3732b     66 72 6F 6D 
3732f     20 74 68 69 
37333     73 20 66 69 
37337     6C 65       | 	byte	"Cannot load from this file"
37339     00          | 	byte	0
3733a                 | LR__6009
3733a     54 68 65 20 
3733e     70 72 6F 67 
37342     72 61 6D 20 
37346     69 73 20 65 
3734a     6D 70 74 79 | 	byte	"The program is empty"
3734e     00          | 	byte	0
3734f                 | LR__6010
3734f     49 66 20 61 
37353     66 74 65 72 
37357     20 69 66    | 	byte	"If after if"
3735a     00          | 	byte	0
3735b                 | LR__6011
3735b     45 6D 70 74 
3735f     79 20 65 78 
37363     70 72 65 73 
37367     73 69 6F 6E | 	byte	"Empty expression"
3736b     00          | 	byte	0
3736c                 | LR__6012
3736c     53 74 72 69 
37370     6E 67 20 65 
37374     78 70 65 63 
37378     74 65 64    | 	byte	"String expected"
3737b     00          | 	byte	0
3737c                 | LR__6013
3737c     49 6E 74 65 
37380     72 70 72 65 
37384     74 65 72 20 
37388     69 6E 74 65 
3738c     72 6E 61 6C 
37390     20 65 72 72 
37394     6F 72       | 	byte	"Interpreter internal error"
37396     00          | 	byte	0
37397                 | LR__6014
37397     45 78 70 65 
3739b     63 74 65 64 
3739f     20 61 73 73 
373a3     69 67 6E    | 	byte	"Expected assign"
373a6     00          | 	byte	0
373a7                 | LR__6015
373a7     45 78 70 65 
373ab     63 74 65 64 
373af     20 27 74 6F 
373b3     27          | 	byte	"Expected 'to'"
373b4     00          | 	byte	0
373b5                 | LR__6016
373b5     45 78 70 65 
373b9     63 74 65 64 
373bd     20 69 6E 74 
373c1     65 67 65 72 
373c5     20 76 61 72 
373c9     69 61 62 6C 
373cd     65          | 	byte	"Expected integer variable"
373ce     00          | 	byte	0
373cf                 | LR__6017
373cf     55 6E 69 6E 
373d3     69 74 69 61 
373d7     6C 69 7A 65 
373db     64 20 76 61 
373df     72 69 61 62 
373e3     6C 65 20 69 
373e7     6E 20 27 6E 
373eb     65 78 74 27 
373ef     2C 20 75 73 
373f3     65 20 27 66 
373f7     6F 72 27 20 
373fb     62 65 66 6F 
373ff     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
37401     00          | 	byte	0
37402                 | LR__6018
37402     4E 6F 20 6D 
37406     6F 72 65 20 
3740a     73 6C 6F 74 
3740e     73 20 66 6F 
37412     72 20 27 66 
37416     6F 72 27    | 	byte	"No more slots for 'for'"
37419     00          | 	byte	0
3741a                 | LR__6019
3741a     27 4E 65 78 
3741e     74 27 20 64 
37422     6F 65 73 6E 
37426     27 74 20 6D 
3742a     61 74 63 68 
3742e     20 27 66 6F 
37432     72 27       | 	byte	"'Next' doesn't match 'for'"
37434     00          | 	byte	0
37435                 | LR__6020
37435     27 47 6F 74 
37439     6F 27 20 74 
3743d     61 72 67 65 
37441     74 20 6C 69 
37445     6E 65 20 6E 
37449     6F 74 20 66 
3744d     6F 75 6E 64 | 	byte	"'Goto' target line not found"
37451     00          | 	byte	0
37452                 | LR__6021
37452     42 61 64 20 
37456     6E 75 6D 62 
3745a     65 72 20 6F 
3745e     66 20 70 61 
37462     72 61 6D 65 
37466     74 65 72 73 | 	byte	"Bad number of parameters"
3746a     00          | 	byte	0
3746b                 | LR__6022
3746b     46 75 6E 63 
3746f     74 69 6F 6E 
37473     20 75 6E 64 
37477     65 66 69 6E 
3747b     65 64 20 66 
3747f     6F 72 20 73 
37483     74 72 69 6E 
37487     67 73       | 	byte	"Function undefined for strings"
37489     00          | 	byte	0
3748a                 | LR__6023
3748a     42 61 64 20 
3748e     70 61 72 61 
37492     6D 65 74 65 
37496     72          | 	byte	"Bad parameter"
37497     00          | 	byte	0
37498                 | LR__6024
37498     43 61 6E 6E 
3749c     6F 74 20 64 
374a0     65 63 6C 61 
374a4     72 65 20 61 
374a8     6E 20 61 72 
374ac     72 61 79 3A 
374b0     20 74 68 65 
374b4     20 76 61 72 
374b8     69 61 62 6C 
374bc     65 20 65 78 
374c0     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
374c4     00          | 	byte	0
374c5                 | LR__6025
374c5     45 78 70 65 
374c9     63 74 65 64 
374cd     20 27 28 27 | 	byte	"Expected '('"
374d1     00          | 	byte	0
374d2                 | LR__6026
374d2     45 78 70 65 
374d6     63 74 65 64 
374da     20 27 29 27 
374de     20 6F 72 20 
374e2     27 2C 27    | 	byte	"Expected ')' or ','"
374e5     00          | 	byte	0
374e6                 | LR__6027
374e6     4E 6F 20 6D 
374ea     6F 72 65 20 
374ee     74 68 61 6E 
374f2     20 33 20 64 
374f6     69 6D 65 6E 
374fa     73 69 6F 6E 
374fe     73 20 73 75 
37502     70 70 6F 72 
37506     74 65 64    | 	byte	"No more than 3 dimensions supported"
37509     00          | 	byte	0
3750a                 | LR__6028
3750a     56 61 72 69 
3750e     61 62 6C 65 
37512     20 6E 61 6D 
37516     65 20 65 78 
3751a     70 65 63 74 
3751e     65 64       | 	byte	"Variable name expected"
37520     00          | 	byte	0
37521                 | LR__6029
37521     54 79 70 65 
37525     20 6E 61 6D 
37529     65 20 65 78 
3752d     70 65 63 74 
37531     65 64       | 	byte	"Type name expected"
37533     00          | 	byte	0
37534                 | LR__6030
37534     54 79 70 65 
37538     20 6E 6F 74 
3753c     20 73 75 70 
37540     70 6F 72 74 
37544     65 64 20 79 
37548     65 74       | 	byte	"Type not supported yet"
3754a     00          | 	byte	0
3754b                 | LR__6031
3754b     41 72 72 61 
3754f     79 20 69 6E 
37553     64 65 78 20 
37557     6F 75 74 20 
3755b     6F 66 20 72 
3755f     61 6E 67 65 | 	byte	"Array index out of range"
37563     00          | 	byte	0
37564                 | LR__6032
37564     42 61 64 20 
37568     74 79 70 65 
3756c     20 77 68 69 
37570     6C 65 20 61 
37574     73 73 69 67 
37578     6E 69 6E 67 
3757c     20 74 6F 20 
37580     61 72 72 61 
37584     79          | 	byte	"Bad type while assigning to array"
37585     00          | 	byte	0
37586                 | LR__6033
37586     54 6F 6F 20 
3758a     6D 61 6E 79 
3758e     20 76 61 72 
37592     69 61 62 6C 
37596     65 73       | 	byte	"Too many variables"
37598     00          | 	byte	0
37599                 | LR__6034
37599     27 54 68 65 
3759d     6E 27 20 65 
375a1     78 70 65 63 
375a5     74 65 64    | 	byte	"'Then' expected"
375a8     00          | 	byte	0
375a9                 | LR__6035
375a9     44 69 72 65 
375ad     63 74 6F 72 
375b1     79 20 64 6F 
375b5     65 73 6E 27 
375b9     74 20 65 78 
375bd     69 73 74    | 	byte	"Directory doesn't exist"
375c0     00          | 	byte	0
375c1                 | LR__6036
375c1     55 6E 65 78 
375c5     70 65 63 74 
375c9     65 64 20 65 
375cd     6E 64 20 6F 
375d1     66 20 6C 69 
375d5     6E 65       | 	byte	"Unexpected end of line"
375d7     00          | 	byte	0
375d8                 | LR__6037
375d8     4E 6F 20 6D 
375dc     6F 72 65 20 
375e0     64 61 74 61 | 	byte	"No more data"
375e4     00          | 	byte	0
375e5                 | LR__6038
375e5     45 72 72 6F 
375e9     72 20       | 	byte	"Error "
375eb     00          | 	byte	0
375ec                 | LR__6039
375ec     20 2D 20    | 	byte	" - "
375ef     00          | 	byte	0
375f0                 | LR__6040
375f0     20 69 6E 20 
375f4     6C 69 6E 65 
375f8     20          | 	byte	" in line "
375f9     00          | 	byte	0
375fa                 | LR__6041
375fa                 | 	byte	
375fa     00          | 	byte	0
375fb                 | LR__6042
375fb     2F 73 64    | 	byte	"/sd"
375fe     00          | 	byte	0
375ff                 | LR__6043
375ff     2F 73 64 2F 
37603     62 61 73    | 	byte	"/sd/bas"
37606     00          | 	byte	0
37607                 | LR__6044
37607     2F 73 64 2F 
3760b     62 61 73    | 	byte	"/sd/bas"
3760e     00          | 	byte	0
3760f                 | LR__6045
3760f     20 42 41 53 
37613     49 43 20 62 
37617     79 74 65 73 
3761b     20 66 72 65 
3761f     65          | 	byte	" BASIC bytes free"
37620     00          | 	byte	0
37621                 | LR__6046
37621     52 65 61 64 
37625     79          | 	byte	"Ready"
37626     00          | 	byte	0
37627                 | LR__6047
37627     6E 6F 6E 61 
3762b     6D 65 2E 62 
3762f     61 73       | 	byte	"noname.bas"
37631     00          | 	byte	0
37632                 | LR__6048
37632     2F 73 64 2F 
37636     62 61 73 2F 
3763a     61 75 74 6F 
3763e     72 75 6E 2E 
37642     62 61 73    | 	byte	"/sd/bas/autorun.bas"
37645     00          | 	byte	0
37646                 | LR__6049
37646     72 75 6E 20 
3764a     61 75 74 6F 
3764e     72 75 6E 2E 
37652     62 61 73    | 	byte	"run autorun.bas"
37655     00          | 	byte	0
37656                 | LR__6050
37656                 | 	byte	
37656     00          | 	byte	0
37657     00          | 	alignl
37658                 | _dat_
37658     00 00 00 00 
3765c     00 00 00 00 
37660     00 00 00 00 
37664     00 00 00 00 | 	byte	$00[16]
37668     61 41 17 0E 
3766c     62 42 00 00 
37670     63 43 19 10 
37674     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
37678     65 45 18 0F 
3767c     66 46 00 00 
37680     67 47 00 00 
37684     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
37688     69 49 00 00 
3768c     6A 4A 00 00 
37690     6B 4B 00 00 
37694     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
37698     6D 4D 00 00 
3769c     6E 4E 1A 11 
376a0     6F 4F 1E 15 
376a4     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
376a8     71 51 00 00 
376ac     72 52 00 00 
376b0     73 53 1B 12 
376b4     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
376b8     75 55 00 00 
376bc     76 56 00 00 
376c0     77 57 00 00 
376c4     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
376c8     79 59 00 00 
376cc     7A 5A 1D 14 
376d0     31 21 04 00 
376d4     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
376d8     33 23 06 00 
376dc     34 24 07 00 
376e0     35 25 08 00 
376e4     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
376e8     37 26 0A 00 
376ec     38 2A 0B 00 
376f0     39 28 0C 00 
376f4     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
376f8     8D 8D 00 00 
376fc     9B 9B 00 00 
37700     88 88 00 00 
37704     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
37708     20 20 00 00 
3770c     2D 5F 00 00 
37710     3D 2B 00 00 
37714     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
37718     5D 7D 00 00 
3771c     5C 7C 00 00 
37720     23 7E 00 00 
37724     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
37728     27 22 00 00 
3772c     60 7E 03 00 
37730     2C 3C 00 00 
37734     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
37738     2F 3F 00 00 
3773c     B9 B9 00 00 
37740     BA 00 00 00 
37744     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
37748     BC 00 00 00 
3774c     BD 00 00 00 
37750     BE 00 00 00 
37754     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
37758     C0 00 00 00 
3775c     C1 00 00 00 
37760     C2 00 00 00 
37764     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
37768     C4 00 00 00 
3776c     C5 00 00 00 
37770     C6 00 00 00 
37774     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
37778     C8 00 00 00 
3777c     C9 00 00 00 
37780     CA 00 00 00 
37784     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
37788     7F 7F 00 00 
3778c     CC 00 00 00 
37790     CD 00 00 00 
37794     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
37798     CF 00 00 00 
3779c     D0 00 00 00 
377a0     D1 00 00 00 
377a4     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
377a8     2F 2F 00 00 
377ac     2A 2A 00 00 
377b0     2D 2D 00 00 
377b4     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
377b8     8D 8D 00 00 
377bc     31 31 00 00 
377c0     32 32 00 00 
377c4     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
377c8     34 34 00 00 
377cc     35 35 00 00 
377d0     36 36 00 00 
377d4     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
377d8     38 38 00 00 
377dc     39 39 00 00 
377e0     30 30 00 00 
377e4     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
377e8     5C 7C 00 00 
377ec     00 00 00 00 
377f0     00 00 00 00 
377f4     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
377f8     00 00 00 00 
      ...             
37850     00 00 00 00 
37854     00 00 00 00 | 	byte	$00[96]
37858     2B 00 A6 F2 
3785c     24 A7 09 80 
37860     5B 88 4D 89 
37864     80 88 A5 88 | atari_spl file "atari.spl"
37868     6D 88 B8 88 
3786c     80 88 CB 88 
37870     92 88 A5 88 
37874     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
37878     A5 88 CA 88 
3787c     A6 88 DD 88 
37880     B8 88 AB 89 
37884     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
37888     C8 AD C6 F1 
3788c     91 06 B6 FF 
37890     13 00 4A 00 
37894     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
37898     5D 00 5E 00 
3789c     5D 00 5E 00 
378a0     5E 00 5D 00 
378a4     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
378a8     38 00 83 00 
378ac     25 00 83 00 
378b0     C3 FE D1 04 
378b4     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
378b8     48 88 38 85 
378bc     41 8A CB 88 
378c0     28 89 B8 88 
378c4     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
378c8     15 89 03 89 
378cc     02 89 15 89 
378d0     16 89 15 89 
378d4     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
378d8     15 89 3A 89 
378dc     72 89 E3 89 
378e0     52 83 AD 97 
378e4     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
378e8     0C 02 B6 FF 
378ec     E1 00 A8 00 
378f0     F3 00 A8 00 
378f4     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
378f8     CE 00 CD 00 
378fc     CD 00 BA 00 
37900     E1 00 BB 00 
37904     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
37908     DF 00 C9 FF 
3790c     E6 01 B6 06 
37910     EE DD 8D 98 
37914     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
37918     97 89 73 89 
3791c     3B 89 60 89 
37920     60 89 60 89 
37924     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
37928     73 89 72 89 
3792c     85 89 73 89 
37930     AA 89 60 89 
37934     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
37938     E8 8A 18 86 
3793c     92 88 A5 C2 
37940     E0 00 C3 05 
37944     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
37948     F2 00 64 01 
3794c     06 01 3E 01 
37950     2B 01 2B 01 
37954     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
37958     2B 01 2A 01 
3795c     2B 01 2B 01 
37960     2B 01 18 01 
37964     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
37968     39 07 61 F3 
3796c     C0 AF 37 85 
37970     0F 88 8B 8A 
37974     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
37978     AB 89 D0 89 
3797c     AB 89 D0 89 
37980     D0 89 CF 89 
37984     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
37988     D0 89 F5 89 
3798c     BD 89 08 8A 
37990     CF 89 E8 8A 
37994     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
37998     53 B3 0D F8 
3799c     F4 07 38 00 
379a0     63 01 63 01 
379a4     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
379a8     88 01 88 01 
379ac     76 01 88 01 
379b0     88 01 89 01 
379b4     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
379b8     75 01 AE 01 
379bc     76 01 88 01 
379c0     4A 00 46 06 
379c4     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
379c8     08 8A 9A 86 
379cc     33 8B 08 8A 
379d0     2D 8A F5 89 
379d4     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
379d8     2D 8A 2D 8A 
379dc     2E 8A 1B 8A 
379e0     40 8A 2D 8A 
379e4     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
379e8     2E 8A 79 8A 
379ec     66 8A C8 8B 
379f0     72 82 2B 97 
379f4     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
379f8     1D 02 05 01 
379fc     F8 01 C0 01 
37a00     0B 02 C0 01 
37a04     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
37a08     F9 01 D3 01 
37a0c     F8 01 D3 01 
37a10     F8 01 D2 01 
37a14     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
37a18     E6 01 2B 01 
37a1c     8E 02 5F 07 
37a20     F7 E2 ED 9C 
37a24     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
37a28     E8 8A 78 8A 
37a2c     78 8A 65 8A 
37a30     8B 8A 78 8A 
37a34     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
37a38     8B 8A 9D 8A 
37a3c     9D 8A 8B 8A 
37a40     C2 8A 78 8A 
37a44     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
37a48     70 8C 18 86 
37a4c     8B 8A 23 C9 
37a50     CB 03 C4 05 
37a54     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
37a58     0B 02 7B 02 
37a5c     1E 02 55 02 
37a60     30 02 43 02 
37a64     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
37a68     43 02 44 02 
37a6c     43 02 30 02 
37a70     68 02 31 02 
37a74     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
37a78     07 08 3F F7 
37a7c     73 B2 13 85 
37a80     15 89 ED 8B 
37a84     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
37a88     B0 8A FB 8A 
37a8c     D5 8A FA 8A 
37a90     E8 8A FB 8A 
37a94     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
37a98     E8 8A 21 8B 
37a9c     E7 8A 33 8B 
37aa0     E8 8A 26 8C 
37aa4     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
37aa8     8D B0 27 F6 
37aac     9C 08 AD 01 
37ab0     7B 02 8D 02 
37ab4     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
37ab8     A1 02 A0 02 
37abc     A1 02 A0 02 
37ac0     A0 02 A0 02 
37ac4     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
37ac8     7B 02 D8 02 
37acc     7B 02 C6 02 
37ad0     3E 01 C3 05 
37ad4     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
37ad8     00 8C 2A 86 
37adc     E0 8C FA 8A 
37ae0     6A 8B FB 8A 
37ae4     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
37ae8     45 8B 45 8B 
37aec     45 8B 6B 8B 
37af0     46 8B 59 8B 
37af4     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
37af8     6B 8B 6B 8B 
37afc     6B 8B 6B 8B 
37b00     7D 8B 7D 8B 
37b04     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
37b08     90 8B 91 8B 
37b0c     90 8B 90 8B 
37b10     A3 8B A3 8B 
37b14     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
37b18     B5 8B B6 8B 
37b1c     B5 8B B5 8B 
37b20     B6 8B C8 8B 
37b24     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
37b28     C8 8B DA 8B 
37b2c     DB 8B DB 8B 
37b30     DB 8B DC 8B 
37b34     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
37b38     EE 8B EE 8B 
37b3c     00 8C 01 8C 
37b40     00 8C 01 8C 
37b44     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
37b48     12 8C 13 8C 
37b4c     13 8C 26 8C 
37b50     26 8C 26 8C 
37b54     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
37b58     38 8C 38 8C 
37b5c     38 8C 38 8C 
37b60     4B 8C 4B 8C 
37b64     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
37b68     5E 8C 5E 8C 
37b6c     5E 8C 5E 8C 
37b70     70 8C 70 8C 
37b74     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
37b78     70 8C 83 8C 
37b7c     83 8C 83 8C 
37b80     83 8C 96 8C 
37b84     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
37b88     95 8C A9 8C 
37b8c     A9 8C A8 8C 
37b90     A8 8C A8 8C 
37b94     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
37b98     BB 8C BB 8C 
37b9c     BB 8C CE 8C 
37ba0     CE 8C CE 8C 
37ba4     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
37ba8     E0 8C E1 8C 
37bac     E1 8C E0 8C 
37bb0     F4 8C F2 8C 
37bb4     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
37bb8     05 8D 05 8D 
37bbc     06 8D 06 8D 
37bc0     19 8D 19 8D 
37bc4     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
37bc8     18 8D 2B 8D 
37bcc     2B 8D 2B 8D 
37bd0     2A 8D 3E 8D 
37bd4     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
37bd8     3E 8D 51 8D 
37bdc     50 8D 50 8D 
37be0     50 8D 51 8D 
37be4     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
37be8     63 8D 64 8D 
37bec     76 8D 75 8D 
37bf0     75 8D 76 8D 
37bf4     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
37bf8     88 8D 88 8D 
37bfc     89 8D 9B 8D 
37c00     9A 8D 9B 8D 
37c04     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
37c08     AD 8D AE 8D 
37c0c     AD 8D AE 8D 
37c10     C1 8D C1 8D 
37c14     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
37c18     D3 8D D3 8D 
37c1c     D3 8D D3 8D 
37c20     D3 8D E6 8D 
37c24     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
37c28     E6 8D E6 8D 
37c2c     F9 8D F9 8D 
37c30     F9 8D F8 8D 
37c34     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
37c38     0B 8E 0B 8E 
37c3c     1D 8E 1D 8E 
37c40     1E 8E 1E 8E 
37c44     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
37c48     31 8E 31 8E 
37c4c     31 8E 42 8E 
37c50     43 8E 43 8E 
37c54     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
37c58     56 8E 56 8E 
37c5c     55 8E 56 8E 
37c60     68 8E 69 8E 
37c64     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
37c68     69 8E 7B 8E 
37c6c     7C 8E 7B 8E 
37c70     7B 8E 8D 8E 
37c74     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
37c78     8D 8E A1 8E 
37c7c     A0 8E A1 8E 
37c80     A1 8E A0 8E 
37c84     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
37c88     B3 8E B3 8E 
37c8c     C6 8E C5 8E 
37c90     C6 8E C6 8E 
37c94     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
37c98     D8 8E D9 8E 
37c9c     D8 8E EC 8E 
37ca0     EB 8E EC 8E 
37ca4     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
37ca8     FE 8E FE 8E 
37cac     FE 8E FE 8E 
37cb0     10 8F 10 8F 
37cb4     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
37cb8     11 8F 23 8F 
37cbc     24 8F 23 8F 
37cc0     24 8F 37 8F 
37cc4     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
37cc8     36 8F 36 8F 
37ccc     48 8F 49 8F 
37cd0     49 8F 49 8F 
37cd4     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
37cd8     5B 8F 5C 8F 
37cdc     5B 8F 6E 8F 
37ce0     6E 8F 6E 8F 
37ce4     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
37ce8     81 8F 81 8F 
37cec     81 8F 81 8F 
37cf0     93 8F 93 8F 
37cf4     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
37cf8     93 8F A6 8F 
37cfc     A6 8F A6 8F 
37d00     A6 8F B9 8F 
37d04     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
37d08     B9 8F B9 8F 
37d0c     CC 8F CB 8F 
37d10     CB 8F CC 8F 
37d14     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
37d18     DF 8F DE 8F 
37d1c     DE 8F F1 8F 
37d20     F1 8F F1 8F 
37d24     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
37d28     03 90 04 90 
37d2c     04 90 04 90 
37d30     16 90 17 90 
37d34     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
37d38     29 90 28 90 
37d3c     29 90 28 90 
37d40     29 90 3C 90 
37d44     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
37d48     3C 90 4F 90 
37d4c     4E 90 4E 90 
37d50     4E 90 4E 90 
37d54     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
37d58     61 90 61 90 
37d5c     73 90 74 90 
37d60     74 90 74 90 
37d64     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
37d68     87 90 86 90 
37d6c     87 90 86 90 
37d70     99 90 99 90 
37d74     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
37d78     AB 90 AB 90 
37d7c     AC 90 AB 90 
37d80     AB 90 BF 90 
37d84     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
37d88     BE 90 D1 90 
37d8c     D0 90 D1 90 
37d90     D1 90 D1 90 
37d94     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
37d98     E3 90 E4 90 
37d9c     F6 90 F6 90 
37da0     F6 90 F6 90 
37da4     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
37da8     09 91 0A 91 
37dac     0A 91 1C 91 
37db0     1C 91 1C 91 
37db4     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
37db8     2F 91 2E 91 
37dbc     2F 91 2F 91 
37dc0     2E 91 41 91 
37dc4     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
37dc8     41 91 53 91 
37dcc     54 91 54 91 
37dd0     53 91 54 91 
37dd4     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
37dd8     67 91 67 91 
37ddc     79 91 7A 91 
37de0     79 91 78 91 
37de4     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
37de8     8C 91 8B 91 
37dec     8C 91 8C 91 
37df0     9E 91 9E 91 
37df4     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
37df8     B1 91 B1 91 
37dfc     B2 91 B1 91 
37e00     B1 91 C4 91 
37e04     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
37e08     C4 91 D6 91 
37e0c     D7 91 D7 91 
37e10     D7 91 D6 91 
37e14     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
37e18     EA 91 EA 91 
37e1c     EA 91 FC 91 
37e20     FC 91 FB 91 
37e24     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
37e28     0E 92 0F 92 
37e2c     0F 92 0E 92 
37e30     21 92 21 92 
37e34     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
37e38     21 92 34 92 
37e3c     33 92 34 92 
37e40     34 92 47 92 
37e44     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
37e48     46 92 47 92 
37e4c     59 92 59 92 
37e50     59 92 59 92 
37e54     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
37e58     6C 92 6C 92 
37e5c     6B 92 7E 92 
37e60     7E 92 7E 92 
37e64     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
37e68     92 92 91 92 
37e6c     91 92 90 92 
37e70     91 92 A4 92 
37e74     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
37e78     A3 92 B6 92 
37e7c     B6 92 B7 92 
37e80     B7 92 B6 92 
37e84     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
37e88     CA 92 C9 92 
37e8c     CA 92 DC 92 
37e90     DC 92 DC 92 
37e94     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
37e98     EF 92 EF 92 
37e9c     EF 92 EF 92 
37ea0     01 93 01 93 
37ea4     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
37ea8     15 93 14 93 
37eac     14 93 14 93 
37eb0     14 93 27 93 
37eb4     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
37eb8     27 93 39 93 
37ebc     3A 93 39 93 
37ec0     39 93 39 93 
37ec4     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
37ec8     4B 93 4C 93 
37ecc     5F 93 5F 93 
37ed0     5F 93 5E 93 
37ed4     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
37ed8     5F 93 84 93 
37edc     4C 93 96 93 
37ee0     5F 93 AE 94 
37ee4     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
37ee8     7B C1 00 00 
37eec     00 00 00 00 
37ef0     00 00 00 00 
37ef4     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37ef8     00 00 00 00 | 	byte	$00, $00, $00, $00
37efc     7A D7 00 80 
37f00     87 8A 48 8F 
37f04     EC 8C 76 8D 
37f08     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
37f0c     3C 8D 82 8D 
37f10     42 8D 88 8D 
37f14     8C 8D 8E 8D 
37f18     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
37f1c     97 8D DE 8D 
37f20     E1 8D F1 8E 
37f24     D8 8C A3 83 
37f28     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
37f2c     65 71 C9 65 
37f30     FC 64 C4 65 
37f34     C1 65 BF 65 
37f38     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
37f3c     B6 65 B4 65 
37f40     B2 65 AE 65 
37f44     AC 65 ED 65 
37f48     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
37f4c     5E 65 25 66 
37f50     FA 62 23 6B 
37f54     B5 6C 61 0A 
37f58     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
37f5c     5D 90 BE 8D 
37f60     47 8E C3 8D 
37f64     09 8E C9 8D 
37f68     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
37f6c     15 8E 19 8E 
37f70     1B 8E 62 8E 
37f74     64 8E 68 8E 
37f78     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
37f7c     B5 8E 4C 90 
37f80     FA 84 3C 9D 
37f84     98 13 79 6D 
37f88     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
37f8c     D9 66 50 66 
37f90     D4 66 4B 66 
37f94     8C 66 46 66 
37f98     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
37f9c     81 66 3A 66 
37fa0     7C 66 36 66 
37fa4     76 66 30 66 
37fa8     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
37fac     6B 66 88 72 
37fb0     BF 37 E7 B7 
37fb4     75 83 8B 8E 
37fb8     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
37fbc     94 8E 96 8E 
37fc0     DD 8E 9C 8E 
37fc4     E2 8E A2 8E 
37fc8     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
37fcc     EE 8E AE 8E 
37fd0     38 8F B5 8E 
37fd4     3F 8F FD 8E 
37fd8     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
37fdc     A5 87 1E E3 
37fe0     6D 5D FA 71 
37fe4     41 64 25 67 
37fe8     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
37fec     D9 66 1A 67 
37ff0     18 67 15 67 
37ff4     12 67 0F 67 
37ff8     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
37ffc     07 67 C0 66 
38000     01 67 BC 66 
38004     B8 66 DE 64 
38008     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
3800c     43 E5 1F 8B 
38010     14 8A F1 90 
38014     1C 8F 63 8F 
38018     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
3801c     29 8F 6E 8F 
38020     72 8F 75 8F 
38024     34 8F BE 8F 
38028     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
3802c     84 8F 87 8F 
38030     CC 8F 56 90 
38034     67 91 49 80 
38038     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
3803c     46 77 A6 66 
38040     E8 66 B0 67 
38044     AD 67 ED 67 
38048     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
3804c     A2 67 E3 67 
38050     9D 67 9A 67 
38054     98 67 94 67 
38058     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
3805c     49 67 CD 67 
38060     28 65 5F 6E 
38064     82 67 3A 01 
38068     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
3806c     C2 91 A9 8F 
38070     EF 8F AE 8F 
38074     F4 8F B5 8F 
38078     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
3807c     01 90 03 90 
38080     07 90 09 90 
38084     0C 90 53 90 
38088     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
3808c     18 90 44 93 
38090     85 84 D6 9D 
38094     87 1F 2F 75 
38098     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
3809c     C4 68 F6 67 
380a0     BE 68 F1 67 
380a4     76 68 2E 68 
380a8     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
380ac     27 68 24 68 
380b0     64 68 1E 68 
380b4     5F 68 19 68 
380b8     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
380bc     DC 68 56 72 
380c0     7E 36 C2 B8 
380c4     D7 84 73 90 
380c8     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
380cc     7B 90 7F 90 
380d0     82 90 84 90 
380d4     CB 90 8B 90 
380d8     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
380dc     D7 90 96 90 
380e0     20 91 59 90 
380e4     25 91 A2 90 
380e8     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
380ec     D0 89 40 EE 
380f0     12 64 C4 71 
380f4     29 66 0C 69 
380f8     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
380fc     C0 68 02 69 
38100     FE 68 FB 68 
38104     F9 68 F6 68 
38108     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
3810c     EE 68 A8 68 
38110     2C 69 5F 68 
38114     E2 68 81 66 
38118     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
3811c     1E EB A6 8A 
38120     73 8B 5E 93 
38124     7B 90 48 91 
38128     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
3812c     0D 91 11 91 
38130     14 91 16 91 
38134     5C 91 1C 91 
38138     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
3813c     68 91 AF 91 
38140     2A 91 B5 91 
38144     75 91 1A 94 
38148     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
3814c     70 0E CB 6C 
38150     5D 6E C4 67 
38154     99 69 54 69 
38158     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
3815c     D2 69 49 69 
38160     89 69 86 69 
38164     40 69 C4 69 
38168     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
3816c     35 69 76 69 
38170     58 67 EB 6D 
38174     E9 6D 89 0F 
38178     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
3817c     33 94 94 91 
38180     D9 91 56 91 
38184     E0 91 9F 91 
38188     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
3818c     EC 91 EE 91 
38190     F1 91 F4 91 
38194     F7 91 3D 92 
38198     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
3819c     46 92 21 94 
381a0     11 89 A4 9D 
381a4     FD 0E 8F 6C 
381a8     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
381ac     28 6A E1 69 
381b0     65 6A 1F 6A 
381b4     5F 6A 1A 6A 
381b8     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
381bc     54 6A 0F 6A 
381c0     4F 6A 09 6A 
381c4     06 6A 03 6A 
381c8     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
381cc     23 68 69 77 
381d0     3A 4D 38 CA 
381d4     38 86 4E 91 
381d8     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
381dc     64 92 24 92 
381e0     6A 92 2A 92 
381e4     70 92 30 92 
381e8     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
381ec     7B 92 7E 92 
381f0     C5 92 84 92 
381f4     CB 92 8A 92 
381f8     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
381fc     4D 8D F9 E2 
38200     97 59 FE 74 
38204     DB 68 6D 6A 
38208     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
3820c     A8 6A A5 6A 
38210     A3 6A 9F 6A 
38214     9D 6A 9B 6A 
38218     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
3821c     D6 6A 8F 6A 
38220     CF 6A 46 6A 
38224     CA 6A E1 67 
38228     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
3822c     D3 F7 15 92 
38230     90 8C BF 94 
38234     A6 92 EB 92 
38238     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
3823c     B1 92 F7 92 
38240     FA 92 FD 92 
38244     00 93 02 93 
38248     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
3824c     4F 93 52 93 
38250     54 93 22 94 
38254     5A 93 8F 88 
38258     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
3825c     1C 77 07 6C 
38260     E8 69 7A 6B 
38264     34 6B 75 6B 
38268     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
3826c     29 6B 26 6B 
38270     24 6B 21 6B 
38274     1D 6B 5E 6B 
38278     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
3827c     12 6B 52 6B 
38280     34 69 34 6E 
38284     BA 73 A4 24 
38288     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
3828c     7A 94 B3 93 
38290     72 93 31 93 
38294     78 93 7A 93 
38298     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
3829c     83 93 86 93 
382a0     89 93 D0 93 
382a4     D2 93 D5 93 
382a8     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
382ac     DD 93 40 96 
382b0     30 8B 99 9C 
382b4     52 10 94 71 
382b8     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
382bc     46 6C 79 6B 
382c0     40 6C B7 6B 
382c4     F7 6B B1 6B 
382c8     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
382cc     EC 6B A5 6B 
382d0     A2 6B 9F 6B 
382d4     9D 6B 9A 6B 
382d8     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
382dc     C8 6A E4 76 
382e0     20 4B F9 CE 
382e4     2E 8A 1A 92 
382e8     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
382ec     FB 93 BA 93 
382f0     01 94 03 94 
382f4     4A 94 09 94 
382f8     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
382fc     55 94 14 94 
38300     9E 94 1A 94 
38304     61 94 20 94 
38308     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
3830c     3E 87 E5 CD 
38310     5F 50 6C 78 
38314     B5 6A 04 6C 
38318     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
3831c     83 6C 7F 6C 
38320     7C 6C 36 6C 
38324     76 6C 74 6C 
38328     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
3832c     6B 6C 25 6C 
38330     66 6C 1F 6C 
38334     1D 6C 41 6A 
38338     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
3833c     BA FA FC 94 
38340     5B 8D 97 96 
38344     3B 94 C5 94 
38348     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
3834c     89 94 8C 94 
38350     8F 94 92 94 
38354     94 94 DB 94 
38358     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
3835c     E4 94 E7 94 
38360     2D 95 74 95 
38364     C8 96 15 89 
38368     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
3836c     CB 75 31 6F 
38370     7E 6B 10 6D 
38374     C9 6C 0A 6D 
38378     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
3837c     BD 6C FF 6C 
38380     FB 6C F9 6C 
38384     B2 6C F3 6C 
38388     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
3838c     A7 6C E8 6C 
38390     0D 6B 85 6F 
38394     C7 74 10 28 
38398     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
3839c     96 96 47 95 
383a0     06 95 0A 95 
383a4     0C 95 0F 95 
383a8     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
383ac     17 95 5E 95 
383b0     61 95 63 95 
383b4     22 95 AC 95 
383b8     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
383bc     72 95 17 98 
383c0     59 8E 01 96 
383c4     CF FC 5A 68 
383c8     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
383cc     96 6D 50 6D 
383d0     D5 6D 4A 6D 
383d4     8C 6D 89 6D 
383d8     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
383dc     80 6D 3A 6D 
383e0     7A 6D 77 6D 
383e4     75 6D 71 6D 
383e8     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
383ec     18 6C BC 78 
383f0     9A 4F 7E CF 
383f4     1F 89 F1 93 
383f8     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
383fc     D2 95 4E 95 
38400     D7 95 53 95 
38404     DD 95 E0 95 
38408     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
3840c     A5 95 EB 95 
38410     EE 95 F0 95 
38414     37 96 B3 95 
38418     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
3841c     1A 98 D5 8D 
38420     C5 9F CD 0F 
38424     0F 71 F3 73 
38428     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
3842c     D9 6D 5E 6E 
38430     D3 6D 58 6E 
38434     12 6E 0F 6E 
38438     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
3843c     49 6E BF 6D 
38440     87 6E 76 6D 
38444     81 6E 11 6B 
38448     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
3844c     3F 09 44 95 
38450     E5 8D 3F 99 
38454     D4 95 A2 96 
38458     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
3845c     23 96 69 96 
38460     6B 96 6E 96 
38464     71 96 74 96 
38468     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
3846c     BF 96 3C 96 
38470     C6 96 C8 96 
38474     A3 98 51 8D 
38478     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
3847c     CF 75 29 73 
38480     90 6C EC 6E 
38484     62 6E E7 6E 
38488     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
3848c     9A 6E 98 6E 
38490     95 6E 91 6E 
38494     8E 6E CF 6E 
38498     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
3849c     40 6E C3 6E 
384a0     E8 6C 45 6F 
384a4     A5 7B C9 35 
384a8     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
384ac     2D 98 23 97 
384b0     E1 96 A0 96 
384b4     A4 96 EA 96 
384b8     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
384bc     AF 96 F4 96 
384c0     F8 96 3E 97 
384c4     FD 96 43 97 
384c8     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
384cc     08 97 6B 99 
384d0     D6 92 88 91 
384d4     D8 EE 84 66 
384d8     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
384dc     2E 6F E7 6E 
384e0     6C 6F 24 6F 
384e4     21 6F 1F 6F 
384e8     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
384ec     17 6F 13 6F 
384f0     54 6F 0E 6F 
384f4     0B 6F 4B 6F 
384f8     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
384fc     27 6D 1C 7B 
38500     19 59 9F DB 
38504     66 8E BC 94 
38508     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
3850c     67 97 26 97 
38510     6D 97 2B 97 
38514     72 97 32 97 
38518     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
3851c     C1 97 7F 97 
38520     C6 97 85 97 
38524     CB 97 CE 97 
38528     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
3852c     EC 8A C4 C6 
38530     68 4C F4 7D 
38534     63 6E E8 6E 
38538     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
3853c     ED 6F A7 6F 
38540     E7 6F A0 6F 
38544     E1 6F 9B 6F 
38548     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
3854c     D5 6F 8F 6F 
38550     CE 6F 45 6F 
38554     86 6F 68 6D 
38558     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
3855c     C0 13 AD A2 
38560     A7 8E 79 99 
38564     E6 97 E8 97 
38568     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
3856c     F1 97 F3 97 
38570     F6 97 F9 97 
38574     FB 97 FE 97 
38578     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
3857c     4A 98 0A 98 
38580     93 98 0F 98 
38584     7F 9B BF 8C 
38588     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
3858c     91 7B 62 73 
38590     1A 6E B9 70 
38594     EB 6F B3 70 
38598     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
3859c     25 70 20 70 
385a0     1E 70 1B 70 
385a4     18 70 15 70 
385a8     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
385ac     0D 70 09 70 
385b0     07 70 03 70 
385b4     01 70 FD 6F 
385b8     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
385bc     F6 6F F2 6F 
385c0     EF 6F EC 6F 
385c4     2C 70 E6 6F 
385c8     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
385cc     DD 6F 97 6F 
385d0     D7 6F 84 6E 
385d4     8F 6F 3F 7D 
385d8     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
385da     FF FF FF FF 
385de     FF FF       | atarist_spl file "atarist.spl" '512
385e0     00 00 00 00 
385e4     00 00 00 00 
385e8     00 00       | 	byte	$00[10]
385ea     17 7F F2 7F 
385ee     B2 7F 72 7F 
385f2     33 7F F4 7E 
385f6     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
385fa     36 7E F5 7D 
385fe     E9 51 F2 0D 
38602     8E 00 F3 FD 
38606     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
3860a     57 FD 58 FD 
3860e     5B FD 5C FD 
38612     5C FD 60 7D 
38616     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
3861a     D6 7C 98 7C 
3861e     59 7C 1A 7C 
38622     DC 7B 9E 7B 
38626     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
3862a     F3 05 00 FD 
3862e     41 FB EA FA 
38632     D9 FA DB FA 
38636     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
3863a     E4 FA 9B 36 
3863e     F8 7A C0 7A 
38642     84 7A 45 7A 
38646     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
3864a     8E 79 51 79 
3864e     15 79 D7 78 
38652     3C 1F EB FF 
38656     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
3865a     6D F8 65 F8 
3865e     68 F8 6D F8 
38662     70 F8 74 F8 
38666     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
3866a     AB 60 79 60 
3866e     4B 60 1A 60 
38672     E9 5F B9 5F 
38676     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
3867a     FB 59 B2 0B 
3867e     92 FA 3A F7 
38682     96 F6 79 F6 
38686     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
3868a     82 F6 86 F6 
3868e     8C F6 DB 5D 
38692     F1 5E C1 5E 
38696     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
3869a     34 5E 04 5E 
3869e     D6 5D A6 5D 
386a2     78 5D D4 3E 
386a6     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
386aa     27 F5 BA F4 
386ae     AB F4 AD F4 
386b2     B2 F4 B8 F4 
386b6     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
386ba     26 5D 2B 5D 
386be     FC 5C CD 5C 
386c2     9F 5C 70 5C 
386c6     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
386ca     E5 5B B8 5B 
386ce     DB 24 A7 FC 
386d2     D1 F4 4D F3 
386d6     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
386da     04 F3 0B F3 
386de     11 F3 16 F3 
386e2     DE 18 98 5B 
386e6     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
386ea     4E 4A 29 48 
386ee     A0 47 6A 47 
386f2     43 47 20 47 
386f6     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
386fa     E2 F6 98 F2 
386fe     C5 F1 A3 F1 
38702     A3 F1 A8 F1 
38706     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
3870a     BF F1 00 3D 
3870e     EF 46 CD 46 
38712     AA 46 86 46 
38716     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
3871a     1C 46 F9 45 
3871e     D7 45 EE 43 
38722     DE 02 E8 F3 
38726     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
3872a     61 F0 65 F0 
3872e     6D F0 74 F0 
38732     7C F0 84 F0 
38736     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
3873a     8E 45 6D 45 
3873e     49 45 27 45 
38742     05 45 E1 44 
38746     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
3874a     F1 2F A9 FB 
3874e     8B F1 9B EF 
38752     40 EF 36 EF 
38756     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
3875a     4D EF 56 EF 
3875e     5E EF 7B 44 
38762     8C 44 69 44 
38766     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
3876a     03 44 E1 43 
3876e     C0 43 F5 37 
38772     69 33 0F 11 
38776     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
3877a     66 EE 37 EE 
3877e     38 EE 40 EE 
38782     48 EE 51 EE 
38786     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
3878a     7D 32 6A 32 
3878e     51 32 37 32 
38792     1F 32 05 32 
38796     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
3879a     B9 31 A1 31 
3879e     F1 04 F4 F1 
387a2     50 EE A0 ED 
387a6     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
387aa     93 ED 9A ED 
387ae     A4 ED AD ED 
387b2     F4 27 C1 31 
387b6     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
387ba     78 31 5F 31 
387be     46 31 2E 31 
387c2     15 31 FC 30 
387c6     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
387ca     C4 EF 4A ED 
387ce     DC EC CB EC 
387d2     D2 EC DA EC 
387d6     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
387da     F9 EC 64 2F 
387de     0A 31 F1 30 
387e2     D9 30 C0 30 
387e6     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
387ea     78 30 5F 30 
387ee     46 30 38 23 
387f2     A6 F6 19 EE 
387f6     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
387fa     20 EC 28 EC 
387fe     32 EC 3C EC 
38802     47 EC 51 EC 
38806     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
3880a     A3 22 93 22 
3880e     7F 22 6E 22 
38812     5D 22 4C 22 
38816     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
3881a     77 09 76 F1 
3881e     CC EC F0 EB 
38822     CD EB CE EB 
38826     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
3882a     ED EB F5 EB 
3882e     3E F6 6B 22 
38832     5F 22 4E 22 
38836     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
3883a     1B 22 0B 22 
3883e     FA 21 E9 21 
38842     D8 21 4D FF 
38846     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
3884a     92 EB 7B EB 
3884e     82 EB 8C EB 
38852     97 EB A1 EB 
38856     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
3885a     15 22 04 22 
3885e     F3 21 E3 21 
38862     D2 21 C0 21 
38866     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
3886a     8E 21 7D 21 
3886e     9A F8 A4 ED 
38872     8E EB 2F EB 
38876     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
3887a     37 EB 42 EB 
3887e     4C EB 57 EB 
38882     B2 17 22 19 
38886     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
3888a     FD 18 EF 18 
3888e     E3 18 D6 18 
38892     CA 18 BD 18 
38896     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
3889a     60 EC 35 EB 
3889e     01 EB 01 EB 
388a2     0C EB 16 EB 
388a6     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
388aa     34 EB D0 18 
388ae     00 19 F4 18 
388b2     E8 18 DA 18 
388b6     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
388ba     B6 18 A9 18 
388be     9D 18 91 05 
388c2     F0 EF CA EB 
388c6     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
388ca     E8 EA F2 EA 
388ce     FE EA 07 EB 
388d2     12 EB C2 EF 
388d6     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
388da     D9 18 CD 18 
388de     C0 18 B3 18 
388e2     A7 18 9B 18 
388e6     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
388ea     B8 FC 30 EE 
388ee     61 EB DC EA 
388f2     CD EA D2 EA 
388f6     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
388fa     F3 EA FE EA 
388fe     D2 09 D1 18 
38902     C3 18 17 18 
38906     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
3890a     66 11 52 11 
3890e     49 11 41 11 
38912     38 11 E0 F4 
38916     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
3891a     C9 EA C5 EA 
3891e     CF EA DB EA 
38922     E6 EA EF EA 
38926     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
3892a     89 11 80 11 
3892e     78 11 6E 11 
38932     67 11 5D 11 
38936     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
3893a     43 11 32 0D 
3893e     9C F1 07 EC 
38942     F8 EA CD EA 
38946     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
3894a     E4 EA ED EA 
3894e     F8 EA 02 EB 
38952     55 11 91 11 
38956     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
3895a     75 11 6E 11 
3895e     64 11 5E 11 
38962     54 11 4A 11 
38966     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
3896a     A8 EB F1 EA 
3896e     D9 EA DC EA 
38972     E8 EA F1 EA 
38976     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
3897a     A6 EB 9E 11 
3897e     A0 11 96 11 
38982     8D 11 85 11 
38986     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
3898a     6A 11 CA 0D 
3898e     36 0B 57 F8 
38992     6C ED 57 EB 
38996     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
3899a     F4 EA FF EA 
3899e     09 EB 15 EB 
389a2     1E EB 1A FD 
389a6     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
389aa     ED 0A E8 0A 
389ae     E2 0A DC 0A 
389b2     D6 0A D1 0A 
389b6     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
389ba     F8 F3 BC EC 
389be     57 EB 1E EB 
389c2     18 EB 24 EB 
389c6     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
389ca     42 EB 4D EB 
389ce     08 09 20 0B 
389d2     1A 0B 14 0B 
389d6     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
389da     04 0B FE 0A 
389de     F9 0A F2 0A 
389e2     84 08 3A F1 
389e6     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
389ea     42 EB 42 EB 
389ee     4E EB 57 EB 
389f2     62 EB 6B EB 
389f6     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
389fa     48 0B 43 0B 
389fe     3C 0B 36 0B 
38a02     31 0B 2C 0B 
38a06     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
38a0a     1B 0B 5C 00 
38a0e     6A EF 1B EC 
38a12     81 EB 6A EB 
38a16     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
38a1a     85 EB 8E EB 
38a1e     99 EB A3 EB 
38a22     DD 05 E5 05 
38a26     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
38a2a     DB 05 D8 05 
38a2e     D5 05 D1 05 
38a32     D0 05 CB 05 
38a36     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
38a3a     0C EC BB EB 
38a3e     B3 EB BB EB 
38a42     C5 EB D0 EB 
38a46     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
38a4a     E4 F7 2C 06 
38a4e     28 06 24 06 
38a52     22 06 1F 06 
38a56     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
38a5a     16 06 14 06 
38a5e     0F 06 D0 F3 
38a62     65 ED 2D EC 
38a66     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
38a6a     01 EC 0A EC 
38a6e     14 EC 1E EC 
38a72     29 EC FB 03 
38a76     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
38a7a     63 06 60 06 
38a7e     5E 06 59 06 
38a82     58 06 54 06 
38a86     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
38a8a     69 F1 21 ED 
38a8e     55 EC 33 EC 
38a92     36 EC 40 EC 
38a96     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
38a9a     5C EC 68 EC 
38a9e     92 02 D9 02 
38aa2     D7 02 D7 02 
38aa6     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
38aaa     D1 02 D1 02 
38aae     CE 02 CD 02 
38ab2     5D FC 80 EF 
38ab6     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
38aba     83 EC 8A EC 
38abe     93 EC 9C EC 
38ac2     A5 EC B1 EC 
38ac6     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
38aca     2B 03 2A 03 
38ace     29 03 26 03 
38ad2     25 03 24 03 
38ad6     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
38ada     1F 03 70 F7 
38ade     D0 EE 27 ED 
38ae2     DB EC D4 EC 
38ae6     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
38aea     F0 EC FA EC 
38aee     02 ED F9 F4 
38af2     7B 03 7C 03 
38af6     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
38afa     75 03 73 03 
38afe     72 03 70 03 
38b02     6D 03 6C 03 
38b06     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
38b0a     54 ED 22 ED 
38b0e     22 ED 2C ED 
38b12     35 ED 3F ED 
38b16     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
38b1a     14 01 C3 03 
38b1e     C1 03 C0 03 
38b22     5F 01 A5 00 
38b26     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
38b2a     7B 00 7C 00 
38b2e     20 00 85 F1 
38b32     2A EE 89 ED 
38b36     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
38b3a     80 ED 87 ED 
38b3e     90 ED 9A ED 
38b42     A3 ED 73 00 
38b46     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
38b4a     D0 00 D0 00 
38b4e     D0 00 D0 00 
38b52     D0 00 CF 00 
38b56     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
38b5a     80 F0 3D EE 
38b5e     D5 ED C7 ED 
38b62     CD ED D6 ED 
38b66     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
38b6a     F2 ED FA ED 
38b6e     1D 01 29 01 
38b72     27 01 27 01 
38b76     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
38b7a     25 01 26 01 
38b7e     26 01 23 01 
38b82     D0 F7 EC EF 
38b86     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
38b8a     1C EE 24 EE 
38b8e     2D EE 37 EE 
38b92     40 EE 47 EE 
38b96     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
38b9a     7D 01 7B 01 
38b9e     7A 01 7A 01 
38ba2     79 01 78 01 
38ba6     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
38baa     84 FE DE F3 
38bae     6C EF 93 EE 
38bb2     72 EE 72 EE 
38bb6     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
38bba     8B EE 95 EE 
38bbe     9E EE 15 FC 
38bc2     67 FE 67 FE 
38bc6     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
38bca     6B FE 6B FE 
38bce     6D FE 6D FE 
38bd2     6D FE 6F FE 
38bd6     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
38bda     DF EE CC EE 
38bde     CF EE D9 EE 
38be2     E1 EE EA EE 
38be6     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
38bea     5A FE C4 FE 
38bee     C3 FE C5 FE 
38bf2     C6 FE C6 FE 
38bf6     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
38bfa     C8 FE C7 FE 
38bfe     DA FB 85 F1 
38c02     8D EF 31 EF 
38c06     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
38c0a     34 EF 3E EF 
38c0e     46 EF 4F EF 
38c12     57 EF 0D FF 
38c16     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
38c1a     1F FF 1F FF 
38c1e     21 FF 21 FF 
38c22     21 FF 21 FF 
38c26     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
38c2a     15 F1 BE EF 
38c2e     84 EF 7E EF 
38c32     88 EF 8F EF 
38c36     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
38c3a     A9 EF 06 F2 
38c3e     A6 FC AB FC 
38c42     AD FC AE FC 
38c46     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
38c4a     B2 FC B4 FC 
38c4e     B6 FC B7 FC 
38c52     8B F4 BD F0 
38c56     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
38c5a     E4 EF EE EF 
38c5e     F6 EF FD EF 
38c62     04 F0 0E F0 
38c66     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
38c6a     0B FD 0D FD 
38c6e     0F FD 11 FD 
38c72     11 FD 13 FD 
38c76     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
38c7a     17 FD 64 F3 
38c7e     CD F0 52 F0 
38c82     41 F0 45 F0 
38c86     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
38c8a     5B F0 64 F0 
38c8e     6D F0 FB FC 
38c92     65 FD 68 FD 
38c96     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
38c9a     6C FD 6D FD 
38c9e     6F FD 70 FD 
38ca2     72 FD B3 FB 
38ca6     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
38caa     A4 F0 99 F0 
38cae     A0 F0 A8 F0 
38cb2     AE F0 B9 F0 
38cb6     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
38cba     CB FB DD FB 
38cbe     DE FB E0 FB 
38cc2     E3 FB E3 FB 
38cc6     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
38cca     E9 FB EC FB 
38cce     62 F7 27 F2 
38cd2     2A F1 FF F0 
38cd6     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
38cda     0C F1 13 F1 
38cde     1B F1 23 F1 
38ce2     33 F2 3C FC 
38ce6     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
38cea     42 FC 45 FC 
38cee     47 FC 48 FC 
38cf2     4A FC 4C FC 
38cf6     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
38cfa     20 F2 77 F1 
38cfe     5C F1 5F F1 
38d02     64 F1 6C F1 
38d06     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
38d0a     83 F1 DC F8 
38d0e     9A FC 9A FC 
38d12     9B FC 9E FC 
38d16     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
38d1a     A3 FC A4 FC 
38d1e     A6 FC A9 FC 
38d22     90 F4 33 F2 
38d26     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
38d2a     BA F1 BF F1 
38d2e     C7 F1 CE F1 
38d32     D6 F1 DC F1 
38d36     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
38d3a     F3 FC F5 FC 
38d3e     FE FB 79 FB 
38d42     62 FB 5F FB 
38d46     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
38d4a     6F FA AF F3 
38d4e     53 F2 12 F2 
38d52     0F F2 15 F2 
38d56     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
38d5a     2A F2 32 F2 
38d5e     38 F2 9A FB 
38d62     AF FB B1 FB 
38d66     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
38d6a     B7 FB B8 FB 
38d6e     BA FB BC FB 
38d72     C1 FB 3B F8 
38d76     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
38d7a     6E F2 6C F2 
38d7e     74 F2 7A F2 
38d82     81 F2 87 F2 
38d86     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
38d8a     06 FC 09 FC 
38d8e     0C FC 0E FC 
38d92     0F FC 12 FC 
38d96     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
38d9a     17 FC 1A FC 
38d9e     B2 F6 7B F3 
38da2     DD F2 C5 F2 
38da6     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
38daa     D4 F2 DB F2 
38dae     E0 F2 E8 F2 
38db2     28 F8 60 FC 
38db6     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
38dba     64 FC 66 FC 
38dbe     68 FC 6A FC 
38dc2     6D FC 52 FC 
38dc6     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
38dca     78 F3 24 F3 
38dce     1A F3 1E F3 
38dd2     24 F3 2A F3 
38dd6     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
38dda     3D F3 80 FA 
38dde     0C FB 0F FB 
38de2     10 FB 14 FB 
38de6     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
38dea     1B FB 1D FB 
38dee     1F FB 92 FA 
38df2     DE F4 AE F3 
38df6     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
38dfa     79 F3 7E F3 
38dfe     84 F3 8C F3 
38e02     92 F3 97 F3 
38e06     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
38e0a     67 FB 69 FB 
38e0e     6B FB 6F FB 
38e12     71 FB 72 FB 
38e16     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
38e1a     E3 F8 BA F4 
38e1e     EE F3 CC F3 
38e22     CA F3 CF F3 
38e26     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
38e2a     E2 F3 E8 F3 
38e2e     ED F3 B7 FB 
38e32     BC FB BE FB 
38e36     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
38e3a     C4 FB C6 FB 
38e3e     C8 FB C9 FB 
38e42     CC FB 8F F7 
38e46     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
38e4a     1E F4 1E F4 
38e4e     24 F4 2A F4 
38e52     30 F4 38 F4 
38e56     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
38e5a     AD FA B1 FA 
38e5e     B4 FA B6 FA 
38e62     BA FA BB FA 
38e66     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
38e6a     C2 FA C6 FA 
38e6e     55 F6 C6 F4 
38e72     7D F4 72 F4 
38e76     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
38e7a     83 F4 89 F4 
38e7e     8F F4 94 F4 
38e82     66 FA 03 FB 
38e86     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
38e8a     0A FB 0E FB 
38e8e     10 FB 11 FB 
38e92     16 FB 18 FB 
38e96     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
38e9a     F9 F4 CA F4 
38e9e     C5 F4 CB F4 
38ea2     D1 F4 D7 F4 
38ea6     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
38eaa     E8 F4 3F FB 
38eae     56 FB 58 FB 
38eb2     5A FB 5E FB 
38eb6     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
38eba     64 FB 64 FB 
38ebe     69 FB 99 F9 
38ec2     E9 F5 33 F5 
38ec6     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
38eca     1D F5 22 F5 
38ece     27 F5 2E F5 
38ed2     32 F5 37 F5 
38ed6     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
38eda     BC FA BC FA 
38ede     C1 FA C2 FA 
38ee2     C4 FA C8 FA 
38ee6     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
38eea     F9 F7 DB F5 
38eee     78 F5 69 F5 
38ef2     6A F5 70 F5 
38ef6     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
38efa     7F F5 85 F5 
38efe     6E F7 06 FB 
38f02     0A FB 0B FB 
38f06     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
38f0a     14 FB 15 FB 
38f0e     18 FB 1B FB 
38f12     1D FB 70 F7 
38f16     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
38f1a     B6 F5 BB F5 
38f1e     C0 F5 C6 F5 
38f22     CA F5 CF F5 
38f26     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
38f2a     54 FB 56 FB 
38f2e     5A FB 5B FB 
38f32     5E FB 5F FB 
38f36     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
38f3a     67 FB 52 FB 
38f3e     29 F7 33 F6 
38f42     06 F6 02 F6 
38f46     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
38f4a     10 F6 16 F6 
38f4e     1A F6 1F F6 
38f52     81 FB 9F FB 
38f56     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
38f5a     51 FB F2 FA 
38f5e     E3 FA E3 FA 
38f62     E5 FA E9 FA 
38f66     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
38f6a     64 F6 4D F6 
38f6e     4D F6 53 F6 
38f72     57 F6 5C F6 
38f76     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
38f7a     6A F6 19 FB 
38f7e     1E FB 22 FB 
38f82     23 FB 24 FB 
38f86     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
38f8a     2C FB 2E FB 
38f8e     32 FB F0 F8 
38f92     01 F7 A5 F6 
38f96     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
38f9a     9F F6 A3 F6 
38f9e     A6 F6 AC F6 
38fa2     B0 F6 EB F7 
38fa6     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
38faa     68 FB 6C FB 
38fae     6E FB 71 FB 
38fb2     72 FB 74 FB 
38fb6     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
38fba     71 F8 21 F7 
38fbe     E5 F6 DD F6 
38fc2     E1 F6 E6 F6 
38fc6     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
38fca     F5 F6 F7 F6 
38fce     F7 FA AB FB 
38fd2     AD FB AF FB 
38fd6     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
38fda     B6 FB B9 FB 
38fde     BB FB BC FB 
38fe2     21 FB 07 F8 
38fe6     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
38fea     22 F7 26 F7 
38fee     2B F7 2E F7 
38ff2     34 F7 38 F7 
38ff6     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
38ffa     13 FB 16 FB 
38ffe     17 FB 1B FB 
39002     1E FB 20 FB 
39006     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
3900a     26 FB 77 FA 
3900e     F3 F7 7C F7 
39012     67 F7 6A F7 
39016     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
3901a     74 F7 7A F7 
3901e     7E F7 82 F7 
39022     53 FB 5A FB 
39026     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
3902a     5F FB 63 FB 
3902e     65 FB 67 FB 
39032     69 FB 6A FB 
39036     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
3903a     B5 F7 A9 F7 
3903e     AD F7 B0 F7 
39042     B5 F7 B8 F7 
39046     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
3904a     6E F8 99 FB 
3904e     9C FB 9D FB 
39052     9F FB A4 FB 
39056     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
3905a     A9 FB AB FB 
3905e     AD FB 46 F9 
39062     26 F8 F0 F7 
39066     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
3906a     F4 F7 F8 F7 
3906e     FB F7 FF F7 
39072     03 F8 65 FA 
39076     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
3907a     2B FB 2F FB 
3907e     30 FB 32 FB 
39082     34 FB 38 FB 
39086     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
3908a     E9 F8 4A F8 
3908e     2E F8 2C F8 
39092     2F F8 36 F8 
39096     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
3909a     41 F8 44 F8 
3909e     4A FB 67 FB 
390a2     68 FB 6B FB 
390a6     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
390aa     73 FB 74 FB 
390ae     78 FB 7A FB 
390b2     14 FB E7 F8 
390b6     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
390ba     6D F8 70 F8 
390be     73 F8 78 F8 
390c2     7C F8 80 F8 
390c6     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
390ca     A6 FB A7 FB 
390ce     A9 FB AC FB 
390d2     AF FB B1 FB 
390d6     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
390da     B7 FB 73 FA 
390de     F8 F8 B4 F8 
390e2     A9 F8 AB F8 
390e6     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
390ea     B4 F8 B8 F8 
390ee     BB F8 FA F8 
390f2     64 FB 65 FB 
390f6     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
390fa     6D FB 6F FB 
390fe     70 FB 74 FB 
39102     77 FB 77 FB 
39106     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
3910a     E9 F8 E4 F8 
3910e     E8 F8 EB F8 
39112     EE F8 F2 F8 
39116     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
3911a     B5 FA 9F FB 
3911e     A1 FB A4 FB 
39122     A5 FB A9 FB 
39126     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
3912a     AE FB B1 FB 
3912e     B2 FB C7 F9 
39132     39 F9 22 F9 
39136     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
3913a     26 F9 2A F9 
3913e     2E F9 32 F9 
39142     33 F9 BA FB 
39146     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
3914a     DE FB E1 FB 
3914e     E2 FB E4 FB 
39152     E5 FB E7 FB 
39156     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
3915a     C5 F9 67 F9 
3915e     57 F9 56 F9 
39162     5B F9 5F F9 
39166     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
3916a     68 F9 6C F9 
3916e     0B FC 11 FC 
39172     14 FC 15 FC 
39176     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
3917a     B5 FB B5 FB 
3917e     B6 FB B8 FB 
39182     E9 FA C8 F9 
39186     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
3918a     90 F9 94 F9 
3918e     95 F9 99 F9 
39192     9D F9 9F F9 
39196     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
3919a     DE FB DF FB 
3919e     E2 FB E4 FB 
391a2     E6 FB E8 FB 
391a6     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
391aa     EF FB AC FA 
391ae     E9 F9 C7 F9 
391b2     C3 F9 C8 F9 
391b6     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
391ba     D0 F9 D4 F9 
391be     D6 F9 0E FB 
391c2     11 FC 13 FC 
391c6     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
391ca     19 FC 1B FC 
391ce     1D FC 1E FC 
391d2     21 FC 22 FC 
391d6     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
391da     F7 F9 F7 F9 
391de     FB F9 FE F9 
391e2     00 FA 03 FA 
391e6     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
391ea     1B FC 45 FC 
391ee     46 FC 48 FC 
391f2     4A FC 4B FC 
391f6     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
391fa     52 FC 54 FC 
391fe     F3 FB 82 FA 
39202     35 FA 28 FA 
39206     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
3920a     31 FA 32 FA 
3920e     37 FA 37 FA 
39212     3C FA 00 FC 
39216     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
3921a     09 FC 0B FC 
3921e     0F FC 12 FC 
39222     12 FC 15 FC 
39226     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
3922a     8D FA 60 FA 
3922e     5B FA 5C FA 
39232     60 FA 61 FA 
39236     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
3923a     6C FA 6D FA 
3923e     37 FC 3A FC 
39242     3B FC 3D FC 
39246     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
3924a     43 FC 44 FC 
3924e     45 FC 47 FC 
39252     51 FB AB FA 
39256     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
3925a     8E FA 91 FA 
3925e     93 FA 95 FA 
39262     98 FA 9B FA 
39266     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
3926a     68 FC 6A FC 
3926e     6C FC 6E FC 
39272     70 FC 72 FC 
39276     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
3927a     76 FC 3B FB 
3927e     D0 FA BB FA 
39282     B9 FA BD FA 
39286     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
3928a     C4 FA C6 FA 
3928e     CA FA 13 FC 
39292     3A FC 3A FC 
39296     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
3929a     41 FC 43 FC 
3929e     44 FC 47 FC 
392a2     48 FC 3C FC 
392a6     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
392aa     E6 FA E8 FA 
392ae     EB FA EE FA 
392b2     F0 FA F2 FA 
392b6     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
392ba     61 FC 66 FC 
392be     68 FC 6B FC 
392c2     6C FC 6E FC 
392c6     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
392ca     73 FC 75 FC 
392ce     13 FC 3F FB 
392d2     17 FB 12 FB 
392d6     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
392da     1A FB 1D FB 
392de     1F FB 20 FB 
392e2     23 FB 92 FC 
392e6     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
392ea     96 FC 97 FC 
392ee     9A FC 9C FC 
392f2     9E FC 9F FC 
392f6     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
392fa     5A FB 41 FB 
392fe     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
39302     73 32 00 04 
39306     00 00 10 00 
3930a     00 00 00 00 
3930e     00 00 00 00 | atari2 file "atari2.s2"
39312     43 87 43 87 
39316     43 87 44 87 
3931a     43 87 44 87 
3931e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
39322     43 87 43 87 
39326     43 87 44 87 
3932a     43 87 43 87 
3932e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39332     44 87 43 87 
39336     44 87 43 87 
3933a     43 87 43 87 
3933e     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39342     43 87 43 87 
39346     44 87 43 87 
3934a     44 87 44 87 
3934e     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
39352     43 87 43 87 
39356     44 87 43 87 
3935a     43 87 42 87 
3935e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
39362     43 87 43 87 
39366     43 87 43 87 
3936a     44 87 43 87 
3936e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
39372     44 87 44 87 
39376     43 87 44 87 
3937a     43 87 44 87 
3937e     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
39382     44 87 43 87 
39386     44 87 44 87 
3938a     43 87 43 87 
3938e     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39392     43 87 44 87 
39396     44 87 43 87 
3939a     43 87 44 87 
3939e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
393a2     43 87 43 87 
393a6     43 87 43 87 
393aa     43 87 43 87 
393ae     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
393b2     42 87 43 87 
393b6     44 87 42 87 
393ba     43 87 43 87 
393be     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
393c2     43 87 44 87 
393c6     44 87 43 87 
393ca     43 87 43 87 
393ce     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
393d2     43 87 5C 87 
393d6     EE 86 AC 87 
393da     4C 7C A3 78 
393de     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
393e2     BC 78 BB 78 
393e6     BD 78 BC 78 
393ea     BB 78 BD 78 
393ee     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
393f2     BB 78 BB 78 
393f6     BC 78 BC 78 
393fa     BC 78 BB 78 
393fe     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39402     BC 78 BC 78 
39406     BC 78 BC 78 
3940a     BC 78 BC 78 
3940e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39412     BB 78 BC 78 
39416     A0 78 4C 7C 
3941a     11 7A 29 89 
3941e     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
39422     44 87 43 87 
39426     44 87 43 87 
3942a     43 87 42 87 
3942e     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
39432     43 87 43 87 
39436     44 87 ED 85 
3943a     71 85 52 79 
3943e     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
39442     BC 78 BC 78 
39446     BC 78 BC 78 
3944a     BC 78 BC 78 
3944e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39452     BC 78 BC 78 
39456     BC 78 A0 78 
3945a     CF 7A B9 81 
3945e     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
39462     44 87 43 87 
39466     43 87 44 87 
3946a     43 87 44 87 
3946e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
39472     43 87 43 87 
39476     43 87 43 87 
3947a     44 87 43 87 
3947e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
39482     43 87 43 87 
39486     44 87 43 87 
3948a     44 87 43 87 
3948e     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
39492     44 87 43 87 
39496     43 87 43 87 
3949a     5A 87 39 81 
3949e     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
394a2     A5 78 BC 78 
394a6     BB 78 BC 78 
394aa     BB 78 BC 78 
394ae     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
394b2     BC 78 BC 78 
394b6     BC 78 BC 78 
394ba     BC 78 8F 79 
394be     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
394c2     09 85 47 87 
394c6     43 87 43 87 
394ca     42 87 42 87 
394ce     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
394d2     43 87 43 87 
394d6     43 87 43 87 
394da     43 87 44 87 
394de     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
394e2     43 87 43 87 
394e6     44 87 43 87 
394ea     42 87 43 87 
394ee     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
394f2     44 87 43 87 
394f6     43 87 43 87 
394fa     44 87 44 87 
394fe     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
39502     94 78 55 7A 
39506     B9 78 BC 78 
3950a     BC 78 BC 78 
3950e     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39512     BC 78 BB 78 
39516     BC 78 BC 78 
3951a     BC 78 BC 78 
3951e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39522     BB 78 BC 78 
39526     BC 78 BC 78 
3952a     BB 78 BC 78 
3952e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39532     BC 78 BC 78 
39536     BD 78 BC 78 
3953a     BC 78 BB 78 
3953e     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
39542     94 78 B3 84 
39546     36 84 4A 87 
3954a     43 87 43 87 
3954e     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
39552     43 87 44 87 
39556     43 87 43 87 
3955a     43 87 43 87 
3955e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39562     43 87 44 87 
39566     43 87 44 87 
3956a     43 87 43 87 
3956e     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
39572     43 87 43 87 
39576     43 87 45 87 
3957a     43 87 43 87 
3957e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
39582     43 87 44 87 
39586     44 87 44 87 
3958a     43 87 43 87 
3958e     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
39592     43 87 42 87 
39596     43 87 43 87 
3959a     44 87 43 87 
3959e     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
395a2     54 87 3C 82 
395a6     36 83 52 79 
395aa     C6 78 BC 78 
395ae     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
395b2     BB 78 BB 78 
395b6     BC 78 BC 78 
395ba     BC 78 BC 78 
395be     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
395c2     BD 78 ED 78 
395c6     1B 79 F4 83 
395ca     4D 83 4E 87 
395ce     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
395d2     44 87 43 87 
395d6     42 87 44 87 
395da     43 87 42 87 
395de     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
395e2     43 87 54 87 
395e6     26 82 B3 84 
395ea     D6 77 BB 78 
395ee     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
395f2     BC 78 BB 78 
395f6     BB 78 BB 78 
395fa     BB 78 BB 78 
395fe     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
39602     BC 78 BC 78 
39606     26 79 18 75 
3960a     36 83 1F 84 
3960e     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
39612     43 87 43 87 
39616     43 87 43 87 
3961a     43 87 44 87 
3961e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39622     43 87 44 87 
39626     44 87 43 87 
3962a     43 87 43 87 
3962e     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
39632     43 87 43 87 
39636     43 87 43 87 
3963a     44 87 44 87 
3963e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
39642     44 87 43 87 
39646     43 87 43 87 
3964a     43 87 44 87 
3964e     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
39652     44 87 44 87 
39656     44 87 43 87 
3965a     44 87 43 87 
3965e     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
39662     43 87 43 87 
39666     43 87 44 87 
3966a     44 87 43 87 
3966e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
39672     43 87 43 87 
39676     43 87 43 87 
3967a     43 87 44 87 
3967e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39682     43 87 44 87 
39686     43 87 44 87 
3968a     19 87 7D 86 
3968e     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
39692     B1 78 BC 78 
39696     BC 78 BC 78 
3969a     BC 78 BC 78 
3969e     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
396a2     BC 78 BC 78 
396a6     BD 78 BC 78 
396aa     B7 78 3B 7B 
396ae     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
396b2     96 86 44 87 
396b6     43 87 43 87 
396ba     43 87 43 87 
396be     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
396c2     44 87 44 87 
396c6     43 87 44 87 
396ca     43 87 44 87 
396ce     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
396d2     43 87 44 87 
396d6     43 87 44 87 
396da     43 87 44 87 
396de     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
396e2     43 87 44 87 
396e6     43 87 43 87 
396ea     44 87 43 87 
396ee     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
396f2     44 87 44 87 
396f6     43 87 43 87 
396fa     43 87 44 87 
396fe     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39702     43 87 43 87 
39706     43 87 43 87 
3970a     44 87 44 87 
3970e     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
39712     36 83 CF 7A 
39716     AB 78 BB 78 
3971a     BC 78 BC 78 
3971e     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
39722     BB 78 BC 78 
39726     BC 78 BC 78 
3972a     BC 78 BC 78 
3972e     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39732     BC 78 BC 78 
39736     BC 78 BB 78 
3973a     BC 78 BC 78 
3973e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39742     BB 78 BC 78 
39746     BB 78 BC 78 
3974a     BC 78 BD 78 
3974e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
39752     BC 78 BC 78 
39756     BC 78 BC 78 
3975a     BC 78 BD 78 
3975e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
39762     BC 78 BB 78 
39766     BC 78 BB 78 
3976a     BB 78 BC 78 
3976e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
39772     BC 78 BC 78 
39776     BC 78 BC 78 
3977a     BC 78 BB 78 
3977e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
39782     BC 78 BC 78 
39786     BC 78 BD 78 
3978a     BB 78 BC 78 
3978e     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
39792     BC 78 BC 78 
39796     BC 78 BB 78 
3979a     BC 78 BB 78 
3979e     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
397a2     BB 78 BC 78 
397a6     BC 78 BC 78 
397aa     BC 78 BB 78 
397ae     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
397b2     BC 78 BC 78 
397b6     BC 78 BB 78 
397ba     BC 78 BB 78 
397be     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
397c2     BC 78 BC 78 
397c6     BC 78 BC 78 
397ca     BB 78 BC 78 
397ce     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
397d2     BC 78 9F 78 
397d6     52 79 B3 84 
397da     2F 86 60 87 
397de     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
397e2     44 87 43 87 
397e6     43 87 43 87 
397ea     43 87 43 87 
397ee     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
397f2     43 87 43 87 
397f6     43 87 44 87 
397fa     43 87 43 87 
397fe     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39802     43 87 43 87 
39806     43 87 43 87 
3980a     43 87 44 87 
3980e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
39812     44 87 44 87 
39816     5E 87 BC 80 
3981a     FB 80 94 78 
3981e     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
39822     BD 78 BC 78 
39826     BB 78 BC 78 
3982a     BB 78 BB 78 
3982e     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
39832     BC 78 BB 78 
39836     BB 78 6B 79 
3983a     D6 77 AC 87 
3983e     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
39842     43 87 44 87 
39846     43 87 43 87 
3984a     44 87 43 87 
3984e     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
39852     43 87 44 87 
39856     43 87 5C 87 
3985a     E7 80 00 80 
3985e     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
39862     BC 78 BD 78 
39866     BC 78 BC 78 
3986a     BC 78 BB 78 
3986e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39872     BC 78 BC 78 
39876     BB 78 BC 78 
3987a     BB 78 BC 78 
3987e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39882     BB 78 BC 78 
39886     BC 78 BC 78 
3988a     BC 78 BC 78 
3988e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
39892     BC 78 BC 78 
39896     BC 78 BC 78 
3989a     A0 78 8D 7B 
3989e     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
398a2     60 87 43 87 
398a6     44 87 44 87 
398aa     43 87 43 87 
398ae     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
398b2     44 87 43 87 
398b6     43 87 43 87 
398ba     44 87 73 86 
398be     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
398c2     51 7B B6 78 
398c6     BC 78 BD 78 
398ca     BC 78 BC 78 
398ce     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
398d2     BB 78 BC 78 
398d6     BD 78 BB 78 
398da     BC 78 BB 78 
398de     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
398e2     BC 78 BC 78 
398e6     BC 78 BC 78 
398ea     BB 78 BC 78 
398ee     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
398f2     BC 78 BB 78 
398f6     BB 78 BC 78 
398fa     BC 78 BB 78 
398fe     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
39902     22 8C AF 84 
39906     48 87 43 87 
3990a     44 87 43 87 
3990e     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
39912     43 87 42 87 
39916     43 87 43 87 
3991a     44 87 43 87 
3991e     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
39922     43 87 43 87 
39926     44 87 44 87 
3992a     43 87 43 87 
3992e     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39932     43 87 43 87 
39936     43 87 43 87 
3993a     44 87 43 87 
3993e     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
39942     9F 8B D6 77 
39946     16 7C B3 78 
3994a     BC 78 BB 78 
3994e     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
39952     BB 78 BC 78 
39956     BB 78 BC 78 
3995a     BC 78 BC 78 
3995e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39962     BC 78 BB 78 
39966     BB 78 BC 78 
3996a     BB 78 BC 78 
3996e     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
39972     BB 78 BB 78 
39976     BC 78 BC 78 
3997a     BC 78 BB 78 
3997e     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
39982     BC 78 BC 78 
39986     BC 78 BD 78 
3998a     BB 78 BC 78 
3998e     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
39992     BC 78 BC 78 
39996     BC 78 BB 78 
3999a     BC 78 BC 78 
3999e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
399a2     A8 78 54 7E 
399a6     F4 83 17 82 
399aa     50 87 43 87 
399ae     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
399b2     44 87 43 87 
399b6     44 87 43 87 
399ba     43 87 44 87 
399be     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
399c2     43 87 28 87 
399c6     20 85 CF 7A 
399ca     70 7D AD 78 
399ce     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
399d2     BB 78 BC 78 
399d6     BC 78 BC 78 
399da     BB 78 BB 78 
399de     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
399e2     BB 78 B2 78 
399e6     9A 7C CF 7A 
399ea     4A 87 0D 87 
399ee     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
399f2     43 87 44 87 
399f6     43 87 44 87 
399fa     43 87 43 87 
399fe     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
39a02     44 87 43 87 
39a06     28 87 51 85 
39a0a     11 7A 1E 7D 
39a0e     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
39a12     BC 78 BB 78 
39a16     BC 78 BC 78 
39a1a     BC 78 BC 78 
39a1e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39a22     BB 78 BC 78 
39a26     BB 78 BC 78 
39a2a     BC 78 BC 78 
39a2e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
39a32     BB 78 BC 78 
39a36     BC 78 BC 78 
39a3a     BD 78 BB 78 
39a3e     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
39a42     BC 78 BB 78 
39a46     BC 78 BC 78 
39a4a     BC 78 BB 78 
39a4e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39a52     BC 78 BC 78 
39a56     BC 78 BC 78 
39a5a     BB 78 BC 78 
39a5e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39a62     BC 78 BD 78 
39a66     BC 78 BC 78 
39a6a     BC 78 BB 78 
39a6e     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39a72     BC 78 BB 78 
39a76     BB 78 BC 78 
39a7a     BC 78 BB 78 
39a7e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39a82     BB 78 BB 78 
39a86     BB 78 BC 78 
39a8a     B6 78 48 7D 
39a8e     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
39a92     56 87 43 87 
39a96     42 87 44 87 
39a9a     44 87 43 87 
39a9e     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
39aa2     43 87 44 87 
39aa6     43 87 44 87 
39aaa     4C 87 7E 83 
39aae     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
39ab2     F7 78 BC 78 
39ab6     BC 78 BB 78 
39aba     BB 78 BC 78 
39abe     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39ac2     BC 78 BB 78 
39ac6     BC 78 BC 78 
39aca     BB 78 BC 78 
39ace     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
39ad2     BB 78 BC 78 
39ad6     BC 78 BC 78 
39ada     BC 78 BB 78 
39ade     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39ae2     BC 78 BC 78 
39ae6     BC 78 BC 78 
39aea     BC 78 BB 78 
39aee     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39af2     BC 78 BB 78 
39af6     BB 78 BC 78 
39afa     BC 78 BB 78 
39afe     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39b02     BC 78 BC 78 
39b06     BB 78 BC 78 
39b0a     BC 78 BC 78 
39b0e     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
39b12     73 32 00 04 
39b16     00 00 10 00 
39b1a     00 00 00 00 
39b1e     00 00 00 00 | atari12 file "atari12.s2"
39b22     00 6D 00 6D 
39b26     00 6D 00 6D 
39b2a     00 6D 00 6D 
39b2e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39b32     00 6D 00 6D 
39b36     00 6D 00 6D 
39b3a     00 6D 00 6D 
39b3e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39b42     00 6D 00 6D 
39b46     00 6D 00 6D 
39b4a     00 6D 00 6D 
39b4e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39b52     00 6D 00 6D 
39b56     00 6D 00 6D 
39b5a     00 6D 00 6D 
39b5e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39b62     00 6D 00 6D 
39b66     00 6D 00 6D 
39b6a     00 6D 00 6D 
39b6e     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
39b72     00 6C 00 6C 
39b76     00 6C 00 6C 
39b7a     00 6C 00 6C 
39b7e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39b82     00 6C 00 6C 
39b86     00 6C 00 6C 
39b8a     00 6C 00 6C 
39b8e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39b92     00 6C 00 6C 
39b96     00 6C 00 6C 
39b9a     00 6C 00 6C 
39b9e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39ba2     00 6C 00 6C 
39ba6     00 6C 00 6C 
39baa     00 6C 00 6C 
39bae     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39bb2     00 6C 00 6C 
39bb6     00 6C 00 6C 
39bba     00 6C 00 6C 
39bbe     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39bc2     00 6C 00 6C 
39bc6     00 6C 00 6C 
39bca     00 6C 00 6C 
39bce     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39bd2     00 6C 00 6C 
39bd6     00 6C 00 6C 
39bda     00 6C 00 6C 
39bde     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39be2     00 6C 00 6C 
39be6     00 6C 00 6C 
39bea     00 6C 00 6C 
39bee     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39bf2     00 6C 00 6C 
39bf6     00 6C 00 6C 
39bfa     00 6C 00 6C 
39bfe     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39c02     00 6C 00 6C 
39c06     00 6C 00 6C 
39c0a     00 6C 00 6C 
39c0e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39c12     00 6C 00 6C 
39c16     00 6C 00 6C 
39c1a     00 6C 00 6C 
39c1e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39c22     00 6C 00 6B 
39c26     00 6B 00 6B 
39c2a     00 6B 00 6B 
39c2e     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39c32     00 6B 00 6B 
39c36     00 6B 00 6B 
39c3a     00 6B 00 6B 
39c3e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39c42     00 6B 00 6B 
39c46     00 6B 00 6B 
39c4a     00 6B 00 6B 
39c4e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39c52     00 6B 00 6B 
39c56     00 6B 00 6B 
39c5a     00 6B 00 6B 
39c5e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39c62     00 6B 00 6B 
39c66     00 6B 00 6B 
39c6a     00 6B 00 6B 
39c6e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39c72     00 6B 00 6B 
39c76     00 6B 00 6B 
39c7a     00 6B 00 6B 
39c7e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39c82     00 6B 00 6B 
39c86     00 6B 00 6B 
39c8a     00 6B 00 6B 
39c8e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39c92     00 6B 00 6B 
39c96     00 6B 00 6B 
39c9a     00 6B 00 6B 
39c9e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39ca2     00 6B 00 6B 
39ca6     00 6B 00 6B 
39caa     00 6B 00 6B 
39cae     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39cb2     00 6B 00 6B 
39cb6     00 6B 00 6B 
39cba     00 6A 00 9D 
39cbe     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
39cc2     00 9E 00 9E 
39cc6     00 9E 00 9E 
39cca     00 9E 00 9E 
39cce     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39cd2     00 9E 00 9E 
39cd6     00 9E 00 9E 
39cda     00 9E 00 9E 
39cde     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39ce2     00 9E 00 9E 
39ce6     00 9E 00 9E 
39cea     00 9E 00 9E 
39cee     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39cf2     00 9E 00 9E 
39cf6     00 9E 00 9E 
39cfa     00 9E 00 9E 
39cfe     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39d02     00 9E 00 9E 
39d06     00 9E 00 9E 
39d0a     00 9E 00 9E 
39d0e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39d12     00 9E 00 9E 
39d16     00 9E 00 9E 
39d1a     00 9E 00 9E 
39d1e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39d22     00 9E 00 9E 
39d26     00 9E 00 9E 
39d2a     00 9E 00 9E 
39d2e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39d32     00 9E 00 9E 
39d36     00 9E 00 9E 
39d3a     00 9E 00 9E 
39d3e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39d42     00 9E 00 9E 
39d46     00 9E 00 9E 
39d4a     00 9E 00 9E 
39d4e     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
39d52     00 9F 00 9F 
39d56     00 9F 00 9F 
39d5a     00 9F 00 9F 
39d5e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d62     00 9F 00 9F 
39d66     00 9F 00 9F 
39d6a     00 9F 00 9F 
39d6e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d72     00 9F 00 9F 
39d76     00 9F 00 9F 
39d7a     00 9F 00 9F 
39d7e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d82     00 9F 00 9F 
39d86     00 9F 00 9F 
39d8a     00 9F 00 9F 
39d8e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d92     00 9F 00 9F 
39d96     00 9F 00 9F 
39d9a     00 9F 00 9F 
39d9e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39da2     00 9F 00 9F 
39da6     00 9F 00 9F 
39daa     00 9F 00 9F 
39dae     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39db2     00 9F 00 9F 
39db6     00 9F 00 9F 
39dba     00 9F 00 9F 
39dbe     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39dc2     00 9F 00 9F 
39dc6     00 9F 00 9F 
39dca     00 9F 00 9F 
39dce     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39dd2     00 9F 00 9F 
39dd6     00 9F 00 9F 
39dda     00 9F 00 9F 
39dde     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39de2     00 9F 00 9F 
39de6     00 9F 00 9F 
39dea     00 9F 00 9F 
39dee     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39df2     00 9F 00 9F 
39df6     00 9F 00 9F 
39dfa     00 9F 00 9F 
39dfe     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39e02     00 9F 00 9F 
39e06     00 9F 00 9F 
39e0a     00 9F 00 9F 
39e0e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39e12     00 9F 00 9F 
39e16     00 9F 00 A0 
39e1a     00 A0 00 A0 
39e1e     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e22     00 A0 00 A0 
39e26     00 A0 00 A0 
39e2a     00 A0 00 A0 
39e2e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e32     00 A0 00 A0 
39e36     00 A0 00 A0 
39e3a     00 A0 00 A0 
39e3e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e42     00 A0 00 A0 
39e46     00 A0 00 A0 
39e4a     00 A0 00 A0 
39e4e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e52     00 A0 00 A0 
39e56     00 A0 00 A0 
39e5a     00 A0 00 A0 
39e5e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e62     00 A0 00 A0 
39e66     00 A0 00 A0 
39e6a     00 A0 00 A0 
39e6e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e72     00 A0 00 A0 
39e76     00 A0 00 A0 
39e7a     00 A0 00 A0 
39e7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e82     00 A0 00 A0 
39e86     00 A0 00 A0 
39e8a     00 A0 00 A0 
39e8e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e92     00 A0 00 A0 
39e96     00 A0 00 A0 
39e9a     00 A0 00 A0 
39e9e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39ea2     00 A0 00 A0 
39ea6     00 A0 00 A0 
39eaa     00 A0 00 A0 
39eae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39eb2     00 A0 00 A0 
39eb6     00 A0 00 A0 
39eba     00 A0 00 A0 
39ebe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39ec2     00 A0 00 A0 
39ec6     00 A0 00 A0 
39eca     00 A0 00 A0 
39ece     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39ed2     00 A0 00 A0 
39ed6     00 A0 00 A0 
39eda     00 A0 00 A0 
39ede     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
39ee2     00 6D 00 6D 
39ee6     00 6D 00 6D 
39eea     00 6D 00 6D 
39eee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39ef2     00 6D 00 6D 
39ef6     00 6D 00 6D 
39efa     00 6D 00 6D 
39efe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39f02     00 6D 00 6D 
39f06     00 6D 00 6D 
39f0a     00 6D 00 6D 
39f0e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39f12     00 6D 00 6D 
39f16     00 6D 00 6D 
39f1a     00 6D 00 6D 
39f1e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39f22     00 6D 00 6D 
39f26     00 6D 00 6D 
39f2a     00 6D 00 6D 
39f2e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39f32     00 6D 00 6D 
39f36     00 6D 00 6D 
39f3a     00 6D 00 6D 
39f3e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39f42     00 6D 00 6D 
39f46     00 6D 00 6D 
39f4a     00 6D 00 6D 
39f4e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39f52     00 6D 00 6D 
39f56     00 6D 00 6D 
39f5a     00 6D 00 6D 
39f5e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39f62     00 6D 00 6D 
39f66     00 A0 00 A0 
39f6a     00 A0 00 A0 
39f6e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39f72     00 A0 00 A0 
39f76     00 A0 00 A0 
39f7a     00 A0 00 A0 
39f7e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39f82     00 A0 00 A0 
39f86     00 A0 00 A0 
39f8a     00 A0 00 A0 
39f8e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39f92     00 A0 00 A0 
39f96     00 A0 00 A0 
39f9a     00 A0 00 A0 
39f9e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39fa2     00 A0 00 A0 
39fa6     00 A0 00 A0 
39faa     00 A0 00 A0 
39fae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39fb2     00 A0 00 A0 
39fb6     00 A0 00 A0 
39fba     00 A0 00 A0 
39fbe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39fc2     00 A0 00 A0 
39fc6     00 A0 00 A0 
39fca     00 A0 00 A0 
39fce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39fd2     00 A0 00 A0 
39fd6     00 A0 00 A0 
39fda     00 A0 00 A0 
39fde     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39fe2     00 A0 00 A0 
39fe6     00 A0 00 A0 
39fea     00 A0 00 A0 
39fee     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
39ff2     00 6D 00 6D 
39ff6     00 6D 00 6D 
39ffa     00 6D 00 6D 
39ffe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a002     00 6D 00 6D 
3a006     00 6D 00 6D 
3a00a     00 6D 00 6D 
3a00e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a012     00 6D 00 6D 
3a016     00 6D 00 6D 
3a01a     00 6D 00 6D 
3a01e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a022     00 6D 00 6D 
3a026     00 6D 00 6D 
3a02a     00 6D 00 6D 
3a02e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a032     00 6D 00 6D 
3a036     00 6D 00 6D 
3a03a     00 6D 00 6D 
3a03e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a042     00 6D 00 6D 
3a046     00 6D 00 6D 
3a04a     00 6D 00 6D 
3a04e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a052     00 6D 00 6D 
3a056     00 6D 00 6D 
3a05a     00 6D 00 6D 
3a05e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a062     00 6D 00 6D 
3a066     00 6D 00 6D 
3a06a     00 6D 00 6D 
3a06e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a072     00 6D 00 6D 
3a076     00 6C 00 A0 
3a07a     00 9F 00 A0 
3a07e     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
3a082     00 A0 00 A0 
3a086     00 A0 00 A0 
3a08a     00 A0 00 A0 
3a08e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a092     00 A0 00 A0 
3a096     00 A0 00 A0 
3a09a     00 A0 00 A0 
3a09e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a0a2     00 A0 00 A0 
3a0a6     00 A0 00 A0 
3a0aa     00 A0 00 A0 
3a0ae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a0b2     00 A0 00 A0 
3a0b6     00 A0 00 A0 
3a0ba     00 A0 00 A0 
3a0be     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a0c2     00 A0 00 A0 
3a0c6     00 A0 00 A0 
3a0ca     00 A0 00 A0 
3a0ce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a0d2     00 A0 00 A0 
3a0d6     00 A0 00 A0 
3a0da     00 A0 00 A0 
3a0de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a0e2     00 A0 00 A0 
3a0e6     00 A0 00 A0 
3a0ea     00 A0 00 A0 
3a0ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a0f2     00 A0 00 A0 
3a0f6     00 A0 00 A0 
3a0fa     00 A0 00 A0 
3a0fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a102     00 A0 00 A0 
3a106     00 A0 00 A0 
3a10a     00 A0 00 A0 
3a10e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a112     00 A0 00 A0 
3a116     00 A0 00 A0 
3a11a     00 A0 00 A0 
3a11e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a122     00 A0 00 A0 
3a126     00 A0 00 A0 
3a12a     00 A0 00 A0 
3a12e     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3a132     00 A1 00 A1 
3a136     00 A1 00 A1 
3a13a     00 A1 00 A1 
3a13e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a142     00 A1 00 A1 
3a146     00 A1 00 A1 
3a14a     00 A1 00 A1 
3a14e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a152     00 A1 00 A1 
3a156     00 A1 00 A1 
3a15a     00 A1 00 A1 
3a15e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a162     00 A1 00 A1 
3a166     00 A1 00 A1 
3a16a     00 A1 00 A1 
3a16e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a172     00 A1 00 A1 
3a176     00 A1 00 A1 
3a17a     00 A1 00 A1 
3a17e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a182     00 A1 00 A1 
3a186     00 A1 00 A1 
3a18a     00 6E 00 6E 
3a18e     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a192     00 6E 00 6E 
3a196     00 6E 00 6E 
3a19a     00 6E 00 6E 
3a19e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a1a2     00 6E 00 6E 
3a1a6     00 6E 00 6E 
3a1aa     00 6E 00 6E 
3a1ae     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a1b2     00 6E 00 6E 
3a1b6     00 6E 00 6E 
3a1ba     00 6E 00 6E 
3a1be     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a1c2     00 6E 00 6D 
3a1c6     00 6D 00 6D 
3a1ca     00 6D 00 6D 
3a1ce     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a1d2     00 6D 00 6D 
3a1d6     00 6D 00 6D 
3a1da     00 6D 00 6D 
3a1de     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a1e2     00 6D 00 6D 
3a1e6     00 6D 00 6D 
3a1ea     00 6D 00 6D 
3a1ee     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a1f2     00 6D 00 6D 
3a1f6     00 6D 00 6D 
3a1fa     00 6D 00 6D 
3a1fe     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a202     00 6D 00 6D 
3a206     00 6D 00 6D 
3a20a     00 6D 00 6D 
3a20e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a212     00 6D 00 6D 
3a216     00 6D 00 6D 
3a21a     00 6D 00 6D 
3a21e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a222     00 6D 00 6D 
3a226     00 6D 00 6D 
3a22a     00 6D 00 6D 
3a22e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a232     00 6D 00 6D 
3a236     00 6D 00 6D 
3a23a     00 6D 00 6D 
3a23e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a242     00 6D 00 6D 
3a246     00 6D 00 6D 
3a24a     00 6D 00 6D 
3a24e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a252     00 6D 00 6D 
3a256     00 6D 00 6D 
3a25a     00 6D 00 6D 
3a25e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a262     00 6D 00 6D 
3a266     00 6D 00 6D 
3a26a     00 6D 00 6D 
3a26e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a272     00 6D 00 6D 
3a276     00 6C 00 6C 
3a27a     00 6C 00 6C 
3a27e     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a282     00 6C 00 6C 
3a286     00 6C 00 6C 
3a28a     00 6C 00 6C 
3a28e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a292     00 6C 00 6C 
3a296     00 6C 00 6C 
3a29a     00 9D 00 9F 
3a29e     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
3a2a2     00 9F 00 9F 
3a2a6     00 9F 00 9F 
3a2aa     00 A0 00 A0 
3a2ae     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a2b2     00 A0 00 A0 
3a2b6     00 A0 00 A0 
3a2ba     00 A0 00 A0 
3a2be     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a2c2     00 A0 00 A0 
3a2c6     00 A0 00 A0 
3a2ca     00 A0 00 A0 
3a2ce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a2d2     00 A0 00 A0 
3a2d6     00 A0 00 A0 
3a2da     00 A0 00 A0 
3a2de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a2e2     00 A0 00 A0 
3a2e6     00 A0 00 A0 
3a2ea     00 A0 00 A0 
3a2ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a2f2     00 A0 00 A0 
3a2f6     00 A0 00 A0 
3a2fa     00 A0 00 A0 
3a2fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a302     00 A0 00 A0 
3a306     00 A0 00 A0 
3a30a     00 A0 00 A0 
3a30e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a312     00 A0 00 A0 
3a316     00 A0 00 A0 
3a31a     00 A0 00 A0 
3a31e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a322     01 00 00 00 
3a326     00 00 00 00 
3a32a     00 00 00 00 
3a32e     00 00 00 00 | mouse  file "mouse2.def"
3a332     00 00 00 00 
3a336     00 00 00 00 
3a33a     00 00 00 00 
3a33e     00 00 00 00 | 	byte	$00[16]
3a342     01 01 00 00 
3a346     00 00 00 00 
3a34a     00 00 00 00 
3a34e     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a352     00 00 00 00 
3a356     00 00 00 00 
3a35a     00 00 00 00 
3a35e     00 00 00 00 | 	byte	$00[16]
3a362     01 0D 01 00 
3a366     00 00 00 00 
3a36a     00 00 00 00 
3a36e     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a372     00 00 00 00 
3a376     00 00 00 00 
3a37a     00 00 00 00 
3a37e     00 00 00 00 | 	byte	$00[16]
3a382     01 0D 0D 01 
3a386     00 00 00 00 
3a38a     00 00 00 00 
3a38e     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a392     00 00 00 00 
3a396     00 00 00 00 
3a39a     00 00 00 00 
3a39e     00 00 00 00 | 	byte	$00[16]
3a3a2     01 0D 0D 0D 
3a3a6     01 00 00 00 
3a3aa     00 00 00 00 
3a3ae     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a3b2     00 00 00 00 
3a3b6     00 00 00 00 
3a3ba     00 00 00 00 
3a3be     00 00 00 00 | 	byte	$00[16]
3a3c2     01 0D 0D 0D 
3a3c6     0D 01 00 00 
3a3ca     00 00 00 00 
3a3ce     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a3d2     00 00 00 00 
3a3d6     00 00 00 00 
3a3da     00 00 00 00 
3a3de     00 00 00 00 | 	byte	$00[16]
3a3e2     01 0D 0D 0D 
3a3e6     0D 0D 01 00 
3a3ea     00 00 00 00 
3a3ee     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a3f2     00 00 00 00 
3a3f6     00 00 00 00 
3a3fa     00 00 00 00 
3a3fe     00 00 00 00 | 	byte	$00[16]
3a402     01 0D 0D 0D 
3a406     0D 0D 0D 01 
3a40a     00 00 00 00 
3a40e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3a412     00 00 00 00 
3a416     00 00 00 00 
3a41a     00 00 00 00 
3a41e     00 00 00 00 | 	byte	$00[16]
3a422     01 0D 0D 0D 
3a426     0D 0D 0D 0C 
3a42a     01 00 00 00 
3a42e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3a432     00 00 00 00 
3a436     00 00 00 00 
3a43a     00 00 00 00 
3a43e     00 00 00 00 | 	byte	$00[16]
3a442     01 0D 0D 0D 
3a446     0D 0D 0D 0D 
3a44a     0C 01 00 00 
3a44e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3a452     00 00 00 00 
3a456     00 00 00 00 
3a45a     00 00 00 00 
3a45e     00 00 00 00 | 	byte	$00[16]
3a462     01 0D 0D 0D 
3a466     0D 0D 0D 0D 
3a46a     0D 0C 01 00 
3a46e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
3a472     00 00 00 00 
3a476     00 00 00 00 
3a47a     00 00 00 00 
3a47e     00 00 00 00 | 	byte	$00[16]
3a482     01 0D 0D 0D 
3a486     0D 0D 0D 0D 
3a48a     0D 0D 0B 01 
3a48e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
3a492     00 00 00 00 
3a496     00 00 00 00 
3a49a     00 00 00 00 
3a49e     00 00 00 00 | 	byte	$00[16]
3a4a2     01 0D 0D 0D 
3a4a6     0C 0D 0D 03 
3a4aa     01 01 01 01 
3a4ae     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
3a4b2     00 00 00 00 
3a4b6     00 00 00 00 
3a4ba     00 00 00 00 
3a4be     00 00 00 00 | 	byte	$00[16]
3a4c2     01 0D 0D 0C 
3a4c6     01 09 0D 03 
3a4ca     00 00 00 00 
3a4ce     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3a4d2     00 00 00 00 
3a4d6     00 00 00 00 
3a4da     00 00 00 00 
3a4de     00 00 00 00 | 	byte	$00[16]
3a4e2     01 0D 0C 01 
3a4e6     00 01 0D 0B 
3a4ea     01 00 00 00 
3a4ee     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3a4f2     00 00 00 00 
3a4f6     00 00 00 00 
3a4fa     00 00 00 00 
3a4fe     00 00 00 00 | 	byte	$00[16]
3a502     01 0C 01 00 
3a506     00 01 0A 0D 
3a50a     01 00 00 00 
3a50e     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3a512     00 00 00 00 
3a516     00 00 00 00 
3a51a     00 00 00 00 
3a51e     00 00 00 00 | 	byte	$00[16]
3a522     01 01 00 00 
3a526     00 00 01 0D 
3a52a     0B 01 00 00 
3a52e     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3a532     00 00 00 00 
3a536     00 00 00 00 
3a53a     00 00 00 00 
3a53e     00 00 00 00 
3a542     00 00 00 00 
3a546     00 00       | 	byte	$00[22]
3a548     01 0B 0D 01 
3a54c     00 00 00 00 
3a550     00 00 00 00 
3a554     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a558     00 00 00 00 
3a55c     00 00 00 00 
3a560     00 00 00 00 
3a564     00 00 00 00 
3a568     00          | 	byte	$00[17]
3a569     01 01 00 00 
3a56d     00 00 00 00 
3a571     00 00 00 00 
3a575     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a579     00 00 00 00 
      ...             
3a71d     00 00 00 00 
3a721     00          | 	byte	$00[425]
3a722                 | 
3a722     00 00       |              	org
3a724 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
3a728 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
3a72c 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
3a730 003             | 
3a730 003 00 30 04 F6 |                 mov     psramaddr,#0
3a734 004             | 
3a734 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
3a738 005 20 00 00 FF 
3a73c 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
3a740 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
3a744 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
3a748 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
3a74c 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
3a750 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
3a754 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
3a758 00d             | 
3a758 00d 20 00 00 FF 
3a75c 00e 00 30 04 F1 |                 add 	psramaddr,##16384
3a760 00f E0 03 00 FF 
3a764 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
3a768 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
3a76c 012             | 
3a76c 012             |                 
3a76c 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
3a770 013             |     
3a770 013 01 2C 60 FD |                 cogid 	t11				' get id
3a774 014 00 00 EC FC |                 coginit #0,#0				' start the new program
3a778 015 03 2C 60 FD |                 cogstop t11				' stop the loader
3a77c 016             | 
3a77c 016 00 00 00 00 | t11 		long 	0
3a780 017 00 FF 07 00 | mailbox 	long 	$7FF00
3a784 018 00 00 00 00 | psramaddr 	long 	0
3a788 019 00 00 00 00 | pslockval	long 	0
3a78c 01a 00 00 00 00 | cmd             long    0
3a790 01b 00 00 00 00 | buf1            long    0
3a794 01c 00 40 00 00 | buf2            long    16384
3a798 01d 9C A7 03 00 | 	long	@@@_dat_ + 12612
3a79c 01e 50 32 20 52 
3a7a0 01f 65 74 72 6F 
3a7a4 020 6D 61 63 68 
3a7a8 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
3a7ac 022 42 41 53 49 
3a7b0 023 43 20 76 65 
3a7b4 024 72 73 69 6F 
3a7b8 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
3a7bc 026 34 39 20 62 
3a7c0 027 65 74 61 20 
3a7c4 028 31 00 00 00 | 	byte	$34, $39, $20, $62, $65, $74, $61, $20, $31, $00, $00, $00
3a7c8 029             | 	alignl
3a7c8 029             | _hg010b_spin2_dat_
3a7c8 029             | 
3a7c8 029 00 00 00 00 
3a7cc 02a 00 00 00 00 
3a7d0 02b 00 00 00 00 
3a7d4 02c 00 00 00 00 
3a7d8 02d 00 00 00    | vga_font       file "vgafont.def"
3a7db 02d 7E 81 A5 81 
3a7df 02e 81 BD 99 81 
3a7e3 02f 81 7E 00 00 
3a7e7 030 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3a7eb 031 7E FF DB FF 
3a7ef 032 FF C3 E7 FF 
3a7f3 033 FF 7E 00 00 
3a7f7 034 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3a7fb 035 00 36 7F 7F 
3a7ff 036 7F 7F 3E 1C 
3a803 037 08 00 00 00 
3a807 038 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3a80b 039 00 08 1C 3E 
3a80f 03a 7F 3E 1C 08 
3a813 03b 00 00 00 00 
3a817 03c 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3a81b 03d 18 3C 3C E7 
3a81f 03e E7 E7 18 18 
3a823 03f 3C 00 00 00 
3a827 040 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3a82b 041 18 3C 7E FF 
3a82f 042 FF 7E 18 18 
3a833 043 3C 00 00 00 
3a837 044 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3a83b 045 00 00 00 18 
3a83f 046 3C 3C 18 00 
3a843 047 00 00 00 00 
3a847 048 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3a84b 049 FF FF FF E7 
3a84f 04a C3 C3 E7 FF 
3a853 04b FF FF FF FF 
3a857 04c FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3a85b 04d 00 00 3C 66 
3a85f 04e 42 42 66 3C 
3a863 04f 00 00 00 00 
3a867 050 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3a86b 051 FF FF C3 99 
3a86f 052 BD BD 99 C3 
3a873 053 FF FF FF FF 
3a877 054 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3a87b 055 78 70 58 4C 
3a87f 056 1E 33 33 33 
3a883 057 33 1E 00 00 
3a887 058 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3a88b 059 3C 66 66 66 
3a88f 05a 66 3C 18 7E 
3a893 05b 18 18 00 00 
3a897 05c 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3a89b 05d FC CC FC 0C 
3a89f 05e 0C 0C 0C 0E 
3a8a3 05f 0F 07 00 00 
3a8a7 060 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
3a8ab 061 FE C6 FE C6 
3a8af 062 C6 C6 C6 E6 
3a8b3 063 E7 67 03 00 
3a8b7 064 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3a8bb 065 18 18 DB 3C 
3a8bf 066 E7 3C DB 18 
3a8c3 067 18 00 00 00 
3a8c7 068 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3a8cb 069 03 07 0F 1F 
3a8cf 06a 7F 1F 0F 07 
3a8d3 06b 03 01 00 00 
3a8d7 06c 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3a8db 06d 60 70 78 7C 
3a8df 06e 7F 7C 78 70 
3a8e3 06f 60 40 00 00 
3a8e7 070 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3a8eb 071 18 3C 7E 18 
3a8ef 072 18 18 7E 3C 
3a8f3 073 18 00 00 00 
3a8f7 074 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3a8fb 075 66 66 66 66 
3a8ff 076 66 66 66    | 	byte	$66[7]
3a902 077 00 66 66 00 
3a906 078 00 00 00 00 
3a90a 079 00 FE DB DB 
3a90e 07a DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
3a912 07b D8 D8 D8 00 
3a916 07c 00 00 00 3E 
3a91a 07d 63 06 1C 36 
3a91e 07e 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
3a922 07f 30 63 3E 00 
3a926 080 00 00 00 00 
3a92a 081 00 00 00 00 
3a92e 082 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3a932 083 7F 7F 7F 00 
3a936 084 00 00 00 00 
3a93a 085 00 18 3C 7E 
3a93e 086 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3a942 087 3C 18 7E 00 
3a946 088 00 00 00 00 
3a94a 089 00 18 3C 7E 
3a94e 08a 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
3a952 08b 18 18 18 00 
3a956 08c 00 00 00 00 
3a95a 08d 00 18 18 18 
3a95e 08e 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3a962 08f 7E 3C 18 00 
3a966 090 00 00 00 00 
3a96a 091 00 00 00 18 
3a96e 092 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
3a972 093 00 00 00 00 
3a976 094 00 00 00 00 
3a97a 095 00 00 00    | 	byte	$00[11]
3a97d 096 0C 06 7F 06 
3a981 097 0C 00 00 00 
3a985 098 00 00 00 00 
3a989 099 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a98d 09a 00 03 03 03 
3a991 09b 7F 00 00 00 
3a995 09c 00 00 00 00 
3a999 09d 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a99d 09e 14 36 7F 36 
3a9a1 09f 14 00 00 00 
3a9a5 0a0 00 00 00 00 
3a9a9 0a1 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
3a9ad 0a2 1C 1C 3E 3E 
3a9b1 0a3 7F 7F 00 00 
3a9b5 0a4 00 00 00 00 
3a9b9 0a5 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3a9bd 0a6 7F 3E 3E 1C 
3a9c1 0a7 1C 08 00 00 
3a9c5 0a8 00 00 00 00 
3a9c9 0a9 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a9cd 0aa 00 00 00 00 
3a9d1 0ab 00 00 00 00 
3a9d5 0ac 00 00 00 00 
3a9d9 0ad 00 00       | 	byte	$00[14]
3a9db 0ad 18 3C 3C 3C 
3a9df 0ae 18 18 18 00 
3a9e3 0af 18 18 00 00 
3a9e7 0b0 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3a9eb 0b1 66 24 00 00 
3a9ef 0b2 00 00 00 00 
3a9f3 0b3 00 00 00 00 
3a9f7 0b4 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a9fb 0b5 00 36 36 7F 
3a9ff 0b6 36 36 36 7F 
3aa03 0b7 36 36 00 00 
3aa07 0b8 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3aa0b 0b9 3E 63 43 03 
3aa0f 0ba 3E 60 60 61 
3aa13 0bb 63 3E 18 18 
3aa17 0bc 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3aa1b 0bd 00 00 43 63 
3aa1f 0be 30 18 0C 06 
3aa23 0bf 63 61 00 00 
3aa27 0c0 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3aa2b 0c1 1C 36 36 1C 
3aa2f 0c2 6E 3B 33 33 
3aa33 0c3 33 6E 00 00 
3aa37 0c4 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3aa3b 0c5 0C 0C 0C 06 
3aa3f 0c6 00 00 00 00 
3aa43 0c7 00 00 00 00 
3aa47 0c8 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aa4b 0c9 30 18 0C 0C 
3aa4f 0ca 0C 0C 0C 0C 
3aa53 0cb 18 30 00 00 
3aa57 0cc 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
3aa5b 0cd 0C 18 30 30 
3aa5f 0ce 30 30 30 30 
3aa63 0cf 18 0C 00 00 
3aa67 0d0 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
3aa6b 0d1 00 00 00 66 
3aa6f 0d2 3C FF 3C 66 
3aa73 0d3 00 00 00 00 
3aa77 0d4 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
3aa7b 0d5 00 00 00 18 
3aa7f 0d6 18 7E 18 18 
3aa83 0d7 00 00 00 00 
3aa87 0d8 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3aa8b 0d9 00 00 00 00 
3aa8f 0da 00 00 00 00 | 	byte	$00[8]
3aa93 0db 18 18 18 0C 
3aa97 0dc 00 00 00 00 
3aa9b 0dd 00 00 00 00 
3aa9f 0de 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3aaa3 0df 00 00 00 00 
3aaa7 0e0 00 00 00 00 
3aaab 0e1 00 00 00 00 
3aaaf 0e2 00 00 00 00 | 	byte	$00[16]
3aab3 0e3 18 18 00 00 
3aab7 0e4 00 00 00 00 
3aabb 0e5 00 00 40 60 
3aabf 0e6 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3aac3 0e7 03 01 00 00 
3aac7 0e8 00 00 00 00 
3aacb 0e9 1C 36 63 63 
3aacf 0ea 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3aad3 0eb 36 1C 00 00 
3aad7 0ec 00 00 00 00 
3aadb 0ed 18 1C 1E 18 
3aadf 0ee 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3aae3 0ef 18 7E 00 00 
3aae7 0f0 00 00 00 00 
3aaeb 0f1 3E 63 60 30 
3aaef 0f2 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3aaf3 0f3 63 7F 00 00 
3aaf7 0f4 00 00 00 00 
3aafb 0f5 3E 63 60 60 
3aaff 0f6 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3ab03 0f7 63 3E 00 00 
3ab07 0f8 00 00 00 00 
3ab0b 0f9 30 38 3C 36 
3ab0f 0fa 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3ab13 0fb 30 78 00 00 
3ab17 0fc 00 00 00 00 
3ab1b 0fd 7F 03 03 03 
3ab1f 0fe 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3ab23 0ff 63 3E 00 00 
3ab27 100 00 00 00 00 
3ab2b 101 1C 06 03 03 
3ab2f 102 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3ab33 103 63 3E 00 00 
3ab37 104 00 00 00 00 
3ab3b 105 7F 63 60 60 
3ab3f 106 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3ab43 107 0C 0C 00 00 
3ab47 108 00 00 00 00 
3ab4b 109 3E 63 63 63 
3ab4f 10a 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3ab53 10b 63 3E 00 00 
3ab57 10c 00 00 00 00 
3ab5b 10d 3E 63 63 63 
3ab5f 10e 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3ab63 10f 30 1E 00 00 
3ab67 110 00 00 00 00 
3ab6b 111 00 00 00 18 
3ab6f 112 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3ab73 113 18 18 00 00 
3ab77 114 00 00 00 00 
3ab7b 115 00 00 00 18 
3ab7f 116 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3ab83 117 18 18 0C 00 
3ab87 118 00 00 00 00 
3ab8b 119 00 60 30 18 
3ab8f 11a 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3ab93 11b 30 60 00 00 
3ab97 11c 00 00 00 00 
3ab9b 11d 00 00 00 7E 
3ab9f 11e 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3aba3 11f 00 00 00 00 
3aba7 120 00 00 00 00 
3abab 121 00          | 	byte	$00[9]
3abac 122 06 0C 18 30 
3abb0 123 60 30 18 0C 
3abb4 124 06 00 00 00 
3abb8 125 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
3abbc 126 63 63 30 18 
3abc0 127 18 18 00 18 
3abc4 128 18 00 00 00 
3abc8 129 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3abcc 12a 3E 63 63 7B 
3abd0 12b 7B 7B 3B 03 
3abd4 12c 3E 00 00 00 
3abd8 12d 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3abdc 12e 1C 36 63 63 
3abe0 12f 7F 63 63 63 
3abe4 130 63 00 00 00 
3abe8 131 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3abec 132 66 66 66 3E 
3abf0 133 66 66 66 66 
3abf4 134 3F 00 00 00 
3abf8 135 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3abfc 136 66 43 03 03 
3ac00 137 03 03 43 66 
3ac04 138 3C 00 00 00 
3ac08 139 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
3ac0c 13a 36 66 66 66 
3ac10 13b 66 66 66 36 
3ac14 13c 1F 00 00 00 
3ac18 13d 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
3ac1c 13e 66 46 16 1E 
3ac20 13f 16 06 46 66 
3ac24 140 7F 00 00 00 
3ac28 141 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
3ac2c 142 66 46 16 1E 
3ac30 143 16 06 06 06 
3ac34 144 0F 00 00 00 
3ac38 145 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
3ac3c 146 66 43 03 03 
3ac40 147 7B 63 63 66 
3ac44 148 5C 00 00 00 
3ac48 149 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
3ac4c 14a 63 63 63 7F 
3ac50 14b 63 63 63 63 
3ac54 14c 63 00 00 00 
3ac58 14d 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
3ac5c 14e 18 18 18 18 
3ac60 14f 18 18 18 18 | 	byte	$18[8]
3ac64 150 3C 00 00 00 
3ac68 151 00 00 00 78 
3ac6c 152 30 30 30 30 
3ac70 153 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
3ac74 154 1E 00 00 00 
3ac78 155 00 00 00 67 
3ac7c 156 66 66 36 1E 
3ac80 157 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
3ac84 158 67 00 00 00 
3ac88 159 00 00 00 0F 
3ac8c 15a 06 06 06 06 
3ac90 15b 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3ac94 15c 7F 00 00 00 
3ac98 15d 00 00 00 63 
3ac9c 15e 77 7F 7F 6B 
3aca0 15f 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3aca4 160 63 00 00 00 
3aca8 161 00 00 00 63 
3acac 162 67 6F 7F 7B 
3acb0 163 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3acb4 164 63 00 00 00 
3acb8 165 00 00 00 3E 
3acbc 166 63 63 63 63 
3acc0 167 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3acc4 168 3E 00 00 00 
3acc8 169 00 00 00 3F 
3accc 16a 66 66 66 3E 
3acd0 16b 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3acd4 16c 0F 00 00 00 
3acd8 16d 00 00 00 3E 
3acdc 16e 63 63 63 63 
3ace0 16f 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
3ace4 170 3E 30 70 00 
3ace8 171 00 00 00 3F 
3acec 172 66 66 66 3E 
3acf0 173 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
3acf4 174 67 00 00 00 
3acf8 175 00 00 00 3E 
3acfc 176 63 63 06 1C 
3ad00 177 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3ad04 178 3E 00 00 00 
3ad08 179 00 00 00 7E 
3ad0c 17a 7E 5A 18 18 
3ad10 17b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3ad14 17c 3C 00 00 00 
3ad18 17d 00 00 00 63 
3ad1c 17e 63 63 63 63 
3ad20 17f 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3ad24 180 3E 00 00 00 
3ad28 181 00 00 00 63 
3ad2c 182 63 63 63 63 
3ad30 183 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
3ad34 184 08 00 00 00 
3ad38 185 00 00 00 63 
3ad3c 186 63 63 63 6B 
3ad40 187 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
3ad44 188 36 00 00 00 
3ad48 189 00 00 00 63 
3ad4c 18a 63 36 3E 1C 
3ad50 18b 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
3ad54 18c 63 00 00 00 
3ad58 18d 00 00 00 66 
3ad5c 18e 66 66 66 3C 
3ad60 18f 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
3ad64 190 3C 00 00 00 
3ad68 191 00 00 00 7F 
3ad6c 192 63 61 30 18 
3ad70 193 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3ad74 194 7F 00 00 00 
3ad78 195 00 00 00 3C 
3ad7c 196 0C 0C 0C 0C 
3ad80 197 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3ad84 198 3C 00 00 00 
3ad88 199 00 00 00 00 
3ad8c 19a 01 03 07 0E 
3ad90 19b 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3ad94 19c 40 00 00 00 
3ad98 19d 00 00 00 3C 
3ad9c 19e 30 30 30 30 
3ada0 19f 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3ada4 1a0 3C 00 00 00 
3ada8 1a1 1C 36 00 00 
3adac 1a2 00 00 00 00 
3adb0 1a3 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3adb4 1a4 00 00 00 00 
3adb8 1a5 00 00 00 00 
3adbc 1a6 00 00 00 00 
3adc0 1a7 00 00 00 00 
3adc4 1a8 00          | 	byte	$00[17]
3adc5 1a8 FF 00 00 0C 
3adc9 1a9 18 00 00 00 
3adcd 1aa 00 00 00 00 
3add1 1ab 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3add5 1ac 00 00 00 00 
3add9 1ad 00 00 00 00 
3addd 1ae 00          | 	byte	$00[9]
3adde 1ae 1E 30 3E 33 
3ade2 1af 33 33 6E 00 
3ade6 1b0 00 00 00 00 
3adea 1b1 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3adee 1b2 1E 36 66 66 
3adf2 1b3 66 66 3E 00 
3adf6 1b4 00 00 00 00 
3adfa 1b5 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3adfe 1b6 3E 63 03 03 
3ae02 1b7 03 63 3E 00 
3ae06 1b8 00 00 00 00 
3ae0a 1b9 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3ae0e 1ba 3C 36 33 33 
3ae12 1bb 33 33 6E 00 
3ae16 1bc 00 00 00 00 
3ae1a 1bd 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ae1e 1be 3E 63 7F 03 
3ae22 1bf 03 63 3E 00 
3ae26 1c0 00 00 00 00 
3ae2a 1c1 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3ae2e 1c2 0C 1E 0C 0C 
3ae32 1c3 0C 0C 1E 00 
3ae36 1c4 00 00 00 00 
3ae3a 1c5 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ae3e 1c6 6E 33 33 33 
3ae42 1c7 33 33 3E 30 
3ae46 1c8 33 1E 00 00 
3ae4a 1c9 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3ae4e 1ca 36 6E 66 66 
3ae52 1cb 66 66 67 00 
3ae56 1cc 00 00 00 00 
3ae5a 1cd 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3ae5e 1ce 1C 18 18 18 
3ae62 1cf 18 18 3C 00 
3ae66 1d0 00 00 00 00 
3ae6a 1d1 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3ae6e 1d2 70 60 60 60 
3ae72 1d3 60 60 60 66 
3ae76 1d4 66 3C 00 00 
3ae7a 1d5 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3ae7e 1d6 66 36 1E 1E 
3ae82 1d7 36 66 67 00 
3ae86 1d8 00 00 00 00 
3ae8a 1d9 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3ae8e 1da 18 18 18 18 
3ae92 1db 18 18       | 	byte	$18[6]
3ae94 1dc 3C 00 00 00 
3ae98 1dd 00 00 00 00 
3ae9c 1de 00 00 37 7F 
3aea0 1df 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
3aea4 1e0 63 00 00 00 
3aea8 1e1 00 00 00 00 
3aeac 1e2 00 00 3B 66 
3aeb0 1e3 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3aeb4 1e4 66 00 00 00 
3aeb8 1e5 00 00 00 00 
3aebc 1e6 00 00 3E 63 
3aec0 1e7 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3aec4 1e8 3E 00 00 00 
3aec8 1e9 00 00 00 00 
3aecc 1ea 00 00 3B 66 
3aed0 1eb 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3aed4 1ec 3E 06 06 0F 
3aed8 1ed 00 00 00 00 
3aedc 1ee 00 00 6E 33 
3aee0 1ef 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
3aee4 1f0 3E 30 30 78 
3aee8 1f1 00 00 00 00 
3aeec 1f2 00 00 3B 6E 
3aef0 1f3 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
3aef4 1f4 0F 00 00 00 
3aef8 1f5 00 00 00 00 
3aefc 1f6 00 00 3E 63 
3af00 1f7 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
3af04 1f8 3E 00 00 00 
3af08 1f9 00 00 00 08 
3af0c 1fa 0C 0C 3F 0C 
3af10 1fb 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3af14 1fc 38 00 00 00 
3af18 1fd 00 00 00 00 
3af1c 1fe 00 00 33 33 
3af20 1ff 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
3af24 200 6E 00 00 00 
3af28 201 00 00 00 00 
3af2c 202 00 00 63 63 
3af30 203 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
3af34 204 1C 00 00 00 
3af38 205 00 00 00 00 
3af3c 206 00 00 63 63 
3af40 207 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
3af44 208 36 00 00 00 
3af48 209 00 00 00 00 
3af4c 20a 00 00 63 36 
3af50 20b 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
3af54 20c 63 00 00 00 
3af58 20d 00 00 00 00 
3af5c 20e 00 00 63 63 
3af60 20f 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
3af64 210 7E 60 30 1F 
3af68 211 00 00 00 00 
3af6c 212 00 00 7F 33 
3af70 213 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
3af74 214 7F 00 00 00 
3af78 215 00 00 00 70 
3af7c 216 18 18 18 0E 
3af80 217 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
3af84 218 70 00 00 00 
3af88 219 00 00 00 18 
3af8c 21a 18 18 18 18 
3af90 21b 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
3af94 21c 18 00 00 00 
3af98 21d 00 00 00 0E 
3af9c 21e 18 18 18 70 
3afa0 21f 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
3afa4 220 0E 00 00 00 
3afa8 221 6E 3B 00 00 
3afac 222 00 00 00 00 
3afb0 223 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3afb4 224 00 00 00 00 
3afb8 225 00 00 00 00 
3afbc 226 00 00       | 	byte	$00[10]
3afbe 226 08 1C 36 63 
3afc2 227 63 63 7F 00 
3afc6 228 00 00 00 00 
3afca 229 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3afce 22a 03 03 03 03 
3afd2 22b 43 66 3C 18 
3afd6 22c 30 1E 00 00 
3afda 22d 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3afde 22e 33 33 33 33 
3afe2 22f 33 33       | 	byte	$33[6]
3afe4 230 6E 00 00 00 
3afe8 231 00 00 60 30 
3afec 232 18 00 3E 63 
3aff0 233 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
3aff4 234 3E 00 00 00 
3aff8 235 00 00 08 1C 
3affc 236 36 00 1E 30 
3b000 237 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
3b004 238 6E 00 00 00 
3b008 239 00 00 00 00 
3b00c 23a 33 00 1E 30 
3b010 23b 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
3b014 23c 6E 00 00 00 
3b018 23d 00 00 1C 36 
3b01c 23e 1C 00 33 33 
3b020 23f 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
3b024 240 6E 00 00 00 
3b028 241 00 00 60 30 
3b02c 242 18 00 3E 63 
3b030 243 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
3b034 244 3E 00 00 00 
3b038 245 00 00 00 00 
3b03c 246 00 00 3E 63 
3b040 247 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
3b044 248 3E 18 30 1E 
3b048 249 00 00 00 1C 
3b04c 24a 58 78 38 18 
3b050 24b 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
3b054 24c 3C 00 00 00 
3b058 24d 00 00 00 00 
3b05c 24e 63 00 3E 63 
3b060 24f 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
3b064 250 3E 00 00 00 
3b068 251 66 33 00 3E 
3b06c 252 63 63 63 63 
3b070 253 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3b074 254 3E 00 00 00 
3b078 255 00 00 CC 66 
3b07c 256 33 00 3E 63 
3b080 257 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
3b084 258 3E 00 00 00 
3b088 259 00 00 18 3C 
3b08c 25a 66 00 1C 18 
3b090 25b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
3b094 25c 3C 00 00 00 
3b098 25d 30 18 00 7F 
3b09c 25e 63 61 30 18 
3b0a0 25f 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3b0a4 260 7F 00 00 00 
3b0a8 261 00 63 00 08 
3b0ac 262 1C 36 63 63 
3b0b0 263 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
3b0b4 264 63 00 00 00 
3b0b8 265 30 18 00 3C 
3b0bc 266 66 43 03 03 
3b0c0 267 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
3b0c4 268 3C 00 00 00 
3b0c8 269 30 18 00 7F 
3b0cc 26a 66 46 16 1E 
3b0d0 26b 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
3b0d4 26c 7F 00 00 00 
3b0d8 26d 0C 06 00 0F 
3b0dc 26e 06 06 06 06 
3b0e0 26f 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3b0e4 270 7F 00 00 00 
3b0e8 271 30 18 00 1C 
3b0ec 272 18 18 18 18 
3b0f0 273 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
3b0f4 274 3C 00 00 00 
3b0f8 275 00 00 08 1C 
3b0fc 276 36 00 3E 63 
3b100 277 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
3b104 278 3E 00 00 00 
3b108 279 00 00 00 00 
3b10c 27a 63 00 3E 63 
3b110 27b 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
3b114 27c 3E 00 00 00 
3b118 27d 00 00 00 6F 
3b11c 27e 46 26 06 06 
3b120 27f 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
3b124 280 7F 00 00 00 
3b128 281 00 00 00 6E 
3b12c 282 4C 2C 0C 0C 
3b130 283 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
3b134 284 1E 00 00 00 
3b138 285 30 18 00 3E 
3b13c 286 63 63 06 1C 
3b140 287 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3b144 288 3E 00 00 00 
3b148 289 00 00 60 30 
3b14c 28a 18 00 3E 63 
3b150 28b 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3b154 28c 3E 00 00 00 
3b158 28d 00 63 00 3E 
3b15c 28e 63 63 63 63 
3b160 28f 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3b164 290 3E 00 00 00 
3b168 291 00 63 00 63 
3b16c 292 63 63 63 63 
3b170 293 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3b174 294 3E 00 00 00 
3b178 295 6C 38 00 7E 
3b17c 296 7E 5A 18 18 
3b180 297 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3b184 298 3C 00 00 00 
3b188 299 00 00 60 48 
3b18c 29a 2C 0C 3F 0C 
3b190 29b 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3b194 29c 38 00 00 00 
3b198 29d 00 00 00 0F 
3b19c 29e 26 36 1E 0E 
3b1a0 29f 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3b1a4 2a0 7F 00 00 00 
3b1a8 2a1 00 00 00 00 
3b1ac 2a2 00 63 36 1C 
3b1b0 2a3 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3b1b4 2a4 00 00 00 00 
3b1b8 2a5 00 00       | 	byte	$00[6]
3b1ba 2a5 36 1C 08 00 
3b1be 2a6 3E 63 03 03 
3b1c2 2a7 03 63 3E 00 
3b1c6 2a8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3b1ca 2a9 30 18 0C 00 
3b1ce 2aa 1E 30 3E 33 
3b1d2 2ab 33 33 6E 00 
3b1d6 2ac 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3b1da 2ad 60 30 18 00 
3b1de 2ae 1C 18 18 18 
3b1e2 2af 18 18 3C 00 
3b1e6 2b0 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3b1ea 2b1 60 30 18 00 
3b1ee 2b2 3E 63 63 63 
3b1f2 2b3 63 63 3E 00 
3b1f6 2b4 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3b1fa 2b5 30 18 0C 00 
3b1fe 2b6 33 33 33 33 
3b202 2b7 33 33 6E 00 
3b206 2b8 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3b20a 2b9 00 08 1C 36 
3b20e 2ba 63 63 7F 63 
3b212 2bb 63 63 63 18 
3b216 2bc 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3b21a 2bd 00 00 00 00 
3b21e 2be 1E 30 3E 33 
3b222 2bf 33 33 6E 18 
3b226 2c0 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3b22a 2c1 00 7F 63 61 
3b22e 2c2 30 18 0C 06 
3b232 2c3 43 63 7F 00 
3b236 2c4 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3b23a 2c5 36 1C 08 00 
3b23e 2c6 7F 33 18 0C 
3b242 2c7 06 63 7F 00 
3b246 2c8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3b24a 2c9 00 7F 66 46 
3b24e 2ca 16 1E 16 06 
3b252 2cb 46 66 7F 18 
3b256 2cc 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3b25a 2cd 00 00 00 00 
3b25e 2ce 3E 63 7F 03 
3b262 2cf 03 63 3E 18 
3b266 2d0 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3b26a 2d1 00 3C 66 03 
3b26e 2d2 1F 03 0F 03 
3b272 2d3 03 66 3C 00 
3b276 2d4 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3b27a 2d5 60 30 18 00 
3b27e 2d6 7F 33 18 0C 
3b282 2d7 06 63 7F 00 
3b286 2d8 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3b28a 2d9 00 3C 66 43 
3b28e 2da 03 03 03 03 
3b292 2db 43 66 3C 00 
3b296 2dc 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3b29a 2dd 00 00 00 00 
3b29e 2de 3E 63 06 1C 
3b2a2 2df 30 63 3E 18 
3b2a6 2e0 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3b2aa 2e1 00 00 00 00 
3b2ae 2e2 00 00       | 	byte	$00[6]
3b2b0 2e3 6C 36 1B 36 
3b2b4 2e4 6C 00 00 00 
3b2b8 2e5 00 00 00 00 
3b2bc 2e6 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b2c0 2e7 1B 36 6C 36 
3b2c4 2e8 1B 00 00 00 
3b2c8 2e9 88 22 88 22 
3b2cc 2ea 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
3b2d0 2eb 88 22 88 22 
3b2d4 2ec 88 22 88 22 
3b2d8 2ed AA 55 AA 55 
3b2dc 2ee AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
3b2e0 2ef AA 55 AA 55 
3b2e4 2f0 AA 55 AA 55 
3b2e8 2f1 BB EE BB EE 
3b2ec 2f2 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
3b2f0 2f3 BB EE BB EE 
3b2f4 2f4 BB EE BB EE 
3b2f8 2f5 18 18 18 18 
3b2fc 2f6 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
3b300 2f7 18 18 18 18 
3b304 2f8 18 18 18 18 
3b308 2f9 18 18 18 18 
3b30c 2fa 18 18 18    | 	byte	$18[15]
3b30f 2fa 1F 18 18 18 
3b313 2fb 18 18 18 18 
3b317 2fc 18 30 18 00 
3b31b 2fd 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3b31f 2fe 63 7F 63 63 
3b323 2ff 63 63 00 00 
3b327 300 00 1C 36 00 
3b32b 301 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3b32f 302 63 7F 63 63 
3b333 303 63 63 00 00 
3b337 304 00 36 1C 00 
3b33b 305 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3b33f 306 1E 16 06 46 
3b343 307 66 7F 00 00 
3b347 308 00 00 00 00 
3b34b 309 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3b34f 30a 1C 30 60 63 
3b353 30b 63 3E 18 30 
3b357 30c 1E 6C 6C 6C 
3b35b 30d 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3b35f 30e 6F 6C 6C 6C 
3b363 30f 6C 6C 6C 6C 
3b367 310 6C 6C 6C 6C 
3b36b 311 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b36f 312 6C 6C 6C 6C 
3b373 313 6C 6C 6C 6C 
3b377 314 6C          | 	byte	$6c[9]
3b378 315 00 00 00 00 
3b37c 316 00          | 	byte	$00[5]
3b37d 316 7F 60 6F 6C 
3b381 317 6C 6C 6C 6C 
3b385 318 6C 6C 6C 6C 
3b389 319 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b38d 31a 6F 60 7F 00 
3b391 31b 00 00 00 00 
3b395 31c 00 00 00 18 
3b399 31d 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3b39d 31e 61 30 18 0C 
3b3a1 31f 06 43 63 7F 
3b3a5 320 00 00 00 00 
3b3a9 321 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3b3ad 322 00 7F 33 18 
3b3b1 323 0C 06 63 7F 
3b3b5 324 00 00 00 00 
3b3b9 325 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3b3bd 326 00 00 1F 18 
3b3c1 327 18 18 18 18 
3b3c5 328 18 18 18 18 
3b3c9 329 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b3cd 32a 18 18 F8 00 
3b3d1 32b 00 00 00 00 
3b3d5 32c 00 00 00 18 
3b3d9 32d 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3b3dd 32e 18 18 FF 00 
3b3e1 32f 00 00 00 00 
3b3e5 330 00 00 00 00 
3b3e9 331 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b3ed 332 00 00 FF 18 
3b3f1 333 18 18 18 18 
3b3f5 334 18 18 18 18 
3b3f9 335 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b3fd 336 18 18 F8 18 
3b401 337 18 18 18 18 
3b405 338 18 18 18 00 
3b409 339 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3b40d 33a 00 00 FF 00 
3b411 33b 00 00 00 00 
3b415 33c 00 00 00 18 
3b419 33d 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3b41d 33e 18 18 FF 18 
3b421 33f 18 18 18 18 
3b425 340 18 18 18 63 
3b429 341 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3b42d 342 36 63 63 7F 
3b431 343 63 63 63 63 
3b435 344 00 00 00 00 
3b439 345 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3b43d 346 00 1E 30 3E 
3b441 347 33 33 33 6E 
3b445 348 00 00 00 6C 
3b449 349 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3b44d 34a EC 0C FC 00 
3b451 34b 00 00 00 00 
3b455 34c 00 00 00 00 
3b459 34d 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b45d 34e FC 0C EC 6C 
3b461 34f 6C 6C 6C 6C 
3b465 350 6C 6C 6C 6C 
3b469 351 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b46d 352 EF 00 FF 00 
3b471 353 00 00 00 00 
3b475 354 00 00 00 00 
3b479 355 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b47d 356 FF 00 EF 6C 
3b481 357 6C 6C 6C 6C 
3b485 358 6C 6C 6C 6C 
3b489 359 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b48d 35a EC 0C EC 6C 
3b491 35b 6C 6C 6C 6C 
3b495 35c 6C 6C 6C 00 
3b499 35d 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3b49d 35e FF 00 FF 00 
3b4a1 35f 00 00 00 00 
3b4a5 360 00 00 00 6C 
3b4a9 361 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3b4ad 362 EF 00 EF 6C 
3b4b1 363 6C 6C 6C 6C 
3b4b5 364 6C 6C 6C 00 
3b4b9 365 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3b4bd 366 63 3E 63 63 
3b4c1 367 63 63 3E 63 
3b4c5 368 00 00 00 00 
3b4c9 369 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3b4cd 36a 30 3C 36 33 
3b4d1 36b 33 33 33 6E 
3b4d5 36c 00 00 00 00 
3b4d9 36d 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3b4dd 36e 66 66 6F 66 
3b4e1 36f 66 66 36 1F 
3b4e5 370 00 00 00 36 
3b4e9 371 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3b4ed 372 66 66 66 66 
3b4f1 373 66 66       | 	byte	$66[6]
3b4f3 373 36 1F 00 00 
3b4f7 374 00 00 63 00 
3b4fb 375 7F 66 46 16 
3b4ff 376 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3b503 377 66 7F 00 00 
3b507 378 00 6C 38 00 
3b50b 379 38 30 30 3C 
3b50f 37a 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
3b513 37b 33 6E 00 00 
3b517 37c 00 36 1C 00 
3b51b 37d 63 67 6F 7F 
3b51f 37e 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
3b523 37f 63 63 00 00 
3b527 380 00 30 18 00 
3b52b 381 3C 18 18 18 
3b52f 382 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3b533 383 18 3C 00 00 
3b537 384 00 3C 66 00 
3b53b 385 3C 18 18 18 
3b53f 386 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3b543 387 18 3C 00 00 
3b547 388 00 00 00 36 
3b54b 389 1C 08 00 3E 
3b54f 38a 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3b553 38b 63 3E 00 00 
3b557 38c 00 18 18 18 
3b55b 38d 18 18 18 18 
3b55f 38e 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3b563 38f 00 00 00 00 
3b567 390 00 00 00 00 
3b56b 391 00 00 00 00 | 	byte	$00[12]
3b56f 392 F8 18 18 18 
3b573 393 18 18 18 18 
3b577 394 18 FF FF FF 
3b57b 395 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3b57f 396 FF FF FF FF 
3b583 397 FF FF FF FF 
3b587 398 FF          | 	byte	$ff[9]
3b588 399 00 00 00 00 
3b58c 39a 00 00 00    | 	byte	$00[7]
3b58f 39a FF FF FF FF 
3b593 39b FF FF FF FF 
3b597 39c FF          | 	byte	$ff[9]
3b598 39d 00 00 00 7E 
3b59c 39e 7E 5A 18 18 
3b5a0 39f 18 18 18 18 
3b5a4 3a0 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
3b5a8 3a1 1C 36 1C 63 
3b5ac 3a2 63 63 63 63 
3b5b0 3a3 63 63 63 63 
3b5b4 3a4 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b5b8 3a5 FF FF FF FF 
3b5bc 3a6 FF FF FF    | 	byte	$ff[7]
3b5bf 3a6 00 00 00 00 
3b5c3 3a7 00 00 00 00 
3b5c7 3a8 00          | 	byte	$00[9]
3b5c8 3a9 30 18 00 3E 
3b5cc 3aa 63 63 63 63 
3b5d0 3ab 63 63 63 63 
3b5d4 3ac 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b5d8 3ad 00 00 00 1E 
3b5dc 3ae 33 33 33 1B 
3b5e0 3af 33 63 63 63 
3b5e4 3b0 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
3b5e8 3b1 1C 36 00 3E 
3b5ec 3b2 63 63 63 63 
3b5f0 3b3 63 63 63 63 
3b5f4 3b4 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b5f8 3b5 30 18 00 63 
3b5fc 3b6 67 6F 7F 7B 
3b600 3b7 73 63 63 63 
3b604 3b8 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3b608 3b9 00 00 60 30 
3b60c 3ba 18 00 3B 66 
3b610 3bb 66 66 66 66 
3b614 3bc 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3b618 3bd 00 00 36 1C 
3b61c 3be 08 00 3B 66 
3b620 3bf 66 66 66 66 
3b624 3c0 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3b628 3c1 36 1C 00 3E 
3b62c 3c2 63 63 06 1C 
3b630 3c3 30 60 63 63 
3b634 3c4 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3b638 3c5 00 00 36 1C 
3b63c 3c6 08 00 3E 63 
3b640 3c7 06 1C 30 63 
3b644 3c8 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3b648 3c9 30 18 00 3F 
3b64c 3ca 66 66 66 3E 
3b650 3cb 36 66 66 66 
3b654 3cc 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3b658 3cd 30 18 00 63 
3b65c 3ce 63 63 63 63 
3b660 3cf 63 63 63 63 
3b664 3d0 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b668 3d1 00 00 60 30 
3b66c 3d2 18 00 3B 6E 
3b670 3d3 66 06 06 06 
3b674 3d4 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3b678 3d5 66 33 00 63 
3b67c 3d6 63 63 63 63 
3b680 3d7 63 63 63 63 
3b684 3d8 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b688 3d9 00 00 60 30 
3b68c 3da 18 00 63 63 
3b690 3db 63 63 63 63 
3b694 3dc 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
3b698 3dd 30 18 00 66 
3b69c 3de 66 66 66 3C 
3b6a0 3df 18 18 18 18 
3b6a4 3e0 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
3b6a8 3e1 00 00 00 08 
3b6ac 3e2 0C 0C 3F 0C 
3b6b0 3e3 0C 0C 0C 6C 
3b6b4 3e4 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
3b6b8 3e5 30 18 00 00 
3b6bc 3e6 00 00 00 00 
3b6c0 3e7 00 00 00 00 
3b6c4 3e8 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b6c8 3e9 00 00 00 00 
3b6cc 3ea 00 00 00 00 | 	byte	$00[8]
3b6d0 3eb 7F 00 00 00 
3b6d4 3ec 00 00 00 00 
3b6d8 3ed 66 33 00 00 
3b6dc 3ee 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3b6e0 3ef 00 00 00 00 
3b6e4 3f0 00 00 00 00 
3b6e8 3f1 00 00 00 00 
3b6ec 3f2 00 00 00 00 
3b6f0 3f3 00 00 00 00 
3b6f4 3f4 00          | 	byte	$00[21]
3b6f5 3f4 0C 06 3C 36 
3b6f9 3f5 1C 00 00 00 
3b6fd 3f6 00 00 00 00 
3b701 3f7 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b705 3f8 00 00 00 63 
3b709 3f9 3E 00 00 00 
3b70d 3fa 00 00 00 00 
3b711 3fb 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b715 3fc 00 00 00 00 
3b719 3fd 3E 63 06 1C 
3b71d 3fe 36 63 63 36 
3b721 3ff 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
3b725 400 00 00 00 00 
3b729 401 00 00 00 00 | 	byte	$00[8]
3b72d 402 18 00 7E 00 
3b731 403 18 00 00 00 
3b735 404 00 00 00 00 
3b739 405 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b73d 406 00 00 00 00 
3b741 407 00 00 00 00 | 	byte	$00[8]
3b745 408 18 30 1E 00 
3b749 409 00 00 1C 36 
3b74d 40a 36 1C 00 00 
3b751 40b 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
3b755 40c 00 00 00 00 
3b759 40d 63 00 00 00 
3b75d 40e 00 00 00 00 
3b761 40f 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b765 410 00 00 00 18 
3b769 411 18 00 00 00 
3b76d 412 00 00 00 00 
3b771 413 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b775 414 00 00 00 00 
3b779 415 00          | 	byte	$00[5]
3b77a 415 CC 66 33 00 
3b77e 416 33 33 33 33 
3b782 417 33 33 6E 00 
3b786 418 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3b78a 419 00 3F 66 66 
3b78e 41a 66 3E 36 66 
3b792 41b 66 66 6F 00 
3b796 41c 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3b79a 41d 36 1C 08 00 
3b79e 41e 3B 6E 66 06 
3b7a2 41f 06 06 0F 00 
3b7a6 420 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3b7aa 421 00 00 00 7E 
3b7ae 422 7E 7E 7E 7E 
3b7b2 423 7E 7E 00 00 
3b7b6 424 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3b7ba 425 00 00 00 00 
3b7be 426 00 00 00 00 
3b7c2 427 00 00 00 00 
3b7c6 428 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b7c8 429             | 'vga_font       file "vgafont.def"
3b7c8 429 00 00 00 00 
      ...             
3b7f8 435 00 00 00 00 
3b7fc 436 00 00 00    | st_font        file "st4font.def"
3b7ff 436 FF FF 00 00 
3b803 437 00 00 00 00 
3b807 438 00 18 18 18 
3b80b 439 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b80f 43a 18 18 18 18 
3b813 43b 18 18 18 18 
3b817 43c 18          | 	byte	$18[9]
3b818 43d 00 00 00 00 
3b81c 43e 00 00 00    | 	byte	$00[7]
3b81f 43e FF FF 18 18 
3b823 43f 18 18 18 18 
3b827 440 18 18 18 18 
3b82b 441 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b82f 442 FF FF 00 00 
3b833 443 00 00 00 00 
3b837 444 00 18 18 18 
3b83b 445 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b83f 446 1F 1F 18 18 
3b843 447 18 18 18 18 
3b847 448 18 18 18 18 
3b84b 449 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b84f 44a F8 F8 18 18 
3b853 44b 18 18 18 18 
3b857 44c 18 00 00 00 
3b85b 44d 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3b85f 44e 1F 1F 18 18 
3b863 44f 18 18 18 18 
3b867 450 18 00 00 00 
3b86b 451 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3b86f 452 F8 F8 18 18 
3b873 453 18 18 18 18 
3b877 454 18 18 18 18 
3b87b 455 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b87f 456 1F 1F 00 00 
3b883 457 00 00 00 00 
3b887 458 00 18 18 18 
3b88b 459 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b88f 45a F8 F8 00 00 
3b893 45b 00 00 00 00 
3b897 45c 00 18 18 18 
3b89b 45d 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b89f 45e FF FF 18 18 
3b8a3 45f 18 18 18 18 
3b8a7 460 18 00 00 18 
3b8ab 461 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3b8af 462 66 7E 7E 66 
3b8b3 463 66 66 66 30 
3b8b7 464 18 00 00 7E 
3b8bb 465 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3b8bf 466 3E 06 06 06 
3b8c3 467 06 7E 7E 18 
3b8c7 468 0C 30 18 3C 
3b8cb 469 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3b8cf 46a 06 06 06 66 
3b8d3 46b 66 7E 3C 00 
3b8d7 46c 00 30 18 66 
3b8db 46d 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3b8df 46e 7E 7E 76 76 
3b8e3 46f 66 66 66 00 
3b8e7 470 00 30 18 7C 
3b8eb 471 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3b8ef 472 1C 38 70 60 
3b8f3 473 60 7E 3E 00 
3b8f7 474 00 30 18 7E 
3b8fb 475 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3b8ff 476 18 0C 0C 06 
3b903 477 06 7E 7E 00 
3b907 478 00 18 18 00 
3b90b 479 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3b90f 47a 18 18 0C 0C 
3b913 47b 06 7E 7E 00 
3b917 47c 00 30 18 3C 
3b91b 47d 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3b91f 47e 66 66 66 66 
3b923 47f 66          | 	byte	$66[5]
3b924 480 7E 3C 00 00 
3b928 481 00 00 06 06 
3b92c 482 06 06 16 1E 
3b930 483 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
3b934 484 7E 7E 00 00 
3b938 485 00 00 00 00 
3b93c 486 00 3C 7C 60 
3b940 487 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3b944 488 7E 7C 30 18 
3b948 489 00 00 00 00 
3b94c 48a 00 3C 7E 66 
3b950 48b 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
3b954 48c 7E 7C 18 0C 
3b958 48d 00 00 30 18 
3b95c 48e 00 3C 3E 06 
3b960 48f 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3b964 490 7E 7C 00 00 
3b968 491 00 00 30 18 
3b96c 492 00 3E 7E 66 
3b970 493 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3b974 494 66 66 00 00 
3b978 495 00 00 30 18 
3b97c 496 00 7C 7E 06 
3b980 497 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3b984 498 7E 3E 00 00 
3b988 499 00 00 30 18 
3b98c 49a 00 7E 7E 30 
3b990 49b 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3b994 49c 7E 7E 00 00 
3b998 49d 00 00 18 18 
3b99c 49e 00 7E 7E 30 
3b9a0 49f 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3b9a4 4a0 7E 7E 00 00 
3b9a8 4a1 00 00 30 18 
3b9ac 4a2 00 3C 7E 66 
3b9b0 4a3 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3b9b4 4a4 7E 3C 00 00 
3b9b8 4a5 00 00 1C 1C 
3b9bc 4a6 18 18 38 3C 
3b9c0 4a7 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3b9c4 4a8 3C 3C 00 00 
3b9c8 4a9 00 00 00 00 
3b9cc 4aa 00 00 00 00 
3b9d0 4ab 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b9d4 4ac 00 00 00 00 
3b9d8 4ad 00 00       | 	byte	$00[6]
3b9da 4ad 18 18 18 18 
3b9de 4ae 18 18 18 18 | 	byte	$18[8]
3b9e2 4af 00 00 18 18 
3b9e6 4b0 00 00 00 00 
3b9ea 4b1 66 66 66 66 
3b9ee 4b2 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3b9f2 4b3 00 00 00 00 
3b9f6 4b4 00 00 00 00 
3b9fa 4b5 00          | 	byte	$00[9]
3b9fb 4b5 66 66 FF FF 
3b9ff 4b6 66 66 FF FF 
3ba03 4b7 66 66 00 00 
3ba07 4b8 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3ba0b 4b9 7C 7E 06 06 
3ba0f 4ba 3E 7C 60 60 
3ba13 4bb 7E 3E 18 18 
3ba17 4bc 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3ba1b 4bd 66 30 30 18 
3ba1f 4be 18 0C 0C 66 
3ba23 4bf 66 00 00 00 
3ba27 4c0 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3ba2b 4c1 66 66 3C 1C 
3ba2f 4c2 1C FC FE 66 
3ba33 4c3 66 FE FC 00 
3ba37 4c4 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3ba3b 4c5 18 18 18 18 
3ba3f 4c6 00 00 00 00 
3ba43 4c7 00 00 00 00 
3ba47 4c8 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3ba4b 4c9 18 1C 0C 0C 
3ba4f 4ca 0C 0C 0C 0C 
3ba53 4cb 1C 18 30 00 
3ba57 4cc 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3ba5b 4cd 18 38 30 30 
3ba5f 4ce 30 30 30 30 
3ba63 4cf 38 18 0C 00 
3ba67 4d0 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3ba6b 4d1 66 66 3C 3C 
3ba6f 4d2 FF FF 3C 3C 
3ba73 4d3 66 66 00 00 
3ba77 4d4 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3ba7b 4d5 00 18 18 18 
3ba7f 4d6 7E 7E 18 18 
3ba83 4d7 18 00 00 00 
3ba87 4d8 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3ba8b 4d9 00 00 00 00 
3ba8f 4da 00 00       | 	byte	$00[6]
3ba91 4db 18 18 18 18 
3ba95 4dc 18          | 	byte	$18[5]
3ba96 4dc 0C 04 00 00 
3ba9a 4dd 00 00 00 00 
3ba9e 4de 7E 7E 00 00 
3baa2 4df 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3baa6 4e0 00 00 00 00 
3baaa 4e1 00 00 00 00 
3baae 4e2 00 00 00 00 
3bab2 4e3 00          | 	byte	$00[13]
3bab3 4e3 18 18 18 00 
3bab7 4e4 00 00 00 60 
3babb 4e5 60 60 30 30 
3babf 4e6 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3bac3 4e7 06 06 06 00 
3bac7 4e8 00 00 00 3C 
3bacb 4e9 7E 66 66 66 
3bacf 4ea 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3bad3 4eb 66 7E 3C 00 
3bad7 4ec 00 00 00 18 
3badb 4ed 18 1C 1C 18 
3badf 4ee 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3bae3 4ef 18 7E 7E 00 
3bae7 4f0 00 00 00 3C 
3baeb 4f1 7E 66 66 30 
3baef 4f2 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3baf3 4f3 0C 7E 7E 00 
3baf7 4f4 00 00 00 7E 
3bafb 4f5 7E 30 30 18 
3baff 4f6 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3bb03 4f7 66 7E 3C 00 
3bb07 4f8 00 00 00 30 
3bb0b 4f9 30 38 38 3C 
3bb0f 4fa 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3bb13 4fb 7E 30 30 00 
3bb17 4fc 00 00 00 7E 
3bb1b 4fd 7E 06 06 3E 
3bb1f 4fe 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3bb23 4ff 66 7E 3C 00 
3bb27 500 00 00 00 38 
3bb2b 501 3C 0E 06 06 
3bb2f 502 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3bb33 503 66 7E 3C 00 
3bb37 504 00 00 00 7E 
3bb3b 505 7E 60 60 30 
3bb3f 506 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3bb43 507 0C 0C 0C 00 
3bb47 508 00 00 00 3C 
3bb4b 509 7E 66 66 3C 
3bb4f 50a 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3bb53 50b 66 7E 3C 00 
3bb57 50c 00 00 00 3C 
3bb5b 50d 7E 66 66 7E 
3bb5f 50e 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3bb63 50f 70 3C 1C 00 
3bb67 510 00 00 00 00 
3bb6b 511 00 00 18 18 
3bb6f 512 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3bb73 513 18 18 18 00 
3bb77 514 00 00 00 00 
3bb7b 515 00 00 18 18 
3bb7f 516 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3bb83 517 18 18 18 0C 
3bb87 518 04 00 00 00 
3bb8b 519 70 38 1C 0E 
3bb8f 51a 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3bb93 51b 70 00 00 00 
3bb97 51c 00 00 00 00 
3bb9b 51d 00 00 7E 7E 
3bb9f 51e 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3bba3 51f 00 00 00 00 
3bba7 520 00 00 00 00 | 	byte	$00[8]
3bbab 521 0E 1C 38 70 
3bbaf 522 E0 70 38 1C 
3bbb3 523 0E 00 00 00 
3bbb7 524 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3bbbb 525 7E 66 66 30 
3bbbf 526 30 18 18 18 
3bbc3 527 00 18 18 00 
3bbc7 528 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3bbcb 529 7E 66 66 66 
3bbcf 52a 66 36 06 66 
3bbd3 52b 66 7E 3C 00 
3bbd7 52c 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3bbdb 52d 3C 7E 66 66 
3bbdf 52e 66 7E 7E 66 
3bbe3 52f 66 66 66 00 
3bbe7 530 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3bbeb 531 7E 66 66 7E 
3bbef 532 3E 66 66 66 
3bbf3 533 66 7E 3E 00 
3bbf7 534 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3bbfb 535 7E 66 66 06 
3bbff 536 06 06 06 66 
3bc03 537 66 7E 3C 00 
3bc07 538 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3bc0b 539 7E 66 66 66 
3bc0f 53a 66 66 66 66 
3bc13 53b 66 7E 3E 00 
3bc17 53c 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3bc1b 53d 7E 06 06 3E 
3bc1f 53e 3E 06 06 06 
3bc23 53f 06 7E 7E 00 
3bc27 540 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3bc2b 541 7E 06 06 3E 
3bc2f 542 3E 06 06 06 
3bc33 543 06 06 06 00 
3bc37 544 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3bc3b 545 7E 06 06 76 
3bc3f 546 76 66 66 66 
3bc43 547 66 7E 3C 00 
3bc47 548 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3bc4b 549 66 66 66 7E 
3bc4f 54a 7E 66 66 66 
3bc53 54b 66 66 66 00 
3bc57 54c 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3bc5b 54d 7E 18 18 18 
3bc5f 54e 18 18 18 18 
3bc63 54f 18 7E 7E 00 
3bc67 550 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3bc6b 551 60 60 60 60 
3bc6f 552 60 60 60    | 	byte	$60[7]
3bc72 553 66 66 7E 3C 
3bc76 554 00 00 00 00 
3bc7a 555 66 66 36 36 
3bc7e 556 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3bc82 557 66 66 C6 C6 
3bc86 558 00 00 00 00 
3bc8a 559 06 06 06 06 
3bc8e 55a 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3bc92 55b 06 06 7E 7E 
3bc96 55c 00 00 00 00 
3bc9a 55d C6 C6 EE EE 
3bc9e 55e FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3bca2 55f C6 C6 C6 C6 
3bca6 560 00 00 00 00 
3bcaa 561 66 66 66 6E 
3bcae 562 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3bcb2 563 76 66 66 66 
3bcb6 564 00 00 00 00 
3bcba 565 3C 7E 66 66 
3bcbe 566 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3bcc2 567 66 66 7E 3C 
3bcc6 568 00 00 00 00 
3bcca 569 3E 7E 66 66 
3bcce 56a 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3bcd2 56b 06 06 06 06 
3bcd6 56c 00 00 00 00 
3bcda 56d 3C 7E 66 66 
3bcde 56e 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3bce2 56f 66 56 3E 6C 
3bce6 570 00 00 00 00 
3bcea 571 3E 7E 66 66 
3bcee 572 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3bcf2 573 66 66 C6 C6 
3bcf6 574 00 00 00 00 
3bcfa 575 7C 7E 06 06 
3bcfe 576 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3bd02 577 60 60 7E 3E 
3bd06 578 00 00 00 00 
3bd0a 579 7E 7E 18 18 
3bd0e 57a 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3bd12 57b 18 18 18 18 
3bd16 57c 00 00 00 00 
3bd1a 57d 66 66 66 66 
3bd1e 57e 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3bd22 57f 66 66 7E 3C 
3bd26 580 00 00 00 00 
3bd2a 581 66 66 66 66 
3bd2e 582 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3bd32 583 3C 3C 18 18 
3bd36 584 00 00 00 00 
3bd3a 585 C6 C6 C6 C6 
3bd3e 586 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3bd42 587 FE EE C6 82 
3bd46 588 00 00 00 00 
3bd4a 589 66 66 66 3C 
3bd4e 58a 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3bd52 58b 3C 66 66 66 
3bd56 58c 00 00 00 00 
3bd5a 58d 66 66 66 66 
3bd5e 58e 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3bd62 58f 18 18 18 18 
3bd66 590 00 00 00 00 
3bd6a 591 7E 7E 30 30 
3bd6e 592 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3bd72 593 06 06 7E 7E 
3bd76 594 00 00 00 00 
3bd7a 595 3C 3C 0C 0C 
3bd7e 596 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3bd82 597 0C 0C 3C 3C 
3bd86 598 00 00 00 00 
3bd8a 599 06 06 0C 0C 
3bd8e 59a 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3bd92 59b 60 60 C0 C0 
3bd96 59c 00 00 00 00 
3bd9a 59d 3C 3C 30 30 
3bd9e 59e 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3bda2 59f 30 30 3C 3C 
3bda6 5a0 00 00 00 00 
3bdaa 5a1 18 18 3C 3C 
3bdae 5a2 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3bdb2 5a3 00 00 00 00 
3bdb6 5a4 00 00 00 00 
3bdba 5a5 00 00 00 00 
3bdbe 5a6 00 00 00 00 
3bdc2 5a7 00 00       | 	byte	$00[18]
3bdc4 5a8 FE FE 00 00 
3bdc8 5a9 00 00 0C 0C 
3bdcc 5aa 18 18 00 00 
3bdd0 5ab 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3bdd4 5ac 00 00 00 00 
3bdd8 5ad 00 00 00 00 
3bddc 5ae 00          | 	byte	$00[9]
3bddd 5ae 3C 7C 60 7C 
3bde1 5af 7E 66 66 7E 
3bde5 5b0 7C 00 00 00 
3bde9 5b1 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3bded 5b2 3E 7E 66 66 
3bdf1 5b3 66 66 66 7E 
3bdf5 5b4 3E 00 00 00 
3bdf9 5b5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3bdfd 5b6 3C 3E 06 06 
3be01 5b7 06 06 06 7E 
3be05 5b8 7C 00 00 00 
3be09 5b9 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3be0d 5ba 7C 7E 66 66 
3be11 5bb 66 66 66 7E 
3be15 5bc 7C 00 00 00 
3be19 5bd 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3be1d 5be 3C 7E 66 66 
3be21 5bf 7E 06 06 7E 
3be25 5c0 7C 00 00 00 
3be29 5c1 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3be2d 5c2 18 7E 7E 18 
3be31 5c3 18 18 18 18 
3be35 5c4 18 00 00 00 
3be39 5c5 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3be3d 5c6 7C 7E 66 66 
3be41 5c7 66 66 7E 7C 
3be45 5c8 60 7E 3E 00 
3be49 5c9 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3be4d 5ca 3E 7E 66 66 
3be51 5cb 66 66 66 66 
3be55 5cc 66 00 00 00 
3be59 5cd 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3be5d 5ce 1C 1C 18 18 
3be61 5cf 18 18 18 3C 
3be65 5d0 3C 00 00 00 
3be69 5d1 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3be6d 5d2 30 30 30 30 
3be71 5d3 30 30 30 30 
3be75 5d4 30          | 	byte	$30[9]
3be76 5d4 3E 1E 00 00 
3be7a 5d5 06 06 06 36 
3be7e 5d6 36 1E 1E 1E 
3be82 5d7 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3be86 5d8 00 00 00 00 
3be8a 5d9 1C 1C 18 18 
3be8e 5da 18 18 18 18 
3be92 5db 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3be96 5dc 00 00 00 00 
3be9a 5dd 00 00 00    | 	byte	$00[7]
3be9d 5de 6C FE FE D6 
3bea1 5df D6 C6 C6 C6 
3bea5 5e0 C6 00 00 00 
3bea9 5e1 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3bead 5e2 3E 7E 66 66 
3beb1 5e3 66 66 66 66 
3beb5 5e4 66 00 00 00 
3beb9 5e5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3bebd 5e6 3C 7E 66 66 
3bec1 5e7 66 66 66 7E 
3bec5 5e8 3C 00 00 00 
3bec9 5e9 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3becd 5ea 3E 7E 66 66 
3bed1 5eb 66 66 66 7E 
3bed5 5ec 3E 06 06 00 
3bed9 5ed 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3bedd 5ee 7C 7E 66 66 
3bee1 5ef 66 66 66 7E 
3bee5 5f0 7C 60 60 00 
3bee9 5f1 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3beed 5f2 3E 7E 66 06 
3bef1 5f3 06 06 06 06 
3bef5 5f4 06 00 00 00 
3bef9 5f5 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3befd 5f6 7C 7E 06 0E 
3bf01 5f7 3C 70 60 7E 
3bf05 5f8 3E 00 00 00 
3bf09 5f9 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3bf0d 5fa 7E 7E 18 18 
3bf11 5fb 18 18 18 78 
3bf15 5fc 70 00 00 00 
3bf19 5fd 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3bf1d 5fe 66 66 66 66 
3bf21 5ff 66 66 66    | 	byte	$66[7]
3bf24 600 7E 7C 00 00 
3bf28 601 00 00 00 00 
3bf2c 602 00 66 66 66 
3bf30 603 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
3bf34 604 18 18 00 00 
3bf38 605 00 00 00 00 
3bf3c 606 00 C6 C6 D6 
3bf40 607 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3bf44 608 C6 82 00 00 
3bf48 609 00 00 00 00 
3bf4c 60a 00 66 66 3C 
3bf50 60b 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3bf54 60c 66 66 00 00 
3bf58 60d 00 00 00 00 
3bf5c 60e 00 66 66 66 
3bf60 60f 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3bf64 610 7C 60 7E 3E 
3bf68 611 00 00 00 00 
3bf6c 612 00 7E 7E 30 
3bf70 613 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3bf74 614 7E 7E 00 00 
3bf78 615 00 00 30 18 
3bf7c 616 18 18 18 0C 
3bf80 617 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3bf84 618 18 30 00 00 
3bf88 619 00 00 18 18 
3bf8c 61a 18 18 18 18 
3bf90 61b 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bf94 61c 18 18 00 00 
3bf98 61d 00 00 0C 18 
3bf9c 61e 18 18 18 30 
3bfa0 61f 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3bfa4 620 18 0C 00 00 
3bfa8 621 00 00 6C 7E 
3bfac 622 36 00 00 00 
3bfb0 623 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3bfb4 624 00 00 00 00 
3bfb8 625 00 00 00 00 
3bfbc 626 00          | 	byte	$00[9]
3bfbd 626 18 18 18 18 
3bfc1 627 18 18 00 00 
3bfc5 628 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3bfc8 629             | 'amiga_font     file "amigafont.def"
3bfc8 629 00 6C FE FE 
3bfcc 62a 7C 38 10 00 
3bfd0 62b 18 18 18 F8 
3bfd4 62c F8 18 18 18 | a8_font        file "atari8.fnt"
3bfd8 62d C0 C0 C0 C0 
3bfdc 62e C0 C0 C0 C0 | 	byte	$c0[8]
3bfe0 62f 18 18 18 1F 
3bfe4 630 1F 00 00 00 
3bfe8 631 18 18 18 1F 
3bfec 632 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3bff0 633 00 00 00 1F 
3bff4 634 1F 18 18 18 
3bff8 635 C0 E0 70 38 
3bffc 636 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3c000 637 03 07 0E 1C 
3c004 638 38 70 E0 C0 
3c008 639 80 C0 E0 F0 
3c00c 63a F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3c010 63b 00 00 00 00 
3c014 63c F0 F0 F0 F0 
3c018 63d 01 03 07 0F 
3c01c 63e 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3c020 63f F0 F0 F0 F0 
3c024 640 00 00 00 00 
3c028 641 0F 0F 0F 0F 
3c02c 642 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3c030 643 FF FF 00 00 
3c034 644 00 00 00 00 
3c038 645 00 00 00 00 
3c03c 646 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3c040 647 00 00 00 00 
3c044 648 0F 0F 0F 0F 
3c048 649 00 38 38 EE 
3c04c 64a EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3c050 64b 00 00 00 F8 
3c054 64c F8 18 18 18 
3c058 64d 00 00 00 FF 
3c05c 64e FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3c060 64f 18 18 18 FF 
3c064 650 FF 18 18 18 
3c068 651 00 00 3C 7E 
3c06c 652 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3c070 653 00 00 00 00 
3c074 654 FF FF FF FF 
3c078 655 03 03 03 03 
3c07c 656 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3c080 657 00 00 00 FF 
3c084 658 FF 18 18 18 
3c088 659 18 18 18 FF 
3c08c 65a FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3c090 65b 0F 0F 0F 0F 
3c094 65c 0F 0F 0F 0F | 	byte	$0f[8]
3c098 65d 18 18 18 F8 
3c09c 65e F8 00 00 00 
3c0a0 65f 1E 06 1E 06 
3c0a4 660 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3c0a8 661 00 18 3C 7E 
3c0ac 662 18 18 18 00 
3c0b0 663 00 18 18 18 
3c0b4 664 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3c0b8 665 00 18 0C 7E 
3c0bc 666 0C 18 00 00 
3c0c0 667 00 18 30 7E 
3c0c4 668 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3c0c8 669 00 00 00 00 
3c0cc 66a 00 00 00 00 
3c0d0 66b 00          | 	byte	$00[9]
3c0d1 66b 18 18 18 18 
3c0d5 66c 00 18 00 00 
3c0d9 66d 66 66 66 00 
3c0dd 66e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3c0e1 66f 66 FF 66 66 
3c0e5 670 FF 66 00 18 
3c0e9 671 7C 06 3C 60 
3c0ed 672 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3c0f1 673 66 36 18 0C 
3c0f5 674 66 62 00 38 
3c0f9 675 6C 38 1C F6 
3c0fd 676 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3c101 677 18 18 18 00 
3c105 678 00 00 00 00 
3c109 679 70 38 18 18 
3c10d 67a 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3c111 67b 0E 1C 18 18 
3c115 67c 1C 0E 00 00 
3c119 67d 66 3C FF 3C 
3c11d 67e 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3c121 67f 18 18 7E 18 
3c125 680 18 00 00 00 
3c129 681 00 00 00 00 
3c12d 682 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3c131 683 00 00 7E 00 
3c135 684 00 00 00 00 
3c139 685 00 00 00 00 
3c13d 686 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3c141 687 60 30 18 0C 
3c145 688 06 02 00 00 
3c149 689 3C 66 76 6E 
3c14d 68a 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3c151 68b 18 1C 18 18 
3c155 68c 18 7E 00 00 
3c159 68d 3C 66 30 18 
3c15d 68e 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3c161 68f 7E 30 18 30 
3c165 690 66 3C 00 00 
3c169 691 30 38 3C 36 
3c16d 692 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3c171 693 7E 06 3E 60 
3c175 694 66 3C 00 00 
3c179 695 3C 06 3E 66 
3c17d 696 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3c181 697 7E 60 30 18 
3c185 698 0C 0C 00 00 
3c189 699 3C 66 3C 66 
3c18d 69a 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3c191 69b 3C 66 7C 60 
3c195 69c 30 1C 00 00 
3c199 69d 00 18 18 00 
3c19d 69e 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3c1a1 69f 00 18 18 00 
3c1a5 6a0 18 18 0C 60 
3c1a9 6a1 30 18 0C 18 
3c1ad 6a2 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3c1b1 6a3 00 7E 00 00 
3c1b5 6a4 7E 00 00 06 
3c1b9 6a5 0C 18 30 18 
3c1bd 6a6 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3c1c1 6a7 3C 66 30 18 
3c1c5 6a8 00 18 00 00 
3c1c9 6a9 3C 66 76 76 
3c1cd 6aa 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3c1d1 6ab 18 3C 66 66 
3c1d5 6ac 7E 66 00 00 
3c1d9 6ad 3E 66 3E 66 
3c1dd 6ae 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3c1e1 6af 3C 66 06 06 
3c1e5 6b0 66 3C 00 00 
3c1e9 6b1 1E 36 66 66 
3c1ed 6b2 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3c1f1 6b3 7E 06 3E 06 
3c1f5 6b4 06 7E 00 00 
3c1f9 6b5 7E 06 3E 06 
3c1fd 6b6 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3c201 6b7 7C 06 06 76 
3c205 6b8 66 7C 00 00 
3c209 6b9 66 66 7E 66 
3c20d 6ba 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3c211 6bb 7E 18 18 18 
3c215 6bc 18 7E 00 00 
3c219 6bd 60 60 60 60 
3c21d 6be 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3c221 6bf 66 36 1E 1E 
3c225 6c0 36 66 00 00 
3c229 6c1 06 06 06 06 
3c22d 6c2 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3c231 6c3 C6 EE FE D6 
3c235 6c4 C6 C6 00 00 
3c239 6c5 66 6E 7E 7E 
3c23d 6c6 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3c241 6c7 3C 66 66 66 
3c245 6c8 66 3C 00 00 
3c249 6c9 3E 66 66 3E 
3c24d 6ca 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3c251 6cb 3C 66 66 66 
3c255 6cc 36 6C 00 00 
3c259 6cd 3E 66 66 3E 
3c25d 6ce 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3c261 6cf 3C 06 3C 60 
3c265 6d0 60 3C 00 00 
3c269 6d1 7E 18 18 18 
3c26d 6d2 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3c271 6d3 66 66 66 66 
3c275 6d4 66          | 	byte	$66[5]
3c276 6d4 7E 00 00 66 
3c27a 6d5 66 66 66 3C 
3c27e 6d6 18 00 00 C6 
3c282 6d7 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3c286 6d8 C6 00 00 66 
3c28a 6d9 66 3C 3C 66 
3c28e 6da 66 00 00 66 
3c292 6db 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3c296 6dc 18 00 00 7E 
3c29a 6dd 30 18 0C 06 
3c29e 6de 7E 00 00 78 
3c2a2 6df 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3c2a6 6e0 78 00 00 02 
3c2aa 6e1 06 0C 18 30 
3c2ae 6e2 60 00 00 1E 
3c2b2 6e3 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3c2b6 6e4 1E 00 00 10 
3c2ba 6e5 38 6C C6 00 
3c2be 6e6 00 00 00 00 
3c2c2 6e7 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c2c6 6e8 FF 00 00 18 
3c2ca 6e9 3C 7E 7E 3C 
3c2ce 6ea 18 00 00 00 
3c2d2 6eb 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3c2d6 6ec 7C 00 00 06 
3c2da 6ed 06 3E 66 66 
3c2de 6ee 3E 00 00 00 
3c2e2 6ef 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3c2e6 6f0 3C 00 00 60 
3c2ea 6f1 60 7C 66 66 
3c2ee 6f2 7C 00 00 00 
3c2f2 6f3 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3c2f6 6f4 3C 00 00 70 
3c2fa 6f5 18 7C 18 18 
3c2fe 6f6 18 00 00 00 
3c302 6f7 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3c306 6f8 60 3E 00 06 
3c30a 6f9 06 3E 66 66 
3c30e 6fa 66 00 00 18 
3c312 6fb 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3c316 6fc 3C 00 00 60 
3c31a 6fd 00 60 60 60 
3c31e 6fe 60 3C 00 06 
3c322 6ff 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3c326 700 66 00 00 1C 
3c32a 701 18 18 18 18 
3c32e 702 3C 00 00 00 
3c332 703 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3c336 704 C6 00 00 00 
3c33a 705 3E 66 66 66 
3c33e 706 66 00 00 00 
3c342 707 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3c346 708 3C 00 00 00 
3c34a 709 3E 66 66 3E 
3c34e 70a 06 06 00 00 
3c352 70b 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3c356 70c 60 60 00 00 
3c35a 70d 3E 66 06 06 
3c35e 70e 06 00 00 00 
3c362 70f 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3c366 710 3E 00 00 18 
3c36a 711 7E 18 18 18 
3c36e 712 70 00 00 00 
3c372 713 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3c376 714 7C 00 00 00 
3c37a 715 66 66 66 3C 
3c37e 716 18 00 00 00 
3c382 717 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3c386 718 6C 00 00 00 
3c38a 719 66 3C 18 3C 
3c38e 71a 66 00 00 00 
3c392 71b 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3c396 71c 30 1E 00 00 
3c39a 71d 7E 30 18 0C 
3c39e 71e 7E 00 00 18 
3c3a2 71f 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3c3a6 720 3C 00 18 18 
3c3aa 721 18 18 18 18 
3c3ae 722 18 18 00 7E 
3c3b2 723 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3c3b6 724 60 00 10 18 
3c3ba 725 1C 1E 1C 18 
3c3be 726 10 00 08 18 
3c3c2 727 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3c3c6 728 08 00       | 	byte	$08, $00
3c3c8 729 00 00 00 00 
3c3cc 72a 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3c3cd 72a 80 00 00 00 
3c3d1 72b 00 80 00 00 
3c3d5 72c 80 80 00 00 
3c3d9 72d 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3c3dd 72e 80 00 80 00 
3c3e1 72f 00 40 80 00 
3c3e5 730 AA AA AA 00 
3c3e9 731 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3c3ed 732 FF 00 00 00 
3c3f1 733 00 FF 00 00 
3c3f5 734 FF FF 00 00 
3c3f9 735 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3c3fd 736 FF 00 FF 00 
3c401 737 00 FF FF 00 
3c405 738 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3c408 739 00 00 00 00 
3c40c 73a 00          | ataripalette   file "ataripalettep2.def"
3c40d 73a 11 11 11 00 
3c411 73b 22 22 22 00 
3c415 73c 33 33 33 00 
3c419 73d 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3c41d 73e 55 55 55 00 
3c421 73f 66 66 66 00 
3c425 740 77 77 77 00 
3c429 741 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3c42d 742 99 99 99 00 
3c431 743 AA AA AA 00 
3c435 744 BB BB BB 00 
3c439 745 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3c43d 746 DD DD DD 00 
3c441 747 EE EE EE 00 
3c445 748 FF FF FF 00 
3c449 749 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3c44d 74a 00 14 40 00 
3c451 74b 00 1E 60 00 
3c455 74c 00 28 80 00 
3c459 74d 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3c45d 74e 00 3C BF 00 
3c461 74f 00 46 DF 00 
3c465 750 00 50 FF 00 
3c469 751 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3c46d 752 39 77 FF 00 
3c471 753 55 8A FF 00 
3c475 754 71 9E FF 00 
3c479 755 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3c47d 756 AA C5 FF 00 
3c481 757 C6 D8 FF 00 
3c485 758 E3 EC FF 00 
3c489 759 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3c48d 75a 00 00 40 00 
3c491 75b 00 00 60 00 
3c495 75c 00 00 80 00 
3c499 75d 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3c49d 75e 00 00 BF 00 
3c4a1 75f 00 00 DF 00 
3c4a5 760 00 00 FF 00 
3c4a9 761 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3c4ad 762 39 39 FF 00 
3c4b1 763 55 55 FF 00 
3c4b5 764 71 71 FF 00 
3c4b9 765 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3c4bd 766 AA AA FF 00 
3c4c1 767 C6 C6 FF 00 
3c4c5 768 E3 E3 FF 00 
3c4c9 769 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3c4cd 76a 20 00 40 00 
3c4d1 76b 30 00 60 00 
3c4d5 76c 40 00 80 00 
3c4d9 76d 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3c4dd 76e 60 00 BF 00 
3c4e1 76f 70 00 DF 00 
3c4e5 770 80 00 FF 00 
3c4e9 771 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3c4ed 772 9C 39 FF 00 
3c4f1 773 AA 55 FF 00 
3c4f5 774 B8 71 FF 00 
3c4f9 775 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3c4fd 776 D5 AA FF 00 
3c501 777 E3 C6 FF 00 
3c505 778 F1 E3 FF 00 
3c509 779 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3c50d 77a 40 00 40 00 
3c511 77b 60 00 60 00 
3c515 77c 80 00 80 00 
3c519 77d 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3c51d 77e BF 00 BF 00 
3c521 77f DF 00 DF 00 
3c525 780 FF 00 FF 00 
3c529 781 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3c52d 782 FF 39 FF 00 
3c531 783 FF 55 FF 00 
3c535 784 FF 71 FF 00 
3c539 785 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3c53d 786 FF AA FF 00 
3c541 787 FF C6 FF 00 
3c545 788 FF E3 FF 00 
3c549 789 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3c54d 78a 40 00 20 00 
3c551 78b 60 00 30 00 
3c555 78c 80 00 40 00 
3c559 78d 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3c55d 78e BF 00 60 00 
3c561 78f DF 00 70 00 
3c565 790 FF 00 80 00 
3c569 791 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3c56d 792 FF 39 9C 00 
3c571 793 FF 55 AA 00 
3c575 794 FF 71 B8 00 
3c579 795 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3c57d 796 FF AA D5 00 
3c581 797 FF C6 E3 00 
3c585 798 FF E3 F1 00 
3c589 799 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3c58d 79a 40 00 00 00 
3c591 79b 60 00 00 00 
3c595 79c 80 00 00 00 
3c599 79d 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3c59d 79e BF 00 00 00 
3c5a1 79f DF 00 00 00 
3c5a5 7a0 FF 00 00 00 
3c5a9 7a1 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3c5ad 7a2 FF 39 39 00 
3c5b1 7a3 FF 55 55 00 
3c5b5 7a4 FF 71 71 00 
3c5b9 7a5 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3c5bd 7a6 FF AA AA 00 
3c5c1 7a7 FF C6 C6 00 
3c5c5 7a8 FF E3 E3 00 
3c5c9 7a9 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3c5cd 7aa 40 10 00 00 
3c5d1 7ab 60 18 00 00 
3c5d5 7ac 80 20 00 00 
3c5d9 7ad 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3c5dd 7ae BF 30 00 00 
3c5e1 7af DF 38 00 00 
3c5e5 7b0 FF 40 00 00 
3c5e9 7b1 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3c5ed 7b2 FF 6A 39 00 
3c5f1 7b3 FF 80 55 00 
3c5f5 7b4 FF 95 71 00 
3c5f9 7b5 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3c5fd 7b6 FF BF AA 00 
3c601 7b7 FF D5 C6 00 
3c605 7b8 FF EA E3 00 
3c609 7b9 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3c60d 7ba 40 20 00 00 
3c611 7bb 60 30 00 00 
3c615 7bc 80 40 00 00 
3c619 7bd 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3c61d 7be BF 60 00 00 
3c621 7bf DF 70 00 00 
3c625 7c0 FF 80 00 00 
3c629 7c1 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3c62d 7c2 FF 9C 39 00 
3c631 7c3 FF AA 55 00 
3c635 7c4 FF B8 71 00 
3c639 7c5 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3c63d 7c6 FF D5 AA 00 
3c641 7c7 FF E3 C6 00 
3c645 7c8 FF F1 E3 00 
3c649 7c9 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3c64d 7ca 40 30 00 00 
3c651 7cb 60 48 00 00 
3c655 7cc 80 60 00 00 
3c659 7cd 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3c65d 7ce BF 90 00 00 
3c661 7cf DF A8 00 00 
3c665 7d0 FF C0 00 00 
3c669 7d1 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3c66d 7d2 FF CE 39 00 
3c671 7d3 FF D5 55 00 
3c675 7d4 FF DC 71 00 
3c679 7d5 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3c67d 7d6 FF EA AA 00 
3c681 7d7 FF F1 C6 00 
3c685 7d8 FF F8 E3 00 
3c689 7d9 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3c68d 7da 30 40 00 00 
3c691 7db 48 60 00 00 
3c695 7dc 60 80 00 00 
3c699 7dd 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3c69d 7de 90 BF 00 00 
3c6a1 7df A8 DF 00 00 
3c6a5 7e0 C0 FF 00 00 
3c6a9 7e1 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3c6ad 7e2 CE FF 39 00 
3c6b1 7e3 D5 FF 55 00 
3c6b5 7e4 DC FF 71 00 
3c6b9 7e5 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3c6bd 7e6 EA FF AA 00 
3c6c1 7e7 F1 FF C6 00 
3c6c5 7e8 F8 FF E3 00 
3c6c9 7e9 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3c6cd 7ea 00 40 00 00 
3c6d1 7eb 00 60 00 00 
3c6d5 7ec 00 80 00 00 
3c6d9 7ed 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3c6dd 7ee 00 BF 00 00 
3c6e1 7ef 00 DF 00 00 
3c6e5 7f0 00 FF 00 00 
3c6e9 7f1 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3c6ed 7f2 39 FF 39 00 
3c6f1 7f3 55 FF 55 00 
3c6f5 7f4 71 FF 71 00 
3c6f9 7f5 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3c6fd 7f6 AA FF AA 00 
3c701 7f7 C6 FF C6 00 
3c705 7f8 E3 FF E3 00 
3c709 7f9 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3c70d 7fa 00 40 14 00 
3c711 7fb 00 60 1E 00 
3c715 7fc 00 80 28 00 
3c719 7fd 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3c71d 7fe 00 BF 3C 00 
3c721 7ff 00 DF 46 00 
3c725 800 00 FF 50 00 
3c729 801 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3c72d 802 39 FF 77 00 
3c731 803 55 FF 8A 00 
3c735 804 71 FF 9E 00 
3c739 805 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3c73d 806 AA FF C5 00 
3c741 807 C6 FF D8 00 
3c745 808 E3 FF EC 00 
3c749 809 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3c74d 80a 00 40 28 00 
3c751 80b 00 60 3C 00 
3c755 80c 00 80 50 00 
3c759 80d 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3c75d 80e 00 BF 78 00 
3c761 80f 00 DF 8C 00 
3c765 810 00 FF A0 00 
3c769 811 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3c76d 812 39 FF B5 00 
3c771 813 55 FF C0 00 
3c775 814 71 FF CA 00 
3c779 815 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3c77d 816 AA FF DF 00 
3c781 817 C6 FF EA 00 
3c785 818 E3 FF F4 00 
3c789 819 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3c78d 81a 00 40 40 00 
3c791 81b 00 60 60 00 
3c795 81c 00 80 80 00 
3c799 81d 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3c79d 81e 00 BF BF 00 
3c7a1 81f 00 DF DF 00 
3c7a5 820 00 FF FF 00 
3c7a9 821 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3c7ad 822 39 FF FF 00 
3c7b1 823 55 FF FF 00 
3c7b5 824 71 FF FF 00 
3c7b9 825 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3c7bd 826 AA FF FF 00 
3c7c1 827 C6 FF FF 00 
3c7c5 828 E3 FF FF 00 
3c7c9 829 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3c7cd 82a 00 28 40 00 
3c7d1 82b 00 3C 60 00 
3c7d5 82c 00 50 80 00 
3c7d9 82d 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3c7dd 82e 00 78 BF 00 
3c7e1 82f 00 8C DF 00 
3c7e5 830 00 A0 FF 00 
3c7e9 831 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3c7ed 832 39 B5 FF 00 
3c7f1 833 55 C0 FF 00 
3c7f5 834 71 CA FF 00 
3c7f9 835 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3c7fd 836 AA DF FF 00 
3c801 837 C6 EA FF 00 
3c805 838 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3c808 839             | 
3c808 839             | '**********************************************************************************
3c808 839             | '
3c808 839             | '        Timings and colors definitions
3c808 839             | '
3c808 839             | '**********************************************************************************
3c808 839             | 
3c808 839             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3c808 839 08 00 00 00 
3c80c 83a 3C 00 00 00 
3c810 83b 08 00 00 00 
3c814 83c 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3c818 83d 07 00 00 00 
3c81c 83e 04 00 00 00 
3c820 83f 01 00 00 00 
3c824 840 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3c828 841 58 02 00 00 
3c82c 842 20 9E 4B 14 
3c830 843 FB A8 9E 01 
3c834 844 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3c838 845 00 00 00 00 
3c83c 846 C0 00 00 00 
3c840 847 00 00 00 00 
3c844 848 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c848 849             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3c848 849 00 75 C7 97 
3c84c 84a 27 47 F6 0A 
3c850 84b 05 79 CB 9B 
3c854 84c 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3c858 84d             | 
3c858 84d             | ''--------  Initialization  ----------------------------------------------------------------
3c858 84d             | 
3c858 84d 28 0C 64 FD | hdmi            setq    #6
3c85c 84e 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3c860 84f 28 10 64 FD |                 setq    #8
3c864 850 D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3c868 851             | 
3c868 851 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3c86c 852 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3c870 853 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3c874 854 D6 C6 01 F1 |                 add     t1,hbase
3c878 855 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3c87c 856 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3c880 857 7B 0B 80 5F 
3c884 858 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3c888 859 66 66 86 FF 
3c88c 85a 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3c890 85b             | '
3c890 85b D6 C6 01 F6 |                 mov 	t1,hbase			   '
3c894 85c 11 C6 65 F0 |                 shl 	t1,#17                             '
3c898 85d E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3c89c 85e 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3c8a0 85f             | 
3c8a0 85f 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3c8a4 860 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3c8a8 861 E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3c8ac 862             | 
3c8ac 862             | ''--------  frame rendering main loop  ---------------------------------------------------
3c8ac 862             | 
3c8ac 862 28 06 64 FD | p101            setq 	#3
3c8b0 863 00 A5 05 FB | 		rdlong  vblankptr,ptra
3c8b4 864 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3c8b8 865 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3c8bc 866 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3c8c0 867 00 A0 05 F6 |                 mov     dlinum, #0
3c8c4 868 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3c8c8 869 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3c8cc 86a             | 
3c8cc 86a             | 
3c8cc 86a 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3c8d0 86b 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3c8d4 86c ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3c8d8 86d             |                 
3c8d8 86d             | 
3c8d8 86d             | 
3c8d8 86d             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3c8d8 86d             |   
3c8d8 86d 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3c8dc 86e 29 FE 65 3D |          if_nc  setq2   #255
3c8e0 86f D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3c8e4 870             | 
3c8e4 870             | '' -----   up porch (before the picture)
3c8e4 870             | 
3c8e4 870 C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3c8e8 871 C1 C4 01 F6 |                 mov     hsync1,sync_001	
3c8ec 872 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3c8f0 873 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3c8f4 874             |  
3c8f4 874             |    
3c8f4 874             |  
3c8f4 874 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3c8f8 875 E2 8C B1 FC |                 xzero   m_sn,hsync1
3c8fc 876 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3c900 877 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3c904 878 E1 90 C1 FC |                 xcont   m_vi,hsync0
3c908 879 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3c90c 87a             | 
3c90c 87a E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3c910 87b E2 8C B1 FC |                 xzero   m_sn,hsync1
3c914 87c 48 00 B0 FD | 		call    #dli
3c918 87d E1 8E C1 FC |                 xcont   m_bv,hsync0     
3c91c 87e E1 90 C1 FC |                 xcont   m_vi,hsync0
3c920 87f 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3c924 880             |                 	
3c924 880             |                 
3c924 880             | 
3c924 880             |  
3c924 880             | '' ------- the main screen drawing starts here
3c924 880             | 
3c924 880 E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3c928 881 E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3c92c 882 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3c930 883 E1 8E C1 FC |                 xcont   m_bv,hsync0
3c934 884 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3c938 885 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3c93c 886 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3c940 887             |               
3c940 887             | 
3c940 887 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3c944 888 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3c948 889             | 
3c948 889             | ' ---------------- All visible lines displayed now, start vblank  
3c948 889             | 
3c948 889 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3c94c 88a 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3c950 88b C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3c954 88c C3 C4 01 F6 |                 mov     hsync1,sync_223
3c958 88d 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3c95c 88e 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3c960 88f             | 
3c960 88f             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3c960 88f             | 
3c960 88f             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3c960 88f             | 
3c960 88f 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3c964 890             | 
3c964 890 DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3c968 891 04 B8 05 A1 |     if_z        add     dlptr2,#4
3c96c 892 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3c970 893             | 
3c970 893 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3c974 894 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3c978 895 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3c97c 896 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3c980 897 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3c984 898             | 
3c984 898 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3c988 899 DD C6 41 F8 |                 getnib  t1,dl,#0
3c98c 89a 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3c990 89b 70 00 90 AD |     if_z        jmp     #preload
3c994 89c 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3c998 89d 94 00 90 AD |     if_z        jmp     #preload2
3c99c 89e 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3c9a0 89f 0C 00 90 AD |     if_z        jmp     #p390
3c9a4 8a0 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3c9a8 8a1 28 00 90 AD |     if_z        jmp     #p391  
3c9ac 8a2             | 
3c9ac 8a2 2D 00 64 FD | p308            ret
3c9b0 8a3             |    
3c9b0 8a3 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3c9b4 8a4 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3c9b8 8a5 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3c9bc 8a6 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3c9c0 8a7 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3c9c4 8a8 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3c9c8 8a9 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3c9cc 8aa 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3c9d0 8ab 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3c9d4 8ac             |  
3c9d4 8ac             | '' --------  Reload palette. To do 
3c9d4 8ac             | 
3c9d4 8ac E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3c9d8 8ad 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3c9dc 8ae 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3c9e0 8af 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3c9e4 8b0 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3c9e8 8b1 E0 00 00 FB |         	rdlong  $000, framebuf2         	
3c9ec 8b2 70 FF 9F FD |         	jmp     #dli                
3c9f0 8b3             |       
3c9f0 8b3             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3c9f0 8b3             | 
3c9f0 8b3             | 
3c9f0 8b3             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3c9f0 8b3             | 
3c9f0 8b3 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3c9f4 8b4 E2 8C B1 FC |                 xzero   m_sn,hsync1
3c9f8 8b5 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3c9fc 8b6 E1 90 C1 FC |                 xcont   m_vi,hsync0
3ca00 8b7 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3ca04 8b8             |         
3ca04 8b8             | '' -------------- Preload a line from PSRAM        
3ca04 8b8             |         
3ca04 8b8 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3ca08 8b9 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3ca0c 8ba DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3ca10 8bb DE B4 01 F6 |                 mov     buf1,buf1c
3ca14 8bc 03 A0 05 F7 |                 incmod  dlinum,#3
3ca18 8bd             | 
3ca18 8bd 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3ca1c 8be 32 B7 01 F6 |                 mov     buf2,a1024
3ca20 8bf E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3ca24 8c0 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3ca28 8c1 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3ca2c 8c2 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3ca30 8c3             |  
3ca30 8c3             |  
3ca30 8c3             | preload2      '  incmod  dlinum,#3
3ca30 8c3 04 C0 45 F0 |                 shr 	framebuf2,#4
3ca34 8c4 ED B2 01 F6 |                 mov 	cmd,affffffff
3ca38 8c5 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3ca3c 8c6 28 02 64 FD |                 setq	#1
3ca40 8c7 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3ca44 8c8             |                 
3ca44 8c8             | 
3ca44 8c8             | '' -------------- Draw sprites
3ca44 8c8             | 
3ca44 8c8 CF 5C 02 F6 | sprite          mov t8,frames
3ca48 8c9 10 5C 0E F5 | 		and t8,#16 wz
3ca4c 8ca 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
3ca50 8cb 10 48 06 A6 | 	if_z    mov spritenum, #16	
3ca54 8cc             | 		
3ca54 8cc             | 
3ca54 8cc 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3ca58 8cd 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3ca5c 8ce EF 56 96 F9 |                 alts    t5,#sprite1xy
3ca60 8cf 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3ca64 8d0 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3ca68 8d1 EF 56 96 F9 |                 alts    t5,#sprite1xy
3ca6c 8d2 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3ca70 8d3 0F 4C 66 F7 |                 signx	sprite_x,#15
3ca74 8d4 F0 56 96 F9 |                 alts    t5,#sprite1wh
3ca78 8d5 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3ca7c 8d6 01 52 86 F1 |                 sub     sprite_h,#1
3ca80 8d7 F0 56 96 F9 |                 alts    t5,#sprite1wh
3ca84 8d8 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3ca88 8d9             | 
3ca88 8d9             | 
3ca88 8d9 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3ca8c 8da BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3ca90 8db 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3ca94 8dc B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3ca98 8dd 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3ca9c 8de AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3caa0 8df 00 5E 06 F6 |                 mov 	t9,#0
3caa4 8e0 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3caa8 8e1 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3caac 8e2 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3cab0 8e3             |      
3cab0 8e3 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3cab4 8e4 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3cab8 8e5 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3cabc 8e6 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3cac0 8e7 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3cac4 8e8             |                 
3cac4 8e8 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3cac8 8e9 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3cacc 8ea DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3cad0 8eb             |   		
3cad0 8eb 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3cad4 8ec 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3cad8 8ed             | 
3cad8 8ed 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3cadc 8ee 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3cae0 8ef 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3cae4 8f0             |  
3cae4 8f0 EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3cae8 8f1 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3caec 8f2 10 00 90 CD |      if_c 	jmp     #p899		
3caf0 8f3             | 	
3caf0 8f3             | 	
3caf0 8f3 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3caf4 8f4 28 CD 01 F1 | 		add	t4,sprite_w
3caf8 8f5 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3cafc 8f6             | 
3cafc 8f6 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3cb00 8f7             | 
3cb00 8f7 28 59 02 F6 | p899		mov 	t6,sprite_w
3cb04 8f8 01 58 86 F1 | 	 	sub     t6,#1
3cb08 8f9 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3cb0c 8fa             | 
3cb0c 8fa 28 58 62 FD |                 setq   	t6
3cb10 8fb E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3cb14 8fc 28 5D 02 F6 |                 mov t8,sprite_w
3cb18 8fd 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3cb1c 8fe 24 00 90 AD |         if_z    jmp #p898
3cb20 8ff             |          
3cb20 8ff             |         
3cb20 8ff 70 5F 06 F6 |                 mov  t9,#368
3cb24 900 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3cb28 901             | 
3cb28 901 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3cb2c 902 08 5C 06 FA |                 mul t8,#8				' bits to shr
3cb30 903 FF FF 7F FF 
3cb34 904 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3cb38 905 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3cb3c 906 00 5E 8E F9 |                 altd t9,#0				' and mask 
3cb40 907 2D 01 00 F5 |                 and 0-0, t7
3cb44 908             |                
3cb44 908             | 
3cb44 908 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3cb48 909 E5 E0 7A FA |                 wmlong 368,t3				
3cb4c 90a             |                 
3cb4c 90a C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3cb50 90b 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3cb54 90c 2D 00 64 FD |                 ret
3cb58 90d             | 	
3cb58 90d             | 	
3cb58 90d             |                
3cb58 90d             |  
3cb58 90d             | '' -------------- Graphics line ------------------------------------------------------------
3cb58 90d             |  
3cb58 90d             | 
3cb58 90d             | '' consts and vars
3cb58 90d             | 
3cb58 90d 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3cb5c 90e AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3cb60 90f 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3cb64 910 AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3cb68 911             | 
3cb68 911 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3cb6c 912             | 
3cb6c 912             | '------ these longs will be set by setmode function
3cb6c 912             | 
3cb6c 912 00 00 00 00 | m_bs            long    0        'blanks before sync
3cb70 913 00 00 00 00 | m_sn            long    0        'sync
3cb74 914 00 00 00 00 | m_bv            long    0        'blanks before visible
3cb78 915 00 00 00 00 | m_vi            long    0        'visible pixels #
3cb7c 916             | 'm_border        long    0        'left/right borders
3cb7c 916 00 00 00 00 | i_upporch       long    0        'up porch lines
3cb80 917 00 00 00 00 | i_vsync         long    0        'vsync lines
3cb84 918 00 00 00 00 | i_downporch     long    0        'down porch lines
3cb88 919 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3cb8c 91a 00 00 00 00 | i_totalvis      long    0
3cb90 91b             | 
3cb90 91b             | '-------------------------------------
3cb90 91b             |  
3cb90 91b 00 00 00 00 | linenum         long    0
3cb94 91c 00 00 00 00 | frames          long    0
3cb98 91d 00 00 00 00 | dlinum long 0
3cb9c 91e 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3cba0 91f             | 
3cba0 91f 00 00 00 00 | vblankptr       long    0
3cba4 920 00 00 00 00 | modeptr         long    0
3cba8 921 00 00 00 00 | paletteptr      long    0
3cbac 922 00 00 00 00 | dlptr           long    0
3cbb0 923 01 00 00 00 | hbase           long    1
3cbb4 924 00 00 00 00 | mailbox         long    0
3cbb8 925 00 00 00 00 | spriteptr          long 0
3cbbc 926             | 
3cbbc 926 00 00 00 00 | cmd             long    0
3cbc0 927 00 B0 07 00 | buf1            long    $80000-16384-4096
3cbc4 928 00 04 00 00 | buf2            long    1024
3cbc8 929 01 00 00 00 | dlptr2          long    1
3cbcc 92a 01 00 00 00 | dl              long    1
3cbd0 92b             | 
3cbd0 92b 00 00 00 00 | buf1c long 0
3cbd4 92c 00 B0 07 00 | buf1d            long    $80000-16384-4096
3cbd8 92d 01 00 00 00 | framebuf2       long    1
3cbdc 92e 01 00 00 00 | hsync0          long    1
3cbe0 92f 01 00 00 00 | hsync1          long    1
3cbe4 930             | 
3cbe4 930 01 00 00 00 | t1              long    1
3cbe8 931 00 00 00 00 | t2 long 0
3cbec 932 00 00 00 00 | t3 long 0
3cbf0 933 00 00 00 00 | t4 long 0
3cbf4 934             | 
3cbf4 934 00 00 00 00 | rcnt            long    0  'dl repeat count
3cbf8 935 00 00 00 00 | rcnt2           long    0
3cbfc 936 00 00 00 00 | rcnt2a          long    0
3cc00 937 00 00 00 00 | roffset         long    0
3cc04 938 00 00 00 00 | rdl             long    0  'dl repeat line
3cc08 939 00 00 00 00 | dlc             long    0  'dl command
3cc0c 93a             | 
3cc0c 93a FF FF FF FF | affffffff       long    $ffffffff
3cc10 93b 00 00 00 00 | sprite1pointer long 0
3cc14 93c 00 00 00 00 | sprite1xy      long 0
3cc18 93d 00 00 00 00 | sprite1wh      long 0
3cc1c 93e 00 00 00 00 | sprite2pointer long 0
3cc20 93f 00 00 00 00 | sprite2xy      long 0
3cc24 940 00 00 00 00 | sprite2wh      long 0
3cc28 941 00 00 00 00 | sprite3pointer long 0
3cc2c 942 00 00 00 00 | sprite3xy      long 0
3cc30 943 00 00 00 00 | sprite3wh      long 0
3cc34 944 00 00 00 00 | sprite4pointer long 0
3cc38 945 00 00 00 00 | sprite4xy      long 0
3cc3c 946 00 00 00 00 | sprite4wh      long 0
3cc40 947 00 00 00 00 | sprite5pointer long 0
3cc44 948 00 00 00 00 | sprite5xy      long 0
3cc48 949 00 00 00 00 | sprite5wh      long 0
3cc4c 94a 00 00 00 00 | sprite6pointer long 0
3cc50 94b 00 00 00 00 | sprite6xy      long 0
3cc54 94c 00 00 00 00 | sprite6wh      long 0
3cc58 94d 00 00 00 00 | sprite7pointer long 0
3cc5c 94e 00 00 00 00 | sprite7xy      long 0
3cc60 94f 00 00 00 00 | sprite7wh      long 0
3cc64 950 00 00 00 00 | sprite8pointer long 0
3cc68 951 00 00 00 00 | sprite8xy      long 0
3cc6c 952 00 00 00 00 | sprite8wh      long 0
3cc70 953 00 00 00 00 | sprite9pointer long 0
3cc74 954 00 00 00 00 | sprite9xy      long 0
3cc78 955 00 00 00 00 | sprite9wh      long 0
3cc7c 956 00 00 00 00 | sprite10pointer long 0
3cc80 957 00 00 00 00 | sprite10xy      long 0
3cc84 958 00 00 00 00 | sprite10wh      long 0
3cc88 959 00 00 00 00 | sprite11pointer long 0
3cc8c 95a 00 00 00 00 | sprite11xy      long 0
3cc90 95b 00 00 00 00 | sprite11wh      long 0
3cc94 95c 00 00 00 00 | sprite12pointer long 0
3cc98 95d 00 00 00 00 | sprite12xy      long 0
3cc9c 95e 00 00 00 00 | sprite12wh      long 0
3cca0 95f 00 00 00 00 | sprite13pointer long 0
3cca4 960 00 00 00 00 | sprite13xy      long 0
3cca8 961 00 00 00 00 | sprite13wh      long 0
3ccac 962 00 00 00 00 | sprite14pointer long 0
3ccb0 963 00 00 00 00 | sprite14xy      long 0
3ccb4 964 00 00 00 00 | sprite14wh      long 0
3ccb8 965 00 00 00 00 | sprite15pointer long 0
3ccbc 966 00 00 00 00 | sprite15xy      long 0
3ccc0 967 00 00 00 00 | sprite15wh      long 0
3ccc4 968 00 00 00 00 | sprite16pointer long 0
3ccc8 969 00 00 00 00 | sprite16xy      long 0
3cccc 96a 00 00 00 00 | sprite16wh      long 0
3ccd0 96b 00 00 00 00 | sprite17pointer long 0
3ccd4 96c 00 00 00 00 | sprite17xy      long 0
3ccd8 96d 00 00 00 00 | sprite17wh      long 0
3ccdc 96e 00 00 00 00 | sprite18pointer long 0
3cce0 96f 00 00 00 00 | sprite18xy      long 0
3cce4 970 00 00 00 00 | sprite18wh      long 0
3cce8 971 00 00 00 00 | spritenum long 0
3ccec 972             | 
3ccec 972 00 00 00 00 | spriteline long 0
3ccf0 973 84 03 00 00 | sprite_x long 900
3ccf4 974 00 00 00 00 | sprite_y long 0
3ccf8 975 10 00 00 00 | sprite_w long 16
3ccfc 976 40 00 00 00 | sprite_h long 64
3cd00 977 00 00 00 00 | l2 long 0
3cd04 978 00 00 00 00 | t5 long 0
3cd08 979 00 00 00 00 | t6 long 0
3cd0c 97a 00 00 00 00 | t7 long 0
3cd10 97b 00 00 00 00 | t8 long 0
3cd14 97c 00 00 00 00 | t9 long 0
3cd18 97d 00 00 00 00 | preloadaddr long 0
3cd1c 97e 00 00 00 00 | preloadlineaddr long 0
3cd20 97f 00 04 00 00 | a1024 long 1024
3cd24 980             | 
3cd24 980 E0 03 00 00 | aa long 992
3cd28 981 FF 03 00 00 | a1023 long 1023
3cd2c 982 00 10 00 00 | a4096 long 4096
3cd30 983             |  fit 368
3cd30 983             | _psram_spin2_dat_
3cd30 983 00 00 00 00 
      ...             
3ce28 9c1 00 00 00 00 
3ce2c 9c2 00 00 00 00 |     listdata long 0[8*8]
3ce30 9c3             |             orgh
3ce30                 | 
3ce30                 | ' driver state
3ce30     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3ce34     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3ce38                 | 
3ce38                 | ' delay profile
3ce38     07 00 00 00 
3ce3c     00 CF 7B 05 
3ce40     80 D1 F0 08 
3ce44     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3ce48     80 C4 60 0F 
3ce4c     80 39 7A 12 
3ce50     40 2D D9 13 
3ce54     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3ce58                 | 
3ce58                 | ' data to be passed to driver when starting it
3ce58                 | startupData
3ce58     00 00 00 00 |     long    0           ' current frequency
3ce5c     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3ce60     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3ce64     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3ce68     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3ce6c     78 CE 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3ce70     F8 CE 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3ce74     18 CF 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3ce78                 | 
3ce78                 | ' data for memory
3ce78                 | deviceData
3ce78                 |     ' 16 bank parameters follow (16MB per bank)
3ce78     00 00 00 00 
      ...             
3ceb0     00 00 00 00 
3ceb4     00 00 00 00 |     long    0[16]                               ' banks 0-15
3ceb8                 |     ' 16 banks of pin parameters follow
3ceb8     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3cebc     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3cec0     FF FF FF FF 
      ...             
3cef0     FF FF FF FF 
3cef4     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3cef8                 | 
3cef8                 | ' data for COG polling
3cef8                 | qosData 
3cef8     00 00 FF FF 
3cefc     00 00 FF FF 
3cf00     00 00 FF FF 
3cf04     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3cf08     00 00 FF FF 
3cf0c     00 00 FF FF 
3cf10     00 00 FF FF 
3cf14     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3cf18                 |     
3cf18                 | ' mailbox storage
3cf18                 | 
3cf18                 | mailboxes
3cf18     00 00 00 00 
      ...             
3cf70     00 00 00 00 
3cf74     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3cf78                 | 	alignl
3cf78                 | _psram16drv_spin2_dat_
3cf78                 |                             orgh
3cf78     00 00 00 00 
      ...             
3cf90     00 00 00 00 
3cf94     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3cf98                 | 
3cf98                 | driver_start
3cf98                 |                             org
3cf98 000             | '..................................................................................................
3cf98 000             | ' Memory layout for COG RAM once operational:
3cf98 000             | '
3cf98 000             | '  COG RAM address      Usage
3cf98 000             | '  ---------------      ----
3cf98 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3cf98 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3cf98 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3cf98 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3cf98 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3cf98 000             | '  ~$198-$1F3           State and register variables
3cf98 000             | '
3cf98 000             | ' Also during driver COG startup:
3cf98 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3cf98 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3cf98 000             | '..................................................................................................
3cf98 000             |                             
3cf98 000             | ' Mailbox storage after vector initialization
3cf98 000             | 
3cf98 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3cf9c 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3cfa0 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3cfa4 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3cfa8 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3cfac 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3cfb0 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3cfb4 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3cfb8 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3cfbc 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3cfc0 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3cfc4 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3cfc8 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3cfcc 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3cfd0 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3cfd4 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3cfd8 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3cfdc 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3cfe0 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3cfe4 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3cfe8 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3cfec 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3cff0 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3cff4 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3cff8 018             | 
3cff8 018             | ' Mailbox parameter addresses per COG once patched
3cff8 018             |                             
3cff8 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3cffc 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3d000 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3d004 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3d008 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3d00c 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3d010 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3d014 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3d018 020             | 
3d018 020             | '..................................................................................................
3d018 020             | ' Per COG request and state setup and service branching
3d018 020             |         
3d018 020             | cog0                 
3d018 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3d01c 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3d020 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3d024 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3d028 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d02c 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d030 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3d034 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3d038 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3d03c 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d040 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d044 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3d048 02c             | cog1                        
3d048 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3d04c 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3d050 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3d054 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3d058 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d05c 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d060 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3d064 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3d068 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3d06c 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d070 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d074 037 33 CA 63 FD |                             execf   request-0               'jump to service
3d078 038             | cog2                         
3d078 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3d07c 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3d080 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3d084 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3d088 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d08c 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d090 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3d094 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3d098 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3d09c 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d0a0 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d0a4 043 33 CA 63 FD |                             execf   request-0               'jump to service
3d0a8 044             | cog3                        
3d0a8 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3d0ac 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3d0b0 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3d0b4 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3d0b8 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d0bc 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d0c0 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3d0c4 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3d0c8 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3d0cc 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d0d0 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d0d4 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3d0d8 050             | cog4                        
3d0d8 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3d0dc 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3d0e0 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3d0e4 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3d0e8 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d0ec 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d0f0 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3d0f4 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3d0f8 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3d0fc 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d100 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d104 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3d108 05c             | cog5                        
3d108 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3d10c 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3d110 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3d114 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3d118 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d11c 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d120 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3d124 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3d128 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3d12c 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d130 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d134 067 33 CA 63 FD |                             execf   request-0               'jump to service
3d138 068             | cog6                        
3d138 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3d13c 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3d140 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3d144 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3d148 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d14c 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d150 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3d154 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3d158 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3d15c 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d160 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d164 073 33 CA 63 FD |                             execf   request-0               'jump to service
3d168 074             | cog7                        
3d168 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3d16c 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3d170 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3d174 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3d178 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d17c 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d180 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3d184 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3d188 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3d18c 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d190 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d194 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3d198 080             |                             fit     128
3d198 080             | 
3d198 080             |                             fit     128
3d198 080             | pad                         long    0[128-$]                'align init code to $80
3d198 080             | 
3d198 080             | '..................................................................................................
3d198 080             | 
3d198 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3d198 080             | 
3d198 080             | init                        
3d198 080             |                             ' get driver scratch long address in hub
3d198 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3d19c 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3d1a0 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3d1a4 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3d1a8 084             |                     
3d1a8 084             |                             ' read in the additional LUT RAM code
3d1a8 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3d1ac 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3d1b0 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3d1b4 087             | 
3d1b4 087             |                             ' read the startup parameters
3d1b4 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3d1b8 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3d1bc 089             | 
3d1bc 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3d1bc 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3d1c0 08a             | 
3d1c0 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3d1c4 08b 01 00 00 5F 
3d1c8 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3d1cc 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3d1d0 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3d1d4 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3d1d8 090             | 
3d1d8 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3d1d8 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3d1dc 091 01 00 00 FF 
3d1e0 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3d1e4 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3d1e8 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3d1ec 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3d1f0 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3d1f4 097 08 DE 47 F5 |                             or      a, #8
3d1f8 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3d1fc 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3d200 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3d204 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3d208 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3d20c 09d 01 DE 07 F1 |                             add     a, #1
3d210 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3d214 09f             |  
3d214 09f             |                             ' setup device control pin states
3d214 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3d218 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3d21c 0a1 01 00 00 FF 
3d220 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3d224 0a3             | 
3d224 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3d228 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3d22c 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3d230 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3d234 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3d238 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3d23c 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3d240 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3d244 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3d248 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3d24c 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3d250 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3d254 0af             | pinloop
3d254 0af             |                             ' generate minimum CE high time before access
3d254 0af A1 07 00 FF 
3d258 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3d25c 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3d260 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3d264 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3d268 0b4 1F DE 63 FD |                             waitx   a                       'delay
3d26c 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3d270 0b6             | 
3d270 0b6             |                             ' setup the COG mailboxes and addresses 
3d270 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3d274 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3d278 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3d27c 0b9             | 
3d27c 0b9 28 2E 64 FD |                             setq    #24-1
3d280 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3d284 0bb             | 
3d284 0bb             |                             ' setup the polling loop for active COGs 
3d284 0bb 01 C2 63 FD |                             cogid   id
3d288 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3d28c 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3d290 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3d294 0bf 0A F0 07 F6 |                             mov     ptra, #10
3d298 0c0 E1 F1 03 FA |                             mul     ptra, id
3d29c 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3d2a0 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3d2a4 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3d2a8 0c4 03 C2 07 FA |                             mul     id, #3
3d2ac 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3d2b0 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3d2b4 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3d2b8 0c8 D8 01 B0 FD |                             call    #reloadcogs
3d2bc 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3d2c0 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3d2c4 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3d2c4 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3d2c8 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3d2cc 0cd 08 04 DC FC |                             rep     #2, #8
3d2d0 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3d2d4 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3d2d8 0d0             | 
3d2d8 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3d2d8 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3d2d8 0d0 01 C2 63 FD |                             cogid   id
3d2dc 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3d2e0 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3d2e4 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3d2e8 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3d2ec 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3d2f0 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3d2f4 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3d2f8 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3d2fc 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3d300 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3d304 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3d308 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3d30c 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3d310 0de A5 E5 03 F1 |                             add     d, const512
3d314 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3d318 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3d31c 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3d320 0e2             |                             
3d320 0e2             |                             ' setup register values for control vector loop setup after we return
3d320 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3d324 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3d328 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3d32c 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3d330 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3d334 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3d338 0e8 D0 C3 8F F9 |                             altd    id, #id0
3d33c 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3d340 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3d344 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3d348 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3d34c 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3d350 0ee             |  
3d350 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3d354 0ef 07 CA 07 F5 |                             and     request, #7
3d358 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3d35c 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3d360 0f2             |                             fit     $100                    'ensure all init code fits this space
3d360 0f2             | 
3d360 0f2             |                             fit     $100                    'ensure all init code fits this space
3d360 0f2             | 
3d360 0f2 00 00 00 00 
      ...             
3d390 0fe 00 00 00 00 
3d394 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3d398 100             | 
3d398 100             | '..................................................................................................
3d398 100             | ' Error result handling and COG notification of request completion
3d398 100             | 
3d398 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3d39c 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3d3a0 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3d3a4 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3d3a8 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3d3ac 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3d3b0 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3d3b4 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3d3b8 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3d3bc 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3d3c0 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3d3c4 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3d3c8 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3d3cc 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3d3d0 10e             | ' Poller re-starts here after a COG is serviced
3d3d0 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3d3d4 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3d3d8 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3d3dc 111             | ' Main dynamic polling loop repeats until a request arrives
3d3dc 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3d3e0 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3d3e4 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3d3e8 114             | 
3d3e8 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3d3ec 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3d3f0 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3d3f4 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3d3f8 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3d3fc 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3d400 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3d404 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3d408 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3d40c 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3d410 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3d414 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3d418 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3d41c 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3d420 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3d424 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3d428 124             | 
3d428 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3d42c 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3d430 126             |  
3d430 126             | '..................................................................................................
3d430 126             | ' List handler                               
3d430 126             | 
3d430 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3d434 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3d438 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3d43c 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3d440 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3d444 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3d448 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3d44c 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3d450 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3d454 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3d458 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3d45c 131 33 00 60 FD |                             execf   0-0                     'process the request 
3d460 132             | 
3d460 132             | '..................................................................................................
3d460 132             | ' Restoring per COG state and resuming where we left off
3d460 132             | 
3d460 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3d464 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3d468 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3d46c 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3d470 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3d474 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3d478 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3d47c 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3d480 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3d484 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3d488 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3d48c 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3d490 13e             |                    
3d490 13e             | '..................................................................................................
3d490 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3d490 13e             | 
3d490 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3d494 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3d498 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3d49c 141 D0 DF B7 F9 |                             setd    a, #id0
3d4a0 142 D8 DF BF F9 |                             sets    a, #addr1
3d4a4 143 FE FF FF FF 
3d4a8 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3d4ac 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3d4b0 146 3F DE A7 F9 |                             alti    a, #%111_111 
3d4b4 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3d4b8 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3d4bc 149 01 E2 63 FD |                             cogid   c
3d4c0 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3d4c4 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3d4c8 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3d4cc 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3d4d0 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3d4d4 14f 00 E0 03 F6 |                             mov     b, 0-0
3d4d8 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3d4dc 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3d4e0 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3d4e4 153 0C 00 90 AD |             if_z            jmp     #excluded               
3d4e8 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3d4ec 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3d4f0 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3d4f4 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3d4f8 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3d4fc 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3d500 15a             | 
3d500 15a             | 'determine priority cogs and build instructions for the polling sequence
3d500 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3d504 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3d508 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3d50c 15d             | 
3d50c 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3d510 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3d514 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3d518 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3d51c 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3d520 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3d524 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3d528 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3d52c 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3d530 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3d534 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3d538 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3d53c 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3d540 16a             | endprioloop
3d540 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3d544 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3d548 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3d54c 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3d550 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3d554 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3d558 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3d55c 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3d560 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3d564 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3d568 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3d56c 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3d570 176             | 
3d570 176             | ' populate the round robin COG polling instructions
3d570 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3d574 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3d578 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3d57c 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3d580 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3d584 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3d588 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3d58c 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3d590 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3d594 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3d598 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3d59c 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3d5a0 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3d5a4 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3d5a8 184             | '..................................................................................................
3d5a8 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3d5a8 184             | 
3d5a8 184             | set_latency                                                 '            (a) set latency
3d5a8 184             | get_latency                                                 '            (b) get latency
3d5a8 184             | set_burst                                                   '            (c) set burst size of bank
3d5a8 184             | get_burst                                                   '            (d) get burst size of bank
3d5a8 184             |                                                             '            (e) dump state
3d5a8 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3d5ac 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3d5b0 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3d5b4 187             |                                                             ' | | | | e  account for following AUGS
3d5b4 187 04 00 00 FF 
3d5b8 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3d5bc 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3d5c0 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3d5c4 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3d5c8 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3d5cc 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3d5d0 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3d5d4 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3d5d8 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3d5dc 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3d5e0 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3d5e4 193             | 
3d5e4 193             | '..................................................................................................
3d5e4 193             | ' Misc EXECF code
3d5e4 193             | 
3d5e4 193 33 72 63 FD | start_read_exec             execf   newburstr
3d5e8 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3d5ec 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3d5f0 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3d5f4 197             | 
3d5f4 197             | '..................................................................................................
3d5f4 197             | ' Variables
3d5f4 197             | 
3d5f4 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3d5f8 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3d5fc 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3d600 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3d604 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3d608 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3d60c 19d             | 
3d60c 19d 00 00 00 80 | xfreq1          long    $80000000
3d610 19e 00 00 00 40 | xfreq2          long    $40000000
3d614 19f 03 00 00 00 | delay           long    3
3d618 1a0             | 
3d618 1a0             | lutcodeaddr                 
3d618 1a0             | startupparams
3d618 1a0             | excludedcogs                                    'careful: shared register use!
3d618 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3d61c 1a1 00 00 00 00 | flags           long    0
3d620 1a2             | mask                                            'careful: shared register use!
3d620 1a2 00 00 00 00 | resetmaskA      long    0
3d624 1a3             | limit                                           'careful: shared register use!
3d624 1a3 00 00 00 00 | resetmaskB      long    0
3d628 1a4 00 00 00 00 | datapins        long    0
3d62c 1a5             | const512                                        'careful: shared register use!
3d62c 1a5 00 00 00 00 | devicelist      long    0
3d630 1a6 00 00 00 00 | coglist         long    0
3d634 1a7 00 00 00 00 | mbox            long    0 
3d638 1a8             | 
3d638 1a8             | clkpin                                          'shared with code patched during init
3d638 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3d63c 1a9             | cspin                                           'shared with code patched during init
3d63c 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3d640 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3d644 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3d648 1ac 01 00 00 00 | clkdelay        long    1
3d64c 1ad 00 00 00 00 | regdatabus      long    0
3d650 1ae             | 
3d650 1ae 10 00 00 00 | deviceaddr      long    $10
3d654 1af             | rrcounter
3d654 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3d658 1b0             | 
3d658 1b0             | ' jump addresses for the per COG handlers
3d658 1b0 20 00 00 00 | cog0_handler    long    cog0
3d65c 1b1 2C 00 00 00 | cog1_handler    long    cog1
3d660 1b2 38 00 00 00 | cog2_handler    long    cog2
3d664 1b3 44 00 00 00 | cog3_handler    long    cog3
3d668 1b4 50 00 00 00 | cog4_handler    long    cog4
3d66c 1b5 5C 00 00 00 | cog5_handler    long    cog5
3d670 1b6 68 00 00 00 | cog6_handler    long    cog6
3d674 1b7 74 00 00 00 | cog7_handler    long    cog7
3d678 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3d67c 1b9             | 
3d67c 1b9             | ' EXECF sequences
3d67c 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3d680 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3d684 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3d688 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3d68c 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3d690 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3d694 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3d698 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3d698 1c0             | 
3d698 1c0             | 
3d698 1c0             | ' SKIPF sequences
3d698 1c0             | skiptable
3d698 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3d69c 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3d6a0 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3d6a4 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3d6a8 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3d6ac 1c5 00 00 00 00 | pattern2        long    0
3d6b0 1c6 00 00 00 00 | pattern3        long    0
3d6b4 1c7 77 02 00 00 | singlelong      long    %1001110111  
3d6b8 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3d6bc 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3d6c0 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3d6c4 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3d6c8 1cc             | 
3d6c8 1cc             | ' LUT RAM address values
3d6c8 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3d6cc 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3d6d0 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3d6d4 1cf F6 02 00 00 | noread          long    noread_lut
3d6d8 1d0             | 
3d6d8 1d0 00 00 00 00 | id0             long    0
3d6dc 1d1 01 00 00 00 | id1             long    1
3d6e0 1d2 02 00 00 00 | id2             long    2
3d6e4 1d3 03 00 00 00 | id3             long    3
3d6e8 1d4 04 00 00 00 | id4             long    4
3d6ec 1d5 05 00 00 00 | id5             long    5
3d6f0 1d6 06 00 00 00 | id6             long    6
3d6f4 1d7 07 00 00 00 | id7             long    7
3d6f8 1d8             | 
3d6f8 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3d6f8 1d8             | 'and COG updates and need to follow immediately after id0-id7
3d6f8 1d8 00 00 00 00 | addr1           long    0
3d6fc 1d9 00 00 00 00 | hubdata         long    0
3d700 1da 00 00 00 00 | count           long    0
3d704 1db 00 00 00 00 | addr2           long    0
3d708 1dc 00 00 00 00 | total           long    0
3d70c 1dd 00 00 00 00 | offset1         long    0
3d710 1de 00 00 00 00 | offset2         long    0
3d714 1df 00 00 00 00 | link            long    0
3d718 1e0             | 
3d718 1e0             | burstwrite                                      'note shared register use during init
3d718 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3d71c 1e1 00 00 00 00 | id              long    0
3d720 1e2             | 
3d720 1e2 00 00 00 00 | header          long    0
3d724 1e3 00 00 00 00 | trailer         long    0
3d728 1e4 00 00 00 00 | cmdaddr         long    0
3d72c 1e5 00 00 00 00 | request         long    0
3d730 1e6 00 00 00 00 | rrlimit         long    0
3d734 1e7 00 00 00 00 | pinconfig       long    0
3d738 1e8 00 00 00 00 | clks            long    0
3d73c 1e9 00 00 00 00 | resume          long    0
3d740 1ea 00 00 00 00 | orighubsize     long    0
3d744 1eb 00 00 00 00 | wrclks          long    0
3d748 1ec             | 
3d748 1ec 00 00 00 00 | pattern         long    0
3d74c 1ed 00 00 00 00 | hubscratch      long    0
3d750 1ee 00 10 00 00 | val4k           long    4096
3d754 1ef             | 
3d754 1ef             | ' temporary general purpose regs
3d754 1ef 00 00 00 00 | a               long    0
3d758 1f0 00 00 00 00 | b               long    0
3d75c 1f1 00 00 00 00 | c               long    0
3d760 1f2 00 00 00 00 | d               long    0
3d764 1f3             |                 fit     502
3d764 1f3             | 
3d764 1f3             |                 fit     502
3d764 1f3             | 
3d764 1f3             | '..................................................................................................
3d764 1f3             | 
3d764 1f3             |             orgh
3d764                 | 
3d764                 | lut_code
3d764                 | 'HW init code up to 80 longs
3d764                 | 
3d764                 | '..................................................................................................
3d764                 | ' Memory layout for LUT RAM once operational:
3d764                 | '
3d764                 | '  LUT RAM address      Usage
3d764                 | '  ---------------      ----
3d764                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3d764                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3d764                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3d764                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3d764                 | '
3d764                 | ' Also during driver COG startup:
3d764                 | ' $230-$24F is used for HW init setup
3d764                 | ' $250-$26F is used as temporary vector storage 
3d764                 | '..................................................................................................
3d764                 | 
3d764                 |                 org $230    
3d764 230             | 
3d764 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3d764 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3d768 231 24 16 60 FD |                             pollxfi
3d76c 232 FF AA 2A FF 
3d770 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3d774 234 28 00 B0 FD |                             call    #sendqspi
3d778 235 07 F8 07 FF 
3d77c 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3d780 237 28 00 B0 FD |                             call    #sendspi
3d784 238 F8 07 78 FF 
3d788 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3d78c 23a 1C 00 B0 FD |                             call    #sendspi
3d790 23b 7F 78 78 FF 
3d794 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3d798 23d 10 00 B0 FD |                             call    #sendspi 
3d79c 23e 2D 00 64 FD |                             ret
3d7a0 23f             | 
3d7a0 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3d7a4 240 32 0C 64 FD |                             skipf   #%110
3d7a8 241 9C EF 03 F6 |                             mov     pb, xsendimm
3d7ac 242             | 
3d7ac 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3d7b0 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3d7b4 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3d7b8 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3d7bc 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3d7c0 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3d7c4 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3d7c8 249 50 48 63 FD |                             fltl    datapins                'float data bus
3d7cc 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3d7d0 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3d7d4 24c             | 
3d7d4 24c 00 00 00 00 
3d7d8 24d 00 00 00 00 
3d7dc 24e 00 00 00 00 
3d7e0 24f 00 00 00 00 |                 long    0[$270-32-$]
3d7e4 250             |                 fit     $270-32  ' keep room for 32 vector longs
3d7e4 250             |     
3d7e4 250             |                 fit     $270-32  ' keep room for 32 vector longs
3d7e4 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3d7e4 250             | rw_vect ' PSRAM jump vectors
3d7e4 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3d7e8 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3d7ec 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3d7f0 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3d7f4 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3d7f8 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3d7fc 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3d800 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3d804 258             | ro_vect ' R/O PSRAM jump vectors
3d804 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3d808 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3d80c 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3d810 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3d814 25c 00 01 00 00 |                 long    unsupported
3d818 25d 00 01 00 00 |                 long    unsupported
3d81c 25e 00 01 00 00 |                 long    unsupported
3d820 25f 00 01 00 00 |                 long    unsupported
3d824 260             | ctrl_vect ' Control jump vectors
3d824 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3d828 261 00 01 00 00 |                 long    unsupported
3d82c 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3d830 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3d834 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3d838 265 00 01 00 00 |                 long    unsupported
3d83c 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3d840 267 3E 01 00 00 |                 long    reconfig 
3d844 268             | no_vect ' Invalid bank jump vectors
3d844 268 01 01 00 00 |                 long    invalidbank
3d848 269 01 01 00 00 |                 long    invalidbank
3d84c 26a 01 01 00 00 |                 long    invalidbank
3d850 26b 01 01 00 00 |                 long    invalidbank
3d854 26c 01 01 00 00 |                 long    invalidbank
3d858 26d 01 01 00 00 |                 long    invalidbank
3d85c 26e 01 01 00 00 |                 long    invalidbank
3d860 26f 01 01 00 00 |                 long    invalidbank
3d864 270             |                 fit     $270
3d864 270             | 
3d864 270             |                 fit     $270
3d864 270             | '..................................................................................................
3d864 270             | ' PSRAM READS
3d864 270             |                                                             ' a b c d e f
3d864 270             |                                                             ' B W L B R L  (a) byte read
3d864 270             |                                                             ' Y O O U E O  (b) word read
3d864 270             |                                                             ' T R N R S C  (c) long read
3d864 270             |                                                             ' E D G S U K  (d) new burst read
3d864 270             |                                                             '       T M E  (e) resumed sub-burst
3d864 270             |                                                             '         E D  (f) locked sub-burst
3d864 270             | 
3d864 270             | 
3d864 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3d868 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3d86c 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3d870 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3d874 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3d878 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3d87c 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3d880 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3d884 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3d888 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3d88c 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3d890 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3d894 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3d898 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3d89c 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3d8a0 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3d8a4 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3d8a8 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3d8ac 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3d8b0 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3d8b4 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3d8b8 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3d8bc 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3d8c0 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3d8c4 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3d8c8 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3d8cc 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3d8d0 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3d8d4 28c             | 
3d8d4 28c             |                             ' fall through to read bursts
3d8d4 28c             |                         
3d8d4 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3d8d4 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3d8d8 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3d8dc 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3d8e0 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3d8e4 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3d8e8 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3d8ec 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3d8f0 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3d8f4 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3d8f8 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3d8fc 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3d900 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3d904 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3d908 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3d90c 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3d910 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3d914 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3d918 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3d91c 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3d920 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3d924 2a0 E8 D1 03 F1 |                             add     clks, clks
3d928 2a1             | readcommon
3d928 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3d92c 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3d930 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3d934 2a4             | 
3d934 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3d938 2a5 69 C8 63 FD |                             rev     cmdaddr
3d93c 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3d940 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3d944 2a8             | 
3d944 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3d948 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3d94c 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3d94c 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3d950 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3d954 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3d958 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3d95c 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3d95c 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3d960 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3d964 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3d968 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3d96c 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3d970 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3d974 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3d974 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3d978 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3d97c 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3d980 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3d984 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3d988 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3d98c 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3d990 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3d994 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3d998 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3d99c 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3d9a0 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3d9a4 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3d9a8 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3d9ac 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3d9ac 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3d9b0 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3d9b4 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3d9b8 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3d9bc 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3d9c0 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3d9c4 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3d9c8 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3d9cc 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3d9d0 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3d9d4 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3d9d8 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3d9dc 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3d9e0 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3d9e4 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3d9e8 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3d9ec 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3d9f0 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3d9f4 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3d9f8 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3d9fc 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3da00 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3da04 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3da08 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3da0c 2da 10 03 90 FD |                             jmp     #writecommon
3da10 2db             | 
3da10 2db             | '..................................................................................................
3da10 2db             | ' Burst continuation testing
3da10 2db             | 
3da10 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3da14 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3da18 2dd             | continue_read_lut          
3da18 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3da1c 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3da20 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3da24 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3da28 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3da2c 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3da30 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3da34 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3da38 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3da3c 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3da40 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3da44 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3da48 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3da4c 2ea             | 
3da4c 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3da50 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3da54 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3da58 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3da5c 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3da60 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3da64 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3da68 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3da6c 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3da70 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3da74 2f4 2A 1C 66 0D |             _ret_           push    #poller
3da78 2f5             | 
3da78 2f5             | 
3da78 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3da7c 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3da7c 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3da80 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3da84 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3da88 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3da8c 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3da90 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3da94 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3da98 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3da9c 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3daa0 2ff             | '..................................................................................................
3daa0 2ff             | ' Completion of requests
3daa0 2ff             | 
3daa0 2ff             | complete_rw_lut             
3daa0 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3daa4 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3daa8 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3daac 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3dab0 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3dab4 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3dab8 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3dabc 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3dac0 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3dac4 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3dac8 309 32 62 64 AD |             if_z            skipf   #%110001
3dacc 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3dad0 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3dad4 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3dad8 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3dadc 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3dae0 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3dae4 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3dae8 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3daec 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3daf0 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3daf4 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3daf8 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3dafc 316             |                                                             ' skipcase (a) gfx copy to/from hub
3dafc 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3dafc 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3dafc 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3db00 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3db04 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3db08 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3db0c 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3db10 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3db14 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3db18 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3db1c 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3db20 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3db24 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3db28 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3db2c 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3db30 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3db34 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3db38 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3db3c 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3db40 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3db44 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3db48 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3db4c 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3db50 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3db54 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3db58 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3db5c 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3db60 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3db64 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3db68 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3db6c 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3db70 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3db74 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3db78 335 DF B7 03 A6 |             if_z            mov     addr2, link
3db7c 336 34 FF 9F AD |             if_z            jmp     #checknext
3db80 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3db84 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3db88 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3db8c 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3db90 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3db94 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3db98 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3db9c 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3dba0 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3dba4 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3dba8 341             | 
3dba8 341             | '..................................................................................................
3dba8 341             | ' PSRAM WRITES
3dba8 341             |                                                             '  a b c d e f g h
3dba8 341             | 
3dba8 341             |                                                             '  B W L F B R L L (a) byte write(s)
3dba8 341             |                                                             '  Y O O I U E O O (b) word write(s)
3dba8 341             |                                                             '  T R N L R S C C (c) long write(s)
3dba8 341             |                                                             '  E D G L S U K K (d) resumed fill
3dba8 341             |                                                             '          T M E E (e) new burst write
3dba8 341             |                                                             '            E D D (f) resumed burst
3dba8 341             |                                                             '              F B (g) locked fill
3dba8 341             |                                                             '              I U (h) locked burst write
3dba8 341             |                                                             '              L R 
3dba8 341             |                                                             '              L S 
3dba8 341             |                                                             '                T 
3dba8 341             | 
3dba8 341             | w_single                   
3dba8 341             | w_fill_cont           
3dba8 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3dbac 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3dbb0 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3dbb4 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3dbb8 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3dbbc 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3dbc0 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3dbc4 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3dbc8 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3dbcc 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3dbd0 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3dbd4 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3dbd8 34d             |                ' disable call to r_resume_burst for single longs when z=0
3dbd8 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3dbdc 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3dbe0 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3dbe4 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3dbe8 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3dbec 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3dbf0 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3dbf4 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3dbf8 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3dbfc 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3dc00 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3dc04 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3dc08 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3dc0c 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3dc10 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3dc14 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3dc18 35d             |         
3dc18 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3dc18 35d             |             '
3dc18 35d             |             '  At least one of these 3 optional components will be sent
3dc18 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3dc18 35d             |             '     body - N x full longs of data
3dc18 35d             |             '     trailer - last partial long of data
3dc18 35d             |             '
3dc18 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3dc18 35d             |             '
3dc18 35d             |             'Case    Type                           Sends
3dc18 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3dc18 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3dc18 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3dc18 35d             |             ' 4)     Multiple long fill             body only
3dc18 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3dc18 35d             | 
3dc18 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3dc18 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3dc1c 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3dc20 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3dc24 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3dc28 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3dc2c 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3dc30 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3dc34 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3dc38 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3dc3c 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3dc40 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3dc44 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3dc48 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3dc4c 36a             |                             
3dc4c 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3dc50 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3dc54 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3dc58 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3dc5c 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3dc60 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3dc64 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3dc68 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3dc6c 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3dc70 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3dc74 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3dc78 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3dc7c 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3dc80 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3dc84 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3dc88 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3dc8c 37a             | 
3dc8c 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3dc90 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3dc94 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3dc98 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3dc9c 37e             |                  
3dc9c 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3dca0 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3dca4 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3dca8 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3dcac 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3dcb0 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3dcb4 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3dcb8 385             | 
3dcb8 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3dcbc 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3dcc0 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3dcc4 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3dcc8 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3dccc 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3dcd0 38b             | 
3dcd0 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3dcd0 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3dcd4 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3dcd8 38d 2A B0 63 FD |                             push    addr1                   'save address
3dcdc 38e             | 
3dcdc 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3dcdc 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3dce0 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3dce4 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3dce8 391             |             
3dce8 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3dcec 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3dcf0 393 2B B0 63 FD |                             pop     addr1                   'restore address
3dcf4 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3dcf8 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3dcfc 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3dd00 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3dd04 398             | 
3dd04 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3dd08 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3dd0c 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3dd10 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3dd14 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3dd18 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3dd1c 39e             | 
3dd1c 39e             |                             'trailer is done
3dd1c 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3dd20 39f             | 
3dd20 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3dd24 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3dd28 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3dd2c 3a2             | 
3dd2c 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3dd30 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3dd34 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3dd38 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3dd3c 3a6             |                             
3dd3c 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3dd40 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3dd44 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3dd48 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3dd4c 3aa             |                                                          
3dd4c 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3dd50 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3dd54 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3dd58 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3dd5c 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3dd60 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3dd64 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3dd68 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3dd6c 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3dd70 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3dd74 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3dd78 3b5             |  
3dd78 3b5 59 52 63 FD |                             drvh    cspin
3dd7c 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3dd80 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3dd84 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3dd88 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3dd8c 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3dd90 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3dd94 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3dd98 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3dd9c 3be EA E5 03 F6 |                             mov     d, orighubsize
3dda0 3bf EF E5 63 F0 |                             shl     d, a
3dda4 3c0 F2 E3 83 F1 |                             sub     c, d
3dda8 3c1 DD E3 03 F1 |                             add     c, offset1
3ddac 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3ddb0 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3ddb4 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3ddb8 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3ddbc 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3ddc0 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3ddc4 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3ddc8 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3ddcc 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3ddd0 3cb BB D3 03 F6 |                             mov     resume, restorefill
3ddd4 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3ddd8 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3dddc 3ce 6C FC BF CD |             if_c            call    #yield
3dde0 3cf 2D 00 64 FD |                             ret
3dde4 3d0             |                            
3dde4 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3dde4 3d0             |                       '     rczl    pa                      'rotate left into address offset
3dde4 3d0             |                       '     rczl    c wcz                   'restore count and flags
3dde4 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3dde8 3d1 02 EC 67 F0 |                             shl     pa, #2
3ddec 3d2 28 06 64 AD |             if_z            setq    #3
3ddf0 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3ddf4 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3ddf8 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3ddfc 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3de00 3d7             | 
3de00 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3de04 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3de08 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3de0c 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3de10 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3de14 3dc             |                 fit 1024-32
3de14 3dc             |         
3de14 3dc             | 
3de14 3dc             | '..................................................................................................
3de14 3dc             | 
3de14 3dc             |                 fit 1024-32
3de14 3dc 00 00 00 00 
3de18 3dd 00 00 00 00 
3de1c 3de 00 00 00 00 
3de20 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3de24 3e0             |                 org 1024-32
3de24 000             | 
3de24 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3de24 000 00 00 00 00 |                 long $0000
3de28 001 11 11 00 00 |                 long $1111
3de2c 002 22 22 00 00 |                 long $2222
3de30 003 33 33 00 00 |                 long $3333
3de34 004 44 44 00 00 |                 long $4444
3de38 005 55 55 00 00 |                 long $5555
3de3c 006 66 66 00 00 |                 long $6666
3de40 007 77 77 00 00 |                 long $7777
3de44 008 88 88 00 00 |                 long $8888
3de48 009 99 99 00 00 |                 long $9999
3de4c 00a AA AA 00 00 |                 long $aaaa
3de50 00b BB BB 00 00 |                 long $bbbb
3de54 00c CC CC 00 00 |                 long $cccc
3de58 00d DD DD 00 00 |                 long $dddd
3de5c 00e EE EE 00 00 |                 long $eeee
3de60 00f FF FF 00 00 |                 long $ffff
3de64 010             | 
3de64 010             | 'masks
3de64 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3de68 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3de6c 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3de70 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3de74 014             | 
3de74 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3de78 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3de7c 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3de80 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3de84 018             | 
3de84 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3de88 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3de8c 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3de90 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3de94 01c             | 
3de94 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3de98 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3de9c 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3dea0 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3dea4 020             |         fit 1024
3dea4 020             | 
3dea4 020             |         fit 1024
3dea4 020             | 
3dea4 020             | '--------------------------------------------------------------------------------------------------
3dea4 020             |         orgh
3dea4                 | 
3dea4                 | gfxexpansion
3dea4                 |                             'simple line drawing graphics expansion of memory driver
3dea4                 |                             'jmp     #donerepeats                'just return for now
3dea4                 | 
3dea4     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3dea8     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3deac     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3deb0     DD E1 03 F6 |                             mov     b, offset1              'get error term
3deb4     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3deb8     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3debc     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3dec0     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3dec4     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3dec8     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3decc     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3ded0     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3ded4     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3ded8     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3dedc     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3dee0     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3dee4     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3dee8     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3deec     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3def0     DC E5 33 F9 |                             getword d, total, #0            'get line width
3def4     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3def8     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3defc     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3df00     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3df04     C3 03 80 FD |                             jmp     #readmask               'continue filling
3df08                 | 	alignl
3df08                 | _usbnew_spin2_dat_
3df08                 |                 org     $000
3df08 000             | 
3df08 000             | usb_host_start
3df08 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3df0c 001             | 
3df0c 001 03 00 00 FF 
3df10 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3df14 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3df18 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3df1c 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3df20 006 29 70 63 FD |                 setq2   htmp
3df24 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3df28 008             | 
3df28 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3df2c 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3df30 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3df34 00b             | 
3df34 00b             | '------------------------------------------------------------------------------
3df34 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3df34 00b             | ' special because the receiving function must not respond with either STALL or
3df34 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3df34 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3df34 00b             | ' corrupt packet, it must ignore the transaction
3df34 00b             | '------------------------------------------------------------------------------
3df34 00b             | ' On entry:
3df34 00b             | '   PTRA - start address of the SETUP data struct.
3df34 00b             | ' On exit:
3df34 00b             | '   retval - PID_ACK on success, otherwise error code.
3df34 00b             | '------------------------------------------------------------------------------
3df34 00b             | txn_setup
3df34 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3df38 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3df3c 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3df40 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3df44 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3df48 010             | .setup
3df48 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3df4c 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3df50 012 2D 00 64 AD |         if_z    ret
3df54 013 7C 0B B0 FD |                 call    #retry_wait
3df58 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3df5c 015 2D 00 64 AD |         if_z    ret
3df60 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3df64 017 E0 FF 9F FD |                 jmp     #.setup
3df68 018             | 
3df68 018             | '------------------------------------------------------------------------------
3df68 018             | ' IN/INTERRUPT transaction.
3df68 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3df68 018             | '------------------------------------------------------------------------------
3df68 018             | ' On entry:
3df68 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3df68 018             | '     CRC(b19..23).
3df68 018             | ' On exit:
3df68 018             | '------------------------------------------------------------------------------
3df68 018             | txn_in
3df68 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3df6c 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3df70 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3df74 01b             | 
3df74 01b             |                 ' Fall through to urx_packet
3df74 01b             | 
3df74 01b             | '------------------------------------------------------------------------------
3df74 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3df74 01b             | ' received are handshakes and IN DATAx.
3df74 01b             | '------------------------------------------------------------------------------
3df74 01b             | ' On entry:
3df74 01b             | ' On exit:
3df74 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3df74 01b             | '     returned.
3df74 01b             | '------------------------------------------------------------------------------
3df74 01b             | urx_packet
3df74 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3df78 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3df7c 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3df80 01e 1A 92 63 FD |                 getct   hct2
3df84 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3df88 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3df8c 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3df90 022             | .wait_sop
3df90 022 22 A7 8A FA |                 rdpin   urx, dm
3df94 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3df98 024 08 00 90 CD |         if_c    jmp     #.get_pid
3df9c 025 FC 25 CC FB |                 jnct2   #.wait_sop
3dfa0 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3dfa4 027             | .get_pid
3dfa4 027 28 02 B0 FD |                 call    #urx_next
3dfa8 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3dfac 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3dfb0 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3dfb4 02b             | .chk_pid
3dfb4 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3dfb8 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3dfbc 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3dfc0 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3dfc4 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3dfc8 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3dfcc 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3dfd0 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3dfd4 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3dfd8 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3dfdc 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3dfe0 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3dfe4 037             | .ack_resend
3dfe4 037 22 A7 82 FA |                 rqpin   urx, dm
3dfe8 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3dfec 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3dff0 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3dff4 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3dff8 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3dffc 03d             | .chk_eop
3dffc 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3e000 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3e004 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3e008 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3e00c 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3e010 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3e014 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3e018 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3e01c 045 2D 00 64 FD |                 ret
3e020 046             | .idle
3e020 046 22 A7 82 FA |                 rqpin   urx, dm
3e024 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3e028 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3e02c 049 2D 00 64 FD |                 ret
3e030 04a             | 
3e030 04a             | '------------------------------------------------------------------------------
3e030 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3e030 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3e030 04a             | ' if one is required.
3e030 04a             | '------------------------------------------------------------------------------
3e030 04a             | ' On entry:
3e030 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3e030 04a             | ' On exit:
3e030 04a             | '------------------------------------------------------------------------------
3e030 04a             | utx_token
3e030 04a 22 A7 82 FA |                 rqpin   urx, dm
3e034 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3e038 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3e03c 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3e040 04e 34 0D B0 CD |         if_c    call    #utx_pre
3e044 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3e048 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3e04c 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3e050 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3e054 053             | .next_byte
3e054 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3e058 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3e05c 055             | .wait
3e05c 055 40 46 72 FD |                 testp   dp                      wc
3e060 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3e064 057 23 03 08 FC |                 akpin   dp
3e068 058 22 A5 22 FC |                 wypin   utx, dm
3e06c 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3e070 05a             | 
3e070 05a             | '------------------------------------------------------------------------------
3e070 05a             | ' SETUP/OUT/INTERRUPT transaction.
3e070 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3e070 05a             | '------------------------------------------------------------------------------
3e070 05a             | ' On entry:
3e070 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3e070 05a             | '     CRC(b19..23).
3e070 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3e070 05a             | '   pkt_data - count of DATAx payload bytes to send.
3e070 05a             | ' On exit:
3e070 05a             | '------------------------------------------------------------------------------
3e070 05a             | txn_out
3e070 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3e074 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3e078 05c 00 00 C0 FF 
3e07c 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3e080 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3e084 05f             | 
3e084 05f             |                 ' Fall through to utx_data
3e084 05f             | 
3e084 05f             | '------------------------------------------------------------------------------
3e084 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3e084 05f             | ' calculated while the data byte is being shifted out. Since data stage
3e084 05f             | ' success/fail is not determined until the status stage of the transaction,
3e084 05f             | ' this routine is only concerned about the current DATAx packet.
3e084 05f             | '------------------------------------------------------------------------------
3e084 05f             | ' On entry:
3e084 05f             | '   PTRA - hub start address of the data to read.
3e084 05f             | '   pkt_cnt - data payload size.
3e084 05f             | ' On exit:
3e084 05f             | '------------------------------------------------------------------------------
3e084 05f             | utx_data
3e084 05f 22 A7 82 FA |                 rqpin   urx, dm
3e088 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3e08c 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3e090 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3e094 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3e098 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3e09c 065 D8 0C B0 CD |         if_c    call    #utx_pre
3e0a0 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3e0a4 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3e0a8 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3e0ac 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3e0b0 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3e0b4 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3e0b8 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3e0bc 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3e0c0 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3e0c4 06f             | .read_byte
3e0c4 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3e0c8 070 F0 00 B0 FD |                 call    #utx_byte
3e0cc 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3e0d0 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3e0d4 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3e0d8 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3e0dc 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3e0e0 076             | .send_crc
3e0e0 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3e0e4 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3e0e8 078 D0 00 B0 FD |                 call    #utx_byte
3e0ec 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3e0f0 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3e0f4 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3e0f8 07c             | 
3e0f8 07c             | '------------------------------------------------------------------------------
3e0f8 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3e0f8 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3e0f8 07c             | ' expects that the packet includes at least the CRC word.
3e0f8 07c             | '
3e0f8 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3e0f8 07c             | ' was requested, which makes it difficult to determine where the data stops
3e0f8 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3e0f8 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3e0f8 07c             | ' USB-16 expected residual value of 0xB001.
3e0f8 07c             | '
3e0f8 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3e0f8 07c             | ' so the caller can verify IN success before writing the data to its final
3e0f8 07c             | ' destination.
3e0f8 07c             | '------------------------------------------------------------------------------
3e0f8 07c             | ' On entry:
3e0f8 07c             | '   pkt_data - max byte count expected to be in the packet.
3e0f8 07c             | '   newb_flg - signals new byte ready when toggled.
3e0f8 07c             | ' On exit:
3e0f8 07c             | '   pkt_cnt - actual number of bytes read.
3e0f8 07c             | '------------------------------------------------------------------------------
3e0f8 07c             | urx_data
3e0f8 07c F7 75 03 F6 |                 mov     htmp2, pb
3e0fc 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3e100 07e 00 00 C0 FF 
3e104 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3e108 080 BA EF 03 F6 |                 mov     pb, htmp2
3e10c 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3e110 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3e114 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3e118 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3e11c 085             | .wait_byte
3e11c 085             | ' In-line rx for max speed
3e11c 085 22 A7 82 FA |                 rqpin   urx, dm
3e120 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3e124 087 53 A5 02 F5 |                 and     utx, urx
3e128 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3e12c 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3e130 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3e134 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3e138 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3e13c 08d DC FF 9F FD |                 jmp     #.wait_byte
3e140 08e             | .get_byte
3e140 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3e144 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3e148 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3e14c 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3e150 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3e154 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3e158 094             | .end_crc
3e158 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3e15c 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3e160 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3e164 097 2D 00 64 1D |         if_a    ret
3e168 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3e168 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3e168 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3e168 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3e168 098 22 A7 82 FA |                 rqpin   urx, dm
3e16c 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3e170 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3e174 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3e174 09b             | .chk_crc
3e174 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3e178 09c 58 00 00 FF 
3e17c 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3e180 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3e184 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3e188 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3e18c 0a1 34 09 B0 FD |                 call    #poll_waitx
3e190 0a2             | 
3e190 0a2             |                 ' Fall through to utx_handshake
3e190 0a2             | 
3e190 0a2             | '------------------------------------------------------------------------------
3e190 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3e190 0a2             | ' the appropriate IP delay has been inserted.
3e190 0a2             | '------------------------------------------------------------------------------
3e190 0a2             | ' On entry:
3e190 0a2             | '   retval - handshake PID to send.
3e190 0a2             | ' On exit:
3e190 0a2             | '   retval unchanged.
3e190 0a2             | '------------------------------------------------------------------------------
3e190 0a2             | utx_handshake
3e190 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3e194 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3e198 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3e19c 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3e1a0 0a6 5F A5 02 F6 |                 mov     utx, retval
3e1a4 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3e1a8 0a8             | .idle
3e1a8 0a8 22 A7 82 FA |                 rqpin   urx, dm
3e1ac 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3e1b0 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3e1b4 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3e1b8 0ac 08 09 90 FD |                 jmp     #poll_waitx
3e1bc 0ad             | 
3e1bc 0ad             | '------------------------------------------------------------------------------
3e1bc 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3e1bc 0ad             | '------------------------------------------------------------------------------
3e1bc 0ad             | ' On entry:
3e1bc 0ad             | '   utx - byte to transmit.
3e1bc 0ad             | ' On exit:
3e1bc 0ad             | '------------------------------------------------------------------------------
3e1bc 0ad             | utx_byte
3e1bc 0ad 40 46 72 FD |                 testp   dp                      wc
3e1c0 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3e1c4 0af 23 03 08 FC |                 akpin   dp
3e1c8 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3e1cc 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3e1d0 0b2             | 
3e1d0 0b2             | '------------------------------------------------------------------------------
3e1d0 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3e1d0 0b2             | '------------------------------------------------------------------------------
3e1d0 0b2             | ' On entry:
3e1d0 0b2             | ' On exit:
3e1d0 0b2             | '   retval - the byte read.
3e1d0 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3e1d0 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3e1d0 0b2             | '     received.
3e1d0 0b2             | '------------------------------------------------------------------------------
3e1d0 0b2             | urx_next
3e1d0 0b2 22 A7 8A FA |                 rdpin   urx, dm
3e1d4 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3e1d8 0b4 53 A5 02 F5 |                 and     utx, urx
3e1dc 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3e1e0 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3e1e4 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3e1e8 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3e1ec 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3e1f0 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3e1f4 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3e1f8 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3e1fc 0bd 2D 00 64 FD |                 ret
3e200 0be             | 
3e200 0be             | '------------------------------------------------------------------------------
3e200 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3e200 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3e200 0be             | ' length, and the PID is not included in the CRC calculation:
3e200 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3e200 0be             | '  CRC5  ENDP ADDRESS PID
3e200 0be             | ' %00000_1111_1111111_xxxxxxxx
3e200 0be             | '------------------------------------------------------------------------------
3e200 0be             | ' On entry:
3e200 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3e200 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3e200 0be             | ' On exit:
3e200 0be             | '   ep_addr_pid - CRC value appended to the packet.
3e200 0be             | '------------------------------------------------------------------------------
3e200 0be             | calc_crc5
3e200 0be FF 03 00 FF 
3e204 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3e208 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
3e20c 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3e210 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3e214 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
3e218 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3e21c 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3e220 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3e224 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3e228 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3e22c 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
3e230 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3e234 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
3e238 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3e23c 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3e240 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3e244 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3e248 0d0             | 
3e248 0d0             | '------------------------------------------------------------------------------
3e248 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3e248 0d0             | '------------------------------------------------------------------------------
3e248 0d0             | isr1_fsframe
3e248 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3e24c 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3e250 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3e254 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3e258 0d4             | .wait
3e258 0d4 40 46 72 FD |                 testp   dp                      wc
3e25c 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3e260 0d6 23 03 08 FC |                 akpin   dp
3e264 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3e268 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3e26c 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3e270 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3e274 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3e278 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3e27c 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3e280 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3e284 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3e288 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3e28c 0e1 2C FF BF FD |                 call    #utx_byte
3e290 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3e294 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3e298 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3e29c 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3e2a0 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3e2a4 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3e2a8 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3e2ac 0e9 5B A5 42 F5 |                 or      utx, icrc
3e2b0 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3e2b4 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3e2b8 0ec 20 00 90 FD |                 jmp     #isr1_wait
3e2bc 0ed             | isr1_lsframe
3e2bc 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3e2c0 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3e2c4 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3e2c8 0f0             | .wait
3e2c8 0f0 40 46 72 FD |                 testp   dp                      wc
3e2cc 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3e2d0 0f2 23 03 08 FC |                 akpin   dp
3e2d4 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3e2d8 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3e2dc 0f5             | isr1_wait
3e2dc 0f5 22 A5 82 FA |                 rqpin   utx, dm
3e2e0 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3e2e4 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3e2e8 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3e2ec 0f9 03 00 00 FF 
3e2f0 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3e2f4 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3e2f8 0fc F5 FF 3B FB |                 reti1
3e2fc 0fd             | 
3e2fc 0fd             | '------------------------------------------------------------------------------
3e2fc 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3e2fc 0fd             | ' transaction will complete before the next frame is triggered.
3e2fc 0fd             | '------------------------------------------------------------------------------
3e2fc 0fd             | ' On entry:
3e2fc 0fd             | ' On exit:
3e2fc 0fd             | '------------------------------------------------------------------------------
3e2fc 0fd             | wait_txn_ok
3e2fc 0fd 1A 74 63 FD |                 getct   htmp2
3e300 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
3e304 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3e308 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3e30c 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3e310 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3e314 103 2D 00 64 FD |                 ret
3e318 104             | 
3e318 104             | '------------------------------------------------------------------------------
3e318 104             | ' A device connection was detected, or a bus reset was requested by the USB
3e318 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3e318 104             | ' and perform a reset sequence prior to device enumeration.
3e318 104             | '------------------------------------------------------------------------------
3e318 104             | dev_reset
3e318 104 22 A7 82 FA |                 rqpin   urx, dm
3e31c 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3e320 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3e324 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3e328 108             | reset
3e328 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3e32c 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3e330 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3e334 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3e338 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3e33c 10d 1A 92 62 FD |                 getct   iframe_ct_base
3e340 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3e344 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3e348 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3e34c 111 24 70 07 F1 |                 add     htmp, #36
3e350 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3e354 113             | .framewait
3e354 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
3e358 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3e35c 115 2D 00 64 FD |                 ret
3e360 116             | 
3e360 116             | '------------------------------------------------------------------------------
3e360 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3e360 116             | '------------------------------------------------------------------------------
3e360 116             | ' On entry:
3e360 116             | '   PTRA - source address.
3e360 116             | '   PB - destination address.
3e360 116             | '   hr0 - length of copy, in bytes.
3e360 116             | ' On exit:
3e360 116             | '------------------------------------------------------------------------------
3e360 116             | hmemcpy
3e360 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
3e364 117 F7 71 43 FC |                 wrbyte  htmp, pb
3e368 118 01 EE 07 F1 |                 add     pb, #1
3e36c 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3e370 11a             | 
3e370 11a             | '------------------------------------------------------------------------------
3e370 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3e370 11a             | ' loop until the errant device is disconnected.
3e370 11a             | '------------------------------------------------------------------------------
3e370 11a             | ' On entry:
3e370 11a             | ' On exit:
3e370 11a             | '------------------------------------------------------------------------------
3e370 11a             | host_error
3e370 11a             |           if ERROR_LED >= 0
3e370 11a             |           end
3e370 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3e374 11b             | 
3e374 11b             | '------------------------------------------------------------------------------
3e374 11b             | ' Get HID descriptor buffer for current port
3e374 11b             | '------------------------------------------------------------------------------
3e374 11b             | ' On entry:
3e374 11b             | ' On exit:
3e374 11b             | '   PB - HID descriptor buffer pointer
3e374 11b             | '------------------------------------------------------------------------------
3e374 11b             | get_hid_descr_buffer
3e374 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3e378 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3e37c 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3e380 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3e384 11f             | 
3e384 11f             | 
3e384 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3e388 120             | 
3e388 120             | ' USB commands and error codes
3e388 120 00 00 00 00 | cmd_data        long    0
3e38c 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3e390 122             | 
3e390 122             | ' Parameters block assigned at cog startup
3e390 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3e394 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3e398 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3e39c 125             | if ACTIVITY_LED >= 0
3e39c 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3e39c 125             | end
3e39c 125             | if ERROR_LED >= 0
3e39c 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3e39c 125             | end
3e39c 125 00 00 00 00 | hid_descr_p     long    0
3e3a0 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3e3a0 126             | 'hkbd_report_p   long    0
3e3a0 126 00 00 00 00 | hub_descr_p     long    0
3e3a4 127 00 00 00 00 | urx_buff_p      long    0
3e3a8 128 00 00 00 00 | dev_desc_buff_p long    0
3e3ac 129 00 00 00 00 | con_desc_buff_p long    0
3e3b0 12a 00 00 00 00 | cache_start_p   long    0
3e3b4 12b 00 00 00 00 | cache_end_p     long    0
3e3b8 12c             | if EMUPAD_MAX_PLAYER > 0
3e3b8 12c             | emupad_out_ptr  long    0
3e3b8 12c             | end
3e3b8 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3e3bc 12d             | 
3e3bc 12d             | hdev_init_start
3e3bc 12d             | hdev_port       res     1
3e3bc 12d             | hdev_port       res     1
3e3bc 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3e3bc 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3e3bc 12d             | kbm_next_datax  res     1
3e3bc 12d             | kbm_next_datax  res     1
3e3bc 12d             | hub_intf_num    res     1
3e3bc 12d             | hub_intf_num    res     1
3e3bc 12d             | hub_next_datax  res     1
3e3bc 12d             | hub_next_datax  res     1
3e3bc 12d             | hub_status_chg  res     1
3e3bc 12d             | hub_status_chg  res     1
3e3bc 12d             | hub_port_status res     1
3e3bc 12d             | hub_port_status res     1
3e3bc 12d             | if HAVE_MOUSE
3e3bc 12d             | ms_intf_num     res     1
3e3bc 12d             | ms_intf_num     res     1
3e3bc 12d             | ms_in_max_pkt   res     1
3e3bc 12d             | ms_in_max_pkt   res     1
3e3bc 12d             | end
3e3bc 12d             | kb_intf_num     res     1
3e3bc 12d             | kb_intf_num     res     1
3e3bc 12d             | kb_interval     res     1
3e3bc 12d             | kb_interval     res     1
3e3bc 12d             | kb_in_max_pkt   res     1
3e3bc 12d             | kb_in_max_pkt   res     1
3e3bc 12d             | kb_max_index    res     1
3e3bc 12d             | kb_max_index    res     1
3e3bc 12d             | kb_led_states   res     1
3e3bc 12d             | kb_led_states   res     1
3e3bc 12d             | gp_intf_num     res     1
3e3bc 12d             | gp_intf_num     res     1
3e3bc 12d             | gp_interval     res     1
3e3bc 12d             | gp_interval     res     1
3e3bc 12d             | gp_max_index    res     1
3e3bc 12d             | gp_max_index    res     1
3e3bc 12d             | gp_descr_len    res     1+MAX_DEVICES
3e3bc 12d             | gp_descr_len    res     1+MAX_DEVICES
3e3bc 12d             | hdev_init_end
3e3bc 12d             | 
3e3bc 12d             | ' Initialized at cog startup:
3e3bc 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3e3bc 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3e3bc 12d             | iframe_ct_new   res     1
3e3bc 12d             | iframe_ct_new   res     1
3e3bc 12d             | iframe_ct_base  res     1
3e3bc 12d             | iframe_ct_base  res     1
3e3bc 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3e3bc 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3e3bc 12d             | 
3e3bc 12d             | ' This register block is reset to zero when a USB device connects
3e3bc 12d             | hreg_init_start
3e3bc 12d             | hstatus         res     1         ' Host status flags
3e3bc 12d             | hstatus         res     1         ' Host status flags
3e3bc 12d             | hctwait         res     1         ' Poll-based wait clocks
3e3bc 12d             | hctwait         res     1         ' Poll-based wait clocks
3e3bc 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3e3bc 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3e3bc 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3e3bc 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3e3bc 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3e3bc 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3e3bc 12d             | xfer_retry      res     1         ' Control transfer retry count
3e3bc 12d             | xfer_retry      res     1         ' Control transfer retry count
3e3bc 12d             | retry           res     1         ' Transaction retry count
3e3bc 12d             | retry           res     1         ' Transaction retry count
3e3bc 12d             | utx             res     1         ' Byte to transmit on USB
3e3bc 12d             | utx             res     1         ' Byte to transmit on USB
3e3bc 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3e3bc 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3e3bc 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3e3bc 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3e3bc 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3e3bc 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3e3bc 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3e3bc 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3e3bc 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3e3bc 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3e3bc 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3e3bc 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3e3bc 12d             | frame           res     1         ' USB 1ms frame counter value
3e3bc 12d             | frame           res     1         ' USB 1ms frame counter value
3e3bc 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3e3bc 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3e3bc 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3e3bc 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3e3bc 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3e3bc 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3e3bc 12d             | crc             res     1         ' Used for CRC16 calculation
3e3bc 12d             | crc             res     1         ' Used for CRC16 calculation
3e3bc 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3e3bc 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3e3bc 12d             | retval          res     1         ' Global success/fail return parameter
3e3bc 12d             | retval          res     1         ' Global success/fail return parameter
3e3bc 12d             | context_retval  res     1         ' Operation contextual return parameter
3e3bc 12d             | context_retval  res     1         ' Operation contextual return parameter
3e3bc 12d             | ' Device stuff
3e3bc 12d             | hdev_id         res     1+MAX_DEVICES
3e3bc 12d             | hdev_id         res     1+MAX_DEVICES
3e3bc 12d             | hdev_bcd        res     1
3e3bc 12d             | hdev_bcd        res     1
3e3bc 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3e3bc 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3e3bc 12d             | ' Keyboard/mouse stuff
3e3bc 12d             | hctrl_ep_addr   res     1
3e3bc 12d             | hctrl_ep_addr   res     1
3e3bc 12d             | hctrl_max_pkt   res     1
3e3bc 12d             | hctrl_max_pkt   res     1
3e3bc 12d             | hconfig_base    res     1
3e3bc 12d             | hconfig_base    res     1
3e3bc 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3e3bc 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3e3bc 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3e3bc 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3e3bc 12d             | hdev_class      res     1
3e3bc 12d             | hdev_class      res     1
3e3bc 12d             | hdev_subclass   res     1
3e3bc 12d             | hdev_subclass   res     1
3e3bc 12d             | hdev_protocol   res     1
3e3bc 12d             | hdev_protocol   res     1
3e3bc 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3e3bc 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3e3bc 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3e3bc 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3e3bc 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3e3bc 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3e3bc 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3e3bc 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3e3bc 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3e3bc 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3e3bc 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3e3bc 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3e3bc 12d             | if HAVE_MOUSE
3e3bc 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3e3bc 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3e3bc 12d             | end
3e3bc 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3e3bc 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3e3bc 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3e3bc 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3e3bc 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3e3bc 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3e3bc 12d             | hdev_out_addr   res     1
3e3bc 12d             | hdev_out_addr   res     1
3e3bc 12d             | 
3e3bc 12d             | if EMUPAD_MAX_PLAYER > 0
3e3bc 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3e3bc 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3e3bc 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3e3bc 12d             | end
3e3bc 12d             | 
3e3bc 12d             | hreg_init_end
3e3bc 12d             | 
3e3bc 12d             | hidr_start
3e3bc 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3e3bc 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3e3bc 12d             | hidr_flags      res     1
3e3bc 12d             | hidr_flags      res     1
3e3bc 12d             | hidr_axis       res     3
3e3bc 12d             | hidr_axis       res     3
3e3bc 12d             | hidr_buttons    res     1
3e3bc 12d             | hidr_buttons    res     1
3e3bc 12d             | hidr_hats       res     1
3e3bc 12d             | hidr_hats       res     1
3e3bc 12d             | '' Above are actually useful values, 6 longs
3e3bc 12d             | hidr_id         res     1
3e3bc 12d             | hidr_id         res     1
3e3bc 12d             | hidr_state      res     1
3e3bc 12d             | hidr_state      res     1
3e3bc 12d             | hidr_size       res     1
3e3bc 12d             | hidr_size       res     1
3e3bc 12d             | hidr_count      res     1
3e3bc 12d             | hidr_count      res     1
3e3bc 12d             | hidr_offset     res     1
3e3bc 12d             | hidr_offset     res     1
3e3bc 12d             | hidr_usage_idx  res     1
3e3bc 12d             | hidr_usage_idx  res     1
3e3bc 12d             | hidr_lminmax    res     1
3e3bc 12d             | hidr_lminmax    res     1
3e3bc 12d             | hidr_pminmax    res     1
3e3bc 12d             | hidr_pminmax    res     1
3e3bc 12d             | hidr_type       res     1
3e3bc 12d             | hidr_type       res     1
3e3bc 12d             | hidr_end
3e3bc 12d             | 
3e3bc 12d             | ' Variables dependent on the system freqency
3e3bc 12d             | _var_64_lower_  res     1
3e3bc 12d             | _var_64_lower_  res     1
3e3bc 12d             | _var_64_upper_  res     1
3e3bc 12d             | _var_64_upper_  res     1
3e3bc 12d             | _12Mbps_        res     1
3e3bc 12d             | _12Mbps_        res     1
3e3bc 12d             | _1_5Mbps_       res     1
3e3bc 12d             | _1_5Mbps_       res     1
3e3bc 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3e3bc 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3e3bc 12d             | _1us_           res     1         ' 1us
3e3bc 12d             | _1us_           res     1         ' 1us
3e3bc 12d             | _10us_          res     1         ' 10us
3e3bc 12d             | _10us_          res     1         ' 10us
3e3bc 12d             | _33us_          res     1         ' 33us
3e3bc 12d             | _33us_          res     1         ' 33us
3e3bc 12d             | _txn_err_       res     1         ' 250us
3e3bc 12d             | _txn_err_       res     1         ' 250us
3e3bc 12d             | _500us_         res     1         ' 500us
3e3bc 12d             | _500us_         res     1         ' 500us
3e3bc 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3e3bc 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3e3bc 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3e3bc 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3e3bc 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3e3bc 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3e3bc 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3e3bc 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3e3bc 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3e3bc 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3e3bc 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3e3bc 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3e3bc 12d             | _preamble_wait_ res     1
3e3bc 12d             | _preamble_wait_ res     1
3e3bc 12d             | _1ms_           res     1         ' 1ms
3e3bc 12d             | _1ms_           res     1         ' 1ms
3e3bc 12d             | _2ms_           res     1         ' 2ms
3e3bc 12d             | _2ms_           res     1         ' 2ms
3e3bc 12d             | _suspend_wait_  res     1         ' 3ms
3e3bc 12d             | _suspend_wait_  res     1         ' 3ms
3e3bc 12d             | _4ms_           res     1         ' 4ms
3e3bc 12d             | _4ms_           res     1         ' 4ms
3e3bc 12d             | _xfer_wait_     res     1         ' 5ms
3e3bc 12d             | _xfer_wait_     res     1         ' 5ms
3e3bc 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3e3bc 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3e3bc 12d             | _reset_hold_    res     1         ' 15ms
3e3bc 12d             | _reset_hold_    res     1         ' 15ms
3e3bc 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3e3bc 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3e3bc 12d             | _21ms_          res     1         ' 21ms
3e3bc 12d             | _21ms_          res     1         ' 21ms
3e3bc 12d             | _100ms_         res     1         ' 100ms
3e3bc 12d             | _100ms_         res     1         ' 100ms
3e3bc 12d             | _500ms_         res     1         ' 500ms
3e3bc 12d             | _500ms_         res     1         ' 500ms
3e3bc 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3e3bc 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3e3bc 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3e3bc 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3e3bc 12d             | '------------------------------------------------------------------------------
3e3bc 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3e3bc 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3e3bc 12d             | _usb_d_ls_nco_  res     1
3e3bc 12d             | _usb_d_ls_nco_  res     1
3e3bc 12d             | _usb_h_fs_nco_  res     1
3e3bc 12d             | _usb_h_fs_nco_  res     1
3e3bc 12d             | _usb_d_fs_nco_  res     1
3e3bc 12d             | _usb_d_fs_nco_  res     1
3e3bc 12d             | '------------------------------------------------------------------------------
3e3bc 12d             | ' Scratch registers
3e3bc 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3e3bc 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3e3bc 12d             | htmp1           res     1
3e3bc 12d             | htmp1           res     1
3e3bc 12d             | htmp2           res     1
3e3bc 12d             | htmp2           res     1
3e3bc 12d             | htmp3           res     1
3e3bc 12d             | htmp3           res     1
3e3bc 12d             | hrep            res     1         ' Repeat count
3e3bc 12d             | hrep            res     1         ' Repeat count
3e3bc 12d             | hsave0          res     1         ' Subroutine parameter saves
3e3bc 12d             | hsave0          res     1         ' Subroutine parameter saves
3e3bc 12d             | hsave1          res     1
3e3bc 12d             | hsave1          res     1
3e3bc 12d             | hsave2          res     1
3e3bc 12d             | hsave2          res     1
3e3bc 12d             | isrtmp1         res     1
3e3bc 12d             | isrtmp1         res     1
3e3bc 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3e3bc 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3e3bc 12d             | hr0             res     1         ' Multi-purpose registers
3e3bc 12d             | hr0             res     1         ' Multi-purpose registers
3e3bc 12d             | hr1             res     1
3e3bc 12d             | hr1             res     1
3e3bc 12d             | hr2             res     1
3e3bc 12d             | hr2             res     1
3e3bc 12d             | hr3             res     1
3e3bc 12d             | hr3             res     1
3e3bc 12d             | hpar1           res     1         ' Routine entry/exit parameters
3e3bc 12d             | hpar1           res     1         ' Routine entry/exit parameters
3e3bc 12d             | hpar2           res     1
3e3bc 12d             | hpar2           res     1
3e3bc 12d             | hpar3           res     1
3e3bc 12d             | hpar3           res     1
3e3bc 12d             | hct2            res     1         ' Function response bus turn-around timer
3e3bc 12d             | hct2            res     1         ' Function response bus turn-around timer
3e3bc 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3e3bc 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3e3bc 12d             | mod_cnt         res     1         ' Used in idle loops
3e3bc 12d             | mod_cnt         res     1         ' Used in idle loops
3e3bc 12d             |                 fit     $1F0
3e3bc 12d             |                 org     $200
3e3bc 200             | hlut_start
3e3bc 200             | 
3e3bc 200             | '------------------------------------------------------------------------------
3e3bc 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3e3bc 200             | ' settings to startup defaults.
3e3bc 200             | '------------------------------------------------------------------------------
3e3bc 200             | ' On entry:
3e3bc 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3e3bc 200             | '------------------------------------------------------------------------------
3e3bc 200             | set_speed_full
3e3bc 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3e3c0 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3e3c4 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3e3c8 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3e3cc 204             | '                ret                             wcz     ' Restore caller flags on exit
3e3cc 204             | 
3e3cc 204             | '------------------------------------------------------------------------------
3e3cc 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3e3cc 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3e3cc 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3e3cc 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3e3cc 204             | ' putting the smart pins into reset.
3e3cc 204             | '------------------------------------------------------------------------------
3e3cc 204             | ' On entry:
3e3cc 204             | ' On exit: CZ flags restored to caller states
3e3cc 204             | '------------------------------------------------------------------------------
3e3cc 204             | set_speed_low
3e3cc 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3e3d0 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3e3d4 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3e3d8 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3e3dc 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3e3e0 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3e3e4 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3e3e8 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3e3ec 20c             | 
3e3ec 20c             | '------------------------------------------------------------------------------
3e3ec 20c             | ' Perform configuration stuff required when a device intitially connects.
3e3ec 20c             | '------------------------------------------------------------------------------
3e3ec 20c             | ' On entry:
3e3ec 20c             | ' On exit:
3e3ec 20c             | '------------------------------------------------------------------------------
3e3ec 20c             | on_connect
3e3ec 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3e3f0 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3e3f4 20e             | .retry
3e3f4 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3e3f8 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3e3fc 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3e400 211 00 08 00 FF 
3e404 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3e408 213 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3e40c 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3e410 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3e414 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3e418 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3e41c 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e420 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3e424 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3e428 21b 4C 03 B0 FD |                 call    #poll_waitx
3e42c 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3e430 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3e434 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3e438 21f B8 FF 9F FD |                 jmp     #.retry
3e43c 220             | .get_dev_desc
3e43c 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3e440 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3e444 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3e448 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
3e44c 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3e450 225 88 FB BF FD |                 call    #reset
3e454 226 30 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3e458 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3e45c 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3e460 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3e464 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e468 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3e46c 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
3e470 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3e474 22e 04 00 00 FF 
3e478 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3e47c 230 34 FA BF FD |                 call    #calc_crc5
3e480 231 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3e484 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3e488 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3e48c 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3e490 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3e494 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3e498 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e49c 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3e4a0 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3e4a4 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3e4a8 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3e4ac 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
3e4b0 23d C4 02 B0 FD |                 call    #poll_waitx
3e4b4 23e 20 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3e4b8 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3e4bc 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3e4c0 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3e4c4 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3e4c8 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e4cc 244 2D 00 64 5D |         if_nz   ret
3e4d0 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3e4d4 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3e4d8 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3e4dc 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3e4e0 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3e4e4 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3e4e8 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3e4ec 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3e4f0 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3e4f4 24e 2C FB 9F CD |         if_b    jmp     #host_error
3e4f8 24f 10 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3e4fc 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3e500 251 2D EC 63 FD |                 call    pa
3e504 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3e508 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3e50c 254 2C EC 63 FD |                 jmp     pa
3e510 255             | 
3e510 255             | '------------------------------------------------------------------------------
3e510 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3e510 255             | ' Status reporting is always in the function-to-host direction.
3e510 255             | '------------------------------------------------------------------------------
3e510 255             | ' On entry:
3e510 255             | '   PTRA - start address of the SETUP data in hub.
3e510 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3e510 255             | '     stage.
3e510 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3e510 255             | ' On exit:
3e510 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3e510 255             | '     contains the count of data stage bytes actually received, which must
3e510 255             | '     always be <= the count requested.
3e510 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3e510 255             | '     more specific USB operation error code.
3e510 255             | '------------------------------------------------------------------------------
3e510 255             | control_read
3e510 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3e514 256 F8 8F 03 F6 |                 mov     hpar2, ptra
3e518 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3e51c 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3e520 259             | .xfer_start
3e520 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3e524 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3e528 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e52c 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3e530 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3e534 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3e538 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3e53c 260 61 00 00 FF 
3e540 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3e544 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3e548 263             | .data
3e548 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3e54c 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3e550 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3e554 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3e558 267             | .nak_retry
3e558 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3e55c 268             | .in_retry
3e55c 268 BC F6 BF FD |                 call    #txn_in
3e560 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3e564 26a 28 00 90 AD |         if_z    jmp     #.commit
3e568 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3e56c 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3e570 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3e574 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3e578 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3e57c 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3e580 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3e584 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3e588 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3e58c 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3e590 275             | .commit
3e590 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3e594 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3e598 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3e59c 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
3e5a0 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3e5a4 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3e5a8 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3e5ac 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3e5b0 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3e5b4 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3e5b8 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3e5bc 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3e5c0 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3e5c4 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3e5c8 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3e5cc 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3e5d0 285             | .pre_status
3e5d0 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3e5d4 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3e5d8 287 00 B0 06 F6 |                 mov     pkt_data, #0
3e5dc 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3e5e0 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3e5e4 28a 61 00 00 FF 
3e5e8 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3e5ec 28c             | .out_retry
3e5ec 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3e5f0 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e5f4 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3e5f8 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3e5fc 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3e600 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3e604 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3e608 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3e60c 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3e610 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3e614 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3e618 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3e618 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3e618 297             | ' ControlRead() transfer gets things unstuck most of the time...
3e618 297             | .xfer_retry
3e618 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
3e61c 298 58 01 B0 FD |                 call    #poll_waitx
3e620 299 8C F9 BF FD |                 call    #wait_txn_ok
3e624 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3e628 29b C7 F1 03 F6 |                 mov     ptra, hpar2
3e62c 29c C8 EF 03 F6 |                 mov     pb, hpar3
3e630 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3e634 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3e638 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3e63c 2a0             | 
3e63c 2a0             | '------------------------------------------------------------------------------
3e63c 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3e63c 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3e63c 2a0             | ' the SETUP data struct is filled with the required values.
3e63c 2a0             | '------------------------------------------------------------------------------
3e63c 2a0             | ' On entry:
3e63c 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3e63c 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3e63c 2a0             | '     stage.
3e63c 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3e63c 2a0             | ' On exit:
3e63c 2a0             | '   retval - used to convey the success/failure of each stage.
3e63c 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3e63c 2a0             | '     more specific USB operation error code.
3e63c 2a0             | '------------------------------------------------------------------------------
3e63c 2a0             | control_write
3e63c 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3e640 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3e644 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3e648 2a3             | 
3e648 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3e64c 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
3e650 2a5 F7 91 03 F6 |                 mov     hpar3, pb
3e654 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3e658 2a7             | .xfer_start
3e658 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3e65c 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3e660 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3e664 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e668 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3e66c 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3e670 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3e674 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3e678 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3e67c 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3e680 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3e684 2b2             | .data
3e684 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3e688 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3e68c 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3e690 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3e694 2b6             | .out_retry
3e694 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3e698 2b7 88 F6 BF FD |                 call    #txn_out
3e69c 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e6a0 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3e6a4 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3e6a8 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3e6ac 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3e6b0 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3e6b4 2be             | .commit
3e6b4 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3e6b8 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3e6bc 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3e6c0 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3e6c4 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3e6c8 2c3             | pre_status_in
3e6c8 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3e6cc 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3e6d0 2c5             | .status_retry
3e6d0 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3e6d4 2c6 44 F5 BF FD |                 call    #txn_in
3e6d8 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3e6dc 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3e6e0 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3e6e4 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3e6e8 2cb 2D 00 64 AD |         if_z    ret
3e6ec 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3e6f0 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3e6f4 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3e6f8 2cf             | '               ret                                     ' Caller must handle transfer retirement
3e6f8 2cf             | 
3e6f8 2cf             | '------------------------------------------------------------------------------
3e6f8 2cf             | ' Execute an IN interrupt transaction.
3e6f8 2cf             | '------------------------------------------------------------------------------
3e6f8 2cf             | ' On entry:
3e6f8 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3e6f8 2cf             | '   hpar2 - Address of the IN data buffer
3e6f8 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3e6f8 2cf             | ' On exit:
3e6f8 2cf             | '   retval - the result of the operation.
3e6f8 2cf             | '   hpar3 - the count of IN data bytes actually received.
3e6f8 2cf             | '------------------------------------------------------------------------------
3e6f8 2cf             | do_int_in
3e6f8 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3e6fc 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3e700 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3e704 2d2             | 
3e704 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
3e708 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3e70c 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3e710 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3e714 2d6             | .retry
3e714 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3e718 2d7 00 F5 BF FD |                 call    #txn_in
3e71c 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3e720 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3e724 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3e728 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3e72c 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3e730 2dd 54 00 B0 FD |                 call    #retry_wait
3e734 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3e738 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3e73c 2e0 D4 FF 9F FD |                 jmp     #.retry
3e740 2e1             | .commit
3e740 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3e744 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3e748 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3e74c 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3e750 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3e754 2e6             | .post_ret
3e754 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3e758 2e7             | 
3e758 2e7             | 
3e758 2e7             | '------------------------------------------------------------------------------
3e758 2e7             | ' Resets the downstream hub port to FS
3e758 2e7             | '------------------------------------------------------------------------------
3e758 2e7             | dwnstream_reset
3e758 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3e75c 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3e760 2e9             | 
3e760 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3e764 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3e768 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3e76c 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3e770 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3e774 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3e778 2ef             | 
3e778 2ef             | '------------------------------------------------------------------------------
3e778 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3e778 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3e778 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3e778 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3e778 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3e778 2ef             | '------------------------------------------------------------------------------
3e778 2ef             | ' On entry:
3e778 2ef             | '   hctwait - wait interval in sysclocks.
3e778 2ef             | ' On exit:
3e778 2ef             | '------------------------------------------------------------------------------
3e778 2ef             | poll_waitx
3e778 2ef 1A 92 63 FD |                 getct   hct2
3e77c 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
3e780 2f1             | .wait
3e780 2f1 FF 25 CC FB |                 jnct2   #.wait
3e784 2f2 2D 00 64 FD |                 ret
3e788 2f3             | 
3e788 2f3             | '------------------------------------------------------------------------------
3e788 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3e788 2f3             | '------------------------------------------------------------------------------
3e788 2f3             | ' On entry:
3e788 2f3             | '   retval - transaction response PID or error code.
3e788 2f3             | ' On exit:
3e788 2f3             | '------------------------------------------------------------------------------
3e788 2f3             | retry_wait
3e788 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3e78c 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3e790 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3e794 2f6 14 00 90 AD |         if_z    jmp     #.nak
3e798 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3e79c 2f8 D8 FF BF FD |                 call    #poll_waitx
3e7a0 2f9             | .dec
3e7a0 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3e7a4 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3e7a8 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3e7ac 2fc             | .nak
3e7ac 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3e7b0 2fd C4 FF BF FD |                 call    #poll_waitx
3e7b4 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3e7b8 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3e7bc 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3e7c0 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3e7c4 302 2D 00 64 FD |                 ret
3e7c8 303             | 
3e7c8 303             | host_reset
3e7c8 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3e7cc 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3e7d0 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3e7d0 305 BD 01 05 FF 
3e7d4 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3e7d8 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3e7dc 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3e7e0 309             | ' Check to see if the system clock has been changed.
3e7e0 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3e7e4 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3e7e8 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3e7ec 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3e7f0 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3e7f4 30e 40 46 62 FD |                 dirl    dp
3e7f8 30f             | 
3e7f8 30f 28 02 64 FD |                 setq    #1
3e7fc 310 80 00 80 FF 
3e800 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3e804 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3e808 313             | .enable
3e808 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3e80c 314 41 46 62 FD |                 dirh    dp
3e810 315 1F 36 63 FD |                 waitx   _1us_
3e814 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3e818 317             | 
3e818 317             |                 ' Handle Port protection enable and startup delay
3e818 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
3e81c 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3e820 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3e824 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3e828 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3e82c 31c             | 
3e82c 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3e830 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3e834 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3e838 31f 00 00 04 F6 |                 mov     0-0, #0
3e83c 320             | .regloop
3e83c 320             | 
3e83c 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3e83c 320             | 
3e83c 320             | discon_entry
3e83c 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3e840 321             | 
3e840 321             |               
3e840 321             |         if HAVE_HIDPAD
3e840 321 D4 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3e844 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3e848 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3e84c 324 F7 01 68 FC |                 wrlong  #0,pb
3e850 325             |         end
3e850 325             |         if EMUPAD_MAX_PLAYER > 0
3e850 325             |         end
3e850 325             | 
3e850 325             |                 ' Fall through to disconnected loop
3e850 325             | 
3e850 325             | '-----------------------------------------------------------------------------------------------------------------
3e850 325             | ' Device connect handling (Section 7.1.7.3).
3e850 325             | '-----------------------------------------------------------------------------------------------------------------
3e850 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3e850 325             | ' device to connect (Section 7.1.7.3).
3e850 325             | '-----------------------------------------------------------------------------------------------------------------
3e850 325             | disconnected
3e850 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3e854 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3e858 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3e85c 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3e860 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3e864 32a             |         if ACTIVITY_LED >= 0
3e864 32a             |         end
3e864 32a 22 A7 82 FA |                 rqpin   urx, dm
3e868 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3e86c 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3e870 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3e874 32e             | .se1_test
3e874 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3e878 32f FC FE BF FD |                 call    #poll_waitx
3e87c 330 22 A7 82 FA |                 rqpin   urx, dm
3e880 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3e884 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3e888 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3e88c 334             | .se1            'SE1 is a fatal error condition
3e88c 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
3e890 335 E4 FE BF FD |                 call    #poll_waitx
3e894 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3e898 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3e89c 338             | .connect_test                                           ' Test lines until stable J/K state seen
3e89c 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3e8a0 339 22 A7 82 FA |                 rqpin   urx, dm
3e8a4 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3e8a8 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3e8ac 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3e8b0 33d             | connected
3e8b0 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3e8b4 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3e8b8 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3e8bc 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3e8c0 341             | .set_pulse
3e8c0 341 1A 64 63 FD |                 getct   _pulse_time_
3e8c4 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3e8c8 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3e8c8 343             | ' of 1ms and make a correction, if necessary.
3e8c8 343             | '                mov     htmp, _1ms_
3e8c8 343             | '                subs    htmp, iframe_delta
3e8c8 343             | '                adds    _frame1ms_clks_, htmp
3e8c8 343             | '                debug(udec(_frame1ms_clks_))
3e8c8 343             | 
3e8c8 343             |                 ' Fall through to idle/processing loop
3e8c8 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3e8cc 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3e8d0 345             | 
3e8d0 345             | hidle
3e8d0 345 22 A7 82 FA |                 rqpin   urx, dm
3e8d4 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3e8d8 347 98 00 90 CD |         if_c    jmp     #.se0_test
3e8dc 348 24 06 70 FD |                 pollct3                         wc
3e8e0 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3e8e4 34a 1A 94 63 FD |                 getct   hct3
3e8e8 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3e8ec 34c             | 
3e8ec 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3e8f0 34d 00 70 E3 F8 |                 getbyte htmp
3e8f4 34e             | 
3e8f4 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
3e8f8 34f 84 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3e8fc 350 40 00 90 AD |         if_z    jmp     #.poll
3e900 351             | 
3e900 351             |         if _HAVE_GAMEPAD
3e900 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
3e904 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3e908 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3e90c 354 0C 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3e910 355 2C 00 90 AD |         if_z    jmp     #.poll
3e914 356             |         end
3e914 356             | 
3e914 356             |         if HAVE_MOUSE
3e914 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3e918 357 30 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3e91c 358 20 00 90 AD |         if_z    jmp     #.poll
3e920 359             |         end
3e920 359             | 
3e920 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
3e924 35a 98 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3e928 35b 14 00 90 AD |         if_z    jmp     #.poll
3e92c 35c             | 
3e92c 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
3e930 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3e934 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3e938 35f 98 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3e93c 360             |         if HAVE_MOUSE
3e93c 360 30 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3e940 361             |         else
3e940 361             |         end
3e940 361             | 
3e940 361             | .poll
3e940 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3e944 362 2D EC 63 FD |                 call    pa
3e948 363             | .skip_poll
3e948 363             | 
3e948 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3e94c 364             | 
3e94c 364             | .nopoll
3e94c 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3e950 365 44 00 90 AD |         if_z    jmp     #hsuspend
3e954 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3e958 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3e95c 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3e960 369 1A 84 63 FD |                 getct   hr0
3e964 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3e968 36b             |         if ACTIVITY_LED >= 0
3e968 36b             |         end
3e968 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
3e96c 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
3e970 36d 5C FF 9F FD |                 jmp     #hidle
3e974 36e             | ' Check for extended SE0 state on the bus
3e974 36e             | .se0_test
3e974 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
3e978 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3e97c 370 22 A7 82 FA |                 rqpin   urx, dm
3e980 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3e984 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3e988 373 24 F6 BF FD |                 call    #wait_txn_ok
3e98c 374 00 00 80 FF 
3e990 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3e994 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3e994 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3e998 377             | 
3e998 377             | hsuspend
3e998 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3e99c 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3e9a0 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3e9a4 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3e9a8 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3e9ac 37c 00 96 07 F6 |                 mov     mod_cnt, #0
3e9b0 37d             | 
3e9b0 37d             |                 ' Fall through to resume wait loop
3e9b0 37d             | 
3e9b0 37d             | hwait_resume
3e9b0 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3e9b4 37e 02 86 47 F0 |                 shr     hr1, #2
3e9b8 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3e9bc 380             |         if ACTIVITY_LED >= 0
3e9bc 380             |         end
3e9bc 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3e9c0 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3e9c4 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3e9c8 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3e9cc 384 18 00 90 AD |         if_z    jmp     #.resume
3e9d0 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3e9d4 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3e9d8 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3e9dc 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3e9e0 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3e9e4 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3e9e8 38b             | .resume
3e9e8 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3e9ec 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3e9f0 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3e9f4 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
3e9f8 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3e9fc 390 1F 70 63 FD |                 waitx   htmp
3ea00 391 22 07 28 FC |                 wypin   #OUT_J, dm
3ea04 392 01 70 47 F0 |                 shr     htmp, #1
3ea08 393 1F 70 63 FD |                 waitx   htmp
3ea0c 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3ea10 395 1A 92 62 FD |                 getct   iframe_ct_base
3ea14 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3ea18 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3ea1c 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3ea20 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
3ea24 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3ea28 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3ea2c 39c             | 
3ea2c 39c             | '------------------------------------------------------------------------------
3ea2c 39c             | ' Send preamble to enable low-speed HUB ports
3ea2c 39c             | '------------------------------------------------------------------------------
3ea2c 39c             | ' On entry:
3ea2c 39c             | ' On exit:
3ea2c 39c             | '   USB baud rate set to low-speed
3ea2c 39c             | '------------------------------------------------------------------------------
3ea2c 39c             | utx_pre
3ea2c 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3ea30 39d 40 46 62 FD |                 dirl    dp
3ea34 39e 28 02 64 FD |                 setq    #1
3ea38 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3ea3c 3a0 58 44 62 FD |                 drvl    dm
3ea40 3a1 59 46 62 FD |                 drvh    dp
3ea44 3a2             | 
3ea44 3a2 1E 00 00 FF 
3ea48 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3ea4c 3a4             | 
3ea4c 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3ea50 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
3ea54 3a6 28 02 64 3D |         if_nc   setq    #1
3ea58 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3ea5c 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
3ea60 3a9             | .l1
3ea60 3a9             | 
3ea60 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3ea64 3aa 40 46 62 FD |                 dirl    dp
3ea68 3ab 28 02 64 FD |                 setq    #1
3ea6c 3ac 80 00 80 FF 
3ea70 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3ea74 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3ea78 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3ea7c 3b0 41 46 62 FD |                 dirh    dp
3ea80 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3ea84 3b2             | 
3ea84 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3ea88 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3ea8c 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3ea90 3b5             | 
3ea90 3b5             | hlut_end
3ea90 3b5             |                 fit     $400
3ea90 3b5             |                 orgh
3ea90                 | if OVERLAP_MEMORY
3ea90                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3ea90                 | end
3ea90                 | '------------------------------------------------------------------------------
3ea90                 | ' Routines called from cog space.
3ea90                 | '------------------------------------------------------------------------------
3ea90                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3ea90                 | '------------------------------------------------------------------------------
3ea90                 | 
3ea90                 | '------------------------------------------------------------------------------
3ea90                 | ' USB host cog initialization.
3ea90                 | '------------------------------------------------------------------------------
3ea90                 | usb_host_init
3ea90                 |                 ' Initialize buffer pointers
3ea90                 |         if OVERLAP_MEMORY
3ea90                 |         else
3ea90     3C 15 B0 FE |                 loc     pb, #hid_descr
3ea94                 |         end
3ea94     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3ea98                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3ea98                 |                 {
3ea98                 |                 }
3ea98                 |         
3ea98                 |                 {
3ea98                 |                 }
3ea98                 |                 'loc     pb,#hkbd_report
3ea98                 |                 'mov     hkbd_report_p,pb
3ea98                 | 
3ea98     04 1D B0 FE |                 loc     pb, #hub_descr
3ea9c     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3eaa0     19 1D B0 FE |                 loc     pb, #urx_buff
3eaa4     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3eaa8     91 1D B0 FE |                 loc     pb, #dev_desc_buff
3eaac     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3eab0     9B 1D B0 FE |                 loc     pb, #con_desc_buff
3eab4     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3eab8     14 15 B0 FE |                 loc     pb, #usb_cache_start
3eabc     F7 55 02 F6 |                 mov     cache_start_p, pb
3eac0     E5 1C B0 FE |                 loc     pb, #usb_cache_end
3eac4     F7 57 02 F6 |                 mov     cache_end_p, pb
3eac8                 | 
3eac8                 |         if ERROR_LED >= 0
3eac8                 |         end
3eac8                 | 
3eac8                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3eac8                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3eac8                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3eac8                 | ' Configure and enable the Serial Host USB port.
3eac8     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3eacc                 | 
3eacc                 | '------------------------------------------------------------------------------
3eacc                 | ' Timing calculations happen before any interrupt(s) are enabled.
3eacc                 | '------------------------------------------------------------------------------
3eacc                 | ' On entry:
3eacc                 | '   htmp - current CLKFREQ value.
3eacc                 | '------------------------------------------------------------------------------
3eacc                 | hinit_usb_timings
3eacc                 | '                getct   htmp2
3eacc     B8 59 02 F6 |                 mov     save_sysclk, htmp
3ead0     8D 5B 80 FF 
3ead4     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3ead8     18 30 63 FD |                 getqx   _12Mbps_
3eadc     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3eae0     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3eae4     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3eae8     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3eaec     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3eaf0     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3eaf4     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
3eaf8     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3eafc     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3eb00     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3eb04     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3eb08     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
3eb0c     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3eb10     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3eb14     80 00 00 FF 
3eb18     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3eb1c     18 2C 63 FD |                 getqx   _var_64_lower_
3eb20     19 2E 63 FD |                 getqy   _var_64_upper_
3eb24     28 2C 63 FD |                 setq    _var_64_lower_
3eb28     65 CD 1D FF 
3eb2c     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3eb30     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3eb34     01 00 00 FF 
3eb38     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3eb3c     18 2C 63 FD |                 getqx   _var_64_lower_
3eb40     19 2E 63 FD |                 getqy   _var_64_upper_
3eb44     28 2C 63 FD |                 setq    _var_64_lower_
3eb48     A1 07 00 FF 
3eb4c     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
3eb50     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3eb54     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3eb58     09 36 57 F0 |                 shr     _1us_, #9               wc
3eb5c     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3eb60     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3eb64     18 38 63 FD |                 getqx   _10us_
3eb68     09 38 57 F0 |                 shr     _10us_, #9              wc
3eb6c     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
3eb70     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3eb74     18 3A 63 FD |                 getqx   _33us_
3eb78     09 3A 57 F0 |                 shr     _33us_, #9              wc
3eb7c     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
3eb80     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3eb84     18 3C 63 FD |                 getqx   _txn_err_
3eb88     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
3eb8c     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3eb90     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3eb94     18 3E 63 FD |                 getqx   _500us_
3eb98     09 3E 57 F0 |                 shr     _500us_, #9             wc
3eb9c     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
3eba0     01 00 00 FF 
3eba4     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3eba8     18 40 63 FD |                 getqx   _txn_ok_ls_
3ebac     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3ebb0     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3ebb4     01 00 00 FF 
3ebb8     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3ebbc     18 42 63 FD |                 getqx   _txn_ok_fs_
3ebc0     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3ebc4     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3ebc8     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3ebcc     05 00 00 FF 
3ebd0     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3ebd4     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3ebd8     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
3ebdc     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3ebe0     1C 00 00 FF 
3ebe4     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3ebe8     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3ebec     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3ebf0     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3ebf4     00 00 00 FF 
3ebf8     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3ebfc     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3ec00     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
3ec04     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3ec08     04 00 00 FF 
3ec0c     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3ec10     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3ec14     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
3ec18     8D 5B 00 FF 
3ec1c     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3ec20     18 4C 63 FD |                 getqx   _preamble_wait_
3ec24     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3ec28     01 00 00 FF 
3ec2c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3ec30     18 2C 63 FD |                 getqx   _var_64_lower_
3ec34     19 2E 63 FD |                 getqy   _var_64_upper_
3ec38     28 2C 63 FD |                 setq    _var_64_lower_
3ec3c     01 00 00 FF 
3ec40     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3ec44     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3ec48     09 4E 57 F0 |                 shr     _1ms_, #9               wc
3ec4c     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3ec50     FF FF 7F FF 
3ec54     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
3ec58     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3ec5c     A7 51 03 F6 |                 mov     _2ms_, _1ms_
3ec60     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3ec64     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
3ec68     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3ec6c     A7 55 03 F6 |                 mov     _4ms_, _1ms_
3ec70     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3ec74     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
3ec78     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3ec7c     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3ec80     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
3ec84     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3ec88     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3ec8c     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3ec90     A7 59 03 F6 |                 mov     _8ms_, _1ms_
3ec94     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3ec98     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3ec9c     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3eca0     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3eca4     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3eca8     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3ecac     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3ecb0     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3ecb4     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3ecb8     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3ecbc     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3ecc0                 | '        _ret_   mov     _1sec_, save_sysclk
3ecc0                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3ecc0                 | '                ret
3ecc0                 | {
3ecc0                 | }
3ecc0                 | 
3ecc0                 | '------------------------------------------------------------------------------
3ecc0                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3ecc0                 | ' one. If it is, start the task progression that will configure the device for
3ecc0                 | ' use.
3ecc0                 | '------------------------------------------------------------------------------
3ecc0                 | ' On entry:
3ecc0                 | '   hconfig_base - start address of the cached config descriptor chain.
3ecc0                 | ' On exit:
3ecc0                 | '------------------------------------------------------------------------------
3ecc0                 | hparse_con_desc
3ecc0     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3ecc4     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3ecc8     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3eccc     4E 70 FF F9 |                 movbyts htmp,#%%1032
3ecd0     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3ecd4                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3ecd4                 | 
3ecd4     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3ecd8     6E ED 03 F1 |                 add     pa, hconfig_base
3ecdc     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3ece0                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3ece0                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3ece0                 | ' that defines a keyboard and/or mouse.
3ece0     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3ece4                 | .next_intf
3ece4     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3ece8     B8 01 90 3D |         if_ae   jmp     #hset_config
3ecec     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3ecf0     75 F3 03 F1 |                 add     ptrb, hnext_desc
3ecf4     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3ecf8     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3ecfc     0C 00 90 AD |         if_z    jmp     #.intf
3ed00     80 71 C7 FA |                 rdbyte  htmp, ptrb
3ed04     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3ed08     D8 FF 9F FD |                 jmp     #.next_intf
3ed0c                 | .intf
3ed0c     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3ed10     00 90 07 F6 |                 mov     hpar3, #0
3ed14     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3ed18     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3ed1c     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3ed20     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3ed24                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3ed24                 | 
3ed24                 | .endp
3ed24     80 71 C7 FA |                 rdbyte  htmp, ptrb
3ed28     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3ed2c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3ed30     78 00 90 3D |         if_ae   jmp     #.get_device
3ed34     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3ed38     75 F3 03 F1 |                 add     ptrb, hnext_desc
3ed3c     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3ed40     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3ed44     64 00 90 AD |         if_z    jmp     #.get_device
3ed48     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3ed4c     04 00 90 AD |         if_z    jmp     #.get_ep
3ed50     D0 FF 9F FD |                 jmp     #.endp
3ed54                 | .get_ep
3ed54     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3ed58     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3ed5c     0F 86 67 F0 |                 shl     hr1, #8 + 7
3ed60     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
3ed64     3F 00 00 FF 
3ed68     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
3ed6c     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
3ed70     00 8E 0F F2 |                 cmp     hpar2, #0               wz
3ed74     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3ed78     00 90 0F F2 |                 cmp     hpar3, #0               wz
3ed7c     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3ed80     A0 FF 9F FD |                 jmp     #.endp
3ed84                 | .in_ep
3ed84     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3ed88     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3ed8c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3ed8c     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3ed90     C2 89 DB F8 |                 setbyte hr2, hr0, #3
3ed94     8C FF 9F FD |                 jmp     #.endp
3ed98                 | .out_ep
3ed98     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3ed9c     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3eda0                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3eda0     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3eda4     C2 8B DB F8 |                 setbyte hr3, hr0, #3
3eda8     78 FF 9F FD |                 jmp     #.endp
3edac                 | 
3edac                 | .get_device
3edac     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3edb0     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3edb4     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3edb8     64 00 90 AD |         if_z    jmp     #.gamepad
3edbc     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3edc0     A8 00 90 AD |         if_z    jmp     #.hub
3edc4     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3edc8     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3edcc                 |  '               cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3edcc     00 E6 0E F2 |            cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3edd0     4C 00 90 AD |         if_z    jmp     #.gamepad
3edd4     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3edd8     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3eddc                 | .keyboard
3eddc     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3ede0                 |         if HAVE_MOUSE
3ede0     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3ede4                 |         else
3ede4                 |         end
3ede4     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3ede8     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
3edec     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3edf0     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
3edf4     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3edf8     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3edfc                 |                 'debug(udec(kb_intf_num))
3edfc                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3edfc     E4 FE 9F FD |                 jmp     #.next_intf
3ee00                 | if HAVE_MOUSE
3ee00                 | .mouse
3ee00     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3ee04     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3ee08     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3ee0c     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
3ee10     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3ee14                 |                 'getbyte ms_interval, hr2, #3
3ee14     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3ee18     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3ee1c                 |                 'debug(udec(kb_intf_num))
3ee1c                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3ee1c     C4 FE 9F FD |                 jmp     #.next_intf
3ee20                 | end
3ee20                 | .gamepad
3ee20     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3ee24     C7 71 63 F5 |                 xor     htmp, hpar2
3ee28     3F 00 00 FF 
3ee2c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3ee30     B0 FE 9F AD |         if_z    jmp     #.next_intf
3ee34                 |         if HAVE_MOUSE
3ee34     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3ee38     C7 71 63 F5 |                 xor     htmp, hpar2
3ee3c     3F 00 00 FF 
3ee40     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3ee44     9C FE 9F AD |         if_z    jmp     #.next_intf
3ee48                 |         end
3ee48     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3ee4c     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3ee50     90 FE 9F 5D |         if_nz   jmp     #.next_intf
3ee54                 | 
3ee54     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3ee58     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3ee5c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3ee60     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3ee64     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3ee68                 |                 'debug(udec(gp_intf_num))
3ee68                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3ee68     78 FE 9F FD |                 jmp     #.next_intf
3ee6c                 | .hub
3ee6c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3ee70     70 FE 9F 5D |         if_nz   jmp     #.next_intf
3ee74     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3ee78     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3ee7c     64 FE 9F 5D |         if_nz   jmp     #.next_intf
3ee80     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3ee84     5C FE 9F 5D |         if_nz   jmp     #.next_intf
3ee88     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3ee8c     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3ee90     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3ee94     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3ee98     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3ee9c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3eea0                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3eea0     40 FE 9F FD |                 jmp     #.next_intf
3eea4                 | 
3eea4                 | '------------------------------------------------------------------------------
3eea4                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3eea4                 | ' it according to its function, or functions. In the case of this boot protocol
3eea4                 | ' keyboard/mouse class driver:
3eea4                 | ' - SetConfiguration(config_num)
3eea4                 | ' - SetProtocol(boot)
3eea4                 | ' - SetIdle(indefinite)
3eea4                 | ' - Enter the device interrupt IN polling task stage.
3eea4                 | '------------------------------------------------------------------------------
3eea4                 | ' On entry:
3eea4                 | ' On exit:
3eea4                 | '------------------------------------------------------------------------------
3eea4                 | hset_config
3eea4                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3eea4                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3eea4     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3eea8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3eeac     00 00 0C F2 |                 cmp     0-0, #0                 wz
3eeb0     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3eeb4                 |         if HAVE_MOUSE
3eeb4     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3eeb8                 |         end
3eeb8     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3eebc     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3eec0                 | .set_config
3eec0     6C 0E D0 FE |                 loc     ptra, #set_config
3eec4     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3eec8     6E ED 03 F1 |                 add     pa, hconfig_base
3eecc     F6 8D C3 FA |                 rdbyte  hpar1, pa
3eed0     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3eed4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3eed8     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3eedc     A0 02 A0 FD |                 call    #control_write
3eee0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3eee4     2D 00 64 5D |         if_nz   ret
3eee8                 | .kbd_config
3eee8     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3eeec     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3eef0                 | 
3eef0     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3eef4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3eef8     3F 00 00 FF 
3eefc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3ef00     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3ef04                 | 
3ef04     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3ef08     34 0E D0 FE |                 loc     ptra, #set_protocol
3ef0c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3ef10     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3ef14     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3ef18     A0 02 A0 FD |                 call    #control_write
3ef1c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ef20     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3ef24     E4 02 90 5D |         if_nz   jmp     #.notify_client
3ef28     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3ef2c     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3ef30     30 03 B0 FD |                 call    #hset_idle
3ef34                 |                 'cmp     retval, #PID_ACK        wz
3ef34                 |         'if_nz   mov     hkbd_ep_addr, #0
3ef34                 |         'if_nz   jmp     #.notify_client
3ef34     A8 99 02 F6 |                 mov     hctwait, _2ms_
3ef38     EF 02 A0 FD |                 call    #poll_waitx
3ef3c     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3ef40     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3ef44     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3ef48     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3ef4c     2C 03 B0 FD |                 call    #hset_kbdled_report
3ef50     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ef54     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3ef58     B0 02 90 5D |         if_nz   jmp     #.notify_client
3ef5c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3ef60     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3ef64     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3ef68     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3ef6c     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3ef70     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3ef74     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3ef78     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3ef7c     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3ef80     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3ef84     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3ef88                 |         if !!HAVE_MOUSE
3ef88                 |         end
3ef88                 | 
3ef88                 | .mouse_config
3ef88                 | if HAVE_MOUSE
3ef88     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3ef8c     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3ef90     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3ef94     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3ef98     3F 00 00 FF 
3ef9c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3efa0     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3efa4                 | 
3efa4                 |                 debug("mouse passed addr check")
3efa4                 | 
3efa4     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3efa8     00 00 80 FF 
3efac     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3efb0     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3efb4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3efb8     55 02 A0 FD |                 call    #control_read
3efbc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3efc0     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3efc4     44 02 90 5D |         if_nz   jmp     #.notify_client
3efc8     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3efcc     56 01 00 F6 |                 mov     0-0, total_data
3efd0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3efd4                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3efd4                 | 
3efd4     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3efd8     64 0D D0 FE |                 loc     ptra, #set_protocol
3efdc     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3efe0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3efe4     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3efe8     A0 02 A0 FD |                 call    #control_write
3efec     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3eff0     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3eff4     14 02 90 5D |         if_nz   jmp     #.notify_client
3eff8                 |                 debug("mouse passed SetProtocol")
3eff8     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3effc     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3f000     60 02 B0 FD |                 call    #hset_idle
3f004                 |                 'cmp     retval, #PID_ACK        wz
3f004                 |         'if_nz   mov     hmouse_ep_addr, #0
3f004                 |         'if_nz   jmp     #.notify_client
3f004                 |                 debug("mouse passed SetIdle")
3f004     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3f008     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3f00c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3f010     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3f014     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3f018     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3f01c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3f020     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3f024     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
3f028     3F 00 00 FF 
3f02c     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3f030     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3f034     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3f038     D0 01 90 FD |                 jmp     #.notify_client
3f03c                 | end
3f03c                 | .gamepad_config
3f03c                 | if _HAVE_GAMEPAD
3f03c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3f040     00 00 0C F2 |                 cmp     0-0, #0                 wz
3f044     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3f048     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3f04c     00 70 03 F6 |                 mov     htmp, 0-0
3f050     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3f054     3F 00 00 FF 
3f058     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3f05c     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3f060                 | 
3f060     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3f064     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3f068     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3f06c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3f070     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3f074     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3f078     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3f07c     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3f080     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3f084     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3f088     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3f08c     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3f090     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3f094     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3f098                 | 
3f098                 |                 if EMUPAD_MAX_PLAYER > 0
3f098                 |                 
3f098                 | .rule_loop           
3f098                 |                 end
3f098                 | 
3f098     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3f09c     5C 00 90 AD |         if_e    jmp     #.xinput
3f0a0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3f0a4     00 70 03 F6 |                 mov     htmp,0-0
3f0a8     01 A6 02 FF 
3f0ac     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3f0b0     7C 00 90 AD |         if_e    jmp     #.ps3
3f0b4                 | 
3f0b4     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3f0b8     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3f0bc     00 00 80 5F 
3f0c0     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3f0c4     03 00 80 AF 
3f0c8     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3f0cc     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3f0d0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3f0d4     55 02 A0 FD |                 call    #control_read
3f0d8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f0dc     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3f0e0     00 00 04 56 |         if_nz   mov     0-0, #0
3f0e4     24 01 90 5D |         if_nz   jmp     #.notify_client
3f0e8     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3f0ec     56 01 00 F6 |                 mov     0-0, total_data
3f0f0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3f0f4                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3f0f4                 | 
3f0f4     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3f0f8     10 01 90 FD |                 jmp     #.notify_client
3f0fc                 | .xinput
3f0fc     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3f100     2D EF 03 F6 |                 mov     pb,hdev_port
3f104     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3f108     03 EE 27 F3 |                 fle     pb,#3
3f10c     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3f110     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3f114                 | 
3f114     03 B0 06 F6 |                 mov     pkt_data, #3
3f118     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3f11c     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3f120     5A 00 A0 FD |                 call    #txn_out
3f124     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3f128                 | 
3f128     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
3f12c     DC 00 90 FD |                 jmp     #.notify_client
3f130                 | .ps3
3f130     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3f134     2D EF 03 F6 |                 mov     pb,hdev_port
3f138     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3f13c     04 EE 27 F3 |                 fle     pb,#4
3f140     F7 EF C3 F9 |                 decod   pb
3f144     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3f148                 | 
3f148     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3f14c     00 0C D0 FE |                 loc     ptra, #set_report
3f150     01 00 80 FF 
3f154     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3f158     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3f15c     03 61 5C FC |                 wrword  #48, ptra[wLength]
3f160     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3f164     A0 02 A0 FD |                 call    #control_write
3f168                 | 
3f168     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3f16c     E0 0B D0 FE |                 loc     ptra, #set_report
3f170     01 00 80 FF 
3f174     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3f178     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3f17c     03 09 5C FC |                 wrword  #4, ptra[wLength]
3f180     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3f184     A0 02 A0 FD |                 call    #control_write
3f188     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3f18c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3f190     00 00 04 56 |         if_nz   mov     0-0, #0
3f194     74 00 90 5D |         if_nz   jmp     #.notify_client
3f198                 | 
3f198     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3f19c     6C 00 90 FD |                 jmp     #.notify_client
3f1a0                 | end
3f1a0                 | 
3f1a0                 | .hub_config
3f1a0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3f1a4     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3f1a8     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
3f1ac     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3f1b0     3F 00 00 FF 
3f1b4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3f1b8     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3f1bc                 | 
3f1bc     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3f1c0     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3f1c4     26 EF 03 F6 |                 mov     pb, hub_descr_p
3f1c8     55 02 A0 FD |                 call    #control_read
3f1cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f1d0     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3f1d4     34 00 90 5D |         if_nz   jmp     #.notify_client
3f1d8                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3f1d8                 | 
3f1d8     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3f1dc     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3f1e0     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3f1e4                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3f1e4                 | .pwr_loop
3f1e4     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3f1e8     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3f1ec     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
3f1f0     A0 02 A0 FD |                 call    #control_write
3f1f4     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
3f1f8                 | 
3f1f8     B1 99 02 F6 |                 mov     hctwait, _500ms_
3f1fc     B0 99 02 F1 |                 add     hctwait, _100ms_
3f200     EF 02 A0 FD |                 call    #poll_waitx
3f204                 | 
3f204     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3f208     00 00 90 FD |                 jmp     #.notify_client
3f20c                 | 
3f20c                 | .notify_client
3f20c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3f210     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3f214                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3f214                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3f214     2D 00 64 FD |                 ret
3f218                 | 
3f218                 | '------------------------------------------------------------------------------
3f218                 | ' Initialize the keyboard/mouse data area to start-up values.
3f218                 | '------------------------------------------------------------------------------
3f218                 | ' On entry:
3f218                 | ' On exit:
3f218                 | '------------------------------------------------------------------------------
3f218                 | init_kbdm_data
3f218     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3f21c     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3f220                 | 
3f220     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3f224     2B ED 03 F6 |                 mov     pa, cache_end_p
3f228                 | .loop
3f228     61 01 4C FC |                 wrbyte  #0, ptra++
3f22c     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3f230     F4 FF 9F CD |         if_b    jmp     #.loop
3f234                 |         
3f234                 |         if EMUPAD_MAX_PLAYER > 0
3f234                 |         end
3f234                 | 
3f234                 | 
3f234     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3f238                 | .regloop
3f238     00 EC 8F F9 |                 altd    pa
3f23c     00 00 04 F6 |                 mov     0-0, #0
3f240     01 EC 07 F1 |                 add     pa, #1
3f244     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3f248     EC FF 9F 5D |         if_nz   jmp     #.regloop
3f24c                 | 
3f24c     E1 E1 61 FF 
3f250     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3f254     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3f258     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3f25c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3f260                 | 
3f260     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3f264                 | 
3f264                 | '------------------------------------------------------------------------------
3f264                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3f264                 | ' function.
3f264                 | '------------------------------------------------------------------------------
3f264                 | ' On entry:
3f264                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3f264                 | '   hpar2 - index number of the target interface.
3f264                 | ' On exit:
3f264                 | '------------------------------------------------------------------------------
3f264                 | hset_idle
3f264     A8 99 02 F6 |                 mov     hctwait, _2ms_
3f268     EF 02 A0 FD |                 call    #poll_waitx
3f26c     D8 0A D0 FE |                 loc     ptra, #set_idle
3f270     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
3f274     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
3f278     A0 02 80 FD |                 jmp     #control_write
3f27c                 | 
3f27c                 | '------------------------------------------------------------------------------
3f27c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3f27c                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3f27c                 | '------------------------------------------------------------------------------
3f27c                 | ' On entry:
3f27c                 | '   ep_addr_pid - device address and enpoint for the request.
3f27c                 | ' On exit:
3f27c                 | '   retval - transaction result.
3f27c                 | '------------------------------------------------------------------------------
3f27c                 | hset_kbdled_report
3f27c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3f280     CC 0A D0 FE |                 loc     ptra, #set_report
3f284     01 00 80 FF 
3f288     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3f28c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3f290     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3f294     27 EF 03 F6 |                 mov     pb, urx_buff_p
3f298     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3f29c     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3f2a0                 | 
3f2a0                 | '------------------------------------------------------------------------------
3f2a0                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3f2a0                 | '------------------------------------------------------------------------------
3f2a0                 | ' On entry:
3f2a0                 | ' On exit:
3f2a0                 | '------------------------------------------------------------------------------
3f2a0                 | hget_kbd_in_report
3f2a0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3f2a4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3f2a8     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3f2ac     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3f2b0     CF 02 A0 FD |                 call    #do_int_in
3f2b4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f2b8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3f2bc                 | 
3f2bc     00 90 0F F2 |                 cmp     hpar3, #0               wz
3f2c0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3f2c4                 | 
3f2c4     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3f2c8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3f2cc     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3f2d0     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3f2d4                 | 
3f2d4     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3f2d8     18 00 B0 FD |                 call    #hkbd_compare
3f2dc                 |         if EMUPAD_MAX_PLAYER > 0
3f2dc                 |         end
3f2dc                 | 
3f2dc                 | .led_check
3f2dc     3B 71 03 F6 |                 mov     htmp, kb_led_states
3f2e0     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3f2e4     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3f2e8     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3f2ec     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3f2f0     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3f2f4                 | 
3f2f4                 | '------------------------------------------------------------------------------
3f2f4                 | ' Compare current and previous keyboard data buffers for keypress changes.
3f2f4                 | '------------------------------------------------------------------------------
3f2f4                 | hkbd_compare
3f2f4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3f2f8     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
3f2fc     61 73 07 FB |                 rdlong  htmp1, ptra++
3f300     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3f304     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
3f308     61 73 07 FB |                 rdlong  htmp1, ptra++
3f30c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3f310     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3f314     2D 00 64 AD |         if_z    ret
3f318                 | 
3f318     B4 13 D0 FE |                 loc     ptra, #hkbd_report
3f31c                 | 
3f31c                 |                 ' Handle modifiers
3f31c     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
3f320     00 87 C7 FA |                 rdbyte  hr1, ptra
3f324     C7 87 43 F9 |                 rolword hr1,hpar2,#0
3f328     63 86 63 FD |                 mergew  hr1
3f32c     08 EC 07 F6 |                 mov     pa,#8
3f330                 | .modloop
3f330     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3f334     E8 8C 07 F6 |                 mov     hpar1,#$E8
3f338     F6 8D 83 F1 |                 sub     hpar1,pa
3f33c     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3f340     FB ED 6F FB |                 djnz    pa,#.modloop
3f344                 | 
3f344     6F E0 75 FD | .release        modc    _set    wc
3f348                 |                 'alts    hdev_port, #hid_report_p
3f348                 |                 'mov     ptra, hid_report_p
3f348     02 F0 07 F1 |                 add     ptra, #2
3f34c     06 EC 07 F6 |                 mov     pa, #6
3f350     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3f354     20 00 90 AD |         if_z    jmp     #.rl3
3f358     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3f35c     02 F2 07 F1 |                 add     ptrb, #2
3f360     06 EE 07 F6 |                 mov     pb, #6
3f364     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
3f368     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3f36c     08 00 90 AD |         if_z    jmp     #.rl3
3f370     FC EF 6F FB |                 djnz    pb, #.rl2
3f374     68 00 B0 FD |                 call    #hkbd_translate
3f378     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3f37c                 | 
3f37c     00 90 07 F6 |                 mov     hpar3, #0
3f380     1F 90 27 F4 |                 bith    hpar3, #31
3f384                 | 
3f384     6F 00 74 FD | .press          modc    _clr    wc
3f388     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3f38c     02 F0 07 F1 |                 add     ptra, #2
3f390     06 EC 07 F6 |                 mov     pa, #6
3f394     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3f398     20 00 90 AD |         if_z    jmp     #.pl3
3f39c     30 13 F0 FE |                 loc     ptrb, #hkbd_report
3f3a0     02 F2 07 F1 |                 add     ptrb, #2
3f3a4     06 EE 07 F6 |                 mov     pb, #6
3f3a8     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
3f3ac     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3f3b0     08 00 90 AD |         if_z    jmp     #.pl3
3f3b4     FC EF 6F FB |                 djnz    pb, #.pl2
3f3b8     24 00 B0 FD |                 call    #hkbd_translate
3f3bc     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3f3c0                 | 
3f3c0     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3f3c4     08 13 F0 FE |                 loc     ptrb, #hkbd_report
3f3c8     28 02 64 FD |                 setq #1
3f3cc     61 73 07 FB |                 rdlong  htmp1, ptra++
3f3d0     28 02 64 FD |                 setq #1
3f3d4     E1 73 67 FC |                 wrlong  htmp1, ptrb++
3f3d8     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3f3dc                 | 
3f3dc     2D 00 64 FD |                 ret
3f3e0                 | 
3f3e0                 | '------------------------------------------------------------------------------
3f3e0                 | ' Translate keyboard scancode to ASCII
3f3e0                 | '------------------------------------------------------------------------------
3f3e0                 | ' On entry:
3f3e0                 | '   hpar1 - scancode
3f3e0                 | '   hpar2 - key modifiers state
3f3e0                 | '       c - pressed (0) or released (1) flag
3f3e0                 | ' On exit:
3f3e0                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3f3e0                 | '               30..17 = unused
3f3e0                 | '                   18 = scroll-lock state 
3f3e0                 | '                   17 = caps-lock state
3f3e0                 | '                   16 = num-lock state 
3f3e0                 | '                15..8 = key modifiers state
3f3e0                 | '                 7..0 = scancode
3f3e0                 | '------------------------------------------------------------------------------
3f3e0                 | hkbd_translate
3f3e0     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3f3e4     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3f3e8     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3f3ec     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3f3f0     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3f3f4     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3f3f8                 | 
3f3f8                 |         if EMUPAD_MAX_PLAYER > 0
3f3f8                 | 
3f3f8                 |         if EMUPAD_BT0_BIT >= 0
3f3f8                 |         end
3f3f8                 |         if EMUPAD_BT1_BIT >= 0
3f3f8                 |         end
3f3f8                 |         if EMUPAD_BT2_BIT >= 0
3f3f8                 |         end
3f3f8                 |         if EMUPAD_BT3_BIT >= 0
3f3f8                 |         end
3f3f8                 |         if EMUPAD_BT4_BIT >= 0
3f3f8                 |         end
3f3f8                 |         if EMUPAD_BT5_BIT >= 0
3f3f8                 |         end
3f3f8                 |         if EMUPAD_BT6_BIT >= 0
3f3f8                 |         end
3f3f8                 |         if EMUPAD_BT7_BIT >= 0
3f3f8                 |         end
3f3f8                 |         if EMUPAD_BT8_BIT >= 0
3f3f8                 |         end
3f3f8                 |         if EMUPAD_BT9_BIT >= 0
3f3f8                 |         end
3f3f8                 | 
3f3f8                 |         end
3f3f8     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
3f3fc     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3f400     1F 8C 47 F4 |                 bitc    hpar1, #31
3f404                 |         if KEYQUEUE_SIZE > 0
3f404     C4 09 B0 FE |                 loc pb,#keyq_head
3f408     F7 71 E3 FA |                 rdword htmp,pb
3f40c     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3f410     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3f414     B8 75 03 F6 |                 mov htmp2,htmp
3f418     04 74 07 FA |                 mul htmp2,#4
3f41c     F7 75 03 F1 |                 add htmp2,pb
3f420     02 74 07 F1 |                 add htmp2,#2
3f424     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3f428     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3f42c     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
3f430     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3f434                 |         end
3f434     2D 00 7C FD |                 ret wcz
3f438                 | 
3f438                 | if HAVE_MOUSE
3f438                 | '------------------------------------------------------------------------------
3f438                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3f438                 | '------------------------------------------------------------------------------
3f438                 | ' On entry:
3f438                 | ' On exit:
3f438                 | '------------------------------------------------------------------------------
3f438                 | hget_mouse_in_report
3f438     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3f43c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3f440     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3f444     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3f448     CF 02 A0 FD |                 call    #do_int_in
3f44c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f450     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3f454                 | 
3f454     00 90 0F F2 |                 cmp     hpar3, #0               wz
3f458     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3f45c                 | 
3f45c     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3f460     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3f464     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3f468     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3f46c                 | 
3f46c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3f470     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
3f474     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
3f478     01 90 87 31 |         if_ae   sub     hpar3, #1
3f47c                 | 
3f47c     40 09 90 FE |                 loc     pa, #mouse_limits
3f480     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
3f484                 | 
3f484                 |                 ' load xacc,yacc,zacc
3f484     28 04 64 FD |                 setq    #3-1
3f488     80 87 07 FB |                 rdlong  hr1,ptrb
3f48c                 |                 ' load limits and outptr
3f48c     28 04 64 FD |                 setq    #3-1
3f490     F6 73 03 FB |                 rdlong  htmp1,pa
3f494                 | 
3f494     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
3f498     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
3f49c     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
3f4a0     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
3f4a4     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
3f4a8     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
3f4ac     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
3f4b0     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
3f4b4                 |               
3f4b4                 | 
3f4b4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
3f4b8     07 70 67 F7 |                 signx   htmp, #7
3f4bc     B8 87 03 F1 |                 add     hr1,htmp
3f4c0     00 72 0F F2 |                 cmp     htmp1,#0 wz
3f4c4     B9 87 63 53 |         if_ne   fles    hr1,htmp1
3f4c8     00 86 47 53 |         if_ne   fges    hr1,#0
3f4cc                 | 
3f4cc     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
3f4d0     07 70 67 F7 |                 signx   htmp, #7
3f4d4     B8 89 03 F1 |                 add     hr2,htmp
3f4d8     00 74 0F F2 |                 cmp     htmp2,#0 wz
3f4dc     BA 89 63 53 |         if_ne   fles    hr2,htmp2
3f4e0     00 88 47 53 |         if_ne   fges    hr2,#0
3f4e4                 |                 
3f4e4                 | 
3f4e4     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
3f4e8     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
3f4ec     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
3f4f0     B8 8B 03 A1 |         if_z    add     hr3,htmp
3f4f4                 | 
3f4f4     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3f4f8     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3f4fc                 | 
3f4fc                 |                 ' write back accumulators
3f4fc     28 04 64 FD |                 setq    #3-1
3f500     80 87 67 FC |                 wrlong  hr1,ptrb
3f504                 |                 ' if outptr set, write X/Y words
3f504     00 76 0F F2 |                 cmp htmp3,#0                    wz
3f508     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
3f50c     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
3f510     2D 00 64 FD |                 ret
3f514                 | end
3f514                 | 
3f514                 | '------------------------------------------------------------------------------
3f514                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3f514                 | '------------------------------------------------------------------------------
3f514                 | ' On entry:
3f514                 | ' On exit:
3f514                 | '------------------------------------------------------------------------------
3f514                 | if _HAVE_GAMEPAD
3f514                 | hget_gp_in_report
3f514     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3f518     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3f51c                 | 
3f51c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3f520     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3f524     00 90 E3 F8 |                 getbyte hpar3
3f528     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3f52c     CF 02 A0 FD |                 call    #do_int_in
3f530     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f534     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3f538                 | 
3f538     00 90 0F F2 |                 cmp     hpar3, #0               wz
3f53c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3f540                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3f540                 | 
3f540     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3f544     00 70 E3 F8 |                 getbyte htmp                            ' |
3f548     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3f54c     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3f550     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3f554     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3f558     B8 01 C0 F8 |                 setbyte htmp                            ' |
3f55c                 | 
3f55c                 | ' Note: the following code compares the current and previous reports
3f55c                 | ' and process the data if there are changes to ease the debug output.
3f55c                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3f55c                 | ' gpPreReport buffer.
3f55c                 | 
3f55c                 |                 ' ----- start of block to remove
3f55c                 |                 {
3f55c                 |                 }
3f55c                 |                 ' ----- end of block to remove
3f55c     F4 04 90 FE |                 loc pa,#hpad_translate
3f560     2A EC 63 FD |                 push pa
3f564                 | 
3f564                 |                 ' FALL THROUGH !!!!
3f564                 | 
3f564                 | '------------------------------------------------------------------------------
3f564                 | ' Decode controller report
3f564                 | '------------------------------------------------------------------------------
3f564                 | hid_decode
3f564                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3f564     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3f568     00 04 00 FF 
3f56c     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3f570                 | 
3f570     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3f574                 | 
3f574     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3f578     00 2A E3 F8 |                 getbyte hidr_type
3f57c     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3f580     34 02 90 AD |         if_z    jmp     #hpad_xinput
3f584     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3f588     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3f58c     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3f590     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3f594     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3f598                 |                 
3f598                 | 
3f598                 | '------------------------------------------------------------------------------
3f598                 | ' Handle HID controller (or mouse now
3f598                 | ' On entry:
3f598                 | '   ptrb - controller report
3f598                 | '------------------------------------------------------------------------------
3f598                 | hpad_hid
3f598     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3f59c     F7 F1 03 F6 |                 mov     ptra, pb
3f5a0     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3f5a4     00 EC 03 F6 |                 mov     pa, 0-0
3f5a8                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3f5a8     19 2A 3B FF 
3f5ac     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3f5b0                 | 
3f5b0                 | .next
3f5b0     00 EC 5F F2 |                 cmps    pa, #0      wcz
3f5b4     2D 00 7C ED |         if_be   ret     wcz
3f5b8                 | 
3f5b8     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3f5bc     01 EC 87 F1 |                 sub     pa, #1
3f5c0     00 8E 07 F6 |                 mov     hpar2, #0
3f5c4                 | 
3f5c4     C6 71 03 F6 |                 mov     htmp, hpar1
3f5c8     03 70 07 F5 |                 and     htmp, #$03
3f5cc     01 70 0F F2 |                 cmp     htmp, #1    wz
3f5d0     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3f5d4     07 8E 67 A7 |         if_z    signx   hpar2,#7
3f5d8     01 EC 87 A1 |         if_z    sub     pa, #1
3f5dc     02 70 0F F2 |                 cmp     htmp, #2    wz
3f5e0     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3f5e4     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3f5e8     02 EC 87 A1 |         if_z    sub     pa, #2
3f5ec     03 70 0F F2 |                 cmp     htmp, #3    wz
3f5f0     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3f5f4     04 EC 87 A1 |         if_z    sub     pa, #4
3f5f8                 | 
3f5f8     FC 8C 07 F5 |                 and     hpar1, #$FC
3f5fc                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3f5fc                 | 
3f5fc     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3f600     0C 01 90 AD |         if_z    jmp     #.report_id
3f604     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3f608     24 01 90 AD |         if_z    jmp     #.usage_page
3f60c     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3f610     2C 01 90 AD |         if_z    jmp     #.usage
3f614     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3f618     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3f61c     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3f620     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3f624     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3f628     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3f62c     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3f630     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3f634     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3f638     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3f63c     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3f640     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3f644     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3f648     64 FF 9F 5D |         if_nz   jmp     #.next
3f64c                 | 
3f64c     D8 1D A7 FB |                 tjf     hidr_state,#.next
3f650                 | 
3f650     03 8E 07 F5 |                 and     hpar2, #$03
3f654     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3f658     18 00 90 5D |         if_nz   jmp     #.skip
3f65c                 | 
3f65c     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
3f660     20 00 90 AD |         if_z    jmp     #.axes
3f664     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3f668     5C 00 90 AD |         if_z    jmp     #.hats
3f66c     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3f670     70 00 90 AD |         if_z    jmp     #.buttons
3f674                 | .skip
3f674     8F 71 03 F6 |                 mov     htmp, hidr_size
3f678     90 71 03 FA |                 mul     htmp, hidr_count
3f67c     B8 23 03 F1 |                 add     hidr_offset, htmp
3f680     2C FF 9F FD |                 jmp     #.next
3f684                 | .axes
3f684                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3f684     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3f688     90 87 03 F6 |                 mov     hr1, hidr_count
3f68c                 | .l1
3f68c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3f690     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3f694     04 03 B0 FD |                 call    #hpad_getbits
3f698     64 03 B0 FD |                 call    #hpad_normalize
3f69c     06 84 1F F2 |                 cmp     hr0, #6         wcz
3f6a0     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3f6a4     00 88 43 C8 |         if_b    getnib  hr2
3f6a8     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3f6ac     5F 01 20 C9 |         if_b    setword retval
3f6b0     01 84 07 C1 |         if_b    add     hr0, #1
3f6b4     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3f6b8     F4 87 6F FB |                 djnz    hr1, #.l1
3f6bc                 | 
3f6bc     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3f6c0     01 1C 07 F6 |                 mov     hidr_state, #1
3f6c4     E8 FE 9F FD |                 jmp     #.next
3f6c8                 | .hats
3f6c8                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3f6c8     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3f6cc     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3f6d0     C8 02 B0 FD |                 call    #hpad_getbits
3f6d4     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3f6d8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3f6dc     01 1C 07 F6 |                 mov     hidr_state, #1
3f6e0     90 FF 9F FD |                 jmp     #.skip
3f6e4                 | .buttons
3f6e4                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3f6e4     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3f6e8     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3f6ec     90 8F 03 FA |                 mul     hpar2, hidr_count
3f6f0     A8 02 B0 FD |                 call    #hpad_getbits
3f6f4     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3f6f8     B8 BF 62 F0 |                 shl     retval, htmp
3f6fc     5F 17 43 F5 |                 or      hidr_buttons, retval
3f700     90 71 03 F1 |                 add     htmp, hidr_count
3f704     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3f708     01 1C 07 F6 |                 mov     hidr_state, #1
3f70c     64 FF 9F FD |                 jmp     #.skip
3f710                 | .report_id
3f710     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3f714     2D 00 7C 5D |         if_nz   ret     wcz
3f718     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3f71c     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3f720     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3f724     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3f728     01 F2 87 51 |         if_nz   sub     ptrb,#1
3f72c     80 FE 9F FD |                 jmp     #.next
3f730                 | .usage_page
3f730     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3f734     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3f738     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3f73c     70 FE 9F FD |                 jmp     #.next
3f740                 | .usage
3f740     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3f744     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3f748     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3f74c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3f750     5C FE 9F AD |         if_z    jmp     #.next
3f754     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3f758     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3f75c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3f760     4C FE 9F AD |         if_z    jmp     #.next
3f764     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3f768     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
3f76c     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3f770     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3f774     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3f778     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3f77c     10 00 90 AD |         if_z    jmp     #.usage_axis
3f780     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3f784     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3f788     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3f78c     20 FE 9F FD |                 jmp     #.next
3f790                 | .usage_axis
3f790     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3f794     18 FE 9F CD |         if_b    jmp     #.next
3f798     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3f79c     C7 01 00 F8 |                 setnib  hpar2
3f7a0                 | 
3f7a0     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3f7a4     C7 8F C3 F9 |                 decod   hpar2
3f7a8     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3f7ac                 | 
3f7ac     01 24 07 F1 |                 add     hidr_usage_idx, #1
3f7b0     02 1C 07 F6 |                 mov     hidr_state, #2
3f7b4     F8 FD 9F FD |                 jmp     #.next
3f7b8                 | 
3f7b8                 | '------------------------------------------------------------------------------
3f7b8                 | ' Handle XInput controller
3f7b8                 | ' On entry:
3f7b8                 | '   ptrb - controller report
3f7b8                 | '------------------------------------------------------------------------------
3f7b8                 | '   Default implementation translates the report to a pseudo-defacto hid
3f7b8                 | '   standard and jumps to hpad_translate for actions.
3f7b8                 | '   Implementors may take specific actions for this kind of controller.
3f7b8                 | '------------------------------------------------------------------------------
3f7b8                 | hpad_xinput
3f7b8     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3f7bc     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3f7c0     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3f7c4     14 70 0F F2 |                 cmp     htmp, #$14      wz
3f7c8     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3f7cc                 | 
3f7cc                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3f7cc                 | 
3f7cc     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3f7d0     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3f7d4                 | 
3f7d4     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3f7d8     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3f7dc     5F BF 22 F6 |                 not     retval
3f7e0     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3f7e4     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3f7e8     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3f7ec     5F BF 22 F6 |                 not     retval
3f7f0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3f7f4                 | 
3f7f4     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3f7f8     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3f7fc     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3f800     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3f804     F8 01 B0 FD |                 call    #hpad_normalize
3f808     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3f80c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3f810     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3f814     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3f818     E4 01 B0 FD |                 call    #hpad_normalize
3f81c     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3f820                 | 
3f820     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3f824     81 BF E6 FA |                 rdword  retval, ptrb[1]
3f828     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3f82c     00 16 47 F4 |                 bitc    hidr_buttons, #0
3f830     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3f834     01 16 47 F4 |                 bitc    hidr_buttons, #1
3f838     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3f83c     02 16 47 F4 |                 bitc    hidr_buttons, #2
3f840     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3f844     03 16 47 F4 |                 bitc    hidr_buttons, #3
3f848     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3f84c     04 16 47 F4 |                 bitc    hidr_buttons, #4
3f850     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3f854     05 16 47 F4 |                 bitc    hidr_buttons, #5
3f858     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3f85c     08 16 47 F4 |                 bitc    hidr_buttons, #8
3f860     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3f864     09 16 47 F4 |                 bitc    hidr_buttons, #9
3f868     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3f86c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3f870     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3f874     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3f878     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3f87c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3f880                 | 
3f880     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3f884     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3f888     7A BB 7A FF 
3f88c     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3f890     F9 FF 7F FF 
3f894     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3f898     B9 71 5F F9 |                 altgn   htmp, #htmp1
3f89c     00 70 43 F8 |                 getnib  htmp
3f8a0     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3f8a4                 | 
3f8a4     AC 01 90 FD |                 jmp     #hpad_translate
3f8a8                 | 
3f8a8                 | '------------------------------------------------------------------------------
3f8a8                 | ' Handle PS3 controller
3f8a8                 | ' On entry:
3f8a8                 | '   ptrb - controller report
3f8a8                 | '------------------------------------------------------------------------------
3f8a8                 | '   Default implementation translates the report to a pseudo-defacto hid
3f8a8                 | '   standard and jumps to hpad_translate for actions.
3f8a8                 | '   Implementors may take specific actions for this kind of controller.
3f8a8                 | '------------------------------------------------------------------------------
3f8a8                 | hpad_ps3
3f8a8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3f8ac     01 70 0F F2 |                 cmp     htmp, #$01      wz
3f8b0     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3f8b4                 | 
3f8b4                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3f8b4                 | 
3f8b4     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3f8b8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3f8bc     40 01 B0 FD |                 call    #hpad_normalize
3f8c0     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3f8c4     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3f8c8     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3f8cc     30 01 B0 FD |                 call    #hpad_normalize
3f8d0     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3f8d4     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3f8d8     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3f8dc     20 01 B0 FD |                 call    #hpad_normalize
3f8e0     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3f8e4     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3f8e8     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3f8ec     10 01 B0 FD |                 call    #hpad_normalize
3f8f0     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3f8f4     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3f8f8     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3f8fc                 | 
3f8fc     08 8C 07 F6 |                 mov     hpar1, #8
3f900     13 8E 07 F6 |                 mov     hpar2, #19
3f904     94 00 B0 FD |                 call    #hpad_getbits
3f908                 | 
3f908     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3f90c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3f910     00 16 47 F4 |                 bitc    hidr_buttons, #0
3f914     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3f918     01 16 47 F4 |                 bitc    hidr_buttons, #1
3f91c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3f920     02 16 47 F4 |                 bitc    hidr_buttons, #2
3f924     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3f928     03 16 47 F4 |                 bitc    hidr_buttons, #3
3f92c     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3f930     04 16 47 F4 |                 bitc    hidr_buttons, #4
3f934     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3f938     05 16 47 F4 |                 bitc    hidr_buttons, #5
3f93c     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3f940     06 16 47 F4 |                 bitc    hidr_buttons, #6
3f944     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3f948     07 16 47 F4 |                 bitc    hidr_buttons, #7
3f94c     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3f950     08 16 47 F4 |                 bitc    hidr_buttons, #8
3f954     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3f958     09 16 47 F4 |                 bitc    hidr_buttons, #9
3f95c     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3f960     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3f964     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3f968     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3f96c     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3f970     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3f974                 | 
3f974     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3f978     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3f97c     09 FA 79 FF 
3f980     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3f984     FF FA 7F FF 
3f988     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3f98c     B9 71 5F F9 |                 altgn   htmp, #htmp1
3f990     00 70 43 F8 |                 getnib  htmp
3f994     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3f998                 | 
3f998     B8 00 90 FD |                 jmp     #hpad_translate
3f99c                 | 
3f99c                 | '------------------------------------------------------------------------------
3f99c                 | ' Read bits from report data buffer
3f99c                 | '------------------------------------------------------------------------------
3f99c                 | ' On entry:
3f99c                 | '   PTRB - report buffer
3f99c                 | '   hpar1 - start bit
3f99c                 | '   hpar2 - number of bits
3f99c                 | ' On exit:
3f99c                 | '   retval - bits
3f99c                 | '------------------------------------------------------------------------------
3f99c                 | hpad_getbits
3f99c     C6 71 03 F6 |                 mov     htmp, hpar1
3f9a0     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3f9a4     F9 71 03 F1 |                 add     htmp, ptrb
3f9a8     B8 BF 02 FB |                 rdlong  retval, htmp
3f9ac                 | 
3f9ac     C6 73 03 F6 |                 mov     htmp1, hpar1
3f9b0     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3f9b4     B9 BF 42 F0 |                 shr     retval, htmp1
3f9b8                 | 
3f9b8     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3f9bc     10 00 90 1D |         if_a    jmp     #.l1
3f9c0                 | 
3f9c0     C7 8F C3 F9 |                 decod   hpar2
3f9c4     01 8E 87 F1 |                 sub     hpar2, #1
3f9c8     C7 BF 02 F5 |                 and     retval, hpar2
3f9cc     2D 00 64 FD |                 ret
3f9d0                 | .l1
3f9d0     FF 7F 00 FF 
3f9d4     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3f9d8     03 70 07 F1 |                 add     htmp, #3
3f9dc     B8 75 03 FB |                 rdlong  htmp2, htmp
3f9e0     18 8E 87 F1 |                 sub     hpar2, #24
3f9e4     C7 8F C3 F9 |                 decod   hpar2
3f9e8     01 8E 87 F1 |                 sub     hpar2, #1
3f9ec     B9 75 43 F0 |                 shr     htmp2, htmp1
3f9f0     C7 75 03 F5 |                 and     htmp2, hpar2
3f9f4     18 74 67 F0 |                 shl     htmp2, #24
3f9f8     BA BF 42 F5 |                 or      retval, htmp2
3f9fc     2D 00 64 FD |                 ret
3fa00                 | 
3fa00                 | '------------------------------------------------------------------------------
3fa00                 | ' Normalize value to signed word (-32768 / 32767)
3fa00                 | '------------------------------------------------------------------------------
3fa00                 | ' On entry:
3fa00                 | '   retval - value to normalize
3fa00                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3fa00                 | '   - or -
3fa00                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3fa00                 | '   hidr_size - value bits length
3fa00                 | ' On exit:
3fa00                 | '   retval - normalized value
3fa00                 | '------------------------------------------------------------------------------
3fa00                 | hpad_normalize
3fa00     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3fa04     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3fa08     2D 00 64 AD |         if_z    ret
3fa0c     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3fa10     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3fa14     0F 72 77 F7 |                 signx   htmp1, #15      wc
3fa18     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3fa1c     00 BE 66 C7 |         if_c    signx   retval, #0-0
3fa20     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3fa24     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3fa28     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3fa2c     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3fa30     B8 71 53 F6 |                 abs     htmp            wc
3fa34     1F BE 0E F4 |                 testb   retval, #31     wz
3fa38     5F BF 42 F6 |                 abs     retval
3fa3c     B8 BF 12 FD |                 qdiv    retval, htmp
3fa40     18 BE 62 FD |                 getqx   retval
3fa44     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3fa48     C0 FF 7F FF 
3fa4c     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3fa50     2D 00 64 FD |                 ret
3fa54                 | 
3fa54                 | '------------------------------------------------------------------------------
3fa54                 | ' Perform controller actions
3fa54                 | ' On entry:
3fa54                 | '    hidr_id        report id
3fa54                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3fa54                 | '                      X = hidr_axis+0, #0
3fa54                 | '                      Y = hidr_axis+0, #1
3fa54                 | '                      Z = hidr_axis+1, #0
3fa54                 | '                     RX = hidr_axis+1, #1
3fa54                 | '                     RY = hidr_axis+2, #0
3fa54                 | '                     RZ = hidr_axis+2, #1
3fa54                 | '    hidr_buttons   buttons state (bits 0 to 31)
3fa54                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3fa54                 | '
3fa54                 | '                     -------3 -------2 -------1 -------0 byte
3fa54                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3fa54                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3fa54                 | '                                zyx||| |||||||| ++++++++ n. buttons
3fa54                 | '                                |||||| ||||++++--------- n. axes
3fa54                 | '                                |||||| ++++------------- n. hats
3fa54                 | '                                ++++++------------------ valid axes
3fa54                 | '------------------------------------------------------------------------------
3fa54                 | hpad_translate
3fa54                 | 
3fa54                 | 
3fa54                 |         if HAVE_HIDPAD
3fa54     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3fa58     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3fa5c     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3fa60     01 70 E7 F2 |                 cmpsub  htmp,#1
3fa64     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3fa68     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3fa6c     2D 00 7C 3D |         if_ae   ret     wcz
3fa70     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3fa74     B8 F3 03 F1 |                 add     ptrb,htmp
3fa78     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3fa7c     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3fa80     28 0C 64 FD |                 setq    #7-1
3fa84     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3fa88                 |         end
3fa88                 | 
3fa88                 | 
3fa88                 |         if EMUPAD_MAX_PLAYER > 0
3fa88                 | .emupad_no_hat
3fa88                 |         if EMUPAD_BT0_BIT >= 0
3fa88                 |         end
3fa88                 |         if EMUPAD_BT1_BIT >= 0
3fa88                 |         end
3fa88                 |         if EMUPAD_BT2_BIT >= 0
3fa88                 |         end
3fa88                 |         if EMUPAD_BT3_BIT >= 0
3fa88                 |         end
3fa88                 |         if EMUPAD_BT4_BIT >= 0
3fa88                 |         end
3fa88                 |         if EMUPAD_BT5_BIT >= 0
3fa88                 |         end
3fa88                 |         if EMUPAD_BT6_BIT >= 0
3fa88                 |         end
3fa88                 |         if EMUPAD_BT7_BIT >= 0
3fa88                 |         end
3fa88                 |         if EMUPAD_BT8_BIT >= 0
3fa88                 |         end
3fa88                 |         if EMUPAD_BT9_BIT >= 0
3fa88                 |         end
3fa88                 | .emupad_slot_over
3fa88                 |         end
3fa88                 | 
3fa88                 |         if 0
3fa88                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3fa88                 | 
3fa88                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3fa88                 | 
3fa88                 |         end
3fa88     2D 00 64 FD |                 ret
3fa8c                 | end
3fa8c                 | 
3fa8c                 | if EMUPAD_MAX_PLAYER > 0
3fa8c                 | '------------------------------------------------------------------------------
3fa8c                 | ' Clear EmuPad state
3fa8c                 | '------------------------------------------------------------------------------
3fa8c                 | emupad_reset
3fa8c                 | 
3fa8c                 | '------------------------------------------------------------------------------
3fa8c                 | ' Get EmuPad Player number for current device (into retval)
3fa8c                 | ' Z flag is also set if current device is valid
3fa8c                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3fa8c                 | '------------------------------------------------------------------------------
3fa8c                 | emupad_getnum
3fa8c                 | .loop
3fa8c                 | '------------------------------------------------------------------------------
3fa8c                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3fa8c                 | '------------------------------------------------------------------------------
3fa8c                 | emupad_discon
3fa8c                 | .loop         
3fa8c                 |         
3fa8c                 |         ' FALL THROUGH!!!
3fa8c                 | 
3fa8c                 | '------------------------------------------------------------------------------
3fa8c                 | ' Update EmuPad reports (all of them...)
3fa8c                 | '------------------------------------------------------------------------------
3fa8c                 | emupad_write_reports
3fa8c                 | .devloop
3fa8c                 | 
3fa8c                 | end
3fa8c                 | 
3fa8c                 | 
3fa8c                 | '------------------------------------------------------------------------------
3fa8c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3fa8c                 | '------------------------------------------------------------------------------
3fa8c                 | ' On entry:
3fa8c                 | ' On exit:
3fa8c                 | '------------------------------------------------------------------------------
3fa8c                 | hget_hub_status
3fa8c     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3fa90     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3fa94     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3fa98     01 90 2F F9 |                 setword hpar3, #1, #1
3fa9c     CF 02 A0 FD |                 call    #do_int_in
3faa0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3faa4     0C 00 90 AD |         if_z    jmp     #.data
3faa8     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3faac     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3fab0     2D 00 64 FD |                 ret
3fab4                 | .data
3fab4     00 90 0F F2 |                 cmp     hpar3, #0               wz
3fab8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3fabc                 | 
3fabc     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3fac0     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3fac4     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3fac8     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3facc                 |                 debug(ubin_long(hub_status_chg))
3facc                 | 
3facc     01 5A 06 F6 |                 mov     hdev_port, #1
3fad0                 | .loop
3fad0     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3fad4     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3fad8     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3fadc     F0 FF 9F 3D |         if_nc   jmp     #.loop
3fae0     2D 00 64 FD |                 ret
3fae4                 | 
3fae4                 | hub_port_handler
3fae4     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3fae8     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3faec     27 EF 03 F6 |                 mov     pb, urx_buff_p
3faf0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3faf4     55 02 A0 FD |                 call    #control_read
3faf8     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3fafc                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3fafc                 | 
3fafc     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3fb00     50 01 90 5D |         if_x0   jmp     #.other
3fb04     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3fb08     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3fb0c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3fb10     A0 02 A0 FD |                 call    #control_write
3fb14     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3fb18     7C 01 90 5D |         if_x0   jmp     #.disconnect
3fb1c     B0 99 02 F6 |                 mov     hctwait, _100ms_
3fb20     EF 02 A0 FD |                 call    #poll_waitx
3fb24                 | 
3fb24     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3fb28     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3fb2c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3fb30     A0 02 A0 FD |                 call    #control_write
3fb34                 | 
3fb34     02 76 07 F6 |                 mov     htmp3, #2
3fb38                 | .wait_reset
3fb38     AC 99 02 F6 |                 mov     hctwait, _8ms_
3fb3c     EF 02 A0 FD |                 call    #poll_waitx
3fb40     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3fb44     27 EF 03 F6 |                 mov     pb, urx_buff_p
3fb48     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3fb4c     55 02 A0 FD |                 call    #control_read
3fb50     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3fb54     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3fb58     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3fb5c                 | 
3fb5c     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3fb60     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3fb64     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3fb68     A0 02 A0 FD |                 call    #control_write
3fb6c                 | 
3fb6c     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3fb70                 | .wait_recover
3fb70     A7 99 02 F6 |                 mov     hctwait, _1ms_
3fb74     EF 02 A0 FD |                 call    #poll_waitx
3fb78     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3fb7c                 | 
3fb7c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3fb80     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3fb84     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3fb88                 | 
3fb88     00 08 00 FF 
3fb8c     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3fb90     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3fb94     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3fb98     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3fb9c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3fba0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fba4     48 01 90 5D |         if_nz   jmp     #.done
3fba8                 | .get_dev_desc
3fba8     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3fbac     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3fbb0     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3fbb4     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3fbb8     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3fbbc     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3fbc0     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3fbc4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fbc8     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3fbcc     AC 99 02 F6 |                 mov     hctwait, _8ms_
3fbd0     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3fbd4     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3fbd8     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3fbdc     BE 00 A0 FD |                 call    #calc_crc5
3fbe0     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3fbe4     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3fbe8     F7 AD C2 FA |                 rdbyte  total_data, pb
3fbec     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3fbf0     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3fbf4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fbf8     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3fbfc     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3fc00     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3fc04                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3fc04     9F 99 02 F6 |                 mov     hctwait, _500us_
3fc08     EF 02 A0 FD |                 call    #poll_waitx
3fc0c     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3fc10     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3fc14     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3fc18     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3fc1c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fc20     CC 00 90 5D |         if_nz   jmp     #.done
3fc24     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3fc28     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3fc2c     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3fc30     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3fc34     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3fc38     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3fc3c     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3fc40     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3fc44     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3fc48     A4 00 90 CD |         if_b    jmp     #.done
3fc4c     70 F0 BF FD |                 call    #hparse_con_desc
3fc50     9C 00 90 FD |                 jmp     #.done
3fc54                 | 
3fc54                 | .other
3fc54     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3fc58     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3fc5c     28 00 90 AD |         if_x1   jmp     #.reset_feature
3fc60     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3fc64     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3fc68     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3fc6c     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3fc70     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3fc74     10 00 90 AD |         if_x1   jmp     #.reset_feature
3fc78     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3fc7c     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3fc80     04 00 90 AD |         if_x1   jmp     #.reset_feature
3fc84     68 00 90 FD |                 jmp     #.done
3fc88                 | .reset_feature
3fc88     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3fc8c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3fc90     A0 02 A0 FD |                 call    #control_write
3fc94     58 00 90 FD |                 jmp     #.done
3fc98                 | .disconnect
3fc98                 | 
3fc98     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3fc9c     00 70 E3 F8 |                 getbyte htmp
3fca0     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3fca4     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3fca8     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3fcac     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3fcb0     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3fcb4     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3fcb8                 |         if EMUPAD_MAX_PLAYER > 0
3fcb8                 |         end
3fcb8                 |         if HAVE_MOUSE
3fcb8     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3fcbc     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3fcc0     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3fcc4                 |         end
3fcc4                 |         if HAVE_HIDPAD
3fcc4     14 0A F0 FE |                 loc ptrb,#hidpad_report
3fcc8     2D 71 03 F6 |                 mov htmp,hdev_port
3fccc     01 70 E7 F2 |                 cmpsub htmp,#1
3fcd0     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3fcd4     B8 F3 03 F1 |                 add ptrb,htmp
3fcd8     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3fcdc     80 01 6C FC |                 wrlong #0,ptrb
3fce0                 |         end
3fce0                 | 
3fce0     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3fce4     00 00 C4 F8 |                 setbyte #0
3fce8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3fcec     00 00 04 F6 |                 mov     0-0, #0
3fcf0                 | 
3fcf0                 | .done
3fcf0     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3fcf4     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3fcf8     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3fcfc     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3fd00     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3fd04     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3fd08                 | 
3fd08     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3fd0c     27 EF 03 F6 |                 mov     pb, urx_buff_p
3fd10     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3fd14     55 02 A0 FD |                 call    #control_read
3fd18     00 69 06 FB |                 rdlong  hub_port_status, ptra
3fd1c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3fd1c     2D 00 64 FD |                 ret
3fd20                 | 
3fd20                 | '------------------------------------------------------------------------------
3fd20                 | ' Partially populated SETUP packets
3fd20                 | '------------------------------------------------------------------------------
3fd20     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3fd21     06          |                 byte    REQ_GET_DESC
3fd22     00 01       |                 word    TYPE_DEVICE << 8
3fd24     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3fd26     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fd28     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3fd29     06          |                 byte    REQ_GET_DESC
3fd2a     00 02       |                 word    TYPE_CONFIG << 8
3fd2c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3fd2e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fd30     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3fd31     09          |                 byte    REQ_SET_CONFIG
3fd32     00 00       |                 word    0       ' Configuration value
3fd34     00 00       |                 word    0       ' Zero
3fd36     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3fd38     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3fd39     05          |                 byte    REQ_SET_ADDR
3fd3a     00 00       |                 word    0       ' Zero
3fd3c     00 00       |                 word    0       ' Zero
3fd3e     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3fd40                 | '------------------------------------------------------------------------------
3fd40                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3fd40                 | ' wValue field dictates which protocol should be used.
3fd40                 | '
3fd40                 | ' When initialized, all devices default to report protocol. However the host
3fd40                 | ' should not make any assumptions about the device state and should set the
3fd40                 | ' desired protocol whenever initializing a device.
3fd40                 | '------------------------------------------------------------------------------
3fd40     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3fd41     0B          |                 byte    HID_SET_PROTO
3fd42     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3fd44                 |                                                 ' (HID 1.11 Section 7.2.6).
3fd44     00 00       |                 word    0               ' Interface index number.
3fd46     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3fd48                 | '------------------------------------------------------------------------------
3fd48     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3fd49     0A          |                 byte    HID_SET_IDLE
3fd4a     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3fd4c                 |                                         ' reporting until a change is detected in the report data
3fd4c                 | 
3fd4c                 |                                         ' (HID 1.11 Section 7.2.4).
3fd4c     00 00       |                 word    0       ' Interface index number.
3fd4e     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3fd50     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3fd51     09          |                 byte    HID_SET_REPORT
3fd52     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3fd54                 |                                         ' (HID 1.11 Section 7.2.2).
3fd54     00 00       |                 word    0       ' Interface index number.
3fd56     00 00       |                 word    0       ' Size of the report, in bytes.
3fd58     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3fd59     06          |                 byte    REQ_GET_DESC
3fd5a     00 22       |                 word    TYPE_REPORT << 8
3fd5c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3fd5e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fd60                 | '------------------------------------------------------------------------------
3fd60     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3fd61     06          |                 byte    REQ_GET_DESC
3fd62     00 29       |                 word    TYPE_HUB << 8
3fd64     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3fd66     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fd68     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3fd69     03          |                 byte    REQ_SET_FEATURE
3fd6a     00 00       |                 word    0       ' port power
3fd6c     01 00       |                 word    1       ' Port index number (1+)
3fd6e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fd70     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3fd71     01          |                 byte    REQ_CLEAR_FEATURE
3fd72     00 00       |                 word    0       ' port power
3fd74     01 00       |                 word    1       ' Port index number (1+)
3fd76     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fd78     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3fd79     00          |                 byte    REQ_GET_STATUS
3fd7a     00 00       |                 word    0
3fd7c     01 00       |                 word    1       ' Port index number (1+)
3fd7e     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3fd80                 | '------------------------------------------------------------------------------
3fd80                 | if _HAVE_GAMEPAD
3fd80     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3fd84                 | ps3_command_buff
3fd84     00 00 00 00 
3fd88     00          |                 byte    $00, $00, $00, $00, $00
3fd89     00 00 00 00 
3fd8d     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3fd8e     FF 27 10 00 
3fd92     32          |                 byte    $FF, $27, $10, $00, $32
3fd93     FF 27 10 00 
3fd97     32          |                 byte    $FF, $27, $10, $00, $32
3fd98     FF 27 10 00 
3fd9c     32          |                 byte    $FF, $27, $10, $00, $32
3fd9d     FF 27 10 00 
3fda1     32          |                 byte    $FF, $27, $10, $00, $32
3fda2     00 00 00 00 
3fda6     00          |                 byte    $00, $00, $00, $00, $00
3fda7     00 00 00 00 
3fdab     00          |                 byte    $00, $00, $00, $00, $00
3fdac     00 00 00 00 
3fdb0     00          |                 byte    $00, $00, $00, $00, $00
3fdb1     00 00 00    |                 byte    $00, $00, $00
3fdb4                 | '------------------------------------------------------------------------------
3fdb4     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3fdb7                 |                                         ' 0x01 All blinking
3fdb7                 |                                         ' 0x02 1 flashes, then on
3fdb7                 |                                         ' 0x03 2 flashes, then on
3fdb7                 |                                         ' 0x04 3 flashes, then on
3fdb7                 |                                         ' 0x05 4 flashes, then on
3fdb7                 |                                         ' 0x06 1 on
3fdb7                 |                                         ' 0x07 2 on
3fdb7                 |                                         ' 0x08 3 on
3fdb7                 |                                         ' 0x09 4 on
3fdb7                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3fdb7                 |                                         ' 0x0B Blinking*
3fdb7                 |                                         ' 0x0C Slow blinking*
3fdb7                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3fdb7     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3fdba     00          |                 byte    $00             ' Left rumble
3fdbb     00          |                 byte    $00             ' Right rumble
3fdbc     00 00 00    |                 byte    $00, $00, $00
3fdbf     00          | end
3fdc0                 | alignl
3fdc0                 | 
3fdc0                 | if HAVE_MOUSE
3fdc0     00 00 00 00 
3fdc4     00 00 00 00 | mouse_limits long 0[2]
3fdc8     00 00 00 00 | mouse_outptr long 0
3fdcc                 | end
3fdcc                 | 
3fdcc                 | if KEYQUEUE_SIZE > 0
3fdcc     00          | keyq_head byte 0
3fdcd     00          | keyq_tail byte 0
3fdce     00 00 00 00 
      ...             
3ffca     00 00 00 00 
3ffce     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3ffd0                 | alignl
3ffd0                 | end
3ffd0                 | 
3ffd0                 | if EMUPAD_MAX_PLAYER > 0
3ffd0                 | emupad_rule_buffer
3ffd0                 | if EMUPAD_BUILTIN_RULES
3ffd0                 | file "padmap_builtin.dat"
3ffd0                 | end
3ffd0                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3ffd0                 | '' Default rule directly follows!
3ffd0                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3ffd0                 | end
3ffd0                 | 
3ffd0                 | '------------------------------------------------------------------------------
3ffd0                 | ' The USB data cache area gets zero-filled at every device disconnect
3ffd0                 | '------------------------------------------------------------------------------
3ffd0                 | usb_cache_start
3ffd0                 | 
3ffd0                 | ' HID descriptor and report buffers
3ffd0                 | if !!OVERLAP_MEMORY
3ffd0     00 00 00 00 
      ...             
406c8     00 00 00 00 
406cc     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
406d0                 | end
406d0     00 00 00 00 
406d4     00 00 00 00 | hkbd_report     byte    0[8]
406d8     00 00 00 00 | hkbd_led_rep    byte    0
406dc                 | alignl
406dc                 | 
406dc                 | if HAVE_HIDPAD
406dc     00 00 00 00 
      ...             
40798     00 00 00 00 
4079c     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
407a0                 | end
407a0                 | 
407a0                 | ' HUB descriptor
407a0     00          | hub_descr       byte    0   ' bDescLength
407a1     00          |                 byte    0   ' bDescriptorType
407a2     00          |                 byte    0   ' bNbrPorts
407a3     00 00       |                 word    0   ' wHubCharacteristics
407a5     00          |                 byte    0   ' bPwrOn2PwrGood
407a6     00          |                 byte    0   ' bHubContrCurrent
407a7     00          |                 byte    0   ' DeviceRemoveable
407a8     00          |                 byte    0   ' PortPwrCtrlMask
407a9                 | 
407a9                 | usb_cache_end
407a9                 | 
407a9                 | if HAVE_MOUSE
407a9     00 00 00 00 | mouse_xacc      long 0
407ad     00 00 00 00 | mouse_yacc      long 0
407b1     00 00 00 00 | mouse_zacc      long 0
407b5     00          | mouse_bstate    byte 0
407b6     00          | mouse_lpending  byte 0
407b7     00          | mouse_rpending  byte 0
407b8     00          | mouse_mpending  byte 0
407b9     00          | mouse_lock      byte 0
407ba     00 00 00    |                 byte 0[3] ' padding
407bd                 | end
407bd                 | 
407bd     00 00 00 00 
      ...             
40835     00 00 00 00 
40839     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
4083d     00 00 00 00 
40841     00 00 00 00 
40845     00 00 00 00 
40849     00 00 00 00 
4084d     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
4084f     00 00 00 00 
      ...             
40947     00 00 00 00 
4094b     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
4094f                 | 
4094f     00          | driver_cog      byte    0                       ' Current driver cog + 1
40950                 | 	alignl
40950                 | _audio096_spin2_dat_
40950                 | 
40950                 | audio       org     0
40950                 | 
40950     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
40954     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
40958     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
4095c                 |  
4095c     01 EC 63 FD |             cogid   pa                   ' compute cogid
40960     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
40964     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
40968     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
4096c                 | 
4096c     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
40970     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
40974     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
40978     0F 24 06 FC |             wrpin   dac2,#right
4097c     0F 00 1E FC |             wxpin   #256,#right    
40980     41 9C 64 FD |             dirh    #left addpins 1
40984     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
40988     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
4098c     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
40990                 |             
40990                 | '---------------------------------------------------------------------------------        
40990                 | '----------------- The main loop -------------------------------------------------
40990                 | '---------------------------------------------------------------------------------
40990                 | 
40990     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
40994     10 00 90 CD |       if_c  jmp     #loop1
40998                 |   
40998     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
4099c     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
409a0     D5 00 80 F1 |             sub     0-0,a40000000
409a4     FD 01 6E FB |             djnz    cn,#p402
409a8                 |     
409a8     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
409ac     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
409b0     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
409b4     01 00 06 C6 |     if_c    mov     cn,#1
409b8     DA 02 3A F3 |             fle     ct,time3 wcz
409bc     02 00 06 C6 |     if_c    mov     cn,#2     
409c0     DB 02 3A F3 |             fle     ct,time4 wcz
409c4     03 00 06 C6 |     if_c    mov     cn,#3
409c8     DC 02 3A F3 |             fle     ct,time5 wcz
409cc     04 00 06 C6 |     if_c    mov     cn,#4
409d0     DD 02 3A F3 |             fle     ct,time6 wcz
409d4     05 00 06 C6 |     if_c    mov     cn,#5
409d8     DE 02 3A F3 |             fle     ct,time7 wcz
409dc     06 00 06 C6 |     if_c    mov     cn,#6
409e0     DF 02 3A F3 |             fle     ct,time8 wcz
409e4     07 00 06 C6 |     if_c    mov     cn,#7
409e8                 | 
409e8                 | 
409e8                 | '----------------------------------------------------------------------------------
409e8                 | '------------- Compute channel samples --------------------------------------------
409e8                 | '----------------------------------------------------------------------------------
409e8                 | 
409e8                 | 
409e8     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
409ec     06 C0 65 F0 |             shl     channeladd,#6
409f0     E0 F0 03 F1 |             add     ptra,channeladd
409f4                 | 
409f4     28 16 64 FD |             setq    #11                        	' read parameters
409f8     00 D7 05 FB |             rdlong  pointer0,ptra
409fc                 |     	    
409fc     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
40a00     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
40a04     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
40a08     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
40a0c     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
40a10     00 C4 0D F2 |             cmp     qq,#0 wz                         
40a14     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
40a18     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
40a1c                 |             
40a1c     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
40a20     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
40a24     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
40a28                 | 
40a28     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
40a2c     EC 08 3A F9 |             getword oldrs,sample0,#1
40a30     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
40a34     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
40a38     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
40a3c     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
40a40                 | 
40a40     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
40a44     00 04 02 F6 |             mov     dt0,0-0    
40a48     D7 04 82 F1 |             sub     dt0,time0
40a4c                 |             
40a4c     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
40a50     FB 00 00 F1 |             add     0-0,afreq0  	
40a54                 |             
40a54                 | '---- envelopes
40a54                 |             
40a54     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
40a58     20 00 00 AF 
40a5c     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
40a60     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
40a64                 | 
40a64     FB 48 02 F6 |             mov     envs1,afreq0
40a68     F5 48 02 FA |             mul     envs1,envspd0
40a6c     24 E7 01 F1 |             add     envph0,envs1 
40a70                 | 
40a70     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
40a74     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
40a78     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
40a7c     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
40a80     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
40a84     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
40a88     00 46 06 36 |     if_ge   mov     envlo,#0
40a8c     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
40a90     16 E6 65 30 |     if_ge   shl     envph0,#22
40a94                 | 
40a94     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
40a98     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
40a9c     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
40aa0     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
40aa4     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
40aa8     24 49 32 F9 |             getword envs1,envs1,#0		' current value
40aac     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
40ab0     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
40ab4     23 49 02 FA |             mul     envs1,envlo
40ab8     25 49 02 F1 |             add     envs1,envs2
40abc     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
40ac0                 |             
40ac0     1B DA 0D F4 | p410        testb   sstart0, #27 wz
40ac4     1B C6 61 AD |     if_z    getrnd  spl
40ac8     58 00 90 AD |     if_z    jmp     #p406
40acc                 |  
40acc     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
40ad0     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
40ad4     08 D6 45 F0 |             shr     pointer0,#8
40ad8                 |          
40ad8     1F DA 0D F4 |             testb   sstart0,#31 wz            
40adc     01 D6 65 A0 |     if_z    shl     pointer0,#1        
40ae0     1C DA 0D F4 |             testb   sstart0,#28 wz            
40ae4     01 D6 65 A0 |     if_z    shl     pointer0,#1        
40ae8                 |         
40ae8     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
40aec     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
40af0     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
40af4                 |             
40af4     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
40af8     ED C4 01 F1 |             add     qq,sstart0            
40afc                 | 
40afc     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
40b00     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
40b04     1C 01 B0 1D |     if_gt   call    #cache_read
40b08                 |          
40b08     1F DA 0D F4 |             testb   sstart0,#31 wz 
40b0c     08 C6 65 50 |     if_nz   shl     spl,#8
40b10     08 D6 65 50 |     if_nz   shl     pointer0,#8
40b14     07 D6 65 A0 |     if_z    shl     pointer0,#7
40b18     1C DA 0D F4 |             testb   sstart0,#28 wz            
40b1c     01 D6 45 A0 |     if_z    shr     pointer0,#1    
40b20     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
40b24                 | 
40b24                 | 
40b24     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
40b28     00 C6 01 F6 |             mov     spl,0-0
40b2c     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
40b30     00 C6 01 F6 |             mov     spl,0-0
40b34                 | 
40b34     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
40b38     00 0A 02 F6 |             mov     ls0,0-0
40b3c     20 00 00 FF 
40b40     00 C4 05 F6 |             mov     qq,##16384
40b44     FE C4 81 F1 |             sub     qq,apan0
40b48     E2 C6 31 FA |             scas    spl,qq
40b4c     00 0C 02 F6 |             mov     rs0, 0-0
40b50                 | 
40b50     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
40b54     06 11 02 F1 |             add     rs,rs0
40b58     03 0F 82 F1 |             sub     ls,oldls
40b5c     05 0F 02 F1 |             add     ls,ls0
40b60                 |    
40b60     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
40b64     05 D9 21 F9 |             setword sample0,ls0,#0
40b68                 |             
40b68     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
40b6c     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
40b70     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
40b74                 |   '  if_z    mov     sample0,#0
40b74     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
40b78     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
40b7c     04 00 00 AF 
40b80     00 B0 05 A1 |     if_z    add     time1,##2048
40b84     D8 B2 01 A6 |     if_z    mov     time2,time1
40b88     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
40b8c                 | 
40b8c     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
40b90     00 D7 65 FC |             wrlong  pointer0,ptra
40b94     08 E7 65 FC |             wrlong  envph0,ptra[8]
40b98     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
40b9c                 |                       
40b9c     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
40ba0     FF C3 25 A7 |     if_z    decmod  front, #511          
40ba4                 |          
40ba4     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
40ba8     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
40bac     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
40bb0     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
40bb4                 | 	    
40bb4                 | 		    
40bb4     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
40bb8     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
40bbc     04 15 02 F6 |             mov     newsample, oldrs       
40bc0                 | 
40bc0     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
40bc4     02 AF 01 F1 |             add     time0,dt0    
40bc8                 |                                      
40bc8     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
40bcc     D8 FD 9F AD |     if_z    jmp     #loop1
40bd0     02 C5 01 F6 |             mov     qq,dt0
40bd4                 | 
40bd4                 |     
40bd4                 |             
40bd4     01 4E 36 F0 | p301        rol     dropper,#1 wc
40bd8     40 00 90 3D |     if_nc   jmp     #p399
40bdc     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
40be0     00 C2 9D F2 |             cmpr    front, #0-0 wcz
40be4     F4 FF 9F AD |     if_e    jmp     #p398   
40be8                 | 		
40be8     00 1A 0E F2 | 	    cmp     scbase,#0 wz
40bec     20 00 90 AD |     if_z    jmp     #p302	   
40bf0                 |   
40bf0     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
40bf4     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
40bf8     02 1E 66 C0 |     if_c    shl     scptr2,#2
40bfc     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
40c00     60 1E 66 FC |             wrlong  scptr2,#$60
40c04     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
40c08     01 00 00 CF 
40c0c     7F 1C 06 C7 |     if_c    incmod  scptr,##639
40c10                 | 			    
40c10     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
40c14     00 00 00 FF 
40c18     FF C3 05 F7 |             incmod  front, ##511
40c1c     ED C5 6D FB | p399        djnz    qq,#p301
40c20                 |             
40c20     6C FD 9F FD |             jmp     #loop            'loop
40c24                 | 
40c24                 | '----------------------------------------------------------------------------------
40c24                 | '------------- This is the end of the main loop -----------------------------------
40c24                 | '----------------------------------------------------------------------------------
40c24                 | 
40c24                 | '----------------------------------------------------------------------------------
40c24                 | '------------- PSRAM cache ----------- --------------------------------------------
40c24                 | '----------------------------------------------------------------------------------
40c24                 | 
40c24                 | ' There are 8 cache pointers for 8 channels
40c24                 | ' if 24 higher bits of address=cache, then get a word from the cache
40c24                 | ' else load the cache from PSRAM, update the pointer, then read a sample
40c24                 | 
40c24                 | 
40c24     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
40c28                 |             
40c28     E2 40 02 F6 | 	    mov     addrhi,qq		
40c2c     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
40c30     14 01 96 F9 | 	    alts    cn,#cache1            
40c34     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
40c38     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
40c3c                 | 	
40c3c     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
40c40     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
40c44     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
40c48     08 38 66 F0 | 	    shl     cmd,#8
40c4c     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
40c50     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
40c54     08 3A 66 F0 |             shl     hubaddr,#8                  '
40c58     13 3B 02 F1 |             add     hubaddr,hubptr 
40c5c     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
40c60     28 04 64 FD |             setq    #2                          ' write 3 longs
40c64     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
40c68     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
40c6c     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
40c70                 |             
40c70                 | 	
40c70     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
40c74     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
40c78     13 C5 01 F1 | 	    add     qq,hubptr
40c7c     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
40c80     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
40c84                 |           
40c84                 | 
40c84                 | '--------------------------------------------------------------------------
40c84                 | '------ Interrupt service -------------------------------------------------
40c84                 | '------ Output the sample, get the next one if exists ---------------------
40c84                 | '--------------------------------------------------------------------------
40c84                 | 
40c84     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
40c88     0F D0 25 FC |             wypin   rsample,#right       '4
40c8c     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
40c90     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
40c94     FF F3 07 57 |     if_ne   incmod  ptrb,#511
40c98     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
40c9c     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
40ca0                 |     
40ca0     F5 FF 3B FB |             reti1                        '17/19 
40ca4                 |           
40ca4                 | '---------------------------------------------------------------------------
40ca4                 | '-------- End of interrupt -------------------------------------------------
40ca4                 | '---------------------------------------------------------------------------    
40ca4                 | 
40ca4                 | 
40ca4                 | '---------------------------------------------------------------------------
40ca4                 | '------- Variables ---------------------------------------------------------
40ca4                 | '---------------------------------------------------------------------------
40ca4                 | 
40ca4                 | ' constants
40ca4                 | 
40ca4     00 00 00 40 | a40000000   long $40000000
40ca8     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
40cac                 | 
40cac                 | ' Time variables
40cac                 | 
40cac     00 00 00 00 | time0       long 0    ' Global sample computing time
40cb0     01 00 00 00 | time1       long 1    ' Local channels time
40cb4     02 00 00 00 | time2       long 2
40cb8     03 00 00 00 | time3       long 3
40cbc     04 00 00 00 | time4       long 4
40cc0     05 00 00 00 | time5       long 5
40cc4     06 00 00 00 | time6       long 6
40cc8     07 00 00 00 | time7       long 7
40ccc     08 00 00 00 | time8       long 8
40cd0                 | 
40cd0     00 00 00 00 | channeladd long 0
40cd4                 | 
40cd4     00 00 00 00 | front       long 0
40cd8                 | 
40cd8                 | ' temporary variables 
40cd8     00 00 00 00 | qq          long 0
40cdc     00 00 00 00 | spl         long 0
40ce0     00 00 00 00 | zero        long 0
40ce4     00 00 00 00 | mailbox     long 0
40ce8     00 00 00 00 | mailbox2 long 0
40cec                 | 
40cec                 | ' Interrupt ISR variables
40cec                 | 
40cec     00 00 00 00 | lsample     long 0
40cf0     00 00 00 00 | rsample     long 0
40cf4     00 00 00 00 | lsnext      long 0
40cf8     00 00 00 00 | rsnext      long 0 
40cfc                 | 
40cfc                 | ' channel parameter block
40cfc                 | 
40cfc     00 00 00 00 | pointer0    long 0     
40d00     00 00 00 00 | sample0     long 0
40d04     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
40d08     00 00 00 00 | lstart0     long 0
40d0c     00 00 00 00 | lend0       long 0
40d10     00 00 00 00 | volpan0     long 0
40d14     00 00 00 00 | freqskip0   long 0
40d18     00 00 00 00 | command0    long 0
40d1c     00 00 00 00 | envph0	    long 0
40d20     00 00 00 00 | envptr0	    long 0
40d24     00 00 00 00 | envspd0	    long 0
40d28     00 00 00 00 | envlen0	    long 0
40d2c     00 00 00 00 | res5	    long 0
40d30     00 00 00 00 | res6	    long 0
40d34     00 00 00 00 | res7	    long 0
40d38     00 00 00 00 | res8	    long 0
40d3c                 | 
40d3c     00 00 00 00 | afreq0      long 0
40d40     00 00 00 00 | askip0      long 0
40d44     00 00 00 00 | avol0       long 0
40d48     00 00 00 00 | apan0       long 0
40d4c                 | 
40d4c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
40d50     00 00 00 00 | cn          long 0
40d54     00 00 00 00 | ct          long 0
40d58     00 00 00 00 | dt0         long 0
40d5c                 | 
40d5c                 | ' Samples
40d5c     00 00 00 00 | oldls       long 0
40d60     00 00 00 00 | oldrs       long 0
40d64                 | 
40d64     00 00 00 00 | ls0         long 0
40d68     00 00 00 00 | rs0         long 0
40d6c                 | 
40d6c     00 00 00 00 | ls          long 0    
40d70     00 00 00 00 | rs          long 0
40d74                 | 
40d74     00 00 00 00 | oldsample   long 0
40d78     00 00 00 00 | newsample   long 0
40d7c                 | 
40d7c     00 00 00 00 | nrsample    long 0
40d80     00 00 00 00 | nlsample    long 0
40d84                 | 
40d84     00 00 00 00 | scbase long 0
40d88     00 00 00 00 | scptr long 0
40d8c     00 00 00 00 | scptr2 long 0
40d90     00 00 00 00 | scope long 0
40d94                 | 
40d94     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
40d98     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
40d9c                 | 
40d9c     00 18 07 00 | hubptr      long $71800
40da0     00 00 00 00 | cache1      long 0
40da4     00 00 00 00 | cache2      long 0
40da8     00 00 00 00 | cache3      long 0
40dac     00 00 00 00 | cache4      long 0
40db0     00 00 00 00 | cache5      long 0
40db4     00 00 00 00 | cache6      long 0
40db8     00 00 00 00 | cache7      long 0
40dbc     00 00 00 00 | cache8      long 0
40dc0                 | 
40dc0                 | 
40dc0     00 00 00 00 | cmd         long 0
40dc4     00 00 00 00 | hubaddr     long 0
40dc8     00 01 00 00 | count       long 256
40dcc     00 00 00 00 | addrlo long 0
40dd0     00 00 00 00 | addrhi long 0
40dd4     00 00 00 00 | pointer00 long 0
40dd8     00 00 00 00 | envhi long 0
40ddc     00 00 00 00 | envlo long 0
40de0     00 00 00 00 | envs1 long 0
40de4     00 00 00 00 | envs2 long 0
40de8     00 00 00 00 | noise0 long 0
40dec     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
40df0     00 00 00 00 
40df4     00 00 00 00 | null  			long 	0,0           ' for channel reset
40df8                 | 	alignl
40df8                 | __system__dat_
40df8     00 00 00 00 
40dfc     00 00 00 00 | 	byte	$00[8]
40e00     03 00 00 00 
40e04     00 00 00 00 
40e08     00 00 00 00 
40e0c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
40e10     00 00 00 00 
      ...             
4109c     00 00 00 00 
410a0     00 00 00 00 | 	byte	$00[660]
410a4     00 00 80 0A | 	long	(168 {__system____root_opendir})<<20
410a8     00 00 90 0A | 	long	(169 {__system____root_closedir})<<20
410ac     00 00 A0 0A | 	long	(170 {__system____root_readdir})<<20
410b0     00 00 B0 0A | 	long	(171 {__system____root_stat})<<20
410b4     00 00 00 00 
410b8     00 00 00 00 
410bc     00 00 00 00 
410c0     00 00 00 00 
410c4     00 00 00 00 
410c8     00 00 00 00 
410cc     00 00 00 00 | 	byte	$00[28]
410d0     38 11 04 00 | 	long	@@@__system__dat_ + 832
410d4     3B 11 04 00 | 	long	@@@__system__dat_ + 835
410d8     5C 11 04 00 | 	long	@@@__system__dat_ + 868
410dc     75 11 04 00 | 	long	@@@__system__dat_ + 893
410e0     90 11 04 00 | 	long	@@@__system__dat_ + 920
410e4     AA 11 04 00 | 	long	@@@__system__dat_ + 946
410e8     BA 11 04 00 | 	long	@@@__system__dat_ + 962
410ec     CC 11 04 00 | 	long	@@@__system__dat_ + 980
410f0     DE 11 04 00 | 	long	@@@__system__dat_ + 998
410f4     F0 11 04 00 | 	long	@@@__system__dat_ + 1016
410f8     FC 11 04 00 | 	long	@@@__system__dat_ + 1028
410fc     0D 12 04 00 | 	long	@@@__system__dat_ + 1045
41100     21 12 04 00 | 	long	@@@__system__dat_ + 1065
41104     2B 12 04 00 | 	long	@@@__system__dat_ + 1075
41108     3B 12 04 00 | 	long	@@@__system__dat_ + 1091
4110c     4A 12 04 00 | 	long	@@@__system__dat_ + 1106
41110     60 12 04 00 | 	long	@@@__system__dat_ + 1128
41114     79 12 04 00 | 	long	@@@__system__dat_ + 1153
41118     8D 12 04 00 | 	long	@@@__system__dat_ + 1173
4111c     9B 12 04 00 | 	long	@@@__system__dat_ + 1187
41120     AF 12 04 00 | 	long	@@@__system__dat_ + 1207
41124     BB 12 04 00 | 	long	@@@__system__dat_ + 1219
41128     CD 12 04 00 | 	long	@@@__system__dat_ + 1237
4112c     E5 12 04 00 | 	long	@@@__system__dat_ + 1261
41130     F7 12 04 00 | 	long	@@@__system__dat_ + 1279
41134     0A 13 04 00 | 	long	@@@__system__dat_ + 1298
41138     4F 4B 00 4E 
4113c     75 6D 65 72 
41140     69 63 61 6C 
41144     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
41148     75 6D 65 6E 
4114c     74 20 6F 75 
41150     74 20 6F 66 
41154     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
41158     61 69 6E 00 
4115c     52 65 73 75 
41160     6C 74 20 6E 
41164     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
41168     65 70 72 65 
4116c     73 65 6E 74 
41170     61 62 6C 65 
41174     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
41178     65 67 61 6C 
4117c     20 6D 75 6C 
41180     74 69 62 79 
41184     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
41188     65 71 75 65 
4118c     6E 63 65 00 
41190     4E 6F 20 73 
41194     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
41198     66 69 6C 65 
4119c     20 6F 72 20 
411a0     64 69 72 65 
411a4     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
411a8     79 00 42 61 
411ac     64 20 66 69 
411b0     6C 65 20 6E 
411b4     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
411b8     72 00 50 65 
411bc     72 6D 69 73 
411c0     73 69 6F 6E 
411c4     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
411c8     69 65 64 00 
411cc     4E 6F 74 20 
411d0     65 6E 6F 75 
411d4     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
411d8     65 6D 6F 72 
411dc     79 00 54 65 
411e0     6D 70 6F 72 
411e4     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
411e8     66 61 69 6C 
411ec     75 72 65 00 
411f0     46 69 6C 65 
411f4     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
411f8     73 74 73 00 
411fc     49 6E 76 61 
41200     6C 69 64 20 
41204     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
41208     6D 65 6E 74 
4120c     00 54 6F 6F 
41210     20 6D 61 6E 
41214     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
41218     65 6E 20 66 
4121c     69 6C 65 73 
41220     00 49 2F 4F 
41224     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
41228     6F 72 00 4E 
4122c     6F 74 20 61 
41230     20 64 69 72 
41234     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
41238     72 79 00 49 
4123c     73 20 61 20 
41240     64 69 72 65 
41244     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
41248     79 00 52 65 
4124c     61 64 20 6F 
41250     6E 6C 79 20 
41254     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
41258     20 73 79 73 
4125c     74 65 6D 00 
41260     46 75 6E 63 
41264     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
41268     20 6E 6F 74 
4126c     20 69 6D 70 
41270     6C 65 6D 65 
41274     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
41278     00 44 69 72 
4127c     65 63 74 6F 
41280     72 79 20 6E 
41284     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
41288     6D 70 74 79 
4128c     00 4E 61 6D 
41290     65 20 74 6F 
41294     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
41298     6E 67 00 44 
4129c     65 76 69 63 
412a0     65 20 6E 6F 
412a4     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
412a8     65 6B 61 62 
412ac     6C 65 00 42 
412b0     61 64 20 61 
412b4     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
412b8     73 73 00 42 
412bc     72 6F 6B 65 
412c0     6E 20 63 6F 
412c4     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
412c8     74 69 6F 6E 
412cc     00 44 65 76 
412d0     69 63 65 20 
412d4     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
412d8     65 73 6F 75 
412dc     72 63 65 20 
412e0     62 75 73 79 
412e4     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
412e8     73 73 20 64 
412ec     65 76 69 63 
412f0     65 20 6C 69 
412f4     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
412f8     6F 20 73 70 
412fc     61 63 65 20 
41300     6F 6E 20 64 
41304     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
41308     65 00 55 6E 
4130c     6B 6E 6F 77 
41310     6E 20 65 72 
41314     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
41318     00 00 00 00 
4131c     00 00 00 00 
41320     00 00 00 00 | 	byte	$00[12]
41324     05 00 00 00 
41328     00 00 00 00 
4132c     00 00 00 00 
41330     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
41334     00 00 00 00 | 	byte	$00, $00, $00, $00
41338     00 00 00 0C | 	long	(192 {__system___tx})<<20
4133c     00 00 10 0C | 	long	(193 {__system___rx})<<20
41340     00 00 00 00 | 	byte	$00, $00, $00, $00
41344     00 00 20 0C | 	long	(194 {__system___rxtxioctl_0771})<<20
41348     00 00 30 0C | 	long	(195 {__system____dummy_flush_0772})<<20
4134c     00 00 00 00 
41350     00 00 00 00 | 	byte	$00[8]
41354     01 00 00 00 
41358     06 00 00 00 
4135c     00 00 00 00 
41360     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
41364     00 00 00 00 
41368     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
4136c     00 00 00 0C | 	long	(192 {__system___tx})<<20
41370     00 00 10 0C | 	long	(193 {__system___rx})<<20
41374     00 00 00 00 | 	byte	$00, $00, $00, $00
41378     00 00 20 0C | 	long	(194 {__system___rxtxioctl_0771})<<20
4137c     00 00 30 0C | 	long	(195 {__system____dummy_flush_0772})<<20
41380     00 00 00 00 
41384     00 00 00 00 | 	byte	$00[8]
41388     01 00 00 00 
4138c     06 00 00 00 
41390     00 00 00 00 
41394     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
41398     00 00 00 00 
4139c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
413a0     00 00 00 0C | 	long	(192 {__system___tx})<<20
413a4     00 00 10 0C | 	long	(193 {__system___rx})<<20
413a8     00 00 00 00 | 	byte	$00, $00, $00, $00
413ac     00 00 20 0C | 	long	(194 {__system___rxtxioctl_0771})<<20
413b0     00 00 30 0C | 	long	(195 {__system____dummy_flush_0772})<<20
413b4     00 00 00 00 
      ...             
41524     00 00 00 00 
41528     00 00 00 00 | 	byte	$00[376]
4152c     30 15 04 00 | 	long	@@@__system__dat_ + 1848
41530     00 00 00 00 
41534     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
41538                 | 	alignl
41538                 | _fatfs_cc_dat_
41538     C7 00 FC 00 
4153c     E9 00 E2 00 
41540     E4 00 E0 00 
41544     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
41548     EA 00 EB 00 
4154c     E8 00 EF 00 
41550     EE 00 EC 00 
41554     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
41558     C9 00 E6 00 
4155c     C6 00 F4 00 
41560     F6 00 F2 00 
41564     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
41568     FF 00 D6 00 
4156c     DC 00 F8 00 
41570     A3 00 D8 00 
41574     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
41578     E1 00 ED 00 
4157c     F3 00 FA 00 
41580     F1 00 D1 00 
41584     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
41588     BF 00 AE 00 
4158c     AC 00 BD 00 
41590     BC 00 A1 00 
41594     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
41598     91 25 92 25 
4159c     93 25 02 25 
415a0     24 25 C1 00 
415a4     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
415a8     A9 00 63 25 
415ac     51 25 57 25 
415b0     5D 25 A2 00 
415b4     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
415b8     14 25 34 25 
415bc     2C 25 1C 25 
415c0     00 25 3C 25 
415c4     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
415c8     5A 25 54 25 
415cc     69 25 66 25 
415d0     60 25 50 25 
415d4     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
415d8     F0 00 D0 00 
415dc     CA 00 CB 00 
415e0     C8 00 31 01 
415e4     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
415e8     CF 00 18 25 
415ec     0C 25 88 25 
415f0     84 25 A6 00 
415f4     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
415f8     D3 00 DF 00 
415fc     D4 00 D2 00 
41600     F5 00 D5 00 
41604     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
41608     DE 00 DA 00 
4160c     DB 00 D9 00 
41610     FD 00 DD 00 
41614     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
41618     AD 00 B1 00 
4161c     17 20 BE 00 
41620     B6 00 A7 00 
41624     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
41628     B0 00 A8 00 
4162c     B7 00 B9 00 
41630     B3 00 B2 00 
41634     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
41638     61 00 1A 03 
4163c     E0 00 17 03 
41640     F8 00 07 03 
41644     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
41648     78 01 00 01 
4164c     30 01 32 01 
41650     06 01 39 01 
41654     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
41658     2E 01 79 01 
4165c     06 01 80 01 
41660     4D 00 43 02 
41664     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
41668     82 01 84 01 
4166c     84 01 86 01 
41670     87 01 87 01 
41674     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
41678     8B 01 8B 01 
4167c     8D 01 8E 01 
41680     8F 01 90 01 
41684     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
41688     93 01 94 01 
4168c     F6 01 96 01 
41690     97 01 98 01 
41694     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
41698     9B 01 9C 01 
4169c     9D 01 20 02 
416a0     9F 01 A0 01 
416a4     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
416a8     A2 01 A4 01 
416ac     A4 01 A6 01 
416b0     A7 01 A7 01 
416b4     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
416b8     AB 01 AC 01 
416bc     AC 01 AE 01 
416c0     AF 01 AF 01 
416c4     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
416c8     B3 01 B3 01 
416cc     B5 01 B5 01 
416d0     B7 01 B8 01 
416d4     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
416d8     BB 01 BC 01 
416dc     BC 01 BE 01 
416e0     F7 01 C0 01 
416e4     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
416e8     C3 01 C4 01 
416ec     C5 01 C4 01 
416f0     C7 01 C8 01 
416f4     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
416f8     CB 01 CA 01 
416fc     CD 01 10 01 
41700     DD 01 01 00 
41704     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
41708     12 01 F3 01 
4170c     03 00 F1 01 
41710     F4 01 F4 01 
41714     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
41718     22 02 12 01 
4171c     3A 02 09 00 
41720     65 2C 3B 02 
41724     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
41728     66 2C 3F 02 
4172c     40 02 41 02 
41730     41 02 46 02 
41734     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
41738     40 00 81 01 
4173c     86 01 55 02 
41740     89 01 8A 01 
41744     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
41748     5A 02 90 01 
4174c     5C 02 5D 02 
41750     5E 02 5F 02 
41754     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
41758     62 02 94 01 
4175c     64 02 65 02 
41760     66 02 67 02 
41764     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
41768     6A 02 62 2C 
4176c     6C 02 6D 02 
41770     6E 02 9C 01 
41774     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
41778     9D 01 73 02 
4177c     74 02 9F 01 
41780     76 02 77 02 
41784     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
41788     7A 02 7B 02 
4178c     7C 02 64 2C 
41790     7E 02 7F 02 
41794     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
41798     82 02 A9 01 
4179c     84 02 85 02 
417a0     86 02 87 02 
417a4     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
417a8     B1 01 B2 01 
417ac     45 02 8D 02 
417b0     8E 02 8F 02 
417b4     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
417b8     B7 01 7B 03 
417bc     03 00 FD 03 
417c0     FE 03 FF 03 
417c4     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
417c8     86 03 88 03 
417cc     89 03 8A 03 
417d0     B1 03 11 03 
417d4     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
417d8     A3 03 A3 03 
417dc     C4 03 08 03 
417e0     CC 03 03 00 
417e4     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
417e8     8F 03 D8 03 
417ec     18 01 F2 03 
417f0     0A 00 F9 03 
417f4     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
417f8     F5 03 F6 03 
417fc     F7 03 F7 03 
41800     F9 03 FA 03 
41804     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
41808     20 03 50 04 
4180c     10 07 60 04 
41810     22 01 8A 04 
41814     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
41818     0E 01 CF 04 
4181c     01 00 C0 04 
41820     D0 04 44 01 
41824     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
41828     00 00 7D 1D 
4182c     01 00 63 2C 
41830     00 1E 96 01 
41834     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
41838     00 1F 08 06 
4183c     10 1F 06 06 
41840     20 1F 08 06 
41844     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
41848     40 1F 06 06 
4184c     51 1F 07 00 
41850     59 1F 52 1F 
41854     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
41858     5D 1F 56 1F 
4185c     5F 1F 60 1F 
41860     08 06 70 1F 
41864     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
41868     BB 1F C8 1F 
4186c     C9 1F CA 1F 
41870     CB 1F DA 1F 
41874     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
41878     F9 1F EA 1F 
4187c     EB 1F FA 1F 
41880     FB 1F 80 1F 
41884     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
41888     08 06 A0 1F 
4188c     08 06 B0 1F 
41890     04 00 B8 1F 
41894     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
41898     BC 1F CC 1F 
4189c     01 00 C3 1F 
418a0     D0 1F 02 06 
418a4     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
418a8     E5 1F 01 00 
418ac     EC 1F F3 1F 
418b0     01 00 FC 1F 
418b4     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
418b8     32 21 70 21 
418bc     10 02 84 21 
418c0     01 00 83 21 
418c4     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
418c8     30 2C 2F 04 
418cc     60 2C 02 01 
418d0     67 2C 06 01 
418d4     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
418d8     80 2C 64 01 
418dc     00 2D 26 08 
418e0     41 FF 1A 03 
418e4     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
418e8     05 07 09 0E 
418ec     10 12 14 16 
418f0     18 1C 1E 43 
418f4     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
418f8     41 41 43 45 
418fc     45 45 49 49 
41900     49 41 41 45 
41904     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
41908     4F 55 55 59 
4190c     4F 55 4F 9C 
41910     4F 9E 9F 41 
41914     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
41918     A5 A6 A7 A8 
4191c     A9 AA AB AC 
41920     AD AE AF B0 
41924     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
41928     41 41 41 B8 
4192c     B9 BA BB BC 
41930     BD BE BF C0 
41934     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
41938     C5 41 41 C8 
4193c     C9 CA CB CC 
41940     CD CE CF D1 
41944     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
41948     49 49 49 49 
4194c     D9 DA DB DC 
41950     DD 49 DF 4F 
41954     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
41958     4F E6 E8 E8 
4195c     55 55 55 59 
41960     59 EE EF F0 
41964     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
41968     F5 F6 F7 F8 
4196c     F9 FA FB FC 
41970     FD FE FF 00 
41974     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
41978     00 00 00 00 | 	byte	$00, $00, $00, $00
4197c     00 00 F0 0A | 	long	(175 {_fatfs_cc_v_close})<<20
41980     00 00 00 0B | 	long	(176 {_fatfs_cc_v_read})<<20
41984     00 00 10 0B | 	long	(177 {_fatfs_cc_v_write})<<20
41988     00 00 20 0B | 	long	(178 {_fatfs_cc_v_lseek})<<20
4198c     00 00 30 0B | 	long	(179 {_fatfs_cc_v_ioctl})<<20
41990     00 00 40 0C | 	long	(196 {_fatfs_cc_v_flush})<<20
41994     00 00 00 00 
41998     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
4199c     00 00 40 0B | 	long	(180 {_fatfs_cc_v_open})<<20
419a0     00 00 50 0B | 	long	(181 {_fatfs_cc_v_creat})<<20
419a4     00 00 60 0B | 	long	(182 {_fatfs_cc_v_opendir})<<20
419a8     00 00 70 0B | 	long	(183 {_fatfs_cc_v_closedir})<<20
419ac     00 00 80 0B | 	long	(184 {_fatfs_cc_v_readdir})<<20
419b0     00 00 90 0B | 	long	(185 {_fatfs_cc_v_stat})<<20
419b4     00 00 A0 0B | 	long	(186 {_fatfs_cc_v_mkdir})<<20
419b8     00 00 B0 0B | 	long	(187 {_fatfs_cc_v_rmdir})<<20
419bc     00 00 C0 0B | 	long	(188 {_fatfs_cc_v_remove})<<20
419c0     00 00 D0 0B | 	long	(189 {_fatfs_cc_v_rename})<<20
419c4     00 00 E0 0B | 	long	(190 {_fatfs_cc_v_init})<<20
419c8     00 00 F0 0B | 	long	(191 {_fatfs_cc_v_deinit})<<20
419cc     FF FF FF FF 
419d0     1F 00 00 00 
419d4     1C 00 00 00 
419d8     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
419dc     1E 00 00 00 
419e0     1F 00 00 00 
419e4     1E 00 00 00 
419e8     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
419ec     1F 00 00 00 
419f0     1E 00 00 00 
419f4     1F 00 00 00 
419f8     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
419fc     1F 00 00 00 
41a00     00 00 00 00 
41a04     1F 00 00 00 
41a08     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
41a0c     5A 00 00 00 
41a10     78 00 00 00 
41a14     97 00 00 00 
41a18     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
41a1c     D4 00 00 00 
41a20     F3 00 00 00 
41a24     11 01 00 00 
41a28     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
41a2c     4E 01 00 00 
41a30     6D 01 00 00 
41a34     FF FF FF FF 
41a38     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
41a3c     00 00 00 00 
      ...             
41a54     00 00 00 00 
41a58     00 00 00 00 | 	byte	$00[32]
41a5c     7A 1A 04 00 | 	long	@@@_fatfs_cc_dat_ + 1346
41a60     7E 1A 04 00 | 	long	@@@_fatfs_cc_dat_ + 1350
41a64     00 00 00 00 
41a68     00 00 00 00 
41a6c     00 00 00 00 
41a70     00 00 00 00 
41a74     00 00       | 	byte	$00[18]
41a76     3F 3F 3F 00 
41a7a     55 43 54 00 
41a7e     55 43 54 00 
41a82     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
41a86     00 00 00 00 
41a8a     00 00 00    | 	byte	$00[7]
41a8d     CA 9A 3B 00 
41a91     00 00 00 01 
41a95     01 01 01 01 
41a99     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
41a9d     91 11 11 11 
41aa1     11 01 01 01 
41aa5     01 01 01 01 
41aa9     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
41aad     01 01 01 01 
41ab1     01 01 01    | 	byte	$01[7]
41ab4     90 20 20 20 
41ab8     20 20 20 20 
41abc     20 20 20 20 
41ac0     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
41ac4     42 42 42 42 
41ac8     42 42 42 42 
41acc     42 42       | 	byte	$42[10]
41ace     20 20 20 20 
41ad2     20 20 20    | 	byte	$20[7]
41ad5     44 44 44 44 
41ad9     44 44       | 	byte	$44[6]
41adb     04 04 04 04 
41adf     04 04 04 04 
41ae3     04 04 04 04 
41ae7     04 04 04 04 
41aeb     04 04 04 04 | 	byte	$04[20]
41aef     20 20 20 20 
41af3     20 20       | 	byte	$20[6]
41af5     48 48 48 48 
41af9     48 48       | 	byte	$48[6]
41afb     08 08 08 08 
41aff     08 08 08 08 
41b03     08 08 08 08 
41b07     08 08 08 08 
41b0b     08 08 08 08 | 	byte	$08[20]
41b0f     20 20 20 20 
41b13     01 00 00 00 
41b17     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
41b18                 | __methodtable__
41b18     B8 63 01 00 | 	long	@_do_no_command
41b1c     50 05 02 00 | 	long	@_do_plus
41b20     70 F5 01 00 | 	long	@_do_minus
41b24     38 04 02 00 | 	long	@_do_or
41b28     F0 FB 01 00 | 	long	@_do_mul
41b2c     34 E0 01 00 | 	long	@_do_fdiv
41b30     20 D8 01 00 | 	long	@_do_and
41b34     38 D9 01 00 | 	long	@_do_div
41b38     D0 F9 01 00 | 	long	@_do_mod
41b3c     04 0C 02 00 | 	long	@_do_shl
41b40     1C 0D 02 00 | 	long	@_do_shr
41b44     3C 0A 02 00 | 	long	@_do_power
41b48     D8 CD 01 00 | 	long	@_do_getvar
41b4c     F4 90 01 00 | 	long	@_do_push
41b50     D0 C7 01 00 | 	long	@_do_assign
41b54     F0 F5 00 00 | 	long	@_do_cls
41b58     84 5D 01 00 | 	long	@_do_new
41b5c     38 89 01 00 | 	long	@_do_plot
41b60     58 1E 01 00 | 	long	@_do_draw
41b64     A0 8B 01 00 | 	long	@_do_print
41b68     D0 F3 00 00 | 	long	@_do_circle
41b6c     8C 20 01 00 | 	long	@_do_fcircle
41b70     B4 E2 00 00 | 	long	@_do_box
41b74     70 25 01 00 | 	long	@_do_frame
41b78     AC F8 00 00 | 	long	@_do_color
41b7c     00 23 01 00 | 	long	@_do_for
41b80     F0 5F 01 00 | 	long	@_do_next
41b84     B4 4B 01 00 | 	long	@_do_list
41b88     10 AD 01 00 | 	long	@_do_run
41b8c     B4 1F 01 00 | 	long	@_do_error
41b90     BC 31 01 00 | 	long	@_do_fast_goto
41b94     AC 32 01 00 | 	long	@_do_find_goto
41b98     C0 34 01 00 | 	long	@_do_slow_goto
41b9c     D8 63 01 00 | 	long	@_do_nothing
41ba0     2C B1 01 00 | 	long	@_do_save
41ba4     50 4E 01 00 | 	long	@_do_load
41ba8     74 7C 01 00 | 	long	@_do_pinwrite
41bac     10 C5 01 00 | 	long	@_do_waitms
41bb0     44 C6 01 00 | 	long	@_do_waitvbl
41bb4     B4 37 01 00 | 	long	@_do_if
41bb8     4C 1F 01 00 | 	long	@_do_else
41bbc     58 DB 01 00 | 	long	@_do_eq
41bc0     FC E1 01 00 | 	long	@_do_ge
41bc4     C8 EB 01 00 | 	long	@_do_le
41bc8     E4 E6 01 00 | 	long	@_do_gt
41bcc     A4 F0 01 00 | 	long	@_do_lt
41bd0     5C FF 01 00 | 	long	@_do_ne
41bd4     78 AA 01 00 | 	long	@_do_rnd
41bd8     9C E4 00 00 | 	long	@_do_brun
41bdc     38 DE 00 00 | 	long	@_do_beep
41be0     E8 16 01 00 | 	long	@_do_dir
41be4     A8 78 01 00 | 	long	@_do_paper
41be8     70 3B 01 00 | 	long	@_do_ink
41bec     84 22 01 00 | 	long	@_do_font
41bf0     94 58 01 00 | 	long	@_do_mode
41bf4     40 5C 01 00 | 	long	@_do_mouse
41bf8     3C 30 01 00 | 	long	@_do_gettime
41bfc     E8 FD 00 00 | 	long	@_do_cursor
41c00     48 F5 00 00 | 	long	@_do_click
41c04     FC 5C 01 00 | 	long	@_do_mousex
41c08     40 5D 01 00 | 	long	@_do_mousey
41c0c     74 5C 01 00 | 	long	@_do_mousek
41c10     B8 5C 01 00 | 	long	@_do_mousew
41c14     78 BA 01 00 | 	long	@_do_sin
41c18     B0 BD 01 00 | 	long	@_do_stick
41c1c     40 BF 01 00 | 	long	@_do_strig
41c20     D0 BB 01 00 | 	long	@_do_sprite
41c24     0C 12 01 00 | 	long	@_do_defsprite
41c28     E8 2E 01 00 | 	long	@_do_getpixel
41c2c     EC C4 01 00 | 	long	@_do_waitclock
41c30     20 F9 01 00 | 	long	@_do_negative
41c34     78 97 01 00 | 	long	@_do_rdpin
41c38     9C AC 01 00 | 	long	@_do_rqpin
41c3c     A0 7A 01 00 | 	long	@_do_pinread
41c40     50 C6 01 00 | 	long	@_do_wrpin
41c44     D0 C6 01 00 | 	long	@_do_wxpin
41c48     50 C7 01 00 | 	long	@_do_wypin
41c4c     E0 79 01 00 | 	long	@_do_pinfloat
41c50     60 7A 01 00 | 	long	@_do_pinlo
41c54     20 7A 01 00 | 	long	@_do_pinhi
41c58     24 7B 01 00 | 	long	@_do_pinstart
41c5c     34 7C 01 00 | 	long	@_do_pintoggle
41c60     18 8B 01 00 | 	long	@_do_position
41c64     C4 FC 00 00 | 	long	@_do_cos
41c68     D0 C0 01 00 | 	long	@_do_tan
41c6c     20 DD 00 00 | 	long	@_do_atn
41c70     10 DC 00 00 | 	long	@_do_asin
41c74     A0 D9 00 00 | 	long	@_do_acos
41c78     BC BC 01 00 | 	long	@_do_sqr
41c7c     70 21 01 00 | 	long	@_do_fill
41c80     1C 09 01 00 | 	long	@_do_defsnd
41c84     1C FE 00 00 | 	long	@_do_defenv
41c88     50 97 01 00 | 	long	@_do_rad
41c8c     80 15 01 00 | 	long	@_do_deg
41c90     F0 3B 01 00 | 	long	@_do_int
41c94     FC 7C 01 00 | 	long	@_do_play
41c98     D0 B4 01 00 | 	long	@_do_setdelay
41c9c     78 B5 01 00 | 	long	@_do_setenv
41ca0     20 B6 01 00 | 	long	@_do_setlen
41ca4     C8 B6 01 00 | 	long	@_do_setpan
41ca8     18 B8 01 00 | 	long	@_do_setvol
41cac     C0 B8 01 00 | 	long	@_do_setwave
41cb0     70 B7 01 00 | 	long	@_do_setsustain
41cb4     70 A7 01 00 | 	long	@_do_release
41cb8     D4 2C 01 00 | 	long	@_do_getenvsustain
41cbc     08 8A 01 00 | 	long	@_do_poke
41cc0     80 1D 01 00 | 	long	@_do_dpoke
41cc4     30 55 01 00 | 	long	@_do_lpoke
41cc8     30 79 01 00 | 	long	@_do_peek
41ccc     D4 1C 01 00 | 	long	@_do_dpeek
41cd0     84 54 01 00 | 	long	@_do_lpeek
41cd4     CC 26 01 00 | 	long	@_do_fre
41cd8     E4 2D 01 00 | 	long	@_do_getnotevalue
41cdc     90 D3 01 00 | 	long	@_do_getaddr
41ce0     98 38 01 00 | 	long	@_do_inkey
41ce4     20 D9 00 00 | 	long	@_do_abs
41ce8     50 36 01 00 | 	long	@_do_hex
41cec     50 E1 00 00 | 	long	@_do_bin
41cf0     E0 C1 01 00 | 	long	@_do_val
41cf4     D0 F2 00 00 | 	long	@_do_chr
41cf8     B0 DA 00 00 | 	long	@_do_asc
41cfc     B4 48 01 00 | 	long	@_do_left
41d00     EC A8 01 00 | 	long	@_do_right
41d04     08 56 01 00 | 	long	@_do_mid
41d08     40 4A 01 00 | 	long	@_do_len
41d0c     A4 30 01 00 | 	long	@_do_gosub
41d10     40 A8 01 00 | 	long	@_do_return
41d14     70 1F 01 00 | 	long	@_do_end
41d18     E0 8A 01 00 | 	long	@_do_pop
41d1c     08 53 01 00 | 	long	@_do_log
41d20     C4 F0 00 00 | 	long	@_do_changevol
41d24     A4 F1 00 00 | 	long	@_do_changewav
41d28     B4 EF 00 00 | 	long	@_do_changepan
41d2c     98 EC 00 00 | 	long	@_do_changefreq
41d30     68 B9 01 00 | 	long	@_do_shutup
41d34     48 AC 01 00 | 	long	@_do_round
41d38     A4 1F 01 00 | 	long	@_do_enter
41d3c     00 65 01 00 | 	long	@_do_open
41d40     74 F5 00 00 | 	long	@_do_close
41d44     30 27 01 00 | 	long	@_do_get
41d48     10 92 01 00 | 	long	@_do_put
41d4c     D8 E6 00 00 | 	long	@_do_cd
41d50     A8 15 01 00 | 	long	@_do_delete
41d54     D4 57 01 00 | 	long	@_do_mkdir
41d58     4C DF 00 00 | 	long	@_do_blit
41d5c     98 26 01 00 | 	long	@_do_framebuf
41d60     DC 63 01 00 | 	long	@_do_on
41d64     88 BB 01 00 | 	long	@_do_skip
41d68     AC 3C 01 00 | 	long	@_do_input
41d6c     DC 99 01 00 | 	long	@_do_read
41d70     08 A8 01 00 | 	long	@_do_restore
41d74     28 71 01 00 | 	long	@_do_padx
41d78     A8 73 01 00 | 	long	@_do_pady
41d7c     28 76 01 00 | 	long	@_do_padz
41d80     A8 69 01 00 | 	long	@_do_padrx
41d84     28 6C 01 00 | 	long	@_do_padry
41d88     A8 6E 01 00 | 	long	@_do_padrz
41d8c     18 68 01 00 | 	long	@_do_padh
41d90     E4 F8 00 00 | 	long	@_do_copy
41d94     30 F6 00 00 | 	long	@_do_coginit
41d98     6C F8 00 00 | 	long	@_do_cogstop
41d9c     BC 4D 02 00 | 	long	@_hg010b_spin2_putchar
41da0     A8 63 03 00 | 	long	@__struct___bas_wrap_sender_tx
41da4     EC 63 03 00 | 	long	@__struct___bas_wrap_sender_rx
41da8     34 64 03 00 | 	long	@__struct___bas_wrap_sender_close
41dac     D8 62 03 00 | 	long	@__struct__s_vfs_file_t_putchar
41db0     48 63 03 00 | 	long	@__struct__s_vfs_file_t_getchar
41db4     90 62 03 00 | 	long	@___strs_cl_pfunc
41db8     24 C0 02 00 | 	long	@__system____root_opendir
41dbc     C0 C0 02 00 | 	long	@__system____root_closedir
41dc0     3C C0 02 00 | 	long	@__system____root_readdir
41dc4     C8 C0 02 00 | 	long	@__system____root_stat
41dc8     14 B9 02 00 | 	long	@__system____default_putc
41dcc     98 B8 02 00 | 	long	@__system____default_getc
41dd0     BC B9 02 00 | 	long	@__system____default_flush
41dd4     94 4D 03 00 | 	long	@_fatfs_cc_v_close
41dd8     B0 51 03 00 | 	long	@_fatfs_cc_v_read
41ddc     C4 52 03 00 | 	long	@_fatfs_cc_v_write
41de0     A4 53 03 00 | 	long	@_fatfs_cc_v_lseek
41de4     2C 54 03 00 | 	long	@_fatfs_cc_v_ioctl
41de8     80 54 03 00 | 	long	@_fatfs_cc_v_open
41dec     F8 4C 03 00 | 	long	@_fatfs_cc_v_creat
41df0     D8 4D 03 00 | 	long	@_fatfs_cc_v_opendir
41df4     4C 4E 03 00 | 	long	@_fatfs_cc_v_closedir
41df8     8C 4E 03 00 | 	long	@_fatfs_cc_v_readdir
41dfc     C0 4F 03 00 | 	long	@_fatfs_cc_v_stat
41e00     40 54 03 00 | 	long	@_fatfs_cc_v_mkdir
41e04     60 54 03 00 | 	long	@_fatfs_cc_v_rmdir
41e08     50 54 03 00 | 	long	@_fatfs_cc_v_remove
41e0c     70 54 03 00 | 	long	@_fatfs_cc_v_rename
41e10     90 55 03 00 | 	long	@_fatfs_cc_v_init
41e14     98 55 03 00 | 	long	@_fatfs_cc_v_deinit
41e18     64 6A 02 00 | 	long	@__system___tx
41e1c     A4 6A 02 00 | 	long	@__system___rx
41e20     34 CC 02 00 | 	long	@__system___rxtxioctl_0771
41e24     8C CC 02 00 | 	long	@__system____dummy_flush_0772
41e28     60 55 03 00 | 	long	@_fatfs_cc_v_flush
41e2c                 | __heap_base
41e2c     00 00 00 00 
      ...             
5952c     00 00 00 00 
59530     00 00 00 00 | 	long	0[24002]
59534                 | objmem
59534     00 00 00 00 
      ...             
63a4c     00 00 00 00 
63a50     00 00 00 00 | 	long	0[10568]
63a54                 | stackspace
63a54     00 00 00 00 | 	long	0[1]
63a58 100             | 	org	COG_BSS_START
63a58 100             | _var01
63a58 100             | 	res	1
63a58 101             | _var02
63a58 101             | 	res	1
63a58 102             | _var03
63a58 102             | 	res	1
63a58 103             | _var04
63a58 103             | 	res	1
63a58 104             | _var05
63a58 104             | 	res	1
63a58 105             | _var06
63a58 105             | 	res	1
63a58 106             | _var07
63a58 106             | 	res	1
63a58 107             | _var08
63a58 107             | 	res	1
63a58 108             | _var09
63a58 108             | 	res	1
63a58 109             | arg01
63a58 109             | 	res	1
63a58 10a             | arg02
63a58 10a             | 	res	1
63a58 10b             | arg03
63a58 10b             | 	res	1
63a58 10c             | arg04
63a58 10c             | 	res	1
63a58 10d             | arg05
63a58 10d             | 	res	1
63a58 10e             | arg06
63a58 10e             | 	res	1
63a58 10f             | arg07
63a58 10f             | 	res	1
63a58 110             | arg08
63a58 110             | 	res	1
63a58 111             | arg09
63a58 111             | 	res	1
63a58 112             | arg10
63a58 112             | 	res	1
63a58 113             | local01
63a58 113             | 	res	1
63a58 114             | local02
63a58 114             | 	res	1
63a58 115             | local03
63a58 115             | 	res	1
63a58 116             | local04
63a58 116             | 	res	1
63a58 117             | local05
63a58 117             | 	res	1
63a58 118             | local06
63a58 118             | 	res	1
63a58 119             | local07
63a58 119             | 	res	1
63a58 11a             | local08
63a58 11a             | 	res	1
63a58 11b             | local09
63a58 11b             | 	res	1
63a58 11c             | local10
63a58 11c             | 	res	1
63a58 11d             | local11
63a58 11d             | 	res	1
63a58 11e             | local12
63a58 11e             | 	res	1
63a58 11f             | local13
63a58 11f             | 	res	1
63a58 120             | local14
63a58 120             | 	res	1
63a58 121             | local15
63a58 121             | 	res	1
63a58 122             | local16
63a58 122             | 	res	1
63a58 123             | local17
63a58 123             | 	res	1
63a58 124             | local18
63a58 124             | 	res	1
63a58 125             | local19
63a58 125             | 	res	1
63a58 126             | local20
63a58 126             | 	res	1
63a58 127             | local21
63a58 127             | 	res	1
63a58 128             | local22
63a58 128             | 	res	1
63a58 129             | local23
63a58 129             | 	res	1
63a58 12a             | local24
63a58 12a             | 	res	1
63a58 12b             | local25
63a58 12b             | 	res	1
63a58 12c             | local26
63a58 12c             | 	res	1
63a58 12d             | local27
63a58 12d             | 	res	1
63a58 12e             | local28
63a58 12e             | 	res	1
63a58 12f             | local29
63a58 12f             | 	res	1
63a58 130             | local30
63a58 130             | 	res	1
63a58 131             | local31
63a58 131             | 	res	1
63a58 132             | local32
63a58 132             | 	res	1
63a58 133             | local33
63a58 133             | 	res	1
63a58 134             | local34
63a58 134             | 	res	1
63a58 135             | local35
63a58 135             | 	res	1
63a58 136             | local36
63a58 136             | 	res	1
63a58 137             | local37
63a58 137             | 	res	1
63a58 138             | local38
63a58 138             | 	res	1
63a58 139             | local39
63a58 139             | 	res	1
63a58 13a             | local40
63a58 13a             | 	res	1
63a58 13b             | local41
63a58 13b             | 	res	1
63a58 13c             | local42
63a58 13c             | 	res	1
63a58 13d             | local43
63a58 13d             | 	res	1
63a58 13e             | local44
63a58 13e             | 	res	1
63a58 13f             | local45
63a58 13f             | 	res	1
63a58 140             | local46
63a58 140             | 	res	1
63a58 141             | local47
63a58 141             | 	res	1
63a58 142             | local48
63a58 142             | 	res	1
63a58 143             | local49
63a58 143             | 	res	1
63a58 144             | local50
63a58 144             | 	res	1
63a58 145             | local51
63a58 145             | 	res	1
63a58 146             | local52
63a58 146             | 	res	1
63a58 147             | local53
63a58 147             | 	res	1
63a58 148             | muldiva_
63a58 148             | 	res	1
63a58 149             | muldivb_
63a58 149             | 	res	1
63a58 14a             | 	fit	480
63a58 14a             | 
