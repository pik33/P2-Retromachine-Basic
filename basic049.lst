00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic049.p2asm"
00000                 | con
00000                 | 	_clkfreq = 344067797
00000                 | 	_clkmode = 32241403
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 49
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_cogstop = 207
00000                 | 	token_memlo = 208
00000                 | 	token_memtop = 209
00000                 | 	token_setcolor = 210
00000                 | 	token_getcolor = 211
00000                 | 	token_restorepalette = 212
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 344067797
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $1ebf6fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 FB F5 80 FF 
00420 007 00 F0 65 FD | 	hubset	##32241400
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a FB F5 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##32241403
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e 07 41 8A FF 
00440 00f 14 AA 6D FC | 	wrlong	##344067797, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 10 3A A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 49 93 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 48 91 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 49 91 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 92 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 90 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 48 91 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 49 93 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec B4 3D 04 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 8C 3A 04 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 BC B4 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 6C 2D 04 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 C4 28 04 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 CC 7D 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 AC 34 04 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 3C AF 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 EC EE 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa A4 EC 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 7C FE 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc DC 59 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     E4 4A B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     A8 5F B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D0 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10192
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D0 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10192
00840     52 00 00 FF 
00844     E0 E4 05 F1 | 	add	objptr, ##42208
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     52 00 00 FF 
00850     E0 E4 85 F1 | 	sub	objptr, ##42208
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     3C E5 05 F1 | 	add	objptr, ##41276
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     3C E5 85 F1 | 	sub	objptr, ##41276
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     E8 62 B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     AC 6A B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     34 64 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     3C E5 05 F1 | 	add	objptr, ##41276
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     3C E5 85 F1 | 	sub	objptr, ##41276
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     52 00 00 FF 
00980     A4 E4 05 F1 | 	add	objptr, ##42148
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     D4 E5 85 F1 | 	sub	objptr, ##36308
009c0     F8 61 B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     98 2F B2 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     52 00 00 FF 
009dc     E0 E4 05 F1 | 	add	objptr, ##42208
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     52 00 00 FF 
009e8     E0 E4 85 F1 | 	sub	objptr, ##42208
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     52 00 00 FF 
00a64     C8 E4 05 F1 | 	add	objptr, ##42184
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     52 00 00 FF 
00a70     C8 E4 85 F1 | 	sub	objptr, ##42184
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     90 2D B2 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     30 2D B2 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     52 00 00 FF 
00afc     E8 E4 05 F1 | 	add	objptr, ##42216
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     52 00 00 FF 
00b08     AA E4 85 F1 | 	sub	objptr, ##42154
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     52 00 00 FF 
00b74     AC E4 05 F1 | 	add	objptr, ##42156
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     52 00 00 FF 
00b88     AA E4 85 F1 | 	sub	objptr, ##42154
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     C0 2C B2 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     2C 45 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     52 00 00 FF 
00bdc     E8 E4 05 F1 | 	add	objptr, ##42216
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     52 00 00 FF 
00bf0     E8 E4 85 F1 | 	sub	objptr, ##42216
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     78 48 B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     3C E5 05 A1 |  if_e	add	objptr, ##41276
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     3C E5 85 A1 |  if_e	sub	objptr, ##41276
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     24 5F B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     E8 66 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     74 60 B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     B6 01 00 FF 
00ccc     3A 50 06 F6 | 	mov	local22, ##@LR__5447
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     54 2B B2 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     C8 85 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     D4 63 B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     52 00 00 FF 
00d34     C8 E4 05 F1 | 	add	objptr, ##42184
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     52 00 00 FF 
00d40     C8 E4 85 F1 | 	sub	objptr, ##42184
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     C8 4C B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     F8 4E B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     3C E5 05 F1 | 	add	objptr, ##41276
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     3C E5 85 F1 | 	sub	objptr, ##41276
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     B0 5D B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     74 65 B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     00 5F B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     F0 29 B2 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     08 44 B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     FC 43 B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     8C 43 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     58 43 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     78 43 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     68 43 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     94 28 B2 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     40 28 B2 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     10 28 B2 FD | 	call	#_pspoke
0100c     52 00 00 FF 
01010     E8 E4 05 F1 | 	add	objptr, ##42216
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     52 00 00 FF 
0101c     AA E4 85 F1 | 	sub	objptr, ##42154
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     52 00 00 FF 
0108c     AC E4 05 F1 | 	add	objptr, ##42156
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     52 00 00 FF 
010a0     AA E4 85 F1 | 	sub	objptr, ##42154
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     A8 27 B2 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     14 40 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     52 00 00 FF 
010f4     E8 E4 05 F1 | 	add	objptr, ##42216
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     52 00 00 FF 
01108     E8 E4 85 F1 | 	sub	objptr, ##42216
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     F0 40 B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     90 26 B2 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     3C 26 B2 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     0C 26 B2 FD | 	call	#_pspoke
01210     52 00 00 FF 
01214     E8 E4 05 F1 | 	add	objptr, ##42216
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     52 00 00 FF 
01220     AA E4 85 F1 | 	sub	objptr, ##42154
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     52 00 00 FF 
01290     AC E4 05 F1 | 	add	objptr, ##42156
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     52 00 00 FF 
012a4     AA E4 85 F1 | 	sub	objptr, ##42154
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     A4 25 B2 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     10 3E B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     52 00 00 FF 
012f8     E8 E4 05 F1 | 	add	objptr, ##42216
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     52 00 00 FF 
0130c     E8 E4 85 F1 | 	sub	objptr, ##42216
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     B6 01 00 FF 
01328     3B 50 06 F6 | 	mov	local22, ##@LR__5448
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     52 00 00 FF 
01354     8E E4 05 F1 | 	add	objptr, ##42126
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     52 00 00 FF 
01360     CC E4 85 F1 | 	sub	objptr, ##42188
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     52 00 00 CF 
0136c     CC E4 05 C1 |  if_b	add	objptr, ##42188
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     52 00 00 CF 
01378     CC E4 85 C1 |  if_b	sub	objptr, ##42188
0137c     52 00 00 FF 
01380     CC E4 05 F1 | 	add	objptr, ##42188
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     52 00 00 FF 
0138c     CC E4 85 F1 | 	sub	objptr, ##42188
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     38 3F B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     52 00 00 FF 
013b4     8E E4 05 F1 | 	add	objptr, ##42126
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     52 00 00 FF 
013c0     CC E4 85 F1 | 	sub	objptr, ##42188
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     52 00 00 3F 
013cc     CC E4 05 31 |  if_ae	add	objptr, ##42188
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     52 00 00 3F 
013d8     CC E4 85 31 |  if_ae	sub	objptr, ##42188
013dc     52 00 00 FF 
013e0     CC E4 05 F1 | 	add	objptr, ##42188
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     52 00 00 FF 
013ec     CC E4 85 F1 | 	sub	objptr, ##42188
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     D8 3E B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     52 00 00 FF 
01414     94 E4 05 F1 | 	add	objptr, ##42132
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1B 00 00 FF 
01420     9C E4 85 F1 | 	sub	objptr, ##13980
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1B 00 00 CF 
01448     9C E4 05 C1 |  if_b	add	objptr, ##13980
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     52 00 00 CF 
01454     D0 E4 85 C1 |  if_b	sub	objptr, ##42192
01458     52 00 00 FF 
0145c     D0 E4 05 F1 | 	add	objptr, ##42192
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     52 00 00 FF 
01468     D0 E4 85 F1 | 	sub	objptr, ##42192
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     2C 3E B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     52 00 00 FF 
01490     94 E4 05 F1 | 	add	objptr, ##42132
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     52 00 00 FF 
0149c     D0 E4 85 F1 | 	sub	objptr, ##42192
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     52 00 00 3F 
014a8     D0 E4 05 31 |  if_ae	add	objptr, ##42192
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     52 00 00 3F 
014b4     D0 E4 85 31 |  if_ae	sub	objptr, ##42192
014b8     52 00 00 FF 
014bc     D0 E4 05 F1 | 	add	objptr, ##42192
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     52 00 00 FF 
014c8     D0 E4 85 F1 | 	sub	objptr, ##42192
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     D0 3D B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     52 00 00 FF 
014e0     C8 E4 05 F1 | 	add	objptr, ##42184
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     52 00 00 FF 
014f4     C8 E4 85 F1 | 	sub	objptr, ##42184
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     28 2C B2 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     18 2C B2 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     52 00 00 FF 
01544     4B E4 05 F1 | 	add	objptr, ##42059
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     52 00 00 FF 
01558     94 E4 85 F1 | 	sub	objptr, ##42132
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     28 5E B2 FD | 	call	#__system___waitms
01568     52 00 00 FF 
0156c     94 E4 05 F1 | 	add	objptr, ##42132
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     52 00 00 FF 
01580     94 E4 85 F1 | 	sub	objptr, ##42132
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     00 5E B2 FD | 	call	#__system___waitms
01590     52 00 00 FF 
01594     94 E4 05 F1 | 	add	objptr, ##42132
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     52 00 00 FF 
015a8     94 E4 85 F1 | 	sub	objptr, ##42132
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     D8 5D B2 FD | 	call	#__system___waitms
015b8     52 00 00 FF 
015bc     94 E4 05 F1 | 	add	objptr, ##42132
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     52 00 00 FF 
015d0     94 E4 85 F1 | 	sub	objptr, ##42132
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     08 4A 05 F6 | 	mov	COUNT_, #8
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     48 E5 05 F1 | 	add	objptr, ##41800
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     AD F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10413
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     50 E5 85 F1 | 	sub	objptr, ##41808
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650     78 52 B2 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     6C 01 90 CD |  if_b	jmp	#LR__0061
0165c     14 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     C8 52 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 2A 02 F6 | 	mov	local03, result1
0166c     14 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     B8 52 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     FD 2C 02 F6 | 	mov	local04, result1
0167c     14 13 02 F6 | 	mov	arg01, local02
01680     02 14 06 F6 | 	mov	arg02, #2
01684     A8 52 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01688     FD 2E 02 F6 | 	mov	local05, result1
0168c     14 13 02 F6 | 	mov	arg01, local02
01690     00 14 06 F6 | 	mov	arg02, #0
01694     E8 52 B2 FD | 	call	#_usbnew_spin2_hidpad_hat
01698     FD 30 02 F6 | 	mov	local06, result1
0169c     14 13 02 F6 | 	mov	arg01, local02
016a0     03 14 06 F6 | 	mov	arg02, #3
016a4     88 52 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016a8     FD 32 02 F6 | 	mov	local07, result1
016ac     14 13 02 F6 | 	mov	arg01, local02
016b0     04 14 06 F6 | 	mov	arg02, #4
016b4     78 52 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016b8     FD 34 02 F6 | 	mov	local08, result1
016bc     14 13 02 F6 | 	mov	arg01, local02
016c0     05 14 06 F6 | 	mov	arg02, #5
016c4     68 52 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016c8     FD 14 02 F6 | 	mov	arg02, result1
016cc     13 FB 01 F6 | 	mov	result1, local01
016d0     02 FA 65 F0 | 	shl	result1, #2
016d4     51 00 00 FF 
016d8     58 E5 05 F1 | 	add	objptr, ##41816
016dc     F2 FA 01 F1 | 	add	result1, objptr
016e0     FD 2A 62 FC | 	wrlong	local03, result1
016e4     13 FB 01 F6 | 	mov	result1, local01
016e8     02 FA 65 F0 | 	shl	result1, #2
016ec     1C E4 05 F1 | 	add	objptr, #28
016f0     F2 FA 01 F1 | 	add	result1, objptr
016f4     FD 2C 62 FC | 	wrlong	local04, result1
016f8     13 FB 01 F6 | 	mov	result1, local01
016fc     02 FA 65 F0 | 	shl	result1, #2
01700     1C E4 05 F1 | 	add	objptr, #28
01704     F2 FA 01 F1 | 	add	result1, objptr
01708     FD 2E 62 FC | 	wrlong	local05, result1
0170c     13 2F 02 F6 | 	mov	local05, local01
01710     02 2E 66 F0 | 	shl	local05, #2
01714     1C E4 05 F1 | 	add	objptr, #28
01718     F2 2E 02 F1 | 	add	local05, objptr
0171c     17 31 62 FC | 	wrlong	local06, local05
01720     13 31 02 F6 | 	mov	local06, local01
01724     02 30 66 F0 | 	shl	local06, #2
01728     1C E4 05 F1 | 	add	objptr, #28
0172c     F2 30 02 F1 | 	add	local06, objptr
01730     18 33 62 FC | 	wrlong	local07, local06
01734     13 33 02 F6 | 	mov	local07, local01
01738     02 32 66 F0 | 	shl	local07, #2
0173c     1C E4 05 F1 | 	add	objptr, #28
01740     F2 32 02 F1 | 	add	local07, objptr
01744     19 35 62 FC | 	wrlong	local08, local07
01748     13 35 02 F6 | 	mov	local08, local01
0174c     02 34 66 F0 | 	shl	local08, #2
01750     1C E4 05 F1 | 	add	objptr, #28
01754     F2 34 02 F1 | 	add	local08, objptr
01758     1A 15 62 FC | 	wrlong	arg02, local08
0175c     60 00 00 FF 
01760     00 2A 06 F1 | 	add	local03, ##49152
01764     0F 2A 46 F0 | 	shr	local03, #15
01768     01 34 06 F6 | 	mov	local08, #1
0176c     15 35 02 F1 | 	add	local08, local03
01770     60 00 00 FF 
01774     00 2C 06 F1 | 	add	local04, ##49152
01778     0F 2C 46 F0 | 	shr	local04, #15
0177c     01 32 06 F6 | 	mov	local07, #1
01780     16 33 02 F1 | 	add	local07, local04
01784     13 31 02 F6 | 	mov	local06, local01
01788     02 30 66 F0 | 	shl	local06, #2
0178c     1C E4 05 F1 | 	add	objptr, #28
01790     F2 30 02 F1 | 	add	local06, objptr
01794     02 32 66 F0 | 	shl	local07, #2
01798     19 35 02 F1 | 	add	local08, local07
0179c     18 35 62 FC | 	wrlong	local08, local06
017a0     13 35 02 F6 | 	mov	local08, local01
017a4     02 34 66 F0 | 	shl	local08, #2
017a8     1C E4 05 F1 | 	add	objptr, #28
017ac     F2 34 02 F1 | 	add	local08, objptr
017b0     14 13 02 F6 | 	mov	arg01, local02
017b4     52 00 00 FF 
017b8     38 E4 85 F1 | 	sub	objptr, ##42040
017bc     3C 51 B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
017c0     1A FB 61 FC | 	wrlong	result1, local08
017c4     01 26 06 F1 | 	add	local01, #1
017c8                 | LR__0061
017c8     01 28 06 F1 | 	add	local02, #1
017cc     07 28 16 F2 | 	cmp	local02, #7 wc
017d0     78 FE 9F CD |  if_b	jmp	#LR__0060
017d4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
017d8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
017d8                 | LR__0062
017d8     07 26 16 F2 | 	cmp	local01, #7 wc
017dc     3C 00 90 3D |  if_ae	jmp	#LR__0064
017e0     13 35 02 F6 | 	mov	local08, local01
017e4     02 34 66 F0 | 	shl	local08, #2
017e8     52 00 00 FF 
017ec     1C E4 05 F1 | 	add	objptr, ##42012
017f0     F2 34 02 F1 | 	add	local08, objptr
017f4     1A 01 68 FC | 	wrlong	#0, local08
017f8     13 35 02 F6 | 	mov	local08, local01
017fc     02 34 66 F0 | 	shl	local08, #2
01800     1C E4 05 F1 | 	add	objptr, #28
01804     F2 34 02 F1 | 	add	local08, objptr
01808     1A 01 68 FC | 	wrlong	#0, local08
0180c     01 26 06 F1 | 	add	local01, #1
01810     52 00 00 FF 
01814     38 E4 85 F1 | 	sub	objptr, ##42040
01818     BC FF 9F FD | 	jmp	#LR__0062
0181c                 | LR__0063
0181c                 | LR__0064
0181c     A7 F0 03 F6 | 	mov	ptra, fp
01820     B2 00 A0 FD | 	call	#popregs_
01824                 | _gethdi_ret
01824     2D 00 64 FD | 	ret
01828                 | 
01828                 | ' 
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' 
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' '
01828                 | ' '                                     LINE INTERPRETER/TOKENIZER
01828                 | ' '
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' 
01828                 | ' 
01828                 | ' sub interpret
01828                 | _interpret
01828     35 4A 05 F6 | 	mov	COUNT_, #53
0182c     A8 00 A0 FD | 	call	#pushregs_
01830     01 00 00 FF 
01834     84 F0 07 F1 | 	add	ptra, ##644
01838     37 00 00 FF 
0183c     1C E4 05 F1 | 	add	objptr, ##28188
01840     F2 12 02 FB | 	rdlong	arg01, objptr
01844     37 00 00 FF 
01848     1C E4 85 F1 | 	sub	objptr, ##28188
0184c     5C 7D B2 FD | 	call	#__system__RTrim_S
01850     FD 12 02 F6 | 	mov	arg01, result1
01854     94 7C B2 FD | 	call	#__system__LTrim_S
01858     37 00 00 FF 
0185c     20 E4 05 F1 | 	add	objptr, ##28192
01860     F2 FA 61 FC | 	wrlong	result1, objptr
01864     04 E4 05 F1 | 	add	objptr, #4
01868     FF FF FF FF 
0186c     F2 FE 6B FC | 	wrlong	##-1, objptr
01870     1B 00 00 FF 
01874     8C E4 05 F1 | 	add	objptr, ##13964
01878     F2 00 68 FC | 	wrlong	#0, objptr
0187c     08 00 00 FF 
01880     34 E4 85 F1 | 	sub	objptr, ##4148
01884     F2 00 68 FC | 	wrlong	#0, objptr
01888     4A 00 00 FF 
0188c     7C E4 85 F1 | 	sub	objptr, ##38012
01890     00 26 06 F6 | 	mov	local01, #0
01894                 | LR__0070
01894                 | ' 
01894                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
01894                 | ' 
01894                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
01894                 | ' 
01894                 | ' 108 
01894                 | ' for i=0 to 125: separators(i)=0 :next i
01894     00 28 06 F6 | 	mov	local02, #0
01898     38 4E 05 F1 | 	add	fp, #56
0189c     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
018a0                 | LR__0071
018a0     14 2B 02 F6 | 	mov	local03, local02
018a4     02 2A 66 F0 | 	shl	local03, #2
018a8     A7 2A 02 F1 | 	add	local03, fp
018ac     15 01 68 FC | 	wrlong	#0, local03
018b0     01 28 06 F1 | 	add	local02, #1
018b4     7E 28 56 F2 | 	cmps	local02, #126 wc
018b8     E4 FF 9F CD |  if_b	jmp	#LR__0071
018bc                 | LR__0072
018bc     38 4E 85 F1 | 	sub	fp, #56
018c0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
018c0     00 28 06 F6 | 	mov	local02, #0
018c4     35 00 00 FF 
018c8     0C E4 05 F1 | 	add	objptr, ##27148
018cc     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
018d0                 | LR__0073
018d0     14 2D 02 F6 | 	mov	local04, local02
018d4     03 2C 66 F0 | 	shl	local04, #3
018d8     F2 2C 02 F1 | 	add	local04, objptr
018dc     B6 01 00 FF 
018e0     3C 16 06 F6 | 	mov	arg03, ##@LR__5449
018e4     16 17 62 FC | 	wrlong	arg03, local04
018e8     14 2D 02 F6 | 	mov	local04, local02
018ec     03 2C 66 F0 | 	shl	local04, #3
018f0     F2 2E 02 F6 | 	mov	local05, objptr
018f4     F2 2C 02 F1 | 	add	local04, objptr
018f8     00 30 06 F6 | 	mov	local06, #0
018fc     04 2C 06 F1 | 	add	local04, #4
01900     16 01 68 FC | 	wrlong	#0, local04
01904     01 28 06 F1 | 	add	local02, #1
01908     7E 28 56 F2 | 	cmps	local02, #126 wc
0190c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01910                 | LR__0074
01910     02 00 00 FF 
01914     10 E4 05 F1 | 	add	objptr, ##1040
01918     F2 12 02 FB | 	rdlong	arg01, objptr
0191c     37 00 00 FF 
01920     1C E4 85 F1 | 	sub	objptr, ##28188
01924     84 7C B2 FD | 	call	#__system__RTrim_S
01928     FD 12 02 F6 | 	mov	arg01, result1
0192c     BC 7B B2 FD | 	call	#__system__LTrim_S
01930     37 00 00 FF 
01934     1C E4 05 F1 | 	add	objptr, ##28188
01938     F2 FA 61 FC | 	wrlong	result1, objptr
0193c     B6 01 00 FF 
01940     3D 2C 06 F6 | 	mov	local04, ##@LR__5450
01944     1B 00 00 FF 
01948     D0 E4 05 F1 | 	add	objptr, ##14032
0194c     F2 2C 62 FC | 	wrlong	local04, objptr
01950     1B 00 00 FF 
01954     D0 E4 85 F1 | 	sub	objptr, ##14032
01958     F2 12 02 FB | 	rdlong	arg01, objptr
0195c     37 00 00 FF 
01960     1C E4 85 F1 | 	sub	objptr, ##28188
01964     09 33 02 F6 | 	mov	local07, arg01
01968     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0196c                 | LR__0075
0196c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01970     01 32 06 51 |  if_ne	add	local07, #1
01974     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01978                 | LR__0076
01978     09 33 8A F1 | 	sub	local07, arg01 wz
0197c     52 00 00 FF 
01980     F0 E4 05 F1 | 	add	objptr, ##42224
01984     F2 32 62 FC | 	wrlong	local07, objptr
01988                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
01988     52 00 00 FF 
0198c     F0 E4 85 F1 | 	sub	objptr, ##42224
01990     40 2A 90 AD |  if_e	jmp	#LR__0210
01994     00 34 06 F6 | 	mov	local08, #0
01998                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
01998                 | ' for i=1 to len(line$)
01998     01 28 06 F6 | 	mov	local02, #1
0199c     37 00 00 FF 
019a0     1C E4 05 F1 | 	add	objptr, ##28188
019a4     F2 12 02 FB | 	rdlong	arg01, objptr
019a8     37 00 00 FF 
019ac     1C E4 85 F1 | 	sub	objptr, ##28188
019b0     09 33 02 F6 | 	mov	local07, arg01
019b4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
019b8                 | LR__0077
019b8     19 FB C9 FA | 	rdbyte	result1, local07 wz
019bc     01 32 06 51 |  if_ne	add	local07, #1
019c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
019c4                 | LR__0078
019c4     09 33 82 F1 | 	sub	local07, arg01
019c8     19 37 02 F6 | 	mov	local09, local07
019cc     01 36 06 F1 | 	add	local09, #1
019d0                 | LR__0079
019d0     1B 29 52 F2 | 	cmps	local02, local09 wc
019d4     AC 00 90 3D |  if_ae	jmp	#LR__0081
019d8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
019d8     37 00 00 FF 
019dc     1C E4 05 F1 | 	add	objptr, ##28188
019e0     F2 12 02 FB | 	rdlong	arg01, objptr
019e4     37 00 00 FF 
019e8     1C E4 85 F1 | 	sub	objptr, ##28188
019ec     14 15 02 F6 | 	mov	arg02, local02
019f0     01 16 06 F6 | 	mov	arg03, #1
019f4     3C 78 B2 FD | 	call	#__system__Mid_S
019f8     FD 12 02 F6 | 	mov	arg01, result1
019fc     B6 01 00 FF 
01a00     3E 14 06 F6 | 	mov	arg02, ##@LR__5451
01a04     BC 56 B2 FD | 	call	#__system___string_cmp
01a08     00 FA 0D F2 | 	cmp	result1, #0 wz
01a0c     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01a10     01 34 06 A6 |  if_e	mov	local08, #1
01a14     3C 00 90 AD |  if_e	jmp	#LR__0080
01a18     37 00 00 FF 
01a1c     1C E4 05 F1 | 	add	objptr, ##28188
01a20     F2 12 02 FB | 	rdlong	arg01, objptr
01a24     37 00 00 FF 
01a28     1C E4 85 F1 | 	sub	objptr, ##28188
01a2c     14 15 02 F6 | 	mov	arg02, local02
01a30     01 16 06 F6 | 	mov	arg03, #1
01a34     FC 77 B2 FD | 	call	#__system__Mid_S
01a38     FD 12 02 F6 | 	mov	arg01, result1
01a3c     B6 01 00 FF 
01a40     40 14 06 F6 | 	mov	arg02, ##@LR__5452
01a44     7C 56 B2 FD | 	call	#__system___string_cmp
01a48     00 FA 0D F2 | 	cmp	result1, #0 wz
01a4c     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01a50     00 34 06 A6 |  if_e	mov	local08, #0
01a54                 | LR__0080
01a54     14 2D 02 F6 | 	mov	local04, local02
01a58     03 2C 66 F0 | 	shl	local04, #3
01a5c     35 00 00 FF 
01a60     0C E4 05 F1 | 	add	objptr, ##27148
01a64     F2 2E 02 F6 | 	mov	local05, objptr
01a68     F2 2C 02 F1 | 	add	local04, objptr
01a6c     04 2C 06 F1 | 	add	local04, #4
01a70     16 35 62 FC | 	wrlong	local08, local04
01a74     01 28 06 F1 | 	add	local02, #1
01a78     35 00 00 FF 
01a7c     0C E4 85 F1 | 	sub	objptr, ##27148
01a80     4C FF 9F FD | 	jmp	#LR__0079
01a84                 | LR__0081
01a84     01 28 06 F6 | 	mov	local02, #1
01a88                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01a88                 | LR__0082
01a88     37 00 00 FF 
01a8c     1C E4 05 F1 | 	add	objptr, ##28188
01a90     F2 12 02 FB | 	rdlong	arg01, objptr
01a94     37 00 00 FF 
01a98     1C E4 85 F1 | 	sub	objptr, ##28188
01a9c     14 15 02 F6 | 	mov	arg02, local02
01aa0     01 16 06 F6 | 	mov	arg03, #1
01aa4     8C 77 B2 FD | 	call	#__system__Mid_S
01aa8     FD 12 02 F6 | 	mov	arg01, result1
01aac     B6 01 00 FF 
01ab0     42 38 06 F6 | 	mov	local10, ##@LR__5453
01ab4     1C 15 02 F6 | 	mov	arg02, local10
01ab8     08 56 B2 FD | 	call	#__system___string_cmp
01abc     00 FA 0D F2 | 	cmp	result1, #0 wz
01ac0     34 00 90 5D |  if_ne	jmp	#LR__0083
01ac4     14 2F 02 F6 | 	mov	local05, local02
01ac8     03 2E 66 F0 | 	shl	local05, #3
01acc     35 00 00 FF 
01ad0     0C E4 05 F1 | 	add	objptr, ##27148
01ad4     F2 30 02 F6 | 	mov	local06, objptr
01ad8     F2 2E 02 F1 | 	add	local05, objptr
01adc     04 2E 06 F1 | 	add	local05, #4
01ae0     17 3B 02 FB | 	rdlong	local11, local05
01ae4     04 2E 86 F1 | 	sub	local05, #4
01ae8     1D 3D 0A F6 | 	mov	local12, local11 wz
01aec     35 00 00 FF 
01af0     0C E4 85 F1 | 	sub	objptr, ##27148
01af4     24 00 90 AD |  if_e	jmp	#LR__0084
01af8                 | LR__0083
01af8     52 00 00 FF 
01afc     F0 E4 05 F1 | 	add	objptr, ##42224
01b00     F2 3E 02 FB | 	rdlong	local13, objptr
01b04     52 00 00 FF 
01b08     F0 E4 85 F1 | 	sub	objptr, ##42224
01b0c     1F 41 02 F6 | 	mov	local14, local13
01b10     20 29 52 F2 | 	cmps	local02, local14 wc
01b14     01 28 06 C1 |  if_b	add	local02, #1
01b18     6C FF 9F CD |  if_b	jmp	#LR__0082
01b1c                 | LR__0084
01b1c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01b1c     52 00 00 FF 
01b20     F0 E4 05 F1 | 	add	objptr, ##42224
01b24     F2 2C 02 FB | 	rdlong	local04, objptr
01b28     52 00 00 FF 
01b2c     F0 E4 85 F1 | 	sub	objptr, ##42224
01b30     16 29 52 F2 | 	cmps	local02, local04 wc
01b34     A8 00 90 3D |  if_ae	jmp	#LR__0087
01b38     37 00 00 FF 
01b3c     1C E4 05 F1 | 	add	objptr, ##28188
01b40     F2 30 02 FB | 	rdlong	local06, objptr
01b44     37 00 00 FF 
01b48     1C E4 85 F1 | 	sub	objptr, ##28188
01b4c     18 13 02 F6 | 	mov	arg01, local06
01b50     09 33 02 F6 | 	mov	local07, arg01
01b54     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01b58                 | LR__0085
01b58     19 FB C9 FA | 	rdbyte	result1, local07 wz
01b5c     01 32 06 51 |  if_ne	add	local07, #1
01b60     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01b64                 | LR__0086
01b64     09 33 82 F1 | 	sub	local07, arg01
01b68     19 2F 02 F6 | 	mov	local05, local07
01b6c     17 15 02 F6 | 	mov	arg02, local05
01b70     14 15 82 F1 | 	sub	arg02, local02
01b74     18 13 02 F6 | 	mov	arg01, local06
01b78     28 76 B2 FD | 	call	#__system__Right_S
01b7c     FD 12 02 F6 | 	mov	arg01, result1
01b80     28 7A B2 FD | 	call	#__system__RTrim_S
01b84     FD 12 02 F6 | 	mov	arg01, result1
01b88     60 79 B2 FD | 	call	#__system__LTrim_S
01b8c     52 00 00 FF 
01b90     F4 E4 05 F1 | 	add	objptr, ##42228
01b94     F2 FA 61 FC | 	wrlong	result1, objptr
01b98     1B 00 00 FF 
01b9c     D8 E4 85 F1 | 	sub	objptr, ##14040
01ba0     F2 12 02 FB | 	rdlong	arg01, objptr
01ba4     37 00 00 FF 
01ba8     1C E4 85 F1 | 	sub	objptr, ##28188
01bac     01 28 86 F1 | 	sub	local02, #1
01bb0     14 15 02 F6 | 	mov	arg02, local02
01bb4     64 75 B2 FD | 	call	#__system__Left_S
01bb8     FD 12 02 F6 | 	mov	arg01, result1
01bbc     EC 79 B2 FD | 	call	#__system__RTrim_S
01bc0     FD 12 02 F6 | 	mov	arg01, result1
01bc4     24 79 B2 FD | 	call	#__system__LTrim_S
01bc8     37 00 00 FF 
01bcc     1C E4 05 F1 | 	add	objptr, ##28188
01bd0     F2 FA 61 FC | 	wrlong	result1, objptr
01bd4     37 00 00 FF 
01bd8     1C E4 85 F1 | 	sub	objptr, ##28188
01bdc     1C 00 90 FD | 	jmp	#LR__0088
01be0                 | LR__0087
01be0     B6 01 00 FF 
01be4     44 2C 06 F6 | 	mov	local04, ##@LR__5454
01be8     52 00 00 FF 
01bec     F4 E4 05 F1 | 	add	objptr, ##42228
01bf0     F2 2C 62 FC | 	wrlong	local04, objptr
01bf4     52 00 00 FF 
01bf8     F4 E4 85 F1 | 	sub	objptr, ##42228
01bfc                 | LR__0088
01bfc                 | ' 
01bfc                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01bfc     37 00 00 FF 
01c00     24 E4 05 F1 | 	add	objptr, ##28196
01c04     F2 2C 02 FB | 	rdlong	local04, objptr
01c08     37 00 00 FF 
01c0c     24 E4 85 F1 | 	sub	objptr, ##28196
01c10     FF FF 7F FF 
01c14     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c18     40 00 90 5D |  if_ne	jmp	#LR__0089
01c1c     52 00 00 FF 
01c20     F4 E4 05 F1 | 	add	objptr, ##42228
01c24     F2 12 02 FB | 	rdlong	arg01, objptr
01c28     52 00 00 FF 
01c2c     F4 E4 85 F1 | 	sub	objptr, ##42228
01c30     B6 01 00 FF 
01c34     45 30 06 F6 | 	mov	local06, ##@LR__5455
01c38     18 15 02 F6 | 	mov	arg02, local06
01c3c     84 54 B2 FD | 	call	#__system___string_cmp
01c40     00 FA 0D F2 | 	cmp	result1, #0 wz
01c44     37 00 00 5F 
01c48     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c4c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01c50     37 00 00 5F 
01c54     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c58     08 01 90 5D |  if_ne	jmp	#LR__0093
01c5c                 | LR__0089
01c5c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01c5c     37 00 00 FF 
01c60     24 E4 05 F1 | 	add	objptr, ##28196
01c64     F2 2C 02 FB | 	rdlong	local04, objptr
01c68     37 00 00 FF 
01c6c     24 E4 85 F1 | 	sub	objptr, ##28196
01c70     FF FF 7F FF 
01c74     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c78     3C 00 90 5D |  if_ne	jmp	#LR__0090
01c7c     52 00 00 FF 
01c80     F4 E4 05 F1 | 	add	objptr, ##42228
01c84     F2 12 02 FB | 	rdlong	arg01, objptr
01c88     52 00 00 FF 
01c8c     F4 E4 85 F1 | 	sub	objptr, ##42228
01c90     B6 01 00 FF 
01c94     46 14 06 F6 | 	mov	arg02, ##@LR__5456
01c98     28 54 B2 FD | 	call	#__system___string_cmp
01c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
01ca0     37 00 00 AF 
01ca4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01ca8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01cac     37 00 00 AF 
01cb0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01cb4     AC 00 90 AD |  if_e	jmp	#LR__0093
01cb8                 | LR__0090
01cb8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01cb8     37 00 00 FF 
01cbc     24 E4 05 F1 | 	add	objptr, ##28196
01cc0     F2 2C 02 FB | 	rdlong	local04, objptr
01cc4     37 00 00 FF 
01cc8     24 E4 85 F1 | 	sub	objptr, ##28196
01ccc     04 2C 0E F2 | 	cmp	local04, #4 wz
01cd0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01cd4     52 00 00 FF 
01cd8     F4 E4 05 F1 | 	add	objptr, ##42228
01cdc     F2 12 02 FB | 	rdlong	arg01, objptr
01ce0     52 00 00 FF 
01ce4     F4 E4 85 F1 | 	sub	objptr, ##42228
01ce8     B6 01 00 FF 
01cec     47 14 06 F6 | 	mov	arg02, ##@LR__5457
01cf0     D0 53 B2 FD | 	call	#__system___string_cmp
01cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
01cf8     37 00 00 5F 
01cfc     24 E4 05 51 |  if_ne	add	objptr, ##28196
01d00     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01d04     37 00 00 5F 
01d08     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01d0c     54 00 90 5D |  if_ne	jmp	#LR__0093
01d10                 | LR__0091
01d10                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01d10     37 00 00 FF 
01d14     24 E4 05 F1 | 	add	objptr, ##28196
01d18     F2 2C 02 FB | 	rdlong	local04, objptr
01d1c     37 00 00 FF 
01d20     24 E4 85 F1 | 	sub	objptr, ##28196
01d24     04 2C 0E F2 | 	cmp	local04, #4 wz
01d28     38 00 90 5D |  if_ne	jmp	#LR__0092
01d2c     52 00 00 FF 
01d30     F4 E4 05 F1 | 	add	objptr, ##42228
01d34     F2 12 02 FB | 	rdlong	arg01, objptr
01d38     52 00 00 FF 
01d3c     F4 E4 85 F1 | 	sub	objptr, ##42228
01d40     B6 01 00 FF 
01d44     48 14 06 F6 | 	mov	arg02, ##@LR__5458
01d48     78 53 B2 FD | 	call	#__system___string_cmp
01d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
01d50     37 00 00 AF 
01d54     24 E4 05 A1 |  if_e	add	objptr, ##28196
01d58     F2 04 68 AC |  if_e	wrlong	#2, objptr
01d5c     37 00 00 AF 
01d60     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01d64                 | LR__0092
01d64                 | LR__0093
01d64     38 4E 05 F1 | 	add	fp, #56
01d68     A7 00 68 FC | 	wrlong	#0, fp
01d6c     38 4E 85 F1 | 	sub	fp, #56
01d70     00 28 06 F6 | 	mov	local02, #0
01d74     01 42 06 F6 | 	mov	local15, #1
01d78                 | ' 
01d78                 | ' ' 1b: find separators
01d78                 | ' 
01d78                 | ' 107
01d78                 | ' separators(0)=0
01d78                 | ' i=0: j=1
01d78                 | ' do: 
01d78                 | LR__0094
01d78     01 28 06 F1 | 	add	local02, #1
01d7c     37 00 00 FF 
01d80     1C E4 05 F1 | 	add	objptr, ##28188
01d84     F2 12 02 FB | 	rdlong	arg01, objptr
01d88     37 00 00 FF 
01d8c     1C E4 85 F1 | 	sub	objptr, ##28188
01d90     14 15 02 F6 | 	mov	arg02, local02
01d94     01 16 06 F6 | 	mov	arg03, #1
01d98     98 74 B2 FD | 	call	#__system__Mid_S
01d9c     FD 44 02 F6 | 	mov	local16, result1
01da0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01da0     22 13 02 F6 | 	mov	arg01, local16
01da4     94 2E B0 FD | 	call	#_isseparator
01da8     00 FA 0D F2 | 	cmp	result1, #0 wz
01dac     1C 00 90 AD |  if_e	jmp	#LR__0095
01db0     21 2B 02 F6 | 	mov	local03, local15
01db4     02 2A 66 F0 | 	shl	local03, #2
01db8     38 4E 05 F1 | 	add	fp, #56
01dbc     A7 2A 02 F1 | 	add	local03, fp
01dc0     15 29 62 FC | 	wrlong	local02, local03
01dc4     01 42 06 F1 | 	add	local15, #1
01dc8     38 4E 85 F1 | 	sub	fp, #56
01dcc                 | LR__0095
01dcc     52 00 00 FF 
01dd0     F0 E4 05 F1 | 	add	objptr, ##42224
01dd4     F2 2C 02 FB | 	rdlong	local04, objptr
01dd8     52 00 00 FF 
01ddc     F0 E4 85 F1 | 	sub	objptr, ##42224
01de0     16 29 5A F2 | 	cmps	local02, local04 wcz
01de4     90 FF 9F ED |  if_be	jmp	#LR__0094
01de8     21 2B 02 F6 | 	mov	local03, local15
01dec     02 2A 66 F0 | 	shl	local03, #2
01df0     38 4E 05 F1 | 	add	fp, #56
01df4     A7 38 02 F6 | 	mov	local10, fp
01df8     A7 2A 02 F1 | 	add	local03, fp
01dfc     15 29 62 FC | 	wrlong	local02, local03
01e00     00 46 06 F6 | 	mov	local17, #0
01e04                 | ' for i=0 to j-1 
01e04     00 28 06 F6 | 	mov	local02, #0
01e08     21 49 02 F6 | 	mov	local18, local15
01e0c     38 4E 85 F1 | 	sub	fp, #56
01e10                 | LR__0096
01e10     24 29 52 F2 | 	cmps	local02, local18 wc
01e14     50 01 90 3D |  if_ae	jmp	#LR__0100
01e18     14 2B 02 F6 | 	mov	local03, local02
01e1c     02 2A 66 F0 | 	shl	local03, #2
01e20     38 4E 05 F1 | 	add	fp, #56
01e24     A7 2A 02 F1 | 	add	local03, fp
01e28     15 2F 02 FB | 	rdlong	local05, local03
01e2c     52 00 00 FF 
01e30     FC E4 05 F1 | 	add	objptr, ##42236
01e34     F2 2E 62 FC | 	wrlong	local05, objptr
01e38     14 2B 02 F6 | 	mov	local03, local02
01e3c     01 2A 06 F1 | 	add	local03, #1
01e40     02 2A 66 F0 | 	shl	local03, #2
01e44     A7 38 02 F6 | 	mov	local10, fp
01e48     A7 2A 02 F1 | 	add	local03, fp
01e4c     15 2F 02 FB | 	rdlong	local05, local03
01e50     04 E4 05 F1 | 	add	objptr, #4
01e54     F2 2E 62 FC | 	wrlong	local05, objptr
01e58                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e58     04 E4 85 F1 | 	sub	objptr, #4
01e5c     F2 2C 02 FB | 	rdlong	local04, objptr
01e60     52 00 00 FF 
01e64     FC E4 85 F1 | 	sub	objptr, ##42236
01e68     01 2C 56 F2 | 	cmps	local04, #1 wc
01e6c     38 4E 85 F1 | 	sub	fp, #56
01e70     68 00 90 CD |  if_b	jmp	#LR__0098
01e74     37 00 00 FF 
01e78     1C E4 05 F1 | 	add	objptr, ##28188
01e7c     F2 12 02 FB | 	rdlong	arg01, objptr
01e80     1B 00 00 FF 
01e84     E0 E4 05 F1 | 	add	objptr, ##14048
01e88     F2 14 02 FB | 	rdlong	arg02, objptr
01e8c     52 00 00 FF 
01e90     FC E4 85 F1 | 	sub	objptr, ##42236
01e94     01 16 06 F6 | 	mov	arg03, #1
01e98     98 73 B2 FD | 	call	#__system__Mid_S
01e9c     FD 4A 02 F6 | 	mov	local19, result1
01ea0     B6 01 00 FF 
01ea4     49 14 06 F6 | 	mov	arg02, ##@LR__5459
01ea8     25 13 02 F6 | 	mov	arg01, local19
01eac     14 52 B2 FD | 	call	#__system___string_cmp
01eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
01eb4     24 00 90 AD |  if_e	jmp	#LR__0097
01eb8     23 39 02 F6 | 	mov	local10, local17
01ebc     03 38 66 F0 | 	shl	local10, #3
01ec0     35 00 00 FF 
01ec4     0C E4 05 F1 | 	add	objptr, ##27148
01ec8     F2 38 02 F1 | 	add	local10, objptr
01ecc     1C 4B 62 FC | 	wrlong	local19, local10
01ed0     01 46 06 F1 | 	add	local17, #1
01ed4     35 00 00 FF 
01ed8     0C E4 85 F1 | 	sub	objptr, ##27148
01edc                 | LR__0097
01edc                 | LR__0098
01edc     37 00 00 FF 
01ee0     1C E4 05 F1 | 	add	objptr, ##28188
01ee4     F2 12 02 FB | 	rdlong	arg01, objptr
01ee8     1B 00 00 FF 
01eec     E0 E4 05 F1 | 	add	objptr, ##14048
01ef0     F2 14 02 FB | 	rdlong	arg02, objptr
01ef4     01 14 06 F1 | 	add	arg02, #1
01ef8     04 E4 05 F1 | 	add	objptr, #4
01efc     F2 16 02 FB | 	rdlong	arg03, objptr
01f00     04 E4 85 F1 | 	sub	objptr, #4
01f04     F2 3A 02 FB | 	rdlong	local11, objptr
01f08     52 00 00 FF 
01f0c     FC E4 85 F1 | 	sub	objptr, ##42236
01f10     1D 3D 02 F6 | 	mov	local12, local11
01f14     1E 17 82 F1 | 	sub	arg03, local12
01f18     01 16 86 F1 | 	sub	arg03, #1
01f1c     14 73 B2 FD | 	call	#__system__Mid_S
01f20     FD 4A 02 F6 | 	mov	local19, result1
01f24                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f24     B6 01 00 FF 
01f28     4A 14 06 F6 | 	mov	arg02, ##@LR__5460
01f2c     25 13 02 F6 | 	mov	arg01, local19
01f30     90 51 B2 FD | 	call	#__system___string_cmp
01f34     00 FA 0D F2 | 	cmp	result1, #0 wz
01f38     24 00 90 AD |  if_e	jmp	#LR__0099
01f3c     23 39 02 F6 | 	mov	local10, local17
01f40     03 38 66 F0 | 	shl	local10, #3
01f44     35 00 00 FF 
01f48     0C E4 05 F1 | 	add	objptr, ##27148
01f4c     F2 38 02 F1 | 	add	local10, objptr
01f50     1C 4B 62 FC | 	wrlong	local19, local10
01f54     01 46 06 F1 | 	add	local17, #1
01f58     35 00 00 FF 
01f5c     0C E4 85 F1 | 	sub	objptr, ##27148
01f60                 | LR__0099
01f60     01 28 06 F1 | 	add	local02, #1
01f64     A8 FE 9F FD | 	jmp	#LR__0096
01f68                 | LR__0100
01f68                 | ' 
01f68                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01f68                 | ' 
01f68                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01f68     37 00 00 FF 
01f6c     24 E4 05 F1 | 	add	objptr, ##28196
01f70     F2 2C 0A FB | 	rdlong	local04, objptr wz
01f74     37 00 00 FF 
01f78     24 E4 85 F1 | 	sub	objptr, ##28196
01f7c     37 00 00 5F 
01f80     24 E4 05 51 |  if_ne	add	objptr, ##28196
01f84     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01f88     37 00 00 5F 
01f8c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01f90     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01f94     B8 00 90 5D |  if_ne	jmp	#LR__0103
01f98     35 00 00 FF 
01f9c     0C E4 05 F1 | 	add	objptr, ##27148
01fa0     F2 3A 02 FB | 	rdlong	local11, objptr
01fa4     35 00 00 FF 
01fa8     0C E4 85 F1 | 	sub	objptr, ##27148
01fac     1D 13 02 F6 | 	mov	arg01, local11
01fb0     4C 50 B0 FD | 	call	#_isdec
01fb4     FD 3C 02 F6 | 	mov	local12, result1
01fb8     1E 31 22 F6 | 	not	local06, local12
01fbc     00 30 0E F2 | 	cmp	local06, #0 wz
01fc0     8C 00 90 AD |  if_e	jmp	#LR__0103
01fc4     23 29 02 F6 | 	mov	local02, local17
01fc8     35 00 00 FF 
01fcc     0C E4 05 F1 | 	add	objptr, ##27148
01fd0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01fd4                 | LR__0101
01fd4     14 2F 02 F6 | 	mov	local05, local02
01fd8     01 2E 86 F1 | 	sub	local05, #1
01fdc     03 2E 66 F0 | 	shl	local05, #3
01fe0     F2 2E 02 F1 | 	add	local05, objptr
01fe4     17 2D 02 FB | 	rdlong	local04, local05
01fe8     14 31 02 F6 | 	mov	local06, local02
01fec     01 30 86 F1 | 	sub	local06, #1
01ff0     03 30 66 F0 | 	shl	local06, #3
01ff4     F2 30 02 F1 | 	add	local06, objptr
01ff8     04 30 06 F1 | 	add	local06, #4
01ffc     18 2B 02 FB | 	rdlong	local03, local06
02000     14 31 02 F6 | 	mov	local06, local02
02004     03 30 66 F0 | 	shl	local06, #3
02008     F2 3C 02 F6 | 	mov	local12, objptr
0200c     F2 30 02 F1 | 	add	local06, objptr
02010     18 2D 62 FC | 	wrlong	local04, local06
02014     14 3B 02 F6 | 	mov	local11, local02
02018     1D 3F 02 F6 | 	mov	local13, local11
0201c     03 3E 66 F0 | 	shl	local13, #3
02020     F2 3E 02 F1 | 	add	local13, objptr
02024     04 3E 06 F1 | 	add	local13, #4
02028     1F 2B 62 FC | 	wrlong	local03, local13
0202c     01 28 86 F1 | 	sub	local02, #1
02030     01 28 56 F2 | 	cmps	local02, #1 wc
02034     9C FF 9F 3D |  if_ae	jmp	#LR__0101
02038                 | LR__0102
02038     B6 01 00 FF 
0203c     4B 2C 06 F6 | 	mov	local04, ##@LR__5461
02040     F2 2C 62 FC | 	wrlong	local04, objptr
02044     35 00 00 FF 
02048     0C E4 85 F1 | 	sub	objptr, ##27148
0204c     01 46 06 F1 | 	add	local17, #1
02050                 | LR__0103
02050     00 28 06 F6 | 	mov	local02, #0
02054                 | ' 
02054                 | ' ' 1e : find strings
02054                 | ' 
02054                 | ' i=0
02054                 | ' do
02054                 | LR__0104
02054                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
02054     14 2F 02 F6 | 	mov	local05, local02
02058     03 2E 66 F0 | 	shl	local05, #3
0205c     35 00 00 FF 
02060     0C E4 05 F1 | 	add	objptr, ##27148
02064     F2 2E 02 F1 | 	add	local05, objptr
02068     17 13 02 FB | 	rdlong	arg01, local05
0206c     B6 01 00 FF 
02070     4D 14 06 F6 | 	mov	arg02, ##@LR__5462
02074     35 00 00 FF 
02078     0C E4 85 F1 | 	sub	objptr, ##27148
0207c     44 50 B2 FD | 	call	#__system___string_cmp
02080     00 FA 0D F2 | 	cmp	result1, #0 wz
02084     01 28 06 51 |  if_ne	add	local02, #1
02088     20 01 90 5D |  if_ne	jmp	#LR__0109
0208c     14 4D 02 F6 | 	mov	local20, local02
02090                 | LR__0105
02090     14 39 02 F6 | 	mov	local10, local02
02094     01 38 06 F1 | 	add	local10, #1
02098     03 38 66 F0 | 	shl	local10, #3
0209c     35 00 00 FF 
020a0     0C E4 05 F1 | 	add	objptr, ##27148
020a4     F2 38 02 F1 | 	add	local10, objptr
020a8     1C 4B 02 FB | 	rdlong	local19, local10
020ac     26 39 02 F6 | 	mov	local10, local20
020b0     03 38 66 F0 | 	shl	local10, #3
020b4     F2 38 02 F1 | 	add	local10, objptr
020b8     26 3B 02 F6 | 	mov	local11, local20
020bc     1D 41 02 F6 | 	mov	local14, local11
020c0     03 40 66 F0 | 	shl	local14, #3
020c4     F2 40 02 F1 | 	add	local14, objptr
020c8     20 13 02 FB | 	rdlong	arg01, local14
020cc     25 3D 02 F6 | 	mov	local12, local19
020d0     1E 15 02 F6 | 	mov	arg02, local12
020d4     35 00 00 FF 
020d8     0C E4 85 F1 | 	sub	objptr, ##27148
020dc     18 50 B2 FD | 	call	#__system___string_concat
020e0     1C FB 61 FC | 	wrlong	result1, local10
020e4     14 43 02 F6 | 	mov	local15, local02
020e8     01 42 06 F1 | 	add	local15, #1
020ec     23 4F 02 F6 | 	mov	local21, local17
020f0     01 4E 06 F1 | 	add	local21, #1
020f4     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
020f8                 | LR__0106
020f8     27 43 52 F2 | 	cmps	local15, local21 wc
020fc     70 00 90 3D |  if_ae	jmp	#LR__0108
02100     21 2F 02 F6 | 	mov	local05, local15
02104     01 2E 06 F1 | 	add	local05, #1
02108     03 2E 66 F0 | 	shl	local05, #3
0210c     35 00 00 FF 
02110     0C E4 05 F1 | 	add	objptr, ##27148
02114     F2 2E 02 F1 | 	add	local05, objptr
02118     17 2D 02 FB | 	rdlong	local04, local05
0211c     21 31 02 F6 | 	mov	local06, local15
02120     01 30 06 F1 | 	add	local06, #1
02124     03 30 66 F0 | 	shl	local06, #3
02128     F2 30 02 F1 | 	add	local06, objptr
0212c     04 30 06 F1 | 	add	local06, #4
02130     18 2B 02 FB | 	rdlong	local03, local06
02134     21 31 02 F6 | 	mov	local06, local15
02138     03 30 66 F0 | 	shl	local06, #3
0213c     F2 3C 02 F6 | 	mov	local12, objptr
02140     F2 30 02 F1 | 	add	local06, objptr
02144     18 2D 62 FC | 	wrlong	local04, local06
02148     21 3B 02 F6 | 	mov	local11, local15
0214c     1D 3F 02 F6 | 	mov	local13, local11
02150     03 3E 66 F0 | 	shl	local13, #3
02154     F2 3E 02 F1 | 	add	local13, objptr
02158     04 3E 06 F1 | 	add	local13, #4
0215c     1F 2B 62 FC | 	wrlong	local03, local13
02160     01 42 06 F1 | 	add	local15, #1
02164     35 00 00 FF 
02168     0C E4 85 F1 | 	sub	objptr, ##27148
0216c     88 FF 9F FD | 	jmp	#LR__0106
02170                 | LR__0107
02170                 | LR__0108
02170     01 46 86 F1 | 	sub	local17, #1
02174     B6 01 00 FF 
02178     4F 14 06 F6 | 	mov	arg02, ##@LR__5463
0217c     25 13 02 F6 | 	mov	arg01, local19
02180     40 4F B2 FD | 	call	#__system___string_cmp
02184     00 FA 0D F2 | 	cmp	result1, #0 wz
02188     23 29 52 52 |  if_ne	cmps	local02, local17 wc
0218c     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
02190                 | '   if p$<>"""" then k+=1:i+=1
02190     B6 01 00 FF 
02194     51 14 06 F6 | 	mov	arg02, ##@LR__5464
02198     25 13 02 F6 | 	mov	arg01, local19
0219c     24 4F B2 FD | 	call	#__system___string_cmp
021a0     00 FA 0D F2 | 	cmp	result1, #0 wz
021a4     01 46 06 51 |  if_ne	add	local17, #1
021a8     01 28 06 51 |  if_ne	add	local02, #1
021ac                 | LR__0109
021ac     23 29 52 F2 | 	cmps	local02, local17 wc
021b0     A0 FE 9F CD |  if_b	jmp	#LR__0104
021b4     00 28 06 F6 | 	mov	local02, #0
021b8                 | ' 
021b8                 | ' ' 1f : concatenate strings if "" detected between
021b8                 | '  
021b8                 | ' i=0
021b8                 | ' do
021b8                 | LR__0110
021b8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
021b8     14 2F 02 F6 | 	mov	local05, local02
021bc     03 2E 66 F0 | 	shl	local05, #3
021c0     35 00 00 FF 
021c4     0C E4 05 F1 | 	add	objptr, ##27148
021c8     F2 30 02 F6 | 	mov	local06, objptr
021cc     F2 2E 02 F1 | 	add	local05, objptr
021d0     17 13 02 FB | 	rdlong	arg01, local05
021d4     01 14 06 F6 | 	mov	arg02, #1
021d8     35 00 00 FF 
021dc     0C E4 85 F1 | 	sub	objptr, ##27148
021e0     C0 6F B2 FD | 	call	#__system__Right_S
021e4     FD 12 02 F6 | 	mov	arg01, result1
021e8     B6 01 00 FF 
021ec     53 14 06 F6 | 	mov	arg02, ##@LR__5465
021f0     D0 4E B2 FD | 	call	#__system___string_cmp
021f4     00 FA 0D F2 | 	cmp	result1, #0 wz
021f8     7C 01 90 5D |  if_ne	jmp	#LR__0116
021fc     14 31 02 F6 | 	mov	local06, local02
02200     01 30 06 F1 | 	add	local06, #1
02204     03 30 66 F0 | 	shl	local06, #3
02208     35 00 00 FF 
0220c     0C E4 05 F1 | 	add	objptr, ##27148
02210     F2 3C 02 F6 | 	mov	local12, objptr
02214     F2 30 02 F1 | 	add	local06, objptr
02218     18 13 02 FB | 	rdlong	arg01, local06
0221c     01 14 06 F6 | 	mov	arg02, #1
02220     35 00 00 FF 
02224     0C E4 85 F1 | 	sub	objptr, ##27148
02228     F0 6E B2 FD | 	call	#__system__Left_S
0222c     FD 12 02 F6 | 	mov	arg01, result1
02230     B6 01 00 FF 
02234     55 14 06 F6 | 	mov	arg02, ##@LR__5466
02238     88 4E B2 FD | 	call	#__system___string_cmp
0223c     00 FA 0D F2 | 	cmp	result1, #0 wz
02240     34 01 90 5D |  if_ne	jmp	#LR__0116
02244     14 39 02 F6 | 	mov	local10, local02
02248     03 38 66 F0 | 	shl	local10, #3
0224c     35 00 00 FF 
02250     0C E4 05 F1 | 	add	objptr, ##27148
02254     F2 38 02 F1 | 	add	local10, objptr
02258     14 41 02 F6 | 	mov	local14, local02
0225c     03 40 66 F0 | 	shl	local14, #3
02260     F2 40 02 F1 | 	add	local14, objptr
02264     20 31 02 FB | 	rdlong	local06, local14
02268     14 3F 02 F6 | 	mov	local13, local02
0226c     01 3E 06 F1 | 	add	local13, #1
02270     03 3E 66 F0 | 	shl	local13, #3
02274     F2 3E 02 F1 | 	add	local13, objptr
02278     1F 3D 02 FB | 	rdlong	local12, local13
0227c     14 51 02 F6 | 	mov	local22, local02
02280     01 50 06 F1 | 	add	local22, #1
02284     28 53 02 F6 | 	mov	local23, local22
02288     03 52 66 F0 | 	shl	local23, #3
0228c     F2 54 02 F6 | 	mov	local24, objptr
02290     F2 52 02 F1 | 	add	local23, objptr
02294     29 13 02 FB | 	rdlong	arg01, local23
02298     35 00 00 FF 
0229c     0C E4 85 F1 | 	sub	objptr, ##27148
022a0     09 33 02 F6 | 	mov	local07, arg01
022a4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
022a8                 | LR__0111
022a8     19 FB C9 FA | 	rdbyte	result1, local07 wz
022ac     01 32 06 51 |  if_ne	add	local07, #1
022b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
022b4                 | LR__0112
022b4     09 33 82 F1 | 	sub	local07, arg01
022b8     19 3B 02 F6 | 	mov	local11, local07
022bc     01 3A 86 F1 | 	sub	local11, #1
022c0     1E 13 02 F6 | 	mov	arg01, local12
022c4     1D 15 02 F6 | 	mov	arg02, local11
022c8     D8 6E B2 FD | 	call	#__system__Right_S
022cc     FD 3C 02 F6 | 	mov	local12, result1
022d0     18 13 02 F6 | 	mov	arg01, local06
022d4     1E 15 02 F6 | 	mov	arg02, local12
022d8     1C 4E B2 FD | 	call	#__system___string_concat
022dc     FD 30 02 F6 | 	mov	local06, result1
022e0     1C 31 62 FC | 	wrlong	local06, local10
022e4                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
022e4     14 43 02 F6 | 	mov	local15, local02
022e8     01 42 06 F1 | 	add	local15, #1
022ec     23 57 02 F6 | 	mov	local25, local17
022f0     01 56 06 F1 | 	add	local25, #1
022f4     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
022f8                 | LR__0113
022f8     2B 43 52 F2 | 	cmps	local15, local25 wc
022fc     70 00 90 3D |  if_ae	jmp	#LR__0115
02300     21 2F 02 F6 | 	mov	local05, local15
02304     01 2E 06 F1 | 	add	local05, #1
02308     03 2E 66 F0 | 	shl	local05, #3
0230c     35 00 00 FF 
02310     0C E4 05 F1 | 	add	objptr, ##27148
02314     F2 2E 02 F1 | 	add	local05, objptr
02318     17 2D 02 FB | 	rdlong	local04, local05
0231c     21 31 02 F6 | 	mov	local06, local15
02320     01 30 06 F1 | 	add	local06, #1
02324     03 30 66 F0 | 	shl	local06, #3
02328     F2 30 02 F1 | 	add	local06, objptr
0232c     04 30 06 F1 | 	add	local06, #4
02330     18 2B 02 FB | 	rdlong	local03, local06
02334     21 31 02 F6 | 	mov	local06, local15
02338     03 30 66 F0 | 	shl	local06, #3
0233c     F2 3C 02 F6 | 	mov	local12, objptr
02340     F2 30 02 F1 | 	add	local06, objptr
02344     18 2D 62 FC | 	wrlong	local04, local06
02348     21 3B 02 F6 | 	mov	local11, local15
0234c     1D 3F 02 F6 | 	mov	local13, local11
02350     03 3E 66 F0 | 	shl	local13, #3
02354     F2 3E 02 F1 | 	add	local13, objptr
02358     04 3E 06 F1 | 	add	local13, #4
0235c     1F 2B 62 FC | 	wrlong	local03, local13
02360     01 42 06 F1 | 	add	local15, #1
02364     35 00 00 FF 
02368     0C E4 85 F1 | 	sub	objptr, ##27148
0236c     88 FF 9F FD | 	jmp	#LR__0113
02370                 | LR__0114
02370                 | LR__0115
02370     01 28 86 F1 | 	sub	local02, #1
02374     01 46 86 F1 | 	sub	local17, #1
02378                 | LR__0116
02378     01 28 06 F1 | 	add	local02, #1
0237c     23 29 52 F2 | 	cmps	local02, local17 wc
02380     34 FE 9F CD |  if_b	jmp	#LR__0110
02384     00 28 06 F6 | 	mov	local02, #0
02388                 | '  
02388                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
02388                 | '  
02388                 | ' i=0 
02388                 | ' do
02388                 | LR__0117
02388     14 39 02 F6 | 	mov	local10, local02
0238c     03 38 66 F0 | 	shl	local10, #3
02390     35 00 00 FF 
02394     0C E4 05 F1 | 	add	objptr, ##27148
02398     F2 38 02 F1 | 	add	local10, objptr
0239c     1C 59 02 FB | 	rdlong	local26, local10
023a0     14 39 02 F6 | 	mov	local10, local02
023a4     01 38 06 F1 | 	add	local10, #1
023a8     03 38 66 F0 | 	shl	local10, #3
023ac     F2 38 02 F1 | 	add	local10, objptr
023b0     1C 5B 02 FB | 	rdlong	local27, local10
023b4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
023b4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
023b4     B6 01 00 FF 
023b8     57 14 06 F6 | 	mov	arg02, ##@LR__5467
023bc     2C 13 02 F6 | 	mov	arg01, local26
023c0     35 00 00 FF 
023c4     0C E4 85 F1 | 	sub	objptr, ##27148
023c8     F8 4C B2 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     A8 00 90 AD |  if_e	jmp	#LR__0118
023d4     B6 01 00 FF 
023d8     59 14 06 F6 | 	mov	arg02, ##@LR__5468
023dc     2C 13 02 F6 | 	mov	arg01, local26
023e0     E0 4C B2 FD | 	call	#__system___string_cmp
023e4     FD 2A 0A F6 | 	mov	local03, result1 wz
023e8     90 00 90 AD |  if_e	jmp	#LR__0118
023ec     B6 01 00 FF 
023f0     5B 30 06 F6 | 	mov	local06, ##@LR__5469
023f4     2C 13 02 F6 | 	mov	arg01, local26
023f8     18 15 02 F6 | 	mov	arg02, local06
023fc     C4 4C B2 FD | 	call	#__system___string_cmp
02400     00 FA 0D F2 | 	cmp	result1, #0 wz
02404     74 00 90 AD |  if_e	jmp	#LR__0118
02408     B6 01 00 FF 
0240c     5D 3C 06 F6 | 	mov	local12, ##@LR__5470
02410     2C 13 02 F6 | 	mov	arg01, local26
02414     1E 15 02 F6 | 	mov	arg02, local12
02418     A8 4C B2 FD | 	call	#__system___string_cmp
0241c     00 FA 0D F2 | 	cmp	result1, #0 wz
02420     58 00 90 AD |  if_e	jmp	#LR__0118
02424     B6 01 00 FF 
02428     5F 3A 06 F6 | 	mov	local11, ##@LR__5471
0242c     1D 3D 02 F6 | 	mov	local12, local11
02430     2C 13 02 F6 | 	mov	arg01, local26
02434     1E 15 02 F6 | 	mov	arg02, local12
02438     88 4C B2 FD | 	call	#__system___string_cmp
0243c     FD 30 0A F6 | 	mov	local06, result1 wz
02440     38 00 90 AD |  if_e	jmp	#LR__0118
02444     B6 01 00 FF 
02448     61 3A 06 F6 | 	mov	local11, ##@LR__5472
0244c     2C 13 02 F6 | 	mov	arg01, local26
02450     1D 15 02 F6 | 	mov	arg02, local11
02454     6C 4C B2 FD | 	call	#__system___string_cmp
02458     FD 3C 0A F6 | 	mov	local12, result1 wz
0245c     1C 00 90 AD |  if_e	jmp	#LR__0118
02460     B6 01 00 FF 
02464     63 40 06 F6 | 	mov	local14, ##@LR__5473
02468     2C 13 02 F6 | 	mov	arg01, local26
0246c     20 15 02 F6 | 	mov	arg02, local14
02470     50 4C B2 FD | 	call	#__system___string_cmp
02474     FD 3A 0A F6 | 	mov	local11, result1 wz
02478     20 00 90 5D |  if_ne	jmp	#LR__0119
0247c                 | LR__0118
0247c     B6 01 00 FF 
02480     65 5C 06 F6 | 	mov	local28, ##@LR__5474
02484     2E 3F 02 F6 | 	mov	local13, local28
02488     2D 13 02 F6 | 	mov	arg01, local27
0248c     1F 15 02 F6 | 	mov	arg02, local13
02490     30 4C B2 FD | 	call	#__system___string_cmp
02494     FD 40 0A F6 | 	mov	local14, result1 wz
02498     B8 00 90 AD |  if_e	jmp	#LR__0122
0249c                 | LR__0119
0249c     B6 01 00 FF 
024a0     67 5C 06 F6 | 	mov	local28, ##@LR__5475
024a4     2C 13 02 F6 | 	mov	arg01, local26
024a8     2E 15 02 F6 | 	mov	arg02, local28
024ac     14 4C B2 FD | 	call	#__system___string_cmp
024b0     FD 3E 0A F6 | 	mov	local13, result1 wz
024b4     20 00 90 5D |  if_ne	jmp	#LR__0120
024b8     B6 01 00 FF 
024bc     69 52 06 F6 | 	mov	local23, ##@LR__5476
024c0     29 51 02 F6 | 	mov	local22, local23
024c4     2D 13 02 F6 | 	mov	arg01, local27
024c8     28 15 02 F6 | 	mov	arg02, local22
024cc     F4 4B B2 FD | 	call	#__system___string_cmp
024d0     FD 5C 0A F6 | 	mov	local28, result1 wz
024d4     7C 00 90 AD |  if_e	jmp	#LR__0122
024d8                 | LR__0120
024d8     B6 01 00 FF 
024dc     6B 52 06 F6 | 	mov	local23, ##@LR__5477
024e0     2C 13 02 F6 | 	mov	arg01, local26
024e4     29 15 02 F6 | 	mov	arg02, local23
024e8     D8 4B B2 FD | 	call	#__system___string_cmp
024ec     FD 50 0A F6 | 	mov	local22, result1 wz
024f0     20 00 90 5D |  if_ne	jmp	#LR__0121
024f4     B6 01 00 FF 
024f8     6D 5E 06 F6 | 	mov	local29, ##@LR__5478
024fc     2F 55 02 F6 | 	mov	local24, local29
02500     2D 13 02 F6 | 	mov	arg01, local27
02504     2A 15 02 F6 | 	mov	arg02, local24
02508     B8 4B B2 FD | 	call	#__system___string_cmp
0250c     FD 52 0A F6 | 	mov	local23, result1 wz
02510     40 00 90 AD |  if_e	jmp	#LR__0122
02514                 | LR__0121
02514     B6 01 00 FF 
02518     6F 60 06 F6 | 	mov	local30, ##@LR__5479
0251c     30 5F 02 F6 | 	mov	local29, local30
02520     2C 13 02 F6 | 	mov	arg01, local26
02524     2F 15 02 F6 | 	mov	arg02, local29
02528     98 4B B2 FD | 	call	#__system___string_cmp
0252c     FD 54 0A F6 | 	mov	local24, result1 wz
02530     F0 00 90 5D |  if_ne	jmp	#LR__0126
02534     B6 01 00 FF 
02538     71 62 06 F6 | 	mov	local31, ##@LR__5480
0253c     31 61 02 F6 | 	mov	local30, local31
02540     2D 13 02 F6 | 	mov	arg01, local27
02544     30 15 02 F6 | 	mov	arg02, local30
02548     78 4B B2 FD | 	call	#__system___string_cmp
0254c     FD 5E 0A F6 | 	mov	local29, result1 wz
02550     D0 00 90 5D |  if_ne	jmp	#LR__0126
02554                 | LR__0122
02554     14 39 02 F6 | 	mov	local10, local02
02558     03 38 66 F0 | 	shl	local10, #3
0255c     35 00 00 FF 
02560     0C E4 05 F1 | 	add	objptr, ##27148
02564     F2 38 02 F1 | 	add	local10, objptr
02568     2D 3D 02 F6 | 	mov	local12, local27
0256c     2C 13 02 F6 | 	mov	arg01, local26
02570     1E 15 02 F6 | 	mov	arg02, local12
02574     35 00 00 FF 
02578     0C E4 85 F1 | 	sub	objptr, ##27148
0257c     78 4B B2 FD | 	call	#__system___string_concat
02580     1C FB 61 FC | 	wrlong	result1, local10
02584                 | '     lparts(i).part$=s1$+s2$
02584                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02584     14 43 02 F6 | 	mov	local15, local02
02588     01 42 06 F1 | 	add	local15, #1
0258c     23 65 02 F6 | 	mov	local32, local17
02590     01 64 06 F1 | 	add	local32, #1
02594     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
02598                 | LR__0123
02598     32 43 52 F2 | 	cmps	local15, local32 wc
0259c     7C 00 90 3D |  if_ae	jmp	#LR__0125
025a0     21 2F 02 F6 | 	mov	local05, local15
025a4     01 2E 06 F1 | 	add	local05, #1
025a8     03 2E 66 F0 | 	shl	local05, #3
025ac     35 00 00 FF 
025b0     0C E4 05 F1 | 	add	objptr, ##27148
025b4     F2 2E 02 F1 | 	add	local05, objptr
025b8     17 2D 02 FB | 	rdlong	local04, local05
025bc     21 31 02 F6 | 	mov	local06, local15
025c0     01 30 06 F1 | 	add	local06, #1
025c4     03 30 66 F0 | 	shl	local06, #3
025c8     F2 30 02 F1 | 	add	local06, objptr
025cc     04 30 06 F1 | 	add	local06, #4
025d0     18 2B 02 FB | 	rdlong	local03, local06
025d4     21 31 02 F6 | 	mov	local06, local15
025d8     03 30 66 F0 | 	shl	local06, #3
025dc     F2 3C 02 F6 | 	mov	local12, objptr
025e0     F2 30 02 F1 | 	add	local06, objptr
025e4     18 2D 62 FC | 	wrlong	local04, local06
025e8     21 3B 02 F6 | 	mov	local11, local15
025ec     1D 41 02 F6 | 	mov	local14, local11
025f0     20 3F 02 F6 | 	mov	local13, local14
025f4     03 3E 66 F0 | 	shl	local13, #3
025f8     F2 5C 02 F6 | 	mov	local28, objptr
025fc     F2 3E 02 F1 | 	add	local13, objptr
02600     04 3E 06 F1 | 	add	local13, #4
02604     1F 2B 62 FC | 	wrlong	local03, local13
02608     04 3E 86 F1 | 	sub	local13, #4
0260c     01 42 06 F1 | 	add	local15, #1
02610     35 00 00 FF 
02614     0C E4 85 F1 | 	sub	objptr, ##27148
02618     7C FF 9F FD | 	jmp	#LR__0123
0261c                 | LR__0124
0261c                 | LR__0125
0261c     01 28 86 F1 | 	sub	local02, #1
02620     01 46 86 F1 | 	sub	local17, #1
02624                 | LR__0126
02624     01 28 06 F1 | 	add	local02, #1
02628     23 29 52 F2 | 	cmps	local02, local17 wc
0262c     58 FD 9F CD |  if_b	jmp	#LR__0117
02630                 | '  
02630                 | ' ' 1h : now remove parts that are spaces
02630                 | ' 
02630                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02630     00 28 06 F6 | 	mov	local02, #0
02634     23 67 02 F6 | 	mov	local33, local17
02638     01 66 06 F1 | 	add	local33, #1
0263c                 | LR__0127
0263c     33 29 52 F2 | 	cmps	local02, local33 wc
02640     50 00 90 3D |  if_ae	jmp	#LR__0128
02644     14 39 02 F6 | 	mov	local10, local02
02648     03 38 66 F0 | 	shl	local10, #3
0264c     35 00 00 FF 
02650     0C E4 05 F1 | 	add	objptr, ##27148
02654     F2 38 02 F1 | 	add	local10, objptr
02658     14 3D 02 F6 | 	mov	local12, local02
0265c     1E 3B 02 F6 | 	mov	local11, local12
02660     1D 41 02 F6 | 	mov	local14, local11
02664     03 40 66 F0 | 	shl	local14, #3
02668     F2 3E 02 F6 | 	mov	local13, objptr
0266c     F2 40 02 F1 | 	add	local14, objptr
02670     20 13 02 FB | 	rdlong	arg01, local14
02674     35 00 00 FF 
02678     0C E4 85 F1 | 	sub	objptr, ##27148
0267c     2C 6F B2 FD | 	call	#__system__RTrim_S
02680     FD 12 02 F6 | 	mov	arg01, result1
02684     64 6E B2 FD | 	call	#__system__LTrim_S
02688     1C FB 61 FC | 	wrlong	result1, local10
0268c     01 28 06 F1 | 	add	local02, #1
02690     A8 FF 9F FD | 	jmp	#LR__0127
02694                 | LR__0128
02694     00 28 06 F6 | 	mov	local02, #0
02698     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
0269c                 | ' i=0
0269c                 | ' do 
0269c                 | LR__0129
0269c                 | '   if len(lparts(i).part$)=0 then 
0269c     14 2F 02 F6 | 	mov	local05, local02
026a0     03 2E 66 F0 | 	shl	local05, #3
026a4     35 00 00 FF 
026a8     0C E4 05 F1 | 	add	objptr, ##27148
026ac     F2 2E 02 F1 | 	add	local05, objptr
026b0     17 13 02 FB | 	rdlong	arg01, local05
026b4     35 00 00 FF 
026b8     0C E4 85 F1 | 	sub	objptr, ##27148
026bc     09 33 02 F6 | 	mov	local07, arg01
026c0                 | LR__0130
026c0     19 FB C9 FA | 	rdbyte	result1, local07 wz
026c4     01 32 06 51 |  if_ne	add	local07, #1
026c8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
026cc     09 33 8A F1 | 	sub	local07, arg01 wz
026d0     C4 00 90 5D |  if_ne	jmp	#LR__0134
026d4                 | '     if i=k-1 then k-=1  :  exit
026d4     23 2D 02 F6 | 	mov	local04, local17
026d8     01 2C 86 F1 | 	sub	local04, #1
026dc     16 29 0A F2 | 	cmp	local02, local04 wz
026e0     01 46 86 A1 |  if_e	sub	local17, #1
026e4     C4 00 90 AD |  if_e	jmp	#LR__0136
026e8                 | '     if i<k-1 then 
026e8     23 2D 02 F6 | 	mov	local04, local17
026ec     01 2C 86 F1 | 	sub	local04, #1
026f0     16 29 52 F2 | 	cmps	local02, local04 wc
026f4     A0 00 90 3D |  if_ae	jmp	#LR__0133
026f8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
026f8     14 43 02 F6 | 	mov	local15, local02
026fc     23 69 02 F6 | 	mov	local34, local17
02700     01 68 86 F1 | 	sub	local34, #1
02704                 | LR__0131
02704     34 43 52 F2 | 	cmps	local15, local34 wc
02708     80 00 90 3D |  if_ae	jmp	#LR__0132
0270c     21 2F 02 F6 | 	mov	local05, local15
02710     01 2E 06 F1 | 	add	local05, #1
02714     03 2E 66 F0 | 	shl	local05, #3
02718     35 00 00 FF 
0271c     0C E4 05 F1 | 	add	objptr, ##27148
02720     F2 2E 02 F1 | 	add	local05, objptr
02724     17 2D 02 FB | 	rdlong	local04, local05
02728     21 31 02 F6 | 	mov	local06, local15
0272c     01 30 06 F1 | 	add	local06, #1
02730     03 30 66 F0 | 	shl	local06, #3
02734     F2 30 02 F1 | 	add	local06, objptr
02738     04 30 06 F1 | 	add	local06, #4
0273c     18 2B 02 FB | 	rdlong	local03, local06
02740     21 39 02 F6 | 	mov	local10, local15
02744     1C 31 02 F6 | 	mov	local06, local10
02748     03 30 66 F0 | 	shl	local06, #3
0274c     F2 3C 02 F6 | 	mov	local12, objptr
02750     F2 30 02 F1 | 	add	local06, objptr
02754     18 2D 62 FC | 	wrlong	local04, local06
02758     21 3B 02 F6 | 	mov	local11, local15
0275c     1D 41 02 F6 | 	mov	local14, local11
02760     20 3F 02 F6 | 	mov	local13, local14
02764     03 3E 66 F0 | 	shl	local13, #3
02768     F2 5C 02 F6 | 	mov	local28, objptr
0276c     F2 3E 02 F1 | 	add	local13, objptr
02770     04 3E 06 F1 | 	add	local13, #4
02774     1F 2B 62 FC | 	wrlong	local03, local13
02778     04 3E 86 F1 | 	sub	local13, #4
0277c     01 42 06 F1 | 	add	local15, #1
02780     35 00 00 FF 
02784     0C E4 85 F1 | 	sub	objptr, ##27148
02788     78 FF 9F FD | 	jmp	#LR__0131
0278c                 | LR__0132
0278c     01 46 86 F1 | 	sub	local17, #1
02790                 | '       if i>0 then i-=1 
02790     01 28 56 F2 | 	cmps	local02, #1 wc
02794     01 28 86 31 |  if_ae	sub	local02, #1
02798                 | LR__0133
02798                 | LR__0134
02798     01 28 06 F1 | 	add	local02, #1
0279c     23 2D 02 F6 | 	mov	local04, local17
027a0     01 2C 86 F1 | 	sub	local04, #1
027a4     16 29 5A F2 | 	cmps	local02, local04 wcz
027a8     F0 FE 9F ED |  if_be	jmp	#LR__0129
027ac                 | LR__0135
027ac                 | LR__0136
027ac                 | ' 
027ac                 | ' ' 1i: lowercase all that is not a string
027ac                 | ' 
027ac                 | ' for j=0 to k-1
027ac     00 42 06 F6 | 	mov	local15, #0
027b0     23 6B 02 F6 | 	mov	local35, local17
027b4                 | LR__0137
027b4     35 43 52 F2 | 	cmps	local15, local35 wc
027b8     CC 00 90 3D |  if_ae	jmp	#LR__0140
027bc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
027bc     21 2F 02 F6 | 	mov	local05, local15
027c0     03 2E 66 F0 | 	shl	local05, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 2E 02 F1 | 	add	local05, objptr
027d0     17 13 02 FB | 	rdlong	arg01, local05
027d4     01 14 06 F6 | 	mov	arg02, #1
027d8     35 00 00 FF 
027dc     0C E4 85 F1 | 	sub	objptr, ##27148
027e0     38 69 B2 FD | 	call	#__system__Left_S
027e4     FD 12 02 F6 | 	mov	arg01, result1
027e8     B6 01 00 FF 
027ec     73 14 06 F6 | 	mov	arg02, ##@LR__5481
027f0     D0 48 B2 FD | 	call	#__system___string_cmp
027f4     00 FA 0D F2 | 	cmp	result1, #0 wz
027f8     44 00 90 5D |  if_ne	jmp	#LR__0138
027fc     21 31 02 F6 | 	mov	local06, local15
02800     03 30 66 F0 | 	shl	local06, #3
02804     35 00 00 FF 
02808     0C E4 05 F1 | 	add	objptr, ##27148
0280c     F2 3C 02 F6 | 	mov	local12, objptr
02810     F2 30 02 F1 | 	add	local06, objptr
02814     18 13 02 FB | 	rdlong	arg01, local06
02818     01 14 06 F6 | 	mov	arg02, #1
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     7C 69 B2 FD | 	call	#__system__Right_S
02828     FD 12 02 F6 | 	mov	arg01, result1
0282c     B6 01 00 FF 
02830     75 14 06 F6 | 	mov	arg02, ##@LR__5482
02834     8C 48 B2 FD | 	call	#__system___string_cmp
02838     00 FA 0D F2 | 	cmp	result1, #0 wz
0283c     40 00 90 AD |  if_e	jmp	#LR__0139
02840                 | LR__0138
02840     21 39 02 F6 | 	mov	local10, local15
02844     03 38 66 F0 | 	shl	local10, #3
02848     35 00 00 FF 
0284c     0C E4 05 F1 | 	add	objptr, ##27148
02850     F2 38 02 F1 | 	add	local10, objptr
02854     21 3D 02 F6 | 	mov	local12, local15
02858     1E 3B 02 F6 | 	mov	local11, local12
0285c     1D 41 02 F6 | 	mov	local14, local11
02860     03 40 66 F0 | 	shl	local14, #3
02864     F2 3E 02 F6 | 	mov	local13, objptr
02868     F2 40 02 F1 | 	add	local14, objptr
0286c     20 13 02 FB | 	rdlong	arg01, local14
02870     35 00 00 FF 
02874     0C E4 85 F1 | 	sub	objptr, ##27148
02878     B0 6B B2 FD | 	call	#__system__LCase_S
0287c     1C FB 61 FC | 	wrlong	result1, local10
02880                 | LR__0139
02880     01 42 06 F1 | 	add	local15, #1
02884     2C FF 9F FD | 	jmp	#LR__0137
02888                 | LR__0140
02888                 | ' 
02888                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
02888                 | ' 
02888                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
02888     00 28 06 F6 | 	mov	local02, #0
0288c     23 6D 02 F6 | 	mov	local36, local17
02890     01 6C 06 F1 | 	add	local36, #1
02894     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
02898                 | LR__0141
02898     36 29 52 F2 | 	cmps	local02, local36 wc
0289c     30 00 90 3D |  if_ae	jmp	#LR__0143
028a0     14 39 02 F6 | 	mov	local10, local02
028a4     03 38 66 F0 | 	shl	local10, #3
028a8     35 00 00 FF 
028ac     0C E4 05 F1 | 	add	objptr, ##27148
028b0     F2 38 02 F1 | 	add	local10, objptr
028b4     04 38 06 F1 | 	add	local10, #4
028b8     FF FF FF FF 
028bc     1C FF 6B FC | 	wrlong	##-1, local10
028c0     01 28 06 F1 | 	add	local02, #1
028c4     35 00 00 FF 
028c8     0C E4 85 F1 | 	sub	objptr, ##27148
028cc     C8 FF 9F FD | 	jmp	#LR__0141
028d0                 | LR__0142
028d0                 | LR__0143
028d0                 | ' 
028d0                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 12 02 FB | 	rdlong	arg01, objptr
028dc     35 00 00 FF 
028e0     0C E4 85 F1 | 	sub	objptr, ##27148
028e4     18 47 B0 FD | 	call	#_isdec
028e8     00 FA 0D F2 | 	cmp	result1, #0 wz
028ec     01 6E 06 56 |  if_ne	mov	local37, #1
028f0     00 6E 06 A6 |  if_e	mov	local37, #0
028f4                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
028f4     35 00 00 FF 
028f8     0C E4 05 F1 | 	add	objptr, ##27148
028fc     F2 12 02 FB | 	rdlong	arg01, objptr
02900     35 00 00 FF 
02904     0C E4 85 F1 | 	sub	objptr, ##27148
02908     B6 01 00 FF 
0290c     77 14 06 F6 | 	mov	arg02, ##@LR__5483
02910     B0 47 B2 FD | 	call	#__system___string_cmp
02914     00 FA 0D F2 | 	cmp	result1, #0 wz
02918     01 6E 06 A6 |  if_e	mov	local37, #1
0291c     00 28 06 F6 | 	mov	local02, #0
02920                 | ' i=0 : do 
02920                 | LR__0144
02920                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02920     14 2F 02 F6 | 	mov	local05, local02
02924     03 2E 66 F0 | 	shl	local05, #3
02928     35 00 00 FF 
0292c     0C E4 05 F1 | 	add	objptr, ##27148
02930     F2 2E 02 F1 | 	add	local05, objptr
02934     17 13 02 FB | 	rdlong	arg01, local05
02938     B6 01 00 FF 
0293c     7C 14 06 F6 | 	mov	arg02, ##@LR__5484
02940     35 00 00 FF 
02944     0C E4 85 F1 | 	sub	objptr, ##27148
02948     78 47 B2 FD | 	call	#__system___string_cmp
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     0C 00 90 AD |  if_e	jmp	#LR__0145
02954     01 28 06 F1 | 	add	local02, #1
02958     23 29 5A F2 | 	cmps	local02, local17 wcz
0295c     C0 FF 9F ED |  if_be	jmp	#LR__0144
02960                 | LR__0145
02960                 | ' if i<k then addptr=i+1	 							' then found
02960     23 29 52 F2 | 	cmps	local02, local17 wc
02964     14 6F 02 C6 |  if_b	mov	local37, local02
02968     01 6E 06 C1 |  if_b	add	local37, #1
0296c     35 00 00 FF 
02970     0C E4 05 F1 | 	add	objptr, ##27148
02974                 | ' lp$=lparts(addptr).part$ 
02974                 | ' 
02974                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02974     37 2F 02 F6 | 	mov	local05, local37
02978     03 2E 66 F0 | 	shl	local05, #3
0297c     F2 2E 02 F1 | 	add	local05, objptr
02980     17 13 02 FB | 	rdlong	arg01, local05
02984     01 14 06 F6 | 	mov	arg02, #1
02988     35 00 00 FF 
0298c     0C E4 85 F1 | 	sub	objptr, ##27148
02990     88 67 B2 FD | 	call	#__system__Left_S
02994     FD 12 02 F6 | 	mov	arg01, result1
02998     B6 01 00 FF 
0299c     81 14 06 F6 | 	mov	arg02, ##@LR__5485
029a0     20 47 B2 FD | 	call	#__system___string_cmp
029a4     00 FA 0D F2 | 	cmp	result1, #0 wz
029a8     60 01 90 5D |  if_ne	jmp	#LR__0152
029ac     37 31 02 F6 | 	mov	local06, local37
029b0     03 30 66 F0 | 	shl	local06, #3
029b4     35 00 00 FF 
029b8     0C E4 05 F1 | 	add	objptr, ##27148
029bc     F2 30 02 F1 | 	add	local06, objptr
029c0     18 13 02 FB | 	rdlong	arg01, local06
029c4     35 00 00 FF 
029c8     0C E4 85 F1 | 	sub	objptr, ##27148
029cc     09 33 02 F6 | 	mov	local07, arg01
029d0     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
029d4                 | LR__0146
029d4     19 FB C9 FA | 	rdbyte	result1, local07 wz
029d8     01 32 06 51 |  if_ne	add	local07, #1
029dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
029e0                 | LR__0147
029e0     09 33 82 F1 | 	sub	local07, arg01
029e4     02 32 56 F2 | 	cmps	local07, #2 wc
029e8     20 01 90 CD |  if_b	jmp	#LR__0152
029ec     01 46 06 F1 | 	add	local17, #1
029f0                 | '   k+=1
029f0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
029f0     23 29 02 F6 | 	mov	local02, local17
029f4     37 71 02 F6 | 	mov	local38, local37
029f8     01 70 06 F1 | 	add	local38, #1
029fc     35 00 00 FF 
02a00     0C E4 05 F1 | 	add	objptr, ##27148
02a04     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02a08                 | LR__0148
02a08     14 2F 02 F6 | 	mov	local05, local02
02a0c     01 2E 86 F1 | 	sub	local05, #1
02a10     03 2E 66 F0 | 	shl	local05, #3
02a14     F2 2E 02 F1 | 	add	local05, objptr
02a18     17 2D 02 FB | 	rdlong	local04, local05
02a1c     14 31 02 F6 | 	mov	local06, local02
02a20     01 30 86 F1 | 	sub	local06, #1
02a24     03 30 66 F0 | 	shl	local06, #3
02a28     F2 30 02 F1 | 	add	local06, objptr
02a2c     04 30 06 F1 | 	add	local06, #4
02a30     18 2B 02 FB | 	rdlong	local03, local06
02a34     14 31 02 F6 | 	mov	local06, local02
02a38     03 30 66 F0 | 	shl	local06, #3
02a3c     F2 30 02 F1 | 	add	local06, objptr
02a40     18 2D 62 FC | 	wrlong	local04, local06
02a44     14 3F 02 F6 | 	mov	local13, local02
02a48     03 3E 66 F0 | 	shl	local13, #3
02a4c     F2 3E 02 F1 | 	add	local13, objptr
02a50     04 3E 06 F1 | 	add	local13, #4
02a54     1F 2B 62 FC | 	wrlong	local03, local13
02a58     01 28 86 F1 | 	sub	local02, #1
02a5c     38 29 52 F2 | 	cmps	local02, local38 wc
02a60     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02a64                 | LR__0149
02a64     37 39 02 F6 | 	mov	local10, local37
02a68     01 38 06 F1 | 	add	local10, #1
02a6c     03 38 66 F0 | 	shl	local10, #3
02a70     F2 38 02 F1 | 	add	local10, objptr
02a74     37 41 02 F6 | 	mov	local14, local37
02a78     03 40 66 F0 | 	shl	local14, #3
02a7c     F2 40 02 F1 | 	add	local14, objptr
02a80     20 31 02 FB | 	rdlong	local06, local14
02a84     37 3F 02 F6 | 	mov	local13, local37
02a88     1F 5D 02 F6 | 	mov	local28, local13
02a8c     2E 51 02 F6 | 	mov	local22, local28
02a90     03 50 66 F0 | 	shl	local22, #3
02a94     F2 52 02 F6 | 	mov	local23, objptr
02a98     F2 50 02 F1 | 	add	local22, objptr
02a9c     28 13 02 FB | 	rdlong	arg01, local22
02aa0     35 00 00 FF 
02aa4     0C E4 85 F1 | 	sub	objptr, ##27148
02aa8     09 33 02 F6 | 	mov	local07, arg01
02aac     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02ab0                 | LR__0150
02ab0     19 FB C9 FA | 	rdbyte	result1, local07 wz
02ab4     01 32 06 51 |  if_ne	add	local07, #1
02ab8     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02abc                 | LR__0151
02abc     09 33 82 F1 | 	sub	local07, arg01
02ac0     19 41 02 F6 | 	mov	local14, local07
02ac4     20 3B 02 F6 | 	mov	local11, local14
02ac8     01 3A 86 F1 | 	sub	local11, #1
02acc     1D 3D 02 F6 | 	mov	local12, local11
02ad0     18 13 02 F6 | 	mov	arg01, local06
02ad4     1E 15 02 F6 | 	mov	arg02, local12
02ad8     C8 66 B2 FD | 	call	#__system__Right_S
02adc     1C FB 61 FC | 	wrlong	result1, local10
02ae0     37 39 02 F6 | 	mov	local10, local37
02ae4     03 38 66 F0 | 	shl	local10, #3
02ae8     35 00 00 FF 
02aec     0C E4 05 F1 | 	add	objptr, ##27148
02af0     F2 38 02 F1 | 	add	local10, objptr
02af4     B6 01 00 FF 
02af8     83 30 06 F6 | 	mov	local06, ##@LR__5486
02afc     1C 31 62 FC | 	wrlong	local06, local10
02b00     35 00 00 FF 
02b04     0C E4 85 F1 | 	sub	objptr, ##27148
02b08     A8 01 90 FD | 	jmp	#LR__0160
02b0c                 | LR__0152
02b0c     37 31 02 F6 | 	mov	local06, local37
02b10     03 30 66 F0 | 	shl	local06, #3
02b14     35 00 00 FF 
02b18     0C E4 05 F1 | 	add	objptr, ##27148
02b1c     F2 3C 02 F6 | 	mov	local12, objptr
02b20     F2 30 02 F1 | 	add	local06, objptr
02b24     18 15 02 FB | 	rdlong	arg02, local06
02b28     B6 01 00 FF 
02b2c     85 16 06 F6 | 	mov	arg03, ##@LR__5487
02b30     01 12 06 F6 | 	mov	arg01, #1
02b34     35 00 00 FF 
02b38     0C E4 85 F1 | 	sub	objptr, ##27148
02b3c     24 6B B2 FD | 	call	#__system__Instr
02b40     FD 72 02 F6 | 	mov	local39, result1
02b44                 | ' 
02b44                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02b44                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02b44     01 72 56 F2 | 	cmps	local39, #1 wc
02b48     68 01 90 CD |  if_b	jmp	#LR__0159
02b4c     37 2F 02 F6 | 	mov	local05, local37
02b50     03 2E 66 F0 | 	shl	local05, #3
02b54     35 00 00 FF 
02b58     0C E4 05 F1 | 	add	objptr, ##27148
02b5c     F2 2E 02 F1 | 	add	local05, objptr
02b60     17 13 02 FB | 	rdlong	arg01, local05
02b64     35 00 00 FF 
02b68     0C E4 85 F1 | 	sub	objptr, ##27148
02b6c     09 33 02 F6 | 	mov	local07, arg01
02b70     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02b74                 | LR__0153
02b74     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b78     01 32 06 51 |  if_ne	add	local07, #1
02b7c     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02b80                 | LR__0154
02b80     09 33 82 F1 | 	sub	local07, arg01
02b84     19 73 52 F2 | 	cmps	local39, local07 wc
02b88     28 01 90 3D |  if_ae	jmp	#LR__0159
02b8c     01 46 06 F1 | 	add	local17, #1
02b90                 | '   k+=1
02b90                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02b90     23 29 02 F6 | 	mov	local02, local17
02b94     37 75 02 F6 | 	mov	local40, local37
02b98     01 74 06 F1 | 	add	local40, #1
02b9c     35 00 00 FF 
02ba0     0C E4 05 F1 | 	add	objptr, ##27148
02ba4     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ba8                 | LR__0155
02ba8     14 2F 02 F6 | 	mov	local05, local02
02bac     01 2E 86 F1 | 	sub	local05, #1
02bb0     03 2E 66 F0 | 	shl	local05, #3
02bb4     F2 2E 02 F1 | 	add	local05, objptr
02bb8     17 2D 02 FB | 	rdlong	local04, local05
02bbc     14 31 02 F6 | 	mov	local06, local02
02bc0     01 30 86 F1 | 	sub	local06, #1
02bc4     03 30 66 F0 | 	shl	local06, #3
02bc8     F2 30 02 F1 | 	add	local06, objptr
02bcc     04 30 06 F1 | 	add	local06, #4
02bd0     18 2B 02 FB | 	rdlong	local03, local06
02bd4     14 31 02 F6 | 	mov	local06, local02
02bd8     03 30 66 F0 | 	shl	local06, #3
02bdc     F2 30 02 F1 | 	add	local06, objptr
02be0     18 2D 62 FC | 	wrlong	local04, local06
02be4     14 3F 02 F6 | 	mov	local13, local02
02be8     03 3E 66 F0 | 	shl	local13, #3
02bec     F2 3E 02 F1 | 	add	local13, objptr
02bf0     04 3E 06 F1 | 	add	local13, #4
02bf4     1F 2B 62 FC | 	wrlong	local03, local13
02bf8     01 28 86 F1 | 	sub	local02, #1
02bfc     3A 29 52 F2 | 	cmps	local02, local40 wc
02c00     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02c04                 | LR__0156
02c04     37 39 02 F6 | 	mov	local10, local37
02c08     01 38 06 F1 | 	add	local10, #1
02c0c     03 38 66 F0 | 	shl	local10, #3
02c10     F2 38 02 F1 | 	add	local10, objptr
02c14     37 41 02 F6 | 	mov	local14, local37
02c18     03 40 66 F0 | 	shl	local14, #3
02c1c     F2 40 02 F1 | 	add	local14, objptr
02c20     20 31 02 FB | 	rdlong	local06, local14
02c24     37 5D 02 F6 | 	mov	local28, local37
02c28     2E 51 02 F6 | 	mov	local22, local28
02c2c     03 50 66 F0 | 	shl	local22, #3
02c30     F2 52 02 F6 | 	mov	local23, objptr
02c34     F2 50 02 F1 | 	add	local22, objptr
02c38     28 13 02 FB | 	rdlong	arg01, local22
02c3c     35 00 00 FF 
02c40     0C E4 85 F1 | 	sub	objptr, ##27148
02c44     09 33 02 F6 | 	mov	local07, arg01
02c48     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02c4c                 | LR__0157
02c4c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02c50     01 32 06 51 |  if_ne	add	local07, #1
02c54     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02c58                 | LR__0158
02c58     09 33 82 F1 | 	sub	local07, arg01
02c5c     19 15 02 F6 | 	mov	arg02, local07
02c60     39 15 82 F1 | 	sub	arg02, local39
02c64     18 13 02 F6 | 	mov	arg01, local06
02c68     38 65 B2 FD | 	call	#__system__Right_S
02c6c     1C FB 61 FC | 	wrlong	result1, local10
02c70     37 39 02 F6 | 	mov	local10, local37
02c74     03 38 66 F0 | 	shl	local10, #3
02c78     35 00 00 FF 
02c7c     0C E4 05 F1 | 	add	objptr, ##27148
02c80     F2 38 02 F1 | 	add	local10, objptr
02c84     37 3B 02 F6 | 	mov	local11, local37
02c88     1D 41 02 F6 | 	mov	local14, local11
02c8c     03 40 66 F0 | 	shl	local14, #3
02c90     F2 3E 02 F6 | 	mov	local13, objptr
02c94     F2 40 02 F1 | 	add	local14, objptr
02c98     20 13 02 FB | 	rdlong	arg01, local14
02c9c     39 3D 02 F6 | 	mov	local12, local39
02ca0     1E 15 02 F6 | 	mov	arg02, local12
02ca4     35 00 00 FF 
02ca8     0C E4 85 F1 | 	sub	objptr, ##27148
02cac     6C 64 B2 FD | 	call	#__system__Left_S
02cb0     1C FB 61 FC | 	wrlong	result1, local10
02cb4                 | LR__0159
02cb4                 | LR__0160
02cb4     37 39 02 F6 | 	mov	local10, local37
02cb8     03 38 66 F0 | 	shl	local10, #3
02cbc     35 00 00 FF 
02cc0     0C E4 05 F1 | 	add	objptr, ##27148
02cc4     F2 38 02 F1 | 	add	local10, objptr
02cc8     1C 77 02 FB | 	rdlong	local41, local10
02ccc                 | ' 
02ccc                 | ' 825
02ccc                 | ' lp$=lparts(addptr).part$ 
02ccc                 | ' 
02ccc                 | ' ' process mouse/cursor/click on/off
02ccc                 | ' 
02ccc                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02ccc     B6 01 00 FF 
02cd0     87 14 06 F6 | 	mov	arg02, ##@LR__5488
02cd4     3B 13 02 F6 | 	mov	arg01, local41
02cd8     35 00 00 FF 
02cdc     0C E4 85 F1 | 	sub	objptr, ##27148
02ce0     E0 43 B2 FD | 	call	#__system___string_cmp
02ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce8     30 00 90 AD |  if_e	jmp	#LR__0161
02cec     B6 01 00 FF 
02cf0     8D 14 06 F6 | 	mov	arg02, ##@LR__5489
02cf4     3B 13 02 F6 | 	mov	arg01, local41
02cf8     C8 43 B2 FD | 	call	#__system___string_cmp
02cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02d00     18 00 90 AD |  if_e	jmp	#LR__0161
02d04     B6 01 00 FF 
02d08     94 14 06 F6 | 	mov	arg02, ##@LR__5490
02d0c     3B 13 02 F6 | 	mov	arg01, local41
02d10     B0 43 B2 FD | 	call	#__system___string_cmp
02d14     00 FA 0D F2 | 	cmp	result1, #0 wz
02d18     E0 00 90 5D |  if_ne	jmp	#LR__0164
02d1c                 | LR__0161
02d1c                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02d1c     37 2F 02 F6 | 	mov	local05, local37
02d20     01 2E 06 F1 | 	add	local05, #1
02d24     03 2E 66 F0 | 	shl	local05, #3
02d28     35 00 00 FF 
02d2c     0C E4 05 F1 | 	add	objptr, ##27148
02d30     F2 2E 02 F1 | 	add	local05, objptr
02d34     17 13 02 FB | 	rdlong	arg01, local05
02d38     B6 01 00 FF 
02d3c     9A 14 06 F6 | 	mov	arg02, ##@LR__5491
02d40     35 00 00 FF 
02d44     0C E4 85 F1 | 	sub	objptr, ##27148
02d48     78 43 B2 FD | 	call	#__system___string_cmp
02d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d50     38 00 90 5D |  if_ne	jmp	#LR__0162
02d54     37 39 02 F6 | 	mov	local10, local37
02d58     01 38 06 F1 | 	add	local10, #1
02d5c     03 38 66 F0 | 	shl	local10, #3
02d60     35 00 00 FF 
02d64     0C E4 05 F1 | 	add	objptr, ##27148
02d68     F2 38 02 F1 | 	add	local10, objptr
02d6c     B6 01 00 FF 
02d70     9D 30 06 F6 | 	mov	local06, ##@LR__5492
02d74     1C 31 62 FC | 	wrlong	local06, local10
02d78     14 E4 05 F1 | 	add	objptr, #20
02d7c     01 00 80 FF 
02d80     F2 00 68 FC | 	wrlong	##512, objptr
02d84     35 00 00 FF 
02d88     20 E4 85 F1 | 	sub	objptr, ##27168
02d8c                 | LR__0162
02d8c                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02d8c     37 2F 02 F6 | 	mov	local05, local37
02d90     01 2E 06 F1 | 	add	local05, #1
02d94     03 2E 66 F0 | 	shl	local05, #3
02d98     35 00 00 FF 
02d9c     0C E4 05 F1 | 	add	objptr, ##27148
02da0     F2 2E 02 F1 | 	add	local05, objptr
02da4     17 13 02 FB | 	rdlong	arg01, local05
02da8     B6 01 00 FF 
02dac     9F 14 06 F6 | 	mov	arg02, ##@LR__5493
02db0     35 00 00 FF 
02db4     0C E4 85 F1 | 	sub	objptr, ##27148
02db8     08 43 B2 FD | 	call	#__system___string_cmp
02dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
02dc0     38 00 90 5D |  if_ne	jmp	#LR__0163
02dc4     37 39 02 F6 | 	mov	local10, local37
02dc8     01 38 06 F1 | 	add	local10, #1
02dcc     03 38 66 F0 | 	shl	local10, #3
02dd0     35 00 00 FF 
02dd4     0C E4 05 F1 | 	add	objptr, ##27148
02dd8     F2 38 02 F1 | 	add	local10, objptr
02ddc     B6 01 00 FF 
02de0     A3 30 06 F6 | 	mov	local06, ##@LR__5494
02de4     1C 31 62 FC | 	wrlong	local06, local10
02de8     14 E4 05 F1 | 	add	objptr, #20
02dec     01 00 80 FF 
02df0     F2 00 68 FC | 	wrlong	##512, objptr
02df4     35 00 00 FF 
02df8     20 E4 85 F1 | 	sub	objptr, ##27168
02dfc                 | LR__0163
02dfc                 | LR__0164
02dfc                 | ' 		
02dfc                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02dfc                 | ' 
02dfc                 | ' if (lp$="mode" orelse lp$="m.") then 
02dfc     B6 01 00 FF 
02e00     A5 14 06 F6 | 	mov	arg02, ##@LR__5495
02e04     3B 13 02 F6 | 	mov	arg01, local41
02e08     B8 42 B2 FD | 	call	#__system___string_cmp
02e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e10     18 00 90 AD |  if_e	jmp	#LR__0165
02e14     B6 01 00 FF 
02e18     AA 14 06 F6 | 	mov	arg02, ##@LR__5496
02e1c     3B 13 02 F6 | 	mov	arg01, local41
02e20     A0 42 B2 FD | 	call	#__system___string_cmp
02e24     00 FA 0D F2 | 	cmp	result1, #0 wz
02e28     58 02 90 5D |  if_ne	jmp	#LR__0172
02e2c                 | LR__0165
02e2c                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02e2c     37 2F 02 F6 | 	mov	local05, local37
02e30     01 2E 06 F1 | 	add	local05, #1
02e34     03 2E 66 F0 | 	shl	local05, #3
02e38     35 00 00 FF 
02e3c     0C E4 05 F1 | 	add	objptr, ##27148
02e40     F2 2E 02 F1 | 	add	local05, objptr
02e44     17 13 02 FB | 	rdlong	arg01, local05
02e48     B6 01 00 FF 
02e4c     AD 14 06 F6 | 	mov	arg02, ##@LR__5497
02e50     35 00 00 FF 
02e54     0C E4 85 F1 | 	sub	objptr, ##27148
02e58     68 42 B2 FD | 	call	#__system___string_cmp
02e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e60     2C 00 90 5D |  if_ne	jmp	#LR__0166
02e64     37 39 02 F6 | 	mov	local10, local37
02e68     01 38 06 F1 | 	add	local10, #1
02e6c     03 38 66 F0 | 	shl	local10, #3
02e70     35 00 00 FF 
02e74     0C E4 05 F1 | 	add	objptr, ##27148
02e78     F2 38 02 F1 | 	add	local10, objptr
02e7c     B6 01 00 FF 
02e80     B3 30 06 F6 | 	mov	local06, ##@LR__5498
02e84     1C 31 62 FC | 	wrlong	local06, local10
02e88     35 00 00 FF 
02e8c     0C E4 85 F1 | 	sub	objptr, ##27148
02e90                 | LR__0166
02e90                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02e90     37 2F 02 F6 | 	mov	local05, local37
02e94     01 2E 06 F1 | 	add	local05, #1
02e98     03 2E 66 F0 | 	shl	local05, #3
02e9c     35 00 00 FF 
02ea0     0C E4 05 F1 | 	add	objptr, ##27148
02ea4     F2 2E 02 F1 | 	add	local05, objptr
02ea8     17 13 02 FB | 	rdlong	arg01, local05
02eac     B6 01 00 FF 
02eb0     B5 14 06 F6 | 	mov	arg02, ##@LR__5499
02eb4     35 00 00 FF 
02eb8     0C E4 85 F1 | 	sub	objptr, ##27148
02ebc     04 42 B2 FD | 	call	#__system___string_cmp
02ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec4     2C 00 90 5D |  if_ne	jmp	#LR__0167
02ec8     37 39 02 F6 | 	mov	local10, local37
02ecc     01 38 06 F1 | 	add	local10, #1
02ed0     03 38 66 F0 | 	shl	local10, #3
02ed4     35 00 00 FF 
02ed8     0C E4 05 F1 | 	add	objptr, ##27148
02edc     F2 38 02 F1 | 	add	local10, objptr
02ee0     B6 01 00 FF 
02ee4     BE 30 06 F6 | 	mov	local06, ##@LR__5500
02ee8     1C 31 62 FC | 	wrlong	local06, local10
02eec     35 00 00 FF 
02ef0     0C E4 85 F1 | 	sub	objptr, ##27148
02ef4                 | LR__0167
02ef4                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02ef4     37 2F 02 F6 | 	mov	local05, local37
02ef8     01 2E 06 F1 | 	add	local05, #1
02efc     03 2E 66 F0 | 	shl	local05, #3
02f00     35 00 00 FF 
02f04     0C E4 05 F1 | 	add	objptr, ##27148
02f08     F2 2E 02 F1 | 	add	local05, objptr
02f0c     17 13 02 FB | 	rdlong	arg01, local05
02f10     B6 01 00 FF 
02f14     C0 14 06 F6 | 	mov	arg02, ##@LR__5501
02f18     35 00 00 FF 
02f1c     0C E4 85 F1 | 	sub	objptr, ##27148
02f20     A0 41 B2 FD | 	call	#__system___string_cmp
02f24     00 FA 0D F2 | 	cmp	result1, #0 wz
02f28     2C 00 90 5D |  if_ne	jmp	#LR__0168
02f2c     37 39 02 F6 | 	mov	local10, local37
02f30     01 38 06 F1 | 	add	local10, #1
02f34     03 38 66 F0 | 	shl	local10, #3
02f38     35 00 00 FF 
02f3c     0C E4 05 F1 | 	add	objptr, ##27148
02f40     F2 38 02 F1 | 	add	local10, objptr
02f44     B6 01 00 FF 
02f48     C9 30 06 F6 | 	mov	local06, ##@LR__5502
02f4c     1C 31 62 FC | 	wrlong	local06, local10
02f50     35 00 00 FF 
02f54     0C E4 85 F1 | 	sub	objptr, ##27148
02f58                 | LR__0168
02f58                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02f58     37 2F 02 F6 | 	mov	local05, local37
02f5c     01 2E 06 F1 | 	add	local05, #1
02f60     03 2E 66 F0 | 	shl	local05, #3
02f64     35 00 00 FF 
02f68     0C E4 05 F1 | 	add	objptr, ##27148
02f6c     F2 2E 02 F1 | 	add	local05, objptr
02f70     17 13 02 FB | 	rdlong	arg01, local05
02f74     B6 01 00 FF 
02f78     CB 14 06 F6 | 	mov	arg02, ##@LR__5503
02f7c     35 00 00 FF 
02f80     0C E4 85 F1 | 	sub	objptr, ##27148
02f84     3C 41 B2 FD | 	call	#__system___string_cmp
02f88     00 FA 0D F2 | 	cmp	result1, #0 wz
02f8c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f90     37 39 02 F6 | 	mov	local10, local37
02f94     01 38 06 F1 | 	add	local10, #1
02f98     03 38 66 F0 | 	shl	local10, #3
02f9c     35 00 00 FF 
02fa0     0C E4 05 F1 | 	add	objptr, ##27148
02fa4     F2 38 02 F1 | 	add	local10, objptr
02fa8     B6 01 00 FF 
02fac     D4 30 06 F6 | 	mov	local06, ##@LR__5504
02fb0     1C 31 62 FC | 	wrlong	local06, local10
02fb4     35 00 00 FF 
02fb8     0C E4 85 F1 | 	sub	objptr, ##27148
02fbc                 | LR__0169
02fbc                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02fbc     37 2F 02 F6 | 	mov	local05, local37
02fc0     01 2E 06 F1 | 	add	local05, #1
02fc4     03 2E 66 F0 | 	shl	local05, #3
02fc8     35 00 00 FF 
02fcc     0C E4 05 F1 | 	add	objptr, ##27148
02fd0     F2 2E 02 F1 | 	add	local05, objptr
02fd4     17 13 02 FB | 	rdlong	arg01, local05
02fd8     B6 01 00 FF 
02fdc     D6 14 06 F6 | 	mov	arg02, ##@LR__5505
02fe0     35 00 00 FF 
02fe4     0C E4 85 F1 | 	sub	objptr, ##27148
02fe8     D8 40 B2 FD | 	call	#__system___string_cmp
02fec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff0     2C 00 90 5D |  if_ne	jmp	#LR__0170
02ff4     37 39 02 F6 | 	mov	local10, local37
02ff8     01 38 06 F1 | 	add	local10, #1
02ffc     03 38 66 F0 | 	shl	local10, #3
03000     35 00 00 FF 
03004     0C E4 05 F1 | 	add	objptr, ##27148
03008     F2 38 02 F1 | 	add	local10, objptr
0300c     B6 01 00 FF 
03010     D9 30 06 F6 | 	mov	local06, ##@LR__5506
03014     1C 31 62 FC | 	wrlong	local06, local10
03018     35 00 00 FF 
0301c     0C E4 85 F1 | 	sub	objptr, ##27148
03020                 | LR__0170
03020                 | '   if lparts(addptr+1).part$="amiga" then lparts(addptr+1).part$="5"  
03020     37 2F 02 F6 | 	mov	local05, local37
03024     01 2E 06 F1 | 	add	local05, #1
03028     03 2E 66 F0 | 	shl	local05, #3
0302c     35 00 00 FF 
03030     0C E4 05 F1 | 	add	objptr, ##27148
03034     F2 2E 02 F1 | 	add	local05, objptr
03038     17 13 02 FB | 	rdlong	arg01, local05
0303c     B6 01 00 FF 
03040     DB 14 06 F6 | 	mov	arg02, ##@LR__5507
03044     35 00 00 FF 
03048     0C E4 85 F1 | 	sub	objptr, ##27148
0304c     74 40 B2 FD | 	call	#__system___string_cmp
03050     00 FA 0D F2 | 	cmp	result1, #0 wz
03054     2C 00 90 5D |  if_ne	jmp	#LR__0171
03058     37 39 02 F6 | 	mov	local10, local37
0305c     01 38 06 F1 | 	add	local10, #1
03060     03 38 66 F0 | 	shl	local10, #3
03064     35 00 00 FF 
03068     0C E4 05 F1 | 	add	objptr, ##27148
0306c     F2 38 02 F1 | 	add	local10, objptr
03070     B6 01 00 FF 
03074     E1 30 06 F6 | 	mov	local06, ##@LR__5508
03078     1C 31 62 FC | 	wrlong	local06, local10
0307c     35 00 00 FF 
03080     0C E4 85 F1 | 	sub	objptr, ##27148
03084                 | LR__0171
03084                 | LR__0172
03084                 | ' 
03084                 | ' ' find part types 
03084                 | ' 
03084                 | ' for i=0 to k-1
03084     00 28 06 F6 | 	mov	local02, #0
03088     23 79 02 F6 | 	mov	local42, local17
0308c                 | LR__0173
0308c     3C 29 52 F2 | 	cmps	local02, local42 wc
03090     A4 07 90 3D |  if_ae	jmp	#LR__0185
03094     14 39 02 F6 | 	mov	local10, local02
03098     03 38 66 F0 | 	shl	local10, #3
0309c     35 00 00 FF 
030a0     0C E4 05 F1 | 	add	objptr, ##27148
030a4     F2 38 02 F1 | 	add	local10, objptr
030a8     14 3B 02 F6 | 	mov	local11, local02
030ac     1D 41 02 F6 | 	mov	local14, local11
030b0     20 3F 02 F6 | 	mov	local13, local14
030b4     03 3E 66 F0 | 	shl	local13, #3
030b8     F2 3E 02 F1 | 	add	local13, objptr
030bc     1F 13 02 FB | 	rdlong	arg01, local13
030c0     35 00 00 FF 
030c4     0C E4 85 F1 | 	sub	objptr, ##27148
030c8     70 1B B0 FD | 	call	#_isseparator
030cc     FD FA E1 F8 | 	getbyte	result1, result1, #0
030d0     04 38 06 F1 | 	add	local10, #4
030d4     1C FB 61 FC | 	wrlong	result1, local10
030d8                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030d8     14 39 02 F6 | 	mov	local10, local02
030dc     03 38 66 F0 | 	shl	local10, #3
030e0     35 00 00 FF 
030e4     0C E4 05 F1 | 	add	objptr, ##27148
030e8     F2 38 02 F1 | 	add	local10, objptr
030ec     04 38 06 F1 | 	add	local10, #4
030f0     1C 3D 02 FB | 	rdlong	local12, local10
030f4     01 3C 56 F2 | 	cmps	local12, #1 wc
030f8     35 00 00 FF 
030fc     0C E4 85 F1 | 	sub	objptr, ##27148
03100     2C 07 90 3D |  if_ae	jmp	#LR__0184
03104     14 39 02 F6 | 	mov	local10, local02
03108     03 38 66 F0 | 	shl	local10, #3
0310c     35 00 00 FF 
03110     0C E4 05 F1 | 	add	objptr, ##27148
03114     F2 38 02 F1 | 	add	local10, objptr
03118     14 3B 02 F6 | 	mov	local11, local02
0311c     1D 41 02 F6 | 	mov	local14, local11
03120     20 3F 02 F6 | 	mov	local13, local14
03124     03 3E 66 F0 | 	shl	local13, #3
03128     F2 3E 02 F1 | 	add	local13, objptr
0312c     1F 13 02 FB | 	rdlong	arg01, local13
03130     35 00 00 FF 
03134     0C E4 85 F1 | 	sub	objptr, ##27148
03138     4C 13 B0 FD | 	call	#_isoperator
0313c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03140     04 38 06 F1 | 	add	local10, #4
03144     1C FB 61 FC | 	wrlong	result1, local10
03148                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03148     14 39 02 F6 | 	mov	local10, local02
0314c     03 38 66 F0 | 	shl	local10, #3
03150     35 00 00 FF 
03154     0C E4 05 F1 | 	add	objptr, ##27148
03158     F2 38 02 F1 | 	add	local10, objptr
0315c     04 38 06 F1 | 	add	local10, #4
03160     1C 3D 02 FB | 	rdlong	local12, local10
03164     01 3C 56 F2 | 	cmps	local12, #1 wc
03168     35 00 00 FF 
0316c     0C E4 85 F1 | 	sub	objptr, ##27148
03170     BC 06 90 3D |  if_ae	jmp	#LR__0184
03174     14 39 02 F6 | 	mov	local10, local02
03178     03 38 66 F0 | 	shl	local10, #3
0317c     35 00 00 FF 
03180     0C E4 05 F1 | 	add	objptr, ##27148
03184     F2 38 02 F1 | 	add	local10, objptr
03188     14 3B 02 F6 | 	mov	local11, local02
0318c     1D 41 02 F6 | 	mov	local14, local11
03190     20 3F 02 F6 | 	mov	local13, local14
03194     03 3E 66 F0 | 	shl	local13, #3
03198     F2 3E 02 F1 | 	add	local13, objptr
0319c     1F 13 02 FB | 	rdlong	arg01, local13
031a0     35 00 00 FF 
031a4     0C E4 85 F1 | 	sub	objptr, ##27148
031a8                 | ' 
031a8                 | ' select case s
031a8     B6 01 00 FF 
031ac     E6 15 06 F6 | 	mov	arg02, ##@LR__5599
031b0     10 3F B2 FD | 	call	#__system___string_cmp
031b4     00 FA 0D F2 | 	cmp	result1, #0 wz
031b8     1B FA 05 A6 |  if_e	mov	result1, #27
031bc     00 FA 05 56 |  if_ne	mov	result1, #0
031c0     FD FA E1 F8 | 	getbyte	result1, result1, #0
031c4     04 38 06 F1 | 	add	local10, #4
031c8     1C FB 61 FC | 	wrlong	result1, local10
031cc                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
031cc     14 39 02 F6 | 	mov	local10, local02
031d0     03 38 66 F0 | 	shl	local10, #3
031d4     35 00 00 FF 
031d8     0C E4 05 F1 | 	add	objptr, ##27148
031dc     F2 38 02 F1 | 	add	local10, objptr
031e0     04 38 06 F1 | 	add	local10, #4
031e4     1C 3D 02 FB | 	rdlong	local12, local10
031e8     01 3C 56 F2 | 	cmps	local12, #1 wc
031ec     35 00 00 FF 
031f0     0C E4 85 F1 | 	sub	objptr, ##27148
031f4     38 06 90 3D |  if_ae	jmp	#LR__0184
031f8     14 39 02 F6 | 	mov	local10, local02
031fc     03 38 66 F0 | 	shl	local10, #3
03200     35 00 00 FF 
03204     0C E4 05 F1 | 	add	objptr, ##27148
03208     F2 38 02 F1 | 	add	local10, objptr
0320c     14 3B 02 F6 | 	mov	local11, local02
03210     1D 41 02 F6 | 	mov	local14, local11
03214     20 3F 02 F6 | 	mov	local13, local14
03218     03 3E 66 F0 | 	shl	local13, #3
0321c     F2 3E 02 F1 | 	add	local13, objptr
03220     1F 13 02 FB | 	rdlong	arg01, local13
03224     35 00 00 FF 
03228     0C E4 85 F1 | 	sub	objptr, ##27148
0322c     0C 1C B0 FD | 	call	#_iscommand
03230     FD FA E1 F8 | 	getbyte	result1, result1, #0
03234     04 38 06 F1 | 	add	local10, #4
03238     1C FB 61 FC | 	wrlong	result1, local10
0323c                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0323c     14 39 02 F6 | 	mov	local10, local02
03240     03 38 66 F0 | 	shl	local10, #3
03244     35 00 00 FF 
03248     0C E4 05 F1 | 	add	objptr, ##27148
0324c     F2 38 02 F1 | 	add	local10, objptr
03250     04 38 06 F1 | 	add	local10, #4
03254     1C 3D 02 FB | 	rdlong	local12, local10
03258     01 3C 56 F2 | 	cmps	local12, #1 wc
0325c     35 00 00 FF 
03260     0C E4 85 F1 | 	sub	objptr, ##27148
03264     C8 05 90 3D |  if_ae	jmp	#LR__0184
03268     14 39 02 F6 | 	mov	local10, local02
0326c     03 38 66 F0 | 	shl	local10, #3
03270     35 00 00 FF 
03274     0C E4 05 F1 | 	add	objptr, ##27148
03278     F2 38 02 F1 | 	add	local10, objptr
0327c     14 3B 02 F6 | 	mov	local11, local02
03280     1D 41 02 F6 | 	mov	local14, local11
03284     20 3F 02 F6 | 	mov	local13, local14
03288     03 3E 66 F0 | 	shl	local13, #3
0328c     F2 5C 02 F6 | 	mov	local28, objptr
03290     F2 3E 02 F1 | 	add	local13, objptr
03294     1F 13 02 FB | 	rdlong	arg01, local13
03298     35 00 00 FF 
0329c     0C E4 85 F1 | 	sub	objptr, ##27148
032a0     D8 2C B0 FD | 	call	#_isfunction
032a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
032a8     04 38 06 F1 | 	add	local10, #4
032ac     1C FB 61 FC | 	wrlong	result1, local10
032b0                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
032b0     14 39 02 F6 | 	mov	local10, local02
032b4     03 38 66 F0 | 	shl	local10, #3
032b8     35 00 00 FF 
032bc     0C E4 05 F1 | 	add	objptr, ##27148
032c0     F2 38 02 F1 | 	add	local10, objptr
032c4     04 38 06 F1 | 	add	local10, #4
032c8     1C 3D 02 FB | 	rdlong	local12, local10
032cc     01 3C 56 F2 | 	cmps	local12, #1 wc
032d0     35 00 00 FF 
032d4     0C E4 85 F1 | 	sub	objptr, ##27148
032d8     54 05 90 3D |  if_ae	jmp	#LR__0184
032dc     14 39 02 F6 | 	mov	local10, local02
032e0     03 38 66 F0 | 	shl	local10, #3
032e4     35 00 00 FF 
032e8     0C E4 05 F1 | 	add	objptr, ##27148
032ec     F2 38 02 F1 | 	add	local10, objptr
032f0     14 3B 02 F6 | 	mov	local11, local02
032f4     1D 41 02 F6 | 	mov	local14, local11
032f8     03 40 66 F0 | 	shl	local14, #3
032fc     F2 3E 02 F6 | 	mov	local13, objptr
03300     F2 40 02 F1 | 	add	local14, objptr
03304     20 13 02 FB | 	rdlong	arg01, local14
03308     35 00 00 FF 
0330c     0C E4 85 F1 | 	sub	objptr, ##27148
03310     BC 15 B0 FD | 	call	#_isnotename
03314     04 38 06 F1 | 	add	local10, #4
03318     1C FB 61 FC | 	wrlong	result1, local10
0331c                 | ' lparts(i).token=isnotename(lparts(i).part$) 
0331c                 | ' if lparts(i).token>0 then 
0331c     14 39 02 F6 | 	mov	local10, local02
03320     03 38 66 F0 | 	shl	local10, #3
03324     35 00 00 FF 
03328     0C E4 05 F1 | 	add	objptr, ##27148
0332c     F2 38 02 F1 | 	add	local10, objptr
03330     04 38 06 F1 | 	add	local10, #4
03334     1C 31 02 FB | 	rdlong	local06, local10
03338     01 30 56 F2 | 	cmps	local06, #1 wc
0333c     35 00 00 FF 
03340     0C E4 85 F1 | 	sub	objptr, ##27148
03344     8C 00 90 CD |  if_b	jmp	#LR__0174
03348     14 2F 02 F6 | 	mov	local05, local02
0334c     03 2E 66 F0 | 	shl	local05, #3
03350     35 00 00 FF 
03354     0C E4 05 F1 | 	add	objptr, ##27148
03358     F2 2E 02 F1 | 	add	local05, objptr
0335c     04 2E 06 F1 | 	add	local05, #4
03360     17 3D 02 FB | 	rdlong	local12, local05
03364     1E 13 02 F6 | 	mov	arg01, local12
03368     35 00 00 FF 
0336c     0C E4 85 F1 | 	sub	objptr, ##27148
03370     B0 3D B0 FD | 	call	#_getnoteval
03374     FD 7A 02 F6 | 	mov	local43, result1
03378     14 39 02 F6 | 	mov	local10, local02
0337c     03 38 66 F0 | 	shl	local10, #3
03380     35 00 00 FF 
03384     0C E4 05 F1 | 	add	objptr, ##27148
03388     F2 38 02 F1 | 	add	local10, objptr
0338c     3D 13 02 F6 | 	mov	arg01, local43
03390     35 00 00 FF 
03394     0C E4 85 F1 | 	sub	objptr, ##27148
03398     78 5F B2 FD | 	call	#__system__str_S
0339c     1C FB 61 FC | 	wrlong	result1, local10
033a0     14 2D 02 F6 | 	mov	local04, local02
033a4     16 2B 02 F6 | 	mov	local03, local04
033a8     15 39 02 F6 | 	mov	local10, local03
033ac     03 38 66 F0 | 	shl	local10, #3
033b0     35 00 00 FF 
033b4     0C E4 05 F1 | 	add	objptr, ##27148
033b8     F2 38 02 F1 | 	add	local10, objptr
033bc     04 38 06 F1 | 	add	local10, #4
033c0     01 00 80 FF 
033c4     1C 05 68 FC | 	wrlong	##514, local10
033c8     35 00 00 FF 
033cc     0C E4 85 F1 | 	sub	objptr, ##27148
033d0     5C 04 90 FD | 	jmp	#LR__0184
033d4                 | LR__0174
033d4     14 39 02 F6 | 	mov	local10, local02
033d8     03 38 66 F0 | 	shl	local10, #3
033dc     35 00 00 FF 
033e0     0C E4 05 F1 | 	add	objptr, ##27148
033e4     F2 38 02 F1 | 	add	local10, objptr
033e8     14 41 02 F6 | 	mov	local14, local02
033ec     03 40 66 F0 | 	shl	local14, #3
033f0     F2 40 02 F1 | 	add	local14, objptr
033f4     20 13 02 FB | 	rdlong	arg01, local14
033f8     35 00 00 FF 
033fc     0C E4 85 F1 | 	sub	objptr, ##27148
03400     64 13 B0 FD | 	call	#_ischannel
03404     04 38 06 F1 | 	add	local10, #4
03408     1C FB 61 FC | 	wrlong	result1, local10
0340c                 | ' 
0340c                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
0340c                 | ' 
0340c                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
0340c     14 39 02 F6 | 	mov	local10, local02
03410     03 38 66 F0 | 	shl	local10, #3
03414     35 00 00 FF 
03418     0C E4 05 F1 | 	add	objptr, ##27148
0341c     F2 38 02 F1 | 	add	local10, objptr
03420     04 38 06 F1 | 	add	local10, #4
03424     1C 31 02 FB | 	rdlong	local06, local10
03428     01 30 56 F2 | 	cmps	local06, #1 wc
0342c     35 00 00 FF 
03430     0C E4 85 F1 | 	sub	objptr, ##27148
03434     74 00 90 CD |  if_b	jmp	#LR__0175
03438     14 39 02 F6 | 	mov	local10, local02
0343c     03 38 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     0C E4 05 F1 | 	add	objptr, ##27148
03448     F2 38 02 F1 | 	add	local10, objptr
0344c     14 3B 02 F6 | 	mov	local11, local02
03450     1D 41 02 F6 | 	mov	local14, local11
03454     03 40 66 F0 | 	shl	local14, #3
03458     F2 3E 02 F6 | 	mov	local13, objptr
0345c     F2 40 02 F1 | 	add	local14, objptr
03460     20 13 02 FB | 	rdlong	arg01, local14
03464     01 3C 06 F6 | 	mov	local12, #1
03468     01 14 06 F6 | 	mov	arg02, #1
0346c     35 00 00 FF 
03470     0C E4 85 F1 | 	sub	objptr, ##27148
03474     2C 5D B2 FD | 	call	#__system__Right_S
03478     1C FB 61 FC | 	wrlong	result1, local10
0347c     14 2D 02 F6 | 	mov	local04, local02
03480     16 2B 02 F6 | 	mov	local03, local04
03484     15 39 02 F6 | 	mov	local10, local03
03488     03 38 66 F0 | 	shl	local10, #3
0348c     35 00 00 FF 
03490     0C E4 05 F1 | 	add	objptr, ##27148
03494     F2 38 02 F1 | 	add	local10, objptr
03498     04 38 06 F1 | 	add	local10, #4
0349c     1C 59 68 FC | 	wrlong	#44, local10
034a0     35 00 00 FF 
034a4     0C E4 85 F1 | 	sub	objptr, ##27148
034a8     84 03 90 FD | 	jmp	#LR__0184
034ac                 | LR__0175
034ac     14 39 02 F6 | 	mov	local10, local02
034b0     03 38 66 F0 | 	shl	local10, #3
034b4     35 00 00 FF 
034b8     0C E4 05 F1 | 	add	objptr, ##27148
034bc     F2 38 02 F1 | 	add	local10, objptr
034c0     14 3B 02 F6 | 	mov	local11, local02
034c4     1D 41 02 F6 | 	mov	local14, local11
034c8     03 40 66 F0 | 	shl	local14, #3
034cc     F2 3E 02 F6 | 	mov	local13, objptr
034d0     F2 40 02 F1 | 	add	local14, objptr
034d4     20 13 02 FB | 	rdlong	arg01, local14
034d8     35 00 00 FF 
034dc     0C E4 85 F1 | 	sub	objptr, ##27148
034e0     6C 13 B0 FD | 	call	#_isconstant
034e4     04 38 06 F1 | 	add	local10, #4
034e8     1C FB 61 FC | 	wrlong	result1, local10
034ec                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
034ec     14 39 02 F6 | 	mov	local10, local02
034f0     03 38 66 F0 | 	shl	local10, #3
034f4     35 00 00 FF 
034f8     0C E4 05 F1 | 	add	objptr, ##27148
034fc     F2 38 02 F1 | 	add	local10, objptr
03500     04 38 06 F1 | 	add	local10, #4
03504     1C 3D 02 FB | 	rdlong	local12, local10
03508     01 3C 56 F2 | 	cmps	local12, #1 wc
0350c     35 00 00 FF 
03510     0C E4 85 F1 | 	sub	objptr, ##27148
03514     94 00 90 CD |  if_b	jmp	#LR__0176
03518     14 39 02 F6 | 	mov	local10, local02
0351c     03 38 66 F0 | 	shl	local10, #3
03520     35 00 00 FF 
03524     0C E4 05 F1 | 	add	objptr, ##27148
03528     F2 38 02 F1 | 	add	local10, objptr
0352c     14 3D 02 F6 | 	mov	local12, local02
03530     1E 3B 02 F6 | 	mov	local11, local12
03534     1D 41 02 F6 | 	mov	local14, local11
03538     03 40 66 F0 | 	shl	local14, #3
0353c     F2 3E 02 F6 | 	mov	local13, objptr
03540     F2 40 02 F1 | 	add	local14, objptr
03544     04 40 06 F1 | 	add	local14, #4
03548     20 13 02 FB | 	rdlong	arg01, local14
0354c     04 40 86 F1 | 	sub	local14, #4
03550     35 00 00 FF 
03554     0C E4 85 F1 | 	sub	objptr, ##27148
03558     09 13 52 F6 | 	abs	arg01, arg01 wc
0355c     1F 7C C6 C9 |  if_b	decod	local44, #31
03560     00 7C 06 36 |  if_ae	mov	local44, #0
03564     AC 65 B2 FD | 	call	#__system___float_fromuns
03568     3E FB 61 F5 | 	xor	result1, local44
0356c     FD 12 02 F6 | 	mov	arg01, result1
03570     A0 5D B2 FD | 	call	#__system__str_S
03574     1C FB 61 FC | 	wrlong	result1, local10
03578     14 2D 02 F6 | 	mov	local04, local02
0357c     16 2B 02 F6 | 	mov	local03, local04
03580     15 39 02 F6 | 	mov	local10, local03
03584     03 38 66 F0 | 	shl	local10, #3
03588     35 00 00 FF 
0358c     0C E4 05 F1 | 	add	objptr, ##27148
03590     F2 38 02 F1 | 	add	local10, objptr
03594     04 38 06 F1 | 	add	local10, #4
03598     01 00 80 FF 
0359c     1C 03 68 FC | 	wrlong	##513, local10
035a0     35 00 00 FF 
035a4     0C E4 85 F1 | 	sub	objptr, ##27148
035a8     84 02 90 FD | 	jmp	#LR__0184
035ac                 | LR__0176
035ac     14 2F 02 F6 | 	mov	local05, local02
035b0     03 2E 66 F0 | 	shl	local05, #3
035b4     35 00 00 FF 
035b8     0C E4 05 F1 | 	add	objptr, ##27148
035bc     F2 2E 02 F1 | 	add	local05, objptr
035c0     17 13 02 FB | 	rdlong	arg01, local05
035c4     35 00 00 FF 
035c8     0C E4 85 F1 | 	sub	objptr, ##27148
035cc     A0 33 B0 FD | 	call	#_isnum
035d0     FD 7E 02 F6 | 	mov	local45, result1
035d4     14 2F 02 F6 | 	mov	local05, local02
035d8     03 2E 66 F0 | 	shl	local05, #3
035dc     35 00 00 FF 
035e0     0C E4 05 F1 | 	add	objptr, ##27148
035e4     F2 2E 02 F1 | 	add	local05, objptr
035e8     17 13 02 FB | 	rdlong	arg01, local05
035ec     35 00 00 FF 
035f0     0C E4 85 F1 | 	sub	objptr, ##27148
035f4     64 37 B0 FD | 	call	#_isint
035f8     FD 80 02 F6 | 	mov	local46, result1
035fc     14 2F 02 F6 | 	mov	local05, local02
03600     03 2E 66 F0 | 	shl	local05, #3
03604     35 00 00 FF 
03608     0C E4 05 F1 | 	add	objptr, ##27148
0360c     F2 2E 02 F1 | 	add	local05, objptr
03610     17 13 02 FB | 	rdlong	arg01, local05
03614     35 00 00 FF 
03618     0C E4 85 F1 | 	sub	objptr, ##27148
0361c     E0 39 B0 FD | 	call	#_isdec
03620     FD 82 02 F6 | 	mov	local47, result1
03624                 | ' 
03624                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
03624                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
03624     00 7E 0E F2 | 	cmp	local45, #0 wz
03628     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
0362c     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
03630     34 00 90 AD |  if_e	jmp	#LR__0177
03634     14 2D 02 F6 | 	mov	local04, local02
03638     16 2B 02 F6 | 	mov	local03, local04
0363c     15 39 02 F6 | 	mov	local10, local03
03640     03 38 66 F0 | 	shl	local10, #3
03644     35 00 00 FF 
03648     0C E4 05 F1 | 	add	objptr, ##27148
0364c     F2 38 02 F1 | 	add	local10, objptr
03650     04 38 06 F1 | 	add	local10, #4
03654     01 00 80 FF 
03658     1C 01 68 FC | 	wrlong	##512, local10
0365c     35 00 00 FF 
03660     0C E4 85 F1 | 	sub	objptr, ##27148
03664     C8 01 90 FD | 	jmp	#LR__0184
03668                 | LR__0177
03668                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03668     00 7E 0E F2 | 	cmp	local45, #0 wz
0366c     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
03670     41 2D 22 56 |  if_ne	not	local04, local47
03674     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03678     34 00 90 AD |  if_e	jmp	#LR__0178
0367c     14 2D 02 F6 | 	mov	local04, local02
03680     16 2B 02 F6 | 	mov	local03, local04
03684     15 39 02 F6 | 	mov	local10, local03
03688     03 38 66 F0 | 	shl	local10, #3
0368c     35 00 00 FF 
03690     0C E4 05 F1 | 	add	objptr, ##27148
03694     F2 38 02 F1 | 	add	local10, objptr
03698     04 38 06 F1 | 	add	local10, #4
0369c     01 00 80 FF 
036a0     1C 03 68 FC | 	wrlong	##513, local10
036a4     35 00 00 FF 
036a8     0C E4 85 F1 | 	sub	objptr, ##27148
036ac     80 01 90 FD | 	jmp	#LR__0184
036b0                 | LR__0178
036b0                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
036b0     00 7E 0E F2 | 	cmp	local45, #0 wz
036b4     40 2D 22 56 |  if_ne	not	local04, local46
036b8     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
036bc     41 2B 22 56 |  if_ne	not	local03, local47
036c0     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
036c4     34 00 90 AD |  if_e	jmp	#LR__0179
036c8     14 2D 02 F6 | 	mov	local04, local02
036cc     16 2B 02 F6 | 	mov	local03, local04
036d0     15 39 02 F6 | 	mov	local10, local03
036d4     03 38 66 F0 | 	shl	local10, #3
036d8     35 00 00 FF 
036dc     0C E4 05 F1 | 	add	objptr, ##27148
036e0     F2 38 02 F1 | 	add	local10, objptr
036e4     04 38 06 F1 | 	add	local10, #4
036e8     01 00 80 FF 
036ec     1C 05 68 FC | 	wrlong	##514, local10
036f0     35 00 00 FF 
036f4     0C E4 85 F1 | 	sub	objptr, ##27148
036f8     34 01 90 FD | 	jmp	#LR__0184
036fc                 | LR__0179
036fc                 | ' 
036fc                 | ' if isstring(lparts(i).part$) then 
036fc     14 2F 02 F6 | 	mov	local05, local02
03700     03 2E 66 F0 | 	shl	local05, #3
03704     35 00 00 FF 
03708     0C E4 05 F1 | 	add	objptr, ##27148
0370c     F2 2E 02 F1 | 	add	local05, objptr
03710     17 13 02 FB | 	rdlong	arg01, local05
03714     35 00 00 FF 
03718     0C E4 85 F1 | 	sub	objptr, ##27148
0371c     A0 39 B0 FD | 	call	#_isstring
03720     00 FA 0D F2 | 	cmp	result1, #0 wz
03724     A8 00 90 AD |  if_e	jmp	#LR__0182
03728     14 39 02 F6 | 	mov	local10, local02
0372c     03 38 66 F0 | 	shl	local10, #3
03730     35 00 00 FF 
03734     0C E4 05 F1 | 	add	objptr, ##27148
03738     F2 38 02 F1 | 	add	local10, objptr
0373c     04 38 06 F1 | 	add	local10, #4
03740     01 00 80 FF 
03744     1C 07 68 FC | 	wrlong	##515, local10
03748     14 2D 02 F6 | 	mov	local04, local02
0374c     16 2B 02 F6 | 	mov	local03, local04
03750     15 39 02 F6 | 	mov	local10, local03
03754     03 38 66 F0 | 	shl	local10, #3
03758     F2 38 02 F1 | 	add	local10, objptr
0375c     14 41 02 F6 | 	mov	local14, local02
03760     03 40 66 F0 | 	shl	local14, #3
03764     F2 40 02 F1 | 	add	local14, objptr
03768     20 31 02 FB | 	rdlong	local06, local14
0376c     02 3C 06 F6 | 	mov	local12, #2
03770     14 51 02 F6 | 	mov	local22, local02
03774     28 53 02 F6 | 	mov	local23, local22
03778     03 52 66 F0 | 	shl	local23, #3
0377c     F2 54 02 F6 | 	mov	local24, objptr
03780     F2 52 02 F1 | 	add	local23, objptr
03784     29 13 02 FB | 	rdlong	arg01, local23
03788     35 00 00 FF 
0378c     0C E4 85 F1 | 	sub	objptr, ##27148
03790     09 33 02 F6 | 	mov	local07, arg01
03794     97 06 48 FB | 	callpa	#(@LR__0181-@LR__0180)>>2,fcache_load_ptr_
03798                 | LR__0180
03798     19 FB C9 FA | 	rdbyte	result1, local07 wz
0379c     01 32 06 51 |  if_ne	add	local07, #1
037a0     F4 FF 9F 5D |  if_ne	jmp	#LR__0180
037a4                 | LR__0181
037a4     09 33 82 F1 | 	sub	local07, arg01
037a8     19 3F 02 F6 | 	mov	local13, local07
037ac     1F 41 02 F6 | 	mov	local14, local13
037b0     02 40 86 F1 | 	sub	local14, #2
037b4     20 3B 02 F6 | 	mov	local11, local14
037b8     18 13 02 F6 | 	mov	arg01, local06
037bc     1E 15 02 F6 | 	mov	arg02, local12
037c0     1D 17 02 F6 | 	mov	arg03, local11
037c4     6C 5A B2 FD | 	call	#__system__Mid_S
037c8     1C FB 61 FC | 	wrlong	result1, local10
037cc     60 00 90 FD | 	jmp	#LR__0184
037d0                 | LR__0182
037d0                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
037d0     14 2B 02 F6 | 	mov	local03, local02
037d4     15 2F 02 F6 | 	mov	local05, local03
037d8     03 2E 66 F0 | 	shl	local05, #3
037dc     35 00 00 FF 
037e0     0C E4 05 F1 | 	add	objptr, ##27148
037e4     F2 2E 02 F1 | 	add	local05, objptr
037e8     17 13 02 FB | 	rdlong	arg01, local05
037ec     35 00 00 FF 
037f0     0C E4 85 F1 | 	sub	objptr, ##27148
037f4     04 2F B0 FD | 	call	#_isname
037f8     FD 2C 0A F6 | 	mov	local04, result1 wz
037fc     30 00 90 AD |  if_e	jmp	#LR__0183
03800     14 2D 02 F6 | 	mov	local04, local02
03804     16 2B 02 F6 | 	mov	local03, local04
03808     15 39 02 F6 | 	mov	local10, local03
0380c     03 38 66 F0 | 	shl	local10, #3
03810     35 00 00 FF 
03814     0C E4 05 F1 | 	add	objptr, ##27148
03818     F2 38 02 F1 | 	add	local10, objptr
0381c     04 38 06 F1 | 	add	local10, #4
03820     01 00 80 FF 
03824     1C 09 68 FC | 	wrlong	##516, local10
03828     35 00 00 FF 
0382c     0C E4 85 F1 | 	sub	objptr, ##27148
03830                 | LR__0183
03830                 | LR__0184
03830     01 28 06 F1 | 	add	local02, #1
03834     54 F8 9F FD | 	jmp	#LR__0173
03838                 | LR__0185
03838     23 39 02 F6 | 	mov	local10, local17
0383c     03 38 66 F0 | 	shl	local10, #3
03840     35 00 00 FF 
03844     0C E4 05 F1 | 	add	objptr, ##27148
03848     F2 38 02 F1 | 	add	local10, objptr
0384c     04 38 06 F1 | 	add	local10, #4
03850     1C FD 6B FC | 	wrlong	#510, local10
03854     23 39 02 F6 | 	mov	local10, local17
03858     03 38 66 F0 | 	shl	local10, #3
0385c     F2 38 02 F1 | 	add	local10, objptr
03860     B6 01 00 FF 
03864     E3 30 06 F6 | 	mov	local06, ##@LR__5509
03868     1C 31 62 FC | 	wrlong	local06, local10
0386c     10 00 00 FF 
03870     54 E4 05 F1 | 	add	objptr, ##8276
03874     F2 46 62 FC | 	wrlong	local17, objptr
03878     45 00 00 FF 
0387c     60 E4 85 F1 | 	sub	objptr, ##35424
03880                 | ' 
03880                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
03880                 | ' 
03880                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
03880                 | '  
03880                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03880     B6 01 00 FF 
03884     E4 14 06 F6 | 	mov	arg02, ##@LR__5510
03888     3B 13 02 F6 | 	mov	arg01, local41
0388c     34 38 B2 FD | 	call	#__system___string_cmp
03890     00 FA 0D F2 | 	cmp	result1, #0 wz
03894     F0 00 90 AD |  if_e	jmp	#LR__0186
03898     B6 01 00 FF 
0389c     E9 14 06 F6 | 	mov	arg02, ##@LR__5511
038a0     3B 13 02 F6 | 	mov	arg01, local41
038a4     1C 38 B2 FD | 	call	#__system___string_cmp
038a8     00 FA 0D F2 | 	cmp	result1, #0 wz
038ac     D8 00 90 AD |  if_e	jmp	#LR__0186
038b0     B6 01 00 FF 
038b4     EE 30 06 F6 | 	mov	local06, ##@LR__5512
038b8     3B 13 02 F6 | 	mov	arg01, local41
038bc     18 15 02 F6 | 	mov	arg02, local06
038c0     00 38 B2 FD | 	call	#__system___string_cmp
038c4     00 FA 0D F2 | 	cmp	result1, #0 wz
038c8     BC 00 90 AD |  if_e	jmp	#LR__0186
038cc     B6 01 00 FF 
038d0     F3 3C 06 F6 | 	mov	local12, ##@LR__5513
038d4     1E 31 02 F6 | 	mov	local06, local12
038d8     3B 13 02 F6 | 	mov	arg01, local41
038dc     18 15 02 F6 | 	mov	arg02, local06
038e0     E0 37 B2 FD | 	call	#__system___string_cmp
038e4     00 FA 0D F2 | 	cmp	result1, #0 wz
038e8     9C 00 90 AD |  if_e	jmp	#LR__0186
038ec     B6 01 00 FF 
038f0     F7 3A 06 F6 | 	mov	local11, ##@LR__5514
038f4     1D 3D 02 F6 | 	mov	local12, local11
038f8     3B 13 02 F6 | 	mov	arg01, local41
038fc     1E 15 02 F6 | 	mov	arg02, local12
03900     C0 37 B2 FD | 	call	#__system___string_cmp
03904     FD 30 0A F6 | 	mov	local06, result1 wz
03908     7C 00 90 AD |  if_e	jmp	#LR__0186
0390c     B6 01 00 FF 
03910     FB 40 06 F6 | 	mov	local14, ##@LR__5515
03914     20 3B 02 F6 | 	mov	local11, local14
03918     3B 13 02 F6 | 	mov	arg01, local41
0391c     1D 15 02 F6 | 	mov	arg02, local11
03920     A0 37 B2 FD | 	call	#__system___string_cmp
03924     FD 3C 0A F6 | 	mov	local12, result1 wz
03928     5C 00 90 AD |  if_e	jmp	#LR__0186
0392c     B6 01 00 FF 
03930     FE 3E 06 F6 | 	mov	local13, ##@LR__5516
03934     1F 41 02 F6 | 	mov	local14, local13
03938     3B 13 02 F6 | 	mov	arg01, local41
0393c     20 15 02 F6 | 	mov	arg02, local14
03940     80 37 B2 FD | 	call	#__system___string_cmp
03944     FD 3A 0A F6 | 	mov	local11, result1 wz
03948     3C 00 90 AD |  if_e	jmp	#LR__0186
0394c     B6 01 00 FF 
03950     02 3F 06 F6 | 	mov	local13, ##@LR__5517
03954     3B 13 02 F6 | 	mov	arg01, local41
03958     1F 15 02 F6 | 	mov	arg02, local13
0395c     64 37 B2 FD | 	call	#__system___string_cmp
03960     FD 40 0A F6 | 	mov	local14, result1 wz
03964     20 00 90 AD |  if_e	jmp	#LR__0186
03968     B6 01 00 FF 
0396c     08 51 06 F6 | 	mov	local22, ##@LR__5518
03970     28 5D 02 F6 | 	mov	local28, local22
03974     3B 13 02 F6 | 	mov	arg01, local41
03978     2E 15 02 F6 | 	mov	arg02, local28
0397c     44 37 B2 FD | 	call	#__system___string_cmp
03980     FD 3E 0A F6 | 	mov	local13, result1 wz
03984     CC 00 90 5D |  if_ne	jmp	#LR__0187
03988                 | LR__0186
03988     37 5D 02 F6 | 	mov	local28, local37
0398c     01 5C 06 F1 | 	add	local28, #1
03990     2E 51 02 F6 | 	mov	local22, local28
03994     28 53 02 F6 | 	mov	local23, local22
03998     03 52 66 F0 | 	shl	local23, #3
0399c     35 00 00 FF 
039a0     0C E4 05 F1 | 	add	objptr, ##27148
039a4     F2 54 02 F6 | 	mov	local24, objptr
039a8     F2 52 02 F1 | 	add	local23, objptr
039ac     04 52 06 F1 | 	add	local23, #4
039b0     29 61 02 FB | 	rdlong	local30, local23
039b4     04 52 86 F1 | 	sub	local23, #4
039b8     30 5F 02 F6 | 	mov	local29, local30
039bc     01 00 00 FF 
039c0     04 5E 0E F2 | 	cmp	local29, ##516 wz
039c4     35 00 00 FF 
039c8     0C E4 85 F1 | 	sub	objptr, ##27148
039cc     84 00 90 5D |  if_ne	jmp	#LR__0187
039d0     37 85 02 F6 | 	mov	local48, local37
039d4     01 84 06 F1 | 	add	local48, #1
039d8     03 84 66 F0 | 	shl	local48, #3
039dc     35 00 00 FF 
039e0     0C E4 05 F1 | 	add	objptr, ##27148
039e4     F2 86 02 F6 | 	mov	local49, objptr
039e8     F2 84 02 F1 | 	add	local48, objptr
039ec     42 13 02 FB | 	rdlong	arg01, local48
039f0     01 14 06 F6 | 	mov	arg02, #1
039f4     35 00 00 FF 
039f8     0C E4 85 F1 | 	sub	objptr, ##27148
039fc     A4 57 B2 FD | 	call	#__system__Right_S
03a00     FD 12 02 F6 | 	mov	arg01, result1
03a04     B6 01 00 FF 
03a08     0B 89 06 F6 | 	mov	local50, ##@LR__5519
03a0c     44 8B 02 F6 | 	mov	local51, local50
03a10     45 15 02 F6 | 	mov	arg02, local51
03a14     AC 36 B2 FD | 	call	#__system___string_cmp
03a18     FD 62 0A F6 | 	mov	local31, result1 wz
03a1c     34 00 90 AD |  if_e	jmp	#LR__0187
03a20     37 39 02 F6 | 	mov	local10, local37
03a24     01 38 06 F1 | 	add	local10, #1
03a28     03 38 66 F0 | 	shl	local10, #3
03a2c     35 00 00 FF 
03a30     0C E4 05 F1 | 	add	objptr, ##27148
03a34     F2 38 02 F1 | 	add	local10, objptr
03a38     01 00 00 FF 
03a3c     03 30 06 F6 | 	mov	local06, ##515
03a40     04 38 06 F1 | 	add	local10, #4
03a44     01 00 80 FF 
03a48     1C 07 68 FC | 	wrlong	##515, local10
03a4c     35 00 00 FF 
03a50     0C E4 85 F1 | 	sub	objptr, ##27148
03a54                 | LR__0187
03a54                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03a54     B6 01 00 FF 
03a58     0D 15 06 F6 | 	mov	arg02, ##@LR__5520
03a5c     3B 13 02 F6 | 	mov	arg01, local41
03a60     60 36 B2 FD | 	call	#__system___string_cmp
03a64     00 FA 0D F2 | 	cmp	result1, #0 wz
03a68     1C 00 90 AD |  if_e	jmp	#LR__0188
03a6c     B6 01 00 FF 
03a70     14 2F 06 F6 | 	mov	local05, ##@LR__5521
03a74     3B 13 02 F6 | 	mov	arg01, local41
03a78     17 15 02 F6 | 	mov	arg02, local05
03a7c     44 36 B2 FD | 	call	#__system___string_cmp
03a80     00 FA 0D F2 | 	cmp	result1, #0 wz
03a84     CC 00 90 5D |  if_ne	jmp	#LR__0189
03a88                 | LR__0188
03a88     37 2F 02 F6 | 	mov	local05, local37
03a8c     01 2E 06 F1 | 	add	local05, #1
03a90     17 31 02 F6 | 	mov	local06, local05
03a94     03 30 66 F0 | 	shl	local06, #3
03a98     35 00 00 FF 
03a9c     0C E4 05 F1 | 	add	objptr, ##27148
03aa0     F2 3C 02 F6 | 	mov	local12, objptr
03aa4     F2 30 02 F1 | 	add	local06, objptr
03aa8     04 30 06 F1 | 	add	local06, #4
03aac     18 41 02 FB | 	rdlong	local14, local06
03ab0     04 30 86 F1 | 	sub	local06, #4
03ab4     20 3B 02 F6 | 	mov	local11, local14
03ab8     01 00 00 FF 
03abc     04 3A 0E F2 | 	cmp	local11, ##516 wz
03ac0     35 00 00 FF 
03ac4     0C E4 85 F1 | 	sub	objptr, ##27148
03ac8     88 00 90 5D |  if_ne	jmp	#LR__0189
03acc     37 53 02 F6 | 	mov	local23, local37
03ad0     01 52 06 F1 | 	add	local23, #1
03ad4     03 52 66 F0 | 	shl	local23, #3
03ad8     35 00 00 FF 
03adc     0C E4 05 F1 | 	add	objptr, ##27148
03ae0     F2 54 02 F6 | 	mov	local24, objptr
03ae4     F2 52 02 F1 | 	add	local23, objptr
03ae8     29 13 02 FB | 	rdlong	arg01, local23
03aec     01 14 06 F6 | 	mov	arg02, #1
03af0     35 00 00 FF 
03af4     0C E4 85 F1 | 	sub	objptr, ##27148
03af8     A8 56 B2 FD | 	call	#__system__Right_S
03afc     FD 12 02 F6 | 	mov	arg01, result1
03b00     B6 01 00 FF 
03b04     1A 51 06 F6 | 	mov	local22, ##@LR__5522
03b08     28 5D 02 F6 | 	mov	local28, local22
03b0c     2E 15 02 F6 | 	mov	arg02, local28
03b10     B0 35 B2 FD | 	call	#__system___string_cmp
03b14     FD 3E 0A F6 | 	mov	local13, result1 wz
03b18     38 00 90 AD |  if_e	jmp	#LR__0189
03b1c     37 39 02 F6 | 	mov	local10, local37
03b20     01 38 06 F1 | 	add	local10, #1
03b24     03 38 66 F0 | 	shl	local10, #3
03b28     35 00 00 FF 
03b2c     0C E4 05 F1 | 	add	objptr, ##27148
03b30     F2 2E 02 F6 | 	mov	local05, objptr
03b34     F2 38 02 F1 | 	add	local10, objptr
03b38     01 00 00 FF 
03b3c     03 30 06 F6 | 	mov	local06, ##515
03b40     04 38 06 F1 | 	add	local10, #4
03b44     01 00 80 FF 
03b48     1C 07 68 FC | 	wrlong	##515, local10
03b4c     35 00 00 FF 
03b50     0C E4 85 F1 | 	sub	objptr, ##27148
03b54                 | LR__0189
03b54                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03b54     B6 01 00 FF 
03b58     1C 15 06 F6 | 	mov	arg02, ##@LR__5523
03b5c     3B 13 02 F6 | 	mov	arg01, local41
03b60     60 35 B2 FD | 	call	#__system___string_cmp
03b64     00 FA 0D F2 | 	cmp	result1, #0 wz
03b68     C8 00 90 5D |  if_ne	jmp	#LR__0190
03b6c     37 2F 02 F6 | 	mov	local05, local37
03b70     01 2E 06 F1 | 	add	local05, #1
03b74     03 2E 66 F0 | 	shl	local05, #3
03b78     35 00 00 FF 
03b7c     0C E4 05 F1 | 	add	objptr, ##27148
03b80     F2 30 02 F6 | 	mov	local06, objptr
03b84     F2 2E 02 F1 | 	add	local05, objptr
03b88     04 2E 06 F1 | 	add	local05, #4
03b8c     17 3B 02 FB | 	rdlong	local11, local05
03b90     04 2E 86 F1 | 	sub	local05, #4
03b94     1D 3D 02 F6 | 	mov	local12, local11
03b98     01 00 00 FF 
03b9c     04 3C 0E F2 | 	cmp	local12, ##516 wz
03ba0     35 00 00 FF 
03ba4     0C E4 85 F1 | 	sub	objptr, ##27148
03ba8     88 00 90 5D |  if_ne	jmp	#LR__0190
03bac     37 51 02 F6 | 	mov	local22, local37
03bb0     01 50 06 F1 | 	add	local22, #1
03bb4     03 50 66 F0 | 	shl	local22, #3
03bb8     35 00 00 FF 
03bbc     0C E4 05 F1 | 	add	objptr, ##27148
03bc0     F2 52 02 F6 | 	mov	local23, objptr
03bc4     F2 50 02 F1 | 	add	local22, objptr
03bc8     28 13 02 FB | 	rdlong	arg01, local22
03bcc     01 14 06 F6 | 	mov	arg02, #1
03bd0     35 00 00 FF 
03bd4     0C E4 85 F1 | 	sub	objptr, ##27148
03bd8     C8 55 B2 FD | 	call	#__system__Right_S
03bdc     FD 12 02 F6 | 	mov	arg01, result1
03be0     B6 01 00 FF 
03be4     21 5D 06 F6 | 	mov	local28, ##@LR__5524
03be8     2E 3F 02 F6 | 	mov	local13, local28
03bec     1F 15 02 F6 | 	mov	arg02, local13
03bf0     D0 34 B2 FD | 	call	#__system___string_cmp
03bf4     FD 40 0A F6 | 	mov	local14, result1 wz
03bf8     38 00 90 AD |  if_e	jmp	#LR__0190
03bfc     37 39 02 F6 | 	mov	local10, local37
03c00     01 38 06 F1 | 	add	local10, #1
03c04     03 38 66 F0 | 	shl	local10, #3
03c08     35 00 00 FF 
03c0c     0C E4 05 F1 | 	add	objptr, ##27148
03c10     F2 2E 02 F6 | 	mov	local05, objptr
03c14     F2 38 02 F1 | 	add	local10, objptr
03c18     01 00 00 FF 
03c1c     03 30 06 F6 | 	mov	local06, ##515
03c20     04 38 06 F1 | 	add	local10, #4
03c24     01 00 80 FF 
03c28     1C 07 68 FC | 	wrlong	##515, local10
03c2c     35 00 00 FF 
03c30     0C E4 85 F1 | 	sub	objptr, ##27148
03c34                 | LR__0190
03c34                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03c34     B6 01 00 FF 
03c38     23 15 06 F6 | 	mov	arg02, ##@LR__5525
03c3c     3B 13 02 F6 | 	mov	arg01, local41
03c40     80 34 B2 FD | 	call	#__system___string_cmp
03c44     00 FA 0D F2 | 	cmp	result1, #0 wz
03c48     C8 00 90 5D |  if_ne	jmp	#LR__0191
03c4c     37 2F 02 F6 | 	mov	local05, local37
03c50     03 2E 06 F1 | 	add	local05, #3
03c54     03 2E 66 F0 | 	shl	local05, #3
03c58     35 00 00 FF 
03c5c     0C E4 05 F1 | 	add	objptr, ##27148
03c60     F2 30 02 F6 | 	mov	local06, objptr
03c64     F2 2E 02 F1 | 	add	local05, objptr
03c68     04 2E 06 F1 | 	add	local05, #4
03c6c     17 3B 02 FB | 	rdlong	local11, local05
03c70     04 2E 86 F1 | 	sub	local05, #4
03c74     1D 3D 02 F6 | 	mov	local12, local11
03c78     01 00 00 FF 
03c7c     04 3C 0E F2 | 	cmp	local12, ##516 wz
03c80     35 00 00 FF 
03c84     0C E4 85 F1 | 	sub	objptr, ##27148
03c88     88 00 90 5D |  if_ne	jmp	#LR__0191
03c8c     37 51 02 F6 | 	mov	local22, local37
03c90     03 50 06 F1 | 	add	local22, #3
03c94     03 50 66 F0 | 	shl	local22, #3
03c98     35 00 00 FF 
03c9c     0C E4 05 F1 | 	add	objptr, ##27148
03ca0     F2 52 02 F6 | 	mov	local23, objptr
03ca4     F2 50 02 F1 | 	add	local22, objptr
03ca8     28 13 02 FB | 	rdlong	arg01, local22
03cac     01 14 06 F6 | 	mov	arg02, #1
03cb0     35 00 00 FF 
03cb4     0C E4 85 F1 | 	sub	objptr, ##27148
03cb8     E8 54 B2 FD | 	call	#__system__Right_S
03cbc     FD 12 02 F6 | 	mov	arg01, result1
03cc0     B6 01 00 FF 
03cc4     28 5D 06 F6 | 	mov	local28, ##@LR__5526
03cc8     2E 3F 02 F6 | 	mov	local13, local28
03ccc     1F 15 02 F6 | 	mov	arg02, local13
03cd0     F0 33 B2 FD | 	call	#__system___string_cmp
03cd4     FD 40 0A F6 | 	mov	local14, result1 wz
03cd8     38 00 90 AD |  if_e	jmp	#LR__0191
03cdc     37 39 02 F6 | 	mov	local10, local37
03ce0     03 38 06 F1 | 	add	local10, #3
03ce4     03 38 66 F0 | 	shl	local10, #3
03ce8     35 00 00 FF 
03cec     0C E4 05 F1 | 	add	objptr, ##27148
03cf0     F2 2E 02 F6 | 	mov	local05, objptr
03cf4     F2 38 02 F1 | 	add	local10, objptr
03cf8     01 00 00 FF 
03cfc     03 30 06 F6 | 	mov	local06, ##515
03d00     04 38 06 F1 | 	add	local10, #4
03d04     01 00 80 FF 
03d08     1C 07 68 FC | 	wrlong	##515, local10
03d0c     35 00 00 FF 
03d10     0C E4 85 F1 | 	sub	objptr, ##27148
03d14                 | LR__0191
03d14                 | ' 
03d14                 | ' ' cd needs special treatment..
03d14                 | ' 
03d14                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03d14     B6 01 00 FF 
03d18     2A 15 06 F6 | 	mov	arg02, ##@LR__5527
03d1c     3B 13 02 F6 | 	mov	arg01, local41
03d20     A0 33 B2 FD | 	call	#__system___string_cmp
03d24     00 FA 0D F2 | 	cmp	result1, #0 wz
03d28     38 00 90 5D |  if_ne	jmp	#LR__0192
03d2c     37 39 02 F6 | 	mov	local10, local37
03d30     01 38 06 F1 | 	add	local10, #1
03d34     03 38 66 F0 | 	shl	local10, #3
03d38     35 00 00 FF 
03d3c     0C E4 05 F1 | 	add	objptr, ##27148
03d40     F2 2E 02 F6 | 	mov	local05, objptr
03d44     F2 38 02 F1 | 	add	local10, objptr
03d48     01 00 00 FF 
03d4c     03 30 06 F6 | 	mov	local06, ##515
03d50     04 38 06 F1 | 	add	local10, #4
03d54     01 00 80 FF 
03d58     1C 07 68 FC | 	wrlong	##515, local10
03d5c     35 00 00 FF 
03d60     0C E4 85 F1 | 	sub	objptr, ##27148
03d64                 | LR__0192
03d64                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03d64     B6 01 00 FF 
03d68     2D 15 06 F6 | 	mov	arg02, ##@LR__5528
03d6c     3B 13 02 F6 | 	mov	arg01, local41
03d70     50 33 B2 FD | 	call	#__system___string_cmp
03d74     00 FA 0D F2 | 	cmp	result1, #0 wz
03d78     A4 00 90 5D |  if_ne	jmp	#LR__0193
03d7c     37 31 02 F6 | 	mov	local06, local37
03d80     01 30 06 F1 | 	add	local06, #1
03d84     03 30 66 F0 | 	shl	local06, #3
03d88     35 00 00 FF 
03d8c     0C E4 05 F1 | 	add	objptr, ##27148
03d90     F2 3C 02 F6 | 	mov	local12, objptr
03d94     F2 30 02 F1 | 	add	local06, objptr
03d98     18 13 02 FB | 	rdlong	arg01, local06
03d9c     B6 01 00 FF 
03da0     31 2F 06 F6 | 	mov	local05, ##@LR__5529
03da4     17 15 02 F6 | 	mov	arg02, local05
03da8     35 00 00 FF 
03dac     0C E4 85 F1 | 	sub	objptr, ##27148
03db0     10 33 B2 FD | 	call	#__system___string_cmp
03db4     00 FA 0D F2 | 	cmp	result1, #0 wz
03db8     64 00 90 5D |  if_ne	jmp	#LR__0193
03dbc     37 39 02 F6 | 	mov	local10, local37
03dc0     01 38 06 F1 | 	add	local10, #1
03dc4     03 38 66 F0 | 	shl	local10, #3
03dc8     35 00 00 FF 
03dcc     0C E4 05 F1 | 	add	objptr, ##27148
03dd0     F2 38 02 F1 | 	add	local10, objptr
03dd4     04 38 06 F1 | 	add	local10, #4
03dd8     01 00 80 FF 
03ddc     1C 07 68 FC | 	wrlong	##515, local10
03de0     37 39 02 F6 | 	mov	local10, local37
03de4     01 38 06 F1 | 	add	local10, #1
03de8     03 38 66 F0 | 	shl	local10, #3
03dec     F2 38 02 F1 | 	add	local10, objptr
03df0     B6 01 00 FF 
03df4     33 31 06 F6 | 	mov	local06, ##@LR__5530
03df8     1C 31 62 FC | 	wrlong	local06, local10
03dfc     37 39 02 F6 | 	mov	local10, local37
03e00     03 38 66 F0 | 	shl	local10, #3
03e04     F2 2E 02 F6 | 	mov	local05, objptr
03e08     F2 38 02 F1 | 	add	local10, objptr
03e0c     C3 30 06 F6 | 	mov	local06, #195
03e10     04 38 06 F1 | 	add	local10, #4
03e14     1C 87 69 FC | 	wrlong	#195, local10
03e18     35 00 00 FF 
03e1c     0C E4 85 F1 | 	sub	objptr, ##27148
03e20                 | LR__0193
03e20                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03e20     B6 01 00 FF 
03e24     36 39 06 F6 | 	mov	local10, ##@LR__5531
03e28     3B 13 02 F6 | 	mov	arg01, local41
03e2c     1C 15 02 F6 | 	mov	arg02, local10
03e30     90 32 B2 FD | 	call	#__system___string_cmp
03e34     00 FA 0D F2 | 	cmp	result1, #0 wz
03e38     04 01 90 5D |  if_ne	jmp	#LR__0196
03e3c     37 31 02 F6 | 	mov	local06, local37
03e40     01 30 06 F1 | 	add	local06, #1
03e44     03 30 66 F0 | 	shl	local06, #3
03e48     35 00 00 FF 
03e4c     0C E4 05 F1 | 	add	objptr, ##27148
03e50     F2 3C 02 F6 | 	mov	local12, objptr
03e54     F2 30 02 F1 | 	add	local06, objptr
03e58     18 13 02 FB | 	rdlong	arg01, local06
03e5c     B6 01 00 FF 
03e60     39 2F 06 F6 | 	mov	local05, ##@LR__5532
03e64     17 39 02 F6 | 	mov	local10, local05
03e68     1C 15 02 F6 | 	mov	arg02, local10
03e6c     35 00 00 FF 
03e70     0C E4 85 F1 | 	sub	objptr, ##27148
03e74     4C 32 B2 FD | 	call	#__system___string_cmp
03e78     00 FA 0D F2 | 	cmp	result1, #0 wz
03e7c     C0 00 90 5D |  if_ne	jmp	#LR__0196
03e80     37 39 02 F6 | 	mov	local10, local37
03e84     01 38 06 F1 | 	add	local10, #1
03e88     03 38 66 F0 | 	shl	local10, #3
03e8c     35 00 00 FF 
03e90     0C E4 05 F1 | 	add	objptr, ##27148
03e94     F2 2E 02 F6 | 	mov	local05, objptr
03e98     F2 38 02 F1 | 	add	local10, objptr
03e9c     01 00 00 FF 
03ea0     03 30 06 F6 | 	mov	local06, ##515
03ea4     04 38 06 F1 | 	add	local10, #4
03ea8     01 00 80 FF 
03eac     1C 07 68 FC | 	wrlong	##515, local10
03eb0     04 38 86 F1 | 	sub	local10, #4
03eb4     37 29 02 F6 | 	mov	local02, local37
03eb8     02 28 06 F1 | 	add	local02, #2
03ebc     23 8D 02 F6 | 	mov	local52, local17
03ec0     01 8C 06 F1 | 	add	local52, #1
03ec4     35 00 00 FF 
03ec8     0C E4 85 F1 | 	sub	objptr, ##27148
03ecc                 | LR__0194
03ecc     46 29 52 F2 | 	cmps	local02, local52 wc
03ed0     6C 00 90 3D |  if_ae	jmp	#LR__0195
03ed4     14 39 02 F6 | 	mov	local10, local02
03ed8     03 38 66 F0 | 	shl	local10, #3
03edc     35 00 00 FF 
03ee0     0C E4 05 F1 | 	add	objptr, ##27148
03ee4     F2 38 02 F1 | 	add	local10, objptr
03ee8     1C 8F 02 FB | 	rdlong	local53, local10
03eec     37 39 02 F6 | 	mov	local10, local37
03ef0     01 38 06 F1 | 	add	local10, #1
03ef4     03 38 66 F0 | 	shl	local10, #3
03ef8     F2 2E 02 F6 | 	mov	local05, objptr
03efc     F2 38 02 F1 | 	add	local10, objptr
03f00     37 3B 02 F6 | 	mov	local11, local37
03f04     01 3A 06 F1 | 	add	local11, #1
03f08     1D 41 02 F6 | 	mov	local14, local11
03f0c     03 40 66 F0 | 	shl	local14, #3
03f10     F2 3E 02 F6 | 	mov	local13, objptr
03f14     F2 40 02 F1 | 	add	local14, objptr
03f18     20 13 02 FB | 	rdlong	arg01, local14
03f1c     47 3D 02 F6 | 	mov	local12, local53
03f20     1E 15 02 F6 | 	mov	arg02, local12
03f24     35 00 00 FF 
03f28     0C E4 85 F1 | 	sub	objptr, ##27148
03f2c     C8 31 B2 FD | 	call	#__system___string_concat
03f30     FD 30 02 F6 | 	mov	local06, result1
03f34     1C 31 62 FC | 	wrlong	local06, local10
03f38     01 28 06 F1 | 	add	local02, #1
03f3c     8C FF 9F FD | 	jmp	#LR__0194
03f40                 | LR__0195
03f40                 | LR__0196
03f40                 | ' 
03f40                 | ' ' determine a type of the line and compile it
03f40                 | ' 
03f40                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03f40     35 00 00 FF 
03f44     0C E4 05 F1 | 	add	objptr, ##27148
03f48     F2 12 02 FB | 	rdlong	arg01, objptr
03f4c     35 00 00 FF 
03f50     0C E4 85 F1 | 	sub	objptr, ##27148
03f54     A8 30 B0 FD | 	call	#_isdec
03f58     00 FA 0D F2 | 	cmp	result1, #0 wz
03f5c     30 00 90 AD |  if_e	jmp	#LR__0197
03f60     35 00 00 FF 
03f64     0C E4 05 F1 | 	add	objptr, ##27148
03f68     F2 12 02 FB | 	rdlong	arg01, objptr
03f6c     35 00 00 FF 
03f70     0C E4 85 F1 | 	sub	objptr, ##27148
03f74     00 14 06 F6 | 	mov	arg02, #0
03f78     14 66 B2 FD | 	call	#__system____builtin_atoi
03f7c     52 00 00 FF 
03f80     B0 E4 05 F1 | 	add	objptr, ##42160
03f84     F2 FA 61 FC | 	wrlong	result1, objptr
03f88     52 00 00 FF 
03f8c     B0 E4 85 F1 | 	sub	objptr, ##42160
03f90                 | LR__0197
03f90                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03f90     52 00 00 FF 
03f94     B0 E4 05 F1 | 	add	objptr, ##42160
03f98     F2 2C 02 FB | 	rdlong	local04, objptr
03f9c     52 00 00 FF 
03fa0     B0 E4 85 F1 | 	sub	objptr, ##42160
03fa4     01 2C 16 F2 | 	cmp	local04, #1 wc
03fa8     40 00 90 CD |  if_b	jmp	#LR__0198
03fac     01 46 0E F2 | 	cmp	local17, #1 wz
03fb0     37 00 00 AF 
03fb4     24 E4 05 A1 |  if_e	add	objptr, ##28196
03fb8     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03fbc     37 00 00 AF 
03fc0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03fc4     17 39 02 A6 |  if_e	mov	local10, local05
03fc8     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03fcc     1C 00 90 5D |  if_ne	jmp	#LR__0198
03fd0     52 00 00 FF 
03fd4     B0 E4 05 F1 | 	add	objptr, ##42160
03fd8     F2 12 02 FB | 	rdlong	arg01, objptr
03fdc     52 00 00 FF 
03fe0     B0 E4 85 F1 | 	sub	objptr, ##42160
03fe4     C4 31 B0 FD | 	call	#_deleteline
03fe8     C8 03 90 FD | 	jmp	#LR__0209
03fec                 | LR__0198
03fec                 | ' 
03fec                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03fec     37 00 00 FF 
03ff0     24 E4 05 F1 | 	add	objptr, ##28196
03ff4     F2 2C 0A FB | 	rdlong	local04, objptr wz
03ff8     37 00 00 FF 
03ffc     24 E4 85 F1 | 	sub	objptr, ##28196
04000     20 00 90 AD |  if_e	jmp	#LR__0199
04004     37 00 00 FF 
04008     24 E4 05 F1 | 	add	objptr, ##28196
0400c     F2 2E 02 FB | 	rdlong	local05, objptr
04010     37 00 00 FF 
04014     24 E4 85 F1 | 	sub	objptr, ##28196
04018     17 39 02 F6 | 	mov	local10, local05
0401c     03 38 0E F2 | 	cmp	local10, #3 wz
04020     C0 00 90 5D |  if_ne	jmp	#LR__0201
04024                 | LR__0199
04024     35 00 00 FF 
04028     20 E4 05 F1 | 	add	objptr, ##27168
0402c     F2 3C 02 FB | 	rdlong	local12, objptr
04030     35 00 00 FF 
04034     20 E4 85 F1 | 	sub	objptr, ##27168
04038     1B 3C 0E F2 | 	cmp	local12, #27 wz
0403c     A4 00 90 AD |  if_e	jmp	#LR__0201
04040     52 00 00 FF 
04044     B0 E4 05 F1 | 	add	objptr, ##42160
04048     F2 12 02 FB | 	rdlong	arg01, objptr
0404c     1B 00 00 FF 
04050     8C E4 85 F1 | 	sub	objptr, ##13964
04054     F2 16 02 FB | 	rdlong	arg03, objptr
04058     37 00 00 FF 
0405c     24 E4 85 F1 | 	sub	objptr, ##28196
04060     00 14 06 F6 | 	mov	arg02, #0
04064     C0 45 B0 FD | 	call	#_compile
04068     FD 26 0A F6 | 	mov	local01, result1 wz
0406c                 | '   err=compile(linenum,0,cont) 
0406c                 | '   if err<>0 then printerror(err,linenum): goto 101
0406c     20 00 90 AD |  if_e	jmp	#LR__0200
04070     52 00 00 FF 
04074     B0 E4 05 F1 | 	add	objptr, ##42160
04078     F2 14 02 FB | 	rdlong	arg02, objptr
0407c     52 00 00 FF 
04080     B0 E4 85 F1 | 	sub	objptr, ##42160
04084     13 13 02 F6 | 	mov	arg01, local01
04088     60 F5 B1 FD | 	call	#_printerror
0408c     44 03 90 FD | 	jmp	#LR__0210
04090                 | LR__0200
04090                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
04090     52 00 00 FF 
04094     F4 E4 05 F1 | 	add	objptr, ##42228
04098     F2 12 02 FB | 	rdlong	arg01, objptr
0409c     52 00 00 FF 
040a0     F4 E4 85 F1 | 	sub	objptr, ##42228
040a4     B6 01 00 FF 
040a8     3B 15 06 F6 | 	mov	arg02, ##@LR__5533
040ac     14 30 B2 FD | 	call	#__system___string_cmp
040b0     00 FA 0D F2 | 	cmp	result1, #0 wz
040b4     FC 02 90 AD |  if_e	jmp	#LR__0209
040b8     52 00 00 FF 
040bc     F4 E4 05 F1 | 	add	objptr, ##42228
040c0     F2 2C 02 FB | 	rdlong	local04, objptr
040c4     1B 00 00 FF 
040c8     D8 E4 85 F1 | 	sub	objptr, ##14040
040cc     F2 2C 62 FC | 	wrlong	local04, objptr
040d0     08 E4 05 F1 | 	add	objptr, #8
040d4     F2 08 68 FC | 	wrlong	#4, objptr
040d8     37 00 00 FF 
040dc     24 E4 85 F1 | 	sub	objptr, ##28196
040e0     B0 D7 9F FD | 	jmp	#LR__0070
040e4                 | LR__0201
040e4                 | '       							
040e4                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
040e4     37 00 00 FF 
040e8     24 E4 05 F1 | 	add	objptr, ##28196
040ec     F2 2C 02 FB | 	rdlong	local04, objptr
040f0     37 00 00 FF 
040f4     24 E4 85 F1 | 	sub	objptr, ##28196
040f8     01 2C 0E F2 | 	cmp	local04, #1 wz
040fc     37 00 00 5F 
04100     24 E4 05 51 |  if_ne	add	objptr, ##28196
04104     F2 38 02 5B |  if_ne	rdlong	local10, objptr
04108     37 00 00 5F 
0410c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
04110     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
04114     C0 00 90 5D |  if_ne	jmp	#LR__0203
04118     35 00 00 FF 
0411c     18 E4 05 F1 | 	add	objptr, ##27160
04120     F2 3C 02 FB | 	rdlong	local12, objptr
04124     35 00 00 FF 
04128     18 E4 85 F1 | 	sub	objptr, ##27160
0412c     1B 3C 0E F2 | 	cmp	local12, #27 wz
04130     A4 00 90 AD |  if_e	jmp	#LR__0203
04134     52 00 00 FF 
04138     B0 E4 05 F1 | 	add	objptr, ##42160
0413c     F2 12 02 FB | 	rdlong	arg01, objptr
04140     1B 00 00 FF 
04144     8C E4 85 F1 | 	sub	objptr, ##13964
04148     F2 16 02 FB | 	rdlong	arg03, objptr
0414c     37 00 00 FF 
04150     24 E4 85 F1 | 	sub	objptr, ##28196
04154     00 14 06 F6 | 	mov	arg02, #0
04158     CC 44 B0 FD | 	call	#_compile
0415c     FD 26 0A F6 | 	mov	local01, result1 wz
04160                 | '   err=compile(linenum,0,cont) 
04160                 | '   if err<>0 then printerror(err,linenum): goto 101
04160     20 00 90 AD |  if_e	jmp	#LR__0202
04164     52 00 00 FF 
04168     B0 E4 05 F1 | 	add	objptr, ##42160
0416c     F2 14 02 FB | 	rdlong	arg02, objptr
04170     52 00 00 FF 
04174     B0 E4 85 F1 | 	sub	objptr, ##42160
04178     13 13 02 F6 | 	mov	arg01, local01
0417c     6C F4 B1 FD | 	call	#_printerror
04180     50 02 90 FD | 	jmp	#LR__0210
04184                 | LR__0202
04184                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
04184     52 00 00 FF 
04188     F4 E4 05 F1 | 	add	objptr, ##42228
0418c     F2 12 02 FB | 	rdlong	arg01, objptr
04190     52 00 00 FF 
04194     F4 E4 85 F1 | 	sub	objptr, ##42228
04198     B6 01 00 FF 
0419c     3C 15 06 F6 | 	mov	arg02, ##@LR__5534
041a0     20 2F B2 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     08 02 90 AD |  if_e	jmp	#LR__0209
041ac     52 00 00 FF 
041b0     F4 E4 05 F1 | 	add	objptr, ##42228
041b4     F2 2C 02 FB | 	rdlong	local04, objptr
041b8     1B 00 00 FF 
041bc     D8 E4 85 F1 | 	sub	objptr, ##14040
041c0     F2 2C 62 FC | 	wrlong	local04, objptr
041c4     08 E4 05 F1 | 	add	objptr, #8
041c8     F2 08 68 FC | 	wrlong	#4, objptr
041cc     37 00 00 FF 
041d0     24 E4 85 F1 | 	sub	objptr, ##28196
041d4     BC D6 9F FD | 	jmp	#LR__0070
041d8                 | LR__0203
041d8                 | ' 							 
041d8                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
041d8     37 00 00 FF 
041dc     24 E4 05 F1 | 	add	objptr, ##28196
041e0     F2 2C 0A FB | 	rdlong	local04, objptr wz
041e4     37 00 00 FF 
041e8     24 E4 85 F1 | 	sub	objptr, ##28196
041ec     37 00 00 5F 
041f0     24 E4 05 51 |  if_ne	add	objptr, ##28196
041f4     F2 38 02 5B |  if_ne	rdlong	local10, objptr
041f8     37 00 00 5F 
041fc     24 E4 85 51 |  if_ne	sub	objptr, ##28196
04200     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
04204     35 00 00 AF 
04208     20 E4 05 A1 |  if_e	add	objptr, ##27168
0420c     F2 3C 02 AB |  if_e	rdlong	local12, objptr
04210     35 00 00 AF 
04214     20 E4 85 A1 |  if_e	sub	objptr, ##27168
04218     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
0421c     A4 00 90 5D |  if_ne	jmp	#LR__0205
04220     52 00 00 FF 
04224     B0 E4 05 F1 | 	add	objptr, ##42160
04228     F2 12 02 FB | 	rdlong	arg01, objptr
0422c     1B 00 00 FF 
04230     8C E4 85 F1 | 	sub	objptr, ##13964
04234     F2 16 02 FB | 	rdlong	arg03, objptr
04238     37 00 00 FF 
0423c     24 E4 85 F1 | 	sub	objptr, ##28196
04240     00 14 06 F6 | 	mov	arg02, #0
04244     A8 44 B0 FD | 	call	#_compile_assign
04248     FD 26 0A F6 | 	mov	local01, result1 wz
0424c                 | '   err=compile_assign(linenum,0,cont)
0424c                 | '   if err<>0 then printerror(err,linenum): goto 101
0424c     20 00 90 AD |  if_e	jmp	#LR__0204
04250     52 00 00 FF 
04254     B0 E4 05 F1 | 	add	objptr, ##42160
04258     F2 14 02 FB | 	rdlong	arg02, objptr
0425c     52 00 00 FF 
04260     B0 E4 85 F1 | 	sub	objptr, ##42160
04264     13 13 02 F6 | 	mov	arg01, local01
04268     80 F3 B1 FD | 	call	#_printerror
0426c     64 01 90 FD | 	jmp	#LR__0210
04270                 | LR__0204
04270                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
04270     52 00 00 FF 
04274     F4 E4 05 F1 | 	add	objptr, ##42228
04278     F2 12 02 FB | 	rdlong	arg01, objptr
0427c     52 00 00 FF 
04280     F4 E4 85 F1 | 	sub	objptr, ##42228
04284     B6 01 00 FF 
04288     3D 15 06 F6 | 	mov	arg02, ##@LR__5535
0428c     34 2E B2 FD | 	call	#__system___string_cmp
04290     00 FA 0D F2 | 	cmp	result1, #0 wz
04294     1C 01 90 AD |  if_e	jmp	#LR__0209
04298     52 00 00 FF 
0429c     F4 E4 05 F1 | 	add	objptr, ##42228
042a0     F2 2C 02 FB | 	rdlong	local04, objptr
042a4     1B 00 00 FF 
042a8     D8 E4 85 F1 | 	sub	objptr, ##14040
042ac     F2 2C 62 FC | 	wrlong	local04, objptr
042b0     08 E4 05 F1 | 	add	objptr, #8
042b4     F2 08 68 FC | 	wrlong	#4, objptr
042b8     37 00 00 FF 
042bc     24 E4 85 F1 | 	sub	objptr, ##28196
042c0     D0 D5 9F FD | 	jmp	#LR__0070
042c4                 | LR__0205
042c4                 | '     							 
042c4                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
042c4     37 00 00 FF 
042c8     24 E4 05 F1 | 	add	objptr, ##28196
042cc     F2 2C 02 FB | 	rdlong	local04, objptr
042d0     37 00 00 FF 
042d4     24 E4 85 F1 | 	sub	objptr, ##28196
042d8     01 2C 0E F2 | 	cmp	local04, #1 wz
042dc     37 00 00 5F 
042e0     24 E4 05 51 |  if_ne	add	objptr, ##28196
042e4     F2 38 02 5B |  if_ne	rdlong	local10, objptr
042e8     37 00 00 5F 
042ec     24 E4 85 51 |  if_ne	sub	objptr, ##28196
042f0     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
042f4     35 00 00 AF 
042f8     18 E4 05 A1 |  if_e	add	objptr, ##27160
042fc     F2 3C 02 AB |  if_e	rdlong	local12, objptr
04300     35 00 00 AF 
04304     18 E4 85 A1 |  if_e	sub	objptr, ##27160
04308     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
0430c     A4 00 90 5D |  if_ne	jmp	#LR__0208
04310     52 00 00 FF 
04314     B0 E4 05 F1 | 	add	objptr, ##42160
04318     F2 12 02 FB | 	rdlong	arg01, objptr
0431c     1B 00 00 FF 
04320     8C E4 85 F1 | 	sub	objptr, ##13964
04324     F2 16 02 FB | 	rdlong	arg03, objptr
04328     37 00 00 FF 
0432c     24 E4 85 F1 | 	sub	objptr, ##28196
04330     00 14 06 F6 | 	mov	arg02, #0
04334     B8 43 B0 FD | 	call	#_compile_assign
04338     FD 26 0A F6 | 	mov	local01, result1 wz
0433c                 | '   err=compile_assign(linenum,0,cont) 
0433c                 | '   if err<>0 then printerror(err,linenum): goto 101
0433c     20 00 90 AD |  if_e	jmp	#LR__0206
04340     52 00 00 FF 
04344     B0 E4 05 F1 | 	add	objptr, ##42160
04348     F2 14 02 FB | 	rdlong	arg02, objptr
0434c     52 00 00 FF 
04350     B0 E4 85 F1 | 	sub	objptr, ##42160
04354     13 13 02 F6 | 	mov	arg01, local01
04358     90 F2 B1 FD | 	call	#_printerror
0435c     74 00 90 FD | 	jmp	#LR__0210
04360                 | LR__0206
04360                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
04360     52 00 00 FF 
04364     F4 E4 05 F1 | 	add	objptr, ##42228
04368     F2 12 02 FB | 	rdlong	arg01, objptr
0436c     52 00 00 FF 
04370     F4 E4 85 F1 | 	sub	objptr, ##42228
04374     B6 01 00 FF 
04378     3E 15 06 F6 | 	mov	arg02, ##@LR__5536
0437c     44 2D B2 FD | 	call	#__system___string_cmp
04380     00 FA 4D F2 | 	cmps	result1, #0 wz
04384     2C 00 90 AD |  if_e	jmp	#LR__0207
04388     52 00 00 FF 
0438c     F4 E4 05 F1 | 	add	objptr, ##42228
04390     F2 2C 02 FB | 	rdlong	local04, objptr
04394     1B 00 00 FF 
04398     D8 E4 85 F1 | 	sub	objptr, ##14040
0439c     F2 2C 62 FC | 	wrlong	local04, objptr
043a0     08 E4 05 F1 | 	add	objptr, #8
043a4     F2 08 68 FC | 	wrlong	#4, objptr
043a8     37 00 00 FF 
043ac     24 E4 85 F1 | 	sub	objptr, ##28196
043b0     E0 D4 9F FD | 	jmp	#LR__0070
043b4                 | LR__0207
043b4                 | LR__0208
043b4                 | LR__0209
043b4                 | ' 
043b4                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
043b4     52 00 00 FF 
043b8     B0 E4 05 F1 | 	add	objptr, ##42160
043bc     F2 2C 0A FB | 	rdlong	local04, objptr wz
043c0     52 00 00 FF 
043c4     B0 E4 85 F1 | 	sub	objptr, ##42160
043c8     B0 00 90 5D |  if_ne	jmp	#LR__0213
043cc     02 12 06 F6 | 	mov	arg01, #2
043d0     30 92 B0 FD | 	call	#_execute_line
043d4                 | LR__0210
043d4                 | '   execute_line(2)
043d4                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
043d4     52 00 00 FF 
043d8     D4 E4 05 F1 | 	add	objptr, ##42196
043dc     F2 2C 0A FB | 	rdlong	local04, objptr wz
043e0     52 00 00 FF 
043e4     D4 E4 85 F1 | 	sub	objptr, ##42196
043e8     20 00 90 5D |  if_ne	jmp	#LR__0211
043ec     B6 01 00 FF 
043f0     3F 13 06 F6 | 	mov	arg01, ##@LR__5537
043f4                 | ' 
043f4                 | ' write(text)
043f4     70 13 B2 FD | 	call	#_hg010b_spin2_write
043f8                 | ' crlf
043f8     6C 18 B2 FD | 	call	#_hg010b_spin2_crlf
043fc     B6 01 00 FF 
04400     40 13 06 F6 | 	mov	arg01, ##@LR__5538
04404                 | ' 
04404                 | ' write(text)
04404     60 13 B2 FD | 	call	#_hg010b_spin2_write
04408                 | ' crlf
04408     5C 18 B2 FD | 	call	#_hg010b_spin2_crlf
0440c                 | LR__0211
0440c                 | '     if inload=1 andalso err>0 then print fullline$
0440c     52 00 00 FF 
04410     D4 E4 05 F1 | 	add	objptr, ##42196
04414     F2 2C 02 FB | 	rdlong	local04, objptr
04418     52 00 00 FF 
0441c     D4 E4 85 F1 | 	sub	objptr, ##42196
04420     01 2C 0E F2 | 	cmp	local04, #1 wz
04424     54 00 90 5D |  if_ne	jmp	#LR__0212
04428     01 26 56 F2 | 	cmps	local01, #1 wc
0442c     4C 00 90 CD |  if_b	jmp	#LR__0212
04430     00 12 06 F6 | 	mov	arg01, #0
04434     08 89 B2 FD | 	call	#__system___getiolock_0614
04438     FD 12 02 F6 | 	mov	arg01, result1
0443c     5C 2C B2 FD | 	call	#__system___lockmem
04440     37 00 00 FF 
04444     20 E4 05 F1 | 	add	objptr, ##28192
04448     F2 14 02 FB | 	rdlong	arg02, objptr
0444c     37 00 00 FF 
04450     20 E4 85 F1 | 	sub	objptr, ##28192
04454     00 12 06 F6 | 	mov	arg01, #0
04458     00 16 06 F6 | 	mov	arg03, #0
0445c     34 39 B2 FD | 	call	#__system___basic_print_string
04460     00 12 06 F6 | 	mov	arg01, #0
04464     0A 14 06 F6 | 	mov	arg02, #10
04468     00 16 06 F6 | 	mov	arg03, #0
0446c     CC 38 B2 FD | 	call	#__system___basic_print_char
04470     00 12 06 F6 | 	mov	arg01, #0
04474     C8 88 B2 FD | 	call	#__system___getiolock_0614
04478     FD 00 68 FC | 	wrlong	#0, result1
0447c                 | LR__0212
0447c                 | LR__0213
0447c     A7 F0 03 F6 | 	mov	ptra, fp
04480     B2 00 A0 FD | 	call	#popregs_
04484                 | _interpret_ret
04484     2D 00 64 FD | 	ret
04488                 | 
04488                 | ' 
04488                 | ' '---------------------------------------------------------------------------------------------------------------------
04488                 | ' '
04488                 | ' '                          END OF TOKENIZER MAIN CODE
04488                 | ' '
04488                 | ' '---------------------------------------------------------------------------------------------------------------------
04488                 | ' 
04488                 | ' '---------------------------------------------------------------------------------------------------------------------
04488                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
04488                 | ' '---------------------------------------------------------------------------------------------------------------------
04488                 | ' 
04488                 | ' ' Check if the part is an operator, return a token or 0 if not found
04488                 | ' 
04488                 | ' function isoperator(s as string) as ubyte
04488                 | _isoperator
04488     01 4A 05 F6 | 	mov	COUNT_, #1
0448c     A8 00 A0 FD | 	call	#pushregs_
04490                 | ' 
04490                 | ' select case s
04490     09 27 02 F6 | 	mov	local01, arg01
04494     B6 01 00 FF 
04498     46 15 06 F6 | 	mov	arg02, ##@LR__5539
0449c     13 13 02 F6 | 	mov	arg01, local01
044a0     20 2C B2 FD | 	call	#__system___string_cmp
044a4     00 FA 0D F2 | 	cmp	result1, #0 wz
044a8     FC 01 90 AD |  if_e	jmp	#LR__0220
044ac     B6 01 00 FF 
044b0     48 15 06 F6 | 	mov	arg02, ##@LR__5540
044b4     13 13 02 F6 | 	mov	arg01, local01
044b8     08 2C B2 FD | 	call	#__system___string_cmp
044bc     00 FA 0D F2 | 	cmp	result1, #0 wz
044c0     EC 01 90 AD |  if_e	jmp	#LR__0221
044c4     B6 01 00 FF 
044c8     4A 15 06 F6 | 	mov	arg02, ##@LR__5541
044cc     13 13 02 F6 | 	mov	arg01, local01
044d0     F0 2B B2 FD | 	call	#__system___string_cmp
044d4     00 FA 0D F2 | 	cmp	result1, #0 wz
044d8     DC 01 90 AD |  if_e	jmp	#LR__0222
044dc     B6 01 00 FF 
044e0     4D 15 06 F6 | 	mov	arg02, ##@LR__5542
044e4     13 13 02 F6 | 	mov	arg01, local01
044e8     D8 2B B2 FD | 	call	#__system___string_cmp
044ec     00 FA 0D F2 | 	cmp	result1, #0 wz
044f0     CC 01 90 AD |  if_e	jmp	#LR__0223
044f4     B6 01 00 FF 
044f8     51 15 06 F6 | 	mov	arg02, ##@LR__5543
044fc     13 13 02 F6 | 	mov	arg01, local01
04500     C0 2B B2 FD | 	call	#__system___string_cmp
04504     00 FA 0D F2 | 	cmp	result1, #0 wz
04508     BC 01 90 AD |  if_e	jmp	#LR__0224
0450c     B6 01 00 FF 
04510     53 15 06 F6 | 	mov	arg02, ##@LR__5544
04514     13 13 02 F6 | 	mov	arg01, local01
04518     A8 2B B2 FD | 	call	#__system___string_cmp
0451c     00 FA 0D F2 | 	cmp	result1, #0 wz
04520     AC 01 90 AD |  if_e	jmp	#LR__0225
04524     B6 01 00 FF 
04528     55 15 06 F6 | 	mov	arg02, ##@LR__5545
0452c     13 13 02 F6 | 	mov	arg01, local01
04530     90 2B B2 FD | 	call	#__system___string_cmp
04534     00 FA 0D F2 | 	cmp	result1, #0 wz
04538     9C 01 90 AD |  if_e	jmp	#LR__0226
0453c     B6 01 00 FF 
04540     59 15 06 F6 | 	mov	arg02, ##@LR__5546
04544     13 13 02 F6 | 	mov	arg01, local01
04548     78 2B B2 FD | 	call	#__system___string_cmp
0454c     00 FA 0D F2 | 	cmp	result1, #0 wz
04550     8C 01 90 AD |  if_e	jmp	#LR__0227
04554     B6 01 00 FF 
04558     5D 15 06 F6 | 	mov	arg02, ##@LR__5547
0455c     13 13 02 F6 | 	mov	arg01, local01
04560     60 2B B2 FD | 	call	#__system___string_cmp
04564     00 FA 0D F2 | 	cmp	result1, #0 wz
04568     7C 01 90 AD |  if_e	jmp	#LR__0228
0456c     B6 01 00 FF 
04570     61 15 06 F6 | 	mov	arg02, ##@LR__5548
04574     13 13 02 F6 | 	mov	arg01, local01
04578     48 2B B2 FD | 	call	#__system___string_cmp
0457c     00 FA 0D F2 | 	cmp	result1, #0 wz
04580     6C 01 90 AD |  if_e	jmp	#LR__0229
04584     B6 01 00 FF 
04588     65 15 06 F6 | 	mov	arg02, ##@LR__5549
0458c     13 13 02 F6 | 	mov	arg01, local01
04590     30 2B B2 FD | 	call	#__system___string_cmp
04594     00 FA 0D F2 | 	cmp	result1, #0 wz
04598     5C 01 90 AD |  if_e	jmp	#LR__0230
0459c     B6 01 00 FF 
045a0     69 15 06 F6 | 	mov	arg02, ##@LR__5550
045a4     13 13 02 F6 | 	mov	arg01, local01
045a8     18 2B B2 FD | 	call	#__system___string_cmp
045ac     00 FA 0D F2 | 	cmp	result1, #0 wz
045b0     4C 01 90 AD |  if_e	jmp	#LR__0231
045b4     B6 01 00 FF 
045b8     6B 15 06 F6 | 	mov	arg02, ##@LR__5551
045bc     13 13 02 F6 | 	mov	arg01, local01
045c0     00 2B B2 FD | 	call	#__system___string_cmp
045c4     00 FA 0D F2 | 	cmp	result1, #0 wz
045c8     3C 01 90 AD |  if_e	jmp	#LR__0232
045cc     B6 01 00 FF 
045d0     6F 15 06 F6 | 	mov	arg02, ##@LR__5552
045d4     13 13 02 F6 | 	mov	arg01, local01
045d8     E8 2A B2 FD | 	call	#__system___string_cmp
045dc     00 FA 0D F2 | 	cmp	result1, #0 wz
045e0     2C 01 90 AD |  if_e	jmp	#LR__0233
045e4     B6 01 00 FF 
045e8     71 15 06 F6 | 	mov	arg02, ##@LR__5553
045ec     13 13 02 F6 | 	mov	arg01, local01
045f0     D0 2A B2 FD | 	call	#__system___string_cmp
045f4     00 FA 0D F2 | 	cmp	result1, #0 wz
045f8     1C 01 90 AD |  if_e	jmp	#LR__0234
045fc     B6 01 00 FF 
04600     73 15 06 F6 | 	mov	arg02, ##@LR__5554
04604     13 13 02 F6 | 	mov	arg01, local01
04608     B8 2A B2 FD | 	call	#__system___string_cmp
0460c     00 FA 0D F2 | 	cmp	result1, #0 wz
04610     0C 01 90 AD |  if_e	jmp	#LR__0235
04614     B6 01 00 FF 
04618     76 15 06 F6 | 	mov	arg02, ##@LR__5555
0461c     13 13 02 F6 | 	mov	arg01, local01
04620     A0 2A B2 FD | 	call	#__system___string_cmp
04624     00 FA 0D F2 | 	cmp	result1, #0 wz
04628     FC 00 90 AD |  if_e	jmp	#LR__0236
0462c     B6 01 00 FF 
04630     79 15 06 F6 | 	mov	arg02, ##@LR__5556
04634     13 13 02 F6 | 	mov	arg01, local01
04638     88 2A B2 FD | 	call	#__system___string_cmp
0463c     00 FA 0D F2 | 	cmp	result1, #0 wz
04640     EC 00 90 AD |  if_e	jmp	#LR__0237
04644     B6 01 00 FF 
04648     7B 15 06 F6 | 	mov	arg02, ##@LR__5557
0464c     13 13 02 F6 | 	mov	arg01, local01
04650     70 2A B2 FD | 	call	#__system___string_cmp
04654     00 FA 0D F2 | 	cmp	result1, #0 wz
04658     DC 00 90 AD |  if_e	jmp	#LR__0238
0465c     B6 01 00 FF 
04660     7D 15 06 F6 | 	mov	arg02, ##@LR__5558
04664     13 13 02 F6 | 	mov	arg01, local01
04668     58 2A B2 FD | 	call	#__system___string_cmp
0466c     00 FA 0D F2 | 	cmp	result1, #0 wz
04670     CC 00 90 AD |  if_e	jmp	#LR__0239
04674     B6 01 00 FF 
04678     80 15 06 F6 | 	mov	arg02, ##@LR__5559
0467c     13 13 02 F6 | 	mov	arg01, local01
04680     40 2A B2 FD | 	call	#__system___string_cmp
04684     00 FA 0D F2 | 	cmp	result1, #0 wz
04688     BC 00 90 AD |  if_e	jmp	#LR__0240
0468c     B6 01 00 FF 
04690     83 15 06 F6 | 	mov	arg02, ##@LR__5560
04694     13 13 02 F6 | 	mov	arg01, local01
04698     28 2A B2 FD | 	call	#__system___string_cmp
0469c     00 FA 0D F2 | 	cmp	result1, #0 wz
046a0     AC 00 90 AD |  if_e	jmp	#LR__0241
046a4     B0 00 90 FD | 	jmp	#LR__0242
046a8                 | LR__0220
046a8     01 FA 05 F6 | 	mov	result1, #1
046ac     AC 00 90 FD | 	jmp	#LR__0243
046b0                 | LR__0221
046b0     02 FA 05 F6 | 	mov	result1, #2
046b4     A4 00 90 FD | 	jmp	#LR__0243
046b8                 | LR__0222
046b8     03 FA 05 F6 | 	mov	result1, #3
046bc     9C 00 90 FD | 	jmp	#LR__0243
046c0                 | LR__0223
046c0     04 FA 05 F6 | 	mov	result1, #4
046c4     94 00 90 FD | 	jmp	#LR__0243
046c8                 | LR__0224
046c8     05 FA 05 F6 | 	mov	result1, #5
046cc     8C 00 90 FD | 	jmp	#LR__0243
046d0                 | LR__0225
046d0     06 FA 05 F6 | 	mov	result1, #6
046d4     84 00 90 FD | 	jmp	#LR__0243
046d8                 | LR__0226
046d8     07 FA 05 F6 | 	mov	result1, #7
046dc     7C 00 90 FD | 	jmp	#LR__0243
046e0                 | LR__0227
046e0     08 FA 05 F6 | 	mov	result1, #8
046e4     74 00 90 FD | 	jmp	#LR__0243
046e8                 | LR__0228
046e8     09 FA 05 F6 | 	mov	result1, #9
046ec     6C 00 90 FD | 	jmp	#LR__0243
046f0                 | LR__0229
046f0     0A FA 05 F6 | 	mov	result1, #10
046f4     64 00 90 FD | 	jmp	#LR__0243
046f8                 | LR__0230
046f8     0B FA 05 F6 | 	mov	result1, #11
046fc     5C 00 90 FD | 	jmp	#LR__0243
04700                 | LR__0231
04700     0C FA 05 F6 | 	mov	result1, #12
04704     54 00 90 FD | 	jmp	#LR__0243
04708                 | LR__0232
04708     0D FA 05 F6 | 	mov	result1, #13
0470c     4C 00 90 FD | 	jmp	#LR__0243
04710                 | LR__0233
04710     0E FA 05 F6 | 	mov	result1, #14
04714     44 00 90 FD | 	jmp	#LR__0243
04718                 | LR__0234
04718     1B FA 05 F6 | 	mov	result1, #27
0471c     3C 00 90 FD | 	jmp	#LR__0243
04720                 | LR__0235
04720     27 FA 05 F6 | 	mov	result1, #39
04724     34 00 90 FD | 	jmp	#LR__0243
04728                 | LR__0236
04728     26 FA 05 F6 | 	mov	result1, #38
0472c     2C 00 90 FD | 	jmp	#LR__0243
04730                 | LR__0237
04730     10 FA 05 F6 | 	mov	result1, #16
04734     24 00 90 FD | 	jmp	#LR__0243
04738                 | LR__0238
04738     0F FA 05 F6 | 	mov	result1, #15
0473c     1C 00 90 FD | 	jmp	#LR__0243
04740                 | LR__0239
04740     2A FA 05 F6 | 	mov	result1, #42
04744     14 00 90 FD | 	jmp	#LR__0243
04748                 | LR__0240
04748     28 FA 05 F6 | 	mov	result1, #40
0474c     0C 00 90 FD | 	jmp	#LR__0243
04750                 | LR__0241
04750     29 FA 05 F6 | 	mov	result1, #41
04754     04 00 90 FD | 	jmp	#LR__0243
04758                 | LR__0242
04758     00 FA 05 F6 | 	mov	result1, #0
0475c                 | LR__0243
0475c     A7 F0 03 F6 | 	mov	ptra, fp
04760     B2 00 A0 FD | 	call	#popregs_
04764                 | _isoperator_ret
04764     2D 00 64 FD | 	ret
04768                 | 
04768                 | ' 
04768                 | ' ' Check if the part is a channel#, return a token or 0 if not found
04768                 | ' 
04768                 | ' function ischannel(s as string) as ulong
04768                 | _ischannel
04768     02 4A 05 F6 | 	mov	COUNT_, #2
0476c     A8 00 A0 FD | 	call	#pushregs_
04770                 | ' if left$(s,1)<>"#" then return 0
04770     09 27 02 F6 | 	mov	local01, arg01
04774     01 14 06 F6 | 	mov	arg02, #1
04778     A0 49 B2 FD | 	call	#__system__Left_S
0477c     FD 12 02 F6 | 	mov	arg01, result1
04780     B6 01 00 FF 
04784     86 15 06 F6 | 	mov	arg02, ##@LR__5561
04788     38 29 B2 FD | 	call	#__system___string_cmp
0478c     00 FA 0D F2 | 	cmp	result1, #0 wz
04790     00 FA 05 56 |  if_ne	mov	result1, #0
04794     AC 00 90 5D |  if_ne	jmp	#LR__0254
04798                 | ' if len(s)<>2 then return 0
04798     13 13 02 F6 | 	mov	arg01, local01
0479c     09 29 02 F6 | 	mov	local02, arg01
047a0     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
047a4                 | LR__0250
047a4     14 FB C9 FA | 	rdbyte	result1, local02 wz
047a8     01 28 06 51 |  if_ne	add	local02, #1
047ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
047b0                 | LR__0251
047b0     09 29 82 F1 | 	sub	local02, arg01
047b4     14 FB 01 F6 | 	mov	result1, local02
047b8     02 FA 0D F2 | 	cmp	result1, #2 wz
047bc     00 FA 05 56 |  if_ne	mov	result1, #0
047c0     80 00 90 5D |  if_ne	jmp	#LR__0254
047c4                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
047c4     13 13 02 F6 | 	mov	arg01, local01
047c8     01 14 06 F6 | 	mov	arg02, #1
047cc     D4 49 B2 FD | 	call	#__system__Right_S
047d0     FD 12 02 F6 | 	mov	arg01, result1
047d4     B6 01 00 FF 
047d8     88 15 06 F6 | 	mov	arg02, ##@LR__5562
047dc     E4 28 B2 FD | 	call	#__system___string_cmp
047e0     00 FA 55 F2 | 	cmps	result1, #0 wc
047e4     24 00 90 CD |  if_b	jmp	#LR__0252
047e8     13 13 02 F6 | 	mov	arg01, local01
047ec     01 14 06 F6 | 	mov	arg02, #1
047f0     B0 49 B2 FD | 	call	#__system__Right_S
047f4     FD 12 02 F6 | 	mov	arg01, result1
047f8     B6 01 00 FF 
047fc     8A 15 06 F6 | 	mov	arg02, ##@LR__5563
04800     C0 28 B2 FD | 	call	#__system___string_cmp
04804     01 FA 55 F2 | 	cmps	result1, #1 wc
04808     08 00 90 CD |  if_b	jmp	#LR__0253
0480c                 | LR__0252
0480c     00 FA 05 F6 | 	mov	result1, #0
04810     30 00 90 FD | 	jmp	#LR__0254
04814                 | LR__0253
04814                 | ' return token_channel+val(right$(s,1))
04814     13 13 02 F6 | 	mov	arg01, local01
04818     01 14 06 F6 | 	mov	arg02, #1
0481c     84 49 B2 FD | 	call	#__system__Right_S
04820     FD 12 02 F6 | 	mov	arg01, result1
04824     FC 5E B2 FD | 	call	#__system____builtin_atof
04828     FD 14 02 F6 | 	mov	arg02, result1
0482c     00 18 21 FF 
04830     00 12 06 F6 | 	mov	arg01, ##1110441984
04834     10 53 B2 FD | 	call	#__system___float_add
04838     FD 12 02 F6 | 	mov	arg01, result1
0483c     00 14 06 F6 | 	mov	arg02, #0
04840     9C 5B B2 FD | 	call	#__system___float_tointeger
04844                 | LR__0254
04844     A7 F0 03 F6 | 	mov	ptra, fp
04848     B2 00 A0 FD | 	call	#popregs_
0484c                 | _ischannel_ret
0484c     2D 00 64 FD | 	ret
04850                 | 
04850                 | ' 
04850                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
04850                 | ' ' todo: add spin2/pasm constants for pin control
04850                 | ' 
04850                 | ' function isconstant(s as string) as integer
04850                 | _isconstant
04850     01 4A 05 F6 | 	mov	COUNT_, #1
04854     A8 00 A0 FD | 	call	#pushregs_
04858                 | ' 
04858                 | ' select case s
04858     09 27 02 F6 | 	mov	local01, arg01
0485c     B6 01 00 FF 
04860     8C 15 06 F6 | 	mov	arg02, ##@LR__5564
04864     13 13 02 F6 | 	mov	arg01, local01
04868     58 28 B2 FD | 	call	#__system___string_cmp
0486c     00 FA 0D F2 | 	cmp	result1, #0 wz
04870     34 00 90 AD |  if_e	jmp	#LR__0260
04874     B6 01 00 FF 
04878     92 15 06 F6 | 	mov	arg02, ##@LR__5565
0487c     13 13 02 F6 | 	mov	arg01, local01
04880     40 28 B2 FD | 	call	#__system___string_cmp
04884     00 FA 0D F2 | 	cmp	result1, #0 wz
04888     24 00 90 AD |  if_e	jmp	#LR__0261
0488c     B6 01 00 FF 
04890     99 15 06 F6 | 	mov	arg02, ##@LR__5566
04894     13 13 02 F6 | 	mov	arg01, local01
04898     28 28 B2 FD | 	call	#__system___string_cmp
0489c     00 FA 0D F2 | 	cmp	result1, #0 wz
048a0     14 00 90 AD |  if_e	jmp	#LR__0262
048a4     18 00 90 FD | 	jmp	#LR__0263
048a8                 | LR__0260
048a8     01 FA 05 F6 | 	mov	result1, #1
048ac     14 00 90 FD | 	jmp	#LR__0264
048b0                 | LR__0261
048b0     02 FA 05 F6 | 	mov	result1, #2
048b4     0C 00 90 FD | 	jmp	#LR__0264
048b8                 | LR__0262
048b8     04 FA 05 F6 | 	mov	result1, #4
048bc     04 00 90 FD | 	jmp	#LR__0264
048c0                 | LR__0263
048c0     00 FA 05 F6 | 	mov	result1, #0
048c4                 | LR__0264
048c4     A7 F0 03 F6 | 	mov	ptra, fp
048c8     B2 00 A0 FD | 	call	#popregs_
048cc                 | _isconstant_ret
048cc     2D 00 64 FD | 	ret
048d0                 | 
048d0                 | ' 
048d0                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
048d0                 | ' 
048d0                 | ' function isnotename(s as string) as ulong
048d0                 | _isnotename
048d0     07 4A 05 F6 | 	mov	COUNT_, #7
048d4     A8 00 A0 FD | 	call	#pushregs_
048d8                 | ' if left$(s,1)<>"#" then return 0
048d8     09 27 02 F6 | 	mov	local01, arg01
048dc     01 14 06 F6 | 	mov	arg02, #1
048e0     38 48 B2 FD | 	call	#__system__Left_S
048e4     FD 12 02 F6 | 	mov	arg01, result1
048e8     B6 01 00 FF 
048ec     A1 15 06 F6 | 	mov	arg02, ##@LR__5567
048f0     D0 27 B2 FD | 	call	#__system___string_cmp
048f4     00 FA 0D F2 | 	cmp	result1, #0 wz
048f8     00 FA 05 56 |  if_ne	mov	result1, #0
048fc     30 03 90 5D |  if_ne	jmp	#LR__0293
04900                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04900     13 13 02 F6 | 	mov	arg01, local01
04904     03 14 06 F6 | 	mov	arg02, #3
04908     01 16 06 F6 | 	mov	arg03, #1
0490c     24 49 B2 FD | 	call	#__system__Mid_S
04910     FD 12 02 F6 | 	mov	arg01, result1
04914     B6 01 00 FF 
04918     A3 15 06 F6 | 	mov	arg02, ##@LR__5568
0491c     A4 27 B2 FD | 	call	#__system___string_cmp
04920     00 FA 0D F2 | 	cmp	result1, #0 wz
04924     18 00 90 5D |  if_ne	jmp	#LR__0270
04928     13 13 02 F6 | 	mov	arg01, local01
0492c     02 14 06 F6 | 	mov	arg02, #2
04930     02 16 06 F6 | 	mov	arg03, #2
04934     FC 48 B2 FD | 	call	#__system__Mid_S
04938     FD 28 02 F6 | 	mov	local02, result1
0493c     14 00 90 FD | 	jmp	#LR__0271
04940                 | LR__0270
04940     13 13 02 F6 | 	mov	arg01, local01
04944     02 14 06 F6 | 	mov	arg02, #2
04948     01 16 06 F6 | 	mov	arg03, #1
0494c     E4 48 B2 FD | 	call	#__system__Mid_S
04950     FD 28 02 F6 | 	mov	local02, result1
04954                 | LR__0271
04954                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
04954     13 13 02 F6 | 	mov	arg01, local01
04958     09 2B 02 F6 | 	mov	local03, arg01
0495c     97 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
04960                 | LR__0272
04960     15 FB C9 FA | 	rdbyte	result1, local03 wz
04964     01 2A 06 51 |  if_ne	add	local03, #1
04968     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
0496c                 | LR__0273
0496c     09 2B 82 F1 | 	sub	local03, arg01
04970     15 15 02 F6 | 	mov	arg02, local03
04974     01 14 86 F1 | 	sub	arg02, #1
04978     13 13 02 F6 | 	mov	arg01, local01
0497c     01 16 06 F6 | 	mov	arg03, #1
04980     B0 48 B2 FD | 	call	#__system__Mid_S
04984     FD 12 02 F6 | 	mov	arg01, result1
04988     B6 01 00 FF 
0498c     A5 15 06 F6 | 	mov	arg02, ##@LR__5569
04990     30 27 B2 FD | 	call	#__system___string_cmp
04994     00 FA 0D F2 | 	cmp	result1, #0 wz
04998     28 00 90 AD |  if_e	jmp	#LR__0274
0499c     13 13 02 F6 | 	mov	arg01, local01
049a0     01 14 06 F6 | 	mov	arg02, #1
049a4     FC 47 B2 FD | 	call	#__system__Right_S
049a8     FD 12 02 F6 | 	mov	arg01, result1
049ac     74 5D B2 FD | 	call	#__system____builtin_atof
049b0     FD 12 02 F6 | 	mov	arg01, result1
049b4     00 14 06 F6 | 	mov	arg02, #0
049b8     24 5A B2 FD | 	call	#__system___float_tointeger
049bc     FD 2C 02 F6 | 	mov	local04, result1
049c0     34 00 90 FD | 	jmp	#LR__0275
049c4                 | LR__0274
049c4     13 13 02 F6 | 	mov	arg01, local01
049c8     01 14 06 F6 | 	mov	arg02, #1
049cc     D4 47 B2 FD | 	call	#__system__Right_S
049d0     FD 12 02 F6 | 	mov	arg01, result1
049d4     4C 5D B2 FD | 	call	#__system____builtin_atof
049d8     FD 14 02 F6 | 	mov	arg02, result1
049dc     00 C0 5F FF 
049e0     00 12 06 F6 | 	mov	arg01, ##-1082130432
049e4     30 55 B2 FD | 	call	#__system___float_mul
049e8     FD 12 02 F6 | 	mov	arg01, result1
049ec     00 14 06 F6 | 	mov	arg02, #0
049f0     EC 59 B2 FD | 	call	#__system___float_tointeger
049f4     FD 2C 02 F6 | 	mov	local04, result1
049f8                 | LR__0275
049f8                 | ' 
049f8                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
049f8     00 2C 0E F2 | 	cmp	local04, #0 wz
049fc     24 00 90 5D |  if_ne	jmp	#LR__0276
04a00     13 13 02 F6 | 	mov	arg01, local01
04a04     01 14 06 F6 | 	mov	arg02, #1
04a08     98 47 B2 FD | 	call	#__system__Right_S
04a0c     FD 12 02 F6 | 	mov	arg01, result1
04a10     B6 01 00 FF 
04a14     A7 15 06 F6 | 	mov	arg02, ##@LR__5570
04a18     A8 26 B2 FD | 	call	#__system___string_cmp
04a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a20     04 2C 06 56 |  if_ne	mov	local04, #4
04a24                 | LR__0276
04a24                 | ' 
04a24                 | ' select case s1
04a24     14 2F 02 F6 | 	mov	local05, local02
04a28     B6 01 00 FF 
04a2c     A9 15 06 F6 | 	mov	arg02, ##@LR__5571
04a30     17 13 02 F6 | 	mov	arg01, local05
04a34     8C 26 B2 FD | 	call	#__system___string_cmp
04a38     00 FA 0D F2 | 	cmp	result1, #0 wz
04a3c     24 01 90 AD |  if_e	jmp	#LR__0277
04a40     B6 01 00 FF 
04a44     AB 15 06 F6 | 	mov	arg02, ##@LR__5572
04a48     17 13 02 F6 | 	mov	arg01, local05
04a4c     74 26 B2 FD | 	call	#__system___string_cmp
04a50     00 FA 0D F2 | 	cmp	result1, #0 wz
04a54     18 01 90 AD |  if_e	jmp	#LR__0278
04a58     B6 01 00 FF 
04a5c     AE 15 06 F6 | 	mov	arg02, ##@LR__5573
04a60     17 13 02 F6 | 	mov	arg01, local05
04a64     5C 26 B2 FD | 	call	#__system___string_cmp
04a68     00 FA 0D F2 | 	cmp	result1, #0 wz
04a6c     0C 01 90 AD |  if_e	jmp	#LR__0279
04a70     B6 01 00 FF 
04a74     B0 15 06 F6 | 	mov	arg02, ##@LR__5574
04a78     17 13 02 F6 | 	mov	arg01, local05
04a7c     44 26 B2 FD | 	call	#__system___string_cmp
04a80     00 FA 0D F2 | 	cmp	result1, #0 wz
04a84     00 01 90 AD |  if_e	jmp	#LR__0280
04a88     B6 01 00 FF 
04a8c     B3 15 06 F6 | 	mov	arg02, ##@LR__5575
04a90     17 13 02 F6 | 	mov	arg01, local05
04a94     2C 26 B2 FD | 	call	#__system___string_cmp
04a98     00 FA 0D F2 | 	cmp	result1, #0 wz
04a9c     F4 00 90 AD |  if_e	jmp	#LR__0281
04aa0     B6 01 00 FF 
04aa4     B5 15 06 F6 | 	mov	arg02, ##@LR__5576
04aa8     17 13 02 F6 | 	mov	arg01, local05
04aac     14 26 B2 FD | 	call	#__system___string_cmp
04ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab4     E8 00 90 AD |  if_e	jmp	#LR__0282
04ab8     B6 01 00 FF 
04abc     B7 15 06 F6 | 	mov	arg02, ##@LR__5577
04ac0     17 13 02 F6 | 	mov	arg01, local05
04ac4     FC 25 B2 FD | 	call	#__system___string_cmp
04ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
04acc     DC 00 90 AD |  if_e	jmp	#LR__0283
04ad0     B6 01 00 FF 
04ad4     BA 15 06 F6 | 	mov	arg02, ##@LR__5578
04ad8     17 13 02 F6 | 	mov	arg01, local05
04adc     E4 25 B2 FD | 	call	#__system___string_cmp
04ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae4     D0 00 90 AD |  if_e	jmp	#LR__0284
04ae8     B6 01 00 FF 
04aec     BC 15 06 F6 | 	mov	arg02, ##@LR__5579
04af0     17 13 02 F6 | 	mov	arg01, local05
04af4     CC 25 B2 FD | 	call	#__system___string_cmp
04af8     00 FA 0D F2 | 	cmp	result1, #0 wz
04afc     C4 00 90 AD |  if_e	jmp	#LR__0285
04b00     B6 01 00 FF 
04b04     BF 15 06 F6 | 	mov	arg02, ##@LR__5580
04b08     17 13 02 F6 | 	mov	arg01, local05
04b0c     B4 25 B2 FD | 	call	#__system___string_cmp
04b10     00 FA 0D F2 | 	cmp	result1, #0 wz
04b14     B8 00 90 AD |  if_e	jmp	#LR__0286
04b18     B6 01 00 FF 
04b1c     C1 15 06 F6 | 	mov	arg02, ##@LR__5581
04b20     17 13 02 F6 | 	mov	arg01, local05
04b24     9C 25 B2 FD | 	call	#__system___string_cmp
04b28     00 FA 0D F2 | 	cmp	result1, #0 wz
04b2c     AC 00 90 AD |  if_e	jmp	#LR__0287
04b30     B6 01 00 FF 
04b34     C4 15 06 F6 | 	mov	arg02, ##@LR__5582
04b38     17 13 02 F6 | 	mov	arg01, local05
04b3c     84 25 B2 FD | 	call	#__system___string_cmp
04b40     00 FA 0D F2 | 	cmp	result1, #0 wz
04b44     A0 00 90 AD |  if_e	jmp	#LR__0288
04b48     B6 01 00 FF 
04b4c     C6 15 06 F6 | 	mov	arg02, ##@LR__5583
04b50     17 13 02 F6 | 	mov	arg01, local05
04b54     6C 25 B2 FD | 	call	#__system___string_cmp
04b58     00 FA 0D F2 | 	cmp	result1, #0 wz
04b5c     94 00 90 AD |  if_e	jmp	#LR__0289
04b60     9C 00 90 FD | 	jmp	#LR__0290
04b64                 | LR__0277
04b64     01 00 00 FF 
04b68     00 31 06 F6 | 	mov	local06, ##768
04b6c     98 00 90 FD | 	jmp	#LR__0291
04b70                 | LR__0278
04b70     01 00 00 FF 
04b74     01 31 06 F6 | 	mov	local06, ##769
04b78     8C 00 90 FD | 	jmp	#LR__0291
04b7c                 | LR__0279
04b7c     01 00 00 FF 
04b80     02 31 06 F6 | 	mov	local06, ##770
04b84     80 00 90 FD | 	jmp	#LR__0291
04b88                 | LR__0280
04b88     01 00 00 FF 
04b8c     03 31 06 F6 | 	mov	local06, ##771
04b90     74 00 90 FD | 	jmp	#LR__0291
04b94                 | LR__0281
04b94     01 00 00 FF 
04b98     04 31 06 F6 | 	mov	local06, ##772
04b9c     68 00 90 FD | 	jmp	#LR__0291
04ba0                 | LR__0282
04ba0     01 00 00 FF 
04ba4     05 31 06 F6 | 	mov	local06, ##773
04ba8     5C 00 90 FD | 	jmp	#LR__0291
04bac                 | LR__0283
04bac     01 00 00 FF 
04bb0     06 31 06 F6 | 	mov	local06, ##774
04bb4     50 00 90 FD | 	jmp	#LR__0291
04bb8                 | LR__0284
04bb8     01 00 00 FF 
04bbc     07 31 06 F6 | 	mov	local06, ##775
04bc0     44 00 90 FD | 	jmp	#LR__0291
04bc4                 | LR__0285
04bc4     01 00 00 FF 
04bc8     08 31 06 F6 | 	mov	local06, ##776
04bcc     38 00 90 FD | 	jmp	#LR__0291
04bd0                 | LR__0286
04bd0     01 00 00 FF 
04bd4     09 31 06 F6 | 	mov	local06, ##777
04bd8     2C 00 90 FD | 	jmp	#LR__0291
04bdc                 | LR__0287
04bdc     01 00 00 FF 
04be0     0A 31 06 F6 | 	mov	local06, ##778
04be4     20 00 90 FD | 	jmp	#LR__0291
04be8                 | LR__0288
04be8     01 00 00 FF 
04bec     0B 31 06 F6 | 	mov	local06, ##779
04bf0     14 00 90 FD | 	jmp	#LR__0291
04bf4                 | LR__0289
04bf4     01 00 00 FF 
04bf8     0B 31 06 F6 | 	mov	local06, ##779
04bfc     08 00 90 FD | 	jmp	#LR__0291
04c00                 | LR__0290
04c00     00 FA 05 F6 | 	mov	result1, #0
04c04     28 00 90 FD | 	jmp	#LR__0293
04c08                 | LR__0291
04c08                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04c08     FF FF 7F FF 
04c0c     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04c10     18 00 90 CD |  if_b	jmp	#LR__0292
04c14     0A 2C 56 F2 | 	cmps	local04, #10 wc
04c18     16 33 02 C6 |  if_b	mov	local07, local04
04c1c     01 32 66 C0 |  if_b	shl	local07, #1
04c20     16 33 02 C1 |  if_b	add	local07, local04
04c24     02 32 66 C0 |  if_b	shl	local07, #2
04c28     19 31 02 C1 |  if_b	add	local06, local07
04c2c                 | LR__0292
04c2c                 | ' return token
04c2c     18 FB 01 F6 | 	mov	result1, local06
04c30                 | LR__0293
04c30     A7 F0 03 F6 | 	mov	ptra, fp
04c34     B2 00 A0 FD | 	call	#popregs_
04c38                 | _isnotename_ret
04c38     2D 00 64 FD | 	ret
04c3c                 | 
04c3c                 | ' 
04c3c                 | ' ' Check if the part is a separator, return a token or 0 if not found
04c3c                 | ' 
04c3c                 | ' function isseparator(s as string) as ubyte
04c3c                 | _isseparator
04c3c     01 4A 05 F6 | 	mov	COUNT_, #1
04c40     A8 00 A0 FD | 	call	#pushregs_
04c44                 | ' 
04c44                 | ' select case s
04c44     09 27 02 F6 | 	mov	local01, arg01
04c48     B6 01 00 FF 
04c4c     C8 15 06 F6 | 	mov	arg02, ##@LR__5584
04c50     13 13 02 F6 | 	mov	arg01, local01
04c54     6C 24 B2 FD | 	call	#__system___string_cmp
04c58     00 FA 0D F2 | 	cmp	result1, #0 wz
04c5c     54 01 90 AD |  if_e	jmp	#LR__0300
04c60     B6 01 00 FF 
04c64     CA 15 06 F6 | 	mov	arg02, ##@LR__5585
04c68     13 13 02 F6 | 	mov	arg01, local01
04c6c     54 24 B2 FD | 	call	#__system___string_cmp
04c70     00 FA 0D F2 | 	cmp	result1, #0 wz
04c74     44 01 90 AD |  if_e	jmp	#LR__0301
04c78     B6 01 00 FF 
04c7c     CC 15 06 F6 | 	mov	arg02, ##@LR__5586
04c80     13 13 02 F6 | 	mov	arg01, local01
04c84     3C 24 B2 FD | 	call	#__system___string_cmp
04c88     00 FA 0D F2 | 	cmp	result1, #0 wz
04c8c     34 01 90 AD |  if_e	jmp	#LR__0302
04c90     B6 01 00 FF 
04c94     CE 15 06 F6 | 	mov	arg02, ##@LR__5587
04c98     13 13 02 F6 | 	mov	arg01, local01
04c9c     24 24 B2 FD | 	call	#__system___string_cmp
04ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ca4     24 01 90 AD |  if_e	jmp	#LR__0303
04ca8     B6 01 00 FF 
04cac     D0 15 06 F6 | 	mov	arg02, ##@LR__5588
04cb0     13 13 02 F6 | 	mov	arg01, local01
04cb4     0C 24 B2 FD | 	call	#__system___string_cmp
04cb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cbc     14 01 90 AD |  if_e	jmp	#LR__0304
04cc0     B6 01 00 FF 
04cc4     D2 15 06 F6 | 	mov	arg02, ##@LR__5589
04cc8     13 13 02 F6 | 	mov	arg01, local01
04ccc     F4 23 B2 FD | 	call	#__system___string_cmp
04cd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd4     04 01 90 AD |  if_e	jmp	#LR__0305
04cd8     B6 01 00 FF 
04cdc     D4 15 06 F6 | 	mov	arg02, ##@LR__5590
04ce0     13 13 02 F6 | 	mov	arg01, local01
04ce4     DC 23 B2 FD | 	call	#__system___string_cmp
04ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cec     F4 00 90 AD |  if_e	jmp	#LR__0306
04cf0     B6 01 00 FF 
04cf4     D6 15 06 F6 | 	mov	arg02, ##@LR__5591
04cf8     13 13 02 F6 | 	mov	arg01, local01
04cfc     C4 23 B2 FD | 	call	#__system___string_cmp
04d00     00 FA 0D F2 | 	cmp	result1, #0 wz
04d04     E4 00 90 AD |  if_e	jmp	#LR__0307
04d08     B6 01 00 FF 
04d0c     D8 15 06 F6 | 	mov	arg02, ##@LR__5592
04d10     13 13 02 F6 | 	mov	arg01, local01
04d14     AC 23 B2 FD | 	call	#__system___string_cmp
04d18     00 FA 0D F2 | 	cmp	result1, #0 wz
04d1c     D4 00 90 AD |  if_e	jmp	#LR__0308
04d20     B6 01 00 FF 
04d24     DA 15 06 F6 | 	mov	arg02, ##@LR__5593
04d28     13 13 02 F6 | 	mov	arg01, local01
04d2c     94 23 B2 FD | 	call	#__system___string_cmp
04d30     00 FA 0D F2 | 	cmp	result1, #0 wz
04d34     C4 00 90 AD |  if_e	jmp	#LR__0309
04d38     B6 01 00 FF 
04d3c     DC 15 06 F6 | 	mov	arg02, ##@LR__5594
04d40     13 13 02 F6 | 	mov	arg01, local01
04d44     7C 23 B2 FD | 	call	#__system___string_cmp
04d48     00 FA 0D F2 | 	cmp	result1, #0 wz
04d4c     B4 00 90 AD |  if_e	jmp	#LR__0310
04d50     B6 01 00 FF 
04d54     DE 15 06 F6 | 	mov	arg02, ##@LR__5595
04d58     13 13 02 F6 | 	mov	arg01, local01
04d5c     64 23 B2 FD | 	call	#__system___string_cmp
04d60     00 FA 0D F2 | 	cmp	result1, #0 wz
04d64     A4 00 90 AD |  if_e	jmp	#LR__0311
04d68     B6 01 00 FF 
04d6c     E0 15 06 F6 | 	mov	arg02, ##@LR__5596
04d70     13 13 02 F6 | 	mov	arg01, local01
04d74     4C 23 B2 FD | 	call	#__system___string_cmp
04d78     00 FA 0D F2 | 	cmp	result1, #0 wz
04d7c     94 00 90 AD |  if_e	jmp	#LR__0312
04d80     B6 01 00 FF 
04d84     E2 15 06 F6 | 	mov	arg02, ##@LR__5597
04d88     13 13 02 F6 | 	mov	arg01, local01
04d8c     34 23 B2 FD | 	call	#__system___string_cmp
04d90     00 FA 0D F2 | 	cmp	result1, #0 wz
04d94     84 00 90 AD |  if_e	jmp	#LR__0313
04d98     B6 01 00 FF 
04d9c     E4 15 06 F6 | 	mov	arg02, ##@LR__5598
04da0     13 13 02 F6 | 	mov	arg01, local01
04da4     1C 23 B2 FD | 	call	#__system___string_cmp
04da8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dac     74 00 90 AD |  if_e	jmp	#LR__0314
04db0     78 00 90 FD | 	jmp	#LR__0315
04db4                 | LR__0300
04db4     01 FA 05 F6 | 	mov	result1, #1
04db8     74 00 90 FD | 	jmp	#LR__0316
04dbc                 | LR__0301
04dbc     02 FA 05 F6 | 	mov	result1, #2
04dc0     6C 00 90 FD | 	jmp	#LR__0316
04dc4                 | LR__0302
04dc4     1B FA 05 F6 | 	mov	result1, #27
04dc8     64 00 90 FD | 	jmp	#LR__0316
04dcc                 | LR__0303
04dcc     11 FA 05 F6 | 	mov	result1, #17
04dd0     5C 00 90 FD | 	jmp	#LR__0316
04dd4                 | LR__0304
04dd4     05 FA 05 F6 | 	mov	result1, #5
04dd8     54 00 90 FD | 	jmp	#LR__0316
04ddc                 | LR__0305
04ddc     06 FA 05 F6 | 	mov	result1, #6
04de0     4C 00 90 FD | 	jmp	#LR__0316
04de4                 | LR__0306
04de4     12 FA 05 F6 | 	mov	result1, #18
04de8     44 00 90 FD | 	jmp	#LR__0316
04dec                 | LR__0307
04dec     13 FA 05 F6 | 	mov	result1, #19
04df0     3C 00 90 FD | 	jmp	#LR__0316
04df4                 | LR__0308
04df4     0C FA 05 F6 | 	mov	result1, #12
04df8     34 00 90 FD | 	jmp	#LR__0316
04dfc                 | LR__0309
04dfc     14 FA 05 F6 | 	mov	result1, #20
04e00     2C 00 90 FD | 	jmp	#LR__0316
04e04                 | LR__0310
04e04     15 FA 05 F6 | 	mov	result1, #21
04e08     24 00 90 FD | 	jmp	#LR__0316
04e0c                 | LR__0311
04e0c     16 FA 05 F6 | 	mov	result1, #22
04e10     1C 00 90 FD | 	jmp	#LR__0316
04e14                 | LR__0312
04e14     FF FB 05 F6 | 	mov	result1, #511
04e18     14 00 90 FD | 	jmp	#LR__0316
04e1c                 | LR__0313
04e1c     0F FA 05 F6 | 	mov	result1, #15
04e20     0C 00 90 FD | 	jmp	#LR__0316
04e24                 | LR__0314
04e24     10 FA 05 F6 | 	mov	result1, #16
04e28     04 00 90 FD | 	jmp	#LR__0316
04e2c                 | LR__0315
04e2c     00 FA 05 F6 | 	mov	result1, #0
04e30                 | LR__0316
04e30     A7 F0 03 F6 | 	mov	ptra, fp
04e34     B2 00 A0 FD | 	call	#popregs_
04e38                 | _isseparator_ret
04e38     2D 00 64 FD | 	ret
04e3c                 | 
04e3c                 | ' 
04e3c                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04e3c                 | ' 
04e3c                 | ' function iscommand(s as string) as ubyte
04e3c                 | _iscommand
04e3c     01 4A 05 F6 | 	mov	COUNT_, #1
04e40     A8 00 A0 FD | 	call	#pushregs_
04e44                 | ' 
04e44                 | ' select case s
04e44     09 27 02 F6 | 	mov	local01, arg01
04e48     B6 01 00 FF 
04e4c     E8 15 06 F6 | 	mov	arg02, ##@LR__5600
04e50     13 13 02 F6 | 	mov	arg01, local01
04e54     6C 22 B2 FD | 	call	#__system___string_cmp
04e58     00 FA 0D F2 | 	cmp	result1, #0 wz
04e5c     C4 0C 90 AD |  if_e	jmp	#LR__0320
04e60     B6 01 00 FF 
04e64     ED 15 06 F6 | 	mov	arg02, ##@LR__5601
04e68     13 13 02 F6 | 	mov	arg01, local01
04e6c     54 22 B2 FD | 	call	#__system___string_cmp
04e70     00 FA 0D F2 | 	cmp	result1, #0 wz
04e74     B4 0C 90 AD |  if_e	jmp	#LR__0321
04e78     B6 01 00 FF 
04e7c     F0 15 06 F6 | 	mov	arg02, ##@LR__5602
04e80     13 13 02 F6 | 	mov	arg01, local01
04e84     3C 22 B2 FD | 	call	#__system___string_cmp
04e88     00 FA 0D F2 | 	cmp	result1, #0 wz
04e8c     A4 0C 90 AD |  if_e	jmp	#LR__0322
04e90     B6 01 00 FF 
04e94     F5 15 06 F6 | 	mov	arg02, ##@LR__5603
04e98     13 13 02 F6 | 	mov	arg01, local01
04e9c     24 22 B2 FD | 	call	#__system___string_cmp
04ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea4     94 0C 90 AD |  if_e	jmp	#LR__0323
04ea8     B6 01 00 FF 
04eac     F9 15 06 F6 | 	mov	arg02, ##@LR__5604
04eb0     13 13 02 F6 | 	mov	arg01, local01
04eb4     0C 22 B2 FD | 	call	#__system___string_cmp
04eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ebc     84 0C 90 AD |  if_e	jmp	#LR__0324
04ec0     B6 01 00 FF 
04ec4     FE 15 06 F6 | 	mov	arg02, ##@LR__5605
04ec8     13 13 02 F6 | 	mov	arg01, local01
04ecc     F4 21 B2 FD | 	call	#__system___string_cmp
04ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed4     74 0C 90 AD |  if_e	jmp	#LR__0325
04ed8     B7 01 00 FF 
04edc     02 14 06 F6 | 	mov	arg02, ##@LR__5606
04ee0     13 13 02 F6 | 	mov	arg01, local01
04ee4     DC 21 B2 FD | 	call	#__system___string_cmp
04ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eec     64 0C 90 AD |  if_e	jmp	#LR__0326
04ef0     B7 01 00 FF 
04ef4     05 14 06 F6 | 	mov	arg02, ##@LR__5607
04ef8     13 13 02 F6 | 	mov	arg01, local01
04efc     C4 21 B2 FD | 	call	#__system___string_cmp
04f00     00 FA 0D F2 | 	cmp	result1, #0 wz
04f04     54 0C 90 AD |  if_e	jmp	#LR__0327
04f08     B7 01 00 FF 
04f0c     10 14 06 F6 | 	mov	arg02, ##@LR__5608
04f10     13 13 02 F6 | 	mov	arg01, local01
04f14     AC 21 B2 FD | 	call	#__system___string_cmp
04f18     00 FA 0D F2 | 	cmp	result1, #0 wz
04f1c     44 0C 90 AD |  if_e	jmp	#LR__0328
04f20     B7 01 00 FF 
04f24     14 14 06 F6 | 	mov	arg02, ##@LR__5609
04f28     13 13 02 F6 | 	mov	arg01, local01
04f2c     94 21 B2 FD | 	call	#__system___string_cmp
04f30     00 FA 0D F2 | 	cmp	result1, #0 wz
04f34     34 0C 90 AD |  if_e	jmp	#LR__0329
04f38     B7 01 00 FF 
04f3c     1E 14 06 F6 | 	mov	arg02, ##@LR__5610
04f40     13 13 02 F6 | 	mov	arg01, local01
04f44     7C 21 B2 FD | 	call	#__system___string_cmp
04f48     00 FA 0D F2 | 	cmp	result1, #0 wz
04f4c     24 0C 90 AD |  if_e	jmp	#LR__0330
04f50     B7 01 00 FF 
04f54     22 14 06 F6 | 	mov	arg02, ##@LR__5611
04f58     13 13 02 F6 | 	mov	arg01, local01
04f5c     64 21 B2 FD | 	call	#__system___string_cmp
04f60     00 FA 0D F2 | 	cmp	result1, #0 wz
04f64     14 0C 90 AD |  if_e	jmp	#LR__0331
04f68     B7 01 00 FF 
04f6c     2C 14 06 F6 | 	mov	arg02, ##@LR__5612
04f70     13 13 02 F6 | 	mov	arg01, local01
04f74     4C 21 B2 FD | 	call	#__system___string_cmp
04f78     00 FA 0D F2 | 	cmp	result1, #0 wz
04f7c     04 0C 90 AD |  if_e	jmp	#LR__0332
04f80     B7 01 00 FF 
04f84     30 14 06 F6 | 	mov	arg02, ##@LR__5613
04f88     13 13 02 F6 | 	mov	arg01, local01
04f8c     34 21 B2 FD | 	call	#__system___string_cmp
04f90     00 FA 0D F2 | 	cmp	result1, #0 wz
04f94     F4 0B 90 AD |  if_e	jmp	#LR__0333
04f98     B7 01 00 FF 
04f9c     3B 14 06 F6 | 	mov	arg02, ##@LR__5614
04fa0     13 13 02 F6 | 	mov	arg01, local01
04fa4     1C 21 B2 FD | 	call	#__system___string_cmp
04fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fac     E4 0B 90 AD |  if_e	jmp	#LR__0334
04fb0     B7 01 00 FF 
04fb4     3F 14 06 F6 | 	mov	arg02, ##@LR__5615
04fb8     13 13 02 F6 | 	mov	arg01, local01
04fbc     04 21 B2 FD | 	call	#__system___string_cmp
04fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc4     D4 0B 90 AD |  if_e	jmp	#LR__0335
04fc8     B7 01 00 FF 
04fcc     46 14 06 F6 | 	mov	arg02, ##@LR__5616
04fd0     13 13 02 F6 | 	mov	arg01, local01
04fd4     EC 20 B2 FD | 	call	#__system___string_cmp
04fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fdc     C4 0B 90 AD |  if_e	jmp	#LR__0336
04fe0     B7 01 00 FF 
04fe4     4A 14 06 F6 | 	mov	arg02, ##@LR__5617
04fe8     13 13 02 F6 | 	mov	arg01, local01
04fec     D4 20 B2 FD | 	call	#__system___string_cmp
04ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff4     B4 0B 90 AD |  if_e	jmp	#LR__0337
04ff8     B7 01 00 FF 
04ffc     50 14 06 F6 | 	mov	arg02, ##@LR__5618
05000     13 13 02 F6 | 	mov	arg01, local01
05004     BC 20 B2 FD | 	call	#__system___string_cmp
05008     00 FA 0D F2 | 	cmp	result1, #0 wz
0500c     A4 0B 90 AD |  if_e	jmp	#LR__0338
05010     B7 01 00 FF 
05014     56 14 06 F6 | 	mov	arg02, ##@LR__5619
05018     13 13 02 F6 | 	mov	arg01, local01
0501c     A4 20 B2 FD | 	call	#__system___string_cmp
05020     00 FA 0D F2 | 	cmp	result1, #0 wz
05024     94 0B 90 AD |  if_e	jmp	#LR__0339
05028     B7 01 00 FF 
0502c     5A 14 06 F6 | 	mov	arg02, ##@LR__5620
05030     13 13 02 F6 | 	mov	arg01, local01
05034     8C 20 B2 FD | 	call	#__system___string_cmp
05038     00 FA 0D F2 | 	cmp	result1, #0 wz
0503c     84 0B 90 AD |  if_e	jmp	#LR__0340
05040     B7 01 00 FF 
05044     62 14 06 F6 | 	mov	arg02, ##@LR__5621
05048     13 13 02 F6 | 	mov	arg01, local01
0504c     74 20 B2 FD | 	call	#__system___string_cmp
05050     00 FA 0D F2 | 	cmp	result1, #0 wz
05054     74 0B 90 AD |  if_e	jmp	#LR__0341
05058     B7 01 00 FF 
0505c     68 14 06 F6 | 	mov	arg02, ##@LR__5622
05060     13 13 02 F6 | 	mov	arg01, local01
05064     5C 20 B2 FD | 	call	#__system___string_cmp
05068     00 FA 0D F2 | 	cmp	result1, #0 wz
0506c     64 0B 90 AD |  if_e	jmp	#LR__0342
05070     B7 01 00 FF 
05074     6B 14 06 F6 | 	mov	arg02, ##@LR__5623
05078     13 13 02 F6 | 	mov	arg01, local01
0507c     44 20 B2 FD | 	call	#__system___string_cmp
05080     00 FA 0D F2 | 	cmp	result1, #0 wz
05084     54 0B 90 AD |  if_e	jmp	#LR__0343
05088     B7 01 00 FF 
0508c     70 14 06 F6 | 	mov	arg02, ##@LR__5624
05090     13 13 02 F6 | 	mov	arg01, local01
05094     2C 20 B2 FD | 	call	#__system___string_cmp
05098     00 FA 0D F2 | 	cmp	result1, #0 wz
0509c     44 0B 90 AD |  if_e	jmp	#LR__0344
050a0     B7 01 00 FF 
050a4     77 14 06 F6 | 	mov	arg02, ##@LR__5625
050a8     13 13 02 F6 | 	mov	arg01, local01
050ac     14 20 B2 FD | 	call	#__system___string_cmp
050b0     00 FA 0D F2 | 	cmp	result1, #0 wz
050b4     34 0B 90 AD |  if_e	jmp	#LR__0345
050b8     B7 01 00 FF 
050bc     7C 14 06 F6 | 	mov	arg02, ##@LR__5626
050c0     13 13 02 F6 | 	mov	arg01, local01
050c4     FC 1F B2 FD | 	call	#__system___string_cmp
050c8     00 FA 0D F2 | 	cmp	result1, #0 wz
050cc     24 0B 90 AD |  if_e	jmp	#LR__0346
050d0     B7 01 00 FF 
050d4     83 14 06 F6 | 	mov	arg02, ##@LR__5627
050d8     13 13 02 F6 | 	mov	arg01, local01
050dc     E4 1F B2 FD | 	call	#__system___string_cmp
050e0     00 FA 0D F2 | 	cmp	result1, #0 wz
050e4     14 0B 90 AD |  if_e	jmp	#LR__0347
050e8     B7 01 00 FF 
050ec     8A 14 06 F6 | 	mov	arg02, ##@LR__5628
050f0     13 13 02 F6 | 	mov	arg01, local01
050f4     CC 1F B2 FD | 	call	#__system___string_cmp
050f8     00 FA 0D F2 | 	cmp	result1, #0 wz
050fc     04 0B 90 AD |  if_e	jmp	#LR__0348
05100     B7 01 00 FF 
05104     94 14 06 F6 | 	mov	arg02, ##@LR__5629
05108     13 13 02 F6 | 	mov	arg01, local01
0510c     B4 1F B2 FD | 	call	#__system___string_cmp
05110     00 FA 0D F2 | 	cmp	result1, #0 wz
05114     F4 0A 90 AD |  if_e	jmp	#LR__0349
05118     B7 01 00 FF 
0511c     98 14 06 F6 | 	mov	arg02, ##@LR__5630
05120     13 13 02 F6 | 	mov	arg01, local01
05124     9C 1F B2 FD | 	call	#__system___string_cmp
05128     00 FA 0D F2 | 	cmp	result1, #0 wz
0512c     E4 0A 90 AD |  if_e	jmp	#LR__0350
05130     B7 01 00 FF 
05134     9C 14 06 F6 | 	mov	arg02, ##@LR__5631
05138     13 13 02 F6 | 	mov	arg01, local01
0513c     84 1F B2 FD | 	call	#__system___string_cmp
05140     00 FA 0D F2 | 	cmp	result1, #0 wz
05144     D4 0A 90 AD |  if_e	jmp	#LR__0351
05148     B7 01 00 FF 
0514c     A3 14 06 F6 | 	mov	arg02, ##@LR__5632
05150     13 13 02 F6 | 	mov	arg01, local01
05154     6C 1F B2 FD | 	call	#__system___string_cmp
05158     00 FA 0D F2 | 	cmp	result1, #0 wz
0515c     C4 0A 90 AD |  if_e	jmp	#LR__0352
05160     B7 01 00 FF 
05164     A7 14 06 F6 | 	mov	arg02, ##@LR__5633
05168     13 13 02 F6 | 	mov	arg01, local01
0516c     54 1F B2 FD | 	call	#__system___string_cmp
05170     00 FA 0D F2 | 	cmp	result1, #0 wz
05174     B4 0A 90 AD |  if_e	jmp	#LR__0353
05178     B7 01 00 FF 
0517c     AB 14 06 F6 | 	mov	arg02, ##@LR__5634
05180     13 13 02 F6 | 	mov	arg01, local01
05184     3C 1F B2 FD | 	call	#__system___string_cmp
05188     00 FA 0D F2 | 	cmp	result1, #0 wz
0518c     A4 0A 90 AD |  if_e	jmp	#LR__0354
05190     B7 01 00 FF 
05194     B1 14 06 F6 | 	mov	arg02, ##@LR__5635
05198     13 13 02 F6 | 	mov	arg01, local01
0519c     24 1F B2 FD | 	call	#__system___string_cmp
051a0     00 FA 0D F2 | 	cmp	result1, #0 wz
051a4     94 0A 90 AD |  if_e	jmp	#LR__0355
051a8     B7 01 00 FF 
051ac     B6 14 06 F6 | 	mov	arg02, ##@LR__5636
051b0     13 13 02 F6 | 	mov	arg01, local01
051b4     0C 1F B2 FD | 	call	#__system___string_cmp
051b8     00 FA 0D F2 | 	cmp	result1, #0 wz
051bc     84 0A 90 AD |  if_e	jmp	#LR__0356
051c0     B7 01 00 FF 
051c4     BD 14 06 F6 | 	mov	arg02, ##@LR__5637
051c8     13 13 02 F6 | 	mov	arg01, local01
051cc     F4 1E B2 FD | 	call	#__system___string_cmp
051d0     00 FA 0D F2 | 	cmp	result1, #0 wz
051d4     74 0A 90 AD |  if_e	jmp	#LR__0357
051d8     B7 01 00 FF 
051dc     C1 14 06 F6 | 	mov	arg02, ##@LR__5638
051e0     13 13 02 F6 | 	mov	arg01, local01
051e4     DC 1E B2 FD | 	call	#__system___string_cmp
051e8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ec     64 0A 90 AD |  if_e	jmp	#LR__0358
051f0     B7 01 00 FF 
051f4     C6 14 06 F6 | 	mov	arg02, ##@LR__5639
051f8     13 13 02 F6 | 	mov	arg01, local01
051fc     C4 1E B2 FD | 	call	#__system___string_cmp
05200     00 FA 0D F2 | 	cmp	result1, #0 wz
05204     54 0A 90 AD |  if_e	jmp	#LR__0359
05208     B7 01 00 FF 
0520c     CA 14 06 F6 | 	mov	arg02, ##@LR__5640
05210     13 13 02 F6 | 	mov	arg01, local01
05214     AC 1E B2 FD | 	call	#__system___string_cmp
05218     00 FA 0D F2 | 	cmp	result1, #0 wz
0521c     44 0A 90 AD |  if_e	jmp	#LR__0360
05220     B7 01 00 FF 
05224     D0 14 06 F6 | 	mov	arg02, ##@LR__5641
05228     13 13 02 F6 | 	mov	arg01, local01
0522c     94 1E B2 FD | 	call	#__system___string_cmp
05230     00 FA 0D F2 | 	cmp	result1, #0 wz
05234     34 0A 90 AD |  if_e	jmp	#LR__0361
05238     B7 01 00 FF 
0523c     D3 14 06 F6 | 	mov	arg02, ##@LR__5642
05240     13 13 02 F6 | 	mov	arg01, local01
05244     7C 1E B2 FD | 	call	#__system___string_cmp
05248     00 FA 0D F2 | 	cmp	result1, #0 wz
0524c     24 0A 90 AD |  if_e	jmp	#LR__0362
05250     B7 01 00 FF 
05254     DB 14 06 F6 | 	mov	arg02, ##@LR__5643
05258     13 13 02 F6 | 	mov	arg01, local01
0525c     64 1E B2 FD | 	call	#__system___string_cmp
05260     00 FA 0D F2 | 	cmp	result1, #0 wz
05264     14 0A 90 AD |  if_e	jmp	#LR__0363
05268     B7 01 00 FF 
0526c     DF 14 06 F6 | 	mov	arg02, ##@LR__5644
05270     13 13 02 F6 | 	mov	arg01, local01
05274     4C 1E B2 FD | 	call	#__system___string_cmp
05278     00 FA 0D F2 | 	cmp	result1, #0 wz
0527c     04 0A 90 AD |  if_e	jmp	#LR__0364
05280     B7 01 00 FF 
05284     E4 14 06 F6 | 	mov	arg02, ##@LR__5645
05288     13 13 02 F6 | 	mov	arg01, local01
0528c     34 1E B2 FD | 	call	#__system___string_cmp
05290     00 FA 0D F2 | 	cmp	result1, #0 wz
05294     F4 09 90 AD |  if_e	jmp	#LR__0365
05298     B7 01 00 FF 
0529c     E8 14 06 F6 | 	mov	arg02, ##@LR__5646
052a0     13 13 02 F6 | 	mov	arg01, local01
052a4     1C 1E B2 FD | 	call	#__system___string_cmp
052a8     00 FA 0D F2 | 	cmp	result1, #0 wz
052ac     E4 09 90 AD |  if_e	jmp	#LR__0366
052b0     B7 01 00 FF 
052b4     ED 14 06 F6 | 	mov	arg02, ##@LR__5647
052b8     13 13 02 F6 | 	mov	arg01, local01
052bc     04 1E B2 FD | 	call	#__system___string_cmp
052c0     00 FA 0D F2 | 	cmp	result1, #0 wz
052c4     D4 09 90 AD |  if_e	jmp	#LR__0367
052c8     B7 01 00 FF 
052cc     F1 14 06 F6 | 	mov	arg02, ##@LR__5648
052d0     13 13 02 F6 | 	mov	arg01, local01
052d4     EC 1D B2 FD | 	call	#__system___string_cmp
052d8     00 FA 0D F2 | 	cmp	result1, #0 wz
052dc     C4 09 90 AD |  if_e	jmp	#LR__0368
052e0     B7 01 00 FF 
052e4     F4 14 06 F6 | 	mov	arg02, ##@LR__5649
052e8     13 13 02 F6 | 	mov	arg01, local01
052ec     D4 1D B2 FD | 	call	#__system___string_cmp
052f0     00 FA 0D F2 | 	cmp	result1, #0 wz
052f4     B4 09 90 AD |  if_e	jmp	#LR__0369
052f8     B7 01 00 FF 
052fc     FA 14 06 F6 | 	mov	arg02, ##@LR__5650
05300     13 13 02 F6 | 	mov	arg01, local01
05304     BC 1D B2 FD | 	call	#__system___string_cmp
05308     00 FA 0D F2 | 	cmp	result1, #0 wz
0530c     A4 09 90 AD |  if_e	jmp	#LR__0370
05310     B7 01 00 FF 
05314     FE 14 06 F6 | 	mov	arg02, ##@LR__5651
05318     13 13 02 F6 | 	mov	arg01, local01
0531c     A4 1D B2 FD | 	call	#__system___string_cmp
05320     00 FA 0D F2 | 	cmp	result1, #0 wz
05324     94 09 90 AD |  if_e	jmp	#LR__0371
05328     B7 01 00 FF 
0532c     02 15 06 F6 | 	mov	arg02, ##@LR__5652
05330     13 13 02 F6 | 	mov	arg01, local01
05334     8C 1D B2 FD | 	call	#__system___string_cmp
05338     00 FA 0D F2 | 	cmp	result1, #0 wz
0533c     84 09 90 AD |  if_e	jmp	#LR__0372
05340     B7 01 00 FF 
05344     08 15 06 F6 | 	mov	arg02, ##@LR__5653
05348     13 13 02 F6 | 	mov	arg01, local01
0534c     74 1D B2 FD | 	call	#__system___string_cmp
05350     00 FA 0D F2 | 	cmp	result1, #0 wz
05354     74 09 90 AD |  if_e	jmp	#LR__0373
05358     B7 01 00 FF 
0535c     0D 15 06 F6 | 	mov	arg02, ##@LR__5654
05360     13 13 02 F6 | 	mov	arg01, local01
05364     5C 1D B2 FD | 	call	#__system___string_cmp
05368     00 FA 0D F2 | 	cmp	result1, #0 wz
0536c     64 09 90 AD |  if_e	jmp	#LR__0374
05370     B7 01 00 FF 
05374     10 15 06 F6 | 	mov	arg02, ##@LR__5655
05378     13 13 02 F6 | 	mov	arg01, local01
0537c     44 1D B2 FD | 	call	#__system___string_cmp
05380     00 FA 0D F2 | 	cmp	result1, #0 wz
05384     54 09 90 AD |  if_e	jmp	#LR__0375
05388     B7 01 00 FF 
0538c     13 15 06 F6 | 	mov	arg02, ##@LR__5656
05390     13 13 02 F6 | 	mov	arg01, local01
05394     2C 1D B2 FD | 	call	#__system___string_cmp
05398     00 FA 0D F2 | 	cmp	result1, #0 wz
0539c     44 09 90 AD |  if_e	jmp	#LR__0376
053a0     B7 01 00 FF 
053a4     17 15 06 F6 | 	mov	arg02, ##@LR__5657
053a8     13 13 02 F6 | 	mov	arg01, local01
053ac     14 1D B2 FD | 	call	#__system___string_cmp
053b0     00 FA 0D F2 | 	cmp	result1, #0 wz
053b4     34 09 90 AD |  if_e	jmp	#LR__0377
053b8     B7 01 00 FF 
053bc     1A 15 06 F6 | 	mov	arg02, ##@LR__5658
053c0     13 13 02 F6 | 	mov	arg01, local01
053c4     FC 1C B2 FD | 	call	#__system___string_cmp
053c8     00 FA 0D F2 | 	cmp	result1, #0 wz
053cc     24 09 90 AD |  if_e	jmp	#LR__0378
053d0     B7 01 00 FF 
053d4     20 15 06 F6 | 	mov	arg02, ##@LR__5659
053d8     13 13 02 F6 | 	mov	arg01, local01
053dc     E4 1C B2 FD | 	call	#__system___string_cmp
053e0     00 FA 0D F2 | 	cmp	result1, #0 wz
053e4     14 09 90 AD |  if_e	jmp	#LR__0379
053e8     B7 01 00 FF 
053ec     25 15 06 F6 | 	mov	arg02, ##@LR__5660
053f0     13 13 02 F6 | 	mov	arg01, local01
053f4     CC 1C B2 FD | 	call	#__system___string_cmp
053f8     00 FA 0D F2 | 	cmp	result1, #0 wz
053fc     04 09 90 AD |  if_e	jmp	#LR__0380
05400     B7 01 00 FF 
05404     28 15 06 F6 | 	mov	arg02, ##@LR__5661
05408     13 13 02 F6 | 	mov	arg01, local01
0540c     B4 1C B2 FD | 	call	#__system___string_cmp
05410     00 FA 0D F2 | 	cmp	result1, #0 wz
05414     F4 08 90 AD |  if_e	jmp	#LR__0381
05418     B7 01 00 FF 
0541c     2D 15 06 F6 | 	mov	arg02, ##@LR__5662
05420     13 13 02 F6 | 	mov	arg01, local01
05424     9C 1C B2 FD | 	call	#__system___string_cmp
05428     00 FA 0D F2 | 	cmp	result1, #0 wz
0542c     E4 08 90 AD |  if_e	jmp	#LR__0382
05430     B7 01 00 FF 
05434     31 15 06 F6 | 	mov	arg02, ##@LR__5663
05438     13 13 02 F6 | 	mov	arg01, local01
0543c     84 1C B2 FD | 	call	#__system___string_cmp
05440     00 FA 0D F2 | 	cmp	result1, #0 wz
05444     D4 08 90 AD |  if_e	jmp	#LR__0383
05448     B7 01 00 FF 
0544c     37 15 06 F6 | 	mov	arg02, ##@LR__5664
05450     13 13 02 F6 | 	mov	arg01, local01
05454     6C 1C B2 FD | 	call	#__system___string_cmp
05458     00 FA 0D F2 | 	cmp	result1, #0 wz
0545c     C4 08 90 AD |  if_e	jmp	#LR__0384
05460     B7 01 00 FF 
05464     3D 15 06 F6 | 	mov	arg02, ##@LR__5665
05468     13 13 02 F6 | 	mov	arg01, local01
0546c     54 1C B2 FD | 	call	#__system___string_cmp
05470     00 FA 0D F2 | 	cmp	result1, #0 wz
05474     B4 08 90 AD |  if_e	jmp	#LR__0385
05478     B7 01 00 FF 
0547c     42 15 06 F6 | 	mov	arg02, ##@LR__5666
05480     13 13 02 F6 | 	mov	arg01, local01
05484     3C 1C B2 FD | 	call	#__system___string_cmp
05488     00 FA 0D F2 | 	cmp	result1, #0 wz
0548c     A4 08 90 AD |  if_e	jmp	#LR__0386
05490     B7 01 00 FF 
05494     45 15 06 F6 | 	mov	arg02, ##@LR__5667
05498     13 13 02 F6 | 	mov	arg01, local01
0549c     24 1C B2 FD | 	call	#__system___string_cmp
054a0     00 FA 0D F2 | 	cmp	result1, #0 wz
054a4     94 08 90 AD |  if_e	jmp	#LR__0387
054a8     B7 01 00 FF 
054ac     4B 15 06 F6 | 	mov	arg02, ##@LR__5668
054b0     13 13 02 F6 | 	mov	arg01, local01
054b4     0C 1C B2 FD | 	call	#__system___string_cmp
054b8     00 FA 0D F2 | 	cmp	result1, #0 wz
054bc     84 08 90 AD |  if_e	jmp	#LR__0388
054c0     B7 01 00 FF 
054c4     4F 15 06 F6 | 	mov	arg02, ##@LR__5669
054c8     13 13 02 F6 | 	mov	arg01, local01
054cc     F4 1B B2 FD | 	call	#__system___string_cmp
054d0     00 FA 0D F2 | 	cmp	result1, #0 wz
054d4     74 08 90 AD |  if_e	jmp	#LR__0389
054d8     B7 01 00 FF 
054dc     54 15 06 F6 | 	mov	arg02, ##@LR__5670
054e0     13 13 02 F6 | 	mov	arg01, local01
054e4     DC 1B B2 FD | 	call	#__system___string_cmp
054e8     00 FA 0D F2 | 	cmp	result1, #0 wz
054ec     64 08 90 AD |  if_e	jmp	#LR__0390
054f0     B7 01 00 FF 
054f4     57 15 06 F6 | 	mov	arg02, ##@LR__5671
054f8     13 13 02 F6 | 	mov	arg01, local01
054fc     C4 1B B2 FD | 	call	#__system___string_cmp
05500     00 FA 0D F2 | 	cmp	result1, #0 wz
05504     54 08 90 AD |  if_e	jmp	#LR__0391
05508     B7 01 00 FF 
0550c     5A 15 06 F6 | 	mov	arg02, ##@LR__5672
05510     13 13 02 F6 | 	mov	arg01, local01
05514     AC 1B B2 FD | 	call	#__system___string_cmp
05518     00 FA 0D F2 | 	cmp	result1, #0 wz
0551c     44 08 90 AD |  if_e	jmp	#LR__0392
05520     B7 01 00 FF 
05524     5F 15 06 F6 | 	mov	arg02, ##@LR__5673
05528     13 13 02 F6 | 	mov	arg01, local01
0552c     94 1B B2 FD | 	call	#__system___string_cmp
05530     00 FA 0D F2 | 	cmp	result1, #0 wz
05534     34 08 90 AD |  if_e	jmp	#LR__0393
05538     B7 01 00 FF 
0553c     65 15 06 F6 | 	mov	arg02, ##@LR__5674
05540     13 13 02 F6 | 	mov	arg01, local01
05544     7C 1B B2 FD | 	call	#__system___string_cmp
05548     00 FA 0D F2 | 	cmp	result1, #0 wz
0554c     24 08 90 AD |  if_e	jmp	#LR__0394
05550     B7 01 00 FF 
05554     69 15 06 F6 | 	mov	arg02, ##@LR__5675
05558     13 13 02 F6 | 	mov	arg01, local01
0555c     64 1B B2 FD | 	call	#__system___string_cmp
05560     00 FA 0D F2 | 	cmp	result1, #0 wz
05564     14 08 90 AD |  if_e	jmp	#LR__0395
05568     B7 01 00 FF 
0556c     72 15 06 F6 | 	mov	arg02, ##@LR__5676
05570     13 13 02 F6 | 	mov	arg01, local01
05574     4C 1B B2 FD | 	call	#__system___string_cmp
05578     00 FA 0D F2 | 	cmp	result1, #0 wz
0557c     04 08 90 AD |  if_e	jmp	#LR__0396
05580     B7 01 00 FF 
05584     78 15 06 F6 | 	mov	arg02, ##@LR__5677
05588     13 13 02 F6 | 	mov	arg01, local01
0558c     34 1B B2 FD | 	call	#__system___string_cmp
05590     00 FA 0D F2 | 	cmp	result1, #0 wz
05594     F4 07 90 AD |  if_e	jmp	#LR__0397
05598     B7 01 00 FF 
0559c     7E 15 06 F6 | 	mov	arg02, ##@LR__5678
055a0     13 13 02 F6 | 	mov	arg01, local01
055a4     1C 1B B2 FD | 	call	#__system___string_cmp
055a8     00 FA 0D F2 | 	cmp	result1, #0 wz
055ac     E4 07 90 AD |  if_e	jmp	#LR__0398
055b0     B7 01 00 FF 
055b4     87 15 06 F6 | 	mov	arg02, ##@LR__5679
055b8     13 13 02 F6 | 	mov	arg01, local01
055bc     04 1B B2 FD | 	call	#__system___string_cmp
055c0     00 FA 0D F2 | 	cmp	result1, #0 wz
055c4     D4 07 90 AD |  if_e	jmp	#LR__0399
055c8     B7 01 00 FF 
055cc     91 15 06 F6 | 	mov	arg02, ##@LR__5680
055d0     13 13 02 F6 | 	mov	arg01, local01
055d4     EC 1A B2 FD | 	call	#__system___string_cmp
055d8     00 FA 0D F2 | 	cmp	result1, #0 wz
055dc     C4 07 90 AD |  if_e	jmp	#LR__0400
055e0     B7 01 00 FF 
055e4     9A 15 06 F6 | 	mov	arg02, ##@LR__5681
055e8     13 13 02 F6 | 	mov	arg01, local01
055ec     D4 1A B2 FD | 	call	#__system___string_cmp
055f0     00 FA 0D F2 | 	cmp	result1, #0 wz
055f4     B4 07 90 AD |  if_e	jmp	#LR__0401
055f8     B7 01 00 FF 
055fc     9F 15 06 F6 | 	mov	arg02, ##@LR__5682
05600     13 13 02 F6 | 	mov	arg01, local01
05604     BC 1A B2 FD | 	call	#__system___string_cmp
05608     00 FA 0D F2 | 	cmp	result1, #0 wz
0560c     A4 07 90 AD |  if_e	jmp	#LR__0402
05610     B7 01 00 FF 
05614     A2 15 06 F6 | 	mov	arg02, ##@LR__5683
05618     13 13 02 F6 | 	mov	arg01, local01
0561c     A4 1A B2 FD | 	call	#__system___string_cmp
05620     00 FA 0D F2 | 	cmp	result1, #0 wz
05624     94 07 90 AD |  if_e	jmp	#LR__0403
05628     B7 01 00 FF 
0562c     A7 15 06 F6 | 	mov	arg02, ##@LR__5684
05630     13 13 02 F6 | 	mov	arg01, local01
05634     8C 1A B2 FD | 	call	#__system___string_cmp
05638     00 FA 0D F2 | 	cmp	result1, #0 wz
0563c     84 07 90 AD |  if_e	jmp	#LR__0404
05640     B7 01 00 FF 
05644     AB 15 06 F6 | 	mov	arg02, ##@LR__5685
05648     13 13 02 F6 | 	mov	arg01, local01
0564c     74 1A B2 FD | 	call	#__system___string_cmp
05650     00 FA 0D F2 | 	cmp	result1, #0 wz
05654     74 07 90 AD |  if_e	jmp	#LR__0405
05658     B7 01 00 FF 
0565c     B0 15 06 F6 | 	mov	arg02, ##@LR__5686
05660     13 13 02 F6 | 	mov	arg01, local01
05664     5C 1A B2 FD | 	call	#__system___string_cmp
05668     00 FA 0D F2 | 	cmp	result1, #0 wz
0566c     64 07 90 AD |  if_e	jmp	#LR__0406
05670     B7 01 00 FF 
05674     B4 15 06 F6 | 	mov	arg02, ##@LR__5687
05678     13 13 02 F6 | 	mov	arg01, local01
0567c     44 1A B2 FD | 	call	#__system___string_cmp
05680     00 FA 0D F2 | 	cmp	result1, #0 wz
05684     54 07 90 AD |  if_e	jmp	#LR__0407
05688     B7 01 00 FF 
0568c     BD 15 06 F6 | 	mov	arg02, ##@LR__5688
05690     13 13 02 F6 | 	mov	arg01, local01
05694     2C 1A B2 FD | 	call	#__system___string_cmp
05698     00 FA 0D F2 | 	cmp	result1, #0 wz
0569c     44 07 90 AD |  if_e	jmp	#LR__0408
056a0     B7 01 00 FF 
056a4     C2 15 06 F6 | 	mov	arg02, ##@LR__5689
056a8     13 13 02 F6 | 	mov	arg01, local01
056ac     14 1A B2 FD | 	call	#__system___string_cmp
056b0     00 FA 0D F2 | 	cmp	result1, #0 wz
056b4     34 07 90 AD |  if_e	jmp	#LR__0409
056b8     B7 01 00 FF 
056bc     C8 15 06 F6 | 	mov	arg02, ##@LR__5690
056c0     13 13 02 F6 | 	mov	arg01, local01
056c4     FC 19 B2 FD | 	call	#__system___string_cmp
056c8     00 FA 0D F2 | 	cmp	result1, #0 wz
056cc     24 07 90 AD |  if_e	jmp	#LR__0410
056d0     B7 01 00 FF 
056d4     CA 15 06 F6 | 	mov	arg02, ##@LR__5691
056d8     13 13 02 F6 | 	mov	arg01, local01
056dc     E4 19 B2 FD | 	call	#__system___string_cmp
056e0     00 FA 0D F2 | 	cmp	result1, #0 wz
056e4     14 07 90 AD |  if_e	jmp	#LR__0411
056e8     B7 01 00 FF 
056ec     CE 15 06 F6 | 	mov	arg02, ##@LR__5692
056f0     13 13 02 F6 | 	mov	arg01, local01
056f4     CC 19 B2 FD | 	call	#__system___string_cmp
056f8     00 FA 0D F2 | 	cmp	result1, #0 wz
056fc     04 07 90 AD |  if_e	jmp	#LR__0412
05700     B7 01 00 FF 
05704     D2 15 06 F6 | 	mov	arg02, ##@LR__5693
05708     13 13 02 F6 | 	mov	arg01, local01
0570c     B4 19 B2 FD | 	call	#__system___string_cmp
05710     00 FA 0D F2 | 	cmp	result1, #0 wz
05714     F4 06 90 AD |  if_e	jmp	#LR__0413
05718     B7 01 00 FF 
0571c     D7 15 06 F6 | 	mov	arg02, ##@LR__5694
05720     13 13 02 F6 | 	mov	arg01, local01
05724     9C 19 B2 FD | 	call	#__system___string_cmp
05728     00 FA 0D F2 | 	cmp	result1, #0 wz
0572c     E4 06 90 AD |  if_e	jmp	#LR__0414
05730     B7 01 00 FF 
05734     DF 15 06 F6 | 	mov	arg02, ##@LR__5695
05738     13 13 02 F6 | 	mov	arg01, local01
0573c     84 19 B2 FD | 	call	#__system___string_cmp
05740     00 FA 0D F2 | 	cmp	result1, #0 wz
05744     D4 06 90 AD |  if_e	jmp	#LR__0415
05748     B7 01 00 FF 
0574c     E3 15 06 F6 | 	mov	arg02, ##@LR__5696
05750     13 13 02 F6 | 	mov	arg01, local01
05754     6C 19 B2 FD | 	call	#__system___string_cmp
05758     00 FA 0D F2 | 	cmp	result1, #0 wz
0575c     C4 06 90 AD |  if_e	jmp	#LR__0416
05760     B7 01 00 FF 
05764     E5 15 06 F6 | 	mov	arg02, ##@LR__5697
05768     13 13 02 F6 | 	mov	arg01, local01
0576c     54 19 B2 FD | 	call	#__system___string_cmp
05770     00 FA 0D F2 | 	cmp	result1, #0 wz
05774     B4 06 90 AD |  if_e	jmp	#LR__0417
05778     B7 01 00 FF 
0577c     ED 15 06 F6 | 	mov	arg02, ##@LR__5698
05780     13 13 02 F6 | 	mov	arg01, local01
05784     3C 19 B2 FD | 	call	#__system___string_cmp
05788     00 FA 0D F2 | 	cmp	result1, #0 wz
0578c     A4 06 90 AD |  if_e	jmp	#LR__0418
05790     B7 01 00 FF 
05794     FC 15 06 F6 | 	mov	arg02, ##@LR__5699
05798     13 13 02 F6 | 	mov	arg01, local01
0579c     24 19 B2 FD | 	call	#__system___string_cmp
057a0     00 FA 0D F2 | 	cmp	result1, #0 wz
057a4     94 06 90 AD |  if_e	jmp	#LR__0419
057a8     B8 01 00 FF 
057ac     00 14 06 F6 | 	mov	arg02, ##@LR__5700
057b0     13 13 02 F6 | 	mov	arg01, local01
057b4     0C 19 B2 FD | 	call	#__system___string_cmp
057b8     00 FA 0D F2 | 	cmp	result1, #0 wz
057bc     84 06 90 AD |  if_e	jmp	#LR__0420
057c0     B8 01 00 FF 
057c4     07 14 06 F6 | 	mov	arg02, ##@LR__5701
057c8     13 13 02 F6 | 	mov	arg01, local01
057cc     F4 18 B2 FD | 	call	#__system___string_cmp
057d0     00 FA 0D F2 | 	cmp	result1, #0 wz
057d4     74 06 90 AD |  if_e	jmp	#LR__0421
057d8     B8 01 00 FF 
057dc     0B 14 06 F6 | 	mov	arg02, ##@LR__5702
057e0     13 13 02 F6 | 	mov	arg01, local01
057e4     DC 18 B2 FD | 	call	#__system___string_cmp
057e8     00 FA 0D F2 | 	cmp	result1, #0 wz
057ec     64 06 90 AD |  if_e	jmp	#LR__0422
057f0     B8 01 00 FF 
057f4     10 14 06 F6 | 	mov	arg02, ##@LR__5703
057f8     13 13 02 F6 | 	mov	arg01, local01
057fc     C4 18 B2 FD | 	call	#__system___string_cmp
05800     00 FA 0D F2 | 	cmp	result1, #0 wz
05804     54 06 90 AD |  if_e	jmp	#LR__0423
05808     B8 01 00 FF 
0580c     13 14 06 F6 | 	mov	arg02, ##@LR__5704
05810     13 13 02 F6 | 	mov	arg01, local01
05814     AC 18 B2 FD | 	call	#__system___string_cmp
05818     00 FA 0D F2 | 	cmp	result1, #0 wz
0581c     44 06 90 AD |  if_e	jmp	#LR__0424
05820     B8 01 00 FF 
05824     1C 14 06 F6 | 	mov	arg02, ##@LR__5705
05828     13 13 02 F6 | 	mov	arg01, local01
0582c     94 18 B2 FD | 	call	#__system___string_cmp
05830     00 FA 0D F2 | 	cmp	result1, #0 wz
05834     34 06 90 AD |  if_e	jmp	#LR__0425
05838     B8 01 00 FF 
0583c     20 14 06 F6 | 	mov	arg02, ##@LR__5706
05840     13 13 02 F6 | 	mov	arg01, local01
05844     7C 18 B2 FD | 	call	#__system___string_cmp
05848     00 FA 0D F2 | 	cmp	result1, #0 wz
0584c     24 06 90 AD |  if_e	jmp	#LR__0426
05850     B8 01 00 FF 
05854     29 14 06 F6 | 	mov	arg02, ##@LR__5707
05858     13 13 02 F6 | 	mov	arg01, local01
0585c     64 18 B2 FD | 	call	#__system___string_cmp
05860     00 FA 0D F2 | 	cmp	result1, #0 wz
05864     14 06 90 AD |  if_e	jmp	#LR__0427
05868     B8 01 00 FF 
0586c     2D 14 06 F6 | 	mov	arg02, ##@LR__5708
05870     13 13 02 F6 | 	mov	arg01, local01
05874     4C 18 B2 FD | 	call	#__system___string_cmp
05878     00 FA 0D F2 | 	cmp	result1, #0 wz
0587c     04 06 90 AD |  if_e	jmp	#LR__0428
05880     B8 01 00 FF 
05884     34 14 06 F6 | 	mov	arg02, ##@LR__5709
05888     13 13 02 F6 | 	mov	arg01, local01
0588c     34 18 B2 FD | 	call	#__system___string_cmp
05890     00 FA 0D F2 | 	cmp	result1, #0 wz
05894     F4 05 90 AD |  if_e	jmp	#LR__0429
05898     B8 01 00 FF 
0589c     38 14 06 F6 | 	mov	arg02, ##@LR__5710
058a0     13 13 02 F6 | 	mov	arg01, local01
058a4     1C 18 B2 FD | 	call	#__system___string_cmp
058a8     00 FA 0D F2 | 	cmp	result1, #0 wz
058ac     E4 05 90 AD |  if_e	jmp	#LR__0430
058b0     B8 01 00 FF 
058b4     3F 14 06 F6 | 	mov	arg02, ##@LR__5711
058b8     13 13 02 F6 | 	mov	arg01, local01
058bc     04 18 B2 FD | 	call	#__system___string_cmp
058c0     00 FA 0D F2 | 	cmp	result1, #0 wz
058c4     D4 05 90 AD |  if_e	jmp	#LR__0431
058c8     B8 01 00 FF 
058cc     43 14 06 F6 | 	mov	arg02, ##@LR__5712
058d0     13 13 02 F6 | 	mov	arg01, local01
058d4     EC 17 B2 FD | 	call	#__system___string_cmp
058d8     00 FA 0D F2 | 	cmp	result1, #0 wz
058dc     C4 05 90 AD |  if_e	jmp	#LR__0432
058e0     B8 01 00 FF 
058e4     4A 14 06 F6 | 	mov	arg02, ##@LR__5713
058e8     13 13 02 F6 | 	mov	arg01, local01
058ec     D4 17 B2 FD | 	call	#__system___string_cmp
058f0     00 FA 0D F2 | 	cmp	result1, #0 wz
058f4     B4 05 90 AD |  if_e	jmp	#LR__0433
058f8     B8 01 00 FF 
058fc     4E 14 06 F6 | 	mov	arg02, ##@LR__5714
05900     13 13 02 F6 | 	mov	arg01, local01
05904     BC 17 B2 FD | 	call	#__system___string_cmp
05908     00 FA 0D F2 | 	cmp	result1, #0 wz
0590c     A4 05 90 AD |  if_e	jmp	#LR__0434
05910     B8 01 00 FF 
05914     59 14 06 F6 | 	mov	arg02, ##@LR__5715
05918     13 13 02 F6 | 	mov	arg01, local01
0591c     A4 17 B2 FD | 	call	#__system___string_cmp
05920     00 FA 0D F2 | 	cmp	result1, #0 wz
05924     94 05 90 AD |  if_e	jmp	#LR__0435
05928     B8 01 00 FF 
0592c     5D 14 06 F6 | 	mov	arg02, ##@LR__5716
05930     13 13 02 F6 | 	mov	arg01, local01
05934     8C 17 B2 FD | 	call	#__system___string_cmp
05938     00 FA 0D F2 | 	cmp	result1, #0 wz
0593c     84 05 90 AD |  if_e	jmp	#LR__0436
05940     B8 01 00 FF 
05944     64 14 06 F6 | 	mov	arg02, ##@LR__5717
05948     13 13 02 F6 | 	mov	arg01, local01
0594c     74 17 B2 FD | 	call	#__system___string_cmp
05950     00 FA 0D F2 | 	cmp	result1, #0 wz
05954     74 05 90 AD |  if_e	jmp	#LR__0437
05958     B8 01 00 FF 
0595c     68 14 06 F6 | 	mov	arg02, ##@LR__5718
05960     13 13 02 F6 | 	mov	arg01, local01
05964     5C 17 B2 FD | 	call	#__system___string_cmp
05968     00 FA 0D F2 | 	cmp	result1, #0 wz
0596c     64 05 90 AD |  if_e	jmp	#LR__0438
05970     B8 01 00 FF 
05974     70 14 06 F6 | 	mov	arg02, ##@LR__5719
05978     13 13 02 F6 | 	mov	arg01, local01
0597c     44 17 B2 FD | 	call	#__system___string_cmp
05980     00 FA 0D F2 | 	cmp	result1, #0 wz
05984     54 05 90 AD |  if_e	jmp	#LR__0439
05988     B8 01 00 FF 
0598c     74 14 06 F6 | 	mov	arg02, ##@LR__5720
05990     13 13 02 F6 | 	mov	arg01, local01
05994     2C 17 B2 FD | 	call	#__system___string_cmp
05998     00 FA 0D F2 | 	cmp	result1, #0 wz
0599c     44 05 90 AD |  if_e	jmp	#LR__0440
059a0     B8 01 00 FF 
059a4     7B 14 06 F6 | 	mov	arg02, ##@LR__5721
059a8     13 13 02 F6 | 	mov	arg01, local01
059ac     14 17 B2 FD | 	call	#__system___string_cmp
059b0     00 FA 0D F2 | 	cmp	result1, #0 wz
059b4     34 05 90 AD |  if_e	jmp	#LR__0441
059b8     B8 01 00 FF 
059bc     82 14 06 F6 | 	mov	arg02, ##@LR__5722
059c0     13 13 02 F6 | 	mov	arg01, local01
059c4     FC 16 B2 FD | 	call	#__system___string_cmp
059c8     00 FA 0D F2 | 	cmp	result1, #0 wz
059cc     24 05 90 AD |  if_e	jmp	#LR__0442
059d0     B8 01 00 FF 
059d4     86 14 06 F6 | 	mov	arg02, ##@LR__5723
059d8     13 13 02 F6 | 	mov	arg01, local01
059dc     E4 16 B2 FD | 	call	#__system___string_cmp
059e0     00 FA 0D F2 | 	cmp	result1, #0 wz
059e4     14 05 90 AD |  if_e	jmp	#LR__0443
059e8     B8 01 00 FF 
059ec     8C 14 06 F6 | 	mov	arg02, ##@LR__5724
059f0     13 13 02 F6 | 	mov	arg01, local01
059f4     CC 16 B2 FD | 	call	#__system___string_cmp
059f8     00 FA 0D F2 | 	cmp	result1, #0 wz
059fc     04 05 90 AD |  if_e	jmp	#LR__0444
05a00     B8 01 00 FF 
05a04     90 14 06 F6 | 	mov	arg02, ##@LR__5725
05a08     13 13 02 F6 | 	mov	arg01, local01
05a0c     B4 16 B2 FD | 	call	#__system___string_cmp
05a10     00 FA 0D F2 | 	cmp	result1, #0 wz
05a14     F4 04 90 AD |  if_e	jmp	#LR__0445
05a18     B8 01 00 FF 
05a1c     97 14 06 F6 | 	mov	arg02, ##@LR__5726
05a20     13 13 02 F6 | 	mov	arg01, local01
05a24     9C 16 B2 FD | 	call	#__system___string_cmp
05a28     00 FA 0D F2 | 	cmp	result1, #0 wz
05a2c     E4 04 90 AD |  if_e	jmp	#LR__0446
05a30     B8 01 00 FF 
05a34     9C 14 06 F6 | 	mov	arg02, ##@LR__5727
05a38     13 13 02 F6 | 	mov	arg01, local01
05a3c     84 16 B2 FD | 	call	#__system___string_cmp
05a40     00 FA 0D F2 | 	cmp	result1, #0 wz
05a44     D4 04 90 AD |  if_e	jmp	#LR__0447
05a48     B8 01 00 FF 
05a4c     A1 14 06 F6 | 	mov	arg02, ##@LR__5728
05a50     13 13 02 F6 | 	mov	arg01, local01
05a54     6C 16 B2 FD | 	call	#__system___string_cmp
05a58     00 FA 0D F2 | 	cmp	result1, #0 wz
05a5c     C4 04 90 AD |  if_e	jmp	#LR__0448
05a60     B8 01 00 FF 
05a64     A8 14 06 F6 | 	mov	arg02, ##@LR__5729
05a68     13 13 02 F6 | 	mov	arg01, local01
05a6c     54 16 B2 FD | 	call	#__system___string_cmp
05a70     00 FA 0D F2 | 	cmp	result1, #0 wz
05a74     B4 04 90 AD |  if_e	jmp	#LR__0449
05a78     B8 01 00 FF 
05a7c     AB 14 06 F6 | 	mov	arg02, ##@LR__5730
05a80     13 13 02 F6 | 	mov	arg01, local01
05a84     3C 16 B2 FD | 	call	#__system___string_cmp
05a88     00 FA 0D F2 | 	cmp	result1, #0 wz
05a8c     A4 04 90 AD |  if_e	jmp	#LR__0450
05a90     B8 01 00 FF 
05a94     B5 14 06 F6 | 	mov	arg02, ##@LR__5731
05a98     13 13 02 F6 | 	mov	arg01, local01
05a9c     24 16 B2 FD | 	call	#__system___string_cmp
05aa0     00 FA 0D F2 | 	cmp	result1, #0 wz
05aa4     94 04 90 AD |  if_e	jmp	#LR__0451
05aa8     B8 01 00 FF 
05aac     B9 14 06 F6 | 	mov	arg02, ##@LR__5732
05ab0     13 13 02 F6 | 	mov	arg01, local01
05ab4     0C 16 B2 FD | 	call	#__system___string_cmp
05ab8     00 FA 0D F2 | 	cmp	result1, #0 wz
05abc     84 04 90 AD |  if_e	jmp	#LR__0452
05ac0     B8 01 00 FF 
05ac4     C1 14 06 F6 | 	mov	arg02, ##@LR__5733
05ac8     13 13 02 F6 | 	mov	arg01, local01
05acc     F4 15 B2 FD | 	call	#__system___string_cmp
05ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ad4     74 04 90 AD |  if_e	jmp	#LR__0453
05ad8     B8 01 00 FF 
05adc     C5 14 06 F6 | 	mov	arg02, ##@LR__5734
05ae0     13 13 02 F6 | 	mov	arg01, local01
05ae4     DC 15 B2 FD | 	call	#__system___string_cmp
05ae8     00 FA 0D F2 | 	cmp	result1, #0 wz
05aec     64 04 90 AD |  if_e	jmp	#LR__0454
05af0     B8 01 00 FF 
05af4     CB 14 06 F6 | 	mov	arg02, ##@LR__5735
05af8     13 13 02 F6 | 	mov	arg01, local01
05afc     C4 15 B2 FD | 	call	#__system___string_cmp
05b00     00 FA 0D F2 | 	cmp	result1, #0 wz
05b04     54 04 90 AD |  if_e	jmp	#LR__0455
05b08     B8 01 00 FF 
05b0c     D1 14 06 F6 | 	mov	arg02, ##@LR__5736
05b10     13 13 02 F6 | 	mov	arg01, local01
05b14     AC 15 B2 FD | 	call	#__system___string_cmp
05b18     00 FA 0D F2 | 	cmp	result1, #0 wz
05b1c     44 04 90 AD |  if_e	jmp	#LR__0456
05b20     48 04 90 FD | 	jmp	#LR__0457
05b24                 | LR__0320
05b24     5C FA 05 F6 | 	mov	result1, #92
05b28     44 04 90 FD | 	jmp	#LR__0458
05b2c                 | LR__0321
05b2c     5C FA 05 F6 | 	mov	result1, #92
05b30     3C 04 90 FD | 	jmp	#LR__0458
05b34                 | LR__0322
05b34     B9 FA 05 F6 | 	mov	result1, #185
05b38     34 04 90 FD | 	jmp	#LR__0458
05b3c                 | LR__0323
05b3c     47 FA 05 F6 | 	mov	result1, #71
05b40     2C 04 90 FD | 	jmp	#LR__0458
05b44                 | LR__0324
05b44     59 FA 05 F6 | 	mov	result1, #89
05b48     24 04 90 FD | 	jmp	#LR__0458
05b4c                 | LR__0325
05b4c     59 FA 05 F6 | 	mov	result1, #89
05b50     1C 04 90 FD | 	jmp	#LR__0458
05b54                 | LR__0326
05b54     C3 FA 05 F6 | 	mov	result1, #195
05b58     14 04 90 FD | 	jmp	#LR__0458
05b5c                 | LR__0327
05b5c     AE FA 05 F6 | 	mov	result1, #174
05b60     0C 04 90 FD | 	jmp	#LR__0458
05b64                 | LR__0328
05b64     AE FA 05 F6 | 	mov	result1, #174
05b68     04 04 90 FD | 	jmp	#LR__0458
05b6c                 | LR__0329
05b6c     B1 FA 05 F6 | 	mov	result1, #177
05b70     FC 03 90 FD | 	jmp	#LR__0458
05b74                 | LR__0330
05b74     B1 FA 05 F6 | 	mov	result1, #177
05b78     F4 03 90 FD | 	jmp	#LR__0458
05b7c                 | LR__0331
05b7c     AF FA 05 F6 | 	mov	result1, #175
05b80     EC 03 90 FD | 	jmp	#LR__0458
05b84                 | LR__0332
05b84     AF FA 05 F6 | 	mov	result1, #175
05b88     E4 03 90 FD | 	jmp	#LR__0458
05b8c                 | LR__0333
05b8c     B0 FA 05 F6 | 	mov	result1, #176
05b90     DC 03 90 FD | 	jmp	#LR__0458
05b94                 | LR__0334
05b94     B0 FA 05 F6 | 	mov	result1, #176
05b98     D4 03 90 FD | 	jmp	#LR__0458
05b9c                 | LR__0335
05b9c     45 FA 05 F6 | 	mov	result1, #69
05ba0     CC 03 90 FD | 	jmp	#LR__0458
05ba4                 | LR__0336
05ba4     45 FA 05 F6 | 	mov	result1, #69
05ba8     C4 03 90 FD | 	jmp	#LR__0458
05bac                 | LR__0337
05bac     69 FA 05 F6 | 	mov	result1, #105
05bb0     BC 03 90 FD | 	jmp	#LR__0458
05bb4                 | LR__0338
05bb4     B4 FA 05 F6 | 	mov	result1, #180
05bb8     B4 03 90 FD | 	jmp	#LR__0458
05bbc                 | LR__0339
05bbc     40 FA 05 F6 | 	mov	result1, #64
05bc0     AC 03 90 FD | 	jmp	#LR__0458
05bc4                 | LR__0340
05bc4     CF FA 05 F6 | 	mov	result1, #207
05bc8     A4 03 90 FD | 	jmp	#LR__0458
05bcc                 | LR__0341
05bcc     49 FA 05 F6 | 	mov	result1, #73
05bd0     9C 03 90 FD | 	jmp	#LR__0458
05bd4                 | LR__0342
05bd4     49 FA 05 F6 | 	mov	result1, #73
05bd8     94 03 90 FD | 	jmp	#LR__0458
05bdc                 | LR__0343
05bdc     C4 FA 05 F6 | 	mov	result1, #196
05be0     8C 03 90 FD | 	jmp	#LR__0458
05be4                 | LR__0344
05be4     68 FA 05 F6 | 	mov	result1, #104
05be8     84 03 90 FD | 	jmp	#LR__0458
05bec                 | LR__0345
05bec     B7 FA 05 F6 | 	mov	result1, #183
05bf0     7C 03 90 FD | 	jmp	#LR__0458
05bf4                 | LR__0346
05bf4     73 FA 05 F6 | 	mov	result1, #115
05bf8     74 03 90 FD | 	jmp	#LR__0458
05bfc                 | LR__0347
05bfc     74 FA 05 F6 | 	mov	result1, #116
05c00     6C 03 90 FD | 	jmp	#LR__0458
05c04                 | LR__0348
05c04     6C FA 05 F6 | 	mov	result1, #108
05c08     64 03 90 FD | 	jmp	#LR__0458
05c0c                 | LR__0349
05c0c     6C FA 05 F6 | 	mov	result1, #108
05c10     5C 03 90 FD | 	jmp	#LR__0458
05c14                 | LR__0350
05c14     89 FA 05 F6 | 	mov	result1, #137
05c18     54 03 90 FD | 	jmp	#LR__0458
05c1c                 | LR__0351
05c1c     C2 FA 05 F6 | 	mov	result1, #194
05c20     4C 03 90 FD | 	jmp	#LR__0458
05c24                 | LR__0352
05c24     72 FA 05 F6 | 	mov	result1, #114
05c28     44 03 90 FD | 	jmp	#LR__0458
05c2c                 | LR__0353
05c2c     5D FA 05 F6 | 	mov	result1, #93
05c30     3C 03 90 FD | 	jmp	#LR__0458
05c34                 | LR__0354
05c34     96 FA 05 F6 | 	mov	result1, #150
05c38     34 03 90 FD | 	jmp	#LR__0458
05c3c                 | LR__0355
05c3c     43 FA 05 F6 | 	mov	result1, #67
05c40     2C 03 90 FD | 	jmp	#LR__0458
05c44                 | LR__0356
05c44     43 FA 05 F6 | 	mov	result1, #67
05c48     24 03 90 FD | 	jmp	#LR__0458
05c4c                 | LR__0357
05c4c     43 FA 05 F6 | 	mov	result1, #67
05c50     1C 03 90 FD | 	jmp	#LR__0458
05c54                 | LR__0358
05c54     5A FA 05 F6 | 	mov	result1, #90
05c58     14 03 90 FD | 	jmp	#LR__0458
05c5c                 | LR__0359
05c5c     AB FA 05 F6 | 	mov	result1, #171
05c60     0C 03 90 FD | 	jmp	#LR__0458
05c64                 | LR__0360
05c64     BD FA 05 F6 | 	mov	result1, #189
05c68     04 03 90 FD | 	jmp	#LR__0458
05c6c                 | LR__0361
05c6c     BD FA 05 F6 | 	mov	result1, #189
05c70     FC 02 90 FD | 	jmp	#LR__0458
05c74                 | LR__0362
05c74     46 FA 05 F6 | 	mov	result1, #70
05c78     F4 02 90 FD | 	jmp	#LR__0458
05c7c                 | LR__0363
05c7c     46 FA 05 F6 | 	mov	result1, #70
05c80     EC 02 90 FD | 	jmp	#LR__0458
05c84                 | LR__0364
05c84     71 FA 05 F6 | 	mov	result1, #113
05c88     E4 02 90 FD | 	jmp	#LR__0458
05c8c                 | LR__0365
05c8c     71 FA 05 F6 | 	mov	result1, #113
05c90     DC 02 90 FD | 	jmp	#LR__0458
05c94                 | LR__0366
05c94     60 FA 05 F6 | 	mov	result1, #96
05c98     D4 02 90 FD | 	jmp	#LR__0458
05c9c                 | LR__0367
05c9c     4A FA 05 F6 | 	mov	result1, #74
05ca0     CC 02 90 FD | 	jmp	#LR__0458
05ca4                 | LR__0368
05ca4     4A FA 05 F6 | 	mov	result1, #74
05ca8     C4 02 90 FD | 	jmp	#LR__0458
05cac                 | LR__0369
05cac     48 FA 05 F6 | 	mov	result1, #72
05cb0     BC 02 90 FD | 	jmp	#LR__0458
05cb4                 | LR__0370
05cb4     48 FA 05 F6 | 	mov	result1, #72
05cb8     B4 02 90 FD | 	jmp	#LR__0458
05cbc                 | LR__0371
05cbc     BB FA 05 F6 | 	mov	result1, #187
05cc0     AC 02 90 FD | 	jmp	#LR__0458
05cc4                 | LR__0372
05cc4     A9 FA 05 F6 | 	mov	result1, #169
05cc8     A4 02 90 FD | 	jmp	#LR__0458
05ccc                 | LR__0373
05ccc     4E FA 05 F6 | 	mov	result1, #78
05cd0     9C 02 90 FD | 	jmp	#LR__0458
05cd4                 | LR__0374
05cd4     4E FA 05 F6 | 	mov	result1, #78
05cd8     94 02 90 FD | 	jmp	#LR__0458
05cdc                 | LR__0375
05cdc     58 FA 05 F6 | 	mov	result1, #88
05ce0     8C 02 90 FD | 	jmp	#LR__0458
05ce4                 | LR__0376
05ce4     5F FA 05 F6 | 	mov	result1, #95
05ce8     84 02 90 FD | 	jmp	#LR__0458
05cec                 | LR__0377
05cec     5F FA 05 F6 | 	mov	result1, #95
05cf0     7C 02 90 FD | 	jmp	#LR__0458
05cf4                 | LR__0378
05cf4     B5 FA 05 F6 | 	mov	result1, #181
05cf8     74 02 90 FD | 	jmp	#LR__0458
05cfc                 | LR__0379
05cfc     4C FA 05 F6 | 	mov	result1, #76
05d00     6C 02 90 FD | 	jmp	#LR__0458
05d04                 | LR__0380
05d04     4C FA 05 F6 | 	mov	result1, #76
05d08     64 02 90 FD | 	jmp	#LR__0458
05d0c                 | LR__0381
05d0c     52 FA 05 F6 | 	mov	result1, #82
05d10     5C 02 90 FD | 	jmp	#LR__0458
05d14                 | LR__0382
05d14     52 FA 05 F6 | 	mov	result1, #82
05d18     54 02 90 FD | 	jmp	#LR__0458
05d1c                 | LR__0383
05d1c     97 FA 05 F6 | 	mov	result1, #151
05d20     4C 02 90 FD | 	jmp	#LR__0458
05d24                 | LR__0384
05d24     C6 FA 05 F6 | 	mov	result1, #198
05d28     44 02 90 FD | 	jmp	#LR__0458
05d2c                 | LR__0385
05d2c     61 FA 05 F6 | 	mov	result1, #97
05d30     3C 02 90 FD | 	jmp	#LR__0458
05d34                 | LR__0386
05d34     61 FA 05 F6 | 	mov	result1, #97
05d38     34 02 90 FD | 	jmp	#LR__0458
05d3c                 | LR__0387
05d3c     63 FA 05 F6 | 	mov	result1, #99
05d40     2C 02 90 FD | 	jmp	#LR__0458
05d44                 | LR__0388
05d44     41 FA 05 F6 | 	mov	result1, #65
05d48     24 02 90 FD | 	jmp	#LR__0458
05d4c                 | LR__0389
05d4c     4B FA 05 F6 | 	mov	result1, #75
05d50     1C 02 90 FD | 	jmp	#LR__0458
05d54                 | LR__0390
05d54     4B FA 05 F6 | 	mov	result1, #75
05d58     14 02 90 FD | 	jmp	#LR__0458
05d5c                 | LR__0391
05d5c     C1 FA 05 F6 | 	mov	result1, #193
05d60     0C 02 90 FD | 	jmp	#LR__0458
05d64                 | LR__0392
05d64     B3 FA 05 F6 | 	mov	result1, #179
05d68     04 02 90 FD | 	jmp	#LR__0458
05d6c                 | LR__0393
05d6c     5E FA 05 F6 | 	mov	result1, #94
05d70     FC 01 90 FD | 	jmp	#LR__0458
05d74                 | LR__0394
05d74     5E FA 05 F6 | 	mov	result1, #94
05d78     F4 01 90 FD | 	jmp	#LR__0458
05d7c                 | LR__0395
05d7c     7C FA 05 F6 | 	mov	result1, #124
05d80     EC 01 90 FD | 	jmp	#LR__0458
05d84                 | LR__0396
05d84     7E FA 05 F6 | 	mov	result1, #126
05d88     E4 01 90 FD | 	jmp	#LR__0458
05d8c                 | LR__0397
05d8c     7D FA 05 F6 | 	mov	result1, #125
05d90     DC 01 90 FD | 	jmp	#LR__0458
05d94                 | LR__0398
05d94     7F FA 05 F6 | 	mov	result1, #127
05d98     D4 01 90 FD | 	jmp	#LR__0458
05d9c                 | LR__0399
05d9c     80 FA 05 F6 | 	mov	result1, #128
05da0     CC 01 90 FD | 	jmp	#LR__0458
05da4                 | LR__0400
05da4     55 FA 05 F6 | 	mov	result1, #85
05da8     C4 01 90 FD | 	jmp	#LR__0458
05dac                 | LR__0401
05dac     75 FA 05 F6 | 	mov	result1, #117
05db0     BC 01 90 FD | 	jmp	#LR__0458
05db4                 | LR__0402
05db4     75 FA 05 F6 | 	mov	result1, #117
05db8     B4 01 90 FD | 	jmp	#LR__0458
05dbc                 | LR__0403
05dbc     42 FA 05 F6 | 	mov	result1, #66
05dc0     AC 01 90 FD | 	jmp	#LR__0458
05dc4                 | LR__0404
05dc4     42 FA 05 F6 | 	mov	result1, #66
05dc8     A4 01 90 FD | 	jmp	#LR__0458
05dcc                 | LR__0405
05dcc     95 FA 05 F6 | 	mov	result1, #149
05dd0     9C 01 90 FD | 	jmp	#LR__0458
05dd4                 | LR__0406
05dd4     AC FA 05 F6 | 	mov	result1, #172
05dd8     94 01 90 FD | 	jmp	#LR__0458
05ddc                 | LR__0407
05ddc     81 FA 05 F6 | 	mov	result1, #129
05de0     8C 01 90 FD | 	jmp	#LR__0458
05de4                 | LR__0408
05de4     81 FA 05 F6 | 	mov	result1, #129
05de8     84 01 90 FD | 	jmp	#LR__0458
05dec                 | LR__0409
05dec     44 FA 05 F6 | 	mov	result1, #68
05df0     7C 01 90 FD | 	jmp	#LR__0458
05df4                 | LR__0410
05df4     44 FA 05 F6 | 	mov	result1, #68
05df8     74 01 90 FD | 	jmp	#LR__0458
05dfc                 | LR__0411
05dfc     BC FA 05 F6 | 	mov	result1, #188
05e00     6C 01 90 FD | 	jmp	#LR__0458
05e04                 | LR__0412
05e04     88 FA 05 F6 | 	mov	result1, #136
05e08     64 01 90 FD | 	jmp	#LR__0458
05e0c                 | LR__0413
05e0c     B6 FA 05 F6 | 	mov	result1, #182
05e10     5C 01 90 FD | 	jmp	#LR__0458
05e14                 | LR__0414
05e14     92 FA 05 F6 | 	mov	result1, #146
05e18     54 01 90 FD | 	jmp	#LR__0458
05e1c                 | LR__0415
05e1c     BE FA 05 F6 | 	mov	result1, #190
05e20     4C 01 90 FD | 	jmp	#LR__0458
05e24                 | LR__0416
05e24     BE FA 05 F6 | 	mov	result1, #190
05e28     44 01 90 FD | 	jmp	#LR__0458
05e2c                 | LR__0417
05e2c     C7 FA 05 F6 | 	mov	result1, #199
05e30     3C 01 90 FD | 	jmp	#LR__0458
05e34                 | LR__0418
05e34     D4 FA 05 F6 | 	mov	result1, #212
05e38     34 01 90 FD | 	jmp	#LR__0458
05e3c                 | LR__0419
05e3c     D4 FA 05 F6 | 	mov	result1, #212
05e40     2C 01 90 FD | 	jmp	#LR__0458
05e44                 | LR__0420
05e44     AA FA 05 F6 | 	mov	result1, #170
05e48     24 01 90 FD | 	jmp	#LR__0458
05e4c                 | LR__0421
05e4c     4D FA 05 F6 | 	mov	result1, #77
05e50     1C 01 90 FD | 	jmp	#LR__0458
05e54                 | LR__0422
05e54     51 FA 05 F6 | 	mov	result1, #81
05e58     14 01 90 FD | 	jmp	#LR__0458
05e5c                 | LR__0423
05e5c     51 FA 05 F6 | 	mov	result1, #81
05e60     0C 01 90 FD | 	jmp	#LR__0458
05e64                 | LR__0424
05e64     D2 FA 05 F6 | 	mov	result1, #210
05e68     04 01 90 FD | 	jmp	#LR__0458
05e6c                 | LR__0425
05e6c     D2 FA 05 F6 | 	mov	result1, #210
05e70     FC 00 90 FD | 	jmp	#LR__0458
05e74                 | LR__0426
05e74     8E FA 05 F6 | 	mov	result1, #142
05e78     F4 00 90 FD | 	jmp	#LR__0458
05e7c                 | LR__0427
05e7c     8E FA 05 F6 | 	mov	result1, #142
05e80     EC 00 90 FD | 	jmp	#LR__0458
05e84                 | LR__0428
05e84     90 FA 05 F6 | 	mov	result1, #144
05e88     E4 00 90 FD | 	jmp	#LR__0458
05e8c                 | LR__0429
05e8c     90 FA 05 F6 | 	mov	result1, #144
05e90     DC 00 90 FD | 	jmp	#LR__0458
05e94                 | LR__0430
05e94     8D FA 05 F6 | 	mov	result1, #141
05e98     D4 00 90 FD | 	jmp	#LR__0458
05e9c                 | LR__0431
05e9c     8D FA 05 F6 | 	mov	result1, #141
05ea0     CC 00 90 FD | 	jmp	#LR__0458
05ea4                 | LR__0432
05ea4     8C FA 05 F6 | 	mov	result1, #140
05ea8     C4 00 90 FD | 	jmp	#LR__0458
05eac                 | LR__0433
05eac     8C FA 05 F6 | 	mov	result1, #140
05eb0     BC 00 90 FD | 	jmp	#LR__0458
05eb4                 | LR__0434
05eb4     91 FA 05 F6 | 	mov	result1, #145
05eb8     B4 00 90 FD | 	jmp	#LR__0458
05ebc                 | LR__0435
05ebc     91 FA 05 F6 | 	mov	result1, #145
05ec0     AC 00 90 FD | 	jmp	#LR__0458
05ec4                 | LR__0436
05ec4     8B FA 05 F6 | 	mov	result1, #139
05ec8     A4 00 90 FD | 	jmp	#LR__0458
05ecc                 | LR__0437
05ecc     8B FA 05 F6 | 	mov	result1, #139
05ed0     9C 00 90 FD | 	jmp	#LR__0458
05ed4                 | LR__0438
05ed4     8F FA 05 F6 | 	mov	result1, #143
05ed8     94 00 90 FD | 	jmp	#LR__0458
05edc                 | LR__0439
05edc     8F FA 05 F6 | 	mov	result1, #143
05ee0     8C 00 90 FD | 	jmp	#LR__0458
05ee4                 | LR__0440
05ee4     8F FA 05 F6 | 	mov	result1, #143
05ee8     84 00 90 FD | 	jmp	#LR__0458
05eec                 | LR__0441
05eec     B2 FA 05 F6 | 	mov	result1, #178
05ef0     7C 00 90 FD | 	jmp	#LR__0458
05ef4                 | LR__0442
05ef4     B2 FA 05 F6 | 	mov	result1, #178
05ef8     74 00 90 FD | 	jmp	#LR__0458
05efc                 | LR__0443
05efc     75 FA 05 F6 | 	mov	result1, #117
05f00     6C 00 90 FD | 	jmp	#LR__0458
05f04                 | LR__0444
05f04     75 FA 05 F6 | 	mov	result1, #117
05f08     64 00 90 FD | 	jmp	#LR__0458
05f0c                 | LR__0445
05f0c     6D FA 05 F6 | 	mov	result1, #109
05f10     5C 00 90 FD | 	jmp	#LR__0458
05f14                 | LR__0446
05f14     6D FA 05 F6 | 	mov	result1, #109
05f18     54 00 90 FD | 	jmp	#LR__0458
05f1c                 | LR__0447
05f1c     5B FA 05 F6 | 	mov	result1, #91
05f20     4C 00 90 FD | 	jmp	#LR__0458
05f24                 | LR__0448
05f24     56 FA 05 F6 | 	mov	result1, #86
05f28     44 00 90 FD | 	jmp	#LR__0458
05f2c                 | LR__0449
05f2c     56 FA 05 F6 | 	mov	result1, #86
05f30     3C 00 90 FD | 	jmp	#LR__0458
05f34                 | LR__0450
05f34     70 FA 05 F6 | 	mov	result1, #112
05f38     34 00 90 FD | 	jmp	#LR__0458
05f3c                 | LR__0451
05f3c     70 FA 05 F6 | 	mov	result1, #112
05f40     2C 00 90 FD | 	jmp	#LR__0458
05f44                 | LR__0452
05f44     57 FA 05 F6 | 	mov	result1, #87
05f48     24 00 90 FD | 	jmp	#LR__0458
05f4c                 | LR__0453
05f4c     57 FA 05 F6 | 	mov	result1, #87
05f50     1C 00 90 FD | 	jmp	#LR__0458
05f54                 | LR__0454
05f54     79 FA 05 F6 | 	mov	result1, #121
05f58     14 00 90 FD | 	jmp	#LR__0458
05f5c                 | LR__0455
05f5c     77 FA 05 F6 | 	mov	result1, #119
05f60     0C 00 90 FD | 	jmp	#LR__0458
05f64                 | LR__0456
05f64     78 FA 05 F6 | 	mov	result1, #120
05f68     04 00 90 FD | 	jmp	#LR__0458
05f6c                 | LR__0457
05f6c     00 FA 05 F6 | 	mov	result1, #0
05f70                 | LR__0458
05f70     A7 F0 03 F6 | 	mov	ptra, fp
05f74     B2 00 A0 FD | 	call	#popregs_
05f78                 | _iscommand_ret
05f78     2D 00 64 FD | 	ret
05f7c                 | 
05f7c                 | ' 
05f7c                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05f7c                 | ' 
05f7c                 | ' function isfunction(s as string) as ubyte
05f7c                 | _isfunction
05f7c     01 4A 05 F6 | 	mov	COUNT_, #1
05f80     A8 00 A0 FD | 	call	#pushregs_
05f84                 | ' 
05f84                 | ' select case s
05f84     09 27 02 F6 | 	mov	local01, arg01
05f88     B8 01 00 FF 
05f8c     D7 14 06 F6 | 	mov	arg02, ##@LR__5737
05f90     13 13 02 F6 | 	mov	arg01, local01
05f94     2C 11 B2 FD | 	call	#__system___string_cmp
05f98     00 FA 0D F2 | 	cmp	result1, #0 wz
05f9c     74 05 90 AD |  if_e	jmp	#LR__0460
05fa0     B8 01 00 FF 
05fa4     DB 14 06 F6 | 	mov	arg02, ##@LR__5738
05fa8     13 13 02 F6 | 	mov	arg01, local01
05fac     14 11 B2 FD | 	call	#__system___string_cmp
05fb0     00 FA 0D F2 | 	cmp	result1, #0 wz
05fb4     64 05 90 AD |  if_e	jmp	#LR__0461
05fb8     B8 01 00 FF 
05fbc     E0 14 06 F6 | 	mov	arg02, ##@LR__5739
05fc0     13 13 02 F6 | 	mov	arg01, local01
05fc4     FC 10 B2 FD | 	call	#__system___string_cmp
05fc8     00 FA 0D F2 | 	cmp	result1, #0 wz
05fcc     54 05 90 AD |  if_e	jmp	#LR__0462
05fd0     B8 01 00 FF 
05fd4     E4 14 06 F6 | 	mov	arg02, ##@LR__5740
05fd8     13 13 02 F6 | 	mov	arg01, local01
05fdc     E4 10 B2 FD | 	call	#__system___string_cmp
05fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
05fe4     44 05 90 AD |  if_e	jmp	#LR__0463
05fe8     B8 01 00 FF 
05fec     E9 14 06 F6 | 	mov	arg02, ##@LR__5741
05ff0     13 13 02 F6 | 	mov	arg01, local01
05ff4     CC 10 B2 FD | 	call	#__system___string_cmp
05ff8     00 FA 0D F2 | 	cmp	result1, #0 wz
05ffc     34 05 90 AD |  if_e	jmp	#LR__0464
06000     B8 01 00 FF 
06004     ED 14 06 F6 | 	mov	arg02, ##@LR__5742
06008     13 13 02 F6 | 	mov	arg01, local01
0600c     B4 10 B2 FD | 	call	#__system___string_cmp
06010     00 FA 0D F2 | 	cmp	result1, #0 wz
06014     24 05 90 AD |  if_e	jmp	#LR__0465
06018     B8 01 00 FF 
0601c     F2 14 06 F6 | 	mov	arg02, ##@LR__5743
06020     13 13 02 F6 | 	mov	arg01, local01
06024     9C 10 B2 FD | 	call	#__system___string_cmp
06028     00 FA 0D F2 | 	cmp	result1, #0 wz
0602c     14 05 90 AD |  if_e	jmp	#LR__0466
06030     B8 01 00 FF 
06034     F6 14 06 F6 | 	mov	arg02, ##@LR__5744
06038     13 13 02 F6 | 	mov	arg01, local01
0603c     84 10 B2 FD | 	call	#__system___string_cmp
06040     00 FA 0D F2 | 	cmp	result1, #0 wz
06044     04 05 90 AD |  if_e	jmp	#LR__0467
06048     B8 01 00 FF 
0604c     FB 14 06 F6 | 	mov	arg02, ##@LR__5745
06050     13 13 02 F6 | 	mov	arg01, local01
06054     6C 10 B2 FD | 	call	#__system___string_cmp
06058     00 FA 0D F2 | 	cmp	result1, #0 wz
0605c     F4 04 90 AD |  if_e	jmp	#LR__0468
06060     B8 01 00 FF 
06064     00 15 06 F6 | 	mov	arg02, ##@LR__5746
06068     13 13 02 F6 | 	mov	arg01, local01
0606c     54 10 B2 FD | 	call	#__system___string_cmp
06070     00 FA 0D F2 | 	cmp	result1, #0 wz
06074     E4 04 90 AD |  if_e	jmp	#LR__0469
06078     B8 01 00 FF 
0607c     08 15 06 F6 | 	mov	arg02, ##@LR__5747
06080     13 13 02 F6 | 	mov	arg01, local01
06084     3C 10 B2 FD | 	call	#__system___string_cmp
06088     00 FA 0D F2 | 	cmp	result1, #0 wz
0608c     D4 04 90 AD |  if_e	jmp	#LR__0470
06090     B8 01 00 FF 
06094     0C 15 06 F6 | 	mov	arg02, ##@LR__5748
06098     13 13 02 F6 | 	mov	arg01, local01
0609c     24 10 B2 FD | 	call	#__system___string_cmp
060a0     00 FA 0D F2 | 	cmp	result1, #0 wz
060a4     C4 04 90 AD |  if_e	jmp	#LR__0471
060a8     B8 01 00 FF 
060ac     12 15 06 F6 | 	mov	arg02, ##@LR__5749
060b0     13 13 02 F6 | 	mov	arg01, local01
060b4     0C 10 B2 FD | 	call	#__system___string_cmp
060b8     00 FA 0D F2 | 	cmp	result1, #0 wz
060bc     B4 04 90 AD |  if_e	jmp	#LR__0472
060c0     B8 01 00 FF 
060c4     1B 15 06 F6 | 	mov	arg02, ##@LR__5750
060c8     13 13 02 F6 | 	mov	arg01, local01
060cc     F4 0F B2 FD | 	call	#__system___string_cmp
060d0     00 FA 0D F2 | 	cmp	result1, #0 wz
060d4     A4 04 90 AD |  if_e	jmp	#LR__0473
060d8     B8 01 00 FF 
060dc     1F 15 06 F6 | 	mov	arg02, ##@LR__5751
060e0     13 13 02 F6 | 	mov	arg01, local01
060e4     DC 0F B2 FD | 	call	#__system___string_cmp
060e8     00 FA 0D F2 | 	cmp	result1, #0 wz
060ec     94 04 90 AD |  if_e	jmp	#LR__0474
060f0     B8 01 00 FF 
060f4     23 15 06 F6 | 	mov	arg02, ##@LR__5752
060f8     13 13 02 F6 | 	mov	arg01, local01
060fc     C4 0F B2 FD | 	call	#__system___string_cmp
06100     00 FA 0D F2 | 	cmp	result1, #0 wz
06104     84 04 90 AD |  if_e	jmp	#LR__0475
06108     B8 01 00 FF 
0610c     27 15 06 F6 | 	mov	arg02, ##@LR__5753
06110     13 13 02 F6 | 	mov	arg01, local01
06114     AC 0F B2 FD | 	call	#__system___string_cmp
06118     00 FA 0D F2 | 	cmp	result1, #0 wz
0611c     74 04 90 AD |  if_e	jmp	#LR__0476
06120     B8 01 00 FF 
06124     30 15 06 F6 | 	mov	arg02, ##@LR__5754
06128     13 13 02 F6 | 	mov	arg01, local01
0612c     94 0F B2 FD | 	call	#__system___string_cmp
06130     00 FA 0D F2 | 	cmp	result1, #0 wz
06134     64 04 90 AD |  if_e	jmp	#LR__0477
06138     B8 01 00 FF 
0613c     39 15 06 F6 | 	mov	arg02, ##@LR__5755
06140     13 13 02 F6 | 	mov	arg01, local01
06144     7C 0F B2 FD | 	call	#__system___string_cmp
06148     00 FA 0D F2 | 	cmp	result1, #0 wz
0614c     54 04 90 AD |  if_e	jmp	#LR__0478
06150     B8 01 00 FF 
06154     3D 15 06 F6 | 	mov	arg02, ##@LR__5756
06158     13 13 02 F6 | 	mov	arg01, local01
0615c     64 0F B2 FD | 	call	#__system___string_cmp
06160     00 FA 0D F2 | 	cmp	result1, #0 wz
06164     44 04 90 AD |  if_e	jmp	#LR__0479
06168     B8 01 00 FF 
0616c     4B 15 06 F6 | 	mov	arg02, ##@LR__5757
06170     13 13 02 F6 | 	mov	arg01, local01
06174     4C 0F B2 FD | 	call	#__system___string_cmp
06178     00 FA 0D F2 | 	cmp	result1, #0 wz
0617c     34 04 90 AD |  if_e	jmp	#LR__0480
06180     B8 01 00 FF 
06184     58 15 06 F6 | 	mov	arg02, ##@LR__5758
06188     13 13 02 F6 | 	mov	arg01, local01
0618c     34 0F B2 FD | 	call	#__system___string_cmp
06190     00 FA 0D F2 | 	cmp	result1, #0 wz
06194     24 04 90 AD |  if_e	jmp	#LR__0481
06198     B8 01 00 FF 
0619c     60 15 06 F6 | 	mov	arg02, ##@LR__5759
061a0     13 13 02 F6 | 	mov	arg01, local01
061a4     1C 0F B2 FD | 	call	#__system___string_cmp
061a8     00 FA 0D F2 | 	cmp	result1, #0 wz
061ac     14 04 90 AD |  if_e	jmp	#LR__0482
061b0     B8 01 00 FF 
061b4     64 15 06 F6 | 	mov	arg02, ##@LR__5760
061b8     13 13 02 F6 | 	mov	arg01, local01
061bc     04 0F B2 FD | 	call	#__system___string_cmp
061c0     00 FA 0D F2 | 	cmp	result1, #0 wz
061c4     04 04 90 AD |  if_e	jmp	#LR__0483
061c8     B8 01 00 FF 
061cc     69 15 06 F6 | 	mov	arg02, ##@LR__5761
061d0     13 13 02 F6 | 	mov	arg01, local01
061d4     EC 0E B2 FD | 	call	#__system___string_cmp
061d8     00 FA 0D F2 | 	cmp	result1, #0 wz
061dc     F4 03 90 AD |  if_e	jmp	#LR__0484
061e0     B8 01 00 FF 
061e4     70 15 06 F6 | 	mov	arg02, ##@LR__5762
061e8     13 13 02 F6 | 	mov	arg01, local01
061ec     D4 0E B2 FD | 	call	#__system___string_cmp
061f0     00 FA 0D F2 | 	cmp	result1, #0 wz
061f4     E4 03 90 AD |  if_e	jmp	#LR__0485
061f8     B8 01 00 FF 
061fc     74 15 06 F6 | 	mov	arg02, ##@LR__5763
06200     13 13 02 F6 | 	mov	arg01, local01
06204     BC 0E B2 FD | 	call	#__system___string_cmp
06208     00 FA 0D F2 | 	cmp	result1, #0 wz
0620c     D4 03 90 AD |  if_e	jmp	#LR__0486
06210     B8 01 00 FF 
06214     7A 15 06 F6 | 	mov	arg02, ##@LR__5764
06218     13 13 02 F6 | 	mov	arg01, local01
0621c     A4 0E B2 FD | 	call	#__system___string_cmp
06220     00 FA 0D F2 | 	cmp	result1, #0 wz
06224     C4 03 90 AD |  if_e	jmp	#LR__0487
06228     B8 01 00 FF 
0622c     7E 15 06 F6 | 	mov	arg02, ##@LR__5765
06230     13 13 02 F6 | 	mov	arg01, local01
06234     8C 0E B2 FD | 	call	#__system___string_cmp
06238     00 FA 0D F2 | 	cmp	result1, #0 wz
0623c     B4 03 90 AD |  if_e	jmp	#LR__0488
06240     B8 01 00 FF 
06244     82 15 06 F6 | 	mov	arg02, ##@LR__5766
06248     13 13 02 F6 | 	mov	arg01, local01
0624c     74 0E B2 FD | 	call	#__system___string_cmp
06250     00 FA 0D F2 | 	cmp	result1, #0 wz
06254     A4 03 90 AD |  if_e	jmp	#LR__0489
06258     B8 01 00 FF 
0625c     88 15 06 F6 | 	mov	arg02, ##@LR__5767
06260     13 13 02 F6 | 	mov	arg01, local01
06264     5C 0E B2 FD | 	call	#__system___string_cmp
06268     00 FA 0D F2 | 	cmp	result1, #0 wz
0626c     94 03 90 AD |  if_e	jmp	#LR__0490
06270     B8 01 00 FF 
06274     8F 15 06 F6 | 	mov	arg02, ##@LR__5768
06278     13 13 02 F6 | 	mov	arg01, local01
0627c     44 0E B2 FD | 	call	#__system___string_cmp
06280     00 FA 0D F2 | 	cmp	result1, #0 wz
06284     84 03 90 AD |  if_e	jmp	#LR__0491
06288     B8 01 00 FF 
0628c     95 15 06 F6 | 	mov	arg02, ##@LR__5769
06290     13 13 02 F6 | 	mov	arg01, local01
06294     2C 0E B2 FD | 	call	#__system___string_cmp
06298     00 FA 0D F2 | 	cmp	result1, #0 wz
0629c     74 03 90 AD |  if_e	jmp	#LR__0492
062a0     B8 01 00 FF 
062a4     9A 15 06 F6 | 	mov	arg02, ##@LR__5770
062a8     13 13 02 F6 | 	mov	arg01, local01
062ac     14 0E B2 FD | 	call	#__system___string_cmp
062b0     00 FA 0D F2 | 	cmp	result1, #0 wz
062b4     64 03 90 AD |  if_e	jmp	#LR__0493
062b8     B8 01 00 FF 
062bc     A1 15 06 F6 | 	mov	arg02, ##@LR__5771
062c0     13 13 02 F6 | 	mov	arg01, local01
062c4     FC 0D B2 FD | 	call	#__system___string_cmp
062c8     00 FA 0D F2 | 	cmp	result1, #0 wz
062cc     54 03 90 AD |  if_e	jmp	#LR__0494
062d0     B8 01 00 FF 
062d4     A8 15 06 F6 | 	mov	arg02, ##@LR__5772
062d8     13 13 02 F6 | 	mov	arg01, local01
062dc     E4 0D B2 FD | 	call	#__system___string_cmp
062e0     00 FA 0D F2 | 	cmp	result1, #0 wz
062e4     44 03 90 AD |  if_e	jmp	#LR__0495
062e8     B8 01 00 FF 
062ec     AF 15 06 F6 | 	mov	arg02, ##@LR__5773
062f0     13 13 02 F6 | 	mov	arg01, local01
062f4     CC 0D B2 FD | 	call	#__system___string_cmp
062f8     00 FA 0D F2 | 	cmp	result1, #0 wz
062fc     34 03 90 AD |  if_e	jmp	#LR__0496
06300     B8 01 00 FF 
06304     B6 15 06 F6 | 	mov	arg02, ##@LR__5774
06308     13 13 02 F6 | 	mov	arg01, local01
0630c     B4 0D B2 FD | 	call	#__system___string_cmp
06310     00 FA 0D F2 | 	cmp	result1, #0 wz
06314     24 03 90 AD |  if_e	jmp	#LR__0497
06318     B8 01 00 FF 
0631c     BB 15 06 F6 | 	mov	arg02, ##@LR__5775
06320     13 13 02 F6 | 	mov	arg01, local01
06324     9C 0D B2 FD | 	call	#__system___string_cmp
06328     00 FA 0D F2 | 	cmp	result1, #0 wz
0632c     14 03 90 AD |  if_e	jmp	#LR__0498
06330     B8 01 00 FF 
06334     C0 15 06 F6 | 	mov	arg02, ##@LR__5776
06338     13 13 02 F6 | 	mov	arg01, local01
0633c     84 0D B2 FD | 	call	#__system___string_cmp
06340     00 FA 0D F2 | 	cmp	result1, #0 wz
06344     04 03 90 AD |  if_e	jmp	#LR__0499
06348     B8 01 00 FF 
0634c     C5 15 06 F6 | 	mov	arg02, ##@LR__5777
06350     13 13 02 F6 | 	mov	arg01, local01
06354     6C 0D B2 FD | 	call	#__system___string_cmp
06358     00 FA 0D F2 | 	cmp	result1, #0 wz
0635c     F4 02 90 AD |  if_e	jmp	#LR__0500
06360     B8 01 00 FF 
06364     CB 15 06 F6 | 	mov	arg02, ##@LR__5778
06368     13 13 02 F6 | 	mov	arg01, local01
0636c     54 0D B2 FD | 	call	#__system___string_cmp
06370     00 FA 0D F2 | 	cmp	result1, #0 wz
06374     E4 02 90 AD |  if_e	jmp	#LR__0501
06378     B8 01 00 FF 
0637c     D1 15 06 F6 | 	mov	arg02, ##@LR__5779
06380     13 13 02 F6 | 	mov	arg01, local01
06384     3C 0D B2 FD | 	call	#__system___string_cmp
06388     00 FA 0D F2 | 	cmp	result1, #0 wz
0638c     D4 02 90 AD |  if_e	jmp	#LR__0502
06390     B8 01 00 FF 
06394     D7 15 06 F6 | 	mov	arg02, ##@LR__5780
06398     13 13 02 F6 | 	mov	arg01, local01
0639c     24 0D B2 FD | 	call	#__system___string_cmp
063a0     00 FA 0D F2 | 	cmp	result1, #0 wz
063a4     C4 02 90 AD |  if_e	jmp	#LR__0503
063a8     B8 01 00 FF 
063ac     DC 15 06 F6 | 	mov	arg02, ##@LR__5781
063b0     13 13 02 F6 | 	mov	arg01, local01
063b4     0C 0D B2 FD | 	call	#__system___string_cmp
063b8     00 FA 0D F2 | 	cmp	result1, #0 wz
063bc     B4 02 90 AD |  if_e	jmp	#LR__0504
063c0     B8 01 00 FF 
063c4     E1 15 06 F6 | 	mov	arg02, ##@LR__5782
063c8     13 13 02 F6 | 	mov	arg01, local01
063cc     F4 0C B2 FD | 	call	#__system___string_cmp
063d0     00 FA 0D F2 | 	cmp	result1, #0 wz
063d4     A4 02 90 AD |  if_e	jmp	#LR__0505
063d8     B8 01 00 FF 
063dc     E9 15 06 F6 | 	mov	arg02, ##@LR__5783
063e0     13 13 02 F6 | 	mov	arg01, local01
063e4     DC 0C B2 FD | 	call	#__system___string_cmp
063e8     00 FA 0D F2 | 	cmp	result1, #0 wz
063ec     94 02 90 AD |  if_e	jmp	#LR__0506
063f0     B8 01 00 FF 
063f4     EF 15 06 F6 | 	mov	arg02, ##@LR__5784
063f8     13 13 02 F6 | 	mov	arg01, local01
063fc     C4 0C B2 FD | 	call	#__system___string_cmp
06400     00 FA 0D F2 | 	cmp	result1, #0 wz
06404     84 02 90 AD |  if_e	jmp	#LR__0507
06408     B8 01 00 FF 
0640c     F6 15 06 F6 | 	mov	arg02, ##@LR__5785
06410     13 13 02 F6 | 	mov	arg01, local01
06414     AC 0C B2 FD | 	call	#__system___string_cmp
06418     00 FA 0D F2 | 	cmp	result1, #0 wz
0641c     74 02 90 AD |  if_e	jmp	#LR__0508
06420     B8 01 00 FF 
06424     FC 15 06 F6 | 	mov	arg02, ##@LR__5786
06428     13 13 02 F6 | 	mov	arg01, local01
0642c     94 0C B2 FD | 	call	#__system___string_cmp
06430     00 FA 0D F2 | 	cmp	result1, #0 wz
06434     64 02 90 AD |  if_e	jmp	#LR__0509
06438     B9 01 00 FF 
0643c     02 14 06 F6 | 	mov	arg02, ##@LR__5787
06440     13 13 02 F6 | 	mov	arg01, local01
06444     7C 0C B2 FD | 	call	#__system___string_cmp
06448     00 FA 0D F2 | 	cmp	result1, #0 wz
0644c     54 02 90 AD |  if_e	jmp	#LR__0510
06450     B9 01 00 FF 
06454     06 14 06 F6 | 	mov	arg02, ##@LR__5788
06458     13 13 02 F6 | 	mov	arg01, local01
0645c     64 0C B2 FD | 	call	#__system___string_cmp
06460     00 FA 0D F2 | 	cmp	result1, #0 wz
06464     44 02 90 AD |  if_e	jmp	#LR__0511
06468     B9 01 00 FF 
0646c     0A 14 06 F6 | 	mov	arg02, ##@LR__5789
06470     13 13 02 F6 | 	mov	arg01, local01
06474     4C 0C B2 FD | 	call	#__system___string_cmp
06478     00 FA 0D F2 | 	cmp	result1, #0 wz
0647c     34 02 90 AD |  if_e	jmp	#LR__0512
06480     B9 01 00 FF 
06484     0E 14 06 F6 | 	mov	arg02, ##@LR__5790
06488     13 13 02 F6 | 	mov	arg01, local01
0648c     34 0C B2 FD | 	call	#__system___string_cmp
06490     00 FA 0D F2 | 	cmp	result1, #0 wz
06494     24 02 90 AD |  if_e	jmp	#LR__0513
06498     B9 01 00 FF 
0649c     14 14 06 F6 | 	mov	arg02, ##@LR__5791
064a0     13 13 02 F6 | 	mov	arg01, local01
064a4     1C 0C B2 FD | 	call	#__system___string_cmp
064a8     00 FA 0D F2 | 	cmp	result1, #0 wz
064ac     14 02 90 AD |  if_e	jmp	#LR__0514
064b0     B9 01 00 FF 
064b4     1A 14 06 F6 | 	mov	arg02, ##@LR__5792
064b8     13 13 02 F6 | 	mov	arg01, local01
064bc     04 0C B2 FD | 	call	#__system___string_cmp
064c0     00 FA 0D F2 | 	cmp	result1, #0 wz
064c4     04 02 90 AD |  if_e	jmp	#LR__0515
064c8     B9 01 00 FF 
064cc     1F 14 06 F6 | 	mov	arg02, ##@LR__5793
064d0     13 13 02 F6 | 	mov	arg01, local01
064d4     EC 0B B2 FD | 	call	#__system___string_cmp
064d8     00 FA 0D F2 | 	cmp	result1, #0 wz
064dc     F4 01 90 AD |  if_e	jmp	#LR__0516
064e0     B9 01 00 FF 
064e4     23 14 06 F6 | 	mov	arg02, ##@LR__5794
064e8     13 13 02 F6 | 	mov	arg01, local01
064ec     D4 0B B2 FD | 	call	#__system___string_cmp
064f0     00 FA 0D F2 | 	cmp	result1, #0 wz
064f4     E4 01 90 AD |  if_e	jmp	#LR__0517
064f8     B9 01 00 FF 
064fc     27 14 06 F6 | 	mov	arg02, ##@LR__5795
06500     13 13 02 F6 | 	mov	arg01, local01
06504     BC 0B B2 FD | 	call	#__system___string_cmp
06508     00 FA 0D F2 | 	cmp	result1, #0 wz
0650c     D4 01 90 AD |  if_e	jmp	#LR__0518
06510     D8 01 90 FD | 	jmp	#LR__0519
06514                 | LR__0460
06514     9E FA 05 F6 | 	mov	result1, #158
06518     D4 01 90 FD | 	jmp	#LR__0520
0651c                 | LR__0461
0651c     85 FA 05 F6 | 	mov	result1, #133
06520     CC 01 90 FD | 	jmp	#LR__0520
06524                 | LR__0462
06524     9B FA 05 F6 | 	mov	result1, #155
06528     C4 01 90 FD | 	jmp	#LR__0520
0652c                 | LR__0463
0652c     9B FA 05 F6 | 	mov	result1, #155
06530     BC 01 90 FD | 	jmp	#LR__0520
06534                 | LR__0464
06534     A7 FA 05 F6 | 	mov	result1, #167
06538     B4 01 90 FD | 	jmp	#LR__0520
0653c                 | LR__0465
0653c     84 FA 05 F6 | 	mov	result1, #132
06540     AC 01 90 FD | 	jmp	#LR__0520
06544                 | LR__0466
06544     86 FA 05 F6 | 	mov	result1, #134
06548     A4 01 90 FD | 	jmp	#LR__0520
0654c                 | LR__0467
0654c     A2 FA 05 F6 | 	mov	result1, #162
06550     9C 01 90 FD | 	jmp	#LR__0520
06554                 | LR__0468
06554     9F FA 05 F6 | 	mov	result1, #159
06558     94 01 90 FD | 	jmp	#LR__0520
0655c                 | LR__0469
0655c     C0 FA 05 F6 | 	mov	result1, #192
06560     8C 01 90 FD | 	jmp	#LR__0520
06564                 | LR__0470
06564     82 FA 05 F6 | 	mov	result1, #130
06568     84 01 90 FD | 	jmp	#LR__0520
0656c                 | LR__0471
0656c     99 FA 05 F6 | 	mov	result1, #153
06570     7C 01 90 FD | 	jmp	#LR__0520
06574                 | LR__0472
06574     C5 FA 05 F6 | 	mov	result1, #197
06578     74 01 90 FD | 	jmp	#LR__0520
0657c                 | LR__0473
0657c     C5 FA 05 F6 | 	mov	result1, #197
06580     6C 01 90 FD | 	jmp	#LR__0520
06584                 | LR__0474
06584     9C FA 05 F6 | 	mov	result1, #156
06588     64 01 90 FD | 	jmp	#LR__0520
0658c                 | LR__0475
0658c     D3 FA 05 F6 | 	mov	result1, #211
06590     5C 01 90 FD | 	jmp	#LR__0520
06594                 | LR__0476
06594     D3 FA 05 F6 | 	mov	result1, #211
06598     54 01 90 FD | 	jmp	#LR__0520
0659c                 | LR__0477
0659c     6F FA 05 F6 | 	mov	result1, #111
065a0     4C 01 90 FD | 	jmp	#LR__0520
065a4                 | LR__0478
065a4     6F FA 05 F6 | 	mov	result1, #111
065a8     44 01 90 FD | 	jmp	#LR__0520
065ac                 | LR__0479
065ac     93 FA 05 F6 | 	mov	result1, #147
065b0     3C 01 90 FD | 	jmp	#LR__0520
065b4                 | LR__0480
065b4     94 FA 05 F6 | 	mov	result1, #148
065b8     34 01 90 FD | 	jmp	#LR__0520
065bc                 | LR__0481
065bc     62 FA 05 F6 | 	mov	result1, #98
065c0     2C 01 90 FD | 	jmp	#LR__0520
065c4                 | LR__0482
065c4     62 FA 05 F6 | 	mov	result1, #98
065c8     24 01 90 FD | 	jmp	#LR__0520
065cc                 | LR__0483
065cc     A3 FA 05 F6 | 	mov	result1, #163
065d0     1C 01 90 FD | 	jmp	#LR__0520
065d4                 | LR__0484
065d4     9D FA 05 F6 | 	mov	result1, #157
065d8     14 01 90 FD | 	jmp	#LR__0520
065dc                 | LR__0485
065dc     8A FA 05 F6 | 	mov	result1, #138
065e0     0C 01 90 FD | 	jmp	#LR__0520
065e4                 | LR__0486
065e4     A4 FA 05 F6 | 	mov	result1, #164
065e8     04 01 90 FD | 	jmp	#LR__0520
065ec                 | LR__0487
065ec     A8 FA 05 F6 | 	mov	result1, #168
065f0     FC 00 90 FD | 	jmp	#LR__0520
065f4                 | LR__0488
065f4     AD FA 05 F6 | 	mov	result1, #173
065f8     F4 00 90 FD | 	jmp	#LR__0520
065fc                 | LR__0489
065fc     9A FA 05 F6 | 	mov	result1, #154
06600     EC 00 90 FD | 	jmp	#LR__0520
06604                 | LR__0490
06604     D1 FA 05 F6 | 	mov	result1, #209
06608     E4 00 90 FD | 	jmp	#LR__0520
0660c                 | LR__0491
0660c     D0 FA 05 F6 | 	mov	result1, #208
06610     DC 00 90 FD | 	jmp	#LR__0520
06614                 | LR__0492
06614     A6 FA 05 F6 | 	mov	result1, #166
06618     D4 00 90 FD | 	jmp	#LR__0520
0661c                 | LR__0493
0661c     66 FA 05 F6 | 	mov	result1, #102
06620     CC 00 90 FD | 	jmp	#LR__0520
06624                 | LR__0494
06624     67 FA 05 F6 | 	mov	result1, #103
06628     C4 00 90 FD | 	jmp	#LR__0520
0662c                 | LR__0495
0662c     64 FA 05 F6 | 	mov	result1, #100
06630     BC 00 90 FD | 	jmp	#LR__0520
06634                 | LR__0496
06634     65 FA 05 F6 | 	mov	result1, #101
06638     B4 00 90 FD | 	jmp	#LR__0520
0663c                 | LR__0497
0663c     C8 FA 05 F6 | 	mov	result1, #200
06640     AC 00 90 FD | 	jmp	#LR__0520
06644                 | LR__0498
06644     C9 FA 05 F6 | 	mov	result1, #201
06648     A4 00 90 FD | 	jmp	#LR__0520
0664c                 | LR__0499
0664c     CA FA 05 F6 | 	mov	result1, #202
06650     9C 00 90 FD | 	jmp	#LR__0520
06654                 | LR__0500
06654     CC FA 05 F6 | 	mov	result1, #204
06658     94 00 90 FD | 	jmp	#LR__0520
0665c                 | LR__0501
0665c     CD FA 05 F6 | 	mov	result1, #205
06660     8C 00 90 FD | 	jmp	#LR__0520
06664                 | LR__0502
06664     CE FA 05 F6 | 	mov	result1, #206
06668     84 00 90 FD | 	jmp	#LR__0520
0666c                 | LR__0503
0666c     CB FA 05 F6 | 	mov	result1, #203
06670     7C 00 90 FD | 	jmp	#LR__0520
06674                 | LR__0504
06674     98 FA 05 F6 | 	mov	result1, #152
06678     74 00 90 FD | 	jmp	#LR__0520
0667c                 | LR__0505
0667c     7B FA 05 F6 | 	mov	result1, #123
06680     6C 00 90 FD | 	jmp	#LR__0520
06684                 | LR__0506
06684     76 FA 05 F6 | 	mov	result1, #118
06688     64 00 90 FD | 	jmp	#LR__0520
0668c                 | LR__0507
0668c     A5 FA 05 F6 | 	mov	result1, #165
06690     5C 00 90 FD | 	jmp	#LR__0520
06694                 | LR__0508
06694     7A FA 05 F6 | 	mov	result1, #122
06698     54 00 90 FD | 	jmp	#LR__0520
0669c                 | LR__0509
0669c     BF FA 05 F6 | 	mov	result1, #191
066a0     4C 00 90 FD | 	jmp	#LR__0520
066a4                 | LR__0510
066a4     54 FA 05 F6 | 	mov	result1, #84
066a8     44 00 90 FD | 	jmp	#LR__0520
066ac                 | LR__0511
066ac     6B FA 05 F6 | 	mov	result1, #107
066b0     3C 00 90 FD | 	jmp	#LR__0520
066b4                 | LR__0512
066b4     87 FA 05 F6 | 	mov	result1, #135
066b8     34 00 90 FD | 	jmp	#LR__0520
066bc                 | LR__0513
066bc     6A FA 05 F6 | 	mov	result1, #106
066c0     2C 00 90 FD | 	jmp	#LR__0520
066c4                 | LR__0514
066c4     6E FA 05 F6 | 	mov	result1, #110
066c8     24 00 90 FD | 	jmp	#LR__0520
066cc                 | LR__0515
066cc     A1 FA 05 F6 | 	mov	result1, #161
066d0     1C 00 90 FD | 	jmp	#LR__0520
066d4                 | LR__0516
066d4     83 FA 05 F6 | 	mov	result1, #131
066d8     14 00 90 FD | 	jmp	#LR__0520
066dc                 | LR__0517
066dc     A0 FA 05 F6 | 	mov	result1, #160
066e0     0C 00 90 FD | 	jmp	#LR__0520
066e4                 | LR__0518
066e4     9B FA 05 F6 | 	mov	result1, #155
066e8     04 00 90 FD | 	jmp	#LR__0520
066ec                 | LR__0519
066ec     00 FA 05 F6 | 	mov	result1, #0
066f0                 | LR__0520
066f0     A7 F0 03 F6 | 	mov	ptra, fp
066f4     B2 00 A0 FD | 	call	#popregs_
066f8                 | _isfunction_ret
066f8     2D 00 64 FD | 	ret
066fc                 | 
066fc                 | ' 
066fc                 | ' ' Check if the part is a name
066fc                 | ' 
066fc                 | ' function isname(s as string) as boolean
066fc                 | _isname
066fc     0D 4A 05 F6 | 	mov	COUNT_, #13
06700     A8 00 A0 FD | 	call	#pushregs_
06704     09 27 02 F6 | 	mov	local01, arg01
06708     09 29 02 F6 | 	mov	local02, arg01
0670c     97 06 48 FB | 	callpa	#(@LR__0531-@LR__0530)>>2,fcache_load_ptr_
06710                 | LR__0530
06710     14 FB C9 FA | 	rdbyte	result1, local02 wz
06714     01 28 06 51 |  if_ne	add	local02, #1
06718     F4 FF 9F 5D |  if_ne	jmp	#LR__0530
0671c                 | LR__0531
0671c     09 29 82 F1 | 	sub	local02, arg01
06720     14 FB 01 F6 | 	mov	result1, local02
06724     FD 2A 0A F6 | 	mov	local03, result1 wz
06728     00 FA 05 A6 |  if_e	mov	result1, #0
0672c     34 02 90 AD |  if_e	jmp	#LR__0543
06730     13 13 02 F6 | 	mov	arg01, local01
06734     01 14 06 F6 | 	mov	arg02, #1
06738     01 16 06 F6 | 	mov	arg03, #1
0673c     F4 2A B2 FD | 	call	#__system__Mid_S
06740     FD 2C 02 F6 | 	mov	local04, result1
06744                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
06744     B9 01 00 FF 
06748     2E 14 06 F6 | 	mov	arg02, ##@LR__5796
0674c     16 13 02 F6 | 	mov	arg01, local04
06750     70 09 B2 FD | 	call	#__system___string_cmp
06754     00 FA 55 F2 | 	cmps	result1, #0 wc
06758     18 00 90 CD |  if_b	jmp	#LR__0532
0675c     B9 01 00 FF 
06760     30 14 06 F6 | 	mov	arg02, ##@LR__5797
06764     16 13 02 F6 | 	mov	arg01, local04
06768     58 09 B2 FD | 	call	#__system___string_cmp
0676c     01 FA 55 F2 | 	cmps	result1, #1 wc
06770     1C 00 90 CD |  if_b	jmp	#LR__0533
06774                 | LR__0532
06774     B9 01 00 FF 
06778     32 14 06 F6 | 	mov	arg02, ##@LR__5798
0677c     16 13 02 F6 | 	mov	arg01, local04
06780     40 09 B2 FD | 	call	#__system___string_cmp
06784     00 FA 0D F2 | 	cmp	result1, #0 wz
06788     00 FA 05 56 |  if_ne	mov	result1, #0
0678c     D4 01 90 5D |  if_ne	jmp	#LR__0543
06790                 | LR__0533
06790                 | ' if l>2 then 
06790     03 2A 56 F2 | 	cmps	local03, #3 wc
06794     C8 01 90 CD |  if_b	jmp	#LR__0542
06798                 | '   for i=2 to l
06798     02 2E 06 F6 | 	mov	local05, #2
0679c     15 31 02 F6 | 	mov	local06, local03
067a0     01 30 06 F1 | 	add	local06, #1
067a4                 | LR__0534
067a4     18 2F 52 F2 | 	cmps	local05, local06 wc
067a8     B4 01 90 3D |  if_ae	jmp	#LR__0541
067ac     13 13 02 F6 | 	mov	arg01, local01
067b0     17 15 02 F6 | 	mov	arg02, local05
067b4     01 16 06 F6 | 	mov	arg03, #1
067b8     78 2A B2 FD | 	call	#__system__Mid_S
067bc     FD 2C 02 F6 | 	mov	local04, result1
067c0                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
067c0     15 2F 52 F2 | 	cmps	local05, local03 wc
067c4     9C 00 90 3D |  if_ae	jmp	#LR__0537
067c8     B9 01 00 FF 
067cc     34 14 06 F6 | 	mov	arg02, ##@LR__5799
067d0     16 13 02 F6 | 	mov	arg01, local04
067d4     EC 08 B2 FD | 	call	#__system___string_cmp
067d8     00 FA 55 F2 | 	cmps	result1, #0 wc
067dc     18 00 90 CD |  if_b	jmp	#LR__0535
067e0     B9 01 00 FF 
067e4     36 14 06 F6 | 	mov	arg02, ##@LR__5800
067e8     16 13 02 F6 | 	mov	arg01, local04
067ec     D4 08 B2 FD | 	call	#__system___string_cmp
067f0     01 FA 55 F2 | 	cmps	result1, #1 wc
067f4     6C 00 90 CD |  if_b	jmp	#LR__0537
067f8                 | LR__0535
067f8     B9 01 00 FF 
067fc     38 14 06 F6 | 	mov	arg02, ##@LR__5801
06800     16 13 02 F6 | 	mov	arg01, local04
06804     BC 08 B2 FD | 	call	#__system___string_cmp
06808     00 FA 55 F2 | 	cmps	result1, #0 wc
0680c     18 00 90 CD |  if_b	jmp	#LR__0536
06810     B9 01 00 FF 
06814     3A 14 06 F6 | 	mov	arg02, ##@LR__5802
06818     16 13 02 F6 | 	mov	arg01, local04
0681c     A4 08 B2 FD | 	call	#__system___string_cmp
06820     01 FA 55 F2 | 	cmps	result1, #1 wc
06824     3C 00 90 CD |  if_b	jmp	#LR__0537
06828                 | LR__0536
06828     B9 01 00 FF 
0682c     3C 32 06 F6 | 	mov	local07, ##@LR__5803
06830     16 13 02 F6 | 	mov	arg01, local04
06834     19 15 02 F6 | 	mov	arg02, local07
06838     88 08 B2 FD | 	call	#__system___string_cmp
0683c     00 FA 0D F2 | 	cmp	result1, #0 wz
06840     20 00 90 AD |  if_e	jmp	#LR__0537
06844     B9 01 00 FF 
06848     3E 34 06 F6 | 	mov	local08, ##@LR__5804
0684c     16 13 02 F6 | 	mov	arg01, local04
06850     1A 15 02 F6 | 	mov	arg02, local08
06854     6C 08 B2 FD | 	call	#__system___string_cmp
06858     FD 36 0A F6 | 	mov	local09, result1 wz
0685c     00 FA 05 56 |  if_ne	mov	result1, #0
06860     00 01 90 5D |  if_ne	jmp	#LR__0543
06864                 | LR__0537
06864                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06864     15 2F 0A F2 | 	cmp	local05, local03 wz
06868     EC 00 90 5D |  if_ne	jmp	#LR__0540
0686c     B9 01 00 FF 
06870     40 38 06 F6 | 	mov	local10, ##@LR__5805
06874     16 13 02 F6 | 	mov	arg01, local04
06878     1C 15 02 F6 | 	mov	arg02, local10
0687c     44 08 B2 FD | 	call	#__system___string_cmp
06880     FD 3A 02 F6 | 	mov	local11, result1
06884     00 3A 56 F2 | 	cmps	local11, #0 wc
06888     1C 00 90 CD |  if_b	jmp	#LR__0538
0688c     B9 01 00 FF 
06890     42 14 06 F6 | 	mov	arg02, ##@LR__5806
06894     16 13 02 F6 | 	mov	arg01, local04
06898     28 08 B2 FD | 	call	#__system___string_cmp
0689c     FD 38 02 F6 | 	mov	local10, result1
068a0     01 38 56 F2 | 	cmps	local10, #1 wc
068a4     B0 00 90 CD |  if_b	jmp	#LR__0540
068a8                 | LR__0538
068a8     B9 01 00 FF 
068ac     44 14 06 F6 | 	mov	arg02, ##@LR__5807
068b0     16 13 02 F6 | 	mov	arg01, local04
068b4     0C 08 B2 FD | 	call	#__system___string_cmp
068b8     00 FA 55 F2 | 	cmps	result1, #0 wc
068bc     1C 00 90 CD |  if_b	jmp	#LR__0539
068c0     B9 01 00 FF 
068c4     46 36 06 F6 | 	mov	local09, ##@LR__5808
068c8     16 13 02 F6 | 	mov	arg01, local04
068cc     1B 15 02 F6 | 	mov	arg02, local09
068d0     F0 07 B2 FD | 	call	#__system___string_cmp
068d4     01 FA 55 F2 | 	cmps	result1, #1 wc
068d8     7C 00 90 CD |  if_b	jmp	#LR__0540
068dc                 | LR__0539
068dc     B9 01 00 FF 
068e0     48 36 06 F6 | 	mov	local09, ##@LR__5809
068e4     16 13 02 F6 | 	mov	arg01, local04
068e8     1B 15 02 F6 | 	mov	arg02, local09
068ec     D4 07 B2 FD | 	call	#__system___string_cmp
068f0     00 FA 4D F2 | 	cmps	result1, #0 wz
068f4     60 00 90 AD |  if_e	jmp	#LR__0540
068f8     B9 01 00 FF 
068fc     4A 34 06 F6 | 	mov	local08, ##@LR__5810
06900     16 13 02 F6 | 	mov	arg01, local04
06904     1A 15 02 F6 | 	mov	arg02, local08
06908     B8 07 B2 FD | 	call	#__system___string_cmp
0690c     FD 36 0A F6 | 	mov	local09, result1 wz
06910     44 00 90 AD |  if_e	jmp	#LR__0540
06914     B9 01 00 FF 
06918     4C 3C 06 F6 | 	mov	local12, ##@LR__5811
0691c     1E 35 02 F6 | 	mov	local08, local12
06920     16 13 02 F6 | 	mov	arg01, local04
06924     1A 15 02 F6 | 	mov	arg02, local08
06928     98 07 B2 FD | 	call	#__system___string_cmp
0692c     FD 32 0A F6 | 	mov	local07, result1 wz
06930     24 00 90 AD |  if_e	jmp	#LR__0540
06934     B9 01 00 FF 
06938     4E 3E 06 F6 | 	mov	local13, ##@LR__5812
0693c     1F 3D 02 F6 | 	mov	local12, local13
06940     16 13 02 F6 | 	mov	arg01, local04
06944     1E 15 02 F6 | 	mov	arg02, local12
06948     78 07 B2 FD | 	call	#__system___string_cmp
0694c     FD 34 0A F6 | 	mov	local08, result1 wz
06950     00 FA 05 56 |  if_ne	mov	result1, #0
06954     0C 00 90 5D |  if_ne	jmp	#LR__0543
06958                 | LR__0540
06958     01 2E 06 F1 | 	add	local05, #1
0695c     44 FE 9F FD | 	jmp	#LR__0534
06960                 | LR__0541
06960                 | LR__0542
06960                 | ' return true
06960     01 FA 65 F6 | 	neg	result1, #1
06964                 | LR__0543
06964     A7 F0 03 F6 | 	mov	ptra, fp
06968     B2 00 A0 FD | 	call	#popregs_
0696c                 | _isname_ret
0696c     2D 00 64 FD | 	ret
06970                 | 
06970                 | ' 
06970                 | ' ' Check if the part is a number.  
06970                 | ' 
06970                 | ' function isnum(s as string) as boolean 
06970                 | _isnum
06970     13 4A 05 F6 | 	mov	COUNT_, #19
06974     A8 00 A0 FD | 	call	#pushregs_
06978     09 27 02 F6 | 	mov	local01, arg01
0697c     00 28 06 F6 | 	mov	local02, #0
06980     00 2A 06 F6 | 	mov	local03, #0
06984     13 13 02 F6 | 	mov	arg01, local01
06988     09 2D 02 F6 | 	mov	local04, arg01
0698c     97 06 48 FB | 	callpa	#(@LR__0551-@LR__0550)>>2,fcache_load_ptr_
06990                 | LR__0550
06990     16 FB C9 FA | 	rdbyte	result1, local04 wz
06994     01 2C 06 51 |  if_ne	add	local04, #1
06998     F4 FF 9F 5D |  if_ne	jmp	#LR__0550
0699c                 | LR__0551
0699c     09 2D 82 F1 | 	sub	local04, arg01
069a0     16 FB 01 F6 | 	mov	result1, local04
069a4     FD 2E 0A F6 | 	mov	local05, result1 wz
069a8     00 FA 05 A6 |  if_e	mov	result1, #0
069ac     A0 03 90 AD |  if_e	jmp	#LR__0566
069b0     13 13 02 F6 | 	mov	arg01, local01
069b4     01 14 06 F6 | 	mov	arg02, #1
069b8     01 16 06 F6 | 	mov	arg03, #1
069bc     74 28 B2 FD | 	call	#__system__Mid_S
069c0     FD 30 02 F6 | 	mov	local06, result1
069c4                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
069c4     B9 01 00 FF 
069c8     50 14 06 F6 | 	mov	arg02, ##@LR__5813
069cc     18 13 02 F6 | 	mov	arg01, local06
069d0     F0 06 B2 FD | 	call	#__system___string_cmp
069d4     00 FA 55 F2 | 	cmps	result1, #0 wc
069d8     1C 00 90 CD |  if_b	jmp	#LR__0552
069dc     B9 01 00 FF 
069e0     52 32 06 F6 | 	mov	local07, ##@LR__5814
069e4     18 13 02 F6 | 	mov	arg01, local06
069e8     19 15 02 F6 | 	mov	arg02, local07
069ec     D4 06 B2 FD | 	call	#__system___string_cmp
069f0     01 FA 55 F2 | 	cmps	result1, #1 wc
069f4     84 00 90 CD |  if_b	jmp	#LR__0553
069f8                 | LR__0552
069f8     B9 01 00 FF 
069fc     54 34 06 F6 | 	mov	local08, ##@LR__5815
06a00     1A 33 02 F6 | 	mov	local07, local08
06a04     18 13 02 F6 | 	mov	arg01, local06
06a08     19 15 02 F6 | 	mov	arg02, local07
06a0c     B4 06 B2 FD | 	call	#__system___string_cmp
06a10     00 FA 0D F2 | 	cmp	result1, #0 wz
06a14     64 00 90 AD |  if_e	jmp	#LR__0553
06a18     B9 01 00 FF 
06a1c     56 36 06 F6 | 	mov	local09, ##@LR__5816
06a20     1B 35 02 F6 | 	mov	local08, local09
06a24     18 13 02 F6 | 	mov	arg01, local06
06a28     1A 15 02 F6 | 	mov	arg02, local08
06a2c     94 06 B2 FD | 	call	#__system___string_cmp
06a30     FD 32 0A F6 | 	mov	local07, result1 wz
06a34     44 00 90 AD |  if_e	jmp	#LR__0553
06a38     B9 01 00 FF 
06a3c     58 38 06 F6 | 	mov	local10, ##@LR__5817
06a40     1C 37 02 F6 | 	mov	local09, local10
06a44     18 13 02 F6 | 	mov	arg01, local06
06a48     1B 15 02 F6 | 	mov	arg02, local09
06a4c     74 06 B2 FD | 	call	#__system___string_cmp
06a50     FD 34 0A F6 | 	mov	local08, result1 wz
06a54     24 00 90 AD |  if_e	jmp	#LR__0553
06a58     B9 01 00 FF 
06a5c     5A 3A 06 F6 | 	mov	local11, ##@LR__5818
06a60     1D 39 02 F6 | 	mov	local10, local11
06a64     18 13 02 F6 | 	mov	arg01, local06
06a68     1C 15 02 F6 | 	mov	arg02, local10
06a6c     54 06 B2 FD | 	call	#__system___string_cmp
06a70     FD 36 0A F6 | 	mov	local09, result1 wz
06a74     00 FA 05 56 |  if_ne	mov	result1, #0
06a78     D4 02 90 5D |  if_ne	jmp	#LR__0566
06a7c                 | LR__0553
06a7c                 | ' if m$="." then ds=1
06a7c     B9 01 00 FF 
06a80     5C 14 06 F6 | 	mov	arg02, ##@LR__5819
06a84     18 13 02 F6 | 	mov	arg01, local06
06a88     38 06 B2 FD | 	call	#__system___string_cmp
06a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
06a90     01 28 06 A6 |  if_e	mov	local02, #1
06a94                 | ' if m$="$" then hex=1 else hex=0
06a94     B9 01 00 FF 
06a98     5E 14 06 F6 | 	mov	arg02, ##@LR__5820
06a9c     18 13 02 F6 | 	mov	arg01, local06
06aa0     20 06 B2 FD | 	call	#__system___string_cmp
06aa4     00 FA 0D F2 | 	cmp	result1, #0 wz
06aa8     01 3C 06 A6 |  if_e	mov	local12, #1
06aac     00 3C 06 56 |  if_ne	mov	local12, #0
06ab0                 | ' if m$="%" then bin=1 else bin=0
06ab0     B9 01 00 FF 
06ab4     60 14 06 F6 | 	mov	arg02, ##@LR__5821
06ab8     18 13 02 F6 | 	mov	arg01, local06
06abc     04 06 B2 FD | 	call	#__system___string_cmp
06ac0     00 FA 0D F2 | 	cmp	result1, #0 wz
06ac4     01 3E 06 A6 |  if_e	mov	local13, #1
06ac8     00 3E 06 56 |  if_ne	mov	local13, #0
06acc                 | ' if l>1 then 
06acc     02 2E 56 F2 | 	cmps	local05, #2 wc
06ad0     78 02 90 CD |  if_b	jmp	#LR__0565
06ad4                 | '   for i=2 to l
06ad4     02 40 06 F6 | 	mov	local14, #2
06ad8     17 43 02 F6 | 	mov	local15, local05
06adc     01 42 06 F1 | 	add	local15, #1
06ae0                 | LR__0554
06ae0     21 41 52 F2 | 	cmps	local14, local15 wc
06ae4     64 02 90 3D |  if_ae	jmp	#LR__0564
06ae8     13 13 02 F6 | 	mov	arg01, local01
06aec     20 15 02 F6 | 	mov	arg02, local14
06af0     01 16 06 F6 | 	mov	arg03, #1
06af4     3C 27 B2 FD | 	call	#__system__Mid_S
06af8     FD 30 02 F6 | 	mov	local06, result1
06afc     00 44 06 F6 | 	mov	local16, #0
06b00                 | '     m$=mid$(s,i,1) : b=false
06b00                 | '     if m$>="0" andalso m$<="9" then b=true  
06b00     B9 01 00 FF 
06b04     62 14 06 F6 | 	mov	arg02, ##@LR__5822
06b08     18 13 02 F6 | 	mov	arg01, local06
06b0c     B4 05 B2 FD | 	call	#__system___string_cmp
06b10     00 FA 55 F2 | 	cmps	result1, #0 wc
06b14     1C 00 90 CD |  if_b	jmp	#LR__0555
06b18     B9 01 00 FF 
06b1c     64 32 06 F6 | 	mov	local07, ##@LR__5823
06b20     18 13 02 F6 | 	mov	arg01, local06
06b24     19 15 02 F6 | 	mov	arg02, local07
06b28     98 05 B2 FD | 	call	#__system___string_cmp
06b2c     01 FA 55 F2 | 	cmps	result1, #1 wc
06b30     01 44 66 C6 |  if_b	neg	local16, #1
06b34                 | LR__0555
06b34                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06b34     B9 01 00 FF 
06b38     66 14 06 F6 | 	mov	arg02, ##@LR__5824
06b3c     18 13 02 F6 | 	mov	arg01, local06
06b40     80 05 B2 FD | 	call	#__system___string_cmp
06b44     00 FA 0D F2 | 	cmp	result1, #0 wz
06b48     7C 00 90 AD |  if_e	jmp	#LR__0556
06b4c     B9 01 00 FF 
06b50     68 32 06 F6 | 	mov	local07, ##@LR__5825
06b54     18 13 02 F6 | 	mov	arg01, local06
06b58     19 15 02 F6 | 	mov	arg02, local07
06b5c     64 05 B2 FD | 	call	#__system___string_cmp
06b60     00 FA 0D F2 | 	cmp	result1, #0 wz
06b64     60 00 90 AD |  if_e	jmp	#LR__0556
06b68     B9 01 00 FF 
06b6c     6A 34 06 F6 | 	mov	local08, ##@LR__5826
06b70     1A 33 02 F6 | 	mov	local07, local08
06b74     18 13 02 F6 | 	mov	arg01, local06
06b78     19 15 02 F6 | 	mov	arg02, local07
06b7c     44 05 B2 FD | 	call	#__system___string_cmp
06b80     00 FA 0D F2 | 	cmp	result1, #0 wz
06b84     40 00 90 AD |  if_e	jmp	#LR__0556
06b88     B9 01 00 FF 
06b8c     6C 36 06 F6 | 	mov	local09, ##@LR__5827
06b90     1B 35 02 F6 | 	mov	local08, local09
06b94     18 13 02 F6 | 	mov	arg01, local06
06b98     1A 15 02 F6 | 	mov	arg02, local08
06b9c     24 05 B2 FD | 	call	#__system___string_cmp
06ba0     FD 32 0A F6 | 	mov	local07, result1 wz
06ba4     20 00 90 AD |  if_e	jmp	#LR__0556
06ba8     B9 01 00 FF 
06bac     6E 38 06 F6 | 	mov	local10, ##@LR__5828
06bb0     1C 37 02 F6 | 	mov	local09, local10
06bb4     18 13 02 F6 | 	mov	arg01, local06
06bb8     1B 15 02 F6 | 	mov	arg02, local09
06bbc     04 05 B2 FD | 	call	#__system___string_cmp
06bc0     FD 34 0A F6 | 	mov	local08, result1 wz
06bc4     04 00 90 5D |  if_ne	jmp	#LR__0557
06bc8                 | LR__0556
06bc8     01 44 66 F6 | 	neg	local16, #1
06bcc                 | LR__0557
06bcc                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06bcc     01 3C 0E F2 | 	cmp	local12, #1 wz
06bd0     34 00 90 5D |  if_ne	jmp	#LR__0558
06bd4     B9 01 00 FF 
06bd8     70 14 06 F6 | 	mov	arg02, ##@LR__5829
06bdc     18 13 02 F6 | 	mov	arg01, local06
06be0     E0 04 B2 FD | 	call	#__system___string_cmp
06be4     00 FA 55 F2 | 	cmps	result1, #0 wc
06be8     1C 00 90 CD |  if_b	jmp	#LR__0558
06bec     B9 01 00 FF 
06bf0     72 32 06 F6 | 	mov	local07, ##@LR__5830
06bf4     18 13 02 F6 | 	mov	arg01, local06
06bf8     19 15 02 F6 | 	mov	arg02, local07
06bfc     C4 04 B2 FD | 	call	#__system___string_cmp
06c00     01 FA 55 F2 | 	cmps	result1, #1 wc
06c04     01 44 66 C6 |  if_b	neg	local16, #1
06c08                 | LR__0558
06c08                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06c08     01 3E 0E F2 | 	cmp	local13, #1 wz
06c0c     58 00 90 5D |  if_ne	jmp	#LR__0560
06c10     B9 01 00 FF 
06c14     74 14 06 F6 | 	mov	arg02, ##@LR__5831
06c18     18 13 02 F6 | 	mov	arg01, local06
06c1c     A4 04 B2 FD | 	call	#__system___string_cmp
06c20     00 FA 55 F2 | 	cmps	result1, #0 wc
06c24     1C 00 90 CD |  if_b	jmp	#LR__0559
06c28     B9 01 00 FF 
06c2c     76 32 06 F6 | 	mov	local07, ##@LR__5832
06c30     18 13 02 F6 | 	mov	arg01, local06
06c34     19 15 02 F6 | 	mov	arg02, local07
06c38     88 04 B2 FD | 	call	#__system___string_cmp
06c3c     01 FA 55 F2 | 	cmps	result1, #1 wc
06c40     24 00 90 CD |  if_b	jmp	#LR__0560
06c44                 | LR__0559
06c44     B9 01 00 FF 
06c48     78 34 06 F6 | 	mov	local08, ##@LR__5833
06c4c     1A 33 02 F6 | 	mov	local07, local08
06c50     18 13 02 F6 | 	mov	arg01, local06
06c54     19 15 02 F6 | 	mov	arg02, local07
06c58     68 04 B2 FD | 	call	#__system___string_cmp
06c5c     00 FA 0D F2 | 	cmp	result1, #0 wz
06c60     00 FA 05 56 |  if_ne	mov	result1, #0
06c64     E8 00 90 5D |  if_ne	jmp	#LR__0566
06c68                 | LR__0560
06c68                 | '     if not b then return false
06c68     22 45 22 F6 | 	not	local16, local16
06c6c     00 44 0E F2 | 	cmp	local16, #0 wz
06c70     00 FA 05 56 |  if_ne	mov	result1, #0
06c74     D8 00 90 5D |  if_ne	jmp	#LR__0566
06c78                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06c78     B9 01 00 FF 
06c7c     7A 14 06 F6 | 	mov	arg02, ##@LR__5834
06c80     18 13 02 F6 | 	mov	arg01, local06
06c84     3C 04 B2 FD | 	call	#__system___string_cmp
06c88     00 FA 0D F2 | 	cmp	result1, #0 wz
06c8c     3C 00 90 5D |  if_ne	jmp	#LR__0561
06c90     20 15 02 F6 | 	mov	arg02, local14
06c94     01 14 86 F1 | 	sub	arg02, #1
06c98     13 13 02 F6 | 	mov	arg01, local01
06c9c     01 16 06 F6 | 	mov	arg03, #1
06ca0     90 25 B2 FD | 	call	#__system__Mid_S
06ca4     FD 12 02 F6 | 	mov	arg01, result1
06ca8     80 27 B2 FD | 	call	#__system__LCase_S
06cac     FD 12 02 F6 | 	mov	arg01, result1
06cb0     B9 01 00 FF 
06cb4     7C 32 06 F6 | 	mov	local07, ##@LR__5835
06cb8     19 15 02 F6 | 	mov	arg02, local07
06cbc     04 04 B2 FD | 	call	#__system___string_cmp
06cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
06cc4     00 FA 05 56 |  if_ne	mov	result1, #0
06cc8     84 00 90 5D |  if_ne	jmp	#LR__0566
06ccc                 | LR__0561
06ccc                 | '     if m$="." then ds+=1: if ds>1 then return false
06ccc     B9 01 00 FF 
06cd0     7E 14 06 F6 | 	mov	arg02, ##@LR__5836
06cd4     18 13 02 F6 | 	mov	arg01, local06
06cd8     E8 03 B2 FD | 	call	#__system___string_cmp
06cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
06ce0     01 28 06 A1 |  if_e	add	local02, #1
06ce4     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06ce8     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06cec     60 00 90 2D |  if_nc_and_z	jmp	#LR__0566
06cf0                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06cf0     B9 01 00 FF 
06cf4     80 46 06 F6 | 	mov	local17, ##@LR__5837
06cf8     23 49 02 F6 | 	mov	local18, local17
06cfc     18 13 02 F6 | 	mov	arg01, local06
06d00     24 15 02 F6 | 	mov	arg02, local18
06d04     BC 03 B2 FD | 	call	#__system___string_cmp
06d08     FD 4A 0A F6 | 	mov	local19, result1 wz
06d0c     20 00 90 AD |  if_e	jmp	#LR__0562
06d10     B9 01 00 FF 
06d14     82 32 06 F6 | 	mov	local07, ##@LR__5838
06d18     19 47 02 F6 | 	mov	local17, local07
06d1c     18 13 02 F6 | 	mov	arg01, local06
06d20     23 15 02 F6 | 	mov	arg02, local17
06d24     9C 03 B2 FD | 	call	#__system___string_cmp
06d28     FD 48 0A F6 | 	mov	local18, result1 wz
06d2c     14 00 90 5D |  if_ne	jmp	#LR__0563
06d30                 | LR__0562
06d30     01 2A 06 F1 | 	add	local03, #1
06d34     00 3C 0E F2 | 	cmp	local12, #0 wz
06d38     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06d3c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06d40     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0566
06d44                 | LR__0563
06d44     01 40 06 F1 | 	add	local14, #1
06d48     94 FD 9F FD | 	jmp	#LR__0554
06d4c                 | LR__0564
06d4c                 | LR__0565
06d4c                 | ' return true
06d4c     01 FA 65 F6 | 	neg	result1, #1
06d50                 | LR__0566
06d50     A7 F0 03 F6 | 	mov	ptra, fp
06d54     B2 00 A0 FD | 	call	#popregs_
06d58                 | _isnum_ret
06d58     2D 00 64 FD | 	ret
06d5c                 | 
06d5c                 | '   
06d5c                 | ' ' Check if the part is an integer number.    
06d5c                 | '   
06d5c                 | ' function isint(s as string) as boolean
06d5c                 | _isint
06d5c     0E 4A 05 F6 | 	mov	COUNT_, #14
06d60     A8 00 A0 FD | 	call	#pushregs_
06d64     09 27 02 F6 | 	mov	local01, arg01
06d68     09 29 02 F6 | 	mov	local02, arg01
06d6c     97 06 48 FB | 	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
06d70                 | LR__0570
06d70     14 FB C9 FA | 	rdbyte	result1, local02 wz
06d74     01 28 06 51 |  if_ne	add	local02, #1
06d78     F4 FF 9F 5D |  if_ne	jmp	#LR__0570
06d7c                 | LR__0571
06d7c     09 29 82 F1 | 	sub	local02, arg01
06d80     14 FB 01 F6 | 	mov	result1, local02
06d84     FD 2A 0A F6 | 	mov	local03, result1 wz
06d88     00 FA 05 A6 |  if_e	mov	result1, #0
06d8c     64 02 90 AD |  if_e	jmp	#LR__0584
06d90     13 13 02 F6 | 	mov	arg01, local01
06d94     01 14 06 F6 | 	mov	arg02, #1
06d98     01 16 06 F6 | 	mov	arg03, #1
06d9c     94 24 B2 FD | 	call	#__system__Mid_S
06da0     FD 2C 02 F6 | 	mov	local04, result1
06da4                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06da4     B9 01 00 FF 
06da8     84 14 06 F6 | 	mov	arg02, ##@LR__5839
06dac     16 13 02 F6 | 	mov	arg01, local04
06db0     10 03 B2 FD | 	call	#__system___string_cmp
06db4     00 FA 55 F2 | 	cmps	result1, #0 wc
06db8     1C 00 90 CD |  if_b	jmp	#LR__0572
06dbc     B9 01 00 FF 
06dc0     86 2E 06 F6 | 	mov	local05, ##@LR__5840
06dc4     16 13 02 F6 | 	mov	arg01, local04
06dc8     17 15 02 F6 | 	mov	arg02, local05
06dcc     F4 02 B2 FD | 	call	#__system___string_cmp
06dd0     01 FA 55 F2 | 	cmps	result1, #1 wc
06dd4     64 00 90 CD |  if_b	jmp	#LR__0573
06dd8                 | LR__0572
06dd8     B9 01 00 FF 
06ddc     88 30 06 F6 | 	mov	local06, ##@LR__5841
06de0     18 2F 02 F6 | 	mov	local05, local06
06de4     16 13 02 F6 | 	mov	arg01, local04
06de8     17 15 02 F6 | 	mov	arg02, local05
06dec     D4 02 B2 FD | 	call	#__system___string_cmp
06df0     00 FA 0D F2 | 	cmp	result1, #0 wz
06df4     44 00 90 AD |  if_e	jmp	#LR__0573
06df8     B9 01 00 FF 
06dfc     8A 32 06 F6 | 	mov	local07, ##@LR__5842
06e00     19 31 02 F6 | 	mov	local06, local07
06e04     16 13 02 F6 | 	mov	arg01, local04
06e08     18 15 02 F6 | 	mov	arg02, local06
06e0c     B4 02 B2 FD | 	call	#__system___string_cmp
06e10     FD 2E 0A F6 | 	mov	local05, result1 wz
06e14     24 00 90 AD |  if_e	jmp	#LR__0573
06e18     B9 01 00 FF 
06e1c     8C 34 06 F6 | 	mov	local08, ##@LR__5843
06e20     1A 33 02 F6 | 	mov	local07, local08
06e24     16 13 02 F6 | 	mov	arg01, local04
06e28     19 15 02 F6 | 	mov	arg02, local07
06e2c     94 02 B2 FD | 	call	#__system___string_cmp
06e30     FD 30 0A F6 | 	mov	local06, result1 wz
06e34     00 FA 05 56 |  if_ne	mov	result1, #0
06e38     B8 01 90 5D |  if_ne	jmp	#LR__0584
06e3c                 | LR__0573
06e3c                 | ' if m$="$" then hex=1 else hex=0
06e3c     B9 01 00 FF 
06e40     8E 14 06 F6 | 	mov	arg02, ##@LR__5844
06e44     16 13 02 F6 | 	mov	arg01, local04
06e48     78 02 B2 FD | 	call	#__system___string_cmp
06e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
06e50     01 36 06 A6 |  if_e	mov	local09, #1
06e54     00 36 06 56 |  if_ne	mov	local09, #0
06e58                 | ' if m$="%" then bin=1 else bin=0
06e58     B9 01 00 FF 
06e5c     90 14 06 F6 | 	mov	arg02, ##@LR__5845
06e60     16 13 02 F6 | 	mov	arg01, local04
06e64     5C 02 B2 FD | 	call	#__system___string_cmp
06e68     00 FA 0D F2 | 	cmp	result1, #0 wz
06e6c     01 38 06 A6 |  if_e	mov	local10, #1
06e70     00 38 06 56 |  if_ne	mov	local10, #0
06e74                 | ' if l>1 then 
06e74     02 2A 56 F2 | 	cmps	local03, #2 wc
06e78     74 01 90 CD |  if_b	jmp	#LR__0583
06e7c                 | '   for i=2 to l
06e7c     02 3A 06 F6 | 	mov	local11, #2
06e80     15 3D 02 F6 | 	mov	local12, local03
06e84     01 3C 06 F1 | 	add	local12, #1
06e88                 | LR__0574
06e88     1E 3B 52 F2 | 	cmps	local11, local12 wc
06e8c     60 01 90 3D |  if_ae	jmp	#LR__0582
06e90     13 13 02 F6 | 	mov	arg01, local01
06e94     1D 15 02 F6 | 	mov	arg02, local11
06e98     01 16 06 F6 | 	mov	arg03, #1
06e9c     94 23 B2 FD | 	call	#__system__Mid_S
06ea0     FD 2C 02 F6 | 	mov	local04, result1
06ea4                 | '     m$=mid$(s,i,1) 
06ea4                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06ea4     00 36 0E F2 | 	cmp	local09, #0 wz
06ea8     50 00 90 5D |  if_ne	jmp	#LR__0576
06eac     B9 01 00 FF 
06eb0     92 14 06 F6 | 	mov	arg02, ##@LR__5846
06eb4     16 13 02 F6 | 	mov	arg01, local04
06eb8     08 02 B2 FD | 	call	#__system___string_cmp
06ebc     00 FA 55 F2 | 	cmps	result1, #0 wc
06ec0     18 00 90 CD |  if_b	jmp	#LR__0575
06ec4     B9 01 00 FF 
06ec8     94 14 06 F6 | 	mov	arg02, ##@LR__5847
06ecc     16 13 02 F6 | 	mov	arg01, local04
06ed0     F0 01 B2 FD | 	call	#__system___string_cmp
06ed4     01 FA 55 F2 | 	cmps	result1, #1 wc
06ed8     20 00 90 CD |  if_b	jmp	#LR__0576
06edc                 | LR__0575
06edc     B9 01 00 FF 
06ee0     96 30 06 F6 | 	mov	local06, ##@LR__5848
06ee4     16 13 02 F6 | 	mov	arg01, local04
06ee8     18 15 02 F6 | 	mov	arg02, local06
06eec     D4 01 B2 FD | 	call	#__system___string_cmp
06ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
06ef4     00 FA 05 56 |  if_ne	mov	result1, #0
06ef8     F8 00 90 5D |  if_ne	jmp	#LR__0584
06efc                 | LR__0576
06efc                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06efc     01 36 0E F2 | 	cmp	local09, #1 wz
06f00     90 00 90 5D |  if_ne	jmp	#LR__0579
06f04     B9 01 00 FF 
06f08     98 14 06 F6 | 	mov	arg02, ##@LR__5849
06f0c     16 13 02 F6 | 	mov	arg01, local04
06f10     B0 01 B2 FD | 	call	#__system___string_cmp
06f14     00 FA 55 F2 | 	cmps	result1, #0 wc
06f18     1C 00 90 CD |  if_b	jmp	#LR__0577
06f1c     B9 01 00 FF 
06f20     9A 14 06 F6 | 	mov	arg02, ##@LR__5850
06f24     16 13 02 F6 | 	mov	arg01, local04
06f28     98 01 B2 FD | 	call	#__system___string_cmp
06f2c     FD 3E 02 F6 | 	mov	local13, result1
06f30     01 3E 56 F2 | 	cmps	local13, #1 wc
06f34     5C 00 90 CD |  if_b	jmp	#LR__0579
06f38                 | LR__0577
06f38     B9 01 00 FF 
06f3c     9C 2E 06 F6 | 	mov	local05, ##@LR__5851
06f40     16 13 02 F6 | 	mov	arg01, local04
06f44     17 15 02 F6 | 	mov	arg02, local05
06f48     78 01 B2 FD | 	call	#__system___string_cmp
06f4c     FD 40 02 F6 | 	mov	local14, result1
06f50     00 40 56 F2 | 	cmps	local14, #0 wc
06f54     1C 00 90 CD |  if_b	jmp	#LR__0578
06f58     B9 01 00 FF 
06f5c     9E 32 06 F6 | 	mov	local07, ##@LR__5852
06f60     16 13 02 F6 | 	mov	arg01, local04
06f64     19 15 02 F6 | 	mov	arg02, local07
06f68     58 01 B2 FD | 	call	#__system___string_cmp
06f6c     01 FA 55 F2 | 	cmps	result1, #1 wc
06f70     20 00 90 CD |  if_b	jmp	#LR__0579
06f74                 | LR__0578
06f74     B9 01 00 FF 
06f78     A0 34 06 F6 | 	mov	local08, ##@LR__5853
06f7c     16 13 02 F6 | 	mov	arg01, local04
06f80     1A 15 02 F6 | 	mov	arg02, local08
06f84     3C 01 B2 FD | 	call	#__system___string_cmp
06f88     00 FA 0D F2 | 	cmp	result1, #0 wz
06f8c     00 FA 05 56 |  if_ne	mov	result1, #0
06f90     60 00 90 5D |  if_ne	jmp	#LR__0584
06f94                 | LR__0579
06f94                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
06f94     01 38 0E F2 | 	cmp	local10, #1 wz
06f98     4C 00 90 5D |  if_ne	jmp	#LR__0581
06f9c     B9 01 00 FF 
06fa0     A2 14 06 F6 | 	mov	arg02, ##@LR__5854
06fa4     16 13 02 F6 | 	mov	arg01, local04
06fa8     18 01 B2 FD | 	call	#__system___string_cmp
06fac     00 FA 55 F2 | 	cmps	result1, #0 wc
06fb0     18 00 90 CD |  if_b	jmp	#LR__0580
06fb4     B9 01 00 FF 
06fb8     A4 14 06 F6 | 	mov	arg02, ##@LR__5855
06fbc     16 13 02 F6 | 	mov	arg01, local04
06fc0     00 01 B2 FD | 	call	#__system___string_cmp
06fc4     01 FA 55 F2 | 	cmps	result1, #1 wc
06fc8     1C 00 90 CD |  if_b	jmp	#LR__0581
06fcc                 | LR__0580
06fcc     B9 01 00 FF 
06fd0     A6 14 06 F6 | 	mov	arg02, ##@LR__5856
06fd4     16 13 02 F6 | 	mov	arg01, local04
06fd8     E8 00 B2 FD | 	call	#__system___string_cmp
06fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
06fe0     00 FA 05 56 |  if_ne	mov	result1, #0
06fe4     0C 00 90 5D |  if_ne	jmp	#LR__0584
06fe8                 | LR__0581
06fe8     01 3A 06 F1 | 	add	local11, #1
06fec     98 FE 9F FD | 	jmp	#LR__0574
06ff0                 | LR__0582
06ff0                 | LR__0583
06ff0                 | ' return true
06ff0     01 FA 65 F6 | 	neg	result1, #1
06ff4                 | LR__0584
06ff4     A7 F0 03 F6 | 	mov	ptra, fp
06ff8     B2 00 A0 FD | 	call	#popregs_
06ffc                 | _isint_ret
06ffc     2D 00 64 FD | 	ret
07000                 | 
07000                 | ' 
07000                 | ' ' Check if the part is a positive decimal number.  
07000                 | ' 
07000                 | ' function isdec(s as string) as boolean
07000                 | _isdec
07000     05 4A 05 F6 | 	mov	COUNT_, #5
07004     A8 00 A0 FD | 	call	#pushregs_
07008     09 27 02 F6 | 	mov	local01, arg01
0700c     09 29 02 F6 | 	mov	local02, arg01
07010     97 06 48 FB | 	callpa	#(@LR__0591-@LR__0590)>>2,fcache_load_ptr_
07014                 | LR__0590
07014     14 FB C9 FA | 	rdbyte	result1, local02 wz
07018     01 28 06 51 |  if_ne	add	local02, #1
0701c     F4 FF 9F 5D |  if_ne	jmp	#LR__0590
07020                 | LR__0591
07020     09 29 82 F1 | 	sub	local02, arg01
07024     14 FB 01 F6 | 	mov	result1, local02
07028     FD 28 0A F6 | 	mov	local02, result1 wz
0702c     00 FA 05 A6 |  if_e	mov	result1, #0
07030     80 00 90 AD |  if_e	jmp	#LR__0596
07034                 | ' for i=1 to l
07034     01 2A 06 F6 | 	mov	local03, #1
07038     14 2D 02 F6 | 	mov	local04, local02
0703c     01 2C 06 F1 | 	add	local04, #1
07040                 | LR__0592
07040     16 2B 52 F2 | 	cmps	local03, local04 wc
07044     68 00 90 3D |  if_ae	jmp	#LR__0595
07048     13 13 02 F6 | 	mov	arg01, local01
0704c     15 15 02 F6 | 	mov	arg02, local03
07050     01 16 06 F6 | 	mov	arg03, #1
07054     DC 21 B2 FD | 	call	#__system__Mid_S
07058     FD 2E 02 F6 | 	mov	local05, result1
0705c                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
0705c     B9 01 00 FF 
07060     A8 14 06 F6 | 	mov	arg02, ##@LR__5857
07064     17 13 02 F6 | 	mov	arg01, local05
07068     58 00 B2 FD | 	call	#__system___string_cmp
0706c     00 FA 55 F2 | 	cmps	result1, #0 wc
07070     18 00 90 CD |  if_b	jmp	#LR__0593
07074     B9 01 00 FF 
07078     AA 14 06 F6 | 	mov	arg02, ##@LR__5858
0707c     17 13 02 F6 | 	mov	arg01, local05
07080     40 00 B2 FD | 	call	#__system___string_cmp
07084     01 FA 55 F2 | 	cmps	result1, #1 wc
07088     1C 00 90 CD |  if_b	jmp	#LR__0594
0708c                 | LR__0593
0708c     B9 01 00 FF 
07090     AC 14 06 F6 | 	mov	arg02, ##@LR__5859
07094     17 13 02 F6 | 	mov	arg01, local05
07098     28 00 B2 FD | 	call	#__system___string_cmp
0709c     00 FA 0D F2 | 	cmp	result1, #0 wz
070a0     00 FA 05 56 |  if_ne	mov	result1, #0
070a4     0C 00 90 5D |  if_ne	jmp	#LR__0596
070a8                 | LR__0594
070a8     01 2A 06 F1 | 	add	local03, #1
070ac     90 FF 9F FD | 	jmp	#LR__0592
070b0                 | LR__0595
070b0                 | ' return true
070b0     01 FA 65 F6 | 	neg	result1, #1
070b4                 | LR__0596
070b4     A7 F0 03 F6 | 	mov	ptra, fp
070b8     B2 00 A0 FD | 	call	#popregs_
070bc                 | _isdec_ret
070bc     2D 00 64 FD | 	ret
070c0                 | 
070c0                 | ' 
070c0                 | ' ' Check if the part is a string.  
070c0                 | ' 
070c0                 | ' function isstring(s as string) as boolean
070c0                 | _isstring
070c0     01 4A 05 F6 | 	mov	COUNT_, #1
070c4     A8 00 A0 FD | 	call	#pushregs_
070c8                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
070c8     09 27 02 F6 | 	mov	local01, arg01
070cc     01 14 06 F6 | 	mov	arg02, #1
070d0     48 20 B2 FD | 	call	#__system__Left_S
070d4     FD 12 02 F6 | 	mov	arg01, result1
070d8     B9 01 00 FF 
070dc     AE 14 06 F6 | 	mov	arg02, ##@LR__5860
070e0     E0 FF B1 FD | 	call	#__system___string_cmp
070e4     00 FA 4D F2 | 	cmps	result1, #0 wz
070e8     28 00 90 5D |  if_ne	jmp	#LR__0600
070ec     13 13 02 F6 | 	mov	arg01, local01
070f0     01 14 06 F6 | 	mov	arg02, #1
070f4     AC 20 B2 FD | 	call	#__system__Right_S
070f8     FD 12 02 F6 | 	mov	arg01, result1
070fc     B9 01 00 FF 
07100     B0 14 06 F6 | 	mov	arg02, ##@LR__5861
07104     BC FF B1 FD | 	call	#__system___string_cmp
07108     00 FA 4D F2 | 	cmps	result1, #0 wz
0710c     01 FA 65 A6 |  if_e	neg	result1, #1
07110     04 00 90 AD |  if_e	jmp	#LR__0601
07114                 | LR__0600
07114     00 FA 05 F6 | 	mov	result1, #0
07118                 | LR__0601
07118     A7 F0 03 F6 | 	mov	ptra, fp
0711c     B2 00 A0 FD | 	call	#popregs_
07120                 | _isstring_ret
07120     2D 00 64 FD | 	ret
07124                 | 
07124                 | ' 
07124                 | ' ' getnoteval. Returns the frequency of note token
07124                 | ' 
07124                 | ' function getnoteval(token) as single
07124                 | _getnoteval
07124     02 4A 05 F6 | 	mov	COUNT_, #2
07128     A8 00 A0 FD | 	call	#pushregs_
0712c     01 00 00 FF 
07130     00 13 86 F1 | 	sub	arg01, ##768
07134     09 15 52 F6 | 	abs	arg02, arg01 wc
07138     0C 14 16 FD | 	qdiv	arg02, #12
0713c     14 00 00 FF 
07140     D8 E4 05 F1 | 	add	objptr, ##10456
07144     19 14 62 FD | 	getqy	arg02
07148     0A 15 82 F6 | 	negc	arg02, arg02
0714c     02 14 66 F0 | 	shl	arg02, #2
07150     F2 14 02 F1 | 	add	arg02, objptr
07154     0A 27 02 FB | 	rdlong	local01, arg02
07158     09 15 52 F6 | 	abs	arg02, arg01 wc
0715c     0C 14 16 FD | 	qdiv	arg02, #12
07160     14 00 00 FF 
07164     D8 E4 85 F1 | 	sub	objptr, ##10456
07168     01 12 06 F6 | 	mov	arg01, #1
0716c                 | ' noteexp=1+(note/12) 
0716c                 | ' return (2.0^noteexp)*notebase
0716c     18 14 62 FD | 	getqx	arg02
07170     0A 13 82 F3 | 	sumc	arg01, arg02
07174     09 13 52 F6 | 	abs	arg01, arg01 wc
07178     1F 28 C6 C9 |  if_b	decod	local02, #31
0717c     00 28 06 36 |  if_ae	mov	local02, #0
07180     90 29 B2 FD | 	call	#__system___float_fromuns
07184     14 FB 61 F5 | 	xor	result1, local02
07188     FD 14 02 F6 | 	mov	arg02, result1
0718c     1E 12 C6 F9 | 	decod	arg01, #30
07190     8C 3C B2 FD | 	call	#__system____builtin_powf
07194     FD 12 02 F6 | 	mov	arg01, result1
07198     13 15 02 F6 | 	mov	arg02, local01
0719c     78 2D B2 FD | 	call	#__system___float_mul
071a0     A7 F0 03 F6 | 	mov	ptra, fp
071a4     B2 00 A0 FD | 	call	#popregs_
071a8                 | _getnoteval_ret
071a8     2D 00 64 FD | 	ret
071ac                 | 
071ac                 | ' 
071ac                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
071ac                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
071ac                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
071ac                 | ' 
071ac                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
071ac                 | ' '
071ac                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
071ac                 | ' '
071ac                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
071ac                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
071ac                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
071ac                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
071ac                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
071ac                 | ' ' 
071ac                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
071ac                 | ' 
071ac                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
071ac                 | ' ' Helper functions to manage program lines
071ac                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
071ac                 | ' 
071ac                 | ' '----- delete a line from a program
071ac                 | ' 
071ac                 | ' function deleteline(aline as ulong) as integer
071ac                 | _deleteline
071ac     02 4A 05 F6 | 	mov	COUNT_, #2
071b0     A8 00 A0 FD | 	call	#pushregs_
071b4     2C F0 07 F1 | 	add	ptra, #44
071b8     04 4E 05 F1 | 	add	fp, #4
071bc     A7 12 62 FC | 	wrlong	arg01, fp
071c0     4A 00 00 FF 
071c4     88 E4 05 F1 | 	add	objptr, ##38024
071c8     F2 26 02 FB | 	rdlong	local01, objptr
071cc     0C 4E 05 F1 | 	add	fp, #12
071d0     A7 26 62 FC | 	wrlong	local01, fp
071d4     10 4E 85 F1 | 	sub	fp, #16
071d8                 | ' 
071d8                 | ' searchptr=programstart
071d8                 | ' do
071d8     3E 00 00 FF 
071dc     BC E5 85 F1 | 	sub	objptr, ##32188
071e0                 | LR__0610
071e0     14 4E 05 F1 | 	add	fp, #20
071e4     A7 12 02 F6 | 	mov	arg01, fp
071e8     04 4E 85 F1 | 	sub	fp, #4
071ec     A7 14 02 FB | 	rdlong	arg02, fp
071f0     10 4E 85 F1 | 	sub	fp, #16
071f4     18 16 06 F6 | 	mov	arg03, #24
071f8     A8 F1 B1 FD | 	call	#_psram_spin2_read1
071fc     10 4E 05 F1 | 	add	fp, #16
07200     A7 26 02 FB | 	rdlong	local01, fp
07204     08 4E 85 F1 | 	sub	fp, #8
07208     A7 26 62 FC | 	wrlong	local01, fp
0720c     20 4E 05 F1 | 	add	fp, #32
07210     A7 26 02 FB | 	rdlong	local01, fp
07214     18 4E 85 F1 | 	sub	fp, #24
07218     A7 26 62 FC | 	wrlong	local01, fp
0721c     04 4E 05 F1 | 	add	fp, #4
07220     A7 26 02 FB | 	rdlong	local01, fp
07224     10 4E 85 F1 | 	sub	fp, #16
07228     A7 16 02 FB | 	rdlong	arg03, fp
0722c     04 4E 85 F1 | 	sub	fp, #4
07230     0B 27 12 F2 | 	cmp	local01, arg03 wc
07234     28 4E 05 C1 |  if_b	add	fp, #40
07238     A7 28 02 CB |  if_b	rdlong	local02, fp
0723c     28 4E 85 C1 |  if_b	sub	fp, #40
07240     FF FF 3F CF 
07244     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07248     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0610
0724c     0B 00 00 FF 
07250     CC E4 85 F1 | 	sub	objptr, ##5836
07254                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
07254     14 4E 05 F1 | 	add	fp, #20
07258     A7 26 02 FB | 	rdlong	local01, fp
0725c     10 4E 85 F1 | 	sub	fp, #16
07260     A7 28 02 FB | 	rdlong	local02, fp
07264     04 4E 85 F1 | 	sub	fp, #4
07268     14 27 0A F2 | 	cmp	local01, local02 wz
0726c     01 FA 65 56 |  if_ne	neg	result1, #1
07270     34 02 90 5D |  if_ne	jmp	#LR__0615
07274     08 4E 05 F1 | 	add	fp, #8
07278     A7 12 02 FB | 	rdlong	arg01, fp
0727c     08 4E 85 F1 | 	sub	fp, #8
07280     01 14 66 F6 | 	neg	arg02, #1
07284     04 C5 B1 FD | 	call	#_pslpoke
07288                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
07288                 | ' 
07288                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
07288     28 4E 05 F1 | 	add	fp, #40
0728c     A7 26 02 FB | 	rdlong	local01, fp
07290     28 4E 85 F1 | 	sub	fp, #40
07294     FF FF 3F FF 
07298     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
0729c     24 4E 05 A1 |  if_e	add	fp, #36
072a0     A7 28 02 AB |  if_e	rdlong	local02, fp
072a4     24 4E 85 A1 |  if_e	sub	fp, #36
072a8     FF FF 7F AF 
072ac     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
072b0     88 00 90 5D |  if_ne	jmp	#LR__0611
072b4     4A 00 00 FF 
072b8     88 E4 05 F1 | 	add	objptr, ##38024
072bc     00 04 80 FF 
072c0     F2 00 68 FC | 	wrlong	##524288, objptr
072c4     07 00 00 FF 
072c8     2C E4 85 F1 | 	sub	objptr, ##3628
072cc     00 04 80 FF 
072d0     F2 00 68 FC | 	wrlong	##524288, objptr
072d4     07 00 00 FF 
072d8     30 E4 05 F1 | 	add	objptr, ##3632
072dc     F2 00 68 FC | 	wrlong	#0, objptr
072e0     04 E4 05 F1 | 	add	objptr, #4
072e4     FF FF FF FF 
072e8     F2 FE 6B FC | 	wrlong	##-1, objptr
072ec     4A 00 00 FF 
072f0     90 E4 85 F1 | 	sub	objptr, ##38032
072f4     00 12 06 F6 | 	mov	arg01, #0
072f8     01 14 66 F6 | 	neg	arg02, #1
072fc     8C C4 B1 FD | 	call	#_pslpoke
07300     10 12 06 F6 | 	mov	arg01, #16
07304     01 14 66 F6 | 	neg	arg02, #1
07308     80 C4 B1 FD | 	call	#_pslpoke
0730c     14 12 06 F6 | 	mov	arg01, #20
07310     1E 14 CE F9 | 	bmask	arg02, #30
07314     74 C4 B1 FD | 	call	#_pslpoke
07318     50 00 00 FF 
0731c     B8 E4 05 F1 | 	add	objptr, ##41144
07320     00 04 80 FF 
07324     F2 00 68 FC | 	wrlong	##524288, objptr
07328     04 E4 05 F1 | 	add	objptr, #4
0732c     00 04 80 FF 
07330     F2 00 68 FC | 	wrlong	##524288, objptr
07334     50 00 00 FF 
07338     BC E4 85 F1 | 	sub	objptr, ##41148
0733c                 | LR__0611
0733c                 | ' 
0733c                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
0733c     28 4E 05 F1 | 	add	fp, #40
07340     A7 26 02 FB | 	rdlong	local01, fp
07344     28 4E 85 F1 | 	sub	fp, #40
07348     FF FF 3F FF 
0734c     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07350     74 00 90 5D |  if_ne	jmp	#LR__0612
07354     24 4E 05 F1 | 	add	fp, #36
07358     A7 28 02 FB | 	rdlong	local02, fp
0735c     24 4E 85 F1 | 	sub	fp, #36
07360     FF FF 7F FF 
07364     FF 29 0E F2 | 	cmp	local02, ##-1 wz
07368     5C 00 90 AD |  if_e	jmp	#LR__0612
0736c     24 4E 05 F1 | 	add	fp, #36
07370     A7 12 02 FB | 	rdlong	arg01, fp
07374     24 4E 85 F1 | 	sub	fp, #36
07378     14 12 06 F1 | 	add	arg01, #20
0737c     1E 14 CE F9 | 	bmask	arg02, #30
07380     08 C4 B1 FD | 	call	#_pslpoke
07384     24 4E 05 F1 | 	add	fp, #36
07388     A7 26 02 FB | 	rdlong	local01, fp
0738c     4A 00 00 FF 
07390     90 E4 05 F1 | 	add	objptr, ##38032
07394     F2 26 62 FC | 	wrlong	local01, objptr
07398     4A 00 00 FF 
0739c     90 E4 85 F1 | 	sub	objptr, ##38032
073a0     A7 12 02 FB | 	rdlong	arg01, fp
073a4     24 4E 85 F1 | 	sub	fp, #36
073a8     10 C5 B1 FD | 	call	#_pslpeek
073ac     4A 00 00 FF 
073b0     8C E4 05 F1 | 	add	objptr, ##38028
073b4     F2 FA 61 FC | 	wrlong	result1, objptr
073b8     4A 00 00 FF 
073bc     8C E4 85 F1 | 	sub	objptr, ##38028
073c0                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
073c0                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
073c0                 | '   lastline=pslpeek(header(4))
073c0                 | '   return 0
073c0     00 FA 05 F6 | 	mov	result1, #0
073c4     E0 00 90 FD | 	jmp	#LR__0615
073c8                 | LR__0612
073c8                 | ' 
073c8                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
073c8     28 4E 05 F1 | 	add	fp, #40
073cc     A7 26 02 FB | 	rdlong	local01, fp
073d0     28 4E 85 F1 | 	sub	fp, #40
073d4     FF FF 3F FF 
073d8     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
073dc     58 00 90 AD |  if_e	jmp	#LR__0613
073e0     24 4E 05 F1 | 	add	fp, #36
073e4     A7 28 02 FB | 	rdlong	local02, fp
073e8     24 4E 85 F1 | 	sub	fp, #36
073ec     FF FF 7F FF 
073f0     FF 29 0E F2 | 	cmp	local02, ##-1 wz
073f4     40 00 90 5D |  if_ne	jmp	#LR__0613
073f8     28 4E 05 F1 | 	add	fp, #40
073fc     A7 12 02 FB | 	rdlong	arg01, fp
07400     28 4E 85 F1 | 	sub	fp, #40
07404     10 12 06 F1 | 	add	arg01, #16
07408     01 14 66 F6 | 	neg	arg02, #1
0740c     7C C3 B1 FD | 	call	#_pslpoke
07410     28 4E 05 F1 | 	add	fp, #40
07414     A7 26 02 FB | 	rdlong	local01, fp
07418     28 4E 85 F1 | 	sub	fp, #40
0741c     4A 00 00 FF 
07420     88 E4 05 F1 | 	add	objptr, ##38024
07424     F2 26 62 FC | 	wrlong	local01, objptr
07428     4A 00 00 FF 
0742c     88 E4 85 F1 | 	sub	objptr, ##38024
07430                 | ' '   print "deleted first line"
07430                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
07430                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
07430                 | '   return 0
07430     00 FA 05 F6 | 	mov	result1, #0
07434     70 00 90 FD | 	jmp	#LR__0615
07438                 | LR__0613
07438                 | ' 
07438                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
07438     28 4E 05 F1 | 	add	fp, #40
0743c     A7 26 02 FB | 	rdlong	local01, fp
07440     28 4E 85 F1 | 	sub	fp, #40
07444     FF FF 3F FF 
07448     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
0744c     24 4E 05 51 |  if_ne	add	fp, #36
07450     A7 28 02 5B |  if_ne	rdlong	local02, fp
07454     24 4E 85 51 |  if_ne	sub	fp, #36
07458     FF FF 7F 5F 
0745c     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
07460     40 00 90 AD |  if_e	jmp	#LR__0614
07464     28 4E 05 F1 | 	add	fp, #40
07468     A7 12 02 FB | 	rdlong	arg01, fp
0746c     10 12 06 F1 | 	add	arg01, #16
07470     04 4E 85 F1 | 	sub	fp, #4
07474     A7 14 02 FB | 	rdlong	arg02, fp
07478     24 4E 85 F1 | 	sub	fp, #36
0747c     0C C3 B1 FD | 	call	#_pslpoke
07480     24 4E 05 F1 | 	add	fp, #36
07484     A7 12 02 FB | 	rdlong	arg01, fp
07488     14 12 06 F1 | 	add	arg01, #20
0748c     04 4E 05 F1 | 	add	fp, #4
07490     A7 14 02 FB | 	rdlong	arg02, fp
07494     28 4E 85 F1 | 	sub	fp, #40
07498     F0 C2 B1 FD | 	call	#_pslpoke
0749c                 | '    pslpoke(header(5)+16,header(4))  
0749c                 | '    pslpoke(header(4)+20, header(5))
0749c                 | '    return 0
0749c     00 FA 05 F6 | 	mov	result1, #0
074a0     04 00 90 FD | 	jmp	#LR__0615
074a4                 | LR__0614
074a4     00 FA 05 F6 | 	mov	result1, #0
074a8                 | LR__0615
074a8     A7 F0 03 F6 | 	mov	ptra, fp
074ac     B2 00 A0 FD | 	call	#popregs_
074b0                 | _deleteline_ret
074b0     2D 00 64 FD | 	ret
074b4                 | 
074b4                 | ' 
074b4                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
074b4                 | ' 
074b4                 | ' sub save_line
074b4                 | _save_line
074b4     03 4A 05 F6 | 	mov	COUNT_, #3
074b8     A8 00 A0 FD | 	call	#pushregs_
074bc     4A 00 00 FF 
074c0     7C E4 05 F1 | 	add	objptr, ##38012
074c4     F2 16 02 FB | 	rdlong	arg03, objptr
074c8     01 16 06 F1 | 	add	arg03, #1
074cc     05 00 00 FF 
074d0     18 E4 85 F1 | 	sub	objptr, ##2584
074d4     F2 14 02 FB | 	rdlong	arg02, objptr
074d8     0B 15 02 FD | 	qmul	arg02, arg03
074dc     0E 00 00 FF 
074e0     44 E4 85 F1 | 	sub	objptr, ##7236
074e4     F2 12 02 FB | 	rdlong	arg01, objptr
074e8     37 00 00 FF 
074ec     20 E4 85 F1 | 	sub	objptr, ##28192
074f0     09 27 02 F6 | 	mov	local01, arg01
074f4     18 28 62 FD | 	getqx	local02
074f8     97 06 48 FB | 	callpa	#(@LR__0621-@LR__0620)>>2,fcache_load_ptr_
074fc                 | LR__0620
074fc     13 FB C9 FA | 	rdbyte	result1, local01 wz
07500     01 26 06 51 |  if_ne	add	local01, #1
07504     F4 FF 9F 5D |  if_ne	jmp	#LR__0620
07508                 | LR__0621
07508     09 27 82 F1 | 	sub	local01, arg01
0750c     03 26 CE F7 | 	test	local01, #3 wz
07510     02 26 46 50 |  if_ne	shr	local01, #2
07514     01 26 06 51 |  if_ne	add	local01, #1
07518     02 26 66 50 |  if_ne	shl	local01, #2
0751c     14 2B 02 F6 | 	mov	local03, local02
07520     13 2B 02 F1 | 	add	local03, local01
07524     43 00 00 FF 
07528     5C E4 05 F1 | 	add	objptr, ##34396
0752c     F2 16 02 FB | 	rdlong	arg03, objptr
07530     14 17 02 F1 | 	add	arg03, local02
07534     04 00 00 FF 
07538     28 E4 05 F1 | 	add	objptr, ##2088
0753c     F2 16 62 FC | 	wrlong	arg03, objptr
07540     04 E4 05 F1 | 	add	objptr, #4
07544     F2 26 62 FC | 	wrlong	local01, objptr
07548     0C E4 85 F1 | 	sub	objptr, #12
0754c     F2 12 02 F6 | 	mov	arg01, objptr
07550     04 00 00 FF 
07554     20 E4 85 F1 | 	sub	objptr, ##2080
07558     F2 14 02 FB | 	rdlong	arg02, objptr
0755c     14 17 02 F6 | 	mov	arg03, local02
07560     37 00 00 FF 
07564     90 E5 85 F1 | 	sub	objptr, ##28560
07568     D4 EE B1 FD | 	call	#_psram_spin2_write
0756c     2B 00 00 FF 
07570     54 E5 05 F1 | 	add	objptr, ##22356
07574     F2 12 02 FB | 	rdlong	arg01, objptr
07578     0C 00 00 FF 
0757c     3C E4 05 F1 | 	add	objptr, ##6204
07580     F2 14 02 FB | 	rdlong	arg02, objptr
07584     14 15 02 F1 | 	add	arg02, local02
07588     13 17 02 F6 | 	mov	arg03, local01
0758c     37 00 00 FF 
07590     90 E5 85 F1 | 	sub	objptr, ##28560
07594     A8 EE B1 FD | 	call	#_psram_spin2_write
07598     37 00 00 FF 
0759c     90 E5 05 F1 | 	add	objptr, ##28560
075a0     F2 26 02 FB | 	rdlong	local01, objptr
075a4     15 27 02 F1 | 	add	local01, local03
075a8     F2 26 62 FC | 	wrlong	local01, objptr
075ac     43 00 00 FF 
075b0     5C E4 85 F1 | 	sub	objptr, ##34396
075b4     A7 F0 03 F6 | 	mov	ptra, fp
075b8     B2 00 A0 FD | 	call	#popregs_
075bc                 | _save_line_ret
075bc     2D 00 64 FD | 	ret
075c0                 | 
075c0                 | ' 
075c0                 | ' '----- Insert a new line into the middle of the program
075c0                 | ' 
075c0                 | ' function insertline(aline as ulong) as integer
075c0                 | _insertline
075c0     02 4A 05 F6 | 	mov	COUNT_, #2
075c4     A8 00 A0 FD | 	call	#pushregs_
075c8     28 F0 07 F1 | 	add	ptra, #40
075cc     04 4E 05 F1 | 	add	fp, #4
075d0     A7 12 62 FC | 	wrlong	arg01, fp
075d4     4A 00 00 FF 
075d8     88 E4 05 F1 | 	add	objptr, ##38024
075dc     F2 26 02 FB | 	rdlong	local01, objptr
075e0     04 4E 05 F1 | 	add	fp, #4
075e4     A7 26 62 FC | 	wrlong	local01, fp
075e8     08 4E 85 F1 | 	sub	fp, #8
075ec                 | ' 
075ec                 | ' do
075ec     3E 00 00 FF 
075f0     BC E5 85 F1 | 	sub	objptr, ##32188
075f4                 | LR__0630
075f4     10 4E 05 F1 | 	add	fp, #16
075f8     A7 12 02 F6 | 	mov	arg01, fp
075fc     08 4E 85 F1 | 	sub	fp, #8
07600     A7 14 02 FB | 	rdlong	arg02, fp
07604     08 4E 85 F1 | 	sub	fp, #8
07608     18 16 06 F6 | 	mov	arg03, #24
0760c     94 ED B1 FD | 	call	#_psram_spin2_read1
07610     08 4E 05 F1 | 	add	fp, #8
07614     A7 26 02 FB | 	rdlong	local01, fp
07618     04 4E 05 F1 | 	add	fp, #4
0761c     A7 26 62 FC | 	wrlong	local01, fp
07620     18 4E 05 F1 | 	add	fp, #24
07624     A7 26 02 FB | 	rdlong	local01, fp
07628     1C 4E 85 F1 | 	sub	fp, #28
0762c     A7 26 62 FC | 	wrlong	local01, fp
07630     08 4E 05 F1 | 	add	fp, #8
07634     A7 26 02 FB | 	rdlong	local01, fp
07638     0C 4E 85 F1 | 	sub	fp, #12
0763c     A7 16 02 FB | 	rdlong	arg03, fp
07640     04 4E 85 F1 | 	sub	fp, #4
07644     0B 27 12 F2 | 	cmp	local01, arg03 wc
07648     24 4E 05 C1 |  if_b	add	fp, #36
0764c     A7 28 02 CB |  if_b	rdlong	local02, fp
07650     24 4E 85 C1 |  if_b	sub	fp, #36
07654     FF FF 3F CF 
07658     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
0765c     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0630
07660     0B 00 00 FF 
07664     CC E4 85 F1 | 	sub	objptr, ##5836
07668                 | ' 
07668                 | ' if header(0)=aline then return -1 				' delete it first
07668     10 4E 05 F1 | 	add	fp, #16
0766c     A7 26 02 FB | 	rdlong	local01, fp
07670     0C 4E 85 F1 | 	sub	fp, #12
07674     A7 28 02 FB | 	rdlong	local02, fp
07678     04 4E 85 F1 | 	sub	fp, #4
0767c     14 27 0A F2 | 	cmp	local01, local02 wz
07680     01 FA 65 A6 |  if_e	neg	result1, #1
07684     48 01 90 AD |  if_e	jmp	#LR__0633
07688                 | ' if header(0)<aline then return -2 				' end of program reached
07688     10 4E 05 F1 | 	add	fp, #16
0768c     A7 26 02 FB | 	rdlong	local01, fp
07690     0C 4E 85 F1 | 	sub	fp, #12
07694     A7 16 02 FB | 	rdlong	arg03, fp
07698     04 4E 85 F1 | 	sub	fp, #4
0769c     0B 27 12 F2 | 	cmp	local01, arg03 wc
076a0     02 FA 65 C6 |  if_b	neg	result1, #2
076a4     28 01 90 CD |  if_b	jmp	#LR__0633
076a8                 | ' 
076a8                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
076a8     20 4E 05 F1 | 	add	fp, #32
076ac     A7 26 02 FB | 	rdlong	local01, fp
076b0     20 4E 85 F1 | 	sub	fp, #32
076b4     FF FF 7F FF 
076b8     FF 27 0E F2 | 	cmp	local01, ##-1 wz
076bc     78 00 90 5D |  if_ne	jmp	#LR__0631
076c0     43 00 00 FF 
076c4     5C E4 05 F1 | 	add	objptr, ##34396
076c8     F2 26 02 FB | 	rdlong	local01, objptr
076cc     07 00 00 FF 
076d0     2C E4 05 F1 | 	add	objptr, ##3628
076d4     F2 26 62 FC | 	wrlong	local01, objptr
076d8     0C 4E 05 F1 | 	add	fp, #12
076dc     A7 12 02 FB | 	rdlong	arg01, fp
076e0     0C 4E 85 F1 | 	sub	fp, #12
076e4     10 12 06 F1 | 	add	arg01, #16
076e8     07 00 00 FF 
076ec     2C E4 85 F1 | 	sub	objptr, ##3628
076f0     F2 14 02 FB | 	rdlong	arg02, objptr
076f4     43 00 00 FF 
076f8     5C E4 85 F1 | 	sub	objptr, ##34396
076fc     8C C0 B1 FD | 	call	#_pslpoke
07700     47 00 00 FF 
07704     8C E4 05 F1 | 	add	objptr, ##36492
07708     FF FF FF FF 
0770c     F2 FE 6B FC | 	wrlong	##-1, objptr
07710     0C 4E 05 F1 | 	add	fp, #12
07714     A7 26 02 FB | 	rdlong	local01, fp
07718     0C 4E 85 F1 | 	sub	fp, #12
0771c     04 E4 05 F1 | 	add	objptr, #4
07720     F2 26 62 FC | 	wrlong	local01, objptr
07724     47 00 00 FF 
07728     90 E4 85 F1 | 	sub	objptr, ##36496
0772c     84 FD BF FD | 	call	#_save_line
07730                 | '   programstart=programptr
07730                 | '   pslpoke(lineptr2+16,programptr)
07730                 | '   ucompiledline(4)=$FFFF_FFFF
07730                 | '   ucompiledline(5)=lineptr2
07730                 | '   save_line
07730                 | '   return 0
07730     00 FA 05 F6 | 	mov	result1, #0
07734     98 00 90 FD | 	jmp	#LR__0633
07738                 | LR__0631
07738                 | ' 
07738                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
07738     20 4E 05 F1 | 	add	fp, #32
0773c     A7 26 02 FB | 	rdlong	local01, fp
07740     20 4E 85 F1 | 	sub	fp, #32
07744     FF FF 7F FF 
07748     FF 27 0E F2 | 	cmp	local01, ##-1 wz
0774c     7C 00 90 AD |  if_e	jmp	#LR__0632
07750     20 4E 05 F1 | 	add	fp, #32
07754     A7 26 02 FB | 	rdlong	local01, fp
07758     47 00 00 FF 
0775c     8C E4 05 F1 | 	add	objptr, ##36492
07760     F2 26 62 FC | 	wrlong	local01, objptr
07764     14 4E 85 F1 | 	sub	fp, #20
07768     A7 26 02 FB | 	rdlong	local01, fp
0776c     04 E4 05 F1 | 	add	objptr, #4
07770     F2 26 62 FC | 	wrlong	local01, objptr
07774     A7 12 02 FB | 	rdlong	arg01, fp
07778     0C 4E 85 F1 | 	sub	fp, #12
0777c     10 12 06 F1 | 	add	arg01, #16
07780     04 00 00 FF 
07784     34 E4 85 F1 | 	sub	objptr, ##2100
07788     F2 14 02 FB | 	rdlong	arg02, objptr
0778c     43 00 00 FF 
07790     5C E4 85 F1 | 	sub	objptr, ##34396
07794     F4 BF B1 FD | 	call	#_pslpoke
07798     20 4E 05 F1 | 	add	fp, #32
0779c     A7 12 02 FB | 	rdlong	arg01, fp
077a0     20 4E 85 F1 | 	sub	fp, #32
077a4     14 12 06 F1 | 	add	arg01, #20
077a8     43 00 00 FF 
077ac     5C E4 05 F1 | 	add	objptr, ##34396
077b0     F2 14 02 FB | 	rdlong	arg02, objptr
077b4     43 00 00 FF 
077b8     5C E4 85 F1 | 	sub	objptr, ##34396
077bc     CC BF B1 FD | 	call	#_pslpoke
077c0     F0 FC BF FD | 	call	#_save_line
077c4                 | '   ucompiledline(4)=header(4)
077c4                 | '   ucompiledline(5)=lineptr2
077c4                 | '   pslpoke(lineptr2+16,programptr)
077c4                 | '   pslpoke(header(4)+20,programptr)
077c4                 | '   save_line
077c4                 | '   return 0
077c4     00 FA 05 F6 | 	mov	result1, #0
077c8     04 00 90 FD | 	jmp	#LR__0633
077cc                 | LR__0632
077cc     00 FA 05 F6 | 	mov	result1, #0
077d0                 | LR__0633
077d0     A7 F0 03 F6 | 	mov	ptra, fp
077d4     B2 00 A0 FD | 	call	#popregs_
077d8                 | _insertline_ret
077d8     2D 00 64 FD | 	ret
077dc                 | 
077dc                 | ' 
077dc                 | ' '----- Adds a new line at the end of the program
077dc                 | ' 
077dc                 | ' sub add_line_at_end(aline) 
077dc                 | _add_line_at_end
077dc     4A 00 00 FF 
077e0     8C E4 05 F1 | 	add	objptr, ##38028
077e4     F2 12 62 FC | 	wrlong	arg01, objptr
077e8     04 E4 05 F1 | 	add	objptr, #4
077ec     F2 14 02 FB | 	rdlong	arg02, objptr
077f0     03 00 00 FF 
077f4     04 E4 85 F1 | 	sub	objptr, ##1540
077f8     F2 14 62 FC | 	wrlong	arg02, objptr
077fc     03 00 00 FF 
07800     04 E4 05 F1 | 	add	objptr, ##1540
07804     F2 12 02 FB | 	rdlong	arg01, objptr
07808     14 12 06 F1 | 	add	arg01, #20
0780c     07 00 00 FF 
07810     34 E4 85 F1 | 	sub	objptr, ##3636
07814     F2 14 02 FB | 	rdlong	arg02, objptr
07818     43 00 00 FF 
0781c     5C E4 85 F1 | 	sub	objptr, ##34396
07820     68 BF B1 FD | 	call	#_pslpoke
07824     43 00 00 FF 
07828     5C E4 05 F1 | 	add	objptr, ##34396
0782c     F2 14 02 FB | 	rdlong	arg02, objptr
07830     07 00 00 FF 
07834     34 E4 05 F1 | 	add	objptr, ##3636
07838     F2 14 62 FC | 	wrlong	arg02, objptr
0783c     03 00 00 FF 
07840     00 E4 85 F1 | 	sub	objptr, ##1536
07844     FF FF BF FF 
07848     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0784c                 | ' 
0784c                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
0784c                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
0784c     04 00 00 FF 
07850     34 E4 85 F1 | 	sub	objptr, ##2100
07854     F2 14 02 FB | 	rdlong	arg02, objptr
07858     43 00 00 FF 
0785c     5C E4 85 F1 | 	sub	objptr, ##34396
07860     00 04 00 FF 
07864     00 14 0E F2 | 	cmp	arg02, ##524288 wz
07868     47 00 00 AF 
0786c     8C E4 05 A1 |  if_e	add	objptr, ##36492
07870     FF FF FF AF 
07874     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
07878     47 00 00 AF 
0787c     8C E4 85 A1 |  if_e	sub	objptr, ##36492
07880     30 FC BF FD | 	call	#_save_line
07884     43 00 00 FF 
07888     5C E4 05 F1 | 	add	objptr, ##34396
0788c     F2 12 02 FB | 	rdlong	arg01, objptr
07890     43 00 00 FF 
07894     5C E4 85 F1 | 	sub	objptr, ##34396
07898     01 14 66 F6 | 	neg	arg02, #1
0789c     EC BE B1 FD | 	call	#_pslpoke
078a0                 | _add_line_at_end_ret
078a0     2D 00 64 FD | 	ret
078a4                 | 
078a4                 | ' 
078a4                 | ' '--------------------------------------------------------------------------------------------------------------------------
078a4                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
078a4                 | ' '--------------------------------------------------------------------------------------------------------------------------
078a4                 | ' 
078a4                 | ' '--------------------------------------------------------------------------------------------------------------------------
078a4                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
078a4                 | ' '--------------------------------------------------------------------------------------------------------------------------
078a4                 | ' 
078a4                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
078a4                 | ' 
078a4                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
078a4                 | _compile_immediate
078a4     0A 4A 05 F6 | 	mov	COUNT_, #10
078a8     A8 00 A0 FD | 	call	#pushregs_
078ac                 | _compile_immediate_enter
078ac     09 2D 02 F6 | 	mov	local04, arg01
078b0     0A 2F 02 F6 | 	mov	local05, arg02
078b4     00 30 06 F6 | 	mov	local06, #0
078b8     00 32 06 F6 | 	mov	local07, #0
078bc     00 34 06 F6 | 	mov	local08, #0
078c0                 | ' 
078c0                 | ' ' linetype=cont+1
078c0                 | ' ' 1 : this is the first part of the line that will continue
078c0                 | ' ' 2 - this is the continuation of the line
078c0                 | ' ' 3 - this is the last continued line
078c0                 | ' ' 4 - this is the one and only part
078c0                 | ' ' 5 - continued after if/else
078c0                 | ' 
078c0                 | ' err=0
078c0                 | ' cmd=0
078c0                 | ' vars=0
078c0                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
078c0     02 2C 0E F2 | 	cmp	local04, #2 wz
078c4     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
078c8     24 00 90 5D |  if_ne	jmp	#LR__0640
078cc     35 00 00 FF 
078d0     10 E4 05 F1 | 	add	objptr, ##27152
078d4     F2 32 02 FB | 	rdlong	local07, objptr
078d8     01 36 06 F6 | 	mov	local09, #1
078dc     02 00 00 FF 
078e0     34 E4 05 F1 | 	add	objptr, ##1076
078e4     F2 02 68 FC | 	wrlong	#1, objptr
078e8     37 00 00 FF 
078ec     44 E4 85 F1 | 	sub	objptr, ##28228
078f0                 | LR__0640
078f0                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
078f0     04 2C 0E F2 | 	cmp	local04, #4 wz
078f4     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
078f8     30 00 90 5D |  if_ne	jmp	#LR__0641
078fc     35 00 00 FF 
07900     18 E4 05 F1 | 	add	objptr, ##27160
07904     F2 32 02 FB | 	rdlong	local07, objptr
07908     02 36 06 F6 | 	mov	local09, #2
0790c     02 00 00 FF 
07910     2C E4 05 F1 | 	add	objptr, ##1068
07914     F2 04 68 FC | 	wrlong	#2, objptr
07918     13 00 00 FF 
0791c     38 E4 05 F1 | 	add	objptr, ##9784
07920     F2 04 68 FC | 	wrlong	#2, objptr
07924     4A 00 00 FF 
07928     7C E4 85 F1 | 	sub	objptr, ##38012
0792c                 | LR__0641
0792c                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
0792c     05 2C 0E F2 | 	cmp	local04, #5 wz
07930     40 00 90 5D |  if_ne	jmp	#LR__0642
07934     37 00 00 FF 
07938     44 E4 05 F1 | 	add	objptr, ##28228
0793c     F2 FC 01 FB | 	rdlong	result2, objptr
07940     FE 36 02 F6 | 	mov	local09, result2
07944     03 36 66 F0 | 	shl	local09, #3
07948     02 00 00 FF 
0794c     38 E4 85 F1 | 	sub	objptr, ##1080
07950     F2 36 02 F1 | 	add	local09, objptr
07954     04 36 06 F1 | 	add	local09, #4
07958     1B 33 02 FB | 	rdlong	local07, local09
0795c     01 FC 05 F1 | 	add	result2, #1
07960     02 00 00 FF 
07964     38 E4 05 F1 | 	add	objptr, ##1080
07968     F2 FC 61 FC | 	wrlong	result2, objptr
0796c     37 00 00 FF 
07970     44 E4 85 F1 | 	sub	objptr, ##28228
07974                 | LR__0642
07974                 | ' 
07974                 | ' 'print  "In compile_immediate cmd=:", cmd
07974                 | ' 451 select case cmd
07974     5C 32 0E F2 | 	cmp	local07, #92 wz
07978     D8 02 90 AD |  if_e	jmp	#LR__0643
0797c     B9 32 0E F2 | 	cmp	local07, #185 wz
07980     DC 02 90 AD |  if_e	jmp	#LR__0644
07984     47 32 0E F2 | 	cmp	local07, #71 wz
07988     E4 02 90 AD |  if_e	jmp	#LR__0645
0798c     59 32 0E F2 | 	cmp	local07, #89 wz
07990     EC 02 90 AD |  if_e	jmp	#LR__0646
07994     C3 32 0E F2 | 	cmp	local07, #195 wz
07998     F4 02 90 AD |  if_e	jmp	#LR__0647
0799c     45 32 0E F2 | 	cmp	local07, #69 wz
079a0     F8 02 90 AD |  if_e	jmp	#LR__0648
079a4     69 32 0E F2 | 	cmp	local07, #105 wz
079a8     00 03 90 AD |  if_e	jmp	#LR__0649
079ac     40 32 0E F2 | 	cmp	local07, #64 wz
079b0     F0 06 90 AD |  if_e	jmp	#LR__0724
079b4     B4 32 0E F2 | 	cmp	local07, #180 wz
079b8     FC 02 90 AD |  if_e	jmp	#LR__0650
079bc     49 32 0E F2 | 	cmp	local07, #73 wz
079c0     00 03 90 AD |  if_e	jmp	#LR__0651
079c4     C4 32 0E F2 | 	cmp	local07, #196 wz
079c8     04 03 90 AD |  if_e	jmp	#LR__0652
079cc     AE 32 0E F2 | 	cmp	local07, #174 wz
079d0     08 03 90 AD |  if_e	jmp	#LR__0653
079d4     B0 32 0E F2 | 	cmp	local07, #176 wz
079d8     0C 03 90 AD |  if_e	jmp	#LR__0654
079dc     AF 32 0E F2 | 	cmp	local07, #175 wz
079e0     10 03 90 AD |  if_e	jmp	#LR__0655
079e4     B1 32 0E F2 | 	cmp	local07, #177 wz
079e8     14 03 90 AD |  if_e	jmp	#LR__0656
079ec     CF 32 0E F2 | 	cmp	local07, #207 wz
079f0     18 03 90 AD |  if_e	jmp	#LR__0657
079f4     68 32 0E F2 | 	cmp	local07, #104 wz
079f8     1C 03 90 AD |  if_e	jmp	#LR__0658
079fc     B7 32 0E F2 | 	cmp	local07, #183 wz
07a00     A0 06 90 AD |  if_e	jmp	#LR__0724
07a04     74 32 0E F2 | 	cmp	local07, #116 wz
07a08     18 03 90 AD |  if_e	jmp	#LR__0659
07a0c     73 32 0E F2 | 	cmp	local07, #115 wz
07a10     20 03 90 AD |  if_e	jmp	#LR__0660
07a14     6C 32 0E F2 | 	cmp	local07, #108 wz
07a18     28 03 90 AD |  if_e	jmp	#LR__0661
07a1c     89 32 0E F2 | 	cmp	local07, #137 wz
07a20     80 06 90 AD |  if_e	jmp	#LR__0724
07a24     C2 32 0E F2 | 	cmp	local07, #194 wz
07a28     28 03 90 AD |  if_e	jmp	#LR__0662
07a2c     72 32 0E F2 | 	cmp	local07, #114 wz
07a30     2C 03 90 AD |  if_e	jmp	#LR__0663
07a34     5D 32 0E F2 | 	cmp	local07, #93 wz
07a38     30 03 90 AD |  if_e	jmp	#LR__0664
07a3c     96 32 0E F2 | 	cmp	local07, #150 wz
07a40     38 03 90 AD |  if_e	jmp	#LR__0665
07a44     43 32 0E F2 | 	cmp	local07, #67 wz
07a48     3C 03 90 AD |  if_e	jmp	#LR__0666
07a4c     5A 32 0E F2 | 	cmp	local07, #90 wz
07a50     44 03 90 AD |  if_e	jmp	#LR__0667
07a54     AB 32 0E F2 | 	cmp	local07, #171 wz
07a58     48 06 90 AD |  if_e	jmp	#LR__0724
07a5c     BD 32 0E F2 | 	cmp	local07, #189 wz
07a60     44 03 90 AD |  if_e	jmp	#LR__0668
07a64     BB 32 0E F2 | 	cmp	local07, #187 wz
07a68     4C 03 90 AD |  if_e	jmp	#LR__0669
07a6c     4E 32 0E F2 | 	cmp	local07, #78 wz
07a70     54 03 90 AD |  if_e	jmp	#LR__0670
07a74     A9 32 0E F2 | 	cmp	local07, #169 wz
07a78     6C 03 90 AD |  if_e	jmp	#LR__0672
07a7c     46 32 0E F2 | 	cmp	local07, #70 wz
07a80     84 03 90 AD |  if_e	jmp	#LR__0674
07a84     71 32 0E F2 | 	cmp	local07, #113 wz
07a88     8C 03 90 AD |  if_e	jmp	#LR__0675
07a8c     60 32 0E F2 | 	cmp	local07, #96 wz
07a90     90 03 90 AD |  if_e	jmp	#LR__0676
07a94     4A 32 0E F2 | 	cmp	local07, #74 wz
07a98     94 03 90 AD |  if_e	jmp	#LR__0677
07a9c     48 32 0E F2 | 	cmp	local07, #72 wz
07aa0     98 03 90 AD |  if_e	jmp	#LR__0678
07aa4     58 32 0E F2 | 	cmp	local07, #88 wz
07aa8     A0 03 90 AD |  if_e	jmp	#LR__0679
07aac     5F 32 0E F2 | 	cmp	local07, #95 wz
07ab0     A8 03 90 AD |  if_e	jmp	#LR__0680
07ab4     B5 32 0E F2 | 	cmp	local07, #181 wz
07ab8     AC 03 90 AD |  if_e	jmp	#LR__0681
07abc     8A 32 0E F2 | 	cmp	local07, #138 wz
07ac0     B4 03 90 AD |  if_e	jmp	#LR__0682
07ac4     4C 32 0E F2 | 	cmp	local07, #76 wz
07ac8     B8 03 90 AD |  if_e	jmp	#LR__0683
07acc     52 32 0E F2 | 	cmp	local07, #82 wz
07ad0     C0 03 90 AD |  if_e	jmp	#LR__0684
07ad4     97 32 0E F2 | 	cmp	local07, #151 wz
07ad8     C8 03 90 AD |  if_e	jmp	#LR__0685
07adc     C6 32 0E F2 | 	cmp	local07, #198 wz
07ae0     CC 03 90 AD |  if_e	jmp	#LR__0686
07ae4     61 32 0E F2 | 	cmp	local07, #97 wz
07ae8     D0 03 90 AD |  if_e	jmp	#LR__0687
07aec     63 32 0E F2 | 	cmp	local07, #99 wz
07af0     D4 03 90 AD |  if_e	jmp	#LR__0688
07af4     41 32 0E F2 | 	cmp	local07, #65 wz
07af8     A8 05 90 AD |  if_e	jmp	#LR__0724
07afc     4B 32 0E F2 | 	cmp	local07, #75 wz
07b00     D0 03 90 AD |  if_e	jmp	#LR__0689
07b04     C1 32 0E F2 | 	cmp	local07, #193 wz
07b08     D4 03 90 AD |  if_e	jmp	#LR__0690
07b0c     B3 32 0E F2 | 	cmp	local07, #179 wz
07b10     D8 03 90 AD |  if_e	jmp	#LR__0691
07b14     5E 32 0E F2 | 	cmp	local07, #94 wz
07b18     DC 03 90 AD |  if_e	jmp	#LR__0692
07b1c     7C 32 0E F2 | 	cmp	local07, #124 wz
07b20     E0 03 90 AD |  if_e	jmp	#LR__0693
07b24     7D 32 0E F2 | 	cmp	local07, #125 wz
07b28     E4 03 90 AD |  if_e	jmp	#LR__0694
07b2c     7E 32 0E F2 | 	cmp	local07, #126 wz
07b30     E8 03 90 AD |  if_e	jmp	#LR__0695
07b34     7F 32 0E F2 | 	cmp	local07, #127 wz
07b38     EC 03 90 AD |  if_e	jmp	#LR__0696
07b3c     80 32 0E F2 | 	cmp	local07, #128 wz
07b40     F0 03 90 AD |  if_e	jmp	#LR__0697
07b44     55 32 0E F2 | 	cmp	local07, #85 wz
07b48     F4 03 90 AD |  if_e	jmp	#LR__0698
07b4c     75 32 0E F2 | 	cmp	local07, #117 wz
07b50     F8 03 90 AD |  if_e	jmp	#LR__0699
07b54     42 32 0E F2 | 	cmp	local07, #66 wz
07b58     00 04 90 AD |  if_e	jmp	#LR__0700
07b5c     95 32 0E F2 | 	cmp	local07, #149 wz
07b60     08 04 90 AD |  if_e	jmp	#LR__0701
07b64     AC 32 0E F2 | 	cmp	local07, #172 wz
07b68     38 05 90 AD |  if_e	jmp	#LR__0724
07b6c     81 32 0E F2 | 	cmp	local07, #129 wz
07b70     04 04 90 AD |  if_e	jmp	#LR__0702
07b74     44 32 0E F2 | 	cmp	local07, #68 wz
07b78     08 04 90 AD |  if_e	jmp	#LR__0703
07b7c     BC 32 0E F2 | 	cmp	local07, #188 wz
07b80     0C 04 90 AD |  if_e	jmp	#LR__0704
07b84     88 32 0E F2 | 	cmp	local07, #136 wz
07b88     18 05 90 AD |  if_e	jmp	#LR__0724
07b8c     B6 32 0E F2 | 	cmp	local07, #182 wz
07b90     0C 04 90 AD |  if_e	jmp	#LR__0705
07b94     92 32 0E F2 | 	cmp	local07, #146 wz
07b98     14 04 90 AD |  if_e	jmp	#LR__0706
07b9c     BE 32 0E F2 | 	cmp	local07, #190 wz
07ba0     BC 05 90 AD |  if_e	jmp	#LR__0725
07ba4     C7 32 0E F2 | 	cmp	local07, #199 wz
07ba8     D4 32 0E 52 |  if_ne	cmp	local07, #212 wz
07bac     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
07bb0     F0 04 90 AD |  if_e	jmp	#LR__0724
07bb4     4D 32 0E F2 | 	cmp	local07, #77 wz
07bb8     00 04 90 AD |  if_e	jmp	#LR__0707
07bbc     51 32 0E F2 | 	cmp	local07, #81 wz
07bc0     08 04 90 AD |  if_e	jmp	#LR__0708
07bc4     D2 32 0E F2 | 	cmp	local07, #210 wz
07bc8     10 04 90 AD |  if_e	jmp	#LR__0709
07bcc     8E 32 0E F2 | 	cmp	local07, #142 wz
07bd0     18 04 90 AD |  if_e	jmp	#LR__0710
07bd4     90 32 0E F2 | 	cmp	local07, #144 wz
07bd8     1C 04 90 AD |  if_e	jmp	#LR__0711
07bdc     8D 32 0E F2 | 	cmp	local07, #141 wz
07be0     20 04 90 AD |  if_e	jmp	#LR__0712
07be4     8C 32 0E F2 | 	cmp	local07, #140 wz
07be8     24 04 90 AD |  if_e	jmp	#LR__0713
07bec     91 32 0E F2 | 	cmp	local07, #145 wz
07bf0     28 04 90 AD |  if_e	jmp	#LR__0714
07bf4     8B 32 0E F2 | 	cmp	local07, #139 wz
07bf8     2C 04 90 AD |  if_e	jmp	#LR__0715
07bfc     8F 32 0E F2 | 	cmp	local07, #143 wz
07c00     30 04 90 AD |  if_e	jmp	#LR__0716
07c04     B2 32 0E F2 | 	cmp	local07, #178 wz
07c08     34 04 90 AD |  if_e	jmp	#LR__0717
07c0c     6D 32 0E F2 | 	cmp	local07, #109 wz
07c10     3C 04 90 AD |  if_e	jmp	#LR__0718
07c14     70 32 0E F2 | 	cmp	local07, #112 wz
07c18     88 04 90 AD |  if_e	jmp	#LR__0724
07c1c     56 32 0E F2 | 	cmp	local07, #86 wz
07c20     38 04 90 AD |  if_e	jmp	#LR__0719
07c24     57 32 0E F2 | 	cmp	local07, #87 wz
07c28     78 04 90 AD |  if_e	jmp	#LR__0724
07c2c     79 32 0E F2 | 	cmp	local07, #121 wz
07c30     34 04 90 AD |  if_e	jmp	#LR__0720
07c34     77 32 0E F2 | 	cmp	local07, #119 wz
07c38     38 04 90 AD |  if_e	jmp	#LR__0721
07c3c     78 32 0E F2 | 	cmp	local07, #120 wz
07c40     3C 04 90 AD |  if_e	jmp	#LR__0722
07c44     01 00 00 FF 
07c48     04 32 0E F2 | 	cmp	local07, ##516 wz
07c4c     3C 04 90 AD |  if_e	jmp	#LR__0723
07c50     0C 05 90 FD | 	jmp	#LR__0725
07c54                 | LR__0643
07c54     58 0B B0 FD | 	call	#_compile_fun_2p
07c58     FD 30 02 F6 | 	mov	local06, result1
07c5c     44 04 90 FD | 	jmp	#LR__0724
07c60                 | LR__0644
07c60     1C 0E B0 FD | 	call	#_compile_fun_varp
07c64     FD 34 02 F6 | 	mov	local08, result1
07c68     FE 30 02 F6 | 	mov	local06, result2
07c6c     34 04 90 FD | 	jmp	#LR__0724
07c70                 | LR__0645
07c70     0C 0E B0 FD | 	call	#_compile_fun_varp
07c74     FD 34 02 F6 | 	mov	local08, result1
07c78     FE 30 02 F6 | 	mov	local06, result2
07c7c     24 04 90 FD | 	jmp	#LR__0724
07c80                 | LR__0646
07c80     FC 0D B0 FD | 	call	#_compile_fun_varp
07c84     FD 34 02 F6 | 	mov	local08, result1
07c88     FE 30 02 F6 | 	mov	local06, result2
07c8c     14 04 90 FD | 	jmp	#LR__0724
07c90                 | LR__0647
07c90                 | ' return expr()
07c90     58 42 B0 FD | 	call	#_expr
07c94     FD 30 02 F6 | 	mov	local06, result1
07c98     08 04 90 FD | 	jmp	#LR__0724
07c9c                 | LR__0648
07c9c     E0 0D B0 FD | 	call	#_compile_fun_varp
07ca0     FD 34 02 F6 | 	mov	local08, result1
07ca4     FE 30 02 F6 | 	mov	local06, result2
07ca8     F8 03 90 FD | 	jmp	#LR__0724
07cac                 | LR__0649
07cac                 | ' return expr()
07cac     3C 42 B0 FD | 	call	#_expr
07cb0     FD 30 02 F6 | 	mov	local06, result1
07cb4     EC 03 90 FD | 	jmp	#LR__0724
07cb8                 | LR__0650
07cb8                 | ' return expr()
07cb8     30 42 B0 FD | 	call	#_expr
07cbc     FD 30 02 F6 | 	mov	local06, result1
07cc0     E0 03 90 FD | 	jmp	#LR__0724
07cc4                 | LR__0651
07cc4                 | ' return expr()
07cc4     24 42 B0 FD | 	call	#_expr
07cc8     FD 30 02 F6 | 	mov	local06, result1
07ccc     D4 03 90 FD | 	jmp	#LR__0724
07cd0                 | LR__0652
07cd0     DC 0A B0 FD | 	call	#_compile_fun_2p
07cd4     FD 30 02 F6 | 	mov	local06, result1
07cd8     C8 03 90 FD | 	jmp	#LR__0724
07cdc                 | LR__0653
07cdc     D0 0A B0 FD | 	call	#_compile_fun_2p
07ce0     FD 30 02 F6 | 	mov	local06, result1
07ce4     BC 03 90 FD | 	jmp	#LR__0724
07ce8                 | LR__0654
07ce8     C4 0A B0 FD | 	call	#_compile_fun_2p
07cec     FD 30 02 F6 | 	mov	local06, result1
07cf0     B0 03 90 FD | 	jmp	#LR__0724
07cf4                 | LR__0655
07cf4     B8 0A B0 FD | 	call	#_compile_fun_2p
07cf8     FD 30 02 F6 | 	mov	local06, result1
07cfc     A4 03 90 FD | 	jmp	#LR__0724
07d00                 | LR__0656
07d00     AC 0A B0 FD | 	call	#_compile_fun_2p
07d04     FD 30 02 F6 | 	mov	local06, result1
07d08     98 03 90 FD | 	jmp	#LR__0724
07d0c                 | LR__0657
07d0c                 | ' return expr()
07d0c     DC 41 B0 FD | 	call	#_expr
07d10     FD 30 02 F6 | 	mov	local06, result1
07d14     8C 03 90 FD | 	jmp	#LR__0724
07d18                 | LR__0658
07d18                 | ' return expr()
07d18     D0 41 B0 FD | 	call	#_expr
07d1c     FD 30 02 F6 | 	mov	local06, result1
07d20     80 03 90 FD | 	jmp	#LR__0724
07d24                 | LR__0659
07d24     58 0D B0 FD | 	call	#_compile_fun_varp
07d28     FD 34 02 F6 | 	mov	local08, result1
07d2c     FE 30 02 F6 | 	mov	local06, result2
07d30     70 03 90 FD | 	jmp	#LR__0724
07d34                 | LR__0660
07d34     48 0D B0 FD | 	call	#_compile_fun_varp
07d38     FD 34 02 F6 | 	mov	local08, result1
07d3c     FE 30 02 F6 | 	mov	local06, result2
07d40     60 03 90 FD | 	jmp	#LR__0724
07d44                 | LR__0661
07d44     38 0D B0 FD | 	call	#_compile_fun_varp
07d48     FD 34 02 F6 | 	mov	local08, result1
07d4c     FE 30 02 F6 | 	mov	local06, result2
07d50     50 03 90 FD | 	jmp	#LR__0724
07d54                 | LR__0662
07d54                 | ' return expr()
07d54     94 41 B0 FD | 	call	#_expr
07d58     FD 30 02 F6 | 	mov	local06, result1
07d5c     44 03 90 FD | 	jmp	#LR__0724
07d60                 | LR__0663
07d60     40 22 B0 FD | 	call	#_compile_dim
07d64     FD 30 02 F6 | 	mov	local06, result1
07d68     F4 03 90 FD | 	jmp	#LR__0725
07d6c                 | LR__0664
07d6c     10 0D B0 FD | 	call	#_compile_fun_varp
07d70     FD 34 02 F6 | 	mov	local08, result1
07d74     FE 30 02 F6 | 	mov	local06, result2
07d78     28 03 90 FD | 	jmp	#LR__0724
07d7c                 | LR__0665
07d7c     30 0A B0 FD | 	call	#_compile_fun_2p
07d80     FD 30 02 F6 | 	mov	local06, result1
07d84     1C 03 90 FD | 	jmp	#LR__0724
07d88                 | LR__0666
07d88     F4 0C B0 FD | 	call	#_compile_fun_varp
07d8c     FD 34 02 F6 | 	mov	local08, result1
07d90     FE 30 02 F6 | 	mov	local06, result2
07d94     0C 03 90 FD | 	jmp	#LR__0724
07d98                 | LR__0667
07d98     17 13 02 F6 | 	mov	arg01, local05
07d9c     CC 20 B0 FD | 	call	#_compile_else
07da0     FD 30 02 F6 | 	mov	local06, result1
07da4     B8 03 90 FD | 	jmp	#LR__0725
07da8                 | LR__0668
07da8     D4 0C B0 FD | 	call	#_compile_fun_varp
07dac     FD 34 02 F6 | 	mov	local08, result1
07db0     FE 30 02 F6 | 	mov	local06, result2
07db4     EC 02 90 FD | 	jmp	#LR__0724
07db8                 | LR__0669
07db8     C4 0C B0 FD | 	call	#_compile_fun_varp
07dbc     FD 34 02 F6 | 	mov	local08, result1
07dc0     FE 30 02 F6 | 	mov	local06, result2
07dc4     DC 02 90 FD | 	jmp	#LR__0724
07dc8                 | LR__0670
07dc8     01 2E 16 F2 | 	cmp	local05, #1 wc
07dcc     08 00 90 CD |  if_b	jmp	#LR__0671
07dd0     6C 33 B0 FD | 	call	#_compile_goto
07dd4     88 03 90 FD | 	jmp	#LR__0725
07dd8                 | LR__0671
07dd8     19 12 06 F6 | 	mov	arg01, #25
07ddc     00 14 06 F6 | 	mov	arg02, #0
07de0     08 B8 B1 FD | 	call	#_printerror
07de4     78 03 90 FD | 	jmp	#LR__0725
07de8                 | LR__0672
07de8     01 2E 16 F2 | 	cmp	local05, #1 wc
07dec     08 00 90 CD |  if_b	jmp	#LR__0673
07df0     E8 32 B0 FD | 	call	#_compile_gosub
07df4     68 03 90 FD | 	jmp	#LR__0725
07df8                 | LR__0673
07df8     19 12 06 F6 | 	mov	arg01, #25
07dfc     00 14 06 F6 | 	mov	arg02, #0
07e00     E8 B7 B1 FD | 	call	#_printerror
07e04     58 03 90 FD | 	jmp	#LR__0725
07e08                 | LR__0674
07e08     74 0C B0 FD | 	call	#_compile_fun_varp
07e0c     FD 34 02 F6 | 	mov	local08, result1
07e10     FE 30 02 F6 | 	mov	local06, result2
07e14     8C 02 90 FD | 	jmp	#LR__0724
07e18                 | LR__0675
07e18     0C 0B B0 FD | 	call	#_compile_fun_4p
07e1c     FD 30 02 F6 | 	mov	local06, result1
07e20     80 02 90 FD | 	jmp	#LR__0724
07e24                 | LR__0676
07e24                 | ' return expr()
07e24     C4 40 B0 FD | 	call	#_expr
07e28     FD 30 02 F6 | 	mov	local06, result1
07e2c     74 02 90 FD | 	jmp	#LR__0724
07e30                 | LR__0677
07e30     44 28 B0 FD | 	call	#_compile_for
07e34     FD 30 02 F6 | 	mov	local06, result1
07e38     24 03 90 FD | 	jmp	#LR__0725
07e3c                 | LR__0678
07e3c     40 0C B0 FD | 	call	#_compile_fun_varp
07e40     FD 34 02 F6 | 	mov	local08, result1
07e44     FE 30 02 F6 | 	mov	local06, result2
07e48     58 02 90 FD | 	jmp	#LR__0724
07e4c                 | LR__0679
07e4c     17 13 02 F6 | 	mov	arg01, local05
07e50     90 1E B0 FD | 	call	#_compile_if
07e54     FD 30 02 F6 | 	mov	local06, result1
07e58     04 03 90 FD | 	jmp	#LR__0725
07e5c                 | LR__0680
07e5c                 | ' return expr()
07e5c     8C 40 B0 FD | 	call	#_expr
07e60     FD 30 02 F6 | 	mov	local06, result1
07e64     3C 02 90 FD | 	jmp	#LR__0724
07e68                 | LR__0681
07e68     E0 0D B0 FD | 	call	#_compile_input
07e6c     FD 34 02 F6 | 	mov	local08, result1
07e70     FE 30 02 F6 | 	mov	local06, result2
07e74     2C 02 90 FD | 	jmp	#LR__0724
07e78                 | LR__0682
07e78                 | ' return expr()
07e78     70 40 B0 FD | 	call	#_expr
07e7c     FD 30 02 F6 | 	mov	local06, result1
07e80     20 02 90 FD | 	jmp	#LR__0724
07e84                 | LR__0683
07e84     F8 0B B0 FD | 	call	#_compile_fun_varp
07e88     FD 34 02 F6 | 	mov	local08, result1
07e8c     FE 30 02 F6 | 	mov	local06, result2
07e90     10 02 90 FD | 	jmp	#LR__0724
07e94                 | LR__0684
07e94     E8 0B B0 FD | 	call	#_compile_fun_varp
07e98     FD 34 02 F6 | 	mov	local08, result1
07e9c     FE 30 02 F6 | 	mov	local06, result2
07ea0     00 02 90 FD | 	jmp	#LR__0724
07ea4                 | LR__0685
07ea4     08 09 B0 FD | 	call	#_compile_fun_2p
07ea8     FD 30 02 F6 | 	mov	local06, result1
07eac     F4 01 90 FD | 	jmp	#LR__0724
07eb0                 | LR__0686
07eb0                 | ' return expr()
07eb0     38 40 B0 FD | 	call	#_expr
07eb4     FD 30 02 F6 | 	mov	local06, result1
07eb8     E8 01 90 FD | 	jmp	#LR__0724
07ebc                 | LR__0687
07ebc                 | ' return expr()
07ebc     2C 40 B0 FD | 	call	#_expr
07ec0     FD 30 02 F6 | 	mov	local06, result1
07ec4     DC 01 90 FD | 	jmp	#LR__0724
07ec8                 | LR__0688
07ec8                 | ' return expr()
07ec8     20 40 B0 FD | 	call	#_expr
07ecc     FD 30 02 F6 | 	mov	local06, result1
07ed0     D0 01 90 FD | 	jmp	#LR__0724
07ed4                 | LR__0689
07ed4     6C 30 B0 FD | 	call	#_compile_next
07ed8     FD 30 02 F6 | 	mov	local06, result1
07edc     80 02 90 FD | 	jmp	#LR__0725
07ee0                 | LR__0690
07ee0     4C 36 B0 FD | 	call	#_compile_on
07ee4     FD 30 02 F6 | 	mov	local06, result1
07ee8     74 02 90 FD | 	jmp	#LR__0725
07eec                 | LR__0691
07eec     48 09 B0 FD | 	call	#_compile_fun_3p
07ef0     FD 30 02 F6 | 	mov	local06, result1
07ef4     AC 01 90 FD | 	jmp	#LR__0724
07ef8                 | LR__0692
07ef8                 | ' return expr()
07ef8     F0 3F B0 FD | 	call	#_expr
07efc     FD 30 02 F6 | 	mov	local06, result1
07f00     A0 01 90 FD | 	jmp	#LR__0724
07f04                 | LR__0693
07f04                 | ' return expr()
07f04     E4 3F B0 FD | 	call	#_expr
07f08     FD 30 02 F6 | 	mov	local06, result1
07f0c     94 01 90 FD | 	jmp	#LR__0724
07f10                 | LR__0694
07f10                 | ' return expr()
07f10     D8 3F B0 FD | 	call	#_expr
07f14     FD 30 02 F6 | 	mov	local06, result1
07f18     88 01 90 FD | 	jmp	#LR__0724
07f1c                 | LR__0695
07f1c                 | ' return expr()
07f1c     CC 3F B0 FD | 	call	#_expr
07f20     FD 30 02 F6 | 	mov	local06, result1
07f24     7C 01 90 FD | 	jmp	#LR__0724
07f28                 | LR__0696
07f28     FC 09 B0 FD | 	call	#_compile_fun_4p
07f2c     FD 30 02 F6 | 	mov	local06, result1
07f30     70 01 90 FD | 	jmp	#LR__0724
07f34                 | LR__0697
07f34                 | ' return expr()
07f34     B4 3F B0 FD | 	call	#_expr
07f38     FD 30 02 F6 | 	mov	local06, result1
07f3c     64 01 90 FD | 	jmp	#LR__0724
07f40                 | LR__0698
07f40     6C 08 B0 FD | 	call	#_compile_fun_2p
07f44     FD 30 02 F6 | 	mov	local06, result1
07f48     58 01 90 FD | 	jmp	#LR__0724
07f4c                 | LR__0699
07f4c     30 0B B0 FD | 	call	#_compile_fun_varp
07f50     FD 34 02 F6 | 	mov	local08, result1
07f54     FE 30 02 F6 | 	mov	local06, result2
07f58     48 01 90 FD | 	jmp	#LR__0724
07f5c                 | LR__0700
07f5c     20 0B B0 FD | 	call	#_compile_fun_varp
07f60     FD 34 02 F6 | 	mov	local08, result1
07f64     FE 30 02 F6 | 	mov	local06, result2
07f68     38 01 90 FD | 	jmp	#LR__0724
07f6c                 | LR__0701
07f6c     40 08 B0 FD | 	call	#_compile_fun_2p
07f70     FD 30 02 F6 | 	mov	local06, result1
07f74     2C 01 90 FD | 	jmp	#LR__0724
07f78                 | LR__0702
07f78     34 08 B0 FD | 	call	#_compile_fun_2p
07f7c     FD 30 02 F6 | 	mov	local06, result1
07f80     20 01 90 FD | 	jmp	#LR__0724
07f84                 | LR__0703
07f84     84 16 B0 FD | 	call	#_compile_print
07f88     FD 30 02 F6 | 	mov	local06, result1
07f8c     D0 01 90 FD | 	jmp	#LR__0725
07f90                 | LR__0704
07f90     EC 0A B0 FD | 	call	#_compile_fun_varp
07f94     FD 34 02 F6 | 	mov	local08, result1
07f98     FE 30 02 F6 | 	mov	local06, result2
07f9c     04 01 90 FD | 	jmp	#LR__0724
07fa0                 | LR__0705
07fa0     B8 0B B0 FD | 	call	#_compile_read
07fa4     FD 34 02 F6 | 	mov	local08, result1
07fa8     FE 30 02 F6 | 	mov	local06, result2
07fac     F4 00 90 FD | 	jmp	#LR__0724
07fb0                 | LR__0706
07fb0                 | ' return expr()
07fb0     38 3F B0 FD | 	call	#_expr
07fb4     FD 30 02 F6 | 	mov	local06, result1
07fb8     E8 00 90 FD | 	jmp	#LR__0724
07fbc                 | LR__0707
07fbc     C0 0A B0 FD | 	call	#_compile_fun_varp
07fc0     FD 34 02 F6 | 	mov	local08, result1
07fc4     FE 30 02 F6 | 	mov	local06, result2
07fc8     D8 00 90 FD | 	jmp	#LR__0724
07fcc                 | LR__0708
07fcc     B0 0A B0 FD | 	call	#_compile_fun_varp
07fd0     FD 34 02 F6 | 	mov	local08, result1
07fd4     FE 30 02 F6 | 	mov	local06, result2
07fd8     C8 00 90 FD | 	jmp	#LR__0724
07fdc                 | LR__0709
07fdc     A0 0A B0 FD | 	call	#_compile_fun_varp
07fe0     FD 34 02 F6 | 	mov	local08, result1
07fe4     FE 30 02 F6 | 	mov	local06, result2
07fe8     B8 00 90 FD | 	jmp	#LR__0724
07fec                 | LR__0710
07fec     C0 07 B0 FD | 	call	#_compile_fun_2p
07ff0     FD 30 02 F6 | 	mov	local06, result1
07ff4     AC 00 90 FD | 	jmp	#LR__0724
07ff8                 | LR__0711
07ff8     B4 07 B0 FD | 	call	#_compile_fun_2p
07ffc     FD 30 02 F6 | 	mov	local06, result1
08000     A0 00 90 FD | 	jmp	#LR__0724
08004                 | LR__0712
08004     A8 07 B0 FD | 	call	#_compile_fun_2p
08008     FD 30 02 F6 | 	mov	local06, result1
0800c     94 00 90 FD | 	jmp	#LR__0724
08010                 | LR__0713
08010     9C 07 B0 FD | 	call	#_compile_fun_2p
08014     FD 30 02 F6 | 	mov	local06, result1
08018     88 00 90 FD | 	jmp	#LR__0724
0801c                 | LR__0714
0801c     90 07 B0 FD | 	call	#_compile_fun_2p
08020     FD 30 02 F6 | 	mov	local06, result1
08024     7C 00 90 FD | 	jmp	#LR__0724
08028                 | LR__0715
08028     84 07 B0 FD | 	call	#_compile_fun_2p
0802c     FD 30 02 F6 | 	mov	local06, result1
08030     70 00 90 FD | 	jmp	#LR__0724
08034                 | LR__0716
08034     78 07 B0 FD | 	call	#_compile_fun_2p
08038     FD 30 02 F6 | 	mov	local06, result1
0803c     64 00 90 FD | 	jmp	#LR__0724
08040                 | LR__0717
08040     3C 0A B0 FD | 	call	#_compile_fun_varp
08044     FD 34 02 F6 | 	mov	local08, result1
08048     FE 30 02 F6 | 	mov	local06, result2
0804c     54 00 90 FD | 	jmp	#LR__0724
08050                 | LR__0718
08050     E4 07 B0 FD | 	call	#_compile_fun_3p
08054     FD 30 02 F6 | 	mov	local06, result1
08058     48 00 90 FD | 	jmp	#LR__0724
0805c                 | LR__0719
0805c                 | ' return expr()
0805c     8C 3E B0 FD | 	call	#_expr
08060     FD 30 02 F6 | 	mov	local06, result1
08064     3C 00 90 FD | 	jmp	#LR__0724
08068                 | LR__0720
08068     44 07 B0 FD | 	call	#_compile_fun_2p
0806c     FD 30 02 F6 | 	mov	local06, result1
08070     30 00 90 FD | 	jmp	#LR__0724
08074                 | LR__0721
08074     38 07 B0 FD | 	call	#_compile_fun_2p
08078     FD 30 02 F6 | 	mov	local06, result1
0807c     24 00 90 FD | 	jmp	#LR__0724
08080                 | LR__0722
08080     2C 07 B0 FD | 	call	#_compile_fun_2p
08084     FD 30 02 F6 | 	mov	local06, result1
08088     18 00 90 FD | 	jmp	#LR__0724
0808c                 | LR__0723
0808c     1C 13 B0 FD | 	call	#_compile_array_assign
08090     FD 30 02 F6 | 	mov	local06, result1
08094     0E 30 0E F2 | 	cmp	local06, #14 wz
08098     C4 00 90 5D |  if_ne	jmp	#LR__0725
0809c                 | ' return 23
0809c     17 30 06 F6 | 	mov	local06, #23
080a0     BC 00 90 FD | 	jmp	#LR__0725
080a4                 | ' return 23
080a4                 | LR__0724
080a4     19 2B 02 F6 | 	mov	local03, local07
080a8     1A 27 02 F6 | 	mov	local01, local08
080ac     13 37 02 F6 | 	mov	local09, local01
080b0     14 39 02 F6 | 	mov	local10, local02
080b4     15 33 02 F6 | 	mov	local07, local03
080b8     4A 00 00 FF 
080bc     7C E4 05 F1 | 	add	objptr, ##38012
080c0     F2 26 02 FB | 	rdlong	local01, objptr
080c4     13 35 02 F6 | 	mov	local08, local01
080c8     01 34 66 F0 | 	shl	local08, #1
080cc     13 35 02 F1 | 	add	local08, local01
080d0     02 34 66 F0 | 	shl	local08, #2
080d4     03 00 00 FF 
080d8     00 E4 85 F1 | 	sub	objptr, ##1536
080dc     F2 34 02 F1 | 	add	local08, objptr
080e0     1A 37 62 FC | 	wrlong	local09, local08
080e4     03 00 00 FF 
080e8     00 E4 05 F1 | 	add	objptr, ##1536
080ec     F2 26 02 FB | 	rdlong	local01, objptr
080f0     13 37 02 F6 | 	mov	local09, local01
080f4     01 36 66 F0 | 	shl	local09, #1
080f8     13 37 02 F1 | 	add	local09, local01
080fc     02 36 66 F0 | 	shl	local09, #2
08100     03 00 00 FF 
08104     00 E4 85 F1 | 	sub	objptr, ##1536
08108     F2 36 02 F1 | 	add	local09, objptr
0810c     04 36 06 F1 | 	add	local09, #4
08110     1B 39 62 FC | 	wrlong	local10, local09
08114     03 00 00 FF 
08118     00 E4 05 F1 | 	add	objptr, ##1536
0811c     F2 26 02 FB | 	rdlong	local01, objptr
08120     13 39 02 F6 | 	mov	local10, local01
08124     01 38 66 F0 | 	shl	local10, #1
08128     13 39 02 F1 | 	add	local10, local01
0812c     02 38 66 F0 | 	shl	local10, #2
08130     03 00 00 FF 
08134     00 E4 85 F1 | 	sub	objptr, ##1536
08138     F2 38 02 F1 | 	add	local10, objptr
0813c     08 38 06 F1 | 	add	local10, #8
08140     1C 33 62 FC | 	wrlong	local07, local10
08144     03 00 00 FF 
08148     00 E4 05 F1 | 	add	objptr, ##1536
0814c     F2 36 02 FB | 	rdlong	local09, objptr
08150     01 36 06 F1 | 	add	local09, #1
08154     F2 36 62 FC | 	wrlong	local09, objptr
08158     4A 00 00 FF 
0815c     7C E4 85 F1 | 	sub	objptr, ##38012
08160                 | LR__0725
08160                 | ' 
08160                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
08160                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
08160     03 2C 0E F2 | 	cmp	local04, #3 wz
08164     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
08168     38 00 90 5D |  if_ne	jmp	#LR__0726
0816c     4A 00 00 FF 
08170     7C E4 05 F1 | 	add	objptr, ##38012
08174     F2 38 02 FB | 	rdlong	local10, objptr
08178     1C 27 02 F6 | 	mov	local01, local10
0817c     01 26 66 F0 | 	shl	local01, #1
08180     1C 27 02 F1 | 	add	local01, local10
08184     02 26 66 F0 | 	shl	local01, #2
08188     03 00 00 FF 
0818c     00 E4 85 F1 | 	sub	objptr, ##1536
08190     F2 26 02 F1 | 	add	local01, objptr
08194     08 26 06 F1 | 	add	local01, #8
08198     13 FD 6B FC | 	wrlong	#510, local01
0819c     47 00 00 FF 
081a0     7C E4 85 F1 | 	sub	objptr, ##36476
081a4                 | LR__0726
081a4                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
081a4                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
081a4     4A 00 00 FF 
081a8     7C E4 05 F1 | 	add	objptr, ##38012
081ac     F2 26 02 FB | 	rdlong	local01, objptr
081b0     4A 00 00 FF 
081b4     7C E4 85 F1 | 	sub	objptr, ##38012
081b8     97 58 48 FB | 	callpa	#(@LR__0729-@LR__0727)>>2,fcache_load_ptr_
081bc                 | LR__0727
081bc     13 39 02 F6 | 	mov	local10, local01
081c0     01 38 66 F0 | 	shl	local10, #1
081c4     13 39 02 F1 | 	add	local10, local01
081c8     02 38 66 F0 | 	shl	local10, #2
081cc     47 00 00 FF 
081d0     7C E4 05 F1 | 	add	objptr, ##36476
081d4     F2 38 02 F1 | 	add	local10, objptr
081d8     08 38 06 F1 | 	add	local10, #8
081dc     1C 39 02 FB | 	rdlong	local10, local10
081e0     9B 38 0E F2 | 	cmp	local10, #155 wz
081e4     47 00 00 FF 
081e8     7C E4 85 F1 | 	sub	objptr, ##36476
081ec     70 00 90 5D |  if_ne	jmp	#LR__0728
081f0     13 37 02 F6 | 	mov	local09, local01
081f4     01 36 86 F1 | 	sub	local09, #1
081f8     1B 39 02 F6 | 	mov	local10, local09
081fc     01 38 66 F0 | 	shl	local10, #1
08200     1B 39 02 F1 | 	add	local10, local09
08204     02 38 66 F0 | 	shl	local10, #2
08208     47 00 00 FF 
0820c     7C E4 05 F1 | 	add	objptr, ##36476
08210     F2 38 02 F1 | 	add	local10, objptr
08214     08 38 06 F1 | 	add	local10, #8
08218     1C 39 02 FB | 	rdlong	local10, local10
0821c     11 38 0E F2 | 	cmp	local10, #17 wz
08220     47 00 00 FF 
08224     7C E4 85 F1 | 	sub	objptr, ##36476
08228     34 00 90 5D |  if_ne	jmp	#LR__0728
0822c     13 37 02 F6 | 	mov	local09, local01
08230     01 36 86 F1 | 	sub	local09, #1
08234     1B 39 02 F6 | 	mov	local10, local09
08238     01 38 66 F0 | 	shl	local10, #1
0823c     1B 39 02 F1 | 	add	local10, local09
08240     02 38 66 F0 | 	shl	local10, #2
08244     47 00 00 FF 
08248     7C E4 05 F1 | 	add	objptr, ##36476
0824c     F2 38 02 F1 | 	add	local10, objptr
08250     08 38 06 F1 | 	add	local10, #8
08254     1C 25 68 FC | 	wrlong	#18, local10
08258     47 00 00 FF 
0825c     7C E4 85 F1 | 	sub	objptr, ##36476
08260                 | LR__0728
08260     01 26 86 F1 | 	sub	local01, #1
08264     01 26 56 F2 | 	cmps	local01, #1 wc
08268     50 FF 9F 3D |  if_ae	jmp	#LR__0727
0826c                 | LR__0729
0826c                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
0826c                 | ' return err
0826c     18 FB 01 F6 | 	mov	result1, local06
08270     A7 F0 03 F6 | 	mov	ptra, fp
08274     B2 00 A0 FD | 	call	#popregs_
08278                 | _compile_immediate_ret
08278     2D 00 64 FD | 	ret
0827c                 | 
0827c                 | ' 
0827c                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
0827c                 | ' 
0827c                 | ' function compile_immediate_assign(linetype as ulong) as ulong
0827c                 | _compile_immediate_assign
0827c     0C 4A 05 F6 | 	mov	COUNT_, #12
08280     A8 00 A0 FD | 	call	#pushregs_
08284     09 2D 02 F6 | 	mov	local04, arg01
08288     FF 2A 06 F6 | 	mov	local03, #255
0828c     01 2E 66 F6 | 	neg	local05, #1
08290     00 30 06 F6 | 	mov	local06, #0
08294                 | ' 
08294                 | ' t1.result_type=result_error : t1.result.uresult=0
08294                 | ' i=-1: j=-1 : err=0
08294                 | ' 
08294                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
08294     02 2C 0E F2 | 	cmp	local04, #2 wz
08298     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
0829c     35 00 00 AF 
082a0     0C E4 05 A1 |  if_e	add	objptr, ##27148
082a4     F2 32 02 AB |  if_e	rdlong	local07, objptr
082a8     02 00 00 AF 
082ac     38 E4 05 A1 |  if_e	add	objptr, ##1080
082b0     F2 04 68 AC |  if_e	wrlong	#2, objptr
082b4     37 00 00 AF 
082b8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
082bc                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
082bc     04 2C 0E F2 | 	cmp	local04, #4 wz
082c0     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
082c4     2C 00 90 5D |  if_ne	jmp	#LR__0730
082c8     35 00 00 FF 
082cc     14 E4 05 F1 | 	add	objptr, ##27156
082d0     F2 32 02 FB | 	rdlong	local07, objptr
082d4     02 00 00 FF 
082d8     30 E4 05 F1 | 	add	objptr, ##1072
082dc     F2 06 68 FC | 	wrlong	#3, objptr
082e0     13 00 00 FF 
082e4     38 E4 05 F1 | 	add	objptr, ##9784
082e8     F2 04 68 FC | 	wrlong	#2, objptr
082ec     4A 00 00 FF 
082f0     7C E4 85 F1 | 	sub	objptr, ##38012
082f4                 | LR__0730
082f4                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
082f4     05 2C 0E F2 | 	cmp	local04, #5 wz
082f8     3C 00 90 5D |  if_ne	jmp	#LR__0731
082fc     37 00 00 FF 
08300     44 E4 05 F1 | 	add	objptr, ##28228
08304     F2 FA 01 FB | 	rdlong	result1, objptr
08308     FD 32 02 F6 | 	mov	local07, result1
0830c     03 32 66 F0 | 	shl	local07, #3
08310     02 00 00 FF 
08314     38 E4 85 F1 | 	sub	objptr, ##1080
08318     F2 32 02 F1 | 	add	local07, objptr
0831c     19 33 02 FB | 	rdlong	local07, local07
08320     02 FA 05 F1 | 	add	result1, #2
08324     02 00 00 FF 
08328     38 E4 05 F1 | 	add	objptr, ##1080
0832c     F2 FA 61 FC | 	wrlong	result1, objptr
08330     37 00 00 FF 
08334     44 E4 85 F1 | 	sub	objptr, ##28228
08338                 | LR__0731
08338     19 13 02 F6 | 	mov	arg01, local07
0833c     01 14 06 F6 | 	mov	arg02, #1
08340     60 0E B2 FD | 	call	#__system__Right_S
08344     FD 34 02 F6 | 	mov	local08, result1
08348     A0 3B B0 FD | 	call	#_expr
0834c                 | ' 
0834c                 | ' suffix2$=right$(varname2$,1)
0834c                 | ' expr()
0834c                 | ' if varnum>0 then					' try to find a variable
0834c     35 00 00 FF 
08350     08 E4 05 F1 | 	add	objptr, ##27144
08354     F2 36 02 FB | 	rdlong	local09, objptr
08358     35 00 00 FF 
0835c     08 E4 85 F1 | 	sub	objptr, ##27144
08360     01 36 56 F2 | 	cmps	local09, #1 wc
08364     58 00 90 CD |  if_b	jmp	#LR__0734
08368                 | '   for i=0 to varnum-1
08368     00 38 06 F6 | 	mov	local10, #0
0836c     35 00 00 FF 
08370     08 E4 05 F1 | 	add	objptr, ##27144
08374     F2 3A 02 FB | 	rdlong	local11, objptr
08378     35 00 00 FF 
0837c     08 E4 85 F1 | 	sub	objptr, ##27144
08380                 | LR__0732
08380     1D 39 52 F2 | 	cmps	local10, local11 wc
08384     38 00 90 3D |  if_ae	jmp	#LR__0733
08388                 | '     if variables(i).name=varname2$ then j=i : exit
08388     1C 37 02 F6 | 	mov	local09, local10
0838c     04 36 66 F0 | 	shl	local09, #4
08390     14 00 00 FF 
08394     F8 E5 05 F1 | 	add	objptr, ##10744
08398     F2 36 02 F1 | 	add	local09, objptr
0839c     1B 13 02 FB | 	rdlong	arg01, local09
083a0     19 15 02 F6 | 	mov	arg02, local07
083a4     14 00 00 FF 
083a8     F8 E5 85 F1 | 	sub	objptr, ##10744
083ac     14 ED B1 FD | 	call	#__system___string_cmp
083b0     00 FA 0D F2 | 	cmp	result1, #0 wz
083b4     1C 2F 02 A6 |  if_e	mov	local05, local10
083b8     01 38 06 51 |  if_ne	add	local10, #1
083bc     C0 FF 9F 5D |  if_ne	jmp	#LR__0732
083c0                 | LR__0733
083c0                 | LR__0734
083c0                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
083c0     FF FF 7F FF 
083c4     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
083c8     60 00 90 5D |  if_ne	jmp	#LR__0735
083cc     35 00 00 FF 
083d0     08 E4 05 F1 | 	add	objptr, ##27144
083d4     F2 36 02 FB | 	rdlong	local09, objptr
083d8     35 00 00 FF 
083dc     08 E4 85 F1 | 	sub	objptr, ##27144
083e0     02 00 00 FF 
083e4     00 36 56 F2 | 	cmps	local09, ##1024 wc
083e8     40 00 90 3D |  if_ae	jmp	#LR__0735
083ec     35 00 00 FF 
083f0     08 E4 05 F1 | 	add	objptr, ##27144
083f4     F2 3A 02 FB | 	rdlong	local11, objptr
083f8     04 3A 66 F0 | 	shl	local11, #4
083fc     20 00 00 FF 
08400     10 E4 85 F1 | 	sub	objptr, ##16400
08404     F2 3A 02 F1 | 	add	local11, objptr
08408     1D 33 62 FC | 	wrlong	local07, local11
0840c     20 00 00 FF 
08410     10 E4 05 F1 | 	add	objptr, ##16400
08414     F2 36 02 FB | 	rdlong	local09, objptr
08418     1B 2F 02 F6 | 	mov	local05, local09
0841c     01 36 06 F1 | 	add	local09, #1
08420     F2 36 62 FC | 	wrlong	local09, objptr
08424     35 00 00 FF 
08428     08 E4 85 F1 | 	sub	objptr, ##27144
0842c                 | LR__0735
0842c                 | ' if varnum>=maxvars then
0842c     35 00 00 FF 
08430     08 E4 05 F1 | 	add	objptr, ##27144
08434     F2 36 02 FB | 	rdlong	local09, objptr
08438     35 00 00 FF 
0843c     08 E4 85 F1 | 	sub	objptr, ##27144
08440     02 00 00 FF 
08444     00 36 56 F2 | 	cmps	local09, ##1024 wc
08448     2D 30 06 36 |  if_ae	mov	local06, #45
0844c     C8 01 90 3D |  if_ae	jmp	#LR__0740
08450     17 27 02 F6 | 	mov	local01, local05
08454     17 2A 06 F6 | 	mov	local03, #23
08458     13 37 02 F6 | 	mov	local09, local01
0845c     14 3D 02 F6 | 	mov	local12, local02
08460     15 27 02 F6 | 	mov	local01, local03
08464     4A 00 00 FF 
08468     7C E4 05 F1 | 	add	objptr, ##38012
0846c     F2 3A 02 FB | 	rdlong	local11, objptr
08470     1D 39 02 F6 | 	mov	local10, local11
08474     01 38 66 F0 | 	shl	local10, #1
08478     1D 39 02 F1 | 	add	local10, local11
0847c     02 38 66 F0 | 	shl	local10, #2
08480     03 00 00 FF 
08484     00 E4 85 F1 | 	sub	objptr, ##1536
08488     F2 38 02 F1 | 	add	local10, objptr
0848c     1C 37 62 FC | 	wrlong	local09, local10
08490     03 00 00 FF 
08494     00 E4 05 F1 | 	add	objptr, ##1536
08498     F2 36 02 FB | 	rdlong	local09, objptr
0849c     1B 3B 02 F6 | 	mov	local11, local09
084a0     01 3A 66 F0 | 	shl	local11, #1
084a4     1B 3B 02 F1 | 	add	local11, local09
084a8     02 3A 66 F0 | 	shl	local11, #2
084ac     03 00 00 FF 
084b0     00 E4 85 F1 | 	sub	objptr, ##1536
084b4     F2 3A 02 F1 | 	add	local11, objptr
084b8     04 3A 06 F1 | 	add	local11, #4
084bc     1D 3D 62 FC | 	wrlong	local12, local11
084c0     03 00 00 FF 
084c4     00 E4 05 F1 | 	add	objptr, ##1536
084c8     F2 36 02 FB | 	rdlong	local09, objptr
084cc     1B 3D 02 F6 | 	mov	local12, local09
084d0     01 3C 66 F0 | 	shl	local12, #1
084d4     1B 3D 02 F1 | 	add	local12, local09
084d8     02 3C 66 F0 | 	shl	local12, #2
084dc     03 00 00 FF 
084e0     00 E4 85 F1 | 	sub	objptr, ##1536
084e4     F2 3C 02 F1 | 	add	local12, objptr
084e8     08 3C 06 F1 | 	add	local12, #8
084ec     1E 27 62 FC | 	wrlong	local01, local12
084f0     03 00 00 FF 
084f4     00 E4 05 F1 | 	add	objptr, ##1536
084f8     F2 36 02 FB | 	rdlong	local09, objptr
084fc     01 36 06 F1 | 	add	local09, #1
08500     F2 36 62 FC | 	wrlong	local09, objptr
08504     4A 00 00 FF 
08508     7C E4 85 F1 | 	sub	objptr, ##38012
0850c                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
0850c                 | '   compiledline(lineptr)=t1:  lineptr+=1 
0850c                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
0850c     03 2C 0E F2 | 	cmp	local04, #3 wz
08510     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
08514     38 00 90 5D |  if_ne	jmp	#LR__0736
08518     4A 00 00 FF 
0851c     7C E4 05 F1 | 	add	objptr, ##38012
08520     F2 3C 02 FB | 	rdlong	local12, objptr
08524     1E 27 02 F6 | 	mov	local01, local12
08528     01 26 66 F0 | 	shl	local01, #1
0852c     1E 27 02 F1 | 	add	local01, local12
08530     02 26 66 F0 | 	shl	local01, #2
08534     03 00 00 FF 
08538     00 E4 85 F1 | 	sub	objptr, ##1536
0853c     F2 26 02 F1 | 	add	local01, objptr
08540     08 26 06 F1 | 	add	local01, #8
08544     13 FD 6B FC | 	wrlong	#510, local01
08548     47 00 00 FF 
0854c     7C E4 85 F1 | 	sub	objptr, ##36476
08550                 | LR__0736
08550                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08550     4A 00 00 FF 
08554     7C E4 05 F1 | 	add	objptr, ##38012
08558     F2 38 02 FB | 	rdlong	local10, objptr
0855c     4A 00 00 FF 
08560     7C E4 85 F1 | 	sub	objptr, ##38012
08564     97 58 48 FB | 	callpa	#(@LR__0739-@LR__0737)>>2,fcache_load_ptr_
08568                 | LR__0737
08568     1C 3D 02 F6 | 	mov	local12, local10
0856c     01 3C 66 F0 | 	shl	local12, #1
08570     1C 3D 02 F1 | 	add	local12, local10
08574     02 3C 66 F0 | 	shl	local12, #2
08578     47 00 00 FF 
0857c     7C E4 05 F1 | 	add	objptr, ##36476
08580     F2 3C 02 F1 | 	add	local12, objptr
08584     08 3C 06 F1 | 	add	local12, #8
08588     1E 3D 02 FB | 	rdlong	local12, local12
0858c     9B 3C 0E F2 | 	cmp	local12, #155 wz
08590     47 00 00 FF 
08594     7C E4 85 F1 | 	sub	objptr, ##36476
08598     70 00 90 5D |  if_ne	jmp	#LR__0738
0859c     1C 3D 02 F6 | 	mov	local12, local10
085a0     01 3C 86 F1 | 	sub	local12, #1
085a4     1E 27 02 F6 | 	mov	local01, local12
085a8     01 26 66 F0 | 	shl	local01, #1
085ac     1E 27 02 F1 | 	add	local01, local12
085b0     02 26 66 F0 | 	shl	local01, #2
085b4     47 00 00 FF 
085b8     7C E4 05 F1 | 	add	objptr, ##36476
085bc     F2 26 02 F1 | 	add	local01, objptr
085c0     08 26 06 F1 | 	add	local01, #8
085c4     13 27 02 FB | 	rdlong	local01, local01
085c8     11 26 0E F2 | 	cmp	local01, #17 wz
085cc     47 00 00 FF 
085d0     7C E4 85 F1 | 	sub	objptr, ##36476
085d4     34 00 90 5D |  if_ne	jmp	#LR__0738
085d8     1C 3D 02 F6 | 	mov	local12, local10
085dc     01 3C 86 F1 | 	sub	local12, #1
085e0     1E 27 02 F6 | 	mov	local01, local12
085e4     01 26 66 F0 | 	shl	local01, #1
085e8     1E 27 02 F1 | 	add	local01, local12
085ec     02 26 66 F0 | 	shl	local01, #2
085f0     47 00 00 FF 
085f4     7C E4 05 F1 | 	add	objptr, ##36476
085f8     F2 26 02 F1 | 	add	local01, objptr
085fc     08 26 06 F1 | 	add	local01, #8
08600     13 25 68 FC | 	wrlong	#18, local01
08604     47 00 00 FF 
08608     7C E4 85 F1 | 	sub	objptr, ##36476
0860c                 | LR__0738
0860c     01 38 86 F1 | 	sub	local10, #1
08610     01 38 56 F2 | 	cmps	local10, #1 wc
08614     50 FF 9F 3D |  if_ae	jmp	#LR__0737
08618                 | LR__0739
08618                 | LR__0740
08618                 | ' return err
08618     18 FB 01 F6 | 	mov	result1, local06
0861c     A7 F0 03 F6 | 	mov	ptra, fp
08620     B2 00 A0 FD | 	call	#popregs_
08624                 | _compile_immediate_assign_ret
08624     2D 00 64 FD | 	ret
08628                 | 
08628                 | ' 
08628                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
08628                 | ' 
08628                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
08628                 | _compile
08628     03 4A 05 F6 | 	mov	COUNT_, #3
0862c     A8 00 A0 FD | 	call	#pushregs_
08630     09 27 02 F6 | 	mov	local01, arg01
08634     0B 29 02 F6 | 	mov	local02, arg03
08638     47 00 00 FF 
0863c     7C E4 05 F1 | 	add	objptr, ##36476
08640     F2 26 62 FC | 	wrlong	local01, objptr
08644     04 E4 05 F1 | 	add	objptr, #4
08648     F2 14 62 FC | 	wrlong	arg02, objptr
0864c     47 00 00 FF 
08650     80 E4 85 F1 | 	sub	objptr, ##36480
08654     14 13 02 F6 | 	mov	arg01, local02
08658     01 12 06 F1 | 	add	arg01, #1
0865c     13 15 02 F6 | 	mov	arg02, local01
08660     40 F2 BF FD | 	call	#_compile_immediate
08664     FD 2A 0A F6 | 	mov	local03, result1 wz
08668                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
08668                 | ' ucompiledline(0)=alinemajor
08668                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
08668                 | ' 
08668                 | ' ' cont: 
08668                 | ' ' 0 - this is the first part of the line that will continue
08668                 | ' ' 1 - this is the continuation of the line
08668                 | ' ' 2 - this is the last continued line
08668                 | ' ' 3 - this is the one and only part
08668                 | ' 
08668                 | ' err=compile_immediate(cont+1,alinemajor) 
08668                 | ' if err=0 andalso alinemajor>0 then
08668     74 00 90 5D |  if_ne	jmp	#LR__0755
0866c     01 26 16 F2 | 	cmp	local01, #1 wc
08670     6C 00 90 CD |  if_b	jmp	#LR__0755
08674                 | '   if cont=3 orelse cont=2 then 
08674     03 28 0E F2 | 	cmp	local02, #3 wz
08678     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
0867c     60 00 90 5D |  if_ne	jmp	#LR__0754
08680                 | '     if alinemajor >lastline then 
08680     4A 00 00 FF 
08684     8C E4 05 F1 | 	add	objptr, ##38028
08688     F2 14 02 FB | 	rdlong	arg02, objptr
0868c     4A 00 00 FF 
08690     8C E4 85 F1 | 	sub	objptr, ##38028
08694     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08698     0C 00 90 ED |  if_be	jmp	#LR__0750
0869c     13 13 02 F6 | 	mov	arg01, local01
086a0     38 F1 BF FD | 	call	#_add_line_at_end
086a4     38 00 90 FD | 	jmp	#LR__0753
086a8                 | LR__0750
086a8     13 13 02 F6 | 	mov	arg01, local01
086ac     FC EA BF FD | 	call	#_deleteline
086b0                 | '       deleteline(alinemajor)  
086b0                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
086b0     4A 00 00 FF 
086b4     8C E4 05 F1 | 	add	objptr, ##38028
086b8     F2 14 02 FB | 	rdlong	arg02, objptr
086bc     4A 00 00 FF 
086c0     8C E4 85 F1 | 	sub	objptr, ##38028
086c4     0A 27 1A F2 | 	cmp	local01, arg02 wcz
086c8     0C 00 90 ED |  if_be	jmp	#LR__0751
086cc     13 13 02 F6 | 	mov	arg01, local01
086d0     08 F1 BF FD | 	call	#_add_line_at_end
086d4     08 00 90 FD | 	jmp	#LR__0752
086d8                 | LR__0751
086d8     13 13 02 F6 | 	mov	arg01, local01
086dc     E0 EE BF FD | 	call	#_insertline
086e0                 | LR__0752
086e0                 | LR__0753
086e0                 | LR__0754
086e0                 | LR__0755
086e0                 | ' return err
086e0     15 FB 01 F6 | 	mov	result1, local03
086e4     A7 F0 03 F6 | 	mov	ptra, fp
086e8     B2 00 A0 FD | 	call	#popregs_
086ec                 | _compile_ret
086ec     2D 00 64 FD | 	ret
086f0                 | 
086f0                 | ' 
086f0                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
086f0                 | ' 
086f0                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
086f0                 | _compile_assign
086f0     03 4A 05 F6 | 	mov	COUNT_, #3
086f4     A8 00 A0 FD | 	call	#pushregs_
086f8     09 27 02 F6 | 	mov	local01, arg01
086fc     0B 29 02 F6 | 	mov	local02, arg03
08700     47 00 00 FF 
08704     7C E4 05 F1 | 	add	objptr, ##36476
08708     F2 26 62 FC | 	wrlong	local01, objptr
0870c     04 E4 05 F1 | 	add	objptr, #4
08710     F2 14 62 FC | 	wrlong	arg02, objptr
08714     47 00 00 FF 
08718     80 E4 85 F1 | 	sub	objptr, ##36480
0871c     14 13 02 F6 | 	mov	arg01, local02
08720     01 12 06 F1 | 	add	arg01, #1
08724     54 FB BF FD | 	call	#_compile_immediate_assign
08728     FD 2A 02 F6 | 	mov	local03, result1
0872c                 | ' 
0872c                 | ' ucompiledline(0)=alinemajor
0872c                 | ' ucompiledline(1)=alineminor
0872c                 | ' 
0872c                 | ' err=compile_immediate_assign(cont+1) 
0872c                 | ' if alinemajor>0 then
0872c     01 26 16 F2 | 	cmp	local01, #1 wc
08730     6C 00 90 CD |  if_b	jmp	#LR__0765
08734                 | '   if cont=3 orelse cont=2 then 
08734     03 28 0E F2 | 	cmp	local02, #3 wz
08738     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
0873c     60 00 90 5D |  if_ne	jmp	#LR__0764
08740                 | '     if alinemajor >lastline then 
08740     4A 00 00 FF 
08744     8C E4 05 F1 | 	add	objptr, ##38028
08748     F2 14 02 FB | 	rdlong	arg02, objptr
0874c     4A 00 00 FF 
08750     8C E4 85 F1 | 	sub	objptr, ##38028
08754     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08758     0C 00 90 ED |  if_be	jmp	#LR__0760
0875c     13 13 02 F6 | 	mov	arg01, local01
08760     78 F0 BF FD | 	call	#_add_line_at_end
08764     38 00 90 FD | 	jmp	#LR__0763
08768                 | LR__0760
08768     13 13 02 F6 | 	mov	arg01, local01
0876c     3C EA BF FD | 	call	#_deleteline
08770                 | '       deleteline(alinemajor)  
08770                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
08770     4A 00 00 FF 
08774     8C E4 05 F1 | 	add	objptr, ##38028
08778     F2 14 02 FB | 	rdlong	arg02, objptr
0877c     4A 00 00 FF 
08780     8C E4 85 F1 | 	sub	objptr, ##38028
08784     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08788     0C 00 90 ED |  if_be	jmp	#LR__0761
0878c     13 13 02 F6 | 	mov	arg01, local01
08790     48 F0 BF FD | 	call	#_add_line_at_end
08794     08 00 90 FD | 	jmp	#LR__0762
08798                 | LR__0761
08798     13 13 02 F6 | 	mov	arg01, local01
0879c     20 EE BF FD | 	call	#_insertline
087a0                 | LR__0762
087a0                 | LR__0763
087a0                 | LR__0764
087a0                 | LR__0765
087a0                 | ' return err
087a0     15 FB 01 F6 | 	mov	result1, local03
087a4     A7 F0 03 F6 | 	mov	ptra, fp
087a8     B2 00 A0 FD | 	call	#popregs_
087ac                 | _compile_assign_ret
087ac     2D 00 64 FD | 	ret
087b0                 | 
087b0                 | ' 
087b0                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
087b0                 | ' 
087b0                 | ' function compile_fun_2p() as ulong
087b0                 | _compile_fun_2p
087b0     01 4A 05 F6 | 	mov	COUNT_, #1
087b4     A8 00 A0 FD | 	call	#pushregs_
087b8     30 37 B0 FD | 	call	#_expr
087bc     FD 26 02 F6 | 	mov	local01, result1
087c0                 | ' err=expr() : if err>0 then return err
087c0     01 26 16 F2 | 	cmp	local01, #1 wc
087c4     13 FB 01 36 |  if_ae	mov	result1, local01
087c8     60 00 90 3D |  if_ae	jmp	#LR__0770
087cc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
087cc     37 00 00 FF 
087d0     44 E4 05 F1 | 	add	objptr, ##28228
087d4     F2 26 02 FB | 	rdlong	local01, objptr
087d8     03 26 66 F0 | 	shl	local01, #3
087dc     02 00 00 FF 
087e0     38 E4 85 F1 | 	sub	objptr, ##1080
087e4     F2 26 02 F1 | 	add	local01, objptr
087e8     04 26 06 F1 | 	add	local01, #4
087ec     13 27 02 FB | 	rdlong	local01, local01
087f0     11 26 0E F2 | 	cmp	local01, #17 wz
087f4     35 00 00 FF 
087f8     0C E4 85 F1 | 	sub	objptr, ##27148
087fc     15 FA 05 56 |  if_ne	mov	result1, #21
08800     28 00 90 5D |  if_ne	jmp	#LR__0770
08804     37 00 00 FF 
08808     44 E4 05 F1 | 	add	objptr, ##28228
0880c     F2 26 02 FB | 	rdlong	local01, objptr
08810     01 26 06 F1 | 	add	local01, #1
08814     F2 26 62 FC | 	wrlong	local01, objptr
08818     37 00 00 FF 
0881c     44 E4 85 F1 | 	sub	objptr, ##28228
08820     C8 36 B0 FD | 	call	#_expr
08824                 | ' err=expr() : if err>0 then return err
08824     01 FA 15 F2 | 	cmp	result1, #1 wc
08828                 | ' return 0
08828     00 FA 05 C6 |  if_b	mov	result1, #0
0882c                 | LR__0770
0882c     A7 F0 03 F6 | 	mov	ptra, fp
08830     B2 00 A0 FD | 	call	#popregs_
08834                 | _compile_fun_2p_ret
08834     2D 00 64 FD | 	ret
08838                 | 
08838                 | ' 
08838                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08838                 | ' 
08838                 | ' function compile_fun_3p() as ulong
08838                 | _compile_fun_3p
08838     01 4A 05 F6 | 	mov	COUNT_, #1
0883c     A8 00 A0 FD | 	call	#pushregs_
08840     A8 36 B0 FD | 	call	#_expr
08844     FD 26 02 F6 | 	mov	local01, result1
08848                 | ' err=expr() : if err>0 then return err
08848     01 26 16 F2 | 	cmp	local01, #1 wc
0884c     13 FB 01 36 |  if_ae	mov	result1, local01
08850     C8 00 90 3D |  if_ae	jmp	#LR__0780
08854                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08854     37 00 00 FF 
08858     44 E4 05 F1 | 	add	objptr, ##28228
0885c     F2 26 02 FB | 	rdlong	local01, objptr
08860     03 26 66 F0 | 	shl	local01, #3
08864     02 00 00 FF 
08868     38 E4 85 F1 | 	sub	objptr, ##1080
0886c     F2 26 02 F1 | 	add	local01, objptr
08870     04 26 06 F1 | 	add	local01, #4
08874     13 27 02 FB | 	rdlong	local01, local01
08878     11 26 0E F2 | 	cmp	local01, #17 wz
0887c     35 00 00 FF 
08880     0C E4 85 F1 | 	sub	objptr, ##27148
08884     15 FA 05 56 |  if_ne	mov	result1, #21
08888     90 00 90 5D |  if_ne	jmp	#LR__0780
0888c     37 00 00 FF 
08890     44 E4 05 F1 | 	add	objptr, ##28228
08894     F2 26 02 FB | 	rdlong	local01, objptr
08898     01 26 06 F1 | 	add	local01, #1
0889c     F2 26 62 FC | 	wrlong	local01, objptr
088a0     37 00 00 FF 
088a4     44 E4 85 F1 | 	sub	objptr, ##28228
088a8     40 36 B0 FD | 	call	#_expr
088ac     FD 26 02 F6 | 	mov	local01, result1
088b0                 | ' err=expr() : if err>0 then return err
088b0     01 26 16 F2 | 	cmp	local01, #1 wc
088b4     13 FB 01 36 |  if_ae	mov	result1, local01
088b8     60 00 90 3D |  if_ae	jmp	#LR__0780
088bc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
088bc     37 00 00 FF 
088c0     44 E4 05 F1 | 	add	objptr, ##28228
088c4     F2 26 02 FB | 	rdlong	local01, objptr
088c8     03 26 66 F0 | 	shl	local01, #3
088cc     02 00 00 FF 
088d0     38 E4 85 F1 | 	sub	objptr, ##1080
088d4     F2 26 02 F1 | 	add	local01, objptr
088d8     04 26 06 F1 | 	add	local01, #4
088dc     13 27 02 FB | 	rdlong	local01, local01
088e0     11 26 0E F2 | 	cmp	local01, #17 wz
088e4     35 00 00 FF 
088e8     0C E4 85 F1 | 	sub	objptr, ##27148
088ec     15 FA 05 56 |  if_ne	mov	result1, #21
088f0     28 00 90 5D |  if_ne	jmp	#LR__0780
088f4     37 00 00 FF 
088f8     44 E4 05 F1 | 	add	objptr, ##28228
088fc     F2 26 02 FB | 	rdlong	local01, objptr
08900     01 26 06 F1 | 	add	local01, #1
08904     F2 26 62 FC | 	wrlong	local01, objptr
08908     37 00 00 FF 
0890c     44 E4 85 F1 | 	sub	objptr, ##28228
08910     D8 35 B0 FD | 	call	#_expr
08914                 | ' err=expr() : if err>0 then return err
08914     01 FA 15 F2 | 	cmp	result1, #1 wc
08918                 | ' return 0
08918     00 FA 05 C6 |  if_b	mov	result1, #0
0891c                 | LR__0780
0891c     A7 F0 03 F6 | 	mov	ptra, fp
08920     B2 00 A0 FD | 	call	#popregs_
08924                 | _compile_fun_3p_ret
08924     2D 00 64 FD | 	ret
08928                 | 
08928                 | ' 
08928                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08928                 | ' 
08928                 | ' function compile_fun_4p() as ulong
08928                 | _compile_fun_4p
08928     01 4A 05 F6 | 	mov	COUNT_, #1
0892c     A8 00 A0 FD | 	call	#pushregs_
08930     B8 35 B0 FD | 	call	#_expr
08934     FD 26 02 F6 | 	mov	local01, result1
08938                 | ' err=expr() : if err>0 then return err
08938     01 26 16 F2 | 	cmp	local01, #1 wc
0893c     13 FB 01 36 |  if_ae	mov	result1, local01
08940     30 01 90 3D |  if_ae	jmp	#LR__0790
08944                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08944     37 00 00 FF 
08948     44 E4 05 F1 | 	add	objptr, ##28228
0894c     F2 26 02 FB | 	rdlong	local01, objptr
08950     03 26 66 F0 | 	shl	local01, #3
08954     02 00 00 FF 
08958     38 E4 85 F1 | 	sub	objptr, ##1080
0895c     F2 26 02 F1 | 	add	local01, objptr
08960     04 26 06 F1 | 	add	local01, #4
08964     13 27 02 FB | 	rdlong	local01, local01
08968     11 26 0E F2 | 	cmp	local01, #17 wz
0896c     35 00 00 FF 
08970     0C E4 85 F1 | 	sub	objptr, ##27148
08974     15 FA 05 56 |  if_ne	mov	result1, #21
08978     F8 00 90 5D |  if_ne	jmp	#LR__0790
0897c     37 00 00 FF 
08980     44 E4 05 F1 | 	add	objptr, ##28228
08984     F2 26 02 FB | 	rdlong	local01, objptr
08988     01 26 06 F1 | 	add	local01, #1
0898c     F2 26 62 FC | 	wrlong	local01, objptr
08990     37 00 00 FF 
08994     44 E4 85 F1 | 	sub	objptr, ##28228
08998     50 35 B0 FD | 	call	#_expr
0899c     FD 26 02 F6 | 	mov	local01, result1
089a0                 | ' err=expr() : if err>0 then return err
089a0     01 26 16 F2 | 	cmp	local01, #1 wc
089a4     13 FB 01 36 |  if_ae	mov	result1, local01
089a8     C8 00 90 3D |  if_ae	jmp	#LR__0790
089ac                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
089ac     37 00 00 FF 
089b0     44 E4 05 F1 | 	add	objptr, ##28228
089b4     F2 26 02 FB | 	rdlong	local01, objptr
089b8     03 26 66 F0 | 	shl	local01, #3
089bc     02 00 00 FF 
089c0     38 E4 85 F1 | 	sub	objptr, ##1080
089c4     F2 26 02 F1 | 	add	local01, objptr
089c8     04 26 06 F1 | 	add	local01, #4
089cc     13 27 02 FB | 	rdlong	local01, local01
089d0     11 26 0E F2 | 	cmp	local01, #17 wz
089d4     35 00 00 FF 
089d8     0C E4 85 F1 | 	sub	objptr, ##27148
089dc     15 FA 05 56 |  if_ne	mov	result1, #21
089e0     90 00 90 5D |  if_ne	jmp	#LR__0790
089e4     37 00 00 FF 
089e8     44 E4 05 F1 | 	add	objptr, ##28228
089ec     F2 26 02 FB | 	rdlong	local01, objptr
089f0     01 26 06 F1 | 	add	local01, #1
089f4     F2 26 62 FC | 	wrlong	local01, objptr
089f8     37 00 00 FF 
089fc     44 E4 85 F1 | 	sub	objptr, ##28228
08a00     E8 34 B0 FD | 	call	#_expr
08a04     FD 26 02 F6 | 	mov	local01, result1
08a08                 | ' err=expr() : if err>0 then return err
08a08     01 26 16 F2 | 	cmp	local01, #1 wc
08a0c     13 FB 01 36 |  if_ae	mov	result1, local01
08a10     60 00 90 3D |  if_ae	jmp	#LR__0790
08a14                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08a14     37 00 00 FF 
08a18     44 E4 05 F1 | 	add	objptr, ##28228
08a1c     F2 26 02 FB | 	rdlong	local01, objptr
08a20     03 26 66 F0 | 	shl	local01, #3
08a24     02 00 00 FF 
08a28     38 E4 85 F1 | 	sub	objptr, ##1080
08a2c     F2 26 02 F1 | 	add	local01, objptr
08a30     04 26 06 F1 | 	add	local01, #4
08a34     13 27 02 FB | 	rdlong	local01, local01
08a38     11 26 0E F2 | 	cmp	local01, #17 wz
08a3c     35 00 00 FF 
08a40     0C E4 85 F1 | 	sub	objptr, ##27148
08a44     15 FA 05 56 |  if_ne	mov	result1, #21
08a48     28 00 90 5D |  if_ne	jmp	#LR__0790
08a4c     37 00 00 FF 
08a50     44 E4 05 F1 | 	add	objptr, ##28228
08a54     F2 26 02 FB | 	rdlong	local01, objptr
08a58     01 26 06 F1 | 	add	local01, #1
08a5c     F2 26 62 FC | 	wrlong	local01, objptr
08a60     37 00 00 FF 
08a64     44 E4 85 F1 | 	sub	objptr, ##28228
08a68     80 34 B0 FD | 	call	#_expr
08a6c                 | ' err=expr() : if err>0 then return err
08a6c     01 FA 15 F2 | 	cmp	result1, #1 wc
08a70                 | ' return 0
08a70     00 FA 05 C6 |  if_b	mov	result1, #0
08a74                 | LR__0790
08a74     A7 F0 03 F6 | 	mov	ptra, fp
08a78     B2 00 A0 FD | 	call	#popregs_
08a7c                 | _compile_fun_4p_ret
08a7c     2D 00 64 FD | 	ret
08a80                 | 
08a80                 | ' 
08a80                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08a80                 | ' 
08a80                 | ' function compile_fun_varp() as ulong,ulong 
08a80                 | _compile_fun_varp
08a80     03 4A 05 F6 | 	mov	COUNT_, #3
08a84     A8 00 A0 FD | 	call	#pushregs_
08a88     00 26 06 F6 | 	mov	local01, #0
08a8c                 | ' 
08a8c                 | ' i=0 : err=0
08a8c                 | ' if lparts(ct).token<>token_end then
08a8c     37 00 00 FF 
08a90     44 E4 05 F1 | 	add	objptr, ##28228
08a94     F2 28 02 FB | 	rdlong	local02, objptr
08a98     03 28 66 F0 | 	shl	local02, #3
08a9c     02 00 00 FF 
08aa0     38 E4 85 F1 | 	sub	objptr, ##1080
08aa4     F2 28 02 F1 | 	add	local02, objptr
08aa8     04 28 06 F1 | 	add	local02, #4
08aac     14 29 02 FB | 	rdlong	local02, local02
08ab0     FE 29 0E F2 | 	cmp	local02, #510 wz
08ab4     35 00 00 FF 
08ab8     0C E4 85 F1 | 	sub	objptr, ##27148
08abc     88 00 90 AD |  if_e	jmp	#LR__0801
08ac0                 | '   do
08ac0                 | LR__0800
08ac0     28 34 B0 FD | 	call	#_expr
08ac4     01 26 06 F1 | 	add	local01, #1
08ac8                 | '     expr()
08ac8                 | '     i+=1
08ac8                 | '     if lparts(ct).token=token_comma then ct+=1
08ac8     37 00 00 FF 
08acc     44 E4 05 F1 | 	add	objptr, ##28228
08ad0     F2 28 02 FB | 	rdlong	local02, objptr
08ad4     03 28 66 F0 | 	shl	local02, #3
08ad8     02 00 00 FF 
08adc     38 E4 85 F1 | 	sub	objptr, ##1080
08ae0     F2 28 02 F1 | 	add	local02, objptr
08ae4     04 28 06 F1 | 	add	local02, #4
08ae8     14 29 02 FB | 	rdlong	local02, local02
08aec     11 28 0E F2 | 	cmp	local02, #17 wz
08af0     35 00 00 FF 
08af4     0C E4 85 F1 | 	sub	objptr, ##27148
08af8     37 00 00 AF 
08afc     44 E4 05 A1 |  if_e	add	objptr, ##28228
08b00     F2 2A 02 AB |  if_e	rdlong	local03, objptr
08b04     01 2A 06 A1 |  if_e	add	local03, #1
08b08     F2 2A 62 AC |  if_e	wrlong	local03, objptr
08b0c     37 00 00 AF 
08b10     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08b14                 | '     if lparts(ct).token=token_end then exit loop
08b14     37 00 00 FF 
08b18     44 E4 05 F1 | 	add	objptr, ##28228
08b1c     F2 28 02 FB | 	rdlong	local02, objptr
08b20     03 28 66 F0 | 	shl	local02, #3
08b24     02 00 00 FF 
08b28     38 E4 85 F1 | 	sub	objptr, ##1080
08b2c     F2 28 02 F1 | 	add	local02, objptr
08b30     04 28 06 F1 | 	add	local02, #4
08b34     14 29 02 FB | 	rdlong	local02, local02
08b38     FE 29 0E F2 | 	cmp	local02, #510 wz
08b3c     35 00 00 FF 
08b40     0C E4 85 F1 | 	sub	objptr, ##27148
08b44     78 FF 9F 5D |  if_ne	jmp	#LR__0800
08b48                 | LR__0801
08b48                 | ' return i,err
08b48     13 FB 01 F6 | 	mov	result1, local01
08b4c     00 FC 05 F6 | 	mov	result2, #0
08b50     A7 F0 03 F6 | 	mov	ptra, fp
08b54     B2 00 A0 FD | 	call	#popregs_
08b58                 | _compile_fun_varp_ret
08b58     2D 00 64 FD | 	ret
08b5c                 | 
08b5c                 | ' 
08b5c                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08b5c                 | ' 
08b5c                 | ' function compile_read() as ulong,ulong 
08b5c                 | _compile_read
08b5c     04 4A 05 F6 | 	mov	COUNT_, #4
08b60     A8 00 A0 FD | 	call	#pushregs_
08b64     00 26 06 F6 | 	mov	local01, #0
08b68                 | ' 
08b68                 | ' i=0 : err=0
08b68                 | ' if lparts(ct).token<>token_end then
08b68     37 00 00 FF 
08b6c     44 E4 05 F1 | 	add	objptr, ##28228
08b70     F2 28 02 FB | 	rdlong	local02, objptr
08b74     03 28 66 F0 | 	shl	local02, #3
08b78     02 00 00 FF 
08b7c     38 E4 85 F1 | 	sub	objptr, ##1080
08b80     F2 28 02 F1 | 	add	local02, objptr
08b84     04 28 06 F1 | 	add	local02, #4
08b88     14 29 02 FB | 	rdlong	local02, local02
08b8c     FE 29 0E F2 | 	cmp	local02, #510 wz
08b90     35 00 00 FF 
08b94     0C E4 85 F1 | 	sub	objptr, ##27148
08b98     98 00 90 AD |  if_e	jmp	#LR__0811
08b9c                 | '   do
08b9c                 | LR__0810
08b9c     B8 2F B0 FD | 	call	#_getaddr
08ba0     FD 2A 02 F6 | 	mov	local03, result1
08ba4     37 00 00 FF 
08ba8     44 E4 05 F1 | 	add	objptr, ##28228
08bac     F2 28 02 FB | 	rdlong	local02, objptr
08bb0     01 28 06 F1 | 	add	local02, #1
08bb4     F2 28 62 FC | 	wrlong	local02, objptr
08bb8     01 26 06 F1 | 	add	local01, #1
08bbc                 | '     err=getaddr() :ct+=1
08bbc                 | '     i+=1 
08bbc                 | '     if lparts(ct).token=token_comma then ct+=1 
08bbc     03 28 66 F0 | 	shl	local02, #3
08bc0     02 00 00 FF 
08bc4     38 E4 85 F1 | 	sub	objptr, ##1080
08bc8     F2 28 02 F1 | 	add	local02, objptr
08bcc     04 28 06 F1 | 	add	local02, #4
08bd0     14 29 02 FB | 	rdlong	local02, local02
08bd4     11 28 0E F2 | 	cmp	local02, #17 wz
08bd8     35 00 00 FF 
08bdc     0C E4 85 F1 | 	sub	objptr, ##27148
08be0     37 00 00 AF 
08be4     44 E4 05 A1 |  if_e	add	objptr, ##28228
08be8     F2 2C 02 AB |  if_e	rdlong	local04, objptr
08bec     01 2C 06 A1 |  if_e	add	local04, #1
08bf0     F2 2C 62 AC |  if_e	wrlong	local04, objptr
08bf4     37 00 00 AF 
08bf8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08bfc                 | '     if lparts(ct).token=token_end then exit loop
08bfc     37 00 00 FF 
08c00     44 E4 05 F1 | 	add	objptr, ##28228
08c04     F2 28 02 FB | 	rdlong	local02, objptr
08c08     03 28 66 F0 | 	shl	local02, #3
08c0c     02 00 00 FF 
08c10     38 E4 85 F1 | 	sub	objptr, ##1080
08c14     F2 28 02 F1 | 	add	local02, objptr
08c18     04 28 06 F1 | 	add	local02, #4
08c1c     14 29 02 FB | 	rdlong	local02, local02
08c20     FE 29 0E F2 | 	cmp	local02, #510 wz
08c24     35 00 00 FF 
08c28     0C E4 85 F1 | 	sub	objptr, ##27148
08c2c     08 00 90 AD |  if_e	jmp	#LR__0812
08c30     68 FF 9F FD | 	jmp	#LR__0810
08c34                 | LR__0811
08c34     36 2A 06 F6 | 	mov	local03, #54
08c38                 | LR__0812
08c38                 | ' return i,err
08c38     13 FB 01 F6 | 	mov	result1, local01
08c3c     15 FD 01 F6 | 	mov	result2, local03
08c40     A7 F0 03 F6 | 	mov	ptra, fp
08c44     B2 00 A0 FD | 	call	#popregs_
08c48                 | _compile_read_ret
08c48     2D 00 64 FD | 	ret
08c4c                 | 
08c4c                 | ' 
08c4c                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08c4c                 | ' 
08c4c                 | ' function compile_input() as ulong,ulong 
08c4c                 | _compile_input
08c4c     0F 4A 05 F6 | 	mov	COUNT_, #15
08c50     A8 00 A0 FD | 	call	#pushregs_
08c54                 | ' 
08c54                 | ' if lparts(ct).token=token_string then
08c54     37 00 00 FF 
08c58     44 E4 05 F1 | 	add	objptr, ##28228
08c5c     F2 16 02 FB | 	rdlong	arg03, objptr
08c60     03 16 66 F0 | 	shl	arg03, #3
08c64     02 00 00 FF 
08c68     38 E4 85 F1 | 	sub	objptr, ##1080
08c6c     F2 16 02 F1 | 	add	arg03, objptr
08c70     04 16 06 F1 | 	add	arg03, #4
08c74     0B FD 01 FB | 	rdlong	result2, arg03
08c78     01 00 00 FF 
08c7c     03 FC 0D F2 | 	cmp	result2, ##515 wz
08c80     35 00 00 FF 
08c84     0C E4 85 F1 | 	sub	objptr, ##27148
08c88     38 06 90 5D |  if_ne	jmp	#LR__0827
08c8c     37 00 00 FF 
08c90     44 E4 05 F1 | 	add	objptr, ##28228
08c94     F2 14 02 FB | 	rdlong	arg02, objptr
08c98     03 14 66 F0 | 	shl	arg02, #3
08c9c     02 00 00 FF 
08ca0     38 E4 85 F1 | 	sub	objptr, ##1080
08ca4     F2 14 02 F1 | 	add	arg02, objptr
08ca8     0A 13 02 FB | 	rdlong	arg01, arg02
08cac     35 00 00 FF 
08cb0     0C E4 85 F1 | 	sub	objptr, ##27148
08cb4     09 2D 02 F6 | 	mov	local04, arg01
08cb8     97 06 48 FB | 	callpa	#(@LR__0821-@LR__0820)>>2,fcache_load_ptr_
08cbc                 | LR__0820
08cbc     16 FB C9 FA | 	rdbyte	result1, local04 wz
08cc0     01 2C 06 51 |  if_ne	add	local04, #1
08cc4     F4 FF 9F 5D |  if_ne	jmp	#LR__0820
08cc8                 | LR__0821
08cc8     09 2D 82 F1 | 	sub	local04, arg01
08ccc     16 FB 01 F6 | 	mov	result1, local04
08cd0     52 00 00 FF 
08cd4     F0 E4 05 F1 | 	add	objptr, ##42224
08cd8     F2 FA 61 FC | 	wrlong	result1, objptr
08cdc     58 E4 85 F1 | 	sub	objptr, #88
08ce0     F2 12 02 FB | 	rdlong	arg01, objptr
08ce4     FD 12 82 F1 | 	sub	arg01, result1
08ce8     04 12 86 F1 | 	sub	arg01, #4
08cec     03 12 26 F5 | 	andn	arg01, #3
08cf0     F2 12 62 FC | 	wrlong	arg01, objptr
08cf4     58 E4 05 F1 | 	add	objptr, #88
08cf8     F2 14 02 FB | 	rdlong	arg02, objptr
08cfc     52 00 00 FF 
08d00     F0 E4 85 F1 | 	sub	objptr, ##42224
08d04     84 AA B1 FD | 	call	#_pslpoke
08d08                 | '   pslpoke memtop,l
08d08                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08d08     01 2E 06 F6 | 	mov	local05, #1
08d0c     52 00 00 FF 
08d10     F0 E4 05 F1 | 	add	objptr, ##42224
08d14     F2 30 02 FB | 	rdlong	local06, objptr
08d18     52 00 00 FF 
08d1c     F0 E4 85 F1 | 	sub	objptr, ##42224
08d20     01 30 06 F1 | 	add	local06, #1
08d24                 | LR__0822
08d24     18 2F 52 F2 | 	cmps	local05, local06 wc
08d28     5C 00 90 3D |  if_ae	jmp	#LR__0823
08d2c     52 00 00 FF 
08d30     98 E4 05 F1 | 	add	objptr, ##42136
08d34     F2 32 02 FB | 	rdlong	local07, objptr
08d38     03 32 06 F1 | 	add	local07, #3
08d3c     17 33 02 F1 | 	add	local07, local05
08d40     1B 00 00 FF 
08d44     54 E4 85 F1 | 	sub	objptr, ##13908
08d48     F2 14 02 FB | 	rdlong	arg02, objptr
08d4c     03 14 66 F0 | 	shl	arg02, #3
08d50     02 00 00 FF 
08d54     38 E4 85 F1 | 	sub	objptr, ##1080
08d58     F2 14 02 F1 | 	add	arg02, objptr
08d5c     0A 13 02 FB | 	rdlong	arg01, arg02
08d60     17 15 02 F6 | 	mov	arg02, local05
08d64     01 16 06 F6 | 	mov	arg03, #1
08d68     35 00 00 FF 
08d6c     0C E4 85 F1 | 	sub	objptr, ##27148
08d70     C0 04 B2 FD | 	call	#__system__Mid_S
08d74     FD 14 C2 FA | 	rdbyte	arg02, result1
08d78     19 13 02 F6 | 	mov	arg01, local07
08d7c     9C AA B1 FD | 	call	#_pspoke
08d80     01 2E 06 F1 | 	add	local05, #1
08d84     9C FF 9F FD | 	jmp	#LR__0822
08d88                 | LR__0823
08d88     52 00 00 FF 
08d8c     98 E4 05 F1 | 	add	objptr, ##42136
08d90     F2 26 02 FB | 	rdlong	local01, objptr
08d94     2B 2A 06 F6 | 	mov	local03, #43
08d98     13 35 02 F6 | 	mov	local08, local01
08d9c     14 33 02 F6 | 	mov	local07, local02
08da0     15 37 02 F6 | 	mov	local09, local03
08da4     08 00 00 FF 
08da8     1C E4 85 F1 | 	sub	objptr, ##4124
08dac     F2 30 02 FB | 	rdlong	local06, objptr
08db0     18 2F 02 F6 | 	mov	local05, local06
08db4     01 2E 66 F0 | 	shl	local05, #1
08db8     18 2F 02 F1 | 	add	local05, local06
08dbc     02 2E 66 F0 | 	shl	local05, #2
08dc0     03 00 00 FF 
08dc4     00 E4 85 F1 | 	sub	objptr, ##1536
08dc8     F2 2E 02 F1 | 	add	local05, objptr
08dcc     17 35 62 FC | 	wrlong	local08, local05
08dd0     03 00 00 FF 
08dd4     00 E4 05 F1 | 	add	objptr, ##1536
08dd8     F2 34 02 FB | 	rdlong	local08, objptr
08ddc     1A 31 02 F6 | 	mov	local06, local08
08de0     01 30 66 F0 | 	shl	local06, #1
08de4     1A 31 02 F1 | 	add	local06, local08
08de8     02 30 66 F0 | 	shl	local06, #2
08dec     03 00 00 FF 
08df0     00 E4 85 F1 | 	sub	objptr, ##1536
08df4     F2 30 02 F1 | 	add	local06, objptr
08df8     04 30 06 F1 | 	add	local06, #4
08dfc     18 33 62 FC | 	wrlong	local07, local06
08e00     03 00 00 FF 
08e04     00 E4 05 F1 | 	add	objptr, ##1536
08e08     F2 34 02 FB | 	rdlong	local08, objptr
08e0c     1A 33 02 F6 | 	mov	local07, local08
08e10     01 32 66 F0 | 	shl	local07, #1
08e14     1A 33 02 F1 | 	add	local07, local08
08e18     02 32 66 F0 | 	shl	local07, #2
08e1c     03 00 00 FF 
08e20     00 E4 85 F1 | 	sub	objptr, ##1536
08e24     F2 32 02 F1 | 	add	local07, objptr
08e28     08 32 06 F1 | 	add	local07, #8
08e2c     19 37 62 FC | 	wrlong	local09, local07
08e30     03 00 00 FF 
08e34     00 E4 05 F1 | 	add	objptr, ##1536
08e38     F2 34 02 FB | 	rdlong	local08, objptr
08e3c     01 34 06 F1 | 	add	local08, #1
08e40     F2 34 62 FC | 	wrlong	local08, objptr
08e44     13 00 00 FF 
08e48     38 E4 85 F1 | 	sub	objptr, ##9784
08e4c     F2 34 02 FB | 	rdlong	local08, objptr
08e50     01 34 06 F1 | 	add	local08, #1
08e54     F2 34 62 FC | 	wrlong	local08, objptr
08e58                 | '   t1.result.uresult=memtop
08e58                 | '   t1.result_type=result_string2  
08e58                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08e58                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08e58     03 34 66 F0 | 	shl	local08, #3
08e5c     02 00 00 FF 
08e60     38 E4 85 F1 | 	sub	objptr, ##1080
08e64     F2 34 02 F1 | 	add	local08, objptr
08e68     04 34 06 F1 | 	add	local08, #4
08e6c     1A 35 02 FB | 	rdlong	local08, local08
08e70     11 34 0E F2 | 	cmp	local08, #17 wz
08e74     35 00 00 FF 
08e78     0C E4 85 F1 | 	sub	objptr, ##27148
08e7c     60 01 90 5D |  if_ne	jmp	#LR__0824
08e80     21 2A 06 F6 | 	mov	local03, #33
08e84     13 35 02 F6 | 	mov	local08, local01
08e88     14 33 02 F6 | 	mov	local07, local02
08e8c     15 39 02 F6 | 	mov	local10, local03
08e90     4A 00 00 FF 
08e94     7C E4 05 F1 | 	add	objptr, ##38012
08e98     F2 3A 02 FB | 	rdlong	local11, objptr
08e9c     1D 3D 02 F6 | 	mov	local12, local11
08ea0     01 3C 66 F0 | 	shl	local12, #1
08ea4     1D 3D 02 F1 | 	add	local12, local11
08ea8     02 3C 66 F0 | 	shl	local12, #2
08eac     03 00 00 FF 
08eb0     00 E4 85 F1 | 	sub	objptr, ##1536
08eb4     F2 3C 02 F1 | 	add	local12, objptr
08eb8     1E 35 62 FC | 	wrlong	local08, local12
08ebc     03 00 00 FF 
08ec0     00 E4 05 F1 | 	add	objptr, ##1536
08ec4     F2 3E 02 FB | 	rdlong	local13, objptr
08ec8     1F 35 02 F6 | 	mov	local08, local13
08ecc     01 34 66 F0 | 	shl	local08, #1
08ed0     1F 35 02 F1 | 	add	local08, local13
08ed4     02 34 66 F0 | 	shl	local08, #2
08ed8     03 00 00 FF 
08edc     00 E4 85 F1 | 	sub	objptr, ##1536
08ee0     F2 34 02 F1 | 	add	local08, objptr
08ee4     04 34 06 F1 | 	add	local08, #4
08ee8     1A 33 62 FC | 	wrlong	local07, local08
08eec     03 00 00 FF 
08ef0     00 E4 05 F1 | 	add	objptr, ##1536
08ef4     F2 34 02 FB | 	rdlong	local08, objptr
08ef8     1A 41 02 F6 | 	mov	local14, local08
08efc     01 40 66 F0 | 	shl	local14, #1
08f00     1A 41 02 F1 | 	add	local14, local08
08f04     02 40 66 F0 | 	shl	local14, #2
08f08     03 00 00 FF 
08f0c     00 E4 85 F1 | 	sub	objptr, ##1536
08f10     F2 40 02 F1 | 	add	local14, objptr
08f14     08 40 06 F1 | 	add	local14, #8
08f18     20 39 62 FC | 	wrlong	local10, local14
08f1c     03 00 00 FF 
08f20     00 E4 05 F1 | 	add	objptr, ##1536
08f24     F2 34 02 FB | 	rdlong	local08, objptr
08f28     01 34 06 F1 | 	add	local08, #1
08f2c     F2 34 62 FC | 	wrlong	local08, objptr
08f30     44 2A 06 F6 | 	mov	local03, #68
08f34     13 35 02 F6 | 	mov	local08, local01
08f38     14 33 02 F6 | 	mov	local07, local02
08f3c     15 39 02 F6 | 	mov	local10, local03
08f40     F2 40 02 FB | 	rdlong	local14, objptr
08f44     20 3F 02 F6 | 	mov	local13, local14
08f48     01 3E 66 F0 | 	shl	local13, #1
08f4c     20 3F 02 F1 | 	add	local13, local14
08f50     02 3E 66 F0 | 	shl	local13, #2
08f54     03 00 00 FF 
08f58     00 E4 85 F1 | 	sub	objptr, ##1536
08f5c     F2 3E 02 F1 | 	add	local13, objptr
08f60     1F 35 62 FC | 	wrlong	local08, local13
08f64     03 00 00 FF 
08f68     00 E4 05 F1 | 	add	objptr, ##1536
08f6c     F2 40 02 FB | 	rdlong	local14, objptr
08f70     20 3F 02 F6 | 	mov	local13, local14
08f74     01 3E 66 F0 | 	shl	local13, #1
08f78     20 3F 02 F1 | 	add	local13, local14
08f7c     02 3E 66 F0 | 	shl	local13, #2
08f80     03 00 00 FF 
08f84     00 E4 85 F1 | 	sub	objptr, ##1536
08f88     F2 3E 02 F1 | 	add	local13, objptr
08f8c     04 3E 06 F1 | 	add	local13, #4
08f90     1F 33 62 FC | 	wrlong	local07, local13
08f94     03 00 00 FF 
08f98     00 E4 05 F1 | 	add	objptr, ##1536
08f9c     F2 3E 02 FB | 	rdlong	local13, objptr
08fa0     1F 41 02 F6 | 	mov	local14, local13
08fa4     01 40 66 F0 | 	shl	local14, #1
08fa8     1F 41 02 F1 | 	add	local14, local13
08fac     02 40 66 F0 | 	shl	local14, #2
08fb0     03 00 00 FF 
08fb4     00 E4 85 F1 | 	sub	objptr, ##1536
08fb8     F2 40 02 F1 | 	add	local14, objptr
08fbc     08 40 06 F1 | 	add	local14, #8
08fc0     20 39 62 FC | 	wrlong	local10, local14
08fc4     03 00 00 FF 
08fc8     00 E4 05 F1 | 	add	objptr, ##1536
08fcc     F2 34 02 FB | 	rdlong	local08, objptr
08fd0     01 34 06 F1 | 	add	local08, #1
08fd4     F2 34 62 FC | 	wrlong	local08, objptr
08fd8     4A 00 00 FF 
08fdc     7C E4 85 F1 | 	sub	objptr, ##38012
08fe0                 | LR__0824
08fe0                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08fe0     37 00 00 FF 
08fe4     44 E4 05 F1 | 	add	objptr, ##28228
08fe8     F2 34 02 FB | 	rdlong	local08, objptr
08fec     03 34 66 F0 | 	shl	local08, #3
08ff0     02 00 00 FF 
08ff4     38 E4 85 F1 | 	sub	objptr, ##1080
08ff8     F2 34 02 F1 | 	add	local08, objptr
08ffc     04 34 06 F1 | 	add	local08, #4
09000     1A 41 02 FB | 	rdlong	local14, local08
09004     12 40 0E F2 | 	cmp	local14, #18 wz
09008     35 00 00 FF 
0900c     0C E4 85 F1 | 	sub	objptr, ##27148
09010     60 01 90 5D |  if_ne	jmp	#LR__0825
09014     22 2A 06 F6 | 	mov	local03, #34
09018     13 35 02 F6 | 	mov	local08, local01
0901c     14 33 02 F6 | 	mov	local07, local02
09020     15 39 02 F6 | 	mov	local10, local03
09024     4A 00 00 FF 
09028     7C E4 05 F1 | 	add	objptr, ##38012
0902c     F2 40 02 FB | 	rdlong	local14, objptr
09030     20 3F 02 F6 | 	mov	local13, local14
09034     01 3E 66 F0 | 	shl	local13, #1
09038     20 3F 02 F1 | 	add	local13, local14
0903c     02 3E 66 F0 | 	shl	local13, #2
09040     03 00 00 FF 
09044     00 E4 85 F1 | 	sub	objptr, ##1536
09048     F2 3E 02 F1 | 	add	local13, objptr
0904c     1F 35 62 FC | 	wrlong	local08, local13
09050     03 00 00 FF 
09054     00 E4 05 F1 | 	add	objptr, ##1536
09058     F2 40 02 FB | 	rdlong	local14, objptr
0905c     20 35 02 F6 | 	mov	local08, local14
09060     01 34 66 F0 | 	shl	local08, #1
09064     20 35 02 F1 | 	add	local08, local14
09068     02 34 66 F0 | 	shl	local08, #2
0906c     03 00 00 FF 
09070     00 E4 85 F1 | 	sub	objptr, ##1536
09074     F2 34 02 F1 | 	add	local08, objptr
09078     04 34 06 F1 | 	add	local08, #4
0907c     1A 33 62 FC | 	wrlong	local07, local08
09080     03 00 00 FF 
09084     00 E4 05 F1 | 	add	objptr, ##1536
09088     F2 34 02 FB | 	rdlong	local08, objptr
0908c     1A 41 02 F6 | 	mov	local14, local08
09090     01 40 66 F0 | 	shl	local14, #1
09094     1A 41 02 F1 | 	add	local14, local08
09098     02 40 66 F0 | 	shl	local14, #2
0909c     03 00 00 FF 
090a0     00 E4 85 F1 | 	sub	objptr, ##1536
090a4     F2 40 02 F1 | 	add	local14, objptr
090a8     08 40 06 F1 | 	add	local14, #8
090ac     20 39 62 FC | 	wrlong	local10, local14
090b0     03 00 00 FF 
090b4     00 E4 05 F1 | 	add	objptr, ##1536
090b8     F2 34 02 FB | 	rdlong	local08, objptr
090bc     01 34 06 F1 | 	add	local08, #1
090c0     F2 34 62 FC | 	wrlong	local08, objptr
090c4     44 2A 06 F6 | 	mov	local03, #68
090c8     13 35 02 F6 | 	mov	local08, local01
090cc     14 33 02 F6 | 	mov	local07, local02
090d0     15 39 02 F6 | 	mov	local10, local03
090d4     F2 40 02 FB | 	rdlong	local14, objptr
090d8     20 3F 02 F6 | 	mov	local13, local14
090dc     01 3E 66 F0 | 	shl	local13, #1
090e0     20 3F 02 F1 | 	add	local13, local14
090e4     02 3E 66 F0 | 	shl	local13, #2
090e8     03 00 00 FF 
090ec     00 E4 85 F1 | 	sub	objptr, ##1536
090f0     F2 3E 02 F1 | 	add	local13, objptr
090f4     1F 35 62 FC | 	wrlong	local08, local13
090f8     03 00 00 FF 
090fc     00 E4 05 F1 | 	add	objptr, ##1536
09100     F2 40 02 FB | 	rdlong	local14, objptr
09104     20 3F 02 F6 | 	mov	local13, local14
09108     01 3E 66 F0 | 	shl	local13, #1
0910c     20 3F 02 F1 | 	add	local13, local14
09110     02 3E 66 F0 | 	shl	local13, #2
09114     03 00 00 FF 
09118     00 E4 85 F1 | 	sub	objptr, ##1536
0911c     F2 3E 02 F1 | 	add	local13, objptr
09120     04 3E 06 F1 | 	add	local13, #4
09124     1F 33 62 FC | 	wrlong	local07, local13
09128     03 00 00 FF 
0912c     00 E4 05 F1 | 	add	objptr, ##1536
09130     F2 3E 02 FB | 	rdlong	local13, objptr
09134     1F 41 02 F6 | 	mov	local14, local13
09138     01 40 66 F0 | 	shl	local14, #1
0913c     1F 41 02 F1 | 	add	local14, local13
09140     02 40 66 F0 | 	shl	local14, #2
09144     03 00 00 FF 
09148     00 E4 85 F1 | 	sub	objptr, ##1536
0914c     F2 40 02 F1 | 	add	local14, objptr
09150     08 40 06 F1 | 	add	local14, #8
09154     20 39 62 FC | 	wrlong	local10, local14
09158     03 00 00 FF 
0915c     00 E4 05 F1 | 	add	objptr, ##1536
09160     F2 34 02 FB | 	rdlong	local08, objptr
09164     01 34 06 F1 | 	add	local08, #1
09168     F2 34 62 FC | 	wrlong	local08, objptr
0916c     4A 00 00 FF 
09170     7C E4 85 F1 | 	sub	objptr, ##38012
09174                 | LR__0825
09174                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
09174     37 00 00 FF 
09178     44 E4 05 F1 | 	add	objptr, ##28228
0917c     F2 34 02 FB | 	rdlong	local08, objptr
09180     03 34 66 F0 | 	shl	local08, #3
09184     02 00 00 FF 
09188     38 E4 85 F1 | 	sub	objptr, ##1080
0918c     F2 34 02 F1 | 	add	local08, objptr
09190     04 34 06 F1 | 	add	local08, #4
09194     1A 41 02 FB | 	rdlong	local14, local08
09198     12 40 0E F2 | 	cmp	local14, #18 wz
0919c     35 00 00 FF 
091a0     0C E4 85 F1 | 	sub	objptr, ##27148
091a4     00 01 90 AD |  if_e	jmp	#LR__0826
091a8     37 00 00 FF 
091ac     44 E4 05 F1 | 	add	objptr, ##28228
091b0     F2 34 02 FB | 	rdlong	local08, objptr
091b4     03 34 66 F0 | 	shl	local08, #3
091b8     02 00 00 FF 
091bc     38 E4 85 F1 | 	sub	objptr, ##1080
091c0     F2 34 02 F1 | 	add	local08, objptr
091c4     04 34 06 F1 | 	add	local08, #4
091c8     1A 41 02 FB | 	rdlong	local14, local08
091cc     11 40 0E F2 | 	cmp	local14, #17 wz
091d0     35 00 00 FF 
091d4     0C E4 85 F1 | 	sub	objptr, ##27148
091d8     CC 00 90 AD |  if_e	jmp	#LR__0826
091dc     44 2A 06 F6 | 	mov	local03, #68
091e0     13 35 02 F6 | 	mov	local08, local01
091e4     14 33 02 F6 | 	mov	local07, local02
091e8     15 39 02 F6 | 	mov	local10, local03
091ec     4A 00 00 FF 
091f0     7C E4 05 F1 | 	add	objptr, ##38012
091f4     F2 40 02 FB | 	rdlong	local14, objptr
091f8     20 3F 02 F6 | 	mov	local13, local14
091fc     01 3E 66 F0 | 	shl	local13, #1
09200     20 3F 02 F1 | 	add	local13, local14
09204     02 3E 66 F0 | 	shl	local13, #2
09208     03 00 00 FF 
0920c     00 E4 85 F1 | 	sub	objptr, ##1536
09210     F2 3E 02 F1 | 	add	local13, objptr
09214     1F 35 62 FC | 	wrlong	local08, local13
09218     03 00 00 FF 
0921c     00 E4 05 F1 | 	add	objptr, ##1536
09220     F2 40 02 FB | 	rdlong	local14, objptr
09224     20 3F 02 F6 | 	mov	local13, local14
09228     01 3E 66 F0 | 	shl	local13, #1
0922c     20 3F 02 F1 | 	add	local13, local14
09230     02 3E 66 F0 | 	shl	local13, #2
09234     03 00 00 FF 
09238     00 E4 85 F1 | 	sub	objptr, ##1536
0923c     F2 3E 02 F1 | 	add	local13, objptr
09240     04 3E 06 F1 | 	add	local13, #4
09244     1F 33 62 FC | 	wrlong	local07, local13
09248     03 00 00 FF 
0924c     00 E4 05 F1 | 	add	objptr, ##1536
09250     F2 3E 02 FB | 	rdlong	local13, objptr
09254     1F 41 02 F6 | 	mov	local14, local13
09258     01 40 66 F0 | 	shl	local14, #1
0925c     1F 41 02 F1 | 	add	local14, local13
09260     02 40 66 F0 | 	shl	local14, #2
09264     03 00 00 FF 
09268     00 E4 85 F1 | 	sub	objptr, ##1536
0926c     F2 40 02 F1 | 	add	local14, objptr
09270     08 40 06 F1 | 	add	local14, #8
09274     20 39 62 FC | 	wrlong	local10, local14
09278     03 00 00 FF 
0927c     00 E4 05 F1 | 	add	objptr, ##1536
09280     F2 34 02 FB | 	rdlong	local08, objptr
09284     01 34 06 F1 | 	add	local08, #1
09288     F2 34 62 FC | 	wrlong	local08, objptr
0928c     13 00 00 FF 
09290     38 E4 85 F1 | 	sub	objptr, ##9784
09294     F2 34 02 FB | 	rdlong	local08, objptr
09298     01 34 86 F1 | 	sub	local08, #1
0929c     F2 34 62 FC | 	wrlong	local08, objptr
092a0     37 00 00 FF 
092a4     44 E4 85 F1 | 	sub	objptr, ##28228
092a8                 | LR__0826
092a8     37 00 00 FF 
092ac     44 E4 05 F1 | 	add	objptr, ##28228
092b0     F2 34 02 FB | 	rdlong	local08, objptr
092b4     01 34 06 F1 | 	add	local08, #1
092b8     F2 34 62 FC | 	wrlong	local08, objptr
092bc     37 00 00 FF 
092c0     44 E4 85 F1 | 	sub	objptr, ##28228
092c4                 | LR__0827
092c4     00 2E 06 F6 | 	mov	local05, #0
092c8                 | ' i=0 : err=0
092c8                 | ' if lparts(ct).token<>token_end then
092c8     37 00 00 FF 
092cc     44 E4 05 F1 | 	add	objptr, ##28228
092d0     F2 40 02 FB | 	rdlong	local14, objptr
092d4     03 40 66 F0 | 	shl	local14, #3
092d8     02 00 00 FF 
092dc     38 E4 85 F1 | 	sub	objptr, ##1080
092e0     F2 40 02 F1 | 	add	local14, objptr
092e4     04 40 06 F1 | 	add	local14, #4
092e8     20 41 02 FB | 	rdlong	local14, local14
092ec     FE 41 0E F2 | 	cmp	local14, #510 wz
092f0     35 00 00 FF 
092f4     0C E4 85 F1 | 	sub	objptr, ##27148
092f8     98 00 90 AD |  if_e	jmp	#LR__0829
092fc                 | '   do
092fc                 | LR__0828
092fc     58 28 B0 FD | 	call	#_getaddr
09300     FD 42 02 F6 | 	mov	local15, result1
09304     37 00 00 FF 
09308     44 E4 05 F1 | 	add	objptr, ##28228
0930c     F2 40 02 FB | 	rdlong	local14, objptr
09310     01 40 06 F1 | 	add	local14, #1
09314     F2 40 62 FC | 	wrlong	local14, objptr
09318     01 2E 06 F1 | 	add	local05, #1
0931c                 | '     err=getaddr() :ct+=1
0931c                 | '     i+=1 
0931c                 | '     if lparts(ct).token=token_comma then ct+=1 
0931c     03 40 66 F0 | 	shl	local14, #3
09320     02 00 00 FF 
09324     38 E4 85 F1 | 	sub	objptr, ##1080
09328     F2 40 02 F1 | 	add	local14, objptr
0932c     04 40 06 F1 | 	add	local14, #4
09330     20 41 02 FB | 	rdlong	local14, local14
09334     11 40 0E F2 | 	cmp	local14, #17 wz
09338     35 00 00 FF 
0933c     0C E4 85 F1 | 	sub	objptr, ##27148
09340     37 00 00 AF 
09344     44 E4 05 A1 |  if_e	add	objptr, ##28228
09348     F2 34 02 AB |  if_e	rdlong	local08, objptr
0934c     01 34 06 A1 |  if_e	add	local08, #1
09350     F2 34 62 AC |  if_e	wrlong	local08, objptr
09354     37 00 00 AF 
09358     44 E4 85 A1 |  if_e	sub	objptr, ##28228
0935c                 | '     if lparts(ct).token=token_end then exit loop
0935c     37 00 00 FF 
09360     44 E4 05 F1 | 	add	objptr, ##28228
09364     F2 40 02 FB | 	rdlong	local14, objptr
09368     03 40 66 F0 | 	shl	local14, #3
0936c     02 00 00 FF 
09370     38 E4 85 F1 | 	sub	objptr, ##1080
09374     F2 40 02 F1 | 	add	local14, objptr
09378     04 40 06 F1 | 	add	local14, #4
0937c     20 41 02 FB | 	rdlong	local14, local14
09380     FE 41 0E F2 | 	cmp	local14, #510 wz
09384     35 00 00 FF 
09388     0C E4 85 F1 | 	sub	objptr, ##27148
0938c     08 00 90 AD |  if_e	jmp	#LR__0830
09390     68 FF 9F FD | 	jmp	#LR__0828
09394                 | LR__0829
09394     36 42 06 F6 | 	mov	local15, #54
09398                 | LR__0830
09398                 | ' return i,err
09398     17 FB 01 F6 | 	mov	result1, local05
0939c     21 FD 01 F6 | 	mov	result2, local15
093a0     A7 F0 03 F6 | 	mov	ptra, fp
093a4     B2 00 A0 FD | 	call	#popregs_
093a8                 | _compile_input_ret
093a8     2D 00 64 FD | 	ret
093ac                 | 
093ac                 | ' 
093ac                 | ' '----- compile assign to an array element
093ac                 | ' 
093ac                 | ' function compile_array_assign() as ulong 
093ac                 | _compile_array_assign
093ac     0B 4A 05 F6 | 	mov	COUNT_, #11
093b0     A8 00 A0 FD | 	call	#pushregs_
093b4     00 2C 06 F6 | 	mov	local04, #0
093b8     00 2E 06 F6 | 	mov	local05, #0
093bc     37 00 00 FF 
093c0     44 E4 05 F1 | 	add	objptr, ##28228
093c4     F2 30 02 FB | 	rdlong	local06, objptr
093c8     18 FB 01 F6 | 	mov	result1, local06
093cc     01 FA 85 F1 | 	sub	result1, #1
093d0     03 FA 65 F0 | 	shl	result1, #3
093d4     02 00 00 FF 
093d8     38 E4 85 F1 | 	sub	objptr, ##1080
093dc     F2 FA 01 F1 | 	add	result1, objptr
093e0     FD 32 02 FB | 	rdlong	local07, result1
093e4                 | ' numpar=0 : err=0
093e4                 | ' varname$=lparts(ct-1).part$
093e4                 | ' if lparts(ct).token=token_lpar then
093e4     03 30 66 F0 | 	shl	local06, #3
093e8     F2 30 02 F1 | 	add	local06, objptr
093ec     04 30 06 F1 | 	add	local06, #4
093f0     18 31 02 FB | 	rdlong	local06, local06
093f4     15 30 0E F2 | 	cmp	local06, #21 wz
093f8     35 00 00 FF 
093fc     0C E4 85 F1 | 	sub	objptr, ##27148
09400     F4 01 90 5D |  if_ne	jmp	#LR__0844
09404     37 00 00 FF 
09408     44 E4 05 F1 | 	add	objptr, ##28228
0940c     F2 34 02 FB | 	rdlong	local08, objptr
09410     01 34 06 F1 | 	add	local08, #1
09414     F2 34 62 FC | 	wrlong	local08, objptr
09418     37 00 00 FF 
0941c     44 E4 85 F1 | 	sub	objptr, ##28228
09420                 | '   ct+=1 											' omit this lpar, this is for expr list
09420                 | '   do
09420                 | LR__0840
09420     C8 2A B0 FD | 	call	#_expr
09424     37 00 00 FF 
09428     44 E4 05 F1 | 	add	objptr, ##28228
0942c     F2 30 02 FB | 	rdlong	local06, objptr
09430     01 30 06 F1 | 	add	local06, #1
09434     F2 30 62 FC | 	wrlong	local06, objptr
09438     01 2C 06 F1 | 	add	local04, #1
0943c     01 30 86 F1 | 	sub	local06, #1
09440     03 30 66 F0 | 	shl	local06, #3
09444     02 00 00 FF 
09448     38 E4 85 F1 | 	sub	objptr, ##1080
0944c     F2 30 02 F1 | 	add	local06, objptr
09450     04 30 06 F1 | 	add	local06, #4
09454     18 35 02 FB | 	rdlong	local08, local06
09458     14 34 0E F2 | 	cmp	local08, #20 wz
0945c     35 00 00 FF 
09460     0C E4 85 F1 | 	sub	objptr, ##27148
09464     34 00 90 AD |  if_e	jmp	#LR__0841
09468     37 00 00 FF 
0946c     44 E4 05 F1 | 	add	objptr, ##28228
09470     F2 34 02 FB | 	rdlong	local08, objptr
09474     03 34 66 F0 | 	shl	local08, #3
09478     02 00 00 FF 
0947c     38 E4 85 F1 | 	sub	objptr, ##1080
09480     F2 34 02 F1 | 	add	local08, objptr
09484     04 34 06 F1 | 	add	local08, #4
09488     1A 35 02 FB | 	rdlong	local08, local08
0948c     FE 35 0E F2 | 	cmp	local08, #510 wz
09490     35 00 00 FF 
09494     0C E4 85 F1 | 	sub	objptr, ##27148
09498     84 FF 9F 5D |  if_ne	jmp	#LR__0840
0949c                 | LR__0841
0949c     37 00 00 FF 
094a0     44 E4 05 F1 | 	add	objptr, ##28228
094a4     F2 34 02 FB | 	rdlong	local08, objptr
094a8     01 34 06 F1 | 	add	local08, #1
094ac     F2 34 62 FC | 	wrlong	local08, objptr
094b0     37 00 00 FF 
094b4     44 E4 85 F1 | 	sub	objptr, ##28228
094b8     30 2A B0 FD | 	call	#_expr
094bc     01 36 66 F6 | 	neg	local09, #1
094c0     00 38 06 F6 | 	mov	local10, #0
094c4                 | '   ct+=1 : expr()
094c4                 | '   j=-1 : i=0 
094c4                 | '   do 
094c4                 | LR__0842
094c4                 | '     if variables(i).name=varname$ then j=i: exit loop
094c4     1C 31 02 F6 | 	mov	local06, local10
094c8     04 30 66 F0 | 	shl	local06, #4
094cc     14 00 00 FF 
094d0     F8 E5 05 F1 | 	add	objptr, ##10744
094d4     F2 30 02 F1 | 	add	local06, objptr
094d8     18 13 02 FB | 	rdlong	arg01, local06
094dc     19 15 02 F6 | 	mov	arg02, local07
094e0     14 00 00 FF 
094e4     F8 E5 85 F1 | 	sub	objptr, ##10744
094e8     D8 DB B1 FD | 	call	#__system___string_cmp
094ec     00 FA 0D F2 | 	cmp	result1, #0 wz
094f0     1C 37 02 A6 |  if_e	mov	local09, local10
094f4     20 00 90 AD |  if_e	jmp	#LR__0843
094f8     01 38 06 F1 | 	add	local10, #1
094fc     35 00 00 FF 
09500     08 E4 05 F1 | 	add	objptr, ##27144
09504     F2 34 02 FB | 	rdlong	local08, objptr
09508     35 00 00 FF 
0950c     08 E4 85 F1 | 	sub	objptr, ##27144
09510     1A 39 5A F2 | 	cmps	local10, local08 wcz
09514     AC FF 9F ED |  if_be	jmp	#LR__0842
09518                 | LR__0843
09518     1B 27 02 F6 | 	mov	local01, local09
0951c     16 29 02 F6 | 	mov	local02, local04
09520     17 2A 06 F6 | 	mov	local03, #23
09524     13 35 02 F6 | 	mov	local08, local01
09528     14 3B 02 F6 | 	mov	local11, local02
0952c     15 33 02 F6 | 	mov	local07, local03
09530     4A 00 00 FF 
09534     7C E4 05 F1 | 	add	objptr, ##38012
09538     F2 26 02 FB | 	rdlong	local01, objptr
0953c     13 37 02 F6 | 	mov	local09, local01
09540     01 36 66 F0 | 	shl	local09, #1
09544     13 37 02 F1 | 	add	local09, local01
09548     02 36 66 F0 | 	shl	local09, #2
0954c     03 00 00 FF 
09550     00 E4 85 F1 | 	sub	objptr, ##1536
09554     F2 36 02 F1 | 	add	local09, objptr
09558     1B 35 62 FC | 	wrlong	local08, local09
0955c     03 00 00 FF 
09560     00 E4 05 F1 | 	add	objptr, ##1536
09564     F2 26 02 FB | 	rdlong	local01, objptr
09568     13 37 02 F6 | 	mov	local09, local01
0956c     01 36 66 F0 | 	shl	local09, #1
09570     13 37 02 F1 | 	add	local09, local01
09574     02 36 66 F0 | 	shl	local09, #2
09578     03 00 00 FF 
0957c     00 E4 85 F1 | 	sub	objptr, ##1536
09580     F2 36 02 F1 | 	add	local09, objptr
09584     04 36 06 F1 | 	add	local09, #4
09588     1B 3B 62 FC | 	wrlong	local11, local09
0958c     03 00 00 FF 
09590     00 E4 05 F1 | 	add	objptr, ##1536
09594     F2 3A 02 FB | 	rdlong	local11, objptr
09598     1D 27 02 F6 | 	mov	local01, local11
0959c     01 26 66 F0 | 	shl	local01, #1
095a0     1D 27 02 F1 | 	add	local01, local11
095a4     02 26 66 F0 | 	shl	local01, #2
095a8     03 00 00 FF 
095ac     00 E4 85 F1 | 	sub	objptr, ##1536
095b0     F2 26 02 F1 | 	add	local01, objptr
095b4     08 26 06 F1 | 	add	local01, #8
095b8     13 33 62 FC | 	wrlong	local07, local01
095bc     03 00 00 FF 
095c0     00 E4 05 F1 | 	add	objptr, ##1536
095c4     F2 34 02 FB | 	rdlong	local08, objptr
095c8     01 34 06 F1 | 	add	local08, #1
095cc     F2 34 62 FC | 	wrlong	local08, objptr
095d0                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
095d0                 | '   if numpar>3 then err=45
095d0     04 2C 16 F2 | 	cmp	local04, #4 wc
095d4     2D 2E 06 36 |  if_ae	mov	local05, #45
095d8                 | '   if i>varnum then err=20
095d8     15 00 00 FF 
095dc     74 E4 85 F1 | 	sub	objptr, ##10868
095e0     F2 34 02 FB | 	rdlong	local08, objptr
095e4     35 00 00 FF 
095e8     08 E4 85 F1 | 	sub	objptr, ##27144
095ec     1A 39 5A F2 | 	cmps	local10, local08 wcz
095f0     14 2E 06 16 |  if_a	mov	local05, #20
095f4     04 00 90 FD | 	jmp	#LR__0845
095f8                 | LR__0844
095f8     0E 2E 06 F6 | 	mov	local05, #14
095fc                 | LR__0845
095fc                 | ' return err
095fc     17 FB 01 F6 | 	mov	result1, local05
09600     A7 F0 03 F6 | 	mov	ptra, fp
09604     B2 00 A0 FD | 	call	#popregs_
09608                 | _compile_array_assign_ret
09608     2D 00 64 FD | 	ret
0960c                 | 
0960c                 | ' 
0960c                 | ' '----- compile print command with its ";" and "," modifiers
0960c                 | ' 
0960c                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
0960c                 | _compile_print
0960c     0B 4A 05 F6 | 	mov	COUNT_, #11
09610     A8 00 A0 FD | 	call	#pushregs_
09614     00 26 06 F6 | 	mov	local01, #0
09618     1D 2A 06 F6 | 	mov	local03, #29
0961c                 | ' t1.result.uresult=0 : t1.result_type=result_uint
0961c                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
0961c     37 00 00 FF 
09620     44 E4 05 F1 | 	add	objptr, ##28228
09624     F2 2C 02 FB | 	rdlong	local04, objptr
09628     03 2C 66 F0 | 	shl	local04, #3
0962c     02 00 00 FF 
09630     38 E4 85 F1 | 	sub	objptr, ##1080
09634     F2 2C 02 F1 | 	add	local04, objptr
09638     04 2C 06 F1 | 	add	local04, #4
0963c     16 2D 02 FB | 	rdlong	local04, local04
09640     FE 2D 0E F2 | 	cmp	local04, #510 wz
09644     35 00 00 FF 
09648     0C E4 85 F1 | 	sub	objptr, ##27148
0964c     68 01 90 5D |  if_ne	jmp	#LR__0850
09650     20 2A 06 F6 | 	mov	local03, #32
09654     13 2F 02 F6 | 	mov	local05, local01
09658     14 31 02 F6 | 	mov	local06, local02
0965c     15 33 02 F6 | 	mov	local07, local03
09660     4A 00 00 FF 
09664     7C E4 05 F1 | 	add	objptr, ##38012
09668     F2 34 02 FB | 	rdlong	local08, objptr
0966c     1A 37 02 F6 | 	mov	local09, local08
09670     01 36 66 F0 | 	shl	local09, #1
09674     1A 37 02 F1 | 	add	local09, local08
09678     02 36 66 F0 | 	shl	local09, #2
0967c     03 00 00 FF 
09680     00 E4 85 F1 | 	sub	objptr, ##1536
09684     F2 36 02 F1 | 	add	local09, objptr
09688     1B 2F 62 FC | 	wrlong	local05, local09
0968c     03 00 00 FF 
09690     00 E4 05 F1 | 	add	objptr, ##1536
09694     F2 2E 02 FB | 	rdlong	local05, objptr
09698     17 39 02 F6 | 	mov	local10, local05
0969c     01 38 66 F0 | 	shl	local10, #1
096a0     17 39 02 F1 | 	add	local10, local05
096a4     02 38 66 F0 | 	shl	local10, #2
096a8     03 00 00 FF 
096ac     00 E4 85 F1 | 	sub	objptr, ##1536
096b0     F2 38 02 F1 | 	add	local10, objptr
096b4     04 38 06 F1 | 	add	local10, #4
096b8     1C 31 62 FC | 	wrlong	local06, local10
096bc     03 00 00 FF 
096c0     00 E4 05 F1 | 	add	objptr, ##1536
096c4     F2 2E 02 FB | 	rdlong	local05, objptr
096c8     17 3B 02 F6 | 	mov	local11, local05
096cc     01 3A 66 F0 | 	shl	local11, #1
096d0     17 3B 02 F1 | 	add	local11, local05
096d4     02 3A 66 F0 | 	shl	local11, #2
096d8     03 00 00 FF 
096dc     00 E4 85 F1 | 	sub	objptr, ##1536
096e0     F2 3A 02 F1 | 	add	local11, objptr
096e4     08 3A 06 F1 | 	add	local11, #8
096e8     1D 33 62 FC | 	wrlong	local07, local11
096ec     03 00 00 FF 
096f0     00 E4 05 F1 | 	add	objptr, ##1536
096f4     F2 2E 02 FB | 	rdlong	local05, objptr
096f8     01 2E 06 F1 | 	add	local05, #1
096fc     F2 2E 62 FC | 	wrlong	local05, objptr
09700     44 2A 06 F6 | 	mov	local03, #68
09704     13 2F 02 F6 | 	mov	local05, local01
09708     14 31 02 F6 | 	mov	local06, local02
0970c     15 33 02 F6 | 	mov	local07, local03
09710     F2 34 02 FB | 	rdlong	local08, objptr
09714     1A 37 02 F6 | 	mov	local09, local08
09718     01 36 66 F0 | 	shl	local09, #1
0971c     1A 37 02 F1 | 	add	local09, local08
09720     02 36 66 F0 | 	shl	local09, #2
09724     03 00 00 FF 
09728     00 E4 85 F1 | 	sub	objptr, ##1536
0972c     F2 36 02 F1 | 	add	local09, objptr
09730     1B 2F 62 FC | 	wrlong	local05, local09
09734     03 00 00 FF 
09738     00 E4 05 F1 | 	add	objptr, ##1536
0973c     F2 3A 02 FB | 	rdlong	local11, objptr
09740     1D 39 02 F6 | 	mov	local10, local11
09744     01 38 66 F0 | 	shl	local10, #1
09748     1D 39 02 F1 | 	add	local10, local11
0974c     02 38 66 F0 | 	shl	local10, #2
09750     03 00 00 FF 
09754     00 E4 85 F1 | 	sub	objptr, ##1536
09758     F2 38 02 F1 | 	add	local10, objptr
0975c     04 38 06 F1 | 	add	local10, #4
09760     1C 31 62 FC | 	wrlong	local06, local10
09764     03 00 00 FF 
09768     00 E4 05 F1 | 	add	objptr, ##1536
0976c     F2 38 02 FB | 	rdlong	local10, objptr
09770     1C 3B 02 F6 | 	mov	local11, local10
09774     01 3A 66 F0 | 	shl	local11, #1
09778     1C 3B 02 F1 | 	add	local11, local10
0977c     02 3A 66 F0 | 	shl	local11, #2
09780     03 00 00 FF 
09784     00 E4 85 F1 | 	sub	objptr, ##1536
09788     F2 3A 02 F1 | 	add	local11, objptr
0978c     08 3A 06 F1 | 	add	local11, #8
09790     1D 33 62 FC | 	wrlong	local07, local11
09794     03 00 00 FF 
09798     00 E4 05 F1 | 	add	objptr, ##1536
0979c     F2 2E 02 FB | 	rdlong	local05, objptr
097a0     01 2E 06 F1 | 	add	local05, #1
097a4     F2 2E 62 FC | 	wrlong	local05, objptr
097a8     4A 00 00 FF 
097ac     7C E4 85 F1 | 	sub	objptr, ##38012
097b0     00 FA 05 F6 | 	mov	result1, #0
097b4     20 05 90 FD | 	jmp	#LR__0857
097b8                 | LR__0850
097b8                 | ' do
097b8                 | LR__0851
097b8     30 27 B0 FD | 	call	#_expr
097bc                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
097bc                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
097bc     37 00 00 FF 
097c0     44 E4 05 F1 | 	add	objptr, ##28228
097c4     F2 2C 02 FB | 	rdlong	local04, objptr
097c8     03 2C 66 F0 | 	shl	local04, #3
097cc     02 00 00 FF 
097d0     38 E4 85 F1 | 	sub	objptr, ##1080
097d4     F2 2C 02 F1 | 	add	local04, objptr
097d8     04 2C 06 F1 | 	add	local04, #4
097dc     16 35 02 FB | 	rdlong	local08, local04
097e0     11 34 0E F2 | 	cmp	local08, #17 wz
097e4     35 00 00 FF 
097e8     0C E4 85 F1 | 	sub	objptr, ##27148
097ec     60 01 90 5D |  if_ne	jmp	#LR__0852
097f0     21 2A 06 F6 | 	mov	local03, #33
097f4     13 2F 02 F6 | 	mov	local05, local01
097f8     14 31 02 F6 | 	mov	local06, local02
097fc     15 33 02 F6 | 	mov	local07, local03
09800     4A 00 00 FF 
09804     7C E4 05 F1 | 	add	objptr, ##38012
09808     F2 34 02 FB | 	rdlong	local08, objptr
0980c     1A 37 02 F6 | 	mov	local09, local08
09810     01 36 66 F0 | 	shl	local09, #1
09814     1A 37 02 F1 | 	add	local09, local08
09818     02 36 66 F0 | 	shl	local09, #2
0981c     03 00 00 FF 
09820     00 E4 85 F1 | 	sub	objptr, ##1536
09824     F2 36 02 F1 | 	add	local09, objptr
09828     1B 2F 62 FC | 	wrlong	local05, local09
0982c     03 00 00 FF 
09830     00 E4 05 F1 | 	add	objptr, ##1536
09834     F2 3A 02 FB | 	rdlong	local11, objptr
09838     1D 39 02 F6 | 	mov	local10, local11
0983c     01 38 66 F0 | 	shl	local10, #1
09840     1D 39 02 F1 | 	add	local10, local11
09844     02 38 66 F0 | 	shl	local10, #2
09848     03 00 00 FF 
0984c     00 E4 85 F1 | 	sub	objptr, ##1536
09850     F2 38 02 F1 | 	add	local10, objptr
09854     04 38 06 F1 | 	add	local10, #4
09858     1C 31 62 FC | 	wrlong	local06, local10
0985c     03 00 00 FF 
09860     00 E4 05 F1 | 	add	objptr, ##1536
09864     F2 2E 02 FB | 	rdlong	local05, objptr
09868     17 3B 02 F6 | 	mov	local11, local05
0986c     01 3A 66 F0 | 	shl	local11, #1
09870     17 3B 02 F1 | 	add	local11, local05
09874     02 3A 66 F0 | 	shl	local11, #2
09878     03 00 00 FF 
0987c     00 E4 85 F1 | 	sub	objptr, ##1536
09880     F2 3A 02 F1 | 	add	local11, objptr
09884     08 3A 06 F1 | 	add	local11, #8
09888     1D 33 62 FC | 	wrlong	local07, local11
0988c     03 00 00 FF 
09890     00 E4 05 F1 | 	add	objptr, ##1536
09894     F2 2E 02 FB | 	rdlong	local05, objptr
09898     01 2E 06 F1 | 	add	local05, #1
0989c     F2 2E 62 FC | 	wrlong	local05, objptr
098a0     44 2A 06 F6 | 	mov	local03, #68
098a4     13 2F 02 F6 | 	mov	local05, local01
098a8     14 31 02 F6 | 	mov	local06, local02
098ac     15 33 02 F6 | 	mov	local07, local03
098b0     F2 34 02 FB | 	rdlong	local08, objptr
098b4     1A 37 02 F6 | 	mov	local09, local08
098b8     01 36 66 F0 | 	shl	local09, #1
098bc     1A 37 02 F1 | 	add	local09, local08
098c0     02 36 66 F0 | 	shl	local09, #2
098c4     03 00 00 FF 
098c8     00 E4 85 F1 | 	sub	objptr, ##1536
098cc     F2 36 02 F1 | 	add	local09, objptr
098d0     1B 2F 62 FC | 	wrlong	local05, local09
098d4     03 00 00 FF 
098d8     00 E4 05 F1 | 	add	objptr, ##1536
098dc     F2 3A 02 FB | 	rdlong	local11, objptr
098e0     1D 39 02 F6 | 	mov	local10, local11
098e4     01 38 66 F0 | 	shl	local10, #1
098e8     1D 39 02 F1 | 	add	local10, local11
098ec     02 38 66 F0 | 	shl	local10, #2
098f0     03 00 00 FF 
098f4     00 E4 85 F1 | 	sub	objptr, ##1536
098f8     F2 38 02 F1 | 	add	local10, objptr
098fc     04 38 06 F1 | 	add	local10, #4
09900     1C 31 62 FC | 	wrlong	local06, local10
09904     03 00 00 FF 
09908     00 E4 05 F1 | 	add	objptr, ##1536
0990c     F2 38 02 FB | 	rdlong	local10, objptr
09910     1C 3B 02 F6 | 	mov	local11, local10
09914     01 3A 66 F0 | 	shl	local11, #1
09918     1C 3B 02 F1 | 	add	local11, local10
0991c     02 3A 66 F0 | 	shl	local11, #2
09920     03 00 00 FF 
09924     00 E4 85 F1 | 	sub	objptr, ##1536
09928     F2 3A 02 F1 | 	add	local11, objptr
0992c     08 3A 06 F1 | 	add	local11, #8
09930     1D 33 62 FC | 	wrlong	local07, local11
09934     03 00 00 FF 
09938     00 E4 05 F1 | 	add	objptr, ##1536
0993c     F2 2E 02 FB | 	rdlong	local05, objptr
09940     01 2E 06 F1 | 	add	local05, #1
09944     F2 2E 62 FC | 	wrlong	local05, objptr
09948     4A 00 00 FF 
0994c     7C E4 85 F1 | 	sub	objptr, ##38012
09950                 | LR__0852
09950                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09950     37 00 00 FF 
09954     44 E4 05 F1 | 	add	objptr, ##28228
09958     F2 2C 02 FB | 	rdlong	local04, objptr
0995c     03 2C 66 F0 | 	shl	local04, #3
09960     02 00 00 FF 
09964     38 E4 85 F1 | 	sub	objptr, ##1080
09968     F2 2C 02 F1 | 	add	local04, objptr
0996c     04 2C 06 F1 | 	add	local04, #4
09970     16 35 02 FB | 	rdlong	local08, local04
09974     12 34 0E F2 | 	cmp	local08, #18 wz
09978     35 00 00 FF 
0997c     0C E4 85 F1 | 	sub	objptr, ##27148
09980     60 01 90 5D |  if_ne	jmp	#LR__0853
09984     22 2A 06 F6 | 	mov	local03, #34
09988     13 2F 02 F6 | 	mov	local05, local01
0998c     14 31 02 F6 | 	mov	local06, local02
09990     15 33 02 F6 | 	mov	local07, local03
09994     4A 00 00 FF 
09998     7C E4 05 F1 | 	add	objptr, ##38012
0999c     F2 34 02 FB | 	rdlong	local08, objptr
099a0     1A 37 02 F6 | 	mov	local09, local08
099a4     01 36 66 F0 | 	shl	local09, #1
099a8     1A 37 02 F1 | 	add	local09, local08
099ac     02 36 66 F0 | 	shl	local09, #2
099b0     03 00 00 FF 
099b4     00 E4 85 F1 | 	sub	objptr, ##1536
099b8     F2 36 02 F1 | 	add	local09, objptr
099bc     1B 2F 62 FC | 	wrlong	local05, local09
099c0     03 00 00 FF 
099c4     00 E4 05 F1 | 	add	objptr, ##1536
099c8     F2 3A 02 FB | 	rdlong	local11, objptr
099cc     1D 39 02 F6 | 	mov	local10, local11
099d0     01 38 66 F0 | 	shl	local10, #1
099d4     1D 39 02 F1 | 	add	local10, local11
099d8     02 38 66 F0 | 	shl	local10, #2
099dc     03 00 00 FF 
099e0     00 E4 85 F1 | 	sub	objptr, ##1536
099e4     F2 38 02 F1 | 	add	local10, objptr
099e8     04 38 06 F1 | 	add	local10, #4
099ec     1C 31 62 FC | 	wrlong	local06, local10
099f0     03 00 00 FF 
099f4     00 E4 05 F1 | 	add	objptr, ##1536
099f8     F2 2E 02 FB | 	rdlong	local05, objptr
099fc     17 3B 02 F6 | 	mov	local11, local05
09a00     01 3A 66 F0 | 	shl	local11, #1
09a04     17 3B 02 F1 | 	add	local11, local05
09a08     02 3A 66 F0 | 	shl	local11, #2
09a0c     03 00 00 FF 
09a10     00 E4 85 F1 | 	sub	objptr, ##1536
09a14     F2 3A 02 F1 | 	add	local11, objptr
09a18     08 3A 06 F1 | 	add	local11, #8
09a1c     1D 33 62 FC | 	wrlong	local07, local11
09a20     03 00 00 FF 
09a24     00 E4 05 F1 | 	add	objptr, ##1536
09a28     F2 2E 02 FB | 	rdlong	local05, objptr
09a2c     01 2E 06 F1 | 	add	local05, #1
09a30     F2 2E 62 FC | 	wrlong	local05, objptr
09a34     44 2A 06 F6 | 	mov	local03, #68
09a38     13 2F 02 F6 | 	mov	local05, local01
09a3c     14 31 02 F6 | 	mov	local06, local02
09a40     15 33 02 F6 | 	mov	local07, local03
09a44     F2 34 02 FB | 	rdlong	local08, objptr
09a48     1A 37 02 F6 | 	mov	local09, local08
09a4c     01 36 66 F0 | 	shl	local09, #1
09a50     1A 37 02 F1 | 	add	local09, local08
09a54     02 36 66 F0 | 	shl	local09, #2
09a58     03 00 00 FF 
09a5c     00 E4 85 F1 | 	sub	objptr, ##1536
09a60     F2 36 02 F1 | 	add	local09, objptr
09a64     1B 2F 62 FC | 	wrlong	local05, local09
09a68     03 00 00 FF 
09a6c     00 E4 05 F1 | 	add	objptr, ##1536
09a70     F2 3A 02 FB | 	rdlong	local11, objptr
09a74     1D 39 02 F6 | 	mov	local10, local11
09a78     01 38 66 F0 | 	shl	local10, #1
09a7c     1D 39 02 F1 | 	add	local10, local11
09a80     02 38 66 F0 | 	shl	local10, #2
09a84     03 00 00 FF 
09a88     00 E4 85 F1 | 	sub	objptr, ##1536
09a8c     F2 38 02 F1 | 	add	local10, objptr
09a90     04 38 06 F1 | 	add	local10, #4
09a94     1C 31 62 FC | 	wrlong	local06, local10
09a98     03 00 00 FF 
09a9c     00 E4 05 F1 | 	add	objptr, ##1536
09aa0     F2 38 02 FB | 	rdlong	local10, objptr
09aa4     1C 3B 02 F6 | 	mov	local11, local10
09aa8     01 3A 66 F0 | 	shl	local11, #1
09aac     1C 3B 02 F1 | 	add	local11, local10
09ab0     02 3A 66 F0 | 	shl	local11, #2
09ab4     03 00 00 FF 
09ab8     00 E4 85 F1 | 	sub	objptr, ##1536
09abc     F2 3A 02 F1 | 	add	local11, objptr
09ac0     08 3A 06 F1 | 	add	local11, #8
09ac4     1D 33 62 FC | 	wrlong	local07, local11
09ac8     03 00 00 FF 
09acc     00 E4 05 F1 | 	add	objptr, ##1536
09ad0     F2 2E 02 FB | 	rdlong	local05, objptr
09ad4     01 2E 06 F1 | 	add	local05, #1
09ad8     F2 2E 62 FC | 	wrlong	local05, objptr
09adc     4A 00 00 FF 
09ae0     7C E4 85 F1 | 	sub	objptr, ##38012
09ae4                 | LR__0853
09ae4                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09ae4     37 00 00 FF 
09ae8     44 E4 05 F1 | 	add	objptr, ##28228
09aec     F2 2C 02 FB | 	rdlong	local04, objptr
09af0     03 2C 66 F0 | 	shl	local04, #3
09af4     02 00 00 FF 
09af8     38 E4 85 F1 | 	sub	objptr, ##1080
09afc     F2 2C 02 F1 | 	add	local04, objptr
09b00     04 2C 06 F1 | 	add	local04, #4
09b04     16 35 02 FB | 	rdlong	local08, local04
09b08     FE 35 0E F2 | 	cmp	local08, #510 wz
09b0c     35 00 00 FF 
09b10     0C E4 85 F1 | 	sub	objptr, ##27148
09b14     B8 00 90 5D |  if_ne	jmp	#LR__0854
09b18     44 2A 06 F6 | 	mov	local03, #68
09b1c     13 2F 02 F6 | 	mov	local05, local01
09b20     14 31 02 F6 | 	mov	local06, local02
09b24     15 33 02 F6 | 	mov	local07, local03
09b28     4A 00 00 FF 
09b2c     7C E4 05 F1 | 	add	objptr, ##38012
09b30     F2 34 02 FB | 	rdlong	local08, objptr
09b34     1A 37 02 F6 | 	mov	local09, local08
09b38     01 36 66 F0 | 	shl	local09, #1
09b3c     1A 37 02 F1 | 	add	local09, local08
09b40     02 36 66 F0 | 	shl	local09, #2
09b44     03 00 00 FF 
09b48     00 E4 85 F1 | 	sub	objptr, ##1536
09b4c     F2 36 02 F1 | 	add	local09, objptr
09b50     1B 2F 62 FC | 	wrlong	local05, local09
09b54     03 00 00 FF 
09b58     00 E4 05 F1 | 	add	objptr, ##1536
09b5c     F2 3A 02 FB | 	rdlong	local11, objptr
09b60     1D 39 02 F6 | 	mov	local10, local11
09b64     01 38 66 F0 | 	shl	local10, #1
09b68     1D 39 02 F1 | 	add	local10, local11
09b6c     02 38 66 F0 | 	shl	local10, #2
09b70     03 00 00 FF 
09b74     00 E4 85 F1 | 	sub	objptr, ##1536
09b78     F2 38 02 F1 | 	add	local10, objptr
09b7c     04 38 06 F1 | 	add	local10, #4
09b80     1C 31 62 FC | 	wrlong	local06, local10
09b84     03 00 00 FF 
09b88     00 E4 05 F1 | 	add	objptr, ##1536
09b8c     F2 38 02 FB | 	rdlong	local10, objptr
09b90     1C 3B 02 F6 | 	mov	local11, local10
09b94     01 3A 66 F0 | 	shl	local11, #1
09b98     1C 3B 02 F1 | 	add	local11, local10
09b9c     02 3A 66 F0 | 	shl	local11, #2
09ba0     03 00 00 FF 
09ba4     00 E4 85 F1 | 	sub	objptr, ##1536
09ba8     F2 3A 02 F1 | 	add	local11, objptr
09bac     08 3A 06 F1 | 	add	local11, #8
09bb0     1D 33 62 FC | 	wrlong	local07, local11
09bb4     03 00 00 FF 
09bb8     00 E4 05 F1 | 	add	objptr, ##1536
09bbc     F2 2E 02 FB | 	rdlong	local05, objptr
09bc0     01 2E 06 F1 | 	add	local05, #1
09bc4     F2 2E 62 FC | 	wrlong	local05, objptr
09bc8     4A 00 00 FF 
09bcc     7C E4 85 F1 | 	sub	objptr, ##38012
09bd0                 | LR__0854
09bd0                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09bd0     37 00 00 FF 
09bd4     44 E4 05 F1 | 	add	objptr, ##28228
09bd8     F2 2C 02 FB | 	rdlong	local04, objptr
09bdc     03 2C 66 F0 | 	shl	local04, #3
09be0     02 00 00 FF 
09be4     38 E4 85 F1 | 	sub	objptr, ##1080
09be8     F2 2C 02 F1 | 	add	local04, objptr
09bec     04 2C 06 F1 | 	add	local04, #4
09bf0     16 35 02 FB | 	rdlong	local08, local04
09bf4     11 34 0E F2 | 	cmp	local08, #17 wz
09bf8     35 00 00 FF 
09bfc     0C E4 85 F1 | 	sub	objptr, ##27148
09c00     6C 00 90 AD |  if_e	jmp	#LR__0855
09c04     37 00 00 FF 
09c08     44 E4 05 F1 | 	add	objptr, ##28228
09c0c     F2 34 02 FB | 	rdlong	local08, objptr
09c10     03 34 66 F0 | 	shl	local08, #3
09c14     02 00 00 FF 
09c18     38 E4 85 F1 | 	sub	objptr, ##1080
09c1c     F2 34 02 F1 | 	add	local08, objptr
09c20     04 34 06 F1 | 	add	local08, #4
09c24     1A 35 02 FB | 	rdlong	local08, local08
09c28     12 34 0E F2 | 	cmp	local08, #18 wz
09c2c     35 00 00 FF 
09c30     0C E4 85 F1 | 	sub	objptr, ##27148
09c34     38 00 90 AD |  if_e	jmp	#LR__0855
09c38     37 00 00 FF 
09c3c     44 E4 05 F1 | 	add	objptr, ##28228
09c40     F2 3A 02 FB | 	rdlong	local11, objptr
09c44     03 3A 66 F0 | 	shl	local11, #3
09c48     02 00 00 FF 
09c4c     38 E4 85 F1 | 	sub	objptr, ##1080
09c50     F2 3A 02 F1 | 	add	local11, objptr
09c54     04 3A 06 F1 | 	add	local11, #4
09c58     1D 3B 02 FB | 	rdlong	local11, local11
09c5c     FE 3B 0E F2 | 	cmp	local11, #510 wz
09c60     35 00 00 FF 
09c64     0C E4 85 F1 | 	sub	objptr, ##27148
09c68     16 FA 05 56 |  if_ne	mov	result1, #22
09c6c     68 00 90 5D |  if_ne	jmp	#LR__0857
09c70                 | LR__0855
09c70     37 00 00 FF 
09c74     44 E4 05 F1 | 	add	objptr, ##28228
09c78     F2 2C 02 FB | 	rdlong	local04, objptr
09c7c     01 2C 06 F1 | 	add	local04, #1
09c80     F2 2C 62 FC | 	wrlong	local04, objptr
09c84     03 2C 66 F0 | 	shl	local04, #3
09c88     02 00 00 FF 
09c8c     38 E4 85 F1 | 	sub	objptr, ##1080
09c90     F2 2C 02 F1 | 	add	local04, objptr
09c94     04 2C 06 F1 | 	add	local04, #4
09c98     16 35 02 FB | 	rdlong	local08, local04
09c9c     FE 35 0E F2 | 	cmp	local08, #510 wz
09ca0     35 00 00 FF 
09ca4     0C E4 85 F1 | 	sub	objptr, ##27148
09ca8     28 00 90 AD |  if_e	jmp	#LR__0856
09cac     37 00 00 FF 
09cb0     44 E4 05 F1 | 	add	objptr, ##28228
09cb4     F2 3A 02 FB | 	rdlong	local11, objptr
09cb8     0E 00 00 FF 
09cbc     1C E4 05 F1 | 	add	objptr, ##7196
09cc0     F2 38 02 FB | 	rdlong	local10, objptr
09cc4     45 00 00 FF 
09cc8     60 E4 85 F1 | 	sub	objptr, ##35424
09ccc     1C 3B 52 F2 | 	cmps	local11, local10 wc
09cd0     E4 FA 9F CD |  if_b	jmp	#LR__0851
09cd4                 | LR__0856
09cd4                 | ' return 0
09cd4     00 FA 05 F6 | 	mov	result1, #0
09cd8                 | LR__0857
09cd8     A7 F0 03 F6 | 	mov	ptra, fp
09cdc     B2 00 A0 FD | 	call	#popregs_
09ce0                 | _compile_print_ret
09ce0     2D 00 64 FD | 	ret
09ce4                 | 
09ce4                 | ' 
09ce4                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09ce4                 | ' 
09ce4                 | ' function compile_if(aline as ulong) as ulong  
09ce4                 | _compile_if
09ce4     09 4A 05 F6 | 	mov	COUNT_, #9
09ce8     A8 00 A0 FD | 	call	#pushregs_
09cec                 | _compile_if_enter
09cec     09 2D 02 F6 | 	mov	local04, arg01
09cf0                 | ' return expr()
09cf0     F8 21 B0 FD | 	call	#_expr
09cf4     37 00 00 FF 
09cf8     44 E4 05 F1 | 	add	objptr, ##28228
09cfc     F2 14 02 FB | 	rdlong	arg02, objptr
09d00     0A 2F 02 F6 | 	mov	local05, arg02
09d04     03 2E 66 F0 | 	shl	local05, #3
09d08     02 00 00 FF 
09d0c     38 E4 85 F1 | 	sub	objptr, ##1080
09d10     F2 2E 02 F1 | 	add	local05, objptr
09d14     04 2E 06 F1 | 	add	local05, #4
09d18     17 2F 02 FB | 	rdlong	local05, local05
09d1c     01 14 06 F1 | 	add	arg02, #1
09d20     02 00 00 FF 
09d24     38 E4 05 F1 | 	add	objptr, ##1080
09d28     F2 14 62 FC | 	wrlong	arg02, objptr
09d2c     37 00 00 FF 
09d30     44 E4 85 F1 | 	sub	objptr, ##28228
09d34                 | ' 
09d34                 | ' err=compile_fun_1p()
09d34                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09d34     5B 2E 0E F2 | 	cmp	local05, #91 wz
09d38     34 FA 05 56 |  if_ne	mov	result1, #52
09d3c     20 01 90 5D |  if_ne	jmp	#LR__0862
09d40     58 2A 06 F6 | 	mov	local03, #88
09d44     13 31 02 F6 | 	mov	local06, local01
09d48     14 33 02 F6 | 	mov	local07, local02
09d4c     15 15 02 F6 | 	mov	arg02, local03
09d50     4A 00 00 FF 
09d54     7C E4 05 F1 | 	add	objptr, ##38012
09d58     F2 12 02 FB | 	rdlong	arg01, objptr
09d5c     09 35 02 F6 | 	mov	local08, arg01
09d60     01 34 66 F0 | 	shl	local08, #1
09d64     09 35 02 F1 | 	add	local08, arg01
09d68     02 34 66 F0 | 	shl	local08, #2
09d6c     03 00 00 FF 
09d70     00 E4 85 F1 | 	sub	objptr, ##1536
09d74     F2 34 02 F1 | 	add	local08, objptr
09d78     1A 31 62 FC | 	wrlong	local06, local08
09d7c     03 00 00 FF 
09d80     00 E4 05 F1 | 	add	objptr, ##1536
09d84     F2 30 02 FB | 	rdlong	local06, objptr
09d88     18 13 02 F6 | 	mov	arg01, local06
09d8c     01 12 66 F0 | 	shl	arg01, #1
09d90     18 13 02 F1 | 	add	arg01, local06
09d94     02 12 66 F0 | 	shl	arg01, #2
09d98     03 00 00 FF 
09d9c     00 E4 85 F1 | 	sub	objptr, ##1536
09da0     F2 12 02 F1 | 	add	arg01, objptr
09da4     04 12 06 F1 | 	add	arg01, #4
09da8     09 33 62 FC | 	wrlong	local07, arg01
09dac     03 00 00 FF 
09db0     00 E4 05 F1 | 	add	objptr, ##1536
09db4     F2 30 02 FB | 	rdlong	local06, objptr
09db8     18 13 02 F6 | 	mov	arg01, local06
09dbc     01 12 66 F0 | 	shl	arg01, #1
09dc0     18 13 02 F1 | 	add	arg01, local06
09dc4     02 12 66 F0 | 	shl	arg01, #2
09dc8     03 00 00 FF 
09dcc     00 E4 85 F1 | 	sub	objptr, ##1536
09dd0     F2 12 02 F1 | 	add	arg01, objptr
09dd4     08 12 06 F1 | 	add	arg01, #8
09dd8     09 15 62 FC | 	wrlong	arg02, arg01
09ddc     03 00 00 FF 
09de0     00 E4 05 F1 | 	add	objptr, ##1536
09de4     F2 30 02 FB | 	rdlong	local06, objptr
09de8     01 30 06 F1 | 	add	local06, #1
09dec     F2 30 62 FC | 	wrlong	local06, objptr
09df0                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09df0                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09df0     13 00 00 FF 
09df4     38 E4 85 F1 | 	sub	objptr, ##9784
09df8     F2 14 02 FB | 	rdlong	arg02, objptr
09dfc     01 14 06 F1 | 	add	arg02, #1
09e00     03 14 66 F0 | 	shl	arg02, #3
09e04     02 00 00 FF 
09e08     38 E4 85 F1 | 	sub	objptr, ##1080
09e0c     F2 14 02 F1 | 	add	arg02, objptr
09e10     0A 13 02 FB | 	rdlong	arg01, arg02
09e14     35 00 00 FF 
09e18     0C E4 85 F1 | 	sub	objptr, ##27148
09e1c                 | ' 
09e1c                 | ' select case s
09e1c     B6 01 00 FF 
09e20     E6 15 06 F6 | 	mov	arg02, ##@LR__5599
09e24     9C D2 B1 FD | 	call	#__system___string_cmp
09e28     00 FA 0D F2 | 	cmp	result1, #0 wz
09e2c     1B FA 05 A6 |  if_e	mov	result1, #27
09e30     00 FA 05 56 |  if_ne	mov	result1, #0
09e34     00 FA 0D F2 | 	cmp	result1, #0 wz
09e38     10 00 90 AD |  if_e	jmp	#LR__0860
09e3c     05 12 06 F6 | 	mov	arg01, #5
09e40     38 E4 BF FD | 	call	#_compile_immediate_assign
09e44     FD 36 02 F6 | 	mov	local09, result1
09e48     10 00 90 FD | 	jmp	#LR__0861
09e4c                 | LR__0860
09e4c     05 12 06 F6 | 	mov	arg01, #5
09e50     16 15 02 F6 | 	mov	arg02, local04
09e54     4C DA BF FD | 	call	#_compile_immediate
09e58     FD 36 02 F6 | 	mov	local09, result1
09e5c                 | LR__0861
09e5c                 | ' return err
09e5c     1B FB 01 F6 | 	mov	result1, local09
09e60                 | LR__0862
09e60     A7 F0 03 F6 | 	mov	ptra, fp
09e64     B2 00 A0 FD | 	call	#popregs_
09e68                 | _compile_if_ret
09e68     2D 00 64 FD | 	ret
09e6c                 | 
09e6c                 | ' 
09e6c                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09e6c                 | ' 
09e6c                 | ' function compile_else(aline as ulong) as ulong  
09e6c                 | _compile_else
09e6c     07 4A 05 F6 | 	mov	COUNT_, #7
09e70     A8 00 A0 FD | 	call	#pushregs_
09e74                 | _compile_else_enter
09e74     09 2D 02 F6 | 	mov	local04, arg01
09e78     5A 2A 06 F6 | 	mov	local03, #90
09e7c     13 2F 02 F6 | 	mov	local05, local01
09e80     14 31 02 F6 | 	mov	local06, local02
09e84     15 27 02 F6 | 	mov	local01, local03
09e88     4A 00 00 FF 
09e8c     7C E4 05 F1 | 	add	objptr, ##38012
09e90     F2 14 02 FB | 	rdlong	arg02, objptr
09e94     0A 13 02 F6 | 	mov	arg01, arg02
09e98     01 12 66 F0 | 	shl	arg01, #1
09e9c     0A 13 02 F1 | 	add	arg01, arg02
09ea0     02 12 66 F0 | 	shl	arg01, #2
09ea4     03 00 00 FF 
09ea8     00 E4 85 F1 | 	sub	objptr, ##1536
09eac     F2 12 02 F1 | 	add	arg01, objptr
09eb0     09 2F 62 FC | 	wrlong	local05, arg01
09eb4     03 00 00 FF 
09eb8     00 E4 05 F1 | 	add	objptr, ##1536
09ebc     F2 2E 02 FB | 	rdlong	local05, objptr
09ec0     17 15 02 F6 | 	mov	arg02, local05
09ec4     01 14 66 F0 | 	shl	arg02, #1
09ec8     17 15 02 F1 | 	add	arg02, local05
09ecc     02 14 66 F0 | 	shl	arg02, #2
09ed0     03 00 00 FF 
09ed4     00 E4 85 F1 | 	sub	objptr, ##1536
09ed8     F2 14 02 F1 | 	add	arg02, objptr
09edc     04 14 06 F1 | 	add	arg02, #4
09ee0     0A 31 62 FC | 	wrlong	local06, arg02
09ee4     03 00 00 FF 
09ee8     00 E4 05 F1 | 	add	objptr, ##1536
09eec     F2 30 02 FB | 	rdlong	local06, objptr
09ef0     18 2F 02 F6 | 	mov	local05, local06
09ef4     01 2E 66 F0 | 	shl	local05, #1
09ef8     18 2F 02 F1 | 	add	local05, local06
09efc     02 2E 66 F0 | 	shl	local05, #2
09f00     03 00 00 FF 
09f04     00 E4 85 F1 | 	sub	objptr, ##1536
09f08     F2 2E 02 F1 | 	add	local05, objptr
09f0c     08 2E 06 F1 | 	add	local05, #8
09f10     17 27 62 FC | 	wrlong	local01, local05
09f14     03 00 00 FF 
09f18     00 E4 05 F1 | 	add	objptr, ##1536
09f1c     F2 2E 02 FB | 	rdlong	local05, objptr
09f20     01 2E 06 F1 | 	add	local05, #1
09f24     F2 2E 62 FC | 	wrlong	local05, objptr
09f28                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09f28                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09f28     13 00 00 FF 
09f2c     38 E4 85 F1 | 	sub	objptr, ##9784
09f30     F2 30 02 FB | 	rdlong	local06, objptr
09f34     01 30 06 F1 | 	add	local06, #1
09f38     03 30 66 F0 | 	shl	local06, #3
09f3c     02 00 00 FF 
09f40     38 E4 85 F1 | 	sub	objptr, ##1080
09f44     F2 30 02 F1 | 	add	local06, objptr
09f48     18 13 02 FB | 	rdlong	arg01, local06
09f4c     35 00 00 FF 
09f50     0C E4 85 F1 | 	sub	objptr, ##27148
09f54                 | ' 
09f54                 | ' select case s
09f54     B6 01 00 FF 
09f58     E6 15 06 F6 | 	mov	arg02, ##@LR__5599
09f5c     64 D1 B1 FD | 	call	#__system___string_cmp
09f60     00 FA 0D F2 | 	cmp	result1, #0 wz
09f64     1B FA 05 A6 |  if_e	mov	result1, #27
09f68     00 FA 05 56 |  if_ne	mov	result1, #0
09f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
09f70     10 00 90 AD |  if_e	jmp	#LR__0870
09f74     05 12 06 F6 | 	mov	arg01, #5
09f78     00 E3 BF FD | 	call	#_compile_immediate_assign
09f7c     FD 32 02 F6 | 	mov	local07, result1
09f80     10 00 90 FD | 	jmp	#LR__0871
09f84                 | LR__0870
09f84     05 12 06 F6 | 	mov	arg01, #5
09f88     16 15 02 F6 | 	mov	arg02, local04
09f8c     14 D9 BF FD | 	call	#_compile_immediate
09f90     FD 32 02 F6 | 	mov	local07, result1
09f94                 | LR__0871
09f94                 | ' return err
09f94     19 FB 01 F6 | 	mov	result1, local07
09f98     A7 F0 03 F6 | 	mov	ptra, fp
09f9c     B2 00 A0 FD | 	call	#popregs_
09fa0                 | _compile_else_ret
09fa0     2D 00 64 FD | 	ret
09fa4                 | 
09fa4                 | ' 
09fa4                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09fa4                 | ' 
09fa4                 | ' function compile_dim() as ulong  
09fa4                 | _compile_dim
09fa4     11 4A 05 F6 | 	mov	COUNT_, #17
09fa8     A8 00 A0 FD | 	call	#pushregs_
09fac     01 26 06 F6 | 	mov	local01, #1
09fb0     01 28 06 F6 | 	mov	local02, #1
09fb4     01 2A 06 F6 | 	mov	local03, #1
09fb8                 | ' 
09fb8                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09fb8                 | ' if isname(lparts(ct).part$) then 
09fb8     37 00 00 FF 
09fbc     44 E4 05 F1 | 	add	objptr, ##28228
09fc0     F2 18 02 FB | 	rdlong	arg04, objptr
09fc4     03 18 66 F0 | 	shl	arg04, #3
09fc8     02 00 00 FF 
09fcc     38 E4 85 F1 | 	sub	objptr, ##1080
09fd0     F2 18 02 F1 | 	add	arg04, objptr
09fd4     0C 13 02 FB | 	rdlong	arg01, arg04
09fd8     35 00 00 FF 
09fdc     0C E4 85 F1 | 	sub	objptr, ##27148
09fe0     18 C7 BF FD | 	call	#_isname
09fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
09fe8     78 05 90 AD |  if_e	jmp	#LR__0903
09fec     37 00 00 FF 
09ff0     44 E4 05 F1 | 	add	objptr, ##28228
09ff4     F2 2C 02 FB | 	rdlong	local04, objptr
09ff8     03 2C 66 F0 | 	shl	local04, #3
09ffc     02 00 00 FF 
0a000     38 E4 85 F1 | 	sub	objptr, ##1080
0a004     F2 2C 02 F1 | 	add	local04, objptr
0a008     16 2F 02 FB | 	rdlong	local05, local04
0a00c     01 30 66 F6 | 	neg	local06, #1
0a010                 | '   varname2$=lparts(ct).part$ 
0a010                 | '   j=-1
0a010                 | '   if varnum>0 then
0a010     04 E4 85 F1 | 	sub	objptr, #4
0a014     F2 32 02 FB | 	rdlong	local07, objptr
0a018     35 00 00 FF 
0a01c     08 E4 85 F1 | 	sub	objptr, ##27144
0a020     01 32 56 F2 | 	cmps	local07, #1 wc
0a024     58 00 90 CD |  if_b	jmp	#LR__0882
0a028                 | '     for i=0 to varnum-1
0a028     00 34 06 F6 | 	mov	local08, #0
0a02c     35 00 00 FF 
0a030     08 E4 05 F1 | 	add	objptr, ##27144
0a034     F2 36 02 FB | 	rdlong	local09, objptr
0a038     35 00 00 FF 
0a03c     08 E4 85 F1 | 	sub	objptr, ##27144
0a040                 | LR__0880
0a040     1B 35 52 F2 | 	cmps	local08, local09 wc
0a044     38 00 90 3D |  if_ae	jmp	#LR__0881
0a048                 | '       if variables(i).name=varname2$ then j=i : exit
0a048     1A 2D 02 F6 | 	mov	local04, local08
0a04c     04 2C 66 F0 | 	shl	local04, #4
0a050     14 00 00 FF 
0a054     F8 E5 05 F1 | 	add	objptr, ##10744
0a058     F2 2C 02 F1 | 	add	local04, objptr
0a05c     16 13 02 FB | 	rdlong	arg01, local04
0a060     17 15 02 F6 | 	mov	arg02, local05
0a064     14 00 00 FF 
0a068     F8 E5 85 F1 | 	sub	objptr, ##10744
0a06c     54 D0 B1 FD | 	call	#__system___string_cmp
0a070     00 FA 0D F2 | 	cmp	result1, #0 wz
0a074     1A 31 02 A6 |  if_e	mov	local06, local08
0a078     01 34 06 51 |  if_ne	add	local08, #1
0a07c     C0 FF 9F 5D |  if_ne	jmp	#LR__0880
0a080                 | LR__0881
0a080                 | LR__0882
0a080                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
0a080     FF FF 7F FF 
0a084     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0a088     35 00 00 AF 
0a08c     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a090     F2 30 02 AB |  if_e	rdlong	local06, objptr
0a094     35 00 00 AF 
0a098     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a09c     78 00 90 AD |  if_e	jmp	#LR__0883
0a0a0     00 12 06 F6 | 	mov	arg01, #0
0a0a4     98 2C B2 FD | 	call	#__system___getiolock_0614
0a0a8     FD 12 02 F6 | 	mov	arg01, result1
0a0ac     EC CF B1 FD | 	call	#__system___lockmem
0a0b0     B9 01 00 FF 
0a0b4     B2 14 06 F6 | 	mov	arg02, ##@LR__5862
0a0b8     00 12 06 F6 | 	mov	arg01, #0
0a0bc     00 16 06 F6 | 	mov	arg03, #0
0a0c0     D0 DC B1 FD | 	call	#__system___basic_print_string
0a0c4     52 00 00 FF 
0a0c8     B0 E4 05 F1 | 	add	objptr, ##42160
0a0cc     F2 14 02 FB | 	rdlong	arg02, objptr
0a0d0     52 00 00 FF 
0a0d4     B0 E4 85 F1 | 	sub	objptr, ##42160
0a0d8     00 12 06 F6 | 	mov	arg01, #0
0a0dc     00 16 06 F6 | 	mov	arg03, #0
0a0e0     0A 18 06 F6 | 	mov	arg04, #10
0a0e4     30 DD B1 FD | 	call	#__system___basic_print_unsigned
0a0e8     B9 01 00 FF 
0a0ec     C0 14 06 F6 | 	mov	arg02, ##@LR__5863
0a0f0     00 12 06 F6 | 	mov	arg01, #0
0a0f4     00 16 06 F6 | 	mov	arg03, #0
0a0f8     98 DC B1 FD | 	call	#__system___basic_print_string
0a0fc     00 12 06 F6 | 	mov	arg01, #0
0a100     0A 14 06 F6 | 	mov	arg02, #10
0a104     00 16 06 F6 | 	mov	arg03, #0
0a108     30 DC B1 FD | 	call	#__system___basic_print_char
0a10c     00 12 06 F6 | 	mov	arg01, #0
0a110     2C 2C B2 FD | 	call	#__system___getiolock_0614
0a114     FD 00 68 FC | 	wrlong	#0, result1
0a118                 | LR__0883
0a118                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
0a118     37 00 00 FF 
0a11c     44 E4 05 F1 | 	add	objptr, ##28228
0a120     F2 14 02 FB | 	rdlong	arg02, objptr
0a124     01 14 06 F1 | 	add	arg02, #1
0a128     03 14 66 F0 | 	shl	arg02, #3
0a12c     02 00 00 FF 
0a130     38 E4 85 F1 | 	sub	objptr, ##1080
0a134     F2 14 02 F1 | 	add	arg02, objptr
0a138     0A 13 02 FB | 	rdlong	arg01, arg02
0a13c     B9 01 00 FF 
0a140     E1 14 06 F6 | 	mov	arg02, ##@LR__5864
0a144     35 00 00 FF 
0a148     0C E4 85 F1 | 	sub	objptr, ##27148
0a14c     74 CF B1 FD | 	call	#__system___string_cmp
0a150     00 FA 0D F2 | 	cmp	result1, #0 wz
0a154     44 00 90 AD |  if_e	jmp	#LR__0884
0a158     37 00 00 FF 
0a15c     44 E4 05 F1 | 	add	objptr, ##28228
0a160     F2 36 02 FB | 	rdlong	local09, objptr
0a164     01 36 06 F1 | 	add	local09, #1
0a168     03 36 66 F0 | 	shl	local09, #3
0a16c     02 00 00 FF 
0a170     38 E4 85 F1 | 	sub	objptr, ##1080
0a174     F2 36 02 F1 | 	add	local09, objptr
0a178     1B 13 02 FB | 	rdlong	arg01, local09
0a17c     B9 01 00 FF 
0a180     E3 14 06 F6 | 	mov	arg02, ##@LR__5865
0a184     35 00 00 FF 
0a188     0C E4 85 F1 | 	sub	objptr, ##27148
0a18c     34 CF B1 FD | 	call	#__system___string_cmp
0a190     00 FA 0D F2 | 	cmp	result1, #0 wz
0a194     2B FA 05 56 |  if_ne	mov	result1, #43
0a198     D0 04 90 5D |  if_ne	jmp	#LR__0905
0a19c                 | LR__0884
0a19c                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
0a19c     37 00 00 FF 
0a1a0     44 E4 05 F1 | 	add	objptr, ##28228
0a1a4     F2 14 02 FB | 	rdlong	arg02, objptr
0a1a8     01 14 06 F1 | 	add	arg02, #1
0a1ac     03 14 66 F0 | 	shl	arg02, #3
0a1b0     02 00 00 FF 
0a1b4     38 E4 85 F1 | 	sub	objptr, ##1080
0a1b8     F2 14 02 F1 | 	add	arg02, objptr
0a1bc     0A 13 02 FB | 	rdlong	arg01, arg02
0a1c0     B9 01 00 FF 
0a1c4     E6 14 06 F6 | 	mov	arg02, ##@LR__5866
0a1c8     35 00 00 FF 
0a1cc     0C E4 85 F1 | 	sub	objptr, ##27148
0a1d0     F0 CE B1 FD | 	call	#__system___string_cmp
0a1d4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1d8     37 00 00 AF 
0a1dc     44 E4 05 A1 |  if_e	add	objptr, ##28228
0a1e0     F2 38 02 AB |  if_e	rdlong	local10, objptr
0a1e4     37 00 00 AF 
0a1e8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
0a1ec     01 38 06 A1 |  if_e	add	local10, #1
0a1f0     5C 01 90 AD |  if_e	jmp	#LR__0889
0a1f4     37 00 00 FF 
0a1f8     44 E4 05 F1 | 	add	objptr, ##28228
0a1fc     F2 38 02 FB | 	rdlong	local10, objptr
0a200     37 00 00 FF 
0a204     44 E4 85 F1 | 	sub	objptr, ##28228
0a208     02 38 06 F1 | 	add	local10, #2
0a20c     00 3A 06 F6 | 	mov	local11, #0
0a210                 | '   l=ct+2 : m=0 : do
0a210                 | LR__0885
0a210                 | '   if isdec(lparts(l).part$) then 
0a210     1C 2D 02 F6 | 	mov	local04, local10
0a214     03 2C 66 F0 | 	shl	local04, #3
0a218     35 00 00 FF 
0a21c     0C E4 05 F1 | 	add	objptr, ##27148
0a220     F2 2C 02 F1 | 	add	local04, objptr
0a224     16 13 02 FB | 	rdlong	arg01, local04
0a228     35 00 00 FF 
0a22c     0C E4 85 F1 | 	sub	objptr, ##27148
0a230     CC CD BF FD | 	call	#_isdec
0a234     00 FA 0D F2 | 	cmp	result1, #0 wz
0a238     44 00 90 AD |  if_e	jmp	#LR__0886
0a23c     1D 3D 02 F6 | 	mov	local12, local11
0a240     13 3D 06 F1 | 	add	local12, #local01
0a244     1C 37 02 F6 | 	mov	local09, local10
0a248     03 36 66 F0 | 	shl	local09, #3
0a24c     35 00 00 FF 
0a250     0C E4 05 F1 | 	add	objptr, ##27148
0a254     F2 36 02 F1 | 	add	local09, objptr
0a258     1B 13 02 FB | 	rdlong	arg01, local09
0a25c     00 14 06 F6 | 	mov	arg02, #0
0a260     35 00 00 FF 
0a264     0C E4 85 F1 | 	sub	objptr, ##27148
0a268     24 03 B2 FD | 	call	#__system____builtin_atoi
0a26c     FD 3E 02 F6 | 	mov	local13, result1
0a270                 | 	'.live	local13
0a270                 | 	'.live	local12
0a270     00 3C 8E F9 | 	altd	local12, #0
0a274     1F 3D 02 F6 | 	mov	local12, local13
0a278     01 3A 06 F1 | 	add	local11, #1
0a27c     08 00 90 FD | 	jmp	#LR__0887
0a280                 | LR__0886
0a280                 | '     return(17)
0a280     11 FA 05 F6 | 	mov	result1, #17
0a284     E4 03 90 FD | 	jmp	#LR__0905
0a288                 | LR__0887
0a288                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a288     1C 2D 02 F6 | 	mov	local04, local10
0a28c     01 2C 06 F1 | 	add	local04, #1
0a290     03 2C 66 F0 | 	shl	local04, #3
0a294     35 00 00 FF 
0a298     0C E4 05 F1 | 	add	objptr, ##27148
0a29c     F2 2C 02 F1 | 	add	local04, objptr
0a2a0     16 13 02 FB | 	rdlong	arg01, local04
0a2a4     B9 01 00 FF 
0a2a8     E9 14 06 F6 | 	mov	arg02, ##@LR__5867
0a2ac     35 00 00 FF 
0a2b0     0C E4 85 F1 | 	sub	objptr, ##27148
0a2b4     0C CE B1 FD | 	call	#__system___string_cmp
0a2b8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2bc     3C 00 90 AD |  if_e	jmp	#LR__0888
0a2c0     1C 3F 02 F6 | 	mov	local13, local10
0a2c4     01 3E 06 F1 | 	add	local13, #1
0a2c8     03 3E 66 F0 | 	shl	local13, #3
0a2cc     35 00 00 FF 
0a2d0     0C E4 05 F1 | 	add	objptr, ##27148
0a2d4     F2 3E 02 F1 | 	add	local13, objptr
0a2d8     1F 13 02 FB | 	rdlong	arg01, local13
0a2dc     B9 01 00 FF 
0a2e0     EB 14 06 F6 | 	mov	arg02, ##@LR__5868
0a2e4     35 00 00 FF 
0a2e8     0C E4 85 F1 | 	sub	objptr, ##27148
0a2ec     D4 CD B1 FD | 	call	#__system___string_cmp
0a2f0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2f4     2C FA 05 56 |  if_ne	mov	result1, #44
0a2f8     70 03 90 5D |  if_ne	jmp	#LR__0905
0a2fc                 | LR__0888
0a2fc     02 38 06 F1 | 	add	local10, #2
0a300     1C 2D 02 F6 | 	mov	local04, local10
0a304     01 2C 86 F1 | 	sub	local04, #1
0a308     03 2C 66 F0 | 	shl	local04, #3
0a30c     35 00 00 FF 
0a310     0C E4 05 F1 | 	add	objptr, ##27148
0a314     F2 2C 02 F1 | 	add	local04, objptr
0a318     16 13 02 FB | 	rdlong	arg01, local04
0a31c     B9 01 00 FF 
0a320     ED 14 06 F6 | 	mov	arg02, ##@LR__5869
0a324     35 00 00 FF 
0a328     0C E4 85 F1 | 	sub	objptr, ##27148
0a32c     94 CD B1 FD | 	call	#__system___string_cmp
0a330     00 FA 0D F2 | 	cmp	result1, #0 wz
0a334     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
0a338     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0885
0a33c                 | '   if m>3 then return 45
0a33c     04 3A 56 F2 | 	cmps	local11, #4 wc
0a340     2D FA 05 36 |  if_ae	mov	result1, #45
0a344     24 03 90 3D |  if_ae	jmp	#LR__0905
0a348     00 41 06 F6 | 	mov	local14, #256
0a34c     0C 42 06 F6 | 	mov	local15, #12
0a350                 | LR__0889
0a350                 | '   arraytype=array_no_type : esize=12
0a350                 | ' 1350 
0a350                 | '   if lparts(l).part$="as" then
0a350     1C 2D 02 F6 | 	mov	local04, local10
0a354     03 2C 66 F0 | 	shl	local04, #3
0a358     35 00 00 FF 
0a35c     0C E4 05 F1 | 	add	objptr, ##27148
0a360     F2 2C 02 F1 | 	add	local04, objptr
0a364     16 13 02 FB | 	rdlong	arg01, local04
0a368     B9 01 00 FF 
0a36c     EF 14 06 F6 | 	mov	arg02, ##@LR__5870
0a370     35 00 00 FF 
0a374     0C E4 85 F1 | 	sub	objptr, ##27148
0a378     48 CD B1 FD | 	call	#__system___string_cmp
0a37c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a380     E8 01 90 5D |  if_ne	jmp	#LR__0904
0a384                 | '     select case lparts(l+1).part$
0a384     1C 3D 02 F6 | 	mov	local12, local10
0a388     01 3C 06 F1 | 	add	local12, #1
0a38c     03 3C 66 F0 | 	shl	local12, #3
0a390     35 00 00 FF 
0a394     0C E4 05 F1 | 	add	objptr, ##27148
0a398     F2 3C 02 F1 | 	add	local12, objptr
0a39c     1E 45 02 FB | 	rdlong	local16, local12
0a3a0     B9 01 00 FF 
0a3a4     F2 14 06 F6 | 	mov	arg02, ##@LR__5871
0a3a8     22 13 02 F6 | 	mov	arg01, local16
0a3ac     35 00 00 FF 
0a3b0     0C E4 85 F1 | 	sub	objptr, ##27148
0a3b4     0C CD B1 FD | 	call	#__system___string_cmp
0a3b8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3bc     0C 01 90 AD |  if_e	jmp	#LR__0890
0a3c0     B9 01 00 FF 
0a3c4     F7 14 06 F6 | 	mov	arg02, ##@LR__5872
0a3c8     22 13 02 F6 | 	mov	arg01, local16
0a3cc     F4 CC B1 FD | 	call	#__system___string_cmp
0a3d0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3d4     00 01 90 AD |  if_e	jmp	#LR__0891
0a3d8     B9 01 00 FF 
0a3dc     FD 14 06 F6 | 	mov	arg02, ##@LR__5873
0a3e0     22 13 02 F6 | 	mov	arg01, local16
0a3e4     DC CC B1 FD | 	call	#__system___string_cmp
0a3e8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3ec     F4 00 90 AD |  if_e	jmp	#LR__0892
0a3f0     B9 01 00 FF 
0a3f4     03 15 06 F6 | 	mov	arg02, ##@LR__5874
0a3f8     22 13 02 F6 | 	mov	arg01, local16
0a3fc     C4 CC B1 FD | 	call	#__system___string_cmp
0a400     00 FA 0D F2 | 	cmp	result1, #0 wz
0a404     E8 00 90 AD |  if_e	jmp	#LR__0893
0a408     B9 01 00 FF 
0a40c     0A 15 06 F6 | 	mov	arg02, ##@LR__5875
0a410     22 13 02 F6 | 	mov	arg01, local16
0a414     AC CC B1 FD | 	call	#__system___string_cmp
0a418     00 FA 0D F2 | 	cmp	result1, #0 wz
0a41c     DC 00 90 AD |  if_e	jmp	#LR__0894
0a420     B9 01 00 FF 
0a424     0F 15 06 F6 | 	mov	arg02, ##@LR__5876
0a428     22 13 02 F6 | 	mov	arg01, local16
0a42c     94 CC B1 FD | 	call	#__system___string_cmp
0a430     00 FA 0D F2 | 	cmp	result1, #0 wz
0a434     D0 00 90 AD |  if_e	jmp	#LR__0895
0a438     B9 01 00 FF 
0a43c     17 15 06 F6 | 	mov	arg02, ##@LR__5877
0a440     22 13 02 F6 | 	mov	arg01, local16
0a444     7C CC B1 FD | 	call	#__system___string_cmp
0a448     00 FA 0D F2 | 	cmp	result1, #0 wz
0a44c     C4 00 90 AD |  if_e	jmp	#LR__0896
0a450     B9 01 00 FF 
0a454     1D 15 06 F6 | 	mov	arg02, ##@LR__5878
0a458     22 13 02 F6 | 	mov	arg01, local16
0a45c     64 CC B1 FD | 	call	#__system___string_cmp
0a460     00 FA 0D F2 | 	cmp	result1, #0 wz
0a464     B8 00 90 AD |  if_e	jmp	#LR__0897
0a468     B9 01 00 FF 
0a46c     23 15 06 F6 | 	mov	arg02, ##@LR__5879
0a470     22 13 02 F6 | 	mov	arg01, local16
0a474     4C CC B1 FD | 	call	#__system___string_cmp
0a478     00 FA 0D F2 | 	cmp	result1, #0 wz
0a47c     AC 00 90 AD |  if_e	jmp	#LR__0898
0a480     B9 01 00 FF 
0a484     2A 15 06 F6 | 	mov	arg02, ##@LR__5880
0a488     22 13 02 F6 | 	mov	arg01, local16
0a48c     34 CC B1 FD | 	call	#__system___string_cmp
0a490     00 FA 0D F2 | 	cmp	result1, #0 wz
0a494     A0 00 90 AD |  if_e	jmp	#LR__0899
0a498     B9 01 00 FF 
0a49c     31 15 06 F6 | 	mov	arg02, ##@LR__5881
0a4a0     22 13 02 F6 | 	mov	arg01, local16
0a4a4     1C CC B1 FD | 	call	#__system___string_cmp
0a4a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a4ac     94 00 90 AD |  if_e	jmp	#LR__0900
0a4b0     B9 01 00 FF 
0a4b4     38 15 06 F6 | 	mov	arg02, ##@LR__5882
0a4b8     22 13 02 F6 | 	mov	arg01, local16
0a4bc     04 CC B1 FD | 	call	#__system___string_cmp
0a4c0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a4c4     88 00 90 AD |  if_e	jmp	#LR__0901
0a4c8     90 00 90 FD | 	jmp	#LR__0902
0a4cc                 | LR__0890
0a4cc     01 41 06 F6 | 	mov	local14, #257
0a4d0     01 42 06 F6 | 	mov	local15, #1
0a4d4     94 00 90 FD | 	jmp	#LR__0904
0a4d8                 | LR__0891
0a4d8     02 41 06 F6 | 	mov	local14, #258
0a4dc     01 42 06 F6 | 	mov	local15, #1
0a4e0     88 00 90 FD | 	jmp	#LR__0904
0a4e4                 | LR__0892
0a4e4     03 41 06 F6 | 	mov	local14, #259
0a4e8     02 42 06 F6 | 	mov	local15, #2
0a4ec     7C 00 90 FD | 	jmp	#LR__0904
0a4f0                 | LR__0893
0a4f0     04 41 06 F6 | 	mov	local14, #260
0a4f4     02 42 06 F6 | 	mov	local15, #2
0a4f8     70 00 90 FD | 	jmp	#LR__0904
0a4fc                 | LR__0894
0a4fc     05 41 06 F6 | 	mov	local14, #261
0a500     04 42 06 F6 | 	mov	local15, #4
0a504     64 00 90 FD | 	jmp	#LR__0904
0a508                 | LR__0895
0a508     05 41 06 F6 | 	mov	local14, #261
0a50c     04 42 06 F6 | 	mov	local15, #4
0a510     58 00 90 FD | 	jmp	#LR__0904
0a514                 | LR__0896
0a514     06 41 06 F6 | 	mov	local14, #262
0a518     04 42 06 F6 | 	mov	local15, #4
0a51c     4C 00 90 FD | 	jmp	#LR__0904
0a520                 | LR__0897
0a520     07 41 06 F6 | 	mov	local14, #263
0a524     08 42 06 F6 | 	mov	local15, #8
0a528     40 00 90 FD | 	jmp	#LR__0904
0a52c                 | LR__0898
0a52c     08 41 06 F6 | 	mov	local14, #264
0a530     08 42 06 F6 | 	mov	local15, #8
0a534     34 00 90 FD | 	jmp	#LR__0904
0a538                 | LR__0899
0a538     09 41 06 F6 | 	mov	local14, #265
0a53c     04 42 06 F6 | 	mov	local15, #4
0a540     28 00 90 FD | 	jmp	#LR__0904
0a544                 | LR__0900
0a544     0A 41 06 F6 | 	mov	local14, #266
0a548     08 42 06 F6 | 	mov	local15, #8
0a54c     1C 00 90 FD | 	jmp	#LR__0904
0a550                 | LR__0901
0a550     0B 41 06 F6 | 	mov	local14, #267
0a554     04 42 06 F6 | 	mov	local15, #4
0a558     10 00 90 FD | 	jmp	#LR__0904
0a55c                 | LR__0902
0a55c     2F FA 05 F6 | 	mov	result1, #47
0a560     08 01 90 FD | 	jmp	#LR__0905
0a564                 | LR__0903
0a564                 | '   return 46
0a564     2E FA 05 F6 | 	mov	result1, #46
0a568     00 01 90 FD | 	jmp	#LR__0905
0a56c                 | LR__0904
0a56c     13 43 02 FD | 	qmul	local15, local01
0a570     18 32 62 FD | 	getqx	local07
0a574     14 33 02 FD | 	qmul	local07, local02
0a578     18 44 62 FD | 	getqx	local16
0a57c     15 45 02 FD | 	qmul	local16, local03
0a580     52 00 00 FF 
0a584     98 E4 05 F1 | 	add	objptr, ##42136
0a588     F2 46 02 FB | 	rdlong	local17, objptr
0a58c     20 15 02 F6 | 	mov	arg02, local14
0a590     18 44 62 FD | 	getqx	local16
0a594     22 47 82 F1 | 	sub	local17, local16
0a598     10 46 86 F1 | 	sub	local17, #16
0a59c     0F 46 26 F5 | 	andn	local17, #15
0a5a0     F2 46 62 FC | 	wrlong	local17, objptr
0a5a4     52 00 00 FF 
0a5a8     98 E4 85 F1 | 	sub	objptr, ##42136
0a5ac     23 13 02 F6 | 	mov	arg01, local17
0a5b0     20 92 B1 FD | 	call	#_psdpoke
0a5b4     23 13 02 F6 | 	mov	arg01, local17
0a5b8     02 12 06 F1 | 	add	arg01, #2
0a5bc     21 15 02 F6 | 	mov	arg02, local15
0a5c0     10 92 B1 FD | 	call	#_psdpoke
0a5c4     23 13 02 F6 | 	mov	arg01, local17
0a5c8     04 12 06 F1 | 	add	arg01, #4
0a5cc     13 15 02 F6 | 	mov	arg02, local01
0a5d0     B8 91 B1 FD | 	call	#_pslpoke
0a5d4     23 13 02 F6 | 	mov	arg01, local17
0a5d8     08 12 06 F1 | 	add	arg01, #8
0a5dc     14 15 02 F6 | 	mov	arg02, local02
0a5e0     A8 91 B1 FD | 	call	#_pslpoke
0a5e4     23 13 02 F6 | 	mov	arg01, local17
0a5e8     0C 12 06 F1 | 	add	arg01, #12
0a5ec     15 15 02 F6 | 	mov	arg02, local03
0a5f0     98 91 B1 FD | 	call	#_pslpoke
0a5f4     18 3D 02 F6 | 	mov	local12, local06
0a5f8     04 3C 66 F0 | 	shl	local12, #4
0a5fc     14 00 00 FF 
0a600     F8 E5 05 F1 | 	add	objptr, ##10744
0a604     F2 3C 02 F1 | 	add	local12, objptr
0a608     1E 2F 62 FC | 	wrlong	local05, local12
0a60c     18 3D 02 F6 | 	mov	local12, local06
0a610     04 3C 66 F0 | 	shl	local12, #4
0a614     F2 3C 02 F1 | 	add	local12, objptr
0a618     04 3C 06 F1 | 	add	local12, #4
0a61c     1E 47 62 FC | 	wrlong	local17, local12
0a620     18 3D 02 F6 | 	mov	local12, local06
0a624     04 3C 66 F0 | 	shl	local12, #4
0a628     F2 3C 02 F1 | 	add	local12, objptr
0a62c     0C 3C 06 F1 | 	add	local12, #12
0a630     1E 41 62 FC | 	wrlong	local14, local12
0a634                 | ' memtop=arrayptr
0a634                 | ' psdpoke arrayptr,arraytype 
0a634                 | ' psdpoke arrayptr+2,esize 
0a634                 | ' pslpoke arrayptr+4,dims(0)
0a634                 | ' pslpoke arrayptr+8,dims(1)
0a634                 | ' pslpoke arrayptr+12,dims(2)
0a634                 | ' variables(j).name=varname2$
0a634                 | ' variables(j).value.uresult=arrayptr
0a634                 | ' variables(j).vartype=arraytype
0a634                 | ' if j=varnum then varnum+=1
0a634     20 00 00 FF 
0a638     10 E4 05 F1 | 	add	objptr, ##16400
0a63c     F2 32 02 FB | 	rdlong	local07, objptr
0a640     35 00 00 FF 
0a644     08 E4 85 F1 | 	sub	objptr, ##27144
0a648     19 31 0A F2 | 	cmp	local06, local07 wz
0a64c     35 00 00 AF 
0a650     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a654     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a658     01 32 06 A1 |  if_e	add	local07, #1
0a65c     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a660     35 00 00 AF 
0a664     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a668                 | ' return 0
0a668     00 FA 05 F6 | 	mov	result1, #0
0a66c                 | LR__0905
0a66c     A7 F0 03 F6 | 	mov	ptra, fp
0a670     B2 00 A0 FD | 	call	#popregs_
0a674                 | _compile_dim_ret
0a674     2D 00 64 FD | 	ret
0a678                 | 
0a678                 | ' 
0a678                 | ' '----- compile 'for' command. 
0a678                 | ' 
0a678                 | ' function compile_for() as ulong  
0a678                 | _compile_for
0a678     0E 4A 05 F6 | 	mov	COUNT_, #14
0a67c     A8 00 A0 FD | 	call	#pushregs_
0a680                 | ' 
0a680                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a680     37 00 00 FF 
0a684     44 E4 05 F1 | 	add	objptr, ##28228
0a688     F2 14 02 FB | 	rdlong	arg02, objptr
0a68c     01 14 06 F1 | 	add	arg02, #1
0a690     03 14 66 F0 | 	shl	arg02, #3
0a694     02 00 00 FF 
0a698     38 E4 85 F1 | 	sub	objptr, ##1080
0a69c     F2 14 02 F1 | 	add	arg02, objptr
0a6a0     0A 13 02 FB | 	rdlong	arg01, arg02
0a6a4     35 00 00 FF 
0a6a8     0C E4 85 F1 | 	sub	objptr, ##27148
0a6ac                 | ' 
0a6ac                 | ' select case s
0a6ac     B6 01 00 FF 
0a6b0     E6 15 06 F6 | 	mov	arg02, ##@LR__5599
0a6b4     0C CA B1 FD | 	call	#__system___string_cmp
0a6b8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a6bc     1B FA 05 A6 |  if_e	mov	result1, #27
0a6c0     00 FA 05 56 |  if_ne	mov	result1, #0
0a6c4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a6c8     0C 00 90 AD |  if_e	jmp	#LR__0910
0a6cc     05 12 06 F6 | 	mov	arg01, #5
0a6d0     A8 DB BF FD | 	call	#_compile_immediate_assign
0a6d4     08 00 90 FD | 	jmp	#LR__0911
0a6d8                 | LR__0910
0a6d8     20 FA 05 F6 | 	mov	result1, #32
0a6dc     58 08 90 FD | 	jmp	#LR__0927
0a6e0                 | LR__0911
0a6e0     4A 00 00 FF 
0a6e4     7C E4 05 F1 | 	add	objptr, ##38012
0a6e8     F2 14 02 FB | 	rdlong	arg02, objptr
0a6ec     0A 13 02 F6 | 	mov	arg01, arg02
0a6f0     01 12 86 F1 | 	sub	arg01, #1
0a6f4     09 2D 02 F6 | 	mov	local04, arg01
0a6f8     01 2C 66 F0 | 	shl	local04, #1
0a6fc     09 2D 02 F1 | 	add	local04, arg01
0a700     02 2C 66 F0 | 	shl	local04, #2
0a704     03 00 00 FF 
0a708     00 E4 85 F1 | 	sub	objptr, ##1536
0a70c     F2 2C 02 F1 | 	add	local04, objptr
0a710     16 27 02 FB | 	rdlong	local01, local04
0a714     04 2C 06 F1 | 	add	local04, #4
0a718     16 2F 02 FB | 	rdlong	local05, local04
0a71c     01 14 86 F1 | 	sub	arg02, #1
0a720     0A 2D 02 F6 | 	mov	local04, arg02
0a724     01 2C 66 F0 | 	shl	local04, #1
0a728     0A 2D 02 F1 | 	add	local04, arg02
0a72c     02 2C 66 F0 | 	shl	local04, #2
0a730     F2 30 02 F6 | 	mov	local06, objptr
0a734     F2 2C 02 F1 | 	add	local04, objptr
0a738     08 2C 06 F1 | 	add	local04, #8
0a73c     16 2D 02 FB | 	rdlong	local04, local04
0a740     17 29 02 F6 | 	mov	local02, local05
0a744     16 2B 02 F6 | 	mov	local03, local04
0a748                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a748     17 2A 0E F2 | 	cmp	local03, #23 wz
0a74c     47 00 00 FF 
0a750     7C E4 85 F1 | 	sub	objptr, ##36476
0a754     22 FA 05 56 |  if_ne	mov	result1, #34
0a758     DC 07 90 5D |  if_ne	jmp	#LR__0927
0a75c     13 33 02 F6 | 	mov	local07, local01
0a760                 | ' varnum=t1.result.uresult
0a760                 | ' if lparts(ct).part$<>"to" then return 33
0a760     37 00 00 FF 
0a764     44 E4 05 F1 | 	add	objptr, ##28228
0a768     F2 2C 02 FB | 	rdlong	local04, objptr
0a76c     03 2C 66 F0 | 	shl	local04, #3
0a770     02 00 00 FF 
0a774     38 E4 85 F1 | 	sub	objptr, ##1080
0a778     F2 2C 02 F1 | 	add	local04, objptr
0a77c     16 13 02 FB | 	rdlong	arg01, local04
0a780     B9 01 00 FF 
0a784     3F 15 06 F6 | 	mov	arg02, ##@LR__5883
0a788     35 00 00 FF 
0a78c     0C E4 85 F1 | 	sub	objptr, ##27148
0a790     30 C9 B1 FD | 	call	#__system___string_cmp
0a794     00 FA 0D F2 | 	cmp	result1, #0 wz
0a798     21 FA 05 56 |  if_ne	mov	result1, #33
0a79c     98 07 90 5D |  if_ne	jmp	#LR__0927
0a7a0     37 00 00 FF 
0a7a4     44 E4 05 F1 | 	add	objptr, ##28228
0a7a8     F2 34 02 FB | 	rdlong	local08, objptr
0a7ac     01 34 06 F1 | 	add	local08, #1
0a7b0     F2 34 62 FC | 	wrlong	local08, objptr
0a7b4     37 00 00 FF 
0a7b8     44 E4 85 F1 | 	sub	objptr, ##28228
0a7bc     2C 17 B0 FD | 	call	#_expr
0a7c0                 | ' ct+=1
0a7c0                 | ' expr()  										' there is "to" value pushed on the stack
0a7c0                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a7c0     37 00 00 FF 
0a7c4     44 E4 05 F1 | 	add	objptr, ##28228
0a7c8     F2 2C 02 FB | 	rdlong	local04, objptr
0a7cc     03 2C 66 F0 | 	shl	local04, #3
0a7d0     02 00 00 FF 
0a7d4     38 E4 85 F1 | 	sub	objptr, ##1080
0a7d8     F2 2C 02 F1 | 	add	local04, objptr
0a7dc     16 13 02 FB | 	rdlong	arg01, local04
0a7e0     B9 01 00 FF 
0a7e4     42 15 06 F6 | 	mov	arg02, ##@LR__5884
0a7e8     35 00 00 FF 
0a7ec     0C E4 85 F1 | 	sub	objptr, ##27148
0a7f0     D0 C8 B1 FD | 	call	#__system___string_cmp
0a7f4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a7f8     48 00 90 AD |  if_e	jmp	#LR__0912
0a7fc     37 00 00 FF 
0a800     44 E4 05 F1 | 	add	objptr, ##28228
0a804     F2 2C 02 FB | 	rdlong	local04, objptr
0a808     03 2C 66 F0 | 	shl	local04, #3
0a80c     02 00 00 FF 
0a810     38 E4 85 F1 | 	sub	objptr, ##1080
0a814     F2 2C 02 F1 | 	add	local04, objptr
0a818     16 13 02 FB | 	rdlong	arg01, local04
0a81c     02 14 06 F6 | 	mov	arg02, #2
0a820     35 00 00 FF 
0a824     0C E4 85 F1 | 	sub	objptr, ##27148
0a828     F0 E8 B1 FD | 	call	#__system__Left_S
0a82c     FD 12 02 F6 | 	mov	arg01, result1
0a830     B9 01 00 FF 
0a834     47 15 06 F6 | 	mov	arg02, ##@LR__5885
0a838     88 C8 B1 FD | 	call	#__system___string_cmp
0a83c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a840     9C 05 90 5D |  if_ne	jmp	#LR__0925
0a844                 | LR__0912
0a844                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a844     37 00 00 FF 
0a848     44 E4 05 F1 | 	add	objptr, ##28228
0a84c     F2 2C 02 FB | 	rdlong	local04, objptr
0a850     03 2C 66 F0 | 	shl	local04, #3
0a854     02 00 00 FF 
0a858     38 E4 85 F1 | 	sub	objptr, ##1080
0a85c     F2 2C 02 F1 | 	add	local04, objptr
0a860     16 13 02 FB | 	rdlong	arg01, local04
0a864     02 14 06 F6 | 	mov	arg02, #2
0a868     35 00 00 FF 
0a86c     0C E4 85 F1 | 	sub	objptr, ##27148
0a870     A8 E8 B1 FD | 	call	#__system__Left_S
0a874     FD 12 02 F6 | 	mov	arg01, result1
0a878     B9 01 00 FF 
0a87c     4A 15 06 F6 | 	mov	arg02, ##@LR__5886
0a880     40 C8 B1 FD | 	call	#__system___string_cmp
0a884     00 FA 0D F2 | 	cmp	result1, #0 wz
0a888     30 05 90 5D |  if_ne	jmp	#LR__0924
0a88c     37 00 00 FF 
0a890     44 E4 05 F1 | 	add	objptr, ##28228
0a894     F2 2C 02 FB | 	rdlong	local04, objptr
0a898     03 2C 66 F0 | 	shl	local04, #3
0a89c     02 00 00 FF 
0a8a0     38 E4 85 F1 | 	sub	objptr, ##1080
0a8a4     F2 2C 02 F1 | 	add	local04, objptr
0a8a8     16 13 02 FB | 	rdlong	arg01, local04
0a8ac     35 00 00 FF 
0a8b0     0C E4 85 F1 | 	sub	objptr, ##27148
0a8b4     09 37 02 F6 | 	mov	local09, arg01
0a8b8     97 06 48 FB | 	callpa	#(@LR__0914-@LR__0913)>>2,fcache_load_ptr_
0a8bc                 | LR__0913
0a8bc     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a8c0     01 36 06 51 |  if_ne	add	local09, #1
0a8c4     F4 FF 9F 5D |  if_ne	jmp	#LR__0913
0a8c8                 | LR__0914
0a8c8     09 37 82 F1 | 	sub	local09, arg01
0a8cc     03 36 56 F2 | 	cmps	local09, #3 wc
0a8d0     E8 04 90 CD |  if_b	jmp	#LR__0924
0a8d4     37 00 00 FF 
0a8d8     44 E4 05 F1 | 	add	objptr, ##28228
0a8dc     F2 2C 02 FB | 	rdlong	local04, objptr
0a8e0     16 39 02 F6 | 	mov	local10, local04
0a8e4     03 38 66 F0 | 	shl	local10, #3
0a8e8     02 00 00 FF 
0a8ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a8f0     F2 38 02 F1 | 	add	local10, objptr
0a8f4     03 2C 66 F0 | 	shl	local04, #3
0a8f8     F2 2C 02 F1 | 	add	local04, objptr
0a8fc     16 2D 02 FB | 	rdlong	local04, local04
0a900     02 00 00 FF 
0a904     38 E4 05 F1 | 	add	objptr, ##1080
0a908     F2 12 02 FB | 	rdlong	arg01, objptr
0a90c     03 12 66 F0 | 	shl	arg01, #3
0a910     02 00 00 FF 
0a914     38 E4 85 F1 | 	sub	objptr, ##1080
0a918     F2 12 02 F1 | 	add	arg01, objptr
0a91c     09 13 02 FB | 	rdlong	arg01, arg01
0a920     35 00 00 FF 
0a924     0C E4 85 F1 | 	sub	objptr, ##27148
0a928     09 37 02 F6 | 	mov	local09, arg01
0a92c     97 06 48 FB | 	callpa	#(@LR__0916-@LR__0915)>>2,fcache_load_ptr_
0a930                 | LR__0915
0a930     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a934     01 36 06 51 |  if_ne	add	local09, #1
0a938     F4 FF 9F 5D |  if_ne	jmp	#LR__0915
0a93c                 | LR__0916
0a93c     09 37 82 F1 | 	sub	local09, arg01
0a940     1B 15 02 F6 | 	mov	arg02, local09
0a944     02 14 86 F1 | 	sub	arg02, #2
0a948     16 13 02 F6 | 	mov	arg01, local04
0a94c     54 E8 B1 FD | 	call	#__system__Right_S
0a950     1C FB 61 FC | 	wrlong	result1, local10
0a954     37 00 00 FF 
0a958     44 E4 05 F1 | 	add	objptr, ##28228
0a95c     F2 2C 02 FB | 	rdlong	local04, objptr
0a960     16 39 02 F6 | 	mov	local10, local04
0a964     03 38 66 F0 | 	shl	local10, #3
0a968     02 00 00 FF 
0a96c     38 E4 85 F1 | 	sub	objptr, ##1080
0a970     F2 38 02 F1 | 	add	local10, objptr
0a974     03 2C 66 F0 | 	shl	local04, #3
0a978     F2 2C 02 F1 | 	add	local04, objptr
0a97c     16 13 02 FB | 	rdlong	arg01, local04
0a980     35 00 00 FF 
0a984     0C E4 85 F1 | 	sub	objptr, ##27148
0a988     F0 B5 BF FD | 	call	#_isfunction
0a98c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0a990     04 38 06 F1 | 	add	local10, #4
0a994     1C FB 61 FC | 	wrlong	result1, local10
0a998                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0a998     37 00 00 FF 
0a99c     44 E4 05 F1 | 	add	objptr, ##28228
0a9a0     F2 38 02 FB | 	rdlong	local10, objptr
0a9a4     03 38 66 F0 | 	shl	local10, #3
0a9a8     02 00 00 FF 
0a9ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a9b0     F2 38 02 F1 | 	add	local10, objptr
0a9b4     04 38 06 F1 | 	add	local10, #4
0a9b8     1C 2D 02 FB | 	rdlong	local04, local10
0a9bc     01 2C 56 F2 | 	cmps	local04, #1 wc
0a9c0     35 00 00 FF 
0a9c4     0C E4 85 F1 | 	sub	objptr, ##27148
0a9c8     D4 03 90 3D |  if_ae	jmp	#LR__0923
0a9cc     37 00 00 FF 
0a9d0     44 E4 05 F1 | 	add	objptr, ##28228
0a9d4     F2 2C 02 FB | 	rdlong	local04, objptr
0a9d8     16 39 02 F6 | 	mov	local10, local04
0a9dc     03 38 66 F0 | 	shl	local10, #3
0a9e0     02 00 00 FF 
0a9e4     38 E4 85 F1 | 	sub	objptr, ##1080
0a9e8     F2 38 02 F1 | 	add	local10, objptr
0a9ec     03 2C 66 F0 | 	shl	local04, #3
0a9f0     F2 2C 02 F1 | 	add	local04, objptr
0a9f4     16 13 02 FB | 	rdlong	arg01, local04
0a9f8     35 00 00 FF 
0a9fc     0C E4 85 F1 | 	sub	objptr, ##27148
0aa00     CC 9E BF FD | 	call	#_isnotename
0aa04     04 38 06 F1 | 	add	local10, #4
0aa08     1C FB 61 FC | 	wrlong	result1, local10
0aa0c                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0aa0c                 | '     if lparts(ct).token>0 then 
0aa0c     37 00 00 FF 
0aa10     44 E4 05 F1 | 	add	objptr, ##28228
0aa14     F2 38 02 FB | 	rdlong	local10, objptr
0aa18     03 38 66 F0 | 	shl	local10, #3
0aa1c     02 00 00 FF 
0aa20     38 E4 85 F1 | 	sub	objptr, ##1080
0aa24     F2 38 02 F1 | 	add	local10, objptr
0aa28     04 38 06 F1 | 	add	local10, #4
0aa2c     1C 2D 02 FB | 	rdlong	local04, local10
0aa30     01 2C 56 F2 | 	cmps	local04, #1 wc
0aa34     35 00 00 FF 
0aa38     0C E4 85 F1 | 	sub	objptr, ##27148
0aa3c     94 00 90 CD |  if_b	jmp	#LR__0917
0aa40     37 00 00 FF 
0aa44     44 E4 05 F1 | 	add	objptr, ##28228
0aa48     F2 38 02 FB | 	rdlong	local10, objptr
0aa4c     03 38 66 F0 | 	shl	local10, #3
0aa50     02 00 00 FF 
0aa54     38 E4 85 F1 | 	sub	objptr, ##1080
0aa58     F2 38 02 F1 | 	add	local10, objptr
0aa5c     04 38 06 F1 | 	add	local10, #4
0aa60     1C 13 02 FB | 	rdlong	arg01, local10
0aa64     35 00 00 FF 
0aa68     0C E4 85 F1 | 	sub	objptr, ##27148
0aa6c     B4 C6 BF FD | 	call	#_getnoteval
0aa70     FD 12 02 F6 | 	mov	arg01, result1
0aa74     37 00 00 FF 
0aa78     44 E4 05 F1 | 	add	objptr, ##28228
0aa7c     F2 38 02 FB | 	rdlong	local10, objptr
0aa80     03 38 66 F0 | 	shl	local10, #3
0aa84     02 00 00 FF 
0aa88     38 E4 85 F1 | 	sub	objptr, ##1080
0aa8c     F2 38 02 F1 | 	add	local10, objptr
0aa90     35 00 00 FF 
0aa94     0C E4 85 F1 | 	sub	objptr, ##27148
0aa98     78 E8 B1 FD | 	call	#__system__str_S
0aa9c     1C FB 61 FC | 	wrlong	result1, local10
0aaa0     37 00 00 FF 
0aaa4     44 E4 05 F1 | 	add	objptr, ##28228
0aaa8     F2 38 02 FB | 	rdlong	local10, objptr
0aaac     03 38 66 F0 | 	shl	local10, #3
0aab0     02 00 00 FF 
0aab4     38 E4 85 F1 | 	sub	objptr, ##1080
0aab8     F2 38 02 F1 | 	add	local10, objptr
0aabc     04 38 06 F1 | 	add	local10, #4
0aac0     01 00 80 FF 
0aac4     1C 05 68 FC | 	wrlong	##514, local10
0aac8     35 00 00 FF 
0aacc     0C E4 85 F1 | 	sub	objptr, ##27148
0aad0     CC 02 90 FD | 	jmp	#LR__0923
0aad4                 | LR__0917
0aad4     37 00 00 FF 
0aad8     44 E4 05 F1 | 	add	objptr, ##28228
0aadc     F2 2C 02 FB | 	rdlong	local04, objptr
0aae0     16 39 02 F6 | 	mov	local10, local04
0aae4     03 38 66 F0 | 	shl	local10, #3
0aae8     02 00 00 FF 
0aaec     38 E4 85 F1 | 	sub	objptr, ##1080
0aaf0     F2 38 02 F1 | 	add	local10, objptr
0aaf4     03 2C 66 F0 | 	shl	local04, #3
0aaf8     F2 2C 02 F1 | 	add	local04, objptr
0aafc     16 13 02 FB | 	rdlong	arg01, local04
0ab00     35 00 00 FF 
0ab04     0C E4 85 F1 | 	sub	objptr, ##27148
0ab08     44 9D BF FD | 	call	#_isconstant
0ab0c     04 38 06 F1 | 	add	local10, #4
0ab10     1C FB 61 FC | 	wrlong	result1, local10
0ab14                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0ab14     37 00 00 FF 
0ab18     44 E4 05 F1 | 	add	objptr, ##28228
0ab1c     F2 38 02 FB | 	rdlong	local10, objptr
0ab20     03 38 66 F0 | 	shl	local10, #3
0ab24     02 00 00 FF 
0ab28     38 E4 85 F1 | 	sub	objptr, ##1080
0ab2c     F2 38 02 F1 | 	add	local10, objptr
0ab30     04 38 06 F1 | 	add	local10, #4
0ab34     1C 2D 02 FB | 	rdlong	local04, local10
0ab38     01 2C 56 F2 | 	cmps	local04, #1 wc
0ab3c     35 00 00 FF 
0ab40     0C E4 85 F1 | 	sub	objptr, ##27148
0ab44     8C 00 90 CD |  if_b	jmp	#LR__0918
0ab48     37 00 00 FF 
0ab4c     44 E4 05 F1 | 	add	objptr, ##28228
0ab50     F2 34 02 FB | 	rdlong	local08, objptr
0ab54     1A 39 02 F6 | 	mov	local10, local08
0ab58     03 38 66 F0 | 	shl	local10, #3
0ab5c     02 00 00 FF 
0ab60     38 E4 85 F1 | 	sub	objptr, ##1080
0ab64     F2 38 02 F1 | 	add	local10, objptr
0ab68     03 34 66 F0 | 	shl	local08, #3
0ab6c     F2 34 02 F1 | 	add	local08, objptr
0ab70     04 34 06 F1 | 	add	local08, #4
0ab74     1A 13 02 FB | 	rdlong	arg01, local08
0ab78     35 00 00 FF 
0ab7c     0C E4 85 F1 | 	sub	objptr, ##27148
0ab80     09 13 52 F6 | 	abs	arg01, arg01 wc
0ab84     1F 3A C6 C9 |  if_b	decod	local11, #31
0ab88     00 3A 06 36 |  if_ae	mov	local11, #0
0ab8c     84 EF B1 FD | 	call	#__system___float_fromuns
0ab90     1D FB 61 F5 | 	xor	result1, local11
0ab94     FD 12 02 F6 | 	mov	arg01, result1
0ab98     78 E7 B1 FD | 	call	#__system__str_S
0ab9c     1C FB 61 FC | 	wrlong	result1, local10
0aba0     37 00 00 FF 
0aba4     44 E4 05 F1 | 	add	objptr, ##28228
0aba8     F2 38 02 FB | 	rdlong	local10, objptr
0abac     03 38 66 F0 | 	shl	local10, #3
0abb0     02 00 00 FF 
0abb4     38 E4 85 F1 | 	sub	objptr, ##1080
0abb8     F2 38 02 F1 | 	add	local10, objptr
0abbc     04 38 06 F1 | 	add	local10, #4
0abc0     01 00 80 FF 
0abc4     1C 03 68 FC | 	wrlong	##513, local10
0abc8     35 00 00 FF 
0abcc     0C E4 85 F1 | 	sub	objptr, ##27148
0abd0     CC 01 90 FD | 	jmp	#LR__0923
0abd4                 | LR__0918
0abd4     37 00 00 FF 
0abd8     44 E4 05 F1 | 	add	objptr, ##28228
0abdc     F2 38 02 FB | 	rdlong	local10, objptr
0abe0     03 38 66 F0 | 	shl	local10, #3
0abe4     02 00 00 FF 
0abe8     38 E4 85 F1 | 	sub	objptr, ##1080
0abec     F2 38 02 F1 | 	add	local10, objptr
0abf0     1C 13 02 FB | 	rdlong	arg01, local10
0abf4     35 00 00 FF 
0abf8     0C E4 85 F1 | 	sub	objptr, ##27148
0abfc     70 BD BF FD | 	call	#_isnum
0ac00     FD 3C 02 F6 | 	mov	local12, result1
0ac04     37 00 00 FF 
0ac08     44 E4 05 F1 | 	add	objptr, ##28228
0ac0c     F2 38 02 FB | 	rdlong	local10, objptr
0ac10     03 38 66 F0 | 	shl	local10, #3
0ac14     02 00 00 FF 
0ac18     38 E4 85 F1 | 	sub	objptr, ##1080
0ac1c     F2 38 02 F1 | 	add	local10, objptr
0ac20     1C 13 02 FB | 	rdlong	arg01, local10
0ac24     35 00 00 FF 
0ac28     0C E4 85 F1 | 	sub	objptr, ##27148
0ac2c     2C C1 BF FD | 	call	#_isint
0ac30     FD 3E 02 F6 | 	mov	local13, result1
0ac34     37 00 00 FF 
0ac38     44 E4 05 F1 | 	add	objptr, ##28228
0ac3c     F2 38 02 FB | 	rdlong	local10, objptr
0ac40     03 38 66 F0 | 	shl	local10, #3
0ac44     02 00 00 FF 
0ac48     38 E4 85 F1 | 	sub	objptr, ##1080
0ac4c     F2 38 02 F1 | 	add	local10, objptr
0ac50     1C 13 02 FB | 	rdlong	arg01, local10
0ac54     35 00 00 FF 
0ac58     0C E4 85 F1 | 	sub	objptr, ##27148
0ac5c     A0 C3 BF FD | 	call	#_isdec
0ac60     FD 40 02 F6 | 	mov	local14, result1
0ac64                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0ac64                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0ac64     00 3C 0E F2 | 	cmp	local12, #0 wz
0ac68     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ac6c     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0ac70     34 00 90 AD |  if_e	jmp	#LR__0919
0ac74     37 00 00 FF 
0ac78     44 E4 05 F1 | 	add	objptr, ##28228
0ac7c     F2 38 02 FB | 	rdlong	local10, objptr
0ac80     03 38 66 F0 | 	shl	local10, #3
0ac84     02 00 00 FF 
0ac88     38 E4 85 F1 | 	sub	objptr, ##1080
0ac8c     F2 38 02 F1 | 	add	local10, objptr
0ac90     04 38 06 F1 | 	add	local10, #4
0ac94     01 00 80 FF 
0ac98     1C 01 68 FC | 	wrlong	##512, local10
0ac9c     35 00 00 FF 
0aca0     0C E4 85 F1 | 	sub	objptr, ##27148
0aca4     F8 00 90 FD | 	jmp	#LR__0923
0aca8                 | LR__0919
0aca8                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0aca8     00 3C 0E F2 | 	cmp	local12, #0 wz
0acac     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0acb0     20 35 22 56 |  if_ne	not	local08, local14
0acb4     00 34 0E 52 |  if_ne	cmp	local08, #0 wz
0acb8     34 00 90 AD |  if_e	jmp	#LR__0920
0acbc     37 00 00 FF 
0acc0     44 E4 05 F1 | 	add	objptr, ##28228
0acc4     F2 38 02 FB | 	rdlong	local10, objptr
0acc8     03 38 66 F0 | 	shl	local10, #3
0accc     02 00 00 FF 
0acd0     38 E4 85 F1 | 	sub	objptr, ##1080
0acd4     F2 38 02 F1 | 	add	local10, objptr
0acd8     04 38 06 F1 | 	add	local10, #4
0acdc     01 00 80 FF 
0ace0     1C 03 68 FC | 	wrlong	##513, local10
0ace4     35 00 00 FF 
0ace8     0C E4 85 F1 | 	sub	objptr, ##27148
0acec     B0 00 90 FD | 	jmp	#LR__0923
0acf0                 | LR__0920
0acf0                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0acf0     00 3C 0E F2 | 	cmp	local12, #0 wz
0acf4     1F 3F 22 56 |  if_ne	not	local13, local13
0acf8     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0acfc     20 41 22 56 |  if_ne	not	local14, local14
0ad00     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0ad04     34 00 90 AD |  if_e	jmp	#LR__0921
0ad08     37 00 00 FF 
0ad0c     44 E4 05 F1 | 	add	objptr, ##28228
0ad10     F2 38 02 FB | 	rdlong	local10, objptr
0ad14     03 38 66 F0 | 	shl	local10, #3
0ad18     02 00 00 FF 
0ad1c     38 E4 85 F1 | 	sub	objptr, ##1080
0ad20     F2 38 02 F1 | 	add	local10, objptr
0ad24     04 38 06 F1 | 	add	local10, #4
0ad28     01 00 80 FF 
0ad2c     1C 05 68 FC | 	wrlong	##514, local10
0ad30     35 00 00 FF 
0ad34     0C E4 85 F1 | 	sub	objptr, ##27148
0ad38     64 00 90 FD | 	jmp	#LR__0923
0ad3c                 | LR__0921
0ad3c                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0ad3c     37 00 00 FF 
0ad40     44 E4 05 F1 | 	add	objptr, ##28228
0ad44     F2 38 02 FB | 	rdlong	local10, objptr
0ad48     03 38 66 F0 | 	shl	local10, #3
0ad4c     02 00 00 FF 
0ad50     38 E4 85 F1 | 	sub	objptr, ##1080
0ad54     F2 38 02 F1 | 	add	local10, objptr
0ad58     1C 13 02 FB | 	rdlong	arg01, local10
0ad5c     35 00 00 FF 
0ad60     0C E4 85 F1 | 	sub	objptr, ##27148
0ad64     94 B9 BF FD | 	call	#_isname
0ad68     00 FA 0D F2 | 	cmp	result1, #0 wz
0ad6c     30 00 90 AD |  if_e	jmp	#LR__0922
0ad70     37 00 00 FF 
0ad74     44 E4 05 F1 | 	add	objptr, ##28228
0ad78     F2 38 02 FB | 	rdlong	local10, objptr
0ad7c     03 38 66 F0 | 	shl	local10, #3
0ad80     02 00 00 FF 
0ad84     38 E4 85 F1 | 	sub	objptr, ##1080
0ad88     F2 38 02 F1 | 	add	local10, objptr
0ad8c     04 38 06 F1 | 	add	local10, #4
0ad90     01 00 80 FF 
0ad94     1C 09 68 FC | 	wrlong	##516, local10
0ad98     35 00 00 FF 
0ad9c     0C E4 85 F1 | 	sub	objptr, ##27148
0ada0                 | LR__0922
0ada0                 | LR__0923
0ada0     37 00 00 FF 
0ada4     44 E4 05 F1 | 	add	objptr, ##28228
0ada8     F2 34 02 FB | 	rdlong	local08, objptr
0adac     01 34 86 F1 | 	sub	local08, #1
0adb0     F2 34 62 FC | 	wrlong	local08, objptr
0adb4     37 00 00 FF 
0adb8     44 E4 85 F1 | 	sub	objptr, ##28228
0adbc                 | LR__0924
0adbc     37 00 00 FF 
0adc0     44 E4 05 F1 | 	add	objptr, ##28228
0adc4     F2 34 02 FB | 	rdlong	local08, objptr
0adc8     01 34 06 F1 | 	add	local08, #1
0adcc     F2 34 62 FC | 	wrlong	local08, objptr
0add0     37 00 00 FF 
0add4     44 E4 85 F1 | 	sub	objptr, ##28228
0add8     10 11 B0 FD | 	call	#_expr
0addc     78 00 90 FD | 	jmp	#LR__0926
0ade0                 | LR__0925
0ade0     4A 00 00 FF 
0ade4     7C E4 05 F1 | 	add	objptr, ##38012
0ade8     F2 40 02 FB | 	rdlong	local14, objptr
0adec     20 39 02 F6 | 	mov	local10, local14
0adf0     01 38 66 F0 | 	shl	local10, #1
0adf4     20 39 02 F1 | 	add	local10, local14
0adf8     02 38 66 F0 | 	shl	local10, #2
0adfc     03 00 00 FF 
0ae00     00 E4 85 F1 | 	sub	objptr, ##1536
0ae04     F2 38 02 F1 | 	add	local10, objptr
0ae08     08 38 06 F1 | 	add	local10, #8
0ae0c     1C 39 68 FC | 	wrlong	#28, local10
0ae10     03 00 00 FF 
0ae14     00 E4 05 F1 | 	add	objptr, ##1536
0ae18     F2 40 02 FB | 	rdlong	local14, objptr
0ae1c     20 39 02 F6 | 	mov	local10, local14
0ae20     01 38 66 F0 | 	shl	local10, #1
0ae24     20 39 02 F1 | 	add	local10, local14
0ae28     02 38 66 F0 | 	shl	local10, #2
0ae2c     03 00 00 FF 
0ae30     00 E4 85 F1 | 	sub	objptr, ##1536
0ae34     F2 38 02 F1 | 	add	local10, objptr
0ae38     1C 03 68 FC | 	wrlong	#1, local10
0ae3c     03 00 00 FF 
0ae40     00 E4 05 F1 | 	add	objptr, ##1536
0ae44     F2 34 02 FB | 	rdlong	local08, objptr
0ae48     01 34 06 F1 | 	add	local08, #1
0ae4c     F2 34 62 FC | 	wrlong	local08, objptr
0ae50     4A 00 00 FF 
0ae54     7C E4 85 F1 | 	sub	objptr, ##38012
0ae58                 | LR__0926
0ae58     4A 00 00 FF 
0ae5c     7C E4 05 F1 | 	add	objptr, ##38012
0ae60     F2 40 02 FB | 	rdlong	local14, objptr
0ae64     20 39 02 F6 | 	mov	local10, local14
0ae68     01 38 66 F0 | 	shl	local10, #1
0ae6c     20 39 02 F1 | 	add	local10, local14
0ae70     02 38 66 F0 | 	shl	local10, #2
0ae74     03 00 00 FF 
0ae78     00 E4 85 F1 | 	sub	objptr, ##1536
0ae7c     F2 38 02 F1 | 	add	local10, objptr
0ae80     08 38 06 F1 | 	add	local10, #8
0ae84     1C 39 68 FC | 	wrlong	#28, local10
0ae88     03 00 00 FF 
0ae8c     00 E4 05 F1 | 	add	objptr, ##1536
0ae90     F2 40 02 FB | 	rdlong	local14, objptr
0ae94     20 39 02 F6 | 	mov	local10, local14
0ae98     01 38 66 F0 | 	shl	local10, #1
0ae9c     20 39 02 F1 | 	add	local10, local14
0aea0     02 38 66 F0 | 	shl	local10, #2
0aea4     03 00 00 FF 
0aea8     00 E4 85 F1 | 	sub	objptr, ##1536
0aeac     F2 38 02 F1 | 	add	local10, objptr
0aeb0     1C 33 62 FC | 	wrlong	local07, local10
0aeb4     03 00 00 FF 
0aeb8     00 E4 05 F1 | 	add	objptr, ##1536
0aebc     F2 40 02 FB | 	rdlong	local14, objptr
0aec0     01 40 06 F1 | 	add	local14, #1
0aec4     F2 40 62 FC | 	wrlong	local14, objptr
0aec8     20 39 02 F6 | 	mov	local10, local14
0aecc     01 38 66 F0 | 	shl	local10, #1
0aed0     20 39 02 F1 | 	add	local10, local14
0aed4     02 38 66 F0 | 	shl	local10, #2
0aed8     03 00 00 FF 
0aedc     00 E4 85 F1 | 	sub	objptr, ##1536
0aee0     F2 38 02 F1 | 	add	local10, objptr
0aee4     08 38 06 F1 | 	add	local10, #8
0aee8     1C 95 68 FC | 	wrlong	#74, local10
0aeec     03 00 00 FF 
0aef0     00 E4 05 F1 | 	add	objptr, ##1536
0aef4     F2 40 02 FB | 	rdlong	local14, objptr
0aef8     20 39 02 F6 | 	mov	local10, local14
0aefc     01 38 66 F0 | 	shl	local10, #1
0af00     20 39 02 F1 | 	add	local10, local14
0af04     02 38 66 F0 | 	shl	local10, #2
0af08     03 00 00 FF 
0af0c     00 E4 85 F1 | 	sub	objptr, ##1536
0af10     F2 38 02 F1 | 	add	local10, objptr
0af14     1C 01 68 FC | 	wrlong	#0, local10
0af18     03 00 00 FF 
0af1c     00 E4 05 F1 | 	add	objptr, ##1536
0af20     F2 34 02 FB | 	rdlong	local08, objptr
0af24     01 34 06 F1 | 	add	local08, #1
0af28     F2 34 62 FC | 	wrlong	local08, objptr
0af2c     4A 00 00 FF 
0af30     7C E4 85 F1 | 	sub	objptr, ##38012
0af34                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0af34                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0af34                 | ' return 0
0af34     00 FA 05 F6 | 	mov	result1, #0
0af38                 | LR__0927
0af38     A7 F0 03 F6 | 	mov	ptra, fp
0af3c     B2 00 A0 FD | 	call	#popregs_
0af40                 | _compile_for_ret
0af40     2D 00 64 FD | 	ret
0af44                 | 
0af44                 | ' 
0af44                 | ' '----- compile 'next' command. 
0af44                 | ' 
0af44                 | ' function compile_next() as ulong
0af44                 | _compile_next
0af44     04 4A 05 F6 | 	mov	COUNT_, #4
0af48     A8 00 A0 FD | 	call	#pushregs_
0af4c     37 00 00 FF 
0af50     44 E4 05 F1 | 	add	objptr, ##28228
0af54     F2 14 02 FB | 	rdlong	arg02, objptr
0af58     03 14 66 F0 | 	shl	arg02, #3
0af5c     02 00 00 FF 
0af60     38 E4 85 F1 | 	sub	objptr, ##1080
0af64     F2 14 02 F1 | 	add	arg02, objptr
0af68     0A 27 02 FB | 	rdlong	local01, arg02
0af6c                 | ' 
0af6c                 | ' varname$=lparts(ct).part$ 
0af6c                 | ' if varnum=0 then return 35
0af6c     04 E4 85 F1 | 	sub	objptr, #4
0af70     F2 14 0A FB | 	rdlong	arg02, objptr wz
0af74     35 00 00 FF 
0af78     08 E4 85 F1 | 	sub	objptr, ##27144
0af7c     23 FA 05 A6 |  if_e	mov	result1, #35
0af80     4C 01 90 AD |  if_e	jmp	#LR__0932
0af84     01 28 66 F6 | 	neg	local02, #1
0af88                 | ' j=-1
0af88                 | ' for i=0 to varnum-1
0af88     00 2A 06 F6 | 	mov	local03, #0
0af8c     35 00 00 FF 
0af90     08 E4 05 F1 | 	add	objptr, ##27144
0af94     F2 2C 02 FB | 	rdlong	local04, objptr
0af98     35 00 00 FF 
0af9c     08 E4 85 F1 | 	sub	objptr, ##27144
0afa0                 | LR__0930
0afa0     16 2B 12 F2 | 	cmp	local03, local04 wc
0afa4     38 00 90 3D |  if_ae	jmp	#LR__0931
0afa8                 | '   if variables(i).name=varname$ then j=i : exit
0afa8     15 15 02 F6 | 	mov	arg02, local03
0afac     04 14 66 F0 | 	shl	arg02, #4
0afb0     14 00 00 FF 
0afb4     F8 E5 05 F1 | 	add	objptr, ##10744
0afb8     F2 14 02 F1 | 	add	arg02, objptr
0afbc     0A 13 02 FB | 	rdlong	arg01, arg02
0afc0     13 15 02 F6 | 	mov	arg02, local01
0afc4     14 00 00 FF 
0afc8     F8 E5 85 F1 | 	sub	objptr, ##10744
0afcc     F4 C0 B1 FD | 	call	#__system___string_cmp
0afd0     00 FA 0D F2 | 	cmp	result1, #0 wz
0afd4     15 29 02 A6 |  if_e	mov	local02, local03
0afd8     01 2A 06 51 |  if_ne	add	local03, #1
0afdc     C0 FF 9F 5D |  if_ne	jmp	#LR__0930
0afe0                 | LR__0931
0afe0                 | ' if j=-1 then return 35
0afe0     FF FF 7F FF 
0afe4     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0afe8     23 FA 05 A6 |  if_e	mov	result1, #35
0afec     E0 00 90 AD |  if_e	jmp	#LR__0932
0aff0     4A 00 00 FF 
0aff4     7C E4 05 F1 | 	add	objptr, ##38012
0aff8     F2 2C 02 FB | 	rdlong	local04, objptr
0affc     16 2B 02 F6 | 	mov	local03, local04
0b000     01 2A 66 F0 | 	shl	local03, #1
0b004     16 2B 02 F1 | 	add	local03, local04
0b008     02 2A 66 F0 | 	shl	local03, #2
0b00c     03 00 00 FF 
0b010     00 E4 85 F1 | 	sub	objptr, ##1536
0b014     F2 2A 02 F1 | 	add	local03, objptr
0b018     08 2A 06 F1 | 	add	local03, #8
0b01c     15 39 68 FC | 	wrlong	#28, local03
0b020     03 00 00 FF 
0b024     00 E4 05 F1 | 	add	objptr, ##1536
0b028     F2 2C 02 FB | 	rdlong	local04, objptr
0b02c     16 2B 02 F6 | 	mov	local03, local04
0b030     01 2A 66 F0 | 	shl	local03, #1
0b034     16 2B 02 F1 | 	add	local03, local04
0b038     02 2A 66 F0 | 	shl	local03, #2
0b03c     03 00 00 FF 
0b040     00 E4 85 F1 | 	sub	objptr, ##1536
0b044     F2 2A 02 F1 | 	add	local03, objptr
0b048     15 29 62 FC | 	wrlong	local02, local03
0b04c     03 00 00 FF 
0b050     00 E4 05 F1 | 	add	objptr, ##1536
0b054     F2 2C 02 FB | 	rdlong	local04, objptr
0b058     01 2C 06 F1 | 	add	local04, #1
0b05c     F2 2C 62 FC | 	wrlong	local04, objptr
0b060     16 2B 02 F6 | 	mov	local03, local04
0b064     01 2A 66 F0 | 	shl	local03, #1
0b068     16 2B 02 F1 | 	add	local03, local04
0b06c     02 2A 66 F0 | 	shl	local03, #2
0b070     03 00 00 FF 
0b074     00 E4 85 F1 | 	sub	objptr, ##1536
0b078     F2 2A 02 F1 | 	add	local03, objptr
0b07c     08 2A 06 F1 | 	add	local03, #8
0b080     15 97 68 FC | 	wrlong	#75, local03
0b084     03 00 00 FF 
0b088     00 E4 05 F1 | 	add	objptr, ##1536
0b08c     F2 2C 02 FB | 	rdlong	local04, objptr
0b090     16 2B 02 F6 | 	mov	local03, local04
0b094     01 2A 66 F0 | 	shl	local03, #1
0b098     16 2B 02 F1 | 	add	local03, local04
0b09c     02 2A 66 F0 | 	shl	local03, #2
0b0a0     03 00 00 FF 
0b0a4     00 E4 85 F1 | 	sub	objptr, ##1536
0b0a8     F2 2A 02 F1 | 	add	local03, objptr
0b0ac     15 01 68 FC | 	wrlong	#0, local03
0b0b0     03 00 00 FF 
0b0b4     00 E4 05 F1 | 	add	objptr, ##1536
0b0b8     F2 2C 02 FB | 	rdlong	local04, objptr
0b0bc     01 2C 06 F1 | 	add	local04, #1
0b0c0     F2 2C 62 FC | 	wrlong	local04, objptr
0b0c4     4A 00 00 FF 
0b0c8     7C E4 85 F1 | 	sub	objptr, ##38012
0b0cc                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0b0cc                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0b0cc                 | ' return 0
0b0cc     00 FA 05 F6 | 	mov	result1, #0
0b0d0                 | LR__0932
0b0d0     A7 F0 03 F6 | 	mov	ptra, fp
0b0d4     B2 00 A0 FD | 	call	#popregs_
0b0d8                 | _compile_next_ret
0b0d8     2D 00 64 FD | 	ret
0b0dc                 | 
0b0dc                 | ' 
0b0dc                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0b0dc                 | ' 
0b0dc                 | ' function compile_gosub() as ulong
0b0dc                 | _compile_gosub
0b0dc     02 4A 05 F6 | 	mov	COUNT_, #2
0b0e0     A8 00 A0 FD | 	call	#pushregs_
0b0e4     4A 00 00 FF 
0b0e8     7C E4 05 F1 | 	add	objptr, ##38012
0b0ec     F2 26 02 FB | 	rdlong	local01, objptr
0b0f0     13 29 02 F6 | 	mov	local02, local01
0b0f4     01 28 66 F0 | 	shl	local02, #1
0b0f8     13 29 02 F1 | 	add	local02, local01
0b0fc     02 28 66 F0 | 	shl	local02, #2
0b100     03 00 00 FF 
0b104     00 E4 85 F1 | 	sub	objptr, ##1536
0b108     F2 28 02 F1 | 	add	local02, objptr
0b10c     08 28 06 F1 | 	add	local02, #8
0b110     14 53 69 FC | 	wrlong	#169, local02
0b114     03 00 00 FF 
0b118     00 E4 05 F1 | 	add	objptr, ##1536
0b11c     F2 28 02 FB | 	rdlong	local02, objptr
0b120     01 28 06 F1 | 	add	local02, #1
0b124     F2 28 62 FC | 	wrlong	local02, objptr
0b128     4A 00 00 FF 
0b12c     7C E4 85 F1 | 	sub	objptr, ##38012
0b130     0C 00 B0 FD | 	call	#_compile_goto
0b134                 | ' compiledline(lineptr).result_type=token_gosub
0b134                 | ' lineptr+=1
0b134                 | ' err=compile_goto()
0b134                 | ' return err
0b134     A7 F0 03 F6 | 	mov	ptra, fp
0b138     B2 00 A0 FD | 	call	#popregs_
0b13c                 | _compile_gosub_ret
0b13c     2D 00 64 FD | 	ret
0b140                 | 
0b140                 | ' 
0b140                 | ' '----- compile 'goto' 
0b140                 | ' 
0b140                 | ' function compile_goto() as ulong
0b140                 | _compile_goto
0b140     03 4A 05 F6 | 	mov	COUNT_, #3
0b144     A8 00 A0 FD | 	call	#pushregs_
0b148     34 F0 07 F1 | 	add	ptra, #52
0b14c                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0b14c     37 00 00 FF 
0b150     44 E4 05 F1 | 	add	objptr, ##28228
0b154     F2 16 02 FB | 	rdlong	arg03, objptr
0b158     03 16 66 F0 | 	shl	arg03, #3
0b15c     02 00 00 FF 
0b160     38 E4 85 F1 | 	sub	objptr, ##1080
0b164     F2 16 02 F1 | 	add	arg03, objptr
0b168     04 16 06 F1 | 	add	arg03, #4
0b16c     0B 17 02 FB | 	rdlong	arg03, arg03
0b170     01 00 00 FF 
0b174     00 16 0E F2 | 	cmp	arg03, ##512 wz
0b178     35 00 00 FF 
0b17c     0C E4 85 F1 | 	sub	objptr, ##27148
0b180     CC 02 90 5D |  if_ne	jmp	#LR__0945
0b184     37 00 00 FF 
0b188     44 E4 05 F1 | 	add	objptr, ##28228
0b18c     F2 16 02 FB | 	rdlong	arg03, objptr
0b190     01 16 06 F1 | 	add	arg03, #1
0b194     03 16 66 F0 | 	shl	arg03, #3
0b198     02 00 00 FF 
0b19c     38 E4 85 F1 | 	sub	objptr, ##1080
0b1a0     F2 16 02 F1 | 	add	arg03, objptr
0b1a4     04 16 06 F1 | 	add	arg03, #4
0b1a8     0B 17 02 FB | 	rdlong	arg03, arg03
0b1ac     FE 17 0E F2 | 	cmp	arg03, #510 wz
0b1b0     35 00 00 FF 
0b1b4     0C E4 85 F1 | 	sub	objptr, ##27148
0b1b8     94 02 90 5D |  if_ne	jmp	#LR__0945
0b1bc     37 00 00 FF 
0b1c0     44 E4 05 F1 | 	add	objptr, ##28228
0b1c4     F2 16 02 FB | 	rdlong	arg03, objptr
0b1c8     03 16 66 F0 | 	shl	arg03, #3
0b1cc     02 00 00 FF 
0b1d0     38 E4 85 F1 | 	sub	objptr, ##1080
0b1d4     F2 16 02 F1 | 	add	arg03, objptr
0b1d8     0B 13 02 FB | 	rdlong	arg01, arg03
0b1dc     00 14 06 F6 | 	mov	arg02, #0
0b1e0     35 00 00 FF 
0b1e4     0C E4 85 F1 | 	sub	objptr, ##27148
0b1e8     A4 F3 B1 FD | 	call	#__system____builtin_atoi
0b1ec     04 4E 05 F1 | 	add	fp, #4
0b1f0     A7 FA 61 FC | 	wrlong	result1, fp
0b1f4     4A 00 00 FF 
0b1f8     7C E4 05 F1 | 	add	objptr, ##38012
0b1fc     F2 26 02 FB | 	rdlong	local01, objptr
0b200     13 29 02 F6 | 	mov	local02, local01
0b204     01 28 66 F0 | 	shl	local02, #1
0b208     13 29 02 F1 | 	add	local02, local01
0b20c     02 28 66 F0 | 	shl	local02, #2
0b210     03 00 00 FF 
0b214     00 E4 85 F1 | 	sub	objptr, ##1536
0b218     F2 28 02 F1 | 	add	local02, objptr
0b21c     08 28 06 F1 | 	add	local02, #8
0b220     14 9D 68 FC | 	wrlong	#78, local02
0b224     03 00 00 FF 
0b228     0C E4 05 F1 | 	add	objptr, ##1548
0b22c     F2 2A 02 FB | 	rdlong	local03, objptr
0b230     4A 00 00 FF 
0b234     88 E4 85 F1 | 	sub	objptr, ##38024
0b238     04 4E 05 F1 | 	add	fp, #4
0b23c     A7 2A 62 FC | 	wrlong	local03, fp
0b240     08 4E 85 F1 | 	sub	fp, #8
0b244                 | '   gotoline=val%(lparts(ct).part$) 
0b244                 | '   compiledline(lineptr).result_type=token_fast_goto
0b244                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b244                 | '   do
0b244                 | LR__0940
0b244     10 4E 05 F1 | 	add	fp, #16
0b248     A7 12 02 F6 | 	mov	arg01, fp
0b24c     08 4E 85 F1 | 	sub	fp, #8
0b250     A7 14 02 FB | 	rdlong	arg02, fp
0b254     08 4E 85 F1 | 	sub	fp, #8
0b258     18 16 06 F6 | 	mov	arg03, #24
0b25c     0B 00 00 FF 
0b260     CC E4 05 F1 | 	add	objptr, ##5836
0b264     3C B1 B1 FD | 	call	#_psram_spin2_read1
0b268     0B 00 00 FF 
0b26c     CC E4 85 F1 | 	sub	objptr, ##5836
0b270                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b270                 | '     if gotoheader(0)<>$FFFFFFFF then
0b270     10 4E 05 F1 | 	add	fp, #16
0b274     A7 2A 02 FB | 	rdlong	local03, fp
0b278     10 4E 85 F1 | 	sub	fp, #16
0b27c     FF FF 7F FF 
0b280     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0b284     24 00 90 AD |  if_e	jmp	#LR__0941
0b288     08 4E 05 F1 | 	add	fp, #8
0b28c     A7 2A 02 FB | 	rdlong	local03, fp
0b290     04 4E 05 F1 | 	add	fp, #4
0b294     A7 2A 62 FC | 	wrlong	local03, fp
0b298     18 4E 05 F1 | 	add	fp, #24
0b29c     A7 2A 02 FB | 	rdlong	local03, fp
0b2a0     1C 4E 85 F1 | 	sub	fp, #28
0b2a4     A7 2A 62 FC | 	wrlong	local03, fp
0b2a8     08 4E 85 F1 | 	sub	fp, #8
0b2ac                 | LR__0941
0b2ac     24 4E 05 F1 | 	add	fp, #36
0b2b0     A7 2A 02 FB | 	rdlong	local03, fp
0b2b4     24 4E 85 F1 | 	sub	fp, #36
0b2b8     FF FF 3F FF 
0b2bc     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0b2c0     10 4E 05 51 |  if_ne	add	fp, #16
0b2c4     A7 26 02 5B |  if_ne	rdlong	local01, fp
0b2c8     10 4E 85 51 |  if_ne	sub	fp, #16
0b2cc     FF FF 7F 5F 
0b2d0     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0b2d4     1C 00 90 AD |  if_e	jmp	#LR__0942
0b2d8     10 4E 05 F1 | 	add	fp, #16
0b2dc     A7 2A 02 FB | 	rdlong	local03, fp
0b2e0     0C 4E 85 F1 | 	sub	fp, #12
0b2e4     A7 28 02 FB | 	rdlong	local02, fp
0b2e8     04 4E 85 F1 | 	sub	fp, #4
0b2ec     14 2B 0A F2 | 	cmp	local03, local02 wz
0b2f0     50 FF 9F 5D |  if_ne	jmp	#LR__0940
0b2f4                 | LR__0942
0b2f4                 | '   if gotoheader(0)=gotoline then
0b2f4     10 4E 05 F1 | 	add	fp, #16
0b2f8     A7 2A 02 FB | 	rdlong	local03, fp
0b2fc     0C 4E 85 F1 | 	sub	fp, #12
0b300     A7 26 02 FB | 	rdlong	local01, fp
0b304     04 4E 85 F1 | 	sub	fp, #4
0b308     13 2B 0A F2 | 	cmp	local03, local01 wz
0b30c     7C 00 90 5D |  if_ne	jmp	#LR__0943
0b310     4A 00 00 FF 
0b314     7C E4 05 F1 | 	add	objptr, ##38012
0b318     F2 26 02 FB | 	rdlong	local01, objptr
0b31c     13 29 02 F6 | 	mov	local02, local01
0b320     01 28 66 F0 | 	shl	local02, #1
0b324     13 29 02 F1 | 	add	local02, local01
0b328     02 28 66 F0 | 	shl	local02, #2
0b32c     03 00 00 FF 
0b330     00 E4 85 F1 | 	sub	objptr, ##1536
0b334     F2 28 02 F1 | 	add	local02, objptr
0b338     0C 4E 05 F1 | 	add	fp, #12
0b33c     A7 2A 02 FB | 	rdlong	local03, fp
0b340     14 2B 62 FC | 	wrlong	local03, local02
0b344     03 00 00 FF 
0b348     00 E4 05 F1 | 	add	objptr, ##1536
0b34c     F2 26 02 FB | 	rdlong	local01, objptr
0b350     13 29 02 F6 | 	mov	local02, local01
0b354     01 28 66 F0 | 	shl	local02, #1
0b358     13 29 02 F1 | 	add	local02, local01
0b35c     02 28 66 F0 | 	shl	local02, #2
0b360     03 00 00 FF 
0b364     00 E4 85 F1 | 	sub	objptr, ##1536
0b368     F2 28 02 F1 | 	add	local02, objptr
0b36c     08 4E 85 F1 | 	sub	fp, #8
0b370     A7 2A 02 FB | 	rdlong	local03, fp
0b374     04 4E 85 F1 | 	sub	fp, #4
0b378     04 28 06 F1 | 	add	local02, #4
0b37c     14 2B 62 FC | 	wrlong	local03, local02
0b380     47 00 00 FF 
0b384     7C E4 85 F1 | 	sub	objptr, ##36476
0b388     A4 00 90 FD | 	jmp	#LR__0944
0b38c                 | LR__0943
0b38c     4A 00 00 FF 
0b390     7C E4 05 F1 | 	add	objptr, ##38012
0b394     F2 26 02 FB | 	rdlong	local01, objptr
0b398     13 29 02 F6 | 	mov	local02, local01
0b39c     01 28 66 F0 | 	shl	local02, #1
0b3a0     13 29 02 F1 | 	add	local02, local01
0b3a4     02 28 66 F0 | 	shl	local02, #2
0b3a8     03 00 00 FF 
0b3ac     00 E4 85 F1 | 	sub	objptr, ##1536
0b3b0     F2 28 02 F1 | 	add	local02, objptr
0b3b4     00 00 C0 FF 
0b3b8     14 01 68 FC | 	wrlong	##-2147483648, local02
0b3bc     03 00 00 FF 
0b3c0     00 E4 05 F1 | 	add	objptr, ##1536
0b3c4     F2 26 02 FB | 	rdlong	local01, objptr
0b3c8     13 29 02 F6 | 	mov	local02, local01
0b3cc     01 28 66 F0 | 	shl	local02, #1
0b3d0     13 29 02 F1 | 	add	local02, local01
0b3d4     02 28 66 F0 | 	shl	local02, #2
0b3d8     03 00 00 FF 
0b3dc     00 E4 85 F1 | 	sub	objptr, ##1536
0b3e0     F2 28 02 F1 | 	add	local02, objptr
0b3e4     04 4E 05 F1 | 	add	fp, #4
0b3e8     A7 2A 02 FB | 	rdlong	local03, fp
0b3ec     04 4E 85 F1 | 	sub	fp, #4
0b3f0     04 28 06 F1 | 	add	local02, #4
0b3f4     14 2B 62 FC | 	wrlong	local03, local02
0b3f8     03 00 00 FF 
0b3fc     00 E4 05 F1 | 	add	objptr, ##1536
0b400     F2 26 02 FB | 	rdlong	local01, objptr
0b404     13 29 02 F6 | 	mov	local02, local01
0b408     01 28 66 F0 | 	shl	local02, #1
0b40c     13 29 02 F1 | 	add	local02, local01
0b410     02 28 66 F0 | 	shl	local02, #2
0b414     03 00 00 FF 
0b418     00 E4 85 F1 | 	sub	objptr, ##1536
0b41c     F2 28 02 F1 | 	add	local02, objptr
0b420     08 28 06 F1 | 	add	local02, #8
0b424     14 A7 68 FC | 	wrlong	#83, local02
0b428     47 00 00 FF 
0b42c     7C E4 85 F1 | 	sub	objptr, ##36476
0b430                 | LR__0944
0b430     4A 00 00 FF 
0b434     7C E4 05 F1 | 	add	objptr, ##38012
0b438     F2 2A 02 FB | 	rdlong	local03, objptr
0b43c     01 2A 06 F1 | 	add	local03, #1
0b440     F2 2A 62 FC | 	wrlong	local03, objptr
0b444     4A 00 00 FF 
0b448     7C E4 85 F1 | 	sub	objptr, ##38012
0b44c     D0 00 90 FD | 	jmp	#LR__0946
0b450                 | LR__0945
0b450     98 0A B0 FD | 	call	#_expr
0b454     30 4E 05 F1 | 	add	fp, #48
0b458     A7 9E 68 FC | 	wrlong	#79, fp
0b45c     08 4E 85 F1 | 	sub	fp, #8
0b460     A7 00 68 FC | 	wrlong	#0, fp
0b464     04 4E 05 F1 | 	add	fp, #4
0b468     A7 2A 02 FB | 	rdlong	local03, fp
0b46c     04 4E 05 F1 | 	add	fp, #4
0b470     A7 26 02 FB | 	rdlong	local01, fp
0b474     30 4E 85 F1 | 	sub	fp, #48
0b478     4A 00 00 FF 
0b47c     7C E4 05 F1 | 	add	objptr, ##38012
0b480     F2 28 02 FB | 	rdlong	local02, objptr
0b484     14 17 02 F6 | 	mov	arg03, local02
0b488     01 16 66 F0 | 	shl	arg03, #1
0b48c     14 17 02 F1 | 	add	arg03, local02
0b490     02 16 66 F0 | 	shl	arg03, #2
0b494     03 00 00 FF 
0b498     00 E4 85 F1 | 	sub	objptr, ##1536
0b49c     F2 16 02 F1 | 	add	arg03, objptr
0b4a0     0B 01 68 FC | 	wrlong	#0, arg03
0b4a4     03 00 00 FF 
0b4a8     00 E4 05 F1 | 	add	objptr, ##1536
0b4ac     F2 28 02 FB | 	rdlong	local02, objptr
0b4b0     14 17 02 F6 | 	mov	arg03, local02
0b4b4     01 16 66 F0 | 	shl	arg03, #1
0b4b8     14 17 02 F1 | 	add	arg03, local02
0b4bc     02 16 66 F0 | 	shl	arg03, #2
0b4c0     03 00 00 FF 
0b4c4     00 E4 85 F1 | 	sub	objptr, ##1536
0b4c8     F2 16 02 F1 | 	add	arg03, objptr
0b4cc     04 16 06 F1 | 	add	arg03, #4
0b4d0     0B 2B 62 FC | 	wrlong	local03, arg03
0b4d4     03 00 00 FF 
0b4d8     00 E4 05 F1 | 	add	objptr, ##1536
0b4dc     F2 2A 02 FB | 	rdlong	local03, objptr
0b4e0     15 29 02 F6 | 	mov	local02, local03
0b4e4     01 28 66 F0 | 	shl	local02, #1
0b4e8     15 29 02 F1 | 	add	local02, local03
0b4ec     02 28 66 F0 | 	shl	local02, #2
0b4f0     03 00 00 FF 
0b4f4     00 E4 85 F1 | 	sub	objptr, ##1536
0b4f8     F2 28 02 F1 | 	add	local02, objptr
0b4fc     08 28 06 F1 | 	add	local02, #8
0b500     14 27 62 FC | 	wrlong	local01, local02
0b504     03 00 00 FF 
0b508     00 E4 05 F1 | 	add	objptr, ##1536
0b50c     F2 2A 02 FB | 	rdlong	local03, objptr
0b510     01 2A 06 F1 | 	add	local03, #1
0b514     F2 2A 62 FC | 	wrlong	local03, objptr
0b518     4A 00 00 FF 
0b51c     7C E4 85 F1 | 	sub	objptr, ##38012
0b520                 | LR__0946
0b520                 | ' return 0
0b520     00 FA 05 F6 | 	mov	result1, #0
0b524     A7 F0 03 F6 | 	mov	ptra, fp
0b528     B2 00 A0 FD | 	call	#popregs_
0b52c                 | _compile_goto_ret
0b52c     2D 00 64 FD | 	ret
0b530                 | 
0b530                 | ' 
0b530                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b530                 | ' 
0b530                 | ' function compile_on() as ulong
0b530                 | _compile_on
0b530     04 4A 05 F6 | 	mov	COUNT_, #4
0b534     A8 00 A0 FD | 	call	#pushregs_
0b538     B0 09 B0 FD | 	call	#_expr
0b53c     00 26 06 F6 | 	mov	local01, #0
0b540     4A 00 00 FF 
0b544     7C E4 05 F1 | 	add	objptr, ##38012
0b548     F2 14 02 FB | 	rdlong	arg02, objptr
0b54c     0A 13 02 F6 | 	mov	arg01, arg02
0b550     01 12 66 F0 | 	shl	arg01, #1
0b554     0A 13 02 F1 | 	add	arg01, arg02
0b558     02 12 66 F0 | 	shl	arg01, #2
0b55c     03 00 00 FF 
0b560     00 E4 85 F1 | 	sub	objptr, ##1536
0b564     F2 12 02 F1 | 	add	arg01, objptr
0b568     08 12 06 F1 | 	add	arg01, #8
0b56c     09 83 69 FC | 	wrlong	#193, arg01
0b570     03 00 00 FF 
0b574     00 E4 05 F1 | 	add	objptr, ##1536
0b578     F2 14 02 FB | 	rdlong	arg02, objptr
0b57c     0A 29 02 F6 | 	mov	local02, arg02
0b580     01 14 06 F1 | 	add	arg02, #1
0b584     F2 14 62 FC | 	wrlong	arg02, objptr
0b588                 | ' expr()
0b588                 | ' 'print lparts(ct).part$ 'ok
0b588                 | ' numpar=0
0b588                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b588                 | ' if lparts(ct).part$="goto" then
0b588     13 00 00 FF 
0b58c     38 E4 85 F1 | 	sub	objptr, ##9784
0b590     F2 14 02 FB | 	rdlong	arg02, objptr
0b594     03 14 66 F0 | 	shl	arg02, #3
0b598     02 00 00 FF 
0b59c     38 E4 85 F1 | 	sub	objptr, ##1080
0b5a0     F2 14 02 F1 | 	add	arg02, objptr
0b5a4     0A 13 02 FB | 	rdlong	arg01, arg02
0b5a8     B9 01 00 FF 
0b5ac     4D 15 06 F6 | 	mov	arg02, ##@LR__5887
0b5b0     35 00 00 FF 
0b5b4     0C E4 85 F1 | 	sub	objptr, ##27148
0b5b8     08 BB B1 FD | 	call	#__system___string_cmp
0b5bc     00 FA 0D F2 | 	cmp	result1, #0 wz
0b5c0     14 02 90 5D |  if_ne	jmp	#LR__0955
0b5c4     37 00 00 FF 
0b5c8     44 E4 05 F1 | 	add	objptr, ##28228
0b5cc     F2 2A 02 FB | 	rdlong	local03, objptr
0b5d0     37 00 00 FF 
0b5d4     44 E4 85 F1 | 	sub	objptr, ##28228
0b5d8     01 2A 06 F1 | 	add	local03, #1
0b5dc                 | '   i=ct+1
0b5dc                 | '   do
0b5dc                 | LR__0950
0b5dc                 | '     if lparts(i).token=token_decimal then
0b5dc     15 FB 01 F6 | 	mov	result1, local03
0b5e0     03 FA 65 F0 | 	shl	result1, #3
0b5e4     35 00 00 FF 
0b5e8     0C E4 05 F1 | 	add	objptr, ##27148
0b5ec     F2 FA 01 F1 | 	add	result1, objptr
0b5f0     04 FA 05 F1 | 	add	result1, #4
0b5f4     FD FA 01 FB | 	rdlong	result1, result1
0b5f8     01 00 00 FF 
0b5fc     00 FA 0D F2 | 	cmp	result1, ##512 wz
0b600     35 00 00 FF 
0b604     0C E4 85 F1 | 	sub	objptr, ##27148
0b608     DC 00 90 5D |  if_ne	jmp	#LR__0951
0b60c     4A 00 00 FF 
0b610     7C E4 05 F1 | 	add	objptr, ##38012
0b614     F2 FA 01 FB | 	rdlong	result1, objptr
0b618     FD 14 02 F6 | 	mov	arg02, result1
0b61c     01 14 66 F0 | 	shl	arg02, #1
0b620     FD 14 02 F1 | 	add	arg02, result1
0b624     02 14 66 F0 | 	shl	arg02, #2
0b628     03 00 00 FF 
0b62c     00 E4 85 F1 | 	sub	objptr, ##1536
0b630     F2 14 02 F1 | 	add	arg02, objptr
0b634     00 00 C0 FF 
0b638     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0b63c     03 00 00 FF 
0b640     00 E4 05 F1 | 	add	objptr, ##1536
0b644     F2 14 02 FB | 	rdlong	arg02, objptr
0b648     0A 2D 02 F6 | 	mov	local04, arg02
0b64c     01 2C 66 F0 | 	shl	local04, #1
0b650     0A 2D 02 F1 | 	add	local04, arg02
0b654     02 2C 66 F0 | 	shl	local04, #2
0b658     03 00 00 FF 
0b65c     00 E4 85 F1 | 	sub	objptr, ##1536
0b660     F2 2C 02 F1 | 	add	local04, objptr
0b664     15 15 02 F6 | 	mov	arg02, local03
0b668     03 14 66 F0 | 	shl	arg02, #3
0b66c     12 00 00 FF 
0b670     70 E4 85 F1 | 	sub	objptr, ##9328
0b674     F2 14 02 F1 | 	add	arg02, objptr
0b678     0A 13 02 FB | 	rdlong	arg01, arg02
0b67c     00 14 06 F6 | 	mov	arg02, #0
0b680     35 00 00 FF 
0b684     0C E4 85 F1 | 	sub	objptr, ##27148
0b688     04 EF B1 FD | 	call	#__system____builtin_atoi
0b68c     04 2C 06 F1 | 	add	local04, #4
0b690     16 FB 61 FC | 	wrlong	result1, local04
0b694     4A 00 00 FF 
0b698     7C E4 05 F1 | 	add	objptr, ##38012
0b69c     F2 14 02 FB | 	rdlong	arg02, objptr
0b6a0     0A 2D 02 F6 | 	mov	local04, arg02
0b6a4     01 2C 66 F0 | 	shl	local04, #1
0b6a8     0A 2D 02 F1 | 	add	local04, arg02
0b6ac     02 2C 66 F0 | 	shl	local04, #2
0b6b0     03 00 00 FF 
0b6b4     00 E4 85 F1 | 	sub	objptr, ##1536
0b6b8     F2 2C 02 F1 | 	add	local04, objptr
0b6bc     08 2C 06 F1 | 	add	local04, #8
0b6c0     16 A7 68 FC | 	wrlong	#83, local04
0b6c4     03 00 00 FF 
0b6c8     00 E4 05 F1 | 	add	objptr, ##1536
0b6cc     F2 2C 02 FB | 	rdlong	local04, objptr
0b6d0     01 2C 06 F1 | 	add	local04, #1
0b6d4     F2 2C 62 FC | 	wrlong	local04, objptr
0b6d8     4A 00 00 FF 
0b6dc     7C E4 85 F1 | 	sub	objptr, ##38012
0b6e0     01 26 06 F1 | 	add	local01, #1
0b6e4     08 00 90 FD | 	jmp	#LR__0952
0b6e8                 | LR__0951
0b6e8                 | '       return 17
0b6e8     11 FA 05 F6 | 	mov	result1, #17
0b6ec     5C 04 90 FD | 	jmp	#LR__0965
0b6f0                 | LR__0952
0b6f0     01 2A 06 F1 | 	add	local03, #1
0b6f4                 | '     i+=1
0b6f4                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b6f4     15 2D 02 F6 | 	mov	local04, local03
0b6f8     03 2C 66 F0 | 	shl	local04, #3
0b6fc     35 00 00 FF 
0b700     0C E4 05 F1 | 	add	objptr, ##27148
0b704     F2 2C 02 F1 | 	add	local04, objptr
0b708     04 2C 06 F1 | 	add	local04, #4
0b70c     16 2D 02 FB | 	rdlong	local04, local04
0b710     11 2C 0E F2 | 	cmp	local04, #17 wz
0b714     35 00 00 FF 
0b718     0C E4 85 F1 | 	sub	objptr, ##27148
0b71c     30 00 90 AD |  if_e	jmp	#LR__0953
0b720     15 2D 02 F6 | 	mov	local04, local03
0b724     03 2C 66 F0 | 	shl	local04, #3
0b728     35 00 00 FF 
0b72c     0C E4 05 F1 | 	add	objptr, ##27148
0b730     F2 2C 02 F1 | 	add	local04, objptr
0b734     04 2C 06 F1 | 	add	local04, #4
0b738     16 2D 02 FB | 	rdlong	local04, local04
0b73c     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b740     35 00 00 FF 
0b744     0C E4 85 F1 | 	sub	objptr, ##27148
0b748     15 FA 05 56 |  if_ne	mov	result1, #21
0b74c     FC 03 90 5D |  if_ne	jmp	#LR__0965
0b750                 | LR__0953
0b750                 | '     if lparts(i).token=token_end then exit loop
0b750     15 2D 02 F6 | 	mov	local04, local03
0b754     03 2C 66 F0 | 	shl	local04, #3
0b758     35 00 00 FF 
0b75c     0C E4 05 F1 | 	add	objptr, ##27148
0b760     F2 2C 02 F1 | 	add	local04, objptr
0b764     04 2C 06 F1 | 	add	local04, #4
0b768     16 2D 02 FB | 	rdlong	local04, local04
0b76c     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b770     35 00 00 FF 
0b774     0C E4 85 F1 | 	sub	objptr, ##27148
0b778     30 00 90 AD |  if_e	jmp	#LR__0954
0b77c     01 2A 06 F1 | 	add	local03, #1
0b780     15 2D 02 F6 | 	mov	local04, local03
0b784     03 2C 66 F0 | 	shl	local04, #3
0b788     35 00 00 FF 
0b78c     0C E4 05 F1 | 	add	objptr, ##27148
0b790     F2 2C 02 F1 | 	add	local04, objptr
0b794     04 2C 06 F1 | 	add	local04, #4
0b798     16 2D 02 FB | 	rdlong	local04, local04
0b79c     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b7a0     35 00 00 FF 
0b7a4     0C E4 85 F1 | 	sub	objptr, ##27148
0b7a8     30 FE 9F 5D |  if_ne	jmp	#LR__0950
0b7ac                 | LR__0954
0b7ac     14 2D 02 F6 | 	mov	local04, local02
0b7b0     01 2C 66 F0 | 	shl	local04, #1
0b7b4     14 2D 02 F1 | 	add	local04, local02
0b7b8     02 2C 66 F0 | 	shl	local04, #2
0b7bc     47 00 00 FF 
0b7c0     7C E4 05 F1 | 	add	objptr, ##36476
0b7c4     F2 2C 02 F1 | 	add	local04, objptr
0b7c8     04 2C 06 F1 | 	add	local04, #4
0b7cc     16 03 68 FC | 	wrlong	#1, local04
0b7d0     47 00 00 FF 
0b7d4     7C E4 85 F1 | 	sub	objptr, ##36476
0b7d8                 | LR__0955
0b7d8                 | ' 
0b7d8                 | ' if lparts(ct).part$="gosub" then
0b7d8     37 00 00 FF 
0b7dc     44 E4 05 F1 | 	add	objptr, ##28228
0b7e0     F2 2A 02 FB | 	rdlong	local03, objptr
0b7e4     03 2A 66 F0 | 	shl	local03, #3
0b7e8     02 00 00 FF 
0b7ec     38 E4 85 F1 | 	sub	objptr, ##1080
0b7f0     F2 2A 02 F1 | 	add	local03, objptr
0b7f4     15 13 02 FB | 	rdlong	arg01, local03
0b7f8     B9 01 00 FF 
0b7fc     52 15 06 F6 | 	mov	arg02, ##@LR__5888
0b800     35 00 00 FF 
0b804     0C E4 85 F1 | 	sub	objptr, ##27148
0b808     B8 B8 B1 FD | 	call	#__system___string_cmp
0b80c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b810     84 02 90 5D |  if_ne	jmp	#LR__0961
0b814     37 00 00 FF 
0b818     44 E4 05 F1 | 	add	objptr, ##28228
0b81c     F2 2A 02 FB | 	rdlong	local03, objptr
0b820     37 00 00 FF 
0b824     44 E4 85 F1 | 	sub	objptr, ##28228
0b828     01 2A 06 F1 | 	add	local03, #1
0b82c                 | '   i=ct+1
0b82c                 | '   do
0b82c                 | LR__0956
0b82c                 | '     if lparts(i).token=token_decimal then
0b82c     15 2D 02 F6 | 	mov	local04, local03
0b830     03 2C 66 F0 | 	shl	local04, #3
0b834     35 00 00 FF 
0b838     0C E4 05 F1 | 	add	objptr, ##27148
0b83c     F2 2C 02 F1 | 	add	local04, objptr
0b840     04 2C 06 F1 | 	add	local04, #4
0b844     16 2D 02 FB | 	rdlong	local04, local04
0b848     01 00 00 FF 
0b84c     00 2C 0E F2 | 	cmp	local04, ##512 wz
0b850     35 00 00 FF 
0b854     0C E4 85 F1 | 	sub	objptr, ##27148
0b858     4C 01 90 5D |  if_ne	jmp	#LR__0957
0b85c     4A 00 00 FF 
0b860     7C E4 05 F1 | 	add	objptr, ##38012
0b864     F2 FA 01 FB | 	rdlong	result1, objptr
0b868     FD 2C 02 F6 | 	mov	local04, result1
0b86c     01 2C 66 F0 | 	shl	local04, #1
0b870     FD 2C 02 F1 | 	add	local04, result1
0b874     02 2C 66 F0 | 	shl	local04, #2
0b878     03 00 00 FF 
0b87c     00 E4 85 F1 | 	sub	objptr, ##1536
0b880     F2 2C 02 F1 | 	add	local04, objptr
0b884     08 2C 06 F1 | 	add	local04, #8
0b888     16 53 69 FC | 	wrlong	#169, local04
0b88c     03 00 00 FF 
0b890     00 E4 05 F1 | 	add	objptr, ##1536
0b894     F2 FA 01 FB | 	rdlong	result1, objptr
0b898     01 FA 05 F1 | 	add	result1, #1
0b89c     F2 FA 61 FC | 	wrlong	result1, objptr
0b8a0     FD 2C 02 F6 | 	mov	local04, result1
0b8a4     01 2C 66 F0 | 	shl	local04, #1
0b8a8     FD 2C 02 F1 | 	add	local04, result1
0b8ac     02 2C 66 F0 | 	shl	local04, #2
0b8b0     03 00 00 FF 
0b8b4     00 E4 85 F1 | 	sub	objptr, ##1536
0b8b8     F2 2C 02 F1 | 	add	local04, objptr
0b8bc     00 00 C0 FF 
0b8c0     16 01 68 FC | 	wrlong	##-2147483648, local04
0b8c4     03 00 00 FF 
0b8c8     00 E4 05 F1 | 	add	objptr, ##1536
0b8cc     F2 FA 01 FB | 	rdlong	result1, objptr
0b8d0     FD 2C 02 F6 | 	mov	local04, result1
0b8d4     01 2C 66 F0 | 	shl	local04, #1
0b8d8     FD 2C 02 F1 | 	add	local04, result1
0b8dc     02 2C 66 F0 | 	shl	local04, #2
0b8e0     03 00 00 FF 
0b8e4     00 E4 85 F1 | 	sub	objptr, ##1536
0b8e8     F2 2C 02 F1 | 	add	local04, objptr
0b8ec     15 13 02 F6 | 	mov	arg01, local03
0b8f0     03 12 66 F0 | 	shl	arg01, #3
0b8f4     12 00 00 FF 
0b8f8     70 E4 85 F1 | 	sub	objptr, ##9328
0b8fc     F2 12 02 F1 | 	add	arg01, objptr
0b900     09 13 02 FB | 	rdlong	arg01, arg01
0b904     00 14 06 F6 | 	mov	arg02, #0
0b908     35 00 00 FF 
0b90c     0C E4 85 F1 | 	sub	objptr, ##27148
0b910     7C EC B1 FD | 	call	#__system____builtin_atoi
0b914     04 2C 06 F1 | 	add	local04, #4
0b918     16 FB 61 FC | 	wrlong	result1, local04
0b91c     4A 00 00 FF 
0b920     7C E4 05 F1 | 	add	objptr, ##38012
0b924     F2 12 02 FB | 	rdlong	arg01, objptr
0b928     09 2D 02 F6 | 	mov	local04, arg01
0b92c     01 2C 66 F0 | 	shl	local04, #1
0b930     09 2D 02 F1 | 	add	local04, arg01
0b934     02 2C 66 F0 | 	shl	local04, #2
0b938     03 00 00 FF 
0b93c     00 E4 85 F1 | 	sub	objptr, ##1536
0b940     F2 2C 02 F1 | 	add	local04, objptr
0b944     08 2C 06 F1 | 	add	local04, #8
0b948     16 A7 68 FC | 	wrlong	#83, local04
0b94c     03 00 00 FF 
0b950     00 E4 05 F1 | 	add	objptr, ##1536
0b954     F2 12 02 FB | 	rdlong	arg01, objptr
0b958     01 12 06 F1 | 	add	arg01, #1
0b95c     F2 12 62 FC | 	wrlong	arg01, objptr
0b960     01 26 06 F1 | 	add	local01, #1
0b964     09 2D 02 F6 | 	mov	local04, arg01
0b968     01 2C 66 F0 | 	shl	local04, #1
0b96c     09 2D 02 F1 | 	add	local04, arg01
0b970     02 2C 66 F0 | 	shl	local04, #2
0b974     03 00 00 FF 
0b978     00 E4 85 F1 | 	sub	objptr, ##1536
0b97c     F2 2C 02 F1 | 	add	local04, objptr
0b980     08 2C 06 F1 | 	add	local04, #8
0b984     16 5B 68 FC | 	wrlong	#45, local04
0b988     03 00 00 FF 
0b98c     00 E4 05 F1 | 	add	objptr, ##1536
0b990     F2 2C 02 FB | 	rdlong	local04, objptr
0b994     01 2C 06 F1 | 	add	local04, #1
0b998     F2 2C 62 FC | 	wrlong	local04, objptr
0b99c     4A 00 00 FF 
0b9a0     7C E4 85 F1 | 	sub	objptr, ##38012
0b9a4     08 00 90 FD | 	jmp	#LR__0958
0b9a8                 | LR__0957
0b9a8                 | '       return 17
0b9a8     11 FA 05 F6 | 	mov	result1, #17
0b9ac     9C 01 90 FD | 	jmp	#LR__0965
0b9b0                 | LR__0958
0b9b0     01 2A 06 F1 | 	add	local03, #1
0b9b4                 | '     i+=1
0b9b4                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b9b4     15 2D 02 F6 | 	mov	local04, local03
0b9b8     03 2C 66 F0 | 	shl	local04, #3
0b9bc     35 00 00 FF 
0b9c0     0C E4 05 F1 | 	add	objptr, ##27148
0b9c4     F2 2C 02 F1 | 	add	local04, objptr
0b9c8     04 2C 06 F1 | 	add	local04, #4
0b9cc     16 2D 02 FB | 	rdlong	local04, local04
0b9d0     11 2C 0E F2 | 	cmp	local04, #17 wz
0b9d4     35 00 00 FF 
0b9d8     0C E4 85 F1 | 	sub	objptr, ##27148
0b9dc     30 00 90 AD |  if_e	jmp	#LR__0959
0b9e0     15 2D 02 F6 | 	mov	local04, local03
0b9e4     03 2C 66 F0 | 	shl	local04, #3
0b9e8     35 00 00 FF 
0b9ec     0C E4 05 F1 | 	add	objptr, ##27148
0b9f0     F2 2C 02 F1 | 	add	local04, objptr
0b9f4     04 2C 06 F1 | 	add	local04, #4
0b9f8     16 2D 02 FB | 	rdlong	local04, local04
0b9fc     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ba00     35 00 00 FF 
0ba04     0C E4 85 F1 | 	sub	objptr, ##27148
0ba08     15 FA 05 56 |  if_ne	mov	result1, #21
0ba0c     3C 01 90 5D |  if_ne	jmp	#LR__0965
0ba10                 | LR__0959
0ba10                 | '     if lparts(i).token=token_end then exit loop
0ba10     15 2D 02 F6 | 	mov	local04, local03
0ba14     03 2C 66 F0 | 	shl	local04, #3
0ba18     35 00 00 FF 
0ba1c     0C E4 05 F1 | 	add	objptr, ##27148
0ba20     F2 2C 02 F1 | 	add	local04, objptr
0ba24     04 2C 06 F1 | 	add	local04, #4
0ba28     16 2D 02 FB | 	rdlong	local04, local04
0ba2c     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ba30     35 00 00 FF 
0ba34     0C E4 85 F1 | 	sub	objptr, ##27148
0ba38     30 00 90 AD |  if_e	jmp	#LR__0960
0ba3c     01 2A 06 F1 | 	add	local03, #1
0ba40     15 2D 02 F6 | 	mov	local04, local03
0ba44     03 2C 66 F0 | 	shl	local04, #3
0ba48     35 00 00 FF 
0ba4c     0C E4 05 F1 | 	add	objptr, ##27148
0ba50     F2 2C 02 F1 | 	add	local04, objptr
0ba54     04 2C 06 F1 | 	add	local04, #4
0ba58     16 2D 02 FB | 	rdlong	local04, local04
0ba5c     FE 2D 0E F2 | 	cmp	local04, #510 wz
0ba60     35 00 00 FF 
0ba64     0C E4 85 F1 | 	sub	objptr, ##27148
0ba68     C0 FD 9F 5D |  if_ne	jmp	#LR__0956
0ba6c                 | LR__0960
0ba6c     14 2D 02 F6 | 	mov	local04, local02
0ba70     01 2C 66 F0 | 	shl	local04, #1
0ba74     14 2D 02 F1 | 	add	local04, local02
0ba78     02 2C 66 F0 | 	shl	local04, #2
0ba7c     47 00 00 FF 
0ba80     7C E4 05 F1 | 	add	objptr, ##36476
0ba84     F2 2C 02 F1 | 	add	local04, objptr
0ba88     04 2C 06 F1 | 	add	local04, #4
0ba8c     16 07 68 FC | 	wrlong	#3, local04
0ba90     47 00 00 FF 
0ba94     7C E4 85 F1 | 	sub	objptr, ##36476
0ba98                 | LR__0961
0ba98     14 2B 02 F6 | 	mov	local03, local02
0ba9c     01 2A 66 F0 | 	shl	local03, #1
0baa0     14 2B 02 F1 | 	add	local03, local02
0baa4     02 2A 66 F0 | 	shl	local03, #2
0baa8     47 00 00 FF 
0baac     7C E4 05 F1 | 	add	objptr, ##36476
0bab0     F2 2A 02 F1 | 	add	local03, objptr
0bab4     15 27 62 FC | 	wrlong	local01, local03
0bab8                 | ' compiledline(onlineptr).result.uresult=numpar
0bab8                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0bab8     03 00 00 FF 
0babc     00 E4 05 F1 | 	add	objptr, ##1536
0bac0     F2 2A 02 FB | 	rdlong	local03, objptr
0bac4     4A 00 00 FF 
0bac8     7C E4 85 F1 | 	sub	objptr, ##38012
0bacc     97 3C 48 FB | 	callpa	#(@LR__0964-@LR__0962)>>2,fcache_load_ptr_
0bad0                 | LR__0962
0bad0     15 2D 02 F6 | 	mov	local04, local03
0bad4     01 2C 66 F0 | 	shl	local04, #1
0bad8     15 2D 02 F1 | 	add	local04, local03
0badc     02 2C 66 F0 | 	shl	local04, #2
0bae0     47 00 00 FF 
0bae4     7C E4 05 F1 | 	add	objptr, ##36476
0bae8     F2 2C 02 F1 | 	add	local04, objptr
0baec     08 2C 06 F1 | 	add	local04, #8
0baf0     16 2D 02 FB | 	rdlong	local04, local04
0baf4     2D 2C 0E F2 | 	cmp	local04, #45 wz
0baf8     47 00 00 FF 
0bafc     7C E4 85 F1 | 	sub	objptr, ##36476
0bb00     38 00 90 5D |  if_ne	jmp	#LR__0963
0bb04     15 2D 02 F6 | 	mov	local04, local03
0bb08     01 2C 66 F0 | 	shl	local04, #1
0bb0c     15 2D 02 F1 | 	add	local04, local03
0bb10     02 2C 66 F0 | 	shl	local04, #2
0bb14     47 00 00 FF 
0bb18     7C E4 05 F1 | 	add	objptr, ##36476
0bb1c     F2 2C 02 F1 | 	add	local04, objptr
0bb20     03 00 00 FF 
0bb24     00 E4 05 F1 | 	add	objptr, ##1536
0bb28     F2 26 02 FB | 	rdlong	local01, objptr
0bb2c     4A 00 00 FF 
0bb30     7C E4 85 F1 | 	sub	objptr, ##38012
0bb34     02 26 86 F1 | 	sub	local01, #2
0bb38     16 27 62 FC | 	wrlong	local01, local04
0bb3c                 | LR__0963
0bb3c     01 2A 86 F1 | 	sub	local03, #1
0bb40     14 2B 52 F2 | 	cmps	local03, local02 wc
0bb44     88 FF 9F 3D |  if_ae	jmp	#LR__0962
0bb48                 | LR__0964
0bb48                 | ' return 0
0bb48     00 FA 05 F6 | 	mov	result1, #0
0bb4c                 | LR__0965
0bb4c     A7 F0 03 F6 | 	mov	ptra, fp
0bb50     B2 00 A0 FD | 	call	#popregs_
0bb54                 | _compile_on_ret
0bb54     2D 00 64 FD | 	ret
0bb58                 | 
0bb58                 | ' 
0bb58                 | ' '----- A helper for compile_input and compile_read
0bb58                 | '  
0bb58                 | ' function getaddr() as ulong
0bb58                 | _getaddr
0bb58     0B 4A 05 F6 | 	mov	COUNT_, #11
0bb5c     A8 00 A0 FD | 	call	#pushregs_
0bb60     37 00 00 FF 
0bb64     44 E4 05 F1 | 	add	objptr, ##28228
0bb68     F2 2C 02 FB | 	rdlong	local04, objptr
0bb6c     03 2C 66 F0 | 	shl	local04, #3
0bb70     02 00 00 FF 
0bb74     38 E4 85 F1 | 	sub	objptr, ##1080
0bb78     F2 2C 02 F1 | 	add	local04, objptr
0bb7c     16 2F 02 FB | 	rdlong	local05, local04
0bb80     01 30 66 F6 | 	neg	local06, #1
0bb84                 | ' 
0bb84                 | ' varname$=lparts(ct).part$
0bb84                 | ' j=-1
0bb84                 | ' 
0bb84                 | ' for i=0 to varnum-1
0bb84     00 32 06 F6 | 	mov	local07, #0
0bb88     04 E4 85 F1 | 	sub	objptr, #4
0bb8c     F2 34 02 FB | 	rdlong	local08, objptr
0bb90     35 00 00 FF 
0bb94     08 E4 85 F1 | 	sub	objptr, ##27144
0bb98                 | LR__0970
0bb98     1A 33 52 F2 | 	cmps	local07, local08 wc
0bb9c     38 00 90 3D |  if_ae	jmp	#LR__0971
0bba0                 | '   if variables(i).name=varname$ then j=i : exit
0bba0     19 2D 02 F6 | 	mov	local04, local07
0bba4     04 2C 66 F0 | 	shl	local04, #4
0bba8     14 00 00 FF 
0bbac     F8 E5 05 F1 | 	add	objptr, ##10744
0bbb0     F2 2C 02 F1 | 	add	local04, objptr
0bbb4     16 13 02 FB | 	rdlong	arg01, local04
0bbb8     17 15 02 F6 | 	mov	arg02, local05
0bbbc     14 00 00 FF 
0bbc0     F8 E5 85 F1 | 	sub	objptr, ##10744
0bbc4     FC B4 B1 FD | 	call	#__system___string_cmp
0bbc8     00 FA 0D F2 | 	cmp	result1, #0 wz
0bbcc     19 31 02 A6 |  if_e	mov	local06, local07
0bbd0     01 32 06 51 |  if_ne	add	local07, #1
0bbd4     C0 FF 9F 5D |  if_ne	jmp	#LR__0970
0bbd8                 | LR__0971
0bbd8                 | ' if  j=-1 andalso varnum<maxvars then   
0bbd8     FF FF 7F FF 
0bbdc     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0bbe0     A8 00 90 5D |  if_ne	jmp	#LR__0972
0bbe4     35 00 00 FF 
0bbe8     08 E4 05 F1 | 	add	objptr, ##27144
0bbec     F2 34 02 FB | 	rdlong	local08, objptr
0bbf0     35 00 00 FF 
0bbf4     08 E4 85 F1 | 	sub	objptr, ##27144
0bbf8     02 00 00 FF 
0bbfc     00 34 56 F2 | 	cmps	local08, ##1024 wc
0bc00     88 00 90 3D |  if_ae	jmp	#LR__0972
0bc04     35 00 00 FF 
0bc08     08 E4 05 F1 | 	add	objptr, ##27144
0bc0c     F2 2C 02 FB | 	rdlong	local04, objptr
0bc10     04 2C 66 F0 | 	shl	local04, #4
0bc14     20 00 00 FF 
0bc18     10 E4 85 F1 | 	sub	objptr, ##16400
0bc1c     F2 2C 02 F1 | 	add	local04, objptr
0bc20     16 2F 62 FC | 	wrlong	local05, local04
0bc24     20 00 00 FF 
0bc28     10 E4 05 F1 | 	add	objptr, ##16400
0bc2c     F2 2C 02 FB | 	rdlong	local04, objptr
0bc30     04 2C 66 F0 | 	shl	local04, #4
0bc34     20 00 00 FF 
0bc38     10 E4 85 F1 | 	sub	objptr, ##16400
0bc3c     F2 2C 02 F1 | 	add	local04, objptr
0bc40     04 2C 06 F1 | 	add	local04, #4
0bc44     16 01 68 FC | 	wrlong	#0, local04
0bc48     20 00 00 FF 
0bc4c     10 E4 05 F1 | 	add	objptr, ##16400
0bc50     F2 2C 02 FB | 	rdlong	local04, objptr
0bc54     04 2C 66 F0 | 	shl	local04, #4
0bc58     20 00 00 FF 
0bc5c     10 E4 85 F1 | 	sub	objptr, ##16400
0bc60     F2 2C 02 F1 | 	add	local04, objptr
0bc64     0C 2C 06 F1 | 	add	local04, #12
0bc68     16 39 68 FC | 	wrlong	#28, local04
0bc6c     20 00 00 FF 
0bc70     10 E4 05 F1 | 	add	objptr, ##16400
0bc74     F2 34 02 FB | 	rdlong	local08, objptr
0bc78     1A 31 02 F6 | 	mov	local06, local08
0bc7c     01 34 06 F1 | 	add	local08, #1
0bc80     F2 34 62 FC | 	wrlong	local08, objptr
0bc84     35 00 00 FF 
0bc88     08 E4 85 F1 | 	sub	objptr, ##27144
0bc8c                 | LR__0972
0bc8c     00 34 06 F6 | 	mov	local08, #0
0bc90                 | ' numpar=0
0bc90                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0bc90     37 00 00 FF 
0bc94     44 E4 05 F1 | 	add	objptr, ##28228
0bc98     F2 2C 02 FB | 	rdlong	local04, objptr
0bc9c     01 2C 06 F1 | 	add	local04, #1
0bca0     03 2C 66 F0 | 	shl	local04, #3
0bca4     02 00 00 FF 
0bca8     38 E4 85 F1 | 	sub	objptr, ##1080
0bcac     F2 2C 02 F1 | 	add	local04, objptr
0bcb0     04 2C 06 F1 | 	add	local04, #4
0bcb4     16 33 02 FB | 	rdlong	local07, local04
0bcb8     15 32 0E F2 | 	cmp	local07, #21 wz
0bcbc     35 00 00 FF 
0bcc0     0C E4 85 F1 | 	sub	objptr, ##27148
0bcc4     54 01 90 5D |  if_ne	jmp	#LR__0977
0bcc8     37 00 00 FF 
0bccc     44 E4 05 F1 | 	add	objptr, ##28228
0bcd0     F2 36 02 FB | 	rdlong	local09, objptr
0bcd4     01 36 06 F1 | 	add	local09, #1
0bcd8     F2 36 62 FC | 	wrlong	local09, objptr
0bcdc     37 00 00 FF 
0bce0     44 E4 85 F1 | 	sub	objptr, ##28228
0bce4                 | '   ct+=1 											' omit this lpar, this is for expr list
0bce4                 | '   do
0bce4                 | LR__0973
0bce4     37 00 00 FF 
0bce8     44 E4 05 F1 | 	add	objptr, ##28228
0bcec     F2 2C 02 FB | 	rdlong	local04, objptr
0bcf0     01 2C 06 F1 | 	add	local04, #1
0bcf4     F2 2C 62 FC | 	wrlong	local04, objptr
0bcf8                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0bcf8                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0bcf8     03 2C 66 F0 | 	shl	local04, #3
0bcfc     02 00 00 FF 
0bd00     38 E4 85 F1 | 	sub	objptr, ##1080
0bd04     F2 2C 02 F1 | 	add	local04, objptr
0bd08     04 2C 06 F1 | 	add	local04, #4
0bd0c     16 37 02 FB | 	rdlong	local09, local04
0bd10     15 36 0E F2 | 	cmp	local09, #21 wz
0bd14     35 00 00 FF 
0bd18     0C E4 85 F1 | 	sub	objptr, ##27148
0bd1c     44 00 90 5D |  if_ne	jmp	#LR__0974
0bd20     37 00 00 FF 
0bd24     44 E4 05 F1 | 	add	objptr, ##28228
0bd28     F2 36 02 FB | 	rdlong	local09, objptr
0bd2c     01 36 06 F1 | 	add	local09, #1
0bd30     F2 36 62 FC | 	wrlong	local09, objptr
0bd34     37 00 00 FF 
0bd38     44 E4 85 F1 | 	sub	objptr, ##28228
0bd3c     AC 01 B0 FD | 	call	#_expr
0bd40     FD 38 02 F6 | 	mov	local10, result1
0bd44     37 00 00 FF 
0bd48     44 E4 05 F1 | 	add	objptr, ##28228
0bd4c     F2 36 02 FB | 	rdlong	local09, objptr
0bd50     01 36 06 F1 | 	add	local09, #1
0bd54     F2 36 62 FC | 	wrlong	local09, objptr
0bd58     37 00 00 FF 
0bd5c     44 E4 85 F1 | 	sub	objptr, ##28228
0bd60     08 00 90 FD | 	jmp	#LR__0975
0bd64                 | LR__0974
0bd64     84 01 B0 FD | 	call	#_expr
0bd68     FD 38 02 F6 | 	mov	local10, result1
0bd6c                 | LR__0975
0bd6c                 | '     if err>0 then return err
0bd6c     01 38 56 F2 | 	cmps	local10, #1 wc
0bd70     1C FB 01 36 |  if_ae	mov	result1, local10
0bd74     68 01 90 3D |  if_ae	jmp	#LR__0978
0bd78     01 34 06 F1 | 	add	local08, #1
0bd7c     37 00 00 FF 
0bd80     44 E4 05 F1 | 	add	objptr, ##28228
0bd84     F2 2C 02 FB | 	rdlong	local04, objptr
0bd88     03 2C 66 F0 | 	shl	local04, #3
0bd8c     02 00 00 FF 
0bd90     38 E4 85 F1 | 	sub	objptr, ##1080
0bd94     F2 2C 02 F1 | 	add	local04, objptr
0bd98     04 2C 06 F1 | 	add	local04, #4
0bd9c     16 39 02 FB | 	rdlong	local10, local04
0bda0     14 38 0E F2 | 	cmp	local10, #20 wz
0bda4     35 00 00 FF 
0bda8     0C E4 85 F1 | 	sub	objptr, ##27148
0bdac     34 00 90 AD |  if_e	jmp	#LR__0976
0bdb0     37 00 00 FF 
0bdb4     44 E4 05 F1 | 	add	objptr, ##28228
0bdb8     F2 38 02 FB | 	rdlong	local10, objptr
0bdbc     03 38 66 F0 | 	shl	local10, #3
0bdc0     02 00 00 FF 
0bdc4     38 E4 85 F1 | 	sub	objptr, ##1080
0bdc8     F2 38 02 F1 | 	add	local10, objptr
0bdcc     04 38 06 F1 | 	add	local10, #4
0bdd0     1C 39 02 FB | 	rdlong	local10, local10
0bdd4     FE 39 0E F2 | 	cmp	local10, #510 wz
0bdd8     35 00 00 FF 
0bddc     0C E4 85 F1 | 	sub	objptr, ##27148
0bde0     00 FF 9F 5D |  if_ne	jmp	#LR__0973
0bde4                 | LR__0976
0bde4                 | '     if lparts(ct).token=token_end then return 14
0bde4     37 00 00 FF 
0bde8     44 E4 05 F1 | 	add	objptr, ##28228
0bdec     F2 2C 02 FB | 	rdlong	local04, objptr
0bdf0     03 2C 66 F0 | 	shl	local04, #3
0bdf4     02 00 00 FF 
0bdf8     38 E4 85 F1 | 	sub	objptr, ##1080
0bdfc     F2 2C 02 F1 | 	add	local04, objptr
0be00     04 2C 06 F1 | 	add	local04, #4
0be04     16 39 02 FB | 	rdlong	local10, local04
0be08     FE 39 0E F2 | 	cmp	local10, #510 wz
0be0c     35 00 00 FF 
0be10     0C E4 85 F1 | 	sub	objptr, ##27148
0be14     0E FA 05 A6 |  if_e	mov	result1, #14
0be18     C4 00 90 AD |  if_e	jmp	#LR__0978
0be1c                 | LR__0977
0be1c     1A 29 02 F6 | 	mov	local02, local08
0be20     12 2A 06 F6 | 	mov	local03, #18
0be24     18 27 02 F6 | 	mov	local01, local06
0be28     13 37 02 F6 | 	mov	local09, local01
0be2c     14 3B 02 F6 | 	mov	local11, local02
0be30     15 27 02 F6 | 	mov	local01, local03
0be34     4A 00 00 FF 
0be38     7C E4 05 F1 | 	add	objptr, ##38012
0be3c     F2 38 02 FB | 	rdlong	local10, objptr
0be40     1C 35 02 F6 | 	mov	local08, local10
0be44     01 34 66 F0 | 	shl	local08, #1
0be48     1C 35 02 F1 | 	add	local08, local10
0be4c     02 34 66 F0 | 	shl	local08, #2
0be50     03 00 00 FF 
0be54     00 E4 85 F1 | 	sub	objptr, ##1536
0be58     F2 34 02 F1 | 	add	local08, objptr
0be5c     1A 37 62 FC | 	wrlong	local09, local08
0be60     03 00 00 FF 
0be64     00 E4 05 F1 | 	add	objptr, ##1536
0be68     F2 38 02 FB | 	rdlong	local10, objptr
0be6c     1C 37 02 F6 | 	mov	local09, local10
0be70     01 36 66 F0 | 	shl	local09, #1
0be74     1C 37 02 F1 | 	add	local09, local10
0be78     02 36 66 F0 | 	shl	local09, #2
0be7c     03 00 00 FF 
0be80     00 E4 85 F1 | 	sub	objptr, ##1536
0be84     F2 36 02 F1 | 	add	local09, objptr
0be88     04 36 06 F1 | 	add	local09, #4
0be8c     1B 3B 62 FC | 	wrlong	local11, local09
0be90     03 00 00 FF 
0be94     00 E4 05 F1 | 	add	objptr, ##1536
0be98     F2 3A 02 FB | 	rdlong	local11, objptr
0be9c     1D 39 02 F6 | 	mov	local10, local11
0bea0     01 38 66 F0 | 	shl	local10, #1
0bea4     1D 39 02 F1 | 	add	local10, local11
0bea8     02 38 66 F0 | 	shl	local10, #2
0beac     03 00 00 FF 
0beb0     00 E4 85 F1 | 	sub	objptr, ##1536
0beb4     F2 38 02 F1 | 	add	local10, objptr
0beb8     08 38 06 F1 | 	add	local10, #8
0bebc     1C 27 62 FC | 	wrlong	local01, local10
0bec0     03 00 00 FF 
0bec4     00 E4 05 F1 | 	add	objptr, ##1536
0bec8     F2 36 02 FB | 	rdlong	local09, objptr
0becc     01 36 06 F1 | 	add	local09, #1
0bed0     F2 36 62 FC | 	wrlong	local09, objptr
0bed4     4A 00 00 FF 
0bed8     7C E4 85 F1 | 	sub	objptr, ##38012
0bedc                 | ' t2.result.twowords(1)=numpar
0bedc                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0bedc                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0bedc                 | ' return 0
0bedc     00 FA 05 F6 | 	mov	result1, #0
0bee0                 | LR__0978
0bee0     A7 F0 03 F6 | 	mov	ptra, fp
0bee4     B2 00 A0 FD | 	call	#popregs_
0bee8                 | _getaddr_ret
0bee8     2D 00 64 FD | 	ret
0beec                 | 
0beec                 | ' 
0beec                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0beec                 | ' '--------------------------------------------- 
0beec                 | ' 
0beec                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0beec                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0beec                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0beec                 | ' 
0beec                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0beec                 | ' '
0beec                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0beec                 | ' '
0beec                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0beec                 | ' 
0beec                 | ' function expr() as ulong 
0beec                 | _expr
0beec     07 4A 05 F6 | 	mov	COUNT_, #7
0bef0     A8 00 A0 FD | 	call	#pushregs_
0bef4                 | _expr_enter
0bef4     37 00 00 FF 
0bef8     44 E4 05 F1 | 	add	objptr, ##28228
0befc     F2 2C 02 FB | 	rdlong	local04, objptr
0bf00     03 2C 66 F0 | 	shl	local04, #3
0bf04     02 00 00 FF 
0bf08     38 E4 85 F1 | 	sub	objptr, ##1080
0bf0c     F2 2C 02 F1 | 	add	local04, objptr
0bf10     04 2C 06 F1 | 	add	local04, #4
0bf14     16 2F 02 FB | 	rdlong	local05, local04
0bf18                 | ' 
0bf18                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0bf18     FE 2F 0E F2 | 	cmp	local05, #510 wz
0bf1c     35 00 00 FF 
0bf20     0C E4 85 F1 | 	sub	objptr, ##27148
0bf24     C4 00 90 5D |  if_ne	jmp	#LR__0980
0bf28     1D 26 06 F6 | 	mov	local01, #29
0bf2c     FF 2A 06 F6 | 	mov	local03, #255
0bf30     13 31 02 F6 | 	mov	local06, local01
0bf34     14 33 02 F6 | 	mov	local07, local02
0bf38     15 27 02 F6 | 	mov	local01, local03
0bf3c     4A 00 00 FF 
0bf40     7C E4 05 F1 | 	add	objptr, ##38012
0bf44     F2 2E 02 FB | 	rdlong	local05, objptr
0bf48     17 2D 02 F6 | 	mov	local04, local05
0bf4c     01 2C 66 F0 | 	shl	local04, #1
0bf50     17 2D 02 F1 | 	add	local04, local05
0bf54     02 2C 66 F0 | 	shl	local04, #2
0bf58     03 00 00 FF 
0bf5c     00 E4 85 F1 | 	sub	objptr, ##1536
0bf60     F2 2C 02 F1 | 	add	local04, objptr
0bf64     16 31 62 FC | 	wrlong	local06, local04
0bf68     03 00 00 FF 
0bf6c     00 E4 05 F1 | 	add	objptr, ##1536
0bf70     F2 30 02 FB | 	rdlong	local06, objptr
0bf74     18 2F 02 F6 | 	mov	local05, local06
0bf78     01 2E 66 F0 | 	shl	local05, #1
0bf7c     18 2F 02 F1 | 	add	local05, local06
0bf80     02 2E 66 F0 | 	shl	local05, #2
0bf84     03 00 00 FF 
0bf88     00 E4 85 F1 | 	sub	objptr, ##1536
0bf8c     F2 2E 02 F1 | 	add	local05, objptr
0bf90     04 2E 06 F1 | 	add	local05, #4
0bf94     17 33 62 FC | 	wrlong	local07, local05
0bf98     03 00 00 FF 
0bf9c     00 E4 05 F1 | 	add	objptr, ##1536
0bfa0     F2 32 02 FB | 	rdlong	local07, objptr
0bfa4     19 31 02 F6 | 	mov	local06, local07
0bfa8     01 30 66 F0 | 	shl	local06, #1
0bfac     19 31 02 F1 | 	add	local06, local07
0bfb0     02 30 66 F0 | 	shl	local06, #2
0bfb4     03 00 00 FF 
0bfb8     00 E4 85 F1 | 	sub	objptr, ##1536
0bfbc     F2 30 02 F1 | 	add	local06, objptr
0bfc0     08 30 06 F1 | 	add	local06, #8
0bfc4     18 27 62 FC | 	wrlong	local01, local06
0bfc8     03 00 00 FF 
0bfcc     00 E4 05 F1 | 	add	objptr, ##1536
0bfd0     F2 30 02 FB | 	rdlong	local06, objptr
0bfd4     01 30 06 F1 | 	add	local06, #1
0bfd8     F2 30 62 FC | 	wrlong	local06, objptr
0bfdc     4A 00 00 FF 
0bfe0     7C E4 85 F1 | 	sub	objptr, ##38012
0bfe4     1D FA 05 F6 | 	mov	result1, #29
0bfe8     64 01 90 FD | 	jmp	#LR__0983
0bfec                 | LR__0980
0bfec     00 26 06 F6 | 	mov	local01, #0
0bff0     68 01 B0 FD | 	call	#_addsub
0bff4                 | ' t3.result.uresult=0
0bff4                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0bff4                 | ' if err>0 then return err
0bff4     01 FA 15 F2 | 	cmp	result1, #1 wc
0bff8     54 01 90 3D |  if_ae	jmp	#LR__0983
0bffc     37 00 00 FF 
0c000     44 E4 05 F1 | 	add	objptr, ##28228
0c004     F2 2C 02 FB | 	rdlong	local04, objptr
0c008     03 2C 66 F0 | 	shl	local04, #3
0c00c     02 00 00 FF 
0c010     38 E4 85 F1 | 	sub	objptr, ##1080
0c014     F2 2C 02 F1 | 	add	local04, objptr
0c018     04 2C 06 F1 | 	add	local04, #4
0c01c     16 2F 02 FB | 	rdlong	local05, local04
0c020                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0c020                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0c020     35 00 00 FF 
0c024     0C E4 85 F1 | 	sub	objptr, ##27148
0c028                 | LR__0981
0c028     1B 2E 0E F2 | 	cmp	local05, #27 wz
0c02c     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0c030     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0c034     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0c038     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0c03c     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0c040     08 01 90 5D |  if_ne	jmp	#LR__0982
0c044     37 00 00 FF 
0c048     44 E4 05 F1 | 	add	objptr, ##28228
0c04c     F2 30 02 FB | 	rdlong	local06, objptr
0c050     01 30 06 F1 | 	add	local06, #1
0c054     F2 30 62 FC | 	wrlong	local06, objptr
0c058     37 00 00 FF 
0c05c     44 E4 85 F1 | 	sub	objptr, ##28228
0c060     F8 00 B0 FD | 	call	#_addsub
0c064                 | '   ct+=1
0c064                 | '   err=addsub() : if err>0 then return err
0c064     01 FA 15 F2 | 	cmp	result1, #1 wc
0c068     E4 00 90 3D |  if_ae	jmp	#LR__0983
0c06c     17 2B 02 F6 | 	mov	local03, local05
0c070     13 31 02 F6 | 	mov	local06, local01
0c074     14 33 02 F6 | 	mov	local07, local02
0c078     15 2F 02 F6 | 	mov	local05, local03
0c07c     4A 00 00 FF 
0c080     7C E4 05 F1 | 	add	objptr, ##38012
0c084     F2 2C 02 FB | 	rdlong	local04, objptr
0c088     16 FB 01 F6 | 	mov	result1, local04
0c08c     01 FA 65 F0 | 	shl	result1, #1
0c090     16 FB 01 F1 | 	add	result1, local04
0c094     02 FA 65 F0 | 	shl	result1, #2
0c098     03 00 00 FF 
0c09c     00 E4 85 F1 | 	sub	objptr, ##1536
0c0a0     F2 FA 01 F1 | 	add	result1, objptr
0c0a4     FD 30 62 FC | 	wrlong	local06, result1
0c0a8     03 00 00 FF 
0c0ac     00 E4 05 F1 | 	add	objptr, ##1536
0c0b0     F2 30 02 FB | 	rdlong	local06, objptr
0c0b4     18 2D 02 F6 | 	mov	local04, local06
0c0b8     01 2C 66 F0 | 	shl	local04, #1
0c0bc     18 2D 02 F1 | 	add	local04, local06
0c0c0     02 2C 66 F0 | 	shl	local04, #2
0c0c4     03 00 00 FF 
0c0c8     00 E4 85 F1 | 	sub	objptr, ##1536
0c0cc     F2 2C 02 F1 | 	add	local04, objptr
0c0d0     04 2C 06 F1 | 	add	local04, #4
0c0d4     16 33 62 FC | 	wrlong	local07, local04
0c0d8     03 00 00 FF 
0c0dc     00 E4 05 F1 | 	add	objptr, ##1536
0c0e0     F2 32 02 FB | 	rdlong	local07, objptr
0c0e4     19 31 02 F6 | 	mov	local06, local07
0c0e8     01 30 66 F0 | 	shl	local06, #1
0c0ec     19 31 02 F1 | 	add	local06, local07
0c0f0     02 30 66 F0 | 	shl	local06, #2
0c0f4     03 00 00 FF 
0c0f8     00 E4 85 F1 | 	sub	objptr, ##1536
0c0fc     F2 30 02 F1 | 	add	local06, objptr
0c100     08 30 06 F1 | 	add	local06, #8
0c104     18 2F 62 FC | 	wrlong	local05, local06
0c108     03 00 00 FF 
0c10c     00 E4 05 F1 | 	add	objptr, ##1536
0c110     F2 30 02 FB | 	rdlong	local06, objptr
0c114     01 30 06 F1 | 	add	local06, #1
0c118     F2 30 62 FC | 	wrlong	local06, objptr
0c11c     13 00 00 FF 
0c120     38 E4 85 F1 | 	sub	objptr, ##9784
0c124     F2 2C 02 FB | 	rdlong	local04, objptr
0c128     03 2C 66 F0 | 	shl	local04, #3
0c12c     02 00 00 FF 
0c130     38 E4 85 F1 | 	sub	objptr, ##1080
0c134     F2 2C 02 F1 | 	add	local04, objptr
0c138     04 2C 06 F1 | 	add	local04, #4
0c13c     16 2F 02 FB | 	rdlong	local05, local04
0c140     35 00 00 FF 
0c144     0C E4 85 F1 | 	sub	objptr, ##27148
0c148     DC FE 9F FD | 	jmp	#LR__0981
0c14c                 | LR__0982
0c14c                 | ' return 0  
0c14c     00 FA 05 F6 | 	mov	result1, #0
0c150                 | LR__0983
0c150     A7 F0 03 F6 | 	mov	ptra, fp
0c154     B2 00 A0 FD | 	call	#popregs_
0c158                 | _expr_ret
0c158     2D 00 64 FD | 	ret
0c15c                 | 
0c15c                 | ' 
0c15c                 | ' ' Second level operators : add, sub, logic
0c15c                 | ' 
0c15c                 | ' function addsub() as ulong
0c15c                 | _addsub
0c15c     07 4A 05 F6 | 	mov	COUNT_, #7
0c160     A8 00 A0 FD | 	call	#pushregs_
0c164                 | _addsub_enter
0c164     00 26 06 F6 | 	mov	local01, #0
0c168     60 01 B0 FD | 	call	#_muldiv
0c16c                 | ' 
0c16c                 | ' t3.result.uresult=0
0c16c                 | ' err=muldiv() : if err>0 then return err           			 
0c16c     01 FA 15 F2 | 	cmp	result1, #1 wc
0c170     4C 01 90 3D |  if_ae	jmp	#LR__0992
0c174     37 00 00 FF 
0c178     44 E4 05 F1 | 	add	objptr, ##28228
0c17c     F2 2C 02 FB | 	rdlong	local04, objptr
0c180     03 2C 66 F0 | 	shl	local04, #3
0c184     02 00 00 FF 
0c188     38 E4 85 F1 | 	sub	objptr, ##1080
0c18c     F2 2C 02 F1 | 	add	local04, objptr
0c190     04 2C 06 F1 | 	add	local04, #4
0c194     16 2F 02 FB | 	rdlong	local05, local04
0c198                 | ' op = lparts(ct).token				 
0c198                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0c198     35 00 00 FF 
0c19c     0C E4 85 F1 | 	sub	objptr, ##27148
0c1a0                 | LR__0990
0c1a0     01 2E 0E F2 | 	cmp	local05, #1 wz
0c1a4     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0c1a8     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0c1ac     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0c1b0     08 01 90 5D |  if_ne	jmp	#LR__0991
0c1b4     37 00 00 FF 
0c1b8     44 E4 05 F1 | 	add	objptr, ##28228
0c1bc     F2 2C 02 FB | 	rdlong	local04, objptr
0c1c0     01 2C 06 F1 | 	add	local04, #1
0c1c4     F2 2C 62 FC | 	wrlong	local04, objptr
0c1c8     37 00 00 FF 
0c1cc     44 E4 85 F1 | 	sub	objptr, ##28228
0c1d0     F8 00 B0 FD | 	call	#_muldiv
0c1d4                 | '   ct+=1
0c1d4                 | '   err=muldiv() : if err>0 then return err   
0c1d4     01 FA 15 F2 | 	cmp	result1, #1 wc
0c1d8     E4 00 90 3D |  if_ae	jmp	#LR__0992
0c1dc     17 2B 02 F6 | 	mov	local03, local05
0c1e0     13 31 02 F6 | 	mov	local06, local01
0c1e4     14 33 02 F6 | 	mov	local07, local02
0c1e8     15 2F 02 F6 | 	mov	local05, local03
0c1ec     4A 00 00 FF 
0c1f0     7C E4 05 F1 | 	add	objptr, ##38012
0c1f4     F2 2C 02 FB | 	rdlong	local04, objptr
0c1f8     16 FB 01 F6 | 	mov	result1, local04
0c1fc     01 FA 65 F0 | 	shl	result1, #1
0c200     16 FB 01 F1 | 	add	result1, local04
0c204     02 FA 65 F0 | 	shl	result1, #2
0c208     03 00 00 FF 
0c20c     00 E4 85 F1 | 	sub	objptr, ##1536
0c210     F2 FA 01 F1 | 	add	result1, objptr
0c214     FD 30 62 FC | 	wrlong	local06, result1
0c218     03 00 00 FF 
0c21c     00 E4 05 F1 | 	add	objptr, ##1536
0c220     F2 30 02 FB | 	rdlong	local06, objptr
0c224     18 2D 02 F6 | 	mov	local04, local06
0c228     01 2C 66 F0 | 	shl	local04, #1
0c22c     18 2D 02 F1 | 	add	local04, local06
0c230     02 2C 66 F0 | 	shl	local04, #2
0c234     03 00 00 FF 
0c238     00 E4 85 F1 | 	sub	objptr, ##1536
0c23c     F2 2C 02 F1 | 	add	local04, objptr
0c240     04 2C 06 F1 | 	add	local04, #4
0c244     16 33 62 FC | 	wrlong	local07, local04
0c248     03 00 00 FF 
0c24c     00 E4 05 F1 | 	add	objptr, ##1536
0c250     F2 32 02 FB | 	rdlong	local07, objptr
0c254     19 31 02 F6 | 	mov	local06, local07
0c258     01 30 66 F0 | 	shl	local06, #1
0c25c     19 31 02 F1 | 	add	local06, local07
0c260     02 30 66 F0 | 	shl	local06, #2
0c264     03 00 00 FF 
0c268     00 E4 85 F1 | 	sub	objptr, ##1536
0c26c     F2 30 02 F1 | 	add	local06, objptr
0c270     08 30 06 F1 | 	add	local06, #8
0c274     18 2F 62 FC | 	wrlong	local05, local06
0c278     03 00 00 FF 
0c27c     00 E4 05 F1 | 	add	objptr, ##1536
0c280     F2 30 02 FB | 	rdlong	local06, objptr
0c284     01 30 06 F1 | 	add	local06, #1
0c288     F2 30 62 FC | 	wrlong	local06, objptr
0c28c     13 00 00 FF 
0c290     38 E4 85 F1 | 	sub	objptr, ##9784
0c294     F2 2C 02 FB | 	rdlong	local04, objptr
0c298     03 2C 66 F0 | 	shl	local04, #3
0c29c     02 00 00 FF 
0c2a0     38 E4 85 F1 | 	sub	objptr, ##1080
0c2a4     F2 2C 02 F1 | 	add	local04, objptr
0c2a8     04 2C 06 F1 | 	add	local04, #4
0c2ac     16 2F 02 FB | 	rdlong	local05, local04
0c2b0     35 00 00 FF 
0c2b4     0C E4 85 F1 | 	sub	objptr, ##27148
0c2b8     E4 FE 9F FD | 	jmp	#LR__0990
0c2bc                 | LR__0991
0c2bc                 | ' return 0
0c2bc     00 FA 05 F6 | 	mov	result1, #0
0c2c0                 | LR__0992
0c2c0     A7 F0 03 F6 | 	mov	ptra, fp
0c2c4     B2 00 A0 FD | 	call	#popregs_
0c2c8                 | _addsub_ret
0c2c8     2D 00 64 FD | 	ret
0c2cc                 | 
0c2cc                 | ' 
0c2cc                 | ' ' Third level operators : mul,div,shift,power
0c2cc                 | ' 
0c2cc                 | ' function muldiv() as ulong
0c2cc                 | _muldiv
0c2cc     07 4A 05 F6 | 	mov	COUNT_, #7
0c2d0     A8 00 A0 FD | 	call	#pushregs_
0c2d4                 | _muldiv_enter
0c2d4     00 26 06 F6 | 	mov	local01, #0
0c2d8     6C 01 B0 FD | 	call	#_getvalue
0c2dc                 | ' 
0c2dc                 | ' t3.result.uresult=0
0c2dc                 | ' err=getvalue() : if err>0 then return err     
0c2dc     01 FA 15 F2 | 	cmp	result1, #1 wc
0c2e0     58 01 90 3D |  if_ae	jmp	#LR__1002
0c2e4     37 00 00 FF 
0c2e8     44 E4 05 F1 | 	add	objptr, ##28228
0c2ec     F2 2C 02 FB | 	rdlong	local04, objptr
0c2f0     03 2C 66 F0 | 	shl	local04, #3
0c2f4     02 00 00 FF 
0c2f8     38 E4 85 F1 | 	sub	objptr, ##1080
0c2fc     F2 2C 02 F1 | 	add	local04, objptr
0c300     04 2C 06 F1 | 	add	local04, #4
0c304     16 2F 02 FB | 	rdlong	local05, local04
0c308                 | ' op = lparts(ct).token
0c308                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c308     35 00 00 FF 
0c30c     0C E4 85 F1 | 	sub	objptr, ##27148
0c310                 | LR__1000
0c310     05 2E 0E F2 | 	cmp	local05, #5 wz
0c314     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0c318     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0c31c     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0c320     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0c324     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0c328     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0c32c     08 01 90 5D |  if_ne	jmp	#LR__1001
0c330     37 00 00 FF 
0c334     44 E4 05 F1 | 	add	objptr, ##28228
0c338     F2 2C 02 FB | 	rdlong	local04, objptr
0c33c     01 2C 06 F1 | 	add	local04, #1
0c340     F2 2C 62 FC | 	wrlong	local04, objptr
0c344     37 00 00 FF 
0c348     44 E4 85 F1 | 	sub	objptr, ##28228
0c34c     F8 00 B0 FD | 	call	#_getvalue
0c350                 | '   ct+=1
0c350                 | '   err=getvalue() :if err>0 then return err   
0c350     01 FA 15 F2 | 	cmp	result1, #1 wc
0c354     E4 00 90 3D |  if_ae	jmp	#LR__1002
0c358     17 2B 02 F6 | 	mov	local03, local05
0c35c     13 31 02 F6 | 	mov	local06, local01
0c360     14 33 02 F6 | 	mov	local07, local02
0c364     15 2F 02 F6 | 	mov	local05, local03
0c368     4A 00 00 FF 
0c36c     7C E4 05 F1 | 	add	objptr, ##38012
0c370     F2 2C 02 FB | 	rdlong	local04, objptr
0c374     16 FB 01 F6 | 	mov	result1, local04
0c378     01 FA 65 F0 | 	shl	result1, #1
0c37c     16 FB 01 F1 | 	add	result1, local04
0c380     02 FA 65 F0 | 	shl	result1, #2
0c384     03 00 00 FF 
0c388     00 E4 85 F1 | 	sub	objptr, ##1536
0c38c     F2 FA 01 F1 | 	add	result1, objptr
0c390     FD 30 62 FC | 	wrlong	local06, result1
0c394     03 00 00 FF 
0c398     00 E4 05 F1 | 	add	objptr, ##1536
0c39c     F2 30 02 FB | 	rdlong	local06, objptr
0c3a0     18 2D 02 F6 | 	mov	local04, local06
0c3a4     01 2C 66 F0 | 	shl	local04, #1
0c3a8     18 2D 02 F1 | 	add	local04, local06
0c3ac     02 2C 66 F0 | 	shl	local04, #2
0c3b0     03 00 00 FF 
0c3b4     00 E4 85 F1 | 	sub	objptr, ##1536
0c3b8     F2 2C 02 F1 | 	add	local04, objptr
0c3bc     04 2C 06 F1 | 	add	local04, #4
0c3c0     16 33 62 FC | 	wrlong	local07, local04
0c3c4     03 00 00 FF 
0c3c8     00 E4 05 F1 | 	add	objptr, ##1536
0c3cc     F2 32 02 FB | 	rdlong	local07, objptr
0c3d0     19 31 02 F6 | 	mov	local06, local07
0c3d4     01 30 66 F0 | 	shl	local06, #1
0c3d8     19 31 02 F1 | 	add	local06, local07
0c3dc     02 30 66 F0 | 	shl	local06, #2
0c3e0     03 00 00 FF 
0c3e4     00 E4 85 F1 | 	sub	objptr, ##1536
0c3e8     F2 30 02 F1 | 	add	local06, objptr
0c3ec     08 30 06 F1 | 	add	local06, #8
0c3f0     18 2F 62 FC | 	wrlong	local05, local06
0c3f4     03 00 00 FF 
0c3f8     00 E4 05 F1 | 	add	objptr, ##1536
0c3fc     F2 30 02 FB | 	rdlong	local06, objptr
0c400     01 30 06 F1 | 	add	local06, #1
0c404     F2 30 62 FC | 	wrlong	local06, objptr
0c408     13 00 00 FF 
0c40c     38 E4 85 F1 | 	sub	objptr, ##9784
0c410     F2 2C 02 FB | 	rdlong	local04, objptr
0c414     03 2C 66 F0 | 	shl	local04, #3
0c418     02 00 00 FF 
0c41c     38 E4 85 F1 | 	sub	objptr, ##1080
0c420     F2 2C 02 F1 | 	add	local04, objptr
0c424     04 2C 06 F1 | 	add	local04, #4
0c428     16 2F 02 FB | 	rdlong	local05, local04
0c42c     35 00 00 FF 
0c430     0C E4 85 F1 | 	sub	objptr, ##27148
0c434     D8 FE 9F FD | 	jmp	#LR__1000
0c438                 | LR__1001
0c438                 | ' return 0
0c438     00 FA 05 F6 | 	mov	result1, #0
0c43c                 | LR__1002
0c43c     A7 F0 03 F6 | 	mov	ptra, fp
0c440     B2 00 A0 FD | 	call	#popregs_
0c444                 | _muldiv_ret
0c444     2D 00 64 FD | 	ret
0c448                 | 
0c448                 | ' 
0c448                 | ' ' Get a value for operations
0c448                 | ' 
0c448                 | ' function getvalue()  as ulong
0c448                 | _getvalue
0c448     0B 4A 05 F6 | 	mov	COUNT_, #11
0c44c     A8 00 A0 FD | 	call	#pushregs_
0c450                 | _getvalue_enter
0c450     01 2C 06 F6 | 	mov	local04, #1
0c454     00 26 06 F6 | 	mov	local01, #0
0c458     1D 2A 06 F6 | 	mov	local03, #29
0c45c     37 00 00 FF 
0c460     44 E4 05 F1 | 	add	objptr, ##28228
0c464     F2 16 02 FB | 	rdlong	arg03, objptr
0c468     03 16 66 F0 | 	shl	arg03, #3
0c46c     02 00 00 FF 
0c470     38 E4 85 F1 | 	sub	objptr, ##1080
0c474     F2 16 02 F1 | 	add	arg03, objptr
0c478     04 16 06 F1 | 	add	arg03, #4
0c47c     0B 2F 02 FB | 	rdlong	local05, arg03
0c480                 | ' 
0c480                 | ' m=1											' for negative numbers
0c480                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c480                 | ' op=lparts(ct).token
0c480                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c480     02 2E 0E F2 | 	cmp	local05, #2 wz
0c484     35 00 00 FF 
0c488     0C E4 85 F1 | 	sub	objptr, ##27148
0c48c     38 00 90 5D |  if_ne	jmp	#LR__1010
0c490     01 2C 66 F6 | 	neg	local04, #1
0c494     37 00 00 FF 
0c498     44 E4 05 F1 | 	add	objptr, ##28228
0c49c     F2 2E 02 FB | 	rdlong	local05, objptr
0c4a0     01 2E 06 F1 | 	add	local05, #1
0c4a4     F2 2E 62 FC | 	wrlong	local05, objptr
0c4a8     03 2E 66 F0 | 	shl	local05, #3
0c4ac     02 00 00 FF 
0c4b0     38 E4 85 F1 | 	sub	objptr, ##1080
0c4b4     F2 2E 02 F1 | 	add	local05, objptr
0c4b8     04 2E 06 F1 | 	add	local05, #4
0c4bc     17 2F 02 FB | 	rdlong	local05, local05
0c4c0     35 00 00 FF 
0c4c4     0C E4 85 F1 | 	sub	objptr, ##27148
0c4c8                 | LR__1010
0c4c8                 | ' select case op
0c4c8     01 00 00 FF 
0c4cc     00 2E 0E F2 | 	cmp	local05, ##512 wz
0c4d0     44 00 90 AD |  if_e	jmp	#LR__1011
0c4d4     01 00 00 FF 
0c4d8     01 2E 0E F2 | 	cmp	local05, ##513 wz
0c4dc     90 01 90 AD |  if_e	jmp	#LR__1014
0c4e0     01 00 00 FF 
0c4e4     02 2E 0E F2 | 	cmp	local05, ##514 wz
0c4e8     44 04 90 AD |  if_e	jmp	#LR__1021
0c4ec     01 00 00 FF 
0c4f0     03 2E 0E F2 | 	cmp	local05, ##515 wz
0c4f4     A8 05 90 AD |  if_e	jmp	#LR__1024
0c4f8     2C 2E 0E F2 | 	cmp	local05, #44 wz
0c4fc     78 07 90 AD |  if_e	jmp	#LR__1029
0c500     01 00 00 FF 
0c504     04 2E 0E F2 | 	cmp	local05, ##516 wz
0c508     70 08 90 AD |  if_e	jmp	#LR__1030
0c50c     15 2E 0E F2 | 	cmp	local05, #21 wz
0c510     98 08 90 AD |  if_e	jmp	#LR__1031
0c514     10 09 90 FD | 	jmp	#LR__1032
0c518                 | LR__1011
0c518                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c518     01 2C 0E F2 | 	cmp	local04, #1 wz
0c51c     3C 00 90 5D |  if_ne	jmp	#LR__1012
0c520     37 00 00 FF 
0c524     44 E4 05 F1 | 	add	objptr, ##28228
0c528     F2 2E 02 FB | 	rdlong	local05, objptr
0c52c     03 2E 66 F0 | 	shl	local05, #3
0c530     02 00 00 FF 
0c534     38 E4 85 F1 | 	sub	objptr, ##1080
0c538     F2 2E 02 F1 | 	add	local05, objptr
0c53c     17 13 02 FB | 	rdlong	arg01, local05
0c540     00 14 06 F6 | 	mov	arg02, #0
0c544     35 00 00 FF 
0c548     0C E4 85 F1 | 	sub	objptr, ##27148
0c54c     40 E0 B1 FD | 	call	#__system____builtin_atoi
0c550     FD 2C 02 FD | 	qmul	local04, result1
0c554     18 26 62 FD | 	getqx	local01
0c558     1C 2A 06 F6 | 	mov	local03, #28
0c55c                 | LR__1012
0c55c                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c55c     FF FF 7F FF 
0c560     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c564     3C 00 90 5D |  if_ne	jmp	#LR__1013
0c568     37 00 00 FF 
0c56c     44 E4 05 F1 | 	add	objptr, ##28228
0c570     F2 2E 02 FB | 	rdlong	local05, objptr
0c574     03 2E 66 F0 | 	shl	local05, #3
0c578     02 00 00 FF 
0c57c     38 E4 85 F1 | 	sub	objptr, ##1080
0c580     F2 2E 02 F1 | 	add	local05, objptr
0c584     17 13 02 FB | 	rdlong	arg01, local05
0c588     00 14 06 F6 | 	mov	arg02, #0
0c58c     35 00 00 FF 
0c590     0C E4 85 F1 | 	sub	objptr, ##27148
0c594     F8 DF B1 FD | 	call	#__system____builtin_atoi
0c598     FD 2C 02 FD | 	qmul	local04, result1
0c59c     18 26 62 FD | 	getqx	local01
0c5a0     1C 2A 06 F6 | 	mov	local03, #28
0c5a4                 | LR__1013
0c5a4     13 31 02 F6 | 	mov	local06, local01
0c5a8     14 33 02 F6 | 	mov	local07, local02
0c5ac     15 2F 02 F6 | 	mov	local05, local03
0c5b0     4A 00 00 FF 
0c5b4     7C E4 05 F1 | 	add	objptr, ##38012
0c5b8     F2 26 02 FB | 	rdlong	local01, objptr
0c5bc     13 2D 02 F6 | 	mov	local04, local01
0c5c0     01 2C 66 F0 | 	shl	local04, #1
0c5c4     13 2D 02 F1 | 	add	local04, local01
0c5c8     02 2C 66 F0 | 	shl	local04, #2
0c5cc     03 00 00 FF 
0c5d0     00 E4 85 F1 | 	sub	objptr, ##1536
0c5d4     F2 2C 02 F1 | 	add	local04, objptr
0c5d8     16 31 62 FC | 	wrlong	local06, local04
0c5dc     03 00 00 FF 
0c5e0     00 E4 05 F1 | 	add	objptr, ##1536
0c5e4     F2 30 02 FB | 	rdlong	local06, objptr
0c5e8     18 27 02 F6 | 	mov	local01, local06
0c5ec     01 26 66 F0 | 	shl	local01, #1
0c5f0     18 27 02 F1 | 	add	local01, local06
0c5f4     02 26 66 F0 | 	shl	local01, #2
0c5f8     03 00 00 FF 
0c5fc     00 E4 85 F1 | 	sub	objptr, ##1536
0c600     F2 26 02 F1 | 	add	local01, objptr
0c604     04 26 06 F1 | 	add	local01, #4
0c608     13 33 62 FC | 	wrlong	local07, local01
0c60c     03 00 00 FF 
0c610     00 E4 05 F1 | 	add	objptr, ##1536
0c614     F2 32 02 FB | 	rdlong	local07, objptr
0c618     19 31 02 F6 | 	mov	local06, local07
0c61c     01 30 66 F0 | 	shl	local06, #1
0c620     19 31 02 F1 | 	add	local06, local07
0c624     02 30 66 F0 | 	shl	local06, #2
0c628     03 00 00 FF 
0c62c     00 E4 85 F1 | 	sub	objptr, ##1536
0c630     F2 30 02 F1 | 	add	local06, objptr
0c634     08 30 06 F1 | 	add	local06, #8
0c638     18 2F 62 FC | 	wrlong	local05, local06
0c63c     03 00 00 FF 
0c640     00 E4 05 F1 | 	add	objptr, ##1536
0c644     F2 30 02 FB | 	rdlong	local06, objptr
0c648     01 30 06 F1 | 	add	local06, #1
0c64c     F2 30 62 FC | 	wrlong	local06, objptr
0c650     13 00 00 FF 
0c654     38 E4 85 F1 | 	sub	objptr, ##9784
0c658     F2 30 02 FB | 	rdlong	local06, objptr
0c65c     01 30 06 F1 | 	add	local06, #1
0c660     F2 30 62 FC | 	wrlong	local06, objptr
0c664     37 00 00 FF 
0c668     44 E4 85 F1 | 	sub	objptr, ##28228
0c66c     E4 07 90 FD | 	jmp	#LR__1033
0c670                 | LR__1014
0c670                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c670     37 00 00 FF 
0c674     44 E4 05 F1 | 	add	objptr, ##28228
0c678     F2 16 02 FB | 	rdlong	arg03, objptr
0c67c     03 16 66 F0 | 	shl	arg03, #3
0c680     02 00 00 FF 
0c684     38 E4 85 F1 | 	sub	objptr, ##1080
0c688     F2 16 02 F1 | 	add	arg03, objptr
0c68c     0B 13 02 FB | 	rdlong	arg01, arg03
0c690     01 14 06 F6 | 	mov	arg02, #1
0c694     35 00 00 FF 
0c698     0C E4 85 F1 | 	sub	objptr, ##27148
0c69c     7C CA B1 FD | 	call	#__system__Left_S
0c6a0     FD 12 02 F6 | 	mov	arg01, result1
0c6a4     B9 01 00 FF 
0c6a8     58 15 06 F6 | 	mov	arg02, ##@LR__5889
0c6ac     14 AA B1 FD | 	call	#__system___string_cmp
0c6b0     00 FA 0D F2 | 	cmp	result1, #0 wz
0c6b4     94 00 90 5D |  if_ne	jmp	#LR__1017
0c6b8     37 00 00 FF 
0c6bc     44 E4 05 F1 | 	add	objptr, ##28228
0c6c0     F2 32 02 FB | 	rdlong	local07, objptr
0c6c4     19 31 02 F6 | 	mov	local06, local07
0c6c8     03 30 66 F0 | 	shl	local06, #3
0c6cc     02 00 00 FF 
0c6d0     38 E4 85 F1 | 	sub	objptr, ##1080
0c6d4     F2 30 02 F1 | 	add	local06, objptr
0c6d8     B9 01 00 FF 
0c6dc     5A 2F 06 F6 | 	mov	local05, ##@LR__5890
0c6e0     03 32 66 F0 | 	shl	local07, #3
0c6e4     F2 32 02 F1 | 	add	local07, objptr
0c6e8     19 33 02 FB | 	rdlong	local07, local07
0c6ec     02 00 00 FF 
0c6f0     38 E4 05 F1 | 	add	objptr, ##1080
0c6f4     F2 26 02 FB | 	rdlong	local01, objptr
0c6f8     03 26 66 F0 | 	shl	local01, #3
0c6fc     02 00 00 FF 
0c700     38 E4 85 F1 | 	sub	objptr, ##1080
0c704     F2 26 02 F1 | 	add	local01, objptr
0c708     13 13 02 FB | 	rdlong	arg01, local01
0c70c     35 00 00 FF 
0c710     0C E4 85 F1 | 	sub	objptr, ##27148
0c714     09 35 02 F6 | 	mov	local08, arg01
0c718     97 06 48 FB | 	callpa	#(@LR__1016-@LR__1015)>>2,fcache_load_ptr_
0c71c                 | LR__1015
0c71c     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c720     01 34 06 51 |  if_ne	add	local08, #1
0c724     F4 FF 9F 5D |  if_ne	jmp	#LR__1015
0c728                 | LR__1016
0c728     09 35 82 F1 | 	sub	local08, arg01
0c72c     1A 15 02 F6 | 	mov	arg02, local08
0c730     01 14 86 F1 | 	sub	arg02, #1
0c734     19 13 02 F6 | 	mov	arg01, local07
0c738     68 CA B1 FD | 	call	#__system__Right_S
0c73c     FD 14 02 F6 | 	mov	arg02, result1
0c740     17 13 02 F6 | 	mov	arg01, local05
0c744     B0 A9 B1 FD | 	call	#__system___string_concat
0c748     18 FB 61 FC | 	wrlong	result1, local06
0c74c                 | LR__1017
0c74c                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c74c     37 00 00 FF 
0c750     44 E4 05 F1 | 	add	objptr, ##28228
0c754     F2 16 02 FB | 	rdlong	arg03, objptr
0c758     03 16 66 F0 | 	shl	arg03, #3
0c75c     02 00 00 FF 
0c760     38 E4 85 F1 | 	sub	objptr, ##1080
0c764     F2 16 02 F1 | 	add	arg03, objptr
0c768     0B 13 02 FB | 	rdlong	arg01, arg03
0c76c     01 14 06 F6 | 	mov	arg02, #1
0c770     35 00 00 FF 
0c774     0C E4 85 F1 | 	sub	objptr, ##27148
0c778     A0 C9 B1 FD | 	call	#__system__Left_S
0c77c     FD 12 02 F6 | 	mov	arg01, result1
0c780     B9 01 00 FF 
0c784     5D 15 06 F6 | 	mov	arg02, ##@LR__5891
0c788     38 A9 B1 FD | 	call	#__system___string_cmp
0c78c     00 FA 0D F2 | 	cmp	result1, #0 wz
0c790     94 00 90 5D |  if_ne	jmp	#LR__1020
0c794     37 00 00 FF 
0c798     44 E4 05 F1 | 	add	objptr, ##28228
0c79c     F2 32 02 FB | 	rdlong	local07, objptr
0c7a0     19 31 02 F6 | 	mov	local06, local07
0c7a4     03 30 66 F0 | 	shl	local06, #3
0c7a8     02 00 00 FF 
0c7ac     38 E4 85 F1 | 	sub	objptr, ##1080
0c7b0     F2 30 02 F1 | 	add	local06, objptr
0c7b4     B9 01 00 FF 
0c7b8     5F 2F 06 F6 | 	mov	local05, ##@LR__5892
0c7bc     03 32 66 F0 | 	shl	local07, #3
0c7c0     F2 32 02 F1 | 	add	local07, objptr
0c7c4     19 33 02 FB | 	rdlong	local07, local07
0c7c8     02 00 00 FF 
0c7cc     38 E4 05 F1 | 	add	objptr, ##1080
0c7d0     F2 26 02 FB | 	rdlong	local01, objptr
0c7d4     03 26 66 F0 | 	shl	local01, #3
0c7d8     02 00 00 FF 
0c7dc     38 E4 85 F1 | 	sub	objptr, ##1080
0c7e0     F2 26 02 F1 | 	add	local01, objptr
0c7e4     13 13 02 FB | 	rdlong	arg01, local01
0c7e8     35 00 00 FF 
0c7ec     0C E4 85 F1 | 	sub	objptr, ##27148
0c7f0     09 35 02 F6 | 	mov	local08, arg01
0c7f4     97 06 48 FB | 	callpa	#(@LR__1019-@LR__1018)>>2,fcache_load_ptr_
0c7f8                 | LR__1018
0c7f8     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c7fc     01 34 06 51 |  if_ne	add	local08, #1
0c800     F4 FF 9F 5D |  if_ne	jmp	#LR__1018
0c804                 | LR__1019
0c804     09 35 82 F1 | 	sub	local08, arg01
0c808     1A 15 02 F6 | 	mov	arg02, local08
0c80c     01 14 86 F1 | 	sub	arg02, #1
0c810     19 13 02 F6 | 	mov	arg01, local07
0c814     8C C9 B1 FD | 	call	#__system__Right_S
0c818     FD 14 02 F6 | 	mov	arg02, result1
0c81c     17 13 02 F6 | 	mov	arg01, local05
0c820     D4 A8 B1 FD | 	call	#__system___string_concat
0c824     18 FB 61 FC | 	wrlong	result1, local06
0c828                 | LR__1020
0c828     37 00 00 FF 
0c82c     44 E4 05 F1 | 	add	objptr, ##28228
0c830     F2 30 02 FB | 	rdlong	local06, objptr
0c834     03 30 66 F0 | 	shl	local06, #3
0c838     02 00 00 FF 
0c83c     38 E4 85 F1 | 	sub	objptr, ##1080
0c840     F2 30 02 F1 | 	add	local06, objptr
0c844     18 13 02 FB | 	rdlong	arg01, local06
0c848     00 14 06 F6 | 	mov	arg02, #0
0c84c     35 00 00 FF 
0c850     0C E4 85 F1 | 	sub	objptr, ##27148
0c854     38 DD B1 FD | 	call	#__system____builtin_atoi
0c858     FD 2C 02 FD | 	qmul	local04, result1
0c85c     4A 00 00 FF 
0c860     7C E4 05 F1 | 	add	objptr, ##38012
0c864     F2 30 02 FB | 	rdlong	local06, objptr
0c868     18 37 02 F6 | 	mov	local09, local06
0c86c     01 36 66 F0 | 	shl	local09, #1
0c870     18 37 02 F1 | 	add	local09, local06
0c874     02 36 66 F0 | 	shl	local09, #2
0c878     03 00 00 FF 
0c87c     00 E4 85 F1 | 	sub	objptr, ##1536
0c880     F2 36 02 F1 | 	add	local09, objptr
0c884     03 00 00 FF 
0c888     00 E4 05 F1 | 	add	objptr, ##1536
0c88c     18 26 62 FD | 	getqx	local01
0c890     1C 2A 06 F6 | 	mov	local03, #28
0c894     13 31 02 F6 | 	mov	local06, local01
0c898     14 33 02 F6 | 	mov	local07, local02
0c89c     1B 31 62 FC | 	wrlong	local06, local09
0c8a0     15 37 02 F6 | 	mov	local09, local03
0c8a4     F2 30 02 FB | 	rdlong	local06, objptr
0c8a8     18 2F 02 F6 | 	mov	local05, local06
0c8ac     01 2E 66 F0 | 	shl	local05, #1
0c8b0     18 2F 02 F1 | 	add	local05, local06
0c8b4     02 2E 66 F0 | 	shl	local05, #2
0c8b8     03 00 00 FF 
0c8bc     00 E4 85 F1 | 	sub	objptr, ##1536
0c8c0     F2 2E 02 F1 | 	add	local05, objptr
0c8c4     04 2E 06 F1 | 	add	local05, #4
0c8c8     17 33 62 FC | 	wrlong	local07, local05
0c8cc     03 00 00 FF 
0c8d0     00 E4 05 F1 | 	add	objptr, ##1536
0c8d4     F2 32 02 FB | 	rdlong	local07, objptr
0c8d8     19 31 02 F6 | 	mov	local06, local07
0c8dc     01 30 66 F0 | 	shl	local06, #1
0c8e0     19 31 02 F1 | 	add	local06, local07
0c8e4     02 30 66 F0 | 	shl	local06, #2
0c8e8     03 00 00 FF 
0c8ec     00 E4 85 F1 | 	sub	objptr, ##1536
0c8f0     F2 30 02 F1 | 	add	local06, objptr
0c8f4     08 30 06 F1 | 	add	local06, #8
0c8f8     18 37 62 FC | 	wrlong	local09, local06
0c8fc     03 00 00 FF 
0c900     00 E4 05 F1 | 	add	objptr, ##1536
0c904     F2 30 02 FB | 	rdlong	local06, objptr
0c908     01 30 06 F1 | 	add	local06, #1
0c90c     F2 30 62 FC | 	wrlong	local06, objptr
0c910     13 00 00 FF 
0c914     38 E4 85 F1 | 	sub	objptr, ##9784
0c918     F2 30 02 FB | 	rdlong	local06, objptr
0c91c     01 30 06 F1 | 	add	local06, #1
0c920     F2 30 62 FC | 	wrlong	local06, objptr
0c924     37 00 00 FF 
0c928     44 E4 85 F1 | 	sub	objptr, ##28228
0c92c     24 05 90 FD | 	jmp	#LR__1033
0c930                 | LR__1021
0c930                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0c930     01 2C 0E F2 | 	cmp	local04, #1 wz
0c934     48 00 90 5D |  if_ne	jmp	#LR__1022
0c938     00 C0 1F FF 
0c93c     00 30 06 F6 | 	mov	local06, ##1065353216
0c940     37 00 00 FF 
0c944     44 E4 05 F1 | 	add	objptr, ##28228
0c948     F2 36 02 FB | 	rdlong	local09, objptr
0c94c     03 36 66 F0 | 	shl	local09, #3
0c950     02 00 00 FF 
0c954     38 E4 85 F1 | 	sub	objptr, ##1080
0c958     F2 36 02 F1 | 	add	local09, objptr
0c95c     1B 13 02 FB | 	rdlong	arg01, local09
0c960     35 00 00 FF 
0c964     0C E4 85 F1 | 	sub	objptr, ##27148
0c968     B8 DD B1 FD | 	call	#__system____builtin_atof
0c96c     FD 14 02 F6 | 	mov	arg02, result1
0c970     18 13 02 F6 | 	mov	arg01, local06
0c974     A0 D5 B1 FD | 	call	#__system___float_mul
0c978     FD 26 02 F6 | 	mov	local01, result1
0c97c     1E 2A 06 F6 | 	mov	local03, #30
0c980                 | LR__1022
0c980                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0c980     FF FF 7F FF 
0c984     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c988     48 00 90 5D |  if_ne	jmp	#LR__1023
0c98c     00 C0 5F FF 
0c990     00 30 06 F6 | 	mov	local06, ##-1082130432
0c994     37 00 00 FF 
0c998     44 E4 05 F1 | 	add	objptr, ##28228
0c99c     F2 36 02 FB | 	rdlong	local09, objptr
0c9a0     03 36 66 F0 | 	shl	local09, #3
0c9a4     02 00 00 FF 
0c9a8     38 E4 85 F1 | 	sub	objptr, ##1080
0c9ac     F2 36 02 F1 | 	add	local09, objptr
0c9b0     1B 13 02 FB | 	rdlong	arg01, local09
0c9b4     35 00 00 FF 
0c9b8     0C E4 85 F1 | 	sub	objptr, ##27148
0c9bc     64 DD B1 FD | 	call	#__system____builtin_atof
0c9c0     FD 14 02 F6 | 	mov	arg02, result1
0c9c4     18 13 02 F6 | 	mov	arg01, local06
0c9c8     4C D5 B1 FD | 	call	#__system___float_mul
0c9cc     FD 26 02 F6 | 	mov	local01, result1
0c9d0     1E 2A 06 F6 | 	mov	local03, #30
0c9d4                 | LR__1023
0c9d4     13 31 02 F6 | 	mov	local06, local01
0c9d8     14 33 02 F6 | 	mov	local07, local02
0c9dc     15 2F 02 F6 | 	mov	local05, local03
0c9e0     4A 00 00 FF 
0c9e4     7C E4 05 F1 | 	add	objptr, ##38012
0c9e8     F2 26 02 FB | 	rdlong	local01, objptr
0c9ec     13 37 02 F6 | 	mov	local09, local01
0c9f0     01 36 66 F0 | 	shl	local09, #1
0c9f4     13 37 02 F1 | 	add	local09, local01
0c9f8     02 36 66 F0 | 	shl	local09, #2
0c9fc     03 00 00 FF 
0ca00     00 E4 85 F1 | 	sub	objptr, ##1536
0ca04     F2 36 02 F1 | 	add	local09, objptr
0ca08     1B 31 62 FC | 	wrlong	local06, local09
0ca0c     03 00 00 FF 
0ca10     00 E4 05 F1 | 	add	objptr, ##1536
0ca14     F2 36 02 FB | 	rdlong	local09, objptr
0ca18     1B 31 02 F6 | 	mov	local06, local09
0ca1c     01 30 66 F0 | 	shl	local06, #1
0ca20     1B 31 02 F1 | 	add	local06, local09
0ca24     02 30 66 F0 | 	shl	local06, #2
0ca28     03 00 00 FF 
0ca2c     00 E4 85 F1 | 	sub	objptr, ##1536
0ca30     F2 30 02 F1 | 	add	local06, objptr
0ca34     04 30 06 F1 | 	add	local06, #4
0ca38     18 33 62 FC | 	wrlong	local07, local06
0ca3c     03 00 00 FF 
0ca40     00 E4 05 F1 | 	add	objptr, ##1536
0ca44     F2 36 02 FB | 	rdlong	local09, objptr
0ca48     1B 33 02 F6 | 	mov	local07, local09
0ca4c     01 32 66 F0 | 	shl	local07, #1
0ca50     1B 33 02 F1 | 	add	local07, local09
0ca54     02 32 66 F0 | 	shl	local07, #2
0ca58     03 00 00 FF 
0ca5c     00 E4 85 F1 | 	sub	objptr, ##1536
0ca60     F2 32 02 F1 | 	add	local07, objptr
0ca64     08 32 06 F1 | 	add	local07, #8
0ca68     19 2F 62 FC | 	wrlong	local05, local07
0ca6c     03 00 00 FF 
0ca70     00 E4 05 F1 | 	add	objptr, ##1536
0ca74     F2 30 02 FB | 	rdlong	local06, objptr
0ca78     01 30 06 F1 | 	add	local06, #1
0ca7c     F2 30 62 FC | 	wrlong	local06, objptr
0ca80     13 00 00 FF 
0ca84     38 E4 85 F1 | 	sub	objptr, ##9784
0ca88     F2 30 02 FB | 	rdlong	local06, objptr
0ca8c     01 30 06 F1 | 	add	local06, #1
0ca90     F2 30 62 FC | 	wrlong	local06, objptr
0ca94     37 00 00 FF 
0ca98     44 E4 85 F1 | 	sub	objptr, ##28228
0ca9c     B4 03 90 FD | 	jmp	#LR__1033
0caa0                 | LR__1024
0caa0     37 00 00 FF 
0caa4     44 E4 05 F1 | 	add	objptr, ##28228
0caa8     F2 16 02 FB | 	rdlong	arg03, objptr
0caac     03 16 66 F0 | 	shl	arg03, #3
0cab0     02 00 00 FF 
0cab4     38 E4 85 F1 | 	sub	objptr, ##1080
0cab8     F2 16 02 F1 | 	add	arg03, objptr
0cabc     0B 13 02 FB | 	rdlong	arg01, arg03
0cac0     35 00 00 FF 
0cac4     0C E4 85 F1 | 	sub	objptr, ##27148
0cac8     09 35 02 F6 | 	mov	local08, arg01
0cacc     97 06 48 FB | 	callpa	#(@LR__1026-@LR__1025)>>2,fcache_load_ptr_
0cad0                 | LR__1025
0cad0     1A FB C9 FA | 	rdbyte	result1, local08 wz
0cad4     01 34 06 51 |  if_ne	add	local08, #1
0cad8     F4 FF 9F 5D |  if_ne	jmp	#LR__1025
0cadc                 | LR__1026
0cadc     09 35 82 F1 | 	sub	local08, arg01
0cae0     1A FB 01 F6 | 	mov	result1, local08
0cae4     52 00 00 FF 
0cae8     F0 E4 05 F1 | 	add	objptr, ##42224
0caec     F2 FA 61 FC | 	wrlong	result1, objptr
0caf0     58 E4 85 F1 | 	sub	objptr, #88
0caf4     F2 12 02 FB | 	rdlong	arg01, objptr
0caf8     FD 12 82 F1 | 	sub	arg01, result1
0cafc     04 12 86 F1 | 	sub	arg01, #4
0cb00     03 12 26 F5 | 	andn	arg01, #3
0cb04     F2 12 62 FC | 	wrlong	arg01, objptr
0cb08     58 E4 05 F1 | 	add	objptr, #88
0cb0c     F2 14 02 FB | 	rdlong	arg02, objptr
0cb10     52 00 00 FF 
0cb14     F0 E4 85 F1 | 	sub	objptr, ##42224
0cb18     70 6C B1 FD | 	call	#_pslpoke
0cb1c                 | '     pslpoke memtop,l
0cb1c                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0cb1c     01 38 06 F6 | 	mov	local10, #1
0cb20     52 00 00 FF 
0cb24     F0 E4 05 F1 | 	add	objptr, ##42224
0cb28     F2 3A 02 FB | 	rdlong	local11, objptr
0cb2c     52 00 00 FF 
0cb30     F0 E4 85 F1 | 	sub	objptr, ##42224
0cb34     01 3A 06 F1 | 	add	local11, #1
0cb38                 | LR__1027
0cb38     1D 39 52 F2 | 	cmps	local10, local11 wc
0cb3c     5C 00 90 3D |  if_ae	jmp	#LR__1028
0cb40     52 00 00 FF 
0cb44     98 E4 05 F1 | 	add	objptr, ##42136
0cb48     F2 32 02 FB | 	rdlong	local07, objptr
0cb4c     03 32 06 F1 | 	add	local07, #3
0cb50     1C 33 02 F1 | 	add	local07, local10
0cb54     1B 00 00 FF 
0cb58     54 E4 85 F1 | 	sub	objptr, ##13908
0cb5c     F2 36 02 FB | 	rdlong	local09, objptr
0cb60     03 36 66 F0 | 	shl	local09, #3
0cb64     02 00 00 FF 
0cb68     38 E4 85 F1 | 	sub	objptr, ##1080
0cb6c     F2 36 02 F1 | 	add	local09, objptr
0cb70     1B 13 02 FB | 	rdlong	arg01, local09
0cb74     1C 15 02 F6 | 	mov	arg02, local10
0cb78     01 16 06 F6 | 	mov	arg03, #1
0cb7c     35 00 00 FF 
0cb80     0C E4 85 F1 | 	sub	objptr, ##27148
0cb84     AC C6 B1 FD | 	call	#__system__Mid_S
0cb88     FD 14 C2 FA | 	rdbyte	arg02, result1
0cb8c     19 13 02 F6 | 	mov	arg01, local07
0cb90     88 6C B1 FD | 	call	#_pspoke
0cb94     01 38 06 F1 | 	add	local10, #1
0cb98     9C FF 9F FD | 	jmp	#LR__1027
0cb9c                 | LR__1028
0cb9c     52 00 00 FF 
0cba0     98 E4 05 F1 | 	add	objptr, ##42136
0cba4     F2 26 02 FB | 	rdlong	local01, objptr
0cba8     2B 2A 06 F6 | 	mov	local03, #43
0cbac     13 31 02 F6 | 	mov	local06, local01
0cbb0     14 33 02 F6 | 	mov	local07, local02
0cbb4     15 3B 02 F6 | 	mov	local11, local03
0cbb8     08 00 00 FF 
0cbbc     1C E4 85 F1 | 	sub	objptr, ##4124
0cbc0     F2 38 02 FB | 	rdlong	local10, objptr
0cbc4     1C 37 02 F6 | 	mov	local09, local10
0cbc8     01 36 66 F0 | 	shl	local09, #1
0cbcc     1C 37 02 F1 | 	add	local09, local10
0cbd0     02 36 66 F0 | 	shl	local09, #2
0cbd4     03 00 00 FF 
0cbd8     00 E4 85 F1 | 	sub	objptr, ##1536
0cbdc     F2 36 02 F1 | 	add	local09, objptr
0cbe0     1B 31 62 FC | 	wrlong	local06, local09
0cbe4     03 00 00 FF 
0cbe8     00 E4 05 F1 | 	add	objptr, ##1536
0cbec     F2 38 02 FB | 	rdlong	local10, objptr
0cbf0     1C 37 02 F6 | 	mov	local09, local10
0cbf4     01 36 66 F0 | 	shl	local09, #1
0cbf8     1C 37 02 F1 | 	add	local09, local10
0cbfc     02 36 66 F0 | 	shl	local09, #2
0cc00     03 00 00 FF 
0cc04     00 E4 85 F1 | 	sub	objptr, ##1536
0cc08     F2 36 02 F1 | 	add	local09, objptr
0cc0c     04 36 06 F1 | 	add	local09, #4
0cc10     1B 33 62 FC | 	wrlong	local07, local09
0cc14     03 00 00 FF 
0cc18     00 E4 05 F1 | 	add	objptr, ##1536
0cc1c     F2 38 02 FB | 	rdlong	local10, objptr
0cc20     1C 37 02 F6 | 	mov	local09, local10
0cc24     01 36 66 F0 | 	shl	local09, #1
0cc28     1C 37 02 F1 | 	add	local09, local10
0cc2c     02 36 66 F0 | 	shl	local09, #2
0cc30     03 00 00 FF 
0cc34     00 E4 85 F1 | 	sub	objptr, ##1536
0cc38     F2 36 02 F1 | 	add	local09, objptr
0cc3c     08 36 06 F1 | 	add	local09, #8
0cc40     1B 3B 62 FC | 	wrlong	local11, local09
0cc44     03 00 00 FF 
0cc48     00 E4 05 F1 | 	add	objptr, ##1536
0cc4c     F2 30 02 FB | 	rdlong	local06, objptr
0cc50     01 30 06 F1 | 	add	local06, #1
0cc54     F2 30 62 FC | 	wrlong	local06, objptr
0cc58     13 00 00 FF 
0cc5c     38 E4 85 F1 | 	sub	objptr, ##9784
0cc60     F2 30 02 FB | 	rdlong	local06, objptr
0cc64     01 30 06 F1 | 	add	local06, #1
0cc68     F2 30 62 FC | 	wrlong	local06, objptr
0cc6c     37 00 00 FF 
0cc70     44 E4 85 F1 | 	sub	objptr, ##28228
0cc74     DC 01 90 FD | 	jmp	#LR__1033
0cc78                 | LR__1029
0cc78     2C 2A 06 F6 | 	mov	local03, #44
0cc7c     37 00 00 FF 
0cc80     44 E4 05 F1 | 	add	objptr, ##28228
0cc84     F2 30 02 FB | 	rdlong	local06, objptr
0cc88     03 30 66 F0 | 	shl	local06, #3
0cc8c     02 00 00 FF 
0cc90     38 E4 85 F1 | 	sub	objptr, ##1080
0cc94     F2 30 02 F1 | 	add	local06, objptr
0cc98     18 13 02 FB | 	rdlong	arg01, local06
0cc9c     00 14 06 F6 | 	mov	arg02, #0
0cca0     35 00 00 FF 
0cca4     0C E4 85 F1 | 	sub	objptr, ##27148
0cca8     E4 D8 B1 FD | 	call	#__system____builtin_atoi
0ccac     FD 26 02 F6 | 	mov	local01, result1
0ccb0     13 31 02 F6 | 	mov	local06, local01
0ccb4     14 33 02 F6 | 	mov	local07, local02
0ccb8     15 3B 02 F6 | 	mov	local11, local03
0ccbc     4A 00 00 FF 
0ccc0     7C E4 05 F1 | 	add	objptr, ##38012
0ccc4     F2 38 02 FB | 	rdlong	local10, objptr
0ccc8     1C 37 02 F6 | 	mov	local09, local10
0cccc     01 36 66 F0 | 	shl	local09, #1
0ccd0     1C 37 02 F1 | 	add	local09, local10
0ccd4     02 36 66 F0 | 	shl	local09, #2
0ccd8     03 00 00 FF 
0ccdc     00 E4 85 F1 | 	sub	objptr, ##1536
0cce0     F2 36 02 F1 | 	add	local09, objptr
0cce4     1B 31 62 FC | 	wrlong	local06, local09
0cce8     03 00 00 FF 
0ccec     00 E4 05 F1 | 	add	objptr, ##1536
0ccf0     F2 38 02 FB | 	rdlong	local10, objptr
0ccf4     1C 37 02 F6 | 	mov	local09, local10
0ccf8     01 36 66 F0 | 	shl	local09, #1
0ccfc     1C 37 02 F1 | 	add	local09, local10
0cd00     02 36 66 F0 | 	shl	local09, #2
0cd04     03 00 00 FF 
0cd08     00 E4 85 F1 | 	sub	objptr, ##1536
0cd0c     F2 36 02 F1 | 	add	local09, objptr
0cd10     04 36 06 F1 | 	add	local09, #4
0cd14     1B 33 62 FC | 	wrlong	local07, local09
0cd18     03 00 00 FF 
0cd1c     00 E4 05 F1 | 	add	objptr, ##1536
0cd20     F2 38 02 FB | 	rdlong	local10, objptr
0cd24     1C 37 02 F6 | 	mov	local09, local10
0cd28     01 36 66 F0 | 	shl	local09, #1
0cd2c     1C 37 02 F1 | 	add	local09, local10
0cd30     02 36 66 F0 | 	shl	local09, #2
0cd34     03 00 00 FF 
0cd38     00 E4 85 F1 | 	sub	objptr, ##1536
0cd3c     F2 36 02 F1 | 	add	local09, objptr
0cd40     08 36 06 F1 | 	add	local09, #8
0cd44     1B 3B 62 FC | 	wrlong	local11, local09
0cd48     03 00 00 FF 
0cd4c     00 E4 05 F1 | 	add	objptr, ##1536
0cd50     F2 30 02 FB | 	rdlong	local06, objptr
0cd54     01 30 06 F1 | 	add	local06, #1
0cd58     F2 30 62 FC | 	wrlong	local06, objptr
0cd5c     13 00 00 FF 
0cd60     38 E4 85 F1 | 	sub	objptr, ##9784
0cd64     F2 30 02 FB | 	rdlong	local06, objptr
0cd68     01 30 06 F1 | 	add	local06, #1
0cd6c     F2 30 62 FC | 	wrlong	local06, objptr
0cd70     37 00 00 FF 
0cd74     44 E4 85 F1 | 	sub	objptr, ##28228
0cd78     D8 00 90 FD | 	jmp	#LR__1033
0cd7c                 | LR__1030
0cd7c     16 13 02 F6 | 	mov	arg01, local04
0cd80     24 04 B0 FD | 	call	#_getvar
0cd84     37 00 00 FF 
0cd88     44 E4 05 F1 | 	add	objptr, ##28228
0cd8c     F2 30 02 FB | 	rdlong	local06, objptr
0cd90     01 30 06 F1 | 	add	local06, #1
0cd94     F2 30 62 FC | 	wrlong	local06, objptr
0cd98     37 00 00 FF 
0cd9c     44 E4 85 F1 | 	sub	objptr, ##28228
0cda0                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0cda0     01 FA 55 F2 | 	cmps	result1, #1 wc
0cda4     B0 00 90 3D |  if_ae	jmp	#LR__1034
0cda8     A8 00 90 FD | 	jmp	#LR__1033
0cdac                 | LR__1031
0cdac     37 00 00 FF 
0cdb0     44 E4 05 F1 | 	add	objptr, ##28228
0cdb4     F2 30 02 FB | 	rdlong	local06, objptr
0cdb8     01 30 06 F1 | 	add	local06, #1
0cdbc     F2 30 62 FC | 	wrlong	local06, objptr
0cdc0     37 00 00 FF 
0cdc4     44 E4 85 F1 | 	sub	objptr, ##28228
0cdc8     20 F1 BF FD | 	call	#_expr
0cdcc                 | '     ct+=1
0cdcc                 | '     err=expr() : if err>0 then return err 
0cdcc     01 FA 55 F2 | 	cmps	result1, #1 wc
0cdd0     84 00 90 3D |  if_ae	jmp	#LR__1034
0cdd4                 | '     if lparts(ct).token=token_rpar then ct+=1
0cdd4     37 00 00 FF 
0cdd8     44 E4 05 F1 | 	add	objptr, ##28228
0cddc     F2 3A 02 FB | 	rdlong	local11, objptr
0cde0     03 3A 66 F0 | 	shl	local11, #3
0cde4     02 00 00 FF 
0cde8     38 E4 85 F1 | 	sub	objptr, ##1080
0cdec     F2 3A 02 F1 | 	add	local11, objptr
0cdf0     04 3A 06 F1 | 	add	local11, #4
0cdf4     1D 3B 02 FB | 	rdlong	local11, local11
0cdf8     14 3A 0E F2 | 	cmp	local11, #20 wz
0cdfc     35 00 00 FF 
0ce00     0C E4 85 F1 | 	sub	objptr, ##27148
0ce04     4C 00 90 5D |  if_ne	jmp	#LR__1033
0ce08     37 00 00 FF 
0ce0c     44 E4 05 F1 | 	add	objptr, ##28228
0ce10     F2 30 02 FB | 	rdlong	local06, objptr
0ce14     01 30 06 F1 | 	add	local06, #1
0ce18     F2 30 62 FC | 	wrlong	local06, objptr
0ce1c     37 00 00 FF 
0ce20     44 E4 85 F1 | 	sub	objptr, ##28228
0ce24     2C 00 90 FD | 	jmp	#LR__1033
0ce28                 | LR__1032
0ce28     16 13 02 F6 | 	mov	arg01, local04
0ce2c     34 00 B0 FD | 	call	#_getfun
0ce30     37 00 00 FF 
0ce34     44 E4 05 F1 | 	add	objptr, ##28228
0ce38     F2 30 02 FB | 	rdlong	local06, objptr
0ce3c     01 30 06 F1 | 	add	local06, #1
0ce40     F2 30 62 FC | 	wrlong	local06, objptr
0ce44     37 00 00 FF 
0ce48     44 E4 85 F1 | 	sub	objptr, ##28228
0ce4c                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0ce4c     01 FA 55 F2 | 	cmps	result1, #1 wc
0ce50     04 00 90 3D |  if_ae	jmp	#LR__1034
0ce54                 | LR__1033
0ce54                 | ' return 0  
0ce54     00 FA 05 F6 | 	mov	result1, #0
0ce58                 | LR__1034
0ce58     A7 F0 03 F6 | 	mov	ptra, fp
0ce5c     B2 00 A0 FD | 	call	#popregs_
0ce60                 | _getvalue_ret
0ce60     2D 00 64 FD | 	ret
0ce64                 | 
0ce64                 | ' 
0ce64                 | ' ' Get a function result 
0ce64                 | ' 
0ce64                 | ' function getfun(m as integer) as ulong
0ce64                 | _getfun
0ce64     0F 4A 05 F6 | 	mov	COUNT_, #15
0ce68     A8 00 A0 FD | 	call	#pushregs_
0ce6c                 | _getfun_enter
0ce6c     09 2D 02 F6 | 	mov	local04, arg01
0ce70     37 00 00 FF 
0ce74     44 E4 05 F1 | 	add	objptr, ##28228
0ce78     F2 2E 02 FB | 	rdlong	local05, objptr
0ce7c     17 31 02 F6 | 	mov	local06, local05
0ce80     00 32 06 F6 | 	mov	local07, #0
0ce84                 | ' oldct=ct
0ce84                 | ' numpar=0
0ce84                 | ' if lparts(ct+1).token=token_lpar then
0ce84     01 2E 06 F1 | 	add	local05, #1
0ce88     03 2E 66 F0 | 	shl	local05, #3
0ce8c     02 00 00 FF 
0ce90     38 E4 85 F1 | 	sub	objptr, ##1080
0ce94     F2 2E 02 F1 | 	add	local05, objptr
0ce98     04 2E 06 F1 | 	add	local05, #4
0ce9c     17 2F 02 FB | 	rdlong	local05, local05
0cea0     15 2E 0E F2 | 	cmp	local05, #21 wz
0cea4     35 00 00 FF 
0cea8     0C E4 85 F1 | 	sub	objptr, ##27148
0ceac     54 01 90 5D |  if_ne	jmp	#LR__1044
0ceb0     37 00 00 FF 
0ceb4     44 E4 05 F1 | 	add	objptr, ##28228
0ceb8     F2 34 02 FB | 	rdlong	local08, objptr
0cebc     01 34 06 F1 | 	add	local08, #1
0cec0     F2 34 62 FC | 	wrlong	local08, objptr
0cec4     37 00 00 FF 
0cec8     44 E4 85 F1 | 	sub	objptr, ##28228
0cecc                 | '   ct+=1 											' omit this lpar, this is for expr list
0cecc                 | '   do
0cecc                 | LR__1040
0cecc     37 00 00 FF 
0ced0     44 E4 05 F1 | 	add	objptr, ##28228
0ced4     F2 2E 02 FB | 	rdlong	local05, objptr
0ced8     01 2E 06 F1 | 	add	local05, #1
0cedc     F2 2E 62 FC | 	wrlong	local05, objptr
0cee0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0cee0                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0cee0     03 2E 66 F0 | 	shl	local05, #3
0cee4     02 00 00 FF 
0cee8     38 E4 85 F1 | 	sub	objptr, ##1080
0ceec     F2 2E 02 F1 | 	add	local05, objptr
0cef0     04 2E 06 F1 | 	add	local05, #4
0cef4     17 35 02 FB | 	rdlong	local08, local05
0cef8     15 34 0E F2 | 	cmp	local08, #21 wz
0cefc     35 00 00 FF 
0cf00     0C E4 85 F1 | 	sub	objptr, ##27148
0cf04     44 00 90 5D |  if_ne	jmp	#LR__1041
0cf08     37 00 00 FF 
0cf0c     44 E4 05 F1 | 	add	objptr, ##28228
0cf10     F2 34 02 FB | 	rdlong	local08, objptr
0cf14     01 34 06 F1 | 	add	local08, #1
0cf18     F2 34 62 FC | 	wrlong	local08, objptr
0cf1c     37 00 00 FF 
0cf20     44 E4 85 F1 | 	sub	objptr, ##28228
0cf24     C4 EF BF FD | 	call	#_expr
0cf28     FD 36 02 F6 | 	mov	local09, result1
0cf2c     37 00 00 FF 
0cf30     44 E4 05 F1 | 	add	objptr, ##28228
0cf34     F2 34 02 FB | 	rdlong	local08, objptr
0cf38     01 34 06 F1 | 	add	local08, #1
0cf3c     F2 34 62 FC | 	wrlong	local08, objptr
0cf40     37 00 00 FF 
0cf44     44 E4 85 F1 | 	sub	objptr, ##28228
0cf48     08 00 90 FD | 	jmp	#LR__1042
0cf4c                 | LR__1041
0cf4c     9C EF BF FD | 	call	#_expr
0cf50     FD 36 02 F6 | 	mov	local09, result1
0cf54                 | LR__1042
0cf54                 | '     if err>0 then return err
0cf54     01 36 16 F2 | 	cmp	local09, #1 wc
0cf58     1B FB 01 36 |  if_ae	mov	result1, local09
0cf5c     3C 02 90 3D |  if_ae	jmp	#LR__1046
0cf60     01 32 06 F1 | 	add	local07, #1
0cf64     37 00 00 FF 
0cf68     44 E4 05 F1 | 	add	objptr, ##28228
0cf6c     F2 2E 02 FB | 	rdlong	local05, objptr
0cf70     03 2E 66 F0 | 	shl	local05, #3
0cf74     02 00 00 FF 
0cf78     38 E4 85 F1 | 	sub	objptr, ##1080
0cf7c     F2 2E 02 F1 | 	add	local05, objptr
0cf80     04 2E 06 F1 | 	add	local05, #4
0cf84     17 37 02 FB | 	rdlong	local09, local05
0cf88     14 36 0E F2 | 	cmp	local09, #20 wz
0cf8c     35 00 00 FF 
0cf90     0C E4 85 F1 | 	sub	objptr, ##27148
0cf94     34 00 90 AD |  if_e	jmp	#LR__1043
0cf98     37 00 00 FF 
0cf9c     44 E4 05 F1 | 	add	objptr, ##28228
0cfa0     F2 36 02 FB | 	rdlong	local09, objptr
0cfa4     03 36 66 F0 | 	shl	local09, #3
0cfa8     02 00 00 FF 
0cfac     38 E4 85 F1 | 	sub	objptr, ##1080
0cfb0     F2 36 02 F1 | 	add	local09, objptr
0cfb4     04 36 06 F1 | 	add	local09, #4
0cfb8     1B 37 02 FB | 	rdlong	local09, local09
0cfbc     FE 37 0E F2 | 	cmp	local09, #510 wz
0cfc0     35 00 00 FF 
0cfc4     0C E4 85 F1 | 	sub	objptr, ##27148
0cfc8     00 FF 9F 5D |  if_ne	jmp	#LR__1040
0cfcc                 | LR__1043
0cfcc                 | '   if lparts(ct).token=token_end then return 14
0cfcc     37 00 00 FF 
0cfd0     44 E4 05 F1 | 	add	objptr, ##28228
0cfd4     F2 2E 02 FB | 	rdlong	local05, objptr
0cfd8     03 2E 66 F0 | 	shl	local05, #3
0cfdc     02 00 00 FF 
0cfe0     38 E4 85 F1 | 	sub	objptr, ##1080
0cfe4     F2 2E 02 F1 | 	add	local05, objptr
0cfe8     04 2E 06 F1 | 	add	local05, #4
0cfec     17 37 02 FB | 	rdlong	local09, local05
0cff0     FE 37 0E F2 | 	cmp	local09, #510 wz
0cff4     35 00 00 FF 
0cff8     0C E4 85 F1 | 	sub	objptr, ##27148
0cffc     0E FA 05 A6 |  if_e	mov	result1, #14
0d000     98 01 90 AD |  if_e	jmp	#LR__1046
0d004                 | LR__1044
0d004     19 27 02 F6 | 	mov	local01, local07
0d008     03 30 66 F0 | 	shl	local06, #3
0d00c     35 00 00 FF 
0d010     0C E4 05 F1 | 	add	objptr, ##27148
0d014     F2 30 02 F1 | 	add	local06, objptr
0d018     04 30 06 F1 | 	add	local06, #4
0d01c     18 2B 02 FB | 	rdlong	local03, local06
0d020     13 35 02 F6 | 	mov	local08, local01
0d024     14 39 02 F6 | 	mov	local10, local02
0d028     15 3B 02 F6 | 	mov	local11, local03
0d02c     15 00 00 FF 
0d030     70 E4 05 F1 | 	add	objptr, ##10864
0d034     F2 3C 02 FB | 	rdlong	local12, objptr
0d038     1E 3F 02 F6 | 	mov	local13, local12
0d03c     01 3E 66 F0 | 	shl	local13, #1
0d040     1E 3F 02 F1 | 	add	local13, local12
0d044     02 3E 66 F0 | 	shl	local13, #2
0d048     03 00 00 FF 
0d04c     00 E4 85 F1 | 	sub	objptr, ##1536
0d050     F2 3E 02 F1 | 	add	local13, objptr
0d054     1F 35 62 FC | 	wrlong	local08, local13
0d058     03 00 00 FF 
0d05c     00 E4 05 F1 | 	add	objptr, ##1536
0d060     F2 34 02 FB | 	rdlong	local08, objptr
0d064     1A 41 02 F6 | 	mov	local14, local08
0d068     01 40 66 F0 | 	shl	local14, #1
0d06c     1A 41 02 F1 | 	add	local14, local08
0d070     02 40 66 F0 | 	shl	local14, #2
0d074     03 00 00 FF 
0d078     00 E4 85 F1 | 	sub	objptr, ##1536
0d07c     F2 40 02 F1 | 	add	local14, objptr
0d080     04 40 06 F1 | 	add	local14, #4
0d084     20 39 62 FC | 	wrlong	local10, local14
0d088     03 00 00 FF 
0d08c     00 E4 05 F1 | 	add	objptr, ##1536
0d090     F2 34 02 FB | 	rdlong	local08, objptr
0d094     1A 43 02 F6 | 	mov	local15, local08
0d098     01 42 66 F0 | 	shl	local15, #1
0d09c     1A 43 02 F1 | 	add	local15, local08
0d0a0     02 42 66 F0 | 	shl	local15, #2
0d0a4     03 00 00 FF 
0d0a8     00 E4 85 F1 | 	sub	objptr, ##1536
0d0ac     F2 42 02 F1 | 	add	local15, objptr
0d0b0     08 42 06 F1 | 	add	local15, #8
0d0b4     21 3B 62 FC | 	wrlong	local11, local15
0d0b8     03 00 00 FF 
0d0bc     00 E4 05 F1 | 	add	objptr, ##1536
0d0c0     F2 34 02 FB | 	rdlong	local08, objptr
0d0c4     01 34 06 F1 | 	add	local08, #1
0d0c8     F2 34 62 FC | 	wrlong	local08, objptr
0d0cc     4A 00 00 FF 
0d0d0     7C E4 85 F1 | 	sub	objptr, ##38012
0d0d4                 | ' t2.result.uresult=numpar
0d0d4                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0d0d4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d0d4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d0d4     FF FF 7F FF 
0d0d8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d0dc     B8 00 90 5D |  if_ne	jmp	#LR__1045
0d0e0     15 2A 06 F6 | 	mov	local03, #21
0d0e4     13 35 02 F6 | 	mov	local08, local01
0d0e8     14 39 02 F6 | 	mov	local10, local02
0d0ec     15 3B 02 F6 | 	mov	local11, local03
0d0f0     4A 00 00 FF 
0d0f4     7C E4 05 F1 | 	add	objptr, ##38012
0d0f8     F2 3C 02 FB | 	rdlong	local12, objptr
0d0fc     1E 3F 02 F6 | 	mov	local13, local12
0d100     01 3E 66 F0 | 	shl	local13, #1
0d104     1E 3F 02 F1 | 	add	local13, local12
0d108     02 3E 66 F0 | 	shl	local13, #2
0d10c     03 00 00 FF 
0d110     00 E4 85 F1 | 	sub	objptr, ##1536
0d114     F2 3E 02 F1 | 	add	local13, objptr
0d118     1F 35 62 FC | 	wrlong	local08, local13
0d11c     03 00 00 FF 
0d120     00 E4 05 F1 | 	add	objptr, ##1536
0d124     F2 42 02 FB | 	rdlong	local15, objptr
0d128     21 41 02 F6 | 	mov	local14, local15
0d12c     01 40 66 F0 | 	shl	local14, #1
0d130     21 41 02 F1 | 	add	local14, local15
0d134     02 40 66 F0 | 	shl	local14, #2
0d138     03 00 00 FF 
0d13c     00 E4 85 F1 | 	sub	objptr, ##1536
0d140     F2 40 02 F1 | 	add	local14, objptr
0d144     04 40 06 F1 | 	add	local14, #4
0d148     20 39 62 FC | 	wrlong	local10, local14
0d14c     03 00 00 FF 
0d150     00 E4 05 F1 | 	add	objptr, ##1536
0d154     F2 40 02 FB | 	rdlong	local14, objptr
0d158     20 43 02 F6 | 	mov	local15, local14
0d15c     01 42 66 F0 | 	shl	local15, #1
0d160     20 43 02 F1 | 	add	local15, local14
0d164     02 42 66 F0 | 	shl	local15, #2
0d168     03 00 00 FF 
0d16c     00 E4 85 F1 | 	sub	objptr, ##1536
0d170     F2 42 02 F1 | 	add	local15, objptr
0d174     08 42 06 F1 | 	add	local15, #8
0d178     21 3B 62 FC | 	wrlong	local11, local15
0d17c     03 00 00 FF 
0d180     00 E4 05 F1 | 	add	objptr, ##1536
0d184     F2 34 02 FB | 	rdlong	local08, objptr
0d188     01 34 06 F1 | 	add	local08, #1
0d18c     F2 34 62 FC | 	wrlong	local08, objptr
0d190     4A 00 00 FF 
0d194     7C E4 85 F1 | 	sub	objptr, ##38012
0d198                 | LR__1045
0d198                 | ' return 0
0d198     00 FA 05 F6 | 	mov	result1, #0
0d19c                 | LR__1046
0d19c     A7 F0 03 F6 | 	mov	ptra, fp
0d1a0     B2 00 A0 FD | 	call	#popregs_
0d1a4                 | _getfun_ret
0d1a4     2D 00 64 FD | 	ret
0d1a8                 | 
0d1a8                 | '   
0d1a8                 | '   
0d1a8                 | ' function getvar(m as integer) as ulong
0d1a8                 | _getvar
0d1a8     11 4A 05 F6 | 	mov	COUNT_, #17
0d1ac     A8 00 A0 FD | 	call	#pushregs_
0d1b0                 | _getvar_enter
0d1b0     09 2D 02 F6 | 	mov	local04, arg01
0d1b4     37 00 00 FF 
0d1b8     44 E4 05 F1 | 	add	objptr, ##28228
0d1bc     F2 2E 02 FB | 	rdlong	local05, objptr
0d1c0     03 2E 66 F0 | 	shl	local05, #3
0d1c4     02 00 00 FF 
0d1c8     38 E4 85 F1 | 	sub	objptr, ##1080
0d1cc     F2 2E 02 F1 | 	add	local05, objptr
0d1d0     17 31 02 FB | 	rdlong	local06, local05
0d1d4     01 32 66 F6 | 	neg	local07, #1
0d1d8                 | ' 
0d1d8                 | ' varname$=lparts(ct).part$
0d1d8                 | ' j=-1
0d1d8                 | ' 
0d1d8                 | ' for i=0 to varnum-1
0d1d8     00 34 06 F6 | 	mov	local08, #0
0d1dc     04 E4 85 F1 | 	sub	objptr, #4
0d1e0     F2 36 02 FB | 	rdlong	local09, objptr
0d1e4     35 00 00 FF 
0d1e8     08 E4 85 F1 | 	sub	objptr, ##27144
0d1ec                 | LR__1050
0d1ec     1B 35 52 F2 | 	cmps	local08, local09 wc
0d1f0     38 00 90 3D |  if_ae	jmp	#LR__1051
0d1f4                 | '   if variables(i).name=varname$ then j=i : exit
0d1f4     1A 2F 02 F6 | 	mov	local05, local08
0d1f8     04 2E 66 F0 | 	shl	local05, #4
0d1fc     14 00 00 FF 
0d200     F8 E5 05 F1 | 	add	objptr, ##10744
0d204     F2 2E 02 F1 | 	add	local05, objptr
0d208     17 13 02 FB | 	rdlong	arg01, local05
0d20c     18 15 02 F6 | 	mov	arg02, local06
0d210     14 00 00 FF 
0d214     F8 E5 85 F1 | 	sub	objptr, ##10744
0d218     A8 9E B1 FD | 	call	#__system___string_cmp
0d21c     00 FA 0D F2 | 	cmp	result1, #0 wz
0d220     1A 33 02 A6 |  if_e	mov	local07, local08
0d224     01 34 06 51 |  if_ne	add	local08, #1
0d228     C0 FF 9F 5D |  if_ne	jmp	#LR__1050
0d22c                 | LR__1051
0d22c                 | ' if  j=-1 andalso varnum<maxvars then   
0d22c     FF FF 7F FF 
0d230     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0d234     A8 00 90 5D |  if_ne	jmp	#LR__1052
0d238     35 00 00 FF 
0d23c     08 E4 05 F1 | 	add	objptr, ##27144
0d240     F2 36 02 FB | 	rdlong	local09, objptr
0d244     35 00 00 FF 
0d248     08 E4 85 F1 | 	sub	objptr, ##27144
0d24c     02 00 00 FF 
0d250     00 36 56 F2 | 	cmps	local09, ##1024 wc
0d254     88 00 90 3D |  if_ae	jmp	#LR__1052
0d258     35 00 00 FF 
0d25c     08 E4 05 F1 | 	add	objptr, ##27144
0d260     F2 2E 02 FB | 	rdlong	local05, objptr
0d264     04 2E 66 F0 | 	shl	local05, #4
0d268     20 00 00 FF 
0d26c     10 E4 85 F1 | 	sub	objptr, ##16400
0d270     F2 2E 02 F1 | 	add	local05, objptr
0d274     17 31 62 FC | 	wrlong	local06, local05
0d278     20 00 00 FF 
0d27c     10 E4 05 F1 | 	add	objptr, ##16400
0d280     F2 2E 02 FB | 	rdlong	local05, objptr
0d284     04 2E 66 F0 | 	shl	local05, #4
0d288     20 00 00 FF 
0d28c     10 E4 85 F1 | 	sub	objptr, ##16400
0d290     F2 2E 02 F1 | 	add	local05, objptr
0d294     04 2E 06 F1 | 	add	local05, #4
0d298     17 01 68 FC | 	wrlong	#0, local05
0d29c     20 00 00 FF 
0d2a0     10 E4 05 F1 | 	add	objptr, ##16400
0d2a4     F2 2E 02 FB | 	rdlong	local05, objptr
0d2a8     04 2E 66 F0 | 	shl	local05, #4
0d2ac     20 00 00 FF 
0d2b0     10 E4 85 F1 | 	sub	objptr, ##16400
0d2b4     F2 2E 02 F1 | 	add	local05, objptr
0d2b8     0C 2E 06 F1 | 	add	local05, #12
0d2bc     17 39 68 FC | 	wrlong	#28, local05
0d2c0     20 00 00 FF 
0d2c4     10 E4 05 F1 | 	add	objptr, ##16400
0d2c8     F2 36 02 FB | 	rdlong	local09, objptr
0d2cc     1B 33 02 F6 | 	mov	local07, local09
0d2d0     01 36 06 F1 | 	add	local09, #1
0d2d4     F2 36 62 FC | 	wrlong	local09, objptr
0d2d8     35 00 00 FF 
0d2dc     08 E4 85 F1 | 	sub	objptr, ##27144
0d2e0                 | LR__1052
0d2e0     00 36 06 F6 | 	mov	local09, #0
0d2e4                 | ' numpar=0
0d2e4                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d2e4     37 00 00 FF 
0d2e8     44 E4 05 F1 | 	add	objptr, ##28228
0d2ec     F2 2E 02 FB | 	rdlong	local05, objptr
0d2f0     01 2E 06 F1 | 	add	local05, #1
0d2f4     03 2E 66 F0 | 	shl	local05, #3
0d2f8     02 00 00 FF 
0d2fc     38 E4 85 F1 | 	sub	objptr, ##1080
0d300     F2 2E 02 F1 | 	add	local05, objptr
0d304     04 2E 06 F1 | 	add	local05, #4
0d308     17 35 02 FB | 	rdlong	local08, local05
0d30c     15 34 0E F2 | 	cmp	local08, #21 wz
0d310     35 00 00 FF 
0d314     0C E4 85 F1 | 	sub	objptr, ##27148
0d318     54 01 90 5D |  if_ne	jmp	#LR__1057
0d31c     37 00 00 FF 
0d320     44 E4 05 F1 | 	add	objptr, ##28228
0d324     F2 38 02 FB | 	rdlong	local10, objptr
0d328     01 38 06 F1 | 	add	local10, #1
0d32c     F2 38 62 FC | 	wrlong	local10, objptr
0d330     37 00 00 FF 
0d334     44 E4 85 F1 | 	sub	objptr, ##28228
0d338                 | '   ct+=1 											' omit this lpar, this is for expr list
0d338                 | '   do
0d338                 | LR__1053
0d338     37 00 00 FF 
0d33c     44 E4 05 F1 | 	add	objptr, ##28228
0d340     F2 2E 02 FB | 	rdlong	local05, objptr
0d344     01 2E 06 F1 | 	add	local05, #1
0d348     F2 2E 62 FC | 	wrlong	local05, objptr
0d34c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d34c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d34c     03 2E 66 F0 | 	shl	local05, #3
0d350     02 00 00 FF 
0d354     38 E4 85 F1 | 	sub	objptr, ##1080
0d358     F2 2E 02 F1 | 	add	local05, objptr
0d35c     04 2E 06 F1 | 	add	local05, #4
0d360     17 39 02 FB | 	rdlong	local10, local05
0d364     15 38 0E F2 | 	cmp	local10, #21 wz
0d368     35 00 00 FF 
0d36c     0C E4 85 F1 | 	sub	objptr, ##27148
0d370     44 00 90 5D |  if_ne	jmp	#LR__1054
0d374     37 00 00 FF 
0d378     44 E4 05 F1 | 	add	objptr, ##28228
0d37c     F2 38 02 FB | 	rdlong	local10, objptr
0d380     01 38 06 F1 | 	add	local10, #1
0d384     F2 38 62 FC | 	wrlong	local10, objptr
0d388     37 00 00 FF 
0d38c     44 E4 85 F1 | 	sub	objptr, ##28228
0d390     58 EB BF FD | 	call	#_expr
0d394     FD 3A 02 F6 | 	mov	local11, result1
0d398     37 00 00 FF 
0d39c     44 E4 05 F1 | 	add	objptr, ##28228
0d3a0     F2 38 02 FB | 	rdlong	local10, objptr
0d3a4     01 38 06 F1 | 	add	local10, #1
0d3a8     F2 38 62 FC | 	wrlong	local10, objptr
0d3ac     37 00 00 FF 
0d3b0     44 E4 85 F1 | 	sub	objptr, ##28228
0d3b4     08 00 90 FD | 	jmp	#LR__1055
0d3b8                 | LR__1054
0d3b8     30 EB BF FD | 	call	#_expr
0d3bc     FD 3A 02 F6 | 	mov	local11, result1
0d3c0                 | LR__1055
0d3c0                 | '     if err>0 then return err
0d3c0     01 3A 56 F2 | 	cmps	local11, #1 wc
0d3c4     1D FB 01 36 |  if_ae	mov	result1, local11
0d3c8     2C 02 90 3D |  if_ae	jmp	#LR__1059
0d3cc     01 36 06 F1 | 	add	local09, #1
0d3d0     37 00 00 FF 
0d3d4     44 E4 05 F1 | 	add	objptr, ##28228
0d3d8     F2 2E 02 FB | 	rdlong	local05, objptr
0d3dc     03 2E 66 F0 | 	shl	local05, #3
0d3e0     02 00 00 FF 
0d3e4     38 E4 85 F1 | 	sub	objptr, ##1080
0d3e8     F2 2E 02 F1 | 	add	local05, objptr
0d3ec     04 2E 06 F1 | 	add	local05, #4
0d3f0     17 3B 02 FB | 	rdlong	local11, local05
0d3f4     14 3A 0E F2 | 	cmp	local11, #20 wz
0d3f8     35 00 00 FF 
0d3fc     0C E4 85 F1 | 	sub	objptr, ##27148
0d400     34 00 90 AD |  if_e	jmp	#LR__1056
0d404     37 00 00 FF 
0d408     44 E4 05 F1 | 	add	objptr, ##28228
0d40c     F2 3A 02 FB | 	rdlong	local11, objptr
0d410     03 3A 66 F0 | 	shl	local11, #3
0d414     02 00 00 FF 
0d418     38 E4 85 F1 | 	sub	objptr, ##1080
0d41c     F2 3A 02 F1 | 	add	local11, objptr
0d420     04 3A 06 F1 | 	add	local11, #4
0d424     1D 3B 02 FB | 	rdlong	local11, local11
0d428     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d42c     35 00 00 FF 
0d430     0C E4 85 F1 | 	sub	objptr, ##27148
0d434     00 FF 9F 5D |  if_ne	jmp	#LR__1053
0d438                 | LR__1056
0d438                 | '     if lparts(ct).token=token_end then return 14
0d438     37 00 00 FF 
0d43c     44 E4 05 F1 | 	add	objptr, ##28228
0d440     F2 2E 02 FB | 	rdlong	local05, objptr
0d444     03 2E 66 F0 | 	shl	local05, #3
0d448     02 00 00 FF 
0d44c     38 E4 85 F1 | 	sub	objptr, ##1080
0d450     F2 2E 02 F1 | 	add	local05, objptr
0d454     04 2E 06 F1 | 	add	local05, #4
0d458     17 3B 02 FB | 	rdlong	local11, local05
0d45c     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d460     35 00 00 FF 
0d464     0C E4 85 F1 | 	sub	objptr, ##27148
0d468     0E FA 05 A6 |  if_e	mov	result1, #14
0d46c     88 01 90 AD |  if_e	jmp	#LR__1059
0d470                 | LR__1057
0d470     1B 29 02 F6 | 	mov	local02, local09
0d474     11 2A 06 F6 | 	mov	local03, #17
0d478     19 27 02 F6 | 	mov	local01, local07
0d47c     13 39 02 F6 | 	mov	local10, local01
0d480     14 3D 02 F6 | 	mov	local12, local02
0d484     15 3F 02 F6 | 	mov	local13, local03
0d488     4A 00 00 FF 
0d48c     7C E4 05 F1 | 	add	objptr, ##38012
0d490     F2 40 02 FB | 	rdlong	local14, objptr
0d494     20 43 02 F6 | 	mov	local15, local14
0d498     01 42 66 F0 | 	shl	local15, #1
0d49c     20 43 02 F1 | 	add	local15, local14
0d4a0     02 42 66 F0 | 	shl	local15, #2
0d4a4     03 00 00 FF 
0d4a8     00 E4 85 F1 | 	sub	objptr, ##1536
0d4ac     F2 42 02 F1 | 	add	local15, objptr
0d4b0     21 39 62 FC | 	wrlong	local10, local15
0d4b4     03 00 00 FF 
0d4b8     00 E4 05 F1 | 	add	objptr, ##1536
0d4bc     F2 38 02 FB | 	rdlong	local10, objptr
0d4c0     1C 45 02 F6 | 	mov	local16, local10
0d4c4     01 44 66 F0 | 	shl	local16, #1
0d4c8     1C 45 02 F1 | 	add	local16, local10
0d4cc     02 44 66 F0 | 	shl	local16, #2
0d4d0     03 00 00 FF 
0d4d4     00 E4 85 F1 | 	sub	objptr, ##1536
0d4d8     F2 44 02 F1 | 	add	local16, objptr
0d4dc     04 44 06 F1 | 	add	local16, #4
0d4e0     22 3D 62 FC | 	wrlong	local12, local16
0d4e4     03 00 00 FF 
0d4e8     00 E4 05 F1 | 	add	objptr, ##1536
0d4ec     F2 38 02 FB | 	rdlong	local10, objptr
0d4f0     1C 47 02 F6 | 	mov	local17, local10
0d4f4     01 46 66 F0 | 	shl	local17, #1
0d4f8     1C 47 02 F1 | 	add	local17, local10
0d4fc     02 46 66 F0 | 	shl	local17, #2
0d500     03 00 00 FF 
0d504     00 E4 85 F1 | 	sub	objptr, ##1536
0d508     F2 46 02 F1 | 	add	local17, objptr
0d50c     08 46 06 F1 | 	add	local17, #8
0d510     23 3F 62 FC | 	wrlong	local13, local17
0d514     03 00 00 FF 
0d518     00 E4 05 F1 | 	add	objptr, ##1536
0d51c     F2 38 02 FB | 	rdlong	local10, objptr
0d520     01 38 06 F1 | 	add	local10, #1
0d524     F2 38 62 FC | 	wrlong	local10, objptr
0d528     4A 00 00 FF 
0d52c     7C E4 85 F1 | 	sub	objptr, ##38012
0d530                 | ' t2.result.twowords(1)=numpar
0d530                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d530                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d530                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d530     FF FF 7F FF 
0d534     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d538     B8 00 90 5D |  if_ne	jmp	#LR__1058
0d53c     15 2A 06 F6 | 	mov	local03, #21
0d540     13 39 02 F6 | 	mov	local10, local01
0d544     14 3D 02 F6 | 	mov	local12, local02
0d548     15 3F 02 F6 | 	mov	local13, local03
0d54c     4A 00 00 FF 
0d550     7C E4 05 F1 | 	add	objptr, ##38012
0d554     F2 40 02 FB | 	rdlong	local14, objptr
0d558     20 43 02 F6 | 	mov	local15, local14
0d55c     01 42 66 F0 | 	shl	local15, #1
0d560     20 43 02 F1 | 	add	local15, local14
0d564     02 42 66 F0 | 	shl	local15, #2
0d568     03 00 00 FF 
0d56c     00 E4 85 F1 | 	sub	objptr, ##1536
0d570     F2 42 02 F1 | 	add	local15, objptr
0d574     21 39 62 FC | 	wrlong	local10, local15
0d578     03 00 00 FF 
0d57c     00 E4 05 F1 | 	add	objptr, ##1536
0d580     F2 46 02 FB | 	rdlong	local17, objptr
0d584     23 45 02 F6 | 	mov	local16, local17
0d588     01 44 66 F0 | 	shl	local16, #1
0d58c     23 45 02 F1 | 	add	local16, local17
0d590     02 44 66 F0 | 	shl	local16, #2
0d594     03 00 00 FF 
0d598     00 E4 85 F1 | 	sub	objptr, ##1536
0d59c     F2 44 02 F1 | 	add	local16, objptr
0d5a0     04 44 06 F1 | 	add	local16, #4
0d5a4     22 3D 62 FC | 	wrlong	local12, local16
0d5a8     03 00 00 FF 
0d5ac     00 E4 05 F1 | 	add	objptr, ##1536
0d5b0     F2 44 02 FB | 	rdlong	local16, objptr
0d5b4     22 47 02 F6 | 	mov	local17, local16
0d5b8     01 46 66 F0 | 	shl	local17, #1
0d5bc     22 47 02 F1 | 	add	local17, local16
0d5c0     02 46 66 F0 | 	shl	local17, #2
0d5c4     03 00 00 FF 
0d5c8     00 E4 85 F1 | 	sub	objptr, ##1536
0d5cc     F2 46 02 F1 | 	add	local17, objptr
0d5d0     08 46 06 F1 | 	add	local17, #8
0d5d4     23 3F 62 FC | 	wrlong	local13, local17
0d5d8     03 00 00 FF 
0d5dc     00 E4 05 F1 | 	add	objptr, ##1536
0d5e0     F2 38 02 FB | 	rdlong	local10, objptr
0d5e4     01 38 06 F1 | 	add	local10, #1
0d5e8     F2 38 62 FC | 	wrlong	local10, objptr
0d5ec     4A 00 00 FF 
0d5f0     7C E4 85 F1 | 	sub	objptr, ##38012
0d5f4                 | LR__1058
0d5f4                 | ' return 0
0d5f4     00 FA 05 F6 | 	mov	result1, #0
0d5f8                 | LR__1059
0d5f8     A7 F0 03 F6 | 	mov	ptra, fp
0d5fc     B2 00 A0 FD | 	call	#popregs_
0d600                 | _getvar_ret
0d600     2D 00 64 FD | 	ret
0d604                 | 
0d604                 | ' 
0d604                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d604                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d604                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d604                 | ' 
0d604                 | ' 
0d604                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d604                 | ' '                                                                                                                                       -
0d604                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d604                 | ' '                                                                                                                                       -
0d604                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d604                 | ' 
0d604                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d604                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d604                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d604                 | ' 
0d604                 | ' function execute_line (astart=0 as integer) as integer
0d604                 | _execute_line
0d604     04 4A 05 F6 | 	mov	COUNT_, #4
0d608     A8 00 A0 FD | 	call	#pushregs_
0d60c     50 00 00 FF 
0d610     BC E4 05 F1 | 	add	objptr, ##41148
0d614     F2 00 68 FC | 	wrlong	#0, objptr
0d618                 | ' 
0d618                 | ' runptr2=0
0d618                 | ' for lineptr_e=astart to lineptr-1
0d618     06 00 00 FF 
0d61c     3C E4 85 F1 | 	sub	objptr, ##3132
0d620     F2 12 62 FC | 	wrlong	arg01, objptr
0d624     04 E4 85 F1 | 	sub	objptr, #4
0d628     F2 26 02 FB | 	rdlong	local01, objptr
0d62c     4A 00 00 FF 
0d630     7C E4 85 F1 | 	sub	objptr, ##38012
0d634                 | LR__1060
0d634     4A 00 00 FF 
0d638     80 E4 05 F1 | 	add	objptr, ##38016
0d63c     F2 FA 01 FB | 	rdlong	result1, objptr
0d640     4A 00 00 FF 
0d644     80 E4 85 F1 | 	sub	objptr, ##38016
0d648     13 FB 51 F2 | 	cmps	result1, local01 wc
0d64c     98 00 90 3D |  if_ae	jmp	#LR__1061
0d650     4A 00 00 FF 
0d654     80 E4 05 F1 | 	add	objptr, ##38016
0d658     F2 FA 01 FB | 	rdlong	result1, objptr
0d65c     FD 28 02 F6 | 	mov	local02, result1
0d660     01 28 66 F0 | 	shl	local02, #1
0d664     FD 28 02 F1 | 	add	local02, result1
0d668     02 28 66 F0 | 	shl	local02, #2
0d66c     03 00 00 FF 
0d670     04 E4 85 F1 | 	sub	objptr, ##1540
0d674     F2 28 02 F1 | 	add	local02, objptr
0d678     08 28 06 F1 | 	add	local02, #8
0d67c     14 29 02 FB | 	rdlong	local02, local02
0d680     14 29 E2 F8 | 	getbyte	local02, local02, #0
0d684     02 28 66 F0 | 	shl	local02, #2
0d688     04 00 00 FF 
0d68c     1C E4 85 F1 | 	sub	objptr, ##2076
0d690     F2 28 02 F1 | 	add	local02, objptr
0d694     14 29 02 FB | 	rdlong	local02, local02
0d698     14 2B 02 F6 | 	mov	local03, local02
0d69c     13 28 46 F7 | 	zerox	local02, #19
0d6a0     14 2A 46 F0 | 	shr	local03, #20
0d6a4     02 2A 66 F0 | 	shl	local03, #2
0d6a8     ED 2A 02 F1 | 	add	local03, __methods__
0d6ac     15 2B 02 FB | 	rdlong	local03, local03
0d6b0     43 00 00 FF 
0d6b4     60 E4 85 F1 | 	sub	objptr, ##34400
0d6b8     F2 2C 02 F6 | 	mov	local04, objptr
0d6bc     14 E5 01 F6 | 	mov	objptr, local02
0d6c0     2D 2A 62 FD | 	call	local03
0d6c4     16 E5 01 F6 | 	mov	objptr, local04
0d6c8     4A 00 00 FF 
0d6cc     80 E4 05 F1 | 	add	objptr, ##38016
0d6d0     F2 2C 02 FB | 	rdlong	local04, objptr
0d6d4     01 2C 06 F1 | 	add	local04, #1
0d6d8     F2 2C 62 FC | 	wrlong	local04, objptr
0d6dc     4A 00 00 FF 
0d6e0     80 E4 85 F1 | 	sub	objptr, ##38016
0d6e4     4C FF 9F FD | 	jmp	#LR__1060
0d6e8                 | LR__1061
0d6e8                 | ' return runptr2
0d6e8     50 00 00 FF 
0d6ec     BC E4 05 F1 | 	add	objptr, ##41148
0d6f0     F2 FA 01 FB | 	rdlong	result1, objptr
0d6f4     50 00 00 FF 
0d6f8     BC E4 85 F1 | 	sub	objptr, ##41148
0d6fc     A7 F0 03 F6 | 	mov	ptra, fp
0d700     B2 00 A0 FD | 	call	#popregs_
0d704                 | _execute_line_ret
0d704     2D 00 64 FD | 	ret
0d708                 | 
0d708                 | ' 
0d708                 | ' 
0d708                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d708                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d708                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d708                 | ' 
0d708                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d708                 | ' 
0d708                 | ' function pop() as expr_result
0d708                 | _pop
0d708                 | ' if stackpointer=0 then
0d708     43 00 00 FF 
0d70c     58 E4 05 F1 | 	add	objptr, ##34392
0d710     F2 FA 09 FB | 	rdlong	result1, objptr wz
0d714     43 00 00 FF 
0d718     58 E4 85 F1 | 	sub	objptr, ##34392
0d71c     FF 04 06 A6 |  if_e	mov	_var03, #255
0d720     18 00 06 A6 |  if_e	mov	_var01, #24
0d724     68 00 90 AD |  if_e	jmp	#LR__1070
0d728     43 00 00 FF 
0d72c     58 E4 05 F1 | 	add	objptr, ##34392
0d730     F2 FA 01 FB | 	rdlong	result1, objptr
0d734     01 FA 85 F1 | 	sub	result1, #1
0d738     F2 FA 61 FC | 	wrlong	result1, objptr
0d73c     FD FE 01 F6 | 	mov	result3, result1
0d740     01 FE 65 F0 | 	shl	result3, #1
0d744     FD FE 01 F1 | 	add	result3, result1
0d748     02 FE 65 F0 | 	shl	result3, #2
0d74c     0C 00 00 FF 
0d750     0C E4 85 F1 | 	sub	objptr, ##6156
0d754     F2 FE 01 F1 | 	add	result3, objptr
0d758     FF 00 02 FB | 	rdlong	_var01, result3
0d75c     04 FE 05 F1 | 	add	result3, #4
0d760     FF FE 01 FB | 	rdlong	result3, result3
0d764     FD FC 01 F6 | 	mov	result2, result1
0d768     01 FC 65 F0 | 	shl	result2, #1
0d76c     FD FC 01 F1 | 	add	result2, result1
0d770     02 FC 65 F0 | 	shl	result2, #2
0d774     F2 FC 01 F1 | 	add	result2, objptr
0d778     08 FC 05 F1 | 	add	result2, #8
0d77c     FE FA 01 FB | 	rdlong	result1, result2
0d780     FF 02 02 F6 | 	mov	_var02, result3
0d784     FD 04 02 F6 | 	mov	_var03, result1
0d788     37 00 00 FF 
0d78c     4C E4 85 F1 | 	sub	objptr, ##28236
0d790                 | LR__1070
0d790                 | ' return t1
0d790     01 FD 01 F6 | 	mov	result2, _var02
0d794     02 FF 01 F6 | 	mov	result3, _var03
0d798     00 FB 01 F6 | 	mov	result1, _var01
0d79c                 | _pop_ret
0d79c     2D 00 64 FD | 	ret
0d7a0                 | 
0d7a0                 | ' 
0d7a0                 | ' sub push(t1 as expr_result )
0d7a0                 | _push
0d7a0                 | ' if stackpointer<maxstack then 
0d7a0     43 00 00 FF 
0d7a4     58 E4 05 F1 | 	add	objptr, ##34392
0d7a8     F2 00 02 FB | 	rdlong	_var01, objptr
0d7ac     43 00 00 FF 
0d7b0     58 E4 85 F1 | 	sub	objptr, ##34392
0d7b4     01 00 00 FF 
0d7b8     00 00 56 F2 | 	cmps	_var01, ##512 wc
0d7bc     BC 00 90 3D |  if_ae	jmp	#LR__1080
0d7c0     09 01 02 FB | 	rdlong	_var01, arg01
0d7c4     04 12 06 F1 | 	add	arg01, #4
0d7c8     09 03 02 FB | 	rdlong	_var02, arg01
0d7cc     04 12 06 F1 | 	add	arg01, #4
0d7d0     09 13 02 FB | 	rdlong	arg01, arg01
0d7d4     43 00 00 FF 
0d7d8     58 E4 05 F1 | 	add	objptr, ##34392
0d7dc     F2 04 02 FB | 	rdlong	_var03, objptr
0d7e0     02 07 02 F6 | 	mov	_var04, _var03
0d7e4     01 06 66 F0 | 	shl	_var04, #1
0d7e8     02 07 02 F1 | 	add	_var04, _var03
0d7ec     02 06 66 F0 | 	shl	_var04, #2
0d7f0     0C 00 00 FF 
0d7f4     0C E4 85 F1 | 	sub	objptr, ##6156
0d7f8     F2 06 02 F1 | 	add	_var04, objptr
0d7fc     03 01 62 FC | 	wrlong	_var01, _var04
0d800     0C 00 00 FF 
0d804     0C E4 05 F1 | 	add	objptr, ##6156
0d808     F2 06 02 FB | 	rdlong	_var04, objptr
0d80c     03 05 02 F6 | 	mov	_var03, _var04
0d810     01 04 66 F0 | 	shl	_var03, #1
0d814     03 05 02 F1 | 	add	_var03, _var04
0d818     02 04 66 F0 | 	shl	_var03, #2
0d81c     0C 00 00 FF 
0d820     0C E4 85 F1 | 	sub	objptr, ##6156
0d824     F2 04 02 F1 | 	add	_var03, objptr
0d828     04 04 06 F1 | 	add	_var03, #4
0d82c     02 03 62 FC | 	wrlong	_var02, _var03
0d830     0C 00 00 FF 
0d834     0C E4 05 F1 | 	add	objptr, ##6156
0d838     F2 06 02 FB | 	rdlong	_var04, objptr
0d83c     03 05 02 F6 | 	mov	_var03, _var04
0d840     01 04 66 F0 | 	shl	_var03, #1
0d844     03 05 02 F1 | 	add	_var03, _var04
0d848     02 04 66 F0 | 	shl	_var03, #2
0d84c     0C 00 00 FF 
0d850     0C E4 85 F1 | 	sub	objptr, ##6156
0d854     F2 04 02 F1 | 	add	_var03, objptr
0d858     08 04 06 F1 | 	add	_var03, #8
0d85c     02 13 62 FC | 	wrlong	arg01, _var03
0d860     0C 00 00 FF 
0d864     0C E4 05 F1 | 	add	objptr, ##6156
0d868     F2 00 02 FB | 	rdlong	_var01, objptr
0d86c     01 00 06 F1 | 	add	_var01, #1
0d870     F2 00 62 FC | 	wrlong	_var01, objptr
0d874     43 00 00 FF 
0d878     58 E4 85 F1 | 	sub	objptr, ##34392
0d87c                 | LR__1080
0d87c                 | _push_ret
0d87c     2D 00 64 FD | 	ret
0d880                 | 
0d880                 | ' 
0d880                 | ' ' -------------------------------- Runtime converting functions
0d880                 | ' 
0d880                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d880                 | ' 
0d880                 | ' function  convertstring(psaddr as ulong) as string
0d880                 | _convertstring
0d880     04 4A 05 F6 | 	mov	COUNT_, #4
0d884     A8 00 A0 FD | 	call	#pushregs_
0d888     09 27 02 F6 | 	mov	local01, arg01
0d88c     2C 60 B1 FD | 	call	#_pslpeek
0d890     FD 28 02 F6 | 	mov	local02, result1
0d894     B9 01 00 FF 
0d898     62 2B 06 F6 | 	mov	local03, ##@LR__5893
0d89c                 | ' l=pslpeek(psaddr) 
0d89c                 | ' s="" 
0d89c                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d89c     01 2C 06 F6 | 	mov	local04, #1
0d8a0     01 28 06 F1 | 	add	local02, #1
0d8a4                 | LR__1090
0d8a4     14 2D 52 F2 | 	cmps	local04, local02 wc
0d8a8     30 00 90 3D |  if_ae	jmp	#LR__1091
0d8ac     13 13 02 F6 | 	mov	arg01, local01
0d8b0     03 12 06 F1 | 	add	arg01, #3
0d8b4     16 13 02 F1 | 	add	arg01, local04
0d8b8     A8 5F B1 FD | 	call	#_pspeek
0d8bc     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0d8c0     1C BA B1 FD | 	call	#__system__Chr_S
0d8c4     FD 14 02 F6 | 	mov	arg02, result1
0d8c8     15 13 02 F6 | 	mov	arg01, local03
0d8cc     28 98 B1 FD | 	call	#__system___string_concat
0d8d0     FD 2A 02 F6 | 	mov	local03, result1
0d8d4     01 2C 06 F1 | 	add	local04, #1
0d8d8     C8 FF 9F FD | 	jmp	#LR__1090
0d8dc                 | LR__1091
0d8dc                 | ' return s
0d8dc     15 FB 01 F6 | 	mov	result1, local03
0d8e0     A7 F0 03 F6 | 	mov	ptra, fp
0d8e4     B2 00 A0 FD | 	call	#popregs_
0d8e8                 | _convertstring_ret
0d8e8     2D 00 64 FD | 	ret
0d8ec                 | 
0d8ec                 | ' 
0d8ec                 | ' ' converts a variable to an integer
0d8ec                 | ' 
0d8ec                 | ' function converttoint (t1 as expr_result) as integer 
0d8ec                 | _converttoint
0d8ec     02 4A 05 F6 | 	mov	COUNT_, #2
0d8f0     A8 00 A0 FD | 	call	#pushregs_
0d8f4     09 27 02 F6 | 	mov	local01, arg01
0d8f8                 | ' 
0d8f8                 | ' select case t1.result_type
0d8f8     08 26 06 F1 | 	add	local01, #8
0d8fc     13 29 02 FB | 	rdlong	local02, local01
0d900     08 26 86 F1 | 	sub	local01, #8
0d904     1C 28 0E F2 | 	cmp	local02, #28 wz
0d908     2C 00 90 AD |  if_e	jmp	#LR__1100
0d90c     1D 28 0E F2 | 	cmp	local02, #29 wz
0d910     2C 00 90 AD |  if_e	jmp	#LR__1101
0d914     1E 28 0E F2 | 	cmp	local02, #30 wz
0d918     2C 00 90 AD |  if_e	jmp	#LR__1102
0d91c     1F 28 0E F2 | 	cmp	local02, #31 wz
0d920     34 00 90 AD |  if_e	jmp	#LR__1103
0d924     2B 28 0E F2 | 	cmp	local02, #43 wz
0d928     44 00 90 AD |  if_e	jmp	#LR__1104
0d92c     2C 28 0E F2 | 	cmp	local02, #44 wz
0d930     5C 00 90 AD |  if_e	jmp	#LR__1105
0d934     60 00 90 FD | 	jmp	#LR__1106
0d938                 | LR__1100
0d938     13 FB 01 FB | 	rdlong	result1, local01
0d93c     5C 00 90 FD | 	jmp	#LR__1107
0d940                 | LR__1101
0d940     13 FB 01 FB | 	rdlong	result1, local01
0d944     54 00 90 FD | 	jmp	#LR__1107
0d948                 | LR__1102
0d948     13 13 02 FB | 	rdlong	arg01, local01
0d94c     01 14 06 F6 | 	mov	arg02, #1
0d950     8C CA B1 FD | 	call	#__system___float_tointeger
0d954     44 00 90 FD | 	jmp	#LR__1107
0d958                 | LR__1103
0d958     13 13 02 FB | 	rdlong	arg01, local01
0d95c     C4 CD B1 FD | 	call	#__system____builtin_atof
0d960     FD 12 02 F6 | 	mov	arg01, result1
0d964     01 14 06 F6 | 	mov	arg02, #1
0d968     74 CA B1 FD | 	call	#__system___float_tointeger
0d96c     2C 00 90 FD | 	jmp	#LR__1107
0d970                 | LR__1104
0d970     13 13 02 FB | 	rdlong	arg01, local01
0d974     08 FF BF FD | 	call	#_convertstring
0d978     FD 12 02 F6 | 	mov	arg01, result1
0d97c     A4 CD B1 FD | 	call	#__system____builtin_atof
0d980     FD 12 02 F6 | 	mov	arg01, result1
0d984     01 14 06 F6 | 	mov	arg02, #1
0d988     54 CA B1 FD | 	call	#__system___float_tointeger
0d98c     0C 00 90 FD | 	jmp	#LR__1107
0d990                 | LR__1105
0d990     13 FB 01 FB | 	rdlong	result1, local01
0d994     04 00 90 FD | 	jmp	#LR__1107
0d998                 | LR__1106
0d998     00 FA 05 F6 | 	mov	result1, #0
0d99c                 | LR__1107
0d99c     A7 F0 03 F6 | 	mov	ptra, fp
0d9a0     B2 00 A0 FD | 	call	#popregs_
0d9a4                 | _converttoint_ret
0d9a4     2D 00 64 FD | 	ret
0d9a8                 | 
0d9a8                 | ' 
0d9a8                 | ' ' converts a variable to float
0d9a8                 | ' 
0d9a8                 | ' function converttofloat (t1 as expr_result) as single
0d9a8                 | _converttofloat
0d9a8     03 4A 05 F6 | 	mov	COUNT_, #3
0d9ac     A8 00 A0 FD | 	call	#pushregs_
0d9b0     09 27 02 F6 | 	mov	local01, arg01
0d9b4                 | ' 
0d9b4                 | ' select case t1.result_type
0d9b4     08 26 06 F1 | 	add	local01, #8
0d9b8     13 29 02 FB | 	rdlong	local02, local01
0d9bc     08 26 86 F1 | 	sub	local01, #8
0d9c0     1C 28 0E F2 | 	cmp	local02, #28 wz
0d9c4     24 00 90 AD |  if_e	jmp	#LR__1110
0d9c8     1D 28 0E F2 | 	cmp	local02, #29 wz
0d9cc     38 00 90 AD |  if_e	jmp	#LR__1111
0d9d0     1E 28 0E F2 | 	cmp	local02, #30 wz
0d9d4     3C 00 90 AD |  if_e	jmp	#LR__1112
0d9d8     1F 28 0E F2 | 	cmp	local02, #31 wz
0d9dc     3C 00 90 AD |  if_e	jmp	#LR__1113
0d9e0     2B 28 0E F2 | 	cmp	local02, #43 wz
0d9e4     40 00 90 AD |  if_e	jmp	#LR__1114
0d9e8     50 00 90 FD | 	jmp	#LR__1115
0d9ec                 | LR__1110
0d9ec     13 13 02 FB | 	rdlong	arg01, local01
0d9f0     09 13 52 F6 | 	abs	arg01, arg01 wc
0d9f4     1F 2A C6 C9 |  if_b	decod	local03, #31
0d9f8     00 2A 06 36 |  if_ae	mov	local03, #0
0d9fc     14 C1 B1 FD | 	call	#__system___float_fromuns
0da00     15 FB 61 F5 | 	xor	result1, local03
0da04     38 00 90 FD | 	jmp	#LR__1116
0da08                 | LR__1111
0da08     13 13 02 FB | 	rdlong	arg01, local01
0da0c     04 C1 B1 FD | 	call	#__system___float_fromuns
0da10     2C 00 90 FD | 	jmp	#LR__1116
0da14                 | LR__1112
0da14     13 FB 01 FB | 	rdlong	result1, local01
0da18     24 00 90 FD | 	jmp	#LR__1116
0da1c                 | LR__1113
0da1c     13 13 02 FB | 	rdlong	arg01, local01
0da20     00 CD B1 FD | 	call	#__system____builtin_atof
0da24     18 00 90 FD | 	jmp	#LR__1116
0da28                 | LR__1114
0da28     13 13 02 FB | 	rdlong	arg01, local01
0da2c     50 FE BF FD | 	call	#_convertstring
0da30     FD 12 02 F6 | 	mov	arg01, result1
0da34     EC CC B1 FD | 	call	#__system____builtin_atof
0da38     04 00 90 FD | 	jmp	#LR__1116
0da3c                 | LR__1115
0da3c     00 FA 05 F6 | 	mov	result1, #0
0da40                 | LR__1116
0da40     A7 F0 03 F6 | 	mov	ptra, fp
0da44     B2 00 A0 FD | 	call	#popregs_
0da48                 | _converttofloat_ret
0da48     2D 00 64 FD | 	ret
0da4c                 | 
0da4c                 | ' 
0da4c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0da4c                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0da4c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0da4c                 | ' 
0da4c                 | ' 
0da4c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0da4c                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0da4c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0da4c                 | ' 
0da4c                 | ' '-------------------- abs
0da4c                 | ' 
0da4c                 | ' sub do_abs
0da4c                 | _do_abs
0da4c     01 4A 05 F6 | 	mov	COUNT_, #1
0da50     A8 00 A0 FD | 	call	#pushregs_
0da54     0C F0 07 F1 | 	add	ptra, #12
0da58     AC FC BF FD | 	call	#_pop
0da5c     FF 26 02 F6 | 	mov	local01, result3
0da60     A7 FA 61 FC | 	wrlong	result1, fp
0da64     04 4E 05 F1 | 	add	fp, #4
0da68     A7 FC 61 FC | 	wrlong	result2, fp
0da6c     04 4E 05 F1 | 	add	fp, #4
0da70     A7 26 62 FC | 	wrlong	local01, fp
0da74                 | ' 
0da74                 | ' t1=pop()
0da74                 | ' if t1.result_type=result_int then 
0da74     08 4E 85 F1 | 	sub	fp, #8
0da78     1C 26 0E F2 | 	cmp	local01, #28 wz
0da7c     A7 12 02 AB |  if_e	rdlong	arg01, fp
0da80     09 27 42 A6 |  if_e	abs	local01, arg01
0da84     A7 26 62 AC |  if_e	wrlong	local01, fp
0da88     2C 00 90 AD |  if_e	jmp	#LR__1120
0da8c     08 4E 05 F1 | 	add	fp, #8
0da90     A7 26 02 FB | 	rdlong	local01, fp
0da94     08 4E 85 F1 | 	sub	fp, #8
0da98     1E 26 0E F2 | 	cmp	local01, #30 wz
0da9c     A7 FA 01 AB |  if_e	rdlong	result1, fp
0daa0     1F FA 05 A4 |  if_e	bitl	result1, #31
0daa4     A7 FA 61 AC |  if_e	wrlong	result1, fp
0daa8     08 4E 05 51 |  if_ne	add	fp, #8
0daac     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0dab0     08 4E 85 51 |  if_ne	sub	fp, #8
0dab4     A7 50 68 5C |  if_ne	wrlong	#40, fp
0dab8                 | LR__1120
0dab8     A7 12 02 F6 | 	mov	arg01, fp
0dabc     E0 FC BF FD | 	call	#_push
0dac0     A7 F0 03 F6 | 	mov	ptra, fp
0dac4     B2 00 A0 FD | 	call	#popregs_
0dac8                 | _do_abs_ret
0dac8     2D 00 64 FD | 	ret
0dacc                 | 
0dacc                 | ' 
0dacc                 | ' '-------------------- acos
0dacc                 | ' 
0dacc                 | ' sub do_acos
0dacc                 | _do_acos
0dacc     01 4A 05 F6 | 	mov	COUNT_, #1
0dad0     A8 00 A0 FD | 	call	#pushregs_
0dad4     10 F0 07 F1 | 	add	ptra, #16
0dad8     4A 00 00 FF 
0dadc     80 E4 05 F1 | 	add	objptr, ##38016
0dae0     F2 26 02 FB | 	rdlong	local01, objptr
0dae4     13 17 02 F6 | 	mov	arg03, local01
0dae8     01 16 66 F0 | 	shl	arg03, #1
0daec     13 17 02 F1 | 	add	arg03, local01
0daf0     02 16 66 F0 | 	shl	arg03, #2
0daf4     03 00 00 FF 
0daf8     04 E4 85 F1 | 	sub	objptr, ##1540
0dafc     F2 16 02 F1 | 	add	arg03, objptr
0db00     0B 17 02 FB | 	rdlong	arg03, arg03
0db04     0C 4E 05 F1 | 	add	fp, #12
0db08     A7 16 62 FC | 	wrlong	arg03, fp
0db0c                 | ' 
0db0c                 | ' numpar=compiledline(lineptr_e).result.uresult
0db0c                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0db0c     0C 4E 85 F1 | 	sub	fp, #12
0db10     02 16 16 F2 | 	cmp	arg03, #2 wc
0db14     47 00 00 FF 
0db18     7C E4 85 F1 | 	sub	objptr, ##36476
0db1c     0C 4E 05 C1 |  if_b	add	fp, #12
0db20     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0db24     0C 4E 85 C1 |  if_b	sub	fp, #12
0db28     40 00 90 4D |  if_c_and_nz	jmp	#LR__1130
0db2c     00 12 06 F6 | 	mov	arg01, #0
0db30     0C F2 B1 FD | 	call	#__system___getiolock_0614
0db34     FD 12 02 F6 | 	mov	arg01, result1
0db38     60 95 B1 FD | 	call	#__system___lockmem
0db3c     B9 01 00 FF 
0db40     63 15 06 F6 | 	mov	arg02, ##@LR__5894
0db44     00 12 06 F6 | 	mov	arg01, #0
0db48     00 16 06 F6 | 	mov	arg03, #0
0db4c     44 A2 B1 FD | 	call	#__system___basic_print_string
0db50     00 12 06 F6 | 	mov	arg01, #0
0db54     E8 F1 B1 FD | 	call	#__system___getiolock_0614
0db58     FD 00 68 FC | 	wrlong	#0, result1
0db5c     27 12 06 F6 | 	mov	arg01, #39
0db60     00 14 06 F6 | 	mov	arg02, #0
0db64     84 5A B1 FD | 	call	#_printerror
0db68     64 00 90 FD | 	jmp	#LR__1131
0db6c                 | LR__1130
0db6c     98 FB BF FD | 	call	#_pop
0db70     FF 26 02 F6 | 	mov	local01, result3
0db74     A7 FA 61 FC | 	wrlong	result1, fp
0db78     04 4E 05 F1 | 	add	fp, #4
0db7c     A7 FC 61 FC | 	wrlong	result2, fp
0db80     04 4E 05 F1 | 	add	fp, #4
0db84     A7 26 62 FC | 	wrlong	local01, fp
0db88     08 4E 85 F1 | 	sub	fp, #8
0db8c     A7 12 02 F6 | 	mov	arg01, fp
0db90     14 FE BF FD | 	call	#_converttofloat
0db94     FD 12 02 F6 | 	mov	arg01, result1
0db98     BC CE B1 FD | 	call	#__system____builtin_acosf
0db9c     FD 12 02 F6 | 	mov	arg01, result1
0dba0     52 00 00 FF 
0dba4     AC E4 05 F1 | 	add	objptr, ##42156
0dba8     F2 14 02 FB | 	rdlong	arg02, objptr
0dbac     52 00 00 FF 
0dbb0     AC E4 85 F1 | 	sub	objptr, ##42156
0dbb4     60 C3 B1 FD | 	call	#__system___float_mul
0dbb8     A7 FA 61 FC | 	wrlong	result1, fp
0dbbc     08 4E 05 F1 | 	add	fp, #8
0dbc0     A7 3C 68 FC | 	wrlong	#30, fp
0dbc4     08 4E 85 F1 | 	sub	fp, #8
0dbc8     A7 12 02 F6 | 	mov	arg01, fp
0dbcc     D0 FB BF FD | 	call	#_push
0dbd0                 | LR__1131
0dbd0     A7 F0 03 F6 | 	mov	ptra, fp
0dbd4     B2 00 A0 FD | 	call	#popregs_
0dbd8                 | _do_acos_ret
0dbd8     2D 00 64 FD | 	ret
0dbdc                 | 
0dbdc                 | ' 
0dbdc                 | ' '-------------------- asc
0dbdc                 | ' 
0dbdc                 | ' sub do_asc
0dbdc                 | _do_asc
0dbdc     01 4A 05 F6 | 	mov	COUNT_, #1
0dbe0     A8 00 A0 FD | 	call	#pushregs_
0dbe4     14 F0 07 F1 | 	add	ptra, #20
0dbe8     4A 00 00 FF 
0dbec     80 E4 05 F1 | 	add	objptr, ##38016
0dbf0     F2 26 02 FB | 	rdlong	local01, objptr
0dbf4     13 17 02 F6 | 	mov	arg03, local01
0dbf8     01 16 66 F0 | 	shl	arg03, #1
0dbfc     13 17 02 F1 | 	add	arg03, local01
0dc00     02 16 66 F0 | 	shl	arg03, #2
0dc04     03 00 00 FF 
0dc08     04 E4 85 F1 | 	sub	objptr, ##1540
0dc0c     F2 16 02 F1 | 	add	arg03, objptr
0dc10     0B 17 02 FB | 	rdlong	arg03, arg03
0dc14     0C 4E 05 F1 | 	add	fp, #12
0dc18     A7 16 62 FC | 	wrlong	arg03, fp
0dc1c                 | ' 
0dc1c                 | ' numpar=compiledline(lineptr_e).result.uresult
0dc1c                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0dc1c     0C 4E 85 F1 | 	sub	fp, #12
0dc20     02 16 16 F2 | 	cmp	arg03, #2 wc
0dc24     47 00 00 FF 
0dc28     7C E4 85 F1 | 	sub	objptr, ##36476
0dc2c     0C 4E 05 C1 |  if_b	add	fp, #12
0dc30     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dc34     0C 4E 85 C1 |  if_b	sub	fp, #12
0dc38     40 00 90 4D |  if_c_and_nz	jmp	#LR__1140
0dc3c     00 12 06 F6 | 	mov	arg01, #0
0dc40     FC F0 B1 FD | 	call	#__system___getiolock_0614
0dc44     FD 12 02 F6 | 	mov	arg01, result1
0dc48     50 94 B1 FD | 	call	#__system___lockmem
0dc4c     B9 01 00 FF 
0dc50     6A 15 06 F6 | 	mov	arg02, ##@LR__5895
0dc54     00 12 06 F6 | 	mov	arg01, #0
0dc58     00 16 06 F6 | 	mov	arg03, #0
0dc5c     34 A1 B1 FD | 	call	#__system___basic_print_string
0dc60     00 12 06 F6 | 	mov	arg01, #0
0dc64     D8 F0 B1 FD | 	call	#__system___getiolock_0614
0dc68     FD 00 68 FC | 	wrlong	#0, result1
0dc6c     27 12 06 F6 | 	mov	arg01, #39
0dc70     00 14 06 F6 | 	mov	arg02, #0
0dc74     74 59 B1 FD | 	call	#_printerror
0dc78     B4 00 90 FD | 	jmp	#LR__1143
0dc7c                 | LR__1140
0dc7c     88 FA BF FD | 	call	#_pop
0dc80     FF 16 02 F6 | 	mov	arg03, result3
0dc84     A7 FA 61 FC | 	wrlong	result1, fp
0dc88     04 4E 05 F1 | 	add	fp, #4
0dc8c     A7 FC 61 FC | 	wrlong	result2, fp
0dc90     04 4E 05 F1 | 	add	fp, #4
0dc94     A7 16 62 FC | 	wrlong	arg03, fp
0dc98                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0dc98     08 4E 85 F1 | 	sub	fp, #8
0dc9c     2B 16 0E F2 | 	cmp	arg03, #43 wz
0dca0     18 00 90 5D |  if_ne	jmp	#LR__1141
0dca4     A7 12 02 FB | 	rdlong	arg01, fp
0dca8     D4 FB BF FD | 	call	#_convertstring
0dcac     A7 FA 61 FC | 	wrlong	result1, fp
0dcb0     08 4E 05 F1 | 	add	fp, #8
0dcb4     A7 3E 68 FC | 	wrlong	#31, fp
0dcb8     08 4E 85 F1 | 	sub	fp, #8
0dcbc                 | LR__1141
0dcbc                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0dcbc     08 4E 05 F1 | 	add	fp, #8
0dcc0     A7 16 02 FB | 	rdlong	arg03, fp
0dcc4     08 4E 85 F1 | 	sub	fp, #8
0dcc8     1F 16 0E F2 | 	cmp	arg03, #31 wz
0dccc     40 00 90 AD |  if_e	jmp	#LR__1142
0dcd0     00 12 06 F6 | 	mov	arg01, #0
0dcd4     68 F0 B1 FD | 	call	#__system___getiolock_0614
0dcd8     FD 12 02 F6 | 	mov	arg01, result1
0dcdc     BC 93 B1 FD | 	call	#__system___lockmem
0dce0     B9 01 00 FF 
0dce4     70 15 06 F6 | 	mov	arg02, ##@LR__5896
0dce8     00 12 06 F6 | 	mov	arg01, #0
0dcec     00 16 06 F6 | 	mov	arg03, #0
0dcf0     A0 A0 B1 FD | 	call	#__system___basic_print_string
0dcf4     00 12 06 F6 | 	mov	arg01, #0
0dcf8     44 F0 B1 FD | 	call	#__system___getiolock_0614
0dcfc     FD 00 68 FC | 	wrlong	#0, result1
0dd00     0F 12 06 F6 | 	mov	arg01, #15
0dd04     00 14 06 F6 | 	mov	arg02, #0
0dd08     E0 58 B1 FD | 	call	#_printerror
0dd0c     20 00 90 FD | 	jmp	#LR__1143
0dd10                 | LR__1142
0dd10     A7 26 02 FB | 	rdlong	local01, fp
0dd14     13 27 C2 FA | 	rdbyte	local01, local01
0dd18     A7 26 62 FC | 	wrlong	local01, fp
0dd1c     08 4E 05 F1 | 	add	fp, #8
0dd20     A7 38 68 FC | 	wrlong	#28, fp
0dd24     08 4E 85 F1 | 	sub	fp, #8
0dd28     A7 12 02 F6 | 	mov	arg01, fp
0dd2c     70 FA BF FD | 	call	#_push
0dd30                 | LR__1143
0dd30     A7 F0 03 F6 | 	mov	ptra, fp
0dd34     B2 00 A0 FD | 	call	#popregs_
0dd38                 | _do_asc_ret
0dd38     2D 00 64 FD | 	ret
0dd3c                 | 
0dd3c                 | ' 
0dd3c                 | ' '-------------------- asin
0dd3c                 | ' 
0dd3c                 | ' sub do_asin
0dd3c                 | _do_asin
0dd3c     01 4A 05 F6 | 	mov	COUNT_, #1
0dd40     A8 00 A0 FD | 	call	#pushregs_
0dd44     10 F0 07 F1 | 	add	ptra, #16
0dd48     4A 00 00 FF 
0dd4c     80 E4 05 F1 | 	add	objptr, ##38016
0dd50     F2 26 02 FB | 	rdlong	local01, objptr
0dd54     13 17 02 F6 | 	mov	arg03, local01
0dd58     01 16 66 F0 | 	shl	arg03, #1
0dd5c     13 17 02 F1 | 	add	arg03, local01
0dd60     02 16 66 F0 | 	shl	arg03, #2
0dd64     03 00 00 FF 
0dd68     04 E4 85 F1 | 	sub	objptr, ##1540
0dd6c     F2 16 02 F1 | 	add	arg03, objptr
0dd70     0B 17 02 FB | 	rdlong	arg03, arg03
0dd74     0C 4E 05 F1 | 	add	fp, #12
0dd78     A7 16 62 FC | 	wrlong	arg03, fp
0dd7c                 | ' 
0dd7c                 | ' numpar=compiledline(lineptr_e).result.uresult
0dd7c                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0dd7c     0C 4E 85 F1 | 	sub	fp, #12
0dd80     02 16 16 F2 | 	cmp	arg03, #2 wc
0dd84     47 00 00 FF 
0dd88     7C E4 85 F1 | 	sub	objptr, ##36476
0dd8c     0C 4E 05 C1 |  if_b	add	fp, #12
0dd90     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dd94     0C 4E 85 C1 |  if_b	sub	fp, #12
0dd98     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0dd9c     00 12 06 F6 | 	mov	arg01, #0
0dda0     9C EF B1 FD | 	call	#__system___getiolock_0614
0dda4     FD 12 02 F6 | 	mov	arg01, result1
0dda8     F0 92 B1 FD | 	call	#__system___lockmem
0ddac     B9 01 00 FF 
0ddb0     76 15 06 F6 | 	mov	arg02, ##@LR__5897
0ddb4     00 12 06 F6 | 	mov	arg01, #0
0ddb8     00 16 06 F6 | 	mov	arg03, #0
0ddbc     D4 9F B1 FD | 	call	#__system___basic_print_string
0ddc0     00 12 06 F6 | 	mov	arg01, #0
0ddc4     78 EF B1 FD | 	call	#__system___getiolock_0614
0ddc8     FD 00 68 FC | 	wrlong	#0, result1
0ddcc     27 12 06 F6 | 	mov	arg01, #39
0ddd0     00 14 06 F6 | 	mov	arg02, #0
0ddd4     14 58 B1 FD | 	call	#_printerror
0ddd8     64 00 90 FD | 	jmp	#LR__1151
0dddc                 | LR__1150
0dddc     28 F9 BF FD | 	call	#_pop
0dde0     FF 26 02 F6 | 	mov	local01, result3
0dde4     A7 FA 61 FC | 	wrlong	result1, fp
0dde8     04 4E 05 F1 | 	add	fp, #4
0ddec     A7 FC 61 FC | 	wrlong	result2, fp
0ddf0     04 4E 05 F1 | 	add	fp, #4
0ddf4     A7 26 62 FC | 	wrlong	local01, fp
0ddf8     08 4E 85 F1 | 	sub	fp, #8
0ddfc     A7 12 02 F6 | 	mov	arg01, fp
0de00     A4 FB BF FD | 	call	#_converttofloat
0de04     FD 12 02 F6 | 	mov	arg01, result1
0de08     00 CC B1 FD | 	call	#__system____builtin_asinf
0de0c     FD 12 02 F6 | 	mov	arg01, result1
0de10     52 00 00 FF 
0de14     AC E4 05 F1 | 	add	objptr, ##42156
0de18     F2 14 02 FB | 	rdlong	arg02, objptr
0de1c     52 00 00 FF 
0de20     AC E4 85 F1 | 	sub	objptr, ##42156
0de24     F0 C0 B1 FD | 	call	#__system___float_mul
0de28     A7 FA 61 FC | 	wrlong	result1, fp
0de2c     08 4E 05 F1 | 	add	fp, #8
0de30     A7 3C 68 FC | 	wrlong	#30, fp
0de34     08 4E 85 F1 | 	sub	fp, #8
0de38     A7 12 02 F6 | 	mov	arg01, fp
0de3c     60 F9 BF FD | 	call	#_push
0de40                 | LR__1151
0de40     A7 F0 03 F6 | 	mov	ptra, fp
0de44     B2 00 A0 FD | 	call	#popregs_
0de48                 | _do_asin_ret
0de48     2D 00 64 FD | 	ret
0de4c                 | 
0de4c                 | ' 
0de4c                 | ' '-------------------- atn
0de4c                 | ' 
0de4c                 | ' sub do_atn
0de4c                 | _do_atn
0de4c     01 4A 05 F6 | 	mov	COUNT_, #1
0de50     A8 00 A0 FD | 	call	#pushregs_
0de54     10 F0 07 F1 | 	add	ptra, #16
0de58     4A 00 00 FF 
0de5c     80 E4 05 F1 | 	add	objptr, ##38016
0de60     F2 26 02 FB | 	rdlong	local01, objptr
0de64     13 17 02 F6 | 	mov	arg03, local01
0de68     01 16 66 F0 | 	shl	arg03, #1
0de6c     13 17 02 F1 | 	add	arg03, local01
0de70     02 16 66 F0 | 	shl	arg03, #2
0de74     03 00 00 FF 
0de78     04 E4 85 F1 | 	sub	objptr, ##1540
0de7c     F2 16 02 F1 | 	add	arg03, objptr
0de80     0B 17 02 FB | 	rdlong	arg03, arg03
0de84     0C 4E 05 F1 | 	add	fp, #12
0de88     A7 16 62 FC | 	wrlong	arg03, fp
0de8c                 | ' 
0de8c                 | ' numpar=compiledline(lineptr_e).result.uresult
0de8c                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0de8c     0C 4E 85 F1 | 	sub	fp, #12
0de90     02 16 16 F2 | 	cmp	arg03, #2 wc
0de94     47 00 00 FF 
0de98     7C E4 85 F1 | 	sub	objptr, ##36476
0de9c     0C 4E 05 C1 |  if_b	add	fp, #12
0dea0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dea4     0C 4E 85 C1 |  if_b	sub	fp, #12
0dea8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1160
0deac     00 12 06 F6 | 	mov	arg01, #0
0deb0     8C EE B1 FD | 	call	#__system___getiolock_0614
0deb4     FD 12 02 F6 | 	mov	arg01, result1
0deb8     E0 91 B1 FD | 	call	#__system___lockmem
0debc     B9 01 00 FF 
0dec0     7D 15 06 F6 | 	mov	arg02, ##@LR__5898
0dec4     00 12 06 F6 | 	mov	arg01, #0
0dec8     00 16 06 F6 | 	mov	arg03, #0
0decc     C4 9E B1 FD | 	call	#__system___basic_print_string
0ded0     00 12 06 F6 | 	mov	arg01, #0
0ded4     68 EE B1 FD | 	call	#__system___getiolock_0614
0ded8     FD 00 68 FC | 	wrlong	#0, result1
0dedc     27 12 06 F6 | 	mov	arg01, #39
0dee0     00 14 06 F6 | 	mov	arg02, #0
0dee4     04 57 B1 FD | 	call	#_printerror
0dee8     6C 00 90 FD | 	jmp	#LR__1161
0deec                 | LR__1160
0deec     18 F8 BF FD | 	call	#_pop
0def0     FF 26 02 F6 | 	mov	local01, result3
0def4     A7 FA 61 FC | 	wrlong	result1, fp
0def8     04 4E 05 F1 | 	add	fp, #4
0defc     A7 FC 61 FC | 	wrlong	result2, fp
0df00     04 4E 05 F1 | 	add	fp, #4
0df04     A7 26 62 FC | 	wrlong	local01, fp
0df08     08 4E 85 F1 | 	sub	fp, #8
0df0c     A7 12 02 F6 | 	mov	arg01, fp
0df10     94 FA BF FD | 	call	#_converttofloat
0df14     FD 12 02 F6 | 	mov	arg01, result1
0df18     00 C0 1F FF 
0df1c     00 14 06 F6 | 	mov	arg02, ##1065353216
0df20     80 CB B1 FD | 	call	#__system____builtin_atan2f
0df24     FD 12 02 F6 | 	mov	arg01, result1
0df28     52 00 00 FF 
0df2c     AC E4 05 F1 | 	add	objptr, ##42156
0df30     F2 14 02 FB | 	rdlong	arg02, objptr
0df34     52 00 00 FF 
0df38     AC E4 85 F1 | 	sub	objptr, ##42156
0df3c     D8 BF B1 FD | 	call	#__system___float_mul
0df40     A7 FA 61 FC | 	wrlong	result1, fp
0df44     08 4E 05 F1 | 	add	fp, #8
0df48     A7 3C 68 FC | 	wrlong	#30, fp
0df4c     08 4E 85 F1 | 	sub	fp, #8
0df50     A7 12 02 F6 | 	mov	arg01, fp
0df54     48 F8 BF FD | 	call	#_push
0df58                 | LR__1161
0df58     A7 F0 03 F6 | 	mov	ptra, fp
0df5c     B2 00 A0 FD | 	call	#popregs_
0df60                 | _do_atn_ret
0df60     2D 00 64 FD | 	ret
0df64                 | 
0df64                 | ' 
0df64                 | ' '-------------------- beep
0df64                 | ' 
0df64                 | ' sub do_beep
0df64                 | _do_beep
0df64     02 4A 05 F6 | 	mov	COUNT_, #2
0df68     A8 00 A0 FD | 	call	#pushregs_
0df6c     20 F0 07 F1 | 	add	ptra, #32
0df70     94 F7 BF FD | 	call	#_pop
0df74     FD 26 02 F6 | 	mov	local01, result1
0df78     FE 1C 02 F6 | 	mov	arg06, result2
0df7c     FF 28 02 F6 | 	mov	local02, result3
0df80     0C 4E 05 F1 | 	add	fp, #12
0df84     A7 26 62 FC | 	wrlong	local01, fp
0df88     04 4E 05 F1 | 	add	fp, #4
0df8c     A7 1C 62 FC | 	wrlong	arg06, fp
0df90     04 4E 05 F1 | 	add	fp, #4
0df94     A7 28 62 FC | 	wrlong	local02, fp
0df98     14 4E 85 F1 | 	sub	fp, #20
0df9c     68 F7 BF FD | 	call	#_pop
0dfa0     A7 FA 61 FC | 	wrlong	result1, fp
0dfa4     04 4E 05 F1 | 	add	fp, #4
0dfa8     A7 FC 61 FC | 	wrlong	result2, fp
0dfac     04 4E 05 F1 | 	add	fp, #4
0dfb0     A7 FE 61 FC | 	wrlong	result3, fp
0dfb4                 | ' 
0dfb4                 | ' t2=pop()
0dfb4                 | ' t1=pop()
0dfb4                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0dfb4     08 4E 85 F1 | 	sub	fp, #8
0dfb8     1C FE 0D F2 | 	cmp	result3, #28 wz
0dfbc     08 4E 05 51 |  if_ne	add	fp, #8
0dfc0     A7 28 02 5B |  if_ne	rdlong	local02, fp
0dfc4     08 4E 85 51 |  if_ne	sub	fp, #8
0dfc8     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0dfcc     A7 26 02 AB |  if_e	rdlong	local01, fp
0dfd0     18 4E 05 A1 |  if_e	add	fp, #24
0dfd4     A7 26 62 AC |  if_e	wrlong	local01, fp
0dfd8     18 4E 85 A1 |  if_e	sub	fp, #24
0dfdc     14 00 90 AD |  if_e	jmp	#LR__1170
0dfe0     A7 12 02 F6 | 	mov	arg01, fp
0dfe4     04 F9 BF FD | 	call	#_converttoint
0dfe8     18 4E 05 F1 | 	add	fp, #24
0dfec     A7 FA 61 FC | 	wrlong	result1, fp
0dff0     18 4E 85 F1 | 	sub	fp, #24
0dff4                 | LR__1170
0dff4     1C 4E 05 F1 | 	add	fp, #28
0dff8     A7 FE 48 FC | 	wrbyte	#127, fp
0dffc     01 4E 05 F1 | 	add	fp, #1
0e000     A7 00 49 FC | 	wrbyte	#128, fp
0e004     01 4E 85 F1 | 	sub	fp, #1
0e008     A7 14 02 F6 | 	mov	arg02, fp
0e00c     04 4E 85 F1 | 	sub	fp, #4
0e010     A7 16 02 FB | 	rdlong	arg03, fp
0e014     18 4E 85 F1 | 	sub	fp, #24
0e018     01 16 66 F0 | 	shl	arg03, #1
0e01c     07 12 06 F6 | 	mov	arg01, #7
0e020     0E 18 C6 F9 | 	decod	arg04, #14
0e024     02 1A 06 F6 | 	mov	arg05, #2
0e028     00 1C 06 F6 | 	mov	arg06, #0
0e02c     0B 00 00 FF 
0e030     CC E4 05 F1 | 	add	objptr, ##5836
0e034     50 8C B1 FD | 	call	#_audio096_spin2_play8
0e038     0B 00 00 FF 
0e03c     CC E4 85 F1 | 	sub	objptr, ##5836
0e040     0C 4E 05 F1 | 	add	fp, #12
0e044     A7 12 02 F6 | 	mov	arg01, fp
0e048     0C 4E 85 F1 | 	sub	fp, #12
0e04c     50 F7 BF FD | 	call	#_push
0e050     8C EA B0 FD | 	call	#_do_waitms
0e054     07 12 06 F6 | 	mov	arg01, #7
0e058     0B 00 00 FF 
0e05c     CC E4 05 F1 | 	add	objptr, ##5836
0e060     C8 8C B1 FD | 	call	#_audio096_spin2_stop
0e064     0B 00 00 FF 
0e068     CC E4 85 F1 | 	sub	objptr, ##5836
0e06c     A7 F0 03 F6 | 	mov	ptra, fp
0e070     B2 00 A0 FD | 	call	#popregs_
0e074                 | _do_beep_ret
0e074     2D 00 64 FD | 	ret
0e078                 | 
0e078                 | ' 
0e078                 | ' '-------------------- blit
0e078                 | ' 
0e078                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0e078                 | ' sub do_blit
0e078                 | _do_blit
0e078     02 4A 05 F6 | 	mov	COUNT_, #2
0e07c     A8 00 A0 FD | 	call	#pushregs_
0e080     3C F0 07 F1 | 	add	ptra, #60
0e084     4A 00 00 FF 
0e088     80 E4 05 F1 | 	add	objptr, ##38016
0e08c     F2 26 02 FB | 	rdlong	local01, objptr
0e090     13 25 02 F6 | 	mov	arg10, local01
0e094     01 24 66 F0 | 	shl	arg10, #1
0e098     13 25 02 F1 | 	add	arg10, local01
0e09c     02 24 66 F0 | 	shl	arg10, #2
0e0a0     03 00 00 FF 
0e0a4     04 E4 85 F1 | 	sub	objptr, ##1540
0e0a8     F2 24 02 F1 | 	add	arg10, objptr
0e0ac     12 25 02 FB | 	rdlong	arg10, arg10
0e0b0     38 4E 05 F1 | 	add	fp, #56
0e0b4     A7 24 62 FC | 	wrlong	arg10, fp
0e0b8                 | ' 
0e0b8                 | ' numpar=compiledline(lineptr_e).result.uresult
0e0b8                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0e0b8     38 4E 85 F1 | 	sub	fp, #56
0e0bc     0A 24 0E F2 | 	cmp	arg10, #10 wz
0e0c0     47 00 00 FF 
0e0c4     7C E4 85 F1 | 	sub	objptr, ##36476
0e0c8     38 4E 05 51 |  if_ne	add	fp, #56
0e0cc     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e0d0     38 4E 85 51 |  if_ne	sub	fp, #56
0e0d4     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0e0d8     50 00 90 AD |  if_e	jmp	#LR__1180
0e0dc     00 12 06 F6 | 	mov	arg01, #0
0e0e0     5C EC B1 FD | 	call	#__system___getiolock_0614
0e0e4     FD 12 02 F6 | 	mov	arg01, result1
0e0e8     B0 8F B1 FD | 	call	#__system___lockmem
0e0ec     B9 01 00 FF 
0e0f0     83 15 06 F6 | 	mov	arg02, ##@LR__5899
0e0f4     00 12 06 F6 | 	mov	arg01, #0
0e0f8     00 16 06 F6 | 	mov	arg03, #0
0e0fc     94 9C B1 FD | 	call	#__system___basic_print_string
0e100     00 12 06 F6 | 	mov	arg01, #0
0e104     38 EC B1 FD | 	call	#__system___getiolock_0614
0e108     FD 00 68 FC | 	wrlong	#0, result1
0e10c     50 00 00 FF 
0e110     F0 E4 05 F1 | 	add	objptr, ##41200
0e114     F2 14 02 FB | 	rdlong	arg02, objptr
0e118     50 00 00 FF 
0e11c     F0 E4 85 F1 | 	sub	objptr, ##41200
0e120     27 12 06 F6 | 	mov	arg01, #39
0e124     C4 54 B1 FD | 	call	#_printerror
0e128     44 01 90 FD | 	jmp	#LR__1185
0e12c                 | LR__1180
0e12c                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0e12c     38 4E 05 F1 | 	add	fp, #56
0e130     A7 28 02 FB | 	rdlong	local02, fp
0e134     01 28 86 F1 | 	sub	local02, #1
0e138     04 4E 85 F1 | 	sub	fp, #4
0e13c     A7 28 62 FC | 	wrlong	local02, fp
0e140     34 4E 85 F1 | 	sub	fp, #52
0e144                 | LR__1181
0e144     38 4E 05 F1 | 	add	fp, #56
0e148     A7 26 02 FB | 	rdlong	local01, fp
0e14c     01 26 86 F1 | 	sub	local01, #1
0e150     04 4E 85 F1 | 	sub	fp, #4
0e154     A7 24 02 FB | 	rdlong	arg10, fp
0e158     34 4E 85 F1 | 	sub	fp, #52
0e15c     13 25 1A F2 | 	cmp	arg10, local01 wcz
0e160     54 00 90 1D |  if_a	jmp	#LR__1182
0e164     A0 F5 BF FD | 	call	#_pop
0e168     A7 FA 61 FC | 	wrlong	result1, fp
0e16c     04 4E 05 F1 | 	add	fp, #4
0e170     A7 FC 61 FC | 	wrlong	result2, fp
0e174     04 4E 05 F1 | 	add	fp, #4
0e178     A7 FE 61 FC | 	wrlong	result3, fp
0e17c     2C 4E 05 F1 | 	add	fp, #44
0e180     A7 28 02 FB | 	rdlong	local02, fp
0e184     02 28 66 F0 | 	shl	local02, #2
0e188     28 4E 85 F1 | 	sub	fp, #40
0e18c     A7 28 02 F1 | 	add	local02, fp
0e190     0C 4E 85 F1 | 	sub	fp, #12
0e194     A7 12 02 F6 | 	mov	arg01, fp
0e198     50 F7 BF FD | 	call	#_converttoint
0e19c     14 FB 61 FC | 	wrlong	result1, local02
0e1a0     34 4E 05 F1 | 	add	fp, #52
0e1a4     A7 28 02 FB | 	rdlong	local02, fp
0e1a8     01 28 86 F1 | 	sub	local02, #1
0e1ac     A7 28 62 FC | 	wrlong	local02, fp
0e1b0     34 4E 85 F1 | 	sub	fp, #52
0e1b4     8C FF 9F FD | 	jmp	#LR__1181
0e1b8                 | LR__1182
0e1b8                 | ' if numpar=10 then 
0e1b8     38 4E 05 F1 | 	add	fp, #56
0e1bc     A7 28 02 FB | 	rdlong	local02, fp
0e1c0     38 4E 85 F1 | 	sub	fp, #56
0e1c4     0A 28 0E F2 | 	cmp	local02, #10 wz
0e1c8     5C 00 90 5D |  if_ne	jmp	#LR__1183
0e1cc     0C 4E 05 F1 | 	add	fp, #12
0e1d0     A7 12 02 FB | 	rdlong	arg01, fp
0e1d4     04 4E 05 F1 | 	add	fp, #4
0e1d8     A7 14 02 FB | 	rdlong	arg02, fp
0e1dc     04 4E 05 F1 | 	add	fp, #4
0e1e0     A7 16 02 FB | 	rdlong	arg03, fp
0e1e4     04 4E 05 F1 | 	add	fp, #4
0e1e8     A7 18 02 FB | 	rdlong	arg04, fp
0e1ec     04 4E 05 F1 | 	add	fp, #4
0e1f0     A7 1A 02 FB | 	rdlong	arg05, fp
0e1f4     04 4E 05 F1 | 	add	fp, #4
0e1f8     A7 1C 02 FB | 	rdlong	arg06, fp
0e1fc     04 4E 05 F1 | 	add	fp, #4
0e200     A7 1E 02 FB | 	rdlong	arg07, fp
0e204     04 4E 05 F1 | 	add	fp, #4
0e208     A7 20 02 FB | 	rdlong	arg08, fp
0e20c     04 4E 05 F1 | 	add	fp, #4
0e210     A7 22 02 FB | 	rdlong	arg09, fp
0e214     04 4E 05 F1 | 	add	fp, #4
0e218     A7 24 02 FB | 	rdlong	arg10, fp
0e21c     30 4E 85 F1 | 	sub	fp, #48
0e220     F4 7B B1 FD | 	call	#_hg010b_spin2_blit
0e224     48 00 90 FD | 	jmp	#LR__1184
0e228                 | LR__1183
0e228     F2 1E 02 FB | 	rdlong	arg07, objptr
0e22c     0C 4E 05 F1 | 	add	fp, #12
0e230     A7 14 02 FB | 	rdlong	arg02, fp
0e234     04 4E 05 F1 | 	add	fp, #4
0e238     A7 16 02 FB | 	rdlong	arg03, fp
0e23c     04 4E 05 F1 | 	add	fp, #4
0e240     A7 18 02 FB | 	rdlong	arg04, fp
0e244     04 4E 05 F1 | 	add	fp, #4
0e248     A7 1A 02 FB | 	rdlong	arg05, fp
0e24c     04 4E 05 F1 | 	add	fp, #4
0e250     A7 20 02 FB | 	rdlong	arg08, fp
0e254     04 4E 05 F1 | 	add	fp, #4
0e258     A7 22 02 FB | 	rdlong	arg09, fp
0e25c     20 4E 85 F1 | 	sub	fp, #32
0e260     0F 13 02 F6 | 	mov	arg01, arg07
0e264     0A 1C C6 F9 | 	decod	arg06, #10
0e268     0A 24 C6 F9 | 	decod	arg10, #10
0e26c     A8 7B B1 FD | 	call	#_hg010b_spin2_blit
0e270                 | LR__1184
0e270                 | LR__1185
0e270     A7 F0 03 F6 | 	mov	ptra, fp
0e274     B2 00 A0 FD | 	call	#popregs_
0e278                 | _do_blit_ret
0e278     2D 00 64 FD | 	ret
0e27c                 | 
0e27c                 | ' 
0e27c                 | ' 
0e27c                 | ' '-------------------- bin$
0e27c                 | ' 
0e27c                 | ' sub do_bin
0e27c                 | _do_bin
0e27c     01 4A 05 F6 | 	mov	COUNT_, #1
0e280     A8 00 A0 FD | 	call	#pushregs_
0e284     18 F0 07 F1 | 	add	ptra, #24
0e288     4A 00 00 FF 
0e28c     80 E4 05 F1 | 	add	objptr, ##38016
0e290     F2 26 02 FB | 	rdlong	local01, objptr
0e294     13 17 02 F6 | 	mov	arg03, local01
0e298     01 16 66 F0 | 	shl	arg03, #1
0e29c     13 17 02 F1 | 	add	arg03, local01
0e2a0     02 16 66 F0 | 	shl	arg03, #2
0e2a4     03 00 00 FF 
0e2a8     04 E4 85 F1 | 	sub	objptr, ##1540
0e2ac     F2 16 02 F1 | 	add	arg03, objptr
0e2b0     0B 17 02 FB | 	rdlong	arg03, arg03
0e2b4     0C 4E 05 F1 | 	add	fp, #12
0e2b8     A7 16 62 FC | 	wrlong	arg03, fp
0e2bc                 | ' 
0e2bc                 | ' numpar=compiledline(lineptr_e).result.uresult
0e2bc                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e2bc     0C 4E 85 F1 | 	sub	fp, #12
0e2c0     03 16 16 F2 | 	cmp	arg03, #3 wc
0e2c4     47 00 00 FF 
0e2c8     7C E4 85 F1 | 	sub	objptr, ##36476
0e2cc     0C 4E 05 C1 |  if_b	add	fp, #12
0e2d0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0e2d4     0C 4E 85 C1 |  if_b	sub	fp, #12
0e2d8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1190
0e2dc     00 12 06 F6 | 	mov	arg01, #0
0e2e0     5C EA B1 FD | 	call	#__system___getiolock_0614
0e2e4     FD 12 02 F6 | 	mov	arg01, result1
0e2e8     B0 8D B1 FD | 	call	#__system___lockmem
0e2ec     B9 01 00 FF 
0e2f0     8A 15 06 F6 | 	mov	arg02, ##@LR__5900
0e2f4     00 12 06 F6 | 	mov	arg01, #0
0e2f8     00 16 06 F6 | 	mov	arg03, #0
0e2fc     94 9A B1 FD | 	call	#__system___basic_print_string
0e300     00 12 06 F6 | 	mov	arg01, #0
0e304     38 EA B1 FD | 	call	#__system___getiolock_0614
0e308     FD 00 68 FC | 	wrlong	#0, result1
0e30c     27 12 06 F6 | 	mov	arg01, #39
0e310     00 14 06 F6 | 	mov	arg02, #0
0e314     D4 52 B1 FD | 	call	#_printerror
0e318     B8 00 90 FD | 	jmp	#LR__1193
0e31c                 | LR__1190
0e31c                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e31c     0C 4E 05 F1 | 	add	fp, #12
0e320     A7 26 02 FB | 	rdlong	local01, fp
0e324     0C 4E 85 F1 | 	sub	fp, #12
0e328     02 26 0E F2 | 	cmp	local01, #2 wz
0e32c     38 00 90 5D |  if_ne	jmp	#LR__1191
0e330     D4 F3 BF FD | 	call	#_pop
0e334     FF 26 02 F6 | 	mov	local01, result3
0e338     A7 FA 61 FC | 	wrlong	result1, fp
0e33c     04 4E 05 F1 | 	add	fp, #4
0e340     A7 FC 61 FC | 	wrlong	result2, fp
0e344     04 4E 05 F1 | 	add	fp, #4
0e348     A7 26 62 FC | 	wrlong	local01, fp
0e34c     08 4E 85 F1 | 	sub	fp, #8
0e350     A7 12 02 F6 | 	mov	arg01, fp
0e354     94 F5 BF FD | 	call	#_converttoint
0e358     14 4E 05 F1 | 	add	fp, #20
0e35c     A7 FA 61 FC | 	wrlong	result1, fp
0e360     14 4E 85 F1 | 	sub	fp, #20
0e364     0C 00 90 FD | 	jmp	#LR__1192
0e368                 | LR__1191
0e368     14 4E 05 F1 | 	add	fp, #20
0e36c     A7 00 68 FC | 	wrlong	#0, fp
0e370     14 4E 85 F1 | 	sub	fp, #20
0e374                 | LR__1192
0e374     90 F3 BF FD | 	call	#_pop
0e378     FF 26 02 F6 | 	mov	local01, result3
0e37c     A7 FA 61 FC | 	wrlong	result1, fp
0e380     04 4E 05 F1 | 	add	fp, #4
0e384     A7 FC 61 FC | 	wrlong	result2, fp
0e388     04 4E 05 F1 | 	add	fp, #4
0e38c     A7 26 62 FC | 	wrlong	local01, fp
0e390     08 4E 85 F1 | 	sub	fp, #8
0e394     A7 12 02 F6 | 	mov	arg01, fp
0e398     50 F5 BF FD | 	call	#_converttoint
0e39c     10 4E 05 F1 | 	add	fp, #16
0e3a0     A7 FA 61 FC | 	wrlong	result1, fp
0e3a4     FD 12 02 F6 | 	mov	arg01, result1
0e3a8     04 4E 05 F1 | 	add	fp, #4
0e3ac     A7 14 02 FB | 	rdlong	arg02, fp
0e3b0     14 4E 85 F1 | 	sub	fp, #20
0e3b4     02 16 06 F6 | 	mov	arg03, #2
0e3b8     B4 AF B1 FD | 	call	#__system__Number_S
0e3bc     A7 FA 61 FC | 	wrlong	result1, fp
0e3c0     08 4E 05 F1 | 	add	fp, #8
0e3c4     A7 3E 68 FC | 	wrlong	#31, fp
0e3c8     08 4E 85 F1 | 	sub	fp, #8
0e3cc     A7 12 02 F6 | 	mov	arg01, fp
0e3d0     CC F3 BF FD | 	call	#_push
0e3d4                 | LR__1193
0e3d4     A7 F0 03 F6 | 	mov	ptra, fp
0e3d8     B2 00 A0 FD | 	call	#popregs_
0e3dc                 | _do_bin_ret
0e3dc     2D 00 64 FD | 	ret
0e3e0                 | 
0e3e0                 | ' 
0e3e0                 | ' '-------------------- box
0e3e0                 | ' 
0e3e0                 | ' sub do_box
0e3e0                 | _do_box
0e3e0     03 4A 05 F6 | 	mov	COUNT_, #3
0e3e4     A8 00 A0 FD | 	call	#pushregs_
0e3e8     30 F0 07 F1 | 	add	ptra, #48
0e3ec     18 F3 BF FD | 	call	#_pop
0e3f0     FD 1A 02 F6 | 	mov	arg05, result1
0e3f4     FE 18 02 F6 | 	mov	arg04, result2
0e3f8     FF 16 02 F6 | 	mov	arg03, result3
0e3fc     24 4E 05 F1 | 	add	fp, #36
0e400     A7 1A 62 FC | 	wrlong	arg05, fp
0e404     04 4E 05 F1 | 	add	fp, #4
0e408     A7 18 62 FC | 	wrlong	arg04, fp
0e40c     04 4E 05 F1 | 	add	fp, #4
0e410     A7 16 62 FC | 	wrlong	arg03, fp
0e414     2C 4E 85 F1 | 	sub	fp, #44
0e418     EC F2 BF FD | 	call	#_pop
0e41c     FD 1A 02 F6 | 	mov	arg05, result1
0e420     FE 18 02 F6 | 	mov	arg04, result2
0e424     FF 16 02 F6 | 	mov	arg03, result3
0e428     18 4E 05 F1 | 	add	fp, #24
0e42c     A7 1A 62 FC | 	wrlong	arg05, fp
0e430     04 4E 05 F1 | 	add	fp, #4
0e434     A7 18 62 FC | 	wrlong	arg04, fp
0e438     04 4E 05 F1 | 	add	fp, #4
0e43c     A7 16 62 FC | 	wrlong	arg03, fp
0e440     20 4E 85 F1 | 	sub	fp, #32
0e444     C0 F2 BF FD | 	call	#_pop
0e448     FD 1A 02 F6 | 	mov	arg05, result1
0e44c     FE 18 02 F6 | 	mov	arg04, result2
0e450     FF 26 02 F6 | 	mov	local01, result3
0e454     0C 4E 05 F1 | 	add	fp, #12
0e458     A7 1A 62 FC | 	wrlong	arg05, fp
0e45c     04 4E 05 F1 | 	add	fp, #4
0e460     A7 18 62 FC | 	wrlong	arg04, fp
0e464     04 4E 05 F1 | 	add	fp, #4
0e468     A7 26 62 FC | 	wrlong	local01, fp
0e46c     14 4E 85 F1 | 	sub	fp, #20
0e470     94 F2 BF FD | 	call	#_pop
0e474     A7 FA 61 FC | 	wrlong	result1, fp
0e478     04 4E 05 F1 | 	add	fp, #4
0e47c     A7 FC 61 FC | 	wrlong	result2, fp
0e480     04 4E 05 F1 | 	add	fp, #4
0e484     A7 FE 61 FC | 	wrlong	result3, fp
0e488                 | ' 
0e488                 | ' t4=pop()
0e488                 | ' t3=pop()
0e488                 | ' t2=pop()
0e488                 | ' t1=pop()
0e488                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e488     FF 1A 02 F6 | 	mov	arg05, result3
0e48c     08 4E 85 F1 | 	sub	fp, #8
0e490     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e494     08 4E 05 51 |  if_ne	add	fp, #8
0e498     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e49c     08 4E 85 51 |  if_ne	sub	fp, #8
0e4a0     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e4a4     A8 00 90 5D |  if_ne	jmp	#LR__1200
0e4a8     14 4E 05 F1 | 	add	fp, #20
0e4ac     A7 26 02 FB | 	rdlong	local01, fp
0e4b0     14 4E 85 F1 | 	sub	fp, #20
0e4b4     1C 26 0E F2 | 	cmp	local01, #28 wz
0e4b8     14 4E 05 51 |  if_ne	add	fp, #20
0e4bc     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e4c0     14 4E 85 51 |  if_ne	sub	fp, #20
0e4c4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e4c8     84 00 90 5D |  if_ne	jmp	#LR__1200
0e4cc     20 4E 05 F1 | 	add	fp, #32
0e4d0     A7 26 02 FB | 	rdlong	local01, fp
0e4d4     20 4E 85 F1 | 	sub	fp, #32
0e4d8     1C 26 0E F2 | 	cmp	local01, #28 wz
0e4dc     20 4E 05 51 |  if_ne	add	fp, #32
0e4e0     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e4e4     20 4E 85 51 |  if_ne	sub	fp, #32
0e4e8     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e4ec     60 00 90 5D |  if_ne	jmp	#LR__1200
0e4f0     2C 4E 05 F1 | 	add	fp, #44
0e4f4     A7 26 02 FB | 	rdlong	local01, fp
0e4f8     2C 4E 85 F1 | 	sub	fp, #44
0e4fc     1C 26 0E F2 | 	cmp	local01, #28 wz
0e500     2C 4E 05 51 |  if_ne	add	fp, #44
0e504     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e508     2C 4E 85 51 |  if_ne	sub	fp, #44
0e50c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e510     3C 00 90 5D |  if_ne	jmp	#LR__1200
0e514     A7 12 02 FB | 	rdlong	arg01, fp
0e518     0C 4E 05 F1 | 	add	fp, #12
0e51c     A7 14 02 FB | 	rdlong	arg02, fp
0e520     0C 4E 05 F1 | 	add	fp, #12
0e524     A7 16 02 FB | 	rdlong	arg03, fp
0e528     0C 4E 05 F1 | 	add	fp, #12
0e52c     A7 18 02 FB | 	rdlong	arg04, fp
0e530     24 4E 85 F1 | 	sub	fp, #36
0e534     37 00 00 FF 
0e538     28 E4 05 F1 | 	add	objptr, ##28200
0e53c     F2 1A 02 FB | 	rdlong	arg05, objptr
0e540     37 00 00 FF 
0e544     28 E4 85 F1 | 	sub	objptr, ##28200
0e548     64 6B B1 FD | 	call	#_hg010b_spin2_box
0e54c                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e54c     6C 00 90 FD | 	jmp	#LR__1201
0e550                 | LR__1200
0e550     A7 12 02 F6 | 	mov	arg01, fp
0e554     94 F3 BF FD | 	call	#_converttoint
0e558     FD 28 02 F6 | 	mov	local02, result1
0e55c     0C 4E 05 F1 | 	add	fp, #12
0e560     A7 12 02 F6 | 	mov	arg01, fp
0e564     0C 4E 85 F1 | 	sub	fp, #12
0e568     80 F3 BF FD | 	call	#_converttoint
0e56c     FD 2A 02 F6 | 	mov	local03, result1
0e570     18 4E 05 F1 | 	add	fp, #24
0e574     A7 12 02 F6 | 	mov	arg01, fp
0e578     18 4E 85 F1 | 	sub	fp, #24
0e57c     6C F3 BF FD | 	call	#_converttoint
0e580     FD 26 02 F6 | 	mov	local01, result1
0e584     24 4E 05 F1 | 	add	fp, #36
0e588     A7 12 02 F6 | 	mov	arg01, fp
0e58c     24 4E 85 F1 | 	sub	fp, #36
0e590     58 F3 BF FD | 	call	#_converttoint
0e594     FD 18 02 F6 | 	mov	arg04, result1
0e598     37 00 00 FF 
0e59c     28 E4 05 F1 | 	add	objptr, ##28200
0e5a0     F2 1A 02 FB | 	rdlong	arg05, objptr
0e5a4     37 00 00 FF 
0e5a8     28 E4 85 F1 | 	sub	objptr, ##28200
0e5ac     14 13 02 F6 | 	mov	arg01, local02
0e5b0     15 15 02 F6 | 	mov	arg02, local03
0e5b4     13 17 02 F6 | 	mov	arg03, local01
0e5b8     F4 6A B1 FD | 	call	#_hg010b_spin2_box
0e5bc                 | LR__1201
0e5bc     A7 F0 03 F6 | 	mov	ptra, fp
0e5c0     B2 00 A0 FD | 	call	#popregs_
0e5c4                 | _do_box_ret
0e5c4     2D 00 64 FD | 	ret
0e5c8                 | 
0e5c8                 | ' 
0e5c8                 | ' '-------------------- brun
0e5c8                 | ' 
0e5c8                 | ' sub do_brun
0e5c8                 | _do_brun
0e5c8     08 4A 05 F6 | 	mov	COUNT_, #8
0e5cc     A8 00 A0 FD | 	call	#pushregs_
0e5d0     34 F1 BF FD | 	call	#_pop
0e5d4     FE 1A 02 F6 | 	mov	arg05, result2
0e5d8     FF 18 02 F6 | 	mov	arg04, result3
0e5dc     FD 26 02 F6 | 	mov	local01, result1
0e5e0     0D 29 02 F6 | 	mov	local02, arg05
0e5e4     0C 2B 02 F6 | 	mov	local03, arg04
0e5e8                 | ' 
0e5e8                 | ' t1=pop() 
0e5e8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e5e8     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e5ec     10 00 90 5D |  if_ne	jmp	#LR__1210
0e5f0     13 13 02 F6 | 	mov	arg01, local01
0e5f4     88 F2 BF FD | 	call	#_convertstring
0e5f8     FD 26 02 F6 | 	mov	local01, result1
0e5fc     1F 2A 06 F6 | 	mov	local03, #31
0e600                 | LR__1210
0e600                 | ' if t1.result_type=result_string then
0e600     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e604     F0 01 90 5D |  if_ne	jmp	#LR__1214
0e608     13 2D 02 F6 | 	mov	local04, local01
0e60c                 | '   filename=t1.result.sresult
0e60c                 | '   if left$(filename,1)="/" then 
0e60c     16 13 02 F6 | 	mov	arg01, local04
0e610     01 14 06 F6 | 	mov	arg02, #1
0e614     04 AB B1 FD | 	call	#__system__Left_S
0e618     FD 12 02 F6 | 	mov	arg01, result1
0e61c     B9 01 00 FF 
0e620     91 15 06 F6 | 	mov	arg02, ##@LR__5901
0e624     9C 8A B1 FD | 	call	#__system___string_cmp
0e628     00 FA 0D F2 | 	cmp	result1, #0 wz
0e62c     16 2F 02 A6 |  if_e	mov	local05, local04
0e630     14 00 90 AD |  if_e	jmp	#LR__1211
0e634     B9 01 00 FF 
0e638     93 13 06 F6 | 	mov	arg01, ##@LR__5902
0e63c     16 15 02 F6 | 	mov	arg02, local04
0e640     B4 8A B1 FD | 	call	#__system___string_concat
0e644     FD 2E 02 F6 | 	mov	local05, result1
0e648                 | LR__1211
0e648                 | '   open fullfilename for input as #9
0e648     09 12 06 F6 | 	mov	arg01, #9
0e64c     17 15 02 F6 | 	mov	arg02, local05
0e650     00 16 06 F6 | 	mov	arg03, #0
0e654     48 96 B1 FD | 	call	#__system___basic_open_string
0e658     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e65c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e660     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e664     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e668     FD 30 0A F6 | 	mov	local06, result1 wz
0e66c                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e66c     8C 00 90 AD |  if_e	jmp	#LR__1212
0e670     00 12 06 F6 | 	mov	arg01, #0
0e674     C8 E6 B1 FD | 	call	#__system___getiolock_0614
0e678     FD 12 02 F6 | 	mov	arg01, result1
0e67c     1C 8A B1 FD | 	call	#__system___lockmem
0e680     B9 01 00 FF 
0e684     9C 15 06 F6 | 	mov	arg02, ##@LR__5903
0e688     00 12 06 F6 | 	mov	arg01, #0
0e68c     00 16 06 F6 | 	mov	arg03, #0
0e690     00 97 B1 FD | 	call	#__system___basic_print_string
0e694     00 12 06 F6 | 	mov	arg01, #0
0e698     18 15 02 F6 | 	mov	arg02, local06
0e69c     00 16 06 F6 | 	mov	arg03, #0
0e6a0     0A 18 06 F6 | 	mov	arg04, #10
0e6a4     30 97 B1 FD | 	call	#__system___basic_print_integer
0e6a8     B9 01 00 FF 
0e6ac     AA 15 06 F6 | 	mov	arg02, ##@LR__5904
0e6b0     00 12 06 F6 | 	mov	arg01, #0
0e6b4     00 16 06 F6 | 	mov	arg03, #0
0e6b8     D8 96 B1 FD | 	call	#__system___basic_print_string
0e6bc     18 13 02 F6 | 	mov	arg01, local06
0e6c0     68 B3 B1 FD | 	call	#__system___strerror
0e6c4     FD 14 02 F6 | 	mov	arg02, result1
0e6c8     00 12 06 F6 | 	mov	arg01, #0
0e6cc     00 16 06 F6 | 	mov	arg03, #0
0e6d0     C0 96 B1 FD | 	call	#__system___basic_print_string
0e6d4     00 12 06 F6 | 	mov	arg01, #0
0e6d8     0A 14 06 F6 | 	mov	arg02, #10
0e6dc     00 16 06 F6 | 	mov	arg03, #0
0e6e0     58 96 B1 FD | 	call	#__system___basic_print_char
0e6e4     00 12 06 F6 | 	mov	arg01, #0
0e6e8     54 E6 B1 FD | 	call	#__system___getiolock_0614
0e6ec     FD 00 68 FC | 	wrlong	#0, result1
0e6f0     09 12 06 F6 | 	mov	arg01, #9
0e6f4     00 DD B1 FD | 	call	#__system__close
0e6f8     FC 00 90 FD | 	jmp	#LR__1215
0e6fc                 | LR__1212
0e6fc     01 32 06 F6 | 	mov	local07, #1
0e700     00 34 06 F6 | 	mov	local08, #0
0e704                 | '   do
0e704                 | LR__1213
0e704                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e704     4E 00 00 FF 
0e708     B4 E4 05 F1 | 	add	objptr, ##40116
0e70c     F2 16 02 F6 | 	mov	arg03, objptr
0e710     4E 00 00 FF 
0e714     B4 E4 85 F1 | 	sub	objptr, ##40116
0e718     09 12 06 F6 | 	mov	arg01, #9
0e71c     19 15 02 F6 | 	mov	arg02, local07
0e720     0A 18 C6 F9 | 	decod	arg04, #10
0e724     01 1A 06 F6 | 	mov	arg05, #1
0e728     E4 97 B1 FD | 	call	#__system___basic_get
0e72c     FD 30 02 F6 | 	mov	local06, result1
0e730     FD 32 02 F1 | 	add	local07, result1
0e734     4E 00 00 FF 
0e738     B4 E4 05 F1 | 	add	objptr, ##40116
0e73c     F2 12 02 F6 | 	mov	arg01, objptr
0e740     1A 15 02 F6 | 	mov	arg02, local08
0e744     0A 16 C6 F9 | 	decod	arg03, #10
0e748     42 00 00 FF 
0e74c     E8 E5 85 F1 | 	sub	objptr, ##34280
0e750     EC 7C B1 FD | 	call	#_psram_spin2_write
0e754     0B 00 00 FF 
0e758     CC E4 85 F1 | 	sub	objptr, ##5836
0e75c     18 35 02 F1 | 	add	local08, local06
0e760     02 00 00 FF 
0e764     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e768     E0 03 00 AF 
0e76c     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e770     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1213
0e774     36 00 00 FF 
0e778     FC E5 05 F1 | 	add	objptr, ##28156
0e77c     F2 12 02 FB | 	rdlong	arg01, objptr
0e780     03 12 62 FD | 	cogstop	arg01
0e784     04 E4 05 F1 | 	add	objptr, #4
0e788     F2 12 02 FB | 	rdlong	arg01, objptr
0e78c     03 12 62 FD | 	cogstop	arg01
0e790     04 E4 05 F1 | 	add	objptr, #4
0e794     F2 12 02 FB | 	rdlong	arg01, objptr
0e798     03 12 62 FD | 	cogstop	arg01
0e79c     19 00 00 FF 
0e7a0     3C E5 05 F1 | 	add	objptr, ##13116
0e7a4     F2 12 02 FB | 	rdlong	arg01, objptr
0e7a8     03 12 62 FD | 	cogstop	arg01
0e7ac     18 00 00 FF 
0e7b0     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e7b4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e7b8     18 00 00 FF 
0e7bc     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e7c0     19 00 00 FF 
0e7c4     34 E5 85 F1 | 	sub	objptr, ##13108
0e7c8     1E 34 06 F6 | 	mov	local08, #30
0e7cc     28 E4 61 FD | 	setq	objptr
0e7d0     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e7d4     01 34 66 C6 |  if_b	neg	local08, #1
0e7d8     1B 00 00 FF 
0e7dc     0C E5 05 F1 | 	add	objptr, ##14092
0e7e0     F2 34 62 FC | 	wrlong	local08, objptr
0e7e4     52 00 00 FF 
0e7e8     18 E5 85 F1 | 	sub	objptr, ##42264
0e7ec     00 12 06 F6 | 	mov	arg01, #0
0e7f0     01 12 62 FD | 	cogid	arg01
0e7f4     03 12 62 FD | 	cogstop	arg01
0e7f8                 | LR__1214
0e7f8                 | LR__1215
0e7f8     A7 F0 03 F6 | 	mov	ptra, fp
0e7fc     B2 00 A0 FD | 	call	#popregs_
0e800                 | _do_brun_ret
0e800     2D 00 64 FD | 	ret
0e804                 | 
0e804                 | ' 
0e804                 | ' '-------------------- cd
0e804                 | ' 
0e804                 | ' sub do_cd
0e804                 | _do_cd
0e804     06 4A 05 F6 | 	mov	COUNT_, #6
0e808     A8 00 A0 FD | 	call	#pushregs_
0e80c     B9 01 00 FF 
0e810     AD 13 06 F6 | 	mov	arg01, ##@LR__5905
0e814     31 14 06 F6 | 	mov	arg02, #49
0e818     E4 E6 B1 FD | 	call	#__system___basic_dir
0e81c     E8 EE BF FD | 	call	#_pop
0e820     FE 18 02 F6 | 	mov	arg04, result2
0e824     FF 16 02 F6 | 	mov	arg03, result3
0e828     FD 26 02 F6 | 	mov	local01, result1
0e82c     0C 29 02 F6 | 	mov	local02, arg04
0e830     0B 2B 02 F6 | 	mov	local03, arg03
0e834                 | ' t1=pop()
0e834                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e834     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e838     10 00 90 5D |  if_ne	jmp	#LR__1220
0e83c     13 13 02 F6 | 	mov	arg01, local01
0e840     3C F0 BF FD | 	call	#_convertstring
0e844     FD 26 02 F6 | 	mov	local01, result1
0e848     1F 2A 06 F6 | 	mov	local03, #31
0e84c                 | LR__1220
0e84c                 | ' if t1.result_type<>result_string then printerror(15): return
0e84c     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e850     10 00 90 AD |  if_e	jmp	#LR__1221
0e854     0F 12 06 F6 | 	mov	arg01, #15
0e858     00 14 06 F6 | 	mov	arg02, #0
0e85c     8C 4D B1 FD | 	call	#_printerror
0e860     54 05 90 FD | 	jmp	#LR__1239
0e864                 | LR__1221
0e864     13 2D 02 F6 | 	mov	local04, local01
0e868                 | ' newdir$=t1.result.sresult
0e868                 | ' if newdir$=".." then 
0e868     B9 01 00 FF 
0e86c     AF 15 06 F6 | 	mov	arg02, ##@LR__5906
0e870     16 13 02 F6 | 	mov	arg01, local04
0e874     4C 88 B1 FD | 	call	#__system___string_cmp
0e878     00 FA 0D F2 | 	cmp	result1, #0 wz
0e87c     C8 01 90 5D |  if_ne	jmp	#LR__1228
0e880     4A 00 00 FF 
0e884     94 E4 05 F1 | 	add	objptr, ##38036
0e888     F2 12 02 FB | 	rdlong	arg01, objptr
0e88c     4A 00 00 FF 
0e890     94 E4 85 F1 | 	sub	objptr, ##38036
0e894     09 2F 02 F6 | 	mov	local05, arg01
0e898     97 06 48 FB | 	callpa	#(@LR__1223-@LR__1222)>>2,fcache_load_ptr_
0e89c                 | LR__1222
0e89c     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e8a0     01 2E 06 51 |  if_ne	add	local05, #1
0e8a4     F4 FF 9F 5D |  if_ne	jmp	#LR__1222
0e8a8                 | LR__1223
0e8a8     17 13 C2 F2 | 	subr	arg01, local05
0e8ac     4A 00 00 FF 
0e8b0     94 E4 05 F1 | 	add	objptr, ##38036
0e8b4     F2 14 02 FB | 	rdlong	arg02, objptr
0e8b8     4A 00 00 FF 
0e8bc     94 E4 85 F1 | 	sub	objptr, ##38036
0e8c0     B9 01 00 FF 
0e8c4     B2 17 06 F6 | 	mov	arg03, ##@LR__5907
0e8c8     9C AE B1 FD | 	call	#__system__InstrRev
0e8cc     FD 2C 02 F6 | 	mov	local04, result1
0e8d0                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e8d0     02 2C 56 F2 | 	cmps	local04, #2 wc
0e8d4     28 00 90 CD |  if_b	jmp	#LR__1224
0e8d8     4A 00 00 FF 
0e8dc     94 E4 05 F1 | 	add	objptr, ##38036
0e8e0     F2 12 02 FB | 	rdlong	arg01, objptr
0e8e4     4A 00 00 FF 
0e8e8     94 E4 85 F1 | 	sub	objptr, ##38036
0e8ec     01 2C 86 F1 | 	sub	local04, #1
0e8f0     16 15 02 F6 | 	mov	arg02, local04
0e8f4     24 A8 B1 FD | 	call	#__system__Left_S
0e8f8     FD 2C 02 F6 | 	mov	local04, result1
0e8fc     08 00 90 FD | 	jmp	#LR__1225
0e900                 | LR__1224
0e900     B9 01 00 FF 
0e904     B4 2D 06 F6 | 	mov	local04, ##@LR__5908
0e908                 | LR__1225
0e908     16 13 02 F6 | 	mov	arg01, local04
0e90c     18 8E B1 FD | 	call	#__system___chdir
0e910     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e914     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e918     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e91c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e920     FD 30 0A F6 | 	mov	local06, result1 wz
0e924                 | '   chdir newdir$
0e924                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e924     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e928     A4 00 90 AD |  if_e	jmp	#LR__1226
0e92c     00 12 06 F6 | 	mov	arg01, #0
0e930     0C E4 B1 FD | 	call	#__system___getiolock_0614
0e934     FD 12 02 F6 | 	mov	arg01, result1
0e938     60 87 B1 FD | 	call	#__system___lockmem
0e93c     B9 01 00 FF 
0e940     B6 15 06 F6 | 	mov	arg02, ##@LR__5909
0e944     00 12 06 F6 | 	mov	arg01, #0
0e948     00 16 06 F6 | 	mov	arg03, #0
0e94c     44 94 B1 FD | 	call	#__system___basic_print_string
0e950     00 12 06 F6 | 	mov	arg01, #0
0e954     18 15 02 F6 | 	mov	arg02, local06
0e958     00 16 06 F6 | 	mov	arg03, #0
0e95c     0A 18 06 F6 | 	mov	arg04, #10
0e960     74 94 B1 FD | 	call	#__system___basic_print_integer
0e964     B9 01 00 FF 
0e968     C4 15 06 F6 | 	mov	arg02, ##@LR__5910
0e96c     00 12 06 F6 | 	mov	arg01, #0
0e970     00 16 06 F6 | 	mov	arg03, #0
0e974     1C 94 B1 FD | 	call	#__system___basic_print_string
0e978     45 00 00 FF 
0e97c     50 E5 05 F1 | 	add	objptr, ##35664
0e980     F2 14 02 FB | 	rdlong	arg02, objptr
0e984     45 00 00 FF 
0e988     50 E5 85 F1 | 	sub	objptr, ##35664
0e98c     00 12 06 F6 | 	mov	arg01, #0
0e990     00 16 06 F6 | 	mov	arg03, #0
0e994     FC 93 B1 FD | 	call	#__system___basic_print_string
0e998     00 12 06 F6 | 	mov	arg01, #0
0e99c     0A 14 06 F6 | 	mov	arg02, #10
0e9a0     00 16 06 F6 | 	mov	arg03, #0
0e9a4     94 93 B1 FD | 	call	#__system___basic_print_char
0e9a8     00 12 06 F6 | 	mov	arg01, #0
0e9ac     90 E3 B1 FD | 	call	#__system___getiolock_0614
0e9b0     FD 00 68 FC | 	wrlong	#0, result1
0e9b4     4A 00 00 FF 
0e9b8     94 E4 05 F1 | 	add	objptr, ##38036
0e9bc     F2 12 02 FB | 	rdlong	arg01, objptr
0e9c0     4A 00 00 FF 
0e9c4     94 E4 85 F1 | 	sub	objptr, ##38036
0e9c8     5C 8D B1 FD | 	call	#__system___chdir
0e9cc     14 00 90 FD | 	jmp	#LR__1227
0e9d0                 | LR__1226
0e9d0     4A 00 00 FF 
0e9d4     94 E4 05 F1 | 	add	objptr, ##38036
0e9d8     F2 2C 62 FC | 	wrlong	local04, objptr
0e9dc     4A 00 00 FF 
0e9e0     94 E4 85 F1 | 	sub	objptr, ##38036
0e9e4                 | LR__1227
0e9e4                 | '   print "Current directory: ";currentdir$
0e9e4     00 12 06 F6 | 	mov	arg01, #0
0e9e8     54 E3 B1 FD | 	call	#__system___getiolock_0614
0e9ec     FD 12 02 F6 | 	mov	arg01, result1
0e9f0     A8 86 B1 FD | 	call	#__system___lockmem
0e9f4     B9 01 00 FF 
0e9f8     C7 15 06 F6 | 	mov	arg02, ##@LR__5911
0e9fc     00 12 06 F6 | 	mov	arg01, #0
0ea00     00 16 06 F6 | 	mov	arg03, #0
0ea04     8C 93 B1 FD | 	call	#__system___basic_print_string
0ea08     4A 00 00 FF 
0ea0c     94 E4 05 F1 | 	add	objptr, ##38036
0ea10     F2 14 02 FB | 	rdlong	arg02, objptr
0ea14     4A 00 00 FF 
0ea18     94 E4 85 F1 | 	sub	objptr, ##38036
0ea1c     00 12 06 F6 | 	mov	arg01, #0
0ea20     00 16 06 F6 | 	mov	arg03, #0
0ea24     6C 93 B1 FD | 	call	#__system___basic_print_string
0ea28     00 12 06 F6 | 	mov	arg01, #0
0ea2c     0A 14 06 F6 | 	mov	arg02, #10
0ea30     00 16 06 F6 | 	mov	arg03, #0
0ea34     04 93 B1 FD | 	call	#__system___basic_print_char
0ea38     00 12 06 F6 | 	mov	arg01, #0
0ea3c     00 E3 B1 FD | 	call	#__system___getiolock_0614
0ea40     FD 00 68 FC | 	wrlong	#0, result1
0ea44                 | '   return
0ea44     70 03 90 FD | 	jmp	#LR__1239
0ea48                 | LR__1228
0ea48                 | ' if left$(newdir$,1)="/" then 
0ea48     16 13 02 F6 | 	mov	arg01, local04
0ea4c     01 14 06 F6 | 	mov	arg02, #1
0ea50     C8 A6 B1 FD | 	call	#__system__Left_S
0ea54     FD 12 02 F6 | 	mov	arg01, result1
0ea58     B9 01 00 FF 
0ea5c     DB 15 06 F6 | 	mov	arg02, ##@LR__5912
0ea60     60 86 B1 FD | 	call	#__system___string_cmp
0ea64     00 FA 0D F2 | 	cmp	result1, #0 wz
0ea68     40 01 90 5D |  if_ne	jmp	#LR__1231
0ea6c     16 13 02 F6 | 	mov	arg01, local04
0ea70     B4 8C B1 FD | 	call	#__system___chdir
0ea74     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ea78     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0ea7c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0ea80     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ea84     FD 30 0A F6 | 	mov	local06, result1 wz
0ea88                 | '   chdir(newdir$)
0ea88                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0ea88     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0ea8c     A4 00 90 AD |  if_e	jmp	#LR__1229
0ea90     00 12 06 F6 | 	mov	arg01, #0
0ea94     A8 E2 B1 FD | 	call	#__system___getiolock_0614
0ea98     FD 12 02 F6 | 	mov	arg01, result1
0ea9c     FC 85 B1 FD | 	call	#__system___lockmem
0eaa0     B9 01 00 FF 
0eaa4     DD 15 06 F6 | 	mov	arg02, ##@LR__5913
0eaa8     00 12 06 F6 | 	mov	arg01, #0
0eaac     00 16 06 F6 | 	mov	arg03, #0
0eab0     E0 92 B1 FD | 	call	#__system___basic_print_string
0eab4     00 12 06 F6 | 	mov	arg01, #0
0eab8     18 15 02 F6 | 	mov	arg02, local06
0eabc     00 16 06 F6 | 	mov	arg03, #0
0eac0     0A 18 06 F6 | 	mov	arg04, #10
0eac4     10 93 B1 FD | 	call	#__system___basic_print_integer
0eac8     B9 01 00 FF 
0eacc     EB 15 06 F6 | 	mov	arg02, ##@LR__5914
0ead0     00 12 06 F6 | 	mov	arg01, #0
0ead4     00 16 06 F6 | 	mov	arg03, #0
0ead8     B8 92 B1 FD | 	call	#__system___basic_print_string
0eadc     45 00 00 FF 
0eae0     50 E5 05 F1 | 	add	objptr, ##35664
0eae4     F2 14 02 FB | 	rdlong	arg02, objptr
0eae8     45 00 00 FF 
0eaec     50 E5 85 F1 | 	sub	objptr, ##35664
0eaf0     00 12 06 F6 | 	mov	arg01, #0
0eaf4     00 16 06 F6 | 	mov	arg03, #0
0eaf8     98 92 B1 FD | 	call	#__system___basic_print_string
0eafc     00 12 06 F6 | 	mov	arg01, #0
0eb00     0A 14 06 F6 | 	mov	arg02, #10
0eb04     00 16 06 F6 | 	mov	arg03, #0
0eb08     30 92 B1 FD | 	call	#__system___basic_print_char
0eb0c     00 12 06 F6 | 	mov	arg01, #0
0eb10     2C E2 B1 FD | 	call	#__system___getiolock_0614
0eb14     FD 00 68 FC | 	wrlong	#0, result1
0eb18     4A 00 00 FF 
0eb1c     94 E4 05 F1 | 	add	objptr, ##38036
0eb20     F2 12 02 FB | 	rdlong	arg01, objptr
0eb24     4A 00 00 FF 
0eb28     94 E4 85 F1 | 	sub	objptr, ##38036
0eb2c     F8 8B B1 FD | 	call	#__system___chdir
0eb30     14 00 90 FD | 	jmp	#LR__1230
0eb34                 | LR__1229
0eb34     4A 00 00 FF 
0eb38     94 E4 05 F1 | 	add	objptr, ##38036
0eb3c     F2 2C 62 FC | 	wrlong	local04, objptr
0eb40     4A 00 00 FF 
0eb44     94 E4 85 F1 | 	sub	objptr, ##38036
0eb48                 | LR__1230
0eb48                 | '   print "Current directory: ";currentdir$
0eb48     00 12 06 F6 | 	mov	arg01, #0
0eb4c     F0 E1 B1 FD | 	call	#__system___getiolock_0614
0eb50     FD 12 02 F6 | 	mov	arg01, result1
0eb54     44 85 B1 FD | 	call	#__system___lockmem
0eb58     B9 01 00 FF 
0eb5c     EE 15 06 F6 | 	mov	arg02, ##@LR__5915
0eb60     00 12 06 F6 | 	mov	arg01, #0
0eb64     00 16 06 F6 | 	mov	arg03, #0
0eb68     28 92 B1 FD | 	call	#__system___basic_print_string
0eb6c     4A 00 00 FF 
0eb70     94 E4 05 F1 | 	add	objptr, ##38036
0eb74     F2 14 02 FB | 	rdlong	arg02, objptr
0eb78     4A 00 00 FF 
0eb7c     94 E4 85 F1 | 	sub	objptr, ##38036
0eb80     00 12 06 F6 | 	mov	arg01, #0
0eb84     00 16 06 F6 | 	mov	arg03, #0
0eb88     08 92 B1 FD | 	call	#__system___basic_print_string
0eb8c     00 12 06 F6 | 	mov	arg01, #0
0eb90     0A 14 06 F6 | 	mov	arg02, #10
0eb94     00 16 06 F6 | 	mov	arg03, #0
0eb98     A0 91 B1 FD | 	call	#__system___basic_print_char
0eb9c     00 12 06 F6 | 	mov	arg01, #0
0eba0     9C E1 B1 FD | 	call	#__system___getiolock_0614
0eba4     FD 00 68 FC | 	wrlong	#0, result1
0eba8                 | '   return
0eba8     0C 02 90 FD | 	jmp	#LR__1239
0ebac                 | LR__1231
0ebac                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0ebac     4A 00 00 FF 
0ebb0     94 E4 05 F1 | 	add	objptr, ##38036
0ebb4     F2 12 02 FB | 	rdlong	arg01, objptr
0ebb8     4A 00 00 FF 
0ebbc     94 E4 85 F1 | 	sub	objptr, ##38036
0ebc0     BA 01 00 FF 
0ebc4     02 14 06 F6 | 	mov	arg02, ##@LR__5916
0ebc8     F8 84 B1 FD | 	call	#__system___string_cmp
0ebcc     00 FA 0D F2 | 	cmp	result1, #0 wz
0ebd0     34 00 90 AD |  if_e	jmp	#LR__1232
0ebd4     4A 00 00 FF 
0ebd8     94 E4 05 F1 | 	add	objptr, ##38036
0ebdc     F2 12 02 FB | 	rdlong	arg01, objptr
0ebe0     4A 00 00 FF 
0ebe4     94 E4 85 F1 | 	sub	objptr, ##38036
0ebe8     BA 01 00 FF 
0ebec     04 14 06 F6 | 	mov	arg02, ##@LR__5917
0ebf0     04 85 B1 FD | 	call	#__system___string_concat
0ebf4     FD 12 02 F6 | 	mov	arg01, result1
0ebf8     16 15 02 F6 | 	mov	arg02, local04
0ebfc     F8 84 B1 FD | 	call	#__system___string_concat
0ec00     FD 2C 02 F6 | 	mov	local04, result1
0ec04     20 00 90 FD | 	jmp	#LR__1233
0ec08                 | LR__1232
0ec08     4A 00 00 FF 
0ec0c     94 E4 05 F1 | 	add	objptr, ##38036
0ec10     F2 12 02 FB | 	rdlong	arg01, objptr
0ec14     4A 00 00 FF 
0ec18     94 E4 85 F1 | 	sub	objptr, ##38036
0ec1c     16 15 02 F6 | 	mov	arg02, local04
0ec20     D4 84 B1 FD | 	call	#__system___string_concat
0ec24     FD 2C 02 F6 | 	mov	local04, result1
0ec28                 | LR__1233
0ec28                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0ec28     16 13 02 F6 | 	mov	arg01, local04
0ec2c     01 14 06 F6 | 	mov	arg02, #1
0ec30     70 A5 B1 FD | 	call	#__system__Right_S
0ec34     FD 12 02 F6 | 	mov	arg01, result1
0ec38     BA 01 00 FF 
0ec3c     06 14 06 F6 | 	mov	arg02, ##@LR__5918
0ec40     80 84 B1 FD | 	call	#__system___string_cmp
0ec44     00 FA 0D F2 | 	cmp	result1, #0 wz
0ec48     30 00 90 5D |  if_ne	jmp	#LR__1236
0ec4c     16 13 02 F6 | 	mov	arg01, local04
0ec50     09 2F 02 F6 | 	mov	local05, arg01
0ec54     97 06 48 FB | 	callpa	#(@LR__1235-@LR__1234)>>2,fcache_load_ptr_
0ec58                 | LR__1234
0ec58     17 FB C9 FA | 	rdbyte	result1, local05 wz
0ec5c     01 2E 06 51 |  if_ne	add	local05, #1
0ec60     F4 FF 9F 5D |  if_ne	jmp	#LR__1234
0ec64                 | LR__1235
0ec64     09 2F 82 F1 | 	sub	local05, arg01
0ec68     17 15 02 F6 | 	mov	arg02, local05
0ec6c     01 14 86 F1 | 	sub	arg02, #1
0ec70     16 13 02 F6 | 	mov	arg01, local04
0ec74     A4 A4 B1 FD | 	call	#__system__Left_S
0ec78     FD 2C 02 F6 | 	mov	local04, result1
0ec7c                 | LR__1236
0ec7c     16 13 02 F6 | 	mov	arg01, local04
0ec80     A4 8A B1 FD | 	call	#__system___chdir
0ec84     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ec88     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0ec8c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0ec90     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ec94     FD 30 0A F6 | 	mov	local06, result1 wz
0ec98                 | '   chdir(newdir$)
0ec98                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0ec98     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0ec9c     A4 00 90 AD |  if_e	jmp	#LR__1237
0eca0     00 12 06 F6 | 	mov	arg01, #0
0eca4     98 E0 B1 FD | 	call	#__system___getiolock_0614
0eca8     FD 12 02 F6 | 	mov	arg01, result1
0ecac     EC 83 B1 FD | 	call	#__system___lockmem
0ecb0     BA 01 00 FF 
0ecb4     08 14 06 F6 | 	mov	arg02, ##@LR__5919
0ecb8     00 12 06 F6 | 	mov	arg01, #0
0ecbc     00 16 06 F6 | 	mov	arg03, #0
0ecc0     D0 90 B1 FD | 	call	#__system___basic_print_string
0ecc4     00 12 06 F6 | 	mov	arg01, #0
0ecc8     18 15 02 F6 | 	mov	arg02, local06
0eccc     00 16 06 F6 | 	mov	arg03, #0
0ecd0     0A 18 06 F6 | 	mov	arg04, #10
0ecd4     00 91 B1 FD | 	call	#__system___basic_print_integer
0ecd8     BA 01 00 FF 
0ecdc     16 14 06 F6 | 	mov	arg02, ##@LR__5920
0ece0     00 12 06 F6 | 	mov	arg01, #0
0ece4     00 16 06 F6 | 	mov	arg03, #0
0ece8     A8 90 B1 FD | 	call	#__system___basic_print_string
0ecec     45 00 00 FF 
0ecf0     50 E5 05 F1 | 	add	objptr, ##35664
0ecf4     F2 14 02 FB | 	rdlong	arg02, objptr
0ecf8     45 00 00 FF 
0ecfc     50 E5 85 F1 | 	sub	objptr, ##35664
0ed00     00 12 06 F6 | 	mov	arg01, #0
0ed04     00 16 06 F6 | 	mov	arg03, #0
0ed08     88 90 B1 FD | 	call	#__system___basic_print_string
0ed0c     00 12 06 F6 | 	mov	arg01, #0
0ed10     0A 14 06 F6 | 	mov	arg02, #10
0ed14     00 16 06 F6 | 	mov	arg03, #0
0ed18     20 90 B1 FD | 	call	#__system___basic_print_char
0ed1c     00 12 06 F6 | 	mov	arg01, #0
0ed20     1C E0 B1 FD | 	call	#__system___getiolock_0614
0ed24     FD 00 68 FC | 	wrlong	#0, result1
0ed28     4A 00 00 FF 
0ed2c     94 E4 05 F1 | 	add	objptr, ##38036
0ed30     F2 12 02 FB | 	rdlong	arg01, objptr
0ed34     4A 00 00 FF 
0ed38     94 E4 85 F1 | 	sub	objptr, ##38036
0ed3c     E8 89 B1 FD | 	call	#__system___chdir
0ed40     14 00 90 FD | 	jmp	#LR__1238
0ed44                 | LR__1237
0ed44     4A 00 00 FF 
0ed48     94 E4 05 F1 | 	add	objptr, ##38036
0ed4c     F2 2C 62 FC | 	wrlong	local04, objptr
0ed50     4A 00 00 FF 
0ed54     94 E4 85 F1 | 	sub	objptr, ##38036
0ed58                 | LR__1238
0ed58                 | '   print "Current directory: ";currentdir$
0ed58     00 12 06 F6 | 	mov	arg01, #0
0ed5c     E0 DF B1 FD | 	call	#__system___getiolock_0614
0ed60     FD 12 02 F6 | 	mov	arg01, result1
0ed64     34 83 B1 FD | 	call	#__system___lockmem
0ed68     BA 01 00 FF 
0ed6c     19 14 06 F6 | 	mov	arg02, ##@LR__5921
0ed70     00 12 06 F6 | 	mov	arg01, #0
0ed74     00 16 06 F6 | 	mov	arg03, #0
0ed78     18 90 B1 FD | 	call	#__system___basic_print_string
0ed7c     4A 00 00 FF 
0ed80     94 E4 05 F1 | 	add	objptr, ##38036
0ed84     F2 14 02 FB | 	rdlong	arg02, objptr
0ed88     4A 00 00 FF 
0ed8c     94 E4 85 F1 | 	sub	objptr, ##38036
0ed90     00 12 06 F6 | 	mov	arg01, #0
0ed94     00 16 06 F6 | 	mov	arg03, #0
0ed98     F8 8F B1 FD | 	call	#__system___basic_print_string
0ed9c     00 12 06 F6 | 	mov	arg01, #0
0eda0     0A 14 06 F6 | 	mov	arg02, #10
0eda4     00 16 06 F6 | 	mov	arg03, #0
0eda8     90 8F B1 FD | 	call	#__system___basic_print_char
0edac     00 12 06 F6 | 	mov	arg01, #0
0edb0     8C DF B1 FD | 	call	#__system___getiolock_0614
0edb4     FD 00 68 FC | 	wrlong	#0, result1
0edb8                 | LR__1239
0edb8     A7 F0 03 F6 | 	mov	ptra, fp
0edbc     B2 00 A0 FD | 	call	#popregs_
0edc0                 | _do_cd_ret
0edc0     2D 00 64 FD | 	ret
0edc4                 | 
0edc4                 | ' 
0edc4                 | ' '-------------------- changefreq
0edc4                 | ' 
0edc4                 | ' sub do_changefreq
0edc4                 | _do_changefreq
0edc4     04 4A 05 F6 | 	mov	COUNT_, #4
0edc8     A8 00 A0 FD | 	call	#pushregs_
0edcc     28 F0 07 F1 | 	add	ptra, #40
0edd0     34 E9 BF FD | 	call	#_pop
0edd4     FF 14 02 F6 | 	mov	arg02, result3
0edd8     A7 FA 61 FC | 	wrlong	result1, fp
0eddc     04 4E 05 F1 | 	add	fp, #4
0ede0     A7 FC 61 FC | 	wrlong	result2, fp
0ede4     04 4E 05 F1 | 	add	fp, #4
0ede8     A7 14 62 FC | 	wrlong	arg02, fp
0edec     08 4E 85 F1 | 	sub	fp, #8
0edf0     A7 12 02 F6 | 	mov	arg01, fp
0edf4     B0 EB BF FD | 	call	#_converttofloat
0edf8     24 4E 05 F1 | 	add	fp, #36
0edfc     A7 FA 61 FC | 	wrlong	result1, fp
0ee00     24 4E 85 F1 | 	sub	fp, #36
0ee04     FD 14 02 F6 | 	mov	arg02, result1
0ee08     FC 16 20 FF 
0ee0c     54 12 06 F6 | 	mov	arg01, ##1076754516
0ee10     D4 C0 B1 FD | 	call	#__system____builtin_logbase
0ee14     FD 26 02 F6 | 	mov	local01, result1
0ee18     1E 14 C6 F9 | 	decod	arg02, #30
0ee1c     FC 16 20 FF 
0ee20     54 12 06 F6 | 	mov	arg01, ##1076754516
0ee24     C0 C0 B1 FD | 	call	#__system____builtin_logbase
0ee28     FD 14 02 F6 | 	mov	arg02, result1
0ee2c     13 13 02 F6 | 	mov	arg01, local01
0ee30     E8 B2 B1 FD | 	call	#__system___float_div
0ee34     FD 12 02 F6 | 	mov	arg01, result1
0ee38     00 14 06 F6 | 	mov	arg02, #0
0ee3c     A0 B5 B1 FD | 	call	#__system___float_tointeger
0ee40     10 4E 05 F1 | 	add	fp, #16
0ee44     A7 FA 61 FC | 	wrlong	result1, fp
0ee48     1E 26 C6 F9 | 	decod	local01, #30
0ee4c     FD 12 02 F6 | 	mov	arg01, result1
0ee50     10 4E 85 F1 | 	sub	fp, #16
0ee54     05 12 06 F1 | 	add	arg01, #5
0ee58     09 13 52 F6 | 	abs	arg01, arg01 wc
0ee5c     1F 28 C6 C9 |  if_b	decod	local02, #31
0ee60     00 28 06 36 |  if_ae	mov	local02, #0
0ee64     AC AC B1 FD | 	call	#__system___float_fromuns
0ee68     14 FB 61 F5 | 	xor	result1, local02
0ee6c     FD 14 02 F6 | 	mov	arg02, result1
0ee70     13 13 02 F6 | 	mov	arg01, local01
0ee74     A8 BF B1 FD | 	call	#__system____builtin_powf
0ee78     FD 12 02 F6 | 	mov	arg01, result1
0ee7c     01 14 06 F6 | 	mov	arg02, #1
0ee80     5C B5 B1 FD | 	call	#__system___float_tointeger
0ee84     14 4E 05 F1 | 	add	fp, #20
0ee88     A7 FA 61 FC | 	wrlong	result1, fp
0ee8c                 | ' skip=round(2^(lfreq+5))
0ee8c                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0ee8c     14 4E 85 F1 | 	sub	fp, #20
0ee90     40 00 00 FF 
0ee94     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ee98     30 00 90 CD |  if_b	jmp	#LR__1240
0ee9c     14 4E 05 F1 | 	add	fp, #20
0eea0     A7 26 02 FB | 	rdlong	local01, fp
0eea4     13 27 52 F6 | 	abs	local01, local01 wc
0eea8     0F 26 46 F0 | 	shr	local01, #15
0eeac     13 27 82 F6 | 	negc	local01, local01
0eeb0     04 4E 05 F1 | 	add	fp, #4
0eeb4     A7 26 62 FC | 	wrlong	local01, fp
0eeb8     04 4E 85 F1 | 	sub	fp, #4
0eebc     40 00 80 FF 
0eec0     A7 00 68 FC | 	wrlong	##32768, fp
0eec4     14 4E 85 F1 | 	sub	fp, #20
0eec8     0C 00 90 FD | 	jmp	#LR__1241
0eecc                 | LR__1240
0eecc     18 4E 05 F1 | 	add	fp, #24
0eed0     A7 02 68 FC | 	wrlong	#1, fp
0eed4     18 4E 85 F1 | 	sub	fp, #24
0eed8                 | LR__1241
0eed8     24 4E 05 F1 | 	add	fp, #36
0eedc     A7 14 02 FB | 	rdlong	arg02, fp
0eee0     24 4E 85 F1 | 	sub	fp, #36
0eee4     3E 2C 25 FF 
0eee8     3C 12 06 F6 | 	mov	arg01, ##1247312956
0eeec     2C B2 B1 FD | 	call	#__system___float_div
0eef0     FD 26 02 F6 | 	mov	local01, result1
0eef4     18 4E 05 F1 | 	add	fp, #24
0eef8     A7 12 02 FB | 	rdlong	arg01, fp
0eefc     18 4E 85 F1 | 	sub	fp, #24
0ef00     09 13 52 F6 | 	abs	arg01, arg01 wc
0ef04     1F 28 C6 C9 |  if_b	decod	local02, #31
0ef08     00 28 06 36 |  if_ae	mov	local02, #0
0ef0c     04 AC B1 FD | 	call	#__system___float_fromuns
0ef10     14 FB 61 F5 | 	xor	result1, local02
0ef14     FD 2A 02 F6 | 	mov	local03, result1
0ef18     1E 2C C6 F9 | 	decod	local04, #30
0ef1c     0D 12 06 F6 | 	mov	arg01, #13
0ef20     10 4E 05 F1 | 	add	fp, #16
0ef24     A7 14 02 FB | 	rdlong	arg02, fp
0ef28     10 4E 85 F1 | 	sub	fp, #16
0ef2c     0A 13 82 F1 | 	sub	arg01, arg02
0ef30     09 13 52 F6 | 	abs	arg01, arg01 wc
0ef34     1F 28 C6 C9 |  if_b	decod	local02, #31
0ef38     00 28 06 36 |  if_ae	mov	local02, #0
0ef3c     D4 AB B1 FD | 	call	#__system___float_fromuns
0ef40     14 FB 61 F5 | 	xor	result1, local02
0ef44     FD 14 02 F6 | 	mov	arg02, result1
0ef48     16 13 02 F6 | 	mov	arg01, local04
0ef4c     D0 BE B1 FD | 	call	#__system____builtin_powf
0ef50     FD 14 02 F6 | 	mov	arg02, result1
0ef54     15 13 02 F6 | 	mov	arg01, local03
0ef58     BC AF B1 FD | 	call	#__system___float_mul
0ef5c     FD 14 02 F6 | 	mov	arg02, result1
0ef60     13 13 02 F6 | 	mov	arg01, local01
0ef64     B4 B1 B1 FD | 	call	#__system___float_div
0ef68     FD 12 02 F6 | 	mov	arg01, result1
0ef6c     01 14 06 F6 | 	mov	arg02, #1
0ef70     6C B4 B1 FD | 	call	#__system___float_tointeger
0ef74     FD 26 02 F6 | 	mov	local01, result1
0ef78     1C 4E 05 F1 | 	add	fp, #28
0ef7c     A7 26 62 FC | 	wrlong	local01, fp
0ef80     1C 4E 85 F1 | 	sub	fp, #28
0ef84     80 E7 BF FD | 	call	#_pop
0ef88     FF 2C 02 F6 | 	mov	local04, result3
0ef8c     A7 FA 61 FC | 	wrlong	result1, fp
0ef90     04 4E 05 F1 | 	add	fp, #4
0ef94     A7 FC 61 FC | 	wrlong	result2, fp
0ef98     04 4E 05 F1 | 	add	fp, #4
0ef9c     A7 2C 62 FC | 	wrlong	local04, fp
0efa0     08 4E 85 F1 | 	sub	fp, #8
0efa4     A7 12 02 F6 | 	mov	arg01, fp
0efa8     40 E9 BF FD | 	call	#_converttoint
0efac     FD 2A 52 F6 | 	abs	local03, result1 wc
0efb0     07 2A 06 F5 | 	and	local03, #7
0efb4     15 2B 82 F6 | 	negc	local03, local03
0efb8     0C 4E 05 F1 | 	add	fp, #12
0efbc     A7 2A 62 FC | 	wrlong	local03, fp
0efc0     08 4E 05 F1 | 	add	fp, #8
0efc4     A7 26 02 FB | 	rdlong	local01, fp
0efc8     10 26 66 F0 | 	shl	local01, #16
0efcc     08 4E 05 F1 | 	add	fp, #8
0efd0     A7 2C 02 FB | 	rdlong	local04, fp
0efd4     16 27 02 F1 | 	add	local01, local04
0efd8     04 4E 05 F1 | 	add	fp, #4
0efdc     A7 26 62 FC | 	wrlong	local01, fp
0efe0                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0efe0     37 00 00 FF 
0efe4     10 E4 05 F1 | 	add	objptr, ##28176
0efe8     F2 12 02 FB | 	rdlong	arg01, objptr
0efec     37 00 00 FF 
0eff0     10 E4 85 F1 | 	sub	objptr, ##28176
0eff4     14 4E 85 F1 | 	sub	fp, #20
0eff8     A7 2C 02 FB | 	rdlong	local04, fp
0effc     0C 4E 85 F1 | 	sub	fp, #12
0f000     06 2C 66 F0 | 	shl	local04, #6
0f004     16 13 02 F1 | 	add	arg01, local04
0f008     08 12 06 F1 | 	add	arg01, #8
0f00c     09 FB 01 FB | 	rdlong	result1, arg01
0f010     1B FA 2D F4 | 	testbn	result1, #27 wz
0f014     3C 00 90 5D |  if_ne	jmp	#LR__1242
0f018     37 00 00 FF 
0f01c     10 E4 05 F1 | 	add	objptr, ##28176
0f020     F2 12 02 FB | 	rdlong	arg01, objptr
0f024     37 00 00 FF 
0f028     10 E4 85 F1 | 	sub	objptr, ##28176
0f02c     0C 4E 05 F1 | 	add	fp, #12
0f030     A7 2C 02 FB | 	rdlong	local04, fp
0f034     06 2C 66 F0 | 	shl	local04, #6
0f038     16 13 02 F1 | 	add	arg01, local04
0f03c     18 12 06 F1 | 	add	arg01, #24
0f040     14 4E 05 F1 | 	add	fp, #20
0f044     A7 14 02 FB | 	rdlong	arg02, fp
0f048     20 4E 85 F1 | 	sub	fp, #32
0f04c     09 15 62 FC | 	wrlong	arg02, arg01
0f050     80 00 90 FD | 	jmp	#LR__1243
0f054                 | LR__1242
0f054     37 00 00 FF 
0f058     10 E4 05 F1 | 	add	objptr, ##28176
0f05c     F2 26 02 FB | 	rdlong	local01, objptr
0f060     37 00 00 FF 
0f064     10 E4 85 F1 | 	sub	objptr, ##28176
0f068     0C 4E 05 F1 | 	add	fp, #12
0f06c     A7 2C 02 FB | 	rdlong	local04, fp
0f070     06 2C 66 F0 | 	shl	local04, #6
0f074     16 27 02 F1 | 	add	local01, local04
0f078     18 26 06 F1 | 	add	local01, #24
0f07c     18 4E 05 F1 | 	add	fp, #24
0f080     A7 14 02 FB | 	rdlong	arg02, fp
0f084     24 4E 85 F1 | 	sub	fp, #36
0f088     3E 2C 25 FF 
0f08c     3C 12 06 F6 | 	mov	arg01, ##1247312956
0f090     88 B0 B1 FD | 	call	#__system___float_div
0f094     FD 12 02 F6 | 	mov	arg01, result1
0f098     01 14 06 F6 | 	mov	arg02, #1
0f09c     40 B3 B1 FD | 	call	#__system___float_tointeger
0f0a0     13 FB 51 FC | 	wrword	result1, local01
0f0a4     37 00 00 FF 
0f0a8     10 E4 05 F1 | 	add	objptr, ##28176
0f0ac     F2 12 02 FB | 	rdlong	arg01, objptr
0f0b0     37 00 00 FF 
0f0b4     10 E4 85 F1 | 	sub	objptr, ##28176
0f0b8     0C 4E 05 F1 | 	add	fp, #12
0f0bc     A7 2C 02 FB | 	rdlong	local04, fp
0f0c0     0C 4E 85 F1 | 	sub	fp, #12
0f0c4     06 2C 66 F0 | 	shl	local04, #6
0f0c8     16 13 02 F1 | 	add	arg01, local04
0f0cc     1A 12 06 F1 | 	add	arg01, #26
0f0d0     09 01 5A FC | 	wrword	#256, arg01
0f0d4                 | LR__1243
0f0d4     A7 F0 03 F6 | 	mov	ptra, fp
0f0d8     B2 00 A0 FD | 	call	#popregs_
0f0dc                 | _do_changefreq_ret
0f0dc     2D 00 64 FD | 	ret
0f0e0                 | 
0f0e0                 | ' 
0f0e0                 | ' '-------------------- changepan
0f0e0                 | ' 
0f0e0                 | ' sub do_changepan
0f0e0                 | _do_changepan
0f0e0     01 4A 05 F6 | 	mov	COUNT_, #1
0f0e4     A8 00 A0 FD | 	call	#pushregs_
0f0e8     14 F0 07 F1 | 	add	ptra, #20
0f0ec     18 E6 BF FD | 	call	#_pop
0f0f0     A7 FA 61 FC | 	wrlong	result1, fp
0f0f4     04 4E 05 F1 | 	add	fp, #4
0f0f8     A7 FC 61 FC | 	wrlong	result2, fp
0f0fc     04 4E 05 F1 | 	add	fp, #4
0f100     A7 FE 61 FC | 	wrlong	result3, fp
0f104     08 4E 85 F1 | 	sub	fp, #8
0f108     00 00 23 FF 
0f10c     00 26 06 F6 | 	mov	local01, ##1174405120
0f110     A7 12 02 F6 | 	mov	arg01, fp
0f114     90 E8 BF FD | 	call	#_converttofloat
0f118     FD 14 02 F6 | 	mov	arg02, result1
0f11c     13 13 02 F6 | 	mov	arg01, local01
0f120     F4 AD B1 FD | 	call	#__system___float_mul
0f124     FD 12 02 F6 | 	mov	arg01, result1
0f128     01 14 06 F6 | 	mov	arg02, #1
0f12c     B0 B2 B1 FD | 	call	#__system___float_tointeger
0f130     0D 26 C6 F9 | 	decod	local01, #13
0f134     FD 26 02 F1 | 	add	local01, result1
0f138     10 4E 05 F1 | 	add	fp, #16
0f13c     A7 26 62 FC | 	wrlong	local01, fp
0f140                 | ' 
0f140                 | ' t1=pop()
0f140                 | ' pan=8192+round(8192*converttofloat(t1)) 
0f140                 | ' if pan<0 then pan=0
0f140     10 4E 85 F1 | 	sub	fp, #16
0f144     00 26 56 F2 | 	cmps	local01, #0 wc
0f148     10 4E 05 C1 |  if_b	add	fp, #16
0f14c     A7 00 68 CC |  if_b	wrlong	#0, fp
0f150     10 4E 85 C1 |  if_b	sub	fp, #16
0f154                 | ' if pan>16384 then pan=16384
0f154     10 4E 05 F1 | 	add	fp, #16
0f158     A7 26 02 FB | 	rdlong	local01, fp
0f15c     10 4E 85 F1 | 	sub	fp, #16
0f160     20 00 00 FF 
0f164     01 26 56 F2 | 	cmps	local01, ##16385 wc
0f168     10 4E 05 31 |  if_ae	add	fp, #16
0f16c     20 00 80 3F 
0f170     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0f174     10 4E 85 31 |  if_ae	sub	fp, #16
0f178     8C E5 BF FD | 	call	#_pop
0f17c     FF 26 02 F6 | 	mov	local01, result3
0f180     A7 FA 61 FC | 	wrlong	result1, fp
0f184     04 4E 05 F1 | 	add	fp, #4
0f188     A7 FC 61 FC | 	wrlong	result2, fp
0f18c     04 4E 05 F1 | 	add	fp, #4
0f190     A7 26 62 FC | 	wrlong	local01, fp
0f194     08 4E 85 F1 | 	sub	fp, #8
0f198     A7 12 02 F6 | 	mov	arg01, fp
0f19c     4C E7 BF FD | 	call	#_converttoint
0f1a0     FD 26 52 F6 | 	abs	local01, result1 wc
0f1a4     07 26 06 F5 | 	and	local01, #7
0f1a8     13 27 82 F6 | 	negc	local01, local01
0f1ac     0C 4E 05 F1 | 	add	fp, #12
0f1b0     A7 26 62 FC | 	wrlong	local01, fp
0f1b4     37 00 00 FF 
0f1b8     10 E4 05 F1 | 	add	objptr, ##28176
0f1bc     F2 12 02 FB | 	rdlong	arg01, objptr
0f1c0     37 00 00 FF 
0f1c4     10 E4 85 F1 | 	sub	objptr, ##28176
0f1c8     06 26 66 F0 | 	shl	local01, #6
0f1cc     13 13 02 F1 | 	add	arg01, local01
0f1d0     16 12 06 F1 | 	add	arg01, #22
0f1d4     04 4E 05 F1 | 	add	fp, #4
0f1d8     A7 14 02 FB | 	rdlong	arg02, fp
0f1dc     10 4E 85 F1 | 	sub	fp, #16
0f1e0     09 15 52 FC | 	wrword	arg02, arg01
0f1e4     A7 F0 03 F6 | 	mov	ptra, fp
0f1e8     B2 00 A0 FD | 	call	#popregs_
0f1ec                 | _do_changepan_ret
0f1ec     2D 00 64 FD | 	ret
0f1f0                 | 
0f1f0                 | ' 
0f1f0                 | ' '-------------------- changevol
0f1f0                 | ' 
0f1f0                 | ' sub do_changevol
0f1f0                 | _do_changevol
0f1f0     00 4A 05 F6 | 	mov	COUNT_, #0
0f1f4     A8 00 A0 FD | 	call	#pushregs_
0f1f8     14 F0 07 F1 | 	add	ptra, #20
0f1fc     08 E5 BF FD | 	call	#_pop
0f200     FF 14 02 F6 | 	mov	arg02, result3
0f204     A7 FA 61 FC | 	wrlong	result1, fp
0f208     04 4E 05 F1 | 	add	fp, #4
0f20c     A7 FC 61 FC | 	wrlong	result2, fp
0f210     04 4E 05 F1 | 	add	fp, #4
0f214     A7 14 62 FC | 	wrlong	arg02, fp
0f218     08 4E 85 F1 | 	sub	fp, #8
0f21c     A7 12 02 F6 | 	mov	arg01, fp
0f220     84 E7 BF FD | 	call	#_converttofloat
0f224     FD 12 02 F6 | 	mov	arg01, result1
0f228     00 3D 22 FF 
0f22c     00 14 06 F6 | 	mov	arg02, ##1148846080
0f230     E4 AC B1 FD | 	call	#__system___float_mul
0f234     FD 12 02 F6 | 	mov	arg01, result1
0f238     01 14 06 F6 | 	mov	arg02, #1
0f23c     A0 B1 B1 FD | 	call	#__system___float_tointeger
0f240     FD 14 52 F6 | 	abs	arg02, result1 wc
0f244     0D 14 46 F7 | 	zerox	arg02, #13
0f248     0A 15 82 F6 | 	negc	arg02, arg02
0f24c     10 4E 05 F1 | 	add	fp, #16
0f250     A7 14 62 FC | 	wrlong	arg02, fp
0f254     10 4E 85 F1 | 	sub	fp, #16
0f258     AC E4 BF FD | 	call	#_pop
0f25c     FF 14 02 F6 | 	mov	arg02, result3
0f260     A7 FA 61 FC | 	wrlong	result1, fp
0f264     04 4E 05 F1 | 	add	fp, #4
0f268     A7 FC 61 FC | 	wrlong	result2, fp
0f26c     04 4E 05 F1 | 	add	fp, #4
0f270     A7 14 62 FC | 	wrlong	arg02, fp
0f274     08 4E 85 F1 | 	sub	fp, #8
0f278     A7 12 02 F6 | 	mov	arg01, fp
0f27c     6C E6 BF FD | 	call	#_converttoint
0f280     FD 14 52 F6 | 	abs	arg02, result1 wc
0f284     07 14 06 F5 | 	and	arg02, #7
0f288     0A 15 82 F6 | 	negc	arg02, arg02
0f28c     0C 4E 05 F1 | 	add	fp, #12
0f290     A7 14 62 FC | 	wrlong	arg02, fp
0f294     37 00 00 FF 
0f298     10 E4 05 F1 | 	add	objptr, ##28176
0f29c     F2 12 02 FB | 	rdlong	arg01, objptr
0f2a0     37 00 00 FF 
0f2a4     10 E4 85 F1 | 	sub	objptr, ##28176
0f2a8     06 14 66 F0 | 	shl	arg02, #6
0f2ac     0A 13 02 F1 | 	add	arg01, arg02
0f2b0     14 12 06 F1 | 	add	arg01, #20
0f2b4     04 4E 05 F1 | 	add	fp, #4
0f2b8     A7 14 02 FB | 	rdlong	arg02, fp
0f2bc     10 4E 85 F1 | 	sub	fp, #16
0f2c0     09 15 52 FC | 	wrword	arg02, arg01
0f2c4     A7 F0 03 F6 | 	mov	ptra, fp
0f2c8     B2 00 A0 FD | 	call	#popregs_
0f2cc                 | _do_changevol_ret
0f2cc     2D 00 64 FD | 	ret
0f2d0                 | 
0f2d0                 | ' 
0f2d0                 | ' '-------------------- changewav
0f2d0                 | ' 
0f2d0                 | ' sub do_changewav
0f2d0                 | _do_changewav
0f2d0     00 4A 05 F6 | 	mov	COUNT_, #0
0f2d4     A8 00 A0 FD | 	call	#pushregs_
0f2d8     14 F0 07 F1 | 	add	ptra, #20
0f2dc     28 E4 BF FD | 	call	#_pop
0f2e0     FF 14 02 F6 | 	mov	arg02, result3
0f2e4     A7 FA 61 FC | 	wrlong	result1, fp
0f2e8     04 4E 05 F1 | 	add	fp, #4
0f2ec     A7 FC 61 FC | 	wrlong	result2, fp
0f2f0     04 4E 05 F1 | 	add	fp, #4
0f2f4     A7 14 62 FC | 	wrlong	arg02, fp
0f2f8     08 4E 85 F1 | 	sub	fp, #8
0f2fc     A7 12 02 F6 | 	mov	arg01, fp
0f300     E8 E5 BF FD | 	call	#_converttoint
0f304     10 4E 05 F1 | 	add	fp, #16
0f308     A7 FA 61 FC | 	wrlong	result1, fp
0f30c                 | ' 
0f30c                 | ' t1=pop()
0f30c                 | ' wave=converttoint(t1)
0f30c                 | ' if wave<0 then wave=0
0f30c     FD 14 02 F6 | 	mov	arg02, result1
0f310     10 4E 85 F1 | 	sub	fp, #16
0f314     00 14 56 F2 | 	cmps	arg02, #0 wc
0f318     10 4E 05 C1 |  if_b	add	fp, #16
0f31c     A7 00 68 CC |  if_b	wrlong	#0, fp
0f320     10 4E 85 C1 |  if_b	sub	fp, #16
0f324     E0 E3 BF FD | 	call	#_pop
0f328     FF 14 02 F6 | 	mov	arg02, result3
0f32c     A7 FA 61 FC | 	wrlong	result1, fp
0f330     04 4E 05 F1 | 	add	fp, #4
0f334     A7 FC 61 FC | 	wrlong	result2, fp
0f338     04 4E 05 F1 | 	add	fp, #4
0f33c     A7 14 62 FC | 	wrlong	arg02, fp
0f340     08 4E 85 F1 | 	sub	fp, #8
0f344     A7 12 02 F6 | 	mov	arg01, fp
0f348     A0 E5 BF FD | 	call	#_converttoint
0f34c     FD 14 52 F6 | 	abs	arg02, result1 wc
0f350     07 14 06 F5 | 	and	arg02, #7
0f354     0A 15 82 F6 | 	negc	arg02, arg02
0f358     0C 4E 05 F1 | 	add	fp, #12
0f35c     A7 14 62 FC | 	wrlong	arg02, fp
0f360                 | ' if wave <32 then 
0f360     04 4E 05 F1 | 	add	fp, #4
0f364     A7 14 02 FB | 	rdlong	arg02, fp
0f368     10 4E 85 F1 | 	sub	fp, #16
0f36c     20 14 56 F2 | 	cmps	arg02, #32 wc
0f370     48 00 90 3D |  if_ae	jmp	#LR__1250
0f374     37 00 00 FF 
0f378     10 E4 05 F1 | 	add	objptr, ##28176
0f37c     F2 12 02 FB | 	rdlong	arg01, objptr
0f380     37 00 00 FF 
0f384     10 E4 85 F1 | 	sub	objptr, ##28176
0f388     0C 4E 05 F1 | 	add	fp, #12
0f38c     A7 14 02 FB | 	rdlong	arg02, fp
0f390     06 14 66 F0 | 	shl	arg02, #6
0f394     0A 13 02 F1 | 	add	arg01, arg02
0f398     08 12 06 F1 | 	add	arg01, #8
0f39c     04 4E 05 F1 | 	add	fp, #4
0f3a0     A7 14 02 FB | 	rdlong	arg02, fp
0f3a4     10 4E 85 F1 | 	sub	fp, #16
0f3a8     0B 14 66 F0 | 	shl	arg02, #11
0f3ac     00 00 40 FF 
0f3b0     00 14 06 F1 | 	add	arg02, ##-2147483648
0f3b4     09 15 62 FC | 	wrlong	arg02, arg01
0f3b8     34 00 90 FD | 	jmp	#LR__1251
0f3bc                 | LR__1250
0f3bc     37 00 00 FF 
0f3c0     10 E4 05 F1 | 	add	objptr, ##28176
0f3c4     F2 12 02 FB | 	rdlong	arg01, objptr
0f3c8     37 00 00 FF 
0f3cc     10 E4 85 F1 | 	sub	objptr, ##28176
0f3d0     0C 4E 05 F1 | 	add	fp, #12
0f3d4     A7 14 02 FB | 	rdlong	arg02, fp
0f3d8     0C 4E 85 F1 | 	sub	fp, #12
0f3dc     06 14 66 F0 | 	shl	arg02, #6
0f3e0     0A 13 02 F1 | 	add	arg01, arg02
0f3e4     08 12 06 F1 | 	add	arg01, #8
0f3e8     00 00 C4 FF 
0f3ec     09 01 68 FC | 	wrlong	##-2013265920, arg01
0f3f0                 | LR__1251
0f3f0     A7 F0 03 F6 | 	mov	ptra, fp
0f3f4     B2 00 A0 FD | 	call	#popregs_
0f3f8                 | _do_changewav_ret
0f3f8     2D 00 64 FD | 	ret
0f3fc                 | 
0f3fc                 | ' 
0f3fc                 | ' '-------------------- chr$
0f3fc                 | ' 
0f3fc                 | ' sub do_chr
0f3fc                 | _do_chr
0f3fc     01 4A 05 F6 | 	mov	COUNT_, #1
0f400     A8 00 A0 FD | 	call	#pushregs_
0f404     14 F0 07 F1 | 	add	ptra, #20
0f408     4A 00 00 FF 
0f40c     80 E4 05 F1 | 	add	objptr, ##38016
0f410     F2 26 02 FB | 	rdlong	local01, objptr
0f414     13 17 02 F6 | 	mov	arg03, local01
0f418     01 16 66 F0 | 	shl	arg03, #1
0f41c     13 17 02 F1 | 	add	arg03, local01
0f420     02 16 66 F0 | 	shl	arg03, #2
0f424     03 00 00 FF 
0f428     04 E4 85 F1 | 	sub	objptr, ##1540
0f42c     F2 16 02 F1 | 	add	arg03, objptr
0f430     0B 17 02 FB | 	rdlong	arg03, arg03
0f434     0C 4E 05 F1 | 	add	fp, #12
0f438     A7 16 62 FC | 	wrlong	arg03, fp
0f43c                 | ' 
0f43c                 | ' numpar=compiledline(lineptr_e).result.uresult
0f43c                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f43c     0C 4E 85 F1 | 	sub	fp, #12
0f440     02 16 16 F2 | 	cmp	arg03, #2 wc
0f444     47 00 00 FF 
0f448     7C E4 85 F1 | 	sub	objptr, ##36476
0f44c     0C 4E 05 C1 |  if_b	add	fp, #12
0f450     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f454     0C 4E 85 C1 |  if_b	sub	fp, #12
0f458     40 00 90 4D |  if_c_and_nz	jmp	#LR__1260
0f45c     00 12 06 F6 | 	mov	arg01, #0
0f460     DC D8 B1 FD | 	call	#__system___getiolock_0614
0f464     FD 12 02 F6 | 	mov	arg01, result1
0f468     30 7C B1 FD | 	call	#__system___lockmem
0f46c     BA 01 00 FF 
0f470     2D 14 06 F6 | 	mov	arg02, ##@LR__5922
0f474     00 12 06 F6 | 	mov	arg01, #0
0f478     00 16 06 F6 | 	mov	arg03, #0
0f47c     14 89 B1 FD | 	call	#__system___basic_print_string
0f480     00 12 06 F6 | 	mov	arg01, #0
0f484     B8 D8 B1 FD | 	call	#__system___getiolock_0614
0f488     FD 00 68 FC | 	wrlong	#0, result1
0f48c     27 12 06 F6 | 	mov	arg01, #39
0f490     00 14 06 F6 | 	mov	arg02, #0
0f494     54 41 B1 FD | 	call	#_printerror
0f498     54 00 90 FD | 	jmp	#LR__1261
0f49c                 | LR__1260
0f49c     68 E2 BF FD | 	call	#_pop
0f4a0     FF 26 02 F6 | 	mov	local01, result3
0f4a4     A7 FA 61 FC | 	wrlong	result1, fp
0f4a8     04 4E 05 F1 | 	add	fp, #4
0f4ac     A7 FC 61 FC | 	wrlong	result2, fp
0f4b0     04 4E 05 F1 | 	add	fp, #4
0f4b4     A7 26 62 FC | 	wrlong	local01, fp
0f4b8     08 4E 85 F1 | 	sub	fp, #8
0f4bc     A7 12 02 F6 | 	mov	arg01, fp
0f4c0     28 E4 BF FD | 	call	#_converttoint
0f4c4     10 4E 05 F1 | 	add	fp, #16
0f4c8     A7 FA 61 FC | 	wrlong	result1, fp
0f4cc     FD 12 02 F6 | 	mov	arg01, result1
0f4d0     10 4E 85 F1 | 	sub	fp, #16
0f4d4     08 9E B1 FD | 	call	#__system__Chr_S
0f4d8     A7 FA 61 FC | 	wrlong	result1, fp
0f4dc     08 4E 05 F1 | 	add	fp, #8
0f4e0     A7 3E 68 FC | 	wrlong	#31, fp
0f4e4     08 4E 85 F1 | 	sub	fp, #8
0f4e8     A7 12 02 F6 | 	mov	arg01, fp
0f4ec     B0 E2 BF FD | 	call	#_push
0f4f0                 | LR__1261
0f4f0     A7 F0 03 F6 | 	mov	ptra, fp
0f4f4     B2 00 A0 FD | 	call	#popregs_
0f4f8                 | _do_chr_ret
0f4f8     2D 00 64 FD | 	ret
0f4fc                 | 
0f4fc                 | ' 
0f4fc                 | ' '-------------------- circle
0f4fc                 | ' 
0f4fc                 | ' sub do_circle
0f4fc                 | _do_circle
0f4fc     02 4A 05 F6 | 	mov	COUNT_, #2
0f500     A8 00 A0 FD | 	call	#pushregs_
0f504     24 F0 07 F1 | 	add	ptra, #36
0f508     FC E1 BF FD | 	call	#_pop
0f50c     FD 18 02 F6 | 	mov	arg04, result1
0f510     FE 16 02 F6 | 	mov	arg03, result2
0f514     FF 14 02 F6 | 	mov	arg02, result3
0f518     18 4E 05 F1 | 	add	fp, #24
0f51c     A7 18 62 FC | 	wrlong	arg04, fp
0f520     04 4E 05 F1 | 	add	fp, #4
0f524     A7 16 62 FC | 	wrlong	arg03, fp
0f528     04 4E 05 F1 | 	add	fp, #4
0f52c     A7 14 62 FC | 	wrlong	arg02, fp
0f530     20 4E 85 F1 | 	sub	fp, #32
0f534     D0 E1 BF FD | 	call	#_pop
0f538     FD 18 02 F6 | 	mov	arg04, result1
0f53c     FE 16 02 F6 | 	mov	arg03, result2
0f540     FF 26 02 F6 | 	mov	local01, result3
0f544     0C 4E 05 F1 | 	add	fp, #12
0f548     A7 18 62 FC | 	wrlong	arg04, fp
0f54c     04 4E 05 F1 | 	add	fp, #4
0f550     A7 16 62 FC | 	wrlong	arg03, fp
0f554     04 4E 05 F1 | 	add	fp, #4
0f558     A7 26 62 FC | 	wrlong	local01, fp
0f55c     14 4E 85 F1 | 	sub	fp, #20
0f560     A4 E1 BF FD | 	call	#_pop
0f564     A7 FA 61 FC | 	wrlong	result1, fp
0f568     04 4E 05 F1 | 	add	fp, #4
0f56c     A7 FC 61 FC | 	wrlong	result2, fp
0f570     04 4E 05 F1 | 	add	fp, #4
0f574     A7 FE 61 FC | 	wrlong	result3, fp
0f578                 | ' 
0f578                 | ' t3=pop()
0f578                 | ' t2=pop()
0f578                 | ' t1=pop()
0f578                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f578     FF 18 02 F6 | 	mov	arg04, result3
0f57c     08 4E 85 F1 | 	sub	fp, #8
0f580     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f584     08 4E 05 51 |  if_ne	add	fp, #8
0f588     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f58c     08 4E 85 51 |  if_ne	sub	fp, #8
0f590     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f594     7C 00 90 5D |  if_ne	jmp	#LR__1270
0f598     14 4E 05 F1 | 	add	fp, #20
0f59c     A7 26 02 FB | 	rdlong	local01, fp
0f5a0     14 4E 85 F1 | 	sub	fp, #20
0f5a4     1C 26 0E F2 | 	cmp	local01, #28 wz
0f5a8     14 4E 05 51 |  if_ne	add	fp, #20
0f5ac     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f5b0     14 4E 85 51 |  if_ne	sub	fp, #20
0f5b4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f5b8     58 00 90 5D |  if_ne	jmp	#LR__1270
0f5bc     20 4E 05 F1 | 	add	fp, #32
0f5c0     A7 26 02 FB | 	rdlong	local01, fp
0f5c4     20 4E 85 F1 | 	sub	fp, #32
0f5c8     1C 26 0E F2 | 	cmp	local01, #28 wz
0f5cc     20 4E 05 51 |  if_ne	add	fp, #32
0f5d0     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f5d4     20 4E 85 51 |  if_ne	sub	fp, #32
0f5d8     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f5dc     34 00 90 5D |  if_ne	jmp	#LR__1270
0f5e0     A7 12 02 FB | 	rdlong	arg01, fp
0f5e4     0C 4E 05 F1 | 	add	fp, #12
0f5e8     A7 14 02 FB | 	rdlong	arg02, fp
0f5ec     0C 4E 05 F1 | 	add	fp, #12
0f5f0     A7 16 02 FB | 	rdlong	arg03, fp
0f5f4     18 4E 85 F1 | 	sub	fp, #24
0f5f8     37 00 00 FF 
0f5fc     28 E4 05 F1 | 	add	objptr, ##28200
0f600     F2 18 02 FB | 	rdlong	arg04, objptr
0f604     37 00 00 FF 
0f608     28 E4 85 F1 | 	sub	objptr, ##28200
0f60c     D4 58 B1 FD | 	call	#_hg010b_spin2_circle
0f610                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f610     54 00 90 FD | 	jmp	#LR__1271
0f614                 | LR__1270
0f614     A7 12 02 F6 | 	mov	arg01, fp
0f618     D0 E2 BF FD | 	call	#_converttoint
0f61c     FD 26 02 F6 | 	mov	local01, result1
0f620     0C 4E 05 F1 | 	add	fp, #12
0f624     A7 12 02 F6 | 	mov	arg01, fp
0f628     0C 4E 85 F1 | 	sub	fp, #12
0f62c     BC E2 BF FD | 	call	#_converttoint
0f630     FD 28 02 F6 | 	mov	local02, result1
0f634     18 4E 05 F1 | 	add	fp, #24
0f638     A7 12 02 F6 | 	mov	arg01, fp
0f63c     18 4E 85 F1 | 	sub	fp, #24
0f640     A8 E2 BF FD | 	call	#_converttoint
0f644     FD 16 02 F6 | 	mov	arg03, result1
0f648     37 00 00 FF 
0f64c     28 E4 05 F1 | 	add	objptr, ##28200
0f650     F2 18 02 FB | 	rdlong	arg04, objptr
0f654     37 00 00 FF 
0f658     28 E4 85 F1 | 	sub	objptr, ##28200
0f65c     13 13 02 F6 | 	mov	arg01, local01
0f660     14 15 02 F6 | 	mov	arg02, local02
0f664     7C 58 B1 FD | 	call	#_hg010b_spin2_circle
0f668                 | LR__1271
0f668     A7 F0 03 F6 | 	mov	ptra, fp
0f66c     B2 00 A0 FD | 	call	#popregs_
0f670                 | _do_circle_ret
0f670     2D 00 64 FD | 	ret
0f674                 | 
0f674                 | ' 
0f674                 | ' '-------------------- click
0f674                 | ' 
0f674                 | ' sub do_click
0f674                 | _do_click
0f674     90 E0 BF FD | 	call	#_pop
0f678     00 FA 4D F2 | 	cmps	result1, #0 wz
0f67c                 | ' 
0f67c                 | ' t1=pop()
0f67c                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f67c     50 00 00 AF 
0f680     3C E5 05 A1 |  if_e	add	objptr, ##41276
0f684     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f688     50 00 00 FF 
0f68c     3C E5 C5 F3 | 	sumz	objptr, ##41276
0f690     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f694     50 00 00 5F 
0f698     3C E5 85 51 |  if_ne	sub	objptr, ##41276
0f69c                 | _do_click_ret
0f69c     2D 00 64 FD | 	ret
0f6a0                 | 
0f6a0                 | ' 
0f6a0                 | ' '-------------------- close
0f6a0                 | ' 
0f6a0                 | ' sub do_close
0f6a0                 | _do_close
0f6a0     03 4A 05 F6 | 	mov	COUNT_, #3
0f6a4     A8 00 A0 FD | 	call	#pushregs_
0f6a8     5C E0 BF FD | 	call	#_pop
0f6ac     FD 26 02 F6 | 	mov	local01, result1
0f6b0     FF 16 02 F6 | 	mov	arg03, result3
0f6b4     FE 28 02 F6 | 	mov	local02, result2
0f6b8     0B 2B 02 F6 | 	mov	local03, arg03
0f6bc                 | ' 
0f6bc                 | ' numpar=compiledline(lineptr_e).result.uresult
0f6bc                 | ' t1=pop()
0f6bc                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f6bc     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f6c0     44 00 90 AD |  if_e	jmp	#LR__1280
0f6c4     00 12 06 F6 | 	mov	arg01, #0
0f6c8     74 D6 B1 FD | 	call	#__system___getiolock_0614
0f6cc     FD 12 02 F6 | 	mov	arg01, result1
0f6d0     C8 79 B1 FD | 	call	#__system___lockmem
0f6d4     BA 01 00 FF 
0f6d8     34 14 06 F6 | 	mov	arg02, ##@LR__5923
0f6dc     00 12 06 F6 | 	mov	arg01, #0
0f6e0     00 16 06 F6 | 	mov	arg03, #0
0f6e4     AC 86 B1 FD | 	call	#__system___basic_print_string
0f6e8     00 12 06 F6 | 	mov	arg01, #0
0f6ec     0A 14 06 F6 | 	mov	arg02, #10
0f6f0     00 16 06 F6 | 	mov	arg03, #0
0f6f4     44 86 B1 FD | 	call	#__system___basic_print_char
0f6f8     00 12 06 F6 | 	mov	arg01, #0
0f6fc     40 D6 B1 FD | 	call	#__system___getiolock_0614
0f700     FD 00 68 FC | 	wrlong	#0, result1
0f704     08 00 90 FD | 	jmp	#LR__1281
0f708                 | LR__1280
0f708                 | ' channel  = t1.result.iresult
0f708                 | ' close #channel
0f708     13 13 02 F6 | 	mov	arg01, local01
0f70c     E8 CC B1 FD | 	call	#__system__close
0f710                 | LR__1281
0f710     A7 F0 03 F6 | 	mov	ptra, fp
0f714     B2 00 A0 FD | 	call	#popregs_
0f718                 | _do_close_ret
0f718     2D 00 64 FD | 	ret
0f71c                 | 
0f71c                 | ' 
0f71c                 | ' '-------------------- cls
0f71c                 | ' 
0f71c                 | ' sub do_cls
0f71c                 | _do_cls
0f71c     37 00 00 FF 
0f720     3C E4 05 F1 | 	add	objptr, ##28220
0f724     F2 12 02 FB | 	rdlong	arg01, objptr
0f728     04 E4 85 F1 | 	sub	objptr, #4
0f72c     F2 14 02 FB | 	rdlong	arg02, objptr
0f730     37 00 00 FF 
0f734     38 E4 85 F1 | 	sub	objptr, ##28216
0f738     6C 5C B1 FD | 	call	#_hg010b_spin2_cls
0f73c     37 00 00 FF 
0f740     3C E4 05 F1 | 	add	objptr, ##28220
0f744     F2 14 02 FB | 	rdlong	arg02, objptr
0f748     14 E4 85 F1 | 	sub	objptr, #20
0f74c     F2 14 62 FC | 	wrlong	arg02, objptr
0f750     37 00 00 FF 
0f754     28 E4 85 F1 | 	sub	objptr, ##28200
0f758                 | _do_cls_ret
0f758     2D 00 64 FD | 	ret
0f75c                 | 
0f75c                 | ' 
0f75c                 | ' sub do_coginit
0f75c                 | _do_coginit
0f75c     00 4A 05 F6 | 	mov	COUNT_, #0
0f760     A8 00 A0 FD | 	call	#pushregs_
0f764     08 00 00 FF 
0f768     1C F0 07 F1 | 	add	ptra, ##4124
0f76c     4A 00 00 FF 
0f770     80 E4 05 F1 | 	add	objptr, ##38016
0f774     F2 FA 01 FB | 	rdlong	result1, objptr
0f778     FD FC 01 F6 | 	mov	result2, result1
0f77c     01 FC 65 F0 | 	shl	result2, #1
0f780     FD FC 01 F1 | 	add	result2, result1
0f784     02 FC 65 F0 | 	shl	result2, #2
0f788     03 00 00 FF 
0f78c     04 E4 85 F1 | 	sub	objptr, ##1540
0f790     F2 FC 01 F1 | 	add	result2, objptr
0f794     FE FC 01 FB | 	rdlong	result2, result2
0f798     A7 FC 61 FC | 	wrlong	result2, fp
0f79c                 | ' numpar=compiledline(lineptr_e).result.uresult
0f79c                 | ' if numpar<2 orelse numpar>3 then print "coginit: "; : printerror(39) : return
0f79c     02 FC 55 F2 | 	cmps	result2, #2 wc
0f7a0     47 00 00 FF 
0f7a4     7C E4 85 F1 | 	sub	objptr, ##36476
0f7a8     0C 00 90 CD |  if_b	jmp	#LR__1290
0f7ac     A7 FA 01 FB | 	rdlong	result1, fp
0f7b0     04 FA 55 F2 | 	cmps	result1, #4 wc
0f7b4     40 00 90 CD |  if_b	jmp	#LR__1291
0f7b8                 | LR__1290
0f7b8     00 12 06 F6 | 	mov	arg01, #0
0f7bc     80 D5 B1 FD | 	call	#__system___getiolock_0614
0f7c0     FD 12 02 F6 | 	mov	arg01, result1
0f7c4     D4 78 B1 FD | 	call	#__system___lockmem
0f7c8     BA 01 00 FF 
0f7cc     46 14 06 F6 | 	mov	arg02, ##@LR__5924
0f7d0     00 12 06 F6 | 	mov	arg01, #0
0f7d4     00 16 06 F6 | 	mov	arg03, #0
0f7d8     B8 85 B1 FD | 	call	#__system___basic_print_string
0f7dc     00 12 06 F6 | 	mov	arg01, #0
0f7e0     5C D5 B1 FD | 	call	#__system___getiolock_0614
0f7e4     FD 00 68 FC | 	wrlong	#0, result1
0f7e8     27 12 06 F6 | 	mov	arg01, #39
0f7ec     00 14 06 F6 | 	mov	arg02, #0
0f7f0     F8 3D B1 FD | 	call	#_printerror
0f7f4     94 01 90 FD | 	jmp	#LR__1295
0f7f8                 | LR__1291
0f7f8     0C DF BF FD | 	call	#_pop
0f7fc     FF 16 02 F6 | 	mov	arg03, result3
0f800     08 00 00 FF 
0f804     10 4E 05 F1 | 	add	fp, ##4112
0f808     A7 FA 61 FC | 	wrlong	result1, fp
0f80c     04 4E 05 F1 | 	add	fp, #4
0f810     A7 FC 61 FC | 	wrlong	result2, fp
0f814     04 4E 05 F1 | 	add	fp, #4
0f818     A7 16 62 FC | 	wrlong	arg03, fp
0f81c     08 4E 85 F1 | 	sub	fp, #8
0f820     A7 12 02 F6 | 	mov	arg01, fp
0f824     08 00 00 FF 
0f828     10 4E 85 F1 | 	sub	fp, ##4112
0f82c     BC E0 BF FD | 	call	#_converttoint
0f830     FD 16 02 F6 | 	mov	arg03, result1
0f834     04 4E 05 F1 | 	add	fp, #4
0f838     A7 16 62 FC | 	wrlong	arg03, fp
0f83c     04 4E 85 F1 | 	sub	fp, #4
0f840     C4 DE BF FD | 	call	#_pop
0f844     FF 16 02 F6 | 	mov	arg03, result3
0f848     08 00 00 FF 
0f84c     10 4E 05 F1 | 	add	fp, ##4112
0f850     A7 FA 61 FC | 	wrlong	result1, fp
0f854     04 4E 05 F1 | 	add	fp, #4
0f858     A7 FC 61 FC | 	wrlong	result2, fp
0f85c     04 4E 05 F1 | 	add	fp, #4
0f860     A7 16 62 FC | 	wrlong	arg03, fp
0f864     08 4E 85 F1 | 	sub	fp, #8
0f868     A7 12 02 F6 | 	mov	arg01, fp
0f86c     08 00 00 FF 
0f870     10 4E 85 F1 | 	sub	fp, ##4112
0f874     74 E0 BF FD | 	call	#_converttoint
0f878     08 4E 05 F1 | 	add	fp, #8
0f87c     A7 FA 61 FC | 	wrlong	result1, fp
0f880     08 4E 85 F1 | 	sub	fp, #8
0f884                 | ' t1=pop()
0f884                 | ' ptra_val=converttoint(t1)
0f884                 | ' t1=pop()
0f884                 | ' addrval=converttoint(t1)
0f884                 | ' if numpar=3 then 
0f884     A7 FA 01 FB | 	rdlong	result1, fp
0f888     03 FA 0D F2 | 	cmp	result1, #3 wz
0f88c     48 00 90 5D |  if_ne	jmp	#LR__1292
0f890     74 DE BF FD | 	call	#_pop
0f894     FF 16 02 F6 | 	mov	arg03, result3
0f898     08 00 00 FF 
0f89c     10 4E 05 F1 | 	add	fp, ##4112
0f8a0     A7 FA 61 FC | 	wrlong	result1, fp
0f8a4     04 4E 05 F1 | 	add	fp, #4
0f8a8     A7 FC 61 FC | 	wrlong	result2, fp
0f8ac     04 4E 05 F1 | 	add	fp, #4
0f8b0     A7 16 62 FC | 	wrlong	arg03, fp
0f8b4     08 4E 85 F1 | 	sub	fp, #8
0f8b8     A7 12 02 F6 | 	mov	arg01, fp
0f8bc     08 00 00 FF 
0f8c0     10 4E 85 F1 | 	sub	fp, ##4112
0f8c4     24 E0 BF FD | 	call	#_converttoint
0f8c8     0C 4E 05 F1 | 	add	fp, #12
0f8cc     A7 FA 61 FC | 	wrlong	result1, fp
0f8d0     0C 4E 85 F1 | 	sub	fp, #12
0f8d4     0C 00 90 FD | 	jmp	#LR__1293
0f8d8                 | LR__1292
0f8d8     0C 4E 05 F1 | 	add	fp, #12
0f8dc     A7 20 68 FC | 	wrlong	#16, fp
0f8e0     0C 4E 85 F1 | 	sub	fp, #12
0f8e4                 | LR__1293
0f8e4                 | '     
0f8e4                 | ' if addrval>$80000 then psram.read1(varptr(tempbuf(0)),addrval,4096) : addrval=varptr(tempbuf(0))
0f8e4     08 4E 05 F1 | 	add	fp, #8
0f8e8     A7 16 02 FB | 	rdlong	arg03, fp
0f8ec     08 4E 85 F1 | 	sub	fp, #8
0f8f0     00 04 00 FF 
0f8f4     01 16 56 F2 | 	cmps	arg03, ##524289 wc
0f8f8     40 00 90 CD |  if_b	jmp	#LR__1294
0f8fc     10 4E 05 F1 | 	add	fp, #16
0f900     A7 12 02 F6 | 	mov	arg01, fp
0f904     08 4E 85 F1 | 	sub	fp, #8
0f908     A7 14 02 FB | 	rdlong	arg02, fp
0f90c     08 4E 85 F1 | 	sub	fp, #8
0f910     0C 16 C6 F9 | 	decod	arg03, #12
0f914     0B 00 00 FF 
0f918     CC E4 05 F1 | 	add	objptr, ##5836
0f91c     84 6A B1 FD | 	call	#_psram_spin2_read1
0f920     0B 00 00 FF 
0f924     CC E4 85 F1 | 	sub	objptr, ##5836
0f928     10 4E 05 F1 | 	add	fp, #16
0f92c     A7 FA 01 F6 | 	mov	result1, fp
0f930     08 4E 85 F1 | 	sub	fp, #8
0f934     A7 FA 61 FC | 	wrlong	result1, fp
0f938     08 4E 85 F1 | 	sub	fp, #8
0f93c                 | LR__1294
0f93c     0C 4E 05 F1 | 	add	fp, #12
0f940     A7 FA 01 FB | 	rdlong	result1, fp
0f944     04 4E 85 F1 | 	sub	fp, #4
0f948     A7 14 02 FB | 	rdlong	arg02, fp
0f94c     04 4E 85 F1 | 	sub	fp, #4
0f950     A7 16 02 FB | 	rdlong	arg03, fp
0f954                 | ' 
0f954                 | '  asm
0f954     28 16 62 FD | 	setq	arg03
0f958     0A FB F1 FC | 	coginit	result1, arg02 wc
0f95c                 | '  
0f95c                 | ' return cog 
0f95c     08 4E 05 F1 | 	add	fp, #8
0f960     A7 FA 61 FC | 	wrlong	result1, fp
0f964     08 00 00 FF 
0f968     04 4E 05 F1 | 	add	fp, ##4100
0f96c     A7 FA 61 FC | 	wrlong	result1, fp
0f970     08 4E 05 F1 | 	add	fp, #8
0f974     A7 38 68 FC | 	wrlong	#28, fp
0f978     08 4E 85 F1 | 	sub	fp, #8
0f97c     A7 12 02 F6 | 	mov	arg01, fp
0f980     08 00 00 FF 
0f984     10 4E 85 F1 | 	sub	fp, ##4112
0f988     14 DE BF FD | 	call	#_push
0f98c                 | LR__1295
0f98c     A7 F0 03 F6 | 	mov	ptra, fp
0f990     B2 00 A0 FD | 	call	#popregs_
0f994                 | _do_coginit_ret
0f994     2D 00 64 FD | 	ret
0f998                 | 
0f998                 | ' 
0f998                 | ' '-------------------- cogstop
0f998                 | ' 
0f998                 | ' sub do_cogstop
0f998                 | _do_cogstop
0f998     00 4A 05 F6 | 	mov	COUNT_, #0
0f99c     A8 00 A0 FD | 	call	#pushregs_
0f9a0     0C F0 07 F1 | 	add	ptra, #12
0f9a4     60 DD BF FD | 	call	#_pop
0f9a8     A7 FA 61 FC | 	wrlong	result1, fp
0f9ac     04 4E 05 F1 | 	add	fp, #4
0f9b0     A7 FC 61 FC | 	wrlong	result2, fp
0f9b4     04 4E 05 F1 | 	add	fp, #4
0f9b8     A7 FE 61 FC | 	wrlong	result3, fp
0f9bc     08 4E 85 F1 | 	sub	fp, #8
0f9c0     A7 12 02 F6 | 	mov	arg01, fp
0f9c4     24 DF BF FD | 	call	#_converttoint
0f9c8     03 FA 61 FD | 	cogstop	result1
0f9cc     A7 F0 03 F6 | 	mov	ptra, fp
0f9d0     B2 00 A0 FD | 	call	#popregs_
0f9d4                 | _do_cogstop_ret
0f9d4     2D 00 64 FD | 	ret
0f9d8                 | 
0f9d8                 | ' 
0f9d8                 | ' '-------------------- color
0f9d8                 | ' 
0f9d8                 | ' sub do_color
0f9d8                 | _do_color
0f9d8     03 4A 05 F6 | 	mov	COUNT_, #3
0f9dc     A8 00 A0 FD | 	call	#pushregs_
0f9e0     24 DD BF FD | 	call	#_pop
0f9e4     FD 26 02 F6 | 	mov	local01, result1
0f9e8     FE 28 02 F6 | 	mov	local02, result2
0f9ec     FF 2A 02 F6 | 	mov	local03, result3
0f9f0     37 00 00 FF 
0f9f4     28 E4 05 F1 | 	add	objptr, ##28200
0f9f8     F2 26 62 FC | 	wrlong	local01, objptr
0f9fc     37 00 00 FF 
0fa00     28 E4 85 F1 | 	sub	objptr, ##28200
0fa04     A7 F0 03 F6 | 	mov	ptra, fp
0fa08     B2 00 A0 FD | 	call	#popregs_
0fa0c                 | _do_color_ret
0fa0c     2D 00 64 FD | 	ret
0fa10                 | 
0fa10                 | ' 
0fa10                 | ' '-------------------- copy
0fa10                 | ' 
0fa10                 | ' sub do_copy
0fa10                 | _do_copy
0fa10     08 4A 05 F6 | 	mov	COUNT_, #8
0fa14     A8 00 A0 FD | 	call	#pushregs_
0fa18     EC DC BF FD | 	call	#_pop
0fa1c     FD 26 02 F6 | 	mov	local01, result1
0fa20     FE 1A 02 F6 | 	mov	arg05, result2
0fa24     FF 18 02 F6 | 	mov	arg04, result3
0fa28     0D 29 02 F6 | 	mov	local02, arg05
0fa2c     0C 2B 02 F6 | 	mov	local03, arg04
0fa30     D4 DC BF FD | 	call	#_pop
0fa34     FE 1A 02 F6 | 	mov	arg05, result2
0fa38     FF 18 02 F6 | 	mov	arg04, result3
0fa3c     FD 2C 02 F6 | 	mov	local04, result1
0fa40     0D 2F 02 F6 | 	mov	local05, arg05
0fa44     0C 31 02 F6 | 	mov	local06, arg04
0fa48                 | ' 
0fa48                 | ' t1=pop()
0fa48                 | ' t2=pop()
0fa48                 | ' if t2.result_type=result_string2 then 
0fa48     2B 30 0E F2 | 	cmp	local06, #43 wz
0fa4c     10 00 90 5D |  if_ne	jmp	#LR__1300
0fa50     16 13 02 F6 | 	mov	arg01, local04
0fa54     28 DE BF FD | 	call	#_convertstring
0fa58     FD 32 02 F6 | 	mov	local07, result1
0fa5c     2C 00 90 FD | 	jmp	#LR__1302
0fa60                 | LR__1300
0fa60     1F 30 0E F2 | 	cmp	local06, #31 wz
0fa64     16 33 02 A6 |  if_e	mov	local07, local04
0fa68     20 00 90 AD |  if_e	jmp	#LR__1301
0fa6c     50 00 00 FF 
0fa70     F0 E4 05 F1 | 	add	objptr, ##41200
0fa74     F2 14 02 FB | 	rdlong	arg02, objptr
0fa78     50 00 00 FF 
0fa7c     F0 E4 85 F1 | 	sub	objptr, ##41200
0fa80     0F 12 06 F6 | 	mov	arg01, #15
0fa84     64 3B B1 FD | 	call	#_printerror
0fa88                 | '   printerror(15,runheader(0)) : return
0fa88     58 03 90 FD | 	jmp	#LR__1309
0fa8c                 | LR__1301
0fa8c                 | LR__1302
0fa8c                 | ' if t1.result_type=result_string2 then 
0fa8c     2B 2A 0E F2 | 	cmp	local03, #43 wz
0fa90     10 00 90 5D |  if_ne	jmp	#LR__1303
0fa94     13 13 02 F6 | 	mov	arg01, local01
0fa98     E4 DD BF FD | 	call	#_convertstring
0fa9c     FD 34 02 F6 | 	mov	local08, result1
0faa0     2C 00 90 FD | 	jmp	#LR__1305
0faa4                 | LR__1303
0faa4     1F 2A 0E F2 | 	cmp	local03, #31 wz
0faa8     13 35 02 A6 |  if_e	mov	local08, local01
0faac     20 00 90 AD |  if_e	jmp	#LR__1304
0fab0     50 00 00 FF 
0fab4     F0 E4 05 F1 | 	add	objptr, ##41200
0fab8     F2 14 02 FB | 	rdlong	arg02, objptr
0fabc     50 00 00 FF 
0fac0     F0 E4 85 F1 | 	sub	objptr, ##41200
0fac4     0F 12 06 F6 | 	mov	arg01, #15
0fac8     20 3B B1 FD | 	call	#_printerror
0facc                 | '   printerror(15,runheader(0)) : return
0facc     14 03 90 FD | 	jmp	#LR__1309
0fad0                 | LR__1304
0fad0                 | LR__1305
0fad0                 | ' 
0fad0                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0fad0     09 12 06 F6 | 	mov	arg01, #9
0fad4     19 15 02 F6 | 	mov	arg02, local07
0fad8     00 16 06 F6 | 	mov	arg03, #0
0fadc     C0 81 B1 FD | 	call	#__system___basic_open_string
0fae0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fae4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0fae8     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0faec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0faf0     52 00 00 FF 
0faf4     D8 E4 05 F1 | 	add	objptr, ##42200
0faf8     F2 FA 61 FC | 	wrlong	result1, objptr
0fafc     52 00 00 FF 
0fb00     D8 E4 85 F1 | 	sub	objptr, ##42200
0fb04     0C 01 90 AD |  if_e	jmp	#LR__1306
0fb08     00 12 06 F6 | 	mov	arg01, #0
0fb0c     30 D2 B1 FD | 	call	#__system___getiolock_0614
0fb10     FD 12 02 F6 | 	mov	arg01, result1
0fb14     84 75 B1 FD | 	call	#__system___lockmem
0fb18     BA 01 00 FF 
0fb1c     50 14 06 F6 | 	mov	arg02, ##@LR__5925
0fb20     00 12 06 F6 | 	mov	arg01, #0
0fb24     00 16 06 F6 | 	mov	arg03, #0
0fb28     68 82 B1 FD | 	call	#__system___basic_print_string
0fb2c     52 00 00 FF 
0fb30     D8 E4 05 F1 | 	add	objptr, ##42200
0fb34     F2 14 02 FB | 	rdlong	arg02, objptr
0fb38     52 00 00 FF 
0fb3c     D8 E4 85 F1 | 	sub	objptr, ##42200
0fb40     00 12 06 F6 | 	mov	arg01, #0
0fb44     00 16 06 F6 | 	mov	arg03, #0
0fb48     0A 18 06 F6 | 	mov	arg04, #10
0fb4c     88 82 B1 FD | 	call	#__system___basic_print_integer
0fb50     BA 01 00 FF 
0fb54     60 14 06 F6 | 	mov	arg02, ##@LR__5926
0fb58     00 12 06 F6 | 	mov	arg01, #0
0fb5c     00 16 06 F6 | 	mov	arg03, #0
0fb60     30 82 B1 FD | 	call	#__system___basic_print_string
0fb64     50 00 00 FF 
0fb68     F0 E4 05 F1 | 	add	objptr, ##41200
0fb6c     F2 14 02 FB | 	rdlong	arg02, objptr
0fb70     50 00 00 FF 
0fb74     F0 E4 85 F1 | 	sub	objptr, ##41200
0fb78     00 12 06 F6 | 	mov	arg01, #0
0fb7c     00 16 06 F6 | 	mov	arg03, #0
0fb80     0A 18 06 F6 | 	mov	arg04, #10
0fb84     90 82 B1 FD | 	call	#__system___basic_print_unsigned
0fb88     BA 01 00 FF 
0fb8c     6A 14 06 F6 | 	mov	arg02, ##@LR__5927
0fb90     00 12 06 F6 | 	mov	arg01, #0
0fb94     00 16 06 F6 | 	mov	arg03, #0
0fb98     F8 81 B1 FD | 	call	#__system___basic_print_string
0fb9c     00 34 06 F6 | 	mov	local08, #0
0fba0     52 00 00 FF 
0fba4     D8 E4 05 F1 | 	add	objptr, ##42200
0fba8     F2 12 02 FB | 	rdlong	arg01, objptr
0fbac     52 00 00 FF 
0fbb0     D8 E4 85 F1 | 	sub	objptr, ##42200
0fbb4     74 9E B1 FD | 	call	#__system___strerror
0fbb8     FD 14 02 F6 | 	mov	arg02, result1
0fbbc     1A 13 02 F6 | 	mov	arg01, local08
0fbc0     00 16 06 F6 | 	mov	arg03, #0
0fbc4     CC 81 B1 FD | 	call	#__system___basic_print_string
0fbc8     BA 01 00 FF 
0fbcc     6D 14 06 F6 | 	mov	arg02, ##@LR__5928
0fbd0     00 12 06 F6 | 	mov	arg01, #0
0fbd4     00 16 06 F6 | 	mov	arg03, #0
0fbd8     B8 81 B1 FD | 	call	#__system___basic_print_string
0fbdc     00 12 06 F6 | 	mov	arg01, #0
0fbe0     19 15 02 F6 | 	mov	arg02, local07
0fbe4     00 16 06 F6 | 	mov	arg03, #0
0fbe8     A8 81 B1 FD | 	call	#__system___basic_print_string
0fbec     00 12 06 F6 | 	mov	arg01, #0
0fbf0     0A 14 06 F6 | 	mov	arg02, #10
0fbf4     00 16 06 F6 | 	mov	arg03, #0
0fbf8     40 81 B1 FD | 	call	#__system___basic_print_char
0fbfc     00 12 06 F6 | 	mov	arg01, #0
0fc00     3C D1 B1 FD | 	call	#__system___getiolock_0614
0fc04     FD 00 68 FC | 	wrlong	#0, result1
0fc08     09 12 06 F6 | 	mov	arg01, #9
0fc0c     E8 C7 B1 FD | 	call	#__system__close
0fc10     D0 01 90 FD | 	jmp	#LR__1309
0fc14                 | LR__1306
0fc14                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0fc14     08 12 06 F6 | 	mov	arg01, #8
0fc18     1A 15 02 F6 | 	mov	arg02, local08
0fc1c     0D 16 06 F6 | 	mov	arg03, #13
0fc20     7C 80 B1 FD | 	call	#__system___basic_open_string
0fc24     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fc28     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0fc2c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0fc30     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fc34     52 00 00 FF 
0fc38     D8 E4 05 F1 | 	add	objptr, ##42200
0fc3c     F2 FA 61 FC | 	wrlong	result1, objptr
0fc40     52 00 00 FF 
0fc44     D8 E4 85 F1 | 	sub	objptr, ##42200
0fc48     0C 01 90 AD |  if_e	jmp	#LR__1307
0fc4c     00 12 06 F6 | 	mov	arg01, #0
0fc50     EC D0 B1 FD | 	call	#__system___getiolock_0614
0fc54     FD 12 02 F6 | 	mov	arg01, result1
0fc58     40 74 B1 FD | 	call	#__system___lockmem
0fc5c     BA 01 00 FF 
0fc60     7B 14 06 F6 | 	mov	arg02, ##@LR__5929
0fc64     00 12 06 F6 | 	mov	arg01, #0
0fc68     00 16 06 F6 | 	mov	arg03, #0
0fc6c     24 81 B1 FD | 	call	#__system___basic_print_string
0fc70     52 00 00 FF 
0fc74     D8 E4 05 F1 | 	add	objptr, ##42200
0fc78     F2 14 02 FB | 	rdlong	arg02, objptr
0fc7c     52 00 00 FF 
0fc80     D8 E4 85 F1 | 	sub	objptr, ##42200
0fc84     00 12 06 F6 | 	mov	arg01, #0
0fc88     00 16 06 F6 | 	mov	arg03, #0
0fc8c     0A 18 06 F6 | 	mov	arg04, #10
0fc90     44 81 B1 FD | 	call	#__system___basic_print_integer
0fc94     BA 01 00 FF 
0fc98     8B 14 06 F6 | 	mov	arg02, ##@LR__5930
0fc9c     00 12 06 F6 | 	mov	arg01, #0
0fca0     00 16 06 F6 | 	mov	arg03, #0
0fca4     EC 80 B1 FD | 	call	#__system___basic_print_string
0fca8     50 00 00 FF 
0fcac     F0 E4 05 F1 | 	add	objptr, ##41200
0fcb0     F2 14 02 FB | 	rdlong	arg02, objptr
0fcb4     50 00 00 FF 
0fcb8     F0 E4 85 F1 | 	sub	objptr, ##41200
0fcbc     00 12 06 F6 | 	mov	arg01, #0
0fcc0     00 16 06 F6 | 	mov	arg03, #0
0fcc4     0A 18 06 F6 | 	mov	arg04, #10
0fcc8     4C 81 B1 FD | 	call	#__system___basic_print_unsigned
0fccc     BA 01 00 FF 
0fcd0     95 14 06 F6 | 	mov	arg02, ##@LR__5931
0fcd4     00 12 06 F6 | 	mov	arg01, #0
0fcd8     00 16 06 F6 | 	mov	arg03, #0
0fcdc     B4 80 B1 FD | 	call	#__system___basic_print_string
0fce0     00 32 06 F6 | 	mov	local07, #0
0fce4     52 00 00 FF 
0fce8     D8 E4 05 F1 | 	add	objptr, ##42200
0fcec     F2 12 02 FB | 	rdlong	arg01, objptr
0fcf0     52 00 00 FF 
0fcf4     D8 E4 85 F1 | 	sub	objptr, ##42200
0fcf8     30 9D B1 FD | 	call	#__system___strerror
0fcfc     FD 14 02 F6 | 	mov	arg02, result1
0fd00     19 13 02 F6 | 	mov	arg01, local07
0fd04     00 16 06 F6 | 	mov	arg03, #0
0fd08     88 80 B1 FD | 	call	#__system___basic_print_string
0fd0c     BA 01 00 FF 
0fd10     98 14 06 F6 | 	mov	arg02, ##@LR__5932
0fd14     00 12 06 F6 | 	mov	arg01, #0
0fd18     00 16 06 F6 | 	mov	arg03, #0
0fd1c     74 80 B1 FD | 	call	#__system___basic_print_string
0fd20     00 12 06 F6 | 	mov	arg01, #0
0fd24     1A 15 02 F6 | 	mov	arg02, local08
0fd28     00 16 06 F6 | 	mov	arg03, #0
0fd2c     64 80 B1 FD | 	call	#__system___basic_print_string
0fd30     00 12 06 F6 | 	mov	arg01, #0
0fd34     0A 14 06 F6 | 	mov	arg02, #10
0fd38     00 16 06 F6 | 	mov	arg03, #0
0fd3c     FC 7F B1 FD | 	call	#__system___basic_print_char
0fd40     00 12 06 F6 | 	mov	arg01, #0
0fd44     F8 CF B1 FD | 	call	#__system___getiolock_0614
0fd48     FD 00 68 FC | 	wrlong	#0, result1
0fd4c     08 12 06 F6 | 	mov	arg01, #8
0fd50     A4 C6 B1 FD | 	call	#__system__close
0fd54     8C 00 90 FD | 	jmp	#LR__1309
0fd58                 | LR__1307
0fd58                 | ' 
0fd58                 | ' do
0fd58                 | LR__1308
0fd58                 | '   get #9,,block(0),1024,r
0fd58     4E 00 00 FF 
0fd5c     B4 E4 05 F1 | 	add	objptr, ##40116
0fd60     F2 16 02 F6 | 	mov	arg03, objptr
0fd64     4E 00 00 FF 
0fd68     B4 E4 85 F1 | 	sub	objptr, ##40116
0fd6c     09 12 06 F6 | 	mov	arg01, #9
0fd70     00 14 06 F6 | 	mov	arg02, #0
0fd74     0A 18 C6 F9 | 	decod	arg04, #10
0fd78     01 1A 06 F6 | 	mov	arg05, #1
0fd7c     90 81 B1 FD | 	call	#__system___basic_get
0fd80     52 00 00 FF 
0fd84     10 E5 05 F1 | 	add	objptr, ##42256
0fd88     F2 FA 61 FC | 	wrlong	result1, objptr
0fd8c                 | '   put #8,,block(0),r
0fd8c     04 00 00 FF 
0fd90     5C E4 85 F1 | 	sub	objptr, ##2140
0fd94     F2 16 02 F6 | 	mov	arg03, objptr
0fd98     FD 18 02 F6 | 	mov	arg04, result1
0fd9c     4E 00 00 FF 
0fda0     B4 E4 85 F1 | 	sub	objptr, ##40116
0fda4     08 12 06 F6 | 	mov	arg01, #8
0fda8     00 14 06 F6 | 	mov	arg02, #0
0fdac     01 1A 06 F6 | 	mov	arg05, #1
0fdb0     F0 80 B1 FD | 	call	#__system___basic_put
0fdb4     52 00 00 FF 
0fdb8     10 E5 05 F1 | 	add	objptr, ##42256
0fdbc     F2 34 02 FB | 	rdlong	local08, objptr
0fdc0     52 00 00 FF 
0fdc4     10 E5 85 F1 | 	sub	objptr, ##42256
0fdc8     02 00 00 FF 
0fdcc     00 34 0E F2 | 	cmp	local08, ##1024 wz
0fdd0     84 FF 9F AD |  if_e	jmp	#LR__1308
0fdd4                 | ' close #8
0fdd4     08 12 06 F6 | 	mov	arg01, #8
0fdd8     1C C6 B1 FD | 	call	#__system__close
0fddc                 | ' close #9
0fddc     09 12 06 F6 | 	mov	arg01, #9
0fde0     14 C6 B1 FD | 	call	#__system__close
0fde4                 | LR__1309
0fde4     A7 F0 03 F6 | 	mov	ptra, fp
0fde8     B2 00 A0 FD | 	call	#popregs_
0fdec                 | _do_copy_ret
0fdec     2D 00 64 FD | 	ret
0fdf0                 | 
0fdf0                 | ' 
0fdf0                 | ' '-------------------- cos
0fdf0                 | ' 
0fdf0                 | ' sub do_cos
0fdf0                 | _do_cos
0fdf0     01 4A 05 F6 | 	mov	COUNT_, #1
0fdf4     A8 00 A0 FD | 	call	#pushregs_
0fdf8     10 F0 07 F1 | 	add	ptra, #16
0fdfc     4A 00 00 FF 
0fe00     80 E4 05 F1 | 	add	objptr, ##38016
0fe04     F2 26 02 FB | 	rdlong	local01, objptr
0fe08     13 17 02 F6 | 	mov	arg03, local01
0fe0c     01 16 66 F0 | 	shl	arg03, #1
0fe10     13 17 02 F1 | 	add	arg03, local01
0fe14     02 16 66 F0 | 	shl	arg03, #2
0fe18     03 00 00 FF 
0fe1c     04 E4 85 F1 | 	sub	objptr, ##1540
0fe20     F2 16 02 F1 | 	add	arg03, objptr
0fe24     0B 17 02 FB | 	rdlong	arg03, arg03
0fe28     0C 4E 05 F1 | 	add	fp, #12
0fe2c     A7 16 62 FC | 	wrlong	arg03, fp
0fe30                 | ' 
0fe30                 | ' numpar=compiledline(lineptr_e).result.uresult
0fe30                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0fe30     0C 4E 85 F1 | 	sub	fp, #12
0fe34     02 16 16 F2 | 	cmp	arg03, #2 wc
0fe38     47 00 00 FF 
0fe3c     7C E4 85 F1 | 	sub	objptr, ##36476
0fe40     0C 4E 05 C1 |  if_b	add	fp, #12
0fe44     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0fe48     0C 4E 85 C1 |  if_b	sub	fp, #12
0fe4c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1310
0fe50     00 12 06 F6 | 	mov	arg01, #0
0fe54     E8 CE B1 FD | 	call	#__system___getiolock_0614
0fe58     FD 12 02 F6 | 	mov	arg01, result1
0fe5c     3C 72 B1 FD | 	call	#__system___lockmem
0fe60     BA 01 00 FF 
0fe64     A6 14 06 F6 | 	mov	arg02, ##@LR__5933
0fe68     00 12 06 F6 | 	mov	arg01, #0
0fe6c     00 16 06 F6 | 	mov	arg03, #0
0fe70     20 7F B1 FD | 	call	#__system___basic_print_string
0fe74     00 12 06 F6 | 	mov	arg01, #0
0fe78     C4 CE B1 FD | 	call	#__system___getiolock_0614
0fe7c     FD 00 68 FC | 	wrlong	#0, result1
0fe80     27 12 06 F6 | 	mov	arg01, #39
0fe84     00 14 06 F6 | 	mov	arg02, #0
0fe88     60 37 B1 FD | 	call	#_printerror
0fe8c     78 00 90 FD | 	jmp	#LR__1311
0fe90                 | LR__1310
0fe90     74 D8 BF FD | 	call	#_pop
0fe94     A7 FA 61 FC | 	wrlong	result1, fp
0fe98     04 4E 05 F1 | 	add	fp, #4
0fe9c     A7 FC 61 FC | 	wrlong	result2, fp
0fea0     04 4E 05 F1 | 	add	fp, #4
0fea4     A7 FE 61 FC | 	wrlong	result3, fp
0fea8     08 4E 85 F1 | 	sub	fp, #8
0feac     52 00 00 FF 
0feb0     A8 E4 05 F1 | 	add	objptr, ##42152
0feb4     F2 26 02 FB | 	rdlong	local01, objptr
0feb8     52 00 00 FF 
0febc     A8 E4 85 F1 | 	sub	objptr, ##42152
0fec0     A7 12 02 F6 | 	mov	arg01, fp
0fec4     E0 DA BF FD | 	call	#_converttofloat
0fec8     FD 14 02 F6 | 	mov	arg02, result1
0fecc     13 13 02 F6 | 	mov	arg01, local01
0fed0     44 A0 B1 FD | 	call	#__system___float_mul
0fed4     FD 14 02 F6 | 	mov	arg02, result1
0fed8     87 E4 1F FF 
0fedc     DB 13 06 F6 | 	mov	arg01, ##1070141403
0fee0     1F 14 E6 F4 | 	bitnot	arg02, #31
0fee4     60 9C B1 FD | 	call	#__system___float_add
0fee8     FD 12 02 F6 | 	mov	arg01, result1
0feec     88 A9 B1 FD | 	call	#__system____builtin_sinf
0fef0     A7 FA 61 FC | 	wrlong	result1, fp
0fef4     08 4E 05 F1 | 	add	fp, #8
0fef8     A7 3C 68 FC | 	wrlong	#30, fp
0fefc     08 4E 85 F1 | 	sub	fp, #8
0ff00     A7 12 02 F6 | 	mov	arg01, fp
0ff04     98 D8 BF FD | 	call	#_push
0ff08                 | LR__1311
0ff08     A7 F0 03 F6 | 	mov	ptra, fp
0ff0c     B2 00 A0 FD | 	call	#popregs_
0ff10                 | _do_cos_ret
0ff10     2D 00 64 FD | 	ret
0ff14                 | 
0ff14                 | ' 
0ff14                 | ' '-------------------- cursor
0ff14                 | ' 
0ff14                 | ' sub do_cursor
0ff14                 | _do_cursor
0ff14     F0 D7 BF FD | 	call	#_pop
0ff18     00 FA 4D F2 | 	cmps	result1, #0 wz
0ff1c                 | ' t1=pop()
0ff1c                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0ff1c     14 00 90 5D |  if_ne	jmp	#LR__1320
0ff20     11 12 06 F6 | 	mov	arg01, #17
0ff24     00 14 06 F6 | 	mov	arg02, #0
0ff28     00 16 06 F6 | 	mov	arg03, #0
0ff2c     28 47 B1 FD | 	call	#_hg010b_spin2_setspritesize
0ff30     10 00 90 FD | 	jmp	#LR__1321
0ff34                 | LR__1320
0ff34     11 12 06 F6 | 	mov	arg01, #17
0ff38     08 14 06 F6 | 	mov	arg02, #8
0ff3c     10 16 06 F6 | 	mov	arg03, #16
0ff40     14 47 B1 FD | 	call	#_hg010b_spin2_setspritesize
0ff44                 | LR__1321
0ff44                 | _do_cursor_ret
0ff44     2D 00 64 FD | 	ret
0ff48                 | 
0ff48                 | ' 
0ff48                 | ' '-------------------- defenv
0ff48                 | ' 
0ff48                 | ' sub do_defenv
0ff48                 | _do_defenv
0ff48     08 4A 05 F6 | 	mov	COUNT_, #8
0ff4c     A8 00 A0 FD | 	call	#pushregs_
0ff50     58 F0 07 F1 | 	add	ptra, #88
0ff54     4A 00 00 FF 
0ff58     80 E4 05 F1 | 	add	objptr, ##38016
0ff5c     F2 26 02 FB | 	rdlong	local01, objptr
0ff60     13 1B 02 F6 | 	mov	arg05, local01
0ff64     01 1A 66 F0 | 	shl	arg05, #1
0ff68     13 1B 02 F1 | 	add	arg05, local01
0ff6c     02 1A 66 F0 | 	shl	arg05, #2
0ff70     03 00 00 FF 
0ff74     04 E4 85 F1 | 	sub	objptr, ##1540
0ff78     F2 1A 02 F1 | 	add	arg05, objptr
0ff7c     0D 1B 02 FB | 	rdlong	arg05, arg05
0ff80     10 4E 05 F1 | 	add	fp, #16
0ff84     A7 1A 62 FC | 	wrlong	arg05, fp
0ff88                 | ' 
0ff88                 | ' numpar=compiledline(lineptr_e).result.uresult
0ff88                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0ff88     10 4E 85 F1 | 	sub	fp, #16
0ff8c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0ff90     47 00 00 FF 
0ff94     7C E4 85 F1 | 	sub	objptr, ##36476
0ff98     10 4E 05 51 |  if_ne	add	fp, #16
0ff9c     A7 26 02 5B |  if_ne	rdlong	local01, fp
0ffa0     10 4E 85 51 |  if_ne	sub	fp, #16
0ffa4     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0ffa8     90 0A 90 5D |  if_ne	jmp	#LR__1351
0ffac                 | ' 
0ffac                 | ' if numpar=2 then						' env from .h2 or from a pointer
0ffac     10 4E 05 F1 | 	add	fp, #16
0ffb0     A7 26 02 FB | 	rdlong	local01, fp
0ffb4     10 4E 85 F1 | 	sub	fp, #16
0ffb8     02 26 0E F2 | 	cmp	local01, #2 wz
0ffbc     28 04 90 5D |  if_ne	jmp	#LR__1343
0ffc0     44 D7 BF FD | 	call	#_pop
0ffc4     FF 1A 02 F6 | 	mov	arg05, result3
0ffc8     40 4E 05 F1 | 	add	fp, #64
0ffcc     A7 FA 61 FC | 	wrlong	result1, fp
0ffd0     04 4E 05 F1 | 	add	fp, #4
0ffd4     A7 FC 61 FC | 	wrlong	result2, fp
0ffd8     04 4E 05 F1 | 	add	fp, #4
0ffdc     A7 1A 62 FC | 	wrlong	arg05, fp
0ffe0                 | '   t1=pop()
0ffe0                 | '   if t1.result_type=result_string2 then 
0ffe0     48 4E 85 F1 | 	sub	fp, #72
0ffe4     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0ffe8     20 00 90 5D |  if_ne	jmp	#LR__1330
0ffec     40 4E 05 F1 | 	add	fp, #64
0fff0     A7 12 02 FB | 	rdlong	arg01, fp
0fff4     40 4E 85 F1 | 	sub	fp, #64
0fff8     84 D8 BF FD | 	call	#_convertstring
0fffc     4C 4E 05 F1 | 	add	fp, #76
10000     A7 FA 61 FC | 	wrlong	result1, fp
10004     4C 4E 85 F1 | 	sub	fp, #76
10008     58 00 90 FD | 	jmp	#LR__1333
1000c                 | LR__1330
1000c     48 4E 05 F1 | 	add	fp, #72
10010     A7 26 02 FB | 	rdlong	local01, fp
10014     48 4E 85 F1 | 	sub	fp, #72
10018     1F 26 0E F2 | 	cmp	local01, #31 wz
1001c     18 00 90 5D |  if_ne	jmp	#LR__1331
10020     40 4E 05 F1 | 	add	fp, #64
10024     A7 26 02 FB | 	rdlong	local01, fp
10028     0C 4E 05 F1 | 	add	fp, #12
1002c     A7 26 62 FC | 	wrlong	local01, fp
10030     4C 4E 85 F1 | 	sub	fp, #76
10034     2C 00 90 FD | 	jmp	#LR__1332
10038                 | LR__1331
10038     BA 01 00 FF 
1003c     AC 26 06 F6 | 	mov	local01, ##@LR__5934
10040     4C 4E 05 F1 | 	add	fp, #76
10044     A7 26 62 FC | 	wrlong	local01, fp
10048     0C 4E 85 F1 | 	sub	fp, #12
1004c     A7 12 02 F6 | 	mov	arg01, fp
10050     40 4E 85 F1 | 	sub	fp, #64
10054     94 D8 BF FD | 	call	#_converttoint
10058     1C 4E 05 F1 | 	add	fp, #28
1005c     A7 FA 61 FC | 	wrlong	result1, fp
10060     1C 4E 85 F1 | 	sub	fp, #28
10064                 | LR__1332
10064                 | LR__1333
10064                 | '   if s1<>"" then 
10064     4C 4E 05 F1 | 	add	fp, #76
10068     A7 12 02 FB | 	rdlong	arg01, fp
1006c     4C 4E 85 F1 | 	sub	fp, #76
10070     BA 01 00 FF 
10074     AD 14 06 F6 | 	mov	arg02, ##@LR__5935
10078     48 70 B1 FD | 	call	#__system___string_cmp
1007c     00 FA 0D F2 | 	cmp	result1, #0 wz
10080     28 02 90 AD |  if_e	jmp	#LR__1337
10084     80 D6 BF FD | 	call	#_pop
10088     FF 26 02 F6 | 	mov	local01, result3
1008c     40 4E 05 F1 | 	add	fp, #64
10090     A7 FA 61 FC | 	wrlong	result1, fp
10094     04 4E 05 F1 | 	add	fp, #4
10098     A7 FC 61 FC | 	wrlong	result2, fp
1009c     04 4E 05 F1 | 	add	fp, #4
100a0     A7 26 62 FC | 	wrlong	local01, fp
100a4     08 4E 85 F1 | 	sub	fp, #8
100a8     A7 12 02 F6 | 	mov	arg01, fp
100ac     40 4E 85 F1 | 	sub	fp, #64
100b0     38 D8 BF FD | 	call	#_converttoint
100b4     18 4E 05 F1 | 	add	fp, #24
100b8     A7 FA 61 FC | 	wrlong	result1, fp
100bc     18 4E 85 F1 | 	sub	fp, #24
100c0                 | '     t1=pop()
100c0                 | '     channel=converttoint(t1) 
100c0                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
100c0     09 12 06 F6 | 	mov	arg01, #9
100c4     30 C3 B1 FD | 	call	#__system__close
100c8     09 26 06 F6 | 	mov	local01, #9
100cc     BA 01 00 FF 
100d0     AE 12 06 F6 | 	mov	arg01, ##@LR__5936
100d4     4C 4E 05 F1 | 	add	fp, #76
100d8     A7 14 02 FB | 	rdlong	arg02, fp
100dc     4C 4E 85 F1 | 	sub	fp, #76
100e0     14 70 B1 FD | 	call	#__system___string_concat
100e4     FD 14 02 F6 | 	mov	arg02, result1
100e8     13 13 02 F6 | 	mov	arg01, local01
100ec     00 16 06 F6 | 	mov	arg03, #0
100f0     AC 7B B1 FD | 	call	#__system___basic_open_string
100f4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
100f8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
100fc     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
10100     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10104     0C 4E 05 F1 | 	add	fp, #12
10108     A7 FA 61 FC | 	wrlong	result1, fp
1010c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
1010c     0C 4E 85 F1 | 	sub	fp, #12
10110     A0 00 90 AD |  if_e	jmp	#LR__1334
10114     00 12 06 F6 | 	mov	arg01, #0
10118     24 CC B1 FD | 	call	#__system___getiolock_0614
1011c     FD 12 02 F6 | 	mov	arg01, result1
10120     78 6F B1 FD | 	call	#__system___lockmem
10124     BA 01 00 FF 
10128     BB 14 06 F6 | 	mov	arg02, ##@LR__5937
1012c     00 12 06 F6 | 	mov	arg01, #0
10130     00 16 06 F6 | 	mov	arg03, #0
10134     5C 7C B1 FD | 	call	#__system___basic_print_string
10138     0C 4E 05 F1 | 	add	fp, #12
1013c     A7 14 02 FB | 	rdlong	arg02, fp
10140     0C 4E 85 F1 | 	sub	fp, #12
10144     00 12 06 F6 | 	mov	arg01, #0
10148     00 16 06 F6 | 	mov	arg03, #0
1014c     0A 18 06 F6 | 	mov	arg04, #10
10150     84 7C B1 FD | 	call	#__system___basic_print_integer
10154     BA 01 00 FF 
10158     C9 14 06 F6 | 	mov	arg02, ##@LR__5938
1015c     00 12 06 F6 | 	mov	arg01, #0
10160     00 16 06 F6 | 	mov	arg03, #0
10164     2C 7C B1 FD | 	call	#__system___basic_print_string
10168     00 26 06 F6 | 	mov	local01, #0
1016c     0C 4E 05 F1 | 	add	fp, #12
10170     A7 12 02 FB | 	rdlong	arg01, fp
10174     0C 4E 85 F1 | 	sub	fp, #12
10178     B0 98 B1 FD | 	call	#__system___strerror
1017c     FD 14 02 F6 | 	mov	arg02, result1
10180     13 13 02 F6 | 	mov	arg01, local01
10184     00 16 06 F6 | 	mov	arg03, #0
10188     08 7C B1 FD | 	call	#__system___basic_print_string
1018c     00 12 06 F6 | 	mov	arg01, #0
10190     0A 14 06 F6 | 	mov	arg02, #10
10194     00 16 06 F6 | 	mov	arg03, #0
10198     A0 7B B1 FD | 	call	#__system___basic_print_char
1019c     00 12 06 F6 | 	mov	arg01, #0
101a0     9C CB B1 FD | 	call	#__system___getiolock_0614
101a4     FD 00 68 FC | 	wrlong	#0, result1
101a8     09 12 06 F6 | 	mov	arg01, #9
101ac     48 C2 B1 FD | 	call	#__system__close
101b0     88 08 90 FD | 	jmp	#LR__1351
101b4                 | LR__1334
101b4                 | '     get #9,17,envbuf8(channel,0),256
101b4     18 4E 05 F1 | 	add	fp, #24
101b8     A7 1A 02 FB | 	rdlong	arg05, fp
101bc     18 4E 85 F1 | 	sub	fp, #24
101c0     0D 17 02 F6 | 	mov	arg03, arg05
101c4     09 16 66 F0 | 	shl	arg03, #9
101c8     0D 17 02 F1 | 	add	arg03, arg05
101cc     0C 00 00 FF 
101d0     D8 E4 05 F1 | 	add	objptr, ##6360
101d4     F2 16 02 F1 | 	add	arg03, objptr
101d8     09 12 06 F6 | 	mov	arg01, #9
101dc     11 14 06 F6 | 	mov	arg02, #17
101e0     00 19 06 F6 | 	mov	arg04, #256
101e4     01 1A 06 F6 | 	mov	arg05, #1
101e8     0C 00 00 FF 
101ec     D8 E4 85 F1 | 	sub	objptr, ##6360
101f0     1C 7D B1 FD | 	call	#__system___basic_get
101f4                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
101f4     14 4E 05 F1 | 	add	fp, #20
101f8     A7 FE 69 FC | 	wrlong	#255, fp
101fc     14 4E 85 F1 | 	sub	fp, #20
10200     0C 00 00 FF 
10204     D8 E4 05 F1 | 	add	objptr, ##6360
10208     97 30 48 FB | 	callpa	#(@LR__1336-@LR__1335)>>2,fcache_load_ptr_
1020c                 | LR__1335
1020c     18 4E 05 F1 | 	add	fp, #24
10210     A7 16 02 FB | 	rdlong	arg03, fp
10214     0B 27 02 F6 | 	mov	local01, arg03
10218     09 26 66 F0 | 	shl	local01, #9
1021c     F2 26 02 F1 | 	add	local01, objptr
10220     04 4E 85 F1 | 	sub	fp, #4
10224     A7 1A 02 FB | 	rdlong	arg05, fp
10228     0D 19 02 F6 | 	mov	arg04, arg05
1022c     01 18 66 F0 | 	shl	arg04, #1
10230     13 19 02 F1 | 	add	arg04, local01
10234     0B 27 02 F6 | 	mov	local01, arg03
10238     09 26 66 F0 | 	shl	local01, #9
1023c     0B 27 02 F1 | 	add	local01, arg03
10240     F2 26 02 F1 | 	add	local01, objptr
10244     13 1B 02 F1 | 	add	arg05, local01
10248     0D 27 C2 FA | 	rdbyte	local01, arg05
1024c     00 27 06 FA | 	mul	local01, #256
10250     0C 27 52 FC | 	wrword	local01, arg04
10254     A7 26 02 FB | 	rdlong	local01, fp
10258     01 26 86 F1 | 	sub	local01, #1
1025c     A7 26 62 FC | 	wrlong	local01, fp
10260     14 4E 85 F1 | 	sub	fp, #20
10264     00 26 56 F2 | 	cmps	local01, #0 wc
10268     A0 FF 9F 3D |  if_ae	jmp	#LR__1335
1026c                 | LR__1336
1026c     0C 00 00 FF 
10270     D8 E4 85 F1 | 	sub	objptr, ##6360
10274                 | '     close #9
10274     09 12 06 F6 | 	mov	arg01, #9
10278     7C C1 B1 FD | 	call	#__system__close
1027c     18 4E 05 F1 | 	add	fp, #24
10280     A7 26 02 FB | 	rdlong	local01, fp
10284     18 4E 85 F1 | 	sub	fp, #24
10288     09 26 66 F0 | 	shl	local01, #9
1028c     0C 00 00 FF 
10290     D8 E4 05 F1 | 	add	objptr, ##6360
10294     F2 26 02 F1 | 	add	local01, objptr
10298     FE 27 06 F1 | 	add	local01, #510
1029c     13 01 58 FC | 	wrword	#0, local01
102a0                 | '     envbuf(channel,255)=0                                                              
102a0                 | '     return
102a0     0C 00 00 FF 
102a4     D8 E4 85 F1 | 	sub	objptr, ##6360
102a8     90 07 90 FD | 	jmp	#LR__1351
102ac                 | LR__1337
102ac                 | '     if wptr < $80000 then 
102ac     1C 4E 05 F1 | 	add	fp, #28
102b0     A7 28 02 FB | 	rdlong	local02, fp
102b4     1C 4E 85 F1 | 	sub	fp, #28
102b8     00 04 00 FF 
102bc     00 28 56 F2 | 	cmps	local02, ##524288 wc
102c0     7C 00 90 3D |  if_ae	jmp	#LR__1340
102c4                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
102c4     14 4E 05 F1 | 	add	fp, #20
102c8     A7 00 68 FC | 	wrlong	#0, fp
102cc     14 4E 85 F1 | 	sub	fp, #20
102d0     0C 00 00 FF 
102d4     D8 E4 05 F1 | 	add	objptr, ##6360
102d8     97 2C 48 FB | 	callpa	#(@LR__1339-@LR__1338)>>2,fcache_load_ptr_
102dc                 | LR__1338
102dc     18 4E 05 F1 | 	add	fp, #24
102e0     A7 28 02 FB | 	rdlong	local02, fp
102e4     09 28 66 F0 | 	shl	local02, #9
102e8     F2 28 02 F1 | 	add	local02, objptr
102ec     04 4E 85 F1 | 	sub	fp, #4
102f0     A7 26 02 FB | 	rdlong	local01, fp
102f4     13 1B 02 F6 | 	mov	arg05, local01
102f8     01 1A 66 F0 | 	shl	arg05, #1
102fc     14 1B 02 F1 | 	add	arg05, local02
10300     08 4E 05 F1 | 	add	fp, #8
10304     A7 12 02 FB | 	rdlong	arg01, fp
10308     01 26 66 F0 | 	shl	local01, #1
1030c     13 13 02 F1 | 	add	arg01, local01
10310     09 FB E1 FA | 	rdword	result1, arg01
10314     0D FB 51 FC | 	wrword	result1, arg05
10318     08 4E 85 F1 | 	sub	fp, #8
1031c     A7 28 02 FB | 	rdlong	local02, fp
10320     01 28 06 F1 | 	add	local02, #1
10324     A7 28 62 FC | 	wrlong	local02, fp
10328     14 4E 85 F1 | 	sub	fp, #20
1032c     00 29 56 F2 | 	cmps	local02, #256 wc
10330     A8 FF 9F CD |  if_b	jmp	#LR__1338
10334                 | LR__1339
10334     0C 00 00 FF 
10338     D8 E4 85 F1 | 	sub	objptr, ##6360
1033c     78 00 90 FD | 	jmp	#LR__1342
10340                 | LR__1340
10340                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
10340     14 4E 05 F1 | 	add	fp, #20
10344     A7 00 68 FC | 	wrlong	#0, fp
10348     14 4E 85 F1 | 	sub	fp, #20
1034c                 | LR__1341
1034c     18 4E 05 F1 | 	add	fp, #24
10350     A7 28 02 FB | 	rdlong	local02, fp
10354     09 28 66 F0 | 	shl	local02, #9
10358     0C 00 00 FF 
1035c     D8 E4 05 F1 | 	add	objptr, ##6360
10360     F2 28 02 F1 | 	add	local02, objptr
10364     04 4E 85 F1 | 	sub	fp, #4
10368     A7 26 02 FB | 	rdlong	local01, fp
1036c     13 2B 02 F6 | 	mov	local03, local01
10370     01 2A 66 F0 | 	shl	local03, #1
10374     14 2B 02 F1 | 	add	local03, local02
10378     08 4E 05 F1 | 	add	fp, #8
1037c     A7 12 02 FB | 	rdlong	arg01, fp
10380     1C 4E 85 F1 | 	sub	fp, #28
10384     01 26 66 F0 | 	shl	local01, #1
10388     13 13 02 F1 | 	add	arg01, local01
1038c     0C 00 00 FF 
10390     D8 E4 85 F1 | 	sub	objptr, ##6360
10394     7C 35 B1 FD | 	call	#_psdpeek
10398     15 FB 51 FC | 	wrword	result1, local03
1039c     14 4E 05 F1 | 	add	fp, #20
103a0     A7 2A 02 FB | 	rdlong	local03, fp
103a4     01 2A 06 F1 | 	add	local03, #1
103a8     A7 2A 62 FC | 	wrlong	local03, fp
103ac     14 4E 85 F1 | 	sub	fp, #20
103b0     00 2B 56 F2 | 	cmps	local03, #256 wc
103b4     94 FF 9F CD |  if_b	jmp	#LR__1341
103b8                 | LR__1342
103b8     18 4E 05 F1 | 	add	fp, #24
103bc     A7 2A 02 FB | 	rdlong	local03, fp
103c0     18 4E 85 F1 | 	sub	fp, #24
103c4     09 2A 66 F0 | 	shl	local03, #9
103c8     0C 00 00 FF 
103cc     D8 E4 05 F1 | 	add	objptr, ##6360
103d0     F2 2A 02 F1 | 	add	local03, objptr
103d4     FE 2B 06 F1 | 	add	local03, #510
103d8     15 01 58 FC | 	wrword	#0, local03
103dc                 | '     envbuf(channel,255)=0
103dc                 | '     return   
103dc     0C 00 00 FF 
103e0     D8 E4 85 F1 | 	sub	objptr, ##6360
103e4     54 06 90 FD | 	jmp	#LR__1351
103e8                 | LR__1343
103e8                 | ' 
103e8                 | ' if numpar=5 then   						 'simple adsr
103e8     10 4E 05 F1 | 	add	fp, #16
103ec     A7 28 02 FB | 	rdlong	local02, fp
103f0     10 4E 85 F1 | 	sub	fp, #16
103f4     05 28 0E F2 | 	cmp	local02, #5 wz
103f8     14 06 90 5D |  if_ne	jmp	#LR__1350
103fc     08 D3 BF FD | 	call	#_pop
10400     FF 26 02 F6 | 	mov	local01, result3
10404     40 4E 05 F1 | 	add	fp, #64
10408     A7 FA 61 FC | 	wrlong	result1, fp
1040c     04 4E 05 F1 | 	add	fp, #4
10410     A7 FC 61 FC | 	wrlong	result2, fp
10414     04 4E 05 F1 | 	add	fp, #4
10418     A7 26 62 FC | 	wrlong	local01, fp
1041c     08 4E 85 F1 | 	sub	fp, #8
10420     A7 12 02 F6 | 	mov	arg01, fp
10424     40 4E 85 F1 | 	sub	fp, #64
10428     7C D5 BF FD | 	call	#_converttofloat
1042c     FD 28 02 F6 | 	mov	local02, result1
10430     2C 4E 05 F1 | 	add	fp, #44
10434     A7 28 62 FC | 	wrlong	local02, fp
10438     2C 4E 85 F1 | 	sub	fp, #44
1043c     C8 D2 BF FD | 	call	#_pop
10440     FF 26 02 F6 | 	mov	local01, result3
10444     40 4E 05 F1 | 	add	fp, #64
10448     A7 FA 61 FC | 	wrlong	result1, fp
1044c     04 4E 05 F1 | 	add	fp, #4
10450     A7 FC 61 FC | 	wrlong	result2, fp
10454     04 4E 05 F1 | 	add	fp, #4
10458     A7 26 62 FC | 	wrlong	local01, fp
1045c     08 4E 85 F1 | 	sub	fp, #8
10460     A7 12 02 F6 | 	mov	arg01, fp
10464     40 4E 85 F1 | 	sub	fp, #64
10468     3C D5 BF FD | 	call	#_converttofloat
1046c     FD 28 02 F6 | 	mov	local02, result1
10470     28 4E 05 F1 | 	add	fp, #40
10474     A7 28 62 FC | 	wrlong	local02, fp
10478     28 4E 85 F1 | 	sub	fp, #40
1047c     88 D2 BF FD | 	call	#_pop
10480     FF 26 02 F6 | 	mov	local01, result3
10484     40 4E 05 F1 | 	add	fp, #64
10488     A7 FA 61 FC | 	wrlong	result1, fp
1048c     04 4E 05 F1 | 	add	fp, #4
10490     A7 FC 61 FC | 	wrlong	result2, fp
10494     04 4E 05 F1 | 	add	fp, #4
10498     A7 26 62 FC | 	wrlong	local01, fp
1049c     08 4E 85 F1 | 	sub	fp, #8
104a0     A7 12 02 F6 | 	mov	arg01, fp
104a4     40 4E 85 F1 | 	sub	fp, #64
104a8     FC D4 BF FD | 	call	#_converttofloat
104ac     FD 28 02 F6 | 	mov	local02, result1
104b0     24 4E 05 F1 | 	add	fp, #36
104b4     A7 28 62 FC | 	wrlong	local02, fp
104b8     24 4E 85 F1 | 	sub	fp, #36
104bc     48 D2 BF FD | 	call	#_pop
104c0     FF 26 02 F6 | 	mov	local01, result3
104c4     40 4E 05 F1 | 	add	fp, #64
104c8     A7 FA 61 FC | 	wrlong	result1, fp
104cc     04 4E 05 F1 | 	add	fp, #4
104d0     A7 FC 61 FC | 	wrlong	result2, fp
104d4     04 4E 05 F1 | 	add	fp, #4
104d8     A7 26 62 FC | 	wrlong	local01, fp
104dc     08 4E 85 F1 | 	sub	fp, #8
104e0     A7 12 02 F6 | 	mov	arg01, fp
104e4     40 4E 85 F1 | 	sub	fp, #64
104e8     BC D4 BF FD | 	call	#_converttofloat
104ec     FD 28 02 F6 | 	mov	local02, result1
104f0     20 4E 05 F1 | 	add	fp, #32
104f4     A7 28 62 FC | 	wrlong	local02, fp
104f8     20 4E 85 F1 | 	sub	fp, #32
104fc     08 D2 BF FD | 	call	#_pop
10500     FF 26 02 F6 | 	mov	local01, result3
10504     40 4E 05 F1 | 	add	fp, #64
10508     A7 FA 61 FC | 	wrlong	result1, fp
1050c     04 4E 05 F1 | 	add	fp, #4
10510     A7 FC 61 FC | 	wrlong	result2, fp
10514     04 4E 05 F1 | 	add	fp, #4
10518     A7 26 62 FC | 	wrlong	local01, fp
1051c     08 4E 85 F1 | 	sub	fp, #8
10520     A7 12 02 F6 | 	mov	arg01, fp
10524     40 4E 85 F1 | 	sub	fp, #64
10528     C0 D3 BF FD | 	call	#_converttoint
1052c     18 4E 05 F1 | 	add	fp, #24
10530     A7 FA 61 FC | 	wrlong	result1, fp
10534                 | '   t1=pop() : rr=converttofloat(t1)
10534                 | '   t1=pop() : ss=converttofloat(t1) 
10534                 | '   t1=pop() : dd=converttofloat(t1)
10534                 | '   t1=pop() : aa=converttofloat(t1)
10534                 | '   t1=pop() : channel=converttoint(t1)
10534                 | '   if ss<0.0 then ss=0.0 
10534     10 4E 05 F1 | 	add	fp, #16
10538     A7 12 02 FB | 	rdlong	arg01, fp
1053c     28 4E 85 F1 | 	sub	fp, #40
10540     00 14 06 F6 | 	mov	arg02, #0
10544     01 16 06 F6 | 	mov	arg03, #1
10548     00 9E B1 FD | 	call	#__system___float_cmp
1054c     00 FA 55 F2 | 	cmps	result1, #0 wc
10550     28 4E 05 C1 |  if_b	add	fp, #40
10554     A7 00 68 CC |  if_b	wrlong	#0, fp
10558     28 4E 85 C1 |  if_b	sub	fp, #40
1055c                 | '   if ss>1.0 then ss=1.0
1055c     28 4E 05 F1 | 	add	fp, #40
10560     A7 12 02 FB | 	rdlong	arg01, fp
10564     28 4E 85 F1 | 	sub	fp, #40
10568     00 C0 1F FF 
1056c     00 14 06 F6 | 	mov	arg02, ##1065353216
10570     01 16 66 F6 | 	neg	arg03, #1
10574     D4 9D B1 FD | 	call	#__system___float_cmp
10578     01 FA 55 F2 | 	cmps	result1, #1 wc
1057c     28 4E 05 31 |  if_ae	add	fp, #40
10580     00 C0 9F 3F 
10584     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
10588     28 4E 85 31 |  if_ae	sub	fp, #40
1058c     20 4E 05 F1 | 	add	fp, #32
10590     A7 12 02 FB | 	rdlong	arg01, fp
10594     04 4E 05 F1 | 	add	fp, #4
10598     A7 14 02 FB | 	rdlong	arg02, fp
1059c     24 4E 85 F1 | 	sub	fp, #36
105a0     A4 95 B1 FD | 	call	#__system___float_add
105a4     FD 12 02 F6 | 	mov	arg01, result1
105a8     2C 4E 05 F1 | 	add	fp, #44
105ac     A7 14 02 FB | 	rdlong	arg02, fp
105b0     2C 4E 85 F1 | 	sub	fp, #44
105b4     90 95 B1 FD | 	call	#__system___float_add
105b8     30 4E 05 F1 | 	add	fp, #48
105bc     A7 FA 61 FC | 	wrlong	result1, fp
105c0     FD 14 02 F6 | 	mov	arg02, result1
105c4     30 4E 85 F1 | 	sub	fp, #48
105c8     00 C0 21 FF 
105cc     00 12 06 F6 | 	mov	arg01, ##1132462080
105d0     48 9B B1 FD | 	call	#__system___float_div
105d4     34 4E 05 F1 | 	add	fp, #52
105d8     A7 FA 61 FC | 	wrlong	result1, fp
105dc     14 4E 85 F1 | 	sub	fp, #20
105e0     A7 12 02 FB | 	rdlong	arg01, fp
105e4     FD 14 02 F6 | 	mov	arg02, result1
105e8     20 4E 85 F1 | 	sub	fp, #32
105ec     28 99 B1 FD | 	call	#__system___float_mul
105f0     FD 12 02 F6 | 	mov	arg01, result1
105f4     01 14 06 F6 | 	mov	arg02, #1
105f8     E4 9D B1 FD | 	call	#__system___float_tointeger
105fc     A7 FA 61 FC | 	wrlong	result1, fp
10600     24 4E 05 F1 | 	add	fp, #36
10604     A7 12 02 FB | 	rdlong	arg01, fp
10608     10 4E 05 F1 | 	add	fp, #16
1060c     A7 14 02 FB | 	rdlong	arg02, fp
10610     34 4E 85 F1 | 	sub	fp, #52
10614     00 99 B1 FD | 	call	#__system___float_mul
10618     FD 12 02 F6 | 	mov	arg01, result1
1061c     01 14 06 F6 | 	mov	arg02, #1
10620     BC 9D B1 FD | 	call	#__system___float_tointeger
10624     04 4E 05 F1 | 	add	fp, #4
10628     A7 FA 61 FC | 	wrlong	result1, fp
1062c     28 4E 05 F1 | 	add	fp, #40
10630     A7 12 02 FB | 	rdlong	arg01, fp
10634     08 4E 05 F1 | 	add	fp, #8
10638     A7 14 02 FB | 	rdlong	arg02, fp
1063c     34 4E 85 F1 | 	sub	fp, #52
10640     D4 98 B1 FD | 	call	#__system___float_mul
10644     FD 12 02 F6 | 	mov	arg01, result1
10648     01 14 06 F6 | 	mov	arg02, #1
1064c     90 9D B1 FD | 	call	#__system___float_tointeger
10650     0C 4E 05 F1 | 	add	fp, #12
10654     A7 FA 61 FC | 	wrlong	result1, fp
10658     0C 4E 85 F1 | 	sub	fp, #12
1065c     F8 BF 23 FF 
10660     00 28 06 F6 | 	mov	local02, ##1199566848
10664     A7 12 02 FB | 	rdlong	arg01, fp
10668     09 13 52 F6 | 	abs	arg01, arg01 wc
1066c     1F 2C C6 C9 |  if_b	decod	local04, #31
10670     00 2C 06 36 |  if_ae	mov	local04, #0
10674     9C 94 B1 FD | 	call	#__system___float_fromuns
10678     16 FB 61 F5 | 	xor	result1, local04
1067c     FD 14 02 F6 | 	mov	arg02, result1
10680     14 13 02 F6 | 	mov	arg01, local02
10684     94 9A B1 FD | 	call	#__system___float_div
10688     38 4E 05 F1 | 	add	fp, #56
1068c     A7 FA 61 FC | 	wrlong	result1, fp
10690     F8 BF 23 FF 
10694     00 28 06 F6 | 	mov	local02, ##1199566848
10698     10 4E 85 F1 | 	sub	fp, #16
1069c     A7 14 02 FB | 	rdlong	arg02, fp
106a0     28 4E 85 F1 | 	sub	fp, #40
106a4     F8 BF 23 FF 
106a8     00 12 06 F6 | 	mov	arg01, ##1199566848
106ac     68 98 B1 FD | 	call	#__system___float_mul
106b0     FD 14 02 F6 | 	mov	arg02, result1
106b4     14 13 02 F6 | 	mov	arg01, local02
106b8     1F 14 E6 F4 | 	bitnot	arg02, #31
106bc     88 94 B1 FD | 	call	#__system___float_add
106c0     FD 28 02 F6 | 	mov	local02, result1
106c4     04 4E 05 F1 | 	add	fp, #4
106c8     A7 12 02 FB | 	rdlong	arg01, fp
106cc     04 4E 85 F1 | 	sub	fp, #4
106d0     09 13 52 F6 | 	abs	arg01, arg01 wc
106d4     1F 2C C6 C9 |  if_b	decod	local04, #31
106d8     00 2C 06 36 |  if_ae	mov	local04, #0
106dc     34 94 B1 FD | 	call	#__system___float_fromuns
106e0     16 FB 61 F5 | 	xor	result1, local04
106e4     FD 14 02 F6 | 	mov	arg02, result1
106e8     14 13 02 F6 | 	mov	arg01, local02
106ec     2C 9A B1 FD | 	call	#__system___float_div
106f0     24 4E 05 F1 | 	add	fp, #36
106f4     A7 FA 61 FC | 	wrlong	result1, fp
106f8     04 4E 05 F1 | 	add	fp, #4
106fc     A7 14 02 FB | 	rdlong	arg02, fp
10700     28 4E 85 F1 | 	sub	fp, #40
10704     F8 BF 23 FF 
10708     00 12 06 F6 | 	mov	arg01, ##1199566848
1070c     08 98 B1 FD | 	call	#__system___float_mul
10710     FD 28 02 F6 | 	mov	local02, result1
10714     0C 4E 05 F1 | 	add	fp, #12
10718     A7 12 02 FB | 	rdlong	arg01, fp
1071c     0C 4E 85 F1 | 	sub	fp, #12
10720     09 13 52 F6 | 	abs	arg01, arg01 wc
10724     1F 2C C6 C9 |  if_b	decod	local04, #31
10728     00 2C 06 36 |  if_ae	mov	local04, #0
1072c     E4 93 B1 FD | 	call	#__system___float_fromuns
10730     16 FB 61 F5 | 	xor	result1, local04
10734     FD 14 02 F6 | 	mov	arg02, result1
10738     14 13 02 F6 | 	mov	arg01, local02
1073c     DC 99 B1 FD | 	call	#__system___float_div
10740     3C 4E 05 F1 | 	add	fp, #60
10744     A7 FA 61 FC | 	wrlong	result1, fp
10748     24 4E 85 F1 | 	sub	fp, #36
1074c     A7 2E 02 FB | 	rdlong	local05, fp
10750     18 4E 85 F1 | 	sub	fp, #24
10754     01 2E 66 F0 | 	shl	local05, #1
10758     52 00 00 FF 
1075c     B4 E4 05 F1 | 	add	objptr, ##42164
10760     F2 2E 02 F1 | 	add	local05, objptr
10764     A7 30 02 FB | 	rdlong	local06, fp
10768     04 4E 05 F1 | 	add	fp, #4
1076c     A7 2A 02 FB | 	rdlong	local03, fp
10770     15 31 02 F1 | 	add	local06, local03
10774     17 31 52 FC | 	wrword	local06, local05
10778     1C 4E 05 F1 | 	add	fp, #28
1077c     A7 00 68 FC | 	wrlong	#0, fp
10780                 | '   fulltime=aa+dd+rr
10780                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
10780                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
10780                 | '   suspoints(channel)=a+d
10780                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
10780     0C 4E 85 F1 | 	sub	fp, #12
10784     A7 00 68 FC | 	wrlong	#0, fp
10788     14 4E 85 F1 | 	sub	fp, #20
1078c     A7 32 02 FB | 	rdlong	local07, fp
10790     52 00 00 FF 
10794     B4 E4 85 F1 | 	sub	objptr, ##42164
10798                 | LR__1344
10798     14 4E 05 F1 | 	add	fp, #20
1079c     A7 28 02 FB | 	rdlong	local02, fp
107a0     14 4E 85 F1 | 	sub	fp, #20
107a4     19 29 52 F2 | 	cmps	local02, local07 wc
107a8     80 00 90 3D |  if_ae	jmp	#LR__1345
107ac     18 4E 05 F1 | 	add	fp, #24
107b0     A7 30 02 FB | 	rdlong	local06, fp
107b4     09 30 66 F0 | 	shl	local06, #9
107b8     0C 00 00 FF 
107bc     D8 E4 05 F1 | 	add	objptr, ##6360
107c0     F2 30 02 F1 | 	add	local06, objptr
107c4     04 4E 85 F1 | 	sub	fp, #4
107c8     A7 2E 02 FB | 	rdlong	local05, fp
107cc     01 2E 66 F0 | 	shl	local05, #1
107d0     18 2F 02 F1 | 	add	local05, local06
107d4     0C 4E 05 F1 | 	add	fp, #12
107d8     A7 12 02 FB | 	rdlong	arg01, fp
107dc     20 4E 85 F1 | 	sub	fp, #32
107e0     0C 00 00 FF 
107e4     D8 E4 85 F1 | 	sub	objptr, ##6360
107e8     01 14 06 F6 | 	mov	arg02, #1
107ec     F0 9B B1 FD | 	call	#__system___float_tointeger
107f0     17 FB 51 FC | 	wrword	result1, local05
107f4     20 4E 05 F1 | 	add	fp, #32
107f8     A7 12 02 FB | 	rdlong	arg01, fp
107fc     18 4E 05 F1 | 	add	fp, #24
10800     A7 14 02 FB | 	rdlong	arg02, fp
10804     38 4E 85 F1 | 	sub	fp, #56
10808     3C 93 B1 FD | 	call	#__system___float_add
1080c     20 4E 05 F1 | 	add	fp, #32
10810     A7 FA 61 FC | 	wrlong	result1, fp
10814     0C 4E 85 F1 | 	sub	fp, #12
10818     A7 30 02 FB | 	rdlong	local06, fp
1081c     01 30 06 F1 | 	add	local06, #1
10820     A7 30 62 FC | 	wrlong	local06, fp
10824     14 4E 85 F1 | 	sub	fp, #20
10828     6C FF 9F FD | 	jmp	#LR__1344
1082c                 | LR__1345
1082c                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
1082c     A7 28 02 FB | 	rdlong	local02, fp
10830     14 4E 05 F1 | 	add	fp, #20
10834     A7 28 62 FC | 	wrlong	local02, fp
10838     14 4E 85 F1 | 	sub	fp, #20
1083c     A7 34 02 FB | 	rdlong	local08, fp
10840     04 4E 05 F1 | 	add	fp, #4
10844     A7 28 02 FB | 	rdlong	local02, fp
10848     04 4E 85 F1 | 	sub	fp, #4
1084c     14 35 02 F1 | 	add	local08, local02
10850                 | LR__1346
10850     14 4E 05 F1 | 	add	fp, #20
10854     A7 28 02 FB | 	rdlong	local02, fp
10858     14 4E 85 F1 | 	sub	fp, #20
1085c     1A 29 52 F2 | 	cmps	local02, local08 wc
10860     A8 00 90 3D |  if_ae	jmp	#LR__1347
10864     18 4E 05 F1 | 	add	fp, #24
10868     A7 32 02 FB | 	rdlong	local07, fp
1086c     09 32 66 F0 | 	shl	local07, #9
10870     0C 00 00 FF 
10874     D8 E4 05 F1 | 	add	objptr, ##6360
10878     F2 32 02 F1 | 	add	local07, objptr
1087c     04 4E 85 F1 | 	sub	fp, #4
10880     A7 30 02 FB | 	rdlong	local06, fp
10884     01 30 66 F0 | 	shl	local06, #1
10888     19 31 02 F1 | 	add	local06, local07
1088c     0C 4E 05 F1 | 	add	fp, #12
10890     A7 12 02 FB | 	rdlong	arg01, fp
10894     20 4E 85 F1 | 	sub	fp, #32
10898     0C 00 00 FF 
1089c     D8 E4 85 F1 | 	sub	objptr, ##6360
108a0     01 14 06 F6 | 	mov	arg02, #1
108a4     38 9B B1 FD | 	call	#__system___float_tointeger
108a8     18 FB 51 FC | 	wrword	result1, local06
108ac     20 4E 05 F1 | 	add	fp, #32
108b0     A7 12 02 FB | 	rdlong	arg01, fp
108b4     04 4E 05 F1 | 	add	fp, #4
108b8     A7 14 02 FB | 	rdlong	arg02, fp
108bc     24 4E 85 F1 | 	sub	fp, #36
108c0     1F 14 E6 F4 | 	bitnot	arg02, #31
108c4     80 92 B1 FD | 	call	#__system___float_add
108c8     20 4E 05 F1 | 	add	fp, #32
108cc     A7 FA 61 FC | 	wrlong	result1, fp
108d0     20 4E 85 F1 | 	sub	fp, #32
108d4     FD 12 02 F6 | 	mov	arg01, result1
108d8     00 14 06 F6 | 	mov	arg02, #0
108dc     01 16 06 F6 | 	mov	arg03, #1
108e0     68 9A B1 FD | 	call	#__system___float_cmp
108e4     00 FA 55 F2 | 	cmps	result1, #0 wc
108e8     20 4E 05 C1 |  if_b	add	fp, #32
108ec     A7 00 68 CC |  if_b	wrlong	#0, fp
108f0     20 4E 85 C1 |  if_b	sub	fp, #32
108f4     14 4E 05 F1 | 	add	fp, #20
108f8     A7 32 02 FB | 	rdlong	local07, fp
108fc     01 32 06 F1 | 	add	local07, #1
10900     A7 32 62 FC | 	wrlong	local07, fp
10904     14 4E 85 F1 | 	sub	fp, #20
10908     44 FF 9F FD | 	jmp	#LR__1346
1090c                 | LR__1347
1090c                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
1090c     A7 28 02 FB | 	rdlong	local02, fp
10910     04 4E 05 F1 | 	add	fp, #4
10914     A7 34 02 FB | 	rdlong	local08, fp
10918     1A 29 02 F1 | 	add	local02, local08
1091c     10 4E 05 F1 | 	add	fp, #16
10920     A7 28 62 FC | 	wrlong	local02, fp
10924     14 4E 85 F1 | 	sub	fp, #20
10928                 | LR__1348
10928     14 4E 05 F1 | 	add	fp, #20
1092c     A7 2E 02 FB | 	rdlong	local05, fp
10930     14 4E 85 F1 | 	sub	fp, #20
10934     00 2F 56 F2 | 	cmps	local05, #256 wc
10938     A8 00 90 3D |  if_ae	jmp	#LR__1349
1093c     18 4E 05 F1 | 	add	fp, #24
10940     A7 34 02 FB | 	rdlong	local08, fp
10944     09 34 66 F0 | 	shl	local08, #9
10948     0C 00 00 FF 
1094c     D8 E4 05 F1 | 	add	objptr, ##6360
10950     F2 34 02 F1 | 	add	local08, objptr
10954     04 4E 85 F1 | 	sub	fp, #4
10958     A7 32 02 FB | 	rdlong	local07, fp
1095c     01 32 66 F0 | 	shl	local07, #1
10960     1A 33 02 F1 | 	add	local07, local08
10964     0C 4E 05 F1 | 	add	fp, #12
10968     A7 12 02 FB | 	rdlong	arg01, fp
1096c     20 4E 85 F1 | 	sub	fp, #32
10970     0C 00 00 FF 
10974     D8 E4 85 F1 | 	sub	objptr, ##6360
10978     01 14 06 F6 | 	mov	arg02, #1
1097c     60 9A B1 FD | 	call	#__system___float_tointeger
10980     19 FB 51 FC | 	wrword	result1, local07
10984     20 4E 05 F1 | 	add	fp, #32
10988     A7 12 02 FB | 	rdlong	arg01, fp
1098c     1C 4E 05 F1 | 	add	fp, #28
10990     A7 14 02 FB | 	rdlong	arg02, fp
10994     3C 4E 85 F1 | 	sub	fp, #60
10998     1F 14 E6 F4 | 	bitnot	arg02, #31
1099c     A8 91 B1 FD | 	call	#__system___float_add
109a0     20 4E 05 F1 | 	add	fp, #32
109a4     A7 FA 61 FC | 	wrlong	result1, fp
109a8     20 4E 85 F1 | 	sub	fp, #32
109ac     FD 12 02 F6 | 	mov	arg01, result1
109b0     00 14 06 F6 | 	mov	arg02, #0
109b4     01 16 06 F6 | 	mov	arg03, #1
109b8     90 99 B1 FD | 	call	#__system___float_cmp
109bc     00 FA 55 F2 | 	cmps	result1, #0 wc
109c0     20 4E 05 C1 |  if_b	add	fp, #32
109c4     A7 00 68 CC |  if_b	wrlong	#0, fp
109c8     20 4E 85 C1 |  if_b	sub	fp, #32
109cc     14 4E 05 F1 | 	add	fp, #20
109d0     A7 34 02 FB | 	rdlong	local08, fp
109d4     01 34 06 F1 | 	add	local08, #1
109d8     A7 34 62 FC | 	wrlong	local08, fp
109dc     14 4E 85 F1 | 	sub	fp, #20
109e0     44 FF 9F FD | 	jmp	#LR__1348
109e4                 | LR__1349
109e4     18 4E 05 F1 | 	add	fp, #24
109e8     A7 2E 02 FB | 	rdlong	local05, fp
109ec     18 4E 85 F1 | 	sub	fp, #24
109f0     09 2E 66 F0 | 	shl	local05, #9
109f4     0C 00 00 FF 
109f8     D8 E4 05 F1 | 	add	objptr, ##6360
109fc     F2 2E 02 F1 | 	add	local05, objptr
10a00     FE 2F 06 F1 | 	add	local05, #510
10a04     17 01 58 FC | 	wrword	#0, local05
10a08     0C 00 00 FF 
10a0c     D8 E4 85 F1 | 	sub	objptr, ##6360
10a10                 | LR__1350
10a10     18 4E 05 F1 | 	add	fp, #24
10a14     A7 2E 02 FB | 	rdlong	local05, fp
10a18     18 4E 85 F1 | 	sub	fp, #24
10a1c     09 2E 66 F0 | 	shl	local05, #9
10a20     0C 00 00 FF 
10a24     D8 E4 05 F1 | 	add	objptr, ##6360
10a28     F2 2E 02 F1 | 	add	local05, objptr
10a2c     FE 2F 06 F1 | 	add	local05, #510
10a30     17 01 58 FC | 	wrword	#0, local05
10a34     0C 00 00 FF 
10a38     D8 E4 85 F1 | 	sub	objptr, ##6360
10a3c                 | LR__1351
10a3c     A7 F0 03 F6 | 	mov	ptra, fp
10a40     B2 00 A0 FD | 	call	#popregs_
10a44                 | _do_defenv_ret
10a44     2D 00 64 FD | 	ret
10a48                 | 
10a48                 | ' 
10a48                 | ' '-------------------- defsnd
10a48                 | ' 
10a48                 | ' sub do_defsnd
10a48                 | _do_defsnd
10a48     04 4A 05 F6 | 	mov	COUNT_, #4
10a4c     A8 00 A0 FD | 	call	#pushregs_
10a50     88 F0 07 F1 | 	add	ptra, #136
10a54     4A 00 00 FF 
10a58     80 E4 05 F1 | 	add	objptr, ##38016
10a5c     F2 1A 02 FB | 	rdlong	arg05, objptr
10a60     0D 19 02 F6 | 	mov	arg04, arg05
10a64     01 18 66 F0 | 	shl	arg04, #1
10a68     0D 19 02 F1 | 	add	arg04, arg05
10a6c     02 18 66 F0 | 	shl	arg04, #2
10a70     03 00 00 FF 
10a74     04 E4 85 F1 | 	sub	objptr, ##1540
10a78     F2 18 02 F1 | 	add	arg04, objptr
10a7c     0C 1B 02 FB | 	rdlong	arg05, arg04
10a80     A7 1A 62 FC | 	wrlong	arg05, fp
10a84                 | ' 
10a84                 | ' numpar=compiledline(lineptr_e).result.uresult
10a84                 | ' 
10a84                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
10a84                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
10a84                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
10a84                 | ' ' defsnd channel, oneint - loads the wave from the pointer
10a84                 | ' 
10a84                 | ' if numpar<2 then return
10a84     02 1A 56 F2 | 	cmps	arg05, #2 wc
10a88     47 00 00 FF 
10a8c     7C E4 85 F1 | 	sub	objptr, ##36476
10a90     98 08 90 CD |  if_b	jmp	#LR__1383
10a94                 | '  
10a94                 | ' if numpar=2 then
10a94     A7 1A 02 FB | 	rdlong	arg05, fp
10a98     02 1A 0E F2 | 	cmp	arg05, #2 wz
10a9c     A4 03 90 5D |  if_ne	jmp	#LR__1370
10aa0     64 CC BF FD | 	call	#_pop
10aa4     FF 1A 02 F6 | 	mov	arg05, result3
10aa8     2C 4E 05 F1 | 	add	fp, #44
10aac     A7 FA 61 FC | 	wrlong	result1, fp
10ab0     04 4E 05 F1 | 	add	fp, #4
10ab4     A7 FC 61 FC | 	wrlong	result2, fp
10ab8     04 4E 05 F1 | 	add	fp, #4
10abc     A7 1A 62 FC | 	wrlong	arg05, fp
10ac0                 | '   t1=pop()
10ac0                 | '   if t1.result_type=result_string2 then 
10ac0     34 4E 85 F1 | 	sub	fp, #52
10ac4     2B 1A 0E F2 | 	cmp	arg05, #43 wz
10ac8     20 00 90 5D |  if_ne	jmp	#LR__1360
10acc     2C 4E 05 F1 | 	add	fp, #44
10ad0     A7 12 02 FB | 	rdlong	arg01, fp
10ad4     2C 4E 85 F1 | 	sub	fp, #44
10ad8     A4 CD BF FD | 	call	#_convertstring
10adc     38 4E 05 F1 | 	add	fp, #56
10ae0     A7 FA 61 FC | 	wrlong	result1, fp
10ae4     38 4E 85 F1 | 	sub	fp, #56
10ae8     58 00 90 FD | 	jmp	#LR__1363
10aec                 | LR__1360
10aec     34 4E 05 F1 | 	add	fp, #52
10af0     A7 1A 02 FB | 	rdlong	arg05, fp
10af4     34 4E 85 F1 | 	sub	fp, #52
10af8     1F 1A 0E F2 | 	cmp	arg05, #31 wz
10afc     18 00 90 5D |  if_ne	jmp	#LR__1361
10b00     2C 4E 05 F1 | 	add	fp, #44
10b04     A7 1A 02 FB | 	rdlong	arg05, fp
10b08     0C 4E 05 F1 | 	add	fp, #12
10b0c     A7 1A 62 FC | 	wrlong	arg05, fp
10b10     38 4E 85 F1 | 	sub	fp, #56
10b14     2C 00 90 FD | 	jmp	#LR__1362
10b18                 | LR__1361
10b18     BA 01 00 FF 
10b1c     CC 1A 06 F6 | 	mov	arg05, ##@LR__5939
10b20     38 4E 05 F1 | 	add	fp, #56
10b24     A7 1A 62 FC | 	wrlong	arg05, fp
10b28     0C 4E 85 F1 | 	sub	fp, #12
10b2c     A7 12 02 F6 | 	mov	arg01, fp
10b30     2C 4E 85 F1 | 	sub	fp, #44
10b34     B4 CD BF FD | 	call	#_converttoint
10b38     14 4E 05 F1 | 	add	fp, #20
10b3c     A7 FA 61 FC | 	wrlong	result1, fp
10b40     14 4E 85 F1 | 	sub	fp, #20
10b44                 | LR__1362
10b44                 | LR__1363
10b44                 | '   if s<>"" then 
10b44     38 4E 05 F1 | 	add	fp, #56
10b48     A7 12 02 FB | 	rdlong	arg01, fp
10b4c     38 4E 85 F1 | 	sub	fp, #56
10b50     BA 01 00 FF 
10b54     CD 14 06 F6 | 	mov	arg02, ##@LR__5940
10b58     68 65 B1 FD | 	call	#__system___string_cmp
10b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
10b60     E4 01 90 AD |  if_e	jmp	#LR__1366
10b64     A0 CB BF FD | 	call	#_pop
10b68     FF 1A 02 F6 | 	mov	arg05, result3
10b6c     2C 4E 05 F1 | 	add	fp, #44
10b70     A7 FA 61 FC | 	wrlong	result1, fp
10b74     04 4E 05 F1 | 	add	fp, #4
10b78     A7 FC 61 FC | 	wrlong	result2, fp
10b7c     04 4E 05 F1 | 	add	fp, #4
10b80     A7 1A 62 FC | 	wrlong	arg05, fp
10b84     08 4E 85 F1 | 	sub	fp, #8
10b88     A7 12 02 F6 | 	mov	arg01, fp
10b8c     2C 4E 85 F1 | 	sub	fp, #44
10b90     58 CD BF FD | 	call	#_converttoint
10b94     10 4E 05 F1 | 	add	fp, #16
10b98     A7 FA 61 FC | 	wrlong	result1, fp
10b9c                 | '     t1=pop()
10b9c                 | '     channel=converttoint(t1) : if channel>31 then return
10b9c     FD 1A 02 F6 | 	mov	arg05, result1
10ba0     10 4E 85 F1 | 	sub	fp, #16
10ba4     20 1A 56 F2 | 	cmps	arg05, #32 wc
10ba8     80 07 90 3D |  if_ae	jmp	#LR__1383
10bac                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10bac     09 12 06 F6 | 	mov	arg01, #9
10bb0     44 B8 B1 FD | 	call	#__system__close
10bb4     09 26 06 F6 | 	mov	local01, #9
10bb8     BA 01 00 FF 
10bbc     CE 12 06 F6 | 	mov	arg01, ##@LR__5941
10bc0     38 4E 05 F1 | 	add	fp, #56
10bc4     A7 14 02 FB | 	rdlong	arg02, fp
10bc8     38 4E 85 F1 | 	sub	fp, #56
10bcc     28 65 B1 FD | 	call	#__system___string_concat
10bd0     FD 14 02 F6 | 	mov	arg02, result1
10bd4     13 13 02 F6 | 	mov	arg01, local01
10bd8     00 16 06 F6 | 	mov	arg03, #0
10bdc     C0 70 B1 FD | 	call	#__system___basic_open_string
10be0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10be4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
10be8     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
10bec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10bf0     52 00 00 FF 
10bf4     10 E5 05 F1 | 	add	objptr, ##42256
10bf8     F2 FA 61 FC | 	wrlong	result1, objptr
10bfc                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
10bfc     52 00 00 FF 
10c00     10 E5 85 F1 | 	sub	objptr, ##42256
10c04     B0 00 90 AD |  if_e	jmp	#LR__1364
10c08     00 12 06 F6 | 	mov	arg01, #0
10c0c     30 C1 B1 FD | 	call	#__system___getiolock_0614
10c10     FD 12 02 F6 | 	mov	arg01, result1
10c14     84 64 B1 FD | 	call	#__system___lockmem
10c18     BA 01 00 FF 
10c1c     DB 14 06 F6 | 	mov	arg02, ##@LR__5942
10c20     00 12 06 F6 | 	mov	arg01, #0
10c24     00 16 06 F6 | 	mov	arg03, #0
10c28     68 71 B1 FD | 	call	#__system___basic_print_string
10c2c     52 00 00 FF 
10c30     10 E5 05 F1 | 	add	objptr, ##42256
10c34     F2 14 02 FB | 	rdlong	arg02, objptr
10c38     52 00 00 FF 
10c3c     10 E5 85 F1 | 	sub	objptr, ##42256
10c40     00 12 06 F6 | 	mov	arg01, #0
10c44     00 16 06 F6 | 	mov	arg03, #0
10c48     0A 18 06 F6 | 	mov	arg04, #10
10c4c     88 71 B1 FD | 	call	#__system___basic_print_integer
10c50     BA 01 00 FF 
10c54     E9 14 06 F6 | 	mov	arg02, ##@LR__5943
10c58     00 12 06 F6 | 	mov	arg01, #0
10c5c     00 16 06 F6 | 	mov	arg03, #0
10c60     30 71 B1 FD | 	call	#__system___basic_print_string
10c64     00 26 06 F6 | 	mov	local01, #0
10c68     52 00 00 FF 
10c6c     10 E5 05 F1 | 	add	objptr, ##42256
10c70     F2 12 02 FB | 	rdlong	arg01, objptr
10c74     52 00 00 FF 
10c78     10 E5 85 F1 | 	sub	objptr, ##42256
10c7c     AC 8D B1 FD | 	call	#__system___strerror
10c80     FD 14 02 F6 | 	mov	arg02, result1
10c84     13 13 02 F6 | 	mov	arg01, local01
10c88     00 16 06 F6 | 	mov	arg03, #0
10c8c     04 71 B1 FD | 	call	#__system___basic_print_string
10c90     00 12 06 F6 | 	mov	arg01, #0
10c94     0A 14 06 F6 | 	mov	arg02, #10
10c98     00 16 06 F6 | 	mov	arg03, #0
10c9c     9C 70 B1 FD | 	call	#__system___basic_print_char
10ca0     00 12 06 F6 | 	mov	arg01, #0
10ca4     98 C0 B1 FD | 	call	#__system___getiolock_0614
10ca8     FD 00 68 FC | 	wrlong	#0, result1
10cac     09 12 06 F6 | 	mov	arg01, #9
10cb0     44 B7 B1 FD | 	call	#__system__close
10cb4     74 06 90 FD | 	jmp	#LR__1383
10cb8                 | LR__1364
10cb8                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
10cb8     04 4E 05 F1 | 	add	fp, #4
10cbc     A7 00 68 FC | 	wrlong	#0, fp
10cc0                 | LR__1365
10cc0     A7 26 02 FB | 	rdlong	local01, fp
10cc4     01 26 66 F0 | 	shl	local01, #1
10cc8     11 14 06 F6 | 	mov	arg02, #17
10ccc     13 15 02 F1 | 	add	arg02, local01
10cd0     78 4E 05 F1 | 	add	fp, #120
10cd4     A7 16 02 F6 | 	mov	arg03, fp
10cd8     7C 4E 85 F1 | 	sub	fp, #124
10cdc     09 12 06 F6 | 	mov	arg01, #9
10ce0     01 18 06 F6 | 	mov	arg04, #1
10ce4     02 1A 06 F6 | 	mov	arg05, #2
10ce8     24 72 B1 FD | 	call	#__system___basic_get
10cec     10 4E 05 F1 | 	add	fp, #16
10cf0     A7 12 02 FB | 	rdlong	arg01, fp
10cf4     0B 12 66 F0 | 	shl	arg01, #11
10cf8     0C 4E 85 F1 | 	sub	fp, #12
10cfc     A7 26 02 FB | 	rdlong	local01, fp
10d00     01 26 66 F0 | 	shl	local01, #1
10d04     13 13 02 F1 | 	add	arg01, local01
10d08     78 4E 05 F1 | 	add	fp, #120
10d0c     A7 14 E2 FA | 	rdword	arg02, fp
10d10     7C 4E 85 F1 | 	sub	fp, #124
10d14     0F 14 66 F7 | 	signx	arg02, #15
10d18     B8 2A B1 FD | 	call	#_psdpoke
10d1c     04 4E 05 F1 | 	add	fp, #4
10d20     A7 26 02 FB | 	rdlong	local01, fp
10d24     01 26 06 F1 | 	add	local01, #1
10d28     A7 26 62 FC | 	wrlong	local01, fp
10d2c     02 00 00 FF 
10d30     01 26 56 F2 | 	cmps	local01, ##1025 wc
10d34     88 FF 9F CD |  if_b	jmp	#LR__1365
10d38     04 4E 85 F1 | 	sub	fp, #4
10d3c                 | '     close #9
10d3c     09 12 06 F6 | 	mov	arg01, #9
10d40     B4 B6 B1 FD | 	call	#__system__close
10d44                 | '     return
10d44     E4 05 90 FD | 	jmp	#LR__1383
10d48                 | LR__1366
10d48                 | '     if wptr < ($80000 - 2048) then 
10d48     14 4E 05 F1 | 	add	fp, #20
10d4c     A7 26 02 FB | 	rdlong	local01, fp
10d50     14 4E 85 F1 | 	sub	fp, #20
10d54     FC 03 00 FF 
10d58     00 26 56 F2 | 	cmps	local01, ##522240 wc
10d5c     70 00 90 3D |  if_ae	jmp	#LR__1368
10d60                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
10d60     04 4E 05 F1 | 	add	fp, #4
10d64     A7 00 68 FC | 	wrlong	#0, fp
10d68     04 4E 85 F1 | 	sub	fp, #4
10d6c                 | LR__1367
10d6c     10 4E 05 F1 | 	add	fp, #16
10d70     A7 26 02 FB | 	rdlong	local01, fp
10d74     0B 26 66 F0 | 	shl	local01, #11
10d78     0C 4E 85 F1 | 	sub	fp, #12
10d7c     A7 1A 02 FB | 	rdlong	arg05, fp
10d80     0D 19 02 F6 | 	mov	arg04, arg05
10d84     01 18 66 F0 | 	shl	arg04, #1
10d88     0C 27 02 F1 | 	add	local01, arg04
10d8c     10 4E 05 F1 | 	add	fp, #16
10d90     A7 12 02 FB | 	rdlong	arg01, fp
10d94     14 4E 85 F1 | 	sub	fp, #20
10d98     01 1A 66 F0 | 	shl	arg05, #1
10d9c     0D 13 02 F1 | 	add	arg01, arg05
10da0     09 15 E2 FA | 	rdword	arg02, arg01
10da4     13 13 02 F6 | 	mov	arg01, local01
10da8     28 2A B1 FD | 	call	#_psdpoke
10dac     04 4E 05 F1 | 	add	fp, #4
10db0     A7 26 02 FB | 	rdlong	local01, fp
10db4     01 26 06 F1 | 	add	local01, #1
10db8     A7 26 62 FC | 	wrlong	local01, fp
10dbc     04 4E 85 F1 | 	sub	fp, #4
10dc0     02 00 00 FF 
10dc4     00 26 56 F2 | 	cmps	local01, ##1024 wc
10dc8     A0 FF 9F CD |  if_b	jmp	#LR__1367
10dcc     5C 05 90 FD | 	jmp	#LR__1383
10dd0                 | LR__1368
10dd0                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
10dd0     04 4E 05 F1 | 	add	fp, #4
10dd4     A7 00 68 FC | 	wrlong	#0, fp
10dd8     04 4E 85 F1 | 	sub	fp, #4
10ddc                 | LR__1369
10ddc     10 4E 05 F1 | 	add	fp, #16
10de0     A7 26 02 FB | 	rdlong	local01, fp
10de4     0B 26 66 F0 | 	shl	local01, #11
10de8     0C 4E 85 F1 | 	sub	fp, #12
10dec     A7 1A 02 FB | 	rdlong	arg05, fp
10df0     0D 19 02 F6 | 	mov	arg04, arg05
10df4     01 18 66 F0 | 	shl	arg04, #1
10df8     0C 27 02 F1 | 	add	local01, arg04
10dfc     10 4E 05 F1 | 	add	fp, #16
10e00     A7 12 02 FB | 	rdlong	arg01, fp
10e04     14 4E 85 F1 | 	sub	fp, #20
10e08     01 1A 66 F0 | 	shl	arg05, #1
10e0c     0D 13 02 F1 | 	add	arg01, arg05
10e10     00 2B B1 FD | 	call	#_psdpeek
10e14     FD 14 02 F6 | 	mov	arg02, result1
10e18     13 13 02 F6 | 	mov	arg01, local01
10e1c     B4 29 B1 FD | 	call	#_psdpoke
10e20     04 4E 05 F1 | 	add	fp, #4
10e24     A7 26 02 FB | 	rdlong	local01, fp
10e28     01 26 06 F1 | 	add	local01, #1
10e2c     A7 26 62 FC | 	wrlong	local01, fp
10e30     04 4E 85 F1 | 	sub	fp, #4
10e34     02 00 00 FF 
10e38     00 26 56 F2 | 	cmps	local01, ##1024 wc
10e3c     9C FF 9F CD |  if_b	jmp	#LR__1369
10e40                 | '     return 
10e40     E8 04 90 FD | 	jmp	#LR__1383
10e44                 | '   return
10e44                 | LR__1370
10e44                 | ' for i=0 to 15 : harm(i)=0: next i  
10e44     04 4E 05 F1 | 	add	fp, #4
10e48     A7 00 68 FC | 	wrlong	#0, fp
10e4c     97 16 48 FB | 	callpa	#(@LR__1372-@LR__1371)>>2,fcache_load_ptr_
10e50                 | LR__1371
10e50     A7 26 02 FB | 	rdlong	local01, fp
10e54     02 26 66 F0 | 	shl	local01, #2
10e58     38 4E 05 F1 | 	add	fp, #56
10e5c     A7 26 02 F1 | 	add	local01, fp
10e60     13 01 68 FC | 	wrlong	#0, local01
10e64     38 4E 85 F1 | 	sub	fp, #56
10e68     A7 26 02 FB | 	rdlong	local01, fp
10e6c     01 26 06 F1 | 	add	local01, #1
10e70     A7 26 62 FC | 	wrlong	local01, fp
10e74     10 26 56 F2 | 	cmps	local01, #16 wc
10e78     D4 FF 9F CD |  if_b	jmp	#LR__1371
10e7c                 | LR__1372
10e7c     04 4E 85 F1 | 	sub	fp, #4
10e80                 | ' for i=numpar to 2 step -1 
10e80     A7 26 02 FB | 	rdlong	local01, fp
10e84     04 4E 05 F1 | 	add	fp, #4
10e88     A7 26 62 FC | 	wrlong	local01, fp
10e8c     04 4E 85 F1 | 	sub	fp, #4
10e90                 | LR__1373
10e90     74 C8 BF FD | 	call	#_pop
10e94     2C 4E 05 F1 | 	add	fp, #44
10e98     A7 FA 61 FC | 	wrlong	result1, fp
10e9c     04 4E 05 F1 | 	add	fp, #4
10ea0     A7 FC 61 FC | 	wrlong	result2, fp
10ea4     04 4E 05 F1 | 	add	fp, #4
10ea8     A7 FE 61 FC | 	wrlong	result3, fp
10eac     30 4E 85 F1 | 	sub	fp, #48
10eb0     A7 26 02 FB | 	rdlong	local01, fp
10eb4     02 26 86 F1 | 	sub	local01, #2
10eb8     02 26 66 F0 | 	shl	local01, #2
10ebc     38 4E 05 F1 | 	add	fp, #56
10ec0     A7 26 02 F1 | 	add	local01, fp
10ec4     10 4E 85 F1 | 	sub	fp, #16
10ec8     A7 12 02 F6 | 	mov	arg01, fp
10ecc     2C 4E 85 F1 | 	sub	fp, #44
10ed0     D4 CA BF FD | 	call	#_converttofloat
10ed4     13 FB 61 FC | 	wrlong	result1, local01
10ed8     04 4E 05 F1 | 	add	fp, #4
10edc     A7 26 02 FB | 	rdlong	local01, fp
10ee0     01 26 86 F1 | 	sub	local01, #1
10ee4     A7 26 62 FC | 	wrlong	local01, fp
10ee8     04 4E 85 F1 | 	sub	fp, #4
10eec     02 26 56 F2 | 	cmps	local01, #2 wc
10ef0     9C FF 9F 3D |  if_ae	jmp	#LR__1373
10ef4     10 C8 BF FD | 	call	#_pop
10ef8     FF 26 02 F6 | 	mov	local01, result3
10efc     2C 4E 05 F1 | 	add	fp, #44
10f00     A7 FA 61 FC | 	wrlong	result1, fp
10f04     04 4E 05 F1 | 	add	fp, #4
10f08     A7 FC 61 FC | 	wrlong	result2, fp
10f0c     04 4E 05 F1 | 	add	fp, #4
10f10     A7 26 62 FC | 	wrlong	local01, fp
10f14     08 4E 85 F1 | 	sub	fp, #8
10f18     A7 12 02 F6 | 	mov	arg01, fp
10f1c     2C 4E 85 F1 | 	sub	fp, #44
10f20     C8 C9 BF FD | 	call	#_converttoint
10f24     10 4E 05 F1 | 	add	fp, #16
10f28     A7 FA 61 FC | 	wrlong	result1, fp
10f2c                 | ' t1=pop()
10f2c                 | ' channel=converttoint(t1) : : if channel>31 then return
10f2c     FD 26 02 F6 | 	mov	local01, result1
10f30     10 4E 85 F1 | 	sub	fp, #16
10f34     20 26 56 F2 | 	cmps	local01, #32 wc
10f38     F0 03 90 3D |  if_ae	jmp	#LR__1383
10f3c     20 4E 05 F1 | 	add	fp, #32
10f40     A7 00 68 FC | 	wrlong	#0, fp
10f44                 | ' max=0
10f44                 | ' if harm(0)<0 then
10f44     1C 4E 05 F1 | 	add	fp, #28
10f48     A7 12 02 FB | 	rdlong	arg01, fp
10f4c     3C 4E 85 F1 | 	sub	fp, #60
10f50     00 14 06 F6 | 	mov	arg02, #0
10f54     01 16 06 F6 | 	mov	arg03, #1
10f58     F0 93 B1 FD | 	call	#__system___float_cmp
10f5c     00 FA 55 F2 | 	cmps	result1, #0 wc
10f60     04 01 90 3D |  if_ae	jmp	#LR__1376
10f64     3C 4E 05 F1 | 	add	fp, #60
10f68     A7 FA 01 FB | 	rdlong	result1, fp
10f6c     1F FA 05 F4 | 	bitl	result1, #31
10f70     24 4E 85 F1 | 	sub	fp, #36
10f74     A7 FA 61 FC | 	wrlong	result1, fp
10f78     28 4E 05 F1 | 	add	fp, #40
10f7c     A7 FA 01 FB | 	rdlong	result1, fp
10f80     1F FA 05 F4 | 	bitl	result1, #31
10f84     24 4E 85 F1 | 	sub	fp, #36
10f88     A7 FA 61 FC | 	wrlong	result1, fp
10f8c     20 4E 05 F1 | 	add	fp, #32
10f90     00 C0 9F FF 
10f94     A7 00 68 FC | 	wrlong	##1065353216, fp
10f98     24 4E 85 F1 | 	sub	fp, #36
10f9c     A7 26 02 FB | 	rdlong	local01, fp
10fa0     28 4E 05 F1 | 	add	fp, #40
10fa4     A7 26 62 FC | 	wrlong	local01, fp
10fa8     24 4E 85 F1 | 	sub	fp, #36
10fac     A7 26 02 FB | 	rdlong	local01, fp
10fb0     28 4E 05 F1 | 	add	fp, #40
10fb4     A7 26 62 FC | 	wrlong	local01, fp
10fb8                 | '   harm(0)=1
10fb8                 | '   harm(1)=even
10fb8                 | '   harm(2)=odd
10fb8                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
10fb8     40 4E 85 F1 | 	sub	fp, #64
10fbc     A7 06 68 FC | 	wrlong	#3, fp
10fc0                 | LR__1374
10fc0     A7 1A 02 FB | 	rdlong	arg05, fp
10fc4     0D 29 02 F6 | 	mov	local02, arg05
10fc8     02 28 66 F0 | 	shl	local02, #2
10fcc     38 4E 05 F1 | 	add	fp, #56
10fd0     A7 28 02 F1 | 	add	local02, fp
10fd4     02 1A 86 F1 | 	sub	arg05, #2
10fd8     02 1A 66 F0 | 	shl	arg05, #2
10fdc     A7 1A 02 F1 | 	add	arg05, fp
10fe0     0D 13 02 FB | 	rdlong	arg01, arg05
10fe4     24 4E 85 F1 | 	sub	fp, #36
10fe8     A7 14 02 FB | 	rdlong	arg02, fp
10fec     18 4E 85 F1 | 	sub	fp, #24
10ff0     24 8F B1 FD | 	call	#__system___float_mul
10ff4     14 FB 61 FC | 	wrlong	result1, local02
10ff8     04 4E 05 F1 | 	add	fp, #4
10ffc     A7 2A 02 FB | 	rdlong	local03, fp
11000     02 2A 06 F1 | 	add	local03, #2
11004     A7 2A 62 FC | 	wrlong	local03, fp
11008     10 2A 56 F2 | 	cmps	local03, #16 wc
1100c     B0 FF 9F CD |  if_b	jmp	#LR__1374
11010                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
11010     A7 08 68 FC | 	wrlong	#4, fp
11014                 | LR__1375
11014     A7 2A 02 FB | 	rdlong	local03, fp
11018     15 29 02 F6 | 	mov	local02, local03
1101c     02 28 66 F0 | 	shl	local02, #2
11020     38 4E 05 F1 | 	add	fp, #56
11024     A7 28 02 F1 | 	add	local02, fp
11028     02 2A 86 F1 | 	sub	local03, #2
1102c     02 2A 66 F0 | 	shl	local03, #2
11030     A7 2A 02 F1 | 	add	local03, fp
11034     15 13 02 FB | 	rdlong	arg01, local03
11038     20 4E 85 F1 | 	sub	fp, #32
1103c     A7 14 02 FB | 	rdlong	arg02, fp
11040     1C 4E 85 F1 | 	sub	fp, #28
11044     D0 8E B1 FD | 	call	#__system___float_mul
11048     14 FB 61 FC | 	wrlong	result1, local02
1104c     04 4E 05 F1 | 	add	fp, #4
11050     A7 2A 02 FB | 	rdlong	local03, fp
11054     02 2A 06 F1 | 	add	local03, #2
11058     A7 2A 62 FC | 	wrlong	local03, fp
1105c     0F 2A 56 F2 | 	cmps	local03, #15 wc
11060     B0 FF 9F CD |  if_b	jmp	#LR__1375
11064     04 4E 85 F1 | 	sub	fp, #4
11068                 | LR__1376
11068                 | ' if harm(0)>=0 then ' synthesize with harmonics
11068     3C 4E 05 F1 | 	add	fp, #60
1106c     A7 12 02 FB | 	rdlong	arg01, fp
11070     3C 4E 85 F1 | 	sub	fp, #60
11074     00 14 06 F6 | 	mov	arg02, #0
11078     01 16 66 F6 | 	neg	arg03, #1
1107c     CC 92 B1 FD | 	call	#__system___float_cmp
11080     00 FA 55 F2 | 	cmps	result1, #0 wc
11084     A4 02 90 CD |  if_b	jmp	#LR__1382
11088                 | '   for i=0 to 1023
11088     04 4E 05 F1 | 	add	fp, #4
1108c     A7 00 68 FC | 	wrlong	#0, fp
11090     04 4E 85 F1 | 	sub	fp, #4
11094                 | LR__1377
11094     24 4E 05 F1 | 	add	fp, #36
11098     A7 00 68 FC | 	wrlong	#0, fp
1109c                 | '     spl=0
1109c                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
1109c     1C 4E 85 F1 | 	sub	fp, #28
110a0     A7 00 68 FC | 	wrlong	#0, fp
110a4                 | LR__1378
110a4     A7 28 02 FB | 	rdlong	local02, fp
110a8     02 28 66 F0 | 	shl	local02, #2
110ac     34 4E 05 F1 | 	add	fp, #52
110b0     A7 28 02 F1 | 	add	local02, fp
110b4     14 2B 02 FB | 	rdlong	local03, local02
110b8     87 E4 1D FF 
110bc     DB 29 06 F6 | 	mov	local02, ##1003032539
110c0     38 4E 85 F1 | 	sub	fp, #56
110c4     A7 12 02 FB | 	rdlong	arg01, fp
110c8     04 4E 85 F1 | 	sub	fp, #4
110cc     09 13 52 F6 | 	abs	arg01, arg01 wc
110d0     1F 2C C6 C9 |  if_b	decod	local04, #31
110d4     00 2C 06 36 |  if_ae	mov	local04, #0
110d8     38 8A B1 FD | 	call	#__system___float_fromuns
110dc     16 FB 61 F5 | 	xor	result1, local04
110e0     FD 14 02 F6 | 	mov	arg02, result1
110e4     14 13 02 F6 | 	mov	arg01, local02
110e8     2C 8E B1 FD | 	call	#__system___float_mul
110ec     FD 28 02 F6 | 	mov	local02, result1
110f0     08 4E 05 F1 | 	add	fp, #8
110f4     A7 12 02 FB | 	rdlong	arg01, fp
110f8     08 4E 85 F1 | 	sub	fp, #8
110fc     01 12 06 F1 | 	add	arg01, #1
11100     09 13 52 F6 | 	abs	arg01, arg01 wc
11104     1F 2C C6 C9 |  if_b	decod	local04, #31
11108     00 2C 06 36 |  if_ae	mov	local04, #0
1110c     04 8A B1 FD | 	call	#__system___float_fromuns
11110     16 FB 61 F5 | 	xor	result1, local04
11114     FD 14 02 F6 | 	mov	arg02, result1
11118     14 13 02 F6 | 	mov	arg01, local02
1111c     F8 8D B1 FD | 	call	#__system___float_mul
11120     FD 12 02 F6 | 	mov	arg01, result1
11124     50 97 B1 FD | 	call	#__system____builtin_sinf
11128     FD 14 02 F6 | 	mov	arg02, result1
1112c     15 13 02 F6 | 	mov	arg01, local03
11130     E4 8D B1 FD | 	call	#__system___float_mul
11134     FD 14 02 F6 | 	mov	arg02, result1
11138     24 4E 05 F1 | 	add	fp, #36
1113c     A7 12 02 FB | 	rdlong	arg01, fp
11140     24 4E 85 F1 | 	sub	fp, #36
11144     00 8A B1 FD | 	call	#__system___float_add
11148     24 4E 05 F1 | 	add	fp, #36
1114c     A7 FA 61 FC | 	wrlong	result1, fp
11150     1C 4E 85 F1 | 	sub	fp, #28
11154     A7 16 02 FB | 	rdlong	arg03, fp
11158     01 16 06 F1 | 	add	arg03, #1
1115c     A7 16 62 FC | 	wrlong	arg03, fp
11160     10 16 56 F2 | 	cmps	arg03, #16 wc
11164     3C FF 9F CD |  if_b	jmp	#LR__1378
11168                 | '     if abs(spl)>max then max=abs(spl)  
11168     1C 4E 05 F1 | 	add	fp, #28
1116c     A7 12 02 FB | 	rdlong	arg01, fp
11170     1F 12 06 F4 | 	bitl	arg01, #31
11174     04 4E 85 F1 | 	sub	fp, #4
11178     A7 14 02 FB | 	rdlong	arg02, fp
1117c     20 4E 85 F1 | 	sub	fp, #32
11180     01 16 66 F6 | 	neg	arg03, #1
11184     C4 91 B1 FD | 	call	#__system___float_cmp
11188     01 FA 55 F2 | 	cmps	result1, #1 wc
1118c     18 00 90 CD |  if_b	jmp	#LR__1379
11190     24 4E 05 F1 | 	add	fp, #36
11194     A7 FA 01 FB | 	rdlong	result1, fp
11198     1F FA 05 F4 | 	bitl	result1, #31
1119c     04 4E 85 F1 | 	sub	fp, #4
111a0     A7 FA 61 FC | 	wrlong	result1, fp
111a4     20 4E 85 F1 | 	sub	fp, #32
111a8                 | LR__1379
111a8     04 4E 05 F1 | 	add	fp, #4
111ac     A7 2A 02 FB | 	rdlong	local03, fp
111b0     01 2A 06 F1 | 	add	local03, #1
111b4     A7 2A 62 FC | 	wrlong	local03, fp
111b8     04 4E 85 F1 | 	sub	fp, #4
111bc     02 00 00 FF 
111c0     00 2A 56 F2 | 	cmps	local03, ##1024 wc
111c4     CC FE 9F CD |  if_b	jmp	#LR__1377
111c8                 | '   for i=0 to 1023
111c8     04 4E 05 F1 | 	add	fp, #4
111cc     A7 00 68 FC | 	wrlong	#0, fp
111d0     04 4E 85 F1 | 	sub	fp, #4
111d4                 | LR__1380
111d4     24 4E 05 F1 | 	add	fp, #36
111d8     A7 00 68 FC | 	wrlong	#0, fp
111dc                 | '     spl=0
111dc                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
111dc     1C 4E 85 F1 | 	sub	fp, #28
111e0     A7 00 68 FC | 	wrlong	#0, fp
111e4                 | LR__1381
111e4     A7 2A 02 FB | 	rdlong	local03, fp
111e8     02 2A 66 F0 | 	shl	local03, #2
111ec     34 4E 05 F1 | 	add	fp, #52
111f0     A7 2A 02 F1 | 	add	local03, fp
111f4     15 2B 02 FB | 	rdlong	local03, local03
111f8     1C 4E 85 F1 | 	sub	fp, #28
111fc     A7 14 02 FB | 	rdlong	arg02, fp
11200     20 4E 85 F1 | 	sub	fp, #32
11204     58 7F 23 FF 
11208     00 12 06 F6 | 	mov	arg01, ##1191096320
1120c     0C 8F B1 FD | 	call	#__system___float_div
11210     FD 14 02 F6 | 	mov	arg02, result1
11214     15 13 02 F6 | 	mov	arg01, local03
11218     FC 8C B1 FD | 	call	#__system___float_mul
1121c     FD 2A 02 F6 | 	mov	local03, result1
11220     87 E4 1D FF 
11224     DB 29 06 F6 | 	mov	local02, ##1003032539
11228     04 4E 05 F1 | 	add	fp, #4
1122c     A7 12 02 FB | 	rdlong	arg01, fp
11230     04 4E 85 F1 | 	sub	fp, #4
11234     09 13 52 F6 | 	abs	arg01, arg01 wc
11238     1F 2C C6 C9 |  if_b	decod	local04, #31
1123c     00 2C 06 36 |  if_ae	mov	local04, #0
11240     D0 88 B1 FD | 	call	#__system___float_fromuns
11244     16 FB 61 F5 | 	xor	result1, local04
11248     FD 14 02 F6 | 	mov	arg02, result1
1124c     14 13 02 F6 | 	mov	arg01, local02
11250     C4 8C B1 FD | 	call	#__system___float_mul
11254     FD 28 02 F6 | 	mov	local02, result1
11258     08 4E 05 F1 | 	add	fp, #8
1125c     A7 12 02 FB | 	rdlong	arg01, fp
11260     08 4E 85 F1 | 	sub	fp, #8
11264     01 12 06 F1 | 	add	arg01, #1
11268     09 13 52 F6 | 	abs	arg01, arg01 wc
1126c     1F 2C C6 C9 |  if_b	decod	local04, #31
11270     00 2C 06 36 |  if_ae	mov	local04, #0
11274     9C 88 B1 FD | 	call	#__system___float_fromuns
11278     16 FB 61 F5 | 	xor	result1, local04
1127c     FD 14 02 F6 | 	mov	arg02, result1
11280     14 13 02 F6 | 	mov	arg01, local02
11284     90 8C B1 FD | 	call	#__system___float_mul
11288     FD 12 02 F6 | 	mov	arg01, result1
1128c     E8 95 B1 FD | 	call	#__system____builtin_sinf
11290     FD 14 02 F6 | 	mov	arg02, result1
11294     15 13 02 F6 | 	mov	arg01, local03
11298     7C 8C B1 FD | 	call	#__system___float_mul
1129c     FD 14 02 F6 | 	mov	arg02, result1
112a0     24 4E 05 F1 | 	add	fp, #36
112a4     A7 12 02 FB | 	rdlong	arg01, fp
112a8     24 4E 85 F1 | 	sub	fp, #36
112ac     98 88 B1 FD | 	call	#__system___float_add
112b0     24 4E 05 F1 | 	add	fp, #36
112b4     A7 FA 61 FC | 	wrlong	result1, fp
112b8     1C 4E 85 F1 | 	sub	fp, #28
112bc     A7 2A 02 FB | 	rdlong	local03, fp
112c0     01 2A 06 F1 | 	add	local03, #1
112c4     A7 2A 62 FC | 	wrlong	local03, fp
112c8     10 2A 56 F2 | 	cmps	local03, #16 wc
112cc     14 FF 9F CD |  if_b	jmp	#LR__1381
112d0     08 4E 05 F1 | 	add	fp, #8
112d4     A7 2A 02 FB | 	rdlong	local03, fp
112d8     0B 2A 66 F0 | 	shl	local03, #11
112dc     0C 4E 85 F1 | 	sub	fp, #12
112e0     A7 28 02 FB | 	rdlong	local02, fp
112e4     01 28 66 F0 | 	shl	local02, #1
112e8     14 2B 02 F1 | 	add	local03, local02
112ec     20 4E 05 F1 | 	add	fp, #32
112f0     A7 12 02 FB | 	rdlong	arg01, fp
112f4     24 4E 85 F1 | 	sub	fp, #36
112f8     01 14 06 F6 | 	mov	arg02, #1
112fc     E0 90 B1 FD | 	call	#__system___float_tointeger
11300     FD 14 02 F6 | 	mov	arg02, result1
11304     15 13 02 F6 | 	mov	arg01, local03
11308     C8 24 B1 FD | 	call	#_psdpoke
1130c     04 4E 05 F1 | 	add	fp, #4
11310     A7 2A 02 FB | 	rdlong	local03, fp
11314     01 2A 06 F1 | 	add	local03, #1
11318     A7 2A 62 FC | 	wrlong	local03, fp
1131c     04 4E 85 F1 | 	sub	fp, #4
11320     02 00 00 FF 
11324     00 2A 56 F2 | 	cmps	local03, ##1024 wc
11328     A8 FE 9F CD |  if_b	jmp	#LR__1380
1132c                 | LR__1382
1132c                 | LR__1383
1132c     A7 F0 03 F6 | 	mov	ptra, fp
11330     B2 00 A0 FD | 	call	#popregs_
11334                 | _do_defsnd_ret
11334     2D 00 64 FD | 	ret
11338                 | 
11338                 | ' 
11338                 | ' '-------------------- defsprite
11338                 | ' 
11338                 | ' sub do_defsprite
11338                 | _do_defsprite
11338     07 4A 05 F6 | 	mov	COUNT_, #7
1133c     A8 00 A0 FD | 	call	#pushregs_
11340     60 F0 07 F1 | 	add	ptra, #96
11344     C0 C3 BF FD | 	call	#_pop
11348     FD 16 02 F6 | 	mov	arg03, result1
1134c     FE 14 02 F6 | 	mov	arg02, result2
11350     FF 12 02 F6 | 	mov	arg01, result3
11354     30 4E 05 F1 | 	add	fp, #48
11358     A7 16 62 FC | 	wrlong	arg03, fp
1135c     04 4E 05 F1 | 	add	fp, #4
11360     A7 14 62 FC | 	wrlong	arg02, fp
11364     04 4E 05 F1 | 	add	fp, #4
11368     A7 12 62 FC | 	wrlong	arg01, fp
1136c     38 4E 85 F1 | 	sub	fp, #56
11370     94 C3 BF FD | 	call	#_pop
11374     FD 16 02 F6 | 	mov	arg03, result1
11378     FE 14 02 F6 | 	mov	arg02, result2
1137c     FF 12 02 F6 | 	mov	arg01, result3
11380     24 4E 05 F1 | 	add	fp, #36
11384     A7 16 62 FC | 	wrlong	arg03, fp
11388     04 4E 05 F1 | 	add	fp, #4
1138c     A7 14 62 FC | 	wrlong	arg02, fp
11390     04 4E 05 F1 | 	add	fp, #4
11394     A7 12 62 FC | 	wrlong	arg01, fp
11398     2C 4E 85 F1 | 	sub	fp, #44
1139c     68 C3 BF FD | 	call	#_pop
113a0     FD 16 02 F6 | 	mov	arg03, result1
113a4     FE 14 02 F6 | 	mov	arg02, result2
113a8     FF 12 02 F6 | 	mov	arg01, result3
113ac     18 4E 05 F1 | 	add	fp, #24
113b0     A7 16 62 FC | 	wrlong	arg03, fp
113b4     04 4E 05 F1 | 	add	fp, #4
113b8     A7 14 62 FC | 	wrlong	arg02, fp
113bc     04 4E 05 F1 | 	add	fp, #4
113c0     A7 12 62 FC | 	wrlong	arg01, fp
113c4     20 4E 85 F1 | 	sub	fp, #32
113c8     3C C3 BF FD | 	call	#_pop
113cc     FD 16 02 F6 | 	mov	arg03, result1
113d0     FE 14 02 F6 | 	mov	arg02, result2
113d4     FF 12 02 F6 | 	mov	arg01, result3
113d8     0C 4E 05 F1 | 	add	fp, #12
113dc     A7 16 62 FC | 	wrlong	arg03, fp
113e0     04 4E 05 F1 | 	add	fp, #4
113e4     A7 14 62 FC | 	wrlong	arg02, fp
113e8     04 4E 05 F1 | 	add	fp, #4
113ec     A7 12 62 FC | 	wrlong	arg01, fp
113f0     14 4E 85 F1 | 	sub	fp, #20
113f4     10 C3 BF FD | 	call	#_pop
113f8     FF 16 02 F6 | 	mov	arg03, result3
113fc     A7 FA 61 FC | 	wrlong	result1, fp
11400     04 4E 05 F1 | 	add	fp, #4
11404     A7 FC 61 FC | 	wrlong	result2, fp
11408     04 4E 05 F1 | 	add	fp, #4
1140c     A7 16 62 FC | 	wrlong	arg03, fp
11410     08 4E 85 F1 | 	sub	fp, #8
11414     A7 12 02 F6 | 	mov	arg01, fp
11418     D0 C4 BF FD | 	call	#_converttoint
1141c     3C 4E 05 F1 | 	add	fp, #60
11420     A7 FA 61 FC | 	wrlong	result1, fp
11424     30 4E 85 F1 | 	sub	fp, #48
11428     A7 12 02 F6 | 	mov	arg01, fp
1142c     0C 4E 85 F1 | 	sub	fp, #12
11430     B8 C4 BF FD | 	call	#_converttoint
11434     40 4E 05 F1 | 	add	fp, #64
11438     A7 FA 61 FC | 	wrlong	result1, fp
1143c     28 4E 85 F1 | 	sub	fp, #40
11440     A7 12 02 F6 | 	mov	arg01, fp
11444     18 4E 85 F1 | 	sub	fp, #24
11448     A0 C4 BF FD | 	call	#_converttoint
1144c     44 4E 05 F1 | 	add	fp, #68
11450     A7 FA 61 FC | 	wrlong	result1, fp
11454     20 4E 85 F1 | 	sub	fp, #32
11458     A7 12 02 F6 | 	mov	arg01, fp
1145c     24 4E 85 F1 | 	sub	fp, #36
11460     88 C4 BF FD | 	call	#_converttoint
11464     48 4E 05 F1 | 	add	fp, #72
11468     A7 FA 61 FC | 	wrlong	result1, fp
1146c     18 4E 85 F1 | 	sub	fp, #24
11470     A7 12 02 F6 | 	mov	arg01, fp
11474     30 4E 85 F1 | 	sub	fp, #48
11478     70 C4 BF FD | 	call	#_converttoint
1147c     4C 4E 05 F1 | 	add	fp, #76
11480     A7 FA 61 FC | 	wrlong	result1, fp
11484                 | ' 
11484                 | ' t5=pop()
11484                 | ' t4=pop()
11484                 | ' t3=pop()
11484                 | ' t2=pop()
11484                 | ' t1=pop()
11484                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
11484                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
11484     10 4E 85 F1 | 	sub	fp, #16
11488     A7 16 02 FB | 	rdlong	arg03, fp
1148c     3C 4E 85 F1 | 	sub	fp, #60
11490     02 16 66 F0 | 	shl	arg03, #2
11494     52 00 00 FF 
11498     54 E4 05 F1 | 	add	objptr, ##42068
1149c     F2 16 02 F1 | 	add	arg03, objptr
114a0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
114a4     52 00 00 FF 
114a8     54 E4 85 F1 | 	sub	objptr, ##42068
114ac     2C 00 90 AD |  if_e	jmp	#LR__1390
114b0     3C 4E 05 F1 | 	add	fp, #60
114b4     A7 16 02 FB | 	rdlong	arg03, fp
114b8     3C 4E 85 F1 | 	sub	fp, #60
114bc     02 16 66 F0 | 	shl	arg03, #2
114c0     52 00 00 FF 
114c4     54 E4 05 F1 | 	add	objptr, ##42068
114c8     F2 16 02 F1 | 	add	arg03, objptr
114cc     0B 13 02 FB | 	rdlong	arg01, arg03
114d0     52 00 00 FF 
114d4     54 E4 85 F1 | 	sub	objptr, ##42068
114d8     A0 9E B1 FD | 	call	#__system___gc_free
114dc                 | LR__1390
114dc     3C 4E 05 F1 | 	add	fp, #60
114e0     A7 26 02 FB | 	rdlong	local01, fp
114e4     0C 4E 05 F1 | 	add	fp, #12
114e8     A7 16 02 FB | 	rdlong	arg03, fp
114ec     04 4E 05 F1 | 	add	fp, #4
114f0     A7 14 02 FB | 	rdlong	arg02, fp
114f4     0A 17 02 FD | 	qmul	arg03, arg02
114f8     02 26 66 F0 | 	shl	local01, #2
114fc     52 00 00 FF 
11500     54 E4 05 F1 | 	add	objptr, ##42068
11504     F2 26 02 F1 | 	add	local01, objptr
11508     4C 4E 85 F1 | 	sub	fp, #76
1150c     52 00 00 FF 
11510     54 E4 85 F1 | 	sub	objptr, ##42068
11514     18 12 62 FD | 	getqx	arg01
11518     24 9D B1 FD | 	call	#__system___gc_alloc_managed
1151c     13 FB 61 FC | 	wrlong	result1, local01
11520                 | ' for y=a3 to a3+a5-1
11520     44 4E 05 F1 | 	add	fp, #68
11524     A7 28 02 FB | 	rdlong	local02, fp
11528     0C 4E 05 F1 | 	add	fp, #12
1152c     A7 28 62 FC | 	wrlong	local02, fp
11530     0C 4E 85 F1 | 	sub	fp, #12
11534     A7 2A 02 FB | 	rdlong	local03, fp
11538     08 4E 05 F1 | 	add	fp, #8
1153c     A7 2C 02 FB | 	rdlong	local04, fp
11540     4C 4E 85 F1 | 	sub	fp, #76
11544     16 2B 02 F1 | 	add	local03, local04
11548                 | LR__1391
11548     50 4E 05 F1 | 	add	fp, #80
1154c     A7 28 02 FB | 	rdlong	local02, fp
11550     50 4E 85 F1 | 	sub	fp, #80
11554     15 29 52 F2 | 	cmps	local02, local03 wc
11558     F4 00 90 3D |  if_ae	jmp	#LR__1394
1155c                 | '   for x=a2 to a4+a2-1
1155c     40 4E 05 F1 | 	add	fp, #64
11560     A7 26 02 FB | 	rdlong	local01, fp
11564     14 4E 05 F1 | 	add	fp, #20
11568     A7 26 62 FC | 	wrlong	local01, fp
1156c     0C 4E 85 F1 | 	sub	fp, #12
11570     A7 2E 02 FB | 	rdlong	local05, fp
11574     08 4E 85 F1 | 	sub	fp, #8
11578     A7 30 02 FB | 	rdlong	local06, fp
1157c     40 4E 85 F1 | 	sub	fp, #64
11580     18 2F 02 F1 | 	add	local05, local06
11584                 | LR__1392
11584     54 4E 05 F1 | 	add	fp, #84
11588     A7 26 02 FB | 	rdlong	local01, fp
1158c     54 4E 85 F1 | 	sub	fp, #84
11590     17 27 52 F2 | 	cmps	local01, local05 wc
11594     A0 00 90 3D |  if_ae	jmp	#LR__1393
11598     3C 4E 05 F1 | 	add	fp, #60
1159c     A7 30 02 FB | 	rdlong	local06, fp
115a0     18 4E 05 F1 | 	add	fp, #24
115a4     A7 2C 02 FB | 	rdlong	local04, fp
115a8     14 4E 85 F1 | 	sub	fp, #20
115ac     A7 28 02 FB | 	rdlong	local02, fp
115b0     10 4E 05 F1 | 	add	fp, #16
115b4     A7 26 02 FB | 	rdlong	local01, fp
115b8     13 17 02 F6 | 	mov	arg03, local01
115bc     0C 4E 85 F1 | 	sub	fp, #12
115c0     A7 14 02 FB | 	rdlong	arg02, fp
115c4     0A 17 82 F1 | 	sub	arg03, arg02
115c8     04 4E 05 F1 | 	add	fp, #4
115cc     A7 14 02 FB | 	rdlong	arg02, fp
115d0     0A 17 02 FD | 	qmul	arg03, arg02
115d4     02 30 66 F0 | 	shl	local06, #2
115d8     52 00 00 FF 
115dc     54 E4 05 F1 | 	add	objptr, ##42068
115e0     F2 30 02 F1 | 	add	local06, objptr
115e4     18 31 02 FB | 	rdlong	local06, local06
115e8     16 33 02 F6 | 	mov	local07, local04
115ec     14 33 82 F1 | 	sub	local07, local02
115f0     52 00 00 FF 
115f4     54 E4 85 F1 | 	sub	objptr, ##42068
115f8     F2 12 02 FB | 	rdlong	arg01, objptr
115fc     16 13 02 F1 | 	add	arg01, local04
11600     48 4E 85 F1 | 	sub	fp, #72
11604     0A 26 66 F0 | 	shl	local01, #10
11608     13 13 02 F1 | 	add	arg01, local01
1160c     18 2C 62 FD | 	getqx	local04
11610     16 33 02 F1 | 	add	local07, local04
11614     18 33 02 F1 | 	add	local07, local06
11618     48 22 B1 FD | 	call	#_pspeek
1161c     19 FB 41 FC | 	wrbyte	result1, local07
11620     54 4E 05 F1 | 	add	fp, #84
11624     A7 32 02 FB | 	rdlong	local07, fp
11628     01 32 06 F1 | 	add	local07, #1
1162c     A7 32 62 FC | 	wrlong	local07, fp
11630     54 4E 85 F1 | 	sub	fp, #84
11634     4C FF 9F FD | 	jmp	#LR__1392
11638                 | LR__1393
11638     50 4E 05 F1 | 	add	fp, #80
1163c     A7 32 02 FB | 	rdlong	local07, fp
11640     01 32 06 F1 | 	add	local07, #1
11644     A7 32 62 FC | 	wrlong	local07, fp
11648     50 4E 85 F1 | 	sub	fp, #80
1164c     F8 FE 9F FD | 	jmp	#LR__1391
11650                 | LR__1394
11650     3C 4E 05 F1 | 	add	fp, #60
11654     A7 32 02 FB | 	rdlong	local07, fp
11658     19 13 02 F6 | 	mov	arg01, local07
1165c     3C 4E 85 F1 | 	sub	fp, #60
11660     02 32 66 F0 | 	shl	local07, #2
11664     52 00 00 FF 
11668     54 E4 05 F1 | 	add	objptr, ##42068
1166c     F2 32 02 F1 | 	add	local07, objptr
11670     19 15 02 FB | 	rdlong	arg02, local07
11674     52 00 00 FF 
11678     54 E4 85 F1 | 	sub	objptr, ##42068
1167c     48 2F B1 FD | 	call	#_hg010b_spin2_setspriteptr
11680     3C 4E 05 F1 | 	add	fp, #60
11684     A7 12 02 FB | 	rdlong	arg01, fp
11688     0C 4E 05 F1 | 	add	fp, #12
1168c     A7 14 02 FB | 	rdlong	arg02, fp
11690     04 4E 05 F1 | 	add	fp, #4
11694     A7 16 02 FB | 	rdlong	arg03, fp
11698     4C 4E 85 F1 | 	sub	fp, #76
1169c     B8 2F B1 FD | 	call	#_hg010b_spin2_setspritesize
116a0     A7 F0 03 F6 | 	mov	ptra, fp
116a4     B2 00 A0 FD | 	call	#popregs_
116a8                 | _do_defsprite_ret
116a8     2D 00 64 FD | 	ret
116ac                 | 
116ac                 | ' 
116ac                 | ' '-------------------- deg
116ac                 | ' 
116ac                 | ' sub do_deg
116ac                 | _do_deg
116ac     52 00 00 FF 
116b0     A8 E4 05 F1 | 	add	objptr, ##42152
116b4     7D 47 9E FF 
116b8     F2 6A 68 FC | 	wrlong	##1016003125, objptr
116bc     04 E4 05 F1 | 	add	objptr, #4
116c0     97 32 A1 FF 
116c4     F2 C2 69 FC | 	wrlong	##1113927393, objptr
116c8     52 00 00 FF 
116cc     AC E4 85 F1 | 	sub	objptr, ##42156
116d0                 | _do_deg_ret
116d0     2D 00 64 FD | 	ret
116d4                 | 
116d4                 | ' 
116d4                 | ' '-------------------- delete
116d4                 | ' 
116d4                 | ' sub do_delete
116d4                 | _do_delete
116d4     05 4A 05 F6 | 	mov	COUNT_, #5
116d8     A8 00 A0 FD | 	call	#pushregs_
116dc     28 C0 BF FD | 	call	#_pop
116e0     FE 18 02 F6 | 	mov	arg04, result2
116e4     FF 16 02 F6 | 	mov	arg03, result3
116e8     FD 26 02 F6 | 	mov	local01, result1
116ec     0C 29 02 F6 | 	mov	local02, arg04
116f0     0B 2B 02 F6 | 	mov	local03, arg03
116f4                 | ' 
116f4                 | ' t1=pop()
116f4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
116f4     2B 2A 0E F2 | 	cmp	local03, #43 wz
116f8     10 00 90 5D |  if_ne	jmp	#LR__1400
116fc     13 13 02 F6 | 	mov	arg01, local01
11700     7C C1 BF FD | 	call	#_convertstring
11704     FD 26 02 F6 | 	mov	local01, result1
11708     1F 2A 06 F6 | 	mov	local03, #31
1170c                 | LR__1400
1170c                 | ' if t1.result_type<>result_string then printerror(15): return
1170c     1F 2A 0E F2 | 	cmp	local03, #31 wz
11710     10 00 90 AD |  if_e	jmp	#LR__1401
11714     0F 12 06 F6 | 	mov	arg01, #15
11718     00 14 06 F6 | 	mov	arg02, #0
1171c     CC 1E B1 FD | 	call	#_printerror
11720     E4 00 90 FD | 	jmp	#LR__1405
11724                 | LR__1401
11724                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
11724     4A 00 00 FF 
11728     94 E4 05 F1 | 	add	objptr, ##38036
1172c     F2 12 02 FB | 	rdlong	arg01, objptr
11730     4A 00 00 FF 
11734     94 E4 85 F1 | 	sub	objptr, ##38036
11738     BA 01 00 FF 
1173c     EC 14 06 F6 | 	mov	arg02, ##@LR__5944
11740     80 59 B1 FD | 	call	#__system___string_cmp
11744     00 FA 0D F2 | 	cmp	result1, #0 wz
11748     34 00 90 AD |  if_e	jmp	#LR__1402
1174c     4A 00 00 FF 
11750     94 E4 05 F1 | 	add	objptr, ##38036
11754     F2 12 02 FB | 	rdlong	arg01, objptr
11758     4A 00 00 FF 
1175c     94 E4 85 F1 | 	sub	objptr, ##38036
11760     BA 01 00 FF 
11764     EE 14 06 F6 | 	mov	arg02, ##@LR__5945
11768     8C 59 B1 FD | 	call	#__system___string_concat
1176c     FD 12 02 F6 | 	mov	arg01, result1
11770     13 15 02 F6 | 	mov	arg02, local01
11774     80 59 B1 FD | 	call	#__system___string_concat
11778     FD 2C 02 F6 | 	mov	local04, result1
1177c     14 00 90 FD | 	jmp	#LR__1403
11780                 | LR__1402
11780     BA 01 00 FF 
11784     F0 12 06 F6 | 	mov	arg01, ##@LR__5946
11788     13 15 02 F6 | 	mov	arg02, local01
1178c     68 59 B1 FD | 	call	#__system___string_concat
11790     FD 2C 02 F6 | 	mov	local04, result1
11794                 | LR__1403
11794     16 13 02 F6 | 	mov	arg01, local04
11798     D0 80 B1 FD | 	call	#__system___remove
1179c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
117a0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
117a4     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
117a8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
117ac     FD 2E 0A F6 | 	mov	local05, result1 wz
117b0                 | ' kill filename$
117b0                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
117b0     54 00 90 AD |  if_e	jmp	#LR__1404
117b4     00 12 06 F6 | 	mov	arg01, #0
117b8     84 B5 B1 FD | 	call	#__system___getiolock_0614
117bc     FD 12 02 F6 | 	mov	arg01, result1
117c0     D8 58 B1 FD | 	call	#__system___lockmem
117c4     BA 01 00 FF 
117c8     F2 14 06 F6 | 	mov	arg02, ##@LR__5947
117cc     00 12 06 F6 | 	mov	arg01, #0
117d0     00 16 06 F6 | 	mov	arg03, #0
117d4     BC 65 B1 FD | 	call	#__system___basic_print_string
117d8     00 12 06 F6 | 	mov	arg01, #0
117dc     17 15 02 F6 | 	mov	arg02, local05
117e0     00 16 06 F6 | 	mov	arg03, #0
117e4     0A 18 06 F6 | 	mov	arg04, #10
117e8     EC 65 B1 FD | 	call	#__system___basic_print_integer
117ec     00 12 06 F6 | 	mov	arg01, #0
117f0     0A 14 06 F6 | 	mov	arg02, #10
117f4     00 16 06 F6 | 	mov	arg03, #0
117f8     40 65 B1 FD | 	call	#__system___basic_print_char
117fc     00 12 06 F6 | 	mov	arg01, #0
11800     3C B5 B1 FD | 	call	#__system___getiolock_0614
11804     FD 00 68 FC | 	wrlong	#0, result1
11808                 | LR__1404
11808                 | LR__1405
11808     A7 F0 03 F6 | 	mov	ptra, fp
1180c     B2 00 A0 FD | 	call	#popregs_
11810                 | _do_delete_ret
11810     2D 00 64 FD | 	ret
11814                 | 
11814                 | ' 
11814                 | ' '-------------------- dir
11814                 | ' 
11814                 | ' sub do_dir
11814                 | _do_dir
11814     13 4A 05 F6 | 	mov	COUNT_, #19
11818     A8 00 A0 FD | 	call	#pushregs_
1181c     01 00 00 FF 
11820     38 F0 07 F1 | 	add	ptra, ##568
11824                 | ' 
11824                 | ' print "Current directory: "; currentdir$ 
11824     00 12 06 F6 | 	mov	arg01, #0
11828     14 B5 B1 FD | 	call	#__system___getiolock_0614
1182c     FD 12 02 F6 | 	mov	arg01, result1
11830     68 58 B1 FD | 	call	#__system___lockmem
11834     BA 01 00 FF 
11838     2A 15 06 F6 | 	mov	arg02, ##@LR__5948
1183c     00 12 06 F6 | 	mov	arg01, #0
11840     00 16 06 F6 | 	mov	arg03, #0
11844     4C 65 B1 FD | 	call	#__system___basic_print_string
11848     4A 00 00 FF 
1184c     94 E4 05 F1 | 	add	objptr, ##38036
11850     F2 14 02 FB | 	rdlong	arg02, objptr
11854     4A 00 00 FF 
11858     94 E4 85 F1 | 	sub	objptr, ##38036
1185c     00 12 06 F6 | 	mov	arg01, #0
11860     00 16 06 F6 | 	mov	arg03, #0
11864     2C 65 B1 FD | 	call	#__system___basic_print_string
11868     00 12 06 F6 | 	mov	arg01, #0
1186c     0A 14 06 F6 | 	mov	arg02, #10
11870     00 16 06 F6 | 	mov	arg03, #0
11874     C4 64 B1 FD | 	call	#__system___basic_print_char
11878     01 26 06 F6 | 	mov	local01, #1
1187c     00 12 06 F6 | 	mov	arg01, #0
11880     BC B4 B1 FD | 	call	#__system___getiolock_0614
11884     FD 00 68 FC | 	wrlong	#0, result1
11888     00 28 06 F6 | 	mov	local02, #0
1188c     00 2A 06 F6 | 	mov	local03, #0
11890                 | ' px=0
11890                 | ' for i=0 to 127: filelist(i)="" : next i
11890     00 2C 06 F6 | 	mov	local04, #0
11894     1C 4E 05 F1 | 	add	fp, #28
11898     97 12 48 FB | 	callpa	#(@LR__1411-@LR__1410)>>2,fcache_load_ptr_
1189c                 | LR__1410
1189c     16 2F 02 F6 | 	mov	local05, local04
118a0     02 2E 66 F0 | 	shl	local05, #2
118a4     A7 2E 02 F1 | 	add	local05, fp
118a8     BA 01 00 FF 
118ac     3E 31 06 F6 | 	mov	local06, ##@LR__5949
118b0     17 31 62 FC | 	wrlong	local06, local05
118b4     01 2C 06 F1 | 	add	local04, #1
118b8     80 2C 56 F2 | 	cmps	local04, #128 wc
118bc     DC FF 9F CD |  if_b	jmp	#LR__1410
118c0                 | LR__1411
118c0     1C 4E 85 F1 | 	sub	fp, #28
118c4     BA 01 00 FF 
118c8     3F 13 06 F6 | 	mov	arg01, ##@LR__5950
118cc     10 14 06 F6 | 	mov	arg02, #16
118d0     2C B6 B1 FD | 	call	#__system___basic_dir
118d4     FD 32 02 F6 | 	mov	local07, result1
118d8     00 34 06 F6 | 	mov	local08, #0
118dc                 | ' filename=dir$("*", fbDirectory)
118dc                 | ' n=0
118dc                 | ' while filename <> "" andalso filename <> nil andalso n<128
118dc                 | LR__1412
118dc     BA 01 00 FF 
118e0     41 37 06 F6 | 	mov	local09, ##@LR__5951
118e4     19 13 02 F6 | 	mov	arg01, local07
118e8     1B 15 02 F6 | 	mov	arg02, local09
118ec     D4 57 B1 FD | 	call	#__system___string_cmp
118f0     00 FA 0D F2 | 	cmp	result1, #0 wz
118f4     68 00 90 AD |  if_e	jmp	#LR__1413
118f8     00 36 06 F6 | 	mov	local09, #0
118fc     19 13 02 F6 | 	mov	arg01, local07
11900     00 14 06 F6 | 	mov	arg02, #0
11904     BC 57 B1 FD | 	call	#__system___string_cmp
11908     00 FA 0D F2 | 	cmp	result1, #0 wz
1190c     50 00 90 AD |  if_e	jmp	#LR__1413
11910     80 34 56 F2 | 	cmps	local08, #128 wc
11914     48 00 90 3D |  if_ae	jmp	#LR__1413
11918     BA 01 00 FF 
1191c     42 13 06 F6 | 	mov	arg01, ##@LR__5952
11920     19 15 02 F6 | 	mov	arg02, local07
11924     D0 57 B1 FD | 	call	#__system___string_concat
11928     FD 32 02 F6 | 	mov	local07, result1
1192c     1A 2F 02 F6 | 	mov	local05, local08
11930     02 2E 66 F0 | 	shl	local05, #2
11934     1C 4E 05 F1 | 	add	fp, #28
11938     A7 2E 02 F1 | 	add	local05, fp
1193c     17 33 62 FC | 	wrlong	local07, local05
11940     01 34 06 F1 | 	add	local08, #1
11944     00 2E 06 F6 | 	mov	local05, #0
11948     00 12 06 F6 | 	mov	arg01, #0
1194c     00 14 06 F6 | 	mov	arg02, #0
11950     1C 4E 85 F1 | 	sub	fp, #28
11954     A8 B5 B1 FD | 	call	#__system___basic_dir
11958     FD 32 02 F6 | 	mov	local07, result1
1195c     7C FF 9F FD | 	jmp	#LR__1412
11960                 | LR__1413
11960                 | ' for i=0 to n-1			' now sort this
11960     00 2C 06 F6 | 	mov	local04, #0
11964     1A 39 02 F6 | 	mov	local10, local08
11968                 | LR__1414
11968     1C 2D 52 F2 | 	cmps	local04, local10 wc
1196c     DC 00 90 3D |  if_ae	jmp	#LR__1418
11970     00 3A 06 F6 | 	mov	local11, #0
11974                 | '   swapped=false
11974                 | '   for j=0 to n-i-2
11974     00 3C 06 F6 | 	mov	local12, #0
11978     1A 3F 02 F6 | 	mov	local13, local08
1197c     16 3F 82 F1 | 	sub	local13, local04
11980     01 3E 86 F1 | 	sub	local13, #1
11984                 | LR__1415
11984     1F 3D 52 F2 | 	cmps	local12, local13 wc
11988     B0 00 90 3D |  if_ae	jmp	#LR__1417
1198c                 | '     if filelist(j) > filelist(j+1) then
1198c     1E 37 02 F6 | 	mov	local09, local12
11990     02 36 66 F0 | 	shl	local09, #2
11994     1C 4E 05 F1 | 	add	fp, #28
11998     A7 36 02 F1 | 	add	local09, fp
1199c     1B 13 02 FB | 	rdlong	arg01, local09
119a0     1E 37 02 F6 | 	mov	local09, local12
119a4     01 36 06 F1 | 	add	local09, #1
119a8     1B 31 02 F6 | 	mov	local06, local09
119ac     02 30 66 F0 | 	shl	local06, #2
119b0     A7 26 02 F6 | 	mov	local01, fp
119b4     A7 30 02 F1 | 	add	local06, fp
119b8     18 2F 02 FB | 	rdlong	local05, local06
119bc     17 15 02 F6 | 	mov	arg02, local05
119c0     1C 4E 85 F1 | 	sub	fp, #28
119c4     FC 56 B1 FD | 	call	#__system___string_cmp
119c8     01 FA 55 F2 | 	cmps	result1, #1 wc
119cc     64 00 90 CD |  if_b	jmp	#LR__1416
119d0     1E 37 02 F6 | 	mov	local09, local12
119d4     01 36 06 F1 | 	add	local09, #1
119d8     02 36 66 F0 | 	shl	local09, #2
119dc     1C 4E 05 F1 | 	add	fp, #28
119e0     A7 36 02 F1 | 	add	local09, fp
119e4     1B 3B 02 FB | 	rdlong	local11, local09
119e8     1E 31 02 F6 | 	mov	local06, local12
119ec     02 30 66 F0 | 	shl	local06, #2
119f0     A7 30 02 F1 | 	add	local06, fp
119f4     18 2F 02 FB | 	rdlong	local05, local06
119f8     1E 37 02 F6 | 	mov	local09, local12
119fc     1B 31 02 F6 | 	mov	local06, local09
11a00     02 30 66 F0 | 	shl	local06, #2
11a04     A7 26 02 F6 | 	mov	local01, fp
11a08     A7 30 02 F1 | 	add	local06, fp
11a0c     18 3B 62 FC | 	wrlong	local11, local06
11a10     1E 29 02 F6 | 	mov	local02, local12
11a14     01 28 06 F1 | 	add	local02, #1
11a18     14 41 02 F6 | 	mov	local14, local02
11a1c     02 40 66 F0 | 	shl	local14, #2
11a20     A7 42 02 F6 | 	mov	local15, fp
11a24     A7 40 02 F1 | 	add	local14, fp
11a28     20 2F 62 FC | 	wrlong	local05, local14
11a2c     01 3A 66 F6 | 	neg	local11, #1
11a30     1C 4E 85 F1 | 	sub	fp, #28
11a34                 | LR__1416
11a34     01 3C 06 F1 | 	add	local12, #1
11a38     48 FF 9F FD | 	jmp	#LR__1415
11a3c                 | LR__1417
11a3c                 | ' if not swapped then exit for
11a3c     1D 45 22 F6 | 	not	local16, local11
11a40     00 44 0E F2 | 	cmp	local16, #0 wz
11a44     01 2C 06 A1 |  if_e	add	local04, #1
11a48     1C FF 9F AD |  if_e	jmp	#LR__1414
11a4c                 | LR__1418
11a4c                 | ' for i=0 to n-1
11a4c     00 2C 06 F6 | 	mov	local04, #0
11a50     1A 47 02 F6 | 	mov	local17, local08
11a54                 | LR__1419
11a54     23 2D 52 F2 | 	cmps	local04, local17 wc
11a58     94 00 90 3D |  if_ae	jmp	#LR__1421
11a5c                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11a5c     00 12 06 F6 | 	mov	arg01, #0
11a60     DC B2 B1 FD | 	call	#__system___getiolock_0614
11a64     FD 12 02 F6 | 	mov	arg01, result1
11a68     30 56 B1 FD | 	call	#__system___lockmem
11a6c     16 29 02 F6 | 	mov	local02, local04
11a70     02 28 66 F0 | 	shl	local02, #2
11a74     1C 4E 05 F1 | 	add	fp, #28
11a78     A7 40 02 F6 | 	mov	local14, fp
11a7c     A7 28 02 F1 | 	add	local02, fp
11a80     14 15 02 FB | 	rdlong	arg02, local02
11a84     00 26 06 F6 | 	mov	local01, #0
11a88     00 12 06 F6 | 	mov	arg01, #0
11a8c     00 16 06 F6 | 	mov	arg03, #0
11a90     1C 4E 85 F1 | 	sub	fp, #28
11a94     FC 62 B1 FD | 	call	#__system___basic_print_string
11a98     00 12 06 F6 | 	mov	arg01, #0
11a9c     A0 B2 B1 FD | 	call	#__system___getiolock_0614
11aa0     FD 00 68 FC | 	wrlong	#0, result1
11aa4     40 2A 06 F1 | 	add	local03, #64
11aa8     15 13 02 F6 | 	mov	arg01, local03
11aac     F4 37 B1 FD | 	call	#_hg010b_spin2_setcursorx
11ab0     00 2B 56 F2 | 	cmps	local03, #256 wc
11ab4     30 00 90 CD |  if_b	jmp	#LR__1420
11ab8     00 2A 06 F6 | 	mov	local03, #0
11abc     00 12 06 F6 | 	mov	arg01, #0
11ac0     7C B2 B1 FD | 	call	#__system___getiolock_0614
11ac4     FD 12 02 F6 | 	mov	arg01, result1
11ac8     D0 55 B1 FD | 	call	#__system___lockmem
11acc     00 12 06 F6 | 	mov	arg01, #0
11ad0     0A 14 06 F6 | 	mov	arg02, #10
11ad4     00 16 06 F6 | 	mov	arg03, #0
11ad8     60 62 B1 FD | 	call	#__system___basic_print_char
11adc     00 12 06 F6 | 	mov	arg01, #0
11ae0     5C B2 B1 FD | 	call	#__system___getiolock_0614
11ae4     FD 00 68 FC | 	wrlong	#0, result1
11ae8                 | LR__1420
11ae8     01 2C 06 F1 | 	add	local04, #1
11aec     64 FF 9F FD | 	jmp	#LR__1419
11af0                 | LR__1421
11af0                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11af0     80 34 56 F2 | 	cmps	local08, #128 wc
11af4     44 00 90 CD |  if_b	jmp	#LR__1422
11af8     00 12 06 F6 | 	mov	arg01, #0
11afc     40 B2 B1 FD | 	call	#__system___getiolock_0614
11b00     FD 12 02 F6 | 	mov	arg01, result1
11b04     94 55 B1 FD | 	call	#__system___lockmem
11b08     BA 01 00 FF 
11b0c     49 15 06 F6 | 	mov	arg02, ##@LR__5953
11b10     00 12 06 F6 | 	mov	arg01, #0
11b14     00 16 06 F6 | 	mov	arg03, #0
11b18     78 62 B1 FD | 	call	#__system___basic_print_string
11b1c     00 12 06 F6 | 	mov	arg01, #0
11b20     0A 14 06 F6 | 	mov	arg02, #10
11b24     00 16 06 F6 | 	mov	arg03, #0
11b28     10 62 B1 FD | 	call	#__system___basic_print_char
11b2c     00 12 06 F6 | 	mov	arg01, #0
11b30     0C B2 B1 FD | 	call	#__system___getiolock_0614
11b34     FD 00 68 FC | 	wrlong	#0, result1
11b38     00 26 06 F6 | 	mov	local01, #0
11b3c                 | LR__1422
11b3c                 | ' print
11b3c     00 12 06 F6 | 	mov	arg01, #0
11b40     FC B1 B1 FD | 	call	#__system___getiolock_0614
11b44     FD 12 02 F6 | 	mov	arg01, result1
11b48     50 55 B1 FD | 	call	#__system___lockmem
11b4c     00 12 06 F6 | 	mov	arg01, #0
11b50     0A 14 06 F6 | 	mov	arg02, #10
11b54     00 16 06 F6 | 	mov	arg03, #0
11b58     E0 61 B1 FD | 	call	#__system___basic_print_char
11b5c     00 12 06 F6 | 	mov	arg01, #0
11b60     DC B1 B1 FD | 	call	#__system___getiolock_0614
11b64     FD 00 68 FC | 	wrlong	#0, result1
11b68     00 30 06 F6 | 	mov	local06, #0
11b6c     00 34 06 F6 | 	mov	local08, #0
11b70     00 2A 06 F6 | 	mov	local03, #0
11b74                 | ' return cursor_y
11b74     3E E4 05 F1 | 	add	objptr, #62
11b78     F2 48 C2 FA | 	rdbyte	local18, objptr
11b7c     3E E4 85 F1 | 	sub	objptr, #62
11b80     BA 01 00 FF 
11b84     7B 13 06 F6 | 	mov	arg01, ##@LR__5954
11b88     21 14 06 F6 | 	mov	arg02, #33
11b8c     70 B3 B1 FD | 	call	#__system___basic_dir
11b90     FD 32 02 F6 | 	mov	local07, result1
11b94                 | ' n=0
11b94                 | ' px=0: py=v.getcursory()
11b94                 | ' filename = dir$("*", fbNormal )   
11b94                 | ' do while filename <> "" andalso filename <> nil andalso n<128
11b94                 | LR__1423
11b94     BA 01 00 FF 
11b98     7D 37 06 F6 | 	mov	local09, ##@LR__5955
11b9c     19 13 02 F6 | 	mov	arg01, local07
11ba0     1B 15 02 F6 | 	mov	arg02, local09
11ba4     1C 55 B1 FD | 	call	#__system___string_cmp
11ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
11bac     54 00 90 AD |  if_e	jmp	#LR__1424
11bb0     00 36 06 F6 | 	mov	local09, #0
11bb4     19 13 02 F6 | 	mov	arg01, local07
11bb8     00 14 06 F6 | 	mov	arg02, #0
11bbc     04 55 B1 FD | 	call	#__system___string_cmp
11bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
11bc4     3C 00 90 AD |  if_e	jmp	#LR__1424
11bc8     80 34 56 F2 | 	cmps	local08, #128 wc
11bcc     34 00 90 3D |  if_ae	jmp	#LR__1424
11bd0     1A 2F 02 F6 | 	mov	local05, local08
11bd4     02 2E 66 F0 | 	shl	local05, #2
11bd8     1C 4E 05 F1 | 	add	fp, #28
11bdc     A7 2E 02 F1 | 	add	local05, fp
11be0     17 33 62 FC | 	wrlong	local07, local05
11be4     01 34 06 F1 | 	add	local08, #1
11be8     00 2E 06 F6 | 	mov	local05, #0
11bec     00 12 06 F6 | 	mov	arg01, #0
11bf0     00 14 06 F6 | 	mov	arg02, #0
11bf4     1C 4E 85 F1 | 	sub	fp, #28
11bf8     04 B3 B1 FD | 	call	#__system___basic_dir
11bfc     FD 32 02 F6 | 	mov	local07, result1
11c00     90 FF 9F FD | 	jmp	#LR__1423
11c04                 | LR__1424
11c04                 | ' for i =0 to n-1
11c04     00 2C 06 F6 | 	mov	local04, #0
11c08                 | LR__1425
11c08     1A 2D 52 F2 | 	cmps	local04, local08 wc
11c0c     D8 00 90 3D |  if_ae	jmp	#LR__1429
11c10     00 3A 06 F6 | 	mov	local11, #0
11c14                 | '   swapped=false
11c14                 | '   for j=0 to n-i-2
11c14     00 3C 06 F6 | 	mov	local12, #0
11c18     1A 4B 02 F6 | 	mov	local19, local08
11c1c     16 4B 82 F1 | 	sub	local19, local04
11c20     01 4A 86 F1 | 	sub	local19, #1
11c24                 | LR__1426
11c24     25 3D 52 F2 | 	cmps	local12, local19 wc
11c28     AC 00 90 3D |  if_ae	jmp	#LR__1428
11c2c                 | '     if filelist(j) > filelist(j+1) then
11c2c     1E 37 02 F6 | 	mov	local09, local12
11c30     02 36 66 F0 | 	shl	local09, #2
11c34     1C 4E 05 F1 | 	add	fp, #28
11c38     A7 36 02 F1 | 	add	local09, fp
11c3c     1B 13 02 FB | 	rdlong	arg01, local09
11c40     1E 37 02 F6 | 	mov	local09, local12
11c44     01 36 06 F1 | 	add	local09, #1
11c48     1B 31 02 F6 | 	mov	local06, local09
11c4c     02 30 66 F0 | 	shl	local06, #2
11c50     A7 26 02 F6 | 	mov	local01, fp
11c54     A7 30 02 F1 | 	add	local06, fp
11c58     18 2F 02 FB | 	rdlong	local05, local06
11c5c     17 15 02 F6 | 	mov	arg02, local05
11c60     1C 4E 85 F1 | 	sub	fp, #28
11c64     5C 54 B1 FD | 	call	#__system___string_cmp
11c68     01 FA 55 F2 | 	cmps	result1, #1 wc
11c6c     60 00 90 CD |  if_b	jmp	#LR__1427
11c70     1E 37 02 F6 | 	mov	local09, local12
11c74     01 36 06 F1 | 	add	local09, #1
11c78     02 36 66 F0 | 	shl	local09, #2
11c7c     1C 4E 05 F1 | 	add	fp, #28
11c80     A7 36 02 F1 | 	add	local09, fp
11c84     1B 45 02 FB | 	rdlong	local16, local09
11c88     1E 31 02 F6 | 	mov	local06, local12
11c8c     02 30 66 F0 | 	shl	local06, #2
11c90     A7 30 02 F1 | 	add	local06, fp
11c94     18 2F 02 FB | 	rdlong	local05, local06
11c98     1E 37 02 F6 | 	mov	local09, local12
11c9c     1B 31 02 F6 | 	mov	local06, local09
11ca0     02 30 66 F0 | 	shl	local06, #2
11ca4     A7 26 02 F6 | 	mov	local01, fp
11ca8     A7 30 02 F1 | 	add	local06, fp
11cac     18 45 62 FC | 	wrlong	local16, local06
11cb0     1E 41 02 F6 | 	mov	local14, local12
11cb4     01 40 06 F1 | 	add	local14, #1
11cb8     02 40 66 F0 | 	shl	local14, #2
11cbc     A7 42 02 F6 | 	mov	local15, fp
11cc0     A7 40 02 F1 | 	add	local14, fp
11cc4     20 2F 62 FC | 	wrlong	local05, local14
11cc8     01 3A 66 F6 | 	neg	local11, #1
11ccc     1C 4E 85 F1 | 	sub	fp, #28
11cd0                 | LR__1427
11cd0     01 3C 06 F1 | 	add	local12, #1
11cd4     4C FF 9F FD | 	jmp	#LR__1426
11cd8                 | LR__1428
11cd8                 | ' if not swapped then exit for
11cd8     1D 45 22 F6 | 	not	local16, local11
11cdc     00 44 0E F2 | 	cmp	local16, #0 wz
11ce0     01 2C 06 A1 |  if_e	add	local04, #1
11ce4     20 FF 9F AD |  if_e	jmp	#LR__1425
11ce8                 | LR__1429
11ce8                 | ' for i=0 to n-1
11ce8     00 2C 06 F6 | 	mov	local04, #0
11cec                 | LR__1430
11cec     1A 2D 52 F2 | 	cmps	local04, local08 wc
11cf0     8C 00 90 3D |  if_ae	jmp	#LR__1432
11cf4                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11cf4     00 12 06 F6 | 	mov	arg01, #0
11cf8     44 B0 B1 FD | 	call	#__system___getiolock_0614
11cfc     FD 12 02 F6 | 	mov	arg01, result1
11d00     98 53 B1 FD | 	call	#__system___lockmem
11d04     16 29 02 F6 | 	mov	local02, local04
11d08     02 28 66 F0 | 	shl	local02, #2
11d0c     1C 4E 05 F1 | 	add	fp, #28
11d10     A7 28 02 F1 | 	add	local02, fp
11d14     14 15 02 FB | 	rdlong	arg02, local02
11d18     00 12 06 F6 | 	mov	arg01, #0
11d1c     00 16 06 F6 | 	mov	arg03, #0
11d20     1C 4E 85 F1 | 	sub	fp, #28
11d24     6C 60 B1 FD | 	call	#__system___basic_print_string
11d28     00 12 06 F6 | 	mov	arg01, #0
11d2c     10 B0 B1 FD | 	call	#__system___getiolock_0614
11d30     FD 00 68 FC | 	wrlong	#0, result1
11d34     40 2A 06 F1 | 	add	local03, #64
11d38     15 13 02 F6 | 	mov	arg01, local03
11d3c     64 35 B1 FD | 	call	#_hg010b_spin2_setcursorx
11d40     00 2B 56 F2 | 	cmps	local03, #256 wc
11d44     30 00 90 CD |  if_b	jmp	#LR__1431
11d48     00 2A 06 F6 | 	mov	local03, #0
11d4c     00 12 06 F6 | 	mov	arg01, #0
11d50     EC AF B1 FD | 	call	#__system___getiolock_0614
11d54     FD 12 02 F6 | 	mov	arg01, result1
11d58     40 53 B1 FD | 	call	#__system___lockmem
11d5c     00 12 06 F6 | 	mov	arg01, #0
11d60     0A 14 06 F6 | 	mov	arg02, #10
11d64     00 16 06 F6 | 	mov	arg03, #0
11d68     D0 5F B1 FD | 	call	#__system___basic_print_char
11d6c     00 12 06 F6 | 	mov	arg01, #0
11d70     CC AF B1 FD | 	call	#__system___getiolock_0614
11d74     FD 00 68 FC | 	wrlong	#0, result1
11d78                 | LR__1431
11d78     01 2C 06 F1 | 	add	local04, #1
11d7c     6C FF 9F FD | 	jmp	#LR__1430
11d80                 | LR__1432
11d80                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11d80     80 34 56 F2 | 	cmps	local08, #128 wc
11d84     40 00 90 CD |  if_b	jmp	#LR__1433
11d88     00 12 06 F6 | 	mov	arg01, #0
11d8c     B0 AF B1 FD | 	call	#__system___getiolock_0614
11d90     FD 12 02 F6 | 	mov	arg01, result1
11d94     04 53 B1 FD | 	call	#__system___lockmem
11d98     BA 01 00 FF 
11d9c     7E 15 06 F6 | 	mov	arg02, ##@LR__5956
11da0     00 12 06 F6 | 	mov	arg01, #0
11da4     00 16 06 F6 | 	mov	arg03, #0
11da8     E8 5F B1 FD | 	call	#__system___basic_print_string
11dac     00 12 06 F6 | 	mov	arg01, #0
11db0     0A 14 06 F6 | 	mov	arg02, #10
11db4     00 16 06 F6 | 	mov	arg03, #0
11db8     80 5F B1 FD | 	call	#__system___basic_print_char
11dbc     00 12 06 F6 | 	mov	arg01, #0
11dc0     7C AF B1 FD | 	call	#__system___getiolock_0614
11dc4     FD 00 68 FC | 	wrlong	#0, result1
11dc8                 | LR__1433
11dc8                 | ' print
11dc8     00 12 06 F6 | 	mov	arg01, #0
11dcc     70 AF B1 FD | 	call	#__system___getiolock_0614
11dd0     FD 12 02 F6 | 	mov	arg01, result1
11dd4     C4 52 B1 FD | 	call	#__system___lockmem
11dd8     00 12 06 F6 | 	mov	arg01, #0
11ddc     0A 14 06 F6 | 	mov	arg02, #10
11de0     00 16 06 F6 | 	mov	arg03, #0
11de4     54 5F B1 FD | 	call	#__system___basic_print_char
11de8     00 12 06 F6 | 	mov	arg01, #0
11dec     50 AF B1 FD | 	call	#__system___getiolock_0614
11df0     FD 00 68 FC | 	wrlong	#0, result1
11df4     A7 F0 03 F6 | 	mov	ptra, fp
11df8     B2 00 A0 FD | 	call	#popregs_
11dfc                 | _do_dir_ret
11dfc     2D 00 64 FD | 	ret
11e00                 | 
11e00                 | ' 
11e00                 | ' '-------------------- dpeek
11e00                 | ' 
11e00                 | ' sub do_dpeek
11e00                 | _do_dpeek
11e00     00 4A 05 F6 | 	mov	COUNT_, #0
11e04     A8 00 A0 FD | 	call	#pushregs_
11e08     14 F0 07 F1 | 	add	ptra, #20
11e0c     F8 B8 BF FD | 	call	#_pop
11e10     A7 FA 61 FC | 	wrlong	result1, fp
11e14     04 4E 05 F1 | 	add	fp, #4
11e18     A7 FC 61 FC | 	wrlong	result2, fp
11e1c     04 4E 05 F1 | 	add	fp, #4
11e20     A7 FE 61 FC | 	wrlong	result3, fp
11e24     08 4E 85 F1 | 	sub	fp, #8
11e28     A7 12 02 F6 | 	mov	arg01, fp
11e2c     BC BA BF FD | 	call	#_converttoint
11e30     0C 4E 05 F1 | 	add	fp, #12
11e34     A7 FA 61 FC | 	wrlong	result1, fp
11e38                 | ' 
11e38                 | ' t1=pop()
11e38                 | ' a=converttoint(t1)
11e38                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
11e38     0C 4E 85 F1 | 	sub	fp, #12
11e3c     00 04 00 FF 
11e40     00 FA 15 F2 | 	cmp	result1, ##524288 wc
11e44     1C 00 90 3D |  if_ae	jmp	#LR__1440
11e48     0C 4E 05 F1 | 	add	fp, #12
11e4c     A7 12 02 FB | 	rdlong	arg01, fp
11e50     09 FB E1 FA | 	rdword	result1, arg01
11e54     04 4E 05 F1 | 	add	fp, #4
11e58     A7 FA 61 FC | 	wrlong	result1, fp
11e5c     10 4E 85 F1 | 	sub	fp, #16
11e60     1C 00 90 FD | 	jmp	#LR__1441
11e64                 | LR__1440
11e64     0C 4E 05 F1 | 	add	fp, #12
11e68     A7 12 02 FB | 	rdlong	arg01, fp
11e6c     0C 4E 85 F1 | 	sub	fp, #12
11e70     A0 1A B1 FD | 	call	#_psdpeek
11e74     10 4E 05 F1 | 	add	fp, #16
11e78     A7 FA 61 FC | 	wrlong	result1, fp
11e7c     10 4E 85 F1 | 	sub	fp, #16
11e80                 | LR__1441
11e80     08 4E 05 F1 | 	add	fp, #8
11e84     A7 3A 68 FC | 	wrlong	#29, fp
11e88     08 4E 05 F1 | 	add	fp, #8
11e8c     A7 12 02 FB | 	rdlong	arg01, fp
11e90     10 4E 85 F1 | 	sub	fp, #16
11e94     A7 12 62 FC | 	wrlong	arg01, fp
11e98     A7 12 02 F6 | 	mov	arg01, fp
11e9c     00 B9 BF FD | 	call	#_push
11ea0     A7 F0 03 F6 | 	mov	ptra, fp
11ea4     B2 00 A0 FD | 	call	#popregs_
11ea8                 | _do_dpeek_ret
11ea8     2D 00 64 FD | 	ret
11eac                 | 
11eac                 | ' 
11eac                 | ' '-------------------- dpoke
11eac                 | ' 
11eac                 | ' sub do_dpoke
11eac                 | _do_dpoke
11eac     01 4A 05 F6 | 	mov	COUNT_, #1
11eb0     A8 00 A0 FD | 	call	#pushregs_
11eb4     20 F0 07 F1 | 	add	ptra, #32
11eb8     4C B8 BF FD | 	call	#_pop
11ebc     FD 14 02 F6 | 	mov	arg02, result1
11ec0     FE 12 02 F6 | 	mov	arg01, result2
11ec4     FF 26 02 F6 | 	mov	local01, result3
11ec8     A7 14 62 FC | 	wrlong	arg02, fp
11ecc     04 4E 05 F1 | 	add	fp, #4
11ed0     A7 12 62 FC | 	wrlong	arg01, fp
11ed4     04 4E 05 F1 | 	add	fp, #4
11ed8     A7 26 62 FC | 	wrlong	local01, fp
11edc     08 4E 85 F1 | 	sub	fp, #8
11ee0     24 B8 BF FD | 	call	#_pop
11ee4     FF 26 02 F6 | 	mov	local01, result3
11ee8     0C 4E 05 F1 | 	add	fp, #12
11eec     A7 FA 61 FC | 	wrlong	result1, fp
11ef0     04 4E 05 F1 | 	add	fp, #4
11ef4     A7 FC 61 FC | 	wrlong	result2, fp
11ef8     04 4E 05 F1 | 	add	fp, #4
11efc     A7 26 62 FC | 	wrlong	local01, fp
11f00     08 4E 85 F1 | 	sub	fp, #8
11f04     A7 12 02 F6 | 	mov	arg01, fp
11f08     0C 4E 85 F1 | 	sub	fp, #12
11f0c     DC B9 BF FD | 	call	#_converttoint
11f10     18 4E 05 F1 | 	add	fp, #24
11f14     A7 FA 61 FC | 	wrlong	result1, fp
11f18     18 4E 85 F1 | 	sub	fp, #24
11f1c     A7 12 02 F6 | 	mov	arg01, fp
11f20     C8 B9 BF FD | 	call	#_converttoint
11f24     1C 4E 05 F1 | 	add	fp, #28
11f28     A7 FA 61 FC | 	wrlong	result1, fp
11f2c                 | ' 
11f2c                 | ' t1=pop() 'value
11f2c                 | ' t2=pop() 
11f2c                 | ' a=converttoint(t2) : v=converttoint(t1)
11f2c                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
11f2c     04 4E 85 F1 | 	sub	fp, #4
11f30     A7 26 02 FB | 	rdlong	local01, fp
11f34     18 4E 85 F1 | 	sub	fp, #24
11f38     00 04 00 FF 
11f3c     00 26 16 F2 | 	cmp	local01, ##524288 wc
11f40     1C 00 90 3D |  if_ae	jmp	#LR__1450
11f44     18 4E 05 F1 | 	add	fp, #24
11f48     A7 12 02 FB | 	rdlong	arg01, fp
11f4c     04 4E 05 F1 | 	add	fp, #4
11f50     A7 14 02 FB | 	rdlong	arg02, fp
11f54     1C 4E 85 F1 | 	sub	fp, #28
11f58     09 15 52 FC | 	wrword	arg02, arg01
11f5c     18 00 90 FD | 	jmp	#LR__1451
11f60                 | LR__1450
11f60     18 4E 05 F1 | 	add	fp, #24
11f64     A7 12 02 FB | 	rdlong	arg01, fp
11f68     04 4E 05 F1 | 	add	fp, #4
11f6c     A7 14 02 FB | 	rdlong	arg02, fp
11f70     1C 4E 85 F1 | 	sub	fp, #28
11f74     5C 18 B1 FD | 	call	#_psdpoke
11f78                 | LR__1451
11f78     A7 F0 03 F6 | 	mov	ptra, fp
11f7c     B2 00 A0 FD | 	call	#popregs_
11f80                 | _do_dpoke_ret
11f80     2D 00 64 FD | 	ret
11f84                 | 
11f84                 | ' '-------------------- draw
11f84                 | ' 
11f84                 | ' sub do_draw
11f84                 | _do_draw
11f84     00 4A 05 F6 | 	mov	COUNT_, #0
11f88     A8 00 A0 FD | 	call	#pushregs_
11f8c     20 F0 07 F1 | 	add	ptra, #32
11f90     74 B7 BF FD | 	call	#_pop
11f94     FD 1A 02 F6 | 	mov	arg05, result1
11f98     FE 18 02 F6 | 	mov	arg04, result2
11f9c     FF 16 02 F6 | 	mov	arg03, result3
11fa0     0C 4E 05 F1 | 	add	fp, #12
11fa4     A7 1A 62 FC | 	wrlong	arg05, fp
11fa8     04 4E 05 F1 | 	add	fp, #4
11fac     A7 18 62 FC | 	wrlong	arg04, fp
11fb0     04 4E 05 F1 | 	add	fp, #4
11fb4     A7 16 62 FC | 	wrlong	arg03, fp
11fb8     14 4E 85 F1 | 	sub	fp, #20
11fbc     48 B7 BF FD | 	call	#_pop
11fc0     FF 1A 02 F6 | 	mov	arg05, result3
11fc4     A7 FA 61 FC | 	wrlong	result1, fp
11fc8     04 4E 05 F1 | 	add	fp, #4
11fcc     A7 FC 61 FC | 	wrlong	result2, fp
11fd0     04 4E 05 F1 | 	add	fp, #4
11fd4     A7 1A 62 FC | 	wrlong	arg05, fp
11fd8     08 4E 85 F1 | 	sub	fp, #8
11fdc     A7 12 02 F6 | 	mov	arg01, fp
11fe0     08 B9 BF FD | 	call	#_converttoint
11fe4     18 4E 05 F1 | 	add	fp, #24
11fe8     A7 FA 61 FC | 	wrlong	result1, fp
11fec     0C 4E 85 F1 | 	sub	fp, #12
11ff0     A7 12 02 F6 | 	mov	arg01, fp
11ff4     0C 4E 85 F1 | 	sub	fp, #12
11ff8     F0 B8 BF FD | 	call	#_converttoint
11ffc     1C 4E 05 F1 | 	add	fp, #28
12000     A7 FA 61 FC | 	wrlong	result1, fp
12004     37 00 00 FF 
12008     2C E4 05 F1 | 	add	objptr, ##28204
1200c     F2 12 02 FB | 	rdlong	arg01, objptr
12010     04 E4 05 F1 | 	add	objptr, #4
12014     F2 14 02 FB | 	rdlong	arg02, objptr
12018     04 4E 85 F1 | 	sub	fp, #4
1201c     A7 16 02 FB | 	rdlong	arg03, fp
12020     FD 18 02 F6 | 	mov	arg04, result1
12024     18 4E 85 F1 | 	sub	fp, #24
12028     08 E4 85 F1 | 	sub	objptr, #8
1202c     F2 1A 02 FB | 	rdlong	arg05, objptr
12030     37 00 00 FF 
12034     28 E4 85 F1 | 	sub	objptr, ##28200
12038     18 29 B1 FD | 	call	#_hg010b_spin2_draw
1203c     18 4E 05 F1 | 	add	fp, #24
12040     A7 1A 02 FB | 	rdlong	arg05, fp
12044     37 00 00 FF 
12048     2C E4 05 F1 | 	add	objptr, ##28204
1204c     F2 1A 62 FC | 	wrlong	arg05, objptr
12050     04 4E 05 F1 | 	add	fp, #4
12054     A7 1A 02 FB | 	rdlong	arg05, fp
12058     1C 4E 85 F1 | 	sub	fp, #28
1205c     04 E4 05 F1 | 	add	objptr, #4
12060     F2 1A 62 FC | 	wrlong	arg05, objptr
12064     37 00 00 FF 
12068     30 E4 85 F1 | 	sub	objptr, ##28208
1206c     A7 F0 03 F6 | 	mov	ptra, fp
12070     B2 00 A0 FD | 	call	#popregs_
12074                 | _do_draw_ret
12074     2D 00 64 FD | 	ret
12078                 | 
12078                 | ' 
12078                 | ' '-------------------- else
12078                 | ' 
12078                 | ' sub do_else
12078                 | _do_else
12078     4A 00 00 FF 
1207c     7C E4 05 F1 | 	add	objptr, ##38012
12080     F2 00 02 FB | 	rdlong	_var01, objptr
12084     01 00 86 F1 | 	sub	_var01, #1
12088     04 E4 05 F1 | 	add	objptr, #4
1208c     F2 00 62 FC | 	wrlong	_var01, objptr
12090     4A 00 00 FF 
12094     80 E4 85 F1 | 	sub	objptr, ##38016
12098                 | _do_else_ret
12098     2D 00 64 FD | 	ret
1209c                 | 
1209c                 | ' 
1209c                 | ' '-------------------- end
1209c                 | ' 
1209c                 | ' sub do_end
1209c                 | _do_end
1209c     4A 00 00 FF 
120a0     7C E4 05 F1 | 	add	objptr, ##38012
120a4     F2 00 02 FB | 	rdlong	_var01, objptr
120a8     01 00 86 F1 | 	sub	_var01, #1
120ac     04 E4 05 F1 | 	add	objptr, #4
120b0     F2 00 62 FC | 	wrlong	_var01, objptr
120b4     06 00 00 FF 
120b8     38 E4 05 F1 | 	add	objptr, ##3128
120bc     FF FF BF FF 
120c0     F2 FE 6B FC | 	wrlong	##2147483647, objptr
120c4     50 00 00 FF 
120c8     B8 E4 85 F1 | 	sub	objptr, ##41144
120cc                 | _do_end_ret
120cc     2D 00 64 FD | 	ret
120d0                 | 
120d0                 | ' 
120d0                 | ' '-------------------- enter
120d0                 | ' 
120d0                 | ' sub do_enter
120d0                 | _do_enter
120d0     02 00 00 FF 
120d4     D2 12 06 F6 | 	mov	arg01, ##1234
120d8     AC 2F B0 FD | 	call	#_do_load
120dc                 | _do_enter_ret
120dc     2D 00 64 FD | 	ret
120e0                 | 
120e0                 | ' 
120e0                 | ' '------------------- error processing
120e0                 | ' 
120e0                 | ' sub do_error
120e0                 | _do_error
120e0     01 4A 05 F6 | 	mov	COUNT_, #1
120e4     A8 00 A0 FD | 	call	#pushregs_
120e8     4A 00 00 FF 
120ec     80 E4 05 F1 | 	add	objptr, ##38016
120f0     F2 18 02 FB | 	rdlong	arg04, objptr
120f4     0C 17 02 F6 | 	mov	arg03, arg04
120f8     01 16 66 F0 | 	shl	arg03, #1
120fc     0C 17 02 F1 | 	add	arg03, arg04
12100     02 16 66 F0 | 	shl	arg03, #2
12104     03 00 00 FF 
12108     04 E4 85 F1 | 	sub	objptr, ##1540
1210c     F2 16 02 F1 | 	add	arg03, objptr
12110     0B 27 02 FB | 	rdlong	local01, arg03
12114                 | ' r=compiledline(lineptr_e).result.uresult
12114                 | ' print "Error ";r;": ";errors$(r)
12114     00 12 06 F6 | 	mov	arg01, #0
12118     47 00 00 FF 
1211c     7C E4 85 F1 | 	sub	objptr, ##36476
12120     1C AC B1 FD | 	call	#__system___getiolock_0614
12124     FD 12 02 F6 | 	mov	arg01, result1
12128     70 4F B1 FD | 	call	#__system___lockmem
1212c     BA 01 00 FF 
12130     B0 15 06 F6 | 	mov	arg02, ##@LR__5957
12134     00 12 06 F6 | 	mov	arg01, #0
12138     00 16 06 F6 | 	mov	arg03, #0
1213c     54 5C B1 FD | 	call	#__system___basic_print_string
12140     00 12 06 F6 | 	mov	arg01, #0
12144     13 15 02 F6 | 	mov	arg02, local01
12148     00 16 06 F6 | 	mov	arg03, #0
1214c     0A 18 06 F6 | 	mov	arg04, #10
12150     C4 5C B1 FD | 	call	#__system___basic_print_unsigned
12154     BA 01 00 FF 
12158     B7 15 06 F6 | 	mov	arg02, ##@LR__5958
1215c     00 12 06 F6 | 	mov	arg01, #0
12160     00 16 06 F6 | 	mov	arg03, #0
12164     2C 5C B1 FD | 	call	#__system___basic_print_string
12168     02 26 66 F0 | 	shl	local01, #2
1216c     45 00 00 FF 
12170     7C E4 05 F1 | 	add	objptr, ##35452
12174     F2 26 02 F1 | 	add	local01, objptr
12178     13 15 02 FB | 	rdlong	arg02, local01
1217c     00 12 06 F6 | 	mov	arg01, #0
12180     00 16 06 F6 | 	mov	arg03, #0
12184     45 00 00 FF 
12188     7C E4 85 F1 | 	sub	objptr, ##35452
1218c     04 5C B1 FD | 	call	#__system___basic_print_string
12190     00 12 06 F6 | 	mov	arg01, #0
12194     0A 14 06 F6 | 	mov	arg02, #10
12198     00 16 06 F6 | 	mov	arg03, #0
1219c     9C 5B B1 FD | 	call	#__system___basic_print_char
121a0     00 12 06 F6 | 	mov	arg01, #0
121a4     98 AB B1 FD | 	call	#__system___getiolock_0614
121a8     FD 00 68 FC | 	wrlong	#0, result1
121ac     A7 F0 03 F6 | 	mov	ptra, fp
121b0     B2 00 A0 FD | 	call	#popregs_
121b4                 | _do_error_ret
121b4     2D 00 64 FD | 	ret
121b8                 | 
121b8                 | ' 
121b8                 | ' '-------------------- fcircle
121b8                 | ' 
121b8                 | ' sub do_fcircle
121b8                 | _do_fcircle
121b8     02 4A 05 F6 | 	mov	COUNT_, #2
121bc     A8 00 A0 FD | 	call	#pushregs_
121c0     24 F0 07 F1 | 	add	ptra, #36
121c4     40 B5 BF FD | 	call	#_pop
121c8     FD 14 02 F6 | 	mov	arg02, result1
121cc     FE 18 02 F6 | 	mov	arg04, result2
121d0     FF 16 02 F6 | 	mov	arg03, result3
121d4     18 4E 05 F1 | 	add	fp, #24
121d8     A7 14 62 FC | 	wrlong	arg02, fp
121dc     04 4E 05 F1 | 	add	fp, #4
121e0     A7 18 62 FC | 	wrlong	arg04, fp
121e4     04 4E 05 F1 | 	add	fp, #4
121e8     A7 16 62 FC | 	wrlong	arg03, fp
121ec     20 4E 85 F1 | 	sub	fp, #32
121f0     14 B5 BF FD | 	call	#_pop
121f4     FD 14 02 F6 | 	mov	arg02, result1
121f8     FE 18 02 F6 | 	mov	arg04, result2
121fc     FF 16 02 F6 | 	mov	arg03, result3
12200     0C 4E 05 F1 | 	add	fp, #12
12204     A7 14 62 FC | 	wrlong	arg02, fp
12208     04 4E 05 F1 | 	add	fp, #4
1220c     A7 18 62 FC | 	wrlong	arg04, fp
12210     04 4E 05 F1 | 	add	fp, #4
12214     A7 16 62 FC | 	wrlong	arg03, fp
12218     14 4E 85 F1 | 	sub	fp, #20
1221c     E8 B4 BF FD | 	call	#_pop
12220     FF 14 02 F6 | 	mov	arg02, result3
12224     A7 FA 61 FC | 	wrlong	result1, fp
12228     04 4E 05 F1 | 	add	fp, #4
1222c     A7 FC 61 FC | 	wrlong	result2, fp
12230     04 4E 05 F1 | 	add	fp, #4
12234     A7 14 62 FC | 	wrlong	arg02, fp
12238     08 4E 85 F1 | 	sub	fp, #8
1223c     A7 12 02 F6 | 	mov	arg01, fp
12240     A8 B6 BF FD | 	call	#_converttoint
12244     FD 26 02 F6 | 	mov	local01, result1
12248     0C 4E 05 F1 | 	add	fp, #12
1224c     A7 12 02 F6 | 	mov	arg01, fp
12250     0C 4E 85 F1 | 	sub	fp, #12
12254     94 B6 BF FD | 	call	#_converttoint
12258     FD 28 02 F6 | 	mov	local02, result1
1225c     18 4E 05 F1 | 	add	fp, #24
12260     A7 12 02 F6 | 	mov	arg01, fp
12264     18 4E 85 F1 | 	sub	fp, #24
12268     80 B6 BF FD | 	call	#_converttoint
1226c     FD 16 02 F6 | 	mov	arg03, result1
12270     37 00 00 FF 
12274     28 E4 05 F1 | 	add	objptr, ##28200
12278     F2 18 02 FB | 	rdlong	arg04, objptr
1227c     37 00 00 FF 
12280     28 E4 85 F1 | 	sub	objptr, ##28200
12284     13 13 02 F6 | 	mov	arg01, local01
12288     14 15 02 F6 | 	mov	arg02, local02
1228c     48 2B B1 FD | 	call	#_hg010b_spin2_fcircle
12290     A7 F0 03 F6 | 	mov	ptra, fp
12294     B2 00 A0 FD | 	call	#popregs_
12298                 | _do_fcircle_ret
12298     2D 00 64 FD | 	ret
1229c                 | 
1229c                 | ' 
1229c                 | ' '-------------------- fill
1229c                 | ' 
1229c                 | ' sub do_fill
1229c                 | _do_fill
1229c     03 4A 05 F6 | 	mov	COUNT_, #3
122a0     A8 00 A0 FD | 	call	#pushregs_
122a4     30 F0 07 F1 | 	add	ptra, #48
122a8     5C B4 BF FD | 	call	#_pop
122ac     FD 16 02 F6 | 	mov	arg03, result1
122b0     FE 14 02 F6 | 	mov	arg02, result2
122b4     FF 18 02 F6 | 	mov	arg04, result3
122b8     24 4E 05 F1 | 	add	fp, #36
122bc     A7 16 62 FC | 	wrlong	arg03, fp
122c0     04 4E 05 F1 | 	add	fp, #4
122c4     A7 14 62 FC | 	wrlong	arg02, fp
122c8     04 4E 05 F1 | 	add	fp, #4
122cc     A7 18 62 FC | 	wrlong	arg04, fp
122d0     2C 4E 85 F1 | 	sub	fp, #44
122d4     30 B4 BF FD | 	call	#_pop
122d8     FD 16 02 F6 | 	mov	arg03, result1
122dc     FE 14 02 F6 | 	mov	arg02, result2
122e0     FF 18 02 F6 | 	mov	arg04, result3
122e4     18 4E 05 F1 | 	add	fp, #24
122e8     A7 16 62 FC | 	wrlong	arg03, fp
122ec     04 4E 05 F1 | 	add	fp, #4
122f0     A7 14 62 FC | 	wrlong	arg02, fp
122f4     04 4E 05 F1 | 	add	fp, #4
122f8     A7 18 62 FC | 	wrlong	arg04, fp
122fc     20 4E 85 F1 | 	sub	fp, #32
12300     04 B4 BF FD | 	call	#_pop
12304     FD 16 02 F6 | 	mov	arg03, result1
12308     FE 14 02 F6 | 	mov	arg02, result2
1230c     FF 18 02 F6 | 	mov	arg04, result3
12310     0C 4E 05 F1 | 	add	fp, #12
12314     A7 16 62 FC | 	wrlong	arg03, fp
12318     04 4E 05 F1 | 	add	fp, #4
1231c     A7 14 62 FC | 	wrlong	arg02, fp
12320     04 4E 05 F1 | 	add	fp, #4
12324     A7 18 62 FC | 	wrlong	arg04, fp
12328     14 4E 85 F1 | 	sub	fp, #20
1232c     D8 B3 BF FD | 	call	#_pop
12330     FF 16 02 F6 | 	mov	arg03, result3
12334     A7 FA 61 FC | 	wrlong	result1, fp
12338     04 4E 05 F1 | 	add	fp, #4
1233c     A7 FC 61 FC | 	wrlong	result2, fp
12340     04 4E 05 F1 | 	add	fp, #4
12344     A7 16 62 FC | 	wrlong	arg03, fp
12348     08 4E 85 F1 | 	sub	fp, #8
1234c     A7 12 02 F6 | 	mov	arg01, fp
12350     98 B5 BF FD | 	call	#_converttoint
12354     FD 26 02 F6 | 	mov	local01, result1
12358     0C 4E 05 F1 | 	add	fp, #12
1235c     A7 12 02 F6 | 	mov	arg01, fp
12360     0C 4E 85 F1 | 	sub	fp, #12
12364     84 B5 BF FD | 	call	#_converttoint
12368     FD 28 02 F6 | 	mov	local02, result1
1236c     18 4E 05 F1 | 	add	fp, #24
12370     A7 12 02 F6 | 	mov	arg01, fp
12374     18 4E 85 F1 | 	sub	fp, #24
12378     70 B5 BF FD | 	call	#_converttoint
1237c     FD 2A 02 F6 | 	mov	local03, result1
12380     24 4E 05 F1 | 	add	fp, #36
12384     A7 12 02 F6 | 	mov	arg01, fp
12388     24 4E 85 F1 | 	sub	fp, #36
1238c     5C B5 BF FD | 	call	#_converttoint
12390     FD 18 02 F6 | 	mov	arg04, result1
12394     13 13 02 F6 | 	mov	arg01, local01
12398     14 15 02 F6 | 	mov	arg02, local02
1239c     15 17 02 F6 | 	mov	arg03, local03
123a0     A0 27 B1 FD | 	call	#_hg010b_spin2_fill
123a4     A7 F0 03 F6 | 	mov	ptra, fp
123a8     B2 00 A0 FD | 	call	#popregs_
123ac                 | _do_fill_ret
123ac     2D 00 64 FD | 	ret
123b0                 | 
123b0                 | ' 
123b0                 | ' '-------------------- font
123b0                 | ' 
123b0                 | ' sub do_font
123b0                 | _do_font
123b0     03 4A 05 F6 | 	mov	COUNT_, #3
123b4     A8 00 A0 FD | 	call	#pushregs_
123b8     4C B3 BF FD | 	call	#_pop
123bc     FD 26 02 F6 | 	mov	local01, result1
123c0     FE 28 02 F6 | 	mov	local02, result2
123c4     FF 2A 02 F6 | 	mov	local03, result3
123c8                 | ' 
123c8                 | ' t1=pop() 
123c8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
123c8     1E 2A 0E F2 | 	cmp	local03, #30 wz
123cc     10 00 90 5D |  if_ne	jmp	#LR__1460
123d0     13 13 02 F6 | 	mov	arg01, local01
123d4     00 14 06 F6 | 	mov	arg02, #0
123d8     04 80 B1 FD | 	call	#__system___float_tointeger
123dc     FD 26 02 F6 | 	mov	local01, result1
123e0                 | LR__1460
123e0                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
123e0     1F 2A 0E F2 | 	cmp	local03, #31 wz
123e4     18 00 90 5D |  if_ne	jmp	#LR__1461
123e8     13 13 02 F6 | 	mov	arg01, local01
123ec     34 83 B1 FD | 	call	#__system____builtin_atof
123f0     FD 12 02 F6 | 	mov	arg01, result1
123f4     00 14 06 F6 | 	mov	arg02, #0
123f8     E4 7F B1 FD | 	call	#__system___float_tointeger
123fc     FD 26 02 F6 | 	mov	local01, result1
12400                 | LR__1461
12400     37 00 00 FF 
12404     40 E4 05 F1 | 	add	objptr, ##28224
12408     F2 26 62 FC | 	wrlong	local01, objptr
1240c     37 00 00 FF 
12410     40 E4 85 F1 | 	sub	objptr, ##28224
12414     02 26 66 F0 | 	shl	local01, #2
12418     13 13 02 F6 | 	mov	arg01, local01
1241c     08 2E B1 FD | 	call	#_hg010b_spin2_setfontfamily
12420     A7 F0 03 F6 | 	mov	ptra, fp
12424     B2 00 A0 FD | 	call	#popregs_
12428                 | _do_font_ret
12428     2D 00 64 FD | 	ret
1242c                 | 
1242c                 | ' 
1242c                 | ' '-------------------- for
1242c                 | ' 
1242c                 | ' sub do_for()
1242c                 | _do_for
1242c     01 4A 05 F6 | 	mov	COUNT_, #1
12430     A8 00 A0 FD | 	call	#pushregs_
12434     10 F0 07 F1 | 	add	ptra, #16
12438     50 00 00 FF 
1243c     30 E5 05 F1 | 	add	objptr, ##41264
12440     F2 12 02 FB | 	rdlong	arg01, objptr
12444     01 12 06 F1 | 	add	arg01, #1
12448     F2 12 62 FC | 	wrlong	arg01, objptr
1244c     50 00 00 FF 
12450     30 E5 85 F1 | 	sub	objptr, ##41264
12454     B0 B2 BF FD | 	call	#_pop
12458     A7 FA 61 FC | 	wrlong	result1, fp
1245c     04 4E 05 F1 | 	add	fp, #4
12460     A7 FC 61 FC | 	wrlong	result2, fp
12464     04 4E 05 F1 | 	add	fp, #4
12468     A7 FE 61 FC | 	wrlong	result3, fp
1246c     08 4E 85 F1 | 	sub	fp, #8
12470     50 00 00 FF 
12474     30 E5 05 F1 | 	add	objptr, ##41264
12478     F2 12 02 FB | 	rdlong	arg01, objptr
1247c     09 27 02 F6 | 	mov	local01, arg01
12480     02 26 66 F0 | 	shl	local01, #2
12484     09 27 02 F1 | 	add	local01, arg01
12488     02 26 66 F0 | 	shl	local01, #2
1248c     06 00 00 FF 
12490     98 E4 85 F1 | 	sub	objptr, ##3224
12494     F2 26 02 F1 | 	add	local01, objptr
12498     A7 12 02 FB | 	rdlong	arg01, fp
1249c     08 26 06 F1 | 	add	local01, #8
124a0     13 13 62 FC | 	wrlong	arg01, local01
124a4     4A 00 00 FF 
124a8     98 E4 85 F1 | 	sub	objptr, ##38040
124ac     58 B2 BF FD | 	call	#_pop
124b0     A7 FA 61 FC | 	wrlong	result1, fp
124b4     04 4E 05 F1 | 	add	fp, #4
124b8     A7 FC 61 FC | 	wrlong	result2, fp
124bc     04 4E 05 F1 | 	add	fp, #4
124c0     A7 FE 61 FC | 	wrlong	result3, fp
124c4     08 4E 85 F1 | 	sub	fp, #8
124c8     50 00 00 FF 
124cc     30 E5 05 F1 | 	add	objptr, ##41264
124d0     F2 12 02 FB | 	rdlong	arg01, objptr
124d4     09 27 02 F6 | 	mov	local01, arg01
124d8     02 26 66 F0 | 	shl	local01, #2
124dc     09 27 02 F1 | 	add	local01, arg01
124e0     02 26 66 F0 | 	shl	local01, #2
124e4     06 00 00 FF 
124e8     98 E4 85 F1 | 	sub	objptr, ##3224
124ec     F2 26 02 F1 | 	add	local01, objptr
124f0     A7 12 02 F6 | 	mov	arg01, fp
124f4     4A 00 00 FF 
124f8     98 E4 85 F1 | 	sub	objptr, ##38040
124fc     EC B3 BF FD | 	call	#_converttoint
12500     FD 12 02 F6 | 	mov	arg01, result1
12504     0C 26 06 F1 | 	add	local01, #12
12508     13 13 62 FC | 	wrlong	arg01, local01
1250c     F8 B1 BF FD | 	call	#_pop
12510     A7 FA 61 FC | 	wrlong	result1, fp
12514     04 4E 05 F1 | 	add	fp, #4
12518     A7 FC 61 FC | 	wrlong	result2, fp
1251c     04 4E 05 F1 | 	add	fp, #4
12520     A7 FE 61 FC | 	wrlong	result3, fp
12524     08 4E 85 F1 | 	sub	fp, #8
12528     50 00 00 FF 
1252c     30 E5 05 F1 | 	add	objptr, ##41264
12530     F2 12 02 FB | 	rdlong	arg01, objptr
12534     09 27 02 F6 | 	mov	local01, arg01
12538     02 26 66 F0 | 	shl	local01, #2
1253c     09 27 02 F1 | 	add	local01, arg01
12540     02 26 66 F0 | 	shl	local01, #2
12544     06 00 00 FF 
12548     98 E4 85 F1 | 	sub	objptr, ##3224
1254c     F2 26 02 F1 | 	add	local01, objptr
12550     A7 12 02 F6 | 	mov	arg01, fp
12554     4A 00 00 FF 
12558     98 E4 85 F1 | 	sub	objptr, ##38040
1255c     8C B3 BF FD | 	call	#_converttoint
12560     10 26 06 F1 | 	add	local01, #16
12564     13 FB 61 FC | 	wrlong	result1, local01
12568                 | ' fortop+=1
12568                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
12568                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
12568                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
12568                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
12568     4A 00 00 FF 
1256c     80 E4 05 F1 | 	add	objptr, ##38016
12570     F2 12 02 FB | 	rdlong	arg01, objptr
12574     09 27 02 F6 | 	mov	local01, arg01
12578     01 26 66 F0 | 	shl	local01, #1
1257c     09 27 02 F1 | 	add	local01, arg01
12580     02 26 66 F0 | 	shl	local01, #2
12584     03 00 00 FF 
12588     04 E4 85 F1 | 	sub	objptr, ##1540
1258c     F2 26 02 F1 | 	add	local01, objptr
12590     08 26 06 F1 | 	add	local01, #8
12594     13 27 02 FB | 	rdlong	local01, local01
12598     FE 27 0E F2 | 	cmp	local01, #510 wz
1259c     47 00 00 FF 
125a0     7C E4 85 F1 | 	sub	objptr, ##36476
125a4     70 00 90 5D |  if_ne	jmp	#LR__1470
125a8     50 00 00 FF 
125ac     30 E5 05 F1 | 	add	objptr, ##41264
125b0     F2 12 02 FB | 	rdlong	arg01, objptr
125b4     09 27 02 F6 | 	mov	local01, arg01
125b8     02 26 66 F0 | 	shl	local01, #2
125bc     09 27 02 F1 | 	add	local01, arg01
125c0     02 26 66 F0 | 	shl	local01, #2
125c4     06 00 00 FF 
125c8     98 E4 85 F1 | 	sub	objptr, ##3224
125cc     F2 26 02 F1 | 	add	local01, objptr
125d0     06 00 00 FF 
125d4     20 E4 05 F1 | 	add	objptr, ##3104
125d8     F2 12 02 FB | 	rdlong	arg01, objptr
125dc     13 13 62 FC | 	wrlong	arg01, local01
125e0     78 E4 05 F1 | 	add	objptr, #120
125e4     F2 12 02 FB | 	rdlong	arg01, objptr
125e8     09 27 02 F6 | 	mov	local01, arg01
125ec     02 26 66 F0 | 	shl	local01, #2
125f0     09 27 02 F1 | 	add	local01, arg01
125f4     02 26 66 F0 | 	shl	local01, #2
125f8     06 00 00 FF 
125fc     98 E4 85 F1 | 	sub	objptr, ##3224
12600     F2 26 02 F1 | 	add	local01, objptr
12604     04 26 06 F1 | 	add	local01, #4
12608     13 01 68 FC | 	wrlong	#0, local01
1260c     4A 00 00 FF 
12610     98 E4 85 F1 | 	sub	objptr, ##38040
12614     78 00 90 FD | 	jmp	#LR__1471
12618                 | LR__1470
12618     50 00 00 FF 
1261c     30 E5 05 F1 | 	add	objptr, ##41264
12620     F2 12 02 FB | 	rdlong	arg01, objptr
12624     09 27 02 F6 | 	mov	local01, arg01
12628     02 26 66 F0 | 	shl	local01, #2
1262c     09 27 02 F1 | 	add	local01, arg01
12630     02 26 66 F0 | 	shl	local01, #2
12634     06 00 00 FF 
12638     98 E4 85 F1 | 	sub	objptr, ##3224
1263c     F2 26 02 F1 | 	add	local01, objptr
12640     06 00 00 FF 
12644     28 E4 05 F1 | 	add	objptr, ##3112
12648     F2 12 02 FB | 	rdlong	arg01, objptr
1264c     13 13 62 FC | 	wrlong	arg01, local01
12650     70 E4 05 F1 | 	add	objptr, #112
12654     F2 12 02 FB | 	rdlong	arg01, objptr
12658     09 27 02 F6 | 	mov	local01, arg01
1265c     02 26 66 F0 | 	shl	local01, #2
12660     09 27 02 F1 | 	add	local01, arg01
12664     02 26 66 F0 | 	shl	local01, #2
12668     06 00 00 FF 
1266c     98 E4 85 F1 | 	sub	objptr, ##3224
12670     F2 26 02 F1 | 	add	local01, objptr
12674     18 E4 85 F1 | 	sub	objptr, #24
12678     F2 12 02 FB | 	rdlong	arg01, objptr
1267c     4A 00 00 FF 
12680     80 E4 85 F1 | 	sub	objptr, ##38016
12684     01 12 06 F1 | 	add	arg01, #1
12688     04 26 06 F1 | 	add	local01, #4
1268c     13 13 62 FC | 	wrlong	arg01, local01
12690                 | LR__1471
12690     A7 F0 03 F6 | 	mov	ptra, fp
12694     B2 00 A0 FD | 	call	#popregs_
12698                 | _do_for_ret
12698     2D 00 64 FD | 	ret
1269c                 | 
1269c                 | ' 
1269c                 | ' '-------------------- frame
1269c                 | ' 
1269c                 | ' sub do_frame
1269c                 | _do_frame
1269c     03 4A 05 F6 | 	mov	COUNT_, #3
126a0     A8 00 A0 FD | 	call	#pushregs_
126a4     30 F0 07 F1 | 	add	ptra, #48
126a8     5C B0 BF FD | 	call	#_pop
126ac     FD 16 02 F6 | 	mov	arg03, result1
126b0     FE 14 02 F6 | 	mov	arg02, result2
126b4     FF 1A 02 F6 | 	mov	arg05, result3
126b8     24 4E 05 F1 | 	add	fp, #36
126bc     A7 16 62 FC | 	wrlong	arg03, fp
126c0     04 4E 05 F1 | 	add	fp, #4
126c4     A7 14 62 FC | 	wrlong	arg02, fp
126c8     04 4E 05 F1 | 	add	fp, #4
126cc     A7 1A 62 FC | 	wrlong	arg05, fp
126d0     2C 4E 85 F1 | 	sub	fp, #44
126d4     30 B0 BF FD | 	call	#_pop
126d8     FD 16 02 F6 | 	mov	arg03, result1
126dc     FE 14 02 F6 | 	mov	arg02, result2
126e0     FF 1A 02 F6 | 	mov	arg05, result3
126e4     18 4E 05 F1 | 	add	fp, #24
126e8     A7 16 62 FC | 	wrlong	arg03, fp
126ec     04 4E 05 F1 | 	add	fp, #4
126f0     A7 14 62 FC | 	wrlong	arg02, fp
126f4     04 4E 05 F1 | 	add	fp, #4
126f8     A7 1A 62 FC | 	wrlong	arg05, fp
126fc     20 4E 85 F1 | 	sub	fp, #32
12700     04 B0 BF FD | 	call	#_pop
12704     FD 16 02 F6 | 	mov	arg03, result1
12708     FE 14 02 F6 | 	mov	arg02, result2
1270c     FF 1A 02 F6 | 	mov	arg05, result3
12710     0C 4E 05 F1 | 	add	fp, #12
12714     A7 16 62 FC | 	wrlong	arg03, fp
12718     04 4E 05 F1 | 	add	fp, #4
1271c     A7 14 62 FC | 	wrlong	arg02, fp
12720     04 4E 05 F1 | 	add	fp, #4
12724     A7 1A 62 FC | 	wrlong	arg05, fp
12728     14 4E 85 F1 | 	sub	fp, #20
1272c     D8 AF BF FD | 	call	#_pop
12730     FF 16 02 F6 | 	mov	arg03, result3
12734     A7 FA 61 FC | 	wrlong	result1, fp
12738     04 4E 05 F1 | 	add	fp, #4
1273c     A7 FC 61 FC | 	wrlong	result2, fp
12740     04 4E 05 F1 | 	add	fp, #4
12744     A7 16 62 FC | 	wrlong	arg03, fp
12748     08 4E 85 F1 | 	sub	fp, #8
1274c     A7 12 02 F6 | 	mov	arg01, fp
12750     98 B1 BF FD | 	call	#_converttoint
12754     FD 26 02 F6 | 	mov	local01, result1
12758     0C 4E 05 F1 | 	add	fp, #12
1275c     A7 12 02 F6 | 	mov	arg01, fp
12760     0C 4E 85 F1 | 	sub	fp, #12
12764     84 B1 BF FD | 	call	#_converttoint
12768     FD 28 02 F6 | 	mov	local02, result1
1276c     18 4E 05 F1 | 	add	fp, #24
12770     A7 12 02 F6 | 	mov	arg01, fp
12774     18 4E 85 F1 | 	sub	fp, #24
12778     70 B1 BF FD | 	call	#_converttoint
1277c     FD 2A 02 F6 | 	mov	local03, result1
12780     24 4E 05 F1 | 	add	fp, #36
12784     A7 12 02 F6 | 	mov	arg01, fp
12788     24 4E 85 F1 | 	sub	fp, #36
1278c     5C B1 BF FD | 	call	#_converttoint
12790     FD 18 02 F6 | 	mov	arg04, result1
12794     37 00 00 FF 
12798     28 E4 05 F1 | 	add	objptr, ##28200
1279c     F2 1A 02 FB | 	rdlong	arg05, objptr
127a0     37 00 00 FF 
127a4     28 E4 85 F1 | 	sub	objptr, ##28200
127a8     13 13 02 F6 | 	mov	arg01, local01
127ac     14 15 02 F6 | 	mov	arg02, local02
127b0     15 17 02 F6 | 	mov	arg03, local03
127b4     78 28 B1 FD | 	call	#_hg010b_spin2_frame
127b8     A7 F0 03 F6 | 	mov	ptra, fp
127bc     B2 00 A0 FD | 	call	#popregs_
127c0                 | _do_frame_ret
127c0     2D 00 64 FD | 	ret
127c4                 | 
127c4                 | ' 
127c4                 | ' '-------------------- framebuf
127c4                 | ' 
127c4                 | ' sub do_framebuf
127c4                 | _do_framebuf
127c4     00 4A 05 F6 | 	mov	COUNT_, #0
127c8     A8 00 A0 FD | 	call	#pushregs_
127cc     0C F0 07 F1 | 	add	ptra, #12
127d0     08 4E 05 F1 | 	add	fp, #8
127d4     A7 3A 68 FC | 	wrlong	#29, fp
127d8     F2 12 02 FB | 	rdlong	arg01, objptr
127dc     08 4E 85 F1 | 	sub	fp, #8
127e0     A7 12 62 FC | 	wrlong	arg01, fp
127e4     A7 12 02 F6 | 	mov	arg01, fp
127e8     B4 AF BF FD | 	call	#_push
127ec     A7 F0 03 F6 | 	mov	ptra, fp
127f0     B2 00 A0 FD | 	call	#popregs_
127f4                 | _do_framebuf_ret
127f4     2D 00 64 FD | 	ret
127f8                 | 
127f8                 | ' '-------------------- fre
127f8                 | ' 
127f8                 | ' sub do_fre
127f8                 | _do_fre
127f8     01 4A 05 F6 | 	mov	COUNT_, #1
127fc     A8 00 A0 FD | 	call	#pushregs_
12800     0C F0 07 F1 | 	add	ptra, #12
12804     52 00 00 FF 
12808     98 E4 05 F1 | 	add	objptr, ##42136
1280c     F2 12 02 FB | 	rdlong	arg01, objptr
12810     0F 00 00 FF 
12814     3C E4 85 F1 | 	sub	objptr, ##7740
12818     F2 26 02 FB | 	rdlong	local01, objptr
1281c     13 13 82 F1 | 	sub	arg01, local01
12820     0F 00 00 FF 
12824     B4 E4 05 F1 | 	add	objptr, ##7860
12828     F2 12 62 FC | 	wrlong	arg01, objptr
1282c     08 4E 05 F1 | 	add	fp, #8
12830     A7 3A 68 FC | 	wrlong	#29, fp
12834     08 4E 85 F1 | 	sub	fp, #8
12838     F2 26 02 FB | 	rdlong	local01, objptr
1283c     52 00 00 FF 
12840     10 E5 85 F1 | 	sub	objptr, ##42256
12844     A7 26 62 FC | 	wrlong	local01, fp
12848     A7 12 02 F6 | 	mov	arg01, fp
1284c     50 AF BF FD | 	call	#_push
12850     A7 F0 03 F6 | 	mov	ptra, fp
12854     B2 00 A0 FD | 	call	#popregs_
12858                 | _do_fre_ret
12858     2D 00 64 FD | 	ret
1285c                 | 
1285c                 | ' 
1285c                 | ' '-------------------- get
1285c                 | ' 
1285c                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
1285c                 | _do_get
1285c     09 4A 05 F6 | 	mov	COUNT_, #9
12860     A8 00 A0 FD | 	call	#pushregs_
12864     40 F0 07 F1 | 	add	ptra, #64
12868     4A 00 00 FF 
1286c     80 E4 05 F1 | 	add	objptr, ##38016
12870     F2 1A 02 FB | 	rdlong	arg05, objptr
12874     0D 19 02 F6 | 	mov	arg04, arg05
12878     01 18 66 F0 | 	shl	arg04, #1
1287c     0D 19 02 F1 | 	add	arg04, arg05
12880     02 18 66 F0 | 	shl	arg04, #2
12884     03 00 00 FF 
12888     04 E4 85 F1 | 	sub	objptr, ##1540
1288c     F2 18 02 F1 | 	add	arg04, objptr
12890     0C 1B 02 FB | 	rdlong	arg05, arg04
12894     A7 1A 62 FC | 	wrlong	arg05, fp
12898                 | ' 
12898                 | ' numpar=compiledline(lineptr_e).result.uresult
12898                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
12898     04 1A 0E F2 | 	cmp	arg05, #4 wz
1289c     47 00 00 FF 
128a0     7C E4 85 F1 | 	sub	objptr, ##36476
128a4     48 00 90 5D |  if_ne	jmp	#LR__1480
128a8     5C AE BF FD | 	call	#_pop
128ac     FF 1A 02 F6 | 	mov	arg05, result3
128b0     1C 4E 05 F1 | 	add	fp, #28
128b4     A7 FA 61 FC | 	wrlong	result1, fp
128b8     04 4E 05 F1 | 	add	fp, #4
128bc     A7 FC 61 FC | 	wrlong	result2, fp
128c0     04 4E 05 F1 | 	add	fp, #4
128c4     A7 1A 62 FC | 	wrlong	arg05, fp
128c8     08 4E 85 F1 | 	sub	fp, #8
128cc     A7 12 02 F6 | 	mov	arg01, fp
128d0     1C 4E 85 F1 | 	sub	fp, #28
128d4     14 B0 BF FD | 	call	#_converttoint
128d8     52 00 00 FF 
128dc     0C E5 05 F1 | 	add	objptr, ##42252
128e0     F2 FA 61 FC | 	wrlong	result1, objptr
128e4     52 00 00 FF 
128e8     0C E5 85 F1 | 	sub	objptr, ##42252
128ec     18 00 90 FD | 	jmp	#LR__1481
128f0                 | LR__1480
128f0     52 00 00 FF 
128f4     0C E5 05 F1 | 	add	objptr, ##42252
128f8     FF FF FF FF 
128fc     F2 FE 6B FC | 	wrlong	##-1, objptr
12900     52 00 00 FF 
12904     0C E5 85 F1 | 	sub	objptr, ##42252
12908                 | LR__1481
12908                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
12908     A7 16 02 FB | 	rdlong	arg03, fp
1290c     03 16 56 F2 | 	cmps	arg03, #3 wc
12910     40 00 90 CD |  if_b	jmp	#LR__1482
12914     F0 AD BF FD | 	call	#_pop
12918     FF 16 02 F6 | 	mov	arg03, result3
1291c     1C 4E 05 F1 | 	add	fp, #28
12920     A7 FA 61 FC | 	wrlong	result1, fp
12924     04 4E 05 F1 | 	add	fp, #4
12928     A7 FC 61 FC | 	wrlong	result2, fp
1292c     04 4E 05 F1 | 	add	fp, #4
12930     A7 16 62 FC | 	wrlong	arg03, fp
12934     08 4E 85 F1 | 	sub	fp, #8
12938     A7 12 02 F6 | 	mov	arg01, fp
1293c     1C 4E 85 F1 | 	sub	fp, #28
12940     A8 AF BF FD | 	call	#_converttoint
12944     08 4E 05 F1 | 	add	fp, #8
12948     A7 FA 61 FC | 	wrlong	result1, fp
1294c     08 4E 85 F1 | 	sub	fp, #8
12950     0C 00 90 FD | 	jmp	#LR__1483
12954                 | LR__1482
12954     08 4E 05 F1 | 	add	fp, #8
12958     A7 02 68 FC | 	wrlong	#1, fp
1295c     08 4E 85 F1 | 	sub	fp, #8
12960                 | LR__1483
12960                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
12960     A7 16 02 FB | 	rdlong	arg03, fp
12964     02 16 56 F2 | 	cmps	arg03, #2 wc
12968     3C 00 90 CD |  if_b	jmp	#LR__1484
1296c     98 AD BF FD | 	call	#_pop
12970     FF 16 02 F6 | 	mov	arg03, result3
12974     1C 4E 05 F1 | 	add	fp, #28
12978     A7 FA 61 FC | 	wrlong	result1, fp
1297c     04 4E 05 F1 | 	add	fp, #4
12980     A7 FC 61 FC | 	wrlong	result2, fp
12984     04 4E 05 F1 | 	add	fp, #4
12988     A7 16 62 FC | 	wrlong	arg03, fp
1298c     08 4E 85 F1 | 	sub	fp, #8
12990     A7 12 02 F6 | 	mov	arg01, fp
12994     1C 4E 85 F1 | 	sub	fp, #28
12998     50 AF BF FD | 	call	#_converttoint
1299c     0C 4E 05 F1 | 	add	fp, #12
129a0     A7 FA 61 FC | 	wrlong	result1, fp
129a4     0C 4E 85 F1 | 	sub	fp, #12
129a8                 | LR__1484
129a8     5C AD BF FD | 	call	#_pop
129ac     FF 16 02 F6 | 	mov	arg03, result3
129b0     1C 4E 05 F1 | 	add	fp, #28
129b4     A7 FA 61 FC | 	wrlong	result1, fp
129b8     04 4E 05 F1 | 	add	fp, #4
129bc     A7 FC 61 FC | 	wrlong	result2, fp
129c0     04 4E 05 F1 | 	add	fp, #4
129c4     A7 16 62 FC | 	wrlong	arg03, fp
129c8     08 4E 85 F1 | 	sub	fp, #8
129cc     A7 12 02 F6 | 	mov	arg01, fp
129d0     1C 4E 85 F1 | 	sub	fp, #28
129d4     14 AF BF FD | 	call	#_converttoint
129d8     04 4E 05 F1 | 	add	fp, #4
129dc     A7 FA 61 FC | 	wrlong	result1, fp
129e0     10 4E 05 F1 | 	add	fp, #16
129e4     A7 16 02 FB | 	rdlong	arg03, fp
129e8     14 4E 85 F1 | 	sub	fp, #20
129ec     02 16 66 F0 | 	shl	arg03, #2
129f0     50 00 00 FF 
129f4     C4 E4 05 F1 | 	add	objptr, ##41156
129f8     F2 26 02 F6 | 	mov	local01, objptr
129fc     F2 16 02 F1 | 	add	arg03, objptr
12a00     0B 01 68 FC | 	wrlong	#0, arg03
12a04                 | ' t1=pop() : channel=converttoint(t1)
12a04                 | ' getres(j)=0
12a04                 | ' if pos>=0 then
12a04     02 00 00 FF 
12a08     48 E4 05 F1 | 	add	objptr, ##1096
12a0c     F2 28 02 FB | 	rdlong	local02, objptr
12a10     52 00 00 FF 
12a14     0C E5 85 F1 | 	sub	objptr, ##42252
12a18     00 28 56 F2 | 	cmps	local02, #0 wc
12a1c     F0 01 90 CD |  if_b	jmp	#LR__1491
12a20                 | '   for i=0 to  amount/1024
12a20     10 4E 05 F1 | 	add	fp, #16
12a24     A7 00 68 FC | 	wrlong	#0, fp
12a28     08 4E 85 F1 | 	sub	fp, #8
12a2c     A7 2A 02 FB | 	rdlong	local03, fp
12a30     08 4E 85 F1 | 	sub	fp, #8
12a34     15 2D 52 F6 | 	abs	local04, local03 wc
12a38     0A 2C 46 F0 | 	shr	local04, #10
12a3c     16 2D 82 F6 | 	negc	local04, local04
12a40     01 2C 06 F1 | 	add	local04, #1
12a44                 | LR__1485
12a44     10 4E 05 F1 | 	add	fp, #16
12a48     A7 2A 02 FB | 	rdlong	local03, fp
12a4c     10 4E 85 F1 | 	sub	fp, #16
12a50     16 2B 52 F2 | 	cmps	local03, local04 wc
12a54     9C 03 90 3D |  if_ae	jmp	#LR__1499
12a58                 | '     get #channel,pos+1,block(0),amount,r
12a58     04 4E 05 F1 | 	add	fp, #4
12a5c     A7 12 02 FB | 	rdlong	arg01, fp
12a60     52 00 00 FF 
12a64     0C E5 05 F1 | 	add	objptr, ##42252
12a68     F2 14 02 FB | 	rdlong	arg02, objptr
12a6c     01 14 06 F1 | 	add	arg02, #1
12a70     04 00 00 FF 
12a74     58 E4 85 F1 | 	sub	objptr, ##2136
12a78     F2 16 02 F6 | 	mov	arg03, objptr
12a7c     4E 00 00 FF 
12a80     B4 E4 85 F1 | 	sub	objptr, ##40116
12a84     04 4E 05 F1 | 	add	fp, #4
12a88     A7 18 02 FB | 	rdlong	arg04, fp
12a8c     08 4E 85 F1 | 	sub	fp, #8
12a90     01 1A 06 F6 | 	mov	arg05, #1
12a94     78 54 B1 FD | 	call	#__system___basic_get
12a98     18 4E 05 F1 | 	add	fp, #24
12a9c     A7 FA 61 FC | 	wrlong	result1, fp
12aa0                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12aa0     0C 4E 85 F1 | 	sub	fp, #12
12aa4     A7 28 02 FB | 	rdlong	local02, fp
12aa8     0C 4E 85 F1 | 	sub	fp, #12
12aac     00 04 00 FF 
12ab0     00 28 56 F2 | 	cmps	local02, ##524288 wc
12ab4     7C 00 90 3D |  if_ae	jmp	#LR__1487
12ab8     14 4E 05 F1 | 	add	fp, #20
12abc     A7 00 68 FC | 	wrlong	#0, fp
12ac0     04 4E 05 F1 | 	add	fp, #4
12ac4     A7 2E 02 FB | 	rdlong	local05, fp
12ac8     18 4E 85 F1 | 	sub	fp, #24
12acc                 | LR__1486
12acc     14 4E 05 F1 | 	add	fp, #20
12ad0     A7 28 02 FB | 	rdlong	local02, fp
12ad4     14 4E 85 F1 | 	sub	fp, #20
12ad8     17 29 52 F2 | 	cmps	local02, local05 wc
12adc     D8 00 90 3D |  if_ae	jmp	#LR__1490
12ae0     0C 4E 05 F1 | 	add	fp, #12
12ae4     A7 12 02 FB | 	rdlong	arg01, fp
12ae8     04 4E 05 F1 | 	add	fp, #4
12aec     A7 2A 02 FB | 	rdlong	local03, fp
12af0     0A 2A 66 F0 | 	shl	local03, #10
12af4     15 13 02 F1 | 	add	arg01, local03
12af8     04 4E 05 F1 | 	add	fp, #4
12afc     A7 2A 02 FB | 	rdlong	local03, fp
12b00     15 13 02 F1 | 	add	arg01, local03
12b04     4E 00 00 FF 
12b08     B4 E4 05 F1 | 	add	objptr, ##40116
12b0c     F2 2A 02 F1 | 	add	local03, objptr
12b10     15 15 C2 FA | 	rdbyte	arg02, local03
12b14     09 15 42 FC | 	wrbyte	arg02, arg01
12b18     4E 00 00 FF 
12b1c     B4 E4 85 F1 | 	sub	objptr, ##40116
12b20     A7 2A 02 FB | 	rdlong	local03, fp
12b24     01 2A 06 F1 | 	add	local03, #1
12b28     A7 2A 62 FC | 	wrlong	local03, fp
12b2c     14 4E 85 F1 | 	sub	fp, #20
12b30     98 FF 9F FD | 	jmp	#LR__1486
12b34                 | LR__1487
12b34     14 4E 05 F1 | 	add	fp, #20
12b38     A7 00 68 FC | 	wrlong	#0, fp
12b3c     04 4E 05 F1 | 	add	fp, #4
12b40     A7 30 02 FB | 	rdlong	local06, fp
12b44     18 4E 85 F1 | 	sub	fp, #24
12b48                 | LR__1488
12b48     14 4E 05 F1 | 	add	fp, #20
12b4c     A7 28 02 FB | 	rdlong	local02, fp
12b50     14 4E 85 F1 | 	sub	fp, #20
12b54     18 29 52 F2 | 	cmps	local02, local06 wc
12b58     5C 00 90 3D |  if_ae	jmp	#LR__1489
12b5c     0C 4E 05 F1 | 	add	fp, #12
12b60     A7 12 02 FB | 	rdlong	arg01, fp
12b64     04 4E 05 F1 | 	add	fp, #4
12b68     A7 2E 02 FB | 	rdlong	local05, fp
12b6c     0A 2E 66 F0 | 	shl	local05, #10
12b70     17 13 02 F1 | 	add	arg01, local05
12b74     04 4E 05 F1 | 	add	fp, #4
12b78     A7 2E 02 FB | 	rdlong	local05, fp
12b7c     17 13 02 F1 | 	add	arg01, local05
12b80     14 4E 85 F1 | 	sub	fp, #20
12b84     4E 00 00 FF 
12b88     B4 E4 05 F1 | 	add	objptr, ##40116
12b8c     F2 2E 02 F1 | 	add	local05, objptr
12b90     17 15 C2 FA | 	rdbyte	arg02, local05
12b94     4E 00 00 FF 
12b98     B4 E4 85 F1 | 	sub	objptr, ##40116
12b9c     7C 0C B1 FD | 	call	#_pspoke
12ba0     14 4E 05 F1 | 	add	fp, #20
12ba4     A7 2E 02 FB | 	rdlong	local05, fp
12ba8     01 2E 06 F1 | 	add	local05, #1
12bac     A7 2E 62 FC | 	wrlong	local05, fp
12bb0     14 4E 85 F1 | 	sub	fp, #20
12bb4     90 FF 9F FD | 	jmp	#LR__1488
12bb8                 | LR__1489
12bb8                 | LR__1490
12bb8     14 4E 05 F1 | 	add	fp, #20
12bbc     A7 30 02 FB | 	rdlong	local06, fp
12bc0     18 2B 02 F6 | 	mov	local03, local06
12bc4     02 2A 66 F0 | 	shl	local03, #2
12bc8     50 00 00 FF 
12bcc     C4 E4 05 F1 | 	add	objptr, ##41156
12bd0     F2 2A 02 F1 | 	add	local03, objptr
12bd4     02 30 66 F0 | 	shl	local06, #2
12bd8     F2 30 02 F1 | 	add	local06, objptr
12bdc     18 31 02 FB | 	rdlong	local06, local06
12be0     04 4E 05 F1 | 	add	fp, #4
12be4     A7 2E 02 FB | 	rdlong	local05, fp
12be8     17 31 02 F1 | 	add	local06, local05
12bec     15 31 62 FC | 	wrlong	local06, local03
12bf0     08 4E 85 F1 | 	sub	fp, #8
12bf4     A7 30 02 FB | 	rdlong	local06, fp
12bf8     01 30 06 F1 | 	add	local06, #1
12bfc     A7 30 62 FC | 	wrlong	local06, fp
12c00     10 4E 85 F1 | 	sub	fp, #16
12c04     50 00 00 FF 
12c08     C4 E4 85 F1 | 	sub	objptr, ##41156
12c0c     34 FE 9F FD | 	jmp	#LR__1485
12c10                 | LR__1491
12c10                 | '   for i=0 to  amount/1024
12c10     10 4E 05 F1 | 	add	fp, #16
12c14     A7 00 68 FC | 	wrlong	#0, fp
12c18     08 4E 85 F1 | 	sub	fp, #8
12c1c     A7 2A 02 FB | 	rdlong	local03, fp
12c20     08 4E 85 F1 | 	sub	fp, #8
12c24     15 33 52 F6 | 	abs	local07, local03 wc
12c28     0A 32 46 F0 | 	shr	local07, #10
12c2c     19 33 82 F6 | 	negc	local07, local07
12c30     01 32 06 F1 | 	add	local07, #1
12c34                 | LR__1492
12c34     10 4E 05 F1 | 	add	fp, #16
12c38     A7 2A 02 FB | 	rdlong	local03, fp
12c3c     10 4E 85 F1 | 	sub	fp, #16
12c40     19 2B 52 F2 | 	cmps	local03, local07 wc
12c44     AC 01 90 3D |  if_ae	jmp	#LR__1498
12c48                 | '     get #channel,,block(0),amount,r
12c48     04 4E 05 F1 | 	add	fp, #4
12c4c     A7 12 02 FB | 	rdlong	arg01, fp
12c50     4E 00 00 FF 
12c54     B4 E4 05 F1 | 	add	objptr, ##40116
12c58     F2 16 02 F6 | 	mov	arg03, objptr
12c5c     4E 00 00 FF 
12c60     B4 E4 85 F1 | 	sub	objptr, ##40116
12c64     04 4E 05 F1 | 	add	fp, #4
12c68     A7 18 02 FB | 	rdlong	arg04, fp
12c6c     08 4E 85 F1 | 	sub	fp, #8
12c70     00 14 06 F6 | 	mov	arg02, #0
12c74     01 1A 06 F6 | 	mov	arg05, #1
12c78     94 52 B1 FD | 	call	#__system___basic_get
12c7c     18 4E 05 F1 | 	add	fp, #24
12c80     A7 FA 61 FC | 	wrlong	result1, fp
12c84                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12c84     0C 4E 85 F1 | 	sub	fp, #12
12c88     A7 28 02 FB | 	rdlong	local02, fp
12c8c     0C 4E 85 F1 | 	sub	fp, #12
12c90     00 04 00 FF 
12c94     00 28 56 F2 | 	cmps	local02, ##524288 wc
12c98     7C 00 90 3D |  if_ae	jmp	#LR__1494
12c9c     14 4E 05 F1 | 	add	fp, #20
12ca0     A7 00 68 FC | 	wrlong	#0, fp
12ca4     04 4E 05 F1 | 	add	fp, #4
12ca8     A7 34 02 FB | 	rdlong	local08, fp
12cac     18 4E 85 F1 | 	sub	fp, #24
12cb0                 | LR__1493
12cb0     14 4E 05 F1 | 	add	fp, #20
12cb4     A7 28 02 FB | 	rdlong	local02, fp
12cb8     14 4E 85 F1 | 	sub	fp, #20
12cbc     1A 29 52 F2 | 	cmps	local02, local08 wc
12cc0     D8 00 90 3D |  if_ae	jmp	#LR__1497
12cc4     0C 4E 05 F1 | 	add	fp, #12
12cc8     A7 12 02 FB | 	rdlong	arg01, fp
12ccc     04 4E 05 F1 | 	add	fp, #4
12cd0     A7 30 02 FB | 	rdlong	local06, fp
12cd4     0A 30 66 F0 | 	shl	local06, #10
12cd8     18 13 02 F1 | 	add	arg01, local06
12cdc     04 4E 05 F1 | 	add	fp, #4
12ce0     A7 30 02 FB | 	rdlong	local06, fp
12ce4     18 13 02 F1 | 	add	arg01, local06
12ce8     4E 00 00 FF 
12cec     B4 E4 05 F1 | 	add	objptr, ##40116
12cf0     F2 30 02 F1 | 	add	local06, objptr
12cf4     18 15 C2 FA | 	rdbyte	arg02, local06
12cf8     09 15 42 FC | 	wrbyte	arg02, arg01
12cfc     4E 00 00 FF 
12d00     B4 E4 85 F1 | 	sub	objptr, ##40116
12d04     A7 30 02 FB | 	rdlong	local06, fp
12d08     01 30 06 F1 | 	add	local06, #1
12d0c     A7 30 62 FC | 	wrlong	local06, fp
12d10     14 4E 85 F1 | 	sub	fp, #20
12d14     98 FF 9F FD | 	jmp	#LR__1493
12d18                 | LR__1494
12d18     14 4E 05 F1 | 	add	fp, #20
12d1c     A7 00 68 FC | 	wrlong	#0, fp
12d20     04 4E 05 F1 | 	add	fp, #4
12d24     A7 36 02 FB | 	rdlong	local09, fp
12d28     18 4E 85 F1 | 	sub	fp, #24
12d2c                 | LR__1495
12d2c     14 4E 05 F1 | 	add	fp, #20
12d30     A7 28 02 FB | 	rdlong	local02, fp
12d34     14 4E 85 F1 | 	sub	fp, #20
12d38     1B 29 52 F2 | 	cmps	local02, local09 wc
12d3c     5C 00 90 3D |  if_ae	jmp	#LR__1496
12d40     0C 4E 05 F1 | 	add	fp, #12
12d44     A7 12 02 FB | 	rdlong	arg01, fp
12d48     04 4E 05 F1 | 	add	fp, #4
12d4c     A7 34 02 FB | 	rdlong	local08, fp
12d50     0A 34 66 F0 | 	shl	local08, #10
12d54     1A 13 02 F1 | 	add	arg01, local08
12d58     04 4E 05 F1 | 	add	fp, #4
12d5c     A7 34 02 FB | 	rdlong	local08, fp
12d60     1A 13 02 F1 | 	add	arg01, local08
12d64     14 4E 85 F1 | 	sub	fp, #20
12d68     4E 00 00 FF 
12d6c     B4 E4 05 F1 | 	add	objptr, ##40116
12d70     F2 34 02 F1 | 	add	local08, objptr
12d74     1A 15 C2 FA | 	rdbyte	arg02, local08
12d78     4E 00 00 FF 
12d7c     B4 E4 85 F1 | 	sub	objptr, ##40116
12d80     98 0A B1 FD | 	call	#_pspoke
12d84     14 4E 05 F1 | 	add	fp, #20
12d88     A7 34 02 FB | 	rdlong	local08, fp
12d8c     01 34 06 F1 | 	add	local08, #1
12d90     A7 34 62 FC | 	wrlong	local08, fp
12d94     14 4E 85 F1 | 	sub	fp, #20
12d98     90 FF 9F FD | 	jmp	#LR__1495
12d9c                 | LR__1496
12d9c                 | LR__1497
12d9c     14 4E 05 F1 | 	add	fp, #20
12da0     A7 36 02 FB | 	rdlong	local09, fp
12da4     1B 31 02 F6 | 	mov	local06, local09
12da8     02 30 66 F0 | 	shl	local06, #2
12dac     50 00 00 FF 
12db0     C4 E4 05 F1 | 	add	objptr, ##41156
12db4     F2 30 02 F1 | 	add	local06, objptr
12db8     02 36 66 F0 | 	shl	local09, #2
12dbc     F2 36 02 F1 | 	add	local09, objptr
12dc0     1B 37 02 FB | 	rdlong	local09, local09
12dc4     04 4E 05 F1 | 	add	fp, #4
12dc8     A7 34 02 FB | 	rdlong	local08, fp
12dcc     1A 37 02 F1 | 	add	local09, local08
12dd0     18 37 62 FC | 	wrlong	local09, local06
12dd4     08 4E 85 F1 | 	sub	fp, #8
12dd8     A7 36 02 FB | 	rdlong	local09, fp
12ddc     01 36 06 F1 | 	add	local09, #1
12de0     A7 36 62 FC | 	wrlong	local09, fp
12de4     10 4E 85 F1 | 	sub	fp, #16
12de8     50 00 00 FF 
12dec     C4 E4 85 F1 | 	sub	objptr, ##41156
12df0     40 FE 9F FD | 	jmp	#LR__1492
12df4                 | LR__1498
12df4                 | LR__1499
12df4     A7 F0 03 F6 | 	mov	ptra, fp
12df8     B2 00 A0 FD | 	call	#popregs_
12dfc                 | _do_get_ret
12dfc     2D 00 64 FD | 	ret
12e00                 | 
12e00                 | ' 
12e00                 | ' '-------------------- getcolor
12e00                 | ' 
12e00                 | ' sub do_getcolor
12e00                 | _do_getcolor
12e00     01 4A 05 F6 | 	mov	COUNT_, #1
12e04     A8 00 A0 FD | 	call	#pushregs_
12e08     10 F0 07 F1 | 	add	ptra, #16
12e0c     4A 00 00 FF 
12e10     80 E4 05 F1 | 	add	objptr, ##38016
12e14     F2 26 02 FB | 	rdlong	local01, objptr
12e18     13 17 02 F6 | 	mov	arg03, local01
12e1c     01 16 66 F0 | 	shl	arg03, #1
12e20     13 17 02 F1 | 	add	arg03, local01
12e24     02 16 66 F0 | 	shl	arg03, #2
12e28     03 00 00 FF 
12e2c     04 E4 85 F1 | 	sub	objptr, ##1540
12e30     F2 16 02 F1 | 	add	arg03, objptr
12e34     0B 17 02 FB | 	rdlong	arg03, arg03
12e38     0C 4E 05 F1 | 	add	fp, #12
12e3c     A7 16 62 FC | 	wrlong	arg03, fp
12e40                 | ' 
12e40                 | ' numpar=compiledline(lineptr_e).result.uresult
12e40                 | ' if numpar>1 orelse numpar=0 then print "getcolor "; : printerror(39) : return
12e40     0C 4E 85 F1 | 	sub	fp, #12
12e44     02 16 16 F2 | 	cmp	arg03, #2 wc
12e48     47 00 00 FF 
12e4c     7C E4 85 F1 | 	sub	objptr, ##36476
12e50     0C 4E 05 C1 |  if_b	add	fp, #12
12e54     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12e58     0C 4E 85 C1 |  if_b	sub	fp, #12
12e5c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1500
12e60     00 12 06 F6 | 	mov	arg01, #0
12e64     D8 9E B1 FD | 	call	#__system___getiolock_0614
12e68     FD 12 02 F6 | 	mov	arg01, result1
12e6c     2C 42 B1 FD | 	call	#__system___lockmem
12e70     BA 01 00 FF 
12e74     BA 15 06 F6 | 	mov	arg02, ##@LR__5959
12e78     00 12 06 F6 | 	mov	arg01, #0
12e7c     00 16 06 F6 | 	mov	arg03, #0
12e80     10 4F B1 FD | 	call	#__system___basic_print_string
12e84     00 12 06 F6 | 	mov	arg01, #0
12e88     B4 9E B1 FD | 	call	#__system___getiolock_0614
12e8c     FD 00 68 FC | 	wrlong	#0, result1
12e90     27 12 06 F6 | 	mov	arg01, #39
12e94     00 14 06 F6 | 	mov	arg02, #0
12e98     50 07 B1 FD | 	call	#_printerror
12e9c     60 00 90 FD | 	jmp	#LR__1501
12ea0                 | LR__1500
12ea0     64 A8 BF FD | 	call	#_pop
12ea4     A7 FA 61 FC | 	wrlong	result1, fp
12ea8     04 4E 05 F1 | 	add	fp, #4
12eac     A7 FC 61 FC | 	wrlong	result2, fp
12eb0     04 4E 05 F1 | 	add	fp, #4
12eb4     A7 FE 61 FC | 	wrlong	result3, fp
12eb8     08 4E 85 F1 | 	sub	fp, #8
12ebc     A7 12 02 F6 | 	mov	arg01, fp
12ec0     28 AA BF FD | 	call	#_converttoint
12ec4     FD 12 02 F6 | 	mov	arg01, result1
12ec8                 | ' 
12ec8                 | ' return long[palette_ptr+4*color]
12ec8     1C E4 05 F1 | 	add	objptr, #28
12ecc     F2 FA 01 FB | 	rdlong	result1, objptr
12ed0     1C E4 85 F1 | 	sub	objptr, #28
12ed4     02 12 66 F0 | 	shl	arg01, #2
12ed8     09 FB 01 F1 | 	add	result1, arg01
12edc     FD FA 01 FB | 	rdlong	result1, result1
12ee0     08 FA C5 F0 | 	sar	result1, #8
12ee4     F8 FA 05 F4 | 	bitl	result1, #248
12ee8     A7 FA 61 FC | 	wrlong	result1, fp
12eec     08 4E 05 F1 | 	add	fp, #8
12ef0     A7 3A 68 FC | 	wrlong	#29, fp
12ef4     08 4E 85 F1 | 	sub	fp, #8
12ef8     A7 12 02 F6 | 	mov	arg01, fp
12efc     A0 A8 BF FD | 	call	#_push
12f00                 | LR__1501
12f00     A7 F0 03 F6 | 	mov	ptra, fp
12f04     B2 00 A0 FD | 	call	#popregs_
12f08                 | _do_getcolor_ret
12f08     2D 00 64 FD | 	ret
12f0c                 | 
12f0c                 | ' 
12f0c                 | ' '-------------------- getenvsustain
12f0c                 | ' 
12f0c                 | ' sub do_getenvsustain
12f0c                 | _do_getenvsustain
12f0c     01 4A 05 F6 | 	mov	COUNT_, #1
12f10     A8 00 A0 FD | 	call	#pushregs_
12f14     10 F0 07 F1 | 	add	ptra, #16
12f18     4A 00 00 FF 
12f1c     80 E4 05 F1 | 	add	objptr, ##38016
12f20     F2 26 02 FB | 	rdlong	local01, objptr
12f24     13 17 02 F6 | 	mov	arg03, local01
12f28     01 16 66 F0 | 	shl	arg03, #1
12f2c     13 17 02 F1 | 	add	arg03, local01
12f30     02 16 66 F0 | 	shl	arg03, #2
12f34     03 00 00 FF 
12f38     04 E4 85 F1 | 	sub	objptr, ##1540
12f3c     F2 16 02 F1 | 	add	arg03, objptr
12f40     0B 17 02 FB | 	rdlong	arg03, arg03
12f44     0C 4E 05 F1 | 	add	fp, #12
12f48     A7 16 62 FC | 	wrlong	arg03, fp
12f4c                 | ' 
12f4c                 | ' numpar=compiledline(lineptr_e).result.uresult
12f4c                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12f4c     0C 4E 85 F1 | 	sub	fp, #12
12f50     02 16 16 F2 | 	cmp	arg03, #2 wc
12f54     47 00 00 FF 
12f58     7C E4 85 F1 | 	sub	objptr, ##36476
12f5c     0C 4E 05 C1 |  if_b	add	fp, #12
12f60     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12f64     0C 4E 85 C1 |  if_b	sub	fp, #12
12f68     40 00 90 4D |  if_c_and_nz	jmp	#LR__1510
12f6c     00 12 06 F6 | 	mov	arg01, #0
12f70     CC 9D B1 FD | 	call	#__system___getiolock_0614
12f74     FD 12 02 F6 | 	mov	arg01, result1
12f78     20 41 B1 FD | 	call	#__system___lockmem
12f7c     BA 01 00 FF 
12f80     C4 15 06 F6 | 	mov	arg02, ##@LR__5960
12f84     00 12 06 F6 | 	mov	arg01, #0
12f88     00 16 06 F6 | 	mov	arg03, #0
12f8c     04 4E B1 FD | 	call	#__system___basic_print_string
12f90     00 12 06 F6 | 	mov	arg01, #0
12f94     A8 9D B1 FD | 	call	#__system___getiolock_0614
12f98     FD 00 68 FC | 	wrlong	#0, result1
12f9c     27 12 06 F6 | 	mov	arg01, #39
12fa0     00 14 06 F6 | 	mov	arg02, #0
12fa4     44 06 B1 FD | 	call	#_printerror
12fa8     64 00 90 FD | 	jmp	#LR__1511
12fac                 | LR__1510
12fac     58 A7 BF FD | 	call	#_pop
12fb0     FD 26 02 F6 | 	mov	local01, result1
12fb4     FE 16 02 F6 | 	mov	arg03, result2
12fb8     A7 26 62 FC | 	wrlong	local01, fp
12fbc     04 4E 05 F1 | 	add	fp, #4
12fc0     A7 16 62 FC | 	wrlong	arg03, fp
12fc4     04 4E 05 F1 | 	add	fp, #4
12fc8     A7 FE 61 FC | 	wrlong	result3, fp
12fcc     08 4E 85 F1 | 	sub	fp, #8
12fd0     A7 12 02 F6 | 	mov	arg01, fp
12fd4     14 A9 BF FD | 	call	#_converttoint
12fd8     FD 26 02 F6 | 	mov	local01, result1
12fdc     01 26 66 F0 | 	shl	local01, #1
12fe0     52 00 00 FF 
12fe4     B4 E4 05 F1 | 	add	objptr, ##42164
12fe8     F2 26 02 F1 | 	add	local01, objptr
12fec     13 27 E2 FA | 	rdword	local01, local01
12ff0     A7 26 62 FC | 	wrlong	local01, fp
12ff4     08 4E 05 F1 | 	add	fp, #8
12ff8     A7 38 68 FC | 	wrlong	#28, fp
12ffc     08 4E 85 F1 | 	sub	fp, #8
13000     A7 12 02 F6 | 	mov	arg01, fp
13004     52 00 00 FF 
13008     B4 E4 85 F1 | 	sub	objptr, ##42164
1300c     90 A7 BF FD | 	call	#_push
13010                 | LR__1511
13010     A7 F0 03 F6 | 	mov	ptra, fp
13014     B2 00 A0 FD | 	call	#popregs_
13018                 | _do_getenvsustain_ret
13018     2D 00 64 FD | 	ret
1301c                 | 
1301c                 | ' 
1301c                 | ' '-------------------- getnotevalue
1301c                 | ' 
1301c                 | ' sub do_getnotevalue
1301c                 | _do_getnotevalue
1301c     01 4A 05 F6 | 	mov	COUNT_, #1
13020     A8 00 A0 FD | 	call	#pushregs_
13024     1C F0 07 F1 | 	add	ptra, #28
13028     DC A6 BF FD | 	call	#_pop
1302c     FF 14 02 F6 | 	mov	arg02, result3
13030     10 4E 05 F1 | 	add	fp, #16
13034     A7 FA 61 FC | 	wrlong	result1, fp
13038     04 4E 05 F1 | 	add	fp, #4
1303c     A7 FC 61 FC | 	wrlong	result2, fp
13040     04 4E 05 F1 | 	add	fp, #4
13044     A7 14 62 FC | 	wrlong	arg02, fp
13048     08 4E 85 F1 | 	sub	fp, #8
1304c     A7 12 02 F6 | 	mov	arg01, fp
13050     10 4E 85 F1 | 	sub	fp, #16
13054     94 A8 BF FD | 	call	#_converttoint
13058     FD 14 52 F6 | 	abs	arg02, result1 wc
1305c     0C 14 16 FD | 	qdiv	arg02, #12
13060     0C 4E 05 F1 | 	add	fp, #12
13064     A7 FA 61 FC | 	wrlong	result1, fp
13068     14 00 00 FF 
1306c     D8 E4 05 F1 | 	add	objptr, ##10456
13070     08 4E 85 F1 | 	sub	fp, #8
13074     19 14 62 FD | 	getqy	arg02
13078     0A 15 82 F6 | 	negc	arg02, arg02
1307c     02 14 66 F0 | 	shl	arg02, #2
13080     F2 14 02 F1 | 	add	arg02, objptr
13084     0A 15 02 FB | 	rdlong	arg02, arg02
13088     A7 14 62 FC | 	wrlong	arg02, fp
1308c     08 4E 05 F1 | 	add	fp, #8
13090     A7 14 02 FB | 	rdlong	arg02, fp
13094     0A 15 52 F6 | 	abs	arg02, arg02 wc
13098     0C 14 16 FD | 	qdiv	arg02, #12
1309c     0C 4E 85 F1 | 	sub	fp, #12
130a0     14 00 00 FF 
130a4     D8 E4 85 F1 | 	sub	objptr, ##10456
130a8     18 14 62 FD | 	getqx	arg02
130ac     0A 13 82 F6 | 	negc	arg01, arg02
130b0     09 13 52 F6 | 	abs	arg01, arg01 wc
130b4     1F 26 C6 C9 |  if_b	decod	local01, #31
130b8     00 26 06 36 |  if_ae	mov	local01, #0
130bc     54 6A B1 FD | 	call	#__system___float_fromuns
130c0     13 FB 61 F5 | 	xor	result1, local01
130c4     08 4E 05 F1 | 	add	fp, #8
130c8     A7 FA 61 FC | 	wrlong	result1, fp
130cc     FD 14 02 F6 | 	mov	arg02, result1
130d0     08 4E 85 F1 | 	sub	fp, #8
130d4     1E 12 C6 F9 | 	decod	arg01, #30
130d8     44 7D B1 FD | 	call	#__system____builtin_powf
130dc     FD 12 02 F6 | 	mov	arg01, result1
130e0     04 4E 05 F1 | 	add	fp, #4
130e4     A7 14 02 FB | 	rdlong	arg02, fp
130e8     04 4E 85 F1 | 	sub	fp, #4
130ec     28 6E B1 FD | 	call	#__system___float_mul
130f0     A7 FA 61 FC | 	wrlong	result1, fp
130f4     10 4E 05 F1 | 	add	fp, #16
130f8     A7 FA 61 FC | 	wrlong	result1, fp
130fc     08 4E 05 F1 | 	add	fp, #8
13100     A7 3C 68 FC | 	wrlong	#30, fp
13104     08 4E 85 F1 | 	sub	fp, #8
13108     A7 12 02 F6 | 	mov	arg01, fp
1310c     10 4E 85 F1 | 	sub	fp, #16
13110     8C A6 BF FD | 	call	#_push
13114     A7 F0 03 F6 | 	mov	ptra, fp
13118     B2 00 A0 FD | 	call	#popregs_
1311c                 | _do_getnotevalue_ret
1311c     2D 00 64 FD | 	ret
13120                 | 
13120                 | ' 
13120                 | ' '-------------------- getpixel
13120                 | ' 
13120                 | ' sub do_getpixel
13120                 | _do_getpixel
13120     00 4A 05 F6 | 	mov	COUNT_, #0
13124     A8 00 A0 FD | 	call	#pushregs_
13128     24 F0 07 F1 | 	add	ptra, #36
1312c     4A 00 00 FF 
13130     80 E4 05 F1 | 	add	objptr, ##38016
13134     F2 16 02 FB | 	rdlong	arg03, objptr
13138     0B 15 02 F6 | 	mov	arg02, arg03
1313c     01 14 66 F0 | 	shl	arg02, #1
13140     0B 15 02 F1 | 	add	arg02, arg03
13144     02 14 66 F0 | 	shl	arg02, #2
13148     03 00 00 FF 
1314c     04 E4 85 F1 | 	sub	objptr, ##1540
13150     F2 14 02 F1 | 	add	arg02, objptr
13154     0A 17 02 FB | 	rdlong	arg03, arg02
13158     18 4E 05 F1 | 	add	fp, #24
1315c     A7 16 62 FC | 	wrlong	arg03, fp
13160                 | ' 
13160                 | ' numpar=compiledline(lineptr_e).result.uresult
13160                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
13160     18 4E 85 F1 | 	sub	fp, #24
13164     02 16 0E F2 | 	cmp	arg03, #2 wz
13168     47 00 00 FF 
1316c     7C E4 85 F1 | 	sub	objptr, ##36476
13170     40 00 90 AD |  if_e	jmp	#LR__1520
13174     00 12 06 F6 | 	mov	arg01, #0
13178     C4 9B B1 FD | 	call	#__system___getiolock_0614
1317c     FD 12 02 F6 | 	mov	arg01, result1
13180     18 3F B1 FD | 	call	#__system___lockmem
13184     BA 01 00 FF 
13188     D4 15 06 F6 | 	mov	arg02, ##@LR__5961
1318c     00 12 06 F6 | 	mov	arg01, #0
13190     00 16 06 F6 | 	mov	arg03, #0
13194     FC 4B B1 FD | 	call	#__system___basic_print_string
13198     00 12 06 F6 | 	mov	arg01, #0
1319c     A0 9B B1 FD | 	call	#__system___getiolock_0614
131a0     FD 00 68 FC | 	wrlong	#0, result1
131a4     27 12 06 F6 | 	mov	arg01, #39
131a8     00 14 06 F6 | 	mov	arg02, #0
131ac     3C 04 B1 FD | 	call	#_printerror
131b0     B4 00 90 FD | 	jmp	#LR__1521
131b4                 | LR__1520
131b4     50 A5 BF FD | 	call	#_pop
131b8     FD 16 02 F6 | 	mov	arg03, result1
131bc     FE 14 02 F6 | 	mov	arg02, result2
131c0     FF 12 02 F6 | 	mov	arg01, result3
131c4     0C 4E 05 F1 | 	add	fp, #12
131c8     A7 16 62 FC | 	wrlong	arg03, fp
131cc     04 4E 05 F1 | 	add	fp, #4
131d0     A7 14 62 FC | 	wrlong	arg02, fp
131d4     04 4E 05 F1 | 	add	fp, #4
131d8     A7 12 62 FC | 	wrlong	arg01, fp
131dc     14 4E 85 F1 | 	sub	fp, #20
131e0     24 A5 BF FD | 	call	#_pop
131e4     FF 16 02 F6 | 	mov	arg03, result3
131e8     A7 FA 61 FC | 	wrlong	result1, fp
131ec     04 4E 05 F1 | 	add	fp, #4
131f0     A7 FC 61 FC | 	wrlong	result2, fp
131f4     04 4E 05 F1 | 	add	fp, #4
131f8     A7 16 62 FC | 	wrlong	arg03, fp
131fc     08 4E 85 F1 | 	sub	fp, #8
13200     A7 12 02 F6 | 	mov	arg01, fp
13204     E4 A6 BF FD | 	call	#_converttoint
13208     1C 4E 05 F1 | 	add	fp, #28
1320c     A7 FA 61 FC | 	wrlong	result1, fp
13210     10 4E 85 F1 | 	sub	fp, #16
13214     A7 12 02 F6 | 	mov	arg01, fp
13218     0C 4E 85 F1 | 	sub	fp, #12
1321c     CC A6 BF FD | 	call	#_converttoint
13220     FD 16 02 F6 | 	mov	arg03, result1
13224     20 4E 05 F1 | 	add	fp, #32
13228     A7 16 62 FC | 	wrlong	arg03, fp
1322c     F2 12 02 FB | 	rdlong	arg01, objptr
13230     04 4E 85 F1 | 	sub	fp, #4
13234     A7 FE 01 FB | 	rdlong	result3, fp
13238     FF 12 02 F1 | 	add	arg01, result3
1323c     1C 4E 85 F1 | 	sub	fp, #28
13240     0A 16 66 F0 | 	shl	arg03, #10
13244     0B 13 02 F1 | 	add	arg01, arg03
13248     18 06 B1 FD | 	call	#_pspeek
1324c     FD FA E1 F8 | 	getbyte	result1, result1, #0
13250     A7 FA 61 FC | 	wrlong	result1, fp
13254     08 4E 05 F1 | 	add	fp, #8
13258     A7 3A 68 FC | 	wrlong	#29, fp
1325c     08 4E 85 F1 | 	sub	fp, #8
13260     A7 12 02 F6 | 	mov	arg01, fp
13264     38 A5 BF FD | 	call	#_push
13268                 | LR__1521
13268     A7 F0 03 F6 | 	mov	ptra, fp
1326c     B2 00 A0 FD | 	call	#popregs_
13270                 | _do_getpixel_ret
13270     2D 00 64 FD | 	ret
13274                 | 
13274                 | ' 
13274                 | ' '-------------------- gettime
13274                 | ' 
13274                 | ' sub do_gettime
13274                 | _do_gettime
13274     02 4A 05 F6 | 	mov	COUNT_, #2
13278     A8 00 A0 FD | 	call	#pushregs_
1327c     14 F0 07 F1 | 	add	ptra, #20
13280                 | ' 
13280                 | ' const asm 
13280     1A 26 72 FD | 	getct	local01 wc
13284     1A 28 62 FD | 	getct	local02
13288                 | ' return hi1, lo1
13288     14 FD 01 F6 | 	mov	result2, local02
1328c     A7 26 62 FC | 	wrlong	local01, fp
13290     04 4E 05 F1 | 	add	fp, #4
13294     A7 FC 61 FC | 	wrlong	result2, fp
13298     0C 4E 05 F1 | 	add	fp, #12
1329c     A7 3A 68 FC | 	wrlong	#29, fp
132a0     0C 4E 85 F1 | 	sub	fp, #12
132a4     A7 12 02 FB | 	rdlong	arg01, fp
132a8     04 4E 05 F1 | 	add	fp, #4
132ac     A7 12 62 FC | 	wrlong	arg01, fp
132b0     08 4E 85 F1 | 	sub	fp, #8
132b4     A7 12 02 FB | 	rdlong	arg01, fp
132b8     0C 4E 05 F1 | 	add	fp, #12
132bc     A7 12 62 FC | 	wrlong	arg01, fp
132c0     04 4E 85 F1 | 	sub	fp, #4
132c4     A7 12 02 F6 | 	mov	arg01, fp
132c8     08 4E 85 F1 | 	sub	fp, #8
132cc     D0 A4 BF FD | 	call	#_push
132d0     A7 F0 03 F6 | 	mov	ptra, fp
132d4     B2 00 A0 FD | 	call	#popregs_
132d8                 | _do_gettime_ret
132d8     2D 00 64 FD | 	ret
132dc                 | 
132dc                 | ' 
132dc                 | ' '-------------------- gosub
132dc                 | ' 
132dc                 | ' sub do_gosub()
132dc                 | _do_gosub
132dc     50 00 00 FF 
132e0     34 E5 05 F1 | 	add	objptr, ##41268
132e4     F2 00 02 FB | 	rdlong	_var01, objptr
132e8     01 00 06 F1 | 	add	_var01, #1
132ec     F2 00 62 FC | 	wrlong	_var01, objptr
132f0                 | ' gosubtop+=1
132f0                 | ' if compiledline(lineptr_e+1).result_type=token_end then
132f0     06 00 00 FF 
132f4     B4 E4 85 F1 | 	sub	objptr, ##3252
132f8     F2 00 02 FB | 	rdlong	_var01, objptr
132fc     01 00 06 F1 | 	add	_var01, #1
13300     00 03 02 F6 | 	mov	_var02, _var01
13304     01 02 66 F0 | 	shl	_var02, #1
13308     00 03 02 F1 | 	add	_var02, _var01
1330c     02 02 66 F0 | 	shl	_var02, #2
13310     03 00 00 FF 
13314     04 E4 85 F1 | 	sub	objptr, ##1540
13318     F2 02 02 F1 | 	add	_var02, objptr
1331c     08 02 06 F1 | 	add	_var02, #8
13320     01 03 02 FB | 	rdlong	_var02, _var02
13324     FE 03 0E F2 | 	cmp	_var02, #510 wz
13328     47 00 00 FF 
1332c     7C E4 85 F1 | 	sub	objptr, ##36476
13330     58 00 90 5D |  if_ne	jmp	#LR__1530
13334     50 00 00 FF 
13338     34 E5 05 F1 | 	add	objptr, ##41268
1333c     F2 02 02 FB | 	rdlong	_var02, objptr
13340     03 02 66 F0 | 	shl	_var02, #3
13344     03 00 00 FF 
13348     88 E5 85 F1 | 	sub	objptr, ##1928
1334c     F2 02 02 F1 | 	add	_var02, objptr
13350     03 00 00 FF 
13354     0C E5 05 F1 | 	add	objptr, ##1804
13358     F2 00 02 FB | 	rdlong	_var01, objptr
1335c     01 01 62 FC | 	wrlong	_var01, _var02
13360     7C E4 05 F1 | 	add	objptr, #124
13364     F2 02 02 FB | 	rdlong	_var02, objptr
13368     03 02 66 F0 | 	shl	_var02, #3
1336c     03 00 00 FF 
13370     88 E5 85 F1 | 	sub	objptr, ##1928
13374     F2 02 02 F1 | 	add	_var02, objptr
13378     04 02 06 F1 | 	add	_var02, #4
1337c     01 01 68 FC | 	wrlong	#0, _var02
13380     4C 00 00 FF 
13384     AC E5 85 F1 | 	sub	objptr, ##39340
13388     64 00 90 FD | 	jmp	#LR__1531
1338c                 | LR__1530
1338c     50 00 00 FF 
13390     34 E5 05 F1 | 	add	objptr, ##41268
13394     F2 02 02 FB | 	rdlong	_var02, objptr
13398     03 02 66 F0 | 	shl	_var02, #3
1339c     03 00 00 FF 
133a0     88 E5 85 F1 | 	sub	objptr, ##1928
133a4     F2 02 02 F1 | 	add	_var02, objptr
133a8     03 00 00 FF 
133ac     14 E5 05 F1 | 	add	objptr, ##1812
133b0     F2 00 02 FB | 	rdlong	_var01, objptr
133b4     01 01 62 FC | 	wrlong	_var01, _var02
133b8     74 E4 05 F1 | 	add	objptr, #116
133bc     F2 02 02 FB | 	rdlong	_var02, objptr
133c0     03 02 66 F0 | 	shl	_var02, #3
133c4     03 00 00 FF 
133c8     88 E5 85 F1 | 	sub	objptr, ##1928
133cc     F2 02 02 F1 | 	add	_var02, objptr
133d0     02 00 00 FF 
133d4     2C E5 85 F1 | 	sub	objptr, ##1324
133d8     F2 00 02 FB | 	rdlong	_var01, objptr
133dc     4A 00 00 FF 
133e0     80 E4 85 F1 | 	sub	objptr, ##38016
133e4     02 00 06 F1 | 	add	_var01, #2
133e8     04 02 06 F1 | 	add	_var02, #4
133ec     01 01 62 FC | 	wrlong	_var01, _var02
133f0                 | LR__1531
133f0                 | _do_gosub_ret
133f0     2D 00 64 FD | 	ret
133f4                 | 
133f4                 | ' 
133f4                 | ' '--------------------- goto
133f4                 | ' 
133f4                 | ' '------- fast goto
133f4                 | ' 
133f4                 | ' sub do_fast_goto
133f4                 | _do_fast_goto
133f4     02 4A 05 F6 | 	mov	COUNT_, #2
133f8     A8 00 A0 FD | 	call	#pushregs_
133fc                 | _do_fast_goto_enter
133fc     4A 00 00 FF 
13400     80 E4 05 F1 | 	add	objptr, ##38016
13404     F2 12 02 FB | 	rdlong	arg01, objptr
13408     09 27 02 F6 | 	mov	local01, arg01
1340c     01 26 66 F0 | 	shl	local01, #1
13410     09 27 02 F1 | 	add	local01, arg01
13414     02 26 66 F0 | 	shl	local01, #2
13418     03 00 00 FF 
1341c     04 E4 85 F1 | 	sub	objptr, ##1540
13420     F2 26 02 F1 | 	add	local01, objptr
13424     13 29 02 FB | 	rdlong	local02, local01
13428     14 13 02 F6 | 	mov	arg01, local02
1342c     47 00 00 FF 
13430     7C E4 85 F1 | 	sub	objptr, ##36476
13434     84 04 B1 FD | 	call	#_pslpeek
13438     FD 12 02 F6 | 	mov	arg01, result1
1343c                 | ' 
1343c                 | ' testptr=compiledline(lineptr_e).result.uresult
1343c                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
1343c                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
1343c     4A 00 00 FF 
13440     80 E4 05 F1 | 	add	objptr, ##38016
13444     F2 FA 01 FB | 	rdlong	result1, objptr
13448     FD 26 02 F6 | 	mov	local01, result1
1344c     01 26 66 F0 | 	shl	local01, #1
13450     FD 26 02 F1 | 	add	local01, result1
13454     02 26 66 F0 | 	shl	local01, #2
13458     03 00 00 FF 
1345c     04 E4 85 F1 | 	sub	objptr, ##1540
13460     F2 26 02 F1 | 	add	local01, objptr
13464     04 26 06 F1 | 	add	local01, #4
13468     13 27 02 FB | 	rdlong	local01, local01
1346c     13 13 0A F2 | 	cmp	arg01, local01 wz
13470     47 00 00 FF 
13474     7C E4 85 F1 | 	sub	objptr, ##36476
13478     58 00 90 5D |  if_ne	jmp	#LR__1540
1347c     50 00 00 FF 
13480     B8 E4 05 F1 | 	add	objptr, ##41144
13484     F2 28 62 FC | 	wrlong	local02, objptr
13488     06 00 00 FF 
1348c     3C E4 85 F1 | 	sub	objptr, ##3132
13490     F2 28 02 FB | 	rdlong	local02, objptr
13494     01 28 86 F1 | 	sub	local02, #1
13498     04 E4 05 F1 | 	add	objptr, #4
1349c     F2 28 62 FC | 	wrlong	local02, objptr
134a0                 | '   runptr=testptr
134a0                 | '   lineptr_e=lineptr-1
134a0                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
134a0     06 00 00 FF 
134a4     84 E4 05 F1 | 	add	objptr, ##3204
134a8     F2 28 02 FB | 	rdlong	local02, objptr
134ac     50 00 00 FF 
134b0     04 E5 85 F1 | 	sub	objptr, ##41220
134b4     FF FF 3F FF 
134b8     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
134bc     50 00 00 AF 
134c0     04 E5 05 A1 |  if_e	add	objptr, ##41220
134c4     F2 00 68 AC |  if_e	wrlong	#0, objptr
134c8     50 00 00 AF 
134cc     04 E5 85 A1 |  if_e	sub	objptr, ##41220
134d0     04 00 90 FD | 	jmp	#LR__1541
134d4                 | LR__1540
134d4     0C 00 B0 FD | 	call	#_do_find_goto
134d8                 | LR__1541
134d8     A7 F0 03 F6 | 	mov	ptra, fp
134dc     B2 00 A0 FD | 	call	#popregs_
134e0                 | _do_fast_goto_ret
134e0     2D 00 64 FD | 	ret
134e4                 | 
134e4                 | ' 
134e4                 | ' '------- find goto  
134e4                 | ' 
134e4                 | ' sub do_find_goto
134e4                 | _do_find_goto
134e4     03 4A 05 F6 | 	mov	COUNT_, #3
134e8     A8 00 A0 FD | 	call	#pushregs_
134ec     24 F0 07 F1 | 	add	ptra, #36
134f0                 | _do_find_goto_enter
134f0     4A 00 00 FF 
134f4     80 E4 05 F1 | 	add	objptr, ##38016
134f8     F2 26 02 FB | 	rdlong	local01, objptr
134fc     13 29 02 F6 | 	mov	local02, local01
13500     01 28 66 F0 | 	shl	local02, #1
13504     13 29 02 F1 | 	add	local02, local01
13508     02 28 66 F0 | 	shl	local02, #2
1350c     03 00 00 FF 
13510     04 E4 85 F1 | 	sub	objptr, ##1540
13514     F2 28 02 F1 | 	add	local02, objptr
13518     04 28 06 F1 | 	add	local02, #4
1351c     14 29 02 FB | 	rdlong	local02, local02
13520     A7 28 62 FC | 	wrlong	local02, fp
13524     03 00 00 FF 
13528     0C E4 05 F1 | 	add	objptr, ##1548
1352c     F2 2A 02 FB | 	rdlong	local03, objptr
13530     4A 00 00 FF 
13534     88 E4 85 F1 | 	sub	objptr, ##38024
13538     04 4E 05 F1 | 	add	fp, #4
1353c     A7 2A 62 FC | 	wrlong	local03, fp
13540     04 4E 85 F1 | 	sub	fp, #4
13544                 | ' 
13544                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
13544                 | ' gotoptr=programstart
13544                 | ' do
13544                 | LR__1550
13544     0C 4E 05 F1 | 	add	fp, #12
13548     A7 12 02 F6 | 	mov	arg01, fp
1354c     08 4E 85 F1 | 	sub	fp, #8
13550     A7 14 02 FB | 	rdlong	arg02, fp
13554     04 4E 85 F1 | 	sub	fp, #4
13558     18 16 06 F6 | 	mov	arg03, #24
1355c     0B 00 00 FF 
13560     CC E4 05 F1 | 	add	objptr, ##5836
13564     3C 2E B1 FD | 	call	#_psram_spin2_read1
13568     0B 00 00 FF 
1356c     CC E4 85 F1 | 	sub	objptr, ##5836
13570                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
13570                 | '   if gotoheader(0)<>$FFFFFFFF then
13570     0C 4E 05 F1 | 	add	fp, #12
13574     A7 2A 02 FB | 	rdlong	local03, fp
13578     0C 4E 85 F1 | 	sub	fp, #12
1357c     FF FF 7F FF 
13580     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
13584     24 00 90 AD |  if_e	jmp	#LR__1551
13588     04 4E 05 F1 | 	add	fp, #4
1358c     A7 2A 02 FB | 	rdlong	local03, fp
13590     04 4E 05 F1 | 	add	fp, #4
13594     A7 2A 62 FC | 	wrlong	local03, fp
13598     18 4E 05 F1 | 	add	fp, #24
1359c     A7 2A 02 FB | 	rdlong	local03, fp
135a0     1C 4E 85 F1 | 	sub	fp, #28
135a4     A7 2A 62 FC | 	wrlong	local03, fp
135a8     04 4E 85 F1 | 	sub	fp, #4
135ac                 | LR__1551
135ac     20 4E 05 F1 | 	add	fp, #32
135b0     A7 2A 02 FB | 	rdlong	local03, fp
135b4     20 4E 85 F1 | 	sub	fp, #32
135b8     FF FF 3F FF 
135bc     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
135c0     0C 4E 05 51 |  if_ne	add	fp, #12
135c4     A7 26 02 5B |  if_ne	rdlong	local01, fp
135c8     0C 4E 85 51 |  if_ne	sub	fp, #12
135cc     FF FF 7F 5F 
135d0     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
135d4     18 00 90 AD |  if_e	jmp	#LR__1552
135d8     0C 4E 05 F1 | 	add	fp, #12
135dc     A7 2A 02 FB | 	rdlong	local03, fp
135e0     0C 4E 85 F1 | 	sub	fp, #12
135e4     A7 28 02 FB | 	rdlong	local02, fp
135e8     14 2B 0A F2 | 	cmp	local03, local02 wz
135ec     54 FF 9F 5D |  if_ne	jmp	#LR__1550
135f0                 | LR__1552
135f0                 | ' 
135f0                 | ' if gotoheader(0)=gotoline then
135f0     0C 4E 05 F1 | 	add	fp, #12
135f4     A7 2A 02 FB | 	rdlong	local03, fp
135f8     0C 4E 85 F1 | 	sub	fp, #12
135fc     A7 26 02 FB | 	rdlong	local01, fp
13600     13 2B 0A F2 | 	cmp	local03, local01 wz
13604     D8 00 90 5D |  if_ne	jmp	#LR__1553
13608     4A 00 00 FF 
1360c     80 E4 05 F1 | 	add	objptr, ##38016
13610     F2 26 02 FB | 	rdlong	local01, objptr
13614     13 29 02 F6 | 	mov	local02, local01
13618     01 28 66 F0 | 	shl	local02, #1
1361c     13 29 02 F1 | 	add	local02, local01
13620     02 28 66 F0 | 	shl	local02, #2
13624     03 00 00 FF 
13628     04 E4 85 F1 | 	sub	objptr, ##1540
1362c     F2 28 02 F1 | 	add	local02, objptr
13630     08 4E 05 F1 | 	add	fp, #8
13634     A7 2A 02 FB | 	rdlong	local03, fp
13638     14 2B 62 FC | 	wrlong	local03, local02
1363c     03 00 00 FF 
13640     04 E4 05 F1 | 	add	objptr, ##1540
13644     F2 26 02 FB | 	rdlong	local01, objptr
13648     13 29 02 F6 | 	mov	local02, local01
1364c     01 28 66 F0 | 	shl	local02, #1
13650     13 29 02 F1 | 	add	local02, local01
13654     02 28 66 F0 | 	shl	local02, #2
13658     03 00 00 FF 
1365c     04 E4 85 F1 | 	sub	objptr, ##1540
13660     F2 28 02 F1 | 	add	local02, objptr
13664     08 28 06 F1 | 	add	local02, #8
13668     14 9D 68 FC | 	wrlong	#78, local02
1366c     03 00 00 FF 
13670     04 E4 05 F1 | 	add	objptr, ##1540
13674     F2 28 02 FB | 	rdlong	local02, objptr
13678     14 13 02 F6 | 	mov	arg01, local02
1367c     01 12 66 F0 | 	shl	arg01, #1
13680     14 13 02 F1 | 	add	arg01, local02
13684     02 12 66 F0 | 	shl	arg01, #2
13688     03 00 00 FF 
1368c     04 E4 85 F1 | 	sub	objptr, ##1540
13690     F2 12 02 F1 | 	add	arg01, objptr
13694     09 00 00 FF 
13698     44 E4 05 F1 | 	add	objptr, ##4676
1369c     F2 14 02 FB | 	rdlong	arg02, objptr
136a0     02 2A 06 F6 | 	mov	local03, #2
136a4     14 2B 02 F1 | 	add	local03, local02
136a8     0B 00 00 FF 
136ac     5C E4 85 F1 | 	sub	objptr, ##5724
136b0     F2 16 02 FB | 	rdlong	arg03, objptr
136b4     0B 2B 02 FD | 	qmul	local03, arg03
136b8     08 4E 85 F1 | 	sub	fp, #8
136bc     39 00 00 FF 
136c0     98 E5 85 F1 | 	sub	objptr, ##29592
136c4     18 2A 62 FD | 	getqx	local03
136c8     15 15 02 F1 | 	add	arg02, local03
136cc     70 2D B1 FD | 	call	#_psram_spin2_write
136d0     0B 00 00 FF 
136d4     CC E4 85 F1 | 	sub	objptr, ##5836
136d8     18 FD BF FD | 	call	#_do_fast_goto
136dc     0C 00 90 FD | 	jmp	#LR__1554
136e0                 | LR__1553
136e0     26 12 06 F6 | 	mov	arg01, #38
136e4     00 14 06 F6 | 	mov	arg02, #0
136e8     00 FF B0 FD | 	call	#_printerror
136ec                 | LR__1554
136ec     A7 F0 03 F6 | 	mov	ptra, fp
136f0     B2 00 A0 FD | 	call	#popregs_
136f4                 | _do_find_goto_ret
136f4     2D 00 64 FD | 	ret
136f8                 | 
136f8                 | ' 
136f8                 | ' '------- slow goto  
136f8                 | ' 
136f8                 | ' sub do_slow_goto
136f8                 | _do_slow_goto
136f8     02 4A 05 F6 | 	mov	COUNT_, #2
136fc     A8 00 A0 FD | 	call	#pushregs_
13700     30 F0 07 F1 | 	add	ptra, #48
13704     00 A0 BF FD | 	call	#_pop
13708     FF 26 02 F6 | 	mov	local01, result3
1370c     24 4E 05 F1 | 	add	fp, #36
13710     A7 FA 61 FC | 	wrlong	result1, fp
13714     04 4E 05 F1 | 	add	fp, #4
13718     A7 FC 61 FC | 	wrlong	result2, fp
1371c     04 4E 05 F1 | 	add	fp, #4
13720     A7 26 62 FC | 	wrlong	local01, fp
13724     08 4E 85 F1 | 	sub	fp, #8
13728     A7 12 02 F6 | 	mov	arg01, fp
1372c     24 4E 85 F1 | 	sub	fp, #36
13730     B8 A1 BF FD | 	call	#_converttoint
13734     A7 FA 61 FC | 	wrlong	result1, fp
13738     4A 00 00 FF 
1373c     88 E4 05 F1 | 	add	objptr, ##38024
13740     F2 28 02 FB | 	rdlong	local02, objptr
13744     4A 00 00 FF 
13748     88 E4 85 F1 | 	sub	objptr, ##38024
1374c     04 4E 05 F1 | 	add	fp, #4
13750     A7 28 62 FC | 	wrlong	local02, fp
13754     04 4E 85 F1 | 	sub	fp, #4
13758                 | ' 
13758                 | ' t1=pop() : gotoline=converttoint(t1)
13758                 | ' gotoptr=programstart
13758                 | ' do
13758                 | LR__1560
13758     0C 4E 05 F1 | 	add	fp, #12
1375c     A7 12 02 F6 | 	mov	arg01, fp
13760     08 4E 85 F1 | 	sub	fp, #8
13764     A7 14 02 FB | 	rdlong	arg02, fp
13768     04 4E 85 F1 | 	sub	fp, #4
1376c     18 16 06 F6 | 	mov	arg03, #24
13770     0B 00 00 FF 
13774     CC E4 05 F1 | 	add	objptr, ##5836
13778     28 2C B1 FD | 	call	#_psram_spin2_read1
1377c     0B 00 00 FF 
13780     CC E4 85 F1 | 	sub	objptr, ##5836
13784                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
13784                 | '   if gotoheader(0)<>$FFFFFFFF then
13784     0C 4E 05 F1 | 	add	fp, #12
13788     A7 28 02 FB | 	rdlong	local02, fp
1378c     0C 4E 85 F1 | 	sub	fp, #12
13790     FF FF 7F FF 
13794     FF 29 0E F2 | 	cmp	local02, ##-1 wz
13798     24 00 90 AD |  if_e	jmp	#LR__1561
1379c     04 4E 05 F1 | 	add	fp, #4
137a0     A7 28 02 FB | 	rdlong	local02, fp
137a4     04 4E 05 F1 | 	add	fp, #4
137a8     A7 28 62 FC | 	wrlong	local02, fp
137ac     18 4E 05 F1 | 	add	fp, #24
137b0     A7 28 02 FB | 	rdlong	local02, fp
137b4     1C 4E 85 F1 | 	sub	fp, #28
137b8     A7 28 62 FC | 	wrlong	local02, fp
137bc     04 4E 85 F1 | 	sub	fp, #4
137c0                 | LR__1561
137c0     20 4E 05 F1 | 	add	fp, #32
137c4     A7 28 02 FB | 	rdlong	local02, fp
137c8     20 4E 85 F1 | 	sub	fp, #32
137cc     FF FF 3F FF 
137d0     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
137d4     0C 4E 05 51 |  if_ne	add	fp, #12
137d8     A7 26 02 5B |  if_ne	rdlong	local01, fp
137dc     0C 4E 85 51 |  if_ne	sub	fp, #12
137e0     FF FF 7F 5F 
137e4     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
137e8     18 00 90 AD |  if_e	jmp	#LR__1562
137ec     0C 4E 05 F1 | 	add	fp, #12
137f0     A7 28 02 FB | 	rdlong	local02, fp
137f4     0C 4E 85 F1 | 	sub	fp, #12
137f8     A7 16 02 FB | 	rdlong	arg03, fp
137fc     0B 29 0A F2 | 	cmp	local02, arg03 wz
13800     54 FF 9F 5D |  if_ne	jmp	#LR__1560
13804                 | LR__1562
13804                 | ' if gotoheader(0)=gotoline then  
13804     0C 4E 05 F1 | 	add	fp, #12
13808     A7 28 02 FB | 	rdlong	local02, fp
1380c     0C 4E 85 F1 | 	sub	fp, #12
13810     A7 26 02 FB | 	rdlong	local01, fp
13814     13 29 0A F2 | 	cmp	local02, local01 wz
13818     60 00 90 5D |  if_ne	jmp	#LR__1563
1381c     08 4E 05 F1 | 	add	fp, #8
13820     A7 28 02 FB | 	rdlong	local02, fp
13824     08 4E 85 F1 | 	sub	fp, #8
13828     50 00 00 FF 
1382c     B8 E4 05 F1 | 	add	objptr, ##41144
13830     F2 28 62 FC | 	wrlong	local02, objptr
13834     06 00 00 FF 
13838     3C E4 85 F1 | 	sub	objptr, ##3132
1383c     F2 28 02 FB | 	rdlong	local02, objptr
13840     01 28 86 F1 | 	sub	local02, #1
13844     04 E4 05 F1 | 	add	objptr, #4
13848     F2 28 62 FC | 	wrlong	local02, objptr
1384c                 | '    runptr=oldgotoptr
1384c                 | '    lineptr_e=lineptr-1
1384c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
1384c     06 00 00 FF 
13850     84 E4 05 F1 | 	add	objptr, ##3204
13854     F2 28 02 FB | 	rdlong	local02, objptr
13858     50 00 00 FF 
1385c     04 E5 85 F1 | 	sub	objptr, ##41220
13860     FF FF 3F FF 
13864     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13868     50 00 00 AF 
1386c     04 E5 05 A1 |  if_e	add	objptr, ##41220
13870     F2 00 68 AC |  if_e	wrlong	#0, objptr
13874     50 00 00 AF 
13878     04 E5 85 A1 |  if_e	sub	objptr, ##41220
1387c                 | LR__1563
1387c     A7 F0 03 F6 | 	mov	ptra, fp
13880     B2 00 A0 FD | 	call	#popregs_
13884                 | _do_slow_goto_ret
13884     2D 00 64 FD | 	ret
13888                 | 
13888                 | ' 
13888                 | ' ' ----------------  hex$
13888                 | ' 
13888                 | ' sub do_hex
13888                 | _do_hex
13888     01 4A 05 F6 | 	mov	COUNT_, #1
1388c     A8 00 A0 FD | 	call	#pushregs_
13890     18 F0 07 F1 | 	add	ptra, #24
13894     4A 00 00 FF 
13898     80 E4 05 F1 | 	add	objptr, ##38016
1389c     F2 26 02 FB | 	rdlong	local01, objptr
138a0     13 17 02 F6 | 	mov	arg03, local01
138a4     01 16 66 F0 | 	shl	arg03, #1
138a8     13 17 02 F1 | 	add	arg03, local01
138ac     02 16 66 F0 | 	shl	arg03, #2
138b0     03 00 00 FF 
138b4     04 E4 85 F1 | 	sub	objptr, ##1540
138b8     F2 16 02 F1 | 	add	arg03, objptr
138bc     0B 17 02 FB | 	rdlong	arg03, arg03
138c0     0C 4E 05 F1 | 	add	fp, #12
138c4     A7 16 62 FC | 	wrlong	arg03, fp
138c8                 | ' 
138c8                 | ' numpar=compiledline(lineptr_e).result.uresult
138c8                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
138c8     0C 4E 85 F1 | 	sub	fp, #12
138cc     03 16 16 F2 | 	cmp	arg03, #3 wc
138d0     47 00 00 FF 
138d4     7C E4 85 F1 | 	sub	objptr, ##36476
138d8     0C 4E 05 C1 |  if_b	add	fp, #12
138dc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
138e0     0C 4E 85 C1 |  if_b	sub	fp, #12
138e4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1570
138e8     00 12 06 F6 | 	mov	arg01, #0
138ec     50 94 B1 FD | 	call	#__system___getiolock_0614
138f0     FD 12 02 F6 | 	mov	arg01, result1
138f4     A4 37 B1 FD | 	call	#__system___lockmem
138f8     BA 01 00 FF 
138fc     DF 15 06 F6 | 	mov	arg02, ##@LR__5962
13900     00 12 06 F6 | 	mov	arg01, #0
13904     00 16 06 F6 | 	mov	arg03, #0
13908     88 44 B1 FD | 	call	#__system___basic_print_string
1390c     00 12 06 F6 | 	mov	arg01, #0
13910     2C 94 B1 FD | 	call	#__system___getiolock_0614
13914     FD 00 68 FC | 	wrlong	#0, result1
13918     27 12 06 F6 | 	mov	arg01, #39
1391c     00 14 06 F6 | 	mov	arg02, #0
13920     C8 FC B0 FD | 	call	#_printerror
13924     B8 00 90 FD | 	jmp	#LR__1573
13928                 | LR__1570
13928                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
13928     0C 4E 05 F1 | 	add	fp, #12
1392c     A7 26 02 FB | 	rdlong	local01, fp
13930     0C 4E 85 F1 | 	sub	fp, #12
13934     02 26 0E F2 | 	cmp	local01, #2 wz
13938     38 00 90 5D |  if_ne	jmp	#LR__1571
1393c     C8 9D BF FD | 	call	#_pop
13940     FF 26 02 F6 | 	mov	local01, result3
13944     A7 FA 61 FC | 	wrlong	result1, fp
13948     04 4E 05 F1 | 	add	fp, #4
1394c     A7 FC 61 FC | 	wrlong	result2, fp
13950     04 4E 05 F1 | 	add	fp, #4
13954     A7 26 62 FC | 	wrlong	local01, fp
13958     08 4E 85 F1 | 	sub	fp, #8
1395c     A7 12 02 F6 | 	mov	arg01, fp
13960     88 9F BF FD | 	call	#_converttoint
13964     14 4E 05 F1 | 	add	fp, #20
13968     A7 FA 61 FC | 	wrlong	result1, fp
1396c     14 4E 85 F1 | 	sub	fp, #20
13970     0C 00 90 FD | 	jmp	#LR__1572
13974                 | LR__1571
13974     14 4E 05 F1 | 	add	fp, #20
13978     A7 10 68 FC | 	wrlong	#8, fp
1397c     14 4E 85 F1 | 	sub	fp, #20
13980                 | LR__1572
13980     84 9D BF FD | 	call	#_pop
13984     FF 26 02 F6 | 	mov	local01, result3
13988     A7 FA 61 FC | 	wrlong	result1, fp
1398c     04 4E 05 F1 | 	add	fp, #4
13990     A7 FC 61 FC | 	wrlong	result2, fp
13994     04 4E 05 F1 | 	add	fp, #4
13998     A7 26 62 FC | 	wrlong	local01, fp
1399c     08 4E 85 F1 | 	sub	fp, #8
139a0     A7 12 02 F6 | 	mov	arg01, fp
139a4     44 9F BF FD | 	call	#_converttoint
139a8     10 4E 05 F1 | 	add	fp, #16
139ac     A7 FA 61 FC | 	wrlong	result1, fp
139b0     FD 12 02 F6 | 	mov	arg01, result1
139b4     04 4E 05 F1 | 	add	fp, #4
139b8     A7 14 02 FB | 	rdlong	arg02, fp
139bc     14 4E 85 F1 | 	sub	fp, #20
139c0     10 16 06 F6 | 	mov	arg03, #16
139c4     A8 59 B1 FD | 	call	#__system__Number_S
139c8     A7 FA 61 FC | 	wrlong	result1, fp
139cc     08 4E 05 F1 | 	add	fp, #8
139d0     A7 3E 68 FC | 	wrlong	#31, fp
139d4     08 4E 85 F1 | 	sub	fp, #8
139d8     A7 12 02 F6 | 	mov	arg01, fp
139dc     C0 9D BF FD | 	call	#_push
139e0                 | LR__1573
139e0     A7 F0 03 F6 | 	mov	ptra, fp
139e4     B2 00 A0 FD | 	call	#popregs_
139e8                 | _do_hex_ret
139e8     2D 00 64 FD | 	ret
139ec                 | 
139ec                 | ' 
139ec                 | ' ' ----------------  if
139ec                 | ' 
139ec                 | ' sub do_if
139ec                 | _do_if
139ec     05 4A 05 F6 | 	mov	COUNT_, #5
139f0     A8 00 A0 FD | 	call	#pushregs_
139f4     10 9D BF FD | 	call	#_pop
139f8     FD 26 0A F6 | 	mov	local01, result1 wz
139fc     FE 28 02 F6 | 	mov	local02, result2
13a00     FF 2A 02 F6 | 	mov	local03, result3
13a04                 | ' t1=pop()
13a04                 | ' ' if uresult=0, jump over else
13a04                 | ' if t1.result.uresult = 0 then 
13a04     BC 00 90 5D |  if_ne	jmp	#LR__1582
13a08                 | '   for i=lineptr_e to lineptr-1
13a08     4A 00 00 FF 
13a0c     80 E4 05 F1 | 	add	objptr, ##38016
13a10     F2 2C 02 FB | 	rdlong	local04, objptr
13a14     04 E4 85 F1 | 	sub	objptr, #4
13a18     F2 2E 02 FB | 	rdlong	local05, objptr
13a1c     4A 00 00 FF 
13a20     7C E4 85 F1 | 	sub	objptr, ##38012
13a24                 | LR__1580
13a24     17 2D 52 F2 | 	cmps	local04, local05 wc
13a28     78 00 90 3D |  if_ae	jmp	#LR__1581
13a2c     16 FF 01 F6 | 	mov	result3, local04
13a30     01 FE 65 F0 | 	shl	result3, #1
13a34     16 FF 01 F1 | 	add	result3, local04
13a38     02 FE 65 F0 | 	shl	result3, #2
13a3c     47 00 00 FF 
13a40     7C E4 05 F1 | 	add	objptr, ##36476
13a44     F2 FE 01 F1 | 	add	result3, objptr
13a48     FF 26 02 FB | 	rdlong	local01, result3
13a4c     04 FE 05 F1 | 	add	result3, #4
13a50     FF FC 01 FB | 	rdlong	result2, result3
13a54     16 FF 01 F6 | 	mov	result3, local04
13a58     01 FE 65 F0 | 	shl	result3, #1
13a5c     16 FF 01 F1 | 	add	result3, local04
13a60     02 FE 65 F0 | 	shl	result3, #2
13a64     F2 FE 01 F1 | 	add	result3, objptr
13a68     08 FE 05 F1 | 	add	result3, #8
13a6c     FF FE 01 FB | 	rdlong	result3, result3
13a70     FE 28 02 F6 | 	mov	local02, result2
13a74     FF 2A 02 F6 | 	mov	local03, result3
13a78                 | '     t1=compiledline(i)
13a78                 | '     if t1.result_type=token_else then lineptr_e=i : return
13a78     5A 2A 0E F2 | 	cmp	local03, #90 wz
13a7c     47 00 00 FF 
13a80     7C E4 85 F1 | 	sub	objptr, ##36476
13a84     4A 00 00 AF 
13a88     80 E4 05 A1 |  if_e	add	objptr, ##38016
13a8c     F2 2C 62 AC |  if_e	wrlong	local04, objptr
13a90     4A 00 00 AF 
13a94     80 E4 85 A1 |  if_e	sub	objptr, ##38016
13a98     28 00 90 AD |  if_e	jmp	#LR__1583
13a9c     01 2C 06 F1 | 	add	local04, #1
13aa0     80 FF 9F FD | 	jmp	#LR__1580
13aa4                 | LR__1581
13aa4     4A 00 00 FF 
13aa8     7C E4 05 F1 | 	add	objptr, ##38012
13aac     F2 2E 02 FB | 	rdlong	local05, objptr
13ab0     01 2E 86 F1 | 	sub	local05, #1
13ab4     04 E4 05 F1 | 	add	objptr, #4
13ab8     F2 2E 62 FC | 	wrlong	local05, objptr
13abc     4A 00 00 FF 
13ac0     80 E4 85 F1 | 	sub	objptr, ##38016
13ac4                 | LR__1582
13ac4                 | LR__1583
13ac4     A7 F0 03 F6 | 	mov	ptra, fp
13ac8     B2 00 A0 FD | 	call	#popregs_
13acc                 | _do_if_ret
13acc     2D 00 64 FD | 	ret
13ad0                 | 
13ad0                 | ' 
13ad0                 | ' ' ----------------  inkey$
13ad0                 | ' 
13ad0                 | ' sub do_inkey
13ad0                 | _do_inkey
13ad0     02 4A 05 F6 | 	mov	COUNT_, #2
13ad4     A8 00 A0 FD | 	call	#pushregs_
13ad8     0C F0 07 F1 | 	add	ptra, #12
13adc     F0 2C B1 FD | 	call	#_usbnew_spin2_get_key
13ae0     45 00 00 FF 
13ae4     74 E4 05 F1 | 	add	objptr, ##35444
13ae8     F2 FA 61 FC | 	wrlong	result1, objptr
13aec                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
13aec     45 00 00 FF 
13af0     74 E4 85 F1 | 	sub	objptr, ##35444
13af4     00 FA 0D F2 | 	cmp	result1, #0 wz
13af8     94 00 90 AD |  if_e	jmp	#LR__1591
13afc     45 00 00 FF 
13b00     74 E4 05 F1 | 	add	objptr, ##35444
13b04     F2 1C 02 FB | 	rdlong	arg06, objptr
13b08     45 00 00 FF 
13b0c     74 E4 85 F1 | 	sub	objptr, ##35444
13b10     00 00 40 FF 
13b14     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13b18     45 00 00 CF 
13b1c     74 E4 05 C1 |  if_b	add	objptr, ##35444
13b20     F2 26 02 CB |  if_b	rdlong	local01, objptr
13b24     45 00 00 CF 
13b28     74 E4 85 C1 |  if_b	sub	objptr, ##35444
13b2c     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
13b30     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13b34     58 00 90 3D |  if_ae	jmp	#LR__1591
13b38                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
13b38     50 00 00 FF 
13b3c     3C E5 05 F1 | 	add	objptr, ##41276
13b40     F2 1C 02 FB | 	rdlong	arg06, objptr
13b44     50 00 00 FF 
13b48     3C E5 85 F1 | 	sub	objptr, ##41276
13b4c     01 1C 0E F2 | 	cmp	arg06, #1 wz
13b50     3C 00 90 5D |  if_ne	jmp	#LR__1590
13b54     52 00 00 FF 
13b58     A4 E4 05 F1 | 	add	objptr, ##42148
13b5c     F2 14 02 FB | 	rdlong	arg02, objptr
13b60     04 E4 85 F1 | 	sub	objptr, #4
13b64     F2 1A 02 FB | 	rdlong	arg05, objptr
13b68     07 12 06 F6 | 	mov	arg01, #7
13b6c     56 00 00 FF 
13b70     44 16 06 F6 | 	mov	arg03, ##44100
13b74     0C 18 C6 F9 | 	decod	arg04, #12
13b78     01 1C 66 F6 | 	neg	arg06, #1
13b7c     46 00 00 FF 
13b80     D4 E5 85 F1 | 	sub	objptr, ##36308
13b84     34 30 B1 FD | 	call	#_audio096_spin2_play
13b88     0B 00 00 FF 
13b8c     CC E4 85 F1 | 	sub	objptr, ##5836
13b90                 | LR__1590
13b90                 | LR__1591
13b90                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
13b90     45 00 00 FF 
13b94     74 E4 05 F1 | 	add	objptr, ##35444
13b98     F2 1C 0A FB | 	rdlong	arg06, objptr wz
13b9c     45 00 00 FF 
13ba0     74 E4 85 F1 | 	sub	objptr, ##35444
13ba4     D4 01 90 AD |  if_e	jmp	#LR__1600
13ba8     45 00 00 FF 
13bac     74 E4 05 F1 | 	add	objptr, ##35444
13bb0     F2 1C 02 FB | 	rdlong	arg06, objptr
13bb4     45 00 00 FF 
13bb8     74 E4 85 F1 | 	sub	objptr, ##35444
13bbc     00 00 40 FF 
13bc0     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13bc4     45 00 00 CF 
13bc8     74 E4 05 C1 |  if_b	add	objptr, ##35444
13bcc     F2 26 02 CB |  if_b	rdlong	local01, objptr
13bd0     45 00 00 CF 
13bd4     74 E4 85 C1 |  if_b	sub	objptr, ##35444
13bd8     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
13bdc     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13be0     98 01 90 3D |  if_ae	jmp	#LR__1600
13be4                 | '   if leds and 2 = 2 then 
13be4     52 00 00 FF 
13be8     E0 E4 05 F1 | 	add	objptr, ##42208
13bec     F2 26 0A FB | 	rdlong	local01, objptr wz
13bf0     52 00 00 FF 
13bf4     E0 E4 85 F1 | 	sub	objptr, ##42208
13bf8     58 01 90 AD |  if_e	jmp	#LR__1599
13bfc                 | '     if key>96 andalso key<123 then
13bfc     45 00 00 FF 
13c00     74 E4 05 F1 | 	add	objptr, ##35444
13c04     F2 26 02 FB | 	rdlong	local01, objptr
13c08     45 00 00 FF 
13c0c     74 E4 85 F1 | 	sub	objptr, ##35444
13c10     61 26 16 F2 | 	cmp	local01, #97 wc
13c14     3C 00 90 CD |  if_b	jmp	#LR__1592
13c18     45 00 00 FF 
13c1c     74 E4 05 F1 | 	add	objptr, ##35444
13c20     F2 26 02 FB | 	rdlong	local01, objptr
13c24     45 00 00 FF 
13c28     74 E4 85 F1 | 	sub	objptr, ##35444
13c2c     7B 26 16 F2 | 	cmp	local01, #123 wc
13c30     20 00 90 3D |  if_ae	jmp	#LR__1592
13c34     45 00 00 FF 
13c38     74 E4 05 F1 | 	add	objptr, ##35444
13c3c     F2 26 02 FB | 	rdlong	local01, objptr
13c40     20 26 86 F1 | 	sub	local01, #32
13c44     F2 26 62 FC | 	wrlong	local01, objptr
13c48     45 00 00 FF 
13c4c     74 E4 85 F1 | 	sub	objptr, ##35444
13c50     00 01 90 FD | 	jmp	#LR__1598
13c54                 | LR__1592
13c54     45 00 00 FF 
13c58     74 E4 05 F1 | 	add	objptr, ##35444
13c5c     F2 26 02 FB | 	rdlong	local01, objptr
13c60     45 00 00 FF 
13c64     74 E4 85 F1 | 	sub	objptr, ##35444
13c68     41 26 16 F2 | 	cmp	local01, #65 wc
13c6c     3C 00 90 CD |  if_b	jmp	#LR__1593
13c70     45 00 00 FF 
13c74     74 E4 05 F1 | 	add	objptr, ##35444
13c78     F2 26 02 FB | 	rdlong	local01, objptr
13c7c     45 00 00 FF 
13c80     74 E4 85 F1 | 	sub	objptr, ##35444
13c84     5B 26 16 F2 | 	cmp	local01, #91 wc
13c88     20 00 90 3D |  if_ae	jmp	#LR__1593
13c8c     45 00 00 FF 
13c90     74 E4 05 F1 | 	add	objptr, ##35444
13c94     F2 26 02 FB | 	rdlong	local01, objptr
13c98     20 26 06 F1 | 	add	local01, #32
13c9c     F2 26 62 FC | 	wrlong	local01, objptr
13ca0     45 00 00 FF 
13ca4     74 E4 85 F1 | 	sub	objptr, ##35444
13ca8     A8 00 90 FD | 	jmp	#LR__1597
13cac                 | LR__1593
13cac     45 00 00 FF 
13cb0     74 E4 05 F1 | 	add	objptr, ##35444
13cb4     F2 26 02 FB | 	rdlong	local01, objptr
13cb8     45 00 00 FF 
13cbc     74 E4 85 F1 | 	sub	objptr, ##35444
13cc0     17 26 16 F2 | 	cmp	local01, #23 wc
13cc4     3C 00 90 CD |  if_b	jmp	#LR__1594
13cc8     45 00 00 FF 
13ccc     74 E4 05 F1 | 	add	objptr, ##35444
13cd0     F2 26 02 FB | 	rdlong	local01, objptr
13cd4     45 00 00 FF 
13cd8     74 E4 85 F1 | 	sub	objptr, ##35444
13cdc     20 26 16 F2 | 	cmp	local01, #32 wc
13ce0     20 00 90 3D |  if_ae	jmp	#LR__1594
13ce4     45 00 00 FF 
13ce8     74 E4 05 F1 | 	add	objptr, ##35444
13cec     F2 26 02 FB | 	rdlong	local01, objptr
13cf0     09 26 86 F1 | 	sub	local01, #9
13cf4     F2 26 62 FC | 	wrlong	local01, objptr
13cf8     45 00 00 FF 
13cfc     74 E4 85 F1 | 	sub	objptr, ##35444
13d00     50 00 90 FD | 	jmp	#LR__1596
13d04                 | LR__1594
13d04     45 00 00 FF 
13d08     74 E4 05 F1 | 	add	objptr, ##35444
13d0c     F2 28 02 FB | 	rdlong	local02, objptr
13d10     45 00 00 FF 
13d14     74 E4 85 F1 | 	sub	objptr, ##35444
13d18     0E 28 16 F2 | 	cmp	local02, #14 wc
13d1c     34 00 90 CD |  if_b	jmp	#LR__1595
13d20     45 00 00 FF 
13d24     74 E4 05 F1 | 	add	objptr, ##35444
13d28     F2 26 02 FB | 	rdlong	local01, objptr
13d2c     45 00 00 FF 
13d30     74 E4 85 F1 | 	sub	objptr, ##35444
13d34     17 26 16 F2 | 	cmp	local01, #23 wc
13d38     52 00 00 CF 
13d3c     E4 E4 05 C1 |  if_b	add	objptr, ##42212
13d40     F2 28 02 CB |  if_b	rdlong	local02, objptr
13d44     27 28 06 C1 |  if_b	add	local02, #39
13d48     F2 28 62 CC |  if_b	wrlong	local02, objptr
13d4c     52 00 00 CF 
13d50     E4 E4 85 C1 |  if_b	sub	objptr, ##42212
13d54                 | LR__1595
13d54                 | LR__1596
13d54                 | LR__1597
13d54                 | LR__1598
13d54                 | LR__1599
13d54     45 00 00 FF 
13d58     74 E4 05 F1 | 	add	objptr, ##35444
13d5c     F2 12 02 FB | 	rdlong	arg01, objptr
13d60     45 00 00 FF 
13d64     74 E4 85 F1 | 	sub	objptr, ##35444
13d68     00 FC B0 FD | 	call	#_scantochar
13d6c     FD 12 02 F6 | 	mov	arg01, result1
13d70     6C 55 B1 FD | 	call	#__system__Chr_S
13d74     A7 FA 61 FC | 	wrlong	result1, fp
13d78     0C 00 90 FD | 	jmp	#LR__1601
13d7c                 | LR__1600
13d7c     BA 01 00 FF 
13d80     E6 29 06 F6 | 	mov	local02, ##@LR__5963
13d84     A7 28 62 FC | 	wrlong	local02, fp
13d88                 | LR__1601
13d88     08 4E 05 F1 | 	add	fp, #8
13d8c     A7 3E 68 FC | 	wrlong	#31, fp
13d90     08 4E 85 F1 | 	sub	fp, #8
13d94     A7 12 02 F6 | 	mov	arg01, fp
13d98     04 9A BF FD | 	call	#_push
13d9c     A7 F0 03 F6 | 	mov	ptra, fp
13da0     B2 00 A0 FD | 	call	#popregs_
13da4                 | _do_inkey_ret
13da4     2D 00 64 FD | 	ret
13da8                 | 
13da8                 | ' 
13da8                 | ' ' ----------------  ink
13da8                 | ' 
13da8                 | ' sub do_ink
13da8                 | _do_ink
13da8     00 4A 05 F6 | 	mov	COUNT_, #0
13dac     A8 00 A0 FD | 	call	#pushregs_
13db0     0C F0 07 F1 | 	add	ptra, #12
13db4     50 99 BF FD | 	call	#_pop
13db8     FF 14 02 F6 | 	mov	arg02, result3
13dbc     A7 FA 61 FC | 	wrlong	result1, fp
13dc0     04 4E 05 F1 | 	add	fp, #4
13dc4     A7 FC 61 FC | 	wrlong	result2, fp
13dc8     04 4E 05 F1 | 	add	fp, #4
13dcc     A7 14 62 FC | 	wrlong	arg02, fp
13dd0     08 4E 85 F1 | 	sub	fp, #8
13dd4     A7 12 02 F6 | 	mov	arg01, fp
13dd8     10 9B BF FD | 	call	#_converttoint
13ddc     37 00 00 FF 
13de0     3C E4 05 F1 | 	add	objptr, ##28220
13de4     F2 FA 61 FC | 	wrlong	result1, objptr
13de8     04 E4 85 F1 | 	sub	objptr, #4
13dec     F2 14 02 FB | 	rdlong	arg02, objptr
13df0                 | ' 
13df0                 | ' write_color:=ff
13df0     36 00 00 FF 
13df4     F7 E5 85 F1 | 	sub	objptr, ##28151
13df8     F2 FA 61 FC | 	wrlong	result1, objptr
13dfc                 | ' write_background:=bb
13dfc     04 E4 05 F1 | 	add	objptr, #4
13e00     F2 14 62 FC | 	wrlong	arg02, objptr
13e04     36 00 00 FF 
13e08     F7 E5 05 F1 | 	add	objptr, ##28151
13e0c     F2 12 02 FB | 	rdlong	arg01, objptr
13e10     37 00 00 FF 
13e14     3C E4 85 F1 | 	sub	objptr, ##28220
13e18     D4 03 B1 FD | 	call	#_hg010b_spin2_setcursorcolor
13e1c     A7 F0 03 F6 | 	mov	ptra, fp
13e20     B2 00 A0 FD | 	call	#popregs_
13e24                 | _do_ink_ret
13e24     2D 00 64 FD | 	ret
13e28                 | 
13e28                 | ' 
13e28                 | ' ' ----------------  int
13e28                 | ' 
13e28                 | ' sub do_int
13e28                 | _do_int
13e28     02 4A 05 F6 | 	mov	COUNT_, #2
13e2c     A8 00 A0 FD | 	call	#pushregs_
13e30     10 F0 07 F1 | 	add	ptra, #16
13e34     D0 98 BF FD | 	call	#_pop
13e38     FE 26 02 F6 | 	mov	local01, result2
13e3c     FF 28 02 F6 | 	mov	local02, result3
13e40     A7 FA 61 FC | 	wrlong	result1, fp
13e44     04 4E 05 F1 | 	add	fp, #4
13e48     A7 26 62 FC | 	wrlong	local01, fp
13e4c     04 4E 05 F1 | 	add	fp, #4
13e50     A7 28 62 FC | 	wrlong	local02, fp
13e54                 | ' 
13e54                 | ' t1=pop()
13e54                 | ' select case t1.result_type
13e54     08 4E 85 F1 | 	sub	fp, #8
13e58     1E 28 0E F2 | 	cmp	local02, #30 wz
13e5c     14 00 90 AD |  if_e	jmp	#LR__1610
13e60     1F 28 0E F2 | 	cmp	local02, #31 wz
13e64     20 00 90 AD |  if_e	jmp	#LR__1611
13e68     2B 28 0E F2 | 	cmp	local02, #43 wz
13e6c     34 00 90 AD |  if_e	jmp	#LR__1612
13e70     50 00 90 FD | 	jmp	#LR__1613
13e74                 | LR__1610
13e74     A7 12 02 FB | 	rdlong	arg01, fp
13e78     00 14 06 F6 | 	mov	arg02, #0
13e7c     60 65 B1 FD | 	call	#__system___float_tointeger
13e80     A7 FA 61 FC | 	wrlong	result1, fp
13e84     3C 00 90 FD | 	jmp	#LR__1613
13e88                 | LR__1611
13e88     A7 12 02 FB | 	rdlong	arg01, fp
13e8c     94 68 B1 FD | 	call	#__system____builtin_atof
13e90     FD 12 02 F6 | 	mov	arg01, result1
13e94     00 14 06 F6 | 	mov	arg02, #0
13e98     44 65 B1 FD | 	call	#__system___float_tointeger
13e9c     A7 FA 61 FC | 	wrlong	result1, fp
13ea0     20 00 90 FD | 	jmp	#LR__1613
13ea4                 | LR__1612
13ea4     A7 12 02 FB | 	rdlong	arg01, fp
13ea8     D4 99 BF FD | 	call	#_convertstring
13eac     FD 12 02 F6 | 	mov	arg01, result1
13eb0     70 68 B1 FD | 	call	#__system____builtin_atof
13eb4     FD 12 02 F6 | 	mov	arg01, result1
13eb8     00 14 06 F6 | 	mov	arg02, #0
13ebc     20 65 B1 FD | 	call	#__system___float_tointeger
13ec0     A7 FA 61 FC | 	wrlong	result1, fp
13ec4                 | LR__1613
13ec4     08 4E 05 F1 | 	add	fp, #8
13ec8     A7 38 68 FC | 	wrlong	#28, fp
13ecc     08 4E 85 F1 | 	sub	fp, #8
13ed0     A7 12 02 F6 | 	mov	arg01, fp
13ed4     C8 98 BF FD | 	call	#_push
13ed8     A7 F0 03 F6 | 	mov	ptra, fp
13edc     B2 00 A0 FD | 	call	#popregs_
13ee0                 | _do_int_ret
13ee0     2D 00 64 FD | 	ret
13ee4                 | 
13ee4                 | ' 
13ee4                 | ' ' ----------------  input
13ee4                 | ' 
13ee4                 | ' sub do_input
13ee4                 | _do_input
13ee4     11 4A 05 F6 | 	mov	COUNT_, #17
13ee8     A8 00 A0 FD | 	call	#pushregs_
13eec     50 F1 07 F1 | 	add	ptra, #336
13ef0     4A 00 00 FF 
13ef4     80 E4 05 F1 | 	add	objptr, ##38016
13ef8     F2 FE 01 FB | 	rdlong	result3, objptr
13efc     FF FC 01 F6 | 	mov	result2, result3
13f00     01 FC 65 F0 | 	shl	result2, #1
13f04     FF FC 01 F1 | 	add	result2, result3
13f08     02 FC 65 F0 | 	shl	result2, #2
13f0c     03 00 00 FF 
13f10     04 E4 85 F1 | 	sub	objptr, ##1540
13f14     F2 FC 01 F1 | 	add	result2, objptr
13f18     FE FC 01 FB | 	rdlong	result2, result2
13f1c     08 4E 05 F1 | 	add	fp, #8
13f20     A7 FC 61 FC | 	wrlong	result2, fp
13f24                 | ' 
13f24                 | ' numpar=compiledline(lineptr_e).result.uresult
13f24                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
13f24     08 4E 85 F1 | 	sub	fp, #8
13f28     01 FC 15 F2 | 	cmp	result2, #1 wc
13f2c     47 00 00 FF 
13f30     7C E4 85 F1 | 	sub	objptr, ##36476
13f34     14 00 90 CD |  if_b	jmp	#LR__1620
13f38     08 4E 05 F1 | 	add	fp, #8
13f3c     A7 FC 01 FB | 	rdlong	result2, fp
13f40     08 4E 85 F1 | 	sub	fp, #8
13f44     41 FC 15 F2 | 	cmp	result2, #65 wc
13f48     50 00 90 CD |  if_b	jmp	#LR__1621
13f4c                 | LR__1620
13f4c     00 12 06 F6 | 	mov	arg01, #0
13f50     EC 8D B1 FD | 	call	#__system___getiolock_0614
13f54     FD 12 02 F6 | 	mov	arg01, result1
13f58     40 31 B1 FD | 	call	#__system___lockmem
13f5c     BA 01 00 FF 
13f60     E7 15 06 F6 | 	mov	arg02, ##@LR__5964
13f64     00 12 06 F6 | 	mov	arg01, #0
13f68     00 16 06 F6 | 	mov	arg03, #0
13f6c     24 3E B1 FD | 	call	#__system___basic_print_string
13f70     00 12 06 F6 | 	mov	arg01, #0
13f74     C8 8D B1 FD | 	call	#__system___getiolock_0614
13f78     FD 00 68 FC | 	wrlong	#0, result1
13f7c     50 00 00 FF 
13f80     F0 E4 05 F1 | 	add	objptr, ##41200
13f84     F2 14 02 FB | 	rdlong	arg02, objptr
13f88     50 00 00 FF 
13f8c     F0 E4 85 F1 | 	sub	objptr, ##41200
13f90     27 12 06 F6 | 	mov	arg01, #39
13f94     54 F6 B0 FD | 	call	#_printerror
13f98     44 0B 90 FD | 	jmp	#LR__1670
13f9c                 | LR__1621
13f9c     08 4E 05 F1 | 	add	fp, #8
13fa0     A7 FC 01 FB | 	rdlong	result2, fp
13fa4     01 FC 85 F1 | 	sub	result2, #1
13fa8     28 4F 05 F1 | 	add	fp, #296
13fac     A7 FC 61 FC | 	wrlong	result2, fp
13fb0     3C E4 05 F1 | 	add	objptr, #60
13fb4     F2 FC E1 FA | 	rdword	result2, objptr
13fb8     FE FC 51 F6 | 	abs	result2, result2 wc
13fbc     01 FC 45 F0 | 	shr	result2, #1
13fc0     FE FC 81 F6 | 	negc	result2, result2
13fc4     0C 4E 05 F1 | 	add	fp, #12
13fc8     A7 FC 61 FC | 	wrlong	result2, fp
13fcc     02 E4 05 F1 | 	add	objptr, #2
13fd0     F2 26 C2 FA | 	rdbyte	local01, objptr
13fd4     3E E4 85 F1 | 	sub	objptr, #62
13fd8     04 4E 05 F1 | 	add	fp, #4
13fdc     A7 26 62 FC | 	wrlong	local01, fp
13fe0     40 4F 85 F1 | 	sub	fp, #320
13fe4                 | ' i=numpar-1
13fe4                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13fe4                 | ' do
13fe4                 | LR__1622
13fe4     1C C8 BE FD | 	call	#_edit
13fe8     A7 FA 61 FC | 	wrlong	result1, fp
13fec                 | ' 
13fec                 | '   line$=edit()
13fec                 | ' 
13fec                 | '   if v.cursor_y=cpy+1 then
13fec     3E E4 05 F1 | 	add	objptr, #62
13ff0     F2 26 C2 FA | 	rdbyte	local01, objptr
13ff4     3E E4 85 F1 | 	sub	objptr, #62
13ff8     40 4F 05 F1 | 	add	fp, #320
13ffc     A7 16 02 FB | 	rdlong	arg03, fp
14000     40 4F 85 F1 | 	sub	fp, #320
14004     01 16 06 F1 | 	add	arg03, #1
14008     0B 27 0A F2 | 	cmp	local01, arg03 wz
1400c     6C 00 90 5D |  if_ne	jmp	#LR__1625
14010     A7 26 02 FB | 	rdlong	local01, fp
14014     13 13 02 F6 | 	mov	arg01, local01
14018     09 29 02 F6 | 	mov	local02, arg01
1401c     97 06 48 FB | 	callpa	#(@LR__1624-@LR__1623)>>2,fcache_load_ptr_
14020                 | LR__1623
14020     14 FB C9 FA | 	rdbyte	result1, local02 wz
14024     01 28 06 51 |  if_ne	add	local02, #1
14028     F4 FF 9F 5D |  if_ne	jmp	#LR__1623
1402c                 | LR__1624
1402c     09 29 82 F1 | 	sub	local02, arg01
14030     14 15 02 F6 | 	mov	arg02, local02
14034     3C 4F 05 F1 | 	add	fp, #316
14038     A7 16 02 FB | 	rdlong	arg03, fp
1403c     3C 4F 85 F1 | 	sub	fp, #316
14040     0B 15 82 F1 | 	sub	arg02, arg03
14044     37 00 00 FF 
14048     34 E4 05 F1 | 	add	objptr, ##28212
1404c     F2 16 02 FB | 	rdlong	arg03, objptr
14050     37 00 00 FF 
14054     34 E4 85 F1 | 	sub	objptr, ##28212
14058     0B 15 02 F1 | 	add	arg02, arg03
1405c     13 13 02 F6 | 	mov	arg01, local01
14060     40 51 B1 FD | 	call	#__system__Right_S
14064     FD 12 02 F6 | 	mov	arg01, result1
14068     40 55 B1 FD | 	call	#__system__RTrim_S
1406c     FD 12 02 F6 | 	mov	arg01, result1
14070     78 54 B1 FD | 	call	#__system__LTrim_S
14074     A7 FA 61 FC | 	wrlong	result1, fp
14078     14 00 90 FD | 	jmp	#LR__1626
1407c                 | LR__1625
1407c     A7 12 02 FB | 	rdlong	arg01, fp
14080     28 55 B1 FD | 	call	#__system__RTrim_S
14084     FD 12 02 F6 | 	mov	arg01, result1
14088     60 54 B1 FD | 	call	#__system__LTrim_S
1408c     A7 FA 61 FC | 	wrlong	result1, fp
14090                 | LR__1626
14090                 | '   do
14090                 | LR__1627
14090     A7 14 02 FB | 	rdlong	arg02, fp
14094     BA 01 00 FF 
14098     F2 17 06 F6 | 	mov	arg03, ##@LR__5965
1409c     01 12 06 F6 | 	mov	arg01, #1
140a0     C0 55 B1 FD | 	call	#__system__Instr
140a4     0C 4E 05 F1 | 	add	fp, #12
140a8     A7 FA 61 FC | 	wrlong	result1, fp
140ac                 | '    comma=instr(1,line$,",")  
140ac                 | '    if comma>0  then 
140ac     0C 4E 85 F1 | 	sub	fp, #12
140b0     01 FA 15 F2 | 	cmp	result1, #1 wc
140b4     68 00 90 CD |  if_b	jmp	#LR__1630
140b8     A7 12 02 FB | 	rdlong	arg01, fp
140bc     0C 4E 05 F1 | 	add	fp, #12
140c0     A7 14 02 FB | 	rdlong	arg02, fp
140c4     0C 4E 85 F1 | 	sub	fp, #12
140c8     01 14 86 F1 | 	sub	arg02, #1
140cc     4C 50 B1 FD | 	call	#__system__Left_S
140d0     04 4E 05 F1 | 	add	fp, #4
140d4     A7 FA 61 FC | 	wrlong	result1, fp
140d8     04 4E 85 F1 | 	sub	fp, #4
140dc     A7 26 02 FB | 	rdlong	local01, fp
140e0     13 13 02 F6 | 	mov	arg01, local01
140e4     09 29 02 F6 | 	mov	local02, arg01
140e8     97 06 48 FB | 	callpa	#(@LR__1629-@LR__1628)>>2,fcache_load_ptr_
140ec                 | LR__1628
140ec     14 FB C9 FA | 	rdbyte	result1, local02 wz
140f0     01 28 06 51 |  if_ne	add	local02, #1
140f4     F4 FF 9F 5D |  if_ne	jmp	#LR__1628
140f8                 | LR__1629
140f8     09 29 82 F1 | 	sub	local02, arg01
140fc     14 15 02 F6 | 	mov	arg02, local02
14100     0C 4E 05 F1 | 	add	fp, #12
14104     A7 16 02 FB | 	rdlong	arg03, fp
14108     0C 4E 85 F1 | 	sub	fp, #12
1410c     0B 15 82 F1 | 	sub	arg02, arg03
14110     13 13 02 F6 | 	mov	arg01, local01
14114     8C 50 B1 FD | 	call	#__system__Right_S
14118     A7 FA 61 FC | 	wrlong	result1, fp
1411c     28 00 90 FD | 	jmp	#LR__1631
14120                 | LR__1630
14120     A7 12 02 FB | 	rdlong	arg01, fp
14124     84 54 B1 FD | 	call	#__system__RTrim_S
14128     FD 12 02 F6 | 	mov	arg01, result1
1412c     BC 53 B1 FD | 	call	#__system__LTrim_S
14130     04 4E 05 F1 | 	add	fp, #4
14134     A7 FA 61 FC | 	wrlong	result1, fp
14138     04 4E 85 F1 | 	sub	fp, #4
1413c     BA 01 00 FF 
14140     F4 27 06 F6 | 	mov	local01, ##@LR__5966
14144     A7 26 62 FC | 	wrlong	local01, fp
14148                 | LR__1631
14148     30 4F 05 F1 | 	add	fp, #304
1414c     A7 26 02 FB | 	rdlong	local01, fp
14150     02 26 66 F0 | 	shl	local01, #2
14154     04 4F 85 F1 | 	sub	fp, #260
14158     A7 26 02 F1 | 	add	local01, fp
1415c     28 4E 85 F1 | 	sub	fp, #40
14160     A7 FA 01 FB | 	rdlong	result1, fp
14164     13 FB 61 FC | 	wrlong	result1, local01
14168     2C 4F 05 F1 | 	add	fp, #300
1416c     A7 26 02 FB | 	rdlong	local01, fp
14170     01 26 86 F1 | 	sub	local01, #1
14174     A7 26 62 FC | 	wrlong	local01, fp
14178     30 4F 85 F1 | 	sub	fp, #304
1417c     00 26 56 F2 | 	cmps	local01, #0 wc
14180     18 00 90 CD |  if_b	jmp	#LR__1632
14184     A7 12 02 FB | 	rdlong	arg01, fp
14188     BA 01 00 FF 
1418c     F5 15 06 F6 | 	mov	arg02, ##@LR__5967
14190     30 2F B1 FD | 	call	#__system___string_cmp
14194     00 FA 0D F2 | 	cmp	result1, #0 wz
14198     F4 FE 9F 5D |  if_ne	jmp	#LR__1627
1419c                 | LR__1632
1419c     30 4F 05 F1 | 	add	fp, #304
141a0     A7 26 02 FB | 	rdlong	local01, fp
141a4     30 4F 85 F1 | 	sub	fp, #304
141a8     00 26 56 F2 | 	cmps	local01, #0 wc
141ac     34 FE 9F 3D |  if_ae	jmp	#LR__1622
141b0                 | ' 
141b0                 | ' for i=0 to numpar-1
141b0     30 4F 05 F1 | 	add	fp, #304
141b4     A7 00 68 FC | 	wrlong	#0, fp
141b8     28 4F 85 F1 | 	sub	fp, #296
141bc     A7 2A 02 FB | 	rdlong	local03, fp
141c0     08 4E 85 F1 | 	sub	fp, #8
141c4                 | LR__1633
141c4     30 4F 05 F1 | 	add	fp, #304
141c8     A7 2C 02 FB | 	rdlong	local04, fp
141cc     30 4F 85 F1 | 	sub	fp, #304
141d0     16 27 02 F6 | 	mov	local01, local04
141d4     15 27 52 F2 | 	cmps	local01, local03 wc
141d8     04 09 90 3D |  if_ae	jmp	#LR__1669
141dc                 | ' 
141dc                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
141dc     30 4F 05 F1 | 	add	fp, #304
141e0     A7 16 02 FB | 	rdlong	arg03, fp
141e4     02 16 66 F0 | 	shl	arg03, #2
141e8     04 4F 85 F1 | 	sub	fp, #260
141ec     A7 16 02 F1 | 	add	arg03, fp
141f0     0B 13 02 FB | 	rdlong	arg01, arg03
141f4     2C 4E 85 F1 | 	sub	fp, #44
141f8     74 27 BF FD | 	call	#_isnum
141fc     FD 2E 02 F6 | 	mov	local05, result1
14200     30 4F 05 F1 | 	add	fp, #304
14204     A7 16 02 FB | 	rdlong	arg03, fp
14208     02 16 66 F0 | 	shl	arg03, #2
1420c     04 4F 85 F1 | 	sub	fp, #260
14210     A7 30 02 F6 | 	mov	local06, fp
14214     A7 16 02 F1 | 	add	arg03, fp
14218     0B 13 02 FB | 	rdlong	arg01, arg03
1421c     2C 4E 85 F1 | 	sub	fp, #44
14220     38 2B BF FD | 	call	#_isint
14224     FD 2E 2A F5 | 	andn	local05, result1 wz
14228     52 00 00 5F 
1422c     10 E5 05 51 |  if_ne	add	objptr, ##42256
14230     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
14234     52 00 00 5F 
14238     10 E5 85 51 |  if_ne	sub	objptr, ##42256
1423c                 | '   if isint(args(i)) then r=result_int 
1423c     30 4F 05 F1 | 	add	fp, #304
14240     A7 2E 02 FB | 	rdlong	local05, fp
14244     02 2E 66 F0 | 	shl	local05, #2
14248     04 4F 85 F1 | 	sub	fp, #260
1424c     A7 2E 02 F1 | 	add	local05, fp
14250     17 13 02 FB | 	rdlong	arg01, local05
14254     2C 4E 85 F1 | 	sub	fp, #44
14258     00 2B BF FD | 	call	#_isint
1425c     00 FA 0D F2 | 	cmp	result1, #0 wz
14260     52 00 00 5F 
14264     10 E5 05 51 |  if_ne	add	objptr, ##42256
14268     F2 38 68 5C |  if_ne	wrlong	#28, objptr
1426c     52 00 00 5F 
14270     10 E5 85 51 |  if_ne	sub	objptr, ##42256
14274                 | '   if isdec(args(i)) then r=result_uint 
14274     30 4F 05 F1 | 	add	fp, #304
14278     A7 2E 02 FB | 	rdlong	local05, fp
1427c     02 2E 66 F0 | 	shl	local05, #2
14280     04 4F 85 F1 | 	sub	fp, #260
14284     A7 2E 02 F1 | 	add	local05, fp
14288     17 13 02 FB | 	rdlong	arg01, local05
1428c     2C 4E 85 F1 | 	sub	fp, #44
14290     6C 2D BF FD | 	call	#_isdec
14294     00 FA 0D F2 | 	cmp	result1, #0 wz
14298     52 00 00 5F 
1429c     10 E5 05 51 |  if_ne	add	objptr, ##42256
142a0     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
142a4     52 00 00 5F 
142a8     10 E5 85 51 |  if_ne	sub	objptr, ##42256
142ac                 | '   if not isnum(args(i)) then 
142ac     30 4F 05 F1 | 	add	fp, #304
142b0     A7 32 02 FB | 	rdlong	local07, fp
142b4     19 35 02 F6 | 	mov	local08, local07
142b8     02 34 66 F0 | 	shl	local08, #2
142bc     04 4F 85 F1 | 	sub	fp, #260
142c0     A7 36 02 F6 | 	mov	local09, fp
142c4     A7 34 02 F1 | 	add	local08, fp
142c8     1A 13 02 FB | 	rdlong	arg01, local08
142cc     2C 4E 85 F1 | 	sub	fp, #44
142d0     9C 26 BF FD | 	call	#_isnum
142d4     FD 2E 22 F6 | 	not	local05, result1
142d8     00 2E 0E F2 | 	cmp	local05, #0 wz
142dc     44 01 90 AD |  if_e	jmp	#LR__1638
142e0     52 00 00 FF 
142e4     10 E5 05 F1 | 	add	objptr, ##42256
142e8     F2 56 68 FC | 	wrlong	#43, objptr
142ec     52 00 00 FF 
142f0     10 E5 85 F1 | 	sub	objptr, ##42256
142f4     04 4E 05 F1 | 	add	fp, #4
142f8     A7 12 02 FB | 	rdlong	arg01, fp
142fc     04 4E 85 F1 | 	sub	fp, #4
14300     09 29 02 F6 | 	mov	local02, arg01
14304     97 06 48 FB | 	callpa	#(@LR__1635-@LR__1634)>>2,fcache_load_ptr_
14308                 | LR__1634
14308     14 FB C9 FA | 	rdbyte	result1, local02 wz
1430c     01 28 06 51 |  if_ne	add	local02, #1
14310     F4 FF 9F 5D |  if_ne	jmp	#LR__1634
14314                 | LR__1635
14314     09 29 82 F1 | 	sub	local02, arg01
14318     14 33 02 F6 | 	mov	local07, local02
1431c     38 4F 05 F1 | 	add	fp, #312
14320     A7 32 62 FC | 	wrlong	local07, fp
14324     52 00 00 FF 
14328     98 E4 05 F1 | 	add	objptr, ##42136
1432c     F2 12 02 FB | 	rdlong	arg01, objptr
14330     19 13 82 F1 | 	sub	arg01, local07
14334     04 12 86 F1 | 	sub	arg01, #4
14338     03 12 26 F5 | 	andn	arg01, #3
1433c     F2 12 62 FC | 	wrlong	arg01, objptr
14340     52 00 00 FF 
14344     98 E4 85 F1 | 	sub	objptr, ##42136
14348     A7 14 02 FB | 	rdlong	arg02, fp
1434c     38 4F 85 F1 | 	sub	fp, #312
14350     38 F4 B0 FD | 	call	#_pslpoke
14354                 | '     pslpoke memtop,l
14354                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
14354     34 4F 05 F1 | 	add	fp, #308
14358     A7 02 68 FC | 	wrlong	#1, fp
1435c     04 4E 05 F1 | 	add	fp, #4
14360     A7 38 02 FB | 	rdlong	local10, fp
14364     38 4F 85 F1 | 	sub	fp, #312
14368     01 38 06 F1 | 	add	local10, #1
1436c                 | LR__1636
1436c     34 4F 05 F1 | 	add	fp, #308
14370     A7 2E 02 FB | 	rdlong	local05, fp
14374     34 4F 85 F1 | 	sub	fp, #308
14378     1C 2F 52 F2 | 	cmps	local05, local10 wc
1437c     84 00 90 3D |  if_ae	jmp	#LR__1637
14380     52 00 00 FF 
14384     98 E4 05 F1 | 	add	objptr, ##42136
14388     F2 32 02 FB | 	rdlong	local07, objptr
1438c     52 00 00 FF 
14390     98 E4 85 F1 | 	sub	objptr, ##42136
14394     03 32 06 F1 | 	add	local07, #3
14398     34 4F 05 F1 | 	add	fp, #308
1439c     A7 3A 02 FB | 	rdlong	local11, fp
143a0     1D 33 02 F1 | 	add	local07, local11
143a4     04 4E 85 F1 | 	sub	fp, #4
143a8     A7 3C 02 FB | 	rdlong	local12, fp
143ac     02 3C 66 F0 | 	shl	local12, #2
143b0     04 4F 85 F1 | 	sub	fp, #260
143b4     A7 3E 02 F6 | 	mov	local13, fp
143b8     A7 3C 02 F1 | 	add	local12, fp
143bc     1E 13 02 FB | 	rdlong	arg01, local12
143c0     2C 4E 85 F1 | 	sub	fp, #44
143c4     01 40 06 F6 | 	mov	local14, #1
143c8     1D 15 02 F6 | 	mov	arg02, local11
143cc     01 16 06 F6 | 	mov	arg03, #1
143d0     60 4E B1 FD | 	call	#__system__Mid_S
143d4     FD 14 C2 FA | 	rdbyte	arg02, result1
143d8     19 13 02 F6 | 	mov	arg01, local07
143dc     3C F4 B0 FD | 	call	#_pspoke
143e0     34 4F 05 F1 | 	add	fp, #308
143e4     A7 34 02 FB | 	rdlong	local08, fp
143e8     1A 33 02 F6 | 	mov	local07, local08
143ec     1A 31 02 F6 | 	mov	local06, local08
143f0     18 37 02 F6 | 	mov	local09, local06
143f4     01 36 06 F1 | 	add	local09, #1
143f8     A7 36 62 FC | 	wrlong	local09, fp
143fc     34 4F 85 F1 | 	sub	fp, #308
14400     68 FF 9F FD | 	jmp	#LR__1636
14404                 | LR__1637
14404     52 00 00 FF 
14408     98 E4 05 F1 | 	add	objptr, ##42136
1440c     F2 2E 02 FB | 	rdlong	local05, objptr
14410     52 00 00 FF 
14414     98 E4 85 F1 | 	sub	objptr, ##42136
14418     10 4E 05 F1 | 	add	fp, #16
1441c     A7 2E 62 FC | 	wrlong	local05, fp
14420     10 4E 85 F1 | 	sub	fp, #16
14424                 | LR__1638
14424     E0 92 BF FD | 	call	#_pop
14428     FE 2E 02 F6 | 	mov	local05, result2
1442c     FF 42 02 F6 | 	mov	local15, result3
14430     1C 4E 05 F1 | 	add	fp, #28
14434     A7 FA 61 FC | 	wrlong	result1, fp
14438     04 4E 05 F1 | 	add	fp, #4
1443c     A7 2E 62 FC | 	wrlong	local05, fp
14440     04 4E 05 F1 | 	add	fp, #4
14444     A7 42 62 FC | 	wrlong	local15, fp
14448     04 4E 85 F1 | 	sub	fp, #4
1444c     A7 44 02 FB | 	rdlong	local16, fp
14450     0C 4E 85 F1 | 	sub	fp, #12
14454     A7 44 62 FC | 	wrlong	local16, fp
14458                 | '   t1=pop() : vartype=t1.result.twowords(1)
14458                 | '   select case vartype
14458     14 4E 85 F1 | 	sub	fp, #20
1445c     22 47 0A F6 | 	mov	local17, local16 wz
14460     64 00 90 AD |  if_e	jmp	#LR__1639
14464     00 47 0E F2 | 	cmp	local17, #256 wz
14468     6C 00 90 AD |  if_e	jmp	#LR__1640
1446c     01 47 0E F2 | 	cmp	local17, #257 wz
14470     74 00 90 AD |  if_e	jmp	#LR__1641
14474     02 47 0E F2 | 	cmp	local17, #258 wz
14478     7C 00 90 AD |  if_e	jmp	#LR__1642
1447c     03 47 0E F2 | 	cmp	local17, #259 wz
14480     84 00 90 AD |  if_e	jmp	#LR__1643
14484     04 47 0E F2 | 	cmp	local17, #260 wz
14488     8C 00 90 AD |  if_e	jmp	#LR__1644
1448c     05 47 0E F2 | 	cmp	local17, #261 wz
14490     94 00 90 AD |  if_e	jmp	#LR__1645
14494     06 47 0E F2 | 	cmp	local17, #262 wz
14498     9C 00 90 AD |  if_e	jmp	#LR__1646
1449c     07 47 0E F2 | 	cmp	local17, #263 wz
144a0     A4 00 90 AD |  if_e	jmp	#LR__1647
144a4     08 47 0E F2 | 	cmp	local17, #264 wz
144a8     AC 00 90 AD |  if_e	jmp	#LR__1648
144ac     09 47 0E F2 | 	cmp	local17, #265 wz
144b0     B4 00 90 AD |  if_e	jmp	#LR__1649
144b4     0A 47 0E F2 | 	cmp	local17, #266 wz
144b8     BC 00 90 AD |  if_e	jmp	#LR__1650
144bc     0B 47 0E F2 | 	cmp	local17, #267 wz
144c0     C4 00 90 AD |  if_e	jmp	#LR__1651
144c4     D0 00 90 FD | 	jmp	#LR__1652
144c8                 | LR__1639
144c8     18 4E 05 F1 | 	add	fp, #24
144cc     A7 18 68 FC | 	wrlong	#12, fp
144d0     18 4E 85 F1 | 	sub	fp, #24
144d4     CC 00 90 FD | 	jmp	#LR__1653
144d8                 | LR__1640
144d8     18 4E 05 F1 | 	add	fp, #24
144dc     A7 18 68 FC | 	wrlong	#12, fp
144e0     18 4E 85 F1 | 	sub	fp, #24
144e4     BC 00 90 FD | 	jmp	#LR__1653
144e8                 | LR__1641
144e8     18 4E 05 F1 | 	add	fp, #24
144ec     A7 02 68 FC | 	wrlong	#1, fp
144f0     18 4E 85 F1 | 	sub	fp, #24
144f4     AC 00 90 FD | 	jmp	#LR__1653
144f8                 | LR__1642
144f8     18 4E 05 F1 | 	add	fp, #24
144fc     A7 02 68 FC | 	wrlong	#1, fp
14500     18 4E 85 F1 | 	sub	fp, #24
14504     9C 00 90 FD | 	jmp	#LR__1653
14508                 | LR__1643
14508     18 4E 05 F1 | 	add	fp, #24
1450c     A7 04 68 FC | 	wrlong	#2, fp
14510     18 4E 85 F1 | 	sub	fp, #24
14514     8C 00 90 FD | 	jmp	#LR__1653
14518                 | LR__1644
14518     18 4E 05 F1 | 	add	fp, #24
1451c     A7 04 68 FC | 	wrlong	#2, fp
14520     18 4E 85 F1 | 	sub	fp, #24
14524     7C 00 90 FD | 	jmp	#LR__1653
14528                 | LR__1645
14528     18 4E 05 F1 | 	add	fp, #24
1452c     A7 08 68 FC | 	wrlong	#4, fp
14530     18 4E 85 F1 | 	sub	fp, #24
14534     6C 00 90 FD | 	jmp	#LR__1653
14538                 | LR__1646
14538     18 4E 05 F1 | 	add	fp, #24
1453c     A7 08 68 FC | 	wrlong	#4, fp
14540     18 4E 85 F1 | 	sub	fp, #24
14544     5C 00 90 FD | 	jmp	#LR__1653
14548                 | LR__1647
14548     18 4E 05 F1 | 	add	fp, #24
1454c     A7 10 68 FC | 	wrlong	#8, fp
14550     18 4E 85 F1 | 	sub	fp, #24
14554     4C 00 90 FD | 	jmp	#LR__1653
14558                 | LR__1648
14558     18 4E 05 F1 | 	add	fp, #24
1455c     A7 10 68 FC | 	wrlong	#8, fp
14560     18 4E 85 F1 | 	sub	fp, #24
14564     3C 00 90 FD | 	jmp	#LR__1653
14568                 | LR__1649
14568     18 4E 05 F1 | 	add	fp, #24
1456c     A7 0C 68 FC | 	wrlong	#6, fp
14570     18 4E 85 F1 | 	sub	fp, #24
14574     2C 00 90 FD | 	jmp	#LR__1653
14578                 | LR__1650
14578     18 4E 05 F1 | 	add	fp, #24
1457c     A7 10 68 FC | 	wrlong	#8, fp
14580     18 4E 85 F1 | 	sub	fp, #24
14584     1C 00 90 FD | 	jmp	#LR__1653
14588                 | LR__1651
14588     18 4E 05 F1 | 	add	fp, #24
1458c     A7 0A 68 FC | 	wrlong	#5, fp
14590     18 4E 85 F1 | 	sub	fp, #24
14594     0C 00 90 FD | 	jmp	#LR__1653
14598                 | LR__1652
14598     18 4E 05 F1 | 	add	fp, #24
1459c     A7 18 68 FC | 	wrlong	#12, fp
145a0     18 4E 85 F1 | 	sub	fp, #24
145a4                 | LR__1653
145a4                 | '   if esize=12 andalso t1.result.uresult<$80000 then
145a4     18 4E 05 F1 | 	add	fp, #24
145a8     A7 44 02 FB | 	rdlong	local16, fp
145ac     18 4E 85 F1 | 	sub	fp, #24
145b0     0C 44 0E F2 | 	cmp	local16, #12 wz
145b4     74 01 90 5D |  if_ne	jmp	#LR__1658
145b8     1C 4E 05 F1 | 	add	fp, #28
145bc     A7 32 02 FB | 	rdlong	local07, fp
145c0     1C 4E 85 F1 | 	sub	fp, #28
145c4     00 04 00 FF 
145c8     00 32 16 F2 | 	cmp	local07, ##524288 wc
145cc     5C 01 90 3D |  if_ae	jmp	#LR__1658
145d0                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
145d0     52 00 00 FF 
145d4     10 E5 05 F1 | 	add	objptr, ##42256
145d8     F2 44 02 FB | 	rdlong	local16, objptr
145dc     52 00 00 FF 
145e0     10 E5 85 F1 | 	sub	objptr, ##42256
145e4     1C 44 0E F2 | 	cmp	local16, #28 wz
145e8     38 00 90 5D |  if_ne	jmp	#LR__1654
145ec     1C 4E 05 F1 | 	add	fp, #28
145f0     A7 44 02 FB | 	rdlong	local16, fp
145f4     14 4F 05 F1 | 	add	fp, #276
145f8     A7 32 02 FB | 	rdlong	local07, fp
145fc     19 35 02 F6 | 	mov	local08, local07
14600     02 34 66 F0 | 	shl	local08, #2
14604     04 4F 85 F1 | 	sub	fp, #260
14608     A7 36 02 F6 | 	mov	local09, fp
1460c     A7 34 02 F1 | 	add	local08, fp
14610     1A 13 02 FB | 	rdlong	arg01, local08
14614     00 14 06 F6 | 	mov	arg02, #0
14618     2C 4E 85 F1 | 	sub	fp, #44
1461c     70 5F B1 FD | 	call	#__system____builtin_atoi
14620     22 FB 61 FC | 	wrlong	result1, local16
14624                 | LR__1654
14624                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
14624     52 00 00 FF 
14628     10 E5 05 F1 | 	add	objptr, ##42256
1462c     F2 44 02 FB | 	rdlong	local16, objptr
14630     52 00 00 FF 
14634     10 E5 85 F1 | 	sub	objptr, ##42256
14638     1D 44 0E F2 | 	cmp	local16, #29 wz
1463c     38 00 90 5D |  if_ne	jmp	#LR__1655
14640     1C 4E 05 F1 | 	add	fp, #28
14644     A7 44 02 FB | 	rdlong	local16, fp
14648     14 4F 05 F1 | 	add	fp, #276
1464c     A7 32 02 FB | 	rdlong	local07, fp
14650     19 35 02 F6 | 	mov	local08, local07
14654     02 34 66 F0 | 	shl	local08, #2
14658     04 4F 85 F1 | 	sub	fp, #260
1465c     A7 36 02 F6 | 	mov	local09, fp
14660     A7 34 02 F1 | 	add	local08, fp
14664     1A 13 02 FB | 	rdlong	arg01, local08
14668     00 14 06 F6 | 	mov	arg02, #0
1466c     2C 4E 85 F1 | 	sub	fp, #44
14670     1C 5F B1 FD | 	call	#__system____builtin_atoi
14674     22 FB 61 FC | 	wrlong	result1, local16
14678                 | LR__1655
14678                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
14678     52 00 00 FF 
1467c     10 E5 05 F1 | 	add	objptr, ##42256
14680     F2 44 02 FB | 	rdlong	local16, objptr
14684     52 00 00 FF 
14688     10 E5 85 F1 | 	sub	objptr, ##42256
1468c     1E 44 0E F2 | 	cmp	local16, #30 wz
14690     3C 00 90 5D |  if_ne	jmp	#LR__1656
14694     30 4F 05 F1 | 	add	fp, #304
14698     A7 32 02 FB | 	rdlong	local07, fp
1469c     02 32 66 F0 | 	shl	local07, #2
146a0     04 4F 85 F1 | 	sub	fp, #260
146a4     A7 34 02 F6 | 	mov	local08, fp
146a8     A7 32 02 F1 | 	add	local07, fp
146ac     19 13 02 FB | 	rdlong	arg01, local07
146b0     2C 4E 85 F1 | 	sub	fp, #44
146b4     6C 60 B1 FD | 	call	#__system____builtin_atof
146b8     28 4E 05 F1 | 	add	fp, #40
146bc     A7 FA 61 FC | 	wrlong	result1, fp
146c0     0C 4E 85 F1 | 	sub	fp, #12
146c4     A7 44 02 FB | 	rdlong	local16, fp
146c8     1C 4E 85 F1 | 	sub	fp, #28
146cc     22 FB 61 FC | 	wrlong	result1, local16
146d0                 | LR__1656
146d0                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
146d0     52 00 00 FF 
146d4     10 E5 05 F1 | 	add	objptr, ##42256
146d8     F2 44 02 FB | 	rdlong	local16, objptr
146dc     52 00 00 FF 
146e0     10 E5 85 F1 | 	sub	objptr, ##42256
146e4     2B 44 0E F2 | 	cmp	local16, #43 wz
146e8     18 00 90 5D |  if_ne	jmp	#LR__1657
146ec     1C 4E 05 F1 | 	add	fp, #28
146f0     A7 12 02 FB | 	rdlong	arg01, fp
146f4     0C 4E 85 F1 | 	sub	fp, #12
146f8     A7 14 02 FB | 	rdlong	arg02, fp
146fc     10 4E 85 F1 | 	sub	fp, #16
14700     09 15 62 FC | 	wrlong	arg02, arg01
14704                 | LR__1657
14704     1C 4E 05 F1 | 	add	fp, #28
14708     A7 12 02 FB | 	rdlong	arg01, fp
1470c     1C 4E 85 F1 | 	sub	fp, #28
14710     08 12 06 F1 | 	add	arg01, #8
14714     52 00 00 FF 
14718     10 E5 05 F1 | 	add	objptr, ##42256
1471c     F2 14 02 FB | 	rdlong	arg02, objptr
14720     52 00 00 FF 
14724     10 E5 85 F1 | 	sub	objptr, ##42256
14728     09 15 62 FC | 	wrlong	arg02, arg01
1472c                 | LR__1658
1472c                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
1472c     18 4E 05 F1 | 	add	fp, #24
14730     A7 44 02 FB | 	rdlong	local16, fp
14734     18 4E 85 F1 | 	sub	fp, #24
14738     0C 44 0E F2 | 	cmp	local16, #12 wz
1473c     94 01 90 5D |  if_ne	jmp	#LR__1663
14740     1C 4E 05 F1 | 	add	fp, #28
14744     A7 32 02 FB | 	rdlong	local07, fp
14748     1C 4E 85 F1 | 	sub	fp, #28
1474c     00 04 00 FF 
14750     00 32 16 F2 | 	cmp	local07, ##524288 wc
14754     7C 01 90 CD |  if_b	jmp	#LR__1663
14758                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
14758     52 00 00 FF 
1475c     10 E5 05 F1 | 	add	objptr, ##42256
14760     F2 44 02 FB | 	rdlong	local16, objptr
14764     52 00 00 FF 
14768     10 E5 85 F1 | 	sub	objptr, ##42256
1476c     1C 44 0E F2 | 	cmp	local16, #28 wz
14770     40 00 90 5D |  if_ne	jmp	#LR__1659
14774     1C 4E 05 F1 | 	add	fp, #28
14778     A7 44 02 FB | 	rdlong	local16, fp
1477c     14 4F 05 F1 | 	add	fp, #276
14780     A7 32 02 FB | 	rdlong	local07, fp
14784     19 35 02 F6 | 	mov	local08, local07
14788     02 34 66 F0 | 	shl	local08, #2
1478c     04 4F 85 F1 | 	sub	fp, #260
14790     A7 36 02 F6 | 	mov	local09, fp
14794     A7 34 02 F1 | 	add	local08, fp
14798     1A 13 02 FB | 	rdlong	arg01, local08
1479c     00 14 06 F6 | 	mov	arg02, #0
147a0     2C 4E 85 F1 | 	sub	fp, #44
147a4     E8 5D B1 FD | 	call	#__system____builtin_atoi
147a8     FD 14 02 F6 | 	mov	arg02, result1
147ac     22 13 02 F6 | 	mov	arg01, local16
147b0     D8 EF B0 FD | 	call	#_pslpoke
147b4                 | LR__1659
147b4                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
147b4     52 00 00 FF 
147b8     10 E5 05 F1 | 	add	objptr, ##42256
147bc     F2 44 02 FB | 	rdlong	local16, objptr
147c0     52 00 00 FF 
147c4     10 E5 85 F1 | 	sub	objptr, ##42256
147c8     1D 44 0E F2 | 	cmp	local16, #29 wz
147cc     40 00 90 5D |  if_ne	jmp	#LR__1660
147d0     1C 4E 05 F1 | 	add	fp, #28
147d4     A7 44 02 FB | 	rdlong	local16, fp
147d8     14 4F 05 F1 | 	add	fp, #276
147dc     A7 32 02 FB | 	rdlong	local07, fp
147e0     19 35 02 F6 | 	mov	local08, local07
147e4     02 34 66 F0 | 	shl	local08, #2
147e8     04 4F 85 F1 | 	sub	fp, #260
147ec     A7 36 02 F6 | 	mov	local09, fp
147f0     A7 34 02 F1 | 	add	local08, fp
147f4     1A 13 02 FB | 	rdlong	arg01, local08
147f8     00 14 06 F6 | 	mov	arg02, #0
147fc     2C 4E 85 F1 | 	sub	fp, #44
14800     8C 5D B1 FD | 	call	#__system____builtin_atoi
14804     FD 14 02 F6 | 	mov	arg02, result1
14808     22 13 02 F6 | 	mov	arg01, local16
1480c     7C EF B0 FD | 	call	#_pslpoke
14810                 | LR__1660
14810                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
14810     52 00 00 FF 
14814     10 E5 05 F1 | 	add	objptr, ##42256
14818     F2 44 02 FB | 	rdlong	local16, objptr
1481c     52 00 00 FF 
14820     10 E5 85 F1 | 	sub	objptr, ##42256
14824     1E 44 0E F2 | 	cmp	local16, #30 wz
14828     4C 00 90 5D |  if_ne	jmp	#LR__1661
1482c     30 4F 05 F1 | 	add	fp, #304
14830     A7 32 02 FB | 	rdlong	local07, fp
14834     02 32 66 F0 | 	shl	local07, #2
14838     04 4F 85 F1 | 	sub	fp, #260
1483c     A7 34 02 F6 | 	mov	local08, fp
14840     A7 32 02 F1 | 	add	local07, fp
14844     19 13 02 FB | 	rdlong	arg01, local07
14848     2C 4E 85 F1 | 	sub	fp, #44
1484c     D4 5E B1 FD | 	call	#__system____builtin_atof
14850     28 4E 05 F1 | 	add	fp, #40
14854     A7 FA 61 FC | 	wrlong	result1, fp
14858     0C 4E 85 F1 | 	sub	fp, #12
1485c     A7 44 02 FB | 	rdlong	local16, fp
14860     0C 4E 05 F1 | 	add	fp, #12
14864     A7 12 02 F6 | 	mov	arg01, fp
14868     28 4E 85 F1 | 	sub	fp, #40
1486c     09 15 02 FB | 	rdlong	arg02, arg01
14870     22 13 02 F6 | 	mov	arg01, local16
14874     14 EF B0 FD | 	call	#_pslpoke
14878                 | LR__1661
14878                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
14878     52 00 00 FF 
1487c     10 E5 05 F1 | 	add	objptr, ##42256
14880     F2 44 02 FB | 	rdlong	local16, objptr
14884     52 00 00 FF 
14888     10 E5 85 F1 | 	sub	objptr, ##42256
1488c     2B 44 0E F2 | 	cmp	local16, #43 wz
14890     18 00 90 5D |  if_ne	jmp	#LR__1662
14894     1C 4E 05 F1 | 	add	fp, #28
14898     A7 12 02 FB | 	rdlong	arg01, fp
1489c     0C 4E 85 F1 | 	sub	fp, #12
148a0     A7 14 02 FB | 	rdlong	arg02, fp
148a4     10 4E 85 F1 | 	sub	fp, #16
148a8     E0 EE B0 FD | 	call	#_pslpoke
148ac                 | LR__1662
148ac     1C 4E 05 F1 | 	add	fp, #28
148b0     A7 12 02 FB | 	rdlong	arg01, fp
148b4     1C 4E 85 F1 | 	sub	fp, #28
148b8     08 12 06 F1 | 	add	arg01, #8
148bc     52 00 00 FF 
148c0     10 E5 05 F1 | 	add	objptr, ##42256
148c4     F2 14 02 FB | 	rdlong	arg02, objptr
148c8     52 00 00 FF 
148cc     10 E5 85 F1 | 	sub	objptr, ##42256
148d0     B8 EE B0 FD | 	call	#_pslpoke
148d4                 | LR__1663
148d4                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
148d4     18 4E 05 F1 | 	add	fp, #24
148d8     A7 44 02 FB | 	rdlong	local16, fp
148dc     18 4E 85 F1 | 	sub	fp, #24
148e0     05 44 0E F2 | 	cmp	local16, #5 wz
148e4     52 00 00 AF 
148e8     10 E5 05 A1 |  if_e	add	objptr, ##42256
148ec     F2 42 02 AB |  if_e	rdlong	local15, objptr
148f0     52 00 00 AF 
148f4     10 E5 85 A1 |  if_e	sub	objptr, ##42256
148f8     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
148fc     18 00 90 5D |  if_ne	jmp	#LR__1664
14900     1C 4E 05 F1 | 	add	fp, #28
14904     A7 12 02 FB | 	rdlong	arg01, fp
14908     0C 4E 85 F1 | 	sub	fp, #12
1490c     A7 14 02 FB | 	rdlong	arg02, fp
14910     10 4E 85 F1 | 	sub	fp, #16
14914     74 EE B0 FD | 	call	#_pslpoke
14918                 | LR__1664
14918                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
14918     18 4E 05 F1 | 	add	fp, #24
1491c     A7 44 02 FB | 	rdlong	local16, fp
14920     18 4E 85 F1 | 	sub	fp, #24
14924     04 44 0E F2 | 	cmp	local16, #4 wz
14928     54 00 90 5D |  if_ne	jmp	#LR__1665
1492c     52 00 00 FF 
14930     10 E5 05 F1 | 	add	objptr, ##42256
14934     F2 42 02 FB | 	rdlong	local15, objptr
14938     52 00 00 FF 
1493c     10 E5 85 F1 | 	sub	objptr, ##42256
14940     2B 42 0E F2 | 	cmp	local15, #43 wz
14944     38 00 90 AD |  if_e	jmp	#LR__1665
14948     1C 4E 05 F1 | 	add	fp, #28
1494c     A7 44 02 FB | 	rdlong	local16, fp
14950     14 4F 05 F1 | 	add	fp, #276
14954     A7 34 02 FB | 	rdlong	local08, fp
14958     02 34 66 F0 | 	shl	local08, #2
1495c     04 4F 85 F1 | 	sub	fp, #260
14960     A7 34 02 F1 | 	add	local08, fp
14964     1A 13 02 FB | 	rdlong	arg01, local08
14968     00 14 06 F6 | 	mov	arg02, #0
1496c     2C 4E 85 F1 | 	sub	fp, #44
14970     1C 5C B1 FD | 	call	#__system____builtin_atoi
14974     FD 14 02 F6 | 	mov	arg02, result1
14978     22 13 02 F6 | 	mov	arg01, local16
1497c     0C EE B0 FD | 	call	#_pslpoke
14980                 | LR__1665
14980                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
14980     18 4E 05 F1 | 	add	fp, #24
14984     A7 44 02 FB | 	rdlong	local16, fp
14988     18 4E 85 F1 | 	sub	fp, #24
1498c     02 44 0E F2 | 	cmp	local16, #2 wz
14990     54 00 90 5D |  if_ne	jmp	#LR__1666
14994     52 00 00 FF 
14998     10 E5 05 F1 | 	add	objptr, ##42256
1499c     F2 42 02 FB | 	rdlong	local15, objptr
149a0     52 00 00 FF 
149a4     10 E5 85 F1 | 	sub	objptr, ##42256
149a8     2B 42 0E F2 | 	cmp	local15, #43 wz
149ac     38 00 90 AD |  if_e	jmp	#LR__1666
149b0     1C 4E 05 F1 | 	add	fp, #28
149b4     A7 44 02 FB | 	rdlong	local16, fp
149b8     14 4F 05 F1 | 	add	fp, #276
149bc     A7 34 02 FB | 	rdlong	local08, fp
149c0     02 34 66 F0 | 	shl	local08, #2
149c4     04 4F 85 F1 | 	sub	fp, #260
149c8     A7 34 02 F1 | 	add	local08, fp
149cc     1A 13 02 FB | 	rdlong	arg01, local08
149d0     00 14 06 F6 | 	mov	arg02, #0
149d4     2C 4E 85 F1 | 	sub	fp, #44
149d8     B4 5B B1 FD | 	call	#__system____builtin_atoi
149dc     FD 14 02 F6 | 	mov	arg02, result1
149e0     22 13 02 F6 | 	mov	arg01, local16
149e4     EC ED B0 FD | 	call	#_psdpoke
149e8                 | LR__1666
149e8                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
149e8     18 4E 05 F1 | 	add	fp, #24
149ec     A7 44 02 FB | 	rdlong	local16, fp
149f0     18 4E 85 F1 | 	sub	fp, #24
149f4     01 44 0E F2 | 	cmp	local16, #1 wz
149f8     54 00 90 5D |  if_ne	jmp	#LR__1667
149fc     52 00 00 FF 
14a00     10 E5 05 F1 | 	add	objptr, ##42256
14a04     F2 42 02 FB | 	rdlong	local15, objptr
14a08     52 00 00 FF 
14a0c     10 E5 85 F1 | 	sub	objptr, ##42256
14a10     2B 42 0E F2 | 	cmp	local15, #43 wz
14a14     38 00 90 AD |  if_e	jmp	#LR__1667
14a18     1C 4E 05 F1 | 	add	fp, #28
14a1c     A7 44 02 FB | 	rdlong	local16, fp
14a20     14 4F 05 F1 | 	add	fp, #276
14a24     A7 34 02 FB | 	rdlong	local08, fp
14a28     02 34 66 F0 | 	shl	local08, #2
14a2c     04 4F 85 F1 | 	sub	fp, #260
14a30     A7 34 02 F1 | 	add	local08, fp
14a34     1A 13 02 FB | 	rdlong	arg01, local08
14a38     00 14 06 F6 | 	mov	arg02, #0
14a3c     2C 4E 85 F1 | 	sub	fp, #44
14a40     4C 5B B1 FD | 	call	#__system____builtin_atoi
14a44     FD 14 02 F6 | 	mov	arg02, result1
14a48     22 13 02 F6 | 	mov	arg01, local16
14a4c     CC ED B0 FD | 	call	#_pspoke
14a50                 | LR__1667
14a50                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
14a50     18 4E 05 F1 | 	add	fp, #24
14a54     A7 44 02 FB | 	rdlong	local16, fp
14a58     18 4E 85 F1 | 	sub	fp, #24
14a5c     06 44 0E F2 | 	cmp	local16, #6 wz
14a60     64 00 90 5D |  if_ne	jmp	#LR__1668
14a64     52 00 00 FF 
14a68     10 E5 05 F1 | 	add	objptr, ##42256
14a6c     F2 42 02 FB | 	rdlong	local15, objptr
14a70     52 00 00 FF 
14a74     10 E5 85 F1 | 	sub	objptr, ##42256
14a78     2B 42 0E F2 | 	cmp	local15, #43 wz
14a7c     48 00 90 AD |  if_e	jmp	#LR__1668
14a80     30 4F 05 F1 | 	add	fp, #304
14a84     A7 32 02 FB | 	rdlong	local07, fp
14a88     02 32 66 F0 | 	shl	local07, #2
14a8c     04 4F 85 F1 | 	sub	fp, #260
14a90     A7 32 02 F1 | 	add	local07, fp
14a94     19 13 02 FB | 	rdlong	arg01, local07
14a98     2C 4E 85 F1 | 	sub	fp, #44
14a9c     84 5C B1 FD | 	call	#__system____builtin_atof
14aa0     28 4E 05 F1 | 	add	fp, #40
14aa4     A7 FA 61 FC | 	wrlong	result1, fp
14aa8     0C 4E 85 F1 | 	sub	fp, #12
14aac     A7 44 02 FB | 	rdlong	local16, fp
14ab0     0C 4E 05 F1 | 	add	fp, #12
14ab4     A7 12 02 F6 | 	mov	arg01, fp
14ab8     28 4E 85 F1 | 	sub	fp, #40
14abc     09 15 02 FB | 	rdlong	arg02, arg01
14ac0     22 13 02 F6 | 	mov	arg01, local16
14ac4     C4 EC B0 FD | 	call	#_pslpoke
14ac8                 | LR__1668
14ac8     30 4F 05 F1 | 	add	fp, #304
14acc     A7 42 02 FB | 	rdlong	local15, fp
14ad0     01 42 06 F1 | 	add	local15, #1
14ad4     A7 42 62 FC | 	wrlong	local15, fp
14ad8     30 4F 85 F1 | 	sub	fp, #304
14adc     E4 F6 9F FD | 	jmp	#LR__1633
14ae0                 | LR__1669
14ae0                 | LR__1670
14ae0     A7 F0 03 F6 | 	mov	ptra, fp
14ae4     B2 00 A0 FD | 	call	#popregs_
14ae8                 | _do_input_ret
14ae8     2D 00 64 FD | 	ret
14aec                 | 
14aec                 | ' 
14aec                 | ' ' ----------------  left$
14aec                 | ' 
14aec                 | ' sub do_left
14aec                 | _do_left
14aec     00 4A 05 F6 | 	mov	COUNT_, #0
14af0     A8 00 A0 FD | 	call	#pushregs_
14af4     14 F0 07 F1 | 	add	ptra, #20
14af8     4A 00 00 FF 
14afc     80 E4 05 F1 | 	add	objptr, ##38016
14b00     F2 16 02 FB | 	rdlong	arg03, objptr
14b04     0B 15 02 F6 | 	mov	arg02, arg03
14b08     01 14 66 F0 | 	shl	arg02, #1
14b0c     0B 15 02 F1 | 	add	arg02, arg03
14b10     02 14 66 F0 | 	shl	arg02, #2
14b14     03 00 00 FF 
14b18     04 E4 85 F1 | 	sub	objptr, ##1540
14b1c     F2 14 02 F1 | 	add	arg02, objptr
14b20     0A 17 02 FB | 	rdlong	arg03, arg02
14b24     0C 4E 05 F1 | 	add	fp, #12
14b28     A7 16 62 FC | 	wrlong	arg03, fp
14b2c                 | ' 
14b2c                 | ' numpar=compiledline(lineptr_e).result.uresult
14b2c                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
14b2c     0C 4E 85 F1 | 	sub	fp, #12
14b30     02 16 0E F2 | 	cmp	arg03, #2 wz
14b34     47 00 00 FF 
14b38     7C E4 85 F1 | 	sub	objptr, ##36476
14b3c     40 00 90 AD |  if_e	jmp	#LR__1680
14b40     00 12 06 F6 | 	mov	arg01, #0
14b44     F8 81 B1 FD | 	call	#__system___getiolock_0614
14b48     FD 12 02 F6 | 	mov	arg01, result1
14b4c     4C 25 B1 FD | 	call	#__system___lockmem
14b50     BA 01 00 FF 
14b54     F6 15 06 F6 | 	mov	arg02, ##@LR__5968
14b58     00 12 06 F6 | 	mov	arg01, #0
14b5c     00 16 06 F6 | 	mov	arg03, #0
14b60     30 32 B1 FD | 	call	#__system___basic_print_string
14b64     00 12 06 F6 | 	mov	arg01, #0
14b68     D4 81 B1 FD | 	call	#__system___getiolock_0614
14b6c     FD 00 68 FC | 	wrlong	#0, result1
14b70     27 12 06 F6 | 	mov	arg01, #39
14b74     00 14 06 F6 | 	mov	arg02, #0
14b78     70 EA B0 FD | 	call	#_printerror
14b7c     EC 00 90 FD | 	jmp	#LR__1683
14b80                 | LR__1680
14b80     84 8B BF FD | 	call	#_pop
14b84     FF 16 02 F6 | 	mov	arg03, result3
14b88     A7 FA 61 FC | 	wrlong	result1, fp
14b8c     04 4E 05 F1 | 	add	fp, #4
14b90     A7 FC 61 FC | 	wrlong	result2, fp
14b94     04 4E 05 F1 | 	add	fp, #4
14b98     A7 16 62 FC | 	wrlong	arg03, fp
14b9c     08 4E 85 F1 | 	sub	fp, #8
14ba0     A7 12 02 F6 | 	mov	arg01, fp
14ba4     44 8D BF FD | 	call	#_converttoint
14ba8     FD 16 02 F6 | 	mov	arg03, result1
14bac     10 4E 05 F1 | 	add	fp, #16
14bb0     A7 16 62 FC | 	wrlong	arg03, fp
14bb4     10 4E 85 F1 | 	sub	fp, #16
14bb8     4C 8B BF FD | 	call	#_pop
14bbc     FF 16 02 F6 | 	mov	arg03, result3
14bc0     A7 FA 61 FC | 	wrlong	result1, fp
14bc4     04 4E 05 F1 | 	add	fp, #4
14bc8     A7 FC 61 FC | 	wrlong	result2, fp
14bcc     04 4E 05 F1 | 	add	fp, #4
14bd0     A7 16 62 FC | 	wrlong	arg03, fp
14bd4                 | ' t1=pop() : arg=converttoint(t1)
14bd4                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14bd4     08 4E 85 F1 | 	sub	fp, #8
14bd8     2B 16 0E F2 | 	cmp	arg03, #43 wz
14bdc     18 00 90 5D |  if_ne	jmp	#LR__1681
14be0     A7 12 02 FB | 	rdlong	arg01, fp
14be4     98 8C BF FD | 	call	#_convertstring
14be8     A7 FA 61 FC | 	wrlong	result1, fp
14bec     08 4E 05 F1 | 	add	fp, #8
14bf0     A7 3E 68 FC | 	wrlong	#31, fp
14bf4     08 4E 85 F1 | 	sub	fp, #8
14bf8                 | LR__1681
14bf8                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
14bf8     08 4E 05 F1 | 	add	fp, #8
14bfc     A7 16 02 FB | 	rdlong	arg03, fp
14c00     08 4E 85 F1 | 	sub	fp, #8
14c04     1F 16 0E F2 | 	cmp	arg03, #31 wz
14c08     40 00 90 AD |  if_e	jmp	#LR__1682
14c0c     00 12 06 F6 | 	mov	arg01, #0
14c10     2C 81 B1 FD | 	call	#__system___getiolock_0614
14c14     FD 12 02 F6 | 	mov	arg01, result1
14c18     80 24 B1 FD | 	call	#__system___lockmem
14c1c     BA 01 00 FF 
14c20     FE 15 06 F6 | 	mov	arg02, ##@LR__5969
14c24     00 12 06 F6 | 	mov	arg01, #0
14c28     00 16 06 F6 | 	mov	arg03, #0
14c2c     64 31 B1 FD | 	call	#__system___basic_print_string
14c30     00 12 06 F6 | 	mov	arg01, #0
14c34     08 81 B1 FD | 	call	#__system___getiolock_0614
14c38     FD 00 68 FC | 	wrlong	#0, result1
14c3c     0F 12 06 F6 | 	mov	arg01, #15
14c40     00 14 06 F6 | 	mov	arg02, #0
14c44     A4 E9 B0 FD | 	call	#_printerror
14c48     20 00 90 FD | 	jmp	#LR__1683
14c4c                 | LR__1682
14c4c     A7 12 02 FB | 	rdlong	arg01, fp
14c50     10 4E 05 F1 | 	add	fp, #16
14c54     A7 14 02 FB | 	rdlong	arg02, fp
14c58     10 4E 85 F1 | 	sub	fp, #16
14c5c     BC 44 B1 FD | 	call	#__system__Left_S
14c60     A7 FA 61 FC | 	wrlong	result1, fp
14c64     A7 12 02 F6 | 	mov	arg01, fp
14c68     34 8B BF FD | 	call	#_push
14c6c                 | LR__1683
14c6c     A7 F0 03 F6 | 	mov	ptra, fp
14c70     B2 00 A0 FD | 	call	#popregs_
14c74                 | _do_left_ret
14c74     2D 00 64 FD | 	ret
14c78                 | 
14c78                 | ' 
14c78                 | ' ' ----------------  len
14c78                 | ' 
14c78                 | ' sub do_len
14c78                 | _do_len
14c78     02 4A 05 F6 | 	mov	COUNT_, #2
14c7c     A8 00 A0 FD | 	call	#pushregs_
14c80     14 F0 07 F1 | 	add	ptra, #20
14c84     4A 00 00 FF 
14c88     80 E4 05 F1 | 	add	objptr, ##38016
14c8c     F2 26 02 FB | 	rdlong	local01, objptr
14c90     13 17 02 F6 | 	mov	arg03, local01
14c94     01 16 66 F0 | 	shl	arg03, #1
14c98     13 17 02 F1 | 	add	arg03, local01
14c9c     02 16 66 F0 | 	shl	arg03, #2
14ca0     03 00 00 FF 
14ca4     04 E4 85 F1 | 	sub	objptr, ##1540
14ca8     F2 16 02 F1 | 	add	arg03, objptr
14cac     0B 17 02 FB | 	rdlong	arg03, arg03
14cb0     0C 4E 05 F1 | 	add	fp, #12
14cb4     A7 16 62 FC | 	wrlong	arg03, fp
14cb8                 | ' 
14cb8                 | ' numpar=compiledline(lineptr_e).result.uresult
14cb8                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
14cb8     0C 4E 85 F1 | 	sub	fp, #12
14cbc     02 16 16 F2 | 	cmp	arg03, #2 wc
14cc0     47 00 00 FF 
14cc4     7C E4 85 F1 | 	sub	objptr, ##36476
14cc8     0C 4E 05 C1 |  if_b	add	fp, #12
14ccc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
14cd0     0C 4E 85 C1 |  if_b	sub	fp, #12
14cd4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1690
14cd8     00 12 06 F6 | 	mov	arg01, #0
14cdc     60 80 B1 FD | 	call	#__system___getiolock_0614
14ce0     FD 12 02 F6 | 	mov	arg01, result1
14ce4     B4 23 B1 FD | 	call	#__system___lockmem
14ce8     BB 01 00 FF 
14cec     06 14 06 F6 | 	mov	arg02, ##@LR__5970
14cf0     00 12 06 F6 | 	mov	arg01, #0
14cf4     00 16 06 F6 | 	mov	arg03, #0
14cf8     98 30 B1 FD | 	call	#__system___basic_print_string
14cfc     00 12 06 F6 | 	mov	arg01, #0
14d00     3C 80 B1 FD | 	call	#__system___getiolock_0614
14d04     FD 00 68 FC | 	wrlong	#0, result1
14d08     27 12 06 F6 | 	mov	arg01, #39
14d0c     00 14 06 F6 | 	mov	arg02, #0
14d10     D8 E8 B0 FD | 	call	#_printerror
14d14     C8 00 90 FD | 	jmp	#LR__1695
14d18                 | LR__1690
14d18     EC 89 BF FD | 	call	#_pop
14d1c     FF 16 02 F6 | 	mov	arg03, result3
14d20     A7 FA 61 FC | 	wrlong	result1, fp
14d24     04 4E 05 F1 | 	add	fp, #4
14d28     A7 FC 61 FC | 	wrlong	result2, fp
14d2c     04 4E 05 F1 | 	add	fp, #4
14d30     A7 16 62 FC | 	wrlong	arg03, fp
14d34                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14d34     08 4E 85 F1 | 	sub	fp, #8
14d38     2B 16 0E F2 | 	cmp	arg03, #43 wz
14d3c     18 00 90 5D |  if_ne	jmp	#LR__1691
14d40     A7 12 02 FB | 	rdlong	arg01, fp
14d44     38 8B BF FD | 	call	#_convertstring
14d48     A7 FA 61 FC | 	wrlong	result1, fp
14d4c     08 4E 05 F1 | 	add	fp, #8
14d50     A7 3E 68 FC | 	wrlong	#31, fp
14d54     08 4E 85 F1 | 	sub	fp, #8
14d58                 | LR__1691
14d58                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
14d58     08 4E 05 F1 | 	add	fp, #8
14d5c     A7 16 02 FB | 	rdlong	arg03, fp
14d60     08 4E 85 F1 | 	sub	fp, #8
14d64     1F 16 0E F2 | 	cmp	arg03, #31 wz
14d68     40 00 90 AD |  if_e	jmp	#LR__1692
14d6c     00 12 06 F6 | 	mov	arg01, #0
14d70     CC 7F B1 FD | 	call	#__system___getiolock_0614
14d74     FD 12 02 F6 | 	mov	arg01, result1
14d78     20 23 B1 FD | 	call	#__system___lockmem
14d7c     BB 01 00 FF 
14d80     0C 14 06 F6 | 	mov	arg02, ##@LR__5971
14d84     00 12 06 F6 | 	mov	arg01, #0
14d88     00 16 06 F6 | 	mov	arg03, #0
14d8c     04 30 B1 FD | 	call	#__system___basic_print_string
14d90     00 12 06 F6 | 	mov	arg01, #0
14d94     A8 7F B1 FD | 	call	#__system___getiolock_0614
14d98     FD 00 68 FC | 	wrlong	#0, result1
14d9c     0F 12 06 F6 | 	mov	arg01, #15
14da0     00 14 06 F6 | 	mov	arg02, #0
14da4     44 E8 B0 FD | 	call	#_printerror
14da8     34 00 90 FD | 	jmp	#LR__1695
14dac                 | LR__1692
14dac     A7 12 02 FB | 	rdlong	arg01, fp
14db0     09 29 02 F6 | 	mov	local02, arg01
14db4     97 06 48 FB | 	callpa	#(@LR__1694-@LR__1693)>>2,fcache_load_ptr_
14db8                 | LR__1693
14db8     14 FB C9 FA | 	rdbyte	result1, local02 wz
14dbc     01 28 06 51 |  if_ne	add	local02, #1
14dc0     F4 FF 9F 5D |  if_ne	jmp	#LR__1693
14dc4                 | LR__1694
14dc4     09 29 82 F1 | 	sub	local02, arg01
14dc8     A7 28 62 FC | 	wrlong	local02, fp
14dcc     08 4E 05 F1 | 	add	fp, #8
14dd0     A7 38 68 FC | 	wrlong	#28, fp
14dd4     08 4E 85 F1 | 	sub	fp, #8
14dd8     A7 12 02 F6 | 	mov	arg01, fp
14ddc     C0 89 BF FD | 	call	#_push
14de0                 | LR__1695
14de0     A7 F0 03 F6 | 	mov	ptra, fp
14de4     B2 00 A0 FD | 	call	#popregs_
14de8                 | _do_len_ret
14de8     2D 00 64 FD | 	ret
14dec                 | 
14dec                 | ' 
14dec                 | ' ' ----------------  list
14dec                 | ' 
14dec                 | ' sub do_list
14dec                 | _do_list
14dec     02 4A 05 F6 | 	mov	COUNT_, #2
14df0     A8 00 A0 FD | 	call	#pushregs_
14df4     B8 F0 07 F1 | 	add	ptra, #184
14df8     04 4E 05 F1 | 	add	fp, #4
14dfc     A7 00 68 FC | 	wrlong	#0, fp
14e00     04 4E 05 F1 | 	add	fp, #4
14e04     FF FF BF FF 
14e08     A7 FE 6B FC | 	wrlong	##2147483647, fp
14e0c     08 4E 85 F1 | 	sub	fp, #8
14e10     4A 00 00 FF 
14e14     80 E4 05 F1 | 	add	objptr, ##38016
14e18     F2 26 02 FB | 	rdlong	local01, objptr
14e1c     13 17 02 F6 | 	mov	arg03, local01
14e20     01 16 66 F0 | 	shl	arg03, #1
14e24     13 17 02 F1 | 	add	arg03, local01
14e28     02 16 66 F0 | 	shl	arg03, #2
14e2c     03 00 00 FF 
14e30     04 E4 85 F1 | 	sub	objptr, ##1540
14e34     F2 16 02 F1 | 	add	arg03, objptr
14e38     0B 17 02 FB | 	rdlong	arg03, arg03
14e3c     A7 16 62 FC | 	wrlong	arg03, fp
14e40                 | ' 
14e40                 | ' startline=0 : endline=$7FFFFFFF
14e40                 | ' numpar=compiledline(lineptr_e).result.uresult
14e40                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
14e40     01 16 0E F2 | 	cmp	arg03, #1 wz
14e44     47 00 00 FF 
14e48     7C E4 85 F1 | 	sub	objptr, ##36476
14e4c     3C 00 90 5D |  if_ne	jmp	#LR__1700
14e50     B4 88 BF FD | 	call	#_pop
14e54     FF 26 02 F6 | 	mov	local01, result3
14e58     0C 4E 05 F1 | 	add	fp, #12
14e5c     A7 FA 61 FC | 	wrlong	result1, fp
14e60     04 4E 05 F1 | 	add	fp, #4
14e64     A7 FC 61 FC | 	wrlong	result2, fp
14e68     04 4E 05 F1 | 	add	fp, #4
14e6c     A7 26 62 FC | 	wrlong	local01, fp
14e70     08 4E 85 F1 | 	sub	fp, #8
14e74     A7 12 02 F6 | 	mov	arg01, fp
14e78     0C 4E 85 F1 | 	sub	fp, #12
14e7c     6C 8A BF FD | 	call	#_converttoint
14e80     04 4E 05 F1 | 	add	fp, #4
14e84     A7 FA 61 FC | 	wrlong	result1, fp
14e88     04 4E 85 F1 | 	sub	fp, #4
14e8c                 | LR__1700
14e8c                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
14e8c     A7 16 02 FB | 	rdlong	arg03, fp
14e90     02 16 0E F2 | 	cmp	arg03, #2 wz
14e94     7C 00 90 5D |  if_ne	jmp	#LR__1701
14e98     6C 88 BF FD | 	call	#_pop
14e9c     FF 26 02 F6 | 	mov	local01, result3
14ea0     0C 4E 05 F1 | 	add	fp, #12
14ea4     A7 FA 61 FC | 	wrlong	result1, fp
14ea8     04 4E 05 F1 | 	add	fp, #4
14eac     A7 FC 61 FC | 	wrlong	result2, fp
14eb0     04 4E 05 F1 | 	add	fp, #4
14eb4     A7 26 62 FC | 	wrlong	local01, fp
14eb8     08 4E 85 F1 | 	sub	fp, #8
14ebc     A7 12 02 F6 | 	mov	arg01, fp
14ec0     0C 4E 85 F1 | 	sub	fp, #12
14ec4     24 8A BF FD | 	call	#_converttoint
14ec8     FD 26 02 F6 | 	mov	local01, result1
14ecc     08 4E 05 F1 | 	add	fp, #8
14ed0     A7 26 62 FC | 	wrlong	local01, fp
14ed4     08 4E 85 F1 | 	sub	fp, #8
14ed8     2C 88 BF FD | 	call	#_pop
14edc     FF 26 02 F6 | 	mov	local01, result3
14ee0     0C 4E 05 F1 | 	add	fp, #12
14ee4     A7 FA 61 FC | 	wrlong	result1, fp
14ee8     04 4E 05 F1 | 	add	fp, #4
14eec     A7 FC 61 FC | 	wrlong	result2, fp
14ef0     04 4E 05 F1 | 	add	fp, #4
14ef4     A7 26 62 FC | 	wrlong	local01, fp
14ef8     08 4E 85 F1 | 	sub	fp, #8
14efc     A7 12 02 F6 | 	mov	arg01, fp
14f00     0C 4E 85 F1 | 	sub	fp, #12
14f04     E4 89 BF FD | 	call	#_converttoint
14f08     04 4E 05 F1 | 	add	fp, #4
14f0c     A7 FA 61 FC | 	wrlong	result1, fp
14f10     04 4E 85 F1 | 	sub	fp, #4
14f14                 | LR__1701
14f14                 | ' 
14f14                 | ' 
14f14                 | ' print
14f14     00 12 06 F6 | 	mov	arg01, #0
14f18     24 7E B1 FD | 	call	#__system___getiolock_0614
14f1c     FD 12 02 F6 | 	mov	arg01, result1
14f20     78 21 B1 FD | 	call	#__system___lockmem
14f24     00 12 06 F6 | 	mov	arg01, #0
14f28     0A 14 06 F6 | 	mov	arg02, #10
14f2c     00 16 06 F6 | 	mov	arg03, #0
14f30     08 2E B1 FD | 	call	#__system___basic_print_char
14f34     00 12 06 F6 | 	mov	arg01, #0
14f38     04 7E B1 FD | 	call	#__system___getiolock_0614
14f3c     FD 00 68 FC | 	wrlong	#0, result1
14f40     4A 00 00 FF 
14f44     88 E4 05 F1 | 	add	objptr, ##38024
14f48     F2 28 02 FB | 	rdlong	local02, objptr
14f4c     08 00 00 FF 
14f50     94 E4 05 F1 | 	add	objptr, ##4244
14f54     F2 28 62 FC | 	wrlong	local02, objptr
14f58     52 00 00 FF 
14f5c     1C E5 85 F1 | 	sub	objptr, ##42268
14f60                 | ' do 
14f60                 | LR__1702
14f60     20 4E 05 F1 | 	add	fp, #32
14f64     A7 12 02 F6 | 	mov	arg01, fp
14f68     20 4E 85 F1 | 	sub	fp, #32
14f6c     52 00 00 FF 
14f70     1C E5 05 F1 | 	add	objptr, ##42268
14f74     F2 14 02 FB | 	rdlong	arg02, objptr
14f78     18 16 06 F6 | 	mov	arg03, #24
14f7c     47 00 00 FF 
14f80     50 E4 85 F1 | 	sub	objptr, ##36432
14f84     1C 14 B1 FD | 	call	#_psram_spin2_read1
14f88     0B 00 00 FF 
14f8c     CC E4 85 F1 | 	sub	objptr, ##5836
14f90                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
14f90                 | '   
14f90                 | '   if header(0)<> $FFFFFFFF then
14f90     20 4E 05 F1 | 	add	fp, #32
14f94     A7 28 02 FB | 	rdlong	local02, fp
14f98     20 4E 85 F1 | 	sub	fp, #32
14f9c     FF FF 7F FF 
14fa0     FF 29 0E F2 | 	cmp	local02, ##-1 wz
14fa4     A8 00 90 AD |  if_e	jmp	#LR__1704
14fa8     38 4E 05 F1 | 	add	fp, #56
14fac     3F 16 06 F6 | 	mov	arg03, #63
14fb0     28 16 62 FD | 	setq	arg03
14fb4     A7 00 68 FC | 	wrlong	#0, fp
14fb8     A7 12 02 F6 | 	mov	arg01, fp
14fbc     10 4E 85 F1 | 	sub	fp, #16
14fc0     A7 14 02 FB | 	rdlong	arg02, fp
14fc4     04 4E 05 F1 | 	add	fp, #4
14fc8     A7 16 02 FB | 	rdlong	arg03, fp
14fcc     2C 4E 85 F1 | 	sub	fp, #44
14fd0     0B 00 00 FF 
14fd4     CC E4 05 F1 | 	add	objptr, ##5836
14fd8     C8 13 B1 FD | 	call	#_psram_spin2_read1
14fdc     0B 00 00 FF 
14fe0     CC E4 85 F1 | 	sub	objptr, ##5836
14fe4                 | '     longfill(linebuf,0,64)
14fe4                 | '     psram.read1(varptr(linebuf),header(2),header(3))
14fe4                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
14fe4     20 4E 05 F1 | 	add	fp, #32
14fe8     A7 28 02 FB | 	rdlong	local02, fp
14fec     1C 4E 85 F1 | 	sub	fp, #28
14ff0     A7 26 02 FB | 	rdlong	local01, fp
14ff4     04 4E 85 F1 | 	sub	fp, #4
14ff8     13 29 52 F2 | 	cmps	local02, local01 wc
14ffc     30 00 90 CD |  if_b	jmp	#LR__1703
15000     20 4E 05 F1 | 	add	fp, #32
15004     A7 28 02 FB | 	rdlong	local02, fp
15008     18 4E 85 F1 | 	sub	fp, #24
1500c     A7 16 02 FB | 	rdlong	arg03, fp
15010     08 4E 85 F1 | 	sub	fp, #8
15014     0B 29 5A F2 | 	cmps	local02, arg03 wcz
15018     14 00 90 1D |  if_a	jmp	#LR__1703
1501c     38 4E 05 F1 | 	add	fp, #56
15020     A7 12 02 F6 | 	mov	arg01, fp
15024     38 4E 85 F1 | 	sub	fp, #56
15028                 | ' 
15028                 | ' write(text)
15028     3C 07 B1 FD | 	call	#_hg010b_spin2_write
1502c                 | ' crlf
1502c     38 0C B1 FD | 	call	#_hg010b_spin2_crlf
15030                 | LR__1703
15030     34 4E 05 F1 | 	add	fp, #52
15034     A7 28 02 FB | 	rdlong	local02, fp
15038     34 4E 85 F1 | 	sub	fp, #52
1503c     52 00 00 FF 
15040     1C E5 05 F1 | 	add	objptr, ##42268
15044     F2 28 62 FC | 	wrlong	local02, objptr
15048     52 00 00 FF 
1504c     1C E5 85 F1 | 	sub	objptr, ##42268
15050                 | LR__1704
15050     34 4E 05 F1 | 	add	fp, #52
15054     A7 28 02 FB | 	rdlong	local02, fp
15058     34 4E 85 F1 | 	sub	fp, #52
1505c     FF FF 3F FF 
15060     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
15064     20 4E 05 51 |  if_ne	add	fp, #32
15068     A7 26 02 5B |  if_ne	rdlong	local01, fp
1506c     20 4E 85 51 |  if_ne	sub	fp, #32
15070     FF FF 7F 5F 
15074     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
15078     E4 FE 9F 5D |  if_ne	jmp	#LR__1702
1507c     A7 F0 03 F6 | 	mov	ptra, fp
15080     B2 00 A0 FD | 	call	#popregs_
15084                 | _do_list_ret
15084     2D 00 64 FD | 	ret
15088                 | 
15088                 | ' 
15088                 | ' '-------------------- load
15088                 | ' 
15088                 | ' sub do_load(amode=0 as integer)  
15088                 | _do_load
15088     01 4A 05 F6 | 	mov	COUNT_, #1
1508c     A8 00 A0 FD | 	call	#pushregs_
15090     AC F0 07 F1 | 	add	ptra, #172
15094     A7 12 62 FC | 	wrlong	arg01, fp
15098     52 00 00 FF 
1509c     D4 E4 05 F1 | 	add	objptr, ##42196
150a0     F2 02 68 FC | 	wrlong	#1, objptr
150a4     08 00 00 FF 
150a8     54 E4 85 F1 | 	sub	objptr, ##4180
150ac     F2 14 02 FB | 	rdlong	arg02, objptr
150b0     0A 13 02 F6 | 	mov	arg01, arg02
150b4     01 12 66 F0 | 	shl	arg01, #1
150b8     0A 13 02 F1 | 	add	arg01, arg02
150bc     02 12 66 F0 | 	shl	arg01, #2
150c0     03 00 00 FF 
150c4     04 E4 85 F1 | 	sub	objptr, ##1540
150c8     F2 12 02 F1 | 	add	arg01, objptr
150cc     09 15 02 FB | 	rdlong	arg02, arg01
150d0     1C 4E 05 F1 | 	add	fp, #28
150d4     A7 14 62 FC | 	wrlong	arg02, fp
150d8     8C 4E 05 F1 | 	add	fp, #140
150dc     A7 12 02 F6 | 	mov	arg01, fp
150e0     47 00 00 FF 
150e4     7C E4 85 F1 | 	sub	objptr, ##36476
150e8     80 4E 85 F1 | 	sub	fp, #128
150ec     09 4F 61 FC | 	wrlong	fp, arg01
150f0                 | ' 
150f0                 | ' inload=1
150f0                 | ' numpar=compiledline(lineptr_e).result.uresult
150f0                 | ' lpoke varptr(line2$),varptr(line2)
150f0                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
150f0     0C 4E 85 F1 | 	sub	fp, #12
150f4     A7 26 02 FB | 	rdlong	local01, fp
150f8     1C 4E 85 F1 | 	sub	fp, #28
150fc     01 26 56 F2 | 	cmps	local01, #1 wc
15100     24 00 90 CD |  if_b	jmp	#LR__1710
15104     00 86 BF FD | 	call	#_pop
15108     04 4E 05 F1 | 	add	fp, #4
1510c     A7 FA 61 FC | 	wrlong	result1, fp
15110     04 4E 05 F1 | 	add	fp, #4
15114     A7 FC 61 FC | 	wrlong	result2, fp
15118     04 4E 05 F1 | 	add	fp, #4
1511c     A7 FE 61 FC | 	wrlong	result3, fp
15120     0C 4E 85 F1 | 	sub	fp, #12
15124     28 00 90 FD | 	jmp	#LR__1711
15128                 | LR__1710
15128     52 00 00 FF 
1512c     C4 E4 05 F1 | 	add	objptr, ##42180
15130     F2 26 02 FB | 	rdlong	local01, objptr
15134     52 00 00 FF 
15138     C4 E4 85 F1 | 	sub	objptr, ##42180
1513c     04 4E 05 F1 | 	add	fp, #4
15140     A7 26 62 FC | 	wrlong	local01, fp
15144     08 4E 05 F1 | 	add	fp, #8
15148     A7 3E 68 FC | 	wrlong	#31, fp
1514c     0C 4E 85 F1 | 	sub	fp, #12
15150                 | LR__1711
15150                 | ' 'print "popped "; t1.result.uresult, t1.result_type
15150                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
15150     0C 4E 05 F1 | 	add	fp, #12
15154     A7 26 02 FB | 	rdlong	local01, fp
15158     0C 4E 85 F1 | 	sub	fp, #12
1515c     2B 26 0E F2 | 	cmp	local01, #43 wz
15160     24 00 90 5D |  if_ne	jmp	#LR__1712
15164     04 4E 05 F1 | 	add	fp, #4
15168     A7 12 02 FB | 	rdlong	arg01, fp
1516c     04 4E 85 F1 | 	sub	fp, #4
15170     0C 87 BF FD | 	call	#_convertstring
15174     04 4E 05 F1 | 	add	fp, #4
15178     A7 FA 61 FC | 	wrlong	result1, fp
1517c     08 4E 05 F1 | 	add	fp, #8
15180     A7 3E 68 FC | 	wrlong	#31, fp
15184     0C 4E 85 F1 | 	sub	fp, #12
15188                 | LR__1712
15188                 | ' if t1.result_type=result_string then
15188     0C 4E 05 F1 | 	add	fp, #12
1518c     A7 26 02 FB | 	rdlong	local01, fp
15190     0C 4E 85 F1 | 	sub	fp, #12
15194     1F 26 0E F2 | 	cmp	local01, #31 wz
15198     E8 02 90 5D |  if_ne	jmp	#LR__1718
1519c                 | '   if amode<>1234 then do_new
1519c     A7 26 02 FB | 	rdlong	local01, fp
151a0     02 00 00 FF 
151a4     D2 26 0E F2 | 	cmp	local01, ##1234 wz
151a8     34 0F B0 5D |  if_ne	call	#_do_new
151ac                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
151ac     04 4E 05 F1 | 	add	fp, #4
151b0     A7 12 02 FB | 	rdlong	arg01, fp
151b4     04 4E 85 F1 | 	sub	fp, #4
151b8     BB 01 00 FF 
151bc     12 14 06 F6 | 	mov	arg02, ##@LR__5972
151c0     00 1F B1 FD | 	call	#__system___string_cmp
151c4     00 FA 0D F2 | 	cmp	result1, #0 wz
151c8     24 00 90 5D |  if_ne	jmp	#LR__1713
151cc     52 00 00 FF 
151d0     C4 E4 05 F1 | 	add	objptr, ##42180
151d4     F2 26 02 FB | 	rdlong	local01, objptr
151d8     52 00 00 FF 
151dc     C4 E4 85 F1 | 	sub	objptr, ##42180
151e0     04 4E 05 F1 | 	add	fp, #4
151e4     A7 26 62 FC | 	wrlong	local01, fp
151e8     04 4E 85 F1 | 	sub	fp, #4
151ec     20 00 90 FD | 	jmp	#LR__1714
151f0                 | LR__1713
151f0     04 4E 05 F1 | 	add	fp, #4
151f4     A7 26 02 FB | 	rdlong	local01, fp
151f8     04 4E 85 F1 | 	sub	fp, #4
151fc     52 00 00 FF 
15200     C4 E4 05 F1 | 	add	objptr, ##42180
15204     F2 26 62 FC | 	wrlong	local01, objptr
15208     52 00 00 FF 
1520c     C4 E4 85 F1 | 	sub	objptr, ##42180
15210                 | LR__1714
15210                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
15210     09 12 06 F6 | 	mov	arg01, #9
15214     E0 71 B1 FD | 	call	#__system__close
15218     09 26 06 F6 | 	mov	local01, #9
1521c     4A 00 00 FF 
15220     94 E4 05 F1 | 	add	objptr, ##38036
15224     F2 12 02 FB | 	rdlong	arg01, objptr
15228     4A 00 00 FF 
1522c     94 E4 85 F1 | 	sub	objptr, ##38036
15230     BB 01 00 FF 
15234     13 14 06 F6 | 	mov	arg02, ##@LR__5973
15238     BC 1E B1 FD | 	call	#__system___string_concat
1523c     FD 12 02 F6 | 	mov	arg01, result1
15240     04 4E 05 F1 | 	add	fp, #4
15244     A7 14 02 FB | 	rdlong	arg02, fp
15248     04 4E 85 F1 | 	sub	fp, #4
1524c     A8 1E B1 FD | 	call	#__system___string_concat
15250     FD 14 02 F6 | 	mov	arg02, result1
15254     13 13 02 F6 | 	mov	arg01, local01
15258     00 16 06 F6 | 	mov	arg03, #0
1525c     40 2A B1 FD | 	call	#__system___basic_open_string
15260     20 E6 05 F1 | 	add	ptr___system__dat__, #32
15264     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
15268     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
1526c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
15270     14 4E 05 F1 | 	add	fp, #20
15274     A7 FA 61 FC | 	wrlong	result1, fp
15278                 | '   r=geterr() 
15278                 | '   if r then 
15278     14 4E 85 F1 | 	sub	fp, #20
1527c     54 01 90 AD |  if_e	jmp	#LR__1716
15280                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
15280     09 12 06 F6 | 	mov	arg01, #9
15284     70 71 B1 FD | 	call	#__system__close
15288     09 26 06 F6 | 	mov	local01, #9
1528c     4A 00 00 FF 
15290     94 E4 05 F1 | 	add	objptr, ##38036
15294     F2 12 02 FB | 	rdlong	arg01, objptr
15298     4A 00 00 FF 
1529c     94 E4 85 F1 | 	sub	objptr, ##38036
152a0     BB 01 00 FF 
152a4     15 14 06 F6 | 	mov	arg02, ##@LR__5974
152a8     4C 1E B1 FD | 	call	#__system___string_concat
152ac     FD 12 02 F6 | 	mov	arg01, result1
152b0     04 4E 05 F1 | 	add	fp, #4
152b4     A7 14 02 FB | 	rdlong	arg02, fp
152b8     04 4E 85 F1 | 	sub	fp, #4
152bc     38 1E B1 FD | 	call	#__system___string_concat
152c0     FD 12 02 F6 | 	mov	arg01, result1
152c4     BB 01 00 FF 
152c8     17 14 06 F6 | 	mov	arg02, ##@LR__5975
152cc     28 1E B1 FD | 	call	#__system___string_concat
152d0     FD 14 02 F6 | 	mov	arg02, result1
152d4     13 13 02 F6 | 	mov	arg01, local01
152d8     00 16 06 F6 | 	mov	arg03, #0
152dc     C0 29 B1 FD | 	call	#__system___basic_open_string
152e0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
152e4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
152e8     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
152ec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
152f0     14 4E 05 F1 | 	add	fp, #20
152f4     A7 FA 61 FC | 	wrlong	result1, fp
152f8                 | '     r=geterr() 
152f8                 | '     if r then 
152f8     14 4E 85 F1 | 	sub	fp, #20
152fc     A0 00 90 AD |  if_e	jmp	#LR__1715
15300                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
15300     00 12 06 F6 | 	mov	arg01, #0
15304     38 7A B1 FD | 	call	#__system___getiolock_0614
15308     FD 12 02 F6 | 	mov	arg01, result1
1530c     8C 1D B1 FD | 	call	#__system___lockmem
15310     BB 01 00 FF 
15314     1C 14 06 F6 | 	mov	arg02, ##@LR__5976
15318     00 12 06 F6 | 	mov	arg01, #0
1531c     00 16 06 F6 | 	mov	arg03, #0
15320     70 2A B1 FD | 	call	#__system___basic_print_string
15324     14 4E 05 F1 | 	add	fp, #20
15328     A7 14 02 FB | 	rdlong	arg02, fp
1532c     14 4E 85 F1 | 	sub	fp, #20
15330     00 12 06 F6 | 	mov	arg01, #0
15334     00 16 06 F6 | 	mov	arg03, #0
15338     0A 18 06 F6 | 	mov	arg04, #10
1533c     98 2A B1 FD | 	call	#__system___basic_print_integer
15340     BB 01 00 FF 
15344     2A 14 06 F6 | 	mov	arg02, ##@LR__5977
15348     00 12 06 F6 | 	mov	arg01, #0
1534c     00 16 06 F6 | 	mov	arg03, #0
15350     40 2A B1 FD | 	call	#__system___basic_print_string
15354     00 26 06 F6 | 	mov	local01, #0
15358     14 4E 05 F1 | 	add	fp, #20
1535c     A7 12 02 FB | 	rdlong	arg01, fp
15360     14 4E 85 F1 | 	sub	fp, #20
15364     C4 46 B1 FD | 	call	#__system___strerror
15368     FD 14 02 F6 | 	mov	arg02, result1
1536c     13 13 02 F6 | 	mov	arg01, local01
15370     00 16 06 F6 | 	mov	arg03, #0
15374     1C 2A B1 FD | 	call	#__system___basic_print_string
15378     00 12 06 F6 | 	mov	arg01, #0
1537c     0A 14 06 F6 | 	mov	arg02, #10
15380     00 16 06 F6 | 	mov	arg03, #0
15384     B4 29 B1 FD | 	call	#__system___basic_print_char
15388     00 12 06 F6 | 	mov	arg01, #0
1538c     B0 79 B1 FD | 	call	#__system___getiolock_0614
15390     FD 00 68 FC | 	wrlong	#0, result1
15394     09 12 06 F6 | 	mov	arg01, #9
15398     5C 70 B1 FD | 	call	#__system__close
1539c     94 01 90 FD | 	jmp	#LR__1720
153a0                 | LR__1715
153a0     52 00 00 FF 
153a4     C4 E4 05 F1 | 	add	objptr, ##42180
153a8     F2 12 02 FB | 	rdlong	arg01, objptr
153ac     52 00 00 FF 
153b0     C4 E4 85 F1 | 	sub	objptr, ##42180
153b4     BB 01 00 FF 
153b8     2D 14 06 F6 | 	mov	arg02, ##@LR__5978
153bc     38 1D B1 FD | 	call	#__system___string_concat
153c0     52 00 00 FF 
153c4     C4 E4 05 F1 | 	add	objptr, ##42180
153c8     F2 FA 61 FC | 	wrlong	result1, objptr
153cc     52 00 00 FF 
153d0     C4 E4 85 F1 | 	sub	objptr, ##42180
153d4                 | LR__1716
153d4                 | '   close #9: open currentdir$+"/"+loadname for input as #9
153d4     09 12 06 F6 | 	mov	arg01, #9
153d8     1C 70 B1 FD | 	call	#__system__close
153dc     09 26 06 F6 | 	mov	local01, #9
153e0     4A 00 00 FF 
153e4     94 E4 05 F1 | 	add	objptr, ##38036
153e8     F2 12 02 FB | 	rdlong	arg01, objptr
153ec     4A 00 00 FF 
153f0     94 E4 85 F1 | 	sub	objptr, ##38036
153f4     BB 01 00 FF 
153f8     32 14 06 F6 | 	mov	arg02, ##@LR__5979
153fc     F8 1C B1 FD | 	call	#__system___string_concat
15400     FD 12 02 F6 | 	mov	arg01, result1
15404     52 00 00 FF 
15408     C4 E4 05 F1 | 	add	objptr, ##42180
1540c     F2 14 02 FB | 	rdlong	arg02, objptr
15410     52 00 00 FF 
15414     C4 E4 85 F1 | 	sub	objptr, ##42180
15418     DC 1C B1 FD | 	call	#__system___string_concat
1541c     FD 14 02 F6 | 	mov	arg02, result1
15420     13 13 02 F6 | 	mov	arg01, local01
15424     00 16 06 F6 | 	mov	arg03, #0
15428     74 28 B1 FD | 	call	#__system___basic_open_string
1542c                 | '   do
1542c                 | LR__1717
1542c     09 12 06 F6 | 	mov	arg01, #9
15430     74 1E B1 FD | 	call	#__system___basic_read_line
15434     FD 26 02 F6 | 	mov	local01, result1
15438     37 00 00 FF 
1543c     1C E4 05 F1 | 	add	objptr, ##28188
15440     F2 26 62 FC | 	wrlong	local01, objptr
15444     37 00 00 FF 
15448     1C E4 85 F1 | 	sub	objptr, ##28188
1544c     D8 C3 BE FD | 	call	#_interpret
15450     37 00 00 FF 
15454     1C E4 05 F1 | 	add	objptr, ##28188
15458     F2 12 02 FB | 	rdlong	arg01, objptr
1545c     37 00 00 FF 
15460     1C E4 85 F1 | 	sub	objptr, ##28188
15464     BB 01 00 FF 
15468     34 14 06 F6 | 	mov	arg02, ##@LR__5980
1546c     54 1C B1 FD | 	call	#__system___string_cmp
15470     00 FA 0D F2 | 	cmp	result1, #0 wz
15474     B4 FF 9F 5D |  if_ne	jmp	#LR__1717
15478                 | '   close #9   
15478     09 12 06 F6 | 	mov	arg01, #9
1547c     78 6F B1 FD | 	call	#__system__close
15480     0C 00 90 FD | 	jmp	#LR__1719
15484                 | LR__1718
15484     1E 12 06 F6 | 	mov	arg01, #30
15488     00 14 06 F6 | 	mov	arg02, #0
1548c     5C E1 B0 FD | 	call	#_printerror
15490                 | LR__1719
15490                 | ' print "Loaded ";currentdir$+"/"+loadname
15490     00 12 06 F6 | 	mov	arg01, #0
15494     A8 78 B1 FD | 	call	#__system___getiolock_0614
15498     FD 12 02 F6 | 	mov	arg01, result1
1549c     FC 1B B1 FD | 	call	#__system___lockmem
154a0     BB 01 00 FF 
154a4     35 14 06 F6 | 	mov	arg02, ##@LR__5981
154a8     00 12 06 F6 | 	mov	arg01, #0
154ac     00 16 06 F6 | 	mov	arg03, #0
154b0     E0 28 B1 FD | 	call	#__system___basic_print_string
154b4     00 26 06 F6 | 	mov	local01, #0
154b8     4A 00 00 FF 
154bc     94 E4 05 F1 | 	add	objptr, ##38036
154c0     F2 12 02 FB | 	rdlong	arg01, objptr
154c4     4A 00 00 FF 
154c8     94 E4 85 F1 | 	sub	objptr, ##38036
154cc     BB 01 00 FF 
154d0     3D 14 06 F6 | 	mov	arg02, ##@LR__5982
154d4     20 1C B1 FD | 	call	#__system___string_concat
154d8     FD 12 02 F6 | 	mov	arg01, result1
154dc     52 00 00 FF 
154e0     C4 E4 05 F1 | 	add	objptr, ##42180
154e4     F2 14 02 FB | 	rdlong	arg02, objptr
154e8     52 00 00 FF 
154ec     C4 E4 85 F1 | 	sub	objptr, ##42180
154f0     04 1C B1 FD | 	call	#__system___string_concat
154f4     FD 14 02 F6 | 	mov	arg02, result1
154f8     13 13 02 F6 | 	mov	arg01, local01
154fc     00 16 06 F6 | 	mov	arg03, #0
15500     90 28 B1 FD | 	call	#__system___basic_print_string
15504     00 12 06 F6 | 	mov	arg01, #0
15508     0A 14 06 F6 | 	mov	arg02, #10
1550c     00 16 06 F6 | 	mov	arg03, #0
15510     28 28 B1 FD | 	call	#__system___basic_print_char
15514     00 12 06 F6 | 	mov	arg01, #0
15518     24 78 B1 FD | 	call	#__system___getiolock_0614
1551c     FD 00 68 FC | 	wrlong	#0, result1
15520     52 00 00 FF 
15524     D4 E4 05 F1 | 	add	objptr, ##42196
15528     F2 00 68 FC | 	wrlong	#0, objptr
1552c     52 00 00 FF 
15530     D4 E4 85 F1 | 	sub	objptr, ##42196
15534                 | LR__1720
15534     A7 F0 03 F6 | 	mov	ptra, fp
15538     B2 00 A0 FD | 	call	#popregs_
1553c                 | _do_load_ret
1553c     2D 00 64 FD | 	ret
15540                 | 
15540                 | ' 
15540                 | ' '-------------------- log
15540                 | ' 
15540                 | ' sub do_log
15540                 | _do_log
15540     01 4A 05 F6 | 	mov	COUNT_, #1
15544     A8 00 A0 FD | 	call	#pushregs_
15548     14 F0 07 F1 | 	add	ptra, #20
1554c     4A 00 00 FF 
15550     80 E4 05 F1 | 	add	objptr, ##38016
15554     F2 26 02 FB | 	rdlong	local01, objptr
15558     13 17 02 F6 | 	mov	arg03, local01
1555c     01 16 66 F0 | 	shl	arg03, #1
15560     13 17 02 F1 | 	add	arg03, local01
15564     02 16 66 F0 | 	shl	arg03, #2
15568     03 00 00 FF 
1556c     04 E4 85 F1 | 	sub	objptr, ##1540
15570     F2 16 02 F1 | 	add	arg03, objptr
15574     0B 17 0A FB | 	rdlong	arg03, arg03 wz
15578     0C 4E 05 F1 | 	add	fp, #12
1557c     A7 16 62 FC | 	wrlong	arg03, fp
15580                 | ' 
15580                 | ' numpar=compiledline(lineptr_e).result.uresult
15580                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
15580     0C 4E 85 F1 | 	sub	fp, #12
15584     47 00 00 FF 
15588     7C E4 85 F1 | 	sub	objptr, ##36476
1558c     0C 4E 05 51 |  if_ne	add	fp, #12
15590     A7 26 02 5B |  if_ne	rdlong	local01, fp
15594     0C 4E 85 51 |  if_ne	sub	fp, #12
15598     03 26 16 52 |  if_ne	cmp	local01, #3 wc
1559c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1730
155a0     00 12 06 F6 | 	mov	arg01, #0
155a4     98 77 B1 FD | 	call	#__system___getiolock_0614
155a8     FD 12 02 F6 | 	mov	arg01, result1
155ac     EC 1A B1 FD | 	call	#__system___lockmem
155b0     BB 01 00 FF 
155b4     3F 14 06 F6 | 	mov	arg02, ##@LR__5983
155b8     00 12 06 F6 | 	mov	arg01, #0
155bc     00 16 06 F6 | 	mov	arg03, #0
155c0     D0 27 B1 FD | 	call	#__system___basic_print_string
155c4     00 12 06 F6 | 	mov	arg01, #0
155c8     74 77 B1 FD | 	call	#__system___getiolock_0614
155cc     FD 00 68 FC | 	wrlong	#0, result1
155d0     27 12 06 F6 | 	mov	arg01, #39
155d4     00 14 06 F6 | 	mov	arg02, #0
155d8     10 E0 B0 FD | 	call	#_printerror
155dc     D0 00 90 FD | 	jmp	#LR__1733
155e0                 | LR__1730
155e0                 | ' if numpar=2 then 
155e0     0C 4E 05 F1 | 	add	fp, #12
155e4     A7 26 02 FB | 	rdlong	local01, fp
155e8     0C 4E 85 F1 | 	sub	fp, #12
155ec     02 26 0E F2 | 	cmp	local01, #2 wz
155f0     48 00 90 5D |  if_ne	jmp	#LR__1731
155f4     10 81 BF FD | 	call	#_pop
155f8     FF 26 02 F6 | 	mov	local01, result3
155fc     A7 FA 61 FC | 	wrlong	result1, fp
15600     04 4E 05 F1 | 	add	fp, #4
15604     A7 FC 61 FC | 	wrlong	result2, fp
15608     04 4E 05 F1 | 	add	fp, #4
1560c     A7 26 62 FC | 	wrlong	local01, fp
15610     08 4E 85 F1 | 	sub	fp, #8
15614     A7 12 02 F6 | 	mov	arg01, fp
15618     8C 83 BF FD | 	call	#_converttofloat
1561c     FD 14 02 F6 | 	mov	arg02, result1
15620     FC 16 20 FF 
15624     54 12 06 F6 | 	mov	arg01, ##1076754516
15628     BC 58 B1 FD | 	call	#__system____builtin_logbase
1562c     10 4E 05 F1 | 	add	fp, #16
15630     A7 FA 61 FC | 	wrlong	result1, fp
15634     10 4E 85 F1 | 	sub	fp, #16
15638     10 00 90 FD | 	jmp	#LR__1732
1563c                 | LR__1731
1563c     10 4E 05 F1 | 	add	fp, #16
15640     00 C0 9F FF 
15644     A7 00 68 FC | 	wrlong	##1065353216, fp
15648     10 4E 85 F1 | 	sub	fp, #16
1564c                 | LR__1732
1564c     B8 80 BF FD | 	call	#_pop
15650     FF 26 02 F6 | 	mov	local01, result3
15654     A7 FA 61 FC | 	wrlong	result1, fp
15658     04 4E 05 F1 | 	add	fp, #4
1565c     A7 FC 61 FC | 	wrlong	result2, fp
15660     04 4E 05 F1 | 	add	fp, #4
15664     A7 26 62 FC | 	wrlong	local01, fp
15668     08 4E 85 F1 | 	sub	fp, #8
1566c     A7 12 02 F6 | 	mov	arg01, fp
15670     34 83 BF FD | 	call	#_converttofloat
15674     FD 14 02 F6 | 	mov	arg02, result1
15678     FC 16 20 FF 
1567c     54 12 06 F6 | 	mov	arg01, ##1076754516
15680     64 58 B1 FD | 	call	#__system____builtin_logbase
15684     FD 12 02 F6 | 	mov	arg01, result1
15688     10 4E 05 F1 | 	add	fp, #16
1568c     A7 14 02 FB | 	rdlong	arg02, fp
15690     10 4E 85 F1 | 	sub	fp, #16
15694     84 4A B1 FD | 	call	#__system___float_div
15698     A7 FA 61 FC | 	wrlong	result1, fp
1569c     08 4E 05 F1 | 	add	fp, #8
156a0     A7 3C 68 FC | 	wrlong	#30, fp
156a4     08 4E 85 F1 | 	sub	fp, #8
156a8     A7 12 02 F6 | 	mov	arg01, fp
156ac     F0 80 BF FD | 	call	#_push
156b0                 | LR__1733
156b0     A7 F0 03 F6 | 	mov	ptra, fp
156b4     B2 00 A0 FD | 	call	#popregs_
156b8                 | _do_log_ret
156b8     2D 00 64 FD | 	ret
156bc                 | 
156bc                 | ' 
156bc                 | ' '-------------------- lpeek
156bc                 | ' 
156bc                 | ' sub do_lpeek
156bc                 | _do_lpeek
156bc     00 4A 05 F6 | 	mov	COUNT_, #0
156c0     A8 00 A0 FD | 	call	#pushregs_
156c4     14 F0 07 F1 | 	add	ptra, #20
156c8     3C 80 BF FD | 	call	#_pop
156cc     A7 FA 61 FC | 	wrlong	result1, fp
156d0     04 4E 05 F1 | 	add	fp, #4
156d4     A7 FC 61 FC | 	wrlong	result2, fp
156d8     04 4E 05 F1 | 	add	fp, #4
156dc     A7 FE 61 FC | 	wrlong	result3, fp
156e0     08 4E 85 F1 | 	sub	fp, #8
156e4     A7 12 02 F6 | 	mov	arg01, fp
156e8     00 82 BF FD | 	call	#_converttoint
156ec     0C 4E 05 F1 | 	add	fp, #12
156f0     A7 FA 61 FC | 	wrlong	result1, fp
156f4                 | ' 
156f4                 | ' t1=pop()
156f4                 | ' a=converttoint(t1)
156f4                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
156f4     0C 4E 85 F1 | 	sub	fp, #12
156f8     00 04 00 FF 
156fc     00 FA 15 F2 | 	cmp	result1, ##524288 wc
15700     1C 00 90 3D |  if_ae	jmp	#LR__1740
15704     0C 4E 05 F1 | 	add	fp, #12
15708     A7 12 02 FB | 	rdlong	arg01, fp
1570c     09 FB 01 FB | 	rdlong	result1, arg01
15710     04 4E 05 F1 | 	add	fp, #4
15714     A7 FA 61 FC | 	wrlong	result1, fp
15718     10 4E 85 F1 | 	sub	fp, #16
1571c     1C 00 90 FD | 	jmp	#LR__1741
15720                 | LR__1740
15720     0C 4E 05 F1 | 	add	fp, #12
15724     A7 12 02 FB | 	rdlong	arg01, fp
15728     0C 4E 85 F1 | 	sub	fp, #12
1572c     8C E1 B0 FD | 	call	#_pslpeek
15730     10 4E 05 F1 | 	add	fp, #16
15734     A7 FA 61 FC | 	wrlong	result1, fp
15738     10 4E 85 F1 | 	sub	fp, #16
1573c                 | LR__1741
1573c     08 4E 05 F1 | 	add	fp, #8
15740     A7 3A 68 FC | 	wrlong	#29, fp
15744     08 4E 05 F1 | 	add	fp, #8
15748     A7 12 02 FB | 	rdlong	arg01, fp
1574c     10 4E 85 F1 | 	sub	fp, #16
15750     A7 12 62 FC | 	wrlong	arg01, fp
15754     A7 12 02 F6 | 	mov	arg01, fp
15758     44 80 BF FD | 	call	#_push
1575c     A7 F0 03 F6 | 	mov	ptra, fp
15760     B2 00 A0 FD | 	call	#popregs_
15764                 | _do_lpeek_ret
15764     2D 00 64 FD | 	ret
15768                 | 
15768                 | ' 
15768                 | ' '-------------------- lpoke
15768                 | ' 
15768                 | ' sub do_lpoke
15768                 | _do_lpoke
15768     01 4A 05 F6 | 	mov	COUNT_, #1
1576c     A8 00 A0 FD | 	call	#pushregs_
15770     20 F0 07 F1 | 	add	ptra, #32
15774     90 7F BF FD | 	call	#_pop
15778     FD 14 02 F6 | 	mov	arg02, result1
1577c     FE 12 02 F6 | 	mov	arg01, result2
15780     FF 26 02 F6 | 	mov	local01, result3
15784     A7 14 62 FC | 	wrlong	arg02, fp
15788     04 4E 05 F1 | 	add	fp, #4
1578c     A7 12 62 FC | 	wrlong	arg01, fp
15790     04 4E 05 F1 | 	add	fp, #4
15794     A7 26 62 FC | 	wrlong	local01, fp
15798     08 4E 85 F1 | 	sub	fp, #8
1579c     68 7F BF FD | 	call	#_pop
157a0     FF 26 02 F6 | 	mov	local01, result3
157a4     0C 4E 05 F1 | 	add	fp, #12
157a8     A7 FA 61 FC | 	wrlong	result1, fp
157ac     04 4E 05 F1 | 	add	fp, #4
157b0     A7 FC 61 FC | 	wrlong	result2, fp
157b4     04 4E 05 F1 | 	add	fp, #4
157b8     A7 26 62 FC | 	wrlong	local01, fp
157bc     08 4E 85 F1 | 	sub	fp, #8
157c0     A7 12 02 F6 | 	mov	arg01, fp
157c4     0C 4E 85 F1 | 	sub	fp, #12
157c8     20 81 BF FD | 	call	#_converttoint
157cc     18 4E 05 F1 | 	add	fp, #24
157d0     A7 FA 61 FC | 	wrlong	result1, fp
157d4     18 4E 85 F1 | 	sub	fp, #24
157d8     A7 12 02 F6 | 	mov	arg01, fp
157dc     0C 81 BF FD | 	call	#_converttoint
157e0     1C 4E 05 F1 | 	add	fp, #28
157e4     A7 FA 61 FC | 	wrlong	result1, fp
157e8                 | ' 
157e8                 | ' t1=pop() 'value
157e8                 | ' t2=pop() 
157e8                 | ' a=converttoint(t2) : v=converttoint(t1)
157e8                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
157e8     04 4E 85 F1 | 	sub	fp, #4
157ec     A7 26 02 FB | 	rdlong	local01, fp
157f0     18 4E 85 F1 | 	sub	fp, #24
157f4     00 04 00 FF 
157f8     00 26 16 F2 | 	cmp	local01, ##524288 wc
157fc     1C 00 90 3D |  if_ae	jmp	#LR__1750
15800     18 4E 05 F1 | 	add	fp, #24
15804     A7 12 02 FB | 	rdlong	arg01, fp
15808     04 4E 05 F1 | 	add	fp, #4
1580c     A7 14 02 FB | 	rdlong	arg02, fp
15810     1C 4E 85 F1 | 	sub	fp, #28
15814     09 15 62 FC | 	wrlong	arg02, arg01
15818     18 00 90 FD | 	jmp	#LR__1751
1581c                 | LR__1750
1581c     18 4E 05 F1 | 	add	fp, #24
15820     A7 12 02 FB | 	rdlong	arg01, fp
15824     04 4E 05 F1 | 	add	fp, #4
15828     A7 14 02 FB | 	rdlong	arg02, fp
1582c     1C 4E 85 F1 | 	sub	fp, #28
15830     58 DF B0 FD | 	call	#_pslpoke
15834                 | LR__1751
15834     A7 F0 03 F6 | 	mov	ptra, fp
15838     B2 00 A0 FD | 	call	#popregs_
1583c                 | _do_lpoke_ret
1583c     2D 00 64 FD | 	ret
15840                 | 
15840                 | ' 
15840                 | ' '-------------------- memlo
15840                 | ' 
15840                 | ' sub do_memlo
15840                 | _do_memlo
15840     00 4A 05 F6 | 	mov	COUNT_, #0
15844     A8 00 A0 FD | 	call	#pushregs_
15848     0C F0 07 F1 | 	add	ptra, #12
1584c     43 00 00 FF 
15850     5C E4 05 F1 | 	add	objptr, ##34396
15854     F2 12 02 FB | 	rdlong	arg01, objptr
15858     43 00 00 FF 
1585c     5C E4 85 F1 | 	sub	objptr, ##34396
15860     A7 12 62 FC | 	wrlong	arg01, fp
15864     08 4E 05 F1 | 	add	fp, #8
15868     A7 3A 68 FC | 	wrlong	#29, fp
1586c     08 4E 85 F1 | 	sub	fp, #8
15870     A7 12 02 F6 | 	mov	arg01, fp
15874     28 7F BF FD | 	call	#_push
15878     A7 F0 03 F6 | 	mov	ptra, fp
1587c     B2 00 A0 FD | 	call	#popregs_
15880                 | _do_memlo_ret
15880     2D 00 64 FD | 	ret
15884                 | 
15884                 | ' 
15884                 | ' '-------------------- memtop
15884                 | ' 
15884                 | ' sub do_memtop
15884                 | _do_memtop
15884     00 4A 05 F6 | 	mov	COUNT_, #0
15888     A8 00 A0 FD | 	call	#pushregs_
1588c     0C F0 07 F1 | 	add	ptra, #12
15890     52 00 00 FF 
15894     98 E4 05 F1 | 	add	objptr, ##42136
15898     F2 12 02 FB | 	rdlong	arg01, objptr
1589c     52 00 00 FF 
158a0     98 E4 85 F1 | 	sub	objptr, ##42136
158a4     A7 12 62 FC | 	wrlong	arg01, fp
158a8     08 4E 05 F1 | 	add	fp, #8
158ac     A7 3A 68 FC | 	wrlong	#29, fp
158b0     08 4E 85 F1 | 	sub	fp, #8
158b4     A7 12 02 F6 | 	mov	arg01, fp
158b8     E4 7E BF FD | 	call	#_push
158bc     A7 F0 03 F6 | 	mov	ptra, fp
158c0     B2 00 A0 FD | 	call	#popregs_
158c4                 | _do_memtop_ret
158c4     2D 00 64 FD | 	ret
158c8                 | 
158c8                 | ' 
158c8                 | ' '-------------------- mid$
158c8                 | ' 
158c8                 | ' sub do_mid
158c8                 | _do_mid
158c8     00 4A 05 F6 | 	mov	COUNT_, #0
158cc     A8 00 A0 FD | 	call	#pushregs_
158d0     18 F0 07 F1 | 	add	ptra, #24
158d4     4A 00 00 FF 
158d8     80 E4 05 F1 | 	add	objptr, ##38016
158dc     F2 16 02 FB | 	rdlong	arg03, objptr
158e0     0B 15 02 F6 | 	mov	arg02, arg03
158e4     01 14 66 F0 | 	shl	arg02, #1
158e8     0B 15 02 F1 | 	add	arg02, arg03
158ec     02 14 66 F0 | 	shl	arg02, #2
158f0     03 00 00 FF 
158f4     04 E4 85 F1 | 	sub	objptr, ##1540
158f8     F2 14 02 F1 | 	add	arg02, objptr
158fc     0A 17 02 FB | 	rdlong	arg03, arg02
15900     0C 4E 05 F1 | 	add	fp, #12
15904     A7 16 62 FC | 	wrlong	arg03, fp
15908                 | ' 
15908                 | ' numpar=compiledline(lineptr_e).result.uresult
15908                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
15908     0C 4E 85 F1 | 	sub	fp, #12
1590c     03 16 0E F2 | 	cmp	arg03, #3 wz
15910     47 00 00 FF 
15914     7C E4 85 F1 | 	sub	objptr, ##36476
15918     40 00 90 AD |  if_e	jmp	#LR__1760
1591c     00 12 06 F6 | 	mov	arg01, #0
15920     1C 74 B1 FD | 	call	#__system___getiolock_0614
15924     FD 12 02 F6 | 	mov	arg01, result1
15928     70 17 B1 FD | 	call	#__system___lockmem
1592c     BB 01 00 FF 
15930     45 14 06 F6 | 	mov	arg02, ##@LR__5984
15934     00 12 06 F6 | 	mov	arg01, #0
15938     00 16 06 F6 | 	mov	arg03, #0
1593c     54 24 B1 FD | 	call	#__system___basic_print_string
15940     00 12 06 F6 | 	mov	arg01, #0
15944     F8 73 B1 FD | 	call	#__system___getiolock_0614
15948     FD 00 68 FC | 	wrlong	#0, result1
1594c     27 12 06 F6 | 	mov	arg01, #39
15950     00 14 06 F6 | 	mov	arg02, #0
15954     94 DC B0 FD | 	call	#_printerror
15958     2C 01 90 FD | 	jmp	#LR__1763
1595c                 | LR__1760
1595c     A8 7D BF FD | 	call	#_pop
15960     FF 16 02 F6 | 	mov	arg03, result3
15964     A7 FA 61 FC | 	wrlong	result1, fp
15968     04 4E 05 F1 | 	add	fp, #4
1596c     A7 FC 61 FC | 	wrlong	result2, fp
15970     04 4E 05 F1 | 	add	fp, #4
15974     A7 16 62 FC | 	wrlong	arg03, fp
15978     08 4E 85 F1 | 	sub	fp, #8
1597c     A7 12 02 F6 | 	mov	arg01, fp
15980     68 7F BF FD | 	call	#_converttoint
15984     FD 16 02 F6 | 	mov	arg03, result1
15988     14 4E 05 F1 | 	add	fp, #20
1598c     A7 16 62 FC | 	wrlong	arg03, fp
15990     14 4E 85 F1 | 	sub	fp, #20
15994     70 7D BF FD | 	call	#_pop
15998     FF 16 02 F6 | 	mov	arg03, result3
1599c     A7 FA 61 FC | 	wrlong	result1, fp
159a0     04 4E 05 F1 | 	add	fp, #4
159a4     A7 FC 61 FC | 	wrlong	result2, fp
159a8     04 4E 05 F1 | 	add	fp, #4
159ac     A7 16 62 FC | 	wrlong	arg03, fp
159b0     08 4E 85 F1 | 	sub	fp, #8
159b4     A7 12 02 F6 | 	mov	arg01, fp
159b8     30 7F BF FD | 	call	#_converttoint
159bc     FD 16 02 F6 | 	mov	arg03, result1
159c0     10 4E 05 F1 | 	add	fp, #16
159c4     A7 16 62 FC | 	wrlong	arg03, fp
159c8     10 4E 85 F1 | 	sub	fp, #16
159cc     38 7D BF FD | 	call	#_pop
159d0     FF 16 02 F6 | 	mov	arg03, result3
159d4     A7 FA 61 FC | 	wrlong	result1, fp
159d8     04 4E 05 F1 | 	add	fp, #4
159dc     A7 FC 61 FC | 	wrlong	result2, fp
159e0     04 4E 05 F1 | 	add	fp, #4
159e4     A7 16 62 FC | 	wrlong	arg03, fp
159e8                 | ' t1=pop() : arg2=converttoint(t1)
159e8                 | ' t1=pop() : arg1=converttoint(t1)
159e8                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
159e8     08 4E 85 F1 | 	sub	fp, #8
159ec     2B 16 0E F2 | 	cmp	arg03, #43 wz
159f0     18 00 90 5D |  if_ne	jmp	#LR__1761
159f4     A7 12 02 FB | 	rdlong	arg01, fp
159f8     84 7E BF FD | 	call	#_convertstring
159fc     A7 FA 61 FC | 	wrlong	result1, fp
15a00     08 4E 05 F1 | 	add	fp, #8
15a04     A7 3E 68 FC | 	wrlong	#31, fp
15a08     08 4E 85 F1 | 	sub	fp, #8
15a0c                 | LR__1761
15a0c                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
15a0c     08 4E 05 F1 | 	add	fp, #8
15a10     A7 16 02 FB | 	rdlong	arg03, fp
15a14     08 4E 85 F1 | 	sub	fp, #8
15a18     1F 16 0E F2 | 	cmp	arg03, #31 wz
15a1c     40 00 90 AD |  if_e	jmp	#LR__1762
15a20     00 12 06 F6 | 	mov	arg01, #0
15a24     18 73 B1 FD | 	call	#__system___getiolock_0614
15a28     FD 12 02 F6 | 	mov	arg01, result1
15a2c     6C 16 B1 FD | 	call	#__system___lockmem
15a30     BB 01 00 FF 
15a34     4C 14 06 F6 | 	mov	arg02, ##@LR__5985
15a38     00 12 06 F6 | 	mov	arg01, #0
15a3c     00 16 06 F6 | 	mov	arg03, #0
15a40     50 23 B1 FD | 	call	#__system___basic_print_string
15a44     00 12 06 F6 | 	mov	arg01, #0
15a48     F4 72 B1 FD | 	call	#__system___getiolock_0614
15a4c     FD 00 68 FC | 	wrlong	#0, result1
15a50     0F 12 06 F6 | 	mov	arg01, #15
15a54     00 14 06 F6 | 	mov	arg02, #0
15a58     90 DB B0 FD | 	call	#_printerror
15a5c     28 00 90 FD | 	jmp	#LR__1763
15a60                 | LR__1762
15a60     A7 12 02 FB | 	rdlong	arg01, fp
15a64     10 4E 05 F1 | 	add	fp, #16
15a68     A7 14 02 FB | 	rdlong	arg02, fp
15a6c     04 4E 05 F1 | 	add	fp, #4
15a70     A7 16 02 FB | 	rdlong	arg03, fp
15a74     14 4E 85 F1 | 	sub	fp, #20
15a78     B8 37 B1 FD | 	call	#__system__Mid_S
15a7c     A7 FA 61 FC | 	wrlong	result1, fp
15a80     A7 12 02 F6 | 	mov	arg01, fp
15a84     18 7D BF FD | 	call	#_push
15a88                 | LR__1763
15a88     A7 F0 03 F6 | 	mov	ptra, fp
15a8c     B2 00 A0 FD | 	call	#popregs_
15a90                 | _do_mid_ret
15a90     2D 00 64 FD | 	ret
15a94                 | 
15a94                 | ' 
15a94                 | ' '-------------------- mkdir
15a94                 | ' 
15a94                 | ' sub do_mkdir
15a94                 | _do_mkdir
15a94     04 4A 05 F6 | 	mov	COUNT_, #4
15a98     A8 00 A0 FD | 	call	#pushregs_
15a9c     68 7C BF FD | 	call	#_pop
15aa0     FE 18 02 F6 | 	mov	arg04, result2
15aa4     FF 16 02 F6 | 	mov	arg03, result3
15aa8     FD 26 02 F6 | 	mov	local01, result1
15aac     0C 29 02 F6 | 	mov	local02, arg04
15ab0     0B 2B 02 F6 | 	mov	local03, arg03
15ab4                 | ' 
15ab4                 | ' t1=pop()
15ab4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15ab4     2B 2A 0E F2 | 	cmp	local03, #43 wz
15ab8     10 00 90 5D |  if_ne	jmp	#LR__1770
15abc     13 13 02 F6 | 	mov	arg01, local01
15ac0     BC 7D BF FD | 	call	#_convertstring
15ac4     FD 26 02 F6 | 	mov	local01, result1
15ac8     1F 2A 06 F6 | 	mov	local03, #31
15acc                 | LR__1770
15acc                 | ' if t1.result_type<>result_string then printerror(15): return
15acc     1F 2A 0E F2 | 	cmp	local03, #31 wz
15ad0     10 00 90 AD |  if_e	jmp	#LR__1771
15ad4     0F 12 06 F6 | 	mov	arg01, #15
15ad8     00 14 06 F6 | 	mov	arg02, #0
15adc     0C DB B0 FD | 	call	#_printerror
15ae0     64 00 90 FD | 	jmp	#LR__1773
15ae4                 | LR__1771
15ae4     13 13 02 F6 | 	mov	arg01, local01
15ae8     84 3E B1 FD | 	call	#__system___mkdir
15aec     FD 2C 0A F6 | 	mov	local04, result1 wz
15af0                 | ' filename$=t1.result.sresult
15af0                 | ' err=mkdir(filename$)
15af0                 | ' 'err=geterr() : 
15af0                 | ' if err<>0 then print "Cannot create a directory: system error "; err
15af0     54 00 90 AD |  if_e	jmp	#LR__1772
15af4     00 12 06 F6 | 	mov	arg01, #0
15af8     44 72 B1 FD | 	call	#__system___getiolock_0614
15afc     FD 12 02 F6 | 	mov	arg01, result1
15b00     98 15 B1 FD | 	call	#__system___lockmem
15b04     BB 01 00 FF 
15b08     53 14 06 F6 | 	mov	arg02, ##@LR__5986
15b0c     00 12 06 F6 | 	mov	arg01, #0
15b10     00 16 06 F6 | 	mov	arg03, #0
15b14     7C 22 B1 FD | 	call	#__system___basic_print_string
15b18     00 12 06 F6 | 	mov	arg01, #0
15b1c     16 15 02 F6 | 	mov	arg02, local04
15b20     00 16 06 F6 | 	mov	arg03, #0
15b24     0A 18 06 F6 | 	mov	arg04, #10
15b28     AC 22 B1 FD | 	call	#__system___basic_print_integer
15b2c     00 12 06 F6 | 	mov	arg01, #0
15b30     0A 14 06 F6 | 	mov	arg02, #10
15b34     00 16 06 F6 | 	mov	arg03, #0
15b38     00 22 B1 FD | 	call	#__system___basic_print_char
15b3c     00 12 06 F6 | 	mov	arg01, #0
15b40     FC 71 B1 FD | 	call	#__system___getiolock_0614
15b44     FD 00 68 FC | 	wrlong	#0, result1
15b48                 | LR__1772
15b48                 | LR__1773
15b48     A7 F0 03 F6 | 	mov	ptra, fp
15b4c     B2 00 A0 FD | 	call	#popregs_
15b50                 | _do_mkdir_ret
15b50     2D 00 64 FD | 	ret
15b54                 | 
15b54                 | ' 
15b54                 | ' '-------------------- mode
15b54                 | ' 
15b54                 | ' sub do_mode
15b54                 | _do_mode
15b54     05 4A 05 F6 | 	mov	COUNT_, #5
15b58     A8 00 A0 FD | 	call	#pushregs_
15b5c     A8 7B BF FD | 	call	#_pop
15b60     FD 26 02 F6 | 	mov	local01, result1
15b64     FE 28 02 F6 | 	mov	local02, result2
15b68     FF 2A 02 F6 | 	mov	local03, result3
15b6c                 | ' t1=pop() 
15b6c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15b6c     1E 2A 0E F2 | 	cmp	local03, #30 wz
15b70     10 00 90 5D |  if_ne	jmp	#LR__1780
15b74     13 13 02 F6 | 	mov	arg01, local01
15b78     00 14 06 F6 | 	mov	arg02, #0
15b7c     60 48 B1 FD | 	call	#__system___float_tointeger
15b80     FD 26 02 F6 | 	mov	local01, result1
15b84                 | LR__1780
15b84                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15b84     1F 2A 0E F2 | 	cmp	local03, #31 wz
15b88     18 00 90 5D |  if_ne	jmp	#LR__1781
15b8c     13 13 02 F6 | 	mov	arg01, local01
15b90     90 4B B1 FD | 	call	#__system____builtin_atof
15b94     FD 12 02 F6 | 	mov	arg01, result1
15b98     00 14 06 F6 | 	mov	arg02, #0
15b9c     40 48 B1 FD | 	call	#__system___float_tointeger
15ba0     FD 26 02 F6 | 	mov	local01, result1
15ba4                 | LR__1781
15ba4                 | ' select case t1.result.iresult
15ba4     13 2D 02 F6 | 	mov	local04, local01
15ba8     06 2C 26 F3 | 	fle	local04, #6
15bac     30 2C 62 FD | 	jmprel	local04
15bb0                 | LR__1782
15bb0     18 00 90 FD | 	jmp	#LR__1783
15bb4     AC 00 90 FD | 	jmp	#LR__1784
15bb8     14 01 90 FD | 	jmp	#LR__1785
15bbc     7C 01 90 FD | 	jmp	#LR__1786
15bc0     E4 01 90 FD | 	jmp	#LR__1787
15bc4     78 02 90 FD | 	jmp	#LR__1788
15bc8     08 03 90 FD | 	jmp	#LR__1789
15bcc                 | LR__1783
15bcc     37 00 00 FF 
15bd0     40 E4 05 F1 | 	add	objptr, ##28224
15bd4     F2 02 68 FC | 	wrlong	#1, objptr
15bd8     04 E4 85 F1 | 	sub	objptr, #4
15bdc     F2 34 69 FC | 	wrlong	#154, objptr
15be0     19 00 00 FF 
15be4     00 E5 05 F1 | 	add	objptr, ##13056
15be8     F2 02 68 FC | 	wrlong	#1, objptr
15bec     19 00 00 FF 
15bf0     04 E5 85 F1 | 	sub	objptr, ##13060
15bf4     F2 26 69 FC | 	wrlong	#147, objptr
15bf8     37 00 00 FF 
15bfc     38 E4 85 F1 | 	sub	objptr, ##28216
15c00     04 12 06 F6 | 	mov	arg01, #4
15c04     20 F6 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15c08     37 00 00 FF 
15c0c     3C E4 05 F1 | 	add	objptr, ##28220
15c10     F2 12 02 FB | 	rdlong	arg01, objptr
15c14     04 E4 85 F1 | 	sub	objptr, #4
15c18     F2 14 02 FB | 	rdlong	arg02, objptr
15c1c                 | ' 
15c1c                 | ' write_color:=ff
15c1c     36 00 00 FF 
15c20     F7 E5 85 F1 | 	sub	objptr, ##28151
15c24     F2 12 62 FC | 	wrlong	arg01, objptr
15c28                 | ' write_background:=bb
15c28     04 E4 05 F1 | 	add	objptr, #4
15c2c     F2 14 62 FC | 	wrlong	arg02, objptr
15c30     01 00 00 FF 
15c34     00 EA 05 F1 | 	add	ptr__dat__, ##512
15c38     52 00 00 FF 
15c3c     5F E4 05 F1 | 	add	objptr, ##42079
15c40     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15c44     04 E4 85 F1 | 	sub	objptr, #4
15c48     03 00 80 FF 
15c4c     F2 30 69 FC | 	wrlong	##1688, objptr
15c50     52 00 00 FF 
15c54     A0 E4 85 F1 | 	sub	objptr, ##42144
15c58     01 00 00 FF 
15c5c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15c60     70 02 90 FD | 	jmp	#LR__1789
15c64                 | LR__1784
15c64     37 00 00 FF 
15c68     40 E4 05 F1 | 	add	objptr, ##28224
15c6c     F2 00 68 FC | 	wrlong	#0, objptr
15c70     04 E4 85 F1 | 	sub	objptr, #4
15c74     F2 2E 68 FC | 	wrlong	#23, objptr
15c78     19 00 00 FF 
15c7c     00 E5 05 F1 | 	add	objptr, ##13056
15c80     F2 00 68 FC | 	wrlong	#0, objptr
15c84     19 00 00 FF 
15c88     04 E5 85 F1 | 	sub	objptr, ##13060
15c8c     F2 00 68 FC | 	wrlong	#0, objptr
15c90     37 00 00 FF 
15c94     38 E4 85 F1 | 	sub	objptr, ##28216
15c98     00 12 06 F6 | 	mov	arg01, #0
15c9c     88 F5 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15ca0     37 00 00 FF 
15ca4     3C E4 05 F1 | 	add	objptr, ##28220
15ca8     F2 12 02 FB | 	rdlong	arg01, objptr
15cac     04 E4 85 F1 | 	sub	objptr, #4
15cb0     F2 14 02 FB | 	rdlong	arg02, objptr
15cb4                 | ' 
15cb4                 | ' write_color:=ff
15cb4     36 00 00 FF 
15cb8     F7 E5 85 F1 | 	sub	objptr, ##28151
15cbc     F2 12 62 FC | 	wrlong	arg01, objptr
15cc0                 | ' write_background:=bb
15cc0     04 E4 05 F1 | 	add	objptr, #4
15cc4     F2 14 62 FC | 	wrlong	arg02, objptr
15cc8     45 E4 85 F1 | 	sub	objptr, #69
15ccc     04 02 90 FD | 	jmp	#LR__1789
15cd0                 | LR__1785
15cd0     37 00 00 FF 
15cd4     40 E4 05 F1 | 	add	objptr, ##28224
15cd8     F2 00 68 FC | 	wrlong	#0, objptr
15cdc     04 E4 85 F1 | 	sub	objptr, #4
15ce0     F2 6A 69 FC | 	wrlong	#181, objptr
15ce4     19 00 00 FF 
15ce8     00 E5 05 F1 | 	add	objptr, ##13056
15cec     F2 00 68 FC | 	wrlong	#0, objptr
15cf0     19 00 00 FF 
15cf4     04 E5 85 F1 | 	sub	objptr, ##13060
15cf8     F2 00 68 FC | 	wrlong	#0, objptr
15cfc     37 00 00 FF 
15d00     38 E4 85 F1 | 	sub	objptr, ##28216
15d04     00 12 06 F6 | 	mov	arg01, #0
15d08     1C F5 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15d0c     37 00 00 FF 
15d10     3C E4 05 F1 | 	add	objptr, ##28220
15d14     F2 12 02 FB | 	rdlong	arg01, objptr
15d18     04 E4 85 F1 | 	sub	objptr, #4
15d1c     F2 14 02 FB | 	rdlong	arg02, objptr
15d20                 | ' 
15d20                 | ' write_color:=ff
15d20     36 00 00 FF 
15d24     F7 E5 85 F1 | 	sub	objptr, ##28151
15d28     F2 12 62 FC | 	wrlong	arg01, objptr
15d2c                 | ' write_background:=bb
15d2c     04 E4 05 F1 | 	add	objptr, #4
15d30     F2 14 62 FC | 	wrlong	arg02, objptr
15d34     45 E4 85 F1 | 	sub	objptr, #69
15d38     98 01 90 FD | 	jmp	#LR__1789
15d3c                 | LR__1786
15d3c     37 00 00 FF 
15d40     40 E4 05 F1 | 	add	objptr, ##28224
15d44     F2 00 68 FC | 	wrlong	#0, objptr
15d48     04 E4 85 F1 | 	sub	objptr, #4
15d4c     F2 1E 68 FC | 	wrlong	#15, objptr
15d50     19 00 00 FF 
15d54     00 E5 05 F1 | 	add	objptr, ##13056
15d58     F2 00 68 FC | 	wrlong	#0, objptr
15d5c     19 00 00 FF 
15d60     04 E5 85 F1 | 	sub	objptr, ##13060
15d64     F2 00 68 FC | 	wrlong	#0, objptr
15d68     37 00 00 FF 
15d6c     38 E4 85 F1 | 	sub	objptr, ##28216
15d70     00 12 06 F6 | 	mov	arg01, #0
15d74     B0 F4 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15d78     37 00 00 FF 
15d7c     3C E4 05 F1 | 	add	objptr, ##28220
15d80     F2 12 02 FB | 	rdlong	arg01, objptr
15d84     04 E4 85 F1 | 	sub	objptr, #4
15d88     F2 14 02 FB | 	rdlong	arg02, objptr
15d8c                 | ' 
15d8c                 | ' write_color:=ff
15d8c     36 00 00 FF 
15d90     F7 E5 85 F1 | 	sub	objptr, ##28151
15d94     F2 12 62 FC | 	wrlong	arg01, objptr
15d98                 | ' write_background:=bb
15d98     04 E4 05 F1 | 	add	objptr, #4
15d9c     F2 14 62 FC | 	wrlong	arg02, objptr
15da0     45 E4 85 F1 | 	sub	objptr, #69
15da4     2C 01 90 FD | 	jmp	#LR__1789
15da8                 | LR__1787
15da8     37 00 00 FF 
15dac     40 E4 05 F1 | 	add	objptr, ##28224
15db0     F2 02 68 FC | 	wrlong	#1, objptr
15db4     04 E4 85 F1 | 	sub	objptr, #4
15db8     F2 02 68 FC | 	wrlong	#1, objptr
15dbc     19 00 00 FF 
15dc0     00 E5 05 F1 | 	add	objptr, ##13056
15dc4     F2 02 68 FC | 	wrlong	#1, objptr
15dc8     19 00 00 FF 
15dcc     04 E5 85 F1 | 	sub	objptr, ##13060
15dd0     F2 1C 68 FC | 	wrlong	#14, objptr
15dd4     37 00 00 FF 
15dd8     38 E4 85 F1 | 	sub	objptr, ##28216
15ddc     04 12 06 F6 | 	mov	arg01, #4
15de0     44 F4 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15de4     37 00 00 FF 
15de8     3C E4 05 F1 | 	add	objptr, ##28220
15dec     F2 12 02 FB | 	rdlong	arg01, objptr
15df0     04 E4 85 F1 | 	sub	objptr, #4
15df4     F2 14 02 FB | 	rdlong	arg02, objptr
15df8                 | ' 
15df8                 | ' write_color:=ff
15df8     36 00 00 FF 
15dfc     F7 E5 85 F1 | 	sub	objptr, ##28151
15e00     F2 12 62 FC | 	wrlong	arg01, objptr
15e04                 | ' write_background:=bb
15e04     04 E4 05 F1 | 	add	objptr, #4
15e08     F2 14 62 FC | 	wrlong	arg02, objptr
15e0c     07 00 00 FF 
15e10     82 EB 05 F1 | 	add	ptr__dat__, ##3970
15e14     52 00 00 FF 
15e18     5F E4 05 F1 | 	add	objptr, ##42079
15e1c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15e20     04 E4 85 F1 | 	sub	objptr, #4
15e24     03 00 80 FF 
15e28     F2 30 69 FC | 	wrlong	##1688, objptr
15e2c     52 00 00 FF 
15e30     A0 E4 85 F1 | 	sub	objptr, ##42144
15e34     07 00 00 FF 
15e38     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
15e3c     94 00 90 FD | 	jmp	#LR__1789
15e40                 | LR__1788
15e40     37 00 00 FF 
15e44     40 E4 05 F1 | 	add	objptr, ##28224
15e48     F2 04 68 FC | 	wrlong	#2, objptr
15e4c     04 E4 85 F1 | 	sub	objptr, #4
15e50     F2 02 68 FC | 	wrlong	#1, objptr
15e54     19 00 00 FF 
15e58     00 E5 05 F1 | 	add	objptr, ##13056
15e5c     F2 02 68 FC | 	wrlong	#1, objptr
15e60     19 00 00 FF 
15e64     04 E5 85 F1 | 	sub	objptr, ##13060
15e68     F2 0E 68 FC | 	wrlong	#7, objptr
15e6c     37 00 00 FF 
15e70     38 E4 85 F1 | 	sub	objptr, ##28216
15e74     08 12 06 F6 | 	mov	arg01, #8
15e78     AC F3 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15e7c     37 00 00 FF 
15e80     3C E4 05 F1 | 	add	objptr, ##28220
15e84     F2 12 02 FB | 	rdlong	arg01, objptr
15e88     04 E4 85 F1 | 	sub	objptr, #4
15e8c     F2 14 02 FB | 	rdlong	arg02, objptr
15e90                 | ' 
15e90                 | ' write_color:=ff
15e90     36 00 00 FF 
15e94     F7 E5 85 F1 | 	sub	objptr, ##28151
15e98     F2 12 62 FC | 	wrlong	arg01, objptr
15e9c                 | ' write_background:=bb
15e9c     04 E4 05 F1 | 	add	objptr, #4
15ea0     F2 14 62 FC | 	wrlong	arg02, objptr
15ea4     07 00 00 FF 
15ea8     82 EB 05 F1 | 	add	ptr__dat__, ##3970
15eac     52 00 00 FF 
15eb0     5F E4 05 F1 | 	add	objptr, ##42079
15eb4     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15eb8     04 E4 85 F1 | 	sub	objptr, #4
15ebc     03 00 80 FF 
15ec0     F2 30 69 FC | 	wrlong	##1688, objptr
15ec4     52 00 00 FF 
15ec8     A0 E4 85 F1 | 	sub	objptr, ##42144
15ecc     07 00 00 FF 
15ed0     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
15ed4                 | LR__1789
15ed4     52 00 00 FF 
15ed8     9C E4 05 F1 | 	add	objptr, ##42140
15edc     F2 26 62 FC | 	wrlong	local01, objptr
15ee0     04 E4 85 F1 | 	sub	objptr, #4
15ee4     F2 12 02 FB | 	rdlong	arg01, objptr
15ee8     0F 00 00 FF 
15eec     3C E4 85 F1 | 	sub	objptr, ##7740
15ef0     F2 2E 02 FB | 	rdlong	local05, objptr
15ef4     43 00 00 FF 
15ef8     5C E4 85 F1 | 	sub	objptr, ##34396
15efc     17 13 82 F1 | 	sub	arg01, local05
15f00     00 14 06 F6 | 	mov	arg02, #0
15f04     0A 16 06 F6 | 	mov	arg03, #10
15f08     64 34 B1 FD | 	call	#__system__Number_S
15f0c     FD 12 02 F6 | 	mov	arg01, result1
15f10     BB 01 00 FF 
15f14     7C 14 06 F6 | 	mov	arg02, ##@LR__5987
15f18     DC 11 B1 FD | 	call	#__system___string_concat
15f1c     50 00 00 FF 
15f20     38 E5 05 F1 | 	add	objptr, ##41272
15f24     F2 FA 61 FC | 	wrlong	result1, objptr
15f28     19 00 00 FF 
15f2c     FC E4 85 F1 | 	sub	objptr, ##13052
15f30     F2 12 02 FB | 	rdlong	arg01, objptr
15f34     04 E4 85 F1 | 	sub	objptr, #4
15f38     F2 14 02 FB | 	rdlong	arg02, objptr
15f3c     37 00 00 FF 
15f40     38 E4 85 F1 | 	sub	objptr, ##28216
15f44     60 F4 B0 FD | 	call	#_hg010b_spin2_cls
15f48     BB 01 00 FF 
15f4c     8E 12 06 F6 | 	mov	arg01, ##@LR__5988
15f50                 | ' 
15f50                 | ' write(text)
15f50     14 F8 B0 FD | 	call	#_hg010b_spin2_write
15f54                 | ' crlf
15f54     10 FD B0 FD | 	call	#_hg010b_spin2_crlf
15f58     18 00 00 FF 
15f5c     40 EB 05 F1 | 	add	ptr__dat__, ##12608
15f60     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
15f64     18 00 00 FF 
15f68     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
15f6c                 | ' 
15f6c                 | ' write(text)
15f6c     F8 F7 B0 FD | 	call	#_hg010b_spin2_write
15f70                 | ' crlf
15f70     F4 FC B0 FD | 	call	#_hg010b_spin2_crlf
15f74     50 00 00 FF 
15f78     38 E5 05 F1 | 	add	objptr, ##41272
15f7c     F2 12 02 FB | 	rdlong	arg01, objptr
15f80     50 00 00 FF 
15f84     38 E5 85 F1 | 	sub	objptr, ##41272
15f88                 | ' 
15f88                 | ' write(text)
15f88     DC F7 B0 FD | 	call	#_hg010b_spin2_write
15f8c                 | ' crlf
15f8c     D8 FC B0 FD | 	call	#_hg010b_spin2_crlf
15f90     A7 F0 03 F6 | 	mov	ptra, fp
15f94     B2 00 A0 FD | 	call	#popregs_
15f98                 | _do_mode_ret
15f98     2D 00 64 FD | 	ret
15f9c                 | 
15f9c                 | ' 
15f9c                 | ' '-------------------- mouse
15f9c                 | ' 
15f9c                 | ' sub do_mouse
15f9c                 | _do_mouse
15f9c     68 77 BF FD | 	call	#_pop
15fa0     00 FA 4D F2 | 	cmps	result1, #0 wz
15fa4                 | ' 
15fa4                 | ' t1=pop()
15fa4                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
15fa4     14 00 90 5D |  if_ne	jmp	#LR__1790
15fa8     10 12 06 F6 | 	mov	arg01, #16
15fac     00 14 06 F6 | 	mov	arg02, #0
15fb0     00 16 06 F6 | 	mov	arg03, #0
15fb4     A0 E6 B0 FD | 	call	#_hg010b_spin2_setspritesize
15fb8     10 00 90 FD | 	jmp	#LR__1791
15fbc                 | LR__1790
15fbc     10 12 06 F6 | 	mov	arg01, #16
15fc0     20 14 06 F6 | 	mov	arg02, #32
15fc4     20 16 06 F6 | 	mov	arg03, #32
15fc8     8C E6 B0 FD | 	call	#_hg010b_spin2_setspritesize
15fcc                 | LR__1791
15fcc                 | _do_mouse_ret
15fcc     2D 00 64 FD | 	ret
15fd0                 | 
15fd0                 | ' 
15fd0                 | ' '-------------------- mousek
15fd0                 | ' 
15fd0                 | ' sub do_mousek
15fd0                 | _do_mousek
15fd0     00 4A 05 F6 | 	mov	COUNT_, #0
15fd4     A8 00 A0 FD | 	call	#pushregs_
15fd8     0C F0 07 F1 | 	add	ptra, #12
15fdc     08 4E 05 F1 | 	add	fp, #8
15fe0     A7 3A 68 FC | 	wrlong	#29, fp
15fe4     08 4E 85 F1 | 	sub	fp, #8
15fe8     51 00 00 FF 
15fec     50 E5 05 F1 | 	add	objptr, ##41808
15ff0     F2 12 02 FB | 	rdlong	arg01, objptr
15ff4     51 00 00 FF 
15ff8     50 E5 85 F1 | 	sub	objptr, ##41808
15ffc     A7 12 62 FC | 	wrlong	arg01, fp
16000     A7 12 02 F6 | 	mov	arg01, fp
16004     98 77 BF FD | 	call	#_push
16008     A7 F0 03 F6 | 	mov	ptra, fp
1600c     B2 00 A0 FD | 	call	#popregs_
16010                 | _do_mousek_ret
16010     2D 00 64 FD | 	ret
16014                 | 
16014                 | ' 
16014                 | ' '-------------------- mousew
16014                 | ' 
16014                 | ' sub do_mousew
16014                 | _do_mousew
16014     00 4A 05 F6 | 	mov	COUNT_, #0
16018     A8 00 A0 FD | 	call	#pushregs_
1601c     0C F0 07 F1 | 	add	ptra, #12
16020     08 4E 05 F1 | 	add	fp, #8
16024     A7 38 68 FC | 	wrlong	#28, fp
16028     08 4E 85 F1 | 	sub	fp, #8
1602c     51 00 00 FF 
16030     54 E5 05 F1 | 	add	objptr, ##41812
16034     F2 12 02 FB | 	rdlong	arg01, objptr
16038     51 00 00 FF 
1603c     54 E5 85 F1 | 	sub	objptr, ##41812
16040     A7 12 62 FC | 	wrlong	arg01, fp
16044     A7 12 02 F6 | 	mov	arg01, fp
16048     54 77 BF FD | 	call	#_push
1604c     A7 F0 03 F6 | 	mov	ptra, fp
16050     B2 00 A0 FD | 	call	#popregs_
16054                 | _do_mousew_ret
16054     2D 00 64 FD | 	ret
16058                 | 
16058                 | ' 
16058                 | ' '-------------------- mousex
16058                 | ' 
16058                 | ' sub do_mousex
16058                 | _do_mousex
16058     00 4A 05 F6 | 	mov	COUNT_, #0
1605c     A8 00 A0 FD | 	call	#pushregs_
16060     0C F0 07 F1 | 	add	ptra, #12
16064     08 4E 05 F1 | 	add	fp, #8
16068     A7 3A 68 FC | 	wrlong	#29, fp
1606c     08 4E 85 F1 | 	sub	fp, #8
16070     51 00 00 FF 
16074     48 E5 05 F1 | 	add	objptr, ##41800
16078     F2 12 02 FB | 	rdlong	arg01, objptr
1607c     51 00 00 FF 
16080     48 E5 85 F1 | 	sub	objptr, ##41800
16084     A7 12 62 FC | 	wrlong	arg01, fp
16088     A7 12 02 F6 | 	mov	arg01, fp
1608c     10 77 BF FD | 	call	#_push
16090     A7 F0 03 F6 | 	mov	ptra, fp
16094     B2 00 A0 FD | 	call	#popregs_
16098                 | _do_mousex_ret
16098     2D 00 64 FD | 	ret
1609c                 | 
1609c                 | ' 
1609c                 | ' '-------------------- mousey
1609c                 | ' 
1609c                 | ' sub do_mousey
1609c                 | _do_mousey
1609c     00 4A 05 F6 | 	mov	COUNT_, #0
160a0     A8 00 A0 FD | 	call	#pushregs_
160a4     0C F0 07 F1 | 	add	ptra, #12
160a8     08 4E 05 F1 | 	add	fp, #8
160ac     A7 3A 68 FC | 	wrlong	#29, fp
160b0     08 4E 85 F1 | 	sub	fp, #8
160b4     51 00 00 FF 
160b8     4C E5 05 F1 | 	add	objptr, ##41804
160bc     F2 12 02 FB | 	rdlong	arg01, objptr
160c0     51 00 00 FF 
160c4     4C E5 85 F1 | 	sub	objptr, ##41804
160c8     A7 12 62 FC | 	wrlong	arg01, fp
160cc     A7 12 02 F6 | 	mov	arg01, fp
160d0     CC 76 BF FD | 	call	#_push
160d4     A7 F0 03 F6 | 	mov	ptra, fp
160d8     B2 00 A0 FD | 	call	#popregs_
160dc                 | _do_mousey_ret
160dc     2D 00 64 FD | 	ret
160e0                 | 
160e0                 | ' 
160e0                 | ' '------------------ new
160e0                 | ' 
160e0                 | ' sub do_new
160e0                 | _do_new
160e0     03 4A 05 F6 | 	mov	COUNT_, #3
160e4     A8 00 A0 FD | 	call	#pushregs_
160e8                 | ' 
160e8                 | ' if inrun=1 then inrun=2
160e8     50 00 00 FF 
160ec     EC E4 05 F1 | 	add	objptr, ##41196
160f0     F2 16 02 FB | 	rdlong	arg03, objptr
160f4     50 00 00 FF 
160f8     EC E4 85 F1 | 	sub	objptr, ##41196
160fc     01 16 0E F2 | 	cmp	arg03, #1 wz
16100     50 00 00 AF 
16104     EC E4 05 A1 |  if_e	add	objptr, ##41196
16108     F2 04 68 AC |  if_e	wrlong	#2, objptr
1610c     50 00 00 AF 
16110     EC E4 85 A1 |  if_e	sub	objptr, ##41196
16114     13 12 C6 F9 | 	decod	arg01, #19
16118     01 14 66 F6 | 	neg	arg02, #1
1611c     6C D6 B0 FD | 	call	#_pslpoke
16120     35 00 00 FF 
16124     08 E4 05 F1 | 	add	objptr, ##27144
16128     F2 00 68 FC | 	wrlong	#0, objptr
1612c                 | ' pslpoke(memlo,$FFFFFFFF)
1612c                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
1612c     00 26 06 F6 | 	mov	local01, #0
16130     20 00 00 FF 
16134     10 E4 85 F1 | 	sub	objptr, ##16400
16138     97 1E 48 FB | 	callpa	#(@LR__1801-@LR__1800)>>2,fcache_load_ptr_
1613c                 | LR__1800
1613c     13 17 02 F6 | 	mov	arg03, local01
16140     04 16 66 F0 | 	shl	arg03, #4
16144     F2 16 02 F1 | 	add	arg03, objptr
16148     BB 01 00 FF 
1614c     8F 14 06 F6 | 	mov	arg02, ##@LR__5989
16150     0B 15 62 FC | 	wrlong	arg02, arg03
16154     13 29 02 F6 | 	mov	local02, local01
16158     04 28 66 F0 | 	shl	local02, #4
1615c     F2 28 02 F1 | 	add	local02, objptr
16160     0C 28 06 F1 | 	add	local02, #12
16164     14 01 68 FC | 	wrlong	#0, local02
16168     01 26 06 F1 | 	add	local01, #1
1616c     02 00 00 FF 
16170     01 26 56 F2 | 	cmps	local01, ##1025 wc
16174     C4 FF 9F CD |  if_b	jmp	#LR__1800
16178                 | LR__1801
16178     35 00 00 FF 
1617c     90 E4 05 F1 | 	add	objptr, ##27280
16180     00 04 80 FF 
16184     F2 00 68 FC | 	wrlong	##524288, objptr
16188     06 00 00 FF 
1618c     30 E4 05 F1 | 	add	objptr, ##3120
16190     00 04 80 FF 
16194     F2 00 68 FC | 	wrlong	##524288, objptr
16198     04 E4 05 F1 | 	add	objptr, #4
1619c     00 04 80 FF 
161a0     F2 00 68 FC | 	wrlong	##524288, objptr
161a4     0D 00 00 FF 
161a8     64 E4 85 F1 | 	sub	objptr, ##6756
161ac     F2 00 68 FC | 	wrlong	#0, objptr
161b0     07 00 00 FF 
161b4     24 E4 05 F1 | 	add	objptr, ##3620
161b8     F2 00 68 FC | 	wrlong	#0, objptr
161bc     07 00 00 FF 
161c0     20 E4 85 F1 | 	sub	objptr, ##3616
161c4     00 04 80 FF 
161c8     F2 00 68 FC | 	wrlong	##524288, objptr
161cc     0D 00 00 FF 
161d0     D0 E4 05 F1 | 	add	objptr, ##6864
161d4     F2 00 68 FC | 	wrlong	#0, objptr
161d8     BB 01 00 FF 
161dc     90 2A 06 F6 | 	mov	local03, ##@LR__5990
161e0     01 00 00 FF 
161e4     B0 E5 05 F1 | 	add	objptr, ##944
161e8     F2 2A 62 FC | 	wrlong	local03, objptr
161ec     08 00 00 FF 
161f0     50 E4 85 F1 | 	sub	objptr, ##4176
161f4     F2 00 68 FC | 	wrlong	#0, objptr
161f8     04 E4 05 F1 | 	add	objptr, #4
161fc     FF FF FF FF 
16200     F2 FE 6B FC | 	wrlong	##-1, objptr
16204     06 00 00 FF 
16208     A0 E4 05 F1 | 	add	objptr, ##3232
1620c     F2 00 68 FC | 	wrlong	#0, objptr
16210     04 E4 05 F1 | 	add	objptr, #4
16214     F2 00 68 FC | 	wrlong	#0, objptr
16218                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
16218                 | ' stackpointer=0
16218                 | ' lineptr=0 
16218                 | ' programptr=memlo ': stringptr=0
16218                 | ' dataptr=0 : readline=""
16218                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
16218                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
16218     00 26 06 F6 | 	mov	local01, #0
1621c     06 00 00 FF 
16220     9C E4 85 F1 | 	sub	objptr, ##3228
16224     97 16 48 FB | 	callpa	#(@LR__1803-@LR__1802)>>2,fcache_load_ptr_
16228                 | LR__1802
16228     13 29 02 F6 | 	mov	local02, local01
1622c     02 28 66 F0 | 	shl	local02, #2
16230     13 29 02 F1 | 	add	local02, local01
16234     02 28 66 F0 | 	shl	local02, #2
16238     F2 28 02 F1 | 	add	local02, objptr
1623c     08 28 06 F1 | 	add	local02, #8
16240     FF FF FF FF 
16244     14 FF 6B FC | 	wrlong	##-1, local02
16248     01 26 06 F1 | 	add	local01, #1
1624c     41 26 56 F2 | 	cmps	local01, #65 wc
16250     D4 FF 9F CD |  if_b	jmp	#LR__1802
16254                 | LR__1803
16254     4A 00 00 FF 
16258     98 E4 85 F1 | 	sub	objptr, ##38040
1625c                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
1625c     00 26 06 F6 | 	mov	local01, #0
16260                 | LR__1804
16260     13 29 02 F6 | 	mov	local02, local01
16264     02 28 66 F0 | 	shl	local02, #2
16268     52 00 00 FF 
1626c     54 E4 05 F1 | 	add	objptr, ##42068
16270     F2 28 02 F1 | 	add	local02, objptr
16274     14 2B 0A FB | 	rdlong	local03, local02 wz
16278     52 00 00 FF 
1627c     54 E4 85 F1 | 	sub	objptr, ##42068
16280     34 00 90 AD |  if_e	jmp	#LR__1805
16284     13 13 02 F6 | 	mov	arg01, local01
16288     00 14 06 F6 | 	mov	arg02, #0
1628c     00 16 06 F6 | 	mov	arg03, #0
16290     C4 E3 B0 FD | 	call	#_hg010b_spin2_setspritesize
16294     13 29 02 F6 | 	mov	local02, local01
16298     02 28 66 F0 | 	shl	local02, #2
1629c     52 00 00 FF 
162a0     54 E4 05 F1 | 	add	objptr, ##42068
162a4     F2 28 02 F1 | 	add	local02, objptr
162a8     14 13 02 FB | 	rdlong	arg01, local02
162ac     52 00 00 FF 
162b0     54 E4 85 F1 | 	sub	objptr, ##42068
162b4     C4 50 B1 FD | 	call	#__system___gc_free
162b8                 | LR__1805
162b8     01 26 06 F1 | 	add	local01, #1
162bc     10 26 56 F2 | 	cmps	local01, #16 wc
162c0     9C FF 9F CD |  if_b	jmp	#LR__1804
162c4     52 00 00 FF 
162c8     A8 E4 05 F1 | 	add	objptr, ##42152
162cc     00 C0 9F FF 
162d0     F2 00 68 FC | 	wrlong	##1065353216, objptr
162d4     04 E4 05 F1 | 	add	objptr, #4
162d8     00 C0 9F FF 
162dc     F2 00 68 FC | 	wrlong	##1065353216, objptr
162e0     52 00 00 FF 
162e4     A8 E4 85 F1 | 	sub	objptr, ##42152
162e8     F2 2A 02 FB | 	rdlong	local03, objptr
162ec     52 00 00 FF 
162f0     94 E4 05 F1 | 	add	objptr, ##42132
162f4     F2 2A 62 FC | 	wrlong	local03, objptr
162f8     52 00 00 FF 
162fc     98 E4 85 F1 | 	sub	objptr, ##42136
16300     11 12 06 F6 | 	mov	arg01, #17
16304     08 14 06 F6 | 	mov	arg02, #8
16308     10 16 06 F6 | 	mov	arg03, #16
1630c     48 E3 B0 FD | 	call	#_hg010b_spin2_setspritesize
16310     10 12 06 F6 | 	mov	arg01, #16
16314     20 14 06 F6 | 	mov	arg02, #32
16318     20 16 06 F6 | 	mov	arg03, #32
1631c     38 E3 B0 FD | 	call	#_hg010b_spin2_setspritesize
16320     BB 01 00 FF 
16324     91 2A 06 F6 | 	mov	local03, ##@LR__5991
16328     52 00 00 FF 
1632c     C4 E4 05 F1 | 	add	objptr, ##42180
16330     F2 2A 62 FC | 	wrlong	local03, objptr
16334     52 00 00 FF 
16338     C4 E4 85 F1 | 	sub	objptr, ##42180
1633c     A4 C6 B0 FD | 	call	#_init_audio
16340     A7 F0 03 F6 | 	mov	ptra, fp
16344     B2 00 A0 FD | 	call	#popregs_
16348                 | _do_new_ret
16348     2D 00 64 FD | 	ret
1634c                 | 
1634c                 | ' 
1634c                 | ' '-------------------- next
1634c                 | ' 
1634c                 | ' sub do_next()
1634c                 | _do_next
1634c     04 4A 05 F6 | 	mov	COUNT_, #4
16350     A8 00 A0 FD | 	call	#pushregs_
16354     B0 73 BF FD | 	call	#_pop
16358     FD 26 02 F6 | 	mov	local01, result1
1635c     FE 28 02 F6 | 	mov	local02, result2
16360     FF 2A 02 F6 | 	mov	local03, result3
16364                 | ' t1=pop() :varnum=t1.result.uresult
16364                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
16364     50 00 00 FF 
16368     30 E5 05 F1 | 	add	objptr, ##41264
1636c     F2 14 02 FB | 	rdlong	arg02, objptr
16370     0A 13 02 F6 | 	mov	arg01, arg02
16374     02 12 66 F0 | 	shl	arg01, #2
16378     0A 13 02 F1 | 	add	arg01, arg02
1637c     02 12 66 F0 | 	shl	arg01, #2
16380     06 00 00 FF 
16384     98 E4 85 F1 | 	sub	objptr, ##3224
16388     F2 12 02 F1 | 	add	arg01, objptr
1638c     08 12 06 F1 | 	add	arg01, #8
16390     09 15 02 FB | 	rdlong	arg02, arg01
16394     13 15 0A F2 | 	cmp	arg02, local01 wz
16398     4A 00 00 FF 
1639c     98 E4 85 F1 | 	sub	objptr, ##38040
163a0     10 00 90 AD |  if_e	jmp	#LR__1810
163a4     25 12 06 F6 | 	mov	arg01, #37
163a8     00 14 06 F6 | 	mov	arg02, #0
163ac     3C D2 B0 FD | 	call	#_printerror
163b0     54 03 90 FD | 	jmp	#LR__1817
163b4                 | LR__1810
163b4                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
163b4     13 15 02 F6 | 	mov	arg02, local01
163b8     04 14 66 F0 | 	shl	arg02, #4
163bc     14 00 00 FF 
163c0     F8 E5 05 F1 | 	add	objptr, ##10744
163c4     F2 14 02 F1 | 	add	arg02, objptr
163c8     0C 14 06 F1 | 	add	arg02, #12
163cc     0A 15 02 FB | 	rdlong	arg02, arg02
163d0     1E 14 0E F2 | 	cmp	arg02, #30 wz
163d4     14 00 00 FF 
163d8     F8 E5 85 F1 | 	sub	objptr, ##10744
163dc     54 00 90 5D |  if_ne	jmp	#LR__1811
163e0     13 15 02 F6 | 	mov	arg02, local01
163e4     04 14 66 F0 | 	shl	arg02, #4
163e8     14 00 00 FF 
163ec     F8 E5 05 F1 | 	add	objptr, ##10744
163f0     F2 14 02 F1 | 	add	arg02, objptr
163f4     0C 14 06 F1 | 	add	arg02, #12
163f8     0A 39 68 FC | 	wrlong	#28, arg02
163fc     13 2D 02 F6 | 	mov	local04, local01
16400     04 2C 66 F0 | 	shl	local04, #4
16404     F2 2C 02 F1 | 	add	local04, objptr
16408     13 15 02 F6 | 	mov	arg02, local01
1640c     04 14 66 F0 | 	shl	arg02, #4
16410     F2 14 02 F1 | 	add	arg02, objptr
16414     04 14 06 F1 | 	add	arg02, #4
16418     0A 13 02 FB | 	rdlong	arg01, arg02
1641c     14 00 00 FF 
16420     F8 E5 85 F1 | 	sub	objptr, ##10744
16424     01 14 06 F6 | 	mov	arg02, #1
16428     B4 3F B1 FD | 	call	#__system___float_tointeger
1642c     04 2C 06 F1 | 	add	local04, #4
16430     16 FB 61 FC | 	wrlong	result1, local04
16434                 | LR__1811
16434     50 00 00 FF 
16438     30 E5 05 F1 | 	add	objptr, ##41264
1643c     F2 2C 02 FB | 	rdlong	local04, objptr
16440     16 15 02 F6 | 	mov	arg02, local04
16444     02 14 66 F0 | 	shl	arg02, #2
16448     16 15 02 F1 | 	add	arg02, local04
1644c     02 14 66 F0 | 	shl	arg02, #2
16450     06 00 00 FF 
16454     98 E4 85 F1 | 	sub	objptr, ##3224
16458     F2 14 02 F1 | 	add	arg02, objptr
1645c     0C 14 06 F1 | 	add	arg02, #12
16460     0A FF 01 FB | 	rdlong	result3, arg02
16464     13 2D 02 F6 | 	mov	local04, local01
16468     04 2C 66 F0 | 	shl	local04, #4
1646c     35 00 00 FF 
16470     A0 E4 85 F1 | 	sub	objptr, ##27296
16474     F2 2C 02 F1 | 	add	local04, objptr
16478     13 15 02 F6 | 	mov	arg02, local01
1647c     04 14 66 F0 | 	shl	arg02, #4
16480     F2 14 02 F1 | 	add	arg02, objptr
16484     04 14 06 F1 | 	add	arg02, #4
16488     0A 13 02 FB | 	rdlong	arg01, arg02
1648c     FF 12 02 F1 | 	add	arg01, result3
16490     04 2C 06 F1 | 	add	local04, #4
16494     16 13 62 FC | 	wrlong	arg01, local04
16498                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
16498                 | ' if fortable(fortop).stepval>=0 then
16498     3B 00 00 FF 
1649c     38 E5 05 F1 | 	add	objptr, ##30520
164a0     F2 2C 02 FB | 	rdlong	local04, objptr
164a4     16 13 02 F6 | 	mov	arg01, local04
164a8     02 12 66 F0 | 	shl	arg01, #2
164ac     16 13 02 F1 | 	add	arg01, local04
164b0     02 12 66 F0 | 	shl	arg01, #2
164b4     06 00 00 FF 
164b8     98 E4 85 F1 | 	sub	objptr, ##3224
164bc     F2 12 02 F1 | 	add	arg01, objptr
164c0     0C 12 06 F1 | 	add	arg01, #12
164c4     09 13 02 FB | 	rdlong	arg01, arg01
164c8     00 12 56 F2 | 	cmps	arg01, #0 wc
164cc     4A 00 00 FF 
164d0     98 E4 85 F1 | 	sub	objptr, ##38040
164d4     78 00 90 CD |  if_b	jmp	#LR__1812
164d8                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
164d8     04 26 66 F0 | 	shl	local01, #4
164dc     14 00 00 FF 
164e0     F8 E5 05 F1 | 	add	objptr, ##10744
164e4     F2 26 02 F1 | 	add	local01, objptr
164e8     3B 00 00 FF 
164ec     38 E5 05 F1 | 	add	objptr, ##30520
164f0     F2 12 02 FB | 	rdlong	arg01, objptr
164f4     09 2D 02 F6 | 	mov	local04, arg01
164f8     02 2C 66 F0 | 	shl	local04, #2
164fc     09 2D 02 F1 | 	add	local04, arg01
16500     02 2C 66 F0 | 	shl	local04, #2
16504     06 00 00 FF 
16508     98 E4 85 F1 | 	sub	objptr, ##3224
1650c     F2 2C 02 F1 | 	add	local04, objptr
16510     04 26 06 F1 | 	add	local01, #4
16514     13 27 02 FB | 	rdlong	local01, local01
16518     10 2C 06 F1 | 	add	local04, #16
1651c     16 2D 02 FB | 	rdlong	local04, local04
16520     16 27 5A F2 | 	cmps	local01, local04 wcz
16524     4A 00 00 FF 
16528     98 E4 85 F1 | 	sub	objptr, ##38040
1652c     9C 00 90 ED |  if_be	jmp	#LR__1814
16530     50 00 00 FF 
16534     30 E5 05 F1 | 	add	objptr, ##41264
16538     F2 2C 02 FB | 	rdlong	local04, objptr
1653c     01 2C 86 F1 | 	sub	local04, #1
16540     F2 2C 62 FC | 	wrlong	local04, objptr
16544     50 00 00 FF 
16548     30 E5 85 F1 | 	sub	objptr, ##41264
1654c     B8 01 90 FD | 	jmp	#LR__1817
16550                 | LR__1812
16550                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
16550     13 2D 02 F6 | 	mov	local04, local01
16554     04 2C 66 F0 | 	shl	local04, #4
16558     14 00 00 FF 
1655c     F8 E5 05 F1 | 	add	objptr, ##10744
16560     F2 2C 02 F1 | 	add	local04, objptr
16564     3B 00 00 FF 
16568     38 E5 05 F1 | 	add	objptr, ##30520
1656c     F2 26 02 FB | 	rdlong	local01, objptr
16570     13 13 02 F6 | 	mov	arg01, local01
16574     02 12 66 F0 | 	shl	arg01, #2
16578     13 13 02 F1 | 	add	arg01, local01
1657c     02 12 66 F0 | 	shl	arg01, #2
16580     06 00 00 FF 
16584     98 E4 85 F1 | 	sub	objptr, ##3224
16588     F2 12 02 F1 | 	add	arg01, objptr
1658c     04 2C 06 F1 | 	add	local04, #4
16590     16 2D 02 FB | 	rdlong	local04, local04
16594     10 12 06 F1 | 	add	arg01, #16
16598     09 13 02 FB | 	rdlong	arg01, arg01
1659c     09 2D 52 F2 | 	cmps	local04, arg01 wc
165a0     4A 00 00 FF 
165a4     98 E4 85 F1 | 	sub	objptr, ##38040
165a8     20 00 90 3D |  if_ae	jmp	#LR__1813
165ac     50 00 00 FF 
165b0     30 E5 05 F1 | 	add	objptr, ##41264
165b4     F2 2C 02 FB | 	rdlong	local04, objptr
165b8     01 2C 86 F1 | 	sub	local04, #1
165bc     F2 2C 62 FC | 	wrlong	local04, objptr
165c0     50 00 00 FF 
165c4     30 E5 85 F1 | 	sub	objptr, ##41264
165c8     3C 01 90 FD | 	jmp	#LR__1817
165cc                 | LR__1813
165cc                 | LR__1814
165cc                 | ' ' if not returned, goto pointer 
165cc                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
165cc     50 00 00 FF 
165d0     EC E4 05 F1 | 	add	objptr, ##41196
165d4     F2 2C 02 FB | 	rdlong	local04, objptr
165d8     50 00 00 FF 
165dc     EC E4 85 F1 | 	sub	objptr, ##41196
165e0     01 2C 16 F2 | 	cmp	local04, #1 wc
165e4     DC 00 90 CD |  if_b	jmp	#LR__1815
165e8     50 00 00 FF 
165ec     30 E5 05 F1 | 	add	objptr, ##41264
165f0     F2 2C 02 FB | 	rdlong	local04, objptr
165f4     16 27 02 F6 | 	mov	local01, local04
165f8     02 26 66 F0 | 	shl	local01, #2
165fc     16 27 02 F1 | 	add	local01, local04
16600     02 26 66 F0 | 	shl	local01, #2
16604     06 00 00 FF 
16608     98 E4 85 F1 | 	sub	objptr, ##3224
1660c     F2 26 02 F1 | 	add	local01, objptr
16610     06 00 00 FF 
16614     20 E4 05 F1 | 	add	objptr, ##3104
16618     F2 2C 02 FB | 	rdlong	local04, objptr
1661c     50 00 00 FF 
16620     B8 E4 85 F1 | 	sub	objptr, ##41144
16624     13 27 02 FB | 	rdlong	local01, local01
16628     13 2D 0A F2 | 	cmp	local04, local01 wz
1662c     94 00 90 AD |  if_e	jmp	#LR__1815
16630     50 00 00 FF 
16634     30 E5 05 F1 | 	add	objptr, ##41264
16638     F2 2C 02 FB | 	rdlong	local04, objptr
1663c     16 27 02 F6 | 	mov	local01, local04
16640     02 26 66 F0 | 	shl	local01, #2
16644     16 27 02 F1 | 	add	local01, local04
16648     02 26 66 F0 | 	shl	local01, #2
1664c     06 00 00 FF 
16650     98 E4 85 F1 | 	sub	objptr, ##3224
16654     F2 26 02 F1 | 	add	local01, objptr
16658     13 27 02 FB | 	rdlong	local01, local01
1665c     06 00 00 FF 
16660     20 E4 05 F1 | 	add	objptr, ##3104
16664     F2 26 62 FC | 	wrlong	local01, objptr
16668     78 E4 05 F1 | 	add	objptr, #120
1666c     F2 2C 02 FB | 	rdlong	local04, objptr
16670     16 27 02 F6 | 	mov	local01, local04
16674     02 26 66 F0 | 	shl	local01, #2
16678     16 27 02 F1 | 	add	local01, local04
1667c     02 26 66 F0 | 	shl	local01, #2
16680     06 00 00 FF 
16684     98 E4 85 F1 | 	sub	objptr, ##3224
16688     F2 26 02 F1 | 	add	local01, objptr
1668c     04 26 06 F1 | 	add	local01, #4
16690     13 27 02 FB | 	rdlong	local01, local01
16694     06 00 00 FF 
16698     24 E4 05 F1 | 	add	objptr, ##3108
1669c     F2 26 62 FC | 	wrlong	local01, objptr
166a0     06 00 00 FF 
166a4     40 E4 85 F1 | 	sub	objptr, ##3136
166a8     F2 2C 02 FB | 	rdlong	local04, objptr
166ac     01 2C 86 F1 | 	sub	local04, #1
166b0     04 E4 05 F1 | 	add	objptr, #4
166b4     F2 2C 62 FC | 	wrlong	local04, objptr
166b8     4A 00 00 FF 
166bc     80 E4 85 F1 | 	sub	objptr, ##38016
166c0     44 00 90 FD | 	jmp	#LR__1816
166c4                 | LR__1815
166c4     50 00 00 FF 
166c8     30 E5 05 F1 | 	add	objptr, ##41264
166cc     F2 2C 02 FB | 	rdlong	local04, objptr
166d0     16 27 02 F6 | 	mov	local01, local04
166d4     02 26 66 F0 | 	shl	local01, #2
166d8     16 27 02 F1 | 	add	local01, local04
166dc     02 26 66 F0 | 	shl	local01, #2
166e0     06 00 00 FF 
166e4     98 E4 85 F1 | 	sub	objptr, ##3224
166e8     F2 26 02 F1 | 	add	local01, objptr
166ec     04 26 06 F1 | 	add	local01, #4
166f0     13 27 02 FB | 	rdlong	local01, local01
166f4     01 26 86 F1 | 	sub	local01, #1
166f8     18 E4 85 F1 | 	sub	objptr, #24
166fc     F2 26 62 FC | 	wrlong	local01, objptr
16700     4A 00 00 FF 
16704     80 E4 85 F1 | 	sub	objptr, ##38016
16708                 | LR__1816
16708                 | LR__1817
16708     A7 F0 03 F6 | 	mov	ptra, fp
1670c     B2 00 A0 FD | 	call	#popregs_
16710                 | _do_next_ret
16710     2D 00 64 FD | 	ret
16714                 | 
16714                 | ' 
16714                 | ' '-------------------- no command (print "Unknown command")
16714                 | ' 
16714                 | ' sub do_no_command
16714                 | _do_no_command
16714     50 00 00 FF 
16718     F0 E4 05 F1 | 	add	objptr, ##41200
1671c     F2 14 02 FB | 	rdlong	arg02, objptr
16720     50 00 00 FF 
16724     F0 E4 85 F1 | 	sub	objptr, ##41200
16728     17 12 06 F6 | 	mov	arg01, #23
1672c     BC CE B0 FD | 	call	#_printerror
16730                 | _do_no_command_ret
16730     2D 00 64 FD | 	ret
16734                 | 
16734                 | ' 
16734                 | ' '-------------------- nothing
16734                 | ' 
16734                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
16734                 | _do_nothing
16734                 | _do_nothing_ret
16734     2D 00 64 FD | 	ret
16738                 | 
16738                 | ' 
16738                 | ' '-------------------- on
16738                 | ' 
16738                 | ' sub do_on
16738                 | _do_on
16738     01 4A 05 F6 | 	mov	COUNT_, #1
1673c     A8 00 A0 FD | 	call	#pushregs_
16740     18 F0 07 F1 | 	add	ptra, #24
16744     4A 00 00 FF 
16748     80 E4 05 F1 | 	add	objptr, ##38016
1674c     F2 12 02 FB | 	rdlong	arg01, objptr
16750     09 FD 01 F6 | 	mov	result2, arg01
16754     01 FC 65 F0 | 	shl	result2, #1
16758     09 FD 01 F1 | 	add	result2, arg01
1675c     02 FC 65 F0 | 	shl	result2, #2
16760     03 00 00 FF 
16764     04 E4 85 F1 | 	sub	objptr, ##1540
16768     F2 FC 01 F1 | 	add	result2, objptr
1676c     FE 12 02 FB | 	rdlong	arg01, result2
16770     14 4E 05 F1 | 	add	fp, #20
16774     A7 12 62 FC | 	wrlong	arg01, fp
16778     03 00 00 FF 
1677c     04 E4 05 F1 | 	add	objptr, ##1540
16780     F2 12 02 FB | 	rdlong	arg01, objptr
16784     09 27 02 F6 | 	mov	local01, arg01
16788     01 26 66 F0 | 	shl	local01, #1
1678c     09 27 02 F1 | 	add	local01, arg01
16790     02 26 66 F0 | 	shl	local01, #2
16794     03 00 00 FF 
16798     04 E4 85 F1 | 	sub	objptr, ##1540
1679c     F2 26 02 F1 | 	add	local01, objptr
167a0     04 26 06 F1 | 	add	local01, #4
167a4     13 27 02 FB | 	rdlong	local01, local01
167a8     08 4E 85 F1 | 	sub	fp, #8
167ac     A7 26 62 FC | 	wrlong	local01, fp
167b0     0C 4E 85 F1 | 	sub	fp, #12
167b4     47 00 00 FF 
167b8     7C E4 85 F1 | 	sub	objptr, ##36476
167bc     48 6F BF FD | 	call	#_pop
167c0     FF 26 02 F6 | 	mov	local01, result3
167c4     A7 FA 61 FC | 	wrlong	result1, fp
167c8     04 4E 05 F1 | 	add	fp, #4
167cc     A7 FC 61 FC | 	wrlong	result2, fp
167d0     04 4E 05 F1 | 	add	fp, #4
167d4     A7 26 62 FC | 	wrlong	local01, fp
167d8     08 4E 85 F1 | 	sub	fp, #8
167dc     A7 12 02 F6 | 	mov	arg01, fp
167e0     08 71 BF FD | 	call	#_converttoint
167e4     10 4E 05 F1 | 	add	fp, #16
167e8     A7 FA 61 FC | 	wrlong	result1, fp
167ec                 | ' 
167ec                 | ' numpar=compiledline(lineptr_e).result.uresult
167ec                 | ' skip=compiledline(lineptr_e).result.twowords(1)
167ec                 | ' t1=pop()
167ec                 | ' t=converttoint(t1)
167ec                 | ' if t<1 orelse t>numpar then return
167ec     10 4E 85 F1 | 	sub	fp, #16
167f0     01 FA 55 F2 | 	cmps	result1, #1 wc
167f4     58 00 90 CD |  if_b	jmp	#LR__1820
167f8     10 4E 05 F1 | 	add	fp, #16
167fc     A7 26 02 FB | 	rdlong	local01, fp
16800     04 4E 05 F1 | 	add	fp, #4
16804     A7 12 02 FB | 	rdlong	arg01, fp
16808     14 4E 85 F1 | 	sub	fp, #20
1680c     09 27 5A F2 | 	cmps	local01, arg01 wcz
16810     3C 00 90 1D |  if_a	jmp	#LR__1820
16814     10 4E 05 F1 | 	add	fp, #16
16818     A7 26 02 FB | 	rdlong	local01, fp
1681c     01 26 86 F1 | 	sub	local01, #1
16820     04 4E 85 F1 | 	sub	fp, #4
16824     A7 12 02 FB | 	rdlong	arg01, fp
16828     13 13 02 FD | 	qmul	arg01, local01
1682c     4A 00 00 FF 
16830     80 E4 05 F1 | 	add	objptr, ##38016
16834     F2 26 02 FB | 	rdlong	local01, objptr
16838     0C 4E 85 F1 | 	sub	fp, #12
1683c     18 12 62 FD | 	getqx	arg01
16840     09 27 02 F1 | 	add	local01, arg01
16844     F2 26 62 FC | 	wrlong	local01, objptr
16848     4A 00 00 FF 
1684c     80 E4 85 F1 | 	sub	objptr, ##38016
16850                 | LR__1820
16850     A7 F0 03 F6 | 	mov	ptra, fp
16854     B2 00 A0 FD | 	call	#popregs_
16858                 | _do_on_ret
16858     2D 00 64 FD | 	ret
1685c                 | 
1685c                 | ' 
1685c                 | ' '-------------------- open
1685c                 | ' 
1685c                 | ' sub do_open
1685c                 | _do_open
1685c     02 4A 05 F6 | 	mov	COUNT_, #2
16860     A8 00 A0 FD | 	call	#pushregs_
16864     20 F0 07 F1 | 	add	ptra, #32
16868     4A 00 00 FF 
1686c     80 E4 05 F1 | 	add	objptr, ##38016
16870     F2 16 02 FB | 	rdlong	arg03, objptr
16874     0B 15 02 F6 | 	mov	arg02, arg03
16878     01 14 66 F0 | 	shl	arg02, #1
1687c     0B 15 02 F1 | 	add	arg02, arg03
16880     02 14 66 F0 | 	shl	arg02, #2
16884     03 00 00 FF 
16888     04 E4 85 F1 | 	sub	objptr, ##1540
1688c     F2 14 02 F1 | 	add	arg02, objptr
16890     0A 17 02 FB | 	rdlong	arg03, arg02
16894     10 4E 05 F1 | 	add	fp, #16
16898     A7 16 62 FC | 	wrlong	arg03, fp
1689c     10 4E 85 F1 | 	sub	fp, #16
168a0     47 00 00 FF 
168a4     7C E4 85 F1 | 	sub	objptr, ##36476
168a8     5C 6E BF FD | 	call	#_pop
168ac     FF 16 02 F6 | 	mov	arg03, result3
168b0     A7 FA 61 FC | 	wrlong	result1, fp
168b4     04 4E 05 F1 | 	add	fp, #4
168b8     A7 FC 61 FC | 	wrlong	result2, fp
168bc     04 4E 05 F1 | 	add	fp, #4
168c0     A7 16 62 FC | 	wrlong	arg03, fp
168c4                 | ' 
168c4                 | ' numpar=compiledline(lineptr_e).result.uresult
168c4                 | ' 
168c4                 | ' t1=pop()
168c4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
168c4     08 4E 85 F1 | 	sub	fp, #8
168c8     2B 16 0E F2 | 	cmp	arg03, #43 wz
168cc     18 00 90 5D |  if_ne	jmp	#LR__1830
168d0     A7 12 02 FB | 	rdlong	arg01, fp
168d4     A8 6F BF FD | 	call	#_convertstring
168d8     A7 FA 61 FC | 	wrlong	result1, fp
168dc     08 4E 05 F1 | 	add	fp, #8
168e0     A7 3E 68 FC | 	wrlong	#31, fp
168e4     08 4E 85 F1 | 	sub	fp, #8
168e8                 | LR__1830
168e8                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
168e8     08 4E 05 F1 | 	add	fp, #8
168ec     A7 16 02 FB | 	rdlong	arg03, fp
168f0     08 4E 85 F1 | 	sub	fp, #8
168f4     1F 16 0E F2 | 	cmp	arg03, #31 wz
168f8     44 00 90 AD |  if_e	jmp	#LR__1831
168fc     00 12 06 F6 | 	mov	arg01, #0
16900     3C 64 B1 FD | 	call	#__system___getiolock_0614
16904     FD 12 02 F6 | 	mov	arg01, result1
16908     90 07 B1 FD | 	call	#__system___lockmem
1690c     BB 01 00 FF 
16910     9C 14 06 F6 | 	mov	arg02, ##@LR__5992
16914     00 12 06 F6 | 	mov	arg01, #0
16918     00 16 06 F6 | 	mov	arg03, #0
1691c     74 14 B1 FD | 	call	#__system___basic_print_string
16920     00 12 06 F6 | 	mov	arg01, #0
16924     0A 14 06 F6 | 	mov	arg02, #10
16928     00 16 06 F6 | 	mov	arg03, #0
1692c     0C 14 B1 FD | 	call	#__system___basic_print_char
16930     00 12 06 F6 | 	mov	arg01, #0
16934     08 64 B1 FD | 	call	#__system___getiolock_0614
16938     FD 00 68 FC | 	wrlong	#0, result1
1693c     28 02 90 FD | 	jmp	#LR__1842
16940                 | LR__1831
16940     A7 16 02 FB | 	rdlong	arg03, fp
16944     0C 4E 05 F1 | 	add	fp, #12
16948     A7 16 62 FC | 	wrlong	arg03, fp
1694c     0C 4E 85 F1 | 	sub	fp, #12
16950     B4 6D BF FD | 	call	#_pop
16954     FF 16 02 F6 | 	mov	arg03, result3
16958     A7 FA 61 FC | 	wrlong	result1, fp
1695c     04 4E 05 F1 | 	add	fp, #4
16960     A7 FC 61 FC | 	wrlong	result2, fp
16964     04 4E 05 F1 | 	add	fp, #4
16968     A7 16 62 FC | 	wrlong	arg03, fp
1696c                 | ' filename=t1.result.sresult
1696c                 | ' t1=pop()
1696c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1696c     08 4E 85 F1 | 	sub	fp, #8
16970     2B 16 0E F2 | 	cmp	arg03, #43 wz
16974     18 00 90 5D |  if_ne	jmp	#LR__1832
16978     A7 12 02 FB | 	rdlong	arg01, fp
1697c     00 6F BF FD | 	call	#_convertstring
16980     A7 FA 61 FC | 	wrlong	result1, fp
16984     08 4E 05 F1 | 	add	fp, #8
16988     A7 3E 68 FC | 	wrlong	#31, fp
1698c     08 4E 85 F1 | 	sub	fp, #8
16990                 | LR__1832
16990     14 4E 05 F1 | 	add	fp, #20
16994     A7 00 68 FC | 	wrlong	#0, fp
16998                 | ' mode=0
16998                 | ' if t1.result_type=result_string then
16998     0C 4E 85 F1 | 	sub	fp, #12
1699c     A7 14 02 FB | 	rdlong	arg02, fp
169a0     08 4E 85 F1 | 	sub	fp, #8
169a4     1F 14 0E F2 | 	cmp	arg02, #31 wz
169a8     64 00 90 5D |  if_ne	jmp	#LR__1833
169ac                 | '   if t1.result.sresult="read" then mode=1
169ac     A7 12 02 FB | 	rdlong	arg01, fp
169b0     BB 01 00 FF 
169b4     AE 14 06 F6 | 	mov	arg02, ##@LR__5993
169b8     08 07 B1 FD | 	call	#__system___string_cmp
169bc     00 FA 0D F2 | 	cmp	result1, #0 wz
169c0     14 4E 05 A1 |  if_e	add	fp, #20
169c4     A7 02 68 AC |  if_e	wrlong	#1, fp
169c8     14 4E 85 A1 |  if_e	sub	fp, #20
169cc                 | '   if t1.result.sresult="write" then mode=2
169cc     A7 12 02 FB | 	rdlong	arg01, fp
169d0     BB 01 00 FF 
169d4     B3 14 06 F6 | 	mov	arg02, ##@LR__5994
169d8     E8 06 B1 FD | 	call	#__system___string_cmp
169dc     00 FA 0D F2 | 	cmp	result1, #0 wz
169e0     14 4E 05 A1 |  if_e	add	fp, #20
169e4     A7 04 68 AC |  if_e	wrlong	#2, fp
169e8     14 4E 85 A1 |  if_e	sub	fp, #20
169ec                 | '   if t1.result.sresult="append" then mode=4
169ec     A7 12 02 FB | 	rdlong	arg01, fp
169f0     BB 01 00 FF 
169f4     B9 14 06 F6 | 	mov	arg02, ##@LR__5995
169f8     C8 06 B1 FD | 	call	#__system___string_cmp
169fc     00 FA 0D F2 | 	cmp	result1, #0 wz
16a00     14 4E 05 A1 |  if_e	add	fp, #20
16a04     A7 08 68 AC |  if_e	wrlong	#4, fp
16a08     14 4E 85 A1 |  if_e	sub	fp, #20
16a0c     14 00 90 FD | 	jmp	#LR__1834
16a10                 | LR__1833
16a10     A7 12 02 F6 | 	mov	arg01, fp
16a14     D4 6E BF FD | 	call	#_converttoint
16a18     14 4E 05 F1 | 	add	fp, #20
16a1c     A7 FA 61 FC | 	wrlong	result1, fp
16a20     14 4E 85 F1 | 	sub	fp, #20
16a24                 | LR__1834
16a24     E0 6C BF FD | 	call	#_pop
16a28     FF 16 02 F6 | 	mov	arg03, result3
16a2c     A7 FA 61 FC | 	wrlong	result1, fp
16a30     04 4E 05 F1 | 	add	fp, #4
16a34     A7 FC 61 FC | 	wrlong	result2, fp
16a38     04 4E 05 F1 | 	add	fp, #4
16a3c     A7 16 62 FC | 	wrlong	arg03, fp
16a40                 | ' t1=pop()
16a40                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
16a40     08 4E 85 F1 | 	sub	fp, #8
16a44     2C 16 0E F2 | 	cmp	arg03, #44 wz
16a48     44 00 90 AD |  if_e	jmp	#LR__1835
16a4c     00 12 06 F6 | 	mov	arg01, #0
16a50     EC 62 B1 FD | 	call	#__system___getiolock_0614
16a54     FD 12 02 F6 | 	mov	arg01, result1
16a58     40 06 B1 FD | 	call	#__system___lockmem
16a5c     BB 01 00 FF 
16a60     C0 14 06 F6 | 	mov	arg02, ##@LR__5996
16a64     00 12 06 F6 | 	mov	arg01, #0
16a68     00 16 06 F6 | 	mov	arg03, #0
16a6c     24 13 B1 FD | 	call	#__system___basic_print_string
16a70     00 12 06 F6 | 	mov	arg01, #0
16a74     0A 14 06 F6 | 	mov	arg02, #10
16a78     00 16 06 F6 | 	mov	arg03, #0
16a7c     BC 12 B1 FD | 	call	#__system___basic_print_char
16a80     00 12 06 F6 | 	mov	arg01, #0
16a84     B8 62 B1 FD | 	call	#__system___getiolock_0614
16a88     FD 00 68 FC | 	wrlong	#0, result1
16a8c     D8 00 90 FD | 	jmp	#LR__1842
16a90                 | LR__1835
16a90     A7 26 02 FB | 	rdlong	local01, fp
16a94     18 4E 05 F1 | 	add	fp, #24
16a98     A7 26 62 FC | 	wrlong	local01, fp
16a9c                 | ' channel  = t1.result.iresult
16a9c                 | ' select case  mode
16a9c     04 4E 85 F1 | 	sub	fp, #4
16aa0     A7 28 02 FB | 	rdlong	local02, fp
16aa4     14 4E 85 F1 | 	sub	fp, #20
16aa8     01 28 86 F1 | 	sub	local02, #1
16aac     04 28 26 F3 | 	fle	local02, #4
16ab0     30 28 62 FD | 	jmprel	local02
16ab4                 | LR__1836
16ab4     10 00 90 FD | 	jmp	#LR__1837
16ab8     2C 00 90 FD | 	jmp	#LR__1838
16abc     68 00 90 FD | 	jmp	#LR__1840
16ac0     44 00 90 FD | 	jmp	#LR__1839
16ac4     60 00 90 FD | 	jmp	#LR__1840
16ac8                 | LR__1837
16ac8     18 4E 05 F1 | 	add	fp, #24
16acc     A7 12 02 FB | 	rdlong	arg01, fp
16ad0     0C 4E 85 F1 | 	sub	fp, #12
16ad4     A7 14 02 FB | 	rdlong	arg02, fp
16ad8     0C 4E 85 F1 | 	sub	fp, #12
16adc     00 16 06 F6 | 	mov	arg03, #0
16ae0     BC 11 B1 FD | 	call	#__system___basic_open_string
16ae4     80 00 90 FD | 	jmp	#LR__1841
16ae8                 | LR__1838
16ae8     18 4E 05 F1 | 	add	fp, #24
16aec     A7 12 02 FB | 	rdlong	arg01, fp
16af0     0C 4E 85 F1 | 	sub	fp, #12
16af4     A7 14 02 FB | 	rdlong	arg02, fp
16af8     0C 4E 85 F1 | 	sub	fp, #12
16afc     0D 16 06 F6 | 	mov	arg03, #13
16b00     9C 11 B1 FD | 	call	#__system___basic_open_string
16b04     60 00 90 FD | 	jmp	#LR__1841
16b08                 | LR__1839
16b08     18 4E 05 F1 | 	add	fp, #24
16b0c     A7 12 02 FB | 	rdlong	arg01, fp
16b10     0C 4E 85 F1 | 	sub	fp, #12
16b14     A7 14 02 FB | 	rdlong	arg02, fp
16b18     0C 4E 85 F1 | 	sub	fp, #12
16b1c     25 16 06 F6 | 	mov	arg03, #37
16b20     7C 11 B1 FD | 	call	#__system___basic_open_string
16b24     40 00 90 FD | 	jmp	#LR__1841
16b28                 | LR__1840
16b28     00 12 06 F6 | 	mov	arg01, #0
16b2c     10 62 B1 FD | 	call	#__system___getiolock_0614
16b30     FD 12 02 F6 | 	mov	arg01, result1
16b34     64 05 B1 FD | 	call	#__system___lockmem
16b38     BB 01 00 FF 
16b3c     D2 14 06 F6 | 	mov	arg02, ##@LR__5997
16b40     00 12 06 F6 | 	mov	arg01, #0
16b44     00 16 06 F6 | 	mov	arg03, #0
16b48     48 12 B1 FD | 	call	#__system___basic_print_string
16b4c     00 12 06 F6 | 	mov	arg01, #0
16b50     0A 14 06 F6 | 	mov	arg02, #10
16b54     00 16 06 F6 | 	mov	arg03, #0
16b58     E0 11 B1 FD | 	call	#__system___basic_print_char
16b5c     00 12 06 F6 | 	mov	arg01, #0
16b60     DC 61 B1 FD | 	call	#__system___getiolock_0614
16b64     FD 00 68 FC | 	wrlong	#0, result1
16b68                 | LR__1841
16b68                 | LR__1842
16b68     A7 F0 03 F6 | 	mov	ptra, fp
16b6c     B2 00 A0 FD | 	call	#popregs_
16b70                 | _do_open_ret
16b70     2D 00 64 FD | 	ret
16b74                 | 
16b74                 | ' 
16b74                 | ' ' ------------------ padh
16b74                 | ' 
16b74                 | ' sub do_padh
16b74                 | _do_padh
16b74     01 4A 05 F6 | 	mov	COUNT_, #1
16b78     A8 00 A0 FD | 	call	#pushregs_
16b7c     14 F0 07 F1 | 	add	ptra, #20
16b80     4A 00 00 FF 
16b84     80 E4 05 F1 | 	add	objptr, ##38016
16b88     F2 26 02 FB | 	rdlong	local01, objptr
16b8c     13 17 02 F6 | 	mov	arg03, local01
16b90     01 16 66 F0 | 	shl	arg03, #1
16b94     13 17 02 F1 | 	add	arg03, local01
16b98     02 16 66 F0 | 	shl	arg03, #2
16b9c     03 00 00 FF 
16ba0     04 E4 85 F1 | 	sub	objptr, ##1540
16ba4     F2 16 02 F1 | 	add	arg03, objptr
16ba8     0B 17 02 FB | 	rdlong	arg03, arg03
16bac     0C 4E 05 F1 | 	add	fp, #12
16bb0     A7 16 62 FC | 	wrlong	arg03, fp
16bb4                 | ' 
16bb4                 | ' numpar=compiledline(lineptr_e).result.uresult
16bb4                 | ' if numpar>1 then print "padh: "; : printerror(39) : return
16bb4     0C 4E 85 F1 | 	sub	fp, #12
16bb8     02 16 16 F2 | 	cmp	arg03, #2 wc
16bbc     47 00 00 FF 
16bc0     7C E4 85 F1 | 	sub	objptr, ##36476
16bc4     40 00 90 CD |  if_b	jmp	#LR__1850
16bc8     00 12 06 F6 | 	mov	arg01, #0
16bcc     70 61 B1 FD | 	call	#__system___getiolock_0614
16bd0     FD 12 02 F6 | 	mov	arg01, result1
16bd4     C4 04 B1 FD | 	call	#__system___lockmem
16bd8     BB 01 00 FF 
16bdc     E5 14 06 F6 | 	mov	arg02, ##@LR__5998
16be0     00 12 06 F6 | 	mov	arg01, #0
16be4     00 16 06 F6 | 	mov	arg03, #0
16be8     A8 11 B1 FD | 	call	#__system___basic_print_string
16bec     00 12 06 F6 | 	mov	arg01, #0
16bf0     4C 61 B1 FD | 	call	#__system___getiolock_0614
16bf4     FD 00 68 FC | 	wrlong	#0, result1
16bf8     27 12 06 F6 | 	mov	arg01, #39
16bfc     00 14 06 F6 | 	mov	arg02, #0
16c00     E8 C9 B0 FD | 	call	#_printerror
16c04     F0 00 90 FD | 	jmp	#LR__1854
16c08                 | LR__1850
16c08                 | ' if numpar=0 then 
16c08     0C 4E 05 F1 | 	add	fp, #12
16c0c     A7 FE 09 FB | 	rdlong	result3, fp wz
16c10     0C 4E 85 F1 | 	sub	fp, #12
16c14     30 00 90 5D |  if_ne	jmp	#LR__1851
16c18     51 00 00 FF 
16c1c     AC E5 05 F1 | 	add	objptr, ##41900
16c20     F2 26 02 FB | 	rdlong	local01, objptr
16c24     51 00 00 FF 
16c28     AC E5 85 F1 | 	sub	objptr, ##41900
16c2c     A7 26 62 FC | 	wrlong	local01, fp
16c30     08 4E 05 F1 | 	add	fp, #8
16c34     A7 38 68 FC | 	wrlong	#28, fp
16c38     08 4E 85 F1 | 	sub	fp, #8
16c3c     A7 12 02 F6 | 	mov	arg01, fp
16c40     5C 6B BF FD | 	call	#_push
16c44                 | '   t1.result.uresult=padh(0): t1.result_type=result_int : push t1 : return
16c44     B0 00 90 FD | 	jmp	#LR__1854
16c48                 | LR__1851
16c48     BC 6A BF FD | 	call	#_pop
16c4c     A7 FA 61 FC | 	wrlong	result1, fp
16c50     04 4E 05 F1 | 	add	fp, #4
16c54     A7 FC 61 FC | 	wrlong	result2, fp
16c58     04 4E 05 F1 | 	add	fp, #4
16c5c     A7 FE 61 FC | 	wrlong	result3, fp
16c60                 | ' t1=pop()
16c60                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16c60     08 4E 85 F1 | 	sub	fp, #8
16c64     1C FE 0D F2 | 	cmp	result3, #28 wz
16c68     08 4E 05 51 |  if_ne	add	fp, #8
16c6c     A7 26 02 5B |  if_ne	rdlong	local01, fp
16c70     08 4E 85 51 |  if_ne	sub	fp, #8
16c74     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16c78     70 00 90 5D |  if_ne	jmp	#LR__1853
16c7c     A7 26 02 FB | 	rdlong	local01, fp
16c80     52 00 00 FF 
16c84     08 E5 05 F1 | 	add	objptr, ##42248
16c88     F2 26 62 FC | 	wrlong	local01, objptr
16c8c                 | '   q=t1.result.uresult
16c8c                 | '   if q<7 then 
16c8c     52 00 00 FF 
16c90     08 E5 85 F1 | 	sub	objptr, ##42248
16c94     07 26 56 F2 | 	cmps	local01, #7 wc
16c98     40 00 90 3D |  if_ae	jmp	#LR__1852
16c9c     52 00 00 FF 
16ca0     08 E5 05 F1 | 	add	objptr, ##42248
16ca4     F2 26 02 FB | 	rdlong	local01, objptr
16ca8     02 26 66 F0 | 	shl	local01, #2
16cac     5C E5 85 F1 | 	sub	objptr, #348
16cb0     F2 26 02 F1 | 	add	local01, objptr
16cb4     13 27 02 FB | 	rdlong	local01, local01
16cb8     A7 26 62 FC | 	wrlong	local01, fp
16cbc     08 4E 05 F1 | 	add	fp, #8
16cc0     A7 38 68 FC | 	wrlong	#28, fp
16cc4     08 4E 85 F1 | 	sub	fp, #8
16cc8     A7 12 02 F6 | 	mov	arg01, fp
16ccc     51 00 00 FF 
16cd0     AC E5 85 F1 | 	sub	objptr, ##41900
16cd4     C8 6A BF FD | 	call	#_push
16cd8                 | '     t1.result.uresult=padh(q): t1.result_type=result_int : push t1 : return 
16cd8     1C 00 90 FD | 	jmp	#LR__1854
16cdc                 | LR__1852
16cdc     29 12 06 F6 | 	mov	arg01, #41
16ce0     00 14 06 F6 | 	mov	arg02, #0
16ce4     04 C9 B0 FD | 	call	#_printerror
16ce8                 | '      printerror(41) : return
16ce8     0C 00 90 FD | 	jmp	#LR__1854
16cec                 | LR__1853
16cec     29 12 06 F6 | 	mov	arg01, #41
16cf0     00 14 06 F6 | 	mov	arg02, #0
16cf4     F4 C8 B0 FD | 	call	#_printerror
16cf8                 | LR__1854
16cf8     A7 F0 03 F6 | 	mov	ptra, fp
16cfc     B2 00 A0 FD | 	call	#popregs_
16d00                 | _do_padh_ret
16d00     2D 00 64 FD | 	ret
16d04                 | 
16d04                 | ' 
16d04                 | ' ' ------------------ padrx
16d04                 | ' 
16d04                 | ' sub do_padrx
16d04                 | _do_padrx
16d04     02 4A 05 F6 | 	mov	COUNT_, #2
16d08     A8 00 A0 FD | 	call	#pushregs_
16d0c     14 F0 07 F1 | 	add	ptra, #20
16d10     4A 00 00 FF 
16d14     80 E4 05 F1 | 	add	objptr, ##38016
16d18     F2 26 02 FB | 	rdlong	local01, objptr
16d1c     13 17 02 F6 | 	mov	arg03, local01
16d20     01 16 66 F0 | 	shl	arg03, #1
16d24     13 17 02 F1 | 	add	arg03, local01
16d28     02 16 66 F0 | 	shl	arg03, #2
16d2c     03 00 00 FF 
16d30     04 E4 85 F1 | 	sub	objptr, ##1540
16d34     F2 16 02 F1 | 	add	arg03, objptr
16d38     0B 17 02 FB | 	rdlong	arg03, arg03
16d3c     0C 4E 05 F1 | 	add	fp, #12
16d40     A7 16 62 FC | 	wrlong	arg03, fp
16d44                 | ' 
16d44                 | ' numpar=compiledline(lineptr_e).result.uresult
16d44                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
16d44     0C 4E 85 F1 | 	sub	fp, #12
16d48     02 16 16 F2 | 	cmp	arg03, #2 wc
16d4c     47 00 00 FF 
16d50     7C E4 85 F1 | 	sub	objptr, ##36476
16d54     40 00 90 CD |  if_b	jmp	#LR__1860
16d58     00 12 06 F6 | 	mov	arg01, #0
16d5c     E0 5F B1 FD | 	call	#__system___getiolock_0614
16d60     FD 12 02 F6 | 	mov	arg01, result1
16d64     34 03 B1 FD | 	call	#__system___lockmem
16d68     BB 01 00 FF 
16d6c     EC 14 06 F6 | 	mov	arg02, ##@LR__5999
16d70     00 12 06 F6 | 	mov	arg01, #0
16d74     00 16 06 F6 | 	mov	arg03, #0
16d78     18 10 B1 FD | 	call	#__system___basic_print_string
16d7c     00 12 06 F6 | 	mov	arg01, #0
16d80     BC 5F B1 FD | 	call	#__system___getiolock_0614
16d84     FD 00 68 FC | 	wrlong	#0, result1
16d88     27 12 06 F6 | 	mov	arg01, #39
16d8c     00 14 06 F6 | 	mov	arg02, #0
16d90     58 C8 B0 FD | 	call	#_printerror
16d94     E0 01 90 FD | 	jmp	#LR__1864
16d98                 | LR__1860
16d98                 | ' if numpar=0 then 
16d98     0C 4E 05 F1 | 	add	fp, #12
16d9c     A7 FE 09 FB | 	rdlong	result3, fp wz
16da0     0C 4E 85 F1 | 	sub	fp, #12
16da4     A8 00 90 5D |  if_ne	jmp	#LR__1861
16da8     00 C0 1B FF 
16dac     00 26 06 F6 | 	mov	local01, ##931135488
16db0     51 00 00 FF 
16db4     C8 E5 05 F1 | 	add	objptr, ##41928
16db8     F2 12 02 FB | 	rdlong	arg01, objptr
16dbc     51 00 00 FF 
16dc0     C8 E5 85 F1 | 	sub	objptr, ##41928
16dc4     09 13 52 F6 | 	abs	arg01, arg01 wc
16dc8     1F 28 C6 C9 |  if_b	decod	local02, #31
16dcc     00 28 06 36 |  if_ae	mov	local02, #0
16dd0     40 2D B1 FD | 	call	#__system___float_fromuns
16dd4     14 FB 61 F5 | 	xor	result1, local02
16dd8     FD 12 02 F6 | 	mov	arg01, result1
16ddc     FF 7F 23 FF 
16de0     00 14 06 F6 | 	mov	arg02, ##1191181824
16de4     34 33 B1 FD | 	call	#__system___float_div
16de8     FD 14 02 F6 | 	mov	arg02, result1
16dec     13 13 02 F6 | 	mov	arg01, local01
16df0     54 2D B1 FD | 	call	#__system___float_add
16df4     10 4E 05 F1 | 	add	fp, #16
16df8     A7 FA 61 FC | 	wrlong	result1, fp
16dfc                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16dfc     10 4E 85 F1 | 	sub	fp, #16
16e00     1F FA 05 F4 | 	bitl	result1, #31
16e04     FD 12 02 F6 | 	mov	arg01, result1
16e08     89 41 1D FF 
16e0c     6F 14 06 F6 | 	mov	arg02, ##981668463
16e10     01 16 06 F6 | 	mov	arg03, #1
16e14     34 35 B1 FD | 	call	#__system___float_cmp
16e18     00 FA 55 F2 | 	cmps	result1, #0 wc
16e1c     10 4E 05 C1 |  if_b	add	fp, #16
16e20     A7 00 68 CC |  if_b	wrlong	#0, fp
16e24     10 4E 85 C1 |  if_b	sub	fp, #16
16e28     10 4E 05 F1 | 	add	fp, #16
16e2c     A7 26 02 FB | 	rdlong	local01, fp
16e30     10 4E 85 F1 | 	sub	fp, #16
16e34     A7 26 62 FC | 	wrlong	local01, fp
16e38     08 4E 05 F1 | 	add	fp, #8
16e3c     A7 3C 68 FC | 	wrlong	#30, fp
16e40     08 4E 85 F1 | 	sub	fp, #8
16e44     A7 12 02 F6 | 	mov	arg01, fp
16e48     54 69 BF FD | 	call	#_push
16e4c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16e4c     28 01 90 FD | 	jmp	#LR__1864
16e50                 | LR__1861
16e50     B4 68 BF FD | 	call	#_pop
16e54     A7 FA 61 FC | 	wrlong	result1, fp
16e58     04 4E 05 F1 | 	add	fp, #4
16e5c     A7 FC 61 FC | 	wrlong	result2, fp
16e60     04 4E 05 F1 | 	add	fp, #4
16e64     A7 FE 61 FC | 	wrlong	result3, fp
16e68                 | ' t1=pop()
16e68                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16e68     08 4E 85 F1 | 	sub	fp, #8
16e6c     1C FE 0D F2 | 	cmp	result3, #28 wz
16e70     08 4E 05 51 |  if_ne	add	fp, #8
16e74     A7 26 02 5B |  if_ne	rdlong	local01, fp
16e78     08 4E 85 51 |  if_ne	sub	fp, #8
16e7c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16e80     E8 00 90 5D |  if_ne	jmp	#LR__1863
16e84     A7 26 02 FB | 	rdlong	local01, fp
16e88     52 00 00 FF 
16e8c     08 E5 05 F1 | 	add	objptr, ##42248
16e90     F2 26 62 FC | 	wrlong	local01, objptr
16e94                 | '   q=t1.result.uresult
16e94                 | '   if q<7 then 
16e94     52 00 00 FF 
16e98     08 E5 85 F1 | 	sub	objptr, ##42248
16e9c     07 26 56 F2 | 	cmps	local01, #7 wc
16ea0     B8 00 90 3D |  if_ae	jmp	#LR__1862
16ea4     00 C0 1B FF 
16ea8     00 26 06 F6 | 	mov	local01, ##931135488
16eac     52 00 00 FF 
16eb0     08 E5 05 F1 | 	add	objptr, ##42248
16eb4     F2 16 02 FB | 	rdlong	arg03, objptr
16eb8     02 16 66 F0 | 	shl	arg03, #2
16ebc     40 E5 85 F1 | 	sub	objptr, #320
16ec0     F2 16 02 F1 | 	add	arg03, objptr
16ec4     0B 13 02 FB | 	rdlong	arg01, arg03
16ec8     51 00 00 FF 
16ecc     C8 E5 85 F1 | 	sub	objptr, ##41928
16ed0     09 13 52 F6 | 	abs	arg01, arg01 wc
16ed4     1F 28 C6 C9 |  if_b	decod	local02, #31
16ed8     00 28 06 36 |  if_ae	mov	local02, #0
16edc     34 2C B1 FD | 	call	#__system___float_fromuns
16ee0     14 FB 61 F5 | 	xor	result1, local02
16ee4     FD 12 02 F6 | 	mov	arg01, result1
16ee8     FF 7F 23 FF 
16eec     00 14 06 F6 | 	mov	arg02, ##1191181824
16ef0     28 32 B1 FD | 	call	#__system___float_div
16ef4     FD 14 02 F6 | 	mov	arg02, result1
16ef8     13 13 02 F6 | 	mov	arg01, local01
16efc     48 2C B1 FD | 	call	#__system___float_add
16f00     10 4E 05 F1 | 	add	fp, #16
16f04     A7 FA 61 FC | 	wrlong	result1, fp
16f08                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16f08     10 4E 85 F1 | 	sub	fp, #16
16f0c     1F FA 05 F4 | 	bitl	result1, #31
16f10     FD 12 02 F6 | 	mov	arg01, result1
16f14     89 41 1D FF 
16f18     6F 14 06 F6 | 	mov	arg02, ##981668463
16f1c     01 16 06 F6 | 	mov	arg03, #1
16f20     28 34 B1 FD | 	call	#__system___float_cmp
16f24     00 FA 55 F2 | 	cmps	result1, #0 wc
16f28     10 4E 05 C1 |  if_b	add	fp, #16
16f2c     A7 00 68 CC |  if_b	wrlong	#0, fp
16f30     10 4E 85 C1 |  if_b	sub	fp, #16
16f34     10 4E 05 F1 | 	add	fp, #16
16f38     A7 26 02 FB | 	rdlong	local01, fp
16f3c     10 4E 85 F1 | 	sub	fp, #16
16f40     A7 26 62 FC | 	wrlong	local01, fp
16f44     08 4E 05 F1 | 	add	fp, #8
16f48     A7 3C 68 FC | 	wrlong	#30, fp
16f4c     08 4E 85 F1 | 	sub	fp, #8
16f50     A7 12 02 F6 | 	mov	arg01, fp
16f54     48 68 BF FD | 	call	#_push
16f58                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16f58     1C 00 90 FD | 	jmp	#LR__1864
16f5c                 | LR__1862
16f5c     29 12 06 F6 | 	mov	arg01, #41
16f60     00 14 06 F6 | 	mov	arg02, #0
16f64     84 C6 B0 FD | 	call	#_printerror
16f68                 | '      printerror(41) : return
16f68     0C 00 90 FD | 	jmp	#LR__1864
16f6c                 | LR__1863
16f6c     29 12 06 F6 | 	mov	arg01, #41
16f70     00 14 06 F6 | 	mov	arg02, #0
16f74     74 C6 B0 FD | 	call	#_printerror
16f78                 | LR__1864
16f78     A7 F0 03 F6 | 	mov	ptra, fp
16f7c     B2 00 A0 FD | 	call	#popregs_
16f80                 | _do_padrx_ret
16f80     2D 00 64 FD | 	ret
16f84                 | 
16f84                 | ' 
16f84                 | ' ' ------------------ padry
16f84                 | ' 
16f84                 | ' sub do_padry
16f84                 | _do_padry
16f84     02 4A 05 F6 | 	mov	COUNT_, #2
16f88     A8 00 A0 FD | 	call	#pushregs_
16f8c     14 F0 07 F1 | 	add	ptra, #20
16f90     4A 00 00 FF 
16f94     80 E4 05 F1 | 	add	objptr, ##38016
16f98     F2 26 02 FB | 	rdlong	local01, objptr
16f9c     13 17 02 F6 | 	mov	arg03, local01
16fa0     01 16 66 F0 | 	shl	arg03, #1
16fa4     13 17 02 F1 | 	add	arg03, local01
16fa8     02 16 66 F0 | 	shl	arg03, #2
16fac     03 00 00 FF 
16fb0     04 E4 85 F1 | 	sub	objptr, ##1540
16fb4     F2 16 02 F1 | 	add	arg03, objptr
16fb8     0B 17 02 FB | 	rdlong	arg03, arg03
16fbc     0C 4E 05 F1 | 	add	fp, #12
16fc0     A7 16 62 FC | 	wrlong	arg03, fp
16fc4                 | ' 
16fc4                 | ' numpar=compiledline(lineptr_e).result.uresult
16fc4                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
16fc4     0C 4E 85 F1 | 	sub	fp, #12
16fc8     02 16 16 F2 | 	cmp	arg03, #2 wc
16fcc     47 00 00 FF 
16fd0     7C E4 85 F1 | 	sub	objptr, ##36476
16fd4     40 00 90 CD |  if_b	jmp	#LR__1870
16fd8     00 12 06 F6 | 	mov	arg01, #0
16fdc     60 5D B1 FD | 	call	#__system___getiolock_0614
16fe0     FD 12 02 F6 | 	mov	arg01, result1
16fe4     B4 00 B1 FD | 	call	#__system___lockmem
16fe8     BB 01 00 FF 
16fec     F4 14 06 F6 | 	mov	arg02, ##@LR__6000
16ff0     00 12 06 F6 | 	mov	arg01, #0
16ff4     00 16 06 F6 | 	mov	arg03, #0
16ff8     98 0D B1 FD | 	call	#__system___basic_print_string
16ffc     00 12 06 F6 | 	mov	arg01, #0
17000     3C 5D B1 FD | 	call	#__system___getiolock_0614
17004     FD 00 68 FC | 	wrlong	#0, result1
17008     27 12 06 F6 | 	mov	arg01, #39
1700c     00 14 06 F6 | 	mov	arg02, #0
17010     D8 C5 B0 FD | 	call	#_printerror
17014     E0 01 90 FD | 	jmp	#LR__1874
17018                 | LR__1870
17018                 | ' if numpar=0 then 
17018     0C 4E 05 F1 | 	add	fp, #12
1701c     A7 FE 09 FB | 	rdlong	result3, fp wz
17020     0C 4E 85 F1 | 	sub	fp, #12
17024     A8 00 90 5D |  if_ne	jmp	#LR__1871
17028     00 C0 1B FF 
1702c     00 26 06 F6 | 	mov	local01, ##931135488
17030     51 00 00 FF 
17034     E4 E5 05 F1 | 	add	objptr, ##41956
17038     F2 12 02 FB | 	rdlong	arg01, objptr
1703c     51 00 00 FF 
17040     E4 E5 85 F1 | 	sub	objptr, ##41956
17044     09 13 52 F6 | 	abs	arg01, arg01 wc
17048     1F 28 C6 C9 |  if_b	decod	local02, #31
1704c     00 28 06 36 |  if_ae	mov	local02, #0
17050     C0 2A B1 FD | 	call	#__system___float_fromuns
17054     14 FB 61 F5 | 	xor	result1, local02
17058     FD 12 02 F6 | 	mov	arg01, result1
1705c     FF 7F 23 FF 
17060     00 14 06 F6 | 	mov	arg02, ##1191181824
17064     B4 30 B1 FD | 	call	#__system___float_div
17068     FD 14 02 F6 | 	mov	arg02, result1
1706c     13 13 02 F6 | 	mov	arg01, local01
17070     D4 2A B1 FD | 	call	#__system___float_add
17074     10 4E 05 F1 | 	add	fp, #16
17078     A7 FA 61 FC | 	wrlong	result1, fp
1707c                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1707c     10 4E 85 F1 | 	sub	fp, #16
17080     1F FA 05 F4 | 	bitl	result1, #31
17084     FD 12 02 F6 | 	mov	arg01, result1
17088     89 41 1D FF 
1708c     6F 14 06 F6 | 	mov	arg02, ##981668463
17090     01 16 06 F6 | 	mov	arg03, #1
17094     B4 32 B1 FD | 	call	#__system___float_cmp
17098     00 FA 55 F2 | 	cmps	result1, #0 wc
1709c     10 4E 05 C1 |  if_b	add	fp, #16
170a0     A7 00 68 CC |  if_b	wrlong	#0, fp
170a4     10 4E 85 C1 |  if_b	sub	fp, #16
170a8     10 4E 05 F1 | 	add	fp, #16
170ac     A7 26 02 FB | 	rdlong	local01, fp
170b0     10 4E 85 F1 | 	sub	fp, #16
170b4     A7 26 62 FC | 	wrlong	local01, fp
170b8     08 4E 05 F1 | 	add	fp, #8
170bc     A7 3C 68 FC | 	wrlong	#30, fp
170c0     08 4E 85 F1 | 	sub	fp, #8
170c4     A7 12 02 F6 | 	mov	arg01, fp
170c8     D4 66 BF FD | 	call	#_push
170cc                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
170cc     28 01 90 FD | 	jmp	#LR__1874
170d0                 | LR__1871
170d0     34 66 BF FD | 	call	#_pop
170d4     A7 FA 61 FC | 	wrlong	result1, fp
170d8     04 4E 05 F1 | 	add	fp, #4
170dc     A7 FC 61 FC | 	wrlong	result2, fp
170e0     04 4E 05 F1 | 	add	fp, #4
170e4     A7 FE 61 FC | 	wrlong	result3, fp
170e8                 | ' t1=pop()
170e8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
170e8     08 4E 85 F1 | 	sub	fp, #8
170ec     1C FE 0D F2 | 	cmp	result3, #28 wz
170f0     08 4E 05 51 |  if_ne	add	fp, #8
170f4     A7 26 02 5B |  if_ne	rdlong	local01, fp
170f8     08 4E 85 51 |  if_ne	sub	fp, #8
170fc     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17100     E8 00 90 5D |  if_ne	jmp	#LR__1873
17104     A7 26 02 FB | 	rdlong	local01, fp
17108     52 00 00 FF 
1710c     08 E5 05 F1 | 	add	objptr, ##42248
17110     F2 26 62 FC | 	wrlong	local01, objptr
17114                 | '   q=t1.result.uresult
17114                 | '   if q<7 then 
17114     52 00 00 FF 
17118     08 E5 85 F1 | 	sub	objptr, ##42248
1711c     07 26 56 F2 | 	cmps	local01, #7 wc
17120     B8 00 90 3D |  if_ae	jmp	#LR__1872
17124     00 C0 1B FF 
17128     00 26 06 F6 | 	mov	local01, ##931135488
1712c     52 00 00 FF 
17130     08 E5 05 F1 | 	add	objptr, ##42248
17134     F2 16 02 FB | 	rdlong	arg03, objptr
17138     02 16 66 F0 | 	shl	arg03, #2
1713c     24 E5 85 F1 | 	sub	objptr, #292
17140     F2 16 02 F1 | 	add	arg03, objptr
17144     0B 13 02 FB | 	rdlong	arg01, arg03
17148     51 00 00 FF 
1714c     E4 E5 85 F1 | 	sub	objptr, ##41956
17150     09 13 52 F6 | 	abs	arg01, arg01 wc
17154     1F 28 C6 C9 |  if_b	decod	local02, #31
17158     00 28 06 36 |  if_ae	mov	local02, #0
1715c     B4 29 B1 FD | 	call	#__system___float_fromuns
17160     14 FB 61 F5 | 	xor	result1, local02
17164     FD 12 02 F6 | 	mov	arg01, result1
17168     FF 7F 23 FF 
1716c     00 14 06 F6 | 	mov	arg02, ##1191181824
17170     A8 2F B1 FD | 	call	#__system___float_div
17174     FD 14 02 F6 | 	mov	arg02, result1
17178     13 13 02 F6 | 	mov	arg01, local01
1717c     C8 29 B1 FD | 	call	#__system___float_add
17180     10 4E 05 F1 | 	add	fp, #16
17184     A7 FA 61 FC | 	wrlong	result1, fp
17188                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17188     10 4E 85 F1 | 	sub	fp, #16
1718c     1F FA 05 F4 | 	bitl	result1, #31
17190     FD 12 02 F6 | 	mov	arg01, result1
17194     89 41 1D FF 
17198     6F 14 06 F6 | 	mov	arg02, ##981668463
1719c     01 16 06 F6 | 	mov	arg03, #1
171a0     A8 31 B1 FD | 	call	#__system___float_cmp
171a4     00 FA 55 F2 | 	cmps	result1, #0 wc
171a8     10 4E 05 C1 |  if_b	add	fp, #16
171ac     A7 00 68 CC |  if_b	wrlong	#0, fp
171b0     10 4E 85 C1 |  if_b	sub	fp, #16
171b4     10 4E 05 F1 | 	add	fp, #16
171b8     A7 26 02 FB | 	rdlong	local01, fp
171bc     10 4E 85 F1 | 	sub	fp, #16
171c0     A7 26 62 FC | 	wrlong	local01, fp
171c4     08 4E 05 F1 | 	add	fp, #8
171c8     A7 3C 68 FC | 	wrlong	#30, fp
171cc     08 4E 85 F1 | 	sub	fp, #8
171d0     A7 12 02 F6 | 	mov	arg01, fp
171d4     C8 65 BF FD | 	call	#_push
171d8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
171d8     1C 00 90 FD | 	jmp	#LR__1874
171dc                 | LR__1872
171dc     29 12 06 F6 | 	mov	arg01, #41
171e0     00 14 06 F6 | 	mov	arg02, #0
171e4     04 C4 B0 FD | 	call	#_printerror
171e8                 | '      printerror(41) : return
171e8     0C 00 90 FD | 	jmp	#LR__1874
171ec                 | LR__1873
171ec     29 12 06 F6 | 	mov	arg01, #41
171f0     00 14 06 F6 | 	mov	arg02, #0
171f4     F4 C3 B0 FD | 	call	#_printerror
171f8                 | LR__1874
171f8     A7 F0 03 F6 | 	mov	ptra, fp
171fc     B2 00 A0 FD | 	call	#popregs_
17200                 | _do_padry_ret
17200     2D 00 64 FD | 	ret
17204                 | 
17204                 | ' 
17204                 | ' ' ------------------ padrz
17204                 | ' 
17204                 | ' sub do_padrz
17204                 | _do_padrz
17204     02 4A 05 F6 | 	mov	COUNT_, #2
17208     A8 00 A0 FD | 	call	#pushregs_
1720c     14 F0 07 F1 | 	add	ptra, #20
17210     4A 00 00 FF 
17214     80 E4 05 F1 | 	add	objptr, ##38016
17218     F2 26 02 FB | 	rdlong	local01, objptr
1721c     13 17 02 F6 | 	mov	arg03, local01
17220     01 16 66 F0 | 	shl	arg03, #1
17224     13 17 02 F1 | 	add	arg03, local01
17228     02 16 66 F0 | 	shl	arg03, #2
1722c     03 00 00 FF 
17230     04 E4 85 F1 | 	sub	objptr, ##1540
17234     F2 16 02 F1 | 	add	arg03, objptr
17238     0B 17 02 FB | 	rdlong	arg03, arg03
1723c     0C 4E 05 F1 | 	add	fp, #12
17240     A7 16 62 FC | 	wrlong	arg03, fp
17244                 | ' 
17244                 | ' numpar=compiledline(lineptr_e).result.uresult
17244                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
17244     0C 4E 85 F1 | 	sub	fp, #12
17248     02 16 16 F2 | 	cmp	arg03, #2 wc
1724c     47 00 00 FF 
17250     7C E4 85 F1 | 	sub	objptr, ##36476
17254     40 00 90 CD |  if_b	jmp	#LR__1880
17258     00 12 06 F6 | 	mov	arg01, #0
1725c     E0 5A B1 FD | 	call	#__system___getiolock_0614
17260     FD 12 02 F6 | 	mov	arg01, result1
17264     34 FE B0 FD | 	call	#__system___lockmem
17268     BB 01 00 FF 
1726c     FC 14 06 F6 | 	mov	arg02, ##@LR__6001
17270     00 12 06 F6 | 	mov	arg01, #0
17274     00 16 06 F6 | 	mov	arg03, #0
17278     18 0B B1 FD | 	call	#__system___basic_print_string
1727c     00 12 06 F6 | 	mov	arg01, #0
17280     BC 5A B1 FD | 	call	#__system___getiolock_0614
17284     FD 00 68 FC | 	wrlong	#0, result1
17288     27 12 06 F6 | 	mov	arg01, #39
1728c     00 14 06 F6 | 	mov	arg02, #0
17290     58 C3 B0 FD | 	call	#_printerror
17294     E0 01 90 FD | 	jmp	#LR__1884
17298                 | LR__1880
17298                 | ' if numpar=0 then 
17298     0C 4E 05 F1 | 	add	fp, #12
1729c     A7 FE 09 FB | 	rdlong	result3, fp wz
172a0     0C 4E 85 F1 | 	sub	fp, #12
172a4     A8 00 90 5D |  if_ne	jmp	#LR__1881
172a8     00 C0 1B FF 
172ac     00 26 06 F6 | 	mov	local01, ##931135488
172b0     52 00 00 FF 
172b4     00 E4 05 F1 | 	add	objptr, ##41984
172b8     F2 12 02 FB | 	rdlong	arg01, objptr
172bc     52 00 00 FF 
172c0     00 E4 85 F1 | 	sub	objptr, ##41984
172c4     09 13 52 F6 | 	abs	arg01, arg01 wc
172c8     1F 28 C6 C9 |  if_b	decod	local02, #31
172cc     00 28 06 36 |  if_ae	mov	local02, #0
172d0     40 28 B1 FD | 	call	#__system___float_fromuns
172d4     14 FB 61 F5 | 	xor	result1, local02
172d8     FD 12 02 F6 | 	mov	arg01, result1
172dc     FF 7F 23 FF 
172e0     00 14 06 F6 | 	mov	arg02, ##1191181824
172e4     34 2E B1 FD | 	call	#__system___float_div
172e8     FD 14 02 F6 | 	mov	arg02, result1
172ec     13 13 02 F6 | 	mov	arg01, local01
172f0     54 28 B1 FD | 	call	#__system___float_add
172f4     10 4E 05 F1 | 	add	fp, #16
172f8     A7 FA 61 FC | 	wrlong	result1, fp
172fc                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
172fc     10 4E 85 F1 | 	sub	fp, #16
17300     1F FA 05 F4 | 	bitl	result1, #31
17304     FD 12 02 F6 | 	mov	arg01, result1
17308     89 41 1D FF 
1730c     6F 14 06 F6 | 	mov	arg02, ##981668463
17310     01 16 06 F6 | 	mov	arg03, #1
17314     34 30 B1 FD | 	call	#__system___float_cmp
17318     00 FA 55 F2 | 	cmps	result1, #0 wc
1731c     10 4E 05 C1 |  if_b	add	fp, #16
17320     A7 00 68 CC |  if_b	wrlong	#0, fp
17324     10 4E 85 C1 |  if_b	sub	fp, #16
17328     10 4E 05 F1 | 	add	fp, #16
1732c     A7 26 02 FB | 	rdlong	local01, fp
17330     10 4E 85 F1 | 	sub	fp, #16
17334     A7 26 62 FC | 	wrlong	local01, fp
17338     08 4E 05 F1 | 	add	fp, #8
1733c     A7 3C 68 FC | 	wrlong	#30, fp
17340     08 4E 85 F1 | 	sub	fp, #8
17344     A7 12 02 F6 | 	mov	arg01, fp
17348     54 64 BF FD | 	call	#_push
1734c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
1734c     28 01 90 FD | 	jmp	#LR__1884
17350                 | LR__1881
17350     B4 63 BF FD | 	call	#_pop
17354     A7 FA 61 FC | 	wrlong	result1, fp
17358     04 4E 05 F1 | 	add	fp, #4
1735c     A7 FC 61 FC | 	wrlong	result2, fp
17360     04 4E 05 F1 | 	add	fp, #4
17364     A7 FE 61 FC | 	wrlong	result3, fp
17368                 | ' t1=pop()
17368                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17368     08 4E 85 F1 | 	sub	fp, #8
1736c     1C FE 0D F2 | 	cmp	result3, #28 wz
17370     08 4E 05 51 |  if_ne	add	fp, #8
17374     A7 26 02 5B |  if_ne	rdlong	local01, fp
17378     08 4E 85 51 |  if_ne	sub	fp, #8
1737c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17380     E8 00 90 5D |  if_ne	jmp	#LR__1883
17384     A7 26 02 FB | 	rdlong	local01, fp
17388     52 00 00 FF 
1738c     08 E5 05 F1 | 	add	objptr, ##42248
17390     F2 26 62 FC | 	wrlong	local01, objptr
17394                 | '   q=t1.result.uresult
17394                 | '   if q<7 then 
17394     52 00 00 FF 
17398     08 E5 85 F1 | 	sub	objptr, ##42248
1739c     07 26 56 F2 | 	cmps	local01, #7 wc
173a0     B8 00 90 3D |  if_ae	jmp	#LR__1882
173a4     00 C0 1B FF 
173a8     00 26 06 F6 | 	mov	local01, ##931135488
173ac     52 00 00 FF 
173b0     08 E5 05 F1 | 	add	objptr, ##42248
173b4     F2 16 02 FB | 	rdlong	arg03, objptr
173b8     02 16 66 F0 | 	shl	arg03, #2
173bc     08 E5 85 F1 | 	sub	objptr, #264
173c0     F2 16 02 F1 | 	add	arg03, objptr
173c4     0B 13 02 FB | 	rdlong	arg01, arg03
173c8     52 00 00 FF 
173cc     00 E4 85 F1 | 	sub	objptr, ##41984
173d0     09 13 52 F6 | 	abs	arg01, arg01 wc
173d4     1F 28 C6 C9 |  if_b	decod	local02, #31
173d8     00 28 06 36 |  if_ae	mov	local02, #0
173dc     34 27 B1 FD | 	call	#__system___float_fromuns
173e0     14 FB 61 F5 | 	xor	result1, local02
173e4     FD 12 02 F6 | 	mov	arg01, result1
173e8     FF 7F 23 FF 
173ec     00 14 06 F6 | 	mov	arg02, ##1191181824
173f0     28 2D B1 FD | 	call	#__system___float_div
173f4     FD 14 02 F6 | 	mov	arg02, result1
173f8     13 13 02 F6 | 	mov	arg01, local01
173fc     48 27 B1 FD | 	call	#__system___float_add
17400     10 4E 05 F1 | 	add	fp, #16
17404     A7 FA 61 FC | 	wrlong	result1, fp
17408                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17408     10 4E 85 F1 | 	sub	fp, #16
1740c     1F FA 05 F4 | 	bitl	result1, #31
17410     FD 12 02 F6 | 	mov	arg01, result1
17414     89 41 1D FF 
17418     6F 14 06 F6 | 	mov	arg02, ##981668463
1741c     01 16 06 F6 | 	mov	arg03, #1
17420     28 2F B1 FD | 	call	#__system___float_cmp
17424     00 FA 55 F2 | 	cmps	result1, #0 wc
17428     10 4E 05 C1 |  if_b	add	fp, #16
1742c     A7 00 68 CC |  if_b	wrlong	#0, fp
17430     10 4E 85 C1 |  if_b	sub	fp, #16
17434     10 4E 05 F1 | 	add	fp, #16
17438     A7 26 02 FB | 	rdlong	local01, fp
1743c     10 4E 85 F1 | 	sub	fp, #16
17440     A7 26 62 FC | 	wrlong	local01, fp
17444     08 4E 05 F1 | 	add	fp, #8
17448     A7 3C 68 FC | 	wrlong	#30, fp
1744c     08 4E 85 F1 | 	sub	fp, #8
17450     A7 12 02 F6 | 	mov	arg01, fp
17454     48 63 BF FD | 	call	#_push
17458                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17458     1C 00 90 FD | 	jmp	#LR__1884
1745c                 | LR__1882
1745c     29 12 06 F6 | 	mov	arg01, #41
17460     00 14 06 F6 | 	mov	arg02, #0
17464     84 C1 B0 FD | 	call	#_printerror
17468                 | '      printerror(41) : return
17468     0C 00 90 FD | 	jmp	#LR__1884
1746c                 | LR__1883
1746c     29 12 06 F6 | 	mov	arg01, #41
17470     00 14 06 F6 | 	mov	arg02, #0
17474     74 C1 B0 FD | 	call	#_printerror
17478                 | LR__1884
17478     A7 F0 03 F6 | 	mov	ptra, fp
1747c     B2 00 A0 FD | 	call	#popregs_
17480                 | _do_padrz_ret
17480     2D 00 64 FD | 	ret
17484                 | 
17484                 | ' ' ------------------ padx
17484                 | ' 
17484                 | ' sub do_padx
17484                 | _do_padx
17484     02 4A 05 F6 | 	mov	COUNT_, #2
17488     A8 00 A0 FD | 	call	#pushregs_
1748c     14 F0 07 F1 | 	add	ptra, #20
17490     4A 00 00 FF 
17494     80 E4 05 F1 | 	add	objptr, ##38016
17498     F2 26 02 FB | 	rdlong	local01, objptr
1749c     13 17 02 F6 | 	mov	arg03, local01
174a0     01 16 66 F0 | 	shl	arg03, #1
174a4     13 17 02 F1 | 	add	arg03, local01
174a8     02 16 66 F0 | 	shl	arg03, #2
174ac     03 00 00 FF 
174b0     04 E4 85 F1 | 	sub	objptr, ##1540
174b4     F2 16 02 F1 | 	add	arg03, objptr
174b8     0B 17 02 FB | 	rdlong	arg03, arg03
174bc     0C 4E 05 F1 | 	add	fp, #12
174c0     A7 16 62 FC | 	wrlong	arg03, fp
174c4                 | ' 
174c4                 | ' numpar=compiledline(lineptr_e).result.uresult
174c4                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
174c4     0C 4E 85 F1 | 	sub	fp, #12
174c8     02 16 16 F2 | 	cmp	arg03, #2 wc
174cc     47 00 00 FF 
174d0     7C E4 85 F1 | 	sub	objptr, ##36476
174d4     40 00 90 CD |  if_b	jmp	#LR__1890
174d8     00 12 06 F6 | 	mov	arg01, #0
174dc     60 58 B1 FD | 	call	#__system___getiolock_0614
174e0     FD 12 02 F6 | 	mov	arg01, result1
174e4     B4 FB B0 FD | 	call	#__system___lockmem
174e8     BB 01 00 FF 
174ec     04 15 06 F6 | 	mov	arg02, ##@LR__6002
174f0     00 12 06 F6 | 	mov	arg01, #0
174f4     00 16 06 F6 | 	mov	arg03, #0
174f8     98 08 B1 FD | 	call	#__system___basic_print_string
174fc     00 12 06 F6 | 	mov	arg01, #0
17500     3C 58 B1 FD | 	call	#__system___getiolock_0614
17504     FD 00 68 FC | 	wrlong	#0, result1
17508     27 12 06 F6 | 	mov	arg01, #39
1750c     00 14 06 F6 | 	mov	arg02, #0
17510     D8 C0 B0 FD | 	call	#_printerror
17514     E0 01 90 FD | 	jmp	#LR__1894
17518                 | LR__1890
17518                 | ' if numpar=0 then 
17518     0C 4E 05 F1 | 	add	fp, #12
1751c     A7 FE 09 FB | 	rdlong	result3, fp wz
17520     0C 4E 85 F1 | 	sub	fp, #12
17524     A8 00 90 5D |  if_ne	jmp	#LR__1891
17528     00 C0 1B FF 
1752c     00 26 06 F6 | 	mov	local01, ##931135488
17530     51 00 00 FF 
17534     58 E5 05 F1 | 	add	objptr, ##41816
17538     F2 12 02 FB | 	rdlong	arg01, objptr
1753c     51 00 00 FF 
17540     58 E5 85 F1 | 	sub	objptr, ##41816
17544     09 13 52 F6 | 	abs	arg01, arg01 wc
17548     1F 28 C6 C9 |  if_b	decod	local02, #31
1754c     00 28 06 36 |  if_ae	mov	local02, #0
17550     C0 25 B1 FD | 	call	#__system___float_fromuns
17554     14 FB 61 F5 | 	xor	result1, local02
17558     FD 12 02 F6 | 	mov	arg01, result1
1755c     FF 7F 23 FF 
17560     00 14 06 F6 | 	mov	arg02, ##1191181824
17564     B4 2B B1 FD | 	call	#__system___float_div
17568     FD 14 02 F6 | 	mov	arg02, result1
1756c     13 13 02 F6 | 	mov	arg01, local01
17570     D4 25 B1 FD | 	call	#__system___float_add
17574     10 4E 05 F1 | 	add	fp, #16
17578     A7 FA 61 FC | 	wrlong	result1, fp
1757c                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1757c     10 4E 85 F1 | 	sub	fp, #16
17580     1F FA 05 F4 | 	bitl	result1, #31
17584     FD 12 02 F6 | 	mov	arg01, result1
17588     89 41 1D FF 
1758c     6F 14 06 F6 | 	mov	arg02, ##981668463
17590     01 16 06 F6 | 	mov	arg03, #1
17594     B4 2D B1 FD | 	call	#__system___float_cmp
17598     00 FA 55 F2 | 	cmps	result1, #0 wc
1759c     10 4E 05 C1 |  if_b	add	fp, #16
175a0     A7 00 68 CC |  if_b	wrlong	#0, fp
175a4     10 4E 85 C1 |  if_b	sub	fp, #16
175a8     10 4E 05 F1 | 	add	fp, #16
175ac     A7 26 02 FB | 	rdlong	local01, fp
175b0     10 4E 85 F1 | 	sub	fp, #16
175b4     A7 26 62 FC | 	wrlong	local01, fp
175b8     08 4E 05 F1 | 	add	fp, #8
175bc     A7 3C 68 FC | 	wrlong	#30, fp
175c0     08 4E 85 F1 | 	sub	fp, #8
175c4     A7 12 02 F6 | 	mov	arg01, fp
175c8     D4 61 BF FD | 	call	#_push
175cc                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
175cc     28 01 90 FD | 	jmp	#LR__1894
175d0                 | LR__1891
175d0     34 61 BF FD | 	call	#_pop
175d4     A7 FA 61 FC | 	wrlong	result1, fp
175d8     04 4E 05 F1 | 	add	fp, #4
175dc     A7 FC 61 FC | 	wrlong	result2, fp
175e0     04 4E 05 F1 | 	add	fp, #4
175e4     A7 FE 61 FC | 	wrlong	result3, fp
175e8                 | ' t1=pop()
175e8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
175e8     08 4E 85 F1 | 	sub	fp, #8
175ec     1C FE 0D F2 | 	cmp	result3, #28 wz
175f0     08 4E 05 51 |  if_ne	add	fp, #8
175f4     A7 26 02 5B |  if_ne	rdlong	local01, fp
175f8     08 4E 85 51 |  if_ne	sub	fp, #8
175fc     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17600     E8 00 90 5D |  if_ne	jmp	#LR__1893
17604     A7 26 02 FB | 	rdlong	local01, fp
17608     52 00 00 FF 
1760c     08 E5 05 F1 | 	add	objptr, ##42248
17610     F2 26 62 FC | 	wrlong	local01, objptr
17614                 | '   q=t1.result.uresult
17614                 | '   if q<7 then 
17614     52 00 00 FF 
17618     08 E5 85 F1 | 	sub	objptr, ##42248
1761c     07 26 56 F2 | 	cmps	local01, #7 wc
17620     B8 00 90 3D |  if_ae	jmp	#LR__1892
17624     00 C0 1B FF 
17628     00 26 06 F6 | 	mov	local01, ##931135488
1762c     52 00 00 FF 
17630     08 E5 05 F1 | 	add	objptr, ##42248
17634     F2 16 02 FB | 	rdlong	arg03, objptr
17638     02 16 66 F0 | 	shl	arg03, #2
1763c     B0 E5 85 F1 | 	sub	objptr, #432
17640     F2 16 02 F1 | 	add	arg03, objptr
17644     0B 13 02 FB | 	rdlong	arg01, arg03
17648     51 00 00 FF 
1764c     58 E5 85 F1 | 	sub	objptr, ##41816
17650     09 13 52 F6 | 	abs	arg01, arg01 wc
17654     1F 28 C6 C9 |  if_b	decod	local02, #31
17658     00 28 06 36 |  if_ae	mov	local02, #0
1765c     B4 24 B1 FD | 	call	#__system___float_fromuns
17660     14 FB 61 F5 | 	xor	result1, local02
17664     FD 12 02 F6 | 	mov	arg01, result1
17668     FF 7F 23 FF 
1766c     00 14 06 F6 | 	mov	arg02, ##1191181824
17670     A8 2A B1 FD | 	call	#__system___float_div
17674     FD 14 02 F6 | 	mov	arg02, result1
17678     13 13 02 F6 | 	mov	arg01, local01
1767c     C8 24 B1 FD | 	call	#__system___float_add
17680     10 4E 05 F1 | 	add	fp, #16
17684     A7 FA 61 FC | 	wrlong	result1, fp
17688                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17688     10 4E 85 F1 | 	sub	fp, #16
1768c     1F FA 05 F4 | 	bitl	result1, #31
17690     FD 12 02 F6 | 	mov	arg01, result1
17694     89 41 1D FF 
17698     6F 14 06 F6 | 	mov	arg02, ##981668463
1769c     01 16 06 F6 | 	mov	arg03, #1
176a0     A8 2C B1 FD | 	call	#__system___float_cmp
176a4     00 FA 55 F2 | 	cmps	result1, #0 wc
176a8     10 4E 05 C1 |  if_b	add	fp, #16
176ac     A7 00 68 CC |  if_b	wrlong	#0, fp
176b0     10 4E 85 C1 |  if_b	sub	fp, #16
176b4     10 4E 05 F1 | 	add	fp, #16
176b8     A7 26 02 FB | 	rdlong	local01, fp
176bc     10 4E 85 F1 | 	sub	fp, #16
176c0     A7 26 62 FC | 	wrlong	local01, fp
176c4     08 4E 05 F1 | 	add	fp, #8
176c8     A7 3C 68 FC | 	wrlong	#30, fp
176cc     08 4E 85 F1 | 	sub	fp, #8
176d0     A7 12 02 F6 | 	mov	arg01, fp
176d4     C8 60 BF FD | 	call	#_push
176d8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
176d8     1C 00 90 FD | 	jmp	#LR__1894
176dc                 | LR__1892
176dc     29 12 06 F6 | 	mov	arg01, #41
176e0     00 14 06 F6 | 	mov	arg02, #0
176e4     04 BF B0 FD | 	call	#_printerror
176e8                 | '      printerror(41) : return
176e8     0C 00 90 FD | 	jmp	#LR__1894
176ec                 | LR__1893
176ec     29 12 06 F6 | 	mov	arg01, #41
176f0     00 14 06 F6 | 	mov	arg02, #0
176f4     F4 BE B0 FD | 	call	#_printerror
176f8                 | LR__1894
176f8     A7 F0 03 F6 | 	mov	ptra, fp
176fc     B2 00 A0 FD | 	call	#popregs_
17700                 | _do_padx_ret
17700     2D 00 64 FD | 	ret
17704                 | 
17704                 | ' 
17704                 | ' ' ------------------ pady
17704                 | ' 
17704                 | ' sub do_pady
17704                 | _do_pady
17704     02 4A 05 F6 | 	mov	COUNT_, #2
17708     A8 00 A0 FD | 	call	#pushregs_
1770c     14 F0 07 F1 | 	add	ptra, #20
17710     4A 00 00 FF 
17714     80 E4 05 F1 | 	add	objptr, ##38016
17718     F2 26 02 FB | 	rdlong	local01, objptr
1771c     13 17 02 F6 | 	mov	arg03, local01
17720     01 16 66 F0 | 	shl	arg03, #1
17724     13 17 02 F1 | 	add	arg03, local01
17728     02 16 66 F0 | 	shl	arg03, #2
1772c     03 00 00 FF 
17730     04 E4 85 F1 | 	sub	objptr, ##1540
17734     F2 16 02 F1 | 	add	arg03, objptr
17738     0B 17 02 FB | 	rdlong	arg03, arg03
1773c     0C 4E 05 F1 | 	add	fp, #12
17740     A7 16 62 FC | 	wrlong	arg03, fp
17744                 | ' 
17744                 | ' numpar=compiledline(lineptr_e).result.uresult
17744                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
17744     0C 4E 85 F1 | 	sub	fp, #12
17748     02 16 16 F2 | 	cmp	arg03, #2 wc
1774c     47 00 00 FF 
17750     7C E4 85 F1 | 	sub	objptr, ##36476
17754     40 00 90 CD |  if_b	jmp	#LR__1900
17758     00 12 06 F6 | 	mov	arg01, #0
1775c     E0 55 B1 FD | 	call	#__system___getiolock_0614
17760     FD 12 02 F6 | 	mov	arg01, result1
17764     34 F9 B0 FD | 	call	#__system___lockmem
17768     BB 01 00 FF 
1776c     0B 15 06 F6 | 	mov	arg02, ##@LR__6003
17770     00 12 06 F6 | 	mov	arg01, #0
17774     00 16 06 F6 | 	mov	arg03, #0
17778     18 06 B1 FD | 	call	#__system___basic_print_string
1777c     00 12 06 F6 | 	mov	arg01, #0
17780     BC 55 B1 FD | 	call	#__system___getiolock_0614
17784     FD 00 68 FC | 	wrlong	#0, result1
17788     27 12 06 F6 | 	mov	arg01, #39
1778c     00 14 06 F6 | 	mov	arg02, #0
17790     58 BE B0 FD | 	call	#_printerror
17794     E0 01 90 FD | 	jmp	#LR__1904
17798                 | LR__1900
17798                 | ' if numpar=0 then 
17798     0C 4E 05 F1 | 	add	fp, #12
1779c     A7 FE 09 FB | 	rdlong	result3, fp wz
177a0     0C 4E 85 F1 | 	sub	fp, #12
177a4     A8 00 90 5D |  if_ne	jmp	#LR__1901
177a8     00 C0 1B FF 
177ac     00 26 06 F6 | 	mov	local01, ##931135488
177b0     51 00 00 FF 
177b4     74 E5 05 F1 | 	add	objptr, ##41844
177b8     F2 12 02 FB | 	rdlong	arg01, objptr
177bc     51 00 00 FF 
177c0     74 E5 85 F1 | 	sub	objptr, ##41844
177c4     09 13 52 F6 | 	abs	arg01, arg01 wc
177c8     1F 28 C6 C9 |  if_b	decod	local02, #31
177cc     00 28 06 36 |  if_ae	mov	local02, #0
177d0     40 23 B1 FD | 	call	#__system___float_fromuns
177d4     14 FB 61 F5 | 	xor	result1, local02
177d8     FD 12 02 F6 | 	mov	arg01, result1
177dc     FF 7F 23 FF 
177e0     00 14 06 F6 | 	mov	arg02, ##1191181824
177e4     34 29 B1 FD | 	call	#__system___float_div
177e8     FD 14 02 F6 | 	mov	arg02, result1
177ec     13 13 02 F6 | 	mov	arg01, local01
177f0     54 23 B1 FD | 	call	#__system___float_add
177f4     10 4E 05 F1 | 	add	fp, #16
177f8     A7 FA 61 FC | 	wrlong	result1, fp
177fc                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
177fc     10 4E 85 F1 | 	sub	fp, #16
17800     1F FA 05 F4 | 	bitl	result1, #31
17804     FD 12 02 F6 | 	mov	arg01, result1
17808     89 41 1D FF 
1780c     6F 14 06 F6 | 	mov	arg02, ##981668463
17810     01 16 06 F6 | 	mov	arg03, #1
17814     34 2B B1 FD | 	call	#__system___float_cmp
17818     00 FA 55 F2 | 	cmps	result1, #0 wc
1781c     10 4E 05 C1 |  if_b	add	fp, #16
17820     A7 00 68 CC |  if_b	wrlong	#0, fp
17824     10 4E 85 C1 |  if_b	sub	fp, #16
17828     10 4E 05 F1 | 	add	fp, #16
1782c     A7 26 02 FB | 	rdlong	local01, fp
17830     10 4E 85 F1 | 	sub	fp, #16
17834     A7 26 62 FC | 	wrlong	local01, fp
17838     08 4E 05 F1 | 	add	fp, #8
1783c     A7 3C 68 FC | 	wrlong	#30, fp
17840     08 4E 85 F1 | 	sub	fp, #8
17844     A7 12 02 F6 | 	mov	arg01, fp
17848     54 5F BF FD | 	call	#_push
1784c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
1784c     28 01 90 FD | 	jmp	#LR__1904
17850                 | LR__1901
17850     B4 5E BF FD | 	call	#_pop
17854     A7 FA 61 FC | 	wrlong	result1, fp
17858     04 4E 05 F1 | 	add	fp, #4
1785c     A7 FC 61 FC | 	wrlong	result2, fp
17860     04 4E 05 F1 | 	add	fp, #4
17864     A7 FE 61 FC | 	wrlong	result3, fp
17868                 | ' t1=pop()
17868                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17868     08 4E 85 F1 | 	sub	fp, #8
1786c     1C FE 0D F2 | 	cmp	result3, #28 wz
17870     08 4E 05 51 |  if_ne	add	fp, #8
17874     A7 26 02 5B |  if_ne	rdlong	local01, fp
17878     08 4E 85 51 |  if_ne	sub	fp, #8
1787c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17880     E8 00 90 5D |  if_ne	jmp	#LR__1903
17884     A7 26 02 FB | 	rdlong	local01, fp
17888     52 00 00 FF 
1788c     08 E5 05 F1 | 	add	objptr, ##42248
17890     F2 26 62 FC | 	wrlong	local01, objptr
17894                 | '   q=t1.result.uresult
17894                 | '   if q<7 then 
17894     52 00 00 FF 
17898     08 E5 85 F1 | 	sub	objptr, ##42248
1789c     07 26 56 F2 | 	cmps	local01, #7 wc
178a0     B8 00 90 3D |  if_ae	jmp	#LR__1902
178a4     00 C0 1B FF 
178a8     00 26 06 F6 | 	mov	local01, ##931135488
178ac     52 00 00 FF 
178b0     08 E5 05 F1 | 	add	objptr, ##42248
178b4     F2 16 02 FB | 	rdlong	arg03, objptr
178b8     02 16 66 F0 | 	shl	arg03, #2
178bc     94 E5 85 F1 | 	sub	objptr, #404
178c0     F2 16 02 F1 | 	add	arg03, objptr
178c4     0B 13 02 FB | 	rdlong	arg01, arg03
178c8     51 00 00 FF 
178cc     74 E5 85 F1 | 	sub	objptr, ##41844
178d0     09 13 52 F6 | 	abs	arg01, arg01 wc
178d4     1F 28 C6 C9 |  if_b	decod	local02, #31
178d8     00 28 06 36 |  if_ae	mov	local02, #0
178dc     34 22 B1 FD | 	call	#__system___float_fromuns
178e0     14 FB 61 F5 | 	xor	result1, local02
178e4     FD 12 02 F6 | 	mov	arg01, result1
178e8     FF 7F 23 FF 
178ec     00 14 06 F6 | 	mov	arg02, ##1191181824
178f0     28 28 B1 FD | 	call	#__system___float_div
178f4     FD 14 02 F6 | 	mov	arg02, result1
178f8     13 13 02 F6 | 	mov	arg01, local01
178fc     48 22 B1 FD | 	call	#__system___float_add
17900     10 4E 05 F1 | 	add	fp, #16
17904     A7 FA 61 FC | 	wrlong	result1, fp
17908                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17908     10 4E 85 F1 | 	sub	fp, #16
1790c     1F FA 05 F4 | 	bitl	result1, #31
17910     FD 12 02 F6 | 	mov	arg01, result1
17914     89 41 1D FF 
17918     6F 14 06 F6 | 	mov	arg02, ##981668463
1791c     01 16 06 F6 | 	mov	arg03, #1
17920     28 2A B1 FD | 	call	#__system___float_cmp
17924     00 FA 55 F2 | 	cmps	result1, #0 wc
17928     10 4E 05 C1 |  if_b	add	fp, #16
1792c     A7 00 68 CC |  if_b	wrlong	#0, fp
17930     10 4E 85 C1 |  if_b	sub	fp, #16
17934     10 4E 05 F1 | 	add	fp, #16
17938     A7 26 02 FB | 	rdlong	local01, fp
1793c     10 4E 85 F1 | 	sub	fp, #16
17940     A7 26 62 FC | 	wrlong	local01, fp
17944     08 4E 05 F1 | 	add	fp, #8
17948     A7 3C 68 FC | 	wrlong	#30, fp
1794c     08 4E 85 F1 | 	sub	fp, #8
17950     A7 12 02 F6 | 	mov	arg01, fp
17954     48 5E BF FD | 	call	#_push
17958                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17958     1C 00 90 FD | 	jmp	#LR__1904
1795c                 | LR__1902
1795c     29 12 06 F6 | 	mov	arg01, #41
17960     00 14 06 F6 | 	mov	arg02, #0
17964     84 BC B0 FD | 	call	#_printerror
17968                 | '      printerror(41) : return
17968     0C 00 90 FD | 	jmp	#LR__1904
1796c                 | LR__1903
1796c     29 12 06 F6 | 	mov	arg01, #41
17970     00 14 06 F6 | 	mov	arg02, #0
17974     74 BC B0 FD | 	call	#_printerror
17978                 | LR__1904
17978     A7 F0 03 F6 | 	mov	ptra, fp
1797c     B2 00 A0 FD | 	call	#popregs_
17980                 | _do_pady_ret
17980     2D 00 64 FD | 	ret
17984                 | 
17984                 | ' 
17984                 | ' ' ------------------ padz
17984                 | ' 
17984                 | ' sub do_padz
17984                 | _do_padz
17984     02 4A 05 F6 | 	mov	COUNT_, #2
17988     A8 00 A0 FD | 	call	#pushregs_
1798c     14 F0 07 F1 | 	add	ptra, #20
17990     4A 00 00 FF 
17994     80 E4 05 F1 | 	add	objptr, ##38016
17998     F2 26 02 FB | 	rdlong	local01, objptr
1799c     13 17 02 F6 | 	mov	arg03, local01
179a0     01 16 66 F0 | 	shl	arg03, #1
179a4     13 17 02 F1 | 	add	arg03, local01
179a8     02 16 66 F0 | 	shl	arg03, #2
179ac     03 00 00 FF 
179b0     04 E4 85 F1 | 	sub	objptr, ##1540
179b4     F2 16 02 F1 | 	add	arg03, objptr
179b8     0B 17 02 FB | 	rdlong	arg03, arg03
179bc     0C 4E 05 F1 | 	add	fp, #12
179c0     A7 16 62 FC | 	wrlong	arg03, fp
179c4                 | ' 
179c4                 | ' numpar=compiledline(lineptr_e).result.uresult
179c4                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
179c4     0C 4E 85 F1 | 	sub	fp, #12
179c8     02 16 16 F2 | 	cmp	arg03, #2 wc
179cc     47 00 00 FF 
179d0     7C E4 85 F1 | 	sub	objptr, ##36476
179d4     40 00 90 CD |  if_b	jmp	#LR__1910
179d8     00 12 06 F6 | 	mov	arg01, #0
179dc     60 53 B1 FD | 	call	#__system___getiolock_0614
179e0     FD 12 02 F6 | 	mov	arg01, result1
179e4     B4 F6 B0 FD | 	call	#__system___lockmem
179e8     BB 01 00 FF 
179ec     12 15 06 F6 | 	mov	arg02, ##@LR__6004
179f0     00 12 06 F6 | 	mov	arg01, #0
179f4     00 16 06 F6 | 	mov	arg03, #0
179f8     98 03 B1 FD | 	call	#__system___basic_print_string
179fc     00 12 06 F6 | 	mov	arg01, #0
17a00     3C 53 B1 FD | 	call	#__system___getiolock_0614
17a04     FD 00 68 FC | 	wrlong	#0, result1
17a08     27 12 06 F6 | 	mov	arg01, #39
17a0c     00 14 06 F6 | 	mov	arg02, #0
17a10     D8 BB B0 FD | 	call	#_printerror
17a14     E0 01 90 FD | 	jmp	#LR__1914
17a18                 | LR__1910
17a18                 | ' if numpar=0 then 
17a18     0C 4E 05 F1 | 	add	fp, #12
17a1c     A7 FE 09 FB | 	rdlong	result3, fp wz
17a20     0C 4E 85 F1 | 	sub	fp, #12
17a24     A8 00 90 5D |  if_ne	jmp	#LR__1911
17a28     00 C0 1B FF 
17a2c     00 26 06 F6 | 	mov	local01, ##931135488
17a30     51 00 00 FF 
17a34     90 E5 05 F1 | 	add	objptr, ##41872
17a38     F2 12 02 FB | 	rdlong	arg01, objptr
17a3c     51 00 00 FF 
17a40     90 E5 85 F1 | 	sub	objptr, ##41872
17a44     09 13 52 F6 | 	abs	arg01, arg01 wc
17a48     1F 28 C6 C9 |  if_b	decod	local02, #31
17a4c     00 28 06 36 |  if_ae	mov	local02, #0
17a50     C0 20 B1 FD | 	call	#__system___float_fromuns
17a54     14 FB 61 F5 | 	xor	result1, local02
17a58     FD 12 02 F6 | 	mov	arg01, result1
17a5c     FF 7F 23 FF 
17a60     00 14 06 F6 | 	mov	arg02, ##1191181824
17a64     B4 26 B1 FD | 	call	#__system___float_div
17a68     FD 14 02 F6 | 	mov	arg02, result1
17a6c     13 13 02 F6 | 	mov	arg01, local01
17a70     D4 20 B1 FD | 	call	#__system___float_add
17a74     10 4E 05 F1 | 	add	fp, #16
17a78     A7 FA 61 FC | 	wrlong	result1, fp
17a7c                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17a7c     10 4E 85 F1 | 	sub	fp, #16
17a80     1F FA 05 F4 | 	bitl	result1, #31
17a84     FD 12 02 F6 | 	mov	arg01, result1
17a88     89 41 1D FF 
17a8c     6F 14 06 F6 | 	mov	arg02, ##981668463
17a90     01 16 06 F6 | 	mov	arg03, #1
17a94     B4 28 B1 FD | 	call	#__system___float_cmp
17a98     00 FA 55 F2 | 	cmps	result1, #0 wc
17a9c     10 4E 05 C1 |  if_b	add	fp, #16
17aa0     A7 00 68 CC |  if_b	wrlong	#0, fp
17aa4     10 4E 85 C1 |  if_b	sub	fp, #16
17aa8     10 4E 05 F1 | 	add	fp, #16
17aac     A7 26 02 FB | 	rdlong	local01, fp
17ab0     10 4E 85 F1 | 	sub	fp, #16
17ab4     A7 26 62 FC | 	wrlong	local01, fp
17ab8     08 4E 05 F1 | 	add	fp, #8
17abc     A7 3C 68 FC | 	wrlong	#30, fp
17ac0     08 4E 85 F1 | 	sub	fp, #8
17ac4     A7 12 02 F6 | 	mov	arg01, fp
17ac8     D4 5C BF FD | 	call	#_push
17acc                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
17acc     28 01 90 FD | 	jmp	#LR__1914
17ad0                 | LR__1911
17ad0     34 5C BF FD | 	call	#_pop
17ad4     A7 FA 61 FC | 	wrlong	result1, fp
17ad8     04 4E 05 F1 | 	add	fp, #4
17adc     A7 FC 61 FC | 	wrlong	result2, fp
17ae0     04 4E 05 F1 | 	add	fp, #4
17ae4     A7 FE 61 FC | 	wrlong	result3, fp
17ae8                 | ' t1=pop()
17ae8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17ae8     08 4E 85 F1 | 	sub	fp, #8
17aec     1C FE 0D F2 | 	cmp	result3, #28 wz
17af0     08 4E 05 51 |  if_ne	add	fp, #8
17af4     A7 26 02 5B |  if_ne	rdlong	local01, fp
17af8     08 4E 85 51 |  if_ne	sub	fp, #8
17afc     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17b00     E8 00 90 5D |  if_ne	jmp	#LR__1913
17b04     A7 26 02 FB | 	rdlong	local01, fp
17b08     52 00 00 FF 
17b0c     08 E5 05 F1 | 	add	objptr, ##42248
17b10     F2 26 62 FC | 	wrlong	local01, objptr
17b14                 | '   q=t1.result.uresult
17b14                 | '   if q<7 then 
17b14     52 00 00 FF 
17b18     08 E5 85 F1 | 	sub	objptr, ##42248
17b1c     07 26 56 F2 | 	cmps	local01, #7 wc
17b20     B8 00 90 3D |  if_ae	jmp	#LR__1912
17b24     00 C0 1B FF 
17b28     00 26 06 F6 | 	mov	local01, ##931135488
17b2c     52 00 00 FF 
17b30     08 E5 05 F1 | 	add	objptr, ##42248
17b34     F2 16 02 FB | 	rdlong	arg03, objptr
17b38     02 16 66 F0 | 	shl	arg03, #2
17b3c     78 E5 85 F1 | 	sub	objptr, #376
17b40     F2 16 02 F1 | 	add	arg03, objptr
17b44     0B 13 02 FB | 	rdlong	arg01, arg03
17b48     51 00 00 FF 
17b4c     90 E5 85 F1 | 	sub	objptr, ##41872
17b50     09 13 52 F6 | 	abs	arg01, arg01 wc
17b54     1F 28 C6 C9 |  if_b	decod	local02, #31
17b58     00 28 06 36 |  if_ae	mov	local02, #0
17b5c     B4 1F B1 FD | 	call	#__system___float_fromuns
17b60     14 FB 61 F5 | 	xor	result1, local02
17b64     FD 12 02 F6 | 	mov	arg01, result1
17b68     FF 7F 23 FF 
17b6c     00 14 06 F6 | 	mov	arg02, ##1191181824
17b70     A8 25 B1 FD | 	call	#__system___float_div
17b74     FD 14 02 F6 | 	mov	arg02, result1
17b78     13 13 02 F6 | 	mov	arg01, local01
17b7c     C8 1F B1 FD | 	call	#__system___float_add
17b80     10 4E 05 F1 | 	add	fp, #16
17b84     A7 FA 61 FC | 	wrlong	result1, fp
17b88                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17b88     10 4E 85 F1 | 	sub	fp, #16
17b8c     1F FA 05 F4 | 	bitl	result1, #31
17b90     FD 12 02 F6 | 	mov	arg01, result1
17b94     89 41 1D FF 
17b98     6F 14 06 F6 | 	mov	arg02, ##981668463
17b9c     01 16 06 F6 | 	mov	arg03, #1
17ba0     A8 27 B1 FD | 	call	#__system___float_cmp
17ba4     00 FA 55 F2 | 	cmps	result1, #0 wc
17ba8     10 4E 05 C1 |  if_b	add	fp, #16
17bac     A7 00 68 CC |  if_b	wrlong	#0, fp
17bb0     10 4E 85 C1 |  if_b	sub	fp, #16
17bb4     10 4E 05 F1 | 	add	fp, #16
17bb8     A7 26 02 FB | 	rdlong	local01, fp
17bbc     10 4E 85 F1 | 	sub	fp, #16
17bc0     A7 26 62 FC | 	wrlong	local01, fp
17bc4     08 4E 05 F1 | 	add	fp, #8
17bc8     A7 3C 68 FC | 	wrlong	#30, fp
17bcc     08 4E 85 F1 | 	sub	fp, #8
17bd0     A7 12 02 F6 | 	mov	arg01, fp
17bd4     C8 5B BF FD | 	call	#_push
17bd8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17bd8     1C 00 90 FD | 	jmp	#LR__1914
17bdc                 | LR__1912
17bdc     29 12 06 F6 | 	mov	arg01, #41
17be0     00 14 06 F6 | 	mov	arg02, #0
17be4     04 BA B0 FD | 	call	#_printerror
17be8                 | '      printerror(41) : return
17be8     0C 00 90 FD | 	jmp	#LR__1914
17bec                 | LR__1913
17bec     29 12 06 F6 | 	mov	arg01, #41
17bf0     00 14 06 F6 | 	mov	arg02, #0
17bf4     F4 B9 B0 FD | 	call	#_printerror
17bf8                 | LR__1914
17bf8     A7 F0 03 F6 | 	mov	ptra, fp
17bfc     B2 00 A0 FD | 	call	#popregs_
17c00                 | _do_padz_ret
17c00     2D 00 64 FD | 	ret
17c04                 | 
17c04                 | ' 
17c04                 | ' '-------------------- paper
17c04                 | ' 
17c04                 | ' sub do_paper
17c04                 | _do_paper
17c04     03 4A 05 F6 | 	mov	COUNT_, #3
17c08     A8 00 A0 FD | 	call	#pushregs_
17c0c     F8 5A BF FD | 	call	#_pop
17c10     FD 26 02 F6 | 	mov	local01, result1
17c14     FE 28 02 F6 | 	mov	local02, result2
17c18     FF 2A 02 F6 | 	mov	local03, result3
17c1c                 | ' t1=pop() 
17c1c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
17c1c     1E 2A 0E F2 | 	cmp	local03, #30 wz
17c20     10 00 90 5D |  if_ne	jmp	#LR__1920
17c24     13 13 02 F6 | 	mov	arg01, local01
17c28     00 14 06 F6 | 	mov	arg02, #0
17c2c     B0 27 B1 FD | 	call	#__system___float_tointeger
17c30     FD 26 02 F6 | 	mov	local01, result1
17c34                 | LR__1920
17c34                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
17c34     1F 2A 0E F2 | 	cmp	local03, #31 wz
17c38     18 00 90 5D |  if_ne	jmp	#LR__1921
17c3c     13 13 02 F6 | 	mov	arg01, local01
17c40     E0 2A B1 FD | 	call	#__system____builtin_atof
17c44     FD 12 02 F6 | 	mov	arg01, result1
17c48     00 14 06 F6 | 	mov	arg02, #0
17c4c     90 27 B1 FD | 	call	#__system___float_tointeger
17c50     FD 26 02 F6 | 	mov	local01, result1
17c54                 | LR__1921
17c54     37 00 00 FF 
17c58     38 E4 05 F1 | 	add	objptr, ##28216
17c5c     F2 26 62 FC | 	wrlong	local01, objptr
17c60     04 E4 05 F1 | 	add	objptr, #4
17c64     F2 12 02 FB | 	rdlong	arg01, objptr
17c68                 | ' 
17c68                 | ' write_color:=ff
17c68     36 00 00 FF 
17c6c     FB E5 85 F1 | 	sub	objptr, ##28155
17c70     F2 12 62 FC | 	wrlong	arg01, objptr
17c74                 | ' write_background:=bb
17c74     04 E4 05 F1 | 	add	objptr, #4
17c78     F2 26 62 FC | 	wrlong	local01, objptr
17c7c     45 E4 85 F1 | 	sub	objptr, #69
17c80     A7 F0 03 F6 | 	mov	ptra, fp
17c84     B2 00 A0 FD | 	call	#popregs_
17c88                 | _do_paper_ret
17c88     2D 00 64 FD | 	ret
17c8c                 | 
17c8c                 | ' 
17c8c                 | ' '-------------------- peek
17c8c                 | ' 
17c8c                 | ' sub do_peek
17c8c                 | _do_peek
17c8c     00 4A 05 F6 | 	mov	COUNT_, #0
17c90     A8 00 A0 FD | 	call	#pushregs_
17c94     14 F0 07 F1 | 	add	ptra, #20
17c98     6C 5A BF FD | 	call	#_pop
17c9c     A7 FA 61 FC | 	wrlong	result1, fp
17ca0     04 4E 05 F1 | 	add	fp, #4
17ca4     A7 FC 61 FC | 	wrlong	result2, fp
17ca8     04 4E 05 F1 | 	add	fp, #4
17cac     A7 FE 61 FC | 	wrlong	result3, fp
17cb0     08 4E 85 F1 | 	sub	fp, #8
17cb4     A7 12 02 F6 | 	mov	arg01, fp
17cb8     30 5C BF FD | 	call	#_converttoint
17cbc     0C 4E 05 F1 | 	add	fp, #12
17cc0     A7 FA 61 FC | 	wrlong	result1, fp
17cc4                 | ' 
17cc4                 | ' t1=pop()
17cc4                 | ' a=converttoint(t1)
17cc4                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
17cc4     0C 4E 85 F1 | 	sub	fp, #12
17cc8     00 04 00 FF 
17ccc     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17cd0     1C 00 90 3D |  if_ae	jmp	#LR__1930
17cd4     0C 4E 05 F1 | 	add	fp, #12
17cd8     A7 12 02 FB | 	rdlong	arg01, fp
17cdc     09 FB C1 FA | 	rdbyte	result1, arg01
17ce0     04 4E 05 F1 | 	add	fp, #4
17ce4     A7 FA 61 FC | 	wrlong	result1, fp
17ce8     10 4E 85 F1 | 	sub	fp, #16
17cec     20 00 90 FD | 	jmp	#LR__1931
17cf0                 | LR__1930
17cf0     0C 4E 05 F1 | 	add	fp, #12
17cf4     A7 12 02 FB | 	rdlong	arg01, fp
17cf8     0C 4E 85 F1 | 	sub	fp, #12
17cfc     64 BB B0 FD | 	call	#_pspeek
17d00     FD FA E1 F8 | 	getbyte	result1, result1, #0
17d04     10 4E 05 F1 | 	add	fp, #16
17d08     A7 FA 61 FC | 	wrlong	result1, fp
17d0c     10 4E 85 F1 | 	sub	fp, #16
17d10                 | LR__1931
17d10     08 4E 05 F1 | 	add	fp, #8
17d14     A7 3A 68 FC | 	wrlong	#29, fp
17d18     08 4E 05 F1 | 	add	fp, #8
17d1c     A7 12 02 FB | 	rdlong	arg01, fp
17d20     10 4E 85 F1 | 	sub	fp, #16
17d24     A7 12 62 FC | 	wrlong	arg01, fp
17d28     A7 12 02 F6 | 	mov	arg01, fp
17d2c     70 5A BF FD | 	call	#_push
17d30     A7 F0 03 F6 | 	mov	ptra, fp
17d34     B2 00 A0 FD | 	call	#popregs_
17d38                 | _do_peek_ret
17d38     2D 00 64 FD | 	ret
17d3c                 | 
17d3c                 | ' 
17d3c                 | ' '-------------------- pinfloat
17d3c                 | ' 
17d3c                 | ' sub do_pinfloat
17d3c                 | _do_pinfloat
17d3c     00 4A 05 F6 | 	mov	COUNT_, #0
17d40     A8 00 A0 FD | 	call	#pushregs_
17d44     0C F0 07 F1 | 	add	ptra, #12
17d48     BC 59 BF FD | 	call	#_pop
17d4c     A7 FA 61 FC | 	wrlong	result1, fp
17d50     04 4E 05 F1 | 	add	fp, #4
17d54     A7 FC 61 FC | 	wrlong	result2, fp
17d58     04 4E 05 F1 | 	add	fp, #4
17d5c     A7 FE 61 FC | 	wrlong	result3, fp
17d60     08 4E 85 F1 | 	sub	fp, #8
17d64     A7 12 02 F6 | 	mov	arg01, fp
17d68     80 5B BF FD | 	call	#_converttoint
17d6c     50 FA 61 FD | 	fltl	result1
17d70     A7 F0 03 F6 | 	mov	ptra, fp
17d74     B2 00 A0 FD | 	call	#popregs_
17d78                 | _do_pinfloat_ret
17d78     2D 00 64 FD | 	ret
17d7c                 | 
17d7c                 | ' 
17d7c                 | ' '-------------------- pinhi
17d7c                 | ' 
17d7c                 | ' sub do_pinhi
17d7c                 | _do_pinhi
17d7c     00 4A 05 F6 | 	mov	COUNT_, #0
17d80     A8 00 A0 FD | 	call	#pushregs_
17d84     0C F0 07 F1 | 	add	ptra, #12
17d88     7C 59 BF FD | 	call	#_pop
17d8c     A7 FA 61 FC | 	wrlong	result1, fp
17d90     04 4E 05 F1 | 	add	fp, #4
17d94     A7 FC 61 FC | 	wrlong	result2, fp
17d98     04 4E 05 F1 | 	add	fp, #4
17d9c     A7 FE 61 FC | 	wrlong	result3, fp
17da0     08 4E 85 F1 | 	sub	fp, #8
17da4     A7 12 02 F6 | 	mov	arg01, fp
17da8     40 5B BF FD | 	call	#_converttoint
17dac     59 FA 61 FD | 	drvh	result1
17db0     A7 F0 03 F6 | 	mov	ptra, fp
17db4     B2 00 A0 FD | 	call	#popregs_
17db8                 | _do_pinhi_ret
17db8     2D 00 64 FD | 	ret
17dbc                 | 
17dbc                 | ' 
17dbc                 | ' '-------------------- pinlo
17dbc                 | ' 
17dbc                 | ' sub do_pinlo
17dbc                 | _do_pinlo
17dbc     00 4A 05 F6 | 	mov	COUNT_, #0
17dc0     A8 00 A0 FD | 	call	#pushregs_
17dc4     0C F0 07 F1 | 	add	ptra, #12
17dc8     3C 59 BF FD | 	call	#_pop
17dcc     A7 FA 61 FC | 	wrlong	result1, fp
17dd0     04 4E 05 F1 | 	add	fp, #4
17dd4     A7 FC 61 FC | 	wrlong	result2, fp
17dd8     04 4E 05 F1 | 	add	fp, #4
17ddc     A7 FE 61 FC | 	wrlong	result3, fp
17de0     08 4E 85 F1 | 	sub	fp, #8
17de4     A7 12 02 F6 | 	mov	arg01, fp
17de8     00 5B BF FD | 	call	#_converttoint
17dec     58 FA 61 FD | 	drvl	result1
17df0     A7 F0 03 F6 | 	mov	ptra, fp
17df4     B2 00 A0 FD | 	call	#popregs_
17df8                 | _do_pinlo_ret
17df8     2D 00 64 FD | 	ret
17dfc                 | 
17dfc                 | ' 
17dfc                 | ' '-------------------- pinread
17dfc                 | ' 
17dfc                 | ' sub do_pinread
17dfc                 | _do_pinread
17dfc     00 4A 05 F6 | 	mov	COUNT_, #0
17e00     A8 00 A0 FD | 	call	#pushregs_
17e04     0C F0 07 F1 | 	add	ptra, #12
17e08     FC 58 BF FD | 	call	#_pop
17e0c     A7 FA 61 FC | 	wrlong	result1, fp
17e10     04 4E 05 F1 | 	add	fp, #4
17e14     A7 FC 61 FC | 	wrlong	result2, fp
17e18     04 4E 05 F1 | 	add	fp, #4
17e1c     A7 FE 61 FC | 	wrlong	result3, fp
17e20     08 4E 85 F1 | 	sub	fp, #8
17e24     A7 12 02 F6 | 	mov	arg01, fp
17e28     C0 5A BF FD | 	call	#_converttoint
17e2c     FD 12 02 F6 | 	mov	arg01, result1
17e30     20 12 CE F7 | 	test	arg01, #32 wz
17e34     FF FB 01 56 |  if_ne	mov	result1, inb
17e38     FE FB 01 A6 |  if_e	mov	result1, ina
17e3c     09 FB 41 F0 | 	shr	result1, arg01
17e40     06 12 46 F0 | 	shr	arg01, #6
17e44     09 FB 41 F7 | 	zerox	result1, arg01
17e48     52 00 00 FF 
17e4c     10 E5 05 F1 | 	add	objptr, ##42256
17e50     F2 FA 61 FC | 	wrlong	result1, objptr
17e54     52 00 00 FF 
17e58     10 E5 85 F1 | 	sub	objptr, ##42256
17e5c     08 4E 05 F1 | 	add	fp, #8
17e60     A7 3A 68 FC | 	wrlong	#29, fp
17e64     08 4E 85 F1 | 	sub	fp, #8
17e68     A7 08 68 FC | 	wrlong	#4, fp
17e6c     A7 12 02 F6 | 	mov	arg01, fp
17e70     2C 59 BF FD | 	call	#_push
17e74     A7 F0 03 F6 | 	mov	ptra, fp
17e78     B2 00 A0 FD | 	call	#popregs_
17e7c                 | _do_pinread_ret
17e7c     2D 00 64 FD | 	ret
17e80                 | 
17e80                 | ' 
17e80                 | ' '-------------------- pinstart
17e80                 | ' 
17e80                 | ' sub do_pinstart
17e80                 | _do_pinstart
17e80     03 4A 05 F6 | 	mov	COUNT_, #3
17e84     A8 00 A0 FD | 	call	#pushregs_
17e88     30 F0 07 F1 | 	add	ptra, #48
17e8c     78 58 BF FD | 	call	#_pop
17e90     FD 16 02 F6 | 	mov	arg03, result1
17e94     FE 14 02 F6 | 	mov	arg02, result2
17e98     FF 18 02 F6 | 	mov	arg04, result3
17e9c     A7 16 62 FC | 	wrlong	arg03, fp
17ea0     04 4E 05 F1 | 	add	fp, #4
17ea4     A7 14 62 FC | 	wrlong	arg02, fp
17ea8     04 4E 05 F1 | 	add	fp, #4
17eac     A7 18 62 FC | 	wrlong	arg04, fp
17eb0     08 4E 85 F1 | 	sub	fp, #8
17eb4     50 58 BF FD | 	call	#_pop
17eb8     FD 16 02 F6 | 	mov	arg03, result1
17ebc     FE 14 02 F6 | 	mov	arg02, result2
17ec0     FF 18 02 F6 | 	mov	arg04, result3
17ec4     0C 4E 05 F1 | 	add	fp, #12
17ec8     A7 16 62 FC | 	wrlong	arg03, fp
17ecc     04 4E 05 F1 | 	add	fp, #4
17ed0     A7 14 62 FC | 	wrlong	arg02, fp
17ed4     04 4E 05 F1 | 	add	fp, #4
17ed8     A7 18 62 FC | 	wrlong	arg04, fp
17edc     14 4E 85 F1 | 	sub	fp, #20
17ee0     24 58 BF FD | 	call	#_pop
17ee4     FD 16 02 F6 | 	mov	arg03, result1
17ee8     FE 14 02 F6 | 	mov	arg02, result2
17eec     FF 18 02 F6 | 	mov	arg04, result3
17ef0     18 4E 05 F1 | 	add	fp, #24
17ef4     A7 16 62 FC | 	wrlong	arg03, fp
17ef8     04 4E 05 F1 | 	add	fp, #4
17efc     A7 14 62 FC | 	wrlong	arg02, fp
17f00     04 4E 05 F1 | 	add	fp, #4
17f04     A7 18 62 FC | 	wrlong	arg04, fp
17f08     20 4E 85 F1 | 	sub	fp, #32
17f0c     F8 57 BF FD | 	call	#_pop
17f10     FF 16 02 F6 | 	mov	arg03, result3
17f14     24 4E 05 F1 | 	add	fp, #36
17f18     A7 FA 61 FC | 	wrlong	result1, fp
17f1c     04 4E 05 F1 | 	add	fp, #4
17f20     A7 FC 61 FC | 	wrlong	result2, fp
17f24     04 4E 05 F1 | 	add	fp, #4
17f28     A7 16 62 FC | 	wrlong	arg03, fp
17f2c     08 4E 85 F1 | 	sub	fp, #8
17f30     A7 12 02 F6 | 	mov	arg01, fp
17f34     24 4E 85 F1 | 	sub	fp, #36
17f38     B0 59 BF FD | 	call	#_converttoint
17f3c     FD 26 02 F6 | 	mov	local01, result1
17f40     18 4E 05 F1 | 	add	fp, #24
17f44     A7 12 02 F6 | 	mov	arg01, fp
17f48     18 4E 85 F1 | 	sub	fp, #24
17f4c     9C 59 BF FD | 	call	#_converttoint
17f50     FD 28 02 F6 | 	mov	local02, result1
17f54     0C 4E 05 F1 | 	add	fp, #12
17f58     A7 12 02 F6 | 	mov	arg01, fp
17f5c     0C 4E 85 F1 | 	sub	fp, #12
17f60     88 59 BF FD | 	call	#_converttoint
17f64     FD 2A 02 F6 | 	mov	local03, result1
17f68     A7 12 02 F6 | 	mov	arg01, fp
17f6c     7C 59 BF FD | 	call	#_converttoint
17f70     40 26 62 FD | 	dirl	local01
17f74     13 29 02 FC | 	wrpin	local02, local01
17f78     13 2B 12 FC | 	wxpin	local03, local01
17f7c     13 FB 21 FC | 	wypin	result1, local01
17f80     41 26 62 FD | 	dirh	local01
17f84     A7 F0 03 F6 | 	mov	ptra, fp
17f88     B2 00 A0 FD | 	call	#popregs_
17f8c                 | _do_pinstart_ret
17f8c     2D 00 64 FD | 	ret
17f90                 | 
17f90                 | ' 
17f90                 | ' '-------------------- pintoggle
17f90                 | ' 
17f90                 | ' sub do_pintoggle
17f90                 | _do_pintoggle
17f90     00 4A 05 F6 | 	mov	COUNT_, #0
17f94     A8 00 A0 FD | 	call	#pushregs_
17f98     0C F0 07 F1 | 	add	ptra, #12
17f9c     68 57 BF FD | 	call	#_pop
17fa0     A7 FA 61 FC | 	wrlong	result1, fp
17fa4     04 4E 05 F1 | 	add	fp, #4
17fa8     A7 FC 61 FC | 	wrlong	result2, fp
17fac     04 4E 05 F1 | 	add	fp, #4
17fb0     A7 FE 61 FC | 	wrlong	result3, fp
17fb4     08 4E 85 F1 | 	sub	fp, #8
17fb8     A7 12 02 F6 | 	mov	arg01, fp
17fbc     2C 59 BF FD | 	call	#_converttoint
17fc0     5F FA 61 FD | 	drvnot	result1
17fc4     A7 F0 03 F6 | 	mov	ptra, fp
17fc8     B2 00 A0 FD | 	call	#popregs_
17fcc                 | _do_pintoggle_ret
17fcc     2D 00 64 FD | 	ret
17fd0                 | 
17fd0                 | ' 
17fd0                 | ' '-------------------- pinwrite
17fd0                 | ' 
17fd0                 | ' sub do_pinwrite
17fd0                 | _do_pinwrite
17fd0     01 4A 05 F6 | 	mov	COUNT_, #1
17fd4     A8 00 A0 FD | 	call	#pushregs_
17fd8     18 F0 07 F1 | 	add	ptra, #24
17fdc     28 57 BF FD | 	call	#_pop
17fe0     FD 14 02 F6 | 	mov	arg02, result1
17fe4     FE 12 02 F6 | 	mov	arg01, result2
17fe8     FF 26 02 F6 | 	mov	local01, result3
17fec     A7 14 62 FC | 	wrlong	arg02, fp
17ff0     04 4E 05 F1 | 	add	fp, #4
17ff4     A7 12 62 FC | 	wrlong	arg01, fp
17ff8     04 4E 05 F1 | 	add	fp, #4
17ffc     A7 26 62 FC | 	wrlong	local01, fp
18000     08 4E 85 F1 | 	sub	fp, #8
18004     00 57 BF FD | 	call	#_pop
18008     FF 26 02 F6 | 	mov	local01, result3
1800c     0C 4E 05 F1 | 	add	fp, #12
18010     A7 FA 61 FC | 	wrlong	result1, fp
18014     04 4E 05 F1 | 	add	fp, #4
18018     A7 FC 61 FC | 	wrlong	result2, fp
1801c     04 4E 05 F1 | 	add	fp, #4
18020     A7 26 62 FC | 	wrlong	local01, fp
18024     08 4E 85 F1 | 	sub	fp, #8
18028     A7 12 02 F6 | 	mov	arg01, fp
1802c     0C 4E 85 F1 | 	sub	fp, #12
18030     B8 58 BF FD | 	call	#_converttoint
18034     FD 26 02 F6 | 	mov	local01, result1
18038     A7 12 02 F6 | 	mov	arg01, fp
1803c     AC 58 BF FD | 	call	#_converttoint
18040     FD 14 02 F6 | 	mov	arg02, result1
18044     13 13 02 F6 | 	mov	arg01, local01
18048     04 F2 B0 FD | 	call	#__system___pinwrite
1804c     A7 F0 03 F6 | 	mov	ptra, fp
18050     B2 00 A0 FD | 	call	#popregs_
18054                 | _do_pinwrite_ret
18054     2D 00 64 FD | 	ret
18058                 | 
18058                 | ' 
18058                 | ' '-------------------- play
18058                 | ' 
18058                 | ' sub do_play
18058                 | _do_play
18058     08 4A 05 F6 | 	mov	COUNT_, #8
1805c     A8 00 A0 FD | 	call	#pushregs_
18060     7C F0 07 F1 | 	add	ptra, #124
18064     68 4E 05 F1 | 	add	fp, #104
18068     77 CC A1 FF 
1806c     A7 7C 6B FC | 	wrlong	##1134096318, fp
18070                 | ' speed_coeff=305.873
18070                 | ' 
18070                 | ' for i=0 to 8 : params(i)=-2.0 : next i
18070     64 4E 85 F1 | 	sub	fp, #100
18074     A7 00 68 FC | 	wrlong	#0, fp
18078     97 18 48 FB | 	callpa	#(@LR__1941-@LR__1940)>>2,fcache_load_ptr_
1807c                 | LR__1940
1807c     A7 16 02 FB | 	rdlong	arg03, fp
18080     02 16 66 F0 | 	shl	arg03, #2
18084     34 4E 05 F1 | 	add	fp, #52
18088     A7 16 02 F1 | 	add	arg03, fp
1808c     00 00 E0 FF 
18090     0B 01 68 FC | 	wrlong	##-1073741824, arg03
18094     34 4E 85 F1 | 	sub	fp, #52
18098     A7 26 02 FB | 	rdlong	local01, fp
1809c     01 26 06 F1 | 	add	local01, #1
180a0     A7 26 62 FC | 	wrlong	local01, fp
180a4     09 26 56 F2 | 	cmps	local01, #9 wc
180a8     D0 FF 9F CD |  if_b	jmp	#LR__1940
180ac                 | LR__1941
180ac     04 4E 85 F1 | 	sub	fp, #4
180b0     4A 00 00 FF 
180b4     80 E4 05 F1 | 	add	objptr, ##38016
180b8     F2 28 02 FB | 	rdlong	local02, objptr
180bc     14 2B 02 F6 | 	mov	local03, local02
180c0     01 2A 66 F0 | 	shl	local03, #1
180c4     14 2B 02 F1 | 	add	local03, local02
180c8     02 2A 66 F0 | 	shl	local03, #2
180cc     03 00 00 FF 
180d0     04 E4 85 F1 | 	sub	objptr, ##1540
180d4     F2 2A 02 F1 | 	add	local03, objptr
180d8     15 2D 02 FB | 	rdlong	local04, local03
180dc     A7 2C 62 FC | 	wrlong	local04, fp
180e0                 | ' numpar=compiledline(lineptr_e).result.uresult
180e0                 | ' for i=numpar to 1 step -1 
180e0     04 4E 05 F1 | 	add	fp, #4
180e4     A7 2C 62 FC | 	wrlong	local04, fp
180e8     04 4E 85 F1 | 	sub	fp, #4
180ec     47 00 00 FF 
180f0     7C E4 85 F1 | 	sub	objptr, ##36476
180f4                 | LR__1942
180f4     10 56 BF FD | 	call	#_pop
180f8     5C 4E 05 F1 | 	add	fp, #92
180fc     A7 FA 61 FC | 	wrlong	result1, fp
18100     04 4E 05 F1 | 	add	fp, #4
18104     A7 FC 61 FC | 	wrlong	result2, fp
18108     04 4E 05 F1 | 	add	fp, #4
1810c     A7 FE 61 FC | 	wrlong	result3, fp
18110     60 4E 85 F1 | 	sub	fp, #96
18114     A7 2A 02 FB | 	rdlong	local03, fp
18118     01 2A 86 F1 | 	sub	local03, #1
1811c     02 2A 66 F0 | 	shl	local03, #2
18120     34 4E 05 F1 | 	add	fp, #52
18124     A7 2A 02 F1 | 	add	local03, fp
18128     24 4E 05 F1 | 	add	fp, #36
1812c     A7 2E 02 F6 | 	mov	local05, fp
18130     17 13 02 F6 | 	mov	arg01, local05
18134     5C 4E 85 F1 | 	sub	fp, #92
18138     6C 58 BF FD | 	call	#_converttofloat
1813c     15 FB 61 FC | 	wrlong	result1, local03
18140     04 4E 05 F1 | 	add	fp, #4
18144     A7 26 02 FB | 	rdlong	local01, fp
18148     01 26 86 F1 | 	sub	local01, #1
1814c     A7 26 62 FC | 	wrlong	local01, fp
18150     04 4E 85 F1 | 	sub	fp, #4
18154     01 26 56 F2 | 	cmps	local01, #1 wc
18158     98 FF 9F 3D |  if_ae	jmp	#LR__1942
1815c                 | ' 
1815c                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
1815c     38 4E 05 F1 | 	add	fp, #56
18160     A7 12 02 FB | 	rdlong	arg01, fp
18164     38 4E 85 F1 | 	sub	fp, #56
18168     00 14 06 F6 | 	mov	arg02, #0
1816c     01 16 06 F6 | 	mov	arg03, #1
18170     D8 21 B1 FD | 	call	#__system___float_cmp
18174     00 FA 55 F2 | 	cmps	result1, #0 wc
18178     0C 4E 05 C1 |  if_b	add	fp, #12
1817c     A7 00 68 CC |  if_b	wrlong	#0, fp
18180     0C 4E 85 C1 |  if_b	sub	fp, #12
18184     2C 00 90 CD |  if_b	jmp	#LR__1943
18188     38 4E 05 F1 | 	add	fp, #56
1818c     A7 12 02 FB | 	rdlong	arg01, fp
18190     38 4E 85 F1 | 	sub	fp, #56
18194     01 14 06 F6 | 	mov	arg02, #1
18198     44 22 B1 FD | 	call	#__system___float_tointeger
1819c     FD 26 52 F6 | 	abs	local01, result1 wc
181a0     07 26 06 F5 | 	and	local01, #7
181a4     13 27 82 F6 | 	negc	local01, local01
181a8     0C 4E 05 F1 | 	add	fp, #12
181ac     A7 26 62 FC | 	wrlong	local01, fp
181b0     0C 4E 85 F1 | 	sub	fp, #12
181b4                 | LR__1943
181b4                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
181b4     3C 4E 05 F1 | 	add	fp, #60
181b8     A7 12 02 FB | 	rdlong	arg01, fp
181bc     3C 4E 85 F1 | 	sub	fp, #60
181c0     00 14 06 F6 | 	mov	arg02, #0
181c4     01 16 06 F6 | 	mov	arg03, #1
181c8     80 21 B1 FD | 	call	#__system___float_cmp
181cc     00 FA 55 F2 | 	cmps	result1, #0 wc
181d0     40 00 90 3D |  if_ae	jmp	#LR__1944
181d4     0C 4E 05 F1 | 	add	fp, #12
181d8     A7 28 02 FB | 	rdlong	local02, fp
181dc     14 2B 02 F6 | 	mov	local03, local02
181e0     01 2A 66 F0 | 	shl	local03, #1
181e4     14 2B 02 F1 | 	add	local03, local02
181e8     03 2A 66 F0 | 	shl	local03, #3
181ec     14 00 00 FF 
181f0     38 E5 05 F1 | 	add	objptr, ##10552
181f4     F2 2A 02 F1 | 	add	local03, objptr
181f8     15 31 02 FB | 	rdlong	local06, local03
181fc     60 4E 05 F1 | 	add	fp, #96
18200     A7 30 62 FC | 	wrlong	local06, fp
18204     6C 4E 85 F1 | 	sub	fp, #108
18208     14 00 00 FF 
1820c     38 E5 85 F1 | 	sub	objptr, ##10552
18210     44 00 90 FD | 	jmp	#LR__1945
18214                 | LR__1944
18214     3C 4E 05 F1 | 	add	fp, #60
18218     A7 2C 02 FB | 	rdlong	local04, fp
1821c     30 4E 05 F1 | 	add	fp, #48
18220     A7 2C 62 FC | 	wrlong	local04, fp
18224     60 4E 85 F1 | 	sub	fp, #96
18228     A7 28 02 FB | 	rdlong	local02, fp
1822c     14 2B 02 F6 | 	mov	local03, local02
18230     01 2A 66 F0 | 	shl	local03, #1
18234     14 2B 02 F1 | 	add	local03, local02
18238     03 2A 66 F0 | 	shl	local03, #3
1823c     14 00 00 FF 
18240     38 E5 05 F1 | 	add	objptr, ##10552
18244     F2 2A 02 F1 | 	add	local03, objptr
18248     0C 4E 85 F1 | 	sub	fp, #12
1824c     15 2D 62 FC | 	wrlong	local04, local03
18250     14 00 00 FF 
18254     38 E5 85 F1 | 	sub	objptr, ##10552
18258                 | LR__1945
18258                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
18258     40 4E 05 F1 | 	add	fp, #64
1825c     A7 12 02 FB | 	rdlong	arg01, fp
18260     40 4E 85 F1 | 	sub	fp, #64
18264     00 14 06 F6 | 	mov	arg02, #0
18268     01 16 06 F6 | 	mov	arg03, #1
1826c     DC 20 B1 FD | 	call	#__system___float_cmp
18270     00 FA 55 F2 | 	cmps	result1, #0 wc
18274     24 00 90 CD |  if_b	jmp	#LR__1946
18278     40 4E 05 F1 | 	add	fp, #64
1827c     A7 12 02 FB | 	rdlong	arg01, fp
18280     40 4E 85 F1 | 	sub	fp, #64
18284     20 0E 23 FF 
18288     00 14 06 F6 | 	mov	arg02, ##1176256512
1828c     01 16 66 F6 | 	neg	arg03, #1
18290     B8 20 B1 FD | 	call	#__system___float_cmp
18294     01 FA 55 F2 | 	cmps	result1, #1 wc
18298     48 00 90 CD |  if_b	jmp	#LR__1947
1829c                 | LR__1946
1829c     0C 4E 05 F1 | 	add	fp, #12
182a0     A7 2A 02 FB | 	rdlong	local03, fp
182a4     15 33 02 F6 | 	mov	local07, local03
182a8     01 32 66 F0 | 	shl	local07, #1
182ac     15 33 02 F1 | 	add	local07, local03
182b0     03 32 66 F0 | 	shl	local07, #3
182b4     14 00 00 FF 
182b8     38 E5 05 F1 | 	add	objptr, ##10552
182bc     F2 32 02 F1 | 	add	local07, objptr
182c0     06 32 06 F1 | 	add	local07, #6
182c4     19 2F E2 FA | 	rdword	local05, local07
182c8     17 2D 32 F9 | 	getword	local04, local05, #0
182cc     1C 4E 05 F1 | 	add	fp, #28
182d0     A7 2C 62 FC | 	wrlong	local04, fp
182d4     28 4E 85 F1 | 	sub	fp, #40
182d8     14 00 00 FF 
182dc     38 E5 85 F1 | 	sub	objptr, ##10552
182e0     54 00 90 FD | 	jmp	#LR__1948
182e4                 | LR__1947
182e4     40 4E 05 F1 | 	add	fp, #64
182e8     A7 12 02 FB | 	rdlong	arg01, fp
182ec     40 4E 85 F1 | 	sub	fp, #64
182f0     01 14 06 F6 | 	mov	arg02, #1
182f4     E8 20 B1 FD | 	call	#__system___float_tointeger
182f8     28 4E 05 F1 | 	add	fp, #40
182fc     A7 FA 61 FC | 	wrlong	result1, fp
18300     1C 4E 85 F1 | 	sub	fp, #28
18304     A7 28 02 FB | 	rdlong	local02, fp
18308     14 2B 02 F6 | 	mov	local03, local02
1830c     01 2A 66 F0 | 	shl	local03, #1
18310     14 2B 02 F1 | 	add	local03, local02
18314     03 2A 66 F0 | 	shl	local03, #3
18318     14 00 00 FF 
1831c     38 E5 05 F1 | 	add	objptr, ##10552
18320     F2 2A 02 F1 | 	add	local03, objptr
18324     0C 4E 85 F1 | 	sub	fp, #12
18328     06 2A 06 F1 | 	add	local03, #6
1832c     15 FB 51 FC | 	wrword	result1, local03
18330     14 00 00 FF 
18334     38 E5 85 F1 | 	sub	objptr, ##10552
18338                 | LR__1948
18338                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
18338     44 4E 05 F1 | 	add	fp, #68
1833c     A7 12 02 FB | 	rdlong	arg01, fp
18340     44 4E 85 F1 | 	sub	fp, #68
18344     00 14 06 F6 | 	mov	arg02, #0
18348     01 16 06 F6 | 	mov	arg03, #1
1834c     FC 1F B1 FD | 	call	#__system___float_cmp
18350     00 FA 55 F2 | 	cmps	result1, #0 wc
18354     24 00 90 CD |  if_b	jmp	#LR__1949
18358     44 4E 05 F1 | 	add	fp, #68
1835c     A7 12 02 FB | 	rdlong	arg01, fp
18360     44 4E 85 F1 | 	sub	fp, #68
18364     89 C1 20 FF 
18368     6F 14 06 F6 | 	mov	arg02, ##1099108975
1836c     01 16 66 F6 | 	neg	arg03, #1
18370     D8 1F B1 FD | 	call	#__system___float_cmp
18374     01 FA 55 F2 | 	cmps	result1, #1 wc
18378     44 00 90 CD |  if_b	jmp	#LR__1950
1837c                 | LR__1949
1837c     0C 4E 05 F1 | 	add	fp, #12
18380     A7 28 02 FB | 	rdlong	local02, fp
18384     14 2B 02 F6 | 	mov	local03, local02
18388     01 2A 66 F0 | 	shl	local03, #1
1838c     14 2B 02 F1 | 	add	local03, local02
18390     03 2A 66 F0 | 	shl	local03, #3
18394     14 00 00 FF 
18398     38 E5 05 F1 | 	add	objptr, ##10552
1839c     F2 2A 02 F1 | 	add	local03, objptr
183a0     0C 2A 06 F1 | 	add	local03, #12
183a4     15 31 02 FB | 	rdlong	local06, local03
183a8     68 4E 05 F1 | 	add	fp, #104
183ac     A7 30 62 FC | 	wrlong	local06, fp
183b0     74 4E 85 F1 | 	sub	fp, #116
183b4     14 00 00 FF 
183b8     38 E5 85 F1 | 	sub	objptr, ##10552
183bc     48 00 90 FD | 	jmp	#LR__1951
183c0                 | LR__1950
183c0     44 4E 05 F1 | 	add	fp, #68
183c4     A7 2C 02 FB | 	rdlong	local04, fp
183c8     30 4E 05 F1 | 	add	fp, #48
183cc     A7 2C 62 FC | 	wrlong	local04, fp
183d0     68 4E 85 F1 | 	sub	fp, #104
183d4     A7 28 02 FB | 	rdlong	local02, fp
183d8     14 2B 02 F6 | 	mov	local03, local02
183dc     01 2A 66 F0 | 	shl	local03, #1
183e0     14 2B 02 F1 | 	add	local03, local02
183e4     03 2A 66 F0 | 	shl	local03, #3
183e8     14 00 00 FF 
183ec     38 E5 05 F1 | 	add	objptr, ##10552
183f0     F2 2A 02 F1 | 	add	local03, objptr
183f4     0C 4E 85 F1 | 	sub	fp, #12
183f8     0C 2A 06 F1 | 	add	local03, #12
183fc     15 2D 62 FC | 	wrlong	local04, local03
18400     14 00 00 FF 
18404     38 E5 85 F1 | 	sub	objptr, ##10552
18408                 | LR__1951
18408                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
18408     48 4E 05 F1 | 	add	fp, #72
1840c     A7 12 02 FB | 	rdlong	arg01, fp
18410     48 4E 85 F1 | 	sub	fp, #72
18414     00 14 06 F6 | 	mov	arg02, #0
18418     01 16 06 F6 | 	mov	arg03, #1
1841c     2C 1F B1 FD | 	call	#__system___float_cmp
18420     00 FA 55 F2 | 	cmps	result1, #0 wc
18424     24 00 90 CD |  if_b	jmp	#LR__1952
18428     48 4E 05 F1 | 	add	fp, #72
1842c     A7 12 02 FB | 	rdlong	arg01, fp
18430     48 4E 85 F1 | 	sub	fp, #72
18434     00 00 21 FF 
18438     00 14 06 F6 | 	mov	arg02, ##1107296256
1843c     01 16 66 F6 | 	neg	arg03, #1
18440     08 1F B1 FD | 	call	#__system___float_cmp
18444     01 FA 55 F2 | 	cmps	result1, #1 wc
18448     48 00 90 CD |  if_b	jmp	#LR__1953
1844c                 | LR__1952
1844c     0C 4E 05 F1 | 	add	fp, #12
18450     A7 2A 02 FB | 	rdlong	local03, fp
18454     15 33 02 F6 | 	mov	local07, local03
18458     01 32 66 F0 | 	shl	local07, #1
1845c     15 33 02 F1 | 	add	local07, local03
18460     03 32 66 F0 | 	shl	local07, #3
18464     14 00 00 FF 
18468     38 E5 05 F1 | 	add	objptr, ##10552
1846c     F2 32 02 F1 | 	add	local07, objptr
18470     04 32 06 F1 | 	add	local07, #4
18474     19 2F C2 FA | 	rdbyte	local05, local07
18478     17 2D E2 F8 | 	getbyte	local04, local05, #0
1847c     14 4E 05 F1 | 	add	fp, #20
18480     A7 2C 62 FC | 	wrlong	local04, fp
18484     20 4E 85 F1 | 	sub	fp, #32
18488     14 00 00 FF 
1848c     38 E5 85 F1 | 	sub	objptr, ##10552
18490     54 00 90 FD | 	jmp	#LR__1954
18494                 | LR__1953
18494     48 4E 05 F1 | 	add	fp, #72
18498     A7 12 02 FB | 	rdlong	arg01, fp
1849c     48 4E 85 F1 | 	sub	fp, #72
184a0     01 14 06 F6 | 	mov	arg02, #1
184a4     38 1F B1 FD | 	call	#__system___float_tointeger
184a8     20 4E 05 F1 | 	add	fp, #32
184ac     A7 FA 61 FC | 	wrlong	result1, fp
184b0     14 4E 85 F1 | 	sub	fp, #20
184b4     A7 28 02 FB | 	rdlong	local02, fp
184b8     14 2B 02 F6 | 	mov	local03, local02
184bc     01 2A 66 F0 | 	shl	local03, #1
184c0     14 2B 02 F1 | 	add	local03, local02
184c4     03 2A 66 F0 | 	shl	local03, #3
184c8     14 00 00 FF 
184cc     38 E5 05 F1 | 	add	objptr, ##10552
184d0     F2 2A 02 F1 | 	add	local03, objptr
184d4     0C 4E 85 F1 | 	sub	fp, #12
184d8     04 2A 06 F1 | 	add	local03, #4
184dc     15 FB 41 FC | 	wrbyte	result1, local03
184e0     14 00 00 FF 
184e4     38 E5 85 F1 | 	sub	objptr, ##10552
184e8                 | LR__1954
184e8                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
184e8     4C 4E 05 F1 | 	add	fp, #76
184ec     A7 12 02 FB | 	rdlong	arg01, fp
184f0     4C 4E 85 F1 | 	sub	fp, #76
184f4     00 14 06 F6 | 	mov	arg02, #0
184f8     01 16 06 F6 | 	mov	arg03, #1
184fc     4C 1E B1 FD | 	call	#__system___float_cmp
18500     00 FA 55 F2 | 	cmps	result1, #0 wc
18504     24 00 90 CD |  if_b	jmp	#LR__1955
18508     4C 4E 05 F1 | 	add	fp, #76
1850c     A7 12 02 FB | 	rdlong	arg01, fp
18510     4C 4E 85 F1 | 	sub	fp, #76
18514     00 80 20 FF 
18518     00 14 06 F6 | 	mov	arg02, ##1090519040
1851c     01 16 66 F6 | 	neg	arg03, #1
18520     28 1E B1 FD | 	call	#__system___float_cmp
18524     01 FA 55 F2 | 	cmps	result1, #1 wc
18528     48 00 90 CD |  if_b	jmp	#LR__1956
1852c                 | LR__1955
1852c     0C 4E 05 F1 | 	add	fp, #12
18530     A7 2A 02 FB | 	rdlong	local03, fp
18534     15 33 02 F6 | 	mov	local07, local03
18538     01 32 66 F0 | 	shl	local07, #1
1853c     15 33 02 F1 | 	add	local07, local03
18540     03 32 66 F0 | 	shl	local07, #3
18544     14 00 00 FF 
18548     38 E5 05 F1 | 	add	objptr, ##10552
1854c     F2 32 02 F1 | 	add	local07, objptr
18550     05 32 06 F1 | 	add	local07, #5
18554     19 2F C2 FA | 	rdbyte	local05, local07
18558     17 2D E2 F8 | 	getbyte	local04, local05, #0
1855c     18 4E 05 F1 | 	add	fp, #24
18560     A7 2C 62 FC | 	wrlong	local04, fp
18564     24 4E 85 F1 | 	sub	fp, #36
18568     14 00 00 FF 
1856c     38 E5 85 F1 | 	sub	objptr, ##10552
18570     54 00 90 FD | 	jmp	#LR__1957
18574                 | LR__1956
18574     4C 4E 05 F1 | 	add	fp, #76
18578     A7 12 02 FB | 	rdlong	arg01, fp
1857c     4C 4E 85 F1 | 	sub	fp, #76
18580     01 14 06 F6 | 	mov	arg02, #1
18584     58 1E B1 FD | 	call	#__system___float_tointeger
18588     24 4E 05 F1 | 	add	fp, #36
1858c     A7 FA 61 FC | 	wrlong	result1, fp
18590     18 4E 85 F1 | 	sub	fp, #24
18594     A7 28 02 FB | 	rdlong	local02, fp
18598     14 2B 02 F6 | 	mov	local03, local02
1859c     01 2A 66 F0 | 	shl	local03, #1
185a0     14 2B 02 F1 | 	add	local03, local02
185a4     03 2A 66 F0 | 	shl	local03, #3
185a8     14 00 00 FF 
185ac     38 E5 05 F1 | 	add	objptr, ##10552
185b0     F2 2A 02 F1 | 	add	local03, objptr
185b4     0C 4E 85 F1 | 	sub	fp, #12
185b8     05 2A 06 F1 | 	add	local03, #5
185bc     15 FB 41 FC | 	wrbyte	result1, local03
185c0     14 00 00 FF 
185c4     38 E5 85 F1 | 	sub	objptr, ##10552
185c8                 | LR__1957
185c8                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
185c8     50 4E 05 F1 | 	add	fp, #80
185cc     A7 12 02 FB | 	rdlong	arg01, fp
185d0     50 4E 85 F1 | 	sub	fp, #80
185d4     00 14 06 F6 | 	mov	arg02, #0
185d8     01 16 06 F6 | 	mov	arg03, #1
185dc     6C 1D B1 FD | 	call	#__system___float_cmp
185e0     00 FA 55 F2 | 	cmps	result1, #0 wc
185e4     24 00 90 CD |  if_b	jmp	#LR__1958
185e8     50 4E 05 F1 | 	add	fp, #80
185ec     A7 12 02 FB | 	rdlong	arg01, fp
185f0     50 4E 85 F1 | 	sub	fp, #80
185f4     00 3D 22 FF 
185f8     00 14 06 F6 | 	mov	arg02, ##1148846080
185fc     01 16 66 F6 | 	neg	arg03, #1
18600     48 1D B1 FD | 	call	#__system___float_cmp
18604     01 FA 55 F2 | 	cmps	result1, #1 wc
18608     44 00 90 CD |  if_b	jmp	#LR__1959
1860c                 | LR__1958
1860c     0C 4E 05 F1 | 	add	fp, #12
18610     A7 28 02 FB | 	rdlong	local02, fp
18614     14 2B 02 F6 | 	mov	local03, local02
18618     01 2A 66 F0 | 	shl	local03, #1
1861c     14 2B 02 F1 | 	add	local03, local02
18620     03 2A 66 F0 | 	shl	local03, #3
18624     14 00 00 FF 
18628     38 E5 05 F1 | 	add	objptr, ##10552
1862c     F2 2A 02 F1 | 	add	local03, objptr
18630     08 2A 06 F1 | 	add	local03, #8
18634     15 31 02 FB | 	rdlong	local06, local03
18638     6C 4E 05 F1 | 	add	fp, #108
1863c     A7 30 62 FC | 	wrlong	local06, fp
18640     78 4E 85 F1 | 	sub	fp, #120
18644     14 00 00 FF 
18648     38 E5 85 F1 | 	sub	objptr, ##10552
1864c     48 00 90 FD | 	jmp	#LR__1960
18650                 | LR__1959
18650     50 4E 05 F1 | 	add	fp, #80
18654     A7 30 02 FB | 	rdlong	local06, fp
18658     28 4E 05 F1 | 	add	fp, #40
1865c     A7 30 62 FC | 	wrlong	local06, fp
18660     6C 4E 85 F1 | 	sub	fp, #108
18664     A7 28 02 FB | 	rdlong	local02, fp
18668     14 2B 02 F6 | 	mov	local03, local02
1866c     01 2A 66 F0 | 	shl	local03, #1
18670     14 2B 02 F1 | 	add	local03, local02
18674     03 2A 66 F0 | 	shl	local03, #3
18678     14 00 00 FF 
1867c     38 E5 05 F1 | 	add	objptr, ##10552
18680     F2 2A 02 F1 | 	add	local03, objptr
18684     0C 4E 85 F1 | 	sub	fp, #12
18688     08 2A 06 F1 | 	add	local03, #8
1868c     15 31 62 FC | 	wrlong	local06, local03
18690     14 00 00 FF 
18694     38 E5 85 F1 | 	sub	objptr, ##10552
18698                 | LR__1960
18698                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
18698     54 4E 05 F1 | 	add	fp, #84
1869c     A7 12 02 FB | 	rdlong	arg01, fp
186a0     54 4E 85 F1 | 	sub	fp, #84
186a4     00 C0 5F FF 
186a8     00 14 06 F6 | 	mov	arg02, ##-1082130432
186ac     01 16 06 F6 | 	mov	arg03, #1
186b0     98 1C B1 FD | 	call	#__system___float_cmp
186b4     00 FA 55 F2 | 	cmps	result1, #0 wc
186b8     24 00 90 CD |  if_b	jmp	#LR__1961
186bc     54 4E 05 F1 | 	add	fp, #84
186c0     A7 12 02 FB | 	rdlong	arg01, fp
186c4     54 4E 85 F1 | 	sub	fp, #84
186c8     00 C0 1F FF 
186cc     00 14 06 F6 | 	mov	arg02, ##1065353216
186d0     01 16 66 F6 | 	neg	arg03, #1
186d4     74 1C B1 FD | 	call	#__system___float_cmp
186d8     01 FA 55 F2 | 	cmps	result1, #1 wc
186dc     44 00 90 CD |  if_b	jmp	#LR__1962
186e0                 | LR__1961
186e0     0C 4E 05 F1 | 	add	fp, #12
186e4     A7 28 02 FB | 	rdlong	local02, fp
186e8     14 2B 02 F6 | 	mov	local03, local02
186ec     01 2A 66 F0 | 	shl	local03, #1
186f0     14 2B 02 F1 | 	add	local03, local02
186f4     03 2A 66 F0 | 	shl	local03, #3
186f8     14 00 00 FF 
186fc     38 E5 05 F1 | 	add	objptr, ##10552
18700     F2 2A 02 F1 | 	add	local03, objptr
18704     10 2A 06 F1 | 	add	local03, #16
18708     15 31 02 FB | 	rdlong	local06, local03
1870c     64 4E 05 F1 | 	add	fp, #100
18710     A7 30 62 FC | 	wrlong	local06, fp
18714     70 4E 85 F1 | 	sub	fp, #112
18718     14 00 00 FF 
1871c     38 E5 85 F1 | 	sub	objptr, ##10552
18720     48 00 90 FD | 	jmp	#LR__1963
18724                 | LR__1962
18724     54 4E 05 F1 | 	add	fp, #84
18728     A7 30 02 FB | 	rdlong	local06, fp
1872c     1C 4E 05 F1 | 	add	fp, #28
18730     A7 30 62 FC | 	wrlong	local06, fp
18734     64 4E 85 F1 | 	sub	fp, #100
18738     A7 28 02 FB | 	rdlong	local02, fp
1873c     14 2B 02 F6 | 	mov	local03, local02
18740     01 2A 66 F0 | 	shl	local03, #1
18744     14 2B 02 F1 | 	add	local03, local02
18748     03 2A 66 F0 | 	shl	local03, #3
1874c     14 00 00 FF 
18750     38 E5 05 F1 | 	add	objptr, ##10552
18754     F2 2A 02 F1 | 	add	local03, objptr
18758     0C 4E 85 F1 | 	sub	fp, #12
1875c     10 2A 06 F1 | 	add	local03, #16
18760     15 31 62 FC | 	wrlong	local06, local03
18764     14 00 00 FF 
18768     38 E5 85 F1 | 	sub	objptr, ##10552
1876c                 | LR__1963
1876c                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
1876c     58 4E 05 F1 | 	add	fp, #88
18770     A7 12 02 FB | 	rdlong	arg01, fp
18774     58 4E 85 F1 | 	sub	fp, #88
18778     00 14 06 F6 | 	mov	arg02, #0
1877c     01 16 06 F6 | 	mov	arg03, #1
18780     C8 1B B1 FD | 	call	#__system___float_cmp
18784     00 FA 55 F2 | 	cmps	result1, #0 wc
18788     24 00 90 CD |  if_b	jmp	#LR__1964
1878c     58 4E 05 F1 | 	add	fp, #88
18790     A7 12 02 FB | 	rdlong	arg01, fp
18794     58 4E 85 F1 | 	sub	fp, #88
18798     80 BF 21 FF 
1879c     00 14 06 F6 | 	mov	arg02, ##1132396544
187a0     01 16 66 F6 | 	neg	arg03, #1
187a4     A4 1B B1 FD | 	call	#__system___float_cmp
187a8     01 FA 55 F2 | 	cmps	result1, #1 wc
187ac     44 00 90 CD |  if_b	jmp	#LR__1965
187b0                 | LR__1964
187b0     0C 4E 05 F1 | 	add	fp, #12
187b4     A7 2A 02 FB | 	rdlong	local03, fp
187b8     15 33 02 F6 | 	mov	local07, local03
187bc     01 32 66 F0 | 	shl	local07, #1
187c0     15 33 02 F1 | 	add	local07, local03
187c4     03 32 66 F0 | 	shl	local07, #3
187c8     14 00 00 FF 
187cc     38 E5 05 F1 | 	add	objptr, ##10552
187d0     F2 32 02 F1 | 	add	local07, objptr
187d4     14 32 06 F1 | 	add	local07, #20
187d8     19 2D E2 FA | 	rdword	local04, local07
187dc     20 4E 05 F1 | 	add	fp, #32
187e0     A7 2C 62 FC | 	wrlong	local04, fp
187e4     2C 4E 85 F1 | 	sub	fp, #44
187e8     14 00 00 FF 
187ec     38 E5 85 F1 | 	sub	objptr, ##10552
187f0     54 00 90 FD | 	jmp	#LR__1966
187f4                 | LR__1965
187f4     58 4E 05 F1 | 	add	fp, #88
187f8     A7 12 02 FB | 	rdlong	arg01, fp
187fc     58 4E 85 F1 | 	sub	fp, #88
18800     01 14 06 F6 | 	mov	arg02, #1
18804     D8 1B B1 FD | 	call	#__system___float_tointeger
18808     2C 4E 05 F1 | 	add	fp, #44
1880c     A7 FA 61 FC | 	wrlong	result1, fp
18810     20 4E 85 F1 | 	sub	fp, #32
18814     A7 28 02 FB | 	rdlong	local02, fp
18818     14 2B 02 F6 | 	mov	local03, local02
1881c     01 2A 66 F0 | 	shl	local03, #1
18820     14 2B 02 F1 | 	add	local03, local02
18824     03 2A 66 F0 | 	shl	local03, #3
18828     14 00 00 FF 
1882c     38 E5 05 F1 | 	add	objptr, ##10552
18830     F2 2A 02 F1 | 	add	local03, objptr
18834     0C 4E 85 F1 | 	sub	fp, #12
18838     14 2A 06 F1 | 	add	local03, #20
1883c     15 FB 51 FC | 	wrword	result1, local03
18840     14 00 00 FF 
18844     38 E5 85 F1 | 	sub	objptr, ##10552
18848                 | LR__1966
18848     6C 4E 05 F1 | 	add	fp, #108
1884c     A7 14 02 FB | 	rdlong	arg02, fp
18850     6C 4E 85 F1 | 	sub	fp, #108
18854     FC 16 20 FF 
18858     54 12 06 F6 | 	mov	arg01, ##1076754516
1885c     88 26 B1 FD | 	call	#__system____builtin_logbase
18860     FD 2C 02 F6 | 	mov	local04, result1
18864     1E 14 C6 F9 | 	decod	arg02, #30
18868     FC 16 20 FF 
1886c     54 12 06 F6 | 	mov	arg01, ##1076754516
18870     74 26 B1 FD | 	call	#__system____builtin_logbase
18874     FD 14 02 F6 | 	mov	arg02, result1
18878     16 13 02 F6 | 	mov	arg01, local04
1887c     9C 18 B1 FD | 	call	#__system___float_div
18880     FD 12 02 F6 | 	mov	arg01, result1
18884     00 14 06 F6 | 	mov	arg02, #0
18888     54 1B B1 FD | 	call	#__system___float_tointeger
1888c     30 4E 05 F1 | 	add	fp, #48
18890     A7 FA 61 FC | 	wrlong	result1, fp
18894     1E 2C C6 F9 | 	decod	local04, #30
18898     FD 12 02 F6 | 	mov	arg01, result1
1889c     30 4E 85 F1 | 	sub	fp, #48
188a0     05 12 06 F1 | 	add	arg01, #5
188a4     09 13 52 F6 | 	abs	arg01, arg01 wc
188a8     1F 34 C6 C9 |  if_b	decod	local08, #31
188ac     00 34 06 36 |  if_ae	mov	local08, #0
188b0     60 12 B1 FD | 	call	#__system___float_fromuns
188b4     1A FB 61 F5 | 	xor	result1, local08
188b8     FD 14 02 F6 | 	mov	arg02, result1
188bc     16 13 02 F6 | 	mov	arg01, local04
188c0     5C 25 B1 FD | 	call	#__system____builtin_powf
188c4     FD 12 02 F6 | 	mov	arg01, result1
188c8     01 14 06 F6 | 	mov	arg02, #1
188cc     10 1B B1 FD | 	call	#__system___float_tointeger
188d0     10 4E 05 F1 | 	add	fp, #16
188d4     A7 FA 61 FC | 	wrlong	result1, fp
188d8                 | ' skip=round(2^(lfreq+5))
188d8                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
188d8     10 4E 85 F1 | 	sub	fp, #16
188dc     40 00 00 FF 
188e0     01 FA 55 F2 | 	cmps	result1, ##32769 wc
188e4     30 00 90 CD |  if_b	jmp	#LR__1967
188e8     10 4E 05 F1 | 	add	fp, #16
188ec     A7 26 02 FB | 	rdlong	local01, fp
188f0     13 2D 52 F6 | 	abs	local04, local01 wc
188f4     0F 2C 46 F0 | 	shr	local04, #15
188f8     16 2D 82 F6 | 	negc	local04, local04
188fc     0C 4E 85 F1 | 	sub	fp, #12
18900     A7 2C 62 FC | 	wrlong	local04, fp
18904     0C 4E 05 F1 | 	add	fp, #12
18908     40 00 80 FF 
1890c     A7 00 68 FC | 	wrlong	##32768, fp
18910     10 4E 85 F1 | 	sub	fp, #16
18914     0C 00 90 FD | 	jmp	#LR__1968
18918                 | LR__1967
18918     04 4E 05 F1 | 	add	fp, #4
1891c     A7 02 68 FC | 	wrlong	#1, fp
18920     04 4E 85 F1 | 	sub	fp, #4
18924                 | LR__1968
18924     6C 4E 05 F1 | 	add	fp, #108
18928     A7 14 02 FB | 	rdlong	arg02, fp
1892c     6C 4E 85 F1 | 	sub	fp, #108
18930     3E 2C 25 FF 
18934     3C 12 06 F6 | 	mov	arg01, ##1247312956
18938     E0 17 B1 FD | 	call	#__system___float_div
1893c     FD 2C 02 F6 | 	mov	local04, result1
18940     04 4E 05 F1 | 	add	fp, #4
18944     A7 12 02 FB | 	rdlong	arg01, fp
18948     04 4E 85 F1 | 	sub	fp, #4
1894c     09 13 52 F6 | 	abs	arg01, arg01 wc
18950     1F 34 C6 C9 |  if_b	decod	local08, #31
18954     00 34 06 36 |  if_ae	mov	local08, #0
18958     B8 11 B1 FD | 	call	#__system___float_fromuns
1895c     1A FB 61 F5 | 	xor	result1, local08
18960     FD 26 02 F6 | 	mov	local01, result1
18964     1E 28 C6 F9 | 	decod	local02, #30
18968     0D 12 06 F6 | 	mov	arg01, #13
1896c     30 4E 05 F1 | 	add	fp, #48
18970     A7 30 02 FB | 	rdlong	local06, fp
18974     30 4E 85 F1 | 	sub	fp, #48
18978     18 13 82 F1 | 	sub	arg01, local06
1897c     09 13 52 F6 | 	abs	arg01, arg01 wc
18980     1F 34 C6 C9 |  if_b	decod	local08, #31
18984     00 34 06 36 |  if_ae	mov	local08, #0
18988     88 11 B1 FD | 	call	#__system___float_fromuns
1898c     1A FB 61 F5 | 	xor	result1, local08
18990     FD 14 02 F6 | 	mov	arg02, result1
18994     14 13 02 F6 | 	mov	arg01, local02
18998     84 24 B1 FD | 	call	#__system____builtin_powf
1899c     FD 14 02 F6 | 	mov	arg02, result1
189a0     13 13 02 F6 | 	mov	arg01, local01
189a4     70 15 B1 FD | 	call	#__system___float_mul
189a8     FD 14 02 F6 | 	mov	arg02, result1
189ac     16 13 02 F6 | 	mov	arg01, local04
189b0     68 17 B1 FD | 	call	#__system___float_div
189b4     FD 12 02 F6 | 	mov	arg01, result1
189b8     01 14 06 F6 | 	mov	arg02, #1
189bc     20 1A B1 FD | 	call	#__system___float_tointeger
189c0     34 4E 05 F1 | 	add	fp, #52
189c4     A7 FA 61 FC | 	wrlong	result1, fp
189c8     34 4E 05 F1 | 	add	fp, #52
189cc     A7 12 02 FB | 	rdlong	arg01, fp
189d0     10 4E 05 F1 | 	add	fp, #16
189d4     A7 14 02 FB | 	rdlong	arg02, fp
189d8     78 4E 85 F1 | 	sub	fp, #120
189dc     3C 17 B1 FD | 	call	#__system___float_div
189e0     FD 12 02 F6 | 	mov	arg01, result1
189e4     01 14 06 F6 | 	mov	arg02, #1
189e8     F4 19 B1 FD | 	call	#__system___float_tointeger
189ec     FD 2C 02 F6 | 	mov	local04, result1
189f0     14 4E 05 F1 | 	add	fp, #20
189f4     A7 2C 62 FC | 	wrlong	local04, fp
189f8     5C 4E 05 F1 | 	add	fp, #92
189fc     A7 14 02 FB | 	rdlong	arg02, fp
18a00     70 4E 85 F1 | 	sub	fp, #112
18a04     00 00 23 FF 
18a08     00 12 06 F6 | 	mov	arg01, ##1174405120
18a0c     08 15 B1 FD | 	call	#__system___float_mul
18a10     FD 12 02 F6 | 	mov	arg01, result1
18a14     01 14 06 F6 | 	mov	arg02, #1
18a18     C4 19 B1 FD | 	call	#__system___float_tointeger
18a1c     0D 2C C6 F9 | 	decod	local04, #13
18a20     FD 2C 02 F1 | 	add	local04, result1
18a24     18 4E 05 F1 | 	add	fp, #24
18a28     A7 2C 62 FC | 	wrlong	local04, fp
18a2c     5C 4E 05 F1 | 	add	fp, #92
18a30     A7 14 02 FB | 	rdlong	arg02, fp
18a34     74 4E 85 F1 | 	sub	fp, #116
18a38     00 3D 22 FF 
18a3c     00 12 06 F6 | 	mov	arg01, ##1148846080
18a40     D4 14 B1 FD | 	call	#__system___float_mul
18a44     FD 12 02 F6 | 	mov	arg01, result1
18a48     01 14 06 F6 | 	mov	arg02, #1
18a4c     90 19 B1 FD | 	call	#__system___float_tointeger
18a50     1C 4E 05 F1 | 	add	fp, #28
18a54     A7 FA 61 FC | 	wrlong	result1, fp
18a58     37 00 00 FF 
18a5c     10 E4 05 F1 | 	add	objptr, ##28176
18a60     F2 2C 02 FB | 	rdlong	local04, objptr
18a64     37 00 00 FF 
18a68     10 E4 85 F1 | 	sub	objptr, ##28176
18a6c     10 4E 85 F1 | 	sub	fp, #16
18a70     A7 28 02 FB | 	rdlong	local02, fp
18a74     06 28 66 F0 | 	shl	local02, #6
18a78     14 2D 02 F1 | 	add	local04, local02
18a7c     04 4E 85 F1 | 	sub	fp, #4
18a80     A7 2C 62 FC | 	wrlong	local04, fp
18a84                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
18a84                 | ' speed=round(speed_coeff/slen)
18a84                 | ' ipan=8192+round(8192*pan)
18a84                 | ' ivol=round(1000.0*vol)
18a84                 | ' base2=base+64*channel
18a84                 | ' if wave <32 then 
18a84     18 4E 05 F1 | 	add	fp, #24
18a88     A7 2C 02 FB | 	rdlong	local04, fp
18a8c     20 4E 85 F1 | 	sub	fp, #32
18a90     20 2C 56 F2 | 	cmps	local04, #32 wc
18a94     2C 00 90 3D |  if_ae	jmp	#LR__1969
18a98     08 4E 05 F1 | 	add	fp, #8
18a9c     A7 12 02 FB | 	rdlong	arg01, fp
18aa0     08 12 06 F1 | 	add	arg01, #8
18aa4     18 4E 05 F1 | 	add	fp, #24
18aa8     A7 14 02 FB | 	rdlong	arg02, fp
18aac     20 4E 85 F1 | 	sub	fp, #32
18ab0     0B 14 66 F0 | 	shl	arg02, #11
18ab4     00 00 60 FF 
18ab8     00 14 06 F1 | 	add	arg02, ##-1073741824
18abc     09 15 62 FC | 	wrlong	arg02, arg01
18ac0     18 00 90 FD | 	jmp	#LR__1970
18ac4                 | LR__1969
18ac4     08 4E 05 F1 | 	add	fp, #8
18ac8     A7 12 02 FB | 	rdlong	arg01, fp
18acc     08 4E 85 F1 | 	sub	fp, #8
18ad0     08 12 06 F1 | 	add	arg01, #8
18ad4     00 00 E4 FF 
18ad8     09 01 68 FC | 	wrlong	##-939524096, arg01
18adc                 | LR__1970
18adc     08 4E 05 F1 | 	add	fp, #8
18ae0     A7 12 02 FB | 	rdlong	arg01, fp
18ae4     10 12 06 F1 | 	add	arg01, #16
18ae8     04 00 80 FF 
18aec     09 01 68 FC | 	wrlong	##2048, arg01
18af0     A7 12 02 FB | 	rdlong	arg01, fp
18af4     0C 12 06 F1 | 	add	arg01, #12
18af8     09 01 68 FC | 	wrlong	#0, arg01
18afc     A7 12 02 FB | 	rdlong	arg01, fp
18b00     14 12 06 F1 | 	add	arg01, #20
18b04     14 4E 05 F1 | 	add	fp, #20
18b08     A7 14 02 FB | 	rdlong	arg02, fp
18b0c     09 15 52 FC | 	wrword	arg02, arg01
18b10     14 4E 85 F1 | 	sub	fp, #20
18b14     A7 12 02 FB | 	rdlong	arg01, fp
18b18     16 12 06 F1 | 	add	arg01, #22
18b1c     10 4E 05 F1 | 	add	fp, #16
18b20     A7 14 02 FB | 	rdlong	arg02, fp
18b24     09 15 52 FC | 	wrword	arg02, arg01
18b28                 | ' lpoke base2+16,2048
18b28                 | ' lpoke base2+12,0
18b28                 | ' dpoke base2+20,ivol 
18b28                 | ' dpoke base2+22,ipan 
18b28                 | ' if wave<32 then
18b28     08 4E 05 F1 | 	add	fp, #8
18b2c     A7 2C 02 FB | 	rdlong	local04, fp
18b30     20 4E 85 F1 | 	sub	fp, #32
18b34     20 2C 56 F2 | 	cmps	local04, #32 wc
18b38     38 00 90 3D |  if_ae	jmp	#LR__1971
18b3c     08 4E 05 F1 | 	add	fp, #8
18b40     A7 12 02 FB | 	rdlong	arg01, fp
18b44     18 12 06 F1 | 	add	arg01, #24
18b48     2C 4E 05 F1 | 	add	fp, #44
18b4c     A7 14 02 FB | 	rdlong	arg02, fp
18b50     09 15 52 FC | 	wrword	arg02, arg01
18b54     2C 4E 85 F1 | 	sub	fp, #44
18b58     A7 12 02 FB | 	rdlong	arg01, fp
18b5c     1A 12 06 F1 | 	add	arg01, #26
18b60     08 4E 05 F1 | 	add	fp, #8
18b64     A7 14 02 FB | 	rdlong	arg02, fp
18b68     10 4E 85 F1 | 	sub	fp, #16
18b6c     09 15 52 FC | 	wrword	arg02, arg01
18b70     48 00 90 FD | 	jmp	#LR__1972
18b74                 | LR__1971
18b74     08 4E 05 F1 | 	add	fp, #8
18b78     A7 2C 02 FB | 	rdlong	local04, fp
18b7c     18 2C 06 F1 | 	add	local04, #24
18b80     64 4E 05 F1 | 	add	fp, #100
18b84     A7 14 02 FB | 	rdlong	arg02, fp
18b88     6C 4E 85 F1 | 	sub	fp, #108
18b8c     3E 2C 25 FF 
18b90     3C 12 06 F6 | 	mov	arg01, ##1247312956
18b94     84 15 B1 FD | 	call	#__system___float_div
18b98     FD 12 02 F6 | 	mov	arg01, result1
18b9c     01 14 06 F6 | 	mov	arg02, #1
18ba0     3C 18 B1 FD | 	call	#__system___float_tointeger
18ba4     16 FB 51 FC | 	wrword	result1, local04
18ba8     08 4E 05 F1 | 	add	fp, #8
18bac     A7 12 02 FB | 	rdlong	arg01, fp
18bb0     08 4E 85 F1 | 	sub	fp, #8
18bb4     1A 12 06 F1 | 	add	arg01, #26
18bb8     09 01 5A FC | 	wrword	#256, arg01
18bbc                 | LR__1972
18bbc     08 4E 05 F1 | 	add	fp, #8
18bc0     A7 12 02 FB | 	rdlong	arg01, fp
18bc4     1C 12 06 F1 | 	add	arg01, #28
18bc8     09 01 68 FC | 	wrlong	#0, arg01
18bcc     A7 12 02 FB | 	rdlong	arg01, fp
18bd0     20 12 06 F1 | 	add	arg01, #32
18bd4     09 01 68 FC | 	wrlong	#0, arg01
18bd8                 | ' lpoke base2+28,$0000_0000
18bd8                 | ' lpoke base2+32,0 
18bd8                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
18bd8     1C 4E 05 F1 | 	add	fp, #28
18bdc     A7 2C 02 FB | 	rdlong	local04, fp
18be0     24 4E 85 F1 | 	sub	fp, #36
18be4     08 2C 0E F2 | 	cmp	local04, #8 wz
18be8     18 00 90 5D |  if_ne	jmp	#LR__1973
18bec     08 4E 05 F1 | 	add	fp, #8
18bf0     A7 12 02 FB | 	rdlong	arg01, fp
18bf4     08 4E 85 F1 | 	sub	fp, #8
18bf8     24 12 06 F1 | 	add	arg01, #36
18bfc     09 01 68 FC | 	wrlong	#0, arg01
18c00     34 00 90 FD | 	jmp	#LR__1974
18c04                 | LR__1973
18c04     08 4E 05 F1 | 	add	fp, #8
18c08     A7 12 02 FB | 	rdlong	arg01, fp
18c0c     24 12 06 F1 | 	add	arg01, #36
18c10     1C 4E 05 F1 | 	add	fp, #28
18c14     A7 14 02 FB | 	rdlong	arg02, fp
18c18     24 4E 85 F1 | 	sub	fp, #36
18c1c     09 14 66 F0 | 	shl	arg02, #9
18c20     0C 00 00 FF 
18c24     D8 E4 05 F1 | 	add	objptr, ##6360
18c28     F2 14 02 F1 | 	add	arg02, objptr
18c2c     0C 00 00 FF 
18c30     D8 E4 85 F1 | 	sub	objptr, ##6360
18c34     09 15 62 FC | 	wrlong	arg02, arg01
18c38                 | LR__1974
18c38     08 4E 05 F1 | 	add	fp, #8
18c3c     A7 12 02 FB | 	rdlong	arg01, fp
18c40     28 12 06 F1 | 	add	arg01, #40
18c44     0C 4E 05 F1 | 	add	fp, #12
18c48     A7 14 02 FB | 	rdlong	arg02, fp
18c4c     09 15 62 FC | 	wrlong	arg02, arg01
18c50     0C 4E 85 F1 | 	sub	fp, #12
18c54     A7 12 02 FB | 	rdlong	arg01, fp
18c58     2C 12 06 F1 | 	add	arg01, #44
18c5c     24 4E 05 F1 | 	add	fp, #36
18c60     A7 14 02 FB | 	rdlong	arg02, fp
18c64     09 15 62 FC | 	wrlong	arg02, arg01
18c68                 | ' lpoke base2+40,speed 
18c68                 | ' lpoke base2+44,sus 
18c68                 | ' if delay>0 then waitms(delay) 
18c68     04 4E 85 F1 | 	sub	fp, #4
18c6c     A7 2C 02 FB | 	rdlong	local04, fp
18c70     28 4E 85 F1 | 	sub	fp, #40
18c74     01 2C 56 F2 | 	cmps	local04, #1 wc
18c78     28 4E 05 31 |  if_ae	add	fp, #40
18c7c     A7 12 02 3B |  if_ae	rdlong	arg01, fp
18c80     28 4E 85 31 |  if_ae	sub	fp, #40
18c84     08 E7 B0 3D |  if_ae	call	#__system___waitms
18c88     A7 F0 03 F6 | 	mov	ptra, fp
18c8c     B2 00 A0 FD | 	call	#popregs_
18c90                 | _do_play_ret
18c90     2D 00 64 FD | 	ret
18c94                 | 
18c94                 | ' 
18c94                 | ' '-------------------- plot
18c94                 | ' 
18c94                 | ' sub do_plot
18c94                 | _do_plot
18c94     00 4A 05 F6 | 	mov	COUNT_, #0
18c98     A8 00 A0 FD | 	call	#pushregs_
18c9c     20 F0 07 F1 | 	add	ptra, #32
18ca0     64 4A BF FD | 	call	#_pop
18ca4     FD 16 02 F6 | 	mov	arg03, result1
18ca8     FE 14 02 F6 | 	mov	arg02, result2
18cac     FF 12 02 F6 | 	mov	arg01, result3
18cb0     0C 4E 05 F1 | 	add	fp, #12
18cb4     A7 16 62 FC | 	wrlong	arg03, fp
18cb8     04 4E 05 F1 | 	add	fp, #4
18cbc     A7 14 62 FC | 	wrlong	arg02, fp
18cc0     04 4E 05 F1 | 	add	fp, #4
18cc4     A7 12 62 FC | 	wrlong	arg01, fp
18cc8     14 4E 85 F1 | 	sub	fp, #20
18ccc     38 4A BF FD | 	call	#_pop
18cd0     FF 16 02 F6 | 	mov	arg03, result3
18cd4     A7 FA 61 FC | 	wrlong	result1, fp
18cd8     04 4E 05 F1 | 	add	fp, #4
18cdc     A7 FC 61 FC | 	wrlong	result2, fp
18ce0     04 4E 05 F1 | 	add	fp, #4
18ce4     A7 16 62 FC | 	wrlong	arg03, fp
18ce8     08 4E 85 F1 | 	sub	fp, #8
18cec     A7 12 02 F6 | 	mov	arg01, fp
18cf0     F8 4B BF FD | 	call	#_converttoint
18cf4     18 4E 05 F1 | 	add	fp, #24
18cf8     A7 FA 61 FC | 	wrlong	result1, fp
18cfc     0C 4E 85 F1 | 	sub	fp, #12
18d00     A7 12 02 F6 | 	mov	arg01, fp
18d04     0C 4E 85 F1 | 	sub	fp, #12
18d08     E0 4B BF FD | 	call	#_converttoint
18d0c     1C 4E 05 F1 | 	add	fp, #28
18d10     A7 FA 61 FC | 	wrlong	result1, fp
18d14     04 4E 85 F1 | 	sub	fp, #4
18d18     A7 16 02 FB | 	rdlong	arg03, fp
18d1c     37 00 00 FF 
18d20     2C E4 05 F1 | 	add	objptr, ##28204
18d24     F2 16 62 FC | 	wrlong	arg03, objptr
18d28     04 4E 05 F1 | 	add	fp, #4
18d2c     A7 14 02 FB | 	rdlong	arg02, fp
18d30     1C 4E 85 F1 | 	sub	fp, #28
18d34     04 E4 05 F1 | 	add	objptr, #4
18d38     F2 14 62 FC | 	wrlong	arg02, objptr
18d3c     04 E4 85 F1 | 	sub	objptr, #4
18d40     F2 12 02 FB | 	rdlong	arg01, objptr
18d44     04 E4 85 F1 | 	sub	objptr, #4
18d48     F2 16 02 FB | 	rdlong	arg03, objptr
18d4c     37 00 00 FF 
18d50     28 E4 85 F1 | 	sub	objptr, ##28200
18d54     4C B9 B0 FD | 	call	#_hg010b_spin2_putpixel
18d58     A7 F0 03 F6 | 	mov	ptra, fp
18d5c     B2 00 A0 FD | 	call	#popregs_
18d60                 | _do_plot_ret
18d60     2D 00 64 FD | 	ret
18d64                 | 
18d64                 | ' 
18d64                 | ' '-------------------- poke
18d64                 | ' 
18d64                 | ' sub do_poke
18d64                 | _do_poke
18d64     01 4A 05 F6 | 	mov	COUNT_, #1
18d68     A8 00 A0 FD | 	call	#pushregs_
18d6c     20 F0 07 F1 | 	add	ptra, #32
18d70     94 49 BF FD | 	call	#_pop
18d74     FD 14 02 F6 | 	mov	arg02, result1
18d78     FE 12 02 F6 | 	mov	arg01, result2
18d7c     FF 26 02 F6 | 	mov	local01, result3
18d80     A7 14 62 FC | 	wrlong	arg02, fp
18d84     04 4E 05 F1 | 	add	fp, #4
18d88     A7 12 62 FC | 	wrlong	arg01, fp
18d8c     04 4E 05 F1 | 	add	fp, #4
18d90     A7 26 62 FC | 	wrlong	local01, fp
18d94     08 4E 85 F1 | 	sub	fp, #8
18d98     6C 49 BF FD | 	call	#_pop
18d9c     FF 26 02 F6 | 	mov	local01, result3
18da0     0C 4E 05 F1 | 	add	fp, #12
18da4     A7 FA 61 FC | 	wrlong	result1, fp
18da8     04 4E 05 F1 | 	add	fp, #4
18dac     A7 FC 61 FC | 	wrlong	result2, fp
18db0     04 4E 05 F1 | 	add	fp, #4
18db4     A7 26 62 FC | 	wrlong	local01, fp
18db8     08 4E 85 F1 | 	sub	fp, #8
18dbc     A7 12 02 F6 | 	mov	arg01, fp
18dc0     0C 4E 85 F1 | 	sub	fp, #12
18dc4     24 4B BF FD | 	call	#_converttoint
18dc8     18 4E 05 F1 | 	add	fp, #24
18dcc     A7 FA 61 FC | 	wrlong	result1, fp
18dd0     18 4E 85 F1 | 	sub	fp, #24
18dd4     A7 12 02 F6 | 	mov	arg01, fp
18dd8     10 4B BF FD | 	call	#_converttoint
18ddc     1C 4E 05 F1 | 	add	fp, #28
18de0     A7 FA 61 FC | 	wrlong	result1, fp
18de4                 | ' t1=pop() 'value
18de4                 | ' t2=pop() 
18de4                 | ' a=converttoint(t2) : v=converttoint(t1)
18de4                 | ' if a<$80000 then poke a,v else pspoke a,v
18de4     04 4E 85 F1 | 	sub	fp, #4
18de8     A7 26 02 FB | 	rdlong	local01, fp
18dec     18 4E 85 F1 | 	sub	fp, #24
18df0     00 04 00 FF 
18df4     00 26 16 F2 | 	cmp	local01, ##524288 wc
18df8     1C 00 90 3D |  if_ae	jmp	#LR__1980
18dfc     18 4E 05 F1 | 	add	fp, #24
18e00     A7 12 02 FB | 	rdlong	arg01, fp
18e04     04 4E 05 F1 | 	add	fp, #4
18e08     A7 14 02 FB | 	rdlong	arg02, fp
18e0c     1C 4E 85 F1 | 	sub	fp, #28
18e10     09 15 42 FC | 	wrbyte	arg02, arg01
18e14     18 00 90 FD | 	jmp	#LR__1981
18e18                 | LR__1980
18e18     18 4E 05 F1 | 	add	fp, #24
18e1c     A7 12 02 FB | 	rdlong	arg01, fp
18e20     04 4E 05 F1 | 	add	fp, #4
18e24     A7 14 02 FB | 	rdlong	arg02, fp
18e28     1C 4E 85 F1 | 	sub	fp, #28
18e2c     EC A9 B0 FD | 	call	#_pspoke
18e30                 | LR__1981
18e30     A7 F0 03 F6 | 	mov	ptra, fp
18e34     B2 00 A0 FD | 	call	#popregs_
18e38                 | _do_poke_ret
18e38     2D 00 64 FD | 	ret
18e3c                 | 
18e3c                 | ' 
18e3c                 | ' '-------------------- pop
18e3c                 | ' 
18e3c                 | ' sub do_pop()
18e3c                 | _do_pop
18e3c                 | ' if gosubtop>0 then  gosubtop -=1 
18e3c     50 00 00 FF 
18e40     34 E5 05 F1 | 	add	objptr, ##41268
18e44     F2 00 02 FB | 	rdlong	_var01, objptr
18e48     50 00 00 FF 
18e4c     34 E5 85 F1 | 	sub	objptr, ##41268
18e50     01 00 56 F2 | 	cmps	_var01, #1 wc
18e54     50 00 00 3F 
18e58     34 E5 05 31 |  if_ae	add	objptr, ##41268
18e5c     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
18e60     01 00 86 31 |  if_ae	sub	_var01, #1
18e64     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
18e68     50 00 00 3F 
18e6c     34 E5 85 31 |  if_ae	sub	objptr, ##41268
18e70                 | _do_pop_ret
18e70     2D 00 64 FD | 	ret
18e74                 | 
18e74                 | ' 
18e74                 | ' '-------------------- position
18e74                 | ' 
18e74                 | ' sub do_position
18e74                 | _do_position
18e74     01 4A 05 F6 | 	mov	COUNT_, #1
18e78     A8 00 A0 FD | 	call	#pushregs_
18e7c     18 F0 07 F1 | 	add	ptra, #24
18e80     84 48 BF FD | 	call	#_pop
18e84     FD 14 02 F6 | 	mov	arg02, result1
18e88     FE 12 02 F6 | 	mov	arg01, result2
18e8c     FF 26 02 F6 | 	mov	local01, result3
18e90     A7 14 62 FC | 	wrlong	arg02, fp
18e94     04 4E 05 F1 | 	add	fp, #4
18e98     A7 12 62 FC | 	wrlong	arg01, fp
18e9c     04 4E 05 F1 | 	add	fp, #4
18ea0     A7 26 62 FC | 	wrlong	local01, fp
18ea4     08 4E 85 F1 | 	sub	fp, #8
18ea8     5C 48 BF FD | 	call	#_pop
18eac     FF 26 02 F6 | 	mov	local01, result3
18eb0     0C 4E 05 F1 | 	add	fp, #12
18eb4     A7 FA 61 FC | 	wrlong	result1, fp
18eb8     04 4E 05 F1 | 	add	fp, #4
18ebc     A7 FC 61 FC | 	wrlong	result2, fp
18ec0     04 4E 05 F1 | 	add	fp, #4
18ec4     A7 26 62 FC | 	wrlong	local01, fp
18ec8     08 4E 85 F1 | 	sub	fp, #8
18ecc     A7 12 02 F6 | 	mov	arg01, fp
18ed0     0C 4E 85 F1 | 	sub	fp, #12
18ed4     14 4A BF FD | 	call	#_converttoint
18ed8     FD 26 02 F6 | 	mov	local01, result1
18edc     A7 12 02 F6 | 	mov	arg01, fp
18ee0     08 4A BF FD | 	call	#_converttoint
18ee4     FD 14 02 F6 | 	mov	arg02, result1
18ee8     13 13 02 F6 | 	mov	arg01, local01
18eec     78 C3 B0 FD | 	call	#_hg010b_spin2_setcursorpos
18ef0     A7 F0 03 F6 | 	mov	ptra, fp
18ef4     B2 00 A0 FD | 	call	#popregs_
18ef8                 | _do_position_ret
18ef8     2D 00 64 FD | 	ret
18efc                 | 
18efc                 | ' 
18efc                 | ' '-------------------- print
18efc                 | ' 
18efc                 | ' sub do_print  
18efc                 | _do_print
18efc     0B 4A 05 F6 | 	mov	COUNT_, #11
18f00     A8 00 A0 FD | 	call	#pushregs_
18f04     00 2C 06 F6 | 	mov	local04, #0
18f08     FC 47 BF FD | 	call	#_pop
18f0c     FD 2E 02 F6 | 	mov	local05, result1
18f10     FE 30 02 F6 | 	mov	local06, result2
18f14     FF 32 02 F6 | 	mov	local07, result3
18f18     17 27 02 F6 | 	mov	local01, local05
18f1c     18 29 02 F6 | 	mov	local02, local06
18f20     19 2B 02 F6 | 	mov	local03, local07
18f24                 | '  
18f24                 | ' r=0
18f24                 | ' t1=pop() 
18f24                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
18f24     21 2A 0E F2 | 	cmp	local03, #33 wz
18f28     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
18f2c     20 00 90 5D |  if_ne	jmp	#LR__1990
18f30     15 2D 02 F6 | 	mov	local04, local03
18f34     D0 47 BF FD | 	call	#_pop
18f38     FD 2E 02 F6 | 	mov	local05, result1
18f3c     FE 30 02 F6 | 	mov	local06, result2
18f40     FF 32 02 F6 | 	mov	local07, result3
18f44     17 27 02 F6 | 	mov	local01, local05
18f48     18 29 02 F6 | 	mov	local02, local06
18f4c     19 2B 02 F6 | 	mov	local03, local07
18f50                 | LR__1990
18f50                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
18f50     20 2A 0E F2 | 	cmp	local03, #32 wz
18f54     15 2D 02 A6 |  if_e	mov	local04, local03
18f58                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
18f58     FF 2A 0E F2 | 	cmp	local03, #255 wz
18f5c     10 00 90 5D |  if_ne	jmp	#LR__1991
18f60     13 13 02 F6 | 	mov	arg01, local01
18f64     00 14 06 F6 | 	mov	arg02, #0
18f68     80 A6 B0 FD | 	call	#_printerror
18f6c     D4 04 90 FD | 	jmp	#LR__2010
18f70                 | LR__1991
18f70                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
18f70     2B 2A 0E F2 | 	cmp	local03, #43 wz
18f74     14 00 90 5D |  if_ne	jmp	#LR__1992
18f78     13 13 02 F6 | 	mov	arg01, local01
18f7c     00 49 BF FD | 	call	#_convertstring
18f80     FD 2E 02 F6 | 	mov	local05, result1
18f84     17 27 02 F6 | 	mov	local01, local05
18f88     1F 2A 06 F6 | 	mov	local03, #31
18f8c                 | LR__1992
18f8c                 | ' 
18f8c                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
18f8c     2C 2A 0E F2 | 	cmp	local03, #44 wz
18f90     80 00 90 5D |  if_ne	jmp	#LR__1993
18f94     00 12 06 F6 | 	mov	arg01, #0
18f98     A4 3D B1 FD | 	call	#__system___getiolock_0614
18f9c     FD 12 02 F6 | 	mov	arg01, result1
18fa0     F8 E0 B0 FD | 	call	#__system___lockmem
18fa4     BB 01 00 FF 
18fa8     19 15 06 F6 | 	mov	arg02, ##@LR__6005
18fac     00 12 06 F6 | 	mov	arg01, #0
18fb0     00 16 06 F6 | 	mov	arg03, #0
18fb4     DC ED B0 FD | 	call	#__system___basic_print_string
18fb8     0A 34 06 F6 | 	mov	local08, #10
18fbc     00 12 06 F6 | 	mov	arg01, #0
18fc0     13 15 02 F6 | 	mov	arg02, local01
18fc4     00 16 06 F6 | 	mov	arg03, #0
18fc8     0A 18 06 F6 | 	mov	arg04, #10
18fcc     08 EE B0 FD | 	call	#__system___basic_print_integer
18fd0     FD 36 02 F6 | 	mov	local09, result1
18fd4     00 12 06 F6 | 	mov	arg01, #0
18fd8     0A 14 06 F6 | 	mov	arg02, #10
18fdc     00 16 06 F6 | 	mov	arg03, #0
18fe0     58 ED B0 FD | 	call	#__system___basic_print_char
18fe4     01 38 06 F6 | 	mov	local10, #1
18fe8     00 12 06 F6 | 	mov	arg01, #0
18fec     50 3D B1 FD | 	call	#__system___getiolock_0614
18ff0     FD 00 68 FC | 	wrlong	#0, result1
18ff4     00 3A 06 F6 | 	mov	local11, #0
18ff8     0C 47 BF FD | 	call	#_pop
18ffc     FD 2E 02 F6 | 	mov	local05, result1
19000     FE 30 02 F6 | 	mov	local06, result2
19004     FF 32 02 F6 | 	mov	local07, result3
19008     17 27 02 F6 | 	mov	local01, local05
1900c     18 29 02 F6 | 	mov	local02, local06
19010     19 2B 02 F6 | 	mov	local03, local07
19014                 | LR__1993
19014                 | ' 
19014                 | ' if r=print_mod_comma  then
19014     21 2C 0E F2 | 	cmp	local04, #33 wz
19018     AC 01 90 5D |  if_ne	jmp	#LR__1998
1901c                 | '   if t1.result_type=result_int then print t1.result.iresult,
1901c     1C 2A 0E F2 | 	cmp	local03, #28 wz
19020     64 00 90 5D |  if_ne	jmp	#LR__1994
19024     00 12 06 F6 | 	mov	arg01, #0
19028     14 3D B1 FD | 	call	#__system___getiolock_0614
1902c     FD 12 02 F6 | 	mov	arg01, result1
19030     68 E0 B0 FD | 	call	#__system___lockmem
19034     00 30 06 F6 | 	mov	local06, #0
19038     00 12 06 F6 | 	mov	arg01, #0
1903c     13 15 02 F6 | 	mov	arg02, local01
19040     00 16 06 F6 | 	mov	arg03, #0
19044     0A 18 06 F6 | 	mov	arg04, #10
19048     8C ED B0 FD | 	call	#__system___basic_print_integer
1904c     FD 32 02 F6 | 	mov	local07, result1
19050     18 2F 02 F6 | 	mov	local05, local06
19054     19 2F 02 F1 | 	add	local05, local07
19058     00 3A 06 F6 | 	mov	local11, #0
1905c     00 12 06 F6 | 	mov	arg01, #0
19060     09 14 06 F6 | 	mov	arg02, #9
19064     00 16 06 F6 | 	mov	arg03, #0
19068     D0 EC B0 FD | 	call	#__system___basic_print_char
1906c     FD 36 02 F6 | 	mov	local09, result1
19070     FD 2E 02 F1 | 	add	local05, result1
19074     00 12 06 F6 | 	mov	arg01, #0
19078     C4 3C B1 FD | 	call	#__system___getiolock_0614
1907c     FD 00 68 FC | 	wrlong	#0, result1
19080     00 FA 05 F6 | 	mov	result1, #0
19084     00 38 06 F6 | 	mov	local10, #0
19088                 | LR__1994
19088                 | '   if t1.result_type=result_uint then print t1.result.uresult,
19088     1D 2A 0E F2 | 	cmp	local03, #29 wz
1908c     64 00 90 5D |  if_ne	jmp	#LR__1995
19090     00 12 06 F6 | 	mov	arg01, #0
19094     A8 3C B1 FD | 	call	#__system___getiolock_0614
19098     FD 12 02 F6 | 	mov	arg01, result1
1909c     FC DF B0 FD | 	call	#__system___lockmem
190a0     00 30 06 F6 | 	mov	local06, #0
190a4     00 12 06 F6 | 	mov	arg01, #0
190a8     13 15 02 F6 | 	mov	arg02, local01
190ac     00 16 06 F6 | 	mov	arg03, #0
190b0     0A 18 06 F6 | 	mov	arg04, #10
190b4     60 ED B0 FD | 	call	#__system___basic_print_unsigned
190b8     FD 32 02 F6 | 	mov	local07, result1
190bc     18 2F 02 F6 | 	mov	local05, local06
190c0     19 2F 02 F1 | 	add	local05, local07
190c4     00 3A 06 F6 | 	mov	local11, #0
190c8     00 12 06 F6 | 	mov	arg01, #0
190cc     09 14 06 F6 | 	mov	arg02, #9
190d0     00 16 06 F6 | 	mov	arg03, #0
190d4     64 EC B0 FD | 	call	#__system___basic_print_char
190d8     FD 36 02 F6 | 	mov	local09, result1
190dc     FD 2E 02 F1 | 	add	local05, result1
190e0     00 12 06 F6 | 	mov	arg01, #0
190e4     58 3C B1 FD | 	call	#__system___getiolock_0614
190e8     FD 00 68 FC | 	wrlong	#0, result1
190ec     00 FA 05 F6 | 	mov	result1, #0
190f0     00 38 06 F6 | 	mov	local10, #0
190f4                 | LR__1995
190f4                 | '   if t1.result_type=result_float then print t1.result.fresult,
190f4     1E 2A 0E F2 | 	cmp	local03, #30 wz
190f8     64 00 90 5D |  if_ne	jmp	#LR__1996
190fc     00 12 06 F6 | 	mov	arg01, #0
19100     3C 3C B1 FD | 	call	#__system___getiolock_0614
19104     FD 12 02 F6 | 	mov	arg01, result1
19108     90 DF B0 FD | 	call	#__system___lockmem
1910c     00 30 06 F6 | 	mov	local06, #0
19110     00 12 06 F6 | 	mov	arg01, #0
19114     13 15 02 F6 | 	mov	arg02, local01
19118     00 16 06 F6 | 	mov	arg03, #0
1911c     23 18 06 F6 | 	mov	arg04, #35
19120     0C 14 B1 FD | 	call	#__system___basic_print_float
19124     FD 32 02 F6 | 	mov	local07, result1
19128     18 2F 02 F6 | 	mov	local05, local06
1912c     19 2F 02 F1 | 	add	local05, local07
19130     00 3A 06 F6 | 	mov	local11, #0
19134     00 12 06 F6 | 	mov	arg01, #0
19138     09 14 06 F6 | 	mov	arg02, #9
1913c     00 16 06 F6 | 	mov	arg03, #0
19140     F8 EB B0 FD | 	call	#__system___basic_print_char
19144     FD 36 02 F6 | 	mov	local09, result1
19148     FD 2E 02 F1 | 	add	local05, result1
1914c     00 12 06 F6 | 	mov	arg01, #0
19150     EC 3B B1 FD | 	call	#__system___getiolock_0614
19154     FD 00 68 FC | 	wrlong	#0, result1
19158     00 FA 05 F6 | 	mov	result1, #0
1915c     00 38 06 F6 | 	mov	local10, #0
19160                 | LR__1996
19160                 | '   if t1.result_type=result_string then print t1.result.sresult,
19160     1F 2A 0E F2 | 	cmp	local03, #31 wz
19164     60 00 90 5D |  if_ne	jmp	#LR__1997
19168     00 12 06 F6 | 	mov	arg01, #0
1916c     D0 3B B1 FD | 	call	#__system___getiolock_0614
19170     FD 12 02 F6 | 	mov	arg01, result1
19174     24 DF B0 FD | 	call	#__system___lockmem
19178     00 30 06 F6 | 	mov	local06, #0
1917c     00 12 06 F6 | 	mov	arg01, #0
19180     13 15 02 F6 | 	mov	arg02, local01
19184     00 16 06 F6 | 	mov	arg03, #0
19188     08 EC B0 FD | 	call	#__system___basic_print_string
1918c     FD 32 02 F6 | 	mov	local07, result1
19190     18 2F 02 F6 | 	mov	local05, local06
19194     19 2F 02 F1 | 	add	local05, local07
19198     00 3A 06 F6 | 	mov	local11, #0
1919c     00 12 06 F6 | 	mov	arg01, #0
191a0     09 14 06 F6 | 	mov	arg02, #9
191a4     00 16 06 F6 | 	mov	arg03, #0
191a8     90 EB B0 FD | 	call	#__system___basic_print_char
191ac     FD 36 02 F6 | 	mov	local09, result1
191b0     FD 2E 02 F1 | 	add	local05, result1
191b4     00 12 06 F6 | 	mov	arg01, #0
191b8     84 3B B1 FD | 	call	#__system___getiolock_0614
191bc     FD 00 68 FC | 	wrlong	#0, result1
191c0     00 FA 05 F6 | 	mov	result1, #0
191c4     00 38 06 F6 | 	mov	local10, #0
191c8                 | LR__1997
191c8                 | LR__1998
191c8                 | ' if r=print_mod_semicolon then 
191c8     22 2C 0E F2 | 	cmp	local04, #34 wz
191cc     1C 01 90 5D |  if_ne	jmp	#LR__2003
191d0                 | '   if t1.result_type=result_int then print t1.result.iresult;
191d0     1C 2A 0E F2 | 	cmp	local03, #28 wz
191d4     50 00 90 5D |  if_ne	jmp	#LR__1999
191d8     00 12 06 F6 | 	mov	arg01, #0
191dc     60 3B B1 FD | 	call	#__system___getiolock_0614
191e0     FD 12 02 F6 | 	mov	arg01, result1
191e4     B4 DE B0 FD | 	call	#__system___lockmem
191e8     00 30 06 F6 | 	mov	local06, #0
191ec     00 38 06 F6 | 	mov	local10, #0
191f0     0A 3A 06 F6 | 	mov	local11, #10
191f4     00 12 06 F6 | 	mov	arg01, #0
191f8     13 15 02 F6 | 	mov	arg02, local01
191fc     00 16 06 F6 | 	mov	arg03, #0
19200     0A 18 06 F6 | 	mov	arg04, #10
19204     D0 EB B0 FD | 	call	#__system___basic_print_integer
19208     FD 32 02 F6 | 	mov	local07, result1
1920c     18 2F 02 F6 | 	mov	local05, local06
19210     19 2F 02 F1 | 	add	local05, local07
19214     00 12 06 F6 | 	mov	arg01, #0
19218     24 3B B1 FD | 	call	#__system___getiolock_0614
1921c     FD 00 68 FC | 	wrlong	#0, result1
19220     00 FA 05 F6 | 	mov	result1, #0
19224     00 36 06 F6 | 	mov	local09, #0
19228                 | LR__1999
19228                 | '   if t1.result_type=result_uint then print t1.result.uresult;
19228     1D 2A 0E F2 | 	cmp	local03, #29 wz
1922c     50 00 90 5D |  if_ne	jmp	#LR__2000
19230     00 12 06 F6 | 	mov	arg01, #0
19234     08 3B B1 FD | 	call	#__system___getiolock_0614
19238     FD 12 02 F6 | 	mov	arg01, result1
1923c     5C DE B0 FD | 	call	#__system___lockmem
19240     00 30 06 F6 | 	mov	local06, #0
19244     00 38 06 F6 | 	mov	local10, #0
19248     0A 3A 06 F6 | 	mov	local11, #10
1924c     00 12 06 F6 | 	mov	arg01, #0
19250     13 15 02 F6 | 	mov	arg02, local01
19254     00 16 06 F6 | 	mov	arg03, #0
19258     0A 18 06 F6 | 	mov	arg04, #10
1925c     B8 EB B0 FD | 	call	#__system___basic_print_unsigned
19260     FD 32 02 F6 | 	mov	local07, result1
19264     18 2F 02 F6 | 	mov	local05, local06
19268     19 2F 02 F1 | 	add	local05, local07
1926c     00 12 06 F6 | 	mov	arg01, #0
19270     CC 3A B1 FD | 	call	#__system___getiolock_0614
19274     FD 00 68 FC | 	wrlong	#0, result1
19278     00 FA 05 F6 | 	mov	result1, #0
1927c     00 36 06 F6 | 	mov	local09, #0
19280                 | LR__2000
19280                 | '   if t1.result_type=result_float then print t1.result.fresult;
19280     1E 2A 0E F2 | 	cmp	local03, #30 wz
19284     30 00 90 5D |  if_ne	jmp	#LR__2001
19288     00 12 06 F6 | 	mov	arg01, #0
1928c     B0 3A B1 FD | 	call	#__system___getiolock_0614
19290     FD 12 02 F6 | 	mov	arg01, result1
19294     04 DE B0 FD | 	call	#__system___lockmem
19298     00 12 06 F6 | 	mov	arg01, #0
1929c     13 15 02 F6 | 	mov	arg02, local01
192a0     00 16 06 F6 | 	mov	arg03, #0
192a4     23 18 06 F6 | 	mov	arg04, #35
192a8     84 12 B1 FD | 	call	#__system___basic_print_float
192ac     00 12 06 F6 | 	mov	arg01, #0
192b0     8C 3A B1 FD | 	call	#__system___getiolock_0614
192b4     FD 00 68 FC | 	wrlong	#0, result1
192b8                 | LR__2001
192b8                 | '   if t1.result_type=result_string then print t1.result.sresult;
192b8     1F 2A 0E F2 | 	cmp	local03, #31 wz
192bc     2C 00 90 5D |  if_ne	jmp	#LR__2002
192c0     00 12 06 F6 | 	mov	arg01, #0
192c4     78 3A B1 FD | 	call	#__system___getiolock_0614
192c8     FD 12 02 F6 | 	mov	arg01, result1
192cc     CC DD B0 FD | 	call	#__system___lockmem
192d0     00 12 06 F6 | 	mov	arg01, #0
192d4     13 15 02 F6 | 	mov	arg02, local01
192d8     00 16 06 F6 | 	mov	arg03, #0
192dc     B4 EA B0 FD | 	call	#__system___basic_print_string
192e0     00 12 06 F6 | 	mov	arg01, #0
192e4     58 3A B1 FD | 	call	#__system___getiolock_0614
192e8     FD 00 68 FC | 	wrlong	#0, result1
192ec                 | LR__2002
192ec                 | LR__2003
192ec                 | ' if r=0 then 
192ec     00 2C 0E F2 | 	cmp	local04, #0 wz
192f0     1C 01 90 5D |  if_ne	jmp	#LR__2008
192f4                 | '   if t1.result_type=result_int then print t1.result.iresult
192f4     1C 2A 0E F2 | 	cmp	local03, #28 wz
192f8     40 00 90 5D |  if_ne	jmp	#LR__2004
192fc     00 12 06 F6 | 	mov	arg01, #0
19300     3C 3A B1 FD | 	call	#__system___getiolock_0614
19304     FD 12 02 F6 | 	mov	arg01, result1
19308     90 DD B0 FD | 	call	#__system___lockmem
1930c     00 12 06 F6 | 	mov	arg01, #0
19310     13 15 02 F6 | 	mov	arg02, local01
19314     00 16 06 F6 | 	mov	arg03, #0
19318     0A 18 06 F6 | 	mov	arg04, #10
1931c     B8 EA B0 FD | 	call	#__system___basic_print_integer
19320     00 12 06 F6 | 	mov	arg01, #0
19324     0A 14 06 F6 | 	mov	arg02, #10
19328     00 16 06 F6 | 	mov	arg03, #0
1932c     0C EA B0 FD | 	call	#__system___basic_print_char
19330     00 12 06 F6 | 	mov	arg01, #0
19334     08 3A B1 FD | 	call	#__system___getiolock_0614
19338     FD 00 68 FC | 	wrlong	#0, result1
1933c                 | LR__2004
1933c                 | '   if t1.result_type=result_uint then print t1.result.uresult
1933c     1D 2A 0E F2 | 	cmp	local03, #29 wz
19340     40 00 90 5D |  if_ne	jmp	#LR__2005
19344     00 12 06 F6 | 	mov	arg01, #0
19348     F4 39 B1 FD | 	call	#__system___getiolock_0614
1934c     FD 12 02 F6 | 	mov	arg01, result1
19350     48 DD B0 FD | 	call	#__system___lockmem
19354     00 12 06 F6 | 	mov	arg01, #0
19358     13 15 02 F6 | 	mov	arg02, local01
1935c     00 16 06 F6 | 	mov	arg03, #0
19360     0A 18 06 F6 | 	mov	arg04, #10
19364     B0 EA B0 FD | 	call	#__system___basic_print_unsigned
19368     00 12 06 F6 | 	mov	arg01, #0
1936c     0A 14 06 F6 | 	mov	arg02, #10
19370     00 16 06 F6 | 	mov	arg03, #0
19374     C4 E9 B0 FD | 	call	#__system___basic_print_char
19378     00 12 06 F6 | 	mov	arg01, #0
1937c     C0 39 B1 FD | 	call	#__system___getiolock_0614
19380     FD 00 68 FC | 	wrlong	#0, result1
19384                 | LR__2005
19384                 | '   if t1.result_type=result_float then print t1.result.fresult
19384     1E 2A 0E F2 | 	cmp	local03, #30 wz
19388     40 00 90 5D |  if_ne	jmp	#LR__2006
1938c     00 12 06 F6 | 	mov	arg01, #0
19390     AC 39 B1 FD | 	call	#__system___getiolock_0614
19394     FD 12 02 F6 | 	mov	arg01, result1
19398     00 DD B0 FD | 	call	#__system___lockmem
1939c     00 12 06 F6 | 	mov	arg01, #0
193a0     13 15 02 F6 | 	mov	arg02, local01
193a4     00 16 06 F6 | 	mov	arg03, #0
193a8     23 18 06 F6 | 	mov	arg04, #35
193ac     80 11 B1 FD | 	call	#__system___basic_print_float
193b0     00 12 06 F6 | 	mov	arg01, #0
193b4     0A 14 06 F6 | 	mov	arg02, #10
193b8     00 16 06 F6 | 	mov	arg03, #0
193bc     7C E9 B0 FD | 	call	#__system___basic_print_char
193c0     00 12 06 F6 | 	mov	arg01, #0
193c4     78 39 B1 FD | 	call	#__system___getiolock_0614
193c8     FD 00 68 FC | 	wrlong	#0, result1
193cc                 | LR__2006
193cc                 | '   if t1.result_type=result_string then print t1.result.sresult
193cc     1F 2A 0E F2 | 	cmp	local03, #31 wz
193d0     3C 00 90 5D |  if_ne	jmp	#LR__2007
193d4     00 12 06 F6 | 	mov	arg01, #0
193d8     64 39 B1 FD | 	call	#__system___getiolock_0614
193dc     FD 12 02 F6 | 	mov	arg01, result1
193e0     B8 DC B0 FD | 	call	#__system___lockmem
193e4     00 12 06 F6 | 	mov	arg01, #0
193e8     13 15 02 F6 | 	mov	arg02, local01
193ec     00 16 06 F6 | 	mov	arg03, #0
193f0     A0 E9 B0 FD | 	call	#__system___basic_print_string
193f4     00 12 06 F6 | 	mov	arg01, #0
193f8     0A 14 06 F6 | 	mov	arg02, #10
193fc     00 16 06 F6 | 	mov	arg03, #0
19400     38 E9 B0 FD | 	call	#__system___basic_print_char
19404     00 12 06 F6 | 	mov	arg01, #0
19408     34 39 B1 FD | 	call	#__system___getiolock_0614
1940c     FD 00 68 FC | 	wrlong	#0, result1
19410                 | LR__2007
19410                 | LR__2008
19410                 | ' if r=print_mod_empty then print
19410     20 2C 0E F2 | 	cmp	local04, #32 wz
19414     2C 00 90 5D |  if_ne	jmp	#LR__2009
19418     00 12 06 F6 | 	mov	arg01, #0
1941c     20 39 B1 FD | 	call	#__system___getiolock_0614
19420     FD 12 02 F6 | 	mov	arg01, result1
19424     74 DC B0 FD | 	call	#__system___lockmem
19428     00 12 06 F6 | 	mov	arg01, #0
1942c     0A 14 06 F6 | 	mov	arg02, #10
19430     00 16 06 F6 | 	mov	arg03, #0
19434     04 E9 B0 FD | 	call	#__system___basic_print_char
19438     00 12 06 F6 | 	mov	arg01, #0
1943c     00 39 B1 FD | 	call	#__system___getiolock_0614
19440     FD 00 68 FC | 	wrlong	#0, result1
19444                 | LR__2009
19444                 | LR__2010
19444     A7 F0 03 F6 | 	mov	ptra, fp
19448     B2 00 A0 FD | 	call	#popregs_
1944c                 | _do_print_ret
1944c     2D 00 64 FD | 	ret
19450                 | 
19450                 | ' 
19450                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
19450                 | ' 
19450                 | ' sub do_push
19450                 | _do_push
19450                 | ' if stackpointer<maxstack then 
19450     43 00 00 FF 
19454     58 E4 05 F1 | 	add	objptr, ##34392
19458     F2 00 02 FB | 	rdlong	_var01, objptr
1945c     43 00 00 FF 
19460     58 E4 85 F1 | 	sub	objptr, ##34392
19464     01 00 00 FF 
19468     00 00 56 F2 | 	cmps	_var01, ##512 wc
1946c     F8 00 90 3D |  if_ae	jmp	#LR__2020
19470     4A 00 00 FF 
19474     80 E4 05 F1 | 	add	objptr, ##38016
19478     F2 02 02 FB | 	rdlong	_var02, objptr
1947c     01 05 02 F6 | 	mov	_var03, _var02
19480     01 04 66 F0 | 	shl	_var03, #1
19484     01 05 02 F1 | 	add	_var03, _var02
19488     02 04 66 F0 | 	shl	_var03, #2
1948c     03 00 00 FF 
19490     04 E4 85 F1 | 	sub	objptr, ##1540
19494     F2 04 02 F1 | 	add	_var03, objptr
19498     02 01 02 FB | 	rdlong	_var01, _var03
1949c     04 04 06 F1 | 	add	_var03, #4
194a0     02 07 02 FB | 	rdlong	_var04, _var03
194a4     01 05 02 F6 | 	mov	_var03, _var02
194a8     01 04 66 F0 | 	shl	_var03, #1
194ac     01 05 02 F1 | 	add	_var03, _var02
194b0     02 04 66 F0 | 	shl	_var03, #2
194b4     F2 04 02 F1 | 	add	_var03, objptr
194b8     08 04 06 F1 | 	add	_var03, #8
194bc     02 03 02 FB | 	rdlong	_var02, _var03
194c0     04 00 00 FF 
194c4     24 E4 85 F1 | 	sub	objptr, ##2084
194c8     F2 04 02 FB | 	rdlong	_var03, objptr
194cc     02 09 02 F6 | 	mov	_var05, _var03
194d0     01 08 66 F0 | 	shl	_var05, #1
194d4     02 09 02 F1 | 	add	_var05, _var03
194d8     02 08 66 F0 | 	shl	_var05, #2
194dc     0C 00 00 FF 
194e0     0C E4 85 F1 | 	sub	objptr, ##6156
194e4     F2 08 02 F1 | 	add	_var05, objptr
194e8     04 01 62 FC | 	wrlong	_var01, _var05
194ec     0C 00 00 FF 
194f0     0C E4 05 F1 | 	add	objptr, ##6156
194f4     F2 08 02 FB | 	rdlong	_var05, objptr
194f8     04 05 02 F6 | 	mov	_var03, _var05
194fc     01 04 66 F0 | 	shl	_var03, #1
19500     04 05 02 F1 | 	add	_var03, _var05
19504     02 04 66 F0 | 	shl	_var03, #2
19508     0C 00 00 FF 
1950c     0C E4 85 F1 | 	sub	objptr, ##6156
19510     F2 04 02 F1 | 	add	_var03, objptr
19514     04 04 06 F1 | 	add	_var03, #4
19518     02 07 62 FC | 	wrlong	_var04, _var03
1951c     0C 00 00 FF 
19520     0C E4 05 F1 | 	add	objptr, ##6156
19524     F2 08 02 FB | 	rdlong	_var05, objptr
19528     04 07 02 F6 | 	mov	_var04, _var05
1952c     01 06 66 F0 | 	shl	_var04, #1
19530     04 07 02 F1 | 	add	_var04, _var05
19534     02 06 66 F0 | 	shl	_var04, #2
19538     0C 00 00 FF 
1953c     0C E4 85 F1 | 	sub	objptr, ##6156
19540     F2 06 02 F1 | 	add	_var04, objptr
19544     08 06 06 F1 | 	add	_var04, #8
19548     03 03 62 FC | 	wrlong	_var02, _var04
1954c     0C 00 00 FF 
19550     0C E4 05 F1 | 	add	objptr, ##6156
19554     F2 00 02 FB | 	rdlong	_var01, objptr
19558     01 00 06 F1 | 	add	_var01, #1
1955c     F2 00 62 FC | 	wrlong	_var01, objptr
19560     43 00 00 FF 
19564     58 E4 85 F1 | 	sub	objptr, ##34392
19568                 | LR__2020
19568                 | _do_push_ret
19568     2D 00 64 FD | 	ret
1956c                 | 
1956c                 | ' 
1956c                 | ' '-------------------- put
1956c                 | ' 
1956c                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
1956c                 | _do_put
1956c     03 4A 05 F6 | 	mov	COUNT_, #3
19570     A8 00 A0 FD | 	call	#pushregs_
19574     28 F0 07 F1 | 	add	ptra, #40
19578     4A 00 00 FF 
1957c     80 E4 05 F1 | 	add	objptr, ##38016
19580     F2 1A 02 FB | 	rdlong	arg05, objptr
19584     0D 19 02 F6 | 	mov	arg04, arg05
19588     01 18 66 F0 | 	shl	arg04, #1
1958c     0D 19 02 F1 | 	add	arg04, arg05
19590     02 18 66 F0 | 	shl	arg04, #2
19594     03 00 00 FF 
19598     04 E4 85 F1 | 	sub	objptr, ##1540
1959c     F2 18 02 F1 | 	add	arg04, objptr
195a0     0C 1B 02 FB | 	rdlong	arg05, arg04
195a4     A7 1A 62 FC | 	wrlong	arg05, fp
195a8                 | ' 
195a8                 | ' numpar=compiledline(lineptr_e).result.uresult
195a8                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
195a8     04 1A 0E F2 | 	cmp	arg05, #4 wz
195ac     47 00 00 FF 
195b0     7C E4 85 F1 | 	sub	objptr, ##36476
195b4     48 00 90 5D |  if_ne	jmp	#LR__2030
195b8     4C 41 BF FD | 	call	#_pop
195bc     FF 1A 02 F6 | 	mov	arg05, result3
195c0     1C 4E 05 F1 | 	add	fp, #28
195c4     A7 FA 61 FC | 	wrlong	result1, fp
195c8     04 4E 05 F1 | 	add	fp, #4
195cc     A7 FC 61 FC | 	wrlong	result2, fp
195d0     04 4E 05 F1 | 	add	fp, #4
195d4     A7 1A 62 FC | 	wrlong	arg05, fp
195d8     08 4E 85 F1 | 	sub	fp, #8
195dc     A7 12 02 F6 | 	mov	arg01, fp
195e0     1C 4E 85 F1 | 	sub	fp, #28
195e4     04 43 BF FD | 	call	#_converttoint
195e8     52 00 00 FF 
195ec     0C E5 05 F1 | 	add	objptr, ##42252
195f0     F2 FA 61 FC | 	wrlong	result1, objptr
195f4     52 00 00 FF 
195f8     0C E5 85 F1 | 	sub	objptr, ##42252
195fc     18 00 90 FD | 	jmp	#LR__2031
19600                 | LR__2030
19600     52 00 00 FF 
19604     0C E5 05 F1 | 	add	objptr, ##42252
19608     FF FF FF FF 
1960c     F2 FE 6B FC | 	wrlong	##-1, objptr
19610     52 00 00 FF 
19614     0C E5 85 F1 | 	sub	objptr, ##42252
19618                 | LR__2031
19618                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
19618     A7 1A 02 FB | 	rdlong	arg05, fp
1961c     03 1A 56 F2 | 	cmps	arg05, #3 wc
19620     40 00 90 CD |  if_b	jmp	#LR__2032
19624     E0 40 BF FD | 	call	#_pop
19628     FF 1A 02 F6 | 	mov	arg05, result3
1962c     1C 4E 05 F1 | 	add	fp, #28
19630     A7 FA 61 FC | 	wrlong	result1, fp
19634     04 4E 05 F1 | 	add	fp, #4
19638     A7 FC 61 FC | 	wrlong	result2, fp
1963c     04 4E 05 F1 | 	add	fp, #4
19640     A7 1A 62 FC | 	wrlong	arg05, fp
19644     08 4E 85 F1 | 	sub	fp, #8
19648     A7 12 02 F6 | 	mov	arg01, fp
1964c     1C 4E 85 F1 | 	sub	fp, #28
19650     98 42 BF FD | 	call	#_converttoint
19654     08 4E 05 F1 | 	add	fp, #8
19658     A7 FA 61 FC | 	wrlong	result1, fp
1965c     08 4E 85 F1 | 	sub	fp, #8
19660     0C 00 90 FD | 	jmp	#LR__2033
19664                 | LR__2032
19664     08 4E 05 F1 | 	add	fp, #8
19668     A7 02 68 FC | 	wrlong	#1, fp
1966c     08 4E 85 F1 | 	sub	fp, #8
19670                 | LR__2033
19670                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
19670     A7 18 02 FB | 	rdlong	arg04, fp
19674     02 18 56 F2 | 	cmps	arg04, #2 wc
19678     3C 00 90 CD |  if_b	jmp	#LR__2034
1967c     88 40 BF FD | 	call	#_pop
19680     FF 18 02 F6 | 	mov	arg04, result3
19684     1C 4E 05 F1 | 	add	fp, #28
19688     A7 FA 61 FC | 	wrlong	result1, fp
1968c     04 4E 05 F1 | 	add	fp, #4
19690     A7 FC 61 FC | 	wrlong	result2, fp
19694     04 4E 05 F1 | 	add	fp, #4
19698     A7 18 62 FC | 	wrlong	arg04, fp
1969c     08 4E 85 F1 | 	sub	fp, #8
196a0     A7 12 02 F6 | 	mov	arg01, fp
196a4     1C 4E 85 F1 | 	sub	fp, #28
196a8     40 42 BF FD | 	call	#_converttoint
196ac     0C 4E 05 F1 | 	add	fp, #12
196b0     A7 FA 61 FC | 	wrlong	result1, fp
196b4     0C 4E 85 F1 | 	sub	fp, #12
196b8                 | LR__2034
196b8     4C 40 BF FD | 	call	#_pop
196bc     FF 18 02 F6 | 	mov	arg04, result3
196c0     1C 4E 05 F1 | 	add	fp, #28
196c4     A7 FA 61 FC | 	wrlong	result1, fp
196c8     04 4E 05 F1 | 	add	fp, #4
196cc     A7 FC 61 FC | 	wrlong	result2, fp
196d0     04 4E 05 F1 | 	add	fp, #4
196d4     A7 18 62 FC | 	wrlong	arg04, fp
196d8     08 4E 85 F1 | 	sub	fp, #8
196dc     A7 12 02 F6 | 	mov	arg01, fp
196e0     1C 4E 85 F1 | 	sub	fp, #28
196e4     04 42 BF FD | 	call	#_converttoint
196e8     04 4E 05 F1 | 	add	fp, #4
196ec     A7 FA 61 FC | 	wrlong	result1, fp
196f0     10 4E 05 F1 | 	add	fp, #16
196f4     A7 26 02 FB | 	rdlong	local01, fp
196f8     14 4E 85 F1 | 	sub	fp, #20
196fc     02 26 66 F0 | 	shl	local01, #2
19700     50 00 00 FF 
19704     C4 E4 05 F1 | 	add	objptr, ##41156
19708     F2 26 02 F1 | 	add	local01, objptr
1970c     13 01 68 FC | 	wrlong	#0, local01
19710                 | ' t1=pop() : channel=converttoint(t1)
19710                 | ' getres(j)=0
19710                 | ' if pos>=0 then
19710     02 00 00 FF 
19714     48 E4 05 F1 | 	add	objptr, ##1096
19718     F2 28 02 FB | 	rdlong	local02, objptr
1971c     52 00 00 FF 
19720     0C E5 85 F1 | 	sub	objptr, ##42252
19724     00 28 56 F2 | 	cmps	local02, #0 wc
19728     C0 01 90 CD |  if_b	jmp	#LR__2040
1972c     10 4E 05 F1 | 	add	fp, #16
19730     A7 00 68 FC | 	wrlong	#0, fp
19734     10 4E 85 F1 | 	sub	fp, #16
19738                 | '    i=0: do
19738                 | LR__2035
19738     14 4E 05 F1 | 	add	fp, #20
1973c     A7 00 68 FC | 	wrlong	#0, fp
19740     14 4E 85 F1 | 	sub	fp, #20
19744                 | '    j=0: do    
19744                 | LR__2036
19744                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
19744     0C 4E 05 F1 | 	add	fp, #12
19748     A7 28 02 FB | 	rdlong	local02, fp
1974c     0C 4E 85 F1 | 	sub	fp, #12
19750     00 04 00 FF 
19754     00 28 56 F2 | 	cmps	local02, ##524288 wc
19758     4C 00 90 3D |  if_ae	jmp	#LR__2037
1975c     14 4E 05 F1 | 	add	fp, #20
19760     A7 28 02 FB | 	rdlong	local02, fp
19764     14 27 02 F6 | 	mov	local01, local02
19768     4E 00 00 FF 
1976c     B4 E4 05 F1 | 	add	objptr, ##40116
19770     F2 26 02 F1 | 	add	local01, objptr
19774     08 4E 85 F1 | 	sub	fp, #8
19778     A7 12 02 FB | 	rdlong	arg01, fp
1977c     04 4E 05 F1 | 	add	fp, #4
19780     A7 18 02 FB | 	rdlong	arg04, fp
19784     0A 18 66 F0 | 	shl	arg04, #10
19788     0C 13 02 F1 | 	add	arg01, arg04
1978c     10 4E 85 F1 | 	sub	fp, #16
19790     14 13 02 F1 | 	add	arg01, local02
19794     09 FB C1 FA | 	rdbyte	result1, arg01
19798     4E 00 00 FF 
1979c     B4 E4 85 F1 | 	sub	objptr, ##40116
197a0     13 FB 41 FC | 	wrbyte	result1, local01
197a4     48 00 90 FD | 	jmp	#LR__2038
197a8                 | LR__2037
197a8     14 4E 05 F1 | 	add	fp, #20
197ac     A7 28 02 FB | 	rdlong	local02, fp
197b0     14 27 02 F6 | 	mov	local01, local02
197b4     4E 00 00 FF 
197b8     B4 E4 05 F1 | 	add	objptr, ##40116
197bc     F2 26 02 F1 | 	add	local01, objptr
197c0     08 4E 85 F1 | 	sub	fp, #8
197c4     A7 12 02 FB | 	rdlong	arg01, fp
197c8     04 4E 05 F1 | 	add	fp, #4
197cc     A7 18 02 FB | 	rdlong	arg04, fp
197d0     0A 18 66 F0 | 	shl	arg04, #10
197d4     0C 13 02 F1 | 	add	arg01, arg04
197d8     10 4E 85 F1 | 	sub	fp, #16
197dc     14 13 02 F1 | 	add	arg01, local02
197e0     4E 00 00 FF 
197e4     B4 E4 85 F1 | 	sub	objptr, ##40116
197e8     78 A0 B0 FD | 	call	#_pspeek
197ec     13 FB 41 FC | 	wrbyte	result1, local01
197f0                 | LR__2038
197f0     14 4E 05 F1 | 	add	fp, #20
197f4     A7 28 02 FB | 	rdlong	local02, fp
197f8     01 28 06 F1 | 	add	local02, #1
197fc     A7 28 62 FC | 	wrlong	local02, fp
19800     14 4E 85 F1 | 	sub	fp, #20
19804     02 00 00 FF 
19808     00 28 56 F2 | 	cmps	local02, ##1024 wc
1980c     2C 00 90 3D |  if_ae	jmp	#LR__2039
19810     10 4E 05 F1 | 	add	fp, #16
19814     A7 26 02 FB | 	rdlong	local01, fp
19818     0A 26 66 F0 | 	shl	local01, #10
1981c     04 4E 05 F1 | 	add	fp, #4
19820     A7 28 02 FB | 	rdlong	local02, fp
19824     14 27 02 F1 | 	add	local01, local02
19828     0C 4E 85 F1 | 	sub	fp, #12
1982c     A7 28 02 FB | 	rdlong	local02, fp
19830     08 4E 85 F1 | 	sub	fp, #8
19834     14 27 5A F2 | 	cmps	local01, local02 wcz
19838     08 FF 9F ED |  if_be	jmp	#LR__2036
1983c                 | LR__2039
1983c                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
1983c     04 4E 05 F1 | 	add	fp, #4
19840     A7 12 02 FB | 	rdlong	arg01, fp
19844     52 00 00 FF 
19848     0C E5 05 F1 | 	add	objptr, ##42252
1984c     F2 14 02 FB | 	rdlong	arg02, objptr
19850     01 14 06 F1 | 	add	arg02, #1
19854     04 00 00 FF 
19858     58 E4 85 F1 | 	sub	objptr, ##2136
1985c     F2 16 02 F6 | 	mov	arg03, objptr
19860     4E 00 00 FF 
19864     B4 E4 85 F1 | 	sub	objptr, ##40116
19868     04 4E 05 F1 | 	add	fp, #4
1986c     A7 18 02 FB | 	rdlong	arg04, fp
19870     08 4E 85 F1 | 	sub	fp, #8
19874     01 1A 06 F6 | 	mov	arg05, #1
19878     28 E6 B0 FD | 	call	#__system___basic_put
1987c     18 4E 05 F1 | 	add	fp, #24
19880     A7 FA 61 FC | 	wrlong	result1, fp
19884     14 4E 85 F1 | 	sub	fp, #20
19888     A7 26 02 FB | 	rdlong	local01, fp
1988c     02 26 66 F0 | 	shl	local01, #2
19890     50 00 00 FF 
19894     C4 E4 05 F1 | 	add	objptr, ##41156
19898     F2 26 02 F1 | 	add	local01, objptr
1989c     13 FB 61 FC | 	wrlong	result1, local01
198a0                 | '    if 1024*i+j>amount then exit loop
198a0     0C 4E 05 F1 | 	add	fp, #12
198a4     A7 28 02 FB | 	rdlong	local02, fp
198a8     0A 28 66 F0 | 	shl	local02, #10
198ac     04 4E 05 F1 | 	add	fp, #4
198b0     A7 26 02 FB | 	rdlong	local01, fp
198b4     13 29 02 F1 | 	add	local02, local01
198b8     0C 4E 85 F1 | 	sub	fp, #12
198bc     A7 26 02 FB | 	rdlong	local01, fp
198c0     08 4E 85 F1 | 	sub	fp, #8
198c4     13 29 5A F2 | 	cmps	local02, local01 wcz
198c8     50 00 00 FF 
198cc     C4 E4 85 F1 | 	sub	objptr, ##41156
198d0     CC 01 90 1D |  if_a	jmp	#LR__2047
198d4     10 4E 05 F1 | 	add	fp, #16
198d8     A7 28 02 FB | 	rdlong	local02, fp
198dc     01 28 06 F1 | 	add	local02, #1
198e0     A7 28 62 FC | 	wrlong	local02, fp
198e4     10 4E 85 F1 | 	sub	fp, #16
198e8     4C FE 9F FD | 	jmp	#LR__2035
198ec                 | LR__2040
198ec     10 4E 05 F1 | 	add	fp, #16
198f0     A7 00 68 FC | 	wrlong	#0, fp
198f4     10 4E 85 F1 | 	sub	fp, #16
198f8                 | '    i=0: do
198f8                 | LR__2041
198f8     14 4E 05 F1 | 	add	fp, #20
198fc     A7 00 68 FC | 	wrlong	#0, fp
19900     14 4E 85 F1 | 	sub	fp, #20
19904                 | '    j=0: do  
19904                 | LR__2042
19904                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
19904     0C 4E 05 F1 | 	add	fp, #12
19908     A7 28 02 FB | 	rdlong	local02, fp
1990c     0C 4E 85 F1 | 	sub	fp, #12
19910     00 04 00 FF 
19914     00 28 56 F2 | 	cmps	local02, ##524288 wc
19918     4C 00 90 3D |  if_ae	jmp	#LR__2043
1991c     14 4E 05 F1 | 	add	fp, #20
19920     A7 28 02 FB | 	rdlong	local02, fp
19924     14 27 02 F6 | 	mov	local01, local02
19928     4E 00 00 FF 
1992c     B4 E4 05 F1 | 	add	objptr, ##40116
19930     F2 26 02 F1 | 	add	local01, objptr
19934     08 4E 85 F1 | 	sub	fp, #8
19938     A7 12 02 FB | 	rdlong	arg01, fp
1993c     04 4E 05 F1 | 	add	fp, #4
19940     A7 18 02 FB | 	rdlong	arg04, fp
19944     0A 18 66 F0 | 	shl	arg04, #10
19948     0C 13 02 F1 | 	add	arg01, arg04
1994c     10 4E 85 F1 | 	sub	fp, #16
19950     14 13 02 F1 | 	add	arg01, local02
19954     09 FB C1 FA | 	rdbyte	result1, arg01
19958     4E 00 00 FF 
1995c     B4 E4 85 F1 | 	sub	objptr, ##40116
19960     13 FB 41 FC | 	wrbyte	result1, local01
19964     48 00 90 FD | 	jmp	#LR__2044
19968                 | LR__2043
19968     14 4E 05 F1 | 	add	fp, #20
1996c     A7 28 02 FB | 	rdlong	local02, fp
19970     14 27 02 F6 | 	mov	local01, local02
19974     4E 00 00 FF 
19978     B4 E4 05 F1 | 	add	objptr, ##40116
1997c     F2 26 02 F1 | 	add	local01, objptr
19980     08 4E 85 F1 | 	sub	fp, #8
19984     A7 12 02 FB | 	rdlong	arg01, fp
19988     04 4E 05 F1 | 	add	fp, #4
1998c     A7 18 02 FB | 	rdlong	arg04, fp
19990     0A 18 66 F0 | 	shl	arg04, #10
19994     0C 13 02 F1 | 	add	arg01, arg04
19998     10 4E 85 F1 | 	sub	fp, #16
1999c     14 13 02 F1 | 	add	arg01, local02
199a0     4E 00 00 FF 
199a4     B4 E4 85 F1 | 	sub	objptr, ##40116
199a8     B8 9E B0 FD | 	call	#_pspeek
199ac     13 FB 41 FC | 	wrbyte	result1, local01
199b0                 | LR__2044
199b0     14 4E 05 F1 | 	add	fp, #20
199b4     A7 28 02 FB | 	rdlong	local02, fp
199b8     01 28 06 F1 | 	add	local02, #1
199bc     A7 28 62 FC | 	wrlong	local02, fp
199c0     14 4E 85 F1 | 	sub	fp, #20
199c4     02 00 00 FF 
199c8     00 28 56 F2 | 	cmps	local02, ##1024 wc
199cc     2C 00 90 3D |  if_ae	jmp	#LR__2045
199d0     10 4E 05 F1 | 	add	fp, #16
199d4     A7 26 02 FB | 	rdlong	local01, fp
199d8     0A 26 66 F0 | 	shl	local01, #10
199dc     04 4E 05 F1 | 	add	fp, #4
199e0     A7 28 02 FB | 	rdlong	local02, fp
199e4     14 27 02 F1 | 	add	local01, local02
199e8     0C 4E 85 F1 | 	sub	fp, #12
199ec     A7 28 02 FB | 	rdlong	local02, fp
199f0     08 4E 85 F1 | 	sub	fp, #8
199f4     14 27 5A F2 | 	cmps	local01, local02 wcz
199f8     08 FF 9F ED |  if_be	jmp	#LR__2042
199fc                 | LR__2045
199fc                 | '    put #channel,,block(0),amount, r : getres(channel)=r
199fc     04 4E 05 F1 | 	add	fp, #4
19a00     A7 12 02 FB | 	rdlong	arg01, fp
19a04     4E 00 00 FF 
19a08     B4 E4 05 F1 | 	add	objptr, ##40116
19a0c     F2 16 02 F6 | 	mov	arg03, objptr
19a10     4E 00 00 FF 
19a14     B4 E4 85 F1 | 	sub	objptr, ##40116
19a18     04 4E 05 F1 | 	add	fp, #4
19a1c     A7 18 02 FB | 	rdlong	arg04, fp
19a20     08 4E 85 F1 | 	sub	fp, #8
19a24     00 14 06 F6 | 	mov	arg02, #0
19a28     01 1A 06 F6 | 	mov	arg05, #1
19a2c     74 E4 B0 FD | 	call	#__system___basic_put
19a30     18 4E 05 F1 | 	add	fp, #24
19a34     A7 FA 61 FC | 	wrlong	result1, fp
19a38     14 4E 85 F1 | 	sub	fp, #20
19a3c     A7 26 02 FB | 	rdlong	local01, fp
19a40     02 26 66 F0 | 	shl	local01, #2
19a44     50 00 00 FF 
19a48     C4 E4 05 F1 | 	add	objptr, ##41156
19a4c     F2 26 02 F1 | 	add	local01, objptr
19a50     13 FB 61 FC | 	wrlong	result1, local01
19a54                 | '    if 1024*i+j>amount then exit loop
19a54     0C 4E 05 F1 | 	add	fp, #12
19a58     A7 28 02 FB | 	rdlong	local02, fp
19a5c     0A 28 66 F0 | 	shl	local02, #10
19a60     04 4E 05 F1 | 	add	fp, #4
19a64     A7 26 02 FB | 	rdlong	local01, fp
19a68     13 29 02 F1 | 	add	local02, local01
19a6c     0C 4E 85 F1 | 	sub	fp, #12
19a70     A7 2A 02 FB | 	rdlong	local03, fp
19a74     08 4E 85 F1 | 	sub	fp, #8
19a78     15 29 5A F2 | 	cmps	local02, local03 wcz
19a7c     50 00 00 FF 
19a80     C4 E4 85 F1 | 	sub	objptr, ##41156
19a84     18 00 90 1D |  if_a	jmp	#LR__2046
19a88     10 4E 05 F1 | 	add	fp, #16
19a8c     A7 28 02 FB | 	rdlong	local02, fp
19a90     01 28 06 F1 | 	add	local02, #1
19a94     A7 28 62 FC | 	wrlong	local02, fp
19a98     10 4E 85 F1 | 	sub	fp, #16
19a9c     58 FE 9F FD | 	jmp	#LR__2041
19aa0                 | LR__2046
19aa0                 | LR__2047
19aa0     A7 F0 03 F6 | 	mov	ptra, fp
19aa4     B2 00 A0 FD | 	call	#popregs_
19aa8                 | _do_put_ret
19aa8     2D 00 64 FD | 	ret
19aac                 | 
19aac                 | ' 
19aac                 | ' '-------------------- rad
19aac                 | ' 
19aac                 | ' sub do_rad
19aac                 | _do_rad
19aac     52 00 00 FF 
19ab0     A8 E4 05 F1 | 	add	objptr, ##42152
19ab4     00 C0 9F FF 
19ab8     F2 00 68 FC | 	wrlong	##1065353216, objptr
19abc     04 E4 05 F1 | 	add	objptr, #4
19ac0     00 C0 9F FF 
19ac4     F2 00 68 FC | 	wrlong	##1065353216, objptr
19ac8     52 00 00 FF 
19acc     AC E4 85 F1 | 	sub	objptr, ##42156
19ad0                 | _do_rad_ret
19ad0     2D 00 64 FD | 	ret
19ad4                 | 
19ad4                 | ' 
19ad4                 | ' '-------------------- rdpin
19ad4                 | ' 
19ad4                 | ' sub do_rdpin
19ad4                 | _do_rdpin
19ad4     00 4A 05 F6 | 	mov	COUNT_, #0
19ad8     A8 00 A0 FD | 	call	#pushregs_
19adc     0C F0 07 F1 | 	add	ptra, #12
19ae0     24 3C BF FD | 	call	#_pop
19ae4     A7 FA 61 FC | 	wrlong	result1, fp
19ae8     04 4E 05 F1 | 	add	fp, #4
19aec     A7 FC 61 FC | 	wrlong	result2, fp
19af0     04 4E 05 F1 | 	add	fp, #4
19af4     A7 FE 61 FC | 	wrlong	result3, fp
19af8     08 4E 85 F1 | 	sub	fp, #8
19afc     A7 12 02 F6 | 	mov	arg01, fp
19b00     E8 3D BF FD | 	call	#_converttoint
19b04     FD FA 89 FA | 	rdpin	result1, result1
19b08     52 00 00 FF 
19b0c     10 E5 05 F1 | 	add	objptr, ##42256
19b10     F2 FA 61 FC | 	wrlong	result1, objptr
19b14     52 00 00 FF 
19b18     10 E5 85 F1 | 	sub	objptr, ##42256
19b1c     08 4E 05 F1 | 	add	fp, #8
19b20     A7 3A 68 FC | 	wrlong	#29, fp
19b24     08 4E 85 F1 | 	sub	fp, #8
19b28     A7 08 68 FC | 	wrlong	#4, fp
19b2c     A7 12 02 F6 | 	mov	arg01, fp
19b30     6C 3C BF FD | 	call	#_push
19b34     A7 F0 03 F6 | 	mov	ptra, fp
19b38     B2 00 A0 FD | 	call	#popregs_
19b3c                 | _do_rdpin_ret
19b3c     2D 00 64 FD | 	ret
19b40                 | 
19b40                 | ' 
19b40                 | ' ' ----------------  read
19b40                 | ' 
19b40                 | ' function read_next_line() as string
19b40                 | _read_next_line
19b40     07 4A 05 F6 | 	mov	COUNT_, #7
19b44     A8 00 A0 FD | 	call	#pushregs_
19b48                 | ' if dataptr=$7FFFFFFF then return("")
19b48     50 00 00 FF 
19b4c     2C E5 05 F1 | 	add	objptr, ##41260
19b50     F2 26 02 FB | 	rdlong	local01, objptr
19b54     50 00 00 FF 
19b58     2C E5 85 F1 | 	sub	objptr, ##41260
19b5c     FF FF 3F FF 
19b60     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
19b64     BB 01 00 AF 
19b68     40 FB 05 A6 |  if_e	mov	result1, ##@LR__6006
19b6c     BC 01 90 AD |  if_e	jmp	#LR__2057
19b70                 | ' do
19b70                 | LR__2050
19b70     50 00 00 FF 
19b74     08 E5 05 F1 | 	add	objptr, ##41224
19b78     F2 12 02 F6 | 	mov	arg01, objptr
19b7c     24 E4 05 F1 | 	add	objptr, #36
19b80     F2 14 02 FB | 	rdlong	arg02, objptr
19b84     24 16 06 F6 | 	mov	arg03, #36
19b88     45 00 00 FF 
19b8c     60 E4 85 F1 | 	sub	objptr, ##35424
19b90     10 C8 B0 FD | 	call	#_psram_spin2_read1
19b94                 | '  ' print dataptr
19b94                 | '   psram.read1(varptr(dataheader),dataptr,36) 
19b94                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
19b94     45 00 00 FF 
19b98     3C E4 05 F1 | 	add	objptr, ##35388
19b9c     F2 26 02 FB | 	rdlong	local01, objptr
19ba0     50 00 00 FF 
19ba4     08 E5 85 F1 | 	sub	objptr, ##41224
19ba8     FF FF 7F FF 
19bac     FF 27 0E F2 | 	cmp	local01, ##-1 wz
19bb0     50 00 00 5F 
19bb4     1C E5 05 51 |  if_ne	add	objptr, ##41244
19bb8     F2 26 02 5B |  if_ne	rdlong	local01, objptr
19bbc     10 E4 05 51 |  if_ne	add	objptr, #16
19bc0     F2 26 62 5C |  if_ne	wrlong	local01, objptr
19bc4     50 00 00 5F 
19bc8     2C E5 85 51 |  if_ne	sub	objptr, ##41260
19bcc     50 00 00 FF 
19bd0     1C E5 05 F1 | 	add	objptr, ##41244
19bd4     F2 26 02 FB | 	rdlong	local01, objptr
19bd8     50 00 00 FF 
19bdc     1C E5 85 F1 | 	sub	objptr, ##41244
19be0     FF FF 3F FF 
19be4     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
19be8     50 00 00 5F 
19bec     08 E5 05 51 |  if_ne	add	objptr, ##41224
19bf0     F2 28 02 5B |  if_ne	rdlong	local02, objptr
19bf4     50 00 00 5F 
19bf8     08 E5 85 51 |  if_ne	sub	objptr, ##41224
19bfc     FF FF 7F 5F 
19c00     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
19c04     50 00 00 5F 
19c08     28 E5 05 51 |  if_ne	add	objptr, ##41256
19c0c     F2 2A 02 5B |  if_ne	rdlong	local03, objptr
19c10     50 00 00 5F 
19c14     28 E5 85 51 |  if_ne	sub	objptr, ##41256
19c18     B7 2A 0E 52 |  if_ne	cmp	local03, #183 wz
19c1c     50 FF 9F 5D |  if_ne	jmp	#LR__2050
19c20                 | ' if dataheader(8)=token_data then 
19c20     50 00 00 FF 
19c24     28 E5 05 F1 | 	add	objptr, ##41256
19c28     F2 26 02 FB | 	rdlong	local01, objptr
19c2c     50 00 00 FF 
19c30     28 E5 85 F1 | 	sub	objptr, ##41256
19c34     B7 26 0E F2 | 	cmp	local01, #183 wz
19c38     E0 00 90 5D |  if_ne	jmp	#LR__2055
19c3c     50 00 00 FF 
19c40     10 E5 05 F1 | 	add	objptr, ##41232
19c44     F2 26 02 FB | 	rdlong	local01, objptr
19c48     01 00 00 FF 
19c4c     E0 E5 05 F1 | 	add	objptr, ##992
19c50     F2 26 62 FC | 	wrlong	local01, objptr
19c54     01 00 00 FF 
19c58     DC E5 85 F1 | 	sub	objptr, ##988
19c5c     F2 2C 02 FB | 	rdlong	local04, objptr
19c60     01 00 00 FF 
19c64     D4 E5 05 F1 | 	add	objptr, ##980
19c68     F2 2C 62 FC | 	wrlong	local04, objptr
19c6c                 | '  'print "data found at line "; dataheader(0)
19c6c                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
19c6c     00 2E 06 F6 | 	mov	local05, #0
19c70     52 00 00 FF 
19c74     E8 E4 85 F1 | 	sub	objptr, ##42216
19c78                 | LR__2051
19c78     16 2F 52 F2 | 	cmps	local05, local04 wc
19c7c     3C 00 90 3D |  if_ae	jmp	#LR__2052
19c80     52 00 00 FF 
19c84     F0 E4 05 F1 | 	add	objptr, ##42224
19c88     F2 12 02 FB | 	rdlong	arg01, objptr
19c8c     52 00 00 FF 
19c90     F0 E4 85 F1 | 	sub	objptr, ##42224
19c94     17 13 02 F1 | 	add	arg01, local05
19c98     C8 9B B0 FD | 	call	#_pspeek
19c9c     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
19ca0     3C F6 B0 FD | 	call	#__system__Chr_S
19ca4     FD 14 02 F6 | 	mov	arg02, result1
19ca8     18 13 02 F6 | 	mov	arg01, local06
19cac     48 D4 B0 FD | 	call	#__system___string_concat
19cb0     FD 30 02 F6 | 	mov	local06, result1
19cb4     01 2E 06 F1 | 	add	local05, #1
19cb8     BC FF 9F FD | 	jmp	#LR__2051
19cbc                 | LR__2052
19cbc     BB 01 00 FF 
19cc0     41 17 06 F6 | 	mov	arg03, ##@LR__6007
19cc4     01 12 06 F6 | 	mov	arg01, #1
19cc8     18 15 02 F6 | 	mov	arg02, local06
19ccc     94 F9 B0 FD | 	call	#__system__Instr
19cd0     FD 2E 02 F6 | 	mov	local05, result1
19cd4     18 13 02 F6 | 	mov	arg01, local06
19cd8     09 33 02 F6 | 	mov	local07, arg01
19cdc     97 06 48 FB | 	callpa	#(@LR__2054-@LR__2053)>>2,fcache_load_ptr_
19ce0                 | LR__2053
19ce0     19 FB C9 FA | 	rdbyte	result1, local07 wz
19ce4     01 32 06 51 |  if_ne	add	local07, #1
19ce8     F4 FF 9F 5D |  if_ne	jmp	#LR__2053
19cec                 | LR__2054
19cec     09 33 82 F1 | 	sub	local07, arg01
19cf0     19 15 02 F6 | 	mov	arg02, local07
19cf4     17 15 82 F1 | 	sub	arg02, local05
19cf8     04 14 86 F1 | 	sub	arg02, #4
19cfc     18 13 02 F6 | 	mov	arg01, local06
19d00     A0 F4 B0 FD | 	call	#__system__Right_S
19d04     FD 12 02 F6 | 	mov	arg01, result1
19d08     A0 F8 B0 FD | 	call	#__system__RTrim_S
19d0c     FD 12 02 F6 | 	mov	arg01, result1
19d10     D8 F7 B0 FD | 	call	#__system__LTrim_S
19d14     FD 30 02 F6 | 	mov	local06, result1
19d18     0C 00 90 FD | 	jmp	#LR__2056
19d1c                 | LR__2055
19d1c                 | '   return ("") 'todo proper err
19d1c     BB 01 00 FF 
19d20     46 FB 05 F6 | 	mov	result1, ##@LR__6008
19d24     04 00 90 FD | 	jmp	#LR__2057
19d28                 | LR__2056
19d28                 | ' return readline
19d28     18 FB 01 F6 | 	mov	result1, local06
19d2c                 | LR__2057
19d2c     A7 F0 03 F6 | 	mov	ptra, fp
19d30     B2 00 A0 FD | 	call	#popregs_
19d34                 | _read_next_line_ret
19d34     2D 00 64 FD | 	ret
19d38                 | 
19d38                 | ' 
19d38                 | ' sub do_read
19d38                 | _do_read
19d38     11 4A 05 F6 | 	mov	COUNT_, #17
19d3c     A8 00 A0 FD | 	call	#pushregs_
19d40     58 F1 07 F1 | 	add	ptra, #344
19d44     4A 00 00 FF 
19d48     80 E4 05 F1 | 	add	objptr, ##38016
19d4c     F2 FE 01 FB | 	rdlong	result3, objptr
19d50     FF FC 01 F6 | 	mov	result2, result3
19d54     01 FC 65 F0 | 	shl	result2, #1
19d58     FF FC 01 F1 | 	add	result2, result3
19d5c     02 FC 65 F0 | 	shl	result2, #2
19d60     03 00 00 FF 
19d64     04 E4 85 F1 | 	sub	objptr, ##1540
19d68     F2 FC 01 F1 | 	add	result2, objptr
19d6c     FE FC 01 FB | 	rdlong	result2, result2
19d70     08 4E 05 F1 | 	add	fp, #8
19d74     A7 FC 61 FC | 	wrlong	result2, fp
19d78                 | ' 
19d78                 | ' 
19d78                 | ' numpar=compiledline(lineptr_e).result.uresult
19d78                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
19d78     08 4E 85 F1 | 	sub	fp, #8
19d7c     01 FC 15 F2 | 	cmp	result2, #1 wc
19d80     47 00 00 FF 
19d84     7C E4 85 F1 | 	sub	objptr, ##36476
19d88     14 00 90 CD |  if_b	jmp	#LR__2060
19d8c     08 4E 05 F1 | 	add	fp, #8
19d90     A7 FC 01 FB | 	rdlong	result2, fp
19d94     08 4E 85 F1 | 	sub	fp, #8
19d98     41 FC 15 F2 | 	cmp	result2, #65 wc
19d9c     50 00 90 CD |  if_b	jmp	#LR__2061
19da0                 | LR__2060
19da0     00 12 06 F6 | 	mov	arg01, #0
19da4     98 2F B1 FD | 	call	#__system___getiolock_0614
19da8     FD 12 02 F6 | 	mov	arg01, result1
19dac     EC D2 B0 FD | 	call	#__system___lockmem
19db0     BB 01 00 FF 
19db4     47 15 06 F6 | 	mov	arg02, ##@LR__6009
19db8     00 12 06 F6 | 	mov	arg01, #0
19dbc     00 16 06 F6 | 	mov	arg03, #0
19dc0     D0 DF B0 FD | 	call	#__system___basic_print_string
19dc4     00 12 06 F6 | 	mov	arg01, #0
19dc8     74 2F B1 FD | 	call	#__system___getiolock_0614
19dcc     FD 00 68 FC | 	wrlong	#0, result1
19dd0     50 00 00 FF 
19dd4     F0 E4 05 F1 | 	add	objptr, ##41200
19dd8     F2 14 02 FB | 	rdlong	arg02, objptr
19ddc     50 00 00 FF 
19de0     F0 E4 85 F1 | 	sub	objptr, ##41200
19de4     27 12 06 F6 | 	mov	arg01, #39
19de8     00 98 B0 FD | 	call	#_printerror
19dec     D0 0C 90 FD | 	jmp	#LR__2111
19df0                 | LR__2061
19df0     08 4E 05 F1 | 	add	fp, #8
19df4     A7 16 02 FB | 	rdlong	arg03, fp
19df8     01 16 86 F1 | 	sub	arg03, #1
19dfc     28 4F 05 F1 | 	add	fp, #296
19e00     A7 16 62 FC | 	wrlong	arg03, fp
19e04     30 4F 85 F1 | 	sub	fp, #304
19e08                 | ' i=numpar-1
19e08                 | ' if readline="" then readline=read_next_line() ': print readline
19e08     52 00 00 FF 
19e0c     DC E4 05 F1 | 	add	objptr, ##42204
19e10     F2 12 02 FB | 	rdlong	arg01, objptr
19e14     52 00 00 FF 
19e18     DC E4 85 F1 | 	sub	objptr, ##42204
19e1c     BB 01 00 FF 
19e20     51 15 06 F6 | 	mov	arg02, ##@LR__6010
19e24     9C D2 B0 FD | 	call	#__system___string_cmp
19e28     00 FA 0D F2 | 	cmp	result1, #0 wz
19e2c     18 00 90 5D |  if_ne	jmp	#LR__2062
19e30     0C FD BF FD | 	call	#_read_next_line
19e34     52 00 00 FF 
19e38     DC E4 05 F1 | 	add	objptr, ##42204
19e3c     F2 FA 61 FC | 	wrlong	result1, objptr
19e40     52 00 00 FF 
19e44     DC E4 85 F1 | 	sub	objptr, ##42204
19e48                 | LR__2062
19e48                 | ' if readline="" then printerror(55,runheader(0)) :return
19e48     52 00 00 FF 
19e4c     DC E4 05 F1 | 	add	objptr, ##42204
19e50     F2 12 02 FB | 	rdlong	arg01, objptr
19e54     52 00 00 FF 
19e58     DC E4 85 F1 | 	sub	objptr, ##42204
19e5c     BB 01 00 FF 
19e60     52 15 06 F6 | 	mov	arg02, ##@LR__6011
19e64     5C D2 B0 FD | 	call	#__system___string_cmp
19e68     00 FA 0D F2 | 	cmp	result1, #0 wz
19e6c     20 00 90 5D |  if_ne	jmp	#LR__2063
19e70     50 00 00 FF 
19e74     F0 E4 05 F1 | 	add	objptr, ##41200
19e78     F2 14 02 FB | 	rdlong	arg02, objptr
19e7c     50 00 00 FF 
19e80     F0 E4 85 F1 | 	sub	objptr, ##41200
19e84     37 12 06 F6 | 	mov	arg01, #55
19e88     60 97 B0 FD | 	call	#_printerror
19e8c     30 0C 90 FD | 	jmp	#LR__2111
19e90                 | LR__2063
19e90     34 4F 05 F1 | 	add	fp, #308
19e94     A7 00 68 FC | 	wrlong	#0, fp
19e98     2C 4F 85 F1 | 	sub	fp, #300
19e9c     A7 26 02 FB | 	rdlong	local01, fp
19ea0     01 26 86 F1 | 	sub	local01, #1
19ea4     28 4F 05 F1 | 	add	fp, #296
19ea8     A7 26 62 FC | 	wrlong	local01, fp
19eac     30 4F 85 F1 | 	sub	fp, #304
19eb0                 | ' j=0
19eb0                 | ' i=numpar-1
19eb0                 | ' do
19eb0                 | LR__2064
19eb0                 | '   do
19eb0                 | LR__2065
19eb0     52 00 00 FF 
19eb4     DC E4 05 F1 | 	add	objptr, ##42204
19eb8     F2 14 02 FB | 	rdlong	arg02, objptr
19ebc     52 00 00 FF 
19ec0     DC E4 85 F1 | 	sub	objptr, ##42204
19ec4     BB 01 00 FF 
19ec8     53 17 06 F6 | 	mov	arg03, ##@LR__6012
19ecc     01 12 06 F6 | 	mov	arg01, #1
19ed0     90 F7 B0 FD | 	call	#__system__Instr
19ed4     0C 4E 05 F1 | 	add	fp, #12
19ed8     A7 FA 61 FC | 	wrlong	result1, fp
19edc                 | '     comma=instr(1,readline,"'") : if comma>0 then readline=left$(readline,comma-1) ' allows comments in data
19edc     0C 4E 85 F1 | 	sub	fp, #12
19ee0     01 FA 15 F2 | 	cmp	result1, #1 wc
19ee4     3C 00 90 CD |  if_b	jmp	#LR__2066
19ee8     52 00 00 FF 
19eec     DC E4 05 F1 | 	add	objptr, ##42204
19ef0     F2 12 02 FB | 	rdlong	arg01, objptr
19ef4     52 00 00 FF 
19ef8     DC E4 85 F1 | 	sub	objptr, ##42204
19efc     0C 4E 05 F1 | 	add	fp, #12
19f00     A7 14 02 FB | 	rdlong	arg02, fp
19f04     0C 4E 85 F1 | 	sub	fp, #12
19f08     01 14 86 F1 | 	sub	arg02, #1
19f0c     0C F2 B0 FD | 	call	#__system__Left_S
19f10     52 00 00 FF 
19f14     DC E4 05 F1 | 	add	objptr, ##42204
19f18     F2 FA 61 FC | 	wrlong	result1, objptr
19f1c     52 00 00 FF 
19f20     DC E4 85 F1 | 	sub	objptr, ##42204
19f24                 | LR__2066
19f24     52 00 00 FF 
19f28     DC E4 05 F1 | 	add	objptr, ##42204
19f2c     F2 14 02 FB | 	rdlong	arg02, objptr
19f30     52 00 00 FF 
19f34     DC E4 85 F1 | 	sub	objptr, ##42204
19f38     BB 01 00 FF 
19f3c     55 17 06 F6 | 	mov	arg03, ##@LR__6013
19f40     01 12 06 F6 | 	mov	arg01, #1
19f44     1C F7 B0 FD | 	call	#__system__Instr
19f48     0C 4E 05 F1 | 	add	fp, #12
19f4c     A7 FA 61 FC | 	wrlong	result1, fp
19f50                 | '     comma=instr(1,readline,",")  
19f50                 | '       if comma>0  then 
19f50     0C 4E 85 F1 | 	sub	fp, #12
19f54     01 FA 15 F2 | 	cmp	result1, #1 wc
19f58     98 00 90 CD |  if_b	jmp	#LR__2069
19f5c     52 00 00 FF 
19f60     DC E4 05 F1 | 	add	objptr, ##42204
19f64     F2 12 02 FB | 	rdlong	arg01, objptr
19f68     52 00 00 FF 
19f6c     DC E4 85 F1 | 	sub	objptr, ##42204
19f70     0C 4E 05 F1 | 	add	fp, #12
19f74     A7 14 02 FB | 	rdlong	arg02, fp
19f78     0C 4E 85 F1 | 	sub	fp, #12
19f7c     01 14 86 F1 | 	sub	arg02, #1
19f80     98 F1 B0 FD | 	call	#__system__Left_S
19f84     04 4E 05 F1 | 	add	fp, #4
19f88     A7 FA 61 FC | 	wrlong	result1, fp
19f8c     04 4E 85 F1 | 	sub	fp, #4
19f90     52 00 00 FF 
19f94     DC E4 05 F1 | 	add	objptr, ##42204
19f98     F2 12 02 FB | 	rdlong	arg01, objptr
19f9c     09 27 02 F6 | 	mov	local01, arg01
19fa0     52 00 00 FF 
19fa4     DC E4 85 F1 | 	sub	objptr, ##42204
19fa8     09 29 02 F6 | 	mov	local02, arg01
19fac     97 06 48 FB | 	callpa	#(@LR__2068-@LR__2067)>>2,fcache_load_ptr_
19fb0                 | LR__2067
19fb0     14 FB C9 FA | 	rdbyte	result1, local02 wz
19fb4     01 28 06 51 |  if_ne	add	local02, #1
19fb8     F4 FF 9F 5D |  if_ne	jmp	#LR__2067
19fbc                 | LR__2068
19fbc     09 29 82 F1 | 	sub	local02, arg01
19fc0     14 15 02 F6 | 	mov	arg02, local02
19fc4     0C 4E 05 F1 | 	add	fp, #12
19fc8     A7 16 02 FB | 	rdlong	arg03, fp
19fcc     0C 4E 85 F1 | 	sub	fp, #12
19fd0     0B 15 82 F1 | 	sub	arg02, arg03
19fd4     13 13 02 F6 | 	mov	arg01, local01
19fd8     C8 F1 B0 FD | 	call	#__system__Right_S
19fdc     52 00 00 FF 
19fe0     DC E4 05 F1 | 	add	objptr, ##42204
19fe4     F2 FA 61 FC | 	wrlong	result1, objptr
19fe8     52 00 00 FF 
19fec     DC E4 85 F1 | 	sub	objptr, ##42204
19ff0     48 00 90 FD | 	jmp	#LR__2070
19ff4                 | LR__2069
19ff4     52 00 00 FF 
19ff8     DC E4 05 F1 | 	add	objptr, ##42204
19ffc     F2 12 02 FB | 	rdlong	arg01, objptr
1a000     52 00 00 FF 
1a004     DC E4 85 F1 | 	sub	objptr, ##42204
1a008     A0 F5 B0 FD | 	call	#__system__RTrim_S
1a00c     FD 12 02 F6 | 	mov	arg01, result1
1a010     D8 F4 B0 FD | 	call	#__system__LTrim_S
1a014     04 4E 05 F1 | 	add	fp, #4
1a018     A7 FA 61 FC | 	wrlong	result1, fp
1a01c     04 4E 85 F1 | 	sub	fp, #4
1a020     BB 01 00 FF 
1a024     57 27 06 F6 | 	mov	local01, ##@LR__6014
1a028     52 00 00 FF 
1a02c     DC E4 05 F1 | 	add	objptr, ##42204
1a030     F2 26 62 FC | 	wrlong	local01, objptr
1a034     52 00 00 FF 
1a038     DC E4 85 F1 | 	sub	objptr, ##42204
1a03c                 | LR__2070
1a03c                 | '      
1a03c                 | '      if part$<>"" then j=j+1
1a03c     04 4E 05 F1 | 	add	fp, #4
1a040     A7 12 02 FB | 	rdlong	arg01, fp
1a044     04 4E 85 F1 | 	sub	fp, #4
1a048     BB 01 00 FF 
1a04c     58 15 06 F6 | 	mov	arg02, ##@LR__6015
1a050     70 D0 B0 FD | 	call	#__system___string_cmp
1a054     00 FA 0D F2 | 	cmp	result1, #0 wz
1a058     34 4F 05 51 |  if_ne	add	fp, #308
1a05c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1a060     01 26 06 51 |  if_ne	add	local01, #1
1a064     A7 26 62 5C |  if_ne	wrlong	local01, fp
1a068     34 4F 85 51 |  if_ne	sub	fp, #308
1a06c     30 4F 05 F1 | 	add	fp, #304
1a070     A7 26 02 FB | 	rdlong	local01, fp
1a074     02 26 66 F0 | 	shl	local01, #2
1a078     04 4F 85 F1 | 	sub	fp, #260
1a07c     A7 26 02 F1 | 	add	local01, fp
1a080     28 4E 85 F1 | 	sub	fp, #40
1a084     A7 FA 01 FB | 	rdlong	result1, fp
1a088     13 FB 61 FC | 	wrlong	result1, local01
1a08c     2C 4F 05 F1 | 	add	fp, #300
1a090     A7 26 02 FB | 	rdlong	local01, fp
1a094     01 26 86 F1 | 	sub	local01, #1
1a098     A7 26 62 FC | 	wrlong	local01, fp
1a09c     30 4F 85 F1 | 	sub	fp, #304
1a0a0                 | '      args(i)=part$  
1a0a0                 | '      i=i-1
1a0a0                 | '     if readline="" then readline=read_next_line() 
1a0a0     52 00 00 FF 
1a0a4     DC E4 05 F1 | 	add	objptr, ##42204
1a0a8     F2 12 02 FB | 	rdlong	arg01, objptr
1a0ac     52 00 00 FF 
1a0b0     DC E4 85 F1 | 	sub	objptr, ##42204
1a0b4     BB 01 00 FF 
1a0b8     59 15 06 F6 | 	mov	arg02, ##@LR__6016
1a0bc     04 D0 B0 FD | 	call	#__system___string_cmp
1a0c0     00 FA 0D F2 | 	cmp	result1, #0 wz
1a0c4     18 00 90 5D |  if_ne	jmp	#LR__2071
1a0c8     74 FA BF FD | 	call	#_read_next_line
1a0cc     52 00 00 FF 
1a0d0     DC E4 05 F1 | 	add	objptr, ##42204
1a0d4     F2 FA 61 FC | 	wrlong	result1, objptr
1a0d8     52 00 00 FF 
1a0dc     DC E4 85 F1 | 	sub	objptr, ##42204
1a0e0                 | LR__2071
1a0e0     30 4F 05 F1 | 	add	fp, #304
1a0e4     A7 26 02 FB | 	rdlong	local01, fp
1a0e8     30 4F 85 F1 | 	sub	fp, #304
1a0ec     00 26 56 F2 | 	cmps	local01, #0 wc
1a0f0     28 00 90 CD |  if_b	jmp	#LR__2072
1a0f4     52 00 00 FF 
1a0f8     DC E4 05 F1 | 	add	objptr, ##42204
1a0fc     F2 12 02 FB | 	rdlong	arg01, objptr
1a100     52 00 00 FF 
1a104     DC E4 85 F1 | 	sub	objptr, ##42204
1a108     BB 01 00 FF 
1a10c     5A 15 06 F6 | 	mov	arg02, ##@LR__6017
1a110     B0 CF B0 FD | 	call	#__system___string_cmp
1a114     00 FA 0D F2 | 	cmp	result1, #0 wz
1a118     94 FD 9F 5D |  if_ne	jmp	#LR__2065
1a11c                 | LR__2072
1a11c     30 4F 05 F1 | 	add	fp, #304
1a120     A7 26 02 FB | 	rdlong	local01, fp
1a124     30 4F 85 F1 | 	sub	fp, #304
1a128     00 26 56 F2 | 	cmps	local01, #0 wc
1a12c     80 FD 9F 3D |  if_ae	jmp	#LR__2064
1a130                 | ' if j<numpar then printerror(55,runheader(0))
1a130     34 4F 05 F1 | 	add	fp, #308
1a134     A7 26 02 FB | 	rdlong	local01, fp
1a138     2C 4F 85 F1 | 	sub	fp, #300
1a13c     A7 16 02 FB | 	rdlong	arg03, fp
1a140     08 4E 85 F1 | 	sub	fp, #8
1a144     0B 27 52 F2 | 	cmps	local01, arg03 wc
1a148     50 00 00 CF 
1a14c     F0 E4 05 C1 |  if_b	add	objptr, ##41200
1a150     F2 14 02 CB |  if_b	rdlong	arg02, objptr
1a154     50 00 00 CF 
1a158     F0 E4 85 C1 |  if_b	sub	objptr, ##41200
1a15c     37 12 06 C6 |  if_b	mov	arg01, #55
1a160     88 94 B0 CD |  if_b	call	#_printerror
1a164                 | ' 
1a164                 | ' for i=0 to numpar-1
1a164     30 4F 05 F1 | 	add	fp, #304
1a168     A7 00 68 FC | 	wrlong	#0, fp
1a16c     28 4F 85 F1 | 	sub	fp, #296
1a170     A7 2A 02 FB | 	rdlong	local03, fp
1a174     08 4E 85 F1 | 	sub	fp, #8
1a178                 | LR__2073
1a178     30 4F 05 F1 | 	add	fp, #304
1a17c     A7 2C 02 FB | 	rdlong	local04, fp
1a180     30 4F 85 F1 | 	sub	fp, #304
1a184     16 27 02 F6 | 	mov	local01, local04
1a188     15 27 52 F2 | 	cmps	local01, local03 wc
1a18c     30 09 90 3D |  if_ae	jmp	#LR__2110
1a190                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
1a190     30 4F 05 F1 | 	add	fp, #304
1a194     A7 16 02 FB | 	rdlong	arg03, fp
1a198     02 16 66 F0 | 	shl	arg03, #2
1a19c     04 4F 85 F1 | 	sub	fp, #260
1a1a0     A7 16 02 F1 | 	add	arg03, fp
1a1a4     0B 13 02 FB | 	rdlong	arg01, arg03
1a1a8     2C 4E 85 F1 | 	sub	fp, #44
1a1ac     C0 C7 BE FD | 	call	#_isnum
1a1b0     FD 2E 02 F6 | 	mov	local05, result1
1a1b4     30 4F 05 F1 | 	add	fp, #304
1a1b8     A7 16 02 FB | 	rdlong	arg03, fp
1a1bc     02 16 66 F0 | 	shl	arg03, #2
1a1c0     04 4F 85 F1 | 	sub	fp, #260
1a1c4     A7 30 02 F6 | 	mov	local06, fp
1a1c8     A7 16 02 F1 | 	add	arg03, fp
1a1cc     0B 13 02 FB | 	rdlong	arg01, arg03
1a1d0     2C 4E 85 F1 | 	sub	fp, #44
1a1d4     84 CB BE FD | 	call	#_isint
1a1d8     FD 2E 2A F5 | 	andn	local05, result1 wz
1a1dc     52 00 00 5F 
1a1e0     10 E5 05 51 |  if_ne	add	objptr, ##42256
1a1e4     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
1a1e8     52 00 00 5F 
1a1ec     10 E5 85 51 |  if_ne	sub	objptr, ##42256
1a1f0                 | '   if isint(args(i)) then r=result_int 
1a1f0     30 4F 05 F1 | 	add	fp, #304
1a1f4     A7 2E 02 FB | 	rdlong	local05, fp
1a1f8     02 2E 66 F0 | 	shl	local05, #2
1a1fc     04 4F 85 F1 | 	sub	fp, #260
1a200     A7 2E 02 F1 | 	add	local05, fp
1a204     17 13 02 FB | 	rdlong	arg01, local05
1a208     2C 4E 85 F1 | 	sub	fp, #44
1a20c     4C CB BE FD | 	call	#_isint
1a210     00 FA 0D F2 | 	cmp	result1, #0 wz
1a214     52 00 00 5F 
1a218     10 E5 05 51 |  if_ne	add	objptr, ##42256
1a21c     F2 38 68 5C |  if_ne	wrlong	#28, objptr
1a220     52 00 00 5F 
1a224     10 E5 85 51 |  if_ne	sub	objptr, ##42256
1a228                 | '   if isdec(args(i)) then r=result_uint 
1a228     30 4F 05 F1 | 	add	fp, #304
1a22c     A7 2E 02 FB | 	rdlong	local05, fp
1a230     02 2E 66 F0 | 	shl	local05, #2
1a234     04 4F 85 F1 | 	sub	fp, #260
1a238     A7 2E 02 F1 | 	add	local05, fp
1a23c     17 13 02 FB | 	rdlong	arg01, local05
1a240     2C 4E 85 F1 | 	sub	fp, #44
1a244     B8 CD BE FD | 	call	#_isdec
1a248     00 FA 0D F2 | 	cmp	result1, #0 wz
1a24c     52 00 00 5F 
1a250     10 E5 05 51 |  if_ne	add	objptr, ##42256
1a254     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
1a258     52 00 00 5F 
1a25c     10 E5 85 51 |  if_ne	sub	objptr, ##42256
1a260                 | '   if not isnum(args(i)) then 
1a260     30 4F 05 F1 | 	add	fp, #304
1a264     A7 2E 02 FB | 	rdlong	local05, fp
1a268     02 2E 66 F0 | 	shl	local05, #2
1a26c     04 4F 85 F1 | 	sub	fp, #260
1a270     A7 2E 02 F1 | 	add	local05, fp
1a274     17 13 02 FB | 	rdlong	arg01, local05
1a278     2C 4E 85 F1 | 	sub	fp, #44
1a27c     F0 C6 BE FD | 	call	#_isnum
1a280     FD 2E 22 F6 | 	not	local05, result1
1a284     00 2E 0E F2 | 	cmp	local05, #0 wz
1a288     4C 01 90 AD |  if_e	jmp	#LR__2078
1a28c     52 00 00 FF 
1a290     10 E5 05 F1 | 	add	objptr, ##42256
1a294     F2 56 68 FC | 	wrlong	#43, objptr
1a298     52 00 00 FF 
1a29c     10 E5 85 F1 | 	sub	objptr, ##42256
1a2a0     30 4F 05 F1 | 	add	fp, #304
1a2a4     A7 16 02 FB | 	rdlong	arg03, fp
1a2a8     02 16 66 F0 | 	shl	arg03, #2
1a2ac     04 4F 85 F1 | 	sub	fp, #260
1a2b0     A7 16 02 F1 | 	add	arg03, fp
1a2b4     0B 13 02 FB | 	rdlong	arg01, arg03
1a2b8     2C 4E 85 F1 | 	sub	fp, #44
1a2bc     09 29 02 F6 | 	mov	local02, arg01
1a2c0     97 06 48 FB | 	callpa	#(@LR__2075-@LR__2074)>>2,fcache_load_ptr_
1a2c4                 | LR__2074
1a2c4     14 FB C9 FA | 	rdbyte	result1, local02 wz
1a2c8     01 28 06 51 |  if_ne	add	local02, #1
1a2cc     F4 FF 9F 5D |  if_ne	jmp	#LR__2074
1a2d0                 | LR__2075
1a2d0     09 29 82 F1 | 	sub	local02, arg01
1a2d4     14 FB 01 F6 | 	mov	result1, local02
1a2d8     38 4F 05 F1 | 	add	fp, #312
1a2dc     A7 FA 61 FC | 	wrlong	result1, fp
1a2e0     52 00 00 FF 
1a2e4     98 E4 05 F1 | 	add	objptr, ##42136
1a2e8     F2 12 02 FB | 	rdlong	arg01, objptr
1a2ec     FD 12 82 F1 | 	sub	arg01, result1
1a2f0     04 12 86 F1 | 	sub	arg01, #4
1a2f4     03 12 26 F5 | 	andn	arg01, #3
1a2f8     F2 12 62 FC | 	wrlong	arg01, objptr
1a2fc     52 00 00 FF 
1a300     98 E4 85 F1 | 	sub	objptr, ##42136
1a304     A7 14 02 FB | 	rdlong	arg02, fp
1a308     38 4F 85 F1 | 	sub	fp, #312
1a30c     7C 94 B0 FD | 	call	#_pslpoke
1a310                 | '     pslpoke memtop,l
1a310                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
1a310     34 4F 05 F1 | 	add	fp, #308
1a314     A7 02 68 FC | 	wrlong	#1, fp
1a318     04 4E 05 F1 | 	add	fp, #4
1a31c     A7 32 02 FB | 	rdlong	local07, fp
1a320     38 4F 85 F1 | 	sub	fp, #312
1a324     01 32 06 F1 | 	add	local07, #1
1a328                 | LR__2076
1a328     34 4F 05 F1 | 	add	fp, #308
1a32c     A7 2E 02 FB | 	rdlong	local05, fp
1a330     34 4F 85 F1 | 	sub	fp, #308
1a334     19 2F 52 F2 | 	cmps	local05, local07 wc
1a338     7C 00 90 3D |  if_ae	jmp	#LR__2077
1a33c     52 00 00 FF 
1a340     98 E4 05 F1 | 	add	objptr, ##42136
1a344     F2 30 02 FB | 	rdlong	local06, objptr
1a348     52 00 00 FF 
1a34c     98 E4 85 F1 | 	sub	objptr, ##42136
1a350     03 30 06 F1 | 	add	local06, #3
1a354     34 4F 05 F1 | 	add	fp, #308
1a358     A7 34 02 FB | 	rdlong	local08, fp
1a35c     1A 31 02 F1 | 	add	local06, local08
1a360     04 4E 85 F1 | 	sub	fp, #4
1a364     A7 36 02 FB | 	rdlong	local09, fp
1a368     02 36 66 F0 | 	shl	local09, #2
1a36c     04 4F 85 F1 | 	sub	fp, #260
1a370     A7 38 02 F6 | 	mov	local10, fp
1a374     A7 36 02 F1 | 	add	local09, fp
1a378     1B 13 02 FB | 	rdlong	arg01, local09
1a37c     2C 4E 85 F1 | 	sub	fp, #44
1a380     01 3A 06 F6 | 	mov	local11, #1
1a384     1A 15 02 F6 | 	mov	arg02, local08
1a388     01 16 06 F6 | 	mov	arg03, #1
1a38c     A4 EE B0 FD | 	call	#__system__Mid_S
1a390     FD 14 C2 FA | 	rdbyte	arg02, result1
1a394     18 13 02 F6 | 	mov	arg01, local06
1a398     80 94 B0 FD | 	call	#_pspoke
1a39c     34 4F 05 F1 | 	add	fp, #308
1a3a0     A7 30 02 FB | 	rdlong	local06, fp
1a3a4     18 2F 02 F6 | 	mov	local05, local06
1a3a8     01 2E 06 F1 | 	add	local05, #1
1a3ac     A7 2E 62 FC | 	wrlong	local05, fp
1a3b0     34 4F 85 F1 | 	sub	fp, #308
1a3b4     70 FF 9F FD | 	jmp	#LR__2076
1a3b8                 | LR__2077
1a3b8     52 00 00 FF 
1a3bc     98 E4 05 F1 | 	add	objptr, ##42136
1a3c0     F2 2E 02 FB | 	rdlong	local05, objptr
1a3c4     52 00 00 FF 
1a3c8     98 E4 85 F1 | 	sub	objptr, ##42136
1a3cc     10 4E 05 F1 | 	add	fp, #16
1a3d0     A7 2E 62 FC | 	wrlong	local05, fp
1a3d4     10 4E 85 F1 | 	sub	fp, #16
1a3d8                 | LR__2078
1a3d8     2C 33 BF FD | 	call	#_pop
1a3dc     1C 4E 05 F1 | 	add	fp, #28
1a3e0     A7 FA 61 FC | 	wrlong	result1, fp
1a3e4     04 4E 05 F1 | 	add	fp, #4
1a3e8     A7 FC 61 FC | 	wrlong	result2, fp
1a3ec     04 4E 05 F1 | 	add	fp, #4
1a3f0     A7 FE 61 FC | 	wrlong	result3, fp
1a3f4                 | '   t1=pop() 
1a3f4                 | '   if i>=numpar-j then
1a3f4     1C 4E 85 F1 | 	sub	fp, #28
1a3f8     A7 2E 02 FB | 	rdlong	local05, fp
1a3fc     17 3D 02 F6 | 	mov	local12, local05
1a400     2C 4F 05 F1 | 	add	fp, #300
1a404     A7 3E 02 FB | 	rdlong	local13, fp
1a408     1F 41 02 F6 | 	mov	local14, local13
1a40c     20 3D 82 F1 | 	sub	local12, local14
1a410     04 4E 85 F1 | 	sub	fp, #4
1a414     A7 42 02 FB | 	rdlong	local15, fp
1a418     30 4F 85 F1 | 	sub	fp, #304
1a41c     21 45 02 F6 | 	mov	local16, local15
1a420     1E 45 52 F2 | 	cmps	local16, local12 wc
1a424     80 06 90 CD |  if_b	jmp	#LR__2109
1a428     20 4E 05 F1 | 	add	fp, #32
1a42c     A7 3C 02 FB | 	rdlong	local12, fp
1a430     0C 4E 85 F1 | 	sub	fp, #12
1a434     A7 3C 62 FC | 	wrlong	local12, fp
1a438                 | '     vartype=t1.result.twowords(1)
1a438                 | '     select case vartype
1a438     14 4E 85 F1 | 	sub	fp, #20
1a43c     1E 47 0A F6 | 	mov	local17, local12 wz
1a440     64 00 90 AD |  if_e	jmp	#LR__2079
1a444     00 47 0E F2 | 	cmp	local17, #256 wz
1a448     6C 00 90 AD |  if_e	jmp	#LR__2080
1a44c     01 47 0E F2 | 	cmp	local17, #257 wz
1a450     74 00 90 AD |  if_e	jmp	#LR__2081
1a454     02 47 0E F2 | 	cmp	local17, #258 wz
1a458     7C 00 90 AD |  if_e	jmp	#LR__2082
1a45c     03 47 0E F2 | 	cmp	local17, #259 wz
1a460     84 00 90 AD |  if_e	jmp	#LR__2083
1a464     04 47 0E F2 | 	cmp	local17, #260 wz
1a468     8C 00 90 AD |  if_e	jmp	#LR__2084
1a46c     05 47 0E F2 | 	cmp	local17, #261 wz
1a470     94 00 90 AD |  if_e	jmp	#LR__2085
1a474     06 47 0E F2 | 	cmp	local17, #262 wz
1a478     9C 00 90 AD |  if_e	jmp	#LR__2086
1a47c     07 47 0E F2 | 	cmp	local17, #263 wz
1a480     A4 00 90 AD |  if_e	jmp	#LR__2087
1a484     08 47 0E F2 | 	cmp	local17, #264 wz
1a488     AC 00 90 AD |  if_e	jmp	#LR__2088
1a48c     09 47 0E F2 | 	cmp	local17, #265 wz
1a490     B4 00 90 AD |  if_e	jmp	#LR__2089
1a494     0A 47 0E F2 | 	cmp	local17, #266 wz
1a498     BC 00 90 AD |  if_e	jmp	#LR__2090
1a49c     0B 47 0E F2 | 	cmp	local17, #267 wz
1a4a0     C4 00 90 AD |  if_e	jmp	#LR__2091
1a4a4     D0 00 90 FD | 	jmp	#LR__2092
1a4a8                 | LR__2079
1a4a8     18 4E 05 F1 | 	add	fp, #24
1a4ac     A7 18 68 FC | 	wrlong	#12, fp
1a4b0     18 4E 85 F1 | 	sub	fp, #24
1a4b4     CC 00 90 FD | 	jmp	#LR__2093
1a4b8                 | LR__2080
1a4b8     18 4E 05 F1 | 	add	fp, #24
1a4bc     A7 18 68 FC | 	wrlong	#12, fp
1a4c0     18 4E 85 F1 | 	sub	fp, #24
1a4c4     BC 00 90 FD | 	jmp	#LR__2093
1a4c8                 | LR__2081
1a4c8     18 4E 05 F1 | 	add	fp, #24
1a4cc     A7 02 68 FC | 	wrlong	#1, fp
1a4d0     18 4E 85 F1 | 	sub	fp, #24
1a4d4     AC 00 90 FD | 	jmp	#LR__2093
1a4d8                 | LR__2082
1a4d8     18 4E 05 F1 | 	add	fp, #24
1a4dc     A7 02 68 FC | 	wrlong	#1, fp
1a4e0     18 4E 85 F1 | 	sub	fp, #24
1a4e4     9C 00 90 FD | 	jmp	#LR__2093
1a4e8                 | LR__2083
1a4e8     18 4E 05 F1 | 	add	fp, #24
1a4ec     A7 04 68 FC | 	wrlong	#2, fp
1a4f0     18 4E 85 F1 | 	sub	fp, #24
1a4f4     8C 00 90 FD | 	jmp	#LR__2093
1a4f8                 | LR__2084
1a4f8     18 4E 05 F1 | 	add	fp, #24
1a4fc     A7 04 68 FC | 	wrlong	#2, fp
1a500     18 4E 85 F1 | 	sub	fp, #24
1a504     7C 00 90 FD | 	jmp	#LR__2093
1a508                 | LR__2085
1a508     18 4E 05 F1 | 	add	fp, #24
1a50c     A7 08 68 FC | 	wrlong	#4, fp
1a510     18 4E 85 F1 | 	sub	fp, #24
1a514     6C 00 90 FD | 	jmp	#LR__2093
1a518                 | LR__2086
1a518     18 4E 05 F1 | 	add	fp, #24
1a51c     A7 08 68 FC | 	wrlong	#4, fp
1a520     18 4E 85 F1 | 	sub	fp, #24
1a524     5C 00 90 FD | 	jmp	#LR__2093
1a528                 | LR__2087
1a528     18 4E 05 F1 | 	add	fp, #24
1a52c     A7 10 68 FC | 	wrlong	#8, fp
1a530     18 4E 85 F1 | 	sub	fp, #24
1a534     4C 00 90 FD | 	jmp	#LR__2093
1a538                 | LR__2088
1a538     18 4E 05 F1 | 	add	fp, #24
1a53c     A7 10 68 FC | 	wrlong	#8, fp
1a540     18 4E 85 F1 | 	sub	fp, #24
1a544     3C 00 90 FD | 	jmp	#LR__2093
1a548                 | LR__2089
1a548     18 4E 05 F1 | 	add	fp, #24
1a54c     A7 0C 68 FC | 	wrlong	#6, fp
1a550     18 4E 85 F1 | 	sub	fp, #24
1a554     2C 00 90 FD | 	jmp	#LR__2093
1a558                 | LR__2090
1a558     18 4E 05 F1 | 	add	fp, #24
1a55c     A7 10 68 FC | 	wrlong	#8, fp
1a560     18 4E 85 F1 | 	sub	fp, #24
1a564     1C 00 90 FD | 	jmp	#LR__2093
1a568                 | LR__2091
1a568     18 4E 05 F1 | 	add	fp, #24
1a56c     A7 0A 68 FC | 	wrlong	#5, fp
1a570     18 4E 85 F1 | 	sub	fp, #24
1a574     0C 00 90 FD | 	jmp	#LR__2093
1a578                 | LR__2092
1a578     18 4E 05 F1 | 	add	fp, #24
1a57c     A7 18 68 FC | 	wrlong	#12, fp
1a580     18 4E 85 F1 | 	sub	fp, #24
1a584                 | LR__2093
1a584                 | '     if esize=12 andalso t1.result.uresult<$80000 then
1a584     18 4E 05 F1 | 	add	fp, #24
1a588     A7 3C 02 FB | 	rdlong	local12, fp
1a58c     18 4E 85 F1 | 	sub	fp, #24
1a590     0C 3C 0E F2 | 	cmp	local12, #12 wz
1a594     74 01 90 5D |  if_ne	jmp	#LR__2098
1a598     1C 4E 05 F1 | 	add	fp, #28
1a59c     A7 3E 02 FB | 	rdlong	local13, fp
1a5a0     1C 4E 85 F1 | 	sub	fp, #28
1a5a4     00 04 00 FF 
1a5a8     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1a5ac     5C 01 90 3D |  if_ae	jmp	#LR__2098
1a5b0                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
1a5b0     52 00 00 FF 
1a5b4     10 E5 05 F1 | 	add	objptr, ##42256
1a5b8     F2 3C 02 FB | 	rdlong	local12, objptr
1a5bc     52 00 00 FF 
1a5c0     10 E5 85 F1 | 	sub	objptr, ##42256
1a5c4     1C 3C 0E F2 | 	cmp	local12, #28 wz
1a5c8     38 00 90 5D |  if_ne	jmp	#LR__2094
1a5cc     1C 4E 05 F1 | 	add	fp, #28
1a5d0     A7 3C 02 FB | 	rdlong	local12, fp
1a5d4     14 4F 05 F1 | 	add	fp, #276
1a5d8     A7 3E 02 FB | 	rdlong	local13, fp
1a5dc     1F 45 02 F6 | 	mov	local16, local13
1a5e0     02 44 66 F0 | 	shl	local16, #2
1a5e4     04 4F 85 F1 | 	sub	fp, #260
1a5e8     A7 42 02 F6 | 	mov	local15, fp
1a5ec     A7 44 02 F1 | 	add	local16, fp
1a5f0     22 13 02 FB | 	rdlong	arg01, local16
1a5f4     00 14 06 F6 | 	mov	arg02, #0
1a5f8     2C 4E 85 F1 | 	sub	fp, #44
1a5fc     90 FF B0 FD | 	call	#__system____builtin_atoi
1a600     1E FB 61 FC | 	wrlong	result1, local12
1a604                 | LR__2094
1a604                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
1a604     52 00 00 FF 
1a608     10 E5 05 F1 | 	add	objptr, ##42256
1a60c     F2 3C 02 FB | 	rdlong	local12, objptr
1a610     52 00 00 FF 
1a614     10 E5 85 F1 | 	sub	objptr, ##42256
1a618     1D 3C 0E F2 | 	cmp	local12, #29 wz
1a61c     38 00 90 5D |  if_ne	jmp	#LR__2095
1a620     1C 4E 05 F1 | 	add	fp, #28
1a624     A7 3C 02 FB | 	rdlong	local12, fp
1a628     14 4F 05 F1 | 	add	fp, #276
1a62c     A7 3E 02 FB | 	rdlong	local13, fp
1a630     1F 45 02 F6 | 	mov	local16, local13
1a634     02 44 66 F0 | 	shl	local16, #2
1a638     04 4F 85 F1 | 	sub	fp, #260
1a63c     A7 42 02 F6 | 	mov	local15, fp
1a640     A7 44 02 F1 | 	add	local16, fp
1a644     22 13 02 FB | 	rdlong	arg01, local16
1a648     00 14 06 F6 | 	mov	arg02, #0
1a64c     2C 4E 85 F1 | 	sub	fp, #44
1a650     3C FF B0 FD | 	call	#__system____builtin_atoi
1a654     1E FB 61 FC | 	wrlong	result1, local12
1a658                 | LR__2095
1a658                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
1a658     52 00 00 FF 
1a65c     10 E5 05 F1 | 	add	objptr, ##42256
1a660     F2 3C 02 FB | 	rdlong	local12, objptr
1a664     52 00 00 FF 
1a668     10 E5 85 F1 | 	sub	objptr, ##42256
1a66c     1E 3C 0E F2 | 	cmp	local12, #30 wz
1a670     3C 00 90 5D |  if_ne	jmp	#LR__2096
1a674     30 4F 05 F1 | 	add	fp, #304
1a678     A7 3E 02 FB | 	rdlong	local13, fp
1a67c     02 3E 66 F0 | 	shl	local13, #2
1a680     04 4F 85 F1 | 	sub	fp, #260
1a684     A7 44 02 F6 | 	mov	local16, fp
1a688     A7 3E 02 F1 | 	add	local13, fp
1a68c     1F 13 02 FB | 	rdlong	arg01, local13
1a690     2C 4E 85 F1 | 	sub	fp, #44
1a694     8C 00 B1 FD | 	call	#__system____builtin_atof
1a698     28 4E 05 F1 | 	add	fp, #40
1a69c     A7 FA 61 FC | 	wrlong	result1, fp
1a6a0     0C 4E 85 F1 | 	sub	fp, #12
1a6a4     A7 3C 02 FB | 	rdlong	local12, fp
1a6a8     1C 4E 85 F1 | 	sub	fp, #28
1a6ac     1E FB 61 FC | 	wrlong	result1, local12
1a6b0                 | LR__2096
1a6b0                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
1a6b0     52 00 00 FF 
1a6b4     10 E5 05 F1 | 	add	objptr, ##42256
1a6b8     F2 3C 02 FB | 	rdlong	local12, objptr
1a6bc     52 00 00 FF 
1a6c0     10 E5 85 F1 | 	sub	objptr, ##42256
1a6c4     2B 3C 0E F2 | 	cmp	local12, #43 wz
1a6c8     18 00 90 5D |  if_ne	jmp	#LR__2097
1a6cc     1C 4E 05 F1 | 	add	fp, #28
1a6d0     A7 12 02 FB | 	rdlong	arg01, fp
1a6d4     0C 4E 85 F1 | 	sub	fp, #12
1a6d8     A7 14 02 FB | 	rdlong	arg02, fp
1a6dc     10 4E 85 F1 | 	sub	fp, #16
1a6e0     09 15 62 FC | 	wrlong	arg02, arg01
1a6e4                 | LR__2097
1a6e4     1C 4E 05 F1 | 	add	fp, #28
1a6e8     A7 12 02 FB | 	rdlong	arg01, fp
1a6ec     1C 4E 85 F1 | 	sub	fp, #28
1a6f0     08 12 06 F1 | 	add	arg01, #8
1a6f4     52 00 00 FF 
1a6f8     10 E5 05 F1 | 	add	objptr, ##42256
1a6fc     F2 14 02 FB | 	rdlong	arg02, objptr
1a700     52 00 00 FF 
1a704     10 E5 85 F1 | 	sub	objptr, ##42256
1a708     09 15 62 FC | 	wrlong	arg02, arg01
1a70c                 | LR__2098
1a70c                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
1a70c     18 4E 05 F1 | 	add	fp, #24
1a710     A7 3C 02 FB | 	rdlong	local12, fp
1a714     18 4E 85 F1 | 	sub	fp, #24
1a718     0C 3C 0E F2 | 	cmp	local12, #12 wz
1a71c     94 01 90 5D |  if_ne	jmp	#LR__2103
1a720     1C 4E 05 F1 | 	add	fp, #28
1a724     A7 3E 02 FB | 	rdlong	local13, fp
1a728     1C 4E 85 F1 | 	sub	fp, #28
1a72c     00 04 00 FF 
1a730     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1a734     7C 01 90 CD |  if_b	jmp	#LR__2103
1a738                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
1a738     52 00 00 FF 
1a73c     10 E5 05 F1 | 	add	objptr, ##42256
1a740     F2 3C 02 FB | 	rdlong	local12, objptr
1a744     52 00 00 FF 
1a748     10 E5 85 F1 | 	sub	objptr, ##42256
1a74c     1C 3C 0E F2 | 	cmp	local12, #28 wz
1a750     40 00 90 5D |  if_ne	jmp	#LR__2099
1a754     1C 4E 05 F1 | 	add	fp, #28
1a758     A7 3C 02 FB | 	rdlong	local12, fp
1a75c     14 4F 05 F1 | 	add	fp, #276
1a760     A7 3E 02 FB | 	rdlong	local13, fp
1a764     1F 45 02 F6 | 	mov	local16, local13
1a768     02 44 66 F0 | 	shl	local16, #2
1a76c     04 4F 85 F1 | 	sub	fp, #260
1a770     A7 42 02 F6 | 	mov	local15, fp
1a774     A7 44 02 F1 | 	add	local16, fp
1a778     22 13 02 FB | 	rdlong	arg01, local16
1a77c     00 14 06 F6 | 	mov	arg02, #0
1a780     2C 4E 85 F1 | 	sub	fp, #44
1a784     08 FE B0 FD | 	call	#__system____builtin_atoi
1a788     FD 14 02 F6 | 	mov	arg02, result1
1a78c     1E 13 02 F6 | 	mov	arg01, local12
1a790     F8 8F B0 FD | 	call	#_pslpoke
1a794                 | LR__2099
1a794                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
1a794     52 00 00 FF 
1a798     10 E5 05 F1 | 	add	objptr, ##42256
1a79c     F2 3C 02 FB | 	rdlong	local12, objptr
1a7a0     52 00 00 FF 
1a7a4     10 E5 85 F1 | 	sub	objptr, ##42256
1a7a8     1D 3C 0E F2 | 	cmp	local12, #29 wz
1a7ac     40 00 90 5D |  if_ne	jmp	#LR__2100
1a7b0     1C 4E 05 F1 | 	add	fp, #28
1a7b4     A7 3C 02 FB | 	rdlong	local12, fp
1a7b8     14 4F 05 F1 | 	add	fp, #276
1a7bc     A7 3E 02 FB | 	rdlong	local13, fp
1a7c0     1F 45 02 F6 | 	mov	local16, local13
1a7c4     02 44 66 F0 | 	shl	local16, #2
1a7c8     04 4F 85 F1 | 	sub	fp, #260
1a7cc     A7 42 02 F6 | 	mov	local15, fp
1a7d0     A7 44 02 F1 | 	add	local16, fp
1a7d4     22 13 02 FB | 	rdlong	arg01, local16
1a7d8     00 14 06 F6 | 	mov	arg02, #0
1a7dc     2C 4E 85 F1 | 	sub	fp, #44
1a7e0     AC FD B0 FD | 	call	#__system____builtin_atoi
1a7e4     FD 14 02 F6 | 	mov	arg02, result1
1a7e8     1E 13 02 F6 | 	mov	arg01, local12
1a7ec     9C 8F B0 FD | 	call	#_pslpoke
1a7f0                 | LR__2100
1a7f0                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1a7f0     52 00 00 FF 
1a7f4     10 E5 05 F1 | 	add	objptr, ##42256
1a7f8     F2 3C 02 FB | 	rdlong	local12, objptr
1a7fc     52 00 00 FF 
1a800     10 E5 85 F1 | 	sub	objptr, ##42256
1a804     1E 3C 0E F2 | 	cmp	local12, #30 wz
1a808     4C 00 90 5D |  if_ne	jmp	#LR__2101
1a80c     30 4F 05 F1 | 	add	fp, #304
1a810     A7 3E 02 FB | 	rdlong	local13, fp
1a814     02 3E 66 F0 | 	shl	local13, #2
1a818     04 4F 85 F1 | 	sub	fp, #260
1a81c     A7 44 02 F6 | 	mov	local16, fp
1a820     A7 3E 02 F1 | 	add	local13, fp
1a824     1F 13 02 FB | 	rdlong	arg01, local13
1a828     2C 4E 85 F1 | 	sub	fp, #44
1a82c     F4 FE B0 FD | 	call	#__system____builtin_atof
1a830     28 4E 05 F1 | 	add	fp, #40
1a834     A7 FA 61 FC | 	wrlong	result1, fp
1a838     0C 4E 85 F1 | 	sub	fp, #12
1a83c     A7 3C 02 FB | 	rdlong	local12, fp
1a840     0C 4E 05 F1 | 	add	fp, #12
1a844     A7 12 02 F6 | 	mov	arg01, fp
1a848     28 4E 85 F1 | 	sub	fp, #40
1a84c     09 15 02 FB | 	rdlong	arg02, arg01
1a850     1E 13 02 F6 | 	mov	arg01, local12
1a854     34 8F B0 FD | 	call	#_pslpoke
1a858                 | LR__2101
1a858                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
1a858     52 00 00 FF 
1a85c     10 E5 05 F1 | 	add	objptr, ##42256
1a860     F2 3C 02 FB | 	rdlong	local12, objptr
1a864     52 00 00 FF 
1a868     10 E5 85 F1 | 	sub	objptr, ##42256
1a86c     2B 3C 0E F2 | 	cmp	local12, #43 wz
1a870     18 00 90 5D |  if_ne	jmp	#LR__2102
1a874     1C 4E 05 F1 | 	add	fp, #28
1a878     A7 12 02 FB | 	rdlong	arg01, fp
1a87c     0C 4E 85 F1 | 	sub	fp, #12
1a880     A7 14 02 FB | 	rdlong	arg02, fp
1a884     10 4E 85 F1 | 	sub	fp, #16
1a888     00 8F B0 FD | 	call	#_pslpoke
1a88c                 | LR__2102
1a88c     1C 4E 05 F1 | 	add	fp, #28
1a890     A7 12 02 FB | 	rdlong	arg01, fp
1a894     1C 4E 85 F1 | 	sub	fp, #28
1a898     08 12 06 F1 | 	add	arg01, #8
1a89c     52 00 00 FF 
1a8a0     10 E5 05 F1 | 	add	objptr, ##42256
1a8a4     F2 14 02 FB | 	rdlong	arg02, objptr
1a8a8     52 00 00 FF 
1a8ac     10 E5 85 F1 | 	sub	objptr, ##42256
1a8b0     D8 8E B0 FD | 	call	#_pslpoke
1a8b4                 | LR__2103
1a8b4                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
1a8b4     18 4E 05 F1 | 	add	fp, #24
1a8b8     A7 3C 02 FB | 	rdlong	local12, fp
1a8bc     18 4E 85 F1 | 	sub	fp, #24
1a8c0     05 3C 0E F2 | 	cmp	local12, #5 wz
1a8c4     52 00 00 AF 
1a8c8     10 E5 05 A1 |  if_e	add	objptr, ##42256
1a8cc     F2 40 02 AB |  if_e	rdlong	local14, objptr
1a8d0     52 00 00 AF 
1a8d4     10 E5 85 A1 |  if_e	sub	objptr, ##42256
1a8d8     2B 40 0E A2 |  if_e	cmp	local14, #43 wz
1a8dc     18 00 90 5D |  if_ne	jmp	#LR__2104
1a8e0     1C 4E 05 F1 | 	add	fp, #28
1a8e4     A7 12 02 FB | 	rdlong	arg01, fp
1a8e8     0C 4E 85 F1 | 	sub	fp, #12
1a8ec     A7 14 02 FB | 	rdlong	arg02, fp
1a8f0     10 4E 85 F1 | 	sub	fp, #16
1a8f4     94 8E B0 FD | 	call	#_pslpoke
1a8f8                 | LR__2104
1a8f8                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
1a8f8     18 4E 05 F1 | 	add	fp, #24
1a8fc     A7 3C 02 FB | 	rdlong	local12, fp
1a900     18 4E 85 F1 | 	sub	fp, #24
1a904     04 3C 0E F2 | 	cmp	local12, #4 wz
1a908     54 00 90 5D |  if_ne	jmp	#LR__2105
1a90c     52 00 00 FF 
1a910     10 E5 05 F1 | 	add	objptr, ##42256
1a914     F2 40 02 FB | 	rdlong	local14, objptr
1a918     52 00 00 FF 
1a91c     10 E5 85 F1 | 	sub	objptr, ##42256
1a920     2B 40 0E F2 | 	cmp	local14, #43 wz
1a924     38 00 90 AD |  if_e	jmp	#LR__2105
1a928     1C 4E 05 F1 | 	add	fp, #28
1a92c     A7 3C 02 FB | 	rdlong	local12, fp
1a930     14 4F 05 F1 | 	add	fp, #276
1a934     A7 44 02 FB | 	rdlong	local16, fp
1a938     02 44 66 F0 | 	shl	local16, #2
1a93c     04 4F 85 F1 | 	sub	fp, #260
1a940     A7 44 02 F1 | 	add	local16, fp
1a944     22 13 02 FB | 	rdlong	arg01, local16
1a948     00 14 06 F6 | 	mov	arg02, #0
1a94c     2C 4E 85 F1 | 	sub	fp, #44
1a950     3C FC B0 FD | 	call	#__system____builtin_atoi
1a954     FD 14 02 F6 | 	mov	arg02, result1
1a958     1E 13 02 F6 | 	mov	arg01, local12
1a95c     2C 8E B0 FD | 	call	#_pslpoke
1a960                 | LR__2105
1a960                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
1a960     18 4E 05 F1 | 	add	fp, #24
1a964     A7 3C 02 FB | 	rdlong	local12, fp
1a968     18 4E 85 F1 | 	sub	fp, #24
1a96c     02 3C 0E F2 | 	cmp	local12, #2 wz
1a970     54 00 90 5D |  if_ne	jmp	#LR__2106
1a974     52 00 00 FF 
1a978     10 E5 05 F1 | 	add	objptr, ##42256
1a97c     F2 40 02 FB | 	rdlong	local14, objptr
1a980     52 00 00 FF 
1a984     10 E5 85 F1 | 	sub	objptr, ##42256
1a988     2B 40 0E F2 | 	cmp	local14, #43 wz
1a98c     38 00 90 AD |  if_e	jmp	#LR__2106
1a990     1C 4E 05 F1 | 	add	fp, #28
1a994     A7 3C 02 FB | 	rdlong	local12, fp
1a998     14 4F 05 F1 | 	add	fp, #276
1a99c     A7 44 02 FB | 	rdlong	local16, fp
1a9a0     02 44 66 F0 | 	shl	local16, #2
1a9a4     04 4F 85 F1 | 	sub	fp, #260
1a9a8     A7 44 02 F1 | 	add	local16, fp
1a9ac     22 13 02 FB | 	rdlong	arg01, local16
1a9b0     00 14 06 F6 | 	mov	arg02, #0
1a9b4     2C 4E 85 F1 | 	sub	fp, #44
1a9b8     D4 FB B0 FD | 	call	#__system____builtin_atoi
1a9bc     FD 14 02 F6 | 	mov	arg02, result1
1a9c0     1E 13 02 F6 | 	mov	arg01, local12
1a9c4     0C 8E B0 FD | 	call	#_psdpoke
1a9c8                 | LR__2106
1a9c8                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
1a9c8     18 4E 05 F1 | 	add	fp, #24
1a9cc     A7 3C 02 FB | 	rdlong	local12, fp
1a9d0     18 4E 85 F1 | 	sub	fp, #24
1a9d4     01 3C 0E F2 | 	cmp	local12, #1 wz
1a9d8     54 00 90 5D |  if_ne	jmp	#LR__2107
1a9dc     52 00 00 FF 
1a9e0     10 E5 05 F1 | 	add	objptr, ##42256
1a9e4     F2 40 02 FB | 	rdlong	local14, objptr
1a9e8     52 00 00 FF 
1a9ec     10 E5 85 F1 | 	sub	objptr, ##42256
1a9f0     2B 40 0E F2 | 	cmp	local14, #43 wz
1a9f4     38 00 90 AD |  if_e	jmp	#LR__2107
1a9f8     1C 4E 05 F1 | 	add	fp, #28
1a9fc     A7 3C 02 FB | 	rdlong	local12, fp
1aa00     14 4F 05 F1 | 	add	fp, #276
1aa04     A7 44 02 FB | 	rdlong	local16, fp
1aa08     02 44 66 F0 | 	shl	local16, #2
1aa0c     04 4F 85 F1 | 	sub	fp, #260
1aa10     A7 44 02 F1 | 	add	local16, fp
1aa14     22 13 02 FB | 	rdlong	arg01, local16
1aa18     00 14 06 F6 | 	mov	arg02, #0
1aa1c     2C 4E 85 F1 | 	sub	fp, #44
1aa20     6C FB B0 FD | 	call	#__system____builtin_atoi
1aa24     FD 14 02 F6 | 	mov	arg02, result1
1aa28     1E 13 02 F6 | 	mov	arg01, local12
1aa2c     EC 8D B0 FD | 	call	#_pspoke
1aa30                 | LR__2107
1aa30                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1aa30     18 4E 05 F1 | 	add	fp, #24
1aa34     A7 3C 02 FB | 	rdlong	local12, fp
1aa38     18 4E 85 F1 | 	sub	fp, #24
1aa3c     06 3C 0E F2 | 	cmp	local12, #6 wz
1aa40     64 00 90 5D |  if_ne	jmp	#LR__2108
1aa44     52 00 00 FF 
1aa48     10 E5 05 F1 | 	add	objptr, ##42256
1aa4c     F2 40 02 FB | 	rdlong	local14, objptr
1aa50     52 00 00 FF 
1aa54     10 E5 85 F1 | 	sub	objptr, ##42256
1aa58     2B 40 0E F2 | 	cmp	local14, #43 wz
1aa5c     48 00 90 AD |  if_e	jmp	#LR__2108
1aa60     30 4F 05 F1 | 	add	fp, #304
1aa64     A7 3E 02 FB | 	rdlong	local13, fp
1aa68     02 3E 66 F0 | 	shl	local13, #2
1aa6c     04 4F 85 F1 | 	sub	fp, #260
1aa70     A7 3E 02 F1 | 	add	local13, fp
1aa74     1F 13 02 FB | 	rdlong	arg01, local13
1aa78     2C 4E 85 F1 | 	sub	fp, #44
1aa7c     A4 FC B0 FD | 	call	#__system____builtin_atof
1aa80     28 4E 05 F1 | 	add	fp, #40
1aa84     A7 FA 61 FC | 	wrlong	result1, fp
1aa88     0C 4E 85 F1 | 	sub	fp, #12
1aa8c     A7 3C 02 FB | 	rdlong	local12, fp
1aa90     0C 4E 05 F1 | 	add	fp, #12
1aa94     A7 12 02 F6 | 	mov	arg01, fp
1aa98     28 4E 85 F1 | 	sub	fp, #40
1aa9c     09 15 02 FB | 	rdlong	arg02, arg01
1aaa0     1E 13 02 F6 | 	mov	arg01, local12
1aaa4     E4 8C B0 FD | 	call	#_pslpoke
1aaa8                 | LR__2108
1aaa8                 | LR__2109
1aaa8     30 4F 05 F1 | 	add	fp, #304
1aaac     A7 40 02 FB | 	rdlong	local14, fp
1aab0     01 40 06 F1 | 	add	local14, #1
1aab4     A7 40 62 FC | 	wrlong	local14, fp
1aab8     30 4F 85 F1 | 	sub	fp, #304
1aabc     B8 F6 9F FD | 	jmp	#LR__2073
1aac0                 | LR__2110
1aac0                 | LR__2111
1aac0     A7 F0 03 F6 | 	mov	ptra, fp
1aac4     B2 00 A0 FD | 	call	#popregs_
1aac8                 | _do_read_ret
1aac8     2D 00 64 FD | 	ret
1aacc                 | 
1aacc                 | ' 
1aacc                 | ' '------------------- release
1aacc                 | ' 
1aacc                 | ' sub do_release
1aacc                 | _do_release
1aacc     00 4A 05 F6 | 	mov	COUNT_, #0
1aad0     A8 00 A0 FD | 	call	#pushregs_
1aad4     10 F0 07 F1 | 	add	ptra, #16
1aad8     2C 2C BF FD | 	call	#_pop
1aadc     FF 14 02 F6 | 	mov	arg02, result3
1aae0     A7 FA 61 FC | 	wrlong	result1, fp
1aae4     04 4E 05 F1 | 	add	fp, #4
1aae8     A7 FC 61 FC | 	wrlong	result2, fp
1aaec     04 4E 05 F1 | 	add	fp, #4
1aaf0     A7 14 62 FC | 	wrlong	arg02, fp
1aaf4     08 4E 85 F1 | 	sub	fp, #8
1aaf8     A7 12 02 F6 | 	mov	arg01, fp
1aafc     EC 2D BF FD | 	call	#_converttoint
1ab00     0C 4E 05 F1 | 	add	fp, #12
1ab04     A7 FA 61 FC | 	wrlong	result1, fp
1ab08                 | ' 
1ab08                 | ' t1=pop()
1ab08                 | ' channel=converttoint(t1)
1ab08                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
1ab08     0C 4E 85 F1 | 	sub	fp, #12
1ab0c     00 FA 55 F2 | 	cmps	result1, #0 wc
1ab10     44 00 90 CD |  if_b	jmp	#LR__2120
1ab14     0C 4E 05 F1 | 	add	fp, #12
1ab18     A7 14 02 FB | 	rdlong	arg02, fp
1ab1c     0C 4E 85 F1 | 	sub	fp, #12
1ab20     08 14 56 F2 | 	cmps	arg02, #8 wc
1ab24     30 00 90 3D |  if_ae	jmp	#LR__2120
1ab28     37 00 00 FF 
1ab2c     10 E4 05 F1 | 	add	objptr, ##28176
1ab30     F2 12 02 FB | 	rdlong	arg01, objptr
1ab34     37 00 00 FF 
1ab38     10 E4 85 F1 | 	sub	objptr, ##28176
1ab3c     0C 4E 05 F1 | 	add	fp, #12
1ab40     A7 14 02 FB | 	rdlong	arg02, fp
1ab44     0C 4E 85 F1 | 	sub	fp, #12
1ab48     06 14 66 F0 | 	shl	arg02, #6
1ab4c     0A 13 02 F1 | 	add	arg01, arg02
1ab50     2C 12 06 F1 | 	add	arg01, #44
1ab54     09 FF 69 FC | 	wrlong	#255, arg01
1ab58                 | LR__2120
1ab58     A7 F0 03 F6 | 	mov	ptra, fp
1ab5c     B2 00 A0 FD | 	call	#popregs_
1ab60                 | _do_release_ret
1ab60     2D 00 64 FD | 	ret
1ab64                 | 
1ab64                 | ' 
1ab64                 | ' '------------------- restore
1ab64                 | ' 
1ab64                 | ' sub do_restore()
1ab64                 | _do_restore
1ab64     4A 00 00 FF 
1ab68     88 E4 05 F1 | 	add	objptr, ##38024
1ab6c     F2 00 02 FB | 	rdlong	_var01, objptr
1ab70     06 00 00 FF 
1ab74     A4 E4 05 F1 | 	add	objptr, ##3236
1ab78     F2 00 62 FC | 	wrlong	_var01, objptr
1ab7c     BB 01 00 FF 
1ab80     5B 01 06 F6 | 	mov	_var01, ##@LR__6018
1ab84     01 00 00 FF 
1ab88     B0 E5 05 F1 | 	add	objptr, ##944
1ab8c     F2 00 62 FC | 	wrlong	_var01, objptr
1ab90     52 00 00 FF 
1ab94     DC E4 85 F1 | 	sub	objptr, ##42204
1ab98                 | _do_restore_ret
1ab98     2D 00 64 FD | 	ret
1ab9c                 | 
1ab9c                 | ' 
1ab9c                 | ' '------------------- restorepalette
1ab9c                 | ' 
1ab9c                 | ' sub do_restorepalette()
1ab9c                 | _do_restorepalette
1ab9c     B0 94 B0 FD | 	call	#_hg010b_spin2_restorepalette
1aba0                 | _do_restorepalette_ret
1aba0     2D 00 64 FD | 	ret
1aba4                 | 
1aba4                 | ' '------------------- return
1aba4                 | ' 
1aba4                 | ' sub do_return()
1aba4                 | _do_return
1aba4                 | ' if gosubtop>0 then
1aba4     50 00 00 FF 
1aba8     34 E5 05 F1 | 	add	objptr, ##41268
1abac     F2 00 02 FB | 	rdlong	_var01, objptr
1abb0     50 00 00 FF 
1abb4     34 E5 85 F1 | 	sub	objptr, ##41268
1abb8     01 00 56 F2 | 	cmps	_var01, #1 wc
1abbc     8C 00 90 CD |  if_b	jmp	#LR__2130
1abc0     50 00 00 FF 
1abc4     34 E5 05 F1 | 	add	objptr, ##41268
1abc8     F2 00 02 FB | 	rdlong	_var01, objptr
1abcc     03 00 66 F0 | 	shl	_var01, #3
1abd0     03 00 00 FF 
1abd4     88 E5 85 F1 | 	sub	objptr, ##1928
1abd8     F2 00 02 F1 | 	add	_var01, objptr
1abdc     00 01 02 FB | 	rdlong	_var01, _var01
1abe0     03 00 00 FF 
1abe4     0C E5 05 F1 | 	add	objptr, ##1804
1abe8     F2 00 62 FC | 	wrlong	_var01, objptr
1abec     7C E4 05 F1 | 	add	objptr, #124
1abf0     F2 00 02 FB | 	rdlong	_var01, objptr
1abf4     03 00 66 F0 | 	shl	_var01, #3
1abf8     03 00 00 FF 
1abfc     88 E5 85 F1 | 	sub	objptr, ##1928
1ac00     F2 00 02 F1 | 	add	_var01, objptr
1ac04     04 00 06 F1 | 	add	_var01, #4
1ac08     00 01 02 FB | 	rdlong	_var01, _var01
1ac0c     03 00 00 FF 
1ac10     10 E5 05 F1 | 	add	objptr, ##1808
1ac14     F2 00 62 FC | 	wrlong	_var01, objptr
1ac18     06 00 00 FF 
1ac1c     40 E4 85 F1 | 	sub	objptr, ##3136
1ac20     F2 00 02 FB | 	rdlong	_var01, objptr
1ac24     01 00 86 F1 | 	sub	_var01, #1
1ac28     04 E4 05 F1 | 	add	objptr, #4
1ac2c     F2 00 62 FC | 	wrlong	_var01, objptr
1ac30     06 00 00 FF 
1ac34     B4 E4 05 F1 | 	add	objptr, ##3252
1ac38     F2 00 02 FB | 	rdlong	_var01, objptr
1ac3c     01 00 86 F1 | 	sub	_var01, #1
1ac40     F2 00 62 FC | 	wrlong	_var01, objptr
1ac44     50 00 00 FF 
1ac48     34 E5 85 F1 | 	sub	objptr, ##41268
1ac4c                 | LR__2130
1ac4c                 | _do_return_ret
1ac4c     2D 00 64 FD | 	ret
1ac50                 | 
1ac50                 | ' 
1ac50                 | ' '------------------- right$
1ac50                 | ' 
1ac50                 | ' sub do_right
1ac50                 | _do_right
1ac50     00 4A 05 F6 | 	mov	COUNT_, #0
1ac54     A8 00 A0 FD | 	call	#pushregs_
1ac58     14 F0 07 F1 | 	add	ptra, #20
1ac5c     4A 00 00 FF 
1ac60     80 E4 05 F1 | 	add	objptr, ##38016
1ac64     F2 16 02 FB | 	rdlong	arg03, objptr
1ac68     0B 15 02 F6 | 	mov	arg02, arg03
1ac6c     01 14 66 F0 | 	shl	arg02, #1
1ac70     0B 15 02 F1 | 	add	arg02, arg03
1ac74     02 14 66 F0 | 	shl	arg02, #2
1ac78     03 00 00 FF 
1ac7c     04 E4 85 F1 | 	sub	objptr, ##1540
1ac80     F2 14 02 F1 | 	add	arg02, objptr
1ac84     0A 17 02 FB | 	rdlong	arg03, arg02
1ac88     0C 4E 05 F1 | 	add	fp, #12
1ac8c     A7 16 62 FC | 	wrlong	arg03, fp
1ac90                 | ' 
1ac90                 | ' numpar=compiledline(lineptr_e).result.uresult
1ac90                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
1ac90     0C 4E 85 F1 | 	sub	fp, #12
1ac94     02 16 0E F2 | 	cmp	arg03, #2 wz
1ac98     47 00 00 FF 
1ac9c     7C E4 85 F1 | 	sub	objptr, ##36476
1aca0     40 00 90 AD |  if_e	jmp	#LR__2140
1aca4     00 12 06 F6 | 	mov	arg01, #0
1aca8     94 20 B1 FD | 	call	#__system___getiolock_0614
1acac     FD 12 02 F6 | 	mov	arg01, result1
1acb0     E8 C3 B0 FD | 	call	#__system___lockmem
1acb4     BB 01 00 FF 
1acb8     5C 15 06 F6 | 	mov	arg02, ##@LR__6019
1acbc     00 12 06 F6 | 	mov	arg01, #0
1acc0     00 16 06 F6 | 	mov	arg03, #0
1acc4     CC D0 B0 FD | 	call	#__system___basic_print_string
1acc8     00 12 06 F6 | 	mov	arg01, #0
1accc     70 20 B1 FD | 	call	#__system___getiolock_0614
1acd0     FD 00 68 FC | 	wrlong	#0, result1
1acd4     27 12 06 F6 | 	mov	arg01, #39
1acd8     00 14 06 F6 | 	mov	arg02, #0
1acdc     0C 89 B0 FD | 	call	#_printerror
1ace0     EC 00 90 FD | 	jmp	#LR__2143
1ace4                 | LR__2140
1ace4     20 2A BF FD | 	call	#_pop
1ace8     FF 16 02 F6 | 	mov	arg03, result3
1acec     A7 FA 61 FC | 	wrlong	result1, fp
1acf0     04 4E 05 F1 | 	add	fp, #4
1acf4     A7 FC 61 FC | 	wrlong	result2, fp
1acf8     04 4E 05 F1 | 	add	fp, #4
1acfc     A7 16 62 FC | 	wrlong	arg03, fp
1ad00     08 4E 85 F1 | 	sub	fp, #8
1ad04     A7 12 02 F6 | 	mov	arg01, fp
1ad08     E0 2B BF FD | 	call	#_converttoint
1ad0c     FD 16 02 F6 | 	mov	arg03, result1
1ad10     10 4E 05 F1 | 	add	fp, #16
1ad14     A7 16 62 FC | 	wrlong	arg03, fp
1ad18     10 4E 85 F1 | 	sub	fp, #16
1ad1c     E8 29 BF FD | 	call	#_pop
1ad20     FF 16 02 F6 | 	mov	arg03, result3
1ad24     A7 FA 61 FC | 	wrlong	result1, fp
1ad28     04 4E 05 F1 | 	add	fp, #4
1ad2c     A7 FC 61 FC | 	wrlong	result2, fp
1ad30     04 4E 05 F1 | 	add	fp, #4
1ad34     A7 16 62 FC | 	wrlong	arg03, fp
1ad38                 | ' t1=pop() : arg=converttoint(t1)
1ad38                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1ad38     08 4E 85 F1 | 	sub	fp, #8
1ad3c     2B 16 0E F2 | 	cmp	arg03, #43 wz
1ad40     18 00 90 5D |  if_ne	jmp	#LR__2141
1ad44     A7 12 02 FB | 	rdlong	arg01, fp
1ad48     34 2B BF FD | 	call	#_convertstring
1ad4c     A7 FA 61 FC | 	wrlong	result1, fp
1ad50     08 4E 05 F1 | 	add	fp, #8
1ad54     A7 3E 68 FC | 	wrlong	#31, fp
1ad58     08 4E 85 F1 | 	sub	fp, #8
1ad5c                 | LR__2141
1ad5c                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1ad5c     08 4E 05 F1 | 	add	fp, #8
1ad60     A7 16 02 FB | 	rdlong	arg03, fp
1ad64     08 4E 85 F1 | 	sub	fp, #8
1ad68     1F 16 0E F2 | 	cmp	arg03, #31 wz
1ad6c     40 00 90 AD |  if_e	jmp	#LR__2142
1ad70     00 12 06 F6 | 	mov	arg01, #0
1ad74     C8 1F B1 FD | 	call	#__system___getiolock_0614
1ad78     FD 12 02 F6 | 	mov	arg01, result1
1ad7c     1C C3 B0 FD | 	call	#__system___lockmem
1ad80     BB 01 00 FF 
1ad84     65 15 06 F6 | 	mov	arg02, ##@LR__6020
1ad88     00 12 06 F6 | 	mov	arg01, #0
1ad8c     00 16 06 F6 | 	mov	arg03, #0
1ad90     00 D0 B0 FD | 	call	#__system___basic_print_string
1ad94     00 12 06 F6 | 	mov	arg01, #0
1ad98     A4 1F B1 FD | 	call	#__system___getiolock_0614
1ad9c     FD 00 68 FC | 	wrlong	#0, result1
1ada0     0F 12 06 F6 | 	mov	arg01, #15
1ada4     00 14 06 F6 | 	mov	arg02, #0
1ada8     40 88 B0 FD | 	call	#_printerror
1adac     20 00 90 FD | 	jmp	#LR__2143
1adb0                 | LR__2142
1adb0     A7 12 02 FB | 	rdlong	arg01, fp
1adb4     10 4E 05 F1 | 	add	fp, #16
1adb8     A7 14 02 FB | 	rdlong	arg02, fp
1adbc     10 4E 85 F1 | 	sub	fp, #16
1adc0     E0 E3 B0 FD | 	call	#__system__Right_S
1adc4     A7 FA 61 FC | 	wrlong	result1, fp
1adc8     A7 12 02 F6 | 	mov	arg01, fp
1adcc     D0 29 BF FD | 	call	#_push
1add0                 | LR__2143
1add0     A7 F0 03 F6 | 	mov	ptra, fp
1add4     B2 00 A0 FD | 	call	#popregs_
1add8                 | _do_right_ret
1add8     2D 00 64 FD | 	ret
1addc                 | 
1addc                 | ' 
1addc                 | ' '------------------- rnd
1addc                 | ' 
1addc                 | ' sub do_rnd
1addc                 | _do_rnd
1addc     01 4A 05 F6 | 	mov	COUNT_, #1
1ade0     A8 00 A0 FD | 	call	#pushregs_
1ade4     10 F0 07 F1 | 	add	ptra, #16
1ade8     4A 00 00 FF 
1adec     80 E4 05 F1 | 	add	objptr, ##38016
1adf0     F2 26 02 FB | 	rdlong	local01, objptr
1adf4     13 17 02 F6 | 	mov	arg03, local01
1adf8     01 16 66 F0 | 	shl	arg03, #1
1adfc     13 17 02 F1 | 	add	arg03, local01
1ae00     02 16 66 F0 | 	shl	arg03, #2
1ae04     03 00 00 FF 
1ae08     04 E4 85 F1 | 	sub	objptr, ##1540
1ae0c     F2 16 02 F1 | 	add	arg03, objptr
1ae10     0B 17 02 FB | 	rdlong	arg03, arg03
1ae14     0C 4E 05 F1 | 	add	fp, #12
1ae18     A7 16 62 FC | 	wrlong	arg03, fp
1ae1c                 | ' 
1ae1c                 | ' numpar=compiledline(lineptr_e).result.uresult
1ae1c                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1ae1c     0C 4E 85 F1 | 	sub	fp, #12
1ae20     02 16 16 F2 | 	cmp	arg03, #2 wc
1ae24     47 00 00 FF 
1ae28     7C E4 85 F1 | 	sub	objptr, ##36476
1ae2c     40 00 90 CD |  if_b	jmp	#LR__2150
1ae30     00 12 06 F6 | 	mov	arg01, #0
1ae34     08 1F B1 FD | 	call	#__system___getiolock_0614
1ae38     FD 12 02 F6 | 	mov	arg01, result1
1ae3c     5C C2 B0 FD | 	call	#__system___lockmem
1ae40     BB 01 00 FF 
1ae44     6E 15 06 F6 | 	mov	arg02, ##@LR__6021
1ae48     00 12 06 F6 | 	mov	arg01, #0
1ae4c     00 16 06 F6 | 	mov	arg03, #0
1ae50     40 CF B0 FD | 	call	#__system___basic_print_string
1ae54     00 12 06 F6 | 	mov	arg01, #0
1ae58     E4 1E B1 FD | 	call	#__system___getiolock_0614
1ae5c     FD 00 68 FC | 	wrlong	#0, result1
1ae60     27 12 06 F6 | 	mov	arg01, #39
1ae64     00 14 06 F6 | 	mov	arg02, #0
1ae68     80 87 B0 FD | 	call	#_printerror
1ae6c     30 01 90 FD | 	jmp	#LR__2157
1ae70                 | LR__2150
1ae70                 | ' if numpar=0 then
1ae70     0C 4E 05 F1 | 	add	fp, #12
1ae74     A7 FE 09 FB | 	rdlong	result3, fp wz
1ae78     0C 4E 85 F1 | 	sub	fp, #12
1ae7c     20 00 90 5D |  if_ne	jmp	#LR__2151
1ae80     08 4E 05 F1 | 	add	fp, #8
1ae84     A7 3A 68 FC | 	wrlong	#29, fp
1ae88     08 4E 85 F1 | 	sub	fp, #8
1ae8c     1B FA 61 FD | 	getrnd	result1
1ae90     A7 FA 61 FC | 	wrlong	result1, fp
1ae94     A7 12 02 F6 | 	mov	arg01, fp
1ae98     04 29 BF FD | 	call	#_push
1ae9c     00 01 90 FD | 	jmp	#LR__2156
1aea0                 | LR__2151
1aea0     64 28 BF FD | 	call	#_pop
1aea4     A7 FA 61 FC | 	wrlong	result1, fp
1aea8     04 4E 05 F1 | 	add	fp, #4
1aeac     A7 FC 61 FC | 	wrlong	result2, fp
1aeb0     04 4E 05 F1 | 	add	fp, #4
1aeb4     A7 FE 61 FC | 	wrlong	result3, fp
1aeb8                 | '   t1=pop()
1aeb8                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1aeb8     08 4E 85 F1 | 	sub	fp, #8
1aebc     1C FE 0D F2 | 	cmp	result3, #28 wz
1aec0     08 4E 05 51 |  if_ne	add	fp, #8
1aec4     A7 26 02 5B |  if_ne	rdlong	local01, fp
1aec8     08 4E 85 51 |  if_ne	sub	fp, #8
1aecc     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1aed0     2C 00 90 5D |  if_ne	jmp	#LR__2152
1aed4     1B FA 61 FD | 	getrnd	result1
1aed8     A7 26 02 FB | 	rdlong	local01, fp
1aedc     13 FB 11 FD | 	qdiv	result1, local01
1aee0     A7 12 02 F6 | 	mov	arg01, fp
1aee4     19 26 62 FD | 	getqy	local01
1aee8     A7 26 62 FC | 	wrlong	local01, fp
1aeec     08 4E 05 F1 | 	add	fp, #8
1aef0     A7 3A 68 FC | 	wrlong	#29, fp
1aef4     08 4E 85 F1 | 	sub	fp, #8
1aef8     A4 28 BF FD | 	call	#_push
1aefc     A0 00 90 FD | 	jmp	#LR__2155
1af00                 | LR__2152
1af00     08 4E 05 F1 | 	add	fp, #8
1af04     A7 26 02 FB | 	rdlong	local01, fp
1af08     08 4E 85 F1 | 	sub	fp, #8
1af0c     1E 26 0E F2 | 	cmp	local01, #30 wz
1af10     48 00 90 5D |  if_ne	jmp	#LR__2153
1af14     A7 12 02 FB | 	rdlong	arg01, fp
1af18     00 C0 24 FF 
1af1c     00 14 06 F6 | 	mov	arg02, ##1233125376
1af20     F8 F1 B0 FD | 	call	#__system___float_div
1af24     FD 26 02 F6 | 	mov	local01, result1
1af28     1B 12 62 FD | 	getrnd	arg01
1af2c     74 13 06 F4 | 	bitl	arg01, #372
1af30     E0 EB B0 FD | 	call	#__system___float_fromuns
1af34     FD 14 02 F6 | 	mov	arg02, result1
1af38     13 13 02 F6 | 	mov	arg01, local01
1af3c     D8 EF B0 FD | 	call	#__system___float_mul
1af40     A7 FA 61 FC | 	wrlong	result1, fp
1af44     08 4E 05 F1 | 	add	fp, #8
1af48     A7 3C 68 FC | 	wrlong	#30, fp
1af4c     08 4E 85 F1 | 	sub	fp, #8
1af50     A7 12 02 F6 | 	mov	arg01, fp
1af54     48 28 BF FD | 	call	#_push
1af58     44 00 90 FD | 	jmp	#LR__2154
1af5c                 | LR__2153
1af5c                 | '     print "rnd: "; : printerror(40) 
1af5c     00 12 06 F6 | 	mov	arg01, #0
1af60     DC 1D B1 FD | 	call	#__system___getiolock_0614
1af64     FD 12 02 F6 | 	mov	arg01, result1
1af68     30 C1 B0 FD | 	call	#__system___lockmem
1af6c     BB 01 00 FF 
1af70     74 15 06 F6 | 	mov	arg02, ##@LR__6022
1af74     00 12 06 F6 | 	mov	arg01, #0
1af78     00 16 06 F6 | 	mov	arg03, #0
1af7c     14 CE B0 FD | 	call	#__system___basic_print_string
1af80     00 12 06 F6 | 	mov	arg01, #0
1af84     B8 1D B1 FD | 	call	#__system___getiolock_0614
1af88     FD 00 68 FC | 	wrlong	#0, result1
1af8c     28 12 06 F6 | 	mov	arg01, #40
1af90     00 14 06 F6 | 	mov	arg02, #0
1af94     54 86 B0 FD | 	call	#_printerror
1af98     A7 12 02 F6 | 	mov	arg01, fp
1af9c     00 28 BF FD | 	call	#_push
1afa0                 | LR__2154
1afa0                 | LR__2155
1afa0                 | LR__2156
1afa0                 | LR__2157
1afa0     A7 F0 03 F6 | 	mov	ptra, fp
1afa4     B2 00 A0 FD | 	call	#popregs_
1afa8                 | _do_rnd_ret
1afa8     2D 00 64 FD | 	ret
1afac                 | 
1afac                 | ' 
1afac                 | ' '-------------------- round
1afac                 | ' 
1afac                 | ' sub do_round
1afac                 | _do_round
1afac     00 4A 05 F6 | 	mov	COUNT_, #0
1afb0     A8 00 A0 FD | 	call	#pushregs_
1afb4     0C F0 07 F1 | 	add	ptra, #12
1afb8     4C 27 BF FD | 	call	#_pop
1afbc     A7 FA 61 FC | 	wrlong	result1, fp
1afc0     04 4E 05 F1 | 	add	fp, #4
1afc4     A7 FC 61 FC | 	wrlong	result2, fp
1afc8     04 4E 05 F1 | 	add	fp, #4
1afcc     A7 FE 61 FC | 	wrlong	result3, fp
1afd0     08 4E 85 F1 | 	sub	fp, #8
1afd4     A7 12 02 F6 | 	mov	arg01, fp
1afd8     10 29 BF FD | 	call	#_converttoint
1afdc     A7 FA 61 FC | 	wrlong	result1, fp
1afe0     08 4E 05 F1 | 	add	fp, #8
1afe4     A7 38 68 FC | 	wrlong	#28, fp
1afe8     08 4E 85 F1 | 	sub	fp, #8
1afec     A7 12 02 F6 | 	mov	arg01, fp
1aff0     AC 27 BF FD | 	call	#_push
1aff4     A7 F0 03 F6 | 	mov	ptra, fp
1aff8     B2 00 A0 FD | 	call	#popregs_
1affc                 | _do_round_ret
1affc     2D 00 64 FD | 	ret
1b000                 | 
1b000                 | ' 
1b000                 | ' '-------------------- rqpin
1b000                 | ' 
1b000                 | ' sub do_rqpin
1b000                 | _do_rqpin
1b000     00 4A 05 F6 | 	mov	COUNT_, #0
1b004     A8 00 A0 FD | 	call	#pushregs_
1b008     0C F0 07 F1 | 	add	ptra, #12
1b00c     F8 26 BF FD | 	call	#_pop
1b010     A7 FA 61 FC | 	wrlong	result1, fp
1b014     04 4E 05 F1 | 	add	fp, #4
1b018     A7 FC 61 FC | 	wrlong	result2, fp
1b01c     04 4E 05 F1 | 	add	fp, #4
1b020     A7 FE 61 FC | 	wrlong	result3, fp
1b024     08 4E 85 F1 | 	sub	fp, #8
1b028     A7 12 02 F6 | 	mov	arg01, fp
1b02c     BC 28 BF FD | 	call	#_converttoint
1b030     FD 12 02 F6 | 	mov	arg01, result1
1b034     00 FA 05 F6 | 	mov	result1, #0
1b038     09 FB 81 FA | 	rqpin	result1, arg01
1b03c     52 00 00 FF 
1b040     10 E5 05 F1 | 	add	objptr, ##42256
1b044     F2 FA 61 FC | 	wrlong	result1, objptr
1b048     52 00 00 FF 
1b04c     10 E5 85 F1 | 	sub	objptr, ##42256
1b050     08 4E 05 F1 | 	add	fp, #8
1b054     A7 3A 68 FC | 	wrlong	#29, fp
1b058     08 4E 85 F1 | 	sub	fp, #8
1b05c     A7 08 68 FC | 	wrlong	#4, fp
1b060     A7 12 02 F6 | 	mov	arg01, fp
1b064     38 27 BF FD | 	call	#_push
1b068     A7 F0 03 F6 | 	mov	ptra, fp
1b06c     B2 00 A0 FD | 	call	#popregs_
1b070                 | _do_rqpin_ret
1b070     2D 00 64 FD | 	ret
1b074                 | 
1b074                 | ' 
1b074                 | ' ' ------------------ run
1b074                 | ' 
1b074                 | ' sub do_run
1b074                 | _do_run
1b074     04 4A 05 F6 | 	mov	COUNT_, #4
1b078     A8 00 A0 FD | 	call	#pushregs_
1b07c     4A 00 00 FF 
1b080     80 E4 05 F1 | 	add	objptr, ##38016
1b084     F2 26 02 FB | 	rdlong	local01, objptr
1b088     06 00 00 FF 
1b08c     38 E4 05 F1 | 	add	objptr, ##3128
1b090     F2 28 02 FB | 	rdlong	local02, objptr
1b094     04 E4 05 F1 | 	add	objptr, #4
1b098     F2 2A 02 FB | 	rdlong	local03, objptr
1b09c     13 19 02 F6 | 	mov	arg04, local01
1b0a0     0C 17 02 F6 | 	mov	arg03, arg04
1b0a4     01 16 66 F0 | 	shl	arg03, #1
1b0a8     0C 17 02 F1 | 	add	arg03, arg04
1b0ac     02 16 66 F0 | 	shl	arg03, #2
1b0b0     09 00 00 FF 
1b0b4     40 E4 85 F1 | 	sub	objptr, ##4672
1b0b8     F2 16 02 F1 | 	add	arg03, objptr
1b0bc     0B 15 02 FB | 	rdlong	arg02, arg03
1b0c0                 | ' 
1b0c0                 | ' r_lineptr_e=lineptr_e
1b0c0                 | ' r_runptr=runptr
1b0c0                 | ' r_runptr2=runptr2
1b0c0                 | ' 
1b0c0                 | ' numpar=compiledline(lineptr_e).result.uresult
1b0c0                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
1b0c0     01 14 0E F2 | 	cmp	arg02, #1 wz
1b0c4     47 00 00 FF 
1b0c8     7C E4 85 F1 | 	sub	objptr, ##36476
1b0cc     00 12 06 A6 |  if_e	mov	arg01, #0
1b0d0     B4 9F BF AD |  if_e	call	#_do_load
1b0d4     4A 00 00 FF 
1b0d8     88 E4 05 F1 | 	add	objptr, ##38024
1b0dc     F2 18 02 FB | 	rdlong	arg04, objptr
1b0e0     06 00 00 FF 
1b0e4     30 E4 05 F1 | 	add	objptr, ##3120
1b0e8     F2 18 62 FC | 	wrlong	arg04, objptr
1b0ec     04 E4 05 F1 | 	add	objptr, #4
1b0f0     F2 00 68 FC | 	wrlong	#0, objptr
1b0f4     04 E4 05 F1 | 	add	objptr, #4
1b0f8     FF FF FF FF 
1b0fc     F2 FE 6B FC | 	wrlong	##-1, objptr
1b100     06 00 00 FF 
1b104     38 E4 85 F1 | 	sub	objptr, ##3128
1b108     F2 18 02 FB | 	rdlong	arg04, objptr
1b10c     06 00 00 FF 
1b110     A4 E4 05 F1 | 	add	objptr, ##3236
1b114     F2 18 62 FC | 	wrlong	arg04, objptr
1b118     BB 01 00 FF 
1b11c     7A 19 06 F6 | 	mov	arg04, ##@LR__6023
1b120     01 00 00 FF 
1b124     B0 E5 05 F1 | 	add	objptr, ##944
1b128     F2 18 62 FC | 	wrlong	arg04, objptr
1b12c                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
1b12c                 | ' dataptr=programstart : readline="" ' reset the data pointer
1b12c                 | ' if inrun>0 then 
1b12c     01 00 00 FF 
1b130     F0 E5 85 F1 | 	sub	objptr, ##1008
1b134     F2 18 02 FB | 	rdlong	arg04, objptr
1b138     50 00 00 FF 
1b13c     EC E4 85 F1 | 	sub	objptr, ##41196
1b140     01 18 16 F2 | 	cmp	arg04, #1 wc
1b144     30 00 90 CD |  if_b	jmp	#LR__2160
1b148     50 00 00 FF 
1b14c     F0 E4 05 F1 | 	add	objptr, ##41200
1b150     F2 12 02 F6 | 	mov	arg01, objptr
1b154     38 E4 85 F1 | 	sub	objptr, #56
1b158     F2 14 02 FB | 	rdlong	arg02, objptr
1b15c     18 16 06 F6 | 	mov	arg03, #24
1b160     44 00 00 FF 
1b164     EC E5 85 F1 | 	sub	objptr, ##35308
1b168     38 B2 B0 FD | 	call	#_psram_spin2_read1
1b16c     0B 00 00 FF 
1b170     CC E4 85 F1 | 	sub	objptr, ##5836
1b174                 | '   psram.read1(varptr(runheader),runptr,24)  
1b174                 | '   return
1b174     0C 03 90 FD | 	jmp	#LR__2167
1b178                 | LR__2160
1b178     50 00 00 FF 
1b17c     EC E4 05 F1 | 	add	objptr, ##41196
1b180     F2 02 68 FC | 	wrlong	#1, objptr
1b184     04 E4 05 F1 | 	add	objptr, #4
1b188     F2 12 02 F6 | 	mov	arg01, objptr
1b18c     38 E4 85 F1 | 	sub	objptr, #56
1b190     F2 14 02 FB | 	rdlong	arg02, objptr
1b194     18 16 06 F6 | 	mov	arg03, #24
1b198     44 00 00 FF 
1b19c     EC E5 85 F1 | 	sub	objptr, ##35308
1b1a0     00 B2 B0 FD | 	call	#_psram_spin2_read1
1b1a4                 | ' inrun=1
1b1a4                 | ' psram.read1(varptr(runheader),runptr,24) 
1b1a4                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
1b1a4     45 00 00 FF 
1b1a8     24 E4 05 F1 | 	add	objptr, ##35364
1b1ac     F2 2C 02 FB | 	rdlong	local04, objptr
1b1b0     50 00 00 FF 
1b1b4     F0 E4 85 F1 | 	sub	objptr, ##41200
1b1b8     FF FF 7F FF 
1b1bc     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
1b1c0     50 00 00 AF 
1b1c4     EC E4 05 A1 |  if_e	add	objptr, ##41196
1b1c8     F2 00 68 AC |  if_e	wrlong	#0, objptr
1b1cc     50 00 00 AF 
1b1d0     EC E4 85 A1 |  if_e	sub	objptr, ##41196
1b1d4     AC 02 90 AD |  if_e	jmp	#LR__2167
1b1d8                 | ' do 
1b1d8                 | LR__2161
1b1d8                 | '   if runptr<>oldrunptr then
1b1d8     50 00 00 FF 
1b1dc     B8 E4 05 F1 | 	add	objptr, ##41144
1b1e0     F2 2C 02 FB | 	rdlong	local04, objptr
1b1e4     08 E4 05 F1 | 	add	objptr, #8
1b1e8     F2 18 02 FB | 	rdlong	arg04, objptr
1b1ec     50 00 00 FF 
1b1f0     C0 E4 85 F1 | 	sub	objptr, ##41152
1b1f4     0C 2D 0A F2 | 	cmp	local04, arg04 wz
1b1f8     CC 00 90 AD |  if_e	jmp	#LR__2162
1b1fc     50 00 00 FF 
1b200     F0 E4 05 F1 | 	add	objptr, ##41200
1b204     F2 12 02 F6 | 	mov	arg01, objptr
1b208     38 E4 85 F1 | 	sub	objptr, #56
1b20c     F2 14 02 FB | 	rdlong	arg02, objptr
1b210     18 16 06 F6 | 	mov	arg03, #24
1b214     44 00 00 FF 
1b218     EC E5 85 F1 | 	sub	objptr, ##35308
1b21c     84 B1 B0 FD | 	call	#_psram_spin2_read1
1b220     3B 00 00 FF 
1b224     B0 E5 05 F1 | 	add	objptr, ##30640
1b228     F2 12 02 F6 | 	mov	arg01, objptr
1b22c     09 00 00 FF 
1b230     3C E4 05 F1 | 	add	objptr, ##4668
1b234     F2 14 02 FB | 	rdlong	arg02, objptr
1b238     0B 00 00 FF 
1b23c     54 E4 85 F1 | 	sub	objptr, ##5716
1b240     F2 2C 02 FB | 	rdlong	local04, objptr
1b244     01 2C 66 F0 | 	shl	local04, #1
1b248     16 15 02 F1 | 	add	arg02, local04
1b24c     0B 00 00 FF 
1b250     94 E4 05 F1 | 	add	objptr, ##5780
1b254     F2 16 02 FB | 	rdlong	arg03, objptr
1b258     40 E4 85 F1 | 	sub	objptr, #64
1b25c     F2 2C 02 FB | 	rdlong	local04, objptr
1b260     16 17 82 F1 | 	sub	arg03, local04
1b264     44 00 00 FF 
1b268     EC E5 85 F1 | 	sub	objptr, ##35308
1b26c     34 B1 B0 FD | 	call	#_psram_spin2_read1
1b270     45 00 00 FF 
1b274     2C E4 05 F1 | 	add	objptr, ##35372
1b278     F2 2C 02 FB | 	rdlong	local04, objptr
1b27c     40 E4 85 F1 | 	sub	objptr, #64
1b280     F2 14 02 FB | 	rdlong	arg02, objptr
1b284     0A 2D 82 F1 | 	sub	local04, arg02
1b288     0B 00 00 FF 
1b28c     54 E4 85 F1 | 	sub	objptr, ##5716
1b290     F2 14 02 FB | 	rdlong	arg02, objptr
1b294     0A 2D 12 FD | 	qdiv	local04, arg02
1b298     05 00 00 FF 
1b29c     18 E4 05 F1 | 	add	objptr, ##2584
1b2a0     18 2C 62 FD | 	getqx	local04
1b2a4     03 2C 86 F1 | 	sub	local04, #3
1b2a8     F2 2C 62 FC | 	wrlong	local04, objptr
1b2ac     06 00 00 FF 
1b2b0     3C E4 05 F1 | 	add	objptr, ##3132
1b2b4     F2 2C 02 FB | 	rdlong	local04, objptr
1b2b8     08 E4 05 F1 | 	add	objptr, #8
1b2bc     F2 2C 62 FC | 	wrlong	local04, objptr
1b2c0     50 00 00 FF 
1b2c4     C0 E4 85 F1 | 	sub	objptr, ##41152
1b2c8                 | LR__2162
1b2c8     50 00 00 FF 
1b2cc     04 E5 05 F1 | 	add	objptr, ##41220
1b2d0     F2 2C 02 FB | 	rdlong	local04, objptr
1b2d4     4C E4 85 F1 | 	sub	objptr, #76
1b2d8     F2 2C 62 FC | 	wrlong	local04, objptr
1b2dc     04 E4 05 F1 | 	add	objptr, #4
1b2e0     F2 12 02 FB | 	rdlong	arg01, objptr
1b2e4     50 00 00 FF 
1b2e8     BC E4 85 F1 | 	sub	objptr, ##41148
1b2ec     14 23 BF FD | 	call	#_execute_line
1b2f0     50 00 00 FF 
1b2f4     BC E4 05 F1 | 	add	objptr, ##41148
1b2f8     F2 FA 61 FC | 	wrlong	result1, objptr
1b2fc     04 E4 85 F1 | 	sub	objptr, #4
1b300     F2 2C 02 FB | 	rdlong	local04, objptr
1b304     50 00 00 FF 
1b308     B8 E4 85 F1 | 	sub	objptr, ##41144
1b30c     FF FF 3F FF 
1b310     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1b314     4C 00 90 AD |  if_e	jmp	#LR__2165
1b318     E0 12 06 F6 | 	mov	arg01, #224
1b31c     14 B4 B0 FD | 	call	#_usbnew_spin2_keystate
1b320     00 FA 0D F2 | 	cmp	result1, #0 wz
1b324     10 00 90 5D |  if_ne	jmp	#LR__2163
1b328     E4 12 06 F6 | 	mov	arg01, #228
1b32c     04 B4 B0 FD | 	call	#_usbnew_spin2_keystate
1b330     00 FA 0D F2 | 	cmp	result1, #0 wz
1b334     10 00 90 AD |  if_e	jmp	#LR__2164
1b338                 | LR__2163
1b338     06 12 06 F6 | 	mov	arg01, #6
1b33c     F4 B3 B0 FD | 	call	#_usbnew_spin2_keystate
1b340     00 FA 0D F2 | 	cmp	result1, #0 wz
1b344     1C 00 90 5D |  if_ne	jmp	#LR__2165
1b348                 | LR__2164
1b348     50 00 00 FF 
1b34c     EC E4 05 F1 | 	add	objptr, ##41196
1b350     F2 2C 02 FB | 	rdlong	local04, objptr
1b354     50 00 00 FF 
1b358     EC E4 85 F1 | 	sub	objptr, ##41196
1b35c     02 2C 0E F2 | 	cmp	local04, #2 wz
1b360     74 FE 9F 5D |  if_ne	jmp	#LR__2161
1b364                 | LR__2165
1b364                 | '   ''do whatever kbm.peek_latest_key()=$106 
1b364                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1b364     50 00 00 FF 
1b368     B8 E4 05 F1 | 	add	objptr, ##41144
1b36c     F2 2C 02 FB | 	rdlong	local04, objptr
1b370     50 00 00 FF 
1b374     B8 E4 85 F1 | 	sub	objptr, ##41144
1b378     FF FF 3F FF 
1b37c     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1b380     AC 00 90 AD |  if_e	jmp	#LR__2166
1b384     50 00 00 FF 
1b388     EC E4 05 F1 | 	add	objptr, ##41196
1b38c     F2 2C 02 FB | 	rdlong	local04, objptr
1b390     50 00 00 FF 
1b394     EC E4 85 F1 | 	sub	objptr, ##41196
1b398     01 2C 0E F2 | 	cmp	local04, #1 wz
1b39c     90 00 90 5D |  if_ne	jmp	#LR__2166
1b3a0                 | '   print: print "Stopped at line ";runheader(0) 
1b3a0     00 12 06 F6 | 	mov	arg01, #0
1b3a4     98 19 B1 FD | 	call	#__system___getiolock_0614
1b3a8     FD 12 02 F6 | 	mov	arg01, result1
1b3ac     EC BC B0 FD | 	call	#__system___lockmem
1b3b0     00 12 06 F6 | 	mov	arg01, #0
1b3b4     0A 14 06 F6 | 	mov	arg02, #10
1b3b8     00 16 06 F6 | 	mov	arg03, #0
1b3bc     7C C9 B0 FD | 	call	#__system___basic_print_char
1b3c0     00 12 06 F6 | 	mov	arg01, #0
1b3c4     78 19 B1 FD | 	call	#__system___getiolock_0614
1b3c8     FD 00 68 FC | 	wrlong	#0, result1
1b3cc     00 12 06 F6 | 	mov	arg01, #0
1b3d0     6C 19 B1 FD | 	call	#__system___getiolock_0614
1b3d4     FD 12 02 F6 | 	mov	arg01, result1
1b3d8     C0 BC B0 FD | 	call	#__system___lockmem
1b3dc     BB 01 00 FF 
1b3e0     7B 15 06 F6 | 	mov	arg02, ##@LR__6024
1b3e4     00 12 06 F6 | 	mov	arg01, #0
1b3e8     00 16 06 F6 | 	mov	arg03, #0
1b3ec     A4 C9 B0 FD | 	call	#__system___basic_print_string
1b3f0     50 00 00 FF 
1b3f4     F0 E4 05 F1 | 	add	objptr, ##41200
1b3f8     F2 14 02 FB | 	rdlong	arg02, objptr
1b3fc     50 00 00 FF 
1b400     F0 E4 85 F1 | 	sub	objptr, ##41200
1b404     00 12 06 F6 | 	mov	arg01, #0
1b408     00 16 06 F6 | 	mov	arg03, #0
1b40c     0A 18 06 F6 | 	mov	arg04, #10
1b410     04 CA B0 FD | 	call	#__system___basic_print_unsigned
1b414     00 12 06 F6 | 	mov	arg01, #0
1b418     0A 14 06 F6 | 	mov	arg02, #10
1b41c     00 16 06 F6 | 	mov	arg03, #0
1b420     18 C9 B0 FD | 	call	#__system___basic_print_char
1b424     00 12 06 F6 | 	mov	arg01, #0
1b428     14 19 B1 FD | 	call	#__system___getiolock_0614
1b42c     FD 00 68 FC | 	wrlong	#0, result1
1b430                 | LR__2166
1b430     50 00 00 FF 
1b434     EC E4 05 F1 | 	add	objptr, ##41196
1b438     F2 00 68 FC | 	wrlong	#0, objptr
1b43c     06 00 00 FF 
1b440     6C E4 85 F1 | 	sub	objptr, ##3180
1b444     F2 26 62 FC | 	wrlong	local01, objptr
1b448     06 00 00 FF 
1b44c     38 E4 05 F1 | 	add	objptr, ##3128
1b450     F2 28 62 FC | 	wrlong	local02, objptr
1b454     04 E4 05 F1 | 	add	objptr, #4
1b458     F2 2A 62 FC | 	wrlong	local03, objptr
1b45c     50 00 00 FF 
1b460     BC E4 85 F1 | 	sub	objptr, ##41148
1b464     11 12 06 F6 | 	mov	arg01, #17
1b468     08 14 06 F6 | 	mov	arg02, #8
1b46c     10 16 06 F6 | 	mov	arg03, #16
1b470     E4 91 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b474     10 12 06 F6 | 	mov	arg01, #16
1b478     20 14 06 F6 | 	mov	arg02, #32
1b47c     20 16 06 F6 | 	mov	arg03, #32
1b480     D4 91 B0 FD | 	call	#_hg010b_spin2_setspritesize
1b484                 | LR__2167
1b484     A7 F0 03 F6 | 	mov	ptra, fp
1b488     B2 00 A0 FD | 	call	#popregs_
1b48c                 | _do_run_ret
1b48c     2D 00 64 FD | 	ret
1b490                 | 
1b490                 | ' 
1b490                 | ' ' ------------------ save
1b490                 | ' 
1b490                 | ' sub do_save                        
1b490                 | _do_save
1b490     04 4A 05 F6 | 	mov	COUNT_, #4
1b494     A8 00 A0 FD | 	call	#pushregs_
1b498     B8 F0 07 F1 | 	add	ptra, #184
1b49c     4A 00 00 FF 
1b4a0     80 E4 05 F1 | 	add	objptr, ##38016
1b4a4     F2 26 02 FB | 	rdlong	local01, objptr
1b4a8     13 29 02 F6 | 	mov	local02, local01
1b4ac     01 28 66 F0 | 	shl	local02, #1
1b4b0     13 29 02 F1 | 	add	local02, local01
1b4b4     02 28 66 F0 | 	shl	local02, #2
1b4b8     03 00 00 FF 
1b4bc     04 E4 85 F1 | 	sub	objptr, ##1540
1b4c0     F2 28 02 F1 | 	add	local02, objptr
1b4c4     14 2B 02 FB | 	rdlong	local03, local02
1b4c8     10 4E 05 F1 | 	add	fp, #16
1b4cc     A7 2A 62 FC | 	wrlong	local03, fp
1b4d0                 | ' 
1b4d0                 | ' numpar=compiledline(lineptr_e).result.uresult
1b4d0                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1b4d0     10 4E 85 F1 | 	sub	fp, #16
1b4d4     01 2A 56 F2 | 	cmps	local03, #1 wc
1b4d8     47 00 00 FF 
1b4dc     7C E4 85 F1 | 	sub	objptr, ##36476
1b4e0     20 00 90 CD |  if_b	jmp	#LR__2170
1b4e4     20 22 BF FD | 	call	#_pop
1b4e8     A7 FA 61 FC | 	wrlong	result1, fp
1b4ec     04 4E 05 F1 | 	add	fp, #4
1b4f0     A7 FC 61 FC | 	wrlong	result2, fp
1b4f4     04 4E 05 F1 | 	add	fp, #4
1b4f8     A7 FE 61 FC | 	wrlong	result3, fp
1b4fc     08 4E 85 F1 | 	sub	fp, #8
1b500     24 00 90 FD | 	jmp	#LR__2171
1b504                 | LR__2170
1b504     52 00 00 FF 
1b508     C4 E4 05 F1 | 	add	objptr, ##42180
1b50c     F2 2A 02 FB | 	rdlong	local03, objptr
1b510     52 00 00 FF 
1b514     C4 E4 85 F1 | 	sub	objptr, ##42180
1b518     A7 2A 62 FC | 	wrlong	local03, fp
1b51c     08 4E 05 F1 | 	add	fp, #8
1b520     A7 3E 68 FC | 	wrlong	#31, fp
1b524     08 4E 85 F1 | 	sub	fp, #8
1b528                 | LR__2171
1b528                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1b528     4A 00 00 FF 
1b52c     88 E4 05 F1 | 	add	objptr, ##38024
1b530     F2 12 02 FB | 	rdlong	arg01, objptr
1b534     4A 00 00 FF 
1b538     88 E4 85 F1 | 	sub	objptr, ##38024
1b53c     7C 83 B0 FD | 	call	#_pslpeek
1b540     FF FF 7F FF 
1b544     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1b548     10 00 90 5D |  if_ne	jmp	#LR__2172
1b54c     1B 12 06 F6 | 	mov	arg01, #27
1b550     00 14 06 F6 | 	mov	arg02, #0
1b554     94 80 B0 FD | 	call	#_printerror
1b558     CC 02 90 FD | 	jmp	#LR__2178
1b55c                 | LR__2172
1b55c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1b55c     08 4E 05 F1 | 	add	fp, #8
1b560     A7 2A 02 FB | 	rdlong	local03, fp
1b564     08 4E 85 F1 | 	sub	fp, #8
1b568     2B 2A 0E F2 | 	cmp	local03, #43 wz
1b56c     18 00 90 5D |  if_ne	jmp	#LR__2173
1b570     A7 12 02 FB | 	rdlong	arg01, fp
1b574     08 23 BF FD | 	call	#_convertstring
1b578     A7 FA 61 FC | 	wrlong	result1, fp
1b57c     08 4E 05 F1 | 	add	fp, #8
1b580     A7 3E 68 FC | 	wrlong	#31, fp
1b584     08 4E 85 F1 | 	sub	fp, #8
1b588                 | LR__2173
1b588                 | ' if t1.result_type=result_string then
1b588     08 4E 05 F1 | 	add	fp, #8
1b58c     A7 2A 02 FB | 	rdlong	local03, fp
1b590     08 4E 85 F1 | 	sub	fp, #8
1b594     1F 2A 0E F2 | 	cmp	local03, #31 wz
1b598     8C 02 90 5D |  if_ne	jmp	#LR__2177
1b59c                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1b59c     A7 12 02 FB | 	rdlong	arg01, fp
1b5a0     BB 01 00 FF 
1b5a4     8C 15 06 F6 | 	mov	arg02, ##@LR__6025
1b5a8     18 BB B0 FD | 	call	#__system___string_cmp
1b5ac     00 FA 0D F2 | 	cmp	result1, #0 wz
1b5b0     52 00 00 AF 
1b5b4     C4 E4 05 A1 |  if_e	add	objptr, ##42180
1b5b8     F2 2A 02 AB |  if_e	rdlong	local03, objptr
1b5bc     A7 2A 62 AC |  if_e	wrlong	local03, fp
1b5c0     52 00 00 AF 
1b5c4     C4 E4 85 A1 |  if_e	sub	objptr, ##42180
1b5c8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1b5cc     52 00 00 5F 
1b5d0     C4 E4 05 51 |  if_ne	add	objptr, ##42180
1b5d4     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
1b5d8     52 00 00 5F 
1b5dc     C4 E4 85 51 |  if_ne	sub	objptr, ##42180
1b5e0                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1b5e0     09 12 06 F6 | 	mov	arg01, #9
1b5e4     10 0E B1 FD | 	call	#__system__close
1b5e8     09 2A 06 F6 | 	mov	local03, #9
1b5ec     4A 00 00 FF 
1b5f0     94 E4 05 F1 | 	add	objptr, ##38036
1b5f4     F2 12 02 FB | 	rdlong	arg01, objptr
1b5f8     4A 00 00 FF 
1b5fc     94 E4 85 F1 | 	sub	objptr, ##38036
1b600     BB 01 00 FF 
1b604     8D 15 06 F6 | 	mov	arg02, ##@LR__6026
1b608     EC BA B0 FD | 	call	#__system___string_concat
1b60c     FD 12 02 F6 | 	mov	arg01, result1
1b610     A7 14 02 FB | 	rdlong	arg02, fp
1b614     E0 BA B0 FD | 	call	#__system___string_concat
1b618     FD 14 02 F6 | 	mov	arg02, result1
1b61c     15 13 02 F6 | 	mov	arg01, local03
1b620     0D 16 06 F6 | 	mov	arg03, #13
1b624     78 C6 B0 FD | 	call	#__system___basic_open_string
1b628     4A 00 00 FF 
1b62c     88 E4 05 F1 | 	add	objptr, ##38024
1b630     F2 2A 02 FB | 	rdlong	local03, objptr
1b634     4A 00 00 FF 
1b638     88 E4 85 F1 | 	sub	objptr, ##38024
1b63c     B0 4E 05 F1 | 	add	fp, #176
1b640     A7 2A 62 FC | 	wrlong	local03, fp
1b644     B0 4E 85 F1 | 	sub	fp, #176
1b648                 | '   saveptr=programstart
1b648                 | '   do
1b648                 | LR__2174
1b648     14 4E 05 F1 | 	add	fp, #20
1b64c     A7 12 02 F6 | 	mov	arg01, fp
1b650     9C 4E 05 F1 | 	add	fp, #156
1b654     A7 14 02 FB | 	rdlong	arg02, fp
1b658     B0 4E 85 F1 | 	sub	fp, #176
1b65c     18 16 06 F6 | 	mov	arg03, #24
1b660     0B 00 00 FF 
1b664     CC E4 05 F1 | 	add	objptr, ##5836
1b668     38 AD B0 FD | 	call	#_psram_spin2_read1
1b66c     2C 4E 05 F1 | 	add	fp, #44
1b670     A7 12 02 F6 | 	mov	arg01, fp
1b674     10 4E 85 F1 | 	sub	fp, #16
1b678     A7 14 02 FB | 	rdlong	arg02, fp
1b67c     04 4E 05 F1 | 	add	fp, #4
1b680     A7 16 02 FB | 	rdlong	arg03, fp
1b684     20 4E 85 F1 | 	sub	fp, #32
1b688     18 AD B0 FD | 	call	#_psram_spin2_read1
1b68c     0B 00 00 FF 
1b690     CC E4 85 F1 | 	sub	objptr, ##5836
1b694     BB 01 00 FF 
1b698     8F 2B 06 F6 | 	mov	local03, ##@LR__6027
1b69c     AC 4E 05 F1 | 	add	fp, #172
1b6a0     A7 2A 62 FC | 	wrlong	local03, fp
1b6a4                 | '     psram.read1(varptr(header(0)),saveptr,24)
1b6a4                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1b6a4                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1b6a4     A0 4E 85 F1 | 	sub	fp, #160
1b6a8     A7 02 68 FC | 	wrlong	#1, fp
1b6ac     14 4E 05 F1 | 	add	fp, #20
1b6b0     A7 2C 02 FB | 	rdlong	local04, fp
1b6b4     20 4E 85 F1 | 	sub	fp, #32
1b6b8     01 2C 06 F1 | 	add	local04, #1
1b6bc                 | LR__2175
1b6bc     0C 4E 05 F1 | 	add	fp, #12
1b6c0     A7 2A 02 FB | 	rdlong	local03, fp
1b6c4     0C 4E 85 F1 | 	sub	fp, #12
1b6c8     16 2B 52 F2 | 	cmps	local03, local04 wc
1b6cc     54 00 90 3D |  if_ae	jmp	#LR__2176
1b6d0     AC 4E 05 F1 | 	add	fp, #172
1b6d4     A7 26 02 FB | 	rdlong	local01, fp
1b6d8     A0 4E 85 F1 | 	sub	fp, #160
1b6dc     A7 2A 02 FB | 	rdlong	local03, fp
1b6e0     01 2A 86 F1 | 	sub	local03, #1
1b6e4     20 4E 05 F1 | 	add	fp, #32
1b6e8     A7 2A 02 F1 | 	add	local03, fp
1b6ec     15 13 C2 FA | 	rdbyte	arg01, local03
1b6f0     2C 4E 85 F1 | 	sub	fp, #44
1b6f4     E8 DB B0 FD | 	call	#__system__Chr_S
1b6f8     FD 14 02 F6 | 	mov	arg02, result1
1b6fc     13 13 02 F6 | 	mov	arg01, local01
1b700     F4 B9 B0 FD | 	call	#__system___string_concat
1b704     AC 4E 05 F1 | 	add	fp, #172
1b708     A7 FA 61 FC | 	wrlong	result1, fp
1b70c     A0 4E 85 F1 | 	sub	fp, #160
1b710     A7 2A 02 FB | 	rdlong	local03, fp
1b714     01 2A 06 F1 | 	add	local03, #1
1b718     A7 2A 62 FC | 	wrlong	local03, fp
1b71c     0C 4E 85 F1 | 	sub	fp, #12
1b720     98 FF 9F FD | 	jmp	#LR__2175
1b724                 | LR__2176
1b724                 | '     print #9, saveline$
1b724     09 12 06 F6 | 	mov	arg01, #9
1b728     14 16 B1 FD | 	call	#__system___getiolock_0614
1b72c     FD 12 02 F6 | 	mov	arg01, result1
1b730     68 B9 B0 FD | 	call	#__system___lockmem
1b734     AC 4E 05 F1 | 	add	fp, #172
1b738     A7 14 02 FB | 	rdlong	arg02, fp
1b73c     AC 4E 85 F1 | 	sub	fp, #172
1b740     09 12 06 F6 | 	mov	arg01, #9
1b744     00 16 06 F6 | 	mov	arg03, #0
1b748     48 C6 B0 FD | 	call	#__system___basic_print_string
1b74c     09 12 06 F6 | 	mov	arg01, #9
1b750     0A 14 06 F6 | 	mov	arg02, #10
1b754     00 16 06 F6 | 	mov	arg03, #0
1b758     E0 C5 B0 FD | 	call	#__system___basic_print_char
1b75c     09 12 06 F6 | 	mov	arg01, #9
1b760     DC 15 B1 FD | 	call	#__system___getiolock_0614
1b764     FD 00 68 FC | 	wrlong	#0, result1
1b768     28 4E 05 F1 | 	add	fp, #40
1b76c     A7 2A 02 FB | 	rdlong	local03, fp
1b770     88 4E 05 F1 | 	add	fp, #136
1b774     A7 2A 62 FC | 	wrlong	local03, fp
1b778     88 4E 85 F1 | 	sub	fp, #136
1b77c     A7 2A 02 FB | 	rdlong	local03, fp
1b780     28 4E 85 F1 | 	sub	fp, #40
1b784     FF FF 3F FF 
1b788     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
1b78c     B8 FE 9F 5D |  if_ne	jmp	#LR__2174
1b790                 | '   close #9  
1b790     09 12 06 F6 | 	mov	arg01, #9
1b794     60 0C B1 FD | 	call	#__system__close
1b798                 | '   print "Saved as ";currentdir$+"/"+loadname
1b798     00 12 06 F6 | 	mov	arg01, #0
1b79c     A0 15 B1 FD | 	call	#__system___getiolock_0614
1b7a0     FD 12 02 F6 | 	mov	arg01, result1
1b7a4     F4 B8 B0 FD | 	call	#__system___lockmem
1b7a8     BB 01 00 FF 
1b7ac     90 15 06 F6 | 	mov	arg02, ##@LR__6028
1b7b0     00 12 06 F6 | 	mov	arg01, #0
1b7b4     00 16 06 F6 | 	mov	arg03, #0
1b7b8     D8 C5 B0 FD | 	call	#__system___basic_print_string
1b7bc     00 28 06 F6 | 	mov	local02, #0
1b7c0     4A 00 00 FF 
1b7c4     94 E4 05 F1 | 	add	objptr, ##38036
1b7c8     F2 12 02 FB | 	rdlong	arg01, objptr
1b7cc     4A 00 00 FF 
1b7d0     94 E4 85 F1 | 	sub	objptr, ##38036
1b7d4     BB 01 00 FF 
1b7d8     9A 15 06 F6 | 	mov	arg02, ##@LR__6029
1b7dc     18 B9 B0 FD | 	call	#__system___string_concat
1b7e0     FD 12 02 F6 | 	mov	arg01, result1
1b7e4     52 00 00 FF 
1b7e8     C4 E4 05 F1 | 	add	objptr, ##42180
1b7ec     F2 14 02 FB | 	rdlong	arg02, objptr
1b7f0     52 00 00 FF 
1b7f4     C4 E4 85 F1 | 	sub	objptr, ##42180
1b7f8     FC B8 B0 FD | 	call	#__system___string_concat
1b7fc     FD 14 02 F6 | 	mov	arg02, result1
1b800     14 13 02 F6 | 	mov	arg01, local02
1b804     00 16 06 F6 | 	mov	arg03, #0
1b808     88 C5 B0 FD | 	call	#__system___basic_print_string
1b80c     00 12 06 F6 | 	mov	arg01, #0
1b810     0A 14 06 F6 | 	mov	arg02, #10
1b814     00 16 06 F6 | 	mov	arg03, #0
1b818     20 C5 B0 FD | 	call	#__system___basic_print_char
1b81c     00 12 06 F6 | 	mov	arg01, #0
1b820     1C 15 B1 FD | 	call	#__system___getiolock_0614
1b824     FD 00 68 FC | 	wrlong	#0, result1
1b828                 | LR__2177
1b828                 | LR__2178
1b828     A7 F0 03 F6 | 	mov	ptra, fp
1b82c     B2 00 A0 FD | 	call	#popregs_
1b830                 | _do_save_ret
1b830     2D 00 64 FD | 	ret
1b834                 | 
1b834                 | ' 
1b834                 | ' ' ------------------ setcolor
1b834                 | ' 
1b834                 | ' sub do_setcolor
1b834                 | _do_setcolor
1b834     00 4A 05 F6 | 	mov	COUNT_, #0
1b838     A8 00 A0 FD | 	call	#pushregs_
1b83c     20 F0 07 F1 | 	add	ptra, #32
1b840     4A 00 00 FF 
1b844     80 E4 05 F1 | 	add	objptr, ##38016
1b848     F2 18 02 FB | 	rdlong	arg04, objptr
1b84c     0C 17 02 F6 | 	mov	arg03, arg04
1b850     01 16 66 F0 | 	shl	arg03, #1
1b854     0C 17 02 F1 | 	add	arg03, arg04
1b858     02 16 66 F0 | 	shl	arg03, #2
1b85c     03 00 00 FF 
1b860     04 E4 85 F1 | 	sub	objptr, ##1540
1b864     F2 16 02 F1 | 	add	arg03, objptr
1b868     0B 19 02 FB | 	rdlong	arg04, arg03
1b86c     1C 4E 05 F1 | 	add	fp, #28
1b870     A7 18 62 FC | 	wrlong	arg04, fp
1b874                 | ' 
1b874                 | ' numpar=compiledline(lineptr_e).result.uresult
1b874                 | ' 
1b874                 | ' if numpar=4 then
1b874     1C 4E 85 F1 | 	sub	fp, #28
1b878     04 18 0E F2 | 	cmp	arg04, #4 wz
1b87c     47 00 00 FF 
1b880     7C E4 85 F1 | 	sub	objptr, ##36476
1b884     E0 00 90 5D |  if_ne	jmp	#LR__2180
1b888     7C 1E BF FD | 	call	#_pop
1b88c     FF 18 02 F6 | 	mov	arg04, result3
1b890     A7 FA 61 FC | 	wrlong	result1, fp
1b894     04 4E 05 F1 | 	add	fp, #4
1b898     A7 FC 61 FC | 	wrlong	result2, fp
1b89c     04 4E 05 F1 | 	add	fp, #4
1b8a0     A7 18 62 FC | 	wrlong	arg04, fp
1b8a4     08 4E 85 F1 | 	sub	fp, #8
1b8a8     A7 12 02 F6 | 	mov	arg01, fp
1b8ac     3C 20 BF FD | 	call	#_converttoint
1b8b0     FD 18 02 F6 | 	mov	arg04, result1
1b8b4     14 4E 05 F1 | 	add	fp, #20
1b8b8     A7 18 62 FC | 	wrlong	arg04, fp
1b8bc     14 4E 85 F1 | 	sub	fp, #20
1b8c0     44 1E BF FD | 	call	#_pop
1b8c4     FF 18 02 F6 | 	mov	arg04, result3
1b8c8     A7 FA 61 FC | 	wrlong	result1, fp
1b8cc     04 4E 05 F1 | 	add	fp, #4
1b8d0     A7 FC 61 FC | 	wrlong	result2, fp
1b8d4     04 4E 05 F1 | 	add	fp, #4
1b8d8     A7 18 62 FC | 	wrlong	arg04, fp
1b8dc     08 4E 85 F1 | 	sub	fp, #8
1b8e0     A7 12 02 F6 | 	mov	arg01, fp
1b8e4     04 20 BF FD | 	call	#_converttoint
1b8e8     FD 18 02 F6 | 	mov	arg04, result1
1b8ec     10 4E 05 F1 | 	add	fp, #16
1b8f0     A7 18 62 FC | 	wrlong	arg04, fp
1b8f4     10 4E 85 F1 | 	sub	fp, #16
1b8f8     0C 1E BF FD | 	call	#_pop
1b8fc     FF 18 02 F6 | 	mov	arg04, result3
1b900     A7 FA 61 FC | 	wrlong	result1, fp
1b904     04 4E 05 F1 | 	add	fp, #4
1b908     A7 FC 61 FC | 	wrlong	result2, fp
1b90c     04 4E 05 F1 | 	add	fp, #4
1b910     A7 18 62 FC | 	wrlong	arg04, fp
1b914     08 4E 85 F1 | 	sub	fp, #8
1b918     A7 12 02 F6 | 	mov	arg01, fp
1b91c     CC 1F BF FD | 	call	#_converttoint
1b920     FD 18 02 F6 | 	mov	arg04, result1
1b924     0C 4E 05 F1 | 	add	fp, #12
1b928     A7 18 62 FC | 	wrlong	arg04, fp
1b92c     0C 4E 85 F1 | 	sub	fp, #12
1b930     D4 1D BF FD | 	call	#_pop
1b934     FF 18 02 F6 | 	mov	arg04, result3
1b938     A7 FA 61 FC | 	wrlong	result1, fp
1b93c     04 4E 05 F1 | 	add	fp, #4
1b940     A7 FC 61 FC | 	wrlong	result2, fp
1b944     04 4E 05 F1 | 	add	fp, #4
1b948     A7 18 62 FC | 	wrlong	arg04, fp
1b94c     08 4E 85 F1 | 	sub	fp, #8
1b950     A7 12 02 F6 | 	mov	arg01, fp
1b954     94 1F BF FD | 	call	#_converttoint
1b958     18 4E 05 F1 | 	add	fp, #24
1b95c     A7 FA 61 FC | 	wrlong	result1, fp
1b960     18 4E 85 F1 | 	sub	fp, #24
1b964     04 01 90 FD | 	jmp	#LR__2183
1b968                 | LR__2180
1b968     1C 4E 05 F1 | 	add	fp, #28
1b96c     A7 18 02 FB | 	rdlong	arg04, fp
1b970     1C 4E 85 F1 | 	sub	fp, #28
1b974     02 18 0E F2 | 	cmp	arg04, #2 wz
1b978     A0 00 90 5D |  if_ne	jmp	#LR__2181
1b97c     88 1D BF FD | 	call	#_pop
1b980     FF 18 02 F6 | 	mov	arg04, result3
1b984     A7 FA 61 FC | 	wrlong	result1, fp
1b988     04 4E 05 F1 | 	add	fp, #4
1b98c     A7 FC 61 FC | 	wrlong	result2, fp
1b990     04 4E 05 F1 | 	add	fp, #4
1b994     A7 18 62 FC | 	wrlong	arg04, fp
1b998     08 4E 85 F1 | 	sub	fp, #8
1b99c     A7 12 02 F6 | 	mov	arg01, fp
1b9a0     48 1F BF FD | 	call	#_converttoint
1b9a4     18 4E 05 F1 | 	add	fp, #24
1b9a8     A7 FA 61 FC | 	wrlong	result1, fp
1b9ac     FD FA E1 F8 | 	getbyte	result1, result1, #0
1b9b0     04 4E 85 F1 | 	sub	fp, #4
1b9b4     A7 FA 61 FC | 	wrlong	result1, fp
1b9b8     04 4E 05 F1 | 	add	fp, #4
1b9bc     A7 18 02 FB | 	rdlong	arg04, fp
1b9c0     0C 19 EA F8 | 	getbyte	arg04, arg04, #1
1b9c4     08 4E 85 F1 | 	sub	fp, #8
1b9c8     A7 18 62 FC | 	wrlong	arg04, fp
1b9cc     08 4E 05 F1 | 	add	fp, #8
1b9d0     A7 18 02 FB | 	rdlong	arg04, fp
1b9d4     0C 19 F2 F8 | 	getbyte	arg04, arg04, #2
1b9d8     0C 4E 85 F1 | 	sub	fp, #12
1b9dc     A7 18 62 FC | 	wrlong	arg04, fp
1b9e0     0C 4E 85 F1 | 	sub	fp, #12
1b9e4     20 1D BF FD | 	call	#_pop
1b9e8     FF 18 02 F6 | 	mov	arg04, result3
1b9ec     A7 FA 61 FC | 	wrlong	result1, fp
1b9f0     04 4E 05 F1 | 	add	fp, #4
1b9f4     A7 FC 61 FC | 	wrlong	result2, fp
1b9f8     04 4E 05 F1 | 	add	fp, #4
1b9fc     A7 18 62 FC | 	wrlong	arg04, fp
1ba00     08 4E 85 F1 | 	sub	fp, #8
1ba04     A7 12 02 F6 | 	mov	arg01, fp
1ba08     E0 1E BF FD | 	call	#_converttoint
1ba0c     18 4E 05 F1 | 	add	fp, #24
1ba10     A7 FA 61 FC | 	wrlong	result1, fp
1ba14     18 4E 85 F1 | 	sub	fp, #24
1ba18     50 00 90 FD | 	jmp	#LR__2182
1ba1c                 | LR__2181
1ba1c                 | '   print "setcolor: "; : printerror(39,runheader(0)) : return  
1ba1c     00 12 06 F6 | 	mov	arg01, #0
1ba20     1C 13 B1 FD | 	call	#__system___getiolock_0614
1ba24     FD 12 02 F6 | 	mov	arg01, result1
1ba28     70 B6 B0 FD | 	call	#__system___lockmem
1ba2c     BB 01 00 FF 
1ba30     9C 15 06 F6 | 	mov	arg02, ##@LR__6030
1ba34     00 12 06 F6 | 	mov	arg01, #0
1ba38     00 16 06 F6 | 	mov	arg03, #0
1ba3c     54 C3 B0 FD | 	call	#__system___basic_print_string
1ba40     00 12 06 F6 | 	mov	arg01, #0
1ba44     F8 12 B1 FD | 	call	#__system___getiolock_0614
1ba48     FD 00 68 FC | 	wrlong	#0, result1
1ba4c     50 00 00 FF 
1ba50     F0 E4 05 F1 | 	add	objptr, ##41200
1ba54     F2 14 02 FB | 	rdlong	arg02, objptr
1ba58     50 00 00 FF 
1ba5c     F0 E4 85 F1 | 	sub	objptr, ##41200
1ba60     27 12 06 F6 | 	mov	arg01, #39
1ba64     84 7B B0 FD | 	call	#_printerror
1ba68     28 00 90 FD | 	jmp	#LR__2184
1ba6c                 | LR__2182
1ba6c                 | LR__2183
1ba6c     18 4E 05 F1 | 	add	fp, #24
1ba70     A7 12 02 FB | 	rdlong	arg01, fp
1ba74     0C 4E 85 F1 | 	sub	fp, #12
1ba78     A7 14 02 FB | 	rdlong	arg02, fp
1ba7c     04 4E 05 F1 | 	add	fp, #4
1ba80     A7 16 02 FB | 	rdlong	arg03, fp
1ba84     04 4E 05 F1 | 	add	fp, #4
1ba88     A7 18 02 FB | 	rdlong	arg04, fp
1ba8c     14 4E 85 F1 | 	sub	fp, #20
1ba90     E4 98 B0 FD | 	call	#_hg010b_spin2_setcolor
1ba94                 | LR__2184
1ba94     A7 F0 03 F6 | 	mov	ptra, fp
1ba98     B2 00 A0 FD | 	call	#popregs_
1ba9c                 | _do_setcolor_ret
1ba9c     2D 00 64 FD | 	ret
1baa0                 | 
1baa0                 | ' 
1baa0                 | ' ' ------------------ setdelay
1baa0                 | ' 
1baa0                 | ' sub do_setdelay
1baa0                 | _do_setdelay
1baa0     02 4A 05 F6 | 	mov	COUNT_, #2
1baa4     A8 00 A0 FD | 	call	#pushregs_
1baa8     18 F0 07 F1 | 	add	ptra, #24
1baac     58 1C BF FD | 	call	#_pop
1bab0     FD 12 02 F6 | 	mov	arg01, result1
1bab4     FE 26 02 F6 | 	mov	local01, result2
1bab8     FF 28 02 F6 | 	mov	local02, result3
1babc     A7 12 62 FC | 	wrlong	arg01, fp
1bac0     04 4E 05 F1 | 	add	fp, #4
1bac4     A7 26 62 FC | 	wrlong	local01, fp
1bac8     04 4E 05 F1 | 	add	fp, #4
1bacc     A7 28 62 FC | 	wrlong	local02, fp
1bad0     08 4E 85 F1 | 	sub	fp, #8
1bad4     30 1C BF FD | 	call	#_pop
1bad8     FD 28 02 F6 | 	mov	local02, result1
1badc     0C 4E 05 F1 | 	add	fp, #12
1bae0     A7 28 62 FC | 	wrlong	local02, fp
1bae4     04 4E 05 F1 | 	add	fp, #4
1bae8     A7 FC 61 FC | 	wrlong	result2, fp
1baec     04 4E 05 F1 | 	add	fp, #4
1baf0     A7 FE 61 FC | 	wrlong	result3, fp
1baf4     08 4E 85 F1 | 	sub	fp, #8
1baf8     A7 12 02 F6 | 	mov	arg01, fp
1bafc     0C 4E 85 F1 | 	sub	fp, #12
1bb00     E8 1D BF FD | 	call	#_converttoint
1bb04     FD 28 02 F6 | 	mov	local02, result1
1bb08     14 27 02 F6 | 	mov	local01, local02
1bb0c     01 26 66 F0 | 	shl	local01, #1
1bb10     14 27 02 F1 | 	add	local01, local02
1bb14     03 26 66 F0 | 	shl	local01, #3
1bb18     14 00 00 FF 
1bb1c     38 E5 05 F1 | 	add	objptr, ##10552
1bb20     F2 26 02 F1 | 	add	local01, objptr
1bb24     A7 12 02 F6 | 	mov	arg01, fp
1bb28     14 00 00 FF 
1bb2c     38 E5 85 F1 | 	sub	objptr, ##10552
1bb30     B8 1D BF FD | 	call	#_converttoint
1bb34     06 26 06 F1 | 	add	local01, #6
1bb38     13 FB 51 FC | 	wrword	result1, local01
1bb3c     A7 F0 03 F6 | 	mov	ptra, fp
1bb40     B2 00 A0 FD | 	call	#popregs_
1bb44                 | _do_setdelay_ret
1bb44     2D 00 64 FD | 	ret
1bb48                 | 
1bb48                 | ' 
1bb48                 | ' ' ------------------ setenv
1bb48                 | ' 
1bb48                 | ' sub do_setenv
1bb48                 | _do_setenv
1bb48     02 4A 05 F6 | 	mov	COUNT_, #2
1bb4c     A8 00 A0 FD | 	call	#pushregs_
1bb50     18 F0 07 F1 | 	add	ptra, #24
1bb54     B0 1B BF FD | 	call	#_pop
1bb58     FD 12 02 F6 | 	mov	arg01, result1
1bb5c     FE 26 02 F6 | 	mov	local01, result2
1bb60     FF 28 02 F6 | 	mov	local02, result3
1bb64     A7 12 62 FC | 	wrlong	arg01, fp
1bb68     04 4E 05 F1 | 	add	fp, #4
1bb6c     A7 26 62 FC | 	wrlong	local01, fp
1bb70     04 4E 05 F1 | 	add	fp, #4
1bb74     A7 28 62 FC | 	wrlong	local02, fp
1bb78     08 4E 85 F1 | 	sub	fp, #8
1bb7c     88 1B BF FD | 	call	#_pop
1bb80     FD 28 02 F6 | 	mov	local02, result1
1bb84     0C 4E 05 F1 | 	add	fp, #12
1bb88     A7 28 62 FC | 	wrlong	local02, fp
1bb8c     04 4E 05 F1 | 	add	fp, #4
1bb90     A7 FC 61 FC | 	wrlong	result2, fp
1bb94     04 4E 05 F1 | 	add	fp, #4
1bb98     A7 FE 61 FC | 	wrlong	result3, fp
1bb9c     08 4E 85 F1 | 	sub	fp, #8
1bba0     A7 12 02 F6 | 	mov	arg01, fp
1bba4     0C 4E 85 F1 | 	sub	fp, #12
1bba8     40 1D BF FD | 	call	#_converttoint
1bbac     FD 28 02 F6 | 	mov	local02, result1
1bbb0     14 27 02 F6 | 	mov	local01, local02
1bbb4     01 26 66 F0 | 	shl	local01, #1
1bbb8     14 27 02 F1 | 	add	local01, local02
1bbbc     03 26 66 F0 | 	shl	local01, #3
1bbc0     14 00 00 FF 
1bbc4     38 E5 05 F1 | 	add	objptr, ##10552
1bbc8     F2 26 02 F1 | 	add	local01, objptr
1bbcc     A7 12 02 F6 | 	mov	arg01, fp
1bbd0     14 00 00 FF 
1bbd4     38 E5 85 F1 | 	sub	objptr, ##10552
1bbd8     10 1D BF FD | 	call	#_converttoint
1bbdc     05 26 06 F1 | 	add	local01, #5
1bbe0     13 FB 41 FC | 	wrbyte	result1, local01
1bbe4     A7 F0 03 F6 | 	mov	ptra, fp
1bbe8     B2 00 A0 FD | 	call	#popregs_
1bbec                 | _do_setenv_ret
1bbec     2D 00 64 FD | 	ret
1bbf0                 | 
1bbf0                 | ' 
1bbf0                 | ' ' ------------------ setlen
1bbf0                 | ' 
1bbf0                 | ' sub do_setlen
1bbf0                 | _do_setlen
1bbf0     02 4A 05 F6 | 	mov	COUNT_, #2
1bbf4     A8 00 A0 FD | 	call	#pushregs_
1bbf8     18 F0 07 F1 | 	add	ptra, #24
1bbfc     08 1B BF FD | 	call	#_pop
1bc00     FD 12 02 F6 | 	mov	arg01, result1
1bc04     FE 26 02 F6 | 	mov	local01, result2
1bc08     FF 28 02 F6 | 	mov	local02, result3
1bc0c     A7 12 62 FC | 	wrlong	arg01, fp
1bc10     04 4E 05 F1 | 	add	fp, #4
1bc14     A7 26 62 FC | 	wrlong	local01, fp
1bc18     04 4E 05 F1 | 	add	fp, #4
1bc1c     A7 28 62 FC | 	wrlong	local02, fp
1bc20     08 4E 85 F1 | 	sub	fp, #8
1bc24     E0 1A BF FD | 	call	#_pop
1bc28     FD 28 02 F6 | 	mov	local02, result1
1bc2c     0C 4E 05 F1 | 	add	fp, #12
1bc30     A7 28 62 FC | 	wrlong	local02, fp
1bc34     04 4E 05 F1 | 	add	fp, #4
1bc38     A7 FC 61 FC | 	wrlong	result2, fp
1bc3c     04 4E 05 F1 | 	add	fp, #4
1bc40     A7 FE 61 FC | 	wrlong	result3, fp
1bc44     08 4E 85 F1 | 	sub	fp, #8
1bc48     A7 12 02 F6 | 	mov	arg01, fp
1bc4c     0C 4E 85 F1 | 	sub	fp, #12
1bc50     98 1C BF FD | 	call	#_converttoint
1bc54     FD 28 02 F6 | 	mov	local02, result1
1bc58     14 27 02 F6 | 	mov	local01, local02
1bc5c     01 26 66 F0 | 	shl	local01, #1
1bc60     14 27 02 F1 | 	add	local01, local02
1bc64     03 26 66 F0 | 	shl	local01, #3
1bc68     14 00 00 FF 
1bc6c     38 E5 05 F1 | 	add	objptr, ##10552
1bc70     F2 26 02 F1 | 	add	local01, objptr
1bc74     A7 12 02 F6 | 	mov	arg01, fp
1bc78     14 00 00 FF 
1bc7c     38 E5 85 F1 | 	sub	objptr, ##10552
1bc80     24 1D BF FD | 	call	#_converttofloat
1bc84     08 26 06 F1 | 	add	local01, #8
1bc88     13 FB 61 FC | 	wrlong	result1, local01
1bc8c     A7 F0 03 F6 | 	mov	ptra, fp
1bc90     B2 00 A0 FD | 	call	#popregs_
1bc94                 | _do_setlen_ret
1bc94     2D 00 64 FD | 	ret
1bc98                 | 
1bc98                 | ' 
1bc98                 | ' ' ------------------ setpan
1bc98                 | ' 
1bc98                 | ' sub do_setpan
1bc98                 | _do_setpan
1bc98     02 4A 05 F6 | 	mov	COUNT_, #2
1bc9c     A8 00 A0 FD | 	call	#pushregs_
1bca0     18 F0 07 F1 | 	add	ptra, #24
1bca4     60 1A BF FD | 	call	#_pop
1bca8     FD 12 02 F6 | 	mov	arg01, result1
1bcac     FE 26 02 F6 | 	mov	local01, result2
1bcb0     FF 28 02 F6 | 	mov	local02, result3
1bcb4     A7 12 62 FC | 	wrlong	arg01, fp
1bcb8     04 4E 05 F1 | 	add	fp, #4
1bcbc     A7 26 62 FC | 	wrlong	local01, fp
1bcc0     04 4E 05 F1 | 	add	fp, #4
1bcc4     A7 28 62 FC | 	wrlong	local02, fp
1bcc8     08 4E 85 F1 | 	sub	fp, #8
1bccc     38 1A BF FD | 	call	#_pop
1bcd0     FD 28 02 F6 | 	mov	local02, result1
1bcd4     0C 4E 05 F1 | 	add	fp, #12
1bcd8     A7 28 62 FC | 	wrlong	local02, fp
1bcdc     04 4E 05 F1 | 	add	fp, #4
1bce0     A7 FC 61 FC | 	wrlong	result2, fp
1bce4     04 4E 05 F1 | 	add	fp, #4
1bce8     A7 FE 61 FC | 	wrlong	result3, fp
1bcec     08 4E 85 F1 | 	sub	fp, #8
1bcf0     A7 12 02 F6 | 	mov	arg01, fp
1bcf4     0C 4E 85 F1 | 	sub	fp, #12
1bcf8     F0 1B BF FD | 	call	#_converttoint
1bcfc     FD 28 02 F6 | 	mov	local02, result1
1bd00     14 27 02 F6 | 	mov	local01, local02
1bd04     01 26 66 F0 | 	shl	local01, #1
1bd08     14 27 02 F1 | 	add	local01, local02
1bd0c     03 26 66 F0 | 	shl	local01, #3
1bd10     14 00 00 FF 
1bd14     38 E5 05 F1 | 	add	objptr, ##10552
1bd18     F2 26 02 F1 | 	add	local01, objptr
1bd1c     A7 12 02 F6 | 	mov	arg01, fp
1bd20     14 00 00 FF 
1bd24     38 E5 85 F1 | 	sub	objptr, ##10552
1bd28     7C 1C BF FD | 	call	#_converttofloat
1bd2c     10 26 06 F1 | 	add	local01, #16
1bd30     13 FB 61 FC | 	wrlong	result1, local01
1bd34     A7 F0 03 F6 | 	mov	ptra, fp
1bd38     B2 00 A0 FD | 	call	#popregs_
1bd3c                 | _do_setpan_ret
1bd3c     2D 00 64 FD | 	ret
1bd40                 | 
1bd40                 | ' 
1bd40                 | ' ' ------------------ setsustain
1bd40                 | ' 
1bd40                 | ' sub do_setsustain
1bd40                 | _do_setsustain
1bd40     02 4A 05 F6 | 	mov	COUNT_, #2
1bd44     A8 00 A0 FD | 	call	#pushregs_
1bd48     18 F0 07 F1 | 	add	ptra, #24
1bd4c     B8 19 BF FD | 	call	#_pop
1bd50     FD 12 02 F6 | 	mov	arg01, result1
1bd54     FE 26 02 F6 | 	mov	local01, result2
1bd58     FF 28 02 F6 | 	mov	local02, result3
1bd5c     A7 12 62 FC | 	wrlong	arg01, fp
1bd60     04 4E 05 F1 | 	add	fp, #4
1bd64     A7 26 62 FC | 	wrlong	local01, fp
1bd68     04 4E 05 F1 | 	add	fp, #4
1bd6c     A7 28 62 FC | 	wrlong	local02, fp
1bd70     08 4E 85 F1 | 	sub	fp, #8
1bd74     90 19 BF FD | 	call	#_pop
1bd78     FD 28 02 F6 | 	mov	local02, result1
1bd7c     0C 4E 05 F1 | 	add	fp, #12
1bd80     A7 28 62 FC | 	wrlong	local02, fp
1bd84     04 4E 05 F1 | 	add	fp, #4
1bd88     A7 FC 61 FC | 	wrlong	result2, fp
1bd8c     04 4E 05 F1 | 	add	fp, #4
1bd90     A7 FE 61 FC | 	wrlong	result3, fp
1bd94     08 4E 85 F1 | 	sub	fp, #8
1bd98     A7 12 02 F6 | 	mov	arg01, fp
1bd9c     0C 4E 85 F1 | 	sub	fp, #12
1bda0     48 1B BF FD | 	call	#_converttoint
1bda4     FD 28 02 F6 | 	mov	local02, result1
1bda8     14 27 02 F6 | 	mov	local01, local02
1bdac     01 26 66 F0 | 	shl	local01, #1
1bdb0     14 27 02 F1 | 	add	local01, local02
1bdb4     03 26 66 F0 | 	shl	local01, #3
1bdb8     14 00 00 FF 
1bdbc     38 E5 05 F1 | 	add	objptr, ##10552
1bdc0     F2 26 02 F1 | 	add	local01, objptr
1bdc4     A7 12 02 F6 | 	mov	arg01, fp
1bdc8     14 00 00 FF 
1bdcc     38 E5 85 F1 | 	sub	objptr, ##10552
1bdd0     18 1B BF FD | 	call	#_converttoint
1bdd4     14 26 06 F1 | 	add	local01, #20
1bdd8     13 FB 51 FC | 	wrword	result1, local01
1bddc     A7 F0 03 F6 | 	mov	ptra, fp
1bde0     B2 00 A0 FD | 	call	#popregs_
1bde4                 | _do_setsustain_ret
1bde4     2D 00 64 FD | 	ret
1bde8                 | 
1bde8                 | ' 
1bde8                 | ' ' ------------------ setvol
1bde8                 | ' 
1bde8                 | ' sub do_setvol
1bde8                 | _do_setvol
1bde8     02 4A 05 F6 | 	mov	COUNT_, #2
1bdec     A8 00 A0 FD | 	call	#pushregs_
1bdf0     18 F0 07 F1 | 	add	ptra, #24
1bdf4     10 19 BF FD | 	call	#_pop
1bdf8     FD 12 02 F6 | 	mov	arg01, result1
1bdfc     FE 26 02 F6 | 	mov	local01, result2
1be00     FF 28 02 F6 | 	mov	local02, result3
1be04     A7 12 62 FC | 	wrlong	arg01, fp
1be08     04 4E 05 F1 | 	add	fp, #4
1be0c     A7 26 62 FC | 	wrlong	local01, fp
1be10     04 4E 05 F1 | 	add	fp, #4
1be14     A7 28 62 FC | 	wrlong	local02, fp
1be18     08 4E 85 F1 | 	sub	fp, #8
1be1c     E8 18 BF FD | 	call	#_pop
1be20     FD 28 02 F6 | 	mov	local02, result1
1be24     0C 4E 05 F1 | 	add	fp, #12
1be28     A7 28 62 FC | 	wrlong	local02, fp
1be2c     04 4E 05 F1 | 	add	fp, #4
1be30     A7 FC 61 FC | 	wrlong	result2, fp
1be34     04 4E 05 F1 | 	add	fp, #4
1be38     A7 FE 61 FC | 	wrlong	result3, fp
1be3c     08 4E 85 F1 | 	sub	fp, #8
1be40     A7 12 02 F6 | 	mov	arg01, fp
1be44     0C 4E 85 F1 | 	sub	fp, #12
1be48     A0 1A BF FD | 	call	#_converttoint
1be4c     FD 28 02 F6 | 	mov	local02, result1
1be50     14 27 02 F6 | 	mov	local01, local02
1be54     01 26 66 F0 | 	shl	local01, #1
1be58     14 27 02 F1 | 	add	local01, local02
1be5c     03 26 66 F0 | 	shl	local01, #3
1be60     14 00 00 FF 
1be64     38 E5 05 F1 | 	add	objptr, ##10552
1be68     F2 26 02 F1 | 	add	local01, objptr
1be6c     A7 12 02 F6 | 	mov	arg01, fp
1be70     14 00 00 FF 
1be74     38 E5 85 F1 | 	sub	objptr, ##10552
1be78     2C 1B BF FD | 	call	#_converttofloat
1be7c     0C 26 06 F1 | 	add	local01, #12
1be80     13 FB 61 FC | 	wrlong	result1, local01
1be84     A7 F0 03 F6 | 	mov	ptra, fp
1be88     B2 00 A0 FD | 	call	#popregs_
1be8c                 | _do_setvol_ret
1be8c     2D 00 64 FD | 	ret
1be90                 | 
1be90                 | ' 
1be90                 | ' ' ------------------ setwave
1be90                 | ' 
1be90                 | ' sub do_setwave
1be90                 | _do_setwave
1be90     02 4A 05 F6 | 	mov	COUNT_, #2
1be94     A8 00 A0 FD | 	call	#pushregs_
1be98     18 F0 07 F1 | 	add	ptra, #24
1be9c     68 18 BF FD | 	call	#_pop
1bea0     FD 12 02 F6 | 	mov	arg01, result1
1bea4     FE 26 02 F6 | 	mov	local01, result2
1bea8     FF 28 02 F6 | 	mov	local02, result3
1beac     A7 12 62 FC | 	wrlong	arg01, fp
1beb0     04 4E 05 F1 | 	add	fp, #4
1beb4     A7 26 62 FC | 	wrlong	local01, fp
1beb8     04 4E 05 F1 | 	add	fp, #4
1bebc     A7 28 62 FC | 	wrlong	local02, fp
1bec0     08 4E 85 F1 | 	sub	fp, #8
1bec4     40 18 BF FD | 	call	#_pop
1bec8     FD 28 02 F6 | 	mov	local02, result1
1becc     0C 4E 05 F1 | 	add	fp, #12
1bed0     A7 28 62 FC | 	wrlong	local02, fp
1bed4     04 4E 05 F1 | 	add	fp, #4
1bed8     A7 FC 61 FC | 	wrlong	result2, fp
1bedc     04 4E 05 F1 | 	add	fp, #4
1bee0     A7 FE 61 FC | 	wrlong	result3, fp
1bee4     08 4E 85 F1 | 	sub	fp, #8
1bee8     A7 12 02 F6 | 	mov	arg01, fp
1beec     0C 4E 85 F1 | 	sub	fp, #12
1bef0     F8 19 BF FD | 	call	#_converttoint
1bef4     FD 28 02 F6 | 	mov	local02, result1
1bef8     14 27 02 F6 | 	mov	local01, local02
1befc     01 26 66 F0 | 	shl	local01, #1
1bf00     14 27 02 F1 | 	add	local01, local02
1bf04     03 26 66 F0 | 	shl	local01, #3
1bf08     14 00 00 FF 
1bf0c     38 E5 05 F1 | 	add	objptr, ##10552
1bf10     F2 26 02 F1 | 	add	local01, objptr
1bf14     A7 12 02 F6 | 	mov	arg01, fp
1bf18     14 00 00 FF 
1bf1c     38 E5 85 F1 | 	sub	objptr, ##10552
1bf20     C8 19 BF FD | 	call	#_converttoint
1bf24     04 26 06 F1 | 	add	local01, #4
1bf28     13 FB 41 FC | 	wrbyte	result1, local01
1bf2c     A7 F0 03 F6 | 	mov	ptra, fp
1bf30     B2 00 A0 FD | 	call	#popregs_
1bf34                 | _do_setwave_ret
1bf34     2D 00 64 FD | 	ret
1bf38                 | 
1bf38                 | ' 
1bf38                 | ' ' ------------------ shutup
1bf38                 | ' 
1bf38                 | ' sub do_shutup
1bf38                 | _do_shutup
1bf38     03 4A 05 F6 | 	mov	COUNT_, #3
1bf3c     A8 00 A0 FD | 	call	#pushregs_
1bf40     18 F0 07 F1 | 	add	ptra, #24
1bf44     4A 00 00 FF 
1bf48     80 E4 05 F1 | 	add	objptr, ##38016
1bf4c     F2 26 02 FB | 	rdlong	local01, objptr
1bf50     13 29 02 F6 | 	mov	local02, local01
1bf54     01 28 66 F0 | 	shl	local02, #1
1bf58     13 29 02 F1 | 	add	local02, local01
1bf5c     02 28 66 F0 | 	shl	local02, #2
1bf60     03 00 00 FF 
1bf64     04 E4 85 F1 | 	sub	objptr, ##1540
1bf68     F2 28 02 F1 | 	add	local02, objptr
1bf6c     14 2B 0A FB | 	rdlong	local03, local02 wz
1bf70     14 4E 05 F1 | 	add	fp, #20
1bf74     A7 2A 62 FC | 	wrlong	local03, fp
1bf78                 | ' 
1bf78                 | ' numpar=compiledline(lineptr_e).result.uresult
1bf78                 | ' if numpar=0 then
1bf78     14 4E 85 F1 | 	sub	fp, #20
1bf7c     47 00 00 FF 
1bf80     7C E4 85 F1 | 	sub	objptr, ##36476
1bf84     50 00 90 5D |  if_ne	jmp	#LR__2192
1bf88                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1bf88     10 4E 05 F1 | 	add	fp, #16
1bf8c     A7 00 68 FC | 	wrlong	#0, fp
1bf90     37 00 00 FF 
1bf94     10 E4 05 F1 | 	add	objptr, ##28176
1bf98     97 16 48 FB | 	callpa	#(@LR__2191-@LR__2190)>>2,fcache_load_ptr_
1bf9c                 | LR__2190
1bf9c     F2 12 02 FB | 	rdlong	arg01, objptr
1bfa0     A7 2A 02 FB | 	rdlong	local03, fp
1bfa4     06 2A 66 F0 | 	shl	local03, #6
1bfa8     15 13 02 F1 | 	add	arg01, local03
1bfac     14 12 06 F1 | 	add	arg01, #20
1bfb0     09 01 58 FC | 	wrword	#0, arg01
1bfb4     A7 2A 02 FB | 	rdlong	local03, fp
1bfb8     01 2A 06 F1 | 	add	local03, #1
1bfbc     A7 2A 62 FC | 	wrlong	local03, fp
1bfc0     08 2A 56 F2 | 	cmps	local03, #8 wc
1bfc4     D4 FF 9F CD |  if_b	jmp	#LR__2190
1bfc8                 | LR__2191
1bfc8     37 00 00 FF 
1bfcc     10 E4 85 F1 | 	sub	objptr, ##28176
1bfd0     10 4E 85 F1 | 	sub	fp, #16
1bfd4     64 00 90 FD | 	jmp	#LR__2193
1bfd8                 | LR__2192
1bfd8     2C 17 BF FD | 	call	#_pop
1bfdc     FF 26 02 F6 | 	mov	local01, result3
1bfe0     A7 FA 61 FC | 	wrlong	result1, fp
1bfe4     04 4E 05 F1 | 	add	fp, #4
1bfe8     A7 FC 61 FC | 	wrlong	result2, fp
1bfec     04 4E 05 F1 | 	add	fp, #4
1bff0     A7 26 62 FC | 	wrlong	local01, fp
1bff4     08 4E 85 F1 | 	sub	fp, #8
1bff8     A7 12 02 F6 | 	mov	arg01, fp
1bffc     EC 18 BF FD | 	call	#_converttoint
1c000     FD 2A 52 F6 | 	abs	local03, result1 wc
1c004     07 2A 06 F5 | 	and	local03, #7
1c008     15 29 82 F6 | 	negc	local02, local03
1c00c     0C 4E 05 F1 | 	add	fp, #12
1c010     A7 28 62 FC | 	wrlong	local02, fp
1c014     37 00 00 FF 
1c018     10 E4 05 F1 | 	add	objptr, ##28176
1c01c     F2 12 02 FB | 	rdlong	arg01, objptr
1c020     37 00 00 FF 
1c024     10 E4 85 F1 | 	sub	objptr, ##28176
1c028     0C 4E 85 F1 | 	sub	fp, #12
1c02c     06 28 66 F0 | 	shl	local02, #6
1c030     14 13 02 F1 | 	add	arg01, local02
1c034     14 12 06 F1 | 	add	arg01, #20
1c038     09 01 58 FC | 	wrword	#0, arg01
1c03c                 | LR__2193
1c03c     A7 F0 03 F6 | 	mov	ptra, fp
1c040     B2 00 A0 FD | 	call	#popregs_
1c044                 | _do_shutup_ret
1c044     2D 00 64 FD | 	ret
1c048                 | 
1c048                 | ' 
1c048                 | ' ' ------------------ sin
1c048                 | ' 
1c048                 | ' sub do_sin
1c048                 | _do_sin
1c048     01 4A 05 F6 | 	mov	COUNT_, #1
1c04c     A8 00 A0 FD | 	call	#pushregs_
1c050     10 F0 07 F1 | 	add	ptra, #16
1c054     4A 00 00 FF 
1c058     80 E4 05 F1 | 	add	objptr, ##38016
1c05c     F2 26 02 FB | 	rdlong	local01, objptr
1c060     13 17 02 F6 | 	mov	arg03, local01
1c064     01 16 66 F0 | 	shl	arg03, #1
1c068     13 17 02 F1 | 	add	arg03, local01
1c06c     02 16 66 F0 | 	shl	arg03, #2
1c070     03 00 00 FF 
1c074     04 E4 85 F1 | 	sub	objptr, ##1540
1c078     F2 16 02 F1 | 	add	arg03, objptr
1c07c     0B 17 02 FB | 	rdlong	arg03, arg03
1c080     0C 4E 05 F1 | 	add	fp, #12
1c084     A7 16 62 FC | 	wrlong	arg03, fp
1c088                 | ' 
1c088                 | ' numpar=compiledline(lineptr_e).result.uresult
1c088                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1c088     0C 4E 85 F1 | 	sub	fp, #12
1c08c     02 16 16 F2 | 	cmp	arg03, #2 wc
1c090     47 00 00 FF 
1c094     7C E4 85 F1 | 	sub	objptr, ##36476
1c098     0C 4E 05 C1 |  if_b	add	fp, #12
1c09c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c0a0     0C 4E 85 C1 |  if_b	sub	fp, #12
1c0a4     40 00 90 4D |  if_c_and_nz	jmp	#LR__2200
1c0a8     00 12 06 F6 | 	mov	arg01, #0
1c0ac     90 0C B1 FD | 	call	#__system___getiolock_0614
1c0b0     FD 12 02 F6 | 	mov	arg01, result1
1c0b4     E4 AF B0 FD | 	call	#__system___lockmem
1c0b8     BB 01 00 FF 
1c0bc     A7 15 06 F6 | 	mov	arg02, ##@LR__6031
1c0c0     00 12 06 F6 | 	mov	arg01, #0
1c0c4     00 16 06 F6 | 	mov	arg03, #0
1c0c8     C8 BC B0 FD | 	call	#__system___basic_print_string
1c0cc     00 12 06 F6 | 	mov	arg01, #0
1c0d0     6C 0C B1 FD | 	call	#__system___getiolock_0614
1c0d4     FD 00 68 FC | 	wrlong	#0, result1
1c0d8     27 12 06 F6 | 	mov	arg01, #39
1c0dc     00 14 06 F6 | 	mov	arg02, #0
1c0e0     08 75 B0 FD | 	call	#_printerror
1c0e4     64 00 90 FD | 	jmp	#LR__2201
1c0e8                 | LR__2200
1c0e8     1C 16 BF FD | 	call	#_pop
1c0ec     A7 FA 61 FC | 	wrlong	result1, fp
1c0f0     04 4E 05 F1 | 	add	fp, #4
1c0f4     A7 FC 61 FC | 	wrlong	result2, fp
1c0f8     04 4E 05 F1 | 	add	fp, #4
1c0fc     A7 FE 61 FC | 	wrlong	result3, fp
1c100     08 4E 85 F1 | 	sub	fp, #8
1c104     52 00 00 FF 
1c108     A8 E4 05 F1 | 	add	objptr, ##42152
1c10c     F2 26 02 FB | 	rdlong	local01, objptr
1c110     52 00 00 FF 
1c114     A8 E4 85 F1 | 	sub	objptr, ##42152
1c118     A7 12 02 F6 | 	mov	arg01, fp
1c11c     88 18 BF FD | 	call	#_converttofloat
1c120     FD 14 02 F6 | 	mov	arg02, result1
1c124     13 13 02 F6 | 	mov	arg01, local01
1c128     EC DD B0 FD | 	call	#__system___float_mul
1c12c     FD 12 02 F6 | 	mov	arg01, result1
1c130     44 E7 B0 FD | 	call	#__system____builtin_sinf
1c134     A7 FA 61 FC | 	wrlong	result1, fp
1c138     08 4E 05 F1 | 	add	fp, #8
1c13c     A7 3C 68 FC | 	wrlong	#30, fp
1c140     08 4E 85 F1 | 	sub	fp, #8
1c144     A7 12 02 F6 | 	mov	arg01, fp
1c148     54 16 BF FD | 	call	#_push
1c14c                 | LR__2201
1c14c     A7 F0 03 F6 | 	mov	ptra, fp
1c150     B2 00 A0 FD | 	call	#popregs_
1c154                 | _do_sin_ret
1c154     2D 00 64 FD | 	ret
1c158                 | 
1c158                 | ' 
1c158                 | ' ' ------------------ skip
1c158                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1c158                 | ' 
1c158                 | ' sub do_skip
1c158                 | _do_skip
1c158     4A 00 00 FF 
1c15c     80 E4 05 F1 | 	add	objptr, ##38016
1c160     F2 00 02 FB | 	rdlong	_var01, objptr
1c164     00 03 02 F6 | 	mov	_var02, _var01
1c168     01 02 66 F0 | 	shl	_var02, #1
1c16c     00 03 02 F1 | 	add	_var02, _var01
1c170     02 02 66 F0 | 	shl	_var02, #2
1c174     03 00 00 FF 
1c178     04 E4 85 F1 | 	sub	objptr, ##1540
1c17c     F2 02 02 F1 | 	add	_var02, objptr
1c180     01 03 02 FB | 	rdlong	_var02, _var02
1c184     01 02 86 F1 | 	sub	_var02, #1
1c188     03 00 00 FF 
1c18c     04 E4 05 F1 | 	add	objptr, ##1540
1c190     F2 02 62 FC | 	wrlong	_var02, objptr
1c194     4A 00 00 FF 
1c198     80 E4 85 F1 | 	sub	objptr, ##38016
1c19c                 | _do_skip_ret
1c19c     2D 00 64 FD | 	ret
1c1a0                 | 
1c1a0                 | ' 
1c1a0                 | ' ' ------------------ sprite
1c1a0                 | ' 
1c1a0                 | ' sub do_sprite
1c1a0                 | _do_sprite
1c1a0     00 4A 05 F6 | 	mov	COUNT_, #0
1c1a4     A8 00 A0 FD | 	call	#pushregs_
1c1a8     30 F0 07 F1 | 	add	ptra, #48
1c1ac     58 15 BF FD | 	call	#_pop
1c1b0     FD 16 02 F6 | 	mov	arg03, result1
1c1b4     FE 14 02 F6 | 	mov	arg02, result2
1c1b8     FF 12 02 F6 | 	mov	arg01, result3
1c1bc     18 4E 05 F1 | 	add	fp, #24
1c1c0     A7 16 62 FC | 	wrlong	arg03, fp
1c1c4     04 4E 05 F1 | 	add	fp, #4
1c1c8     A7 14 62 FC | 	wrlong	arg02, fp
1c1cc     04 4E 05 F1 | 	add	fp, #4
1c1d0     A7 12 62 FC | 	wrlong	arg01, fp
1c1d4     20 4E 85 F1 | 	sub	fp, #32
1c1d8     2C 15 BF FD | 	call	#_pop
1c1dc     FD 16 02 F6 | 	mov	arg03, result1
1c1e0     FE 14 02 F6 | 	mov	arg02, result2
1c1e4     FF 12 02 F6 | 	mov	arg01, result3
1c1e8     0C 4E 05 F1 | 	add	fp, #12
1c1ec     A7 16 62 FC | 	wrlong	arg03, fp
1c1f0     04 4E 05 F1 | 	add	fp, #4
1c1f4     A7 14 62 FC | 	wrlong	arg02, fp
1c1f8     04 4E 05 F1 | 	add	fp, #4
1c1fc     A7 12 62 FC | 	wrlong	arg01, fp
1c200     14 4E 85 F1 | 	sub	fp, #20
1c204     00 15 BF FD | 	call	#_pop
1c208     FF 16 02 F6 | 	mov	arg03, result3
1c20c     A7 FA 61 FC | 	wrlong	result1, fp
1c210     04 4E 05 F1 | 	add	fp, #4
1c214     A7 FC 61 FC | 	wrlong	result2, fp
1c218     04 4E 05 F1 | 	add	fp, #4
1c21c     A7 16 62 FC | 	wrlong	arg03, fp
1c220     08 4E 85 F1 | 	sub	fp, #8
1c224     A7 12 02 F6 | 	mov	arg01, fp
1c228     C0 16 BF FD | 	call	#_converttoint
1c22c     24 4E 05 F1 | 	add	fp, #36
1c230     A7 FA 61 FC | 	wrlong	result1, fp
1c234     18 4E 85 F1 | 	sub	fp, #24
1c238     A7 12 02 F6 | 	mov	arg01, fp
1c23c     0C 4E 85 F1 | 	sub	fp, #12
1c240     A8 16 BF FD | 	call	#_converttoint
1c244     28 4E 05 F1 | 	add	fp, #40
1c248     A7 FA 61 FC | 	wrlong	result1, fp
1c24c     10 4E 85 F1 | 	sub	fp, #16
1c250     A7 12 02 F6 | 	mov	arg01, fp
1c254     18 4E 85 F1 | 	sub	fp, #24
1c258     90 16 BF FD | 	call	#_converttoint
1c25c     2C 4E 05 F1 | 	add	fp, #44
1c260     A7 FA 61 FC | 	wrlong	result1, fp
1c264     08 4E 85 F1 | 	sub	fp, #8
1c268     A7 12 02 FB | 	rdlong	arg01, fp
1c26c     04 4E 05 F1 | 	add	fp, #4
1c270     A7 14 02 FB | 	rdlong	arg02, fp
1c274     FD 16 02 F6 | 	mov	arg03, result1
1c278     28 4E 85 F1 | 	sub	fp, #40
1c27c     70 83 B0 FD | 	call	#_hg010b_spin2_setspritepos
1c280     A7 F0 03 F6 | 	mov	ptra, fp
1c284     B2 00 A0 FD | 	call	#popregs_
1c288                 | _do_sprite_ret
1c288     2D 00 64 FD | 	ret
1c28c                 | 
1c28c                 | ' 
1c28c                 | ' ' ------------------ sqr
1c28c                 | ' 
1c28c                 | ' sub do_sqr
1c28c                 | _do_sqr
1c28c     01 4A 05 F6 | 	mov	COUNT_, #1
1c290     A8 00 A0 FD | 	call	#pushregs_
1c294     10 F0 07 F1 | 	add	ptra, #16
1c298     4A 00 00 FF 
1c29c     80 E4 05 F1 | 	add	objptr, ##38016
1c2a0     F2 26 02 FB | 	rdlong	local01, objptr
1c2a4     13 17 02 F6 | 	mov	arg03, local01
1c2a8     01 16 66 F0 | 	shl	arg03, #1
1c2ac     13 17 02 F1 | 	add	arg03, local01
1c2b0     02 16 66 F0 | 	shl	arg03, #2
1c2b4     03 00 00 FF 
1c2b8     04 E4 85 F1 | 	sub	objptr, ##1540
1c2bc     F2 16 02 F1 | 	add	arg03, objptr
1c2c0     0B 17 02 FB | 	rdlong	arg03, arg03
1c2c4     0C 4E 05 F1 | 	add	fp, #12
1c2c8     A7 16 62 FC | 	wrlong	arg03, fp
1c2cc                 | ' 
1c2cc                 | ' numpar=compiledline(lineptr_e).result.uresult
1c2cc                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1c2cc     0C 4E 85 F1 | 	sub	fp, #12
1c2d0     02 16 16 F2 | 	cmp	arg03, #2 wc
1c2d4     47 00 00 FF 
1c2d8     7C E4 85 F1 | 	sub	objptr, ##36476
1c2dc     0C 4E 05 C1 |  if_b	add	fp, #12
1c2e0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c2e4     0C 4E 85 C1 |  if_b	sub	fp, #12
1c2e8     40 00 90 4D |  if_c_and_nz	jmp	#LR__2210
1c2ec     00 12 06 F6 | 	mov	arg01, #0
1c2f0     4C 0A B1 FD | 	call	#__system___getiolock_0614
1c2f4     FD 12 02 F6 | 	mov	arg01, result1
1c2f8     A0 AD B0 FD | 	call	#__system___lockmem
1c2fc     BB 01 00 FF 
1c300     AD 15 06 F6 | 	mov	arg02, ##@LR__6032
1c304     00 12 06 F6 | 	mov	arg01, #0
1c308     00 16 06 F6 | 	mov	arg03, #0
1c30c     84 BA B0 FD | 	call	#__system___basic_print_string
1c310     00 12 06 F6 | 	mov	arg01, #0
1c314     28 0A B1 FD | 	call	#__system___getiolock_0614
1c318     FD 00 68 FC | 	wrlong	#0, result1
1c31c     27 12 06 F6 | 	mov	arg01, #39
1c320     00 14 06 F6 | 	mov	arg02, #0
1c324     C4 72 B0 FD | 	call	#_printerror
1c328     48 00 90 FD | 	jmp	#LR__2211
1c32c                 | LR__2210
1c32c     D8 13 BF FD | 	call	#_pop
1c330     FF 26 02 F6 | 	mov	local01, result3
1c334     A7 FA 61 FC | 	wrlong	result1, fp
1c338     04 4E 05 F1 | 	add	fp, #4
1c33c     A7 FC 61 FC | 	wrlong	result2, fp
1c340     04 4E 05 F1 | 	add	fp, #4
1c344     A7 26 62 FC | 	wrlong	local01, fp
1c348     08 4E 85 F1 | 	sub	fp, #8
1c34c     A7 12 02 F6 | 	mov	arg01, fp
1c350     54 16 BF FD | 	call	#_converttofloat
1c354     FD 12 02 F6 | 	mov	arg01, result1
1c358     E4 DA B0 FD | 	call	#__system___float_sqrt
1c35c     A7 FA 61 FC | 	wrlong	result1, fp
1c360     08 4E 05 F1 | 	add	fp, #8
1c364     A7 3C 68 FC | 	wrlong	#30, fp
1c368     08 4E 85 F1 | 	sub	fp, #8
1c36c     A7 12 02 F6 | 	mov	arg01, fp
1c370     2C 14 BF FD | 	call	#_push
1c374                 | LR__2211
1c374     A7 F0 03 F6 | 	mov	ptra, fp
1c378     B2 00 A0 FD | 	call	#popregs_
1c37c                 | _do_sqr_ret
1c37c     2D 00 64 FD | 	ret
1c380                 | 
1c380                 | ' 
1c380                 | ' ' ------------------ stick
1c380                 | ' 
1c380                 | ' sub do_stick
1c380                 | _do_stick
1c380     01 4A 05 F6 | 	mov	COUNT_, #1
1c384     A8 00 A0 FD | 	call	#pushregs_
1c388     10 F0 07 F1 | 	add	ptra, #16
1c38c     4A 00 00 FF 
1c390     80 E4 05 F1 | 	add	objptr, ##38016
1c394     F2 26 02 FB | 	rdlong	local01, objptr
1c398     13 17 02 F6 | 	mov	arg03, local01
1c39c     01 16 66 F0 | 	shl	arg03, #1
1c3a0     13 17 02 F1 | 	add	arg03, local01
1c3a4     02 16 66 F0 | 	shl	arg03, #2
1c3a8     03 00 00 FF 
1c3ac     04 E4 85 F1 | 	sub	objptr, ##1540
1c3b0     F2 16 02 F1 | 	add	arg03, objptr
1c3b4     0B 17 02 FB | 	rdlong	arg03, arg03
1c3b8     0C 4E 05 F1 | 	add	fp, #12
1c3bc     A7 16 62 FC | 	wrlong	arg03, fp
1c3c0                 | ' 
1c3c0                 | ' numpar=compiledline(lineptr_e).result.uresult
1c3c0                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1c3c0     0C 4E 85 F1 | 	sub	fp, #12
1c3c4     02 16 16 F2 | 	cmp	arg03, #2 wc
1c3c8     47 00 00 FF 
1c3cc     7C E4 85 F1 | 	sub	objptr, ##36476
1c3d0     40 00 90 CD |  if_b	jmp	#LR__2220
1c3d4     00 12 06 F6 | 	mov	arg01, #0
1c3d8     64 09 B1 FD | 	call	#__system___getiolock_0614
1c3dc     FD 12 02 F6 | 	mov	arg01, result1
1c3e0     B8 AC B0 FD | 	call	#__system___lockmem
1c3e4     BB 01 00 FF 
1c3e8     B3 15 06 F6 | 	mov	arg02, ##@LR__6033
1c3ec     00 12 06 F6 | 	mov	arg01, #0
1c3f0     00 16 06 F6 | 	mov	arg03, #0
1c3f4     9C B9 B0 FD | 	call	#__system___basic_print_string
1c3f8     00 12 06 F6 | 	mov	arg01, #0
1c3fc     40 09 B1 FD | 	call	#__system___getiolock_0614
1c400     FD 00 68 FC | 	wrlong	#0, result1
1c404     27 12 06 F6 | 	mov	arg01, #39
1c408     00 14 06 F6 | 	mov	arg02, #0
1c40c     DC 71 B0 FD | 	call	#_printerror
1c410     F0 00 90 FD | 	jmp	#LR__2224
1c414                 | LR__2220
1c414                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1c414     0C 4E 05 F1 | 	add	fp, #12
1c418     A7 FE 09 FB | 	rdlong	result3, fp wz
1c41c     0C 4E 85 F1 | 	sub	fp, #12
1c420     30 00 90 5D |  if_ne	jmp	#LR__2221
1c424     52 00 00 FF 
1c428     1C E4 05 F1 | 	add	objptr, ##42012
1c42c     F2 26 02 FB | 	rdlong	local01, objptr
1c430     52 00 00 FF 
1c434     1C E4 85 F1 | 	sub	objptr, ##42012
1c438     A7 26 62 FC | 	wrlong	local01, fp
1c43c     08 4E 05 F1 | 	add	fp, #8
1c440     A7 3A 68 FC | 	wrlong	#29, fp
1c444     08 4E 85 F1 | 	sub	fp, #8
1c448     A7 12 02 F6 | 	mov	arg01, fp
1c44c     50 13 BF FD | 	call	#_push
1c450     B0 00 90 FD | 	jmp	#LR__2224
1c454                 | LR__2221
1c454     B0 12 BF FD | 	call	#_pop
1c458     A7 FA 61 FC | 	wrlong	result1, fp
1c45c     04 4E 05 F1 | 	add	fp, #4
1c460     A7 FC 61 FC | 	wrlong	result2, fp
1c464     04 4E 05 F1 | 	add	fp, #4
1c468     A7 FE 61 FC | 	wrlong	result3, fp
1c46c                 | ' t1=pop()
1c46c                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1c46c     08 4E 85 F1 | 	sub	fp, #8
1c470     1C FE 0D F2 | 	cmp	result3, #28 wz
1c474     08 4E 05 51 |  if_ne	add	fp, #8
1c478     A7 26 02 5B |  if_ne	rdlong	local01, fp
1c47c     08 4E 85 51 |  if_ne	sub	fp, #8
1c480     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1c484     70 00 90 5D |  if_ne	jmp	#LR__2223
1c488     A7 26 02 FB | 	rdlong	local01, fp
1c48c     52 00 00 FF 
1c490     08 E5 05 F1 | 	add	objptr, ##42248
1c494     F2 26 62 FC | 	wrlong	local01, objptr
1c498                 | '   q=t1.result.uresult
1c498                 | '   if q<7 then 
1c498     52 00 00 FF 
1c49c     08 E5 85 F1 | 	sub	objptr, ##42248
1c4a0     07 26 56 F2 | 	cmps	local01, #7 wc
1c4a4     40 00 90 3D |  if_ae	jmp	#LR__2222
1c4a8     52 00 00 FF 
1c4ac     08 E5 05 F1 | 	add	objptr, ##42248
1c4b0     F2 26 02 FB | 	rdlong	local01, objptr
1c4b4     02 26 66 F0 | 	shl	local01, #2
1c4b8     EC E4 85 F1 | 	sub	objptr, #236
1c4bc     F2 26 02 F1 | 	add	local01, objptr
1c4c0     13 27 02 FB | 	rdlong	local01, local01
1c4c4     A7 26 62 FC | 	wrlong	local01, fp
1c4c8     08 4E 05 F1 | 	add	fp, #8
1c4cc     A7 3A 68 FC | 	wrlong	#29, fp
1c4d0     08 4E 85 F1 | 	sub	fp, #8
1c4d4     A7 12 02 F6 | 	mov	arg01, fp
1c4d8     52 00 00 FF 
1c4dc     1C E4 85 F1 | 	sub	objptr, ##42012
1c4e0     BC 12 BF FD | 	call	#_push
1c4e4                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1c4e4     1C 00 90 FD | 	jmp	#LR__2224
1c4e8                 | LR__2222
1c4e8     29 12 06 F6 | 	mov	arg01, #41
1c4ec     00 14 06 F6 | 	mov	arg02, #0
1c4f0     F8 70 B0 FD | 	call	#_printerror
1c4f4                 | '      printerror(41) : return
1c4f4     0C 00 90 FD | 	jmp	#LR__2224
1c4f8                 | LR__2223
1c4f8     29 12 06 F6 | 	mov	arg01, #41
1c4fc     00 14 06 F6 | 	mov	arg02, #0
1c500     E8 70 B0 FD | 	call	#_printerror
1c504                 | LR__2224
1c504     A7 F0 03 F6 | 	mov	ptra, fp
1c508     B2 00 A0 FD | 	call	#popregs_
1c50c                 | _do_stick_ret
1c50c     2D 00 64 FD | 	ret
1c510                 | 
1c510                 | ' 
1c510                 | ' ' ------------------ strig
1c510                 | ' 
1c510                 | ' sub do_strig
1c510                 | _do_strig
1c510     01 4A 05 F6 | 	mov	COUNT_, #1
1c514     A8 00 A0 FD | 	call	#pushregs_
1c518     10 F0 07 F1 | 	add	ptra, #16
1c51c     4A 00 00 FF 
1c520     80 E4 05 F1 | 	add	objptr, ##38016
1c524     F2 26 02 FB | 	rdlong	local01, objptr
1c528     13 17 02 F6 | 	mov	arg03, local01
1c52c     01 16 66 F0 | 	shl	arg03, #1
1c530     13 17 02 F1 | 	add	arg03, local01
1c534     02 16 66 F0 | 	shl	arg03, #2
1c538     03 00 00 FF 
1c53c     04 E4 85 F1 | 	sub	objptr, ##1540
1c540     F2 16 02 F1 | 	add	arg03, objptr
1c544     0B 17 02 FB | 	rdlong	arg03, arg03
1c548     0C 4E 05 F1 | 	add	fp, #12
1c54c     A7 16 62 FC | 	wrlong	arg03, fp
1c550                 | ' 
1c550                 | ' numpar=compiledline(lineptr_e).result.uresult
1c550                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1c550     0C 4E 85 F1 | 	sub	fp, #12
1c554     02 16 16 F2 | 	cmp	arg03, #2 wc
1c558     47 00 00 FF 
1c55c     7C E4 85 F1 | 	sub	objptr, ##36476
1c560     40 00 90 CD |  if_b	jmp	#LR__2230
1c564     00 12 06 F6 | 	mov	arg01, #0
1c568     D4 07 B1 FD | 	call	#__system___getiolock_0614
1c56c     FD 12 02 F6 | 	mov	arg01, result1
1c570     28 AB B0 FD | 	call	#__system___lockmem
1c574     BB 01 00 FF 
1c578     BB 15 06 F6 | 	mov	arg02, ##@LR__6034
1c57c     00 12 06 F6 | 	mov	arg01, #0
1c580     00 16 06 F6 | 	mov	arg03, #0
1c584     0C B8 B0 FD | 	call	#__system___basic_print_string
1c588     00 12 06 F6 | 	mov	arg01, #0
1c58c     B0 07 B1 FD | 	call	#__system___getiolock_0614
1c590     FD 00 68 FC | 	wrlong	#0, result1
1c594     27 12 06 F6 | 	mov	arg01, #39
1c598     00 14 06 F6 | 	mov	arg02, #0
1c59c     4C 70 B0 FD | 	call	#_printerror
1c5a0     F0 00 90 FD | 	jmp	#LR__2234
1c5a4                 | LR__2230
1c5a4                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1c5a4     0C 4E 05 F1 | 	add	fp, #12
1c5a8     A7 FE 09 FB | 	rdlong	result3, fp wz
1c5ac     0C 4E 85 F1 | 	sub	fp, #12
1c5b0     30 00 90 5D |  if_ne	jmp	#LR__2231
1c5b4     52 00 00 FF 
1c5b8     38 E4 05 F1 | 	add	objptr, ##42040
1c5bc     F2 26 02 FB | 	rdlong	local01, objptr
1c5c0     52 00 00 FF 
1c5c4     38 E4 85 F1 | 	sub	objptr, ##42040
1c5c8     A7 26 62 FC | 	wrlong	local01, fp
1c5cc     08 4E 05 F1 | 	add	fp, #8
1c5d0     A7 3A 68 FC | 	wrlong	#29, fp
1c5d4     08 4E 85 F1 | 	sub	fp, #8
1c5d8     A7 12 02 F6 | 	mov	arg01, fp
1c5dc     C0 11 BF FD | 	call	#_push
1c5e0     B0 00 90 FD | 	jmp	#LR__2234
1c5e4                 | LR__2231
1c5e4     20 11 BF FD | 	call	#_pop
1c5e8     A7 FA 61 FC | 	wrlong	result1, fp
1c5ec     04 4E 05 F1 | 	add	fp, #4
1c5f0     A7 FC 61 FC | 	wrlong	result2, fp
1c5f4     04 4E 05 F1 | 	add	fp, #4
1c5f8     A7 FE 61 FC | 	wrlong	result3, fp
1c5fc                 | ' t1=pop()
1c5fc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1c5fc     08 4E 85 F1 | 	sub	fp, #8
1c600     1C FE 0D F2 | 	cmp	result3, #28 wz
1c604     08 4E 05 51 |  if_ne	add	fp, #8
1c608     A7 26 02 5B |  if_ne	rdlong	local01, fp
1c60c     08 4E 85 51 |  if_ne	sub	fp, #8
1c610     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1c614     70 00 90 5D |  if_ne	jmp	#LR__2233
1c618     A7 26 02 FB | 	rdlong	local01, fp
1c61c     52 00 00 FF 
1c620     08 E5 05 F1 | 	add	objptr, ##42248
1c624     F2 26 62 FC | 	wrlong	local01, objptr
1c628                 | '   q=t1.result.uresult
1c628                 | '   if q<7 then 
1c628     52 00 00 FF 
1c62c     08 E5 85 F1 | 	sub	objptr, ##42248
1c630     07 26 56 F2 | 	cmps	local01, #7 wc
1c634     40 00 90 3D |  if_ae	jmp	#LR__2232
1c638     52 00 00 FF 
1c63c     08 E5 05 F1 | 	add	objptr, ##42248
1c640     F2 26 02 FB | 	rdlong	local01, objptr
1c644     02 26 66 F0 | 	shl	local01, #2
1c648     D0 E4 85 F1 | 	sub	objptr, #208
1c64c     F2 26 02 F1 | 	add	local01, objptr
1c650     13 27 02 FB | 	rdlong	local01, local01
1c654     A7 26 62 FC | 	wrlong	local01, fp
1c658     08 4E 05 F1 | 	add	fp, #8
1c65c     A7 3A 68 FC | 	wrlong	#29, fp
1c660     08 4E 85 F1 | 	sub	fp, #8
1c664     A7 12 02 F6 | 	mov	arg01, fp
1c668     52 00 00 FF 
1c66c     38 E4 85 F1 | 	sub	objptr, ##42040
1c670     2C 11 BF FD | 	call	#_push
1c674                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1c674     1C 00 90 FD | 	jmp	#LR__2234
1c678                 | LR__2232
1c678     29 12 06 F6 | 	mov	arg01, #41
1c67c     00 14 06 F6 | 	mov	arg02, #0
1c680     68 6F B0 FD | 	call	#_printerror
1c684                 | '      printerror(41) : return
1c684     0C 00 90 FD | 	jmp	#LR__2234
1c688                 | LR__2233
1c688     29 12 06 F6 | 	mov	arg01, #41
1c68c     00 14 06 F6 | 	mov	arg02, #0
1c690     58 6F B0 FD | 	call	#_printerror
1c694                 | LR__2234
1c694     A7 F0 03 F6 | 	mov	ptra, fp
1c698     B2 00 A0 FD | 	call	#popregs_
1c69c                 | _do_strig_ret
1c69c     2D 00 64 FD | 	ret
1c6a0                 | 
1c6a0                 | ' 
1c6a0                 | ' ' ------------------ tan
1c6a0                 | ' 
1c6a0                 | ' sub do_tan
1c6a0                 | _do_tan
1c6a0     01 4A 05 F6 | 	mov	COUNT_, #1
1c6a4     A8 00 A0 FD | 	call	#pushregs_
1c6a8     10 F0 07 F1 | 	add	ptra, #16
1c6ac     4A 00 00 FF 
1c6b0     80 E4 05 F1 | 	add	objptr, ##38016
1c6b4     F2 26 02 FB | 	rdlong	local01, objptr
1c6b8     13 17 02 F6 | 	mov	arg03, local01
1c6bc     01 16 66 F0 | 	shl	arg03, #1
1c6c0     13 17 02 F1 | 	add	arg03, local01
1c6c4     02 16 66 F0 | 	shl	arg03, #2
1c6c8     03 00 00 FF 
1c6cc     04 E4 85 F1 | 	sub	objptr, ##1540
1c6d0     F2 16 02 F1 | 	add	arg03, objptr
1c6d4     0B 17 02 FB | 	rdlong	arg03, arg03
1c6d8     0C 4E 05 F1 | 	add	fp, #12
1c6dc     A7 16 62 FC | 	wrlong	arg03, fp
1c6e0                 | ' 
1c6e0                 | ' numpar=compiledline(lineptr_e).result.uresult
1c6e0                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1c6e0     0C 4E 85 F1 | 	sub	fp, #12
1c6e4     02 16 16 F2 | 	cmp	arg03, #2 wc
1c6e8     47 00 00 FF 
1c6ec     7C E4 85 F1 | 	sub	objptr, ##36476
1c6f0     0C 4E 05 C1 |  if_b	add	fp, #12
1c6f4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c6f8     0C 4E 85 C1 |  if_b	sub	fp, #12
1c6fc     40 00 90 4D |  if_c_and_nz	jmp	#LR__2240
1c700     00 12 06 F6 | 	mov	arg01, #0
1c704     38 06 B1 FD | 	call	#__system___getiolock_0614
1c708     FD 12 02 F6 | 	mov	arg01, result1
1c70c     8C A9 B0 FD | 	call	#__system___lockmem
1c710     BB 01 00 FF 
1c714     C3 15 06 F6 | 	mov	arg02, ##@LR__6035
1c718     00 12 06 F6 | 	mov	arg01, #0
1c71c     00 16 06 F6 | 	mov	arg03, #0
1c720     70 B6 B0 FD | 	call	#__system___basic_print_string
1c724     00 12 06 F6 | 	mov	arg01, #0
1c728     14 06 B1 FD | 	call	#__system___getiolock_0614
1c72c     FD 00 68 FC | 	wrlong	#0, result1
1c730     27 12 06 F6 | 	mov	arg01, #39
1c734     00 14 06 F6 | 	mov	arg02, #0
1c738     B0 6E B0 FD | 	call	#_printerror
1c73c     64 00 90 FD | 	jmp	#LR__2241
1c740                 | LR__2240
1c740     C4 0F BF FD | 	call	#_pop
1c744     A7 FA 61 FC | 	wrlong	result1, fp
1c748     04 4E 05 F1 | 	add	fp, #4
1c74c     A7 FC 61 FC | 	wrlong	result2, fp
1c750     04 4E 05 F1 | 	add	fp, #4
1c754     A7 FE 61 FC | 	wrlong	result3, fp
1c758     08 4E 85 F1 | 	sub	fp, #8
1c75c     52 00 00 FF 
1c760     A8 E4 05 F1 | 	add	objptr, ##42152
1c764     F2 26 02 FB | 	rdlong	local01, objptr
1c768     52 00 00 FF 
1c76c     A8 E4 85 F1 | 	sub	objptr, ##42152
1c770     A7 12 02 F6 | 	mov	arg01, fp
1c774     30 12 BF FD | 	call	#_converttofloat
1c778     FD 14 02 F6 | 	mov	arg02, result1
1c77c     13 13 02 F6 | 	mov	arg01, local01
1c780     94 D7 B0 FD | 	call	#__system___float_mul
1c784     FD 12 02 F6 | 	mov	arg01, result1
1c788     38 E2 B0 FD | 	call	#__system____builtin_tanf
1c78c     A7 FA 61 FC | 	wrlong	result1, fp
1c790     08 4E 05 F1 | 	add	fp, #8
1c794     A7 3C 68 FC | 	wrlong	#30, fp
1c798     08 4E 85 F1 | 	sub	fp, #8
1c79c     A7 12 02 F6 | 	mov	arg01, fp
1c7a0     FC 0F BF FD | 	call	#_push
1c7a4                 | LR__2241
1c7a4     A7 F0 03 F6 | 	mov	ptra, fp
1c7a8     B2 00 A0 FD | 	call	#popregs_
1c7ac                 | _do_tan_ret
1c7ac     2D 00 64 FD | 	ret
1c7b0                 | 
1c7b0                 | ' 
1c7b0                 | ' ' ------------------ val
1c7b0                 | ' 
1c7b0                 | ' sub do_val
1c7b0                 | _do_val
1c7b0     03 4A 05 F6 | 	mov	COUNT_, #3
1c7b4     A8 00 A0 FD | 	call	#pushregs_
1c7b8     20 F0 07 F1 | 	add	ptra, #32
1c7bc     4A 00 00 FF 
1c7c0     80 E4 05 F1 | 	add	objptr, ##38016
1c7c4     F2 16 02 FB | 	rdlong	arg03, objptr
1c7c8     0B 27 02 F6 | 	mov	local01, arg03
1c7cc     01 26 66 F0 | 	shl	local01, #1
1c7d0     0B 27 02 F1 | 	add	local01, arg03
1c7d4     02 26 66 F0 | 	shl	local01, #2
1c7d8     03 00 00 FF 
1c7dc     04 E4 85 F1 | 	sub	objptr, ##1540
1c7e0     F2 26 02 F1 | 	add	local01, objptr
1c7e4     13 17 02 FB | 	rdlong	arg03, local01
1c7e8     0C 4E 05 F1 | 	add	fp, #12
1c7ec     A7 16 62 FC | 	wrlong	arg03, fp
1c7f0                 | ' 
1c7f0                 | ' numpar=compiledline(lineptr_e).result.uresult
1c7f0                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1c7f0     0C 4E 85 F1 | 	sub	fp, #12
1c7f4     02 16 16 F2 | 	cmp	arg03, #2 wc
1c7f8     47 00 00 FF 
1c7fc     7C E4 85 F1 | 	sub	objptr, ##36476
1c800     0C 4E 05 C1 |  if_b	add	fp, #12
1c804     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c808     0C 4E 85 C1 |  if_b	sub	fp, #12
1c80c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2250
1c810     00 12 06 F6 | 	mov	arg01, #0
1c814     28 05 B1 FD | 	call	#__system___getiolock_0614
1c818     FD 12 02 F6 | 	mov	arg01, result1
1c81c     7C A8 B0 FD | 	call	#__system___lockmem
1c820     BB 01 00 FF 
1c824     C9 15 06 F6 | 	mov	arg02, ##@LR__6036
1c828     00 12 06 F6 | 	mov	arg01, #0
1c82c     00 16 06 F6 | 	mov	arg03, #0
1c830     60 B5 B0 FD | 	call	#__system___basic_print_string
1c834     00 12 06 F6 | 	mov	arg01, #0
1c838     04 05 B1 FD | 	call	#__system___getiolock_0614
1c83c     FD 00 68 FC | 	wrlong	#0, result1
1c840     27 12 06 F6 | 	mov	arg01, #39
1c844     00 14 06 F6 | 	mov	arg02, #0
1c848     A0 6D B0 FD | 	call	#_printerror
1c84c     60 02 90 FD | 	jmp	#LR__2263
1c850                 | LR__2250
1c850     B4 0E BF FD | 	call	#_pop
1c854     FF 16 02 F6 | 	mov	arg03, result3
1c858     A7 FA 61 FC | 	wrlong	result1, fp
1c85c     04 4E 05 F1 | 	add	fp, #4
1c860     A7 FC 61 FC | 	wrlong	result2, fp
1c864     04 4E 05 F1 | 	add	fp, #4
1c868     A7 16 62 FC | 	wrlong	arg03, fp
1c86c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1c86c     08 4E 85 F1 | 	sub	fp, #8
1c870     2B 16 0E F2 | 	cmp	arg03, #43 wz
1c874     18 00 90 5D |  if_ne	jmp	#LR__2251
1c878     A7 12 02 FB | 	rdlong	arg01, fp
1c87c     00 10 BF FD | 	call	#_convertstring
1c880     A7 FA 61 FC | 	wrlong	result1, fp
1c884     08 4E 05 F1 | 	add	fp, #8
1c888     A7 3E 68 FC | 	wrlong	#31, fp
1c88c     08 4E 85 F1 | 	sub	fp, #8
1c890                 | LR__2251
1c890                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1c890     08 4E 05 F1 | 	add	fp, #8
1c894     A7 16 02 FB | 	rdlong	arg03, fp
1c898     08 4E 85 F1 | 	sub	fp, #8
1c89c     1F 16 0E F2 | 	cmp	arg03, #31 wz
1c8a0     40 00 90 AD |  if_e	jmp	#LR__2252
1c8a4     00 12 06 F6 | 	mov	arg01, #0
1c8a8     94 04 B1 FD | 	call	#__system___getiolock_0614
1c8ac     FD 12 02 F6 | 	mov	arg01, result1
1c8b0     E8 A7 B0 FD | 	call	#__system___lockmem
1c8b4     BB 01 00 FF 
1c8b8     CF 15 06 F6 | 	mov	arg02, ##@LR__6037
1c8bc     00 12 06 F6 | 	mov	arg01, #0
1c8c0     00 16 06 F6 | 	mov	arg03, #0
1c8c4     CC B4 B0 FD | 	call	#__system___basic_print_string
1c8c8     00 12 06 F6 | 	mov	arg01, #0
1c8cc     70 04 B1 FD | 	call	#__system___getiolock_0614
1c8d0     FD 00 68 FC | 	wrlong	#0, result1
1c8d4     0F 12 06 F6 | 	mov	arg01, #15
1c8d8     00 14 06 F6 | 	mov	arg02, #0
1c8dc     0C 6D B0 FD | 	call	#_printerror
1c8e0     CC 01 90 FD | 	jmp	#LR__2263
1c8e4                 | LR__2252
1c8e4                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1c8e4     A7 12 02 FB | 	rdlong	arg01, fp
1c8e8     01 14 06 F6 | 	mov	arg02, #1
1c8ec     2C C8 B0 FD | 	call	#__system__Left_S
1c8f0     FD 12 02 F6 | 	mov	arg01, result1
1c8f4     BB 01 00 FF 
1c8f8     D5 15 06 F6 | 	mov	arg02, ##@LR__6038
1c8fc     C4 A7 B0 FD | 	call	#__system___string_cmp
1c900     00 FA 0D F2 | 	cmp	result1, #0 wz
1c904     48 00 90 5D |  if_ne	jmp	#LR__2255
1c908     BB 01 00 FF 
1c90c     D7 27 06 F6 | 	mov	local01, ##@LR__6039
1c910     A7 16 02 FB | 	rdlong	arg03, fp
1c914     0B 13 02 F6 | 	mov	arg01, arg03
1c918     09 29 02 F6 | 	mov	local02, arg01
1c91c     97 06 48 FB | 	callpa	#(@LR__2254-@LR__2253)>>2,fcache_load_ptr_
1c920                 | LR__2253
1c920     14 FB C9 FA | 	rdbyte	result1, local02 wz
1c924     01 28 06 51 |  if_ne	add	local02, #1
1c928     F4 FF 9F 5D |  if_ne	jmp	#LR__2253
1c92c                 | LR__2254
1c92c     09 29 82 F1 | 	sub	local02, arg01
1c930     14 15 02 F6 | 	mov	arg02, local02
1c934     01 14 86 F1 | 	sub	arg02, #1
1c938     0B 13 02 F6 | 	mov	arg01, arg03
1c93c     64 C8 B0 FD | 	call	#__system__Right_S
1c940     FD 14 02 F6 | 	mov	arg02, result1
1c944     13 13 02 F6 | 	mov	arg01, local01
1c948     AC A7 B0 FD | 	call	#__system___string_concat
1c94c     A7 FA 61 FC | 	wrlong	result1, fp
1c950                 | LR__2255
1c950                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1c950     A7 12 02 FB | 	rdlong	arg01, fp
1c954     01 14 06 F6 | 	mov	arg02, #1
1c958     C0 C7 B0 FD | 	call	#__system__Left_S
1c95c     FD 12 02 F6 | 	mov	arg01, result1
1c960     BB 01 00 FF 
1c964     DA 15 06 F6 | 	mov	arg02, ##@LR__6040
1c968     58 A7 B0 FD | 	call	#__system___string_cmp
1c96c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c970     48 00 90 5D |  if_ne	jmp	#LR__2258
1c974     BB 01 00 FF 
1c978     DC 27 06 F6 | 	mov	local01, ##@LR__6041
1c97c     A7 16 02 FB | 	rdlong	arg03, fp
1c980     0B 13 02 F6 | 	mov	arg01, arg03
1c984     09 29 02 F6 | 	mov	local02, arg01
1c988     97 06 48 FB | 	callpa	#(@LR__2257-@LR__2256)>>2,fcache_load_ptr_
1c98c                 | LR__2256
1c98c     14 FB C9 FA | 	rdbyte	result1, local02 wz
1c990     01 28 06 51 |  if_ne	add	local02, #1
1c994     F4 FF 9F 5D |  if_ne	jmp	#LR__2256
1c998                 | LR__2257
1c998     09 29 82 F1 | 	sub	local02, arg01
1c99c     14 15 02 F6 | 	mov	arg02, local02
1c9a0     01 14 86 F1 | 	sub	arg02, #1
1c9a4     0B 13 02 F6 | 	mov	arg01, arg03
1c9a8     F8 C7 B0 FD | 	call	#__system__Right_S
1c9ac     FD 14 02 F6 | 	mov	arg02, result1
1c9b0     13 13 02 F6 | 	mov	arg01, local01
1c9b4     40 A7 B0 FD | 	call	#__system___string_concat
1c9b8     A7 FA 61 FC | 	wrlong	result1, fp
1c9bc                 | LR__2258
1c9bc     A7 12 02 FB | 	rdlong	arg01, fp
1c9c0     60 DD B0 FD | 	call	#__system____builtin_atof
1c9c4     1C 4E 05 F1 | 	add	fp, #28
1c9c8     A7 FA 61 FC | 	wrlong	result1, fp
1c9cc     1C 4E 85 F1 | 	sub	fp, #28
1c9d0     A7 12 02 FB | 	rdlong	arg01, fp
1c9d4     00 14 06 F6 | 	mov	arg02, #0
1c9d8     B4 DB B0 FD | 	call	#__system____builtin_atoi
1c9dc     18 4E 05 F1 | 	add	fp, #24
1c9e0     A7 FA 61 FC | 	wrlong	result1, fp
1c9e4                 | ' fval=val(t1.result.sresult)
1c9e4                 | ' ival=val%(t1.result.sresult)
1c9e4                 | ' if fval=ival then
1c9e4     04 4E 05 F1 | 	add	fp, #4
1c9e8     A7 26 02 FB | 	rdlong	local01, fp
1c9ec     1C 4E 85 F1 | 	sub	fp, #28
1c9f0     FD 12 52 F6 | 	abs	arg01, result1 wc
1c9f4     1F 2A C6 C9 |  if_b	decod	local03, #31
1c9f8     00 2A 06 36 |  if_ae	mov	local03, #0
1c9fc     14 D1 B0 FD | 	call	#__system___float_fromuns
1ca00     15 FB 61 F5 | 	xor	result1, local03
1ca04     FD 14 02 F6 | 	mov	arg02, result1
1ca08     13 13 02 F6 | 	mov	arg01, local01
1ca0c     01 16 06 F6 | 	mov	arg03, #1
1ca10     38 D9 B0 FD | 	call	#__system___float_cmp
1ca14     00 FA 0D F2 | 	cmp	result1, #0 wz
1ca18     20 00 90 5D |  if_ne	jmp	#LR__2259
1ca1c     18 4E 05 F1 | 	add	fp, #24
1ca20     A7 26 02 FB | 	rdlong	local01, fp
1ca24     18 4E 85 F1 | 	sub	fp, #24
1ca28     A7 26 62 FC | 	wrlong	local01, fp
1ca2c     08 4E 05 F1 | 	add	fp, #8
1ca30     A7 38 68 FC | 	wrlong	#28, fp
1ca34     08 4E 85 F1 | 	sub	fp, #8
1ca38     6C 00 90 FD | 	jmp	#LR__2262
1ca3c                 | LR__2259
1ca3c                 | '   if fval=0 andalso ival<>0 then
1ca3c     1C 4E 05 F1 | 	add	fp, #28
1ca40     A7 12 02 FB | 	rdlong	arg01, fp
1ca44     1C 4E 85 F1 | 	sub	fp, #28
1ca48     00 14 06 F6 | 	mov	arg02, #0
1ca4c     01 16 06 F6 | 	mov	arg03, #1
1ca50     F8 D8 B0 FD | 	call	#__system___float_cmp
1ca54     00 FA 0D F2 | 	cmp	result1, #0 wz
1ca58     30 00 90 5D |  if_ne	jmp	#LR__2260
1ca5c     18 4E 05 F1 | 	add	fp, #24
1ca60     A7 26 0A FB | 	rdlong	local01, fp wz
1ca64     18 4E 85 F1 | 	sub	fp, #24
1ca68     20 00 90 AD |  if_e	jmp	#LR__2260
1ca6c     18 4E 05 F1 | 	add	fp, #24
1ca70     A7 26 02 FB | 	rdlong	local01, fp
1ca74     18 4E 85 F1 | 	sub	fp, #24
1ca78     A7 26 62 FC | 	wrlong	local01, fp
1ca7c     08 4E 05 F1 | 	add	fp, #8
1ca80     A7 38 68 FC | 	wrlong	#28, fp
1ca84     08 4E 85 F1 | 	sub	fp, #8
1ca88     1C 00 90 FD | 	jmp	#LR__2261
1ca8c                 | LR__2260
1ca8c     1C 4E 05 F1 | 	add	fp, #28
1ca90     A7 26 02 FB | 	rdlong	local01, fp
1ca94     1C 4E 85 F1 | 	sub	fp, #28
1ca98     A7 26 62 FC | 	wrlong	local01, fp
1ca9c     08 4E 05 F1 | 	add	fp, #8
1caa0     A7 3C 68 FC | 	wrlong	#30, fp
1caa4     08 4E 85 F1 | 	sub	fp, #8
1caa8                 | LR__2261
1caa8                 | LR__2262
1caa8     A7 12 02 F6 | 	mov	arg01, fp
1caac     F0 0C BF FD | 	call	#_push
1cab0                 | LR__2263
1cab0     A7 F0 03 F6 | 	mov	ptra, fp
1cab4     B2 00 A0 FD | 	call	#popregs_
1cab8                 | _do_val_ret
1cab8     2D 00 64 FD | 	ret
1cabc                 | 
1cabc                 | ' 
1cabc                 | ' ' ------------------ waitclock
1cabc                 | ' 
1cabc                 | ' sub do_waitclock
1cabc                 | _do_waitclock
1cabc     52 00 00 FF 
1cac0     94 E4 05 F1 | 	add	objptr, ##42132
1cac4     F2 00 02 FB | 	rdlong	_var01, objptr
1cac8                 | ' c=hkcnt
1cac8                 | ' do: loop until hkcnt<>c
1cac8                 | LR__2270
1cac8     F2 02 02 FB | 	rdlong	_var02, objptr
1cacc     00 03 0A F2 | 	cmp	_var02, _var01 wz
1cad0     F4 FF 9F AD |  if_e	jmp	#LR__2270
1cad4     52 00 00 FF 
1cad8     94 E4 85 F1 | 	sub	objptr, ##42132
1cadc                 | _do_waitclock_ret
1cadc     2D 00 64 FD | 	ret
1cae0                 | 
1cae0                 | ' 
1cae0                 | ' ' ------------------ waitms
1cae0                 | ' 
1cae0                 | ' sub do_waitms
1cae0                 | _do_waitms
1cae0     01 4A 05 F6 | 	mov	COUNT_, #1
1cae4     A8 00 A0 FD | 	call	#pushregs_
1cae8     18 F0 07 F1 | 	add	ptra, #24
1caec     18 0C BF FD | 	call	#_pop
1caf0     A7 FA 61 FC | 	wrlong	result1, fp
1caf4     04 4E 05 F1 | 	add	fp, #4
1caf8     A7 FC 61 FC | 	wrlong	result2, fp
1cafc     04 4E 05 F1 | 	add	fp, #4
1cb00     A7 FE 61 FC | 	wrlong	result3, fp
1cb04     08 4E 85 F1 | 	sub	fp, #8
1cb08     A7 12 02 F6 | 	mov	arg01, fp
1cb0c     DC 0D BF FD | 	call	#_converttoint
1cb10     0C 4E 05 F1 | 	add	fp, #12
1cb14     A7 FA 61 FC | 	wrlong	result1, fp
1cb18                 | ' 
1cb18                 | ' t1=pop()  
1cb18                 | ' t=converttoint(t1)
1cb18                 | ' if t<0 then return
1cb18     0C 4E 85 F1 | 	sub	fp, #12
1cb1c     00 FA 55 F2 | 	cmps	result1, #0 wc
1cb20     E4 00 90 CD |  if_b	jmp	#LR__2286
1cb24                 | ' if t < 1000 then 
1cb24     0C 4E 05 F1 | 	add	fp, #12
1cb28     A7 12 02 FB | 	rdlong	arg01, fp
1cb2c     0C 4E 85 F1 | 	sub	fp, #12
1cb30     01 00 00 FF 
1cb34     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
1cb38     14 00 90 3D |  if_ae	jmp	#LR__2280
1cb3c     0C 4E 05 F1 | 	add	fp, #12
1cb40     A7 12 02 FB | 	rdlong	arg01, fp
1cb44     0C 4E 85 F1 | 	sub	fp, #12
1cb48     44 A8 B0 FD | 	call	#__system___waitms
1cb4c     B8 00 90 FD | 	jmp	#LR__2285
1cb50                 | LR__2280
1cb50     10 4E 05 F1 | 	add	fp, #16
1cb54     A7 02 68 FC | 	wrlong	#1, fp
1cb58     04 4E 85 F1 | 	sub	fp, #4
1cb5c     A7 12 02 FB | 	rdlong	arg01, fp
1cb60     09 13 52 F6 | 	abs	arg01, arg01 wc
1cb64     01 00 00 FF 
1cb68     E8 13 16 FD | 	qdiv	arg01, ##1000
1cb6c                 | '   for i=1 to t/1000
1cb6c     0C 4E 85 F1 | 	sub	fp, #12
1cb70     18 26 62 FD | 	getqx	local01
1cb74     13 27 82 F6 | 	negc	local01, local01
1cb78     01 26 06 F1 | 	add	local01, #1
1cb7c                 | LR__2281
1cb7c     10 4E 05 F1 | 	add	fp, #16
1cb80     A7 12 02 FB | 	rdlong	arg01, fp
1cb84     10 4E 85 F1 | 	sub	fp, #16
1cb88     13 13 52 F2 | 	cmps	arg01, local01 wc
1cb8c     54 00 90 3D |  if_ae	jmp	#LR__2284
1cb90     01 00 00 FF 
1cb94     E8 13 06 F6 | 	mov	arg01, ##1000
1cb98     F4 A7 B0 FD | 	call	#__system___waitms
1cb9c                 | '     waitms(1000)
1cb9c                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1cb9c     E0 12 06 F6 | 	mov	arg01, #224
1cba0     90 9B B0 FD | 	call	#_usbnew_spin2_keystate
1cba4     00 FA 0D F2 | 	cmp	result1, #0 wz
1cba8     10 00 90 5D |  if_ne	jmp	#LR__2282
1cbac     E4 12 06 F6 | 	mov	arg01, #228
1cbb0     80 9B B0 FD | 	call	#_usbnew_spin2_keystate
1cbb4     00 FA 0D F2 | 	cmp	result1, #0 wz
1cbb8     10 00 90 AD |  if_e	jmp	#LR__2283
1cbbc                 | LR__2282
1cbbc     06 12 06 F6 | 	mov	arg01, #6
1cbc0     70 9B B0 FD | 	call	#_usbnew_spin2_keystate
1cbc4     00 FA 0D F2 | 	cmp	result1, #0 wz
1cbc8     3C 00 90 5D |  if_ne	jmp	#LR__2286
1cbcc                 | LR__2283
1cbcc     10 4E 05 F1 | 	add	fp, #16
1cbd0     A7 12 02 FB | 	rdlong	arg01, fp
1cbd4     01 12 06 F1 | 	add	arg01, #1
1cbd8     A7 12 62 FC | 	wrlong	arg01, fp
1cbdc     10 4E 85 F1 | 	sub	fp, #16
1cbe0     98 FF 9F FD | 	jmp	#LR__2281
1cbe4                 | LR__2284
1cbe4     0C 4E 05 F1 | 	add	fp, #12
1cbe8     A7 26 02 FB | 	rdlong	local01, fp
1cbec     13 27 52 F6 | 	abs	local01, local01 wc
1cbf0     01 00 00 FF 
1cbf4     E8 27 16 FD | 	qdiv	local01, ##1000
1cbf8     0C 4E 85 F1 | 	sub	fp, #12
1cbfc     19 26 62 FD | 	getqy	local01
1cc00     13 13 82 F6 | 	negc	arg01, local01
1cc04     88 A7 B0 FD | 	call	#__system___waitms
1cc08                 | LR__2285
1cc08                 | LR__2286
1cc08     A7 F0 03 F6 | 	mov	ptra, fp
1cc0c     B2 00 A0 FD | 	call	#popregs_
1cc10                 | _do_waitms_ret
1cc10     2D 00 64 FD | 	ret
1cc14                 | 
1cc14                 | ' 
1cc14                 | ' ' ------------------ waitvbl
1cc14                 | ' 
1cc14                 | ' sub do_waitvbl
1cc14                 | _do_waitvbl
1cc14     01 12 06 F6 | 	mov	arg01, #1
1cc18     EC 86 B0 FD | 	call	#_hg010b_spin2_waitvbl
1cc1c                 | _do_waitvbl_ret
1cc1c     2D 00 64 FD | 	ret
1cc20                 | 
1cc20                 | ' 
1cc20                 | ' ' ------------------ wrpin
1cc20                 | ' 
1cc20                 | ' sub do_wrpin
1cc20                 | _do_wrpin
1cc20     01 4A 05 F6 | 	mov	COUNT_, #1
1cc24     A8 00 A0 FD | 	call	#pushregs_
1cc28     18 F0 07 F1 | 	add	ptra, #24
1cc2c     D8 0A BF FD | 	call	#_pop
1cc30     FD 14 02 F6 | 	mov	arg02, result1
1cc34     FE 12 02 F6 | 	mov	arg01, result2
1cc38     FF 26 02 F6 | 	mov	local01, result3
1cc3c     A7 14 62 FC | 	wrlong	arg02, fp
1cc40     04 4E 05 F1 | 	add	fp, #4
1cc44     A7 12 62 FC | 	wrlong	arg01, fp
1cc48     04 4E 05 F1 | 	add	fp, #4
1cc4c     A7 26 62 FC | 	wrlong	local01, fp
1cc50     08 4E 85 F1 | 	sub	fp, #8
1cc54     B0 0A BF FD | 	call	#_pop
1cc58     FF 26 02 F6 | 	mov	local01, result3
1cc5c     0C 4E 05 F1 | 	add	fp, #12
1cc60     A7 FA 61 FC | 	wrlong	result1, fp
1cc64     04 4E 05 F1 | 	add	fp, #4
1cc68     A7 FC 61 FC | 	wrlong	result2, fp
1cc6c     04 4E 05 F1 | 	add	fp, #4
1cc70     A7 26 62 FC | 	wrlong	local01, fp
1cc74     08 4E 85 F1 | 	sub	fp, #8
1cc78     A7 12 02 F6 | 	mov	arg01, fp
1cc7c     0C 4E 85 F1 | 	sub	fp, #12
1cc80     68 0C BF FD | 	call	#_converttoint
1cc84     FD 26 02 F6 | 	mov	local01, result1
1cc88     A7 12 02 F6 | 	mov	arg01, fp
1cc8c     5C 0C BF FD | 	call	#_converttoint
1cc90     13 FB 01 FC | 	wrpin	result1, local01
1cc94     A7 F0 03 F6 | 	mov	ptra, fp
1cc98     B2 00 A0 FD | 	call	#popregs_
1cc9c                 | _do_wrpin_ret
1cc9c     2D 00 64 FD | 	ret
1cca0                 | 
1cca0                 | ' 
1cca0                 | ' ' ------------------ wxpin
1cca0                 | ' 
1cca0                 | ' sub do_wxpin
1cca0                 | _do_wxpin
1cca0     01 4A 05 F6 | 	mov	COUNT_, #1
1cca4     A8 00 A0 FD | 	call	#pushregs_
1cca8     18 F0 07 F1 | 	add	ptra, #24
1ccac     58 0A BF FD | 	call	#_pop
1ccb0     FD 14 02 F6 | 	mov	arg02, result1
1ccb4     FE 12 02 F6 | 	mov	arg01, result2
1ccb8     FF 26 02 F6 | 	mov	local01, result3
1ccbc     A7 14 62 FC | 	wrlong	arg02, fp
1ccc0     04 4E 05 F1 | 	add	fp, #4
1ccc4     A7 12 62 FC | 	wrlong	arg01, fp
1ccc8     04 4E 05 F1 | 	add	fp, #4
1cccc     A7 26 62 FC | 	wrlong	local01, fp
1ccd0     08 4E 85 F1 | 	sub	fp, #8
1ccd4     30 0A BF FD | 	call	#_pop
1ccd8     FF 26 02 F6 | 	mov	local01, result3
1ccdc     0C 4E 05 F1 | 	add	fp, #12
1cce0     A7 FA 61 FC | 	wrlong	result1, fp
1cce4     04 4E 05 F1 | 	add	fp, #4
1cce8     A7 FC 61 FC | 	wrlong	result2, fp
1ccec     04 4E 05 F1 | 	add	fp, #4
1ccf0     A7 26 62 FC | 	wrlong	local01, fp
1ccf4     08 4E 85 F1 | 	sub	fp, #8
1ccf8     A7 12 02 F6 | 	mov	arg01, fp
1ccfc     0C 4E 85 F1 | 	sub	fp, #12
1cd00     E8 0B BF FD | 	call	#_converttoint
1cd04     FD 26 02 F6 | 	mov	local01, result1
1cd08     A7 12 02 F6 | 	mov	arg01, fp
1cd0c     DC 0B BF FD | 	call	#_converttoint
1cd10     13 FB 11 FC | 	wxpin	result1, local01
1cd14     A7 F0 03 F6 | 	mov	ptra, fp
1cd18     B2 00 A0 FD | 	call	#popregs_
1cd1c                 | _do_wxpin_ret
1cd1c     2D 00 64 FD | 	ret
1cd20                 | 
1cd20                 | ' 
1cd20                 | ' ' ------------------ wypin
1cd20                 | ' 
1cd20                 | ' sub do_wypin
1cd20                 | _do_wypin
1cd20     01 4A 05 F6 | 	mov	COUNT_, #1
1cd24     A8 00 A0 FD | 	call	#pushregs_
1cd28     18 F0 07 F1 | 	add	ptra, #24
1cd2c     D8 09 BF FD | 	call	#_pop
1cd30     FD 14 02 F6 | 	mov	arg02, result1
1cd34     FE 12 02 F6 | 	mov	arg01, result2
1cd38     FF 26 02 F6 | 	mov	local01, result3
1cd3c     A7 14 62 FC | 	wrlong	arg02, fp
1cd40     04 4E 05 F1 | 	add	fp, #4
1cd44     A7 12 62 FC | 	wrlong	arg01, fp
1cd48     04 4E 05 F1 | 	add	fp, #4
1cd4c     A7 26 62 FC | 	wrlong	local01, fp
1cd50     08 4E 85 F1 | 	sub	fp, #8
1cd54     B0 09 BF FD | 	call	#_pop
1cd58     FF 26 02 F6 | 	mov	local01, result3
1cd5c     0C 4E 05 F1 | 	add	fp, #12
1cd60     A7 FA 61 FC | 	wrlong	result1, fp
1cd64     04 4E 05 F1 | 	add	fp, #4
1cd68     A7 FC 61 FC | 	wrlong	result2, fp
1cd6c     04 4E 05 F1 | 	add	fp, #4
1cd70     A7 26 62 FC | 	wrlong	local01, fp
1cd74     08 4E 85 F1 | 	sub	fp, #8
1cd78     A7 12 02 F6 | 	mov	arg01, fp
1cd7c     0C 4E 85 F1 | 	sub	fp, #12
1cd80     68 0B BF FD | 	call	#_converttoint
1cd84     FD 26 02 F6 | 	mov	local01, result1
1cd88     A7 12 02 F6 | 	mov	arg01, fp
1cd8c     5C 0B BF FD | 	call	#_converttoint
1cd90     13 FB 21 FC | 	wypin	result1, local01
1cd94     A7 F0 03 F6 | 	mov	ptra, fp
1cd98     B2 00 A0 FD | 	call	#popregs_
1cd9c                 | _do_wypin_ret
1cd9c     2D 00 64 FD | 	ret
1cda0                 | 
1cda0                 | ' 
1cda0                 | ' 
1cda0                 | ' 
1cda0                 | ' 
1cda0                 | ' 
1cda0                 | ' 
1cda0                 | ' 
1cda0                 | ' 
1cda0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1cda0                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1cda0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1cda0                 | ' 
1cda0                 | ' 
1cda0                 | ' '------------------ Assign
1cda0                 | ' 
1cda0                 | ' sub do_assign
1cda0                 | _do_assign
1cda0     05 4A 05 F6 | 	mov	COUNT_, #5
1cda4     A8 00 A0 FD | 	call	#pushregs_
1cda8     44 F0 07 F1 | 	add	ptra, #68
1cdac     4A 00 00 FF 
1cdb0     80 E4 05 F1 | 	add	objptr, ##38016
1cdb4     F2 16 02 FB | 	rdlong	arg03, objptr
1cdb8     0B 15 02 F6 | 	mov	arg02, arg03
1cdbc     01 14 66 F0 | 	shl	arg02, #1
1cdc0     0B 15 02 F1 | 	add	arg02, arg03
1cdc4     02 14 66 F0 | 	shl	arg02, #2
1cdc8     03 00 00 FF 
1cdcc     04 E4 85 F1 | 	sub	objptr, ##1540
1cdd0     F2 14 02 F1 | 	add	arg02, objptr
1cdd4     0A 15 02 FB | 	rdlong	arg02, arg02
1cdd8     18 4E 05 F1 | 	add	fp, #24
1cddc     A7 14 62 FC | 	wrlong	arg02, fp
1cde0                 | ' 
1cde0                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1cde0                 | ' if variables(varnum).vartype<array_no_type then 
1cde0     18 4E 85 F1 | 	sub	fp, #24
1cde4     04 14 66 F0 | 	shl	arg02, #4
1cde8     32 00 00 FF 
1cdec     84 E4 85 F1 | 	sub	objptr, ##25732
1cdf0     F2 14 02 F1 | 	add	arg02, objptr
1cdf4     0C 14 06 F1 | 	add	arg02, #12
1cdf8     0A 17 02 FB | 	rdlong	arg03, arg02
1cdfc     00 17 16 F2 | 	cmp	arg03, #256 wc
1ce00     14 00 00 FF 
1ce04     F8 E5 85 F1 | 	sub	objptr, ##10744
1ce08     18 01 90 3D |  if_ae	jmp	#LR__2290
1ce0c     F8 08 BF FD | 	call	#_pop
1ce10     A7 FA 61 FC | 	wrlong	result1, fp
1ce14     04 4E 05 F1 | 	add	fp, #4
1ce18     A7 FC 61 FC | 	wrlong	result2, fp
1ce1c     04 4E 05 F1 | 	add	fp, #4
1ce20     A7 FE 61 FC | 	wrlong	result3, fp
1ce24     08 4E 85 F1 | 	sub	fp, #8
1ce28     A7 16 02 FB | 	rdlong	arg03, fp
1ce2c     04 4E 05 F1 | 	add	fp, #4
1ce30     A7 14 02 FB | 	rdlong	arg02, fp
1ce34     14 4E 05 F1 | 	add	fp, #20
1ce38     A7 12 02 FB | 	rdlong	arg01, fp
1ce3c     04 12 66 F0 | 	shl	arg01, #4
1ce40     14 00 00 FF 
1ce44     F8 E5 05 F1 | 	add	objptr, ##10744
1ce48     F2 12 02 F1 | 	add	arg01, objptr
1ce4c     04 12 06 F1 | 	add	arg01, #4
1ce50     09 17 62 FC | 	wrlong	arg03, arg01
1ce54     A7 16 02 FB | 	rdlong	arg03, fp
1ce58     04 16 66 F0 | 	shl	arg03, #4
1ce5c     F2 16 02 F1 | 	add	arg03, objptr
1ce60     08 16 06 F1 | 	add	arg03, #8
1ce64     0B 15 62 FC | 	wrlong	arg02, arg03
1ce68     A7 16 02 FB | 	rdlong	arg03, fp
1ce6c     04 16 66 F0 | 	shl	arg03, #4
1ce70     F2 16 02 F1 | 	add	arg03, objptr
1ce74     10 4E 85 F1 | 	sub	fp, #16
1ce78     A7 14 02 FB | 	rdlong	arg02, fp
1ce7c     0C 16 06 F1 | 	add	arg03, #12
1ce80     0B 15 62 FC | 	wrlong	arg02, arg03
1ce84                 | '   t1=pop() 
1ce84                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1ce84                 | '   if variables(varnum).vartype<>result_string2 then return
1ce84     10 4E 05 F1 | 	add	fp, #16
1ce88     A7 16 02 FB | 	rdlong	arg03, fp
1ce8c     18 4E 85 F1 | 	sub	fp, #24
1ce90     04 16 66 F0 | 	shl	arg03, #4
1ce94     F2 16 02 F1 | 	add	arg03, objptr
1ce98     0C 16 06 F1 | 	add	arg03, #12
1ce9c     0B 17 02 FB | 	rdlong	arg03, arg03
1cea0     2B 16 0E F2 | 	cmp	arg03, #43 wz
1cea4     14 00 00 FF 
1cea8     F8 E5 85 F1 | 	sub	objptr, ##10744
1ceac     EC 04 90 5D |  if_ne	jmp	#LR__2313
1ceb0     18 4E 05 F1 | 	add	fp, #24
1ceb4     A7 16 02 FB | 	rdlong	arg03, fp
1ceb8     0B 27 02 F6 | 	mov	local01, arg03
1cebc     04 26 66 F0 | 	shl	local01, #4
1cec0     14 00 00 FF 
1cec4     F8 E5 05 F1 | 	add	objptr, ##10744
1cec8     F2 26 02 F1 | 	add	local01, objptr
1cecc     18 4E 85 F1 | 	sub	fp, #24
1ced0     04 16 66 F0 | 	shl	arg03, #4
1ced4     F2 16 02 F1 | 	add	arg03, objptr
1ced8     04 16 06 F1 | 	add	arg03, #4
1cedc     0B 13 02 FB | 	rdlong	arg01, arg03
1cee0     14 00 00 FF 
1cee4     F8 E5 85 F1 | 	sub	objptr, ##10744
1cee8     94 09 BF FD | 	call	#_convertstring
1ceec     04 26 06 F1 | 	add	local01, #4
1cef0     13 FB 61 FC | 	wrlong	result1, local01
1cef4     18 4E 05 F1 | 	add	fp, #24
1cef8     A7 26 02 FB | 	rdlong	local01, fp
1cefc     18 4E 85 F1 | 	sub	fp, #24
1cf00     04 26 66 F0 | 	shl	local01, #4
1cf04     14 00 00 FF 
1cf08     F8 E5 05 F1 | 	add	objptr, ##10744
1cf0c     F2 26 02 F1 | 	add	local01, objptr
1cf10     0C 26 06 F1 | 	add	local01, #12
1cf14     13 3F 68 FC | 	wrlong	#31, local01
1cf18                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1cf18                 | '   variables(varnum).vartype=result_string
1cf18                 | '   return
1cf18     14 00 00 FF 
1cf1c     F8 E5 85 F1 | 	sub	objptr, ##10744
1cf20     78 04 90 FD | 	jmp	#LR__2313
1cf24                 | LR__2290
1cf24                 | ' for i=0 to 2 : arrid(i)=0 : next i
1cf24     1C 4E 05 F1 | 	add	fp, #28
1cf28     A7 00 68 FC | 	wrlong	#0, fp
1cf2c     97 16 48 FB | 	callpa	#(@LR__2292-@LR__2291)>>2,fcache_load_ptr_
1cf30                 | LR__2291
1cf30     A7 26 02 FB | 	rdlong	local01, fp
1cf34     02 26 66 F0 | 	shl	local01, #2
1cf38     18 4E 05 F1 | 	add	fp, #24
1cf3c     A7 26 02 F1 | 	add	local01, fp
1cf40     13 01 68 FC | 	wrlong	#0, local01
1cf44     18 4E 85 F1 | 	sub	fp, #24
1cf48     A7 26 02 FB | 	rdlong	local01, fp
1cf4c     01 26 06 F1 | 	add	local01, #1
1cf50     A7 26 62 FC | 	wrlong	local01, fp
1cf54     03 26 16 F2 | 	cmp	local01, #3 wc
1cf58     D4 FF 9F CD |  if_b	jmp	#LR__2291
1cf5c                 | LR__2292
1cf5c     4A 00 00 FF 
1cf60     80 E4 05 F1 | 	add	objptr, ##38016
1cf64     F2 16 02 FB | 	rdlong	arg03, objptr
1cf68     0B 27 02 F6 | 	mov	local01, arg03
1cf6c     01 26 66 F0 | 	shl	local01, #1
1cf70     0B 27 02 F1 | 	add	local01, arg03
1cf74     02 26 66 F0 | 	shl	local01, #2
1cf78     03 00 00 FF 
1cf7c     04 E4 85 F1 | 	sub	objptr, ##1540
1cf80     F2 26 02 F1 | 	add	local01, objptr
1cf84     04 26 06 F1 | 	add	local01, #4
1cf88     13 29 02 FB | 	rdlong	local02, local01
1cf8c     04 4E 05 F1 | 	add	fp, #4
1cf90     A7 28 62 FC | 	wrlong	local02, fp
1cf94     20 4E 85 F1 | 	sub	fp, #32
1cf98     47 00 00 FF 
1cf9c     7C E4 85 F1 | 	sub	objptr, ##36476
1cfa0     64 07 BF FD | 	call	#_pop
1cfa4     A7 FA 61 FC | 	wrlong	result1, fp
1cfa8     04 4E 05 F1 | 	add	fp, #4
1cfac     A7 FC 61 FC | 	wrlong	result2, fp
1cfb0     04 4E 05 F1 | 	add	fp, #4
1cfb4     A7 FE 61 FC | 	wrlong	result3, fp
1cfb8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1cfb8                 | ' t1=pop() ' var value
1cfb8                 | ' if numpar>0 then
1cfb8     18 4E 05 F1 | 	add	fp, #24
1cfbc     A7 2A 02 FB | 	rdlong	local03, fp
1cfc0     20 4E 85 F1 | 	sub	fp, #32
1cfc4     01 2A 16 F2 | 	cmp	local03, #1 wc
1cfc8     78 00 90 CD |  if_b	jmp	#LR__2295
1cfcc                 | '   for i=numpar to 1 step -1
1cfcc     20 4E 05 F1 | 	add	fp, #32
1cfd0     A7 2C 0A FB | 	rdlong	local04, fp wz
1cfd4     04 4E 85 F1 | 	sub	fp, #4
1cfd8     A7 2C 62 FC | 	wrlong	local04, fp
1cfdc     1C 4E 85 F1 | 	sub	fp, #28
1cfe0     60 00 90 AD |  if_e	jmp	#LR__2294
1cfe4                 | LR__2293
1cfe4     20 07 BF FD | 	call	#_pop
1cfe8     0C 4E 05 F1 | 	add	fp, #12
1cfec     A7 FA 61 FC | 	wrlong	result1, fp
1cff0     04 4E 05 F1 | 	add	fp, #4
1cff4     A7 FC 61 FC | 	wrlong	result2, fp
1cff8     04 4E 05 F1 | 	add	fp, #4
1cffc     A7 FE 61 FC | 	wrlong	result3, fp
1d000     08 4E 05 F1 | 	add	fp, #8
1d004     A7 2A 02 FB | 	rdlong	local03, fp
1d008     01 2A 86 F1 | 	sub	local03, #1
1d00c     02 2A 66 F0 | 	shl	local03, #2
1d010     18 4E 05 F1 | 	add	fp, #24
1d014     A7 2A 02 F1 | 	add	local03, fp
1d018     28 4E 85 F1 | 	sub	fp, #40
1d01c     A7 12 02 F6 | 	mov	arg01, fp
1d020     0C 4E 85 F1 | 	sub	fp, #12
1d024     C4 08 BF FD | 	call	#_converttoint
1d028     15 FB 61 FC | 	wrlong	result1, local03
1d02c     1C 4E 05 F1 | 	add	fp, #28
1d030     A7 2C 02 FB | 	rdlong	local04, fp
1d034     01 2C 8E F1 | 	sub	local04, #1 wz
1d038     A7 2C 62 FC | 	wrlong	local04, fp
1d03c     1C 4E 85 F1 | 	sub	fp, #28
1d040     A0 FF 9F 5D |  if_ne	jmp	#LR__2293
1d044                 | LR__2294
1d044                 | LR__2295
1d044     18 4E 05 F1 | 	add	fp, #24
1d048     A7 26 02 FB | 	rdlong	local01, fp
1d04c     04 26 66 F0 | 	shl	local01, #4
1d050     14 00 00 FF 
1d054     F8 E5 05 F1 | 	add	objptr, ##10744
1d058     F2 26 02 F1 | 	add	local01, objptr
1d05c     04 26 06 F1 | 	add	local01, #4
1d060     13 13 02 FB | 	rdlong	arg01, local01
1d064     0C 4E 05 F1 | 	add	fp, #12
1d068     A7 12 62 FC | 	wrlong	arg01, fp
1d06c     24 4E 85 F1 | 	sub	fp, #36
1d070     14 00 00 FF 
1d074     F8 E5 85 F1 | 	sub	objptr, ##10744
1d078     40 68 B0 FD | 	call	#_pslpeek
1d07c     FD 2C 32 F9 | 	getword	local04, result1, #0
1d080     28 4E 05 F1 | 	add	fp, #40
1d084     A7 2C 62 FC | 	wrlong	local04, fp
1d088     04 4E 85 F1 | 	sub	fp, #4
1d08c     A7 12 02 FB | 	rdlong	arg01, fp
1d090     24 4E 85 F1 | 	sub	fp, #36
1d094     02 12 06 F1 | 	add	arg01, #2
1d098     C8 67 B0 FD | 	call	#_pspeek
1d09c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d0a0     2C 4E 05 F1 | 	add	fp, #44
1d0a4     A7 FA 61 FC | 	wrlong	result1, fp
1d0a8                 | ' esize=pspeek(arrptr+2)
1d0a8                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1d0a8     08 4E 85 F1 | 	sub	fp, #8
1d0ac     A7 12 02 FB | 	rdlong	arg01, fp
1d0b0     24 4E 85 F1 | 	sub	fp, #36
1d0b4     04 12 06 F1 | 	add	arg01, #4
1d0b8     00 68 B0 FD | 	call	#_pslpeek
1d0bc     FD 2C 02 F6 | 	mov	local04, result1
1d0c0     34 4E 05 F1 | 	add	fp, #52
1d0c4     A7 26 02 FB | 	rdlong	local01, fp
1d0c8     34 4E 85 F1 | 	sub	fp, #52
1d0cc     16 27 12 F2 | 	cmp	local01, local04 wc
1d0d0     54 00 90 3D |  if_ae	jmp	#LR__2296
1d0d4     24 4E 05 F1 | 	add	fp, #36
1d0d8     A7 12 02 FB | 	rdlong	arg01, fp
1d0dc     24 4E 85 F1 | 	sub	fp, #36
1d0e0     08 12 06 F1 | 	add	arg01, #8
1d0e4     D4 67 B0 FD | 	call	#_pslpeek
1d0e8     FD 26 02 F6 | 	mov	local01, result1
1d0ec     38 4E 05 F1 | 	add	fp, #56
1d0f0     A7 2C 02 FB | 	rdlong	local04, fp
1d0f4     38 4E 85 F1 | 	sub	fp, #56
1d0f8     13 2D 12 F2 | 	cmp	local04, local01 wc
1d0fc     28 00 90 3D |  if_ae	jmp	#LR__2296
1d100     24 4E 05 F1 | 	add	fp, #36
1d104     A7 12 02 FB | 	rdlong	arg01, fp
1d108     24 4E 85 F1 | 	sub	fp, #36
1d10c     0C 12 06 F1 | 	add	arg01, #12
1d110     A8 67 B0 FD | 	call	#_pslpeek
1d114     3C 4E 05 F1 | 	add	fp, #60
1d118     A7 2C 02 FB | 	rdlong	local04, fp
1d11c     3C 4E 85 F1 | 	sub	fp, #60
1d120     FD 2C 12 F2 | 	cmp	local04, result1 wc
1d124     10 00 90 CD |  if_b	jmp	#LR__2297
1d128                 | LR__2296
1d128     31 12 06 F6 | 	mov	arg01, #49
1d12c     00 14 06 F6 | 	mov	arg02, #0
1d130     B8 64 B0 FD | 	call	#_printerror
1d134     64 02 90 FD | 	jmp	#LR__2313
1d138                 | LR__2297
1d138     24 4E 05 F1 | 	add	fp, #36
1d13c     A7 12 02 FB | 	rdlong	arg01, fp
1d140     09 2D 02 F6 | 	mov	local04, arg01
1d144     10 2C 06 F1 | 	add	local04, #16
1d148     24 4E 85 F1 | 	sub	fp, #36
1d14c     04 12 06 F1 | 	add	arg01, #4
1d150     68 67 B0 FD | 	call	#_pslpeek
1d154     FD 26 02 F6 | 	mov	local01, result1
1d158     38 4E 05 F1 | 	add	fp, #56
1d15c     A7 28 02 FB | 	rdlong	local02, fp
1d160     14 27 02 FD | 	qmul	local01, local02
1d164     04 4E 85 F1 | 	sub	fp, #4
1d168     A7 2A 02 FB | 	rdlong	local03, fp
1d16c     10 4E 85 F1 | 	sub	fp, #16
1d170     A7 12 02 FB | 	rdlong	arg01, fp
1d174     24 4E 85 F1 | 	sub	fp, #36
1d178     08 12 06 F1 | 	add	arg01, #8
1d17c     18 28 62 FD | 	getqx	local02
1d180     14 2B 02 F1 | 	add	local03, local02
1d184     34 67 B0 FD | 	call	#_pslpeek
1d188     FD 28 02 F6 | 	mov	local02, result1
1d18c     24 4E 05 F1 | 	add	fp, #36
1d190     A7 12 02 FB | 	rdlong	arg01, fp
1d194     24 4E 85 F1 | 	sub	fp, #36
1d198     04 12 06 F1 | 	add	arg01, #4
1d19c     1C 67 B0 FD | 	call	#_pslpeek
1d1a0     FD 28 02 FD | 	qmul	local02, result1
1d1a4     3C 4E 05 F1 | 	add	fp, #60
1d1a8     A7 28 02 FB | 	rdlong	local02, fp
1d1ac     18 26 62 FD | 	getqx	local01
1d1b0     14 27 02 FD | 	qmul	local01, local02
1d1b4     10 4E 85 F1 | 	sub	fp, #16
1d1b8     A7 28 02 FB | 	rdlong	local02, fp
1d1bc     18 26 62 FD | 	getqx	local01
1d1c0     13 2B 02 F1 | 	add	local03, local01
1d1c4     15 29 02 FD | 	qmul	local02, local03
1d1c8     04 4E 05 F1 | 	add	fp, #4
1d1cc                 | ' 
1d1cc                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1d1cc                 | ' select case arrtype
1d1cc     18 2A 62 FD | 	getqx	local03
1d1d0     15 2D 02 F1 | 	add	local04, local03
1d1d4     A7 2C 62 FC | 	wrlong	local04, fp
1d1d8     08 4E 85 F1 | 	sub	fp, #8
1d1dc     A7 2E 02 FB | 	rdlong	local05, fp
1d1e0     28 4E 85 F1 | 	sub	fp, #40
1d1e4     00 2F 86 F1 | 	sub	local05, #256
1d1e8     0C 2E 26 F3 | 	fle	local05, #12
1d1ec     30 2E 62 FD | 	jmprel	local05
1d1f0                 | LR__2298
1d1f0     30 00 90 FD | 	jmp	#LR__2299
1d1f4     58 00 90 FD | 	jmp	#LR__2300
1d1f8     6C 00 90 FD | 	jmp	#LR__2301
1d1fc     80 00 90 FD | 	jmp	#LR__2302
1d200     B0 00 90 FD | 	jmp	#LR__2303
1d204     E0 00 90 FD | 	jmp	#LR__2304
1d208     F4 00 90 FD | 	jmp	#LR__2305
1d20c     08 01 90 FD | 	jmp	#LR__2306
1d210     1C 01 90 FD | 	jmp	#LR__2307
1d214     30 01 90 FD | 	jmp	#LR__2308
1d218     44 01 90 FD | 	jmp	#LR__2309
1d21c     58 01 90 FD | 	jmp	#LR__2310
1d220     6C 01 90 FD | 	jmp	#LR__2311
1d224                 | LR__2299
1d224     A7 12 02 F6 | 	mov	arg01, fp
1d228     30 4E 05 F1 | 	add	fp, #48
1d22c     A7 14 02 FB | 	rdlong	arg02, fp
1d230     30 4E 85 F1 | 	sub	fp, #48
1d234     0C 16 06 F6 | 	mov	arg03, #12
1d238     0B 00 00 FF 
1d23c     CC E4 05 F1 | 	add	objptr, ##5836
1d240     FC 91 B0 FD | 	call	#_psram_spin2_write
1d244     0B 00 00 FF 
1d248     CC E4 85 F1 | 	sub	objptr, ##5836
1d24c     4C 01 90 FD | 	jmp	#LR__2312
1d250                 | LR__2300
1d250     30 4E 05 F1 | 	add	fp, #48
1d254     A7 12 02 FB | 	rdlong	arg01, fp
1d258     30 4E 85 F1 | 	sub	fp, #48
1d25c     A7 14 02 FB | 	rdlong	arg02, fp
1d260     B8 65 B0 FD | 	call	#_pspoke
1d264     34 01 90 FD | 	jmp	#LR__2312
1d268                 | LR__2301
1d268     30 4E 05 F1 | 	add	fp, #48
1d26c     A7 12 02 FB | 	rdlong	arg01, fp
1d270     30 4E 85 F1 | 	sub	fp, #48
1d274     A7 14 02 FB | 	rdlong	arg02, fp
1d278     A0 65 B0 FD | 	call	#_pspoke
1d27c     1C 01 90 FD | 	jmp	#LR__2312
1d280                 | LR__2302
1d280     30 4E 05 F1 | 	add	fp, #48
1d284     A7 12 02 FB | 	rdlong	arg01, fp
1d288     30 4E 85 F1 | 	sub	fp, #48
1d28c     A7 14 02 FB | 	rdlong	arg02, fp
1d290     88 65 B0 FD | 	call	#_pspoke
1d294     30 4E 05 F1 | 	add	fp, #48
1d298     A7 12 02 FB | 	rdlong	arg01, fp
1d29c     30 4E 85 F1 | 	sub	fp, #48
1d2a0     01 12 06 F1 | 	add	arg01, #1
1d2a4     A7 14 02 FB | 	rdlong	arg02, fp
1d2a8     08 14 46 F0 | 	shr	arg02, #8
1d2ac     6C 65 B0 FD | 	call	#_pspoke
1d2b0     E8 00 90 FD | 	jmp	#LR__2312
1d2b4                 | LR__2303
1d2b4     30 4E 05 F1 | 	add	fp, #48
1d2b8     A7 12 02 FB | 	rdlong	arg01, fp
1d2bc     30 4E 85 F1 | 	sub	fp, #48
1d2c0     A7 14 02 FB | 	rdlong	arg02, fp
1d2c4     54 65 B0 FD | 	call	#_pspoke
1d2c8     30 4E 05 F1 | 	add	fp, #48
1d2cc     A7 12 02 FB | 	rdlong	arg01, fp
1d2d0     30 4E 85 F1 | 	sub	fp, #48
1d2d4     01 12 06 F1 | 	add	arg01, #1
1d2d8     A7 14 02 FB | 	rdlong	arg02, fp
1d2dc     08 14 46 F0 | 	shr	arg02, #8
1d2e0     38 65 B0 FD | 	call	#_pspoke
1d2e4     B4 00 90 FD | 	jmp	#LR__2312
1d2e8                 | LR__2304
1d2e8     30 4E 05 F1 | 	add	fp, #48
1d2ec     A7 12 02 FB | 	rdlong	arg01, fp
1d2f0     30 4E 85 F1 | 	sub	fp, #48
1d2f4     A7 14 02 FB | 	rdlong	arg02, fp
1d2f8     90 64 B0 FD | 	call	#_pslpoke
1d2fc     9C 00 90 FD | 	jmp	#LR__2312
1d300                 | LR__2305
1d300     30 4E 05 F1 | 	add	fp, #48
1d304     A7 12 02 FB | 	rdlong	arg01, fp
1d308     30 4E 85 F1 | 	sub	fp, #48
1d30c     A7 14 02 FB | 	rdlong	arg02, fp
1d310     78 64 B0 FD | 	call	#_pslpoke
1d314     84 00 90 FD | 	jmp	#LR__2312
1d318                 | LR__2306
1d318     30 4E 05 F1 | 	add	fp, #48
1d31c     A7 12 02 FB | 	rdlong	arg01, fp
1d320     30 4E 85 F1 | 	sub	fp, #48
1d324     A7 14 02 FB | 	rdlong	arg02, fp
1d328     60 64 B0 FD | 	call	#_pslpoke
1d32c     6C 00 90 FD | 	jmp	#LR__2312
1d330                 | LR__2307
1d330     30 4E 05 F1 | 	add	fp, #48
1d334     A7 12 02 FB | 	rdlong	arg01, fp
1d338     30 4E 85 F1 | 	sub	fp, #48
1d33c     A7 14 02 FB | 	rdlong	arg02, fp
1d340     48 64 B0 FD | 	call	#_pslpoke
1d344     54 00 90 FD | 	jmp	#LR__2312
1d348                 | LR__2308
1d348     30 4E 05 F1 | 	add	fp, #48
1d34c     A7 12 02 FB | 	rdlong	arg01, fp
1d350     30 4E 85 F1 | 	sub	fp, #48
1d354     A7 14 02 FB | 	rdlong	arg02, fp
1d358     30 64 B0 FD | 	call	#_pslpoke
1d35c     3C 00 90 FD | 	jmp	#LR__2312
1d360                 | LR__2309
1d360     30 4E 05 F1 | 	add	fp, #48
1d364     A7 12 02 FB | 	rdlong	arg01, fp
1d368     30 4E 85 F1 | 	sub	fp, #48
1d36c     A7 14 02 FB | 	rdlong	arg02, fp
1d370     18 64 B0 FD | 	call	#_pslpoke
1d374     24 00 90 FD | 	jmp	#LR__2312
1d378                 | LR__2310
1d378     30 4E 05 F1 | 	add	fp, #48
1d37c     A7 12 02 FB | 	rdlong	arg01, fp
1d380     30 4E 85 F1 | 	sub	fp, #48
1d384     A7 14 02 FB | 	rdlong	arg02, fp
1d388     00 64 B0 FD | 	call	#_pslpoke
1d38c     0C 00 90 FD | 	jmp	#LR__2312
1d390                 | LR__2311
1d390     32 12 06 F6 | 	mov	arg01, #50
1d394     00 14 06 F6 | 	mov	arg02, #0
1d398     50 62 B0 FD | 	call	#_printerror
1d39c                 | LR__2312
1d39c                 | LR__2313
1d39c     A7 F0 03 F6 | 	mov	ptra, fp
1d3a0     B2 00 A0 FD | 	call	#popregs_
1d3a4                 | _do_assign_ret
1d3a4     2D 00 64 FD | 	ret
1d3a8                 | 
1d3a8                 | ' 
1d3a8                 | ' 
1d3a8                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1d3a8                 | ' 
1d3a8                 | ' sub do_getvar
1d3a8                 | _do_getvar
1d3a8     04 4A 05 F6 | 	mov	COUNT_, #4
1d3ac     A8 00 A0 FD | 	call	#pushregs_
1d3b0     3C F0 07 F1 | 	add	ptra, #60
1d3b4                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1d3b4     4A 00 00 FF 
1d3b8     80 E4 05 F1 | 	add	objptr, ##38016
1d3bc     F2 26 02 FB | 	rdlong	local01, objptr
1d3c0     13 17 02 F6 | 	mov	arg03, local01
1d3c4     01 16 66 F0 | 	shl	arg03, #1
1d3c8     13 17 02 F1 | 	add	arg03, local01
1d3cc     02 16 66 F0 | 	shl	arg03, #2
1d3d0     03 00 00 FF 
1d3d4     04 E4 85 F1 | 	sub	objptr, ##1540
1d3d8     F2 16 02 F1 | 	add	arg03, objptr
1d3dc     04 16 06 F1 | 	add	arg03, #4
1d3e0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1d3e4     47 00 00 FF 
1d3e8     7C E4 85 F1 | 	sub	objptr, ##36476
1d3ec     C4 00 90 5D |  if_ne	jmp	#LR__2321
1d3f0     4A 00 00 FF 
1d3f4     80 E4 05 F1 | 	add	objptr, ##38016
1d3f8     F2 26 02 FB | 	rdlong	local01, objptr
1d3fc     13 13 02 F6 | 	mov	arg01, local01
1d400     01 12 66 F0 | 	shl	arg01, #1
1d404     13 13 02 F1 | 	add	arg01, local01
1d408     02 12 66 F0 | 	shl	arg01, #2
1d40c     03 00 00 FF 
1d410     04 E4 85 F1 | 	sub	objptr, ##1540
1d414     F2 12 02 F1 | 	add	arg01, objptr
1d418     09 27 02 FB | 	rdlong	local01, arg01
1d41c     04 26 66 F0 | 	shl	local01, #4
1d420     32 00 00 FF 
1d424     84 E4 85 F1 | 	sub	objptr, ##25732
1d428     F2 26 02 F1 | 	add	local01, objptr
1d42c     04 26 06 F1 | 	add	local01, #4
1d430     13 13 02 FB | 	rdlong	arg01, local01
1d434     04 26 06 F1 | 	add	local01, #4
1d438     13 27 02 FB | 	rdlong	local01, local01
1d43c     A7 12 62 FC | 	wrlong	arg01, fp
1d440     04 4E 05 F1 | 	add	fp, #4
1d444     A7 26 62 FC | 	wrlong	local01, fp
1d448     35 00 00 FF 
1d44c     88 E4 05 F1 | 	add	objptr, ##27272
1d450     F2 26 02 FB | 	rdlong	local01, objptr
1d454     13 13 02 F6 | 	mov	arg01, local01
1d458     01 12 66 F0 | 	shl	arg01, #1
1d45c     13 13 02 F1 | 	add	arg01, local01
1d460     02 12 66 F0 | 	shl	arg01, #2
1d464     03 00 00 FF 
1d468     04 E4 85 F1 | 	sub	objptr, ##1540
1d46c     F2 12 02 F1 | 	add	arg01, objptr
1d470     09 27 02 FB | 	rdlong	local01, arg01
1d474     04 26 66 F0 | 	shl	local01, #4
1d478     32 00 00 FF 
1d47c     84 E4 85 F1 | 	sub	objptr, ##25732
1d480     F2 26 02 F1 | 	add	local01, objptr
1d484     0C 26 06 F1 | 	add	local01, #12
1d488     13 27 02 FB | 	rdlong	local01, local01
1d48c     04 4E 05 F1 | 	add	fp, #4
1d490     A7 26 62 FC | 	wrlong	local01, fp
1d494                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1d494                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1d494                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1d494     08 4E 85 F1 | 	sub	fp, #8
1d498     00 27 16 F2 | 	cmp	local01, #256 wc
1d49c     14 00 00 FF 
1d4a0     F8 E5 85 F1 | 	sub	objptr, ##10744
1d4a4     0C 00 90 3D |  if_ae	jmp	#LR__2320
1d4a8     A7 12 02 F6 | 	mov	arg01, fp
1d4ac     F0 02 BF FD | 	call	#_push
1d4b0     A0 04 90 FD | 	jmp	#LR__2342
1d4b4                 | LR__2320
1d4b4                 | LR__2321
1d4b4     4A 00 00 FF 
1d4b8     80 E4 05 F1 | 	add	objptr, ##38016
1d4bc     F2 16 02 FB | 	rdlong	arg03, objptr
1d4c0     0B 15 02 F6 | 	mov	arg02, arg03
1d4c4     01 14 66 F0 | 	shl	arg02, #1
1d4c8     0B 15 02 F1 | 	add	arg02, arg03
1d4cc     02 14 66 F0 | 	shl	arg02, #2
1d4d0     03 00 00 FF 
1d4d4     04 E4 85 F1 | 	sub	objptr, ##1540
1d4d8     F2 14 02 F1 | 	add	arg02, objptr
1d4dc     0A 17 02 FB | 	rdlong	arg03, arg02
1d4e0     04 16 66 F0 | 	shl	arg03, #4
1d4e4     32 00 00 FF 
1d4e8     84 E4 85 F1 | 	sub	objptr, ##25732
1d4ec     F2 16 02 F1 | 	add	arg03, objptr
1d4f0     04 16 06 F1 | 	add	arg03, #4
1d4f4     0B 13 02 FB | 	rdlong	arg01, arg03
1d4f8     0C 4E 05 F1 | 	add	fp, #12
1d4fc     A7 12 62 FC | 	wrlong	arg01, fp
1d500     0C 4E 85 F1 | 	sub	fp, #12
1d504     14 00 00 FF 
1d508     F8 E5 85 F1 | 	sub	objptr, ##10744
1d50c     AC 63 B0 FD | 	call	#_pslpeek
1d510     FD FA 31 F9 | 	getword	result1, result1, #0
1d514     10 4E 05 F1 | 	add	fp, #16
1d518     A7 FA 61 FC | 	wrlong	result1, fp
1d51c     4A 00 00 FF 
1d520     80 E4 05 F1 | 	add	objptr, ##38016
1d524     F2 16 02 FB | 	rdlong	arg03, objptr
1d528     0B 15 02 F6 | 	mov	arg02, arg03
1d52c     01 14 66 F0 | 	shl	arg02, #1
1d530     0B 15 02 F1 | 	add	arg02, arg03
1d534     02 14 66 F0 | 	shl	arg02, #2
1d538     03 00 00 FF 
1d53c     04 E4 85 F1 | 	sub	objptr, ##1540
1d540     F2 14 02 F1 | 	add	arg02, objptr
1d544     04 14 06 F1 | 	add	arg02, #4
1d548     0A 17 02 FB | 	rdlong	arg03, arg02
1d54c     04 4E 05 F1 | 	add	fp, #4
1d550     A7 16 62 FC | 	wrlong	arg03, fp
1d554     08 4E 85 F1 | 	sub	fp, #8
1d558     A7 12 02 FB | 	rdlong	arg01, fp
1d55c     0C 4E 85 F1 | 	sub	fp, #12
1d560     02 12 06 F1 | 	add	arg01, #2
1d564     47 00 00 FF 
1d568     7C E4 85 F1 | 	sub	objptr, ##36476
1d56c     F4 62 B0 FD | 	call	#_pspeek
1d570     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d574     18 4E 05 F1 | 	add	fp, #24
1d578     A7 FA 61 FC | 	wrlong	result1, fp
1d57c     0C 4E 85 F1 | 	sub	fp, #12
1d580     A7 12 02 FB | 	rdlong	arg01, fp
1d584     0C 4E 85 F1 | 	sub	fp, #12
1d588     04 12 06 F1 | 	add	arg01, #4
1d58c     2C 63 B0 FD | 	call	#_pslpeek
1d590     1C 4E 05 F1 | 	add	fp, #28
1d594     A7 FA 61 FC | 	wrlong	result1, fp
1d598     10 4E 85 F1 | 	sub	fp, #16
1d59c     A7 12 02 FB | 	rdlong	arg01, fp
1d5a0     0C 4E 85 F1 | 	sub	fp, #12
1d5a4     08 12 06 F1 | 	add	arg01, #8
1d5a8     10 63 B0 FD | 	call	#_pslpeek
1d5ac     20 4E 05 F1 | 	add	fp, #32
1d5b0     A7 FA 61 FC | 	wrlong	result1, fp
1d5b4     14 4E 85 F1 | 	sub	fp, #20
1d5b8     A7 12 02 FB | 	rdlong	arg01, fp
1d5bc     0C 4E 85 F1 | 	sub	fp, #12
1d5c0     0C 12 06 F1 | 	add	arg01, #12
1d5c4     F4 62 B0 FD | 	call	#_pslpeek
1d5c8     24 4E 05 F1 | 	add	fp, #36
1d5cc     A7 FA 61 FC | 	wrlong	result1, fp
1d5d0                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1d5d0                 | ' esize=pspeek(arrptr+2)
1d5d0                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1d5d0                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1d5d0                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1d5d0                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1d5d0     10 4E 85 F1 | 	sub	fp, #16
1d5d4     A7 16 02 FB | 	rdlong	arg03, fp
1d5d8     14 4E 85 F1 | 	sub	fp, #20
1d5dc     03 16 16 F2 | 	cmp	arg03, #3 wc
1d5e0     38 00 90 CD |  if_b	jmp	#LR__2322
1d5e4     20 01 BF FD | 	call	#_pop
1d5e8     FF 16 02 F6 | 	mov	arg03, result3
1d5ec     A7 FA 61 FC | 	wrlong	result1, fp
1d5f0     04 4E 05 F1 | 	add	fp, #4
1d5f4     A7 FC 61 FC | 	wrlong	result2, fp
1d5f8     04 4E 05 F1 | 	add	fp, #4
1d5fc     A7 16 62 FC | 	wrlong	arg03, fp
1d600     08 4E 85 F1 | 	sub	fp, #8
1d604     A7 12 02 F6 | 	mov	arg01, fp
1d608     E0 02 BF FD | 	call	#_converttoint
1d60c     30 4E 05 F1 | 	add	fp, #48
1d610     A7 FA 61 FC | 	wrlong	result1, fp
1d614     30 4E 85 F1 | 	sub	fp, #48
1d618     0C 00 90 FD | 	jmp	#LR__2323
1d61c                 | LR__2322
1d61c     30 4E 05 F1 | 	add	fp, #48
1d620     A7 00 68 FC | 	wrlong	#0, fp
1d624     30 4E 85 F1 | 	sub	fp, #48
1d628                 | LR__2323
1d628                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1d628     14 4E 05 F1 | 	add	fp, #20
1d62c     A7 16 02 FB | 	rdlong	arg03, fp
1d630     14 4E 85 F1 | 	sub	fp, #20
1d634     02 16 16 F2 | 	cmp	arg03, #2 wc
1d638     38 00 90 CD |  if_b	jmp	#LR__2324
1d63c     C8 00 BF FD | 	call	#_pop
1d640     FF 16 02 F6 | 	mov	arg03, result3
1d644     A7 FA 61 FC | 	wrlong	result1, fp
1d648     04 4E 05 F1 | 	add	fp, #4
1d64c     A7 FC 61 FC | 	wrlong	result2, fp
1d650     04 4E 05 F1 | 	add	fp, #4
1d654     A7 16 62 FC | 	wrlong	arg03, fp
1d658     08 4E 85 F1 | 	sub	fp, #8
1d65c     A7 12 02 F6 | 	mov	arg01, fp
1d660     88 02 BF FD | 	call	#_converttoint
1d664     2C 4E 05 F1 | 	add	fp, #44
1d668     A7 FA 61 FC | 	wrlong	result1, fp
1d66c     2C 4E 85 F1 | 	sub	fp, #44
1d670     0C 00 90 FD | 	jmp	#LR__2325
1d674                 | LR__2324
1d674     2C 4E 05 F1 | 	add	fp, #44
1d678     A7 00 68 FC | 	wrlong	#0, fp
1d67c     2C 4E 85 F1 | 	sub	fp, #44
1d680                 | LR__2325
1d680                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1d680     14 4E 05 F1 | 	add	fp, #20
1d684     A7 16 02 FB | 	rdlong	arg03, fp
1d688     14 4E 85 F1 | 	sub	fp, #20
1d68c     01 16 16 F2 | 	cmp	arg03, #1 wc
1d690     38 00 90 CD |  if_b	jmp	#LR__2326
1d694     70 00 BF FD | 	call	#_pop
1d698     FF 16 02 F6 | 	mov	arg03, result3
1d69c     A7 FA 61 FC | 	wrlong	result1, fp
1d6a0     04 4E 05 F1 | 	add	fp, #4
1d6a4     A7 FC 61 FC | 	wrlong	result2, fp
1d6a8     04 4E 05 F1 | 	add	fp, #4
1d6ac     A7 16 62 FC | 	wrlong	arg03, fp
1d6b0     08 4E 85 F1 | 	sub	fp, #8
1d6b4     A7 12 02 F6 | 	mov	arg01, fp
1d6b8     30 02 BF FD | 	call	#_converttoint
1d6bc     28 4E 05 F1 | 	add	fp, #40
1d6c0     A7 FA 61 FC | 	wrlong	result1, fp
1d6c4     28 4E 85 F1 | 	sub	fp, #40
1d6c8     0C 00 90 FD | 	jmp	#LR__2327
1d6cc                 | LR__2326
1d6cc     28 4E 05 F1 | 	add	fp, #40
1d6d0     A7 00 68 FC | 	wrlong	#0, fp
1d6d4     28 4E 85 F1 | 	sub	fp, #40
1d6d8                 | LR__2327
1d6d8     0C 4E 05 F1 | 	add	fp, #12
1d6dc     A7 28 02 FB | 	rdlong	local02, fp
1d6e0     1C 4E 05 F1 | 	add	fp, #28
1d6e4     A7 2A 02 FB | 	rdlong	local03, fp
1d6e8     04 4E 05 F1 | 	add	fp, #4
1d6ec     A7 FC 01 FB | 	rdlong	result2, fp
1d6f0     10 4E 85 F1 | 	sub	fp, #16
1d6f4     A7 FE 01 FB | 	rdlong	result3, fp
1d6f8     FF FC 01 FD | 	qmul	result2, result3
1d6fc     10 28 06 F1 | 	add	local02, #16
1d700     14 4E 05 F1 | 	add	fp, #20
1d704     A7 FC 01 FB | 	rdlong	result2, fp
1d708     18 FA 61 FD | 	getqx	result1
1d70c     FF FC 01 FD | 	qmul	result2, result3
1d710     FD 2A 02 F1 | 	add	local03, result1
1d714     10 4E 85 F1 | 	sub	fp, #16
1d718     A7 FE 01 FB | 	rdlong	result3, fp
1d71c     18 FC 61 FD | 	getqx	result2
1d720     FF FC 01 FD | 	qmul	result2, result3
1d724     08 4E 85 F1 | 	sub	fp, #8
1d728     A7 FE 01 FB | 	rdlong	result3, fp
1d72c     18 FC 61 FD | 	getqx	result2
1d730     FE 2A 02 F1 | 	add	local03, result2
1d734     FF 2A 02 FD | 	qmul	local03, result3
1d738     1C 4E 05 F1 | 	add	fp, #28
1d73c                 | ' 
1d73c                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1d73c                 | ' 
1d73c                 | ' select case vartype
1d73c     18 FC 61 FD | 	getqx	result2
1d740     FE 28 02 F1 | 	add	local02, result2
1d744     A7 28 62 FC | 	wrlong	local02, fp
1d748     24 4E 85 F1 | 	sub	fp, #36
1d74c     A7 2C 02 FB | 	rdlong	local04, fp
1d750     10 4E 85 F1 | 	sub	fp, #16
1d754     00 2D 86 F1 | 	sub	local04, #256
1d758     0C 2C 26 F3 | 	fle	local04, #12
1d75c     30 2C 62 FD | 	jmprel	local04
1d760                 | LR__2328
1d760     30 00 90 FD | 	jmp	#LR__2329
1d764     58 00 90 FD | 	jmp	#LR__2330
1d768     8C 00 90 FD | 	jmp	#LR__2331
1d76c     AC 00 90 FD | 	jmp	#LR__2332
1d770     E8 00 90 FD | 	jmp	#LR__2333
1d774     08 01 90 FD | 	jmp	#LR__2334
1d778     24 01 90 FD | 	jmp	#LR__2335
1d77c     40 01 90 FD | 	jmp	#LR__2336
1d780     50 01 90 FD | 	jmp	#LR__2337
1d784     60 01 90 FD | 	jmp	#LR__2338
1d788     7C 01 90 FD | 	jmp	#LR__2339
1d78c     8C 01 90 FD | 	jmp	#LR__2340
1d790     B8 01 90 FD | 	jmp	#LR__2341
1d794                 | LR__2329
1d794     A7 12 02 F6 | 	mov	arg01, fp
1d798     34 4E 05 F1 | 	add	fp, #52
1d79c     A7 14 02 FB | 	rdlong	arg02, fp
1d7a0     34 4E 85 F1 | 	sub	fp, #52
1d7a4     0C 16 06 F6 | 	mov	arg03, #12
1d7a8     0B 00 00 FF 
1d7ac     CC E4 05 F1 | 	add	objptr, ##5836
1d7b0     F0 8B B0 FD | 	call	#_psram_spin2_read1
1d7b4     0B 00 00 FF 
1d7b8     CC E4 85 F1 | 	sub	objptr, ##5836
1d7bc     8C 01 90 FD | 	jmp	#LR__2341
1d7c0                 | LR__2330
1d7c0     08 4E 05 F1 | 	add	fp, #8
1d7c4     A7 38 68 FC | 	wrlong	#28, fp
1d7c8     2C 4E 05 F1 | 	add	fp, #44
1d7cc     A7 12 02 FB | 	rdlong	arg01, fp
1d7d0     34 4E 85 F1 | 	sub	fp, #52
1d7d4     8C 60 B0 FD | 	call	#_pspeek
1d7d8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d7dc     A7 FA 61 FC | 	wrlong	result1, fp
1d7e0     80 FA 15 F2 | 	cmp	result1, #128 wc
1d7e4     00 27 66 36 |  if_ae	neg	local01, #256
1d7e8     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1d7ec     15 27 42 35 |  if_ae	or	local01, local03
1d7f0     A7 26 62 3C |  if_ae	wrlong	local01, fp
1d7f4     54 01 90 FD | 	jmp	#LR__2341
1d7f8                 | LR__2331
1d7f8     08 4E 05 F1 | 	add	fp, #8
1d7fc     A7 3A 68 FC | 	wrlong	#29, fp
1d800     2C 4E 05 F1 | 	add	fp, #44
1d804     A7 12 02 FB | 	rdlong	arg01, fp
1d808     34 4E 85 F1 | 	sub	fp, #52
1d80c     54 60 B0 FD | 	call	#_pspeek
1d810     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d814     A7 FA 61 FC | 	wrlong	result1, fp
1d818     30 01 90 FD | 	jmp	#LR__2341
1d81c                 | LR__2332
1d81c     08 4E 05 F1 | 	add	fp, #8
1d820     A7 38 68 FC | 	wrlong	#28, fp
1d824     2C 4E 05 F1 | 	add	fp, #44
1d828     A7 12 02 FB | 	rdlong	arg01, fp
1d82c     34 4E 85 F1 | 	sub	fp, #52
1d830     88 60 B0 FD | 	call	#_pslpeek
1d834     FD FA 31 F9 | 	getword	result1, result1, #0
1d838     A7 FA 61 FC | 	wrlong	result1, fp
1d83c     40 00 00 FF 
1d840     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1d844     FF 7F 00 3F 
1d848     00 27 06 36 |  if_ae	mov	local01, ##16776960
1d84c     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1d850     15 27 42 35 |  if_ae	or	local01, local03
1d854     A7 26 62 3C |  if_ae	wrlong	local01, fp
1d858     F0 00 90 FD | 	jmp	#LR__2341
1d85c                 | LR__2333
1d85c     08 4E 05 F1 | 	add	fp, #8
1d860     A7 3A 68 FC | 	wrlong	#29, fp
1d864     2C 4E 05 F1 | 	add	fp, #44
1d868     A7 12 02 FB | 	rdlong	arg01, fp
1d86c     34 4E 85 F1 | 	sub	fp, #52
1d870     48 60 B0 FD | 	call	#_pslpeek
1d874     FD FA 31 F9 | 	getword	result1, result1, #0
1d878     A7 FA 61 FC | 	wrlong	result1, fp
1d87c     CC 00 90 FD | 	jmp	#LR__2341
1d880                 | LR__2334
1d880     08 4E 05 F1 | 	add	fp, #8
1d884     A7 38 68 FC | 	wrlong	#28, fp
1d888     2C 4E 05 F1 | 	add	fp, #44
1d88c     A7 12 02 FB | 	rdlong	arg01, fp
1d890     34 4E 85 F1 | 	sub	fp, #52
1d894     24 60 B0 FD | 	call	#_pslpeek
1d898     A7 FA 61 FC | 	wrlong	result1, fp
1d89c     AC 00 90 FD | 	jmp	#LR__2341
1d8a0                 | LR__2335
1d8a0     08 4E 05 F1 | 	add	fp, #8
1d8a4     A7 3A 68 FC | 	wrlong	#29, fp
1d8a8     2C 4E 05 F1 | 	add	fp, #44
1d8ac     A7 12 02 FB | 	rdlong	arg01, fp
1d8b0     34 4E 85 F1 | 	sub	fp, #52
1d8b4     04 60 B0 FD | 	call	#_pslpeek
1d8b8     A7 FA 61 FC | 	wrlong	result1, fp
1d8bc     8C 00 90 FD | 	jmp	#LR__2341
1d8c0                 | LR__2336
1d8c0     08 4E 05 F1 | 	add	fp, #8
1d8c4     A7 FE 69 FC | 	wrlong	#255, fp
1d8c8     08 4E 85 F1 | 	sub	fp, #8
1d8cc     A7 60 68 FC | 	wrlong	#48, fp
1d8d0     78 00 90 FD | 	jmp	#LR__2341
1d8d4                 | LR__2337
1d8d4     08 4E 05 F1 | 	add	fp, #8
1d8d8     A7 FE 69 FC | 	wrlong	#255, fp
1d8dc     08 4E 85 F1 | 	sub	fp, #8
1d8e0     A7 60 68 FC | 	wrlong	#48, fp
1d8e4     64 00 90 FD | 	jmp	#LR__2341
1d8e8                 | LR__2338
1d8e8     08 4E 05 F1 | 	add	fp, #8
1d8ec     A7 3C 68 FC | 	wrlong	#30, fp
1d8f0     2C 4E 05 F1 | 	add	fp, #44
1d8f4     A7 12 02 FB | 	rdlong	arg01, fp
1d8f8     34 4E 85 F1 | 	sub	fp, #52
1d8fc     BC 5F B0 FD | 	call	#_pslpeek
1d900     A7 FA 61 FC | 	wrlong	result1, fp
1d904     44 00 90 FD | 	jmp	#LR__2341
1d908                 | LR__2339
1d908     08 4E 05 F1 | 	add	fp, #8
1d90c     A7 FE 69 FC | 	wrlong	#255, fp
1d910     08 4E 85 F1 | 	sub	fp, #8
1d914     A7 60 68 FC | 	wrlong	#48, fp
1d918     30 00 90 FD | 	jmp	#LR__2341
1d91c                 | LR__2340
1d91c     08 4E 05 F1 | 	add	fp, #8
1d920     A7 3E 68 FC | 	wrlong	#31, fp
1d924     2C 4E 05 F1 | 	add	fp, #44
1d928     A7 12 02 FB | 	rdlong	arg01, fp
1d92c     34 4E 85 F1 | 	sub	fp, #52
1d930     88 5F B0 FD | 	call	#_pslpeek
1d934     A7 FA 61 FC | 	wrlong	result1, fp
1d938     00 04 00 FF 
1d93c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1d940     08 4E 05 31 |  if_ae	add	fp, #8
1d944     A7 56 68 3C |  if_ae	wrlong	#43, fp
1d948     08 4E 85 31 |  if_ae	sub	fp, #8
1d94c                 | LR__2341
1d94c     A7 12 02 F6 | 	mov	arg01, fp
1d950     4C FE BE FD | 	call	#_push
1d954                 | LR__2342
1d954     A7 F0 03 F6 | 	mov	ptra, fp
1d958     B2 00 A0 FD | 	call	#popregs_
1d95c                 | _do_getvar_ret
1d95c     2D 00 64 FD | 	ret
1d960                 | 
1d960                 | ' 
1d960                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1d960                 | ' 
1d960                 | ' sub do_getaddr
1d960                 | _do_getaddr
1d960     01 4A 05 F6 | 	mov	COUNT_, #1
1d964     A8 00 A0 FD | 	call	#pushregs_
1d968     38 F0 07 F1 | 	add	ptra, #56
1d96c                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1d96c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1d96c     4A 00 00 FF 
1d970     80 E4 05 F1 | 	add	objptr, ##38016
1d974     F2 12 02 FB | 	rdlong	arg01, objptr
1d978     09 FD 01 F6 | 	mov	result2, arg01
1d97c     01 FC 65 F0 | 	shl	result2, #1
1d980     09 FD 01 F1 | 	add	result2, arg01
1d984     02 FC 65 F0 | 	shl	result2, #2
1d988     03 00 00 FF 
1d98c     04 E4 85 F1 | 	sub	objptr, ##1540
1d990     F2 FC 01 F1 | 	add	result2, objptr
1d994     04 FC 05 F1 | 	add	result2, #4
1d998     FE FC 09 FB | 	rdlong	result2, result2 wz
1d99c     47 00 00 FF 
1d9a0     7C E4 85 F1 | 	sub	objptr, ##36476
1d9a4     10 01 90 5D |  if_ne	jmp	#LR__2350
1d9a8     4A 00 00 FF 
1d9ac     80 E4 05 F1 | 	add	objptr, ##38016
1d9b0     F2 12 02 FB | 	rdlong	arg01, objptr
1d9b4     09 FD 01 F6 | 	mov	result2, arg01
1d9b8     01 FC 65 F0 | 	shl	result2, #1
1d9bc     09 FD 01 F1 | 	add	result2, arg01
1d9c0     02 FC 65 F0 | 	shl	result2, #2
1d9c4     03 00 00 FF 
1d9c8     04 E4 85 F1 | 	sub	objptr, ##1540
1d9cc     F2 FC 01 F1 | 	add	result2, objptr
1d9d0     FE 12 02 FB | 	rdlong	arg01, result2
1d9d4     04 12 66 F0 | 	shl	arg01, #4
1d9d8     32 00 00 FF 
1d9dc     84 E4 85 F1 | 	sub	objptr, ##25732
1d9e0     F2 12 02 F1 | 	add	arg01, objptr
1d9e4     0C 12 06 F1 | 	add	arg01, #12
1d9e8     09 13 02 FB | 	rdlong	arg01, arg01
1d9ec     08 4E 05 F1 | 	add	fp, #8
1d9f0     A7 12 62 FC | 	wrlong	arg01, fp
1d9f4                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1d9f4                 | '    if t1.result_type>=array_no_type then goto 2200
1d9f4     08 4E 85 F1 | 	sub	fp, #8
1d9f8     00 13 16 F2 | 	cmp	arg01, #256 wc
1d9fc     14 00 00 FF 
1da00     F8 E5 85 F1 | 	sub	objptr, ##10744
1da04     B0 00 90 3D |  if_ae	jmp	#LR__2351
1da08     4A 00 00 FF 
1da0c     80 E4 05 F1 | 	add	objptr, ##38016
1da10     F2 12 02 FB | 	rdlong	arg01, objptr
1da14     09 FF 01 F6 | 	mov	result3, arg01
1da18     01 FE 65 F0 | 	shl	result3, #1
1da1c     09 FF 01 F1 | 	add	result3, arg01
1da20     02 FE 65 F0 | 	shl	result3, #2
1da24     03 00 00 FF 
1da28     04 E4 85 F1 | 	sub	objptr, ##1540
1da2c     F2 FE 01 F1 | 	add	result3, objptr
1da30     FF FA 01 FB | 	rdlong	result1, result3
1da34     04 FA 65 F0 | 	shl	result1, #4
1da38     32 00 00 FF 
1da3c     84 E4 85 F1 | 	sub	objptr, ##25732
1da40     F2 FA 01 F1 | 	add	result1, objptr
1da44     04 FA 05 F1 | 	add	result1, #4
1da48     A7 FA 61 FC | 	wrlong	result1, fp
1da4c     35 00 00 FF 
1da50     88 E4 05 F1 | 	add	objptr, ##27272
1da54     F2 FE 01 FB | 	rdlong	result3, objptr
1da58     FF 12 02 F6 | 	mov	arg01, result3
1da5c     01 12 66 F0 | 	shl	arg01, #1
1da60     FF 12 02 F1 | 	add	arg01, result3
1da64     02 12 66 F0 | 	shl	arg01, #2
1da68     03 00 00 FF 
1da6c     04 E4 85 F1 | 	sub	objptr, ##1540
1da70     F2 12 02 F1 | 	add	arg01, objptr
1da74     09 13 02 FB | 	rdlong	arg01, arg01
1da78     04 12 66 F0 | 	shl	arg01, #4
1da7c     32 00 00 FF 
1da80     84 E4 85 F1 | 	sub	objptr, ##25732
1da84     F2 12 02 F1 | 	add	arg01, objptr
1da88     0C 12 06 F1 | 	add	arg01, #12
1da8c     09 13 02 FB | 	rdlong	arg01, arg01
1da90     04 4E 05 F1 | 	add	fp, #4
1da94     A7 12 62 FC | 	wrlong	arg01, fp
1da98     04 4E 05 F1 | 	add	fp, #4
1da9c     A7 3A 68 FC | 	wrlong	#29, fp
1daa0     08 4E 85 F1 | 	sub	fp, #8
1daa4     A7 12 02 F6 | 	mov	arg01, fp
1daa8     14 00 00 FF 
1daac     F8 E5 85 F1 | 	sub	objptr, ##10744
1dab0     EC FC BE FD | 	call	#_push
1dab4                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1dab4                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1dab4                 | '   t1.result_type=result_uint
1dab4                 | '   push t1 : return
1dab4     2C 03 90 FD | 	jmp	#LR__2360
1dab8                 | LR__2350
1dab8                 | LR__2351
1dab8     4A 00 00 FF 
1dabc     80 E4 05 F1 | 	add	objptr, ##38016
1dac0     F2 FE 01 FB | 	rdlong	result3, objptr
1dac4     FF FC 01 F6 | 	mov	result2, result3
1dac8     01 FC 65 F0 | 	shl	result2, #1
1dacc     FF FC 01 F1 | 	add	result2, result3
1dad0     02 FC 65 F0 | 	shl	result2, #2
1dad4     03 00 00 FF 
1dad8     04 E4 85 F1 | 	sub	objptr, ##1540
1dadc     F2 FC 01 F1 | 	add	result2, objptr
1dae0     FE FE 01 FB | 	rdlong	result3, result2
1dae4     04 FE 65 F0 | 	shl	result3, #4
1dae8     32 00 00 FF 
1daec     84 E4 85 F1 | 	sub	objptr, ##25732
1daf0     F2 FE 01 F1 | 	add	result3, objptr
1daf4     04 FE 05 F1 | 	add	result3, #4
1daf8     FF FE 01 FB | 	rdlong	result3, result3
1dafc     0C 4E 05 F1 | 	add	fp, #12
1db00     A7 FE 61 FC | 	wrlong	result3, fp
1db04     35 00 00 FF 
1db08     88 E4 05 F1 | 	add	objptr, ##27272
1db0c     F2 FE 01 FB | 	rdlong	result3, objptr
1db10     FF 12 02 F6 | 	mov	arg01, result3
1db14     01 12 66 F0 | 	shl	arg01, #1
1db18     FF 12 02 F1 | 	add	arg01, result3
1db1c     02 12 66 F0 | 	shl	arg01, #2
1db20     03 00 00 FF 
1db24     04 E4 85 F1 | 	sub	objptr, ##1540
1db28     F2 12 02 F1 | 	add	arg01, objptr
1db2c     09 13 02 FB | 	rdlong	arg01, arg01
1db30     04 12 66 F0 | 	shl	arg01, #4
1db34     32 00 00 FF 
1db38     84 E4 85 F1 | 	sub	objptr, ##25732
1db3c     F2 12 02 F1 | 	add	arg01, objptr
1db40     0C 12 06 F1 | 	add	arg01, #12
1db44     09 13 02 FB | 	rdlong	arg01, arg01
1db48     08 4E 85 F1 | 	sub	fp, #8
1db4c     A7 12 62 FC | 	wrlong	arg01, fp
1db50     08 4E 05 F1 | 	add	fp, #8
1db54     A7 12 02 FB | 	rdlong	arg01, fp
1db58     0C 4E 85 F1 | 	sub	fp, #12
1db5c     14 00 00 FF 
1db60     F8 E5 85 F1 | 	sub	objptr, ##10744
1db64     54 5D B0 FD | 	call	#_pslpeek
1db68     FD FA 31 F9 | 	getword	result1, result1, #0
1db6c     10 4E 05 F1 | 	add	fp, #16
1db70     A7 FA 61 FC | 	wrlong	result1, fp
1db74     4A 00 00 FF 
1db78     80 E4 05 F1 | 	add	objptr, ##38016
1db7c     F2 FE 01 FB | 	rdlong	result3, objptr
1db80     FF 12 02 F6 | 	mov	arg01, result3
1db84     01 12 66 F0 | 	shl	arg01, #1
1db88     FF 12 02 F1 | 	add	arg01, result3
1db8c     02 12 66 F0 | 	shl	arg01, #2
1db90     03 00 00 FF 
1db94     04 E4 85 F1 | 	sub	objptr, ##1540
1db98     F2 12 02 F1 | 	add	arg01, objptr
1db9c     04 12 06 F1 | 	add	arg01, #4
1dba0     09 13 02 FB | 	rdlong	arg01, arg01
1dba4     04 4E 05 F1 | 	add	fp, #4
1dba8     A7 12 62 FC | 	wrlong	arg01, fp
1dbac     08 4E 85 F1 | 	sub	fp, #8
1dbb0     A7 12 02 FB | 	rdlong	arg01, fp
1dbb4     0C 4E 85 F1 | 	sub	fp, #12
1dbb8     02 12 06 F1 | 	add	arg01, #2
1dbbc     47 00 00 FF 
1dbc0     7C E4 85 F1 | 	sub	objptr, ##36476
1dbc4     9C 5C B0 FD | 	call	#_pspeek
1dbc8     FD FA E1 F8 | 	getbyte	result1, result1, #0
1dbcc     18 4E 05 F1 | 	add	fp, #24
1dbd0     A7 FA 61 FC | 	wrlong	result1, fp
1dbd4     0C 4E 85 F1 | 	sub	fp, #12
1dbd8     A7 12 02 FB | 	rdlong	arg01, fp
1dbdc     0C 4E 85 F1 | 	sub	fp, #12
1dbe0     04 12 06 F1 | 	add	arg01, #4
1dbe4     D4 5C B0 FD | 	call	#_pslpeek
1dbe8     1C 4E 05 F1 | 	add	fp, #28
1dbec     A7 FA 61 FC | 	wrlong	result1, fp
1dbf0     10 4E 85 F1 | 	sub	fp, #16
1dbf4     A7 12 02 FB | 	rdlong	arg01, fp
1dbf8     0C 4E 85 F1 | 	sub	fp, #12
1dbfc     08 12 06 F1 | 	add	arg01, #8
1dc00     B8 5C B0 FD | 	call	#_pslpeek
1dc04     20 4E 05 F1 | 	add	fp, #32
1dc08     A7 FA 61 FC | 	wrlong	result1, fp
1dc0c     14 4E 85 F1 | 	sub	fp, #20
1dc10     A7 12 02 FB | 	rdlong	arg01, fp
1dc14     0C 4E 85 F1 | 	sub	fp, #12
1dc18     0C 12 06 F1 | 	add	arg01, #12
1dc1c     9C 5C B0 FD | 	call	#_pslpeek
1dc20     24 4E 05 F1 | 	add	fp, #36
1dc24     A7 FA 61 FC | 	wrlong	result1, fp
1dc28                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1dc28                 | ' esize=pspeek(arrptr+2)
1dc28                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1dc28                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1dc28                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1dc28                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1dc28     10 4E 85 F1 | 	sub	fp, #16
1dc2c     A7 12 02 FB | 	rdlong	arg01, fp
1dc30     14 4E 85 F1 | 	sub	fp, #20
1dc34     03 12 16 F2 | 	cmp	arg01, #3 wc
1dc38     34 00 90 CD |  if_b	jmp	#LR__2352
1dc3c     C8 FA BE FD | 	call	#_pop
1dc40     A7 FA 61 FC | 	wrlong	result1, fp
1dc44     04 4E 05 F1 | 	add	fp, #4
1dc48     A7 FC 61 FC | 	wrlong	result2, fp
1dc4c     04 4E 05 F1 | 	add	fp, #4
1dc50     A7 FE 61 FC | 	wrlong	result3, fp
1dc54     08 4E 85 F1 | 	sub	fp, #8
1dc58     A7 12 02 F6 | 	mov	arg01, fp
1dc5c     8C FC BE FD | 	call	#_converttoint
1dc60     30 4E 05 F1 | 	add	fp, #48
1dc64     A7 FA 61 FC | 	wrlong	result1, fp
1dc68     30 4E 85 F1 | 	sub	fp, #48
1dc6c     0C 00 90 FD | 	jmp	#LR__2353
1dc70                 | LR__2352
1dc70     30 4E 05 F1 | 	add	fp, #48
1dc74     A7 00 68 FC | 	wrlong	#0, fp
1dc78     30 4E 85 F1 | 	sub	fp, #48
1dc7c                 | LR__2353
1dc7c                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1dc7c     14 4E 05 F1 | 	add	fp, #20
1dc80     A7 12 02 FB | 	rdlong	arg01, fp
1dc84     14 4E 85 F1 | 	sub	fp, #20
1dc88     02 12 16 F2 | 	cmp	arg01, #2 wc
1dc8c     34 00 90 CD |  if_b	jmp	#LR__2354
1dc90     74 FA BE FD | 	call	#_pop
1dc94     A7 FA 61 FC | 	wrlong	result1, fp
1dc98     04 4E 05 F1 | 	add	fp, #4
1dc9c     A7 FC 61 FC | 	wrlong	result2, fp
1dca0     04 4E 05 F1 | 	add	fp, #4
1dca4     A7 FE 61 FC | 	wrlong	result3, fp
1dca8     08 4E 85 F1 | 	sub	fp, #8
1dcac     A7 12 02 F6 | 	mov	arg01, fp
1dcb0     38 FC BE FD | 	call	#_converttoint
1dcb4     2C 4E 05 F1 | 	add	fp, #44
1dcb8     A7 FA 61 FC | 	wrlong	result1, fp
1dcbc     2C 4E 85 F1 | 	sub	fp, #44
1dcc0     0C 00 90 FD | 	jmp	#LR__2355
1dcc4                 | LR__2354
1dcc4     2C 4E 05 F1 | 	add	fp, #44
1dcc8     A7 00 68 FC | 	wrlong	#0, fp
1dccc     2C 4E 85 F1 | 	sub	fp, #44
1dcd0                 | LR__2355
1dcd0                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1dcd0     14 4E 05 F1 | 	add	fp, #20
1dcd4     A7 12 02 FB | 	rdlong	arg01, fp
1dcd8     14 4E 85 F1 | 	sub	fp, #20
1dcdc     01 12 16 F2 | 	cmp	arg01, #1 wc
1dce0     34 00 90 CD |  if_b	jmp	#LR__2356
1dce4     20 FA BE FD | 	call	#_pop
1dce8     A7 FA 61 FC | 	wrlong	result1, fp
1dcec     04 4E 05 F1 | 	add	fp, #4
1dcf0     A7 FC 61 FC | 	wrlong	result2, fp
1dcf4     04 4E 05 F1 | 	add	fp, #4
1dcf8     A7 FE 61 FC | 	wrlong	result3, fp
1dcfc     08 4E 85 F1 | 	sub	fp, #8
1dd00     A7 12 02 F6 | 	mov	arg01, fp
1dd04     E4 FB BE FD | 	call	#_converttoint
1dd08     28 4E 05 F1 | 	add	fp, #40
1dd0c     A7 FA 61 FC | 	wrlong	result1, fp
1dd10     28 4E 85 F1 | 	sub	fp, #40
1dd14     0C 00 90 FD | 	jmp	#LR__2357
1dd18                 | LR__2356
1dd18     28 4E 05 F1 | 	add	fp, #40
1dd1c     A7 00 68 FC | 	wrlong	#0, fp
1dd20     28 4E 85 F1 | 	sub	fp, #40
1dd24                 | LR__2357
1dd24                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1dd24                 | ' if numpar>0 then
1dd24     14 4E 05 F1 | 	add	fp, #20
1dd28     A7 FE 01 FB | 	rdlong	result3, fp
1dd2c     14 4E 85 F1 | 	sub	fp, #20
1dd30     01 FE 15 F2 | 	cmp	result3, #1 wc
1dd34     8C 00 90 CD |  if_b	jmp	#LR__2358
1dd38     0C 4E 05 F1 | 	add	fp, #12
1dd3c     A7 FC 01 FB | 	rdlong	result2, fp
1dd40     1C 4E 05 F1 | 	add	fp, #28
1dd44     A7 FE 01 FB | 	rdlong	result3, fp
1dd48     04 4E 05 F1 | 	add	fp, #4
1dd4c     A7 12 02 FB | 	rdlong	arg01, fp
1dd50     10 4E 85 F1 | 	sub	fp, #16
1dd54     A7 FA 01 FB | 	rdlong	result1, fp
1dd58     FD 12 02 FD | 	qmul	arg01, result1
1dd5c     10 FC 05 F1 | 	add	result2, #16
1dd60     14 4E 05 F1 | 	add	fp, #20
1dd64     A7 26 02 FB | 	rdlong	local01, fp
1dd68     18 12 62 FD | 	getqx	arg01
1dd6c     FD 26 02 FD | 	qmul	local01, result1
1dd70     09 FF 01 F1 | 	add	result3, arg01
1dd74     10 4E 85 F1 | 	sub	fp, #16
1dd78     A7 26 02 FB | 	rdlong	local01, fp
1dd7c     18 FA 61 FD | 	getqx	result1
1dd80     13 FB 01 FD | 	qmul	result1, local01
1dd84     08 4E 85 F1 | 	sub	fp, #8
1dd88     A7 26 02 FB | 	rdlong	local01, fp
1dd8c     18 FA 61 FD | 	getqx	result1
1dd90     FD FE 01 F1 | 	add	result3, result1
1dd94     13 FF 01 FD | 	qmul	result3, local01
1dd98     1C 4E 05 F1 | 	add	fp, #28
1dd9c     18 26 62 FD | 	getqx	local01
1dda0     13 FD 01 F1 | 	add	result2, local01
1dda4     A7 FC 61 FC | 	wrlong	result2, fp
1dda8     2C 4E 85 F1 | 	sub	fp, #44
1ddac     A7 3A 68 FC | 	wrlong	#29, fp
1ddb0     2C 4E 05 F1 | 	add	fp, #44
1ddb4     A7 26 02 FB | 	rdlong	local01, fp
1ddb8     34 4E 85 F1 | 	sub	fp, #52
1ddbc     A7 26 62 FC | 	wrlong	local01, fp
1ddc0     18 00 90 FD | 	jmp	#LR__2359
1ddc4                 | LR__2358
1ddc4     08 4E 05 F1 | 	add	fp, #8
1ddc8     A7 3A 68 FC | 	wrlong	#29, fp
1ddcc     04 4E 05 F1 | 	add	fp, #4
1ddd0     A7 26 02 FB | 	rdlong	local01, fp
1ddd4     0C 4E 85 F1 | 	sub	fp, #12
1ddd8     A7 26 62 FC | 	wrlong	local01, fp
1dddc                 | LR__2359
1dddc     A7 12 02 F6 | 	mov	arg01, fp
1dde0     BC F9 BE FD | 	call	#_push
1dde4                 | LR__2360
1dde4     A7 F0 03 F6 | 	mov	ptra, fp
1dde8     B2 00 A0 FD | 	call	#popregs_
1ddec                 | _do_getaddr_ret
1ddec     2D 00 64 FD | 	ret
1ddf0                 | 
1ddf0                 | ' 
1ddf0                 | ' 
1ddf0                 | ' 
1ddf0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1ddf0                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1ddf0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1ddf0                 | ' 
1ddf0                 | ' '--------------------------------- AND 
1ddf0                 | ' 
1ddf0                 | ' sub do_and 
1ddf0                 | _do_and
1ddf0     03 4A 05 F6 | 	mov	COUNT_, #3
1ddf4     A8 00 A0 FD | 	call	#pushregs_
1ddf8     18 F0 07 F1 | 	add	ptra, #24
1ddfc     08 F9 BE FD | 	call	#_pop
1de00     FD 12 02 F6 | 	mov	arg01, result1
1de04     FE 26 02 F6 | 	mov	local01, result2
1de08     FF 28 02 F6 | 	mov	local02, result3
1de0c     0C 4E 05 F1 | 	add	fp, #12
1de10     A7 12 62 FC | 	wrlong	arg01, fp
1de14     04 4E 05 F1 | 	add	fp, #4
1de18     A7 26 62 FC | 	wrlong	local01, fp
1de1c     04 4E 05 F1 | 	add	fp, #4
1de20     A7 28 62 FC | 	wrlong	local02, fp
1de24     14 4E 85 F1 | 	sub	fp, #20
1de28     DC F8 BE FD | 	call	#_pop
1de2c     FF 2A 02 F6 | 	mov	local03, result3
1de30     A7 FA 61 FC | 	wrlong	result1, fp
1de34     04 4E 05 F1 | 	add	fp, #4
1de38     A7 FC 61 FC | 	wrlong	result2, fp
1de3c     04 4E 05 F1 | 	add	fp, #4
1de40     A7 2A 62 FC | 	wrlong	local03, fp
1de44                 | ' 
1de44                 | ' t2=pop()
1de44                 | ' t1=pop()
1de44                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1de44     08 4E 85 F1 | 	sub	fp, #8
1de48     1C 2A 0E F2 | 	cmp	local03, #28 wz
1de4c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1de50     A7 2A 62 AC |  if_e	wrlong	local03, fp
1de54     08 4E 05 A1 |  if_e	add	fp, #8
1de58     A7 3A 68 AC |  if_e	wrlong	#29, fp
1de5c     08 4E 85 A1 |  if_e	sub	fp, #8
1de60                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1de60     14 4E 05 F1 | 	add	fp, #20
1de64     A7 2A 02 FB | 	rdlong	local03, fp
1de68     14 4E 85 F1 | 	sub	fp, #20
1de6c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1de70     18 00 90 5D |  if_ne	jmp	#LR__2370
1de74     0C 4E 05 F1 | 	add	fp, #12
1de78     A7 2A 02 FB | 	rdlong	local03, fp
1de7c     A7 2A 62 FC | 	wrlong	local03, fp
1de80     08 4E 05 F1 | 	add	fp, #8
1de84     A7 3A 68 FC | 	wrlong	#29, fp
1de88     14 4E 85 F1 | 	sub	fp, #20
1de8c                 | LR__2370
1de8c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1de8c     08 4E 05 F1 | 	add	fp, #8
1de90     A7 2A 02 FB | 	rdlong	local03, fp
1de94     08 4E 85 F1 | 	sub	fp, #8
1de98     1F 2A 0E F2 | 	cmp	local03, #31 wz
1de9c     14 4E 05 51 |  if_ne	add	fp, #20
1dea0     A7 28 02 5B |  if_ne	rdlong	local02, fp
1dea4     14 4E 85 51 |  if_ne	sub	fp, #20
1dea8     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1deac     08 4E 05 51 |  if_ne	add	fp, #8
1deb0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1deb4     08 4E 85 51 |  if_ne	sub	fp, #8
1deb8     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1debc     14 4E 05 51 |  if_ne	add	fp, #20
1dec0     14 4E 85 51 |  if_ne	sub	fp, #20
1dec4     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1dec8     A7 0C 68 AC |  if_e	wrlong	#6, fp
1decc     08 4E 05 A1 |  if_e	add	fp, #8
1ded0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1ded4     08 4E 85 A1 |  if_e	sub	fp, #8
1ded8     18 00 90 AD |  if_e	jmp	#LR__2371
1dedc     A7 2A 02 FB | 	rdlong	local03, fp
1dee0     0C 4E 05 F1 | 	add	fp, #12
1dee4     A7 26 02 FB | 	rdlong	local01, fp
1dee8     0C 4E 85 F1 | 	sub	fp, #12
1deec     13 2B 02 F5 | 	and	local03, local01
1def0     A7 2A 62 FC | 	wrlong	local03, fp
1def4                 | LR__2371
1def4     A7 12 02 F6 | 	mov	arg01, fp
1def8     A4 F8 BE FD | 	call	#_push
1defc     A7 F0 03 F6 | 	mov	ptra, fp
1df00     B2 00 A0 FD | 	call	#popregs_
1df04                 | _do_and_ret
1df04     2D 00 64 FD | 	ret
1df08                 | 
1df08                 | ' 
1df08                 | ' '--------------------------------- DIV (integer divide)
1df08                 | ' 
1df08                 | ' sub do_div 
1df08                 | _do_div
1df08     01 4A 05 F6 | 	mov	COUNT_, #1
1df0c     A8 00 A0 FD | 	call	#pushregs_
1df10     18 F0 07 F1 | 	add	ptra, #24
1df14     F0 F7 BE FD | 	call	#_pop
1df18     FD 92 02 F6 | 	mov	muldivb_, result1
1df1c     FE 90 02 F6 | 	mov	muldiva_, result2
1df20     FF 26 02 F6 | 	mov	local01, result3
1df24     0C 4E 05 F1 | 	add	fp, #12
1df28     A7 92 62 FC | 	wrlong	muldivb_, fp
1df2c     04 4E 05 F1 | 	add	fp, #4
1df30     A7 90 62 FC | 	wrlong	muldiva_, fp
1df34     04 4E 05 F1 | 	add	fp, #4
1df38     A7 26 62 FC | 	wrlong	local01, fp
1df3c     14 4E 85 F1 | 	sub	fp, #20
1df40     C4 F7 BE FD | 	call	#_pop
1df44     A7 FA 61 FC | 	wrlong	result1, fp
1df48     04 4E 05 F1 | 	add	fp, #4
1df4c     A7 FC 61 FC | 	wrlong	result2, fp
1df50     04 4E 05 F1 | 	add	fp, #4
1df54     A7 FE 61 FC | 	wrlong	result3, fp
1df58                 | ' 
1df58                 | ' t2=pop()
1df58                 | ' t1=pop()
1df58                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1df58     08 4E 85 F1 | 	sub	fp, #8
1df5c     1F FE 0D F2 | 	cmp	result3, #31 wz
1df60     14 4E 05 51 |  if_ne	add	fp, #20
1df64     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1df68     14 4E 85 51 |  if_ne	sub	fp, #20
1df6c     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1df70     A7 14 68 AC |  if_e	wrlong	#10, fp
1df74     08 4E 05 A1 |  if_e	add	fp, #8
1df78     A7 FE 69 AC |  if_e	wrlong	#255, fp
1df7c     08 4E 85 A1 |  if_e	sub	fp, #8
1df80     90 01 90 AD |  if_e	jmp	#LR__2386
1df84                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1df84     08 4E 05 F1 | 	add	fp, #8
1df88     A7 92 02 FB | 	rdlong	muldivb_, fp
1df8c     08 4E 85 F1 | 	sub	fp, #8
1df90     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1df94     1C 00 90 5D |  if_ne	jmp	#LR__2380
1df98     08 4E 05 F1 | 	add	fp, #8
1df9c     A7 38 68 FC | 	wrlong	#28, fp
1dfa0     08 4E 85 F1 | 	sub	fp, #8
1dfa4     A7 12 02 FB | 	rdlong	arg01, fp
1dfa8     00 14 06 F6 | 	mov	arg02, #0
1dfac     30 C4 B0 FD | 	call	#__system___float_tointeger
1dfb0     A7 FA 61 FC | 	wrlong	result1, fp
1dfb4                 | LR__2380
1dfb4                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1dfb4     14 4E 05 F1 | 	add	fp, #20
1dfb8     A7 92 02 FB | 	rdlong	muldivb_, fp
1dfbc     14 4E 85 F1 | 	sub	fp, #20
1dfc0     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1dfc4     28 00 90 5D |  if_ne	jmp	#LR__2381
1dfc8     14 4E 05 F1 | 	add	fp, #20
1dfcc     A7 38 68 FC | 	wrlong	#28, fp
1dfd0     08 4E 85 F1 | 	sub	fp, #8
1dfd4     A7 12 02 FB | 	rdlong	arg01, fp
1dfd8     0C 4E 85 F1 | 	sub	fp, #12
1dfdc     00 14 06 F6 | 	mov	arg02, #0
1dfe0     FC C3 B0 FD | 	call	#__system___float_tointeger
1dfe4     0C 4E 05 F1 | 	add	fp, #12
1dfe8     A7 FA 61 FC | 	wrlong	result1, fp
1dfec     0C 4E 85 F1 | 	sub	fp, #12
1dff0                 | LR__2381
1dff0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1dff0     08 4E 05 F1 | 	add	fp, #8
1dff4     A7 92 02 FB | 	rdlong	muldivb_, fp
1dff8     08 4E 85 F1 | 	sub	fp, #8
1dffc     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1e000     14 4E 05 A1 |  if_e	add	fp, #20
1e004     A7 26 02 AB |  if_e	rdlong	local01, fp
1e008     14 4E 85 A1 |  if_e	sub	fp, #20
1e00c     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1e010     20 00 90 5D |  if_ne	jmp	#LR__2382
1e014     0C 4E 05 F1 | 	add	fp, #12
1e018     A7 26 02 FB | 	rdlong	local01, fp
1e01c     0C 4E 85 F1 | 	sub	fp, #12
1e020     A7 92 02 FB | 	rdlong	muldivb_, fp
1e024     13 93 12 FD | 	qdiv	muldivb_, local01
1e028     18 26 62 FD | 	getqx	local01
1e02c     A7 26 62 FC | 	wrlong	local01, fp
1e030     E0 00 90 FD | 	jmp	#LR__2386
1e034                 | LR__2382
1e034                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1e034     08 4E 05 F1 | 	add	fp, #8
1e038     A7 92 02 FB | 	rdlong	muldivb_, fp
1e03c     08 4E 85 F1 | 	sub	fp, #8
1e040     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1e044     14 4E 05 A1 |  if_e	add	fp, #20
1e048     A7 26 02 AB |  if_e	rdlong	local01, fp
1e04c     14 4E 85 A1 |  if_e	sub	fp, #20
1e050     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1e054     2C 00 90 5D |  if_ne	jmp	#LR__2383
1e058     0C 4E 05 F1 | 	add	fp, #12
1e05c     A7 26 02 FB | 	rdlong	local01, fp
1e060     0C 4E 85 F1 | 	sub	fp, #12
1e064     A7 92 02 FB | 	rdlong	muldivb_, fp
1e068     13 93 12 FD | 	qdiv	muldivb_, local01
1e06c     18 26 62 FD | 	getqx	local01
1e070     A7 26 62 FC | 	wrlong	local01, fp
1e074     08 4E 05 F1 | 	add	fp, #8
1e078     A7 38 68 FC | 	wrlong	#28, fp
1e07c     08 4E 85 F1 | 	sub	fp, #8
1e080     90 00 90 FD | 	jmp	#LR__2386
1e084                 | LR__2383
1e084                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1e084     08 4E 05 F1 | 	add	fp, #8
1e088     A7 92 02 FB | 	rdlong	muldivb_, fp
1e08c     08 4E 85 F1 | 	sub	fp, #8
1e090     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1e094     14 4E 05 A1 |  if_e	add	fp, #20
1e098     A7 26 02 AB |  if_e	rdlong	local01, fp
1e09c     14 4E 85 A1 |  if_e	sub	fp, #20
1e0a0     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1e0a4     1C 00 90 5D |  if_ne	jmp	#LR__2384
1e0a8     A7 90 02 FB | 	rdlong	muldiva_, fp
1e0ac     0C 4E 05 F1 | 	add	fp, #12
1e0b0     A7 92 02 FB | 	rdlong	muldivb_, fp
1e0b4     0C 4E 85 F1 | 	sub	fp, #12
1e0b8     BA 00 A0 FD | 	call	#divide_
1e0bc     A7 92 62 FC | 	wrlong	muldivb_, fp
1e0c0     50 00 90 FD | 	jmp	#LR__2386
1e0c4                 | LR__2384
1e0c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1e0c4     08 4E 05 F1 | 	add	fp, #8
1e0c8     A7 92 02 FB | 	rdlong	muldivb_, fp
1e0cc     08 4E 85 F1 | 	sub	fp, #8
1e0d0     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1e0d4     14 4E 05 A1 |  if_e	add	fp, #20
1e0d8     A7 26 02 AB |  if_e	rdlong	local01, fp
1e0dc     14 4E 85 A1 |  if_e	sub	fp, #20
1e0e0     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1e0e4     1C 00 90 5D |  if_ne	jmp	#LR__2385
1e0e8     A7 90 02 FB | 	rdlong	muldiva_, fp
1e0ec     0C 4E 05 F1 | 	add	fp, #12
1e0f0     A7 92 02 FB | 	rdlong	muldivb_, fp
1e0f4     0C 4E 85 F1 | 	sub	fp, #12
1e0f8     BA 00 A0 FD | 	call	#divide_
1e0fc     A7 92 62 FC | 	wrlong	muldivb_, fp
1e100     10 00 90 FD | 	jmp	#LR__2386
1e104                 | LR__2385
1e104     A7 16 68 FC | 	wrlong	#11, fp
1e108     08 4E 05 F1 | 	add	fp, #8
1e10c     A7 FE 69 FC | 	wrlong	#255, fp
1e110     08 4E 85 F1 | 	sub	fp, #8
1e114                 | LR__2386
1e114     A7 12 02 F6 | 	mov	arg01, fp
1e118     84 F6 BE FD | 	call	#_push
1e11c     A7 F0 03 F6 | 	mov	ptra, fp
1e120     B2 00 A0 FD | 	call	#popregs_
1e124                 | _do_div_ret
1e124     2D 00 64 FD | 	ret
1e128                 | 
1e128                 | ' 
1e128                 | ' '--------------------------------- equal (=)
1e128                 | ' 
1e128                 | ' sub do_eq
1e128                 | _do_eq
1e128     05 4A 05 F6 | 	mov	COUNT_, #5
1e12c     A8 00 A0 FD | 	call	#pushregs_
1e130     18 F0 07 F1 | 	add	ptra, #24
1e134     D0 F5 BE FD | 	call	#_pop
1e138     FD 26 02 F6 | 	mov	local01, result1
1e13c     FE 28 02 F6 | 	mov	local02, result2
1e140     FF 2A 02 F6 | 	mov	local03, result3
1e144     0C 4E 05 F1 | 	add	fp, #12
1e148     A7 26 62 FC | 	wrlong	local01, fp
1e14c     04 4E 05 F1 | 	add	fp, #4
1e150     A7 28 62 FC | 	wrlong	local02, fp
1e154     04 4E 05 F1 | 	add	fp, #4
1e158     A7 2A 62 FC | 	wrlong	local03, fp
1e15c     14 4E 85 F1 | 	sub	fp, #20
1e160     A4 F5 BE FD | 	call	#_pop
1e164     FF 2A 02 F6 | 	mov	local03, result3
1e168     A7 FA 61 FC | 	wrlong	result1, fp
1e16c     04 4E 05 F1 | 	add	fp, #4
1e170     A7 FC 61 FC | 	wrlong	result2, fp
1e174     04 4E 05 F1 | 	add	fp, #4
1e178     A7 2A 62 FC | 	wrlong	local03, fp
1e17c                 | ' 
1e17c                 | ' t2=pop()
1e17c                 | ' t1=pop()
1e17c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1e17c     08 4E 85 F1 | 	sub	fp, #8
1e180     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e184     14 4E 05 A1 |  if_e	add	fp, #20
1e188     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e18c     14 4E 85 A1 |  if_e	sub	fp, #20
1e190     16 2B 02 A6 |  if_e	mov	local03, local04
1e194     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e198     28 00 90 5D |  if_ne	jmp	#LR__2390
1e19c     00 26 06 F6 | 	mov	local01, #0
1e1a0     A7 12 02 FB | 	rdlong	arg01, fp
1e1a4     0C 4E 05 F1 | 	add	fp, #12
1e1a8     A7 14 02 FB | 	rdlong	arg02, fp
1e1ac     0C 4E 85 F1 | 	sub	fp, #12
1e1b0     10 8F B0 FD | 	call	#__system___string_cmp
1e1b4     00 FA 0D F2 | 	cmp	result1, #0 wz
1e1b8     00 26 26 A6 |  if_e	not	local01, #0
1e1bc     A7 26 62 FC | 	wrlong	local01, fp
1e1c0     20 04 90 FD | 	jmp	#LR__2403
1e1c4                 | LR__2390
1e1c4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1e1c4     08 4E 05 F1 | 	add	fp, #8
1e1c8     A7 26 02 FB | 	rdlong	local01, fp
1e1cc     08 4E 85 F1 | 	sub	fp, #8
1e1d0     1E 26 0E F2 | 	cmp	local01, #30 wz
1e1d4     14 4E 05 A1 |  if_e	add	fp, #20
1e1d8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e1dc     14 4E 85 A1 |  if_e	sub	fp, #20
1e1e0     16 2B 02 A6 |  if_e	mov	local03, local04
1e1e4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e1e8     2C 00 90 5D |  if_ne	jmp	#LR__2391
1e1ec     00 26 06 F6 | 	mov	local01, #0
1e1f0     A7 12 02 FB | 	rdlong	arg01, fp
1e1f4     0C 4E 05 F1 | 	add	fp, #12
1e1f8     A7 14 02 FB | 	rdlong	arg02, fp
1e1fc     0C 4E 85 F1 | 	sub	fp, #12
1e200     01 16 06 F6 | 	mov	arg03, #1
1e204     44 C1 B0 FD | 	call	#__system___float_cmp
1e208     00 FA 0D F2 | 	cmp	result1, #0 wz
1e20c     00 26 26 A6 |  if_e	not	local01, #0
1e210     A7 26 62 FC | 	wrlong	local01, fp
1e214     CC 03 90 FD | 	jmp	#LR__2403
1e218                 | LR__2391
1e218                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1e218     08 4E 05 F1 | 	add	fp, #8
1e21c     A7 26 02 FB | 	rdlong	local01, fp
1e220     08 4E 85 F1 | 	sub	fp, #8
1e224     1E 26 0E F2 | 	cmp	local01, #30 wz
1e228     14 4E 05 A1 |  if_e	add	fp, #20
1e22c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e230     14 4E 85 A1 |  if_e	sub	fp, #20
1e234     16 2B 02 A6 |  if_e	mov	local03, local04
1e238     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e23c     48 00 90 5D |  if_ne	jmp	#LR__2392
1e240     00 26 06 F6 | 	mov	local01, #0
1e244     A7 28 02 FB | 	rdlong	local02, fp
1e248     0C 4E 05 F1 | 	add	fp, #12
1e24c     A7 12 02 FB | 	rdlong	arg01, fp
1e250     0C 4E 85 F1 | 	sub	fp, #12
1e254     09 13 52 F6 | 	abs	arg01, arg01 wc
1e258     1F 2E C6 C9 |  if_b	decod	local05, #31
1e25c     00 2E 06 36 |  if_ae	mov	local05, #0
1e260     B0 B8 B0 FD | 	call	#__system___float_fromuns
1e264     17 FB 61 F5 | 	xor	result1, local05
1e268     FD 14 02 F6 | 	mov	arg02, result1
1e26c     14 13 02 F6 | 	mov	arg01, local02
1e270     01 16 06 F6 | 	mov	arg03, #1
1e274     D4 C0 B0 FD | 	call	#__system___float_cmp
1e278     00 FA 0D F2 | 	cmp	result1, #0 wz
1e27c     00 26 26 A6 |  if_e	not	local01, #0
1e280     A7 26 62 FC | 	wrlong	local01, fp
1e284     5C 03 90 FD | 	jmp	#LR__2403
1e288                 | LR__2392
1e288                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1e288     08 4E 05 F1 | 	add	fp, #8
1e28c     A7 26 02 FB | 	rdlong	local01, fp
1e290     08 4E 85 F1 | 	sub	fp, #8
1e294     1E 26 0E F2 | 	cmp	local01, #30 wz
1e298     14 4E 05 A1 |  if_e	add	fp, #20
1e29c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e2a0     14 4E 85 A1 |  if_e	sub	fp, #20
1e2a4     16 2B 02 A6 |  if_e	mov	local03, local04
1e2a8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e2ac     38 00 90 5D |  if_ne	jmp	#LR__2393
1e2b0     00 26 06 F6 | 	mov	local01, #0
1e2b4     A7 28 02 FB | 	rdlong	local02, fp
1e2b8     0C 4E 05 F1 | 	add	fp, #12
1e2bc     A7 12 02 FB | 	rdlong	arg01, fp
1e2c0     0C 4E 85 F1 | 	sub	fp, #12
1e2c4     4C B8 B0 FD | 	call	#__system___float_fromuns
1e2c8     FD 14 02 F6 | 	mov	arg02, result1
1e2cc     14 13 02 F6 | 	mov	arg01, local02
1e2d0     01 16 06 F6 | 	mov	arg03, #1
1e2d4     74 C0 B0 FD | 	call	#__system___float_cmp
1e2d8     00 FA 0D F2 | 	cmp	result1, #0 wz
1e2dc     00 26 26 A6 |  if_e	not	local01, #0
1e2e0     A7 26 62 FC | 	wrlong	local01, fp
1e2e4     FC 02 90 FD | 	jmp	#LR__2403
1e2e8                 | LR__2393
1e2e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1e2e8     08 4E 05 F1 | 	add	fp, #8
1e2ec     A7 26 02 FB | 	rdlong	local01, fp
1e2f0     08 4E 85 F1 | 	sub	fp, #8
1e2f4     1C 26 0E F2 | 	cmp	local01, #28 wz
1e2f8     14 4E 05 A1 |  if_e	add	fp, #20
1e2fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e300     14 4E 85 A1 |  if_e	sub	fp, #20
1e304     16 2B 02 A6 |  if_e	mov	local03, local04
1e308     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e30c     44 00 90 5D |  if_ne	jmp	#LR__2394
1e310     00 26 06 F6 | 	mov	local01, #0
1e314     A7 12 02 FB | 	rdlong	arg01, fp
1e318     09 13 52 F6 | 	abs	arg01, arg01 wc
1e31c     1F 2E C6 C9 |  if_b	decod	local05, #31
1e320     00 2E 06 36 |  if_ae	mov	local05, #0
1e324     EC B7 B0 FD | 	call	#__system___float_fromuns
1e328     17 FB 61 F5 | 	xor	result1, local05
1e32c     FD 12 02 F6 | 	mov	arg01, result1
1e330     0C 4E 05 F1 | 	add	fp, #12
1e334     A7 14 02 FB | 	rdlong	arg02, fp
1e338     0C 4E 85 F1 | 	sub	fp, #12
1e33c     01 16 06 F6 | 	mov	arg03, #1
1e340     08 C0 B0 FD | 	call	#__system___float_cmp
1e344     00 FA 0D F2 | 	cmp	result1, #0 wz
1e348     00 26 26 A6 |  if_e	not	local01, #0
1e34c     A7 26 62 FC | 	wrlong	local01, fp
1e350     90 02 90 FD | 	jmp	#LR__2403
1e354                 | LR__2394
1e354                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1e354     08 4E 05 F1 | 	add	fp, #8
1e358     A7 26 02 FB | 	rdlong	local01, fp
1e35c     08 4E 85 F1 | 	sub	fp, #8
1e360     1C 26 0E F2 | 	cmp	local01, #28 wz
1e364     14 4E 05 A1 |  if_e	add	fp, #20
1e368     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e36c     14 4E 85 A1 |  if_e	sub	fp, #20
1e370     16 2B 02 A6 |  if_e	mov	local03, local04
1e374     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e378     24 00 90 5D |  if_ne	jmp	#LR__2395
1e37c     00 26 06 F6 | 	mov	local01, #0
1e380     A7 28 02 FB | 	rdlong	local02, fp
1e384     0C 4E 05 F1 | 	add	fp, #12
1e388     A7 2A 02 FB | 	rdlong	local03, fp
1e38c     0C 4E 85 F1 | 	sub	fp, #12
1e390     15 29 0A F2 | 	cmp	local02, local03 wz
1e394     01 26 66 A6 |  if_e	neg	local01, #1
1e398     A7 26 62 FC | 	wrlong	local01, fp
1e39c     44 02 90 FD | 	jmp	#LR__2403
1e3a0                 | LR__2395
1e3a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1e3a0     08 4E 05 F1 | 	add	fp, #8
1e3a4     A7 26 02 FB | 	rdlong	local01, fp
1e3a8     08 4E 85 F1 | 	sub	fp, #8
1e3ac     1C 26 0E F2 | 	cmp	local01, #28 wz
1e3b0     14 4E 05 A1 |  if_e	add	fp, #20
1e3b4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e3b8     14 4E 85 A1 |  if_e	sub	fp, #20
1e3bc     16 2B 02 A6 |  if_e	mov	local03, local04
1e3c0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e3c4     24 00 90 5D |  if_ne	jmp	#LR__2396
1e3c8     00 26 06 F6 | 	mov	local01, #0
1e3cc     A7 28 02 FB | 	rdlong	local02, fp
1e3d0     0C 4E 05 F1 | 	add	fp, #12
1e3d4     A7 2A 02 FB | 	rdlong	local03, fp
1e3d8     0C 4E 85 F1 | 	sub	fp, #12
1e3dc     15 29 0A F2 | 	cmp	local02, local03 wz
1e3e0     01 26 66 A6 |  if_e	neg	local01, #1
1e3e4     A7 26 62 FC | 	wrlong	local01, fp
1e3e8     F8 01 90 FD | 	jmp	#LR__2403
1e3ec                 | LR__2396
1e3ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1e3ec     08 4E 05 F1 | 	add	fp, #8
1e3f0     A7 26 02 FB | 	rdlong	local01, fp
1e3f4     08 4E 85 F1 | 	sub	fp, #8
1e3f8     1D 26 0E F2 | 	cmp	local01, #29 wz
1e3fc     14 4E 05 A1 |  if_e	add	fp, #20
1e400     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e404     14 4E 85 A1 |  if_e	sub	fp, #20
1e408     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1e40c     34 00 90 5D |  if_ne	jmp	#LR__2397
1e410     00 26 06 F6 | 	mov	local01, #0
1e414     A7 12 02 FB | 	rdlong	arg01, fp
1e418     F8 B6 B0 FD | 	call	#__system___float_fromuns
1e41c     FD 12 02 F6 | 	mov	arg01, result1
1e420     0C 4E 05 F1 | 	add	fp, #12
1e424     A7 14 02 FB | 	rdlong	arg02, fp
1e428     0C 4E 85 F1 | 	sub	fp, #12
1e42c     01 16 06 F6 | 	mov	arg03, #1
1e430     18 BF B0 FD | 	call	#__system___float_cmp
1e434     00 FA 0D F2 | 	cmp	result1, #0 wz
1e438     00 26 26 A6 |  if_e	not	local01, #0
1e43c     A7 26 62 FC | 	wrlong	local01, fp
1e440     A0 01 90 FD | 	jmp	#LR__2403
1e444                 | LR__2397
1e444                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1e444     08 4E 05 F1 | 	add	fp, #8
1e448     A7 26 02 FB | 	rdlong	local01, fp
1e44c     08 4E 85 F1 | 	sub	fp, #8
1e450     1D 26 0E F2 | 	cmp	local01, #29 wz
1e454     14 4E 05 A1 |  if_e	add	fp, #20
1e458     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e45c     14 4E 85 A1 |  if_e	sub	fp, #20
1e460     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e464     24 00 90 5D |  if_ne	jmp	#LR__2398
1e468     00 26 06 F6 | 	mov	local01, #0
1e46c     A7 28 02 FB | 	rdlong	local02, fp
1e470     0C 4E 05 F1 | 	add	fp, #12
1e474     A7 2A 02 FB | 	rdlong	local03, fp
1e478     0C 4E 85 F1 | 	sub	fp, #12
1e47c     15 29 0A F2 | 	cmp	local02, local03 wz
1e480     01 26 66 A6 |  if_e	neg	local01, #1
1e484     A7 26 62 FC | 	wrlong	local01, fp
1e488     58 01 90 FD | 	jmp	#LR__2403
1e48c                 | LR__2398
1e48c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1e48c     08 4E 05 F1 | 	add	fp, #8
1e490     A7 26 02 FB | 	rdlong	local01, fp
1e494     08 4E 85 F1 | 	sub	fp, #8
1e498     1D 26 0E F2 | 	cmp	local01, #29 wz
1e49c     14 4E 05 A1 |  if_e	add	fp, #20
1e4a0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e4a4     14 4E 85 A1 |  if_e	sub	fp, #20
1e4a8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e4ac     24 00 90 5D |  if_ne	jmp	#LR__2399
1e4b0     00 26 06 F6 | 	mov	local01, #0
1e4b4     A7 28 02 FB | 	rdlong	local02, fp
1e4b8     0C 4E 05 F1 | 	add	fp, #12
1e4bc     A7 2A 02 FB | 	rdlong	local03, fp
1e4c0     0C 4E 85 F1 | 	sub	fp, #12
1e4c4     15 29 0A F2 | 	cmp	local02, local03 wz
1e4c8     01 26 66 A6 |  if_e	neg	local01, #1
1e4cc     A7 26 62 FC | 	wrlong	local01, fp
1e4d0     10 01 90 FD | 	jmp	#LR__2403
1e4d4                 | LR__2399
1e4d4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1e4d4     08 4E 05 F1 | 	add	fp, #8
1e4d8     A7 26 02 FB | 	rdlong	local01, fp
1e4dc     08 4E 85 F1 | 	sub	fp, #8
1e4e0     2B 26 0E F2 | 	cmp	local01, #43 wz
1e4e4     14 4E 05 A1 |  if_e	add	fp, #20
1e4e8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e4ec     14 4E 85 A1 |  if_e	sub	fp, #20
1e4f0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e4f4     30 00 90 5D |  if_ne	jmp	#LR__2400
1e4f8     00 26 06 F6 | 	mov	local01, #0
1e4fc     A7 12 02 FB | 	rdlong	arg01, fp
1e500     7C F3 BE FD | 	call	#_convertstring
1e504     FD 12 02 F6 | 	mov	arg01, result1
1e508     0C 4E 05 F1 | 	add	fp, #12
1e50c     A7 14 02 FB | 	rdlong	arg02, fp
1e510     0C 4E 85 F1 | 	sub	fp, #12
1e514     AC 8B B0 FD | 	call	#__system___string_cmp
1e518     00 FA 0D F2 | 	cmp	result1, #0 wz
1e51c     00 26 26 A6 |  if_e	not	local01, #0
1e520     A7 26 62 FC | 	wrlong	local01, fp
1e524     BC 00 90 FD | 	jmp	#LR__2403
1e528                 | LR__2400
1e528                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1e528     08 4E 05 F1 | 	add	fp, #8
1e52c     A7 26 02 FB | 	rdlong	local01, fp
1e530     08 4E 85 F1 | 	sub	fp, #8
1e534     1F 26 0E F2 | 	cmp	local01, #31 wz
1e538     14 4E 05 A1 |  if_e	add	fp, #20
1e53c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e540     14 4E 85 A1 |  if_e	sub	fp, #20
1e544     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e548     34 00 90 5D |  if_ne	jmp	#LR__2401
1e54c     00 26 06 F6 | 	mov	local01, #0
1e550     A7 28 02 FB | 	rdlong	local02, fp
1e554     0C 4E 05 F1 | 	add	fp, #12
1e558     A7 12 02 FB | 	rdlong	arg01, fp
1e55c     0C 4E 85 F1 | 	sub	fp, #12
1e560     1C F3 BE FD | 	call	#_convertstring
1e564     FD 14 02 F6 | 	mov	arg02, result1
1e568     14 13 02 F6 | 	mov	arg01, local02
1e56c     54 8B B0 FD | 	call	#__system___string_cmp
1e570     00 FA 0D F2 | 	cmp	result1, #0 wz
1e574     00 26 26 A6 |  if_e	not	local01, #0
1e578     A7 26 62 FC | 	wrlong	local01, fp
1e57c     64 00 90 FD | 	jmp	#LR__2403
1e580                 | LR__2401
1e580                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1e580     08 4E 05 F1 | 	add	fp, #8
1e584     A7 26 02 FB | 	rdlong	local01, fp
1e588     08 4E 85 F1 | 	sub	fp, #8
1e58c     2B 26 0E F2 | 	cmp	local01, #43 wz
1e590     14 4E 05 A1 |  if_e	add	fp, #20
1e594     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e598     14 4E 85 A1 |  if_e	sub	fp, #20
1e59c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e5a0     3C 00 90 5D |  if_ne	jmp	#LR__2402
1e5a4     00 26 06 F6 | 	mov	local01, #0
1e5a8     A7 12 02 FB | 	rdlong	arg01, fp
1e5ac     D0 F2 BE FD | 	call	#_convertstring
1e5b0     FD 28 02 F6 | 	mov	local02, result1
1e5b4     0C 4E 05 F1 | 	add	fp, #12
1e5b8     A7 12 02 FB | 	rdlong	arg01, fp
1e5bc     0C 4E 85 F1 | 	sub	fp, #12
1e5c0     BC F2 BE FD | 	call	#_convertstring
1e5c4     FD 14 02 F6 | 	mov	arg02, result1
1e5c8     14 13 02 F6 | 	mov	arg01, local02
1e5cc     F4 8A B0 FD | 	call	#__system___string_cmp
1e5d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1e5d4     00 26 26 A6 |  if_e	not	local01, #0
1e5d8     A7 26 62 FC | 	wrlong	local01, fp
1e5dc     04 00 90 FD | 	jmp	#LR__2403
1e5e0                 | LR__2402
1e5e0     A7 00 68 FC | 	wrlong	#0, fp
1e5e4                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e5e4                 | LR__2403
1e5e4     08 4E 05 F1 | 	add	fp, #8
1e5e8     A7 38 68 FC | 	wrlong	#28, fp
1e5ec     08 4E 85 F1 | 	sub	fp, #8
1e5f0     A7 12 02 F6 | 	mov	arg01, fp
1e5f4     A8 F1 BE FD | 	call	#_push
1e5f8     A7 F0 03 F6 | 	mov	ptra, fp
1e5fc     B2 00 A0 FD | 	call	#popregs_
1e600                 | _do_eq_ret
1e600     2D 00 64 FD | 	ret
1e604                 | 
1e604                 | ' 
1e604                 | ' '--------------------------------- fdiv (/) - float divide
1e604                 | ' 
1e604                 | ' sub do_fdiv 
1e604                 | _do_fdiv
1e604     02 4A 05 F6 | 	mov	COUNT_, #2
1e608     A8 00 A0 FD | 	call	#pushregs_
1e60c     18 F0 07 F1 | 	add	ptra, #24
1e610     F4 F0 BE FD | 	call	#_pop
1e614     FD 14 02 F6 | 	mov	arg02, result1
1e618     FE 12 02 F6 | 	mov	arg01, result2
1e61c     FF 26 02 F6 | 	mov	local01, result3
1e620     0C 4E 05 F1 | 	add	fp, #12
1e624     A7 14 62 FC | 	wrlong	arg02, fp
1e628     04 4E 05 F1 | 	add	fp, #4
1e62c     A7 12 62 FC | 	wrlong	arg01, fp
1e630     04 4E 05 F1 | 	add	fp, #4
1e634     A7 26 62 FC | 	wrlong	local01, fp
1e638     14 4E 85 F1 | 	sub	fp, #20
1e63c     C8 F0 BE FD | 	call	#_pop
1e640     A7 FA 61 FC | 	wrlong	result1, fp
1e644     04 4E 05 F1 | 	add	fp, #4
1e648     A7 FC 61 FC | 	wrlong	result2, fp
1e64c     04 4E 05 F1 | 	add	fp, #4
1e650     A7 FE 61 FC | 	wrlong	result3, fp
1e654                 | ' 
1e654                 | ' t2=pop()
1e654                 | ' t1=pop()
1e654                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1e654     08 4E 85 F1 | 	sub	fp, #8
1e658     1F FE 0D F2 | 	cmp	result3, #31 wz
1e65c     14 4E 05 51 |  if_ne	add	fp, #20
1e660     A7 26 02 5B |  if_ne	rdlong	local01, fp
1e664     14 4E 85 51 |  if_ne	sub	fp, #20
1e668     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1e66c     A7 14 68 AC |  if_e	wrlong	#10, fp
1e670     08 4E 05 A1 |  if_e	add	fp, #8
1e674     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e678     08 4E 85 A1 |  if_e	sub	fp, #8
1e67c     38 01 90 AD |  if_e	jmp	#LR__2415
1e680                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1e680     08 4E 05 F1 | 	add	fp, #8
1e684     A7 14 02 FB | 	rdlong	arg02, fp
1e688     08 4E 85 F1 | 	sub	fp, #8
1e68c     1C 14 0E F2 | 	cmp	arg02, #28 wz
1e690     28 00 90 5D |  if_ne	jmp	#LR__2410
1e694     08 4E 05 F1 | 	add	fp, #8
1e698     A7 3C 68 FC | 	wrlong	#30, fp
1e69c     08 4E 85 F1 | 	sub	fp, #8
1e6a0     A7 12 02 FB | 	rdlong	arg01, fp
1e6a4     09 13 52 F6 | 	abs	arg01, arg01 wc
1e6a8     1F 28 C6 C9 |  if_b	decod	local02, #31
1e6ac     00 28 06 36 |  if_ae	mov	local02, #0
1e6b0     60 B4 B0 FD | 	call	#__system___float_fromuns
1e6b4     14 FB 61 F5 | 	xor	result1, local02
1e6b8     A7 FA 61 FC | 	wrlong	result1, fp
1e6bc                 | LR__2410
1e6bc                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1e6bc     08 4E 05 F1 | 	add	fp, #8
1e6c0     A7 14 02 FB | 	rdlong	arg02, fp
1e6c4     08 4E 85 F1 | 	sub	fp, #8
1e6c8     1D 14 0E F2 | 	cmp	arg02, #29 wz
1e6cc     18 00 90 5D |  if_ne	jmp	#LR__2411
1e6d0     08 4E 05 F1 | 	add	fp, #8
1e6d4     A7 3C 68 FC | 	wrlong	#30, fp
1e6d8     08 4E 85 F1 | 	sub	fp, #8
1e6dc     A7 12 02 FB | 	rdlong	arg01, fp
1e6e0     30 B4 B0 FD | 	call	#__system___float_fromuns
1e6e4     A7 FA 61 FC | 	wrlong	result1, fp
1e6e8                 | LR__2411
1e6e8                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1e6e8     14 4E 05 F1 | 	add	fp, #20
1e6ec     A7 14 02 FB | 	rdlong	arg02, fp
1e6f0     14 4E 85 F1 | 	sub	fp, #20
1e6f4     1C 14 0E F2 | 	cmp	arg02, #28 wz
1e6f8     34 00 90 5D |  if_ne	jmp	#LR__2412
1e6fc     14 4E 05 F1 | 	add	fp, #20
1e700     A7 3C 68 FC | 	wrlong	#30, fp
1e704     08 4E 85 F1 | 	sub	fp, #8
1e708     A7 12 02 FB | 	rdlong	arg01, fp
1e70c     0C 4E 85 F1 | 	sub	fp, #12
1e710     09 13 52 F6 | 	abs	arg01, arg01 wc
1e714     1F 28 C6 C9 |  if_b	decod	local02, #31
1e718     00 28 06 36 |  if_ae	mov	local02, #0
1e71c     F4 B3 B0 FD | 	call	#__system___float_fromuns
1e720     14 FB 61 F5 | 	xor	result1, local02
1e724     0C 4E 05 F1 | 	add	fp, #12
1e728     A7 FA 61 FC | 	wrlong	result1, fp
1e72c     0C 4E 85 F1 | 	sub	fp, #12
1e730                 | LR__2412
1e730                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1e730     14 4E 05 F1 | 	add	fp, #20
1e734     A7 14 02 FB | 	rdlong	arg02, fp
1e738     14 4E 85 F1 | 	sub	fp, #20
1e73c     1D 14 0E F2 | 	cmp	arg02, #29 wz
1e740     24 00 90 5D |  if_ne	jmp	#LR__2413
1e744     14 4E 05 F1 | 	add	fp, #20
1e748     A7 3C 68 FC | 	wrlong	#30, fp
1e74c     08 4E 85 F1 | 	sub	fp, #8
1e750     A7 12 02 FB | 	rdlong	arg01, fp
1e754     0C 4E 85 F1 | 	sub	fp, #12
1e758     B8 B3 B0 FD | 	call	#__system___float_fromuns
1e75c     0C 4E 05 F1 | 	add	fp, #12
1e760     A7 FA 61 FC | 	wrlong	result1, fp
1e764     0C 4E 85 F1 | 	sub	fp, #12
1e768                 | LR__2413
1e768                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1e768     08 4E 05 F1 | 	add	fp, #8
1e76c     A7 14 02 FB | 	rdlong	arg02, fp
1e770     08 4E 85 F1 | 	sub	fp, #8
1e774     1E 14 0E F2 | 	cmp	arg02, #30 wz
1e778     14 4E 05 A1 |  if_e	add	fp, #20
1e77c     A7 26 02 AB |  if_e	rdlong	local01, fp
1e780     14 4E 85 A1 |  if_e	sub	fp, #20
1e784     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1e788     1C 00 90 5D |  if_ne	jmp	#LR__2414
1e78c     A7 12 02 FB | 	rdlong	arg01, fp
1e790     0C 4E 05 F1 | 	add	fp, #12
1e794     A7 14 02 FB | 	rdlong	arg02, fp
1e798     0C 4E 85 F1 | 	sub	fp, #12
1e79c     7C B9 B0 FD | 	call	#__system___float_div
1e7a0     A7 FA 61 FC | 	wrlong	result1, fp
1e7a4     10 00 90 FD | 	jmp	#LR__2415
1e7a8                 | LR__2414
1e7a8     A7 16 68 FC | 	wrlong	#11, fp
1e7ac     08 4E 05 F1 | 	add	fp, #8
1e7b0     A7 FE 69 FC | 	wrlong	#255, fp
1e7b4     08 4E 85 F1 | 	sub	fp, #8
1e7b8                 | LR__2415
1e7b8     A7 12 02 F6 | 	mov	arg01, fp
1e7bc     E0 EF BE FD | 	call	#_push
1e7c0     A7 F0 03 F6 | 	mov	ptra, fp
1e7c4     B2 00 A0 FD | 	call	#popregs_
1e7c8                 | _do_fdiv_ret
1e7c8     2D 00 64 FD | 	ret
1e7cc                 | 
1e7cc                 | ' 
1e7cc                 | ' '--------------------------------- greater or equal (>=)
1e7cc                 | ' 
1e7cc                 | ' sub do_ge
1e7cc                 | _do_ge
1e7cc     05 4A 05 F6 | 	mov	COUNT_, #5
1e7d0     A8 00 A0 FD | 	call	#pushregs_
1e7d4     18 F0 07 F1 | 	add	ptra, #24
1e7d8     2C EF BE FD | 	call	#_pop
1e7dc     FD 26 02 F6 | 	mov	local01, result1
1e7e0     FE 28 02 F6 | 	mov	local02, result2
1e7e4     FF 2A 02 F6 | 	mov	local03, result3
1e7e8     0C 4E 05 F1 | 	add	fp, #12
1e7ec     A7 26 62 FC | 	wrlong	local01, fp
1e7f0     04 4E 05 F1 | 	add	fp, #4
1e7f4     A7 28 62 FC | 	wrlong	local02, fp
1e7f8     04 4E 05 F1 | 	add	fp, #4
1e7fc     A7 2A 62 FC | 	wrlong	local03, fp
1e800     14 4E 85 F1 | 	sub	fp, #20
1e804     00 EF BE FD | 	call	#_pop
1e808     FF 2A 02 F6 | 	mov	local03, result3
1e80c     A7 FA 61 FC | 	wrlong	result1, fp
1e810     04 4E 05 F1 | 	add	fp, #4
1e814     A7 FC 61 FC | 	wrlong	result2, fp
1e818     04 4E 05 F1 | 	add	fp, #4
1e81c     A7 2A 62 FC | 	wrlong	local03, fp
1e820                 | ' 
1e820                 | ' t2=pop()
1e820                 | ' t1=pop()
1e820                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1e820     08 4E 85 F1 | 	sub	fp, #8
1e824     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e828     14 4E 05 A1 |  if_e	add	fp, #20
1e82c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e830     14 4E 85 A1 |  if_e	sub	fp, #20
1e834     16 2B 02 A6 |  if_e	mov	local03, local04
1e838     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e83c     28 00 90 5D |  if_ne	jmp	#LR__2420
1e840     00 26 06 F6 | 	mov	local01, #0
1e844     A7 12 02 FB | 	rdlong	arg01, fp
1e848     0C 4E 05 F1 | 	add	fp, #12
1e84c     A7 14 02 FB | 	rdlong	arg02, fp
1e850     0C 4E 85 F1 | 	sub	fp, #12
1e854     6C 88 B0 FD | 	call	#__system___string_cmp
1e858     00 FA 55 F2 | 	cmps	result1, #0 wc
1e85c     00 26 26 36 |  if_ae	not	local01, #0
1e860     A7 26 62 FC | 	wrlong	local01, fp
1e864     24 04 90 FD | 	jmp	#LR__2433
1e868                 | LR__2420
1e868                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1e868     08 4E 05 F1 | 	add	fp, #8
1e86c     A7 26 02 FB | 	rdlong	local01, fp
1e870     08 4E 85 F1 | 	sub	fp, #8
1e874     1E 26 0E F2 | 	cmp	local01, #30 wz
1e878     14 4E 05 A1 |  if_e	add	fp, #20
1e87c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e880     14 4E 85 A1 |  if_e	sub	fp, #20
1e884     16 2B 02 A6 |  if_e	mov	local03, local04
1e888     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e88c     2C 00 90 5D |  if_ne	jmp	#LR__2421
1e890     00 26 06 F6 | 	mov	local01, #0
1e894     A7 12 02 FB | 	rdlong	arg01, fp
1e898     0C 4E 05 F1 | 	add	fp, #12
1e89c     A7 14 02 FB | 	rdlong	arg02, fp
1e8a0     0C 4E 85 F1 | 	sub	fp, #12
1e8a4     01 16 66 F6 | 	neg	arg03, #1
1e8a8     A0 BA B0 FD | 	call	#__system___float_cmp
1e8ac     00 FA 55 F2 | 	cmps	result1, #0 wc
1e8b0     00 26 26 36 |  if_ae	not	local01, #0
1e8b4     A7 26 62 FC | 	wrlong	local01, fp
1e8b8     D0 03 90 FD | 	jmp	#LR__2433
1e8bc                 | LR__2421
1e8bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1e8bc     08 4E 05 F1 | 	add	fp, #8
1e8c0     A7 26 02 FB | 	rdlong	local01, fp
1e8c4     08 4E 85 F1 | 	sub	fp, #8
1e8c8     1E 26 0E F2 | 	cmp	local01, #30 wz
1e8cc     14 4E 05 A1 |  if_e	add	fp, #20
1e8d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e8d4     14 4E 85 A1 |  if_e	sub	fp, #20
1e8d8     16 2B 02 A6 |  if_e	mov	local03, local04
1e8dc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e8e0     48 00 90 5D |  if_ne	jmp	#LR__2422
1e8e4     00 26 06 F6 | 	mov	local01, #0
1e8e8     A7 28 02 FB | 	rdlong	local02, fp
1e8ec     0C 4E 05 F1 | 	add	fp, #12
1e8f0     A7 12 02 FB | 	rdlong	arg01, fp
1e8f4     0C 4E 85 F1 | 	sub	fp, #12
1e8f8     09 13 52 F6 | 	abs	arg01, arg01 wc
1e8fc     1F 2E C6 C9 |  if_b	decod	local05, #31
1e900     00 2E 06 36 |  if_ae	mov	local05, #0
1e904     0C B2 B0 FD | 	call	#__system___float_fromuns
1e908     17 FB 61 F5 | 	xor	result1, local05
1e90c     FD 14 02 F6 | 	mov	arg02, result1
1e910     14 13 02 F6 | 	mov	arg01, local02
1e914     01 16 66 F6 | 	neg	arg03, #1
1e918     30 BA B0 FD | 	call	#__system___float_cmp
1e91c     00 FA 55 F2 | 	cmps	result1, #0 wc
1e920     00 26 26 36 |  if_ae	not	local01, #0
1e924     A7 26 62 FC | 	wrlong	local01, fp
1e928     60 03 90 FD | 	jmp	#LR__2433
1e92c                 | LR__2422
1e92c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1e92c     08 4E 05 F1 | 	add	fp, #8
1e930     A7 26 02 FB | 	rdlong	local01, fp
1e934     08 4E 85 F1 | 	sub	fp, #8
1e938     1E 26 0E F2 | 	cmp	local01, #30 wz
1e93c     14 4E 05 A1 |  if_e	add	fp, #20
1e940     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e944     14 4E 85 A1 |  if_e	sub	fp, #20
1e948     16 2B 02 A6 |  if_e	mov	local03, local04
1e94c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e950     38 00 90 5D |  if_ne	jmp	#LR__2423
1e954     00 26 06 F6 | 	mov	local01, #0
1e958     A7 28 02 FB | 	rdlong	local02, fp
1e95c     0C 4E 05 F1 | 	add	fp, #12
1e960     A7 12 02 FB | 	rdlong	arg01, fp
1e964     0C 4E 85 F1 | 	sub	fp, #12
1e968     A8 B1 B0 FD | 	call	#__system___float_fromuns
1e96c     FD 14 02 F6 | 	mov	arg02, result1
1e970     14 13 02 F6 | 	mov	arg01, local02
1e974     01 16 66 F6 | 	neg	arg03, #1
1e978     D0 B9 B0 FD | 	call	#__system___float_cmp
1e97c     00 FA 55 F2 | 	cmps	result1, #0 wc
1e980     00 26 26 36 |  if_ae	not	local01, #0
1e984     A7 26 62 FC | 	wrlong	local01, fp
1e988     00 03 90 FD | 	jmp	#LR__2433
1e98c                 | LR__2423
1e98c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1e98c     08 4E 05 F1 | 	add	fp, #8
1e990     A7 26 02 FB | 	rdlong	local01, fp
1e994     08 4E 85 F1 | 	sub	fp, #8
1e998     1C 26 0E F2 | 	cmp	local01, #28 wz
1e99c     14 4E 05 A1 |  if_e	add	fp, #20
1e9a0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e9a4     14 4E 85 A1 |  if_e	sub	fp, #20
1e9a8     16 2B 02 A6 |  if_e	mov	local03, local04
1e9ac     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e9b0     44 00 90 5D |  if_ne	jmp	#LR__2424
1e9b4     00 26 06 F6 | 	mov	local01, #0
1e9b8     A7 12 02 FB | 	rdlong	arg01, fp
1e9bc     09 13 52 F6 | 	abs	arg01, arg01 wc
1e9c0     1F 2E C6 C9 |  if_b	decod	local05, #31
1e9c4     00 2E 06 36 |  if_ae	mov	local05, #0
1e9c8     48 B1 B0 FD | 	call	#__system___float_fromuns
1e9cc     17 FB 61 F5 | 	xor	result1, local05
1e9d0     FD 12 02 F6 | 	mov	arg01, result1
1e9d4     0C 4E 05 F1 | 	add	fp, #12
1e9d8     A7 14 02 FB | 	rdlong	arg02, fp
1e9dc     0C 4E 85 F1 | 	sub	fp, #12
1e9e0     01 16 66 F6 | 	neg	arg03, #1
1e9e4     64 B9 B0 FD | 	call	#__system___float_cmp
1e9e8     00 FA 55 F2 | 	cmps	result1, #0 wc
1e9ec     00 26 26 36 |  if_ae	not	local01, #0
1e9f0     A7 26 62 FC | 	wrlong	local01, fp
1e9f4     94 02 90 FD | 	jmp	#LR__2433
1e9f8                 | LR__2424
1e9f8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1e9f8     08 4E 05 F1 | 	add	fp, #8
1e9fc     A7 26 02 FB | 	rdlong	local01, fp
1ea00     08 4E 85 F1 | 	sub	fp, #8
1ea04     1C 26 0E F2 | 	cmp	local01, #28 wz
1ea08     14 4E 05 A1 |  if_e	add	fp, #20
1ea0c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ea10     14 4E 85 A1 |  if_e	sub	fp, #20
1ea14     16 2B 02 A6 |  if_e	mov	local03, local04
1ea18     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ea1c     24 00 90 5D |  if_ne	jmp	#LR__2425
1ea20     00 26 06 F6 | 	mov	local01, #0
1ea24     A7 28 02 FB | 	rdlong	local02, fp
1ea28     0C 4E 05 F1 | 	add	fp, #12
1ea2c     A7 2A 02 FB | 	rdlong	local03, fp
1ea30     0C 4E 85 F1 | 	sub	fp, #12
1ea34     15 29 52 F2 | 	cmps	local02, local03 wc
1ea38     01 26 66 36 |  if_ae	neg	local01, #1
1ea3c     A7 26 62 FC | 	wrlong	local01, fp
1ea40     48 02 90 FD | 	jmp	#LR__2433
1ea44                 | LR__2425
1ea44                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1ea44     08 4E 05 F1 | 	add	fp, #8
1ea48     A7 26 02 FB | 	rdlong	local01, fp
1ea4c     08 4E 85 F1 | 	sub	fp, #8
1ea50     1C 26 0E F2 | 	cmp	local01, #28 wz
1ea54     14 4E 05 A1 |  if_e	add	fp, #20
1ea58     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ea5c     14 4E 85 A1 |  if_e	sub	fp, #20
1ea60     16 2B 02 A6 |  if_e	mov	local03, local04
1ea64     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ea68     24 00 90 5D |  if_ne	jmp	#LR__2426
1ea6c     00 26 06 F6 | 	mov	local01, #0
1ea70     A7 28 02 FB | 	rdlong	local02, fp
1ea74     0C 4E 05 F1 | 	add	fp, #12
1ea78     A7 2A 02 FB | 	rdlong	local03, fp
1ea7c     0C 4E 85 F1 | 	sub	fp, #12
1ea80     15 29 52 F2 | 	cmps	local02, local03 wc
1ea84     01 26 66 36 |  if_ae	neg	local01, #1
1ea88     A7 26 62 FC | 	wrlong	local01, fp
1ea8c     FC 01 90 FD | 	jmp	#LR__2433
1ea90                 | LR__2426
1ea90                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1ea90     08 4E 05 F1 | 	add	fp, #8
1ea94     A7 26 02 FB | 	rdlong	local01, fp
1ea98     08 4E 85 F1 | 	sub	fp, #8
1ea9c     1D 26 0E F2 | 	cmp	local01, #29 wz
1eaa0     14 4E 05 A1 |  if_e	add	fp, #20
1eaa4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eaa8     14 4E 85 A1 |  if_e	sub	fp, #20
1eaac     16 2B 02 A6 |  if_e	mov	local03, local04
1eab0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1eab4     34 00 90 5D |  if_ne	jmp	#LR__2427
1eab8     00 26 06 F6 | 	mov	local01, #0
1eabc     A7 12 02 FB | 	rdlong	arg01, fp
1eac0     50 B0 B0 FD | 	call	#__system___float_fromuns
1eac4     FD 12 02 F6 | 	mov	arg01, result1
1eac8     0C 4E 05 F1 | 	add	fp, #12
1eacc     A7 14 02 FB | 	rdlong	arg02, fp
1ead0     0C 4E 85 F1 | 	sub	fp, #12
1ead4     01 16 66 F6 | 	neg	arg03, #1
1ead8     70 B8 B0 FD | 	call	#__system___float_cmp
1eadc     00 FA 55 F2 | 	cmps	result1, #0 wc
1eae0     00 26 26 36 |  if_ae	not	local01, #0
1eae4     A7 26 62 FC | 	wrlong	local01, fp
1eae8     A0 01 90 FD | 	jmp	#LR__2433
1eaec                 | LR__2427
1eaec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1eaec     08 4E 05 F1 | 	add	fp, #8
1eaf0     A7 26 02 FB | 	rdlong	local01, fp
1eaf4     08 4E 85 F1 | 	sub	fp, #8
1eaf8     1D 26 0E F2 | 	cmp	local01, #29 wz
1eafc     14 4E 05 A1 |  if_e	add	fp, #20
1eb00     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eb04     14 4E 85 A1 |  if_e	sub	fp, #20
1eb08     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1eb0c     24 00 90 5D |  if_ne	jmp	#LR__2428
1eb10     00 26 06 F6 | 	mov	local01, #0
1eb14     A7 28 02 FB | 	rdlong	local02, fp
1eb18     0C 4E 05 F1 | 	add	fp, #12
1eb1c     A7 2A 02 FB | 	rdlong	local03, fp
1eb20     0C 4E 85 F1 | 	sub	fp, #12
1eb24     15 29 52 F2 | 	cmps	local02, local03 wc
1eb28     01 26 66 36 |  if_ae	neg	local01, #1
1eb2c     A7 26 62 FC | 	wrlong	local01, fp
1eb30     58 01 90 FD | 	jmp	#LR__2433
1eb34                 | LR__2428
1eb34                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1eb34     08 4E 05 F1 | 	add	fp, #8
1eb38     A7 26 02 FB | 	rdlong	local01, fp
1eb3c     08 4E 85 F1 | 	sub	fp, #8
1eb40     1D 26 0E F2 | 	cmp	local01, #29 wz
1eb44     14 4E 05 A1 |  if_e	add	fp, #20
1eb48     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eb4c     14 4E 85 A1 |  if_e	sub	fp, #20
1eb50     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1eb54     24 00 90 5D |  if_ne	jmp	#LR__2429
1eb58     00 26 06 F6 | 	mov	local01, #0
1eb5c     A7 28 02 FB | 	rdlong	local02, fp
1eb60     0C 4E 05 F1 | 	add	fp, #12
1eb64     A7 2A 02 FB | 	rdlong	local03, fp
1eb68     0C 4E 85 F1 | 	sub	fp, #12
1eb6c     15 29 12 F2 | 	cmp	local02, local03 wc
1eb70     01 26 66 36 |  if_ae	neg	local01, #1
1eb74     A7 26 62 FC | 	wrlong	local01, fp
1eb78     10 01 90 FD | 	jmp	#LR__2433
1eb7c                 | LR__2429
1eb7c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1eb7c     08 4E 05 F1 | 	add	fp, #8
1eb80     A7 26 02 FB | 	rdlong	local01, fp
1eb84     08 4E 85 F1 | 	sub	fp, #8
1eb88     2B 26 0E F2 | 	cmp	local01, #43 wz
1eb8c     14 4E 05 A1 |  if_e	add	fp, #20
1eb90     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eb94     14 4E 85 A1 |  if_e	sub	fp, #20
1eb98     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1eb9c     30 00 90 5D |  if_ne	jmp	#LR__2430
1eba0     00 26 06 F6 | 	mov	local01, #0
1eba4     A7 12 02 FB | 	rdlong	arg01, fp
1eba8     D4 EC BE FD | 	call	#_convertstring
1ebac     FD 12 02 F6 | 	mov	arg01, result1
1ebb0     0C 4E 05 F1 | 	add	fp, #12
1ebb4     A7 14 02 FB | 	rdlong	arg02, fp
1ebb8     0C 4E 85 F1 | 	sub	fp, #12
1ebbc     04 85 B0 FD | 	call	#__system___string_cmp
1ebc0     00 FA 55 F2 | 	cmps	result1, #0 wc
1ebc4     00 26 26 36 |  if_ae	not	local01, #0
1ebc8     A7 26 62 FC | 	wrlong	local01, fp
1ebcc     BC 00 90 FD | 	jmp	#LR__2433
1ebd0                 | LR__2430
1ebd0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1ebd0     08 4E 05 F1 | 	add	fp, #8
1ebd4     A7 26 02 FB | 	rdlong	local01, fp
1ebd8     08 4E 85 F1 | 	sub	fp, #8
1ebdc     1F 26 0E F2 | 	cmp	local01, #31 wz
1ebe0     14 4E 05 A1 |  if_e	add	fp, #20
1ebe4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ebe8     14 4E 85 A1 |  if_e	sub	fp, #20
1ebec     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ebf0     34 00 90 5D |  if_ne	jmp	#LR__2431
1ebf4     00 26 06 F6 | 	mov	local01, #0
1ebf8     A7 28 02 FB | 	rdlong	local02, fp
1ebfc     0C 4E 05 F1 | 	add	fp, #12
1ec00     A7 12 02 FB | 	rdlong	arg01, fp
1ec04     0C 4E 85 F1 | 	sub	fp, #12
1ec08     74 EC BE FD | 	call	#_convertstring
1ec0c     FD 14 02 F6 | 	mov	arg02, result1
1ec10     14 13 02 F6 | 	mov	arg01, local02
1ec14     AC 84 B0 FD | 	call	#__system___string_cmp
1ec18     00 FA 55 F2 | 	cmps	result1, #0 wc
1ec1c     00 26 26 36 |  if_ae	not	local01, #0
1ec20     A7 26 62 FC | 	wrlong	local01, fp
1ec24     64 00 90 FD | 	jmp	#LR__2433
1ec28                 | LR__2431
1ec28                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1ec28     08 4E 05 F1 | 	add	fp, #8
1ec2c     A7 26 02 FB | 	rdlong	local01, fp
1ec30     08 4E 85 F1 | 	sub	fp, #8
1ec34     2B 26 0E F2 | 	cmp	local01, #43 wz
1ec38     14 4E 05 A1 |  if_e	add	fp, #20
1ec3c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ec40     14 4E 85 A1 |  if_e	sub	fp, #20
1ec44     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ec48     3C 00 90 5D |  if_ne	jmp	#LR__2432
1ec4c     00 26 06 F6 | 	mov	local01, #0
1ec50     A7 12 02 FB | 	rdlong	arg01, fp
1ec54     28 EC BE FD | 	call	#_convertstring
1ec58     FD 28 02 F6 | 	mov	local02, result1
1ec5c     0C 4E 05 F1 | 	add	fp, #12
1ec60     A7 12 02 FB | 	rdlong	arg01, fp
1ec64     0C 4E 85 F1 | 	sub	fp, #12
1ec68     14 EC BE FD | 	call	#_convertstring
1ec6c     FD 14 02 F6 | 	mov	arg02, result1
1ec70     14 13 02 F6 | 	mov	arg01, local02
1ec74     4C 84 B0 FD | 	call	#__system___string_cmp
1ec78     00 FA 55 F2 | 	cmps	result1, #0 wc
1ec7c     00 26 26 36 |  if_ae	not	local01, #0
1ec80     A7 26 62 FC | 	wrlong	local01, fp
1ec84     04 00 90 FD | 	jmp	#LR__2433
1ec88                 | LR__2432
1ec88     A7 00 68 FC | 	wrlong	#0, fp
1ec8c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1ec8c                 | LR__2433
1ec8c     08 4E 05 F1 | 	add	fp, #8
1ec90     A7 38 68 FC | 	wrlong	#28, fp
1ec94     08 4E 85 F1 | 	sub	fp, #8
1ec98                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1ec98     A7 26 0A FB | 	rdlong	local01, fp wz
1ec9c     A7 02 68 5C |  if_ne	wrlong	#1, fp
1eca0     A7 12 02 F6 | 	mov	arg01, fp
1eca4     F8 EA BE FD | 	call	#_push
1eca8     A7 F0 03 F6 | 	mov	ptra, fp
1ecac     B2 00 A0 FD | 	call	#popregs_
1ecb0                 | _do_ge_ret
1ecb0     2D 00 64 FD | 	ret
1ecb4                 | 
1ecb4                 | ' 
1ecb4                 | ' '--------------------------------- greater than (>)
1ecb4                 | ' 
1ecb4                 | ' sub do_gt
1ecb4                 | _do_gt
1ecb4     05 4A 05 F6 | 	mov	COUNT_, #5
1ecb8     A8 00 A0 FD | 	call	#pushregs_
1ecbc     18 F0 07 F1 | 	add	ptra, #24
1ecc0     44 EA BE FD | 	call	#_pop
1ecc4     FD 26 02 F6 | 	mov	local01, result1
1ecc8     FE 28 02 F6 | 	mov	local02, result2
1eccc     FF 2A 02 F6 | 	mov	local03, result3
1ecd0     0C 4E 05 F1 | 	add	fp, #12
1ecd4     A7 26 62 FC | 	wrlong	local01, fp
1ecd8     04 4E 05 F1 | 	add	fp, #4
1ecdc     A7 28 62 FC | 	wrlong	local02, fp
1ece0     04 4E 05 F1 | 	add	fp, #4
1ece4     A7 2A 62 FC | 	wrlong	local03, fp
1ece8     14 4E 85 F1 | 	sub	fp, #20
1ecec     18 EA BE FD | 	call	#_pop
1ecf0     FF 2A 02 F6 | 	mov	local03, result3
1ecf4     A7 FA 61 FC | 	wrlong	result1, fp
1ecf8     04 4E 05 F1 | 	add	fp, #4
1ecfc     A7 FC 61 FC | 	wrlong	result2, fp
1ed00     04 4E 05 F1 | 	add	fp, #4
1ed04     A7 2A 62 FC | 	wrlong	local03, fp
1ed08                 | ' 
1ed08                 | ' t2=pop()
1ed08                 | ' t1=pop()
1ed08                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1ed08     08 4E 85 F1 | 	sub	fp, #8
1ed0c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ed10     14 4E 05 A1 |  if_e	add	fp, #20
1ed14     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed18     14 4E 85 A1 |  if_e	sub	fp, #20
1ed1c     16 2B 02 A6 |  if_e	mov	local03, local04
1ed20     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ed24     28 00 90 5D |  if_ne	jmp	#LR__2440
1ed28     00 26 06 F6 | 	mov	local01, #0
1ed2c     A7 12 02 FB | 	rdlong	arg01, fp
1ed30     0C 4E 05 F1 | 	add	fp, #12
1ed34     A7 14 02 FB | 	rdlong	arg02, fp
1ed38     0C 4E 85 F1 | 	sub	fp, #12
1ed3c     84 83 B0 FD | 	call	#__system___string_cmp
1ed40     01 FA 55 F2 | 	cmps	result1, #1 wc
1ed44     00 26 26 36 |  if_ae	not	local01, #0
1ed48     A7 26 62 FC | 	wrlong	local01, fp
1ed4c     20 04 90 FD | 	jmp	#LR__2453
1ed50                 | LR__2440
1ed50                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1ed50     08 4E 05 F1 | 	add	fp, #8
1ed54     A7 26 02 FB | 	rdlong	local01, fp
1ed58     08 4E 85 F1 | 	sub	fp, #8
1ed5c     1E 26 0E F2 | 	cmp	local01, #30 wz
1ed60     14 4E 05 A1 |  if_e	add	fp, #20
1ed64     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed68     14 4E 85 A1 |  if_e	sub	fp, #20
1ed6c     16 2B 02 A6 |  if_e	mov	local03, local04
1ed70     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ed74     2C 00 90 5D |  if_ne	jmp	#LR__2441
1ed78     00 26 06 F6 | 	mov	local01, #0
1ed7c     A7 12 02 FB | 	rdlong	arg01, fp
1ed80     0C 4E 05 F1 | 	add	fp, #12
1ed84     A7 14 02 FB | 	rdlong	arg02, fp
1ed88     0C 4E 85 F1 | 	sub	fp, #12
1ed8c     01 16 66 F6 | 	neg	arg03, #1
1ed90     B8 B5 B0 FD | 	call	#__system___float_cmp
1ed94     01 FA 55 F2 | 	cmps	result1, #1 wc
1ed98     00 26 26 36 |  if_ae	not	local01, #0
1ed9c     A7 26 62 FC | 	wrlong	local01, fp
1eda0     CC 03 90 FD | 	jmp	#LR__2453
1eda4                 | LR__2441
1eda4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1eda4     08 4E 05 F1 | 	add	fp, #8
1eda8     A7 26 02 FB | 	rdlong	local01, fp
1edac     08 4E 85 F1 | 	sub	fp, #8
1edb0     1E 26 0E F2 | 	cmp	local01, #30 wz
1edb4     14 4E 05 A1 |  if_e	add	fp, #20
1edb8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1edbc     14 4E 85 A1 |  if_e	sub	fp, #20
1edc0     16 2B 02 A6 |  if_e	mov	local03, local04
1edc4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1edc8     48 00 90 5D |  if_ne	jmp	#LR__2442
1edcc     00 26 06 F6 | 	mov	local01, #0
1edd0     A7 28 02 FB | 	rdlong	local02, fp
1edd4     0C 4E 05 F1 | 	add	fp, #12
1edd8     A7 12 02 FB | 	rdlong	arg01, fp
1eddc     0C 4E 85 F1 | 	sub	fp, #12
1ede0     09 13 52 F6 | 	abs	arg01, arg01 wc
1ede4     1F 2E C6 C9 |  if_b	decod	local05, #31
1ede8     00 2E 06 36 |  if_ae	mov	local05, #0
1edec     24 AD B0 FD | 	call	#__system___float_fromuns
1edf0     17 FB 61 F5 | 	xor	result1, local05
1edf4     FD 14 02 F6 | 	mov	arg02, result1
1edf8     14 13 02 F6 | 	mov	arg01, local02
1edfc     01 16 66 F6 | 	neg	arg03, #1
1ee00     48 B5 B0 FD | 	call	#__system___float_cmp
1ee04     01 FA 55 F2 | 	cmps	result1, #1 wc
1ee08     00 26 26 36 |  if_ae	not	local01, #0
1ee0c     A7 26 62 FC | 	wrlong	local01, fp
1ee10     5C 03 90 FD | 	jmp	#LR__2453
1ee14                 | LR__2442
1ee14                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1ee14     08 4E 05 F1 | 	add	fp, #8
1ee18     A7 26 02 FB | 	rdlong	local01, fp
1ee1c     08 4E 85 F1 | 	sub	fp, #8
1ee20     1E 26 0E F2 | 	cmp	local01, #30 wz
1ee24     14 4E 05 A1 |  if_e	add	fp, #20
1ee28     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ee2c     14 4E 85 A1 |  if_e	sub	fp, #20
1ee30     16 2B 02 A6 |  if_e	mov	local03, local04
1ee34     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ee38     38 00 90 5D |  if_ne	jmp	#LR__2443
1ee3c     00 26 06 F6 | 	mov	local01, #0
1ee40     A7 28 02 FB | 	rdlong	local02, fp
1ee44     0C 4E 05 F1 | 	add	fp, #12
1ee48     A7 12 02 FB | 	rdlong	arg01, fp
1ee4c     0C 4E 85 F1 | 	sub	fp, #12
1ee50     C0 AC B0 FD | 	call	#__system___float_fromuns
1ee54     FD 14 02 F6 | 	mov	arg02, result1
1ee58     14 13 02 F6 | 	mov	arg01, local02
1ee5c     01 16 66 F6 | 	neg	arg03, #1
1ee60     E8 B4 B0 FD | 	call	#__system___float_cmp
1ee64     01 FA 55 F2 | 	cmps	result1, #1 wc
1ee68     00 26 26 36 |  if_ae	not	local01, #0
1ee6c     A7 26 62 FC | 	wrlong	local01, fp
1ee70     FC 02 90 FD | 	jmp	#LR__2453
1ee74                 | LR__2443
1ee74                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1ee74     08 4E 05 F1 | 	add	fp, #8
1ee78     A7 26 02 FB | 	rdlong	local01, fp
1ee7c     08 4E 85 F1 | 	sub	fp, #8
1ee80     1C 26 0E F2 | 	cmp	local01, #28 wz
1ee84     14 4E 05 A1 |  if_e	add	fp, #20
1ee88     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ee8c     14 4E 85 A1 |  if_e	sub	fp, #20
1ee90     16 2B 02 A6 |  if_e	mov	local03, local04
1ee94     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ee98     44 00 90 5D |  if_ne	jmp	#LR__2444
1ee9c     00 26 06 F6 | 	mov	local01, #0
1eea0     A7 12 02 FB | 	rdlong	arg01, fp
1eea4     09 13 52 F6 | 	abs	arg01, arg01 wc
1eea8     1F 2E C6 C9 |  if_b	decod	local05, #31
1eeac     00 2E 06 36 |  if_ae	mov	local05, #0
1eeb0     60 AC B0 FD | 	call	#__system___float_fromuns
1eeb4     17 FB 61 F5 | 	xor	result1, local05
1eeb8     FD 12 02 F6 | 	mov	arg01, result1
1eebc     0C 4E 05 F1 | 	add	fp, #12
1eec0     A7 14 02 FB | 	rdlong	arg02, fp
1eec4     0C 4E 85 F1 | 	sub	fp, #12
1eec8     01 16 66 F6 | 	neg	arg03, #1
1eecc     7C B4 B0 FD | 	call	#__system___float_cmp
1eed0     01 FA 55 F2 | 	cmps	result1, #1 wc
1eed4     00 26 26 36 |  if_ae	not	local01, #0
1eed8     A7 26 62 FC | 	wrlong	local01, fp
1eedc     90 02 90 FD | 	jmp	#LR__2453
1eee0                 | LR__2444
1eee0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1eee0     08 4E 05 F1 | 	add	fp, #8
1eee4     A7 26 02 FB | 	rdlong	local01, fp
1eee8     08 4E 85 F1 | 	sub	fp, #8
1eeec     1C 26 0E F2 | 	cmp	local01, #28 wz
1eef0     14 4E 05 A1 |  if_e	add	fp, #20
1eef4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1eef8     14 4E 85 A1 |  if_e	sub	fp, #20
1eefc     16 2B 02 A6 |  if_e	mov	local03, local04
1ef00     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ef04     24 00 90 5D |  if_ne	jmp	#LR__2445
1ef08     00 26 06 F6 | 	mov	local01, #0
1ef0c     A7 28 02 FB | 	rdlong	local02, fp
1ef10     0C 4E 05 F1 | 	add	fp, #12
1ef14     A7 2A 02 FB | 	rdlong	local03, fp
1ef18     0C 4E 85 F1 | 	sub	fp, #12
1ef1c     15 29 5A F2 | 	cmps	local02, local03 wcz
1ef20     01 26 66 16 |  if_a	neg	local01, #1
1ef24     A7 26 62 FC | 	wrlong	local01, fp
1ef28     44 02 90 FD | 	jmp	#LR__2453
1ef2c                 | LR__2445
1ef2c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1ef2c     08 4E 05 F1 | 	add	fp, #8
1ef30     A7 26 02 FB | 	rdlong	local01, fp
1ef34     08 4E 85 F1 | 	sub	fp, #8
1ef38     1C 26 0E F2 | 	cmp	local01, #28 wz
1ef3c     14 4E 05 A1 |  if_e	add	fp, #20
1ef40     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ef44     14 4E 85 A1 |  if_e	sub	fp, #20
1ef48     16 2B 02 A6 |  if_e	mov	local03, local04
1ef4c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ef50     24 00 90 5D |  if_ne	jmp	#LR__2446
1ef54     00 26 06 F6 | 	mov	local01, #0
1ef58     A7 28 02 FB | 	rdlong	local02, fp
1ef5c     0C 4E 05 F1 | 	add	fp, #12
1ef60     A7 2A 02 FB | 	rdlong	local03, fp
1ef64     0C 4E 85 F1 | 	sub	fp, #12
1ef68     15 29 5A F2 | 	cmps	local02, local03 wcz
1ef6c     01 26 66 16 |  if_a	neg	local01, #1
1ef70     A7 26 62 FC | 	wrlong	local01, fp
1ef74     F8 01 90 FD | 	jmp	#LR__2453
1ef78                 | LR__2446
1ef78                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1ef78     08 4E 05 F1 | 	add	fp, #8
1ef7c     A7 26 02 FB | 	rdlong	local01, fp
1ef80     08 4E 85 F1 | 	sub	fp, #8
1ef84     1D 26 0E F2 | 	cmp	local01, #29 wz
1ef88     14 4E 05 A1 |  if_e	add	fp, #20
1ef8c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ef90     14 4E 85 A1 |  if_e	sub	fp, #20
1ef94     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1ef98     34 00 90 5D |  if_ne	jmp	#LR__2447
1ef9c     00 26 06 F6 | 	mov	local01, #0
1efa0     A7 12 02 FB | 	rdlong	arg01, fp
1efa4     6C AB B0 FD | 	call	#__system___float_fromuns
1efa8     FD 12 02 F6 | 	mov	arg01, result1
1efac     0C 4E 05 F1 | 	add	fp, #12
1efb0     A7 14 02 FB | 	rdlong	arg02, fp
1efb4     0C 4E 85 F1 | 	sub	fp, #12
1efb8     01 16 66 F6 | 	neg	arg03, #1
1efbc     8C B3 B0 FD | 	call	#__system___float_cmp
1efc0     01 FA 55 F2 | 	cmps	result1, #1 wc
1efc4     00 26 26 36 |  if_ae	not	local01, #0
1efc8     A7 26 62 FC | 	wrlong	local01, fp
1efcc     A0 01 90 FD | 	jmp	#LR__2453
1efd0                 | LR__2447
1efd0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1efd0     08 4E 05 F1 | 	add	fp, #8
1efd4     A7 26 02 FB | 	rdlong	local01, fp
1efd8     08 4E 85 F1 | 	sub	fp, #8
1efdc     1D 26 0E F2 | 	cmp	local01, #29 wz
1efe0     14 4E 05 A1 |  if_e	add	fp, #20
1efe4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1efe8     14 4E 85 A1 |  if_e	sub	fp, #20
1efec     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1eff0     24 00 90 5D |  if_ne	jmp	#LR__2448
1eff4     00 26 06 F6 | 	mov	local01, #0
1eff8     A7 28 02 FB | 	rdlong	local02, fp
1effc     0C 4E 05 F1 | 	add	fp, #12
1f000     A7 2A 02 FB | 	rdlong	local03, fp
1f004     0C 4E 85 F1 | 	sub	fp, #12
1f008     15 29 5A F2 | 	cmps	local02, local03 wcz
1f00c     01 26 66 16 |  if_a	neg	local01, #1
1f010     A7 26 62 FC | 	wrlong	local01, fp
1f014     58 01 90 FD | 	jmp	#LR__2453
1f018                 | LR__2448
1f018                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1f018     08 4E 05 F1 | 	add	fp, #8
1f01c     A7 26 02 FB | 	rdlong	local01, fp
1f020     08 4E 85 F1 | 	sub	fp, #8
1f024     1D 26 0E F2 | 	cmp	local01, #29 wz
1f028     14 4E 05 A1 |  if_e	add	fp, #20
1f02c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f030     14 4E 85 A1 |  if_e	sub	fp, #20
1f034     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f038     24 00 90 5D |  if_ne	jmp	#LR__2449
1f03c     00 26 06 F6 | 	mov	local01, #0
1f040     A7 28 02 FB | 	rdlong	local02, fp
1f044     0C 4E 05 F1 | 	add	fp, #12
1f048     A7 2A 02 FB | 	rdlong	local03, fp
1f04c     0C 4E 85 F1 | 	sub	fp, #12
1f050     15 29 1A F2 | 	cmp	local02, local03 wcz
1f054     01 26 66 16 |  if_a	neg	local01, #1
1f058     A7 26 62 FC | 	wrlong	local01, fp
1f05c     10 01 90 FD | 	jmp	#LR__2453
1f060                 | LR__2449
1f060                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1f060     08 4E 05 F1 | 	add	fp, #8
1f064     A7 26 02 FB | 	rdlong	local01, fp
1f068     08 4E 85 F1 | 	sub	fp, #8
1f06c     2B 26 0E F2 | 	cmp	local01, #43 wz
1f070     14 4E 05 A1 |  if_e	add	fp, #20
1f074     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f078     14 4E 85 A1 |  if_e	sub	fp, #20
1f07c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f080     30 00 90 5D |  if_ne	jmp	#LR__2450
1f084     00 26 06 F6 | 	mov	local01, #0
1f088     A7 12 02 FB | 	rdlong	arg01, fp
1f08c     F0 E7 BE FD | 	call	#_convertstring
1f090     FD 12 02 F6 | 	mov	arg01, result1
1f094     0C 4E 05 F1 | 	add	fp, #12
1f098     A7 14 02 FB | 	rdlong	arg02, fp
1f09c     0C 4E 85 F1 | 	sub	fp, #12
1f0a0     20 80 B0 FD | 	call	#__system___string_cmp
1f0a4     01 FA 55 F2 | 	cmps	result1, #1 wc
1f0a8     00 26 26 36 |  if_ae	not	local01, #0
1f0ac     A7 26 62 FC | 	wrlong	local01, fp
1f0b0     BC 00 90 FD | 	jmp	#LR__2453
1f0b4                 | LR__2450
1f0b4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1f0b4     08 4E 05 F1 | 	add	fp, #8
1f0b8     A7 26 02 FB | 	rdlong	local01, fp
1f0bc     08 4E 85 F1 | 	sub	fp, #8
1f0c0     1F 26 0E F2 | 	cmp	local01, #31 wz
1f0c4     14 4E 05 A1 |  if_e	add	fp, #20
1f0c8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f0cc     14 4E 85 A1 |  if_e	sub	fp, #20
1f0d0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f0d4     34 00 90 5D |  if_ne	jmp	#LR__2451
1f0d8     00 26 06 F6 | 	mov	local01, #0
1f0dc     A7 28 02 FB | 	rdlong	local02, fp
1f0e0     0C 4E 05 F1 | 	add	fp, #12
1f0e4     A7 12 02 FB | 	rdlong	arg01, fp
1f0e8     0C 4E 85 F1 | 	sub	fp, #12
1f0ec     90 E7 BE FD | 	call	#_convertstring
1f0f0     FD 14 02 F6 | 	mov	arg02, result1
1f0f4     14 13 02 F6 | 	mov	arg01, local02
1f0f8     C8 7F B0 FD | 	call	#__system___string_cmp
1f0fc     01 FA 55 F2 | 	cmps	result1, #1 wc
1f100     00 26 26 36 |  if_ae	not	local01, #0
1f104     A7 26 62 FC | 	wrlong	local01, fp
1f108     64 00 90 FD | 	jmp	#LR__2453
1f10c                 | LR__2451
1f10c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1f10c     08 4E 05 F1 | 	add	fp, #8
1f110     A7 26 02 FB | 	rdlong	local01, fp
1f114     08 4E 85 F1 | 	sub	fp, #8
1f118     2B 26 0E F2 | 	cmp	local01, #43 wz
1f11c     14 4E 05 A1 |  if_e	add	fp, #20
1f120     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f124     14 4E 85 A1 |  if_e	sub	fp, #20
1f128     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f12c     3C 00 90 5D |  if_ne	jmp	#LR__2452
1f130     00 26 06 F6 | 	mov	local01, #0
1f134     A7 12 02 FB | 	rdlong	arg01, fp
1f138     44 E7 BE FD | 	call	#_convertstring
1f13c     FD 28 02 F6 | 	mov	local02, result1
1f140     0C 4E 05 F1 | 	add	fp, #12
1f144     A7 12 02 FB | 	rdlong	arg01, fp
1f148     0C 4E 85 F1 | 	sub	fp, #12
1f14c     30 E7 BE FD | 	call	#_convertstring
1f150     FD 14 02 F6 | 	mov	arg02, result1
1f154     14 13 02 F6 | 	mov	arg01, local02
1f158     68 7F B0 FD | 	call	#__system___string_cmp
1f15c     01 FA 55 F2 | 	cmps	result1, #1 wc
1f160     00 26 26 36 |  if_ae	not	local01, #0
1f164     A7 26 62 FC | 	wrlong	local01, fp
1f168     04 00 90 FD | 	jmp	#LR__2453
1f16c                 | LR__2452
1f16c     A7 00 68 FC | 	wrlong	#0, fp
1f170                 | LR__2453
1f170     08 4E 05 F1 | 	add	fp, #8
1f174     A7 38 68 FC | 	wrlong	#28, fp
1f178     08 4E 85 F1 | 	sub	fp, #8
1f17c                 | ' t1.result.uresult=0
1f17c                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f17c     A7 26 0A FB | 	rdlong	local01, fp wz
1f180     A7 02 68 5C |  if_ne	wrlong	#1, fp
1f184     A7 12 02 F6 | 	mov	arg01, fp
1f188     14 E6 BE FD | 	call	#_push
1f18c     A7 F0 03 F6 | 	mov	ptra, fp
1f190     B2 00 A0 FD | 	call	#popregs_
1f194                 | _do_gt_ret
1f194     2D 00 64 FD | 	ret
1f198                 | 
1f198                 | ' 
1f198                 | ' '--------------------------------- less or equal (<=)
1f198                 | ' 
1f198                 | ' sub do_le
1f198                 | _do_le
1f198     05 4A 05 F6 | 	mov	COUNT_, #5
1f19c     A8 00 A0 FD | 	call	#pushregs_
1f1a0     18 F0 07 F1 | 	add	ptra, #24
1f1a4     60 E5 BE FD | 	call	#_pop
1f1a8     FD 26 02 F6 | 	mov	local01, result1
1f1ac     FE 28 02 F6 | 	mov	local02, result2
1f1b0     FF 2A 02 F6 | 	mov	local03, result3
1f1b4     0C 4E 05 F1 | 	add	fp, #12
1f1b8     A7 26 62 FC | 	wrlong	local01, fp
1f1bc     04 4E 05 F1 | 	add	fp, #4
1f1c0     A7 28 62 FC | 	wrlong	local02, fp
1f1c4     04 4E 05 F1 | 	add	fp, #4
1f1c8     A7 2A 62 FC | 	wrlong	local03, fp
1f1cc     14 4E 85 F1 | 	sub	fp, #20
1f1d0     34 E5 BE FD | 	call	#_pop
1f1d4     FF 2A 02 F6 | 	mov	local03, result3
1f1d8     A7 FA 61 FC | 	wrlong	result1, fp
1f1dc     04 4E 05 F1 | 	add	fp, #4
1f1e0     A7 FC 61 FC | 	wrlong	result2, fp
1f1e4     04 4E 05 F1 | 	add	fp, #4
1f1e8     A7 2A 62 FC | 	wrlong	local03, fp
1f1ec                 | ' 
1f1ec                 | ' t2=pop()
1f1ec                 | ' t1=pop()
1f1ec                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1f1ec     08 4E 85 F1 | 	sub	fp, #8
1f1f0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f1f4     14 4E 05 A1 |  if_e	add	fp, #20
1f1f8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f1fc     14 4E 85 A1 |  if_e	sub	fp, #20
1f200     16 2B 02 A6 |  if_e	mov	local03, local04
1f204     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f208     28 00 90 5D |  if_ne	jmp	#LR__2460
1f20c     00 26 06 F6 | 	mov	local01, #0
1f210     A7 12 02 FB | 	rdlong	arg01, fp
1f214     0C 4E 05 F1 | 	add	fp, #12
1f218     A7 14 02 FB | 	rdlong	arg02, fp
1f21c     0C 4E 85 F1 | 	sub	fp, #12
1f220     A0 7E B0 FD | 	call	#__system___string_cmp
1f224     01 FA 55 F2 | 	cmps	result1, #1 wc
1f228     00 26 26 C6 |  if_b	not	local01, #0
1f22c     A7 26 62 FC | 	wrlong	local01, fp
1f230     20 04 90 FD | 	jmp	#LR__2473
1f234                 | LR__2460
1f234                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1f234     08 4E 05 F1 | 	add	fp, #8
1f238     A7 26 02 FB | 	rdlong	local01, fp
1f23c     08 4E 85 F1 | 	sub	fp, #8
1f240     1E 26 0E F2 | 	cmp	local01, #30 wz
1f244     14 4E 05 A1 |  if_e	add	fp, #20
1f248     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f24c     14 4E 85 A1 |  if_e	sub	fp, #20
1f250     16 2B 02 A6 |  if_e	mov	local03, local04
1f254     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f258     2C 00 90 5D |  if_ne	jmp	#LR__2461
1f25c     00 26 06 F6 | 	mov	local01, #0
1f260     A7 12 02 FB | 	rdlong	arg01, fp
1f264     0C 4E 05 F1 | 	add	fp, #12
1f268     A7 14 02 FB | 	rdlong	arg02, fp
1f26c     0C 4E 85 F1 | 	sub	fp, #12
1f270     01 16 06 F6 | 	mov	arg03, #1
1f274     D4 B0 B0 FD | 	call	#__system___float_cmp
1f278     01 FA 55 F2 | 	cmps	result1, #1 wc
1f27c     00 26 26 C6 |  if_b	not	local01, #0
1f280     A7 26 62 FC | 	wrlong	local01, fp
1f284     CC 03 90 FD | 	jmp	#LR__2473
1f288                 | LR__2461
1f288                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1f288     08 4E 05 F1 | 	add	fp, #8
1f28c     A7 26 02 FB | 	rdlong	local01, fp
1f290     08 4E 85 F1 | 	sub	fp, #8
1f294     1E 26 0E F2 | 	cmp	local01, #30 wz
1f298     14 4E 05 A1 |  if_e	add	fp, #20
1f29c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f2a0     14 4E 85 A1 |  if_e	sub	fp, #20
1f2a4     16 2B 02 A6 |  if_e	mov	local03, local04
1f2a8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f2ac     48 00 90 5D |  if_ne	jmp	#LR__2462
1f2b0     00 26 06 F6 | 	mov	local01, #0
1f2b4     A7 28 02 FB | 	rdlong	local02, fp
1f2b8     0C 4E 05 F1 | 	add	fp, #12
1f2bc     A7 12 02 FB | 	rdlong	arg01, fp
1f2c0     0C 4E 85 F1 | 	sub	fp, #12
1f2c4     09 13 52 F6 | 	abs	arg01, arg01 wc
1f2c8     1F 2E C6 C9 |  if_b	decod	local05, #31
1f2cc     00 2E 06 36 |  if_ae	mov	local05, #0
1f2d0     40 A8 B0 FD | 	call	#__system___float_fromuns
1f2d4     17 FB 61 F5 | 	xor	result1, local05
1f2d8     FD 14 02 F6 | 	mov	arg02, result1
1f2dc     14 13 02 F6 | 	mov	arg01, local02
1f2e0     01 16 06 F6 | 	mov	arg03, #1
1f2e4     64 B0 B0 FD | 	call	#__system___float_cmp
1f2e8     01 FA 55 F2 | 	cmps	result1, #1 wc
1f2ec     00 26 26 C6 |  if_b	not	local01, #0
1f2f0     A7 26 62 FC | 	wrlong	local01, fp
1f2f4     5C 03 90 FD | 	jmp	#LR__2473
1f2f8                 | LR__2462
1f2f8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1f2f8     08 4E 05 F1 | 	add	fp, #8
1f2fc     A7 26 02 FB | 	rdlong	local01, fp
1f300     08 4E 85 F1 | 	sub	fp, #8
1f304     1E 26 0E F2 | 	cmp	local01, #30 wz
1f308     14 4E 05 A1 |  if_e	add	fp, #20
1f30c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f310     14 4E 85 A1 |  if_e	sub	fp, #20
1f314     16 2B 02 A6 |  if_e	mov	local03, local04
1f318     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f31c     38 00 90 5D |  if_ne	jmp	#LR__2463
1f320     00 26 06 F6 | 	mov	local01, #0
1f324     A7 28 02 FB | 	rdlong	local02, fp
1f328     0C 4E 05 F1 | 	add	fp, #12
1f32c     A7 12 02 FB | 	rdlong	arg01, fp
1f330     0C 4E 85 F1 | 	sub	fp, #12
1f334     DC A7 B0 FD | 	call	#__system___float_fromuns
1f338     FD 14 02 F6 | 	mov	arg02, result1
1f33c     14 13 02 F6 | 	mov	arg01, local02
1f340     01 16 06 F6 | 	mov	arg03, #1
1f344     04 B0 B0 FD | 	call	#__system___float_cmp
1f348     01 FA 55 F2 | 	cmps	result1, #1 wc
1f34c     00 26 26 C6 |  if_b	not	local01, #0
1f350     A7 26 62 FC | 	wrlong	local01, fp
1f354     FC 02 90 FD | 	jmp	#LR__2473
1f358                 | LR__2463
1f358                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1f358     08 4E 05 F1 | 	add	fp, #8
1f35c     A7 26 02 FB | 	rdlong	local01, fp
1f360     08 4E 85 F1 | 	sub	fp, #8
1f364     1C 26 0E F2 | 	cmp	local01, #28 wz
1f368     14 4E 05 A1 |  if_e	add	fp, #20
1f36c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f370     14 4E 85 A1 |  if_e	sub	fp, #20
1f374     16 2B 02 A6 |  if_e	mov	local03, local04
1f378     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f37c     44 00 90 5D |  if_ne	jmp	#LR__2464
1f380     00 26 06 F6 | 	mov	local01, #0
1f384     A7 12 02 FB | 	rdlong	arg01, fp
1f388     09 13 52 F6 | 	abs	arg01, arg01 wc
1f38c     1F 2E C6 C9 |  if_b	decod	local05, #31
1f390     00 2E 06 36 |  if_ae	mov	local05, #0
1f394     7C A7 B0 FD | 	call	#__system___float_fromuns
1f398     17 FB 61 F5 | 	xor	result1, local05
1f39c     FD 12 02 F6 | 	mov	arg01, result1
1f3a0     0C 4E 05 F1 | 	add	fp, #12
1f3a4     A7 14 02 FB | 	rdlong	arg02, fp
1f3a8     0C 4E 85 F1 | 	sub	fp, #12
1f3ac     01 16 06 F6 | 	mov	arg03, #1
1f3b0     98 AF B0 FD | 	call	#__system___float_cmp
1f3b4     01 FA 55 F2 | 	cmps	result1, #1 wc
1f3b8     00 26 26 C6 |  if_b	not	local01, #0
1f3bc     A7 26 62 FC | 	wrlong	local01, fp
1f3c0     90 02 90 FD | 	jmp	#LR__2473
1f3c4                 | LR__2464
1f3c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1f3c4     08 4E 05 F1 | 	add	fp, #8
1f3c8     A7 26 02 FB | 	rdlong	local01, fp
1f3cc     08 4E 85 F1 | 	sub	fp, #8
1f3d0     1C 26 0E F2 | 	cmp	local01, #28 wz
1f3d4     14 4E 05 A1 |  if_e	add	fp, #20
1f3d8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f3dc     14 4E 85 A1 |  if_e	sub	fp, #20
1f3e0     16 2B 02 A6 |  if_e	mov	local03, local04
1f3e4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f3e8     24 00 90 5D |  if_ne	jmp	#LR__2465
1f3ec     00 26 06 F6 | 	mov	local01, #0
1f3f0     A7 28 02 FB | 	rdlong	local02, fp
1f3f4     0C 4E 05 F1 | 	add	fp, #12
1f3f8     A7 2A 02 FB | 	rdlong	local03, fp
1f3fc     0C 4E 85 F1 | 	sub	fp, #12
1f400     15 29 5A F2 | 	cmps	local02, local03 wcz
1f404     01 26 66 E6 |  if_be	neg	local01, #1
1f408     A7 26 62 FC | 	wrlong	local01, fp
1f40c     44 02 90 FD | 	jmp	#LR__2473
1f410                 | LR__2465
1f410                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1f410     08 4E 05 F1 | 	add	fp, #8
1f414     A7 26 02 FB | 	rdlong	local01, fp
1f418     08 4E 85 F1 | 	sub	fp, #8
1f41c     1C 26 0E F2 | 	cmp	local01, #28 wz
1f420     14 4E 05 A1 |  if_e	add	fp, #20
1f424     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f428     14 4E 85 A1 |  if_e	sub	fp, #20
1f42c     16 2B 02 A6 |  if_e	mov	local03, local04
1f430     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f434     24 00 90 5D |  if_ne	jmp	#LR__2466
1f438     00 26 06 F6 | 	mov	local01, #0
1f43c     A7 28 02 FB | 	rdlong	local02, fp
1f440     0C 4E 05 F1 | 	add	fp, #12
1f444     A7 2A 02 FB | 	rdlong	local03, fp
1f448     0C 4E 85 F1 | 	sub	fp, #12
1f44c     15 29 5A F2 | 	cmps	local02, local03 wcz
1f450     01 26 66 E6 |  if_be	neg	local01, #1
1f454     A7 26 62 FC | 	wrlong	local01, fp
1f458     F8 01 90 FD | 	jmp	#LR__2473
1f45c                 | LR__2466
1f45c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1f45c     08 4E 05 F1 | 	add	fp, #8
1f460     A7 26 02 FB | 	rdlong	local01, fp
1f464     08 4E 85 F1 | 	sub	fp, #8
1f468     1D 26 0E F2 | 	cmp	local01, #29 wz
1f46c     14 4E 05 A1 |  if_e	add	fp, #20
1f470     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f474     14 4E 85 A1 |  if_e	sub	fp, #20
1f478     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f47c     34 00 90 5D |  if_ne	jmp	#LR__2467
1f480     00 26 06 F6 | 	mov	local01, #0
1f484     A7 12 02 FB | 	rdlong	arg01, fp
1f488     88 A6 B0 FD | 	call	#__system___float_fromuns
1f48c     FD 12 02 F6 | 	mov	arg01, result1
1f490     0C 4E 05 F1 | 	add	fp, #12
1f494     A7 14 02 FB | 	rdlong	arg02, fp
1f498     0C 4E 85 F1 | 	sub	fp, #12
1f49c     01 16 06 F6 | 	mov	arg03, #1
1f4a0     A8 AE B0 FD | 	call	#__system___float_cmp
1f4a4     01 FA 55 F2 | 	cmps	result1, #1 wc
1f4a8     00 26 26 C6 |  if_b	not	local01, #0
1f4ac     A7 26 62 FC | 	wrlong	local01, fp
1f4b0     A0 01 90 FD | 	jmp	#LR__2473
1f4b4                 | LR__2467
1f4b4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1f4b4     08 4E 05 F1 | 	add	fp, #8
1f4b8     A7 26 02 FB | 	rdlong	local01, fp
1f4bc     08 4E 85 F1 | 	sub	fp, #8
1f4c0     1D 26 0E F2 | 	cmp	local01, #29 wz
1f4c4     14 4E 05 A1 |  if_e	add	fp, #20
1f4c8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f4cc     14 4E 85 A1 |  if_e	sub	fp, #20
1f4d0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f4d4     24 00 90 5D |  if_ne	jmp	#LR__2468
1f4d8     00 26 06 F6 | 	mov	local01, #0
1f4dc     A7 28 02 FB | 	rdlong	local02, fp
1f4e0     0C 4E 05 F1 | 	add	fp, #12
1f4e4     A7 2A 02 FB | 	rdlong	local03, fp
1f4e8     0C 4E 85 F1 | 	sub	fp, #12
1f4ec     15 29 5A F2 | 	cmps	local02, local03 wcz
1f4f0     01 26 66 E6 |  if_be	neg	local01, #1
1f4f4     A7 26 62 FC | 	wrlong	local01, fp
1f4f8     58 01 90 FD | 	jmp	#LR__2473
1f4fc                 | LR__2468
1f4fc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1f4fc     08 4E 05 F1 | 	add	fp, #8
1f500     A7 26 02 FB | 	rdlong	local01, fp
1f504     08 4E 85 F1 | 	sub	fp, #8
1f508     1D 26 0E F2 | 	cmp	local01, #29 wz
1f50c     14 4E 05 A1 |  if_e	add	fp, #20
1f510     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f514     14 4E 85 A1 |  if_e	sub	fp, #20
1f518     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f51c     24 00 90 5D |  if_ne	jmp	#LR__2469
1f520     00 26 06 F6 | 	mov	local01, #0
1f524     A7 28 02 FB | 	rdlong	local02, fp
1f528     0C 4E 05 F1 | 	add	fp, #12
1f52c     A7 2A 02 FB | 	rdlong	local03, fp
1f530     0C 4E 85 F1 | 	sub	fp, #12
1f534     15 29 1A F2 | 	cmp	local02, local03 wcz
1f538     01 26 66 E6 |  if_be	neg	local01, #1
1f53c     A7 26 62 FC | 	wrlong	local01, fp
1f540     10 01 90 FD | 	jmp	#LR__2473
1f544                 | LR__2469
1f544                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1f544     08 4E 05 F1 | 	add	fp, #8
1f548     A7 26 02 FB | 	rdlong	local01, fp
1f54c     08 4E 85 F1 | 	sub	fp, #8
1f550     2B 26 0E F2 | 	cmp	local01, #43 wz
1f554     14 4E 05 A1 |  if_e	add	fp, #20
1f558     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f55c     14 4E 85 A1 |  if_e	sub	fp, #20
1f560     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f564     30 00 90 5D |  if_ne	jmp	#LR__2470
1f568     00 26 06 F6 | 	mov	local01, #0
1f56c     A7 12 02 FB | 	rdlong	arg01, fp
1f570     0C E3 BE FD | 	call	#_convertstring
1f574     FD 12 02 F6 | 	mov	arg01, result1
1f578     0C 4E 05 F1 | 	add	fp, #12
1f57c     A7 14 02 FB | 	rdlong	arg02, fp
1f580     0C 4E 85 F1 | 	sub	fp, #12
1f584     3C 7B B0 FD | 	call	#__system___string_cmp
1f588     01 FA 55 F2 | 	cmps	result1, #1 wc
1f58c     00 26 26 C6 |  if_b	not	local01, #0
1f590     A7 26 62 FC | 	wrlong	local01, fp
1f594     BC 00 90 FD | 	jmp	#LR__2473
1f598                 | LR__2470
1f598                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1f598     08 4E 05 F1 | 	add	fp, #8
1f59c     A7 26 02 FB | 	rdlong	local01, fp
1f5a0     08 4E 85 F1 | 	sub	fp, #8
1f5a4     1F 26 0E F2 | 	cmp	local01, #31 wz
1f5a8     14 4E 05 A1 |  if_e	add	fp, #20
1f5ac     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f5b0     14 4E 85 A1 |  if_e	sub	fp, #20
1f5b4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f5b8     34 00 90 5D |  if_ne	jmp	#LR__2471
1f5bc     00 26 06 F6 | 	mov	local01, #0
1f5c0     A7 28 02 FB | 	rdlong	local02, fp
1f5c4     0C 4E 05 F1 | 	add	fp, #12
1f5c8     A7 12 02 FB | 	rdlong	arg01, fp
1f5cc     0C 4E 85 F1 | 	sub	fp, #12
1f5d0     AC E2 BE FD | 	call	#_convertstring
1f5d4     FD 14 02 F6 | 	mov	arg02, result1
1f5d8     14 13 02 F6 | 	mov	arg01, local02
1f5dc     E4 7A B0 FD | 	call	#__system___string_cmp
1f5e0     01 FA 55 F2 | 	cmps	result1, #1 wc
1f5e4     00 26 26 C6 |  if_b	not	local01, #0
1f5e8     A7 26 62 FC | 	wrlong	local01, fp
1f5ec     64 00 90 FD | 	jmp	#LR__2473
1f5f0                 | LR__2471
1f5f0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1f5f0     08 4E 05 F1 | 	add	fp, #8
1f5f4     A7 26 02 FB | 	rdlong	local01, fp
1f5f8     08 4E 85 F1 | 	sub	fp, #8
1f5fc     2B 26 0E F2 | 	cmp	local01, #43 wz
1f600     14 4E 05 A1 |  if_e	add	fp, #20
1f604     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f608     14 4E 85 A1 |  if_e	sub	fp, #20
1f60c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f610     3C 00 90 5D |  if_ne	jmp	#LR__2472
1f614     00 26 06 F6 | 	mov	local01, #0
1f618     A7 12 02 FB | 	rdlong	arg01, fp
1f61c     60 E2 BE FD | 	call	#_convertstring
1f620     FD 28 02 F6 | 	mov	local02, result1
1f624     0C 4E 05 F1 | 	add	fp, #12
1f628     A7 12 02 FB | 	rdlong	arg01, fp
1f62c     0C 4E 85 F1 | 	sub	fp, #12
1f630     4C E2 BE FD | 	call	#_convertstring
1f634     FD 14 02 F6 | 	mov	arg02, result1
1f638     14 13 02 F6 | 	mov	arg01, local02
1f63c     84 7A B0 FD | 	call	#__system___string_cmp
1f640     01 FA 55 F2 | 	cmps	result1, #1 wc
1f644     00 26 26 C6 |  if_b	not	local01, #0
1f648     A7 26 62 FC | 	wrlong	local01, fp
1f64c     04 00 90 FD | 	jmp	#LR__2473
1f650                 | LR__2472
1f650     A7 00 68 FC | 	wrlong	#0, fp
1f654                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f654                 | LR__2473
1f654     08 4E 05 F1 | 	add	fp, #8
1f658     A7 38 68 FC | 	wrlong	#28, fp
1f65c     08 4E 85 F1 | 	sub	fp, #8
1f660     A7 12 02 F6 | 	mov	arg01, fp
1f664     38 E1 BE FD | 	call	#_push
1f668     A7 F0 03 F6 | 	mov	ptra, fp
1f66c     B2 00 A0 FD | 	call	#popregs_
1f670                 | _do_le_ret
1f670     2D 00 64 FD | 	ret
1f674                 | 
1f674                 | ' 
1f674                 | ' '--------------------------------- less than (<)
1f674                 | ' 
1f674                 | ' sub do_lt
1f674                 | _do_lt
1f674     05 4A 05 F6 | 	mov	COUNT_, #5
1f678     A8 00 A0 FD | 	call	#pushregs_
1f67c     18 F0 07 F1 | 	add	ptra, #24
1f680     84 E0 BE FD | 	call	#_pop
1f684     FD 26 02 F6 | 	mov	local01, result1
1f688     FE 28 02 F6 | 	mov	local02, result2
1f68c     FF 2A 02 F6 | 	mov	local03, result3
1f690     0C 4E 05 F1 | 	add	fp, #12
1f694     A7 26 62 FC | 	wrlong	local01, fp
1f698     04 4E 05 F1 | 	add	fp, #4
1f69c     A7 28 62 FC | 	wrlong	local02, fp
1f6a0     04 4E 05 F1 | 	add	fp, #4
1f6a4     A7 2A 62 FC | 	wrlong	local03, fp
1f6a8     14 4E 85 F1 | 	sub	fp, #20
1f6ac     58 E0 BE FD | 	call	#_pop
1f6b0     FF 2A 02 F6 | 	mov	local03, result3
1f6b4     A7 FA 61 FC | 	wrlong	result1, fp
1f6b8     04 4E 05 F1 | 	add	fp, #4
1f6bc     A7 FC 61 FC | 	wrlong	result2, fp
1f6c0     04 4E 05 F1 | 	add	fp, #4
1f6c4     A7 2A 62 FC | 	wrlong	local03, fp
1f6c8                 | ' 
1f6c8                 | ' t2=pop()
1f6c8                 | ' t1=pop()
1f6c8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1f6c8     08 4E 85 F1 | 	sub	fp, #8
1f6cc     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f6d0     14 4E 05 A1 |  if_e	add	fp, #20
1f6d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f6d8     14 4E 85 A1 |  if_e	sub	fp, #20
1f6dc     16 2B 02 A6 |  if_e	mov	local03, local04
1f6e0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f6e4     28 00 90 5D |  if_ne	jmp	#LR__2480
1f6e8     00 26 06 F6 | 	mov	local01, #0
1f6ec     A7 12 02 FB | 	rdlong	arg01, fp
1f6f0     0C 4E 05 F1 | 	add	fp, #12
1f6f4     A7 14 02 FB | 	rdlong	arg02, fp
1f6f8     0C 4E 85 F1 | 	sub	fp, #12
1f6fc     C4 79 B0 FD | 	call	#__system___string_cmp
1f700     00 FA 55 F2 | 	cmps	result1, #0 wc
1f704     00 26 26 C6 |  if_b	not	local01, #0
1f708     A7 26 62 FC | 	wrlong	local01, fp
1f70c     10 04 90 FD | 	jmp	#LR__2493
1f710                 | LR__2480
1f710                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1f710     08 4E 05 F1 | 	add	fp, #8
1f714     A7 26 02 FB | 	rdlong	local01, fp
1f718     08 4E 85 F1 | 	sub	fp, #8
1f71c     1E 26 0E F2 | 	cmp	local01, #30 wz
1f720     14 4E 05 A1 |  if_e	add	fp, #20
1f724     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f728     14 4E 85 A1 |  if_e	sub	fp, #20
1f72c     16 2B 02 A6 |  if_e	mov	local03, local04
1f730     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f734     2C 00 90 5D |  if_ne	jmp	#LR__2481
1f738     00 26 06 F6 | 	mov	local01, #0
1f73c     A7 12 02 FB | 	rdlong	arg01, fp
1f740     0C 4E 05 F1 | 	add	fp, #12
1f744     A7 14 02 FB | 	rdlong	arg02, fp
1f748     0C 4E 85 F1 | 	sub	fp, #12
1f74c     01 16 06 F6 | 	mov	arg03, #1
1f750     F8 AB B0 FD | 	call	#__system___float_cmp
1f754     00 FA 55 F2 | 	cmps	result1, #0 wc
1f758     00 26 26 C6 |  if_b	not	local01, #0
1f75c     A7 26 62 FC | 	wrlong	local01, fp
1f760     BC 03 90 FD | 	jmp	#LR__2493
1f764                 | LR__2481
1f764                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1f764     08 4E 05 F1 | 	add	fp, #8
1f768     A7 26 02 FB | 	rdlong	local01, fp
1f76c     08 4E 85 F1 | 	sub	fp, #8
1f770     1E 26 0E F2 | 	cmp	local01, #30 wz
1f774     14 4E 05 A1 |  if_e	add	fp, #20
1f778     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f77c     14 4E 85 A1 |  if_e	sub	fp, #20
1f780     16 2B 02 A6 |  if_e	mov	local03, local04
1f784     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f788     48 00 90 5D |  if_ne	jmp	#LR__2482
1f78c     00 26 06 F6 | 	mov	local01, #0
1f790     A7 28 02 FB | 	rdlong	local02, fp
1f794     0C 4E 05 F1 | 	add	fp, #12
1f798     A7 12 02 FB | 	rdlong	arg01, fp
1f79c     0C 4E 85 F1 | 	sub	fp, #12
1f7a0     09 13 52 F6 | 	abs	arg01, arg01 wc
1f7a4     1F 2E C6 C9 |  if_b	decod	local05, #31
1f7a8     00 2E 06 36 |  if_ae	mov	local05, #0
1f7ac     64 A3 B0 FD | 	call	#__system___float_fromuns
1f7b0     17 FB 61 F5 | 	xor	result1, local05
1f7b4     FD 14 02 F6 | 	mov	arg02, result1
1f7b8     14 13 02 F6 | 	mov	arg01, local02
1f7bc     01 16 06 F6 | 	mov	arg03, #1
1f7c0     88 AB B0 FD | 	call	#__system___float_cmp
1f7c4     00 FA 55 F2 | 	cmps	result1, #0 wc
1f7c8     00 26 26 C6 |  if_b	not	local01, #0
1f7cc     A7 26 62 FC | 	wrlong	local01, fp
1f7d0     4C 03 90 FD | 	jmp	#LR__2493
1f7d4                 | LR__2482
1f7d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1f7d4     08 4E 05 F1 | 	add	fp, #8
1f7d8     A7 26 02 FB | 	rdlong	local01, fp
1f7dc     08 4E 85 F1 | 	sub	fp, #8
1f7e0     1E 26 0E F2 | 	cmp	local01, #30 wz
1f7e4     14 4E 05 A1 |  if_e	add	fp, #20
1f7e8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f7ec     14 4E 85 A1 |  if_e	sub	fp, #20
1f7f0     16 2B 02 A6 |  if_e	mov	local03, local04
1f7f4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f7f8     38 00 90 5D |  if_ne	jmp	#LR__2483
1f7fc     00 26 06 F6 | 	mov	local01, #0
1f800     A7 28 02 FB | 	rdlong	local02, fp
1f804     0C 4E 05 F1 | 	add	fp, #12
1f808     A7 12 02 FB | 	rdlong	arg01, fp
1f80c     0C 4E 85 F1 | 	sub	fp, #12
1f810     00 A3 B0 FD | 	call	#__system___float_fromuns
1f814     FD 14 02 F6 | 	mov	arg02, result1
1f818     14 13 02 F6 | 	mov	arg01, local02
1f81c     01 16 06 F6 | 	mov	arg03, #1
1f820     28 AB B0 FD | 	call	#__system___float_cmp
1f824     00 FA 55 F2 | 	cmps	result1, #0 wc
1f828     00 26 26 C6 |  if_b	not	local01, #0
1f82c     A7 26 62 FC | 	wrlong	local01, fp
1f830     EC 02 90 FD | 	jmp	#LR__2493
1f834                 | LR__2483
1f834                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1f834     08 4E 05 F1 | 	add	fp, #8
1f838     A7 26 02 FB | 	rdlong	local01, fp
1f83c     08 4E 85 F1 | 	sub	fp, #8
1f840     1C 26 0E F2 | 	cmp	local01, #28 wz
1f844     14 4E 05 A1 |  if_e	add	fp, #20
1f848     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f84c     14 4E 85 A1 |  if_e	sub	fp, #20
1f850     16 2B 02 A6 |  if_e	mov	local03, local04
1f854     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f858     44 00 90 5D |  if_ne	jmp	#LR__2484
1f85c     00 26 06 F6 | 	mov	local01, #0
1f860     A7 12 02 FB | 	rdlong	arg01, fp
1f864     09 13 52 F6 | 	abs	arg01, arg01 wc
1f868     1F 2E C6 C9 |  if_b	decod	local05, #31
1f86c     00 2E 06 36 |  if_ae	mov	local05, #0
1f870     A0 A2 B0 FD | 	call	#__system___float_fromuns
1f874     17 FB 61 F5 | 	xor	result1, local05
1f878     FD 12 02 F6 | 	mov	arg01, result1
1f87c     0C 4E 05 F1 | 	add	fp, #12
1f880     A7 14 02 FB | 	rdlong	arg02, fp
1f884     0C 4E 85 F1 | 	sub	fp, #12
1f888     01 16 06 F6 | 	mov	arg03, #1
1f88c     BC AA B0 FD | 	call	#__system___float_cmp
1f890     00 FA 55 F2 | 	cmps	result1, #0 wc
1f894     00 26 26 C6 |  if_b	not	local01, #0
1f898     A7 26 62 FC | 	wrlong	local01, fp
1f89c     80 02 90 FD | 	jmp	#LR__2493
1f8a0                 | LR__2484
1f8a0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1f8a0     08 4E 05 F1 | 	add	fp, #8
1f8a4     A7 26 02 FB | 	rdlong	local01, fp
1f8a8     08 4E 85 F1 | 	sub	fp, #8
1f8ac     1C 26 0E F2 | 	cmp	local01, #28 wz
1f8b0     14 4E 05 A1 |  if_e	add	fp, #20
1f8b4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f8b8     14 4E 85 A1 |  if_e	sub	fp, #20
1f8bc     16 2B 02 A6 |  if_e	mov	local03, local04
1f8c0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f8c4     20 00 90 5D |  if_ne	jmp	#LR__2485
1f8c8     A7 28 02 FB | 	rdlong	local02, fp
1f8cc     0C 4E 05 F1 | 	add	fp, #12
1f8d0     A7 2A 02 FB | 	rdlong	local03, fp
1f8d4     0C 4E 85 F1 | 	sub	fp, #12
1f8d8     15 29 52 F2 | 	cmps	local02, local03 wc
1f8dc     13 27 A2 F1 | 	subx	local01, local01
1f8e0     A7 26 62 FC | 	wrlong	local01, fp
1f8e4     38 02 90 FD | 	jmp	#LR__2493
1f8e8                 | LR__2485
1f8e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1f8e8     08 4E 05 F1 | 	add	fp, #8
1f8ec     A7 26 02 FB | 	rdlong	local01, fp
1f8f0     08 4E 85 F1 | 	sub	fp, #8
1f8f4     1C 26 0E F2 | 	cmp	local01, #28 wz
1f8f8     14 4E 05 A1 |  if_e	add	fp, #20
1f8fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f900     14 4E 85 A1 |  if_e	sub	fp, #20
1f904     16 2B 02 A6 |  if_e	mov	local03, local04
1f908     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f90c     20 00 90 5D |  if_ne	jmp	#LR__2486
1f910     A7 28 02 FB | 	rdlong	local02, fp
1f914     0C 4E 05 F1 | 	add	fp, #12
1f918     A7 2A 02 FB | 	rdlong	local03, fp
1f91c     0C 4E 85 F1 | 	sub	fp, #12
1f920     15 29 52 F2 | 	cmps	local02, local03 wc
1f924     13 27 A2 F1 | 	subx	local01, local01
1f928     A7 26 62 FC | 	wrlong	local01, fp
1f92c     F0 01 90 FD | 	jmp	#LR__2493
1f930                 | LR__2486
1f930                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1f930     08 4E 05 F1 | 	add	fp, #8
1f934     A7 26 02 FB | 	rdlong	local01, fp
1f938     08 4E 85 F1 | 	sub	fp, #8
1f93c     1D 26 0E F2 | 	cmp	local01, #29 wz
1f940     14 4E 05 A1 |  if_e	add	fp, #20
1f944     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f948     14 4E 85 A1 |  if_e	sub	fp, #20
1f94c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f950     34 00 90 5D |  if_ne	jmp	#LR__2487
1f954     00 26 06 F6 | 	mov	local01, #0
1f958     A7 12 02 FB | 	rdlong	arg01, fp
1f95c     B4 A1 B0 FD | 	call	#__system___float_fromuns
1f960     FD 12 02 F6 | 	mov	arg01, result1
1f964     0C 4E 05 F1 | 	add	fp, #12
1f968     A7 14 02 FB | 	rdlong	arg02, fp
1f96c     0C 4E 85 F1 | 	sub	fp, #12
1f970     01 16 06 F6 | 	mov	arg03, #1
1f974     D4 A9 B0 FD | 	call	#__system___float_cmp
1f978     00 FA 55 F2 | 	cmps	result1, #0 wc
1f97c     00 26 26 C6 |  if_b	not	local01, #0
1f980     A7 26 62 FC | 	wrlong	local01, fp
1f984     98 01 90 FD | 	jmp	#LR__2493
1f988                 | LR__2487
1f988                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1f988     08 4E 05 F1 | 	add	fp, #8
1f98c     A7 26 02 FB | 	rdlong	local01, fp
1f990     08 4E 85 F1 | 	sub	fp, #8
1f994     1D 26 0E F2 | 	cmp	local01, #29 wz
1f998     14 4E 05 A1 |  if_e	add	fp, #20
1f99c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f9a0     14 4E 85 A1 |  if_e	sub	fp, #20
1f9a4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f9a8     20 00 90 5D |  if_ne	jmp	#LR__2488
1f9ac     A7 28 02 FB | 	rdlong	local02, fp
1f9b0     0C 4E 05 F1 | 	add	fp, #12
1f9b4     A7 2A 02 FB | 	rdlong	local03, fp
1f9b8     0C 4E 85 F1 | 	sub	fp, #12
1f9bc     15 29 52 F2 | 	cmps	local02, local03 wc
1f9c0     13 27 A2 F1 | 	subx	local01, local01
1f9c4     A7 26 62 FC | 	wrlong	local01, fp
1f9c8     54 01 90 FD | 	jmp	#LR__2493
1f9cc                 | LR__2488
1f9cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1f9cc     08 4E 05 F1 | 	add	fp, #8
1f9d0     A7 26 02 FB | 	rdlong	local01, fp
1f9d4     08 4E 85 F1 | 	sub	fp, #8
1f9d8     1D 26 0E F2 | 	cmp	local01, #29 wz
1f9dc     14 4E 05 A1 |  if_e	add	fp, #20
1f9e0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f9e4     14 4E 85 A1 |  if_e	sub	fp, #20
1f9e8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f9ec     20 00 90 5D |  if_ne	jmp	#LR__2489
1f9f0     A7 28 02 FB | 	rdlong	local02, fp
1f9f4     0C 4E 05 F1 | 	add	fp, #12
1f9f8     A7 2A 02 FB | 	rdlong	local03, fp
1f9fc     0C 4E 85 F1 | 	sub	fp, #12
1fa00     15 29 12 F2 | 	cmp	local02, local03 wc
1fa04     13 27 A2 F1 | 	subx	local01, local01
1fa08     A7 26 62 FC | 	wrlong	local01, fp
1fa0c     10 01 90 FD | 	jmp	#LR__2493
1fa10                 | LR__2489
1fa10                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1fa10     08 4E 05 F1 | 	add	fp, #8
1fa14     A7 26 02 FB | 	rdlong	local01, fp
1fa18     08 4E 85 F1 | 	sub	fp, #8
1fa1c     2B 26 0E F2 | 	cmp	local01, #43 wz
1fa20     14 4E 05 A1 |  if_e	add	fp, #20
1fa24     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fa28     14 4E 85 A1 |  if_e	sub	fp, #20
1fa2c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1fa30     30 00 90 5D |  if_ne	jmp	#LR__2490
1fa34     00 26 06 F6 | 	mov	local01, #0
1fa38     A7 12 02 FB | 	rdlong	arg01, fp
1fa3c     40 DE BE FD | 	call	#_convertstring
1fa40     FD 12 02 F6 | 	mov	arg01, result1
1fa44     0C 4E 05 F1 | 	add	fp, #12
1fa48     A7 14 02 FB | 	rdlong	arg02, fp
1fa4c     0C 4E 85 F1 | 	sub	fp, #12
1fa50     70 76 B0 FD | 	call	#__system___string_cmp
1fa54     00 FA 55 F2 | 	cmps	result1, #0 wc
1fa58     00 26 26 C6 |  if_b	not	local01, #0
1fa5c     A7 26 62 FC | 	wrlong	local01, fp
1fa60     BC 00 90 FD | 	jmp	#LR__2493
1fa64                 | LR__2490
1fa64                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1fa64     08 4E 05 F1 | 	add	fp, #8
1fa68     A7 26 02 FB | 	rdlong	local01, fp
1fa6c     08 4E 85 F1 | 	sub	fp, #8
1fa70     1F 26 0E F2 | 	cmp	local01, #31 wz
1fa74     14 4E 05 A1 |  if_e	add	fp, #20
1fa78     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fa7c     14 4E 85 A1 |  if_e	sub	fp, #20
1fa80     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1fa84     34 00 90 5D |  if_ne	jmp	#LR__2491
1fa88     00 26 06 F6 | 	mov	local01, #0
1fa8c     A7 28 02 FB | 	rdlong	local02, fp
1fa90     0C 4E 05 F1 | 	add	fp, #12
1fa94     A7 12 02 FB | 	rdlong	arg01, fp
1fa98     0C 4E 85 F1 | 	sub	fp, #12
1fa9c     E0 DD BE FD | 	call	#_convertstring
1faa0     FD 14 02 F6 | 	mov	arg02, result1
1faa4     14 13 02 F6 | 	mov	arg01, local02
1faa8     18 76 B0 FD | 	call	#__system___string_cmp
1faac     00 FA 55 F2 | 	cmps	result1, #0 wc
1fab0     00 26 26 C6 |  if_b	not	local01, #0
1fab4     A7 26 62 FC | 	wrlong	local01, fp
1fab8     64 00 90 FD | 	jmp	#LR__2493
1fabc                 | LR__2491
1fabc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1fabc     08 4E 05 F1 | 	add	fp, #8
1fac0     A7 26 02 FB | 	rdlong	local01, fp
1fac4     08 4E 85 F1 | 	sub	fp, #8
1fac8     2B 26 0E F2 | 	cmp	local01, #43 wz
1facc     14 4E 05 A1 |  if_e	add	fp, #20
1fad0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fad4     14 4E 85 A1 |  if_e	sub	fp, #20
1fad8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1fadc     3C 00 90 5D |  if_ne	jmp	#LR__2492
1fae0     00 26 06 F6 | 	mov	local01, #0
1fae4     A7 12 02 FB | 	rdlong	arg01, fp
1fae8     94 DD BE FD | 	call	#_convertstring
1faec     FD 28 02 F6 | 	mov	local02, result1
1faf0     0C 4E 05 F1 | 	add	fp, #12
1faf4     A7 12 02 FB | 	rdlong	arg01, fp
1faf8     0C 4E 85 F1 | 	sub	fp, #12
1fafc     80 DD BE FD | 	call	#_convertstring
1fb00     FD 14 02 F6 | 	mov	arg02, result1
1fb04     14 13 02 F6 | 	mov	arg01, local02
1fb08     B8 75 B0 FD | 	call	#__system___string_cmp
1fb0c     00 FA 55 F2 | 	cmps	result1, #0 wc
1fb10     00 26 26 C6 |  if_b	not	local01, #0
1fb14     A7 26 62 FC | 	wrlong	local01, fp
1fb18     04 00 90 FD | 	jmp	#LR__2493
1fb1c                 | LR__2492
1fb1c     A7 00 68 FC | 	wrlong	#0, fp
1fb20                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1fb20                 | LR__2493
1fb20     08 4E 05 F1 | 	add	fp, #8
1fb24     A7 38 68 FC | 	wrlong	#28, fp
1fb28     08 4E 85 F1 | 	sub	fp, #8
1fb2c     A7 12 02 F6 | 	mov	arg01, fp
1fb30     6C DC BE FD | 	call	#_push
1fb34     A7 F0 03 F6 | 	mov	ptra, fp
1fb38     B2 00 A0 FD | 	call	#popregs_
1fb3c                 | _do_lt_ret
1fb3c     2D 00 64 FD | 	ret
1fb40                 | 
1fb40                 | ' 
1fb40                 | ' '--------------------------------- minus (-)
1fb40                 | ' 
1fb40                 | ' sub do_minus
1fb40                 | _do_minus
1fb40     05 4A 05 F6 | 	mov	COUNT_, #5
1fb44     A8 00 A0 FD | 	call	#pushregs_
1fb48     18 F0 07 F1 | 	add	ptra, #24
1fb4c     B8 DB BE FD | 	call	#_pop
1fb50     FD 26 02 F6 | 	mov	local01, result1
1fb54     FE 28 02 F6 | 	mov	local02, result2
1fb58     FF 2A 02 F6 | 	mov	local03, result3
1fb5c     0C 4E 05 F1 | 	add	fp, #12
1fb60     A7 26 62 FC | 	wrlong	local01, fp
1fb64     04 4E 05 F1 | 	add	fp, #4
1fb68     A7 28 62 FC | 	wrlong	local02, fp
1fb6c     04 4E 05 F1 | 	add	fp, #4
1fb70     A7 2A 62 FC | 	wrlong	local03, fp
1fb74     14 4E 85 F1 | 	sub	fp, #20
1fb78     8C DB BE FD | 	call	#_pop
1fb7c     FF 2A 02 F6 | 	mov	local03, result3
1fb80     A7 FA 61 FC | 	wrlong	result1, fp
1fb84     04 4E 05 F1 | 	add	fp, #4
1fb88     A7 FC 61 FC | 	wrlong	result2, fp
1fb8c     04 4E 05 F1 | 	add	fp, #4
1fb90     A7 2A 62 FC | 	wrlong	local03, fp
1fb94                 | ' 
1fb94                 | ' t2=pop()
1fb94                 | ' t1=pop()
1fb94                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1fb94     08 4E 85 F1 | 	sub	fp, #8
1fb98     1D 2A 0E F2 | 	cmp	local03, #29 wz
1fb9c     14 4E 05 A1 |  if_e	add	fp, #20
1fba0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fba4     14 4E 85 A1 |  if_e	sub	fp, #20
1fba8     16 2B 02 A6 |  if_e	mov	local03, local04
1fbac     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fbb0     5C 00 90 5D |  if_ne	jmp	#LR__2501
1fbb4                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1fbb4     0C 4E 05 F1 | 	add	fp, #12
1fbb8     A7 26 02 FB | 	rdlong	local01, fp
1fbbc     0C 4E 85 F1 | 	sub	fp, #12
1fbc0     A7 2A 02 FB | 	rdlong	local03, fp
1fbc4     15 27 12 F2 | 	cmp	local01, local03 wc
1fbc8     1C 00 90 3D |  if_ae	jmp	#LR__2500
1fbcc     A7 26 02 FB | 	rdlong	local01, fp
1fbd0     0C 4E 05 F1 | 	add	fp, #12
1fbd4     A7 28 02 FB | 	rdlong	local02, fp
1fbd8     0C 4E 85 F1 | 	sub	fp, #12
1fbdc     14 27 82 F1 | 	sub	local01, local02
1fbe0     A7 26 62 FC | 	wrlong	local01, fp
1fbe4     F4 02 90 FD | 	jmp	#LR__2510
1fbe8                 | LR__2500
1fbe8     A7 26 02 FB | 	rdlong	local01, fp
1fbec     0C 4E 05 F1 | 	add	fp, #12
1fbf0     A7 28 02 FB | 	rdlong	local02, fp
1fbf4     0C 4E 85 F1 | 	sub	fp, #12
1fbf8     14 27 82 F1 | 	sub	local01, local02
1fbfc     A7 26 62 FC | 	wrlong	local01, fp
1fc00     08 4E 05 F1 | 	add	fp, #8
1fc04     A7 38 68 FC | 	wrlong	#28, fp
1fc08     08 4E 85 F1 | 	sub	fp, #8
1fc0c     CC 02 90 FD | 	jmp	#LR__2510
1fc10                 | LR__2501
1fc10                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1fc10     08 4E 05 F1 | 	add	fp, #8
1fc14     A7 26 02 FB | 	rdlong	local01, fp
1fc18     08 4E 85 F1 | 	sub	fp, #8
1fc1c     1D 26 0E F2 | 	cmp	local01, #29 wz
1fc20     14 4E 05 A1 |  if_e	add	fp, #20
1fc24     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fc28     14 4E 85 A1 |  if_e	sub	fp, #20
1fc2c     16 2B 02 A6 |  if_e	mov	local03, local04
1fc30     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fc34     28 00 90 5D |  if_ne	jmp	#LR__2502
1fc38     A7 26 02 FB | 	rdlong	local01, fp
1fc3c     0C 4E 05 F1 | 	add	fp, #12
1fc40     A7 28 02 FB | 	rdlong	local02, fp
1fc44     0C 4E 85 F1 | 	sub	fp, #12
1fc48     14 27 82 F1 | 	sub	local01, local02
1fc4c     A7 26 62 FC | 	wrlong	local01, fp
1fc50     08 4E 05 F1 | 	add	fp, #8
1fc54     A7 38 68 FC | 	wrlong	#28, fp
1fc58     08 4E 85 F1 | 	sub	fp, #8
1fc5c     7C 02 90 FD | 	jmp	#LR__2510
1fc60                 | LR__2502
1fc60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1fc60     08 4E 05 F1 | 	add	fp, #8
1fc64     A7 26 02 FB | 	rdlong	local01, fp
1fc68     08 4E 85 F1 | 	sub	fp, #8
1fc6c     1D 26 0E F2 | 	cmp	local01, #29 wz
1fc70     14 4E 05 A1 |  if_e	add	fp, #20
1fc74     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fc78     14 4E 85 A1 |  if_e	sub	fp, #20
1fc7c     16 2B 02 A6 |  if_e	mov	local03, local04
1fc80     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fc84     34 00 90 5D |  if_ne	jmp	#LR__2503
1fc88     A7 12 02 FB | 	rdlong	arg01, fp
1fc8c     84 9E B0 FD | 	call	#__system___float_fromuns
1fc90     FD 12 02 F6 | 	mov	arg01, result1
1fc94     0C 4E 05 F1 | 	add	fp, #12
1fc98     A7 14 02 FB | 	rdlong	arg02, fp
1fc9c     0C 4E 85 F1 | 	sub	fp, #12
1fca0     1F 14 E6 F4 | 	bitnot	arg02, #31
1fca4     A0 9E B0 FD | 	call	#__system___float_add
1fca8     A7 FA 61 FC | 	wrlong	result1, fp
1fcac     08 4E 05 F1 | 	add	fp, #8
1fcb0     A7 3C 68 FC | 	wrlong	#30, fp
1fcb4     08 4E 85 F1 | 	sub	fp, #8
1fcb8     20 02 90 FD | 	jmp	#LR__2510
1fcbc                 | LR__2503
1fcbc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1fcbc     08 4E 05 F1 | 	add	fp, #8
1fcc0     A7 26 02 FB | 	rdlong	local01, fp
1fcc4     08 4E 85 F1 | 	sub	fp, #8
1fcc8     1C 26 0E F2 | 	cmp	local01, #28 wz
1fccc     14 4E 05 A1 |  if_e	add	fp, #20
1fcd0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fcd4     14 4E 85 A1 |  if_e	sub	fp, #20
1fcd8     16 2B 02 A6 |  if_e	mov	local03, local04
1fcdc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fce0     1C 00 90 5D |  if_ne	jmp	#LR__2504
1fce4     A7 26 02 FB | 	rdlong	local01, fp
1fce8     0C 4E 05 F1 | 	add	fp, #12
1fcec     A7 28 02 FB | 	rdlong	local02, fp
1fcf0     0C 4E 85 F1 | 	sub	fp, #12
1fcf4     14 27 82 F1 | 	sub	local01, local02
1fcf8     A7 26 62 FC | 	wrlong	local01, fp
1fcfc     DC 01 90 FD | 	jmp	#LR__2510
1fd00                 | LR__2504
1fd00                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1fd00     08 4E 05 F1 | 	add	fp, #8
1fd04     A7 26 02 FB | 	rdlong	local01, fp
1fd08     08 4E 85 F1 | 	sub	fp, #8
1fd0c     1C 26 0E F2 | 	cmp	local01, #28 wz
1fd10     14 4E 05 A1 |  if_e	add	fp, #20
1fd14     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fd18     14 4E 85 A1 |  if_e	sub	fp, #20
1fd1c     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1fd20     1C 00 90 5D |  if_ne	jmp	#LR__2505
1fd24     A7 26 02 FB | 	rdlong	local01, fp
1fd28     0C 4E 05 F1 | 	add	fp, #12
1fd2c     A7 28 02 FB | 	rdlong	local02, fp
1fd30     0C 4E 85 F1 | 	sub	fp, #12
1fd34     14 27 82 F1 | 	sub	local01, local02
1fd38     A7 26 62 FC | 	wrlong	local01, fp
1fd3c     9C 01 90 FD | 	jmp	#LR__2510
1fd40                 | LR__2505
1fd40                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1fd40     08 4E 05 F1 | 	add	fp, #8
1fd44     A7 26 02 FB | 	rdlong	local01, fp
1fd48     08 4E 85 F1 | 	sub	fp, #8
1fd4c     1C 26 0E F2 | 	cmp	local01, #28 wz
1fd50     14 4E 05 A1 |  if_e	add	fp, #20
1fd54     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fd58     14 4E 85 A1 |  if_e	sub	fp, #20
1fd5c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fd60     44 00 90 5D |  if_ne	jmp	#LR__2506
1fd64     A7 12 02 FB | 	rdlong	arg01, fp
1fd68     09 13 52 F6 | 	abs	arg01, arg01 wc
1fd6c     1F 2E C6 C9 |  if_b	decod	local05, #31
1fd70     00 2E 06 36 |  if_ae	mov	local05, #0
1fd74     9C 9D B0 FD | 	call	#__system___float_fromuns
1fd78     17 FB 61 F5 | 	xor	result1, local05
1fd7c     FD 12 02 F6 | 	mov	arg01, result1
1fd80     0C 4E 05 F1 | 	add	fp, #12
1fd84     A7 14 02 FB | 	rdlong	arg02, fp
1fd88     0C 4E 85 F1 | 	sub	fp, #12
1fd8c     1F 14 E6 F4 | 	bitnot	arg02, #31
1fd90     B4 9D B0 FD | 	call	#__system___float_add
1fd94     A7 FA 61 FC | 	wrlong	result1, fp
1fd98     08 4E 05 F1 | 	add	fp, #8
1fd9c     A7 3C 68 FC | 	wrlong	#30, fp
1fda0     08 4E 85 F1 | 	sub	fp, #8
1fda4     34 01 90 FD | 	jmp	#LR__2510
1fda8                 | LR__2506
1fda8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1fda8     08 4E 05 F1 | 	add	fp, #8
1fdac     A7 26 02 FB | 	rdlong	local01, fp
1fdb0     08 4E 85 F1 | 	sub	fp, #8
1fdb4     1E 26 0E F2 | 	cmp	local01, #30 wz
1fdb8     14 4E 05 A1 |  if_e	add	fp, #20
1fdbc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fdc0     14 4E 85 A1 |  if_e	sub	fp, #20
1fdc4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fdc8     2C 00 90 5D |  if_ne	jmp	#LR__2507
1fdcc     A7 26 02 FB | 	rdlong	local01, fp
1fdd0     0C 4E 05 F1 | 	add	fp, #12
1fdd4     A7 12 02 FB | 	rdlong	arg01, fp
1fdd8     0C 4E 85 F1 | 	sub	fp, #12
1fddc     34 9D B0 FD | 	call	#__system___float_fromuns
1fde0     FD 14 02 F6 | 	mov	arg02, result1
1fde4     13 13 02 F6 | 	mov	arg01, local01
1fde8     1F 14 E6 F4 | 	bitnot	arg02, #31
1fdec     58 9D B0 FD | 	call	#__system___float_add
1fdf0     A7 FA 61 FC | 	wrlong	result1, fp
1fdf4     E4 00 90 FD | 	jmp	#LR__2510
1fdf8                 | LR__2507
1fdf8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1fdf8     08 4E 05 F1 | 	add	fp, #8
1fdfc     A7 26 02 FB | 	rdlong	local01, fp
1fe00     08 4E 85 F1 | 	sub	fp, #8
1fe04     1E 26 0E F2 | 	cmp	local01, #30 wz
1fe08     14 4E 05 A1 |  if_e	add	fp, #20
1fe0c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fe10     14 4E 85 A1 |  if_e	sub	fp, #20
1fe14     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fe18     3C 00 90 5D |  if_ne	jmp	#LR__2508
1fe1c     A7 26 02 FB | 	rdlong	local01, fp
1fe20     0C 4E 05 F1 | 	add	fp, #12
1fe24     A7 12 02 FB | 	rdlong	arg01, fp
1fe28     0C 4E 85 F1 | 	sub	fp, #12
1fe2c     09 13 52 F6 | 	abs	arg01, arg01 wc
1fe30     1F 2E C6 C9 |  if_b	decod	local05, #31
1fe34     00 2E 06 36 |  if_ae	mov	local05, #0
1fe38     D8 9C B0 FD | 	call	#__system___float_fromuns
1fe3c     17 FB 61 F5 | 	xor	result1, local05
1fe40     FD 14 02 F6 | 	mov	arg02, result1
1fe44     13 13 02 F6 | 	mov	arg01, local01
1fe48     1F 14 E6 F4 | 	bitnot	arg02, #31
1fe4c     F8 9C B0 FD | 	call	#__system___float_add
1fe50     A7 FA 61 FC | 	wrlong	result1, fp
1fe54     84 00 90 FD | 	jmp	#LR__2510
1fe58                 | LR__2508
1fe58                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1fe58     08 4E 05 F1 | 	add	fp, #8
1fe5c     A7 26 02 FB | 	rdlong	local01, fp
1fe60     08 4E 85 F1 | 	sub	fp, #8
1fe64     1E 26 0E F2 | 	cmp	local01, #30 wz
1fe68     14 4E 05 A1 |  if_e	add	fp, #20
1fe6c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fe70     14 4E 85 A1 |  if_e	sub	fp, #20
1fe74     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fe78     20 00 90 5D |  if_ne	jmp	#LR__2509
1fe7c     A7 12 02 FB | 	rdlong	arg01, fp
1fe80     0C 4E 05 F1 | 	add	fp, #12
1fe84     A7 14 02 FB | 	rdlong	arg02, fp
1fe88     0C 4E 85 F1 | 	sub	fp, #12
1fe8c     1F 14 E6 F4 | 	bitnot	arg02, #31
1fe90     B4 9C B0 FD | 	call	#__system___float_add
1fe94     A7 FA 61 FC | 	wrlong	result1, fp
1fe98     40 00 90 FD | 	jmp	#LR__2510
1fe9c                 | LR__2509
1fe9c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1fe9c     08 4E 05 F1 | 	add	fp, #8
1fea0     A7 26 02 FB | 	rdlong	local01, fp
1fea4     08 4E 85 F1 | 	sub	fp, #8
1fea8     1F 26 0E F2 | 	cmp	local01, #31 wz
1feac     14 4E 05 51 |  if_ne	add	fp, #20
1feb0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1feb4     14 4E 85 51 |  if_ne	sub	fp, #20
1feb8     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1febc     A7 06 68 AC |  if_e	wrlong	#3, fp
1fec0     08 4E 05 A1 |  if_e	add	fp, #8
1fec4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1fec8     08 4E 85 A1 |  if_e	sub	fp, #8
1fecc     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1fed0     08 4E 05 51 |  if_ne	add	fp, #8
1fed4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1fed8     08 4E 85 51 |  if_ne	sub	fp, #8
1fedc                 | LR__2510
1fedc     A7 12 02 F6 | 	mov	arg01, fp
1fee0     BC D8 BE FD | 	call	#_push
1fee4     A7 F0 03 F6 | 	mov	ptra, fp
1fee8     B2 00 A0 FD | 	call	#popregs_
1feec                 | _do_minus_ret
1feec     2D 00 64 FD | 	ret
1fef0                 | 
1fef0                 | ' 
1fef0                 | ' '--------------------------------- negative (-), one argument negative
1fef0                 | ' 
1fef0                 | ' sub do_negative
1fef0                 | _do_negative
1fef0     02 4A 05 F6 | 	mov	COUNT_, #2
1fef4     A8 00 A0 FD | 	call	#pushregs_
1fef8     0C F0 07 F1 | 	add	ptra, #12
1fefc     08 D8 BE FD | 	call	#_pop
1ff00     FF 26 02 F6 | 	mov	local01, result3
1ff04     A7 FA 61 FC | 	wrlong	result1, fp
1ff08     04 4E 05 F1 | 	add	fp, #4
1ff0c     A7 FC 61 FC | 	wrlong	result2, fp
1ff10     04 4E 05 F1 | 	add	fp, #4
1ff14     A7 26 62 FC | 	wrlong	local01, fp
1ff18                 | ' 
1ff18                 | ' t1=pop()
1ff18                 | ' if t1.result_type=result_int then 
1ff18     08 4E 85 F1 | 	sub	fp, #8
1ff1c     1C 26 0E F2 | 	cmp	local01, #28 wz
1ff20     A7 28 02 AB |  if_e	rdlong	local02, fp
1ff24     14 27 62 A6 |  if_e	neg	local01, local02
1ff28     A7 26 62 AC |  if_e	wrlong	local01, fp
1ff2c     5C 00 90 AD |  if_e	jmp	#LR__2522
1ff30     08 4E 05 F1 | 	add	fp, #8
1ff34     A7 26 02 FB | 	rdlong	local01, fp
1ff38     08 4E 85 F1 | 	sub	fp, #8
1ff3c     1D 26 0E F2 | 	cmp	local01, #29 wz
1ff40     1C 00 90 5D |  if_ne	jmp	#LR__2520
1ff44     A7 28 02 FB | 	rdlong	local02, fp
1ff48     14 27 62 F6 | 	neg	local01, local02
1ff4c     A7 26 62 FC | 	wrlong	local01, fp
1ff50     08 4E 05 F1 | 	add	fp, #8
1ff54     A7 38 68 FC | 	wrlong	#28, fp
1ff58     08 4E 85 F1 | 	sub	fp, #8
1ff5c     2C 00 90 FD | 	jmp	#LR__2521
1ff60                 | LR__2520
1ff60     08 4E 05 F1 | 	add	fp, #8
1ff64     A7 26 02 FB | 	rdlong	local01, fp
1ff68     08 4E 85 F1 | 	sub	fp, #8
1ff6c     1E 26 0E F2 | 	cmp	local01, #30 wz
1ff70     A7 FA 01 AB |  if_e	rdlong	result1, fp
1ff74     1F FA E5 A4 |  if_e	bitnot	result1, #31
1ff78     A7 FA 61 AC |  if_e	wrlong	result1, fp
1ff7c     08 4E 05 51 |  if_ne	add	fp, #8
1ff80     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1ff84     08 4E 85 51 |  if_ne	sub	fp, #8
1ff88     A7 50 68 5C |  if_ne	wrlong	#40, fp
1ff8c                 | LR__2521
1ff8c                 | LR__2522
1ff8c     A7 12 02 F6 | 	mov	arg01, fp
1ff90     0C D8 BE FD | 	call	#_push
1ff94     A7 F0 03 F6 | 	mov	ptra, fp
1ff98     B2 00 A0 FD | 	call	#popregs_
1ff9c                 | _do_negative_ret
1ff9c     2D 00 64 FD | 	ret
1ffa0                 | 
1ffa0                 | ' 
1ffa0                 | ' '--------------------------------- MOD (modulo)
1ffa0                 | ' 
1ffa0                 | ' sub do_mod 
1ffa0                 | _do_mod
1ffa0     01 4A 05 F6 | 	mov	COUNT_, #1
1ffa4     A8 00 A0 FD | 	call	#pushregs_
1ffa8     18 F0 07 F1 | 	add	ptra, #24
1ffac     58 D7 BE FD | 	call	#_pop
1ffb0     FD 92 02 F6 | 	mov	muldivb_, result1
1ffb4     FE 90 02 F6 | 	mov	muldiva_, result2
1ffb8     FF 26 02 F6 | 	mov	local01, result3
1ffbc     0C 4E 05 F1 | 	add	fp, #12
1ffc0     A7 92 62 FC | 	wrlong	muldivb_, fp
1ffc4     04 4E 05 F1 | 	add	fp, #4
1ffc8     A7 90 62 FC | 	wrlong	muldiva_, fp
1ffcc     04 4E 05 F1 | 	add	fp, #4
1ffd0     A7 26 62 FC | 	wrlong	local01, fp
1ffd4     14 4E 85 F1 | 	sub	fp, #20
1ffd8     2C D7 BE FD | 	call	#_pop
1ffdc     A7 FA 61 FC | 	wrlong	result1, fp
1ffe0     04 4E 05 F1 | 	add	fp, #4
1ffe4     A7 FC 61 FC | 	wrlong	result2, fp
1ffe8     04 4E 05 F1 | 	add	fp, #4
1ffec     A7 FE 61 FC | 	wrlong	result3, fp
1fff0                 | ' 
1fff0                 | ' t2=pop()
1fff0                 | ' t1=pop()
1fff0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1fff0     08 4E 85 F1 | 	sub	fp, #8
1fff4     1F FE 0D F2 | 	cmp	result3, #31 wz
1fff8     14 4E 05 51 |  if_ne	add	fp, #20
1fffc     A7 12 02 5B |  if_ne	rdlong	arg01, fp
20000     14 4E 85 51 |  if_ne	sub	fp, #20
20004     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
20008     A7 14 68 AC |  if_e	wrlong	#10, fp
2000c     08 4E 05 A1 |  if_e	add	fp, #8
20010     A7 FE 69 AC |  if_e	wrlong	#255, fp
20014     08 4E 85 A1 |  if_e	sub	fp, #8
20018     90 01 90 AD |  if_e	jmp	#LR__2536
2001c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
2001c     08 4E 05 F1 | 	add	fp, #8
20020     A7 92 02 FB | 	rdlong	muldivb_, fp
20024     08 4E 85 F1 | 	sub	fp, #8
20028     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
2002c     1C 00 90 5D |  if_ne	jmp	#LR__2530
20030     08 4E 05 F1 | 	add	fp, #8
20034     A7 38 68 FC | 	wrlong	#28, fp
20038     08 4E 85 F1 | 	sub	fp, #8
2003c     A7 12 02 FB | 	rdlong	arg01, fp
20040     00 14 06 F6 | 	mov	arg02, #0
20044     98 A3 B0 FD | 	call	#__system___float_tointeger
20048     A7 FA 61 FC | 	wrlong	result1, fp
2004c                 | LR__2530
2004c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
2004c     14 4E 05 F1 | 	add	fp, #20
20050     A7 92 02 FB | 	rdlong	muldivb_, fp
20054     14 4E 85 F1 | 	sub	fp, #20
20058     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
2005c     28 00 90 5D |  if_ne	jmp	#LR__2531
20060     14 4E 05 F1 | 	add	fp, #20
20064     A7 38 68 FC | 	wrlong	#28, fp
20068     08 4E 85 F1 | 	sub	fp, #8
2006c     A7 12 02 FB | 	rdlong	arg01, fp
20070     0C 4E 85 F1 | 	sub	fp, #12
20074     00 14 06 F6 | 	mov	arg02, #0
20078     64 A3 B0 FD | 	call	#__system___float_tointeger
2007c     0C 4E 05 F1 | 	add	fp, #12
20080     A7 FA 61 FC | 	wrlong	result1, fp
20084     0C 4E 85 F1 | 	sub	fp, #12
20088                 | LR__2531
20088                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
20088     08 4E 05 F1 | 	add	fp, #8
2008c     A7 92 02 FB | 	rdlong	muldivb_, fp
20090     08 4E 85 F1 | 	sub	fp, #8
20094     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
20098     14 4E 05 A1 |  if_e	add	fp, #20
2009c     A7 26 02 AB |  if_e	rdlong	local01, fp
200a0     14 4E 85 A1 |  if_e	sub	fp, #20
200a4     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
200a8     20 00 90 5D |  if_ne	jmp	#LR__2532
200ac     0C 4E 05 F1 | 	add	fp, #12
200b0     A7 26 02 FB | 	rdlong	local01, fp
200b4     0C 4E 85 F1 | 	sub	fp, #12
200b8     A7 92 02 FB | 	rdlong	muldivb_, fp
200bc     13 93 12 FD | 	qdiv	muldivb_, local01
200c0     19 26 62 FD | 	getqy	local01
200c4     A7 26 62 FC | 	wrlong	local01, fp
200c8     E0 00 90 FD | 	jmp	#LR__2536
200cc                 | LR__2532
200cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
200cc     08 4E 05 F1 | 	add	fp, #8
200d0     A7 92 02 FB | 	rdlong	muldivb_, fp
200d4     08 4E 85 F1 | 	sub	fp, #8
200d8     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
200dc     14 4E 05 A1 |  if_e	add	fp, #20
200e0     A7 26 02 AB |  if_e	rdlong	local01, fp
200e4     14 4E 85 A1 |  if_e	sub	fp, #20
200e8     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
200ec     2C 00 90 5D |  if_ne	jmp	#LR__2533
200f0     0C 4E 05 F1 | 	add	fp, #12
200f4     A7 26 02 FB | 	rdlong	local01, fp
200f8     0C 4E 85 F1 | 	sub	fp, #12
200fc     A7 92 02 FB | 	rdlong	muldivb_, fp
20100     13 93 12 FD | 	qdiv	muldivb_, local01
20104     19 26 62 FD | 	getqy	local01
20108     A7 26 62 FC | 	wrlong	local01, fp
2010c     08 4E 05 F1 | 	add	fp, #8
20110     A7 38 68 FC | 	wrlong	#28, fp
20114     08 4E 85 F1 | 	sub	fp, #8
20118     90 00 90 FD | 	jmp	#LR__2536
2011c                 | LR__2533
2011c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
2011c     08 4E 05 F1 | 	add	fp, #8
20120     A7 92 02 FB | 	rdlong	muldivb_, fp
20124     08 4E 85 F1 | 	sub	fp, #8
20128     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
2012c     14 4E 05 A1 |  if_e	add	fp, #20
20130     A7 26 02 AB |  if_e	rdlong	local01, fp
20134     14 4E 85 A1 |  if_e	sub	fp, #20
20138     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
2013c     1C 00 90 5D |  if_ne	jmp	#LR__2534
20140     A7 90 02 FB | 	rdlong	muldiva_, fp
20144     0C 4E 05 F1 | 	add	fp, #12
20148     A7 92 02 FB | 	rdlong	muldivb_, fp
2014c     0C 4E 85 F1 | 	sub	fp, #12
20150     BA 00 A0 FD | 	call	#divide_
20154     A7 90 62 FC | 	wrlong	muldiva_, fp
20158     50 00 90 FD | 	jmp	#LR__2536
2015c                 | LR__2534
2015c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
2015c     08 4E 05 F1 | 	add	fp, #8
20160     A7 92 02 FB | 	rdlong	muldivb_, fp
20164     08 4E 85 F1 | 	sub	fp, #8
20168     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
2016c     14 4E 05 A1 |  if_e	add	fp, #20
20170     A7 26 02 AB |  if_e	rdlong	local01, fp
20174     14 4E 85 A1 |  if_e	sub	fp, #20
20178     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
2017c     1C 00 90 5D |  if_ne	jmp	#LR__2535
20180     A7 90 02 FB | 	rdlong	muldiva_, fp
20184     0C 4E 05 F1 | 	add	fp, #12
20188     A7 92 02 FB | 	rdlong	muldivb_, fp
2018c     0C 4E 85 F1 | 	sub	fp, #12
20190     BA 00 A0 FD | 	call	#divide_
20194     A7 90 62 FC | 	wrlong	muldiva_, fp
20198     10 00 90 FD | 	jmp	#LR__2536
2019c                 | LR__2535
2019c     A7 16 68 FC | 	wrlong	#11, fp
201a0     08 4E 05 F1 | 	add	fp, #8
201a4     A7 FE 69 FC | 	wrlong	#255, fp
201a8     08 4E 85 F1 | 	sub	fp, #8
201ac                 | LR__2536
201ac     A7 12 02 F6 | 	mov	arg01, fp
201b0     EC D5 BE FD | 	call	#_push
201b4     A7 F0 03 F6 | 	mov	ptra, fp
201b8     B2 00 A0 FD | 	call	#popregs_
201bc                 | _do_mod_ret
201bc     2D 00 64 FD | 	ret
201c0                 | 
201c0                 | ' 
201c0                 | ' '--------------------------------- mul (*)
201c0                 | ' 
201c0                 | ' sub do_mul
201c0                 | _do_mul
201c0     05 4A 05 F6 | 	mov	COUNT_, #5
201c4     A8 00 A0 FD | 	call	#pushregs_
201c8     18 F0 07 F1 | 	add	ptra, #24
201cc     38 D5 BE FD | 	call	#_pop
201d0     FD 26 02 F6 | 	mov	local01, result1
201d4     FE 28 02 F6 | 	mov	local02, result2
201d8     FF 2A 02 F6 | 	mov	local03, result3
201dc     0C 4E 05 F1 | 	add	fp, #12
201e0     A7 26 62 FC | 	wrlong	local01, fp
201e4     04 4E 05 F1 | 	add	fp, #4
201e8     A7 28 62 FC | 	wrlong	local02, fp
201ec     04 4E 05 F1 | 	add	fp, #4
201f0     A7 2A 62 FC | 	wrlong	local03, fp
201f4     14 4E 85 F1 | 	sub	fp, #20
201f8     0C D5 BE FD | 	call	#_pop
201fc     FF 2A 02 F6 | 	mov	local03, result3
20200     A7 FA 61 FC | 	wrlong	result1, fp
20204     04 4E 05 F1 | 	add	fp, #4
20208     A7 FC 61 FC | 	wrlong	result2, fp
2020c     04 4E 05 F1 | 	add	fp, #4
20210     A7 2A 62 FC | 	wrlong	local03, fp
20214                 | ' 
20214                 | ' t2=pop()
20214                 | ' t1=pop()
20214                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
20214     08 4E 85 F1 | 	sub	fp, #8
20218     1D 2A 0E F2 | 	cmp	local03, #29 wz
2021c     14 4E 05 A1 |  if_e	add	fp, #20
20220     A7 2C 02 AB |  if_e	rdlong	local04, fp
20224     14 4E 85 A1 |  if_e	sub	fp, #20
20228     16 2B 02 A6 |  if_e	mov	local03, local04
2022c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20230     20 00 90 5D |  if_ne	jmp	#LR__2540
20234     A7 28 02 FB | 	rdlong	local02, fp
20238     0C 4E 05 F1 | 	add	fp, #12
2023c     A7 2A 02 FB | 	rdlong	local03, fp
20240     15 29 02 FD | 	qmul	local02, local03
20244     0C 4E 85 F1 | 	sub	fp, #12
20248     18 26 62 FD | 	getqx	local01
2024c     A7 26 62 FC | 	wrlong	local01, fp
20250     C4 02 90 FD | 	jmp	#LR__2549
20254                 | LR__2540
20254                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
20254     08 4E 05 F1 | 	add	fp, #8
20258     A7 26 02 FB | 	rdlong	local01, fp
2025c     08 4E 85 F1 | 	sub	fp, #8
20260     1D 26 0E F2 | 	cmp	local01, #29 wz
20264     14 4E 05 A1 |  if_e	add	fp, #20
20268     A7 2C 02 AB |  if_e	rdlong	local04, fp
2026c     14 4E 85 A1 |  if_e	sub	fp, #20
20270     16 2B 02 A6 |  if_e	mov	local03, local04
20274     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20278     2C 00 90 5D |  if_ne	jmp	#LR__2541
2027c     A7 28 02 FB | 	rdlong	local02, fp
20280     0C 4E 05 F1 | 	add	fp, #12
20284     A7 2A 02 FB | 	rdlong	local03, fp
20288     15 29 02 FD | 	qmul	local02, local03
2028c     0C 4E 85 F1 | 	sub	fp, #12
20290     18 26 62 FD | 	getqx	local01
20294     A7 26 62 FC | 	wrlong	local01, fp
20298     08 4E 05 F1 | 	add	fp, #8
2029c     A7 38 68 FC | 	wrlong	#28, fp
202a0     08 4E 85 F1 | 	sub	fp, #8
202a4     70 02 90 FD | 	jmp	#LR__2549
202a8                 | LR__2541
202a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
202a8     08 4E 05 F1 | 	add	fp, #8
202ac     A7 26 02 FB | 	rdlong	local01, fp
202b0     08 4E 85 F1 | 	sub	fp, #8
202b4     1D 26 0E F2 | 	cmp	local01, #29 wz
202b8     14 4E 05 A1 |  if_e	add	fp, #20
202bc     A7 2C 02 AB |  if_e	rdlong	local04, fp
202c0     14 4E 85 A1 |  if_e	sub	fp, #20
202c4     16 2B 02 A6 |  if_e	mov	local03, local04
202c8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
202cc     30 00 90 5D |  if_ne	jmp	#LR__2542
202d0     A7 12 02 FB | 	rdlong	arg01, fp
202d4     3C 98 B0 FD | 	call	#__system___float_fromuns
202d8     FD 12 02 F6 | 	mov	arg01, result1
202dc     0C 4E 05 F1 | 	add	fp, #12
202e0     A7 14 02 FB | 	rdlong	arg02, fp
202e4     0C 4E 85 F1 | 	sub	fp, #12
202e8     2C 9C B0 FD | 	call	#__system___float_mul
202ec     A7 FA 61 FC | 	wrlong	result1, fp
202f0     08 4E 05 F1 | 	add	fp, #8
202f4     A7 3C 68 FC | 	wrlong	#30, fp
202f8     08 4E 85 F1 | 	sub	fp, #8
202fc     18 02 90 FD | 	jmp	#LR__2549
20300                 | LR__2542
20300                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
20300     08 4E 05 F1 | 	add	fp, #8
20304     A7 26 02 FB | 	rdlong	local01, fp
20308     08 4E 85 F1 | 	sub	fp, #8
2030c     1C 26 0E F2 | 	cmp	local01, #28 wz
20310     14 4E 05 A1 |  if_e	add	fp, #20
20314     A7 2C 02 AB |  if_e	rdlong	local04, fp
20318     14 4E 85 A1 |  if_e	sub	fp, #20
2031c     16 2B 02 A6 |  if_e	mov	local03, local04
20320     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20324     20 00 90 5D |  if_ne	jmp	#LR__2543
20328     A7 28 02 FB | 	rdlong	local02, fp
2032c     0C 4E 05 F1 | 	add	fp, #12
20330     A7 2A 02 FB | 	rdlong	local03, fp
20334     15 29 02 FD | 	qmul	local02, local03
20338     0C 4E 85 F1 | 	sub	fp, #12
2033c     18 26 62 FD | 	getqx	local01
20340     A7 26 62 FC | 	wrlong	local01, fp
20344     D0 01 90 FD | 	jmp	#LR__2549
20348                 | LR__2543
20348                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
20348     08 4E 05 F1 | 	add	fp, #8
2034c     A7 26 02 FB | 	rdlong	local01, fp
20350     08 4E 85 F1 | 	sub	fp, #8
20354     1C 26 0E F2 | 	cmp	local01, #28 wz
20358     14 4E 05 A1 |  if_e	add	fp, #20
2035c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20360     14 4E 85 A1 |  if_e	sub	fp, #20
20364     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
20368     20 00 90 5D |  if_ne	jmp	#LR__2544
2036c     A7 28 02 FB | 	rdlong	local02, fp
20370     0C 4E 05 F1 | 	add	fp, #12
20374     A7 2A 02 FB | 	rdlong	local03, fp
20378     15 29 02 FD | 	qmul	local02, local03
2037c     0C 4E 85 F1 | 	sub	fp, #12
20380     18 26 62 FD | 	getqx	local01
20384     A7 26 62 FC | 	wrlong	local01, fp
20388     8C 01 90 FD | 	jmp	#LR__2549
2038c                 | LR__2544
2038c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
2038c     08 4E 05 F1 | 	add	fp, #8
20390     A7 26 02 FB | 	rdlong	local01, fp
20394     08 4E 85 F1 | 	sub	fp, #8
20398     1C 26 0E F2 | 	cmp	local01, #28 wz
2039c     14 4E 05 A1 |  if_e	add	fp, #20
203a0     A7 2A 02 AB |  if_e	rdlong	local03, fp
203a4     14 4E 85 A1 |  if_e	sub	fp, #20
203a8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
203ac     40 00 90 5D |  if_ne	jmp	#LR__2545
203b0     A7 12 02 FB | 	rdlong	arg01, fp
203b4     09 13 52 F6 | 	abs	arg01, arg01 wc
203b8     1F 2E C6 C9 |  if_b	decod	local05, #31
203bc     00 2E 06 36 |  if_ae	mov	local05, #0
203c0     50 97 B0 FD | 	call	#__system___float_fromuns
203c4     17 FB 61 F5 | 	xor	result1, local05
203c8     FD 12 02 F6 | 	mov	arg01, result1
203cc     0C 4E 05 F1 | 	add	fp, #12
203d0     A7 14 02 FB | 	rdlong	arg02, fp
203d4     0C 4E 85 F1 | 	sub	fp, #12
203d8     3C 9B B0 FD | 	call	#__system___float_mul
203dc     A7 FA 61 FC | 	wrlong	result1, fp
203e0     08 4E 05 F1 | 	add	fp, #8
203e4     A7 3C 68 FC | 	wrlong	#30, fp
203e8     08 4E 85 F1 | 	sub	fp, #8
203ec     28 01 90 FD | 	jmp	#LR__2549
203f0                 | LR__2545
203f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
203f0     08 4E 05 F1 | 	add	fp, #8
203f4     A7 26 02 FB | 	rdlong	local01, fp
203f8     08 4E 85 F1 | 	sub	fp, #8
203fc     1E 26 0E F2 | 	cmp	local01, #30 wz
20400     14 4E 05 A1 |  if_e	add	fp, #20
20404     A7 2A 02 AB |  if_e	rdlong	local03, fp
20408     14 4E 85 A1 |  if_e	sub	fp, #20
2040c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20410     28 00 90 5D |  if_ne	jmp	#LR__2546
20414     A7 26 02 FB | 	rdlong	local01, fp
20418     0C 4E 05 F1 | 	add	fp, #12
2041c     A7 12 02 FB | 	rdlong	arg01, fp
20420     0C 4E 85 F1 | 	sub	fp, #12
20424     EC 96 B0 FD | 	call	#__system___float_fromuns
20428     FD 14 02 F6 | 	mov	arg02, result1
2042c     13 13 02 F6 | 	mov	arg01, local01
20430     E4 9A B0 FD | 	call	#__system___float_mul
20434     A7 FA 61 FC | 	wrlong	result1, fp
20438     DC 00 90 FD | 	jmp	#LR__2549
2043c                 | LR__2546
2043c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
2043c     08 4E 05 F1 | 	add	fp, #8
20440     A7 26 02 FB | 	rdlong	local01, fp
20444     08 4E 85 F1 | 	sub	fp, #8
20448     1E 26 0E F2 | 	cmp	local01, #30 wz
2044c     14 4E 05 A1 |  if_e	add	fp, #20
20450     A7 2A 02 AB |  if_e	rdlong	local03, fp
20454     14 4E 85 A1 |  if_e	sub	fp, #20
20458     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
2045c     38 00 90 5D |  if_ne	jmp	#LR__2547
20460     A7 26 02 FB | 	rdlong	local01, fp
20464     0C 4E 05 F1 | 	add	fp, #12
20468     A7 12 02 FB | 	rdlong	arg01, fp
2046c     0C 4E 85 F1 | 	sub	fp, #12
20470     09 13 52 F6 | 	abs	arg01, arg01 wc
20474     1F 2E C6 C9 |  if_b	decod	local05, #31
20478     00 2E 06 36 |  if_ae	mov	local05, #0
2047c     94 96 B0 FD | 	call	#__system___float_fromuns
20480     17 FB 61 F5 | 	xor	result1, local05
20484     FD 14 02 F6 | 	mov	arg02, result1
20488     13 13 02 F6 | 	mov	arg01, local01
2048c     88 9A B0 FD | 	call	#__system___float_mul
20490     A7 FA 61 FC | 	wrlong	result1, fp
20494     80 00 90 FD | 	jmp	#LR__2549
20498                 | LR__2547
20498                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
20498     08 4E 05 F1 | 	add	fp, #8
2049c     A7 26 02 FB | 	rdlong	local01, fp
204a0     08 4E 85 F1 | 	sub	fp, #8
204a4     1E 26 0E F2 | 	cmp	local01, #30 wz
204a8     14 4E 05 A1 |  if_e	add	fp, #20
204ac     A7 2A 02 AB |  if_e	rdlong	local03, fp
204b0     14 4E 85 A1 |  if_e	sub	fp, #20
204b4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
204b8     1C 00 90 5D |  if_ne	jmp	#LR__2548
204bc     A7 12 02 FB | 	rdlong	arg01, fp
204c0     0C 4E 05 F1 | 	add	fp, #12
204c4     A7 14 02 FB | 	rdlong	arg02, fp
204c8     0C 4E 85 F1 | 	sub	fp, #12
204cc     48 9A B0 FD | 	call	#__system___float_mul
204d0     A7 FA 61 FC | 	wrlong	result1, fp
204d4     40 00 90 FD | 	jmp	#LR__2549
204d8                 | LR__2548
204d8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
204d8     08 4E 05 F1 | 	add	fp, #8
204dc     A7 26 02 FB | 	rdlong	local01, fp
204e0     08 4E 85 F1 | 	sub	fp, #8
204e4     1F 26 0E F2 | 	cmp	local01, #31 wz
204e8     14 4E 05 51 |  if_ne	add	fp, #20
204ec     A7 2A 02 5B |  if_ne	rdlong	local03, fp
204f0     14 4E 85 51 |  if_ne	sub	fp, #20
204f4     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
204f8     A7 10 68 AC |  if_e	wrlong	#8, fp
204fc     08 4E 05 A1 |  if_e	add	fp, #8
20500     A7 FE 69 AC |  if_e	wrlong	#255, fp
20504     08 4E 85 A1 |  if_e	sub	fp, #8
20508     A7 12 68 5C |  if_ne	wrlong	#9, fp
2050c     08 4E 05 51 |  if_ne	add	fp, #8
20510     A7 FE 69 5C |  if_ne	wrlong	#255, fp
20514     08 4E 85 51 |  if_ne	sub	fp, #8
20518                 | LR__2549
20518     A7 12 02 F6 | 	mov	arg01, fp
2051c     80 D2 BE FD | 	call	#_push
20520     A7 F0 03 F6 | 	mov	ptra, fp
20524     B2 00 A0 FD | 	call	#popregs_
20528                 | _do_mul_ret
20528     2D 00 64 FD | 	ret
2052c                 | 
2052c                 | ' 
2052c                 | ' '--------------------------------- not equal (<>)
2052c                 | ' 
2052c                 | ' sub do_ne
2052c                 | _do_ne
2052c     05 4A 05 F6 | 	mov	COUNT_, #5
20530     A8 00 A0 FD | 	call	#pushregs_
20534     18 F0 07 F1 | 	add	ptra, #24
20538     CC D1 BE FD | 	call	#_pop
2053c     FD 26 02 F6 | 	mov	local01, result1
20540     FE 28 02 F6 | 	mov	local02, result2
20544     FF 2A 02 F6 | 	mov	local03, result3
20548     0C 4E 05 F1 | 	add	fp, #12
2054c     A7 26 62 FC | 	wrlong	local01, fp
20550     04 4E 05 F1 | 	add	fp, #4
20554     A7 28 62 FC | 	wrlong	local02, fp
20558     04 4E 05 F1 | 	add	fp, #4
2055c     A7 2A 62 FC | 	wrlong	local03, fp
20560     14 4E 85 F1 | 	sub	fp, #20
20564     A0 D1 BE FD | 	call	#_pop
20568     FF 2A 02 F6 | 	mov	local03, result3
2056c     A7 FA 61 FC | 	wrlong	result1, fp
20570     04 4E 05 F1 | 	add	fp, #4
20574     A7 FC 61 FC | 	wrlong	result2, fp
20578     04 4E 05 F1 | 	add	fp, #4
2057c     A7 2A 62 FC | 	wrlong	local03, fp
20580                 | ' 
20580                 | ' t2=pop()
20580                 | ' t1=pop()
20580                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
20580     08 4E 85 F1 | 	sub	fp, #8
20584     1F 2A 0E F2 | 	cmp	local03, #31 wz
20588     14 4E 05 A1 |  if_e	add	fp, #20
2058c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20590     14 4E 85 A1 |  if_e	sub	fp, #20
20594     16 2B 02 A6 |  if_e	mov	local03, local04
20598     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
2059c     28 00 90 5D |  if_ne	jmp	#LR__2550
205a0     00 26 06 F6 | 	mov	local01, #0
205a4     A7 12 02 FB | 	rdlong	arg01, fp
205a8     0C 4E 05 F1 | 	add	fp, #12
205ac     A7 14 02 FB | 	rdlong	arg02, fp
205b0     0C 4E 85 F1 | 	sub	fp, #12
205b4     0C 6B B0 FD | 	call	#__system___string_cmp
205b8     00 FA 0D F2 | 	cmp	result1, #0 wz
205bc     00 26 26 56 |  if_ne	not	local01, #0
205c0     A7 26 62 FC | 	wrlong	local01, fp
205c4     20 04 90 FD | 	jmp	#LR__2563
205c8                 | LR__2550
205c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
205c8     08 4E 05 F1 | 	add	fp, #8
205cc     A7 26 02 FB | 	rdlong	local01, fp
205d0     08 4E 85 F1 | 	sub	fp, #8
205d4     1E 26 0E F2 | 	cmp	local01, #30 wz
205d8     14 4E 05 A1 |  if_e	add	fp, #20
205dc     A7 2C 02 AB |  if_e	rdlong	local04, fp
205e0     14 4E 85 A1 |  if_e	sub	fp, #20
205e4     16 2B 02 A6 |  if_e	mov	local03, local04
205e8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
205ec     2C 00 90 5D |  if_ne	jmp	#LR__2551
205f0     00 26 06 F6 | 	mov	local01, #0
205f4     A7 12 02 FB | 	rdlong	arg01, fp
205f8     0C 4E 05 F1 | 	add	fp, #12
205fc     A7 14 02 FB | 	rdlong	arg02, fp
20600     0C 4E 85 F1 | 	sub	fp, #12
20604     01 16 06 F6 | 	mov	arg03, #1
20608     40 9D B0 FD | 	call	#__system___float_cmp
2060c     00 FA 0D F2 | 	cmp	result1, #0 wz
20610     00 26 26 56 |  if_ne	not	local01, #0
20614     A7 26 62 FC | 	wrlong	local01, fp
20618     CC 03 90 FD | 	jmp	#LR__2563
2061c                 | LR__2551
2061c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
2061c     08 4E 05 F1 | 	add	fp, #8
20620     A7 26 02 FB | 	rdlong	local01, fp
20624     08 4E 85 F1 | 	sub	fp, #8
20628     1E 26 0E F2 | 	cmp	local01, #30 wz
2062c     14 4E 05 A1 |  if_e	add	fp, #20
20630     A7 2C 02 AB |  if_e	rdlong	local04, fp
20634     14 4E 85 A1 |  if_e	sub	fp, #20
20638     16 2B 02 A6 |  if_e	mov	local03, local04
2063c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20640     48 00 90 5D |  if_ne	jmp	#LR__2552
20644     00 26 06 F6 | 	mov	local01, #0
20648     A7 28 02 FB | 	rdlong	local02, fp
2064c     0C 4E 05 F1 | 	add	fp, #12
20650     A7 12 02 FB | 	rdlong	arg01, fp
20654     0C 4E 85 F1 | 	sub	fp, #12
20658     09 13 52 F6 | 	abs	arg01, arg01 wc
2065c     1F 2E C6 C9 |  if_b	decod	local05, #31
20660     00 2E 06 36 |  if_ae	mov	local05, #0
20664     AC 94 B0 FD | 	call	#__system___float_fromuns
20668     17 FB 61 F5 | 	xor	result1, local05
2066c     FD 14 02 F6 | 	mov	arg02, result1
20670     14 13 02 F6 | 	mov	arg01, local02
20674     01 16 06 F6 | 	mov	arg03, #1
20678     D0 9C B0 FD | 	call	#__system___float_cmp
2067c     00 FA 0D F2 | 	cmp	result1, #0 wz
20680     00 26 26 56 |  if_ne	not	local01, #0
20684     A7 26 62 FC | 	wrlong	local01, fp
20688     5C 03 90 FD | 	jmp	#LR__2563
2068c                 | LR__2552
2068c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
2068c     08 4E 05 F1 | 	add	fp, #8
20690     A7 26 02 FB | 	rdlong	local01, fp
20694     08 4E 85 F1 | 	sub	fp, #8
20698     1E 26 0E F2 | 	cmp	local01, #30 wz
2069c     14 4E 05 A1 |  if_e	add	fp, #20
206a0     A7 2C 02 AB |  if_e	rdlong	local04, fp
206a4     14 4E 85 A1 |  if_e	sub	fp, #20
206a8     16 2B 02 A6 |  if_e	mov	local03, local04
206ac     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
206b0     38 00 90 5D |  if_ne	jmp	#LR__2553
206b4     00 26 06 F6 | 	mov	local01, #0
206b8     A7 28 02 FB | 	rdlong	local02, fp
206bc     0C 4E 05 F1 | 	add	fp, #12
206c0     A7 12 02 FB | 	rdlong	arg01, fp
206c4     0C 4E 85 F1 | 	sub	fp, #12
206c8     48 94 B0 FD | 	call	#__system___float_fromuns
206cc     FD 14 02 F6 | 	mov	arg02, result1
206d0     14 13 02 F6 | 	mov	arg01, local02
206d4     01 16 06 F6 | 	mov	arg03, #1
206d8     70 9C B0 FD | 	call	#__system___float_cmp
206dc     00 FA 0D F2 | 	cmp	result1, #0 wz
206e0     00 26 26 56 |  if_ne	not	local01, #0
206e4     A7 26 62 FC | 	wrlong	local01, fp
206e8     FC 02 90 FD | 	jmp	#LR__2563
206ec                 | LR__2553
206ec                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
206ec     08 4E 05 F1 | 	add	fp, #8
206f0     A7 26 02 FB | 	rdlong	local01, fp
206f4     08 4E 85 F1 | 	sub	fp, #8
206f8     1C 26 0E F2 | 	cmp	local01, #28 wz
206fc     14 4E 05 A1 |  if_e	add	fp, #20
20700     A7 2C 02 AB |  if_e	rdlong	local04, fp
20704     14 4E 85 A1 |  if_e	sub	fp, #20
20708     16 2B 02 A6 |  if_e	mov	local03, local04
2070c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20710     44 00 90 5D |  if_ne	jmp	#LR__2554
20714     00 26 06 F6 | 	mov	local01, #0
20718     A7 12 02 FB | 	rdlong	arg01, fp
2071c     09 13 52 F6 | 	abs	arg01, arg01 wc
20720     1F 2E C6 C9 |  if_b	decod	local05, #31
20724     00 2E 06 36 |  if_ae	mov	local05, #0
20728     E8 93 B0 FD | 	call	#__system___float_fromuns
2072c     17 FB 61 F5 | 	xor	result1, local05
20730     FD 12 02 F6 | 	mov	arg01, result1
20734     0C 4E 05 F1 | 	add	fp, #12
20738     A7 14 02 FB | 	rdlong	arg02, fp
2073c     0C 4E 85 F1 | 	sub	fp, #12
20740     01 16 06 F6 | 	mov	arg03, #1
20744     04 9C B0 FD | 	call	#__system___float_cmp
20748     00 FA 0D F2 | 	cmp	result1, #0 wz
2074c     00 26 26 56 |  if_ne	not	local01, #0
20750     A7 26 62 FC | 	wrlong	local01, fp
20754     90 02 90 FD | 	jmp	#LR__2563
20758                 | LR__2554
20758                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
20758     08 4E 05 F1 | 	add	fp, #8
2075c     A7 26 02 FB | 	rdlong	local01, fp
20760     08 4E 85 F1 | 	sub	fp, #8
20764     1C 26 0E F2 | 	cmp	local01, #28 wz
20768     14 4E 05 A1 |  if_e	add	fp, #20
2076c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20770     14 4E 85 A1 |  if_e	sub	fp, #20
20774     16 2B 02 A6 |  if_e	mov	local03, local04
20778     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
2077c     24 00 90 5D |  if_ne	jmp	#LR__2555
20780     00 26 06 F6 | 	mov	local01, #0
20784     A7 28 02 FB | 	rdlong	local02, fp
20788     0C 4E 05 F1 | 	add	fp, #12
2078c     A7 2A 02 FB | 	rdlong	local03, fp
20790     0C 4E 85 F1 | 	sub	fp, #12
20794     15 29 0A F2 | 	cmp	local02, local03 wz
20798     01 26 66 56 |  if_ne	neg	local01, #1
2079c     A7 26 62 FC | 	wrlong	local01, fp
207a0     44 02 90 FD | 	jmp	#LR__2563
207a4                 | LR__2555
207a4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
207a4     08 4E 05 F1 | 	add	fp, #8
207a8     A7 26 02 FB | 	rdlong	local01, fp
207ac     08 4E 85 F1 | 	sub	fp, #8
207b0     1C 26 0E F2 | 	cmp	local01, #28 wz
207b4     14 4E 05 A1 |  if_e	add	fp, #20
207b8     A7 2C 02 AB |  if_e	rdlong	local04, fp
207bc     14 4E 85 A1 |  if_e	sub	fp, #20
207c0     16 2B 02 A6 |  if_e	mov	local03, local04
207c4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
207c8     24 00 90 5D |  if_ne	jmp	#LR__2556
207cc     00 26 06 F6 | 	mov	local01, #0
207d0     A7 28 02 FB | 	rdlong	local02, fp
207d4     0C 4E 05 F1 | 	add	fp, #12
207d8     A7 2A 02 FB | 	rdlong	local03, fp
207dc     0C 4E 85 F1 | 	sub	fp, #12
207e0     15 29 0A F2 | 	cmp	local02, local03 wz
207e4     01 26 66 56 |  if_ne	neg	local01, #1
207e8     A7 26 62 FC | 	wrlong	local01, fp
207ec     F8 01 90 FD | 	jmp	#LR__2563
207f0                 | LR__2556
207f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
207f0     08 4E 05 F1 | 	add	fp, #8
207f4     A7 26 02 FB | 	rdlong	local01, fp
207f8     08 4E 85 F1 | 	sub	fp, #8
207fc     1D 26 0E F2 | 	cmp	local01, #29 wz
20800     14 4E 05 A1 |  if_e	add	fp, #20
20804     A7 2C 02 AB |  if_e	rdlong	local04, fp
20808     14 4E 85 A1 |  if_e	sub	fp, #20
2080c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
20810     34 00 90 5D |  if_ne	jmp	#LR__2557
20814     00 26 06 F6 | 	mov	local01, #0
20818     A7 12 02 FB | 	rdlong	arg01, fp
2081c     F4 92 B0 FD | 	call	#__system___float_fromuns
20820     FD 12 02 F6 | 	mov	arg01, result1
20824     0C 4E 05 F1 | 	add	fp, #12
20828     A7 14 02 FB | 	rdlong	arg02, fp
2082c     0C 4E 85 F1 | 	sub	fp, #12
20830     01 16 06 F6 | 	mov	arg03, #1
20834     14 9B B0 FD | 	call	#__system___float_cmp
20838     00 FA 0D F2 | 	cmp	result1, #0 wz
2083c     00 26 26 56 |  if_ne	not	local01, #0
20840     A7 26 62 FC | 	wrlong	local01, fp
20844     A0 01 90 FD | 	jmp	#LR__2563
20848                 | LR__2557
20848                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
20848     08 4E 05 F1 | 	add	fp, #8
2084c     A7 26 02 FB | 	rdlong	local01, fp
20850     08 4E 85 F1 | 	sub	fp, #8
20854     1D 26 0E F2 | 	cmp	local01, #29 wz
20858     14 4E 05 A1 |  if_e	add	fp, #20
2085c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20860     14 4E 85 A1 |  if_e	sub	fp, #20
20864     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20868     24 00 90 5D |  if_ne	jmp	#LR__2558
2086c     00 26 06 F6 | 	mov	local01, #0
20870     A7 28 02 FB | 	rdlong	local02, fp
20874     0C 4E 05 F1 | 	add	fp, #12
20878     A7 2A 02 FB | 	rdlong	local03, fp
2087c     0C 4E 85 F1 | 	sub	fp, #12
20880     15 29 0A F2 | 	cmp	local02, local03 wz
20884     01 26 66 56 |  if_ne	neg	local01, #1
20888     A7 26 62 FC | 	wrlong	local01, fp
2088c     58 01 90 FD | 	jmp	#LR__2563
20890                 | LR__2558
20890                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
20890     08 4E 05 F1 | 	add	fp, #8
20894     A7 26 02 FB | 	rdlong	local01, fp
20898     08 4E 85 F1 | 	sub	fp, #8
2089c     1D 26 0E F2 | 	cmp	local01, #29 wz
208a0     14 4E 05 A1 |  if_e	add	fp, #20
208a4     A7 2A 02 AB |  if_e	rdlong	local03, fp
208a8     14 4E 85 A1 |  if_e	sub	fp, #20
208ac     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
208b0     24 00 90 5D |  if_ne	jmp	#LR__2559
208b4     00 26 06 F6 | 	mov	local01, #0
208b8     A7 28 02 FB | 	rdlong	local02, fp
208bc     0C 4E 05 F1 | 	add	fp, #12
208c0     A7 2A 02 FB | 	rdlong	local03, fp
208c4     0C 4E 85 F1 | 	sub	fp, #12
208c8     15 29 0A F2 | 	cmp	local02, local03 wz
208cc     01 26 66 56 |  if_ne	neg	local01, #1
208d0     A7 26 62 FC | 	wrlong	local01, fp
208d4     10 01 90 FD | 	jmp	#LR__2563
208d8                 | LR__2559
208d8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
208d8     08 4E 05 F1 | 	add	fp, #8
208dc     A7 26 02 FB | 	rdlong	local01, fp
208e0     08 4E 85 F1 | 	sub	fp, #8
208e4     2B 26 0E F2 | 	cmp	local01, #43 wz
208e8     14 4E 05 A1 |  if_e	add	fp, #20
208ec     A7 2A 02 AB |  if_e	rdlong	local03, fp
208f0     14 4E 85 A1 |  if_e	sub	fp, #20
208f4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
208f8     30 00 90 5D |  if_ne	jmp	#LR__2560
208fc     00 26 06 F6 | 	mov	local01, #0
20900     A7 12 02 FB | 	rdlong	arg01, fp
20904     78 CF BE FD | 	call	#_convertstring
20908     FD 12 02 F6 | 	mov	arg01, result1
2090c     0C 4E 05 F1 | 	add	fp, #12
20910     A7 14 02 FB | 	rdlong	arg02, fp
20914     0C 4E 85 F1 | 	sub	fp, #12
20918     A8 67 B0 FD | 	call	#__system___string_cmp
2091c     00 FA 0D F2 | 	cmp	result1, #0 wz
20920     00 26 26 56 |  if_ne	not	local01, #0
20924     A7 26 62 FC | 	wrlong	local01, fp
20928     BC 00 90 FD | 	jmp	#LR__2563
2092c                 | LR__2560
2092c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
2092c     08 4E 05 F1 | 	add	fp, #8
20930     A7 26 02 FB | 	rdlong	local01, fp
20934     08 4E 85 F1 | 	sub	fp, #8
20938     1F 26 0E F2 | 	cmp	local01, #31 wz
2093c     14 4E 05 A1 |  if_e	add	fp, #20
20940     A7 2A 02 AB |  if_e	rdlong	local03, fp
20944     14 4E 85 A1 |  if_e	sub	fp, #20
20948     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
2094c     34 00 90 5D |  if_ne	jmp	#LR__2561
20950     00 26 06 F6 | 	mov	local01, #0
20954     A7 28 02 FB | 	rdlong	local02, fp
20958     0C 4E 05 F1 | 	add	fp, #12
2095c     A7 12 02 FB | 	rdlong	arg01, fp
20960     0C 4E 85 F1 | 	sub	fp, #12
20964     18 CF BE FD | 	call	#_convertstring
20968     FD 14 02 F6 | 	mov	arg02, result1
2096c     14 13 02 F6 | 	mov	arg01, local02
20970     50 67 B0 FD | 	call	#__system___string_cmp
20974     00 FA 0D F2 | 	cmp	result1, #0 wz
20978     00 26 26 56 |  if_ne	not	local01, #0
2097c     A7 26 62 FC | 	wrlong	local01, fp
20980     64 00 90 FD | 	jmp	#LR__2563
20984                 | LR__2561
20984                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
20984     08 4E 05 F1 | 	add	fp, #8
20988     A7 26 02 FB | 	rdlong	local01, fp
2098c     08 4E 85 F1 | 	sub	fp, #8
20990     2B 26 0E F2 | 	cmp	local01, #43 wz
20994     14 4E 05 A1 |  if_e	add	fp, #20
20998     A7 2A 02 AB |  if_e	rdlong	local03, fp
2099c     14 4E 85 A1 |  if_e	sub	fp, #20
209a0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
209a4     3C 00 90 5D |  if_ne	jmp	#LR__2562
209a8     00 26 06 F6 | 	mov	local01, #0
209ac     A7 12 02 FB | 	rdlong	arg01, fp
209b0     CC CE BE FD | 	call	#_convertstring
209b4     FD 28 02 F6 | 	mov	local02, result1
209b8     0C 4E 05 F1 | 	add	fp, #12
209bc     A7 12 02 FB | 	rdlong	arg01, fp
209c0     0C 4E 85 F1 | 	sub	fp, #12
209c4     B8 CE BE FD | 	call	#_convertstring
209c8     FD 14 02 F6 | 	mov	arg02, result1
209cc     14 13 02 F6 | 	mov	arg01, local02
209d0     F0 66 B0 FD | 	call	#__system___string_cmp
209d4     00 FA 0D F2 | 	cmp	result1, #0 wz
209d8     00 26 26 56 |  if_ne	not	local01, #0
209dc     A7 26 62 FC | 	wrlong	local01, fp
209e0     04 00 90 FD | 	jmp	#LR__2563
209e4                 | LR__2562
209e4     A7 00 68 FC | 	wrlong	#0, fp
209e8                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
209e8                 | LR__2563
209e8     08 4E 05 F1 | 	add	fp, #8
209ec     A7 38 68 FC | 	wrlong	#28, fp
209f0     08 4E 85 F1 | 	sub	fp, #8
209f4     A7 12 02 F6 | 	mov	arg01, fp
209f8     A4 CD BE FD | 	call	#_push
209fc     A7 F0 03 F6 | 	mov	ptra, fp
20a00     B2 00 A0 FD | 	call	#popregs_
20a04                 | _do_ne_ret
20a04     2D 00 64 FD | 	ret
20a08                 | 
20a08                 | ' 
20a08                 | ' '--------------------------------- OR
20a08                 | ' 
20a08                 | ' sub do_or 
20a08                 | _do_or
20a08     03 4A 05 F6 | 	mov	COUNT_, #3
20a0c     A8 00 A0 FD | 	call	#pushregs_
20a10     18 F0 07 F1 | 	add	ptra, #24
20a14     F0 CC BE FD | 	call	#_pop
20a18     FD 12 02 F6 | 	mov	arg01, result1
20a1c     FE 26 02 F6 | 	mov	local01, result2
20a20     FF 28 02 F6 | 	mov	local02, result3
20a24     0C 4E 05 F1 | 	add	fp, #12
20a28     A7 12 62 FC | 	wrlong	arg01, fp
20a2c     04 4E 05 F1 | 	add	fp, #4
20a30     A7 26 62 FC | 	wrlong	local01, fp
20a34     04 4E 05 F1 | 	add	fp, #4
20a38     A7 28 62 FC | 	wrlong	local02, fp
20a3c     14 4E 85 F1 | 	sub	fp, #20
20a40     C4 CC BE FD | 	call	#_pop
20a44     FF 2A 02 F6 | 	mov	local03, result3
20a48     A7 FA 61 FC | 	wrlong	result1, fp
20a4c     04 4E 05 F1 | 	add	fp, #4
20a50     A7 FC 61 FC | 	wrlong	result2, fp
20a54     04 4E 05 F1 | 	add	fp, #4
20a58     A7 2A 62 FC | 	wrlong	local03, fp
20a5c                 | ' 
20a5c                 | ' t2=pop()
20a5c                 | ' t1=pop()
20a5c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
20a5c     08 4E 85 F1 | 	sub	fp, #8
20a60     1C 2A 0E F2 | 	cmp	local03, #28 wz
20a64     A7 2A 02 AB |  if_e	rdlong	local03, fp
20a68     A7 2A 62 AC |  if_e	wrlong	local03, fp
20a6c     08 4E 05 A1 |  if_e	add	fp, #8
20a70     A7 3A 68 AC |  if_e	wrlong	#29, fp
20a74     08 4E 85 A1 |  if_e	sub	fp, #8
20a78                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
20a78     14 4E 05 F1 | 	add	fp, #20
20a7c     A7 2A 02 FB | 	rdlong	local03, fp
20a80     14 4E 85 F1 | 	sub	fp, #20
20a84     1C 2A 0E F2 | 	cmp	local03, #28 wz
20a88     18 00 90 5D |  if_ne	jmp	#LR__2570
20a8c     0C 4E 05 F1 | 	add	fp, #12
20a90     A7 2A 02 FB | 	rdlong	local03, fp
20a94     A7 2A 62 FC | 	wrlong	local03, fp
20a98     08 4E 05 F1 | 	add	fp, #8
20a9c     A7 3A 68 FC | 	wrlong	#29, fp
20aa0     14 4E 85 F1 | 	sub	fp, #20
20aa4                 | LR__2570
20aa4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
20aa4     08 4E 05 F1 | 	add	fp, #8
20aa8     A7 2A 02 FB | 	rdlong	local03, fp
20aac     08 4E 85 F1 | 	sub	fp, #8
20ab0     1F 2A 0E F2 | 	cmp	local03, #31 wz
20ab4     14 4E 05 51 |  if_ne	add	fp, #20
20ab8     A7 28 02 5B |  if_ne	rdlong	local02, fp
20abc     14 4E 85 51 |  if_ne	sub	fp, #20
20ac0     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
20ac4     08 4E 05 51 |  if_ne	add	fp, #8
20ac8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20acc     08 4E 85 51 |  if_ne	sub	fp, #8
20ad0     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
20ad4     14 4E 05 51 |  if_ne	add	fp, #20
20ad8     14 4E 85 51 |  if_ne	sub	fp, #20
20adc     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
20ae0     A7 0C 68 AC |  if_e	wrlong	#6, fp
20ae4     08 4E 05 A1 |  if_e	add	fp, #8
20ae8     A7 FE 69 AC |  if_e	wrlong	#255, fp
20aec     08 4E 85 A1 |  if_e	sub	fp, #8
20af0     18 00 90 AD |  if_e	jmp	#LR__2571
20af4     A7 2A 02 FB | 	rdlong	local03, fp
20af8     0C 4E 05 F1 | 	add	fp, #12
20afc     A7 26 02 FB | 	rdlong	local01, fp
20b00     0C 4E 85 F1 | 	sub	fp, #12
20b04     13 2B 42 F5 | 	or	local03, local01
20b08     A7 2A 62 FC | 	wrlong	local03, fp
20b0c                 | LR__2571
20b0c     A7 12 02 F6 | 	mov	arg01, fp
20b10     8C CC BE FD | 	call	#_push
20b14     A7 F0 03 F6 | 	mov	ptra, fp
20b18     B2 00 A0 FD | 	call	#popregs_
20b1c                 | _do_or_ret
20b1c     2D 00 64 FD | 	ret
20b20                 | 
20b20                 | ' 
20b20                 | ' '--------------------------------- plus (+)
20b20                 | ' 
20b20                 | ' sub do_plus 
20b20                 | _do_plus
20b20     05 4A 05 F6 | 	mov	COUNT_, #5
20b24     A8 00 A0 FD | 	call	#pushregs_
20b28     18 F0 07 F1 | 	add	ptra, #24
20b2c     D8 CB BE FD | 	call	#_pop
20b30     FD 26 02 F6 | 	mov	local01, result1
20b34     FE 28 02 F6 | 	mov	local02, result2
20b38     FF 2A 02 F6 | 	mov	local03, result3
20b3c     0C 4E 05 F1 | 	add	fp, #12
20b40     A7 26 62 FC | 	wrlong	local01, fp
20b44     04 4E 05 F1 | 	add	fp, #4
20b48     A7 28 62 FC | 	wrlong	local02, fp
20b4c     04 4E 05 F1 | 	add	fp, #4
20b50     A7 2A 62 FC | 	wrlong	local03, fp
20b54     14 4E 85 F1 | 	sub	fp, #20
20b58     AC CB BE FD | 	call	#_pop
20b5c     FF 2A 02 F6 | 	mov	local03, result3
20b60     A7 FA 61 FC | 	wrlong	result1, fp
20b64     04 4E 05 F1 | 	add	fp, #4
20b68     A7 FC 61 FC | 	wrlong	result2, fp
20b6c     04 4E 05 F1 | 	add	fp, #4
20b70     A7 2A 62 FC | 	wrlong	local03, fp
20b74                 | ' 
20b74                 | ' t2=pop()
20b74                 | ' t1=pop()
20b74                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
20b74     08 4E 85 F1 | 	sub	fp, #8
20b78     1D 2A 0E F2 | 	cmp	local03, #29 wz
20b7c     14 4E 05 A1 |  if_e	add	fp, #20
20b80     A7 2C 02 AB |  if_e	rdlong	local04, fp
20b84     14 4E 85 A1 |  if_e	sub	fp, #20
20b88     16 2B 02 A6 |  if_e	mov	local03, local04
20b8c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20b90     1C 00 90 5D |  if_ne	jmp	#LR__2580
20b94     A7 26 02 FB | 	rdlong	local01, fp
20b98     0C 4E 05 F1 | 	add	fp, #12
20b9c     A7 28 02 FB | 	rdlong	local02, fp
20ba0     0C 4E 85 F1 | 	sub	fp, #12
20ba4     14 27 02 F1 | 	add	local01, local02
20ba8     A7 26 62 FC | 	wrlong	local01, fp
20bac     48 04 90 FD | 	jmp	#LR__2595
20bb0                 | LR__2580
20bb0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
20bb0     08 4E 05 F1 | 	add	fp, #8
20bb4     A7 26 02 FB | 	rdlong	local01, fp
20bb8     08 4E 85 F1 | 	sub	fp, #8
20bbc     1D 26 0E F2 | 	cmp	local01, #29 wz
20bc0     14 4E 05 A1 |  if_e	add	fp, #20
20bc4     A7 2C 02 AB |  if_e	rdlong	local04, fp
20bc8     14 4E 85 A1 |  if_e	sub	fp, #20
20bcc     16 2B 02 A6 |  if_e	mov	local03, local04
20bd0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20bd4     28 00 90 5D |  if_ne	jmp	#LR__2581
20bd8     A7 26 02 FB | 	rdlong	local01, fp
20bdc     0C 4E 05 F1 | 	add	fp, #12
20be0     A7 28 02 FB | 	rdlong	local02, fp
20be4     0C 4E 85 F1 | 	sub	fp, #12
20be8     14 27 02 F1 | 	add	local01, local02
20bec     A7 26 62 FC | 	wrlong	local01, fp
20bf0     08 4E 05 F1 | 	add	fp, #8
20bf4     A7 38 68 FC | 	wrlong	#28, fp
20bf8     08 4E 85 F1 | 	sub	fp, #8
20bfc     F8 03 90 FD | 	jmp	#LR__2595
20c00                 | LR__2581
20c00                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
20c00     08 4E 05 F1 | 	add	fp, #8
20c04     A7 26 02 FB | 	rdlong	local01, fp
20c08     08 4E 85 F1 | 	sub	fp, #8
20c0c     1D 26 0E F2 | 	cmp	local01, #29 wz
20c10     14 4E 05 A1 |  if_e	add	fp, #20
20c14     A7 2C 02 AB |  if_e	rdlong	local04, fp
20c18     14 4E 85 A1 |  if_e	sub	fp, #20
20c1c     16 2B 02 A6 |  if_e	mov	local03, local04
20c20     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20c24     30 00 90 5D |  if_ne	jmp	#LR__2582
20c28     A7 12 02 FB | 	rdlong	arg01, fp
20c2c     E4 8E B0 FD | 	call	#__system___float_fromuns
20c30     FD 12 02 F6 | 	mov	arg01, result1
20c34     0C 4E 05 F1 | 	add	fp, #12
20c38     A7 14 02 FB | 	rdlong	arg02, fp
20c3c     0C 4E 85 F1 | 	sub	fp, #12
20c40     04 8F B0 FD | 	call	#__system___float_add
20c44     A7 FA 61 FC | 	wrlong	result1, fp
20c48     08 4E 05 F1 | 	add	fp, #8
20c4c     A7 3C 68 FC | 	wrlong	#30, fp
20c50     08 4E 85 F1 | 	sub	fp, #8
20c54     A0 03 90 FD | 	jmp	#LR__2595
20c58                 | LR__2582
20c58                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
20c58     08 4E 05 F1 | 	add	fp, #8
20c5c     A7 26 02 FB | 	rdlong	local01, fp
20c60     08 4E 85 F1 | 	sub	fp, #8
20c64     1C 26 0E F2 | 	cmp	local01, #28 wz
20c68     14 4E 05 A1 |  if_e	add	fp, #20
20c6c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20c70     14 4E 85 A1 |  if_e	sub	fp, #20
20c74     16 2B 02 A6 |  if_e	mov	local03, local04
20c78     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20c7c     1C 00 90 5D |  if_ne	jmp	#LR__2583
20c80     A7 26 02 FB | 	rdlong	local01, fp
20c84     0C 4E 05 F1 | 	add	fp, #12
20c88     A7 28 02 FB | 	rdlong	local02, fp
20c8c     0C 4E 85 F1 | 	sub	fp, #12
20c90     14 27 02 F1 | 	add	local01, local02
20c94     A7 26 62 FC | 	wrlong	local01, fp
20c98     5C 03 90 FD | 	jmp	#LR__2595
20c9c                 | LR__2583
20c9c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
20c9c     08 4E 05 F1 | 	add	fp, #8
20ca0     A7 26 02 FB | 	rdlong	local01, fp
20ca4     08 4E 85 F1 | 	sub	fp, #8
20ca8     1C 26 0E F2 | 	cmp	local01, #28 wz
20cac     14 4E 05 A1 |  if_e	add	fp, #20
20cb0     A7 2C 02 AB |  if_e	rdlong	local04, fp
20cb4     14 4E 85 A1 |  if_e	sub	fp, #20
20cb8     16 2B 02 A6 |  if_e	mov	local03, local04
20cbc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20cc0     1C 00 90 5D |  if_ne	jmp	#LR__2584
20cc4     A7 26 02 FB | 	rdlong	local01, fp
20cc8     0C 4E 05 F1 | 	add	fp, #12
20ccc     A7 28 02 FB | 	rdlong	local02, fp
20cd0     0C 4E 85 F1 | 	sub	fp, #12
20cd4     14 27 02 F1 | 	add	local01, local02
20cd8     A7 26 62 FC | 	wrlong	local01, fp
20cdc     18 03 90 FD | 	jmp	#LR__2595
20ce0                 | LR__2584
20ce0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
20ce0     08 4E 05 F1 | 	add	fp, #8
20ce4     A7 26 02 FB | 	rdlong	local01, fp
20ce8     08 4E 85 F1 | 	sub	fp, #8
20cec     1C 26 0E F2 | 	cmp	local01, #28 wz
20cf0     14 4E 05 A1 |  if_e	add	fp, #20
20cf4     A7 2C 02 AB |  if_e	rdlong	local04, fp
20cf8     14 4E 85 A1 |  if_e	sub	fp, #20
20cfc     16 2B 02 A6 |  if_e	mov	local03, local04
20d00     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20d04     40 00 90 5D |  if_ne	jmp	#LR__2585
20d08     A7 12 02 FB | 	rdlong	arg01, fp
20d0c     09 13 52 F6 | 	abs	arg01, arg01 wc
20d10     1F 2E C6 C9 |  if_b	decod	local05, #31
20d14     00 2E 06 36 |  if_ae	mov	local05, #0
20d18     F8 8D B0 FD | 	call	#__system___float_fromuns
20d1c     17 FB 61 F5 | 	xor	result1, local05
20d20     FD 12 02 F6 | 	mov	arg01, result1
20d24     0C 4E 05 F1 | 	add	fp, #12
20d28     A7 14 02 FB | 	rdlong	arg02, fp
20d2c     0C 4E 85 F1 | 	sub	fp, #12
20d30     14 8E B0 FD | 	call	#__system___float_add
20d34     A7 FA 61 FC | 	wrlong	result1, fp
20d38     08 4E 05 F1 | 	add	fp, #8
20d3c     A7 3C 68 FC | 	wrlong	#30, fp
20d40     08 4E 85 F1 | 	sub	fp, #8
20d44     B0 02 90 FD | 	jmp	#LR__2595
20d48                 | LR__2585
20d48                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
20d48     08 4E 05 F1 | 	add	fp, #8
20d4c     A7 26 02 FB | 	rdlong	local01, fp
20d50     08 4E 85 F1 | 	sub	fp, #8
20d54     1E 26 0E F2 | 	cmp	local01, #30 wz
20d58     14 4E 05 A1 |  if_e	add	fp, #20
20d5c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20d60     14 4E 85 A1 |  if_e	sub	fp, #20
20d64     16 2B 02 A6 |  if_e	mov	local03, local04
20d68     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20d6c     28 00 90 5D |  if_ne	jmp	#LR__2586
20d70     A7 26 02 FB | 	rdlong	local01, fp
20d74     0C 4E 05 F1 | 	add	fp, #12
20d78     A7 12 02 FB | 	rdlong	arg01, fp
20d7c     0C 4E 85 F1 | 	sub	fp, #12
20d80     90 8D B0 FD | 	call	#__system___float_fromuns
20d84     FD 14 02 F6 | 	mov	arg02, result1
20d88     13 13 02 F6 | 	mov	arg01, local01
20d8c     B8 8D B0 FD | 	call	#__system___float_add
20d90     A7 FA 61 FC | 	wrlong	result1, fp
20d94     60 02 90 FD | 	jmp	#LR__2595
20d98                 | LR__2586
20d98                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
20d98     08 4E 05 F1 | 	add	fp, #8
20d9c     A7 26 02 FB | 	rdlong	local01, fp
20da0     08 4E 85 F1 | 	sub	fp, #8
20da4     1E 26 0E F2 | 	cmp	local01, #30 wz
20da8     14 4E 05 A1 |  if_e	add	fp, #20
20dac     A7 2C 02 AB |  if_e	rdlong	local04, fp
20db0     14 4E 85 A1 |  if_e	sub	fp, #20
20db4     16 2B 02 A6 |  if_e	mov	local03, local04
20db8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20dbc     38 00 90 5D |  if_ne	jmp	#LR__2587
20dc0     A7 26 02 FB | 	rdlong	local01, fp
20dc4     0C 4E 05 F1 | 	add	fp, #12
20dc8     A7 12 02 FB | 	rdlong	arg01, fp
20dcc     0C 4E 85 F1 | 	sub	fp, #12
20dd0     09 13 52 F6 | 	abs	arg01, arg01 wc
20dd4     1F 2E C6 C9 |  if_b	decod	local05, #31
20dd8     00 2E 06 36 |  if_ae	mov	local05, #0
20ddc     34 8D B0 FD | 	call	#__system___float_fromuns
20de0     17 FB 61 F5 | 	xor	result1, local05
20de4     FD 14 02 F6 | 	mov	arg02, result1
20de8     13 13 02 F6 | 	mov	arg01, local01
20dec     58 8D B0 FD | 	call	#__system___float_add
20df0     A7 FA 61 FC | 	wrlong	result1, fp
20df4     00 02 90 FD | 	jmp	#LR__2595
20df8                 | LR__2587
20df8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
20df8     08 4E 05 F1 | 	add	fp, #8
20dfc     A7 26 02 FB | 	rdlong	local01, fp
20e00     08 4E 85 F1 | 	sub	fp, #8
20e04     1E 26 0E F2 | 	cmp	local01, #30 wz
20e08     14 4E 05 A1 |  if_e	add	fp, #20
20e0c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20e10     14 4E 85 A1 |  if_e	sub	fp, #20
20e14     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
20e18     1C 00 90 5D |  if_ne	jmp	#LR__2588
20e1c     A7 12 02 FB | 	rdlong	arg01, fp
20e20     0C 4E 05 F1 | 	add	fp, #12
20e24     A7 14 02 FB | 	rdlong	arg02, fp
20e28     0C 4E 85 F1 | 	sub	fp, #12
20e2c     18 8D B0 FD | 	call	#__system___float_add
20e30     A7 FA 61 FC | 	wrlong	result1, fp
20e34     C0 01 90 FD | 	jmp	#LR__2595
20e38                 | LR__2588
20e38                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
20e38     08 4E 05 F1 | 	add	fp, #8
20e3c     A7 26 02 FB | 	rdlong	local01, fp
20e40     08 4E 85 F1 | 	sub	fp, #8
20e44     1F 26 0E F2 | 	cmp	local01, #31 wz
20e48     24 00 90 5D |  if_ne	jmp	#LR__2589
20e4c     14 4E 05 F1 | 	add	fp, #20
20e50     A7 2A 02 FB | 	rdlong	local03, fp
20e54     14 4E 85 F1 | 	sub	fp, #20
20e58     1F 2A 0E F2 | 	cmp	local03, #31 wz
20e5c     A7 04 68 5C |  if_ne	wrlong	#2, fp
20e60     08 4E 05 51 |  if_ne	add	fp, #8
20e64     A7 FE 69 5C |  if_ne	wrlong	#255, fp
20e68     08 4E 85 51 |  if_ne	sub	fp, #8
20e6c     88 01 90 5D |  if_ne	jmp	#LR__2595
20e70                 | LR__2589
20e70                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
20e70     14 4E 05 F1 | 	add	fp, #20
20e74     A7 26 02 FB | 	rdlong	local01, fp
20e78     14 4E 85 F1 | 	sub	fp, #20
20e7c     1F 26 0E F2 | 	cmp	local01, #31 wz
20e80     24 00 90 5D |  if_ne	jmp	#LR__2590
20e84     08 4E 05 F1 | 	add	fp, #8
20e88     A7 2A 02 FB | 	rdlong	local03, fp
20e8c     08 4E 85 F1 | 	sub	fp, #8
20e90     1F 2A 0E F2 | 	cmp	local03, #31 wz
20e94     A7 04 68 5C |  if_ne	wrlong	#2, fp
20e98     08 4E 05 51 |  if_ne	add	fp, #8
20e9c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
20ea0     08 4E 85 51 |  if_ne	sub	fp, #8
20ea4     50 01 90 5D |  if_ne	jmp	#LR__2595
20ea8                 | LR__2590
20ea8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
20ea8     08 4E 05 F1 | 	add	fp, #8
20eac     A7 26 02 FB | 	rdlong	local01, fp
20eb0     08 4E 85 F1 | 	sub	fp, #8
20eb4     1F 26 0E F2 | 	cmp	local01, #31 wz
20eb8     14 4E 05 A1 |  if_e	add	fp, #20
20ebc     A7 2A 02 AB |  if_e	rdlong	local03, fp
20ec0     14 4E 85 A1 |  if_e	sub	fp, #20
20ec4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20ec8     1C 00 90 5D |  if_ne	jmp	#LR__2591
20ecc     A7 12 02 FB | 	rdlong	arg01, fp
20ed0     0C 4E 05 F1 | 	add	fp, #12
20ed4     A7 14 02 FB | 	rdlong	arg02, fp
20ed8     0C 4E 85 F1 | 	sub	fp, #12
20edc     18 62 B0 FD | 	call	#__system___string_concat
20ee0     A7 FA 61 FC | 	wrlong	result1, fp
20ee4     10 01 90 FD | 	jmp	#LR__2595
20ee8                 | LR__2591
20ee8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
20ee8     08 4E 05 F1 | 	add	fp, #8
20eec     A7 26 02 FB | 	rdlong	local01, fp
20ef0     08 4E 85 F1 | 	sub	fp, #8
20ef4     2B 26 0E F2 | 	cmp	local01, #43 wz
20ef8     14 4E 05 A1 |  if_e	add	fp, #20
20efc     A7 2A 02 AB |  if_e	rdlong	local03, fp
20f00     14 4E 85 A1 |  if_e	sub	fp, #20
20f04     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
20f08     30 00 90 5D |  if_ne	jmp	#LR__2592
20f0c     A7 12 02 FB | 	rdlong	arg01, fp
20f10     6C C9 BE FD | 	call	#_convertstring
20f14     FD 12 02 F6 | 	mov	arg01, result1
20f18     0C 4E 05 F1 | 	add	fp, #12
20f1c     A7 14 02 FB | 	rdlong	arg02, fp
20f20     0C 4E 85 F1 | 	sub	fp, #12
20f24     D0 61 B0 FD | 	call	#__system___string_concat
20f28     A7 FA 61 FC | 	wrlong	result1, fp
20f2c     08 4E 05 F1 | 	add	fp, #8
20f30     A7 3E 68 FC | 	wrlong	#31, fp
20f34     08 4E 85 F1 | 	sub	fp, #8
20f38     BC 00 90 FD | 	jmp	#LR__2595
20f3c                 | LR__2592
20f3c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
20f3c     08 4E 05 F1 | 	add	fp, #8
20f40     A7 26 02 FB | 	rdlong	local01, fp
20f44     08 4E 85 F1 | 	sub	fp, #8
20f48     1F 26 0E F2 | 	cmp	local01, #31 wz
20f4c     14 4E 05 A1 |  if_e	add	fp, #20
20f50     A7 2A 02 AB |  if_e	rdlong	local03, fp
20f54     14 4E 85 A1 |  if_e	sub	fp, #20
20f58     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20f5c     28 00 90 5D |  if_ne	jmp	#LR__2593
20f60     A7 26 02 FB | 	rdlong	local01, fp
20f64     0C 4E 05 F1 | 	add	fp, #12
20f68     A7 12 02 FB | 	rdlong	arg01, fp
20f6c     0C 4E 85 F1 | 	sub	fp, #12
20f70     0C C9 BE FD | 	call	#_convertstring
20f74     FD 14 02 F6 | 	mov	arg02, result1
20f78     13 13 02 F6 | 	mov	arg01, local01
20f7c     78 61 B0 FD | 	call	#__system___string_concat
20f80     A7 FA 61 FC | 	wrlong	result1, fp
20f84     70 00 90 FD | 	jmp	#LR__2595
20f88                 | LR__2593
20f88                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
20f88     08 4E 05 F1 | 	add	fp, #8
20f8c     A7 26 02 FB | 	rdlong	local01, fp
20f90     08 4E 85 F1 | 	sub	fp, #8
20f94     2B 26 0E F2 | 	cmp	local01, #43 wz
20f98     14 4E 05 A1 |  if_e	add	fp, #20
20f9c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20fa0     14 4E 85 A1 |  if_e	sub	fp, #20
20fa4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20fa8     3C 00 90 5D |  if_ne	jmp	#LR__2594
20fac     A7 12 02 FB | 	rdlong	arg01, fp
20fb0     CC C8 BE FD | 	call	#_convertstring
20fb4     FD 26 02 F6 | 	mov	local01, result1
20fb8     0C 4E 05 F1 | 	add	fp, #12
20fbc     A7 12 02 FB | 	rdlong	arg01, fp
20fc0     0C 4E 85 F1 | 	sub	fp, #12
20fc4     B8 C8 BE FD | 	call	#_convertstring
20fc8     FD 14 02 F6 | 	mov	arg02, result1
20fcc     13 13 02 F6 | 	mov	arg01, local01
20fd0     24 61 B0 FD | 	call	#__system___string_concat
20fd4     A7 FA 61 FC | 	wrlong	result1, fp
20fd8     08 4E 05 F1 | 	add	fp, #8
20fdc     A7 3E 68 FC | 	wrlong	#31, fp
20fe0     08 4E 85 F1 | 	sub	fp, #8
20fe4     10 00 90 FD | 	jmp	#LR__2595
20fe8                 | LR__2594
20fe8     A7 08 68 FC | 	wrlong	#4, fp
20fec     08 4E 05 F1 | 	add	fp, #8
20ff0     A7 FE 69 FC | 	wrlong	#255, fp
20ff4     08 4E 85 F1 | 	sub	fp, #8
20ff8                 | LR__2595
20ff8     A7 12 02 F6 | 	mov	arg01, fp
20ffc     A0 C7 BE FD | 	call	#_push
21000     A7 F0 03 F6 | 	mov	ptra, fp
21004     B2 00 A0 FD | 	call	#popregs_
21008                 | _do_plus_ret
21008     2D 00 64 FD | 	ret
2100c                 | 
2100c                 | ' 
2100c                 | ' '--------------------------------- power (^)
2100c                 | ' 
2100c                 | ' sub do_power 
2100c                 | _do_power
2100c     02 4A 05 F6 | 	mov	COUNT_, #2
21010     A8 00 A0 FD | 	call	#pushregs_
21014     18 F0 07 F1 | 	add	ptra, #24
21018     EC C6 BE FD | 	call	#_pop
2101c     FD 14 02 F6 | 	mov	arg02, result1
21020     FE 12 02 F6 | 	mov	arg01, result2
21024     FF 26 02 F6 | 	mov	local01, result3
21028     0C 4E 05 F1 | 	add	fp, #12
2102c     A7 14 62 FC | 	wrlong	arg02, fp
21030     04 4E 05 F1 | 	add	fp, #4
21034     A7 12 62 FC | 	wrlong	arg01, fp
21038     04 4E 05 F1 | 	add	fp, #4
2103c     A7 26 62 FC | 	wrlong	local01, fp
21040     14 4E 85 F1 | 	sub	fp, #20
21044     C0 C6 BE FD | 	call	#_pop
21048     A7 FA 61 FC | 	wrlong	result1, fp
2104c     04 4E 05 F1 | 	add	fp, #4
21050     A7 FC 61 FC | 	wrlong	result2, fp
21054     04 4E 05 F1 | 	add	fp, #4
21058     A7 FE 61 FC | 	wrlong	result3, fp
2105c                 | ' 
2105c                 | ' t2=pop()
2105c                 | ' t1=pop()
2105c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
2105c     08 4E 85 F1 | 	sub	fp, #8
21060     1F FE 0D F2 | 	cmp	result3, #31 wz
21064     14 4E 05 51 |  if_ne	add	fp, #20
21068     A7 26 02 5B |  if_ne	rdlong	local01, fp
2106c     14 4E 85 51 |  if_ne	sub	fp, #20
21070     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
21074     A7 18 68 AC |  if_e	wrlong	#12, fp
21078     08 4E 05 A1 |  if_e	add	fp, #8
2107c     A7 FE 69 AC |  if_e	wrlong	#255, fp
21080     08 4E 85 A1 |  if_e	sub	fp, #8
21084     38 01 90 AD |  if_e	jmp	#LR__2605
21088                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
21088     08 4E 05 F1 | 	add	fp, #8
2108c     A7 14 02 FB | 	rdlong	arg02, fp
21090     08 4E 85 F1 | 	sub	fp, #8
21094     1C 14 0E F2 | 	cmp	arg02, #28 wz
21098     28 00 90 5D |  if_ne	jmp	#LR__2600
2109c     08 4E 05 F1 | 	add	fp, #8
210a0     A7 3C 68 FC | 	wrlong	#30, fp
210a4     08 4E 85 F1 | 	sub	fp, #8
210a8     A7 12 02 FB | 	rdlong	arg01, fp
210ac     09 13 52 F6 | 	abs	arg01, arg01 wc
210b0     1F 28 C6 C9 |  if_b	decod	local02, #31
210b4     00 28 06 36 |  if_ae	mov	local02, #0
210b8     58 8A B0 FD | 	call	#__system___float_fromuns
210bc     14 FB 61 F5 | 	xor	result1, local02
210c0     A7 FA 61 FC | 	wrlong	result1, fp
210c4                 | LR__2600
210c4                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
210c4     08 4E 05 F1 | 	add	fp, #8
210c8     A7 14 02 FB | 	rdlong	arg02, fp
210cc     08 4E 85 F1 | 	sub	fp, #8
210d0     1D 14 0E F2 | 	cmp	arg02, #29 wz
210d4     18 00 90 5D |  if_ne	jmp	#LR__2601
210d8     08 4E 05 F1 | 	add	fp, #8
210dc     A7 3C 68 FC | 	wrlong	#30, fp
210e0     08 4E 85 F1 | 	sub	fp, #8
210e4     A7 12 02 FB | 	rdlong	arg01, fp
210e8     28 8A B0 FD | 	call	#__system___float_fromuns
210ec     A7 FA 61 FC | 	wrlong	result1, fp
210f0                 | LR__2601
210f0                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
210f0     14 4E 05 F1 | 	add	fp, #20
210f4     A7 14 02 FB | 	rdlong	arg02, fp
210f8     14 4E 85 F1 | 	sub	fp, #20
210fc     1C 14 0E F2 | 	cmp	arg02, #28 wz
21100     34 00 90 5D |  if_ne	jmp	#LR__2602
21104     14 4E 05 F1 | 	add	fp, #20
21108     A7 3C 68 FC | 	wrlong	#30, fp
2110c     08 4E 85 F1 | 	sub	fp, #8
21110     A7 12 02 FB | 	rdlong	arg01, fp
21114     0C 4E 85 F1 | 	sub	fp, #12
21118     09 13 52 F6 | 	abs	arg01, arg01 wc
2111c     1F 28 C6 C9 |  if_b	decod	local02, #31
21120     00 28 06 36 |  if_ae	mov	local02, #0
21124     EC 89 B0 FD | 	call	#__system___float_fromuns
21128     14 FB 61 F5 | 	xor	result1, local02
2112c     0C 4E 05 F1 | 	add	fp, #12
21130     A7 FA 61 FC | 	wrlong	result1, fp
21134     0C 4E 85 F1 | 	sub	fp, #12
21138                 | LR__2602
21138                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
21138     14 4E 05 F1 | 	add	fp, #20
2113c     A7 14 02 FB | 	rdlong	arg02, fp
21140     14 4E 85 F1 | 	sub	fp, #20
21144     1D 14 0E F2 | 	cmp	arg02, #29 wz
21148     24 00 90 5D |  if_ne	jmp	#LR__2603
2114c     14 4E 05 F1 | 	add	fp, #20
21150     A7 3C 68 FC | 	wrlong	#30, fp
21154     08 4E 85 F1 | 	sub	fp, #8
21158     A7 12 02 FB | 	rdlong	arg01, fp
2115c     0C 4E 85 F1 | 	sub	fp, #12
21160     B0 89 B0 FD | 	call	#__system___float_fromuns
21164     0C 4E 05 F1 | 	add	fp, #12
21168     A7 FA 61 FC | 	wrlong	result1, fp
2116c     0C 4E 85 F1 | 	sub	fp, #12
21170                 | LR__2603
21170                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
21170     08 4E 05 F1 | 	add	fp, #8
21174     A7 14 02 FB | 	rdlong	arg02, fp
21178     08 4E 85 F1 | 	sub	fp, #8
2117c     1E 14 0E F2 | 	cmp	arg02, #30 wz
21180     14 4E 05 A1 |  if_e	add	fp, #20
21184     A7 26 02 AB |  if_e	rdlong	local01, fp
21188     14 4E 85 A1 |  if_e	sub	fp, #20
2118c     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
21190     1C 00 90 5D |  if_ne	jmp	#LR__2604
21194     A7 12 02 FB | 	rdlong	arg01, fp
21198     0C 4E 05 F1 | 	add	fp, #12
2119c     A7 14 02 FB | 	rdlong	arg02, fp
211a0     0C 4E 85 F1 | 	sub	fp, #12
211a4     78 9C B0 FD | 	call	#__system____builtin_powf
211a8     A7 FA 61 FC | 	wrlong	result1, fp
211ac     10 00 90 FD | 	jmp	#LR__2605
211b0                 | LR__2604
211b0     A7 1A 68 FC | 	wrlong	#13, fp
211b4     08 4E 05 F1 | 	add	fp, #8
211b8     A7 FE 69 FC | 	wrlong	#255, fp
211bc     08 4E 85 F1 | 	sub	fp, #8
211c0                 | LR__2605
211c0     A7 12 02 F6 | 	mov	arg01, fp
211c4     D8 C5 BE FD | 	call	#_push
211c8     A7 F0 03 F6 | 	mov	ptra, fp
211cc     B2 00 A0 FD | 	call	#popregs_
211d0                 | _do_power_ret
211d0     2D 00 64 FD | 	ret
211d4                 | 
211d4                 | ' 
211d4                 | ' '--------------------------------- SHL
211d4                 | ' 
211d4                 | ' sub do_shl 
211d4                 | _do_shl
211d4     03 4A 05 F6 | 	mov	COUNT_, #3
211d8     A8 00 A0 FD | 	call	#pushregs_
211dc     18 F0 07 F1 | 	add	ptra, #24
211e0     24 C5 BE FD | 	call	#_pop
211e4     FD 12 02 F6 | 	mov	arg01, result1
211e8     FE 26 02 F6 | 	mov	local01, result2
211ec     FF 28 02 F6 | 	mov	local02, result3
211f0     0C 4E 05 F1 | 	add	fp, #12
211f4     A7 12 62 FC | 	wrlong	arg01, fp
211f8     04 4E 05 F1 | 	add	fp, #4
211fc     A7 26 62 FC | 	wrlong	local01, fp
21200     04 4E 05 F1 | 	add	fp, #4
21204     A7 28 62 FC | 	wrlong	local02, fp
21208     14 4E 85 F1 | 	sub	fp, #20
2120c     F8 C4 BE FD | 	call	#_pop
21210     FF 2A 02 F6 | 	mov	local03, result3
21214     A7 FA 61 FC | 	wrlong	result1, fp
21218     04 4E 05 F1 | 	add	fp, #4
2121c     A7 FC 61 FC | 	wrlong	result2, fp
21220     04 4E 05 F1 | 	add	fp, #4
21224     A7 2A 62 FC | 	wrlong	local03, fp
21228                 | ' 
21228                 | ' t2=pop()
21228                 | ' t1=pop()
21228                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
21228     08 4E 85 F1 | 	sub	fp, #8
2122c     1C 2A 0E F2 | 	cmp	local03, #28 wz
21230     A7 2A 02 AB |  if_e	rdlong	local03, fp
21234     A7 2A 62 AC |  if_e	wrlong	local03, fp
21238     08 4E 05 A1 |  if_e	add	fp, #8
2123c     A7 3A 68 AC |  if_e	wrlong	#29, fp
21240     08 4E 85 A1 |  if_e	sub	fp, #8
21244                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
21244     14 4E 05 F1 | 	add	fp, #20
21248     A7 2A 02 FB | 	rdlong	local03, fp
2124c     14 4E 85 F1 | 	sub	fp, #20
21250     1C 2A 0E F2 | 	cmp	local03, #28 wz
21254     18 00 90 5D |  if_ne	jmp	#LR__2610
21258     0C 4E 05 F1 | 	add	fp, #12
2125c     A7 2A 02 FB | 	rdlong	local03, fp
21260     A7 2A 62 FC | 	wrlong	local03, fp
21264     08 4E 05 F1 | 	add	fp, #8
21268     A7 3A 68 FC | 	wrlong	#29, fp
2126c     14 4E 85 F1 | 	sub	fp, #20
21270                 | LR__2610
21270                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
21270     08 4E 05 F1 | 	add	fp, #8
21274     A7 2A 02 FB | 	rdlong	local03, fp
21278     08 4E 85 F1 | 	sub	fp, #8
2127c     1F 2A 0E F2 | 	cmp	local03, #31 wz
21280     14 4E 05 51 |  if_ne	add	fp, #20
21284     A7 28 02 5B |  if_ne	rdlong	local02, fp
21288     14 4E 85 51 |  if_ne	sub	fp, #20
2128c     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
21290     08 4E 05 51 |  if_ne	add	fp, #8
21294     A7 2A 02 5B |  if_ne	rdlong	local03, fp
21298     08 4E 85 51 |  if_ne	sub	fp, #8
2129c     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
212a0     14 4E 05 51 |  if_ne	add	fp, #20
212a4     14 4E 85 51 |  if_ne	sub	fp, #20
212a8     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
212ac     A7 0C 68 AC |  if_e	wrlong	#6, fp
212b0     08 4E 05 A1 |  if_e	add	fp, #8
212b4     A7 FE 69 AC |  if_e	wrlong	#255, fp
212b8     08 4E 85 A1 |  if_e	sub	fp, #8
212bc     18 00 90 AD |  if_e	jmp	#LR__2611
212c0     A7 2A 02 FB | 	rdlong	local03, fp
212c4     0C 4E 05 F1 | 	add	fp, #12
212c8     A7 26 02 FB | 	rdlong	local01, fp
212cc     0C 4E 85 F1 | 	sub	fp, #12
212d0     13 2B 62 F0 | 	shl	local03, local01
212d4     A7 2A 62 FC | 	wrlong	local03, fp
212d8                 | LR__2611
212d8     A7 12 02 F6 | 	mov	arg01, fp
212dc     C0 C4 BE FD | 	call	#_push
212e0     A7 F0 03 F6 | 	mov	ptra, fp
212e4     B2 00 A0 FD | 	call	#popregs_
212e8                 | _do_shl_ret
212e8     2D 00 64 FD | 	ret
212ec                 | 
212ec                 | ' 
212ec                 | ' '--------------------------------- SHR
212ec                 | ' 
212ec                 | ' sub do_shr 
212ec                 | _do_shr
212ec     03 4A 05 F6 | 	mov	COUNT_, #3
212f0     A8 00 A0 FD | 	call	#pushregs_
212f4     18 F0 07 F1 | 	add	ptra, #24
212f8     0C C4 BE FD | 	call	#_pop
212fc     FD 12 02 F6 | 	mov	arg01, result1
21300     FE 26 02 F6 | 	mov	local01, result2
21304     FF 28 02 F6 | 	mov	local02, result3
21308     0C 4E 05 F1 | 	add	fp, #12
2130c     A7 12 62 FC | 	wrlong	arg01, fp
21310     04 4E 05 F1 | 	add	fp, #4
21314     A7 26 62 FC | 	wrlong	local01, fp
21318     04 4E 05 F1 | 	add	fp, #4
2131c     A7 28 62 FC | 	wrlong	local02, fp
21320     14 4E 85 F1 | 	sub	fp, #20
21324     E0 C3 BE FD | 	call	#_pop
21328     FF 2A 02 F6 | 	mov	local03, result3
2132c     A7 FA 61 FC | 	wrlong	result1, fp
21330     04 4E 05 F1 | 	add	fp, #4
21334     A7 FC 61 FC | 	wrlong	result2, fp
21338     04 4E 05 F1 | 	add	fp, #4
2133c     A7 2A 62 FC | 	wrlong	local03, fp
21340                 | ' 
21340                 | ' t2=pop()
21340                 | ' t1=pop()
21340                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
21340     08 4E 85 F1 | 	sub	fp, #8
21344     1C 2A 0E F2 | 	cmp	local03, #28 wz
21348     A7 2A 02 AB |  if_e	rdlong	local03, fp
2134c     A7 2A 62 AC |  if_e	wrlong	local03, fp
21350     08 4E 05 A1 |  if_e	add	fp, #8
21354     A7 3A 68 AC |  if_e	wrlong	#29, fp
21358     08 4E 85 A1 |  if_e	sub	fp, #8
2135c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
2135c     14 4E 05 F1 | 	add	fp, #20
21360     A7 2A 02 FB | 	rdlong	local03, fp
21364     14 4E 85 F1 | 	sub	fp, #20
21368     1C 2A 0E F2 | 	cmp	local03, #28 wz
2136c     18 00 90 5D |  if_ne	jmp	#LR__2620
21370     0C 4E 05 F1 | 	add	fp, #12
21374     A7 2A 02 FB | 	rdlong	local03, fp
21378     A7 2A 62 FC | 	wrlong	local03, fp
2137c     08 4E 05 F1 | 	add	fp, #8
21380     A7 3A 68 FC | 	wrlong	#29, fp
21384     14 4E 85 F1 | 	sub	fp, #20
21388                 | LR__2620
21388                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
21388     08 4E 05 F1 | 	add	fp, #8
2138c     A7 2A 02 FB | 	rdlong	local03, fp
21390     08 4E 85 F1 | 	sub	fp, #8
21394     1F 2A 0E F2 | 	cmp	local03, #31 wz
21398     14 4E 05 51 |  if_ne	add	fp, #20
2139c     A7 28 02 5B |  if_ne	rdlong	local02, fp
213a0     14 4E 85 51 |  if_ne	sub	fp, #20
213a4     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
213a8     08 4E 05 51 |  if_ne	add	fp, #8
213ac     A7 2A 02 5B |  if_ne	rdlong	local03, fp
213b0     08 4E 85 51 |  if_ne	sub	fp, #8
213b4     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
213b8     14 4E 05 51 |  if_ne	add	fp, #20
213bc     14 4E 85 51 |  if_ne	sub	fp, #20
213c0     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
213c4     A7 0C 68 AC |  if_e	wrlong	#6, fp
213c8     08 4E 05 A1 |  if_e	add	fp, #8
213cc     A7 FE 69 AC |  if_e	wrlong	#255, fp
213d0     08 4E 85 A1 |  if_e	sub	fp, #8
213d4     18 00 90 AD |  if_e	jmp	#LR__2621
213d8     A7 2A 02 FB | 	rdlong	local03, fp
213dc     0C 4E 05 F1 | 	add	fp, #12
213e0     A7 26 02 FB | 	rdlong	local01, fp
213e4     0C 4E 85 F1 | 	sub	fp, #12
213e8     13 2B 42 F0 | 	shr	local03, local01
213ec     A7 2A 62 FC | 	wrlong	local03, fp
213f0                 | LR__2621
213f0     A7 12 02 F6 | 	mov	arg01, fp
213f4     A8 C3 BE FD | 	call	#_push
213f8     A7 F0 03 F6 | 	mov	ptra, fp
213fc     B2 00 A0 FD | 	call	#popregs_
21400                 | _do_shr_ret
21400     2D 00 64 FD | 	ret
21404                 | 
21404                 | ' 
21404                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
21404                 | ' 
21404                 | ' ''----------------------------------------------------------------------------------------------------
21404                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
21404                 | ' ''----------------------------------------------------------------------------------------------------
21404                 | ' 
21404                 | ' ''--------------------------- Command function pointers
21404                 | ' 
21404                 | ' sub init_commands
21404                 | _init_commands
21404                 | ' 
21404                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
21404     00 00 06 F6 | 	mov	_var01, #0
21408     97 16 48 FB | 	callpa	#(@LR__2631-@LR__2630)>>2,fcache_load_ptr_
2140c                 | LR__2630
2140c     00 FB 01 F6 | 	mov	result1, _var01
21410     02 FA 65 F0 | 	shl	result1, #2
21414     43 00 00 FF 
21418     60 E4 05 F1 | 	add	objptr, ##34400
2141c     F2 FA 01 F1 | 	add	result1, objptr
21420     43 00 00 FF 
21424     60 E4 85 F1 | 	sub	objptr, ##34400
21428     FD E4 61 FC | 	wrlong	objptr, result1
2142c     01 00 06 F1 | 	add	_var01, #1
21430     00 01 56 F2 | 	cmps	_var01, #256 wc
21434     D4 FF 9F CD |  if_b	jmp	#LR__2630
21438                 | LR__2631
21438     F2 FA 01 F6 | 	mov	result1, objptr
2143c     14 FA 25 F4 | 	bith	result1, #20
21440     43 00 00 FF 
21444     64 E4 05 F1 | 	add	objptr, ##34404
21448     F2 FA 61 FC | 	wrlong	result1, objptr
2144c     43 00 00 FF 
21450     64 E4 85 F1 | 	sub	objptr, ##34404
21454     F2 FA 01 F6 | 	mov	result1, objptr
21458     15 FA 25 F4 | 	bith	result1, #21
2145c     43 00 00 FF 
21460     68 E4 05 F1 | 	add	objptr, ##34408
21464     F2 FA 61 FC | 	wrlong	result1, objptr
21468     43 00 00 FF 
2146c     68 E4 85 F1 | 	sub	objptr, ##34408
21470     F2 FA 01 F6 | 	mov	result1, objptr
21474     34 FA 25 F4 | 	bith	result1, #52
21478     43 00 00 FF 
2147c     6C E4 05 F1 | 	add	objptr, ##34412
21480     F2 FA 61 FC | 	wrlong	result1, objptr
21484     43 00 00 FF 
21488     6C E4 85 F1 | 	sub	objptr, ##34412
2148c     F2 FA 01 F6 | 	mov	result1, objptr
21490     16 FA 25 F4 | 	bith	result1, #22
21494     43 00 00 FF 
21498     74 E4 05 F1 | 	add	objptr, ##34420
2149c     F2 FA 61 FC | 	wrlong	result1, objptr
214a0     43 00 00 FF 
214a4     74 E4 85 F1 | 	sub	objptr, ##34420
214a8     F2 FA 01 F6 | 	mov	result1, objptr
214ac     00 28 00 FF 
214b0     00 FA 45 F5 | 	or	result1, ##5242880
214b4     43 00 00 FF 
214b8     78 E4 05 F1 | 	add	objptr, ##34424
214bc     F2 FA 61 FC | 	wrlong	result1, objptr
214c0     43 00 00 FF 
214c4     78 E4 85 F1 | 	sub	objptr, ##34424
214c8     F2 FA 01 F6 | 	mov	result1, objptr
214cc     35 FA 25 F4 | 	bith	result1, #53
214d0     43 00 00 FF 
214d4     7C E4 05 F1 | 	add	objptr, ##34428
214d8     F2 FA 61 FC | 	wrlong	result1, objptr
214dc     43 00 00 FF 
214e0     7C E4 85 F1 | 	sub	objptr, ##34428
214e4     F2 FA 01 F6 | 	mov	result1, objptr
214e8     54 FA 25 F4 | 	bith	result1, #84
214ec     43 00 00 FF 
214f0     80 E4 05 F1 | 	add	objptr, ##34432
214f4     F2 FA 61 FC | 	wrlong	result1, objptr
214f8     43 00 00 FF 
214fc     80 E4 85 F1 | 	sub	objptr, ##34432
21500     F2 FA 01 F6 | 	mov	result1, objptr
21504     17 FA 25 F4 | 	bith	result1, #23
21508     43 00 00 FF 
2150c     84 E4 05 F1 | 	add	objptr, ##34436
21510     F2 FA 61 FC | 	wrlong	result1, objptr
21514     43 00 00 FF 
21518     84 E4 85 F1 | 	sub	objptr, ##34436
2151c     F2 FA 01 F6 | 	mov	result1, objptr
21520     00 48 00 FF 
21524     00 FA 45 F5 | 	or	result1, ##9437184
21528     43 00 00 FF 
2152c     88 E4 05 F1 | 	add	objptr, ##34440
21530     F2 FA 61 FC | 	wrlong	result1, objptr
21534     43 00 00 FF 
21538     88 E4 85 F1 | 	sub	objptr, ##34440
2153c     F2 FA 01 F6 | 	mov	result1, objptr
21540     00 50 00 FF 
21544     00 FA 45 F5 | 	or	result1, ##10485760
21548     43 00 00 FF 
2154c     8C E4 05 F1 | 	add	objptr, ##34444
21550     F2 FA 61 FC | 	wrlong	result1, objptr
21554     43 00 00 FF 
21558     8C E4 85 F1 | 	sub	objptr, ##34444
2155c     F2 FA 01 F6 | 	mov	result1, objptr
21560     00 58 00 FF 
21564     00 FA 45 F5 | 	or	result1, ##11534336
21568     43 00 00 FF 
2156c     90 E4 05 F1 | 	add	objptr, ##34448
21570     F2 FA 61 FC | 	wrlong	result1, objptr
21574     43 00 00 FF 
21578     90 E4 85 F1 | 	sub	objptr, ##34448
2157c     F2 FA 01 F6 | 	mov	result1, objptr
21580     36 FA 25 F4 | 	bith	result1, #54
21584     43 00 00 FF 
21588     A4 E4 05 F1 | 	add	objptr, ##34468
2158c     F2 FA 61 FC | 	wrlong	result1, objptr
21590     43 00 00 FF 
21594     A4 E4 85 F1 | 	sub	objptr, ##34468
21598     F2 FA 01 F6 | 	mov	result1, objptr
2159c     00 68 00 FF 
215a0     00 FA 45 F5 | 	or	result1, ##13631488
215a4     43 00 00 FF 
215a8     D4 E4 05 F1 | 	add	objptr, ##34516
215ac     F2 FA 61 FC | 	wrlong	result1, objptr
215b0     43 00 00 FF 
215b4     D4 E4 85 F1 | 	sub	objptr, ##34516
215b8     F2 FA 01 F6 | 	mov	result1, objptr
215bc     00 68 00 FF 
215c0     00 FA 45 F5 | 	or	result1, ##13631488
215c4     43 00 00 FF 
215c8     D0 E4 05 F1 | 	add	objptr, ##34512
215cc     F2 FA 61 FC | 	wrlong	result1, objptr
215d0     43 00 00 FF 
215d4     D0 E4 85 F1 | 	sub	objptr, ##34512
215d8     F2 FA 01 F6 | 	mov	result1, objptr
215dc     00 68 00 FF 
215e0     00 FA 45 F5 | 	or	result1, ##13631488
215e4     43 00 00 FF 
215e8     D8 E4 05 F1 | 	add	objptr, ##34520
215ec     F2 FA 61 FC | 	wrlong	result1, objptr
215f0     43 00 00 FF 
215f4     D8 E4 85 F1 | 	sub	objptr, ##34520
215f8     F2 FA 01 F6 | 	mov	result1, objptr
215fc     00 68 00 FF 
21600     00 FA 45 F5 | 	or	result1, ##13631488
21604     43 00 00 FF 
21608     DC E4 05 F1 | 	add	objptr, ##34524
2160c     F2 FA 61 FC | 	wrlong	result1, objptr
21610     43 00 00 FF 
21614     DC E4 85 F1 | 	sub	objptr, ##34524
21618     F2 FA 01 F6 | 	mov	result1, objptr
2161c     00 68 00 FF 
21620     00 FA 45 F5 | 	or	result1, ##13631488
21624     43 00 00 FF 
21628     0C E5 05 F1 | 	add	objptr, ##34572
2162c     F2 FA 61 FC | 	wrlong	result1, objptr
21630     43 00 00 FF 
21634     0C E5 85 F1 | 	sub	objptr, ##34572
21638     F2 FA 01 F6 | 	mov	result1, objptr
2163c     55 FA 25 F4 | 	bith	result1, #85
21640     43 00 00 FF 
21644     BC E4 05 F1 | 	add	objptr, ##34492
21648     F2 FA 61 FC | 	wrlong	result1, objptr
2164c     43 00 00 FF 
21650     BC E4 85 F1 | 	sub	objptr, ##34492
21654     F2 FA 01 F6 | 	mov	result1, objptr
21658     00 68 00 FF 
2165c     00 FA 45 F5 | 	or	result1, ##13631488
21660     43 00 00 FF 
21664     10 E5 05 F1 | 	add	objptr, ##34576
21668     F2 FA 61 FC | 	wrlong	result1, objptr
2166c     43 00 00 FF 
21670     10 E5 85 F1 | 	sub	objptr, ##34576
21674     F2 FA 01 F6 | 	mov	result1, objptr
21678     00 68 00 FF 
2167c     00 FA 45 F5 | 	or	result1, ##13631488
21680     43 00 00 FF 
21684     E0 E4 05 F1 | 	add	objptr, ##34528
21688     F2 FA 61 FC | 	wrlong	result1, objptr
2168c     43 00 00 FF 
21690     E0 E4 85 F1 | 	sub	objptr, ##34528
21694     F2 FA 01 F6 | 	mov	result1, objptr
21698     00 68 00 FF 
2169c     00 FA 45 F5 | 	or	result1, ##13631488
216a0     43 00 00 FF 
216a4     E4 E4 05 F1 | 	add	objptr, ##34532
216a8     F2 FA 61 FC | 	wrlong	result1, objptr
216ac     43 00 00 FF 
216b0     E4 E4 85 F1 | 	sub	objptr, ##34532
216b4     F2 FA 01 F6 | 	mov	result1, objptr
216b8     00 68 00 FF 
216bc     00 FA 45 F5 | 	or	result1, ##13631488
216c0     43 00 00 FF 
216c4     E8 E4 05 F1 | 	add	objptr, ##34536
216c8     F2 FA 61 FC | 	wrlong	result1, objptr
216cc     43 00 00 FF 
216d0     E8 E4 85 F1 | 	sub	objptr, ##34536
216d4     F2 FA 01 F6 | 	mov	result1, objptr
216d8     74 FA 25 F4 | 	bith	result1, #116
216dc     43 00 00 FF 
216e0     60 E5 05 F1 | 	add	objptr, ##34656
216e4     F2 FA 61 FC | 	wrlong	result1, objptr
216e8     43 00 00 FF 
216ec     60 E5 85 F1 | 	sub	objptr, ##34656
216f0     F2 FA 01 F6 | 	mov	result1, objptr
216f4     18 FA 25 F4 | 	bith	result1, #24
216f8     43 00 00 FF 
216fc     64 E5 05 F1 | 	add	objptr, ##34660
21700     F2 FA 61 FC | 	wrlong	result1, objptr
21704     43 00 00 FF 
21708     64 E5 85 F1 | 	sub	objptr, ##34660
2170c     F2 FA 01 F6 | 	mov	result1, objptr
21710     00 88 00 FF 
21714     00 FA 45 F5 | 	or	result1, ##17825792
21718     43 00 00 FF 
2171c     68 E5 05 F1 | 	add	objptr, ##34664
21720     F2 FA 61 FC | 	wrlong	result1, objptr
21724     43 00 00 FF 
21728     68 E5 85 F1 | 	sub	objptr, ##34664
2172c     F2 FA 01 F6 | 	mov	result1, objptr
21730     00 90 00 FF 
21734     00 FA 45 F5 | 	or	result1, ##18874368
21738     43 00 00 FF 
2173c     6C E5 05 F1 | 	add	objptr, ##34668
21740     F2 FA 61 FC | 	wrlong	result1, objptr
21744     43 00 00 FF 
21748     6C E5 85 F1 | 	sub	objptr, ##34668
2174c     F2 FA 01 F6 | 	mov	result1, objptr
21750     00 98 00 FF 
21754     00 FA 45 F5 | 	or	result1, ##19922944
21758     43 00 00 FF 
2175c     70 E5 05 F1 | 	add	objptr, ##34672
21760     F2 FA 61 FC | 	wrlong	result1, objptr
21764     43 00 00 FF 
21768     70 E5 85 F1 | 	sub	objptr, ##34672
2176c     F2 FA 01 F6 | 	mov	result1, objptr
21770     00 A0 00 FF 
21774     00 FA 45 F5 | 	or	result1, ##20971520
21778     43 00 00 FF 
2177c     74 E5 05 F1 | 	add	objptr, ##34676
21780     F2 FA 61 FC | 	wrlong	result1, objptr
21784     43 00 00 FF 
21788     74 E5 85 F1 | 	sub	objptr, ##34676
2178c     F2 FA 01 F6 | 	mov	result1, objptr
21790     00 A8 00 FF 
21794     00 FA 45 F5 | 	or	result1, ##22020096
21798     43 00 00 FF 
2179c     78 E5 05 F1 | 	add	objptr, ##34680
217a0     F2 FA 61 FC | 	wrlong	result1, objptr
217a4     43 00 00 FF 
217a8     78 E5 85 F1 | 	sub	objptr, ##34680
217ac     F2 FA 01 F6 | 	mov	result1, objptr
217b0     00 B0 00 FF 
217b4     00 FA 45 F5 | 	or	result1, ##23068672
217b8     43 00 00 FF 
217bc     7C E5 05 F1 | 	add	objptr, ##34684
217c0     F2 FA 61 FC | 	wrlong	result1, objptr
217c4     43 00 00 FF 
217c8     7C E5 85 F1 | 	sub	objptr, ##34684
217cc     F2 FA 01 F6 | 	mov	result1, objptr
217d0     00 B8 00 FF 
217d4     00 FA 45 F5 | 	or	result1, ##24117248
217d8     43 00 00 FF 
217dc     80 E5 05 F1 | 	add	objptr, ##34688
217e0     F2 FA 61 FC | 	wrlong	result1, objptr
217e4     43 00 00 FF 
217e8     80 E5 85 F1 | 	sub	objptr, ##34688
217ec     F2 FA 01 F6 | 	mov	result1, objptr
217f0     37 FA 25 F4 | 	bith	result1, #55
217f4     43 00 00 FF 
217f8     84 E5 05 F1 | 	add	objptr, ##34692
217fc     F2 FA 61 FC | 	wrlong	result1, objptr
21800     43 00 00 FF 
21804     84 E5 85 F1 | 	sub	objptr, ##34692
21808     F2 FA 01 F6 | 	mov	result1, objptr
2180c     00 C8 00 FF 
21810     00 FA 45 F5 | 	or	result1, ##26214400
21814     43 00 00 FF 
21818     88 E5 05 F1 | 	add	objptr, ##34696
2181c     F2 FA 61 FC | 	wrlong	result1, objptr
21820     43 00 00 FF 
21824     88 E5 85 F1 | 	sub	objptr, ##34696
21828     F2 FA 01 F6 | 	mov	result1, objptr
2182c     00 D0 00 FF 
21830     00 FA 45 F5 | 	or	result1, ##27262976
21834     43 00 00 FF 
21838     8C E5 05 F1 | 	add	objptr, ##34700
2183c     F2 FA 61 FC | 	wrlong	result1, objptr
21840     43 00 00 FF 
21844     8C E5 85 F1 | 	sub	objptr, ##34700
21848     F2 FA 01 F6 | 	mov	result1, objptr
2184c     00 D8 00 FF 
21850     00 FA 45 F5 | 	or	result1, ##28311552
21854     43 00 00 FF 
21858     90 E5 05 F1 | 	add	objptr, ##34704
2185c     F2 FA 61 FC | 	wrlong	result1, objptr
21860     43 00 00 FF 
21864     90 E5 85 F1 | 	sub	objptr, ##34704
21868     F2 FA 01 F6 | 	mov	result1, objptr
2186c     56 FA 25 F4 | 	bith	result1, #86
21870     43 00 00 FF 
21874     94 E5 05 F1 | 	add	objptr, ##34708
21878     F2 FA 61 FC | 	wrlong	result1, objptr
2187c     43 00 00 FF 
21880     94 E5 85 F1 | 	sub	objptr, ##34708
21884     F2 FA 01 F6 | 	mov	result1, objptr
21888     00 E8 00 FF 
2188c     00 FA 45 F5 | 	or	result1, ##30408704
21890     45 00 00 FF 
21894     5C E4 05 F1 | 	add	objptr, ##35420
21898     F2 FA 61 FC | 	wrlong	result1, objptr
2189c     45 00 00 FF 
218a0     5C E4 85 F1 | 	sub	objptr, ##35420
218a4     F2 FA 01 F6 | 	mov	result1, objptr
218a8     75 FA 25 F4 | 	bith	result1, #117
218ac     43 00 00 FF 
218b0     98 E5 05 F1 | 	add	objptr, ##34712
218b4     F2 FA 61 FC | 	wrlong	result1, objptr
218b8     43 00 00 FF 
218bc     98 E5 85 F1 | 	sub	objptr, ##34712
218c0     F2 FA 01 F6 | 	mov	result1, objptr
218c4     94 FA 25 F4 | 	bith	result1, #148
218c8     43 00 00 FF 
218cc     AC E5 05 F1 | 	add	objptr, ##34732
218d0     F2 FA 61 FC | 	wrlong	result1, objptr
218d4     43 00 00 FF 
218d8     AC E5 85 F1 | 	sub	objptr, ##34732
218dc     F2 FA 01 F6 | 	mov	result1, objptr
218e0     19 FA 25 F4 | 	bith	result1, #25
218e4     43 00 00 FF 
218e8     9C E5 05 F1 | 	add	objptr, ##34716
218ec     F2 FA 61 FC | 	wrlong	result1, objptr
218f0     43 00 00 FF 
218f4     9C E5 85 F1 | 	sub	objptr, ##34716
218f8     F2 FA 01 F6 | 	mov	result1, objptr
218fc     00 08 01 FF 
21900     00 FA 45 F5 | 	or	result1, ##34603008
21904     43 00 00 FF 
21908     B8 E4 05 F1 | 	add	objptr, ##34488
2190c     F2 FA 61 FC | 	wrlong	result1, objptr
21910     43 00 00 FF 
21914     B8 E4 85 F1 | 	sub	objptr, ##34488
21918     F2 FA 01 F6 | 	mov	result1, objptr
2191c     00 10 01 FF 
21920     00 FA 45 F5 | 	or	result1, ##35651584
21924     43 00 00 FF 
21928     A4 E5 05 F1 | 	add	objptr, ##34724
2192c     F2 FA 61 FC | 	wrlong	result1, objptr
21930     43 00 00 FF 
21934     A4 E5 85 F1 | 	sub	objptr, ##34724
21938     F2 FA 01 F6 | 	mov	result1, objptr
2193c     00 18 01 FF 
21940     00 FA 45 F5 | 	or	result1, ##36700160
21944     43 00 00 FF 
21948     A8 E5 05 F1 | 	add	objptr, ##34728
2194c     F2 FA 61 FC | 	wrlong	result1, objptr
21950     43 00 00 FF 
21954     A8 E5 85 F1 | 	sub	objptr, ##34728
21958     F2 FA 01 F6 | 	mov	result1, objptr
2195c     00 20 01 FF 
21960     00 FA 45 F5 | 	or	result1, ##37748736
21964     43 00 00 FF 
21968     B4 E5 05 F1 | 	add	objptr, ##34740
2196c     F2 FA 61 FC | 	wrlong	result1, objptr
21970     43 00 00 FF 
21974     B4 E5 85 F1 | 	sub	objptr, ##34740
21978     F2 FA 01 F6 | 	mov	result1, objptr
2197c     00 28 01 FF 
21980     00 FA 45 F5 | 	or	result1, ##38797312
21984     43 00 00 FF 
21988     B8 E5 05 F1 | 	add	objptr, ##34744
2198c     F2 FA 61 FC | 	wrlong	result1, objptr
21990     43 00 00 FF 
21994     B8 E5 85 F1 | 	sub	objptr, ##34744
21998     F2 FA 01 F6 | 	mov	result1, objptr
2199c     00 30 01 FF 
219a0     00 FA 45 F5 | 	or	result1, ##39845888
219a4     43 00 00 FF 
219a8     BC E5 05 F1 | 	add	objptr, ##34748
219ac     F2 FA 61 FC | 	wrlong	result1, objptr
219b0     43 00 00 FF 
219b4     BC E5 85 F1 | 	sub	objptr, ##34748
219b8     F2 FA 01 F6 | 	mov	result1, objptr
219bc     00 38 01 FF 
219c0     00 FA 45 F5 | 	or	result1, ##40894464
219c4     43 00 00 FF 
219c8     C0 E5 05 F1 | 	add	objptr, ##34752
219cc     F2 FA 61 FC | 	wrlong	result1, objptr
219d0     43 00 00 FF 
219d4     C0 E5 85 F1 | 	sub	objptr, ##34752
219d8     F2 FA 01 F6 | 	mov	result1, objptr
219dc     00 40 01 FF 
219e0     00 FA 45 F5 | 	or	result1, ##41943040
219e4     43 00 00 FF 
219e8     C8 E5 05 F1 | 	add	objptr, ##34760
219ec     F2 FA 61 FC | 	wrlong	result1, objptr
219f0     43 00 00 FF 
219f4     C8 E5 85 F1 | 	sub	objptr, ##34760
219f8     F2 FA 01 F6 | 	mov	result1, objptr
219fc     00 08 01 FF 
21a00     00 FA 45 F5 | 	or	result1, ##34603008
21a04     43 00 00 FF 
21a08     CC E5 05 F1 | 	add	objptr, ##34764
21a0c     F2 FA 61 FC | 	wrlong	result1, objptr
21a10     43 00 00 FF 
21a14     CC E5 85 F1 | 	sub	objptr, ##34764
21a18     F2 FA 01 F6 | 	mov	result1, objptr
21a1c     00 48 01 FF 
21a20     00 FA 45 F5 | 	or	result1, ##42991616
21a24     43 00 00 FF 
21a28     CC E4 05 F1 | 	add	objptr, ##34508
21a2c     F2 FA 61 FC | 	wrlong	result1, objptr
21a30     43 00 00 FF 
21a34     CC E4 85 F1 | 	sub	objptr, ##34508
21a38     F2 FA 01 F6 | 	mov	result1, objptr
21a3c     00 50 01 FF 
21a40     00 FA 45 F5 | 	or	result1, ##44040192
21a44     43 00 00 FF 
21a48     FC E4 05 F1 | 	add	objptr, ##34556
21a4c     F2 FA 61 FC | 	wrlong	result1, objptr
21a50     43 00 00 FF 
21a54     FC E4 85 F1 | 	sub	objptr, ##34556
21a58     F2 FA 01 F6 | 	mov	result1, objptr
21a5c     00 58 01 FF 
21a60     00 FA 45 F5 | 	or	result1, ##45088768
21a64     43 00 00 FF 
21a68     F8 E4 05 F1 | 	add	objptr, ##34552
21a6c     F2 FA 61 FC | 	wrlong	result1, objptr
21a70     43 00 00 FF 
21a74     F8 E4 85 F1 | 	sub	objptr, ##34552
21a78     F2 FA 01 F6 | 	mov	result1, objptr
21a7c     00 60 01 FF 
21a80     00 FA 45 F5 | 	or	result1, ##46137344
21a84     43 00 00 FF 
21a88     9C E4 05 F1 | 	add	objptr, ##34460
21a8c     F2 FA 61 FC | 	wrlong	result1, objptr
21a90     43 00 00 FF 
21a94     9C E4 85 F1 | 	sub	objptr, ##34460
21a98     F2 FA 01 F6 | 	mov	result1, objptr
21a9c     00 68 01 FF 
21aa0     00 FA 45 F5 | 	or	result1, ##47185920
21aa4     43 00 00 FF 
21aa8     A0 E4 05 F1 | 	add	objptr, ##34464
21aac     F2 FA 61 FC | 	wrlong	result1, objptr
21ab0     43 00 00 FF 
21ab4     A0 E4 85 F1 | 	sub	objptr, ##34464
21ab8     F2 FA 01 F6 | 	mov	result1, objptr
21abc     00 70 01 FF 
21ac0     00 FA 45 F5 | 	or	result1, ##48234496
21ac4     43 00 00 FF 
21ac8     08 E5 05 F1 | 	add	objptr, ##34568
21acc     F2 FA 61 FC | 	wrlong	result1, objptr
21ad0     43 00 00 FF 
21ad4     08 E5 85 F1 | 	sub	objptr, ##34568
21ad8     F2 FA 01 F6 | 	mov	result1, objptr
21adc     00 78 01 FF 
21ae0     00 FA 45 F5 | 	or	result1, ##49283072
21ae4     43 00 00 FF 
21ae8     B0 E5 05 F1 | 	add	objptr, ##34736
21aec     F2 FA 61 FC | 	wrlong	result1, objptr
21af0     43 00 00 FF 
21af4     B0 E5 85 F1 | 	sub	objptr, ##34736
21af8     F2 FA 01 F6 | 	mov	result1, objptr
21afc     38 FA 25 F4 | 	bith	result1, #56
21b00     43 00 00 FF 
21b04     C4 E5 05 F1 | 	add	objptr, ##34756
21b08     F2 FA 61 FC | 	wrlong	result1, objptr
21b0c     43 00 00 FF 
21b10     C4 E5 85 F1 | 	sub	objptr, ##34756
21b14     F2 FA 01 F6 | 	mov	result1, objptr
21b18     00 88 01 FF 
21b1c     00 FA 45 F5 | 	or	result1, ##51380224
21b20     43 00 00 FF 
21b24     D0 E5 05 F1 | 	add	objptr, ##34768
21b28     F2 FA 61 FC | 	wrlong	result1, objptr
21b2c     43 00 00 FF 
21b30     D0 E5 85 F1 | 	sub	objptr, ##34768
21b34     F2 FA 01 F6 | 	mov	result1, objptr
21b38     00 90 01 FF 
21b3c     00 FA 45 F5 | 	or	result1, ##52428800
21b40     43 00 00 FF 
21b44     D4 E5 05 F1 | 	add	objptr, ##34772
21b48     F2 FA 61 FC | 	wrlong	result1, objptr
21b4c     43 00 00 FF 
21b50     D4 E5 85 F1 | 	sub	objptr, ##34772
21b54     F2 FA 01 F6 | 	mov	result1, objptr
21b58     00 98 01 FF 
21b5c     00 FA 45 F5 | 	or	result1, ##53477376
21b60     43 00 00 FF 
21b64     D8 E5 05 F1 | 	add	objptr, ##34776
21b68     F2 FA 61 FC | 	wrlong	result1, objptr
21b6c     43 00 00 FF 
21b70     D8 E5 85 F1 | 	sub	objptr, ##34776
21b74     F2 FA 01 F6 | 	mov	result1, objptr
21b78     00 A0 01 FF 
21b7c     00 FA 45 F5 | 	or	result1, ##54525952
21b80     43 00 00 FF 
21b84     DC E5 05 F1 | 	add	objptr, ##34780
21b88     F2 FA 61 FC | 	wrlong	result1, objptr
21b8c     43 00 00 FF 
21b90     DC E5 85 F1 | 	sub	objptr, ##34780
21b94     F2 FA 01 F6 | 	mov	result1, objptr
21b98     00 A8 01 FF 
21b9c     00 FA 45 F5 | 	or	result1, ##55574528
21ba0     43 00 00 FF 
21ba4     E0 E5 05 F1 | 	add	objptr, ##34784
21ba8     F2 FA 61 FC | 	wrlong	result1, objptr
21bac     43 00 00 FF 
21bb0     E0 E5 85 F1 | 	sub	objptr, ##34784
21bb4     F2 FA 01 F6 | 	mov	result1, objptr
21bb8     00 B0 01 FF 
21bbc     00 FA 45 F5 | 	or	result1, ##56623104
21bc0     43 00 00 FF 
21bc4     E4 E5 05 F1 | 	add	objptr, ##34788
21bc8     F2 FA 61 FC | 	wrlong	result1, objptr
21bcc     43 00 00 FF 
21bd0     E4 E5 85 F1 | 	sub	objptr, ##34788
21bd4     F2 FA 01 F6 | 	mov	result1, objptr
21bd8     94 FA 25 F4 | 	bith	result1, #148
21bdc     43 00 00 FF 
21be0     AC E5 05 F1 | 	add	objptr, ##34732
21be4     F2 FA 61 FC | 	wrlong	result1, objptr
21be8     43 00 00 FF 
21bec     AC E5 85 F1 | 	sub	objptr, ##34732
21bf0     F2 FA 01 F6 | 	mov	result1, objptr
21bf4     00 B8 01 FF 
21bf8     00 FA 45 F5 | 	or	result1, ##57671680
21bfc     43 00 00 FF 
21c00     EC E5 05 F1 | 	add	objptr, ##34796
21c04     F2 FA 61 FC | 	wrlong	result1, objptr
21c08     43 00 00 FF 
21c0c     EC E5 85 F1 | 	sub	objptr, ##34796
21c10     F2 FA 01 F6 | 	mov	result1, objptr
21c14     57 FA 25 F4 | 	bith	result1, #87
21c18     43 00 00 FF 
21c1c     E8 E5 05 F1 | 	add	objptr, ##34792
21c20     F2 FA 61 FC | 	wrlong	result1, objptr
21c24     43 00 00 FF 
21c28     E8 E5 85 F1 | 	sub	objptr, ##34792
21c2c     F2 FA 01 F6 | 	mov	result1, objptr
21c30     00 C8 01 FF 
21c34     00 FA 45 F5 | 	or	result1, ##59768832
21c38     44 00 00 FF 
21c3c     00 E4 05 F1 | 	add	objptr, ##34816
21c40     F2 FA 61 FC | 	wrlong	result1, objptr
21c44     44 00 00 FF 
21c48     00 E4 85 F1 | 	sub	objptr, ##34816
21c4c     F2 FA 01 F6 | 	mov	result1, objptr
21c50     00 D0 01 FF 
21c54     00 FA 45 F5 | 	or	result1, ##60817408
21c58     44 00 00 FF 
21c5c     04 E4 05 F1 | 	add	objptr, ##34820
21c60     F2 FA 61 FC | 	wrlong	result1, objptr
21c64     44 00 00 FF 
21c68     04 E4 85 F1 | 	sub	objptr, ##34820
21c6c     F2 FA 01 F6 | 	mov	result1, objptr
21c70     00 D8 01 FF 
21c74     00 FA 45 F5 | 	or	result1, ##61865984
21c78     43 00 00 FF 
21c7c     F0 E5 05 F1 | 	add	objptr, ##34800
21c80     F2 FA 61 FC | 	wrlong	result1, objptr
21c84     43 00 00 FF 
21c88     F0 E5 85 F1 | 	sub	objptr, ##34800
21c8c     F2 FA 01 F6 | 	mov	result1, objptr
21c90     76 FA 25 F4 | 	bith	result1, #118
21c94     43 00 00 FF 
21c98     F4 E5 05 F1 | 	add	objptr, ##34804
21c9c     F2 FA 61 FC | 	wrlong	result1, objptr
21ca0     43 00 00 FF 
21ca4     F4 E5 85 F1 | 	sub	objptr, ##34804
21ca8     F2 FA 01 F6 | 	mov	result1, objptr
21cac     00 E8 01 FF 
21cb0     00 FA 45 F5 | 	or	result1, ##63963136
21cb4     43 00 00 FF 
21cb8     F8 E5 05 F1 | 	add	objptr, ##34808
21cbc     F2 FA 61 FC | 	wrlong	result1, objptr
21cc0     43 00 00 FF 
21cc4     F8 E5 85 F1 | 	sub	objptr, ##34808
21cc8     F2 FA 01 F6 | 	mov	result1, objptr
21ccc     95 FA 25 F4 | 	bith	result1, #149
21cd0     43 00 00 FF 
21cd4     FC E5 05 F1 | 	add	objptr, ##34812
21cd8     F2 FA 61 FC | 	wrlong	result1, objptr
21cdc     43 00 00 FF 
21ce0     FC E5 85 F1 | 	sub	objptr, ##34812
21ce4     F2 FA 01 F6 | 	mov	result1, objptr
21ce8     B4 FA 25 F4 | 	bith	result1, #180
21cec     44 00 00 FF 
21cf0     0C E4 05 F1 | 	add	objptr, ##34828
21cf4     F2 FA 61 FC | 	wrlong	result1, objptr
21cf8     44 00 00 FF 
21cfc     0C E4 85 F1 | 	sub	objptr, ##34828
21d00     F2 FA 01 F6 | 	mov	result1, objptr
21d04     1A FA 25 F4 | 	bith	result1, #26
21d08     44 00 00 FF 
21d0c     08 E4 05 F1 | 	add	objptr, ##34824
21d10     F2 FA 61 FC | 	wrlong	result1, objptr
21d14     44 00 00 FF 
21d18     08 E4 85 F1 | 	sub	objptr, ##34824
21d1c     F2 FA 01 F6 | 	mov	result1, objptr
21d20     00 08 02 FF 
21d24     00 FA 45 F5 | 	or	result1, ##68157440
21d28     44 00 00 FF 
21d2c     18 E4 05 F1 | 	add	objptr, ##34840
21d30     F2 FA 61 FC | 	wrlong	result1, objptr
21d34     44 00 00 FF 
21d38     18 E4 85 F1 | 	sub	objptr, ##34840
21d3c     F2 FA 01 F6 | 	mov	result1, objptr
21d40     00 10 02 FF 
21d44     00 FA 45 F5 | 	or	result1, ##69206016
21d48     44 00 00 FF 
21d4c     14 E4 05 F1 | 	add	objptr, ##34836
21d50     F2 FA 61 FC | 	wrlong	result1, objptr
21d54     44 00 00 FF 
21d58     14 E4 85 F1 | 	sub	objptr, ##34836
21d5c     F2 FA 01 F6 | 	mov	result1, objptr
21d60     00 18 02 FF 
21d64     00 FA 45 F5 | 	or	result1, ##70254592
21d68     44 00 00 FF 
21d6c     10 E4 05 F1 | 	add	objptr, ##34832
21d70     F2 FA 61 FC | 	wrlong	result1, objptr
21d74     44 00 00 FF 
21d78     10 E4 85 F1 | 	sub	objptr, ##34832
21d7c     F2 FA 01 F6 | 	mov	result1, objptr
21d80     00 20 02 FF 
21d84     00 FA 45 F5 | 	or	result1, ##71303168
21d88     44 00 00 FF 
21d8c     1C E4 05 F1 | 	add	objptr, ##34844
21d90     F2 FA 61 FC | 	wrlong	result1, objptr
21d94     44 00 00 FF 
21d98     1C E4 85 F1 | 	sub	objptr, ##34844
21d9c     F2 FA 01 F6 | 	mov	result1, objptr
21da0     00 28 02 FF 
21da4     00 FA 45 F5 | 	or	result1, ##72351744
21da8     44 00 00 FF 
21dac     20 E4 05 F1 | 	add	objptr, ##34848
21db0     F2 FA 61 FC | 	wrlong	result1, objptr
21db4     44 00 00 FF 
21db8     20 E4 85 F1 | 	sub	objptr, ##34848
21dbc     F2 FA 01 F6 | 	mov	result1, objptr
21dc0     00 30 02 FF 
21dc4     00 FA 45 F5 | 	or	result1, ##73400320
21dc8     43 00 00 FF 
21dcc     B4 E4 05 F1 | 	add	objptr, ##34484
21dd0     F2 FA 61 FC | 	wrlong	result1, objptr
21dd4     43 00 00 FF 
21dd8     B4 E4 85 F1 | 	sub	objptr, ##34484
21ddc     F2 FA 01 F6 | 	mov	result1, objptr
21de0     00 38 02 FF 
21de4     00 FA 45 F5 | 	or	result1, ##74448896
21de8     44 00 00 FF 
21dec     38 E4 05 F1 | 	add	objptr, ##34872
21df0     F2 FA 61 FC | 	wrlong	result1, objptr
21df4     44 00 00 FF 
21df8     38 E4 85 F1 | 	sub	objptr, ##34872
21dfc     F2 FA 01 F6 | 	mov	result1, objptr
21e00     00 40 02 FF 
21e04     00 FA 45 F5 | 	or	result1, ##75497472
21e08     44 00 00 FF 
21e0c     48 E4 05 F1 | 	add	objptr, ##34888
21e10     F2 FA 61 FC | 	wrlong	result1, objptr
21e14     44 00 00 FF 
21e18     48 E4 85 F1 | 	sub	objptr, ##34888
21e1c     F2 FA 01 F6 | 	mov	result1, objptr
21e20     00 48 02 FF 
21e24     00 FA 45 F5 | 	or	result1, ##76546048
21e28     44 00 00 FF 
21e2c     4C E4 05 F1 | 	add	objptr, ##34892
21e30     F2 FA 61 FC | 	wrlong	result1, objptr
21e34     44 00 00 FF 
21e38     4C E4 85 F1 | 	sub	objptr, ##34892
21e3c     F2 FA 01 F6 | 	mov	result1, objptr
21e40     00 50 02 FF 
21e44     00 FA 45 F5 | 	or	result1, ##77594624
21e48     44 00 00 FF 
21e4c     44 E4 05 F1 | 	add	objptr, ##34884
21e50     F2 FA 61 FC | 	wrlong	result1, objptr
21e54     44 00 00 FF 
21e58     44 E4 85 F1 | 	sub	objptr, ##34884
21e5c     F2 FA 01 F6 | 	mov	result1, objptr
21e60     00 58 02 FF 
21e64     00 FA 45 F5 | 	or	result1, ##78643200
21e68     44 00 00 FF 
21e6c     3C E4 05 F1 | 	add	objptr, ##34876
21e70     F2 FA 61 FC | 	wrlong	result1, objptr
21e74     44 00 00 FF 
21e78     3C E4 85 F1 | 	sub	objptr, ##34876
21e7c     F2 FA 01 F6 | 	mov	result1, objptr
21e80     00 60 02 FF 
21e84     00 FA 45 F5 | 	or	result1, ##79691776
21e88     44 00 00 FF 
21e8c     40 E4 05 F1 | 	add	objptr, ##34880
21e90     F2 FA 61 FC | 	wrlong	result1, objptr
21e94     44 00 00 FF 
21e98     40 E4 85 F1 | 	sub	objptr, ##34880
21e9c     F2 FA 01 F6 | 	mov	result1, objptr
21ea0     00 68 02 FF 
21ea4     00 FA 45 F5 | 	or	result1, ##80740352
21ea8     44 00 00 FF 
21eac     50 E4 05 F1 | 	add	objptr, ##34896
21eb0     F2 FA 61 FC | 	wrlong	result1, objptr
21eb4     44 00 00 FF 
21eb8     50 E4 85 F1 | 	sub	objptr, ##34896
21ebc     F2 FA 01 F6 | 	mov	result1, objptr
21ec0     00 70 02 FF 
21ec4     00 FA 45 F5 | 	or	result1, ##81788928
21ec8     44 00 00 FF 
21ecc     54 E4 05 F1 | 	add	objptr, ##34900
21ed0     F2 FA 61 FC | 	wrlong	result1, objptr
21ed4     44 00 00 FF 
21ed8     54 E4 85 F1 | 	sub	objptr, ##34900
21edc     F2 FA 01 F6 | 	mov	result1, objptr
21ee0     00 78 02 FF 
21ee4     00 FA 45 F5 | 	or	result1, ##82837504
21ee8     44 00 00 FF 
21eec     58 E4 05 F1 | 	add	objptr, ##34904
21ef0     F2 FA 61 FC | 	wrlong	result1, objptr
21ef4     44 00 00 FF 
21ef8     58 E4 85 F1 | 	sub	objptr, ##34904
21efc     F2 FA 01 F6 | 	mov	result1, objptr
21f00     00 80 02 FF 
21f04     00 FA 45 F5 | 	or	result1, ##83886080
21f08     44 00 00 FF 
21f0c     5C E4 05 F1 | 	add	objptr, ##34908
21f10     F2 FA 61 FC | 	wrlong	result1, objptr
21f14     44 00 00 FF 
21f18     5C E4 85 F1 | 	sub	objptr, ##34908
21f1c     F2 FA 01 F6 | 	mov	result1, objptr
21f20     00 88 02 FF 
21f24     00 FA 45 F5 | 	or	result1, ##84934656
21f28     44 00 00 FF 
21f2c     60 E4 05 F1 | 	add	objptr, ##34912
21f30     F2 FA 61 FC | 	wrlong	result1, objptr
21f34     44 00 00 FF 
21f38     60 E4 85 F1 | 	sub	objptr, ##34912
21f3c     F2 FA 01 F6 | 	mov	result1, objptr
21f40     00 90 02 FF 
21f44     00 FA 45 F5 | 	or	result1, ##85983232
21f48     44 00 00 FF 
21f4c     64 E4 05 F1 | 	add	objptr, ##34916
21f50     F2 FA 61 FC | 	wrlong	result1, objptr
21f54     44 00 00 FF 
21f58     64 E4 85 F1 | 	sub	objptr, ##34916
21f5c     F2 FA 01 F6 | 	mov	result1, objptr
21f60     00 98 02 FF 
21f64     00 FA 45 F5 | 	or	result1, ##87031808
21f68     44 00 00 FF 
21f6c     68 E4 05 F1 | 	add	objptr, ##34920
21f70     F2 FA 61 FC | 	wrlong	result1, objptr
21f74     44 00 00 FF 
21f78     68 E4 85 F1 | 	sub	objptr, ##34920
21f7c     F2 FA 01 F6 | 	mov	result1, objptr
21f80     00 A0 02 FF 
21f84     00 FA 45 F5 | 	or	result1, ##88080384
21f88     44 00 00 FF 
21f8c     6C E4 05 F1 | 	add	objptr, ##34924
21f90     F2 FA 61 FC | 	wrlong	result1, objptr
21f94     44 00 00 FF 
21f98     6C E4 85 F1 | 	sub	objptr, ##34924
21f9c     F2 FA 01 F6 | 	mov	result1, objptr
21fa0     00 A8 02 FF 
21fa4     00 FA 45 F5 | 	or	result1, ##89128960
21fa8     44 00 00 FF 
21fac     78 E4 05 F1 | 	add	objptr, ##34936
21fb0     F2 FA 61 FC | 	wrlong	result1, objptr
21fb4     44 00 00 FF 
21fb8     78 E4 85 F1 | 	sub	objptr, ##34936
21fbc     F2 FA 01 F6 | 	mov	result1, objptr
21fc0     00 B0 02 FF 
21fc4     00 FA 45 F5 | 	or	result1, ##90177536
21fc8     44 00 00 FF 
21fcc     70 E4 05 F1 | 	add	objptr, ##34928
21fd0     F2 FA 61 FC | 	wrlong	result1, objptr
21fd4     44 00 00 FF 
21fd8     70 E4 85 F1 | 	sub	objptr, ##34928
21fdc     F2 FA 01 F6 | 	mov	result1, objptr
21fe0     00 B8 02 FF 
21fe4     00 FA 45 F5 | 	or	result1, ##91226112
21fe8     44 00 00 FF 
21fec     74 E4 05 F1 | 	add	objptr, ##34932
21ff0     F2 FA 61 FC | 	wrlong	result1, objptr
21ff4     44 00 00 FF 
21ff8     74 E4 85 F1 | 	sub	objptr, ##34932
21ffc     F2 FA 01 F6 | 	mov	result1, objptr
22000     00 C0 02 FF 
22004     00 FA 45 F5 | 	or	result1, ##92274688
22008     44 00 00 FF 
2200c     7C E4 05 F1 | 	add	objptr, ##34940
22010     F2 FA 61 FC | 	wrlong	result1, objptr
22014     44 00 00 FF 
22018     7C E4 85 F1 | 	sub	objptr, ##34940
2201c     F2 FA 01 F6 | 	mov	result1, objptr
22020     00 C8 02 FF 
22024     00 FA 45 F5 | 	or	result1, ##93323264
22028     44 00 00 FF 
2202c     24 E4 05 F1 | 	add	objptr, ##34852
22030     F2 FA 61 FC | 	wrlong	result1, objptr
22034     44 00 00 FF 
22038     24 E4 85 F1 | 	sub	objptr, ##34852
2203c     F2 FA 01 F6 | 	mov	result1, objptr
22040     00 D0 02 FF 
22044     00 FA 45 F5 | 	or	result1, ##94371840
22048     44 00 00 FF 
2204c     2C E4 05 F1 | 	add	objptr, ##34860
22050     F2 FA 61 FC | 	wrlong	result1, objptr
22054     44 00 00 FF 
22058     2C E4 85 F1 | 	sub	objptr, ##34860
2205c     F2 FA 01 F6 | 	mov	result1, objptr
22060     00 D8 02 FF 
22064     00 FA 45 F5 | 	or	result1, ##95420416
22068     44 00 00 FF 
2206c     30 E4 05 F1 | 	add	objptr, ##34864
22070     F2 FA 61 FC | 	wrlong	result1, objptr
22074     44 00 00 FF 
22078     30 E4 85 F1 | 	sub	objptr, ##34864
2207c     F2 FA 01 F6 | 	mov	result1, objptr
22080     00 E0 02 FF 
22084     00 FA 45 F5 | 	or	result1, ##96468992
22088     44 00 00 FF 
2208c     80 E4 05 F1 | 	add	objptr, ##34944
22090     F2 FA 61 FC | 	wrlong	result1, objptr
22094     44 00 00 FF 
22098     80 E4 85 F1 | 	sub	objptr, ##34944
2209c     F2 FA 01 F6 | 	mov	result1, objptr
220a0     00 E8 02 FF 
220a4     00 FA 45 F5 | 	or	result1, ##97517568
220a8     44 00 00 FF 
220ac     84 E4 05 F1 | 	add	objptr, ##34948
220b0     F2 FA 61 FC | 	wrlong	result1, objptr
220b4     44 00 00 FF 
220b8     84 E4 85 F1 | 	sub	objptr, ##34948
220bc     F2 FA 01 F6 | 	mov	result1, objptr
220c0     00 F0 02 FF 
220c4     00 FA 45 F5 | 	or	result1, ##98566144
220c8     44 00 00 FF 
220cc     88 E4 05 F1 | 	add	objptr, ##34952
220d0     F2 FA 61 FC | 	wrlong	result1, objptr
220d4     44 00 00 FF 
220d8     88 E4 85 F1 | 	sub	objptr, ##34952
220dc     F2 FA 01 F6 | 	mov	result1, objptr
220e0     00 F8 02 FF 
220e4     00 FA 45 F5 | 	or	result1, ##99614720
220e8     44 00 00 FF 
220ec     34 E4 05 F1 | 	add	objptr, ##34868
220f0     F2 FA 61 FC | 	wrlong	result1, objptr
220f4     44 00 00 FF 
220f8     34 E4 85 F1 | 	sub	objptr, ##34868
220fc     F2 FA 01 F6 | 	mov	result1, objptr
22100     39 FA 25 F4 | 	bith	result1, #57
22104     44 00 00 FF 
22108     98 E4 05 F1 | 	add	objptr, ##34968
2210c     F2 FA 61 FC | 	wrlong	result1, objptr
22110     44 00 00 FF 
22114     98 E4 85 F1 | 	sub	objptr, ##34968
22118     F2 FA 01 F6 | 	mov	result1, objptr
2211c     00 08 03 FF 
22120     00 FA 45 F5 | 	or	result1, ##101711872
22124     44 00 00 FF 
22128     A0 E4 05 F1 | 	add	objptr, ##34976
2212c     F2 FA 61 FC | 	wrlong	result1, objptr
22130     44 00 00 FF 
22134     A0 E4 85 F1 | 	sub	objptr, ##34976
22138     F2 FA 01 F6 | 	mov	result1, objptr
2213c     00 10 03 FF 
22140     00 FA 45 F5 | 	or	result1, ##102760448
22144     44 00 00 FF 
22148     94 E4 05 F1 | 	add	objptr, ##34964
2214c     F2 FA 61 FC | 	wrlong	result1, objptr
22150     44 00 00 FF 
22154     94 E4 85 F1 | 	sub	objptr, ##34964
22158     F2 FA 01 F6 | 	mov	result1, objptr
2215c     00 18 03 FF 
22160     00 FA 45 F5 | 	or	result1, ##103809024
22164     44 00 00 FF 
22168     90 E4 05 F1 | 	add	objptr, ##34960
2216c     F2 FA 61 FC | 	wrlong	result1, objptr
22170     44 00 00 FF 
22174     90 E4 85 F1 | 	sub	objptr, ##34960
22178     F2 FA 01 F6 | 	mov	result1, objptr
2217c     00 20 03 FF 
22180     00 FA 45 F5 | 	or	result1, ##104857600
22184     44 00 00 FF 
22188     8C E4 05 F1 | 	add	objptr, ##34956
2218c     F2 FA 61 FC | 	wrlong	result1, objptr
22190     44 00 00 FF 
22194     8C E4 85 F1 | 	sub	objptr, ##34956
22198     F2 FA 01 F6 | 	mov	result1, objptr
2219c     00 28 03 FF 
221a0     00 FA 45 F5 | 	or	result1, ##105906176
221a4     44 00 00 FF 
221a8     9C E4 05 F1 | 	add	objptr, ##34972
221ac     F2 FA 61 FC | 	wrlong	result1, objptr
221b0     44 00 00 FF 
221b4     9C E4 85 F1 | 	sub	objptr, ##34972
221b8     F2 FA 01 F6 | 	mov	result1, objptr
221bc     00 30 03 FF 
221c0     00 FA 45 F5 | 	or	result1, ##106954752
221c4     44 00 00 FF 
221c8     A4 E4 05 F1 | 	add	objptr, ##34980
221cc     F2 FA 61 FC | 	wrlong	result1, objptr
221d0     44 00 00 FF 
221d4     A4 E4 85 F1 | 	sub	objptr, ##34980
221d8     F2 FA 01 F6 | 	mov	result1, objptr
221dc     00 38 03 FF 
221e0     00 FA 45 F5 | 	or	result1, ##108003328
221e4     44 00 00 FF 
221e8     A8 E4 05 F1 | 	add	objptr, ##34984
221ec     F2 FA 61 FC | 	wrlong	result1, objptr
221f0     44 00 00 FF 
221f4     A8 E4 85 F1 | 	sub	objptr, ##34984
221f8     F2 FA 01 F6 | 	mov	result1, objptr
221fc     00 40 03 FF 
22200     00 FA 45 F5 | 	or	result1, ##109051904
22204     44 00 00 FF 
22208     AC E4 05 F1 | 	add	objptr, ##34988
2220c     F2 FA 61 FC | 	wrlong	result1, objptr
22210     44 00 00 FF 
22214     AC E4 85 F1 | 	sub	objptr, ##34988
22218     F2 FA 01 F6 | 	mov	result1, objptr
2221c     00 48 03 FF 
22220     00 FA 45 F5 | 	or	result1, ##110100480
22224     44 00 00 FF 
22228     B4 E4 05 F1 | 	add	objptr, ##34996
2222c     F2 FA 61 FC | 	wrlong	result1, objptr
22230     44 00 00 FF 
22234     B4 E4 85 F1 | 	sub	objptr, ##34996
22238     F2 FA 01 F6 | 	mov	result1, objptr
2223c     00 50 03 FF 
22240     00 FA 45 F5 | 	or	result1, ##111149056
22244     44 00 00 FF 
22248     B8 E4 05 F1 | 	add	objptr, ##35000
2224c     F2 FA 61 FC | 	wrlong	result1, objptr
22250     44 00 00 FF 
22254     B8 E4 85 F1 | 	sub	objptr, ##35000
22258     F2 FA 01 F6 | 	mov	result1, objptr
2225c     00 58 03 FF 
22260     00 FA 45 F5 | 	or	result1, ##112197632
22264     44 00 00 FF 
22268     BC E4 05 F1 | 	add	objptr, ##35004
2226c     F2 FA 61 FC | 	wrlong	result1, objptr
22270     44 00 00 FF 
22274     BC E4 85 F1 | 	sub	objptr, ##35004
22278     F2 FA 01 F6 | 	mov	result1, objptr
2227c     00 60 03 FF 
22280     00 FA 45 F5 | 	or	result1, ##113246208
22284     44 00 00 FF 
22288     C0 E4 05 F1 | 	add	objptr, ##35008
2228c     F2 FA 61 FC | 	wrlong	result1, objptr
22290     44 00 00 FF 
22294     C0 E4 85 F1 | 	sub	objptr, ##35008
22298     F2 FA 01 F6 | 	mov	result1, objptr
2229c     00 68 03 FF 
222a0     00 FA 45 F5 | 	or	result1, ##114294784
222a4     44 00 00 FF 
222a8     C4 E4 05 F1 | 	add	objptr, ##35012
222ac     F2 FA 61 FC | 	wrlong	result1, objptr
222b0     44 00 00 FF 
222b4     C4 E4 85 F1 | 	sub	objptr, ##35012
222b8     F2 FA 01 F6 | 	mov	result1, objptr
222bc     00 70 03 FF 
222c0     00 FA 45 F5 | 	or	result1, ##115343360
222c4     44 00 00 FF 
222c8     C8 E4 05 F1 | 	add	objptr, ##35016
222cc     F2 FA 61 FC | 	wrlong	result1, objptr
222d0     44 00 00 FF 
222d4     C8 E4 85 F1 | 	sub	objptr, ##35016
222d8     F2 FA 01 F6 | 	mov	result1, objptr
222dc     00 08 01 FF 
222e0     00 FA 45 F5 | 	or	result1, ##34603008
222e4     44 00 00 FF 
222e8     CC E4 05 F1 | 	add	objptr, ##35020
222ec     F2 FA 61 FC | 	wrlong	result1, objptr
222f0     44 00 00 FF 
222f4     CC E4 85 F1 | 	sub	objptr, ##35020
222f8     F2 FA 01 F6 | 	mov	result1, objptr
222fc     00 78 03 FF 
22300     00 FA 45 F5 | 	or	result1, ##116391936
22304     44 00 00 FF 
22308     D0 E4 05 F1 | 	add	objptr, ##35024
2230c     F2 FA 61 FC | 	wrlong	result1, objptr
22310     44 00 00 FF 
22314     D0 E4 85 F1 | 	sub	objptr, ##35024
22318     F2 FA 01 F6 | 	mov	result1, objptr
2231c     58 FA 25 F4 | 	bith	result1, #88
22320     44 00 00 FF 
22324     B0 E4 05 F1 | 	add	objptr, ##34992
22328     F2 FA 61 FC | 	wrlong	result1, objptr
2232c     44 00 00 FF 
22330     B0 E4 85 F1 | 	sub	objptr, ##34992
22334     F2 FA 01 F6 | 	mov	result1, objptr
22338     00 88 03 FF 
2233c     00 FA 45 F5 | 	or	result1, ##118489088
22340     43 00 00 FF 
22344     A8 E4 05 F1 | 	add	objptr, ##34472
22348     F2 FA 61 FC | 	wrlong	result1, objptr
2234c     43 00 00 FF 
22350     A8 E4 85 F1 | 	sub	objptr, ##34472
22354     F2 FA 01 F6 | 	mov	result1, objptr
22358     00 90 03 FF 
2235c     00 FA 45 F5 | 	or	result1, ##119537664
22360     44 00 00 FF 
22364     D4 E4 05 F1 | 	add	objptr, ##35028
22368     F2 FA 61 FC | 	wrlong	result1, objptr
2236c     44 00 00 FF 
22370     D4 E4 85 F1 | 	sub	objptr, ##35028
22374     F2 FA 01 F6 | 	mov	result1, objptr
22378     00 98 03 FF 
2237c     00 FA 45 F5 | 	or	result1, ##120586240
22380     44 00 00 FF 
22384     D8 E4 05 F1 | 	add	objptr, ##35032
22388     F2 FA 61 FC | 	wrlong	result1, objptr
2238c     44 00 00 FF 
22390     D8 E4 85 F1 | 	sub	objptr, ##35032
22394     F2 FA 01 F6 | 	mov	result1, objptr
22398     00 A0 03 FF 
2239c     00 FA 45 F5 | 	or	result1, ##121634816
223a0     44 00 00 FF 
223a4     EC E4 05 F1 | 	add	objptr, ##35052
223a8     F2 FA 61 FC | 	wrlong	result1, objptr
223ac     44 00 00 FF 
223b0     EC E4 85 F1 | 	sub	objptr, ##35052
223b4     F2 FA 01 F6 | 	mov	result1, objptr
223b8     00 A8 03 FF 
223bc     00 FA 45 F5 | 	or	result1, ##122683392
223c0     44 00 00 FF 
223c4     E8 E4 05 F1 | 	add	objptr, ##35048
223c8     F2 FA 61 FC | 	wrlong	result1, objptr
223cc     44 00 00 FF 
223d0     E8 E4 85 F1 | 	sub	objptr, ##35048
223d4     F2 FA 01 F6 | 	mov	result1, objptr
223d8     00 B0 03 FF 
223dc     00 FA 45 F5 | 	or	result1, ##123731968
223e0     44 00 00 FF 
223e4     E0 E4 05 F1 | 	add	objptr, ##35040
223e8     F2 FA 61 FC | 	wrlong	result1, objptr
223ec     44 00 00 FF 
223f0     E0 E4 85 F1 | 	sub	objptr, ##35040
223f4     F2 FA 01 F6 | 	mov	result1, objptr
223f8     00 B8 03 FF 
223fc     00 FA 45 F5 | 	or	result1, ##124780544
22400     44 00 00 FF 
22404     DC E4 05 F1 | 	add	objptr, ##35036
22408     F2 FA 61 FC | 	wrlong	result1, objptr
2240c     44 00 00 FF 
22410     DC E4 85 F1 | 	sub	objptr, ##35036
22414     F2 FA 01 F6 | 	mov	result1, objptr
22418     77 FA 25 F4 | 	bith	result1, #119
2241c     44 00 00 FF 
22420     FC E4 05 F1 | 	add	objptr, ##35068
22424     F2 FA 61 FC | 	wrlong	result1, objptr
22428     44 00 00 FF 
2242c     FC E4 85 F1 | 	sub	objptr, ##35068
22430     F2 FA 01 F6 | 	mov	result1, objptr
22434     00 C8 03 FF 
22438     00 FA 45 F5 | 	or	result1, ##126877696
2243c     44 00 00 FF 
22440     F0 E4 05 F1 | 	add	objptr, ##35056
22444     F2 FA 61 FC | 	wrlong	result1, objptr
22448     44 00 00 FF 
2244c     F0 E4 85 F1 | 	sub	objptr, ##35056
22450     F2 FA 01 F6 | 	mov	result1, objptr
22454     00 D0 03 FF 
22458     00 FA 45 F5 | 	or	result1, ##127926272
2245c     44 00 00 FF 
22460     F4 E4 05 F1 | 	add	objptr, ##35060
22464     F2 FA 61 FC | 	wrlong	result1, objptr
22468     44 00 00 FF 
2246c     F4 E4 85 F1 | 	sub	objptr, ##35060
22470     F2 FA 01 F6 | 	mov	result1, objptr
22474     00 D8 03 FF 
22478     00 FA 45 F5 | 	or	result1, ##128974848
2247c     44 00 00 FF 
22480     F8 E4 05 F1 | 	add	objptr, ##35064
22484     F2 FA 61 FC | 	wrlong	result1, objptr
22488     44 00 00 FF 
2248c     F8 E4 85 F1 | 	sub	objptr, ##35064
22490     F2 FA 01 F6 | 	mov	result1, objptr
22494     96 FA 25 F4 | 	bith	result1, #150
22498     44 00 00 FF 
2249c     00 E5 05 F1 | 	add	objptr, ##35072
224a0     F2 FA 61 FC | 	wrlong	result1, objptr
224a4     44 00 00 FF 
224a8     00 E5 85 F1 | 	sub	objptr, ##35072
224ac     F2 FA 01 F6 | 	mov	result1, objptr
224b0     00 E8 03 FF 
224b4     00 FA 45 F5 | 	or	result1, ##131072000
224b8     44 00 00 FF 
224bc     04 E5 05 F1 | 	add	objptr, ##35076
224c0     F2 FA 61 FC | 	wrlong	result1, objptr
224c4     44 00 00 FF 
224c8     04 E5 85 F1 | 	sub	objptr, ##35076
224cc     F2 FA 01 F6 | 	mov	result1, objptr
224d0     B5 FA 25 F4 | 	bith	result1, #181
224d4     44 00 00 FF 
224d8     08 E5 05 F1 | 	add	objptr, ##35080
224dc     F2 FA 61 FC | 	wrlong	result1, objptr
224e0     44 00 00 FF 
224e4     08 E5 85 F1 | 	sub	objptr, ##35080
224e8     F2 FA 01 F6 | 	mov	result1, objptr
224ec     D4 FA 25 F4 | 	bith	result1, #212
224f0     44 00 00 FF 
224f4     0C E5 05 F1 | 	add	objptr, ##35084
224f8     F2 FA 61 FC | 	wrlong	result1, objptr
224fc     44 00 00 FF 
22500     0C E5 85 F1 | 	sub	objptr, ##35084
22504     F2 FA 01 F6 | 	mov	result1, objptr
22508     1B FA 25 F4 | 	bith	result1, #27
2250c     44 00 00 FF 
22510     10 E5 05 F1 | 	add	objptr, ##35088
22514     F2 FA 61 FC | 	wrlong	result1, objptr
22518     44 00 00 FF 
2251c     10 E5 85 F1 | 	sub	objptr, ##35088
22520     F2 FA 01 F6 | 	mov	result1, objptr
22524     00 08 04 FF 
22528     00 FA 45 F5 | 	or	result1, ##135266304
2252c     44 00 00 FF 
22530     14 E5 05 F1 | 	add	objptr, ##35092
22534     F2 FA 61 FC | 	wrlong	result1, objptr
22538     44 00 00 FF 
2253c     14 E5 85 F1 | 	sub	objptr, ##35092
22540     F2 FA 01 F6 | 	mov	result1, objptr
22544     00 10 04 FF 
22548     00 FA 45 F5 | 	or	result1, ##136314880
2254c     44 00 00 FF 
22550     1C E5 05 F1 | 	add	objptr, ##35100
22554     F2 FA 61 FC | 	wrlong	result1, objptr
22558     44 00 00 FF 
2255c     1C E5 85 F1 | 	sub	objptr, ##35100
22560     F2 FA 01 F6 | 	mov	result1, objptr
22564     00 18 04 FF 
22568     00 FA 45 F5 | 	or	result1, ##137363456
2256c     44 00 00 FF 
22570     20 E5 05 F1 | 	add	objptr, ##35104
22574     F2 FA 61 FC | 	wrlong	result1, objptr
22578     44 00 00 FF 
2257c     20 E5 85 F1 | 	sub	objptr, ##35104
22580     F2 FA 01 F6 | 	mov	result1, objptr
22584     00 20 04 FF 
22588     00 FA 45 F5 | 	or	result1, ##138412032
2258c     44 00 00 FF 
22590     24 E5 05 F1 | 	add	objptr, ##35108
22594     F2 FA 61 FC | 	wrlong	result1, objptr
22598     44 00 00 FF 
2259c     24 E5 85 F1 | 	sub	objptr, ##35108
225a0     F2 FA 01 F6 | 	mov	result1, objptr
225a4     00 28 04 FF 
225a8     00 FA 45 F5 | 	or	result1, ##139460608
225ac     44 00 00 FF 
225b0     18 E5 05 F1 | 	add	objptr, ##35096
225b4     F2 FA 61 FC | 	wrlong	result1, objptr
225b8     44 00 00 FF 
225bc     18 E5 85 F1 | 	sub	objptr, ##35096
225c0     F2 FA 01 F6 | 	mov	result1, objptr
225c4     00 30 04 FF 
225c8     00 FA 45 F5 | 	or	result1, ##140509184
225cc     44 00 00 FF 
225d0     28 E5 05 F1 | 	add	objptr, ##35112
225d4     F2 FA 61 FC | 	wrlong	result1, objptr
225d8     44 00 00 FF 
225dc     28 E5 85 F1 | 	sub	objptr, ##35112
225e0     F2 FA 01 F6 | 	mov	result1, objptr
225e4     00 38 04 FF 
225e8     00 FA 45 F5 | 	or	result1, ##141557760
225ec     44 00 00 FF 
225f0     5C E5 05 F1 | 	add	objptr, ##35164
225f4     F2 FA 61 FC | 	wrlong	result1, objptr
225f8     44 00 00 FF 
225fc     5C E5 85 F1 | 	sub	objptr, ##35164
22600     F2 FA 01 F6 | 	mov	result1, objptr
22604     00 40 04 FF 
22608     00 FA 45 F5 | 	or	result1, ##142606336
2260c     44 00 00 FF 
22610     54 E5 05 F1 | 	add	objptr, ##35156
22614     F2 FA 61 FC | 	wrlong	result1, objptr
22618     44 00 00 FF 
2261c     54 E5 85 F1 | 	sub	objptr, ##35156
22620     F2 FA 01 F6 | 	mov	result1, objptr
22624     00 48 04 FF 
22628     00 FA 45 F5 | 	or	result1, ##143654912
2262c     44 00 00 FF 
22630     2C E5 05 F1 | 	add	objptr, ##35116
22634     F2 FA 61 FC | 	wrlong	result1, objptr
22638     44 00 00 FF 
2263c     2C E5 85 F1 | 	sub	objptr, ##35116
22640     F2 FA 01 F6 | 	mov	result1, objptr
22644     00 50 04 FF 
22648     00 FA 45 F5 | 	or	result1, ##144703488
2264c     44 00 00 FF 
22650     30 E5 05 F1 | 	add	objptr, ##35120
22654     F2 FA 61 FC | 	wrlong	result1, objptr
22658     44 00 00 FF 
2265c     30 E5 85 F1 | 	sub	objptr, ##35120
22660     F2 FA 01 F6 | 	mov	result1, objptr
22664     00 58 04 FF 
22668     00 FA 45 F5 | 	or	result1, ##145752064
2266c     44 00 00 FF 
22670     4C E5 05 F1 | 	add	objptr, ##35148
22674     F2 FA 61 FC | 	wrlong	result1, objptr
22678     44 00 00 FF 
2267c     4C E5 85 F1 | 	sub	objptr, ##35148
22680     F2 FA 01 F6 | 	mov	result1, objptr
22684     00 60 04 FF 
22688     00 FA 45 F5 | 	or	result1, ##146800640
2268c     44 00 00 FF 
22690     50 E5 05 F1 | 	add	objptr, ##35152
22694     F2 FA 61 FC | 	wrlong	result1, objptr
22698     44 00 00 FF 
2269c     50 E5 85 F1 | 	sub	objptr, ##35152
226a0     F2 FA 01 F6 | 	mov	result1, objptr
226a4     00 68 04 FF 
226a8     00 FA 45 F5 | 	or	result1, ##147849216
226ac     44 00 00 FF 
226b0     6C E5 05 F1 | 	add	objptr, ##35180
226b4     F2 FA 61 FC | 	wrlong	result1, objptr
226b8     44 00 00 FF 
226bc     6C E5 85 F1 | 	sub	objptr, ##35180
226c0     F2 FA 01 F6 | 	mov	result1, objptr
226c4     00 70 04 FF 
226c8     00 FA 45 F5 | 	or	result1, ##148897792
226cc     44 00 00 FF 
226d0     68 E5 05 F1 | 	add	objptr, ##35176
226d4     F2 FA 61 FC | 	wrlong	result1, objptr
226d8     44 00 00 FF 
226dc     68 E5 85 F1 | 	sub	objptr, ##35176
226e0     F2 FA 01 F6 | 	mov	result1, objptr
226e4     00 78 04 FF 
226e8     00 FA 45 F5 | 	or	result1, ##149946368
226ec     44 00 00 FF 
226f0     78 E5 05 F1 | 	add	objptr, ##35192
226f4     F2 FA 61 FC | 	wrlong	result1, objptr
226f8     44 00 00 FF 
226fc     78 E5 85 F1 | 	sub	objptr, ##35192
22700     F2 FA 01 F6 | 	mov	result1, objptr
22704     00 80 04 FF 
22708     00 FA 45 F5 | 	or	result1, ##150994944
2270c     44 00 00 FF 
22710     44 E5 05 F1 | 	add	objptr, ##35140
22714     F2 FA 61 FC | 	wrlong	result1, objptr
22718     44 00 00 FF 
2271c     44 E5 85 F1 | 	sub	objptr, ##35140
22720     F2 FA 01 F6 | 	mov	result1, objptr
22724     00 88 04 FF 
22728     00 FA 45 F5 | 	or	result1, ##152043520
2272c     44 00 00 FF 
22730     74 E5 05 F1 | 	add	objptr, ##35188
22734     F2 FA 61 FC | 	wrlong	result1, objptr
22738     44 00 00 FF 
2273c     74 E5 85 F1 | 	sub	objptr, ##35188
22740     F2 FA 01 F6 | 	mov	result1, objptr
22744     00 90 04 FF 
22748     00 FA 45 F5 | 	or	result1, ##153092096
2274c     44 00 00 FF 
22750     64 E5 05 F1 | 	add	objptr, ##35172
22754     F2 FA 61 FC | 	wrlong	result1, objptr
22758     44 00 00 FF 
2275c     64 E5 85 F1 | 	sub	objptr, ##35172
22760     F2 FA 01 F6 | 	mov	result1, objptr
22764     00 98 04 FF 
22768     00 FA 45 F5 | 	or	result1, ##154140672
2276c     43 00 00 FF 
22770     14 E5 05 F1 | 	add	objptr, ##34580
22774     F2 FA 61 FC | 	wrlong	result1, objptr
22778     43 00 00 FF 
2277c     14 E5 85 F1 | 	sub	objptr, ##34580
22780     F2 FA 01 F6 | 	mov	result1, objptr
22784     00 A0 04 FF 
22788     00 FA 45 F5 | 	or	result1, ##155189248
2278c     44 00 00 FF 
22790     34 E5 05 F1 | 	add	objptr, ##35124
22794     F2 FA 61 FC | 	wrlong	result1, objptr
22798     44 00 00 FF 
2279c     34 E5 85 F1 | 	sub	objptr, ##35124
227a0     F2 FA 01 F6 | 	mov	result1, objptr
227a4     00 08 01 FF 
227a8     00 FA 45 F5 | 	or	result1, ##34603008
227ac     44 00 00 FF 
227b0     3C E5 05 F1 | 	add	objptr, ##35132
227b4     F2 FA 61 FC | 	wrlong	result1, objptr
227b8     44 00 00 FF 
227bc     3C E5 85 F1 | 	sub	objptr, ##35132
227c0     F2 FA 01 F6 | 	mov	result1, objptr
227c4     00 A8 04 FF 
227c8     00 FA 45 F5 | 	or	result1, ##156237824
227cc     44 00 00 FF 
227d0     38 E5 05 F1 | 	add	objptr, ##35128
227d4     F2 FA 61 FC | 	wrlong	result1, objptr
227d8     44 00 00 FF 
227dc     38 E5 85 F1 | 	sub	objptr, ##35128
227e0     F2 FA 01 F6 | 	mov	result1, objptr
227e4     00 B0 04 FF 
227e8     00 FA 45 F5 | 	or	result1, ##157286400
227ec     44 00 00 FF 
227f0     7C E5 05 F1 | 	add	objptr, ##35196
227f4     F2 FA 61 FC | 	wrlong	result1, objptr
227f8     44 00 00 FF 
227fc     7C E5 85 F1 | 	sub	objptr, ##35196
22800     F2 FA 01 F6 | 	mov	result1, objptr
22804     00 B8 04 FF 
22808     00 FA 45 F5 | 	or	result1, ##158334976
2280c     44 00 00 FF 
22810     80 E5 05 F1 | 	add	objptr, ##35200
22814     F2 FA 61 FC | 	wrlong	result1, objptr
22818     44 00 00 FF 
2281c     80 E5 85 F1 | 	sub	objptr, ##35200
22820     F2 FA 01 F6 | 	mov	result1, objptr
22824     00 C0 04 FF 
22828     00 FA 45 F5 | 	or	result1, ##159383552
2282c     44 00 00 FF 
22830     84 E5 05 F1 | 	add	objptr, ##35204
22834     F2 FA 61 FC | 	wrlong	result1, objptr
22838     44 00 00 FF 
2283c     84 E5 85 F1 | 	sub	objptr, ##35204
22840     F2 FA 01 F6 | 	mov	result1, objptr
22844     00 C8 04 FF 
22848     00 FA 45 F5 | 	or	result1, ##160432128
2284c     44 00 00 FF 
22850     88 E5 05 F1 | 	add	objptr, ##35208
22854     F2 FA 61 FC | 	wrlong	result1, objptr
22858     44 00 00 FF 
2285c     88 E5 85 F1 | 	sub	objptr, ##35208
22860     F2 FA 01 F6 | 	mov	result1, objptr
22864     00 D0 04 FF 
22868     00 FA 45 F5 | 	or	result1, ##161480704
2286c     44 00 00 FF 
22870     90 E5 05 F1 | 	add	objptr, ##35216
22874     F2 FA 61 FC | 	wrlong	result1, objptr
22878     44 00 00 FF 
2287c     90 E5 85 F1 | 	sub	objptr, ##35216
22880     F2 FA 01 F6 | 	mov	result1, objptr
22884     00 D8 04 FF 
22888     00 FA 45 F5 | 	or	result1, ##162529280
2288c     44 00 00 FF 
22890     94 E5 05 F1 | 	add	objptr, ##35220
22894     F2 FA 61 FC | 	wrlong	result1, objptr
22898     44 00 00 FF 
2289c     94 E5 85 F1 | 	sub	objptr, ##35220
228a0     F2 FA 01 F6 | 	mov	result1, objptr
228a4     00 E0 04 FF 
228a8     00 FA 45 F5 | 	or	result1, ##163577856
228ac     44 00 00 FF 
228b0     98 E5 05 F1 | 	add	objptr, ##35224
228b4     F2 FA 61 FC | 	wrlong	result1, objptr
228b8     44 00 00 FF 
228bc     98 E5 85 F1 | 	sub	objptr, ##35224
228c0     F2 FA 01 F6 | 	mov	result1, objptr
228c4     00 E8 04 FF 
228c8     00 FA 45 F5 | 	or	result1, ##164626432
228cc     44 00 00 FF 
228d0     8C E5 05 F1 | 	add	objptr, ##35212
228d4     F2 FA 61 FC | 	wrlong	result1, objptr
228d8     44 00 00 FF 
228dc     8C E5 85 F1 | 	sub	objptr, ##35212
228e0     F2 FA 01 F6 | 	mov	result1, objptr
228e4     00 F0 04 FF 
228e8     00 FA 45 F5 | 	or	result1, ##165675008
228ec     44 00 00 FF 
228f0     70 E5 05 F1 | 	add	objptr, ##35184
228f4     F2 FA 61 FC | 	wrlong	result1, objptr
228f8     44 00 00 FF 
228fc     70 E5 85 F1 | 	sub	objptr, ##35184
22900     F2 FA 01 F6 | 	mov	result1, objptr
22904     00 F8 04 FF 
22908     00 FA 45 F5 | 	or	result1, ##166723584
2290c     44 00 00 FF 
22910     60 E5 05 F1 | 	add	objptr, ##35168
22914     F2 FA 61 FC | 	wrlong	result1, objptr
22918     44 00 00 FF 
2291c     60 E5 85 F1 | 	sub	objptr, ##35168
22920     F2 FA 01 F6 | 	mov	result1, objptr
22924     00 00 05 FF 
22928     00 FA 45 F5 | 	or	result1, ##167772160
2292c     44 00 00 FF 
22930     9C E5 05 F1 | 	add	objptr, ##35228
22934     F2 FA 61 FC | 	wrlong	result1, objptr
22938     44 00 00 FF 
2293c     9C E5 85 F1 | 	sub	objptr, ##35228
22940     F2 FA 01 F6 | 	mov	result1, objptr
22944     00 08 05 FF 
22948     00 FA 45 F5 | 	or	result1, ##168820736
2294c     44 00 00 FF 
22950     A0 E5 05 F1 | 	add	objptr, ##35232
22954     F2 FA 61 FC | 	wrlong	result1, objptr
22958     44 00 00 FF 
2295c     A0 E5 85 F1 | 	sub	objptr, ##35232
22960     F2 FA 01 F6 | 	mov	result1, objptr
22964     00 10 05 FF 
22968     00 FA 45 F5 | 	or	result1, ##169869312
2296c     44 00 00 FF 
22970     A4 E5 05 F1 | 	add	objptr, ##35236
22974     F2 FA 61 FC | 	wrlong	result1, objptr
22978     44 00 00 FF 
2297c     A4 E5 85 F1 | 	sub	objptr, ##35236
22980     F2 FA 01 F6 | 	mov	result1, objptr
22984     00 18 05 FF 
22988     00 FA 45 F5 | 	or	result1, ##170917888
2298c     44 00 00 FF 
22990     A8 E5 05 F1 | 	add	objptr, ##35240
22994     F2 FA 61 FC | 	wrlong	result1, objptr
22998     44 00 00 FF 
2299c     A8 E5 85 F1 | 	sub	objptr, ##35240
229a0     F2 FA 01 F6 | 	mov	result1, objptr
229a4     00 20 05 FF 
229a8     00 FA 45 F5 | 	or	result1, ##171966464
229ac     44 00 00 FF 
229b0     AC E5 05 F1 | 	add	objptr, ##35244
229b4     F2 FA 61 FC | 	wrlong	result1, objptr
229b8     44 00 00 FF 
229bc     AC E5 85 F1 | 	sub	objptr, ##35244
229c0     F2 FA 01 F6 | 	mov	result1, objptr
229c4     00 28 05 FF 
229c8     00 FA 45 F5 | 	or	result1, ##173015040
229cc     44 00 00 FF 
229d0     B0 E5 05 F1 | 	add	objptr, ##35248
229d4     F2 FA 61 FC | 	wrlong	result1, objptr
229d8     44 00 00 FF 
229dc     B0 E5 85 F1 | 	sub	objptr, ##35248
229e0                 | _init_commands_ret
229e0     2D 00 64 FD | 	ret
229e4                 | 
229e4                 | ' 
229e4                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
229e4                 | ' 
229e4                 | ' sub init_audio
229e4                 | _init_audio
229e4     06 4A 05 F6 | 	mov	COUNT_, #6
229e8     A8 00 A0 FD | 	call	#pushregs_
229ec     00 C0 1F FF 
229f0     00 26 06 F6 | 	mov	local01, ##1065353216
229f4                 | ' 
229f4                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
229f4     00 28 06 F6 | 	mov	local02, #0
229f8                 | LR__2640
229f8     14 2B 02 F6 | 	mov	local03, local02
229fc     01 2A 66 F0 | 	shl	local03, #1
22a00     58 7F 23 FF 
22a04     00 2C 06 F6 | 	mov	local04, ##1191096320
22a08     14 13 52 F6 | 	abs	arg01, local02 wc
22a0c     1F 2E C6 C9 |  if_b	decod	local05, #31
22a10     00 2E 06 36 |  if_ae	mov	local05, #0
22a14     FC 70 B0 FD | 	call	#__system___float_fromuns
22a18     17 FB 61 F5 | 	xor	result1, local05
22a1c     FD 12 02 F6 | 	mov	arg01, result1
22a20     87 24 20 FF 
22a24     DB 15 06 F6 | 	mov	arg02, ##1078530011
22a28     EC 74 B0 FD | 	call	#__system___float_mul
22a2c     FD 12 02 F6 | 	mov	arg01, result1
22a30     00 00 22 FF 
22a34     00 14 06 F6 | 	mov	arg02, ##1140850688
22a38     E0 76 B0 FD | 	call	#__system___float_div
22a3c     FD 12 02 F6 | 	mov	arg01, result1
22a40     34 7E B0 FD | 	call	#__system____builtin_sinf
22a44     FD 14 02 F6 | 	mov	arg02, result1
22a48     16 13 02 F6 | 	mov	arg01, local04
22a4c     C8 74 B0 FD | 	call	#__system___float_mul
22a50     FD 12 02 F6 | 	mov	arg01, result1
22a54     01 14 06 F6 | 	mov	arg02, #1
22a58     84 79 B0 FD | 	call	#__system___float_tointeger
22a5c     FD 14 02 F6 | 	mov	arg02, result1
22a60     15 13 02 F6 | 	mov	arg01, local03
22a64     6C 0D B0 FD | 	call	#_psdpoke
22a68     01 28 06 F1 | 	add	local02, #1
22a6c     02 00 00 FF 
22a70     00 28 56 F2 | 	cmps	local02, ##1024 wc
22a74     80 FF 9F CD |  if_b	jmp	#LR__2640
22a78                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
22a78     00 28 06 F6 | 	mov	local02, #0
22a7c                 | LR__2641
22a7c     14 15 02 F6 | 	mov	arg02, local02
22a80     01 14 66 F0 | 	shl	arg02, #1
22a84     0B 12 C6 F9 | 	decod	arg01, #11
22a88     0A 13 02 F1 | 	add	arg01, arg02
22a8c     14 2D 02 F6 | 	mov	local04, local02
22a90     07 2C 66 F0 | 	shl	local04, #7
22a94     14 2D 82 F1 | 	sub	local04, local02
22a98     C0 FF 7F FF 
22a9c     00 15 06 F6 | 	mov	arg02, ##-32512
22aa0     16 15 02 F1 | 	add	arg02, local04
22aa4     2C 0D B0 FD | 	call	#_psdpoke
22aa8     09 2C C6 F9 | 	decod	local04, #9
22aac     14 2D 02 F1 | 	add	local04, local02
22ab0     01 2C 66 F0 | 	shl	local04, #1
22ab4     0B 12 C6 F9 | 	decod	arg01, #11
22ab8     16 13 02 F1 | 	add	arg01, local04
22abc     14 2F 02 F6 | 	mov	local05, local02
22ac0     07 2E 66 F0 | 	shl	local05, #7
22ac4     14 2F 82 F1 | 	sub	local05, local02
22ac8     3F 00 00 FF 
22acc     00 15 06 F6 | 	mov	arg02, ##32512
22ad0     17 15 82 F1 | 	sub	arg02, local05
22ad4     FC 0C B0 FD | 	call	#_psdpoke
22ad8     01 28 06 F1 | 	add	local02, #1
22adc     01 00 00 FF 
22ae0     00 28 56 F2 | 	cmps	local02, ##512 wc
22ae4     94 FF 9F CD |  if_b	jmp	#LR__2641
22ae8                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
22ae8     00 28 06 F6 | 	mov	local02, #0
22aec                 | LR__2642
22aec     14 2F 02 F6 | 	mov	local05, local02
22af0     01 2E 66 F0 | 	shl	local05, #1
22af4     0C 12 C6 F9 | 	decod	arg01, #12
22af8     17 13 02 F1 | 	add	arg01, local05
22afc     14 2F 02 F6 | 	mov	local05, local02
22b00     06 2E 66 F0 | 	shl	local05, #6
22b04     14 2F 82 F1 | 	sub	local05, local02
22b08     C1 FF 7F FF 
22b0c     00 14 06 F6 | 	mov	arg02, ##-32256
22b10     17 15 02 F1 | 	add	arg02, local05
22b14     BC 0C B0 FD | 	call	#_psdpoke
22b18     01 28 06 F1 | 	add	local02, #1
22b1c     02 00 00 FF 
22b20     00 28 56 F2 | 	cmps	local02, ##1024 wc
22b24     C4 FF 9F CD |  if_b	jmp	#LR__2642
22b28                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
22b28     00 28 06 F6 | 	mov	local02, #0
22b2c                 | LR__2643
22b2c     14 2F 02 F6 | 	mov	local05, local02
22b30     01 2E 66 F0 | 	shl	local05, #1
22b34     0C 00 00 FF 
22b38     00 12 06 F6 | 	mov	arg01, ##6144
22b3c     17 13 02 F1 | 	add	arg01, local05
22b40     C0 FF 7F FF 
22b44     A8 14 06 F6 | 	mov	arg02, ##-32600
22b48     88 0C B0 FD | 	call	#_psdpoke
22b4c     01 28 06 F1 | 	add	local02, #1
22b50     80 28 56 F2 | 	cmps	local02, #128 wc
22b54     D4 FF 9F CD |  if_b	jmp	#LR__2643
22b58     80 28 06 F6 | 	mov	local02, #128
22b5c                 | LR__2644
22b5c     14 2F 02 F6 | 	mov	local05, local02
22b60     01 2E 66 F0 | 	shl	local05, #1
22b64     0C 00 00 FF 
22b68     00 12 06 F6 | 	mov	arg01, ##6144
22b6c     17 13 02 F1 | 	add	arg01, local05
22b70     3F 00 00 FF 
22b74     58 15 06 F6 | 	mov	arg02, ##32600
22b78     58 0C B0 FD | 	call	#_psdpoke
22b7c     01 28 06 F1 | 	add	local02, #1
22b80     02 00 00 FF 
22b84     00 28 16 F2 | 	cmp	local02, ##1024 wc
22b88     D0 FF 9F CD |  if_b	jmp	#LR__2644
22b8c                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
22b8c     00 28 06 F6 | 	mov	local02, #0
22b90                 | LR__2645
22b90     14 2F 02 F6 | 	mov	local05, local02
22b94     01 2E 66 F0 | 	shl	local05, #1
22b98     0D 12 C6 F9 | 	decod	arg01, #13
22b9c     17 13 02 F1 | 	add	arg01, local05
22ba0     C0 FF 7F FF 
22ba4     A8 14 06 F6 | 	mov	arg02, ##-32600
22ba8     28 0C B0 FD | 	call	#_psdpoke
22bac     01 28 06 F1 | 	add	local02, #1
22bb0     01 00 00 FF 
22bb4     00 28 56 F2 | 	cmps	local02, ##512 wc
22bb8     D4 FF 9F CD |  if_b	jmp	#LR__2645
22bbc     09 28 C6 F9 | 	decod	local02, #9
22bc0                 | LR__2646
22bc0     14 2F 02 F6 | 	mov	local05, local02
22bc4     01 2E 66 F0 | 	shl	local05, #1
22bc8     0D 12 C6 F9 | 	decod	arg01, #13
22bcc     17 13 02 F1 | 	add	arg01, local05
22bd0     3F 00 00 FF 
22bd4     58 15 06 F6 | 	mov	arg02, ##32600
22bd8     F8 0B B0 FD | 	call	#_psdpoke
22bdc     01 28 06 F1 | 	add	local02, #1
22be0     02 00 00 FF 
22be4     00 28 16 F2 | 	cmp	local02, ##1024 wc
22be8     D4 FF 9F CD |  if_b	jmp	#LR__2646
22bec                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
22bec     00 28 06 F6 | 	mov	local02, #0
22bf0                 | LR__2647
22bf0     14 2F 02 F6 | 	mov	local05, local02
22bf4     01 2E 66 F0 | 	shl	local05, #1
22bf8     14 00 00 FF 
22bfc     00 12 06 F6 | 	mov	arg01, ##10240
22c00     17 13 02 F1 | 	add	arg01, local05
22c04     C0 FF 7F FF 
22c08     A8 14 06 F6 | 	mov	arg02, ##-32600
22c0c     C4 0B B0 FD | 	call	#_psdpoke
22c10     01 28 06 F1 | 	add	local02, #1
22c14     00 29 56 F2 | 	cmps	local02, #256 wc
22c18     D4 FF 9F CD |  if_b	jmp	#LR__2647
22c1c     00 29 06 F6 | 	mov	local02, #256
22c20                 | LR__2648
22c20     14 2F 02 F6 | 	mov	local05, local02
22c24     01 2E 66 F0 | 	shl	local05, #1
22c28     14 00 00 FF 
22c2c     00 12 06 F6 | 	mov	arg01, ##10240
22c30     17 13 02 F1 | 	add	arg01, local05
22c34     3F 00 00 FF 
22c38     58 15 06 F6 | 	mov	arg02, ##32600
22c3c     94 0B B0 FD | 	call	#_psdpoke
22c40     01 28 06 F1 | 	add	local02, #1
22c44     02 00 00 FF 
22c48     00 28 16 F2 | 	cmp	local02, ##1024 wc
22c4c     D0 FF 9F CD |  if_b	jmp	#LR__2648
22c50                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
22c50     18 00 00 FF 
22c54     00 28 06 F6 | 	mov	local02, ##12288
22c58                 | LR__2649
22c58     14 13 02 F6 | 	mov	arg01, local02
22c5c     00 14 06 F6 | 	mov	arg02, #0
22c60     28 0B B0 FD | 	call	#_pslpoke
22c64     04 28 06 F1 | 	add	local02, #4
22c68     77 00 00 FF 
22c6c     FD 29 56 F2 | 	cmps	local02, ##61437 wc
22c70     E4 FF 9F CD |  if_b	jmp	#LR__2649
22c74                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
22c74     00 28 06 F6 | 	mov	local02, #0
22c78                 | LR__2650
22c78     14 2F 02 F6 | 	mov	local05, local02
22c7c     01 2E 66 F0 | 	shl	local05, #1
22c80     78 00 00 FF 
22c84     00 2A 06 F6 | 	mov	local03, ##61440
22c88     17 2B 02 F1 | 	add	local03, local05
22c8c     12 00 00 FF 
22c90     BA EA 05 F1 | 	add	ptr__dat__, ##9402
22c94     F5 12 02 F6 | 	mov	arg01, ptr__dat__
22c98     12 00 00 FF 
22c9c     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
22ca0     10 12 06 F1 | 	add	arg01, #16
22ca4     14 15 02 F6 | 	mov	arg02, local02
22ca8     01 14 66 F0 | 	shl	arg02, #1
22cac     0A 13 02 F1 | 	add	arg01, arg02
22cb0     09 15 E2 FA | 	rdword	arg02, arg01
22cb4     15 13 02 F6 | 	mov	arg01, local03
22cb8     18 0B B0 FD | 	call	#_psdpoke
22cbc     01 28 06 F1 | 	add	local02, #1
22cc0     02 00 00 FF 
22cc4     00 28 56 F2 | 	cmps	local02, ##1024 wc
22cc8     AC FF 9F CD |  if_b	jmp	#LR__2650
22ccc                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
22ccc     00 28 06 F6 | 	mov	local02, #0
22cd0                 | LR__2651
22cd0     14 2F 02 F6 | 	mov	local05, local02
22cd4     01 2E 66 F0 | 	shl	local05, #1
22cd8     7C 00 00 FF 
22cdc     00 2A 06 F6 | 	mov	local03, ##63488
22ce0     17 2B 02 F1 | 	add	local03, local05
22ce4     0E 00 00 FF 
22ce8     AA EA 05 F1 | 	add	ptr__dat__, ##7338
22cec     F5 12 02 F6 | 	mov	arg01, ptr__dat__
22cf0     0E 00 00 FF 
22cf4     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
22cf8     10 12 06 F1 | 	add	arg01, #16
22cfc     14 15 02 F6 | 	mov	arg02, local02
22d00     01 14 66 F0 | 	shl	arg02, #1
22d04     0A 13 02 F1 | 	add	arg01, arg02
22d08     09 15 E2 FA | 	rdword	arg02, arg01
22d0c     15 13 02 F6 | 	mov	arg01, local03
22d10     C0 0A B0 FD | 	call	#_psdpoke
22d14     01 28 06 F1 | 	add	local02, #1
22d18     02 00 00 FF 
22d1c     00 28 56 F2 | 	cmps	local02, ##1024 wc
22d20     AC FF 9F CD |  if_b	jmp	#LR__2651
22d24                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
22d24     00 28 06 F6 | 	mov	local02, #0
22d28     0C 00 00 FF 
22d2c     D8 E4 05 F1 | 	add	objptr, ##6360
22d30     97 18 48 FB | 	callpa	#(@LR__2653-@LR__2652)>>2,fcache_load_ptr_
22d34                 | LR__2652
22d34     14 2F 02 F6 | 	mov	local05, local02
22d38     01 2E 66 F0 | 	shl	local05, #1
22d3c     F2 2E 02 F1 | 	add	local05, objptr
22d40     14 2B 02 F6 | 	mov	local03, local02
22d44     08 2A 66 F0 | 	shl	local03, #8
22d48     7F 00 00 FF 
22d4c     00 31 06 F6 | 	mov	local06, ##65280
22d50     15 31 82 F1 | 	sub	local06, local03
22d54     17 31 52 FC | 	wrword	local06, local05
22d58     01 28 06 F1 | 	add	local02, #1
22d5c     00 29 56 F2 | 	cmps	local02, #256 wc
22d60     D0 FF 9F CD |  if_b	jmp	#LR__2652
22d64                 | LR__2653
22d64     0C 00 00 FF 
22d68     D8 E4 85 F1 | 	sub	objptr, ##6360
22d6c                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
22d6c     00 28 06 F6 | 	mov	local02, #0
22d70                 | LR__2654
22d70     14 2F 02 F6 | 	mov	local05, local02
22d74     01 2E 66 F0 | 	shl	local05, #1
22d78     0D 00 00 FF 
22d7c     D8 E4 05 F1 | 	add	objptr, ##6872
22d80     F2 2E 02 F1 | 	add	local05, objptr
22d84     80 BF 23 FF 
22d88     00 12 06 F6 | 	mov	arg01, ##1199505408
22d8c     13 15 02 F6 | 	mov	arg02, local01
22d90     0D 00 00 FF 
22d94     D8 E4 85 F1 | 	sub	objptr, ##6872
22d98     7C 71 B0 FD | 	call	#__system___float_mul
22d9c     FD 12 02 F6 | 	mov	arg01, result1
22da0     01 14 06 F6 | 	mov	arg02, #1
22da4     38 76 B0 FD | 	call	#__system___float_tointeger
22da8     17 FB 51 FC | 	wrword	result1, local05
22dac     13 13 02 F6 | 	mov	arg01, local01
22db0     CC BC 1F FF 
22db4     9A 15 06 F6 | 	mov	arg02, ##1064933786
22db8     5C 71 B0 FD | 	call	#__system___float_mul
22dbc     FD 26 02 F6 | 	mov	local01, result1
22dc0     01 28 06 F1 | 	add	local02, #1
22dc4     00 29 56 F2 | 	cmps	local02, #256 wc
22dc8     A4 FF 9F CD |  if_b	jmp	#LR__2654
22dcc     0E 00 00 FF 
22dd0     D6 E4 05 F1 | 	add	objptr, ##7382
22dd4     F2 00 58 FC | 	wrword	#0, objptr
22dd8                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
22dd8     00 28 06 F6 | 	mov	local02, #0
22ddc     02 E4 05 F1 | 	add	objptr, #2
22de0     97 10 48 FB | 	callpa	#(@LR__2656-@LR__2655)>>2,fcache_load_ptr_
22de4                 | LR__2655
22de4     14 2F 02 F6 | 	mov	local05, local02
22de8     01 2E 66 F0 | 	shl	local05, #1
22dec     F2 2E 02 F1 | 	add	local05, objptr
22df0     7F 00 80 FF 
22df4     17 01 5A FC | 	wrword	##65280, local05
22df8     01 28 06 F1 | 	add	local02, #1
22dfc     FF 28 56 F2 | 	cmps	local02, #255 wc
22e00     E0 FF 9F CD |  if_b	jmp	#LR__2655
22e04                 | LR__2656
22e04     FE E5 05 F1 | 	add	objptr, #510
22e08     F2 00 58 FC | 	wrword	#0, objptr
22e0c                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
22e0c     00 28 06 F6 | 	mov	local02, #0
22e10     02 E4 05 F1 | 	add	objptr, #2
22e14     97 52 48 FB | 	callpa	#(@LR__2661-@LR__2657)>>2,fcache_load_ptr_
22e18                 | LR__2657
22e18     14 2F 02 F6 | 	mov	local05, local02
22e1c     01 2E 66 F0 | 	shl	local05, #1
22e20     F2 2E 02 F1 | 	add	local05, objptr
22e24     14 31 02 F6 | 	mov	local06, local02
22e28     0C 30 66 F0 | 	shl	local06, #12
22e2c     17 31 52 FC | 	wrword	local06, local05
22e30     01 28 06 F1 | 	add	local02, #1
22e34     10 28 56 F2 | 	cmps	local02, #16 wc
22e38     DC FF 9F CD |  if_b	jmp	#LR__2657
22e3c                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
22e3c     10 28 06 F6 | 	mov	local02, #16
22e40                 | LR__2658
22e40     14 2F 02 F6 | 	mov	local05, local02
22e44     01 2E 66 F0 | 	shl	local05, #1
22e48     F2 2E 02 F1 | 	add	local05, objptr
22e4c     7F 00 80 FF 
22e50     17 01 5A FC | 	wrword	##65280, local05
22e54     01 28 06 F1 | 	add	local02, #1
22e58     F0 28 16 F2 | 	cmp	local02, #240 wc
22e5c     E0 FF 9F CD |  if_b	jmp	#LR__2658
22e60                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
22e60     F0 28 06 F6 | 	mov	local02, #240
22e64                 | LR__2659
22e64     14 2F 02 F6 | 	mov	local05, local02
22e68     01 2E 66 F0 | 	shl	local05, #1
22e6c     F2 2E 02 F1 | 	add	local05, objptr
22e70     FF 2A 06 F6 | 	mov	local03, #255
22e74     14 2B 82 F1 | 	sub	local03, local02
22e78     0C 2A 66 F0 | 	shl	local03, #12
22e7c     17 2B 52 FC | 	wrword	local03, local05
22e80     01 28 06 F1 | 	add	local02, #1
22e84     00 29 16 F2 | 	cmp	local02, #256 wc
22e88     D8 FF 9F CD |  if_b	jmp	#LR__2659
22e8c                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
22e8c     00 28 06 F6 | 	mov	local02, #0
22e90     01 00 00 FF 
22e94     00 E4 05 F1 | 	add	objptr, ##512
22e98                 | LR__2660
22e98     14 2F 02 F6 | 	mov	local05, local02
22e9c     01 2E 66 F0 | 	shl	local05, #1
22ea0     F2 2E 02 F1 | 	add	local05, objptr
22ea4     14 31 02 F6 | 	mov	local06, local02
22ea8     08 30 66 F0 | 	shl	local06, #8
22eac     17 31 52 FC | 	wrword	local06, local05
22eb0     01 28 06 F1 | 	add	local02, #1
22eb4     00 29 56 F2 | 	cmps	local02, #256 wc
22eb8     DC FF 9F CD |  if_b	jmp	#LR__2660
22ebc                 | LR__2661
22ebc     FE E5 05 F1 | 	add	objptr, #510
22ec0     F2 00 58 FC | 	wrword	#0, objptr
22ec4                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
22ec4     00 28 06 F6 | 	mov	local02, #0
22ec8     02 E4 05 F1 | 	add	objptr, #2
22ecc     97 6A 48 FB | 	callpa	#(@LR__2666-@LR__2662)>>2,fcache_load_ptr_
22ed0                 | LR__2662
22ed0     14 2F 02 F6 | 	mov	local05, local02
22ed4     01 2E 66 F0 | 	shl	local05, #1
22ed8     F2 2E 02 F1 | 	add	local05, objptr
22edc     14 31 02 F6 | 	mov	local06, local02
22ee0     04 30 66 F0 | 	shl	local06, #4
22ee4     14 31 02 F1 | 	add	local06, local02
22ee8     04 30 66 F0 | 	shl	local06, #4
22eec     17 31 52 FC | 	wrword	local06, local05
22ef0     01 28 06 F1 | 	add	local02, #1
22ef4     F0 28 56 F2 | 	cmps	local02, #240 wc
22ef8     D4 FF 9F CD |  if_b	jmp	#LR__2662
22efc     F0 28 06 F6 | 	mov	local02, #240
22f00                 | LR__2663
22f00     14 2F 02 F6 | 	mov	local05, local02
22f04     01 2E 66 F0 | 	shl	local05, #1
22f08     F2 2E 02 F1 | 	add	local05, objptr
22f0c     FF 2A 06 F6 | 	mov	local03, #255
22f10     14 2B 82 F1 | 	sub	local03, local02
22f14     0C 2A 66 F0 | 	shl	local03, #12
22f18     17 2B 52 FC | 	wrword	local03, local05
22f1c     01 28 06 F1 | 	add	local02, #1
22f20     00 29 16 F2 | 	cmp	local02, #256 wc
22f24     D8 FF 9F CD |  if_b	jmp	#LR__2663
22f28                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
22f28     00 28 06 F6 | 	mov	local02, #0
22f2c     01 00 00 FF 
22f30     00 E4 05 F1 | 	add	objptr, ##512
22f34                 | LR__2664
22f34     14 2F 02 F6 | 	mov	local05, local02
22f38     01 2E 66 F0 | 	shl	local05, #1
22f3c     F2 2E 02 F1 | 	add	local05, objptr
22f40     14 31 02 F6 | 	mov	local06, local02
22f44     09 30 66 F0 | 	shl	local06, #9
22f48     17 31 52 FC | 	wrword	local06, local05
22f4c     FF 2E 06 F6 | 	mov	local05, #255
22f50     14 2F 82 F1 | 	sub	local05, local02
22f54     01 2E 66 F0 | 	shl	local05, #1
22f58     F2 2E 02 F1 | 	add	local05, objptr
22f5c     14 31 02 F6 | 	mov	local06, local02
22f60     09 30 66 F0 | 	shl	local06, #9
22f64     17 31 52 FC | 	wrword	local06, local05
22f68     01 28 06 F1 | 	add	local02, #1
22f6c     80 28 56 F2 | 	cmps	local02, #128 wc
22f70     C0 FF 9F CD |  if_b	jmp	#LR__2664
22f74                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
22f74     00 28 06 F6 | 	mov	local02, #0
22f78     01 00 00 FF 
22f7c     00 E4 05 F1 | 	add	objptr, ##512
22f80                 | LR__2665
22f80     14 2F 02 F6 | 	mov	local05, local02
22f84     01 2E 66 F0 | 	shl	local05, #1
22f88     F2 2E 02 F1 | 	add	local05, objptr
22f8c     14 31 02 F6 | 	mov	local06, local02
22f90     0D 30 66 F0 | 	shl	local06, #13
22f94     17 31 52 FC | 	wrword	local06, local05
22f98     01 28 06 F1 | 	add	local02, #1
22f9c     08 28 56 F2 | 	cmps	local02, #8 wc
22fa0     DC FF 9F CD |  if_b	jmp	#LR__2665
22fa4                 | LR__2666
22fa4                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
22fa4     08 28 06 F6 | 	mov	local02, #8
22fa8     97 42 48 FB | 	callpa	#(@LR__2670-@LR__2667)>>2,fcache_load_ptr_
22fac                 | LR__2667
22fac     14 2F 02 F6 | 	mov	local05, local02
22fb0     01 2E 66 F0 | 	shl	local05, #1
22fb4     F2 2E 02 F1 | 	add	local05, objptr
22fb8     14 27 02 F6 | 	mov	local01, local02
22fbc     08 26 86 F1 | 	sub	local01, #8
22fc0     0B 26 66 F0 | 	shl	local01, #11
22fc4     7F 00 00 FF 
22fc8     00 31 06 F6 | 	mov	local06, ##65280
22fcc     13 31 82 F1 | 	sub	local06, local01
22fd0     17 31 52 FC | 	wrword	local06, local05
22fd4     01 28 06 F1 | 	add	local02, #1
22fd8     18 28 16 F2 | 	cmp	local02, #24 wc
22fdc     CC FF 9F CD |  if_b	jmp	#LR__2667
22fe0                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
22fe0     18 28 06 F6 | 	mov	local02, #24
22fe4                 | LR__2668
22fe4     14 2F 02 F6 | 	mov	local05, local02
22fe8     01 2E 66 F0 | 	shl	local05, #1
22fec     F2 2E 02 F1 | 	add	local05, objptr
22ff0     40 00 80 FF 
22ff4     17 01 58 FC | 	wrword	##32768, local05
22ff8     01 28 06 F1 | 	add	local02, #1
22ffc     81 28 16 F2 | 	cmp	local02, #129 wc
23000     E0 FF 9F CD |  if_b	jmp	#LR__2668
23004                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
23004     81 28 06 F6 | 	mov	local02, #129
23008                 | LR__2669
23008     14 2F 02 F6 | 	mov	local05, local02
2300c     01 2E 66 F0 | 	shl	local05, #1
23010     F2 2E 02 F1 | 	add	local05, objptr
23014     FF 2A 06 F6 | 	mov	local03, #255
23018     14 2B 82 F1 | 	sub	local03, local02
2301c     08 2A 66 F0 | 	shl	local03, #8
23020     17 2B 52 FC | 	wrword	local03, local05
23024     01 28 06 F1 | 	add	local02, #1
23028     00 29 16 F2 | 	cmp	local02, #256 wc
2302c     D8 FF 9F CD |  if_b	jmp	#LR__2669
23030                 | LR__2670
23030     3E 00 00 FF 
23034     EA E5 05 F1 | 	add	objptr, ##32234
23038     F2 00 59 FC | 	wrword	#128, objptr
2303c     52 00 00 FF 
23040     C2 E4 85 F1 | 	sub	objptr, ##42178
23044                 | ' for i=0 to 7
23044     00 28 06 F6 | 	mov	local02, #0
23048     97 8E 48 FB | 	callpa	#(@LR__2672-@LR__2671)>>2,fcache_load_ptr_
2304c                 | LR__2671
2304c     14 2F 02 F6 | 	mov	local05, local02
23050     01 2E 66 F0 | 	shl	local05, #1
23054     14 2F 02 F1 | 	add	local05, local02
23058     03 2E 66 F0 | 	shl	local05, #3
2305c     14 00 00 FF 
23060     38 E5 05 F1 | 	add	objptr, ##10552
23064     F2 2E 02 F1 | 	add	local05, objptr
23068     00 EE A1 FF 
2306c     17 01 68 FC | 	wrlong	##1138491392, local05
23070     14 2F 02 F6 | 	mov	local05, local02
23074     01 2E 66 F0 | 	shl	local05, #1
23078     14 2F 02 F1 | 	add	local05, local02
2307c     03 2E 66 F0 | 	shl	local05, #3
23080     F2 2E 02 F1 | 	add	local05, objptr
23084     04 2E 06 F1 | 	add	local05, #4
23088     17 29 42 FC | 	wrbyte	local02, local05
2308c     14 2F 02 F6 | 	mov	local05, local02
23090     01 2E 66 F0 | 	shl	local05, #1
23094     14 2F 02 F1 | 	add	local05, local02
23098     03 2E 66 F0 | 	shl	local05, #3
2309c     F2 2E 02 F1 | 	add	local05, objptr
230a0     05 2E 06 F1 | 	add	local05, #5
230a4     17 29 42 FC | 	wrbyte	local02, local05
230a8     14 2F 02 F6 | 	mov	local05, local02
230ac     01 2E 66 F0 | 	shl	local05, #1
230b0     14 2F 02 F1 | 	add	local05, local02
230b4     03 2E 66 F0 | 	shl	local05, #3
230b8     F2 2E 02 F1 | 	add	local05, objptr
230bc     06 2E 06 F1 | 	add	local05, #6
230c0     17 01 58 FC | 	wrword	#0, local05
230c4     14 2F 02 F6 | 	mov	local05, local02
230c8     01 2E 66 F0 | 	shl	local05, #1
230cc     14 2F 02 F1 | 	add	local05, local02
230d0     03 2E 66 F0 | 	shl	local05, #3
230d4     F2 2E 02 F1 | 	add	local05, objptr
230d8     08 2E 06 F1 | 	add	local05, #8
230dc     00 C0 9F FF 
230e0     17 01 68 FC | 	wrlong	##1065353216, local05
230e4     14 2F 02 F6 | 	mov	local05, local02
230e8     01 2E 66 F0 | 	shl	local05, #1
230ec     14 2F 02 F1 | 	add	local05, local02
230f0     03 2E 66 F0 | 	shl	local05, #3
230f4     F2 2E 02 F1 | 	add	local05, objptr
230f8     0C 2E 06 F1 | 	add	local05, #12
230fc     00 40 A0 FF 
23100     17 01 68 FC | 	wrlong	##1082130432, local05
23104     14 2F 02 F6 | 	mov	local05, local02
23108     01 2E 66 F0 | 	shl	local05, #1
2310c     14 2F 02 F1 | 	add	local05, local02
23110     03 2E 66 F0 | 	shl	local05, #3
23114     F2 2E 02 F1 | 	add	local05, objptr
23118     10 2E 06 F1 | 	add	local05, #16
2311c     17 01 68 FC | 	wrlong	#0, local05
23120     14 2F 02 F6 | 	mov	local05, local02
23124     01 2E 66 F0 | 	shl	local05, #1
23128     14 2F 02 F1 | 	add	local05, local02
2312c     03 2E 66 F0 | 	shl	local05, #3
23130     F2 2E 02 F1 | 	add	local05, objptr
23134     14 2E 06 F1 | 	add	local05, #20
23138     17 FF 59 FC | 	wrword	#255, local05
2313c     14 2F 02 F6 | 	mov	local05, local02
23140     01 2E 66 F0 | 	shl	local05, #1
23144     3D 00 00 FF 
23148     7C E5 05 F1 | 	add	objptr, ##31612
2314c     F2 2E 02 F1 | 	add	local05, objptr
23150     17 FF 59 FC | 	wrword	#255, local05
23154     01 28 06 F1 | 	add	local02, #1
23158     08 28 56 F2 | 	cmps	local02, #8 wc
2315c     52 00 00 FF 
23160     B4 E4 85 F1 | 	sub	objptr, ##42164
23164     E4 FE 9F CD |  if_b	jmp	#LR__2671
23168                 | LR__2672
23168     00 6E 20 FF 
2316c     00 30 06 F6 | 	mov	local06, ##1088159744
23170                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
23170     03 2E 06 F6 | 	mov	local05, #3
23174                 | LR__2673
23174     18 13 02 F6 | 	mov	arg01, local06
23178     CE C3 1F FF 
2317c     7D 14 06 F6 | 	mov	arg02, ##1065852029
23180     94 6D B0 FD | 	call	#__system___float_mul
23184     FD 30 02 F6 | 	mov	local06, result1
23188     FA 2F 6E FB | 	djnz	local05, #LR__2673
2318c     00 28 06 F6 | 	mov	local02, #0
23190                 | LR__2674
23190     14 2D 02 F6 | 	mov	local04, local02
23194     02 2C 66 F0 | 	shl	local04, #2
23198     14 00 00 FF 
2319c     D8 E4 05 F1 | 	add	objptr, ##10456
231a0     F2 2C 02 F1 | 	add	local04, objptr
231a4     16 31 62 FC | 	wrlong	local06, local04
231a8     18 13 02 F6 | 	mov	arg01, local06
231ac     CE C3 1F FF 
231b0     7D 14 06 F6 | 	mov	arg02, ##1065852029
231b4     14 00 00 FF 
231b8     D8 E4 85 F1 | 	sub	objptr, ##10456
231bc     58 6D B0 FD | 	call	#__system___float_mul
231c0     FD 30 02 F6 | 	mov	local06, result1
231c4     01 28 06 F1 | 	add	local02, #1
231c8     0C 28 56 F2 | 	cmps	local02, #12 wc
231cc     C0 FF 9F CD |  if_b	jmp	#LR__2674
231d0     14 00 00 FF 
231d4     08 E5 05 F1 | 	add	objptr, ##10504
231d8     F2 50 6B FC | 	wrlong	#424, objptr
231dc     04 E4 05 F1 | 	add	objptr, #4
231e0     F2 20 6B FC | 	wrlong	#400, objptr
231e4     04 E4 05 F1 | 	add	objptr, #4
231e8     F2 F2 6A FC | 	wrlong	#377, objptr
231ec     04 E4 05 F1 | 	add	objptr, #4
231f0     F2 C8 6A FC | 	wrlong	#356, objptr
231f4     04 E4 05 F1 | 	add	objptr, #4
231f8     F2 A0 6A FC | 	wrlong	#336, objptr
231fc     04 E4 05 F1 | 	add	objptr, #4
23200     F2 7A 6A FC | 	wrlong	#317, objptr
23204     04 E4 05 F1 | 	add	objptr, #4
23208     F2 58 6A FC | 	wrlong	#300, objptr
2320c     04 E4 05 F1 | 	add	objptr, #4
23210     F2 36 6A FC | 	wrlong	#283, objptr
23214     04 E4 05 F1 | 	add	objptr, #4
23218     F2 16 6A FC | 	wrlong	#267, objptr
2321c     04 E4 05 F1 | 	add	objptr, #4
23220     F2 F8 69 FC | 	wrlong	#252, objptr
23224     04 E4 05 F1 | 	add	objptr, #4
23228     F2 DC 69 FC | 	wrlong	#238, objptr
2322c     04 E4 05 F1 | 	add	objptr, #4
23230     F2 C0 69 FC | 	wrlong	#224, objptr
23234     3D 00 00 FF 
23238     8E E5 05 F1 | 	add	objptr, ##31630
2323c     F2 00 59 FC | 	wrword	#128, objptr
23240     02 E4 85 F1 | 	sub	objptr, #2
23244     F2 00 59 FC | 	wrword	#128, objptr
23248     52 00 00 FF 
2324c     C0 E4 85 F1 | 	sub	objptr, ##42176
23250     A7 F0 03 F6 | 	mov	ptra, fp
23254     B2 00 A0 FD | 	call	#popregs_
23258                 | _init_audio_ret
23258     2D 00 64 FD | 	ret
2325c                 | 
2325c                 | ' 
2325c                 | ' '------------------- Error messages
2325c                 | ' 
2325c                 | ' sub init_error_strings
2325c                 | _init_error_strings
2325c     BB 01 00 FF 
23260     DF 01 06 F6 | 	mov	_var01, ##@LR__6042
23264     45 00 00 FF 
23268     7C E4 05 F1 | 	add	objptr, ##35452
2326c     F2 00 62 FC | 	wrlong	_var01, objptr
23270     BB 01 00 FF 
23274     E0 01 06 F6 | 	mov	_var01, ##@LR__6043
23278     04 E4 05 F1 | 	add	objptr, #4
2327c     F2 00 62 FC | 	wrlong	_var01, objptr
23280     BC 01 00 FF 
23284     04 00 06 F6 | 	mov	_var01, ##@LR__6044
23288     04 E4 05 F1 | 	add	objptr, #4
2328c     F2 00 62 FC | 	wrlong	_var01, objptr
23290     BC 01 00 FF 
23294     24 00 06 F6 | 	mov	_var01, ##@LR__6045
23298     04 E4 05 F1 | 	add	objptr, #4
2329c     F2 00 62 FC | 	wrlong	_var01, objptr
232a0     BC 01 00 FF 
232a4     3D 00 06 F6 | 	mov	_var01, ##@LR__6046
232a8     04 E4 05 F1 | 	add	objptr, #4
232ac     F2 00 62 FC | 	wrlong	_var01, objptr
232b0     BC 01 00 FF 
232b4     58 00 06 F6 | 	mov	_var01, ##@LR__6047
232b8     04 E4 05 F1 | 	add	objptr, #4
232bc     F2 00 62 FC | 	wrlong	_var01, objptr
232c0     BC 01 00 FF 
232c4     79 00 06 F6 | 	mov	_var01, ##@LR__6048
232c8     04 E4 05 F1 | 	add	objptr, #4
232cc     F2 00 62 FC | 	wrlong	_var01, objptr
232d0     BC 01 00 FF 
232d4     A6 00 06 F6 | 	mov	_var01, ##@LR__6049
232d8     04 E4 05 F1 | 	add	objptr, #4
232dc     F2 00 62 FC | 	wrlong	_var01, objptr
232e0     BC 01 00 FF 
232e4     D0 00 06 F6 | 	mov	_var01, ##@LR__6050
232e8     04 E4 05 F1 | 	add	objptr, #4
232ec     F2 00 62 FC | 	wrlong	_var01, objptr
232f0     BC 01 00 FF 
232f4     E8 00 06 F6 | 	mov	_var01, ##@LR__6051
232f8     04 E4 05 F1 | 	add	objptr, #4
232fc     F2 00 62 FC | 	wrlong	_var01, objptr
23300     BC 01 00 FF 
23304     08 01 06 F6 | 	mov	_var01, ##@LR__6052
23308     04 E4 05 F1 | 	add	objptr, #4
2330c     F2 00 62 FC | 	wrlong	_var01, objptr
23310     BC 01 00 FF 
23314     1E 01 06 F6 | 	mov	_var01, ##@LR__6053
23318     04 E4 05 F1 | 	add	objptr, #4
2331c     F2 00 62 FC | 	wrlong	_var01, objptr
23320     BC 01 00 FF 
23324     3B 01 06 F6 | 	mov	_var01, ##@LR__6054
23328     04 E4 05 F1 | 	add	objptr, #4
2332c     F2 00 62 FC | 	wrlong	_var01, objptr
23330     BC 01 00 FF 
23334     5E 01 06 F6 | 	mov	_var01, ##@LR__6055
23338     04 E4 05 F1 | 	add	objptr, #4
2333c     F2 00 62 FC | 	wrlong	_var01, objptr
23340     BC 01 00 FF 
23344     84 01 06 F6 | 	mov	_var01, ##@LR__6056
23348     04 E4 05 F1 | 	add	objptr, #4
2334c     F2 00 62 FC | 	wrlong	_var01, objptr
23350     BC 01 00 FF 
23354     9F 01 06 F6 | 	mov	_var01, ##@LR__6057
23358     04 E4 05 F1 | 	add	objptr, #4
2335c     F2 00 62 FC | 	wrlong	_var01, objptr
23360     BC 01 00 FF 
23364     AF 01 06 F6 | 	mov	_var01, ##@LR__6058
23368     04 E4 05 F1 | 	add	objptr, #4
2336c     F2 00 62 FC | 	wrlong	_var01, objptr
23370     BC 01 00 FF 
23374     BE 01 06 F6 | 	mov	_var01, ##@LR__6059
23378     04 E4 05 F1 | 	add	objptr, #4
2337c     F2 00 62 FC | 	wrlong	_var01, objptr
23380     BC 01 00 FF 
23384     D8 01 06 F6 | 	mov	_var01, ##@LR__6060
23388     04 E4 05 F1 | 	add	objptr, #4
2338c     F2 00 62 FC | 	wrlong	_var01, objptr
23390     BC 01 00 FF 
23394     E9 01 06 F6 | 	mov	_var01, ##@LR__6061
23398     04 E4 05 F1 | 	add	objptr, #4
2339c     F2 00 62 FC | 	wrlong	_var01, objptr
233a0     BD 01 00 FF 
233a4     00 00 06 F6 | 	mov	_var01, ##@LR__6062
233a8     04 E4 05 F1 | 	add	objptr, #4
233ac     F2 00 62 FC | 	wrlong	_var01, objptr
233b0     BD 01 00 FF 
233b4     13 00 06 F6 | 	mov	_var01, ##@LR__6063
233b8     04 E4 05 F1 | 	add	objptr, #4
233bc     F2 00 62 FC | 	wrlong	_var01, objptr
233c0     BD 01 00 FF 
233c4     22 00 06 F6 | 	mov	_var01, ##@LR__6064
233c8     04 E4 05 F1 | 	add	objptr, #4
233cc     F2 00 62 FC | 	wrlong	_var01, objptr
233d0     BD 01 00 FF 
233d4     3E 00 06 F6 | 	mov	_var01, ##@LR__6065
233d8     04 E4 05 F1 | 	add	objptr, #4
233dc     F2 00 62 FC | 	wrlong	_var01, objptr
233e0     BD 01 00 FF 
233e4     4E 00 06 F6 | 	mov	_var01, ##@LR__6066
233e8     04 E4 05 F1 | 	add	objptr, #4
233ec     F2 00 62 FC | 	wrlong	_var01, objptr
233f0     BD 01 00 FF 
233f4     5E 00 06 F6 | 	mov	_var01, ##@LR__6067
233f8     04 E4 05 F1 | 	add	objptr, #4
233fc     F2 00 62 FC | 	wrlong	_var01, objptr
23400     BD 01 00 FF 
23404     91 00 06 F6 | 	mov	_var01, ##@LR__6068
23408     04 E4 05 F1 | 	add	objptr, #4
2340c     F2 00 62 FC | 	wrlong	_var01, objptr
23410     BD 01 00 FF 
23414     AC 00 06 F6 | 	mov	_var01, ##@LR__6069
23418     04 E4 05 F1 | 	add	objptr, #4
2341c     F2 00 62 FC | 	wrlong	_var01, objptr
23420     BD 01 00 FF 
23424     C1 00 06 F6 | 	mov	_var01, ##@LR__6070
23428     04 E4 05 F1 | 	add	objptr, #4
2342c     F2 00 62 FC | 	wrlong	_var01, objptr
23430     BD 01 00 FF 
23434     CD 00 06 F6 | 	mov	_var01, ##@LR__6071
23438     04 E4 05 F1 | 	add	objptr, #4
2343c     F2 00 62 FC | 	wrlong	_var01, objptr
23440     BD 01 00 FF 
23444     DE 00 06 F6 | 	mov	_var01, ##@LR__6072
23448     04 E4 05 F1 | 	add	objptr, #4
2344c     F2 00 62 FC | 	wrlong	_var01, objptr
23450     BD 01 00 FF 
23454     EE 00 06 F6 | 	mov	_var01, ##@LR__6073
23458     04 E4 05 F1 | 	add	objptr, #4
2345c     F2 00 62 FC | 	wrlong	_var01, objptr
23460     BD 01 00 FF 
23464     09 01 06 F6 | 	mov	_var01, ##@LR__6074
23468     04 E4 05 F1 | 	add	objptr, #4
2346c     F2 00 62 FC | 	wrlong	_var01, objptr
23470     BD 01 00 FF 
23474     19 01 06 F6 | 	mov	_var01, ##@LR__6075
23478     04 E4 05 F1 | 	add	objptr, #4
2347c     F2 00 62 FC | 	wrlong	_var01, objptr
23480     BD 01 00 FF 
23484     27 01 06 F6 | 	mov	_var01, ##@LR__6076
23488     04 E4 05 F1 | 	add	objptr, #4
2348c     F2 00 62 FC | 	wrlong	_var01, objptr
23490     BD 01 00 FF 
23494     41 01 06 F6 | 	mov	_var01, ##@LR__6077
23498     04 E4 05 F1 | 	add	objptr, #4
2349c     F2 00 62 FC | 	wrlong	_var01, objptr
234a0     BD 01 00 FF 
234a4     74 01 06 F6 | 	mov	_var01, ##@LR__6078
234a8     04 E4 05 F1 | 	add	objptr, #4
234ac     F2 00 62 FC | 	wrlong	_var01, objptr
234b0     BD 01 00 FF 
234b4     8C 01 06 F6 | 	mov	_var01, ##@LR__6079
234b8     04 E4 05 F1 | 	add	objptr, #4
234bc     F2 00 62 FC | 	wrlong	_var01, objptr
234c0     BD 01 00 FF 
234c4     A7 01 06 F6 | 	mov	_var01, ##@LR__6080
234c8     04 E4 05 F1 | 	add	objptr, #4
234cc     F2 00 62 FC | 	wrlong	_var01, objptr
234d0     BD 01 00 FF 
234d4     C4 01 06 F6 | 	mov	_var01, ##@LR__6081
234d8     04 E4 05 F1 | 	add	objptr, #4
234dc     F2 00 62 FC | 	wrlong	_var01, objptr
234e0     BD 01 00 FF 
234e4     DD 01 06 F6 | 	mov	_var01, ##@LR__6082
234e8     04 E4 05 F1 | 	add	objptr, #4
234ec     F2 00 62 FC | 	wrlong	_var01, objptr
234f0     BD 01 00 FF 
234f4     FC 01 06 F6 | 	mov	_var01, ##@LR__6083
234f8     04 E4 05 F1 | 	add	objptr, #4
234fc     F2 00 62 FC | 	wrlong	_var01, objptr
23500     BE 01 00 FF 
23504     0A 00 06 F6 | 	mov	_var01, ##@LR__6084
23508     04 E4 05 F1 | 	add	objptr, #4
2350c     F2 00 62 FC | 	wrlong	_var01, objptr
23510     BE 01 00 FF 
23514     37 00 06 F6 | 	mov	_var01, ##@LR__6085
23518     04 E4 05 F1 | 	add	objptr, #4
2351c     F2 00 62 FC | 	wrlong	_var01, objptr
23520     BE 01 00 FF 
23524     44 00 06 F6 | 	mov	_var01, ##@LR__6086
23528     04 E4 05 F1 | 	add	objptr, #4
2352c     F2 00 62 FC | 	wrlong	_var01, objptr
23530     BE 01 00 FF 
23534     58 00 06 F6 | 	mov	_var01, ##@LR__6087
23538     04 E4 05 F1 | 	add	objptr, #4
2353c     F2 00 62 FC | 	wrlong	_var01, objptr
23540     BE 01 00 FF 
23544     7C 00 06 F6 | 	mov	_var01, ##@LR__6088
23548     04 E4 05 F1 | 	add	objptr, #4
2354c     F2 00 62 FC | 	wrlong	_var01, objptr
23550     BE 01 00 FF 
23554     93 00 06 F6 | 	mov	_var01, ##@LR__6089
23558     04 E4 05 F1 | 	add	objptr, #4
2355c     F2 00 62 FC | 	wrlong	_var01, objptr
23560     BE 01 00 FF 
23564     A6 00 06 F6 | 	mov	_var01, ##@LR__6090
23568     04 E4 05 F1 | 	add	objptr, #4
2356c     F2 00 62 FC | 	wrlong	_var01, objptr
23570     BE 01 00 FF 
23574     BD 00 06 F6 | 	mov	_var01, ##@LR__6091
23578     04 E4 05 F1 | 	add	objptr, #4
2357c     F2 00 62 FC | 	wrlong	_var01, objptr
23580     BE 01 00 FF 
23584     D6 00 06 F6 | 	mov	_var01, ##@LR__6092
23588     04 E4 05 F1 | 	add	objptr, #4
2358c     F2 00 62 FC | 	wrlong	_var01, objptr
23590     BE 01 00 FF 
23594     F8 00 06 F6 | 	mov	_var01, ##@LR__6093
23598     04 E4 05 F1 | 	add	objptr, #4
2359c     F2 00 62 FC | 	wrlong	_var01, objptr
235a0     BE 01 00 FF 
235a4     0B 01 06 F6 | 	mov	_var01, ##@LR__6094
235a8     04 E4 05 F1 | 	add	objptr, #4
235ac     F2 00 62 FC | 	wrlong	_var01, objptr
235b0     BE 01 00 FF 
235b4     1B 01 06 F6 | 	mov	_var01, ##@LR__6095
235b8     04 E4 05 F1 | 	add	objptr, #4
235bc     F2 00 62 FC | 	wrlong	_var01, objptr
235c0     BE 01 00 FF 
235c4     33 01 06 F6 | 	mov	_var01, ##@LR__6096
235c8     04 E4 05 F1 | 	add	objptr, #4
235cc     F2 00 62 FC | 	wrlong	_var01, objptr
235d0     BE 01 00 FF 
235d4     4A 01 06 F6 | 	mov	_var01, ##@LR__6097
235d8     04 E4 05 F1 | 	add	objptr, #4
235dc     F2 00 62 FC | 	wrlong	_var01, objptr
235e0     45 00 00 FF 
235e4     58 E5 85 F1 | 	sub	objptr, ##35672
235e8                 | _init_error_strings_ret
235e8     2D 00 64 FD | 	ret
235ec                 | 
235ec                 | '         
235ec                 | ' sub printerror(err as integer, linenum=0 as integer)
235ec                 | _printerror
235ec     02 4A 05 F6 | 	mov	COUNT_, #2
235f0     A8 00 A0 FD | 	call	#pushregs_
235f4     09 27 02 F6 | 	mov	local01, arg01
235f8     0A 29 02 F6 | 	mov	local02, arg02
235fc     BE 01 00 FF 
23600     57 13 06 F6 | 	mov	arg01, ##@LR__6098
23604     60 21 B0 FD | 	call	#_hg010b_spin2_write
23608     13 13 02 F6 | 	mov	arg01, local01
2360c     FC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
23610     FD 12 02 F6 | 	mov	arg01, result1
23614     50 21 B0 FD | 	call	#_hg010b_spin2_write
23618     BE 01 00 FF 
2361c     5E 13 06 F6 | 	mov	arg01, ##@LR__6099
23620     44 21 B0 FD | 	call	#_hg010b_spin2_write
23624     02 26 66 F0 | 	shl	local01, #2
23628     45 00 00 FF 
2362c     7C E4 05 F1 | 	add	objptr, ##35452
23630     F2 26 02 F1 | 	add	local01, objptr
23634     13 13 02 FB | 	rdlong	arg01, local01
23638     45 00 00 FF 
2363c     7C E4 85 F1 | 	sub	objptr, ##35452
23640     24 21 B0 FD | 	call	#_hg010b_spin2_write
23644                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
23644                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
23644     01 28 56 F2 | 	cmps	local02, #1 wc
23648     24 00 90 CD |  if_b	jmp	#LR__2680
2364c     BE 01 00 FF 
23650     62 13 06 F6 | 	mov	arg01, ##@LR__6100
23654     10 21 B0 FD | 	call	#_hg010b_spin2_write
23658     14 13 02 F6 | 	mov	arg01, local02
2365c     AC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
23660     FD 12 02 F6 | 	mov	arg01, result1
23664                 | ' 
23664                 | ' write(text)
23664     00 21 B0 FD | 	call	#_hg010b_spin2_write
23668                 | ' crlf
23668     FC 25 B0 FD | 	call	#_hg010b_spin2_crlf
2366c     10 00 90 FD | 	jmp	#LR__2681
23670                 | LR__2680
23670     BE 01 00 FF 
23674     6C 13 06 F6 | 	mov	arg01, ##@LR__6101
23678                 | ' 
23678                 | ' write(text)
23678     EC 20 B0 FD | 	call	#_hg010b_spin2_write
2367c                 | ' crlf
2367c     E8 25 B0 FD | 	call	#_hg010b_spin2_crlf
23680                 | LR__2681
23680     A7 F0 03 F6 | 	mov	ptra, fp
23684     B2 00 A0 FD | 	call	#popregs_
23688                 | _printerror_ret
23688     2D 00 64 FD | 	ret
2368c                 | 
2368c                 | ' 
2368c                 | ' '' ------------------------------- Hardware start/stop/initialization 
2368c                 | ' 
2368c                 | ' sub startpsram
2368c                 | _startpsram
2368c     00 12 06 F6 | 	mov	arg01, #0
23690     0A 14 C6 F9 | 	decod	arg02, #10
23694     0B 16 06 F6 | 	mov	arg03, #11
23698     07 18 06 F6 | 	mov	arg04, #7
2369c     0B 00 00 FF 
236a0     CC E4 05 F1 | 	add	objptr, ##5836
236a4     D0 2A B0 FD | 	call	#_psram_spin2_startx
236a8     2B 00 00 FF 
236ac     3C E5 05 F1 | 	add	objptr, ##22332
236b0     F2 FA 61 FC | 	wrlong	result1, objptr
236b4                 | '     return $7FF00 + cog*12
236b4     0C E4 05 F1 | 	add	objptr, #12
236b8     FF 03 80 FF 
236bc     F2 00 6A FC | 	wrlong	##524032, objptr
236c0     37 00 00 FF 
236c4     14 E4 85 F1 | 	sub	objptr, ##28180
236c8                 | _startpsram_ret
236c8     2D 00 64 FD | 	ret
236cc                 | 
236cc                 | ' 
236cc                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
236cc                 | _startvideo
236cc     01 4A 05 F6 | 	mov	COUNT_, #1
236d0     A8 00 A0 FD | 	call	#pushregs_
236d4     37 00 00 FF 
236d8     14 E4 05 F1 | 	add	objptr, ##28180
236dc     F2 18 02 FB | 	rdlong	arg04, objptr
236e0     37 00 00 FF 
236e4     14 E4 85 F1 | 	sub	objptr, ##28180
236e8     0A 13 02 F6 | 	mov	arg01, arg02
236ec     0C 15 02 F6 | 	mov	arg02, arg04
236f0     1C 08 B0 FD | 	call	#_hg010b_spin2_start
236f4     37 00 00 FF 
236f8     00 E4 05 F1 | 	add	objptr, ##28160
236fc     F2 FA 61 FC | 	wrlong	result1, objptr
23700                 | ' 
23700                 | ' videocog=v.start(pin,mbox)
23700                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
23700     00 26 06 F6 | 	mov	local01, #0
23704     2B 00 00 FF 
23708     34 E5 85 F1 | 	sub	objptr, ##22324
2370c                 | LR__2690
2370c     13 13 02 F6 | 	mov	arg01, local01
23710     00 28 00 FF 
23714     00 14 06 F6 | 	mov	arg02, ##5242880
23718     B4 2E B0 FD | 	call	#_psram_spin2_setQos
2371c     01 26 06 F1 | 	add	local01, #1
23720     08 26 56 F2 | 	cmps	local01, #8 wc
23724     E4 FF 9F CD |  if_b	jmp	#LR__2690
23728     2B 00 00 FF 
2372c     34 E5 05 F1 | 	add	objptr, ##22324
23730     F2 12 02 FB | 	rdlong	arg01, objptr
23734     7A 00 02 FF 
23738     00 14 06 F6 | 	mov	arg02, ##67171328
2373c     2B 00 00 FF 
23740     34 E5 85 F1 | 	sub	objptr, ##22324
23744     88 2E B0 FD | 	call	#_psram_spin2_setQos
23748     0B 00 00 FF 
2374c     CC E4 85 F1 | 	sub	objptr, ##5836
23750                 | ' psram.setQoS(videocog, $0400f400) 
23750                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
23750     F2 14 02 F6 | 	mov	arg02, objptr
23754     00 30 05 FF 
23758     00 14 46 F5 | 	or	arg02, ##174063616
2375c     00 16 06 F6 | 	mov	arg03, #0
23760     00 18 06 F6 | 	mov	arg04, #0
23764     00 12 06 F6 | 	mov	arg01, #0
23768     D8 43 B0 FD | 	call	#__system___basic_open
2376c                 | ' return videocog
2376c     37 00 00 FF 
23770     00 E4 05 F1 | 	add	objptr, ##28160
23774     F2 FA 01 FB | 	rdlong	result1, objptr
23778     37 00 00 FF 
2377c     00 E4 85 F1 | 	sub	objptr, ##28160
23780     A7 F0 03 F6 | 	mov	ptra, fp
23784     B2 00 A0 FD | 	call	#popregs_
23788                 | _startvideo_ret
23788     2D 00 64 FD | 	ret
2378c                 | 
2378c                 | ' 
2378c                 | ' 
2378c                 | ' 
2378c                 | ' '' ------------------------------- Convenient psram peek/poke
2378c                 | ' 
2378c                 | ' sub pslpoke(addr as ulong,value as ulong)
2378c                 | _pslpoke
2378c     00 4A 05 F6 | 	mov	COUNT_, #0
23790     A8 00 A0 FD | 	call	#pushregs_
23794     08 F0 07 F1 | 	add	ptra, #8
23798     A7 12 62 FC | 	wrlong	arg01, fp
2379c     04 4E 05 F1 | 	add	fp, #4
237a0     A7 14 62 FC | 	wrlong	arg02, fp
237a4     A7 12 02 F6 | 	mov	arg01, fp
237a8     04 4E 85 F1 | 	sub	fp, #4
237ac     A7 14 02 FB | 	rdlong	arg02, fp
237b0     04 16 06 F6 | 	mov	arg03, #4
237b4     0B 00 00 FF 
237b8     CC E4 05 F1 | 	add	objptr, ##5836
237bc     80 2C B0 FD | 	call	#_psram_spin2_write
237c0     0B 00 00 FF 
237c4     CC E4 85 F1 | 	sub	objptr, ##5836
237c8     A7 F0 03 F6 | 	mov	ptra, fp
237cc     B2 00 A0 FD | 	call	#popregs_
237d0                 | _pslpoke_ret
237d0     2D 00 64 FD | 	ret
237d4                 | 
237d4                 | ' 
237d4                 | ' sub psdpoke(addr as ulong,value as ulong)
237d4                 | _psdpoke
237d4     00 4A 05 F6 | 	mov	COUNT_, #0
237d8     A8 00 A0 FD | 	call	#pushregs_
237dc     08 F0 07 F1 | 	add	ptra, #8
237e0     A7 12 62 FC | 	wrlong	arg01, fp
237e4     04 4E 05 F1 | 	add	fp, #4
237e8     A7 14 62 FC | 	wrlong	arg02, fp
237ec     A7 12 02 F6 | 	mov	arg01, fp
237f0     04 4E 85 F1 | 	sub	fp, #4
237f4     A7 14 02 FB | 	rdlong	arg02, fp
237f8     02 16 06 F6 | 	mov	arg03, #2
237fc     0B 00 00 FF 
23800     CC E4 05 F1 | 	add	objptr, ##5836
23804     38 2C B0 FD | 	call	#_psram_spin2_write
23808     0B 00 00 FF 
2380c     CC E4 85 F1 | 	sub	objptr, ##5836
23810     A7 F0 03 F6 | 	mov	ptra, fp
23814     B2 00 A0 FD | 	call	#popregs_
23818                 | _psdpoke_ret
23818     2D 00 64 FD | 	ret
2381c                 | 
2381c                 | ' 
2381c                 | ' sub pspoke(addr as ulong,value as ulong)
2381c                 | _pspoke
2381c     00 4A 05 F6 | 	mov	COUNT_, #0
23820     A8 00 A0 FD | 	call	#pushregs_
23824     08 F0 07 F1 | 	add	ptra, #8
23828     A7 12 62 FC | 	wrlong	arg01, fp
2382c     04 4E 05 F1 | 	add	fp, #4
23830     A7 14 62 FC | 	wrlong	arg02, fp
23834     A7 12 02 F6 | 	mov	arg01, fp
23838     04 4E 85 F1 | 	sub	fp, #4
2383c     A7 14 02 FB | 	rdlong	arg02, fp
23840     01 16 06 F6 | 	mov	arg03, #1
23844     0B 00 00 FF 
23848     CC E4 05 F1 | 	add	objptr, ##5836
2384c     F0 2B B0 FD | 	call	#_psram_spin2_write
23850     0B 00 00 FF 
23854     CC E4 85 F1 | 	sub	objptr, ##5836
23858     A7 F0 03 F6 | 	mov	ptra, fp
2385c     B2 00 A0 FD | 	call	#popregs_
23860                 | _pspoke_ret
23860     2D 00 64 FD | 	ret
23864                 | 
23864                 | ' 
23864                 | ' function pspeek(adr as ulong) as ubyte
23864                 | _pspeek
23864     00 4A 05 F6 | 	mov	COUNT_, #0
23868     A8 00 A0 FD | 	call	#pushregs_
2386c     0C F0 07 F1 | 	add	ptra, #12
23870     04 4E 05 F1 | 	add	fp, #4
23874     A7 12 62 FC | 	wrlong	arg01, fp
23878     04 4E 05 F1 | 	add	fp, #4
2387c     A7 12 02 F6 | 	mov	arg01, fp
23880     04 4E 85 F1 | 	sub	fp, #4
23884     A7 14 02 FB | 	rdlong	arg02, fp
23888     04 4E 85 F1 | 	sub	fp, #4
2388c     01 16 06 F6 | 	mov	arg03, #1
23890     0B 00 00 FF 
23894     CC E4 05 F1 | 	add	objptr, ##5836
23898     08 2B B0 FD | 	call	#_psram_spin2_read1
2389c     0B 00 00 FF 
238a0     CC E4 85 F1 | 	sub	objptr, ##5836
238a4                 | ' psram.read1(varptr(res),adr,1)
238a4                 | ' return res
238a4     08 4E 05 F1 | 	add	fp, #8
238a8     A7 FA C1 FA | 	rdbyte	result1, fp
238ac     08 4E 85 F1 | 	sub	fp, #8
238b0     A7 F0 03 F6 | 	mov	ptra, fp
238b4     B2 00 A0 FD | 	call	#popregs_
238b8                 | _pspeek_ret
238b8     2D 00 64 FD | 	ret
238bc                 | 
238bc                 | ' 
238bc                 | ' function pslpeek(adr as ulong) as ulong
238bc                 | _pslpeek
238bc     00 4A 05 F6 | 	mov	COUNT_, #0
238c0     A8 00 A0 FD | 	call	#pushregs_
238c4     0C F0 07 F1 | 	add	ptra, #12
238c8     04 4E 05 F1 | 	add	fp, #4
238cc     A7 12 62 FC | 	wrlong	arg01, fp
238d0     04 4E 05 F1 | 	add	fp, #4
238d4     A7 12 02 F6 | 	mov	arg01, fp
238d8     04 4E 85 F1 | 	sub	fp, #4
238dc     A7 14 02 FB | 	rdlong	arg02, fp
238e0     04 4E 85 F1 | 	sub	fp, #4
238e4     04 16 06 F6 | 	mov	arg03, #4
238e8     0B 00 00 FF 
238ec     CC E4 05 F1 | 	add	objptr, ##5836
238f0     B0 2A B0 FD | 	call	#_psram_spin2_read1
238f4     0B 00 00 FF 
238f8     CC E4 85 F1 | 	sub	objptr, ##5836
238fc                 | ' psram.read1(varptr(res),adr,4)
238fc                 | ' return res
238fc     08 4E 05 F1 | 	add	fp, #8
23900     A7 FA 01 FB | 	rdlong	result1, fp
23904     08 4E 85 F1 | 	sub	fp, #8
23908     A7 F0 03 F6 | 	mov	ptra, fp
2390c     B2 00 A0 FD | 	call	#popregs_
23910                 | _pslpeek_ret
23910     2D 00 64 FD | 	ret
23914                 | 
23914                 | ' 
23914                 | ' function psdpeek(adr as ulong) as ulong
23914                 | _psdpeek
23914     00 4A 05 F6 | 	mov	COUNT_, #0
23918     A8 00 A0 FD | 	call	#pushregs_
2391c     0C F0 07 F1 | 	add	ptra, #12
23920     04 4E 05 F1 | 	add	fp, #4
23924     A7 12 62 FC | 	wrlong	arg01, fp
23928     04 4E 05 F1 | 	add	fp, #4
2392c     A7 12 02 F6 | 	mov	arg01, fp
23930     04 4E 85 F1 | 	sub	fp, #4
23934     A7 14 02 FB | 	rdlong	arg02, fp
23938     04 4E 85 F1 | 	sub	fp, #4
2393c     02 16 06 F6 | 	mov	arg03, #2
23940     0B 00 00 FF 
23944     CC E4 05 F1 | 	add	objptr, ##5836
23948     58 2A B0 FD | 	call	#_psram_spin2_read1
2394c     0B 00 00 FF 
23950     CC E4 85 F1 | 	sub	objptr, ##5836
23954                 | ' psram.read1(varptr(res),adr,2)
23954                 | ' return res
23954     08 4E 05 F1 | 	add	fp, #8
23958     A7 FA E1 FA | 	rdword	result1, fp
2395c     08 4E 85 F1 | 	sub	fp, #8
23960     A7 F0 03 F6 | 	mov	ptra, fp
23964     B2 00 A0 FD | 	call	#popregs_
23968                 | _psdpeek_ret
23968     2D 00 64 FD | 	ret
2396c                 | 
2396c                 | ' 
2396c                 | ' '' ------------------------------- USB keyboard scan to char translator
2396c                 | ' 
2396c                 | ' function scantochar(key)
2396c                 | _scantochar
2396c                 | ' 
2396c                 | ' select case (key shr 8) and 255
2396c     09 01 02 F6 | 	mov	_var01, arg01
23970     08 00 C6 F0 | 	sar	_var01, #8
23974     FF 00 0E F5 | 	and	_var01, #255 wz
23978     24 00 90 AD |  if_e	jmp	#LR__2700
2397c     02 00 0E F2 | 	cmp	_var01, #2 wz
23980     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
23984     30 00 90 AD |  if_e	jmp	#LR__2701
23988     40 00 0E F2 | 	cmp	_var01, #64 wz
2398c     44 00 90 AD |  if_e	jmp	#LR__2702
23990     42 00 0E F2 | 	cmp	_var01, #66 wz
23994     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
23998     70 00 90 5D |  if_ne	jmp	#LR__2704
2399c     50 00 90 FD | 	jmp	#LR__2703
239a0                 | LR__2700
239a0     09 FB 01 F6 | 	mov	result1, arg01
239a4     7F FA 05 F5 | 	and	result1, #127
239a8     02 FA 65 F0 | 	shl	result1, #2
239ac     F5 FA 01 F1 | 	add	result1, ptr__dat__
239b0     FD FA C1 FA | 	rdbyte	result1, result1
239b4     54 00 90 FD | 	jmp	#_scantochar_ret
239b8                 | LR__2701
239b8     09 FB 01 F6 | 	mov	result1, arg01
239bc     7F FA 05 F5 | 	and	result1, #127
239c0     02 FA 65 F0 | 	shl	result1, #2
239c4     01 FA 05 F1 | 	add	result1, #1
239c8     F5 FA 01 F1 | 	add	result1, ptr__dat__
239cc     FD FA C1 FA | 	rdbyte	result1, result1
239d0     38 00 90 FD | 	jmp	#_scantochar_ret
239d4                 | LR__2702
239d4     09 FB 01 F6 | 	mov	result1, arg01
239d8     7F FA 05 F5 | 	and	result1, #127
239dc     02 FA 65 F0 | 	shl	result1, #2
239e0     02 FA 05 F1 | 	add	result1, #2
239e4     F5 FA 01 F1 | 	add	result1, ptr__dat__
239e8     FD FA C1 FA | 	rdbyte	result1, result1
239ec     1C 00 90 FD | 	jmp	#_scantochar_ret
239f0                 | LR__2703
239f0     09 FB 01 F6 | 	mov	result1, arg01
239f4     7F FA 05 F5 | 	and	result1, #127
239f8     02 FA 65 F0 | 	shl	result1, #2
239fc     03 FA 05 F1 | 	add	result1, #3
23a00     F5 FA 01 F1 | 	add	result1, ptr__dat__
23a04     FD FA C1 FA | 	rdbyte	result1, result1
23a08     00 00 90 FD | 	jmp	#_scantochar_ret
23a0c                 | LR__2704
23a0c                 | _scantochar_ret
23a0c     2D 00 64 FD | 	ret
23a10                 | 
23a10                 | _program
23a10     01 4A 05 F6 | 	mov	COUNT_, #1
23a14     A8 00 A0 FD | 	call	#pushregs_
23a18     70 FC BF FD | 	call	#_startpsram
23a1c     40 12 06 F6 | 	mov	arg01, #64
23a20     00 14 06 F6 | 	mov	arg02, #0
23a24     00 16 06 F6 | 	mov	arg03, #0
23a28     A0 FC BF FD | 	call	#_startvideo
23a2c     37 00 00 FF 
23a30     14 E4 05 F1 | 	add	objptr, ##28180
23a34     F2 12 02 FB | 	rdlong	arg01, objptr
23a38     00 14 06 F6 | 	mov	arg02, #0
23a3c     FB 03 00 FF 
23a40     00 17 06 F6 | 	mov	arg03, ##521984
23a44     2B 00 00 FF 
23a48     48 E5 85 F1 | 	sub	objptr, ##22344
23a4c     78 2F B0 FD | 	call	#_audio096_spin2_start
23a50     FE 16 02 F6 | 	mov	arg03, result2
23a54     2B 00 00 FF 
23a58     30 E5 05 F1 | 	add	objptr, ##22320
23a5c     F2 FA 61 FC | 	wrlong	result1, objptr
23a60     14 E4 05 F1 | 	add	objptr, #20
23a64     F2 16 62 FC | 	wrlong	arg03, objptr
23a68     37 00 00 FF 
23a6c     10 E4 85 F1 | 	sub	objptr, ##28176
23a70     32 12 06 F6 | 	mov	arg01, #50
23a74     18 39 B0 FD | 	call	#__system___waitms
23a78     37 00 00 FF 
23a7c     10 E4 05 F1 | 	add	objptr, ##28176
23a80     F2 12 02 FB | 	rdlong	arg01, objptr
23a84     37 00 00 FF 
23a88     10 E4 85 F1 | 	sub	objptr, ##28176
23a8c     14 12 06 F1 | 	add	arg01, #20
23a90     20 00 80 FF 
23a94     09 01 58 FC | 	wrword	##16384, arg01
23a98     3C 2C B0 FD | 	call	#_usbnew_spin2_start
23a9c     37 00 00 FF 
23aa0     04 E4 05 F1 | 	add	objptr, ##28164
23aa4     F2 FA 61 FC | 	wrlong	result1, objptr
23aa8                 | '   mouse_limits[0] := xlim
23aa8     0F 00 00 FF 
23aac     B8 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7864
23ab0     01 00 80 FF 
23ab4     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
23ab8                 | '   mouse_limits[1] := ylim
23ab8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
23abc     01 00 80 FF 
23ac0     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
23ac4     36 00 00 FF 
23ac8     F3 E4 85 F1 | 	sub	objptr, ##27891
23acc     F2 12 02 F6 | 	mov	arg01, objptr
23ad0     11 E5 85 F1 | 	sub	objptr, #273
23ad4     C4 12 06 F1 | 	add	arg01, #196
23ad8                 | '   mouse_outptr := ptr
23ad8     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
23adc     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
23ae0     0F 00 00 FF 
23ae4     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
23ae8     16 00 00 FF 
23aec     CA EA 05 F1 | 	add	ptr__dat__, ##11466
23af0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
23af4     16 00 00 FF 
23af8     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
23afc     10 12 06 F6 | 	mov	arg01, #16
23b00     C4 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
23b04     10 12 06 F6 | 	mov	arg01, #16
23b08     20 14 06 F6 | 	mov	arg02, #32
23b0c     20 16 06 F6 | 	mov	arg03, #32
23b10     44 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
23b14     09 12 C6 F9 | 	decod	arg01, #9
23b18     2C 15 06 F6 | 	mov	arg02, #300
23b1c     10 2D B0 FD | 	call	#_usbnew_spin2_mouse_move
23b20     F2 16 02 F6 | 	mov	arg03, objptr
23b24     50 00 00 FF 
23b28     44 E5 05 F1 | 	add	objptr, ##41284
23b2c     F2 14 02 F6 | 	mov	arg02, objptr
23b30     0A 17 62 FC | 	wrlong	arg03, arg02
23b34     04 14 06 F1 | 	add	arg02, #4
23b38     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
23b3c     EF 14 02 F6 | 	mov	arg02, entryptr__
23b40     1E FA 05 F6 | 	mov	result1, #30
23b44     28 E4 61 FD | 	setq	objptr
23b48     0A FB F1 FC | 	coginit	result1, arg02 wc
23b4c     01 FA 65 C6 |  if_b	neg	result1, #1
23b50     04 E4 85 F1 | 	sub	objptr, #4
23b54     F2 FA 61 FC | 	wrlong	result1, objptr
23b58     01 00 00 FF 
23b5c     54 E5 05 F1 | 	add	objptr, ##852
23b60     F2 00 68 FC | 	wrlong	#0, objptr
23b64     1B 00 00 FF 
23b68     60 E4 85 F1 | 	sub	objptr, ##13920
23b6c     F2 04 68 FC | 	wrlong	#2, objptr
23b70     04 E4 05 F1 | 	add	objptr, #4
23b74     F2 26 69 FC | 	wrlong	#147, objptr
23b78     04 E4 05 F1 | 	add	objptr, #4
23b7c     F2 34 69 FC | 	wrlong	#154, objptr
23b80     04 E4 05 F1 | 	add	objptr, #4
23b84     F2 08 68 FC | 	wrlong	#4, objptr
23b88     04 E4 85 F1 | 	sub	objptr, #4
23b8c     F2 16 02 FB | 	rdlong	arg03, objptr
23b90     14 E4 85 F1 | 	sub	objptr, #20
23b94     F2 16 62 FC | 	wrlong	arg03, objptr
23b98     04 E4 05 F1 | 	add	objptr, #4
23b9c     F2 00 68 FC | 	wrlong	#0, objptr
23ba0     04 E4 05 F1 | 	add	objptr, #4
23ba4     F2 00 68 FC | 	wrlong	#0, objptr
23ba8     19 00 00 FF 
23bac     0C E5 05 F1 | 	add	objptr, ##13068
23bb0     F2 02 68 FC | 	wrlong	#1, objptr
23bb4     01 00 00 FF 
23bb8     60 E5 05 F1 | 	add	objptr, ##864
23bbc     F2 00 68 FC | 	wrlong	#0, objptr
23bc0     01 00 00 FF 
23bc4     00 EA 05 F1 | 	add	ptr__dat__, ##512
23bc8     08 E4 05 F1 | 	add	objptr, #8
23bcc     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
23bd0     04 E4 85 F1 | 	sub	objptr, #4
23bd4     03 00 80 FF 
23bd8     F2 3C 69 FC | 	wrlong	##1694, objptr
23bdc     0D 00 00 FF 
23be0     3C E4 85 F1 | 	sub	objptr, ##6716
23be4     F2 18 68 FC | 	wrlong	#12, objptr
23be8     45 00 00 FF 
23bec     64 E4 85 F1 | 	sub	objptr, ##35428
23bf0     01 00 00 FF 
23bf4     00 EA 85 F1 | 	sub	ptr__dat__, ##512
23bf8     08 D8 BF FD | 	call	#_init_commands
23bfc     5C F6 BF FD | 	call	#_init_error_strings
23c00     E0 ED BF FD | 	call	#_init_audio
23c04     D8 24 BF FD | 	call	#_do_new
23c08     37 00 00 FF 
23c0c     3C E4 05 F1 | 	add	objptr, ##28220
23c10     F2 12 02 FB | 	rdlong	arg01, objptr
23c14     04 E4 85 F1 | 	sub	objptr, #4
23c18     F2 14 02 FB | 	rdlong	arg02, objptr
23c1c     37 00 00 FF 
23c20     38 E4 85 F1 | 	sub	objptr, ##28216
23c24     80 17 B0 FD | 	call	#_hg010b_spin2_cls
23c28     37 00 00 FF 
23c2c     40 E4 05 F1 | 	add	objptr, ##28224
23c30     F2 12 02 FB | 	rdlong	arg01, objptr
23c34     37 00 00 FF 
23c38     40 E4 85 F1 | 	sub	objptr, ##28224
23c3c     E8 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
23c40                 | ' 
23c40                 | ' leading_spaces:=amount
23c40     01 00 00 FF 
23c44     B6 E4 05 F1 | 	add	objptr, ##694
23c48     F2 04 68 FC | 	wrlong	#2, objptr
23c4c     01 00 00 FF 
23c50     B6 E4 85 F1 | 	sub	objptr, ##694
23c54     BE 01 00 FF 
23c58     6D 27 06 F6 | 	mov	local01, ##@LR__6102
23c5c     3D 12 06 F6 | 	mov	arg01, #61
23c60     3C 14 06 F6 | 	mov	arg02, #60
23c64     3B 16 06 F6 | 	mov	arg03, #59
23c68     3A 18 06 F6 | 	mov	arg04, #58
23c6c     B4 81 B0 FD | 	call	#__system___vfs_open_sdcardx
23c70     FD 14 02 F6 | 	mov	arg02, result1
23c74     13 13 02 F6 | 	mov	arg01, local01
23c78     EC 37 B0 FD | 	call	#__system___mount
23c7c     BE 01 00 FF 
23c80     71 13 06 F6 | 	mov	arg01, ##@LR__6103
23c84     A0 3A B0 FD | 	call	#__system___chdir
23c88     BE 01 00 FF 
23c8c     79 27 06 F6 | 	mov	local01, ##@LR__6104
23c90     4A 00 00 FF 
23c94     94 E4 05 F1 | 	add	objptr, ##38036
23c98     F2 26 62 FC | 	wrlong	local01, objptr
23c9c     13 00 00 FF 
23ca0     60 E4 85 F1 | 	sub	objptr, ##9824
23ca4     F2 12 02 FB | 	rdlong	arg01, objptr
23ca8     37 00 00 FF 
23cac     34 E4 85 F1 | 	sub	objptr, ##28212
23cb0     01 12 66 F0 | 	shl	arg01, #1
23cb4     01 14 06 F6 | 	mov	arg02, #1
23cb8     AC 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
23cbc                 | ' init_commands
23cbc                 | ' init_error_strings
23cbc                 | ' init_audio
23cbc                 | ' do_new
23cbc                 | ' cls(ink, paper)
23cbc                 | ' v.setfontfamily(font) 				' use ST Mono font
23cbc                 | ' v.setleadingspaces(2)
23cbc                 | ' mount "/sd", _vfs_open_sdcard()
23cbc                 | ' chdir "/sd/bas"
23cbc                 | ' currentdir$="/sd/bas"
23cbc                 | ' position 2*editor_spaces,1 : print ver$
23cbc     00 12 06 F6 | 	mov	arg01, #0
23cc0     7C 90 B0 FD | 	call	#__system___getiolock_0614
23cc4     FD 12 02 F6 | 	mov	arg01, result1
23cc8     D0 33 B0 FD | 	call	#__system___lockmem
23ccc     18 00 00 FF 
23cd0     40 EB 05 F1 | 	add	ptr__dat__, ##12608
23cd4     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
23cd8     18 00 00 FF 
23cdc     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
23ce0     00 12 06 F6 | 	mov	arg01, #0
23ce4     00 16 06 F6 | 	mov	arg03, #0
23ce8     A8 40 B0 FD | 	call	#__system___basic_print_string
23cec     00 12 06 F6 | 	mov	arg01, #0
23cf0     0A 14 06 F6 | 	mov	arg02, #10
23cf4     00 16 06 F6 | 	mov	arg03, #0
23cf8     40 40 B0 FD | 	call	#__system___basic_print_char
23cfc     00 12 06 F6 | 	mov	arg01, #0
23d00     3C 90 B0 FD | 	call	#__system___getiolock_0614
23d04     FD 00 68 FC | 	wrlong	#0, result1
23d08     52 00 00 FF 
23d0c     98 E4 05 F1 | 	add	objptr, ##42136
23d10     F2 12 02 FB | 	rdlong	arg01, objptr
23d14     0F 00 00 FF 
23d18     3C E4 85 F1 | 	sub	objptr, ##7740
23d1c     F2 26 02 FB | 	rdlong	local01, objptr
23d20     43 00 00 FF 
23d24     5C E4 85 F1 | 	sub	objptr, ##34396
23d28     13 13 82 F1 | 	sub	arg01, local01
23d2c     00 14 06 F6 | 	mov	arg02, #0
23d30     0A 16 06 F6 | 	mov	arg03, #10
23d34     38 56 B0 FD | 	call	#__system__Number_S
23d38     FD 12 02 F6 | 	mov	arg01, result1
23d3c     BE 01 00 FF 
23d40     81 15 06 F6 | 	mov	arg02, ##@LR__6105
23d44     B0 33 B0 FD | 	call	#__system___string_concat
23d48     FD 26 02 F6 | 	mov	local01, result1
23d4c     50 00 00 FF 
23d50     38 E5 05 F1 | 	add	objptr, ##41272
23d54     F2 26 62 FC | 	wrlong	local01, objptr
23d58     50 00 00 FF 
23d5c     38 E5 85 F1 | 	sub	objptr, ##41272
23d60                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
23d60     00 12 06 F6 | 	mov	arg01, #0
23d64     D8 8F B0 FD | 	call	#__system___getiolock_0614
23d68     FD 12 02 F6 | 	mov	arg01, result1
23d6c     2C 33 B0 FD | 	call	#__system___lockmem
23d70     50 00 00 FF 
23d74     38 E5 05 F1 | 	add	objptr, ##41272
23d78     F2 14 02 FB | 	rdlong	arg02, objptr
23d7c     50 00 00 FF 
23d80     38 E5 85 F1 | 	sub	objptr, ##41272
23d84     00 12 06 F6 | 	mov	arg01, #0
23d88     00 16 06 F6 | 	mov	arg03, #0
23d8c     04 40 B0 FD | 	call	#__system___basic_print_string
23d90     00 12 06 F6 | 	mov	arg01, #0
23d94     0A 14 06 F6 | 	mov	arg02, #10
23d98     00 16 06 F6 | 	mov	arg03, #0
23d9c     9C 3F B0 FD | 	call	#__system___basic_print_char
23da0     00 12 06 F6 | 	mov	arg01, #0
23da4     98 8F B0 FD | 	call	#__system___getiolock_0614
23da8     FD 00 68 FC | 	wrlong	#0, result1
23dac     37 00 00 FF 
23db0     34 E4 05 F1 | 	add	objptr, ##28212
23db4     F2 12 02 FB | 	rdlong	arg01, objptr
23db8     37 00 00 FF 
23dbc     34 E4 85 F1 | 	sub	objptr, ##28212
23dc0     01 12 66 F0 | 	shl	arg01, #1
23dc4     04 14 06 F6 | 	mov	arg02, #4
23dc8     9C 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
23dcc                 | ' position 2*editor_spaces,4 : print "Ready"
23dcc     00 12 06 F6 | 	mov	arg01, #0
23dd0     6C 8F B0 FD | 	call	#__system___getiolock_0614
23dd4     FD 12 02 F6 | 	mov	arg01, result1
23dd8     C0 32 B0 FD | 	call	#__system___lockmem
23ddc     BE 01 00 FF 
23de0     93 15 06 F6 | 	mov	arg02, ##@LR__6106
23de4     00 12 06 F6 | 	mov	arg01, #0
23de8     00 16 06 F6 | 	mov	arg03, #0
23dec     A4 3F B0 FD | 	call	#__system___basic_print_string
23df0     00 12 06 F6 | 	mov	arg01, #0
23df4     0A 14 06 F6 | 	mov	arg02, #10
23df8     00 16 06 F6 | 	mov	arg03, #0
23dfc     3C 3F B0 FD | 	call	#__system___basic_print_char
23e00     00 12 06 F6 | 	mov	arg01, #0
23e04     38 8F B0 FD | 	call	#__system___getiolock_0614
23e08     FD 00 68 FC | 	wrlong	#0, result1
23e0c     00 14 06 F6 | 	mov	arg02, #0
23e10     01 14 D6 F7 | 	test	arg02, #1 wc
23e14     5A 4C 64 FD | 	drvc	#38
23e18     01 14 D6 F7 | 	test	arg02, #1 wc
23e1c     5A 4E 64 FD | 	drvc	#39
23e20     BE 01 00 FF 
23e24     99 27 06 F6 | 	mov	local01, ##@LR__6107
23e28     52 00 00 FF 
23e2c     C4 E4 05 F1 | 	add	objptr, ##42180
23e30     F2 26 62 FC | 	wrlong	local01, objptr
23e34     04 E4 05 F1 | 	add	objptr, #4
23e38     FF FF FF FF 
23e3c     F2 FE 6B FC | 	wrlong	##-1, objptr
23e40     0C E4 05 F1 | 	add	objptr, #12
23e44     F2 00 68 FC | 	wrlong	#0, objptr
23e48     52 00 00 FF 
23e4c     D4 E4 85 F1 | 	sub	objptr, ##42196
23e50                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
23e50                 | ' loadname="noname.bas"
23e50                 | ' do_insert=-1
23e50                 | ' inload=0
23e50                 | ' 
23e50                 | ' open "/sd/bas/autorun.bas" for input as #9
23e50     BE 01 00 FF 
23e54     A4 15 06 F6 | 	mov	arg02, ##@LR__6108
23e58     09 12 06 F6 | 	mov	arg01, #9
23e5c     00 16 06 F6 | 	mov	arg03, #0
23e60     3C 3E B0 FD | 	call	#__system___basic_open_string
23e64     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23e68     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
23e6c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
23e70     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23e74     52 00 00 FF 
23e78     D8 E4 05 F1 | 	add	objptr, ##42200
23e7c     F2 FA 61 FC | 	wrlong	result1, objptr
23e80     52 00 00 FF 
23e84     D8 E4 85 F1 | 	sub	objptr, ##42200
23e88                 | ' err=geterr()
23e88                 | ' close #9
23e88     09 12 06 F6 | 	mov	arg01, #9
23e8c     68 85 B0 FD | 	call	#__system__close
23e90                 | ' if err=0 then line$="run autorun.bas" : interpret
23e90     52 00 00 FF 
23e94     D8 E4 05 F1 | 	add	objptr, ##42200
23e98     F2 26 0A FB | 	rdlong	local01, objptr wz
23e9c     52 00 00 FF 
23ea0     D8 E4 85 F1 | 	sub	objptr, ##42200
23ea4     BE 01 00 AF 
23ea8     B8 27 06 A6 |  if_e	mov	local01, ##@LR__6109
23eac     37 00 00 AF 
23eb0     1C E4 05 A1 |  if_e	add	objptr, ##28188
23eb4     F2 26 62 AC |  if_e	wrlong	local01, objptr
23eb8     37 00 00 AF 
23ebc     1C E4 85 A1 |  if_e	sub	objptr, ##28188
23ec0     64 D9 BD AD |  if_e	call	#_interpret
23ec4                 | ' 
23ec4                 | ' 
23ec4                 | ' '-------------------------------------------------------------------------------------------------------- 
23ec4                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
23ec4                 | ' '--------------------------------------------------------------------------------------------------------
23ec4                 | ' 
23ec4                 | ' do
23ec4                 | LR__2710
23ec4     3C C9 BD FD | 	call	#_edit
23ec8     FD 26 02 F6 | 	mov	local01, result1
23ecc     37 00 00 FF 
23ed0     1C E4 05 F1 | 	add	objptr, ##28188
23ed4     F2 26 62 FC | 	wrlong	local01, objptr
23ed8     37 00 00 FF 
23edc     1C E4 85 F1 | 	sub	objptr, ##28188
23ee0     44 D9 BD FD | 	call	#_interpret
23ee4     BE 01 00 FF 
23ee8     C8 27 06 F6 | 	mov	local01, ##@LR__6110
23eec     37 00 00 FF 
23ef0     1C E4 05 F1 | 	add	objptr, ##28188
23ef4     F2 26 62 FC | 	wrlong	local01, objptr
23ef8     37 00 00 FF 
23efc     1C E4 85 F1 | 	sub	objptr, ##28188
23f00     C0 FF 9F FD | 	jmp	#LR__2710
23f04     A7 F0 03 F6 | 	mov	ptra, fp
23f08     B2 00 A0 FD | 	call	#popregs_
23f0c                 | _program_ret
23f0c     2D 00 64 FD | 	ret
23f10                 | 
23f10                 | ' '' this is not a main program.
23f10                 | ' 
23f10                 | ' '****************************************************************************************************************
23f10                 | ' '                                                                                                             	*
23f10                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
23f10                 | ' '                                                                                                            	*
23f10                 | ' ' base - HDMI base pin												*
23f10                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
23f10                 | ' '														*
23f10                 | ' '														*
23f10                 | ' '****************************************************************************************************************
23f10                 | ' 
23f10                 | ' pub start(base,mb):result |i
23f10                 | _hg010b_spin2_start
23f10                 | ' 
23f10                 | ' '--------------------------- initialize pointers and variables
23f10                 | ' 
23f10                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
23f10     34 E4 05 F1 | 	add	objptr, #52
23f14     F2 FA 01 F6 | 	mov	result1, objptr
23f18     28 E4 85 F1 | 	sub	objptr, #40
23f1c     F2 FA 61 FC | 	wrlong	result1, objptr
23f20                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
23f20                 | ' hdmibase:=base							' HDMI base pin, 8*n
23f20     18 E4 05 F1 | 	add	objptr, #24
23f24     F2 12 62 FC | 	wrlong	arg01, objptr
23f28                 | ' mailbox_ptr:=mb		
23f28     04 E4 05 F1 | 	add	objptr, #4
23f2c     F2 14 62 FC | 	wrlong	arg02, objptr
23f30                 | ' mailbox0:=mb				' PSRAM mailbox pointer
23f30     C1 E5 05 F1 | 	add	objptr, #449
23f34     F2 14 62 FC | 	wrlong	arg02, objptr
23f38                 | ' sprite_ptr:=@spr1ptr
23f38     D8 E4 85 F1 | 	sub	objptr, #216
23f3c     F2 FA 01 F6 | 	mov	result1, objptr
23f40     E5 E4 85 F1 | 	sub	objptr, #229
23f44     F2 FA 61 FC | 	wrlong	result1, objptr
23f48                 | ' 
23f48                 | ' 		'
23f48                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
23f48     E5 E4 05 F1 | 	add	objptr, #229
23f4c     F2 FA 01 FB | 	rdlong	result1, objptr
23f50     D0 FA 05 F1 | 	add	result1, #208
23f54     FD 10 58 FC | 	wrword	#8, result1
23f58                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
23f58     F2 16 02 FB | 	rdlong	arg03, objptr
23f5c     D2 16 06 F1 | 	add	arg03, #210
23f60     0B 21 58 FC | 	wrword	#16, arg03
23f64                 | ' leading_spaces:=0				'
23f64     A5 E5 05 F1 | 	add	objptr, #421
23f68     F2 00 68 FC | 	wrlong	#0, objptr
23f6c                 | ' 
23f6c                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
23f6c     99 E4 85 F1 | 	sub	objptr, #153
23f70     00 00 A0 FF 
23f74     F2 0E 68 FC | 	wrlong	##1073741831, objptr
23f78                 | ' emptydl[1]:=0
23f78     04 E4 05 F1 | 	add	objptr, #4
23f7c     F2 00 68 FC | 	wrlong	#0, objptr
23f80                 | ' 
23f80                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
23f80                 | ' 
23f80                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
23f80     28 E5 85 F1 | 	sub	objptr, #296
23f84     F2 02 68 FC | 	wrlong	#1, objptr
23f88                 | ' if s_debug<>0
23f88                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
23f88     20 00 80 FF 
23f8c     F2 00 68 FC | 	wrlong	##16384, objptr
23f90     F9 E4 85 F1 | 	sub	objptr, #249
23f94                 | ' setmode()							' set the mode, see below
23f94     18 03 B0 FD | 	call	#_hg010b_spin2_setmode
23f98                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
23f98     49 E4 05 F1 | 	add	objptr, #73
23f9c     F2 FA 01 F6 | 	mov	result1, objptr
23fa0     35 E4 85 F1 | 	sub	objptr, #53
23fa4     F2 FA 61 FC | 	wrlong	result1, objptr
23fa8                 | ' cursor_ptr:=@cursor_x						
23fa8     28 E4 05 F1 | 	add	objptr, #40
23fac     F2 16 02 F6 | 	mov	arg03, objptr
23fb0     2C E4 85 F1 | 	sub	objptr, #44
23fb4     F2 16 62 FC | 	wrlong	arg03, objptr
23fb8                 | ' fontnum:=0  							' start with a PC type font 
23fb8     55 E4 05 F1 | 	add	objptr, #85
23fbc     F2 00 68 FC | 	wrlong	#0, objptr
23fc0                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
23fc0     1C E4 05 F1 | 	add	objptr, #28
23fc4     F2 12 02 F6 | 	mov	arg01, objptr
23fc8     81 E4 85 F1 | 	sub	objptr, #129
23fcc     1C 00 00 FF 
23fd0     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14464
23fd4     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
23fd8     1C 00 00 FF 
23fdc     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14464
23fe0     10 16 06 F6 | 	mov	arg03, #16
23fe4     64 2F B0 FD | 	call	#__system____builtin_memmove
23fe8                 | ' leading_spaces:=0
23fe8     01 00 00 FF 
23fec     B6 E4 05 F1 | 	add	objptr, ##694
23ff0     F2 00 68 FC | 	wrlong	#0, objptr
23ff4     01 00 00 FF 
23ff8     B6 E4 85 F1 | 	sub	objptr, ##694
23ffc                 | ' '---------------------------- initialize a cursor (MSDOS type)
23ffc                 | ' 
23ffc                 | ' initcursor(154)
23ffc     9A 12 06 F6 | 	mov	arg01, #154
24000     78 00 B0 FD | 	call	#_hg010b_spin2_initcursor
24004                 | ' 
24004                 | ' '---------------------------- start the cog
24004                 | ' 
24004                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
24004     1C 00 00 FF 
24008     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14480
2400c     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
24010     1C 00 00 FF 
24014     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14480
24018     14 E4 05 F1 | 	add	objptr, #20
2401c     10 FA 05 F6 | 	mov	result1, #16
24020     28 E4 61 FD | 	setq	objptr
24024     0A FB F1 FC | 	coginit	result1, arg02 wc
24028     01 FA 65 C6 |  if_b	neg	result1, #1
2402c     1C E4 05 F1 | 	add	objptr, #28
24030     F2 FA 61 FC | 	wrlong	result1, objptr
24034     30 E4 85 F1 | 	sub	objptr, #48
24038                 | ' waitms(40)							' wait for stabilize
24038     28 12 06 F6 | 	mov	arg01, #40
2403c     50 33 B0 FD | 	call	#__system___waitms
24040                 | ' return cog							' return the driver's cog #
24040     30 E4 05 F1 | 	add	objptr, #48
24044     F2 FA 01 FB | 	rdlong	result1, objptr
24048     30 E4 85 F1 | 	sub	objptr, #48
2404c                 | _hg010b_spin2_start_ret
2404c     2D 00 64 FD | 	ret
24050                 | 
24050                 | ' 
24050                 | ' 
24050                 | ' '**************************************************************************************************************** 
24050                 | ' '                                                                                                             	*
24050                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
24050                 | ' '  Mode number - see start() above or bits below								*
24050                 | ' '                                                                                                             	*
24050                 | ' '****************************************************************************************************************
24050                 | ' 
24050                 | ' 
24050                 | ' pub restorepalette()
24050                 | _hg010b_spin2_restorepalette
24050                 | ' 
24050                 | ' longmove(@ataripalette,@ataripalette2,256)
24050     18 00 00 FF 
24054     40 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##12352
24058     F7 12 02 F6 | 	mov	arg01, ptr__hg010b_spin2_dat__
2405c     02 00 00 FF 
24060     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
24064     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
24068     1A 00 00 FF 
2406c     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##13376
24070     00 17 06 F6 | 	mov	arg03, #256
24074     68 2F B0 FD | 	call	#__system__longmove
24078                 | _hg010b_spin2_restorepalette_ret
24078     2D 00 64 FD | 	ret
2407c                 | 
2407c                 | ' 
2407c                 | ' '---------------------------- initialize a cursor (MSDOS type)
2407c                 | ' pub initcursor(color) |i
2407c                 | _hg010b_spin2_initcursor
2407c     03 4A 05 F6 | 	mov	COUNT_, #3
24080     A8 00 A0 FD | 	call	#pushregs_
24084     09 27 02 F6 | 	mov	local01, arg01
24088                 | ' 
24088                 | ' cursor_x:=0							' place the cursor at 0:0
24088     3C E4 05 F1 | 	add	objptr, #60
2408c     F2 00 58 FC | 	wrword	#0, objptr
24090                 | ' cursor_y:=0
24090     02 E4 05 F1 | 	add	objptr, #2
24094     F2 00 48 FC | 	wrbyte	#0, objptr
24098                 | ' repeat i from 0 to 111
24098     00 28 06 F6 | 	mov	local02, #0
2409c     F8 E5 05 F1 | 	add	objptr, #504
240a0     97 1A 48 FB | 	callpa	#(@LR__2722-@LR__2720)>>2,fcache_load_ptr_
240a4                 | LR__2720
240a4                 | '   cursor[i]:=0
240a4     14 2B 02 F6 | 	mov	local03, local02
240a8     F2 2A 02 F1 | 	add	local03, objptr
240ac     15 01 48 FC | 	wrbyte	#0, local03
240b0     01 28 06 F1 | 	add	local02, #1
240b4     70 28 56 F2 | 	cmps	local02, #112 wc
240b8     E8 FF 9F CD |  if_b	jmp	#LR__2720
240bc                 | ' repeat i from 112 to 127
240bc     70 28 06 F6 | 	mov	local02, #112
240c0                 | LR__2721
240c0                 | '   cursor[i]:=color  
240c0     14 2B 02 F6 | 	mov	local03, local02
240c4     F2 2A 02 F1 | 	add	local03, objptr
240c8     15 27 42 FC | 	wrbyte	local01, local03
240cc     01 28 06 F1 | 	add	local02, #1
240d0     80 28 16 F2 | 	cmp	local02, #128 wc
240d4     E8 FF 9F CD |  if_b	jmp	#LR__2721
240d8                 | LR__2722
240d8                 | ' 'repeat i from 0 to 127
240d8                 | ' '  if ((i/8)//2)
240d8                 | ' '    cursor[i]:=15
240d8                 | ' '  else
240d8                 | ' '    cursor[i]:=0
240d8                 | ' '  if i>=120    
240d8                 | ' '    cursor[i]:=40
240d8                 | ' setspriteptr(17,@cursor)
240d8     F2 14 02 F6 | 	mov	arg02, objptr
240dc     01 00 00 FF 
240e0     36 E4 85 F1 | 	sub	objptr, ##566
240e4     11 12 06 F6 | 	mov	arg01, #17
240e8     DC 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
240ec                 | ' setspritesize(17,8,16)
240ec     11 12 06 F6 | 	mov	arg01, #17
240f0     08 14 06 F6 | 	mov	arg02, #8
240f4     10 16 06 F6 | 	mov	arg03, #16
240f8     5C 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
240fc                 | ' setspritepos(17,0,0)
240fc     11 12 06 F6 | 	mov	arg01, #17
24100     00 14 06 F6 | 	mov	arg02, #0
24104     00 16 06 F6 | 	mov	arg03, #0
24108     E4 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
2410c                 | ' cursorshape:=14
2410c     0B 00 00 FF 
24110     C6 E4 05 F1 | 	add	objptr, ##5830
24114     F2 1C 68 FC | 	wrlong	#14, objptr
24118                 | ' cursorcolor:=color
24118     04 E4 85 F1 | 	sub	objptr, #4
2411c     F2 26 62 FC | 	wrlong	local01, objptr
24120     0B 00 00 FF 
24124     C2 E4 85 F1 | 	sub	objptr, ##5826
24128     A7 F0 03 F6 | 	mov	ptra, fp
2412c     B2 00 A0 FD | 	call	#popregs_
24130                 | _hg010b_spin2_initcursor_ret
24130     2D 00 64 FD | 	ret
24134                 | 
24134                 | ' 
24134                 | ' pub setcursorshape(shape) | i
24134                 | _hg010b_spin2_setcursorshape
24134                 | ' 
24134                 | ' cursorshape:=shape
24134     0B 00 00 FF 
24138     C6 E4 05 F1 | 	add	objptr, ##5830
2413c     F2 12 62 FC | 	wrlong	arg01, objptr
24140                 | ' repeat i from 0 to (8*cursorshape)-1
24140     00 00 06 F6 | 	mov	_var01, #0
24144     09 03 02 F6 | 	mov	_var02, arg01
24148     03 02 66 F0 | 	shl	_var02, #3
2414c     01 02 86 F1 | 	sub	_var02, #1
24150     00 02 56 F2 | 	cmps	_var02, #0 wc
24154     01 04 86 F6 | 	negc	_var03, #1
24158     02 07 02 F6 | 	mov	_var04, _var03
2415c     02 03 02 F1 | 	add	_var02, _var03
24160     0A 00 00 FF 
24164     90 E4 85 F1 | 	sub	objptr, ##5264
24168     97 0C 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
2416c                 | LR__2730
2416c                 | '   cursor[i]:=0
2416c     00 05 02 F6 | 	mov	_var03, _var01
24170     F2 04 02 F1 | 	add	_var03, objptr
24174     02 01 48 FC | 	wrbyte	#0, _var03
24178     03 01 02 F1 | 	add	_var01, _var04
2417c     01 01 0A F2 | 	cmp	_var01, _var02 wz
24180     E8 FF 9F 5D |  if_ne	jmp	#LR__2730
24184                 | LR__2731
24184                 | ' repeat i from 8*cursorshape to 127
24184     0A 00 00 FF 
24188     90 E4 05 F1 | 	add	objptr, ##5264
2418c     F2 06 02 FB | 	rdlong	_var04, objptr
24190     03 01 02 F6 | 	mov	_var01, _var04
24194     03 00 66 F0 | 	shl	_var01, #3
24198     0B 00 00 FF 
2419c     C6 E4 85 F1 | 	sub	objptr, ##5830
241a0     03 06 66 F0 | 	shl	_var04, #3
241a4     80 06 56 F2 | 	cmps	_var04, #128 wc
241a8     01 04 A6 F6 | 	negnc	_var03, #1
241ac     7F 02 06 F6 | 	mov	_var02, #127
241b0     02 03 02 F1 | 	add	_var02, _var03
241b4     97 1A 48 FB | 	callpa	#(@LR__2733-@LR__2732)>>2,fcache_load_ptr_
241b8                 | LR__2732
241b8                 | '   cursor[i]:=cursorcolor
241b8     00 07 02 F6 | 	mov	_var04, _var01
241bc     01 00 00 FF 
241c0     36 E4 05 F1 | 	add	objptr, ##566
241c4     F2 06 02 F1 | 	add	_var04, objptr
241c8     0A 00 00 FF 
241cc     8C E4 05 F1 | 	add	objptr, ##5260
241d0     F2 12 02 FB | 	rdlong	arg01, objptr
241d4     0B 00 00 FF 
241d8     C2 E4 85 F1 | 	sub	objptr, ##5826
241dc     03 13 42 FC | 	wrbyte	arg01, _var04
241e0     02 01 02 F1 | 	add	_var01, _var03
241e4     01 01 0A F2 | 	cmp	_var01, _var02 wz
241e8     CC FF 9F 5D |  if_ne	jmp	#LR__2732
241ec                 | LR__2733
241ec                 | _hg010b_spin2_setcursorshape_ret
241ec     2D 00 64 FD | 	ret
241f0                 | 
241f0                 | ' 
241f0                 | ' pub setcursorcolor(color) | i
241f0                 | _hg010b_spin2_setcursorcolor
241f0                 | ' 
241f0                 | ' cursorcolor:=color
241f0     0B 00 00 FF 
241f4     C2 E4 05 F1 | 	add	objptr, ##5826
241f8     F2 12 62 FC | 	wrlong	arg01, objptr
241fc                 | ' repeat i from 0 to (8*cursorshape)-1
241fc     00 12 06 F6 | 	mov	arg01, #0
24200     04 E4 05 F1 | 	add	objptr, #4
24204     F2 00 02 FB | 	rdlong	_var01, objptr
24208     03 00 66 F0 | 	shl	_var01, #3
2420c     01 00 86 F1 | 	sub	_var01, #1
24210     00 00 56 F2 | 	cmps	_var01, #0 wc
24214     01 02 86 F6 | 	negc	_var02, #1
24218     01 05 02 F6 | 	mov	_var03, _var02
2421c     01 01 02 F1 | 	add	_var01, _var02
24220     0A 00 00 FF 
24224     90 E4 85 F1 | 	sub	objptr, ##5264
24228     97 0C 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
2422c                 | LR__2740
2422c                 | '   cursor[i]:=0
2422c     09 03 02 F6 | 	mov	_var02, arg01
24230     F2 02 02 F1 | 	add	_var02, objptr
24234     01 01 48 FC | 	wrbyte	#0, _var02
24238     02 13 02 F1 | 	add	arg01, _var03
2423c     00 13 0A F2 | 	cmp	arg01, _var01 wz
24240     E8 FF 9F 5D |  if_ne	jmp	#LR__2740
24244                 | LR__2741
24244                 | ' repeat i from 8*cursorshape to 127
24244     0A 00 00 FF 
24248     90 E4 05 F1 | 	add	objptr, ##5264
2424c     F2 04 02 FB | 	rdlong	_var03, objptr
24250     02 13 02 F6 | 	mov	arg01, _var03
24254     03 12 66 F0 | 	shl	arg01, #3
24258     0B 00 00 FF 
2425c     C6 E4 85 F1 | 	sub	objptr, ##5830
24260     03 04 66 F0 | 	shl	_var03, #3
24264     80 04 56 F2 | 	cmps	_var03, #128 wc
24268     01 02 A6 F6 | 	negnc	_var02, #1
2426c     7F 00 06 F6 | 	mov	_var01, #127
24270     01 01 02 F1 | 	add	_var01, _var02
24274     97 1A 48 FB | 	callpa	#(@LR__2743-@LR__2742)>>2,fcache_load_ptr_
24278                 | LR__2742
24278                 | '   cursor[i]:=cursorcolor
24278     09 05 02 F6 | 	mov	_var03, arg01
2427c     01 00 00 FF 
24280     36 E4 05 F1 | 	add	objptr, ##566
24284     F2 04 02 F1 | 	add	_var03, objptr
24288     0A 00 00 FF 
2428c     8C E4 05 F1 | 	add	objptr, ##5260
24290     F2 06 02 FB | 	rdlong	_var04, objptr
24294     0B 00 00 FF 
24298     C2 E4 85 F1 | 	sub	objptr, ##5826
2429c     02 07 42 FC | 	wrbyte	_var04, _var03
242a0     01 13 02 F1 | 	add	arg01, _var02
242a4     00 13 0A F2 | 	cmp	arg01, _var01 wz
242a8     CC FF 9F 5D |  if_ne	jmp	#LR__2742
242ac                 | LR__2743
242ac                 | _hg010b_spin2_setcursorcolor_ret
242ac     2D 00 64 FD | 	ret
242b0                 | 
242b0                 | '   
242b0                 | '   
242b0                 | '   
242b0                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
242b0                 | _hg010b_spin2_setmode
242b0     02 4A 05 F6 | 	mov	COUNT_, #2
242b4     A8 00 A0 FD | 	call	#pushregs_
242b8                 | ' 
242b8                 | ' 
242b8                 | ' dl_ptr:=@emptydl[0]
242b8     01 00 00 FF 
242bc     1D E4 05 F1 | 	add	objptr, ##541
242c0     F2 1A 02 F6 | 	mov	arg05, objptr
242c4     FD E5 85 F1 | 	sub	objptr, #509
242c8     F2 1A 62 FC | 	wrlong	arg05, objptr
242cc                 | ' 
242cc                 | ' if cog>0 
242cc     10 E4 05 F1 | 	add	objptr, #16
242d0     F2 1A 02 FB | 	rdlong	arg05, objptr
242d4     30 E4 85 F1 | 	sub	objptr, #48
242d8     01 1A 56 F2 | 	cmps	arg05, #1 wc
242dc                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
242dc     01 12 06 36 |  if_ae	mov	arg01, #1
242e0     24 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
242e4                 | ' xres:=1024
242e4     01 00 00 FF 
242e8     26 E4 05 F1 | 	add	objptr, ##550
242ec     02 00 80 FF 
242f0     F2 00 68 FC | 	wrlong	##1024, objptr
242f4                 | ' yres:=600
242f4     04 E4 05 F1 | 	add	objptr, #4
242f8     01 00 80 FF 
242fc     F2 B0 68 FC | 	wrlong	##600, objptr
24300                 | ' ppl:=(timings[3])
24300     1C 00 00 FF 
24304     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14412
24308     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
2430c     51 E5 85 F1 | 	sub	objptr, #337
24310     F2 1A 62 FC | 	wrlong	arg05, objptr
24314                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
24314     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
24318     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
2431c     01 26 66 F0 | 	shl	local01, #1
24320     80 E4 85 F1 | 	sub	objptr, #128
24324     F2 26 62 FC | 	wrlong	local01, objptr
24328                 | ' cpl1:=cpl '' todo remove
24328     04 E4 05 F1 | 	add	objptr, #4
2432c     F2 26 62 FC | 	wrlong	local01, objptr
24330                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
24330     04 00 00 FF 
24334     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##2076
24338     41 E4 85 F1 | 	sub	objptr, #65
2433c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
24340                 | ' repeat i from 0 to 3
24340     00 28 06 F6 | 	mov	local02, #0
24344     04 00 00 FF 
24348     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##2048
2434c     08 E4 05 F1 | 	add	objptr, #8
24350     97 20 48 FB | 	callpa	#(@LR__2751-@LR__2750)>>2,fcache_load_ptr_
24354                 | LR__2750
24354                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
24354     14 27 02 F6 | 	mov	local01, local02
24358     02 26 66 F0 | 	shl	local01, #2
2435c     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
24360     F2 1A 02 FB | 	rdlong	arg05, objptr
24364     11 1A 66 F0 | 	shl	arg05, #17
24368     13 27 02 FB | 	rdlong	local01, local01
2436c     0D 27 02 F1 | 	add	local01, arg05
24370     80 40 38 FF 
24374     00 26 06 F1 | 	add	local01, ##1887502336
24378     14 1B 02 F6 | 	mov	arg05, local02
2437c     02 1A 66 F0 | 	shl	arg05, #2
24380     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
24384     0D 27 62 FC | 	wrlong	local01, arg05
24388     01 28 06 F1 | 	add	local02, #1
2438c     04 28 56 F2 | 	cmps	local02, #4 wc
24390     C0 FF 9F CD |  if_b	jmp	#LR__2750
24394                 | LR__2751
24394     24 E4 85 F1 | 	sub	objptr, #36
24398                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
24398     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
2439c     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
243a0     1C 00 00 FF 
243a4     64 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14436
243a8     14 26 66 FC | 	wrlong	local01, #20
243ac                 | ' 'hubset(timings[10])
243ac                 | ' waitms(1)                                                   	' wait for stabilization
243ac     01 12 06 F6 | 	mov	arg01, #1
243b0     DC 2F B0 FD | 	call	#__system___waitms
243b4     1C 00 00 FF 
243b8     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14444
243bc     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
243c0     61 E4 05 F1 | 	add	objptr, #97
243c4     F2 28 62 FC | 	wrlong	local02, objptr
243c8     14 27 52 F6 | 	abs	local01, local02 wc
243cc     04 26 46 F0 | 	shr	local01, #4
243d0     13 27 82 F6 | 	negc	local01, local01
243d4     9C E4 05 F1 | 	add	objptr, #156
243d8     F2 26 62 FC | 	wrlong	local01, objptr
243dc     A4 E4 85 F1 | 	sub	objptr, #164
243e0     F2 28 02 FB | 	rdlong	local02, objptr
243e4     08 E4 05 F1 | 	add	objptr, #8
243e8     F2 26 02 FB | 	rdlong	local01, objptr
243ec     13 29 02 FD | 	qmul	local02, local01
243f0                 | ' lines:=timings[11]
243f0                 | ' t_lines:=lines/16
243f0                 | ' buflen:=cpl*lines						' framebuffer length in longs
243f0     29 E4 85 F1 | 	sub	objptr, #41
243f4     19 26 C6 F9 | 	decod	local01, #25
243f8     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
243fc     18 28 62 FD | 	getqx	local02
24400     F2 28 62 FC | 	wrlong	local02, objptr
24404     38 E4 85 F1 | 	sub	objptr, #56
24408     02 28 66 F0 | 	shl	local02, #2
2440c     14 27 82 F1 | 	sub	local01, local02
24410     F2 26 62 FC | 	wrlong	local01, objptr
24414     FD E4 05 F1 | 	add	objptr, #253
24418     F2 28 02 FB | 	rdlong	local02, objptr
2441c     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
24420     0D 29 02 FD | 	qmul	local02, arg05
24424                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
24424                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
24424     F9 E4 85 F1 | 	sub	objptr, #249
24428                 | ' mode_ptr:=@timings						' set pointers to timings
24428     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
2442c                 | ' graphmode:=1024+512+192+48							' det global variable
2442c                 | ' makedl(graphmode)							' make a DL for the mode
2442c     03 00 00 FF 
24430     F0 12 06 F6 | 	mov	arg01, ##1776
24434     18 28 62 FD | 	getqx	local02
24438     14 27 82 F1 | 	sub	local01, local02
2443c     F2 26 62 FC | 	wrlong	local01, objptr
24440     14 E4 05 F1 | 	add	objptr, #20
24444     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
24448     79 E4 05 F1 | 	add	objptr, #121
2444c     03 00 80 FF 
24450     F2 E0 69 FC | 	wrlong	##1776, objptr
24454     91 E4 85 F1 | 	sub	objptr, #145
24458     1C 00 00 FF 
2445c     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14400
24460     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
24464                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
24464     F2 26 02 FB | 	rdlong	local01, objptr
24468     DD E4 05 F1 | 	add	objptr, #221
2446c     F2 26 62 FC | 	wrlong	local01, objptr
24470                 | ' s_font_ptr:=font_ptr
24470     D5 E4 85 F1 | 	sub	objptr, #213
24474     F2 26 02 FB | 	rdlong	local01, objptr
24478     D9 E4 05 F1 | 	add	objptr, #217
2447c     F2 26 62 FC | 	wrlong	local01, objptr
24480                 | ' s_lines:=lines
24480     80 E4 85 F1 | 	sub	objptr, #128
24484     F2 26 02 FB | 	rdlong	local01, objptr
24488     84 E4 05 F1 | 	add	objptr, #132
2448c     F2 26 62 FC | 	wrlong	local01, objptr
24490                 | ' s_buflen:=buflen
24490     AD E4 85 F1 | 	sub	objptr, #173
24494     F2 26 02 FB | 	rdlong	local01, objptr
24498     B5 E4 05 F1 | 	add	objptr, #181
2449c     F2 26 62 FC | 	wrlong	local01, objptr
244a0                 | ' s_cpl:=cpl
244a0     94 E4 85 F1 | 	sub	objptr, #148
244a4     F2 26 02 FB | 	rdlong	local01, objptr
244a8     90 E4 05 F1 | 	add	objptr, #144
244ac     F2 26 62 FC | 	wrlong	local01, objptr
244b0                 | ' s_cpl1:=cpl
244b0     90 E4 85 F1 | 	sub	objptr, #144
244b4     F2 26 02 FB | 	rdlong	local01, objptr
244b8     98 E4 05 F1 | 	add	objptr, #152
244bc     F2 26 62 FC | 	wrlong	local01, objptr
244c0                 | ' st_lines:=t_lines
244c0     0C E4 05 F1 | 	add	objptr, #12
244c4     F2 26 02 FB | 	rdlong	local01, objptr
244c8     04 E4 05 F1 | 	add	objptr, #4
244cc     F2 26 62 FC | 	wrlong	local01, objptr
244d0                 | ' ppl:=ppl/xzoom  
244d0     28 E4 85 F1 | 	sub	objptr, #40
244d4     F2 90 02 FB | 	rdlong	muldiva_, objptr
244d8     2C E4 05 F1 | 	add	objptr, #44
244dc     F2 92 02 FB | 	rdlong	muldivb_, objptr
244e0     05 E5 85 F1 | 	sub	objptr, #261
244e4     BA 00 A0 FD | 	call	#divide_
244e8     D9 E4 05 F1 | 	add	objptr, #217
244ec     F2 92 62 FC | 	wrlong	muldivb_, objptr
244f0                 | ' s_ppl:=ppl
244f0     1C E4 05 F1 | 	add	objptr, #28
244f4     F2 92 62 FC | 	wrlong	muldivb_, objptr
244f8     F5 E4 85 F1 | 	sub	objptr, #245
244fc                 | ' waitms(20)							' wait 
244fc     14 12 06 F6 | 	mov	arg01, #20
24500     8C 2E B0 FD | 	call	#__system___waitms
24504                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
24504     04 E4 05 F1 | 	add	objptr, #4
24508     F2 12 02 FB | 	rdlong	arg01, objptr
2450c     04 E4 85 F1 | 	sub	objptr, #4
24510     F2 16 02 FB | 	rdlong	arg03, objptr
24514     09 17 82 F1 | 	sub	arg03, arg01
24518     20 14 06 F6 | 	mov	arg02, #32
2451c     00 18 06 F6 | 	mov	arg04, #0
24520     01 1A 06 F6 | 	mov	arg05, #1
24524     0B 00 00 FF 
24528     CC E4 05 F1 | 	add	objptr, ##5836
2452c     AC 1F B0 FD | 	call	#_psram_spin2_fill
24530     0B 00 00 FF 
24534     CC E4 85 F1 | 	sub	objptr, ##5836
24538     A7 F0 03 F6 | 	mov	ptra, fp
2453c     B2 00 A0 FD | 	call	#popregs_
24540                 | _hg010b_spin2_setmode_ret
24540     2D 00 64 FD | 	ret
24544                 | 
24544                 | ' 
24544                 | ' '****************************************************************************************************************
24544                 | ' '                                                                                                             	*
24544                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
24544                 | ' '                                                                                                             	*
24544                 | ' '****************************************************************************************************************
24544                 | ' 
24544                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
24544                 | _hg010b_spin2_makedl
24544                 | ' 
24544                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
24544                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
24544                 | ' repeat i from 0 to 11                                                           ' clear DL
24544     00 00 06 F6 | 	mov	_var01, #0
24548     ED E5 05 F1 | 	add	objptr, #493
2454c     97 0E 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
24550                 | LR__2760
24550                 | '   displaylist[i]:=0 
24550     00 03 02 F6 | 	mov	_var02, _var01
24554     02 02 66 F0 | 	shl	_var02, #2
24558     F2 02 02 F1 | 	add	_var02, objptr
2455c     01 01 68 FC | 	wrlong	#0, _var02
24560     01 00 06 F1 | 	add	_var01, #1
24564     0C 00 56 F2 | 	cmps	_var01, #12 wc
24568     E4 FF 9F CD |  if_b	jmp	#LR__2760
2456c                 | LR__2761
2456c                 | '                         ' 
2456c                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
2456c     8C E5 85 F1 | 	sub	objptr, #396
24570     F2 02 02 FB | 	rdlong	_var02, objptr
24574     14 02 66 F0 | 	shl	_var02, #20
24578     01 02 06 F1 | 	add	_var02, #1
2457c     04 E4 85 F1 | 	sub	objptr, #4
24580     F2 00 02 FB | 	rdlong	_var01, objptr
24584     02 00 66 F0 | 	shl	_var01, #2
24588     04 00 66 F0 | 	shl	_var01, #4
2458c     00 03 02 F1 | 	add	_var02, _var01
24590     90 E5 05 F1 | 	add	objptr, #400
24594     F2 02 62 FC | 	wrlong	_var02, objptr
24598     ED E5 85 F1 | 	sub	objptr, #493
2459c                 | ' displaylist[1]:=buf_ptr<<4+%10  
2459c     F2 02 02 FB | 	rdlong	_var02, objptr
245a0     04 02 66 F0 | 	shl	_var02, #4
245a4     02 02 06 F1 | 	add	_var02, #2
245a8     F1 E5 05 F1 | 	add	objptr, #497
245ac     F2 02 62 FC | 	wrlong	_var02, objptr
245b0                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
245b0     04 E4 85 F1 | 	sub	objptr, #4
245b4     F2 02 02 F6 | 	mov	_var02, objptr
245b8     CD E5 85 F1 | 	sub	objptr, #461
245bc     F2 02 62 FC | 	wrlong	_var02, objptr
245c0     20 E4 85 F1 | 	sub	objptr, #32
245c4                 | _hg010b_spin2_makedl_ret
245c4     2D 00 64 FD | 	ret
245c8                 | 
245c8                 | ' 
245c8                 | ' 
245c8                 | ' '****************************************************************************************************************
245c8                 | ' '                                                                        					*
245c8                 | ' '  Graphic primitives                                                    					*
245c8                 | ' '                                                                        					*
245c8                 | ' '****************************************************************************************************************
245c8                 | ' 
245c8                 | ' pub setspriteptr(num,ptr)
245c8                 | _hg010b_spin2_setspriteptr
245c8                 | ' long[@spr1ptr+12*num]:=ptr
245c8     11 E5 05 F1 | 	add	objptr, #273
245cc     F2 00 02 F6 | 	mov	_var01, objptr
245d0     09 03 02 F6 | 	mov	_var02, arg01
245d4     01 02 66 F0 | 	shl	_var02, #1
245d8     09 03 02 F1 | 	add	_var02, arg01
245dc     02 02 66 F0 | 	shl	_var02, #2
245e0     01 01 02 F1 | 	add	_var01, _var02
245e4     00 15 62 FC | 	wrlong	arg02, _var01
245e8     11 E5 85 F1 | 	sub	objptr, #273
245ec                 | _hg010b_spin2_setspriteptr_ret
245ec     2D 00 64 FD | 	ret
245f0                 | 
245f0                 | ' 
245f0                 | ' pub setspritepos(num,x,y)
245f0                 | _hg010b_spin2_setspritepos
245f0                 | ' if y>601
245f0     01 00 00 FF 
245f4     5A 16 56 F2 | 	cmps	arg03, ##602 wc
245f8                 | '   y:=601
245f8     01 00 00 3F 
245fc     59 16 06 36 |  if_ae	mov	arg03, ##601
24600                 | ' if x>1024
24600     02 00 00 FF 
24604     01 14 56 F2 | 	cmps	arg02, ##1025 wc
24608                 | '   x:=1024
24608     0A 14 C6 39 |  if_ae	decod	arg02, #10
2460c                 | ' word[@spr1ptr+12*num+4]:=x
2460c     11 E5 05 F1 | 	add	objptr, #273
24610     F2 00 02 F6 | 	mov	_var01, objptr
24614     09 03 02 F6 | 	mov	_var02, arg01
24618     01 02 66 F0 | 	shl	_var02, #1
2461c     09 03 02 F1 | 	add	_var02, arg01
24620     02 02 66 F0 | 	shl	_var02, #2
24624     01 01 02 F1 | 	add	_var01, _var02
24628     04 00 06 F1 | 	add	_var01, #4
2462c     00 15 52 FC | 	wrword	arg02, _var01
24630                 | ' word[@spr1ptr+12*num+6]:=y
24630     F2 00 02 F6 | 	mov	_var01, objptr
24634     09 03 02 F6 | 	mov	_var02, arg01
24638     01 02 66 F0 | 	shl	_var02, #1
2463c     09 03 02 F1 | 	add	_var02, arg01
24640     02 02 66 F0 | 	shl	_var02, #2
24644     01 01 02 F1 | 	add	_var01, _var02
24648     06 00 06 F1 | 	add	_var01, #6
2464c     00 17 52 FC | 	wrword	arg03, _var01
24650     11 E5 85 F1 | 	sub	objptr, #273
24654                 | _hg010b_spin2_setspritepos_ret
24654     2D 00 64 FD | 	ret
24658                 | 
24658                 | ' 
24658                 | ' pub setspritesize(num,w,h)
24658                 | _hg010b_spin2_setspritesize
24658                 | ' word[@spr1ptr+12*num+8]:=w
24658     11 E5 05 F1 | 	add	objptr, #273
2465c     F2 00 02 F6 | 	mov	_var01, objptr
24660     09 03 02 F6 | 	mov	_var02, arg01
24664     01 02 66 F0 | 	shl	_var02, #1
24668     09 03 02 F1 | 	add	_var02, arg01
2466c     02 02 66 F0 | 	shl	_var02, #2
24670     01 01 02 F1 | 	add	_var01, _var02
24674     08 00 06 F1 | 	add	_var01, #8
24678     00 15 52 FC | 	wrword	arg02, _var01
2467c                 | ' word[@spr1ptr+12*num+10]:=h
2467c     F2 00 02 F6 | 	mov	_var01, objptr
24680     09 03 02 F6 | 	mov	_var02, arg01
24684     01 02 66 F0 | 	shl	_var02, #1
24688     09 03 02 F1 | 	add	_var02, arg01
2468c     02 02 66 F0 | 	shl	_var02, #2
24690     01 01 02 F1 | 	add	_var01, _var02
24694     0A 00 06 F1 | 	add	_var01, #10
24698     00 17 52 FC | 	wrword	arg03, _var01
2469c     11 E5 85 F1 | 	sub	objptr, #273
246a0                 | _hg010b_spin2_setspritesize_ret
246a0     2D 00 64 FD | 	ret
246a4                 | 
246a4                 | ' 
246a4                 | ' 
246a4                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
246a4                 | ' 
246a4                 | ' 
246a4                 | ' pub putpixel(x,y,c)
246a4                 | _hg010b_spin2_putpixel
246a4     04 4A 05 F6 | 	mov	COUNT_, #4
246a8     A8 00 A0 FD | 	call	#pushregs_
246ac     09 27 02 F6 | 	mov	local01, arg01
246b0                 | ' 
246b0                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
246b0     00 28 06 F6 | 	mov	local02, #0
246b4     00 26 56 F2 | 	cmps	local01, #0 wc
246b8     01 28 66 36 |  if_ae	neg	local02, #1
246bc     E9 E4 05 F1 | 	add	objptr, #233
246c0     F2 1A 02 FB | 	rdlong	arg05, objptr
246c4     02 1A 66 F0 | 	shl	arg05, #2
246c8     0D 27 52 F2 | 	cmps	local01, arg05 wc
246cc     15 2B A2 F1 | 	subx	local03, local03
246d0     15 29 02 F5 | 	and	local02, local03
246d4     00 2A 06 F6 | 	mov	local03, #0
246d8     00 14 56 F2 | 	cmps	arg02, #0 wc
246dc     01 2A 66 36 |  if_ae	neg	local03, #1
246e0     15 29 02 F5 | 	and	local02, local03
246e4     04 E4 85 F1 | 	sub	objptr, #4
246e8     F2 2A 02 FB | 	rdlong	local03, objptr
246ec     E5 E4 85 F1 | 	sub	objptr, #229
246f0     15 15 52 F2 | 	cmps	arg02, local03 wc
246f4     16 2D A2 F1 | 	subx	local04, local04
246f8     16 29 CA F7 | 	test	local02, local04 wz
246fc     48 00 90 AD |  if_e	jmp	#LR__2770
24700     DD E4 05 F1 | 	add	objptr, #221
24704     F2 12 02 FB | 	rdlong	arg01, objptr
24708     14 E4 05 F1 | 	add	objptr, #20
2470c     F2 2C 02 FB | 	rdlong	local04, objptr
24710     02 2C 66 F0 | 	shl	local04, #2
24714     0A 2D 02 FD | 	qmul	local04, arg02
24718                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
24718     0B 15 02 F6 | 	mov	arg02, arg03
2471c     01 16 06 F6 | 	mov	arg03, #1
24720     00 18 06 F6 | 	mov	arg04, #0
24724     01 1A 06 F6 | 	mov	arg05, #1
24728     0A 00 00 FF 
2472c     DB E5 05 F1 | 	add	objptr, ##5595
24730     18 2C 62 FD | 	getqx	local04
24734     13 2D 02 F1 | 	add	local04, local01
24738     16 13 02 F1 | 	add	arg01, local04
2473c     9C 1D B0 FD | 	call	#_psram_spin2_fill
24740     0B 00 00 FF 
24744     CC E4 85 F1 | 	sub	objptr, ##5836
24748                 | LR__2770
24748     A7 F0 03 F6 | 	mov	ptra, fp
2474c     B2 00 A0 FD | 	call	#popregs_
24750                 | _hg010b_spin2_putpixel_ret
24750     2D 00 64 FD | 	ret
24754                 | 
24754                 | ' 
24754                 | ' pub putpixel2(x,y,c)
24754                 | _hg010b_spin2_putpixel2
24754     02 4A 05 F6 | 	mov	COUNT_, #2
24758     A8 00 A0 FD | 	call	#pushregs_
2475c     DD E4 05 F1 | 	add	objptr, #221
24760     F2 26 02 FB | 	rdlong	local01, objptr
24764     14 E4 05 F1 | 	add	objptr, #20
24768     F2 1A 02 FB | 	rdlong	arg05, objptr
2476c     02 1A 66 F0 | 	shl	arg05, #2
24770     0A 1B 02 FD | 	qmul	arg05, arg02
24774                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
24774     0B 15 02 F6 | 	mov	arg02, arg03
24778     01 16 06 F6 | 	mov	arg03, #1
2477c     00 18 06 F6 | 	mov	arg04, #0
24780     01 1A 06 F6 | 	mov	arg05, #1
24784     0A 00 00 FF 
24788     DB E5 05 F1 | 	add	objptr, ##5595
2478c     18 28 62 FD | 	getqx	local02
24790     09 29 02 F1 | 	add	local02, arg01
24794     14 27 02 F1 | 	add	local01, local02
24798     13 13 02 F6 | 	mov	arg01, local01
2479c     3C 1D B0 FD | 	call	#_psram_spin2_fill
247a0     0B 00 00 FF 
247a4     CC E4 85 F1 | 	sub	objptr, ##5836
247a8     A7 F0 03 F6 | 	mov	ptra, fp
247ac     B2 00 A0 FD | 	call	#popregs_
247b0                 | _hg010b_spin2_putpixel2_ret
247b0     2D 00 64 FD | 	ret
247b4                 | 
247b4                 | ' 
247b4                 | ' pub getpixel2(x,y): c 
247b4                 | _hg010b_spin2_getpixel2
247b4     02 4A 05 F6 | 	mov	COUNT_, #2
247b8     A8 00 A0 FD | 	call	#pushregs_
247bc     0C F0 07 F1 | 	add	ptra, #12
247c0     04 4E 05 F1 | 	add	fp, #4
247c4     A7 12 62 FC | 	wrlong	arg01, fp
247c8     04 4E 05 F1 | 	add	fp, #4
247cc     A7 14 62 FC | 	wrlong	arg02, fp
247d0     08 4E 85 F1 | 	sub	fp, #8
247d4     A7 00 68 FC | 	wrlong	#0, fp
247d8     A7 12 02 F6 | 	mov	arg01, fp
247dc     DD E4 05 F1 | 	add	objptr, #221
247e0     F2 14 02 FB | 	rdlong	arg02, objptr
247e4     14 E4 05 F1 | 	add	objptr, #20
247e8     F2 16 02 FB | 	rdlong	arg03, objptr
247ec     02 16 66 F0 | 	shl	arg03, #2
247f0     08 4E 05 F1 | 	add	fp, #8
247f4     A7 FA 01 FB | 	rdlong	result1, fp
247f8     FD 16 02 FD | 	qmul	arg03, result1
247fc                 | ' 
247fc                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
247fc     04 4E 85 F1 | 	sub	fp, #4
24800     A7 26 02 FB | 	rdlong	local01, fp
24804     04 4E 85 F1 | 	sub	fp, #4
24808     01 16 06 F6 | 	mov	arg03, #1
2480c     0A 00 00 FF 
24810     DB E5 05 F1 | 	add	objptr, ##5595
24814     18 28 62 FD | 	getqx	local02
24818     13 29 02 F1 | 	add	local02, local01
2481c     14 15 02 F1 | 	add	arg02, local02
24820     80 1B B0 FD | 	call	#_psram_spin2_read1
24824     0B 00 00 FF 
24828     CC E4 85 F1 | 	sub	objptr, ##5836
2482c                 | ' return c
2482c     A7 FA 01 FB | 	rdlong	result1, fp
24830     A7 F0 03 F6 | 	mov	ptra, fp
24834     B2 00 A0 FD | 	call	#popregs_
24838                 | _hg010b_spin2_getpixel2_ret
24838     2D 00 64 FD | 	ret
2483c                 | 
2483c                 | '   
2483c                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
2483c                 | ' 
2483c                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
2483c                 | _hg010b_spin2_fastline
2483c     02 4A 05 F6 | 	mov	COUNT_, #2
24840     A8 00 A0 FD | 	call	#pushregs_
24844     09 27 02 F6 | 	mov	local01, arg01
24848     0A 29 02 F6 | 	mov	local02, arg02
2484c                 | ' 
2484c                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
2484c     00 16 56 F2 | 	cmps	arg03, #0 wc
24850     F4 00 90 CD |  if_b	jmp	#LR__2780
24854     01 00 00 FF 
24858     2A E4 05 F1 | 	add	objptr, ##554
2485c     F2 1A 02 FB | 	rdlong	arg05, objptr
24860     01 00 00 FF 
24864     2A E4 85 F1 | 	sub	objptr, ##554
24868     0D 17 52 F2 | 	cmps	arg03, arg05 wc
2486c     D8 00 90 3D |  if_ae	jmp	#LR__2780
24870     00 26 56 F2 | 	cmps	local01, #0 wc
24874     00 28 56 C2 |  if_b	cmps	local02, #0 wc
24878     CC 00 90 CD |  if_b	jmp	#LR__2780
2487c     01 00 00 FF 
24880     26 E4 05 F1 | 	add	objptr, ##550
24884     F2 1A 02 FB | 	rdlong	arg05, objptr
24888     01 00 00 FF 
2488c     26 E4 85 F1 | 	sub	objptr, ##550
24890     0D 27 5A F2 | 	cmps	local01, arg05 wcz
24894     01 00 00 1F 
24898     26 E4 05 11 |  if_a	add	objptr, ##550
2489c     F2 12 02 1B |  if_a	rdlong	arg01, objptr
248a0     01 00 00 1F 
248a4     26 E4 85 11 |  if_a	sub	objptr, ##550
248a8     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
248ac                 | '   return
248ac     98 00 90 1D |  if_a	jmp	#LR__2780
248b0     14 27 5A F2 | 	cmps	local01, local02 wcz
248b4     13 1B 02 16 |  if_a	mov	arg05, local01
248b8     14 27 02 16 |  if_a	mov	local01, local02
248bc     0D 29 02 16 |  if_a	mov	local02, arg05
248c0     00 26 56 F2 | 	cmps	local01, #0 wc
248c4     00 26 06 C6 |  if_b	mov	local01, #0
248c8     01 00 00 FF 
248cc     26 E4 05 F1 | 	add	objptr, ##550
248d0     F2 1A 02 FB | 	rdlong	arg05, objptr
248d4     01 00 00 FF 
248d8     26 E4 85 F1 | 	sub	objptr, ##550
248dc     0D 29 52 F2 | 	cmps	local02, arg05 wc
248e0     01 00 00 3F 
248e4     26 E4 05 31 |  if_ae	add	objptr, ##550
248e8     F2 28 02 3B |  if_ae	rdlong	local02, objptr
248ec     01 00 00 3F 
248f0     26 E4 85 31 |  if_ae	sub	objptr, ##550
248f4     DD E4 05 F1 | 	add	objptr, #221
248f8     F2 12 02 FB | 	rdlong	arg01, objptr
248fc     14 E4 05 F1 | 	add	objptr, #20
24900     F2 1A 02 FB | 	rdlong	arg05, objptr
24904     02 1A 66 F0 | 	shl	arg05, #2
24908     0B 1B 02 FD | 	qmul	arg05, arg03
2490c                 | ' if x1>x2
2490c                 | '   x1,x2:=x2,x1
2490c                 | ' if x1<0 
2490c                 | '   x1:=0
2490c                 | ' if x2>=xres
2490c                 | '   x2:=xres-1  
2490c     01 28 86 31 |  if_ae	sub	local02, #1
24910                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
24910     01 16 06 F6 | 	mov	arg03, #1
24914     14 17 02 F1 | 	add	arg03, local02
24918     13 17 82 F1 | 	sub	arg03, local01
2491c     0C 15 02 F6 | 	mov	arg02, arg04
24920     00 18 06 F6 | 	mov	arg04, #0
24924     01 1A 06 F6 | 	mov	arg05, #1
24928     0A 00 00 FF 
2492c     DB E5 05 F1 | 	add	objptr, ##5595
24930     18 28 62 FD | 	getqx	local02
24934     13 29 02 F1 | 	add	local02, local01
24938     14 13 02 F1 | 	add	arg01, local02
2493c     9C 1B B0 FD | 	call	#_psram_spin2_fill
24940     0B 00 00 FF 
24944     CC E4 85 F1 | 	sub	objptr, ##5836
24948                 | LR__2780
24948     A7 F0 03 F6 | 	mov	ptra, fp
2494c     B2 00 A0 FD | 	call	#popregs_
24950                 | _hg010b_spin2_fastline_ret
24950     2D 00 64 FD | 	ret
24954                 | 
24954                 | ' 
24954                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
24954                 | _hg010b_spin2_draw
24954     0E 4A 05 F6 | 	mov	COUNT_, #14
24958     A8 00 A0 FD | 	call	#pushregs_
2495c     09 27 02 F6 | 	mov	local01, arg01
24960     0A 29 02 F6 | 	mov	local02, arg02
24964     0B 2B 02 F6 | 	mov	local03, arg03
24968     0C 2D 02 F6 | 	mov	local04, arg04
2496c     0D 2F 02 F6 | 	mov	local05, arg05
24970                 | ' 
24970                 | ' if (y1==y2)
24970     16 29 0A F2 | 	cmp	local02, local04 wz
24974     18 00 90 5D |  if_ne	jmp	#LR__2790
24978                 | '   fastline(x1,x2,y1,c)
24978     13 13 02 F6 | 	mov	arg01, local01
2497c     15 15 02 F6 | 	mov	arg02, local03
24980     14 17 02 F6 | 	mov	arg03, local02
24984     17 19 02 F6 | 	mov	arg04, local05
24988     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
2498c     F8 00 90 FD | 	jmp	#LR__2796
24990                 | LR__2790
24990                 | ' else  
24990                 | '   x:=x1
24990     13 31 02 F6 | 	mov	local06, local01
24994                 | '   y:=y1
24994     14 33 02 F6 | 	mov	local07, local02
24998                 | ' 
24998                 | '   if (x1<x2) 
24998     15 27 52 F2 | 	cmps	local01, local03 wc
2499c                 | '     xi:=1
2499c     01 34 06 C6 |  if_b	mov	local08, #1
249a0                 | '     dx:=x2-x1
249a0     15 37 02 C6 |  if_b	mov	local09, local03
249a4     13 37 82 C1 |  if_b	sub	local09, local01
249a8                 | '   else
249a8                 | '     xi:=-1
249a8     01 34 66 36 |  if_ae	neg	local08, #1
249ac                 | '     dx:=x1-x2
249ac     15 27 82 31 |  if_ae	sub	local01, local03
249b0     13 37 02 36 |  if_ae	mov	local09, local01
249b4                 | '   
249b4                 | '   if (y1<y2) 
249b4     16 29 52 F2 | 	cmps	local02, local04 wc
249b8                 | '     yi:=1
249b8     01 38 06 C6 |  if_b	mov	local10, #1
249bc                 | '     dy:=y2-y1
249bc     16 3B 02 C6 |  if_b	mov	local11, local04
249c0     14 3B 82 C1 |  if_b	sub	local11, local02
249c4                 | '   else
249c4                 | '     yi:=-1
249c4     01 38 66 36 |  if_ae	neg	local10, #1
249c8                 | '     dy:=y1-y2
249c8     16 29 82 31 |  if_ae	sub	local02, local04
249cc     14 3B 02 36 |  if_ae	mov	local11, local02
249d0                 | ' 
249d0                 | '   putpixel(x,y,c)
249d0     17 17 02 F6 | 	mov	arg03, local05
249d4     18 13 02 F6 | 	mov	arg01, local06
249d8     19 15 02 F6 | 	mov	arg02, local07
249dc     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
249e0                 | ' 
249e0                 | '   if (dx>dy)
249e0     1D 37 5A F2 | 	cmps	local09, local11 wcz
249e4     50 00 90 ED |  if_be	jmp	#LR__2792
249e8                 | '     ai:=(dy-dx)*2
249e8     1D 3D 02 F6 | 	mov	local12, local11
249ec     1B 3D 82 F1 | 	sub	local12, local09
249f0     01 3C 66 F0 | 	shl	local12, #1
249f4                 | '     bi:=dy*2
249f4     01 3A 66 F0 | 	shl	local11, #1
249f8     1D 3F 02 F6 | 	mov	local13, local11
249fc                 | '     d:= bi-dx
249fc     1F 41 02 F6 | 	mov	local14, local13
24a00     1B 41 82 F1 | 	sub	local14, local09
24a04                 | '     repeat while (x<>x2) 
24a04                 | LR__2791
24a04     15 31 0A F2 | 	cmp	local06, local03 wz
24a08     7C 00 90 AD |  if_e	jmp	#LR__2795
24a0c                 | '       if (d>=0) 
24a0c     00 40 56 F2 | 	cmps	local14, #0 wc
24a10                 | '         x+=xi
24a10     1A 31 02 31 |  if_ae	add	local06, local08
24a14                 | '         y+=yi
24a14     1C 33 02 31 |  if_ae	add	local07, local10
24a18                 | '         d+=ai
24a18     1E 41 02 31 |  if_ae	add	local14, local12
24a1c                 | '       else
24a1c                 | '         d+=bi
24a1c     1F 41 02 C1 |  if_b	add	local14, local13
24a20                 | '         x+=xi
24a20     1A 31 02 C1 |  if_b	add	local06, local08
24a24                 | '       putpixel(x,y,c)
24a24     18 13 02 F6 | 	mov	arg01, local06
24a28     19 15 02 F6 | 	mov	arg02, local07
24a2c     17 17 02 F6 | 	mov	arg03, local05
24a30     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
24a34     CC FF 9F FD | 	jmp	#LR__2791
24a38                 | LR__2792
24a38                 | '   else
24a38                 | '     ai:=(dx-dy)*2
24a38     1B 3D 02 F6 | 	mov	local12, local09
24a3c     1D 3D 82 F1 | 	sub	local12, local11
24a40     01 3C 66 F0 | 	shl	local12, #1
24a44                 | '     bi:=dx*2
24a44     01 36 66 F0 | 	shl	local09, #1
24a48     1B 3F 02 F6 | 	mov	local13, local09
24a4c                 | '     d:=bi-dy
24a4c     1F 41 02 F6 | 	mov	local14, local13
24a50     1D 41 82 F1 | 	sub	local14, local11
24a54                 | '     repeat while (y<>y2)
24a54                 | LR__2793
24a54     16 33 0A F2 | 	cmp	local07, local04 wz
24a58     2C 00 90 AD |  if_e	jmp	#LR__2794
24a5c                 | '       if (d>=0)
24a5c     00 40 56 F2 | 	cmps	local14, #0 wc
24a60                 | '         x+=xi
24a60     1A 31 02 31 |  if_ae	add	local06, local08
24a64                 | '         y+=yi
24a64     1C 33 02 31 |  if_ae	add	local07, local10
24a68                 | '         d+=ai
24a68     1E 41 02 31 |  if_ae	add	local14, local12
24a6c                 | '       else
24a6c                 | '         d+=bi
24a6c     1F 41 02 C1 |  if_b	add	local14, local13
24a70                 | '         y+=yi
24a70     1C 33 02 C1 |  if_b	add	local07, local10
24a74                 | '       putpixel(x, y,c)
24a74     18 13 02 F6 | 	mov	arg01, local06
24a78     19 15 02 F6 | 	mov	arg02, local07
24a7c     17 17 02 F6 | 	mov	arg03, local05
24a80     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
24a84     CC FF 9F FD | 	jmp	#LR__2793
24a88                 | LR__2794
24a88                 | LR__2795
24a88                 | LR__2796
24a88     A7 F0 03 F6 | 	mov	ptra, fp
24a8c     B2 00 A0 FD | 	call	#popregs_
24a90                 | _hg010b_spin2_draw_ret
24a90     2D 00 64 FD | 	ret
24a94                 | 
24a94                 | '  
24a94                 | ' pub fillpush(val) 
24a94                 | _hg010b_spin2_fillpush
24a94                 | ' fillstack[fillptr]:=val
24a94     0B 00 00 FF 
24a98     BA E4 05 F1 | 	add	objptr, ##5818
24a9c     F2 00 02 FB | 	rdlong	_var01, objptr
24aa0     02 00 66 F0 | 	shl	_var01, #2
24aa4     0A 00 00 FF 
24aa8     00 E4 85 F1 | 	sub	objptr, ##5120
24aac     F2 00 02 F1 | 	add	_var01, objptr
24ab0     00 13 62 FC | 	wrlong	arg01, _var01
24ab4                 | ' fillptr+=1   
24ab4     0A 00 00 FF 
24ab8     00 E4 05 F1 | 	add	objptr, ##5120
24abc     F2 00 02 FB | 	rdlong	_var01, objptr
24ac0     01 00 06 F1 | 	add	_var01, #1
24ac4     F2 00 62 FC | 	wrlong	_var01, objptr
24ac8     0B 00 00 FF 
24acc     BA E4 85 F1 | 	sub	objptr, ##5818
24ad0                 | _hg010b_spin2_fillpush_ret
24ad0     2D 00 64 FD | 	ret
24ad4                 | 
24ad4                 | ' 
24ad4                 | '     
24ad4                 | ' pub fillpop() : val
24ad4                 | _hg010b_spin2_fillpop
24ad4                 | ' 
24ad4                 | ' fillptr-=1
24ad4     0B 00 00 FF 
24ad8     BA E4 05 F1 | 	add	objptr, ##5818
24adc     F2 FA 01 FB | 	rdlong	result1, objptr
24ae0     01 FA 85 F1 | 	sub	result1, #1
24ae4     F2 FA 61 FC | 	wrlong	result1, objptr
24ae8                 | ' if fillptr<0
24ae8     0B 00 00 FF 
24aec     BA E4 85 F1 | 	sub	objptr, ##5818
24af0     00 FA 55 F2 | 	cmps	result1, #0 wc
24af4                 | '   fillptr:=0
24af4     0B 00 00 CF 
24af8     BA E4 05 C1 |  if_b	add	objptr, ##5818
24afc     F2 00 68 CC |  if_b	wrlong	#0, objptr
24b00     0B 00 00 CF 
24b04     BA E4 85 C1 |  if_b	sub	objptr, ##5818
24b08                 | '   val:=-12345
24b08     E7 FF 7F CF 
24b0c     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
24b10     28 00 90 CD |  if_b	jmp	#LR__2800
24b14                 | ' else 
24b14                 | '   val:=fillstack[fillptr]
24b14     0B 00 00 FF 
24b18     BA E4 05 F1 | 	add	objptr, ##5818
24b1c     F2 00 02 FB | 	rdlong	_var01, objptr
24b20     02 00 66 F0 | 	shl	_var01, #2
24b24     0A 00 00 FF 
24b28     00 E4 85 F1 | 	sub	objptr, ##5120
24b2c     F2 00 02 F1 | 	add	_var01, objptr
24b30     00 01 02 FB | 	rdlong	_var01, _var01
24b34     01 00 00 FF 
24b38     BA E4 85 F1 | 	sub	objptr, ##698
24b3c                 | LR__2800
24b3c                 | ' return val
24b3c     00 FB 01 F6 | 	mov	result1, _var01
24b40                 | _hg010b_spin2_fillpop_ret
24b40     2D 00 64 FD | 	ret
24b44                 | 
24b44                 | ' 
24b44                 | '       
24b44                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
24b44                 | _hg010b_spin2_fill
24b44     0B 4A 05 F6 | 	mov	COUNT_, #11
24b48     A8 00 A0 FD | 	call	#pushregs_
24b4c                 | ' 
24b4c                 | ' newcolor:=newcolor & 255
24b4c     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
24b50                 | ' oldcolor:=oldcolor & 255
24b50     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
24b54                 | ' 
24b54                 | ' if (oldcolor == newcolor) 
24b54     13 29 0A F2 | 	cmp	local02, local01 wz
24b58                 | '   return
24b58     70 02 90 AD |  if_e	jmp	#LR__2819
24b5c                 | ' 
24b5c                 | ' fillptr:=0
24b5c     0B 00 00 FF 
24b60     BA E4 05 F1 | 	add	objptr, ##5818
24b64     F2 00 68 FC | 	wrlong	#0, objptr
24b68                 | ' fillmax:=0
24b68     04 E4 05 F1 | 	add	objptr, #4
24b6c     F2 00 68 FC | 	wrlong	#0, objptr
24b70     0B 00 00 FF 
24b74     BE E4 85 F1 | 	sub	objptr, ##5822
24b78                 | ' fillpush(x)
24b78     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
24b7c                 | ' fillpush(y)
24b7c     0A 13 02 F6 | 	mov	arg01, arg02
24b80     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
24b84                 | ' y:=fillpop()
24b84     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
24b88     FD 2A 02 F6 | 	mov	local03, result1
24b8c                 | ' x:=fillpop()
24b8c     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
24b90     FD 2C 02 F6 | 	mov	local04, result1
24b94                 | ' 'pinhigh(38)
24b94                 | ' repeat while (x>-1)       
24b94                 | LR__2810
24b94     00 2C 56 F2 | 	cmps	local04, #0 wc
24b98     30 02 90 CD |  if_b	jmp	#LR__2818
24b9c                 | '  ' pintoggle(39)
24b9c                 | '   x1 := x
24b9c     16 2F 02 F6 | 	mov	local05, local04
24ba0                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
24ba0                 | LR__2811
24ba0     00 30 06 F6 | 	mov	local06, #0
24ba4     00 32 06 F6 | 	mov	local07, #0
24ba8     00 2E 56 F2 | 	cmps	local05, #0 wc
24bac     01 32 66 36 |  if_ae	neg	local07, #1
24bb0     00 32 0E F2 | 	cmp	local07, #0 wz
24bb4     00 30 26 56 |  if_ne	not	local06, #0
24bb8     00 34 06 F6 | 	mov	local08, #0
24bbc     00 36 06 F6 | 	mov	local09, #0
24bc0     15 15 02 F6 | 	mov	arg02, local03
24bc4     17 13 02 F6 | 	mov	arg01, local05
24bc8     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
24bcc     14 FB 09 F2 | 	cmp	result1, local02 wz
24bd0     00 36 26 A6 |  if_e	not	local09, #0
24bd4     00 36 0E F2 | 	cmp	local09, #0 wz
24bd8     00 34 26 56 |  if_ne	not	local08, #0
24bdc     1A 31 CA F7 | 	test	local06, local08 wz
24be0                 | '     x1--
24be0     01 2E 86 51 |  if_ne	sub	local05, #1
24be4     B8 FF 9F 5D |  if_ne	jmp	#LR__2811
24be8                 | '   x1++
24be8     01 2E 06 F1 | 	add	local05, #1
24bec                 | '   spanabove := 0
24bec     00 38 06 F6 | 	mov	local10, #0
24bf0                 | '   spanbelow := 0
24bf0     00 3A 06 F6 | 	mov	local11, #0
24bf4                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
24bf4                 | LR__2812
24bf4     00 30 06 F6 | 	mov	local06, #0
24bf8     02 00 00 FF 
24bfc     00 2E 56 F2 | 	cmps	local05, ##1024 wc
24c00     00 30 26 C6 |  if_b	not	local06, #0
24c04     00 34 06 F6 | 	mov	local08, #0
24c08     00 36 06 F6 | 	mov	local09, #0
24c0c     15 15 02 F6 | 	mov	arg02, local03
24c10     17 13 02 F6 | 	mov	arg01, local05
24c14     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
24c18     14 FB 09 F2 | 	cmp	result1, local02 wz
24c1c     00 36 26 A6 |  if_e	not	local09, #0
24c20     00 36 0E F2 | 	cmp	local09, #0 wz
24c24     00 34 26 56 |  if_ne	not	local08, #0
24c28     1A 31 CA F7 | 	test	local06, local08 wz
24c2c     88 01 90 AD |  if_e	jmp	#LR__2817
24c30                 | '     putpixel2 (x1,y, newcolor & 255)
24c30     13 17 E2 F8 | 	getbyte	arg03, local01, #0
24c34     17 13 02 F6 | 	mov	arg01, local05
24c38     15 15 02 F6 | 	mov	arg02, local03
24c3c     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
24c40                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
24c40     00 30 06 F6 | 	mov	local06, #0
24c44     00 32 06 F6 | 	mov	local07, #0
24c48     00 38 0E F2 | 	cmp	local10, #0 wz
24c4c     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
24c50     01 32 66 26 |  if_nc_and_z	neg	local07, #1
24c54     00 32 0E F2 | 	cmp	local07, #0 wz
24c58     00 30 26 56 |  if_ne	not	local06, #0
24c5c     00 34 06 F6 | 	mov	local08, #0
24c60     00 36 06 F6 | 	mov	local09, #0
24c64     15 15 02 F6 | 	mov	arg02, local03
24c68     01 14 86 F1 | 	sub	arg02, #1
24c6c     17 13 02 F6 | 	mov	arg01, local05
24c70     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
24c74     14 FB 09 F2 | 	cmp	result1, local02 wz
24c78     00 36 26 A6 |  if_e	not	local09, #0
24c7c     00 36 0E F2 | 	cmp	local09, #0 wz
24c80     00 34 26 56 |  if_ne	not	local08, #0
24c84     1A 31 CA F7 | 	test	local06, local08 wz
24c88     1C 00 90 AD |  if_e	jmp	#LR__2813
24c8c                 | '       fillpush(x1)
24c8c     17 13 02 F6 | 	mov	arg01, local05
24c90     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
24c94                 | '       fillpush(y-1)
24c94     15 13 02 F6 | 	mov	arg01, local03
24c98     01 12 86 F1 | 	sub	arg01, #1
24c9c     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
24ca0                 | '       spanabove := 1 
24ca0     01 38 06 F6 | 	mov	local10, #1
24ca4     4C 00 90 FD | 	jmp	#LR__2814
24ca8                 | LR__2813
24ca8                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
24ca8     00 30 06 F6 | 	mov	local06, #0
24cac     00 32 06 F6 | 	mov	local07, #0
24cb0     00 38 0E F2 | 	cmp	local10, #0 wz
24cb4     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
24cb8     01 32 66 16 |  if_a	neg	local07, #1
24cbc     00 32 0E F2 | 	cmp	local07, #0 wz
24cc0     00 30 26 56 |  if_ne	not	local06, #0
24cc4     00 34 06 F6 | 	mov	local08, #0
24cc8     00 36 06 F6 | 	mov	local09, #0
24ccc     15 15 02 F6 | 	mov	arg02, local03
24cd0     01 14 86 F1 | 	sub	arg02, #1
24cd4     17 13 02 F6 | 	mov	arg01, local05
24cd8     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
24cdc     14 FB 09 F2 | 	cmp	result1, local02 wz
24ce0     00 36 26 56 |  if_ne	not	local09, #0
24ce4     00 36 0E F2 | 	cmp	local09, #0 wz
24ce8     00 34 26 56 |  if_ne	not	local08, #0
24cec     1A 31 CA F7 | 	test	local06, local08 wz
24cf0                 | '       spanabove := 0 
24cf0     00 38 06 56 |  if_ne	mov	local10, #0
24cf4                 | LR__2814
24cf4                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
24cf4     00 30 06 F6 | 	mov	local06, #0
24cf8     00 32 06 F6 | 	mov	local07, #0
24cfc     00 3A 0E F2 | 	cmp	local11, #0 wz
24d00     01 00 00 AF 
24d04     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
24d08     01 32 66 86 |  if_c_and_z	neg	local07, #1
24d0c     00 32 0E F2 | 	cmp	local07, #0 wz
24d10     00 30 26 56 |  if_ne	not	local06, #0
24d14     00 34 06 F6 | 	mov	local08, #0
24d18     00 36 06 F6 | 	mov	local09, #0
24d1c     15 15 02 F6 | 	mov	arg02, local03
24d20     01 14 06 F1 | 	add	arg02, #1
24d24     17 13 02 F6 | 	mov	arg01, local05
24d28     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
24d2c     14 FB 09 F2 | 	cmp	result1, local02 wz
24d30     00 36 26 A6 |  if_e	not	local09, #0
24d34     00 36 0E F2 | 	cmp	local09, #0 wz
24d38     00 34 26 56 |  if_ne	not	local08, #0
24d3c     1A 31 CA F7 | 	test	local06, local08 wz
24d40     1C 00 90 AD |  if_e	jmp	#LR__2815
24d44                 | '       fillpush(x1)
24d44     17 13 02 F6 | 	mov	arg01, local05
24d48     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
24d4c                 | '       fillpush(y + 1)
24d4c     15 13 02 F6 | 	mov	arg01, local03
24d50     01 12 06 F1 | 	add	arg01, #1
24d54     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
24d58                 | '       spanBelow := 1
24d58     01 3A 06 F6 | 	mov	local11, #1
24d5c     50 00 90 FD | 	jmp	#LR__2816
24d60                 | LR__2815
24d60                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
24d60     00 30 06 F6 | 	mov	local06, #0
24d64     00 32 06 F6 | 	mov	local07, #0
24d68     00 3A 0E F2 | 	cmp	local11, #0 wz
24d6c     01 00 00 5F 
24d70     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
24d74     01 32 66 46 |  if_c_and_nz	neg	local07, #1
24d78     00 32 0E F2 | 	cmp	local07, #0 wz
24d7c     00 30 26 56 |  if_ne	not	local06, #0
24d80     00 34 06 F6 | 	mov	local08, #0
24d84     00 36 06 F6 | 	mov	local09, #0
24d88     15 15 02 F6 | 	mov	arg02, local03
24d8c     01 14 06 F1 | 	add	arg02, #1
24d90     17 13 02 F6 | 	mov	arg01, local05
24d94     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
24d98     14 FB 09 F2 | 	cmp	result1, local02 wz
24d9c     00 36 26 56 |  if_ne	not	local09, #0
24da0     00 36 0E F2 | 	cmp	local09, #0 wz
24da4     00 34 26 56 |  if_ne	not	local08, #0
24da8     1A 31 CA F7 | 	test	local06, local08 wz
24dac                 | '       spanbelow := 0
24dac     00 3A 06 56 |  if_ne	mov	local11, #0
24db0                 | LR__2816
24db0                 | '     x1++
24db0     01 2E 06 F1 | 	add	local05, #1
24db4     3C FE 9F FD | 	jmp	#LR__2812
24db8                 | LR__2817
24db8                 | '   y:=fillpop()
24db8     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
24dbc     FD 2A 02 F6 | 	mov	local03, result1
24dc0                 | '   x:=fillpop()
24dc0     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
24dc4     FD 2C 02 F6 | 	mov	local04, result1
24dc8     C8 FD 9F FD | 	jmp	#LR__2810
24dcc                 | LR__2818
24dcc                 | LR__2819
24dcc     A7 F0 03 F6 | 	mov	ptra, fp
24dd0     B2 00 A0 FD | 	call	#popregs_
24dd4                 | _hg010b_spin2_fill_ret
24dd4     2D 00 64 FD | 	ret
24dd8                 | 
24dd8                 | ' 'pinlow(38)    
24dd8                 | ' 
24dd8                 | ' '-- A filled circle -----------------------------------------------------
24dd8                 | ' 
24dd8                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
24dd8                 | _hg010b_spin2_fcircle
24dd8     08 4A 05 F6 | 	mov	COUNT_, #8
24ddc     A8 00 A0 FD | 	call	#pushregs_
24de0     0B 27 02 F6 | 	mov	local01, arg03
24de4     FF FF 7F FF 
24de8     FE 27 06 FD | 	qmul	local01, ##-2
24dec     09 29 02 F6 | 	mov	local02, arg01
24df0     0A 2B 02 F6 | 	mov	local03, arg02
24df4     0C 2D 02 F6 | 	mov	local04, arg04
24df8                 | ' 
24df8                 | ' d:=5-4*r
24df8     13 19 02 F6 | 	mov	arg04, local01
24dfc     02 18 66 F0 | 	shl	arg04, #2
24e00     05 2E 06 F6 | 	mov	local05, #5
24e04     0C 2F 82 F1 | 	sub	local05, arg04
24e08                 | ' x:=0
24e08     00 30 06 F6 | 	mov	local06, #0
24e0c                 | ' y:=r
24e0c                 | ' da:=(-2*r+5)*4
24e0c                 | ' db:=3*4
24e0c     0C 32 06 F6 | 	mov	local07, #12
24e10                 | ' repeat while (x<=y) 
24e10     18 34 62 FD | 	getqx	local08
24e14     05 34 06 F1 | 	add	local08, #5
24e18     02 34 66 F0 | 	shl	local08, #2
24e1c                 | LR__2820
24e1c     13 31 5A F2 | 	cmps	local06, local01 wcz
24e20     B4 00 90 1D |  if_a	jmp	#LR__2822
24e24                 | '   fastline(x0-x,x0+x,y0-y,c)
24e24     14 13 02 F6 | 	mov	arg01, local02
24e28     18 13 82 F1 | 	sub	arg01, local06
24e2c     14 15 02 F6 | 	mov	arg02, local02
24e30     18 15 02 F1 | 	add	arg02, local06
24e34     15 17 02 F6 | 	mov	arg03, local03
24e38     13 17 82 F1 | 	sub	arg03, local01
24e3c     16 19 02 F6 | 	mov	arg04, local04
24e40     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
24e44                 | '   fastline(x0-x,x0+x,y0+y,c)
24e44     14 13 02 F6 | 	mov	arg01, local02
24e48     18 13 82 F1 | 	sub	arg01, local06
24e4c     14 15 02 F6 | 	mov	arg02, local02
24e50     18 15 02 F1 | 	add	arg02, local06
24e54     15 17 02 F6 | 	mov	arg03, local03
24e58     13 17 02 F1 | 	add	arg03, local01
24e5c     16 19 02 F6 | 	mov	arg04, local04
24e60     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
24e64                 | '   fastline(x0-y,x0+y,y0-x,c)
24e64     14 13 02 F6 | 	mov	arg01, local02
24e68     13 13 82 F1 | 	sub	arg01, local01
24e6c     14 15 02 F6 | 	mov	arg02, local02
24e70     13 15 02 F1 | 	add	arg02, local01
24e74     15 17 02 F6 | 	mov	arg03, local03
24e78     18 17 82 F1 | 	sub	arg03, local06
24e7c     16 19 02 F6 | 	mov	arg04, local04
24e80     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
24e84                 | '   fastline(x0-y,x0+y,y0+x,c)
24e84     14 13 02 F6 | 	mov	arg01, local02
24e88     13 13 82 F1 | 	sub	arg01, local01
24e8c     14 15 02 F6 | 	mov	arg02, local02
24e90     13 15 02 F1 | 	add	arg02, local01
24e94     15 17 02 F6 | 	mov	arg03, local03
24e98     18 17 02 F1 | 	add	arg03, local06
24e9c     16 19 02 F6 | 	mov	arg04, local04
24ea0     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
24ea4                 | '   if d>0 
24ea4     01 2E 56 F2 | 	cmps	local05, #1 wc
24ea8     18 00 90 CD |  if_b	jmp	#LR__2821
24eac                 | '     d+=da
24eac     1A 2F 02 F1 | 	add	local05, local08
24eb0                 | '     y-=1
24eb0     01 26 86 F1 | 	sub	local01, #1
24eb4                 | '     x+=1
24eb4     01 30 06 F1 | 	add	local06, #1
24eb8                 | '     da+=4*4
24eb8     10 34 06 F1 | 	add	local08, #16
24ebc                 | '     db+=2*4
24ebc     08 32 06 F1 | 	add	local07, #8
24ec0     58 FF 9F FD | 	jmp	#LR__2820
24ec4                 | LR__2821
24ec4                 | '   else
24ec4                 | '     d+=db
24ec4     19 2F 02 F1 | 	add	local05, local07
24ec8                 | '     x+=1
24ec8     01 30 06 F1 | 	add	local06, #1
24ecc                 | '     da+=2*4
24ecc     08 34 06 F1 | 	add	local08, #8
24ed0                 | '     db+=2*4
24ed0     08 32 06 F1 | 	add	local07, #8
24ed4     44 FF 9F FD | 	jmp	#LR__2820
24ed8                 | LR__2822
24ed8     A7 F0 03 F6 | 	mov	ptra, fp
24edc     B2 00 A0 FD | 	call	#popregs_
24ee0                 | _hg010b_spin2_fcircle_ret
24ee0     2D 00 64 FD | 	ret
24ee4                 | 
24ee4                 | '  
24ee4                 | ' '-- A circle ------------------------------------------------------------ 
24ee4                 | '  
24ee4                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
24ee4                 | _hg010b_spin2_circle
24ee4     08 4A 05 F6 | 	mov	COUNT_, #8
24ee8     A8 00 A0 FD | 	call	#pushregs_
24eec     0B 27 02 F6 | 	mov	local01, arg03
24ef0     FF FF 7F FF 
24ef4     FE 27 06 FD | 	qmul	local01, ##-2
24ef8     09 29 02 F6 | 	mov	local02, arg01
24efc     0A 2B 02 F6 | 	mov	local03, arg02
24f00     0C 2D 02 F6 | 	mov	local04, arg04
24f04                 | ' 
24f04                 | '  
24f04                 | ' d:=5-4*r
24f04     13 19 02 F6 | 	mov	arg04, local01
24f08     02 18 66 F0 | 	shl	arg04, #2
24f0c     05 2E 06 F6 | 	mov	local05, #5
24f10     0C 2F 82 F1 | 	sub	local05, arg04
24f14                 | ' x:=0
24f14     00 30 06 F6 | 	mov	local06, #0
24f18                 | ' y:=r
24f18                 | ' da:=(-2*r+5)*4
24f18                 | ' db:=3*4
24f18     0C 32 06 F6 | 	mov	local07, #12
24f1c                 | ' repeat while (x<=y) 
24f1c     18 34 62 FD | 	getqx	local08
24f20     05 34 06 F1 | 	add	local08, #5
24f24     02 34 66 F0 | 	shl	local08, #2
24f28                 | LR__2830
24f28     13 31 5A F2 | 	cmps	local06, local01 wcz
24f2c     F4 00 90 1D |  if_a	jmp	#LR__2832
24f30                 | '   putpixel(x0-x,y0-y,c)
24f30     14 13 02 F6 | 	mov	arg01, local02
24f34     18 13 82 F1 | 	sub	arg01, local06
24f38     15 15 02 F6 | 	mov	arg02, local03
24f3c     13 15 82 F1 | 	sub	arg02, local01
24f40     16 17 02 F6 | 	mov	arg03, local04
24f44     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
24f48                 | '   putpixel(x0-x,y0+y,c)
24f48     14 13 02 F6 | 	mov	arg01, local02
24f4c     18 13 82 F1 | 	sub	arg01, local06
24f50     15 15 02 F6 | 	mov	arg02, local03
24f54     13 15 02 F1 | 	add	arg02, local01
24f58     16 17 02 F6 | 	mov	arg03, local04
24f5c     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
24f60                 | '   putpixel(x0+x,y0-y,c)
24f60     14 13 02 F6 | 	mov	arg01, local02
24f64     18 13 02 F1 | 	add	arg01, local06
24f68     15 15 02 F6 | 	mov	arg02, local03
24f6c     13 15 82 F1 | 	sub	arg02, local01
24f70     16 17 02 F6 | 	mov	arg03, local04
24f74     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
24f78                 | '   putpixel(x0+x,y0+y,c)
24f78     14 13 02 F6 | 	mov	arg01, local02
24f7c     18 13 02 F1 | 	add	arg01, local06
24f80     15 15 02 F6 | 	mov	arg02, local03
24f84     13 15 02 F1 | 	add	arg02, local01
24f88     16 17 02 F6 | 	mov	arg03, local04
24f8c     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
24f90                 | '   putpixel(x0-y,y0-x,c)
24f90     14 13 02 F6 | 	mov	arg01, local02
24f94     13 13 82 F1 | 	sub	arg01, local01
24f98     15 15 02 F6 | 	mov	arg02, local03
24f9c     18 15 82 F1 | 	sub	arg02, local06
24fa0     16 17 02 F6 | 	mov	arg03, local04
24fa4     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
24fa8                 | '   putpixel(x0-y,y0+x,c)
24fa8     14 13 02 F6 | 	mov	arg01, local02
24fac     13 13 82 F1 | 	sub	arg01, local01
24fb0     15 15 02 F6 | 	mov	arg02, local03
24fb4     18 15 02 F1 | 	add	arg02, local06
24fb8     16 17 02 F6 | 	mov	arg03, local04
24fbc     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
24fc0                 | '   putpixel(x0+y,y0-x,c)
24fc0     14 13 02 F6 | 	mov	arg01, local02
24fc4     13 13 02 F1 | 	add	arg01, local01
24fc8     15 15 02 F6 | 	mov	arg02, local03
24fcc     18 15 82 F1 | 	sub	arg02, local06
24fd0     16 17 02 F6 | 	mov	arg03, local04
24fd4     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
24fd8                 | '   putpixel(x0+y,y0+x,c)
24fd8     14 13 02 F6 | 	mov	arg01, local02
24fdc     13 13 02 F1 | 	add	arg01, local01
24fe0     15 15 02 F6 | 	mov	arg02, local03
24fe4     18 15 02 F1 | 	add	arg02, local06
24fe8     16 17 02 F6 | 	mov	arg03, local04
24fec     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
24ff0                 | '   if d>0 
24ff0     01 2E 56 F2 | 	cmps	local05, #1 wc
24ff4     18 00 90 CD |  if_b	jmp	#LR__2831
24ff8                 | '     d+=da
24ff8     1A 2F 02 F1 | 	add	local05, local08
24ffc                 | '     y-=1
24ffc     01 26 86 F1 | 	sub	local01, #1
25000                 | '     x+=1
25000     01 30 06 F1 | 	add	local06, #1
25004                 | '     da+=4*4
25004     10 34 06 F1 | 	add	local08, #16
25008                 | '     db+=2*4
25008     08 32 06 F1 | 	add	local07, #8
2500c     18 FF 9F FD | 	jmp	#LR__2830
25010                 | LR__2831
25010                 | '   else
25010                 | '     d+=db
25010     19 2F 02 F1 | 	add	local05, local07
25014                 | '     x+=1
25014     01 30 06 F1 | 	add	local06, #1
25018                 | '     da+=2*4
25018     08 34 06 F1 | 	add	local08, #8
2501c                 | '     db+=2*4
2501c     08 32 06 F1 | 	add	local07, #8
25020     04 FF 9F FD | 	jmp	#LR__2830
25024                 | LR__2832
25024     A7 F0 03 F6 | 	mov	ptra, fp
25028     B2 00 A0 FD | 	call	#popregs_
2502c                 | _hg010b_spin2_circle_ret
2502c     2D 00 64 FD | 	ret
25030                 | 
25030                 | '     
25030                 | ' '-- A frame (an empty rectangle) ---------------------------------------
25030                 | ' 
25030                 | ' pub frame(x1,y1,x2,y2,c)
25030                 | _hg010b_spin2_frame
25030     05 4A 05 F6 | 	mov	COUNT_, #5
25034     A8 00 A0 FD | 	call	#pushregs_
25038     09 27 02 F6 | 	mov	local01, arg01
2503c     0A 29 02 F6 | 	mov	local02, arg02
25040     0B 2B 02 F6 | 	mov	local03, arg03
25044     0C 2D 02 F6 | 	mov	local04, arg04
25048     0D 2F 02 F6 | 	mov	local05, arg05
2504c                 | ' 
2504c                 | ' fastline(x1,x2,y1,c)
2504c     13 13 02 F6 | 	mov	arg01, local01
25050     15 15 02 F6 | 	mov	arg02, local03
25054     14 17 02 F6 | 	mov	arg03, local02
25058     17 19 02 F6 | 	mov	arg04, local05
2505c     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
25060                 | ' fastline(x1,x2,y2,c)
25060     13 13 02 F6 | 	mov	arg01, local01
25064     15 15 02 F6 | 	mov	arg02, local03
25068     16 17 02 F6 | 	mov	arg03, local04
2506c     17 19 02 F6 | 	mov	arg04, local05
25070     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
25074                 | ' line(x1,y1,x1,y2,c)
25074     13 13 02 F6 | 	mov	arg01, local01
25078     14 15 02 F6 | 	mov	arg02, local02
2507c     13 17 02 F6 | 	mov	arg03, local01
25080     16 19 02 F6 | 	mov	arg04, local04
25084     17 1B 02 F6 | 	mov	arg05, local05
25088                 | ' draw(x1,y1,x2,y2,c)
25088     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
2508c                 | ' line(x2,y1,x2,y2,c)
2508c     15 13 02 F6 | 	mov	arg01, local03
25090     14 15 02 F6 | 	mov	arg02, local02
25094     15 17 02 F6 | 	mov	arg03, local03
25098     16 19 02 F6 | 	mov	arg04, local04
2509c     17 1B 02 F6 | 	mov	arg05, local05
250a0                 | ' draw(x1,y1,x2,y2,c)
250a0     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
250a4     A7 F0 03 F6 | 	mov	ptra, fp
250a8     B2 00 A0 FD | 	call	#popregs_
250ac                 | _hg010b_spin2_frame_ret
250ac     2D 00 64 FD | 	ret
250b0                 | 
250b0                 | ' 
250b0                 | ' '-- A box (a filled rectangle) ----------------------------------------
250b0                 | ' 
250b0                 | ' pub box(x1,y1,x2,y2,c) |yy
250b0                 | _hg010b_spin2_box
250b0     06 4A 05 F6 | 	mov	COUNT_, #6
250b4     A8 00 A0 FD | 	call	#pushregs_
250b8     09 27 02 F6 | 	mov	local01, arg01
250bc     0A 29 02 F6 | 	mov	local02, arg02
250c0     0B 2B 02 F6 | 	mov	local03, arg03
250c4     0C 2D 02 F6 | 	mov	local04, arg04
250c8     0D 2F 02 F6 | 	mov	local05, arg05
250cc                 | ' 
250cc                 | ' repeat yy from y1 to y2
250cc     14 2D 52 F2 | 	cmps	local04, local02 wc
250d0     01 30 86 F6 | 	negc	local06, #1
250d4     18 2D 02 F1 | 	add	local04, local06
250d8                 | LR__2840
250d8                 | '   fastline(x1,x2,yy,c)
250d8     13 13 02 F6 | 	mov	arg01, local01
250dc     15 15 02 F6 | 	mov	arg02, local03
250e0     17 19 02 F6 | 	mov	arg04, local05
250e4     14 17 02 F6 | 	mov	arg03, local02
250e8     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
250ec     18 29 02 F1 | 	add	local02, local06
250f0     16 29 0A F2 | 	cmp	local02, local04 wz
250f4     E0 FF 9F 5D |  if_ne	jmp	#LR__2840
250f8     A7 F0 03 F6 | 	mov	ptra, fp
250fc     B2 00 A0 FD | 	call	#popregs_
25100                 | _hg010b_spin2_box_ret
25100     2D 00 64 FD | 	ret
25104                 | 
25104                 | '       
25104                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
25104                 | _hg010b_spin2_putcharxycgf
25104                 | ' 
25104                 | '  
25104                 | ' repeat yy from 0 to 15
25104     00 00 06 F6 | 	mov	_var01, #0
25108     97 8C 48 FB | 	callpa	#(@LR__2852-@LR__2850)>>2,fcache_load_ptr_
2510c                 | LR__2850
2510c                 | ' 
2510c                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
2510c     95 E4 05 F1 | 	add	objptr, #149
25110     F2 02 02 FB | 	rdlong	_var02, objptr
25114     0A 02 66 F0 | 	shl	_var02, #10
25118     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
2511c     01 05 02 F1 | 	add	_var03, _var02
25120     0B 03 02 F6 | 	mov	_var02, arg03
25124     04 02 66 F0 | 	shl	_var02, #4
25128     01 05 02 F1 | 	add	_var03, _var02
2512c     00 05 02 F1 | 	add	_var03, _var01
25130     02 05 C2 FA | 	rdbyte	_var03, _var03
25134                 | '   asm
25134     00 04 0E F4 | 	testb	_var03, #0 wz
25138     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
2513c     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
25140     01 04 0E F4 | 	testb	_var03, #1 wz
25144     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
25148     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
2514c     02 04 0E F4 | 	testb	_var03, #2 wz
25150     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
25154     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
25158     03 04 0E F4 | 	testb	_var03, #3 wz
2515c     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
25160     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
25164     04 04 0E F4 | 	testb	_var03, #4 wz
25168     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
2516c     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
25170     05 04 0E F4 | 	testb	_var03, #5 wz
25174     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
25178     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
2517c     06 04 0E F4 | 	testb	_var03, #6 wz
25180     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
25184     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
25188     07 04 0E F4 | 	testb	_var03, #7 wz
2518c     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
25190     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
25194                 | '   
25194                 | '   ccc[0]:=c1
25194     99 E5 05 F1 | 	add	objptr, #409
25198     F2 06 62 FC | 	wrlong	_var04, objptr
2519c                 | '   ccc[1]:=c2 
2519c     04 E4 05 F1 | 	add	objptr, #4
251a0     F2 08 62 FC | 	wrlong	_var05, objptr
251a4                 | '   long[mailbox0][2]:=8
251a4     49 E4 85 F1 | 	sub	objptr, #73
251a8     F2 04 02 FB | 	rdlong	_var03, objptr
251ac     08 04 06 F1 | 	add	_var03, #8
251b0     02 11 68 FC | 	wrlong	#8, _var03
251b4                 | '   long[mailbox0][1]:=@ccc
251b4     45 E4 05 F1 | 	add	objptr, #69
251b8     F2 04 02 F6 | 	mov	_var03, objptr
251bc     45 E4 85 F1 | 	sub	objptr, #69
251c0     F2 02 02 FB | 	rdlong	_var02, objptr
251c4     04 02 06 F1 | 	add	_var02, #4
251c8     01 05 62 FC | 	wrlong	_var03, _var02
251cc                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
251cc     0C E5 85 F1 | 	sub	objptr, #268
251d0     F2 04 02 FB | 	rdlong	_var03, objptr
251d4     0A 03 02 F6 | 	mov	_var02, arg02
251d8     00 03 02 F1 | 	add	_var02, _var01
251dc     0A 02 66 F0 | 	shl	_var02, #10
251e0     09 0B 02 F6 | 	mov	_var06, arg01
251e4     02 0A 66 F0 | 	shl	_var06, #2
251e8     05 03 02 F1 | 	add	_var02, _var06
251ec     01 05 02 F1 | 	add	_var03, _var02
251f0     00 00 78 FF 
251f4     00 04 06 F1 | 	add	_var03, ##-268435456
251f8     0C E5 05 F1 | 	add	objptr, #268
251fc     F2 0A 02 FB | 	rdlong	_var06, objptr
25200     05 05 62 FC | 	wrlong	_var03, _var06
25204                 | '   repeat
25204                 | LR__2851
25204     F2 04 02 FB | 	rdlong	_var03, objptr
25208     02 03 02 FB | 	rdlong	_var02, _var03
2520c     00 02 56 F2 | 	cmps	_var02, #0 wc
25210     F0 FF 9F CD |  if_b	jmp	#LR__2851
25214     E9 E5 85 F1 | 	sub	objptr, #489
25218     01 00 06 F1 | 	add	_var01, #1
2521c     10 00 56 F2 | 	cmps	_var01, #16 wc
25220     E8 FE 9F CD |  if_b	jmp	#LR__2850
25224                 | LR__2852
25224                 | _hg010b_spin2_putcharxycgf_ret
25224     2D 00 64 FD | 	ret
25228                 | 
25228                 | ' 
25228                 | ' 
25228                 | ' '**********************************************************************r***
25228                 | ' '                                                                        *
25228                 | ' ' Font related functions                                                 *
25228                 | ' '                                                                        *
25228                 | ' '*************************************************************************
25228                 | ' 
25228                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
25228                 | ' 
25228                 | ' pub setfontfamily(afontnum)
25228                 | _hg010b_spin2_setfontfamily
25228                 | ' 
25228                 | ' font_family:=afontnum
25228     95 E4 05 F1 | 	add	objptr, #149
2522c     F2 12 62 FC | 	wrlong	arg01, objptr
25230     95 E4 85 F1 | 	sub	objptr, #149
25234                 | ' 'if afontnum==8
25234                 | ' '  font_ptr:=@amiga_font
25234                 | ' 
25234                 | ' if afontnum==4
25234     04 12 0E F2 | 	cmp	arg01, #4 wz
25238                 | '   font_ptr:=@st_font
25238     08 00 00 AF 
2523c     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
25240     08 E4 05 A1 |  if_e	add	objptr, #8
25244     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
25248     08 E4 85 A1 |  if_e	sub	objptr, #8
2524c     08 00 00 AF 
25250     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
25254                 | ' if afontnum==0
25254     00 12 0E F2 | 	cmp	arg01, #0 wz
25258                 | '   font_ptr:=@vga_font
25258     08 E4 05 A1 |  if_e	add	objptr, #8
2525c     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
25260     08 E4 85 A1 |  if_e	sub	objptr, #8
25264                 | _hg010b_spin2_setfontfamily_ret
25264     2D 00 64 FD | 	ret
25268                 | 
25268                 | ' 
25268                 | ' '*************************************************************************
25268                 | ' '                                                                        *
25268                 | ' '  Cursor functions                                                      *
25268                 | ' '                                                                        *
25268                 | ' '*************************************************************************
25268                 | ' 
25268                 | ' 
25268                 | ' pub setcursorpos(x,y)
25268                 | _hg010b_spin2_setcursorpos
25268                 | ' 
25268                 | ' ''---------- Set the (x,y) position of cursor
25268                 | ' 
25268                 | ' cursor_x:=x
25268     3C E4 05 F1 | 	add	objptr, #60
2526c     F2 12 52 FC | 	wrword	arg01, objptr
25270                 | ' cursor_y:=y
25270     02 E4 05 F1 | 	add	objptr, #2
25274     F2 14 42 FC | 	wrbyte	arg02, objptr
25278                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
25278     02 E4 85 F1 | 	sub	objptr, #2
2527c     F2 14 E2 FA | 	rdword	arg02, objptr
25280     02 14 66 F0 | 	shl	arg02, #2
25284     02 E4 05 F1 | 	add	objptr, #2
25288     F2 16 C2 FA | 	rdbyte	arg03, objptr
2528c     3E E4 85 F1 | 	sub	objptr, #62
25290     04 16 66 F0 | 	shl	arg03, #4
25294     04 16 06 F1 | 	add	arg03, #4
25298     11 12 06 F6 | 	mov	arg01, #17
2529c     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
252a0                 | _hg010b_spin2_setcursorpos_ret
252a0     2D 00 64 FD | 	ret
252a4                 | 
252a4                 | ' 
252a4                 | ' pub setcursorx(x)
252a4                 | _hg010b_spin2_setcursorx
252a4                 | ' cursor_x:=x
252a4     3C E4 05 F1 | 	add	objptr, #60
252a8     F2 12 52 FC | 	wrword	arg01, objptr
252ac                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
252ac     F2 14 E2 FA | 	rdword	arg02, objptr
252b0     02 14 66 F0 | 	shl	arg02, #2
252b4     02 E4 05 F1 | 	add	objptr, #2
252b8     F2 16 C2 FA | 	rdbyte	arg03, objptr
252bc     3E E4 85 F1 | 	sub	objptr, #62
252c0     04 16 66 F0 | 	shl	arg03, #4
252c4     04 16 06 F1 | 	add	arg03, #4
252c8     11 12 06 F6 | 	mov	arg01, #17
252cc     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
252d0                 | _hg010b_spin2_setcursorx_ret
252d0     2D 00 64 FD | 	ret
252d4                 | 
252d4                 | ' 
252d4                 | ' pub setcursory(y) 
252d4                 | _hg010b_spin2_setcursory
252d4                 | ' cursor_y:=y
252d4     3E E4 05 F1 | 	add	objptr, #62
252d8     F2 12 42 FC | 	wrbyte	arg01, objptr
252dc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
252dc     02 E4 85 F1 | 	sub	objptr, #2
252e0     F2 14 E2 FA | 	rdword	arg02, objptr
252e4     02 14 66 F0 | 	shl	arg02, #2
252e8     02 E4 05 F1 | 	add	objptr, #2
252ec     F2 16 C2 FA | 	rdbyte	arg03, objptr
252f0     3E E4 85 F1 | 	sub	objptr, #62
252f4     04 16 66 F0 | 	shl	arg03, #4
252f8     04 16 06 F1 | 	add	arg03, #4
252fc     11 12 06 F6 | 	mov	arg01, #17
25300     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
25304                 | _hg010b_spin2_setcursory_ret
25304     2D 00 64 FD | 	ret
25308                 | 
25308                 | ' 
25308                 | ' '*************************************************************************
25308                 | ' '                                                                        *
25308                 | ' '  VBlank functions                                                      *
25308                 | ' '                                                                        *
25308                 | ' '*************************************************************************
25308                 | ' 
25308                 | ' pub waitvbl(amount) | i
25308                 | _hg010b_spin2_waitvbl
25308     03 4A 05 F6 | 	mov	COUNT_, #3
2530c     A8 00 A0 FD | 	call	#pushregs_
25310     09 27 02 F6 | 	mov	local01, arg01
25314                 | ' 
25314                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
25314                 | ' 
25314                 | ' repeat i from 1 to amount
25314     01 28 06 F6 | 	mov	local02, #1
25318     01 26 56 F2 | 	cmps	local01, #1 wc
2531c     01 2A 86 F6 | 	negc	local03, #1
25320     15 27 02 F1 | 	add	local01, local03
25324                 | LR__2860
25324                 | '   repeat until vblank==0
25324                 | LR__2861
25324     49 E4 05 F1 | 	add	objptr, #73
25328     F2 12 0A FB | 	rdlong	arg01, objptr wz
2532c     49 E4 85 F1 | 	sub	objptr, #73
25330     0C 00 90 AD |  if_e	jmp	#LR__2862
25334                 | '     waitus(100)
25334     64 12 06 F6 | 	mov	arg01, #100
25338     C0 20 B0 FD | 	call	#__system___waitus
2533c     E4 FF 9F FD | 	jmp	#LR__2861
25340                 | LR__2862
25340                 | '   repeat until vblank==1
25340                 | LR__2863
25340     49 E4 05 F1 | 	add	objptr, #73
25344     F2 12 02 FB | 	rdlong	arg01, objptr
25348     49 E4 85 F1 | 	sub	objptr, #73
2534c     01 12 0E F2 | 	cmp	arg01, #1 wz
25350     0C 00 90 AD |  if_e	jmp	#LR__2864
25354                 | '     waitus(100)
25354     64 12 06 F6 | 	mov	arg01, #100
25358     A0 20 B0 FD | 	call	#__system___waitus
2535c     E0 FF 9F FD | 	jmp	#LR__2863
25360                 | LR__2864
25360     15 29 02 F1 | 	add	local02, local03
25364     13 29 0A F2 | 	cmp	local02, local01 wz
25368     B8 FF 9F 5D |  if_ne	jmp	#LR__2860
2536c     A7 F0 03 F6 | 	mov	ptra, fp
25370     B2 00 A0 FD | 	call	#popregs_
25374                 | _hg010b_spin2_waitvbl_ret
25374     2D 00 64 FD | 	ret
25378                 | 
25378                 | ' 
25378                 | ' ''---------- Set color #c in palette to r,g,b
25378                 | ' 
25378                 | ' pub setcolor(c,r,g,b)  |cc
25378                 | _hg010b_spin2_setcolor
25378                 | ' 
25378                 | ' cc:=r<<24+g<<16+b<<8
25378     18 14 66 F0 | 	shl	arg02, #24
2537c     10 16 66 F0 | 	shl	arg03, #16
25380     0B 15 02 F1 | 	add	arg02, arg03
25384     08 18 66 F0 | 	shl	arg04, #8
25388     0C 15 02 F1 | 	add	arg02, arg04
2538c                 | ' long[palette_ptr+4*c]:=cc
2538c     1C E4 05 F1 | 	add	objptr, #28
25390     F2 18 02 FB | 	rdlong	arg04, objptr
25394     1C E4 85 F1 | 	sub	objptr, #28
25398     02 12 66 F0 | 	shl	arg01, #2
2539c     09 19 02 F1 | 	add	arg04, arg01
253a0     0C 15 62 FC | 	wrlong	arg02, arg04
253a4                 | _hg010b_spin2_setcolor_ret
253a4     2D 00 64 FD | 	ret
253a8                 | 
253a8                 | ' 
253a8                 | ' 
253a8                 | ' pub cls(fc,bc)   :c,i
253a8                 | _hg010b_spin2_cls
253a8     02 4A 05 F6 | 	mov	COUNT_, #2
253ac     A8 00 A0 FD | 	call	#pushregs_
253b0     09 27 02 F6 | 	mov	local01, arg01
253b4     0A 29 02 F6 | 	mov	local02, arg02
253b8                 | ' 
253b8                 | ' c:=bc
253b8                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
253b8     DD E4 05 F1 | 	add	objptr, #221
253bc     F2 12 02 FB | 	rdlong	arg01, objptr
253c0     A5 E4 85 F1 | 	sub	objptr, #165
253c4     F2 16 02 FB | 	rdlong	arg03, objptr
253c8     02 16 66 F0 | 	shl	arg03, #2
253cc     14 15 02 F6 | 	mov	arg02, local02
253d0     00 18 06 F6 | 	mov	arg04, #0
253d4     01 1A 06 F6 | 	mov	arg05, #1
253d8     0B 00 00 FF 
253dc     94 E4 05 F1 | 	add	objptr, ##5780
253e0     F8 10 B0 FD | 	call	#_psram_spin2_fill
253e4                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
253e4     0B 00 00 FF 
253e8     C8 E4 85 F1 | 	sub	objptr, ##5832
253ec     F2 12 02 FB | 	rdlong	arg01, objptr
253f0     04 E4 85 F1 | 	sub	objptr, #4
253f4     F2 16 02 FB | 	rdlong	arg03, objptr
253f8     09 17 82 F1 | 	sub	arg03, arg01
253fc     20 14 06 F6 | 	mov	arg02, #32
25400     00 18 06 F6 | 	mov	arg04, #0
25404     01 1A 06 F6 | 	mov	arg05, #1
25408     0B 00 00 FF 
2540c     CC E4 05 F1 | 	add	objptr, ##5836
25410     C8 10 B0 FD | 	call	#_psram_spin2_fill
25414                 | ' setwritecolors(fc,bc)
25414                 | ' 
25414                 | ' write_color:=ff
25414     0B 00 00 FF 
25418     8B E4 85 F1 | 	sub	objptr, ##5771
2541c     F2 26 62 FC | 	wrlong	local01, objptr
25420                 | ' write_background:=bb
25420     04 E4 05 F1 | 	add	objptr, #4
25424     F2 28 62 FC | 	wrlong	local02, objptr
25428                 | ' cursor_x:=0
25428     09 E4 85 F1 | 	sub	objptr, #9
2542c     F2 00 58 FC | 	wrword	#0, objptr
25430                 | ' cursor_y:=0
25430     02 E4 05 F1 | 	add	objptr, #2
25434     F2 00 48 FC | 	wrbyte	#0, objptr
25438                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
25438     02 E4 85 F1 | 	sub	objptr, #2
2543c     F2 14 E2 FA | 	rdword	arg02, objptr
25440     02 14 66 F0 | 	shl	arg02, #2
25444     02 E4 05 F1 | 	add	objptr, #2
25448     F2 16 C2 FA | 	rdbyte	arg03, objptr
2544c     3E E4 85 F1 | 	sub	objptr, #62
25450     04 16 66 F0 | 	shl	arg03, #4
25454     04 16 06 F1 | 	add	arg03, #4
25458     11 12 06 F6 | 	mov	arg01, #17
2545c     90 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
25460                 | ' setcursorcolor(fc)
25460     13 13 02 F6 | 	mov	arg01, local01
25464     88 ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
25468     14 FB 01 F6 | 	mov	result1, local02
2546c     00 FC 05 F6 | 	mov	result2, #0
25470     A7 F0 03 F6 | 	mov	ptra, fp
25474     B2 00 A0 FD | 	call	#popregs_
25478                 | _hg010b_spin2_cls_ret
25478     2D 00 64 FD | 	ret
2547c                 | 
2547c                 | ' 
2547c                 | ' ''---------- Output a char at the cursor position, move the cursor 
2547c                 | ' 
2547c                 | ' pub putchar(achar) | c,x,y,l,newcpl
2547c                 | _hg010b_spin2_putchar
2547c     02 4A 05 F6 | 	mov	COUNT_, #2
25480     A8 00 A0 FD | 	call	#pushregs_
25484     09 27 02 F6 | 	mov	local01, arg01
25488                 | ' 
25488                 | ' if achar==10
25488     0A 26 0E F2 | 	cmp	local01, #10 wz
2548c                 | '   crlf()
2548c     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
25490                 | ' if achar==9
25490     09 26 0E F2 | 	cmp	local01, #9 wz
25494     18 00 90 5D |  if_ne	jmp	#LR__2870
25498                 | '   cursor_x:=(cursor_x& %11110000)+16
25498     3C E4 05 F1 | 	add	objptr, #60
2549c     F2 16 E2 FA | 	rdword	arg03, objptr
254a0     F0 16 06 F5 | 	and	arg03, #240
254a4     10 16 06 F1 | 	add	arg03, #16
254a8     F2 16 52 FC | 	wrword	arg03, objptr
254ac     3C E4 85 F1 | 	sub	objptr, #60
254b0                 | LR__2870
254b0                 | '   
254b0                 | ' if (achar<>9) && (achar<>10) 
254b0     09 26 0E F2 | 	cmp	local01, #9 wz
254b4     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
254b8     A8 00 90 AD |  if_e	jmp	#LR__2871
254bc                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
254bc     3C E4 05 F1 | 	add	objptr, #60
254c0     F2 12 E2 FA | 	rdword	arg01, objptr
254c4     02 E4 05 F1 | 	add	objptr, #2
254c8     F2 14 C2 FA | 	rdbyte	arg02, objptr
254cc     04 14 66 F0 | 	shl	arg02, #4
254d0     04 14 06 F1 | 	add	arg02, #4
254d4     03 E4 05 F1 | 	add	objptr, #3
254d8     F2 18 02 FB | 	rdlong	arg04, objptr
254dc     04 E4 05 F1 | 	add	objptr, #4
254e0     F2 1A 02 FB | 	rdlong	arg05, objptr
254e4     45 E4 85 F1 | 	sub	objptr, #69
254e8     13 17 02 F6 | 	mov	arg03, local01
254ec     14 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
254f0     04 E4 05 F1 | 	add	objptr, #4
254f4     F2 12 02 FB | 	rdlong	arg01, objptr
254f8     1C 00 00 FF 
254fc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
25500     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
25504     3A E4 05 F1 | 	add	objptr, #58
25508     F2 1A C2 FA | 	rdbyte	arg05, objptr
2550c     0D 17 02 FD | 	qmul	arg03, arg05
25510                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
25510     1C 00 00 FF 
25514     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
25518     02 E4 85 F1 | 	sub	objptr, #2
2551c     F2 28 E2 FA | 	rdword	local02, objptr
25520     01 28 46 F0 | 	shr	local02, #1
25524     13 15 02 F6 | 	mov	arg02, local01
25528     01 16 06 F6 | 	mov	arg03, #1
2552c     00 18 06 F6 | 	mov	arg04, #0
25530     01 1A 06 F6 | 	mov	arg05, #1
25534     0B 00 00 FF 
25538     90 E4 05 F1 | 	add	objptr, ##5776
2553c     18 26 62 FD | 	getqx	local01
25540     14 27 02 F1 | 	add	local01, local02
25544     13 13 02 F1 | 	add	arg01, local01
25548     90 0F B0 FD | 	call	#_psram_spin2_fill
2554c                 | '   cursor_x+=2
2554c     0B 00 00 FF 
25550     90 E4 85 F1 | 	sub	objptr, ##5776
25554     F2 28 E2 FA | 	rdword	local02, objptr
25558     02 28 06 F1 | 	add	local02, #2
2555c     F2 28 52 FC | 	wrword	local02, objptr
25560     3C E4 85 F1 | 	sub	objptr, #60
25564                 | LR__2871
25564                 | ' 
25564                 | ' if cursor_x>=256
25564     3C E4 05 F1 | 	add	objptr, #60
25568     F2 28 E2 FA | 	rdword	local02, objptr
2556c     3C E4 85 F1 | 	sub	objptr, #60
25570     00 29 56 F2 | 	cmps	local02, #256 wc
25574     64 00 90 CD |  if_b	jmp	#LR__2873
25578                 | '   cursor_x:=0
25578     3C E4 05 F1 | 	add	objptr, #60
2557c     F2 00 58 FC | 	wrword	#0, objptr
25580                 | '   cursor_y+=1
25580     02 E4 05 F1 | 	add	objptr, #2
25584     F2 28 C2 FA | 	rdbyte	local02, objptr
25588     01 28 06 F1 | 	add	local02, #1
2558c     F2 28 42 FC | 	wrbyte	local02, objptr
25590                 | '   if cursor_y>st_lines-1
25590     C3 E4 05 F1 | 	add	objptr, #195
25594     F2 28 02 FB | 	rdlong	local02, objptr
25598     01 28 86 F1 | 	sub	local02, #1
2559c     C3 E4 85 F1 | 	sub	objptr, #195
255a0     F2 16 C2 FA | 	rdbyte	arg03, objptr
255a4     3E E4 85 F1 | 	sub	objptr, #62
255a8     14 17 5A F2 | 	cmps	arg03, local02 wcz
255ac     2C 00 90 ED |  if_be	jmp	#LR__2872
255b0                 | '     scrollup2()
255b0     00 12 06 F6 | 	mov	arg01, #0
255b4     01 00 00 FF 
255b8     58 14 06 F6 | 	mov	arg02, ##600
255bc     10 16 06 F6 | 	mov	arg03, #16
255c0     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
255c4                 | '     cursor_y:=st_lines-1
255c4     01 E5 05 F1 | 	add	objptr, #257
255c8     F2 28 02 FB | 	rdlong	local02, objptr
255cc     01 28 86 F1 | 	sub	local02, #1
255d0     C3 E4 85 F1 | 	sub	objptr, #195
255d4     F2 28 42 FC | 	wrbyte	local02, objptr
255d8     3E E4 85 F1 | 	sub	objptr, #62
255dc                 | LR__2872
255dc                 | LR__2873
255dc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
255dc     3C E4 05 F1 | 	add	objptr, #60
255e0     F2 14 E2 FA | 	rdword	arg02, objptr
255e4     02 14 66 F0 | 	shl	arg02, #2
255e8     02 E4 05 F1 | 	add	objptr, #2
255ec     F2 16 C2 FA | 	rdbyte	arg03, objptr
255f0     3E E4 85 F1 | 	sub	objptr, #62
255f4     04 16 66 F0 | 	shl	arg03, #4
255f8     04 16 06 F1 | 	add	arg03, #4
255fc     11 12 06 F6 | 	mov	arg01, #17
25600     EC EF BF FD | 	call	#_hg010b_spin2_setspritepos
25604     A7 F0 03 F6 | 	mov	ptra, fp
25608     B2 00 A0 FD | 	call	#popregs_
2560c                 | _hg010b_spin2_putchar_ret
2560c     2D 00 64 FD | 	ret
25610                 | 
25610                 | '     
25610                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
25610                 | ' 
25610                 | ' pub putchar2(achar) | c,x,y,l,newcpl
25610                 | _hg010b_spin2_putchar2
25610     02 4A 05 F6 | 	mov	COUNT_, #2
25614     A8 00 A0 FD | 	call	#pushregs_
25618     09 27 02 F6 | 	mov	local01, arg01
2561c                 | ' 
2561c                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
2561c     3C E4 05 F1 | 	add	objptr, #60
25620     F2 12 E2 FA | 	rdword	arg01, objptr
25624     02 E4 05 F1 | 	add	objptr, #2
25628     F2 14 C2 FA | 	rdbyte	arg02, objptr
2562c     04 14 66 F0 | 	shl	arg02, #4
25630     04 14 06 F1 | 	add	arg02, #4
25634     03 E4 05 F1 | 	add	objptr, #3
25638     F2 18 02 FB | 	rdlong	arg04, objptr
2563c     04 E4 05 F1 | 	add	objptr, #4
25640     F2 1A 02 FB | 	rdlong	arg05, objptr
25644     45 E4 85 F1 | 	sub	objptr, #69
25648     13 17 02 F6 | 	mov	arg03, local01
2564c     B4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
25650     04 E4 05 F1 | 	add	objptr, #4
25654     F2 12 02 FB | 	rdlong	arg01, objptr
25658     1C 00 00 FF 
2565c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
25660     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
25664     3A E4 05 F1 | 	add	objptr, #58
25668     F2 1A C2 FA | 	rdbyte	arg05, objptr
2566c     0D 17 02 FD | 	qmul	arg03, arg05
25670                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
25670     1C 00 00 FF 
25674     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
25678     02 E4 85 F1 | 	sub	objptr, #2
2567c     F2 28 E2 FA | 	rdword	local02, objptr
25680     01 28 46 F0 | 	shr	local02, #1
25684     13 15 02 F6 | 	mov	arg02, local01
25688     01 16 06 F6 | 	mov	arg03, #1
2568c     00 18 06 F6 | 	mov	arg04, #0
25690     01 1A 06 F6 | 	mov	arg05, #1
25694     0B 00 00 FF 
25698     90 E4 05 F1 | 	add	objptr, ##5776
2569c     18 26 62 FD | 	getqx	local01
256a0     14 27 02 F1 | 	add	local01, local02
256a4     13 13 02 F1 | 	add	arg01, local01
256a8     30 0E B0 FD | 	call	#_psram_spin2_fill
256ac                 | ' 
256ac                 | ' cursor_x+=2
256ac     0B 00 00 FF 
256b0     90 E4 85 F1 | 	sub	objptr, ##5776
256b4     F2 28 E2 FA | 	rdword	local02, objptr
256b8     02 28 06 F1 | 	add	local02, #2
256bc     F2 28 52 FC | 	wrword	local02, objptr
256c0                 | ' if cursor_x>=256
256c0     F2 28 E2 FA | 	rdword	local02, objptr
256c4     3C E4 85 F1 | 	sub	objptr, #60
256c8     00 29 56 F2 | 	cmps	local02, #256 wc
256cc     64 00 90 CD |  if_b	jmp	#LR__2881
256d0                 | '   cursor_x:=0
256d0     3C E4 05 F1 | 	add	objptr, #60
256d4     F2 00 58 FC | 	wrword	#0, objptr
256d8                 | '   cursor_y+=1
256d8     02 E4 05 F1 | 	add	objptr, #2
256dc     F2 28 C2 FA | 	rdbyte	local02, objptr
256e0     01 28 06 F1 | 	add	local02, #1
256e4     F2 28 42 FC | 	wrbyte	local02, objptr
256e8                 | '   if cursor_y>st_lines-1
256e8     C3 E4 05 F1 | 	add	objptr, #195
256ec     F2 28 02 FB | 	rdlong	local02, objptr
256f0     01 28 86 F1 | 	sub	local02, #1
256f4     C3 E4 85 F1 | 	sub	objptr, #195
256f8     F2 16 C2 FA | 	rdbyte	arg03, objptr
256fc     3E E4 85 F1 | 	sub	objptr, #62
25700     14 17 5A F2 | 	cmps	arg03, local02 wcz
25704     2C 00 90 ED |  if_be	jmp	#LR__2880
25708                 | '     scrollup2()
25708     00 12 06 F6 | 	mov	arg01, #0
2570c     01 00 00 FF 
25710     58 14 06 F6 | 	mov	arg02, ##600
25714     10 16 06 F6 | 	mov	arg03, #16
25718     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
2571c                 | '     cursor_y:=st_lines-1
2571c     01 E5 05 F1 | 	add	objptr, #257
25720     F2 28 02 FB | 	rdlong	local02, objptr
25724     01 28 86 F1 | 	sub	local02, #1
25728     C3 E4 85 F1 | 	sub	objptr, #195
2572c     F2 28 42 FC | 	wrbyte	local02, objptr
25730     3E E4 85 F1 | 	sub	objptr, #62
25734                 | LR__2880
25734                 | LR__2881
25734                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
25734     3C E4 05 F1 | 	add	objptr, #60
25738     F2 14 E2 FA | 	rdword	arg02, objptr
2573c     02 14 66 F0 | 	shl	arg02, #2
25740     02 E4 05 F1 | 	add	objptr, #2
25744     F2 16 C2 FA | 	rdbyte	arg03, objptr
25748     3E E4 85 F1 | 	sub	objptr, #62
2574c     04 16 66 F0 | 	shl	arg03, #4
25750     04 16 06 F1 | 	add	arg03, #4
25754     11 12 06 F6 | 	mov	arg01, #17
25758     94 EE BF FD | 	call	#_hg010b_spin2_setspritepos
2575c     A7 F0 03 F6 | 	mov	ptra, fp
25760     B2 00 A0 FD | 	call	#popregs_
25764                 | _hg010b_spin2_putchar2_ret
25764     2D 00 64 FD | 	ret
25768                 | 
25768                 | ' ''--------- Output a string at the cursor position, move the cursor  
25768                 | ' 
25768                 | ' pub write(text) | iii,c,ncx,ncy
25768                 | _hg010b_spin2_write
25768     04 4A 05 F6 | 	mov	COUNT_, #4
2576c     A8 00 A0 FD | 	call	#pushregs_
25770     09 27 02 F6 | 	mov	local01, arg01
25774                 | ' 
25774                 | ' repeat iii from 0 to strsize(text)-1
25774     00 28 06 F6 | 	mov	local02, #0
25778     13 13 02 F6 | 	mov	arg01, local01
2577c     09 2B 02 F6 | 	mov	local03, arg01
25780     97 06 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
25784                 | LR__2890
25784     15 FB C9 FA | 	rdbyte	result1, local03 wz
25788     01 2A 06 51 |  if_ne	add	local03, #1
2578c     F4 FF 9F 5D |  if_ne	jmp	#LR__2890
25790                 | LR__2891
25790     09 2B 82 F1 | 	sub	local03, arg01
25794     01 2A 86 F1 | 	sub	local03, #1
25798     00 2A 56 F2 | 	cmps	local03, #0 wc
2579c     01 2C 86 F6 | 	negc	local04, #1
257a0     16 2B 02 F1 | 	add	local03, local04
257a4                 | LR__2892
257a4                 | '   putchar2(byte[text+iii])
257a4     13 13 02 F6 | 	mov	arg01, local01
257a8     14 13 02 F1 | 	add	arg01, local02
257ac     09 13 C2 FA | 	rdbyte	arg01, arg01
257b0     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
257b4     16 29 02 F1 | 	add	local02, local04
257b8     15 29 0A F2 | 	cmp	local02, local03 wz
257bc     E4 FF 9F 5D |  if_ne	jmp	#LR__2892
257c0     A7 F0 03 F6 | 	mov	ptra, fp
257c4     B2 00 A0 FD | 	call	#popregs_
257c8                 | _hg010b_spin2_write_ret
257c8     2D 00 64 FD | 	ret
257cc                 | 
257cc                 | '    
257cc                 | ' ' a version for text scrolling in Basic shifted 4 lines down
257cc                 | ' 
257cc                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
257cc                 | _hg010b_spin2_scrollup2
257cc     03 4A 05 F6 | 	mov	COUNT_, #3
257d0     A8 00 A0 FD | 	call	#pushregs_
257d4                 | ' 	
257d4                 | ' repeat i from 4 to 579 
257d4     04 26 06 F6 | 	mov	local01, #4
257d8                 | LR__2900
257d8     F9 E4 05 F1 | 	add	objptr, #249
257dc     F2 1A 02 FB | 	rdlong	arg05, objptr
257e0     1C E4 85 F1 | 	sub	objptr, #28
257e4     F2 14 02 FB | 	rdlong	arg02, objptr
257e8     13 19 02 F6 | 	mov	arg04, local01
257ec     10 18 06 F1 | 	add	arg04, #16
257f0     02 18 66 F0 | 	shl	arg04, #2
257f4     14 E4 05 F1 | 	add	objptr, #20
257f8     F2 16 02 FB | 	rdlong	arg03, objptr
257fc     0B 19 02 FD | 	qmul	arg04, arg03
25800                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
25800     F6 03 00 FF 
25804     00 12 06 F6 | 	mov	arg01, ##519168
25808     0D 13 82 F1 | 	sub	arg01, arg05
2580c     02 16 66 F0 | 	shl	arg03, #2
25810     0A 00 00 FF 
25814     DB E5 05 F1 | 	add	objptr, ##5595
25818     18 1A 62 FD | 	getqx	arg05
2581c     0D 15 02 F1 | 	add	arg02, arg05
25820     80 0B B0 FD | 	call	#_psram_spin2_read1
25824     0A 00 00 FF 
25828     D3 E5 85 F1 | 	sub	objptr, ##5587
2582c     F2 1A 02 FB | 	rdlong	arg05, objptr
25830     1C E4 85 F1 | 	sub	objptr, #28
25834     F2 14 02 FB | 	rdlong	arg02, objptr
25838     13 19 02 F6 | 	mov	arg04, local01
2583c     02 18 66 F0 | 	shl	arg04, #2
25840     14 E4 05 F1 | 	add	objptr, #20
25844     F2 16 02 FB | 	rdlong	arg03, objptr
25848     0B 19 02 FD | 	qmul	arg04, arg03
2584c                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
2584c     F6 03 00 FF 
25850     00 12 06 F6 | 	mov	arg01, ##519168
25854     0D 13 82 F1 | 	sub	arg01, arg05
25858     02 16 66 F0 | 	shl	arg03, #2
2585c     0A 00 00 FF 
25860     DB E5 05 F1 | 	add	objptr, ##5595
25864     18 1A 62 FD | 	getqx	arg05
25868     0D 15 02 F1 | 	add	arg02, arg05
2586c     D0 0B B0 FD | 	call	#_psram_spin2_write
25870     0B 00 00 FF 
25874     CC E4 85 F1 | 	sub	objptr, ##5836
25878     01 26 06 F1 | 	add	local01, #1
2587c     01 00 00 FF 
25880     44 26 16 F2 | 	cmp	local01, ##580 wc
25884     50 FF 9F CD |  if_b	jmp	#LR__2900
25888                 | ' 
25888                 | ' repeat i from 580 to 599
25888     01 00 00 FF 
2588c     44 26 06 F6 | 	mov	local01, ##580
25890                 | LR__2901
25890                 | '    fastline(0,1023,i,write_background)   
25890     45 E4 05 F1 | 	add	objptr, #69
25894     F2 18 02 FB | 	rdlong	arg04, objptr
25898     45 E4 85 F1 | 	sub	objptr, #69
2589c     00 12 06 F6 | 	mov	arg01, #0
258a0     09 14 CE F9 | 	bmask	arg02, #9
258a4     13 17 02 F6 | 	mov	arg03, local01
258a8     90 EF BF FD | 	call	#_hg010b_spin2_fastline
258ac     01 26 06 F1 | 	add	local01, #1
258b0     01 00 00 FF 
258b4     58 26 16 F2 | 	cmp	local01, ##600 wc
258b8     D4 FF 9F CD |  if_b	jmp	#LR__2901
258bc                 | ' repeat i from 0 to 3
258bc     00 26 06 F6 | 	mov	local01, #0
258c0                 | LR__2902
258c0                 | '    fastline(0,1023,i,write_background)      
258c0     45 E4 05 F1 | 	add	objptr, #69
258c4     F2 18 02 FB | 	rdlong	arg04, objptr
258c8     45 E4 85 F1 | 	sub	objptr, #69
258cc     00 12 06 F6 | 	mov	arg01, #0
258d0     09 14 CE F9 | 	bmask	arg02, #9
258d4     13 17 02 F6 | 	mov	arg03, local01
258d8     60 EF BF FD | 	call	#_hg010b_spin2_fastline
258dc     01 26 06 F1 | 	add	local01, #1
258e0     04 26 56 F2 | 	cmps	local01, #4 wc
258e4     D8 FF 9F CD |  if_b	jmp	#LR__2902
258e8                 | ' 
258e8                 | ' repeat i from 0 to 35
258e8     00 26 06 F6 | 	mov	local01, #0
258ec                 | LR__2903
258ec     13 1B 02 F6 | 	mov	arg05, local01
258f0     01 1A 06 F1 | 	add	arg05, #1
258f4     1C 00 00 FF 
258f8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
258fc     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
25900     0B 1B 02 FD | 	qmul	arg05, arg03
25904                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
25904     F6 03 00 FF 
25908     00 12 06 F6 | 	mov	arg01, ##519168
2590c     F9 E4 05 F1 | 	add	objptr, #249
25910     F2 1A 02 FB | 	rdlong	arg05, objptr
25914     0D 13 82 F1 | 	sub	arg01, arg05
25918     F5 E4 85 F1 | 	sub	objptr, #245
2591c     F2 14 02 FB | 	rdlong	arg02, objptr
25920     1C 00 00 FF 
25924     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
25928     0B 00 00 FF 
2592c     C8 E4 05 F1 | 	add	objptr, ##5832
25930     18 1A 62 FD | 	getqx	arg05
25934     0D 15 02 F1 | 	add	arg02, arg05
25938     68 0A B0 FD | 	call	#_psram_spin2_read1
2593c     1C 00 00 FF 
25940     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
25944     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
25948     0B 27 02 FD | 	qmul	local01, arg03
2594c                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
2594c     F6 03 00 FF 
25950     00 12 06 F6 | 	mov	arg01, ##519168
25954     0A 00 00 FF 
25958     D3 E5 85 F1 | 	sub	objptr, ##5587
2595c     F2 1A 02 FB | 	rdlong	arg05, objptr
25960     0D 13 82 F1 | 	sub	arg01, arg05
25964     F5 E4 85 F1 | 	sub	objptr, #245
25968     F2 14 02 FB | 	rdlong	arg02, objptr
2596c     1C 00 00 FF 
25970     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
25974     0B 00 00 FF 
25978     C8 E4 05 F1 | 	add	objptr, ##5832
2597c     18 1A 62 FD | 	getqx	arg05
25980     0D 15 02 F1 | 	add	arg02, arg05
25984     B8 0A B0 FD | 	call	#_psram_spin2_write
25988     0B 00 00 FF 
2598c     CC E4 85 F1 | 	sub	objptr, ##5836
25990     01 26 06 F1 | 	add	local01, #1
25994     24 26 56 F2 | 	cmps	local01, #36 wc
25998     50 FF 9F CD |  if_b	jmp	#LR__2903
2599c                 | ' repeat i from 0 to timings[7]-1
2599c     00 26 06 F6 | 	mov	local01, #0
259a0     1C 00 00 FF 
259a4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
259a8     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
259ac     1C 00 00 FF 
259b0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
259b4     01 28 86 F1 | 	sub	local02, #1
259b8     00 28 56 F2 | 	cmps	local02, #0 wc
259bc     01 2A 86 F6 | 	negc	local03, #1
259c0     15 29 02 F1 | 	add	local02, local03
259c4                 | LR__2904
259c4                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
259c4     04 E4 05 F1 | 	add	objptr, #4
259c8     F2 12 02 FB | 	rdlong	arg01, objptr
259cc     1C 00 00 FF 
259d0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##14428
259d4     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
259d8     1C 00 00 FF 
259dc     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##14428
259e0     0D 19 02 F6 | 	mov	arg04, arg05
259e4     03 18 66 F0 | 	shl	arg04, #3
259e8     0D 19 02 F1 | 	add	arg04, arg05
259ec     02 18 66 F0 | 	shl	arg04, #2
259f0     13 19 02 F1 | 	add	arg04, local01
259f4     0C 13 02 F1 | 	add	arg01, arg04
259f8     20 14 06 F6 | 	mov	arg02, #32
259fc     01 16 06 F6 | 	mov	arg03, #1
25a00     00 18 06 F6 | 	mov	arg04, #0
25a04     01 1A 06 F6 | 	mov	arg05, #1
25a08     0B 00 00 FF 
25a0c     C8 E4 05 F1 | 	add	objptr, ##5832
25a10     C8 0A B0 FD | 	call	#_psram_spin2_fill
25a14     0B 00 00 FF 
25a18     CC E4 85 F1 | 	sub	objptr, ##5836
25a1c     15 27 02 F1 | 	add	local01, local03
25a20     14 27 0A F2 | 	cmp	local01, local02 wz
25a24     9C FF 9F 5D |  if_ne	jmp	#LR__2904
25a28     A7 F0 03 F6 | 	mov	ptra, fp
25a2c     B2 00 A0 FD | 	call	#popregs_
25a30                 | _hg010b_spin2_scrollup2_ret
25a30     2D 00 64 FD | 	ret
25a34                 | 
25a34                 | '  
25a34                 | ' ''----------- Scroll the screen one line down 
25a34                 | ' 
25a34                 | ' pub scrolldown(start=0) | i
25a34                 | _hg010b_spin2_scrolldown
25a34     05 4A 05 F6 | 	mov	COUNT_, #5
25a38     A8 00 A0 FD | 	call	#pushregs_
25a3c     09 27 02 F6 | 	mov	local01, arg01
25a40                 | ' 
25a40                 | ' repeat i from 579 to (start*16)+4
25a40     01 00 00 FF 
25a44     43 28 06 F6 | 	mov	local02, ##579
25a48     13 2B 02 F6 | 	mov	local03, local01
25a4c     04 2A 66 F0 | 	shl	local03, #4
25a50     04 2A 06 F1 | 	add	local03, #4
25a54     01 00 00 FF 
25a58     43 2A 56 F2 | 	cmps	local03, ##579 wc
25a5c     01 2C 86 F6 | 	negc	local04, #1
25a60     16 2F 02 F6 | 	mov	local05, local04
25a64     16 2B 02 F1 | 	add	local03, local04
25a68                 | LR__2910
25a68     F9 E4 05 F1 | 	add	objptr, #249
25a6c     F2 2C 02 FB | 	rdlong	local04, objptr
25a70     1C E4 85 F1 | 	sub	objptr, #28
25a74     F2 14 02 FB | 	rdlong	arg02, objptr
25a78     14 1B 02 F6 | 	mov	arg05, local02
25a7c     02 1A 66 F0 | 	shl	arg05, #2
25a80     14 E4 05 F1 | 	add	objptr, #20
25a84     F2 16 02 FB | 	rdlong	arg03, objptr
25a88     0B 1B 02 FD | 	qmul	arg05, arg03
25a8c                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
25a8c     F6 03 00 FF 
25a90     00 12 06 F6 | 	mov	arg01, ##519168
25a94     16 13 82 F1 | 	sub	arg01, local04
25a98     02 16 66 F0 | 	shl	arg03, #2
25a9c     0A 00 00 FF 
25aa0     DB E5 05 F1 | 	add	objptr, ##5595
25aa4     18 2C 62 FD | 	getqx	local04
25aa8     16 15 02 F1 | 	add	arg02, local04
25aac     F4 08 B0 FD | 	call	#_psram_spin2_read1
25ab0     0A 00 00 FF 
25ab4     D3 E5 85 F1 | 	sub	objptr, ##5587
25ab8     F2 2C 02 FB | 	rdlong	local04, objptr
25abc     1C E4 85 F1 | 	sub	objptr, #28
25ac0     F2 14 02 FB | 	rdlong	arg02, objptr
25ac4     14 1B 02 F6 | 	mov	arg05, local02
25ac8     10 1A 06 F1 | 	add	arg05, #16
25acc     02 1A 66 F0 | 	shl	arg05, #2
25ad0     14 E4 05 F1 | 	add	objptr, #20
25ad4     F2 16 02 FB | 	rdlong	arg03, objptr
25ad8     0B 1B 02 FD | 	qmul	arg05, arg03
25adc                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
25adc     F6 03 00 FF 
25ae0     00 12 06 F6 | 	mov	arg01, ##519168
25ae4     16 13 82 F1 | 	sub	arg01, local04
25ae8     02 16 66 F0 | 	shl	arg03, #2
25aec     0A 00 00 FF 
25af0     DB E5 05 F1 | 	add	objptr, ##5595
25af4     18 2C 62 FD | 	getqx	local04
25af8     16 15 02 F1 | 	add	arg02, local04
25afc     40 09 B0 FD | 	call	#_psram_spin2_write
25b00     0B 00 00 FF 
25b04     CC E4 85 F1 | 	sub	objptr, ##5836
25b08     17 29 02 F1 | 	add	local02, local05
25b0c     15 29 0A F2 | 	cmp	local02, local03 wz
25b10     54 FF 9F 5D |  if_ne	jmp	#LR__2910
25b14                 | ' 
25b14                 | ' repeat i from (start*16)+4 to (start*16)+19
25b14     13 29 02 F6 | 	mov	local02, local01
25b18     04 28 66 F0 | 	shl	local02, #4
25b1c     04 28 06 F1 | 	add	local02, #4
25b20     13 2F 02 F6 | 	mov	local05, local01
25b24     04 2E 66 F0 | 	shl	local05, #4
25b28     13 2E 06 F1 | 	add	local05, #19
25b2c     13 2D 02 F6 | 	mov	local04, local01
25b30     04 2C 66 F0 | 	shl	local04, #4
25b34     04 2C 06 F1 | 	add	local04, #4
25b38     16 2F 52 F2 | 	cmps	local05, local04 wc
25b3c     01 2C 86 F6 | 	negc	local04, #1
25b40     16 2B 02 F6 | 	mov	local03, local04
25b44     16 2F 02 F1 | 	add	local05, local04
25b48                 | LR__2911
25b48                 | '    fastline(0,1023,i,write_background)    
25b48     45 E4 05 F1 | 	add	objptr, #69
25b4c     F2 18 02 FB | 	rdlong	arg04, objptr
25b50     45 E4 85 F1 | 	sub	objptr, #69
25b54     00 12 06 F6 | 	mov	arg01, #0
25b58     09 14 CE F9 | 	bmask	arg02, #9
25b5c     14 17 02 F6 | 	mov	arg03, local02
25b60     D8 EC BF FD | 	call	#_hg010b_spin2_fastline
25b64     15 29 02 F1 | 	add	local02, local03
25b68     17 29 0A F2 | 	cmp	local02, local05 wz
25b6c     D8 FF 9F 5D |  if_ne	jmp	#LR__2911
25b70                 | '    
25b70                 | ' repeat i from 35 to start
25b70     23 28 06 F6 | 	mov	local02, #35
25b74     23 26 56 F2 | 	cmps	local01, #35 wc
25b78     01 2C 86 F6 | 	negc	local04, #1
25b7c     13 2F 02 F6 | 	mov	local05, local01
25b80     16 2F 02 F1 | 	add	local05, local04
25b84                 | LR__2912
25b84                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
25b84     F6 03 00 FF 
25b88     00 12 06 F6 | 	mov	arg01, ##519168
25b8c     F9 E4 05 F1 | 	add	objptr, #249
25b90     F2 2A 02 FB | 	rdlong	local03, objptr
25b94     15 13 82 F1 | 	sub	arg01, local03
25b98     F5 E4 85 F1 | 	sub	objptr, #245
25b9c     F2 14 02 FB | 	rdlong	arg02, objptr
25ba0     14 2B 02 F6 | 	mov	local03, local02
25ba4     07 2A 66 F0 | 	shl	local03, #7
25ba8     15 15 02 F1 | 	add	arg02, local03
25bac     80 16 06 F6 | 	mov	arg03, #128
25bb0     0B 00 00 FF 
25bb4     C8 E4 05 F1 | 	add	objptr, ##5832
25bb8     E8 07 B0 FD | 	call	#_psram_spin2_read1
25bbc                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
25bbc     F6 03 00 FF 
25bc0     00 12 06 F6 | 	mov	arg01, ##519168
25bc4     0A 00 00 FF 
25bc8     D3 E5 85 F1 | 	sub	objptr, ##5587
25bcc     F2 2A 02 FB | 	rdlong	local03, objptr
25bd0     15 13 82 F1 | 	sub	arg01, local03
25bd4     F5 E4 85 F1 | 	sub	objptr, #245
25bd8     F2 14 02 FB | 	rdlong	arg02, objptr
25bdc     14 2B 02 F6 | 	mov	local03, local02
25be0     01 2A 06 F1 | 	add	local03, #1
25be4     07 2A 66 F0 | 	shl	local03, #7
25be8     15 15 02 F1 | 	add	arg02, local03
25bec     80 16 06 F6 | 	mov	arg03, #128
25bf0     0B 00 00 FF 
25bf4     C8 E4 05 F1 | 	add	objptr, ##5832
25bf8     44 08 B0 FD | 	call	#_psram_spin2_write
25bfc     0B 00 00 FF 
25c00     CC E4 85 F1 | 	sub	objptr, ##5836
25c04     16 29 02 F1 | 	add	local02, local04
25c08     17 29 0A F2 | 	cmp	local02, local05 wz
25c0c     74 FF 9F 5D |  if_ne	jmp	#LR__2912
25c10                 | ' repeat i from 0 to 127
25c10     00 28 06 F6 | 	mov	local02, #0
25c14                 | LR__2913
25c14                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
25c14     04 E4 05 F1 | 	add	objptr, #4
25c18     F2 12 02 FB | 	rdlong	arg01, objptr
25c1c     13 2F 02 F6 | 	mov	local05, local01
25c20     07 2E 66 F0 | 	shl	local05, #7
25c24     17 13 02 F1 | 	add	arg01, local05
25c28     14 13 02 F1 | 	add	arg01, local02
25c2c     20 14 06 F6 | 	mov	arg02, #32
25c30     01 16 06 F6 | 	mov	arg03, #1
25c34     00 18 06 F6 | 	mov	arg04, #0
25c38     01 1A 06 F6 | 	mov	arg05, #1
25c3c     0B 00 00 FF 
25c40     C8 E4 05 F1 | 	add	objptr, ##5832
25c44     94 08 B0 FD | 	call	#_psram_spin2_fill
25c48     0B 00 00 FF 
25c4c     CC E4 85 F1 | 	sub	objptr, ##5836
25c50     01 28 06 F1 | 	add	local02, #1
25c54     80 28 56 F2 | 	cmps	local02, #128 wc
25c58     B8 FF 9F CD |  if_b	jmp	#LR__2913
25c5c     A7 F0 03 F6 | 	mov	ptra, fp
25c60     B2 00 A0 FD | 	call	#popregs_
25c64                 | _hg010b_spin2_scrolldown_ret
25c64     2D 00 64 FD | 	ret
25c68                 | 
25c68                 | ' 
25c68                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
25c68                 | ' 
25c68                 | ' pub crlf()
25c68                 | _hg010b_spin2_crlf
25c68                 | ' 
25c68                 | ' cursor_x:=leading_spaces*2
25c68     01 00 00 FF 
25c6c     B6 E4 05 F1 | 	add	objptr, ##694
25c70     F2 16 02 FB | 	rdlong	arg03, objptr
25c74     01 16 66 F0 | 	shl	arg03, #1
25c78     01 00 00 FF 
25c7c     7A E4 85 F1 | 	sub	objptr, ##634
25c80     F2 16 52 FC | 	wrword	arg03, objptr
25c84                 | ' cursor_y+=1
25c84     02 E4 05 F1 | 	add	objptr, #2
25c88     F2 16 C2 FA | 	rdbyte	arg03, objptr
25c8c     01 16 06 F1 | 	add	arg03, #1
25c90     F2 16 42 FC | 	wrbyte	arg03, objptr
25c94                 | ' if cursor_y>st_lines-1
25c94     C3 E4 05 F1 | 	add	objptr, #195
25c98     F2 16 02 FB | 	rdlong	arg03, objptr
25c9c     01 16 86 F1 | 	sub	arg03, #1
25ca0     C3 E4 85 F1 | 	sub	objptr, #195
25ca4     F2 14 C2 FA | 	rdbyte	arg02, objptr
25ca8     3E E4 85 F1 | 	sub	objptr, #62
25cac     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
25cb0     2C 00 90 ED |  if_be	jmp	#LR__2920
25cb4                 | '   scrollup2()
25cb4     00 12 06 F6 | 	mov	arg01, #0
25cb8     01 00 00 FF 
25cbc     58 14 06 F6 | 	mov	arg02, ##600
25cc0     10 16 06 F6 | 	mov	arg03, #16
25cc4     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
25cc8                 | '   cursor_y:=st_lines-1
25cc8     01 E5 05 F1 | 	add	objptr, #257
25ccc     F2 16 02 FB | 	rdlong	arg03, objptr
25cd0     01 16 86 F1 | 	sub	arg03, #1
25cd4     C3 E4 85 F1 | 	sub	objptr, #195
25cd8     F2 16 42 FC | 	wrbyte	arg03, objptr
25cdc     3E E4 85 F1 | 	sub	objptr, #62
25ce0                 | LR__2920
25ce0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
25ce0     3C E4 05 F1 | 	add	objptr, #60
25ce4     F2 14 E2 FA | 	rdword	arg02, objptr
25ce8     02 14 66 F0 | 	shl	arg02, #2
25cec     02 E4 05 F1 | 	add	objptr, #2
25cf0     F2 16 C2 FA | 	rdbyte	arg03, objptr
25cf4     3E E4 85 F1 | 	sub	objptr, #62
25cf8     04 16 66 F0 | 	shl	arg03, #4
25cfc     04 16 06 F1 | 	add	arg03, #4
25d00     11 12 06 F6 | 	mov	arg01, #17
25d04     E8 E8 BF FD | 	call	#_hg010b_spin2_setspritepos
25d08                 | _hg010b_spin2_crlf_ret
25d08     2D 00 64 FD | 	ret
25d0c                 | 
25d0c                 | ' 
25d0c                 | ' 
25d0c                 | ' '*************************************************************************
25d0c                 | ' '                                                                        *
25d0c                 | ' '  Conversions                                                           *
25d0c                 | ' '                                                                        *
25d0c                 | ' '*************************************************************************
25d0c                 | ' 
25d0c                 | ' ''---------- Convert a integer to dec string, return a pointer
25d0c                 | ' 
25d0c                 | ' pub inttostr(i):result |q,pos,k,j
25d0c                 | _hg010b_spin2_inttostr
25d0c     03 4A 05 F6 | 	mov	COUNT_, #3
25d10     A8 00 A0 FD | 	call	#pushregs_
25d14     09 27 0A F6 | 	mov	local01, arg01 wz
25d18                 | ' 
25d18                 | ' j:=i
25d18                 | ' pos:=10
25d18     0A 28 06 F6 | 	mov	local02, #10
25d1c                 | ' k:=0
25d1c     00 2A 06 F6 | 	mov	local03, #0
25d20                 | ' 
25d20                 | ' if (j==0)
25d20     18 00 90 5D |  if_ne	jmp	#LR__2930
25d24                 | '   n_string[0]:=48
25d24     4D E4 05 F1 | 	add	objptr, #77
25d28     F2 60 48 FC | 	wrbyte	#48, objptr
25d2c                 | '   n_string[1]:=0
25d2c     01 E4 05 F1 | 	add	objptr, #1
25d30     F2 00 48 FC | 	wrbyte	#0, objptr
25d34     4E E4 85 F1 | 	sub	objptr, #78
25d38     C4 00 90 FD | 	jmp	#LR__2937
25d3c                 | LR__2930
25d3c                 | ' 
25d3c                 | ' else
25d3c                 | '   if (j<0)
25d3c     13 27 52 F6 | 	abs	local01, local01 wc
25d40                 | '     j:=0-j
25d40                 | '     k:=45
25d40     2D 2A 06 C6 |  if_b	mov	local03, #45
25d44                 | ' 
25d44                 | '   n_string[11]:=0
25d44     58 E4 05 F1 | 	add	objptr, #88
25d48     F2 00 48 FC | 	wrbyte	#0, objptr
25d4c     58 E4 85 F1 | 	sub	objptr, #88
25d50     97 24 48 FB | 	callpa	#(@LR__2932-@LR__2931)>>2,fcache_load_ptr_
25d54                 | '   repeat while (pos>-1)
25d54                 | LR__2931
25d54     00 28 56 F2 | 	cmps	local02, #0 wc
25d58     40 00 90 CD |  if_b	jmp	#LR__2933
25d5c     13 FB 51 F6 | 	abs	result1, local01 wc
25d60     0A FA 15 FD | 	qdiv	result1, #10
25d64                 | '     q:=j//10
25d64     19 FA 61 FD | 	getqy	result1
25d68     FD FA 81 F6 | 	negc	result1, result1
25d6c     13 27 52 F6 | 	abs	local01, local01 wc
25d70     0A 26 16 FD | 	qdiv	local01, #10
25d74                 | '     q:=48+q
25d74     30 FA 05 F1 | 	add	result1, #48
25d78                 | '     n_string[pos]:=q
25d78     14 27 02 F6 | 	mov	local01, local02
25d7c     4D E4 05 F1 | 	add	objptr, #77
25d80     F2 26 02 F1 | 	add	local01, objptr
25d84     13 FB 41 FC | 	wrbyte	result1, local01
25d88                 | '     j:=j/10
25d88     4D E4 85 F1 | 	sub	objptr, #77
25d8c                 | '     pos-=1
25d8c     01 28 86 F1 | 	sub	local02, #1
25d90     18 26 62 FD | 	getqx	local01
25d94     13 27 82 F6 | 	negc	local01, local01
25d98     B8 FF 9F FD | 	jmp	#LR__2931
25d9c                 | LR__2932
25d9c                 | LR__2933
25d9c                 | '   repeat while n_string[0]==48
25d9c                 | LR__2934
25d9c     4D E4 05 F1 | 	add	objptr, #77
25da0     F2 16 C2 FA | 	rdbyte	arg03, objptr
25da4     4D E4 85 F1 | 	sub	objptr, #77
25da8     30 16 0E F2 | 	cmp	arg03, #48 wz
25dac     20 00 90 5D |  if_ne	jmp	#LR__2935
25db0                 | '     bytemove(@n_string,@n_string+1,12)
25db0     4D E4 05 F1 | 	add	objptr, #77
25db4     F2 12 02 F6 | 	mov	arg01, objptr
25db8     F2 14 02 F6 | 	mov	arg02, objptr
25dbc     4D E4 85 F1 | 	sub	objptr, #77
25dc0     01 14 06 F1 | 	add	arg02, #1
25dc4     0C 16 06 F6 | 	mov	arg03, #12
25dc8     80 11 B0 FD | 	call	#__system____builtin_memmove
25dcc     CC FF 9F FD | 	jmp	#LR__2934
25dd0                 | LR__2935
25dd0                 | ' 
25dd0                 | '   if k==45
25dd0     2D 2A 0E F2 | 	cmp	local03, #45 wz
25dd4     28 00 90 5D |  if_ne	jmp	#LR__2936
25dd8                 | '      bytemove(@n_string+1,@n_string,12)
25dd8     4D E4 05 F1 | 	add	objptr, #77
25ddc     F2 12 02 F6 | 	mov	arg01, objptr
25de0     01 12 06 F1 | 	add	arg01, #1
25de4     F2 14 02 F6 | 	mov	arg02, objptr
25de8     4D E4 85 F1 | 	sub	objptr, #77
25dec     0C 16 06 F6 | 	mov	arg03, #12
25df0     58 11 B0 FD | 	call	#__system____builtin_memmove
25df4                 | '      n_string[0]:=k
25df4     4D E4 05 F1 | 	add	objptr, #77
25df8     F2 2A 42 FC | 	wrbyte	local03, objptr
25dfc     4D E4 85 F1 | 	sub	objptr, #77
25e00                 | LR__2936
25e00                 | LR__2937
25e00                 | ' 
25e00                 | ' q:=@n_string
25e00     4D E4 05 F1 | 	add	objptr, #77
25e04     F2 FA 01 F6 | 	mov	result1, objptr
25e08     4D E4 85 F1 | 	sub	objptr, #77
25e0c                 | ' return q
25e0c     A7 F0 03 F6 | 	mov	ptra, fp
25e10     B2 00 A0 FD | 	call	#popregs_
25e14                 | _hg010b_spin2_inttostr_ret
25e14     2D 00 64 FD | 	ret
25e18                 | 
25e18                 | ' 
25e18                 | ' '**********************************************************************************
25e18                 | ' '
25e18                 | ' '        Blitting
25e18                 | ' '
25e18                 | ' '**********************************************************************************
25e18                 | ' 
25e18                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
25e18                 | _hg010b_spin2_blit
25e18     18 4A 05 F6 | 	mov	COUNT_, #24
25e1c     A8 00 A0 FD | 	call	#pushregs_
25e20     09 27 02 F6 | 	mov	local01, arg01
25e24     0A 29 02 F6 | 	mov	local02, arg02
25e28     0B 2B 02 F6 | 	mov	local03, arg03
25e2c     0C 2D 02 F6 | 	mov	local04, arg04
25e30     0D 2F 02 F6 | 	mov	local05, arg05
25e34     0E 31 02 F6 | 	mov	local06, arg06
25e38     0F 33 02 F6 | 	mov	local07, arg07
25e3c     10 35 02 F6 | 	mov	local08, arg08
25e40     11 37 02 F6 | 	mov	local09, arg09
25e44     12 39 02 F6 | 	mov	local10, arg10
25e48                 | ' 
25e48                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
25e48     00 04 00 FF 
25e4c     00 26 56 F2 | 	cmps	local01, ##524288 wc
25e50     00 04 00 3F 
25e54     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
25e58     7C 01 90 CD |  if_b	jmp	#LR__2944
25e5c     16 29 5A F2 | 	cmps	local02, local04 wcz
25e60     14 3B 02 16 |  if_a	mov	local11, local02
25e64     16 29 02 16 |  if_a	mov	local02, local04
25e68     1D 2D 02 16 |  if_a	mov	local04, local11
25e6c     17 2B 5A F2 | 	cmps	local03, local05 wcz
25e70     15 3B 02 16 |  if_a	mov	local11, local03
25e74     17 2B 02 16 |  if_a	mov	local03, local05
25e78     18 2B 02 FD | 	qmul	local03, local06
25e7c                 | '   if x1a>x2a
25e7c                 | '     x1a,x2a:=x2a,x1a
25e7c                 | '   if y1a>y2a
25e7c                 | '     y1a,y2a:=y2a,y1a  
25e7c     1D 2F 02 16 |  if_a	mov	local05, local11
25e80                 | ' 
25e80                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
25e80     19 3D 02 F6 | 	mov	local12, local07
25e84     14 3D 02 F1 | 	add	local12, local02
25e88     18 3A 62 FD | 	getqx	local11
25e8c     1C 37 02 FD | 	qmul	local09, local10
25e90     1D 3D 02 F1 | 	add	local12, local11
25e94     13 3F 02 F6 | 	mov	local13, local01
25e98     1A 3F 02 F1 | 	add	local13, local08
25e9c     18 3A 62 FD | 	getqx	local11
25ea0     1D 3F 02 F1 | 	add	local13, local11
25ea4     1F 3D 5A F2 | 	cmps	local12, local13 wcz
25ea8     98 00 90 ED |  if_be	jmp	#LR__2941
25eac                 | '     repeat y from y1a to y2a
25eac     15 41 02 F6 | 	mov	local14, local03
25eb0     15 2F 52 F2 | 	cmps	local05, local03 wc
25eb4     01 42 86 F6 | 	negc	local15, #1
25eb8     17 45 02 F6 | 	mov	local16, local05
25ebc     21 45 02 F1 | 	add	local16, local15
25ec0     0B 00 00 FF 
25ec4     CC E4 05 F1 | 	add	objptr, ##5836
25ec8                 | LR__2940
25ec8     18 41 02 FD | 	qmul	local14, local06
25ecc                 | '   '    writeln(string("I am here"))
25ecc                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
25ecc     13 15 02 F6 | 	mov	arg02, local01
25ed0     16 17 02 F6 | 	mov	arg03, local04
25ed4     14 17 82 F1 | 	sub	arg03, local02
25ed8     01 16 06 F1 | 	add	arg03, #1
25edc     F6 03 00 FF 
25ee0     00 12 06 F6 | 	mov	arg01, ##519168
25ee4     18 3E 62 FD | 	getqx	local13
25ee8     1F 15 02 F1 | 	add	arg02, local13
25eec     14 15 02 F1 | 	add	arg02, local02
25ef0     B0 04 B0 FD | 	call	#_psram_spin2_read1
25ef4     1B 3F 02 F6 | 	mov	local13, local09
25ef8     15 3F 82 F1 | 	sub	local13, local03
25efc     20 3F 02 F1 | 	add	local13, local14
25f00     1C 3F 02 FD | 	qmul	local13, local10
25f04                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
25f04     19 15 02 F6 | 	mov	arg02, local07
25f08     16 17 02 F6 | 	mov	arg03, local04
25f0c     14 17 82 F1 | 	sub	arg03, local02
25f10     01 16 06 F1 | 	add	arg03, #1
25f14     F6 03 00 FF 
25f18     00 12 06 F6 | 	mov	arg01, ##519168
25f1c     18 3E 62 FD | 	getqx	local13
25f20     1F 15 02 F1 | 	add	arg02, local13
25f24     1A 15 02 F1 | 	add	arg02, local08
25f28     14 05 B0 FD | 	call	#_psram_spin2_write
25f2c     21 41 02 F1 | 	add	local14, local15
25f30     22 41 0A F2 | 	cmp	local14, local16 wz
25f34     90 FF 9F 5D |  if_ne	jmp	#LR__2940
25f38     0B 00 00 FF 
25f3c     CC E4 85 F1 | 	sub	objptr, ##5836
25f40     94 00 90 FD | 	jmp	#LR__2943
25f44                 | LR__2941
25f44                 | '   else
25f44                 | '     repeat y from y2a to y1a
25f44     17 41 02 F6 | 	mov	local14, local05
25f48     17 2B 52 F2 | 	cmps	local03, local05 wc
25f4c     01 46 86 F6 | 	negc	local17, #1
25f50     15 49 02 F6 | 	mov	local18, local03
25f54     23 49 02 F1 | 	add	local18, local17
25f58     0B 00 00 FF 
25f5c     CC E4 05 F1 | 	add	objptr, ##5836
25f60                 | LR__2942
25f60     18 41 02 FD | 	qmul	local14, local06
25f64                 | '  '     writeln(string("I am there"))
25f64                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
25f64     13 15 02 F6 | 	mov	arg02, local01
25f68     16 17 02 F6 | 	mov	arg03, local04
25f6c     14 17 82 F1 | 	sub	arg03, local02
25f70     01 16 06 F1 | 	add	arg03, #1
25f74     F6 03 00 FF 
25f78     00 12 06 F6 | 	mov	arg01, ##519168
25f7c     18 44 62 FD | 	getqx	local16
25f80     22 15 02 F1 | 	add	arg02, local16
25f84     14 15 02 F1 | 	add	arg02, local02
25f88     18 04 B0 FD | 	call	#_psram_spin2_read1
25f8c     1B 45 02 F6 | 	mov	local16, local09
25f90     15 45 82 F1 | 	sub	local16, local03
25f94     20 45 02 F1 | 	add	local16, local14
25f98     1C 45 02 FD | 	qmul	local16, local10
25f9c                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
25f9c     19 15 02 F6 | 	mov	arg02, local07
25fa0     16 17 02 F6 | 	mov	arg03, local04
25fa4     14 17 82 F1 | 	sub	arg03, local02
25fa8     01 16 06 F1 | 	add	arg03, #1
25fac     F6 03 00 FF 
25fb0     00 12 06 F6 | 	mov	arg01, ##519168
25fb4     18 44 62 FD | 	getqx	local16
25fb8     22 15 02 F1 | 	add	arg02, local16
25fbc     1A 15 02 F1 | 	add	arg02, local08
25fc0     7C 04 B0 FD | 	call	#_psram_spin2_write
25fc4     23 41 02 F1 | 	add	local14, local17
25fc8     24 41 0A F2 | 	cmp	local14, local18 wz
25fcc     90 FF 9F 5D |  if_ne	jmp	#LR__2942
25fd0     0B 00 00 FF 
25fd4     CC E4 85 F1 | 	sub	objptr, ##5836
25fd8                 | LR__2943
25fd8                 | LR__2944
25fd8                 | '     
25fd8                 | ' if ((f>=$80000) && (t<$80000)) 
25fd8     00 04 00 FF 
25fdc     00 26 56 F2 | 	cmps	local01, ##524288 wc
25fe0     80 00 90 CD |  if_b	jmp	#LR__2946
25fe4     00 04 00 FF 
25fe8     00 32 56 F2 | 	cmps	local07, ##524288 wc
25fec     74 00 90 3D |  if_ae	jmp	#LR__2946
25ff0                 | '   repeat y from y1a to y2a
25ff0     15 41 02 F6 | 	mov	local14, local03
25ff4     15 2F 52 F2 | 	cmps	local05, local03 wc
25ff8     01 4A 86 F6 | 	negc	local19, #1
25ffc     17 4D 02 F6 | 	mov	local20, local05
26000     25 4D 02 F1 | 	add	local20, local19
26004     0B 00 00 FF 
26008     CC E4 05 F1 | 	add	objptr, ##5836
2600c                 | LR__2945
2600c     1B 49 02 F6 | 	mov	local18, local09
26010     15 49 82 F1 | 	sub	local18, local03
26014     20 49 02 F1 | 	add	local18, local14
26018     1C 49 02 FD | 	qmul	local18, local10
2601c                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
2601c     19 13 02 F6 | 	mov	arg01, local07
26020     18 48 62 FD | 	getqx	local18
26024     18 41 02 FD | 	qmul	local14, local06
26028     24 13 02 F1 | 	add	arg01, local18
2602c     1A 13 02 F1 | 	add	arg01, local08
26030     13 15 02 F6 | 	mov	arg02, local01
26034     16 17 02 F6 | 	mov	arg03, local04
26038     14 17 82 F1 | 	sub	arg03, local02
2603c     01 16 06 F1 | 	add	arg03, #1
26040     18 48 62 FD | 	getqx	local18
26044     24 15 02 F1 | 	add	arg02, local18
26048     14 15 02 F1 | 	add	arg02, local02
2604c     54 03 B0 FD | 	call	#_psram_spin2_read1
26050     25 41 02 F1 | 	add	local14, local19
26054     26 41 0A F2 | 	cmp	local14, local20 wz
26058     B0 FF 9F 5D |  if_ne	jmp	#LR__2945
2605c     0B 00 00 FF 
26060     CC E4 85 F1 | 	sub	objptr, ##5836
26064                 | LR__2946
26064                 | '     
26064                 | ' if ((f<$80000) && (t>=$80000)) 
26064     00 04 00 FF 
26068     00 26 56 F2 | 	cmps	local01, ##524288 wc
2606c     84 00 90 3D |  if_ae	jmp	#LR__2948
26070     00 04 00 FF 
26074     00 32 56 F2 | 	cmps	local07, ##524288 wc
26078     78 00 90 CD |  if_b	jmp	#LR__2948
2607c                 | '   t:=t & $FFFFFFF
2607c     7C 32 06 F4 | 	bitl	local07, #124
26080                 | '   repeat y from y1a to y2a
26080     15 41 02 F6 | 	mov	local14, local03
26084     15 2F 52 F2 | 	cmps	local05, local03 wc
26088     01 4E 86 F6 | 	negc	local21, #1
2608c     17 51 02 F6 | 	mov	local22, local05
26090     27 51 02 F1 | 	add	local22, local21
26094     0B 00 00 FF 
26098     CC E4 05 F1 | 	add	objptr, ##5836
2609c                 | LR__2947
2609c     18 41 02 FD | 	qmul	local14, local06
260a0                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
260a0     13 13 02 F6 | 	mov	arg01, local01
260a4     1B 4D 02 F6 | 	mov	local20, local09
260a8     15 4D 82 F1 | 	sub	local20, local03
260ac     20 4D 02 F1 | 	add	local20, local14
260b0     18 4A 62 FD | 	getqx	local19
260b4     1C 4D 02 FD | 	qmul	local20, local10
260b8     25 13 02 F1 | 	add	arg01, local19
260bc     14 13 02 F1 | 	add	arg01, local02
260c0     19 15 02 F6 | 	mov	arg02, local07
260c4     16 17 02 F6 | 	mov	arg03, local04
260c8     14 17 82 F1 | 	sub	arg03, local02
260cc     01 16 06 F1 | 	add	arg03, #1
260d0     18 4C 62 FD | 	getqx	local20
260d4     26 15 02 F1 | 	add	arg02, local20
260d8     1A 15 02 F1 | 	add	arg02, local08
260dc     60 03 B0 FD | 	call	#_psram_spin2_write
260e0     27 41 02 F1 | 	add	local14, local21
260e4     28 41 0A F2 | 	cmp	local14, local22 wz
260e8     B0 FF 9F 5D |  if_ne	jmp	#LR__2947
260ec     0B 00 00 FF 
260f0     CC E4 85 F1 | 	sub	objptr, ##5836
260f4                 | LR__2948
260f4                 | '     
260f4                 | ' if ((f<$80000) && (t<$80000)) 
260f4     00 04 00 FF 
260f8     00 26 56 F2 | 	cmps	local01, ##524288 wc
260fc     00 04 00 CF 
26100     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
26104     64 00 90 3D |  if_ae	jmp	#LR__2950
26108                 | '   repeat y from y1a to y2a
26108     15 41 02 F6 | 	mov	local14, local03
2610c     15 2F 52 F2 | 	cmps	local05, local03 wc
26110     01 52 86 F6 | 	negc	local23, #1
26114     17 55 02 F6 | 	mov	local24, local05
26118     29 55 02 F1 | 	add	local24, local23
2611c                 | LR__2949
2611c     18 41 02 FD | 	qmul	local14, local06
26120                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
26120     13 13 02 F6 | 	mov	arg01, local01
26124     1B 51 02 F6 | 	mov	local22, local09
26128     15 51 82 F1 | 	sub	local22, local03
2612c     20 51 02 F1 | 	add	local22, local14
26130     18 4E 62 FD | 	getqx	local21
26134     1C 51 02 FD | 	qmul	local22, local10
26138     27 13 02 F1 | 	add	arg01, local21
2613c     14 13 02 F1 | 	add	arg01, local02
26140     19 15 02 F6 | 	mov	arg02, local07
26144     16 17 02 F6 | 	mov	arg03, local04
26148     14 17 82 F1 | 	sub	arg03, local02
2614c     01 16 06 F1 | 	add	arg03, #1
26150     18 50 62 FD | 	getqx	local22
26154     28 15 02 F1 | 	add	arg02, local22
26158     1A 15 02 F1 | 	add	arg02, local08
2615c     EC 0D B0 FD | 	call	#__system____builtin_memmove
26160     29 41 02 F1 | 	add	local14, local23
26164     2A 41 0A F2 | 	cmp	local14, local24 wz
26168     B0 FF 9F 5D |  if_ne	jmp	#LR__2949
2616c                 | LR__2950
2616c     A7 F0 03 F6 | 	mov	ptra, fp
26170     B2 00 A0 FD | 	call	#popregs_
26174                 | _hg010b_spin2_blit_ret
26174     2D 00 64 FD | 	ret
26178                 | 
26178                 | ' 
26178                 | ' '..............................................................................
26178                 | ' 
26178                 | ' {{
26178                 | ' }}
26178                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
26178                 | _psram_spin2_startx
26178     04 4A 05 F6 | 	mov	COUNT_, #4
2617c     A8 00 A0 FD | 	call	#pushregs_
26180     09 27 02 F6 | 	mov	local01, arg01
26184     0B 29 02 F6 | 	mov	local02, arg03
26188     0C 2B 02 F6 | 	mov	local03, arg04
2618c                 | '     stop() ' restart driver if required
2618c     54 01 B0 FD | 	call	#_psram_spin2_stop
26190     00 26 0E F2 | 	cmp	local01, #0 wz
26194     14 26 06 AB |  if_e	rdlong	local01, #20
26198     13 15 52 F6 | 	abs	arg02, local01 wc
2619c     A1 07 00 FF 
261a0     40 14 16 FD | 	qdiv	arg02, ##1000000
261a4                 | ' 
261a4                 | '     ' use current frequency if none specified
261a4                 | ' 
261a4                 | '     if freq == 0 
261a4                 | '         freq := clkfreq 
261a4                 | ' 
261a4                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
261a4                 | ' 
261a4                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
261a4                 | '     if burst < 0
261a4                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
261a4     18 14 62 FD | 	getqx	arg02
261a8     0A 19 82 F6 | 	negc	arg04, arg02
261ac     03 18 66 F0 | 	shl	arg04, #3
261b0     84 18 86 F1 | 	sub	arg04, #132
261b4     04 18 46 F0 | 	shr	arg04, #4
261b8     04 18 66 F0 | 	shl	arg04, #4
261bc     00 18 56 F2 | 	cmps	arg04, #0 wc
261c0     0E FA 65 C6 |  if_b	neg	result1, #14
261c4     10 01 90 CD |  if_b	jmp	#LR__2963
261c8                 | ' 
261c8                 | '     ' compute the input delay
261c8                 | ' 
261c8                 | '     if delay <= 0
261c8     01 28 56 F2 | 	cmps	local02, #1 wc
261cc     10 00 90 3D |  if_ae	jmp	#LR__2960
261d0                 | '         delay := lookupDelay(freq)
261d0     13 13 02 F6 | 	mov	arg01, local01
261d4     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
261d8     FD 28 02 F6 | 	mov	local02, result1
261dc     04 00 90 FD | 	jmp	#LR__2961
261e0                 | LR__2960
261e0                 | '     else
261e0                 | '         delay <#= $f ' limit to 15
261e0     0F 28 66 F3 | 	fles	local02, #15
261e4                 | LR__2961
261e4                 | ' 
261e4                 | '     ' create our lock
261e4                 | ' 
261e4                 | '     driverlock := LOCKNEW()  
261e4     00 FA 05 F6 | 	mov	result1, #0
261e8     04 FA 61 FD | 	locknew	result1
261ec     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
261f0     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
261f4                 | '     if driverlock == -1
261f4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
261f8     FF FF 7F FF 
261fc     FF FB 0D F2 | 	cmp	result1, ##-1 wz
26200                 | '         return ERR_NO_LOCK
26200     1A FA 65 A6 |  if_e	neg	result1, #26
26204     D0 00 90 AD |  if_e	jmp	#LR__2963
26208                 | ' 
26208                 | '     ' patch in the proper data and HUB addresses to the startup structure
26208                 | ' 
26208                 | '     long[@startupData][0]:=clkfreq
26208     14 26 06 FB | 	rdlong	local01, #20
2620c     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
26210     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
26214                 | ' '    long[@startupData][1]:=$1000_0000
26214                 | '     long[@startupData][5]:=@deviceData
26214     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
26218     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
2621c     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
26220     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
26224     14 14 06 F1 | 	add	arg02, #20
26228     0A 27 62 FC | 	wrlong	local01, arg02
2622c                 | '     long[@startupData][6]:=@qosData
2622c     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
26230     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
26234     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
26238     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
2623c     18 14 06 F1 | 	add	arg02, #24
26240     0A 27 62 FC | 	wrlong	local01, arg02
26244                 | '     long[@startupData][7]:=$7FF00
26244     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
26248     1C 26 06 F1 | 	add	local01, #28
2624c     FF 03 80 FF 
26250     13 01 6A FC | 	wrlong	##524032, local01
26254                 | ' 
26254                 | '     ' setup some default bank and QoS parameter values
26254                 | ' 
26254                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
26254     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
26258     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
2625c     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
26260     10 18 66 F0 | 	shl	arg04, #16
26264     0C 28 66 F0 | 	shl	local02, #12
26268     14 19 42 F5 | 	or	arg04, local02
2626c     18 18 46 F5 | 	or	arg04, #24
26270     0C 15 02 F6 | 	mov	arg02, arg04
26274     02 16 06 F6 | 	mov	arg03, #2
26278     A0 00 A0 FD | 	call	#\builtin_longfill_
2627c                 | '     longfill(@qosData, $FFFF0000, 8)
2627c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
26280     07 16 06 F6 | 	mov	arg03, #7
26284     28 16 62 FD | 	setq	arg03
26288     80 FF FF FF 
2628c     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
26290                 | ' 
26290                 | '     ' get the address of the PSRAM memory driver so we can start it
26290                 | ' 
26290                 | '     driverAddr:= driver.getDriverAddr()
26290                 | '     return @driver_start
26290     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
26294     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
26298     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
2629c                 | ' 
2629c                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
2629c                 | ' 
2629c                 | '     if desiredcog < 0
2629c     00 2A 56 F2 | 	cmps	local03, #0 wc
262a0                 | '         desiredcog := NEWCOG
262a0     10 2A 06 C6 |  if_b	mov	local03, #16
262a4                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
262a4     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
262a8     15 2D 02 F6 | 	mov	local04, local03
262ac     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
262b0     0A 2D F2 FC | 	coginit	local04, arg02 wc
262b4     01 2C 66 C6 |  if_b	neg	local04, #1
262b8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
262bc     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
262c0                 | '     repeat until long[@startupData] == 0 
262c0     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
262c4                 | LR__2962
262c4     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
262c8     F8 FF 9F 5D |  if_ne	jmp	#LR__2962
262cc                 | ' 
262cc                 | '     return drivercog
262cc     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
262d0     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
262d4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
262d8                 | LR__2963
262d8     A7 F0 03 F6 | 	mov	ptra, fp
262dc     B2 00 A0 FD | 	call	#popregs_
262e0                 | _psram_spin2_startx_ret
262e0     2D 00 64 FD | 	ret
262e4                 | 
262e4                 | ' 
262e4                 | ' '..............................................................................
262e4                 | ' 
262e4                 | ' {{
262e4                 | ' }}
262e4                 | ' PUB stop() : i
262e4                 | _psram_spin2_stop
262e4     00 00 06 F6 | 	mov	_var01, #0
262e8                 | '     if drivercog <> -1
262e8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
262ec     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
262f0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
262f4     FF FF 7F FF 
262f8     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
262fc     70 00 90 AD |  if_e	jmp	#LR__2973
26300                 | '         cogstop(drivercog) ' a rather brutal stop
26300     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26304     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
26308     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2630c     03 12 62 FD | 	cogstop	arg01
26310     97 26 48 FB | 	callpa	#(@LR__2972-@LR__2970)>>2,fcache_load_ptr_
26314                 | '         repeat i from 0 to 7
26314                 | LR__2970
26314                 | '             if long[$7FF00][i*3] < 0
26314     00 FB 01 F6 | 	mov	result1, _var01
26318     01 FA 65 F0 | 	shl	result1, #1
2631c     00 FB 01 F1 | 	add	result1, _var01
26320     02 FA 65 F0 | 	shl	result1, #2
26324     FF 03 00 FF 
26328     00 FB 05 F1 | 	add	result1, ##524032
2632c     FD FA 01 FB | 	rdlong	result1, result1
26330     00 FA 55 F2 | 	cmps	result1, #0 wc
26334     1C 00 90 3D |  if_ae	jmp	#LR__2971
26338                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
26338     00 FB 01 F6 | 	mov	result1, _var01
2633c     01 FA 65 F0 | 	shl	result1, #1
26340     00 FB 01 F1 | 	add	result1, _var01
26344     02 FA 65 F0 | 	shl	result1, #2
26348     FF 03 00 FF 
2634c     00 FB 05 F1 | 	add	result1, ##524032
26350     FD 20 68 FC | 	wrlong	#16, result1
26354                 | LR__2971
26354     01 00 06 F1 | 	add	_var01, #1
26358     08 00 56 F2 | 	cmps	_var01, #8 wc
2635c     B4 FF 9F CD |  if_b	jmp	#LR__2970
26360                 | LR__2972
26360                 | '         drivercog := -1
26360     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26364     FF FF FF FF 
26368     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
2636c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26370                 | LR__2973
26370                 | '     if driverlock <> -1
26370     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
26374     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
26378     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
2637c     FF FF 7F FF 
26380     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
26384                 | '         LOCKRET(driverlock)
26384     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
26388     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
2638c     05 12 62 5D |  if_ne	lockret	arg01
26390                 | '         driverlock := -1
26390     FF FF FF 5F 
26394     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
26398     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
2639c     00 FB 01 F6 | 	mov	result1, _var01
263a0                 | _psram_spin2_stop_ret
263a0     2D 00 64 FD | 	ret
263a4                 | 
263a4                 | ' 
263a4                 | ' '..............................................................................
263a4                 | ' 
263a4                 | ' {{
263a4                 | ' }}
263a4                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
263a4                 | _psram_spin2_read1
263a4                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
263a4                 | '     if drivercog == -1 ' driver must be running
263a4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
263a8     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
263ac     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
263b0     FF FF 7F FF 
263b4     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
263b8                 | '         return ERR_INACTIVE
263b8     0F FA 65 A6 |  if_e	neg	result1, #15
263bc     7C 00 90 AD |  if_e	jmp	#LR__2981
263c0                 | '     if count == 0 ' don't even bother reading
263c0     00 16 0E F2 | 	cmp	arg03, #0 wz
263c4                 | '         return 0
263c4     00 FA 05 A6 |  if_e	mov	result1, #0
263c8     70 00 90 AD |  if_e	jmp	#LR__2981
263cc                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
263cc     00 FA 05 F6 | 	mov	result1, #0
263d0     01 FA 61 FD | 	cogid	result1
263d4     FD 00 02 F6 | 	mov	_var01, result1
263d8     01 00 66 F0 | 	shl	_var01, #1
263dc     FD 00 02 F1 | 	add	_var01, result1
263e0     02 00 66 F0 | 	shl	_var01, #2
263e4     FF 03 00 FF 
263e8     00 03 06 F6 | 	mov	_var02, ##524032
263ec     00 03 02 F1 | 	add	_var02, _var01
263f0                 | '     if long[mailbox] < 0
263f0     01 01 02 FB | 	rdlong	_var01, _var02
263f4     00 00 56 F2 | 	cmps	_var01, #0 wc
263f8                 | '         return ERR_MAILBOX_BUSY
263f8     1C FA 65 C6 |  if_b	neg	result1, #28
263fc     3C 00 90 CD |  if_b	jmp	#LR__2981
26400                 | '     long[mailbox][2] := count
26400     08 02 06 F1 | 	add	_var02, #8
26404     01 17 62 FC | 	wrlong	arg03, _var02
26408                 | '     long[mailbox][1] := dstHubAddr
26408     04 02 86 F1 | 	sub	_var02, #4
2640c     01 13 62 FC | 	wrlong	arg01, _var02
26410     04 02 86 F1 | 	sub	_var02, #4
26414                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
26414     0A 05 02 F6 | 	mov	_var03, arg02
26418     D9 04 06 F4 | 	bitl	_var03, #217
2641c     00 00 58 FF 
26420     00 00 06 F6 | 	mov	_var01, ##-1342177280
26424     02 01 02 F1 | 	add	_var01, _var03
26428     01 01 62 FC | 	wrlong	_var01, _var02
2642c                 | '     repeat
2642c                 | LR__2980
2642c                 | '         result := long[mailbox]    
2642c     01 05 02 FB | 	rdlong	_var03, _var02
26430     00 04 56 F2 | 	cmps	_var03, #0 wc
26434     F4 FF 9F CD |  if_b	jmp	#LR__2980
26438                 | '     while result < 0   
26438                 | '     return -result                       'return success or error
26438     02 FB 61 F6 | 	neg	result1, _var03
2643c                 | LR__2981
2643c                 | _psram_spin2_read1_ret
2643c     2D 00 64 FD | 	ret
26440                 | 
26440                 | ' 
26440                 | ' '..............................................................................
26440                 | ' 
26440                 | ' {{
26440                 | ' }}
26440                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
26440                 | _psram_spin2_write
26440                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
26440                 | '     if drivercog == -1 ' driver must be running
26440     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26444     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
26448     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2644c     FF FF 7F FF 
26450     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
26454                 | '         return ERR_INACTIVE
26454     0F FA 65 A6 |  if_e	neg	result1, #15
26458     7C 00 90 AD |  if_e	jmp	#LR__2991
2645c                 | '     if count == 0 ' don't even bother writing
2645c     00 16 0E F2 | 	cmp	arg03, #0 wz
26460                 | '         return 0
26460     00 FA 05 A6 |  if_e	mov	result1, #0
26464     70 00 90 AD |  if_e	jmp	#LR__2991
26468                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
26468     00 FA 05 F6 | 	mov	result1, #0
2646c     01 FA 61 FD | 	cogid	result1
26470     FD 00 02 F6 | 	mov	_var01, result1
26474     01 00 66 F0 | 	shl	_var01, #1
26478     FD 00 02 F1 | 	add	_var01, result1
2647c     02 00 66 F0 | 	shl	_var01, #2
26480     FF 03 00 FF 
26484     00 03 06 F6 | 	mov	_var02, ##524032
26488     00 03 02 F1 | 	add	_var02, _var01
2648c                 | '     if long[mailbox] < 0
2648c     01 01 02 FB | 	rdlong	_var01, _var02
26490     00 00 56 F2 | 	cmps	_var01, #0 wc
26494                 | '         return ERR_MAILBOX_BUSY
26494     1C FA 65 C6 |  if_b	neg	result1, #28
26498     3C 00 90 CD |  if_b	jmp	#LR__2991
2649c                 | '     long[mailbox][2] := count
2649c     08 02 06 F1 | 	add	_var02, #8
264a0     01 17 62 FC | 	wrlong	arg03, _var02
264a4                 | '     long[mailbox][1] := srcHubAddr
264a4     04 02 86 F1 | 	sub	_var02, #4
264a8     01 13 62 FC | 	wrlong	arg01, _var02
264ac     04 02 86 F1 | 	sub	_var02, #4
264b0                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
264b0     0A 05 02 F6 | 	mov	_var03, arg02
264b4     D9 04 06 F4 | 	bitl	_var03, #217
264b8     00 00 78 FF 
264bc     00 00 06 F6 | 	mov	_var01, ##-268435456
264c0     02 01 02 F1 | 	add	_var01, _var03
264c4     01 01 62 FC | 	wrlong	_var01, _var02
264c8                 | '     repeat
264c8                 | LR__2990
264c8                 | '         result := long[mailbox]    
264c8     01 05 02 FB | 	rdlong	_var03, _var02
264cc     00 04 56 F2 | 	cmps	_var03, #0 wc
264d0     F4 FF 9F CD |  if_b	jmp	#LR__2990
264d4                 | '     while result < 0   
264d4                 | '     return -result                       'return success or error
264d4     02 FB 61 F6 | 	neg	result1, _var03
264d8                 | LR__2991
264d8                 | _psram_spin2_write_ret
264d8     2D 00 64 FD | 	ret
264dc                 | 
264dc                 | ' 
264dc                 | ' ' generalized fill
264dc                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
264dc                 | _psram_spin2_fill
264dc     09 01 02 F6 | 	mov	_var01, arg01
264e0     0A 03 02 F6 | 	mov	_var02, arg02
264e4     0B 05 02 F6 | 	mov	_var03, arg03
264e8     0D 07 02 F6 | 	mov	_var04, arg05
264ec                 | '     case datasize 
264ec     01 06 86 F1 | 	sub	_var04, #1
264f0     04 06 26 F3 | 	fle	_var04, #4
264f4     30 06 62 FD | 	jmprel	_var04
264f8                 | LR__3000
264f8     10 00 90 FD | 	jmp	#LR__3001
264fc     18 00 90 FD | 	jmp	#LR__3002
26500     2C 00 90 FD | 	jmp	#LR__3004
26504     1C 00 90 FD | 	jmp	#LR__3003
26508     24 00 90 FD | 	jmp	#LR__3004
2650c                 | LR__3001
2650c                 | '         1: req := driver.R_WRITEBYTE
2650c     00 00 60 FF 
26510     00 08 06 F6 | 	mov	_var05, ##-1073741824
26514     20 00 90 FD | 	jmp	#LR__3005
26518                 | LR__3002
26518                 | '         2: req := driver.R_WRITEWORD
26518     00 00 68 FF 
2651c     00 08 06 F6 | 	mov	_var05, ##-805306368
26520     14 00 90 FD | 	jmp	#LR__3005
26524                 | LR__3003
26524                 | '         4: req := driver.R_WRITELONG
26524     00 00 70 FF 
26528     00 08 06 F6 | 	mov	_var05, ##-536870912
2652c     08 00 90 FD | 	jmp	#LR__3005
26530                 | LR__3004
26530                 | '         other : return ERR_INVALID
26530     06 FA 65 F6 | 	neg	result1, #6
26534     94 00 90 FD | 	jmp	#LR__3007
26538                 | LR__3005
26538                 | '     if count == 0   ' nothing to do
26538     00 04 0E F2 | 	cmp	_var03, #0 wz
2653c                 | '         return 0
2653c     00 FA 05 A6 |  if_e	mov	result1, #0
26540     88 00 90 AD |  if_e	jmp	#LR__3007
26544                 | '     if drivercog == -1
26544     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
26548     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
2654c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
26550     FF FF 7F FF 
26554     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
26558                 | '         return ERR_INACTIVE
26558     0F FA 65 A6 |  if_e	neg	result1, #15
2655c     6C 00 90 AD |  if_e	jmp	#LR__3007
26560                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
26560     00 FA 05 F6 | 	mov	result1, #0
26564     01 FA 61 FD | 	cogid	result1
26568     FD 06 02 F6 | 	mov	_var04, result1
2656c     01 06 66 F0 | 	shl	_var04, #1
26570     FD 06 02 F1 | 	add	_var04, result1
26574     02 06 66 F0 | 	shl	_var04, #2
26578     FF 03 00 FF 
2657c     00 0B 06 F6 | 	mov	_var06, ##524032
26580     03 0B 02 F1 | 	add	_var06, _var04
26584                 | '     if long[mailbox] < 0
26584     05 07 02 FB | 	rdlong	_var04, _var06
26588     00 06 56 F2 | 	cmps	_var04, #0 wc
2658c                 | '         return ERR_MAILBOX_BUSY
2658c     1C FA 65 C6 |  if_b	neg	result1, #28
26590     38 00 90 CD |  if_b	jmp	#LR__3007
26594                 | '     long[mailbox][2] := count
26594     08 0A 06 F1 | 	add	_var06, #8
26598     05 05 62 FC | 	wrlong	_var03, _var06
2659c                 | '     long[mailbox][1] := pattern
2659c     04 0A 86 F1 | 	sub	_var06, #4
265a0     05 03 62 FC | 	wrlong	_var02, _var06
265a4     04 0A 86 F1 | 	sub	_var06, #4
265a8                 | '     long[mailbox] := req + (addr & $1ffffff)
265a8     04 0D 02 F6 | 	mov	_var07, _var05
265ac     00 0F 02 F6 | 	mov	_var08, _var01
265b0     D9 0E 06 F4 | 	bitl	_var08, #217
265b4     07 0D 02 F1 | 	add	_var07, _var08
265b8     05 0D 62 FC | 	wrlong	_var07, _var06
265bc                 | '     repeat
265bc                 | LR__3006
265bc                 | '         r := long[mailbox]
265bc     05 0F 02 FB | 	rdlong	_var08, _var06
265c0     00 0E 56 F2 | 	cmps	_var08, #0 wc
265c4     F4 FF 9F CD |  if_b	jmp	#LR__3006
265c8                 | '     while r < 0
265c8                 | '     return -r                  ' return 0 for success or negated error code
265c8     07 FB 61 F6 | 	neg	result1, _var08
265cc                 | LR__3007
265cc                 | _psram_spin2_fill_ret
265cc     2D 00 64 FD | 	ret
265d0                 | 
265d0                 | ' 
265d0                 | ' '..............................................................................
265d0                 | ' 
265d0                 | ' {{
265d0                 | ' }}
265d0                 | ' PUB setQos(cog, qos) : result | mailbox
265d0                 | _psram_spin2_setQos
265d0     09 01 02 F6 | 	mov	_var01, arg01
265d4                 | '     if drivercog == -1 ' driver must be running
265d4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
265d8     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
265dc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
265e0     FF FF 7F FF 
265e4     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
265e8                 | '         return ERR_INACTIVE
265e8     0F FA 65 A6 |  if_e	neg	result1, #15
265ec     9C 00 90 AD |  if_e	jmp	#LR__3014
265f0                 | '     if cog < 0 or cog > 7 ' enforce cog id range
265f0     00 00 56 F2 | 	cmps	_var01, #0 wc
265f4     08 00 90 CD |  if_b	jmp	#LR__3010
265f8     08 00 56 F2 | 	cmps	_var01, #8 wc
265fc     08 00 90 CD |  if_b	jmp	#LR__3011
26600                 | LR__3010
26600                 | '         return ERR_INVALID
26600     06 FA 65 F6 | 	neg	result1, #6
26604     84 00 90 FD | 	jmp	#LR__3014
26608                 | LR__3011
26608                 | '     long[@qosData][cog] := qos & !$1ff
26608     FF 15 26 F5 | 	andn	arg02, #511
2660c     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
26610     02 00 66 F0 | 	shl	_var01, #2
26614     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
26618     00 15 62 FC | 	wrlong	arg02, _var01
2661c                 | '     mailbox := $7FF00 + drivercog*12
2661c     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
26620     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
26624     02 07 02 F6 | 	mov	_var04, _var03
26628     01 06 66 F0 | 	shl	_var04, #1
2662c     02 07 02 F1 | 	add	_var04, _var03
26630     02 06 66 F0 | 	shl	_var04, #2
26634     FF 03 00 FF 
26638     00 09 06 F6 | 	mov	_var05, ##524032
2663c     03 09 02 F1 | 	add	_var05, _var04
26640                 | '     repeat until LOCKTRY(driverlock)
26640     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
26644                 | LR__3012
26644     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
26648     06 12 72 FD | 	locktry	arg01 wc
2664c     F4 FF 9F 3D |  if_ae	jmp	#LR__3012
26650     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
26654                 | '     long[mailbox] := driver.R_CONFIG + cogid()
26654     00 06 06 F6 | 	mov	_var04, #0
26658     01 06 62 FD | 	cogid	_var04
2665c     00 00 78 FF 
26660     00 02 06 F6 | 	mov	_var02, ##-268435456
26664     03 03 02 F1 | 	add	_var02, _var04
26668     04 03 62 FC | 	wrlong	_var02, _var05
2666c                 | '     repeat while long[mailbox] < 0
2666c                 | LR__3013
2666c     04 03 02 FB | 	rdlong	_var02, _var05
26670     00 02 56 F2 | 	cmps	_var02, #0 wc
26674     F4 FF 9F CD |  if_b	jmp	#LR__3013
26678                 | '     LOCKREL(driverlock)
26678     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
2667c     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
26680     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
26684     07 12 72 FD | 	lockrel	arg01 wc
26688     00 FA 05 F6 | 	mov	result1, #0
2668c                 | LR__3014
2668c                 | _psram_spin2_setQos_ret
2668c     2D 00 64 FD | 	ret
26690                 | 
26690                 | ' 
26690                 | ' '..............................................................................
26690                 | ' 
26690                 | ' {{
26690                 | ' }}
26690                 | ' PRI lookupDelay(freq) : delay | profile
26690                 | _psram_spin2_lookupDelay
26690                 | '     profile := @delayTable
26690     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
26694     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
26698                 | '     delay := long[profile][0]
26698     00 03 02 FB | 	rdlong	_var02, _var01
2669c                 | '     repeat while long[profile][1] 
2669c     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
266a0     97 16 48 FB | 	callpa	#(@LR__3021-@LR__3020)>>2,fcache_load_ptr_
266a4                 | LR__3020
266a4     04 00 06 F1 | 	add	_var01, #4
266a8     00 FB 09 FB | 	rdlong	result1, _var01 wz
266ac     04 00 86 F1 | 	sub	_var01, #4
266b0     1C 00 90 AD |  if_e	jmp	#LR__3022
266b4                 | '         if freq +< long[profile][1] 
266b4     04 00 06 F1 | 	add	_var01, #4
266b8     00 FB 01 FB | 	rdlong	result1, _var01
266bc     04 00 86 F1 | 	sub	_var01, #4
266c0     FD 12 12 F2 | 	cmp	arg01, result1 wc
266c4                 | '             quit
266c4                 | '         profile += 4
266c4     04 00 06 31 |  if_ae	add	_var01, #4
266c8                 | '         delay++
266c8     01 02 06 31 |  if_ae	add	_var02, #1
266cc     D4 FF 9F 3D |  if_ae	jmp	#LR__3020
266d0                 | LR__3021
266d0                 | LR__3022
266d0     01 FB 01 F6 | 	mov	result1, _var02
266d4                 | _psram_spin2_lookupDelay_ret
266d4     2D 00 64 FD | 	ret
266d8                 | 
266d8                 | ' 
266d8                 | ' PUB start() : r
266d8                 | _usbnew_spin2_start
266d8     00 00 06 F6 | 	mov	_var01, #0
266dc                 | '   ifnot driver_cog
266dc     15 00 00 FF 
266e0     47 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10823
266e4     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
266e8     15 00 00 FF 
266ec     47 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10823
266f0     38 00 90 5D |  if_ne	jmp	#LR__3030
266f4                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
266f4     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
266f8     10 00 06 F6 | 	mov	_var01, #16
266fc     00 16 06 F6 | 	mov	arg03, #0
26700     28 16 62 FD | 	setq	arg03
26704     0A 01 F2 FC | 	coginit	_var01, arg02 wc
26708     01 00 66 C6 |  if_b	neg	_var01, #1
2670c                 | '     if r >= 0
2670c     00 00 56 F2 | 	cmps	_var01, #0 wc
26710                 | '       driver_cog := r+1
26710     00 03 02 36 |  if_ae	mov	_var02, _var01
26714     01 02 06 31 |  if_ae	add	_var02, #1
26718     15 00 00 3F 
2671c     47 F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10823
26720     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
26724     15 00 00 3F 
26728     47 F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10823
2672c                 | LR__3030
2672c     00 FB 01 F6 | 	mov	result1, _var01
26730                 | _usbnew_spin2_start_ret
26730     2D 00 64 FD | 	ret
26734                 | 
26734                 | '     '' (Always enabled)
26734                 | ' 
26734                 | ' '' Get current pressed state of a keyboard key
26734                 | ' PUB keystate(key) : r | buf[2],tmp
26734                 | _usbnew_spin2_keystate
26734     00 04 06 F6 | 	mov	_var03, #0
26738                 | '   if key >= $E0 && key < $E8
26738     E0 12 56 F2 | 	cmps	arg01, #224 wc
2673c     34 00 90 CD |  if_b	jmp	#LR__3040
26740     E8 12 56 F2 | 	cmps	arg01, #232 wc
26744     2C 00 90 3D |  if_ae	jmp	#LR__3040
26748                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
26748     00 FA 05 F6 | 	mov	result1, #0
2674c     13 00 00 FF 
26750     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
26754     09 07 02 F6 | 	mov	_var04, arg01
26758     E0 06 86 F1 | 	sub	_var04, #224
2675c     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
26760     03 09 4A F0 | 	shr	_var05, _var04 wz
26764     13 00 00 FF 
26768     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
2676c     01 FA 65 56 |  if_ne	neg	result1, #1
26770     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
26774                 | LR__3040
26774                 | '   else
26774                 | '     '' Do this in inline ASM to ensure atomicity
26774                 | '     tmp := @hkbd_report
26774     13 00 00 FF 
26778     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
2677c     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
26780                 | '     org
26780     13 00 00 FF 
26784     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
26788     97 1E 48 FB | 	callpa	#(@LR__3042-@LR__3041)>>2,fcache_load_ptr_
2678c                 | LR__3041
2678c 000             | 	org	0
2678c 000 28 02 64 FD | 	setq	#1
26790 001 04 01 02 FB | 	rdlong	_var01, _var05
26794 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
26798 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
2679c 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
267a0 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
267a4 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
267a8 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
267ac 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
267b0 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
267b4 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
267b8 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
267bc 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
267c0 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
267c4 00e 01 04 66 A6 |  if_e	neg	_var03, #1
267c8 00f             | LR__3042
267c8                 | 	orgh
267c8     02 FB 01 F6 | 	mov	result1, _var03
267cc                 | _usbnew_spin2_keystate_ret
267cc     2D 00 64 FD | 	ret
267d0                 | 
267d0                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
267d0                 | ' 
267d0                 | ' '' Return key event from buffer if there is one
267d0                 | ' PUB get_key() : r | tail
267d0                 | _usbnew_spin2_get_key
267d0                 | '   tail := keyq_tail
267d0     0F 00 00 FF 
267d4     C5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7877
267d8     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
267dc                 | '   if keyq_head == tail
267dc     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
267e0     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
267e4     0F 00 00 FF 
267e8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
267ec     00 03 0A F2 | 	cmp	_var02, _var01 wz
267f0                 | '     return 0 ' No event
267f0     00 FA 05 A6 |  if_e	mov	result1, #0
267f4     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
267f8                 | '   r := keyq_data[tail]
267f8     00 03 02 F6 | 	mov	_var02, _var01
267fc     02 02 66 F0 | 	shl	_var02, #2
26800     0F 00 00 FF 
26804     C6 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7878
26808     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
2680c     01 FB 01 FB | 	rdlong	result1, _var02
26810                 | '   if ++tail == KEYQUEUE_SIZE
26810     01 00 06 F1 | 	add	_var01, #1
26814     80 00 0E F2 | 	cmp	_var01, #128 wz
26818                 | '     tail := 0
26818     00 00 06 A6 |  if_e	mov	_var01, #0
2681c                 | '   keyq_tail := tail
2681c     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
26820     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
26824     0F 00 00 FF 
26828     C5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7877
2682c                 | _usbnew_spin2_get_key_ret
2682c     2D 00 64 FD | 	ret
26830                 | 
26830                 | ' 
26830                 | ' '' Emulate mouse movement
26830                 | ' PUB mouse_move(x,y)
26830                 | _usbnew_spin2_mouse_move
26830     02 4A 05 F6 | 	mov	COUNT_, #2
26834     A8 00 A0 FD | 	call	#pushregs_
26838     09 27 02 F6 | 	mov	local01, arg01
2683c     0A 29 02 F6 | 	mov	local02, arg02
26840                 | '   mouse_lock := 1
26840     14 00 00 FF 
26844     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
26848     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
2684c     14 00 00 FF 
26850     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
26854                 | '   waitus(2) ' hope driver is now done
26854     02 12 06 F6 | 	mov	arg01, #2
26858     A0 0B B0 FD | 	call	#__system___waitus
2685c                 | '   mouse_xacc := x
2685c     14 00 00 FF 
26860     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
26864     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
26868                 | '   mouse_yacc := y
26868     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
2686c     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
26870                 | '   if mouse_outptr
26870     04 00 00 FF 
26874     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
26878     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
2687c     0F 00 00 FF 
26880     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
26884     24 00 90 AD |  if_e	jmp	#LR__3050
26888                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
26888     10 28 66 F0 | 	shl	local02, #16
2688c     13 27 32 F9 | 	getword	local01, local01, #0
26890     13 29 42 F5 | 	or	local02, local01
26894     0F 00 00 FF 
26898     C0 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7872
2689c     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
268a0     0F 00 00 FF 
268a4     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
268a8     13 29 62 FC | 	wrlong	local02, local01
268ac                 | LR__3050
268ac                 | '   mouse_lock := 0
268ac     14 00 00 FF 
268b0     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
268b4     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
268b8     14 00 00 FF 
268bc     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
268c0     A7 F0 03 F6 | 	mov	ptra, fp
268c4     B2 00 A0 FD | 	call	#popregs_
268c8                 | _usbnew_spin2_mouse_move_ret
268c8     2D 00 64 FD | 	ret
268cc                 | 
268cc                 | '     '' Set HAVE_HIDPAD to enable.
268cc                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
268cc                 | ' 
268cc                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
268cc                 | ' PUB hidpad_id(dev) : r
268cc                 | _usbnew_spin2_hidpad_id
268cc                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
268cc     13 00 00 FF 
268d0     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
268d4     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
268d8     09 01 02 F6 | 	mov	_var01, arg01
268dc     03 00 66 F0 | 	shl	_var01, #3
268e0     09 01 82 F1 | 	sub	_var01, arg01
268e4     02 00 66 F0 | 	shl	_var01, #2
268e8     00 FB 01 F1 | 	add	result1, _var01
268ec     FD FA 01 FB | 	rdlong	result1, result1
268f0     13 00 00 FF 
268f4     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
268f8                 | _usbnew_spin2_hidpad_id_ret
268f8     2D 00 64 FD | 	ret
268fc                 | 
268fc                 | ' 
268fc                 | ' '' Get all button states for a device
268fc                 | ' PUB hidpad_buttons(dev) : r 
268fc                 | _usbnew_spin2_hidpad_buttons
268fc                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
268fc     13 00 00 FF 
26900     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
26904     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
26908     09 01 02 F6 | 	mov	_var01, arg01
2690c     03 00 66 F0 | 	shl	_var01, #3
26910     09 01 82 F1 | 	sub	_var01, arg01
26914     02 00 66 F0 | 	shl	_var01, #2
26918     00 FB 01 F1 | 	add	result1, _var01
2691c     14 FA 05 F1 | 	add	result1, #20
26920     FD FA 01 FB | 	rdlong	result1, result1
26924     13 00 00 FF 
26928     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
2692c                 | _usbnew_spin2_hidpad_buttons_ret
2692c     2D 00 64 FD | 	ret
26930                 | 
26930                 | ' 
26930                 | ' '' Get state of an axis (normalized between -32768 and 32767)
26930                 | ' PUB hidpad_axis(dev,axnum) : r
26930                 | _usbnew_spin2_hidpad_axis
26930                 | '   if axnum +>= 6
26930     06 14 16 F2 | 	cmp	arg02, #6 wc
26934                 | '     return 0
26934     00 FA 05 36 |  if_ae	mov	result1, #0
26938     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
2693c                 | '   else 
2693c                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
2693c     13 00 00 FF 
26940     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
26944     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
26948     09 01 02 F6 | 	mov	_var01, arg01
2694c     03 00 66 F0 | 	shl	_var01, #3
26950     09 01 82 F1 | 	sub	_var01, arg01
26954     02 00 66 F0 | 	shl	_var01, #2
26958     00 FB 01 F1 | 	add	result1, _var01
2695c     04 00 06 F6 | 	mov	_var01, #4
26960     0A 01 02 F1 | 	add	_var01, arg02
26964     01 00 66 F0 | 	shl	_var01, #1
26968     FD 00 02 F1 | 	add	_var01, result1
2696c     00 FB E1 FA | 	rdword	result1, _var01
26970     0F FA 65 F7 | 	signx	result1, #15
26974     13 00 00 FF 
26978     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
2697c                 | _usbnew_spin2_hidpad_axis_ret
2697c     2D 00 64 FD | 	ret
26980                 | 
26980                 | ' 
26980                 | ' '' Get state of a hat
26980                 | ' PUB hidpad_hat(dev,hatnum) : r
26980                 | _usbnew_spin2_hidpad_hat
26980                 | '   if hatnum +>= 4
26980     04 14 16 F2 | 	cmp	arg02, #4 wc
26984                 | '     return 0
26984     00 FA 05 36 |  if_ae	mov	result1, #0
26988     38 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
2698c                 | '   else 
2698c                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6*4+hatnum]
2698c     13 00 00 FF 
26990     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
26994     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
26998     09 01 02 F6 | 	mov	_var01, arg01
2699c     03 00 66 F0 | 	shl	_var01, #3
269a0     09 01 82 F1 | 	sub	_var01, arg01
269a4     02 00 66 F0 | 	shl	_var01, #2
269a8     00 FB 01 F1 | 	add	result1, _var01
269ac     18 00 06 F6 | 	mov	_var01, #24
269b0     0A 01 02 F1 | 	add	_var01, arg02
269b4     FD 00 02 F1 | 	add	_var01, result1
269b8     00 FB C1 FA | 	rdbyte	result1, _var01
269bc     13 00 00 FF 
269c0     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
269c4                 | _usbnew_spin2_hidpad_hat_ret
269c4     2D 00 64 FD | 	ret
269c8                 | 
269c8                 | ' 
269c8                 | ' 
269c8                 | ' '--------------------------------------------------------------
269c8                 | ' '---------- Init the variables, start the cog. ----------------
269c8                 | ' '--------------------------------------------------------------
269c8                 | ' 
269c8                 | ' pub start(mbox,scope,cache) :cog,base | iii
269c8                 | _audio096_spin2_start
269c8     04 4A 05 F6 | 	mov	COUNT_, #4
269cc     A8 00 A0 FD | 	call	#pushregs_
269d0     09 27 02 F6 | 	mov	local01, arg01
269d4                 | ' 
269d4                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
269d4                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
269d4                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
269d4                 | ' 
269d4                 | ' mailboxaddr:=mbox 
269d4     F2 26 62 FC | 	wrlong	local01, objptr
269d8                 | ' scope_ptr:=scope
269d8     04 E4 05 F1 | 	add	objptr, #4
269dc     F2 14 62 FC | 	wrlong	arg02, objptr
269e0                 | ' cache_ptr:=cache
269e0     04 E4 05 F1 | 	add	objptr, #4
269e4     F2 16 62 FC | 	wrlong	arg03, objptr
269e8                 | ' base:=@channel1[0]
269e8     04 E4 05 F1 | 	add	objptr, #4
269ec     F2 28 02 F6 | 	mov	local02, objptr
269f0                 | ' long[$40]:=mbox
269f0     40 26 66 FC | 	wrlong	local01, #64
269f4                 | ' repeat iii from 0 to 7
269f4     00 2A 06 F6 | 	mov	local03, #0
269f8     02 00 00 FF 
269fc     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
26a00     0C E4 85 F1 | 	sub	objptr, #12
26a04     97 BC 48 FB | 	callpa	#(@LR__3061-@LR__3060)>>2,fcache_load_ptr_
26a08                 | LR__3060
26a08                 | '   long[base+64*iii]:=0
26a08     14 27 02 F6 | 	mov	local01, local02
26a0c     15 FD 01 F6 | 	mov	result2, local03
26a10     06 FC 65 F0 | 	shl	result2, #6
26a14     FE 26 02 F1 | 	add	local01, result2
26a18     13 01 68 FC | 	wrlong	#0, local01
26a1c                 | '   long[base+64*iii+4]:=0
26a1c     14 27 02 F6 | 	mov	local01, local02
26a20     15 FD 01 F6 | 	mov	result2, local03
26a24     06 FC 65 F0 | 	shl	result2, #6
26a28     FE 26 02 F1 | 	add	local01, result2
26a2c     04 26 06 F1 | 	add	local01, #4
26a30     13 01 68 FC | 	wrlong	#0, local01
26a34                 | '   long[base+64*iii+12]:=0
26a34     14 2D 02 F6 | 	mov	local04, local02
26a38     15 27 02 F6 | 	mov	local01, local03
26a3c     06 26 66 F0 | 	shl	local01, #6
26a40     13 2D 02 F1 | 	add	local04, local01
26a44     0C 2C 06 F1 | 	add	local04, #12
26a48     16 01 68 FC | 	wrlong	#0, local04
26a4c                 | '   long[base+64*iii+16]:=2 
26a4c     14 2D 02 F6 | 	mov	local04, local02
26a50     15 27 02 F6 | 	mov	local01, local03
26a54     06 26 66 F0 | 	shl	local01, #6
26a58     13 2D 02 F1 | 	add	local04, local01
26a5c     10 2C 06 F1 | 	add	local04, #16
26a60     16 05 68 FC | 	wrlong	#2, local04
26a64                 | '   word[base+64*iii+20]:=0
26a64     14 2D 02 F6 | 	mov	local04, local02
26a68     15 27 02 F6 | 	mov	local01, local03
26a6c     06 26 66 F0 | 	shl	local01, #6
26a70     13 2D 02 F1 | 	add	local04, local01
26a74     14 2C 06 F1 | 	add	local04, #20
26a78     16 01 58 FC | 	wrword	#0, local04
26a7c                 | '   word[base+64*iii+22]:=8192
26a7c     14 2D 02 F6 | 	mov	local04, local02
26a80     15 27 02 F6 | 	mov	local01, local03
26a84     06 26 66 F0 | 	shl	local01, #6
26a88     13 2D 02 F1 | 	add	local04, local01
26a8c     16 2C 06 F1 | 	add	local04, #22
26a90     10 00 80 FF 
26a94     16 01 58 FC | 	wrword	##8192, local04
26a98                 | '   word[base+64*iii+24]:=4000+2*iii
26a98     15 2D 02 F6 | 	mov	local04, local03
26a9c     01 2C 66 F0 | 	shl	local04, #1
26aa0     07 00 00 FF 
26aa4     A0 27 06 F6 | 	mov	local01, ##4000
26aa8     16 27 02 F1 | 	add	local01, local04
26aac     14 2D 02 F6 | 	mov	local04, local02
26ab0     15 FD 01 F6 | 	mov	result2, local03
26ab4     06 FC 65 F0 | 	shl	result2, #6
26ab8     FE 2C 02 F1 | 	add	local04, result2
26abc     18 2C 06 F1 | 	add	local04, #24
26ac0     16 27 52 FC | 	wrword	local01, local04
26ac4                 | '   word[base+64*iii+26]:=2
26ac4     14 2D 02 F6 | 	mov	local04, local02
26ac8     15 27 02 F6 | 	mov	local01, local03
26acc     06 26 66 F0 | 	shl	local01, #6
26ad0     13 2D 02 F1 | 	add	local04, local01
26ad4     1A 2C 06 F1 | 	add	local04, #26
26ad8     16 05 58 FC | 	wrword	#2, local04
26adc                 | '   long [base+64*iii+8]:=@null | $C0000000
26adc     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
26ae0     3E 26 26 F4 | 	bith	local01, #62
26ae4     14 2D 02 F6 | 	mov	local04, local02
26ae8     15 17 02 F6 | 	mov	arg03, local03
26aec     06 16 66 F0 | 	shl	arg03, #6
26af0     0B 2D 02 F1 | 	add	local04, arg03
26af4     08 2C 06 F1 | 	add	local04, #8
26af8     16 27 62 FC | 	wrlong	local01, local04
26afc                 | '   long[base+64*iii+32]:=0
26afc     14 2D 02 F6 | 	mov	local04, local02
26b00     15 27 02 F6 | 	mov	local01, local03
26b04     06 26 66 F0 | 	shl	local01, #6
26b08     13 2D 02 F1 | 	add	local04, local01
26b0c     20 2C 06 F1 | 	add	local04, #32
26b10     16 01 68 FC | 	wrlong	#0, local04
26b14                 | '   long[base+64*iii+36]:=0
26b14     14 2D 02 F6 | 	mov	local04, local02
26b18     15 27 02 F6 | 	mov	local01, local03
26b1c     06 26 66 F0 | 	shl	local01, #6
26b20     13 2D 02 F1 | 	add	local04, local01
26b24     24 2C 06 F1 | 	add	local04, #36
26b28     16 01 68 FC | 	wrlong	#0, local04
26b2c                 | '   long[base+64*iii+40]:=0
26b2c     14 2D 02 F6 | 	mov	local04, local02
26b30     15 27 02 F6 | 	mov	local01, local03
26b34     06 26 66 F0 | 	shl	local01, #6
26b38     13 2D 02 F1 | 	add	local04, local01
26b3c     28 2C 06 F1 | 	add	local04, #40
26b40     16 01 68 FC | 	wrlong	#0, local04
26b44                 | '   long[base+64*iii+44]:=0
26b44     14 2D 02 F6 | 	mov	local04, local02
26b48     15 27 02 F6 | 	mov	local01, local03
26b4c     06 26 66 F0 | 	shl	local01, #6
26b50     13 2D 02 F1 | 	add	local04, local01
26b54     2C 2C 06 F1 | 	add	local04, #44
26b58     16 01 68 FC | 	wrlong	#0, local04
26b5c                 | '   long[base+64*iii+28]:=0
26b5c     14 2D 02 F6 | 	mov	local04, local02
26b60     15 27 02 F6 | 	mov	local01, local03
26b64     06 26 66 F0 | 	shl	local01, #6
26b68     13 2D 02 F1 | 	add	local04, local01
26b6c     1C 2C 06 F1 | 	add	local04, #28
26b70     16 01 68 FC | 	wrlong	#0, local04
26b74     01 2A 06 F1 | 	add	local03, #1
26b78     08 2A 56 F2 | 	cmps	local03, #8 wc
26b7c     88 FE 9F CD |  if_b	jmp	#LR__3060
26b80                 | LR__3061
26b80     02 00 00 FF 
26b84     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
26b88                 | '   
26b88                 | ' cog:=coginit(16,@audio,@mailboxaddr)
26b88     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
26b8c     F2 16 02 F6 | 	mov	arg03, objptr
26b90     10 2C 06 F6 | 	mov	local04, #16
26b94     28 16 62 FD | 	setq	arg03
26b98     0A 2D F2 FC | 	coginit	local04, arg02 wc
26b9c     01 2C 66 C6 |  if_b	neg	local04, #1
26ba0                 | ' waitms(100)
26ba0     64 12 06 F6 | 	mov	arg01, #100
26ba4     E8 07 B0 FD | 	call	#__system___waitms
26ba8                 | ' return cog,base
26ba8     14 FD 01 F6 | 	mov	result2, local02
26bac     16 FB 01 F6 | 	mov	result1, local04
26bb0     A7 F0 03 F6 | 	mov	ptra, fp
26bb4     B2 00 A0 FD | 	call	#popregs_
26bb8                 | _audio096_spin2_start_ret
26bb8     2D 00 64 FD | 	ret
26bbc                 | 
26bbc                 | ' 
26bbc                 | ' ' a simple play procedure to not poke everything. 
26bbc                 | ' 
26bbc                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
26bbc                 | _audio096_spin2_play
26bbc     0C E4 05 F1 | 	add	objptr, #12
26bc0     F2 00 02 F6 | 	mov	_var01, objptr
26bc4     06 12 66 F0 | 	shl	arg01, #6
26bc8     09 01 02 F1 | 	add	_var01, arg01
26bcc     00 13 02 F6 | 	mov	arg01, _var01
26bd0     0C 12 06 F1 | 	add	arg01, #12
26bd4     09 1B 62 FC | 	wrlong	arg05, arg01
26bd8     00 1C 56 F2 | 	cmps	arg06, #0 wc
26bdc     00 13 02 36 |  if_ae	mov	arg01, _var01
26be0     10 12 06 31 |  if_ae	add	arg01, #16
26be4     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
26be8     02 1A 06 C1 |  if_b	add	arg05, #2
26bec     00 13 02 C6 |  if_b	mov	arg01, _var01
26bf0     10 12 06 C1 |  if_b	add	arg01, #16
26bf4     09 1B 62 CC |  if_b	wrlong	arg05, arg01
26bf8     0B 13 52 F6 | 	abs	arg01, arg03 wc
26bfc     0F 1B 80 FF 
26c00     09 1F 1A FD | 	qdiv	##3546895, arg01
26c04                 | ' 
26c04                 | ' base2:=@channel1[0]+64*channel
26c04                 | ' 
26c04                 | ' 
26c04                 | ' long[base2+12]:= len
26c04                 | ' if loop >=0 
26c04                 | '   long[base2+16]:= loop
26c04     0C E4 85 F1 | 	sub	objptr, #12
26c08                 | ' else
26c08                 | '   long[base2+16]:= len+2
26c08                 | ' word[base2+20]:=vol
26c08     00 13 02 F6 | 	mov	arg01, _var01
26c0c     14 12 06 F1 | 	add	arg01, #20
26c10     09 19 52 FC | 	wrword	arg04, arg01
26c14                 | ' word[base2+24]:= 3546895/splfreq 
26c14     00 19 02 F6 | 	mov	arg04, _var01
26c18     18 18 06 F1 | 	add	arg04, #24
26c1c                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
26c1c                 | ' long[base2+28]:=$40000000    
26c1c                 | ' long[base2+32]:=0    
26c1c                 | ' long[base2+36]:=0    
26c1c                 | ' long[base2+40]:=0    
26c1c                 | ' long[base2+44]:=0    
26c1c                 | ' long[base2+8]:=sample+$C0000000     
26c1c     00 00 60 FF 
26c20     00 14 06 F1 | 	add	arg02, ##-1073741824
26c24     18 12 62 FD | 	getqx	arg01
26c28     09 13 82 F6 | 	negc	arg01, arg01
26c2c     0C 13 52 FC | 	wrword	arg01, arg04
26c30     00 13 02 F6 | 	mov	arg01, _var01
26c34     1A 12 06 F1 | 	add	arg01, #26
26c38     09 01 5A FC | 	wrword	#256, arg01
26c3c     00 13 02 F6 | 	mov	arg01, _var01
26c40     1C 12 06 F1 | 	add	arg01, #28
26c44     00 00 A0 FF 
26c48     09 01 68 FC | 	wrlong	##1073741824, arg01
26c4c     00 13 02 F6 | 	mov	arg01, _var01
26c50     20 12 06 F1 | 	add	arg01, #32
26c54     09 01 68 FC | 	wrlong	#0, arg01
26c58     00 13 02 F6 | 	mov	arg01, _var01
26c5c     24 12 06 F1 | 	add	arg01, #36
26c60     09 01 68 FC | 	wrlong	#0, arg01
26c64     00 13 02 F6 | 	mov	arg01, _var01
26c68     28 12 06 F1 | 	add	arg01, #40
26c6c     09 01 68 FC | 	wrlong	#0, arg01
26c70     00 13 02 F6 | 	mov	arg01, _var01
26c74     2C 12 06 F1 | 	add	arg01, #44
26c78     09 01 68 FC | 	wrlong	#0, arg01
26c7c     08 00 06 F1 | 	add	_var01, #8
26c80     00 15 62 FC | 	wrlong	arg02, _var01
26c84                 | _audio096_spin2_play_ret
26c84     2D 00 64 FD | 	ret
26c88                 | 
26c88                 | ' 
26c88                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
26c88                 | _audio096_spin2_play8
26c88                 | ' 
26c88                 | ' base2:=@channel1[0]+64*channel
26c88     0C E4 05 F1 | 	add	objptr, #12
26c8c     F2 00 02 F6 | 	mov	_var01, objptr
26c90     06 12 66 F0 | 	shl	arg01, #6
26c94     09 01 02 F1 | 	add	_var01, arg01
26c98                 | ' long[base2]:=0
26c98     00 01 68 FC | 	wrlong	#0, _var01
26c9c                 | ' long[base2+8]:=sample+$40000000 
26c9c     00 00 20 FF 
26ca0     00 14 06 F1 | 	add	arg02, ##1073741824
26ca4     00 13 02 F6 | 	mov	arg01, _var01
26ca8     08 12 06 F1 | 	add	arg01, #8
26cac     09 15 62 FC | 	wrlong	arg02, arg01
26cb0                 | ' if loop>=0
26cb0     00 1C 56 F2 | 	cmps	arg06, #0 wc
26cb4     0C E4 85 F1 | 	sub	objptr, #12
26cb8     1C 00 90 CD |  if_b	jmp	#LR__3070
26cbc                 | '   long[base2+12]:=loop
26cbc     00 15 02 F6 | 	mov	arg02, _var01
26cc0     0C 14 06 F1 | 	add	arg02, #12
26cc4     0A 1D 62 FC | 	wrlong	arg06, arg02
26cc8                 | '   long[base2+16]:= len
26cc8     00 1D 02 F6 | 	mov	arg06, _var01
26ccc     10 1C 06 F1 | 	add	arg06, #16
26cd0     0E 1B 62 FC | 	wrlong	arg05, arg06
26cd4     1C 00 90 FD | 	jmp	#LR__3071
26cd8                 | LR__3070
26cd8                 | ' else
26cd8                 | '   long[base2+12]:= len
26cd8     00 1D 02 F6 | 	mov	arg06, _var01
26cdc     0C 1C 06 F1 | 	add	arg06, #12
26ce0     0E 1B 62 FC | 	wrlong	arg05, arg06
26ce4                 | '   long[base2+16]:= len+1
26ce4     01 1A 06 F1 | 	add	arg05, #1
26ce8     00 13 02 F6 | 	mov	arg01, _var01
26cec     10 12 06 F1 | 	add	arg01, #16
26cf0     09 1B 62 FC | 	wrlong	arg05, arg01
26cf4                 | LR__3071
26cf4     0B 17 52 F6 | 	abs	arg03, arg03 wc
26cf8     0F 1B 80 FF 
26cfc     0B 1F 1A FD | 	qdiv	##3546895, arg03
26d00                 | ' word[base2+20]:=vol
26d00     00 17 02 F6 | 	mov	arg03, _var01
26d04     14 16 06 F1 | 	add	arg03, #20
26d08     0B 19 52 FC | 	wrword	arg04, arg03
26d0c                 | ' word[base2+24]:= 3546895 /splfreq 
26d0c     00 13 02 F6 | 	mov	arg01, _var01
26d10     18 12 06 F1 | 	add	arg01, #24
26d14                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
26d14     1A 00 06 F1 | 	add	_var01, #26
26d18     18 18 62 FD | 	getqx	arg04
26d1c     0C 19 82 F6 | 	negc	arg04, arg04
26d20     09 19 52 FC | 	wrword	arg04, arg01
26d24     00 01 5A FC | 	wrword	#256, _var01
26d28                 | _audio096_spin2_play8_ret
26d28     2D 00 64 FD | 	ret
26d2c                 | 
26d2c                 | ' 'long[base2+28]:=$40000000
26d2c                 | ' 
26d2c                 | '     
26d2c                 | ' pub stop(channel) 'silence it
26d2c                 | _audio096_spin2_stop
26d2c                 | ' 
26d2c                 | ' word[@channel1[0]+64*channel+20]:=0
26d2c     0C E4 05 F1 | 	add	objptr, #12
26d30     F2 00 02 F6 | 	mov	_var01, objptr
26d34     09 03 02 F6 | 	mov	_var02, arg01
26d38     06 02 66 F0 | 	shl	_var02, #6
26d3c     01 01 02 F1 | 	add	_var01, _var02
26d40     14 00 06 F1 | 	add	_var01, #20
26d44     00 01 58 FC | 	wrword	#0, _var01
26d48                 | ' word[@channel1[0]+64*channel+20]:=0
26d48     F2 00 02 F6 | 	mov	_var01, objptr
26d4c     06 12 66 F0 | 	shl	arg01, #6
26d50     09 01 02 F1 | 	add	_var01, arg01
26d54     14 00 06 F1 | 	add	_var01, #20
26d58     00 01 58 FC | 	wrword	#0, _var01
26d5c     0C E4 85 F1 | 	sub	objptr, #12
26d60                 | _audio096_spin2_stop_ret
26d60     2D 00 64 FD | 	ret
26d64                 | hubexit
26d64     81 00 80 FD | 	jmp	#cogexit
26d68                 | 
26d68                 | __system___setbaud
26d68     14 90 06 FB | 	rdlong	muldiva_, #20
26d6c     09 93 02 F6 | 	mov	muldivb_, arg01
26d70     BA 00 A0 FD | 	call	#divide_
26d74     97 06 48 FB | 	callpa	#(@LR__3081-@LR__3080)>>2,fcache_load_ptr_
26d78                 | LR__3080
26d78     3E FA 9D FA | 	rdpin	result1, #62 wc
26d7c     FE FC A1 F1 | 	subx	result2, result2
26d80     F4 FF 9F CD |  if_b	jmp	#LR__3080
26d84                 | LR__3081
26d84     40 7C 64 FD | 	dirl	#62
26d88     40 7E 64 FD | 	dirl	#63
26d8c     F3 92 62 FC | 	wrlong	muldivb_, ptr___system__dat__
26d90     10 92 66 F0 | 	shl	muldivb_, #16
26d94     07 14 06 F6 | 	mov	arg02, #7
26d98     49 15 02 F1 | 	add	arg02, muldivb_
26d9c     3E F8 0C FC | 	wrpin	#124, #62
26da0     3E 14 16 FC | 	wxpin	arg02, #62
26da4     3F 7C 0C FC | 	wrpin	#62, #63
26da8     14 14 06 F1 | 	add	arg02, #20
26dac     3F 14 16 FC | 	wxpin	arg02, #63
26db0     41 7C 64 FD | 	dirh	#62
26db4     41 7E 64 FD | 	dirh	#63
26db8                 | __system___setbaud_ret
26db8     2D 00 64 FD | 	ret
26dbc                 | 
26dbc                 | __system___txraw
26dbc     01 4A 05 F6 | 	mov	COUNT_, #1
26dc0     A8 00 A0 FD | 	call	#pushregs_
26dc4     09 27 02 F6 | 	mov	local01, arg01
26dc8     97 06 48 FB | 	callpa	#(@LR__3091-@LR__3090)>>2,fcache_load_ptr_
26dcc                 | LR__3090
26dcc     3E FA 9D FA | 	rdpin	result1, #62 wc
26dd0     FE FC A1 F1 | 	subx	result2, result2
26dd4     F4 FF 9F CD |  if_b	jmp	#LR__3090
26dd8                 | LR__3091
26dd8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
26ddc     C2 01 00 AF 
26de0     00 12 06 A6 |  if_e	mov	arg01, ##230400
26de4     80 FF BF AD |  if_e	call	#__system___setbaud
26de8     58 7C 64 FD | 	drvl	#62
26dec     3E 26 26 FC | 	wypin	local01, #62
26df0     01 FA 05 F6 | 	mov	result1, #1
26df4     A7 F0 03 F6 | 	mov	ptra, fp
26df8     B2 00 A0 FD | 	call	#popregs_
26dfc                 | __system___txraw_ret
26dfc     2D 00 64 FD | 	ret
26e00                 | 
26e00                 | __system___rxraw
26e00     0D 4A 05 F6 | 	mov	COUNT_, #13
26e04     A8 00 A0 FD | 	call	#pushregs_
26e08     09 27 02 F6 | 	mov	local01, arg01
26e0c     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
26e10     C2 01 00 AF 
26e14     00 12 06 A6 |  if_e	mov	arg01, ##230400
26e18     4C FF BF AD |  if_e	call	#__system___setbaud
26e1c     00 26 0E F2 | 	cmp	local01, #0 wz
26e20     20 00 90 AD |  if_e	jmp	#LR__3100
26e24     14 2A 06 FB | 	rdlong	local03, #20
26e28     0A 2A 46 F0 | 	shr	local03, #10
26e2c     15 27 02 FD | 	qmul	local01, local03
26e30     1A FA 61 FD | 	getct	result1
26e34     18 2C 62 FD | 	getqx	local04
26e38     16 FB 01 F1 | 	add	result1, local04
26e3c     FD 2E 02 F6 | 	mov	local05, result1
26e40     04 00 90 FD | 	jmp	#LR__3101
26e44                 | LR__3100
26e44     00 2E 06 F6 | 	mov	local05, #0
26e48                 | LR__3101
26e48     01 30 66 F6 | 	neg	local06, #1
26e4c     3F 32 06 F6 | 	mov	local07, #63
26e50     00 34 06 F6 | 	mov	local08, #0
26e54     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26e58     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
26e5c     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
26e60                 | LR__3102
26e60     08 36 16 F4 | 	testb	local09, #8 wc
26e64     09 36 76 F4 | 	testbn	local09, #9 andc
26e68     0A 36 46 F0 | 	shr	local09, #10
26e6c     01 34 06 C6 |  if_b	mov	local08, #1
26e70     40 7E 6C 3D |  if_ae	testp	#63 wz
26e74     01 34 06 26 |  if_nc_and_z	mov	local08, #1
26e78     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
26e7c     04 36 46 20 |  if_nc_and_z	shr	local09, #4
26e80                 | LR__3103
26e80     00 28 06 F6 | 	mov	local02, #0
26e84     00 34 0E F2 | 	cmp	local08, #0 wz
26e88     01 28 66 56 |  if_ne	neg	local02, #1
26e8c     00 38 06 F6 | 	mov	local10, #0
26e90     00 2A 06 F6 | 	mov	local03, #0
26e94     00 26 0E F2 | 	cmp	local01, #0 wz
26e98     01 2A 66 56 |  if_ne	neg	local03, #1
26e9c     00 2C 06 F6 | 	mov	local04, #0
26ea0     00 3A 06 F6 | 	mov	local11, #0
26ea4     17 3D 02 F6 | 	mov	local12, local05
26ea8     1A FA 61 FD | 	getct	result1
26eac     FD 3E 02 F6 | 	mov	local13, result1
26eb0     1F 3D 82 F1 | 	sub	local12, local13
26eb4     00 3C 56 F2 | 	cmps	local12, #0 wc
26eb8     00 3A 26 C6 |  if_b	not	local11, #0
26ebc     00 3A 0E F2 | 	cmp	local11, #0 wz
26ec0     00 2C 26 56 |  if_ne	not	local04, #0
26ec4     16 2B CA F7 | 	test	local03, local04 wz
26ec8     00 38 26 56 |  if_ne	not	local10, #0
26ecc     1C 29 4A F5 | 	or	local02, local10 wz
26ed0     8C FF 9F AD |  if_e	jmp	#LR__3102
26ed4     00 34 0E F2 | 	cmp	local08, #0 wz
26ed8     1B 31 02 56 |  if_ne	mov	local06, local09
26edc     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
26ee0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26ee4     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
26ee8     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
26eec     18 FB 01 F6 | 	mov	result1, local06
26ef0     A7 F0 03 F6 | 	mov	ptra, fp
26ef4     B2 00 A0 FD | 	call	#popregs_
26ef8                 | __system___rxraw_ret
26ef8     2D 00 64 FD | 	ret
26efc                 | 
26efc                 | __system___getus
26efc     1A FC 71 FD | 	getct	result2 wc
26f00     1A 00 62 FD | 	getct	_var01
26f04     10 E6 05 F1 | 	add	ptr___system__dat__, #16
26f08     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
26f0c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
26f10     20 00 90 5D |  if_ne	jmp	#LR__3110
26f14     14 02 06 FB | 	rdlong	_var02, #20
26f18     A1 07 00 FF 
26f1c     40 02 16 FD | 	qdiv	_var02, ##1000000
26f20     10 E6 05 F1 | 	add	ptr___system__dat__, #16
26f24     18 FA 61 FD | 	getqx	result1
26f28     FD 02 02 F6 | 	mov	_var02, result1
26f2c     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
26f30     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
26f34                 | LR__3110
26f34     01 FD 11 FD | 	qdiv	result2, _var02
26f38     19 FC 61 FD | 	getqy	result2
26f3c     28 FC 61 FD | 	setq	result2
26f40     01 01 12 FD | 	qdiv	_var01, _var02
26f44     18 FA 61 FD | 	getqx	result1
26f48                 | __system___getus_ret
26f48     2D 00 64 FD | 	ret
26f4c                 | 
26f4c                 | __system____builtin_memmove
26f4c     09 01 02 F6 | 	mov	_var01, arg01
26f50     0A 13 52 F2 | 	cmps	arg01, arg02 wc
26f54     10 00 90 CD |  if_b	jmp	#LR__3120
26f58     0A 03 02 F6 | 	mov	_var02, arg02
26f5c     0B 03 02 F1 | 	add	_var02, arg03
26f60     01 13 52 F2 | 	cmps	arg01, _var02 wc
26f64     48 00 90 CD |  if_b	jmp	#LR__3126
26f68                 | LR__3120
26f68     0B 05 02 F6 | 	mov	_var03, arg03
26f6c     02 04 4E F0 | 	shr	_var03, #2 wz
26f70     18 00 90 AD |  if_e	jmp	#LR__3125
26f74     97 0A 48 FB | 	callpa	#(@LR__3123-@LR__3121)>>2,fcache_load_ptr_
26f78                 | LR__3121
26f78     02 09 D8 FC | 	rep	@LR__3124, _var03
26f7c                 | LR__3122
26f7c     0A 05 02 FB | 	rdlong	_var03, arg02
26f80     09 05 62 FC | 	wrlong	_var03, arg01
26f84     04 12 06 F1 | 	add	arg01, #4
26f88     04 14 06 F1 | 	add	arg02, #4
26f8c                 | LR__3123
26f8c                 | LR__3124
26f8c                 | LR__3125
26f8c     02 16 CE F7 | 	test	arg03, #2 wz
26f90     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
26f94     09 03 52 5C |  if_ne	wrword	_var02, arg01
26f98     02 12 06 51 |  if_ne	add	arg01, #2
26f9c     02 14 06 51 |  if_ne	add	arg02, #2
26fa0     01 16 CE F7 | 	test	arg03, #1 wz
26fa4     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
26fa8     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
26fac     28 00 90 FD | 	jmp	#LR__3132
26fb0                 | LR__3126
26fb0     0B 13 02 F1 | 	add	arg01, arg03
26fb4     0B 15 02 F1 | 	add	arg02, arg03
26fb8     0B 07 0A F6 | 	mov	_var04, arg03 wz
26fbc     18 00 90 AD |  if_e	jmp	#LR__3131
26fc0     97 0A 48 FB | 	callpa	#(@LR__3129-@LR__3127)>>2,fcache_load_ptr_
26fc4                 | LR__3127
26fc4     03 09 D8 FC | 	rep	@LR__3130, _var04
26fc8                 | LR__3128
26fc8     01 12 86 F1 | 	sub	arg01, #1
26fcc     01 14 86 F1 | 	sub	arg02, #1
26fd0     0A 03 C2 FA | 	rdbyte	_var02, arg02
26fd4     09 03 42 FC | 	wrbyte	_var02, arg01
26fd8                 | LR__3129
26fd8                 | LR__3130
26fd8                 | LR__3131
26fd8                 | LR__3132
26fd8     00 FB 01 F6 | 	mov	result1, _var01
26fdc                 | __system____builtin_memmove_ret
26fdc     2D 00 64 FD | 	ret
26fe0                 | 
26fe0                 | __system__longmove
26fe0     09 01 02 F6 | 	mov	_var01, arg01
26fe4     0A 13 52 F2 | 	cmps	arg01, arg02 wc
26fe8     24 00 90 3D |  if_ae	jmp	#LR__3144
26fec     0B 03 0A F6 | 	mov	_var02, arg03 wz
26ff0     54 00 90 AD |  if_e	jmp	#LR__3150
26ff4     97 0A 48 FB | 	callpa	#(@LR__3142-@LR__3140)>>2,fcache_load_ptr_
26ff8                 | LR__3140
26ff8     01 09 D8 FC | 	rep	@LR__3143, _var02
26ffc                 | LR__3141
26ffc     0A 03 02 FB | 	rdlong	_var02, arg02
27000     09 03 62 FC | 	wrlong	_var02, arg01
27004     04 12 06 F1 | 	add	arg01, #4
27008     04 14 06 F1 | 	add	arg02, #4
2700c                 | LR__3142
2700c                 | LR__3143
2700c     38 00 90 FD | 	jmp	#LR__3150
27010                 | LR__3144
27010     0B 03 02 F6 | 	mov	_var02, arg03
27014     02 02 66 F0 | 	shl	_var02, #2
27018     01 13 02 F1 | 	add	arg01, _var02
2701c     0B 05 02 F6 | 	mov	_var03, arg03
27020     02 04 66 F0 | 	shl	_var03, #2
27024     02 15 02 F1 | 	add	arg02, _var03
27028     0B 07 0A F6 | 	mov	_var04, arg03 wz
2702c     18 00 90 AD |  if_e	jmp	#LR__3149
27030     97 0A 48 FB | 	callpa	#(@LR__3147-@LR__3145)>>2,fcache_load_ptr_
27034                 | LR__3145
27034     03 09 D8 FC | 	rep	@LR__3148, _var04
27038                 | LR__3146
27038     04 12 86 F1 | 	sub	arg01, #4
2703c     04 14 86 F1 | 	sub	arg02, #4
27040     0A 07 02 FB | 	rdlong	_var04, arg02
27044     09 07 62 FC | 	wrlong	_var04, arg01
27048                 | LR__3147
27048                 | LR__3148
27048                 | LR__3149
27048                 | LR__3150
27048     00 FB 01 F6 | 	mov	result1, _var01
2704c                 | __system__longmove_ret
2704c     2D 00 64 FD | 	ret
27050                 | 
27050                 | __system____builtin_strcpy
27050     09 01 02 F6 | 	mov	_var01, arg01
27054     97 0A 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
27058                 | LR__3160
27058     0A FB C9 FA | 	rdbyte	result1, arg02 wz
2705c     09 FB 41 FC | 	wrbyte	result1, arg01
27060     01 14 06 F1 | 	add	arg02, #1
27064     01 12 06 F1 | 	add	arg01, #1
27068     EC FF 9F 5D |  if_ne	jmp	#LR__3160
2706c                 | LR__3161
2706c     00 FB 01 F6 | 	mov	result1, _var01
27070                 | __system____builtin_strcpy_ret
27070     2D 00 64 FD | 	ret
27074                 | 
27074                 | __system____topofstack
27074     00 4A 05 F6 | 	mov	COUNT_, #0
27078     A8 00 A0 FD | 	call	#pushregs_
2707c     08 F0 07 F1 | 	add	ptra, #8
27080     04 4E 05 F1 | 	add	fp, #4
27084     A7 12 62 FC | 	wrlong	arg01, fp
27088     A7 FA 01 F6 | 	mov	result1, fp
2708c     04 4E 85 F1 | 	sub	fp, #4
27090     A7 F0 03 F6 | 	mov	ptra, fp
27094     B2 00 A0 FD | 	call	#popregs_
27098                 | __system____topofstack_ret
27098     2D 00 64 FD | 	ret
2709c                 | 
2709c                 | __system___lockmem
2709c     00 FA 05 F6 | 	mov	result1, #0
270a0     01 FA 61 FD | 	cogid	result1
270a4     00 FB 05 F1 | 	add	result1, #256
270a8                 | LR__3170
270a8     09 01 0A FB | 	rdlong	_var01, arg01 wz
270ac     09 FB 61 AC |  if_e	wrlong	result1, arg01
270b0     09 01 02 AB |  if_e	rdlong	_var01, arg01
270b4     09 01 02 AB |  if_e	rdlong	_var01, arg01
270b8     FD 00 0A F2 | 	cmp	_var01, result1 wz
270bc     E8 FF 9F 5D |  if_ne	jmp	#LR__3170
270c0                 | __system___lockmem_ret
270c0     2D 00 64 FD | 	ret
270c4                 | 
270c4                 | __system___string_cmp
270c4     97 14 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
270c8                 | LR__3180
270c8     09 01 C2 FA | 	rdbyte	_var01, arg01
270cc     0A 03 C2 FA | 	rdbyte	_var02, arg02
270d0     00 05 02 F6 | 	mov	_var03, _var01
270d4     01 05 8A F1 | 	sub	_var03, _var02 wz
270d8     01 12 06 F1 | 	add	arg01, #1
270dc     01 14 06 F1 | 	add	arg02, #1
270e0     0C 00 90 5D |  if_ne	jmp	#LR__3182
270e4     00 00 0E F2 | 	cmp	_var01, #0 wz
270e8     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
270ec     D8 FF 9F 5D |  if_ne	jmp	#LR__3180
270f0                 | LR__3181
270f0                 | LR__3182
270f0     02 FB 01 F6 | 	mov	result1, _var03
270f4                 | __system___string_cmp_ret
270f4     2D 00 64 FD | 	ret
270f8                 | 
270f8                 | __system___string_concat
270f8     05 4A 05 F6 | 	mov	COUNT_, #5
270fc     A8 00 A0 FD | 	call	#pushregs_
27100     09 27 02 F6 | 	mov	local01, arg01
27104     0A 29 02 F6 | 	mov	local02, arg02
27108     13 13 02 F6 | 	mov	arg01, local01
2710c     09 2B 02 F6 | 	mov	local03, arg01
27110     97 06 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
27114                 | LR__3190
27114     15 FB C9 FA | 	rdbyte	result1, local03 wz
27118     01 2A 06 51 |  if_ne	add	local03, #1
2711c     F4 FF 9F 5D |  if_ne	jmp	#LR__3190
27120                 | LR__3191
27120     09 2B 82 F1 | 	sub	local03, arg01
27124     15 2D 02 F6 | 	mov	local04, local03
27128     14 13 02 F6 | 	mov	arg01, local02
2712c     09 2B 02 F6 | 	mov	local03, arg01
27130     97 06 48 FB | 	callpa	#(@LR__3193-@LR__3192)>>2,fcache_load_ptr_
27134                 | LR__3192
27134     15 FB C9 FA | 	rdbyte	result1, local03 wz
27138     01 2A 06 51 |  if_ne	add	local03, #1
2713c     F4 FF 9F 5D |  if_ne	jmp	#LR__3192
27140                 | LR__3193
27140     09 2B 82 F1 | 	sub	local03, arg01
27144     16 13 02 F6 | 	mov	arg01, local04
27148     15 13 02 F1 | 	add	arg01, local03
2714c     01 12 06 F1 | 	add	arg01, #1
27150     EC 40 B0 FD | 	call	#__system___gc_alloc_managed
27154     FD 2E 0A F6 | 	mov	local05, result1 wz
27158     28 00 90 AD |  if_e	jmp	#LR__3194
2715c     17 13 02 F6 | 	mov	arg01, local05
27160     13 15 02 F6 | 	mov	arg02, local01
27164     16 17 02 F6 | 	mov	arg03, local04
27168     E0 FD BF FD | 	call	#__system____builtin_memmove
2716c     17 13 02 F6 | 	mov	arg01, local05
27170     16 13 02 F1 | 	add	arg01, local04
27174     01 2A 06 F1 | 	add	local03, #1
27178     14 15 02 F6 | 	mov	arg02, local02
2717c     15 17 02 F6 | 	mov	arg03, local03
27180     C8 FD BF FD | 	call	#__system____builtin_memmove
27184                 | LR__3194
27184     17 FB 01 F6 | 	mov	result1, local05
27188     A7 F0 03 F6 | 	mov	ptra, fp
2718c     B2 00 A0 FD | 	call	#popregs_
27190                 | __system___string_concat_ret
27190     2D 00 64 FD | 	ret
27194                 | 
27194                 | __system___tx
27194     02 4A 05 F6 | 	mov	COUNT_, #2
27198     A8 00 A0 FD | 	call	#pushregs_
2719c     09 27 02 F6 | 	mov	local01, arg01
271a0     0A 26 0E F2 | 	cmp	local01, #10 wz
271a4     18 00 90 5D |  if_ne	jmp	#LR__3200
271a8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
271ac     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
271b0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
271b4     02 28 CE F7 | 	test	local02, #2 wz
271b8     0D 12 06 56 |  if_ne	mov	arg01, #13
271bc     FC FB BF 5D |  if_ne	call	#__system___txraw
271c0                 | LR__3200
271c0     13 13 02 F6 | 	mov	arg01, local01
271c4     F4 FB BF FD | 	call	#__system___txraw
271c8     A7 F0 03 F6 | 	mov	ptra, fp
271cc     B2 00 A0 FD | 	call	#popregs_
271d0                 | __system___tx_ret
271d0     2D 00 64 FD | 	ret
271d4                 | 
271d4                 | __system___rx
271d4     01 4A 05 F6 | 	mov	COUNT_, #1
271d8     A8 00 A0 FD | 	call	#pushregs_
271dc                 | LR__3210
271dc     00 12 06 F6 | 	mov	arg01, #0
271e0     1C FC BF FD | 	call	#__system___rxraw
271e4     FD 26 02 F6 | 	mov	local01, result1
271e8     FF FF 7F FF 
271ec     FF 27 0E F2 | 	cmp	local01, ##-1 wz
271f0     E8 FF 9F AD |  if_e	jmp	#LR__3210
271f4     0D 26 0E F2 | 	cmp	local01, #13 wz
271f8     14 00 90 5D |  if_ne	jmp	#LR__3211
271fc     08 E6 05 F1 | 	add	ptr___system__dat__, #8
27200     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
27204     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
27208     02 FA CD F7 | 	test	result1, #2 wz
2720c     0A 26 06 56 |  if_ne	mov	local01, #10
27210                 | LR__3211
27210     08 E6 05 F1 | 	add	ptr___system__dat__, #8
27214     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
27218     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2721c     01 12 CE F7 | 	test	arg01, #1 wz
27220     1C 00 90 AD |  if_e	jmp	#LR__3214
27224     7F 26 0E F2 | 	cmp	local01, #127 wz
27228     0C 00 90 5D |  if_ne	jmp	#LR__3212
2722c     08 12 06 F6 | 	mov	arg01, #8
27230     60 FF BF FD | 	call	#__system___tx
27234     08 00 90 FD | 	jmp	#LR__3213
27238                 | LR__3212
27238     13 13 02 F6 | 	mov	arg01, local01
2723c     54 FF BF FD | 	call	#__system___tx
27240                 | LR__3213
27240                 | LR__3214
27240     13 FB 01 F6 | 	mov	result1, local01
27244     A7 F0 03 F6 | 	mov	ptra, fp
27248     B2 00 A0 FD | 	call	#popregs_
2724c                 | __system___rx_ret
2724c     2D 00 64 FD | 	ret
27250                 | 
27250                 | __system___pinwrite
27250     09 01 02 F6 | 	mov	_var01, arg01
27254     1F 00 06 F5 | 	and	_var01, #31
27258     20 12 CE F7 | 	test	arg01, #32 wz
2725c     06 12 46 F0 | 	shr	arg01, #6
27260     09 13 CA F9 | 	bmask	arg01, arg01
27264     00 13 62 F0 | 	shl	arg01, _var01
27268     00 15 62 F0 | 	shl	arg02, _var01
2726c     1C 00 90 AD |  if_e	jmp	#LR__3220
27270     09 F7 43 F5 | 	or	dirb, arg01
27274     FD 01 02 F6 | 	mov	_var01, outb
27278     09 01 22 F5 | 	andn	_var01, arg01
2727c     09 15 02 F5 | 	and	arg02, arg01
27280     0A 01 42 F5 | 	or	_var01, arg02
27284     00 FB 03 F6 | 	mov	outb, _var01
27288     18 00 90 FD | 	jmp	#LR__3221
2728c                 | LR__3220
2728c     09 F5 43 F5 | 	or	dira, arg01
27290     FC 01 02 F6 | 	mov	_var01, outa
27294     09 01 22 F5 | 	andn	_var01, arg01
27298     09 15 02 F5 | 	and	arg02, arg01
2729c     0A 01 42 F5 | 	or	_var01, arg02
272a0     00 F9 03 F6 | 	mov	outa, _var01
272a4                 | LR__3221
272a4                 | __system___pinwrite_ret
272a4     2D 00 64 FD | 	ret
272a8                 | 
272a8                 | __system___basic_read_line
272a8     06 4A 05 F6 | 	mov	COUNT_, #6
272ac     A8 00 A0 FD | 	call	#pushregs_
272b0     09 27 02 F6 | 	mov	local01, arg01
272b4     00 28 06 F6 | 	mov	local02, #0
272b8     18 2A 06 F6 | 	mov	local03, #24
272bc     00 2C 06 F6 | 	mov	local04, #0
272c0     18 12 06 F6 | 	mov	arg01, #24
272c4     78 3F B0 FD | 	call	#__system___gc_alloc_managed
272c8     FD 2E 0A F6 | 	mov	local05, result1 wz
272cc     17 FB 01 A6 |  if_e	mov	result1, local05
272d0     B0 00 90 AD |  if_e	jmp	#LR__3233
272d4                 | LR__3230
272d4     13 13 02 F6 | 	mov	arg01, local01
272d8     7C 0B B0 FD | 	call	#__system___basic_get_char
272dc     FD 30 02 F6 | 	mov	local06, result1
272e0     01 30 56 F2 | 	cmps	local06, #1 wc
272e4     8C 00 90 CD |  if_b	jmp	#LR__3232
272e8     0A 30 0E F2 | 	cmp	local06, #10 wz
272ec     10 00 90 5D |  if_ne	jmp	#LR__3231
272f0     00 2C 0E F2 | 	cmp	local04, #0 wz
272f4     01 28 56 52 |  if_ne	cmps	local02, #1 wc
272f8     01 28 86 11 |  if_a	sub	local02, #1
272fc     74 00 90 FD | 	jmp	#LR__3232
27300                 | LR__3231
27300     0D 30 0E F2 | 	cmp	local06, #13 wz
27304     01 2C 06 A6 |  if_e	mov	local04, #1
27308     00 2C 06 56 |  if_ne	mov	local04, #0
2730c     08 30 0E F2 | 	cmp	local06, #8 wz
27310     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
27314     01 28 56 A2 |  if_e	cmps	local02, #1 wc
27318     01 28 86 21 |  if_nc_and_z	sub	local02, #1
2731c     B4 FF 9F AD |  if_e	jmp	#LR__3230
27320     17 17 02 F6 | 	mov	arg03, local05
27324     14 17 02 F1 | 	add	arg03, local02
27328     0B 31 42 FC | 	wrbyte	local06, arg03
2732c     01 28 06 F1 | 	add	local02, #1
27330     15 29 0A F2 | 	cmp	local02, local03 wz
27334     9C FF 9F 5D |  if_ne	jmp	#LR__3230
27338     15 13 02 F6 | 	mov	arg01, local03
2733c     20 12 06 F1 | 	add	arg01, #32
27340     FC 3E B0 FD | 	call	#__system___gc_alloc_managed
27344     FD 30 0A F6 | 	mov	local06, result1 wz
27348     18 FB 01 A6 |  if_e	mov	result1, local06
2734c     34 00 90 AD |  if_e	jmp	#LR__3233
27350     18 13 02 F6 | 	mov	arg01, local06
27354     17 15 02 F6 | 	mov	arg02, local05
27358     15 17 02 F6 | 	mov	arg03, local03
2735c     EC FB BF FD | 	call	#__system____builtin_memmove
27360     20 2A 06 F1 | 	add	local03, #32
27364     17 13 02 F6 | 	mov	arg01, local05
27368     10 40 B0 FD | 	call	#__system___gc_free
2736c     18 2F 02 F6 | 	mov	local05, local06
27370     60 FF 9F FD | 	jmp	#LR__3230
27374                 | LR__3232
27374     17 31 02 F6 | 	mov	local06, local05
27378     14 31 02 F1 | 	add	local06, local02
2737c     18 01 48 FC | 	wrbyte	#0, local06
27380     17 FB 01 F6 | 	mov	result1, local05
27384                 | LR__3233
27384     A7 F0 03 F6 | 	mov	ptra, fp
27388     B2 00 A0 FD | 	call	#popregs_
2738c                 | __system___basic_read_line_ret
2738c     2D 00 64 FD | 	ret
27390                 | 
27390                 | __system___waitms
27390     09 01 02 F6 | 	mov	_var01, arg01
27394     1A 02 62 FD | 	getct	_var02
27398     14 04 06 FB | 	rdlong	_var03, #20
2739c     97 14 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
273a0                 | LR__3240
273a0     01 00 00 FF 
273a4     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
273a8     1C 00 90 CD |  if_b	jmp	#LR__3242
273ac     02 03 02 F1 | 	add	_var02, _var03
273b0     01 13 02 F6 | 	mov	arg01, _var02
273b4     00 12 66 FA | 	addct1	arg01, #0
273b8     24 22 60 FD | 	waitct1
273bc     01 00 00 FF 
273c0     E8 01 86 F1 | 	sub	_var01, ##1000
273c4     D8 FF 9F FD | 	jmp	#LR__3240
273c8                 | LR__3241
273c8                 | LR__3242
273c8     01 00 56 F2 | 	cmps	_var01, #1 wc
273cc     28 00 90 CD |  if_b	jmp	#LR__3243
273d0     02 01 02 FD | 	qmul	_var01, _var03
273d4     01 00 00 FF 
273d8     E8 17 06 F6 | 	mov	arg03, ##1000
273dc     19 FA 61 FD | 	getqy	result1
273e0     18 12 62 FD | 	getqx	arg01
273e4     28 FA 61 FD | 	setq	result1
273e8     0B 13 12 FD | 	qdiv	arg01, arg03
273ec     18 12 62 FD | 	getqx	arg01
273f0     01 13 62 FA | 	addct1	arg01, _var02
273f4     24 22 60 FD | 	waitct1
273f8                 | LR__3243
273f8                 | __system___waitms_ret
273f8     2D 00 64 FD | 	ret
273fc                 | 
273fc                 | __system___waitus
273fc     09 01 02 F6 | 	mov	_var01, arg01
27400     1A 02 62 FD | 	getct	_var02
27404     14 04 06 FB | 	rdlong	_var03, #20
27408     97 14 48 FB | 	callpa	#(@LR__3251-@LR__3250)>>2,fcache_load_ptr_
2740c                 | LR__3250
2740c     A1 07 00 FF 
27410     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
27414     1C 00 90 CD |  if_b	jmp	#LR__3252
27418     02 03 02 F1 | 	add	_var02, _var03
2741c     01 13 02 F6 | 	mov	arg01, _var02
27420     00 12 66 FA | 	addct1	arg01, #0
27424     24 22 60 FD | 	waitct1
27428     A1 07 00 FF 
2742c     40 00 86 F1 | 	sub	_var01, ##1000000
27430     D8 FF 9F FD | 	jmp	#LR__3250
27434                 | LR__3251
27434                 | LR__3252
27434     01 00 56 F2 | 	cmps	_var01, #1 wc
27438     28 00 90 CD |  if_b	jmp	#LR__3253
2743c     02 01 02 FD | 	qmul	_var01, _var03
27440     A1 07 00 FF 
27444     40 16 06 F6 | 	mov	arg03, ##1000000
27448     19 FA 61 FD | 	getqy	result1
2744c     18 12 62 FD | 	getqx	arg01
27450     28 FA 61 FD | 	setq	result1
27454     0B 13 12 FD | 	qdiv	arg01, arg03
27458     18 FA 61 FD | 	getqx	result1
2745c     FD 02 62 FA | 	addct1	_var02, result1
27460     24 22 60 FD | 	waitct1
27464                 | LR__3253
27464                 | __system___waitus_ret
27464     2D 00 64 FD | 	ret
27468                 | 
27468                 | __system___mount
27468     0B 4A 05 F6 | 	mov	COUNT_, #11
2746c     A8 00 A0 FD | 	call	#pushregs_
27470     09 27 02 F6 | 	mov	local01, arg01
27474     0A 29 0A F6 | 	mov	local02, arg02 wz
27478     01 2A 66 F6 | 	neg	local03, #1
2747c     01 FA 65 A6 |  if_e	neg	result1, #1
27480     98 02 90 AD |  if_e	jmp	#LR__3275
27484     13 FB C1 FA | 	rdbyte	result1, local01
27488     2F FA 0D F2 | 	cmp	result1, #47 wz
2748c     28 00 90 5D |  if_ne	jmp	#LR__3262
27490     13 13 02 F6 | 	mov	arg01, local01
27494     09 2D 02 F6 | 	mov	local04, arg01
27498     97 06 48 FB | 	callpa	#(@LR__3261-@LR__3260)>>2,fcache_load_ptr_
2749c                 | LR__3260
2749c     16 FB C9 FA | 	rdbyte	result1, local04 wz
274a0     01 2C 06 51 |  if_ne	add	local04, #1
274a4     F4 FF 9F 5D |  if_ne	jmp	#LR__3260
274a8                 | LR__3261
274a8     09 2D 82 F1 | 	sub	local04, arg01
274ac     16 FB 01 F6 | 	mov	result1, local04
274b0     10 FA 55 F2 | 	cmps	result1, #16 wc
274b4     14 00 90 CD |  if_b	jmp	#LR__3263
274b8                 | LR__3262
274b8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
274bc     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
274c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
274c4     01 FA 65 F6 | 	neg	result1, #1
274c8     50 02 90 FD | 	jmp	#LR__3275
274cc                 | LR__3263
274cc     00 2E 06 F6 | 	mov	local05, #0
274d0                 | LR__3264
274d0     04 2E 56 F2 | 	cmps	local05, #4 wc
274d4     B0 00 90 3D |  if_ae	jmp	#LR__3269
274d8     17 13 02 F6 | 	mov	arg01, local05
274dc     02 12 66 F0 | 	shl	arg01, #2
274e0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
274e4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
274e8     09 FB 09 FB | 	rdlong	result1, arg01 wz
274ec     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
274f0     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
274f4     17 2B 02 86 |  if_c_and_z	mov	local03, local05
274f8     84 00 90 8D |  if_c_and_z	jmp	#LR__3268
274fc     17 13 02 F6 | 	mov	arg01, local05
27500     02 12 66 F0 | 	shl	arg01, #2
27504     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27508     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2750c     09 13 02 FB | 	rdlong	arg01, arg01
27510     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27514     09 2D 02 F6 | 	mov	local04, arg01
27518     97 06 48 FB | 	callpa	#(@LR__3266-@LR__3265)>>2,fcache_load_ptr_
2751c                 | LR__3265
2751c     16 FB C9 FA | 	rdbyte	result1, local04 wz
27520     01 2C 06 51 |  if_ne	add	local04, #1
27524     F4 FF 9F 5D |  if_ne	jmp	#LR__3265
27528                 | LR__3266
27528     09 2D 82 F1 | 	sub	local04, arg01
2752c     16 31 02 F6 | 	mov	local06, local04
27530     18 13 02 F6 | 	mov	arg01, local06
27534     13 13 02 F1 | 	add	arg01, local01
27538     09 FB C1 FA | 	rdbyte	result1, arg01
2753c     2F FA 0D F2 | 	cmp	result1, #47 wz
27540     18 33 02 56 |  if_ne	mov	local07, local06
27544     13 33 02 51 |  if_ne	add	local07, local01
27548     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
2754c     30 00 90 5D |  if_ne	jmp	#LR__3267
27550     17 17 02 F6 | 	mov	arg03, local05
27554     02 16 66 F0 | 	shl	arg03, #2
27558     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2755c     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
27560     0B 15 02 FB | 	rdlong	arg02, arg03
27564     13 13 02 F6 | 	mov	arg01, local01
27568     18 17 02 F6 | 	mov	arg03, local06
2756c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27570     4C 51 B0 FD | 	call	#__system__strncmp
27574     00 FA 0D F2 | 	cmp	result1, #0 wz
27578     17 2B 02 A6 |  if_e	mov	local03, local05
2757c     08 00 90 AD |  if_e	jmp	#LR__3269
27580                 | LR__3267
27580                 | LR__3268
27580     01 2E 06 F1 | 	add	local05, #1
27584     48 FF 9F FD | 	jmp	#LR__3264
27588                 | LR__3269
27588     FF FF 7F FF 
2758c     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
27590     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
27594     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
27598     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2759c     01 FA 65 A6 |  if_e	neg	result1, #1
275a0     78 01 90 AD |  if_e	jmp	#LR__3275
275a4     15 2F 02 F6 | 	mov	local05, local03
275a8     17 33 02 F6 | 	mov	local07, local05
275ac     02 32 66 F0 | 	shl	local07, #2
275b0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
275b4     F3 32 02 F1 | 	add	local07, ptr___system__dat__
275b8     19 31 0A FB | 	rdlong	local06, local07 wz
275bc     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
275c0     58 00 90 AD |  if_e	jmp	#LR__3270
275c4     4C 30 06 F1 | 	add	local06, #76
275c8     18 33 0A FB | 	rdlong	local07, local06 wz
275cc     4C 30 86 F1 | 	sub	local06, #76
275d0     48 00 90 AD |  if_e	jmp	#LR__3270
275d4     4C 30 06 F1 | 	add	local06, #76
275d8     18 33 02 FB | 	rdlong	local07, local06
275dc     19 2B 02 F6 | 	mov	local03, local07
275e0     13 32 46 F7 | 	zerox	local07, #19
275e4     14 2A 46 F0 | 	shr	local03, #20
275e8     02 2A 66 F0 | 	shl	local03, #2
275ec     ED 2A 02 F1 | 	add	local03, __methods__
275f0     15 2B 02 FB | 	rdlong	local03, local03
275f4     17 31 02 F6 | 	mov	local06, local05
275f8     02 30 66 F0 | 	shl	local06, #2
275fc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27600     F3 30 02 F1 | 	add	local06, ptr___system__dat__
27604     18 13 02 FB | 	rdlong	arg01, local06
27608     F2 30 02 F6 | 	mov	local06, objptr
2760c     19 E5 01 F6 | 	mov	objptr, local07
27610     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27614     2D 2A 62 FD | 	call	local03
27618     18 E5 01 F6 | 	mov	objptr, local06
2761c                 | LR__3270
2761c     17 35 02 F6 | 	mov	local08, local05
27620     02 34 66 F0 | 	shl	local08, #2
27624     74 E6 05 F1 | 	add	ptr___system__dat__, #116
27628     F3 34 02 F1 | 	add	local08, ptr___system__dat__
2762c     1A 29 62 FC | 	wrlong	local02, local08
27630     00 28 0E F2 | 	cmp	local02, #0 wz
27634     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
27638     18 00 90 5D |  if_ne	jmp	#LR__3271
2763c     02 2E 66 F0 | 	shl	local05, #2
27640     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27644     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
27648     17 01 68 FC | 	wrlong	#0, local05
2764c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27650     C4 00 90 FD | 	jmp	#LR__3274
27654                 | LR__3271
27654     17 37 02 F6 | 	mov	local09, local05
27658     04 36 66 F0 | 	shl	local09, #4
2765c     24 E6 05 F1 | 	add	ptr___system__dat__, #36
27660     F3 36 02 F1 | 	add	local09, ptr___system__dat__
27664     1B 13 02 F6 | 	mov	arg01, local09
27668     13 15 02 F6 | 	mov	arg02, local01
2766c     10 16 06 F6 | 	mov	arg03, #16
27670     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
27674     9C 4F B0 FD | 	call	#__system__strncpy
27678     48 28 06 F1 | 	add	local02, #72
2767c     14 35 0A FB | 	rdlong	local08, local02 wz
27680     48 28 86 F1 | 	sub	local02, #72
27684     7C 00 90 AD |  if_e	jmp	#LR__3273
27688     48 28 06 F1 | 	add	local02, #72
2768c     14 35 02 FB | 	rdlong	local08, local02
27690     1A 39 02 F6 | 	mov	local10, local08
27694     13 34 46 F7 | 	zerox	local08, #19
27698     14 38 46 F0 | 	shr	local10, #20
2769c     02 38 66 F0 | 	shl	local10, #2
276a0     ED 38 02 F1 | 	add	local10, __methods__
276a4     1C 39 02 FB | 	rdlong	local10, local10
276a8     1B 13 02 F6 | 	mov	arg01, local09
276ac     F2 3A 02 F6 | 	mov	local11, objptr
276b0     1A E5 01 F6 | 	mov	objptr, local08
276b4     2D 38 62 FD | 	call	local10
276b8     1D E5 01 F6 | 	mov	objptr, local11
276bc     FD 12 0A F6 | 	mov	arg01, result1 wz
276c0     40 00 90 AD |  if_e	jmp	#LR__3272
276c4     17 35 02 F6 | 	mov	local08, local05
276c8     02 34 66 F0 | 	shl	local08, #2
276cc     74 E6 05 F1 | 	add	ptr___system__dat__, #116
276d0     F3 34 02 F1 | 	add	local08, ptr___system__dat__
276d4     1A 01 68 FC | 	wrlong	#0, local08
276d8     02 2E 66 F0 | 	shl	local05, #2
276dc     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
276e0     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
276e4     17 01 68 FC | 	wrlong	#0, local05
276e8     09 13 6A F6 | 	neg	arg01, arg01 wz
276ec     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
276f0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
276f4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
276f8     01 FA 65 56 |  if_ne	neg	result1, #1
276fc     00 FA 05 A6 |  if_e	mov	result1, #0
27700     18 00 90 FD | 	jmp	#LR__3275
27704                 | LR__3272
27704                 | LR__3273
27704     02 2E 66 F0 | 	shl	local05, #2
27708     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2770c     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
27710     17 37 62 FC | 	wrlong	local09, local05
27714     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27718                 | LR__3274
27718     00 FA 05 F6 | 	mov	result1, #0
2771c                 | LR__3275
2771c     A7 F0 03 F6 | 	mov	ptra, fp
27720     B2 00 A0 FD | 	call	#popregs_
27724                 | __system___mount_ret
27724     2D 00 64 FD | 	ret
27728                 | 
27728                 | __system___chdir
27728     00 4A 05 F6 | 	mov	COUNT_, #0
2772c     A8 00 A0 FD | 	call	#pushregs_
27730     40 F0 07 F1 | 	add	ptra, #64
27734     04 4E 05 F1 | 	add	fp, #4
27738     A7 12 62 FC | 	wrlong	arg01, fp
2773c     04 4E 05 F1 | 	add	fp, #4
27740     A7 14 02 F6 | 	mov	arg02, fp
27744     08 4E 85 F1 | 	sub	fp, #8
27748     6C 4B B0 FD | 	call	#__system__stat
2774c     3C 4E 05 F1 | 	add	fp, #60
27750     A7 FA 61 FC | 	wrlong	result1, fp
27754     3C 4E 85 F1 | 	sub	fp, #60
27758     00 FA 0D F2 | 	cmp	result1, #0 wz
2775c     3C 4E 05 51 |  if_ne	add	fp, #60
27760     A7 FA 01 5B |  if_ne	rdlong	result1, fp
27764     3C 4E 85 51 |  if_ne	sub	fp, #60
27768     BC 00 90 5D |  if_ne	jmp	#LR__3282
2776c     10 4E 05 F1 | 	add	fp, #16
27770     A7 12 02 FB | 	rdlong	arg01, fp
27774     10 4E 85 F1 | 	sub	fp, #16
27778     78 00 00 FF 
2777c     00 12 06 F5 | 	and	arg01, ##61440
27780     08 00 00 FF 
27784     00 12 0E F2 | 	cmp	arg01, ##4096 wz
27788     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
2778c     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
27790     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
27794     01 FA 65 56 |  if_ne	neg	result1, #1
27798     8C 00 90 5D |  if_ne	jmp	#LR__3282
2779c     04 4E 05 F1 | 	add	fp, #4
277a0     A7 16 02 FB | 	rdlong	arg03, fp
277a4     04 4E 85 F1 | 	sub	fp, #4
277a8     0B 17 C2 FA | 	rdbyte	arg03, arg03
277ac     2F 16 0E F2 | 	cmp	arg03, #47 wz
277b0     24 00 90 5D |  if_ne	jmp	#LR__3280
277b4     84 E6 05 F1 | 	add	ptr___system__dat__, #132
277b8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
277bc     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
277c0     04 4E 05 F1 | 	add	fp, #4
277c4     A7 14 02 FB | 	rdlong	arg02, fp
277c8     04 4E 85 F1 | 	sub	fp, #4
277cc     00 17 06 F6 | 	mov	arg03, #256
277d0     40 4E B0 FD | 	call	#__system__strncpy
277d4     4C 00 90 FD | 	jmp	#LR__3281
277d8                 | LR__3280
277d8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
277dc     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
277e0     38 4E 05 F1 | 	add	fp, #56
277e4     A7 12 62 FC | 	wrlong	arg01, fp
277e8     38 4E 85 F1 | 	sub	fp, #56
277ec     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
277f0     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
277f4     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
277f8     00 17 06 F6 | 	mov	arg03, #256
277fc     14 4E B0 FD | 	call	#__system__strncpy
27800     38 4E 05 F1 | 	add	fp, #56
27804     A7 12 02 FB | 	rdlong	arg01, fp
27808     34 4E 85 F1 | 	sub	fp, #52
2780c     A7 14 02 FB | 	rdlong	arg02, fp
27810     04 4E 85 F1 | 	sub	fp, #4
27814     84 E6 05 F1 | 	add	ptr___system__dat__, #132
27818     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
2781c     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
27820     10 00 B0 FD | 	call	#__system____getvfsforfile
27824                 | LR__3281
27824     00 FA 05 F6 | 	mov	result1, #0
27828                 | LR__3282
27828     A7 F0 03 F6 | 	mov	ptra, fp
2782c     B2 00 A0 FD | 	call	#popregs_
27830                 | __system___chdir_ret
27830     2D 00 64 FD | 	ret
27834                 | 
27834                 | __system____getvfsforfile
27834     0E 4A 05 F6 | 	mov	COUNT_, #14
27838     A8 00 A0 FD | 	call	#pushregs_
2783c     09 27 02 F6 | 	mov	local01, arg01
27840     0A 29 02 F6 | 	mov	local02, arg02
27844     0B 2B 02 F6 | 	mov	local03, arg03
27848     97 10 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
2784c                 | LR__3290
2784c     14 FB C1 FA | 	rdbyte	result1, local02
27850     2F FA 0D F2 | 	cmp	result1, #47 wz
27854     01 28 06 A1 |  if_e	add	local02, #1
27858     14 2D C2 AA |  if_e	rdbyte	local04, local02
2785c     01 28 86 A1 |  if_e	sub	local02, #1
27860     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
27864     01 28 06 A1 |  if_e	add	local02, #1
27868     E0 FF 9F AD |  if_e	jmp	#LR__3290
2786c                 | LR__3291
2786c     14 2D C2 FA | 	rdbyte	local04, local02
27870     2F 2C 0E F2 | 	cmp	local04, #47 wz
27874     14 00 90 5D |  if_ne	jmp	#LR__3292
27878     13 13 02 F6 | 	mov	arg01, local01
2787c     14 15 02 F6 | 	mov	arg02, local02
27880     00 17 06 F6 | 	mov	arg03, #256
27884     8C 4D B0 FD | 	call	#__system__strncpy
27888     7C 00 90 FD | 	jmp	#LR__3294
2788c                 | LR__3292
2788c     84 E6 05 F1 | 	add	ptr___system__dat__, #132
27890     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
27894     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
27898     13 13 02 F6 | 	mov	arg01, local01
2789c     00 17 06 F6 | 	mov	arg03, #256
278a0     70 4D B0 FD | 	call	#__system__strncpy
278a4     14 2D CA FA | 	rdbyte	local04, local02 wz
278a8     5C 00 90 AD |  if_e	jmp	#LR__3293
278ac     14 2D C2 FA | 	rdbyte	local04, local02
278b0     2E 2C 0E F2 | 	cmp	local04, #46 wz
278b4     01 28 06 A1 |  if_e	add	local02, #1
278b8     14 2F C2 AA |  if_e	rdbyte	local05, local02
278bc     01 28 86 A1 |  if_e	sub	local02, #1
278c0     17 31 02 A6 |  if_e	mov	local06, local05
278c4     07 30 4E A7 |  if_e	zerox	local06, #7 wz
278c8     3C 00 90 AD |  if_e	jmp	#LR__3293
278cc     13 2F C2 FA | 	rdbyte	local05, local01
278d0     2F 2E 0E F2 | 	cmp	local05, #47 wz
278d4     01 26 06 A1 |  if_e	add	local01, #1
278d8     13 2D C2 AA |  if_e	rdbyte	local04, local01
278dc     01 26 86 A1 |  if_e	sub	local01, #1
278e0     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
278e4     B5 01 00 5F 
278e8     A8 15 06 56 |  if_ne	mov	arg02, ##@LR__5420
278ec     13 13 02 56 |  if_ne	mov	arg01, local01
278f0     00 17 06 56 |  if_ne	mov	arg03, #256
278f4     68 4D B0 5D |  if_ne	call	#__system__strncat
278f8     13 13 02 F6 | 	mov	arg01, local01
278fc     14 15 02 F6 | 	mov	arg02, local02
27900     00 17 06 F6 | 	mov	arg03, #256
27904     58 4D B0 FD | 	call	#__system__strncat
27908                 | LR__3293
27908                 | LR__3294
27908     13 13 02 F6 | 	mov	arg01, local01
2790c     10 4F B0 FD | 	call	#__system___normalizeName
27910     13 2D CA FA | 	rdbyte	local04, local01 wz
27914     1C 00 90 AD |  if_e	jmp	#LR__3295
27918     13 2D C2 FA | 	rdbyte	local04, local01
2791c     2F 2C 0E F2 | 	cmp	local04, #47 wz
27920     01 26 06 A1 |  if_e	add	local01, #1
27924     13 31 C2 AA |  if_e	rdbyte	local06, local01
27928     01 26 86 A1 |  if_e	sub	local01, #1
2792c     00 30 4E A2 |  if_e	cmps	local06, #0 wz
27930     18 00 90 5D |  if_ne	jmp	#LR__3296
27934                 | LR__3295
27934     01 00 00 FF 
27938     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
2793c     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
27940     01 00 00 FF 
27944     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
27948     EC 01 90 FD | 	jmp	#LR__3310
2794c                 | LR__3296
2794c     00 32 06 F6 | 	mov	local07, #0
27950                 | LR__3297
27950     04 32 56 F2 | 	cmps	local07, #4 wc
27954     CC 01 90 3D |  if_ae	jmp	#LR__3309
27958     19 31 02 F6 | 	mov	local06, local07
2795c     02 30 66 F0 | 	shl	local06, #2
27960     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27964     F3 30 02 F1 | 	add	local06, ptr___system__dat__
27968     18 31 0A FB | 	rdlong	local06, local06 wz
2796c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27970     A8 01 90 AD |  if_e	jmp	#LR__3308
27974     19 2D 02 F6 | 	mov	local04, local07
27978     02 2C 66 F0 | 	shl	local04, #2
2797c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27980     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
27984     16 13 02 FB | 	rdlong	arg01, local04
27988     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2798c     09 35 02 F6 | 	mov	local08, arg01
27990     97 06 48 FB | 	callpa	#(@LR__3299-@LR__3298)>>2,fcache_load_ptr_
27994                 | LR__3298
27994     1A FB C9 FA | 	rdbyte	result1, local08 wz
27998     01 34 06 51 |  if_ne	add	local08, #1
2799c     F4 FF 9F 5D |  if_ne	jmp	#LR__3298
279a0                 | LR__3299
279a0     09 35 82 F1 | 	sub	local08, arg01
279a4     1A 37 02 F6 | 	mov	local09, local08
279a8     1B 2D 02 F6 | 	mov	local04, local09
279ac     13 2D 02 F1 | 	add	local04, local01
279b0     16 31 C2 FA | 	rdbyte	local06, local04
279b4     2F 30 0E F2 | 	cmp	local06, #47 wz
279b8     1B 39 02 56 |  if_ne	mov	local10, local09
279bc     13 39 02 51 |  if_ne	add	local10, local01
279c0     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
279c4     54 01 90 5D |  if_ne	jmp	#LR__3307
279c8     19 17 02 F6 | 	mov	arg03, local07
279cc     02 16 66 F0 | 	shl	arg03, #2
279d0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
279d4     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
279d8     0B 15 02 FB | 	rdlong	arg02, arg03
279dc     1B 17 02 F6 | 	mov	arg03, local09
279e0     13 13 02 F6 | 	mov	arg01, local01
279e4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
279e8     D4 4C B0 FD | 	call	#__system__strncmp
279ec     00 FA 4D F2 | 	cmps	result1, #0 wz
279f0     28 01 90 5D |  if_ne	jmp	#LR__3307
279f4     19 3B 02 F6 | 	mov	local11, local07
279f8     02 3A 66 F0 | 	shl	local11, #2
279fc     74 E6 05 F1 | 	add	ptr___system__dat__, #116
27a00     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
27a04     1D 3D 02 FB | 	rdlong	local12, local11
27a08     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
27a0c     97 22 48 FB | 	callpa	#(@LR__3301-@LR__3300)>>2,fcache_load_ptr_
27a10                 | LR__3300
27a10     1B 31 02 F6 | 	mov	local06, local09
27a14     01 30 06 F1 | 	add	local06, #1
27a18     13 31 02 F1 | 	add	local06, local01
27a1c     18 3B C2 FA | 	rdbyte	local11, local06
27a20     2E 3A 0E F2 | 	cmp	local11, #46 wz
27a24     2C 00 90 5D |  if_ne	jmp	#LR__3302
27a28     1B 3B 02 F6 | 	mov	local11, local09
27a2c     02 3A 06 F1 | 	add	local11, #2
27a30     13 3B 02 F1 | 	add	local11, local01
27a34     1D 39 C2 FA | 	rdbyte	local10, local11
27a38     2F 38 0E F2 | 	cmp	local10, #47 wz
27a3c     1B 3F 02 56 |  if_ne	mov	local13, local09
27a40     02 3E 06 51 |  if_ne	add	local13, #2
27a44     13 3F 02 51 |  if_ne	add	local13, local01
27a48     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
27a4c     01 36 06 A1 |  if_e	add	local09, #1
27a50     BC FF 9F AD |  if_e	jmp	#LR__3300
27a54                 | LR__3301
27a54                 | LR__3302
27a54     00 2A 0E F2 | 	cmp	local03, #0 wz
27a58     15 13 02 56 |  if_ne	mov	arg01, local03
27a5c     13 15 02 56 |  if_ne	mov	arg02, local01
27a60     00 17 06 56 |  if_ne	mov	arg03, #256
27a64     AC 4B B0 5D |  if_ne	call	#__system__strncpy
27a68     13 15 02 F6 | 	mov	arg02, local01
27a6c     1B 15 02 F1 | 	add	arg02, local09
27a70     01 14 06 F1 | 	add	arg02, #1
27a74     13 13 02 F6 | 	mov	arg01, local01
27a78     D4 F5 BF FD | 	call	#__system____builtin_strcpy
27a7c     13 13 02 F6 | 	mov	arg01, local01
27a80     09 35 02 F6 | 	mov	local08, arg01
27a84     97 06 48 FB | 	callpa	#(@LR__3304-@LR__3303)>>2,fcache_load_ptr_
27a88                 | LR__3303
27a88     1A FB C9 FA | 	rdbyte	result1, local08 wz
27a8c     01 34 06 51 |  if_ne	add	local08, #1
27a90     F4 FF 9F 5D |  if_ne	jmp	#LR__3303
27a94                 | LR__3304
27a94     09 35 82 F1 | 	sub	local08, arg01
27a98     1A 37 02 F6 | 	mov	local09, local08
27a9c                 | LR__3305
27a9c     01 36 56 F2 | 	cmps	local09, #1 wc
27aa0     70 00 90 CD |  if_b	jmp	#LR__3306
27aa4     1B 2D 02 F6 | 	mov	local04, local09
27aa8     13 2D 02 F1 | 	add	local04, local01
27aac     16 3B C2 FA | 	rdbyte	local11, local04
27ab0     2F 3A 0E F2 | 	cmp	local11, #47 wz
27ab4     1B 3B 02 A6 |  if_e	mov	local11, local09
27ab8     13 3B 02 A1 |  if_e	add	local11, local01
27abc     1D 01 48 AC |  if_e	wrbyte	#0, local11
27ac0     01 36 86 A1 |  if_e	sub	local09, #1
27ac4     D4 FF 9F AD |  if_e	jmp	#LR__3305
27ac8     1B 2D 02 F6 | 	mov	local04, local09
27acc     13 2D 02 F1 | 	add	local04, local01
27ad0     16 3B C2 FA | 	rdbyte	local11, local04
27ad4     2E 3A 0E F2 | 	cmp	local11, #46 wz
27ad8     38 00 90 5D |  if_ne	jmp	#LR__3306
27adc     02 36 56 F2 | 	cmps	local09, #2 wc
27ae0     30 00 90 CD |  if_b	jmp	#LR__3306
27ae4     1B 41 02 F6 | 	mov	local14, local09
27ae8     01 40 86 F1 | 	sub	local14, #1
27aec     13 41 02 F1 | 	add	local14, local01
27af0     20 2F C2 FA | 	rdbyte	local05, local14
27af4     2F 2E 0E F2 | 	cmp	local05, #47 wz
27af8     18 00 90 5D |  if_ne	jmp	#LR__3306
27afc     1B 2D 02 F6 | 	mov	local04, local09
27b00     01 2C 86 F1 | 	sub	local04, #1
27b04     13 2D 02 F1 | 	add	local04, local01
27b08     16 01 48 FC | 	wrbyte	#0, local04
27b0c     02 36 86 F1 | 	sub	local09, #2
27b10     88 FF 9F FD | 	jmp	#LR__3305
27b14                 | LR__3306
27b14     1E FB 01 F6 | 	mov	result1, local12
27b18     1C 00 90 FD | 	jmp	#LR__3310
27b1c                 | LR__3307
27b1c                 | LR__3308
27b1c     01 32 06 F1 | 	add	local07, #1
27b20     2C FE 9F FD | 	jmp	#LR__3297
27b24                 | LR__3309
27b24     02 00 00 FF 
27b28     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
27b2c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
27b30     02 00 00 FF 
27b34     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
27b38                 | LR__3310
27b38     A7 F0 03 F6 | 	mov	ptra, fp
27b3c     B2 00 A0 FD | 	call	#popregs_
27b40                 | __system____getvfsforfile_ret
27b40     2D 00 64 FD | 	ret
27b44                 | 
27b44                 | __system___basic_open
27b44     05 4A 05 F6 | 	mov	COUNT_, #5
27b48     A8 00 A0 FD | 	call	#pushregs_
27b4c     0A 27 02 F6 | 	mov	local01, arg02
27b50     0B 29 02 F6 | 	mov	local02, arg03
27b54     0C 2B 02 F6 | 	mov	local03, arg04
27b58     00 2C 06 F6 | 	mov	local04, #0
27b5c     8C 4A B0 FD | 	call	#__system____getftab
27b60     FD 2E 0A F6 | 	mov	local05, result1 wz
27b64     18 00 90 5D |  if_ne	jmp	#LR__3320
27b68     EE 12 02 F6 | 	mov	arg01, abortchain
27b6c     0C 14 06 F6 | 	mov	arg02, #12
27b70     01 16 06 F6 | 	mov	arg03, #1
27b74     DA 00 A0 FD | 	call	#__longjmp
27b78     01 FA 65 F6 | 	neg	result1, #1
27b7c     14 01 90 FD | 	jmp	#LR__3329
27b80                 | LR__3320
27b80     08 2E 06 F1 | 	add	local05, #8
27b84     17 FB 09 FB | 	rdlong	result1, local05 wz
27b88     08 2E 86 F1 | 	sub	local05, #8
27b8c     17 13 02 56 |  if_ne	mov	arg01, local05
27b90     AC 41 B0 5D |  if_ne	call	#__system___closeraw
27b94     00 26 0E F2 | 	cmp	local01, #0 wz
27b98     00 28 0E A2 |  if_e	cmp	local02, #0 wz
27b9c     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
27ba0     3C 00 90 AD |  if_e	jmp	#LR__3322
27ba4     0C 12 06 F6 | 	mov	arg01, #12
27ba8     94 36 B0 FD | 	call	#__system___gc_alloc_managed
27bac     FD 2C 0A F6 | 	mov	local04, result1 wz
27bb0     18 00 90 5D |  if_ne	jmp	#LR__3321
27bb4     EE 12 02 F6 | 	mov	arg01, abortchain
27bb8     07 14 06 F6 | 	mov	arg02, #7
27bbc     01 16 06 F6 | 	mov	arg03, #1
27bc0     DA 00 A0 FD | 	call	#__longjmp
27bc4     01 FA 65 F6 | 	neg	result1, #1
27bc8     C8 00 90 FD | 	jmp	#LR__3329
27bcc                 | LR__3321
27bcc     16 01 68 FC | 	wrlong	#0, local04
27bd0     04 2C 06 F1 | 	add	local04, #4
27bd4     16 01 68 FC | 	wrlong	#0, local04
27bd8     04 2C 86 F1 | 	sub	local04, #4
27bdc     17 2D 62 FC | 	wrlong	local04, local05
27be0                 | LR__3322
27be0     00 26 0E F2 | 	cmp	local01, #0 wz
27be4     20 00 90 AD |  if_e	jmp	#LR__3323
27be8     16 27 62 FC | 	wrlong	local01, local04
27bec     16 FB 01 F6 | 	mov	result1, local04
27bf0     00 38 05 FF 
27bf4     00 FA 45 F5 | 	or	result1, ##175112192
27bf8     1C 2E 06 F1 | 	add	local05, #28
27bfc     17 FB 61 FC | 	wrlong	result1, local05
27c00     1C 2E 86 F1 | 	sub	local05, #28
27c04     0C 00 90 FD | 	jmp	#LR__3324
27c08                 | LR__3323
27c08     1C 2E 06 F1 | 	add	local05, #28
27c0c     17 01 68 FC | 	wrlong	#0, local05
27c10     1C 2E 86 F1 | 	sub	local05, #28
27c14                 | LR__3324
27c14     00 28 0E F2 | 	cmp	local02, #0 wz
27c18     28 00 90 AD |  if_e	jmp	#LR__3325
27c1c     04 2C 06 F1 | 	add	local04, #4
27c20     16 29 62 FC | 	wrlong	local02, local04
27c24     04 2C 86 F1 | 	sub	local04, #4
27c28     16 FB 01 F6 | 	mov	result1, local04
27c2c     00 40 05 FF 
27c30     00 FA 45 F5 | 	or	result1, ##176160768
27c34     20 2E 06 F1 | 	add	local05, #32
27c38     17 FB 61 FC | 	wrlong	result1, local05
27c3c     20 2E 86 F1 | 	sub	local05, #32
27c40     0C 00 90 FD | 	jmp	#LR__3326
27c44                 | LR__3325
27c44     20 2E 06 F1 | 	add	local05, #32
27c48     17 01 68 FC | 	wrlong	#0, local05
27c4c     20 2E 86 F1 | 	sub	local05, #32
27c50                 | LR__3326
27c50     00 2A 0E F2 | 	cmp	local03, #0 wz
27c54     24 00 90 AD |  if_e	jmp	#LR__3327
27c58     08 2C 06 F1 | 	add	local04, #8
27c5c     16 2B 62 FC | 	wrlong	local03, local04
27c60     08 2C 86 F1 | 	sub	local04, #8
27c64     00 48 05 FF 
27c68     00 2C 46 F5 | 	or	local04, ##177209344
27c6c     24 2E 06 F1 | 	add	local05, #36
27c70     17 2D 62 FC | 	wrlong	local04, local05
27c74     24 2E 86 F1 | 	sub	local05, #36
27c78     0C 00 90 FD | 	jmp	#LR__3328
27c7c                 | LR__3327
27c7c     24 2E 06 F1 | 	add	local05, #36
27c80     17 01 68 FC | 	wrlong	#0, local05
27c84     24 2E 86 F1 | 	sub	local05, #36
27c88                 | LR__3328
27c88     08 2E 06 F1 | 	add	local05, #8
27c8c     17 0F 68 FC | 	wrlong	#7, local05
27c90     00 FA 05 F6 | 	mov	result1, #0
27c94                 | LR__3329
27c94     A7 F0 03 F6 | 	mov	ptra, fp
27c98     B2 00 A0 FD | 	call	#popregs_
27c9c                 | __system___basic_open_ret
27c9c     2D 00 64 FD | 	ret
27ca0                 | 
27ca0                 | __system___basic_open_string
27ca0     04 4A 05 F6 | 	mov	COUNT_, #4
27ca4     A8 00 A0 FD | 	call	#pushregs_
27ca8     0A 27 02 F6 | 	mov	local01, arg02
27cac     0B 29 02 F6 | 	mov	local02, arg03
27cb0     38 49 B0 FD | 	call	#__system____getftab
27cb4     FD 2A 0A F6 | 	mov	local03, result1 wz
27cb8     18 00 90 5D |  if_ne	jmp	#LR__3330
27cbc     EE 12 02 F6 | 	mov	arg01, abortchain
27cc0     0C 14 06 F6 | 	mov	arg02, #12
27cc4     01 16 06 F6 | 	mov	arg03, #1
27cc8     DA 00 A0 FD | 	call	#__longjmp
27ccc     01 FA 65 F6 | 	neg	result1, #1
27cd0     5C 00 90 FD | 	jmp	#LR__3332
27cd4                 | LR__3330
27cd4     08 2A 06 F1 | 	add	local03, #8
27cd8     15 19 0A FB | 	rdlong	arg04, local03 wz
27cdc     08 2A 86 F1 | 	sub	local03, #8
27ce0     15 13 02 56 |  if_ne	mov	arg01, local03
27ce4     58 40 B0 5D |  if_ne	call	#__system___closeraw
27ce8     13 15 02 F6 | 	mov	arg02, local01
27cec     14 17 02 F6 | 	mov	arg03, local02
27cf0     15 13 02 F6 | 	mov	arg01, local03
27cf4     B6 19 06 F6 | 	mov	arg04, #438
27cf8     40 3D B0 FD | 	call	#__system___openraw
27cfc     FD 2C 02 F6 | 	mov	local04, result1
27d00     00 2C 56 F2 | 	cmps	local04, #0 wc
27d04     24 00 90 3D |  if_ae	jmp	#LR__3331
27d08     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27d0c     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
27d10     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27d14     EE 12 02 F6 | 	mov	arg01, abortchain
27d18     FD 14 02 FB | 	rdlong	arg02, result1
27d1c     01 16 06 F6 | 	mov	arg03, #1
27d20     DA 00 A0 FD | 	call	#__longjmp
27d24     01 FA 65 F6 | 	neg	result1, #1
27d28     04 00 90 FD | 	jmp	#LR__3332
27d2c                 | LR__3331
27d2c     16 FB 01 F6 | 	mov	result1, local04
27d30                 | LR__3332
27d30     A7 F0 03 F6 | 	mov	ptra, fp
27d34     B2 00 A0 FD | 	call	#popregs_
27d38                 | __system___basic_open_string_ret
27d38     2D 00 64 FD | 	ret
27d3c                 | 
27d3c                 | __system___basic_print_char
27d3c     03 4A 05 F6 | 	mov	COUNT_, #3
27d40     A8 00 A0 FD | 	call	#pushregs_
27d44     0A 27 02 F6 | 	mov	local01, arg02
27d48     44 50 B0 FD | 	call	#__system___gettxfunc
27d4c     FD 28 0A F6 | 	mov	local02, result1 wz
27d50     00 FA 05 A6 |  if_e	mov	result1, #0
27d54     30 00 90 AD |  if_e	jmp	#LR__3340
27d58     14 2B 02 F6 | 	mov	local03, local02
27d5c     13 28 46 F7 | 	zerox	local02, #19
27d60     14 2A 46 F0 | 	shr	local03, #20
27d64     02 2A 66 F0 | 	shl	local03, #2
27d68     ED 2A 02 F1 | 	add	local03, __methods__
27d6c     15 2B 02 FB | 	rdlong	local03, local03
27d70     13 13 02 F6 | 	mov	arg01, local01
27d74     F2 26 02 F6 | 	mov	local01, objptr
27d78     14 E5 01 F6 | 	mov	objptr, local02
27d7c     2D 2A 62 FD | 	call	local03
27d80     13 E5 01 F6 | 	mov	objptr, local01
27d84     01 FA 05 F6 | 	mov	result1, #1
27d88                 | LR__3340
27d88     A7 F0 03 F6 | 	mov	ptra, fp
27d8c     B2 00 A0 FD | 	call	#popregs_
27d90                 | __system___basic_print_char_ret
27d90     2D 00 64 FD | 	ret
27d94                 | 
27d94                 | __system___basic_print_string
27d94     03 4A 05 F6 | 	mov	COUNT_, #3
27d98     A8 00 A0 FD | 	call	#pushregs_
27d9c     0A 27 02 F6 | 	mov	local01, arg02
27da0     0B 29 02 F6 | 	mov	local02, arg03
27da4     E8 4F B0 FD | 	call	#__system___gettxfunc
27da8     FD 2A 0A F6 | 	mov	local03, result1 wz
27dac     00 FA 05 A6 |  if_e	mov	result1, #0
27db0     18 00 90 AD |  if_e	jmp	#LR__3350
27db4     00 26 0E F2 | 	cmp	local01, #0 wz
27db8     00 FA 05 A6 |  if_e	mov	result1, #0
27dbc     15 13 02 56 |  if_ne	mov	arg01, local03
27dc0     14 15 02 56 |  if_ne	mov	arg02, local02
27dc4     13 17 02 56 |  if_ne	mov	arg03, local01
27dc8     08 02 B0 5D |  if_ne	call	#__system___fmtstr
27dcc                 | LR__3350
27dcc     A7 F0 03 F6 | 	mov	ptra, fp
27dd0     B2 00 A0 FD | 	call	#popregs_
27dd4                 | __system___basic_print_string_ret
27dd4     2D 00 64 FD | 	ret
27dd8                 | 
27dd8                 | __system___basic_print_integer
27dd8     04 4A 05 F6 | 	mov	COUNT_, #4
27ddc     A8 00 A0 FD | 	call	#pushregs_
27de0     0A 27 02 F6 | 	mov	local01, arg02
27de4     0B 29 02 F6 | 	mov	local02, arg03
27de8     0C 2B 02 F6 | 	mov	local03, arg04
27dec     A0 4F B0 FD | 	call	#__system___gettxfunc
27df0     FD 2C 0A F6 | 	mov	local04, result1 wz
27df4     00 FA 05 A6 |  if_e	mov	result1, #0
27df8     16 13 02 56 |  if_ne	mov	arg01, local04
27dfc     14 15 02 56 |  if_ne	mov	arg02, local02
27e00     13 17 02 56 |  if_ne	mov	arg03, local01
27e04     15 19 02 56 |  if_ne	mov	arg04, local03
27e08     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
27e0c     A7 F0 03 F6 | 	mov	ptra, fp
27e10     B2 00 A0 FD | 	call	#popregs_
27e14                 | __system___basic_print_integer_ret
27e14     2D 00 64 FD | 	ret
27e18                 | 
27e18                 | __system___basic_print_unsigned
27e18     03 4A 05 F6 | 	mov	COUNT_, #3
27e1c     A8 00 A0 FD | 	call	#pushregs_
27e20     0A 27 02 F6 | 	mov	local01, arg02
27e24     0B 29 02 F6 | 	mov	local02, arg03
27e28     0C 2B 02 F6 | 	mov	local03, arg04
27e2c     60 4F B0 FD | 	call	#__system___gettxfunc
27e30     FD 12 0A F6 | 	mov	arg01, result1 wz
27e34     00 FA 05 A6 |  if_e	mov	result1, #0
27e38     3A 28 26 54 |  if_ne	bith	local02, #58
27e3c     14 15 02 56 |  if_ne	mov	arg02, local02
27e40     13 17 02 56 |  if_ne	mov	arg03, local01
27e44     15 19 02 56 |  if_ne	mov	arg04, local03
27e48     74 02 B0 5D |  if_ne	call	#__system___fmtnum
27e4c     A7 F0 03 F6 | 	mov	ptra, fp
27e50     B2 00 A0 FD | 	call	#popregs_
27e54                 | __system___basic_print_unsigned_ret
27e54     2D 00 64 FD | 	ret
27e58                 | 
27e58                 | __system___basic_get_char
27e58     03 4A 05 F6 | 	mov	COUNT_, #3
27e5c     A8 00 A0 FD | 	call	#pushregs_
27e60     70 4F B0 FD | 	call	#__system___getrxfunc
27e64     FD 26 0A F6 | 	mov	local01, result1 wz
27e68     01 FA 65 A6 |  if_e	neg	result1, #1
27e6c     28 00 90 AD |  if_e	jmp	#LR__3360
27e70     13 29 02 F6 | 	mov	local02, local01
27e74     13 26 46 F7 | 	zerox	local01, #19
27e78     14 28 46 F0 | 	shr	local02, #20
27e7c     02 28 66 F0 | 	shl	local02, #2
27e80     ED 28 02 F1 | 	add	local02, __methods__
27e84     14 29 02 FB | 	rdlong	local02, local02
27e88     F2 2A 02 F6 | 	mov	local03, objptr
27e8c     13 E5 01 F6 | 	mov	objptr, local01
27e90     2D 28 62 FD | 	call	local02
27e94     15 E5 01 F6 | 	mov	objptr, local03
27e98                 | LR__3360
27e98     A7 F0 03 F6 | 	mov	ptra, fp
27e9c     B2 00 A0 FD | 	call	#popregs_
27ea0                 | __system___basic_get_char_ret
27ea0     2D 00 64 FD | 	ret
27ea4                 | 
27ea4                 | __system___basic_put
27ea4     04 4A 05 F6 | 	mov	COUNT_, #4
27ea8     A8 00 A0 FD | 	call	#pushregs_
27eac     0D 27 02 F6 | 	mov	local01, arg05
27eb0     13 19 02 FD | 	qmul	arg04, local01
27eb4     09 29 02 F6 | 	mov	local02, arg01
27eb8     0B 2B 02 F6 | 	mov	local03, arg03
27ebc     00 14 0E F2 | 	cmp	arg02, #0 wz
27ec0     01 14 86 51 |  if_ne	sub	arg02, #1
27ec4     14 13 02 56 |  if_ne	mov	arg01, local02
27ec8     00 16 06 56 |  if_ne	mov	arg03, #0
27ecc     18 2C 62 FD | 	getqx	local04
27ed0     60 45 B0 5D |  if_ne	call	#__system__lseek
27ed4     15 15 02 F6 | 	mov	arg02, local03
27ed8     16 17 02 F6 | 	mov	arg03, local04
27edc     14 13 02 F6 | 	mov	arg01, local02
27ee0     9C 44 B0 FD | 	call	#__system__write
27ee4     FD 2C 02 F6 | 	mov	local04, result1
27ee8     01 2C 56 F2 | 	cmps	local04, #1 wc
27eec     10 00 90 CD |  if_b	jmp	#LR__3370
27ef0     16 91 02 F6 | 	mov	muldiva_, local04
27ef4     13 93 02 F6 | 	mov	muldivb_, local01
27ef8     BA 00 A0 FD | 	call	#divide_
27efc     49 2D 02 F6 | 	mov	local04, muldivb_
27f00                 | LR__3370
27f00     16 FB 01 F6 | 	mov	result1, local04
27f04     A7 F0 03 F6 | 	mov	ptra, fp
27f08     B2 00 A0 FD | 	call	#popregs_
27f0c                 | __system___basic_put_ret
27f0c     2D 00 64 FD | 	ret
27f10                 | 
27f10                 | __system___basic_get
27f10     04 4A 05 F6 | 	mov	COUNT_, #4
27f14     A8 00 A0 FD | 	call	#pushregs_
27f18     0D 27 02 F6 | 	mov	local01, arg05
27f1c     13 19 02 FD | 	qmul	arg04, local01
27f20     09 29 02 F6 | 	mov	local02, arg01
27f24     0B 2B 02 F6 | 	mov	local03, arg03
27f28     00 14 0E F2 | 	cmp	arg02, #0 wz
27f2c     01 14 86 51 |  if_ne	sub	arg02, #1
27f30     14 13 02 56 |  if_ne	mov	arg01, local02
27f34     00 16 06 56 |  if_ne	mov	arg03, #0
27f38     18 2C 62 FD | 	getqx	local04
27f3c     F4 44 B0 5D |  if_ne	call	#__system__lseek
27f40     15 15 02 F6 | 	mov	arg02, local03
27f44     16 17 02 F6 | 	mov	arg03, local04
27f48     14 13 02 F6 | 	mov	arg01, local02
27f4c     6C 44 B0 FD | 	call	#__system__read
27f50     FD 2C 02 F6 | 	mov	local04, result1
27f54     01 2C 56 F2 | 	cmps	local04, #1 wc
27f58     10 00 90 CD |  if_b	jmp	#LR__3380
27f5c     16 91 02 F6 | 	mov	muldiva_, local04
27f60     13 93 02 F6 | 	mov	muldivb_, local01
27f64     BA 00 A0 FD | 	call	#divide_
27f68     49 2D 02 F6 | 	mov	local04, muldivb_
27f6c                 | LR__3380
27f6c     16 FB 01 F6 | 	mov	result1, local04
27f70     A7 F0 03 F6 | 	mov	ptra, fp
27f74     B2 00 A0 FD | 	call	#popregs_
27f78                 | __system___basic_get_ret
27f78     2D 00 64 FD | 	ret
27f7c                 | 
27f7c                 | __system___fmtchar
27f7c     00 4A 05 F6 | 	mov	COUNT_, #0
27f80     A8 00 A0 FD | 	call	#pushregs_
27f84     10 F0 07 F1 | 	add	ptra, #16
27f88     04 4E 05 F1 | 	add	fp, #4
27f8c     A7 12 62 FC | 	wrlong	arg01, fp
27f90     04 4E 05 F1 | 	add	fp, #4
27f94     A7 14 62 FC | 	wrlong	arg02, fp
27f98     04 4E 05 F1 | 	add	fp, #4
27f9c     A7 16 62 FC | 	wrlong	arg03, fp
27fa0     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
27fa4     A7 16 62 FC | 	wrlong	arg03, fp
27fa8     08 4E 85 F1 | 	sub	fp, #8
27fac     A7 12 02 FB | 	rdlong	arg01, fp
27fb0     04 4E 05 F1 | 	add	fp, #4
27fb4     A7 14 02 FB | 	rdlong	arg02, fp
27fb8     04 4E 05 F1 | 	add	fp, #4
27fbc     A7 16 02 F6 | 	mov	arg03, fp
27fc0     0C 4E 85 F1 | 	sub	fp, #12
27fc4     0C 00 B0 FD | 	call	#__system___fmtstr
27fc8     A7 F0 03 F6 | 	mov	ptra, fp
27fcc     B2 00 A0 FD | 	call	#popregs_
27fd0                 | __system___fmtchar_ret
27fd0     2D 00 64 FD | 	ret
27fd4                 | 
27fd4                 | __system___fmtstr
27fd4     09 4A 05 F6 | 	mov	COUNT_, #9
27fd8     A8 00 A0 FD | 	call	#pushregs_
27fdc     09 27 02 F6 | 	mov	local01, arg01
27fe0     0A 29 02 F6 | 	mov	local02, arg02
27fe4     0B 2B 02 F6 | 	mov	local03, arg03
27fe8     14 19 E2 F8 | 	getbyte	arg04, local02, #0
27fec     15 13 02 F6 | 	mov	arg01, local03
27ff0     09 2D 02 F6 | 	mov	local04, arg01
27ff4     97 06 48 FB | 	callpa	#(@LR__3391-@LR__3390)>>2,fcache_load_ptr_
27ff8                 | LR__3390
27ff8     16 FB C9 FA | 	rdbyte	result1, local04 wz
27ffc     01 2C 06 51 |  if_ne	add	local04, #1
28000     F4 FF 9F 5D |  if_ne	jmp	#LR__3390
28004                 | LR__3391
28004     09 2D 82 F1 | 	sub	local04, arg01
28008     00 18 0E F2 | 	cmp	arg04, #0 wz
2800c     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
28010     14 15 02 F6 | 	mov	arg02, local02
28014     16 17 02 F6 | 	mov	arg03, local04
28018     13 13 02 F6 | 	mov	arg01, local01
2801c     02 18 06 F6 | 	mov	arg04, #2
28020     BC 49 B0 FD | 	call	#__system___fmtpad
28024     FD 2E 02 F6 | 	mov	local05, result1
28028     00 2E 56 F2 | 	cmps	local05, #0 wc
2802c     17 FB 01 C6 |  if_b	mov	result1, local05
28030     80 00 90 CD |  if_b	jmp	#LR__3394
28034     01 2C 56 F2 | 	cmps	local04, #1 wc
28038     50 00 90 CD |  if_b	jmp	#LR__3393
2803c     16 31 02 F6 | 	mov	local06, local04
28040                 | LR__3392
28040     13 33 02 F6 | 	mov	local07, local01
28044     13 35 02 F6 | 	mov	local08, local01
28048     13 32 46 F7 | 	zerox	local07, #19
2804c     14 34 46 F0 | 	shr	local08, #20
28050     02 34 66 F0 | 	shl	local08, #2
28054     ED 34 02 F1 | 	add	local08, __methods__
28058     1A 35 02 FB | 	rdlong	local08, local08
2805c     15 13 C2 FA | 	rdbyte	arg01, local03
28060     F2 36 02 F6 | 	mov	local09, objptr
28064     19 E5 01 F6 | 	mov	objptr, local07
28068     01 2A 06 F1 | 	add	local03, #1
2806c     2D 34 62 FD | 	call	local08
28070     1B E5 01 F6 | 	mov	objptr, local09
28074     FD 36 02 F6 | 	mov	local09, result1
28078     00 36 56 F2 | 	cmps	local09, #0 wc
2807c     1B FB 01 C6 |  if_b	mov	result1, local09
28080     30 00 90 CD |  if_b	jmp	#LR__3394
28084     1B 2F 02 F1 | 	add	local05, local09
28088     ED 31 6E FB | 	djnz	local06, #LR__3392
2808c                 | LR__3393
2808c     14 15 02 F6 | 	mov	arg02, local02
28090     16 17 02 F6 | 	mov	arg03, local04
28094     13 13 02 F6 | 	mov	arg01, local01
28098     01 18 06 F6 | 	mov	arg04, #1
2809c     40 49 B0 FD | 	call	#__system___fmtpad
280a0     FD 36 02 F6 | 	mov	local09, result1
280a4     00 36 56 F2 | 	cmps	local09, #0 wc
280a8     1B FB 01 C6 |  if_b	mov	result1, local09
280ac     1B 2F 02 31 |  if_ae	add	local05, local09
280b0     17 FB 01 36 |  if_ae	mov	result1, local05
280b4                 | LR__3394
280b4     A7 F0 03 F6 | 	mov	ptra, fp
280b8     B2 00 A0 FD | 	call	#popregs_
280bc                 | __system___fmtstr_ret
280bc     2D 00 64 FD | 	ret
280c0                 | 
280c0                 | __system___fmtnum
280c0     0B 4A 05 F6 | 	mov	COUNT_, #11
280c4     A8 00 A0 FD | 	call	#pushregs_
280c8     09 27 02 F6 | 	mov	local01, arg01
280cc     0A 29 02 F6 | 	mov	local02, arg02
280d0     0B 2B 02 F6 | 	mov	local03, arg03
280d4     0C 2D 02 F6 | 	mov	local04, arg04
280d8     F8 2F 02 F6 | 	mov	local05, ptra
280dc     17 31 02 F6 | 	mov	local06, local05
280e0     00 32 06 F6 | 	mov	local07, #0
280e4     14 35 02 F6 | 	mov	local08, local02
280e8     10 34 46 F0 | 	shr	local08, #16
280ec     3F 34 06 F5 | 	and	local08, #63
280f0     14 37 E2 F8 | 	getbyte	local09, local02, #0
280f4     14 39 02 F6 | 	mov	local10, local02
280f8     1A 38 46 F0 | 	shr	local10, #26
280fc     03 38 06 F5 | 	and	local10, #3
28100     1C 3B 02 F6 | 	mov	local11, local10
28104     01 34 56 F2 | 	cmps	local08, #1 wc
28108     44 F0 07 F1 | 	add	ptra, #68
2810c     01 34 86 31 |  if_ae	sub	local08, #1
28110     41 36 56 F2 | 	cmps	local09, #65 wc
28114     00 36 0E C2 |  if_b	cmp	local09, #0 wz
28118     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
2811c     03 3A 0E F2 | 	cmp	local11, #3 wz
28120     00 3A 06 A6 |  if_e	mov	local11, #0
28124     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
28128     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
2812c     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
28130     00 3A 0E F2 | 	cmp	local11, #0 wz
28134     4C 00 90 AD |  if_e	jmp	#LR__3403
28138     01 32 06 F6 | 	mov	local07, #1
2813c     1B 35 0A F2 | 	cmp	local08, local09 wz
28140     18 00 90 5D |  if_ne	jmp	#LR__3401
28144     05 34 6E FB | 	djnz	local08, #LR__3400
28148     13 13 02 F6 | 	mov	arg01, local01
2814c     14 15 02 F6 | 	mov	arg02, local02
28150     23 16 06 F6 | 	mov	arg03, #35
28154     24 FE BF FD | 	call	#__system___fmtchar
28158     88 00 90 FD | 	jmp	#LR__3407
2815c                 | LR__3400
2815c                 | LR__3401
2815c     02 3A 0E F2 | 	cmp	local11, #2 wz
28160     18 39 02 A6 |  if_e	mov	local10, local06
28164     01 30 06 A1 |  if_e	add	local06, #1
28168     1C 41 48 AC |  if_e	wrbyte	#32, local10
2816c     14 00 90 AD |  if_e	jmp	#LR__3402
28170     04 3A 0E F2 | 	cmp	local11, #4 wz
28174     18 5B 48 AC |  if_e	wrbyte	#45, local06
28178     01 30 06 A1 |  if_e	add	local06, #1
2817c     18 57 48 5C |  if_ne	wrbyte	#43, local06
28180     01 30 06 51 |  if_ne	add	local06, #1
28184                 | LR__3402
28184                 | LR__3403
28184     18 13 02 F6 | 	mov	arg01, local06
28188     15 15 02 F6 | 	mov	arg02, local03
2818c     16 17 02 F6 | 	mov	arg03, local04
28190     1A 19 02 F6 | 	mov	arg04, local08
28194     00 1A 06 F6 | 	mov	arg05, #0
28198     1D 28 2E F4 | 	testbn	local02, #29 wz
2819c     01 1A 06 56 |  if_ne	mov	arg05, #1
281a0     04 49 B0 FD | 	call	#__system___uitoa
281a4     FD 32 02 F1 | 	add	local07, result1
281a8     1B 33 5A F2 | 	cmps	local07, local09 wcz
281ac     24 00 90 ED |  if_be	jmp	#LR__3406
281b0     97 0E 48 FB | 	callpa	#(@LR__3405-@LR__3404)>>2,fcache_load_ptr_
281b4                 | LR__3404
281b4     1B 39 02 F6 | 	mov	local10, local09
281b8     01 38 56 F2 | 	cmps	local10, #1 wc
281bc     01 36 86 F1 | 	sub	local09, #1
281c0     18 39 02 36 |  if_ae	mov	local10, local06
281c4     01 30 06 31 |  if_ae	add	local06, #1
281c8     1C 47 48 3C |  if_ae	wrbyte	#35, local10
281cc     E4 FF 9F 3D |  if_ae	jmp	#LR__3404
281d0                 | LR__3405
281d0     18 01 48 FC | 	wrbyte	#0, local06
281d4                 | LR__3406
281d4     13 13 02 F6 | 	mov	arg01, local01
281d8     14 15 02 F6 | 	mov	arg02, local02
281dc     17 17 02 F6 | 	mov	arg03, local05
281e0     F0 FD BF FD | 	call	#__system___fmtstr
281e4                 | LR__3407
281e4     A7 F0 03 F6 | 	mov	ptra, fp
281e8     B2 00 A0 FD | 	call	#popregs_
281ec                 | __system___fmtnum_ret
281ec     2D 00 64 FD | 	ret
281f0                 | 
281f0                 | __system___fmtfloat
281f0     10 4A 05 F6 | 	mov	COUNT_, #16
281f4     A8 00 A0 FD | 	call	#pushregs_
281f8     24 F1 07 F1 | 	add	ptra, #292
281fc     04 4E 05 F1 | 	add	fp, #4
28200     A7 12 62 FC | 	wrlong	arg01, fp
28204     04 4E 05 F1 | 	add	fp, #4
28208     A7 14 62 FC | 	wrlong	arg02, fp
2820c     04 4E 05 F1 | 	add	fp, #4
28210     A7 16 62 FC | 	wrlong	arg03, fp
28214     04 4E 05 F1 | 	add	fp, #4
28218     A7 18 62 FC | 	wrlong	arg04, fp
2821c     0C 4E 05 F1 | 	add	fp, #12
28220     A7 14 68 FC | 	wrlong	#10, fp
28224     08 4E 05 F1 | 	add	fp, #8
28228     A7 00 68 FC | 	wrlong	#0, fp
2822c     08 4E 05 F1 | 	add	fp, #8
28230     A7 00 68 FC | 	wrlong	#0, fp
28234     08 4E 05 F1 | 	add	fp, #8
28238     A7 00 68 FC | 	wrlong	#0, fp
2823c     04 4E 05 F1 | 	add	fp, #4
28240     A7 04 68 FC | 	wrlong	#2, fp
28244     04 4E 05 F1 | 	add	fp, #4
28248     A7 00 68 FC | 	wrlong	#0, fp
2824c     04 4E 05 F1 | 	add	fp, #4
28250     A7 00 68 FC | 	wrlong	#0, fp
28254     04 4E 05 F1 | 	add	fp, #4
28258     A7 00 68 FC | 	wrlong	#0, fp
2825c     04 4E 05 F1 | 	add	fp, #4
28260     A7 00 68 FC | 	wrlong	#0, fp
28264     18 4E 05 F1 | 	add	fp, #24
28268     A7 00 68 FC | 	wrlong	#0, fp
2826c     68 4E 05 F1 | 	add	fp, #104
28270     A7 26 02 F6 | 	mov	local01, fp
28274     08 4E 85 F1 | 	sub	fp, #8
28278     A7 26 62 FC | 	wrlong	local01, fp
2827c     04 4E 05 F1 | 	add	fp, #4
28280     A7 26 62 FC | 	wrlong	local01, fp
28284     BC 4E 85 F1 | 	sub	fp, #188
28288     A7 26 02 FB | 	rdlong	local01, fp
2828c     10 26 46 F0 | 	shr	local01, #16
28290     3F 26 06 F5 | 	and	local01, #63
28294     B0 4E 05 F1 | 	add	fp, #176
28298     A7 26 62 FC | 	wrlong	local01, fp
2829c     B0 4E 85 F1 | 	sub	fp, #176
282a0     A7 26 02 FB | 	rdlong	local01, fp
282a4     1C 26 46 F0 | 	shr	local01, #28
282a8     01 26 06 F5 | 	and	local01, #1
282ac     08 4F 05 F1 | 	add	fp, #264
282b0     A7 26 62 FC | 	wrlong	local01, fp
282b4     58 4E 85 F1 | 	sub	fp, #88
282b8     A7 26 0A FB | 	rdlong	local01, fp wz
282bc     B8 4E 85 F1 | 	sub	fp, #184
282c0     3C 00 90 5D |  if_ne	jmp	#LR__3411
282c4     10 4E 05 F1 | 	add	fp, #16
282c8     A7 26 02 FB | 	rdlong	local01, fp
282cc     10 4E 85 F1 | 	sub	fp, #16
282d0     61 26 0E F2 | 	cmp	local01, #97 wz
282d4     18 00 90 5D |  if_ne	jmp	#LR__3410
282d8     B8 4E 05 F1 | 	add	fp, #184
282dc     A7 1A 68 FC | 	wrlong	#13, fp
282e0     84 4E 85 F1 | 	sub	fp, #132
282e4     A7 02 68 FC | 	wrlong	#1, fp
282e8     34 4E 85 F1 | 	sub	fp, #52
282ec     24 00 90 FD | 	jmp	#LR__3412
282f0                 | LR__3410
282f0     B8 4E 05 F1 | 	add	fp, #184
282f4     A7 0C 68 FC | 	wrlong	#6, fp
282f8     B8 4E 85 F1 | 	sub	fp, #184
282fc     14 00 90 FD | 	jmp	#LR__3412
28300                 | LR__3411
28300     B8 4E 05 F1 | 	add	fp, #184
28304     A7 26 02 FB | 	rdlong	local01, fp
28308     01 26 86 F1 | 	sub	local01, #1
2830c     A7 26 62 FC | 	wrlong	local01, fp
28310     B8 4E 85 F1 | 	sub	fp, #184
28314                 | LR__3412
28314     08 4E 05 F1 | 	add	fp, #8
28318     A7 26 02 FB | 	rdlong	local01, fp
2831c     16 26 46 F0 | 	shr	local01, #22
28320     03 26 06 F5 | 	and	local01, #3
28324     04 4F 05 F1 | 	add	fp, #260
28328     A7 26 62 FC | 	wrlong	local01, fp
2832c     04 4F 85 F1 | 	sub	fp, #260
28330     A7 26 02 FB | 	rdlong	local01, fp
28334     1D 26 46 F0 | 	shr	local01, #29
28338     01 26 06 F5 | 	and	local01, #1
2833c     B4 4E 05 F1 | 	add	fp, #180
28340     A7 26 62 FC | 	wrlong	local01, fp
28344     B4 4E 85 F1 | 	sub	fp, #180
28348     A7 26 02 FB | 	rdlong	local01, fp
2834c     13 27 EA F8 | 	getbyte	local01, local01, #1
28350     60 4E 05 F1 | 	add	fp, #96
28354     A7 26 62 FC | 	wrlong	local01, fp
28358     60 4E 85 F1 | 	sub	fp, #96
2835c     A7 26 02 FB | 	rdlong	local01, fp
28360     13 27 E2 F8 | 	getbyte	local01, local01, #0
28364     64 4E 05 F1 | 	add	fp, #100
28368     A7 26 62 FC | 	wrlong	local01, fp
2836c     00 26 06 F6 | 	mov	local01, #0
28370     5C 4E 85 F1 | 	sub	fp, #92
28374     A7 1A 02 FB | 	rdlong	arg05, fp
28378     65 1A 0E F2 | 	cmp	arg05, #101 wz
2837c     01 26 06 A6 |  if_e	mov	local01, #1
28380     14 4E 05 F1 | 	add	fp, #20
28384     A7 26 62 FC | 	wrlong	local01, fp
28388     98 4E 05 F1 | 	add	fp, #152
2838c     A7 28 0A FB | 	rdlong	local02, fp wz
28390     45 26 06 56 |  if_ne	mov	local01, #69
28394     65 26 06 A6 |  if_e	mov	local01, #101
28398     8C 4E 85 F1 | 	sub	fp, #140
2839c     A7 26 62 FC | 	wrlong	local01, fp
283a0     20 4E 85 F1 | 	sub	fp, #32
283a4     A7 26 02 FB | 	rdlong	local01, fp
283a8     10 4E 85 F1 | 	sub	fp, #16
283ac     61 26 0E F2 | 	cmp	local01, #97 wz
283b0     4C 00 90 5D |  if_ne	jmp	#LR__3413
283b4     24 4E 05 F1 | 	add	fp, #36
283b8     A7 02 68 FC | 	wrlong	#1, fp
283bc     98 4E 05 F1 | 	add	fp, #152
283c0     A7 28 0A FB | 	rdlong	local02, fp wz
283c4     50 26 06 56 |  if_ne	mov	local01, #80
283c8     70 26 06 A6 |  if_e	mov	local01, #112
283cc     8C 4E 85 F1 | 	sub	fp, #140
283d0     A7 26 62 FC | 	wrlong	local01, fp
283d4     14 4E 85 F1 | 	sub	fp, #20
283d8     A7 04 68 FC | 	wrlong	#2, fp
283dc     1C 4E 05 F1 | 	add	fp, #28
283e0     A7 02 68 FC | 	wrlong	#1, fp
283e4     84 4E 05 F1 | 	add	fp, #132
283e8     A7 28 0A FB | 	rdlong	local02, fp wz
283ec     58 26 06 56 |  if_ne	mov	local01, #88
283f0     78 26 06 A6 |  if_e	mov	local01, #120
283f4     7C 4E 85 F1 | 	sub	fp, #124
283f8     A7 26 62 FC | 	wrlong	local01, fp
283fc     40 4E 85 F1 | 	sub	fp, #64
28400                 | LR__3413
28400     10 4E 05 F1 | 	add	fp, #16
28404     A7 26 02 FB | 	rdlong	local01, fp
28408     10 4E 85 F1 | 	sub	fp, #16
2840c     23 26 0E F2 | 	cmp	local01, #35 wz
28410     3C 00 90 5D |  if_ne	jmp	#LR__3416
28414     48 4E 05 F1 | 	add	fp, #72
28418     A7 02 68 FC | 	wrlong	#1, fp
2841c     C8 4E 05 F1 | 	add	fp, #200
28420     A7 26 0A FB | 	rdlong	local01, fp wz
28424     10 4F 85 F1 | 	sub	fp, #272
28428     18 00 90 AD |  if_e	jmp	#LR__3414
2842c     10 4E 05 F1 | 	add	fp, #16
28430     A7 CC 68 FC | 	wrlong	#102, fp
28434     00 4F 05 F1 | 	add	fp, #256
28438     A7 00 68 FC | 	wrlong	#0, fp
2843c     10 4F 85 F1 | 	sub	fp, #272
28440     0C 00 90 FD | 	jmp	#LR__3415
28444                 | LR__3414
28444     10 4F 05 F1 | 	add	fp, #272
28448     A7 02 68 FC | 	wrlong	#1, fp
2844c     10 4F 85 F1 | 	sub	fp, #272
28450                 | LR__3415
28450                 | LR__3416
28450     08 4E 05 F1 | 	add	fp, #8
28454     A7 26 02 FB | 	rdlong	local01, fp
28458     1A 26 46 F0 | 	shr	local01, #26
2845c     03 26 06 F5 | 	and	local01, #3
28460     5C 4E 05 F1 | 	add	fp, #92
28464     A7 26 62 FC | 	wrlong	local01, fp
28468     58 4E 85 F1 | 	sub	fp, #88
2846c     A7 FA 01 FB | 	rdlong	result1, fp
28470     0C 4E 85 F1 | 	sub	fp, #12
28474     1F FA 4D F0 | 	shr	result1, #31 wz
28478     20 00 90 AD |  if_e	jmp	#LR__3417
2847c     2C 4E 05 F1 | 	add	fp, #44
28480     A7 5A 68 FC | 	wrlong	#45, fp
28484     20 4E 85 F1 | 	sub	fp, #32
28488     A7 FA 01 FB | 	rdlong	result1, fp
2848c     1F FA E5 F4 | 	bitnot	result1, #31
28490     A7 FA 61 FC | 	wrlong	result1, fp
28494     0C 4E 85 F1 | 	sub	fp, #12
28498     3C 00 90 FD | 	jmp	#LR__3419
2849c                 | LR__3417
2849c     64 4E 05 F1 | 	add	fp, #100
284a0     A7 26 02 FB | 	rdlong	local01, fp
284a4     64 4E 85 F1 | 	sub	fp, #100
284a8     01 26 0E F2 | 	cmp	local01, #1 wz
284ac     2C 4E 05 A1 |  if_e	add	fp, #44
284b0     A7 56 68 AC |  if_e	wrlong	#43, fp
284b4     2C 4E 85 A1 |  if_e	sub	fp, #44
284b8     1C 00 90 AD |  if_e	jmp	#LR__3418
284bc     64 4E 05 F1 | 	add	fp, #100
284c0     A7 26 02 FB | 	rdlong	local01, fp
284c4     64 4E 85 F1 | 	sub	fp, #100
284c8     02 26 0E F2 | 	cmp	local01, #2 wz
284cc     2C 4E 05 A1 |  if_e	add	fp, #44
284d0     A7 40 68 AC |  if_e	wrlong	#32, fp
284d4     2C 4E 85 A1 |  if_e	sub	fp, #44
284d8                 | LR__3418
284d8                 | LR__3419
284d8     08 4E 05 F1 | 	add	fp, #8
284dc     A7 26 02 FB | 	rdlong	local01, fp
284e0     18 26 46 F0 | 	shr	local01, #24
284e4     03 26 06 F5 | 	and	local01, #3
284e8     3C 4E 05 F1 | 	add	fp, #60
284ec     A7 26 62 FC | 	wrlong	local01, fp
284f0     00 26 06 F6 | 	mov	local01, #0
284f4     18 4E 85 F1 | 	sub	fp, #24
284f8     A7 2A 0A FB | 	rdlong	local03, fp wz
284fc     2C 4E 85 F1 | 	sub	fp, #44
28500     18 00 90 5D |  if_ne	jmp	#LR__3420
28504     1C 4E 05 F1 | 	add	fp, #28
28508     A7 2C 02 FB | 	rdlong	local04, fp
2850c     1C 4E 85 F1 | 	sub	fp, #28
28510     16 2F 02 F6 | 	mov	local05, local04
28514     0A 2E 0E F2 | 	cmp	local05, #10 wz
28518     04 00 90 AD |  if_e	jmp	#LR__3421
2851c                 | LR__3420
2851c     01 26 66 F5 | 	xor	local01, #1
28520                 | LR__3421
28520     3C 4E 05 F1 | 	add	fp, #60
28524     A7 26 62 FC | 	wrlong	local01, fp
28528     3C 4E 85 F1 | 	sub	fp, #60
2852c     00 26 0E F2 | 	cmp	local01, #0 wz
28530     0C 01 90 AD |  if_e	jmp	#LR__3423
28534     44 4E 05 F1 | 	add	fp, #68
28538     A7 2E 02 FB | 	rdlong	local05, fp
2853c     44 4E 85 F1 | 	sub	fp, #68
28540     17 2B 02 F6 | 	mov	local03, local05
28544     02 2A 0E F2 | 	cmp	local03, #2 wz
28548     F4 00 90 5D |  if_ne	jmp	#LR__3423
2854c     0C 4F 05 F1 | 	add	fp, #268
28550     A7 30 02 FB | 	rdlong	local06, fp
28554     0C 4F 85 F1 | 	sub	fp, #268
28558     18 2D 02 F6 | 	mov	local04, local06
2855c     02 2C 0E F2 | 	cmp	local04, #2 wz
28560     DC 00 90 AD |  if_e	jmp	#LR__3423
28564     C0 4E 05 F1 | 	add	fp, #192
28568     A7 12 02 FB | 	rdlong	arg01, fp
2856c     94 4E 85 F1 | 	sub	fp, #148
28570     A7 14 02 FB | 	rdlong	arg02, fp
28574     14 4E 05 F1 | 	add	fp, #20
28578     A7 16 02 FB | 	rdlong	arg03, fp
2857c     40 4E 85 F1 | 	sub	fp, #64
28580     8C 47 B0 FD | 	call	#__system__emitsign_0576
28584     14 4F 05 F1 | 	add	fp, #276
28588     A7 FA 61 FC | 	wrlong	result1, fp
2858c     14 4F 85 F1 | 	sub	fp, #276
28590     00 FA 55 F2 | 	cmps	result1, #0 wc
28594     14 4F 05 C1 |  if_b	add	fp, #276
28598     A7 FA 01 CB |  if_b	rdlong	result1, fp
2859c     14 4F 85 C1 |  if_b	sub	fp, #276
285a0     6C 0B 90 CD |  if_b	jmp	#LR__3473
285a4     C0 4E 05 F1 | 	add	fp, #192
285a8     A7 26 02 FB | 	rdlong	local01, fp
285ac     54 4E 05 F1 | 	add	fp, #84
285b0     A7 2E 02 FB | 	rdlong	local05, fp
285b4     17 2B 02 F6 | 	mov	local03, local05
285b8     17 27 02 F1 | 	add	local01, local05
285bc     54 4E 85 F1 | 	sub	fp, #84
285c0     A7 26 62 FC | 	wrlong	local01, fp
285c4     58 4E 85 F1 | 	sub	fp, #88
285c8     A7 26 0A FB | 	rdlong	local01, fp wz
285cc     68 4E 85 F1 | 	sub	fp, #104
285d0     60 00 90 AD |  if_e	jmp	#LR__3422
285d4     68 4E 05 F1 | 	add	fp, #104
285d8     A7 26 02 FB | 	rdlong	local01, fp
285dc     AC 4E 05 F1 | 	add	fp, #172
285e0     A7 2A 02 FB | 	rdlong	local03, fp
285e4     15 27 82 F1 | 	sub	local01, local03
285e8     AC 4E 85 F1 | 	sub	fp, #172
285ec     A7 26 62 FC | 	wrlong	local01, fp
285f0     68 4E 85 F1 | 	sub	fp, #104
285f4     00 26 56 F2 | 	cmps	local01, #0 wc
285f8     68 4E 05 C1 |  if_b	add	fp, #104
285fc     A7 00 68 CC |  if_b	wrlong	#0, fp
28600     68 4E 85 C1 |  if_b	sub	fp, #104
28604     08 4E 05 F1 | 	add	fp, #8
28608     A7 26 02 FB | 	rdlong	local01, fp
2860c     E8 26 06 F4 | 	bitl	local01, #232
28610     A7 26 62 FC | 	wrlong	local01, fp
28614     60 4E 05 F1 | 	add	fp, #96
28618     A7 2E 02 FB | 	rdlong	local05, fp
2861c     17 2B 02 F6 | 	mov	local03, local05
28620     08 2A 66 F0 | 	shl	local03, #8
28624     15 27 42 F5 | 	or	local01, local03
28628     60 4E 85 F1 | 	sub	fp, #96
2862c     A7 26 62 FC | 	wrlong	local01, fp
28630     08 4E 85 F1 | 	sub	fp, #8
28634                 | LR__3422
28634     3C 4E 05 F1 | 	add	fp, #60
28638     A7 00 68 FC | 	wrlong	#0, fp
2863c     3C 4E 85 F1 | 	sub	fp, #60
28640                 | LR__3423
28640     0C 4E 05 F1 | 	add	fp, #12
28644     A7 12 02 FB | 	rdlong	arg01, fp
28648     0C 4E 85 F1 | 	sub	fp, #12
2864c     EC 21 B0 FD | 	call	#__system____builtin_ilogb
28650     FF FF 3F FF 
28654     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
28658     50 00 90 5D |  if_ne	jmp	#LR__3425
2865c     2C 4E 05 F1 | 	add	fp, #44
28660     A7 26 0A FB | 	rdlong	local01, fp wz
28664     2C 4E 85 F1 | 	sub	fp, #44
28668     24 00 90 AD |  if_e	jmp	#LR__3424
2866c     C0 4E 05 F1 | 	add	fp, #192
28670     A7 28 02 FB | 	rdlong	local02, fp
28674     14 2B 02 F6 | 	mov	local03, local02
28678     01 2A 06 F1 | 	add	local03, #1
2867c     A7 2A 62 FC | 	wrlong	local03, fp
28680     94 4E 85 F1 | 	sub	fp, #148
28684     A7 2C 02 FB | 	rdlong	local04, fp
28688     2C 4E 85 F1 | 	sub	fp, #44
2868c     14 2D 42 FC | 	wrbyte	local04, local02
28690                 | LR__3424
28690     C0 4E 05 F1 | 	add	fp, #192
28694     A7 12 02 FB | 	rdlong	arg01, fp
28698     C0 4E 85 F1 | 	sub	fp, #192
2869c     B5 01 00 FF 
286a0     AA 15 06 F6 | 	mov	arg02, ##@LR__5421
286a4     A8 E9 BF FD | 	call	#__system____builtin_strcpy
286a8     A4 08 90 FD | 	jmp	#LR__3461
286ac                 | LR__3425
286ac     0C 4E 05 F1 | 	add	fp, #12
286b0     A7 28 02 FB | 	rdlong	local02, fp
286b4     0C 4E 85 F1 | 	sub	fp, #12
286b8     14 13 02 F6 | 	mov	arg01, local02
286bc     7C 21 B0 FD | 	call	#__system____builtin_ilogb
286c0     00 00 40 FF 
286c4     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
286c8     50 00 90 5D |  if_ne	jmp	#LR__3427
286cc     2C 4E 05 F1 | 	add	fp, #44
286d0     A7 26 0A FB | 	rdlong	local01, fp wz
286d4     2C 4E 85 F1 | 	sub	fp, #44
286d8     24 00 90 AD |  if_e	jmp	#LR__3426
286dc     C0 4E 05 F1 | 	add	fp, #192
286e0     A7 28 02 FB | 	rdlong	local02, fp
286e4     14 2B 02 F6 | 	mov	local03, local02
286e8     01 2A 06 F1 | 	add	local03, #1
286ec     A7 2A 62 FC | 	wrlong	local03, fp
286f0     94 4E 85 F1 | 	sub	fp, #148
286f4     A7 2C 02 FB | 	rdlong	local04, fp
286f8     2C 4E 85 F1 | 	sub	fp, #44
286fc     14 2D 42 FC | 	wrbyte	local04, local02
28700                 | LR__3426
28700     C0 4E 05 F1 | 	add	fp, #192
28704     A7 12 02 FB | 	rdlong	arg01, fp
28708     C0 4E 85 F1 | 	sub	fp, #192
2870c     B5 01 00 FF 
28710     AE 15 06 F6 | 	mov	arg02, ##@LR__5422
28714     38 E9 BF FD | 	call	#__system____builtin_strcpy
28718     34 08 90 FD | 	jmp	#LR__3461
2871c                 | LR__3427
2871c     10 4E 05 F1 | 	add	fp, #16
28720     A7 26 02 FB | 	rdlong	local01, fp
28724     10 4E 85 F1 | 	sub	fp, #16
28728     67 26 0E F2 | 	cmp	local01, #103 wz
2872c     10 4E 05 51 |  if_ne	add	fp, #16
28730     A7 2A 02 5B |  if_ne	rdlong	local03, fp
28734     10 4E 85 51 |  if_ne	sub	fp, #16
28738     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
2873c     94 01 90 5D |  if_ne	jmp	#LR__3432
28740     0C 4E 05 F1 | 	add	fp, #12
28744     A7 12 02 FB | 	rdlong	arg01, fp
28748     08 4E 05 F1 | 	add	fp, #8
2874c     A7 14 02 F6 | 	mov	arg02, fp
28750     0C 4E 05 F1 | 	add	fp, #12
28754     A7 16 02 F6 | 	mov	arg03, fp
28758     98 4E 05 F1 | 	add	fp, #152
2875c     A7 18 02 FB | 	rdlong	arg04, fp
28760     9C 4E 85 F1 | 	sub	fp, #156
28764     A7 1A 02 FB | 	rdlong	arg05, fp
28768     1C 4E 85 F1 | 	sub	fp, #28
2876c     AC 43 B0 FD | 	call	#__system__disassemble_0574
28770     10 4E 05 F1 | 	add	fp, #16
28774     A7 26 02 FB | 	rdlong	local01, fp
28778     10 4E 85 F1 | 	sub	fp, #16
2877c     23 26 0E F2 | 	cmp	local01, #35 wz
28780     A0 00 90 5D |  if_ne	jmp	#LR__3429
28784     20 4E 05 F1 | 	add	fp, #32
28788     A7 26 02 FB | 	rdlong	local01, fp
2878c     98 4E 05 F1 | 	add	fp, #152
28790     A7 2A 02 FB | 	rdlong	local03, fp
28794     B8 4E 85 F1 | 	sub	fp, #184
28798     15 27 5A F2 | 	cmps	local01, local03 wcz
2879c     24 4E 05 11 |  if_a	add	fp, #36
287a0     A7 02 68 1C |  if_a	wrlong	#1, fp
287a4     24 4E 85 11 |  if_a	sub	fp, #36
287a8     A4 01 90 1D |  if_a	jmp	#LR__3435
287ac     20 4E 05 F1 | 	add	fp, #32
287b0     A7 26 02 FB | 	rdlong	local01, fp
287b4     20 4E 85 F1 | 	sub	fp, #32
287b8     00 26 56 F2 | 	cmps	local01, #0 wc
287bc     2C 00 90 3D |  if_ae	jmp	#LR__3428
287c0     B8 4E 05 F1 | 	add	fp, #184
287c4     A7 26 02 FB | 	rdlong	local01, fp
287c8     13 27 62 F6 | 	neg	local01, local01
287cc     98 4E 85 F1 | 	sub	fp, #152
287d0     A7 2A 02 FB | 	rdlong	local03, fp
287d4     20 4E 85 F1 | 	sub	fp, #32
287d8     13 2B 5A F2 | 	cmps	local03, local01 wcz
287dc     24 4E 05 E1 |  if_be	add	fp, #36
287e0     A7 02 68 EC |  if_be	wrlong	#1, fp
287e4     24 4E 85 E1 |  if_be	sub	fp, #36
287e8     64 01 90 FD | 	jmp	#LR__3435
287ec                 | LR__3428
287ec     20 4E 05 F1 | 	add	fp, #32
287f0     A7 26 02 FB | 	rdlong	local01, fp
287f4     20 4E 85 F1 | 	sub	fp, #32
287f8     01 26 56 F2 | 	cmps	local01, #1 wc
287fc     50 01 90 CD |  if_b	jmp	#LR__3435
28800     B8 4E 05 F1 | 	add	fp, #184
28804     A7 26 02 FB | 	rdlong	local01, fp
28808     98 4E 85 F1 | 	sub	fp, #152
2880c     A7 2A 02 FB | 	rdlong	local03, fp
28810     15 27 82 F1 | 	sub	local01, local03
28814     98 4E 05 F1 | 	add	fp, #152
28818     A7 26 62 FC | 	wrlong	local01, fp
2881c     B8 4E 85 F1 | 	sub	fp, #184
28820     2C 01 90 FD | 	jmp	#LR__3435
28824                 | LR__3429
28824     00 26 06 F6 | 	mov	local01, #0
28828     08 4E 05 F1 | 	add	fp, #8
2882c     A7 28 02 FB | 	rdlong	local02, fp
28830     1C 28 46 F0 | 	shr	local02, #28
28834     01 28 0E F5 | 	and	local02, #1 wz
28838     01 26 06 A6 |  if_e	mov	local01, #1
2883c     2C 4E 05 F1 | 	add	fp, #44
28840     A7 26 62 FC | 	wrlong	local01, fp
28844     14 4E 85 F1 | 	sub	fp, #20
28848     A7 26 02 FB | 	rdlong	local01, fp
2884c     98 4E 05 F1 | 	add	fp, #152
28850     A7 2A 02 FB | 	rdlong	local03, fp
28854     B8 4E 85 F1 | 	sub	fp, #184
28858     15 27 52 F2 | 	cmps	local01, local03 wc
2885c     18 00 90 3D |  if_ae	jmp	#LR__3430
28860     20 4E 05 F1 | 	add	fp, #32
28864     A7 2C 02 FB | 	rdlong	local04, fp
28868     20 4E 85 F1 | 	sub	fp, #32
2886c     FF FF 7F FF 
28870     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
28874     10 00 90 3D |  if_ae	jmp	#LR__3431
28878                 | LR__3430
28878     24 4E 05 F1 | 	add	fp, #36
2887c     A7 02 68 FC | 	wrlong	#1, fp
28880     24 4E 85 F1 | 	sub	fp, #36
28884     C8 00 90 FD | 	jmp	#LR__3435
28888                 | LR__3431
28888     B8 4E 05 F1 | 	add	fp, #184
2888c     A7 2C 02 FB | 	rdlong	local04, fp
28890     98 4E 85 F1 | 	sub	fp, #152
28894     A7 2A 02 FB | 	rdlong	local03, fp
28898     15 2D 82 F1 | 	sub	local04, local03
2889c     98 4E 05 F1 | 	add	fp, #152
288a0     A7 2C 62 FC | 	wrlong	local04, fp
288a4     AC 4E 85 F1 | 	sub	fp, #172
288a8     A7 12 02 FB | 	rdlong	arg01, fp
288ac     08 4E 05 F1 | 	add	fp, #8
288b0     A7 14 02 F6 | 	mov	arg02, fp
288b4     0C 4E 05 F1 | 	add	fp, #12
288b8     A7 16 02 F6 | 	mov	arg03, fp
288bc     16 19 62 F6 | 	neg	arg04, local04
288c0     04 4E 85 F1 | 	sub	fp, #4
288c4     A7 1A 02 FB | 	rdlong	arg05, fp
288c8     1C 4E 85 F1 | 	sub	fp, #28
288cc     4C 42 B0 FD | 	call	#__system__disassemble_0574
288d0     7C 00 90 FD | 	jmp	#LR__3435
288d4                 | LR__3432
288d4     24 4E 05 F1 | 	add	fp, #36
288d8     A7 26 0A FB | 	rdlong	local01, fp wz
288dc     24 4E 85 F1 | 	sub	fp, #36
288e0     34 00 90 AD |  if_e	jmp	#LR__3433
288e4     0C 4E 05 F1 | 	add	fp, #12
288e8     A7 12 02 FB | 	rdlong	arg01, fp
288ec     08 4E 05 F1 | 	add	fp, #8
288f0     A7 14 02 F6 | 	mov	arg02, fp
288f4     0C 4E 05 F1 | 	add	fp, #12
288f8     A7 16 02 F6 | 	mov	arg03, fp
288fc     98 4E 05 F1 | 	add	fp, #152
28900     A7 18 02 FB | 	rdlong	arg04, fp
28904     9C 4E 85 F1 | 	sub	fp, #156
28908     A7 1A 02 FB | 	rdlong	arg05, fp
2890c     1C 4E 85 F1 | 	sub	fp, #28
28910     08 42 B0 FD | 	call	#__system__disassemble_0574
28914     38 00 90 FD | 	jmp	#LR__3434
28918                 | LR__3433
28918     0C 4E 05 F1 | 	add	fp, #12
2891c     A7 12 02 FB | 	rdlong	arg01, fp
28920     08 4E 05 F1 | 	add	fp, #8
28924     A7 14 02 F6 | 	mov	arg02, fp
28928     0C 4E 05 F1 | 	add	fp, #12
2892c     A7 16 02 F6 | 	mov	arg03, fp
28930     98 4E 05 F1 | 	add	fp, #152
28934     A7 2C 02 FB | 	rdlong	local04, fp
28938     01 2C 06 F1 | 	add	local04, #1
2893c     16 19 62 F6 | 	neg	arg04, local04
28940     9C 4E 85 F1 | 	sub	fp, #156
28944     A7 1A 02 FB | 	rdlong	arg05, fp
28948     1C 4E 85 F1 | 	sub	fp, #28
2894c     CC 41 B0 FD | 	call	#__system__disassemble_0574
28950                 | LR__3434
28950                 | LR__3435
28950     1C 4E 05 F1 | 	add	fp, #28
28954     A7 26 02 FB | 	rdlong	local01, fp
28958     1C 4E 85 F1 | 	sub	fp, #28
2895c     02 26 0E F2 | 	cmp	local01, #2 wz
28960     4C 00 90 5D |  if_ne	jmp	#LR__3438
28964     1C 4E 05 F1 | 	add	fp, #28
28968     A7 20 68 FC | 	wrlong	#16, fp
2896c     1C 4E 85 F1 | 	sub	fp, #28
28970                 | LR__3436
28970     14 4E 05 F1 | 	add	fp, #20
28974     A7 26 0A FB | 	rdlong	local01, fp wz
28978     14 4E 85 F1 | 	sub	fp, #20
2897c     30 00 90 AD |  if_e	jmp	#LR__3437
28980     14 4E 05 F1 | 	add	fp, #20
28984     A7 2A 02 FB | 	rdlong	local03, fp
28988     14 4E 85 F1 | 	sub	fp, #20
2898c     00 80 00 FF 
28990     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
28994     18 00 90 3D |  if_ae	jmp	#LR__3437
28998     14 4E 05 F1 | 	add	fp, #20
2899c     A7 26 02 FB | 	rdlong	local01, fp
289a0     01 26 66 F0 | 	shl	local01, #1
289a4     A7 26 62 FC | 	wrlong	local01, fp
289a8     14 4E 85 F1 | 	sub	fp, #20
289ac     C0 FF 9F FD | 	jmp	#LR__3436
289b0                 | LR__3437
289b0                 | LR__3438
289b0     70 4E 05 F1 | 	add	fp, #112
289b4     A7 12 02 F6 | 	mov	arg01, fp
289b8     5C 4E 85 F1 | 	sub	fp, #92
289bc     A7 14 02 FB | 	rdlong	arg02, fp
289c0     08 4E 05 F1 | 	add	fp, #8
289c4     A7 16 02 FB | 	rdlong	arg03, fp
289c8     A0 4E 05 F1 | 	add	fp, #160
289cc     A7 1A 02 FB | 	rdlong	arg05, fp
289d0     BC 4E 85 F1 | 	sub	fp, #188
289d4     01 18 06 F6 | 	mov	arg04, #1
289d8     CC 40 B0 FD | 	call	#__system___uitoa
289dc     58 4E 05 F1 | 	add	fp, #88
289e0     A7 FA 61 FC | 	wrlong	result1, fp
289e4     38 4E 85 F1 | 	sub	fp, #56
289e8     A7 26 02 FB | 	rdlong	local01, fp
289ec     20 4E 85 F1 | 	sub	fp, #32
289f0     00 26 56 F2 | 	cmps	local01, #0 wc
289f4     50 00 90 3D |  if_ae	jmp	#LR__3439
289f8     60 4E 05 F1 | 	add	fp, #96
289fc     A7 5A 68 FC | 	wrlong	#45, fp
28a00     50 4E 05 F1 | 	add	fp, #80
28a04     A7 12 02 F6 | 	mov	arg01, fp
28a08     90 4E 85 F1 | 	sub	fp, #144
28a0c     A7 2A 02 FB | 	rdlong	local03, fp
28a10     15 15 62 F6 | 	neg	arg02, local03
28a14     18 4E 05 F1 | 	add	fp, #24
28a18     A7 18 02 FB | 	rdlong	arg04, fp
28a1c     84 4E 05 F1 | 	add	fp, #132
28a20     A7 30 02 FB | 	rdlong	local06, fp
28a24     BC 4E 85 F1 | 	sub	fp, #188
28a28     18 2D 02 F6 | 	mov	local04, local06
28a2c     0A 16 06 F6 | 	mov	arg03, #10
28a30     16 1B 02 F6 | 	mov	arg05, local04
28a34     70 40 B0 FD | 	call	#__system___uitoa
28a38     5C 4E 05 F1 | 	add	fp, #92
28a3c     A7 FA 61 FC | 	wrlong	result1, fp
28a40     5C 4E 85 F1 | 	sub	fp, #92
28a44     48 00 90 FD | 	jmp	#LR__3440
28a48                 | LR__3439
28a48     60 4E 05 F1 | 	add	fp, #96
28a4c     A7 56 68 FC | 	wrlong	#43, fp
28a50     50 4E 05 F1 | 	add	fp, #80
28a54     A7 12 02 F6 | 	mov	arg01, fp
28a58     90 4E 85 F1 | 	sub	fp, #144
28a5c     A7 14 02 FB | 	rdlong	arg02, fp
28a60     18 4E 05 F1 | 	add	fp, #24
28a64     A7 18 02 FB | 	rdlong	arg04, fp
28a68     84 4E 05 F1 | 	add	fp, #132
28a6c     A7 30 02 FB | 	rdlong	local06, fp
28a70     BC 4E 85 F1 | 	sub	fp, #188
28a74     18 2D 02 F6 | 	mov	local04, local06
28a78     0A 16 06 F6 | 	mov	arg03, #10
28a7c     16 1B 02 F6 | 	mov	arg05, local04
28a80     24 40 B0 FD | 	call	#__system___uitoa
28a84     5C 4E 05 F1 | 	add	fp, #92
28a88     A7 FA 61 FC | 	wrlong	result1, fp
28a8c     5C 4E 85 F1 | 	sub	fp, #92
28a90                 | LR__3440
28a90     24 4E 05 F1 | 	add	fp, #36
28a94     A7 26 0A FB | 	rdlong	local01, fp wz
28a98     24 4E 85 F1 | 	sub	fp, #36
28a9c     2C 00 90 AD |  if_e	jmp	#LR__3441
28aa0     50 4E 05 F1 | 	add	fp, #80
28aa4     A7 00 68 FC | 	wrlong	#0, fp
28aa8     04 4E 85 F1 | 	sub	fp, #4
28aac     A7 00 68 FC | 	wrlong	#0, fp
28ab0     6C 4E 05 F1 | 	add	fp, #108
28ab4     A7 26 02 FB | 	rdlong	local01, fp
28ab8     01 26 06 F1 | 	add	local01, #1
28abc     64 4E 85 F1 | 	sub	fp, #100
28ac0     A7 26 62 FC | 	wrlong	local01, fp
28ac4     54 4E 85 F1 | 	sub	fp, #84
28ac8     88 00 90 FD | 	jmp	#LR__3444
28acc                 | LR__3441
28acc     20 4E 05 F1 | 	add	fp, #32
28ad0     A7 26 02 FB | 	rdlong	local01, fp
28ad4     20 4E 85 F1 | 	sub	fp, #32
28ad8     00 26 56 F2 | 	cmps	local01, #0 wc
28adc     40 00 90 3D |  if_ae	jmp	#LR__3442
28ae0     20 4E 05 F1 | 	add	fp, #32
28ae4     A7 28 02 FB | 	rdlong	local02, fp
28ae8     30 4E 05 F1 | 	add	fp, #48
28aec     A7 28 62 FC | 	wrlong	local02, fp
28af0     04 4E 85 F1 | 	sub	fp, #4
28af4     A7 28 62 FC | 	wrlong	local02, fp
28af8     2C 4E 85 F1 | 	sub	fp, #44
28afc     A7 26 02 FB | 	rdlong	local01, fp
28b00     98 4E 05 F1 | 	add	fp, #152
28b04     A7 2A 02 FB | 	rdlong	local03, fp
28b08     15 27 02 F1 | 	add	local01, local03
28b0c     01 26 06 F1 | 	add	local01, #1
28b10     64 4E 85 F1 | 	sub	fp, #100
28b14     A7 26 62 FC | 	wrlong	local01, fp
28b18     54 4E 85 F1 | 	sub	fp, #84
28b1c     34 00 90 FD | 	jmp	#LR__3443
28b20                 | LR__3442
28b20     4C 4E 05 F1 | 	add	fp, #76
28b24     A7 00 68 FC | 	wrlong	#0, fp
28b28     2C 4E 85 F1 | 	sub	fp, #44
28b2c     A7 26 02 FB | 	rdlong	local01, fp
28b30     30 4E 05 F1 | 	add	fp, #48
28b34     A7 26 62 FC | 	wrlong	local01, fp
28b38     68 4E 05 F1 | 	add	fp, #104
28b3c     A7 2A 02 FB | 	rdlong	local03, fp
28b40     15 27 02 F1 | 	add	local01, local03
28b44     01 26 06 F1 | 	add	local01, #1
28b48     64 4E 85 F1 | 	sub	fp, #100
28b4c     A7 26 62 FC | 	wrlong	local01, fp
28b50     54 4E 85 F1 | 	sub	fp, #84
28b54                 | LR__3443
28b54                 | LR__3444
28b54     54 4E 05 F1 | 	add	fp, #84
28b58     A7 26 02 FB | 	rdlong	local01, fp
28b5c     08 4E 85 F1 | 	sub	fp, #8
28b60     A7 2A 02 FB | 	rdlong	local03, fp
28b64     15 27 82 F1 | 	sub	local01, local03
28b68     01 26 06 F1 | 	add	local01, #1
28b6c     24 4E 85 F1 | 	sub	fp, #36
28b70     A7 26 62 FC | 	wrlong	local01, fp
28b74     04 4E 05 F1 | 	add	fp, #4
28b78     A7 26 0A FB | 	rdlong	local01, fp wz
28b7c     2C 4E 85 F1 | 	sub	fp, #44
28b80     28 4E 05 51 |  if_ne	add	fp, #40
28b84     A7 2A 02 5B |  if_ne	rdlong	local03, fp
28b88     01 2A 06 51 |  if_ne	add	local03, #1
28b8c     A7 2A 62 5C |  if_ne	wrlong	local03, fp
28b90     28 4E 85 51 |  if_ne	sub	fp, #40
28b94     1C 4E 05 F1 | 	add	fp, #28
28b98     A7 26 02 FB | 	rdlong	local01, fp
28b9c     1C 4E 85 F1 | 	sub	fp, #28
28ba0     10 26 0E F2 | 	cmp	local01, #16 wz
28ba4     28 4E 05 A1 |  if_e	add	fp, #40
28ba8     A7 26 02 AB |  if_e	rdlong	local01, fp
28bac     02 26 06 A1 |  if_e	add	local01, #2
28bb0     A7 26 62 AC |  if_e	wrlong	local01, fp
28bb4     28 4E 85 A1 |  if_e	sub	fp, #40
28bb8     24 4E 05 F1 | 	add	fp, #36
28bbc     A7 26 0A FB | 	rdlong	local01, fp wz
28bc0     24 4E 85 F1 | 	sub	fp, #36
28bc4     28 00 90 AD |  if_e	jmp	#LR__3445
28bc8     28 4E 05 F1 | 	add	fp, #40
28bcc     A7 26 02 FB | 	rdlong	local01, fp
28bd0     02 2A 06 F6 | 	mov	local03, #2
28bd4     34 4E 05 F1 | 	add	fp, #52
28bd8     A7 2E 02 FB | 	rdlong	local05, fp
28bdc     17 2B 02 F1 | 	add	local03, local05
28be0     15 27 02 F1 | 	add	local01, local03
28be4     34 4E 85 F1 | 	sub	fp, #52
28be8     A7 26 62 FC | 	wrlong	local01, fp
28bec     28 4E 85 F1 | 	sub	fp, #40
28bf0                 | LR__3445
28bf0     28 4E 05 F1 | 	add	fp, #40
28bf4     A7 26 02 FB | 	rdlong	local01, fp
28bf8     28 4E 85 F1 | 	sub	fp, #40
28bfc     41 26 56 F2 | 	cmps	local01, #65 wc
28c00     01 FA 65 36 |  if_ae	neg	result1, #1
28c04     08 05 90 3D |  if_ae	jmp	#LR__3473
28c08     3C 4E 05 F1 | 	add	fp, #60
28c0c     A7 26 0A FB | 	rdlong	local01, fp wz
28c10     3C 4E 85 F1 | 	sub	fp, #60
28c14     60 00 90 AD |  if_e	jmp	#LR__3446
28c18     C0 4E 05 F1 | 	add	fp, #192
28c1c     A7 12 02 FB | 	rdlong	arg01, fp
28c20     94 4E 85 F1 | 	sub	fp, #148
28c24     A7 14 02 FB | 	rdlong	arg02, fp
28c28     14 4E 05 F1 | 	add	fp, #20
28c2c     A7 16 02 FB | 	rdlong	arg03, fp
28c30     40 4E 85 F1 | 	sub	fp, #64
28c34     D8 40 B0 FD | 	call	#__system__emitsign_0576
28c38     18 4F 05 F1 | 	add	fp, #280
28c3c     A7 FA 61 FC | 	wrlong	result1, fp
28c40     18 4F 85 F1 | 	sub	fp, #280
28c44     00 FA 55 F2 | 	cmps	result1, #0 wc
28c48     18 4F 05 C1 |  if_b	add	fp, #280
28c4c     A7 FA 01 CB |  if_b	rdlong	result1, fp
28c50     18 4F 85 C1 |  if_b	sub	fp, #280
28c54     B8 04 90 CD |  if_b	jmp	#LR__3473
28c58     C0 4E 05 F1 | 	add	fp, #192
28c5c     A7 26 02 FB | 	rdlong	local01, fp
28c60     58 4E 05 F1 | 	add	fp, #88
28c64     A7 2A 02 FB | 	rdlong	local03, fp
28c68     15 27 02 F1 | 	add	local01, local03
28c6c     58 4E 85 F1 | 	sub	fp, #88
28c70     A7 26 62 FC | 	wrlong	local01, fp
28c74     C0 4E 85 F1 | 	sub	fp, #192
28c78                 | LR__3446
28c78     4C 4E 05 F1 | 	add	fp, #76
28c7c     A7 26 02 FB | 	rdlong	local01, fp
28c80     34 4E 85 F1 | 	sub	fp, #52
28c84     A7 26 62 FC | 	wrlong	local01, fp
28c88     18 4E 85 F1 | 	sub	fp, #24
28c8c     97 9E 48 FB | 	callpa	#(@LR__3452-@LR__3447)>>2,fcache_load_ptr_
28c90                 | LR__3447
28c90     18 4E 05 F1 | 	add	fp, #24
28c94     A7 28 02 FB | 	rdlong	local02, fp
28c98     3C 4E 05 F1 | 	add	fp, #60
28c9c     A7 2E 02 FB | 	rdlong	local05, fp
28ca0     54 4E 85 F1 | 	sub	fp, #84
28ca4     17 29 52 F2 | 	cmps	local02, local05 wc
28ca8     20 01 90 3D |  if_ae	jmp	#LR__3453
28cac     18 4E 05 F1 | 	add	fp, #24
28cb0     A7 30 02 FB | 	rdlong	local06, fp
28cb4     18 4E 85 F1 | 	sub	fp, #24
28cb8     00 30 56 F2 | 	cmps	local06, #0 wc
28cbc     58 00 90 CD |  if_b	jmp	#LR__3448
28cc0     18 4E 05 F1 | 	add	fp, #24
28cc4     A7 30 02 FB | 	rdlong	local06, fp
28cc8     40 4E 05 F1 | 	add	fp, #64
28ccc     A7 32 02 FB | 	rdlong	local07, fp
28cd0     58 4E 85 F1 | 	sub	fp, #88
28cd4     19 31 52 F2 | 	cmps	local06, local07 wc
28cd8     3C 00 90 3D |  if_ae	jmp	#LR__3448
28cdc     C0 4E 05 F1 | 	add	fp, #192
28ce0     A7 34 02 FB | 	rdlong	local08, fp
28ce4     1A 33 02 F6 | 	mov	local07, local08
28ce8     01 32 06 F1 | 	add	local07, #1
28cec     A7 32 62 FC | 	wrlong	local07, fp
28cf0     A8 4E 85 F1 | 	sub	fp, #168
28cf4     A7 32 02 FB | 	rdlong	local07, fp
28cf8     19 37 02 F6 | 	mov	local09, local07
28cfc     58 4E 05 F1 | 	add	fp, #88
28d00     A7 38 02 F6 | 	mov	local10, fp
28d04     A7 36 02 F1 | 	add	local09, fp
28d08     1B 3B C2 FA | 	rdbyte	local11, local09
28d0c     1A 3B 42 FC | 	wrbyte	local11, local08
28d10     70 4E 85 F1 | 	sub	fp, #112
28d14     20 00 90 FD | 	jmp	#LR__3449
28d18                 | LR__3448
28d18     C0 4E 05 F1 | 	add	fp, #192
28d1c     A7 34 02 FB | 	rdlong	local08, fp
28d20     1A 37 02 F6 | 	mov	local09, local08
28d24     01 36 06 F1 | 	add	local09, #1
28d28     A7 36 62 FC | 	wrlong	local09, fp
28d2c     C0 4E 85 F1 | 	sub	fp, #192
28d30     30 36 06 F6 | 	mov	local09, #48
28d34     1A 61 48 FC | 	wrbyte	#48, local08
28d38                 | LR__3449
28d38     18 4E 05 F1 | 	add	fp, #24
28d3c     A7 30 02 FB | 	rdlong	local06, fp
28d40     38 4E 05 F1 | 	add	fp, #56
28d44     A7 3C 02 FB | 	rdlong	local12, fp
28d48     50 4E 85 F1 | 	sub	fp, #80
28d4c     1E 31 0A F2 | 	cmp	local06, local12 wz
28d50     5C 00 90 5D |  if_ne	jmp	#LR__3451
28d54     10 4F 05 F1 | 	add	fp, #272
28d58     A7 32 02 FB | 	rdlong	local07, fp
28d5c     10 4F 85 F1 | 	sub	fp, #272
28d60     19 37 0A F6 | 	mov	local09, local07 wz
28d64     28 00 90 5D |  if_ne	jmp	#LR__3450
28d68     54 4E 05 F1 | 	add	fp, #84
28d6c     A7 3A 02 FB | 	rdlong	local11, fp
28d70     1D 39 02 F6 | 	mov	local10, local11
28d74     01 38 86 F1 | 	sub	local10, #1
28d78     3C 4E 85 F1 | 	sub	fp, #60
28d7c     A7 3E 02 FB | 	rdlong	local13, fp
28d80     18 4E 85 F1 | 	sub	fp, #24
28d84     1F 41 02 F6 | 	mov	local14, local13
28d88     1C 41 52 F2 | 	cmps	local14, local10 wc
28d8c     20 00 90 3D |  if_ae	jmp	#LR__3451
28d90                 | LR__3450
28d90     C0 4E 05 F1 | 	add	fp, #192
28d94     A7 34 02 FB | 	rdlong	local08, fp
28d98     1A 3D 02 F6 | 	mov	local12, local08
28d9c     01 3C 06 F1 | 	add	local12, #1
28da0     A7 3C 62 FC | 	wrlong	local12, fp
28da4     C0 4E 85 F1 | 	sub	fp, #192
28da8     2E 36 06 F6 | 	mov	local09, #46
28dac     1A 5D 48 FC | 	wrbyte	#46, local08
28db0                 | LR__3451
28db0     18 4E 05 F1 | 	add	fp, #24
28db4     A7 42 02 FB | 	rdlong	local15, fp
28db8     21 3D 02 F6 | 	mov	local12, local15
28dbc     01 3C 06 F1 | 	add	local12, #1
28dc0     A7 3C 62 FC | 	wrlong	local12, fp
28dc4     18 4E 85 F1 | 	sub	fp, #24
28dc8     C4 FE 9F FD | 	jmp	#LR__3447
28dcc                 | LR__3452
28dcc                 | LR__3453
28dcc     34 4E 05 F1 | 	add	fp, #52
28dd0     A7 26 0A FB | 	rdlong	local01, fp wz
28dd4     34 4E 85 F1 | 	sub	fp, #52
28dd8     A0 00 90 AD |  if_e	jmp	#LR__3457
28ddc     C0 4E 05 F1 | 	add	fp, #192
28de0     A7 26 02 FB | 	rdlong	local01, fp
28de4     01 26 86 F1 | 	sub	local01, #1
28de8     A7 26 62 FC | 	wrlong	local01, fp
28dec     C0 4E 85 F1 | 	sub	fp, #192
28df0     97 26 48 FB | 	callpa	#(@LR__3455-@LR__3454)>>2,fcache_load_ptr_
28df4                 | LR__3454
28df4     C0 4E 05 F1 | 	add	fp, #192
28df8     A7 26 02 FB | 	rdlong	local01, fp
28dfc     04 4E 05 F1 | 	add	fp, #4
28e00     A7 2A 02 FB | 	rdlong	local03, fp
28e04     C4 4E 85 F1 | 	sub	fp, #196
28e08     15 27 5A F2 | 	cmps	local01, local03 wcz
28e0c     30 00 90 ED |  if_be	jmp	#LR__3456
28e10     C0 4E 05 F1 | 	add	fp, #192
28e14     A7 30 02 FB | 	rdlong	local06, fp
28e18     C0 4E 85 F1 | 	sub	fp, #192
28e1c     18 2D C2 FA | 	rdbyte	local04, local06
28e20     30 2C 0E F2 | 	cmp	local04, #48 wz
28e24     18 00 90 5D |  if_ne	jmp	#LR__3456
28e28     C0 4E 05 F1 | 	add	fp, #192
28e2c     A7 26 02 FB | 	rdlong	local01, fp
28e30     01 26 86 F1 | 	sub	local01, #1
28e34     A7 26 62 FC | 	wrlong	local01, fp
28e38     C0 4E 85 F1 | 	sub	fp, #192
28e3c     B4 FF 9F FD | 	jmp	#LR__3454
28e40                 | LR__3455
28e40                 | LR__3456
28e40     C0 4E 05 F1 | 	add	fp, #192
28e44     A7 28 02 FB | 	rdlong	local02, fp
28e48     C0 4E 85 F1 | 	sub	fp, #192
28e4c     14 27 C2 FA | 	rdbyte	local01, local02
28e50     2E 26 0E F2 | 	cmp	local01, #46 wz
28e54     C0 4E 05 A1 |  if_e	add	fp, #192
28e58     A7 26 02 AB |  if_e	rdlong	local01, fp
28e5c     01 26 86 A1 |  if_e	sub	local01, #1
28e60     A7 26 62 AC |  if_e	wrlong	local01, fp
28e64     C0 4E 85 A1 |  if_e	sub	fp, #192
28e68     C0 4E 05 F1 | 	add	fp, #192
28e6c     A7 2A 02 FB | 	rdlong	local03, fp
28e70     01 2A 06 F1 | 	add	local03, #1
28e74     A7 2A 62 FC | 	wrlong	local03, fp
28e78     C0 4E 85 F1 | 	sub	fp, #192
28e7c                 | LR__3457
28e7c     24 4E 05 F1 | 	add	fp, #36
28e80     A7 26 0A FB | 	rdlong	local01, fp wz
28e84     24 4E 85 F1 | 	sub	fp, #36
28e88     B4 00 90 AD |  if_e	jmp	#LR__3460
28e8c     C0 4E 05 F1 | 	add	fp, #192
28e90     A7 28 02 FB | 	rdlong	local02, fp
28e94     14 2B 02 F6 | 	mov	local03, local02
28e98     01 2A 06 F1 | 	add	local03, #1
28e9c     A7 2A 62 FC | 	wrlong	local03, fp
28ea0     90 4E 85 F1 | 	sub	fp, #144
28ea4     A7 2C 02 FB | 	rdlong	local04, fp
28ea8     14 2D 42 FC | 	wrbyte	local04, local02
28eac     90 4E 05 F1 | 	add	fp, #144
28eb0     A7 28 02 FB | 	rdlong	local02, fp
28eb4     14 2B 02 F6 | 	mov	local03, local02
28eb8     01 2A 06 F1 | 	add	local03, #1
28ebc     A7 2A 62 FC | 	wrlong	local03, fp
28ec0     60 4E 85 F1 | 	sub	fp, #96
28ec4     A7 2C 02 FB | 	rdlong	local04, fp
28ec8     14 2D 42 FC | 	wrbyte	local04, local02
28ecc     48 4E 85 F1 | 	sub	fp, #72
28ed0     A7 00 68 FC | 	wrlong	#0, fp
28ed4     18 4E 85 F1 | 	sub	fp, #24
28ed8                 | LR__3458
28ed8     18 4E 05 F1 | 	add	fp, #24
28edc     A7 28 02 FB | 	rdlong	local02, fp
28ee0     44 4E 05 F1 | 	add	fp, #68
28ee4     A7 2E 02 FB | 	rdlong	local05, fp
28ee8     5C 4E 85 F1 | 	sub	fp, #92
28eec     17 29 52 F2 | 	cmps	local02, local05 wc
28ef0     4C 00 90 3D |  if_ae	jmp	#LR__3459
28ef4     C0 4E 05 F1 | 	add	fp, #192
28ef8     A7 34 02 FB | 	rdlong	local08, fp
28efc     1A 3D 02 F6 | 	mov	local12, local08
28f00     01 3C 06 F1 | 	add	local12, #1
28f04     A7 3C 62 FC | 	wrlong	local12, fp
28f08     A8 4E 85 F1 | 	sub	fp, #168
28f0c     A7 32 02 FB | 	rdlong	local07, fp
28f10     19 37 02 F6 | 	mov	local09, local07
28f14     98 4E 05 F1 | 	add	fp, #152
28f18     A7 38 02 F6 | 	mov	local10, fp
28f1c     A7 36 02 F1 | 	add	local09, fp
28f20     1B 3B C2 FA | 	rdbyte	local11, local09
28f24     1A 3B 42 FC | 	wrbyte	local11, local08
28f28     98 4E 85 F1 | 	sub	fp, #152
28f2c     A7 3C 02 FB | 	rdlong	local12, fp
28f30     01 3C 06 F1 | 	add	local12, #1
28f34     A7 3C 62 FC | 	wrlong	local12, fp
28f38     18 4E 85 F1 | 	sub	fp, #24
28f3c     98 FF 9F FD | 	jmp	#LR__3458
28f40                 | LR__3459
28f40                 | LR__3460
28f40     C0 4E 05 F1 | 	add	fp, #192
28f44     A7 26 02 FB | 	rdlong	local01, fp
28f48     C0 4E 85 F1 | 	sub	fp, #192
28f4c     13 01 48 FC | 	wrbyte	#0, local01
28f50                 | LR__3461
28f50     6C 4E 05 F1 | 	add	fp, #108
28f54     A7 26 0A FB | 	rdlong	local01, fp wz
28f58     6C 4E 85 F1 | 	sub	fp, #108
28f5c     90 01 90 AD |  if_e	jmp	#LR__3472
28f60     48 4E 05 F1 | 	add	fp, #72
28f64     A7 2A 0A FB | 	rdlong	local03, fp wz
28f68     48 4E 85 F1 | 	sub	fp, #72
28f6c     80 01 90 AD |  if_e	jmp	#LR__3472
28f70     C4 4E 05 F1 | 	add	fp, #196
28f74     A7 12 02 FB | 	rdlong	arg01, fp
28f78     C4 4E 85 F1 | 	sub	fp, #196
28f7c     09 45 02 F6 | 	mov	local16, arg01
28f80     97 06 48 FB | 	callpa	#(@LR__3463-@LR__3462)>>2,fcache_load_ptr_
28f84                 | LR__3462
28f84     22 FB C9 FA | 	rdbyte	result1, local16 wz
28f88     01 44 06 51 |  if_ne	add	local16, #1
28f8c     F4 FF 9F 5D |  if_ne	jmp	#LR__3462
28f90                 | LR__3463
28f90     09 45 82 F1 | 	sub	local16, arg01
28f94     22 2D 02 F6 | 	mov	local04, local16
28f98     6C 4E 05 F1 | 	add	fp, #108
28f9c     A7 30 02 FB | 	rdlong	local06, fp
28fa0     6C 4E 85 F1 | 	sub	fp, #108
28fa4     18 2D 5A F2 | 	cmps	local04, local06 wcz
28fa8     44 01 90 ED |  if_be	jmp	#LR__3472
28fac     C4 4E 05 F1 | 	add	fp, #196
28fb0     A7 26 02 FB | 	rdlong	local01, fp
28fb4     5C 4E 05 F1 | 	add	fp, #92
28fb8     A7 26 62 FC | 	wrlong	local01, fp
28fbc     FC 4E 85 F1 | 	sub	fp, #252
28fc0     A7 26 0A FB | 	rdlong	local01, fp wz
28fc4     24 4E 85 F1 | 	sub	fp, #36
28fc8     20 00 90 AD |  if_e	jmp	#LR__3464
28fcc     B8 4E 05 F1 | 	add	fp, #184
28fd0     A7 00 68 FC | 	wrlong	#0, fp
28fd4     4C 4E 85 F1 | 	sub	fp, #76
28fd8     A7 26 02 FB | 	rdlong	local01, fp
28fdc     B0 4E 05 F1 | 	add	fp, #176
28fe0     A7 26 62 FC | 	wrlong	local01, fp
28fe4     1C 4F 85 F1 | 	sub	fp, #284
28fe8     24 00 90 FD | 	jmp	#LR__3465
28fec                 | LR__3464
28fec     6C 4E 05 F1 | 	add	fp, #108
28ff0     A7 26 02 FB | 	rdlong	local01, fp
28ff4     01 26 86 F1 | 	sub	local01, #1
28ff8     4C 4E 05 F1 | 	add	fp, #76
28ffc     A7 2A 02 FB | 	rdlong	local03, fp
29000     15 27 82 F1 | 	sub	local01, local03
29004     64 4E 05 F1 | 	add	fp, #100
29008     A7 26 62 FC | 	wrlong	local01, fp
2900c     1C 4F 85 F1 | 	sub	fp, #284
29010                 | LR__3465
29010     97 20 48 FB | 	callpa	#(@LR__3467-@LR__3466)>>2,fcache_load_ptr_
29014                 | LR__3466
29014     1C 4F 05 F1 | 	add	fp, #284
29018     A7 26 0A FB | 	rdlong	local01, fp wz
2901c     1C 4F 85 F1 | 	sub	fp, #284
29020     30 00 90 AD |  if_e	jmp	#LR__3468
29024     20 4F 05 F1 | 	add	fp, #288
29028     A7 28 02 FB | 	rdlong	local02, fp
2902c     14 2B 02 F6 | 	mov	local03, local02
29030     01 2A 06 F1 | 	add	local03, #1
29034     A7 2A 62 FC | 	wrlong	local03, fp
29038     14 55 48 FC | 	wrbyte	#42, local02
2903c     04 4E 85 F1 | 	sub	fp, #4
29040     A7 26 02 FB | 	rdlong	local01, fp
29044     01 26 86 F1 | 	sub	local01, #1
29048     A7 26 62 FC | 	wrlong	local01, fp
2904c     1C 4F 85 F1 | 	sub	fp, #284
29050     C0 FF 9F FD | 	jmp	#LR__3466
29054                 | LR__3467
29054                 | LR__3468
29054     B8 4E 05 F1 | 	add	fp, #184
29058     A7 26 0A FB | 	rdlong	local01, fp wz
2905c     B8 4E 85 F1 | 	sub	fp, #184
29060     70 00 90 AD |  if_e	jmp	#LR__3471
29064     20 4F 05 F1 | 	add	fp, #288
29068     A7 28 02 FB | 	rdlong	local02, fp
2906c     14 2B 02 F6 | 	mov	local03, local02
29070     01 2A 06 F1 | 	add	local03, #1
29074     A7 2A 62 FC | 	wrlong	local03, fp
29078     14 5D 48 FC | 	wrbyte	#46, local02
2907c     04 4E 85 F1 | 	sub	fp, #4
29080     A7 00 68 FC | 	wrlong	#0, fp
29084     1C 4F 85 F1 | 	sub	fp, #284
29088                 | LR__3469
29088     1C 4F 05 F1 | 	add	fp, #284
2908c     A7 28 02 FB | 	rdlong	local02, fp
29090     64 4E 85 F1 | 	sub	fp, #100
29094     A7 2E 02 FB | 	rdlong	local05, fp
29098     B8 4E 85 F1 | 	sub	fp, #184
2909c     17 29 52 F2 | 	cmps	local02, local05 wc
290a0     30 00 90 3D |  if_ae	jmp	#LR__3470
290a4     20 4F 05 F1 | 	add	fp, #288
290a8     A7 34 02 FB | 	rdlong	local08, fp
290ac     1A 3D 02 F6 | 	mov	local12, local08
290b0     01 3C 06 F1 | 	add	local12, #1
290b4     A7 3C 62 FC | 	wrlong	local12, fp
290b8     1A 55 48 FC | 	wrbyte	#42, local08
290bc     04 4E 85 F1 | 	sub	fp, #4
290c0     A7 3C 02 FB | 	rdlong	local12, fp
290c4     01 3C 06 F1 | 	add	local12, #1
290c8     A7 3C 62 FC | 	wrlong	local12, fp
290cc     1C 4F 85 F1 | 	sub	fp, #284
290d0     B4 FF 9F FD | 	jmp	#LR__3469
290d4                 | LR__3470
290d4                 | LR__3471
290d4     20 4F 05 F1 | 	add	fp, #288
290d8     A7 28 02 FB | 	rdlong	local02, fp
290dc     14 2B 02 F6 | 	mov	local03, local02
290e0     01 2A 06 F1 | 	add	local03, #1
290e4     A7 2A 62 FC | 	wrlong	local03, fp
290e8     20 4F 85 F1 | 	sub	fp, #288
290ec     14 01 48 FC | 	wrbyte	#0, local02
290f0                 | LR__3472
290f0     04 4E 05 F1 | 	add	fp, #4
290f4     A7 12 02 FB | 	rdlong	arg01, fp
290f8     04 4E 05 F1 | 	add	fp, #4
290fc     A7 14 02 FB | 	rdlong	arg02, fp
29100     BC 4E 05 F1 | 	add	fp, #188
29104     A7 16 02 FB | 	rdlong	arg03, fp
29108     C4 4E 85 F1 | 	sub	fp, #196
2910c     C4 EE BF FD | 	call	#__system___fmtstr
29110                 | LR__3473
29110     A7 F0 03 F6 | 	mov	ptra, fp
29114     B2 00 A0 FD | 	call	#popregs_
29118                 | __system___fmtfloat_ret
29118     2D 00 64 FD | 	ret
2911c                 | 
2911c                 | __system__Left_S
2911c     04 4A 05 F6 | 	mov	COUNT_, #4
29120     A8 00 A0 FD | 	call	#pushregs_
29124     09 27 02 F6 | 	mov	local01, arg01
29128     0A 29 02 F6 | 	mov	local02, arg02
2912c     01 28 56 F2 | 	cmps	local02, #1 wc
29130     B5 01 00 CF 
29134     B2 FB 05 C6 |  if_b	mov	result1, ##@LR__5423
29138     5C 00 90 CD |  if_b	jmp	#LR__3483
2913c     13 13 02 F6 | 	mov	arg01, local01
29140     09 2B 02 F6 | 	mov	local03, arg01
29144     97 06 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
29148                 | LR__3480
29148     15 FB C9 FA | 	rdbyte	result1, local03 wz
2914c     01 2A 06 51 |  if_ne	add	local03, #1
29150     F4 FF 9F 5D |  if_ne	jmp	#LR__3480
29154                 | LR__3481
29154     09 2B 82 F1 | 	sub	local03, arg01
29158     15 FB 01 F6 | 	mov	result1, local03
2915c     14 FB 59 F2 | 	cmps	result1, local02 wcz
29160     13 FB 01 E6 |  if_be	mov	result1, local01
29164     30 00 90 ED |  if_be	jmp	#LR__3483
29168     14 13 02 F6 | 	mov	arg01, local02
2916c     02 12 06 F1 | 	add	arg01, #2
29170     CC 20 B0 FD | 	call	#__system___gc_alloc_managed
29174     FD 2C 0A F6 | 	mov	local04, result1 wz
29178     18 00 90 AD |  if_e	jmp	#LR__3482
2917c     16 13 02 F6 | 	mov	arg01, local04
29180     13 15 02 F6 | 	mov	arg02, local01
29184     14 17 02 F6 | 	mov	arg03, local02
29188     C0 DD BF FD | 	call	#__system____builtin_memmove
2918c     16 29 02 F1 | 	add	local02, local04
29190     14 01 48 FC | 	wrbyte	#0, local02
29194                 | LR__3482
29194     16 FB 01 F6 | 	mov	result1, local04
29198                 | LR__3483
29198     A7 F0 03 F6 | 	mov	ptra, fp
2919c     B2 00 A0 FD | 	call	#popregs_
291a0                 | __system__Left_S_ret
291a0     2D 00 64 FD | 	ret
291a4                 | 
291a4                 | __system__Right_S
291a4     05 4A 05 F6 | 	mov	COUNT_, #5
291a8     A8 00 A0 FD | 	call	#pushregs_
291ac     09 27 02 F6 | 	mov	local01, arg01
291b0     0A 29 02 F6 | 	mov	local02, arg02
291b4     01 28 56 F2 | 	cmps	local02, #1 wc
291b8     B5 01 00 CF 
291bc     B3 FB 05 C6 |  if_b	mov	result1, ##@LR__5424
291c0     64 00 90 CD |  if_b	jmp	#LR__3493
291c4     13 13 02 F6 | 	mov	arg01, local01
291c8     09 2B 02 F6 | 	mov	local03, arg01
291cc     97 06 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
291d0                 | LR__3490
291d0     15 FB C9 FA | 	rdbyte	result1, local03 wz
291d4     01 2A 06 51 |  if_ne	add	local03, #1
291d8     F4 FF 9F 5D |  if_ne	jmp	#LR__3490
291dc                 | LR__3491
291dc     09 2B 82 F1 | 	sub	local03, arg01
291e0     15 FB 01 F6 | 	mov	result1, local03
291e4     FD 2C 02 F6 | 	mov	local04, result1
291e8     14 2D 5A F2 | 	cmps	local04, local02 wcz
291ec     13 FB 01 E6 |  if_be	mov	result1, local01
291f0     34 00 90 ED |  if_be	jmp	#LR__3493
291f4     14 13 02 F6 | 	mov	arg01, local02
291f8     02 12 06 F1 | 	add	arg01, #2
291fc     40 20 B0 FD | 	call	#__system___gc_alloc_managed
29200     FD 2E 0A F6 | 	mov	local05, result1 wz
29204     1C 00 90 AD |  if_e	jmp	#LR__3492
29208     14 2D 82 F1 | 	sub	local04, local02
2920c     13 2D 02 F1 | 	add	local04, local01
29210     01 28 06 F1 | 	add	local02, #1
29214     17 13 02 F6 | 	mov	arg01, local05
29218     16 15 02 F6 | 	mov	arg02, local04
2921c     14 17 02 F6 | 	mov	arg03, local02
29220     28 DD BF FD | 	call	#__system____builtin_memmove
29224                 | LR__3492
29224     17 FB 01 F6 | 	mov	result1, local05
29228                 | LR__3493
29228     A7 F0 03 F6 | 	mov	ptra, fp
2922c     B2 00 A0 FD | 	call	#popregs_
29230                 | __system__Right_S_ret
29230     2D 00 64 FD | 	ret
29234                 | 
29234                 | __system__Mid_S
29234     05 4A 05 F6 | 	mov	COUNT_, #5
29238     A8 00 A0 FD | 	call	#pushregs_
2923c     09 27 02 F6 | 	mov	local01, arg01
29240     0A 29 02 F6 | 	mov	local02, arg02
29244     01 16 56 F2 | 	cmps	arg03, #1 wc
29248     B5 01 00 CF 
2924c     B4 FB 05 C6 |  if_b	mov	result1, ##@LR__5425
29250     80 00 90 CD |  if_b	jmp	#LR__3503
29254     01 28 86 F1 | 	sub	local02, #1
29258     00 28 56 F3 | 	fges	local02, #0 wc
2925c     13 13 02 F6 | 	mov	arg01, local01
29260     09 2B 02 F6 | 	mov	local03, arg01
29264     97 06 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
29268                 | LR__3500
29268     15 FB C9 FA | 	rdbyte	result1, local03 wz
2926c     01 2A 06 51 |  if_ne	add	local03, #1
29270     F4 FF 9F 5D |  if_ne	jmp	#LR__3500
29274                 | LR__3501
29274     09 2B 82 F1 | 	sub	local03, arg01
29278     15 FB 01 F6 | 	mov	result1, local03
2927c     FD 14 02 F6 | 	mov	arg02, result1
29280     14 15 52 F2 | 	cmps	arg02, local02 wc
29284     B5 01 00 CF 
29288     B5 FB 05 C6 |  if_b	mov	result1, ##@LR__5426
2928c     44 00 90 CD |  if_b	jmp	#LR__3503
29290     0A 2D 02 F6 | 	mov	local04, arg02
29294     14 2D 82 F1 | 	sub	local04, local02
29298     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
2929c     0B 2D 02 16 |  if_a	mov	local04, arg03
292a0     16 13 02 F6 | 	mov	arg01, local04
292a4     02 12 06 F1 | 	add	arg01, #2
292a8     94 1F B0 FD | 	call	#__system___gc_alloc_managed
292ac     FD 2E 0A F6 | 	mov	local05, result1 wz
292b0     1C 00 90 AD |  if_e	jmp	#LR__3502
292b4     13 29 02 F1 | 	add	local02, local01
292b8     17 13 02 F6 | 	mov	arg01, local05
292bc     14 15 02 F6 | 	mov	arg02, local02
292c0     16 17 02 F6 | 	mov	arg03, local04
292c4     84 DC BF FD | 	call	#__system____builtin_memmove
292c8     17 2D 02 F1 | 	add	local04, local05
292cc     16 01 48 FC | 	wrbyte	#0, local04
292d0                 | LR__3502
292d0     17 FB 01 F6 | 	mov	result1, local05
292d4                 | LR__3503
292d4     A7 F0 03 F6 | 	mov	ptra, fp
292d8     B2 00 A0 FD | 	call	#popregs_
292dc                 | __system__Mid_S_ret
292dc     2D 00 64 FD | 	ret
292e0                 | 
292e0                 | __system__Chr_S
292e0     01 4A 05 F6 | 	mov	COUNT_, #1
292e4     A8 00 A0 FD | 	call	#pushregs_
292e8     09 27 02 F6 | 	mov	local01, arg01
292ec     03 12 06 F6 | 	mov	arg01, #3
292f0     4C 1F B0 FD | 	call	#__system___gc_alloc_managed
292f4     00 FA 4D F2 | 	cmps	result1, #0 wz
292f8     FD 26 42 5C |  if_ne	wrbyte	local01, result1
292fc     01 FA 05 51 |  if_ne	add	result1, #1
29300     FD 00 48 5C |  if_ne	wrbyte	#0, result1
29304     01 FA 85 51 |  if_ne	sub	result1, #1
29308     A7 F0 03 F6 | 	mov	ptra, fp
2930c     B2 00 A0 FD | 	call	#popregs_
29310                 | __system__Chr_S_ret
29310     2D 00 64 FD | 	ret
29314                 | 
29314                 | __system__str_S
29314     02 4A 05 F6 | 	mov	COUNT_, #2
29318     A8 00 A0 FD | 	call	#pushregs_
2931c     09 27 02 F6 | 	mov	local01, arg01
29320     10 12 06 F6 | 	mov	arg01, #16
29324     18 1F B0 FD | 	call	#__system___gc_alloc_managed
29328     FD 28 0A F6 | 	mov	local02, result1 wz
2932c     30 00 90 AD |  if_e	jmp	#LR__3510
29330     F8 13 02 F6 | 	mov	arg01, ptra
29334     08 F0 07 F1 | 	add	ptra, #8
29338     09 29 62 FC | 	wrlong	local02, arg01
2933c     04 12 06 F1 | 	add	arg01, #4
29340     09 01 68 FC | 	wrlong	#0, arg01
29344     04 12 86 F1 | 	sub	arg01, #4
29348     00 60 05 FF 
2934c     00 12 46 F5 | 	or	arg01, ##180355072
29350     00 14 06 F6 | 	mov	arg02, #0
29354     13 17 02 F6 | 	mov	arg03, local01
29358     67 18 06 F6 | 	mov	arg04, #103
2935c     90 EE BF FD | 	call	#__system___fmtfloat
29360                 | LR__3510
29360     14 FB 01 F6 | 	mov	result1, local02
29364     A7 F0 03 F6 | 	mov	ptra, fp
29368     B2 00 A0 FD | 	call	#popregs_
2936c                 | __system__str_S_ret
2936c     2D 00 64 FD | 	ret
29370                 | 
29370                 | __system__Number_S
29370     08 4A 05 F6 | 	mov	COUNT_, #8
29374     A8 00 A0 FD | 	call	#pushregs_
29378     09 27 02 F6 | 	mov	local01, arg01
2937c     0A 29 0A F6 | 	mov	local02, arg02 wz
29380     0B 2B 02 F6 | 	mov	local03, arg03
29384     3C 00 90 5D |  if_ne	jmp	#LR__3522
29388     01 28 06 F6 | 	mov	local02, #1
2938c     15 2D 02 F6 | 	mov	local04, local03
29390     01 2E 06 F6 | 	mov	local05, #1
29394     97 16 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
29398                 | LR__3520
29398     00 30 06 F6 | 	mov	local06, #0
2939c     13 2D 1A F2 | 	cmp	local04, local01 wcz
293a0     01 30 66 E6 |  if_be	neg	local06, #1
293a4     16 2F 12 F2 | 	cmp	local05, local04 wc
293a8     19 33 A2 F1 | 	subx	local07, local07
293ac     19 31 CA F7 | 	test	local06, local07 wz
293b0     15 2D 02 5D |  if_ne	qmul	local04, local03
293b4     16 2F 02 56 |  if_ne	mov	local05, local04
293b8     01 28 06 51 |  if_ne	add	local02, #1
293bc     18 2C 62 5D |  if_ne	getqx	local04
293c0     D4 FF 9F 5D |  if_ne	jmp	#LR__3520
293c4                 | LR__3521
293c4                 | LR__3522
293c4     20 28 36 F3 | 	fle	local02, #32 wc
293c8     14 13 02 F6 | 	mov	arg01, local02
293cc     02 12 06 F1 | 	add	arg01, #2
293d0     6C 1E B0 FD | 	call	#__system___gc_alloc_managed
293d4     FD 30 02 F6 | 	mov	local06, result1
293d8     14 33 02 F6 | 	mov	local07, local02
293dc     18 33 02 F1 | 	add	local07, local06
293e0     19 01 48 FC | 	wrbyte	#0, local07
293e4     97 1A 48 FB | 	callpa	#(@LR__3524-@LR__3523)>>2,fcache_load_ptr_
293e8                 | LR__3523
293e8     01 28 16 F2 | 	cmp	local02, #1 wc
293ec     2C 00 90 CD |  if_b	jmp	#LR__3525
293f0     15 27 12 FD | 	qdiv	local01, local03
293f4     01 28 86 F1 | 	sub	local02, #1
293f8     14 33 02 F6 | 	mov	local07, local02
293fc     18 33 02 F1 | 	add	local07, local06
29400     19 34 62 FD | 	getqy	local08
29404     0A 34 16 F2 | 	cmp	local08, #10 wc
29408     30 34 06 C1 |  if_b	add	local08, #48
2940c     37 34 06 31 |  if_ae	add	local08, #55
29410     19 35 42 FC | 	wrbyte	local08, local07
29414     18 26 62 FD | 	getqx	local01
29418     CC FF 9F FD | 	jmp	#LR__3523
2941c                 | LR__3524
2941c                 | LR__3525
2941c     18 FB 01 F6 | 	mov	result1, local06
29420     A7 F0 03 F6 | 	mov	ptra, fp
29424     B2 00 A0 FD | 	call	#popregs_
29428                 | __system__Number_S_ret
29428     2D 00 64 FD | 	ret
2942c                 | 
2942c                 | __system__LCase_S
2942c     07 4A 05 F6 | 	mov	COUNT_, #7
29430     A8 00 A0 FD | 	call	#pushregs_
29434     09 27 02 F6 | 	mov	local01, arg01
29438     09 29 02 F6 | 	mov	local02, arg01
2943c     97 06 48 FB | 	callpa	#(@LR__3531-@LR__3530)>>2,fcache_load_ptr_
29440                 | LR__3530
29440     14 FB C9 FA | 	rdbyte	result1, local02 wz
29444     01 28 06 51 |  if_ne	add	local02, #1
29448     F4 FF 9F 5D |  if_ne	jmp	#LR__3530
2944c                 | LR__3531
2944c     09 29 82 F1 | 	sub	local02, arg01
29450     14 FB 01 F6 | 	mov	result1, local02
29454     FD 28 0A F6 | 	mov	local02, result1 wz
29458     B5 01 00 AF 
2945c     B6 FB 05 A6 |  if_e	mov	result1, ##@LR__5427
29460     7C 00 90 AD |  if_e	jmp	#LR__3537
29464     14 13 02 F6 | 	mov	arg01, local02
29468     02 12 06 F1 | 	add	arg01, #2
2946c     D0 1D B0 FD | 	call	#__system___gc_alloc_managed
29470     FD 2A 0A F6 | 	mov	local03, result1 wz
29474     64 00 90 AD |  if_e	jmp	#LR__3536
29478     01 2C 66 F6 | 	neg	local04, #1
2947c     97 26 48 FB | 	callpa	#(@LR__3535-@LR__3532)>>2,fcache_load_ptr_
29480                 | LR__3532
29480     01 2C 06 F1 | 	add	local04, #1
29484     16 2F 02 F6 | 	mov	local05, local04
29488     13 2F 02 F1 | 	add	local05, local01
2948c     17 31 C2 FA | 	rdbyte	local06, local05
29490     41 30 56 F2 | 	cmps	local06, #65 wc
29494     18 00 90 CD |  if_b	jmp	#LR__3533
29498     5B 30 56 F2 | 	cmps	local06, #91 wc
2949c     16 33 02 C6 |  if_b	mov	local07, local04
294a0     15 33 02 C1 |  if_b	add	local07, local03
294a4     20 30 06 C1 |  if_b	add	local06, #32
294a8     19 31 42 CC |  if_b	wrbyte	local06, local07
294ac     0C 00 90 CD |  if_b	jmp	#LR__3534
294b0                 | LR__3533
294b0     16 33 02 F6 | 	mov	local07, local04
294b4     15 33 02 F1 | 	add	local07, local03
294b8     19 31 42 FC | 	wrbyte	local06, local07
294bc                 | LR__3534
294bc     14 31 02 F6 | 	mov	local06, local02
294c0     01 30 86 F1 | 	sub	local06, #1
294c4     18 2D 0A F2 | 	cmp	local04, local06 wz
294c8     B4 FF 9F 5D |  if_ne	jmp	#LR__3532
294cc                 | LR__3535
294cc     15 29 02 F1 | 	add	local02, local03
294d0     14 01 48 FC | 	wrbyte	#0, local02
294d4     15 FB 01 F6 | 	mov	result1, local03
294d8     04 00 90 FD | 	jmp	#LR__3537
294dc                 | LR__3536
294dc     15 FB 01 F6 | 	mov	result1, local03
294e0                 | LR__3537
294e0     A7 F0 03 F6 | 	mov	ptra, fp
294e4     B2 00 A0 FD | 	call	#popregs_
294e8                 | __system__LCase_S_ret
294e8     2D 00 64 FD | 	ret
294ec                 | 
294ec                 | __system__LTrim_S
294ec     05 4A 05 F6 | 	mov	COUNT_, #5
294f0     A8 00 A0 FD | 	call	#pushregs_
294f4     09 27 02 F6 | 	mov	local01, arg01
294f8     09 29 02 F6 | 	mov	local02, arg01
294fc     97 06 48 FB | 	callpa	#(@LR__3541-@LR__3540)>>2,fcache_load_ptr_
29500                 | LR__3540
29500     14 FB C9 FA | 	rdbyte	result1, local02 wz
29504     01 28 06 51 |  if_ne	add	local02, #1
29508     F4 FF 9F 5D |  if_ne	jmp	#LR__3540
2950c                 | LR__3541
2950c     09 29 82 F1 | 	sub	local02, arg01
29510     14 FB 01 F6 | 	mov	result1, local02
29514     FD 28 0A F6 | 	mov	local02, result1 wz
29518     B5 01 00 AF 
2951c     B7 FB 05 A6 |  if_e	mov	result1, ##@LR__5428
29520     7C 00 90 AD |  if_e	jmp	#LR__3546
29524     00 2A 06 F6 | 	mov	local03, #0
29528     14 2D 02 F6 | 	mov	local04, local02
2952c                 | LR__3542
2952c     16 2B 52 F2 | 	cmps	local03, local04 wc
29530     68 00 90 3D |  if_ae	jmp	#LR__3545
29534     15 17 02 F6 | 	mov	arg03, local03
29538     13 17 02 F1 | 	add	arg03, local01
2953c     0B 17 C2 FA | 	rdbyte	arg03, arg03
29540     20 16 0E F2 | 	cmp	arg03, #32 wz
29544     4C 00 90 AD |  if_e	jmp	#LR__3544
29548     14 13 02 F6 | 	mov	arg01, local02
2954c     15 13 82 F1 | 	sub	arg01, local03
29550     02 12 06 F1 | 	add	arg01, #2
29554     E8 1C B0 FD | 	call	#__system___gc_alloc_managed
29558     FD 2E 0A F6 | 	mov	local05, result1 wz
2955c     2C 00 90 AD |  if_e	jmp	#LR__3543
29560     15 15 02 F6 | 	mov	arg02, local03
29564     13 15 02 F1 | 	add	arg02, local01
29568     14 17 02 F6 | 	mov	arg03, local02
2956c     15 17 82 F1 | 	sub	arg03, local03
29570     17 13 02 F6 | 	mov	arg01, local05
29574     D4 D9 BF FD | 	call	#__system____builtin_memmove
29578     15 29 82 F1 | 	sub	local02, local03
2957c     17 29 02 F1 | 	add	local02, local05
29580     14 01 48 FC | 	wrbyte	#0, local02
29584     17 FB 01 F6 | 	mov	result1, local05
29588     14 00 90 FD | 	jmp	#LR__3546
2958c                 | LR__3543
2958c     17 FB 01 F6 | 	mov	result1, local05
29590     0C 00 90 FD | 	jmp	#LR__3546
29594                 | LR__3544
29594     01 2A 06 F1 | 	add	local03, #1
29598     90 FF 9F FD | 	jmp	#LR__3542
2959c                 | LR__3545
2959c     13 FB 01 F6 | 	mov	result1, local01
295a0                 | LR__3546
295a0     A7 F0 03 F6 | 	mov	ptra, fp
295a4     B2 00 A0 FD | 	call	#popregs_
295a8                 | __system__LTrim_S_ret
295a8     2D 00 64 FD | 	ret
295ac                 | 
295ac                 | __system__RTrim_S
295ac     04 4A 05 F6 | 	mov	COUNT_, #4
295b0     A8 00 A0 FD | 	call	#pushregs_
295b4     09 27 02 F6 | 	mov	local01, arg01
295b8     09 29 02 F6 | 	mov	local02, arg01
295bc     97 06 48 FB | 	callpa	#(@LR__3551-@LR__3550)>>2,fcache_load_ptr_
295c0                 | LR__3550
295c0     14 FB C9 FA | 	rdbyte	result1, local02 wz
295c4     01 28 06 51 |  if_ne	add	local02, #1
295c8     F4 FF 9F 5D |  if_ne	jmp	#LR__3550
295cc                 | LR__3551
295cc     09 29 82 F1 | 	sub	local02, arg01
295d0     14 FB 01 F6 | 	mov	result1, local02
295d4     FD 28 0A F6 | 	mov	local02, result1 wz
295d8     B5 01 00 AF 
295dc     B8 FB 05 A6 |  if_e	mov	result1, ##@LR__5429
295e0     74 00 90 AD |  if_e	jmp	#LR__3555
295e4     14 2B 02 F6 | 	mov	local03, local02
295e8     01 2A 86 F1 | 	sub	local03, #1
295ec                 | LR__3552
295ec     15 15 02 F6 | 	mov	arg02, local03
295f0     13 15 02 F1 | 	add	arg02, local01
295f4     0A 29 C2 FA | 	rdbyte	local02, arg02
295f8     20 28 0E F2 | 	cmp	local02, #32 wz
295fc     44 00 90 AD |  if_e	jmp	#LR__3554
29600     15 13 02 F6 | 	mov	arg01, local03
29604     02 12 06 F1 | 	add	arg01, #2
29608     34 1C B0 FD | 	call	#__system___gc_alloc_managed
2960c     FD 2C 0A F6 | 	mov	local04, result1 wz
29610     28 00 90 AD |  if_e	jmp	#LR__3553
29614     15 17 02 F6 | 	mov	arg03, local03
29618     01 16 06 F1 | 	add	arg03, #1
2961c     16 13 02 F6 | 	mov	arg01, local04
29620     13 15 02 F6 | 	mov	arg02, local01
29624     24 D9 BF FD | 	call	#__system____builtin_memmove
29628     01 2A 06 F1 | 	add	local03, #1
2962c     16 2B 02 F1 | 	add	local03, local04
29630     15 01 48 FC | 	wrbyte	#0, local03
29634     16 FB 01 F6 | 	mov	result1, local04
29638     1C 00 90 FD | 	jmp	#LR__3555
2963c                 | LR__3553
2963c     16 FB 01 F6 | 	mov	result1, local04
29640     14 00 90 FD | 	jmp	#LR__3555
29644                 | LR__3554
29644     01 2A 86 F1 | 	sub	local03, #1
29648     00 2A 56 F2 | 	cmps	local03, #0 wc
2964c     9C FF 9F 3D |  if_ae	jmp	#LR__3552
29650     B5 01 00 FF 
29654     B9 FB 05 F6 | 	mov	result1, ##@LR__5430
29658                 | LR__3555
29658     A7 F0 03 F6 | 	mov	ptra, fp
2965c     B2 00 A0 FD | 	call	#popregs_
29660                 | __system__RTrim_S_ret
29660     2D 00 64 FD | 	ret
29664                 | 
29664                 | __system__Instr
29664     07 4A 05 F6 | 	mov	COUNT_, #7
29668     A8 00 A0 FD | 	call	#pushregs_
2966c     09 27 02 F6 | 	mov	local01, arg01
29670     0A 29 02 F6 | 	mov	local02, arg02
29674     0B 2B 02 F6 | 	mov	local03, arg03
29678     15 13 02 F6 | 	mov	arg01, local03
2967c     09 2D 02 F6 | 	mov	local04, arg01
29680     97 06 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
29684                 | LR__3560
29684     16 FB C9 FA | 	rdbyte	result1, local04 wz
29688     01 2C 06 51 |  if_ne	add	local04, #1
2968c     F4 FF 9F 5D |  if_ne	jmp	#LR__3560
29690                 | LR__3561
29690     09 2D 82 F1 | 	sub	local04, arg01
29694     16 2F 02 F6 | 	mov	local05, local04
29698     14 13 02 F6 | 	mov	arg01, local02
2969c     09 2D 02 F6 | 	mov	local04, arg01
296a0     97 06 48 FB | 	callpa	#(@LR__3563-@LR__3562)>>2,fcache_load_ptr_
296a4                 | LR__3562
296a4     16 FB C9 FA | 	rdbyte	result1, local04 wz
296a8     01 2C 06 51 |  if_ne	add	local04, #1
296ac     F4 FF 9F 5D |  if_ne	jmp	#LR__3562
296b0                 | LR__3563
296b0     09 2D 82 F1 | 	sub	local04, arg01
296b4     16 FB 01 F6 | 	mov	result1, local04
296b8     FD 18 0A F6 | 	mov	arg04, result1 wz
296bc     00 FA 05 A6 |  if_e	mov	result1, #0
296c0     98 00 90 AD |  if_e	jmp	#LR__3567
296c4     00 2E 0E F2 | 	cmp	local05, #0 wz
296c8     00 FA 05 A6 |  if_e	mov	result1, #0
296cc     8C 00 90 AD |  if_e	jmp	#LR__3567
296d0     0C 27 5A F2 | 	cmps	local01, arg04 wcz
296d4     00 FA 05 16 |  if_a	mov	result1, #0
296d8     80 00 90 1D |  if_a	jmp	#LR__3567
296dc     01 26 56 F2 | 	cmps	local01, #1 wc
296e0     01 26 06 C6 |  if_b	mov	local01, #1
296e4     15 31 C2 FA | 	rdbyte	local06, local03
296e8     01 2E 0E F2 | 	cmp	local05, #1 wz
296ec     18 00 90 5D |  if_ne	jmp	#LR__3564
296f0     14 13 02 F6 | 	mov	arg01, local02
296f4     18 15 02 F6 | 	mov	arg02, local06
296f8     13 17 02 F6 | 	mov	arg03, local01
296fc     00 18 06 F6 | 	mov	arg04, #0
29700     14 37 B0 FD | 	call	#__system____ScanForChar
29704     54 00 90 FD | 	jmp	#LR__3567
29708                 | LR__3564
29708     13 33 02 F6 | 	mov	local07, local01
2970c                 | LR__3565
2970c     14 13 02 F6 | 	mov	arg01, local02
29710     18 15 02 F6 | 	mov	arg02, local06
29714     19 17 02 F6 | 	mov	arg03, local07
29718     00 18 06 F6 | 	mov	arg04, #0
2971c     F8 36 B0 FD | 	call	#__system____ScanForChar
29720     FD 32 0A F6 | 	mov	local07, result1 wz
29724     30 00 90 AD |  if_e	jmp	#LR__3566
29728     17 17 02 F6 | 	mov	arg03, local05
2972c     14 13 02 F6 | 	mov	arg01, local02
29730     19 15 02 F6 | 	mov	arg02, local07
29734     FC FA BF FD | 	call	#__system__Mid_S
29738     FD 12 02 F6 | 	mov	arg01, result1
2973c     15 15 02 F6 | 	mov	arg02, local03
29740     80 D9 BF FD | 	call	#__system___string_cmp
29744     00 FA 0D F2 | 	cmp	result1, #0 wz
29748     19 FB 01 A6 |  if_e	mov	result1, local07
2974c     0C 00 90 AD |  if_e	jmp	#LR__3567
29750     17 33 02 F1 | 	add	local07, local05
29754     B4 FF 9F FD | 	jmp	#LR__3565
29758                 | LR__3566
29758     00 FA 05 F6 | 	mov	result1, #0
2975c                 | LR__3567
2975c     A7 F0 03 F6 | 	mov	ptra, fp
29760     B2 00 A0 FD | 	call	#popregs_
29764                 | __system__Instr_ret
29764     2D 00 64 FD | 	ret
29768                 | 
29768                 | __system__InstrRev
29768     07 4A 05 F6 | 	mov	COUNT_, #7
2976c     A8 00 A0 FD | 	call	#pushregs_
29770     09 27 02 F6 | 	mov	local01, arg01
29774     0A 29 02 F6 | 	mov	local02, arg02
29778     0B 2B 02 F6 | 	mov	local03, arg03
2977c     15 13 02 F6 | 	mov	arg01, local03
29780     09 2D 02 F6 | 	mov	local04, arg01
29784     97 06 48 FB | 	callpa	#(@LR__3571-@LR__3570)>>2,fcache_load_ptr_
29788                 | LR__3570
29788     16 FB C9 FA | 	rdbyte	result1, local04 wz
2978c     01 2C 06 51 |  if_ne	add	local04, #1
29790     F4 FF 9F 5D |  if_ne	jmp	#LR__3570
29794                 | LR__3571
29794     09 2D 82 F1 | 	sub	local04, arg01
29798     16 2F 02 F6 | 	mov	local05, local04
2979c     14 13 02 F6 | 	mov	arg01, local02
297a0     09 2D 02 F6 | 	mov	local04, arg01
297a4     97 06 48 FB | 	callpa	#(@LR__3573-@LR__3572)>>2,fcache_load_ptr_
297a8                 | LR__3572
297a8     16 FB C9 FA | 	rdbyte	result1, local04 wz
297ac     01 2C 06 51 |  if_ne	add	local04, #1
297b0     F4 FF 9F 5D |  if_ne	jmp	#LR__3572
297b4                 | LR__3573
297b4     09 2D 82 F1 | 	sub	local04, arg01
297b8     16 FB 01 F6 | 	mov	result1, local04
297bc     FD 18 0A F6 | 	mov	arg04, result1 wz
297c0     00 FA 05 A6 |  if_e	mov	result1, #0
297c4     98 00 90 AD |  if_e	jmp	#LR__3577
297c8     00 2E 0E F2 | 	cmp	local05, #0 wz
297cc     00 FA 05 A6 |  if_e	mov	result1, #0
297d0     8C 00 90 AD |  if_e	jmp	#LR__3577
297d4     0C 27 5A F2 | 	cmps	local01, arg04 wcz
297d8     0C 27 02 16 |  if_a	mov	local01, arg04
297dc     01 26 56 F2 | 	cmps	local01, #1 wc
297e0     01 26 06 C6 |  if_b	mov	local01, #1
297e4     15 31 C2 FA | 	rdbyte	local06, local03
297e8     01 2E 0E F2 | 	cmp	local05, #1 wz
297ec     18 00 90 5D |  if_ne	jmp	#LR__3574
297f0     14 13 02 F6 | 	mov	arg01, local02
297f4     18 15 02 F6 | 	mov	arg02, local06
297f8     13 17 02 F6 | 	mov	arg03, local01
297fc     01 18 06 F6 | 	mov	arg04, #1
29800     14 36 B0 FD | 	call	#__system____ScanForChar
29804     58 00 90 FD | 	jmp	#LR__3577
29808                 | LR__3574
29808     17 33 02 F6 | 	mov	local07, local05
2980c     01 32 86 F1 | 	sub	local07, #1
29810                 | LR__3575
29810     14 13 02 F6 | 	mov	arg01, local02
29814     18 15 02 F6 | 	mov	arg02, local06
29818     19 17 02 F6 | 	mov	arg03, local07
2981c     01 18 06 F6 | 	mov	arg04, #1
29820     F4 35 B0 FD | 	call	#__system____ScanForChar
29824     FD 32 0A F6 | 	mov	local07, result1 wz
29828     30 00 90 AD |  if_e	jmp	#LR__3576
2982c     17 17 02 F6 | 	mov	arg03, local05
29830     14 13 02 F6 | 	mov	arg01, local02
29834     19 15 02 F6 | 	mov	arg02, local07
29838     F8 F9 BF FD | 	call	#__system__Mid_S
2983c     FD 12 02 F6 | 	mov	arg01, result1
29840     15 15 02 F6 | 	mov	arg02, local03
29844     7C D8 BF FD | 	call	#__system___string_cmp
29848     00 FA 0D F2 | 	cmp	result1, #0 wz
2984c     19 FB 01 A6 |  if_e	mov	result1, local07
29850     0C 00 90 AD |  if_e	jmp	#LR__3577
29854     17 33 82 F1 | 	sub	local07, local05
29858     B4 FF 9F FD | 	jmp	#LR__3575
2985c                 | LR__3576
2985c     00 FA 05 F6 | 	mov	result1, #0
29860                 | LR__3577
29860     A7 F0 03 F6 | 	mov	ptra, fp
29864     B2 00 A0 FD | 	call	#popregs_
29868                 | __system__InstrRev_ret
29868     2D 00 64 FD | 	ret
2986c                 | 
2986c                 | __system___remove
2986c     06 4A 05 F6 | 	mov	COUNT_, #6
29870     A8 00 A0 FD | 	call	#pushregs_
29874     84 E7 05 F1 | 	add	ptr___system__dat__, #388
29878     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2987c     09 15 02 F6 | 	mov	arg02, arg01
29880     13 13 02 F6 | 	mov	arg01, local01
29884     00 16 06 F6 | 	mov	arg03, #0
29888     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2988c     A4 DF BF FD | 	call	#__system____getvfsforfile
29890     FD 28 0A F6 | 	mov	local02, result1 wz
29894     10 00 90 AD |  if_e	jmp	#LR__3580
29898     20 28 06 F1 | 	add	local02, #32
2989c     14 13 0A FB | 	rdlong	arg01, local02 wz
298a0     20 28 86 F1 | 	sub	local02, #32
298a4     14 00 90 5D |  if_ne	jmp	#LR__3581
298a8                 | LR__3580
298a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
298ac     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
298b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
298b4     01 FA 65 F6 | 	neg	result1, #1
298b8     A8 00 90 FD | 	jmp	#LR__3584
298bc                 | LR__3581
298bc     40 28 06 F1 | 	add	local02, #64
298c0     14 2B 02 FB | 	rdlong	local03, local02
298c4     15 2D 02 F6 | 	mov	local04, local03
298c8     40 28 86 F1 | 	sub	local02, #64
298cc     13 2C 46 F7 | 	zerox	local04, #19
298d0     14 2A 46 F0 | 	shr	local03, #20
298d4     02 2A 66 F0 | 	shl	local03, #2
298d8     ED 2A 02 F1 | 	add	local03, __methods__
298dc     15 2B 02 FB | 	rdlong	local03, local03
298e0     13 13 02 F6 | 	mov	arg01, local01
298e4     F2 2E 02 F6 | 	mov	local05, objptr
298e8     16 E5 01 F6 | 	mov	objptr, local04
298ec     2D 2A 62 FD | 	call	local03
298f0     17 E5 01 F6 | 	mov	objptr, local05
298f4     FD 30 02 F6 | 	mov	local06, result1
298f8     FF FF 7F FF 
298fc     F2 31 0E F2 | 	cmp	local06, ##-14 wz
29900     38 00 90 5D |  if_ne	jmp	#LR__3582
29904     3C 28 06 F1 | 	add	local02, #60
29908     14 31 02 FB | 	rdlong	local06, local02
2990c     18 2B 02 F6 | 	mov	local03, local06
29910     13 30 46 F7 | 	zerox	local06, #19
29914     14 2A 46 F0 | 	shr	local03, #20
29918     02 2A 66 F0 | 	shl	local03, #2
2991c     ED 2A 02 F1 | 	add	local03, __methods__
29920     15 2B 02 FB | 	rdlong	local03, local03
29924     13 13 02 F6 | 	mov	arg01, local01
29928     F2 2E 02 F6 | 	mov	local05, objptr
2992c     18 E5 01 F6 | 	mov	objptr, local06
29930     2D 2A 62 FD | 	call	local03
29934     17 E5 01 F6 | 	mov	objptr, local05
29938     FD 30 02 F6 | 	mov	local06, result1
2993c                 | LR__3582
2993c     00 30 0E F2 | 	cmp	local06, #0 wz
29940     1C 00 90 AD |  if_e	jmp	#LR__3583
29944     18 13 6A F6 | 	neg	arg01, local06 wz
29948     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2994c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
29950     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29954     01 FA 65 56 |  if_ne	neg	result1, #1
29958     00 FA 05 A6 |  if_e	mov	result1, #0
2995c     04 00 90 FD | 	jmp	#LR__3584
29960                 | LR__3583
29960     00 FA 05 F6 | 	mov	result1, #0
29964                 | LR__3584
29964     A7 F0 03 F6 | 	mov	ptra, fp
29968     B2 00 A0 FD | 	call	#popregs_
2996c                 | __system___remove_ret
2996c     2D 00 64 FD | 	ret
29970                 | 
29970                 | __system___mkdir
29970     05 4A 05 F6 | 	mov	COUNT_, #5
29974     A8 00 A0 FD | 	call	#pushregs_
29978     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2997c     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
29980     09 15 02 F6 | 	mov	arg02, arg01
29984     13 13 02 F6 | 	mov	arg01, local01
29988     00 16 06 F6 | 	mov	arg03, #0
2998c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
29990     A0 DE BF FD | 	call	#__system____getvfsforfile
29994     FD 28 0A F6 | 	mov	local02, result1 wz
29998     10 00 90 AD |  if_e	jmp	#LR__3590
2999c     20 28 06 F1 | 	add	local02, #32
299a0     14 15 0A FB | 	rdlong	arg02, local02 wz
299a4     20 28 86 F1 | 	sub	local02, #32
299a8     14 00 90 5D |  if_ne	jmp	#LR__3591
299ac                 | LR__3590
299ac     20 E6 05 F1 | 	add	ptr___system__dat__, #32
299b0     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
299b4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
299b8     01 FA 65 F6 | 	neg	result1, #1
299bc     60 00 90 FD | 	jmp	#LR__3593
299c0                 | LR__3591
299c0     38 28 06 F1 | 	add	local02, #56
299c4     14 2B 02 FB | 	rdlong	local03, local02
299c8     15 2D 02 F6 | 	mov	local04, local03
299cc     13 2A 46 F7 | 	zerox	local03, #19
299d0     14 2C 46 F0 | 	shr	local04, #20
299d4     02 2C 66 F0 | 	shl	local04, #2
299d8     ED 2C 02 F1 | 	add	local04, __methods__
299dc     16 2D 02 FB | 	rdlong	local04, local04
299e0     13 13 02 F6 | 	mov	arg01, local01
299e4     FF 15 06 F6 | 	mov	arg02, #511
299e8     F2 2E 02 F6 | 	mov	local05, objptr
299ec     15 E5 01 F6 | 	mov	objptr, local03
299f0     2D 2C 62 FD | 	call	local04
299f4     17 E5 01 F6 | 	mov	objptr, local05
299f8     FD 12 0A F6 | 	mov	arg01, result1 wz
299fc     1C 00 90 AD |  if_e	jmp	#LR__3592
29a00     09 13 6A F6 | 	neg	arg01, arg01 wz
29a04     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29a08     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
29a0c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29a10     01 FA 65 56 |  if_ne	neg	result1, #1
29a14     00 FA 05 A6 |  if_e	mov	result1, #0
29a18     04 00 90 FD | 	jmp	#LR__3593
29a1c                 | LR__3592
29a1c     00 FA 05 F6 | 	mov	result1, #0
29a20                 | LR__3593
29a20     A7 F0 03 F6 | 	mov	ptra, fp
29a24     B2 00 A0 FD | 	call	#popregs_
29a28                 | __system___mkdir_ret
29a28     2D 00 64 FD | 	ret
29a2c                 | 
29a2c                 | __system___strerror
29a2c     00 12 56 F2 | 	cmps	arg01, #0 wc
29a30     08 00 90 CD |  if_b	jmp	#LR__3600
29a34     1A 12 56 F2 | 	cmps	arg01, #26 wc
29a38     04 00 90 CD |  if_b	jmp	#LR__3601
29a3c                 | LR__3600
29a3c     19 12 06 F6 | 	mov	arg01, #25
29a40                 | LR__3601
29a40     02 12 66 F0 | 	shl	arg01, #2
29a44     01 00 00 FF 
29a48     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
29a4c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
29a50     09 FB 01 FB | 	rdlong	result1, arg01
29a54     01 00 00 FF 
29a58     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
29a5c                 | __system___strerror_ret
29a5c     2D 00 64 FD | 	ret
29a60                 | 
29a60                 | __system___int64_shl
29a60     20 16 CE F7 | 	test	arg03, #32 wz
29a64     09 15 02 56 |  if_ne	mov	arg02, arg01
29a68     00 12 06 56 |  if_ne	mov	arg01, #0
29a6c     1F 16 CE F7 | 	test	arg03, #31 wz
29a70     18 00 90 AD |  if_e	jmp	#LR__3610
29a74     0B 15 62 F0 | 	shl	arg02, arg03
29a78     09 FB 01 F6 | 	mov	result1, arg01
29a7c     0B FD 61 F6 | 	neg	result2, arg03
29a80     FE FA 41 F0 | 	shr	result1, result2
29a84     FD 14 42 F5 | 	or	arg02, result1
29a88     0B 13 62 F0 | 	shl	arg01, arg03
29a8c                 | LR__3610
29a8c     0A FD 01 F6 | 	mov	result2, arg02
29a90     09 FB 01 F6 | 	mov	result1, arg01
29a94                 | __system___int64_shl_ret
29a94     2D 00 64 FD | 	ret
29a98                 | 
29a98                 | __system___usepins
29a98     14 E6 05 F1 | 	add	ptr___system__dat__, #20
29a9c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
29aa0     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
29aa4     00 13 CA F7 | 	test	arg01, _var01 wz
29aa8     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
29aac     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
29ab0     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
29ab4     01 15 CA A7 |  if_e	test	arg02, _var02 wz
29ab8     00 FA 05 56 |  if_ne	mov	result1, #0
29abc     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
29ac0     14 E6 05 F1 | 	add	ptr___system__dat__, #20
29ac4     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
29ac8     09 03 42 F5 | 	or	_var02, arg01
29acc     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
29ad0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
29ad4     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
29ad8     0A 03 42 F5 | 	or	_var02, arg02
29adc     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
29ae0     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
29ae4     01 FA 65 F6 | 	neg	result1, #1
29ae8                 | __system___usepins_ret
29ae8     2D 00 64 FD | 	ret
29aec                 | 
29aec                 | __system___freepins
29aec     14 E6 05 F1 | 	add	ptr___system__dat__, #20
29af0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
29af4     09 01 22 F5 | 	andn	_var01, arg01
29af8     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
29afc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
29b00     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
29b04     0A 01 22 F5 | 	andn	_var01, arg02
29b08     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
29b0c     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
29b10                 | __system___freepins_ret
29b10     2D 00 64 FD | 	ret
29b14                 | 
29b14                 | __system___float_fromuns
29b14     09 17 0A F6 | 	mov	arg03, arg01 wz
29b18     0B FB 01 A6 |  if_e	mov	result1, arg03
29b1c     24 00 90 AD |  if_e	jmp	#LR__3620
29b20     0B 15 92 F7 | 	encod	arg02, arg03 wc
29b24     01 14 06 C1 |  if_b	add	arg02, #1
29b28     01 14 86 F1 | 	sub	arg02, #1
29b2c     1F 12 06 F6 | 	mov	arg01, #31
29b30     0A 13 82 F1 | 	sub	arg01, arg02
29b34     09 17 62 F0 | 	shl	arg03, arg01
29b38     02 16 46 F0 | 	shr	arg03, #2
29b3c     00 12 06 F6 | 	mov	arg01, #0
29b40     4C 09 B0 FD | 	call	#__system___float_Pack
29b44                 | LR__3620
29b44                 | __system___float_fromuns_ret
29b44     2D 00 64 FD | 	ret
29b48                 | 
29b48                 | __system___float_add
29b48     0F 4A 05 F6 | 	mov	COUNT_, #15
29b4c     A8 00 A0 FD | 	call	#pushregs_
29b50     09 27 02 F6 | 	mov	local01, arg01
29b54     0A 29 02 F6 | 	mov	local02, arg02
29b58     00 2A 06 F6 | 	mov	local03, #0
29b5c     13 2D 02 F6 | 	mov	local04, local01
29b60     16 2F 02 F6 | 	mov	local05, local04
29b64     16 2E 46 F7 | 	zerox	local05, #22
29b68     16 31 02 F6 | 	mov	local06, local04
29b6c     01 30 66 F0 | 	shl	local06, #1
29b70     18 30 46 F0 | 	shr	local06, #24
29b74     1F 2C 46 F0 | 	shr	local04, #31
29b78     14 13 02 F6 | 	mov	arg01, local02
29b7c     09 FB 01 F6 | 	mov	result1, arg01
29b80     FD 32 02 F6 | 	mov	local07, result1
29b84     19 35 02 F6 | 	mov	local08, local07
29b88     16 34 46 F7 | 	zerox	local08, #22
29b8c     19 37 02 F6 | 	mov	local09, local07
29b90     01 36 66 F0 | 	shl	local09, #1
29b94     18 36 46 F0 | 	shr	local09, #24
29b98     1B 39 02 F6 | 	mov	local10, local09
29b9c     1F 32 46 F0 | 	shr	local07, #31
29ba0     00 3A 06 F6 | 	mov	local11, #0
29ba4     00 3C 06 F6 | 	mov	local12, #0
29ba8     1C 31 12 F2 | 	cmp	local06, local10 wc
29bac     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
29bb0     2C 00 90 1D |  if_a	jmp	#LR__3630
29bb4     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
29bb8     24 00 90 3D |  if_ae	jmp	#LR__3630
29bbc     17 3F 02 F6 | 	mov	local13, local05
29bc0     1A 2F 02 F6 | 	mov	local05, local08
29bc4     1F 35 02 F6 | 	mov	local08, local13
29bc8     18 3F 02 F6 | 	mov	local13, local06
29bcc     1C 31 02 F6 | 	mov	local06, local10
29bd0     1F 39 02 F6 | 	mov	local10, local13
29bd4     16 3F 02 F6 | 	mov	local13, local04
29bd8     19 2D 02 F6 | 	mov	local04, local07
29bdc     1F 33 02 F6 | 	mov	local07, local13
29be0                 | LR__3630
29be0     FF 30 0E F2 | 	cmp	local06, #255 wz
29be4     70 01 90 AD |  if_e	jmp	#LR__3645
29be8     00 30 0E F2 | 	cmp	local06, #0 wz
29bec     AC 01 90 AD |  if_e	jmp	#LR__3647
29bf0     17 2E 26 F4 | 	bith	local05, #23
29bf4                 | LR__3631
29bf4     00 38 0E F2 | 	cmp	local10, #0 wz
29bf8     F0 01 90 AD |  if_e	jmp	#LR__3651
29bfc     17 34 26 F4 | 	bith	local08, #23
29c00                 | LR__3632
29c00     7F 30 86 F1 | 	sub	local06, #127
29c04     7F 38 86 F1 | 	sub	local10, #127
29c08     18 41 02 F6 | 	mov	local14, local06
29c0c     1C 41 82 F1 | 	sub	local14, local10
29c10     97 14 48 FB | 	callpa	#(@LR__3634-@LR__3633)>>2,fcache_load_ptr_
29c14                 | LR__3633
29c14     20 40 56 F2 | 	cmps	local14, #32 wc
29c18     20 00 90 CD |  if_b	jmp	#LR__3635
29c1c     1A 37 02 F6 | 	mov	local09, local08
29c20     00 3A 0E F2 | 	cmp	local11, #0 wz
29c24     6F 3A 62 FD | 	wrnz	local11
29c28     1D 37 42 F5 | 	or	local09, local11
29c2c     1B 3B 02 F6 | 	mov	local11, local09
29c30     00 34 06 F6 | 	mov	local08, #0
29c34     20 40 86 F1 | 	sub	local14, #32
29c38     D8 FF 9F FD | 	jmp	#LR__3633
29c3c                 | LR__3634
29c3c                 | LR__3635
29c3c     00 40 0E F2 | 	cmp	local14, #0 wz
29c40     38 00 90 AD |  if_e	jmp	#LR__3636
29c44     1A 3F 02 F6 | 	mov	local13, local08
29c48     20 38 06 F6 | 	mov	local10, #32
29c4c     20 39 82 F1 | 	sub	local10, local14
29c50     1C 3F 62 F0 | 	shl	local13, local10
29c54     1D 39 02 F6 | 	mov	local10, local11
29c58     20 36 06 F6 | 	mov	local09, #32
29c5c     20 37 82 F1 | 	sub	local09, local14
29c60     1B 39 6A F0 | 	shl	local10, local09 wz
29c64     20 3B 42 F0 | 	shr	local11, local14
29c68     20 35 42 F0 | 	shr	local08, local14
29c6c     1F 3B 42 F5 | 	or	local11, local13
29c70     00 42 06 F6 | 	mov	local15, #0
29c74     01 42 06 56 |  if_ne	mov	local15, #1
29c78     21 3B 42 F5 | 	or	local11, local15
29c7c                 | LR__3636
29c7c     16 43 02 F6 | 	mov	local15, local04
29c80     19 43 62 F5 | 	xor	local15, local07
29c84     01 42 CE F7 | 	test	local15, #1 wz
29c88     18 00 90 AD |  if_e	jmp	#LR__3637
29c8c     1A 35 22 F6 | 	not	local08, local08
29c90     1D 3B 22 F6 | 	not	local11, local11
29c94     01 3A 0E F1 | 	add	local11, #1 wz
29c98     00 42 06 F6 | 	mov	local15, #0
29c9c     01 42 06 A6 |  if_e	mov	local15, #1
29ca0     21 35 02 F1 | 	add	local08, local15
29ca4                 | LR__3637
29ca4     1D 3D 12 F1 | 	add	local12, local11 wc
29ca8     1A 2F 22 F1 | 	addx	local05, local08
29cac     00 2E 56 F2 | 	cmps	local05, #0 wc
29cb0     1C 00 90 3D |  if_ae	jmp	#LR__3638
29cb4     01 2C 66 F5 | 	xor	local04, #1
29cb8     17 2F 22 F6 | 	not	local05, local05
29cbc     1E 3D 22 F6 | 	not	local12, local12
29cc0     01 3C 0E F1 | 	add	local12, #1 wz
29cc4     00 42 06 F6 | 	mov	local15, #0
29cc8     01 42 06 A6 |  if_e	mov	local15, #1
29ccc     21 2F 02 F1 | 	add	local05, local15
29cd0                 | LR__3638
29cd0     00 80 00 FF 
29cd4     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
29cd8     28 00 90 CD |  if_b	jmp	#LR__3639
29cdc     01 30 06 F1 | 	add	local06, #1
29ce0     1E 41 02 F6 | 	mov	local14, local12
29ce4     01 40 06 F5 | 	and	local14, #1
29ce8     01 3C 46 F0 | 	shr	local12, #1
29cec     17 43 02 F6 | 	mov	local15, local05
29cf0     1F 42 66 F0 | 	shl	local15, #31
29cf4     21 3D 42 F5 | 	or	local12, local15
29cf8     20 3D 42 F5 | 	or	local12, local14
29cfc     01 2E 46 F0 | 	shr	local05, #1
29d00     3C 00 90 FD | 	jmp	#LR__3644
29d04                 | LR__3639
29d04     00 40 00 FF 
29d08     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
29d0c     30 00 90 3D |  if_ae	jmp	#LR__3643
29d10     00 2E 0E F2 | 	cmp	local05, #0 wz
29d14     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
29d18     08 2C 46 A5 |  if_e	or	local04, #8
29d1c     01 2C 26 A5 |  if_e	andn	local04, #1
29d20     1C 00 90 AD |  if_e	jmp	#LR__3642
29d24                 | LR__3640
29d24     00 40 00 FF 
29d28     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
29d2c     10 00 90 3D |  if_ae	jmp	#LR__3641
29d30     1E 3D 12 F1 | 	add	local12, local12 wc
29d34     17 2F 22 F1 | 	addx	local05, local05
29d38     01 30 86 F1 | 	sub	local06, #1
29d3c     E4 FF 9F FD | 	jmp	#LR__3640
29d40                 | LR__3641
29d40                 | LR__3642
29d40                 | LR__3643
29d40                 | LR__3644
29d40     17 13 02 F6 | 	mov	arg01, local05
29d44     1E 15 02 F6 | 	mov	arg02, local12
29d48     18 17 02 F6 | 	mov	arg03, local06
29d4c     16 19 02 F6 | 	mov	arg04, local04
29d50     08 35 B0 FD | 	call	#__system__pack_0689
29d54     DC 00 90 FD | 	jmp	#LR__3655
29d58                 | LR__3645
29d58     FF 38 0E F2 | 	cmp	local10, #255 wz
29d5c     10 00 90 5D |  if_ne	jmp	#LR__3646
29d60     16 33 0A F2 | 	cmp	local07, local04 wz
29d64     00 F8 3F 5F 
29d68     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
29d6c     C4 00 90 5D |  if_ne	jmp	#LR__3655
29d70                 | LR__3646
29d70     00 2E 0E F2 | 	cmp	local05, #0 wz
29d74     00 F8 3F 5F 
29d78     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
29d7c     B4 00 90 5D |  if_ne	jmp	#LR__3655
29d80     1E 15 02 F6 | 	mov	arg02, local12
29d84     18 17 02 F6 | 	mov	arg03, local06
29d88     16 19 02 F6 | 	mov	arg04, local04
29d8c     02 18 46 F5 | 	or	arg04, #2
29d90     17 13 02 F6 | 	mov	arg01, local05
29d94     C4 34 B0 FD | 	call	#__system__pack_0689
29d98     98 00 90 FD | 	jmp	#LR__3655
29d9c                 | LR__3647
29d9c     00 2E 0E F2 | 	cmp	local05, #0 wz
29da0     28 00 90 AD |  if_e	jmp	#LR__3650
29da4     01 2E 66 F0 | 	shl	local05, #1
29da8     97 0E 48 FB | 	callpa	#(@LR__3649-@LR__3648)>>2,fcache_load_ptr_
29dac                 | LR__3648
29dac     00 40 00 FF 
29db0     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
29db4     18 43 02 C6 |  if_b	mov	local15, local06
29db8     01 42 86 C1 |  if_b	sub	local15, #1
29dbc     21 31 02 C6 |  if_b	mov	local06, local15
29dc0     01 2E 66 C0 |  if_b	shl	local05, #1
29dc4     E4 FF 9F CD |  if_b	jmp	#LR__3648
29dc8                 | LR__3649
29dc8     28 FE 9F FD | 	jmp	#LR__3631
29dcc                 | LR__3650
29dcc     19 2D 02 F5 | 	and	local04, local07
29dd0     16 19 02 F6 | 	mov	arg04, local04
29dd4     08 18 46 F5 | 	or	arg04, #8
29dd8     00 12 06 F6 | 	mov	arg01, #0
29ddc     00 14 06 F6 | 	mov	arg02, #0
29de0     00 16 06 F6 | 	mov	arg03, #0
29de4     74 34 B0 FD | 	call	#__system__pack_0689
29de8     48 00 90 FD | 	jmp	#LR__3655
29dec                 | LR__3651
29dec     00 34 0E F2 | 	cmp	local08, #0 wz
29df0     28 00 90 AD |  if_e	jmp	#LR__3654
29df4     01 34 66 F0 | 	shl	local08, #1
29df8     97 0E 48 FB | 	callpa	#(@LR__3653-@LR__3652)>>2,fcache_load_ptr_
29dfc                 | LR__3652
29dfc     00 40 00 FF 
29e00     00 34 16 F2 | 	cmp	local08, ##8388608 wc
29e04     1C 43 02 C6 |  if_b	mov	local15, local10
29e08     01 42 86 C1 |  if_b	sub	local15, #1
29e0c     21 39 02 C6 |  if_b	mov	local10, local15
29e10     01 34 66 C0 |  if_b	shl	local08, #1
29e14     E4 FF 9F CD |  if_b	jmp	#LR__3652
29e18                 | LR__3653
29e18     E4 FD 9F FD | 	jmp	#LR__3632
29e1c                 | LR__3654
29e1c     7F 30 86 F1 | 	sub	local06, #127
29e20     17 13 02 F6 | 	mov	arg01, local05
29e24     1E 15 02 F6 | 	mov	arg02, local12
29e28     18 17 02 F6 | 	mov	arg03, local06
29e2c     16 19 02 F6 | 	mov	arg04, local04
29e30     28 34 B0 FD | 	call	#__system__pack_0689
29e34                 | LR__3655
29e34     A7 F0 03 F6 | 	mov	ptra, fp
29e38     B2 00 A0 FD | 	call	#popregs_
29e3c                 | __system___float_add_ret
29e3c     2D 00 64 FD | 	ret
29e40                 | 
29e40                 | __system___float_sqrt
29e40     04 4A 05 F6 | 	mov	COUNT_, #4
29e44     A8 00 A0 FD | 	call	#pushregs_
29e48     09 27 02 F6 | 	mov	local01, arg01
29e4c     09 FB 01 F6 | 	mov	result1, arg01
29e50     FD 28 02 F6 | 	mov	local02, result1
29e54     14 2B 02 F6 | 	mov	local03, local02
29e58     16 2A 46 F7 | 	zerox	local03, #22
29e5c     14 2D 02 F6 | 	mov	local04, local02
29e60     01 2C 66 F0 | 	shl	local04, #1
29e64     18 2C 4E F0 | 	shr	local04, #24 wz
29e68     1F 28 46 F0 | 	shr	local02, #31
29e6c     70 00 90 AD |  if_e	jmp	#LR__3661
29e70     17 2A 26 F4 | 	bith	local03, #23
29e74                 | LR__3660
29e74     00 28 0E F2 | 	cmp	local02, #0 wz
29e78     00 F8 3F 5F 
29e7c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
29e80     88 00 90 5D |  if_ne	jmp	#LR__3664
29e84     FF 2C 0E F2 | 	cmp	local04, #255 wz
29e88     13 FB 01 A6 |  if_e	mov	result1, local01
29e8c     7C 00 90 AD |  if_e	jmp	#LR__3664
29e90     7F 2C 86 F1 | 	sub	local04, #127
29e94     01 2C CE F7 | 	test	local04, #1 wz
29e98     01 2A 66 50 |  if_ne	shl	local03, #1
29e9c     05 2A 66 F0 | 	shl	local03, #5
29ea0     15 01 38 FD | 	qsqrt	#0, local03
29ea4     01 2C 86 51 |  if_ne	sub	local04, #1
29ea8     16 2D 52 F6 | 	abs	local04, local04 wc
29eac     01 2C 46 F0 | 	shr	local04, #1
29eb0     16 17 82 F6 | 	negc	arg03, local04
29eb4     14 19 02 F6 | 	mov	arg04, local02
29eb8     18 12 62 FD | 	getqx	arg01
29ebc     09 15 02 F6 | 	mov	arg02, arg01
29ec0     19 14 66 F0 | 	shl	arg02, #25
29ec4     07 12 46 F0 | 	shr	arg01, #7
29ec8     00 80 00 FF 
29ecc     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
29ed0     01 16 06 31 |  if_ae	add	arg03, #1
29ed4     01 12 46 30 |  if_ae	shr	arg01, #1
29ed8     80 33 B0 FD | 	call	#__system__pack_0689
29edc     2C 00 90 FD | 	jmp	#LR__3664
29ee0                 | LR__3661
29ee0     00 2A 0E F2 | 	cmp	local03, #0 wz
29ee4     13 FB 01 A6 |  if_e	mov	result1, local01
29ee8     20 00 90 AD |  if_e	jmp	#LR__3664
29eec     01 2A 66 F0 | 	shl	local03, #1
29ef0     97 0A 48 FB | 	callpa	#(@LR__3663-@LR__3662)>>2,fcache_load_ptr_
29ef4                 | LR__3662
29ef4     00 40 00 FF 
29ef8     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
29efc     01 2C 86 C1 |  if_b	sub	local04, #1
29f00     01 2A 66 C0 |  if_b	shl	local03, #1
29f04     EC FF 9F CD |  if_b	jmp	#LR__3662
29f08                 | LR__3663
29f08     68 FF 9F FD | 	jmp	#LR__3660
29f0c                 | LR__3664
29f0c     A7 F0 03 F6 | 	mov	ptra, fp
29f10     B2 00 A0 FD | 	call	#popregs_
29f14                 | __system___float_sqrt_ret
29f14     2D 00 64 FD | 	ret
29f18                 | 
29f18                 | __system___float_mul
29f18     0B 4A 05 F6 | 	mov	COUNT_, #11
29f1c     A8 00 A0 FD | 	call	#pushregs_
29f20     09 27 02 F6 | 	mov	local01, arg01
29f24     0A 29 02 F6 | 	mov	local02, arg02
29f28     13 2B 02 F6 | 	mov	local03, local01
29f2c     15 2D 02 F6 | 	mov	local04, local03
29f30     16 2C 46 F7 | 	zerox	local04, #22
29f34     15 2F 02 F6 | 	mov	local05, local03
29f38     01 2E 66 F0 | 	shl	local05, #1
29f3c     18 2E 46 F0 | 	shr	local05, #24
29f40     1F 2A 46 F0 | 	shr	local03, #31
29f44     14 FB 01 F6 | 	mov	result1, local02
29f48     FD 30 02 F6 | 	mov	local06, result1
29f4c     18 33 02 F6 | 	mov	local07, local06
29f50     16 32 46 F7 | 	zerox	local07, #22
29f54     18 35 02 F6 | 	mov	local08, local06
29f58     01 34 66 F0 | 	shl	local08, #1
29f5c     18 34 46 F0 | 	shr	local08, #24
29f60     1F 30 46 F0 | 	shr	local06, #31
29f64     18 2B 62 F5 | 	xor	local03, local06
29f68     FF 2E 0E F2 | 	cmp	local05, #255 wz
29f6c     90 00 90 AD |  if_e	jmp	#LR__3673
29f70     FF 34 0E F2 | 	cmp	local08, #255 wz
29f74     D8 00 90 AD |  if_e	jmp	#LR__3675
29f78     00 2E 0E F2 | 	cmp	local05, #0 wz
29f7c     0C 01 90 AD |  if_e	jmp	#LR__3676
29f80     17 2C 26 F4 | 	bith	local04, #23
29f84                 | LR__3670
29f84     00 34 0E F2 | 	cmp	local08, #0 wz
29f88     44 01 90 AD |  if_e	jmp	#LR__3680
29f8c     17 32 26 F4 | 	bith	local07, #23
29f90                 | LR__3671
29f90     16 29 02 F6 | 	mov	local02, local04
29f94     04 28 66 F0 | 	shl	local02, #4
29f98     19 31 02 F6 | 	mov	local06, local07
29f9c     05 30 66 F0 | 	shl	local06, #5
29fa0     18 29 02 FD | 	qmul	local02, local06
29fa4     1A 2F 02 F1 | 	add	local05, local08
29fa8     FE 2E 86 F1 | 	sub	local05, #254
29fac     17 37 02 F6 | 	mov	local09, local05
29fb0     04 2C 66 F0 | 	shl	local04, #4
29fb4     05 32 66 F0 | 	shl	local07, #5
29fb8     18 38 62 FD | 	getqx	local10
29fbc     19 2D 02 FD | 	qmul	local04, local07
29fc0     19 3A 62 FD | 	getqy	local11
29fc4     00 80 00 FF 
29fc8     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
29fcc     18 00 90 CD |  if_b	jmp	#LR__3672
29fd0     01 36 06 F1 | 	add	local09, #1
29fd4     01 38 46 F0 | 	shr	local10, #1
29fd8     1D 35 02 F6 | 	mov	local08, local11
29fdc     1F 34 66 F0 | 	shl	local08, #31
29fe0     1A 39 42 F5 | 	or	local10, local08
29fe4     01 3A 46 F0 | 	shr	local11, #1
29fe8                 | LR__3672
29fe8     1D 13 02 F6 | 	mov	arg01, local11
29fec     1C 15 02 F6 | 	mov	arg02, local10
29ff0     1B 17 02 F6 | 	mov	arg03, local09
29ff4     15 19 02 F6 | 	mov	arg04, local03
29ff8     60 32 B0 FD | 	call	#__system__pack_0689
29ffc     10 01 90 FD | 	jmp	#LR__3684
2a000                 | LR__3673
2a000     00 2C 0E F2 | 	cmp	local04, #0 wz
2a004     13 FB 01 56 |  if_ne	mov	result1, local01
2a008     04 01 90 5D |  if_ne	jmp	#LR__3684
2a00c     FF 34 56 F2 | 	cmps	local08, #255 wc
2a010     00 34 0E C2 |  if_b	cmp	local08, #0 wz
2a014     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
2a018     18 00 90 4D |  if_c_and_nz	jmp	#LR__3674
2a01c     00 F8 3F CF 
2a020     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
2a024     E8 00 90 CD |  if_b	jmp	#LR__3684
2a028     00 32 0E F2 | 	cmp	local07, #0 wz
2a02c     14 FB 01 56 |  if_ne	mov	result1, local02
2a030     DC 00 90 5D |  if_ne	jmp	#LR__3684
2a034                 | LR__3674
2a034     02 2A 46 F5 | 	or	local03, #2
2a038     00 12 06 F6 | 	mov	arg01, #0
2a03c     00 14 06 F6 | 	mov	arg02, #0
2a040     17 17 02 F6 | 	mov	arg03, local05
2a044     15 19 02 F6 | 	mov	arg04, local03
2a048     10 32 B0 FD | 	call	#__system__pack_0689
2a04c     C0 00 90 FD | 	jmp	#LR__3684
2a050                 | LR__3675
2a050     00 2E 0E F2 | 	cmp	local05, #0 wz
2a054     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
2a058     00 F8 3F AF 
2a05c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2a060     AC 00 90 AD |  if_e	jmp	#LR__3684
2a064     00 32 0E F2 | 	cmp	local07, #0 wz
2a068     14 FB 01 56 |  if_ne	mov	result1, local02
2a06c     A0 00 90 5D |  if_ne	jmp	#LR__3684
2a070     1A 17 02 F6 | 	mov	arg03, local08
2a074     15 19 02 F6 | 	mov	arg04, local03
2a078     02 18 46 F5 | 	or	arg04, #2
2a07c     00 12 06 F6 | 	mov	arg01, #0
2a080     00 14 06 F6 | 	mov	arg02, #0
2a084     D4 31 B0 FD | 	call	#__system__pack_0689
2a088     84 00 90 FD | 	jmp	#LR__3684
2a08c                 | LR__3676
2a08c     00 2C 0E F2 | 	cmp	local04, #0 wz
2a090     20 00 90 AD |  if_e	jmp	#LR__3679
2a094     01 2C 66 F0 | 	shl	local04, #1
2a098     97 0A 48 FB | 	callpa	#(@LR__3678-@LR__3677)>>2,fcache_load_ptr_
2a09c                 | LR__3677
2a09c     00 40 00 FF 
2a0a0     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
2a0a4     01 2E 86 C1 |  if_b	sub	local05, #1
2a0a8     01 2C 66 C0 |  if_b	shl	local04, #1
2a0ac     EC FF 9F CD |  if_b	jmp	#LR__3677
2a0b0                 | LR__3678
2a0b0     D0 FE 9F FD | 	jmp	#LR__3670
2a0b4                 | LR__3679
2a0b4     08 2A 46 F5 | 	or	local03, #8
2a0b8     00 12 06 F6 | 	mov	arg01, #0
2a0bc     00 14 06 F6 | 	mov	arg02, #0
2a0c0     00 16 06 F6 | 	mov	arg03, #0
2a0c4     15 19 02 F6 | 	mov	arg04, local03
2a0c8     90 31 B0 FD | 	call	#__system__pack_0689
2a0cc     40 00 90 FD | 	jmp	#LR__3684
2a0d0                 | LR__3680
2a0d0     00 32 0E F2 | 	cmp	local07, #0 wz
2a0d4     20 00 90 AD |  if_e	jmp	#LR__3683
2a0d8     01 32 66 F0 | 	shl	local07, #1
2a0dc     97 0A 48 FB | 	callpa	#(@LR__3682-@LR__3681)>>2,fcache_load_ptr_
2a0e0                 | LR__3681
2a0e0     00 40 00 FF 
2a0e4     00 32 16 F2 | 	cmp	local07, ##8388608 wc
2a0e8     01 34 86 C1 |  if_b	sub	local08, #1
2a0ec     01 32 66 C0 |  if_b	shl	local07, #1
2a0f0     EC FF 9F CD |  if_b	jmp	#LR__3681
2a0f4                 | LR__3682
2a0f4     98 FE 9F FD | 	jmp	#LR__3671
2a0f8                 | LR__3683
2a0f8     08 2A 46 F5 | 	or	local03, #8
2a0fc     00 12 06 F6 | 	mov	arg01, #0
2a100     00 14 06 F6 | 	mov	arg02, #0
2a104     00 16 06 F6 | 	mov	arg03, #0
2a108     15 19 02 F6 | 	mov	arg04, local03
2a10c     4C 31 B0 FD | 	call	#__system__pack_0689
2a110                 | LR__3684
2a110     A7 F0 03 F6 | 	mov	ptra, fp
2a114     B2 00 A0 FD | 	call	#popregs_
2a118                 | __system___float_mul_ret
2a118     2D 00 64 FD | 	ret
2a11c                 | 
2a11c                 | __system___float_div
2a11c     0E 4A 05 F6 | 	mov	COUNT_, #14
2a120     A8 00 A0 FD | 	call	#pushregs_
2a124     09 2B 02 F6 | 	mov	local03, arg01
2a128     0A 2D 02 F6 | 	mov	local04, arg02
2a12c     15 2F 02 F6 | 	mov	local05, local03
2a130     17 31 02 F6 | 	mov	local06, local05
2a134     16 30 46 F7 | 	zerox	local06, #22
2a138     17 33 02 F6 | 	mov	local07, local05
2a13c     01 32 66 F0 | 	shl	local07, #1
2a140     18 32 46 F0 | 	shr	local07, #24
2a144     1F 2E 46 F0 | 	shr	local05, #31
2a148     16 FB 01 F6 | 	mov	result1, local04
2a14c     FD 34 02 F6 | 	mov	local08, result1
2a150     1A 37 02 F6 | 	mov	local09, local08
2a154     16 36 46 F7 | 	zerox	local09, #22
2a158     1A 39 02 F6 | 	mov	local10, local08
2a15c     01 38 66 F0 | 	shl	local10, #1
2a160     18 38 46 F0 | 	shr	local10, #24
2a164     1F 34 46 F0 | 	shr	local08, #31
2a168     1A 2F 62 F5 | 	xor	local05, local08
2a16c     FF 32 0E F2 | 	cmp	local07, #255 wz
2a170     D4 00 90 AD |  if_e	jmp	#LR__3695
2a174     FF 38 0E F2 | 	cmp	local10, #255 wz
2a178     04 01 90 AD |  if_e	jmp	#LR__3696
2a17c     00 32 0E F2 | 	cmp	local07, #0 wz
2a180     24 01 90 AD |  if_e	jmp	#LR__3697
2a184     17 30 26 F4 | 	bith	local06, #23
2a188                 | LR__3690
2a188     00 38 0E F2 | 	cmp	local10, #0 wz
2a18c     70 01 90 AD |  if_e	jmp	#LR__3701
2a190     17 36 26 F4 | 	bith	local09, #23
2a194                 | LR__3691
2a194     1C 33 82 F1 | 	sub	local07, local10
2a198     19 3B 02 F6 | 	mov	local11, local07
2a19c     18 13 02 F6 | 	mov	arg01, local06
2a1a0     02 12 46 F0 | 	shr	arg01, #2
2a1a4     1E 30 66 F0 | 	shl	local06, #30
2a1a8     18 15 02 F6 | 	mov	arg02, local06
2a1ac     1B 17 02 F6 | 	mov	arg03, local09
2a1b0     28 12 62 FD | 	setq	arg01
2a1b4     0B 15 12 FD | 	qdiv	arg02, arg03
2a1b8     00 3C 06 F6 | 	mov	local12, #0
2a1bc     18 26 62 FD | 	getqx	local01
2a1c0     19 FC 61 FD | 	getqy	result2
2a1c4     FE 28 02 F6 | 	mov	local02, result2
2a1c8     13 3F 02 F6 | 	mov	local13, local01
2a1cc     00 28 4E F2 | 	cmps	local02, #0 wz
2a1d0     1F 41 02 F6 | 	mov	local14, local13
2a1d4     19 40 66 F0 | 	shl	local14, #25
2a1d8     01 3C 06 56 |  if_ne	mov	local12, #1
2a1dc     1E 41 42 F5 | 	or	local14, local12
2a1e0     07 3E 46 F0 | 	shr	local13, #7
2a1e4     00 80 00 FF 
2a1e8     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
2a1ec     1C 00 90 CD |  if_b	jmp	#LR__3692
2a1f0     01 3A 06 F1 | 	add	local11, #1
2a1f4     01 40 46 F0 | 	shr	local14, #1
2a1f8     1F 3D 02 F6 | 	mov	local12, local13
2a1fc     1F 3C 66 F0 | 	shl	local12, #31
2a200     1E 41 42 F5 | 	or	local14, local12
2a204     01 3E 46 F0 | 	shr	local13, #1
2a208     24 00 90 FD | 	jmp	#LR__3694
2a20c                 | LR__3692
2a20c     00 40 00 FF 
2a210     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
2a214     18 00 90 3D |  if_ae	jmp	#LR__3693
2a218     01 3A 86 F1 | 	sub	local11, #1
2a21c     01 3E 66 F0 | 	shl	local13, #1
2a220     20 3D 02 F6 | 	mov	local12, local14
2a224     1F 3C 46 F0 | 	shr	local12, #31
2a228     1E 3F 42 F5 | 	or	local13, local12
2a22c     01 40 66 F0 | 	shl	local14, #1
2a230                 | LR__3693
2a230                 | LR__3694
2a230     1F 13 02 F6 | 	mov	arg01, local13
2a234     20 15 02 F6 | 	mov	arg02, local14
2a238     1D 17 02 F6 | 	mov	arg03, local11
2a23c     17 19 02 F6 | 	mov	arg04, local05
2a240     18 30 B0 FD | 	call	#__system__pack_0689
2a244     F8 00 90 FD | 	jmp	#LR__3705
2a248                 | LR__3695
2a248     00 30 0E F2 | 	cmp	local06, #0 wz
2a24c     15 FB 01 56 |  if_ne	mov	result1, local03
2a250     EC 00 90 5D |  if_ne	jmp	#LR__3705
2a254     FF 38 0E F2 | 	cmp	local10, #255 wz
2a258     00 F8 3F AF 
2a25c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2a260     DC 00 90 AD |  if_e	jmp	#LR__3705
2a264     02 2E 46 F5 | 	or	local05, #2
2a268     00 12 06 F6 | 	mov	arg01, #0
2a26c     00 14 06 F6 | 	mov	arg02, #0
2a270     19 17 02 F6 | 	mov	arg03, local07
2a274     17 19 02 F6 | 	mov	arg04, local05
2a278     E0 2F B0 FD | 	call	#__system__pack_0689
2a27c     C0 00 90 FD | 	jmp	#LR__3705
2a280                 | LR__3696
2a280     00 36 0E F2 | 	cmp	local09, #0 wz
2a284     16 FB 01 56 |  if_ne	mov	result1, local04
2a288     B4 00 90 5D |  if_ne	jmp	#LR__3705
2a28c     17 19 02 F6 | 	mov	arg04, local05
2a290     08 18 46 F5 | 	or	arg04, #8
2a294     00 12 06 F6 | 	mov	arg01, #0
2a298     00 14 06 F6 | 	mov	arg02, #0
2a29c     00 16 06 F6 | 	mov	arg03, #0
2a2a0     B8 2F B0 FD | 	call	#__system__pack_0689
2a2a4     98 00 90 FD | 	jmp	#LR__3705
2a2a8                 | LR__3697
2a2a8     00 30 0E F2 | 	cmp	local06, #0 wz
2a2ac     20 00 90 AD |  if_e	jmp	#LR__3700
2a2b0     01 30 66 F0 | 	shl	local06, #1
2a2b4     97 0A 48 FB | 	callpa	#(@LR__3699-@LR__3698)>>2,fcache_load_ptr_
2a2b8                 | LR__3698
2a2b8     00 40 00 FF 
2a2bc     00 30 16 F2 | 	cmp	local06, ##8388608 wc
2a2c0     01 32 86 C1 |  if_b	sub	local07, #1
2a2c4     01 30 66 C0 |  if_b	shl	local06, #1
2a2c8     EC FF 9F CD |  if_b	jmp	#LR__3698
2a2cc                 | LR__3699
2a2cc     B8 FE 9F FD | 	jmp	#LR__3690
2a2d0                 | LR__3700
2a2d0     00 38 0E F2 | 	cmp	local10, #0 wz
2a2d4     00 36 0E A2 |  if_e	cmp	local09, #0 wz
2a2d8     00 F8 3F AF 
2a2dc     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
2a2e0     5C 00 90 AD |  if_e	jmp	#LR__3705
2a2e4     17 19 02 F6 | 	mov	arg04, local05
2a2e8     08 18 46 F5 | 	or	arg04, #8
2a2ec     00 12 06 F6 | 	mov	arg01, #0
2a2f0     00 14 06 F6 | 	mov	arg02, #0
2a2f4     00 16 06 F6 | 	mov	arg03, #0
2a2f8     60 2F B0 FD | 	call	#__system__pack_0689
2a2fc     40 00 90 FD | 	jmp	#LR__3705
2a300                 | LR__3701
2a300     00 36 0E F2 | 	cmp	local09, #0 wz
2a304     20 00 90 AD |  if_e	jmp	#LR__3704
2a308     01 36 66 F0 | 	shl	local09, #1
2a30c     97 0A 48 FB | 	callpa	#(@LR__3703-@LR__3702)>>2,fcache_load_ptr_
2a310                 | LR__3702
2a310     00 40 00 FF 
2a314     00 36 16 F2 | 	cmp	local09, ##8388608 wc
2a318     01 38 86 C1 |  if_b	sub	local10, #1
2a31c     01 36 66 C0 |  if_b	shl	local09, #1
2a320     EC FF 9F CD |  if_b	jmp	#LR__3702
2a324                 | LR__3703
2a324     6C FE 9F FD | 	jmp	#LR__3691
2a328                 | LR__3704
2a328     02 2E 46 F5 | 	or	local05, #2
2a32c     00 12 06 F6 | 	mov	arg01, #0
2a330     00 14 06 F6 | 	mov	arg02, #0
2a334     00 16 06 F6 | 	mov	arg03, #0
2a338     17 19 02 F6 | 	mov	arg04, local05
2a33c     1C 2F B0 FD | 	call	#__system__pack_0689
2a340                 | LR__3705
2a340     A7 F0 03 F6 | 	mov	ptra, fp
2a344     B2 00 A0 FD | 	call	#popregs_
2a348                 | __system___float_div_ret
2a348     2D 00 64 FD | 	ret
2a34c                 | 
2a34c                 | __system___float_cmp
2a34c     00 C0 3F FF 
2a350     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
2a354     00 C0 3F CF 
2a358     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
2a35c     0B FB 01 36 |  if_ae	mov	result1, arg03
2a360     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2a364     00 C0 7F FF 
2a368     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
2a36c     00 C0 7F CF 
2a370     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
2a374     0B FB 01 36 |  if_ae	mov	result1, arg03
2a378     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
2a37c     00 12 56 F2 | 	cmps	arg01, #0 wc
2a380     2C 00 90 3D |  if_ae	jmp	#LR__3710
2a384     00 14 56 F2 | 	cmps	arg02, #0 wc
2a388     0A FB 01 C6 |  if_b	mov	result1, arg02
2a38c     09 FB 81 C1 |  if_b	sub	result1, arg01
2a390     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
2a394     00 14 0E F2 | 	cmp	arg02, #0 wz
2a398     00 00 40 AF 
2a39c     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
2a3a0     00 FA 05 A6 |  if_e	mov	result1, #0
2a3a4     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2a3a8     01 FA 65 F6 | 	neg	result1, #1
2a3ac     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
2a3b0                 | LR__3710
2a3b0     00 14 56 F2 | 	cmps	arg02, #0 wc
2a3b4     1C 00 90 3D |  if_ae	jmp	#LR__3711
2a3b8     00 12 0E F2 | 	cmp	arg01, #0 wz
2a3bc     00 00 40 AF 
2a3c0     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
2a3c4     00 FA 05 A6 |  if_e	mov	result1, #0
2a3c8     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2a3cc     01 FA 05 F6 | 	mov	result1, #1
2a3d0     08 00 90 FD | 	jmp	#__system___float_cmp_ret
2a3d4                 | LR__3711
2a3d4     0A 13 82 F1 | 	sub	arg01, arg02
2a3d8     09 FB 01 F6 | 	mov	result1, arg01
2a3dc                 | __system___float_cmp_ret
2a3dc     2D 00 64 FD | 	ret
2a3e0                 | 
2a3e0                 | __system___float_tointeger
2a3e0     02 4A 05 F6 | 	mov	COUNT_, #2
2a3e4     A8 00 A0 FD | 	call	#pushregs_
2a3e8     50 00 B0 FD | 	call	#__system___float_Unpack
2a3ec     FF FF 7F FF 
2a3f0     FF FD 55 F2 | 	cmps	result2, ##-1 wc
2a3f4     34 00 90 CD |  if_b	jmp	#LR__3720
2a3f8     1F FC 55 F2 | 	cmps	result2, #31 wc
2a3fc     2C 00 90 3D |  if_ae	jmp	#LR__3720
2a400     02 FE 65 F0 | 	shl	result3, #2
2a404     1E 26 06 F6 | 	mov	local01, #30
2a408     FE 26 82 F1 | 	sub	local01, result2
2a40c     13 FF 41 F0 | 	shr	result3, local01
2a410     FF 28 02 F6 | 	mov	local02, result3
2a414     0A 29 02 F1 | 	add	local02, arg02
2a418     01 28 46 F0 | 	shr	local02, #1
2a41c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a420     14 29 62 56 |  if_ne	neg	local02, local02
2a424     14 FB 01 F6 | 	mov	result1, local02
2a428     04 00 90 FD | 	jmp	#LR__3721
2a42c                 | LR__3720
2a42c     00 FA 05 F6 | 	mov	result1, #0
2a430                 | LR__3721
2a430     A7 F0 03 F6 | 	mov	ptra, fp
2a434     B2 00 A0 FD | 	call	#popregs_
2a438                 | __system___float_tointeger_ret
2a438     2D 00 64 FD | 	ret
2a43c                 | 
2a43c                 | __system___float_Unpack
2a43c     09 01 02 F6 | 	mov	_var01, arg01
2a440     1F 00 46 F0 | 	shr	_var01, #31
2a444     09 03 02 F6 | 	mov	_var02, arg01
2a448     01 02 66 F0 | 	shl	_var02, #1
2a44c     18 02 4E F0 | 	shr	_var02, #24 wz
2a450     17 13 06 F4 | 	bitl	arg01, #279
2a454     06 12 66 50 |  if_ne	shl	arg01, #6
2a458     1D 12 26 54 |  if_ne	bith	arg01, #29
2a45c     1C 00 90 5D |  if_ne	jmp	#LR__3730
2a460     09 05 92 F7 | 	encod	_var03, arg01 wc
2a464     01 04 06 C1 |  if_b	add	_var03, #1
2a468     17 04 86 F1 | 	sub	_var03, #23
2a46c     02 03 02 F6 | 	mov	_var02, _var03
2a470     07 FC 05 F6 | 	mov	result2, #7
2a474     02 FD 81 F1 | 	sub	result2, _var03
2a478     FE 12 62 F0 | 	shl	arg01, result2
2a47c                 | LR__3730
2a47c     7F 02 86 F1 | 	sub	_var02, #127
2a480     09 FF 01 F6 | 	mov	result3, arg01
2a484     00 FB 01 F6 | 	mov	result1, _var01
2a488     01 FD 01 F6 | 	mov	result2, _var02
2a48c                 | __system___float_Unpack_ret
2a48c     2D 00 64 FD | 	ret
2a490                 | 
2a490                 | __system___float_Pack
2a490     00 00 06 F6 | 	mov	_var01, #0
2a494     00 16 0E F2 | 	cmp	arg03, #0 wz
2a498     8C 00 90 AD |  if_e	jmp	#LR__3741
2a49c     0B 03 92 F7 | 	encod	_var02, arg03 wc
2a4a0     01 02 06 C1 |  if_b	add	_var02, #1
2a4a4     21 00 06 F6 | 	mov	_var01, #33
2a4a8     01 01 82 F1 | 	sub	_var01, _var02
2a4ac     00 17 62 F0 | 	shl	arg03, _var01
2a4b0     03 02 06 F6 | 	mov	_var02, #3
2a4b4     00 03 82 F1 | 	sub	_var02, _var01
2a4b8     01 15 02 F1 | 	add	arg02, _var02
2a4bc     0A 05 02 F6 | 	mov	_var03, arg02
2a4c0     00 17 06 F1 | 	add	arg03, #256
2a4c4     0B 03 02 F6 | 	mov	_var02, arg03
2a4c8     FF 02 2E F5 | 	andn	_var02, #255 wz
2a4cc     01 04 06 A1 |  if_e	add	_var03, #1
2a4d0     7F 04 06 F1 | 	add	_var03, #127
2a4d4     FF FF 7F FF 
2a4d8     E9 05 46 F3 | 	fges	_var03, ##-23
2a4dc     FF 04 66 F3 | 	fles	_var03, #255
2a4e0     01 04 56 F2 | 	cmps	_var03, #1 wc
2a4e4     1C 00 90 3D |  if_ae	jmp	#LR__3740
2a4e8     01 16 46 F0 | 	shr	arg03, #1
2a4ec     1F 02 C6 F9 | 	decod	_var02, #31
2a4f0     0B 03 02 F1 | 	add	_var02, arg03
2a4f4     02 05 62 F6 | 	neg	_var03, _var03
2a4f8     02 03 42 F0 | 	shr	_var02, _var03
2a4fc     01 17 02 F6 | 	mov	arg03, _var02
2a500     00 04 06 F6 | 	mov	_var03, #0
2a504                 | LR__3740
2a504     09 FB 01 F6 | 	mov	result1, arg01
2a508     1F FA 65 F0 | 	shl	result1, #31
2a50c     02 03 02 F6 | 	mov	_var02, _var03
2a510     17 02 66 F0 | 	shl	_var02, #23
2a514     01 FB 41 F5 | 	or	result1, _var02
2a518     0B 07 02 F6 | 	mov	_var04, arg03
2a51c     09 06 46 F0 | 	shr	_var04, #9
2a520     03 FB 41 F5 | 	or	result1, _var04
2a524     04 00 90 FD | 	jmp	#__system___float_Pack_ret
2a528                 | LR__3741
2a528     00 FB 01 F6 | 	mov	result1, _var01
2a52c                 | __system___float_Pack_ret
2a52c     2D 00 64 FD | 	ret
2a530                 | 
2a530                 | __system___basic_print_float
2a530     05 4A 05 F6 | 	mov	COUNT_, #5
2a534     A8 00 A0 FD | 	call	#pushregs_
2a538     09 27 02 F6 | 	mov	local01, arg01
2a53c     0A 29 02 F6 | 	mov	local02, arg02
2a540     0B 2B 0A F6 | 	mov	local03, arg03 wz
2a544     0C 2D 02 F6 | 	mov	local04, arg04
2a548     14 00 90 5D |  if_ne	jmp	#LR__3750
2a54c     23 2C 0E F2 | 	cmp	local04, #35 wz
2a550     80 02 10 AF 
2a554     00 2E 06 A6 |  if_e	mov	local05, ##537198592
2a558     1D 2E C6 59 |  if_ne	decod	local05, #29
2a55c     17 2B 02 F6 | 	mov	local03, local05
2a560                 | LR__3750
2a560     13 13 02 F6 | 	mov	arg01, local01
2a564     28 28 B0 FD | 	call	#__system___gettxfunc
2a568     FD 2E 0A F6 | 	mov	local05, result1 wz
2a56c     00 FA 05 A6 |  if_e	mov	result1, #0
2a570     17 13 02 56 |  if_ne	mov	arg01, local05
2a574     15 15 02 56 |  if_ne	mov	arg02, local03
2a578     14 17 02 56 |  if_ne	mov	arg03, local02
2a57c     16 19 02 56 |  if_ne	mov	arg04, local04
2a580     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
2a584     A7 F0 03 F6 | 	mov	ptra, fp
2a588     B2 00 A0 FD | 	call	#popregs_
2a58c                 | __system___basic_print_float_ret
2a58c     2D 00 64 FD | 	ret
2a590                 | 
2a590                 | __system____builtin_atoi
2a590     07 4A 05 F6 | 	mov	COUNT_, #7
2a594     A8 00 A0 FD | 	call	#pushregs_
2a598                 | __system____builtin_atoi_enter
2a598     09 27 02 F6 | 	mov	local01, arg01
2a59c     0A 29 02 F6 | 	mov	local02, arg02
2a5a0     00 2A 06 F6 | 	mov	local03, #0
2a5a4     00 2C 06 F6 | 	mov	local04, #0
2a5a8     00 2E 06 F6 | 	mov	local05, #0
2a5ac     97 1C 48 FB | 	callpa	#(@LR__3762-@LR__3760)>>2,fcache_load_ptr_
2a5b0                 | LR__3760
2a5b0     13 31 C2 FA | 	rdbyte	local06, local01
2a5b4     20 30 0E F2 | 	cmp	local06, #32 wz
2a5b8     01 26 06 A1 |  if_e	add	local01, #1
2a5bc     F0 FF 9F AD |  if_e	jmp	#LR__3760
2a5c0     13 33 C2 FA | 	rdbyte	local07, local01
2a5c4                 | LR__3761
2a5c4     2D 32 0E F2 | 	cmp	local07, #45 wz
2a5c8     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
2a5cc     18 00 90 5D |  if_ne	jmp	#LR__3763
2a5d0     01 26 06 F1 | 	add	local01, #1
2a5d4     2D 32 0E F2 | 	cmp	local07, #45 wz
2a5d8     01 30 06 A6 |  if_e	mov	local06, #1
2a5dc     18 2F C2 A2 |  if_e	subr	local05, local06
2a5e0     13 33 C2 FA | 	rdbyte	local07, local01
2a5e4     DC FF 9F FD | 	jmp	#LR__3761
2a5e8                 | LR__3762
2a5e8                 | LR__3763
2a5e8     00 28 0E F2 | 	cmp	local02, #0 wz
2a5ec     1C 00 90 5D |  if_ne	jmp	#LR__3765
2a5f0     24 32 0E F2 | 	cmp	local07, #36 wz
2a5f4     10 28 06 A6 |  if_e	mov	local02, #16
2a5f8     01 26 06 A1 |  if_e	add	local01, #1
2a5fc     0C 00 90 AD |  if_e	jmp	#LR__3764
2a600     25 32 0E F2 | 	cmp	local07, #37 wz
2a604     02 28 06 A6 |  if_e	mov	local02, #2
2a608     01 26 06 A1 |  if_e	add	local01, #1
2a60c                 | LR__3764
2a60c                 | LR__3765
2a60c     97 48 48 FB | 	callpa	#(@LR__3773-@LR__3766)>>2,fcache_load_ptr_
2a610                 | LR__3766
2a610                 | LR__3767
2a610     13 33 C2 FA | 	rdbyte	local07, local01
2a614     5F 32 0E F2 | 	cmp	local07, #95 wz
2a618     01 26 06 F1 | 	add	local01, #1
2a61c     F0 FF 9F AD |  if_e	jmp	#LR__3767
2a620     30 32 0E F2 | 	cmp	local07, #48 wz
2a624     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
2a628     00 2C 06 A6 |  if_e	mov	local04, #0
2a62c     60 00 90 AD |  if_e	jmp	#LR__3772
2a630     31 32 56 F2 | 	cmps	local07, #49 wc
2a634     18 00 90 CD |  if_b	jmp	#LR__3768
2a638     3A 32 56 F2 | 	cmps	local07, #58 wc
2a63c     19 2D 02 C6 |  if_b	mov	local04, local07
2a640     30 2C 86 C1 |  if_b	sub	local04, #48
2a644     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2a648     0A 28 06 86 |  if_c_and_z	mov	local02, #10
2a64c     40 00 90 CD |  if_b	jmp	#LR__3771
2a650                 | LR__3768
2a650     0B 28 56 F2 | 	cmps	local02, #11 wc
2a654     61 32 56 32 |  if_ae	cmps	local07, #97 wc
2a658     14 00 90 CD |  if_b	jmp	#LR__3769
2a65c     67 32 56 F2 | 	cmps	local07, #103 wc
2a660     61 32 86 C1 |  if_b	sub	local07, #97
2a664     0A 2C 06 C6 |  if_b	mov	local04, #10
2a668     19 2D 02 C1 |  if_b	add	local04, local07
2a66c     20 00 90 CD |  if_b	jmp	#LR__3770
2a670                 | LR__3769
2a670     0B 28 56 F2 | 	cmps	local02, #11 wc
2a674     41 32 56 32 |  if_ae	cmps	local07, #65 wc
2a678     24 00 90 CD |  if_b	jmp	#LR__3774
2a67c     47 32 56 F2 | 	cmps	local07, #71 wc
2a680     41 32 86 C1 |  if_b	sub	local07, #65
2a684     0A 2C 06 C6 |  if_b	mov	local04, #10
2a688     19 2D 02 C1 |  if_b	add	local04, local07
2a68c     10 00 90 3D |  if_ae	jmp	#LR__3774
2a690                 | LR__3770
2a690                 | LR__3771
2a690                 | LR__3772
2a690     15 29 02 FD | 	qmul	local02, local03
2a694     18 2A 62 FD | 	getqx	local03
2a698     16 2B 02 F1 | 	add	local03, local04
2a69c     70 FF 9F FD | 	jmp	#LR__3766
2a6a0                 | LR__3773
2a6a0                 | LR__3774
2a6a0     00 28 0E F2 | 	cmp	local02, #0 wz
2a6a4     64 00 90 5D |  if_ne	jmp	#LR__3780
2a6a8     78 32 0E F2 | 	cmp	local07, #120 wz
2a6ac     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
2a6b0     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
2a6b4     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
2a6b8     14 00 90 5D |  if_ne	jmp	#LR__3775
2a6bc     13 13 02 F6 | 	mov	arg01, local01
2a6c0     10 14 06 F6 | 	mov	arg02, #16
2a6c4     C8 FE BF FD | 	call	#__system____builtin_atoi
2a6c8     FD 2A 02 F6 | 	mov	local03, result1
2a6cc     3C 00 90 FD | 	jmp	#LR__3779
2a6d0                 | LR__3775
2a6d0     62 32 0E F2 | 	cmp	local07, #98 wz
2a6d4     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
2a6d8     14 00 90 5D |  if_ne	jmp	#LR__3776
2a6dc     13 13 02 F6 | 	mov	arg01, local01
2a6e0     02 14 06 F6 | 	mov	arg02, #2
2a6e4     A8 FE BF FD | 	call	#__system____builtin_atoi
2a6e8     FD 2A 02 F6 | 	mov	local03, result1
2a6ec     1C 00 90 FD | 	jmp	#LR__3778
2a6f0                 | LR__3776
2a6f0     6F 32 0E F2 | 	cmp	local07, #111 wz
2a6f4     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
2a6f8     10 00 90 5D |  if_ne	jmp	#LR__3777
2a6fc     13 13 02 F6 | 	mov	arg01, local01
2a700     08 14 06 F6 | 	mov	arg02, #8
2a704     88 FE BF FD | 	call	#__system____builtin_atoi
2a708     FD 2A 02 F6 | 	mov	local03, result1
2a70c                 | LR__3777
2a70c                 | LR__3778
2a70c                 | LR__3779
2a70c                 | LR__3780
2a70c     00 2E 0E F2 | 	cmp	local05, #0 wz
2a710     15 2B 62 56 |  if_ne	neg	local03, local03
2a714     15 FB 01 F6 | 	mov	result1, local03
2a718     A7 F0 03 F6 | 	mov	ptra, fp
2a71c     B2 00 A0 FD | 	call	#popregs_
2a720                 | __system____builtin_atoi_ret
2a720     2D 00 64 FD | 	ret
2a724                 | 
2a724                 | __system____builtin_atof
2a724     07 4A 05 F6 | 	mov	COUNT_, #7
2a728     A8 00 A0 FD | 	call	#pushregs_
2a72c     09 27 02 F6 | 	mov	local01, arg01
2a730     00 28 06 F6 | 	mov	local02, #0
2a734     00 2A 06 F6 | 	mov	local03, #0
2a738     00 2C 06 F6 | 	mov	local04, #0
2a73c     00 2E 06 F6 | 	mov	local05, #0
2a740     97 08 48 FB | 	callpa	#(@LR__3791-@LR__3790)>>2,fcache_load_ptr_
2a744                 | LR__3790
2a744     13 17 C2 FA | 	rdbyte	arg03, local01
2a748     20 16 0E F2 | 	cmp	arg03, #32 wz
2a74c     01 26 06 A1 |  if_e	add	local01, #1
2a750     F0 FF 9F AD |  if_e	jmp	#LR__3790
2a754                 | LR__3791
2a754     13 31 C2 FA | 	rdbyte	local06, local01
2a758                 | LR__3792
2a758     2B 30 0E F2 | 	cmp	local06, #43 wz
2a75c     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
2a760     14 00 90 5D |  if_ne	jmp	#LR__3793
2a764     2D 30 0E F2 | 	cmp	local06, #45 wz
2a768     1F 2C E6 A4 |  if_e	bitnot	local04, #31
2a76c     01 26 06 F1 | 	add	local01, #1
2a770     13 31 C2 FA | 	rdbyte	local06, local01
2a774     E0 FF 9F FD | 	jmp	#LR__3792
2a778                 | LR__3793
2a778                 | LR__3794
2a778     97 08 48 FB | 	callpa	#(@LR__3796-@LR__3795)>>2,fcache_load_ptr_
2a77c                 | LR__3795
2a77c     13 31 C2 FA | 	rdbyte	local06, local01
2a780     5F 30 0E F2 | 	cmp	local06, #95 wz
2a784     01 26 06 F1 | 	add	local01, #1
2a788     F0 FF 9F AD |  if_e	jmp	#LR__3795
2a78c                 | LR__3796
2a78c     00 30 0E F2 | 	cmp	local06, #0 wz
2a790     5C 00 90 AD |  if_e	jmp	#LR__3798
2a794     30 30 56 F2 | 	cmps	local06, #48 wc
2a798     44 00 90 CD |  if_b	jmp	#LR__3797
2a79c     3A 30 56 F2 | 	cmps	local06, #58 wc
2a7a0     3C 00 90 3D |  if_ae	jmp	#LR__3797
2a7a4     14 13 02 F6 | 	mov	arg01, local02
2a7a8     00 90 20 FF 
2a7ac     00 14 06 F6 | 	mov	arg02, ##1092616192
2a7b0     64 F7 BF FD | 	call	#__system___float_mul
2a7b4     FD 28 02 F6 | 	mov	local02, result1
2a7b8     30 30 86 F1 | 	sub	local06, #48
2a7bc     18 13 02 F6 | 	mov	arg01, local06
2a7c0     50 F3 BF FD | 	call	#__system___float_fromuns
2a7c4     FD 14 02 F6 | 	mov	arg02, result1
2a7c8     14 13 02 F6 | 	mov	arg01, local02
2a7cc     78 F3 BF FD | 	call	#__system___float_add
2a7d0     FD 28 02 F6 | 	mov	local02, result1
2a7d4     00 2E 0E F2 | 	cmp	local05, #0 wz
2a7d8     01 2A 86 51 |  if_ne	sub	local03, #1
2a7dc     98 FF 9F FD | 	jmp	#LR__3794
2a7e0                 | LR__3797
2a7e0     2E 30 0E F2 | 	cmp	local06, #46 wz
2a7e4     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
2a7e8     01 2E 06 A6 |  if_e	mov	local05, #1
2a7ec     88 FF 9F AD |  if_e	jmp	#LR__3794
2a7f0                 | LR__3798
2a7f0     45 30 0E F2 | 	cmp	local06, #69 wz
2a7f4     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
2a7f8     18 00 90 5D |  if_ne	jmp	#LR__3799
2a7fc     13 13 02 F6 | 	mov	arg01, local01
2a800     00 14 06 F6 | 	mov	arg02, #0
2a804     88 FD BF FD | 	call	#__system____builtin_atoi
2a808     15 FB 01 F1 | 	add	result1, local03
2a80c     FD 32 02 F6 | 	mov	local07, result1
2a810     04 00 90 FD | 	jmp	#LR__3800
2a814                 | LR__3799
2a814     15 33 02 F6 | 	mov	local07, local03
2a818                 | LR__3800
2a818     19 17 02 F6 | 	mov	arg03, local07
2a81c     14 13 02 F6 | 	mov	arg01, local02
2a820     00 90 20 FF 
2a824     00 14 06 F6 | 	mov	arg02, ##1092616192
2a828     F4 06 B0 FD | 	call	#__system___float_pow_n
2a82c     16 FB 61 F5 | 	xor	result1, local04
2a830     A7 F0 03 F6 | 	mov	ptra, fp
2a834     B2 00 A0 FD | 	call	#popregs_
2a838                 | __system____builtin_atof_ret
2a838     2D 00 64 FD | 	ret
2a83c                 | 
2a83c                 | __system____builtin_ilogb
2a83c     FC FB BF FD | 	call	#__system___float_Unpack
2a840     00 FE 0D F2 | 	cmp	result3, #0 wz
2a844     00 00 40 AF 
2a848     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
2a84c     24 00 90 AD |  if_e	jmp	#LR__3811
2a850     80 FC 0D F2 | 	cmp	result2, #128 wz
2a854     18 00 90 5D |  if_ne	jmp	#LR__3810
2a858     00 00 10 FF 
2a85c     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
2a860     1E FA CD A9 |  if_e	bmask	result1, #30
2a864     0C 00 90 AD |  if_e	jmp	#LR__3811
2a868     1F FA C5 F9 | 	decod	result1, #31
2a86c     04 00 90 FD | 	jmp	#LR__3811
2a870                 | LR__3810
2a870     FE FA 01 F6 | 	mov	result1, result2
2a874                 | LR__3811
2a874                 | __system____builtin_ilogb_ret
2a874     2D 00 64 FD | 	ret
2a878                 | 
2a878                 | __system____builtin_sinf
2a878     03 4A 05 F6 | 	mov	COUNT_, #3
2a87c     A8 00 A0 FD | 	call	#pushregs_
2a880     09 27 02 F6 | 	mov	local01, arg01
2a884     87 64 20 FF 
2a888     DB 15 06 F6 | 	mov	arg02, ##1086918619
2a88c     8C F8 BF FD | 	call	#__system___float_div
2a890     FD 12 02 F6 | 	mov	arg01, result1
2a894     00 14 06 F6 | 	mov	arg02, #0
2a898     44 FB BF FD | 	call	#__system___float_tointeger
2a89c     FD 16 0A F6 | 	mov	arg03, result1 wz
2a8a0     44 00 90 AD |  if_e	jmp	#LR__3820
2a8a4     0B 13 52 F6 | 	abs	arg01, arg03 wc
2a8a8     1F 28 C6 C9 |  if_b	decod	local02, #31
2a8ac     00 28 06 36 |  if_ae	mov	local02, #0
2a8b0     60 F2 BF FD | 	call	#__system___float_fromuns
2a8b4     14 FB 61 F5 | 	xor	result1, local02
2a8b8     FD 12 02 F6 | 	mov	arg01, result1
2a8bc     1E 14 C6 F9 | 	decod	arg02, #30
2a8c0     54 F6 BF FD | 	call	#__system___float_mul
2a8c4     FD 12 02 F6 | 	mov	arg01, result1
2a8c8     87 24 20 FF 
2a8cc     DB 15 06 F6 | 	mov	arg02, ##1078530011
2a8d0     44 F6 BF FD | 	call	#__system___float_mul
2a8d4     FD 14 02 F6 | 	mov	arg02, result1
2a8d8     13 13 02 F6 | 	mov	arg01, local01
2a8dc     1F 14 E6 F4 | 	bitnot	arg02, #31
2a8e0     64 F2 BF FD | 	call	#__system___float_add
2a8e4     FD 26 02 F6 | 	mov	local01, result1
2a8e8                 | LR__3820
2a8e8     13 13 02 F6 | 	mov	arg01, local01
2a8ec     66 E6 1E FF 
2a8f0     CD 14 06 F6 | 	mov	arg02, ##1036831949
2a8f4     01 16 06 F6 | 	mov	arg03, #1
2a8f8     50 FA BF FD | 	call	#__system___float_cmp
2a8fc     00 FA 55 F2 | 	cmps	result1, #0 wc
2a900     5C 00 90 3D |  if_ae	jmp	#LR__3821
2a904     13 13 02 F6 | 	mov	arg01, local01
2a908     66 E6 5E FF 
2a90c     CD 14 06 F6 | 	mov	arg02, ##-1110651699
2a910     01 16 66 F6 | 	neg	arg03, #1
2a914     34 FA BF FD | 	call	#__system___float_cmp
2a918     01 FA 55 F2 | 	cmps	result1, #1 wc
2a91c     40 00 90 CD |  if_b	jmp	#LR__3821
2a920     13 13 02 F6 | 	mov	arg01, local01
2a924     13 15 02 F6 | 	mov	arg02, local01
2a928     EC F5 BF FD | 	call	#__system___float_mul
2a92c     FD 12 02 F6 | 	mov	arg01, result1
2a930     13 15 02 F6 | 	mov	arg02, local01
2a934     E0 F5 BF FD | 	call	#__system___float_mul
2a938     FD 12 02 F6 | 	mov	arg01, result1
2a93c     00 60 20 FF 
2a940     00 14 06 F6 | 	mov	arg02, ##1086324736
2a944     D4 F7 BF FD | 	call	#__system___float_div
2a948     FD 14 02 F6 | 	mov	arg02, result1
2a94c     13 13 02 F6 | 	mov	arg01, local01
2a950     1F 14 E6 F4 | 	bitnot	arg02, #31
2a954     F0 F1 BF FD | 	call	#__system___float_add
2a958     FD 2A 02 F6 | 	mov	local03, result1
2a95c     54 00 90 FD | 	jmp	#LR__3822
2a960                 | LR__3821
2a960     13 13 02 F6 | 	mov	arg01, local01
2a964     7C 91 26 FF 
2a968     83 15 06 F6 | 	mov	arg02, ##1294137731
2a96c     A8 F5 BF FD | 	call	#__system___float_mul
2a970     FD 12 02 F6 | 	mov	arg01, result1
2a974     00 14 06 F6 | 	mov	arg02, #0
2a978     64 FA BF FD | 	call	#__system___float_tointeger
2a97c     02 FA 65 F0 | 	shl	result1, #2
2a980     00 00 A0 FF 
2a984     FD 00 48 FD | 	qrotate	##1073741824, result1
2a988     19 12 62 FD | 	getqy	arg01
2a98c     09 13 52 F6 | 	abs	arg01, arg01 wc
2a990     1F 28 C6 C9 |  if_b	decod	local02, #31
2a994     00 28 06 36 |  if_ae	mov	local02, #0
2a998     78 F1 BF FD | 	call	#__system___float_fromuns
2a99c     14 FB 61 F5 | 	xor	result1, local02
2a9a0     FD 12 02 F6 | 	mov	arg01, result1
2a9a4     00 40 27 FF 
2a9a8     00 14 06 F6 | 	mov	arg02, ##1317011456
2a9ac     6C F7 BF FD | 	call	#__system___float_div
2a9b0     FD 2A 02 F6 | 	mov	local03, result1
2a9b4                 | LR__3822
2a9b4     15 FB 01 F6 | 	mov	result1, local03
2a9b8     A7 F0 03 F6 | 	mov	ptra, fp
2a9bc     B2 00 A0 FD | 	call	#popregs_
2a9c0                 | __system____builtin_sinf_ret
2a9c0     2D 00 64 FD | 	ret
2a9c4                 | 
2a9c4                 | __system____builtin_tanf
2a9c4     02 4A 05 F6 | 	mov	COUNT_, #2
2a9c8     A8 00 A0 FD | 	call	#pushregs_
2a9cc     09 27 02 F6 | 	mov	local01, arg01
2a9d0     A4 FE BF FD | 	call	#__system____builtin_sinf
2a9d4     FD 28 02 F6 | 	mov	local02, result1
2a9d8     13 15 02 F6 | 	mov	arg02, local01
2a9dc     87 E4 1F FF 
2a9e0     DB 13 06 F6 | 	mov	arg01, ##1070141403
2a9e4     1F 14 E6 F4 | 	bitnot	arg02, #31
2a9e8     5C F1 BF FD | 	call	#__system___float_add
2a9ec     FD 12 02 F6 | 	mov	arg01, result1
2a9f0     84 FE BF FD | 	call	#__system____builtin_sinf
2a9f4     FD 14 02 F6 | 	mov	arg02, result1
2a9f8     14 13 02 F6 | 	mov	arg01, local02
2a9fc     1C F7 BF FD | 	call	#__system___float_div
2aa00     A7 F0 03 F6 | 	mov	ptra, fp
2aa04     B2 00 A0 FD | 	call	#popregs_
2aa08                 | __system____builtin_tanf_ret
2aa08     2D 00 64 FD | 	ret
2aa0c                 | 
2aa0c                 | __system____builtin_asinf
2aa0c     01 4A 05 F6 | 	mov	COUNT_, #1
2aa10     A8 00 A0 FD | 	call	#pushregs_
2aa14     09 27 02 F6 | 	mov	local01, arg01
2aa18     13 15 02 F6 | 	mov	arg02, local01
2aa1c     13 13 02 F6 | 	mov	arg01, local01
2aa20     F4 F4 BF FD | 	call	#__system___float_mul
2aa24     FD 14 02 F6 | 	mov	arg02, result1
2aa28     00 C0 1F FF 
2aa2c     00 12 06 F6 | 	mov	arg01, ##1065353216
2aa30     1F 14 E6 F4 | 	bitnot	arg02, #31
2aa34     10 F1 BF FD | 	call	#__system___float_add
2aa38     FD 12 02 F6 | 	mov	arg01, result1
2aa3c     00 F4 BF FD | 	call	#__system___float_sqrt
2aa40     FD 14 02 F6 | 	mov	arg02, result1
2aa44     13 13 02 F6 | 	mov	arg01, local01
2aa48     58 00 B0 FD | 	call	#__system____builtin_atan2f
2aa4c     A7 F0 03 F6 | 	mov	ptra, fp
2aa50     B2 00 A0 FD | 	call	#popregs_
2aa54                 | __system____builtin_asinf_ret
2aa54     2D 00 64 FD | 	ret
2aa58                 | 
2aa58                 | __system____builtin_acosf
2aa58     01 4A 05 F6 | 	mov	COUNT_, #1
2aa5c     A8 00 A0 FD | 	call	#pushregs_
2aa60     09 27 02 F6 | 	mov	local01, arg01
2aa64     13 15 02 F6 | 	mov	arg02, local01
2aa68     13 13 02 F6 | 	mov	arg01, local01
2aa6c     A8 F4 BF FD | 	call	#__system___float_mul
2aa70     FD 14 02 F6 | 	mov	arg02, result1
2aa74     00 C0 1F FF 
2aa78     00 12 06 F6 | 	mov	arg01, ##1065353216
2aa7c     1F 14 E6 F4 | 	bitnot	arg02, #31
2aa80     C4 F0 BF FD | 	call	#__system___float_add
2aa84     FD 12 02 F6 | 	mov	arg01, result1
2aa88     B4 F3 BF FD | 	call	#__system___float_sqrt
2aa8c     FD 12 02 F6 | 	mov	arg01, result1
2aa90     13 15 02 F6 | 	mov	arg02, local01
2aa94     0C 00 B0 FD | 	call	#__system____builtin_atan2f
2aa98     A7 F0 03 F6 | 	mov	ptra, fp
2aa9c     B2 00 A0 FD | 	call	#popregs_
2aaa0                 | __system____builtin_acosf_ret
2aaa0     2D 00 64 FD | 	ret
2aaa4                 | 
2aaa4                 | __system____builtin_atan2f
2aaa4     04 4A 05 F6 | 	mov	COUNT_, #4
2aaa8     A8 00 A0 FD | 	call	#pushregs_
2aaac     09 27 02 F6 | 	mov	local01, arg01
2aab0     0A 29 02 F6 | 	mov	local02, arg02
2aab4     13 13 02 F6 | 	mov	arg01, local01
2aab8     00 14 06 F6 | 	mov	arg02, #0
2aabc     01 16 06 F6 | 	mov	arg03, #1
2aac0     88 F8 BF FD | 	call	#__system___float_cmp
2aac4     00 FA 0D F2 | 	cmp	result1, #0 wz
2aac8     28 00 90 5D |  if_ne	jmp	#LR__3830
2aacc     14 13 02 F6 | 	mov	arg01, local02
2aad0     00 14 06 F6 | 	mov	arg02, #0
2aad4     01 16 06 F6 | 	mov	arg03, #1
2aad8     70 F8 BF FD | 	call	#__system___float_cmp
2aadc     00 FA 55 F2 | 	cmps	result1, #0 wc
2aae0     87 24 60 CF 
2aae4     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
2aae8     DC 00 90 CD |  if_b	jmp	#LR__3831
2aaec     00 FA 05 F6 | 	mov	result1, #0
2aaf0     D4 00 90 FD | 	jmp	#LR__3831
2aaf4                 | LR__3830
2aaf4     14 13 02 F6 | 	mov	arg01, local02
2aaf8     14 15 02 F6 | 	mov	arg02, local02
2aafc     18 F4 BF FD | 	call	#__system___float_mul
2ab00     FD 2A 02 F6 | 	mov	local03, result1
2ab04     13 13 02 F6 | 	mov	arg01, local01
2ab08     13 15 02 F6 | 	mov	arg02, local01
2ab0c     08 F4 BF FD | 	call	#__system___float_mul
2ab10     FD 14 02 F6 | 	mov	arg02, result1
2ab14     15 13 02 F6 | 	mov	arg01, local03
2ab18     2C F0 BF FD | 	call	#__system___float_add
2ab1c     FD 12 02 F6 | 	mov	arg01, result1
2ab20     1C F3 BF FD | 	call	#__system___float_sqrt
2ab24     FD 2A 02 F6 | 	mov	local03, result1
2ab28     14 13 02 F6 | 	mov	arg01, local02
2ab2c     15 15 02 F6 | 	mov	arg02, local03
2ab30     E8 F5 BF FD | 	call	#__system___float_div
2ab34     FD 28 02 F6 | 	mov	local02, result1
2ab38     13 13 02 F6 | 	mov	arg01, local01
2ab3c     15 15 02 F6 | 	mov	arg02, local03
2ab40     D8 F5 BF FD | 	call	#__system___float_div
2ab44     FD 26 02 F6 | 	mov	local01, result1
2ab48     00 40 27 FF 
2ab4c     00 12 06 F6 | 	mov	arg01, ##1317011456
2ab50     14 15 02 F6 | 	mov	arg02, local02
2ab54     C0 F3 BF FD | 	call	#__system___float_mul
2ab58     FD 12 02 F6 | 	mov	arg01, result1
2ab5c     00 14 06 F6 | 	mov	arg02, #0
2ab60     7C F8 BF FD | 	call	#__system___float_tointeger
2ab64     FD 2A 02 F6 | 	mov	local03, result1
2ab68     00 40 27 FF 
2ab6c     00 12 06 F6 | 	mov	arg01, ##1317011456
2ab70     13 15 02 F6 | 	mov	arg02, local01
2ab74     A0 F3 BF FD | 	call	#__system___float_mul
2ab78     FD 12 02 F6 | 	mov	arg01, result1
2ab7c     00 14 06 F6 | 	mov	arg02, #0
2ab80     5C F8 BF FD | 	call	#__system___float_tointeger
2ab84     FD 2A 52 FD | 	qvector	local03, result1
2ab88     87 24 20 FF 
2ab8c     DB 2B 06 F6 | 	mov	local03, ##1078530011
2ab90     19 12 62 FD | 	getqy	arg01
2ab94     01 12 C6 F0 | 	sar	arg01, #1
2ab98     09 13 52 F6 | 	abs	arg01, arg01 wc
2ab9c     1F 2C C6 C9 |  if_b	decod	local04, #31
2aba0     00 2C 06 36 |  if_ae	mov	local04, #0
2aba4     6C EF BF FD | 	call	#__system___float_fromuns
2aba8     16 FB 61 F5 | 	xor	result1, local04
2abac     FD 12 02 F6 | 	mov	arg01, result1
2abb0     00 40 27 FF 
2abb4     00 14 06 F6 | 	mov	arg02, ##1317011456
2abb8     60 F5 BF FD | 	call	#__system___float_div
2abbc     FD 14 02 F6 | 	mov	arg02, result1
2abc0     15 13 02 F6 | 	mov	arg01, local03
2abc4     50 F3 BF FD | 	call	#__system___float_mul
2abc8                 | LR__3831
2abc8     A7 F0 03 F6 | 	mov	ptra, fp
2abcc     B2 00 A0 FD | 	call	#popregs_
2abd0                 | __system____builtin_atan2f_ret
2abd0     2D 00 64 FD | 	ret
2abd4                 | 
2abd4                 | __system____builtin_exp2f
2abd4     04 4A 05 F6 | 	mov	COUNT_, #4
2abd8     A8 00 A0 FD | 	call	#pushregs_
2abdc     09 27 02 F6 | 	mov	local01, arg01
2abe0     00 7F 21 FF 
2abe4     00 14 06 F6 | 	mov	arg02, ##1123942400
2abe8     01 16 66 F6 | 	neg	arg03, #1
2abec     5C F7 BF FD | 	call	#__system___float_cmp
2abf0     00 FA 55 F2 | 	cmps	result1, #0 wc
2abf4     00 C0 3F 3F 
2abf8     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
2abfc     DC 00 90 3D |  if_ae	jmp	#LR__3841
2ac00     13 13 02 F6 | 	mov	arg01, local01
2ac04     00 7F 61 FF 
2ac08     00 14 06 F6 | 	mov	arg02, ##-1023541248
2ac0c     01 16 06 F6 | 	mov	arg03, #1
2ac10     38 F7 BF FD | 	call	#__system___float_cmp
2ac14     00 FA 55 F2 | 	cmps	result1, #0 wc
2ac18     00 FA 05 C6 |  if_b	mov	result1, #0
2ac1c     BC 00 90 CD |  if_b	jmp	#LR__3841
2ac20     13 13 02 F6 | 	mov	arg01, local01
2ac24     00 14 06 F6 | 	mov	arg02, #0
2ac28     B4 F7 BF FD | 	call	#__system___float_tointeger
2ac2c     FD 28 02 F6 | 	mov	local02, result1
2ac30     14 13 52 F6 | 	abs	arg01, local02 wc
2ac34     1F 2A C6 C9 |  if_b	decod	local03, #31
2ac38     00 2A 06 36 |  if_ae	mov	local03, #0
2ac3c     D4 EE BF FD | 	call	#__system___float_fromuns
2ac40     15 FB 61 F5 | 	xor	result1, local03
2ac44     FD 14 02 F6 | 	mov	arg02, result1
2ac48     13 13 02 F6 | 	mov	arg01, local01
2ac4c     1F 14 E6 F4 | 	bitnot	arg02, #31
2ac50     F4 EE BF FD | 	call	#__system___float_add
2ac54     FD 2C 02 F6 | 	mov	local04, result1
2ac58     16 13 02 F6 | 	mov	arg01, local04
2ac5c     00 14 06 F6 | 	mov	arg02, #0
2ac60     01 16 06 F6 | 	mov	arg03, #1
2ac64     E4 F6 BF FD | 	call	#__system___float_cmp
2ac68     00 FA 55 F2 | 	cmps	result1, #0 wc
2ac6c     18 00 90 3D |  if_ae	jmp	#LR__3840
2ac70     16 13 02 F6 | 	mov	arg01, local04
2ac74     00 C0 1F FF 
2ac78     00 14 06 F6 | 	mov	arg02, ##1065353216
2ac7c     C8 EE BF FD | 	call	#__system___float_add
2ac80     FD 2C 02 F6 | 	mov	local04, result1
2ac84     01 28 86 F1 | 	sub	local02, #1
2ac88                 | LR__3840
2ac88     7F 28 06 F1 | 	add	local02, #127
2ac8c     17 28 66 F0 | 	shl	local02, #23
2ac90     16 13 02 F6 | 	mov	arg01, local04
2ac94     00 80 26 FF 
2ac98     00 14 06 F6 | 	mov	arg02, ##1291845632
2ac9c     78 F2 BF FD | 	call	#__system___float_mul
2aca0     FD 12 02 F6 | 	mov	arg01, result1
2aca4     00 14 06 F6 | 	mov	arg02, #0
2aca8     34 F7 BF FD | 	call	#__system___float_tointeger
2acac     FD 2C 0A F6 | 	mov	local04, result1 wz
2acb0     14 FB 01 A6 |  if_e	mov	result1, local02
2acb4     24 00 90 AD |  if_e	jmp	#LR__3841
2acb8     3E 2C 26 F4 | 	bith	local04, #62
2acbc     0F 2C 62 FD | 	qexp	local04
2acc0     14 13 02 F6 | 	mov	arg01, local02
2acc4     18 14 62 FD | 	getqx	arg02
2acc8     01 14 06 F1 | 	add	arg02, #1
2accc     01 14 46 F0 | 	shr	arg02, #1
2acd0     00 80 1F FF 
2acd4     00 14 06 F1 | 	add	arg02, ##1056964608
2acd8     3C F2 BF FD | 	call	#__system___float_mul
2acdc                 | LR__3841
2acdc     A7 F0 03 F6 | 	mov	ptra, fp
2ace0     B2 00 A0 FD | 	call	#popregs_
2ace4                 | __system____builtin_exp2f_ret
2ace4     2D 00 64 FD | 	ret
2ace8                 | 
2ace8                 | __system____builtin_log2f
2ace8     06 4A 05 F6 | 	mov	COUNT_, #6
2acec     A8 00 A0 FD | 	call	#pushregs_
2acf0     09 27 02 F6 | 	mov	local01, arg01
2acf4     09 29 0A F6 | 	mov	local02, arg01 wz
2acf8     00 00 40 5F 
2acfc     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
2ad00     00 40 00 AF 
2ad04     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2ad08     08 01 90 AD |  if_e	jmp	#LR__3854
2ad0c     00 28 56 F2 | 	cmps	local02, #0 wc
2ad10     00 E0 3F CF 
2ad14     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2ad18     F8 00 90 CD |  if_b	jmp	#LR__3854
2ad1c     13 13 02 F6 | 	mov	arg01, local01
2ad20     00 90 20 FF 
2ad24     00 14 06 F6 | 	mov	arg02, ##1092616192
2ad28     01 16 06 F6 | 	mov	arg03, #1
2ad2c     1C F6 BF FD | 	call	#__system___float_cmp
2ad30     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad34     4D 2A 20 AF 
2ad38     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
2ad3c     D4 00 90 AD |  if_e	jmp	#LR__3854
2ad40     13 13 02 F6 | 	mov	arg01, local01
2ad44     FC 16 20 FF 
2ad48     54 14 06 F6 | 	mov	arg02, ##1076754516
2ad4c     01 16 06 F6 | 	mov	arg03, #1
2ad50     F8 F5 BF FD | 	call	#__system___float_cmp
2ad54     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad58     55 DC 1F AF 
2ad5c     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
2ad60     B0 00 90 AD |  if_e	jmp	#LR__3854
2ad64     14 2B 02 F6 | 	mov	local03, local02
2ad68     17 2A 46 F0 | 	shr	local03, #23
2ad6c     15 2B E2 F8 | 	getbyte	local03, local03, #0
2ad70     17 29 06 F4 | 	bitl	local02, #279
2ad74     14 2D 02 F6 | 	mov	local04, local02
2ad78     FF 2A 0E F2 | 	cmp	local03, #255 wz
2ad7c     1C 00 90 5D |  if_ne	jmp	#LR__3850
2ad80     00 2C 0E F2 | 	cmp	local04, #0 wz
2ad84     00 C0 3F 5F 
2ad88     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
2ad8c     00 E0 3F AF 
2ad90     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
2ad94     17 FB 01 F6 | 	mov	result1, local05
2ad98     78 00 90 FD | 	jmp	#LR__3854
2ad9c                 | LR__3850
2ad9c     00 2A 0E F2 | 	cmp	local03, #0 wz
2ada0     17 2C 26 54 |  if_ne	bith	local04, #23
2ada4     7F 2A 86 51 |  if_ne	sub	local03, #127
2ada8     28 00 90 5D |  if_ne	jmp	#LR__3853
2adac     00 2C 0E F2 | 	cmp	local04, #0 wz
2adb0     00 40 00 AF 
2adb4     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2adb8     58 00 90 AD |  if_e	jmp	#LR__3854
2adbc     7E 2A 66 F6 | 	neg	local03, #126
2adc0     97 08 48 FB | 	callpa	#(@LR__3852-@LR__3851)>>2,fcache_load_ptr_
2adc4                 | LR__3851
2adc4     17 2C 2E F4 | 	testbn	local04, #23 wz
2adc8     01 2C 66 A0 |  if_e	shl	local04, #1
2adcc     01 2A 06 A1 |  if_e	add	local03, #1
2add0     F0 FF 9F AD |  if_e	jmp	#LR__3851
2add4                 | LR__3852
2add4                 | LR__3853
2add4     0E 2C 62 FD | 	qlog	local04
2add8     01 2A 86 F1 | 	sub	local03, #1
2addc     15 13 52 F6 | 	abs	arg01, local03 wc
2ade0     1F 30 C6 C9 |  if_b	decod	local06, #31
2ade4     00 30 06 36 |  if_ae	mov	local06, #0
2ade8     18 2E 62 FD | 	getqx	local05
2adec     9B 2E 06 F4 | 	bitl	local05, #155
2adf0     08 2E 06 F1 | 	add	local05, #8
2adf4     04 2E 46 F0 | 	shr	local05, #4
2adf8     00 C0 1F FF 
2adfc     00 2E 06 F1 | 	add	local05, ##1065353216
2ae00     10 ED BF FD | 	call	#__system___float_fromuns
2ae04     18 FB 61 F5 | 	xor	result1, local06
2ae08     FD 14 02 F6 | 	mov	arg02, result1
2ae0c     17 13 02 F6 | 	mov	arg01, local05
2ae10     34 ED BF FD | 	call	#__system___float_add
2ae14                 | LR__3854
2ae14     A7 F0 03 F6 | 	mov	ptra, fp
2ae18     B2 00 A0 FD | 	call	#popregs_
2ae1c                 | __system____builtin_log2f_ret
2ae1c     2D 00 64 FD | 	ret
2ae20                 | 
2ae20                 | __system____builtin_powf
2ae20     04 4A 05 F6 | 	mov	COUNT_, #4
2ae24     A8 00 A0 FD | 	call	#pushregs_
2ae28     09 27 02 F6 | 	mov	local01, arg01
2ae2c     0A 29 02 F6 | 	mov	local02, arg02
2ae30     14 13 02 F6 | 	mov	arg01, local02
2ae34     00 14 06 F6 | 	mov	arg02, #0
2ae38     A4 F5 BF FD | 	call	#__system___float_tointeger
2ae3c     FD 2A 02 F6 | 	mov	local03, result1
2ae40     15 13 52 F6 | 	abs	arg01, local03 wc
2ae44     1F 2C C6 C9 |  if_b	decod	local04, #31
2ae48     00 2C 06 36 |  if_ae	mov	local04, #0
2ae4c     C4 EC BF FD | 	call	#__system___float_fromuns
2ae50     16 FB 61 F5 | 	xor	result1, local04
2ae54     FD 12 02 F6 | 	mov	arg01, result1
2ae58     14 15 02 F6 | 	mov	arg02, local02
2ae5c     01 16 06 F6 | 	mov	arg03, #1
2ae60     E8 F4 BF FD | 	call	#__system___float_cmp
2ae64     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae68     18 00 90 5D |  if_ne	jmp	#LR__3860
2ae6c     00 C0 1F FF 
2ae70     00 12 06 F6 | 	mov	arg01, ##1065353216
2ae74     13 15 02 F6 | 	mov	arg02, local01
2ae78     15 17 02 F6 | 	mov	arg03, local03
2ae7c     A0 00 B0 FD | 	call	#__system___float_pow_n
2ae80     58 00 90 FD | 	jmp	#LR__3861
2ae84                 | LR__3860
2ae84     13 13 02 F6 | 	mov	arg01, local01
2ae88     00 14 06 F6 | 	mov	arg02, #0
2ae8c     01 16 06 F6 | 	mov	arg03, #1
2ae90     B8 F4 BF FD | 	call	#__system___float_cmp
2ae94     00 FA 55 F2 | 	cmps	result1, #0 wc
2ae98     00 E0 3F CF 
2ae9c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2aea0     38 00 90 CD |  if_b	jmp	#LR__3861
2aea4     13 13 02 F6 | 	mov	arg01, local01
2aea8     00 14 06 F6 | 	mov	arg02, #0
2aeac     01 16 06 F6 | 	mov	arg03, #1
2aeb0     98 F4 BF FD | 	call	#__system___float_cmp
2aeb4     00 FA 0D F2 | 	cmp	result1, #0 wz
2aeb8     00 FA 05 A6 |  if_e	mov	result1, #0
2aebc     1C 00 90 AD |  if_e	jmp	#LR__3861
2aec0     13 13 02 F6 | 	mov	arg01, local01
2aec4     20 FE BF FD | 	call	#__system____builtin_log2f
2aec8     FD 12 02 F6 | 	mov	arg01, result1
2aecc     14 15 02 F6 | 	mov	arg02, local02
2aed0     44 F0 BF FD | 	call	#__system___float_mul
2aed4     FD 12 02 F6 | 	mov	arg01, result1
2aed8     F8 FC BF FD | 	call	#__system____builtin_exp2f
2aedc                 | LR__3861
2aedc     A7 F0 03 F6 | 	mov	ptra, fp
2aee0     B2 00 A0 FD | 	call	#popregs_
2aee4                 | __system____builtin_powf_ret
2aee4     2D 00 64 FD | 	ret
2aee8                 | 
2aee8                 | __system____builtin_logbase
2aee8     02 4A 05 F6 | 	mov	COUNT_, #2
2aeec     A8 00 A0 FD | 	call	#pushregs_
2aef0     09 27 02 F6 | 	mov	local01, arg01
2aef4     0A 13 02 F6 | 	mov	arg01, arg02
2aef8     EC FD BF FD | 	call	#__system____builtin_log2f
2aefc     FD 28 02 F6 | 	mov	local02, result1
2af00     13 13 02 F6 | 	mov	arg01, local01
2af04     E0 FD BF FD | 	call	#__system____builtin_log2f
2af08     FD 14 02 F6 | 	mov	arg02, result1
2af0c     14 13 02 F6 | 	mov	arg01, local02
2af10     08 F2 BF FD | 	call	#__system___float_div
2af14     A7 F0 03 F6 | 	mov	ptra, fp
2af18     B2 00 A0 FD | 	call	#popregs_
2af1c                 | __system____builtin_logbase_ret
2af1c     2D 00 64 FD | 	ret
2af20                 | 
2af20                 | __system___float_pow_n
2af20     05 4A 05 F6 | 	mov	COUNT_, #5
2af24     A8 00 A0 FD | 	call	#pushregs_
2af28     09 27 02 F6 | 	mov	local01, arg01
2af2c     0A 29 02 F6 | 	mov	local02, arg02
2af30     0B 2B 02 F6 | 	mov	local03, arg03
2af34     00 2A 56 F2 | 	cmps	local03, #0 wc
2af38     18 00 90 3D |  if_ae	jmp	#LR__3870
2af3c     01 2C 06 F6 | 	mov	local04, #1
2af40     15 2B 62 F6 | 	neg	local03, local03
2af44     00 2A 56 F2 | 	cmps	local03, #0 wc
2af48     00 FA 05 C6 |  if_b	mov	result1, #0
2af4c     94 00 90 CD |  if_b	jmp	#LR__3878
2af50     04 00 90 FD | 	jmp	#LR__3871
2af54                 | LR__3870
2af54     00 2C 06 F6 | 	mov	local04, #0
2af58                 | LR__3871
2af58     00 C0 1F FF 
2af5c     00 2E 06 F6 | 	mov	local05, ##1065353216
2af60                 | LR__3872
2af60     01 2A 56 F2 | 	cmps	local03, #1 wc
2af64     30 00 90 CD |  if_b	jmp	#LR__3874
2af68     01 2A CE F7 | 	test	local03, #1 wz
2af6c     10 00 90 AD |  if_e	jmp	#LR__3873
2af70     17 13 02 F6 | 	mov	arg01, local05
2af74     14 15 02 F6 | 	mov	arg02, local02
2af78     9C EF BF FD | 	call	#__system___float_mul
2af7c     FD 2E 02 F6 | 	mov	local05, result1
2af80                 | LR__3873
2af80     01 2A C6 F0 | 	sar	local03, #1
2af84     14 13 02 F6 | 	mov	arg01, local02
2af88     14 15 02 F6 | 	mov	arg02, local02
2af8c     88 EF BF FD | 	call	#__system___float_mul
2af90     FD 28 02 F6 | 	mov	local02, result1
2af94     C8 FF 9F FD | 	jmp	#LR__3872
2af98                 | LR__3874
2af98     00 2C 0E F2 | 	cmp	local04, #0 wz
2af9c     14 00 90 AD |  if_e	jmp	#LR__3875
2afa0     13 13 02 F6 | 	mov	arg01, local01
2afa4     17 15 02 F6 | 	mov	arg02, local05
2afa8     70 F1 BF FD | 	call	#__system___float_div
2afac     FD 2E 02 F6 | 	mov	local05, result1
2afb0     2C 00 90 FD | 	jmp	#LR__3877
2afb4                 | LR__3875
2afb4     13 13 02 F6 | 	mov	arg01, local01
2afb8     00 C0 1F FF 
2afbc     00 14 06 F6 | 	mov	arg02, ##1065353216
2afc0     01 16 06 F6 | 	mov	arg03, #1
2afc4     84 F3 BF FD | 	call	#__system___float_cmp
2afc8     00 FA 0D F2 | 	cmp	result1, #0 wz
2afcc     10 00 90 AD |  if_e	jmp	#LR__3876
2afd0     13 13 02 F6 | 	mov	arg01, local01
2afd4     17 15 02 F6 | 	mov	arg02, local05
2afd8     3C EF BF FD | 	call	#__system___float_mul
2afdc     FD 2E 02 F6 | 	mov	local05, result1
2afe0                 | LR__3876
2afe0                 | LR__3877
2afe0     17 FB 01 F6 | 	mov	result1, local05
2afe4                 | LR__3878
2afe4     A7 F0 03 F6 | 	mov	ptra, fp
2afe8     B2 00 A0 FD | 	call	#popregs_
2afec                 | __system___float_pow_n_ret
2afec     2D 00 64 FD | 	ret
2aff0                 | 
2aff0                 | __system___gc_ptrs
2aff0     EC 00 02 F6 | 	mov	_var01, __heap_ptr
2aff4     00 03 02 F6 | 	mov	_var02, _var01
2aff8     BB 00 00 FF 
2affc     F8 02 06 F1 | 	add	_var02, ##95992
2b000     00 FD 09 FB | 	rdlong	result2, _var01 wz
2b004     74 00 90 5D |  if_ne	jmp	#LR__3880
2b008     01 FD 01 F6 | 	mov	result2, _var02
2b00c     00 FD 81 F1 | 	sub	result2, _var01
2b010     00 03 58 FC | 	wrword	#1, _var01
2b014     00 FB 01 F6 | 	mov	result1, _var01
2b018     02 FA 05 F1 | 	add	result1, #2
2b01c     36 00 80 FF 
2b020     FD 20 59 FC | 	wrword	##27792, result1
2b024     00 FB 01 F6 | 	mov	result1, _var01
2b028     04 FA 05 F1 | 	add	result1, #4
2b02c     FD 00 58 FC | 	wrword	#0, result1
2b030     00 FB 01 F6 | 	mov	result1, _var01
2b034     06 FA 05 F1 | 	add	result1, #6
2b038     FD 02 58 FC | 	wrword	#1, result1
2b03c     10 00 06 F1 | 	add	_var01, #16
2b040     FE FC 51 F6 | 	abs	result2, result2 wc
2b044     04 FC 45 F0 | 	shr	result2, #4
2b048     FE FC 81 F6 | 	negc	result2, result2
2b04c     00 FD 51 FC | 	wrword	result2, _var01
2b050     00 FD 01 F6 | 	mov	result2, _var01
2b054     02 FC 05 F1 | 	add	result2, #2
2b058     36 00 80 FF 
2b05c     FE 1E 59 FC | 	wrword	##27791, result2
2b060     00 FD 01 F6 | 	mov	result2, _var01
2b064     04 FC 05 F1 | 	add	result2, #4
2b068     FE 00 58 FC | 	wrword	#0, result2
2b06c     00 FD 01 F6 | 	mov	result2, _var01
2b070     06 FC 05 F1 | 	add	result2, #6
2b074     FE 00 58 FC | 	wrword	#0, result2
2b078     10 00 86 F1 | 	sub	_var01, #16
2b07c                 | LR__3880
2b07c     00 FB 01 F6 | 	mov	result1, _var01
2b080     01 FD 01 F6 | 	mov	result2, _var02
2b084                 | __system___gc_ptrs_ret
2b084     2D 00 64 FD | 	ret
2b088                 | 
2b088                 | __system___gc_tryalloc
2b088     0B 4A 05 F6 | 	mov	COUNT_, #11
2b08c     A8 00 A0 FD | 	call	#pushregs_
2b090     09 27 02 F6 | 	mov	local01, arg01
2b094     0A 29 02 F6 | 	mov	local02, arg02
2b098     54 FF BF FD | 	call	#__system___gc_ptrs
2b09c     FD 2A 02 F6 | 	mov	local03, result1
2b0a0     FE 2C 02 F6 | 	mov	local04, result2
2b0a4     15 2F 02 F6 | 	mov	local05, local03
2b0a8     00 30 06 F6 | 	mov	local06, #0
2b0ac     97 1E 48 FB | 	callpa	#(@LR__3891-@LR__3890)>>2,fcache_load_ptr_
2b0b0                 | LR__3890
2b0b0     17 33 02 F6 | 	mov	local07, local05
2b0b4     06 2E 06 F1 | 	add	local05, #6
2b0b8     17 15 EA FA | 	rdword	arg02, local05 wz
2b0bc     15 13 02 F6 | 	mov	arg01, local03
2b0c0     00 FA 05 A6 |  if_e	mov	result1, #0
2b0c4     04 14 66 50 |  if_ne	shl	arg02, #4
2b0c8     0A 13 02 51 |  if_ne	add	arg01, arg02
2b0cc     09 FB 01 56 |  if_ne	mov	result1, arg01
2b0d0     FD 2E 0A F6 | 	mov	local05, result1 wz
2b0d4     17 31 E2 5A |  if_ne	rdword	local06, local05
2b0d8     00 2E 0E F2 | 	cmp	local05, #0 wz
2b0dc     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
2b0e0     08 00 90 1D |  if_a	jmp	#LR__3892
2b0e4     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
2b0e8     C4 FF 9F 1D |  if_a	jmp	#LR__3890
2b0ec                 | LR__3891
2b0ec                 | LR__3892
2b0ec     00 2E 0E F2 | 	cmp	local05, #0 wz
2b0f0     17 FB 01 A6 |  if_e	mov	result1, local05
2b0f4     3C 01 90 AD |  if_e	jmp	#LR__3895
2b0f8     17 FD 01 F6 | 	mov	result2, local05
2b0fc     06 FC 05 F1 | 	add	result2, #6
2b100     FE 34 E2 FA | 	rdword	local08, result2
2b104     18 27 52 F2 | 	cmps	local01, local06 wc
2b108     C0 00 90 3D |  if_ae	jmp	#LR__3894
2b10c     17 27 52 FC | 	wrword	local01, local05
2b110     17 13 02 F6 | 	mov	arg01, local05
2b114     13 35 02 F6 | 	mov	local08, local01
2b118     04 34 66 F0 | 	shl	local08, #4
2b11c     1A 13 02 F1 | 	add	arg01, local08
2b120     13 31 82 F1 | 	sub	local06, local01
2b124     09 31 52 FC | 	wrword	local06, arg01
2b128     09 35 02 F6 | 	mov	local08, arg01
2b12c     02 34 06 F1 | 	add	local08, #2
2b130     36 00 80 FF 
2b134     1A 1F 59 FC | 	wrword	##27791, local08
2b138     17 15 0A F6 | 	mov	arg02, local05 wz
2b13c     00 FA 05 A6 |  if_e	mov	result1, #0
2b140     15 15 82 51 |  if_ne	sub	arg02, local03
2b144     04 14 46 50 |  if_ne	shr	arg02, #4
2b148     0A FB 01 56 |  if_ne	mov	result1, arg02
2b14c     09 35 02 F6 | 	mov	local08, arg01
2b150     04 34 06 F1 | 	add	local08, #4
2b154     1A FB 51 FC | 	wrword	result1, local08
2b158     17 35 02 F6 | 	mov	local08, local05
2b15c     06 34 06 F1 | 	add	local08, #6
2b160     09 15 02 F6 | 	mov	arg02, arg01
2b164     1A 35 E2 FA | 	rdword	local08, local08
2b168     06 14 06 F1 | 	add	arg02, #6
2b16c     0A 35 52 FC | 	wrword	local08, arg02
2b170     09 37 02 F6 | 	mov	local09, arg01
2b174     1B 15 0A F6 | 	mov	arg02, local09 wz
2b178     00 FA 05 A6 |  if_e	mov	result1, #0
2b17c     15 15 82 51 |  if_ne	sub	arg02, local03
2b180     04 14 46 50 |  if_ne	shr	arg02, #4
2b184     0A FB 01 56 |  if_ne	mov	result1, arg02
2b188     FD 34 02 F6 | 	mov	local08, result1
2b18c     09 39 EA FA | 	rdword	local10, arg01 wz
2b190     00 FA 05 A6 |  if_e	mov	result1, #0
2b194     04 38 66 50 |  if_ne	shl	local10, #4
2b198     1C 13 02 51 |  if_ne	add	arg01, local10
2b19c     09 FB 01 56 |  if_ne	mov	result1, arg01
2b1a0     FD 3A 0A F6 | 	mov	local11, result1 wz
2b1a4     24 00 90 AD |  if_e	jmp	#LR__3893
2b1a8     16 3B 52 F2 | 	cmps	local11, local04 wc
2b1ac     1C 00 90 3D |  if_ae	jmp	#LR__3893
2b1b0     1B 15 0A F6 | 	mov	arg02, local09 wz
2b1b4     00 FA 05 A6 |  if_e	mov	result1, #0
2b1b8     15 15 82 51 |  if_ne	sub	arg02, local03
2b1bc     04 14 46 50 |  if_ne	shr	arg02, #4
2b1c0     0A FB 01 56 |  if_ne	mov	result1, arg02
2b1c4     04 3A 06 F1 | 	add	local11, #4
2b1c8     1D FB 51 FC | 	wrword	result1, local11
2b1cc                 | LR__3893
2b1cc                 | LR__3894
2b1cc     06 32 06 F1 | 	add	local07, #6
2b1d0     19 35 52 FC | 	wrword	local08, local07
2b1d4     36 00 00 FF 
2b1d8     80 36 06 F6 | 	mov	local09, ##27776
2b1dc     14 37 42 F5 | 	or	local09, local02
2b1e0     00 FA 05 F6 | 	mov	result1, #0
2b1e4     01 FA 61 FD | 	cogid	result1
2b1e8     FD 36 42 F5 | 	or	local09, result1
2b1ec     17 3B 02 F6 | 	mov	local11, local05
2b1f0     02 3A 06 F1 | 	add	local11, #2
2b1f4     1D 37 52 FC | 	wrword	local09, local11
2b1f8     15 37 02 F6 | 	mov	local09, local03
2b1fc     08 36 06 F1 | 	add	local09, #8
2b200     17 3B 02 F6 | 	mov	local11, local05
2b204     1B 37 E2 FA | 	rdword	local09, local09
2b208     06 3A 06 F1 | 	add	local11, #6
2b20c     1D 37 52 FC | 	wrword	local09, local11
2b210     17 15 0A F6 | 	mov	arg02, local05 wz
2b214     00 FA 05 A6 |  if_e	mov	result1, #0
2b218     15 15 82 51 |  if_ne	sub	arg02, local03
2b21c     04 14 46 50 |  if_ne	shr	arg02, #4
2b220     0A FB 01 56 |  if_ne	mov	result1, arg02
2b224     08 2A 06 F1 | 	add	local03, #8
2b228     15 FB 51 FC | 	wrword	result1, local03
2b22c     08 2E 06 F1 | 	add	local05, #8
2b230     17 FB 01 F6 | 	mov	result1, local05
2b234                 | LR__3895
2b234     A7 F0 03 F6 | 	mov	ptra, fp
2b238     B2 00 A0 FD | 	call	#popregs_
2b23c                 | __system___gc_tryalloc_ret
2b23c     2D 00 64 FD | 	ret
2b240                 | 
2b240                 | __system___gc_alloc_managed
2b240     01 4A 05 F6 | 	mov	COUNT_, #1
2b244     A8 00 A0 FD | 	call	#pushregs_
2b248     09 27 02 F6 | 	mov	local01, arg01
2b24c     00 14 06 F6 | 	mov	arg02, #0
2b250     1C 00 B0 FD | 	call	#__system___gc_doalloc
2b254     FD 14 0A F6 | 	mov	arg02, result1 wz
2b258     01 26 56 A2 |  if_e	cmps	local01, #1 wc
2b25c     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
2b260     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2b264     A7 F0 03 F6 | 	mov	ptra, fp
2b268     B2 00 A0 FD | 	call	#popregs_
2b26c                 | __system___gc_alloc_managed_ret
2b26c     2D 00 64 FD | 	ret
2b270                 | 
2b270                 | __system___gc_doalloc
2b270     06 4A 05 F6 | 	mov	COUNT_, #6
2b274     A8 00 A0 FD | 	call	#pushregs_
2b278     09 27 0A F6 | 	mov	local01, arg01 wz
2b27c     0A 29 02 F6 | 	mov	local02, arg02
2b280     00 FA 05 A6 |  if_e	mov	result1, #0
2b284     8C 00 90 AD |  if_e	jmp	#LR__3907
2b288     17 26 06 F1 | 	add	local01, #23
2b28c     0F 26 26 F5 | 	andn	local01, #15
2b290     04 26 46 F0 | 	shr	local01, #4
2b294     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2b298     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2b29c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2b2a0     F8 BD BF FD | 	call	#__system___lockmem
2b2a4     13 13 02 F6 | 	mov	arg01, local01
2b2a8     14 15 02 F6 | 	mov	arg02, local02
2b2ac     D8 FD BF FD | 	call	#__system___gc_tryalloc
2b2b0     FD 2A 0A F6 | 	mov	local03, result1 wz
2b2b4     14 00 90 5D |  if_ne	jmp	#LR__3900
2b2b8     70 03 B0 FD | 	call	#__system___gc_docollect
2b2bc     13 13 02 F6 | 	mov	arg01, local01
2b2c0     14 15 02 F6 | 	mov	arg02, local02
2b2c4     C0 FD BF FD | 	call	#__system___gc_tryalloc
2b2c8     FD 2A 02 F6 | 	mov	local03, result1
2b2cc                 | LR__3900
2b2cc     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2b2d0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2b2d4     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2b2d8     09 01 68 FC | 	wrlong	#0, arg01
2b2dc     00 2A 0E F2 | 	cmp	local03, #0 wz
2b2e0     2C 00 90 AD |  if_e	jmp	#LR__3906
2b2e4     04 26 66 F0 | 	shl	local01, #4
2b2e8     08 26 86 F1 | 	sub	local01, #8
2b2ec     13 2D 52 F6 | 	abs	local04, local01 wc
2b2f0     02 2C 46 F0 | 	shr	local04, #2
2b2f4     16 2F 8A F6 | 	negc	local05, local04 wz
2b2f8     15 31 02 F6 | 	mov	local06, local03
2b2fc     10 00 90 AD |  if_e	jmp	#LR__3905
2b300     97 06 48 FB | 	callpa	#(@LR__3903-@LR__3901)>>2,fcache_load_ptr_
2b304                 | LR__3901
2b304     17 05 D8 FC | 	rep	@LR__3904, local05
2b308                 | LR__3902
2b308     18 01 68 FC | 	wrlong	#0, local06
2b30c     04 30 06 F1 | 	add	local06, #4
2b310                 | LR__3903
2b310                 | LR__3904
2b310                 | LR__3905
2b310                 | LR__3906
2b310     15 FB 01 F6 | 	mov	result1, local03
2b314                 | LR__3907
2b314     A7 F0 03 F6 | 	mov	ptra, fp
2b318     B2 00 A0 FD | 	call	#popregs_
2b31c                 | __system___gc_doalloc_ret
2b31c     2D 00 64 FD | 	ret
2b320                 | 
2b320                 | __system___gc_isvalidptr
2b320     F8 16 06 F4 | 	bitl	arg03, #248
2b324     08 16 86 F1 | 	sub	arg03, #8
2b328     09 17 52 F2 | 	cmps	arg03, arg01 wc
2b32c     08 00 90 CD |  if_b	jmp	#LR__3910
2b330     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2b334     08 00 90 CD |  if_b	jmp	#LR__3911
2b338                 | LR__3910
2b338     00 FA 05 F6 | 	mov	result1, #0
2b33c     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
2b340                 | LR__3911
2b340     0B 01 02 F6 | 	mov	_var01, arg03
2b344     09 01 62 F5 | 	xor	_var01, arg01
2b348     0F 00 CE F7 | 	test	_var01, #15 wz
2b34c     00 FA 05 56 |  if_ne	mov	result1, #0
2b350     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2b354     0B 01 02 F6 | 	mov	_var01, arg03
2b358     02 00 06 F1 | 	add	_var01, #2
2b35c     00 01 E2 FA | 	rdword	_var01, _var01
2b360     7F 00 00 FF 
2b364     C0 01 06 F5 | 	and	_var01, ##65472
2b368     36 00 00 FF 
2b36c     80 00 0E F2 | 	cmp	_var01, ##27776 wz
2b370     00 FA 05 56 |  if_ne	mov	result1, #0
2b374     0B FB 01 A6 |  if_e	mov	result1, arg03
2b378                 | __system___gc_isvalidptr_ret
2b378     2D 00 64 FD | 	ret
2b37c                 | 
2b37c                 | __system___gc_free
2b37c     09 17 02 F6 | 	mov	arg03, arg01
2b380     6C FC BF FD | 	call	#__system___gc_ptrs
2b384     FD 12 02 F6 | 	mov	arg01, result1
2b388     FE 14 02 F6 | 	mov	arg02, result2
2b38c     90 FF BF FD | 	call	#__system___gc_isvalidptr
2b390     FD 14 0A F6 | 	mov	arg02, result1 wz
2b394     28 00 90 AD |  if_e	jmp	#LR__3920
2b398     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2b39c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2b3a0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2b3a4     F4 BC BF FD | 	call	#__system___lockmem
2b3a8     0A 13 02 F6 | 	mov	arg01, arg02
2b3ac     14 00 B0 FD | 	call	#__system___gc_dofree
2b3b0     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2b3b4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2b3b8     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2b3bc     09 01 68 FC | 	wrlong	#0, arg01
2b3c0                 | LR__3920
2b3c0                 | __system___gc_free_ret
2b3c0     2D 00 64 FD | 	ret
2b3c4                 | 
2b3c4                 | __system___gc_dofree
2b3c4     06 4A 05 F6 | 	mov	COUNT_, #6
2b3c8     A8 00 A0 FD | 	call	#pushregs_
2b3cc     09 27 02 F6 | 	mov	local01, arg01
2b3d0     1C FC BF FD | 	call	#__system___gc_ptrs
2b3d4     FD 28 02 F6 | 	mov	local02, result1
2b3d8     FE 2A 02 F6 | 	mov	local03, result2
2b3dc     13 15 02 F6 | 	mov	arg02, local01
2b3e0     02 14 06 F1 | 	add	arg02, #2
2b3e4     36 00 80 FF 
2b3e8     0A 1F 59 FC | 	wrword	##27791, arg02
2b3ec     13 2D 02 F6 | 	mov	local04, local01
2b3f0     13 13 02 F6 | 	mov	arg01, local01
2b3f4     09 2F EA FA | 	rdword	local05, arg01 wz
2b3f8     00 FA 05 A6 |  if_e	mov	result1, #0
2b3fc     04 2E 66 50 |  if_ne	shl	local05, #4
2b400     17 13 02 51 |  if_ne	add	arg01, local05
2b404     09 FB 01 56 |  if_ne	mov	result1, arg01
2b408     FD 30 02 F6 | 	mov	local06, result1
2b40c     97 24 48 FB | 	callpa	#(@LR__3931-@LR__3930)>>2,fcache_load_ptr_
2b410                 | LR__3930
2b410     04 2C 06 F1 | 	add	local04, #4
2b414     16 15 EA FA | 	rdword	arg02, local04 wz
2b418     14 13 02 F6 | 	mov	arg01, local02
2b41c     00 FA 05 A6 |  if_e	mov	result1, #0
2b420     04 14 66 50 |  if_ne	shl	arg02, #4
2b424     0A 13 02 51 |  if_ne	add	arg01, arg02
2b428     09 FB 01 56 |  if_ne	mov	result1, arg01
2b42c     FD 2C 0A F6 | 	mov	local04, result1 wz
2b430     24 00 90 AD |  if_e	jmp	#LR__3932
2b434     16 13 02 F6 | 	mov	arg01, local04
2b438     00 FA 05 F6 | 	mov	result1, #0
2b43c     02 12 06 F1 | 	add	arg01, #2
2b440     09 13 E2 FA | 	rdword	arg01, arg01
2b444     36 00 00 FF 
2b448     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2b44c     01 FA 65 A6 |  if_e	neg	result1, #1
2b450     00 FA 0D F2 | 	cmp	result1, #0 wz
2b454     B8 FF 9F AD |  if_e	jmp	#LR__3930
2b458                 | LR__3931
2b458                 | LR__3932
2b458     00 2C 0E F2 | 	cmp	local04, #0 wz
2b45c     14 2D 02 A6 |  if_e	mov	local04, local02
2b460     16 15 02 F6 | 	mov	arg02, local04
2b464     06 14 06 F1 | 	add	arg02, #6
2b468     13 13 02 F6 | 	mov	arg01, local01
2b46c     0A 15 E2 FA | 	rdword	arg02, arg02
2b470     06 12 06 F1 | 	add	arg01, #6
2b474     09 15 52 FC | 	wrword	arg02, arg01
2b478     13 15 0A F6 | 	mov	arg02, local01 wz
2b47c     00 FA 05 A6 |  if_e	mov	result1, #0
2b480     14 15 82 51 |  if_ne	sub	arg02, local02
2b484     04 14 46 50 |  if_ne	shr	arg02, #4
2b488     0A FB 01 56 |  if_ne	mov	result1, arg02
2b48c     16 15 02 F6 | 	mov	arg02, local04
2b490     06 14 06 F1 | 	add	arg02, #6
2b494     0A FB 51 FC | 	wrword	result1, arg02
2b498     14 2D 0A F2 | 	cmp	local04, local02 wz
2b49c     A4 00 90 AD |  if_e	jmp	#LR__3935
2b4a0     16 13 02 F6 | 	mov	arg01, local04
2b4a4     09 2F EA FA | 	rdword	local05, arg01 wz
2b4a8     00 FA 05 A6 |  if_e	mov	result1, #0
2b4ac     04 2E 66 50 |  if_ne	shl	local05, #4
2b4b0     17 13 02 51 |  if_ne	add	arg01, local05
2b4b4     09 FB 01 56 |  if_ne	mov	result1, arg01
2b4b8     13 FB 09 F2 | 	cmp	result1, local01 wz
2b4bc     84 00 90 5D |  if_ne	jmp	#LR__3934
2b4c0     16 31 E2 FA | 	rdword	local06, local04
2b4c4     13 15 E2 FA | 	rdword	arg02, local01
2b4c8     0A 31 02 F1 | 	add	local06, arg02
2b4cc     16 31 52 FC | 	wrword	local06, local04
2b4d0     13 31 02 F6 | 	mov	local06, local01
2b4d4     02 30 06 F1 | 	add	local06, #2
2b4d8     18 01 58 FC | 	wrword	#0, local06
2b4dc     13 13 02 F6 | 	mov	arg01, local01
2b4e0     09 2F EA FA | 	rdword	local05, arg01 wz
2b4e4     00 FA 05 A6 |  if_e	mov	result1, #0
2b4e8     04 2E 66 50 |  if_ne	shl	local05, #4
2b4ec     17 13 02 51 |  if_ne	add	arg01, local05
2b4f0     09 FB 01 56 |  if_ne	mov	result1, arg01
2b4f4     FD 30 02 F6 | 	mov	local06, result1
2b4f8     15 31 52 F2 | 	cmps	local06, local03 wc
2b4fc     20 00 90 3D |  if_ae	jmp	#LR__3933
2b500     16 15 0A F6 | 	mov	arg02, local04 wz
2b504     00 FA 05 A6 |  if_e	mov	result1, #0
2b508     14 15 82 51 |  if_ne	sub	arg02, local02
2b50c     04 14 46 50 |  if_ne	shr	arg02, #4
2b510     0A FB 01 56 |  if_ne	mov	result1, arg02
2b514     18 15 02 F6 | 	mov	arg02, local06
2b518     04 14 06 F1 | 	add	arg02, #4
2b51c     0A FB 51 FC | 	wrword	result1, arg02
2b520                 | LR__3933
2b520     13 15 02 F6 | 	mov	arg02, local01
2b524     06 14 06 F1 | 	add	arg02, #6
2b528     16 FD 01 F6 | 	mov	result2, local04
2b52c     0A 15 E2 FA | 	rdword	arg02, arg02
2b530     06 FC 05 F1 | 	add	result2, #6
2b534     FE 14 52 FC | 	wrword	arg02, result2
2b538     06 26 06 F1 | 	add	local01, #6
2b53c     13 01 58 FC | 	wrword	#0, local01
2b540     16 27 02 F6 | 	mov	local01, local04
2b544                 | LR__3934
2b544                 | LR__3935
2b544     13 13 02 F6 | 	mov	arg01, local01
2b548     09 2F EA FA | 	rdword	local05, arg01 wz
2b54c     00 FA 05 A6 |  if_e	mov	result1, #0
2b550     04 2E 66 50 |  if_ne	shl	local05, #4
2b554     17 13 02 51 |  if_ne	add	arg01, local05
2b558     09 FB 01 56 |  if_ne	mov	result1, arg01
2b55c     FD 14 0A F6 | 	mov	arg02, result1 wz
2b560     B8 00 90 AD |  if_e	jmp	#LR__3937
2b564     15 15 52 F2 | 	cmps	arg02, local03 wc
2b568     B0 00 90 3D |  if_ae	jmp	#LR__3937
2b56c     0A 13 02 F6 | 	mov	arg01, arg02
2b570     00 FA 05 F6 | 	mov	result1, #0
2b574     02 12 06 F1 | 	add	arg01, #2
2b578     09 13 E2 FA | 	rdword	arg01, arg01
2b57c     36 00 00 FF 
2b580     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2b584     01 FA 65 A6 |  if_e	neg	result1, #1
2b588     00 FA 0D F2 | 	cmp	result1, #0 wz
2b58c     8C 00 90 AD |  if_e	jmp	#LR__3937
2b590     13 2D 02 F6 | 	mov	local04, local01
2b594     16 31 E2 FA | 	rdword	local06, local04
2b598     0A 13 02 F6 | 	mov	arg01, arg02
2b59c     09 27 E2 FA | 	rdword	local01, arg01
2b5a0     13 31 02 F1 | 	add	local06, local01
2b5a4     16 31 52 FC | 	wrword	local06, local04
2b5a8     09 31 02 F6 | 	mov	local06, arg01
2b5ac     06 30 06 F1 | 	add	local06, #6
2b5b0     16 27 02 F6 | 	mov	local01, local04
2b5b4     18 31 E2 FA | 	rdword	local06, local06
2b5b8     06 26 06 F1 | 	add	local01, #6
2b5bc     13 31 52 FC | 	wrword	local06, local01
2b5c0     09 31 02 F6 | 	mov	local06, arg01
2b5c4     02 30 06 F1 | 	add	local06, #2
2b5c8     18 55 59 FC | 	wrword	#170, local06
2b5cc     09 31 02 F6 | 	mov	local06, arg01
2b5d0     06 30 06 F1 | 	add	local06, #6
2b5d4     18 01 58 FC | 	wrword	#0, local06
2b5d8     09 2F EA FA | 	rdword	local05, arg01 wz
2b5dc     00 FA 05 A6 |  if_e	mov	result1, #0
2b5e0     04 2E 66 50 |  if_ne	shl	local05, #4
2b5e4     17 13 02 51 |  if_ne	add	arg01, local05
2b5e8     09 FB 01 56 |  if_ne	mov	result1, arg01
2b5ec     FD 30 0A F6 | 	mov	local06, result1 wz
2b5f0     28 00 90 AD |  if_e	jmp	#LR__3936
2b5f4     15 31 52 F2 | 	cmps	local06, local03 wc
2b5f8     20 00 90 3D |  if_ae	jmp	#LR__3936
2b5fc     16 15 0A F6 | 	mov	arg02, local04 wz
2b600     00 FA 05 A6 |  if_e	mov	result1, #0
2b604     14 15 82 51 |  if_ne	sub	arg02, local02
2b608     04 14 46 50 |  if_ne	shr	arg02, #4
2b60c     0A FB 01 56 |  if_ne	mov	result1, arg02
2b610     18 2D 02 F6 | 	mov	local04, local06
2b614     04 2C 06 F1 | 	add	local04, #4
2b618     16 FB 51 FC | 	wrword	result1, local04
2b61c                 | LR__3936
2b61c                 | LR__3937
2b61c     18 FB 01 F6 | 	mov	result1, local06
2b620     A7 F0 03 F6 | 	mov	ptra, fp
2b624     B2 00 A0 FD | 	call	#popregs_
2b628                 | __system___gc_dofree_ret
2b628     2D 00 64 FD | 	ret
2b62c                 | 
2b62c                 | __system___gc_docollect
2b62c     05 4A 05 F6 | 	mov	COUNT_, #5
2b630     A8 00 A0 FD | 	call	#pushregs_
2b634     B8 F9 BF FD | 	call	#__system___gc_ptrs
2b638     FE 26 02 F6 | 	mov	local01, result2
2b63c     FD 28 02 F6 | 	mov	local02, result1
2b640     14 13 02 F6 | 	mov	arg01, local02
2b644     09 2B EA FA | 	rdword	local03, arg01 wz
2b648     00 FA 05 A6 |  if_e	mov	result1, #0
2b64c     04 2A 66 50 |  if_ne	shl	local03, #4
2b650     15 13 02 51 |  if_ne	add	arg01, local03
2b654     09 FB 01 56 |  if_ne	mov	result1, arg01
2b658     FD 2C 0A F6 | 	mov	local04, result1 wz
2b65c     00 FA 05 F6 | 	mov	result1, #0
2b660     01 FA 61 FD | 	cogid	result1
2b664     FD 2E 02 F6 | 	mov	local05, result1
2b668     48 00 90 AD |  if_e	jmp	#LR__3942
2b66c     97 22 48 FB | 	callpa	#(@LR__3941-@LR__3940)>>2,fcache_load_ptr_
2b670                 | LR__3940
2b670     13 2D 52 F2 | 	cmps	local04, local01 wc
2b674     3C 00 90 3D |  if_ae	jmp	#LR__3942
2b678     16 15 02 F6 | 	mov	arg02, local04
2b67c     02 14 06 F1 | 	add	arg02, #2
2b680     0A 15 E2 FA | 	rdword	arg02, arg02
2b684     20 14 26 F5 | 	andn	arg02, #32
2b688     16 13 02 F6 | 	mov	arg01, local04
2b68c     02 12 06 F1 | 	add	arg01, #2
2b690     09 15 52 FC | 	wrword	arg02, arg01
2b694     16 13 02 F6 | 	mov	arg01, local04
2b698     09 2B EA FA | 	rdword	local03, arg01 wz
2b69c     00 FA 05 A6 |  if_e	mov	result1, #0
2b6a0     04 2A 66 50 |  if_ne	shl	local03, #4
2b6a4     15 13 02 51 |  if_ne	add	arg01, local03
2b6a8     09 FB 01 56 |  if_ne	mov	result1, arg01
2b6ac     FD 2C 0A F6 | 	mov	local04, result1 wz
2b6b0     BC FF 9F 5D |  if_ne	jmp	#LR__3940
2b6b4                 | LR__3941
2b6b4                 | LR__3942
2b6b4     00 2A 06 F6 | 	mov	local03, #0
2b6b8     00 12 06 F6 | 	mov	arg01, #0
2b6bc     B4 B9 BF FD | 	call	#__system____topofstack
2b6c0     FD 14 02 F6 | 	mov	arg02, result1
2b6c4     15 13 02 F6 | 	mov	arg01, local03
2b6c8     90 00 B0 FD | 	call	#__system___gc_markhub
2b6cc     1C 01 B0 FD | 	call	#__system___gc_markcog
2b6d0     14 13 02 F6 | 	mov	arg01, local02
2b6d4     09 2B EA FA | 	rdword	local03, arg01 wz
2b6d8     00 FA 05 A6 |  if_e	mov	result1, #0
2b6dc     04 2A 66 50 |  if_ne	shl	local03, #4
2b6e0     15 13 02 51 |  if_ne	add	arg01, local03
2b6e4     09 FB 01 56 |  if_ne	mov	result1, arg01
2b6e8     FD 28 0A F6 | 	mov	local02, result1 wz
2b6ec     60 00 90 AD |  if_e	jmp	#LR__3946
2b6f0                 | LR__3943
2b6f0     14 2D 02 F6 | 	mov	local04, local02
2b6f4     16 13 02 F6 | 	mov	arg01, local04
2b6f8     09 2B EA FA | 	rdword	local03, arg01 wz
2b6fc     00 FA 05 A6 |  if_e	mov	result1, #0
2b700     04 2A 66 50 |  if_ne	shl	local03, #4
2b704     15 13 02 51 |  if_ne	add	arg01, local03
2b708     09 FB 01 56 |  if_ne	mov	result1, arg01
2b70c     FD 28 02 F6 | 	mov	local02, result1
2b710     16 15 02 F6 | 	mov	arg02, local04
2b714     02 14 06 F1 | 	add	arg02, #2
2b718     0A 15 E2 FA | 	rdword	arg02, arg02
2b71c     20 14 CE F7 | 	test	arg02, #32 wz
2b720     10 14 CE A7 |  if_e	test	arg02, #16 wz
2b724     1C 00 90 5D |  if_ne	jmp	#LR__3945
2b728     0A 15 42 F8 | 	getnib	arg02, arg02, #0
2b72c     17 15 0A F2 | 	cmp	arg02, local05 wz
2b730     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
2b734     0C 00 90 5D |  if_ne	jmp	#LR__3944
2b738     16 13 02 F6 | 	mov	arg01, local04
2b73c     84 FC BF FD | 	call	#__system___gc_dofree
2b740     FD 28 02 F6 | 	mov	local02, result1
2b744                 | LR__3944
2b744                 | LR__3945
2b744     00 28 0E F2 | 	cmp	local02, #0 wz
2b748     13 29 52 52 |  if_ne	cmps	local02, local01 wc
2b74c     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3943
2b750                 | LR__3946
2b750     A7 F0 03 F6 | 	mov	ptra, fp
2b754     B2 00 A0 FD | 	call	#popregs_
2b758                 | __system___gc_docollect_ret
2b758     2D 00 64 FD | 	ret
2b75c                 | 
2b75c                 | __system___gc_markhub
2b75c     04 4A 05 F6 | 	mov	COUNT_, #4
2b760     A8 00 A0 FD | 	call	#pushregs_
2b764     09 27 02 F6 | 	mov	local01, arg01
2b768     0A 29 02 F6 | 	mov	local02, arg02
2b76c     80 F8 BF FD | 	call	#__system___gc_ptrs
2b770     FD 2A 02 F6 | 	mov	local03, result1
2b774     FE 2C 02 F6 | 	mov	local04, result2
2b778                 | LR__3950
2b778     14 27 52 F2 | 	cmps	local01, local02 wc
2b77c     60 00 90 3D |  if_ae	jmp	#LR__3951
2b780     13 17 02 FB | 	rdlong	arg03, local01
2b784     04 26 06 F1 | 	add	local01, #4
2b788     16 15 02 F6 | 	mov	arg02, local04
2b78c     15 13 02 F6 | 	mov	arg01, local03
2b790     8C FB BF FD | 	call	#__system___gc_isvalidptr
2b794     FD 16 0A F6 | 	mov	arg03, result1 wz
2b798     DC FF 9F AD |  if_e	jmp	#LR__3950
2b79c     0B 13 02 F6 | 	mov	arg01, arg03
2b7a0     00 FA 05 F6 | 	mov	result1, #0
2b7a4     02 12 06 F1 | 	add	arg01, #2
2b7a8     09 13 E2 FA | 	rdword	arg01, arg01
2b7ac     36 00 00 FF 
2b7b0     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2b7b4     01 FA 65 A6 |  if_e	neg	result1, #1
2b7b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b7bc     B8 FF 9F 5D |  if_ne	jmp	#LR__3950
2b7c0     0B FD 01 F6 | 	mov	result2, arg03
2b7c4     02 FC 05 F1 | 	add	result2, #2
2b7c8     FE FC E1 FA | 	rdword	result2, result2
2b7cc     0F FC 25 F5 | 	andn	result2, #15
2b7d0     2E FC 45 F5 | 	or	result2, #46
2b7d4     02 16 06 F1 | 	add	arg03, #2
2b7d8     0B FD 51 FC | 	wrword	result2, arg03
2b7dc     98 FF 9F FD | 	jmp	#LR__3950
2b7e0                 | LR__3951
2b7e0     A7 F0 03 F6 | 	mov	ptra, fp
2b7e4     B2 00 A0 FD | 	call	#popregs_
2b7e8                 | __system___gc_markhub_ret
2b7e8     2D 00 64 FD | 	ret
2b7ec                 | 
2b7ec                 | __system___gc_markcog
2b7ec     04 4A 05 F6 | 	mov	COUNT_, #4
2b7f0     A8 00 A0 FD | 	call	#pushregs_
2b7f4     F8 F7 BF FD | 	call	#__system___gc_ptrs
2b7f8     FD 26 02 F6 | 	mov	local01, result1
2b7fc     FE 28 02 F6 | 	mov	local02, result2
2b800     EF 2B 06 F6 | 	mov	local03, #495
2b804                 | LR__3960
2b804                 | 	'.live	local03
2b804     00 2A 96 F9 | 	alts	local03, #0
2b808     15 2D 02 F6 | 	mov	local04, local03
2b80c     13 13 02 F6 | 	mov	arg01, local01
2b810     14 15 02 F6 | 	mov	arg02, local02
2b814     16 17 02 F6 | 	mov	arg03, local04
2b818     04 FB BF FD | 	call	#__system___gc_isvalidptr
2b81c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b820     18 00 90 AD |  if_e	jmp	#LR__3961
2b824     FD 2C 02 F6 | 	mov	local04, result1
2b828     02 2C 06 F1 | 	add	local04, #2
2b82c     16 2D E2 FA | 	rdword	local04, local04
2b830     20 2C 46 F5 | 	or	local04, #32
2b834     02 FA 05 F1 | 	add	result1, #2
2b838     FD 2C 52 FC | 	wrword	local04, result1
2b83c                 | LR__3961
2b83c     01 2A 86 F1 | 	sub	local03, #1
2b840     00 2A 56 F2 | 	cmps	local03, #0 wc
2b844     BC FF 9F 3D |  if_ae	jmp	#LR__3960
2b848     A7 F0 03 F6 | 	mov	ptra, fp
2b84c     B2 00 A0 FD | 	call	#popregs_
2b850                 | __system___gc_markcog_ret
2b850     2D 00 64 FD | 	ret
2b854                 | 
2b854                 | __system__opendir
2b854     06 4A 05 F6 | 	mov	COUNT_, #6
2b858     A8 00 A0 FD | 	call	#pushregs_
2b85c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2b860     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2b864     09 15 02 F6 | 	mov	arg02, arg01
2b868     13 13 02 F6 | 	mov	arg01, local01
2b86c     00 16 06 F6 | 	mov	arg03, #0
2b870     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2b874     BC BF BF FD | 	call	#__system____getvfsforfile
2b878     FD 28 0A F6 | 	mov	local02, result1 wz
2b87c     10 00 90 AD |  if_e	jmp	#LR__3970
2b880     28 28 06 F1 | 	add	local02, #40
2b884     14 17 0A FB | 	rdlong	arg03, local02 wz
2b888     28 28 86 F1 | 	sub	local02, #40
2b88c     14 00 90 5D |  if_ne	jmp	#LR__3971
2b890                 | LR__3970
2b890     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b894     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2b898     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b89c     00 FA 05 F6 | 	mov	result1, #0
2b8a0     90 00 90 FD | 	jmp	#LR__3973
2b8a4                 | LR__3971
2b8a4     5C 12 06 F6 | 	mov	arg01, #92
2b8a8     10 14 06 F6 | 	mov	arg02, #16
2b8ac     C0 F9 BF FD | 	call	#__system___gc_doalloc
2b8b0     FD 2A 0A F6 | 	mov	local03, result1 wz
2b8b4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b8b8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2b8bc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b8c0     00 FA 05 A6 |  if_e	mov	result1, #0
2b8c4     6C 00 90 AD |  if_e	jmp	#LR__3973
2b8c8     28 28 06 F1 | 	add	local02, #40
2b8cc     14 2D 02 FB | 	rdlong	local04, local02
2b8d0     16 2F 02 F6 | 	mov	local05, local04
2b8d4     28 28 86 F1 | 	sub	local02, #40
2b8d8     13 2E 46 F7 | 	zerox	local05, #19
2b8dc     14 2C 46 F0 | 	shr	local04, #20
2b8e0     02 2C 66 F0 | 	shl	local04, #2
2b8e4     ED 2C 02 F1 | 	add	local04, __methods__
2b8e8     16 2D 02 FB | 	rdlong	local04, local04
2b8ec     15 13 02 F6 | 	mov	arg01, local03
2b8f0     13 15 02 F6 | 	mov	arg02, local01
2b8f4     F2 30 02 F6 | 	mov	local06, objptr
2b8f8     17 E5 01 F6 | 	mov	objptr, local05
2b8fc     2D 2C 62 FD | 	call	local04
2b900     18 E5 01 F6 | 	mov	objptr, local06
2b904     FD 16 0A F6 | 	mov	arg03, result1 wz
2b908     20 00 90 AD |  if_e	jmp	#LR__3972
2b90c     00 16 4E F2 | 	cmps	arg03, #0 wz
2b910     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b914     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2b918     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b91c     15 13 02 F6 | 	mov	arg01, local03
2b920     58 FA BF FD | 	call	#__system___gc_free
2b924     00 FA 05 F6 | 	mov	result1, #0
2b928     08 00 90 FD | 	jmp	#LR__3973
2b92c                 | LR__3972
2b92c     15 29 62 FC | 	wrlong	local02, local03
2b930     15 FB 01 F6 | 	mov	result1, local03
2b934                 | LR__3973
2b934     A7 F0 03 F6 | 	mov	ptra, fp
2b938     B2 00 A0 FD | 	call	#popregs_
2b93c                 | __system__opendir_ret
2b93c     2D 00 64 FD | 	ret
2b940                 | 
2b940                 | __system__closedir
2b940     04 4A 05 F6 | 	mov	COUNT_, #4
2b944     A8 00 A0 FD | 	call	#pushregs_
2b948     09 27 02 F6 | 	mov	local01, arg01
2b94c     13 13 02 FB | 	rdlong	arg01, local01
2b950     2C 12 06 F1 | 	add	arg01, #44
2b954     09 29 02 FB | 	rdlong	local02, arg01
2b958     14 2B 02 F6 | 	mov	local03, local02
2b95c     13 2A 46 F7 | 	zerox	local03, #19
2b960     14 28 46 F0 | 	shr	local02, #20
2b964     02 28 66 F0 | 	shl	local02, #2
2b968     ED 28 02 F1 | 	add	local02, __methods__
2b96c     14 29 02 FB | 	rdlong	local02, local02
2b970     13 13 02 F6 | 	mov	arg01, local01
2b974     F2 2C 02 F6 | 	mov	local04, objptr
2b978     15 E5 01 F6 | 	mov	objptr, local03
2b97c     2D 28 62 FD | 	call	local02
2b980     16 E5 01 F6 | 	mov	objptr, local04
2b984     FD 2C 02 F6 | 	mov	local04, result1
2b988     13 13 02 F6 | 	mov	arg01, local01
2b98c     EC F9 BF FD | 	call	#__system___gc_free
2b990     00 2C 4E F2 | 	cmps	local04, #0 wz
2b994     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b998     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
2b99c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b9a0     01 FA 65 56 |  if_ne	neg	result1, #1
2b9a4     00 FA 05 A6 |  if_e	mov	result1, #0
2b9a8     A7 F0 03 F6 | 	mov	ptra, fp
2b9ac     B2 00 A0 FD | 	call	#popregs_
2b9b0                 | __system__closedir_ret
2b9b0     2D 00 64 FD | 	ret
2b9b4                 | 
2b9b4                 | __system__readdir
2b9b4     04 4A 05 F6 | 	mov	COUNT_, #4
2b9b8     A8 00 A0 FD | 	call	#pushregs_
2b9bc     09 15 0A FB | 	rdlong	arg02, arg01 wz
2b9c0     08 12 06 F1 | 	add	arg01, #8
2b9c4     09 27 02 F6 | 	mov	local01, arg01
2b9c8     08 12 86 F1 | 	sub	arg01, #8
2b9cc     00 FA 05 A6 |  if_e	mov	result1, #0
2b9d0     5C 00 90 AD |  if_e	jmp	#LR__3981
2b9d4     30 14 06 F1 | 	add	arg02, #48
2b9d8     0A 29 02 FB | 	rdlong	local02, arg02
2b9dc     14 2B 02 F6 | 	mov	local03, local02
2b9e0     13 2A 46 F7 | 	zerox	local03, #19
2b9e4     14 28 46 F0 | 	shr	local02, #20
2b9e8     02 28 66 F0 | 	shl	local02, #2
2b9ec     ED 28 02 F1 | 	add	local02, __methods__
2b9f0     14 29 02 FB | 	rdlong	local02, local02
2b9f4     13 15 02 F6 | 	mov	arg02, local01
2b9f8     F2 2C 02 F6 | 	mov	local04, objptr
2b9fc     15 E5 01 F6 | 	mov	objptr, local03
2ba00     2D 28 62 FD | 	call	local02
2ba04     16 E5 01 F6 | 	mov	objptr, local04
2ba08     00 FA 4D F2 | 	cmps	result1, #0 wz
2ba0c     1C 00 90 AD |  if_e	jmp	#LR__3980
2ba10     01 FA 55 F2 | 	cmps	result1, #1 wc
2ba14     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2ba18     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2ba1c     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
2ba20     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2ba24     00 FA 05 F6 | 	mov	result1, #0
2ba28     04 00 90 FD | 	jmp	#LR__3981
2ba2c                 | LR__3980
2ba2c     13 FB 01 F6 | 	mov	result1, local01
2ba30                 | LR__3981
2ba30     A7 F0 03 F6 | 	mov	ptra, fp
2ba34     B2 00 A0 FD | 	call	#popregs_
2ba38                 | __system__readdir_ret
2ba38     2D 00 64 FD | 	ret
2ba3c                 | 
2ba3c                 | __system___openraw
2ba3c     15 4A 05 F6 | 	mov	COUNT_, #21
2ba40     A8 00 A0 FD | 	call	#pushregs_
2ba44     09 27 02 F6 | 	mov	local01, arg01
2ba48     0A 29 02 F6 | 	mov	local02, arg02
2ba4c     0B 2B 02 F6 | 	mov	local03, arg03
2ba50     0C 2D 02 F6 | 	mov	local04, arg04
2ba54     04 2E 06 F6 | 	mov	local05, #4
2ba58     13 31 02 F6 | 	mov	local06, local01
2ba5c     00 32 06 F6 | 	mov	local07, #0
2ba60     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2ba64     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
2ba68     1A 13 02 F6 | 	mov	arg01, local08
2ba6c     14 15 02 F6 | 	mov	arg02, local02
2ba70     00 16 06 F6 | 	mov	arg03, #0
2ba74     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2ba78     B8 BD BF FD | 	call	#__system____getvfsforfile
2ba7c     FD 36 0A F6 | 	mov	local09, result1 wz
2ba80     10 00 90 AD |  if_e	jmp	#LR__3990
2ba84     20 36 06 F1 | 	add	local09, #32
2ba88     1B FB 09 FB | 	rdlong	result1, local09 wz
2ba8c     20 36 86 F1 | 	sub	local09, #32
2ba90     14 00 90 5D |  if_ne	jmp	#LR__3991
2ba94                 | LR__3990
2ba94     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ba98     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2ba9c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2baa0     01 FA 65 F6 | 	neg	result1, #1
2baa4     8C 02 90 FD | 	jmp	#LR__4004
2baa8                 | LR__3991
2baa8     18 13 02 F6 | 	mov	arg01, local06
2baac     00 14 06 F6 | 	mov	arg02, #0
2bab0     34 16 06 F6 | 	mov	arg03, #52
2bab4     09 39 02 F6 | 	mov	local10, arg01
2bab8     98 00 A0 FD | 	call	#\builtin_bytefill_
2babc     20 36 06 F1 | 	add	local09, #32
2bac0     1B 3B 02 FB | 	rdlong	local11, local09
2bac4     1D 3D 02 F6 | 	mov	local12, local11
2bac8     1D 3F 02 F6 | 	mov	local13, local11
2bacc     20 36 86 F1 | 	sub	local09, #32
2bad0     1F 41 02 F6 | 	mov	local14, local13
2bad4     13 3C 46 F7 | 	zerox	local12, #19
2bad8     14 40 46 F0 | 	shr	local14, #20
2badc     02 40 66 F0 | 	shl	local14, #2
2bae0     ED 40 02 F1 | 	add	local14, __methods__
2bae4     20 41 02 FB | 	rdlong	local14, local14
2bae8     18 43 02 F6 | 	mov	local15, local06
2baec     1A 45 02 F6 | 	mov	local16, local08
2baf0     15 47 02 F6 | 	mov	local17, local03
2baf4     21 13 02 F6 | 	mov	arg01, local15
2baf8     22 15 02 F6 | 	mov	arg02, local16
2bafc     23 17 02 F6 | 	mov	arg03, local17
2bb00     F2 48 02 F6 | 	mov	local18, objptr
2bb04     1E E5 01 F6 | 	mov	objptr, local12
2bb08     2D 40 62 FD | 	call	local14
2bb0c     24 E5 01 F6 | 	mov	objptr, local18
2bb10     FD 4A 0A F6 | 	mov	local19, result1 wz
2bb14     04 2A CE 57 |  if_ne	test	local03, #4 wz
2bb18     58 00 90 AD |  if_e	jmp	#LR__3992
2bb1c     24 36 06 F1 | 	add	local09, #36
2bb20     1B 3B 02 FB | 	rdlong	local11, local09
2bb24     1D 3D 02 F6 | 	mov	local12, local11
2bb28     1D 3F 02 F6 | 	mov	local13, local11
2bb2c     24 36 86 F1 | 	sub	local09, #36
2bb30     1F 41 02 F6 | 	mov	local14, local13
2bb34     13 3C 46 F7 | 	zerox	local12, #19
2bb38     14 40 46 F0 | 	shr	local14, #20
2bb3c     02 40 66 F0 | 	shl	local14, #2
2bb40     ED 40 02 F1 | 	add	local14, __methods__
2bb44     20 41 02 FB | 	rdlong	local14, local14
2bb48     18 43 02 F6 | 	mov	local15, local06
2bb4c     1A 45 02 F6 | 	mov	local16, local08
2bb50     16 47 02 F6 | 	mov	local17, local04
2bb54     21 13 02 F6 | 	mov	arg01, local15
2bb58     22 15 02 F6 | 	mov	arg02, local16
2bb5c     23 17 02 F6 | 	mov	arg03, local17
2bb60     F2 48 02 F6 | 	mov	local18, objptr
2bb64     1E E5 01 F6 | 	mov	objptr, local12
2bb68     2D 40 62 FD | 	call	local14
2bb6c     24 E5 01 F6 | 	mov	objptr, local18
2bb70     FD 4A 02 F6 | 	mov	local19, result1
2bb74                 | LR__3992
2bb74     00 4A 0E F2 | 	cmp	local19, #0 wz
2bb78     8C 01 90 5D |  if_ne	jmp	#LR__4002
2bb7c     15 4D 02 F6 | 	mov	local20, local03
2bb80     03 4C 0E F5 | 	and	local20, #3 wz
2bb84     02 2E 46 55 |  if_ne	or	local05, #2
2bb88     01 4C 0E F2 | 	cmp	local20, #1 wz
2bb8c     01 2E 46 55 |  if_ne	or	local05, #1
2bb90     20 2A CE F7 | 	test	local03, #32 wz
2bb94     C0 2E 46 55 |  if_ne	or	local05, #192
2bb98     08 30 06 F1 | 	add	local06, #8
2bb9c     18 2F 62 FC | 	wrlong	local05, local06
2bba0     0C 30 06 F1 | 	add	local06, #12
2bba4     18 4F 0A FB | 	rdlong	local21, local06 wz
2bba8     14 30 86 F1 | 	sub	local06, #20
2bbac     18 00 90 5D |  if_ne	jmp	#LR__3993
2bbb0     04 36 06 F1 | 	add	local09, #4
2bbb4     1B 4F 02 FB | 	rdlong	local21, local09
2bbb8     04 36 86 F1 | 	sub	local09, #4
2bbbc     14 30 06 F1 | 	add	local06, #20
2bbc0     18 4F 62 FC | 	wrlong	local21, local06
2bbc4     14 30 86 F1 | 	sub	local06, #20
2bbc8                 | LR__3993
2bbc8     18 30 06 F1 | 	add	local06, #24
2bbcc     18 4F 0A FB | 	rdlong	local21, local06 wz
2bbd0     18 30 86 F1 | 	sub	local06, #24
2bbd4     18 00 90 5D |  if_ne	jmp	#LR__3994
2bbd8     08 36 06 F1 | 	add	local09, #8
2bbdc     1B 4F 02 FB | 	rdlong	local21, local09
2bbe0     08 36 86 F1 | 	sub	local09, #8
2bbe4     18 30 06 F1 | 	add	local06, #24
2bbe8     18 4F 62 FC | 	wrlong	local21, local06
2bbec     18 30 86 F1 | 	sub	local06, #24
2bbf0                 | LR__3994
2bbf0     24 30 06 F1 | 	add	local06, #36
2bbf4     18 4F 0A FB | 	rdlong	local21, local06 wz
2bbf8     24 30 86 F1 | 	sub	local06, #36
2bbfc     1B 4F 02 AB |  if_e	rdlong	local21, local09
2bc00     24 30 06 A1 |  if_e	add	local06, #36
2bc04     18 4F 62 AC |  if_e	wrlong	local21, local06
2bc08     24 30 86 A1 |  if_e	sub	local06, #36
2bc0c     28 30 06 F1 | 	add	local06, #40
2bc10     18 4F 0A FB | 	rdlong	local21, local06 wz
2bc14     28 30 86 F1 | 	sub	local06, #40
2bc18     18 00 90 5D |  if_ne	jmp	#LR__3995
2bc1c     10 36 06 F1 | 	add	local09, #16
2bc20     1B 4F 02 FB | 	rdlong	local21, local09
2bc24     10 36 86 F1 | 	sub	local09, #16
2bc28     28 30 06 F1 | 	add	local06, #40
2bc2c     18 4F 62 FC | 	wrlong	local21, local06
2bc30     28 30 86 F1 | 	sub	local06, #40
2bc34                 | LR__3995
2bc34     30 30 06 F1 | 	add	local06, #48
2bc38     18 4F 0A FB | 	rdlong	local21, local06 wz
2bc3c     30 30 86 F1 | 	sub	local06, #48
2bc40     18 00 90 5D |  if_ne	jmp	#LR__3996
2bc44     0C 36 06 F1 | 	add	local09, #12
2bc48     1B 4F 02 FB | 	rdlong	local21, local09
2bc4c     0C 36 86 F1 | 	sub	local09, #12
2bc50     30 30 06 F1 | 	add	local06, #48
2bc54     18 4F 62 FC | 	wrlong	local21, local06
2bc58     30 30 86 F1 | 	sub	local06, #48
2bc5c                 | LR__3996
2bc5c     1C 30 06 F1 | 	add	local06, #28
2bc60     18 4F 0A FB | 	rdlong	local21, local06 wz
2bc64     1C 30 86 F1 | 	sub	local06, #28
2bc68     1C 00 90 5D |  if_ne	jmp	#LR__3997
2bc6c     01 32 06 F6 | 	mov	local07, #1
2bc70     F2 12 02 F6 | 	mov	arg01, objptr
2bc74     00 88 05 FF 
2bc78     00 12 46 F5 | 	or	arg01, ##185597952
2bc7c     1C 30 06 F1 | 	add	local06, #28
2bc80     18 13 62 FC | 	wrlong	arg01, local06
2bc84     1C 30 86 F1 | 	sub	local06, #28
2bc88                 | LR__3997
2bc88     20 30 06 F1 | 	add	local06, #32
2bc8c     18 4F 0A FB | 	rdlong	local21, local06 wz
2bc90     20 30 86 F1 | 	sub	local06, #32
2bc94     1C 00 90 5D |  if_ne	jmp	#LR__3998
2bc98     01 32 06 F6 | 	mov	local07, #1
2bc9c     F2 12 02 F6 | 	mov	arg01, objptr
2bca0     00 90 05 FF 
2bca4     00 12 46 F5 | 	or	arg01, ##186646528
2bca8     20 30 06 F1 | 	add	local06, #32
2bcac     18 13 62 FC | 	wrlong	arg01, local06
2bcb0     20 30 86 F1 | 	sub	local06, #32
2bcb4                 | LR__3998
2bcb4     2C 30 06 F1 | 	add	local06, #44
2bcb8     18 4F 0A FB | 	rdlong	local21, local06 wz
2bcbc     2C 30 86 F1 | 	sub	local06, #44
2bcc0     44 00 90 5D |  if_ne	jmp	#LR__4001
2bcc4     14 36 06 F1 | 	add	local09, #20
2bcc8     1B 4F 0A FB | 	rdlong	local21, local09 wz
2bccc     14 36 86 F1 | 	sub	local09, #20
2bcd0     18 00 90 AD |  if_e	jmp	#LR__3999
2bcd4     14 36 06 F1 | 	add	local09, #20
2bcd8     1B 4F 02 FB | 	rdlong	local21, local09
2bcdc     2C 30 06 F1 | 	add	local06, #44
2bce0     18 4F 62 FC | 	wrlong	local21, local06
2bce4     2C 30 86 F1 | 	sub	local06, #44
2bce8     1C 00 90 FD | 	jmp	#LR__4000
2bcec                 | LR__3999
2bcec     01 32 06 F6 | 	mov	local07, #1
2bcf0     F2 12 02 F6 | 	mov	arg01, objptr
2bcf4     00 98 05 FF 
2bcf8     00 12 46 F5 | 	or	arg01, ##187695104
2bcfc     2C 30 06 F1 | 	add	local06, #44
2bd00     18 13 62 FC | 	wrlong	arg01, local06
2bd04     2C 30 86 F1 | 	sub	local06, #44
2bd08                 | LR__4000
2bd08                 | LR__4001
2bd08                 | LR__4002
2bd08     00 32 0E F2 | 	cmp	local07, #0 wz
2bd0c     18 13 02 56 |  if_ne	mov	arg01, local06
2bd10     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2bd14     00 4A 0E F2 | 	cmp	local19, #0 wz
2bd18     00 12 06 A6 |  if_e	mov	arg01, #0
2bd1c     10 00 90 5D |  if_ne	jmp	#LR__4003
2bd20     00 12 4E F2 | 	cmps	arg01, #0 wz
2bd24     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bd28     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2bd2c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bd30                 | LR__4003
2bd30     25 FB 01 F6 | 	mov	result1, local19
2bd34                 | LR__4004
2bd34     A7 F0 03 F6 | 	mov	ptra, fp
2bd38     B2 00 A0 FD | 	call	#popregs_
2bd3c                 | __system___openraw_ret
2bd3c     2D 00 64 FD | 	ret
2bd40                 | 
2bd40                 | __system___closeraw
2bd40     05 4A 05 F6 | 	mov	COUNT_, #5
2bd44     A8 00 A0 FD | 	call	#pushregs_
2bd48     09 27 02 F6 | 	mov	local01, arg01
2bd4c     00 28 06 F6 | 	mov	local02, #0
2bd50     08 26 06 F1 | 	add	local01, #8
2bd54     13 FB 09 FB | 	rdlong	result1, local01 wz
2bd58     08 26 86 F1 | 	sub	local01, #8
2bd5c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bd60     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2bd64     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bd68     01 FA 65 A6 |  if_e	neg	result1, #1
2bd6c     A8 00 90 AD |  if_e	jmp	#LR__4012
2bd70     2C 26 06 F1 | 	add	local01, #44
2bd74     13 FB 09 FB | 	rdlong	result1, local01 wz
2bd78     2C 26 86 F1 | 	sub	local01, #44
2bd7c     38 00 90 AD |  if_e	jmp	#LR__4010
2bd80     2C 26 06 F1 | 	add	local01, #44
2bd84     13 2B 02 FB | 	rdlong	local03, local01
2bd88     15 2D 02 F6 | 	mov	local04, local03
2bd8c     2C 26 86 F1 | 	sub	local01, #44
2bd90     13 2C 46 F7 | 	zerox	local04, #19
2bd94     14 2A 46 F0 | 	shr	local03, #20
2bd98     02 2A 66 F0 | 	shl	local03, #2
2bd9c     ED 2A 02 F1 | 	add	local03, __methods__
2bda0     15 2B 02 FB | 	rdlong	local03, local03
2bda4     13 13 02 F6 | 	mov	arg01, local01
2bda8     F2 2E 02 F6 | 	mov	local05, objptr
2bdac     16 E5 01 F6 | 	mov	objptr, local04
2bdb0     2D 2A 62 FD | 	call	local03
2bdb4     17 E5 01 F6 | 	mov	objptr, local05
2bdb8                 | LR__4010
2bdb8     24 26 06 F1 | 	add	local01, #36
2bdbc     13 2F 0A FB | 	rdlong	local05, local01 wz
2bdc0     24 26 86 F1 | 	sub	local01, #36
2bdc4     3C 00 90 AD |  if_e	jmp	#LR__4011
2bdc8     24 26 06 F1 | 	add	local01, #36
2bdcc     13 2B 02 FB | 	rdlong	local03, local01
2bdd0     15 2D 02 F6 | 	mov	local04, local03
2bdd4     24 26 86 F1 | 	sub	local01, #36
2bdd8     13 2C 46 F7 | 	zerox	local04, #19
2bddc     14 2A 46 F0 | 	shr	local03, #20
2bde0     02 2A 66 F0 | 	shl	local03, #2
2bde4     ED 2A 02 F1 | 	add	local03, __methods__
2bde8     15 2B 02 FB | 	rdlong	local03, local03
2bdec     13 13 02 F6 | 	mov	arg01, local01
2bdf0     F2 2E 02 F6 | 	mov	local05, objptr
2bdf4     16 E5 01 F6 | 	mov	objptr, local04
2bdf8     2D 2A 62 FD | 	call	local03
2bdfc     17 E5 01 F6 | 	mov	objptr, local05
2be00     FD 28 02 F6 | 	mov	local02, result1
2be04                 | LR__4011
2be04     13 13 02 F6 | 	mov	arg01, local01
2be08     00 14 06 F6 | 	mov	arg02, #0
2be0c     34 16 06 F6 | 	mov	arg03, #52
2be10     98 00 A0 FD | 	call	#\builtin_bytefill_
2be14     14 FB 01 F6 | 	mov	result1, local02
2be18                 | LR__4012
2be18     A7 F0 03 F6 | 	mov	ptra, fp
2be1c     B2 00 A0 FD | 	call	#popregs_
2be20                 | __system___closeraw_ret
2be20     2D 00 64 FD | 	ret
2be24                 | 
2be24                 | __system___vfs_open_sdcardx
2be24     0B 4A 05 F6 | 	mov	COUNT_, #11
2be28     A8 00 A0 FD | 	call	#pushregs_
2be2c     09 2B 02 F6 | 	mov	local03, arg01
2be30     0A 2D 02 F6 | 	mov	local04, arg02
2be34     0B 2F 02 F6 | 	mov	local05, arg03
2be38     0C 31 02 F6 | 	mov	local06, arg04
2be3c     01 00 00 FF 
2be40     24 12 06 F6 | 	mov	arg01, ##548
2be44     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
2be48     FD 32 02 F6 | 	mov	local07, result1
2be4c     01 00 00 FF 
2be50     34 12 06 F6 | 	mov	arg01, ##564
2be54     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
2be58     FD 34 02 F6 | 	mov	local08, result1
2be5c     15 19 02 F6 | 	mov	arg04, local03
2be60     1F 18 C6 F0 | 	sar	arg04, #31
2be64     15 17 02 F6 | 	mov	arg03, local03
2be68     01 12 06 F6 | 	mov	arg01, #1
2be6c     00 14 06 F6 | 	mov	arg02, #0
2be70     EC DB BF FD | 	call	#__system___int64_shl
2be74     FD 26 02 F6 | 	mov	local01, result1
2be78     FE 36 02 F6 | 	mov	local09, result2
2be7c     16 19 02 F6 | 	mov	arg04, local04
2be80     1F 18 C6 F0 | 	sar	arg04, #31
2be84     16 17 02 F6 | 	mov	arg03, local04
2be88     01 12 06 F6 | 	mov	arg01, #1
2be8c     00 14 06 F6 | 	mov	arg02, #0
2be90     CC DB BF FD | 	call	#__system___int64_shl
2be94     FD 26 42 F5 | 	or	local01, result1
2be98     FE 36 42 F5 | 	or	local09, result2
2be9c     17 19 02 F6 | 	mov	arg04, local05
2bea0     1F 18 C6 F0 | 	sar	arg04, #31
2bea4     17 17 02 F6 | 	mov	arg03, local05
2bea8     01 12 06 F6 | 	mov	arg01, #1
2beac     00 14 06 F6 | 	mov	arg02, #0
2beb0     AC DB BF FD | 	call	#__system___int64_shl
2beb4     FD 26 42 F5 | 	or	local01, result1
2beb8     FE 36 42 F5 | 	or	local09, result2
2bebc     18 19 02 F6 | 	mov	arg04, local06
2bec0     1F 18 C6 F0 | 	sar	arg04, #31
2bec4     18 17 02 F6 | 	mov	arg03, local06
2bec8     01 12 06 F6 | 	mov	arg01, #1
2becc     00 14 06 F6 | 	mov	arg02, #0
2bed0     8C DB BF FD | 	call	#__system___int64_shl
2bed4     1B 15 02 F6 | 	mov	arg02, local09
2bed8     FD 26 42 F5 | 	or	local01, result1
2bedc     0A FD 41 F5 | 	or	result2, arg02
2bee0     FE 28 02 F6 | 	mov	local02, result2
2bee4     13 13 02 F6 | 	mov	arg01, local01
2bee8     14 15 02 F6 | 	mov	arg02, local02
2beec     A8 DB BF FD | 	call	#__system___usepins
2bef0     00 FA 0D F2 | 	cmp	result1, #0 wz
2bef4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bef8     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2befc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bf00     00 FA 05 A6 |  if_e	mov	result1, #0
2bf04     B4 00 90 AD |  if_e	jmp	#LR__4022
2bf08     13 39 02 F6 | 	mov	local10, local01
2bf0c     14 37 02 F6 | 	mov	local09, local02
2bf10     01 00 00 FF 
2bf14     08 32 06 F1 | 	add	local07, ##520
2bf18     19 39 62 FC | 	wrlong	local10, local07
2bf1c     04 32 06 F1 | 	add	local07, #4
2bf20     19 37 62 FC | 	wrlong	local09, local07
2bf24     01 00 00 FF 
2bf28     0C 32 86 F1 | 	sub	local07, ##524
2bf2c     18 1B 02 F6 | 	mov	arg05, local06
2bf30     00 12 06 F6 | 	mov	arg01, #0
2bf34     15 15 02 F6 | 	mov	arg02, local03
2bf38     16 17 02 F6 | 	mov	arg03, local04
2bf3c     17 19 02 F6 | 	mov	arg04, local05
2bf40     F2 38 02 F6 | 	mov	local10, objptr
2bf44     19 E5 01 F6 | 	mov	objptr, local07
2bf48     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
2bf4c     1C E5 01 F6 | 	mov	objptr, local10
2bf50     FD 3A 0A F6 | 	mov	local11, result1 wz
2bf54     24 00 90 5D |  if_ne	jmp	#LR__4020
2bf58     B6 01 00 FF 
2bf5c     12 14 06 F6 | 	mov	arg02, ##@LR__5437
2bf60     1A 13 02 F6 | 	mov	arg01, local08
2bf64     00 16 06 F6 | 	mov	arg03, #0
2bf68     F2 3A 02 F6 | 	mov	local11, objptr
2bf6c     19 E5 01 F6 | 	mov	objptr, local07
2bf70     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
2bf74     1D E5 01 F6 | 	mov	objptr, local11
2bf78     FD 3A 02 F6 | 	mov	local11, result1
2bf7c                 | LR__4020
2bf7c     00 3A 0E F2 | 	cmp	local11, #0 wz
2bf80     24 00 90 AD |  if_e	jmp	#LR__4021
2bf84     13 13 02 F6 | 	mov	arg01, local01
2bf88     14 15 02 F6 | 	mov	arg02, local02
2bf8c     5C DB BF FD | 	call	#__system___freepins
2bf90     1D 13 6A F6 | 	neg	arg01, local11 wz
2bf94     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bf98     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2bf9c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bfa0     00 FA 05 F6 | 	mov	result1, #0
2bfa4     14 00 90 FD | 	jmp	#LR__4022
2bfa8                 | LR__4021
2bfa8     19 13 02 F6 | 	mov	arg01, local07
2bfac     F2 3A 02 F6 | 	mov	local11, objptr
2bfb0     19 E5 01 F6 | 	mov	objptr, local07
2bfb4     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
2bfb8     1D E5 01 F6 | 	mov	objptr, local11
2bfbc                 | LR__4022
2bfbc     A7 F0 03 F6 | 	mov	ptra, fp
2bfc0     B2 00 A0 FD | 	call	#popregs_
2bfc4                 | __system___vfs_open_sdcardx_ret
2bfc4     2D 00 64 FD | 	ret
2bfc8                 | 
2bfc8                 | __system____default_getc
2bfc8     03 4A 05 F6 | 	mov	COUNT_, #3
2bfcc     A8 00 A0 FD | 	call	#pushregs_
2bfd0     09 27 02 F6 | 	mov	local01, arg01
2bfd4     13 29 02 FB | 	rdlong	local02, local01
2bfd8     08 28 06 F1 | 	add	local02, #8
2bfdc     14 2B 02 FB | 	rdlong	local03, local02
2bfe0     02 2A CE F7 | 	test	local03, #2 wz
2bfe4     13 13 02 56 |  if_ne	mov	arg01, local01
2bfe8     00 01 B0 5D |  if_ne	call	#__system____default_flush
2bfec     14 2B 02 FB | 	rdlong	local03, local02
2bff0     01 2A 46 F5 | 	or	local03, #1
2bff4     14 2B 62 FC | 	wrlong	local03, local02
2bff8     08 28 86 F1 | 	sub	local02, #8
2bffc     14 2B 0A FB | 	rdlong	local03, local02 wz
2c000     0C 00 90 5D |  if_ne	jmp	#LR__4030
2c004     13 13 02 F6 | 	mov	arg01, local01
2c008     68 18 B0 FD | 	call	#__system____default_filbuf
2c00c     FD 2A 02 F6 | 	mov	local03, result1
2c010                 | LR__4030
2c010     01 2A 56 F2 | 	cmps	local03, #1 wc
2c014     01 FA 65 C6 |  if_b	neg	result1, #1
2c018     1C 00 90 CD |  if_b	jmp	#LR__4031
2c01c     01 2A 86 F1 | 	sub	local03, #1
2c020     14 2B 62 FC | 	wrlong	local03, local02
2c024     04 28 06 F1 | 	add	local02, #4
2c028     14 2B 02 FB | 	rdlong	local03, local02
2c02c     15 FB C1 FA | 	rdbyte	result1, local03
2c030     01 2A 06 F1 | 	add	local03, #1
2c034     14 2B 62 FC | 	wrlong	local03, local02
2c038                 | LR__4031
2c038     A7 F0 03 F6 | 	mov	ptra, fp
2c03c     B2 00 A0 FD | 	call	#popregs_
2c040                 | __system____default_getc_ret
2c040     2D 00 64 FD | 	ret
2c044                 | 
2c044                 | __system____default_putc
2c044     06 4A 05 F6 | 	mov	COUNT_, #6
2c048     A8 00 A0 FD | 	call	#pushregs_
2c04c     09 27 02 F6 | 	mov	local01, arg01
2c050     0A 29 02 F6 | 	mov	local02, arg02
2c054     14 2B 02 FB | 	rdlong	local03, local02
2c058     08 2A 06 F1 | 	add	local03, #8
2c05c     15 FB 01 FB | 	rdlong	result1, local03
2c060     01 FA CD F7 | 	test	result1, #1 wz
2c064     14 13 02 56 |  if_ne	mov	arg01, local02
2c068     80 00 B0 5D |  if_ne	call	#__system____default_flush
2c06c     15 2D 02 FB | 	rdlong	local04, local03
2c070     02 2C 46 F5 | 	or	local04, #2
2c074     15 2D 62 FC | 	wrlong	local04, local03
2c078     08 2A 86 F1 | 	sub	local03, #8
2c07c     15 2F 02 FB | 	rdlong	local05, local03
2c080     10 2A 06 F1 | 	add	local03, #16
2c084     15 15 02 FB | 	rdlong	arg02, local03
2c088     10 2A 86 F1 | 	sub	local03, #16
2c08c     17 FB 01 F6 | 	mov	result1, local05
2c090     0A FB 01 F1 | 	add	result1, arg02
2c094     FD 26 42 FC | 	wrbyte	local01, result1
2c098     13 27 E2 F8 | 	getbyte	local01, local01, #0
2c09c     01 2E 06 F1 | 	add	local05, #1
2c0a0     15 2F 62 FC | 	wrlong	local05, local03
2c0a4     06 28 06 F1 | 	add	local02, #6
2c0a8     14 31 EA FA | 	rdword	local06, local02 wz
2c0ac     06 28 86 F1 | 	sub	local02, #6
2c0b0     0C 2A 06 51 |  if_ne	add	local03, #12
2c0b4     15 2D 02 5B |  if_ne	rdlong	local04, local03
2c0b8     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
2c0bc     0C 00 90 AD |  if_e	jmp	#LR__4040
2c0c0     0A 26 0E F2 | 	cmp	local01, #10 wz
2c0c4     01 30 0E A2 |  if_e	cmp	local06, #1 wz
2c0c8     10 00 90 5D |  if_ne	jmp	#LR__4041
2c0cc                 | LR__4040
2c0cc     14 13 02 F6 | 	mov	arg01, local02
2c0d0     18 00 B0 FD | 	call	#__system____default_flush
2c0d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c0d8     01 26 66 56 |  if_ne	neg	local01, #1
2c0dc                 | LR__4041
2c0dc     13 FB 01 F6 | 	mov	result1, local01
2c0e0     A7 F0 03 F6 | 	mov	ptra, fp
2c0e4     B2 00 A0 FD | 	call	#popregs_
2c0e8                 | __system____default_putc_ret
2c0e8     2D 00 64 FD | 	ret
2c0ec                 | 
2c0ec                 | __system____default_flush
2c0ec     06 4A 05 F6 | 	mov	COUNT_, #6
2c0f0     A8 00 A0 FD | 	call	#pushregs_
2c0f4     09 27 02 F6 | 	mov	local01, arg01
2c0f8     13 29 02 FB | 	rdlong	local02, local01
2c0fc     14 2B 02 FB | 	rdlong	local03, local02
2c100     08 28 06 F1 | 	add	local02, #8
2c104     14 FB 01 FB | 	rdlong	result1, local02
2c108     08 28 86 F1 | 	sub	local02, #8
2c10c     02 FA CD F7 | 	test	result1, #2 wz
2c110     D0 00 90 AD |  if_e	jmp	#LR__4052
2c114     01 2A 56 F2 | 	cmps	local03, #1 wc
2c118     20 01 90 CD |  if_b	jmp	#LR__4054
2c11c     08 26 06 F1 | 	add	local01, #8
2c120     13 FB 01 FB | 	rdlong	result1, local01
2c124     08 26 86 F1 | 	sub	local01, #8
2c128     40 FA CD F7 | 	test	result1, #64 wz
2c12c     68 00 90 AD |  if_e	jmp	#LR__4051
2c130     08 26 06 F1 | 	add	local01, #8
2c134     13 17 02 FB | 	rdlong	arg03, local01
2c138     08 26 86 F1 | 	sub	local01, #8
2c13c     80 16 CE F7 | 	test	arg03, #128 wz
2c140     54 00 90 AD |  if_e	jmp	#LR__4050
2c144     30 26 06 F1 | 	add	local01, #48
2c148     13 2D 02 FB | 	rdlong	local04, local01
2c14c     16 2F 02 F6 | 	mov	local05, local04
2c150     30 26 86 F1 | 	sub	local01, #48
2c154     13 2E 46 F7 | 	zerox	local05, #19
2c158     14 2C 46 F0 | 	shr	local04, #20
2c15c     02 2C 66 F0 | 	shl	local04, #2
2c160     ED 2C 02 F1 | 	add	local04, __methods__
2c164     16 2D 02 FB | 	rdlong	local04, local04
2c168     13 13 02 F6 | 	mov	arg01, local01
2c16c     00 14 06 F6 | 	mov	arg02, #0
2c170     02 16 06 F6 | 	mov	arg03, #2
2c174     F2 30 02 F6 | 	mov	local06, objptr
2c178     17 E5 01 F6 | 	mov	objptr, local05
2c17c     2D 2C 62 FD | 	call	local04
2c180     18 E5 01 F6 | 	mov	objptr, local06
2c184     08 26 06 F1 | 	add	local01, #8
2c188     13 31 02 FB | 	rdlong	local06, local01
2c18c     80 30 26 F5 | 	andn	local06, #128
2c190     13 31 62 FC | 	wrlong	local06, local01
2c194     08 26 86 F1 | 	sub	local01, #8
2c198                 | LR__4050
2c198                 | LR__4051
2c198     18 26 06 F1 | 	add	local01, #24
2c19c     13 2D 02 FB | 	rdlong	local04, local01
2c1a0     16 2F 02 F6 | 	mov	local05, local04
2c1a4     18 26 86 F1 | 	sub	local01, #24
2c1a8     13 2E 46 F7 | 	zerox	local05, #19
2c1ac     14 2C 46 F0 | 	shr	local04, #20
2c1b0     02 2C 66 F0 | 	shl	local04, #2
2c1b4     ED 2C 02 F1 | 	add	local04, __methods__
2c1b8     16 2D 02 FB | 	rdlong	local04, local04
2c1bc     10 28 06 F1 | 	add	local02, #16
2c1c0     14 15 02 FB | 	rdlong	arg02, local02
2c1c4     10 28 86 F1 | 	sub	local02, #16
2c1c8     13 13 02 F6 | 	mov	arg01, local01
2c1cc     15 17 02 F6 | 	mov	arg03, local03
2c1d0     F2 30 02 F6 | 	mov	local06, objptr
2c1d4     17 E5 01 F6 | 	mov	objptr, local05
2c1d8     2D 2C 62 FD | 	call	local04
2c1dc     18 E5 01 F6 | 	mov	objptr, local06
2c1e0     58 00 90 FD | 	jmp	#LR__4054
2c1e4                 | LR__4052
2c1e4     08 28 06 F1 | 	add	local02, #8
2c1e8     14 31 02 FB | 	rdlong	local06, local02
2c1ec     08 28 86 F1 | 	sub	local02, #8
2c1f0     01 30 CE F7 | 	test	local06, #1 wz
2c1f4     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2c1f8     40 00 90 AD |  if_e	jmp	#LR__4053
2c1fc     30 26 06 F1 | 	add	local01, #48
2c200     13 2D 02 FB | 	rdlong	local04, local01
2c204     16 2F 02 F6 | 	mov	local05, local04
2c208     30 26 86 F1 | 	sub	local01, #48
2c20c     13 2E 46 F7 | 	zerox	local05, #19
2c210     14 2C 46 F0 | 	shr	local04, #20
2c214     02 2C 66 F0 | 	shl	local04, #2
2c218     ED 2C 02 F1 | 	add	local04, __methods__
2c21c     16 2D 02 FB | 	rdlong	local04, local04
2c220     13 13 02 F6 | 	mov	arg01, local01
2c224     15 15 62 F6 | 	neg	arg02, local03
2c228     01 16 06 F6 | 	mov	arg03, #1
2c22c     F2 30 02 F6 | 	mov	local06, objptr
2c230     17 E5 01 F6 | 	mov	objptr, local05
2c234     2D 2C 62 FD | 	call	local04
2c238     18 E5 01 F6 | 	mov	objptr, local06
2c23c                 | LR__4053
2c23c                 | LR__4054
2c23c     14 01 68 FC | 	wrlong	#0, local02
2c240     04 28 06 F1 | 	add	local02, #4
2c244     14 01 68 FC | 	wrlong	#0, local02
2c248     04 28 06 F1 | 	add	local02, #4
2c24c     14 01 68 FC | 	wrlong	#0, local02
2c250     00 FA 05 F6 | 	mov	result1, #0
2c254     A7 F0 03 F6 | 	mov	ptra, fp
2c258     B2 00 A0 FD | 	call	#popregs_
2c25c                 | __system____default_flush_ret
2c25c     2D 00 64 FD | 	ret
2c260                 | 
2c260                 | __system____default_buffer_init
2c260     02 4A 05 F6 | 	mov	COUNT_, #2
2c264     A8 00 A0 FD | 	call	#pushregs_
2c268     09 27 02 F6 | 	mov	local01, arg01
2c26c     13 29 02 FB | 	rdlong	local02, local01
2c270     13 13 02 F6 | 	mov	arg01, local01
2c274     34 03 B0 FD | 	call	#__system___isatty
2c278     00 FA 0D F2 | 	cmp	result1, #0 wz
2c27c     06 26 06 51 |  if_ne	add	local01, #6
2c280     13 0B 58 5C |  if_ne	wrword	#5, local01
2c284     06 26 06 A1 |  if_e	add	local01, #6
2c288     13 0D 58 AC |  if_e	wrword	#6, local01
2c28c     14 28 06 F1 | 	add	local02, #20
2c290     14 27 02 F6 | 	mov	local01, local02
2c294     04 28 86 F1 | 	sub	local02, #4
2c298     14 27 62 FC | 	wrlong	local01, local02
2c29c     04 28 86 F1 | 	sub	local02, #4
2c2a0     02 00 80 FF 
2c2a4     14 01 68 FC | 	wrlong	##1024, local02
2c2a8     00 FA 05 F6 | 	mov	result1, #0
2c2ac     A7 F0 03 F6 | 	mov	ptra, fp
2c2b0     B2 00 A0 FD | 	call	#popregs_
2c2b4                 | __system____default_buffer_init_ret
2c2b4     2D 00 64 FD | 	ret
2c2b8                 | 
2c2b8                 | __system__stat
2c2b8     04 4A 05 F6 | 	mov	COUNT_, #4
2c2bc     A8 00 A0 FD | 	call	#pushregs_
2c2c0     0A 27 02 F6 | 	mov	local01, arg02
2c2c4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2c2c8     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2c2cc     09 15 02 F6 | 	mov	arg02, arg01
2c2d0     14 13 02 F6 | 	mov	arg01, local02
2c2d4     00 16 06 F6 | 	mov	arg03, #0
2c2d8     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2c2dc     54 B5 BF FD | 	call	#__system____getvfsforfile
2c2e0     FD 2A 0A F6 | 	mov	local03, result1 wz
2c2e4     10 00 90 AD |  if_e	jmp	#LR__4060
2c2e8     34 2A 06 F1 | 	add	local03, #52
2c2ec     15 17 0A FB | 	rdlong	arg03, local03 wz
2c2f0     34 2A 86 F1 | 	sub	local03, #52
2c2f4     14 00 90 5D |  if_ne	jmp	#LR__4061
2c2f8                 | LR__4060
2c2f8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c2fc     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2c300     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c304     01 FA 65 F6 | 	neg	result1, #1
2c308     68 00 90 FD | 	jmp	#LR__4062
2c30c                 | LR__4061
2c30c     13 13 02 F6 | 	mov	arg01, local01
2c310     00 14 06 F6 | 	mov	arg02, #0
2c314     30 16 06 F6 | 	mov	arg03, #48
2c318     09 2D 02 F6 | 	mov	local04, arg01
2c31c     98 00 A0 FD | 	call	#\builtin_bytefill_
2c320     16 FB 01 F6 | 	mov	result1, local04
2c324     14 13 CA FA | 	rdbyte	arg01, local02 wz
2c328     08 26 06 A1 |  if_e	add	local01, #8
2c32c     08 00 80 AF 
2c330     13 FF 6B AC |  if_e	wrlong	##4607, local01
2c334     00 FA 05 A6 |  if_e	mov	result1, #0
2c338     38 00 90 AD |  if_e	jmp	#LR__4062
2c33c     34 2A 06 F1 | 	add	local03, #52
2c340     15 2B 02 FB | 	rdlong	local03, local03
2c344     15 2D 02 F6 | 	mov	local04, local03
2c348     13 2A 46 F7 | 	zerox	local03, #19
2c34c     14 2C 46 F0 | 	shr	local04, #20
2c350     02 2C 66 F0 | 	shl	local04, #2
2c354     ED 2C 02 F1 | 	add	local04, __methods__
2c358     16 2D 02 FB | 	rdlong	local04, local04
2c35c     14 13 02 F6 | 	mov	arg01, local02
2c360     13 15 02 F6 | 	mov	arg02, local01
2c364     F2 28 02 F6 | 	mov	local02, objptr
2c368     15 E5 01 F6 | 	mov	objptr, local03
2c36c     2D 2C 62 FD | 	call	local04
2c370     14 E5 01 F6 | 	mov	objptr, local02
2c374                 | LR__4062
2c374     A7 F0 03 F6 | 	mov	ptra, fp
2c378     B2 00 A0 FD | 	call	#popregs_
2c37c                 | __system__stat_ret
2c37c     2D 00 64 FD | 	ret
2c380                 | 
2c380                 | __system__write
2c380     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c384     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c388     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2c38c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c390     01 FA 65 36 |  if_ae	neg	result1, #1
2c394     20 00 90 3D |  if_ae	jmp	#LR__4070
2c398     34 12 06 FD | 	qmul	arg01, #52
2c39c     02 00 00 FF 
2c3a0     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2c3a4     18 12 62 FD | 	getqx	arg01
2c3a8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2c3ac     02 00 00 FF 
2c3b0     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2c3b4     0C 10 B0 FD | 	call	#__system___vfswrite
2c3b8                 | LR__4070
2c3b8                 | __system__write_ret
2c3b8     2D 00 64 FD | 	ret
2c3bc                 | 
2c3bc                 | __system__read
2c3bc     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c3c0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c3c4     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2c3c8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c3cc     01 FA 65 36 |  if_ae	neg	result1, #1
2c3d0     20 00 90 3D |  if_ae	jmp	#LR__4080
2c3d4     34 12 06 FD | 	qmul	arg01, #52
2c3d8     02 00 00 FF 
2c3dc     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2c3e0     18 12 62 FD | 	getqx	arg01
2c3e4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2c3e8     02 00 00 FF 
2c3ec     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2c3f0     98 11 B0 FD | 	call	#__system___vfsread
2c3f4                 | LR__4080
2c3f4                 | __system__read_ret
2c3f4     2D 00 64 FD | 	ret
2c3f8                 | 
2c3f8                 | __system__close
2c3f8     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c3fc     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c400     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2c404     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c408     01 FA 65 36 |  if_ae	neg	result1, #1
2c40c     20 00 90 3D |  if_ae	jmp	#LR__4090
2c410     34 12 06 FD | 	qmul	arg01, #52
2c414     02 00 00 FF 
2c418     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2c41c     18 12 62 FD | 	getqx	arg01
2c420     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2c424     02 00 00 FF 
2c428     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2c42c     10 F9 BF FD | 	call	#__system___closeraw
2c430                 | LR__4090
2c430                 | __system__close_ret
2c430     2D 00 64 FD | 	ret
2c434                 | 
2c434                 | __system__lseek
2c434     06 4A 05 F6 | 	mov	COUNT_, #6
2c438     A8 00 A0 FD | 	call	#pushregs_
2c43c     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c440     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2c444     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2c448     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2c44c     01 FA 65 36 |  if_ae	neg	result1, #1
2c450     C4 00 90 3D |  if_ae	jmp	#LR__4101
2c454     34 12 06 FD | 	qmul	arg01, #52
2c458     02 00 00 FF 
2c45c     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2c460     18 26 62 FD | 	getqx	local01
2c464     F3 26 02 F1 | 	add	local01, ptr___system__dat__
2c468     30 26 06 F1 | 	add	local01, #48
2c46c     13 13 0A FB | 	rdlong	arg01, local01 wz
2c470     30 26 86 F1 | 	sub	local01, #48
2c474     02 00 00 FF 
2c478     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2c47c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c480     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2c484     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c488     01 FA 65 A6 |  if_e	neg	result1, #1
2c48c     88 00 90 AD |  if_e	jmp	#LR__4101
2c490     08 26 06 F1 | 	add	local01, #8
2c494     13 29 02 FB | 	rdlong	local02, local01
2c498     08 26 86 F1 | 	sub	local01, #8
2c49c     40 28 CE F7 | 	test	local02, #64 wz
2c4a0     08 26 06 51 |  if_ne	add	local01, #8
2c4a4     13 29 02 5B |  if_ne	rdlong	local02, local01
2c4a8     80 28 46 55 |  if_ne	or	local02, #128
2c4ac     13 29 62 5C |  if_ne	wrlong	local02, local01
2c4b0     08 26 86 51 |  if_ne	sub	local01, #8
2c4b4     30 26 06 F1 | 	add	local01, #48
2c4b8     13 2B 02 FB | 	rdlong	local03, local01
2c4bc     15 2D 02 F6 | 	mov	local04, local03
2c4c0     30 26 86 F1 | 	sub	local01, #48
2c4c4     13 2C 46 F7 | 	zerox	local04, #19
2c4c8     14 2A 46 F0 | 	shr	local03, #20
2c4cc     02 2A 66 F0 | 	shl	local03, #2
2c4d0     ED 2A 02 F1 | 	add	local03, __methods__
2c4d4     15 2B 02 FB | 	rdlong	local03, local03
2c4d8     13 13 02 F6 | 	mov	arg01, local01
2c4dc     F2 2E 02 F6 | 	mov	local05, objptr
2c4e0     16 E5 01 F6 | 	mov	objptr, local04
2c4e4     2D 2A 62 FD | 	call	local03
2c4e8     17 E5 01 F6 | 	mov	objptr, local05
2c4ec     FD 30 02 F6 | 	mov	local06, result1
2c4f0     00 30 56 F2 | 	cmps	local06, #0 wc
2c4f4     1C 00 90 3D |  if_ae	jmp	#LR__4100
2c4f8     18 13 6A F6 | 	neg	arg01, local06 wz
2c4fc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c500     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2c504     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c508     01 FA 65 56 |  if_ne	neg	result1, #1
2c50c     00 FA 05 A6 |  if_e	mov	result1, #0
2c510     04 00 90 FD | 	jmp	#LR__4101
2c514                 | LR__4100
2c514     18 FB 01 F6 | 	mov	result1, local06
2c518                 | LR__4101
2c518     A7 F0 03 F6 | 	mov	ptra, fp
2c51c     B2 00 A0 FD | 	call	#popregs_
2c520                 | __system__lseek_ret
2c520     2D 00 64 FD | 	ret
2c524                 | 
2c524                 | __system___ioctl
2c524     03 4A 05 F6 | 	mov	COUNT_, #3
2c528     A8 00 A0 FD | 	call	#pushregs_
2c52c     00 12 4E F2 | 	cmps	arg01, #0 wz
2c530     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c534     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2c538     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c53c     01 FA 65 A6 |  if_e	neg	result1, #1
2c540     5C 00 90 AD |  if_e	jmp	#LR__4111
2c544     28 12 06 F1 | 	add	arg01, #40
2c548     09 27 02 FB | 	rdlong	local01, arg01
2c54c     13 29 02 F6 | 	mov	local02, local01
2c550     28 12 86 F1 | 	sub	arg01, #40
2c554     13 28 46 F7 | 	zerox	local02, #19
2c558     14 26 46 F0 | 	shr	local01, #20
2c55c     02 26 66 F0 | 	shl	local01, #2
2c560     ED 26 02 F1 | 	add	local01, __methods__
2c564     13 27 02 FB | 	rdlong	local01, local01
2c568     F2 2A 02 F6 | 	mov	local03, objptr
2c56c     14 E5 01 F6 | 	mov	objptr, local02
2c570     2D 26 62 FD | 	call	local01
2c574     15 E5 01 F6 | 	mov	objptr, local03
2c578     FD 12 0A F6 | 	mov	arg01, result1 wz
2c57c     1C 00 90 AD |  if_e	jmp	#LR__4110
2c580     00 12 4E F2 | 	cmps	arg01, #0 wz
2c584     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c588     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2c58c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c590     01 FA 65 56 |  if_ne	neg	result1, #1
2c594     00 FA 05 A6 |  if_e	mov	result1, #0
2c598     04 00 90 FD | 	jmp	#LR__4111
2c59c                 | LR__4110
2c59c     00 FA 05 F6 | 	mov	result1, #0
2c5a0                 | LR__4111
2c5a0     A7 F0 03 F6 | 	mov	ptra, fp
2c5a4     B2 00 A0 FD | 	call	#popregs_
2c5a8                 | __system___ioctl_ret
2c5a8     2D 00 64 FD | 	ret
2c5ac                 | 
2c5ac                 | __system___isatty
2c5ac     00 4A 05 F6 | 	mov	COUNT_, #0
2c5b0     A8 00 A0 FD | 	call	#pushregs_
2c5b4     0C F0 07 F1 | 	add	ptra, #12
2c5b8     04 4E 05 F1 | 	add	fp, #4
2c5bc     A7 12 62 FC | 	wrlong	arg01, fp
2c5c0     04 4E 05 F1 | 	add	fp, #4
2c5c4     A7 16 02 F6 | 	mov	arg03, fp
2c5c8     08 4E 85 F1 | 	sub	fp, #8
2c5cc     00 15 06 F6 | 	mov	arg02, #256
2c5d0     50 FF BF FD | 	call	#__system___ioctl
2c5d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c5d8     01 FA 05 A6 |  if_e	mov	result1, #1
2c5dc     00 FA 05 56 |  if_ne	mov	result1, #0
2c5e0     A7 F0 03 F6 | 	mov	ptra, fp
2c5e4     B2 00 A0 FD | 	call	#popregs_
2c5e8                 | __system___isatty_ret
2c5e8     2D 00 64 FD | 	ret
2c5ec                 | 
2c5ec                 | __system____getftab
2c5ec     0A 12 16 F2 | 	cmp	arg01, #10 wc
2c5f0     34 12 06 CD |  if_b	qmul	arg01, #52
2c5f4     00 FA 05 36 |  if_ae	mov	result1, #0
2c5f8     02 00 00 CF 
2c5fc     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
2c600     18 FA 61 CD |  if_b	getqx	result1
2c604     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2c608     02 00 00 CF 
2c60c     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
2c610                 | __system____getftab_ret
2c610     2D 00 64 FD | 	ret
2c614                 | 
2c614                 | __system__strncpy
2c614     09 01 02 F6 | 	mov	_var01, arg01
2c618                 | LR__4120
2c618     01 16 86 F1 | 	sub	arg03, #1
2c61c     00 16 56 F2 | 	cmps	arg03, #0 wc
2c620     18 00 90 CD |  if_b	jmp	#LR__4121
2c624     0A FB C1 FA | 	rdbyte	result1, arg02
2c628     00 FB 41 FC | 	wrbyte	result1, _var01
2c62c     01 14 06 F1 | 	add	arg02, #1
2c630     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2c634     01 00 06 F1 | 	add	_var01, #1
2c638     DC FF 9F 5D |  if_ne	jmp	#LR__4120
2c63c                 | LR__4121
2c63c     97 0C 48 FB | 	callpa	#(@LR__4123-@LR__4122)>>2,fcache_load_ptr_
2c640                 | LR__4122
2c640     01 16 86 F1 | 	sub	arg03, #1
2c644     00 16 56 F2 | 	cmps	arg03, #0 wc
2c648     00 03 02 36 |  if_ae	mov	_var02, _var01
2c64c     01 00 06 31 |  if_ae	add	_var01, #1
2c650     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2c654     E8 FF 9F 3D |  if_ae	jmp	#LR__4122
2c658                 | LR__4123
2c658     09 FB 01 F6 | 	mov	result1, arg01
2c65c                 | __system__strncpy_ret
2c65c     2D 00 64 FD | 	ret
2c660                 | 
2c660                 | __system__strncat
2c660     00 14 4E F2 | 	cmps	arg02, #0 wz
2c664     50 00 90 AD |  if_e	jmp	#LR__4134
2c668     01 16 16 F2 | 	cmp	arg03, #1 wc
2c66c     48 00 90 CD |  if_b	jmp	#LR__4134
2c670     09 01 02 F6 | 	mov	_var01, arg01
2c674     97 1E 48 FB | 	callpa	#(@LR__4132-@LR__4130)>>2,fcache_load_ptr_
2c678                 | LR__4130
2c678     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2c67c     01 00 06 51 |  if_ne	add	_var01, #1
2c680     F4 FF 9F 5D |  if_ne	jmp	#LR__4130
2c684     0B 03 02 F6 | 	mov	_var02, arg03
2c688                 | LR__4131
2c688     0A 05 C2 FA | 	rdbyte	_var03, arg02
2c68c     02 07 02 F6 | 	mov	_var04, _var03
2c690     07 06 4E F7 | 	zerox	_var04, #7 wz
2c694     01 14 06 F1 | 	add	arg02, #1
2c698     18 00 90 AD |  if_e	jmp	#LR__4133
2c69c     01 02 86 F1 | 	sub	_var02, #1
2c6a0     00 02 56 F2 | 	cmps	_var02, #0 wc
2c6a4     00 07 02 36 |  if_ae	mov	_var04, _var01
2c6a8     01 00 06 31 |  if_ae	add	_var01, #1
2c6ac     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
2c6b0     D4 FF 9F 3D |  if_ae	jmp	#LR__4131
2c6b4                 | LR__4132
2c6b4                 | LR__4133
2c6b4     00 01 48 FC | 	wrbyte	#0, _var01
2c6b8                 | LR__4134
2c6b8     09 FB 01 F6 | 	mov	result1, arg01
2c6bc                 | __system__strncat_ret
2c6bc     2D 00 64 FD | 	ret
2c6c0                 | 
2c6c0                 | __system__strncmp
2c6c0     09 01 0A F6 | 	mov	_var01, arg01 wz
2c6c4     14 00 90 5D |  if_ne	jmp	#LR__4140
2c6c8     00 14 0E F2 | 	cmp	arg02, #0 wz
2c6cc     01 02 66 56 |  if_ne	neg	_var02, #1
2c6d0     00 02 06 A6 |  if_e	mov	_var02, #0
2c6d4     01 FB 01 F6 | 	mov	result1, _var02
2c6d8     74 00 90 FD | 	jmp	#__system__strncmp_ret
2c6dc                 | LR__4140
2c6dc     00 14 0E F2 | 	cmp	arg02, #0 wz
2c6e0     01 FA 05 A6 |  if_e	mov	result1, #1
2c6e4     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2c6e8     0B 05 02 F6 | 	mov	_var03, arg03
2c6ec     97 16 48 FB | 	callpa	#(@LR__4142-@LR__4141)>>2,fcache_load_ptr_
2c6f0                 | LR__4141
2c6f0     00 07 C2 FA | 	rdbyte	_var04, _var01
2c6f4     0A 09 02 F6 | 	mov	_var05, arg02
2c6f8     04 0B C2 FA | 	rdbyte	_var06, _var05
2c6fc     01 04 86 F1 | 	sub	_var03, #1
2c700     00 04 56 F2 | 	cmps	_var03, #0 wc
2c704     01 00 06 F1 | 	add	_var01, #1
2c708     01 14 06 F1 | 	add	arg02, #1
2c70c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2c710     08 00 90 2D |  if_nc_and_z	jmp	#LR__4143
2c714     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2c718     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4141
2c71c                 | LR__4142
2c71c                 | LR__4143
2c71c     00 04 56 F2 | 	cmps	_var03, #0 wc
2c720     00 FA 05 C6 |  if_b	mov	result1, #0
2c724     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2c728     05 07 0A F2 | 	cmp	_var04, _var06 wz
2c72c     00 FA 05 A6 |  if_e	mov	result1, #0
2c730     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2c734     00 06 0E F2 | 	cmp	_var04, #0 wz
2c738     01 FA 65 A6 |  if_e	neg	result1, #1
2c73c     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2c740     00 0A 0E F2 | 	cmp	_var06, #0 wz
2c744     01 FA 05 A6 |  if_e	mov	result1, #1
2c748     03 FB 01 56 |  if_ne	mov	result1, _var04
2c74c     05 FB 81 51 |  if_ne	sub	result1, _var06
2c750                 | __system__strncmp_ret
2c750     2D 00 64 FD | 	ret
2c754                 | 
2c754                 | __system____root_opendir
2c754     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2c758     04 12 06 F1 | 	add	arg01, #4
2c75c     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
2c760     00 FA 05 F6 | 	mov	result1, #0
2c764     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2c768                 | __system____root_opendir_ret
2c768     2D 00 64 FD | 	ret
2c76c                 | 
2c76c                 | __system____root_readdir
2c76c     03 4A 05 F6 | 	mov	COUNT_, #3
2c770     A8 00 A0 FD | 	call	#pushregs_
2c774     09 27 02 F6 | 	mov	local01, arg01
2c778     0A 29 02 F6 | 	mov	local02, arg02
2c77c     04 26 06 F1 | 	add	local01, #4
2c780     13 2B 02 FB | 	rdlong	local03, local01
2c784     04 26 86 F1 | 	sub	local01, #4
2c788                 | LR__4150
2c788     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2c78c     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
2c790     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2c794     01 FA 65 A6 |  if_e	neg	result1, #1
2c798     48 00 90 AD |  if_e	jmp	#LR__4151
2c79c     15 17 0A FB | 	rdlong	arg03, local03 wz
2c7a0     04 2A 06 A1 |  if_e	add	local03, #4
2c7a4     E0 FF 9F AD |  if_e	jmp	#LR__4150
2c7a8     15 15 02 FB | 	rdlong	arg02, local03
2c7ac     01 14 06 F1 | 	add	arg02, #1
2c7b0     14 13 02 F6 | 	mov	arg01, local02
2c7b4     40 16 06 F6 | 	mov	arg03, #64
2c7b8     58 FE BF FD | 	call	#__system__strncpy
2c7bc     50 28 06 F1 | 	add	local02, #80
2c7c0     14 03 48 FC | 	wrbyte	#1, local02
2c7c4     08 28 86 F1 | 	sub	local02, #8
2c7c8     14 01 68 FC | 	wrlong	#0, local02
2c7cc     04 28 06 F1 | 	add	local02, #4
2c7d0     14 01 68 FC | 	wrlong	#0, local02
2c7d4     04 2A 06 F1 | 	add	local03, #4
2c7d8     04 26 06 F1 | 	add	local01, #4
2c7dc     13 2B 62 FC | 	wrlong	local03, local01
2c7e0     00 FA 05 F6 | 	mov	result1, #0
2c7e4                 | LR__4151
2c7e4     A7 F0 03 F6 | 	mov	ptra, fp
2c7e8     B2 00 A0 FD | 	call	#popregs_
2c7ec                 | __system____root_readdir_ret
2c7ec     2D 00 64 FD | 	ret
2c7f0                 | 
2c7f0                 | __system____root_closedir
2c7f0     00 FA 05 F6 | 	mov	result1, #0
2c7f4                 | __system____root_closedir_ret
2c7f4     2D 00 64 FD | 	ret
2c7f8                 | 
2c7f8                 | __system____root_stat
2c7f8     0A 01 02 F6 | 	mov	_var01, arg02
2c7fc     00 13 02 F6 | 	mov	arg01, _var01
2c800     00 14 06 F6 | 	mov	arg02, #0
2c804     30 16 06 F6 | 	mov	arg03, #48
2c808     98 00 A0 FD | 	call	#\builtin_bytefill_
2c80c     08 00 06 F1 | 	add	_var01, #8
2c810     08 00 80 FF 
2c814     00 FF 6B FC | 	wrlong	##4607, _var01
2c818     00 FA 05 F6 | 	mov	result1, #0
2c81c                 | __system____root_stat_ret
2c81c     2D 00 64 FD | 	ret
2c820                 | 
2c820                 | __system___normalizeName
2c820     00 00 06 F6 | 	mov	_var01, #0
2c824     09 03 02 F6 | 	mov	_var02, arg01
2c828     01 05 02 F6 | 	mov	_var03, _var02
2c82c                 | LR__4160
2c82c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2c830     5C 01 90 AD |  if_e	jmp	#LR__4179
2c834     00 00 0E F2 | 	cmp	_var01, #0 wz
2c838     02 07 02 56 |  if_ne	mov	_var04, _var03
2c83c     01 04 06 51 |  if_ne	add	_var03, #1
2c840     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2c844     00 00 06 56 |  if_ne	mov	_var01, #0
2c848     01 07 C2 FA | 	rdbyte	_var04, _var02
2c84c     2E 06 0E F2 | 	cmp	_var04, #46 wz
2c850     D8 00 90 5D |  if_ne	jmp	#LR__4172
2c854     01 02 06 F1 | 	add	_var02, #1
2c858     01 07 C2 FA | 	rdbyte	_var04, _var02
2c85c     01 02 86 F1 | 	sub	_var02, #1
2c860     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c864     18 00 90 AD |  if_e	jmp	#LR__4161
2c868     01 02 06 F1 | 	add	_var02, #1
2c86c     01 09 C2 FA | 	rdbyte	_var05, _var02
2c870     01 02 86 F1 | 	sub	_var02, #1
2c874     04 0B 02 F6 | 	mov	_var06, _var05
2c878     07 0A 4E F7 | 	zerox	_var06, #7 wz
2c87c     10 00 90 5D |  if_ne	jmp	#LR__4162
2c880                 | LR__4161
2c880     01 0D 02 F6 | 	mov	_var07, _var02
2c884     01 0C 06 F1 | 	add	_var07, #1
2c888     06 03 02 F6 | 	mov	_var02, _var07
2c88c     E0 00 90 FD | 	jmp	#LR__4176
2c890                 | LR__4162
2c890     01 02 06 F1 | 	add	_var02, #1
2c894     01 0D C2 FA | 	rdbyte	_var07, _var02
2c898     01 02 86 F1 | 	sub	_var02, #1
2c89c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2c8a0     2E 06 0E F2 | 	cmp	_var04, #46 wz
2c8a4     84 00 90 5D |  if_ne	jmp	#LR__4171
2c8a8     02 02 06 F1 | 	add	_var02, #2
2c8ac     01 0D C2 FA | 	rdbyte	_var07, _var02
2c8b0     02 02 86 F1 | 	sub	_var02, #2
2c8b4     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2c8b8     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c8bc     18 00 90 AD |  if_e	jmp	#LR__4163
2c8c0     02 02 06 F1 | 	add	_var02, #2
2c8c4     01 09 C2 FA | 	rdbyte	_var05, _var02
2c8c8     02 02 86 F1 | 	sub	_var02, #2
2c8cc     04 0B 02 F6 | 	mov	_var06, _var05
2c8d0     07 0A 4E F7 | 	zerox	_var06, #7 wz
2c8d4     54 00 90 5D |  if_ne	jmp	#LR__4170
2c8d8                 | LR__4163
2c8d8     02 02 06 F1 | 	add	_var02, #2
2c8dc     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2c8e0     40 00 90 ED |  if_be	jmp	#LR__4169
2c8e4     02 0F 02 F6 | 	mov	_var08, _var03
2c8e8     01 0E 86 F1 | 	sub	_var08, #1
2c8ec                 | LR__4164
2c8ec     07 07 C2 FA | 	rdbyte	_var04, _var08
2c8f0     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c8f4     0C 00 90 5D |  if_ne	jmp	#LR__4165
2c8f8     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2c8fc     01 0E 86 11 |  if_a	sub	_var08, #1
2c900     E8 FF 9F 1D |  if_a	jmp	#LR__4164
2c904                 | LR__4165
2c904     97 0C 48 FB | 	callpa	#(@LR__4167-@LR__4166)>>2,fcache_load_ptr_
2c908                 | LR__4166
2c908     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2c90c     10 00 90 ED |  if_be	jmp	#LR__4168
2c910     07 07 C2 FA | 	rdbyte	_var04, _var08
2c914     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c918     01 0E 86 51 |  if_ne	sub	_var08, #1
2c91c     E8 FF 9F 5D |  if_ne	jmp	#LR__4166
2c920                 | LR__4167
2c920                 | LR__4168
2c920     07 05 02 F6 | 	mov	_var03, _var08
2c924                 | LR__4169
2c924     01 00 06 F6 | 	mov	_var01, #1
2c928     44 00 90 FD | 	jmp	#LR__4176
2c92c                 | LR__4170
2c92c                 | LR__4171
2c92c                 | LR__4172
2c92c     97 18 48 FB | 	callpa	#(@LR__4174-@LR__4173)>>2,fcache_load_ptr_
2c930                 | LR__4173
2c930     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2c934     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2c938     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2c93c     20 00 90 AD |  if_e	jmp	#LR__4175
2c940     01 0B 02 F6 | 	mov	_var06, _var02
2c944     01 09 02 F6 | 	mov	_var05, _var02
2c948     01 08 06 F1 | 	add	_var05, #1
2c94c     05 11 C2 FA | 	rdbyte	_var09, _var06
2c950     04 03 02 F6 | 	mov	_var02, _var05
2c954     02 11 42 FC | 	wrbyte	_var09, _var03
2c958     01 04 06 F1 | 	add	_var03, #1
2c95c     D0 FF 9F FD | 	jmp	#LR__4173
2c960                 | LR__4174
2c960                 | LR__4175
2c960     01 07 C2 FA | 	rdbyte	_var04, _var02
2c964     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c968     C0 FE 9F 5D |  if_ne	jmp	#LR__4160
2c96c     01 00 06 F6 | 	mov	_var01, #1
2c970                 | LR__4176
2c970     97 0C 48 FB | 	callpa	#(@LR__4178-@LR__4177)>>2,fcache_load_ptr_
2c974                 | LR__4177
2c974     01 07 C2 FA | 	rdbyte	_var04, _var02
2c978     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c97c     01 0D 02 A6 |  if_e	mov	_var07, _var02
2c980     01 0C 06 A1 |  if_e	add	_var07, #1
2c984     06 03 02 A6 |  if_e	mov	_var02, _var07
2c988     E8 FF 9F AD |  if_e	jmp	#LR__4177
2c98c                 | LR__4178
2c98c     9C FE 9F FD | 	jmp	#LR__4160
2c990                 | LR__4179
2c990     02 01 48 FC | 	wrbyte	#0, _var03
2c994                 | __system___normalizeName_ret
2c994     2D 00 64 FD | 	ret
2c998                 | 
2c998                 | __system___strrev
2c998     09 01 CA FA | 	rdbyte	_var01, arg01 wz
2c99c     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
2c9a0     09 03 02 F6 | 	mov	_var02, arg01
2c9a4     97 1A 48 FB | 	callpa	#(@LR__4182-@LR__4180)>>2,fcache_load_ptr_
2c9a8                 | LR__4180
2c9a8     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2c9ac     01 02 06 51 |  if_ne	add	_var02, #1
2c9b0     F4 FF 9F 5D |  if_ne	jmp	#LR__4180
2c9b4     01 02 86 F1 | 	sub	_var02, #1
2c9b8                 | LR__4181
2c9b8     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2c9bc     1C 00 90 ED |  if_be	jmp	#LR__4183
2c9c0     09 01 C2 FA | 	rdbyte	_var01, arg01
2c9c4     01 05 C2 FA | 	rdbyte	_var03, _var02
2c9c8     09 05 42 FC | 	wrbyte	_var03, arg01
2c9cc     01 01 42 FC | 	wrbyte	_var01, _var02
2c9d0     01 12 06 F1 | 	add	arg01, #1
2c9d4     01 02 86 F1 | 	sub	_var02, #1
2c9d8     DC FF 9F FD | 	jmp	#LR__4181
2c9dc                 | LR__4182
2c9dc                 | LR__4183
2c9dc                 | __system___strrev_ret
2c9dc     2D 00 64 FD | 	ret
2c9e0                 | 
2c9e0                 | __system___fmtpad
2c9e0     06 4A 05 F6 | 	mov	COUNT_, #6
2c9e4     A8 00 A0 FD | 	call	#pushregs_
2c9e8     09 27 02 F6 | 	mov	local01, arg01
2c9ec     0A 29 02 F6 | 	mov	local02, arg02
2c9f0     0B 2B 02 F6 | 	mov	local03, arg03
2c9f4     14 13 EA F8 | 	getbyte	arg01, local02, #1
2c9f8     16 28 46 F0 | 	shr	local02, #22
2c9fc     03 28 0E F5 | 	and	local02, #3 wz
2ca00     00 2C 06 F6 | 	mov	local04, #0
2ca04     01 28 06 A6 |  if_e	mov	local02, #1
2ca08     0C 29 CA F7 | 	test	local02, arg04 wz
2ca0c     00 FA 05 A6 |  if_e	mov	result1, #0
2ca10     88 00 90 AD |  if_e	jmp	#LR__4193
2ca14     09 2B C2 F2 | 	subr	local03, arg01
2ca18     01 2A 56 F2 | 	cmps	local03, #1 wc
2ca1c     00 FA 05 C6 |  if_b	mov	result1, #0
2ca20     78 00 90 CD |  if_b	jmp	#LR__4193
2ca24     03 28 0E F2 | 	cmp	local02, #3 wz
2ca28     18 00 90 5D |  if_ne	jmp	#LR__4190
2ca2c     01 18 0E F2 | 	cmp	arg04, #1 wz
2ca30     6E 28 62 FD | 	wrz	local02
2ca34     14 2B 02 F1 | 	add	local03, local02
2ca38     15 2B 52 F6 | 	abs	local03, local03 wc
2ca3c     01 2A 46 F0 | 	shr	local03, #1
2ca40     15 2B 82 F6 | 	negc	local03, local03
2ca44                 | LR__4190
2ca44     01 2A 56 F2 | 	cmps	local03, #1 wc
2ca48     4C 00 90 CD |  if_b	jmp	#LR__4192
2ca4c     15 2F 02 F6 | 	mov	local05, local03
2ca50                 | LR__4191
2ca50     13 29 02 F6 | 	mov	local02, local01
2ca54     13 31 02 F6 | 	mov	local06, local01
2ca58     13 28 46 F7 | 	zerox	local02, #19
2ca5c     14 30 46 F0 | 	shr	local06, #20
2ca60     02 30 66 F0 | 	shl	local06, #2
2ca64     ED 30 02 F1 | 	add	local06, __methods__
2ca68     18 31 02 FB | 	rdlong	local06, local06
2ca6c     20 12 06 F6 | 	mov	arg01, #32
2ca70     F2 2A 02 F6 | 	mov	local03, objptr
2ca74     14 E5 01 F6 | 	mov	objptr, local02
2ca78     2D 30 62 FD | 	call	local06
2ca7c     15 E5 01 F6 | 	mov	objptr, local03
2ca80     FD 30 02 F6 | 	mov	local06, result1
2ca84     00 30 56 F2 | 	cmps	local06, #0 wc
2ca88     18 FB 01 C6 |  if_b	mov	result1, local06
2ca8c     0C 00 90 CD |  if_b	jmp	#LR__4193
2ca90     18 2D 02 F1 | 	add	local04, local06
2ca94     EE 2F 6E FB | 	djnz	local05, #LR__4191
2ca98                 | LR__4192
2ca98     16 FB 01 F6 | 	mov	result1, local04
2ca9c                 | LR__4193
2ca9c     A7 F0 03 F6 | 	mov	ptra, fp
2caa0     B2 00 A0 FD | 	call	#popregs_
2caa4                 | __system___fmtpad_ret
2caa4     2D 00 64 FD | 	ret
2caa8                 | 
2caa8                 | __system___uitoa
2caa8     04 4A 05 F6 | 	mov	COUNT_, #4
2caac     A8 00 A0 FD | 	call	#pushregs_
2cab0     09 27 02 F6 | 	mov	local01, arg01
2cab4     00 1A 4E F2 | 	cmps	arg05, #0 wz
2cab8     13 1B 02 F6 | 	mov	arg05, local01
2cabc     00 28 06 F6 | 	mov	local02, #0
2cac0     37 2A 06 56 |  if_ne	mov	local03, #55
2cac4     57 2A 06 A6 |  if_e	mov	local03, #87
2cac8                 | LR__4200
2cac8     0B 15 12 FD | 	qdiv	arg02, arg03
2cacc     19 2C 62 FD | 	getqy	local04
2cad0     0B 15 12 FD | 	qdiv	arg02, arg03
2cad4     0A 2C 16 F2 | 	cmp	local04, #10 wc
2cad8     30 2C 06 C1 |  if_b	add	local04, #48
2cadc     15 2D 02 31 |  if_ae	add	local04, local03
2cae0     0D 2D 42 FC | 	wrbyte	local04, arg05
2cae4     01 1A 06 F1 | 	add	arg05, #1
2cae8     01 28 06 F1 | 	add	local02, #1
2caec     18 14 62 FD | 	getqx	arg02
2caf0     00 14 0E F2 | 	cmp	arg02, #0 wz
2caf4     D0 FF 9F 5D |  if_ne	jmp	#LR__4200
2caf8     0C 29 12 F2 | 	cmp	local02, arg04 wc
2cafc     C8 FF 9F CD |  if_b	jmp	#LR__4200
2cb00     0D 01 48 FC | 	wrbyte	#0, arg05
2cb04     13 13 02 F6 | 	mov	arg01, local01
2cb08     8C FE BF FD | 	call	#__system___strrev
2cb0c     14 FB 01 F6 | 	mov	result1, local02
2cb10     A7 F0 03 F6 | 	mov	ptra, fp
2cb14     B2 00 A0 FD | 	call	#popregs_
2cb18                 | __system___uitoa_ret
2cb18     2D 00 64 FD | 	ret
2cb1c                 | 
2cb1c                 | __system__disassemble_0574
2cb1c     10 4A 05 F6 | 	mov	COUNT_, #16
2cb20     A8 00 A0 FD | 	call	#pushregs_
2cb24     09 27 02 F6 | 	mov	local01, arg01
2cb28     0A 29 02 F6 | 	mov	local02, arg02
2cb2c     0B 2B 02 F6 | 	mov	local03, arg03
2cb30     0C 2D 02 F6 | 	mov	local04, arg04
2cb34     0D 2F 02 F6 | 	mov	local05, arg05
2cb38     17 13 52 F6 | 	abs	arg01, local05 wc
2cb3c     1F 30 C6 C9 |  if_b	decod	local06, #31
2cb40     00 30 06 36 |  if_ae	mov	local06, #0
2cb44     CC CF BF FD | 	call	#__system___float_fromuns
2cb48     18 FB 61 F5 | 	xor	result1, local06
2cb4c     FD 32 02 F6 | 	mov	local07, result1
2cb50     00 34 06 F6 | 	mov	local08, #0
2cb54     13 13 02 F6 | 	mov	arg01, local01
2cb58     00 14 06 F6 | 	mov	arg02, #0
2cb5c     01 16 06 F6 | 	mov	arg03, #1
2cb60     E8 D7 BF FD | 	call	#__system___float_cmp
2cb64     00 FA 0D F2 | 	cmp	result1, #0 wz
2cb68     00 36 06 A6 |  if_e	mov	local09, #0
2cb6c     14 01 68 AC |  if_e	wrlong	#0, local02
2cb70     15 37 62 AC |  if_e	wrlong	local09, local03
2cb74     8C 01 90 AD |  if_e	jmp	#LR__4222
2cb78     13 13 02 F6 | 	mov	arg01, local01
2cb7c     BC DC BF FD | 	call	#__system____builtin_ilogb
2cb80     FD 38 02 F6 | 	mov	local10, result1
2cb84     0A 2E 0E F2 | 	cmp	local05, #10 wz
2cb88     24 00 90 5D |  if_ne	jmp	#LR__4210
2cb8c     1C 37 02 F6 | 	mov	local09, local10
2cb90     01 36 66 F0 | 	shl	local09, #1
2cb94     1C 37 02 F1 | 	add	local09, local10
2cb98     1B 39 52 F6 | 	abs	local10, local09 wc
2cb9c     0A 38 16 FD | 	qdiv	local10, #10
2cba0     09 3A 06 F6 | 	mov	local11, #9
2cba4     18 38 62 FD | 	getqx	local10
2cba8     1C 39 82 F6 | 	negc	local10, local10
2cbac     04 00 90 FD | 	jmp	#LR__4211
2cbb0                 | LR__4210
2cbb0     18 3A 06 F6 | 	mov	local11, #24
2cbb4                 | LR__4211
2cbb4                 | LR__4212
2cbb4     08 34 56 F2 | 	cmps	local08, #8 wc
2cbb8     01 34 06 F1 | 	add	local08, #1
2cbbc     60 00 90 3D |  if_ae	jmp	#LR__4213
2cbc0     00 C0 1F FF 
2cbc4     00 12 06 F6 | 	mov	arg01, ##1065353216
2cbc8     19 15 02 F6 | 	mov	arg02, local07
2cbcc     1C 17 02 F6 | 	mov	arg03, local10
2cbd0     4C E3 BF FD | 	call	#__system___float_pow_n
2cbd4     FD 14 02 F6 | 	mov	arg02, result1
2cbd8     13 13 02 F6 | 	mov	arg01, local01
2cbdc     3C D5 BF FD | 	call	#__system___float_div
2cbe0     FD 3C 02 F6 | 	mov	local12, result1
2cbe4     1E 13 02 F6 | 	mov	arg01, local12
2cbe8     00 C0 1F FF 
2cbec     00 14 06 F6 | 	mov	arg02, ##1065353216
2cbf0     01 16 06 F6 | 	mov	arg03, #1
2cbf4     54 D7 BF FD | 	call	#__system___float_cmp
2cbf8     00 FA 55 F2 | 	cmps	result1, #0 wc
2cbfc     01 38 86 C1 |  if_b	sub	local10, #1
2cc00     B0 FF 9F CD |  if_b	jmp	#LR__4212
2cc04     19 15 02 F6 | 	mov	arg02, local07
2cc08     1E 13 02 F6 | 	mov	arg01, local12
2cc0c     01 16 66 F6 | 	neg	arg03, #1
2cc10     38 D7 BF FD | 	call	#__system___float_cmp
2cc14     00 FA 55 F2 | 	cmps	result1, #0 wc
2cc18     01 38 06 31 |  if_ae	add	local10, #1
2cc1c     94 FF 9F 3D |  if_ae	jmp	#LR__4212
2cc20                 | LR__4213
2cc20     1E 13 02 F6 | 	mov	arg01, local12
2cc24     14 DC BF FD | 	call	#__system____builtin_ilogb
2cc28     FD 3E 02 F6 | 	mov	local13, result1
2cc2c     1E 41 02 F6 | 	mov	local14, local12
2cc30     17 41 06 F4 | 	bitl	local14, #279
2cc34     17 40 26 F4 | 	bith	local14, #23
2cc38     1F 41 62 F0 | 	shl	local14, local13
2cc3c     02 2E 0E F2 | 	cmp	local05, #2 wz
2cc40     02 2C 66 A0 |  if_e	shl	local04, #2
2cc44     00 42 06 F6 | 	mov	local15, #0
2cc48     00 2C 56 F2 | 	cmps	local04, #0 wc
2cc4c     10 00 90 3D |  if_ae	jmp	#LR__4214
2cc50     1C 2D C2 F2 | 	subr	local04, local10
2cc54     00 2C 56 F2 | 	cmps	local04, #0 wc
2cc58     A0 00 90 CD |  if_b	jmp	#LR__4221
2cc5c     04 00 90 FD | 	jmp	#LR__4215
2cc60                 | LR__4214
2cc60     01 2C 06 F1 | 	add	local04, #1
2cc64                 | LR__4215
2cc64     1D 2D 7A F3 | 	fles	local04, local11 wcz
2cc68     01 44 06 F6 | 	mov	local16, #1
2cc6c     97 22 48 FB | 	callpa	#(@LR__4217-@LR__4216)>>2,fcache_load_ptr_
2cc70                 | LR__4216
2cc70     00 40 00 FF 
2cc74     00 42 16 F2 | 	cmp	local15, ##8388608 wc
2cc78     38 00 90 3D |  if_ae	jmp	#LR__4218
2cc7c     01 2C 56 F2 | 	cmps	local04, #1 wc
2cc80     01 2C 86 F1 | 	sub	local04, #1
2cc84     2C 00 90 CD |  if_b	jmp	#LR__4218
2cc88     17 43 02 FD | 	qmul	local15, local05
2cc8c     20 3F 02 F6 | 	mov	local13, local14
2cc90     17 3E 46 F0 | 	shr	local13, #23
2cc94     17 41 06 F4 | 	bitl	local14, #279
2cc98     18 42 62 FD | 	getqx	local15
2cc9c     17 45 02 FD | 	qmul	local16, local05
2cca0     18 44 62 FD | 	getqx	local16
2cca4     17 41 02 FD | 	qmul	local14, local05
2cca8     1F 43 02 F1 | 	add	local15, local13
2ccac     18 40 62 FD | 	getqx	local14
2ccb0     BC FF 9F FD | 	jmp	#LR__4216
2ccb4                 | LR__4217
2ccb4                 | LR__4218
2ccb4     17 37 02 F6 | 	mov	local09, local05
2ccb8     17 36 66 F0 | 	shl	local09, #23
2ccbc     1B 3F 52 F6 | 	abs	local13, local09 wc
2ccc0     01 3E 46 F0 | 	shr	local13, #1
2ccc4     1F 3F 82 F6 | 	negc	local13, local13
2ccc8     1F 41 1A F2 | 	cmp	local14, local13 wcz
2cccc     20 00 90 1D |  if_a	jmp	#LR__4219
2ccd0     17 2E 66 F0 | 	shl	local05, #23
2ccd4     17 3F 52 F6 | 	abs	local13, local05 wc
2ccd8     01 3E 46 F0 | 	shr	local13, #1
2ccdc     1F 3F 82 F6 | 	negc	local13, local13
2cce0     1F 41 0A F2 | 	cmp	local14, local13 wz
2cce4     14 00 90 5D |  if_ne	jmp	#LR__4220
2cce8     01 42 CE F7 | 	test	local15, #1 wz
2ccec     0C 00 90 AD |  if_e	jmp	#LR__4220
2ccf0                 | LR__4219
2ccf0     01 42 06 F1 | 	add	local15, #1
2ccf4     22 43 0A F2 | 	cmp	local15, local16 wz
2ccf8     01 38 06 A1 |  if_e	add	local10, #1
2ccfc                 | LR__4220
2ccfc                 | LR__4221
2ccfc     14 43 62 FC | 	wrlong	local15, local02
2cd00     15 39 62 FC | 	wrlong	local10, local03
2cd04                 | LR__4222
2cd04     A7 F0 03 F6 | 	mov	ptra, fp
2cd08     B2 00 A0 FD | 	call	#popregs_
2cd0c                 | __system__disassemble_0574_ret
2cd0c     2D 00 64 FD | 	ret
2cd10                 | 
2cd10                 | __system__emitsign_0576
2cd10     00 FA 05 F6 | 	mov	result1, #0
2cd14     00 14 0E F2 | 	cmp	arg02, #0 wz
2cd18     09 01 02 56 |  if_ne	mov	_var01, arg01
2cd1c     01 12 06 51 |  if_ne	add	arg01, #1
2cd20     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2cd24     01 FA 05 56 |  if_ne	mov	result1, #1
2cd28     00 16 0E F2 | 	cmp	arg03, #0 wz
2cd2c     09 61 48 5C |  if_ne	wrbyte	#48, arg01
2cd30     01 12 06 51 |  if_ne	add	arg01, #1
2cd34     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2cd38     02 FA 05 51 |  if_ne	add	result1, #2
2cd3c                 | __system__emitsign_0576_ret
2cd3c     2D 00 64 FD | 	ret
2cd40                 | 
2cd40                 | __system___getiolock_0614
2cd40     01 4A 05 F6 | 	mov	COUNT_, #1
2cd44     A8 00 A0 FD | 	call	#pushregs_
2cd48     A0 F8 BF FD | 	call	#__system____getftab
2cd4c     FD 26 0A F6 | 	mov	local01, result1 wz
2cd50     10 00 90 AD |  if_e	jmp	#LR__4230
2cd54     08 26 06 F1 | 	add	local01, #8
2cd58     13 FB 09 FB | 	rdlong	result1, local01 wz
2cd5c     08 26 86 F1 | 	sub	local01, #8
2cd60     18 00 90 5D |  if_ne	jmp	#LR__4231
2cd64                 | LR__4230
2cd64     01 00 00 FF 
2cd68     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2cd6c     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2cd70     01 00 00 FF 
2cd74     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
2cd78     08 00 90 FD | 	jmp	#LR__4232
2cd7c                 | LR__4231
2cd7c     0C 26 06 F1 | 	add	local01, #12
2cd80     13 FB 01 F6 | 	mov	result1, local01
2cd84                 | LR__4232
2cd84     A7 F0 03 F6 | 	mov	ptra, fp
2cd88     B2 00 A0 FD | 	call	#popregs_
2cd8c                 | __system___getiolock_0614_ret
2cd8c     2D 00 64 FD | 	ret
2cd90                 | 
2cd90                 | __system___gettxfunc
2cd90     01 4A 05 F6 | 	mov	COUNT_, #1
2cd94     A8 00 A0 FD | 	call	#pushregs_
2cd98     50 F8 BF FD | 	call	#__system____getftab
2cd9c     FD 26 0A F6 | 	mov	local01, result1 wz
2cda0     10 00 90 AD |  if_e	jmp	#LR__4240
2cda4     08 26 06 F1 | 	add	local01, #8
2cda8     13 15 0A FB | 	rdlong	arg02, local01 wz
2cdac     08 26 86 F1 | 	sub	local01, #8
2cdb0     08 00 90 5D |  if_ne	jmp	#LR__4241
2cdb4                 | LR__4240
2cdb4     00 FA 05 F6 | 	mov	result1, #0
2cdb8     0C 00 90 FD | 	jmp	#LR__4242
2cdbc                 | LR__4241
2cdbc     00 50 05 FF 
2cdc0     00 26 46 F5 | 	or	local01, ##178257920
2cdc4     13 FB 01 F6 | 	mov	result1, local01
2cdc8                 | LR__4242
2cdc8     A7 F0 03 F6 | 	mov	ptra, fp
2cdcc     B2 00 A0 FD | 	call	#popregs_
2cdd0                 | __system___gettxfunc_ret
2cdd0     2D 00 64 FD | 	ret
2cdd4                 | 
2cdd4                 | __system___getrxfunc
2cdd4     01 4A 05 F6 | 	mov	COUNT_, #1
2cdd8     A8 00 A0 FD | 	call	#pushregs_
2cddc     0C F8 BF FD | 	call	#__system____getftab
2cde0     FD 26 0A F6 | 	mov	local01, result1 wz
2cde4     10 00 90 AD |  if_e	jmp	#LR__4250
2cde8     08 26 06 F1 | 	add	local01, #8
2cdec     13 15 0A FB | 	rdlong	arg02, local01 wz
2cdf0     08 26 86 F1 | 	sub	local01, #8
2cdf4     08 00 90 5D |  if_ne	jmp	#LR__4251
2cdf8                 | LR__4250
2cdf8     00 FA 05 F6 | 	mov	result1, #0
2cdfc     0C 00 90 FD | 	jmp	#LR__4252
2ce00                 | LR__4251
2ce00     00 58 05 FF 
2ce04     00 26 46 F5 | 	or	local01, ##179306496
2ce08     13 FB 01 F6 | 	mov	result1, local01
2ce0c                 | LR__4252
2ce0c     A7 F0 03 F6 | 	mov	ptra, fp
2ce10     B2 00 A0 FD | 	call	#popregs_
2ce14                 | __system___getrxfunc_ret
2ce14     2D 00 64 FD | 	ret
2ce18                 | 
2ce18                 | __system____ScanForChar
2ce18     09 01 02 F6 | 	mov	_var01, arg01
2ce1c     09 03 02 F6 | 	mov	_var02, arg01
2ce20     97 06 48 FB | 	callpa	#(@LR__4261-@LR__4260)>>2,fcache_load_ptr_
2ce24                 | LR__4260
2ce24     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2ce28     01 02 06 51 |  if_ne	add	_var02, #1
2ce2c     F4 FF 9F 5D |  if_ne	jmp	#LR__4260
2ce30                 | LR__4261
2ce30     09 03 82 F1 | 	sub	_var02, arg01
2ce34     01 FB 01 F6 | 	mov	result1, _var02
2ce38     FD 12 0A F6 | 	mov	arg01, result1 wz
2ce3c     00 FA 05 A6 |  if_e	mov	result1, #0
2ce40     B8 00 90 AD |  if_e	jmp	#LR__4268
2ce44     0A 05 02 F6 | 	mov	_var03, arg02
2ce48     07 04 4E F7 | 	zerox	_var03, #7 wz
2ce4c     00 FA 05 A6 |  if_e	mov	result1, #0
2ce50     A8 00 90 AD |  if_e	jmp	#LR__4268
2ce54     01 16 16 F2 | 	cmp	arg03, #1 wc
2ce58     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2ce5c     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2ce60     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2ce64     94 00 90 4D |  if_c_and_nz	jmp	#LR__4268
2ce68     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2ce6c     10 00 90 ED |  if_be	jmp	#LR__4262
2ce70     00 18 0E F2 | 	cmp	arg04, #0 wz
2ce74     00 FA 05 A6 |  if_e	mov	result1, #0
2ce78     80 00 90 AD |  if_e	jmp	#LR__4268
2ce7c     09 17 02 F6 | 	mov	arg03, arg01
2ce80                 | LR__4262
2ce80     01 16 86 F1 | 	sub	arg03, #1
2ce84     00 18 0E F2 | 	cmp	arg04, #0 wz
2ce88     38 00 90 5D |  if_ne	jmp	#LR__4264
2ce8c     0B 07 02 F6 | 	mov	_var04, arg03
2ce90     09 09 02 F6 | 	mov	_var05, arg01
2ce94                 | LR__4263
2ce94     04 07 12 F2 | 	cmp	_var04, _var05 wc
2ce98     5C 00 90 3D |  if_ae	jmp	#LR__4267
2ce9c     03 05 02 F6 | 	mov	_var03, _var04
2cea0     00 05 02 F1 | 	add	_var03, _var01
2cea4     02 05 C2 FA | 	rdbyte	_var03, _var03
2cea8     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2ceac     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2ceb0     01 06 06 A1 |  if_e	add	_var04, #1
2ceb4     03 FB 01 A6 |  if_e	mov	result1, _var04
2ceb8     40 00 90 AD |  if_e	jmp	#LR__4268
2cebc     01 06 06 F1 | 	add	_var04, #1
2cec0     D0 FF 9F FD | 	jmp	#LR__4263
2cec4                 | LR__4264
2cec4     0B 07 02 F6 | 	mov	_var04, arg03
2cec8                 | LR__4265
2cec8     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2cecc     28 00 90 1D |  if_a	jmp	#LR__4266
2ced0     03 09 02 F6 | 	mov	_var05, _var04
2ced4     00 09 02 F1 | 	add	_var05, _var01
2ced8     04 05 C2 FA | 	rdbyte	_var03, _var05
2cedc     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2cee0     04 05 0A F2 | 	cmp	_var03, _var05 wz
2cee4     01 06 06 A1 |  if_e	add	_var04, #1
2cee8     03 FB 01 A6 |  if_e	mov	result1, _var04
2ceec     0C 00 90 AD |  if_e	jmp	#LR__4268
2cef0     01 06 86 F1 | 	sub	_var04, #1
2cef4     D0 FF 9F FD | 	jmp	#LR__4265
2cef8                 | LR__4266
2cef8                 | LR__4267
2cef8     00 FA 05 F6 | 	mov	result1, #0
2cefc                 | LR__4268
2cefc                 | __system____ScanForChar_ret
2cefc     2D 00 64 FD | 	ret
2cf00                 | 
2cf00                 | __system___basic_dir
2cf00     05 4A 05 F6 | 	mov	COUNT_, #5
2cf04     A8 00 A0 FD | 	call	#pushregs_
2cf08     4C F0 07 F1 | 	add	ptra, #76
2cf0c     04 4E 05 F1 | 	add	fp, #4
2cf10     A7 12 62 FC | 	wrlong	arg01, fp
2cf14     04 4E 05 F1 | 	add	fp, #4
2cf18     A7 14 62 FC | 	wrlong	arg02, fp
2cf1c     04 4E 85 F1 | 	sub	fp, #4
2cf20     A7 14 0A FB | 	rdlong	arg02, fp wz
2cf24     04 4E 85 F1 | 	sub	fp, #4
2cf28     04 4E 05 51 |  if_ne	add	fp, #4
2cf2c     A7 26 02 5B |  if_ne	rdlong	local01, fp
2cf30     04 4E 85 51 |  if_ne	sub	fp, #4
2cf34     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
2cf38     70 00 90 AD |  if_e	jmp	#LR__4270
2cf3c     03 00 00 FF 
2cf40     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2cf44     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2cf48     03 00 00 FF 
2cf4c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2cf50     03 00 00 5F 
2cf54     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
2cf58     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2cf5c     03 00 00 5F 
2cf60     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2cf64     D8 E9 BF 5D |  if_ne	call	#__system__closedir
2cf68     B6 01 00 FF 
2cf6c     14 12 06 F6 | 	mov	arg01, ##@LR__5438
2cf70     E0 E8 BF FD | 	call	#__system__opendir
2cf74     03 00 00 FF 
2cf78     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2cf7c     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2cf80     08 4E 05 F1 | 	add	fp, #8
2cf84     A7 28 02 FB | 	rdlong	local02, fp
2cf88     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2cf8c     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2cf90     04 4E 85 F1 | 	sub	fp, #4
2cf94     A7 28 02 FB | 	rdlong	local02, fp
2cf98     04 4E 85 F1 | 	sub	fp, #4
2cf9c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2cfa0     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2cfa4     03 00 00 FF 
2cfa8     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2cfac                 | LR__4270
2cfac     03 00 00 FF 
2cfb0     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2cfb4     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2cfb8     03 00 00 FF 
2cfbc     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2cfc0     B6 01 00 AF 
2cfc4     16 FA 05 A6 |  if_e	mov	result1, ##@LR__5439
2cfc8     84 02 90 AD |  if_e	jmp	#LR__4283
2cfcc                 | LR__4271
2cfcc     03 00 00 FF 
2cfd0     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2cfd4     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2cfd8     03 00 00 FF 
2cfdc     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2cfe0     D0 E9 BF FD | 	call	#__system__readdir
2cfe4     0C 4E 05 F1 | 	add	fp, #12
2cfe8     A7 FA 61 FC | 	wrlong	result1, fp
2cfec     0C 4E 85 F1 | 	sub	fp, #12
2cff0     00 FA 0D F2 | 	cmp	result1, #0 wz
2cff4     38 00 90 5D |  if_ne	jmp	#LR__4272
2cff8     03 00 00 FF 
2cffc     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2d000     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2d004     03 00 00 FF 
2d008     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2d00c     30 E9 BF FD | 	call	#__system__closedir
2d010     03 00 00 FF 
2d014     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2d018     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2d01c     03 00 00 FF 
2d020     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2d024     B6 01 00 FF 
2d028     18 FA 05 F6 | 	mov	result1, ##@LR__5440
2d02c     20 02 90 FD | 	jmp	#LR__4283
2d030                 | LR__4272
2d030     0C 4E 05 F1 | 	add	fp, #12
2d034     A7 12 02 FB | 	rdlong	arg01, fp
2d038     0C 4E 85 F1 | 	sub	fp, #12
2d03c     03 00 00 FF 
2d040     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2d044     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2d048     03 00 00 FF 
2d04c     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2d050     10 09 B0 FD | 	call	#__system___pat_match
2d054     00 FA 0D F2 | 	cmp	result1, #0 wz
2d058     70 FF 9F AD |  if_e	jmp	#LR__4271
2d05c     03 00 00 FF 
2d060     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2d064     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2d068     03 00 00 FF 
2d06c     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2d070     78 01 90 AD |  if_e	jmp	#LR__4279
2d074     0C 4E 05 F1 | 	add	fp, #12
2d078     A7 12 02 FB | 	rdlong	arg01, fp
2d07c     04 4E 05 F1 | 	add	fp, #4
2d080     A7 14 02 F6 | 	mov	arg02, fp
2d084     10 4E 85 F1 | 	sub	fp, #16
2d088     2C F2 BF FD | 	call	#__system__stat
2d08c     40 4E 05 F1 | 	add	fp, #64
2d090     A7 FA 61 FC | 	wrlong	result1, fp
2d094     40 4E 85 F1 | 	sub	fp, #64
2d098     00 FA 0D F2 | 	cmp	result1, #0 wz
2d09c     B6 01 00 5F 
2d0a0     1A FA 05 56 |  if_ne	mov	result1, ##@LR__5441
2d0a4     A8 01 90 5D |  if_ne	jmp	#LR__4283
2d0a8     18 4E 05 F1 | 	add	fp, #24
2d0ac     A7 28 02 FB | 	rdlong	local02, fp
2d0b0     78 00 00 FF 
2d0b4     00 28 06 F5 | 	and	local02, ##61440
2d0b8     2C 4E 05 F1 | 	add	fp, #44
2d0bc     A7 28 62 FC | 	wrlong	local02, fp
2d0c0     38 4E 85 F1 | 	sub	fp, #56
2d0c4     A7 28 02 FB | 	rdlong	local02, fp
2d0c8     0C 4E 85 F1 | 	sub	fp, #12
2d0cc     14 29 C2 FA | 	rdbyte	local02, local02
2d0d0     2E 28 0E F2 | 	cmp	local02, #46 wz
2d0d4     08 4E 05 A1 |  if_e	add	fp, #8
2d0d8     A7 04 68 AC |  if_e	wrlong	#2, fp
2d0dc     08 4E C5 F3 | 	sumz	fp, #8
2d0e0     A7 00 68 5C |  if_ne	wrlong	#0, fp
2d0e4     08 4E 85 51 |  if_ne	sub	fp, #8
2d0e8     44 4E 05 F1 | 	add	fp, #68
2d0ec     A7 28 02 FB | 	rdlong	local02, fp
2d0f0     44 4E 85 F1 | 	sub	fp, #68
2d0f4     08 00 00 FF 
2d0f8     00 28 0E F2 | 	cmp	local02, ##4096 wz
2d0fc     18 00 90 5D |  if_ne	jmp	#LR__4273
2d100     08 4E 05 F1 | 	add	fp, #8
2d104     A7 28 02 FB | 	rdlong	local02, fp
2d108     10 28 46 F5 | 	or	local02, #16
2d10c     A7 28 62 FC | 	wrlong	local02, fp
2d110     08 4E 85 F1 | 	sub	fp, #8
2d114     AC 00 90 FD | 	jmp	#LR__4278
2d118                 | LR__4273
2d118     44 4E 05 F1 | 	add	fp, #68
2d11c     A7 28 02 FB | 	rdlong	local02, fp
2d120     44 4E 85 F1 | 	sub	fp, #68
2d124     10 00 00 FF 
2d128     00 28 0E F2 | 	cmp	local02, ##8192 wz
2d12c     44 4E 05 51 |  if_ne	add	fp, #68
2d130     A7 26 02 5B |  if_ne	rdlong	local01, fp
2d134     44 4E 85 51 |  if_ne	sub	fp, #68
2d138     18 00 00 5F 
2d13c     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
2d140     44 4E 05 51 |  if_ne	add	fp, #68
2d144     13 2B 02 56 |  if_ne	mov	local03, local01
2d148     44 4E 85 51 |  if_ne	sub	fp, #68
2d14c     20 00 00 5F 
2d150     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
2d154     18 00 90 5D |  if_ne	jmp	#LR__4274
2d158     08 4E 05 F1 | 	add	fp, #8
2d15c     A7 28 02 FB | 	rdlong	local02, fp
2d160     04 28 46 F5 | 	or	local02, #4
2d164     A7 28 62 FC | 	wrlong	local02, fp
2d168     08 4E 85 F1 | 	sub	fp, #8
2d16c     54 00 90 FD | 	jmp	#LR__4277
2d170                 | LR__4274
2d170     18 4E 05 F1 | 	add	fp, #24
2d174     A7 28 02 FB | 	rdlong	local02, fp
2d178     18 4E 85 F1 | 	sub	fp, #24
2d17c     92 28 CE F7 | 	test	local02, #146 wz
2d180     18 00 90 5D |  if_ne	jmp	#LR__4275
2d184     08 4E 05 F1 | 	add	fp, #8
2d188     A7 28 02 FB | 	rdlong	local02, fp
2d18c     01 28 46 F5 | 	or	local02, #1
2d190     A7 28 62 FC | 	wrlong	local02, fp
2d194     08 4E 85 F1 | 	sub	fp, #8
2d198     28 00 90 FD | 	jmp	#LR__4276
2d19c                 | LR__4275
2d19c     44 4E 05 F1 | 	add	fp, #68
2d1a0     A7 2C 02 FB | 	rdlong	local04, fp
2d1a4     44 4E 85 F1 | 	sub	fp, #68
2d1a8     08 00 00 FF 
2d1ac     00 2C 0E F2 | 	cmp	local04, ##4096 wz
2d1b0     08 4E 05 51 |  if_ne	add	fp, #8
2d1b4     A7 2C 02 5B |  if_ne	rdlong	local04, fp
2d1b8     20 2C 46 55 |  if_ne	or	local04, #32
2d1bc     A7 2C 62 5C |  if_ne	wrlong	local04, fp
2d1c0     08 4E 85 51 |  if_ne	sub	fp, #8
2d1c4                 | LR__4276
2d1c4                 | LR__4277
2d1c4                 | LR__4278
2d1c4     08 4E 05 F1 | 	add	fp, #8
2d1c8     A7 2C 02 FB | 	rdlong	local04, fp
2d1cc     08 4E 85 F1 | 	sub	fp, #8
2d1d0     03 00 00 FF 
2d1d4     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2d1d8     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2d1dc     03 00 00 FF 
2d1e0     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2d1e4     13 2D CA F7 | 	test	local04, local01 wz
2d1e8     E0 FD 9F AD |  if_e	jmp	#LR__4271
2d1ec                 | LR__4279
2d1ec     0C 4E 05 F1 | 	add	fp, #12
2d1f0     A7 12 02 FB | 	rdlong	arg01, fp
2d1f4     0C 4E 85 F1 | 	sub	fp, #12
2d1f8     09 2F 02 F6 | 	mov	local05, arg01
2d1fc     97 06 48 FB | 	callpa	#(@LR__4281-@LR__4280)>>2,fcache_load_ptr_
2d200                 | LR__4280
2d200     17 FB C9 FA | 	rdbyte	result1, local05 wz
2d204     01 2E 06 51 |  if_ne	add	local05, #1
2d208     F4 FF 9F 5D |  if_ne	jmp	#LR__4280
2d20c                 | LR__4281
2d20c     17 13 C2 F2 | 	subr	arg01, local05
2d210     01 12 06 F1 | 	add	arg01, #1
2d214     28 E0 BF FD | 	call	#__system___gc_alloc_managed
2d218     48 4E 05 F1 | 	add	fp, #72
2d21c     A7 FA 61 FC | 	wrlong	result1, fp
2d220     48 4E 85 F1 | 	sub	fp, #72
2d224     00 FA 0D F2 | 	cmp	result1, #0 wz
2d228     18 00 90 AD |  if_e	jmp	#LR__4282
2d22c     48 4E 05 F1 | 	add	fp, #72
2d230     A7 12 02 FB | 	rdlong	arg01, fp
2d234     3C 4E 85 F1 | 	sub	fp, #60
2d238     A7 14 02 FB | 	rdlong	arg02, fp
2d23c     0C 4E 85 F1 | 	sub	fp, #12
2d240     0C 9E BF FD | 	call	#__system____builtin_strcpy
2d244                 | LR__4282
2d244     48 4E 05 F1 | 	add	fp, #72
2d248     A7 FA 01 FB | 	rdlong	result1, fp
2d24c     48 4E 85 F1 | 	sub	fp, #72
2d250                 | LR__4283
2d250     A7 F0 03 F6 | 	mov	ptra, fp
2d254     B2 00 A0 FD | 	call	#popregs_
2d258                 | __system___basic_dir_ret
2d258     2D 00 64 FD | 	ret
2d25c                 | 
2d25c                 | __system__pack_0689
2d25c     09 01 02 F6 | 	mov	_var01, arg01
2d260     7F 16 06 F1 | 	add	arg03, #127
2d264     04 18 CE F7 | 	test	arg04, #4 wz
2d268     10 00 90 AD |  if_e	jmp	#LR__4290
2d26c     00 00 0E F2 | 	cmp	_var01, #0 wz
2d270     16 00 C6 A9 |  if_e	decod	_var01, #22
2d274     F7 00 26 F4 | 	bith	_var01, #247
2d278     B4 00 90 FD | 	jmp	#LR__4299
2d27c                 | LR__4290
2d27c     02 18 CE F7 | 	test	arg04, #2 wz
2d280     00 C0 3F 5F 
2d284     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2d288     00 14 06 56 |  if_ne	mov	arg02, #0
2d28c     A0 00 90 5D |  if_ne	jmp	#LR__4298
2d290     08 18 CE F7 | 	test	arg04, #8 wz
2d294     00 00 06 56 |  if_ne	mov	_var01, #0
2d298     94 00 90 5D |  if_ne	jmp	#LR__4297
2d29c     FF 16 56 F2 | 	cmps	arg03, #255 wc
2d2a0     00 C0 3F 3F 
2d2a4     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2d2a8     00 14 06 36 |  if_ae	mov	arg02, #0
2d2ac     80 00 90 3D |  if_ae	jmp	#LR__4296
2d2b0     01 16 56 F2 | 	cmps	arg03, #1 wc
2d2b4     6C 00 90 3D |  if_ae	jmp	#LR__4294
2d2b8     01 14 46 F0 | 	shr	arg02, #1
2d2bc     00 03 02 F6 | 	mov	_var02, _var01
2d2c0     01 02 06 F5 | 	and	_var02, #1
2d2c4     1F 02 66 F0 | 	shl	_var02, #31
2d2c8     01 15 42 F5 | 	or	arg02, _var02
2d2cc     01 00 46 F0 | 	shr	_var01, #1
2d2d0     97 1E 48 FB | 	callpa	#(@LR__4292-@LR__4291)>>2,fcache_load_ptr_
2d2d4                 | LR__4291
2d2d4     00 16 56 F2 | 	cmps	arg03, #0 wc
2d2d8     34 00 90 3D |  if_ae	jmp	#LR__4293
2d2dc     00 00 0E F2 | 	cmp	_var01, #0 wz
2d2e0     2C 00 90 AD |  if_e	jmp	#LR__4293
2d2e4     0A 13 02 F6 | 	mov	arg01, arg02
2d2e8     01 12 06 F5 | 	and	arg01, #1
2d2ec     01 16 06 F1 | 	add	arg03, #1
2d2f0     01 14 46 F0 | 	shr	arg02, #1
2d2f4     00 03 02 F6 | 	mov	_var02, _var01
2d2f8     01 02 06 F5 | 	and	_var02, #1
2d2fc     1F 02 66 F0 | 	shl	_var02, #31
2d300     01 15 42 F5 | 	or	arg02, _var02
2d304     09 15 42 F5 | 	or	arg02, arg01
2d308     01 00 46 F0 | 	shr	_var01, #1
2d30c     C4 FF 9F FD | 	jmp	#LR__4291
2d310                 | LR__4292
2d310                 | LR__4293
2d310     00 16 56 F2 | 	cmps	arg03, #0 wc
2d314     18 00 90 3D |  if_ae	jmp	#LR__4295
2d318     00 14 0E F2 | 	cmp	arg02, #0 wz
2d31c     6F 14 62 FD | 	wrnz	arg02
2d320     0C 00 90 FD | 	jmp	#LR__4295
2d324                 | LR__4294
2d324     17 01 06 F4 | 	bitl	_var01, #279
2d328     17 16 66 F0 | 	shl	arg03, #23
2d32c     0B 01 42 F5 | 	or	_var01, arg03
2d330                 | LR__4295
2d330                 | LR__4296
2d330                 | LR__4297
2d330                 | LR__4298
2d330                 | LR__4299
2d330     01 00 CE F7 | 	test	_var01, #1 wz
2d334     01 14 46 55 |  if_ne	or	arg02, #1
2d338     0A 17 02 F6 | 	mov	arg03, arg02
2d33c     00 02 06 F6 | 	mov	_var02, #0
2d340     FF FF 3F FF 
2d344     FF 15 06 F1 | 	add	arg02, ##2147483647
2d348     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2d34c     01 02 06 C6 |  if_b	mov	_var02, #1
2d350     01 01 02 F1 | 	add	_var01, _var02
2d354     01 18 CE F7 | 	test	arg04, #1 wz
2d358     1F 00 26 54 |  if_ne	bith	_var01, #31
2d35c     00 FB 01 F6 | 	mov	result1, _var01
2d360                 | __system__pack_0689_ret
2d360     2D 00 64 FD | 	ret
2d364                 | 
2d364                 | __system___rxtxioctl_0779
2d364     00 15 0E F2 | 	cmp	arg02, #256 wz
2d368     0C 00 90 AD |  if_e	jmp	#LR__4300
2d36c     01 15 0E F2 | 	cmp	arg02, #257 wz
2d370     1C 00 90 AD |  if_e	jmp	#LR__4301
2d374     30 00 90 FD | 	jmp	#LR__4302
2d378                 | LR__4300
2d378     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2d37c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2d380     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2d384     0B FB 61 FC | 	wrlong	result1, arg03
2d388     00 FA 05 F6 | 	mov	result1, #0
2d38c     28 00 90 FD | 	jmp	#LR__4303
2d390                 | LR__4301
2d390     0B 13 02 FB | 	rdlong	arg01, arg03
2d394     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2d398     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2d39c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2d3a0     00 FA 05 F6 | 	mov	result1, #0
2d3a4     10 00 90 FD | 	jmp	#LR__4303
2d3a8                 | LR__4302
2d3a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d3ac     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2d3b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d3b4     01 FA 65 F6 | 	neg	result1, #1
2d3b8                 | LR__4303
2d3b8                 | __system___rxtxioctl_0779_ret
2d3b8     2D 00 64 FD | 	ret
2d3bc                 | 
2d3bc                 | __system____dummy_flush_0780
2d3bc     00 FA 05 F6 | 	mov	result1, #0
2d3c0                 | __system____dummy_flush_0780_ret
2d3c0     2D 00 64 FD | 	ret
2d3c4                 | 
2d3c4                 | __system___vfswrite
2d3c4     09 4A 05 F6 | 	mov	COUNT_, #9
2d3c8     A8 00 A0 FD | 	call	#pushregs_
2d3cc     09 27 02 F6 | 	mov	local01, arg01
2d3d0     0A 29 02 F6 | 	mov	local02, arg02
2d3d4     0B 2B 02 F6 | 	mov	local03, arg03
2d3d8     14 2D 02 F6 | 	mov	local04, local02
2d3dc     08 26 06 F1 | 	add	local01, #8
2d3e0     13 13 02 FB | 	rdlong	arg01, local01
2d3e4     08 26 86 F1 | 	sub	local01, #8
2d3e8     02 12 CE F7 | 	test	arg01, #2 wz
2d3ec     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d3f0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2d3f4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d3f8     01 FA 65 A6 |  if_e	neg	result1, #1
2d3fc     80 01 90 AD |  if_e	jmp	#LR__4316
2d400     08 26 06 F1 | 	add	local01, #8
2d404     13 FB 01 FB | 	rdlong	result1, local01
2d408     08 26 86 F1 | 	sub	local01, #8
2d40c     40 FA CD F7 | 	test	result1, #64 wz
2d410     68 00 90 AD |  if_e	jmp	#LR__4311
2d414     08 26 06 F1 | 	add	local01, #8
2d418     13 15 02 FB | 	rdlong	arg02, local01
2d41c     08 26 86 F1 | 	sub	local01, #8
2d420     80 14 CE F7 | 	test	arg02, #128 wz
2d424     54 00 90 AD |  if_e	jmp	#LR__4310
2d428     30 26 06 F1 | 	add	local01, #48
2d42c     13 2F 02 FB | 	rdlong	local05, local01
2d430     17 31 02 F6 | 	mov	local06, local05
2d434     30 26 86 F1 | 	sub	local01, #48
2d438     13 30 46 F7 | 	zerox	local06, #19
2d43c     14 2E 46 F0 | 	shr	local05, #20
2d440     02 2E 66 F0 | 	shl	local05, #2
2d444     ED 2E 02 F1 | 	add	local05, __methods__
2d448     17 2F 02 FB | 	rdlong	local05, local05
2d44c     13 13 02 F6 | 	mov	arg01, local01
2d450     00 14 06 F6 | 	mov	arg02, #0
2d454     02 16 06 F6 | 	mov	arg03, #2
2d458     F2 32 02 F6 | 	mov	local07, objptr
2d45c     18 E5 01 F6 | 	mov	objptr, local06
2d460     2D 2E 62 FD | 	call	local05
2d464     19 E5 01 F6 | 	mov	objptr, local07
2d468     08 26 06 F1 | 	add	local01, #8
2d46c     13 33 02 FB | 	rdlong	local07, local01
2d470     80 32 26 F5 | 	andn	local07, #128
2d474     13 33 62 FC | 	wrlong	local07, local01
2d478     08 26 86 F1 | 	sub	local01, #8
2d47c                 | LR__4310
2d47c                 | LR__4311
2d47c     18 26 06 F1 | 	add	local01, #24
2d480     13 33 0A FB | 	rdlong	local07, local01 wz
2d484     18 26 86 F1 | 	sub	local01, #24
2d488     80 00 90 AD |  if_e	jmp	#LR__4313
2d48c     18 26 06 F1 | 	add	local01, #24
2d490     13 2F 02 FB | 	rdlong	local05, local01
2d494     17 31 02 F6 | 	mov	local06, local05
2d498     18 26 86 F1 | 	sub	local01, #24
2d49c     13 30 46 F7 | 	zerox	local06, #19
2d4a0     14 2E 46 F0 | 	shr	local05, #20
2d4a4     02 2E 66 F0 | 	shl	local05, #2
2d4a8     ED 2E 02 F1 | 	add	local05, __methods__
2d4ac     17 2F 02 FB | 	rdlong	local05, local05
2d4b0     14 15 02 F6 | 	mov	arg02, local02
2d4b4     15 17 02 F6 | 	mov	arg03, local03
2d4b8     13 13 02 F6 | 	mov	arg01, local01
2d4bc     F2 32 02 F6 | 	mov	local07, objptr
2d4c0     18 E5 01 F6 | 	mov	objptr, local06
2d4c4     2D 2E 62 FD | 	call	local05
2d4c8     19 E5 01 F6 | 	mov	objptr, local07
2d4cc     FD 34 02 F6 | 	mov	local08, result1
2d4d0     00 34 56 F2 | 	cmps	local08, #0 wc
2d4d4     2C 00 90 3D |  if_ae	jmp	#LR__4312
2d4d8     08 26 06 F1 | 	add	local01, #8
2d4dc     13 33 02 FB | 	rdlong	local07, local01
2d4e0     20 32 46 F5 | 	or	local07, #32
2d4e4     13 33 62 FC | 	wrlong	local07, local01
2d4e8     00 34 4E F2 | 	cmps	local08, #0 wz
2d4ec     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d4f0     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2d4f4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d4f8     01 FA 65 56 |  if_ne	neg	result1, #1
2d4fc     00 FA 05 A6 |  if_e	mov	result1, #0
2d500     7C 00 90 FD | 	jmp	#LR__4316
2d504                 | LR__4312
2d504     1A FB 01 F6 | 	mov	result1, local08
2d508     74 00 90 FD | 	jmp	#LR__4316
2d50c                 | LR__4313
2d50c     1C 26 06 F1 | 	add	local01, #28
2d510     13 37 0A FB | 	rdlong	local09, local01 wz
2d514     1C 26 86 F1 | 	sub	local01, #28
2d518     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d51c     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2d520     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d524     01 FA 65 A6 |  if_e	neg	result1, #1
2d528     54 00 90 AD |  if_e	jmp	#LR__4316
2d52c     00 34 06 F6 | 	mov	local08, #0
2d530                 | LR__4314
2d530     01 2A 16 F2 | 	cmp	local03, #1 wc
2d534     44 00 90 CD |  if_b	jmp	#LR__4315
2d538     1B 31 02 F6 | 	mov	local06, local09
2d53c     1B 2F 02 F6 | 	mov	local05, local09
2d540     13 30 46 F7 | 	zerox	local06, #19
2d544     14 2E 46 F0 | 	shr	local05, #20
2d548     02 2E 66 F0 | 	shl	local05, #2
2d54c     ED 2E 02 F1 | 	add	local05, __methods__
2d550     17 2F 02 FB | 	rdlong	local05, local05
2d554     16 13 C2 FA | 	rdbyte	arg01, local04
2d558     13 15 02 F6 | 	mov	arg02, local01
2d55c     F2 32 02 F6 | 	mov	local07, objptr
2d560     18 E5 01 F6 | 	mov	objptr, local06
2d564     01 2C 06 F1 | 	add	local04, #1
2d568     2D 2E 62 FD | 	call	local05
2d56c     19 E5 01 F6 | 	mov	objptr, local07
2d570     FD 34 02 F1 | 	add	local08, result1
2d574     01 2A 86 F1 | 	sub	local03, #1
2d578     B4 FF 9F FD | 	jmp	#LR__4314
2d57c                 | LR__4315
2d57c     1A FB 01 F6 | 	mov	result1, local08
2d580                 | LR__4316
2d580     A7 F0 03 F6 | 	mov	ptra, fp
2d584     B2 00 A0 FD | 	call	#popregs_
2d588                 | __system___vfswrite_ret
2d588     2D 00 64 FD | 	ret
2d58c                 | 
2d58c                 | __system___vfsread
2d58c     03 4A 05 F6 | 	mov	COUNT_, #3
2d590     A8 00 A0 FD | 	call	#pushregs_
2d594     28 F0 07 F1 | 	add	ptra, #40
2d598     04 4E 05 F1 | 	add	fp, #4
2d59c     A7 12 62 FC | 	wrlong	arg01, fp
2d5a0     04 4E 05 F1 | 	add	fp, #4
2d5a4     A7 14 62 FC | 	wrlong	arg02, fp
2d5a8     04 4E 05 F1 | 	add	fp, #4
2d5ac     A7 16 62 FC | 	wrlong	arg03, fp
2d5b0     04 4E 85 F1 | 	sub	fp, #4
2d5b4     A7 FA 01 FB | 	rdlong	result1, fp
2d5b8     14 4E 05 F1 | 	add	fp, #20
2d5bc     A7 FA 61 FC | 	wrlong	result1, fp
2d5c0     04 4E 05 F1 | 	add	fp, #4
2d5c4     A7 00 68 FC | 	wrlong	#0, fp
2d5c8     1C 4E 85 F1 | 	sub	fp, #28
2d5cc     A7 12 02 FB | 	rdlong	arg01, fp
2d5d0     04 4E 85 F1 | 	sub	fp, #4
2d5d4     08 12 06 F1 | 	add	arg01, #8
2d5d8     09 FB 01 FB | 	rdlong	result1, arg01
2d5dc     01 FA CD F7 | 	test	result1, #1 wz
2d5e0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d5e4     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2d5e8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d5ec     01 FA 65 A6 |  if_e	neg	result1, #1
2d5f0     74 02 90 AD |  if_e	jmp	#LR__4326
2d5f4     04 4E 05 F1 | 	add	fp, #4
2d5f8     A7 12 02 FB | 	rdlong	arg01, fp
2d5fc     04 4E 85 F1 | 	sub	fp, #4
2d600     14 12 06 F1 | 	add	arg01, #20
2d604     09 FB 09 FB | 	rdlong	result1, arg01 wz
2d608     B8 00 90 AD |  if_e	jmp	#LR__4321
2d60c     04 4E 05 F1 | 	add	fp, #4
2d610     A7 12 02 FB | 	rdlong	arg01, fp
2d614     09 17 02 F6 | 	mov	arg03, arg01
2d618     14 16 06 F1 | 	add	arg03, #20
2d61c     0B 27 02 FB | 	rdlong	local01, arg03
2d620     13 29 02 F6 | 	mov	local02, local01
2d624     13 26 46 F7 | 	zerox	local01, #19
2d628     14 28 46 F0 | 	shr	local02, #20
2d62c     02 28 66 F0 | 	shl	local02, #2
2d630     ED 28 02 F1 | 	add	local02, __methods__
2d634     14 29 02 FB | 	rdlong	local02, local02
2d638     04 4E 05 F1 | 	add	fp, #4
2d63c     A7 14 02 FB | 	rdlong	arg02, fp
2d640     04 4E 05 F1 | 	add	fp, #4
2d644     A7 16 02 FB | 	rdlong	arg03, fp
2d648     0C 4E 85 F1 | 	sub	fp, #12
2d64c     F2 2A 02 F6 | 	mov	local03, objptr
2d650     13 E5 01 F6 | 	mov	objptr, local01
2d654     2D 28 62 FD | 	call	local02
2d658     15 E5 01 F6 | 	mov	objptr, local03
2d65c     10 4E 05 F1 | 	add	fp, #16
2d660     A7 FA 61 FC | 	wrlong	result1, fp
2d664     10 4E 85 F1 | 	sub	fp, #16
2d668     00 FA 55 F2 | 	cmps	result1, #0 wc
2d66c     44 00 90 3D |  if_ae	jmp	#LR__4320
2d670     04 4E 05 F1 | 	add	fp, #4
2d674     A7 2A 02 FB | 	rdlong	local03, fp
2d678     15 27 02 F6 | 	mov	local01, local03
2d67c     08 2A 06 F1 | 	add	local03, #8
2d680     15 29 02 FB | 	rdlong	local02, local03
2d684     20 28 46 F5 | 	or	local02, #32
2d688     08 26 06 F1 | 	add	local01, #8
2d68c     13 29 62 FC | 	wrlong	local02, local01
2d690     0C 4E 05 F1 | 	add	fp, #12
2d694     A7 12 0A FB | 	rdlong	arg01, fp wz
2d698     10 4E 85 F1 | 	sub	fp, #16
2d69c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2d6a0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2d6a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2d6a8     01 FA 65 56 |  if_ne	neg	result1, #1
2d6ac     00 FA 05 A6 |  if_e	mov	result1, #0
2d6b0     B4 01 90 FD | 	jmp	#LR__4326
2d6b4                 | LR__4320
2d6b4     10 4E 05 F1 | 	add	fp, #16
2d6b8     A7 FA 01 FB | 	rdlong	result1, fp
2d6bc     10 4E 85 F1 | 	sub	fp, #16
2d6c0     A4 01 90 FD | 	jmp	#LR__4326
2d6c4                 | LR__4321
2d6c4     04 4E 05 F1 | 	add	fp, #4
2d6c8     A7 12 02 FB | 	rdlong	arg01, fp
2d6cc     20 12 06 F1 | 	add	arg01, #32
2d6d0     09 13 0A FB | 	rdlong	arg01, arg01 wz
2d6d4     14 4E 05 F1 | 	add	fp, #20
2d6d8     A7 12 62 FC | 	wrlong	arg01, fp
2d6dc     18 4E 85 F1 | 	sub	fp, #24
2d6e0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2d6e4     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2d6e8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2d6ec     01 FA 65 A6 |  if_e	neg	result1, #1
2d6f0     74 01 90 AD |  if_e	jmp	#LR__4326
2d6f4     04 4E 05 F1 | 	add	fp, #4
2d6f8     A7 2A 02 FB | 	rdlong	local03, fp
2d6fc     04 4E 85 F1 | 	sub	fp, #4
2d700     28 2A 06 F1 | 	add	local03, #40
2d704     15 29 0A FB | 	rdlong	local02, local03 wz
2d708     7C 00 90 AD |  if_e	jmp	#LR__4323
2d70c     04 4E 05 F1 | 	add	fp, #4
2d710     A7 12 02 FB | 	rdlong	arg01, fp
2d714     09 2B 02 F6 | 	mov	local03, arg01
2d718     28 2A 06 F1 | 	add	local03, #40
2d71c     15 27 02 FB | 	rdlong	local01, local03
2d720     13 29 02 F6 | 	mov	local02, local01
2d724     13 26 46 F7 | 	zerox	local01, #19
2d728     14 28 46 F0 | 	shr	local02, #20
2d72c     02 28 66 F0 | 	shl	local02, #2
2d730     ED 28 02 F1 | 	add	local02, __methods__
2d734     14 29 02 FB | 	rdlong	local02, local02
2d738     20 4E 05 F1 | 	add	fp, #32
2d73c     A7 16 02 F6 | 	mov	arg03, fp
2d740     24 4E 85 F1 | 	sub	fp, #36
2d744     00 15 06 F6 | 	mov	arg02, #256
2d748     F2 2A 02 F6 | 	mov	local03, objptr
2d74c     13 E5 01 F6 | 	mov	objptr, local01
2d750     2D 28 62 FD | 	call	local02
2d754     15 E5 01 F6 | 	mov	objptr, local03
2d758     10 4E 05 F1 | 	add	fp, #16
2d75c     A7 FA 61 FC | 	wrlong	result1, fp
2d760     00 FA 4D F2 | 	cmps	result1, #0 wz
2d764     10 4E 85 F1 | 	sub	fp, #16
2d768     1C 00 90 5D |  if_ne	jmp	#LR__4322
2d76c     24 4E 05 F1 | 	add	fp, #36
2d770     A7 28 02 FB | 	rdlong	local02, fp
2d774     24 4E 85 F1 | 	sub	fp, #36
2d778     02 28 CE F7 | 	test	local02, #2 wz
2d77c     20 4E 05 51 |  if_ne	add	fp, #32
2d780     A7 02 68 5C |  if_ne	wrlong	#1, fp
2d784     20 4E 85 51 |  if_ne	sub	fp, #32
2d788                 | LR__4322
2d788                 | LR__4323
2d788     10 4E 05 F1 | 	add	fp, #16
2d78c     A7 00 68 FC | 	wrlong	#0, fp
2d790     10 4E 85 F1 | 	sub	fp, #16
2d794                 | LR__4324
2d794     0C 4E 05 F1 | 	add	fp, #12
2d798     A7 2A 02 FB | 	rdlong	local03, fp
2d79c     0C 4E 85 F1 | 	sub	fp, #12
2d7a0     01 2A 16 F2 | 	cmp	local03, #1 wc
2d7a4     B4 00 90 CD |  if_b	jmp	#LR__4325
2d7a8     18 4E 05 F1 | 	add	fp, #24
2d7ac     A7 28 02 FB | 	rdlong	local02, fp
2d7b0     14 2B 02 F6 | 	mov	local03, local02
2d7b4     13 2A 46 F7 | 	zerox	local03, #19
2d7b8     14 28 46 F0 | 	shr	local02, #20
2d7bc     02 28 66 F0 | 	shl	local02, #2
2d7c0     ED 28 02 F1 | 	add	local02, __methods__
2d7c4     14 29 02 FB | 	rdlong	local02, local02
2d7c8     14 4E 85 F1 | 	sub	fp, #20
2d7cc     A7 12 02 FB | 	rdlong	arg01, fp
2d7d0     04 4E 85 F1 | 	sub	fp, #4
2d7d4     F2 26 02 F6 | 	mov	local01, objptr
2d7d8     15 E5 01 F6 | 	mov	objptr, local03
2d7dc     2D 28 62 FD | 	call	local02
2d7e0     13 E5 01 F6 | 	mov	objptr, local01
2d7e4     14 4E 05 F1 | 	add	fp, #20
2d7e8     A7 FA 61 FC | 	wrlong	result1, fp
2d7ec     14 4E 85 F1 | 	sub	fp, #20
2d7f0     00 FA 55 F2 | 	cmps	result1, #0 wc
2d7f4     64 00 90 CD |  if_b	jmp	#LR__4325
2d7f8     1C 4E 05 F1 | 	add	fp, #28
2d7fc     A7 2A 02 FB | 	rdlong	local03, fp
2d800     15 29 02 F6 | 	mov	local02, local03
2d804     01 28 06 F1 | 	add	local02, #1
2d808     A7 28 62 FC | 	wrlong	local02, fp
2d80c     08 4E 85 F1 | 	sub	fp, #8
2d810     A7 28 02 FB | 	rdlong	local02, fp
2d814     15 29 42 FC | 	wrbyte	local02, local03
2d818     04 4E 85 F1 | 	sub	fp, #4
2d81c     A7 2A 02 FB | 	rdlong	local03, fp
2d820     01 2A 06 F1 | 	add	local03, #1
2d824     A7 2A 62 FC | 	wrlong	local03, fp
2d828     04 4E 85 F1 | 	sub	fp, #4
2d82c     A7 2A 02 FB | 	rdlong	local03, fp
2d830     01 2A 86 F1 | 	sub	local03, #1
2d834     A7 2A 62 FC | 	wrlong	local03, fp
2d838     14 4E 05 F1 | 	add	fp, #20
2d83c     A7 2A 0A FB | 	rdlong	local03, fp wz
2d840     20 4E 85 F1 | 	sub	fp, #32
2d844     4C FF 9F AD |  if_e	jmp	#LR__4324
2d848     14 4E 05 F1 | 	add	fp, #20
2d84c     A7 28 02 FB | 	rdlong	local02, fp
2d850     14 4E 85 F1 | 	sub	fp, #20
2d854     0A 28 0E F2 | 	cmp	local02, #10 wz
2d858     38 FF 9F 5D |  if_ne	jmp	#LR__4324
2d85c                 | LR__4325
2d85c     10 4E 05 F1 | 	add	fp, #16
2d860     A7 FA 01 FB | 	rdlong	result1, fp
2d864     10 4E 85 F1 | 	sub	fp, #16
2d868                 | LR__4326
2d868     A7 F0 03 F6 | 	mov	ptra, fp
2d86c     B2 00 A0 FD | 	call	#popregs_
2d870                 | __system___vfsread_ret
2d870     2D 00 64 FD | 	ret
2d874                 | 
2d874                 | __system____default_filbuf
2d874     04 4A 05 F6 | 	mov	COUNT_, #4
2d878     A8 00 A0 FD | 	call	#pushregs_
2d87c     09 27 02 F6 | 	mov	local01, arg01
2d880     13 29 02 FB | 	rdlong	local02, local01
2d884     0C 28 06 F1 | 	add	local02, #12
2d888     14 FB 09 FB | 	rdlong	result1, local02 wz
2d88c     0C 28 86 F1 | 	sub	local02, #12
2d890     20 00 90 5D |  if_ne	jmp	#LR__4330
2d894     14 28 06 F1 | 	add	local02, #20
2d898     14 FB 01 F6 | 	mov	result1, local02
2d89c     04 28 86 F1 | 	sub	local02, #4
2d8a0     14 FB 61 FC | 	wrlong	result1, local02
2d8a4     04 28 86 F1 | 	sub	local02, #4
2d8a8     02 00 80 FF 
2d8ac     14 01 68 FC | 	wrlong	##1024, local02
2d8b0     0C 28 86 F1 | 	sub	local02, #12
2d8b4                 | LR__4330
2d8b4     14 26 06 F1 | 	add	local01, #20
2d8b8     13 2B 02 FB | 	rdlong	local03, local01
2d8bc     15 2D 02 F6 | 	mov	local04, local03
2d8c0     14 26 86 F1 | 	sub	local01, #20
2d8c4     13 2C 46 F7 | 	zerox	local04, #19
2d8c8     14 2A 46 F0 | 	shr	local03, #20
2d8cc     02 2A 66 F0 | 	shl	local03, #2
2d8d0     ED 2A 02 F1 | 	add	local03, __methods__
2d8d4     15 2B 02 FB | 	rdlong	local03, local03
2d8d8     10 28 06 F1 | 	add	local02, #16
2d8dc     14 15 02 FB | 	rdlong	arg02, local02
2d8e0     04 28 86 F1 | 	sub	local02, #4
2d8e4     14 17 02 FB | 	rdlong	arg03, local02
2d8e8     0C 28 86 F1 | 	sub	local02, #12
2d8ec     13 13 02 F6 | 	mov	arg01, local01
2d8f0     F2 26 02 F6 | 	mov	local01, objptr
2d8f4     16 E5 01 F6 | 	mov	objptr, local04
2d8f8     2D 2A 62 FD | 	call	local03
2d8fc     13 E5 01 F6 | 	mov	objptr, local01
2d900     FD 2C 02 F6 | 	mov	local04, result1
2d904     00 2C 56 F2 | 	cmps	local04, #0 wc
2d908     01 FA 65 C6 |  if_b	neg	result1, #1
2d90c     28 00 90 CD |  if_b	jmp	#LR__4331
2d910     14 2D 62 FC | 	wrlong	local04, local02
2d914     10 28 06 F1 | 	add	local02, #16
2d918     14 2B 02 FB | 	rdlong	local03, local02
2d91c     0C 28 86 F1 | 	sub	local02, #12
2d920     14 2B 62 FC | 	wrlong	local03, local02
2d924     04 28 06 F1 | 	add	local02, #4
2d928     14 2B 02 FB | 	rdlong	local03, local02
2d92c     01 2A 46 F5 | 	or	local03, #1
2d930     14 2B 62 FC | 	wrlong	local03, local02
2d934     16 FB 01 F6 | 	mov	result1, local04
2d938                 | LR__4331
2d938     A7 F0 03 F6 | 	mov	ptra, fp
2d93c     B2 00 A0 FD | 	call	#popregs_
2d940                 | __system____default_filbuf_ret
2d940     2D 00 64 FD | 	ret
2d944                 | 
2d944                 | __system__getlower_1169
2d944     41 12 56 F2 | 	cmps	arg01, #65 wc
2d948     10 00 90 CD |  if_b	jmp	#LR__4340
2d94c     5B 12 56 F2 | 	cmps	arg01, #91 wc
2d950     09 FB 01 C6 |  if_b	mov	result1, arg01
2d954     20 FA 05 C1 |  if_b	add	result1, #32
2d958     04 00 90 CD |  if_b	jmp	#__system__getlower_1169_ret
2d95c                 | LR__4340
2d95c     09 FB 01 F6 | 	mov	result1, arg01
2d960                 | __system__getlower_1169_ret
2d960     2D 00 64 FD | 	ret
2d964                 | 
2d964                 | __system___pat_match
2d964     08 4A 05 F6 | 	mov	COUNT_, #8
2d968     A8 00 A0 FD | 	call	#pushregs_
2d96c     09 27 02 F6 | 	mov	local01, arg01
2d970                 | LR__4350
2d970     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2d974     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2d978     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2d97c     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2d980     2C 00 90 AD |  if_e	jmp	#LR__4351
2d984     0A 13 C2 FA | 	rdbyte	arg01, arg02
2d988     B8 FF BF FD | 	call	#__system__getlower_1169
2d98c     FD 2A 02 F6 | 	mov	local03, result1
2d990     13 13 C2 FA | 	rdbyte	arg01, local01
2d994     AC FF BF FD | 	call	#__system__getlower_1169
2d998     15 FB 09 F2 | 	cmp	result1, local03 wz
2d99c     00 FA 05 56 |  if_ne	mov	result1, #0
2d9a0     FC 00 90 5D |  if_ne	jmp	#LR__4359
2d9a4     01 26 06 F1 | 	add	local01, #1
2d9a8     01 14 06 F1 | 	add	arg02, #1
2d9ac     C0 FF 9F FD | 	jmp	#LR__4350
2d9b0                 | LR__4351
2d9b0     0A 2B C2 FA | 	rdbyte	local03, arg02
2d9b4     2A 2A 0E F2 | 	cmp	local03, #42 wz
2d9b8     D4 00 90 5D |  if_ne	jmp	#LR__4358
2d9bc     01 14 06 F1 | 	add	arg02, #1
2d9c0     0A 29 C2 FA | 	rdbyte	local02, arg02
2d9c4     01 14 86 F1 | 	sub	arg02, #1
2d9c8     2E 28 0E F2 | 	cmp	local02, #46 wz
2d9cc     28 00 90 5D |  if_ne	jmp	#LR__4352
2d9d0     02 14 06 F1 | 	add	arg02, #2
2d9d4     0A 29 C2 FA | 	rdbyte	local02, arg02
2d9d8     02 14 86 F1 | 	sub	arg02, #2
2d9dc     2A 28 0E F2 | 	cmp	local02, #42 wz
2d9e0     03 14 06 A1 |  if_e	add	arg02, #3
2d9e4     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2d9e8     03 14 86 A1 |  if_e	sub	arg02, #3
2d9ec     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2d9f0     01 FA 05 A6 |  if_e	mov	result1, #1
2d9f4     A8 00 90 AD |  if_e	jmp	#LR__4359
2d9f8                 | LR__4352
2d9f8     01 14 06 F1 | 	add	arg02, #1
2d9fc     00 30 06 F6 | 	mov	local06, #0
2da00     97 1E 48 FB | 	callpa	#(@LR__4355-@LR__4353)>>2,fcache_load_ptr_
2da04                 | LR__4353
2da04     18 33 02 F6 | 	mov	local07, local06
2da08     0A 33 02 F1 | 	add	local07, arg02
2da0c     19 33 CA FA | 	rdbyte	local07, local07 wz
2da10     18 2F 02 56 |  if_ne	mov	local05, local06
2da14     01 2E 06 51 |  if_ne	add	local05, #1
2da18     17 31 02 56 |  if_ne	mov	local06, local05
2da1c     E4 FF 9F 5D |  if_ne	jmp	#LR__4353
2da20     00 34 06 F6 | 	mov	local08, #0
2da24                 | LR__4354
2da24     1A 33 02 F6 | 	mov	local07, local08
2da28     13 33 02 F1 | 	add	local07, local01
2da2c     19 33 CA FA | 	rdbyte	local07, local07 wz
2da30     1A 2F 02 56 |  if_ne	mov	local05, local08
2da34     01 2E 06 51 |  if_ne	add	local05, #1
2da38     17 35 02 56 |  if_ne	mov	local08, local05
2da3c     E4 FF 9F 5D |  if_ne	jmp	#LR__4354
2da40                 | LR__4355
2da40     18 35 52 F2 | 	cmps	local08, local06 wc
2da44     00 FA 05 C6 |  if_b	mov	result1, #0
2da48     54 00 90 CD |  if_b	jmp	#LR__4359
2da4c     1A 29 02 F6 | 	mov	local02, local08
2da50     18 29 82 F1 | 	sub	local02, local06
2da54     14 27 02 F1 | 	add	local01, local02
2da58                 | LR__4356
2da58     01 30 56 F2 | 	cmps	local06, #1 wc
2da5c     30 00 90 CD |  if_b	jmp	#LR__4357
2da60     13 13 C2 FA | 	rdbyte	arg01, local01
2da64     DC FE BF FD | 	call	#__system__getlower_1169
2da68     FD 34 02 F6 | 	mov	local08, result1
2da6c     0A 13 C2 FA | 	rdbyte	arg01, arg02
2da70     D0 FE BF FD | 	call	#__system__getlower_1169
2da74     FD 34 0A F2 | 	cmp	local08, result1 wz
2da78     00 FA 05 56 |  if_ne	mov	result1, #0
2da7c     20 00 90 5D |  if_ne	jmp	#LR__4359
2da80     01 26 06 F1 | 	add	local01, #1
2da84     01 14 06 F1 | 	add	arg02, #1
2da88     01 30 86 F1 | 	sub	local06, #1
2da8c     C8 FF 9F FD | 	jmp	#LR__4356
2da90                 | LR__4357
2da90                 | LR__4358
2da90     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2da94     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2da98     01 FA 05 A6 |  if_e	mov	result1, #1
2da9c     00 FA 05 56 |  if_ne	mov	result1, #0
2daa0                 | LR__4359
2daa0     A7 F0 03 F6 | 	mov	ptra, fp
2daa4     B2 00 A0 FD | 	call	#popregs_
2daa8                 | __system___pat_match_ret
2daa8     2D 00 64 FD | 	ret
2daac                 | 
2daac                 | _fatfs_cc_ff_uni2oem
2daac     00 00 06 F6 | 	mov	_var01, #0
2dab0     80 12 16 F2 | 	cmp	arg01, #128 wc
2dab4     09 01 02 C6 |  if_b	mov	_var01, arg01
2dab8     58 00 90 CD |  if_b	jmp	#LR__4364
2dabc     80 00 00 FF 
2dac0     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2dac4     4C 00 90 3D |  if_ae	jmp	#LR__4363
2dac8     0A FB 31 F9 | 	getword	result1, arg02, #0
2dacc     01 00 00 FF 
2dad0     52 FB 0D F2 | 	cmp	result1, ##850 wz
2dad4     3C 00 90 5D |  if_ne	jmp	#LR__4363
2dad8                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2dad8     00 00 06 F6 | 	mov	_var01, #0
2dadc     97 14 48 FB | 	callpa	#(@LR__4361-@LR__4360)>>2,fcache_load_ptr_
2dae0                 | LR__4360
2dae0     00 FB 31 F9 | 	getword	result1, _var01, #0
2dae4     80 FA 15 F2 | 	cmp	result1, #128 wc
2dae8     1C 00 90 3D |  if_ae	jmp	#LR__4362
2daec     00 FB 31 F9 | 	getword	result1, _var01, #0
2daf0     01 FA 65 F0 | 	shl	result1, #1
2daf4     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2daf8     FD FA E1 FA | 	rdword	result1, result1
2dafc     FD 12 0A F2 | 	cmp	arg01, result1 wz
2db00     01 00 06 51 |  if_ne	add	_var01, #1
2db04     D8 FF 9F 5D |  if_ne	jmp	#LR__4360
2db08                 | LR__4361
2db08                 | LR__4362
2db08     00 01 32 F9 | 	getword	_var01, _var01, #0
2db0c     80 00 06 F1 | 	add	_var01, #128
2db10     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2db14                 | LR__4363
2db14                 | LR__4364
2db14                 | ' 			c = (c + 0x80) & 0xFF;
2db14                 | ' 		}
2db14                 | ' 	}
2db14                 | ' 
2db14                 | ' 	return c;
2db14     00 FB 01 F6 | 	mov	result1, _var01
2db18                 | _fatfs_cc_ff_uni2oem_ret
2db18     2D 00 64 FD | 	ret
2db1c                 | 
2db1c                 | _fatfs_cc_ff_oem2uni
2db1c     00 00 06 F6 | 	mov	_var01, #0
2db20     09 FB 31 F9 | 	getword	result1, arg01, #0
2db24     80 FA 15 F2 | 	cmp	result1, #128 wc
2db28     09 01 02 C6 |  if_b	mov	_var01, arg01
2db2c     2C 00 90 CD |  if_b	jmp	#LR__4371
2db30     0A 15 32 F9 | 	getword	arg02, arg02, #0
2db34     01 00 00 FF 
2db38     52 15 0E F2 | 	cmp	arg02, ##850 wz
2db3c     1C 00 90 5D |  if_ne	jmp	#LR__4370
2db40     09 FB 31 F9 | 	getword	result1, arg01, #0
2db44     00 FB 15 F2 | 	cmp	result1, #256 wc
2db48     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2db4c     80 12 86 C1 |  if_b	sub	arg01, #128
2db50     01 12 66 C0 |  if_b	shl	arg01, #1
2db54     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2db58     09 01 E2 CA |  if_b	rdword	_var01, arg01
2db5c                 | LR__4370
2db5c                 | LR__4371
2db5c                 | ' 		}
2db5c                 | ' 	}
2db5c                 | ' 
2db5c                 | ' 	return c;
2db5c     00 FB 01 F6 | 	mov	result1, _var01
2db60                 | _fatfs_cc_ff_oem2uni_ret
2db60     2D 00 64 FD | 	ret
2db64                 | 
2db64                 | _fatfs_cc_ff_wtoupper
2db64     09 01 02 F6 | 	mov	_var01, arg01
2db68     80 00 00 FF 
2db6c     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2db70     60 01 90 3D |  if_ae	jmp	#LR__4393
2db74     00 03 02 F6 | 	mov	_var02, _var01
2db78     01 01 32 F9 | 	getword	_var01, _var02, #0
2db7c     08 00 00 FF 
2db80     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2db84     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2db88     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2db8c     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2db90     01 00 00 3F 
2db94     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2db98     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2db9c     01 00 00 3F 
2dba0     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2dba4     02 07 02 F6 | 	mov	_var04, _var03
2dba8                 | ' 		uc = (WORD)uni;
2dba8                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2dba8                 | ' 		for (;;) {
2dba8                 | LR__4380
2dba8     03 09 E2 FA | 	rdword	_var05, _var04
2dbac     04 05 02 F6 | 	mov	_var03, _var05
2dbb0     0F 04 4E F7 | 	zerox	_var03, #15 wz
2dbb4     02 06 06 F1 | 	add	_var04, #2
2dbb8     14 01 90 AD |  if_e	jmp	#LR__4392
2dbbc     01 05 32 F9 | 	getword	_var03, _var02, #0
2dbc0     04 01 32 F9 | 	getword	_var01, _var05, #0
2dbc4     00 05 12 F2 | 	cmp	_var03, _var01 wc
2dbc8     04 01 90 CD |  if_b	jmp	#LR__4392
2dbcc     03 0B E2 FA | 	rdword	_var06, _var04
2dbd0     05 0D 32 F9 | 	getword	_var07, _var06, #0
2dbd4     08 0C 46 F0 | 	shr	_var07, #8
2dbd8     05 0B 32 F9 | 	getword	_var06, _var06, #0
2dbdc     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2dbe0     01 05 32 F9 | 	getword	_var03, _var02, #0
2dbe4     04 0F 32 F9 | 	getword	_var08, _var05, #0
2dbe8     05 01 32 F9 | 	getword	_var01, _var06, #0
2dbec     00 0F 02 F1 | 	add	_var08, _var01
2dbf0     07 05 52 F2 | 	cmps	_var03, _var08 wc
2dbf4     02 06 06 F1 | 	add	_var04, #2
2dbf8     C4 00 90 3D |  if_ae	jmp	#LR__4391
2dbfc                 | ' 				switch (cmd) {
2dbfc     06 11 32 F9 | 	getword	_var09, _var07, #0
2dc00     09 10 26 F3 | 	fle	_var09, #9
2dc04     30 10 62 FD | 	jmprel	_var09
2dc08                 | LR__4381
2dc08     24 00 90 FD | 	jmp	#LR__4382
2dc0c     3C 00 90 FD | 	jmp	#LR__4383
2dc10     54 00 90 FD | 	jmp	#LR__4384
2dc14     5C 00 90 FD | 	jmp	#LR__4385
2dc18     64 00 90 FD | 	jmp	#LR__4386
2dc1c     6C 00 90 FD | 	jmp	#LR__4387
2dc20     74 00 90 FD | 	jmp	#LR__4388
2dc24     7C 00 90 FD | 	jmp	#LR__4389
2dc28     84 00 90 FD | 	jmp	#LR__4390
2dc2c     A0 00 90 FD | 	jmp	#LR__4392
2dc30                 | LR__4382
2dc30     01 03 32 F9 | 	getword	_var02, _var02, #0
2dc34     04 09 32 F9 | 	getword	_var05, _var05, #0
2dc38     04 03 82 F1 | 	sub	_var02, _var05
2dc3c     01 02 66 F0 | 	shl	_var02, #1
2dc40     03 03 02 F1 | 	add	_var02, _var04
2dc44     01 03 E2 FA | 	rdword	_var02, _var02
2dc48     84 00 90 FD | 	jmp	#LR__4392
2dc4c                 | LR__4383
2dc4c     01 05 32 F9 | 	getword	_var03, _var02, #0
2dc50     01 03 32 F9 | 	getword	_var02, _var02, #0
2dc54     04 09 32 F9 | 	getword	_var05, _var05, #0
2dc58     04 03 82 F1 | 	sub	_var02, _var05
2dc5c     01 02 06 F5 | 	and	_var02, #1
2dc60     02 03 C2 F2 | 	subr	_var02, _var03
2dc64     68 00 90 FD | 	jmp	#LR__4392
2dc68                 | LR__4384
2dc68     01 03 32 F9 | 	getword	_var02, _var02, #0
2dc6c     10 02 86 F1 | 	sub	_var02, #16
2dc70     5C 00 90 FD | 	jmp	#LR__4392
2dc74                 | LR__4385
2dc74     01 03 32 F9 | 	getword	_var02, _var02, #0
2dc78     20 02 86 F1 | 	sub	_var02, #32
2dc7c     50 00 90 FD | 	jmp	#LR__4392
2dc80                 | LR__4386
2dc80     01 03 32 F9 | 	getword	_var02, _var02, #0
2dc84     30 02 86 F1 | 	sub	_var02, #48
2dc88     44 00 90 FD | 	jmp	#LR__4392
2dc8c                 | LR__4387
2dc8c     01 03 32 F9 | 	getword	_var02, _var02, #0
2dc90     1A 02 86 F1 | 	sub	_var02, #26
2dc94     38 00 90 FD | 	jmp	#LR__4392
2dc98                 | LR__4388
2dc98     01 03 32 F9 | 	getword	_var02, _var02, #0
2dc9c     08 02 06 F1 | 	add	_var02, #8
2dca0     2C 00 90 FD | 	jmp	#LR__4392
2dca4                 | LR__4389
2dca4     01 03 32 F9 | 	getword	_var02, _var02, #0
2dca8     50 02 86 F1 | 	sub	_var02, #80
2dcac     20 00 90 FD | 	jmp	#LR__4392
2dcb0                 | LR__4390
2dcb0     01 03 32 F9 | 	getword	_var02, _var02, #0
2dcb4     0E 00 00 FF 
2dcb8     60 02 86 F1 | 	sub	_var02, ##7264
2dcbc                 | ' 				}
2dcbc                 | ' 				break;
2dcbc     10 00 90 FD | 	jmp	#LR__4392
2dcc0                 | LR__4391
2dcc0     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2dcc4     02 0A 06 AA |  if_e	mul	_var06, #2
2dcc8     05 07 02 A1 |  if_e	add	_var04, _var06
2dccc     D8 FE 9F FD | 	jmp	#LR__4380
2dcd0                 | LR__4392
2dcd0     01 01 32 F9 | 	getword	_var01, _var02, #0
2dcd4                 | LR__4393
2dcd4                 | ' 		}
2dcd4                 | ' 		uni = uc;
2dcd4                 | ' 	}
2dcd4                 | ' 
2dcd4                 | ' 	return uni;
2dcd4     00 FB 01 F6 | 	mov	result1, _var01
2dcd8                 | _fatfs_cc_ff_wtoupper_ret
2dcd8     2D 00 64 FD | 	ret
2dcdc                 | 
2dcdc                 | _fatfs_cc_strncpy
2dcdc     09 01 02 F6 | 	mov	_var01, arg01
2dce0     97 12 48 FB | 	callpa	#(@LR__4401-@LR__4400)>>2,fcache_load_ptr_
2dce4                 | ' 
2dce4                 | ' 	dscan = dst;
2dce4                 | ' 	sscan = src;
2dce4                 | ' 	count = n;
2dce4                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2dce4                 | LR__4400
2dce4     01 16 86 F1 | 	sub	arg03, #1
2dce8     00 16 56 F2 | 	cmps	arg03, #0 wc
2dcec     18 00 90 CD |  if_b	jmp	#LR__4402
2dcf0     0A FB C1 FA | 	rdbyte	result1, arg02
2dcf4     00 FB 41 FC | 	wrbyte	result1, _var01
2dcf8     01 14 06 F1 | 	add	arg02, #1
2dcfc     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2dd00                 | ' 		continue;
2dd00     01 00 06 F1 | 	add	_var01, #1
2dd04     DC FF 9F 5D |  if_ne	jmp	#LR__4400
2dd08                 | LR__4401
2dd08                 | LR__4402
2dd08     97 0C 48 FB | 	callpa	#(@LR__4404-@LR__4403)>>2,fcache_load_ptr_
2dd0c                 | ' 	while (--count >= 0)
2dd0c                 | LR__4403
2dd0c     01 16 86 F1 | 	sub	arg03, #1
2dd10     00 16 56 F2 | 	cmps	arg03, #0 wc
2dd14     00 03 02 36 |  if_ae	mov	_var02, _var01
2dd18     01 00 06 31 |  if_ae	add	_var01, #1
2dd1c     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2dd20     E8 FF 9F 3D |  if_ae	jmp	#LR__4403
2dd24                 | LR__4404
2dd24                 | ' 		*dscan++ = '\0';
2dd24                 | ' 	return(dst);
2dd24     09 FB 01 F6 | 	mov	result1, arg01
2dd28                 | _fatfs_cc_strncpy_ret
2dd28     2D 00 64 FD | 	ret
2dd2c                 | 
2dd2c                 | _fatfs_cc_memcmp
2dd2c                 | ' 	for (n = size; n > 0; n--)
2dd2c     00 16 0E F2 | 	cmp	arg03, #0 wz
2dd30     28 00 90 AD |  if_e	jmp	#LR__4411
2dd34                 | LR__4410
2dd34     09 01 C2 FA | 	rdbyte	_var01, arg01
2dd38     0A 03 C2 FA | 	rdbyte	_var02, arg02
2dd3c     01 01 0A F2 | 	cmp	_var01, _var02 wz
2dd40     01 12 06 A1 |  if_e	add	arg01, #1
2dd44     01 14 06 A1 |  if_e	add	arg02, #1
2dd48                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2dd48     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2dd4c     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2dd50     01 FB 81 51 |  if_ne	sub	result1, _var02
2dd54     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2dd58     F6 17 6E FB | 	djnz	arg03, #LR__4410
2dd5c                 | LR__4411
2dd5c                 | ' 
2dd5c                 | ' 	return(0);
2dd5c     00 FA 05 F6 | 	mov	result1, #0
2dd60                 | _fatfs_cc_memcmp_ret
2dd60     2D 00 64 FD | 	ret
2dd64                 | 
2dd64                 | _fatfs_cc_strncmp
2dd64     09 01 0A F6 | 	mov	_var01, arg01 wz
2dd68     14 00 90 5D |  if_ne	jmp	#LR__4420
2dd6c                 | ' 		return scan2 ? -1 : 0;
2dd6c     00 14 0E F2 | 	cmp	arg02, #0 wz
2dd70     01 02 66 56 |  if_ne	neg	_var02, #1
2dd74     00 02 06 A6 |  if_e	mov	_var02, #0
2dd78     01 FB 01 F6 | 	mov	result1, _var02
2dd7c     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2dd80                 | LR__4420
2dd80     00 14 0E F2 | 	cmp	arg02, #0 wz
2dd84     01 FA 05 A6 |  if_e	mov	result1, #1
2dd88     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2dd8c     0B 05 02 F6 | 	mov	_var03, arg03
2dd90     97 16 48 FB | 	callpa	#(@LR__4422-@LR__4421)>>2,fcache_load_ptr_
2dd94                 | ' 	count = n;
2dd94                 | ' 	do {
2dd94                 | LR__4421
2dd94     00 07 C2 FA | 	rdbyte	_var04, _var01
2dd98     0A 09 02 F6 | 	mov	_var05, arg02
2dd9c     04 0B C2 FA | 	rdbyte	_var06, _var05
2dda0     01 04 86 F1 | 	sub	_var03, #1
2dda4     00 04 56 F2 | 	cmps	_var03, #0 wc
2dda8     01 00 06 F1 | 	add	_var01, #1
2ddac     01 14 06 F1 | 	add	arg02, #1
2ddb0     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2ddb4     08 00 90 2D |  if_nc_and_z	jmp	#LR__4423
2ddb8     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2ddbc     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4421
2ddc0                 | LR__4422
2ddc0                 | LR__4423
2ddc0     00 04 56 F2 | 	cmps	_var03, #0 wc
2ddc4                 | ' 		return(0);
2ddc4     00 FA 05 C6 |  if_b	mov	result1, #0
2ddc8     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2ddcc     05 07 0A F2 | 	cmp	_var04, _var06 wz
2ddd0                 | ' 		return(0);
2ddd0     00 FA 05 A6 |  if_e	mov	result1, #0
2ddd4     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2ddd8     00 06 0E F2 | 	cmp	_var04, #0 wz
2dddc                 | ' 		return(-1);
2dddc     01 FA 65 A6 |  if_e	neg	result1, #1
2dde0     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2dde4     00 0A 0E F2 | 	cmp	_var06, #0 wz
2dde8                 | ' 		return(1);
2dde8     01 FA 05 A6 |  if_e	mov	result1, #1
2ddec                 | ' 		return(c1 - c2);
2ddec     03 FB 01 56 |  if_ne	mov	result1, _var04
2ddf0     05 FB 81 51 |  if_ne	sub	result1, _var06
2ddf4                 | _fatfs_cc_strncmp_ret
2ddf4     2D 00 64 FD | 	ret
2ddf8                 | 
2ddf8                 | _fatfs_cc_strchr
2ddf8                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
2ddf8                 | ' 	while ((c = *s++) != (char) charwanted)
2ddf8                 | LR__4430
2ddf8     09 01 02 F6 | 	mov	_var01, arg01
2ddfc     00 03 C2 FA | 	rdbyte	_var02, _var01
2de00     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2de04     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2de08     03 05 0A F2 | 	cmp	_var03, _var04 wz
2de0c     01 12 06 F1 | 	add	arg01, #1
2de10     14 00 90 AD |  if_e	jmp	#LR__4431
2de14     01 05 02 F6 | 	mov	_var03, _var02
2de18     07 04 4E F7 | 	zerox	_var03, #7 wz
2de1c     00 FA 05 A6 |  if_e	mov	result1, #0
2de20     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2de24     D0 FF 9F FD | 	jmp	#LR__4430
2de28                 | LR__4431
2de28                 | ' 	return((char *)--s);
2de28     01 12 86 F1 | 	sub	arg01, #1
2de2c     09 FB 01 F6 | 	mov	result1, arg01
2de30                 | _fatfs_cc_strchr_ret
2de30     2D 00 64 FD | 	ret
2de34                 | 
2de34                 | _fatfs_cc_disk_initialize
2de34     04 4A 05 F6 | 	mov	COUNT_, #4
2de38     A8 00 A0 FD | 	call	#pushregs_
2de3c     40 F0 07 F1 | 	add	ptra, #64
2de40     04 4E 05 F1 | 	add	fp, #4
2de44     A7 12 42 FC | 	wrbyte	arg01, fp
2de48     01 00 00 FF 
2de4c     14 E4 05 F1 | 	add	objptr, ##532
2de50     F2 18 02 FB | 	rdlong	arg04, objptr
2de54     2C 4E 05 F1 | 	add	fp, #44
2de58     A7 18 62 FC | 	wrlong	arg04, fp
2de5c     04 E4 85 F1 | 	sub	objptr, #4
2de60     F2 18 02 FB | 	rdlong	arg04, objptr
2de64     04 4E 05 F1 | 	add	fp, #4
2de68     A7 18 62 FC | 	wrlong	arg04, fp
2de6c     08 E4 05 F1 | 	add	objptr, #8
2de70     F2 18 02 FB | 	rdlong	arg04, objptr
2de74     04 4E 05 F1 | 	add	fp, #4
2de78     A7 18 62 FC | 	wrlong	arg04, fp
2de7c     04 E4 05 F1 | 	add	objptr, #4
2de80     F2 18 02 FB | 	rdlong	arg04, objptr
2de84     04 4E 05 F1 | 	add	fp, #4
2de88     A7 18 62 FC | 	wrlong	arg04, fp
2de8c     04 E4 05 F1 | 	add	objptr, #4
2de90     F2 02 48 FC | 	wrbyte	#1, objptr
2de94     01 00 00 FF 
2de98     20 E4 85 F1 | 	sub	objptr, ##544
2de9c     38 4E 85 F1 | 	sub	fp, #56
2dea0     A7 18 CA FA | 	rdbyte	arg04, fp wz
2dea4     04 4E 85 F1 | 	sub	fp, #4
2dea8                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2dea8                 | '             return RES_NOTRDY;
2dea8     03 FA 05 56 |  if_ne	mov	result1, #3
2deac     D8 05 90 5D |  if_ne	jmp	#LR__4458
2deb0     13 00 00 FF 
2deb4     10 13 06 F6 | 	mov	arg01, ##10000
2deb8     40 95 BF FD | 	call	#__system___waitus
2debc     30 4E 05 F1 | 	add	fp, #48
2dec0     A7 12 02 FB | 	rdlong	arg01, fp
2dec4     09 01 08 FC | 	wrpin	#0, arg01
2dec8     04 4E 05 F1 | 	add	fp, #4
2decc     A7 12 02 FB | 	rdlong	arg01, fp
2ded0     09 01 08 FC | 	wrpin	#0, arg01
2ded4     04 4E 05 F1 | 	add	fp, #4
2ded8     A7 12 02 FB | 	rdlong	arg01, fp
2dedc     09 01 08 FC | 	wrpin	#0, arg01
2dee0     04 4E 05 F1 | 	add	fp, #4
2dee4     A7 12 02 FB | 	rdlong	arg01, fp
2dee8     09 00 80 FF 
2deec     09 01 08 FC | 	wrpin	##4608, arg01
2def0     0C 4E 85 F1 | 	sub	fp, #12
2def4     A7 12 02 FB | 	rdlong	arg01, fp
2def8     59 12 62 FD | 	drvh	arg01
2defc     04 4E 05 F1 | 	add	fp, #4
2df00     A7 12 02 FB | 	rdlong	arg01, fp
2df04     59 12 62 FD | 	drvh	arg01
2df08     04 4E 05 F1 | 	add	fp, #4
2df0c     A7 12 02 FB | 	rdlong	arg01, fp
2df10     59 12 62 FD | 	drvh	arg01
2df14     04 4E 05 F1 | 	add	fp, #4
2df18     A7 12 02 FB | 	rdlong	arg01, fp
2df1c     59 12 62 FD | 	drvh	arg01
2df20     20 4E 85 F1 | 	sub	fp, #32
2df24     00 04 80 FF 
2df28     A7 20 68 FC | 	wrlong	##524304, fp
2df2c     04 4E 05 F1 | 	add	fp, #4
2df30     20 03 80 FF 
2df34     A7 90 68 FC | 	wrlong	##409672, fp
2df38     14 4E 05 F1 | 	add	fp, #20
2df3c     A7 26 02 FB | 	rdlong	local01, fp
2df40     18 4E 85 F1 | 	sub	fp, #24
2df44     A7 16 02 FB | 	rdlong	arg03, fp
2df48     40 26 62 FD | 	dirl	local01
2df4c     A0 03 80 FF 
2df50     13 91 08 FC | 	wrpin	##475208, local01
2df54     13 17 12 FC | 	wxpin	arg03, local01
2df58     13 01 28 FC | 	wypin	#0, local01
2df5c     41 26 62 FD | 	dirh	local01
2df60     1C 4E 05 F1 | 	add	fp, #28
2df64     A7 28 02 FB | 	rdlong	local02, fp
2df68     14 27 82 F1 | 	sub	local01, local02
2df6c     07 26 06 F5 | 	and	local01, #7
2df70     18 26 66 F0 | 	shl	local01, #24
2df74     78 14 06 F6 | 	mov	arg02, #120
2df78     13 15 42 F5 | 	or	arg02, local01
2df7c     14 4E 85 F1 | 	sub	fp, #20
2df80     A7 14 62 FC | 	wrlong	arg02, fp
2df84     14 4E 05 F1 | 	add	fp, #20
2df88     A7 12 02 FB | 	rdlong	arg01, fp
2df8c     10 14 26 F4 | 	bith	arg02, #16
2df90     40 12 62 FD | 	dirl	arg01
2df94     09 15 02 FC | 	wrpin	arg02, arg01
2df98     09 3F 18 FC | 	wxpin	#31, arg01
2df9c     FF FF FF FF 
2dfa0     09 FF 2B FC | 	wypin	##-1, arg01
2dfa4     41 12 62 FD | 	dirh	arg01
2dfa8     04 4E 85 F1 | 	sub	fp, #4
2dfac     A7 14 02 FB | 	rdlong	arg02, fp
2dfb0     08 4E 05 F1 | 	add	fp, #8
2dfb4     A7 2A 02 FB | 	rdlong	local03, fp
2dfb8     15 15 82 F1 | 	sub	arg02, local03
2dfbc     07 14 06 F5 | 	and	arg02, #7
2dfc0     18 14 66 F0 | 	shl	arg02, #24
2dfc4     14 4E 85 F1 | 	sub	fp, #20
2dfc8     A7 14 62 FC | 	wrlong	arg02, fp
2dfcc     29 00 00 FF 
2dfd0     7A 14 46 F5 | 	or	arg02, ##21114
2dfd4     A7 14 62 FC | 	wrlong	arg02, fp
2dfd8     14 4E 05 F1 | 	add	fp, #20
2dfdc     A7 12 02 FB | 	rdlong	arg01, fp
2dfe0     40 12 62 FD | 	dirl	arg01
2dfe4     09 15 02 FC | 	wrpin	arg02, arg01
2dfe8     09 4F 18 FC | 	wxpin	#39, arg01
2dfec     09 01 28 FC | 	wypin	#0, arg01
2dff0     41 12 62 FD | 	dirh	arg01
2dff4     28 4E 85 F1 | 	sub	fp, #40
2dff8     A7 12 02 F6 | 	mov	arg01, fp
2dffc     14 4E 85 F1 | 	sub	fp, #20
2e000     0A 14 06 F6 | 	mov	arg02, #10
2e004     1C 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1203
2e008     00 12 06 F6 | 	mov	arg01, #0
2e00c     00 14 06 F6 | 	mov	arg02, #0
2e010     E8 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1227
2e014     24 80 B0 FD | 	call	#_fatfs_cc_deselect_1213
2e018     64 12 06 F6 | 	mov	arg01, #100
2e01c     DC 93 BF FD | 	call	#__system___waitus
2e020     14 4E 05 F1 | 	add	fp, #20
2e024     A7 12 02 F6 | 	mov	arg01, fp
2e028     14 4E 85 F1 | 	sub	fp, #20
2e02c     0A 14 06 F6 | 	mov	arg02, #10
2e030     F0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1203
2e034     0C 4E 05 F1 | 	add	fp, #12
2e038     A7 00 48 FC | 	wrbyte	#0, fp
2e03c     0C 4E 85 F1 | 	sub	fp, #12
2e040     00 12 06 F6 | 	mov	arg01, #0
2e044     00 14 06 F6 | 	mov	arg02, #0
2e048     B0 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1227
2e04c     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2e050     01 18 0E F2 | 	cmp	arg04, #1 wz
2e054     B8 03 90 5D |  if_ne	jmp	#LR__4457
2e058     08 12 06 F6 | 	mov	arg01, #8
2e05c     AA 15 06 F6 | 	mov	arg02, #426
2e060     98 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1227
2e064     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e068     01 FA 0D F2 | 	cmp	result1, #1 wz
2e06c     98 01 90 5D |  if_ne	jmp	#LR__4443
2e070     14 4E 05 F1 | 	add	fp, #20
2e074     A7 12 02 F6 | 	mov	arg01, fp
2e078     14 4E 85 F1 | 	sub	fp, #20
2e07c     04 14 06 F6 | 	mov	arg02, #4
2e080     A0 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1203
2e084     16 4E 05 F1 | 	add	fp, #22
2e088     A7 2C C2 FA | 	rdbyte	local04, fp
2e08c     16 4E 85 F1 | 	sub	fp, #22
2e090     01 2C 0E F2 | 	cmp	local04, #1 wz
2e094     17 4E 05 A1 |  if_e	add	fp, #23
2e098     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2e09c     17 4E 85 A1 |  if_e	sub	fp, #23
2e0a0     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2e0a4     68 03 90 5D |  if_ne	jmp	#LR__4456
2e0a8                 | ' 				for (tmr = 1000; tmr; tmr--) {
2e0a8     18 4E 05 F1 | 	add	fp, #24
2e0ac     01 00 80 FF 
2e0b0     A7 D0 6B FC | 	wrlong	##1000, fp
2e0b4     18 4E 85 F1 | 	sub	fp, #24
2e0b8                 | LR__4440
2e0b8     18 4E 05 F1 | 	add	fp, #24
2e0bc     A7 26 0A FB | 	rdlong	local01, fp wz
2e0c0     18 4E 85 F1 | 	sub	fp, #24
2e0c4     3C 00 90 AD |  if_e	jmp	#LR__4441
2e0c8     A9 12 06 F6 | 	mov	arg01, #169
2e0cc     1E 14 C6 F9 | 	decod	arg02, #30
2e0d0     28 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1227
2e0d4     FD 2C 02 F6 | 	mov	local04, result1
2e0d8     07 2C 4E F7 | 	zerox	local04, #7 wz
2e0dc     24 00 90 AD |  if_e	jmp	#LR__4441
2e0e0     01 00 00 FF 
2e0e4     E8 13 06 F6 | 	mov	arg01, ##1000
2e0e8     10 93 BF FD | 	call	#__system___waitus
2e0ec     18 4E 05 F1 | 	add	fp, #24
2e0f0     A7 2C 02 FB | 	rdlong	local04, fp
2e0f4     01 2C 86 F1 | 	sub	local04, #1
2e0f8     A7 2C 62 FC | 	wrlong	local04, fp
2e0fc     18 4E 85 F1 | 	sub	fp, #24
2e100     B4 FF 9F FD | 	jmp	#LR__4440
2e104                 | LR__4441
2e104     18 4E 05 F1 | 	add	fp, #24
2e108     A7 2C 0A FB | 	rdlong	local04, fp wz
2e10c     18 4E 85 F1 | 	sub	fp, #24
2e110     4C 00 90 AD |  if_e	jmp	#LR__4442
2e114     3A 12 06 F6 | 	mov	arg01, #58
2e118     00 14 06 F6 | 	mov	arg02, #0
2e11c     DC 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1227
2e120     FD 2A 02 F6 | 	mov	local03, result1
2e124     07 2A 4E F7 | 	zerox	local03, #7 wz
2e128     34 00 90 5D |  if_ne	jmp	#LR__4442
2e12c     14 4E 05 F1 | 	add	fp, #20
2e130     A7 12 02 F6 | 	mov	arg01, fp
2e134     14 4E 85 F1 | 	sub	fp, #20
2e138     04 14 06 F6 | 	mov	arg02, #4
2e13c     E4 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1203
2e140     14 4E 05 F1 | 	add	fp, #20
2e144     A7 26 C2 FA | 	rdbyte	local01, fp
2e148     40 26 CE F7 | 	test	local01, #64 wz
2e14c     0C 2C 06 56 |  if_ne	mov	local04, #12
2e150     04 2C 06 A6 |  if_e	mov	local04, #4
2e154     08 4E 85 F1 | 	sub	fp, #8
2e158     A7 2C 42 FC | 	wrbyte	local04, fp
2e15c     0C 4E 85 F1 | 	sub	fp, #12
2e160                 | LR__4442
2e160     14 2C 06 FB | 	rdlong	local04, #20
2e164     18 4E 05 F1 | 	add	fp, #24
2e168     A7 2C 62 FC | 	wrlong	local04, fp
2e16c     0C 4E 05 F1 | 	add	fp, #12
2e170     A7 2C 02 FB | 	rdlong	local04, fp
2e174     1B 2C 26 F4 | 	bith	local04, #27
2e178     A7 2C 62 FC | 	wrlong	local04, fp
2e17c     0C 4E 85 F1 | 	sub	fp, #12
2e180     A7 2C 02 FB | 	rdlong	local04, fp
2e184     18 4E 85 F1 | 	sub	fp, #24
2e188     68 78 04 FF 
2e18c     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2e190     1C 4E 05 C1 |  if_b	add	fp, #28
2e194     00 01 80 CF 
2e198     A7 08 68 CC |  if_b	wrlong	##131076, fp
2e19c     1C 4E 85 C1 |  if_b	sub	fp, #28
2e1a0     6C 02 90 CD |  if_b	jmp	#LR__4456
2e1a4     18 4E 05 F1 | 	add	fp, #24
2e1a8     A7 2C 02 FB | 	rdlong	local04, fp
2e1ac     18 4E 85 F1 | 	sub	fp, #24
2e1b0     E1 F5 05 FF 
2e1b4     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2e1b8     1C 4E 05 C1 |  if_b	add	fp, #28
2e1bc     00 01 80 CF 
2e1c0     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2e1c4     1C 4E 85 C1 |  if_b	sub	fp, #28
2e1c8     44 02 90 CD |  if_b	jmp	#LR__4456
2e1cc     18 4E 05 F1 | 	add	fp, #24
2e1d0     A7 2C 02 FB | 	rdlong	local04, fp
2e1d4     18 4E 85 F1 | 	sub	fp, #24
2e1d8     3B 58 08 FF 
2e1dc     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2e1e0     1C 4E 05 C1 |  if_b	add	fp, #28
2e1e4     00 01 80 CF 
2e1e8     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2e1ec     1C 4E 85 C1 |  if_b	sub	fp, #28
2e1f0     1C 02 90 CD |  if_b	jmp	#LR__4456
2e1f4     1C 4E 05 F1 | 	add	fp, #28
2e1f8     80 01 80 FF 
2e1fc     A7 10 68 FC | 	wrlong	##196616, fp
2e200     1C 4E 85 F1 | 	sub	fp, #28
2e204     08 02 90 FD | 	jmp	#LR__4456
2e208                 | LR__4443
2e208     A9 12 06 F6 | 	mov	arg01, #169
2e20c     00 14 06 F6 | 	mov	arg02, #0
2e210     E8 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1227
2e214     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2e218     02 2C 16 F2 | 	cmp	local04, #2 wc
2e21c     18 00 90 3D |  if_ae	jmp	#LR__4444
2e220     0C 4E 05 F1 | 	add	fp, #12
2e224     A7 04 48 FC | 	wrbyte	#2, fp
2e228     04 4E 05 F1 | 	add	fp, #4
2e22c     A7 52 49 FC | 	wrbyte	#169, fp
2e230     10 4E 85 F1 | 	sub	fp, #16
2e234     14 00 90 FD | 	jmp	#LR__4445
2e238                 | LR__4444
2e238     0C 4E 05 F1 | 	add	fp, #12
2e23c     A7 02 48 FC | 	wrbyte	#1, fp
2e240     04 4E 05 F1 | 	add	fp, #4
2e244     A7 02 48 FC | 	wrbyte	#1, fp
2e248     10 4E 85 F1 | 	sub	fp, #16
2e24c                 | LR__4445
2e24c                 | ' 				ty =  0x01 ; cmd =  (1) ;
2e24c                 | ' 			}
2e24c                 | ' 			for (tmr = 1000; tmr; tmr--) {
2e24c     18 4E 05 F1 | 	add	fp, #24
2e250     01 00 80 FF 
2e254     A7 D0 6B FC | 	wrlong	##1000, fp
2e258     18 4E 85 F1 | 	sub	fp, #24
2e25c                 | LR__4446
2e25c     18 4E 05 F1 | 	add	fp, #24
2e260     A7 2A 0A FB | 	rdlong	local03, fp wz
2e264     18 4E 85 F1 | 	sub	fp, #24
2e268     44 00 90 AD |  if_e	jmp	#LR__4447
2e26c     10 4E 05 F1 | 	add	fp, #16
2e270     A7 12 C2 FA | 	rdbyte	arg01, fp
2e274     10 4E 85 F1 | 	sub	fp, #16
2e278     00 14 06 F6 | 	mov	arg02, #0
2e27c     7C 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1227
2e280     FD 2C 02 F6 | 	mov	local04, result1
2e284     07 2C 4E F7 | 	zerox	local04, #7 wz
2e288     24 00 90 AD |  if_e	jmp	#LR__4447
2e28c     01 00 00 FF 
2e290     E8 13 06 F6 | 	mov	arg01, ##1000
2e294     64 91 BF FD | 	call	#__system___waitus
2e298     18 4E 05 F1 | 	add	fp, #24
2e29c     A7 2C 02 FB | 	rdlong	local04, fp
2e2a0     01 2C 86 F1 | 	sub	local04, #1
2e2a4     A7 2C 62 FC | 	wrlong	local04, fp
2e2a8     18 4E 85 F1 | 	sub	fp, #24
2e2ac     AC FF 9F FD | 	jmp	#LR__4446
2e2b0                 | LR__4447
2e2b0     18 4E 05 F1 | 	add	fp, #24
2e2b4     A7 2C 0A FB | 	rdlong	local04, fp wz
2e2b8     18 4E 85 F1 | 	sub	fp, #24
2e2bc     14 00 90 AD |  if_e	jmp	#LR__4448
2e2c0     10 12 06 F6 | 	mov	arg01, #16
2e2c4     09 14 C6 F9 | 	decod	arg02, #9
2e2c8     30 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1227
2e2cc     07 FA 4D F7 | 	zerox	result1, #7 wz
2e2d0     0C 00 90 AD |  if_e	jmp	#LR__4449
2e2d4                 | LR__4448
2e2d4     0C 4E 05 F1 | 	add	fp, #12
2e2d8     A7 00 48 FC | 	wrbyte	#0, fp
2e2dc     0C 4E 85 F1 | 	sub	fp, #12
2e2e0                 | LR__4449
2e2e0     14 2C 06 FB | 	rdlong	local04, #20
2e2e4     18 4E 05 F1 | 	add	fp, #24
2e2e8     A7 2C 62 FC | 	wrlong	local04, fp
2e2ec     18 4E 85 F1 | 	sub	fp, #24
2e2f0     F0 FA 02 FF 
2e2f4     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2e2f8     18 00 90 3D |  if_ae	jmp	#LR__4450
2e2fc     24 4E 05 F1 | 	add	fp, #36
2e300     A7 2C 02 FB | 	rdlong	local04, fp
2e304     1B 2C 26 F4 | 	bith	local04, #27
2e308     A7 2C 62 FC | 	wrlong	local04, fp
2e30c     24 4E 85 F1 | 	sub	fp, #36
2e310     2C 00 90 FD | 	jmp	#LR__4451
2e314                 | LR__4450
2e314     18 4E 05 F1 | 	add	fp, #24
2e318     A7 2C 02 FB | 	rdlong	local04, fp
2e31c     18 4E 85 F1 | 	sub	fp, #24
2e320     E1 F5 05 FF 
2e324     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2e328     24 4E 05 C1 |  if_b	add	fp, #36
2e32c     A7 2C 02 CB |  if_b	rdlong	local04, fp
2e330     80 00 04 CF 
2e334     00 2C 46 C5 |  if_b	or	local04, ##134283264
2e338     A7 2C 62 CC |  if_b	wrlong	local04, fp
2e33c     24 4E 85 C1 |  if_b	sub	fp, #36
2e340                 | LR__4451
2e340     18 4E 05 F1 | 	add	fp, #24
2e344     A7 2C 02 FB | 	rdlong	local04, fp
2e348     18 4E 85 F1 | 	sub	fp, #24
2e34c     F0 FA 02 FF 
2e350     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2e354     1C 4E 05 C1 |  if_b	add	fp, #28
2e358     00 01 80 CF 
2e35c     A7 08 68 CC |  if_b	wrlong	##131076, fp
2e360     1C 4E 85 C1 |  if_b	sub	fp, #28
2e364     A8 00 90 CD |  if_b	jmp	#LR__4455
2e368     18 4E 05 F1 | 	add	fp, #24
2e36c     A7 2C 02 FB | 	rdlong	local04, fp
2e370     18 4E 85 F1 | 	sub	fp, #24
2e374     68 78 04 FF 
2e378     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2e37c     1C 4E 05 C1 |  if_b	add	fp, #28
2e380     80 01 80 CF 
2e384     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2e388     1C 4E 85 C1 |  if_b	sub	fp, #28
2e38c     80 00 90 CD |  if_b	jmp	#LR__4454
2e390     18 4E 05 F1 | 	add	fp, #24
2e394     A7 2C 02 FB | 	rdlong	local04, fp
2e398     18 4E 85 F1 | 	sub	fp, #24
2e39c     E1 F5 05 FF 
2e3a0     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2e3a4     1C 4E 05 C1 |  if_b	add	fp, #28
2e3a8     00 02 80 CF 
2e3ac     A7 10 68 CC |  if_b	wrlong	##262152, fp
2e3b0     1C 4E 85 C1 |  if_b	sub	fp, #28
2e3b4     58 00 90 CD |  if_b	jmp	#LR__4453
2e3b8     18 4E 05 F1 | 	add	fp, #24
2e3bc     A7 2C 02 FB | 	rdlong	local04, fp
2e3c0     18 4E 85 F1 | 	sub	fp, #24
2e3c4     59 73 07 FF 
2e3c8     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2e3cc     1C 4E 05 C1 |  if_b	add	fp, #28
2e3d0     80 02 80 CF 
2e3d4     A7 14 68 CC |  if_b	wrlong	##327690, fp
2e3d8     1C 4E 85 C1 |  if_b	sub	fp, #28
2e3dc     30 00 90 CD |  if_b	jmp	#LR__4452
2e3e0     18 4E 05 F1 | 	add	fp, #24
2e3e4     A7 2C 02 FB | 	rdlong	local04, fp
2e3e8     18 4E 85 F1 | 	sub	fp, #24
2e3ec     D1 F0 08 FF 
2e3f0     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2e3f4     1C 4E 05 C1 |  if_b	add	fp, #28
2e3f8     00 03 80 CF 
2e3fc     A7 18 68 CC |  if_b	wrlong	##393228, fp
2e400     1C 4E 85 F3 | 	sumc	fp, #28
2e404     80 03 80 3F 
2e408     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2e40c     1C 4E 85 31 |  if_ae	sub	fp, #28
2e410                 | LR__4452
2e410                 | LR__4453
2e410                 | LR__4454
2e410                 | LR__4455
2e410                 | LR__4456
2e410                 | LR__4457
2e410     0C 4E 05 F1 | 	add	fp, #12
2e414     A7 2C C2 FA | 	rdbyte	local04, fp
2e418     01 00 00 FF 
2e41c     21 E4 05 F1 | 	add	objptr, ##545
2e420     F2 2C 42 FC | 	wrbyte	local04, objptr
2e424     A7 26 CA FA | 	rdbyte	local01, fp wz
2e428     00 2C 06 56 |  if_ne	mov	local04, #0
2e42c     01 2C 06 A6 |  if_e	mov	local04, #1
2e430     20 4E 05 F1 | 	add	fp, #32
2e434     A7 2C 42 FC | 	wrbyte	local04, fp
2e438     A7 2C C2 FA | 	rdbyte	local04, fp
2e43c     2C 4E 85 F1 | 	sub	fp, #44
2e440     01 E4 85 F1 | 	sub	objptr, #1
2e444     F2 2C 42 FC | 	wrbyte	local04, objptr
2e448     01 00 00 FF 
2e44c     20 E4 85 F1 | 	sub	objptr, ##544
2e450     E8 7B B0 FD | 	call	#_fatfs_cc_deselect_1213
2e454     34 4E 05 F1 | 	add	fp, #52
2e458     A7 12 02 FB | 	rdlong	arg01, fp
2e45c     18 4E 85 F1 | 	sub	fp, #24
2e460     A7 14 02 FB | 	rdlong	arg02, fp
2e464     09 15 12 FC | 	wxpin	arg02, arg01
2e468     1C 4E 05 F1 | 	add	fp, #28
2e46c     A7 12 02 FB | 	rdlong	arg01, fp
2e470     14 4E 85 F1 | 	sub	fp, #20
2e474     A7 14 02 FB | 	rdlong	arg02, fp
2e478     09 15 02 FC | 	wrpin	arg02, arg01
2e47c                 | ' 
2e47c                 | ' 		}
2e47c                 | ' 	}
2e47c                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2e47c                 | ' 	CardType = ty;
2e47c                 | ' 	s = ty ? 0 :  0x01 ;
2e47c                 | ' 	Stat = s;
2e47c                 | ' 
2e47c                 | ' 	deselect();
2e47c                 | ' 
2e47c                 | ' 
2e47c                 | ' 	_wxpin( PIN_CLK, ck_div );
2e47c                 | ' 	_wrpin( PIN_DI, spm_tx );
2e47c                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2e47c                 | ' 	return s;
2e47c     08 4E 05 F1 | 	add	fp, #8
2e480     A7 FA C1 FA | 	rdbyte	result1, fp
2e484     2C 4E 85 F1 | 	sub	fp, #44
2e488                 | LR__4458
2e488     A7 F0 03 F6 | 	mov	ptra, fp
2e48c     B2 00 A0 FD | 	call	#popregs_
2e490                 | _fatfs_cc_disk_initialize_ret
2e490     2D 00 64 FD | 	ret
2e494                 | 
2e494                 | _fatfs_cc_disk_read
2e494     05 4A 05 F6 | 	mov	COUNT_, #5
2e498     A8 00 A0 FD | 	call	#pushregs_
2e49c     0A 27 02 F6 | 	mov	local01, arg02
2e4a0     0B 29 02 F6 | 	mov	local02, arg03
2e4a4     0C 2B 02 F6 | 	mov	local03, arg04
2e4a8     00 12 0E F2 | 	cmp	arg01, #0 wz
2e4ac     01 FA 05 56 |  if_ne	mov	result1, #1
2e4b0                 | ' 
2e4b0                 | ' 	return Stat;
2e4b0     01 00 00 AF 
2e4b4     20 E4 05 A1 |  if_e	add	objptr, ##544
2e4b8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2e4bc     01 00 00 AF 
2e4c0     20 E4 85 A1 |  if_e	sub	objptr, ##544
2e4c4     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e4c8     01 FA CD F7 | 	test	result1, #1 wz
2e4cc     03 FA 05 56 |  if_ne	mov	result1, #3
2e4d0     84 00 90 5D |  if_ne	jmp	#LR__4462
2e4d4     01 00 00 FF 
2e4d8     21 E4 05 F1 | 	add	objptr, ##545
2e4dc     F2 2C C2 FA | 	rdbyte	local04, objptr
2e4e0     01 00 00 FF 
2e4e4     21 E4 85 F1 | 	sub	objptr, ##545
2e4e8     08 2C CE F7 | 	test	local04, #8 wz
2e4ec     09 28 66 A0 |  if_e	shl	local02, #9
2e4f0     02 2A 16 F2 | 	cmp	local03, #2 wc
2e4f4     12 2C 06 36 |  if_ae	mov	local04, #18
2e4f8     11 2C 06 C6 |  if_b	mov	local04, #17
2e4fc     14 15 02 F6 | 	mov	arg02, local02
2e500     16 13 02 F6 | 	mov	arg01, local04
2e504     F4 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1227
2e508     FD 2E 02 F6 | 	mov	local05, result1
2e50c     07 2E 4E F7 | 	zerox	local05, #7 wz
2e510     30 00 90 5D |  if_ne	jmp	#LR__4461
2e514                 | ' 		do {
2e514                 | LR__4460
2e514     13 13 02 F6 | 	mov	arg01, local01
2e518     09 14 C6 F9 | 	decod	arg02, #9
2e51c     30 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1221
2e520     00 FA 0D F2 | 	cmp	result1, #0 wz
2e524     01 00 00 5F 
2e528     00 26 06 51 |  if_ne	add	local01, ##512
2e52c     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4460
2e530     16 2D E2 F8 | 	getbyte	local04, local04, #0
2e534     12 2C 0E F2 | 	cmp	local04, #18 wz
2e538     0C 12 06 A6 |  if_e	mov	arg01, #12
2e53c     00 14 06 A6 |  if_e	mov	arg02, #0
2e540     B8 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1227
2e544                 | LR__4461
2e544     F4 7A B0 FD | 	call	#_fatfs_cc_deselect_1213
2e548                 | ' 	}
2e548                 | ' 	deselect();
2e548                 | ' 
2e548                 | ' 	return count ? RES_ERROR : RES_OK;
2e548     00 2A 0E F2 | 	cmp	local03, #0 wz
2e54c     01 2E 06 56 |  if_ne	mov	local05, #1
2e550     00 2E 06 A6 |  if_e	mov	local05, #0
2e554     17 FB 01 F6 | 	mov	result1, local05
2e558                 | LR__4462
2e558     A7 F0 03 F6 | 	mov	ptra, fp
2e55c     B2 00 A0 FD | 	call	#popregs_
2e560                 | _fatfs_cc_disk_read_ret
2e560     2D 00 64 FD | 	ret
2e564                 | 
2e564                 | _fatfs_cc_disk_write
2e564     04 4A 05 F6 | 	mov	COUNT_, #4
2e568     A8 00 A0 FD | 	call	#pushregs_
2e56c     0A 27 02 F6 | 	mov	local01, arg02
2e570     0C 29 02 F6 | 	mov	local02, arg04
2e574     0B 2B 02 F6 | 	mov	local03, arg03
2e578     00 12 0E F2 | 	cmp	arg01, #0 wz
2e57c     01 FA 05 56 |  if_ne	mov	result1, #1
2e580                 | ' 
2e580                 | ' 	return Stat;
2e580     01 00 00 AF 
2e584     20 E4 05 A1 |  if_e	add	objptr, ##544
2e588     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2e58c     01 00 00 AF 
2e590     20 E4 85 A1 |  if_e	sub	objptr, ##544
2e594     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e598     01 FA CD F7 | 	test	result1, #1 wz
2e59c     03 FA 05 56 |  if_ne	mov	result1, #3
2e5a0     D4 00 90 5D |  if_ne	jmp	#LR__4474
2e5a4     01 00 00 FF 
2e5a8     21 E4 05 F1 | 	add	objptr, ##545
2e5ac     F2 16 C2 FA | 	rdbyte	arg03, objptr
2e5b0     01 00 00 FF 
2e5b4     21 E4 85 F1 | 	sub	objptr, ##545
2e5b8     08 16 CE F7 | 	test	arg03, #8 wz
2e5bc     09 2A 66 A0 |  if_e	shl	local03, #9
2e5c0     01 28 0E F2 | 	cmp	local02, #1 wz
2e5c4     30 00 90 5D |  if_ne	jmp	#LR__4470
2e5c8     18 12 06 F6 | 	mov	arg01, #24
2e5cc     15 15 02 F6 | 	mov	arg02, local03
2e5d0     28 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1227
2e5d4     FD 2C 02 F6 | 	mov	local04, result1
2e5d8     07 2C 4E F7 | 	zerox	local04, #7 wz
2e5dc     84 00 90 5D |  if_ne	jmp	#LR__4473
2e5e0     13 13 02 F6 | 	mov	arg01, local01
2e5e4     FE 14 06 F6 | 	mov	arg02, #254
2e5e8     44 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1223
2e5ec     00 FA 0D F2 | 	cmp	result1, #0 wz
2e5f0     00 28 06 56 |  if_ne	mov	local02, #0
2e5f4     6C 00 90 FD | 	jmp	#LR__4473
2e5f8                 | LR__4470
2e5f8     01 00 00 FF 
2e5fc     21 E4 05 F1 | 	add	objptr, ##545
2e600     F2 2C C2 FA | 	rdbyte	local04, objptr
2e604     01 00 00 FF 
2e608     21 E4 85 F1 | 	sub	objptr, ##545
2e60c     06 2C CE F7 | 	test	local04, #6 wz
2e610     97 12 06 56 |  if_ne	mov	arg01, #151
2e614     14 15 02 56 |  if_ne	mov	arg02, local02
2e618     E0 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1227
2e61c     15 15 02 F6 | 	mov	arg02, local03
2e620     19 12 06 F6 | 	mov	arg01, #25
2e624     D4 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1227
2e628     FD 2C 02 F6 | 	mov	local04, result1
2e62c     07 2C 4E F7 | 	zerox	local04, #7 wz
2e630     30 00 90 5D |  if_ne	jmp	#LR__4472
2e634                 | ' 			do {
2e634                 | LR__4471
2e634     13 13 02 F6 | 	mov	arg01, local01
2e638     FC 14 06 F6 | 	mov	arg02, #252
2e63c     F0 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1223
2e640     00 FA 0D F2 | 	cmp	result1, #0 wz
2e644     01 00 00 5F 
2e648     00 26 06 51 |  if_ne	add	local01, ##512
2e64c     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4471
2e650     00 12 06 F6 | 	mov	arg01, #0
2e654     FD 14 06 F6 | 	mov	arg02, #253
2e658     D4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1223
2e65c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e660     01 28 06 A6 |  if_e	mov	local02, #1
2e664                 | LR__4472
2e664                 | LR__4473
2e664     D4 79 B0 FD | 	call	#_fatfs_cc_deselect_1213
2e668                 | ' 				count = 1;
2e668                 | ' 		}
2e668                 | ' 	}
2e668                 | ' 	deselect();
2e668                 | ' 
2e668                 | ' 	return count ? RES_ERROR : RES_OK;
2e668     00 28 0E F2 | 	cmp	local02, #0 wz
2e66c     01 2C 06 56 |  if_ne	mov	local04, #1
2e670     00 2C 06 A6 |  if_e	mov	local04, #0
2e674     16 FB 01 F6 | 	mov	result1, local04
2e678                 | LR__4474
2e678     A7 F0 03 F6 | 	mov	ptra, fp
2e67c     B2 00 A0 FD | 	call	#popregs_
2e680                 | _fatfs_cc_disk_write_ret
2e680     2D 00 64 FD | 	ret
2e684                 | 
2e684                 | _fatfs_cc_disk_ioctl
2e684     01 4A 05 F6 | 	mov	COUNT_, #1
2e688     A8 00 A0 FD | 	call	#pushregs_
2e68c     30 F0 07 F1 | 	add	ptra, #48
2e690     04 4E 05 F1 | 	add	fp, #4
2e694     A7 12 42 FC | 	wrbyte	arg01, fp
2e698     04 4E 05 F1 | 	add	fp, #4
2e69c     A7 14 42 FC | 	wrbyte	arg02, fp
2e6a0     04 4E 05 F1 | 	add	fp, #4
2e6a4     A7 16 62 FC | 	wrlong	arg03, fp
2e6a8     08 4E 85 F1 | 	sub	fp, #8
2e6ac     A7 12 CA FA | 	rdbyte	arg01, fp wz
2e6b0     04 4E 85 F1 | 	sub	fp, #4
2e6b4     01 FA 05 56 |  if_ne	mov	result1, #1
2e6b8                 | ' 
2e6b8                 | ' 	return Stat;
2e6b8     01 00 00 AF 
2e6bc     20 E4 05 A1 |  if_e	add	objptr, ##544
2e6c0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2e6c4     01 00 00 AF 
2e6c8     20 E4 85 A1 |  if_e	sub	objptr, ##544
2e6cc     FD FA E1 F8 | 	getbyte	result1, result1, #0
2e6d0     01 FA CD F7 | 	test	result1, #1 wz
2e6d4     03 FA 05 56 |  if_ne	mov	result1, #3
2e6d8     E4 01 90 5D |  if_ne	jmp	#LR__4488
2e6dc     10 4E 05 F1 | 	add	fp, #16
2e6e0     A7 02 68 FC | 	wrlong	#1, fp
2e6e4                 | ' 
2e6e4                 | ' 	res = RES_ERROR;
2e6e4                 | ' 	switch (ctrl) {
2e6e4     08 4E 85 F1 | 	sub	fp, #8
2e6e8     A7 26 C2 FA | 	rdbyte	local01, fp
2e6ec     08 4E 85 F1 | 	sub	fp, #8
2e6f0     04 26 26 F3 | 	fle	local01, #4
2e6f4     30 26 62 FD | 	jmprel	local01
2e6f8                 | LR__4480
2e6f8     10 00 90 FD | 	jmp	#LR__4481
2e6fc     24 00 90 FD | 	jmp	#LR__4482
2e700     A0 01 90 FD | 	jmp	#LR__4486
2e704     80 01 90 FD | 	jmp	#LR__4485
2e708     98 01 90 FD | 	jmp	#LR__4486
2e70c                 | LR__4481
2e70c     B0 79 B0 FD | 	call	#_fatfs_cc_select_1217
2e710     00 FA 0D F2 | 	cmp	result1, #0 wz
2e714     10 4E 05 51 |  if_ne	add	fp, #16
2e718     A7 00 68 5C |  if_ne	wrlong	#0, fp
2e71c     10 4E 85 51 |  if_ne	sub	fp, #16
2e720                 | ' 			break;
2e720     8C 01 90 FD | 	jmp	#LR__4487
2e724                 | LR__4482
2e724     09 12 06 F6 | 	mov	arg01, #9
2e728     00 14 06 F6 | 	mov	arg02, #0
2e72c     CC 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1227
2e730     FD 26 02 F6 | 	mov	local01, result1
2e734     07 26 4E F7 | 	zerox	local01, #7 wz
2e738     74 01 90 5D |  if_ne	jmp	#LR__4487
2e73c     18 4E 05 F1 | 	add	fp, #24
2e740     A7 12 02 F6 | 	mov	arg01, fp
2e744     18 4E 85 F1 | 	sub	fp, #24
2e748     10 14 06 F6 | 	mov	arg02, #16
2e74c     00 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1221
2e750     00 FA 0D F2 | 	cmp	result1, #0 wz
2e754     58 01 90 AD |  if_e	jmp	#LR__4487
2e758     18 4E 05 F1 | 	add	fp, #24
2e75c     A7 26 C2 FA | 	rdbyte	local01, fp
2e760     18 4E 85 F1 | 	sub	fp, #24
2e764     06 26 46 F0 | 	shr	local01, #6
2e768     01 26 0E F2 | 	cmp	local01, #1 wz
2e76c     5C 00 90 5D |  if_ne	jmp	#LR__4483
2e770     21 4E 05 F1 | 	add	fp, #33
2e774     A7 26 C2 FA | 	rdbyte	local01, fp
2e778     01 4E 85 F1 | 	sub	fp, #1
2e77c     A7 FA C1 FA | 	rdbyte	result1, fp
2e780     FD FA 31 F9 | 	getword	result1, result1, #0
2e784     08 FA 65 F0 | 	shl	result1, #8
2e788     FD 26 02 F1 | 	add	local01, result1
2e78c     01 4E 85 F1 | 	sub	fp, #1
2e790     A7 FA C1 FA | 	rdbyte	result1, fp
2e794     3F FA 05 F5 | 	and	result1, #63
2e798     10 FA 65 F0 | 	shl	result1, #16
2e79c     FD 26 02 F1 | 	add	local01, result1
2e7a0     01 26 06 F1 | 	add	local01, #1
2e7a4     09 4E 05 F1 | 	add	fp, #9
2e7a8     A7 26 62 FC | 	wrlong	local01, fp
2e7ac     1C 4E 85 F1 | 	sub	fp, #28
2e7b0     A7 26 02 FB | 	rdlong	local01, fp
2e7b4     1C 4E 05 F1 | 	add	fp, #28
2e7b8     A7 FA 01 FB | 	rdlong	result1, fp
2e7bc     28 4E 85 F1 | 	sub	fp, #40
2e7c0     0A FA 65 F0 | 	shl	result1, #10
2e7c4     13 FB 61 FC | 	wrlong	result1, local01
2e7c8     AC 00 90 FD | 	jmp	#LR__4484
2e7cc                 | LR__4483
2e7cc     1D 4E 05 F1 | 	add	fp, #29
2e7d0     A7 26 C2 FA | 	rdbyte	local01, fp
2e7d4     13 27 42 F8 | 	getnib	local01, local01, #0
2e7d8     05 4E 05 F1 | 	add	fp, #5
2e7dc     A7 FA C1 FA | 	rdbyte	result1, fp
2e7e0     80 FA 05 F5 | 	and	result1, #128
2e7e4     07 FA C5 F0 | 	sar	result1, #7
2e7e8     FD 26 02 F1 | 	add	local01, result1
2e7ec     01 4E 85 F1 | 	sub	fp, #1
2e7f0     A7 FA C1 FA | 	rdbyte	result1, fp
2e7f4     03 FA 05 F5 | 	and	result1, #3
2e7f8     01 FA 65 F0 | 	shl	result1, #1
2e7fc     FD 26 02 F1 | 	add	local01, result1
2e800     02 26 06 F1 | 	add	local01, #2
2e804     0D 4E 85 F1 | 	sub	fp, #13
2e808     A7 26 42 FC | 	wrbyte	local01, fp
2e80c     0C 4E 05 F1 | 	add	fp, #12
2e810     A7 26 C2 FA | 	rdbyte	local01, fp
2e814     06 26 46 F0 | 	shr	local01, #6
2e818     01 4E 85 F1 | 	sub	fp, #1
2e81c     A7 FA C1 FA | 	rdbyte	result1, fp
2e820     FD FA 31 F9 | 	getword	result1, result1, #0
2e824     02 FA 65 F0 | 	shl	result1, #2
2e828     FD 26 02 F1 | 	add	local01, result1
2e82c     01 4E 85 F1 | 	sub	fp, #1
2e830     A7 FA C1 FA | 	rdbyte	result1, fp
2e834     03 FA 05 F5 | 	and	result1, #3
2e838     FD FA 31 F9 | 	getword	result1, result1, #0
2e83c     0A FA 65 F0 | 	shl	result1, #10
2e840     FD 26 02 F1 | 	add	local01, result1
2e844     01 26 06 F1 | 	add	local01, #1
2e848     0A 4E 05 F1 | 	add	fp, #10
2e84c     A7 26 62 FC | 	wrlong	local01, fp
2e850     1C 4E 85 F1 | 	sub	fp, #28
2e854     A7 26 02 FB | 	rdlong	local01, fp
2e858     1C 4E 05 F1 | 	add	fp, #28
2e85c     A7 FA 01 FB | 	rdlong	result1, fp
2e860     14 4E 85 F1 | 	sub	fp, #20
2e864     A7 16 C2 FA | 	rdbyte	arg03, fp
2e868     14 4E 85 F1 | 	sub	fp, #20
2e86c     09 16 86 F1 | 	sub	arg03, #9
2e870     0B FB 61 F0 | 	shl	result1, arg03
2e874     13 FB 61 FC | 	wrlong	result1, local01
2e878                 | LR__4484
2e878     10 4E 05 F1 | 	add	fp, #16
2e87c     A7 00 68 FC | 	wrlong	#0, fp
2e880     10 4E 85 F1 | 	sub	fp, #16
2e884                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2e884                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2e884                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2e884                 | ' 				}
2e884                 | ' 				res = RES_OK;
2e884                 | ' 			}
2e884                 | ' 			break;
2e884     28 00 90 FD | 	jmp	#LR__4487
2e888                 | LR__4485
2e888     0C 4E 05 F1 | 	add	fp, #12
2e88c     A7 26 02 FB | 	rdlong	local01, fp
2e890     13 01 69 FC | 	wrlong	#128, local01
2e894     04 4E 05 F1 | 	add	fp, #4
2e898     A7 00 68 FC | 	wrlong	#0, fp
2e89c     10 4E 85 F1 | 	sub	fp, #16
2e8a0                 | ' 			*(DWORD*)buff = 128;
2e8a0                 | ' 			res = RES_OK;
2e8a0                 | ' 			break;
2e8a0     0C 00 90 FD | 	jmp	#LR__4487
2e8a4                 | LR__4486
2e8a4     10 4E 05 F1 | 	add	fp, #16
2e8a8     A7 08 68 FC | 	wrlong	#4, fp
2e8ac     10 4E 85 F1 | 	sub	fp, #16
2e8b0                 | LR__4487
2e8b0     88 77 B0 FD | 	call	#_fatfs_cc_deselect_1213
2e8b4                 | ' 			res = RES_PARERR;
2e8b4                 | ' 	}
2e8b4                 | ' 
2e8b4                 | ' 	deselect();
2e8b4                 | ' 
2e8b4                 | ' 	return res;
2e8b4     10 4E 05 F1 | 	add	fp, #16
2e8b8     A7 FA 01 FB | 	rdlong	result1, fp
2e8bc     10 4E 85 F1 | 	sub	fp, #16
2e8c0                 | LR__4488
2e8c0     A7 F0 03 F6 | 	mov	ptra, fp
2e8c4     B2 00 A0 FD | 	call	#popregs_
2e8c8                 | _fatfs_cc_disk_ioctl_ret
2e8c8     2D 00 64 FD | 	ret
2e8cc                 | 
2e8cc                 | _fatfs_cc_disk_setpins
2e8cc     00 12 0E F2 | 	cmp	arg01, #0 wz
2e8d0     01 FA 65 56 |  if_ne	neg	result1, #1
2e8d4     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2e8d8     01 00 00 FF 
2e8dc     10 E4 05 F1 | 	add	objptr, ##528
2e8e0     F2 14 62 FC | 	wrlong	arg02, objptr
2e8e4     04 E4 05 F1 | 	add	objptr, #4
2e8e8     F2 16 62 FC | 	wrlong	arg03, objptr
2e8ec     04 E4 05 F1 | 	add	objptr, #4
2e8f0     F2 18 62 FC | 	wrlong	arg04, objptr
2e8f4     04 E4 05 F1 | 	add	objptr, #4
2e8f8     F2 1A 62 FC | 	wrlong	arg05, objptr
2e8fc     01 00 00 FF 
2e900     1C E4 85 F1 | 	sub	objptr, ##540
2e904     00 FA 05 F6 | 	mov	result1, #0
2e908                 | _fatfs_cc_disk_setpins_ret
2e908     2D 00 64 FD | 	ret
2e90c                 | 
2e90c                 | _fatfs_cc_tchar2uni
2e90c     09 01 02 FB | 	rdlong	_var01, arg01
2e910     00 03 02 F6 | 	mov	_var02, _var01
2e914     01 00 06 F1 | 	add	_var01, #1
2e918     00 05 02 F6 | 	mov	_var03, _var01
2e91c     01 07 C2 FA | 	rdbyte	_var04, _var02
2e920     80 06 CE F7 | 	test	_var04, #128 wz
2e924     E8 00 90 AD |  if_e	jmp	#LR__4497
2e928     03 09 02 F6 | 	mov	_var05, _var04
2e92c     E0 08 06 F5 | 	and	_var05, #224
2e930     C0 08 0E F2 | 	cmp	_var05, #192 wz
2e934     1F 06 06 A5 |  if_e	and	_var04, #31
2e938     01 0A 06 A6 |  if_e	mov	_var06, #1
2e93c     34 00 90 AD |  if_e	jmp	#LR__4491
2e940     03 09 02 F6 | 	mov	_var05, _var04
2e944     F0 08 06 F5 | 	and	_var05, #240
2e948     E0 08 0E F2 | 	cmp	_var05, #224 wz
2e94c     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2e950     02 0A 06 A6 |  if_e	mov	_var06, #2
2e954     1C 00 90 AD |  if_e	jmp	#LR__4490
2e958     03 09 02 F6 | 	mov	_var05, _var04
2e95c     F8 08 06 F5 | 	and	_var05, #248
2e960     F0 08 0E F2 | 	cmp	_var05, #240 wz
2e964     07 06 06 A5 |  if_e	and	_var04, #7
2e968     03 0A 06 A6 |  if_e	mov	_var06, #3
2e96c                 | ' 			return 0xFFFFFFFF;
2e96c     01 FA 65 56 |  if_ne	neg	result1, #1
2e970     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2e974                 | LR__4490
2e974                 | LR__4491
2e974                 | ' 		}
2e974                 | ' 		do {
2e974                 | LR__4492
2e974     02 0D C2 FA | 	rdbyte	_var07, _var03
2e978     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2e97c     C0 08 06 F5 | 	and	_var05, #192
2e980     80 08 0E F2 | 	cmp	_var05, #128 wz
2e984     01 04 06 F1 | 	add	_var03, #1
2e988     01 FA 65 56 |  if_ne	neg	result1, #1
2e98c     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2e990     06 06 66 F0 | 	shl	_var04, #6
2e994     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2e998     3F 02 06 F5 | 	and	_var02, #63
2e99c     01 07 42 F5 | 	or	_var04, _var02
2e9a0     F4 0B 6E FB | 	djnz	_var06, #LR__4492
2e9a4     80 06 16 F2 | 	cmp	_var04, #128 wc
2e9a8     24 00 90 CD |  if_b	jmp	#LR__4494
2e9ac     6C 00 00 FF 
2e9b0     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2e9b4     0C 00 90 CD |  if_b	jmp	#LR__4493
2e9b8     70 00 00 FF 
2e9bc     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2e9c0     0C 00 90 CD |  if_b	jmp	#LR__4494
2e9c4                 | LR__4493
2e9c4     80 08 00 FF 
2e9c8     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2e9cc     08 00 90 CD |  if_b	jmp	#LR__4495
2e9d0                 | LR__4494
2e9d0     01 FA 65 F6 | 	neg	result1, #1
2e9d4     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2e9d8                 | LR__4495
2e9d8     80 00 00 FF 
2e9dc     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2e9e0     2C 00 90 CD |  if_b	jmp	#LR__4496
2e9e4     03 03 02 F6 | 	mov	_var02, _var04
2e9e8     80 00 00 FF 
2e9ec     00 02 86 F1 | 	sub	_var02, ##65536
2e9f0     06 02 66 F0 | 	shl	_var02, #6
2e9f4     80 FF 01 FF 
2e9f8     00 02 06 F5 | 	and	_var02, ##67043328
2e9fc     6E 00 6C FF 
2ea00     00 08 06 F6 | 	mov	_var05, ##-671032320
2ea04     01 09 42 F5 | 	or	_var05, _var02
2ea08     09 06 46 F7 | 	zerox	_var04, #9
2ea0c     04 07 42 F5 | 	or	_var04, _var05
2ea10                 | LR__4496
2ea10                 | LR__4497
2ea10     09 05 62 FC | 	wrlong	_var03, arg01
2ea14                 | ' 	}
2ea14                 | ' #line 811 "ff.c"
2ea14                 | ' 	*str = p;
2ea14                 | ' 	return uc;
2ea14     03 FB 01 F6 | 	mov	result1, _var04
2ea18                 | _fatfs_cc_tchar2uni_ret
2ea18     2D 00 64 FD | 	ret
2ea1c                 | 
2ea1c                 | _fatfs_cc_put_utf
2ea1c     80 12 16 F2 | 	cmp	arg01, #128 wc
2ea20     18 00 90 3D |  if_ae	jmp	#LR__4500
2ea24     01 16 16 F2 | 	cmp	arg03, #1 wc
2ea28     00 FA 05 C6 |  if_b	mov	result1, #0
2ea2c     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2ea30     0A 13 42 FC | 	wrbyte	arg01, arg02
2ea34                 | ' 		*buf = (TCHAR)chr;
2ea34                 | ' 		return 1;
2ea34     01 FA 05 F6 | 	mov	result1, #1
2ea38     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2ea3c                 | LR__4500
2ea3c     04 00 00 FF 
2ea40     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2ea44     40 00 90 3D |  if_ae	jmp	#LR__4501
2ea48     02 16 16 F2 | 	cmp	arg03, #2 wc
2ea4c     00 FA 05 C6 |  if_b	mov	result1, #0
2ea50     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2ea54     09 FB 01 F6 | 	mov	result1, arg01
2ea58     06 FA 45 F0 | 	shr	result1, #6
2ea5c     1F FA 05 F5 | 	and	result1, #31
2ea60     C0 16 06 F6 | 	mov	arg03, #192
2ea64     FD 16 42 F5 | 	or	arg03, result1
2ea68     0A 17 42 FC | 	wrbyte	arg03, arg02
2ea6c     01 14 06 F1 | 	add	arg02, #1
2ea70     3F 12 06 F5 | 	and	arg01, #63
2ea74     80 FA 05 F6 | 	mov	result1, #128
2ea78     09 FB 41 F5 | 	or	result1, arg01
2ea7c     0A FB 41 FC | 	wrbyte	result1, arg02
2ea80                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2ea80                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2ea80                 | ' 		return 2;
2ea80     02 FA 05 F6 | 	mov	result1, #2
2ea84     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2ea88                 | LR__4501
2ea88     80 00 00 FF 
2ea8c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2ea90     70 00 90 3D |  if_ae	jmp	#LR__4504
2ea94     03 16 16 F2 | 	cmp	arg03, #3 wc
2ea98     18 00 90 CD |  if_b	jmp	#LR__4502
2ea9c     6C 00 00 FF 
2eaa0     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2eaa4     14 00 90 CD |  if_b	jmp	#LR__4503
2eaa8     70 00 00 FF 
2eaac     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2eab0     08 00 90 3D |  if_ae	jmp	#LR__4503
2eab4                 | LR__4502
2eab4     00 FA 05 F6 | 	mov	result1, #0
2eab8     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2eabc                 | LR__4503
2eabc     09 FB 59 F8 | 	getnib	result1, arg01, #3
2eac0     E0 16 06 F6 | 	mov	arg03, #224
2eac4     FD 16 42 F5 | 	or	arg03, result1
2eac8     0A 17 42 FC | 	wrbyte	arg03, arg02
2eacc     01 14 06 F1 | 	add	arg02, #1
2ead0     09 FB 01 F6 | 	mov	result1, arg01
2ead4     06 FA 45 F0 | 	shr	result1, #6
2ead8     3F FA 05 F5 | 	and	result1, #63
2eadc     80 16 06 F6 | 	mov	arg03, #128
2eae0     FD 16 42 F5 | 	or	arg03, result1
2eae4     0A 17 42 FC | 	wrbyte	arg03, arg02
2eae8     01 14 06 F1 | 	add	arg02, #1
2eaec     3F 12 06 F5 | 	and	arg01, #63
2eaf0     80 FA 05 F6 | 	mov	result1, #128
2eaf4     09 FB 41 F5 | 	or	result1, arg01
2eaf8     0A FB 41 FC | 	wrbyte	result1, arg02
2eafc                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2eafc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2eafc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2eafc                 | ' 		return 3;
2eafc     03 FA 05 F6 | 	mov	result1, #3
2eb00     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2eb04                 | LR__4504
2eb04     04 16 16 F2 | 	cmp	arg03, #4 wc
2eb08     00 FA 05 C6 |  if_b	mov	result1, #0
2eb0c     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2eb10     09 01 02 F6 | 	mov	_var01, arg01
2eb14     E0 01 06 F4 | 	bitl	_var01, #480
2eb18     00 00 6C FF 
2eb1c     00 00 86 F1 | 	sub	_var01, ##-671088640
2eb20     06 00 46 F0 | 	shr	_var01, #6
2eb24     09 13 32 F9 | 	getword	arg01, arg01, #0
2eb28     6E 00 00 FF 
2eb2c     00 12 86 F1 | 	sub	arg01, ##56320
2eb30     00 08 00 FF 
2eb34     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2eb38     02 00 00 CF 
2eb3c     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2eb40     00 FA 05 36 |  if_ae	mov	result1, #0
2eb44     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2eb48     09 01 42 F5 | 	or	_var01, arg01
2eb4c     80 00 00 FF 
2eb50     00 00 06 F1 | 	add	_var01, ##65536
2eb54     00 FB 01 F6 | 	mov	result1, _var01
2eb58     12 FA 45 F0 | 	shr	result1, #18
2eb5c     07 FA 05 F5 | 	and	result1, #7
2eb60     F0 16 06 F6 | 	mov	arg03, #240
2eb64     FD 16 42 F5 | 	or	arg03, result1
2eb68     0A 17 42 FC | 	wrbyte	arg03, arg02
2eb6c     01 14 06 F1 | 	add	arg02, #1
2eb70     00 FB 01 F6 | 	mov	result1, _var01
2eb74     0C FA 45 F0 | 	shr	result1, #12
2eb78     3F FA 05 F5 | 	and	result1, #63
2eb7c     80 16 06 F6 | 	mov	arg03, #128
2eb80     FD 16 42 F5 | 	or	arg03, result1
2eb84     0A 17 42 FC | 	wrbyte	arg03, arg02
2eb88     01 14 06 F1 | 	add	arg02, #1
2eb8c     00 FB 01 F6 | 	mov	result1, _var01
2eb90     06 FA 45 F0 | 	shr	result1, #6
2eb94     3F FA 05 F5 | 	and	result1, #63
2eb98     80 16 06 F6 | 	mov	arg03, #128
2eb9c     FD 16 42 F5 | 	or	arg03, result1
2eba0     0A 17 42 FC | 	wrbyte	arg03, arg02
2eba4     01 14 06 F1 | 	add	arg02, #1
2eba8     3F 00 06 F5 | 	and	_var01, #63
2ebac     80 FA 05 F6 | 	mov	result1, #128
2ebb0     00 FB 41 F5 | 	or	result1, _var01
2ebb4     0A FB 41 FC | 	wrbyte	result1, arg02
2ebb8                 | ' 	chr = (hc | chr) + 0x10000;
2ebb8                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2ebb8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2ebb8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2ebb8                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2ebb8                 | ' 	return 4;
2ebb8     04 FA 05 F6 | 	mov	result1, #4
2ebbc                 | _fatfs_cc_put_utf_ret
2ebbc     2D 00 64 FD | 	ret
2ebc0                 | 
2ebc0                 | _fatfs_cc_sync_window
2ebc0     02 4A 05 F6 | 	mov	COUNT_, #2
2ebc4     A8 00 A0 FD | 	call	#pushregs_
2ebc8     09 27 02 F6 | 	mov	local01, arg01
2ebcc     00 28 06 F6 | 	mov	local02, #0
2ebd0     03 26 06 F1 | 	add	local01, #3
2ebd4     13 FB C9 FA | 	rdbyte	result1, local01 wz
2ebd8     03 26 86 F1 | 	sub	local01, #3
2ebdc     A4 00 90 AD |  if_e	jmp	#LR__4512
2ebe0     01 26 06 F1 | 	add	local01, #1
2ebe4     13 13 C2 FA | 	rdbyte	arg01, local01
2ebe8     33 26 06 F1 | 	add	local01, #51
2ebec     13 15 02 F6 | 	mov	arg02, local01
2ebf0     04 26 86 F1 | 	sub	local01, #4
2ebf4     13 17 02 FB | 	rdlong	arg03, local01
2ebf8     30 26 86 F1 | 	sub	local01, #48
2ebfc     01 18 06 F6 | 	mov	arg04, #1
2ec00     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2ec04     00 FA 0D F2 | 	cmp	result1, #0 wz
2ec08     74 00 90 5D |  if_ne	jmp	#LR__4510
2ec0c     03 26 06 F1 | 	add	local01, #3
2ec10     13 01 48 FC | 	wrbyte	#0, local01
2ec14     2D 26 06 F1 | 	add	local01, #45
2ec18     13 FB 01 FB | 	rdlong	result1, local01
2ec1c     0C 26 86 F1 | 	sub	local01, #12
2ec20     13 19 02 FB | 	rdlong	arg04, local01
2ec24     0C FB 81 F1 | 	sub	result1, arg04
2ec28     08 26 86 F1 | 	sub	local01, #8
2ec2c     13 19 02 FB | 	rdlong	arg04, local01
2ec30     1C 26 86 F1 | 	sub	local01, #28
2ec34     0C FB 11 F2 | 	cmp	result1, arg04 wc
2ec38     48 00 90 3D |  if_ae	jmp	#LR__4511
2ec3c     02 26 06 F1 | 	add	local01, #2
2ec40     13 19 C2 FA | 	rdbyte	arg04, local01
2ec44     02 26 86 F1 | 	sub	local01, #2
2ec48     02 18 0E F2 | 	cmp	arg04, #2 wz
2ec4c     34 00 90 5D |  if_ne	jmp	#LR__4511
2ec50     01 26 06 F1 | 	add	local01, #1
2ec54     13 13 C2 FA | 	rdbyte	arg01, local01
2ec58     33 26 06 F1 | 	add	local01, #51
2ec5c     13 15 02 F6 | 	mov	arg02, local01
2ec60     04 26 86 F1 | 	sub	local01, #4
2ec64     13 17 02 FB | 	rdlong	arg03, local01
2ec68     14 26 86 F1 | 	sub	local01, #20
2ec6c     13 27 02 FB | 	rdlong	local01, local01
2ec70     13 17 02 F1 | 	add	arg03, local01
2ec74     01 18 06 F6 | 	mov	arg04, #1
2ec78     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2ec7c     04 00 90 FD | 	jmp	#LR__4511
2ec80                 | LR__4510
2ec80     01 28 06 F6 | 	mov	local02, #1
2ec84                 | LR__4511
2ec84                 | LR__4512
2ec84                 | ' 			res = FR_DISK_ERR;
2ec84                 | ' 		}
2ec84                 | ' 	}
2ec84                 | ' 	return res;
2ec84     14 FB 01 F6 | 	mov	result1, local02
2ec88     A7 F0 03 F6 | 	mov	ptra, fp
2ec8c     B2 00 A0 FD | 	call	#popregs_
2ec90                 | _fatfs_cc_sync_window_ret
2ec90     2D 00 64 FD | 	ret
2ec94                 | 
2ec94                 | _fatfs_cc_move_window
2ec94     03 4A 05 F6 | 	mov	COUNT_, #3
2ec98     A8 00 A0 FD | 	call	#pushregs_
2ec9c     09 27 02 F6 | 	mov	local01, arg01
2eca0     0A 29 02 F6 | 	mov	local02, arg02
2eca4     00 2A 06 F6 | 	mov	local03, #0
2eca8     30 26 06 F1 | 	add	local01, #48
2ecac     13 19 02 FB | 	rdlong	arg04, local01
2ecb0     30 26 86 F1 | 	sub	local01, #48
2ecb4     0C 29 0A F2 | 	cmp	local02, arg04 wz
2ecb8     40 00 90 AD |  if_e	jmp	#LR__4521
2ecbc     13 13 02 F6 | 	mov	arg01, local01
2ecc0     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2ecc4     FD 2A 0A F6 | 	mov	local03, result1 wz
2ecc8     30 00 90 5D |  if_ne	jmp	#LR__4520
2eccc     01 26 06 F1 | 	add	local01, #1
2ecd0     13 13 C2 FA | 	rdbyte	arg01, local01
2ecd4     33 26 06 F1 | 	add	local01, #51
2ecd8     13 15 02 F6 | 	mov	arg02, local01
2ecdc     14 17 02 F6 | 	mov	arg03, local02
2ece0     01 18 06 F6 | 	mov	arg04, #1
2ece4     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2ece8     00 FA 0D F2 | 	cmp	result1, #0 wz
2ecec     01 28 66 56 |  if_ne	neg	local02, #1
2ecf0     01 2A 06 56 |  if_ne	mov	local03, #1
2ecf4     04 26 86 F1 | 	sub	local01, #4
2ecf8     13 29 62 FC | 	wrlong	local02, local01
2ecfc                 | LR__4520
2ecfc                 | LR__4521
2ecfc                 | ' 				sect = (LBA_t)0 - 1;
2ecfc                 | ' 				res = FR_DISK_ERR;
2ecfc                 | ' 			}
2ecfc                 | ' 			fs->winsect = sect;
2ecfc                 | ' 		}
2ecfc                 | ' 	}
2ecfc                 | ' 	return res;
2ecfc     15 FB 01 F6 | 	mov	result1, local03
2ed00     A7 F0 03 F6 | 	mov	ptra, fp
2ed04     B2 00 A0 FD | 	call	#popregs_
2ed08                 | _fatfs_cc_move_window_ret
2ed08     2D 00 64 FD | 	ret
2ed0c                 | 
2ed0c                 | _fatfs_cc_sync_fs
2ed0c     02 4A 05 F6 | 	mov	COUNT_, #2
2ed10     A8 00 A0 FD | 	call	#pushregs_
2ed14     09 27 02 F6 | 	mov	local01, arg01
2ed18     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2ed1c     FD 28 0A F6 | 	mov	local02, result1 wz
2ed20     D8 00 90 5D |  if_ne	jmp	#LR__4531
2ed24     13 19 C2 FA | 	rdbyte	arg04, local01
2ed28     03 18 0E F2 | 	cmp	arg04, #3 wz
2ed2c     04 26 06 A1 |  if_e	add	local01, #4
2ed30     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2ed34     04 26 86 A1 |  if_e	sub	local01, #4
2ed38     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2ed3c     A0 00 90 5D |  if_ne	jmp	#LR__4530
2ed40     34 26 06 F1 | 	add	local01, #52
2ed44     13 13 02 F6 | 	mov	arg01, local01
2ed48     00 14 06 F6 | 	mov	arg02, #0
2ed4c     09 16 C6 F9 | 	decod	arg03, #9
2ed50     98 00 A0 FD | 	call	#\builtin_bytefill_
2ed54     13 13 02 F6 | 	mov	arg01, local01
2ed58     FE 13 06 F1 | 	add	arg01, #510
2ed5c     55 00 80 FF 
2ed60     09 AB 58 FC | 	wrword	##43605, arg01
2ed64     A9 B0 A0 FF 
2ed68     13 A5 68 FC | 	wrlong	##1096897106, local01
2ed6c     13 13 02 F6 | 	mov	arg01, local01
2ed70     E4 13 06 F1 | 	add	arg01, #484
2ed74     B9 A0 B0 FF 
2ed78     09 E5 68 FC | 	wrlong	##1631679090, arg01
2ed7c     13 13 02 F6 | 	mov	arg01, local01
2ed80     E8 13 06 F1 | 	add	arg01, #488
2ed84     20 26 86 F1 | 	sub	local01, #32
2ed88     13 15 02 FB | 	rdlong	arg02, local01
2ed8c     09 15 62 FC | 	wrlong	arg02, arg01
2ed90     20 26 06 F1 | 	add	local01, #32
2ed94     13 13 02 F6 | 	mov	arg01, local01
2ed98     EC 13 06 F1 | 	add	arg01, #492
2ed9c     24 26 86 F1 | 	sub	local01, #36
2eda0     13 15 02 FB | 	rdlong	arg02, local01
2eda4     09 15 62 FC | 	wrlong	arg02, arg01
2eda8     10 26 06 F1 | 	add	local01, #16
2edac     13 17 02 FB | 	rdlong	arg03, local01
2edb0     01 16 06 F1 | 	add	arg03, #1
2edb4     10 26 06 F1 | 	add	local01, #16
2edb8     13 17 62 FC | 	wrlong	arg03, local01
2edbc     2F 26 86 F1 | 	sub	local01, #47
2edc0     13 13 C2 FA | 	rdbyte	arg01, local01
2edc4     33 26 06 F1 | 	add	local01, #51
2edc8     13 15 02 F6 | 	mov	arg02, local01
2edcc     01 18 06 F6 | 	mov	arg04, #1
2edd0     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2edd4     30 26 86 F1 | 	sub	local01, #48
2edd8     13 01 48 FC | 	wrbyte	#0, local01
2eddc     04 26 86 F1 | 	sub	local01, #4
2ede0                 | LR__4530
2ede0     01 26 06 F1 | 	add	local01, #1
2ede4     13 13 C2 FA | 	rdbyte	arg01, local01
2ede8     00 14 06 F6 | 	mov	arg02, #0
2edec     00 16 06 F6 | 	mov	arg03, #0
2edf0     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2edf4     00 FA 0D F2 | 	cmp	result1, #0 wz
2edf8     01 28 06 56 |  if_ne	mov	local02, #1
2edfc                 | LR__4531
2edfc                 | ' 	}
2edfc                 | ' 
2edfc                 | ' 	return res;
2edfc     14 FB 01 F6 | 	mov	result1, local02
2ee00     A7 F0 03 F6 | 	mov	ptra, fp
2ee04     B2 00 A0 FD | 	call	#popregs_
2ee08                 | _fatfs_cc_sync_fs_ret
2ee08     2D 00 64 FD | 	ret
2ee0c                 | 
2ee0c                 | _fatfs_cc_clst2sect
2ee0c     02 14 86 F1 | 	sub	arg02, #2
2ee10     18 12 06 F1 | 	add	arg01, #24
2ee14     09 01 02 FB | 	rdlong	_var01, arg01
2ee18     18 12 86 F1 | 	sub	arg01, #24
2ee1c     02 00 86 F1 | 	sub	_var01, #2
2ee20     00 15 12 F2 | 	cmp	arg02, _var01 wc
2ee24     00 FA 05 36 |  if_ae	mov	result1, #0
2ee28     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2ee2c     0A 12 06 F1 | 	add	arg01, #10
2ee30     09 01 E2 FA | 	rdword	_var01, arg01
2ee34     0A 01 02 FD | 	qmul	_var01, arg02
2ee38                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2ee38     22 12 06 F1 | 	add	arg01, #34
2ee3c     09 FB 01 FB | 	rdlong	result1, arg01
2ee40     18 00 62 FD | 	getqx	_var01
2ee44     00 FB 01 F1 | 	add	result1, _var01
2ee48                 | _fatfs_cc_clst2sect_ret
2ee48     2D 00 64 FD | 	ret
2ee4c                 | 
2ee4c                 | _fatfs_cc_get_fat
2ee4c     07 4A 05 F6 | 	mov	COUNT_, #7
2ee50     A8 00 A0 FD | 	call	#pushregs_
2ee54     0A 27 02 F6 | 	mov	local01, arg02
2ee58     09 29 02 FB | 	rdlong	local02, arg01
2ee5c     02 26 16 F2 | 	cmp	local01, #2 wc
2ee60     14 00 90 CD |  if_b	jmp	#LR__4540
2ee64     18 28 06 F1 | 	add	local02, #24
2ee68     14 2B 02 FB | 	rdlong	local03, local02
2ee6c     18 28 86 F1 | 	sub	local02, #24
2ee70     15 27 12 F2 | 	cmp	local01, local03 wc
2ee74     08 00 90 CD |  if_b	jmp	#LR__4541
2ee78                 | LR__4540
2ee78     01 2C 06 F6 | 	mov	local04, #1
2ee7c     60 01 90 FD | 	jmp	#LR__4548
2ee80                 | LR__4541
2ee80     01 2C 66 F6 | 	neg	local04, #1
2ee84                 | ' 		val = 0xFFFFFFFF;
2ee84                 | ' 
2ee84                 | ' 		switch (fs->fs_type) {
2ee84     14 2F C2 FA | 	rdbyte	local05, local02
2ee88     01 2E 86 F1 | 	sub	local05, #1
2ee8c     03 2E 26 F3 | 	fle	local05, #3
2ee90     30 2E 62 FD | 	jmprel	local05
2ee94                 | LR__4542
2ee94     0C 00 90 FD | 	jmp	#LR__4543
2ee98     B8 00 90 FD | 	jmp	#LR__4544
2ee9c     F8 00 90 FD | 	jmp	#LR__4545
2eea0     38 01 90 FD | 	jmp	#LR__4546
2eea4                 | LR__4543
2eea4     13 2F 02 F6 | 	mov	local05, local01
2eea8     13 13 02 F6 | 	mov	arg01, local01
2eeac     01 12 46 F0 | 	shr	arg01, #1
2eeb0     09 2F 02 F1 | 	add	local05, arg01
2eeb4     14 13 02 F6 | 	mov	arg01, local02
2eeb8     17 31 02 F6 | 	mov	local06, local05
2eebc     09 30 46 F0 | 	shr	local06, #9
2eec0     24 28 06 F1 | 	add	local02, #36
2eec4     14 15 02 FB | 	rdlong	arg02, local02
2eec8     24 28 86 F1 | 	sub	local02, #36
2eecc     18 15 02 F1 | 	add	arg02, local06
2eed0     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2eed4     00 FA 0D F2 | 	cmp	result1, #0 wz
2eed8     04 01 90 5D |  if_ne	jmp	#LR__4547
2eedc     17 31 02 F6 | 	mov	local06, local05
2eee0     FF 31 06 F5 | 	and	local06, #511
2eee4     34 28 06 F1 | 	add	local02, #52
2eee8     14 31 02 F1 | 	add	local06, local02
2eeec     18 33 C2 FA | 	rdbyte	local07, local06
2eef0     34 28 86 F1 | 	sub	local02, #52
2eef4     14 13 02 F6 | 	mov	arg01, local02
2eef8     01 2E 06 F1 | 	add	local05, #1
2eefc     17 31 02 F6 | 	mov	local06, local05
2ef00     09 30 46 F0 | 	shr	local06, #9
2ef04     24 28 06 F1 | 	add	local02, #36
2ef08     14 15 02 FB | 	rdlong	arg02, local02
2ef0c     24 28 86 F1 | 	sub	local02, #36
2ef10     18 15 02 F1 | 	add	arg02, local06
2ef14     7C FD BF FD | 	call	#_fatfs_cc_move_window
2ef18     00 FA 0D F2 | 	cmp	result1, #0 wz
2ef1c     C0 00 90 5D |  if_ne	jmp	#LR__4547
2ef20     FF 2F 06 F5 | 	and	local05, #511
2ef24     34 28 06 F1 | 	add	local02, #52
2ef28     14 2F 02 F1 | 	add	local05, local02
2ef2c     17 31 C2 FA | 	rdbyte	local06, local05
2ef30     08 30 66 F0 | 	shl	local06, #8
2ef34     18 33 42 F5 | 	or	local07, local06
2ef38     01 26 CE F7 | 	test	local01, #1 wz
2ef3c     04 32 46 50 |  if_ne	shr	local07, #4
2ef40     19 2B 02 56 |  if_ne	mov	local03, local07
2ef44     0B 32 46 A7 |  if_e	zerox	local07, #11
2ef48     19 2B 02 A6 |  if_e	mov	local03, local07
2ef4c     15 2D 02 F6 | 	mov	local04, local03
2ef50                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2ef50                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2ef50                 | ' 			break;
2ef50     8C 00 90 FD | 	jmp	#LR__4547
2ef54                 | LR__4544
2ef54     14 13 02 F6 | 	mov	arg01, local02
2ef58     13 31 02 F6 | 	mov	local06, local01
2ef5c     08 30 46 F0 | 	shr	local06, #8
2ef60     24 28 06 F1 | 	add	local02, #36
2ef64     14 15 02 FB | 	rdlong	arg02, local02
2ef68     24 28 86 F1 | 	sub	local02, #36
2ef6c     18 15 02 F1 | 	add	arg02, local06
2ef70     20 FD BF FD | 	call	#_fatfs_cc_move_window
2ef74     00 FA 0D F2 | 	cmp	result1, #0 wz
2ef78     64 00 90 5D |  if_ne	jmp	#LR__4547
2ef7c     34 28 06 F1 | 	add	local02, #52
2ef80     01 26 66 F0 | 	shl	local01, #1
2ef84     FF 27 06 F5 | 	and	local01, #511
2ef88     13 29 02 F1 | 	add	local02, local01
2ef8c                 | ' {
2ef8c                 | ' 
2ef8c                 | ' 	return *((WORD*)ptr);
2ef8c     14 FB E1 FA | 	rdword	result1, local02
2ef90     FD 2C 32 F9 | 	getword	local04, result1, #0
2ef94                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2ef94                 | ' 			break;
2ef94     48 00 90 FD | 	jmp	#LR__4547
2ef98                 | LR__4545
2ef98     14 13 02 F6 | 	mov	arg01, local02
2ef9c     13 31 02 F6 | 	mov	local06, local01
2efa0     07 30 46 F0 | 	shr	local06, #7
2efa4     24 28 06 F1 | 	add	local02, #36
2efa8     14 15 02 FB | 	rdlong	arg02, local02
2efac     24 28 86 F1 | 	sub	local02, #36
2efb0     18 15 02 F1 | 	add	arg02, local06
2efb4     DC FC BF FD | 	call	#_fatfs_cc_move_window
2efb8     00 FA 0D F2 | 	cmp	result1, #0 wz
2efbc     20 00 90 5D |  if_ne	jmp	#LR__4547
2efc0     34 28 06 F1 | 	add	local02, #52
2efc4     02 26 66 F0 | 	shl	local01, #2
2efc8     FF 27 06 F5 | 	and	local01, #511
2efcc     13 29 02 F1 | 	add	local02, local01
2efd0                 | ' {
2efd0                 | ' 
2efd0                 | ' 	return *((DWORD*)ptr);
2efd0     14 2D 02 FB | 	rdlong	local04, local02
2efd4     7C 2C 06 F4 | 	bitl	local04, #124
2efd8                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2efd8                 | ' 			break;
2efd8     04 00 90 FD | 	jmp	#LR__4547
2efdc                 | LR__4546
2efdc     01 2C 06 F6 | 	mov	local04, #1
2efe0                 | LR__4547
2efe0                 | LR__4548
2efe0                 | ' 			val = 1;
2efe0                 | ' 		}
2efe0                 | ' 	}
2efe0                 | ' 
2efe0                 | ' 	return val;
2efe0     16 FB 01 F6 | 	mov	result1, local04
2efe4     A7 F0 03 F6 | 	mov	ptra, fp
2efe8     B2 00 A0 FD | 	call	#popregs_
2efec                 | _fatfs_cc_get_fat_ret
2efec     2D 00 64 FD | 	ret
2eff0                 | 
2eff0                 | _fatfs_cc_put_fat
2eff0     08 4A 05 F6 | 	mov	COUNT_, #8
2eff4     A8 00 A0 FD | 	call	#pushregs_
2eff8     09 27 02 F6 | 	mov	local01, arg01
2effc     0A 29 02 F6 | 	mov	local02, arg02
2f000     0B 2B 02 F6 | 	mov	local03, arg03
2f004     02 2C 06 F6 | 	mov	local04, #2
2f008     02 28 16 F2 | 	cmp	local02, #2 wc
2f00c     E0 01 90 CD |  if_b	jmp	#LR__4557
2f010     18 26 06 F1 | 	add	local01, #24
2f014     13 2F 02 FB | 	rdlong	local05, local01
2f018     18 26 86 F1 | 	sub	local01, #24
2f01c     17 29 12 F2 | 	cmp	local02, local05 wc
2f020     CC 01 90 3D |  if_ae	jmp	#LR__4557
2f024                 | ' 		switch (fs->fs_type) {
2f024     13 31 C2 FA | 	rdbyte	local06, local01
2f028     01 30 86 F1 | 	sub	local06, #1
2f02c     03 30 26 F3 | 	fle	local06, #3
2f030     30 30 62 FD | 	jmprel	local06
2f034                 | LR__4550
2f034     0C 00 90 FD | 	jmp	#LR__4551
2f038     F8 00 90 FD | 	jmp	#LR__4554
2f03c     40 01 90 FD | 	jmp	#LR__4555
2f040     AC 01 90 FD | 	jmp	#LR__4556
2f044                 | LR__4551
2f044     14 33 02 F6 | 	mov	local07, local02
2f048     14 2F 02 F6 | 	mov	local05, local02
2f04c     01 2E 46 F0 | 	shr	local05, #1
2f050     17 33 02 F1 | 	add	local07, local05
2f054     13 13 02 F6 | 	mov	arg01, local01
2f058     19 31 02 F6 | 	mov	local06, local07
2f05c     09 30 46 F0 | 	shr	local06, #9
2f060     24 26 06 F1 | 	add	local01, #36
2f064     13 15 02 FB | 	rdlong	arg02, local01
2f068     24 26 86 F1 | 	sub	local01, #36
2f06c     18 15 02 F1 | 	add	arg02, local06
2f070     20 FC BF FD | 	call	#_fatfs_cc_move_window
2f074     FD 2C 0A F6 | 	mov	local04, result1 wz
2f078     74 01 90 5D |  if_ne	jmp	#LR__4556
2f07c     34 26 06 F1 | 	add	local01, #52
2f080     13 35 02 F6 | 	mov	local08, local01
2f084     19 2F 02 F6 | 	mov	local05, local07
2f088     FF 2F 06 F5 | 	and	local05, #511
2f08c     17 35 02 F1 | 	add	local08, local05
2f090     01 28 CE F7 | 	test	local02, #1 wz
2f094     34 26 86 F1 | 	sub	local01, #52
2f098     01 32 06 F1 | 	add	local07, #1
2f09c     18 00 90 AD |  if_e	jmp	#LR__4552
2f0a0     1A 2F C2 FA | 	rdbyte	local05, local08
2f0a4     17 2F 42 F8 | 	getnib	local05, local05, #0
2f0a8     15 31 E2 F8 | 	getbyte	local06, local03, #0
2f0ac     04 30 66 F0 | 	shl	local06, #4
2f0b0     18 2F 42 F5 | 	or	local05, local06
2f0b4     04 00 90 FD | 	jmp	#LR__4553
2f0b8                 | LR__4552
2f0b8     15 2F 02 F6 | 	mov	local05, local03
2f0bc                 | LR__4553
2f0bc     1A 2F 42 FC | 	wrbyte	local05, local08
2f0c0     03 26 06 F1 | 	add	local01, #3
2f0c4     13 03 48 FC | 	wrbyte	#1, local01
2f0c8     03 26 86 F1 | 	sub	local01, #3
2f0cc     13 13 02 F6 | 	mov	arg01, local01
2f0d0     19 35 02 F6 | 	mov	local08, local07
2f0d4     09 34 46 F0 | 	shr	local08, #9
2f0d8     24 26 06 F1 | 	add	local01, #36
2f0dc     13 15 02 FB | 	rdlong	arg02, local01
2f0e0     24 26 86 F1 | 	sub	local01, #36
2f0e4     1A 15 02 F1 | 	add	arg02, local08
2f0e8     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2f0ec     FD 2C 0A F6 | 	mov	local04, result1 wz
2f0f0     FC 00 90 5D |  if_ne	jmp	#LR__4556
2f0f4     34 26 06 F1 | 	add	local01, #52
2f0f8     13 35 02 F6 | 	mov	local08, local01
2f0fc     FF 33 06 F5 | 	and	local07, #511
2f100     19 35 02 F1 | 	add	local08, local07
2f104     01 28 CE F7 | 	test	local02, #1 wz
2f108     04 2A 46 50 |  if_ne	shr	local03, #4
2f10c     15 2F 02 56 |  if_ne	mov	local05, local03
2f110     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2f114     F0 2E 06 A5 |  if_e	and	local05, #240
2f118     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2f11c     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2f120     15 2F 42 A5 |  if_e	or	local05, local03
2f124     1A 2F 42 FC | 	wrbyte	local05, local08
2f128     31 26 86 F1 | 	sub	local01, #49
2f12c     13 03 48 FC | 	wrbyte	#1, local01
2f130                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2f130                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2f130                 | ' 			fs->wflag = 1;
2f130                 | ' 			break;
2f130     BC 00 90 FD | 	jmp	#LR__4556
2f134                 | LR__4554
2f134     13 13 02 F6 | 	mov	arg01, local01
2f138     14 35 02 F6 | 	mov	local08, local02
2f13c     08 34 46 F0 | 	shr	local08, #8
2f140     24 26 06 F1 | 	add	local01, #36
2f144     13 15 02 FB | 	rdlong	arg02, local01
2f148     24 26 86 F1 | 	sub	local01, #36
2f14c     1A 15 02 F1 | 	add	arg02, local08
2f150     40 FB BF FD | 	call	#_fatfs_cc_move_window
2f154     FD 2C 0A F6 | 	mov	local04, result1 wz
2f158     94 00 90 5D |  if_ne	jmp	#LR__4556
2f15c     34 26 06 F1 | 	add	local01, #52
2f160     13 13 02 F6 | 	mov	arg01, local01
2f164     01 28 66 F0 | 	shl	local02, #1
2f168     FF 29 06 F5 | 	and	local02, #511
2f16c     14 13 02 F1 | 	add	arg01, local02
2f170     09 2B 52 FC | 	wrword	local03, arg01
2f174     31 26 86 F1 | 	sub	local01, #49
2f178     13 03 48 FC | 	wrbyte	#1, local01
2f17c                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2f17c                 | ' 			fs->wflag = 1;
2f17c                 | ' 			break;
2f17c     70 00 90 FD | 	jmp	#LR__4556
2f180                 | LR__4555
2f180     13 13 02 F6 | 	mov	arg01, local01
2f184     14 35 02 F6 | 	mov	local08, local02
2f188     07 34 46 F0 | 	shr	local08, #7
2f18c     24 26 06 F1 | 	add	local01, #36
2f190     13 15 02 FB | 	rdlong	arg02, local01
2f194     24 26 86 F1 | 	sub	local01, #36
2f198     1A 15 02 F1 | 	add	arg02, local08
2f19c     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2f1a0     FD 2C 0A F6 | 	mov	local04, result1 wz
2f1a4     48 00 90 5D |  if_ne	jmp	#LR__4556
2f1a8     7C 2A 06 F4 | 	bitl	local03, #124
2f1ac     34 26 06 F1 | 	add	local01, #52
2f1b0     14 35 02 F6 | 	mov	local08, local02
2f1b4     02 34 66 F0 | 	shl	local08, #2
2f1b8     FF 35 06 F5 | 	and	local08, #511
2f1bc     13 13 02 F6 | 	mov	arg01, local01
2f1c0     1A 13 02 F1 | 	add	arg01, local08
2f1c4                 | ' {
2f1c4                 | ' 
2f1c4                 | ' 	return *((DWORD*)ptr);
2f1c4     09 35 02 FB | 	rdlong	local08, arg01
2f1c8     00 00 78 FF 
2f1cc     00 34 06 F5 | 	and	local08, ##-268435456
2f1d0     1A 2B 42 F5 | 	or	local03, local08
2f1d4     13 13 02 F6 | 	mov	arg01, local01
2f1d8     02 28 66 F0 | 	shl	local02, #2
2f1dc     FF 29 06 F5 | 	and	local02, #511
2f1e0     14 13 02 F1 | 	add	arg01, local02
2f1e4     09 2B 62 FC | 	wrlong	local03, arg01
2f1e8     31 26 86 F1 | 	sub	local01, #49
2f1ec     13 03 48 FC | 	wrbyte	#1, local01
2f1f0                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2f1f0                 | ' 			}
2f1f0                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2f1f0                 | ' 			fs->wflag = 1;
2f1f0                 | ' 			break;
2f1f0                 | LR__4556
2f1f0                 | LR__4557
2f1f0                 | ' 		}
2f1f0                 | ' 	}
2f1f0                 | ' 	return res;
2f1f0     16 FB 01 F6 | 	mov	result1, local04
2f1f4     A7 F0 03 F6 | 	mov	ptra, fp
2f1f8     B2 00 A0 FD | 	call	#popregs_
2f1fc                 | _fatfs_cc_put_fat_ret
2f1fc     2D 00 64 FD | 	ret
2f200                 | 
2f200                 | _fatfs_cc_remove_chain
2f200     05 4A 05 F6 | 	mov	COUNT_, #5
2f204     A8 00 A0 FD | 	call	#pushregs_
2f208     09 27 02 F6 | 	mov	local01, arg01
2f20c     0A 29 02 F6 | 	mov	local02, arg02
2f210     0B 2B 02 F6 | 	mov	local03, arg03
2f214     13 2D 02 FB | 	rdlong	local04, local01
2f218     02 28 16 F2 | 	cmp	local02, #2 wc
2f21c     14 00 90 CD |  if_b	jmp	#LR__4560
2f220     18 2C 06 F1 | 	add	local04, #24
2f224     16 FB 01 FB | 	rdlong	result1, local04
2f228     18 2C 86 F1 | 	sub	local04, #24
2f22c     FD 28 12 F2 | 	cmp	local02, result1 wc
2f230     08 00 90 CD |  if_b	jmp	#LR__4561
2f234                 | LR__4560
2f234     02 FA 05 F6 | 	mov	result1, #2
2f238     CC 00 90 FD | 	jmp	#LR__4566
2f23c                 | LR__4561
2f23c     00 2A 0E F2 | 	cmp	local03, #0 wz
2f240     18 00 90 AD |  if_e	jmp	#LR__4562
2f244     15 15 02 F6 | 	mov	arg02, local03
2f248     16 13 02 F6 | 	mov	arg01, local04
2f24c     01 16 66 F6 | 	neg	arg03, #1
2f250     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2f254     00 FA 0D F2 | 	cmp	result1, #0 wz
2f258     AC 00 90 5D |  if_ne	jmp	#LR__4566
2f25c                 | LR__4562
2f25c                 | ' 	}
2f25c                 | ' 
2f25c                 | ' 
2f25c                 | ' 	do {
2f25c                 | LR__4563
2f25c     14 15 02 F6 | 	mov	arg02, local02
2f260     13 13 02 F6 | 	mov	arg01, local01
2f264     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2f268     FD 2E 0A F6 | 	mov	local05, result1 wz
2f26c     94 00 90 AD |  if_e	jmp	#LR__4565
2f270     01 2E 0E F2 | 	cmp	local05, #1 wz
2f274     02 FA 05 A6 |  if_e	mov	result1, #2
2f278     8C 00 90 AD |  if_e	jmp	#LR__4566
2f27c     FF FF 7F FF 
2f280     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2f284     01 FA 05 A6 |  if_e	mov	result1, #1
2f288     7C 00 90 AD |  if_e	jmp	#LR__4566
2f28c     14 15 02 F6 | 	mov	arg02, local02
2f290     16 13 02 F6 | 	mov	arg01, local04
2f294     00 16 06 F6 | 	mov	arg03, #0
2f298     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2f29c     FD 2A 0A F6 | 	mov	local03, result1 wz
2f2a0     15 FB 01 56 |  if_ne	mov	result1, local03
2f2a4     60 00 90 5D |  if_ne	jmp	#LR__4566
2f2a8     18 2C 06 F1 | 	add	local04, #24
2f2ac     16 2B 02 FB | 	rdlong	local03, local04
2f2b0     02 2A 86 F1 | 	sub	local03, #2
2f2b4     04 2C 86 F1 | 	sub	local04, #4
2f2b8     16 29 02 FB | 	rdlong	local02, local04
2f2bc     14 2C 86 F1 | 	sub	local04, #20
2f2c0     15 29 12 F2 | 	cmp	local02, local03 wc
2f2c4     24 00 90 3D |  if_ae	jmp	#LR__4564
2f2c8     14 2C 06 F1 | 	add	local04, #20
2f2cc     16 2B 02 FB | 	rdlong	local03, local04
2f2d0     01 2A 06 F1 | 	add	local03, #1
2f2d4     16 2B 62 FC | 	wrlong	local03, local04
2f2d8     10 2C 86 F1 | 	sub	local04, #16
2f2dc     16 2B C2 FA | 	rdbyte	local03, local04
2f2e0     01 2A 46 F5 | 	or	local03, #1
2f2e4     16 2B 42 FC | 	wrbyte	local03, local04
2f2e8     04 2C 86 F1 | 	sub	local04, #4
2f2ec                 | LR__4564
2f2ec     17 29 02 F6 | 	mov	local02, local05
2f2f0     18 2C 06 F1 | 	add	local04, #24
2f2f4     16 2F 02 FB | 	rdlong	local05, local04
2f2f8     18 2C 86 F1 | 	sub	local04, #24
2f2fc     17 29 12 F2 | 	cmp	local02, local05 wc
2f300     58 FF 9F CD |  if_b	jmp	#LR__4563
2f304                 | LR__4565
2f304                 | ' #line 1500 "ff.c"
2f304                 | ' 	return FR_OK;
2f304     00 FA 05 F6 | 	mov	result1, #0
2f308                 | LR__4566
2f308     A7 F0 03 F6 | 	mov	ptra, fp
2f30c     B2 00 A0 FD | 	call	#popregs_
2f310                 | _fatfs_cc_remove_chain_ret
2f310     2D 00 64 FD | 	ret
2f314                 | 
2f314                 | _fatfs_cc_create_chain
2f314     09 4A 05 F6 | 	mov	COUNT_, #9
2f318     A8 00 A0 FD | 	call	#pushregs_
2f31c     09 27 02 F6 | 	mov	local01, arg01
2f320     0A 29 0A F6 | 	mov	local02, arg02 wz
2f324     13 2B 02 FB | 	rdlong	local03, local01
2f328     28 00 90 5D |  if_ne	jmp	#LR__4570
2f32c     10 2A 06 F1 | 	add	local03, #16
2f330     15 2D 0A FB | 	rdlong	local04, local03 wz
2f334     10 2A 86 F1 | 	sub	local03, #16
2f338     18 2A 06 51 |  if_ne	add	local03, #24
2f33c     15 2F 02 5B |  if_ne	rdlong	local05, local03
2f340     18 2A 86 51 |  if_ne	sub	local03, #24
2f344     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2f348     50 00 90 4D |  if_c_and_nz	jmp	#LR__4571
2f34c     01 2C 06 F6 | 	mov	local04, #1
2f350     48 00 90 FD | 	jmp	#LR__4571
2f354                 | LR__4570
2f354     14 15 02 F6 | 	mov	arg02, local02
2f358     13 13 02 F6 | 	mov	arg01, local01
2f35c     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2f360     FD 2C 02 F6 | 	mov	local04, result1
2f364     02 2C 16 F2 | 	cmp	local04, #2 wc
2f368     01 FA 05 C6 |  if_b	mov	result1, #1
2f36c     BC 01 90 CD |  if_b	jmp	#LR__4581
2f370     FF FF 7F FF 
2f374     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2f378     16 FB 01 A6 |  if_e	mov	result1, local04
2f37c     AC 01 90 AD |  if_e	jmp	#LR__4581
2f380     18 2A 06 F1 | 	add	local03, #24
2f384     15 2F 02 FB | 	rdlong	local05, local03
2f388     18 2A 86 F1 | 	sub	local03, #24
2f38c     17 2D 12 F2 | 	cmp	local04, local05 wc
2f390     16 FB 01 C6 |  if_b	mov	result1, local04
2f394     94 01 90 CD |  if_b	jmp	#LR__4581
2f398     14 2D 02 F6 | 	mov	local04, local02
2f39c                 | LR__4571
2f39c     14 2A 06 F1 | 	add	local03, #20
2f3a0     15 2F 0A FB | 	rdlong	local05, local03 wz
2f3a4     14 2A 86 F1 | 	sub	local03, #20
2f3a8     00 FA 05 A6 |  if_e	mov	result1, #0
2f3ac     7C 01 90 AD |  if_e	jmp	#LR__4581
2f3b0     00 30 06 F6 | 	mov	local06, #0
2f3b4     14 2D 0A F2 | 	cmp	local04, local02 wz
2f3b8     74 00 90 5D |  if_ne	jmp	#LR__4574
2f3bc     16 31 02 F6 | 	mov	local06, local04
2f3c0     01 30 06 F1 | 	add	local06, #1
2f3c4     18 2A 06 F1 | 	add	local03, #24
2f3c8     15 2F 02 FB | 	rdlong	local05, local03
2f3cc     18 2A 86 F1 | 	sub	local03, #24
2f3d0     17 31 12 F2 | 	cmp	local06, local05 wc
2f3d4     02 30 06 36 |  if_ae	mov	local06, #2
2f3d8     18 15 02 F6 | 	mov	arg02, local06
2f3dc     13 13 02 F6 | 	mov	arg01, local01
2f3e0     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2f3e4     FD 2E 02 F6 | 	mov	local05, result1
2f3e8     01 2E 0E F2 | 	cmp	local05, #1 wz
2f3ec     FF FF 7F 5F 
2f3f0     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2f3f4     17 FB 01 A6 |  if_e	mov	result1, local05
2f3f8     30 01 90 AD |  if_e	jmp	#LR__4581
2f3fc     00 2E 0E F2 | 	cmp	local05, #0 wz
2f400     2C 00 90 AD |  if_e	jmp	#LR__4573
2f404     10 2A 06 F1 | 	add	local03, #16
2f408     15 33 02 FB | 	rdlong	local07, local03
2f40c     10 2A 86 F1 | 	sub	local03, #16
2f410     02 32 16 F2 | 	cmp	local07, #2 wc
2f414     14 00 90 CD |  if_b	jmp	#LR__4572
2f418     18 2A 06 F1 | 	add	local03, #24
2f41c     15 2F 02 FB | 	rdlong	local05, local03
2f420     18 2A 86 F1 | 	sub	local03, #24
2f424     17 33 12 F2 | 	cmp	local07, local05 wc
2f428     19 2D 02 C6 |  if_b	mov	local04, local07
2f42c                 | LR__4572
2f42c     00 30 06 F6 | 	mov	local06, #0
2f430                 | LR__4573
2f430                 | LR__4574
2f430     00 30 0E F2 | 	cmp	local06, #0 wz
2f434     60 00 90 5D |  if_ne	jmp	#LR__4577
2f438     16 31 02 F6 | 	mov	local06, local04
2f43c                 | ' 			ncl = scl;
2f43c                 | ' 			for (;;) {
2f43c                 | LR__4575
2f43c     01 30 06 F1 | 	add	local06, #1
2f440     18 2A 06 F1 | 	add	local03, #24
2f444     15 2F 02 FB | 	rdlong	local05, local03
2f448     18 2A 86 F1 | 	sub	local03, #24
2f44c     17 31 12 F2 | 	cmp	local06, local05 wc
2f450     02 30 06 36 |  if_ae	mov	local06, #2
2f454     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2f458     00 FA 05 16 |  if_a	mov	result1, #0
2f45c     CC 00 90 1D |  if_a	jmp	#LR__4581
2f460     18 15 02 F6 | 	mov	arg02, local06
2f464     13 13 02 F6 | 	mov	arg01, local01
2f468     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2f46c     FD 32 0A F6 | 	mov	local07, result1 wz
2f470     24 00 90 AD |  if_e	jmp	#LR__4576
2f474     01 32 0E F2 | 	cmp	local07, #1 wz
2f478     FF FF 7F 5F 
2f47c     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2f480     19 FB 01 A6 |  if_e	mov	result1, local07
2f484     A4 00 90 AD |  if_e	jmp	#LR__4581
2f488     16 31 0A F2 | 	cmp	local06, local04 wz
2f48c     00 FA 05 A6 |  if_e	mov	result1, #0
2f490     98 00 90 AD |  if_e	jmp	#LR__4581
2f494     A4 FF 9F FD | 	jmp	#LR__4575
2f498                 | LR__4576
2f498                 | LR__4577
2f498     15 13 02 F6 | 	mov	arg01, local03
2f49c     18 15 02 F6 | 	mov	arg02, local06
2f4a0     01 16 66 F6 | 	neg	arg03, #1
2f4a4     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2f4a8     FD 34 0A F6 | 	mov	local08, result1 wz
2f4ac     1C 00 90 5D |  if_ne	jmp	#LR__4578
2f4b0     00 28 0E F2 | 	cmp	local02, #0 wz
2f4b4     14 00 90 AD |  if_e	jmp	#LR__4578
2f4b8     15 13 02 F6 | 	mov	arg01, local03
2f4bc     14 15 02 F6 | 	mov	arg02, local02
2f4c0     18 17 02 F6 | 	mov	arg03, local06
2f4c4     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2f4c8     FD 34 02 F6 | 	mov	local08, result1
2f4cc                 | LR__4578
2f4cc     00 34 0E F2 | 	cmp	local08, #0 wz
2f4d0     4C 00 90 5D |  if_ne	jmp	#LR__4579
2f4d4     10 2A 06 F1 | 	add	local03, #16
2f4d8     15 31 62 FC | 	wrlong	local06, local03
2f4dc     08 2A 06 F1 | 	add	local03, #8
2f4e0     15 2F 02 FB | 	rdlong	local05, local03
2f4e4     02 2E 86 F1 | 	sub	local05, #2
2f4e8     04 2A 86 F1 | 	sub	local03, #4
2f4ec     15 37 02 FB | 	rdlong	local09, local03
2f4f0     14 2A 86 F1 | 	sub	local03, #20
2f4f4     17 37 1A F2 | 	cmp	local09, local05 wcz
2f4f8     14 2A 06 E1 |  if_be	add	local03, #20
2f4fc     15 37 02 EB |  if_be	rdlong	local09, local03
2f500     01 36 86 E1 |  if_be	sub	local09, #1
2f504     15 37 62 EC |  if_be	wrlong	local09, local03
2f508     14 2A 86 E1 |  if_be	sub	local03, #20
2f50c     04 2A 06 F1 | 	add	local03, #4
2f510     15 2F C2 FA | 	rdbyte	local05, local03
2f514     01 2E 46 F5 | 	or	local05, #1
2f518     15 2F 42 FC | 	wrbyte	local05, local03
2f51c     08 00 90 FD | 	jmp	#LR__4580
2f520                 | LR__4579
2f520     01 34 0E F2 | 	cmp	local08, #1 wz
2f524     01 30 C6 F6 | 	negz	local06, #1
2f528                 | LR__4580
2f528                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2f528                 | ' 	}
2f528                 | ' 
2f528                 | ' 	return ncl;
2f528     18 FB 01 F6 | 	mov	result1, local06
2f52c                 | LR__4581
2f52c     A7 F0 03 F6 | 	mov	ptra, fp
2f530     B2 00 A0 FD | 	call	#popregs_
2f534                 | _fatfs_cc_create_chain_ret
2f534     2D 00 64 FD | 	ret
2f538                 | 
2f538                 | _fatfs_cc_dir_clear
2f538     06 4A 05 F6 | 	mov	COUNT_, #6
2f53c     A8 00 A0 FD | 	call	#pushregs_
2f540     09 27 02 F6 | 	mov	local01, arg01
2f544     0A 29 02 F6 | 	mov	local02, arg02
2f548     13 13 02 F6 | 	mov	arg01, local01
2f54c     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2f550     00 FA 0D F2 | 	cmp	result1, #0 wz
2f554     01 FA 05 56 |  if_ne	mov	result1, #1
2f558     90 00 90 5D |  if_ne	jmp	#LR__4592
2f55c     13 13 02 F6 | 	mov	arg01, local01
2f560     14 15 02 F6 | 	mov	arg02, local02
2f564     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2f568     FD 2A 02 F6 | 	mov	local03, result1
2f56c     30 26 06 F1 | 	add	local01, #48
2f570     13 2B 62 FC | 	wrlong	local03, local01
2f574     04 26 06 F1 | 	add	local01, #4
2f578     13 13 02 F6 | 	mov	arg01, local01
2f57c     00 14 06 F6 | 	mov	arg02, #0
2f580     09 16 C6 F9 | 	decod	arg03, #9
2f584     98 00 A0 FD | 	call	#\builtin_bytefill_
2f588     13 2D 02 F6 | 	mov	local04, local01
2f58c                 | ' #line 1667 "ff.c"
2f58c                 | ' 	{
2f58c                 | ' 		ibuf = fs->win; szb = 1;
2f58c                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2f58c     00 2E 06 F6 | 	mov	local05, #0
2f590     34 26 86 F1 | 	sub	local01, #52
2f594                 | LR__4590
2f594     0A 26 06 F1 | 	add	local01, #10
2f598     13 31 E2 FA | 	rdword	local06, local01
2f59c     0A 26 86 F1 | 	sub	local01, #10
2f5a0     18 2F 12 F2 | 	cmp	local05, local06 wc
2f5a4     2C 00 90 3D |  if_ae	jmp	#LR__4591
2f5a8     01 26 06 F1 | 	add	local01, #1
2f5ac     13 13 C2 FA | 	rdbyte	arg01, local01
2f5b0     01 26 86 F1 | 	sub	local01, #1
2f5b4     16 15 02 F6 | 	mov	arg02, local04
2f5b8     15 17 02 F6 | 	mov	arg03, local03
2f5bc     17 17 02 F1 | 	add	arg03, local05
2f5c0     01 18 06 F6 | 	mov	arg04, #1
2f5c4     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2f5c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f5cc     01 2E 06 A1 |  if_e	add	local05, #1
2f5d0     C0 FF 9F AD |  if_e	jmp	#LR__4590
2f5d4                 | LR__4591
2f5d4                 | ' 	}
2f5d4                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2f5d4     0A 26 06 F1 | 	add	local01, #10
2f5d8     13 2D E2 FA | 	rdword	local04, local01
2f5dc     16 2F 0A F2 | 	cmp	local05, local04 wz
2f5e0     00 30 06 A6 |  if_e	mov	local06, #0
2f5e4     01 30 06 56 |  if_ne	mov	local06, #1
2f5e8     18 FB 01 F6 | 	mov	result1, local06
2f5ec                 | LR__4592
2f5ec     A7 F0 03 F6 | 	mov	ptra, fp
2f5f0     B2 00 A0 FD | 	call	#popregs_
2f5f4                 | _fatfs_cc_dir_clear_ret
2f5f4     2D 00 64 FD | 	ret
2f5f8                 | 
2f5f8                 | _fatfs_cc_dir_sdi
2f5f8     06 4A 05 F6 | 	mov	COUNT_, #6
2f5fc     A8 00 A0 FD | 	call	#pushregs_
2f600     09 27 02 F6 | 	mov	local01, arg01
2f604     0A 29 02 F6 | 	mov	local02, arg02
2f608     13 2B 02 FB | 	rdlong	local03, local01
2f60c     00 10 00 FF 
2f610     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2f614     1F 28 CE C7 |  if_b	test	local02, #31 wz
2f618                 | ' 		return FR_INT_ERR;
2f618     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2f61c     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4606
2f620     10 26 06 F1 | 	add	local01, #16
2f624     13 29 62 FC | 	wrlong	local02, local01
2f628     08 26 86 F1 | 	sub	local01, #8
2f62c     13 2D 0A FB | 	rdlong	local04, local01 wz
2f630     08 26 86 F1 | 	sub	local01, #8
2f634     15 2F C2 AA |  if_e	rdbyte	local05, local03
2f638     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2f63c     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2f640     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2f644     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2f648     00 2C 0E F2 | 	cmp	local04, #0 wz
2f64c     3C 00 90 5D |  if_ne	jmp	#LR__4600
2f650     14 2F 02 F6 | 	mov	local05, local02
2f654     05 2E 46 F0 | 	shr	local05, #5
2f658     08 2A 06 F1 | 	add	local03, #8
2f65c     15 15 E2 FA | 	rdword	arg02, local03
2f660     08 2A 86 F1 | 	sub	local03, #8
2f664     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2f668     02 FA 05 36 |  if_ae	mov	result1, #2
2f66c     E4 00 90 3D |  if_ae	jmp	#LR__4606
2f670     28 2A 06 F1 | 	add	local03, #40
2f674     15 2F 02 FB | 	rdlong	local05, local03
2f678     28 2A 86 F1 | 	sub	local03, #40
2f67c     18 26 06 F1 | 	add	local01, #24
2f680     13 2F 62 FC | 	wrlong	local05, local01
2f684     18 26 86 F1 | 	sub	local01, #24
2f688     7C 00 90 FD | 	jmp	#LR__4605
2f68c                 | LR__4600
2f68c     0A 2A 06 F1 | 	add	local03, #10
2f690     15 31 E2 FA | 	rdword	local06, local03
2f694     0A 2A 86 F1 | 	sub	local03, #10
2f698     09 30 66 F0 | 	shl	local06, #9
2f69c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2f69c                 | ' 		while (ofs >= csz) {
2f69c                 | LR__4601
2f69c     18 29 12 F2 | 	cmp	local02, local06 wc
2f6a0     4C 00 90 CD |  if_b	jmp	#LR__4604
2f6a4     13 13 02 F6 | 	mov	arg01, local01
2f6a8     16 15 02 F6 | 	mov	arg02, local04
2f6ac     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2f6b0     FD 2C 02 F6 | 	mov	local04, result1
2f6b4     FF FF 7F FF 
2f6b8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2f6bc     01 FA 05 A6 |  if_e	mov	result1, #1
2f6c0     90 00 90 AD |  if_e	jmp	#LR__4606
2f6c4     02 2C 16 F2 | 	cmp	local04, #2 wc
2f6c8     14 00 90 CD |  if_b	jmp	#LR__4602
2f6cc     18 2A 06 F1 | 	add	local03, #24
2f6d0     15 2F 02 FB | 	rdlong	local05, local03
2f6d4     18 2A 86 F1 | 	sub	local03, #24
2f6d8     17 2D 12 F2 | 	cmp	local04, local05 wc
2f6dc     08 00 90 CD |  if_b	jmp	#LR__4603
2f6e0                 | LR__4602
2f6e0     02 FA 05 F6 | 	mov	result1, #2
2f6e4     6C 00 90 FD | 	jmp	#LR__4606
2f6e8                 | LR__4603
2f6e8     18 29 82 F1 | 	sub	local02, local06
2f6ec     AC FF 9F FD | 	jmp	#LR__4601
2f6f0                 | LR__4604
2f6f0     15 13 02 F6 | 	mov	arg01, local03
2f6f4     16 15 02 F6 | 	mov	arg02, local04
2f6f8     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2f6fc     18 26 06 F1 | 	add	local01, #24
2f700     13 FB 61 FC | 	wrlong	result1, local01
2f704     18 26 86 F1 | 	sub	local01, #24
2f708                 | LR__4605
2f708     14 26 06 F1 | 	add	local01, #20
2f70c     13 2D 62 FC | 	wrlong	local04, local01
2f710     04 26 06 F1 | 	add	local01, #4
2f714     13 2F 0A FB | 	rdlong	local05, local01 wz
2f718     18 26 86 F1 | 	sub	local01, #24
2f71c     02 FA 05 A6 |  if_e	mov	result1, #2
2f720     30 00 90 AD |  if_e	jmp	#LR__4606
2f724     14 31 02 F6 | 	mov	local06, local02
2f728     09 30 46 F0 | 	shr	local06, #9
2f72c     18 26 06 F1 | 	add	local01, #24
2f730     13 2F 02 FB | 	rdlong	local05, local01
2f734     18 2F 02 F1 | 	add	local05, local06
2f738     13 2F 62 FC | 	wrlong	local05, local01
2f73c     34 2A 06 F1 | 	add	local03, #52
2f740     FF 29 06 F5 | 	and	local02, #511
2f744     14 2B 02 F1 | 	add	local03, local02
2f748     04 26 06 F1 | 	add	local01, #4
2f74c     13 2B 62 FC | 	wrlong	local03, local01
2f750                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2f750                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2f750                 | ' 
2f750                 | ' 	return FR_OK;
2f750     00 FA 05 F6 | 	mov	result1, #0
2f754                 | LR__4606
2f754     A7 F0 03 F6 | 	mov	ptra, fp
2f758     B2 00 A0 FD | 	call	#popregs_
2f75c                 | _fatfs_cc_dir_sdi_ret
2f75c     2D 00 64 FD | 	ret
2f760                 | 
2f760                 | _fatfs_cc_dir_next
2f760     05 4A 05 F6 | 	mov	COUNT_, #5
2f764     A8 00 A0 FD | 	call	#pushregs_
2f768     09 27 02 F6 | 	mov	local01, arg01
2f76c     0A 29 02 F6 | 	mov	local02, arg02
2f770     13 2B 02 FB | 	rdlong	local03, local01
2f774     10 26 06 F1 | 	add	local01, #16
2f778     13 2D 02 FB | 	rdlong	local04, local01
2f77c     10 26 86 F1 | 	sub	local01, #16
2f780     20 2C 06 F1 | 	add	local04, #32
2f784     00 10 00 FF 
2f788     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2f78c     18 26 06 31 |  if_ae	add	local01, #24
2f790     13 01 68 3C |  if_ae	wrlong	#0, local01
2f794     18 26 86 31 |  if_ae	sub	local01, #24
2f798     18 26 06 F1 | 	add	local01, #24
2f79c     13 15 0A FB | 	rdlong	arg02, local01 wz
2f7a0     18 26 86 F1 | 	sub	local01, #24
2f7a4     04 FA 05 A6 |  if_e	mov	result1, #4
2f7a8     64 01 90 AD |  if_e	jmp	#LR__4615
2f7ac     FF 2D CE F7 | 	test	local04, #511 wz
2f7b0     3C 01 90 5D |  if_ne	jmp	#LR__4614
2f7b4     18 26 06 F1 | 	add	local01, #24
2f7b8     13 15 02 FB | 	rdlong	arg02, local01
2f7bc     01 14 06 F1 | 	add	arg02, #1
2f7c0     13 15 62 FC | 	wrlong	arg02, local01
2f7c4     04 26 86 F1 | 	sub	local01, #4
2f7c8     13 15 0A FB | 	rdlong	arg02, local01 wz
2f7cc     14 26 86 F1 | 	sub	local01, #20
2f7d0     2C 00 90 5D |  if_ne	jmp	#LR__4610
2f7d4     16 15 02 F6 | 	mov	arg02, local04
2f7d8     05 14 46 F0 | 	shr	arg02, #5
2f7dc     08 2A 06 F1 | 	add	local03, #8
2f7e0     15 29 E2 FA | 	rdword	local02, local03
2f7e4     08 2A 86 F1 | 	sub	local03, #8
2f7e8     14 15 12 F2 | 	cmp	arg02, local02 wc
2f7ec     18 26 06 31 |  if_ae	add	local01, #24
2f7f0     13 01 68 3C |  if_ae	wrlong	#0, local01
2f7f4                 | ' 				dp->sect = 0; return FR_NO_FILE;
2f7f4     04 FA 05 36 |  if_ae	mov	result1, #4
2f7f8     14 01 90 3D |  if_ae	jmp	#LR__4615
2f7fc     F0 00 90 FD | 	jmp	#LR__4613
2f800                 | LR__4610
2f800     16 13 02 F6 | 	mov	arg01, local04
2f804     09 12 46 F0 | 	shr	arg01, #9
2f808     0A 2A 06 F1 | 	add	local03, #10
2f80c     15 15 E2 FA | 	rdword	arg02, local03
2f810     0A 2A 86 F1 | 	sub	local03, #10
2f814     01 14 86 F1 | 	sub	arg02, #1
2f818     0A 13 CA F7 | 	test	arg01, arg02 wz
2f81c     D0 00 90 5D |  if_ne	jmp	#LR__4612
2f820     13 13 02 F6 | 	mov	arg01, local01
2f824     14 26 06 F1 | 	add	local01, #20
2f828     13 15 02 FB | 	rdlong	arg02, local01
2f82c     14 26 86 F1 | 	sub	local01, #20
2f830     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2f834     FD 2E 02 F6 | 	mov	local05, result1
2f838     02 2E 16 F2 | 	cmp	local05, #2 wc
2f83c     02 FA 05 C6 |  if_b	mov	result1, #2
2f840     CC 00 90 CD |  if_b	jmp	#LR__4615
2f844     FF FF 7F FF 
2f848     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2f84c     01 FA 05 A6 |  if_e	mov	result1, #1
2f850     BC 00 90 AD |  if_e	jmp	#LR__4615
2f854     18 2A 06 F1 | 	add	local03, #24
2f858     15 15 02 FB | 	rdlong	arg02, local03
2f85c     18 2A 86 F1 | 	sub	local03, #24
2f860     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2f864     68 00 90 CD |  if_b	jmp	#LR__4611
2f868     00 28 0E F2 | 	cmp	local02, #0 wz
2f86c     18 26 06 A1 |  if_e	add	local01, #24
2f870     13 01 68 AC |  if_e	wrlong	#0, local01
2f874                 | ' 						dp->sect = 0; return FR_NO_FILE;
2f874     04 FA 05 A6 |  if_e	mov	result1, #4
2f878     94 00 90 AD |  if_e	jmp	#LR__4615
2f87c     13 13 02 F6 | 	mov	arg01, local01
2f880     14 26 06 F1 | 	add	local01, #20
2f884     13 15 02 FB | 	rdlong	arg02, local01
2f888     14 26 86 F1 | 	sub	local01, #20
2f88c     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2f890     FD 2E 0A F6 | 	mov	local05, result1 wz
2f894     07 FA 05 A6 |  if_e	mov	result1, #7
2f898     74 00 90 AD |  if_e	jmp	#LR__4615
2f89c     01 2E 0E F2 | 	cmp	local05, #1 wz
2f8a0     02 FA 05 A6 |  if_e	mov	result1, #2
2f8a4     68 00 90 AD |  if_e	jmp	#LR__4615
2f8a8     FF FF 7F FF 
2f8ac     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2f8b0     01 FA 05 A6 |  if_e	mov	result1, #1
2f8b4     58 00 90 AD |  if_e	jmp	#LR__4615
2f8b8     17 15 02 F6 | 	mov	arg02, local05
2f8bc     15 13 02 F6 | 	mov	arg01, local03
2f8c0     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2f8c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f8c8     01 FA 05 56 |  if_ne	mov	result1, #1
2f8cc     40 00 90 5D |  if_ne	jmp	#LR__4615
2f8d0                 | LR__4611
2f8d0     14 26 06 F1 | 	add	local01, #20
2f8d4     13 2F 62 FC | 	wrlong	local05, local01
2f8d8     15 13 02 F6 | 	mov	arg01, local03
2f8dc     17 15 02 F6 | 	mov	arg02, local05
2f8e0     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2f8e4     04 26 06 F1 | 	add	local01, #4
2f8e8     13 FB 61 FC | 	wrlong	result1, local01
2f8ec     18 26 86 F1 | 	sub	local01, #24
2f8f0                 | LR__4612
2f8f0                 | LR__4613
2f8f0                 | LR__4614
2f8f0     10 26 06 F1 | 	add	local01, #16
2f8f4     13 2D 62 FC | 	wrlong	local04, local01
2f8f8     34 2A 06 F1 | 	add	local03, #52
2f8fc     FF 2D 06 F5 | 	and	local04, #511
2f900     16 2B 02 F1 | 	add	local03, local04
2f904     0C 26 06 F1 | 	add	local01, #12
2f908     13 2B 62 FC | 	wrlong	local03, local01
2f90c                 | ' #line 1771 "ff.c"
2f90c                 | ' 				}
2f90c                 | ' 				dp->clust = clst;
2f90c                 | ' 				dp->sect = clst2sect(fs, clst);
2f90c                 | ' 			}
2f90c                 | ' 		}
2f90c                 | ' 	}
2f90c                 | ' 	dp->dptr = ofs;
2f90c                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2f90c                 | ' 
2f90c                 | ' 	return FR_OK;
2f90c     00 FA 05 F6 | 	mov	result1, #0
2f910                 | LR__4615
2f910     A7 F0 03 F6 | 	mov	ptra, fp
2f914     B2 00 A0 FD | 	call	#popregs_
2f918                 | _fatfs_cc_dir_next_ret
2f918     2D 00 64 FD | 	ret
2f91c                 | 
2f91c                 | _fatfs_cc_dir_alloc
2f91c     08 4A 05 F6 | 	mov	COUNT_, #8
2f920     A8 00 A0 FD | 	call	#pushregs_
2f924     09 27 02 F6 | 	mov	local01, arg01
2f928     0A 29 02 F6 | 	mov	local02, arg02
2f92c     13 2B 02 FB | 	rdlong	local03, local01
2f930     13 13 02 F6 | 	mov	arg01, local01
2f934     00 14 06 F6 | 	mov	arg02, #0
2f938     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2f93c     FD 2C 0A F6 | 	mov	local04, result1 wz
2f940     70 00 90 5D |  if_ne	jmp	#LR__4624
2f944     00 2E 06 F6 | 	mov	local05, #0
2f948                 | ' 		n = 0;
2f948                 | ' 		do {
2f948                 | LR__4620
2f948     18 26 06 F1 | 	add	local01, #24
2f94c     13 15 02 FB | 	rdlong	arg02, local01
2f950     18 26 86 F1 | 	sub	local01, #24
2f954     15 13 02 F6 | 	mov	arg01, local03
2f958     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2f95c     FD 2C 0A F6 | 	mov	local04, result1 wz
2f960     50 00 90 5D |  if_ne	jmp	#LR__4623
2f964     1C 26 06 F1 | 	add	local01, #28
2f968     13 31 02 FB | 	rdlong	local06, local01
2f96c     1C 26 86 F1 | 	sub	local01, #28
2f970     18 31 C2 FA | 	rdbyte	local06, local06
2f974     E5 30 0E F2 | 	cmp	local06, #229 wz
2f978     1C 26 06 51 |  if_ne	add	local01, #28
2f97c     13 33 02 5B |  if_ne	rdlong	local07, local01
2f980     1C 26 86 51 |  if_ne	sub	local01, #28
2f984     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2f988     10 00 90 5D |  if_ne	jmp	#LR__4621
2f98c     01 2E 06 F1 | 	add	local05, #1
2f990     14 2F 0A F2 | 	cmp	local05, local02 wz
2f994     1C 00 90 AD |  if_e	jmp	#LR__4623
2f998     04 00 90 FD | 	jmp	#LR__4622
2f99c                 | LR__4621
2f99c     00 2E 06 F6 | 	mov	local05, #0
2f9a0                 | LR__4622
2f9a0     13 13 02 F6 | 	mov	arg01, local01
2f9a4     01 14 06 F6 | 	mov	arg02, #1
2f9a8     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2f9ac     FD 2C 0A F6 | 	mov	local04, result1 wz
2f9b0     94 FF 9F AD |  if_e	jmp	#LR__4620
2f9b4                 | LR__4623
2f9b4                 | LR__4624
2f9b4     04 2C 0E F2 | 	cmp	local04, #4 wz
2f9b8     07 2C 06 A6 |  if_e	mov	local04, #7
2f9bc                 | ' 	return res;
2f9bc     16 FB 01 F6 | 	mov	result1, local04
2f9c0     A7 F0 03 F6 | 	mov	ptra, fp
2f9c4     B2 00 A0 FD | 	call	#popregs_
2f9c8                 | _fatfs_cc_dir_alloc_ret
2f9c8     2D 00 64 FD | 	ret
2f9cc                 | 
2f9cc                 | _fatfs_cc_ld_clust
2f9cc     09 01 02 F6 | 	mov	_var01, arg01
2f9d0     0A 13 02 F6 | 	mov	arg01, arg02
2f9d4     1A 12 06 F1 | 	add	arg01, #26
2f9d8                 | ' {
2f9d8                 | ' 
2f9d8                 | ' 	return *((WORD*)ptr);
2f9d8     09 FB E1 FA | 	rdword	result1, arg01
2f9dc     FD 12 32 F9 | 	getword	arg01, result1, #0
2f9e0     00 01 C2 FA | 	rdbyte	_var01, _var01
2f9e4     03 00 0E F2 | 	cmp	_var01, #3 wz
2f9e8     14 14 06 A1 |  if_e	add	arg02, #20
2f9ec                 | ' {
2f9ec                 | ' 
2f9ec                 | ' 	return *((WORD*)ptr);
2f9ec     0A FB E1 AA |  if_e	rdword	result1, arg02
2f9f0     10 FA 65 A0 |  if_e	shl	result1, #16
2f9f4     FD 12 42 A5 |  if_e	or	arg01, result1
2f9f8                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2f9f8                 | ' 	}
2f9f8                 | ' 
2f9f8                 | ' 	return cl;
2f9f8     09 FB 01 F6 | 	mov	result1, arg01
2f9fc                 | _fatfs_cc_ld_clust_ret
2f9fc     2D 00 64 FD | 	ret
2fa00                 | 
2fa00                 | _fatfs_cc_st_clust
2fa00     09 01 02 F6 | 	mov	_var01, arg01
2fa04     0A 13 02 F6 | 	mov	arg01, arg02
2fa08     1A 12 06 F1 | 	add	arg01, #26
2fa0c     09 17 52 FC | 	wrword	arg03, arg01
2fa10     00 01 C2 FA | 	rdbyte	_var01, _var01
2fa14     03 00 0E F2 | 	cmp	_var01, #3 wz
2fa18     14 14 06 A1 |  if_e	add	arg02, #20
2fa1c     10 16 46 A0 |  if_e	shr	arg03, #16
2fa20     0A 17 52 AC |  if_e	wrword	arg03, arg02
2fa24                 | _fatfs_cc_st_clust_ret
2fa24     2D 00 64 FD | 	ret
2fa28                 | 
2fa28                 | _fatfs_cc_cmp_lfn
2fa28     07 4A 05 F6 | 	mov	COUNT_, #7
2fa2c     A8 00 A0 FD | 	call	#pushregs_
2fa30     09 27 02 F6 | 	mov	local01, arg01
2fa34     0A 13 02 F6 | 	mov	arg01, arg02
2fa38     1A 12 06 F1 | 	add	arg01, #26
2fa3c                 | ' {
2fa3c                 | ' 
2fa3c                 | ' 	return *((WORD*)ptr);
2fa3c     09 FB E9 FA | 	rdword	result1, arg01 wz
2fa40     00 FA 05 56 |  if_ne	mov	result1, #0
2fa44     E0 00 90 5D |  if_ne	jmp	#LR__4636
2fa48     0A 29 C2 FA | 	rdbyte	local02, arg02
2fa4c     3F 28 06 F5 | 	and	local02, #63
2fa50     01 28 86 F1 | 	sub	local02, #1
2fa54     0D 28 06 FD | 	qmul	local02, #13
2fa58                 | ' 
2fa58                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2fa58                 | ' 
2fa58                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2fa58     01 2A 06 F6 | 	mov	local03, #1
2fa5c     00 2C 06 F6 | 	mov	local04, #0
2fa60     18 2E 62 FD | 	getqx	local05
2fa64                 | LR__4630
2fa64     0D 2C 16 F2 | 	cmp	local04, #13 wc
2fa68     9C 00 90 3D |  if_ae	jmp	#LR__4635
2fa6c     0A 13 02 F6 | 	mov	arg01, arg02
2fa70     16 29 02 F6 | 	mov	local02, local04
2fa74     01 00 00 FF 
2fa78     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2fa7c     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2fa80     14 29 C2 FA | 	rdbyte	local02, local02
2fa84     01 28 06 FA | 	mul	local02, #1
2fa88     14 13 02 F1 | 	add	arg01, local02
2fa8c     01 00 00 FF 
2fa90     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2fa94                 | ' {
2fa94                 | ' 
2fa94                 | ' 	return *((WORD*)ptr);
2fa94     09 FB E1 FA | 	rdword	result1, arg01
2fa98     FD 30 02 F6 | 	mov	local06, result1
2fa9c     15 29 02 F6 | 	mov	local02, local03
2faa0     0F 28 4E F7 | 	zerox	local02, #15 wz
2faa4     44 00 90 AD |  if_e	jmp	#LR__4633
2faa8     00 2F 16 F2 | 	cmp	local05, #256 wc
2faac     2C 00 90 3D |  if_ae	jmp	#LR__4631
2fab0     18 13 32 F9 | 	getword	arg01, local06, #0
2fab4     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2fab8     FD 28 02 F6 | 	mov	local02, result1
2fabc     17 2B 02 F6 | 	mov	local03, local05
2fac0     01 2A 66 F0 | 	shl	local03, #1
2fac4     13 2B 02 F1 | 	add	local03, local01
2fac8     15 13 E2 FA | 	rdword	arg01, local03
2facc     01 2E 06 F1 | 	add	local05, #1
2fad0     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2fad4     FD 28 0A F2 | 	cmp	local02, result1 wz
2fad8     08 00 90 AD |  if_e	jmp	#LR__4632
2fadc                 | LR__4631
2fadc                 | ' 				return 0;
2fadc     00 FA 05 F6 | 	mov	result1, #0
2fae0     44 00 90 FD | 	jmp	#LR__4636
2fae4                 | LR__4632
2fae4     18 2B 02 F6 | 	mov	local03, local06
2fae8     14 00 90 FD | 	jmp	#LR__4634
2faec                 | LR__4633
2faec     18 31 32 F9 | 	getword	local06, local06, #0
2faf0     7F 00 00 FF 
2faf4     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2faf8     00 FA 05 56 |  if_ne	mov	result1, #0
2fafc     28 00 90 5D |  if_ne	jmp	#LR__4636
2fb00                 | LR__4634
2fb00     01 2C 06 F1 | 	add	local04, #1
2fb04     5C FF 9F FD | 	jmp	#LR__4630
2fb08                 | LR__4635
2fb08     0A 29 C2 FA | 	rdbyte	local02, arg02
2fb0c     40 28 CE F7 | 	test	local02, #64 wz
2fb10     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2fb14     01 2E 66 50 |  if_ne	shl	local05, #1
2fb18     13 2F 02 51 |  if_ne	add	local05, local01
2fb1c     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2fb20     00 FA 05 56 |  if_ne	mov	result1, #0
2fb24                 | ' 
2fb24                 | ' 	return 1;
2fb24     01 FA 05 A6 |  if_e	mov	result1, #1
2fb28                 | LR__4636
2fb28     A7 F0 03 F6 | 	mov	ptra, fp
2fb2c     B2 00 A0 FD | 	call	#popregs_
2fb30                 | _fatfs_cc_cmp_lfn_ret
2fb30     2D 00 64 FD | 	ret
2fb34                 | 
2fb34                 | _fatfs_cc_pick_lfn
2fb34     09 01 02 F6 | 	mov	_var01, arg01
2fb38     0A 13 02 F6 | 	mov	arg01, arg02
2fb3c     1A 12 06 F1 | 	add	arg01, #26
2fb40                 | ' {
2fb40                 | ' 
2fb40                 | ' 	return *((WORD*)ptr);
2fb40     09 FB E9 FA | 	rdword	result1, arg01 wz
2fb44     00 FA 05 56 |  if_ne	mov	result1, #0
2fb48     D4 00 90 5D |  if_ne	jmp	#LR__4645
2fb4c     0A 03 C2 FA | 	rdbyte	_var02, arg02
2fb50     40 02 26 F5 | 	andn	_var02, #64
2fb54     01 02 86 F1 | 	sub	_var02, #1
2fb58     0D 02 06 FD | 	qmul	_var02, #13
2fb5c                 | ' 
2fb5c                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2fb5c                 | ' 
2fb5c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2fb5c     01 04 06 F6 | 	mov	_var03, #1
2fb60     00 06 06 F6 | 	mov	_var04, #0
2fb64     18 08 62 FD | 	getqx	_var05
2fb68                 | LR__4640
2fb68     0D 06 16 F2 | 	cmp	_var04, #13 wc
2fb6c     80 00 90 3D |  if_ae	jmp	#LR__4643
2fb70     0A 13 02 F6 | 	mov	arg01, arg02
2fb74     03 03 02 F6 | 	mov	_var02, _var04
2fb78     01 00 00 FF 
2fb7c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2fb80     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2fb84     01 03 C2 FA | 	rdbyte	_var02, _var02
2fb88     01 02 06 FA | 	mul	_var02, #1
2fb8c     01 13 02 F1 | 	add	arg01, _var02
2fb90     01 00 00 FF 
2fb94     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2fb98                 | ' {
2fb98                 | ' 
2fb98                 | ' 	return *((WORD*)ptr);
2fb98     09 FB E1 FA | 	rdword	result1, arg01
2fb9c     FD 0A 02 F6 | 	mov	_var06, result1
2fba0     02 03 02 F6 | 	mov	_var02, _var03
2fba4     0F 02 4E F7 | 	zerox	_var02, #15 wz
2fba8     28 00 90 AD |  if_e	jmp	#LR__4641
2fbac     00 09 16 F2 | 	cmp	_var05, #256 wc
2fbb0     00 FA 05 36 |  if_ae	mov	result1, #0
2fbb4     68 00 90 3D |  if_ae	jmp	#LR__4645
2fbb8     04 03 02 F6 | 	mov	_var02, _var05
2fbbc     01 02 66 F0 | 	shl	_var02, #1
2fbc0     00 03 02 F1 | 	add	_var02, _var01
2fbc4     05 05 02 F6 | 	mov	_var03, _var06
2fbc8     01 05 52 FC | 	wrword	_var03, _var02
2fbcc     01 08 06 F1 | 	add	_var05, #1
2fbd0     14 00 90 FD | 	jmp	#LR__4642
2fbd4                 | LR__4641
2fbd4     05 0B 32 F9 | 	getword	_var06, _var06, #0
2fbd8     7F 00 00 FF 
2fbdc     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2fbe0     00 FA 05 56 |  if_ne	mov	result1, #0
2fbe4     38 00 90 5D |  if_ne	jmp	#LR__4645
2fbe8                 | LR__4642
2fbe8     01 06 06 F1 | 	add	_var04, #1
2fbec     78 FF 9F FD | 	jmp	#LR__4640
2fbf0                 | LR__4643
2fbf0     0A 03 C2 FA | 	rdbyte	_var02, arg02
2fbf4     40 02 CE F7 | 	test	_var02, #64 wz
2fbf8     02 0D 02 56 |  if_ne	mov	_var07, _var03
2fbfc     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2fc00     18 00 90 AD |  if_e	jmp	#LR__4644
2fc04     00 09 16 F2 | 	cmp	_var05, #256 wc
2fc08     00 FA 05 36 |  if_ae	mov	result1, #0
2fc0c     10 00 90 3D |  if_ae	jmp	#LR__4645
2fc10     01 08 66 F0 | 	shl	_var05, #1
2fc14     00 09 02 F1 | 	add	_var05, _var01
2fc18     04 01 58 FC | 	wrword	#0, _var05
2fc1c                 | LR__4644
2fc1c                 | ' 		lfnbuf[i] = 0;
2fc1c                 | ' 	}
2fc1c                 | ' 
2fc1c                 | ' 	return 1;
2fc1c     01 FA 05 F6 | 	mov	result1, #1
2fc20                 | LR__4645
2fc20                 | _fatfs_cc_pick_lfn_ret
2fc20     2D 00 64 FD | 	ret
2fc24                 | 
2fc24                 | _fatfs_cc_put_lfn
2fc24     0D 14 06 F1 | 	add	arg02, #13
2fc28     0A 19 42 FC | 	wrbyte	arg04, arg02
2fc2c     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2fc30     01 18 86 F1 | 	sub	arg04, #1
2fc34     0D 18 06 FD | 	qmul	arg04, #13
2fc38     09 01 02 F6 | 	mov	_var01, arg01
2fc3c     02 14 86 F1 | 	sub	arg02, #2
2fc40     0A 1F 48 FC | 	wrbyte	#15, arg02
2fc44     01 14 06 F1 | 	add	arg02, #1
2fc48     0A 01 48 FC | 	wrbyte	#0, arg02
2fc4c     0C 14 86 F1 | 	sub	arg02, #12
2fc50     0A 13 02 F6 | 	mov	arg01, arg02
2fc54     1A 12 06 F1 | 	add	arg01, #26
2fc58     09 01 58 FC | 	wrword	#0, arg01
2fc5c     00 02 06 F6 | 	mov	_var02, #0
2fc60     00 04 06 F6 | 	mov	_var03, #0
2fc64                 | ' 	BYTE* dir,
2fc64                 | ' 	BYTE ord,
2fc64                 | ' 	BYTE sum
2fc64                 | ' )
2fc64                 | ' {
2fc64                 | ' 	UINT i, s;
2fc64                 | ' 	WCHAR wc;
2fc64                 | ' 
2fc64                 | ' 
2fc64                 | ' 	dir[ 13 ] = sum;
2fc64                 | ' 	dir[ 11 ] =  0x0F ;
2fc64                 | ' 	dir[ 12 ] = 0;
2fc64                 | ' 	st_word(dir +  26 , 0);
2fc64                 | ' 
2fc64                 | ' 	i = (ord - 1) * 13;
2fc64                 | ' 	s = wc = 0;
2fc64                 | ' 	do {
2fc64     01 00 00 FF 
2fc68     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2fc6c     18 06 62 FD | 	getqx	_var04
2fc70     97 2A 48 FB | 	callpa	#(@LR__4651-@LR__4650)>>2,fcache_load_ptr_
2fc74                 | LR__4650
2fc74     01 19 32 F9 | 	getword	arg04, _var02, #0
2fc78     7F 00 00 FF 
2fc7c     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2fc80     03 13 02 56 |  if_ne	mov	arg01, _var04
2fc84     01 06 06 51 |  if_ne	add	_var04, #1
2fc88     01 12 66 50 |  if_ne	shl	arg01, #1
2fc8c     00 13 02 51 |  if_ne	add	arg01, _var01
2fc90     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2fc94     0A 13 02 F6 | 	mov	arg01, arg02
2fc98     02 19 02 F6 | 	mov	arg04, _var03
2fc9c     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2fca0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2fca4     01 18 06 FA | 	mul	arg04, #1
2fca8     0C 13 02 F1 | 	add	arg01, arg04
2fcac     09 03 52 FC | 	wrword	_var02, arg01
2fcb0     01 19 02 F6 | 	mov	arg04, _var02
2fcb4     0F 18 4E F7 | 	zerox	arg04, #15 wz
2fcb8     0F 02 CE A9 |  if_e	bmask	_var02, #15
2fcbc     01 04 06 F1 | 	add	_var03, #1
2fcc0     0D 04 16 F2 | 	cmp	_var03, #13 wc
2fcc4     AC FF 9F CD |  if_b	jmp	#LR__4650
2fcc8                 | LR__4651
2fcc8     01 00 00 FF 
2fccc     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2fcd0     01 03 32 F9 | 	getword	_var02, _var02, #0
2fcd4     7F 00 00 FF 
2fcd8     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2fcdc     01 06 66 50 |  if_ne	shl	_var04, #1
2fce0     00 07 02 51 |  if_ne	add	_var04, _var01
2fce4     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2fce8     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2fcec     40 16 46 A5 |  if_e	or	arg03, #64
2fcf0     0A 17 42 FC | 	wrbyte	arg03, arg02
2fcf4                 | _fatfs_cc_put_lfn_ret
2fcf4     2D 00 64 FD | 	ret
2fcf8                 | 
2fcf8                 | _fatfs_cc_gen_numname
2fcf8     08 4A 05 F6 | 	mov	COUNT_, #8
2fcfc     A8 00 A0 FD | 	call	#pushregs_
2fd00     2C F0 07 F1 | 	add	ptra, #44
2fd04     09 27 02 F6 | 	mov	local01, arg01
2fd08     0A 29 02 F6 | 	mov	local02, arg02
2fd0c     0B 2B 02 F6 | 	mov	local03, arg03
2fd10     0C 2D 02 F6 | 	mov	local04, arg04
2fd14     13 13 02 F6 | 	mov	arg01, local01
2fd18     14 15 02 F6 | 	mov	arg02, local02
2fd1c     0B 16 06 F6 | 	mov	arg03, #11
2fd20     28 72 BF FD | 	call	#__system____builtin_memmove
2fd24     06 2C 16 F2 | 	cmp	local04, #6 wc
2fd28     48 00 90 CD |  if_b	jmp	#LR__4665
2fd2c     16 2F 02 F6 | 	mov	local05, local04
2fd30     97 1E 48 FB | 	callpa	#(@LR__4663-@LR__4660)>>2,fcache_load_ptr_
2fd34                 | ' 		sreg = seq;
2fd34                 | ' 		while (*lfn) {
2fd34                 | LR__4660
2fd34     15 31 EA FA | 	rdword	local06, local03 wz
2fd38     34 00 90 AD |  if_e	jmp	#LR__4664
2fd3c     15 33 E2 FA | 	rdword	local07, local03
2fd40                 | ' 			wc = *lfn++;
2fd40                 | ' 			for (i = 0; i < 16; i++) {
2fd40     02 2A 06 F1 | 	add	local03, #2
2fd44     10 12 DC FC | 	rep	@LR__4662, #16
2fd48                 | LR__4661
2fd48     01 2E 66 F0 | 	shl	local05, #1
2fd4c     19 31 32 F9 | 	getword	local06, local07, #0
2fd50     01 30 06 F5 | 	and	local06, #1
2fd54     18 2F 02 F1 | 	add	local05, local06
2fd58     19 33 32 F9 | 	getword	local07, local07, #0
2fd5c     01 32 46 F0 | 	shr	local07, #1
2fd60     10 2E 2E F4 | 	testbn	local05, #16 wz
2fd64     88 00 00 5F 
2fd68     21 2E 66 55 |  if_ne	xor	local05, ##69665
2fd6c                 | LR__4662
2fd6c     C4 FF 9F FD | 	jmp	#LR__4660
2fd70                 | LR__4663
2fd70                 | LR__4664
2fd70     17 2D 02 F6 | 	mov	local04, local05
2fd74                 | LR__4665
2fd74     07 32 06 F6 | 	mov	local07, #7
2fd78                 | ' 			}
2fd78                 | ' 		}
2fd78                 | ' 		seq = (UINT)sreg;
2fd78                 | ' 	}
2fd78                 | ' 
2fd78                 | ' 
2fd78                 | ' 	i = 7;
2fd78                 | ' 	do {
2fd78     10 4E 05 F1 | 	add	fp, #16
2fd7c     97 1A 48 FB | 	callpa	#(@LR__4667-@LR__4666)>>2,fcache_load_ptr_
2fd80                 | LR__4666
2fd80     16 2F 42 F8 | 	getnib	local05, local04, #0
2fd84     30 2E 06 F1 | 	add	local05, #48
2fd88     04 2C 46 F0 | 	shr	local04, #4
2fd8c     17 31 E2 F8 | 	getbyte	local06, local05, #0
2fd90     3A 30 16 F2 | 	cmp	local06, #58 wc
2fd94     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2fd98     07 2E 06 31 |  if_ae	add	local05, #7
2fd9c     19 31 02 F6 | 	mov	local06, local07
2fda0     01 32 8E F1 | 	sub	local07, #1 wz
2fda4     A7 30 02 F1 | 	add	local06, fp
2fda8     18 2F 42 FC | 	wrbyte	local05, local06
2fdac     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2fdb0     CC FF 9F 5D |  if_ne	jmp	#LR__4666
2fdb4                 | LR__4667
2fdb4     19 31 02 F6 | 	mov	local06, local07
2fdb8     A7 30 02 F1 | 	add	local06, fp
2fdbc     18 FD 48 FC | 	wrbyte	#126, local06
2fdc0                 | ' 	ns[i] = '~';
2fdc0                 | ' 
2fdc0                 | ' 
2fdc0                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2fdc0     00 2E 06 F6 | 	mov	local05, #0
2fdc4     10 4E 85 F1 | 	sub	fp, #16
2fdc8     97 2A 48 FB | 	callpa	#(@LR__4670-@LR__4668)>>2,fcache_load_ptr_
2fdcc                 | LR__4668
2fdcc     19 2F 12 F2 | 	cmp	local05, local07 wc
2fdd0     4C 00 90 3D |  if_ae	jmp	#LR__4671
2fdd4     17 31 02 F6 | 	mov	local06, local05
2fdd8     13 31 02 F1 | 	add	local06, local01
2fddc     18 31 C2 FA | 	rdbyte	local06, local06
2fde0     20 30 0E F2 | 	cmp	local06, #32 wz
2fde4     38 00 90 AD |  if_e	jmp	#LR__4671
2fde8     17 13 02 F6 | 	mov	arg01, local05
2fdec     13 13 02 F1 | 	add	arg01, local01
2fdf0     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2fdf4     00 FA 05 56 |  if_ne	mov	result1, #0
2fdf8                 | ' 
2fdf8                 | ' 	return 0;
2fdf8     00 FA 05 A6 |  if_e	mov	result1, #0
2fdfc     00 FA 0D F2 | 	cmp	result1, #0 wz
2fe00     14 00 90 AD |  if_e	jmp	#LR__4669
2fe04     19 31 02 F6 | 	mov	local06, local07
2fe08     01 30 86 F1 | 	sub	local06, #1
2fe0c     18 2F 0A F2 | 	cmp	local05, local06 wz
2fe10     0C 00 90 AD |  if_e	jmp	#LR__4671
2fe14     01 2E 06 F1 | 	add	local05, #1
2fe18                 | LR__4669
2fe18     01 2E 06 F1 | 	add	local05, #1
2fe1c     AC FF 9F FD | 	jmp	#LR__4668
2fe20                 | LR__4670
2fe20                 | LR__4671
2fe20     97 20 48 FB | 	callpa	#(@LR__4675-@LR__4672)>>2,fcache_load_ptr_
2fe24                 | ' 			j++;
2fe24                 | ' 		}
2fe24                 | ' 	}
2fe24                 | ' 	do {
2fe24                 | LR__4672
2fe24     17 31 02 F6 | 	mov	local06, local05
2fe28     13 31 02 F1 | 	add	local06, local01
2fe2c     08 32 16 F2 | 	cmp	local07, #8 wc
2fe30     01 2E 06 F1 | 	add	local05, #1
2fe34     1C 00 90 3D |  if_ae	jmp	#LR__4673
2fe38     19 2D 02 F6 | 	mov	local04, local07
2fe3c     10 4E 05 F1 | 	add	fp, #16
2fe40     A7 2C 02 F1 | 	add	local04, fp
2fe44     16 35 C2 FA | 	rdbyte	local08, local04
2fe48     01 32 06 F1 | 	add	local07, #1
2fe4c     10 4E 85 F1 | 	sub	fp, #16
2fe50     04 00 90 FD | 	jmp	#LR__4674
2fe54                 | LR__4673
2fe54     20 34 06 F6 | 	mov	local08, #32
2fe58                 | LR__4674
2fe58     18 35 42 FC | 	wrbyte	local08, local06
2fe5c     08 2E 16 F2 | 	cmp	local05, #8 wc
2fe60     C0 FF 9F CD |  if_b	jmp	#LR__4672
2fe64                 | LR__4675
2fe64     A7 F0 03 F6 | 	mov	ptra, fp
2fe68     B2 00 A0 FD | 	call	#popregs_
2fe6c                 | _fatfs_cc_gen_numname_ret
2fe6c     2D 00 64 FD | 	ret
2fe70                 | 
2fe70                 | _fatfs_cc_sum_sfn
2fe70     00 00 06 F6 | 	mov	_var01, #0
2fe74                 | ' )
2fe74                 | ' {
2fe74                 | ' 	BYTE sum = 0;
2fe74                 | ' 	UINT n = 11;
2fe74                 | ' 
2fe74                 | ' 	do {
2fe74     97 12 48 FB | 	callpa	#(@LR__4682-@LR__4680)>>2,fcache_load_ptr_
2fe78                 | LR__4680
2fe78     0B 10 DC FC | 	rep	@LR__4683, #11
2fe7c                 | LR__4681
2fe7c     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2fe80     01 FA 45 F0 | 	shr	result1, #1
2fe84     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2fe88     07 00 66 F0 | 	shl	_var01, #7
2fe8c     00 FB 01 F1 | 	add	result1, _var01
2fe90     09 01 C2 FA | 	rdbyte	_var01, arg01
2fe94     FD 00 02 F1 | 	add	_var01, result1
2fe98     01 12 06 F1 | 	add	arg01, #1
2fe9c                 | LR__4682
2fe9c                 | LR__4683
2fe9c                 | ' 	return sum;
2fe9c     00 FB 01 F6 | 	mov	result1, _var01
2fea0                 | _fatfs_cc_sum_sfn_ret
2fea0     2D 00 64 FD | 	ret
2fea4                 | 
2fea4                 | _fatfs_cc_dir_read
2fea4     0C 4A 05 F6 | 	mov	COUNT_, #12
2fea8     A8 00 A0 FD | 	call	#pushregs_
2feac     09 27 02 F6 | 	mov	local01, arg01
2feb0     0A 29 02 F6 | 	mov	local02, arg02
2feb4     04 2A 06 F6 | 	mov	local03, #4
2feb8     13 2D 02 FB | 	rdlong	local04, local01
2febc     FF 2E 06 F6 | 	mov	local05, #255
2fec0     FF 30 06 F6 | 	mov	local06, #255
2fec4                 | ' )
2fec4                 | ' {
2fec4                 | ' 	FRESULT res = FR_NO_FILE;
2fec4                 | ' 	FATFS *fs = dp->obj.fs;
2fec4                 | ' 	BYTE attr, b;
2fec4                 | ' 
2fec4                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2fec4                 | ' 
2fec4                 | ' 
2fec4                 | ' 	while (dp->sect) {
2fec4                 | LR__4690
2fec4     18 26 06 F1 | 	add	local01, #24
2fec8     13 FB 09 FB | 	rdlong	result1, local01 wz
2fecc     18 26 86 F1 | 	sub	local01, #24
2fed0     AC 01 90 AD |  if_e	jmp	#LR__4700
2fed4     18 26 06 F1 | 	add	local01, #24
2fed8     13 15 02 FB | 	rdlong	arg02, local01
2fedc     18 26 86 F1 | 	sub	local01, #24
2fee0     16 13 02 F6 | 	mov	arg01, local04
2fee4     AC ED BF FD | 	call	#_fatfs_cc_move_window
2fee8     FD 2A 0A F6 | 	mov	local03, result1 wz
2feec     90 01 90 5D |  if_ne	jmp	#LR__4700
2fef0     1C 26 06 F1 | 	add	local01, #28
2fef4     13 FB 01 FB | 	rdlong	result1, local01
2fef8     1C 26 86 F1 | 	sub	local01, #28
2fefc     FD 32 C2 FA | 	rdbyte	local07, result1
2ff00     19 FB 01 F6 | 	mov	result1, local07
2ff04     07 FA 4D F7 | 	zerox	result1, #7 wz
2ff08     04 2A 06 A6 |  if_e	mov	local03, #4
2ff0c                 | ' 			res = FR_NO_FILE; break;
2ff0c     70 01 90 AD |  if_e	jmp	#LR__4700
2ff10     1C 26 06 F1 | 	add	local01, #28
2ff14     13 35 02 FB | 	rdlong	local08, local01
2ff18     0B 34 06 F1 | 	add	local08, #11
2ff1c     1A 37 C2 FA | 	rdbyte	local09, local08
2ff20     3F 36 06 F5 | 	and	local09, #63
2ff24     16 26 86 F1 | 	sub	local01, #22
2ff28     13 37 42 FC | 	wrbyte	local09, local01
2ff2c     06 26 86 F1 | 	sub	local01, #6
2ff30     19 FB E1 F8 | 	getbyte	result1, local07, #0
2ff34     E5 FA 0D F2 | 	cmp	result1, #229 wz
2ff38     19 35 02 56 |  if_ne	mov	local08, local07
2ff3c     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2ff40     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2ff44     1C 00 90 AD |  if_e	jmp	#LR__4691
2ff48     00 38 06 F6 | 	mov	local10, #0
2ff4c     1B 35 E2 F8 | 	getbyte	local08, local09, #0
2ff50     20 34 26 F5 | 	andn	local08, #32
2ff54     08 34 0E F2 | 	cmp	local08, #8 wz
2ff58     01 38 06 A6 |  if_e	mov	local10, #1
2ff5c     14 39 0A F2 | 	cmp	local10, local02 wz
2ff60     08 00 90 AD |  if_e	jmp	#LR__4692
2ff64                 | LR__4691
2ff64     FF 2E 06 F6 | 	mov	local05, #255
2ff68     00 01 90 FD | 	jmp	#LR__4699
2ff6c                 | LR__4692
2ff6c     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2ff70     0F 36 0E F2 | 	cmp	local09, #15 wz
2ff74     B4 00 90 5D |  if_ne	jmp	#LR__4696
2ff78     19 3B E2 F8 | 	getbyte	local11, local07, #0
2ff7c     40 3A CE F7 | 	test	local11, #64 wz
2ff80     30 00 90 AD |  if_e	jmp	#LR__4693
2ff84     1C 26 06 F1 | 	add	local01, #28
2ff88     13 3B 02 FB | 	rdlong	local11, local01
2ff8c     0D 3A 06 F1 | 	add	local11, #13
2ff90     1D 31 C2 FA | 	rdbyte	local06, local11
2ff94     19 33 E2 F8 | 	getbyte	local07, local07, #0
2ff98     BF 32 06 F5 | 	and	local07, #191
2ff9c     19 2F 02 F6 | 	mov	local05, local07
2ffa0     0C 26 86 F1 | 	sub	local01, #12
2ffa4     13 3B 02 FB | 	rdlong	local11, local01
2ffa8     1C 26 06 F1 | 	add	local01, #28
2ffac     13 3B 62 FC | 	wrlong	local11, local01
2ffb0     2C 26 86 F1 | 	sub	local01, #44
2ffb4                 | LR__4693
2ffb4     19 35 E2 F8 | 	getbyte	local08, local07, #0
2ffb8     17 39 E2 F8 | 	getbyte	local10, local05, #0
2ffbc     1C 35 0A F2 | 	cmp	local08, local10 wz
2ffc0     5C 00 90 5D |  if_ne	jmp	#LR__4694
2ffc4     18 39 E2 F8 | 	getbyte	local10, local06, #0
2ffc8     1C 26 06 F1 | 	add	local01, #28
2ffcc     13 37 02 FB | 	rdlong	local09, local01
2ffd0     1C 26 86 F1 | 	sub	local01, #28
2ffd4     0D 36 06 F1 | 	add	local09, #13
2ffd8     1B 35 C2 FA | 	rdbyte	local08, local09
2ffdc     1A 37 E2 F8 | 	getbyte	local09, local08, #0
2ffe0     1B 39 0A F2 | 	cmp	local10, local09 wz
2ffe4     38 00 90 5D |  if_ne	jmp	#LR__4694
2ffe8     0C 2C 06 F1 | 	add	local04, #12
2ffec     16 13 02 FB | 	rdlong	arg01, local04
2fff0     0C 2C 86 F1 | 	sub	local04, #12
2fff4     1C 26 06 F1 | 	add	local01, #28
2fff8     13 3D 02 FB | 	rdlong	local12, local01
2fffc     1C 26 86 F1 | 	sub	local01, #28
30000     1E 15 02 F6 | 	mov	arg02, local12
30004     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
30008     00 FA 4D F2 | 	cmps	result1, #0 wz
3000c     17 3D 02 56 |  if_ne	mov	local12, local05
30010     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
30014     01 3C 86 51 |  if_ne	sub	local12, #1
30018     1E 3B 02 56 |  if_ne	mov	local11, local12
3001c     04 00 90 5D |  if_ne	jmp	#LR__4695
30020                 | LR__4694
30020     FF 3A 06 F6 | 	mov	local11, #255
30024                 | LR__4695
30024     1D 2F 02 F6 | 	mov	local05, local11
30028     40 00 90 FD | 	jmp	#LR__4698
3002c                 | LR__4696
3002c     17 3B 02 F6 | 	mov	local11, local05
30030     07 3A 4E F7 | 	zerox	local11, #7 wz
30034     20 00 90 5D |  if_ne	jmp	#LR__4697
30038     18 31 E2 F8 | 	getbyte	local06, local06, #0
3003c     1C 26 06 F1 | 	add	local01, #28
30040     13 13 02 FB | 	rdlong	arg01, local01
30044     1C 26 86 F1 | 	sub	local01, #28
30048     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
3004c     FD FA E1 F8 | 	getbyte	result1, result1, #0
30050     FD 30 0A F2 | 	cmp	local06, result1 wz
30054     28 00 90 AD |  if_e	jmp	#LR__4700
30058                 | LR__4697
30058     2C 26 06 F1 | 	add	local01, #44
3005c     FF FF FF FF 
30060     13 FF 6B FC | 	wrlong	##-1, local01
30064     2C 26 86 F1 | 	sub	local01, #44
30068                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
30068                 | ' 					}
30068                 | ' 					break;
30068     14 00 90 FD | 	jmp	#LR__4700
3006c                 | LR__4698
3006c                 | LR__4699
3006c     13 13 02 F6 | 	mov	arg01, local01
30070     00 14 06 F6 | 	mov	arg02, #0
30074     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
30078     FD 2A 0A F6 | 	mov	local03, result1 wz
3007c     44 FE 9F AD |  if_e	jmp	#LR__4690
30080                 | LR__4700
30080     00 2A 0E F2 | 	cmp	local03, #0 wz
30084     18 26 06 51 |  if_ne	add	local01, #24
30088     13 01 68 5C |  if_ne	wrlong	#0, local01
3008c                 | ' 	return res;
3008c     15 FB 01 F6 | 	mov	result1, local03
30090     A7 F0 03 F6 | 	mov	ptra, fp
30094     B2 00 A0 FD | 	call	#popregs_
30098                 | _fatfs_cc_dir_read_ret
30098     2D 00 64 FD | 	ret
3009c                 | 
3009c                 | _fatfs_cc_dir_find
3009c     0B 4A 05 F6 | 	mov	COUNT_, #11
300a0     A8 00 A0 FD | 	call	#pushregs_
300a4     09 27 02 F6 | 	mov	local01, arg01
300a8     13 29 02 FB | 	rdlong	local02, local01
300ac     13 13 02 F6 | 	mov	arg01, local01
300b0     00 14 06 F6 | 	mov	arg02, #0
300b4     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
300b8     00 FA 0D F2 | 	cmp	result1, #0 wz
300bc     18 02 90 5D |  if_ne	jmp	#LR__4722
300c0     FF 2A 06 F6 | 	mov	local03, #255
300c4     FF 2C 06 F6 | 	mov	local04, #255
300c8     2C 26 06 F1 | 	add	local01, #44
300cc     FF FF FF FF 
300d0     13 FF 6B FC | 	wrlong	##-1, local01
300d4     2C 26 86 F1 | 	sub	local01, #44
300d8                 | ' #line 2404 "ff.c"
300d8                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
300d8                 | ' 
300d8                 | ' 	do {
300d8                 | LR__4710
300d8     18 26 06 F1 | 	add	local01, #24
300dc     13 15 02 FB | 	rdlong	arg02, local01
300e0     18 26 86 F1 | 	sub	local01, #24
300e4     14 13 02 F6 | 	mov	arg01, local02
300e8     A8 EB BF FD | 	call	#_fatfs_cc_move_window
300ec     FD 2E 0A F6 | 	mov	local05, result1 wz
300f0     E0 01 90 5D |  if_ne	jmp	#LR__4721
300f4     1C 26 06 F1 | 	add	local01, #28
300f8     13 17 02 FB | 	rdlong	arg03, local01
300fc     1C 26 86 F1 | 	sub	local01, #28
30100     0B 31 C2 FA | 	rdbyte	local06, arg03
30104     18 17 02 F6 | 	mov	arg03, local06
30108     07 16 4E F7 | 	zerox	arg03, #7 wz
3010c     04 2E 06 A6 |  if_e	mov	local05, #4
30110     C0 01 90 AD |  if_e	jmp	#LR__4721
30114     1C 26 06 F1 | 	add	local01, #28
30118     13 33 02 FB | 	rdlong	local07, local01
3011c     19 17 02 F6 | 	mov	arg03, local07
30120     0B 16 06 F1 | 	add	arg03, #11
30124     0B 35 C2 FA | 	rdbyte	local08, arg03
30128     3F 34 06 F5 | 	and	local08, #63
3012c     16 26 86 F1 | 	sub	local01, #22
30130     13 35 42 FC | 	wrbyte	local08, local01
30134     06 26 86 F1 | 	sub	local01, #6
30138     18 17 E2 F8 | 	getbyte	arg03, local06, #0
3013c     E5 16 0E F2 | 	cmp	arg03, #229 wz
30140     18 00 90 AD |  if_e	jmp	#LR__4711
30144     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
30148     08 16 CE F7 | 	test	arg03, #8 wz
3014c     1A 33 02 56 |  if_ne	mov	local07, local08
30150     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
30154     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
30158     18 00 90 AD |  if_e	jmp	#LR__4712
3015c                 | LR__4711
3015c     FF 2C 06 F6 | 	mov	local04, #255
30160     2C 26 06 F1 | 	add	local01, #44
30164     FF FF FF FF 
30168     13 FF 6B FC | 	wrlong	##-1, local01
3016c     2C 26 86 F1 | 	sub	local01, #44
30170     4C 01 90 FD | 	jmp	#LR__4720
30174                 | LR__4712
30174     1A 35 E2 F8 | 	getbyte	local08, local08, #0
30178     0F 34 0E F2 | 	cmp	local08, #15 wz
3017c     C8 00 90 5D |  if_ne	jmp	#LR__4716
30180     2B 26 06 F1 | 	add	local01, #43
30184     13 35 C2 FA | 	rdbyte	local08, local01
30188     2B 26 86 F1 | 	sub	local01, #43
3018c     40 34 CE F7 | 	test	local08, #64 wz
30190     2C 01 90 5D |  if_ne	jmp	#LR__4719
30194     18 37 E2 F8 | 	getbyte	local09, local06, #0
30198     40 36 CE F7 | 	test	local09, #64 wz
3019c     30 00 90 AD |  if_e	jmp	#LR__4713
301a0     1C 26 06 F1 | 	add	local01, #28
301a4     13 37 02 FB | 	rdlong	local09, local01
301a8     0D 36 06 F1 | 	add	local09, #13
301ac     1B 2B C2 FA | 	rdbyte	local03, local09
301b0     18 31 E2 F8 | 	getbyte	local06, local06, #0
301b4     BF 30 06 F5 | 	and	local06, #191
301b8     18 2D 02 F6 | 	mov	local04, local06
301bc     0C 26 86 F1 | 	sub	local01, #12
301c0     13 37 02 FB | 	rdlong	local09, local01
301c4     1C 26 06 F1 | 	add	local01, #28
301c8     13 37 62 FC | 	wrlong	local09, local01
301cc     2C 26 86 F1 | 	sub	local01, #44
301d0                 | LR__4713
301d0     18 39 E2 F8 | 	getbyte	local10, local06, #0
301d4     16 33 E2 F8 | 	getbyte	local07, local04, #0
301d8     19 39 0A F2 | 	cmp	local10, local07 wz
301dc     5C 00 90 5D |  if_ne	jmp	#LR__4714
301e0     15 35 E2 F8 | 	getbyte	local08, local03, #0
301e4     1C 26 06 F1 | 	add	local01, #28
301e8     13 33 02 FB | 	rdlong	local07, local01
301ec     1C 26 86 F1 | 	sub	local01, #28
301f0     0D 32 06 F1 | 	add	local07, #13
301f4     19 31 C2 FA | 	rdbyte	local06, local07
301f8     18 33 E2 F8 | 	getbyte	local07, local06, #0
301fc     19 35 0A F2 | 	cmp	local08, local07 wz
30200     38 00 90 5D |  if_ne	jmp	#LR__4714
30204     0C 28 06 F1 | 	add	local02, #12
30208     14 13 02 FB | 	rdlong	arg01, local02
3020c     0C 28 86 F1 | 	sub	local02, #12
30210     1C 26 06 F1 | 	add	local01, #28
30214     13 3B 02 FB | 	rdlong	local11, local01
30218     1C 26 86 F1 | 	sub	local01, #28
3021c     1D 15 02 F6 | 	mov	arg02, local11
30220     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
30224     00 FA 4D F2 | 	cmps	result1, #0 wz
30228     16 3B 02 56 |  if_ne	mov	local11, local04
3022c     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
30230     01 3A 86 51 |  if_ne	sub	local11, #1
30234     1D 37 02 56 |  if_ne	mov	local09, local11
30238     04 00 90 5D |  if_ne	jmp	#LR__4715
3023c                 | LR__4714
3023c     FF 36 06 F6 | 	mov	local09, #255
30240                 | LR__4715
30240     1B 2D 02 F6 | 	mov	local04, local09
30244     78 00 90 FD | 	jmp	#LR__4719
30248                 | LR__4716
30248     16 37 02 F6 | 	mov	local09, local04
3024c     07 36 4E F7 | 	zerox	local09, #7 wz
30250     20 00 90 5D |  if_ne	jmp	#LR__4717
30254     15 39 E2 F8 | 	getbyte	local10, local03, #0
30258     1C 26 06 F1 | 	add	local01, #28
3025c     13 13 02 FB | 	rdlong	arg01, local01
30260     1C 26 86 F1 | 	sub	local01, #28
30264     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
30268     FD FA E1 F8 | 	getbyte	result1, result1, #0
3026c     FD 38 0A F2 | 	cmp	local10, result1 wz
30270     60 00 90 AD |  if_e	jmp	#LR__4721
30274                 | LR__4717
30274     2B 26 06 F1 | 	add	local01, #43
30278     13 37 C2 FA | 	rdbyte	local09, local01
3027c     2B 26 86 F1 | 	sub	local01, #43
30280     01 36 CE F7 | 	test	local09, #1 wz
30284     24 00 90 5D |  if_ne	jmp	#LR__4718
30288     1C 26 06 F1 | 	add	local01, #28
3028c     13 13 02 FB | 	rdlong	arg01, local01
30290     04 26 06 F1 | 	add	local01, #4
30294     13 15 02 F6 | 	mov	arg02, local01
30298     20 26 86 F1 | 	sub	local01, #32
3029c     0B 16 06 F6 | 	mov	arg03, #11
302a0     88 DA BF FD | 	call	#_fatfs_cc_memcmp
302a4     00 FA 0D F2 | 	cmp	result1, #0 wz
302a8     28 00 90 AD |  if_e	jmp	#LR__4721
302ac                 | LR__4718
302ac     FF 2C 06 F6 | 	mov	local04, #255
302b0     2C 26 06 F1 | 	add	local01, #44
302b4     FF FF FF FF 
302b8     13 FF 6B FC | 	wrlong	##-1, local01
302bc     2C 26 86 F1 | 	sub	local01, #44
302c0                 | LR__4719
302c0                 | LR__4720
302c0     13 13 02 F6 | 	mov	arg01, local01
302c4     00 14 06 F6 | 	mov	arg02, #0
302c8     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
302cc     FD 2E 0A F6 | 	mov	local05, result1 wz
302d0     04 FE 9F AD |  if_e	jmp	#LR__4710
302d4                 | LR__4721
302d4                 | ' 
302d4                 | ' 	return res;
302d4     17 FB 01 F6 | 	mov	result1, local05
302d8                 | LR__4722
302d8     A7 F0 03 F6 | 	mov	ptra, fp
302dc     B2 00 A0 FD | 	call	#popregs_
302e0                 | _fatfs_cc_dir_find_ret
302e0     2D 00 64 FD | 	ret
302e4                 | 
302e4                 | _fatfs_cc_dir_register
302e4     0A 4A 05 F6 | 	mov	COUNT_, #10
302e8     A8 00 A0 FD | 	call	#pushregs_
302ec     2C F0 07 F1 | 	add	ptra, #44
302f0     04 4E 05 F1 | 	add	fp, #4
302f4     A7 12 62 FC | 	wrlong	arg01, fp
302f8     09 27 02 FB | 	rdlong	local01, arg01
302fc     08 4E 05 F1 | 	add	fp, #8
30300     A7 26 62 FC | 	wrlong	local01, fp
30304     08 4E 85 F1 | 	sub	fp, #8
30308     A7 28 02 FB | 	rdlong	local02, fp
3030c     04 4E 85 F1 | 	sub	fp, #4
30310     2B 28 06 F1 | 	add	local02, #43
30314     14 29 C2 FA | 	rdbyte	local02, local02
30318     A0 28 CE F7 | 	test	local02, #160 wz
3031c     06 FA 05 56 |  if_ne	mov	result1, #6
30320     F8 03 90 5D |  if_ne	jmp	#LR__4745
30324                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
30324     14 4E 05 F1 | 	add	fp, #20
30328     A7 00 68 FC | 	wrlong	#0, fp
3032c     14 4E 85 F1 | 	sub	fp, #20
30330     97 28 48 FB | 	callpa	#(@LR__4731-@LR__4730)>>2,fcache_load_ptr_
30334                 | LR__4730
30334     0C 4E 05 F1 | 	add	fp, #12
30338     A7 28 02 FB | 	rdlong	local02, fp
3033c     0C 28 06 F1 | 	add	local02, #12
30340     14 2B 02 FB | 	rdlong	local03, local02
30344     08 4E 05 F1 | 	add	fp, #8
30348     A7 2C 02 FB | 	rdlong	local04, fp
3034c     14 4E 85 F1 | 	sub	fp, #20
30350     01 2C 66 F0 | 	shl	local04, #1
30354     15 2D 02 F1 | 	add	local04, local03
30358     16 29 EA FA | 	rdword	local02, local04 wz
3035c     24 00 90 AD |  if_e	jmp	#LR__4732
30360     14 4E 05 F1 | 	add	fp, #20
30364     A7 2E 02 FB | 	rdlong	local05, fp
30368     17 31 02 F6 | 	mov	local06, local05
3036c     17 33 02 F6 | 	mov	local07, local05
30370     19 35 02 F6 | 	mov	local08, local07
30374     01 34 06 F1 | 	add	local08, #1
30378     A7 34 62 FC | 	wrlong	local08, fp
3037c     14 4E 85 F1 | 	sub	fp, #20
30380     B0 FF 9F FD | 	jmp	#LR__4730
30384                 | LR__4731
30384                 | LR__4732
30384     1C 4E 05 F1 | 	add	fp, #28
30388     A7 12 02 F6 | 	mov	arg01, fp
3038c     18 4E 85 F1 | 	sub	fp, #24
30390     A7 14 02 FB | 	rdlong	arg02, fp
30394     04 4E 85 F1 | 	sub	fp, #4
30398     20 14 06 F1 | 	add	arg02, #32
3039c     0C 16 06 F6 | 	mov	arg03, #12
303a0     A8 6B BF FD | 	call	#__system____builtin_memmove
303a4     27 4E 05 F1 | 	add	fp, #39
303a8     A7 36 C2 FA | 	rdbyte	local09, fp
303ac     27 4E 85 F1 | 	sub	fp, #39
303b0     01 36 CE F7 | 	test	local09, #1 wz
303b4     F4 00 90 AD |  if_e	jmp	#LR__4735
303b8     04 4E 05 F1 | 	add	fp, #4
303bc     A7 38 02 FB | 	rdlong	local10, fp
303c0     2B 38 06 F1 | 	add	local10, #43
303c4     1C 81 48 FC | 	wrbyte	#64, local10
303c8                 | ' 		dp->fn[ 11 ] =  0x40 ;
303c8                 | ' 		for (n = 1; n < 100; n++) {
303c8     0C 4E 05 F1 | 	add	fp, #12
303cc     A7 02 68 FC | 	wrlong	#1, fp
303d0     10 4E 85 F1 | 	sub	fp, #16
303d4                 | LR__4733
303d4     10 4E 05 F1 | 	add	fp, #16
303d8     A7 28 02 FB | 	rdlong	local02, fp
303dc     10 4E 85 F1 | 	sub	fp, #16
303e0     64 28 16 F2 | 	cmp	local02, #100 wc
303e4     70 00 90 3D |  if_ae	jmp	#LR__4734
303e8     04 4E 05 F1 | 	add	fp, #4
303ec     A7 12 02 FB | 	rdlong	arg01, fp
303f0     20 12 06 F1 | 	add	arg01, #32
303f4     18 4E 05 F1 | 	add	fp, #24
303f8     A7 14 02 F6 | 	mov	arg02, fp
303fc     10 4E 85 F1 | 	sub	fp, #16
30400     A7 38 02 FB | 	rdlong	local10, fp
30404     0C 38 06 F1 | 	add	local10, #12
30408     1C 17 02 FB | 	rdlong	arg03, local10
3040c     04 4E 05 F1 | 	add	fp, #4
30410     A7 18 02 FB | 	rdlong	arg04, fp
30414     10 4E 85 F1 | 	sub	fp, #16
30418     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
3041c     04 4E 05 F1 | 	add	fp, #4
30420     A7 12 02 FB | 	rdlong	arg01, fp
30424     04 4E 85 F1 | 	sub	fp, #4
30428     70 FC BF FD | 	call	#_fatfs_cc_dir_find
3042c     08 4E 05 F1 | 	add	fp, #8
30430     A7 FA 61 FC | 	wrlong	result1, fp
30434     00 FA 4D F2 | 	cmps	result1, #0 wz
30438     08 4E 85 F1 | 	sub	fp, #8
3043c     18 00 90 5D |  if_ne	jmp	#LR__4734
30440     10 4E 05 F1 | 	add	fp, #16
30444     A7 38 02 FB | 	rdlong	local10, fp
30448     01 38 06 F1 | 	add	local10, #1
3044c     A7 38 62 FC | 	wrlong	local10, fp
30450     10 4E 85 F1 | 	sub	fp, #16
30454     7C FF 9F FD | 	jmp	#LR__4733
30458                 | LR__4734
30458     10 4E 05 F1 | 	add	fp, #16
3045c     A7 38 02 FB | 	rdlong	local10, fp
30460     10 4E 85 F1 | 	sub	fp, #16
30464     64 38 0E F2 | 	cmp	local10, #100 wz
30468     07 FA 05 A6 |  if_e	mov	result1, #7
3046c     AC 02 90 AD |  if_e	jmp	#LR__4745
30470     08 4E 05 F1 | 	add	fp, #8
30474     A7 38 02 FB | 	rdlong	local10, fp
30478     08 4E 85 F1 | 	sub	fp, #8
3047c     04 38 0E F2 | 	cmp	local10, #4 wz
30480     08 4E 05 51 |  if_ne	add	fp, #8
30484     A7 FA 01 5B |  if_ne	rdlong	result1, fp
30488     08 4E 85 51 |  if_ne	sub	fp, #8
3048c     8C 02 90 5D |  if_ne	jmp	#LR__4745
30490     04 4E 05 F1 | 	add	fp, #4
30494     A7 38 02 FB | 	rdlong	local10, fp
30498     23 4E 05 F1 | 	add	fp, #35
3049c     A7 26 C2 FA | 	rdbyte	local01, fp
304a0     27 4E 85 F1 | 	sub	fp, #39
304a4     2B 38 06 F1 | 	add	local10, #43
304a8     1C 27 42 FC | 	wrbyte	local01, local10
304ac                 | LR__4735
304ac     27 4E 05 F1 | 	add	fp, #39
304b0     A7 28 C2 FA | 	rdbyte	local02, fp
304b4     27 4E 85 F1 | 	sub	fp, #39
304b8     02 28 CE F7 | 	test	local02, #2 wz
304bc     20 00 90 AD |  if_e	jmp	#LR__4736
304c0     14 4E 05 F1 | 	add	fp, #20
304c4     A7 38 02 FB | 	rdlong	local10, fp
304c8     0C 38 06 F1 | 	add	local10, #12
304cc     0D 38 16 FD | 	qdiv	local10, #13
304d0     14 4E 85 F1 | 	sub	fp, #20
304d4     18 38 62 FD | 	getqx	local10
304d8     01 38 06 F1 | 	add	local10, #1
304dc     04 00 90 FD | 	jmp	#LR__4737
304e0                 | LR__4736
304e0     01 38 06 F6 | 	mov	local10, #1
304e4                 | LR__4737
304e4     18 4E 05 F1 | 	add	fp, #24
304e8     A7 38 62 FC | 	wrlong	local10, fp
304ec     14 4E 85 F1 | 	sub	fp, #20
304f0     A7 12 02 FB | 	rdlong	arg01, fp
304f4     1C 15 02 F6 | 	mov	arg02, local10
304f8     04 4E 85 F1 | 	sub	fp, #4
304fc     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
30500     08 4E 05 F1 | 	add	fp, #8
30504     A7 FA 61 FC | 	wrlong	result1, fp
30508     08 4E 85 F1 | 	sub	fp, #8
3050c     00 FA 0D F2 | 	cmp	result1, #0 wz
30510     38 01 90 5D |  if_ne	jmp	#LR__4742
30514     18 4E 05 F1 | 	add	fp, #24
30518     A7 38 02 FB | 	rdlong	local10, fp
3051c     01 38 8E F1 | 	sub	local10, #1 wz
30520     A7 38 62 FC | 	wrlong	local10, fp
30524     18 4E 85 F1 | 	sub	fp, #24
30528     20 01 90 AD |  if_e	jmp	#LR__4742
3052c     04 4E 05 F1 | 	add	fp, #4
30530     A7 38 02 FB | 	rdlong	local10, fp
30534     1C 13 02 F6 | 	mov	arg01, local10
30538     14 4E 05 F1 | 	add	fp, #20
3053c     A7 18 02 FB | 	rdlong	arg04, fp
30540     18 4E 85 F1 | 	sub	fp, #24
30544     05 18 66 F0 | 	shl	arg04, #5
30548     10 38 06 F1 | 	add	local10, #16
3054c     1C 15 02 FB | 	rdlong	arg02, local10
30550     0C 15 82 F1 | 	sub	arg02, arg04
30554     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
30558     08 4E 05 F1 | 	add	fp, #8
3055c     A7 FA 61 FC | 	wrlong	result1, fp
30560     08 4E 85 F1 | 	sub	fp, #8
30564     00 FA 0D F2 | 	cmp	result1, #0 wz
30568     E0 00 90 5D |  if_ne	jmp	#LR__4741
3056c     04 4E 05 F1 | 	add	fp, #4
30570     A7 12 02 FB | 	rdlong	arg01, fp
30574     04 4E 85 F1 | 	sub	fp, #4
30578     20 12 06 F1 | 	add	arg01, #32
3057c     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
30580     FD 38 02 F6 | 	mov	local10, result1
30584     28 4E 05 F1 | 	add	fp, #40
30588     A7 38 42 FC | 	wrbyte	local10, fp
3058c     28 4E 85 F1 | 	sub	fp, #40
30590                 | ' 			sum = sum_sfn(dp->fn);
30590                 | ' 			do {
30590                 | LR__4738
30590     0C 4E 05 F1 | 	add	fp, #12
30594     A7 12 02 FB | 	rdlong	arg01, fp
30598     08 4E 85 F1 | 	sub	fp, #8
3059c     A7 26 02 FB | 	rdlong	local01, fp
305a0     04 4E 85 F1 | 	sub	fp, #4
305a4     18 26 06 F1 | 	add	local01, #24
305a8     13 15 02 FB | 	rdlong	arg02, local01
305ac     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
305b0     08 4E 05 F1 | 	add	fp, #8
305b4     A7 FA 61 FC | 	wrlong	result1, fp
305b8     00 FA 4D F2 | 	cmps	result1, #0 wz
305bc     08 4E 85 F1 | 	sub	fp, #8
305c0     88 00 90 5D |  if_ne	jmp	#LR__4740
305c4     0C 4E 05 F1 | 	add	fp, #12
305c8     A7 28 02 FB | 	rdlong	local02, fp
305cc     0C 28 06 F1 | 	add	local02, #12
305d0     14 13 02 FB | 	rdlong	arg01, local02
305d4     08 4E 85 F1 | 	sub	fp, #8
305d8     A7 26 02 FB | 	rdlong	local01, fp
305dc     1C 26 06 F1 | 	add	local01, #28
305e0     13 15 02 FB | 	rdlong	arg02, local01
305e4     14 4E 05 F1 | 	add	fp, #20
305e8     A7 16 02 FB | 	rdlong	arg03, fp
305ec     10 4E 05 F1 | 	add	fp, #16
305f0     A7 18 C2 FA | 	rdbyte	arg04, fp
305f4     28 4E 85 F1 | 	sub	fp, #40
305f8     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
305fc     0C 4E 05 F1 | 	add	fp, #12
30600     A7 38 02 FB | 	rdlong	local10, fp
30604     03 38 06 F1 | 	add	local10, #3
30608     1C 03 48 FC | 	wrbyte	#1, local10
3060c     08 4E 85 F1 | 	sub	fp, #8
30610     A7 12 02 FB | 	rdlong	arg01, fp
30614     04 4E 85 F1 | 	sub	fp, #4
30618     00 14 06 F6 | 	mov	arg02, #0
3061c     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
30620     08 4E 05 F1 | 	add	fp, #8
30624     A7 FA 61 FC | 	wrlong	result1, fp
30628     00 FA 4D F2 | 	cmps	result1, #0 wz
3062c     08 4E 85 F1 | 	sub	fp, #8
30630     18 00 90 5D |  if_ne	jmp	#LR__4739
30634     18 4E 05 F1 | 	add	fp, #24
30638     A7 38 02 FB | 	rdlong	local10, fp
3063c     01 38 8E F1 | 	sub	local10, #1 wz
30640     A7 38 62 FC | 	wrlong	local10, fp
30644     18 4E 85 F1 | 	sub	fp, #24
30648     44 FF 9F 5D |  if_ne	jmp	#LR__4738
3064c                 | LR__4739
3064c                 | LR__4740
3064c                 | LR__4741
3064c                 | LR__4742
3064c     08 4E 05 F1 | 	add	fp, #8
30650     A7 38 0A FB | 	rdlong	local10, fp wz
30654     08 4E 85 F1 | 	sub	fp, #8
30658     B4 00 90 5D |  if_ne	jmp	#LR__4744
3065c     0C 4E 05 F1 | 	add	fp, #12
30660     A7 12 02 FB | 	rdlong	arg01, fp
30664     08 4E 85 F1 | 	sub	fp, #8
30668     A7 26 02 FB | 	rdlong	local01, fp
3066c     04 4E 85 F1 | 	sub	fp, #4
30670     18 26 06 F1 | 	add	local01, #24
30674     13 15 02 FB | 	rdlong	arg02, local01
30678     18 E6 BF FD | 	call	#_fatfs_cc_move_window
3067c     08 4E 05 F1 | 	add	fp, #8
30680     A7 FA 61 FC | 	wrlong	result1, fp
30684     08 4E 85 F1 | 	sub	fp, #8
30688     00 FA 0D F2 | 	cmp	result1, #0 wz
3068c     80 00 90 5D |  if_ne	jmp	#LR__4743
30690     04 4E 05 F1 | 	add	fp, #4
30694     A7 28 02 FB | 	rdlong	local02, fp
30698     04 4E 85 F1 | 	sub	fp, #4
3069c     1C 28 06 F1 | 	add	local02, #28
306a0     14 13 02 FB | 	rdlong	arg01, local02
306a4     00 14 06 F6 | 	mov	arg02, #0
306a8     20 16 06 F6 | 	mov	arg03, #32
306ac     98 00 A0 FD | 	call	#\builtin_bytefill_
306b0     04 4E 05 F1 | 	add	fp, #4
306b4     A7 14 02 FB | 	rdlong	arg02, fp
306b8     0A 27 02 F6 | 	mov	local01, arg02
306bc     1C 26 06 F1 | 	add	local01, #28
306c0     13 13 02 FB | 	rdlong	arg01, local01
306c4     04 4E 85 F1 | 	sub	fp, #4
306c8     20 14 06 F1 | 	add	arg02, #32
306cc     0B 16 06 F6 | 	mov	arg03, #11
306d0     78 68 BF FD | 	call	#__system____builtin_memmove
306d4     04 4E 05 F1 | 	add	fp, #4
306d8     A7 36 02 FB | 	rdlong	local09, fp
306dc     1B 39 02 F6 | 	mov	local10, local09
306e0     1C 38 06 F1 | 	add	local10, #28
306e4     1C 27 02 FB | 	rdlong	local01, local10
306e8     2B 36 06 F1 | 	add	local09, #43
306ec     1B 39 C2 FA | 	rdbyte	local10, local09
306f0     18 38 06 F5 | 	and	local10, #24
306f4     0C 26 06 F1 | 	add	local01, #12
306f8     13 39 42 FC | 	wrbyte	local10, local01
306fc     08 4E 05 F1 | 	add	fp, #8
30700     A7 38 02 FB | 	rdlong	local10, fp
30704     0C 4E 85 F1 | 	sub	fp, #12
30708     03 38 06 F1 | 	add	local10, #3
3070c     1C 03 48 FC | 	wrbyte	#1, local10
30710                 | LR__4743
30710                 | LR__4744
30710                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
30710                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
30710                 | ' 
30710                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
30710                 | ' 
30710                 | ' 			fs->wflag = 1;
30710                 | ' 		}
30710                 | ' 	}
30710                 | ' 
30710                 | ' 	return res;
30710     08 4E 05 F1 | 	add	fp, #8
30714     A7 FA 01 FB | 	rdlong	result1, fp
30718     08 4E 85 F1 | 	sub	fp, #8
3071c                 | LR__4745
3071c     A7 F0 03 F6 | 	mov	ptra, fp
30720     B2 00 A0 FD | 	call	#popregs_
30724                 | _fatfs_cc_dir_register_ret
30724     2D 00 64 FD | 	ret
30728                 | 
30728                 | _fatfs_cc_dir_remove
30728     05 4A 05 F6 | 	mov	COUNT_, #5
3072c     A8 00 A0 FD | 	call	#pushregs_
30730     09 27 02 F6 | 	mov	local01, arg01
30734     13 29 02 FB | 	rdlong	local02, local01
30738     10 26 06 F1 | 	add	local01, #16
3073c     13 2B 02 FB | 	rdlong	local03, local01
30740     1C 26 06 F1 | 	add	local01, #28
30744     13 15 02 FB | 	rdlong	arg02, local01
30748     2C 26 86 F1 | 	sub	local01, #44
3074c     FF FF 7F FF 
30750     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
30754     00 2C 06 A6 |  if_e	mov	local04, #0
30758     18 00 90 AD |  if_e	jmp	#LR__4750
3075c     13 13 02 F6 | 	mov	arg01, local01
30760     2C 26 06 F1 | 	add	local01, #44
30764     13 15 02 FB | 	rdlong	arg02, local01
30768     2C 26 86 F1 | 	sub	local01, #44
3076c     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
30770     FD 2C 02 F6 | 	mov	local04, result1
30774                 | LR__4750
30774     16 2F 0A F6 | 	mov	local05, local04 wz
30778     64 00 90 5D |  if_ne	jmp	#LR__4753
3077c                 | ' 		do {
3077c                 | LR__4751
3077c     18 26 06 F1 | 	add	local01, #24
30780     13 15 02 FB | 	rdlong	arg02, local01
30784     18 26 86 F1 | 	sub	local01, #24
30788     14 13 02 F6 | 	mov	arg01, local02
3078c     04 E5 BF FD | 	call	#_fatfs_cc_move_window
30790     FD 2E 0A F6 | 	mov	local05, result1 wz
30794     40 00 90 5D |  if_ne	jmp	#LR__4752
30798     1C 26 06 F1 | 	add	local01, #28
3079c     13 2D 02 FB | 	rdlong	local04, local01
307a0     16 CB 49 FC | 	wrbyte	#229, local04
307a4     03 28 06 F1 | 	add	local02, #3
307a8     14 03 48 FC | 	wrbyte	#1, local02
307ac     03 28 86 F1 | 	sub	local02, #3
307b0     0C 26 86 F1 | 	sub	local01, #12
307b4     13 2D 02 FB | 	rdlong	local04, local01
307b8     10 26 86 F1 | 	sub	local01, #16
307bc     15 2D 12 F2 | 	cmp	local04, local03 wc
307c0     14 00 90 3D |  if_ae	jmp	#LR__4752
307c4     13 13 02 F6 | 	mov	arg01, local01
307c8     00 14 06 F6 | 	mov	arg02, #0
307cc     90 EF BF FD | 	call	#_fatfs_cc_dir_next
307d0     FD 2E 0A F6 | 	mov	local05, result1 wz
307d4     A4 FF 9F AD |  if_e	jmp	#LR__4751
307d8                 | LR__4752
307d8     04 2E 0E F2 | 	cmp	local05, #4 wz
307dc     02 2E 06 A6 |  if_e	mov	local05, #2
307e0                 | LR__4753
307e0                 | ' 	}
307e0                 | ' #line 2590 "ff.c"
307e0                 | ' 	return res;
307e0     17 FB 01 F6 | 	mov	result1, local05
307e4     A7 F0 03 F6 | 	mov	ptra, fp
307e8     B2 00 A0 FD | 	call	#popregs_
307ec                 | _fatfs_cc_dir_remove_ret
307ec     2D 00 64 FD | 	ret
307f0                 | 
307f0                 | _fatfs_cc_get_fileinfo
307f0     0F 4A 05 F6 | 	mov	COUNT_, #15
307f4     A8 00 A0 FD | 	call	#pushregs_
307f8     09 27 02 F6 | 	mov	local01, arg01
307fc     0A 29 02 F6 | 	mov	local02, arg02
30800     13 2B 02 FB | 	rdlong	local03, local01
30804     1C 28 06 F1 | 	add	local02, #28
30808     14 01 48 FC | 	wrbyte	#0, local02
3080c     1C 28 86 F1 | 	sub	local02, #28
30810     18 26 06 F1 | 	add	local01, #24
30814     13 2D 0A FB | 	rdlong	local04, local01 wz
30818     18 26 86 F1 | 	sub	local01, #24
3081c     90 03 90 AD |  if_e	jmp	#LR__4774
30820     2C 26 06 F1 | 	add	local01, #44
30824     13 2D 02 FB | 	rdlong	local04, local01
30828     2C 26 86 F1 | 	sub	local01, #44
3082c     FF FF 7F FF 
30830     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
30834     D8 00 90 AD |  if_e	jmp	#LR__4763
30838     00 2E 06 F6 | 	mov	local05, #0
3083c     00 30 06 F6 | 	mov	local06, #0
30840     00 32 06 F6 | 	mov	local07, #0
30844                 | ' 			si = di = 0;
30844                 | ' 			hs = 0;
30844                 | ' 			while (fs->lfnbuf[si] != 0) {
30844                 | LR__4760
30844     0C 2A 06 F1 | 	add	local03, #12
30848     15 2D 02 FB | 	rdlong	local04, local03
3084c     0C 2A 86 F1 | 	sub	local03, #12
30850     18 35 02 F6 | 	mov	local08, local06
30854     01 34 66 F0 | 	shl	local08, #1
30858     16 35 02 F1 | 	add	local08, local04
3085c     1A 2D EA FA | 	rdword	local04, local08 wz
30860     90 00 90 AD |  if_e	jmp	#LR__4762
30864     0C 2A 06 F1 | 	add	local03, #12
30868     15 37 02 FB | 	rdlong	local09, local03
3086c     0C 2A 86 F1 | 	sub	local03, #12
30870     18 39 02 F6 | 	mov	local10, local06
30874     01 38 66 F0 | 	shl	local10, #1
30878     1B 39 02 F1 | 	add	local10, local09
3087c     1C 3B E2 FA | 	rdword	local11, local10
30880     19 2D 02 F6 | 	mov	local04, local07
30884     0F 2C 4E F7 | 	zerox	local04, #15 wz
30888     01 30 06 F1 | 	add	local06, #1
3088c     24 00 90 5D |  if_ne	jmp	#LR__4761
30890     1D 3D 32 F9 | 	getword	local12, local11, #0
30894     6C 00 00 FF 
30898     00 3C 16 F2 | 	cmp	local12, ##55296 wc
3089c     14 00 90 CD |  if_b	jmp	#LR__4761
308a0     1D 3F 32 F9 | 	getword	local13, local11, #0
308a4     70 00 00 FF 
308a8     00 3E 16 F2 | 	cmp	local13, ##57344 wc
308ac     1D 33 02 C6 |  if_b	mov	local07, local11
308b0                 | ' 					hs = wc; continue;
308b0     90 FF 9F CD |  if_b	jmp	#LR__4760
308b4                 | LR__4761
308b4     19 13 32 F9 | 	getword	arg01, local07, #0
308b8     10 12 66 F0 | 	shl	arg01, #16
308bc     1D 3B 32 F9 | 	getword	local11, local11, #0
308c0     1D 13 42 F5 | 	or	arg01, local11
308c4     17 15 02 F6 | 	mov	arg02, local05
308c8     1C 28 06 F1 | 	add	local02, #28
308cc     14 15 02 F1 | 	add	arg02, local02
308d0     FF 16 06 F6 | 	mov	arg03, #255
308d4     17 17 82 F1 | 	sub	arg03, local05
308d8     1C 28 86 F1 | 	sub	local02, #28
308dc     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
308e0     FD 40 0A F6 | 	mov	local14, result1 wz
308e4     00 2E 06 A6 |  if_e	mov	local05, #0
308e8     20 2F 02 51 |  if_ne	add	local05, local14
308ec     00 32 06 56 |  if_ne	mov	local07, #0
308f0     50 FF 9F 5D |  if_ne	jmp	#LR__4760
308f4                 | LR__4762
308f4     19 2D 02 F6 | 	mov	local04, local07
308f8     0F 2C 4E F7 | 	zerox	local04, #15 wz
308fc     00 2E 06 56 |  if_ne	mov	local05, #0
30900     1C 28 06 F1 | 	add	local02, #28
30904     14 2F 02 F1 | 	add	local05, local02
30908     17 01 48 FC | 	wrbyte	#0, local05
3090c     1C 28 86 F1 | 	sub	local02, #28
30910                 | LR__4763
30910     00 2E 06 F6 | 	mov	local05, #0
30914     00 30 06 F6 | 	mov	local06, #0
30918                 | ' 			fno->fname[di] = 0;
30918                 | ' 		}
30918                 | ' 	}
30918                 | ' 
30918                 | ' 	si = di = 0;
30918                 | ' 	while (si < 11) {
30918                 | LR__4764
30918     0B 30 16 F2 | 	cmp	local06, #11 wc
3091c     20 01 90 3D |  if_ae	jmp	#LR__4767
30920     1C 26 06 F1 | 	add	local01, #28
30924     13 37 02 FB | 	rdlong	local09, local01
30928     1C 26 86 F1 | 	sub	local01, #28
3092c     18 39 02 F6 | 	mov	local10, local06
30930     1B 39 02 F1 | 	add	local10, local09
30934     1C 3B C2 FA | 	rdbyte	local11, local10
30938     1D 2D 32 F9 | 	getword	local04, local11, #0
3093c     20 2C 0E F2 | 	cmp	local04, #32 wz
30940     01 30 06 F1 | 	add	local06, #1
30944     D0 FF 9F AD |  if_e	jmp	#LR__4764
30948     1D 2D 32 F9 | 	getword	local04, local11, #0
3094c     05 2C 0E F2 | 	cmp	local04, #5 wz
30950     E5 3A 06 A6 |  if_e	mov	local11, #229
30954     09 30 0E F2 | 	cmp	local06, #9 wz
30958     20 00 90 5D |  if_ne	jmp	#LR__4765
3095c     0C 2E 16 F2 | 	cmp	local05, #12 wc
30960     18 00 90 3D |  if_ae	jmp	#LR__4765
30964     17 3F 02 F6 | 	mov	local13, local05
30968     0C 28 06 F1 | 	add	local02, #12
3096c     14 3F 02 F1 | 	add	local13, local02
30970     1F 5D 48 FC | 	wrbyte	#46, local13
30974     01 2E 06 F1 | 	add	local05, #1
30978     0C 28 86 F1 | 	sub	local02, #12
3097c                 | LR__4765
3097c     1D 13 32 F9 | 	getword	arg01, local11, #0
30980     07 12 4E F7 | 	zerox	arg01, #7 wz
30984     00 FA 05 56 |  if_ne	mov	result1, #0
30988                 | ' 
30988                 | ' 	return 0;
30988     00 FA 05 A6 |  if_e	mov	result1, #0
3098c     00 FA 0D F2 | 	cmp	result1, #0 wz
30990     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
30994     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
30998     50 00 90 AD |  if_e	jmp	#LR__4766
3099c     1C 26 06 F1 | 	add	local01, #28
309a0     13 39 02 FB | 	rdlong	local10, local01
309a4     1C 26 86 F1 | 	sub	local01, #28
309a8     18 35 02 F6 | 	mov	local08, local06
309ac     1C 35 02 F1 | 	add	local08, local10
309b0     1A 13 CA FA | 	rdbyte	arg01, local08 wz
309b4     00 FA 05 56 |  if_ne	mov	result1, #0
309b8                 | ' 
309b8                 | ' 	return 0;
309b8     00 FA 05 A6 |  if_e	mov	result1, #0
309bc     00 FA 0D F2 | 	cmp	result1, #0 wz
309c0     28 00 90 AD |  if_e	jmp	#LR__4766
309c4     1D 3B 32 F9 | 	getword	local11, local11, #0
309c8     08 3A 66 F0 | 	shl	local11, #8
309cc     1C 26 06 F1 | 	add	local01, #28
309d0     13 41 02 FB | 	rdlong	local14, local01
309d4     1C 26 86 F1 | 	sub	local01, #28
309d8     18 37 02 F6 | 	mov	local09, local06
309dc     20 37 02 F1 | 	add	local09, local14
309e0     1B 3D C2 FA | 	rdbyte	local12, local09
309e4     1E 3B 42 F5 | 	or	local11, local12
309e8     01 30 06 F1 | 	add	local06, #1
309ec                 | LR__4766
309ec     1D 13 02 F6 | 	mov	arg01, local11
309f0     01 00 00 FF 
309f4     52 15 06 F6 | 	mov	arg02, ##850
309f8     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
309fc     FD 3A 02 F6 | 	mov	local11, result1
30a00     1D 2D 02 F6 | 	mov	local04, local11
30a04     0F 2C 4E F7 | 	zerox	local04, #15 wz
30a08     00 2E 06 A6 |  if_e	mov	local05, #0
30a0c     30 00 90 AD |  if_e	jmp	#LR__4767
30a10     1D 13 32 F9 | 	getword	arg01, local11, #0
30a14     17 15 02 F6 | 	mov	arg02, local05
30a18     0C 28 06 F1 | 	add	local02, #12
30a1c     14 15 02 F1 | 	add	arg02, local02
30a20     0C 16 06 F6 | 	mov	arg03, #12
30a24     17 17 82 F1 | 	sub	arg03, local05
30a28     0C 28 86 F1 | 	sub	local02, #12
30a2c     EC DF BF FD | 	call	#_fatfs_cc_put_utf
30a30     FD 40 0A F6 | 	mov	local14, result1 wz
30a34     00 2E 06 A6 |  if_e	mov	local05, #0
30a38     20 2F 02 51 |  if_ne	add	local05, local14
30a3c     D8 FE 9F 5D |  if_ne	jmp	#LR__4764
30a40                 | LR__4767
30a40     17 2D 02 F6 | 	mov	local04, local05
30a44     0C 28 06 F1 | 	add	local02, #12
30a48     14 2D 02 F1 | 	add	local04, local02
30a4c     16 01 48 FC | 	wrbyte	#0, local04
30a50     10 28 06 F1 | 	add	local02, #16
30a54     14 2D CA FA | 	rdbyte	local04, local02 wz
30a58     1C 28 86 F1 | 	sub	local02, #28
30a5c     F8 00 90 5D |  if_ne	jmp	#LR__4773
30a60     00 2E 0E F2 | 	cmp	local05, #0 wz
30a64     1C 00 90 5D |  if_ne	jmp	#LR__4768
30a68     17 3F 02 F6 | 	mov	local13, local05
30a6c     1C 28 06 F1 | 	add	local02, #28
30a70     14 3F 02 F1 | 	add	local13, local02
30a74     1F 7F 48 FC | 	wrbyte	#63, local13
30a78     01 2E 06 F1 | 	add	local05, #1
30a7c     1C 28 86 F1 | 	sub	local02, #28
30a80     A4 00 90 FD | 	jmp	#LR__4772
30a84                 | LR__4768
30a84                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
30a84     00 2E 06 F6 | 	mov	local05, #0
30a88     00 30 06 F6 | 	mov	local06, #0
30a8c     08 42 06 F6 | 	mov	local15, #8
30a90                 | LR__4769
30a90     18 2D 02 F6 | 	mov	local04, local06
30a94     0C 28 06 F1 | 	add	local02, #12
30a98     14 2D 02 F1 | 	add	local04, local02
30a9c     16 3F CA FA | 	rdbyte	local13, local04 wz
30aa0     0C 28 86 F1 | 	sub	local02, #12
30aa4     80 00 90 AD |  if_e	jmp	#LR__4771
30aa8     18 35 02 F6 | 	mov	local08, local06
30aac     0C 28 06 F1 | 	add	local02, #12
30ab0     14 35 02 F1 | 	add	local08, local02
30ab4     1A 3B C2 FA | 	rdbyte	local11, local08
30ab8     1D 41 32 F9 | 	getword	local14, local11, #0
30abc     2E 40 0E F2 | 	cmp	local14, #46 wz
30ac0     0C 28 86 F1 | 	sub	local02, #12
30ac4     10 42 06 A6 |  if_e	mov	local15, #16
30ac8     1D 41 32 F9 | 	getword	local14, local11, #0
30acc     41 40 16 F2 | 	cmp	local14, #65 wc
30ad0     30 00 90 CD |  if_b	jmp	#LR__4770
30ad4     1D 35 32 F9 | 	getword	local08, local11, #0
30ad8     5B 34 16 F2 | 	cmp	local08, #91 wc
30adc     24 00 90 3D |  if_ae	jmp	#LR__4770
30ae0     1C 26 06 F1 | 	add	local01, #28
30ae4     13 37 02 FB | 	rdlong	local09, local01
30ae8     1C 26 86 F1 | 	sub	local01, #28
30aec     0C 36 06 F1 | 	add	local09, #12
30af0     1B 39 C2 FA | 	rdbyte	local10, local09
30af4     21 41 E2 F8 | 	getbyte	local14, local15, #0
30af8     20 39 CA F7 | 	test	local10, local14 wz
30afc     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
30b00     20 3A 06 51 |  if_ne	add	local11, #32
30b04                 | LR__4770
30b04     17 41 02 F6 | 	mov	local14, local05
30b08     1C 28 06 F1 | 	add	local02, #28
30b0c     14 41 02 F1 | 	add	local14, local02
30b10     1D 3B 32 F9 | 	getword	local11, local11, #0
30b14     20 3B 42 FC | 	wrbyte	local11, local14
30b18     01 30 06 F1 | 	add	local06, #1
30b1c     01 2E 06 F1 | 	add	local05, #1
30b20     1C 28 86 F1 | 	sub	local02, #28
30b24     68 FF 9F FD | 	jmp	#LR__4769
30b28                 | LR__4771
30b28                 | LR__4772
30b28     1C 28 06 F1 | 	add	local02, #28
30b2c     14 2F 02 F1 | 	add	local05, local02
30b30     17 01 48 FC | 	wrbyte	#0, local05
30b34     1C 26 06 F1 | 	add	local01, #28
30b38     13 2D 02 FB | 	rdlong	local04, local01
30b3c     1C 26 86 F1 | 	sub	local01, #28
30b40     0C 2C 06 F1 | 	add	local04, #12
30b44     16 3F CA FA | 	rdbyte	local13, local04 wz
30b48     1C 28 86 F1 | 	sub	local02, #28
30b4c     0C 28 06 A1 |  if_e	add	local02, #12
30b50     14 01 48 AC |  if_e	wrbyte	#0, local02
30b54     0C 28 86 A1 |  if_e	sub	local02, #12
30b58                 | LR__4773
30b58     1C 26 06 F1 | 	add	local01, #28
30b5c     13 3D 02 FB | 	rdlong	local12, local01
30b60     0B 3C 06 F1 | 	add	local12, #11
30b64     1E 2D C2 FA | 	rdbyte	local04, local12
30b68     3F 2C 06 F5 | 	and	local04, #63
30b6c     08 28 06 F1 | 	add	local02, #8
30b70     14 2D 42 FC | 	wrbyte	local04, local02
30b74     08 28 86 F1 | 	sub	local02, #8
30b78     13 13 02 FB | 	rdlong	arg01, local01
30b7c     1C 12 06 F1 | 	add	arg01, #28
30b80                 | ' {
30b80                 | ' 
30b80                 | ' 	return *((DWORD*)ptr);
30b80     09 FB 01 FB | 	rdlong	result1, arg01
30b84     14 FB 61 FC | 	wrlong	result1, local02
30b88     13 13 02 FB | 	rdlong	arg01, local01
30b8c     16 12 06 F1 | 	add	arg01, #22
30b90                 | ' {
30b90                 | ' 
30b90                 | ' 	return *((WORD*)ptr);
30b90     09 FB E1 FA | 	rdword	result1, arg01
30b94     06 28 06 F1 | 	add	local02, #6
30b98     14 FB 51 FC | 	wrword	result1, local02
30b9c     13 13 02 FB | 	rdlong	arg01, local01
30ba0     18 12 06 F1 | 	add	arg01, #24
30ba4                 | ' {
30ba4                 | ' 
30ba4                 | ' 	return *((WORD*)ptr);
30ba4     09 FB E1 FA | 	rdword	result1, arg01
30ba8     02 28 86 F1 | 	sub	local02, #2
30bac     14 FB 51 FC | 	wrword	result1, local02
30bb0                 | LR__4774
30bb0     A7 F0 03 F6 | 	mov	ptra, fp
30bb4     B2 00 A0 FD | 	call	#popregs_
30bb8                 | _fatfs_cc_get_fileinfo_ret
30bb8     2D 00 64 FD | 	ret
30bbc                 | 
30bbc                 | _fatfs_cc_create_name
30bbc     0D 4A 05 F6 | 	mov	COUNT_, #13
30bc0     A8 00 A0 FD | 	call	#pushregs_
30bc4     34 F0 07 F1 | 	add	ptra, #52
30bc8     04 4E 05 F1 | 	add	fp, #4
30bcc     A7 12 62 FC | 	wrlong	arg01, fp
30bd0     04 4E 05 F1 | 	add	fp, #4
30bd4     A7 14 62 FC | 	wrlong	arg02, fp
30bd8     0A FB 01 FB | 	rdlong	result1, arg02
30bdc     28 4E 05 F1 | 	add	fp, #40
30be0     A7 FA 61 FC | 	wrlong	result1, fp
30be4     2C 4E 85 F1 | 	sub	fp, #44
30be8     A7 FA 01 FB | 	rdlong	result1, fp
30bec     FD 26 02 FB | 	rdlong	local01, result1
30bf0     0C 26 06 F1 | 	add	local01, #12
30bf4     13 29 02 FB | 	rdlong	local02, local01
30bf8     14 4E 05 F1 | 	add	fp, #20
30bfc     A7 28 62 FC | 	wrlong	local02, fp
30c00     14 4E 05 F1 | 	add	fp, #20
30c04     A7 00 68 FC | 	wrlong	#0, fp
30c08     2C 4E 85 F1 | 	sub	fp, #44
30c0c                 | ' 
30c0c                 | ' 
30c0c                 | ' 
30c0c                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
30c0c                 | ' 	for (;;) {
30c0c                 | LR__4780
30c0c     30 4E 05 F1 | 	add	fp, #48
30c10     A7 12 02 F6 | 	mov	arg01, fp
30c14     30 4E 85 F1 | 	sub	fp, #48
30c18     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
30c1c     1C 4E 05 F1 | 	add	fp, #28
30c20     A7 FA 61 FC | 	wrlong	result1, fp
30c24     1C 4E 85 F1 | 	sub	fp, #28
30c28     FF FF 7F FF 
30c2c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
30c30     06 FA 05 A6 |  if_e	mov	result1, #6
30c34     74 08 90 AD |  if_e	jmp	#LR__4820
30c38     1C 4E 05 F1 | 	add	fp, #28
30c3c     A7 26 02 FB | 	rdlong	local01, fp
30c40     1C 4E 85 F1 | 	sub	fp, #28
30c44     80 00 00 FF 
30c48     00 26 16 F2 | 	cmp	local01, ##65536 wc
30c4c     3C 00 90 CD |  if_b	jmp	#LR__4781
30c50     18 4E 05 F1 | 	add	fp, #24
30c54     A7 2A 02 FB | 	rdlong	local03, fp
30c58     14 4E 05 F1 | 	add	fp, #20
30c5c     A7 26 02 FB | 	rdlong	local01, fp
30c60     13 2D 02 F6 | 	mov	local04, local01
30c64     01 2C 06 F1 | 	add	local04, #1
30c68     A7 2C 62 FC | 	wrlong	local04, fp
30c6c     01 26 66 F0 | 	shl	local01, #1
30c70     15 27 02 F1 | 	add	local01, local03
30c74     10 4E 85 F1 | 	sub	fp, #16
30c78     A7 2E 02 FB | 	rdlong	local05, fp
30c7c     1C 4E 85 F1 | 	sub	fp, #28
30c80     17 31 02 F6 | 	mov	local06, local05
30c84     10 30 46 F0 | 	shr	local06, #16
30c88     13 31 52 FC | 	wrword	local06, local01
30c8c                 | LR__4781
30c8c     1C 4E 05 F1 | 	add	fp, #28
30c90     A7 26 02 FB | 	rdlong	local01, fp
30c94     08 4E 85 F1 | 	sub	fp, #8
30c98     A7 26 52 FC | 	wrword	local01, fp
30c9c     A7 26 E2 FA | 	rdword	local01, fp
30ca0     14 4E 85 F1 | 	sub	fp, #20
30ca4     20 26 16 F2 | 	cmp	local01, #32 wc
30ca8     B0 00 90 CD |  if_b	jmp	#LR__4783
30cac     14 4E 05 F1 | 	add	fp, #20
30cb0     A7 26 E2 FA | 	rdword	local01, fp
30cb4     14 4E 85 F1 | 	sub	fp, #20
30cb8     2F 26 0E F2 | 	cmp	local01, #47 wz
30cbc     14 4E 05 51 |  if_ne	add	fp, #20
30cc0     A7 2C E2 5A |  if_ne	rdword	local04, fp
30cc4     14 4E 85 51 |  if_ne	sub	fp, #20
30cc8     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
30ccc     8C 00 90 AD |  if_e	jmp	#LR__4783
30cd0     14 4E 05 F1 | 	add	fp, #20
30cd4     A7 12 E2 FA | 	rdword	arg01, fp
30cd8     14 4E 85 F1 | 	sub	fp, #20
30cdc     80 12 16 F2 | 	cmp	arg01, #128 wc
30ce0     24 00 90 3D |  if_ae	jmp	#LR__4782
30ce4     B6 01 00 FF 
30ce8     1C 12 06 F6 | 	mov	arg01, ##@LR__5442
30cec     14 4E 05 F1 | 	add	fp, #20
30cf0     A7 14 E2 FA | 	rdword	arg02, fp
30cf4     14 4E 85 F1 | 	sub	fp, #20
30cf8     FC D0 BF FD | 	call	#_fatfs_cc_strchr
30cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
30d00     06 FA 05 56 |  if_ne	mov	result1, #6
30d04     A4 07 90 5D |  if_ne	jmp	#LR__4820
30d08                 | LR__4782
30d08     2C 4E 05 F1 | 	add	fp, #44
30d0c     A7 30 02 FB | 	rdlong	local06, fp
30d10     2C 4E 85 F1 | 	sub	fp, #44
30d14     FF 30 16 F2 | 	cmp	local06, #255 wc
30d18     06 FA 05 36 |  if_ae	mov	result1, #6
30d1c     8C 07 90 3D |  if_ae	jmp	#LR__4820
30d20     18 4E 05 F1 | 	add	fp, #24
30d24     A7 2A 02 FB | 	rdlong	local03, fp
30d28     14 4E 05 F1 | 	add	fp, #20
30d2c     A7 28 02 FB | 	rdlong	local02, fp
30d30     14 2D 02 F6 | 	mov	local04, local02
30d34     01 2C 06 F1 | 	add	local04, #1
30d38     A7 2C 62 FC | 	wrlong	local04, fp
30d3c     14 27 02 F6 | 	mov	local01, local02
30d40     01 26 66 F0 | 	shl	local01, #1
30d44     15 27 02 F1 | 	add	local01, local03
30d48     18 4E 85 F1 | 	sub	fp, #24
30d4c     A7 30 E2 FA | 	rdword	local06, fp
30d50     14 4E 85 F1 | 	sub	fp, #20
30d54     13 31 52 FC | 	wrword	local06, local01
30d58     B0 FE 9F FD | 	jmp	#LR__4780
30d5c                 | LR__4783
30d5c     14 4E 05 F1 | 	add	fp, #20
30d60     A7 32 E2 FA | 	rdword	local07, fp
30d64     14 4E 85 F1 | 	sub	fp, #20
30d68     20 32 16 F2 | 	cmp	local07, #32 wc
30d6c     10 4E 05 C1 |  if_b	add	fp, #16
30d70     A7 08 48 CC |  if_b	wrbyte	#4, fp
30d74     10 4E 85 C1 |  if_b	sub	fp, #16
30d78     74 00 90 CD |  if_b	jmp	#LR__4788
30d7c     97 24 48 FB | 	callpa	#(@LR__4786-@LR__4784)>>2,fcache_load_ptr_
30d80                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
30d80                 | LR__4784
30d80     30 4E 05 F1 | 	add	fp, #48
30d84     A7 2C 02 FB | 	rdlong	local04, fp
30d88     30 4E 85 F1 | 	sub	fp, #48
30d8c     16 33 C2 FA | 	rdbyte	local07, local04
30d90     2F 32 0E F2 | 	cmp	local07, #47 wz
30d94     18 00 90 AD |  if_e	jmp	#LR__4785
30d98     30 4E 05 F1 | 	add	fp, #48
30d9c     A7 2C 02 FB | 	rdlong	local04, fp
30da0     30 4E 85 F1 | 	sub	fp, #48
30da4     16 29 C2 FA | 	rdbyte	local02, local04
30da8     5C 28 0E F2 | 	cmp	local02, #92 wz
30dac     18 00 90 5D |  if_ne	jmp	#LR__4787
30db0                 | LR__4785
30db0     30 4E 05 F1 | 	add	fp, #48
30db4     A7 26 02 FB | 	rdlong	local01, fp
30db8     01 26 06 F1 | 	add	local01, #1
30dbc     A7 26 62 FC | 	wrlong	local01, fp
30dc0     30 4E 85 F1 | 	sub	fp, #48
30dc4     B8 FF 9F FD | 	jmp	#LR__4784
30dc8                 | LR__4786
30dc8                 | LR__4787
30dc8     10 4E 05 F1 | 	add	fp, #16
30dcc     A7 00 48 FC | 	wrbyte	#0, fp
30dd0     20 4E 05 F1 | 	add	fp, #32
30dd4     A7 30 02 FB | 	rdlong	local06, fp
30dd8     30 4E 85 F1 | 	sub	fp, #48
30ddc     18 33 C2 FA | 	rdbyte	local07, local06
30de0     20 32 16 F2 | 	cmp	local07, #32 wc
30de4     10 4E 05 C1 |  if_b	add	fp, #16
30de8     A7 08 48 CC |  if_b	wrbyte	#4, fp
30dec     10 4E 85 C1 |  if_b	sub	fp, #16
30df0                 | LR__4788
30df0     08 4E 05 F1 | 	add	fp, #8
30df4     A7 32 02 FB | 	rdlong	local07, fp
30df8     28 4E 05 F1 | 	add	fp, #40
30dfc     A7 26 02 FB | 	rdlong	local01, fp
30e00     30 4E 85 F1 | 	sub	fp, #48
30e04     19 27 62 FC | 	wrlong	local01, local07
30e08     97 38 48 FB | 	callpa	#(@LR__4790-@LR__4789)>>2,fcache_load_ptr_
30e0c                 | ' 	}
30e0c                 | ' 	*path = p;
30e0c                 | ' #line 2862 "ff.c"
30e0c                 | ' 	while (di) {
30e0c                 | LR__4789
30e0c     2C 4E 05 F1 | 	add	fp, #44
30e10     A7 32 0A FB | 	rdlong	local07, fp wz
30e14     2C 4E 85 F1 | 	sub	fp, #44
30e18     60 00 90 AD |  if_e	jmp	#LR__4791
30e1c     18 4E 05 F1 | 	add	fp, #24
30e20     A7 30 02 FB | 	rdlong	local06, fp
30e24     14 4E 05 F1 | 	add	fp, #20
30e28     A7 2C 02 FB | 	rdlong	local04, fp
30e2c     01 2C 86 F1 | 	sub	local04, #1
30e30     01 2C 66 F0 | 	shl	local04, #1
30e34     18 2D 02 F1 | 	add	local04, local06
30e38     16 31 E2 FA | 	rdword	local06, local04
30e3c     18 4E 85 F1 | 	sub	fp, #24
30e40     A7 30 52 FC | 	wrword	local06, fp
30e44     A7 32 E2 FA | 	rdword	local07, fp
30e48     14 4E 85 F1 | 	sub	fp, #20
30e4c     20 32 0E F2 | 	cmp	local07, #32 wz
30e50     14 4E 05 51 |  if_ne	add	fp, #20
30e54     A7 26 E2 5A |  if_ne	rdword	local01, fp
30e58     14 4E 85 51 |  if_ne	sub	fp, #20
30e5c     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
30e60     18 00 90 5D |  if_ne	jmp	#LR__4791
30e64     2C 4E 05 F1 | 	add	fp, #44
30e68     A7 26 02 FB | 	rdlong	local01, fp
30e6c     01 26 86 F1 | 	sub	local01, #1
30e70     A7 26 62 FC | 	wrlong	local01, fp
30e74     2C 4E 85 F1 | 	sub	fp, #44
30e78     90 FF 9F FD | 	jmp	#LR__4789
30e7c                 | LR__4790
30e7c                 | LR__4791
30e7c     18 4E 05 F1 | 	add	fp, #24
30e80     A7 34 02 FB | 	rdlong	local08, fp
30e84     14 4E 05 F1 | 	add	fp, #20
30e88     A7 2C 02 FB | 	rdlong	local04, fp
30e8c     01 2C 66 F0 | 	shl	local04, #1
30e90     1A 2D 02 F1 | 	add	local04, local08
30e94     16 01 58 FC | 	wrword	#0, local04
30e98     A7 32 0A FB | 	rdlong	local07, fp wz
30e9c     2C 4E 85 F1 | 	sub	fp, #44
30ea0     06 FA 05 A6 |  if_e	mov	result1, #6
30ea4     04 06 90 AD |  if_e	jmp	#LR__4820
30ea8                 | ' 
30ea8                 | ' 
30ea8                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
30ea8     28 4E 05 F1 | 	add	fp, #40
30eac     A7 00 68 FC | 	wrlong	#0, fp
30eb0     28 4E 85 F1 | 	sub	fp, #40
30eb4     97 22 48 FB | 	callpa	#(@LR__4793-@LR__4792)>>2,fcache_load_ptr_
30eb8                 | LR__4792
30eb8     18 4E 05 F1 | 	add	fp, #24
30ebc     A7 36 02 FB | 	rdlong	local09, fp
30ec0     10 4E 05 F1 | 	add	fp, #16
30ec4     A7 38 02 FB | 	rdlong	local10, fp
30ec8     28 4E 85 F1 | 	sub	fp, #40
30ecc     01 38 66 F0 | 	shl	local10, #1
30ed0     1B 39 02 F1 | 	add	local10, local09
30ed4     1C 3B E2 FA | 	rdword	local11, local10
30ed8     20 3A 0E F2 | 	cmp	local11, #32 wz
30edc     1C 00 90 5D |  if_ne	jmp	#LR__4794
30ee0     28 4E 05 F1 | 	add	fp, #40
30ee4     A7 3C 02 FB | 	rdlong	local12, fp
30ee8     1E 2F 02 F6 | 	mov	local05, local12
30eec     01 2E 06 F1 | 	add	local05, #1
30ef0     A7 2E 62 FC | 	wrlong	local05, fp
30ef4     28 4E 85 F1 | 	sub	fp, #40
30ef8     BC FF 9F FD | 	jmp	#LR__4792
30efc                 | LR__4793
30efc                 | LR__4794
30efc     28 4E 05 F1 | 	add	fp, #40
30f00     A7 32 02 FB | 	rdlong	local07, fp
30f04     28 4E 85 F1 | 	sub	fp, #40
30f08     01 32 16 F2 | 	cmp	local07, #1 wc
30f0c     28 00 90 3D |  if_ae	jmp	#LR__4795
30f10     18 4E 05 F1 | 	add	fp, #24
30f14     A7 2A 02 FB | 	rdlong	local03, fp
30f18     10 4E 05 F1 | 	add	fp, #16
30f1c     A7 36 02 FB | 	rdlong	local09, fp
30f20     28 4E 85 F1 | 	sub	fp, #40
30f24     01 36 66 F0 | 	shl	local09, #1
30f28     15 37 02 F1 | 	add	local09, local03
30f2c     1B 27 E2 FA | 	rdword	local01, local09
30f30     2E 26 0E F2 | 	cmp	local01, #46 wz
30f34     14 00 90 5D |  if_ne	jmp	#LR__4796
30f38                 | LR__4795
30f38     10 4E 05 F1 | 	add	fp, #16
30f3c     A7 32 C2 FA | 	rdbyte	local07, fp
30f40     03 32 46 F5 | 	or	local07, #3
30f44     A7 32 42 FC | 	wrbyte	local07, fp
30f48     10 4E 85 F1 | 	sub	fp, #16
30f4c                 | LR__4796
30f4c     97 2C 48 FB | 	callpa	#(@LR__4798-@LR__4797)>>2,fcache_load_ptr_
30f50                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
30f50                 | LR__4797
30f50     2C 4E 05 F1 | 	add	fp, #44
30f54     A7 32 02 FB | 	rdlong	local07, fp
30f58     2C 4E 85 F1 | 	sub	fp, #44
30f5c     01 32 16 F2 | 	cmp	local07, #1 wc
30f60     44 00 90 CD |  if_b	jmp	#LR__4799
30f64     18 4E 05 F1 | 	add	fp, #24
30f68     A7 30 02 FB | 	rdlong	local06, fp
30f6c     14 4E 05 F1 | 	add	fp, #20
30f70     A7 2A 02 FB | 	rdlong	local03, fp
30f74     2C 4E 85 F1 | 	sub	fp, #44
30f78     01 2A 86 F1 | 	sub	local03, #1
30f7c     01 2A 66 F0 | 	shl	local03, #1
30f80     18 2B 02 F1 | 	add	local03, local06
30f84     15 27 E2 FA | 	rdword	local01, local03
30f88     2E 26 0E F2 | 	cmp	local01, #46 wz
30f8c     18 00 90 AD |  if_e	jmp	#LR__4799
30f90     2C 4E 05 F1 | 	add	fp, #44
30f94     A7 26 02 FB | 	rdlong	local01, fp
30f98     01 26 86 F1 | 	sub	local01, #1
30f9c     A7 26 62 FC | 	wrlong	local01, fp
30fa0     2C 4E 85 F1 | 	sub	fp, #44
30fa4     A8 FF 9F FD | 	jmp	#LR__4797
30fa8                 | LR__4798
30fa8                 | LR__4799
30fa8     04 4E 05 F1 | 	add	fp, #4
30fac     A7 12 02 FB | 	rdlong	arg01, fp
30fb0     04 4E 85 F1 | 	sub	fp, #4
30fb4     20 12 06 F1 | 	add	arg01, #32
30fb8     20 14 06 F6 | 	mov	arg02, #32
30fbc     0B 16 06 F6 | 	mov	arg03, #11
30fc0     09 3F 02 F6 | 	mov	local13, arg01
30fc4     98 00 A0 FD | 	call	#\builtin_bytefill_
30fc8     1F FB 01 F6 | 	mov	result1, local13
30fcc     0C 4E 05 F1 | 	add	fp, #12
30fd0     A7 00 48 FC | 	wrbyte	#0, fp
30fd4     A7 32 C2 FA | 	rdbyte	local07, fp
30fd8     14 4E 05 F1 | 	add	fp, #20
30fdc     A7 32 62 FC | 	wrlong	local07, fp
30fe0     04 4E 05 F1 | 	add	fp, #4
30fe4     A7 10 68 FC | 	wrlong	#8, fp
30fe8     24 4E 85 F1 | 	sub	fp, #36
30fec                 | ' 
30fec                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
30fec                 | ' 	i = b = 0; ni = 8;
30fec                 | ' 	for (;;) {
30fec                 | LR__4800
30fec     18 4E 05 F1 | 	add	fp, #24
30ff0     A7 2A 02 FB | 	rdlong	local03, fp
30ff4     10 4E 05 F1 | 	add	fp, #16
30ff8     A7 36 02 FB | 	rdlong	local09, fp
30ffc     1B 2D 02 F6 | 	mov	local04, local09
31000     01 2C 06 F1 | 	add	local04, #1
31004     A7 2C 62 FC | 	wrlong	local04, fp
31008     01 36 66 F0 | 	shl	local09, #1
3100c     15 37 02 F1 | 	add	local09, local03
31010     1B 31 E2 FA | 	rdword	local06, local09
31014     14 4E 85 F1 | 	sub	fp, #20
31018     A7 30 52 FC | 	wrword	local06, fp
3101c     A7 32 EA FA | 	rdword	local07, fp wz
31020     14 4E 85 F1 | 	sub	fp, #20
31024     74 03 90 AD |  if_e	jmp	#LR__4816
31028     14 4E 05 F1 | 	add	fp, #20
3102c     A7 32 E2 FA | 	rdword	local07, fp
31030     14 4E 85 F1 | 	sub	fp, #20
31034     20 32 0E F2 | 	cmp	local07, #32 wz
31038     30 00 90 AD |  if_e	jmp	#LR__4801
3103c     14 4E 05 F1 | 	add	fp, #20
31040     A7 26 E2 FA | 	rdword	local01, fp
31044     14 4E 85 F1 | 	sub	fp, #20
31048     2E 26 0E F2 | 	cmp	local01, #46 wz
3104c     34 00 90 5D |  if_ne	jmp	#LR__4802
31050     28 4E 05 F1 | 	add	fp, #40
31054     A7 2C 02 FB | 	rdlong	local04, fp
31058     04 4E 05 F1 | 	add	fp, #4
3105c     A7 38 02 FB | 	rdlong	local10, fp
31060     2C 4E 85 F1 | 	sub	fp, #44
31064     1C 2D 0A F2 | 	cmp	local04, local10 wz
31068     18 00 90 AD |  if_e	jmp	#LR__4802
3106c                 | LR__4801
3106c     10 4E 05 F1 | 	add	fp, #16
31070     A7 32 C2 FA | 	rdbyte	local07, fp
31074     03 32 46 F5 | 	or	local07, #3
31078     A7 32 42 FC | 	wrbyte	local07, fp
3107c     10 4E 85 F1 | 	sub	fp, #16
31080                 | ' 			cf |=  0x01  |  0x02 ;
31080                 | ' 			continue;
31080     68 FF 9F FD | 	jmp	#LR__4800
31084                 | LR__4802
31084     20 4E 05 F1 | 	add	fp, #32
31088     A7 32 02 FB | 	rdlong	local07, fp
3108c     04 4E 05 F1 | 	add	fp, #4
31090     A7 26 02 FB | 	rdlong	local01, fp
31094     24 4E 85 F1 | 	sub	fp, #36
31098     13 33 12 F2 | 	cmp	local07, local01 wc
3109c     1C 00 90 3D |  if_ae	jmp	#LR__4803
310a0     28 4E 05 F1 | 	add	fp, #40
310a4     A7 34 02 FB | 	rdlong	local08, fp
310a8     04 4E 05 F1 | 	add	fp, #4
310ac     A7 38 02 FB | 	rdlong	local10, fp
310b0     2C 4E 85 F1 | 	sub	fp, #44
310b4     1C 35 0A F2 | 	cmp	local08, local10 wz
310b8     B0 00 90 5D |  if_ne	jmp	#LR__4805
310bc                 | LR__4803
310bc     24 4E 05 F1 | 	add	fp, #36
310c0     A7 32 02 FB | 	rdlong	local07, fp
310c4     24 4E 85 F1 | 	sub	fp, #36
310c8     0B 32 0E F2 | 	cmp	local07, #11 wz
310cc     18 00 90 5D |  if_ne	jmp	#LR__4804
310d0     10 4E 05 F1 | 	add	fp, #16
310d4     A7 32 C2 FA | 	rdbyte	local07, fp
310d8     03 32 46 F5 | 	or	local07, #3
310dc     A7 32 42 FC | 	wrbyte	local07, fp
310e0     10 4E 85 F1 | 	sub	fp, #16
310e4                 | ' 				cf |=  0x01  |  0x02 ;
310e4                 | ' 				break;
310e4     B4 02 90 FD | 	jmp	#LR__4816
310e8                 | LR__4804
310e8     28 4E 05 F1 | 	add	fp, #40
310ec     A7 32 02 FB | 	rdlong	local07, fp
310f0     04 4E 05 F1 | 	add	fp, #4
310f4     A7 26 02 FB | 	rdlong	local01, fp
310f8     2C 4E 85 F1 | 	sub	fp, #44
310fc     13 33 0A F2 | 	cmp	local07, local01 wz
31100     10 4E 05 51 |  if_ne	add	fp, #16
31104     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
31108     03 32 46 55 |  if_ne	or	local07, #3
3110c     A7 32 42 5C |  if_ne	wrbyte	local07, fp
31110     10 4E 85 51 |  if_ne	sub	fp, #16
31114     28 4E 05 F1 | 	add	fp, #40
31118     A7 32 02 FB | 	rdlong	local07, fp
3111c     04 4E 05 F1 | 	add	fp, #4
31120     A7 28 02 FB | 	rdlong	local02, fp
31124     2C 4E 85 F1 | 	sub	fp, #44
31128     14 33 1A F2 | 	cmp	local07, local02 wcz
3112c     6C 02 90 1D |  if_a	jmp	#LR__4816
31130     2C 4E 05 F1 | 	add	fp, #44
31134     A7 32 02 FB | 	rdlong	local07, fp
31138     04 4E 85 F1 | 	sub	fp, #4
3113c     A7 32 62 FC | 	wrlong	local07, fp
31140     08 4E 85 F1 | 	sub	fp, #8
31144     A7 10 68 FC | 	wrlong	#8, fp
31148     04 4E 05 F1 | 	add	fp, #4
3114c     A7 16 68 FC | 	wrlong	#11, fp
31150     18 4E 85 F1 | 	sub	fp, #24
31154     A7 3A C2 FA | 	rdbyte	local11, fp
31158     1D 33 E2 F8 | 	getbyte	local07, local11, #0
3115c     02 32 66 F0 | 	shl	local07, #2
31160     A7 32 42 FC | 	wrbyte	local07, fp
31164     0C 4E 85 F1 | 	sub	fp, #12
31168                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
31168                 | ' 			continue;
31168     80 FE 9F FD | 	jmp	#LR__4800
3116c                 | LR__4805
3116c     14 4E 05 F1 | 	add	fp, #20
31170     A7 32 E2 FA | 	rdword	local07, fp
31174     14 4E 85 F1 | 	sub	fp, #20
31178     80 32 16 F2 | 	cmp	local07, #128 wc
3117c     6C 00 90 CD |  if_b	jmp	#LR__4807
31180     10 4E 05 F1 | 	add	fp, #16
31184     A7 32 C2 FA | 	rdbyte	local07, fp
31188     02 32 46 F5 | 	or	local07, #2
3118c     A7 32 42 FC | 	wrbyte	local07, fp
31190     04 4E 05 F1 | 	add	fp, #4
31194     A7 12 E2 FA | 	rdword	arg01, fp
31198     14 4E 85 F1 | 	sub	fp, #20
3119c     01 00 00 FF 
311a0     52 15 06 F6 | 	mov	arg02, ##850
311a4     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
311a8     14 4E 05 F1 | 	add	fp, #20
311ac     A7 FA 51 FC | 	wrword	result1, fp
311b0     A7 32 E2 FA | 	rdword	local07, fp
311b4     14 4E 85 F1 | 	sub	fp, #20
311b8     80 32 CE F7 | 	test	local07, #128 wz
311bc     2C 00 90 AD |  if_e	jmp	#LR__4806
311c0     14 4E 05 F1 | 	add	fp, #20
311c4     A7 28 E2 FA | 	rdword	local02, fp
311c8     7F 28 06 F5 | 	and	local02, #127
311cc     01 00 00 FF 
311d0     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
311d4     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
311d8     14 33 C2 FA | 	rdbyte	local07, local02
311dc     A7 32 52 FC | 	wrword	local07, fp
311e0     14 4E 85 F1 | 	sub	fp, #20
311e4     01 00 00 FF 
311e8     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
311ec                 | LR__4806
311ec                 | LR__4807
311ec     14 4E 05 F1 | 	add	fp, #20
311f0     A7 32 E2 FA | 	rdword	local07, fp
311f4     14 4E 85 F1 | 	sub	fp, #20
311f8     00 33 16 F2 | 	cmp	local07, #256 wc
311fc     88 00 90 CD |  if_b	jmp	#LR__4809
31200     24 4E 05 F1 | 	add	fp, #36
31204     A7 32 02 FB | 	rdlong	local07, fp
31208     01 32 86 F1 | 	sub	local07, #1
3120c     04 4E 85 F1 | 	sub	fp, #4
31210     A7 28 02 FB | 	rdlong	local02, fp
31214     20 4E 85 F1 | 	sub	fp, #32
31218     19 29 12 F2 | 	cmp	local02, local07 wc
3121c     2C 00 90 CD |  if_b	jmp	#LR__4808
31220     10 4E 05 F1 | 	add	fp, #16
31224     A7 3A C2 FA | 	rdbyte	local11, fp
31228     1D 33 E2 F8 | 	getbyte	local07, local11, #0
3122c     03 32 46 F5 | 	or	local07, #3
31230     A7 32 42 FC | 	wrbyte	local07, fp
31234     14 4E 05 F1 | 	add	fp, #20
31238     A7 32 02 FB | 	rdlong	local07, fp
3123c     04 4E 85 F1 | 	sub	fp, #4
31240     A7 32 62 FC | 	wrlong	local07, fp
31244     20 4E 85 F1 | 	sub	fp, #32
31248                 | ' 				cf |=  0x01  |  0x02 ;
31248                 | ' 				i = ni; continue;
31248     A0 FD 9F FD | 	jmp	#LR__4800
3124c                 | LR__4808
3124c     04 4E 05 F1 | 	add	fp, #4
31250     A7 36 02 FB | 	rdlong	local09, fp
31254     1C 4E 05 F1 | 	add	fp, #28
31258     A7 38 02 FB | 	rdlong	local10, fp
3125c     1C 2D 02 F6 | 	mov	local04, local10
31260     01 2C 06 F1 | 	add	local04, #1
31264     A7 2C 62 FC | 	wrlong	local04, fp
31268     20 36 06 F1 | 	add	local09, #32
3126c     1B 39 02 F1 | 	add	local10, local09
31270     0C 4E 85 F1 | 	sub	fp, #12
31274     A7 2A E2 FA | 	rdword	local03, fp
31278     14 4E 85 F1 | 	sub	fp, #20
3127c     08 2A 46 F0 | 	shr	local03, #8
31280     1C 2B 42 FC | 	wrbyte	local03, local10
31284     D4 00 90 FD | 	jmp	#LR__4815
31288                 | LR__4809
31288     14 4E 05 F1 | 	add	fp, #20
3128c     A7 32 EA FA | 	rdword	local07, fp wz
31290     14 4E 85 F1 | 	sub	fp, #20
31294     20 00 90 AD |  if_e	jmp	#LR__4810
31298     B6 01 00 FF 
3129c     25 12 06 F6 | 	mov	arg01, ##@LR__5443
312a0     14 4E 05 F1 | 	add	fp, #20
312a4     A7 14 E2 FA | 	rdword	arg02, fp
312a8     14 4E 85 F1 | 	sub	fp, #20
312ac     48 CB BF FD | 	call	#_fatfs_cc_strchr
312b0     00 FA 0D F2 | 	cmp	result1, #0 wz
312b4     20 00 90 AD |  if_e	jmp	#LR__4811
312b8                 | LR__4810
312b8     14 4E 05 F1 | 	add	fp, #20
312bc     A7 BE 58 FC | 	wrword	#95, fp
312c0     04 4E 85 F1 | 	sub	fp, #4
312c4     A7 32 C2 FA | 	rdbyte	local07, fp
312c8     03 32 46 F5 | 	or	local07, #3
312cc     A7 32 42 FC | 	wrbyte	local07, fp
312d0     10 4E 85 F1 | 	sub	fp, #16
312d4     84 00 90 FD | 	jmp	#LR__4814
312d8                 | LR__4811
312d8     14 4E 05 F1 | 	add	fp, #20
312dc     A7 32 E2 FA | 	rdword	local07, fp
312e0     14 4E 85 F1 | 	sub	fp, #20
312e4     41 32 16 F2 | 	cmp	local07, #65 wc
312e8     24 00 90 CD |  if_b	jmp	#LR__4812
312ec     14 4E 05 F1 | 	add	fp, #20
312f0     A7 26 E2 FA | 	rdword	local01, fp
312f4     14 4E 85 F1 | 	sub	fp, #20
312f8     5B 26 16 F2 | 	cmp	local01, #91 wc
312fc     0C 4E 05 C1 |  if_b	add	fp, #12
31300     A7 32 C2 CA |  if_b	rdbyte	local07, fp
31304     02 32 46 C5 |  if_b	or	local07, #2
31308     A7 32 42 CC |  if_b	wrbyte	local07, fp
3130c     0C 4E 85 C1 |  if_b	sub	fp, #12
31310                 | LR__4812
31310     14 4E 05 F1 | 	add	fp, #20
31314     A7 32 E2 FA | 	rdword	local07, fp
31318     14 4E 85 F1 | 	sub	fp, #20
3131c     61 32 16 F2 | 	cmp	local07, #97 wc
31320     38 00 90 CD |  if_b	jmp	#LR__4813
31324     14 4E 05 F1 | 	add	fp, #20
31328     A7 26 E2 FA | 	rdword	local01, fp
3132c     14 4E 85 F1 | 	sub	fp, #20
31330     7B 26 16 F2 | 	cmp	local01, #123 wc
31334     24 00 90 3D |  if_ae	jmp	#LR__4813
31338     0C 4E 05 F1 | 	add	fp, #12
3133c     A7 32 C2 FA | 	rdbyte	local07, fp
31340     01 32 46 F5 | 	or	local07, #1
31344     A7 32 42 FC | 	wrbyte	local07, fp
31348     08 4E 05 F1 | 	add	fp, #8
3134c     A7 32 E2 FA | 	rdword	local07, fp
31350     20 32 86 F1 | 	sub	local07, #32
31354     A7 32 52 FC | 	wrword	local07, fp
31358     14 4E 85 F1 | 	sub	fp, #20
3135c                 | LR__4813
3135c                 | LR__4814
3135c                 | LR__4815
3135c     04 4E 05 F1 | 	add	fp, #4
31360     A7 3A 02 FB | 	rdlong	local11, fp
31364     1D 37 02 F6 | 	mov	local09, local11
31368     1C 4E 05 F1 | 	add	fp, #28
3136c     A7 28 02 FB | 	rdlong	local02, fp
31370     14 2D 02 F6 | 	mov	local04, local02
31374     01 2C 06 F1 | 	add	local04, #1
31378     A7 2C 62 FC | 	wrlong	local04, fp
3137c     14 39 02 F6 | 	mov	local10, local02
31380     20 36 06 F1 | 	add	local09, #32
31384     1B 39 02 F1 | 	add	local10, local09
31388     0C 4E 85 F1 | 	sub	fp, #12
3138c     A7 2A E2 FA | 	rdword	local03, fp
31390     14 4E 85 F1 | 	sub	fp, #20
31394     1C 2B 42 FC | 	wrbyte	local03, local10
31398     50 FC 9F FD | 	jmp	#LR__4800
3139c                 | LR__4816
3139c     04 4E 05 F1 | 	add	fp, #4
313a0     A7 3A 02 FB | 	rdlong	local11, fp
313a4     04 4E 85 F1 | 	sub	fp, #4
313a8     20 3A 06 F1 | 	add	local11, #32
313ac     1D 33 C2 FA | 	rdbyte	local07, local11
313b0     E5 32 0E F2 | 	cmp	local07, #229 wz
313b4     04 4E 05 A1 |  if_e	add	fp, #4
313b8     A7 32 02 AB |  if_e	rdlong	local07, fp
313bc     04 4E 85 A1 |  if_e	sub	fp, #4
313c0     20 32 06 A1 |  if_e	add	local07, #32
313c4     19 0B 48 AC |  if_e	wrbyte	#5, local07
313c8     24 4E 05 F1 | 	add	fp, #36
313cc     A7 32 02 FB | 	rdlong	local07, fp
313d0     24 4E 85 F1 | 	sub	fp, #36
313d4     08 32 0E F2 | 	cmp	local07, #8 wz
313d8     0C 4E 05 A1 |  if_e	add	fp, #12
313dc     A7 32 C2 AA |  if_e	rdbyte	local07, fp
313e0     02 32 66 A0 |  if_e	shl	local07, #2
313e4     A7 32 42 AC |  if_e	wrbyte	local07, fp
313e8     0C 4E 85 A1 |  if_e	sub	fp, #12
313ec     0C 4E 05 F1 | 	add	fp, #12
313f0     A7 32 C2 FA | 	rdbyte	local07, fp
313f4     0C 4E 85 F1 | 	sub	fp, #12
313f8     0C 32 06 F5 | 	and	local07, #12
313fc     0C 32 0E F2 | 	cmp	local07, #12 wz
31400     18 00 90 AD |  if_e	jmp	#LR__4817
31404     0C 4E 05 F1 | 	add	fp, #12
31408     A7 26 C2 FA | 	rdbyte	local01, fp
3140c     0C 4E 85 F1 | 	sub	fp, #12
31410     03 26 06 F5 | 	and	local01, #3
31414     03 26 0E F2 | 	cmp	local01, #3 wz
31418     14 00 90 5D |  if_ne	jmp	#LR__4818
3141c                 | LR__4817
3141c     10 4E 05 F1 | 	add	fp, #16
31420     A7 32 C2 FA | 	rdbyte	local07, fp
31424     02 32 46 F5 | 	or	local07, #2
31428     A7 32 42 FC | 	wrbyte	local07, fp
3142c     10 4E 85 F1 | 	sub	fp, #16
31430                 | LR__4818
31430     10 4E 05 F1 | 	add	fp, #16
31434     A7 32 C2 FA | 	rdbyte	local07, fp
31438     10 4E 85 F1 | 	sub	fp, #16
3143c     02 32 CE F7 | 	test	local07, #2 wz
31440     48 00 90 5D |  if_ne	jmp	#LR__4819
31444     0C 4E 05 F1 | 	add	fp, #12
31448     A7 32 C2 FA | 	rdbyte	local07, fp
3144c     0C 4E 85 F1 | 	sub	fp, #12
31450     01 32 CE F7 | 	test	local07, #1 wz
31454     10 4E 05 51 |  if_ne	add	fp, #16
31458     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
3145c     10 32 46 55 |  if_ne	or	local07, #16
31460     A7 32 42 5C |  if_ne	wrbyte	local07, fp
31464     10 4E 85 51 |  if_ne	sub	fp, #16
31468     0C 4E 05 F1 | 	add	fp, #12
3146c     A7 32 C2 FA | 	rdbyte	local07, fp
31470     0C 4E 85 F1 | 	sub	fp, #12
31474     04 32 CE F7 | 	test	local07, #4 wz
31478     10 4E 05 51 |  if_ne	add	fp, #16
3147c     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
31480     08 32 46 55 |  if_ne	or	local07, #8
31484     A7 32 42 5C |  if_ne	wrbyte	local07, fp
31488     10 4E 85 51 |  if_ne	sub	fp, #16
3148c                 | LR__4819
3148c     04 4E 05 F1 | 	add	fp, #4
31490     A7 32 02 FB | 	rdlong	local07, fp
31494     0C 4E 05 F1 | 	add	fp, #12
31498     A7 26 C2 FA | 	rdbyte	local01, fp
3149c     10 4E 85 F1 | 	sub	fp, #16
314a0     2B 32 06 F1 | 	add	local07, #43
314a4     19 27 42 FC | 	wrbyte	local01, local07
314a8                 | ' 	}
314a8                 | ' 
314a8                 | ' 	dp->fn[ 11 ] = cf;
314a8                 | ' 
314a8                 | ' 	return FR_OK;
314a8     00 FA 05 F6 | 	mov	result1, #0
314ac                 | LR__4820
314ac     A7 F0 03 F6 | 	mov	ptra, fp
314b0     B2 00 A0 FD | 	call	#popregs_
314b4                 | _fatfs_cc_create_name_ret
314b4     2D 00 64 FD | 	ret
314b8                 | 
314b8                 | _fatfs_cc_follow_path
314b8     02 4A 05 F6 | 	mov	COUNT_, #2
314bc     A8 00 A0 FD | 	call	#pushregs_
314c0     18 F0 07 F1 | 	add	ptra, #24
314c4     04 4E 05 F1 | 	add	fp, #4
314c8     A7 12 62 FC | 	wrlong	arg01, fp
314cc     04 4E 05 F1 | 	add	fp, #4
314d0     A7 14 62 FC | 	wrlong	arg02, fp
314d4     04 4E 85 F1 | 	sub	fp, #4
314d8     A7 FA 01 FB | 	rdlong	result1, fp
314dc     FD 26 02 FB | 	rdlong	local01, result1
314e0     10 4E 05 F1 | 	add	fp, #16
314e4     A7 26 62 FC | 	wrlong	local01, fp
314e8     14 4E 85 F1 | 	sub	fp, #20
314ec     97 24 48 FB | 	callpa	#(@LR__4832-@LR__4830)>>2,fcache_load_ptr_
314f0                 | ' )
314f0                 | ' {
314f0                 | ' 	FRESULT res;
314f0                 | ' 	BYTE ns;
314f0                 | ' 	FATFS *fs = dp->obj.fs;
314f0                 | ' #line 3034 "ff.c"
314f0                 | ' 	{
314f0                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
314f0                 | LR__4830
314f0     08 4E 05 F1 | 	add	fp, #8
314f4     A7 26 02 FB | 	rdlong	local01, fp
314f8     08 4E 85 F1 | 	sub	fp, #8
314fc     13 27 C2 FA | 	rdbyte	local01, local01
31500     2F 26 0E F2 | 	cmp	local01, #47 wz
31504     18 00 90 AD |  if_e	jmp	#LR__4831
31508     08 4E 05 F1 | 	add	fp, #8
3150c     A7 26 02 FB | 	rdlong	local01, fp
31510     08 4E 85 F1 | 	sub	fp, #8
31514     13 27 C2 FA | 	rdbyte	local01, local01
31518     5C 26 0E F2 | 	cmp	local01, #92 wz
3151c     18 00 90 5D |  if_ne	jmp	#LR__4833
31520                 | LR__4831
31520     08 4E 05 F1 | 	add	fp, #8
31524     A7 26 02 FB | 	rdlong	local01, fp
31528     01 26 06 F1 | 	add	local01, #1
3152c     A7 26 62 FC | 	wrlong	local01, fp
31530     08 4E 85 F1 | 	sub	fp, #8
31534     B8 FF 9F FD | 	jmp	#LR__4830
31538                 | LR__4832
31538                 | LR__4833
31538     04 4E 05 F1 | 	add	fp, #4
3153c     A7 26 02 FB | 	rdlong	local01, fp
31540     08 26 06 F1 | 	add	local01, #8
31544     13 01 68 FC | 	wrlong	#0, local01
31548     04 4E 05 F1 | 	add	fp, #4
3154c     A7 26 02 FB | 	rdlong	local01, fp
31550     08 4E 85 F1 | 	sub	fp, #8
31554     13 27 C2 FA | 	rdbyte	local01, local01
31558     20 26 16 F2 | 	cmp	local01, #32 wc
3155c     30 00 90 3D |  if_ae	jmp	#LR__4834
31560     04 4E 05 F1 | 	add	fp, #4
31564     A7 26 02 FB | 	rdlong	local01, fp
31568     2B 26 06 F1 | 	add	local01, #43
3156c     13 01 49 FC | 	wrbyte	#128, local01
31570     A7 12 02 FB | 	rdlong	arg01, fp
31574     04 4E 85 F1 | 	sub	fp, #4
31578     00 14 06 F6 | 	mov	arg02, #0
3157c     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
31580     0C 4E 05 F1 | 	add	fp, #12
31584     A7 FA 61 FC | 	wrlong	result1, fp
31588     0C 4E 85 F1 | 	sub	fp, #12
3158c     1C 01 90 FD | 	jmp	#LR__4838
31590                 | LR__4834
31590                 | ' 		for (;;) {
31590                 | LR__4835
31590     04 4E 05 F1 | 	add	fp, #4
31594     A7 12 02 FB | 	rdlong	arg01, fp
31598     04 4E 05 F1 | 	add	fp, #4
3159c     A7 14 02 F6 | 	mov	arg02, fp
315a0     08 4E 85 F1 | 	sub	fp, #8
315a4     14 F6 BF FD | 	call	#_fatfs_cc_create_name
315a8     0C 4E 05 F1 | 	add	fp, #12
315ac     A7 FA 61 FC | 	wrlong	result1, fp
315b0     00 FA 4D F2 | 	cmps	result1, #0 wz
315b4     0C 4E 85 F1 | 	sub	fp, #12
315b8     F0 00 90 5D |  if_ne	jmp	#LR__4837
315bc     04 4E 05 F1 | 	add	fp, #4
315c0     A7 12 02 FB | 	rdlong	arg01, fp
315c4     04 4E 85 F1 | 	sub	fp, #4
315c8     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
315cc     0C 4E 05 F1 | 	add	fp, #12
315d0     A7 FA 61 FC | 	wrlong	result1, fp
315d4     08 4E 85 F1 | 	sub	fp, #8
315d8     A7 26 02 FB | 	rdlong	local01, fp
315dc     2B 26 06 F1 | 	add	local01, #43
315e0     13 27 C2 FA | 	rdbyte	local01, local01
315e4     0C 4E 05 F1 | 	add	fp, #12
315e8     A7 26 42 FC | 	wrbyte	local01, fp
315ec     04 4E 85 F1 | 	sub	fp, #4
315f0     A7 26 0A FB | 	rdlong	local01, fp wz
315f4     0C 4E 85 F1 | 	sub	fp, #12
315f8     34 00 90 AD |  if_e	jmp	#LR__4836
315fc     0C 4E 05 F1 | 	add	fp, #12
31600     A7 26 02 FB | 	rdlong	local01, fp
31604     0C 4E 85 F1 | 	sub	fp, #12
31608     04 26 0E F2 | 	cmp	local01, #4 wz
3160c     9C 00 90 5D |  if_ne	jmp	#LR__4837
31610     10 4E 05 F1 | 	add	fp, #16
31614     A7 26 C2 FA | 	rdbyte	local01, fp
31618     10 4E 85 F1 | 	sub	fp, #16
3161c     04 26 CE F7 | 	test	local01, #4 wz
31620     0C 4E 05 A1 |  if_e	add	fp, #12
31624     A7 0A 68 AC |  if_e	wrlong	#5, fp
31628     0C 4E 85 A1 |  if_e	sub	fp, #12
3162c                 | ' 					}
3162c                 | ' 				}
3162c                 | ' 				break;
3162c     7C 00 90 FD | 	jmp	#LR__4837
31630                 | LR__4836
31630     10 4E 05 F1 | 	add	fp, #16
31634     A7 26 C2 FA | 	rdbyte	local01, fp
31638     10 4E 85 F1 | 	sub	fp, #16
3163c     04 26 CE F7 | 	test	local01, #4 wz
31640     68 00 90 5D |  if_ne	jmp	#LR__4837
31644     04 4E 05 F1 | 	add	fp, #4
31648     A7 26 02 FB | 	rdlong	local01, fp
3164c     04 4E 85 F1 | 	sub	fp, #4
31650     06 26 06 F1 | 	add	local01, #6
31654     13 27 C2 FA | 	rdbyte	local01, local01
31658     10 26 CE F7 | 	test	local01, #16 wz
3165c     0C 4E 05 A1 |  if_e	add	fp, #12
31660     A7 0A 68 AC |  if_e	wrlong	#5, fp
31664     0C 4E 85 A1 |  if_e	sub	fp, #12
31668                 | ' 				res = FR_NO_PATH; break;
31668     40 00 90 AD |  if_e	jmp	#LR__4837
3166c     04 4E 05 F1 | 	add	fp, #4
31670     A7 28 02 FB | 	rdlong	local02, fp
31674     14 27 02 F6 | 	mov	local01, local02
31678     10 4E 05 F1 | 	add	fp, #16
3167c     A7 14 02 FB | 	rdlong	arg02, fp
31680     0A 13 02 F6 | 	mov	arg01, arg02
31684     34 14 06 F1 | 	add	arg02, #52
31688     14 4E 85 F1 | 	sub	fp, #20
3168c     10 28 06 F1 | 	add	local02, #16
31690     14 29 02 FB | 	rdlong	local02, local02
31694     FF 29 06 F5 | 	and	local02, #511
31698     14 15 02 F1 | 	add	arg02, local02
3169c     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
316a0     08 26 06 F1 | 	add	local01, #8
316a4     13 FB 61 FC | 	wrlong	result1, local01
316a8     E4 FE 9F FD | 	jmp	#LR__4835
316ac                 | LR__4837
316ac                 | LR__4838
316ac                 | ' 			}
316ac                 | ' #line 3090 "ff.c"
316ac                 | ' 			{
316ac                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
316ac                 | ' 			}
316ac                 | ' 		}
316ac                 | ' 	}
316ac                 | ' 
316ac                 | ' 	return res;
316ac     0C 4E 05 F1 | 	add	fp, #12
316b0     A7 FA 01 FB | 	rdlong	result1, fp
316b4     0C 4E 85 F1 | 	sub	fp, #12
316b8     A7 F0 03 F6 | 	mov	ptra, fp
316bc     B2 00 A0 FD | 	call	#popregs_
316c0                 | _fatfs_cc_follow_path_ret
316c0     2D 00 64 FD | 	ret
316c4                 | 
316c4                 | _fatfs_cc_get_ldnumber
316c4     01 00 66 F6 | 	neg	_var01, #1
316c8     09 03 0A FB | 	rdlong	_var02, arg01 wz
316cc     01 05 02 F6 | 	mov	_var03, _var02
316d0     01 FA 65 A6 |  if_e	neg	result1, #1
316d4     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
316d8     97 10 48 FB | 	callpa	#(@LR__4841-@LR__4840)>>2,fcache_load_ptr_
316dc                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
316dc                 | LR__4840
316dc     02 07 C2 FA | 	rdbyte	_var04, _var03
316e0     03 FB E1 F8 | 	getbyte	result1, _var04, #0
316e4     20 FA 15 F2 | 	cmp	result1, #32 wc
316e8     01 04 06 F1 | 	add	_var03, #1
316ec     03 09 02 36 |  if_ae	mov	_var05, _var04
316f0     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
316f4     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
316f8     E0 FF 9F 1D |  if_a	jmp	#LR__4840
316fc                 | LR__4841
316fc     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
31700     3A 06 0E F2 | 	cmp	_var04, #58 wz
31704     40 00 90 5D |  if_ne	jmp	#LR__4843
31708     01 0A 06 F6 | 	mov	_var06, #1
3170c     01 09 C2 FA | 	rdbyte	_var05, _var02
31710     30 08 16 F2 | 	cmp	_var05, #48 wc
31714     1C 00 90 CD |  if_b	jmp	#LR__4842
31718     01 09 C2 FA | 	rdbyte	_var05, _var02
3171c     3A 08 16 F2 | 	cmp	_var05, #58 wc
31720     01 0D 02 C6 |  if_b	mov	_var07, _var02
31724     02 0C 06 C1 |  if_b	add	_var07, #2
31728     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
3172c     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
31730     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
31734                 | LR__4842
31734     01 0A 56 F2 | 	cmps	_var06, #1 wc
31738     05 01 02 C6 |  if_b	mov	_var01, _var06
3173c     09 05 62 CC |  if_b	wrlong	_var03, arg01
31740                 | ' 			vol = i;
31740                 | ' 			*path = tt;
31740                 | ' 		}
31740                 | ' 		return vol;
31740     00 FB 01 F6 | 	mov	result1, _var01
31744     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
31748                 | LR__4843
31748                 | ' 	}
31748                 | ' #line 3170 "ff.c"
31748                 | ' 	vol = 0;
31748                 | ' 
31748                 | ' 	return vol;
31748     00 FA 05 F6 | 	mov	result1, #0
3174c                 | _fatfs_cc_get_ldnumber_ret
3174c     2D 00 64 FD | 	ret
31750                 | 
31750                 | _fatfs_cc_check_fs
31750     04 4A 05 F6 | 	mov	COUNT_, #4
31754     A8 00 A0 FD | 	call	#pushregs_
31758     09 27 02 F6 | 	mov	local01, arg01
3175c     03 26 06 F1 | 	add	local01, #3
31760     13 01 48 FC | 	wrbyte	#0, local01
31764     2D 26 06 F1 | 	add	local01, #45
31768     FF FF FF FF 
3176c     13 FF 6B FC | 	wrlong	##-1, local01
31770     30 26 86 F1 | 	sub	local01, #48
31774     13 13 02 F6 | 	mov	arg01, local01
31778     18 D5 BF FD | 	call	#_fatfs_cc_move_window
3177c     00 FA 0D F2 | 	cmp	result1, #0 wz
31780     04 FA 05 56 |  if_ne	mov	result1, #4
31784     94 01 90 5D |  if_ne	jmp	#LR__4854
31788     34 26 06 F1 | 	add	local01, #52
3178c     13 13 02 F6 | 	mov	arg01, local01
31790     FE 13 06 F1 | 	add	arg01, #510
31794                 | ' {
31794                 | ' 
31794                 | ' 	return *((WORD*)ptr);
31794     09 29 E2 FA | 	rdword	local02, arg01
31798     13 2B C2 FA | 	rdbyte	local03, local01
3179c     34 26 86 F1 | 	sub	local01, #52
317a0     15 2D E2 F8 | 	getbyte	local04, local03, #0
317a4     EB 2C 0E F2 | 	cmp	local04, #235 wz
317a8     15 17 02 56 |  if_ne	mov	arg03, local03
317ac     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
317b0     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
317b4     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
317b8     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
317bc     44 01 90 5D |  if_ne	jmp	#LR__4853
317c0     14 2D 32 F9 | 	getword	local04, local02, #0
317c4     55 00 00 FF 
317c8     55 2C 0E F2 | 	cmp	local04, ##43605 wz
317cc     2C 00 90 5D |  if_ne	jmp	#LR__4850
317d0     34 26 06 F1 | 	add	local01, #52
317d4     13 13 02 F6 | 	mov	arg01, local01
317d8     34 26 86 F1 | 	sub	local01, #52
317dc     52 12 06 F1 | 	add	arg01, #82
317e0     B6 01 00 FF 
317e4     2C 14 06 F6 | 	mov	arg02, ##@LR__5444
317e8     08 16 06 F6 | 	mov	arg03, #8
317ec     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
317f0     00 FA 0D F2 | 	cmp	result1, #0 wz
317f4                 | ' 			return 0;
317f4     00 FA 05 A6 |  if_e	mov	result1, #0
317f8     20 01 90 AD |  if_e	jmp	#LR__4854
317fc                 | LR__4850
317fc     34 26 06 F1 | 	add	local01, #52
31800     13 13 02 F6 | 	mov	arg01, local01
31804     0B 12 06 F1 | 	add	arg01, #11
31808                 | ' {
31808                 | ' 
31808                 | ' 	return *((WORD*)ptr);
31808     09 FB E1 FA | 	rdword	result1, arg01
3180c     0D 26 06 F1 | 	add	local01, #13
31810     13 2B C2 FA | 	rdbyte	local03, local01
31814     41 26 86 F1 | 	sub	local01, #65
31818     FD 2C 32 F9 | 	getword	local04, result1, #0
3181c     FD 14 32 F9 | 	getword	arg02, result1, #0
31820     01 14 86 F1 | 	sub	arg02, #1
31824     0A 2D CA F7 | 	test	local04, arg02 wz
31828     D8 00 90 5D |  if_ne	jmp	#LR__4852
3182c     FD 14 32 F9 | 	getword	arg02, result1, #0
31830     01 00 00 FF 
31834     00 14 16 F2 | 	cmp	arg02, ##512 wc
31838     C8 00 90 CD |  if_b	jmp	#LR__4852
3183c     FD 14 32 F9 | 	getword	arg02, result1, #0
31840     01 00 00 FF 
31844     01 14 16 F2 | 	cmp	arg02, ##513 wc
31848     B8 00 90 3D |  if_ae	jmp	#LR__4852
3184c     15 13 02 F6 | 	mov	arg01, local03
31850     07 12 4E F7 | 	zerox	arg01, #7 wz
31854     AC 00 90 AD |  if_e	jmp	#LR__4852
31858     15 13 E2 F8 | 	getbyte	arg01, local03, #0
3185c     15 2B E2 F8 | 	getbyte	local03, local03, #0
31860     01 2A 86 F1 | 	sub	local03, #1
31864     15 13 CA F7 | 	test	arg01, local03 wz
31868     98 00 90 5D |  if_ne	jmp	#LR__4852
3186c     34 26 06 F1 | 	add	local01, #52
31870     13 13 02 F6 | 	mov	arg01, local01
31874     34 26 86 F1 | 	sub	local01, #52
31878     0E 12 06 F1 | 	add	arg01, #14
3187c                 | ' {
3187c                 | ' 
3187c                 | ' 	return *((WORD*)ptr);
3187c     09 FB E9 FA | 	rdword	result1, arg01 wz
31880     80 00 90 AD |  if_e	jmp	#LR__4852
31884     44 26 06 F1 | 	add	local01, #68
31888     13 13 C2 FA | 	rdbyte	arg01, local01
3188c     44 26 86 F1 | 	sub	local01, #68
31890     01 12 86 F1 | 	sub	arg01, #1
31894     02 12 16 F2 | 	cmp	arg01, #2 wc
31898     68 00 90 3D |  if_ae	jmp	#LR__4852
3189c     34 26 06 F1 | 	add	local01, #52
318a0     13 13 02 F6 | 	mov	arg01, local01
318a4     34 26 86 F1 | 	sub	local01, #52
318a8     11 12 06 F1 | 	add	arg01, #17
318ac                 | ' {
318ac                 | ' 
318ac                 | ' 	return *((WORD*)ptr);
318ac     09 FB E9 FA | 	rdword	result1, arg01 wz
318b0     50 00 90 AD |  if_e	jmp	#LR__4852
318b4     34 26 06 F1 | 	add	local01, #52
318b8     13 13 02 F6 | 	mov	arg01, local01
318bc     34 26 86 F1 | 	sub	local01, #52
318c0     13 12 06 F1 | 	add	arg01, #19
318c4                 | ' {
318c4                 | ' 
318c4                 | ' 	return *((WORD*)ptr);
318c4     09 FB E1 FA | 	rdword	result1, arg01
318c8     FD 2A 32 F9 | 	getword	local03, result1, #0
318cc     80 2A 16 F2 | 	cmp	local03, #128 wc
318d0     20 00 90 3D |  if_ae	jmp	#LR__4851
318d4     34 26 06 F1 | 	add	local01, #52
318d8     13 13 02 F6 | 	mov	arg01, local01
318dc     34 26 86 F1 | 	sub	local01, #52
318e0     20 12 06 F1 | 	add	arg01, #32
318e4                 | ' {
318e4                 | ' 
318e4                 | ' 	return *((DWORD*)ptr);
318e4     09 FB 01 FB | 	rdlong	result1, arg01
318e8     80 00 00 FF 
318ec     00 FA 15 F2 | 	cmp	result1, ##65536 wc
318f0     10 00 90 CD |  if_b	jmp	#LR__4852
318f4                 | LR__4851
318f4     4A 26 06 F1 | 	add	local01, #74
318f8                 | ' {
318f8                 | ' 
318f8                 | ' 	return *((WORD*)ptr);
318f8     13 FB E9 FA | 	rdword	result1, local01 wz
318fc                 | ' 			&& b != 0 && (b & (b - 1)) == 0
318fc                 | ' 			&& ld_word(fs->win +  14 ) != 0
318fc                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
318fc                 | ' 			&& ld_word(fs->win +  17 ) != 0
318fc                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
318fc                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
318fc                 | ' 				return 0;
318fc     00 FA 05 56 |  if_ne	mov	result1, #0
31900     18 00 90 5D |  if_ne	jmp	#LR__4854
31904                 | LR__4852
31904                 | LR__4853
31904                 | ' 		}
31904                 | ' 	}
31904                 | ' 	return sign == 0xAA55 ? 2 : 3;
31904     14 2B 32 F9 | 	getword	local03, local02, #0
31908     55 00 00 FF 
3190c     55 2A 0E F2 | 	cmp	local03, ##43605 wz
31910     02 2C 06 A6 |  if_e	mov	local04, #2
31914     03 2C 06 56 |  if_ne	mov	local04, #3
31918     16 FB 01 F6 | 	mov	result1, local04
3191c                 | LR__4854
3191c     A7 F0 03 F6 | 	mov	ptra, fp
31920     B2 00 A0 FD | 	call	#popregs_
31924                 | _fatfs_cc_check_fs_ret
31924     2D 00 64 FD | 	ret
31928                 | 
31928                 | _fatfs_cc_find_volume
31928     05 4A 05 F6 | 	mov	COUNT_, #5
3192c     A8 00 A0 FD | 	call	#pushregs_
31930     24 F0 07 F1 | 	add	ptra, #36
31934     09 27 02 F6 | 	mov	local01, arg01
31938     0A 29 02 F6 | 	mov	local02, arg02
3193c     13 13 02 F6 | 	mov	arg01, local01
31940     00 14 06 F6 | 	mov	arg02, #0
31944     08 FE BF FD | 	call	#_fatfs_cc_check_fs
31948     02 FA 0D F2 | 	cmp	result1, #2 wz
3194c     0C 00 90 AD |  if_e	jmp	#LR__4860
31950     03 FA 15 F2 | 	cmp	result1, #3 wc
31954     00 28 0E C2 |  if_b	cmp	local02, #0 wz
31958     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4868
3195c                 | LR__4860
3195c                 | ' 	for (i = 0; i < 4; i++) {
3195c     00 2A 06 F6 | 	mov	local03, #0
31960     97 26 48 FB | 	callpa	#(@LR__4862-@LR__4861)>>2,fcache_load_ptr_
31964                 | LR__4861
31964     04 2A 16 F2 | 	cmp	local03, #4 wc
31968     44 00 90 3D |  if_ae	jmp	#LR__4863
3196c     15 2D 02 F6 | 	mov	local04, local03
31970     02 2C 66 F0 | 	shl	local04, #2
31974     14 4E 05 F1 | 	add	fp, #20
31978     A7 2C 02 F1 | 	add	local04, fp
3197c     34 26 06 F1 | 	add	local01, #52
31980     13 13 02 F6 | 	mov	arg01, local01
31984     34 26 86 F1 | 	sub	local01, #52
31988     BE 13 06 F1 | 	add	arg01, #446
3198c     15 15 02 F6 | 	mov	arg02, local03
31990     04 14 66 F0 | 	shl	arg02, #4
31994     0A 13 02 F1 | 	add	arg01, arg02
31998     08 12 06 F1 | 	add	arg01, #8
3199c                 | ' {
3199c                 | ' 
3199c                 | ' 	return *((DWORD*)ptr);
3199c     09 FB 01 FB | 	rdlong	result1, arg01
319a0     14 4E 85 F1 | 	sub	fp, #20
319a4     16 FB 61 FC | 	wrlong	result1, local04
319a8     01 2A 06 F1 | 	add	local03, #1
319ac     B4 FF 9F FD | 	jmp	#LR__4861
319b0                 | LR__4862
319b0                 | LR__4863
319b0     00 28 0E F2 | 	cmp	local02, #0 wz
319b4     14 2D 02 56 |  if_ne	mov	local04, local02
319b8     01 2C 86 51 |  if_ne	sub	local04, #1
319bc     00 2C 06 A6 |  if_e	mov	local04, #0
319c0     16 2B 02 F6 | 	mov	local03, local04
319c4                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
319c4                 | ' 	}
319c4                 | ' 	i = part ? part - 1 : 0;
319c4                 | ' 	do {
319c4                 | LR__4864
319c4     15 2D 02 F6 | 	mov	local04, local03
319c8     02 2C 66 F0 | 	shl	local04, #2
319cc     14 4E 05 F1 | 	add	fp, #20
319d0     A7 2C 02 F1 | 	add	local04, fp
319d4     16 2D 0A FB | 	rdlong	local04, local04 wz
319d8     14 4E 85 F1 | 	sub	fp, #20
319dc     28 00 90 AD |  if_e	jmp	#LR__4865
319e0     15 2D 02 F6 | 	mov	local04, local03
319e4     02 2C 66 F0 | 	shl	local04, #2
319e8     14 4E 05 F1 | 	add	fp, #20
319ec     A7 2C 02 F1 | 	add	local04, fp
319f0     16 15 02 FB | 	rdlong	arg02, local04
319f4     13 13 02 F6 | 	mov	arg01, local01
319f8     14 4E 85 F1 | 	sub	fp, #20
319fc     50 FD BF FD | 	call	#_fatfs_cc_check_fs
31a00     FD 2C 02 F6 | 	mov	local04, result1
31a04     04 00 90 FD | 	jmp	#LR__4866
31a08                 | LR__4865
31a08     03 2C 06 F6 | 	mov	local04, #3
31a0c                 | LR__4866
31a0c     16 2F 02 F6 | 	mov	local05, local04
31a10     00 28 0E F2 | 	cmp	local02, #0 wz
31a14     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
31a18     0C 00 90 8D |  if_c_and_z	jmp	#LR__4867
31a1c     01 2A 06 A1 |  if_e	add	local03, #1
31a20     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
31a24     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4864
31a28                 | LR__4867
31a28                 | ' 	return fmt;
31a28     17 FB 01 F6 | 	mov	result1, local05
31a2c                 | LR__4868
31a2c     A7 F0 03 F6 | 	mov	ptra, fp
31a30     B2 00 A0 FD | 	call	#popregs_
31a34                 | _fatfs_cc_find_volume_ret
31a34     2D 00 64 FD | 	ret
31a38                 | 
31a38                 | _fatfs_cc_mount_volume
31a38     0B 4A 05 F6 | 	mov	COUNT_, #11
31a3c     A8 00 A0 FD | 	call	#pushregs_
31a40     0A 27 02 F6 | 	mov	local01, arg02
31a44     0B 29 02 F6 | 	mov	local02, arg03
31a48     13 01 68 FC | 	wrlong	#0, local01
31a4c     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
31a50     FD 2A 02 F6 | 	mov	local03, result1
31a54     00 2A 56 F2 | 	cmps	local03, #0 wc
31a58     0B FA 05 C6 |  if_b	mov	result1, #11
31a5c     3C 05 90 CD |  if_b	jmp	#LR__4880
31a60     15 17 02 F6 | 	mov	arg03, local03
31a64     02 16 66 F0 | 	shl	arg03, #2
31a68     F2 16 02 F1 | 	add	arg03, objptr
31a6c     0B 2D 0A FB | 	rdlong	local04, arg03 wz
31a70     0C FA 05 A6 |  if_e	mov	result1, #12
31a74     24 05 90 AD |  if_e	jmp	#LR__4880
31a78     13 2D 62 FC | 	wrlong	local04, local01
31a7c     14 29 E2 F8 | 	getbyte	local02, local02, #0
31a80     FE 28 06 F5 | 	and	local02, #254
31a84     16 17 CA FA | 	rdbyte	arg03, local04 wz
31a88     4C 00 90 AD |  if_e	jmp	#LR__4871
31a8c     01 2C 06 F1 | 	add	local04, #1
31a90     16 13 CA FA | 	rdbyte	arg01, local04 wz
31a94     01 2C 86 F1 | 	sub	local04, #1
31a98     01 FA 05 56 |  if_ne	mov	result1, #1
31a9c                 | ' 
31a9c                 | ' 	return Stat;
31a9c     01 00 00 AF 
31aa0     20 E4 05 A1 |  if_e	add	objptr, ##544
31aa4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
31aa8     01 00 00 AF 
31aac     20 E4 85 A1 |  if_e	sub	objptr, ##544
31ab0     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
31ab4     01 16 CE F7 | 	test	arg03, #1 wz
31ab8     1C 00 90 5D |  if_ne	jmp	#LR__4870
31abc     00 28 0E F2 | 	cmp	local02, #0 wz
31ac0     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
31ac4     04 FA CD 57 |  if_ne	test	result1, #4 wz
31ac8                 | ' 				return FR_WRITE_PROTECTED;
31ac8     0A FA 05 56 |  if_ne	mov	result1, #10
31acc     CC 04 90 5D |  if_ne	jmp	#LR__4880
31ad0                 | ' 			}
31ad0                 | ' 			return FR_OK;
31ad0     00 FA 05 F6 | 	mov	result1, #0
31ad4     C4 04 90 FD | 	jmp	#LR__4880
31ad8                 | LR__4870
31ad8                 | LR__4871
31ad8     16 01 48 FC | 	wrbyte	#0, local04
31adc     01 2C 06 F1 | 	add	local04, #1
31ae0     16 2B 42 FC | 	wrbyte	local03, local04
31ae4     16 13 C2 FA | 	rdbyte	arg01, local04
31ae8     01 2C 86 F1 | 	sub	local04, #1
31aec     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
31af0     FD 16 02 F6 | 	mov	arg03, result1
31af4     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
31af8     01 2E CE F7 | 	test	local05, #1 wz
31afc                 | ' 		return FR_NOT_READY;
31afc     03 FA 05 56 |  if_ne	mov	result1, #3
31b00     98 04 90 5D |  if_ne	jmp	#LR__4880
31b04     00 28 0E F2 | 	cmp	local02, #0 wz
31b08     0B 2F 02 56 |  if_ne	mov	local05, arg03
31b0c     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
31b10     04 2E CE 57 |  if_ne	test	local05, #4 wz
31b14                 | ' 		return FR_WRITE_PROTECTED;
31b14     0A FA 05 56 |  if_ne	mov	result1, #10
31b18     80 04 90 5D |  if_ne	jmp	#LR__4880
31b1c     16 13 02 F6 | 	mov	arg01, local04
31b20     00 14 06 F6 | 	mov	arg02, #0
31b24     00 FE BF FD | 	call	#_fatfs_cc_find_volume
31b28     FD 12 02 F6 | 	mov	arg01, result1
31b2c     04 12 0E F2 | 	cmp	arg01, #4 wz
31b30     01 FA 05 A6 |  if_e	mov	result1, #1
31b34     64 04 90 AD |  if_e	jmp	#LR__4880
31b38     02 12 16 F2 | 	cmp	arg01, #2 wc
31b3c     0D FA 05 36 |  if_ae	mov	result1, #13
31b40     58 04 90 3D |  if_ae	jmp	#LR__4880
31b44     30 2C 06 F1 | 	add	local04, #48
31b48     16 31 02 FB | 	rdlong	local06, local04
31b4c     04 2C 06 F1 | 	add	local04, #4
31b50     16 13 02 F6 | 	mov	arg01, local04
31b54     34 2C 86 F1 | 	sub	local04, #52
31b58     0B 12 06 F1 | 	add	arg01, #11
31b5c                 | ' {
31b5c                 | ' 
31b5c                 | ' 	return *((WORD*)ptr);
31b5c     09 FB E1 FA | 	rdword	result1, arg01
31b60     01 00 00 FF 
31b64     00 FA 0D F2 | 	cmp	result1, ##512 wz
31b68     0D FA 05 56 |  if_ne	mov	result1, #13
31b6c     2C 04 90 5D |  if_ne	jmp	#LR__4880
31b70     34 2C 06 F1 | 	add	local04, #52
31b74     16 13 02 F6 | 	mov	arg01, local04
31b78     34 2C 86 F1 | 	sub	local04, #52
31b7c     16 12 06 F1 | 	add	arg01, #22
31b80                 | ' {
31b80                 | ' 
31b80                 | ' 	return *((WORD*)ptr);
31b80     09 FB E1 FA | 	rdword	result1, arg01
31b84     FD 32 0A F6 | 	mov	local07, result1 wz
31b88     18 00 90 5D |  if_ne	jmp	#LR__4872
31b8c     34 2C 06 F1 | 	add	local04, #52
31b90     16 13 02 F6 | 	mov	arg01, local04
31b94     34 2C 86 F1 | 	sub	local04, #52
31b98     24 12 06 F1 | 	add	arg01, #36
31b9c                 | ' {
31b9c                 | ' 
31b9c                 | ' 	return *((DWORD*)ptr);
31b9c     09 FB 01 FB | 	rdlong	result1, arg01
31ba0     FD 32 02 F6 | 	mov	local07, result1
31ba4                 | LR__4872
31ba4     1C 2C 06 F1 | 	add	local04, #28
31ba8     16 33 62 FC | 	wrlong	local07, local04
31bac     28 2C 06 F1 | 	add	local04, #40
31bb0     16 2F C2 FA | 	rdbyte	local05, local04
31bb4     42 2C 86 F1 | 	sub	local04, #66
31bb8     16 2F 42 FC | 	wrbyte	local05, local04
31bbc     16 2F C2 FA | 	rdbyte	local05, local04
31bc0     02 2C 86 F1 | 	sub	local04, #2
31bc4     01 2E 0E F2 | 	cmp	local05, #1 wz
31bc8     02 2C 06 51 |  if_ne	add	local04, #2
31bcc     16 2F C2 5A |  if_ne	rdbyte	local05, local04
31bd0     02 2C 86 51 |  if_ne	sub	local04, #2
31bd4     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
31bd8     0D FA 05 56 |  if_ne	mov	result1, #13
31bdc     BC 03 90 5D |  if_ne	jmp	#LR__4880
31be0     02 2C 06 F1 | 	add	local04, #2
31be4     16 2F C2 FA | 	rdbyte	local05, local04
31be8     17 33 02 FD | 	qmul	local07, local05
31bec     3F 2C 06 F1 | 	add	local04, #63
31bf0     16 2F C2 FA | 	rdbyte	local05, local04
31bf4     37 2C 86 F1 | 	sub	local04, #55
31bf8     16 2F 52 FC | 	wrword	local05, local04
31bfc     16 2F EA FA | 	rdword	local05, local04 wz
31c00     0A 2C 86 F1 | 	sub	local04, #10
31c04     18 32 62 FD | 	getqx	local07
31c08     20 00 90 AD |  if_e	jmp	#LR__4873
31c0c     0A 2C 06 F1 | 	add	local04, #10
31c10     16 2F E2 FA | 	rdword	local05, local04
31c14     17 2B 32 F9 | 	getword	local03, local05, #0
31c18     0A 2C 86 F1 | 	sub	local04, #10
31c1c     17 2F 32 F9 | 	getword	local05, local05, #0
31c20     01 2E 86 F1 | 	sub	local05, #1
31c24     17 2B CA F7 | 	test	local03, local05 wz
31c28     08 00 90 AD |  if_e	jmp	#LR__4874
31c2c                 | LR__4873
31c2c     0D FA 05 F6 | 	mov	result1, #13
31c30     68 03 90 FD | 	jmp	#LR__4880
31c34                 | LR__4874
31c34     34 2C 06 F1 | 	add	local04, #52
31c38     16 13 02 F6 | 	mov	arg01, local04
31c3c     11 12 06 F1 | 	add	arg01, #17
31c40                 | ' {
31c40                 | ' 
31c40                 | ' 	return *((WORD*)ptr);
31c40     09 FB E1 FA | 	rdword	result1, arg01
31c44     2C 2C 86 F1 | 	sub	local04, #44
31c48     16 FB 51 FC | 	wrword	result1, local04
31c4c     16 2F E2 FA | 	rdword	local05, local04
31c50     08 2C 86 F1 | 	sub	local04, #8
31c54     17 13 52 F6 | 	abs	arg01, local05 wc
31c58     09 13 42 F8 | 	getnib	arg01, arg01, #0
31c5c     09 13 8A F6 | 	negc	arg01, arg01 wz
31c60     0D FA 05 56 |  if_ne	mov	result1, #13
31c64     34 03 90 5D |  if_ne	jmp	#LR__4880
31c68     34 2C 06 F1 | 	add	local04, #52
31c6c     16 13 02 F6 | 	mov	arg01, local04
31c70     34 2C 86 F1 | 	sub	local04, #52
31c74     13 12 06 F1 | 	add	arg01, #19
31c78                 | ' {
31c78                 | ' 
31c78                 | ' 	return *((WORD*)ptr);
31c78     09 FB E1 FA | 	rdword	result1, arg01
31c7c     FD 34 0A F6 | 	mov	local08, result1 wz
31c80     34 2C 06 A1 |  if_e	add	local04, #52
31c84     16 13 02 A6 |  if_e	mov	arg01, local04
31c88     34 2C 86 A1 |  if_e	sub	local04, #52
31c8c     20 12 06 A1 |  if_e	add	arg01, #32
31c90                 | ' {
31c90                 | ' 
31c90                 | ' 	return *((DWORD*)ptr);
31c90     09 35 02 AB |  if_e	rdlong	local08, arg01
31c94     34 2C 06 F1 | 	add	local04, #52
31c98     16 13 02 F6 | 	mov	arg01, local04
31c9c     34 2C 86 F1 | 	sub	local04, #52
31ca0     0E 12 06 F1 | 	add	arg01, #14
31ca4                 | ' {
31ca4                 | ' 
31ca4                 | ' 	return *((WORD*)ptr);
31ca4     09 FB E1 FA | 	rdword	result1, arg01
31ca8     FD 12 02 F6 | 	mov	arg01, result1
31cac     09 2F 02 F6 | 	mov	local05, arg01
31cb0     0F 2E 4E F7 | 	zerox	local05, #15 wz
31cb4     0D FA 05 A6 |  if_e	mov	result1, #13
31cb8     E0 02 90 AD |  if_e	jmp	#LR__4880
31cbc     09 37 32 F9 | 	getword	local09, arg01, #0
31cc0     19 37 02 F1 | 	add	local09, local07
31cc4     08 2C 06 F1 | 	add	local04, #8
31cc8     16 2F E2 FA | 	rdword	local05, local04
31ccc     08 2C 86 F1 | 	sub	local04, #8
31cd0     17 2F 52 F6 | 	abs	local05, local05 wc
31cd4     04 2E 46 F0 | 	shr	local05, #4
31cd8     17 37 82 F3 | 	sumc	local09, local05
31cdc     1B 35 12 F2 | 	cmp	local08, local09 wc
31ce0     0D FA 05 C6 |  if_b	mov	result1, #13
31ce4     B4 02 90 CD |  if_b	jmp	#LR__4880
31ce8     1B 35 82 F1 | 	sub	local08, local09
31cec     0A 2C 06 F1 | 	add	local04, #10
31cf0     16 2F E2 FA | 	rdword	local05, local04
31cf4     17 35 12 FD | 	qdiv	local08, local05
31cf8     0A 2C 86 F1 | 	sub	local04, #10
31cfc     18 2E 62 FD | 	getqx	local05
31d00     00 2E 0E F2 | 	cmp	local05, #0 wz
31d04     0D FA 05 A6 |  if_e	mov	result1, #13
31d08     90 02 90 AD |  if_e	jmp	#LR__4880
31d0c     00 38 06 F6 | 	mov	local10, #0
31d10     FF FF 07 FF 
31d14     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
31d18     03 38 06 C6 |  if_b	mov	local10, #3
31d1c     7F 00 00 FF 
31d20     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
31d24     02 38 06 C6 |  if_b	mov	local10, #2
31d28     07 00 00 FF 
31d2c     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
31d30     01 38 06 C6 |  if_b	mov	local10, #1
31d34     00 38 0E F2 | 	cmp	local10, #0 wz
31d38     0D FA 05 A6 |  if_e	mov	result1, #13
31d3c     5C 02 90 AD |  if_e	jmp	#LR__4880
31d40     02 2E 06 F1 | 	add	local05, #2
31d44     18 2C 06 F1 | 	add	local04, #24
31d48     16 2F 62 FC | 	wrlong	local05, local04
31d4c     08 2C 06 F1 | 	add	local04, #8
31d50     16 31 62 FC | 	wrlong	local06, local04
31d54     18 2F 02 F6 | 	mov	local05, local06
31d58     09 13 32 F9 | 	getword	arg01, arg01, #0
31d5c     09 2F 02 F1 | 	add	local05, arg01
31d60     04 2C 06 F1 | 	add	local04, #4
31d64     16 2F 62 FC | 	wrlong	local05, local04
31d68     18 2F 02 F6 | 	mov	local05, local06
31d6c     1B 2F 02 F1 | 	add	local05, local09
31d70     08 2C 06 F1 | 	add	local04, #8
31d74     16 2F 62 FC | 	wrlong	local05, local04
31d78     2C 2C 86 F1 | 	sub	local04, #44
31d7c     03 38 0E F2 | 	cmp	local10, #3 wz
31d80     5C 00 90 5D |  if_ne	jmp	#LR__4875
31d84     34 2C 06 F1 | 	add	local04, #52
31d88     16 13 02 F6 | 	mov	arg01, local04
31d8c     34 2C 86 F1 | 	sub	local04, #52
31d90     2A 12 06 F1 | 	add	arg01, #42
31d94                 | ' {
31d94                 | ' 
31d94                 | ' 	return *((WORD*)ptr);
31d94     09 FB E9 FA | 	rdword	result1, arg01 wz
31d98     0D FA 05 56 |  if_ne	mov	result1, #13
31d9c     FC 01 90 5D |  if_ne	jmp	#LR__4880
31da0     08 2C 06 F1 | 	add	local04, #8
31da4     16 2F EA FA | 	rdword	local05, local04 wz
31da8     08 2C 86 F1 | 	sub	local04, #8
31dac     0D FA 05 56 |  if_ne	mov	result1, #13
31db0     E8 01 90 5D |  if_ne	jmp	#LR__4880
31db4     34 2C 06 F1 | 	add	local04, #52
31db8     16 13 02 F6 | 	mov	arg01, local04
31dbc     2C 12 06 F1 | 	add	arg01, #44
31dc0                 | ' {
31dc0                 | ' 
31dc0                 | ' 	return *((DWORD*)ptr);
31dc0     09 FB 01 FB | 	rdlong	result1, arg01
31dc4     0C 2C 86 F1 | 	sub	local04, #12
31dc8     16 FB 61 FC | 	wrlong	result1, local04
31dcc     10 2C 86 F1 | 	sub	local04, #16
31dd0     16 3B 02 FB | 	rdlong	local11, local04
31dd4     18 2C 86 F1 | 	sub	local04, #24
31dd8     02 3A 66 F0 | 	shl	local11, #2
31ddc     6C 00 90 FD | 	jmp	#LR__4877
31de0                 | LR__4875
31de0     08 2C 06 F1 | 	add	local04, #8
31de4     16 2F EA FA | 	rdword	local05, local04 wz
31de8     08 2C 86 F1 | 	sub	local04, #8
31dec     0D FA 05 A6 |  if_e	mov	result1, #13
31df0     A8 01 90 AD |  if_e	jmp	#LR__4880
31df4     24 2C 06 F1 | 	add	local04, #36
31df8     16 2F 02 FB | 	rdlong	local05, local04
31dfc     19 2F 02 F1 | 	add	local05, local07
31e00     04 2C 06 F1 | 	add	local04, #4
31e04     16 2F 62 FC | 	wrlong	local05, local04
31e08     28 2C 86 F1 | 	sub	local04, #40
31e0c     02 38 0E F2 | 	cmp	local10, #2 wz
31e10     18 2C 06 A1 |  if_e	add	local04, #24
31e14     16 2F 02 AB |  if_e	rdlong	local05, local04
31e18     18 2C 86 A1 |  if_e	sub	local04, #24
31e1c     01 2E 66 A0 |  if_e	shl	local05, #1
31e20     24 00 90 AD |  if_e	jmp	#LR__4876
31e24     18 2C 06 F1 | 	add	local04, #24
31e28     16 3B 02 FB | 	rdlong	local11, local04
31e2c     1D 2F 02 F6 | 	mov	local05, local11
31e30     01 2E 66 F0 | 	shl	local05, #1
31e34     1D 2F 02 F1 | 	add	local05, local11
31e38     01 2E 46 F0 | 	shr	local05, #1
31e3c     18 2C 86 F1 | 	sub	local04, #24
31e40     01 3A 06 F5 | 	and	local11, #1
31e44     1D 2F 02 F1 | 	add	local05, local11
31e48                 | LR__4876
31e48     17 3B 02 F6 | 	mov	local11, local05
31e4c                 | LR__4877
31e4c     FF 3B 06 F1 | 	add	local11, #511
31e50     09 3A 46 F0 | 	shr	local11, #9
31e54     1C 2C 06 F1 | 	add	local04, #28
31e58     16 17 02 FB | 	rdlong	arg03, local04
31e5c     1C 2C 86 F1 | 	sub	local04, #28
31e60     1D 17 12 F2 | 	cmp	arg03, local11 wc
31e64     0D FA 05 C6 |  if_b	mov	result1, #13
31e68     30 01 90 CD |  if_b	jmp	#LR__4880
31e6c     14 2C 06 F1 | 	add	local04, #20
31e70     FF FF FF FF 
31e74     16 FF 6B FC | 	wrlong	##-1, local04
31e78     04 2C 86 F1 | 	sub	local04, #4
31e7c     FF FF FF FF 
31e80     16 FF 6B FC | 	wrlong	##-1, local04
31e84     0C 2C 86 F1 | 	sub	local04, #12
31e88     16 01 49 FC | 	wrbyte	#128, local04
31e8c     04 2C 86 F1 | 	sub	local04, #4
31e90     03 38 0E F2 | 	cmp	local10, #3 wz
31e94     D0 00 90 5D |  if_ne	jmp	#LR__4879
31e98     34 2C 06 F1 | 	add	local04, #52
31e9c     16 13 02 F6 | 	mov	arg01, local04
31ea0     34 2C 86 F1 | 	sub	local04, #52
31ea4     30 12 06 F1 | 	add	arg01, #48
31ea8                 | ' {
31ea8                 | ' 
31ea8                 | ' 	return *((WORD*)ptr);
31ea8     09 FB E1 FA | 	rdword	result1, arg01
31eac     FD 2E 32 F9 | 	getword	local05, result1, #0
31eb0     01 2E 0E F2 | 	cmp	local05, #1 wz
31eb4     B0 00 90 5D |  if_ne	jmp	#LR__4879
31eb8     01 30 06 F1 | 	add	local06, #1
31ebc     16 13 02 F6 | 	mov	arg01, local04
31ec0     18 15 02 F6 | 	mov	arg02, local06
31ec4     CC CD BF FD | 	call	#_fatfs_cc_move_window
31ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
31ecc     98 00 90 5D |  if_ne	jmp	#LR__4879
31ed0     04 2C 06 F1 | 	add	local04, #4
31ed4     16 01 48 FC | 	wrbyte	#0, local04
31ed8     30 2C 06 F1 | 	add	local04, #48
31edc     16 13 02 F6 | 	mov	arg01, local04
31ee0     34 2C 86 F1 | 	sub	local04, #52
31ee4     FE 13 06 F1 | 	add	arg01, #510
31ee8                 | ' {
31ee8                 | ' 
31ee8                 | ' 	return *((WORD*)ptr);
31ee8     09 FB E1 FA | 	rdword	result1, arg01
31eec     FD 2E 32 F9 | 	getword	local05, result1, #0
31ef0     55 00 00 FF 
31ef4     55 2E 0E F2 | 	cmp	local05, ##43605 wz
31ef8     34 2C 06 A1 |  if_e	add	local04, #52
31efc     16 13 02 A6 |  if_e	mov	arg01, local04
31f00     34 2C 86 A1 |  if_e	sub	local04, #52
31f04                 | ' {
31f04                 | ' 
31f04                 | ' 	return *((DWORD*)ptr);
31f04     09 FB 01 AB |  if_e	rdlong	result1, arg01
31f08     A9 B0 20 AF 
31f0c     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
31f10     54 00 90 5D |  if_ne	jmp	#LR__4878
31f14     34 2C 06 F1 | 	add	local04, #52
31f18     16 13 02 F6 | 	mov	arg01, local04
31f1c     34 2C 86 F1 | 	sub	local04, #52
31f20     E4 13 06 F1 | 	add	arg01, #484
31f24                 | ' {
31f24                 | ' 
31f24                 | ' 	return *((DWORD*)ptr);
31f24     09 FB 01 FB | 	rdlong	result1, arg01
31f28     B9 A0 30 FF 
31f2c     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
31f30     34 00 90 5D |  if_ne	jmp	#LR__4878
31f34     34 2C 06 F1 | 	add	local04, #52
31f38     16 13 02 F6 | 	mov	arg01, local04
31f3c     E8 13 06 F1 | 	add	arg01, #488
31f40                 | ' {
31f40                 | ' 
31f40                 | ' 	return *((DWORD*)ptr);
31f40     09 FB 01 FB | 	rdlong	result1, arg01
31f44     20 2C 86 F1 | 	sub	local04, #32
31f48     16 FB 61 FC | 	wrlong	result1, local04
31f4c     20 2C 06 F1 | 	add	local04, #32
31f50     16 13 02 F6 | 	mov	arg01, local04
31f54     EC 13 06 F1 | 	add	arg01, #492
31f58                 | ' {
31f58                 | ' 
31f58                 | ' 	return *((DWORD*)ptr);
31f58     09 FB 01 FB | 	rdlong	result1, arg01
31f5c     24 2C 86 F1 | 	sub	local04, #36
31f60     16 FB 61 FC | 	wrlong	result1, local04
31f64     10 2C 86 F1 | 	sub	local04, #16
31f68                 | LR__4878
31f68                 | LR__4879
31f68     16 39 42 FC | 	wrbyte	local10, local04
31f6c     04 E4 05 F1 | 	add	objptr, #4
31f70     F2 2E E2 FA | 	rdword	local05, objptr
31f74     01 2E 06 F1 | 	add	local05, #1
31f78     F2 2E 52 FC | 	wrword	local05, objptr
31f7c     F2 3A E2 FA | 	rdword	local11, objptr
31f80     06 2C 06 F1 | 	add	local04, #6
31f84     16 3B 52 FC | 	wrword	local11, local04
31f88     04 E4 05 F1 | 	add	objptr, #4
31f8c     06 2C 06 F1 | 	add	local04, #6
31f90     16 E5 61 FC | 	wrlong	objptr, local04
31f94                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
31f94                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
31f94                 | ' 			{
31f94                 | ' 
31f94                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
31f94                 | ' 
31f94                 | ' 
31f94                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
31f94                 | ' 
31f94                 | ' 			}
31f94                 | ' 		}
31f94                 | ' 
31f94                 | ' 
31f94                 | ' 	}
31f94                 | ' 
31f94                 | ' 	fs->fs_type = (BYTE)fmt;
31f94                 | ' 	fs->id = ++Fsid;
31f94                 | ' 
31f94                 | ' 	fs->lfnbuf = LfnBuf;
31f94                 | ' #line 3567 "ff.c"
31f94                 | ' 	return FR_OK;
31f94     00 FA 05 F6 | 	mov	result1, #0
31f98     08 E4 85 F1 | 	sub	objptr, #8
31f9c                 | LR__4880
31f9c     A7 F0 03 F6 | 	mov	ptra, fp
31fa0     B2 00 A0 FD | 	call	#popregs_
31fa4                 | _fatfs_cc_mount_volume_ret
31fa4     2D 00 64 FD | 	ret
31fa8                 | 
31fa8                 | _fatfs_cc_validate
31fa8     09 01 0A F6 | 	mov	_var01, arg01 wz
31fac     09 02 06 F6 | 	mov	_var02, #9
31fb0     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
31fb4     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
31fb8     50 00 90 AD |  if_e	jmp	#LR__4890
31fbc     04 00 06 F1 | 	add	_var01, #4
31fc0     00 07 E2 FA | 	rdword	_var04, _var01
31fc4     04 00 86 F1 | 	sub	_var01, #4
31fc8     00 13 02 FB | 	rdlong	arg01, _var01
31fcc     06 12 06 F1 | 	add	arg01, #6
31fd0     09 FB E1 FA | 	rdword	result1, arg01
31fd4     FD 06 0A F2 | 	cmp	_var04, result1 wz
31fd8     30 00 90 5D |  if_ne	jmp	#LR__4890
31fdc     00 07 02 FB | 	rdlong	_var04, _var01
31fe0     01 06 06 F1 | 	add	_var04, #1
31fe4     03 13 CA FA | 	rdbyte	arg01, _var04 wz
31fe8     01 FA 05 56 |  if_ne	mov	result1, #1
31fec                 | ' 
31fec                 | ' 	return Stat;
31fec     01 00 00 AF 
31ff0     20 E4 05 A1 |  if_e	add	objptr, ##544
31ff4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
31ff8     01 00 00 AF 
31ffc     20 E4 85 A1 |  if_e	sub	objptr, ##544
32000     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
32004     01 04 CE F7 | 	test	_var03, #1 wz
32008     00 02 06 A6 |  if_e	mov	_var02, #0
3200c                 | LR__4890
3200c     00 02 0E F2 | 	cmp	_var02, #0 wz
32010     00 05 02 AB |  if_e	rdlong	_var03, _var01
32014     00 04 06 56 |  if_ne	mov	_var03, #0
32018     0A 05 62 FC | 	wrlong	_var03, arg02
3201c                 | ' 			res = FR_OK;
3201c                 | ' 		}
3201c                 | ' 
3201c                 | ' 	}
3201c                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
3201c                 | ' 	return res;
3201c     01 FB 01 F6 | 	mov	result1, _var02
32020                 | _fatfs_cc_validate_ret
32020     2D 00 64 FD | 	ret
32024                 | 
32024                 | _fatfs_cc_f_mount
32024     01 4A 05 F6 | 	mov	COUNT_, #1
32028     A8 00 A0 FD | 	call	#pushregs_
3202c     20 F0 07 F1 | 	add	ptra, #32
32030     04 4E 05 F1 | 	add	fp, #4
32034     A7 12 62 FC | 	wrlong	arg01, fp
32038     04 4E 05 F1 | 	add	fp, #4
3203c     A7 14 62 FC | 	wrlong	arg02, fp
32040     04 4E 05 F1 | 	add	fp, #4
32044     A7 16 42 FC | 	wrbyte	arg03, fp
32048     04 4E 85 F1 | 	sub	fp, #4
3204c     A7 16 02 FB | 	rdlong	arg03, fp
32050     14 4E 05 F1 | 	add	fp, #20
32054     A7 16 62 FC | 	wrlong	arg03, fp
32058     A7 12 02 F6 | 	mov	arg01, fp
3205c     1C 4E 85 F1 | 	sub	fp, #28
32060     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
32064     14 4E 05 F1 | 	add	fp, #20
32068     A7 FA 61 FC | 	wrlong	result1, fp
3206c     14 4E 85 F1 | 	sub	fp, #20
32070     00 FA 55 F2 | 	cmps	result1, #0 wc
32074     0B FA 05 C6 |  if_b	mov	result1, #11
32078     C0 00 90 CD |  if_b	jmp	#LR__4901
3207c     14 4E 05 F1 | 	add	fp, #20
32080     A7 16 02 FB | 	rdlong	arg03, fp
32084     02 16 66 F0 | 	shl	arg03, #2
32088     F2 16 02 F1 | 	add	arg03, objptr
3208c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
32090     04 4E 85 F1 | 	sub	fp, #4
32094     A7 16 62 FC | 	wrlong	arg03, fp
32098     10 4E 85 F1 | 	sub	fp, #16
3209c     28 00 90 AD |  if_e	jmp	#LR__4900
320a0     10 4E 05 F1 | 	add	fp, #16
320a4     A7 16 02 FB | 	rdlong	arg03, fp
320a8     10 4E 85 F1 | 	sub	fp, #16
320ac     01 16 06 F1 | 	add	arg03, #1
320b0     0B 13 C2 FA | 	rdbyte	arg01, arg03
320b4     30 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
320b8     10 4E 05 F1 | 	add	fp, #16
320bc     A7 16 02 FB | 	rdlong	arg03, fp
320c0     10 4E 85 F1 | 	sub	fp, #16
320c4     0B 01 48 FC | 	wrbyte	#0, arg03
320c8                 | LR__4900
320c8     04 4E 05 F1 | 	add	fp, #4
320cc     A7 26 0A FB | 	rdlong	local01, fp wz
320d0     04 4E 85 F1 | 	sub	fp, #4
320d4     04 4E 05 51 |  if_ne	add	fp, #4
320d8     A7 26 02 5B |  if_ne	rdlong	local01, fp
320dc     04 4E 85 51 |  if_ne	sub	fp, #4
320e0     13 01 48 5C |  if_ne	wrbyte	#0, local01
320e4     14 4E 05 F1 | 	add	fp, #20
320e8     A7 26 02 FB | 	rdlong	local01, fp
320ec     02 26 66 F0 | 	shl	local01, #2
320f0     F2 26 02 F1 | 	add	local01, objptr
320f4     10 4E 85 F1 | 	sub	fp, #16
320f8     A7 16 02 FB | 	rdlong	arg03, fp
320fc     13 17 62 FC | 	wrlong	arg03, local01
32100     08 4E 05 F1 | 	add	fp, #8
32104     A7 26 CA FA | 	rdbyte	local01, fp wz
32108     0C 4E 85 F1 | 	sub	fp, #12
3210c     00 FA 05 A6 |  if_e	mov	result1, #0
32110     28 00 90 AD |  if_e	jmp	#LR__4901
32114     08 4E 05 F1 | 	add	fp, #8
32118     A7 12 02 F6 | 	mov	arg01, fp
3211c     04 4E 85 F1 | 	sub	fp, #4
32120     A7 14 02 F6 | 	mov	arg02, fp
32124     04 4E 85 F1 | 	sub	fp, #4
32128     00 16 06 F6 | 	mov	arg03, #0
3212c     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
32130     18 4E 05 F1 | 	add	fp, #24
32134     A7 FA 61 FC | 	wrlong	result1, fp
32138                 | ' 
32138                 | ' 	res = mount_volume(&path, &fs, 0);
32138                 | ' 	return res ;
32138     18 4E 85 F1 | 	sub	fp, #24
3213c                 | LR__4901
3213c     A7 F0 03 F6 | 	mov	ptra, fp
32140     B2 00 A0 FD | 	call	#popregs_
32144                 | _fatfs_cc_f_mount_ret
32144     2D 00 64 FD | 	ret
32148                 | 
32148                 | _fatfs_cc_f_open
32148     02 4A 05 F6 | 	mov	COUNT_, #2
3214c     A8 00 A0 FD | 	call	#pushregs_
32150     60 F0 07 F1 | 	add	ptra, #96
32154     04 4E 05 F1 | 	add	fp, #4
32158     A7 12 62 FC | 	wrlong	arg01, fp
3215c     04 4E 05 F1 | 	add	fp, #4
32160     A7 14 62 FC | 	wrlong	arg02, fp
32164     04 4E 05 F1 | 	add	fp, #4
32168     A7 16 42 FC | 	wrbyte	arg03, fp
3216c     08 4E 85 F1 | 	sub	fp, #8
32170     A7 18 0A FB | 	rdlong	arg04, fp wz
32174     04 4E 85 F1 | 	sub	fp, #4
32178     09 FA 05 A6 |  if_e	mov	result1, #9
3217c     98 06 90 AD |  if_e	jmp	#LR__4927
32180     0C 4E 05 F1 | 	add	fp, #12
32184     A7 18 C2 FA | 	rdbyte	arg04, fp
32188     3F 18 06 F5 | 	and	arg04, #63
3218c     A7 18 42 FC | 	wrbyte	arg04, fp
32190     04 4E 85 F1 | 	sub	fp, #4
32194     A7 12 02 F6 | 	mov	arg01, fp
32198     3C 4E 05 F1 | 	add	fp, #60
3219c     A7 14 02 F6 | 	mov	arg02, fp
321a0     38 4E 85 F1 | 	sub	fp, #56
321a4     A7 16 C2 FA | 	rdbyte	arg03, fp
321a8     0C 4E 85 F1 | 	sub	fp, #12
321ac     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
321b0     10 4E 05 F1 | 	add	fp, #16
321b4     A7 FA 61 FC | 	wrlong	result1, fp
321b8     10 4E 85 F1 | 	sub	fp, #16
321bc     00 FA 0D F2 | 	cmp	result1, #0 wz
321c0     2C 06 90 5D |  if_ne	jmp	#LR__4926
321c4     44 4E 05 F1 | 	add	fp, #68
321c8     A7 18 02 FB | 	rdlong	arg04, fp
321cc     30 4E 85 F1 | 	sub	fp, #48
321d0     A7 18 62 FC | 	wrlong	arg04, fp
321d4     A7 12 02 F6 | 	mov	arg01, fp
321d8     0C 4E 85 F1 | 	sub	fp, #12
321dc     A7 26 02 FB | 	rdlong	local01, fp
321e0     08 4E 85 F1 | 	sub	fp, #8
321e4     13 15 02 F6 | 	mov	arg02, local01
321e8     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
321ec     10 4E 05 F1 | 	add	fp, #16
321f0     A7 FA 61 FC | 	wrlong	result1, fp
321f4     10 4E 85 F1 | 	sub	fp, #16
321f8     00 FA 0D F2 | 	cmp	result1, #0 wz
321fc     1C 00 90 5D |  if_ne	jmp	#LR__4910
32200     3F 4E 05 F1 | 	add	fp, #63
32204     A7 18 C2 FA | 	rdbyte	arg04, fp
32208     3F 4E 85 F1 | 	sub	fp, #63
3220c     80 18 CE F7 | 	test	arg04, #128 wz
32210     10 4E 05 51 |  if_ne	add	fp, #16
32214     A7 0C 68 5C |  if_ne	wrlong	#6, fp
32218     10 4E 85 51 |  if_ne	sub	fp, #16
3221c                 | LR__4910
3221c     0C 4E 05 F1 | 	add	fp, #12
32220     A7 18 C2 FA | 	rdbyte	arg04, fp
32224     0C 4E 85 F1 | 	sub	fp, #12
32228     1C 18 CE F7 | 	test	arg04, #28 wz
3222c     F0 01 90 AD |  if_e	jmp	#LR__4915
32230     10 4E 05 F1 | 	add	fp, #16
32234     A7 26 0A FB | 	rdlong	local01, fp wz
32238     10 4E 85 F1 | 	sub	fp, #16
3223c     48 00 90 AD |  if_e	jmp	#LR__4912
32240     10 4E 05 F1 | 	add	fp, #16
32244     A7 18 02 FB | 	rdlong	arg04, fp
32248     10 4E 85 F1 | 	sub	fp, #16
3224c     04 18 0E F2 | 	cmp	arg04, #4 wz
32250     1C 00 90 5D |  if_ne	jmp	#LR__4911
32254     14 4E 05 F1 | 	add	fp, #20
32258     A7 12 02 F6 | 	mov	arg01, fp
3225c     14 4E 85 F1 | 	sub	fp, #20
32260     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
32264     10 4E 05 F1 | 	add	fp, #16
32268     A7 FA 61 FC | 	wrlong	result1, fp
3226c     10 4E 85 F1 | 	sub	fp, #16
32270                 | LR__4911
32270     0C 4E 05 F1 | 	add	fp, #12
32274     A7 26 C2 FA | 	rdbyte	local01, fp
32278     08 26 46 F5 | 	or	local01, #8
3227c     A7 26 42 FC | 	wrbyte	local01, fp
32280     0C 4E 85 F1 | 	sub	fp, #12
32284     3C 00 90 FD | 	jmp	#LR__4914
32288                 | LR__4912
32288     1A 4E 05 F1 | 	add	fp, #26
3228c     A7 26 C2 FA | 	rdbyte	local01, fp
32290     1A 4E 85 F1 | 	sub	fp, #26
32294     11 26 CE F7 | 	test	local01, #17 wz
32298     10 4E 05 51 |  if_ne	add	fp, #16
3229c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
322a0     10 4E 85 51 |  if_ne	sub	fp, #16
322a4     1C 00 90 5D |  if_ne	jmp	#LR__4913
322a8     0C 4E 05 F1 | 	add	fp, #12
322ac     A7 26 C2 FA | 	rdbyte	local01, fp
322b0     0C 4E 85 F1 | 	sub	fp, #12
322b4     04 26 CE F7 | 	test	local01, #4 wz
322b8     10 4E 05 51 |  if_ne	add	fp, #16
322bc     A7 10 68 5C |  if_ne	wrlong	#8, fp
322c0     10 4E 85 51 |  if_ne	sub	fp, #16
322c4                 | LR__4913
322c4                 | LR__4914
322c4     10 4E 05 F1 | 	add	fp, #16
322c8     A7 26 0A FB | 	rdlong	local01, fp wz
322cc     10 4E 85 F1 | 	sub	fp, #16
322d0     A8 01 90 5D |  if_ne	jmp	#LR__4918
322d4     0C 4E 05 F1 | 	add	fp, #12
322d8     A7 26 C2 FA | 	rdbyte	local01, fp
322dc     0C 4E 85 F1 | 	sub	fp, #12
322e0     08 26 CE F7 | 	test	local01, #8 wz
322e4     94 01 90 AD |  if_e	jmp	#LR__4918
322e8     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
322ec     54 4E 05 F1 | 	add	fp, #84
322f0     A7 FA 61 FC | 	wrlong	result1, fp
322f4     24 4E 85 F1 | 	sub	fp, #36
322f8     A7 12 02 FB | 	rdlong	arg01, fp
322fc     0E 12 06 F1 | 	add	arg01, #14
32300     09 FB 61 FC | 	wrlong	result1, arg01
32304     A7 12 02 FB | 	rdlong	arg01, fp
32308     16 12 06 F1 | 	add	arg01, #22
3230c     24 4E 05 F1 | 	add	fp, #36
32310     A7 14 02 FB | 	rdlong	arg02, fp
32314     09 15 62 FC | 	wrlong	arg02, arg01
32318     10 4E 85 F1 | 	sub	fp, #16
3231c     A7 12 02 FB | 	rdlong	arg01, fp
32320     14 4E 85 F1 | 	sub	fp, #20
32324     A7 14 02 FB | 	rdlong	arg02, fp
32328     30 4E 85 F1 | 	sub	fp, #48
3232c     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
32330     48 4E 05 F1 | 	add	fp, #72
32334     A7 FA 61 FC | 	wrlong	result1, fp
32338     18 4E 85 F1 | 	sub	fp, #24
3233c     A7 26 02 FB | 	rdlong	local01, fp
32340     0B 26 06 F1 | 	add	local01, #11
32344     13 41 48 FC | 	wrbyte	#32, local01
32348     14 4E 05 F1 | 	add	fp, #20
3234c     A7 12 02 FB | 	rdlong	arg01, fp
32350     14 4E 85 F1 | 	sub	fp, #20
32354     A7 14 02 FB | 	rdlong	arg02, fp
32358     30 4E 85 F1 | 	sub	fp, #48
3235c     00 16 06 F6 | 	mov	arg03, #0
32360     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
32364     30 4E 05 F1 | 	add	fp, #48
32368     A7 12 02 FB | 	rdlong	arg01, fp
3236c     1C 12 06 F1 | 	add	arg01, #28
32370     09 01 68 FC | 	wrlong	#0, arg01
32374     14 4E 05 F1 | 	add	fp, #20
32378     A7 26 02 FB | 	rdlong	local01, fp
3237c     03 26 06 F1 | 	add	local01, #3
32380     13 03 48 FC | 	wrbyte	#1, local01
32384     04 4E 05 F1 | 	add	fp, #4
32388     A7 26 0A FB | 	rdlong	local01, fp wz
3238c     48 4E 85 F1 | 	sub	fp, #72
32390     E8 00 90 AD |  if_e	jmp	#LR__4918
32394     44 4E 05 F1 | 	add	fp, #68
32398     A7 26 02 FB | 	rdlong	local01, fp
3239c     30 26 06 F1 | 	add	local01, #48
323a0     13 27 02 FB | 	rdlong	local01, local01
323a4     14 4E 05 F1 | 	add	fp, #20
323a8     A7 26 62 FC | 	wrlong	local01, fp
323ac     44 4E 85 F1 | 	sub	fp, #68
323b0     A7 12 02 F6 | 	mov	arg01, fp
323b4     34 4E 05 F1 | 	add	fp, #52
323b8     A7 14 02 FB | 	rdlong	arg02, fp
323bc     48 4E 85 F1 | 	sub	fp, #72
323c0     00 16 06 F6 | 	mov	arg03, #0
323c4     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
323c8     10 4E 05 F1 | 	add	fp, #16
323cc     A7 FA 61 FC | 	wrlong	result1, fp
323d0     10 4E 85 F1 | 	sub	fp, #16
323d4     00 FA 0D F2 | 	cmp	result1, #0 wz
323d8     A0 00 90 5D |  if_ne	jmp	#LR__4918
323dc     44 4E 05 F1 | 	add	fp, #68
323e0     A7 12 02 FB | 	rdlong	arg01, fp
323e4     14 4E 05 F1 | 	add	fp, #20
323e8     A7 14 02 FB | 	rdlong	arg02, fp
323ec     58 4E 85 F1 | 	sub	fp, #88
323f0     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
323f4     10 4E 05 F1 | 	add	fp, #16
323f8     A7 FA 61 FC | 	wrlong	result1, fp
323fc     34 4E 05 F1 | 	add	fp, #52
32400     A7 18 02 FB | 	rdlong	arg04, fp
32404     04 4E 05 F1 | 	add	fp, #4
32408     A7 26 02 FB | 	rdlong	local01, fp
3240c     48 4E 85 F1 | 	sub	fp, #72
32410     01 26 86 F1 | 	sub	local01, #1
32414     10 18 06 F1 | 	add	arg04, #16
32418     0C 27 62 FC | 	wrlong	local01, arg04
3241c     5C 00 90 FD | 	jmp	#LR__4918
32420                 | LR__4915
32420     10 4E 05 F1 | 	add	fp, #16
32424     A7 18 0A FB | 	rdlong	arg04, fp wz
32428     10 4E 85 F1 | 	sub	fp, #16
3242c     4C 00 90 5D |  if_ne	jmp	#LR__4917
32430     1A 4E 05 F1 | 	add	fp, #26
32434     A7 18 C2 FA | 	rdbyte	arg04, fp
32438     1A 4E 85 F1 | 	sub	fp, #26
3243c     10 18 CE F7 | 	test	arg04, #16 wz
32440     10 4E 05 51 |  if_ne	add	fp, #16
32444     A7 08 68 5C |  if_ne	wrlong	#4, fp
32448     10 4E 85 51 |  if_ne	sub	fp, #16
3244c     2C 00 90 5D |  if_ne	jmp	#LR__4916
32450     0C 4E 05 F1 | 	add	fp, #12
32454     A7 18 C2 FA | 	rdbyte	arg04, fp
32458     0C 4E 85 F1 | 	sub	fp, #12
3245c     02 18 CE F7 | 	test	arg04, #2 wz
32460     1A 4E 05 51 |  if_ne	add	fp, #26
32464     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
32468     1A 4E 85 51 |  if_ne	sub	fp, #26
3246c     01 26 CE 57 |  if_ne	test	local01, #1 wz
32470     10 4E 05 51 |  if_ne	add	fp, #16
32474     A7 0E 68 5C |  if_ne	wrlong	#7, fp
32478     10 4E 85 51 |  if_ne	sub	fp, #16
3247c                 | LR__4916
3247c                 | LR__4917
3247c                 | LR__4918
3247c     10 4E 05 F1 | 	add	fp, #16
32480     A7 26 0A FB | 	rdlong	local01, fp wz
32484     10 4E 85 F1 | 	sub	fp, #16
32488     60 00 90 5D |  if_ne	jmp	#LR__4919
3248c     0C 4E 05 F1 | 	add	fp, #12
32490     A7 28 C2 FA | 	rdbyte	local02, fp
32494     0C 4E 85 F1 | 	sub	fp, #12
32498     08 28 CE F7 | 	test	local02, #8 wz
3249c     0C 4E 05 51 |  if_ne	add	fp, #12
324a0     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
324a4     40 28 46 55 |  if_ne	or	local02, #64
324a8     A7 28 42 5C |  if_ne	wrbyte	local02, fp
324ac     0C 4E 85 51 |  if_ne	sub	fp, #12
324b0     04 4E 05 F1 | 	add	fp, #4
324b4     A7 28 02 FB | 	rdlong	local02, fp
324b8     40 4E 05 F1 | 	add	fp, #64
324bc     A7 26 02 FB | 	rdlong	local01, fp
324c0     30 26 06 F1 | 	add	local01, #48
324c4     13 27 02 FB | 	rdlong	local01, local01
324c8     20 28 06 F1 | 	add	local02, #32
324cc     14 27 62 FC | 	wrlong	local01, local02
324d0     40 4E 85 F1 | 	sub	fp, #64
324d4     A7 28 02 FB | 	rdlong	local02, fp
324d8     2C 4E 05 F1 | 	add	fp, #44
324dc     A7 26 02 FB | 	rdlong	local01, fp
324e0     30 4E 85 F1 | 	sub	fp, #48
324e4     24 28 06 F1 | 	add	local02, #36
324e8     14 27 62 FC | 	wrlong	local01, local02
324ec                 | LR__4919
324ec     10 4E 05 F1 | 	add	fp, #16
324f0     A7 28 0A FB | 	rdlong	local02, fp wz
324f4     10 4E 85 F1 | 	sub	fp, #16
324f8     F4 02 90 5D |  if_ne	jmp	#LR__4925
324fc     04 4E 05 F1 | 	add	fp, #4
32500     A7 28 02 FB | 	rdlong	local02, fp
32504     40 4E 05 F1 | 	add	fp, #64
32508     A7 12 02 FB | 	rdlong	arg01, fp
3250c     14 4E 85 F1 | 	sub	fp, #20
32510     A7 14 02 FB | 	rdlong	arg02, fp
32514     30 4E 85 F1 | 	sub	fp, #48
32518     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
3251c     08 28 06 F1 | 	add	local02, #8
32520     14 FB 61 FC | 	wrlong	result1, local02
32524     04 4E 05 F1 | 	add	fp, #4
32528     A7 28 02 FB | 	rdlong	local02, fp
3252c     2C 4E 05 F1 | 	add	fp, #44
32530     A7 12 02 FB | 	rdlong	arg01, fp
32534     1C 12 06 F1 | 	add	arg01, #28
32538                 | ' {
32538                 | ' 
32538                 | ' 	return *((DWORD*)ptr);
32538     09 FB 01 FB | 	rdlong	result1, arg01
3253c     0C 28 06 F1 | 	add	local02, #12
32540     14 FB 61 FC | 	wrlong	result1, local02
32544     2C 4E 85 F1 | 	sub	fp, #44
32548     A7 28 02 FB | 	rdlong	local02, fp
3254c     40 4E 05 F1 | 	add	fp, #64
32550     A7 26 02 FB | 	rdlong	local01, fp
32554     14 27 62 FC | 	wrlong	local01, local02
32558     40 4E 85 F1 | 	sub	fp, #64
3255c     A7 28 02 FB | 	rdlong	local02, fp
32560     40 4E 05 F1 | 	add	fp, #64
32564     A7 26 02 FB | 	rdlong	local01, fp
32568     06 26 06 F1 | 	add	local01, #6
3256c     13 27 E2 FA | 	rdword	local01, local01
32570     04 28 06 F1 | 	add	local02, #4
32574     14 27 52 FC | 	wrword	local01, local02
32578     40 4E 85 F1 | 	sub	fp, #64
3257c     A7 28 02 FB | 	rdlong	local02, fp
32580     08 4E 05 F1 | 	add	fp, #8
32584     A7 26 C2 FA | 	rdbyte	local01, fp
32588     10 28 06 F1 | 	add	local02, #16
3258c     14 27 42 FC | 	wrbyte	local01, local02
32590     08 4E 85 F1 | 	sub	fp, #8
32594     A7 28 02 FB | 	rdlong	local02, fp
32598     11 28 06 F1 | 	add	local02, #17
3259c     14 01 48 FC | 	wrbyte	#0, local02
325a0     A7 28 02 FB | 	rdlong	local02, fp
325a4     1C 28 06 F1 | 	add	local02, #28
325a8     14 01 68 FC | 	wrlong	#0, local02
325ac     A7 28 02 FB | 	rdlong	local02, fp
325b0     14 28 06 F1 | 	add	local02, #20
325b4     14 01 68 FC | 	wrlong	#0, local02
325b8     A7 12 02 FB | 	rdlong	arg01, fp
325bc     04 4E 85 F1 | 	sub	fp, #4
325c0     28 12 06 F1 | 	add	arg01, #40
325c4     00 14 06 F6 | 	mov	arg02, #0
325c8     09 16 C6 F9 | 	decod	arg03, #9
325cc     98 00 A0 FD | 	call	#\builtin_bytefill_
325d0     0C 4E 05 F1 | 	add	fp, #12
325d4     A7 28 C2 FA | 	rdbyte	local02, fp
325d8     0C 4E 85 F1 | 	sub	fp, #12
325dc     20 28 CE F7 | 	test	local02, #32 wz
325e0     0C 02 90 AD |  if_e	jmp	#LR__4924
325e4     04 4E 05 F1 | 	add	fp, #4
325e8     A7 26 02 FB | 	rdlong	local01, fp
325ec     04 4E 85 F1 | 	sub	fp, #4
325f0     0C 26 06 F1 | 	add	local01, #12
325f4     13 29 02 FB | 	rdlong	local02, local01
325f8     01 28 16 F2 | 	cmp	local02, #1 wc
325fc     F0 01 90 CD |  if_b	jmp	#LR__4924
32600     04 4E 05 F1 | 	add	fp, #4
32604     A7 26 02 FB | 	rdlong	local01, fp
32608     13 29 02 F6 | 	mov	local02, local01
3260c     0C 26 06 F1 | 	add	local01, #12
32610     13 27 02 FB | 	rdlong	local01, local01
32614     14 28 06 F1 | 	add	local02, #20
32618     14 27 62 FC | 	wrlong	local01, local02
3261c     40 4E 05 F1 | 	add	fp, #64
32620     A7 28 02 FB | 	rdlong	local02, fp
32624     0A 28 06 F1 | 	add	local02, #10
32628     14 29 E2 FA | 	rdword	local02, local02
3262c     09 28 66 F0 | 	shl	local02, #9
32630     08 4E 05 F1 | 	add	fp, #8
32634     A7 28 62 FC | 	wrlong	local02, fp
32638     48 4E 85 F1 | 	sub	fp, #72
3263c     A7 28 02 FB | 	rdlong	local02, fp
32640     08 28 06 F1 | 	add	local02, #8
32644     14 27 02 FB | 	rdlong	local01, local02
32648     4C 4E 05 F1 | 	add	fp, #76
3264c     A7 26 62 FC | 	wrlong	local01, fp
32650                 | ' 				fp->fptr = fp->obj.objsize;
32650                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
32650                 | ' 				clst = fp->obj.sclust;
32650                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
32650     4C 4E 85 F1 | 	sub	fp, #76
32654     A7 28 02 FB | 	rdlong	local02, fp
32658     0C 28 06 F1 | 	add	local02, #12
3265c     14 27 02 FB | 	rdlong	local01, local02
32660     58 4E 05 F1 | 	add	fp, #88
32664     A7 26 62 FC | 	wrlong	local01, fp
32668     5C 4E 85 F1 | 	sub	fp, #92
3266c                 | LR__4920
3266c     10 4E 05 F1 | 	add	fp, #16
32670     A7 28 0A FB | 	rdlong	local02, fp wz
32674     10 4E 85 F1 | 	sub	fp, #16
32678     94 00 90 5D |  if_ne	jmp	#LR__4921
3267c     5C 4E 05 F1 | 	add	fp, #92
32680     A7 28 02 FB | 	rdlong	local02, fp
32684     10 4E 85 F1 | 	sub	fp, #16
32688     A7 26 02 FB | 	rdlong	local01, fp
3268c     4C 4E 85 F1 | 	sub	fp, #76
32690     13 29 1A F2 | 	cmp	local02, local01 wcz
32694     78 00 90 ED |  if_be	jmp	#LR__4921
32698     04 4E 05 F1 | 	add	fp, #4
3269c     A7 12 02 FB | 	rdlong	arg01, fp
326a0     4C 4E 05 F1 | 	add	fp, #76
326a4     A7 14 02 FB | 	rdlong	arg02, fp
326a8     50 4E 85 F1 | 	sub	fp, #80
326ac     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
326b0     50 4E 05 F1 | 	add	fp, #80
326b4     A7 FA 61 FC | 	wrlong	result1, fp
326b8     50 4E 85 F1 | 	sub	fp, #80
326bc     02 FA 15 F2 | 	cmp	result1, #2 wc
326c0     10 4E 05 C1 |  if_b	add	fp, #16
326c4     A7 04 68 CC |  if_b	wrlong	#2, fp
326c8     10 4E 85 C1 |  if_b	sub	fp, #16
326cc     50 4E 05 F1 | 	add	fp, #80
326d0     A7 28 02 FB | 	rdlong	local02, fp
326d4     50 4E 85 F1 | 	sub	fp, #80
326d8     FF FF 7F FF 
326dc     FF 29 0E F2 | 	cmp	local02, ##-1 wz
326e0     10 4E 05 A1 |  if_e	add	fp, #16
326e4     A7 02 68 AC |  if_e	wrlong	#1, fp
326e8     10 4E 85 A1 |  if_e	sub	fp, #16
326ec     5C 4E 05 F1 | 	add	fp, #92
326f0     A7 28 02 FB | 	rdlong	local02, fp
326f4     10 4E 85 F1 | 	sub	fp, #16
326f8     A7 26 02 FB | 	rdlong	local01, fp
326fc     13 29 82 F1 | 	sub	local02, local01
32700     10 4E 05 F1 | 	add	fp, #16
32704     A7 28 62 FC | 	wrlong	local02, fp
32708     5C 4E 85 F1 | 	sub	fp, #92
3270c     5C FF 9F FD | 	jmp	#LR__4920
32710                 | LR__4921
32710     04 4E 05 F1 | 	add	fp, #4
32714     A7 28 02 FB | 	rdlong	local02, fp
32718     4C 4E 05 F1 | 	add	fp, #76
3271c     A7 26 02 FB | 	rdlong	local01, fp
32720     18 28 06 F1 | 	add	local02, #24
32724     14 27 62 FC | 	wrlong	local01, local02
32728     40 4E 85 F1 | 	sub	fp, #64
3272c     A7 28 0A FB | 	rdlong	local02, fp wz
32730     10 4E 85 F1 | 	sub	fp, #16
32734     B8 00 90 5D |  if_ne	jmp	#LR__4923
32738     5C 4E 05 F1 | 	add	fp, #92
3273c     A7 26 02 FB | 	rdlong	local01, fp
32740     5C 4E 85 F1 | 	sub	fp, #92
32744     FF 27 CE F7 | 	test	local01, #511 wz
32748     A4 00 90 AD |  if_e	jmp	#LR__4923
3274c     44 4E 05 F1 | 	add	fp, #68
32750     A7 12 02 FB | 	rdlong	arg01, fp
32754     0C 4E 05 F1 | 	add	fp, #12
32758     A7 14 02 FB | 	rdlong	arg02, fp
3275c     50 4E 85 F1 | 	sub	fp, #80
32760     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
32764     58 4E 05 F1 | 	add	fp, #88
32768     A7 FA 61 FC | 	wrlong	result1, fp
3276c     00 FA 4D F2 | 	cmps	result1, #0 wz
32770     58 4E 85 F1 | 	sub	fp, #88
32774     10 4E 05 A1 |  if_e	add	fp, #16
32778     A7 04 68 AC |  if_e	wrlong	#2, fp
3277c     10 4E 85 A1 |  if_e	sub	fp, #16
32780     6C 00 90 AD |  if_e	jmp	#LR__4922
32784     04 4E 05 F1 | 	add	fp, #4
32788     A7 28 02 FB | 	rdlong	local02, fp
3278c     54 4E 05 F1 | 	add	fp, #84
32790     A7 26 02 FB | 	rdlong	local01, fp
32794     04 4E 05 F1 | 	add	fp, #4
32798     A7 18 02 FB | 	rdlong	arg04, fp
3279c     09 18 46 F0 | 	shr	arg04, #9
327a0     0C 27 02 F1 | 	add	local01, arg04
327a4     1C 28 06 F1 | 	add	local02, #28
327a8     14 27 62 FC | 	wrlong	local01, local02
327ac     18 4E 85 F1 | 	sub	fp, #24
327b0     A7 28 02 FB | 	rdlong	local02, fp
327b4     01 28 06 F1 | 	add	local02, #1
327b8     14 13 C2 FA | 	rdbyte	arg01, local02
327bc     40 4E 85 F1 | 	sub	fp, #64
327c0     A7 28 02 FB | 	rdlong	local02, fp
327c4     14 15 02 F6 | 	mov	arg02, local02
327c8     28 14 06 F1 | 	add	arg02, #40
327cc     04 4E 85 F1 | 	sub	fp, #4
327d0     1C 28 06 F1 | 	add	local02, #28
327d4     14 17 02 FB | 	rdlong	arg03, local02
327d8     01 18 06 F6 | 	mov	arg04, #1
327dc     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
327e0     00 FA 0D F2 | 	cmp	result1, #0 wz
327e4     10 4E 05 51 |  if_ne	add	fp, #16
327e8     A7 02 68 5C |  if_ne	wrlong	#1, fp
327ec     10 4E 85 51 |  if_ne	sub	fp, #16
327f0                 | LR__4922
327f0                 | LR__4923
327f0                 | LR__4924
327f0                 | LR__4925
327f0                 | LR__4926
327f0     10 4E 05 F1 | 	add	fp, #16
327f4     A7 28 0A FB | 	rdlong	local02, fp wz
327f8     10 4E 85 F1 | 	sub	fp, #16
327fc     04 4E 05 51 |  if_ne	add	fp, #4
32800     A7 28 02 5B |  if_ne	rdlong	local02, fp
32804     04 4E 85 51 |  if_ne	sub	fp, #4
32808     14 01 68 5C |  if_ne	wrlong	#0, local02
3280c                 | ' 
3280c                 | ' 	return res ;
3280c     10 4E 05 F1 | 	add	fp, #16
32810     A7 FA 01 FB | 	rdlong	result1, fp
32814     10 4E 85 F1 | 	sub	fp, #16
32818                 | LR__4927
32818     A7 F0 03 F6 | 	mov	ptra, fp
3281c     B2 00 A0 FD | 	call	#popregs_
32820                 | _fatfs_cc_f_open_ret
32820     2D 00 64 FD | 	ret
32824                 | 
32824                 | _fatfs_cc_f_read
32824     0E 4A 05 F6 | 	mov	COUNT_, #14
32828     A8 00 A0 FD | 	call	#pushregs_
3282c     38 F0 07 F1 | 	add	ptra, #56
32830     04 4E 05 F1 | 	add	fp, #4
32834     A7 12 62 FC | 	wrlong	arg01, fp
32838     04 4E 05 F1 | 	add	fp, #4
3283c     A7 14 62 FC | 	wrlong	arg02, fp
32840     04 4E 05 F1 | 	add	fp, #4
32844     A7 16 62 FC | 	wrlong	arg03, fp
32848     04 4E 05 F1 | 	add	fp, #4
3284c     A7 18 62 FC | 	wrlong	arg04, fp
32850     08 4E 85 F1 | 	sub	fp, #8
32854     A7 FA 01 FB | 	rdlong	result1, fp
32858     2C 4E 05 F1 | 	add	fp, #44
3285c     A7 FA 61 FC | 	wrlong	result1, fp
32860     24 4E 85 F1 | 	sub	fp, #36
32864     A7 FA 01 FB | 	rdlong	result1, fp
32868     FD 00 68 FC | 	wrlong	#0, result1
3286c     0C 4E 85 F1 | 	sub	fp, #12
32870     A7 12 02 FB | 	rdlong	arg01, fp
32874     14 4E 05 F1 | 	add	fp, #20
32878     A7 14 02 F6 | 	mov	arg02, fp
3287c     18 4E 85 F1 | 	sub	fp, #24
32880     24 F7 BF FD | 	call	#_fatfs_cc_validate
32884     14 4E 05 F1 | 	add	fp, #20
32888     A7 FA 61 FC | 	wrlong	result1, fp
3288c     00 FA 4D F2 | 	cmps	result1, #0 wz
32890     14 4E 85 F1 | 	sub	fp, #20
32894     20 00 90 5D |  if_ne	jmp	#LR__4930
32898     04 4E 05 F1 | 	add	fp, #4
3289c     A7 14 02 FB | 	rdlong	arg02, fp
328a0     11 14 06 F1 | 	add	arg02, #17
328a4     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
328a8     10 4E 05 F1 | 	add	fp, #16
328ac     A7 14 62 FC | 	wrlong	arg02, fp
328b0     14 4E 85 F1 | 	sub	fp, #20
328b4     10 00 90 AD |  if_e	jmp	#LR__4931
328b8                 | LR__4930
328b8     14 4E 05 F1 | 	add	fp, #20
328bc     A7 FA 01 FB | 	rdlong	result1, fp
328c0     14 4E 85 F1 | 	sub	fp, #20
328c4     EC 05 90 FD | 	jmp	#LR__4950
328c8                 | LR__4931
328c8     04 4E 05 F1 | 	add	fp, #4
328cc     A7 18 02 FB | 	rdlong	arg04, fp
328d0     04 4E 85 F1 | 	sub	fp, #4
328d4     10 18 06 F1 | 	add	arg04, #16
328d8     0C 19 C2 FA | 	rdbyte	arg04, arg04
328dc     01 18 CE F7 | 	test	arg04, #1 wz
328e0     07 FA 05 A6 |  if_e	mov	result1, #7
328e4     CC 05 90 AD |  if_e	jmp	#LR__4950
328e8     04 4E 05 F1 | 	add	fp, #4
328ec     A7 26 02 FB | 	rdlong	local01, fp
328f0     13 29 02 F6 | 	mov	local02, local01
328f4     0C 28 06 F1 | 	add	local02, #12
328f8     14 2B 02 FB | 	rdlong	local03, local02
328fc     14 26 06 F1 | 	add	local01, #20
32900     13 27 02 FB | 	rdlong	local01, local01
32904     13 2B 82 F1 | 	sub	local03, local01
32908     20 4E 05 F1 | 	add	fp, #32
3290c     A7 2A 62 FC | 	wrlong	local03, fp
32910     18 4E 85 F1 | 	sub	fp, #24
32914     A7 2C 02 FB | 	rdlong	local04, fp
32918     0C 4E 85 F1 | 	sub	fp, #12
3291c     15 2D 1A F2 | 	cmp	local04, local03 wcz
32920     24 4E 05 11 |  if_a	add	fp, #36
32924     A7 2C 02 1B |  if_a	rdlong	local04, fp
32928     18 4E 85 11 |  if_a	sub	fp, #24
3292c     A7 2C 62 1C |  if_a	wrlong	local04, fp
32930     0C 4E 85 11 |  if_a	sub	fp, #12
32934                 | ' 
32934                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
32934                 | LR__4932
32934     0C 4E 05 F1 | 	add	fp, #12
32938     A7 28 02 FB | 	rdlong	local02, fp
3293c     0C 4E 85 F1 | 	sub	fp, #12
32940     14 2D 02 F6 | 	mov	local04, local02
32944     01 2C 16 F2 | 	cmp	local04, #1 wc
32948     64 05 90 CD |  if_b	jmp	#LR__4949
3294c     04 4E 05 F1 | 	add	fp, #4
32950     A7 2A 02 FB | 	rdlong	local03, fp
32954     04 4E 85 F1 | 	sub	fp, #4
32958     14 2A 06 F1 | 	add	local03, #20
3295c     15 2B 02 FB | 	rdlong	local03, local03
32960     FF 2B CE F7 | 	test	local03, #511 wz
32964     3C 04 90 5D |  if_ne	jmp	#LR__4947
32968     04 4E 05 F1 | 	add	fp, #4
3296c     A7 26 02 FB | 	rdlong	local01, fp
32970     14 26 06 F1 | 	add	local01, #20
32974     13 2B 02 FB | 	rdlong	local03, local01
32978     09 2A 46 F0 | 	shr	local03, #9
3297c     14 4E 05 F1 | 	add	fp, #20
32980     A7 2E 02 FB | 	rdlong	local05, fp
32984     17 31 02 F6 | 	mov	local06, local05
32988     0A 30 06 F1 | 	add	local06, #10
3298c     18 33 E2 FA | 	rdword	local07, local06
32990     0A 30 86 F1 | 	sub	local06, #10
32994     19 35 32 F9 | 	getword	local08, local07, #0
32998     01 34 86 F1 | 	sub	local08, #1
3299c     1A 2B 0A F5 | 	and	local03, local08 wz
329a0     18 4E 05 F1 | 	add	fp, #24
329a4     A7 2A 62 FC | 	wrlong	local03, fp
329a8     30 4E 85 F1 | 	sub	fp, #48
329ac     E0 00 90 5D |  if_ne	jmp	#LR__4937
329b0     04 4E 05 F1 | 	add	fp, #4
329b4     A7 2A 02 FB | 	rdlong	local03, fp
329b8     04 4E 85 F1 | 	sub	fp, #4
329bc     14 2A 06 F1 | 	add	local03, #20
329c0     15 2B 0A FB | 	rdlong	local03, local03 wz
329c4     20 00 90 5D |  if_ne	jmp	#LR__4933
329c8     04 4E 05 F1 | 	add	fp, #4
329cc     A7 2A 02 FB | 	rdlong	local03, fp
329d0     08 2A 06 F1 | 	add	local03, #8
329d4     15 2B 02 FB | 	rdlong	local03, local03
329d8     18 4E 05 F1 | 	add	fp, #24
329dc     A7 2A 62 FC | 	wrlong	local03, fp
329e0     1C 4E 85 F1 | 	sub	fp, #28
329e4     28 00 90 FD | 	jmp	#LR__4934
329e8                 | LR__4933
329e8     04 4E 05 F1 | 	add	fp, #4
329ec     A7 34 02 FB | 	rdlong	local08, fp
329f0     1A 13 02 F6 | 	mov	arg01, local08
329f4     04 4E 85 F1 | 	sub	fp, #4
329f8     18 34 06 F1 | 	add	local08, #24
329fc     1A 15 02 FB | 	rdlong	arg02, local08
32a00     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
32a04     1C 4E 05 F1 | 	add	fp, #28
32a08     A7 FA 61 FC | 	wrlong	result1, fp
32a0c     1C 4E 85 F1 | 	sub	fp, #28
32a10                 | LR__4934
32a10     1C 4E 05 F1 | 	add	fp, #28
32a14     A7 2A 02 FB | 	rdlong	local03, fp
32a18     1C 4E 85 F1 | 	sub	fp, #28
32a1c     02 2A 16 F2 | 	cmp	local03, #2 wc
32a20     1C 00 90 3D |  if_ae	jmp	#LR__4935
32a24     04 4E 05 F1 | 	add	fp, #4
32a28     A7 2A 02 FB | 	rdlong	local03, fp
32a2c     04 4E 85 F1 | 	sub	fp, #4
32a30     11 2A 06 F1 | 	add	local03, #17
32a34     15 05 48 FC | 	wrbyte	#2, local03
32a38     02 FA 05 F6 | 	mov	result1, #2
32a3c     74 04 90 FD | 	jmp	#LR__4950
32a40                 | LR__4935
32a40     1C 4E 05 F1 | 	add	fp, #28
32a44     A7 2A 02 FB | 	rdlong	local03, fp
32a48     1C 4E 85 F1 | 	sub	fp, #28
32a4c     FF FF 7F FF 
32a50     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
32a54     1C 00 90 5D |  if_ne	jmp	#LR__4936
32a58     04 4E 05 F1 | 	add	fp, #4
32a5c     A7 2A 02 FB | 	rdlong	local03, fp
32a60     04 4E 85 F1 | 	sub	fp, #4
32a64     11 2A 06 F1 | 	add	local03, #17
32a68     15 03 48 FC | 	wrbyte	#1, local03
32a6c     01 FA 05 F6 | 	mov	result1, #1
32a70     40 04 90 FD | 	jmp	#LR__4950
32a74                 | LR__4936
32a74     04 4E 05 F1 | 	add	fp, #4
32a78     A7 2A 02 FB | 	rdlong	local03, fp
32a7c     18 4E 05 F1 | 	add	fp, #24
32a80     A7 34 02 FB | 	rdlong	local08, fp
32a84     1C 4E 85 F1 | 	sub	fp, #28
32a88     18 2A 06 F1 | 	add	local03, #24
32a8c     15 35 62 FC | 	wrlong	local08, local03
32a90                 | LR__4937
32a90     18 4E 05 F1 | 	add	fp, #24
32a94     A7 12 02 FB | 	rdlong	arg01, fp
32a98     14 4E 85 F1 | 	sub	fp, #20
32a9c     A7 2A 02 FB | 	rdlong	local03, fp
32aa0     04 4E 85 F1 | 	sub	fp, #4
32aa4     18 2A 06 F1 | 	add	local03, #24
32aa8     15 15 02 FB | 	rdlong	arg02, local03
32aac     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
32ab0     20 4E 05 F1 | 	add	fp, #32
32ab4     A7 FA 61 FC | 	wrlong	result1, fp
32ab8     20 4E 85 F1 | 	sub	fp, #32
32abc     00 FA 0D F2 | 	cmp	result1, #0 wz
32ac0     1C 00 90 5D |  if_ne	jmp	#LR__4938
32ac4     04 4E 05 F1 | 	add	fp, #4
32ac8     A7 2A 02 FB | 	rdlong	local03, fp
32acc     04 4E 85 F1 | 	sub	fp, #4
32ad0     11 2A 06 F1 | 	add	local03, #17
32ad4     15 05 48 FC | 	wrbyte	#2, local03
32ad8     02 FA 05 F6 | 	mov	result1, #2
32adc     D4 03 90 FD | 	jmp	#LR__4950
32ae0                 | LR__4938
32ae0     20 4E 05 F1 | 	add	fp, #32
32ae4     A7 2A 02 FB | 	rdlong	local03, fp
32ae8     10 4E 05 F1 | 	add	fp, #16
32aec     A7 34 02 FB | 	rdlong	local08, fp
32af0     1A 2B 02 F1 | 	add	local03, local08
32af4     10 4E 85 F1 | 	sub	fp, #16
32af8     A7 2A 62 FC | 	wrlong	local03, fp
32afc     14 4E 85 F1 | 	sub	fp, #20
32b00     A7 2A 02 FB | 	rdlong	local03, fp
32b04     09 2A 46 F0 | 	shr	local03, #9
32b08     20 4E 05 F1 | 	add	fp, #32
32b0c     A7 2A 62 FC | 	wrlong	local03, fp
32b10     2C 4E 85 F1 | 	sub	fp, #44
32b14     01 2A 16 F2 | 	cmp	local03, #1 wc
32b18     5C 01 90 CD |  if_b	jmp	#LR__4942
32b1c     30 4E 05 F1 | 	add	fp, #48
32b20     A7 2A 02 FB | 	rdlong	local03, fp
32b24     04 4E 85 F1 | 	sub	fp, #4
32b28     A7 34 02 FB | 	rdlong	local08, fp
32b2c     1A 2B 02 F1 | 	add	local03, local08
32b30     14 4E 85 F1 | 	sub	fp, #20
32b34     A7 34 02 FB | 	rdlong	local08, fp
32b38     18 4E 85 F1 | 	sub	fp, #24
32b3c     0A 34 06 F1 | 	add	local08, #10
32b40     1A 35 E2 FA | 	rdword	local08, local08
32b44     1A 2B 1A F2 | 	cmp	local03, local08 wcz
32b48     28 00 90 ED |  if_be	jmp	#LR__4939
32b4c     18 4E 05 F1 | 	add	fp, #24
32b50     A7 26 02 FB | 	rdlong	local01, fp
32b54     0A 26 06 F1 | 	add	local01, #10
32b58     13 2B E2 FA | 	rdword	local03, local01
32b5c     18 4E 05 F1 | 	add	fp, #24
32b60     A7 34 02 FB | 	rdlong	local08, fp
32b64     1A 2B 82 F1 | 	sub	local03, local08
32b68     04 4E 85 F1 | 	sub	fp, #4
32b6c     A7 2A 62 FC | 	wrlong	local03, fp
32b70     2C 4E 85 F1 | 	sub	fp, #44
32b74                 | LR__4939
32b74     18 4E 05 F1 | 	add	fp, #24
32b78     A7 26 02 FB | 	rdlong	local01, fp
32b7c     01 26 06 F1 | 	add	local01, #1
32b80     13 13 C2 FA | 	rdbyte	arg01, local01
32b84     1C 4E 05 F1 | 	add	fp, #28
32b88     A7 14 02 FB | 	rdlong	arg02, fp
32b8c     14 4E 85 F1 | 	sub	fp, #20
32b90     A7 16 02 FB | 	rdlong	arg03, fp
32b94     0C 4E 05 F1 | 	add	fp, #12
32b98     A7 18 02 FB | 	rdlong	arg04, fp
32b9c     2C 4E 85 F1 | 	sub	fp, #44
32ba0     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
32ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
32ba8     1C 00 90 AD |  if_e	jmp	#LR__4940
32bac     04 4E 05 F1 | 	add	fp, #4
32bb0     A7 2A 02 FB | 	rdlong	local03, fp
32bb4     04 4E 85 F1 | 	sub	fp, #4
32bb8     11 2A 06 F1 | 	add	local03, #17
32bbc     15 03 48 FC | 	wrbyte	#1, local03
32bc0     01 FA 05 F6 | 	mov	result1, #1
32bc4     EC 02 90 FD | 	jmp	#LR__4950
32bc8                 | LR__4940
32bc8     04 4E 05 F1 | 	add	fp, #4
32bcc     A7 26 02 FB | 	rdlong	local01, fp
32bd0     04 4E 85 F1 | 	sub	fp, #4
32bd4     10 26 06 F1 | 	add	local01, #16
32bd8     13 2B C2 FA | 	rdbyte	local03, local01
32bdc     80 2A CE F7 | 	test	local03, #128 wz
32be0     78 00 90 AD |  if_e	jmp	#LR__4941
32be4     04 4E 05 F1 | 	add	fp, #4
32be8     A7 34 02 FB | 	rdlong	local08, fp
32bec     1C 34 06 F1 | 	add	local08, #28
32bf0     1A 35 02 FB | 	rdlong	local08, local08
32bf4     1C 4E 05 F1 | 	add	fp, #28
32bf8     A7 36 02 FB | 	rdlong	local09, fp
32bfc     1B 35 82 F1 | 	sub	local08, local09
32c00     0C 4E 05 F1 | 	add	fp, #12
32c04     A7 38 02 FB | 	rdlong	local10, fp
32c08     2C 4E 85 F1 | 	sub	fp, #44
32c0c     1C 3B 02 F6 | 	mov	local11, local10
32c10     1D 35 12 F2 | 	cmp	local08, local11 wc
32c14     44 00 90 3D |  if_ae	jmp	#LR__4941
32c18     34 4E 05 F1 | 	add	fp, #52
32c1c     A7 12 02 FB | 	rdlong	arg01, fp
32c20     30 4E 85 F1 | 	sub	fp, #48
32c24     A7 14 02 FB | 	rdlong	arg02, fp
32c28     0A 3B 02 F6 | 	mov	local11, arg02
32c2c     1C 3A 06 F1 | 	add	local11, #28
32c30     1D 37 02 FB | 	rdlong	local09, local11
32c34     1C 4E 05 F1 | 	add	fp, #28
32c38     A7 2E 02 FB | 	rdlong	local05, fp
32c3c     17 37 82 F1 | 	sub	local09, local05
32c40     09 36 66 F0 | 	shl	local09, #9
32c44     1B 3B 02 F6 | 	mov	local11, local09
32c48     1B 13 02 F1 | 	add	arg01, local09
32c4c     20 4E 85 F1 | 	sub	fp, #32
32c50     28 14 06 F1 | 	add	arg02, #40
32c54     09 16 C6 F9 | 	decod	arg03, #9
32c58     F0 42 BF FD | 	call	#__system____builtin_memmove
32c5c                 | LR__4941
32c5c     2C 4E 05 F1 | 	add	fp, #44
32c60     A7 2A 02 FB | 	rdlong	local03, fp
32c64     09 2A 66 F0 | 	shl	local03, #9
32c68     04 4E 85 F1 | 	sub	fp, #4
32c6c     A7 2A 62 FC | 	wrlong	local03, fp
32c70     28 4E 85 F1 | 	sub	fp, #40
32c74                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
32c74                 | ' 				}
32c74                 | ' 
32c74                 | ' 
32c74                 | ' 				rcnt =  ((UINT) 512 )  * cc;
32c74                 | ' 				continue;
32c74     B4 01 90 FD | 	jmp	#LR__4948
32c78                 | LR__4942
32c78     04 4E 05 F1 | 	add	fp, #4
32c7c     A7 2A 02 FB | 	rdlong	local03, fp
32c80     1C 2A 06 F1 | 	add	local03, #28
32c84     15 2B 02 FB | 	rdlong	local03, local03
32c88     1C 4E 05 F1 | 	add	fp, #28
32c8c     A7 26 02 FB | 	rdlong	local01, fp
32c90     20 4E 85 F1 | 	sub	fp, #32
32c94     13 2B 0A F2 | 	cmp	local03, local01 wz
32c98     EC 00 90 AD |  if_e	jmp	#LR__4946
32c9c     04 4E 05 F1 | 	add	fp, #4
32ca0     A7 26 02 FB | 	rdlong	local01, fp
32ca4     04 4E 85 F1 | 	sub	fp, #4
32ca8     10 26 06 F1 | 	add	local01, #16
32cac     13 2B C2 FA | 	rdbyte	local03, local01
32cb0     80 2A CE F7 | 	test	local03, #128 wz
32cb4     7C 00 90 AD |  if_e	jmp	#LR__4944
32cb8     18 4E 05 F1 | 	add	fp, #24
32cbc     A7 26 02 FB | 	rdlong	local01, fp
32cc0     01 26 06 F1 | 	add	local01, #1
32cc4     13 13 C2 FA | 	rdbyte	arg01, local01
32cc8     14 4E 85 F1 | 	sub	fp, #20
32ccc     A7 2A 02 FB | 	rdlong	local03, fp
32cd0     15 15 02 F6 | 	mov	arg02, local03
32cd4     28 14 06 F1 | 	add	arg02, #40
32cd8     04 4E 85 F1 | 	sub	fp, #4
32cdc     1C 2A 06 F1 | 	add	local03, #28
32ce0     15 17 02 FB | 	rdlong	arg03, local03
32ce4     01 18 06 F6 | 	mov	arg04, #1
32ce8     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
32cec     00 FA 0D F2 | 	cmp	result1, #0 wz
32cf0     1C 00 90 AD |  if_e	jmp	#LR__4943
32cf4     04 4E 05 F1 | 	add	fp, #4
32cf8     A7 2A 02 FB | 	rdlong	local03, fp
32cfc     04 4E 85 F1 | 	sub	fp, #4
32d00     11 2A 06 F1 | 	add	local03, #17
32d04     15 03 48 FC | 	wrbyte	#1, local03
32d08     01 FA 05 F6 | 	mov	result1, #1
32d0c     A4 01 90 FD | 	jmp	#LR__4950
32d10                 | LR__4943
32d10     04 4E 05 F1 | 	add	fp, #4
32d14     A7 3A 02 FB | 	rdlong	local11, fp
32d18     1D 2B 02 F6 | 	mov	local03, local11
32d1c     04 4E 85 F1 | 	sub	fp, #4
32d20     10 3A 06 F1 | 	add	local11, #16
32d24     1D 3B C2 FA | 	rdbyte	local11, local11
32d28     7F 3A 06 F5 | 	and	local11, #127
32d2c     10 2A 06 F1 | 	add	local03, #16
32d30     15 3B 42 FC | 	wrbyte	local11, local03
32d34                 | LR__4944
32d34     18 4E 05 F1 | 	add	fp, #24
32d38     A7 26 02 FB | 	rdlong	local01, fp
32d3c     01 26 06 F1 | 	add	local01, #1
32d40     13 13 C2 FA | 	rdbyte	arg01, local01
32d44     14 4E 85 F1 | 	sub	fp, #20
32d48     A7 14 02 FB | 	rdlong	arg02, fp
32d4c     28 14 06 F1 | 	add	arg02, #40
32d50     1C 4E 05 F1 | 	add	fp, #28
32d54     A7 16 02 FB | 	rdlong	arg03, fp
32d58     20 4E 85 F1 | 	sub	fp, #32
32d5c     01 18 06 F6 | 	mov	arg04, #1
32d60     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
32d64     00 FA 0D F2 | 	cmp	result1, #0 wz
32d68     1C 00 90 AD |  if_e	jmp	#LR__4945
32d6c     04 4E 05 F1 | 	add	fp, #4
32d70     A7 2A 02 FB | 	rdlong	local03, fp
32d74     04 4E 85 F1 | 	sub	fp, #4
32d78     11 2A 06 F1 | 	add	local03, #17
32d7c     15 03 48 FC | 	wrbyte	#1, local03
32d80     01 FA 05 F6 | 	mov	result1, #1
32d84     2C 01 90 FD | 	jmp	#LR__4950
32d88                 | LR__4945
32d88                 | LR__4946
32d88     04 4E 05 F1 | 	add	fp, #4
32d8c     A7 2A 02 FB | 	rdlong	local03, fp
32d90     1C 4E 05 F1 | 	add	fp, #28
32d94     A7 3A 02 FB | 	rdlong	local11, fp
32d98     20 4E 85 F1 | 	sub	fp, #32
32d9c     1C 2A 06 F1 | 	add	local03, #28
32da0     15 3B 62 FC | 	wrlong	local11, local03
32da4                 | LR__4947
32da4     04 4E 05 F1 | 	add	fp, #4
32da8     A7 26 02 FB | 	rdlong	local01, fp
32dac     14 26 06 F1 | 	add	local01, #20
32db0     13 3B 02 FB | 	rdlong	local11, local01
32db4     FF 3B 06 F5 | 	and	local11, #511
32db8     09 2A C6 F9 | 	decod	local03, #9
32dbc     1D 2B 82 F1 | 	sub	local03, local11
32dc0     24 4E 05 F1 | 	add	fp, #36
32dc4     A7 2A 62 FC | 	wrlong	local03, fp
32dc8     1C 4E 85 F1 | 	sub	fp, #28
32dcc     A7 3A 02 FB | 	rdlong	local11, fp
32dd0     0C 4E 85 F1 | 	sub	fp, #12
32dd4     1D 2B 1A F2 | 	cmp	local03, local11 wcz
32dd8     0C 4E 05 11 |  if_a	add	fp, #12
32ddc     A7 2A 02 1B |  if_a	rdlong	local03, fp
32de0     1C 4E 05 11 |  if_a	add	fp, #28
32de4     A7 2A 62 1C |  if_a	wrlong	local03, fp
32de8     28 4E 85 11 |  if_a	sub	fp, #40
32dec     34 4E 05 F1 | 	add	fp, #52
32df0     A7 12 02 FB | 	rdlong	arg01, fp
32df4     30 4E 85 F1 | 	sub	fp, #48
32df8     A7 30 02 FB | 	rdlong	local06, fp
32dfc     18 15 02 F6 | 	mov	arg02, local06
32e00     28 14 06 F1 | 	add	arg02, #40
32e04     14 30 06 F1 | 	add	local06, #20
32e08     18 3B 02 FB | 	rdlong	local11, local06
32e0c     1D 37 02 F6 | 	mov	local09, local11
32e10     1B 39 02 F6 | 	mov	local10, local09
32e14     FF 39 06 F5 | 	and	local10, #511
32e18     1C 15 02 F1 | 	add	arg02, local10
32e1c     24 4E 05 F1 | 	add	fp, #36
32e20     A7 16 02 FB | 	rdlong	arg03, fp
32e24     28 4E 85 F1 | 	sub	fp, #40
32e28     20 41 BF FD | 	call	#__system____builtin_memmove
32e2c                 | LR__4948
32e2c     0C 4E 05 F1 | 	add	fp, #12
32e30     A7 2A 02 FB | 	rdlong	local03, fp
32e34     1C 4E 05 F1 | 	add	fp, #28
32e38     A7 34 02 FB | 	rdlong	local08, fp
32e3c     1A 2B 82 F1 | 	sub	local03, local08
32e40     1C 4E 85 F1 | 	sub	fp, #28
32e44     A7 2A 62 FC | 	wrlong	local03, fp
32e48     04 4E 05 F1 | 	add	fp, #4
32e4c     A7 26 02 FB | 	rdlong	local01, fp
32e50     13 33 02 FB | 	rdlong	local07, local01
32e54     18 4E 05 F1 | 	add	fp, #24
32e58     A7 34 02 FB | 	rdlong	local08, fp
32e5c     1A 33 02 F1 | 	add	local07, local08
32e60     13 33 62 FC | 	wrlong	local07, local01
32e64     0C 4E 05 F1 | 	add	fp, #12
32e68     A7 2A 02 FB | 	rdlong	local03, fp
32e6c     0C 4E 85 F1 | 	sub	fp, #12
32e70     A7 3C 02 FB | 	rdlong	local12, fp
32e74     1E 2B 02 F1 | 	add	local03, local12
32e78     0C 4E 05 F1 | 	add	fp, #12
32e7c     A7 2A 62 FC | 	wrlong	local03, fp
32e80     30 4E 85 F1 | 	sub	fp, #48
32e84     A7 3E 02 FB | 	rdlong	local13, fp
32e88     1F 2B 02 F6 | 	mov	local03, local13
32e8c     14 3E 06 F1 | 	add	local13, #20
32e90     1F 41 02 FB | 	rdlong	local14, local13
32e94     24 4E 05 F1 | 	add	fp, #36
32e98     A7 30 02 FB | 	rdlong	local06, fp
32e9c     28 4E 85 F1 | 	sub	fp, #40
32ea0     18 41 02 F1 | 	add	local14, local06
32ea4     14 2A 06 F1 | 	add	local03, #20
32ea8     15 41 62 FC | 	wrlong	local14, local03
32eac     84 FA 9F FD | 	jmp	#LR__4932
32eb0                 | LR__4949
32eb0                 | ' 
32eb0                 | ' 
32eb0                 | ' 
32eb0                 | ' 
32eb0                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
32eb0                 | ' 
32eb0                 | ' 	}
32eb0                 | ' 
32eb0                 | ' 	return FR_OK ;
32eb0     00 FA 05 F6 | 	mov	result1, #0
32eb4                 | LR__4950
32eb4     A7 F0 03 F6 | 	mov	ptra, fp
32eb8     B2 00 A0 FD | 	call	#popregs_
32ebc                 | _fatfs_cc_f_read_ret
32ebc     2D 00 64 FD | 	ret
32ec0                 | 
32ec0                 | _fatfs_cc_f_write
32ec0     15 4A 05 F6 | 	mov	COUNT_, #21
32ec4     A8 00 A0 FD | 	call	#pushregs_
32ec8     34 F0 07 F1 | 	add	ptra, #52
32ecc     04 4E 05 F1 | 	add	fp, #4
32ed0     A7 12 62 FC | 	wrlong	arg01, fp
32ed4     04 4E 05 F1 | 	add	fp, #4
32ed8     A7 14 62 FC | 	wrlong	arg02, fp
32edc     04 4E 05 F1 | 	add	fp, #4
32ee0     A7 16 62 FC | 	wrlong	arg03, fp
32ee4     04 4E 05 F1 | 	add	fp, #4
32ee8     A7 18 62 FC | 	wrlong	arg04, fp
32eec     08 4E 85 F1 | 	sub	fp, #8
32ef0     A7 FA 01 FB | 	rdlong	result1, fp
32ef4     28 4E 05 F1 | 	add	fp, #40
32ef8     A7 FA 61 FC | 	wrlong	result1, fp
32efc     20 4E 85 F1 | 	sub	fp, #32
32f00     A7 FA 01 FB | 	rdlong	result1, fp
32f04     FD 00 68 FC | 	wrlong	#0, result1
32f08     0C 4E 85 F1 | 	sub	fp, #12
32f0c     A7 12 02 FB | 	rdlong	arg01, fp
32f10     14 4E 05 F1 | 	add	fp, #20
32f14     A7 14 02 F6 | 	mov	arg02, fp
32f18     18 4E 85 F1 | 	sub	fp, #24
32f1c     88 F0 BF FD | 	call	#_fatfs_cc_validate
32f20     14 4E 05 F1 | 	add	fp, #20
32f24     A7 FA 61 FC | 	wrlong	result1, fp
32f28     00 FA 4D F2 | 	cmps	result1, #0 wz
32f2c     14 4E 85 F1 | 	sub	fp, #20
32f30     20 00 90 5D |  if_ne	jmp	#LR__4960
32f34     04 4E 05 F1 | 	add	fp, #4
32f38     A7 14 02 FB | 	rdlong	arg02, fp
32f3c     11 14 06 F1 | 	add	arg02, #17
32f40     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
32f44     10 4E 05 F1 | 	add	fp, #16
32f48     A7 14 62 FC | 	wrlong	arg02, fp
32f4c     14 4E 85 F1 | 	sub	fp, #20
32f50     10 00 90 AD |  if_e	jmp	#LR__4961
32f54                 | LR__4960
32f54     14 4E 05 F1 | 	add	fp, #20
32f58     A7 FA 01 FB | 	rdlong	result1, fp
32f5c     14 4E 85 F1 | 	sub	fp, #20
32f60     44 07 90 FD | 	jmp	#LR__4983
32f64                 | LR__4961
32f64     04 4E 05 F1 | 	add	fp, #4
32f68     A7 14 02 FB | 	rdlong	arg02, fp
32f6c     04 4E 85 F1 | 	sub	fp, #4
32f70     10 14 06 F1 | 	add	arg02, #16
32f74     0A 15 C2 FA | 	rdbyte	arg02, arg02
32f78     02 14 CE F7 | 	test	arg02, #2 wz
32f7c     07 FA 05 A6 |  if_e	mov	result1, #7
32f80     24 07 90 AD |  if_e	jmp	#LR__4983
32f84     04 4E 05 F1 | 	add	fp, #4
32f88     A7 14 02 FB | 	rdlong	arg02, fp
32f8c     0A 13 02 F6 | 	mov	arg01, arg02
32f90     14 12 06 F1 | 	add	arg01, #20
32f94     09 13 02 FB | 	rdlong	arg01, arg01
32f98     08 4E 05 F1 | 	add	fp, #8
32f9c     A7 FA 01 FB | 	rdlong	result1, fp
32fa0     FD 12 02 F1 | 	add	arg01, result1
32fa4     0C 4E 85 F1 | 	sub	fp, #12
32fa8     14 14 06 F1 | 	add	arg02, #20
32fac     0A FB 01 FB | 	rdlong	result1, arg02
32fb0     FD 12 12 F2 | 	cmp	arg01, result1 wc
32fb4     24 00 90 3D |  if_ae	jmp	#LR__4962
32fb8     04 4E 05 F1 | 	add	fp, #4
32fbc     A7 14 02 FB | 	rdlong	arg02, fp
32fc0     01 FA 65 F6 | 	neg	result1, #1
32fc4     14 14 06 F1 | 	add	arg02, #20
32fc8     0A 15 02 FB | 	rdlong	arg02, arg02
32fcc     0A FB 81 F1 | 	sub	result1, arg02
32fd0     08 4E 05 F1 | 	add	fp, #8
32fd4     A7 FA 61 FC | 	wrlong	result1, fp
32fd8     0C 4E 85 F1 | 	sub	fp, #12
32fdc                 | LR__4962
32fdc                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
32fdc                 | ' 	}
32fdc                 | ' 
32fdc                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
32fdc                 | LR__4963
32fdc     0C 4E 05 F1 | 	add	fp, #12
32fe0     A7 FA 01 FB | 	rdlong	result1, fp
32fe4     0C 4E 85 F1 | 	sub	fp, #12
32fe8     01 FA 15 F2 | 	cmp	result1, #1 wc
32fec     90 06 90 CD |  if_b	jmp	#LR__4982
32ff0     04 4E 05 F1 | 	add	fp, #4
32ff4     A7 FA 01 FB | 	rdlong	result1, fp
32ff8     04 4E 85 F1 | 	sub	fp, #4
32ffc     14 FA 05 F1 | 	add	result1, #20
33000     FD FA 01 FB | 	rdlong	result1, result1
33004     FF FB CD F7 | 	test	result1, #511 wz
33008     D8 04 90 5D |  if_ne	jmp	#LR__4978
3300c     04 4E 05 F1 | 	add	fp, #4
33010     A7 FA 01 FB | 	rdlong	result1, fp
33014     14 FA 05 F1 | 	add	result1, #20
33018     FD FA 01 FB | 	rdlong	result1, result1
3301c     09 FA 45 F0 | 	shr	result1, #9
33020     14 4E 05 F1 | 	add	fp, #20
33024     A7 14 02 FB | 	rdlong	arg02, fp
33028     0A 14 06 F1 | 	add	arg02, #10
3302c     0A 19 E2 FA | 	rdword	arg04, arg02
33030     0C 15 32 F9 | 	getword	arg02, arg04, #0
33034     01 14 86 F1 | 	sub	arg02, #1
33038     0A FB 09 F5 | 	and	result1, arg02 wz
3303c     14 4E 05 F1 | 	add	fp, #20
33040     A7 FA 61 FC | 	wrlong	result1, fp
33044     2C 4E 85 F1 | 	sub	fp, #44
33048     44 01 90 5D |  if_ne	jmp	#LR__4969
3304c     04 4E 05 F1 | 	add	fp, #4
33050     A7 FA 01 FB | 	rdlong	result1, fp
33054     04 4E 85 F1 | 	sub	fp, #4
33058     14 FA 05 F1 | 	add	result1, #20
3305c     FD 14 0A FB | 	rdlong	arg02, result1 wz
33060     44 00 90 5D |  if_ne	jmp	#LR__4964
33064     04 4E 05 F1 | 	add	fp, #4
33068     A7 14 02 FB | 	rdlong	arg02, fp
3306c     08 14 06 F1 | 	add	arg02, #8
33070     0A 15 0A FB | 	rdlong	arg02, arg02 wz
33074     18 4E 05 F1 | 	add	fp, #24
33078     A7 14 62 FC | 	wrlong	arg02, fp
3307c     1C 4E 85 F1 | 	sub	fp, #28
33080     4C 00 90 5D |  if_ne	jmp	#LR__4965
33084     04 4E 05 F1 | 	add	fp, #4
33088     A7 12 02 FB | 	rdlong	arg01, fp
3308c     04 4E 85 F1 | 	sub	fp, #4
33090     00 14 06 F6 | 	mov	arg02, #0
33094     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
33098     1C 4E 05 F1 | 	add	fp, #28
3309c     A7 FA 61 FC | 	wrlong	result1, fp
330a0     1C 4E 85 F1 | 	sub	fp, #28
330a4     28 00 90 FD | 	jmp	#LR__4965
330a8                 | LR__4964
330a8     04 4E 05 F1 | 	add	fp, #4
330ac     A7 18 02 FB | 	rdlong	arg04, fp
330b0     0C 13 02 F6 | 	mov	arg01, arg04
330b4     04 4E 85 F1 | 	sub	fp, #4
330b8     18 18 06 F1 | 	add	arg04, #24
330bc     0C 15 02 FB | 	rdlong	arg02, arg04
330c0     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
330c4     1C 4E 05 F1 | 	add	fp, #28
330c8     A7 FA 61 FC | 	wrlong	result1, fp
330cc     1C 4E 85 F1 | 	sub	fp, #28
330d0                 | LR__4965
330d0     1C 4E 05 F1 | 	add	fp, #28
330d4     A7 FA 09 FB | 	rdlong	result1, fp wz
330d8     1C 4E 85 F1 | 	sub	fp, #28
330dc     A0 05 90 AD |  if_e	jmp	#LR__4982
330e0     1C 4E 05 F1 | 	add	fp, #28
330e4     A7 FA 01 FB | 	rdlong	result1, fp
330e8     1C 4E 85 F1 | 	sub	fp, #28
330ec     01 FA 0D F2 | 	cmp	result1, #1 wz
330f0     1C 00 90 5D |  if_ne	jmp	#LR__4966
330f4     04 4E 05 F1 | 	add	fp, #4
330f8     A7 FA 01 FB | 	rdlong	result1, fp
330fc     04 4E 85 F1 | 	sub	fp, #4
33100     11 FA 05 F1 | 	add	result1, #17
33104     FD 04 48 FC | 	wrbyte	#2, result1
33108     02 FA 05 F6 | 	mov	result1, #2
3310c     98 05 90 FD | 	jmp	#LR__4983
33110                 | LR__4966
33110     1C 4E 05 F1 | 	add	fp, #28
33114     A7 FA 01 FB | 	rdlong	result1, fp
33118     1C 4E 85 F1 | 	sub	fp, #28
3311c     FF FF 7F FF 
33120     FF FB 0D F2 | 	cmp	result1, ##-1 wz
33124     1C 00 90 5D |  if_ne	jmp	#LR__4967
33128     04 4E 05 F1 | 	add	fp, #4
3312c     A7 FA 01 FB | 	rdlong	result1, fp
33130     04 4E 85 F1 | 	sub	fp, #4
33134     11 FA 05 F1 | 	add	result1, #17
33138     FD 02 48 FC | 	wrbyte	#1, result1
3313c     01 FA 05 F6 | 	mov	result1, #1
33140     64 05 90 FD | 	jmp	#LR__4983
33144                 | LR__4967
33144     04 4E 05 F1 | 	add	fp, #4
33148     A7 FA 01 FB | 	rdlong	result1, fp
3314c     18 4E 05 F1 | 	add	fp, #24
33150     A7 18 02 FB | 	rdlong	arg04, fp
33154     18 FA 05 F1 | 	add	result1, #24
33158     FD 18 62 FC | 	wrlong	arg04, result1
3315c     18 4E 85 F1 | 	sub	fp, #24
33160     A7 FA 01 FB | 	rdlong	result1, fp
33164     04 4E 85 F1 | 	sub	fp, #4
33168     08 FA 05 F1 | 	add	result1, #8
3316c     FD FA 09 FB | 	rdlong	result1, result1 wz
33170     1C 00 90 5D |  if_ne	jmp	#LR__4968
33174     04 4E 05 F1 | 	add	fp, #4
33178     A7 18 02 FB | 	rdlong	arg04, fp
3317c     18 4E 05 F1 | 	add	fp, #24
33180     A7 FA 01 FB | 	rdlong	result1, fp
33184     1C 4E 85 F1 | 	sub	fp, #28
33188     08 18 06 F1 | 	add	arg04, #8
3318c     0C FB 61 FC | 	wrlong	result1, arg04
33190                 | LR__4968
33190                 | LR__4969
33190     04 4E 05 F1 | 	add	fp, #4
33194     A7 18 02 FB | 	rdlong	arg04, fp
33198     04 4E 85 F1 | 	sub	fp, #4
3319c     10 18 06 F1 | 	add	arg04, #16
331a0     0C 19 C2 FA | 	rdbyte	arg04, arg04
331a4     80 18 CE F7 | 	test	arg04, #128 wz
331a8     7C 00 90 AD |  if_e	jmp	#LR__4971
331ac     18 4E 05 F1 | 	add	fp, #24
331b0     A7 18 02 FB | 	rdlong	arg04, fp
331b4     01 18 06 F1 | 	add	arg04, #1
331b8     0C 13 C2 FA | 	rdbyte	arg01, arg04
331bc     14 4E 85 F1 | 	sub	fp, #20
331c0     A7 18 02 FB | 	rdlong	arg04, fp
331c4     0C 15 02 F6 | 	mov	arg02, arg04
331c8     28 14 06 F1 | 	add	arg02, #40
331cc     04 4E 85 F1 | 	sub	fp, #4
331d0     1C 18 06 F1 | 	add	arg04, #28
331d4     0C 17 02 FB | 	rdlong	arg03, arg04
331d8     01 18 06 F6 | 	mov	arg04, #1
331dc     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
331e0     00 FA 0D F2 | 	cmp	result1, #0 wz
331e4     1C 00 90 AD |  if_e	jmp	#LR__4970
331e8     04 4E 05 F1 | 	add	fp, #4
331ec     A7 FA 01 FB | 	rdlong	result1, fp
331f0     04 4E 85 F1 | 	sub	fp, #4
331f4     11 FA 05 F1 | 	add	result1, #17
331f8     FD 02 48 FC | 	wrbyte	#1, result1
331fc     01 FA 05 F6 | 	mov	result1, #1
33200     A4 04 90 FD | 	jmp	#LR__4983
33204                 | LR__4970
33204     04 4E 05 F1 | 	add	fp, #4
33208     A7 18 02 FB | 	rdlong	arg04, fp
3320c     0C FB 01 F6 | 	mov	result1, arg04
33210     04 4E 85 F1 | 	sub	fp, #4
33214     10 18 06 F1 | 	add	arg04, #16
33218     0C 19 C2 FA | 	rdbyte	arg04, arg04
3321c     7F 18 06 F5 | 	and	arg04, #127
33220     10 FA 05 F1 | 	add	result1, #16
33224     FD 18 42 FC | 	wrbyte	arg04, result1
33228                 | LR__4971
33228     18 4E 05 F1 | 	add	fp, #24
3322c     A7 12 02 FB | 	rdlong	arg01, fp
33230     14 4E 85 F1 | 	sub	fp, #20
33234     A7 14 02 FB | 	rdlong	arg02, fp
33238     04 4E 85 F1 | 	sub	fp, #4
3323c     18 14 06 F1 | 	add	arg02, #24
33240     0A 15 02 FB | 	rdlong	arg02, arg02
33244     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
33248     20 4E 05 F1 | 	add	fp, #32
3324c     A7 FA 61 FC | 	wrlong	result1, fp
33250     20 4E 85 F1 | 	sub	fp, #32
33254     00 FA 0D F2 | 	cmp	result1, #0 wz
33258     1C 00 90 5D |  if_ne	jmp	#LR__4972
3325c     04 4E 05 F1 | 	add	fp, #4
33260     A7 FA 01 FB | 	rdlong	result1, fp
33264     04 4E 85 F1 | 	sub	fp, #4
33268     11 FA 05 F1 | 	add	result1, #17
3326c     FD 04 48 FC | 	wrbyte	#2, result1
33270     02 FA 05 F6 | 	mov	result1, #2
33274     30 04 90 FD | 	jmp	#LR__4983
33278                 | LR__4972
33278     20 4E 05 F1 | 	add	fp, #32
3327c     A7 FA 01 FB | 	rdlong	result1, fp
33280     0C 4E 05 F1 | 	add	fp, #12
33284     A7 26 02 FB | 	rdlong	local01, fp
33288     13 FB 01 F1 | 	add	result1, local01
3328c     0C 4E 85 F1 | 	sub	fp, #12
33290     A7 FA 61 FC | 	wrlong	result1, fp
33294     14 4E 85 F1 | 	sub	fp, #20
33298     A7 FA 01 FB | 	rdlong	result1, fp
3329c     09 FA 45 F0 | 	shr	result1, #9
332a0     1C 4E 05 F1 | 	add	fp, #28
332a4     A7 FA 61 FC | 	wrlong	result1, fp
332a8     28 4E 85 F1 | 	sub	fp, #40
332ac     01 FA 15 F2 | 	cmp	result1, #1 wc
332b0     60 01 90 CD |  if_b	jmp	#LR__4976
332b4     2C 4E 05 F1 | 	add	fp, #44
332b8     A7 FA 01 FB | 	rdlong	result1, fp
332bc     04 4E 85 F1 | 	sub	fp, #4
332c0     A7 18 02 FB | 	rdlong	arg04, fp
332c4     0C FB 01 F1 | 	add	result1, arg04
332c8     10 4E 85 F1 | 	sub	fp, #16
332cc     A7 18 02 FB | 	rdlong	arg04, fp
332d0     18 4E 85 F1 | 	sub	fp, #24
332d4     0A 18 06 F1 | 	add	arg04, #10
332d8     0C 19 E2 FA | 	rdword	arg04, arg04
332dc     0C FB 19 F2 | 	cmp	result1, arg04 wcz
332e0     28 00 90 ED |  if_be	jmp	#LR__4973
332e4     18 4E 05 F1 | 	add	fp, #24
332e8     A7 FA 01 FB | 	rdlong	result1, fp
332ec     0A FA 05 F1 | 	add	result1, #10
332f0     FD FA E1 FA | 	rdword	result1, result1
332f4     14 4E 05 F1 | 	add	fp, #20
332f8     A7 18 02 FB | 	rdlong	arg04, fp
332fc     0C FB 81 F1 | 	sub	result1, arg04
33300     04 4E 85 F1 | 	sub	fp, #4
33304     A7 FA 61 FC | 	wrlong	result1, fp
33308     28 4E 85 F1 | 	sub	fp, #40
3330c                 | LR__4973
3330c     18 4E 05 F1 | 	add	fp, #24
33310     A7 18 02 FB | 	rdlong	arg04, fp
33314     01 18 06 F1 | 	add	arg04, #1
33318     0C 13 C2 FA | 	rdbyte	arg01, arg04
3331c     18 4E 05 F1 | 	add	fp, #24
33320     A7 14 02 FB | 	rdlong	arg02, fp
33324     10 4E 85 F1 | 	sub	fp, #16
33328     A7 16 02 FB | 	rdlong	arg03, fp
3332c     08 4E 05 F1 | 	add	fp, #8
33330     A7 18 02 FB | 	rdlong	arg04, fp
33334     28 4E 85 F1 | 	sub	fp, #40
33338     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
3333c     00 FA 0D F2 | 	cmp	result1, #0 wz
33340     1C 00 90 AD |  if_e	jmp	#LR__4974
33344     04 4E 05 F1 | 	add	fp, #4
33348     A7 26 02 FB | 	rdlong	local01, fp
3334c     04 4E 85 F1 | 	sub	fp, #4
33350     11 26 06 F1 | 	add	local01, #17
33354     13 03 48 FC | 	wrbyte	#1, local01
33358     01 FA 05 F6 | 	mov	result1, #1
3335c     48 03 90 FD | 	jmp	#LR__4983
33360                 | LR__4974
33360     04 4E 05 F1 | 	add	fp, #4
33364     A7 FA 01 FB | 	rdlong	result1, fp
33368     1C FA 05 F1 | 	add	result1, #28
3336c     FD FA 01 FB | 	rdlong	result1, result1
33370     1C 4E 05 F1 | 	add	fp, #28
33374     A7 28 02 FB | 	rdlong	local02, fp
33378     14 FB 81 F1 | 	sub	result1, local02
3337c     08 4E 05 F1 | 	add	fp, #8
33380     A7 18 02 FB | 	rdlong	arg04, fp
33384     28 4E 85 F1 | 	sub	fp, #40
33388     0C FB 11 F2 | 	cmp	result1, arg04 wc
3338c     68 00 90 3D |  if_ae	jmp	#LR__4975
33390     04 4E 05 F1 | 	add	fp, #4
33394     A7 12 02 FB | 	rdlong	arg01, fp
33398     28 12 06 F1 | 	add	arg01, #40
3339c     2C 4E 05 F1 | 	add	fp, #44
333a0     A7 14 02 FB | 	rdlong	arg02, fp
333a4     2C 4E 85 F1 | 	sub	fp, #44
333a8     A7 FA 01 FB | 	rdlong	result1, fp
333ac     1C FA 05 F1 | 	add	result1, #28
333b0     FD 2A 02 FB | 	rdlong	local03, result1
333b4     1C 4E 05 F1 | 	add	fp, #28
333b8     A7 18 02 FB | 	rdlong	arg04, fp
333bc     20 4E 85 F1 | 	sub	fp, #32
333c0     0C 2B 82 F1 | 	sub	local03, arg04
333c4     09 2A 66 F0 | 	shl	local03, #9
333c8     15 15 02 F1 | 	add	arg02, local03
333cc     09 16 C6 F9 | 	decod	arg03, #9
333d0     78 3B BF FD | 	call	#__system____builtin_memmove
333d4     04 4E 05 F1 | 	add	fp, #4
333d8     A7 18 02 FB | 	rdlong	arg04, fp
333dc     0C FB 01 F6 | 	mov	result1, arg04
333e0     04 4E 85 F1 | 	sub	fp, #4
333e4     10 18 06 F1 | 	add	arg04, #16
333e8     0C 19 C2 FA | 	rdbyte	arg04, arg04
333ec     7F 18 06 F5 | 	and	arg04, #127
333f0     10 FA 05 F1 | 	add	result1, #16
333f4     FD 18 42 FC | 	wrbyte	arg04, result1
333f8                 | LR__4975
333f8     28 4E 05 F1 | 	add	fp, #40
333fc     A7 FA 01 FB | 	rdlong	result1, fp
33400     09 FA 65 F0 | 	shl	result1, #9
33404     04 4E 85 F1 | 	sub	fp, #4
33408     A7 FA 61 FC | 	wrlong	result1, fp
3340c     24 4E 85 F1 | 	sub	fp, #36
33410                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
33410                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
33410                 | ' 				}
33410                 | ' 
33410                 | ' 
33410                 | ' 				wcnt =  ((UINT) 512 )  * cc;
33410                 | ' 				continue;
33410     74 01 90 FD | 	jmp	#LR__4979
33414                 | LR__4976
33414     04 4E 05 F1 | 	add	fp, #4
33418     A7 28 02 FB | 	rdlong	local02, fp
3341c     1C 28 06 F1 | 	add	local02, #28
33420     14 FB 01 FB | 	rdlong	result1, local02
33424     1C 4E 05 F1 | 	add	fp, #28
33428     A7 28 02 FB | 	rdlong	local02, fp
3342c     20 4E 85 F1 | 	sub	fp, #32
33430     14 FB 09 F2 | 	cmp	result1, local02 wz
33434     90 00 90 AD |  if_e	jmp	#LR__4977
33438     04 4E 05 F1 | 	add	fp, #4
3343c     A7 FA 01 FB | 	rdlong	result1, fp
33440     FD 2A 02 F6 | 	mov	local03, result1
33444     04 4E 85 F1 | 	sub	fp, #4
33448     14 2A 06 F1 | 	add	local03, #20
3344c     15 2B 02 FB | 	rdlong	local03, local03
33450     0C FA 05 F1 | 	add	result1, #12
33454     FD 2C 02 FB | 	rdlong	local04, result1
33458     16 2F 02 F6 | 	mov	local05, local04
3345c     17 2B 12 F2 | 	cmp	local03, local05 wc
33460     64 00 90 3D |  if_ae	jmp	#LR__4977
33464     18 4E 05 F1 | 	add	fp, #24
33468     A7 18 02 FB | 	rdlong	arg04, fp
3346c     01 18 06 F1 | 	add	arg04, #1
33470     0C 13 C2 FA | 	rdbyte	arg01, arg04
33474     14 4E 85 F1 | 	sub	fp, #20
33478     A7 30 02 FB | 	rdlong	local06, fp
3347c     28 30 06 F1 | 	add	local06, #40
33480     18 33 02 F6 | 	mov	local07, local06
33484     1C 4E 05 F1 | 	add	fp, #28
33488     A7 34 02 FB | 	rdlong	local08, fp
3348c     20 4E 85 F1 | 	sub	fp, #32
33490     01 36 06 F6 | 	mov	local09, #1
33494     19 15 02 F6 | 	mov	arg02, local07
33498     1A 17 02 F6 | 	mov	arg03, local08
3349c     01 18 06 F6 | 	mov	arg04, #1
334a0     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
334a4     FD 38 0A F6 | 	mov	local10, result1 wz
334a8     1C 00 90 AD |  if_e	jmp	#LR__4977
334ac     04 4E 05 F1 | 	add	fp, #4
334b0     A7 38 02 FB | 	rdlong	local10, fp
334b4     04 4E 85 F1 | 	sub	fp, #4
334b8     11 38 06 F1 | 	add	local10, #17
334bc     1C 03 48 FC | 	wrbyte	#1, local10
334c0                 | ' 				fp->fptr < fp->obj.objsize &&
334c0                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
334c0                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
334c0     01 FA 05 F6 | 	mov	result1, #1
334c4     E0 01 90 FD | 	jmp	#LR__4983
334c8                 | LR__4977
334c8     04 4E 05 F1 | 	add	fp, #4
334cc     A7 18 02 FB | 	rdlong	arg04, fp
334d0     1C 4E 05 F1 | 	add	fp, #28
334d4     A7 FA 01 FB | 	rdlong	result1, fp
334d8     20 4E 85 F1 | 	sub	fp, #32
334dc     1C 18 06 F1 | 	add	arg04, #28
334e0     0C FB 61 FC | 	wrlong	result1, arg04
334e4                 | LR__4978
334e4     04 4E 05 F1 | 	add	fp, #4
334e8     A7 FA 01 FB | 	rdlong	result1, fp
334ec     14 FA 05 F1 | 	add	result1, #20
334f0     FD FA 01 FB | 	rdlong	result1, result1
334f4     FF FB 05 F5 | 	and	result1, #511
334f8     09 3A C6 F9 | 	decod	local11, #9
334fc     FD 3A 82 F1 | 	sub	local11, result1
33500     20 4E 05 F1 | 	add	fp, #32
33504     A7 3A 62 FC | 	wrlong	local11, fp
33508     18 4E 85 F1 | 	sub	fp, #24
3350c     A7 FA 01 FB | 	rdlong	result1, fp
33510     0C 4E 85 F1 | 	sub	fp, #12
33514     FD 3A 1A F2 | 	cmp	local11, result1 wcz
33518     0C 4E 05 11 |  if_a	add	fp, #12
3351c     A7 3A 02 1B |  if_a	rdlong	local11, fp
33520     18 4E 05 11 |  if_a	add	fp, #24
33524     A7 3A 62 1C |  if_a	wrlong	local11, fp
33528     24 4E 85 11 |  if_a	sub	fp, #36
3352c     04 4E 05 F1 | 	add	fp, #4
33530     A7 3A 02 FB | 	rdlong	local11, fp
33534     1D 13 02 F6 | 	mov	arg01, local11
33538     28 12 06 F1 | 	add	arg01, #40
3353c     14 3A 06 F1 | 	add	local11, #20
33540     1D 3B 02 FB | 	rdlong	local11, local11
33544     FF 3B 06 F5 | 	and	local11, #511
33548     1D 13 02 F1 | 	add	arg01, local11
3354c     2C 4E 05 F1 | 	add	fp, #44
33550     A7 14 02 FB | 	rdlong	arg02, fp
33554     0C 4E 85 F1 | 	sub	fp, #12
33558     A7 16 02 FB | 	rdlong	arg03, fp
3355c     24 4E 85 F1 | 	sub	fp, #36
33560     E8 39 BF FD | 	call	#__system____builtin_memmove
33564     04 4E 05 F1 | 	add	fp, #4
33568     A7 FA 01 FB | 	rdlong	result1, fp
3356c     FD 3A 02 F6 | 	mov	local11, result1
33570     04 4E 85 F1 | 	sub	fp, #4
33574     10 FA 05 F1 | 	add	result1, #16
33578     FD FA C1 FA | 	rdbyte	result1, result1
3357c     80 FA 45 F5 | 	or	result1, #128
33580     10 3A 06 F1 | 	add	local11, #16
33584     1D FB 41 FC | 	wrbyte	result1, local11
33588                 | LR__4979
33588     0C 4E 05 F1 | 	add	fp, #12
3358c     A7 3A 02 FB | 	rdlong	local11, fp
33590     18 4E 05 F1 | 	add	fp, #24
33594     A7 FA 01 FB | 	rdlong	result1, fp
33598     FD 3A 82 F1 | 	sub	local11, result1
3359c     18 4E 85 F1 | 	sub	fp, #24
335a0     A7 3A 62 FC | 	wrlong	local11, fp
335a4     04 4E 05 F1 | 	add	fp, #4
335a8     A7 3C 02 FB | 	rdlong	local12, fp
335ac     1E 3B 02 FB | 	rdlong	local11, local12
335b0     14 4E 05 F1 | 	add	fp, #20
335b4     A7 3E 02 FB | 	rdlong	local13, fp
335b8     1F 3B 02 F1 | 	add	local11, local13
335bc     1E 3B 62 FC | 	wrlong	local11, local12
335c0     0C 4E 05 F1 | 	add	fp, #12
335c4     A7 3A 02 FB | 	rdlong	local11, fp
335c8     0C 4E 85 F1 | 	sub	fp, #12
335cc     A7 40 02 FB | 	rdlong	local14, fp
335d0     20 3B 02 F1 | 	add	local11, local14
335d4     0C 4E 05 F1 | 	add	fp, #12
335d8     A7 3A 62 FC | 	wrlong	local11, fp
335dc     2C 4E 85 F1 | 	sub	fp, #44
335e0     A7 42 02 FB | 	rdlong	local15, fp
335e4     21 3B 02 F6 | 	mov	local11, local15
335e8     14 42 06 F1 | 	add	local15, #20
335ec     21 43 02 FB | 	rdlong	local15, local15
335f0     20 4E 05 F1 | 	add	fp, #32
335f4     A7 44 02 FB | 	rdlong	local16, fp
335f8     22 43 02 F1 | 	add	local15, local16
335fc     14 3A 06 F1 | 	add	local11, #20
33600     1D 43 62 FC | 	wrlong	local15, local11
33604     20 4E 85 F1 | 	sub	fp, #32
33608     A7 46 02 FB | 	rdlong	local17, fp
3360c     23 3B 02 F6 | 	mov	local11, local17
33610     23 49 02 F6 | 	mov	local18, local17
33614     04 4E 85 F1 | 	sub	fp, #4
33618     14 46 06 F1 | 	add	local17, #20
3361c     23 4B 02 FB | 	rdlong	local19, local17
33620     0C 48 06 F1 | 	add	local18, #12
33624     24 4D 02 FB | 	rdlong	local20, local18
33628     26 4B 1A F2 | 	cmp	local19, local20 wcz
3362c     24 00 90 ED |  if_be	jmp	#LR__4980
33630     04 4E 05 F1 | 	add	fp, #4
33634     A7 2E 02 FB | 	rdlong	local05, fp
33638     04 4E 85 F1 | 	sub	fp, #4
3363c     17 2B 02 F6 | 	mov	local03, local05
33640     14 2A 06 F1 | 	add	local03, #20
33644     15 2D 02 FB | 	rdlong	local04, local03
33648     14 2A 86 F1 | 	sub	local03, #20
3364c     16 4F 02 F6 | 	mov	local21, local04
33650     20 00 90 FD | 	jmp	#LR__4981
33654                 | LR__4980
33654     04 4E 05 F1 | 	add	fp, #4
33658     A7 32 02 FB | 	rdlong	local07, fp
3365c     04 4E 85 F1 | 	sub	fp, #4
33660     19 39 02 F6 | 	mov	local10, local07
33664     0C 38 06 F1 | 	add	local10, #12
33668     1C 35 02 FB | 	rdlong	local08, local10
3366c     0C 38 86 F1 | 	sub	local10, #12
33670     1A 4F 02 F6 | 	mov	local21, local08
33674                 | LR__4981
33674     0C 3A 06 F1 | 	add	local11, #12
33678     1D 4F 62 FC | 	wrlong	local21, local11
3367c     5C F9 9F FD | 	jmp	#LR__4963
33680                 | LR__4982
33680     04 4E 05 F1 | 	add	fp, #4
33684     A7 3C 02 FB | 	rdlong	local12, fp
33688     1E 27 02 F6 | 	mov	local01, local12
3368c     04 4E 85 F1 | 	sub	fp, #4
33690     10 3C 06 F1 | 	add	local12, #16
33694     1E 3B C2 FA | 	rdbyte	local11, local12
33698     40 3A 46 F5 | 	or	local11, #64
3369c     10 26 06 F1 | 	add	local01, #16
336a0     13 3B 42 FC | 	wrbyte	local11, local01
336a4                 | ' 
336a4                 | ' 
336a4                 | ' 
336a4                 | ' 
336a4                 | ' 
336a4                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
336a4                 | ' 		fp->flag |=  0x80 ;
336a4                 | ' 
336a4                 | ' 	}
336a4                 | ' 
336a4                 | ' 	fp->flag |=  0x40 ;
336a4                 | ' 
336a4                 | ' 	return FR_OK ;
336a4     00 FA 05 F6 | 	mov	result1, #0
336a8                 | LR__4983
336a8     A7 F0 03 F6 | 	mov	ptra, fp
336ac     B2 00 A0 FD | 	call	#popregs_
336b0                 | _fatfs_cc_f_write_ret
336b0     2D 00 64 FD | 	ret
336b4                 | 
336b4                 | _fatfs_cc_f_sync
336b4     00 4A 05 F6 | 	mov	COUNT_, #0
336b8     A8 00 A0 FD | 	call	#pushregs_
336bc     18 F0 07 F1 | 	add	ptra, #24
336c0     04 4E 05 F1 | 	add	fp, #4
336c4     A7 12 62 FC | 	wrlong	arg01, fp
336c8     08 4E 05 F1 | 	add	fp, #8
336cc     A7 14 02 F6 | 	mov	arg02, fp
336d0     0C 4E 85 F1 | 	sub	fp, #12
336d4     D0 E8 BF FD | 	call	#_fatfs_cc_validate
336d8     08 4E 05 F1 | 	add	fp, #8
336dc     A7 FA 61 FC | 	wrlong	result1, fp
336e0     08 4E 85 F1 | 	sub	fp, #8
336e4     00 FA 0D F2 | 	cmp	result1, #0 wz
336e8     C0 01 90 5D |  if_ne	jmp	#LR__4993
336ec     04 4E 05 F1 | 	add	fp, #4
336f0     A7 18 02 FB | 	rdlong	arg04, fp
336f4     04 4E 85 F1 | 	sub	fp, #4
336f8     10 18 06 F1 | 	add	arg04, #16
336fc     0C 19 C2 FA | 	rdbyte	arg04, arg04
33700     40 18 CE F7 | 	test	arg04, #64 wz
33704     A4 01 90 AD |  if_e	jmp	#LR__4992
33708     04 4E 05 F1 | 	add	fp, #4
3370c     A7 18 02 FB | 	rdlong	arg04, fp
33710     04 4E 85 F1 | 	sub	fp, #4
33714     10 18 06 F1 | 	add	arg04, #16
33718     0C 19 C2 FA | 	rdbyte	arg04, arg04
3371c     80 18 CE F7 | 	test	arg04, #128 wz
33720     64 00 90 AD |  if_e	jmp	#LR__4990
33724     0C 4E 05 F1 | 	add	fp, #12
33728     A7 18 02 FB | 	rdlong	arg04, fp
3372c     01 18 06 F1 | 	add	arg04, #1
33730     0C 13 C2 FA | 	rdbyte	arg01, arg04
33734     08 4E 85 F1 | 	sub	fp, #8
33738     A7 18 02 FB | 	rdlong	arg04, fp
3373c     0C 15 02 F6 | 	mov	arg02, arg04
33740     28 14 06 F1 | 	add	arg02, #40
33744     04 4E 85 F1 | 	sub	fp, #4
33748     1C 18 06 F1 | 	add	arg04, #28
3374c     0C 17 02 FB | 	rdlong	arg03, arg04
33750     01 18 06 F6 | 	mov	arg04, #1
33754     0C AE BF FD | 	call	#_fatfs_cc_disk_write
33758     00 FA 0D F2 | 	cmp	result1, #0 wz
3375c     01 FA 05 56 |  if_ne	mov	result1, #1
33760     54 01 90 5D |  if_ne	jmp	#LR__4994
33764     04 4E 05 F1 | 	add	fp, #4
33768     A7 18 02 FB | 	rdlong	arg04, fp
3376c     0C 17 02 F6 | 	mov	arg03, arg04
33770     04 4E 85 F1 | 	sub	fp, #4
33774     10 18 06 F1 | 	add	arg04, #16
33778     0C 19 C2 FA | 	rdbyte	arg04, arg04
3377c     7F 18 06 F5 | 	and	arg04, #127
33780     10 16 06 F1 | 	add	arg03, #16
33784     0B 19 42 FC | 	wrbyte	arg04, arg03
33788                 | LR__4990
33788     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
3378c     10 4E 05 F1 | 	add	fp, #16
33790     A7 FA 61 FC | 	wrlong	result1, fp
33794     04 4E 85 F1 | 	sub	fp, #4
33798     A7 12 02 FB | 	rdlong	arg01, fp
3379c     08 4E 85 F1 | 	sub	fp, #8
337a0     A7 18 02 FB | 	rdlong	arg04, fp
337a4     04 4E 85 F1 | 	sub	fp, #4
337a8     20 18 06 F1 | 	add	arg04, #32
337ac     0C 15 02 FB | 	rdlong	arg02, arg04
337b0     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
337b4     08 4E 05 F1 | 	add	fp, #8
337b8     A7 FA 61 FC | 	wrlong	result1, fp
337bc     08 4E 85 F1 | 	sub	fp, #8
337c0     00 FA 0D F2 | 	cmp	result1, #0 wz
337c4     E4 00 90 5D |  if_ne	jmp	#LR__4991
337c8     04 4E 05 F1 | 	add	fp, #4
337cc     A7 18 02 FB | 	rdlong	arg04, fp
337d0     24 18 06 F1 | 	add	arg04, #36
337d4     0C 19 02 FB | 	rdlong	arg04, arg04
337d8     10 4E 05 F1 | 	add	fp, #16
337dc     A7 18 62 FC | 	wrlong	arg04, fp
337e0     0C 17 02 F6 | 	mov	arg03, arg04
337e4     0B 16 06 F1 | 	add	arg03, #11
337e8     0B 17 C2 FA | 	rdbyte	arg03, arg03
337ec     20 16 46 F5 | 	or	arg03, #32
337f0     0B 18 06 F1 | 	add	arg04, #11
337f4     0C 17 42 FC | 	wrbyte	arg03, arg04
337f8     10 4E 85 F1 | 	sub	fp, #16
337fc     A7 18 02 FB | 	rdlong	arg04, fp
33800     0C 13 02 FB | 	rdlong	arg01, arg04
33804     10 4E 05 F1 | 	add	fp, #16
33808     A7 14 02 FB | 	rdlong	arg02, fp
3380c     14 4E 85 F1 | 	sub	fp, #20
33810     08 18 06 F1 | 	add	arg04, #8
33814     0C 17 02 FB | 	rdlong	arg03, arg04
33818     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
3381c     14 4E 05 F1 | 	add	fp, #20
33820     A7 12 02 FB | 	rdlong	arg01, fp
33824     1C 12 06 F1 | 	add	arg01, #28
33828     10 4E 85 F1 | 	sub	fp, #16
3382c     A7 18 02 FB | 	rdlong	arg04, fp
33830     0C 18 06 F1 | 	add	arg04, #12
33834     0C 15 02 FB | 	rdlong	arg02, arg04
33838     09 15 62 FC | 	wrlong	arg02, arg01
3383c     10 4E 05 F1 | 	add	fp, #16
33840     A7 12 02 FB | 	rdlong	arg01, fp
33844     16 12 06 F1 | 	add	arg01, #22
33848     04 4E 85 F1 | 	sub	fp, #4
3384c     A7 14 02 FB | 	rdlong	arg02, fp
33850     09 15 62 FC | 	wrlong	arg02, arg01
33854     04 4E 05 F1 | 	add	fp, #4
33858     A7 12 02 FB | 	rdlong	arg01, fp
3385c     12 12 06 F1 | 	add	arg01, #18
33860     09 01 58 FC | 	wrword	#0, arg01
33864     08 4E 85 F1 | 	sub	fp, #8
33868     A7 18 02 FB | 	rdlong	arg04, fp
3386c     03 18 06 F1 | 	add	arg04, #3
33870     0C 03 48 FC | 	wrbyte	#1, arg04
33874     A7 12 02 FB | 	rdlong	arg01, fp
33878     0C 4E 85 F1 | 	sub	fp, #12
3387c     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
33880     08 4E 05 F1 | 	add	fp, #8
33884     A7 FA 61 FC | 	wrlong	result1, fp
33888     04 4E 85 F1 | 	sub	fp, #4
3388c     A7 18 02 FB | 	rdlong	arg04, fp
33890     0C 17 02 F6 | 	mov	arg03, arg04
33894     04 4E 85 F1 | 	sub	fp, #4
33898     10 18 06 F1 | 	add	arg04, #16
3389c     0C 19 C2 FA | 	rdbyte	arg04, arg04
338a0     BF 18 06 F5 | 	and	arg04, #191
338a4     10 16 06 F1 | 	add	arg03, #16
338a8     0B 19 42 FC | 	wrbyte	arg04, arg03
338ac                 | LR__4991
338ac                 | LR__4992
338ac                 | LR__4993
338ac                 | ' 					dir = fp->dir_ptr;
338ac                 | ' 					dir[ 11 ] |=  0x20 ;
338ac                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
338ac                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
338ac                 | ' 					st_dword(dir +  22 , tm);
338ac                 | ' 					st_word(dir +  18 , 0);
338ac                 | ' 					fs->wflag = 1;
338ac                 | ' 					res = sync_fs(fs);
338ac                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
338ac                 | ' 				}
338ac                 | ' 			}
338ac                 | ' 		}
338ac                 | ' 	}
338ac                 | ' 
338ac                 | ' 	return res ;
338ac     08 4E 05 F1 | 	add	fp, #8
338b0     A7 FA 01 FB | 	rdlong	result1, fp
338b4     08 4E 85 F1 | 	sub	fp, #8
338b8                 | LR__4994
338b8     A7 F0 03 F6 | 	mov	ptra, fp
338bc     B2 00 A0 FD | 	call	#popregs_
338c0                 | _fatfs_cc_f_sync_ret
338c0     2D 00 64 FD | 	ret
338c4                 | 
338c4                 | _fatfs_cc_f_close
338c4     01 4A 05 F6 | 	mov	COUNT_, #1
338c8     A8 00 A0 FD | 	call	#pushregs_
338cc     10 F0 07 F1 | 	add	ptra, #16
338d0     04 4E 05 F1 | 	add	fp, #4
338d4     A7 12 62 FC | 	wrlong	arg01, fp
338d8     04 4E 85 F1 | 	sub	fp, #4
338dc     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
338e0     08 4E 05 F1 | 	add	fp, #8
338e4     A7 FA 61 FC | 	wrlong	result1, fp
338e8     08 4E 85 F1 | 	sub	fp, #8
338ec     00 FA 0D F2 | 	cmp	result1, #0 wz
338f0     38 00 90 5D |  if_ne	jmp	#LR__5000
338f4     04 4E 05 F1 | 	add	fp, #4
338f8     A7 12 02 FB | 	rdlong	arg01, fp
338fc     08 4E 05 F1 | 	add	fp, #8
33900     A7 14 02 F6 | 	mov	arg02, fp
33904     0C 4E 85 F1 | 	sub	fp, #12
33908     9C E6 BF FD | 	call	#_fatfs_cc_validate
3390c     08 4E 05 F1 | 	add	fp, #8
33910     A7 FA 61 FC | 	wrlong	result1, fp
33914     08 4E 85 F1 | 	sub	fp, #8
33918     00 FA 0D F2 | 	cmp	result1, #0 wz
3391c     04 4E 05 A1 |  if_e	add	fp, #4
33920     A7 26 02 AB |  if_e	rdlong	local01, fp
33924     04 4E 85 A1 |  if_e	sub	fp, #4
33928     13 01 68 AC |  if_e	wrlong	#0, local01
3392c                 | LR__5000
3392c                 | ' 
3392c                 | ' 
3392c                 | ' 
3392c                 | ' 
3392c                 | ' 			fp->obj.fs = 0;
3392c                 | ' #line 4192 "ff.c"
3392c                 | ' 		}
3392c                 | ' 	}
3392c                 | ' 	return res;
3392c     08 4E 05 F1 | 	add	fp, #8
33930     A7 FA 01 FB | 	rdlong	result1, fp
33934     08 4E 85 F1 | 	sub	fp, #8
33938     A7 F0 03 F6 | 	mov	ptra, fp
3393c     B2 00 A0 FD | 	call	#popregs_
33940                 | _fatfs_cc_f_close_ret
33940     2D 00 64 FD | 	ret
33944                 | 
33944                 | _fatfs_cc_f_lseek
33944     00 4A 05 F6 | 	mov	COUNT_, #0
33948     A8 00 A0 FD | 	call	#pushregs_
3394c     24 F0 07 F1 | 	add	ptra, #36
33950     04 4E 05 F1 | 	add	fp, #4
33954     A7 12 62 FC | 	wrlong	arg01, fp
33958     04 4E 05 F1 | 	add	fp, #4
3395c     A7 14 62 FC | 	wrlong	arg02, fp
33960     04 4E 85 F1 | 	sub	fp, #4
33964     A7 12 02 FB | 	rdlong	arg01, fp
33968     0C 4E 05 F1 | 	add	fp, #12
3396c     A7 14 02 F6 | 	mov	arg02, fp
33970     10 4E 85 F1 | 	sub	fp, #16
33974     30 E6 BF FD | 	call	#_fatfs_cc_validate
33978     0C 4E 05 F1 | 	add	fp, #12
3397c     A7 FA 61 FC | 	wrlong	result1, fp
33980     0C 4E 85 F1 | 	sub	fp, #12
33984     00 FA 0D F2 | 	cmp	result1, #0 wz
33988     1C 00 90 5D |  if_ne	jmp	#LR__5010
3398c     04 4E 05 F1 | 	add	fp, #4
33990     A7 18 02 FB | 	rdlong	arg04, fp
33994     11 18 06 F1 | 	add	arg04, #17
33998     0C 19 C2 FA | 	rdbyte	arg04, arg04
3399c     08 4E 05 F1 | 	add	fp, #8
339a0     A7 18 62 FC | 	wrlong	arg04, fp
339a4     0C 4E 85 F1 | 	sub	fp, #12
339a8                 | LR__5010
339a8     0C 4E 05 F1 | 	add	fp, #12
339ac     A7 18 0A FB | 	rdlong	arg04, fp wz
339b0     0C 4E 85 F1 | 	sub	fp, #12
339b4     0C 4E 05 51 |  if_ne	add	fp, #12
339b8     A7 FA 01 5B |  if_ne	rdlong	result1, fp
339bc     0C 4E 85 51 |  if_ne	sub	fp, #12
339c0     40 06 90 5D |  if_ne	jmp	#LR__5033
339c4     04 4E 05 F1 | 	add	fp, #4
339c8     A7 18 02 FB | 	rdlong	arg04, fp
339cc     04 4E 05 F1 | 	add	fp, #4
339d0     A7 16 02 FB | 	rdlong	arg03, fp
339d4     08 4E 85 F1 | 	sub	fp, #8
339d8     0C 18 06 F1 | 	add	arg04, #12
339dc     0C 19 02 FB | 	rdlong	arg04, arg04
339e0     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
339e4     3C 00 90 ED |  if_be	jmp	#LR__5011
339e8     04 4E 05 F1 | 	add	fp, #4
339ec     A7 16 02 FB | 	rdlong	arg03, fp
339f0     04 4E 85 F1 | 	sub	fp, #4
339f4     10 16 06 F1 | 	add	arg03, #16
339f8     0B 17 C2 FA | 	rdbyte	arg03, arg03
339fc     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
33a00     02 16 CE F7 | 	test	arg03, #2 wz
33a04     1C 00 90 5D |  if_ne	jmp	#LR__5011
33a08     04 4E 05 F1 | 	add	fp, #4
33a0c     A7 16 02 FB | 	rdlong	arg03, fp
33a10     0C 16 06 F1 | 	add	arg03, #12
33a14     0B 17 02 FB | 	rdlong	arg03, arg03
33a18     04 4E 05 F1 | 	add	fp, #4
33a1c     A7 16 62 FC | 	wrlong	arg03, fp
33a20     08 4E 85 F1 | 	sub	fp, #8
33a24                 | LR__5011
33a24     04 4E 05 F1 | 	add	fp, #4
33a28     A7 16 02 FB | 	rdlong	arg03, fp
33a2c     14 16 06 F1 | 	add	arg03, #20
33a30     0B 17 02 FB | 	rdlong	arg03, arg03
33a34     1C 4E 05 F1 | 	add	fp, #28
33a38     A7 16 62 FC | 	wrlong	arg03, fp
33a3c     1C 4E 85 F1 | 	sub	fp, #28
33a40     A7 16 02 FB | 	rdlong	arg03, fp
33a44     18 4E 05 F1 | 	add	fp, #24
33a48     A7 00 68 FC | 	wrlong	#0, fp
33a4c     14 16 06 F1 | 	add	arg03, #20
33a50     0B 01 68 FC | 	wrlong	#0, arg03
33a54     14 4E 85 F1 | 	sub	fp, #20
33a58     A7 16 02 FB | 	rdlong	arg03, fp
33a5c     08 4E 85 F1 | 	sub	fp, #8
33a60     01 16 16 F2 | 	cmp	arg03, #1 wc
33a64     E4 03 90 CD |  if_b	jmp	#LR__5027
33a68     10 4E 05 F1 | 	add	fp, #16
33a6c     A7 16 02 FB | 	rdlong	arg03, fp
33a70     0A 16 06 F1 | 	add	arg03, #10
33a74     0B 19 E2 FA | 	rdword	arg04, arg03
33a78     09 18 66 F0 | 	shl	arg04, #9
33a7c     08 4E 05 F1 | 	add	fp, #8
33a80     A7 18 62 FC | 	wrlong	arg04, fp
33a84     08 4E 05 F1 | 	add	fp, #8
33a88     A7 18 02 FB | 	rdlong	arg04, fp
33a8c     20 4E 85 F1 | 	sub	fp, #32
33a90     01 18 16 F2 | 	cmp	arg04, #1 wc
33a94     AC 00 90 CD |  if_b	jmp	#LR__5012
33a98     08 4E 05 F1 | 	add	fp, #8
33a9c     A7 18 02 FB | 	rdlong	arg04, fp
33aa0     01 18 86 F1 | 	sub	arg04, #1
33aa4     10 4E 05 F1 | 	add	fp, #16
33aa8     A7 16 02 FB | 	rdlong	arg03, fp
33aac     0B 19 12 FD | 	qdiv	arg04, arg03
33ab0     08 4E 05 F1 | 	add	fp, #8
33ab4     A7 FA 01 FB | 	rdlong	result1, fp
33ab8     01 FA 85 F1 | 	sub	result1, #1
33abc     18 18 62 FD | 	getqx	arg04
33ac0     0B FB 11 FD | 	qdiv	result1, arg03
33ac4     20 4E 85 F1 | 	sub	fp, #32
33ac8     18 16 62 FD | 	getqx	arg03
33acc     0B 19 12 F2 | 	cmp	arg04, arg03 wc
33ad0     70 00 90 CD |  if_b	jmp	#LR__5012
33ad4     04 4E 05 F1 | 	add	fp, #4
33ad8     A7 16 02 FB | 	rdlong	arg03, fp
33adc     1C 4E 05 F1 | 	add	fp, #28
33ae0     A7 FA 01 FB | 	rdlong	result1, fp
33ae4     01 FA 85 F1 | 	sub	result1, #1
33ae8     08 4E 85 F1 | 	sub	fp, #8
33aec     A7 18 02 FB | 	rdlong	arg04, fp
33af0     01 18 86 F1 | 	sub	arg04, #1
33af4     0C FB 21 F5 | 	andn	result1, arg04
33af8     14 16 06 F1 | 	add	arg03, #20
33afc     0B FB 61 FC | 	wrlong	result1, arg03
33b00     10 4E 85 F1 | 	sub	fp, #16
33b04     A7 16 02 FB | 	rdlong	arg03, fp
33b08     04 4E 85 F1 | 	sub	fp, #4
33b0c     A7 18 02 FB | 	rdlong	arg04, fp
33b10     14 18 06 F1 | 	add	arg04, #20
33b14     0C 19 02 FB | 	rdlong	arg04, arg04
33b18     0C 17 82 F1 | 	sub	arg03, arg04
33b1c     04 4E 05 F1 | 	add	fp, #4
33b20     A7 16 62 FC | 	wrlong	arg03, fp
33b24     04 4E 85 F1 | 	sub	fp, #4
33b28     A7 16 02 FB | 	rdlong	arg03, fp
33b2c     18 16 06 F1 | 	add	arg03, #24
33b30     0B 17 02 FB | 	rdlong	arg03, arg03
33b34     10 4E 05 F1 | 	add	fp, #16
33b38     A7 16 62 FC | 	wrlong	arg03, fp
33b3c     14 4E 85 F1 | 	sub	fp, #20
33b40     D0 00 90 FD | 	jmp	#LR__5016
33b44                 | LR__5012
33b44     04 4E 05 F1 | 	add	fp, #4
33b48     A7 16 02 FB | 	rdlong	arg03, fp
33b4c     08 16 06 F1 | 	add	arg03, #8
33b50     0B 17 0A FB | 	rdlong	arg03, arg03 wz
33b54     10 4E 05 F1 | 	add	fp, #16
33b58     A7 16 62 FC | 	wrlong	arg03, fp
33b5c     14 4E 85 F1 | 	sub	fp, #20
33b60     94 00 90 5D |  if_ne	jmp	#LR__5015
33b64     04 4E 05 F1 | 	add	fp, #4
33b68     A7 12 02 FB | 	rdlong	arg01, fp
33b6c     04 4E 85 F1 | 	sub	fp, #4
33b70     00 14 06 F6 | 	mov	arg02, #0
33b74     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
33b78     14 4E 05 F1 | 	add	fp, #20
33b7c     A7 FA 61 FC | 	wrlong	result1, fp
33b80     14 4E 85 F1 | 	sub	fp, #20
33b84     01 FA 0D F2 | 	cmp	result1, #1 wz
33b88     1C 00 90 5D |  if_ne	jmp	#LR__5013
33b8c     04 4E 05 F1 | 	add	fp, #4
33b90     A7 16 02 FB | 	rdlong	arg03, fp
33b94     04 4E 85 F1 | 	sub	fp, #4
33b98     11 16 06 F1 | 	add	arg03, #17
33b9c     0B 05 48 FC | 	wrbyte	#2, arg03
33ba0     02 FA 05 F6 | 	mov	result1, #2
33ba4     5C 04 90 FD | 	jmp	#LR__5033
33ba8                 | LR__5013
33ba8     14 4E 05 F1 | 	add	fp, #20
33bac     A7 FA 01 FB | 	rdlong	result1, fp
33bb0     14 4E 85 F1 | 	sub	fp, #20
33bb4     FF FF 7F FF 
33bb8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
33bbc     1C 00 90 5D |  if_ne	jmp	#LR__5014
33bc0     04 4E 05 F1 | 	add	fp, #4
33bc4     A7 16 02 FB | 	rdlong	arg03, fp
33bc8     04 4E 85 F1 | 	sub	fp, #4
33bcc     11 16 06 F1 | 	add	arg03, #17
33bd0     0B 03 48 FC | 	wrbyte	#1, arg03
33bd4     01 FA 05 F6 | 	mov	result1, #1
33bd8     28 04 90 FD | 	jmp	#LR__5033
33bdc                 | LR__5014
33bdc     04 4E 05 F1 | 	add	fp, #4
33be0     A7 16 02 FB | 	rdlong	arg03, fp
33be4     10 4E 05 F1 | 	add	fp, #16
33be8     A7 18 02 FB | 	rdlong	arg04, fp
33bec     14 4E 85 F1 | 	sub	fp, #20
33bf0     08 16 06 F1 | 	add	arg03, #8
33bf4     0B 19 62 FC | 	wrlong	arg04, arg03
33bf8                 | LR__5015
33bf8     04 4E 05 F1 | 	add	fp, #4
33bfc     A7 16 02 FB | 	rdlong	arg03, fp
33c00     10 4E 05 F1 | 	add	fp, #16
33c04     A7 18 02 FB | 	rdlong	arg04, fp
33c08     14 4E 85 F1 | 	sub	fp, #20
33c0c     18 16 06 F1 | 	add	arg03, #24
33c10     0B 19 62 FC | 	wrlong	arg04, arg03
33c14                 | LR__5016
33c14     14 4E 05 F1 | 	add	fp, #20
33c18     A7 16 0A FB | 	rdlong	arg03, fp wz
33c1c     14 4E 85 F1 | 	sub	fp, #20
33c20     28 02 90 AD |  if_e	jmp	#LR__5026
33c24                 | ' 				while (ofs > bcs) {
33c24                 | LR__5017
33c24     08 4E 05 F1 | 	add	fp, #8
33c28     A7 18 02 FB | 	rdlong	arg04, fp
33c2c     10 4E 05 F1 | 	add	fp, #16
33c30     A7 16 02 FB | 	rdlong	arg03, fp
33c34     18 4E 85 F1 | 	sub	fp, #24
33c38     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
33c3c     68 01 90 ED |  if_be	jmp	#LR__5023
33c40     08 4E 05 F1 | 	add	fp, #8
33c44     A7 18 02 FB | 	rdlong	arg04, fp
33c48     10 4E 05 F1 | 	add	fp, #16
33c4c     A7 16 02 FB | 	rdlong	arg03, fp
33c50     0B 19 82 F1 | 	sub	arg04, arg03
33c54     10 4E 85 F1 | 	sub	fp, #16
33c58     A7 18 62 FC | 	wrlong	arg04, fp
33c5c     04 4E 85 F1 | 	sub	fp, #4
33c60     A7 18 02 FB | 	rdlong	arg04, fp
33c64     0C FB 01 F6 | 	mov	result1, arg04
33c68     14 18 06 F1 | 	add	arg04, #20
33c6c     0C 19 02 FB | 	rdlong	arg04, arg04
33c70     14 4E 05 F1 | 	add	fp, #20
33c74     A7 16 02 FB | 	rdlong	arg03, fp
33c78     0B 19 02 F1 | 	add	arg04, arg03
33c7c     14 FA 05 F1 | 	add	result1, #20
33c80     FD 18 62 FC | 	wrlong	arg04, result1
33c84     14 4E 85 F1 | 	sub	fp, #20
33c88     A7 16 02 FB | 	rdlong	arg03, fp
33c8c     04 4E 85 F1 | 	sub	fp, #4
33c90     10 16 06 F1 | 	add	arg03, #16
33c94     0B 17 C2 FA | 	rdbyte	arg03, arg03
33c98     02 16 CE F7 | 	test	arg03, #2 wz
33c9c     3C 00 90 AD |  if_e	jmp	#LR__5018
33ca0     04 4E 05 F1 | 	add	fp, #4
33ca4     A7 12 02 FB | 	rdlong	arg01, fp
33ca8     10 4E 05 F1 | 	add	fp, #16
33cac     A7 14 02 FB | 	rdlong	arg02, fp
33cb0     14 4E 85 F1 | 	sub	fp, #20
33cb4     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
33cb8     14 4E 05 F1 | 	add	fp, #20
33cbc     A7 FA 61 FC | 	wrlong	result1, fp
33cc0     00 FA 4D F2 | 	cmps	result1, #0 wz
33cc4     14 4E 85 F1 | 	sub	fp, #20
33cc8     08 4E 05 A1 |  if_e	add	fp, #8
33ccc     A7 00 68 AC |  if_e	wrlong	#0, fp
33cd0     08 4E 85 A1 |  if_e	sub	fp, #8
33cd4                 | ' 							ofs = 0; break;
33cd4     D0 00 90 AD |  if_e	jmp	#LR__5023
33cd8     24 00 90 FD | 	jmp	#LR__5019
33cdc                 | LR__5018
33cdc     04 4E 05 F1 | 	add	fp, #4
33ce0     A7 12 02 FB | 	rdlong	arg01, fp
33ce4     10 4E 05 F1 | 	add	fp, #16
33ce8     A7 14 02 FB | 	rdlong	arg02, fp
33cec     14 4E 85 F1 | 	sub	fp, #20
33cf0     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
33cf4     14 4E 05 F1 | 	add	fp, #20
33cf8     A7 FA 61 FC | 	wrlong	result1, fp
33cfc     14 4E 85 F1 | 	sub	fp, #20
33d00                 | LR__5019
33d00     14 4E 05 F1 | 	add	fp, #20
33d04     A7 16 02 FB | 	rdlong	arg03, fp
33d08     14 4E 85 F1 | 	sub	fp, #20
33d0c     FF FF 7F FF 
33d10     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
33d14     1C 00 90 5D |  if_ne	jmp	#LR__5020
33d18     04 4E 05 F1 | 	add	fp, #4
33d1c     A7 16 02 FB | 	rdlong	arg03, fp
33d20     04 4E 85 F1 | 	sub	fp, #4
33d24     11 16 06 F1 | 	add	arg03, #17
33d28     0B 03 48 FC | 	wrbyte	#1, arg03
33d2c     01 FA 05 F6 | 	mov	result1, #1
33d30     D0 02 90 FD | 	jmp	#LR__5033
33d34                 | LR__5020
33d34     14 4E 05 F1 | 	add	fp, #20
33d38     A7 16 02 FB | 	rdlong	arg03, fp
33d3c     14 4E 85 F1 | 	sub	fp, #20
33d40     02 16 16 F2 | 	cmp	arg03, #2 wc
33d44     24 00 90 CD |  if_b	jmp	#LR__5021
33d48     10 4E 05 F1 | 	add	fp, #16
33d4c     A7 18 02 FB | 	rdlong	arg04, fp
33d50     04 4E 05 F1 | 	add	fp, #4
33d54     A7 16 02 FB | 	rdlong	arg03, fp
33d58     14 4E 85 F1 | 	sub	fp, #20
33d5c     18 18 06 F1 | 	add	arg04, #24
33d60     0C 19 02 FB | 	rdlong	arg04, arg04
33d64     0C 17 12 F2 | 	cmp	arg03, arg04 wc
33d68     1C 00 90 CD |  if_b	jmp	#LR__5022
33d6c                 | LR__5021
33d6c     04 4E 05 F1 | 	add	fp, #4
33d70     A7 16 02 FB | 	rdlong	arg03, fp
33d74     04 4E 85 F1 | 	sub	fp, #4
33d78     11 16 06 F1 | 	add	arg03, #17
33d7c     0B 05 48 FC | 	wrbyte	#2, arg03
33d80     02 FA 05 F6 | 	mov	result1, #2
33d84     7C 02 90 FD | 	jmp	#LR__5033
33d88                 | LR__5022
33d88     04 4E 05 F1 | 	add	fp, #4
33d8c     A7 18 02 FB | 	rdlong	arg04, fp
33d90     10 4E 05 F1 | 	add	fp, #16
33d94     A7 16 02 FB | 	rdlong	arg03, fp
33d98     14 4E 85 F1 | 	sub	fp, #20
33d9c     18 18 06 F1 | 	add	arg04, #24
33da0     0C 17 62 FC | 	wrlong	arg03, arg04
33da4     7C FE 9F FD | 	jmp	#LR__5017
33da8                 | LR__5023
33da8     04 4E 05 F1 | 	add	fp, #4
33dac     A7 16 02 FB | 	rdlong	arg03, fp
33db0     0B 13 02 F6 | 	mov	arg01, arg03
33db4     14 16 06 F1 | 	add	arg03, #20
33db8     0B 15 02 FB | 	rdlong	arg02, arg03
33dbc     04 4E 05 F1 | 	add	fp, #4
33dc0     A7 16 02 FB | 	rdlong	arg03, fp
33dc4     0B 15 02 F1 | 	add	arg02, arg03
33dc8     14 12 06 F1 | 	add	arg01, #20
33dcc     09 15 62 FC | 	wrlong	arg02, arg01
33dd0     A7 16 02 FB | 	rdlong	arg03, fp
33dd4     08 4E 85 F1 | 	sub	fp, #8
33dd8     FF 17 CE F7 | 	test	arg03, #511 wz
33ddc     6C 00 90 AD |  if_e	jmp	#LR__5025
33de0     10 4E 05 F1 | 	add	fp, #16
33de4     A7 12 02 FB | 	rdlong	arg01, fp
33de8     04 4E 05 F1 | 	add	fp, #4
33dec     A7 14 02 FB | 	rdlong	arg02, fp
33df0     14 4E 85 F1 | 	sub	fp, #20
33df4     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
33df8     1C 4E 05 F1 | 	add	fp, #28
33dfc     A7 FA 61 FC | 	wrlong	result1, fp
33e00     1C 4E 85 F1 | 	sub	fp, #28
33e04     00 FA 0D F2 | 	cmp	result1, #0 wz
33e08     1C 00 90 5D |  if_ne	jmp	#LR__5024
33e0c     04 4E 05 F1 | 	add	fp, #4
33e10     A7 16 02 FB | 	rdlong	arg03, fp
33e14     04 4E 85 F1 | 	sub	fp, #4
33e18     11 16 06 F1 | 	add	arg03, #17
33e1c     0B 05 48 FC | 	wrbyte	#2, arg03
33e20     02 FA 05 F6 | 	mov	result1, #2
33e24     DC 01 90 FD | 	jmp	#LR__5033
33e28                 | LR__5024
33e28     1C 4E 05 F1 | 	add	fp, #28
33e2c     A7 18 02 FB | 	rdlong	arg04, fp
33e30     14 4E 85 F1 | 	sub	fp, #20
33e34     A7 16 02 FB | 	rdlong	arg03, fp
33e38     09 16 46 F0 | 	shr	arg03, #9
33e3c     0B 19 02 F1 | 	add	arg04, arg03
33e40     14 4E 05 F1 | 	add	fp, #20
33e44     A7 18 62 FC | 	wrlong	arg04, fp
33e48     1C 4E 85 F1 | 	sub	fp, #28
33e4c                 | LR__5025
33e4c                 | LR__5026
33e4c                 | LR__5027
33e4c     04 4E 05 F1 | 	add	fp, #4
33e50     A7 18 02 FB | 	rdlong	arg04, fp
33e54     0C 17 02 F6 | 	mov	arg03, arg04
33e58     04 4E 85 F1 | 	sub	fp, #4
33e5c     14 16 06 F1 | 	add	arg03, #20
33e60     0B 17 02 FB | 	rdlong	arg03, arg03
33e64     0C 18 06 F1 | 	add	arg04, #12
33e68     0C 19 02 FB | 	rdlong	arg04, arg04
33e6c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
33e70     3C 00 90 ED |  if_be	jmp	#LR__5028
33e74     04 4E 05 F1 | 	add	fp, #4
33e78     A7 18 02 FB | 	rdlong	arg04, fp
33e7c     0C 17 02 F6 | 	mov	arg03, arg04
33e80     14 18 06 F1 | 	add	arg04, #20
33e84     0C 19 02 FB | 	rdlong	arg04, arg04
33e88     0C 16 06 F1 | 	add	arg03, #12
33e8c     0B 19 62 FC | 	wrlong	arg04, arg03
33e90     A7 18 02 FB | 	rdlong	arg04, fp
33e94     0C 17 02 F6 | 	mov	arg03, arg04
33e98     04 4E 85 F1 | 	sub	fp, #4
33e9c     10 18 06 F1 | 	add	arg04, #16
33ea0     0C 19 C2 FA | 	rdbyte	arg04, arg04
33ea4     40 18 46 F5 | 	or	arg04, #64
33ea8     10 16 06 F1 | 	add	arg03, #16
33eac     0B 19 42 FC | 	wrbyte	arg04, arg03
33eb0                 | LR__5028
33eb0     04 4E 05 F1 | 	add	fp, #4
33eb4     A7 16 02 FB | 	rdlong	arg03, fp
33eb8     04 4E 85 F1 | 	sub	fp, #4
33ebc     14 16 06 F1 | 	add	arg03, #20
33ec0     0B 17 02 FB | 	rdlong	arg03, arg03
33ec4     FF 17 CE F7 | 	test	arg03, #511 wz
33ec8     2C 01 90 AD |  if_e	jmp	#LR__5032
33ecc     04 4E 05 F1 | 	add	fp, #4
33ed0     A7 18 02 FB | 	rdlong	arg04, fp
33ed4     18 4E 05 F1 | 	add	fp, #24
33ed8     A7 16 02 FB | 	rdlong	arg03, fp
33edc     1C 4E 85 F1 | 	sub	fp, #28
33ee0     1C 18 06 F1 | 	add	arg04, #28
33ee4     0C 19 02 FB | 	rdlong	arg04, arg04
33ee8     0C 17 0A F2 | 	cmp	arg03, arg04 wz
33eec     08 01 90 AD |  if_e	jmp	#LR__5032
33ef0     04 4E 05 F1 | 	add	fp, #4
33ef4     A7 16 02 FB | 	rdlong	arg03, fp
33ef8     04 4E 85 F1 | 	sub	fp, #4
33efc     10 16 06 F1 | 	add	arg03, #16
33f00     0B 17 C2 FA | 	rdbyte	arg03, arg03
33f04     80 16 CE F7 | 	test	arg03, #128 wz
33f08     7C 00 90 AD |  if_e	jmp	#LR__5030
33f0c     10 4E 05 F1 | 	add	fp, #16
33f10     A7 16 02 FB | 	rdlong	arg03, fp
33f14     01 16 06 F1 | 	add	arg03, #1
33f18     0B 13 C2 FA | 	rdbyte	arg01, arg03
33f1c     0C 4E 85 F1 | 	sub	fp, #12
33f20     A7 16 02 FB | 	rdlong	arg03, fp
33f24     0B 15 02 F6 | 	mov	arg02, arg03
33f28     28 14 06 F1 | 	add	arg02, #40
33f2c     04 4E 85 F1 | 	sub	fp, #4
33f30     1C 16 06 F1 | 	add	arg03, #28
33f34     0B 17 02 FB | 	rdlong	arg03, arg03
33f38     01 18 06 F6 | 	mov	arg04, #1
33f3c     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
33f40     00 FA 0D F2 | 	cmp	result1, #0 wz
33f44     1C 00 90 AD |  if_e	jmp	#LR__5029
33f48     04 4E 05 F1 | 	add	fp, #4
33f4c     A7 16 02 FB | 	rdlong	arg03, fp
33f50     04 4E 85 F1 | 	sub	fp, #4
33f54     11 16 06 F1 | 	add	arg03, #17
33f58     0B 03 48 FC | 	wrbyte	#1, arg03
33f5c     01 FA 05 F6 | 	mov	result1, #1
33f60     A0 00 90 FD | 	jmp	#LR__5033
33f64                 | LR__5029
33f64     04 4E 05 F1 | 	add	fp, #4
33f68     A7 18 02 FB | 	rdlong	arg04, fp
33f6c     0C 17 02 F6 | 	mov	arg03, arg04
33f70     04 4E 85 F1 | 	sub	fp, #4
33f74     10 18 06 F1 | 	add	arg04, #16
33f78     0C 19 C2 FA | 	rdbyte	arg04, arg04
33f7c     7F 18 06 F5 | 	and	arg04, #127
33f80     10 16 06 F1 | 	add	arg03, #16
33f84     0B 19 42 FC | 	wrbyte	arg04, arg03
33f88                 | LR__5030
33f88     10 4E 05 F1 | 	add	fp, #16
33f8c     A7 16 02 FB | 	rdlong	arg03, fp
33f90     01 16 06 F1 | 	add	arg03, #1
33f94     0B 13 C2 FA | 	rdbyte	arg01, arg03
33f98     0C 4E 85 F1 | 	sub	fp, #12
33f9c     A7 14 02 FB | 	rdlong	arg02, fp
33fa0     28 14 06 F1 | 	add	arg02, #40
33fa4     18 4E 05 F1 | 	add	fp, #24
33fa8     A7 16 02 FB | 	rdlong	arg03, fp
33fac     1C 4E 85 F1 | 	sub	fp, #28
33fb0     01 18 06 F6 | 	mov	arg04, #1
33fb4     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
33fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
33fbc     1C 00 90 AD |  if_e	jmp	#LR__5031
33fc0     04 4E 05 F1 | 	add	fp, #4
33fc4     A7 16 02 FB | 	rdlong	arg03, fp
33fc8     04 4E 85 F1 | 	sub	fp, #4
33fcc     11 16 06 F1 | 	add	arg03, #17
33fd0     0B 03 48 FC | 	wrbyte	#1, arg03
33fd4     01 FA 05 F6 | 	mov	result1, #1
33fd8     28 00 90 FD | 	jmp	#LR__5033
33fdc                 | LR__5031
33fdc     04 4E 05 F1 | 	add	fp, #4
33fe0     A7 18 02 FB | 	rdlong	arg04, fp
33fe4     18 4E 05 F1 | 	add	fp, #24
33fe8     A7 16 02 FB | 	rdlong	arg03, fp
33fec     1C 4E 85 F1 | 	sub	fp, #28
33ff0     1C 18 06 F1 | 	add	arg04, #28
33ff4     0C 17 62 FC | 	wrlong	arg03, arg04
33ff8                 | LR__5032
33ff8                 | ' 
33ff8                 | ' 			fp->sect = nsect;
33ff8                 | ' 		}
33ff8                 | ' 	}
33ff8                 | ' 
33ff8                 | ' 	return res ;
33ff8     0C 4E 05 F1 | 	add	fp, #12
33ffc     A7 FA 01 FB | 	rdlong	result1, fp
34000     0C 4E 85 F1 | 	sub	fp, #12
34004                 | LR__5033
34004     A7 F0 03 F6 | 	mov	ptra, fp
34008     B2 00 A0 FD | 	call	#popregs_
3400c                 | _fatfs_cc_f_lseek_ret
3400c     2D 00 64 FD | 	ret
34010                 | 
34010                 | _fatfs_cc_f_opendir
34010     01 4A 05 F6 | 	mov	COUNT_, #1
34014     A8 00 A0 FD | 	call	#pushregs_
34018     14 F0 07 F1 | 	add	ptra, #20
3401c     04 4E 05 F1 | 	add	fp, #4
34020     A7 12 62 FC | 	wrlong	arg01, fp
34024     04 4E 05 F1 | 	add	fp, #4
34028     A7 14 62 FC | 	wrlong	arg02, fp
3402c     04 4E 85 F1 | 	sub	fp, #4
34030     A7 16 0A FB | 	rdlong	arg03, fp wz
34034     04 4E 85 F1 | 	sub	fp, #4
34038     09 FA 05 A6 |  if_e	mov	result1, #9
3403c     78 01 90 AD |  if_e	jmp	#LR__5046
34040     08 4E 05 F1 | 	add	fp, #8
34044     A7 12 02 F6 | 	mov	arg01, fp
34048     08 4E 05 F1 | 	add	fp, #8
3404c     A7 14 02 F6 | 	mov	arg02, fp
34050     10 4E 85 F1 | 	sub	fp, #16
34054     00 16 06 F6 | 	mov	arg03, #0
34058     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
3405c     0C 4E 05 F1 | 	add	fp, #12
34060     A7 FA 61 FC | 	wrlong	result1, fp
34064     0C 4E 85 F1 | 	sub	fp, #12
34068     00 FA 0D F2 | 	cmp	result1, #0 wz
3406c     20 01 90 5D |  if_ne	jmp	#LR__5045
34070     04 4E 05 F1 | 	add	fp, #4
34074     A7 16 02 FB | 	rdlong	arg03, fp
34078     0C 4E 05 F1 | 	add	fp, #12
3407c     A7 FA 01 FB | 	rdlong	result1, fp
34080     0B FB 61 FC | 	wrlong	result1, arg03
34084     0C 4E 85 F1 | 	sub	fp, #12
34088     A7 12 02 FB | 	rdlong	arg01, fp
3408c     04 4E 05 F1 | 	add	fp, #4
34090     A7 14 02 FB | 	rdlong	arg02, fp
34094     08 4E 85 F1 | 	sub	fp, #8
34098     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
3409c     0C 4E 05 F1 | 	add	fp, #12
340a0     A7 FA 61 FC | 	wrlong	result1, fp
340a4     0C 4E 85 F1 | 	sub	fp, #12
340a8     00 FA 0D F2 | 	cmp	result1, #0 wz
340ac     C4 00 90 5D |  if_ne	jmp	#LR__5044
340b0     04 4E 05 F1 | 	add	fp, #4
340b4     A7 16 02 FB | 	rdlong	arg03, fp
340b8     04 4E 85 F1 | 	sub	fp, #4
340bc     2B 16 06 F1 | 	add	arg03, #43
340c0     0B 17 C2 FA | 	rdbyte	arg03, arg03
340c4     80 16 CE F7 | 	test	arg03, #128 wz
340c8     58 00 90 5D |  if_ne	jmp	#LR__5042
340cc     04 4E 05 F1 | 	add	fp, #4
340d0     A7 16 02 FB | 	rdlong	arg03, fp
340d4     04 4E 85 F1 | 	sub	fp, #4
340d8     06 16 06 F1 | 	add	arg03, #6
340dc     0B 17 C2 FA | 	rdbyte	arg03, arg03
340e0     10 16 CE F7 | 	test	arg03, #16 wz
340e4     30 00 90 AD |  if_e	jmp	#LR__5040
340e8     04 4E 05 F1 | 	add	fp, #4
340ec     A7 16 02 FB | 	rdlong	arg03, fp
340f0     0B 27 02 F6 | 	mov	local01, arg03
340f4     0C 4E 05 F1 | 	add	fp, #12
340f8     A7 12 02 FB | 	rdlong	arg01, fp
340fc     10 4E 85 F1 | 	sub	fp, #16
34100     1C 16 06 F1 | 	add	arg03, #28
34104     0B 15 02 FB | 	rdlong	arg02, arg03
34108     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
3410c     08 26 06 F1 | 	add	local01, #8
34110     13 FB 61 FC | 	wrlong	result1, local01
34114     0C 00 90 FD | 	jmp	#LR__5041
34118                 | LR__5040
34118     0C 4E 05 F1 | 	add	fp, #12
3411c     A7 0A 68 FC | 	wrlong	#5, fp
34120     0C 4E 85 F1 | 	sub	fp, #12
34124                 | LR__5041
34124                 | LR__5042
34124     0C 4E 05 F1 | 	add	fp, #12
34128     A7 26 0A FB | 	rdlong	local01, fp wz
3412c     0C 4E 85 F1 | 	sub	fp, #12
34130     40 00 90 5D |  if_ne	jmp	#LR__5043
34134     04 4E 05 F1 | 	add	fp, #4
34138     A7 26 02 FB | 	rdlong	local01, fp
3413c     0C 4E 05 F1 | 	add	fp, #12
34140     A7 16 02 FB | 	rdlong	arg03, fp
34144     06 16 06 F1 | 	add	arg03, #6
34148     0B 17 E2 FA | 	rdword	arg03, arg03
3414c     04 26 06 F1 | 	add	local01, #4
34150     13 17 52 FC | 	wrword	arg03, local01
34154     0C 4E 85 F1 | 	sub	fp, #12
34158     A7 12 02 FB | 	rdlong	arg01, fp
3415c     04 4E 85 F1 | 	sub	fp, #4
34160     00 14 06 F6 | 	mov	arg02, #0
34164     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
34168     0C 4E 05 F1 | 	add	fp, #12
3416c     A7 FA 61 FC | 	wrlong	result1, fp
34170     0C 4E 85 F1 | 	sub	fp, #12
34174                 | LR__5043
34174                 | LR__5044
34174     0C 4E 05 F1 | 	add	fp, #12
34178     A7 26 02 FB | 	rdlong	local01, fp
3417c     0C 4E 85 F1 | 	sub	fp, #12
34180     04 26 0E F2 | 	cmp	local01, #4 wz
34184     0C 4E 05 A1 |  if_e	add	fp, #12
34188     A7 0A 68 AC |  if_e	wrlong	#5, fp
3418c     0C 4E 85 A1 |  if_e	sub	fp, #12
34190                 | LR__5045
34190     0C 4E 05 F1 | 	add	fp, #12
34194     A7 26 0A FB | 	rdlong	local01, fp wz
34198     0C 4E 85 F1 | 	sub	fp, #12
3419c     04 4E 05 51 |  if_ne	add	fp, #4
341a0     A7 26 02 5B |  if_ne	rdlong	local01, fp
341a4     04 4E 85 51 |  if_ne	sub	fp, #4
341a8     13 01 68 5C |  if_ne	wrlong	#0, local01
341ac                 | ' 
341ac                 | ' 	return res ;
341ac     0C 4E 05 F1 | 	add	fp, #12
341b0     A7 FA 01 FB | 	rdlong	result1, fp
341b4     0C 4E 85 F1 | 	sub	fp, #12
341b8                 | LR__5046
341b8     A7 F0 03 F6 | 	mov	ptra, fp
341bc     B2 00 A0 FD | 	call	#popregs_
341c0                 | _fatfs_cc_f_opendir_ret
341c0     2D 00 64 FD | 	ret
341c4                 | 
341c4                 | _fatfs_cc_f_closedir
341c4     00 4A 05 F6 | 	mov	COUNT_, #0
341c8     A8 00 A0 FD | 	call	#pushregs_
341cc     10 F0 07 F1 | 	add	ptra, #16
341d0     04 4E 05 F1 | 	add	fp, #4
341d4     A7 12 62 FC | 	wrlong	arg01, fp
341d8     08 4E 05 F1 | 	add	fp, #8
341dc     A7 14 02 F6 | 	mov	arg02, fp
341e0     0C 4E 85 F1 | 	sub	fp, #12
341e4     C0 DD BF FD | 	call	#_fatfs_cc_validate
341e8     08 4E 05 F1 | 	add	fp, #8
341ec     A7 FA 61 FC | 	wrlong	result1, fp
341f0     08 4E 85 F1 | 	sub	fp, #8
341f4     00 FA 0D F2 | 	cmp	result1, #0 wz
341f8     04 4E 05 A1 |  if_e	add	fp, #4
341fc     A7 FA 01 AB |  if_e	rdlong	result1, fp
34200     04 4E 85 A1 |  if_e	sub	fp, #4
34204     FD 00 68 AC |  if_e	wrlong	#0, result1
34208                 | ' 
34208                 | ' 
34208                 | ' 
34208                 | ' 
34208                 | ' 		dp->obj.fs = 0;
34208                 | ' #line 4633 "ff.c"
34208                 | ' 	}
34208                 | ' 	return res;
34208     08 4E 05 F1 | 	add	fp, #8
3420c     A7 FA 01 FB | 	rdlong	result1, fp
34210     08 4E 85 F1 | 	sub	fp, #8
34214     A7 F0 03 F6 | 	mov	ptra, fp
34218     B2 00 A0 FD | 	call	#popregs_
3421c                 | _fatfs_cc_f_closedir_ret
3421c     2D 00 64 FD | 	ret
34220                 | 
34220                 | _fatfs_cc_f_readdir
34220     00 4A 05 F6 | 	mov	COUNT_, #0
34224     A8 00 A0 FD | 	call	#pushregs_
34228     14 F0 07 F1 | 	add	ptra, #20
3422c     04 4E 05 F1 | 	add	fp, #4
34230     A7 12 62 FC | 	wrlong	arg01, fp
34234     04 4E 05 F1 | 	add	fp, #4
34238     A7 14 62 FC | 	wrlong	arg02, fp
3423c     04 4E 85 F1 | 	sub	fp, #4
34240     A7 12 02 FB | 	rdlong	arg01, fp
34244     0C 4E 05 F1 | 	add	fp, #12
34248     A7 14 02 F6 | 	mov	arg02, fp
3424c     10 4E 85 F1 | 	sub	fp, #16
34250     54 DD BF FD | 	call	#_fatfs_cc_validate
34254     0C 4E 05 F1 | 	add	fp, #12
34258     A7 FA 61 FC | 	wrlong	result1, fp
3425c     0C 4E 85 F1 | 	sub	fp, #12
34260     00 FA 0D F2 | 	cmp	result1, #0 wz
34264     BC 00 90 5D |  if_ne	jmp	#LR__5053
34268     08 4E 05 F1 | 	add	fp, #8
3426c     A7 FA 09 FB | 	rdlong	result1, fp wz
34270     08 4E 85 F1 | 	sub	fp, #8
34274     24 00 90 5D |  if_ne	jmp	#LR__5050
34278     04 4E 05 F1 | 	add	fp, #4
3427c     A7 12 02 FB | 	rdlong	arg01, fp
34280     04 4E 85 F1 | 	sub	fp, #4
34284     00 14 06 F6 | 	mov	arg02, #0
34288     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
3428c     0C 4E 05 F1 | 	add	fp, #12
34290     A7 FA 61 FC | 	wrlong	result1, fp
34294     0C 4E 85 F1 | 	sub	fp, #12
34298     88 00 90 FD | 	jmp	#LR__5052
3429c                 | LR__5050
3429c     04 4E 05 F1 | 	add	fp, #4
342a0     A7 12 02 FB | 	rdlong	arg01, fp
342a4     04 4E 85 F1 | 	sub	fp, #4
342a8     00 14 06 F6 | 	mov	arg02, #0
342ac     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
342b0     0C 4E 05 F1 | 	add	fp, #12
342b4     A7 FA 61 FC | 	wrlong	result1, fp
342b8     0C 4E 85 F1 | 	sub	fp, #12
342bc     04 FA 0D F2 | 	cmp	result1, #4 wz
342c0     0C 4E 05 A1 |  if_e	add	fp, #12
342c4     A7 00 68 AC |  if_e	wrlong	#0, fp
342c8     0C 4E 85 A1 |  if_e	sub	fp, #12
342cc     0C 4E 05 F1 | 	add	fp, #12
342d0     A7 FA 09 FB | 	rdlong	result1, fp wz
342d4     0C 4E 85 F1 | 	sub	fp, #12
342d8     48 00 90 5D |  if_ne	jmp	#LR__5051
342dc     04 4E 05 F1 | 	add	fp, #4
342e0     A7 12 02 FB | 	rdlong	arg01, fp
342e4     04 4E 05 F1 | 	add	fp, #4
342e8     A7 14 02 FB | 	rdlong	arg02, fp
342ec     08 4E 85 F1 | 	sub	fp, #8
342f0     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
342f4     04 4E 05 F1 | 	add	fp, #4
342f8     A7 12 02 FB | 	rdlong	arg01, fp
342fc     04 4E 85 F1 | 	sub	fp, #4
34300     00 14 06 F6 | 	mov	arg02, #0
34304     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
34308     0C 4E 05 F1 | 	add	fp, #12
3430c     A7 FA 61 FC | 	wrlong	result1, fp
34310     0C 4E 85 F1 | 	sub	fp, #12
34314     04 FA 0D F2 | 	cmp	result1, #4 wz
34318     0C 4E 05 A1 |  if_e	add	fp, #12
3431c     A7 00 68 AC |  if_e	wrlong	#0, fp
34320     0C 4E 85 A1 |  if_e	sub	fp, #12
34324                 | LR__5051
34324                 | LR__5052
34324                 | LR__5053
34324                 | ' 			}
34324                 | ' 			;
34324                 | ' 		}
34324                 | ' 	}
34324                 | ' 	return res ;
34324     0C 4E 05 F1 | 	add	fp, #12
34328     A7 FA 01 FB | 	rdlong	result1, fp
3432c     0C 4E 85 F1 | 	sub	fp, #12
34330     A7 F0 03 F6 | 	mov	ptra, fp
34334     B2 00 A0 FD | 	call	#popregs_
34338                 | _fatfs_cc_f_readdir_ret
34338     2D 00 64 FD | 	ret
3433c                 | 
3433c                 | _fatfs_cc_f_stat
3433c     00 4A 05 F6 | 	mov	COUNT_, #0
34340     A8 00 A0 FD | 	call	#pushregs_
34344     40 F0 07 F1 | 	add	ptra, #64
34348     04 4E 05 F1 | 	add	fp, #4
3434c     A7 12 62 FC | 	wrlong	arg01, fp
34350     04 4E 05 F1 | 	add	fp, #4
34354     A7 14 62 FC | 	wrlong	arg02, fp
34358     04 4E 85 F1 | 	sub	fp, #4
3435c     A7 12 02 F6 | 	mov	arg01, fp
34360     0C 4E 05 F1 | 	add	fp, #12
34364     A7 14 02 F6 | 	mov	arg02, fp
34368     10 4E 85 F1 | 	sub	fp, #16
3436c     00 16 06 F6 | 	mov	arg03, #0
34370     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
34374     0C 4E 05 F1 | 	add	fp, #12
34378     A7 FA 61 FC | 	wrlong	result1, fp
3437c     0C 4E 85 F1 | 	sub	fp, #12
34380     00 FA 0D F2 | 	cmp	result1, #0 wz
34384     74 00 90 5D |  if_ne	jmp	#LR__5063
34388     10 4E 05 F1 | 	add	fp, #16
3438c     A7 12 02 F6 | 	mov	arg01, fp
34390     0C 4E 85 F1 | 	sub	fp, #12
34394     A7 14 02 FB | 	rdlong	arg02, fp
34398     04 4E 85 F1 | 	sub	fp, #4
3439c     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
343a0     0C 4E 05 F1 | 	add	fp, #12
343a4     A7 FA 61 FC | 	wrlong	result1, fp
343a8     0C 4E 85 F1 | 	sub	fp, #12
343ac     00 FA 0D F2 | 	cmp	result1, #0 wz
343b0     48 00 90 5D |  if_ne	jmp	#LR__5062
343b4     3B 4E 05 F1 | 	add	fp, #59
343b8     A7 FA C1 FA | 	rdbyte	result1, fp
343bc     3B 4E 85 F1 | 	sub	fp, #59
343c0     80 FA CD F7 | 	test	result1, #128 wz
343c4     0C 4E 05 51 |  if_ne	add	fp, #12
343c8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
343cc     0C 4E 85 51 |  if_ne	sub	fp, #12
343d0     28 00 90 5D |  if_ne	jmp	#LR__5061
343d4     08 4E 05 F1 | 	add	fp, #8
343d8     A7 FA 09 FB | 	rdlong	result1, fp wz
343dc     08 4E 85 F1 | 	sub	fp, #8
343e0     18 00 90 AD |  if_e	jmp	#LR__5060
343e4     10 4E 05 F1 | 	add	fp, #16
343e8     A7 12 02 F6 | 	mov	arg01, fp
343ec     08 4E 85 F1 | 	sub	fp, #8
343f0     A7 14 02 FB | 	rdlong	arg02, fp
343f4     08 4E 85 F1 | 	sub	fp, #8
343f8     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
343fc                 | LR__5060
343fc                 | LR__5061
343fc                 | LR__5062
343fc                 | LR__5063
343fc                 | ' 			}
343fc                 | ' 		}
343fc                 | ' 		;
343fc                 | ' 	}
343fc                 | ' 
343fc                 | ' 	return res ;
343fc     0C 4E 05 F1 | 	add	fp, #12
34400     A7 FA 01 FB | 	rdlong	result1, fp
34404     0C 4E 85 F1 | 	sub	fp, #12
34408     A7 F0 03 F6 | 	mov	ptra, fp
3440c     B2 00 A0 FD | 	call	#popregs_
34410                 | _fatfs_cc_f_stat_ret
34410     2D 00 64 FD | 	ret
34414                 | 
34414                 | _fatfs_cc_f_unlink
34414     00 4A 05 F6 | 	mov	COUNT_, #0
34418     A8 00 A0 FD | 	call	#pushregs_
3441c     74 F0 07 F1 | 	add	ptra, #116
34420     04 4E 05 F1 | 	add	fp, #4
34424     A7 12 62 FC | 	wrlong	arg01, fp
34428     68 4E 05 F1 | 	add	fp, #104
3442c     A7 00 68 FC | 	wrlong	#0, fp
34430     68 4E 85 F1 | 	sub	fp, #104
34434     A7 12 02 F6 | 	mov	arg01, fp
34438     6C 4E 05 F1 | 	add	fp, #108
3443c     A7 14 02 F6 | 	mov	arg02, fp
34440     70 4E 85 F1 | 	sub	fp, #112
34444     02 16 06 F6 | 	mov	arg03, #2
34448     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
3444c     08 4E 05 F1 | 	add	fp, #8
34450     A7 FA 61 FC | 	wrlong	result1, fp
34454     08 4E 85 F1 | 	sub	fp, #8
34458     00 FA 0D F2 | 	cmp	result1, #0 wz
3445c     E4 01 90 5D |  if_ne	jmp	#LR__5078
34460     70 4E 05 F1 | 	add	fp, #112
34464     A7 16 02 FB | 	rdlong	arg03, fp
34468     64 4E 85 F1 | 	sub	fp, #100
3446c     A7 16 62 FC | 	wrlong	arg03, fp
34470     A7 12 02 F6 | 	mov	arg01, fp
34474     08 4E 85 F1 | 	sub	fp, #8
34478     A7 14 02 FB | 	rdlong	arg02, fp
3447c     04 4E 85 F1 | 	sub	fp, #4
34480     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
34484     08 4E 05 F1 | 	add	fp, #8
34488     A7 FA 61 FC | 	wrlong	result1, fp
3448c     00 FA 4D F2 | 	cmps	result1, #0 wz
34490     08 4E 85 F1 | 	sub	fp, #8
34494     AC 01 90 5D |  if_ne	jmp	#LR__5077
34498     37 4E 05 F1 | 	add	fp, #55
3449c     A7 FA C1 FA | 	rdbyte	result1, fp
344a0     37 4E 85 F1 | 	sub	fp, #55
344a4     80 FA CD F7 | 	test	result1, #128 wz
344a8     08 4E 05 51 |  if_ne	add	fp, #8
344ac     A7 0C 68 5C |  if_ne	wrlong	#6, fp
344b0     08 4E 85 51 |  if_ne	sub	fp, #8
344b4     1C 00 90 5D |  if_ne	jmp	#LR__5070
344b8     12 4E 05 F1 | 	add	fp, #18
344bc     A7 FA C1 FA | 	rdbyte	result1, fp
344c0     12 4E 85 F1 | 	sub	fp, #18
344c4     01 FA CD F7 | 	test	result1, #1 wz
344c8     08 4E 05 51 |  if_ne	add	fp, #8
344cc     A7 0E 68 5C |  if_ne	wrlong	#7, fp
344d0     08 4E 85 51 |  if_ne	sub	fp, #8
344d4                 | LR__5070
344d4     08 4E 05 F1 | 	add	fp, #8
344d8     A7 FA 09 FB | 	rdlong	result1, fp wz
344dc     08 4E 85 F1 | 	sub	fp, #8
344e0     C8 00 90 5D |  if_ne	jmp	#LR__5073
344e4     70 4E 05 F1 | 	add	fp, #112
344e8     A7 12 02 FB | 	rdlong	arg01, fp
344ec     48 4E 85 F1 | 	sub	fp, #72
344f0     A7 14 02 FB | 	rdlong	arg02, fp
344f4     28 4E 85 F1 | 	sub	fp, #40
344f8     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
344fc     6C 4E 05 F1 | 	add	fp, #108
34500     A7 FA 61 FC | 	wrlong	result1, fp
34504     5A 4E 85 F1 | 	sub	fp, #90
34508     A7 FA C1 FA | 	rdbyte	result1, fp
3450c     12 4E 85 F1 | 	sub	fp, #18
34510     10 FA CD F7 | 	test	result1, #16 wz
34514     94 00 90 AD |  if_e	jmp	#LR__5072
34518     70 4E 05 F1 | 	add	fp, #112
3451c     A7 FA 01 FB | 	rdlong	result1, fp
34520     34 4E 85 F1 | 	sub	fp, #52
34524     A7 FA 61 FC | 	wrlong	result1, fp
34528     30 4E 05 F1 | 	add	fp, #48
3452c     A7 16 02 FB | 	rdlong	arg03, fp
34530     28 4E 85 F1 | 	sub	fp, #40
34534     A7 16 62 FC | 	wrlong	arg03, fp
34538     08 4E 85 F1 | 	sub	fp, #8
3453c     A7 12 02 F6 | 	mov	arg01, fp
34540     3C 4E 85 F1 | 	sub	fp, #60
34544     00 14 06 F6 | 	mov	arg02, #0
34548     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
3454c     08 4E 05 F1 | 	add	fp, #8
34550     A7 FA 61 FC | 	wrlong	result1, fp
34554     08 4E 85 F1 | 	sub	fp, #8
34558     00 FA 0D F2 | 	cmp	result1, #0 wz
3455c     4C 00 90 5D |  if_ne	jmp	#LR__5071
34560     3C 4E 05 F1 | 	add	fp, #60
34564     A7 12 02 F6 | 	mov	arg01, fp
34568     3C 4E 85 F1 | 	sub	fp, #60
3456c     00 14 06 F6 | 	mov	arg02, #0
34570     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
34574     08 4E 05 F1 | 	add	fp, #8
34578     A7 FA 61 FC | 	wrlong	result1, fp
3457c     00 FA 4D F2 | 	cmps	result1, #0 wz
34580     08 4E 85 F1 | 	sub	fp, #8
34584     08 4E 05 A1 |  if_e	add	fp, #8
34588     A7 0E 68 AC |  if_e	wrlong	#7, fp
3458c     08 4E 85 A1 |  if_e	sub	fp, #8
34590     08 4E 05 F1 | 	add	fp, #8
34594     A7 FA 01 FB | 	rdlong	result1, fp
34598     08 4E 85 F1 | 	sub	fp, #8
3459c     04 FA 0D F2 | 	cmp	result1, #4 wz
345a0     08 4E 05 A1 |  if_e	add	fp, #8
345a4     A7 00 68 AC |  if_e	wrlong	#0, fp
345a8     08 4E 85 A1 |  if_e	sub	fp, #8
345ac                 | LR__5071
345ac                 | LR__5072
345ac                 | LR__5073
345ac     08 4E 05 F1 | 	add	fp, #8
345b0     A7 FA 09 FB | 	rdlong	result1, fp wz
345b4     08 4E 85 F1 | 	sub	fp, #8
345b8     88 00 90 5D |  if_ne	jmp	#LR__5076
345bc     0C 4E 05 F1 | 	add	fp, #12
345c0     A7 12 02 F6 | 	mov	arg01, fp
345c4     0C 4E 85 F1 | 	sub	fp, #12
345c8     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
345cc     08 4E 05 F1 | 	add	fp, #8
345d0     A7 FA 61 FC | 	wrlong	result1, fp
345d4     08 4E 85 F1 | 	sub	fp, #8
345d8     00 FA 0D F2 | 	cmp	result1, #0 wz
345dc     38 00 90 5D |  if_ne	jmp	#LR__5074
345e0     6C 4E 05 F1 | 	add	fp, #108
345e4     A7 FA 09 FB | 	rdlong	result1, fp wz
345e8     6C 4E 85 F1 | 	sub	fp, #108
345ec     28 00 90 AD |  if_e	jmp	#LR__5074
345f0     0C 4E 05 F1 | 	add	fp, #12
345f4     A7 12 02 F6 | 	mov	arg01, fp
345f8     60 4E 05 F1 | 	add	fp, #96
345fc     A7 14 02 FB | 	rdlong	arg02, fp
34600     6C 4E 85 F1 | 	sub	fp, #108
34604     00 16 06 F6 | 	mov	arg03, #0
34608     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
3460c     08 4E 05 F1 | 	add	fp, #8
34610     A7 FA 61 FC | 	wrlong	result1, fp
34614     08 4E 85 F1 | 	sub	fp, #8
34618                 | LR__5074
34618     08 4E 05 F1 | 	add	fp, #8
3461c     A7 FA 09 FB | 	rdlong	result1, fp wz
34620     08 4E 85 F1 | 	sub	fp, #8
34624     1C 00 90 5D |  if_ne	jmp	#LR__5075
34628     70 4E 05 F1 | 	add	fp, #112
3462c     A7 12 02 FB | 	rdlong	arg01, fp
34630     70 4E 85 F1 | 	sub	fp, #112
34634     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
34638     08 4E 05 F1 | 	add	fp, #8
3463c     A7 FA 61 FC | 	wrlong	result1, fp
34640     08 4E 85 F1 | 	sub	fp, #8
34644                 | LR__5075
34644                 | LR__5076
34644                 | LR__5077
34644                 | LR__5078
34644                 | ' 			}
34644                 | ' 		}
34644                 | ' 		;
34644                 | ' 	}
34644                 | ' 
34644                 | ' 	return res ;
34644     08 4E 05 F1 | 	add	fp, #8
34648     A7 FA 01 FB | 	rdlong	result1, fp
3464c     08 4E 85 F1 | 	sub	fp, #8
34650     A7 F0 03 F6 | 	mov	ptra, fp
34654     B2 00 A0 FD | 	call	#popregs_
34658                 | _fatfs_cc_f_unlink_ret
34658     2D 00 64 FD | 	ret
3465c                 | 
3465c                 | _fatfs_cc_f_mkdir
3465c     00 4A 05 F6 | 	mov	COUNT_, #0
34660     A8 00 A0 FD | 	call	#pushregs_
34664     5C F0 07 F1 | 	add	ptra, #92
34668     04 4E 05 F1 | 	add	fp, #4
3466c     A7 12 62 FC | 	wrlong	arg01, fp
34670     A7 12 02 F6 | 	mov	arg01, fp
34674     48 4E 05 F1 | 	add	fp, #72
34678     A7 14 02 F6 | 	mov	arg02, fp
3467c     4C 4E 85 F1 | 	sub	fp, #76
34680     02 16 06 F6 | 	mov	arg03, #2
34684     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
34688     08 4E 05 F1 | 	add	fp, #8
3468c     A7 FA 61 FC | 	wrlong	result1, fp
34690     08 4E 85 F1 | 	sub	fp, #8
34694     00 FA 0D F2 | 	cmp	result1, #0 wz
34698     C4 02 90 5D |  if_ne	jmp	#LR__5085
3469c     4C 4E 05 F1 | 	add	fp, #76
346a0     A7 16 02 FB | 	rdlong	arg03, fp
346a4     40 4E 85 F1 | 	sub	fp, #64
346a8     A7 16 62 FC | 	wrlong	arg03, fp
346ac     A7 12 02 F6 | 	mov	arg01, fp
346b0     08 4E 85 F1 | 	sub	fp, #8
346b4     A7 14 02 FB | 	rdlong	arg02, fp
346b8     04 4E 85 F1 | 	sub	fp, #4
346bc     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
346c0     08 4E 05 F1 | 	add	fp, #8
346c4     A7 FA 61 FC | 	wrlong	result1, fp
346c8     00 FA 4D F2 | 	cmps	result1, #0 wz
346cc     08 4E 85 F1 | 	sub	fp, #8
346d0     08 4E 05 A1 |  if_e	add	fp, #8
346d4     A7 10 68 AC |  if_e	wrlong	#8, fp
346d8     08 4E 85 A1 |  if_e	sub	fp, #8
346dc     08 4E 05 F1 | 	add	fp, #8
346e0     A7 FA 01 FB | 	rdlong	result1, fp
346e4     08 4E 85 F1 | 	sub	fp, #8
346e8     04 FA 0D F2 | 	cmp	result1, #4 wz
346ec     70 02 90 5D |  if_ne	jmp	#LR__5084
346f0     4C 4E 05 F1 | 	add	fp, #76
346f4     A7 16 02 FB | 	rdlong	arg03, fp
346f8     10 4E 85 F1 | 	sub	fp, #16
346fc     A7 16 62 FC | 	wrlong	arg03, fp
34700     A7 12 02 F6 | 	mov	arg01, fp
34704     3C 4E 85 F1 | 	sub	fp, #60
34708     00 14 06 F6 | 	mov	arg02, #0
3470c     04 AC BF FD | 	call	#_fatfs_cc_create_chain
34710     50 4E 05 F1 | 	add	fp, #80
34714     A7 FA 61 FC | 	wrlong	result1, fp
34718     48 4E 85 F1 | 	sub	fp, #72
3471c     A7 00 68 FC | 	wrlong	#0, fp
34720     48 4E 05 F1 | 	add	fp, #72
34724     A7 FA 09 FB | 	rdlong	result1, fp wz
34728     50 4E 85 F1 | 	sub	fp, #80
3472c     08 4E 05 A1 |  if_e	add	fp, #8
34730     A7 0E 68 AC |  if_e	wrlong	#7, fp
34734     08 4E 85 A1 |  if_e	sub	fp, #8
34738     50 4E 05 F1 | 	add	fp, #80
3473c     A7 FA 01 FB | 	rdlong	result1, fp
34740     50 4E 85 F1 | 	sub	fp, #80
34744     01 FA 0D F2 | 	cmp	result1, #1 wz
34748     08 4E 05 A1 |  if_e	add	fp, #8
3474c     A7 04 68 AC |  if_e	wrlong	#2, fp
34750     08 4E 85 A1 |  if_e	sub	fp, #8
34754     50 4E 05 F1 | 	add	fp, #80
34758     A7 16 02 FB | 	rdlong	arg03, fp
3475c     50 4E 85 F1 | 	sub	fp, #80
34760     FF FF 7F FF 
34764     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
34768     08 4E 05 A1 |  if_e	add	fp, #8
3476c     A7 02 68 AC |  if_e	wrlong	#1, fp
34770     08 4E 85 A1 |  if_e	sub	fp, #8
34774     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
34778     58 4E 05 F1 | 	add	fp, #88
3477c     A7 FA 61 FC | 	wrlong	result1, fp
34780     50 4E 85 F1 | 	sub	fp, #80
34784     A7 FA 09 FB | 	rdlong	result1, fp wz
34788     08 4E 85 F1 | 	sub	fp, #8
3478c     1C 01 90 5D |  if_ne	jmp	#LR__5081
34790     4C 4E 05 F1 | 	add	fp, #76
34794     A7 12 02 FB | 	rdlong	arg01, fp
34798     04 4E 05 F1 | 	add	fp, #4
3479c     A7 14 02 FB | 	rdlong	arg02, fp
347a0     50 4E 85 F1 | 	sub	fp, #80
347a4     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
347a8     08 4E 05 F1 | 	add	fp, #8
347ac     A7 FA 61 FC | 	wrlong	result1, fp
347b0     00 FA 4D F2 | 	cmps	result1, #0 wz
347b4     08 4E 85 F1 | 	sub	fp, #8
347b8     F0 00 90 5D |  if_ne	jmp	#LR__5080
347bc     4C 4E 05 F1 | 	add	fp, #76
347c0     A7 12 02 FB | 	rdlong	arg01, fp
347c4     4C 4E 85 F1 | 	sub	fp, #76
347c8     34 12 06 F1 | 	add	arg01, #52
347cc     20 14 06 F6 | 	mov	arg02, #32
347d0     0B 16 06 F6 | 	mov	arg03, #11
347d4     98 00 A0 FD | 	call	#\builtin_bytefill_
347d8     4C 4E 05 F1 | 	add	fp, #76
347dc     A7 FA 01 FB | 	rdlong	result1, fp
347e0     34 FA 05 F1 | 	add	result1, #52
347e4     FD 5C 48 FC | 	wrbyte	#46, result1
347e8     A7 16 02 FB | 	rdlong	arg03, fp
347ec     3F 16 06 F1 | 	add	arg03, #63
347f0     0B 21 48 FC | 	wrbyte	#16, arg03
347f4     A7 12 02 FB | 	rdlong	arg01, fp
347f8     4A 12 06 F1 | 	add	arg01, #74
347fc     0C 4E 05 F1 | 	add	fp, #12
34800     A7 14 02 FB | 	rdlong	arg02, fp
34804     09 15 62 FC | 	wrlong	arg02, arg01
34808     0C 4E 85 F1 | 	sub	fp, #12
3480c     A7 14 02 FB | 	rdlong	arg02, fp
34810     0A 13 02 F6 | 	mov	arg01, arg02
34814     34 14 06 F1 | 	add	arg02, #52
34818     04 4E 05 F1 | 	add	fp, #4
3481c     A7 16 02 FB | 	rdlong	arg03, fp
34820     50 4E 85 F1 | 	sub	fp, #80
34824     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
34828     4C 4E 05 F1 | 	add	fp, #76
3482c     A7 14 02 FB | 	rdlong	arg02, fp
34830     0A 13 02 F6 | 	mov	arg01, arg02
34834     54 12 06 F1 | 	add	arg01, #84
34838     4C 4E 85 F1 | 	sub	fp, #76
3483c     34 14 06 F1 | 	add	arg02, #52
34840     20 16 06 F6 | 	mov	arg03, #32
34844     04 27 BF FD | 	call	#__system____builtin_memmove
34848     4C 4E 05 F1 | 	add	fp, #76
3484c     A7 16 02 FB | 	rdlong	arg03, fp
34850     55 16 06 F1 | 	add	arg03, #85
34854     0B 5D 48 FC | 	wrbyte	#46, arg03
34858     38 4E 85 F1 | 	sub	fp, #56
3485c     A7 16 02 FB | 	rdlong	arg03, fp
34860     40 4E 05 F1 | 	add	fp, #64
34864     A7 16 62 FC | 	wrlong	arg03, fp
34868     08 4E 85 F1 | 	sub	fp, #8
3486c     A7 14 02 FB | 	rdlong	arg02, fp
34870     0A 13 02 F6 | 	mov	arg01, arg02
34874     54 14 06 F1 | 	add	arg02, #84
34878     4C 4E 85 F1 | 	sub	fp, #76
3487c     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
34880     4C 4E 05 F1 | 	add	fp, #76
34884     A7 16 02 FB | 	rdlong	arg03, fp
34888     03 16 06 F1 | 	add	arg03, #3
3488c     0B 03 48 FC | 	wrbyte	#1, arg03
34890     40 4E 85 F1 | 	sub	fp, #64
34894     A7 12 02 F6 | 	mov	arg01, fp
34898     0C 4E 85 F1 | 	sub	fp, #12
3489c     44 BA BF FD | 	call	#_fatfs_cc_dir_register
348a0     08 4E 05 F1 | 	add	fp, #8
348a4     A7 FA 61 FC | 	wrlong	result1, fp
348a8     08 4E 85 F1 | 	sub	fp, #8
348ac                 | LR__5080
348ac                 | LR__5081
348ac     08 4E 05 F1 | 	add	fp, #8
348b0     A7 FA 09 FB | 	rdlong	result1, fp wz
348b4     08 4E 85 F1 | 	sub	fp, #8
348b8     88 00 90 5D |  if_ne	jmp	#LR__5082
348bc     28 4E 05 F1 | 	add	fp, #40
348c0     A7 12 02 FB | 	rdlong	arg01, fp
348c4     16 12 06 F1 | 	add	arg01, #22
348c8     30 4E 05 F1 | 	add	fp, #48
348cc     A7 14 02 FB | 	rdlong	arg02, fp
348d0     09 15 62 FC | 	wrlong	arg02, arg01
348d4     0C 4E 85 F1 | 	sub	fp, #12
348d8     A7 12 02 FB | 	rdlong	arg01, fp
348dc     24 4E 85 F1 | 	sub	fp, #36
348e0     A7 14 02 FB | 	rdlong	arg02, fp
348e4     28 4E 05 F1 | 	add	fp, #40
348e8     A7 16 02 FB | 	rdlong	arg03, fp
348ec     50 4E 85 F1 | 	sub	fp, #80
348f0     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
348f4     28 4E 05 F1 | 	add	fp, #40
348f8     A7 FA 01 FB | 	rdlong	result1, fp
348fc     0B FA 05 F1 | 	add	result1, #11
34900     FD 20 48 FC | 	wrbyte	#16, result1
34904     24 4E 05 F1 | 	add	fp, #36
34908     A7 FA 01 FB | 	rdlong	result1, fp
3490c     03 FA 05 F1 | 	add	result1, #3
34910     FD 02 48 FC | 	wrbyte	#1, result1
34914     44 4E 85 F1 | 	sub	fp, #68
34918     A7 FA 09 FB | 	rdlong	result1, fp wz
3491c     08 4E 85 F1 | 	sub	fp, #8
34920     3C 00 90 5D |  if_ne	jmp	#LR__5083
34924     4C 4E 05 F1 | 	add	fp, #76
34928     A7 12 02 FB | 	rdlong	arg01, fp
3492c     4C 4E 85 F1 | 	sub	fp, #76
34930     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
34934     08 4E 05 F1 | 	add	fp, #8
34938     A7 FA 61 FC | 	wrlong	result1, fp
3493c     08 4E 85 F1 | 	sub	fp, #8
34940     1C 00 90 FD | 	jmp	#LR__5083
34944                 | LR__5082
34944     3C 4E 05 F1 | 	add	fp, #60
34948     A7 12 02 F6 | 	mov	arg01, fp
3494c     14 4E 05 F1 | 	add	fp, #20
34950     A7 14 02 FB | 	rdlong	arg02, fp
34954     50 4E 85 F1 | 	sub	fp, #80
34958     00 16 06 F6 | 	mov	arg03, #0
3495c     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
34960                 | LR__5083
34960                 | LR__5084
34960                 | LR__5085
34960                 | ' 				remove_chain(&sobj, dcl, 0);
34960                 | ' 			}
34960                 | ' 		}
34960                 | ' 		;
34960                 | ' 	}
34960                 | ' 
34960                 | ' 	return res ;
34960     08 4E 05 F1 | 	add	fp, #8
34964     A7 FA 01 FB | 	rdlong	result1, fp
34968     08 4E 85 F1 | 	sub	fp, #8
3496c     A7 F0 03 F6 | 	mov	ptra, fp
34970     B2 00 A0 FD | 	call	#popregs_
34974                 | _fatfs_cc_f_mkdir_ret
34974     2D 00 64 FD | 	ret
34978                 | 
34978                 | _fatfs_cc_f_rename
34978     01 4A 05 F6 | 	mov	COUNT_, #1
3497c     A8 00 A0 FD | 	call	#pushregs_
34980     9C F0 07 F1 | 	add	ptra, #156
34984     04 4E 05 F1 | 	add	fp, #4
34988     A7 12 62 FC | 	wrlong	arg01, fp
3498c     04 4E 05 F1 | 	add	fp, #4
34990     A7 14 62 FC | 	wrlong	arg02, fp
34994     A7 12 02 F6 | 	mov	arg01, fp
34998     08 4E 85 F1 | 	sub	fp, #8
3499c     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
349a0     04 4E 05 F1 | 	add	fp, #4
349a4     A7 12 02 F6 | 	mov	arg01, fp
349a8     6C 4E 05 F1 | 	add	fp, #108
349ac     A7 14 02 F6 | 	mov	arg02, fp
349b0     70 4E 85 F1 | 	sub	fp, #112
349b4     02 16 06 F6 | 	mov	arg03, #2
349b8     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
349bc     0C 4E 05 F1 | 	add	fp, #12
349c0     A7 FA 61 FC | 	wrlong	result1, fp
349c4     0C 4E 85 F1 | 	sub	fp, #12
349c8     00 FA 0D F2 | 	cmp	result1, #0 wz
349cc     44 03 90 5D |  if_ne	jmp	#LR__5103
349d0     70 4E 05 F1 | 	add	fp, #112
349d4     A7 16 02 FB | 	rdlong	arg03, fp
349d8     60 4E 85 F1 | 	sub	fp, #96
349dc     A7 16 62 FC | 	wrlong	arg03, fp
349e0     A7 12 02 F6 | 	mov	arg01, fp
349e4     0C 4E 85 F1 | 	sub	fp, #12
349e8     A7 14 02 FB | 	rdlong	arg02, fp
349ec     04 4E 85 F1 | 	sub	fp, #4
349f0     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
349f4     0C 4E 05 F1 | 	add	fp, #12
349f8     A7 FA 61 FC | 	wrlong	result1, fp
349fc     00 FA 4D F2 | 	cmps	result1, #0 wz
34a00     0C 4E 85 F1 | 	sub	fp, #12
34a04     1C 00 90 5D |  if_ne	jmp	#LR__5090
34a08     3B 4E 05 F1 | 	add	fp, #59
34a0c     A7 FA C1 FA | 	rdbyte	result1, fp
34a10     3B 4E 85 F1 | 	sub	fp, #59
34a14     A0 FA CD F7 | 	test	result1, #160 wz
34a18     0C 4E 05 51 |  if_ne	add	fp, #12
34a1c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
34a20     0C 4E 85 51 |  if_ne	sub	fp, #12
34a24                 | LR__5090
34a24     0C 4E 05 F1 | 	add	fp, #12
34a28     A7 26 0A FB | 	rdlong	local01, fp wz
34a2c     0C 4E 85 F1 | 	sub	fp, #12
34a30     E0 02 90 5D |  if_ne	jmp	#LR__5102
34a34     74 4E 05 F1 | 	add	fp, #116
34a38     A7 12 02 F6 | 	mov	arg01, fp
34a3c     48 4E 85 F1 | 	sub	fp, #72
34a40     A7 14 02 FB | 	rdlong	arg02, fp
34a44     2C 4E 85 F1 | 	sub	fp, #44
34a48     20 16 06 F6 | 	mov	arg03, #32
34a4c     FC 24 BF FD | 	call	#__system____builtin_memmove
34a50     40 4E 05 F1 | 	add	fp, #64
34a54     A7 12 02 F6 | 	mov	arg01, fp
34a58     30 4E 85 F1 | 	sub	fp, #48
34a5c     A7 14 02 F6 | 	mov	arg02, fp
34a60     10 4E 85 F1 | 	sub	fp, #16
34a64     30 16 06 F6 | 	mov	arg03, #48
34a68     E0 24 BF FD | 	call	#__system____builtin_memmove
34a6c     40 4E 05 F1 | 	add	fp, #64
34a70     A7 12 02 F6 | 	mov	arg01, fp
34a74     38 4E 85 F1 | 	sub	fp, #56
34a78     A7 14 02 FB | 	rdlong	arg02, fp
34a7c     08 4E 85 F1 | 	sub	fp, #8
34a80     34 CA BF FD | 	call	#_fatfs_cc_follow_path
34a84     0C 4E 05 F1 | 	add	fp, #12
34a88     A7 FA 61 FC | 	wrlong	result1, fp
34a8c     0C 4E 85 F1 | 	sub	fp, #12
34a90     00 FA 0D F2 | 	cmp	result1, #0 wz
34a94     4C 00 90 5D |  if_ne	jmp	#LR__5093
34a98     48 4E 05 F1 | 	add	fp, #72
34a9c     A7 FA 01 FB | 	rdlong	result1, fp
34aa0     30 4E 85 F1 | 	sub	fp, #48
34aa4     A7 16 02 FB | 	rdlong	arg03, fp
34aa8     18 4E 85 F1 | 	sub	fp, #24
34aac     0B FB 09 F2 | 	cmp	result1, arg03 wz
34ab0     20 00 90 5D |  if_ne	jmp	#LR__5091
34ab4     50 4E 05 F1 | 	add	fp, #80
34ab8     A7 FA 01 FB | 	rdlong	result1, fp
34abc     30 4E 85 F1 | 	sub	fp, #48
34ac0     A7 16 02 FB | 	rdlong	arg03, fp
34ac4     20 4E 85 F1 | 	sub	fp, #32
34ac8     0B FB 09 F2 | 	cmp	result1, arg03 wz
34acc     04 26 06 A6 |  if_e	mov	local01, #4
34ad0     04 00 90 AD |  if_e	jmp	#LR__5092
34ad4                 | LR__5091
34ad4     08 26 06 F6 | 	mov	local01, #8
34ad8                 | LR__5092
34ad8     0C 4E 05 F1 | 	add	fp, #12
34adc     A7 26 62 FC | 	wrlong	local01, fp
34ae0     0C 4E 85 F1 | 	sub	fp, #12
34ae4                 | LR__5093
34ae4     0C 4E 05 F1 | 	add	fp, #12
34ae8     A7 26 02 FB | 	rdlong	local01, fp
34aec     0C 4E 85 F1 | 	sub	fp, #12
34af0     04 26 0E F2 | 	cmp	local01, #4 wz
34af4     CC 01 90 5D |  if_ne	jmp	#LR__5099
34af8     40 4E 05 F1 | 	add	fp, #64
34afc     A7 12 02 F6 | 	mov	arg01, fp
34b00     40 4E 85 F1 | 	sub	fp, #64
34b04     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
34b08     0C 4E 05 F1 | 	add	fp, #12
34b0c     A7 FA 61 FC | 	wrlong	result1, fp
34b10     0C 4E 85 F1 | 	sub	fp, #12
34b14     00 FA 0D F2 | 	cmp	result1, #0 wz
34b18     A8 01 90 5D |  if_ne	jmp	#LR__5098
34b1c     5C 4E 05 F1 | 	add	fp, #92
34b20     A7 12 02 FB | 	rdlong	arg01, fp
34b24     38 4E 05 F1 | 	add	fp, #56
34b28     A7 12 62 FC | 	wrlong	arg01, fp
34b2c     0D 12 06 F1 | 	add	arg01, #13
34b30     20 4E 85 F1 | 	sub	fp, #32
34b34     A7 14 02 F6 | 	mov	arg02, fp
34b38     74 4E 85 F1 | 	sub	fp, #116
34b3c     0D 14 06 F1 | 	add	arg02, #13
34b40     13 16 06 F6 | 	mov	arg03, #19
34b44     04 24 BF FD | 	call	#__system____builtin_memmove
34b48     94 4E 05 F1 | 	add	fp, #148
34b4c     A7 26 02 FB | 	rdlong	local01, fp
34b50     15 4E 85 F1 | 	sub	fp, #21
34b54     A7 FA C1 FA | 	rdbyte	result1, fp
34b58     0B 26 06 F1 | 	add	local01, #11
34b5c     13 FB 41 FC | 	wrbyte	result1, local01
34b60     15 4E 05 F1 | 	add	fp, #21
34b64     A7 26 02 FB | 	rdlong	local01, fp
34b68     94 4E 85 F1 | 	sub	fp, #148
34b6c     0B 26 06 F1 | 	add	local01, #11
34b70     13 27 C2 FA | 	rdbyte	local01, local01
34b74     10 26 CE F7 | 	test	local01, #16 wz
34b78     24 00 90 5D |  if_ne	jmp	#LR__5094
34b7c     94 4E 05 F1 | 	add	fp, #148
34b80     A7 FA 01 FB | 	rdlong	result1, fp
34b84     FD 26 02 F6 | 	mov	local01, result1
34b88     94 4E 85 F1 | 	sub	fp, #148
34b8c     0B FA 05 F1 | 	add	result1, #11
34b90     FD FA C1 FA | 	rdbyte	result1, result1
34b94     20 FA 45 F5 | 	or	result1, #32
34b98     0B 26 06 F1 | 	add	local01, #11
34b9c     13 FB 41 FC | 	wrbyte	result1, local01
34ba0                 | LR__5094
34ba0     70 4E 05 F1 | 	add	fp, #112
34ba4     A7 26 02 FB | 	rdlong	local01, fp
34ba8     03 26 06 F1 | 	add	local01, #3
34bac     13 03 48 FC | 	wrbyte	#1, local01
34bb0     24 4E 05 F1 | 	add	fp, #36
34bb4     A7 26 02 FB | 	rdlong	local01, fp
34bb8     94 4E 85 F1 | 	sub	fp, #148
34bbc     0B 26 06 F1 | 	add	local01, #11
34bc0     13 27 C2 FA | 	rdbyte	local01, local01
34bc4     10 26 CE F7 | 	test	local01, #16 wz
34bc8     F8 00 90 AD |  if_e	jmp	#LR__5097
34bcc     18 4E 05 F1 | 	add	fp, #24
34bd0     A7 16 02 FB | 	rdlong	arg03, fp
34bd4     30 4E 05 F1 | 	add	fp, #48
34bd8     A7 26 02 FB | 	rdlong	local01, fp
34bdc     48 4E 85 F1 | 	sub	fp, #72
34be0     13 17 0A F2 | 	cmp	arg03, local01 wz
34be4     DC 00 90 AD |  if_e	jmp	#LR__5097
34be8     70 4E 05 F1 | 	add	fp, #112
34bec     A7 12 02 FB | 	rdlong	arg01, fp
34bf0     09 27 02 F6 | 	mov	local01, arg01
34bf4     24 4E 05 F1 | 	add	fp, #36
34bf8     A7 14 02 FB | 	rdlong	arg02, fp
34bfc     94 4E 85 F1 | 	sub	fp, #148
34c00     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
34c04     FD 14 02 F6 | 	mov	arg02, result1
34c08     13 13 02 F6 | 	mov	arg01, local01
34c0c     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
34c10     98 4E 05 F1 | 	add	fp, #152
34c14     A7 FA 61 FC | 	wrlong	result1, fp
34c18     00 FA 4D F2 | 	cmps	result1, #0 wz
34c1c     98 4E 85 F1 | 	sub	fp, #152
34c20     0C 4E 05 A1 |  if_e	add	fp, #12
34c24     A7 04 68 AC |  if_e	wrlong	#2, fp
34c28     0C 4E 85 A1 |  if_e	sub	fp, #12
34c2c     94 00 90 AD |  if_e	jmp	#LR__5096
34c30     70 4E 05 F1 | 	add	fp, #112
34c34     A7 12 02 FB | 	rdlong	arg01, fp
34c38     28 4E 05 F1 | 	add	fp, #40
34c3c     A7 14 02 FB | 	rdlong	arg02, fp
34c40     98 4E 85 F1 | 	sub	fp, #152
34c44     4C A0 BF FD | 	call	#_fatfs_cc_move_window
34c48     0C 4E 05 F1 | 	add	fp, #12
34c4c     A7 FA 61 FC | 	wrlong	result1, fp
34c50     64 4E 05 F1 | 	add	fp, #100
34c54     A7 26 02 FB | 	rdlong	local01, fp
34c58     54 26 06 F1 | 	add	local01, #84
34c5c     24 4E 05 F1 | 	add	fp, #36
34c60     A7 26 62 FC | 	wrlong	local01, fp
34c64     88 4E 85 F1 | 	sub	fp, #136
34c68     A7 26 0A FB | 	rdlong	local01, fp wz
34c6c     0C 4E 85 F1 | 	sub	fp, #12
34c70     50 00 90 5D |  if_ne	jmp	#LR__5095
34c74     94 4E 05 F1 | 	add	fp, #148
34c78     A7 26 02 FB | 	rdlong	local01, fp
34c7c     94 4E 85 F1 | 	sub	fp, #148
34c80     01 26 06 F1 | 	add	local01, #1
34c84     13 27 C2 FA | 	rdbyte	local01, local01
34c88     2E 26 0E F2 | 	cmp	local01, #46 wz
34c8c     34 00 90 5D |  if_ne	jmp	#LR__5095
34c90     70 4E 05 F1 | 	add	fp, #112
34c94     A7 12 02 FB | 	rdlong	arg01, fp
34c98     24 4E 05 F1 | 	add	fp, #36
34c9c     A7 14 02 FB | 	rdlong	arg02, fp
34ca0     4C 4E 85 F1 | 	sub	fp, #76
34ca4     A7 16 02 FB | 	rdlong	arg03, fp
34ca8     48 4E 85 F1 | 	sub	fp, #72
34cac     50 AD BF FD | 	call	#_fatfs_cc_st_clust
34cb0     70 4E 05 F1 | 	add	fp, #112
34cb4     A7 26 02 FB | 	rdlong	local01, fp
34cb8     70 4E 85 F1 | 	sub	fp, #112
34cbc     03 26 06 F1 | 	add	local01, #3
34cc0     13 03 48 FC | 	wrbyte	#1, local01
34cc4                 | LR__5095
34cc4                 | LR__5096
34cc4                 | LR__5097
34cc4                 | LR__5098
34cc4                 | LR__5099
34cc4     0C 4E 05 F1 | 	add	fp, #12
34cc8     A7 26 0A FB | 	rdlong	local01, fp wz
34ccc     0C 4E 85 F1 | 	sub	fp, #12
34cd0     40 00 90 5D |  if_ne	jmp	#LR__5101
34cd4     10 4E 05 F1 | 	add	fp, #16
34cd8     A7 12 02 F6 | 	mov	arg01, fp
34cdc     10 4E 85 F1 | 	sub	fp, #16
34ce0     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
34ce4     0C 4E 05 F1 | 	add	fp, #12
34ce8     A7 FA 61 FC | 	wrlong	result1, fp
34cec     0C 4E 85 F1 | 	sub	fp, #12
34cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
34cf4     1C 00 90 5D |  if_ne	jmp	#LR__5100
34cf8     70 4E 05 F1 | 	add	fp, #112
34cfc     A7 12 02 FB | 	rdlong	arg01, fp
34d00     70 4E 85 F1 | 	sub	fp, #112
34d04     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
34d08     0C 4E 05 F1 | 	add	fp, #12
34d0c     A7 FA 61 FC | 	wrlong	result1, fp
34d10     0C 4E 85 F1 | 	sub	fp, #12
34d14                 | LR__5100
34d14                 | LR__5101
34d14                 | LR__5102
34d14                 | LR__5103
34d14                 | ' 					res = sync_fs(fs);
34d14                 | ' 				}
34d14                 | ' 			}
34d14                 | ' 
34d14                 | ' 		}
34d14                 | ' 		;
34d14                 | ' 	}
34d14                 | ' 
34d14                 | ' 	return res ;
34d14     0C 4E 05 F1 | 	add	fp, #12
34d18     A7 FA 01 FB | 	rdlong	result1, fp
34d1c     0C 4E 85 F1 | 	sub	fp, #12
34d20     A7 F0 03 F6 | 	mov	ptra, fp
34d24     B2 00 A0 FD | 	call	#popregs_
34d28                 | _fatfs_cc_f_rename_ret
34d28     2D 00 64 FD | 	ret
34d2c                 | 
34d2c                 | _fatfs_cc_time
34d2c     00 4A 05 F6 | 	mov	COUNT_, #0
34d30     A8 00 A0 FD | 	call	#pushregs_
34d34     14 F0 07 F1 | 	add	ptra, #20
34d38     04 4E 05 F1 | 	add	fp, #4
34d3c     A7 12 62 FC | 	wrlong	arg01, fp
34d40     04 4E 05 F1 | 	add	fp, #4
34d44     A7 12 02 F6 | 	mov	arg01, fp
34d48     08 4E 85 F1 | 	sub	fp, #8
34d4c     00 14 06 F6 | 	mov	arg02, #0
34d50     0C 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
34d54     08 4E 05 F1 | 	add	fp, #8
34d58     A7 FA 01 FB | 	rdlong	result1, fp
34d5c     08 4E 05 F1 | 	add	fp, #8
34d60     A7 FA 61 FC | 	wrlong	result1, fp
34d64     0C 4E 85 F1 | 	sub	fp, #12
34d68     A7 FA 09 FB | 	rdlong	result1, fp wz
34d6c     04 4E 85 F1 | 	sub	fp, #4
34d70     18 00 90 AD |  if_e	jmp	#LR__5110
34d74     04 4E 05 F1 | 	add	fp, #4
34d78     A7 FA 01 FB | 	rdlong	result1, fp
34d7c     0C 4E 05 F1 | 	add	fp, #12
34d80     A7 14 02 FB | 	rdlong	arg02, fp
34d84     10 4E 85 F1 | 	sub	fp, #16
34d88     FD 14 62 FC | 	wrlong	arg02, result1
34d8c                 | LR__5110
34d8c                 | '         *tp = now;
34d8c                 | '     return now;
34d8c     10 4E 05 F1 | 	add	fp, #16
34d90     A7 FA 01 FB | 	rdlong	result1, fp
34d94     10 4E 85 F1 | 	sub	fp, #16
34d98     A7 F0 03 F6 | 	mov	ptra, fp
34d9c     B2 00 A0 FD | 	call	#popregs_
34da0                 | _fatfs_cc_time_ret
34da0     2D 00 64 FD | 	ret
34da4                 | 
34da4                 | _fatfs_cc_mktime
34da4     06 4A 05 F6 | 	mov	COUNT_, #6
34da8     A8 00 A0 FD | 	call	#pushregs_
34dac     09 27 02 F6 | 	mov	local01, arg01
34db0     14 26 06 F1 | 	add	local01, #20
34db4     13 13 02 FB | 	rdlong	arg01, local01
34db8     14 26 86 F1 | 	sub	local01, #20
34dbc     46 12 56 F2 | 	cmps	arg01, #70 wc
34dc0                 | '                 return (time_t) -1;
34dc0     01 FA 65 C6 |  if_b	neg	result1, #1
34dc4     7C 01 90 CD |  if_b	jmp	#LR__5124
34dc8     03 00 00 FF 
34dcc     6C 29 06 F6 | 	mov	local02, ##1900
34dd0     14 26 06 F1 | 	add	local01, #20
34dd4     13 FB 01 FB | 	rdlong	result1, local01
34dd8     FD 28 02 F1 | 	add	local02, result1
34ddc     08 26 86 F1 | 	sub	local01, #8
34de0     13 2B 02 FB | 	rdlong	local03, local01
34de4     01 2A 86 F1 | 	sub	local03, #1
34de8     04 26 06 F1 | 	add	local01, #4
34dec     13 13 02 FB | 	rdlong	arg01, local01
34df0     10 26 86 F1 | 	sub	local01, #16
34df4     02 12 66 F0 | 	shl	arg01, #2
34df8     02 00 00 FF 
34dfc     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
34e00     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
34e04     09 FB 01 FB | 	rdlong	result1, arg01
34e08     FD 2A 02 F1 | 	add	local03, result1
34e0c     14 13 02 F6 | 	mov	arg01, local02
34e10     02 00 00 FF 
34e14     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
34e18     EC 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
34e1c     00 FA 0D F2 | 	cmp	result1, #0 wz
34e20     1C 00 90 AD |  if_e	jmp	#LR__5120
34e24     00 2C 06 F6 | 	mov	local04, #0
34e28     10 26 06 F1 | 	add	local01, #16
34e2c     13 FB 01 FB | 	rdlong	result1, local01
34e30     10 26 86 F1 | 	sub	local01, #16
34e34     02 FA 55 F2 | 	cmps	result1, #2 wc
34e38     01 2C 06 36 |  if_ae	mov	local04, #1
34e3c     04 00 90 FD | 	jmp	#LR__5121
34e40                 | LR__5120
34e40     00 2C 06 F6 | 	mov	local04, #0
34e44                 | LR__5121
34e44     04 26 06 F1 | 	add	local01, #4
34e48     13 FB 01 FB | 	rdlong	result1, local01
34e4c     04 26 86 F1 | 	sub	local01, #4
34e50     13 2F 02 FB | 	rdlong	local05, local01
34e54     08 26 06 F1 | 	add	local01, #8
34e58     13 13 02 FB | 	rdlong	arg01, local01
34e5c     07 00 00 FF 
34e60     10 12 06 FD | 	qmul	arg01, ##3600
34e64     16 2B 02 F1 | 	add	local03, local04
34e68     FD 2C 02 F6 | 	mov	local04, result1
34e6c     04 2C 66 F0 | 	shl	local04, #4
34e70     FD 2C 82 F1 | 	sub	local04, result1
34e74     02 2C 66 F0 | 	shl	local04, #2
34e78     16 2F 02 F1 | 	add	local05, local04
34e7c     08 26 86 F1 | 	sub	local01, #8
34e80     18 2C 62 FD | 	getqx	local04
34e84     A8 00 00 FF 
34e88     80 2B 06 FD | 	qmul	local03, ##86400
34e8c     16 2F 02 F1 | 	add	local05, local04
34e90     14 2B 02 F6 | 	mov	local03, local02
34e94     03 00 00 FF 
34e98     B2 2B 86 F1 | 	sub	local03, ##1970
34e9c     18 2C 62 FD | 	getqx	local04
34ea0     99 F0 00 FF 
34ea4     80 2B 06 FD | 	qmul	local03, ##31536000
34ea8     16 2F 02 F1 | 	add	local05, local04
34eac     14 2B 02 F6 | 	mov	local03, local02
34eb0     03 00 00 FF 
34eb4     B1 2B 86 F1 | 	sub	local03, ##1969
34eb8     15 31 52 F6 | 	abs	local06, local03 wc
34ebc     02 30 46 F0 | 	shr	local06, #2
34ec0     18 31 82 F6 | 	negc	local06, local06
34ec4     03 00 00 FF 
34ec8     D1 29 56 F2 | 	cmps	local02, ##2001 wc
34ecc     18 2C 62 FD | 	getqx	local04
34ed0     16 2F 02 F1 | 	add	local05, local04
34ed4     18 00 90 CD |  if_b	jmp	#LR__5122
34ed8     03 00 00 FF 
34edc     D0 29 86 F1 | 	sub	local02, ##2000
34ee0     14 2D 52 F6 | 	abs	local04, local02 wc
34ee4     64 2C 16 FD | 	qdiv	local04, #100
34ee8     18 2C 62 FD | 	getqx	local04
34eec     16 31 A2 F3 | 	sumnc	local06, local04
34ef0                 | LR__5122
34ef0     A8 00 00 FF 
34ef4     80 31 06 FD | 	qmul	local06, ##86400
34ef8     18 30 62 FD | 	getqx	local06
34efc     18 2F 02 F1 | 	add	local05, local06
34f00     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
34f04     02 00 00 FF 
34f08     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
34f0c     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
34f10     18 2F 02 F1 | 	add	local05, local06
34f14     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
34f18     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
34f1c     02 00 00 FF 
34f20     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
34f24     01 2A 0E F2 | 	cmp	local03, #1 wz
34f28     14 00 90 5D |  if_ne	jmp	#LR__5123
34f2c     13 13 02 F6 | 	mov	arg01, local01
34f30     D8 19 B0 FD | 	call	#_fatfs_cc___indst
34f34     00 FA 0D F2 | 	cmp	result1, #0 wz
34f38     07 00 00 5F 
34f3c     10 2E 86 51 |  if_ne	sub	local05, ##3600
34f40                 | LR__5123
34f40                 | '                 s -=  (3600L) ;
34f40                 | ' 
34f40                 | '         return s;
34f40     17 FB 01 F6 | 	mov	result1, local05
34f44                 | LR__5124
34f44     A7 F0 03 F6 | 	mov	ptra, fp
34f48     B2 00 A0 FD | 	call	#popregs_
34f4c                 | _fatfs_cc_mktime_ret
34f4c     2D 00 64 FD | 	ret
34f50                 | 
34f50                 | _fatfs_cc__gmtime_r
34f50     03 4A 05 F6 | 	mov	COUNT_, #3
34f54     A8 00 A0 FD | 	call	#pushregs_
34f58     09 27 02 FB | 	rdlong	local01, arg01
34f5c     A8 00 00 FF 
34f60     80 27 16 FD | 	qdiv	local01, ##86400
34f64     18 FA 61 FD | 	getqx	result1
34f68     04 FA 05 F1 | 	add	result1, #4
34f6c     07 FA 15 FD | 	qdiv	result1, #7
34f70     18 14 06 F1 | 	add	arg02, #24
34f74     D1 7F 27 FF 
34f78     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
34f7c     D1 7F 27 3F 
34f80     00 26 86 31 |  if_ae	sub	local01, ##1325376000
34f84     03 00 00 3F 
34f88     DC 29 06 36 |  if_ae	mov	local02, ##2012
34f8c     03 00 00 CF 
34f90     B2 29 06 C6 |  if_b	mov	local02, ##1970
34f94                 | ' 	  year = 1970;
34f94                 | ' 	}
34f94                 | ' 
34f94                 | ' 	for(;;) {
34f94     19 FA 61 FD | 	getqy	result1
34f98     0A FB 61 FC | 	wrlong	result1, arg02
34f9c     18 14 86 F1 | 	sub	arg02, #24
34fa0                 | LR__5130
34fa0     14 13 02 F6 | 	mov	arg01, local02
34fa4     60 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
34fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
34fac     42 F1 00 5F 
34fb0     00 2B 06 56 |  if_ne	mov	local03, ##31622400
34fb4     99 F0 00 AF 
34fb8     80 2B 06 A6 |  if_e	mov	local03, ##31536000
34fbc     15 27 12 F2 | 	cmp	local01, local03 wc
34fc0                 | ' 	    break;
34fc0     01 28 06 31 |  if_ae	add	local02, #1
34fc4     15 27 82 31 |  if_ae	sub	local01, local03
34fc8     D4 FF 9F 3D |  if_ae	jmp	#LR__5130
34fcc     A8 00 00 FF 
34fd0     80 27 16 FD | 	qdiv	local01, ##86400
34fd4     14 2B 02 F6 | 	mov	local03, local02
34fd8     03 00 00 FF 
34fdc     6C 2B 86 F1 | 	sub	local03, ##1900
34fe0     14 14 06 F1 | 	add	arg02, #20
34fe4     0A 2B 62 FC | 	wrlong	local03, arg02
34fe8     08 14 06 F1 | 	add	arg02, #8
34fec     14 13 02 F6 | 	mov	arg01, local02
34ff0     18 28 62 FD | 	getqx	local02
34ff4     0A 29 62 FC | 	wrlong	local02, arg02
34ff8     1C 14 86 F1 | 	sub	arg02, #28
34ffc     08 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
35000     00 FA 0D F2 | 	cmp	result1, #0 wz
35004     1D 2A 06 56 |  if_ne	mov	local03, #29
35008     1C 2A 06 A6 |  if_e	mov	local03, #28
3500c     02 00 00 FF 
35010     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
35014     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
35018     02 00 00 FF 
3501c     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
35020                 | ' 
35020                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
35020                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
35020     00 12 06 F6 | 	mov	arg01, #0
35024     97 2A 48 FB | 	callpa	#(@LR__5132-@LR__5131)>>2,fcache_load_ptr_
35028                 | LR__5131
35028     09 2B 02 F6 | 	mov	local03, arg01
3502c     02 2A 66 F0 | 	shl	local03, #2
35030     02 00 00 FF 
35034     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
35038     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
3503c     15 2B 02 FB | 	rdlong	local03, local03
35040     15 29 52 F2 | 	cmps	local02, local03 wc
35044     02 00 00 FF 
35048     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
3504c     2C 00 90 CD |  if_b	jmp	#LR__5133
35050     09 2B 02 F6 | 	mov	local03, arg01
35054     02 2A 66 F0 | 	shl	local03, #2
35058     02 00 00 FF 
3505c     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
35060     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
35064     15 2B 02 FB | 	rdlong	local03, local03
35068     15 29 82 F1 | 	sub	local02, local03
3506c     01 12 06 F1 | 	add	arg01, #1
35070     02 00 00 FF 
35074     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
35078     AC FF 9F FD | 	jmp	#LR__5131
3507c                 | LR__5132
3507c                 | LR__5133
3507c     A8 00 00 FF 
35080     80 27 16 FD | 	qdiv	local01, ##86400
35084     10 14 06 F1 | 	add	arg02, #16
35088     0A 13 62 FC | 	wrlong	arg01, arg02
3508c     01 28 06 F1 | 	add	local02, #1
35090     04 14 86 F1 | 	sub	arg02, #4
35094     0A 29 62 FC | 	wrlong	local02, arg02
35098     19 26 62 FD | 	getqy	local01
3509c     07 00 00 FF 
350a0     10 26 16 FD | 	qdiv	local01, ##3600
350a4     18 2A 62 FD | 	getqx	local03
350a8     07 00 00 FF 
350ac     10 26 16 FD | 	qdiv	local01, ##3600
350b0     04 14 86 F1 | 	sub	arg02, #4
350b4     0A 2B 62 FC | 	wrlong	local03, arg02
350b8     19 26 62 FD | 	getqy	local01
350bc     3C 26 16 FD | 	qdiv	local01, #60
350c0     18 2A 62 FD | 	getqx	local03
350c4     3C 26 16 FD | 	qdiv	local01, #60
350c8     04 14 86 F1 | 	sub	arg02, #4
350cc     0A 2B 62 FC | 	wrlong	local03, arg02
350d0     04 14 86 F1 | 	sub	arg02, #4
350d4                 | '         stm->tm_isdst = 0;
350d4                 | ' 
350d4                 | ' ;
350d4                 | '         return stm;
350d4     0A FB 01 F6 | 	mov	result1, arg02
350d8     19 2A 62 FD | 	getqy	local03
350dc     0A 2B 62 FC | 	wrlong	local03, arg02
350e0     20 14 06 F1 | 	add	arg02, #32
350e4     0A 01 68 FC | 	wrlong	#0, arg02
350e8     A7 F0 03 F6 | 	mov	ptra, fp
350ec     B2 00 A0 FD | 	call	#popregs_
350f0                 | _fatfs_cc__gmtime_r_ret
350f0     2D 00 64 FD | 	ret
350f4                 | 
350f4                 | _fatfs_cc__tzset
350f4     B6 01 00 FF 
350f8     35 12 06 F6 | 	mov	arg01, ##@LR__5445
350fc     34 00 B0 FD | 	call	#_fatfs_cc_getenv
35100     FD 12 02 F6 | 	mov	arg01, result1
35104     02 00 00 FF 
35108     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
3510c     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
35110     02 00 00 FF 
35114     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
35118     3C 15 B0 FD | 	call	#_fatfs_cc___tzoffset
3511c     02 00 00 FF 
35120     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
35124     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
35128     02 00 00 FF 
3512c     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
35130                 | _fatfs_cc__tzset_ret
35130     2D 00 64 FD | 	ret
35134                 | 
35134                 | _fatfs_cc_getenv
35134     06 4A 05 F6 | 	mov	COUNT_, #6
35138     A8 00 A0 FD | 	call	#pushregs_
3513c     09 27 02 F6 | 	mov	local01, arg01
35140     09 29 02 F6 | 	mov	local02, arg01
35144     97 06 48 FB | 	callpa	#(@LR__5141-@LR__5140)>>2,fcache_load_ptr_
35148                 | LR__5140
35148     14 FB C9 FA | 	rdbyte	result1, local02 wz
3514c     01 28 06 51 |  if_ne	add	local02, #1
35150     F4 FF 9F 5D |  if_ne	jmp	#LR__5140
35154                 | LR__5141
35154     09 29 82 F1 | 	sub	local02, arg01
35158     14 FB 01 F6 | 	mov	result1, local02
3515c     02 00 00 FF 
35160     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
35164     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
35168     02 00 00 FF 
3516c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
35170                 | '             return 0;
35170     00 FA 05 A6 |  if_e	mov	result1, #0
35174     5C 00 90 AD |  if_e	jmp	#LR__5144
35178                 | ' 
35178                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
35178     02 00 00 FF 
3517c     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
35180     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
35184     02 00 00 FF 
35188     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
3518c                 | LR__5142
3518c     15 2D 0A FB | 	rdlong	local04, local03 wz
35190     3C 00 90 AD |  if_e	jmp	#LR__5143
35194     16 13 02 F6 | 	mov	arg01, local04
35198     13 15 02 F6 | 	mov	arg02, local01
3519c     14 17 02 F6 | 	mov	arg03, local02
351a0     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
351a4     00 FA 0D F2 | 	cmp	result1, #0 wz
351a8     14 2F 02 A6 |  if_e	mov	local05, local02
351ac     16 2F 02 A1 |  if_e	add	local05, local04
351b0     17 31 C2 AA |  if_e	rdbyte	local06, local05
351b4     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
351b8                 | ' 			return name+len+1;
351b8     14 2D 02 A1 |  if_e	add	local04, local02
351bc     01 2C 06 A1 |  if_e	add	local04, #1
351c0     16 FB 01 A6 |  if_e	mov	result1, local04
351c4     0C 00 90 AD |  if_e	jmp	#LR__5144
351c8     04 2A 06 F1 | 	add	local03, #4
351cc     BC FF 9F FD | 	jmp	#LR__5142
351d0                 | LR__5143
351d0                 | ' 	}
351d0                 | ' 	return 0;
351d0     00 FA 05 F6 | 	mov	result1, #0
351d4                 | LR__5144
351d4     A7 F0 03 F6 | 	mov	ptra, fp
351d8     B2 00 A0 FD | 	call	#popregs_
351dc                 | _fatfs_cc_getenv_ret
351dc     2D 00 64 FD | 	ret
351e0                 | 
351e0                 | _fatfs_cc__get_fattime
351e0     00 4A 05 F6 | 	mov	COUNT_, #0
351e4     A8 00 A0 FD | 	call	#pushregs_
351e8     34 F0 07 F1 | 	add	ptra, #52
351ec     00 12 06 F6 | 	mov	arg01, #0
351f0     38 FB BF FD | 	call	#_fatfs_cc_time
351f4     04 4E 05 F1 | 	add	fp, #4
351f8     A7 FA 61 FC | 	wrlong	result1, fp
351fc     A7 12 02 F6 | 	mov	arg01, fp
35200     0C 4E 05 F1 | 	add	fp, #12
35204     A7 14 02 F6 | 	mov	arg02, fp
35208     10 4E 85 F1 | 	sub	fp, #16
3520c     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
35210     24 4E 05 F1 | 	add	fp, #36
35214     A7 14 02 FB | 	rdlong	arg02, fp
35218     50 14 86 F1 | 	sub	arg02, #80
3521c     09 14 66 F0 | 	shl	arg02, #9
35220     04 4E 85 F1 | 	sub	fp, #4
35224     A7 FA 01 FB | 	rdlong	result1, fp
35228     01 FA 05 F1 | 	add	result1, #1
3522c     05 FA 65 F0 | 	shl	result1, #5
35230     FD 14 42 F5 | 	or	arg02, result1
35234     04 4E 85 F1 | 	sub	fp, #4
35238     A7 FA 01 FB | 	rdlong	result1, fp
3523c     FD 14 42 F5 | 	or	arg02, result1
35240     14 4E 85 F1 | 	sub	fp, #20
35244     A7 14 62 FC | 	wrlong	arg02, fp
35248     10 4E 05 F1 | 	add	fp, #16
3524c     A7 14 02 FB | 	rdlong	arg02, fp
35250     0B 14 66 F0 | 	shl	arg02, #11
35254     04 4E 85 F1 | 	sub	fp, #4
35258     A7 FA 01 FB | 	rdlong	result1, fp
3525c     05 FA 65 F0 | 	shl	result1, #5
35260     FD 14 42 F5 | 	or	arg02, result1
35264     04 4E 85 F1 | 	sub	fp, #4
35268     A7 FA 01 FB | 	rdlong	result1, fp
3526c     FD 14 42 F5 | 	or	arg02, result1
35270     04 4E 85 F1 | 	sub	fp, #4
35274     A7 14 62 FC | 	wrlong	arg02, fp
35278                 | ' 
35278                 | '     now = time(0);
35278                 | '     _gmtime_r (&now, &date);
35278                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
35278                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
35278                 | '     return (ffdate << 16) | fftime;
35278     04 4E 85 F1 | 	sub	fp, #4
3527c     A7 FA 01 FB | 	rdlong	result1, fp
35280     10 FA 65 F0 | 	shl	result1, #16
35284     08 4E 85 F1 | 	sub	fp, #8
35288     0A FB 41 F5 | 	or	result1, arg02
3528c     A7 F0 03 F6 | 	mov	ptra, fp
35290     B2 00 A0 FD | 	call	#popregs_
35294                 | _fatfs_cc__get_fattime_ret
35294     2D 00 64 FD | 	ret
35298                 | 
35298                 | _fatfs_cc_unixtime_1043
35298     00 4A 05 F6 | 	mov	COUNT_, #0
3529c     A8 00 A0 FD | 	call	#pushregs_
352a0     34 F0 07 F1 | 	add	ptra, #52
352a4     04 4E 05 F1 | 	add	fp, #4
352a8     A7 12 62 FC | 	wrlong	arg01, fp
352ac     04 4E 05 F1 | 	add	fp, #4
352b0     A7 14 62 FC | 	wrlong	arg02, fp
352b4     04 4E 85 F1 | 	sub	fp, #4
352b8     A7 14 02 FB | 	rdlong	arg02, fp
352bc     09 14 46 F0 | 	shr	arg02, #9
352c0     7F 14 06 F5 | 	and	arg02, #127
352c4     50 FA 05 F6 | 	mov	result1, #80
352c8     0A FB 01 F1 | 	add	result1, arg02
352cc     20 4E 05 F1 | 	add	fp, #32
352d0     A7 FA 61 FC | 	wrlong	result1, fp
352d4     20 4E 85 F1 | 	sub	fp, #32
352d8     A7 FA 01 FB | 	rdlong	result1, fp
352dc     05 FA 45 F0 | 	shr	result1, #5
352e0     FD FA 41 F8 | 	getnib	result1, result1, #0
352e4     01 FA 85 F1 | 	sub	result1, #1
352e8     1C 4E 05 F1 | 	add	fp, #28
352ec     A7 FA 61 FC | 	wrlong	result1, fp
352f0     1C 4E 85 F1 | 	sub	fp, #28
352f4     A7 FA 01 FB | 	rdlong	result1, fp
352f8     1F FA 05 F5 | 	and	result1, #31
352fc     18 4E 05 F1 | 	add	fp, #24
35300     A7 FA 61 FC | 	wrlong	result1, fp
35304     14 4E 85 F1 | 	sub	fp, #20
35308     A7 FA 01 FB | 	rdlong	result1, fp
3530c     0B FA 45 F0 | 	shr	result1, #11
35310     1F FA 05 F5 | 	and	result1, #31
35314     10 4E 05 F1 | 	add	fp, #16
35318     A7 FA 61 FC | 	wrlong	result1, fp
3531c     10 4E 85 F1 | 	sub	fp, #16
35320     A7 FA 01 FB | 	rdlong	result1, fp
35324     05 FA 45 F0 | 	shr	result1, #5
35328     3F FA 05 F5 | 	and	result1, #63
3532c     0C 4E 05 F1 | 	add	fp, #12
35330     A7 FA 61 FC | 	wrlong	result1, fp
35334     0C 4E 85 F1 | 	sub	fp, #12
35338     A7 14 02 FB | 	rdlong	arg02, fp
3533c     1F 14 06 F5 | 	and	arg02, #31
35340     01 14 66 F0 | 	shl	arg02, #1
35344     08 4E 05 F1 | 	add	fp, #8
35348     A7 14 62 FC | 	wrlong	arg02, fp
3534c     A7 12 02 F6 | 	mov	arg01, fp
35350     10 4E 85 F1 | 	sub	fp, #16
35354     4C FA BF FD | 	call	#_fatfs_cc_mktime
35358     0C 4E 05 F1 | 	add	fp, #12
3535c     A7 FA 61 FC | 	wrlong	result1, fp
35360                 | ' 
35360                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
35360                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
35360                 | '     date.tm_mday = (dosdate & 0x1f);
35360                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
35360                 | '     date.tm_min = (dostime >> 5) & 0x3f;
35360                 | '     date.tm_sec = (dostime & 0x1f) << 1;
35360                 | ' 
35360                 | '     t = mktime(&date);
35360                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35360                 | '     return t;
35360     0C 4E 85 F1 | 	sub	fp, #12
35364     A7 F0 03 F6 | 	mov	ptra, fp
35368     B2 00 A0 FD | 	call	#popregs_
3536c                 | _fatfs_cc_unixtime_1043_ret
3536c     2D 00 64 FD | 	ret
35370                 | 
35370                 | _fatfs_cc__set_dos_error_1045
35370     09 01 02 F6 | 	mov	_var01, arg01
35374                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35374                 | '     switch (derr) {
35374     14 00 26 F3 | 	fle	_var01, #20
35378     30 00 62 FD | 	jmprel	_var01
3537c                 | LR__5150
3537c     50 00 90 FD | 	jmp	#LR__5151
35380     84 00 90 FD | 	jmp	#LR__5165
35384     80 00 90 FD | 	jmp	#LR__5166
35388     7C 00 90 FD | 	jmp	#LR__5167
3538c     48 00 90 FD | 	jmp	#LR__5152
35390     44 00 90 FD | 	jmp	#LR__5153
35394     40 00 90 FD | 	jmp	#LR__5154
35398     44 00 90 FD | 	jmp	#LR__5155
3539c     48 00 90 FD | 	jmp	#LR__5157
353a0     54 00 90 FD | 	jmp	#LR__5160
353a4     38 00 90 FD | 	jmp	#LR__5156
353a8     4C 00 90 FD | 	jmp	#LR__5161
353ac     48 00 90 FD | 	jmp	#LR__5162
353b0     44 00 90 FD | 	jmp	#LR__5163
353b4     50 00 90 FD | 	jmp	#LR__5168
353b8     4C 00 90 FD | 	jmp	#LR__5168
353bc     48 00 90 FD | 	jmp	#LR__5168
353c0     2C 00 90 FD | 	jmp	#LR__5158
353c4     38 00 90 FD | 	jmp	#LR__5164
353c8     2C 00 90 FD | 	jmp	#LR__5159
353cc     38 00 90 FD | 	jmp	#LR__5168
353d0                 | LR__5151
353d0     00 02 06 F6 | 	mov	_var02, #0
353d4                 | '         r = 0;
353d4                 | '         break;
353d4     34 00 90 FD | 	jmp	#LR__5169
353d8                 | LR__5152
353d8                 | LR__5153
353d8                 | LR__5154
353d8     04 02 06 F6 | 	mov	_var02, #4
353dc                 | '         r =  4 ;
353dc                 | '         break;
353dc     2C 00 90 FD | 	jmp	#LR__5169
353e0                 | LR__5155
353e0                 | LR__5156
353e0     06 02 06 F6 | 	mov	_var02, #6
353e4                 | '         r =  6 ;
353e4                 | '         break;
353e4     24 00 90 FD | 	jmp	#LR__5169
353e8                 | LR__5157
353e8     09 02 06 F6 | 	mov	_var02, #9
353ec                 | '         r =  9 ;
353ec                 | '         break;
353ec     1C 00 90 FD | 	jmp	#LR__5169
353f0                 | LR__5158
353f0     07 02 06 F6 | 	mov	_var02, #7
353f4                 | '         r =  7 ;
353f4                 | '         break;
353f4     14 00 90 FD | 	jmp	#LR__5169
353f8                 | LR__5159
353f8                 | LR__5160
353f8                 | LR__5161
353f8                 | LR__5162
353f8                 | LR__5163
353f8     0A 02 06 F6 | 	mov	_var02, #10
353fc                 | '         r =  10 ;
353fc                 | '         break;
353fc     0C 00 90 FD | 	jmp	#LR__5169
35400                 | LR__5164
35400     0B 02 06 F6 | 	mov	_var02, #11
35404                 | '         r =  11 ;
35404                 | '         break;
35404     04 00 90 FD | 	jmp	#LR__5169
35408                 | LR__5165
35408                 | LR__5166
35408                 | LR__5167
35408                 | LR__5168
35408     0C 02 06 F6 | 	mov	_var02, #12
3540c                 | '         r =  12 ;
3540c                 | '         break;
3540c                 | LR__5169
3540c                 | '     }
3540c                 | '     return _seterror(r);
3540c     00 02 4E F2 | 	cmps	_var02, #0 wz
35410     20 E6 05 F1 | 	add	ptr___system__dat__, #32
35414     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
35418     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
3541c     01 FA 65 56 |  if_ne	neg	result1, #1
35420     00 FA 05 A6 |  if_e	mov	result1, #0
35424                 | _fatfs_cc__set_dos_error_1045_ret
35424     2D 00 64 FD | 	ret
35428                 | 
35428                 | _fatfs_cc_v_creat
35428     04 4A 05 F6 | 	mov	COUNT_, #4
3542c     A8 00 A0 FD | 	call	#pushregs_
35430     09 27 02 F6 | 	mov	local01, arg01
35434     0A 29 02 F6 | 	mov	local02, arg02
35438     03 00 00 FF 
3543c     3C 12 06 F6 | 	mov	arg01, ##1596
35440                 | '     return _gc_alloc(size);
35440     10 14 06 F6 | 	mov	arg02, #16
35444     28 5E BF FD | 	call	#__system___gc_doalloc
35448     FD 2A 0A F6 | 	mov	local03, result1 wz
3544c                 | '       return _seterror( 7 );
3544c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35450     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
35454     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35458     01 FA 65 A6 |  if_e	neg	result1, #1
3545c     58 00 90 AD |  if_e	jmp	#LR__5171
35460     15 13 02 F6 | 	mov	arg01, local03
35464     00 14 06 F6 | 	mov	arg02, #0
35468     03 00 00 FF 
3546c     3C 16 06 F6 | 	mov	arg03, ##1596
35470     98 00 A0 FD | 	call	#\builtin_bytefill_
35474     02 00 00 FF 
35478     14 2A 06 F1 | 	add	local03, ##1044
3547c     15 13 02 F6 | 	mov	arg01, local03
35480     02 00 00 FF 
35484     14 2A 86 F1 | 	sub	local03, ##1044
35488     14 15 02 F6 | 	mov	arg02, local02
3548c     07 16 06 F6 | 	mov	arg03, #7
35490     B4 CC BF FD | 	call	#_fatfs_cc_f_open
35494     FD 2C 0A F6 | 	mov	local04, result1 wz
35498     14 00 90 AD |  if_e	jmp	#LR__5170
3549c     15 13 02 F6 | 	mov	arg01, local03
354a0                 | '     return _gc_free(ptr);
354a0     D8 5E BF FD | 	call	#__system___gc_free
354a4                 | '     free(f);
354a4                 | '     return _set_dos_error(r);
354a4     16 13 02 F6 | 	mov	arg01, local04
354a8     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1045
354ac     08 00 90 FD | 	jmp	#LR__5171
354b0                 | LR__5170
354b0     13 2B 62 FC | 	wrlong	local03, local01
354b4                 | '   }
354b4                 | '   fil->vfsdata = f;
354b4                 | '   return 0;
354b4     00 FA 05 F6 | 	mov	result1, #0
354b8                 | LR__5171
354b8     A7 F0 03 F6 | 	mov	ptra, fp
354bc     B2 00 A0 FD | 	call	#popregs_
354c0                 | _fatfs_cc_v_creat_ret
354c0     2D 00 64 FD | 	ret
354c4                 | 
354c4                 | _fatfs_cc_v_close
354c4     02 4A 05 F6 | 	mov	COUNT_, #2
354c8     A8 00 A0 FD | 	call	#pushregs_
354cc     09 27 02 FB | 	rdlong	local01, arg01
354d0     02 00 00 FF 
354d4     14 26 06 F1 | 	add	local01, ##1044
354d8     13 13 02 F6 | 	mov	arg01, local01
354dc     02 00 00 FF 
354e0     14 26 86 F1 | 	sub	local01, ##1044
354e4     DC E3 BF FD | 	call	#_fatfs_cc_f_close
354e8     FD 28 02 F6 | 	mov	local02, result1
354ec     13 13 02 F6 | 	mov	arg01, local01
354f0                 | '     return _gc_free(ptr);
354f0     88 5E BF FD | 	call	#__system___gc_free
354f4                 | '     FAT_FIL *f = fil->vfsdata;
354f4                 | '     r=f_close(&f->fil);
354f4                 | '     free(f);
354f4                 | '     return _set_dos_error(r);
354f4     14 13 02 F6 | 	mov	arg01, local02
354f8     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1045
354fc     A7 F0 03 F6 | 	mov	ptra, fp
35500     B2 00 A0 FD | 	call	#popregs_
35504                 | _fatfs_cc_v_close_ret
35504     2D 00 64 FD | 	ret
35508                 | 
35508                 | _fatfs_cc_v_opendir
35508     04 4A 05 F6 | 	mov	COUNT_, #4
3550c     A8 00 A0 FD | 	call	#pushregs_
35510     09 27 02 F6 | 	mov	local01, arg01
35514     0A 29 02 F6 | 	mov	local02, arg02
35518     30 12 06 F6 | 	mov	arg01, #48
3551c                 | '     return _gc_alloc(size);
3551c     10 14 06 F6 | 	mov	arg02, #16
35520     4C 5D BF FD | 	call	#__system___gc_doalloc
35524     FD 2A 0A F6 | 	mov	local03, result1 wz
35528                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35528                 | '       return _seterror( 7 );
35528     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
3552c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
35530     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35534     01 FA 65 A6 |  if_e	neg	result1, #1
35538     34 00 90 AD |  if_e	jmp	#LR__5181
3553c     14 15 02 F6 | 	mov	arg02, local02
35540     15 13 02 F6 | 	mov	arg01, local03
35544     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
35548     FD 2C 0A F6 | 	mov	local04, result1 wz
3554c     14 00 90 AD |  if_e	jmp	#LR__5180
35550     15 13 02 F6 | 	mov	arg01, local03
35554                 | '     return _gc_free(ptr);
35554     24 5E BF FD | 	call	#__system___gc_free
35558                 | '         free(f);
35558                 | '         return _set_dos_error(r);
35558     16 13 02 F6 | 	mov	arg01, local04
3555c     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1045
35560     0C 00 90 FD | 	jmp	#LR__5181
35564                 | LR__5180
35564     04 26 06 F1 | 	add	local01, #4
35568     13 2B 62 FC | 	wrlong	local03, local01
3556c                 | '     }
3556c                 | '     dir->vfsdata = f;
3556c                 | '     return 0;
3556c     00 FA 05 F6 | 	mov	result1, #0
35570                 | LR__5181
35570     A7 F0 03 F6 | 	mov	ptra, fp
35574     B2 00 A0 FD | 	call	#popregs_
35578                 | _fatfs_cc_v_opendir_ret
35578     2D 00 64 FD | 	ret
3557c                 | 
3557c                 | _fatfs_cc_v_closedir
3557c     02 4A 05 F6 | 	mov	COUNT_, #2
35580     A8 00 A0 FD | 	call	#pushregs_
35584     04 12 06 F1 | 	add	arg01, #4
35588     09 27 02 FB | 	rdlong	local01, arg01
3558c     13 13 02 F6 | 	mov	arg01, local01
35590     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
35594     FD 28 02 F6 | 	mov	local02, result1
35598     13 13 02 F6 | 	mov	arg01, local01
3559c                 | '     return _gc_free(ptr);
3559c     DC 5D BF FD | 	call	#__system___gc_free
355a0     00 28 0E F2 | 	cmp	local02, #0 wz
355a4     14 13 02 56 |  if_ne	mov	arg01, local02
355a8     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1045
355ac                 | '     return r;
355ac     14 FB 01 F6 | 	mov	result1, local02
355b0     A7 F0 03 F6 | 	mov	ptra, fp
355b4     B2 00 A0 FD | 	call	#popregs_
355b8                 | _fatfs_cc_v_closedir_ret
355b8     2D 00 64 FD | 	ret
355bc                 | 
355bc                 | _fatfs_cc_v_readdir
355bc     01 4A 05 F6 | 	mov	COUNT_, #1
355c0     A8 00 A0 FD | 	call	#pushregs_
355c4     2C F1 07 F1 | 	add	ptra, #300
355c8     04 4E 05 F1 | 	add	fp, #4
355cc     A7 12 62 FC | 	wrlong	arg01, fp
355d0     04 4E 05 F1 | 	add	fp, #4
355d4     A7 14 62 FC | 	wrlong	arg02, fp
355d8     04 4E 85 F1 | 	sub	fp, #4
355dc     A7 16 02 FB | 	rdlong	arg03, fp
355e0     04 16 06 F1 | 	add	arg03, #4
355e4     0B 13 02 FB | 	rdlong	arg01, arg03
355e8     08 4E 05 F1 | 	add	fp, #8
355ec     A7 14 02 F6 | 	mov	arg02, fp
355f0     0C 4E 85 F1 | 	sub	fp, #12
355f4     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
355f8     28 4F 05 F1 | 	add	fp, #296
355fc     A7 FA 61 FC | 	wrlong	result1, fp
35600     28 4F 85 F1 | 	sub	fp, #296
35604     00 FA 0D F2 | 	cmp	result1, #0 wz
35608     14 00 90 AD |  if_e	jmp	#LR__5190
3560c                 | '         return _set_dos_error(r);
3560c     28 4F 05 F1 | 	add	fp, #296
35610     A7 12 02 FB | 	rdlong	arg01, fp
35614     28 4F 85 F1 | 	sub	fp, #296
35618     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1045
3561c     C4 00 90 FD | 	jmp	#LR__5193
35620                 | LR__5190
35620     28 4E 05 F1 | 	add	fp, #40
35624     A7 16 CA FA | 	rdbyte	arg03, fp wz
35628     28 4E 85 F1 | 	sub	fp, #40
3562c                 | '         return -1;
3562c     01 FA 65 A6 |  if_e	neg	result1, #1
35630     B0 00 90 AD |  if_e	jmp	#LR__5193
35634     08 4E 05 F1 | 	add	fp, #8
35638     A7 12 02 FB | 	rdlong	arg01, fp
3563c     20 4E 05 F1 | 	add	fp, #32
35640     A7 14 02 F6 | 	mov	arg02, fp
35644     28 4E 85 F1 | 	sub	fp, #40
35648     3F 16 06 F6 | 	mov	arg03, #63
3564c     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
35650     08 4E 05 F1 | 	add	fp, #8
35654     A7 16 02 FB | 	rdlong	arg03, fp
35658     3F 16 06 F1 | 	add	arg03, #63
3565c     0B 01 48 FC | 	wrbyte	#0, arg03
35660     0C 4E 05 F1 | 	add	fp, #12
35664     A7 16 C2 FA | 	rdbyte	arg03, fp
35668     14 4E 85 F1 | 	sub	fp, #20
3566c     10 16 CE F7 | 	test	arg03, #16 wz
35670     18 00 90 AD |  if_e	jmp	#LR__5191
35674     08 4E 05 F1 | 	add	fp, #8
35678     A7 16 02 FB | 	rdlong	arg03, fp
3567c     08 4E 85 F1 | 	sub	fp, #8
35680     50 16 06 F1 | 	add	arg03, #80
35684     0B 03 48 FC | 	wrbyte	#1, arg03
35688     14 00 90 FD | 	jmp	#LR__5192
3568c                 | LR__5191
3568c     08 4E 05 F1 | 	add	fp, #8
35690     A7 16 02 FB | 	rdlong	arg03, fp
35694     08 4E 85 F1 | 	sub	fp, #8
35698     50 16 06 F1 | 	add	arg03, #80
3569c     0B 01 48 FC | 	wrbyte	#0, arg03
356a0                 | LR__5192
356a0     08 4E 05 F1 | 	add	fp, #8
356a4     A7 16 02 FB | 	rdlong	arg03, fp
356a8     04 4E 05 F1 | 	add	fp, #4
356ac     A7 14 02 FB | 	rdlong	arg02, fp
356b0     48 16 06 F1 | 	add	arg03, #72
356b4     0B 15 62 FC | 	wrlong	arg02, arg03
356b8     04 4E 85 F1 | 	sub	fp, #4
356bc     A7 26 02 FB | 	rdlong	local01, fp
356c0     08 4E 05 F1 | 	add	fp, #8
356c4     A7 12 E2 FA | 	rdword	arg01, fp
356c8     02 4E 05 F1 | 	add	fp, #2
356cc     A7 14 E2 FA | 	rdword	arg02, fp
356d0     12 4E 85 F1 | 	sub	fp, #18
356d4     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_1043
356d8     4C 26 06 F1 | 	add	local01, #76
356dc     13 FB 61 FC | 	wrlong	result1, local01
356e0                 | '         ent->d_type =  (0) ;
356e0                 | '     }
356e0                 | '     ent->d_size = finfo.fsize;
356e0                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
356e0                 | '     return 0;
356e0     00 FA 05 F6 | 	mov	result1, #0
356e4                 | LR__5193
356e4     A7 F0 03 F6 | 	mov	ptra, fp
356e8     B2 00 A0 FD | 	call	#popregs_
356ec                 | _fatfs_cc_v_readdir_ret
356ec     2D 00 64 FD | 	ret
356f0                 | 
356f0                 | _fatfs_cc_v_stat
356f0     03 4A 05 F6 | 	mov	COUNT_, #3
356f4     A8 00 A0 FD | 	call	#pushregs_
356f8     30 F1 07 F1 | 	add	ptra, #304
356fc     04 4E 05 F1 | 	add	fp, #4
35700     A7 12 62 FC | 	wrlong	arg01, fp
35704     04 4E 05 F1 | 	add	fp, #4
35708     A7 14 62 FC | 	wrlong	arg02, fp
3570c     08 4E 85 F1 | 	sub	fp, #8
35710     0A 13 02 F6 | 	mov	arg01, arg02
35714     00 14 06 F6 | 	mov	arg02, #0
35718     30 16 06 F6 | 	mov	arg03, #48
3571c     98 00 A0 FD | 	call	#\builtin_bytefill_
35720     04 4E 05 F1 | 	add	fp, #4
35724     A7 FA 01 FB | 	rdlong	result1, fp
35728     04 4E 85 F1 | 	sub	fp, #4
3572c     FD FA C9 FA | 	rdbyte	result1, result1 wz
35730     2C 00 90 AD |  if_e	jmp	#LR__5200
35734     04 4E 05 F1 | 	add	fp, #4
35738     A7 FA 01 FB | 	rdlong	result1, fp
3573c     04 4E 85 F1 | 	sub	fp, #4
35740     FD FA C1 FA | 	rdbyte	result1, result1
35744     2E FA 0D F2 | 	cmp	result1, #46 wz
35748     04 4E 05 A1 |  if_e	add	fp, #4
3574c     A7 26 02 AB |  if_e	rdlong	local01, fp
35750     04 4E 85 A1 |  if_e	sub	fp, #4
35754     01 26 06 A1 |  if_e	add	local01, #1
35758     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
3575c     18 00 90 5D |  if_ne	jmp	#LR__5201
35760                 | LR__5200
35760     18 4E 05 F1 | 	add	fp, #24
35764     A7 20 48 FC | 	wrbyte	#16, fp
35768     0C 4E 85 F1 | 	sub	fp, #12
3576c     A7 00 68 FC | 	wrlong	#0, fp
35770     0C 4E 85 F1 | 	sub	fp, #12
35774     24 00 90 FD | 	jmp	#LR__5202
35778                 | LR__5201
35778     04 4E 05 F1 | 	add	fp, #4
3577c     A7 12 02 FB | 	rdlong	arg01, fp
35780     0C 4E 05 F1 | 	add	fp, #12
35784     A7 14 02 F6 | 	mov	arg02, fp
35788     10 4E 85 F1 | 	sub	fp, #16
3578c     AC EB BF FD | 	call	#_fatfs_cc_f_stat
35790     0C 4E 05 F1 | 	add	fp, #12
35794     A7 FA 61 FC | 	wrlong	result1, fp
35798     0C 4E 85 F1 | 	sub	fp, #12
3579c                 | LR__5202
3579c     0C 4E 05 F1 | 	add	fp, #12
357a0     A7 28 0A FB | 	rdlong	local02, fp wz
357a4     0C 4E 85 F1 | 	sub	fp, #12
357a8     14 00 90 AD |  if_e	jmp	#LR__5203
357ac                 | '         return _set_dos_error(r);
357ac     0C 4E 05 F1 | 	add	fp, #12
357b0     A7 12 02 FB | 	rdlong	arg01, fp
357b4     0C 4E 85 F1 | 	sub	fp, #12
357b8     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1045
357bc     14 01 90 FD | 	jmp	#LR__5204
357c0                 | LR__5203
357c0     2C 4F 05 F1 | 	add	fp, #300
357c4     A7 48 6A FC | 	wrlong	#292, fp
357c8     14 4F 85 F1 | 	sub	fp, #276
357cc     A7 2A C2 FA | 	rdbyte	local03, fp
357d0     18 4E 85 F1 | 	sub	fp, #24
357d4     01 2A CE F7 | 	test	local03, #1 wz
357d8     2C 4F 05 A1 |  if_e	add	fp, #300
357dc     A7 2A 02 AB |  if_e	rdlong	local03, fp
357e0     92 2A 46 A5 |  if_e	or	local03, #146
357e4     A7 2A 62 AC |  if_e	wrlong	local03, fp
357e8     2C 4F 85 A1 |  if_e	sub	fp, #300
357ec     18 4E 05 F1 | 	add	fp, #24
357f0     A7 2A C2 FA | 	rdbyte	local03, fp
357f4     18 4E 85 F1 | 	sub	fp, #24
357f8     10 2A CE F7 | 	test	local03, #16 wz
357fc     2C 4F 05 51 |  if_ne	add	fp, #300
35800     A7 2A 02 5B |  if_ne	rdlong	local03, fp
35804     08 00 00 5F 
35808     49 2A 46 55 |  if_ne	or	local03, ##4169
3580c     A7 2A 62 5C |  if_ne	wrlong	local03, fp
35810     2C 4F 85 51 |  if_ne	sub	fp, #300
35814     08 4E 05 F1 | 	add	fp, #8
35818     A7 2A 02 FB | 	rdlong	local03, fp
3581c     24 4F 05 F1 | 	add	fp, #292
35820     A7 28 02 FB | 	rdlong	local02, fp
35824     08 2A 06 F1 | 	add	local03, #8
35828     15 29 62 FC | 	wrlong	local02, local03
3582c     24 4F 85 F1 | 	sub	fp, #292
35830     A7 2A 02 FB | 	rdlong	local03, fp
35834     0C 2A 06 F1 | 	add	local03, #12
35838     15 03 68 FC | 	wrlong	#1, local03
3583c     A7 2A 02 FB | 	rdlong	local03, fp
35840     08 4E 05 F1 | 	add	fp, #8
35844     A7 28 02 FB | 	rdlong	local02, fp
35848     18 2A 06 F1 | 	add	local03, #24
3584c     15 29 62 FC | 	wrlong	local02, local03
35850     08 4E 85 F1 | 	sub	fp, #8
35854     A7 2A 02 FB | 	rdlong	local03, fp
35858     1C 2A 06 F1 | 	add	local03, #28
3585c     01 00 80 FF 
35860     15 01 68 FC | 	wrlong	##512, local03
35864     A7 28 02 FB | 	rdlong	local02, fp
35868     14 2B 02 F6 | 	mov	local03, local02
3586c     18 28 06 F1 | 	add	local02, #24
35870     14 29 02 FB | 	rdlong	local02, local02
35874     FF 29 06 F1 | 	add	local02, #511
35878     14 29 52 F6 | 	abs	local02, local02 wc
3587c     09 28 46 F0 | 	shr	local02, #9
35880     14 29 82 F6 | 	negc	local02, local02
35884     20 2A 06 F1 | 	add	local03, #32
35888     15 29 62 FC | 	wrlong	local02, local03
3588c     A7 28 02 FB | 	rdlong	local02, fp
35890     14 2B 02 F6 | 	mov	local03, local02
35894     14 27 02 F6 | 	mov	local01, local02
35898     0C 4E 05 F1 | 	add	fp, #12
3589c     A7 12 E2 FA | 	rdword	arg01, fp
358a0     02 4E 05 F1 | 	add	fp, #2
358a4     A7 14 E2 FA | 	rdword	arg02, fp
358a8     16 4E 85 F1 | 	sub	fp, #22
358ac     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_1043
358b0     2C 26 06 F1 | 	add	local01, #44
358b4     13 FB 61 FC | 	wrlong	result1, local01
358b8     28 28 06 F1 | 	add	local02, #40
358bc     14 FB 61 FC | 	wrlong	result1, local02
358c0     24 2A 06 F1 | 	add	local03, #36
358c4     15 FB 61 FC | 	wrlong	result1, local03
358c8                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
358c8                 | '     }
358c8                 | '     buf->st_mode = mode;
358c8                 | '     buf->st_nlink = 1;
358c8                 | '     buf->st_size = finfo.fsize;
358c8                 | '     buf->st_blksize = 512;
358c8                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
358c8                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
358c8                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
358c8                 | '     return r;
358c8     0C 4E 05 F1 | 	add	fp, #12
358cc     A7 FA 01 FB | 	rdlong	result1, fp
358d0     0C 4E 85 F1 | 	sub	fp, #12
358d4                 | LR__5204
358d4     A7 F0 03 F6 | 	mov	ptra, fp
358d8     B2 00 A0 FD | 	call	#popregs_
358dc                 | _fatfs_cc_v_stat_ret
358dc     2D 00 64 FD | 	ret
358e0                 | 
358e0                 | _fatfs_cc_v_read
358e0     00 4A 05 F6 | 	mov	COUNT_, #0
358e4     A8 00 A0 FD | 	call	#pushregs_
358e8     1C F0 07 F1 | 	add	ptra, #28
358ec     04 4E 05 F1 | 	add	fp, #4
358f0     A7 12 62 FC | 	wrlong	arg01, fp
358f4     04 4E 05 F1 | 	add	fp, #4
358f8     A7 14 62 FC | 	wrlong	arg02, fp
358fc     04 4E 05 F1 | 	add	fp, #4
35900     A7 16 62 FC | 	wrlong	arg03, fp
35904     08 4E 85 F1 | 	sub	fp, #8
35908     A7 12 02 FB | 	rdlong	arg01, fp
3590c     09 13 0A FB | 	rdlong	arg01, arg01 wz
35910     0C 4E 05 F1 | 	add	fp, #12
35914     A7 12 62 FC | 	wrlong	arg01, fp
35918     10 4E 85 F1 | 	sub	fp, #16
3591c                 | '         return _seterror( 5 );
3591c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35920     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35924     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35928     01 FA 65 A6 |  if_e	neg	result1, #1
3592c     B8 00 90 AD |  if_e	jmp	#LR__5212
35930     10 4E 05 F1 | 	add	fp, #16
35934     A7 12 02 FB | 	rdlong	arg01, fp
35938     02 00 00 FF 
3593c     14 12 06 F1 | 	add	arg01, ##1044
35940     08 4E 85 F1 | 	sub	fp, #8
35944     A7 14 02 FB | 	rdlong	arg02, fp
35948     04 4E 05 F1 | 	add	fp, #4
3594c     A7 16 02 FB | 	rdlong	arg03, fp
35950     0C 4E 05 F1 | 	add	fp, #12
35954     A7 18 02 F6 | 	mov	arg04, fp
35958     18 4E 85 F1 | 	sub	fp, #24
3595c     C4 CE BF FD | 	call	#_fatfs_cc_f_read
35960     14 4E 05 F1 | 	add	fp, #20
35964     A7 FA 61 FC | 	wrlong	result1, fp
35968     14 4E 85 F1 | 	sub	fp, #20
3596c     00 FA 0D F2 | 	cmp	result1, #0 wz
35970     34 00 90 AD |  if_e	jmp	#LR__5210
35974     04 4E 05 F1 | 	add	fp, #4
35978     A7 18 02 FB | 	rdlong	arg04, fp
3597c     0C 17 02 F6 | 	mov	arg03, arg04
35980     08 18 06 F1 | 	add	arg04, #8
35984     0C 19 02 FB | 	rdlong	arg04, arg04
35988     20 18 46 F5 | 	or	arg04, #32
3598c     08 16 06 F1 | 	add	arg03, #8
35990     0B 19 62 FC | 	wrlong	arg04, arg03
35994                 | '         fil->state |=  (0x20) ;
35994                 | '         return _set_dos_error(r);
35994     10 4E 05 F1 | 	add	fp, #16
35998     A7 12 02 FB | 	rdlong	arg01, fp
3599c     14 4E 85 F1 | 	sub	fp, #20
359a0     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1045
359a4     40 00 90 FD | 	jmp	#LR__5212
359a8                 | LR__5210
359a8     18 4E 05 F1 | 	add	fp, #24
359ac     A7 FA 09 FB | 	rdlong	result1, fp wz
359b0     18 4E 85 F1 | 	sub	fp, #24
359b4     24 00 90 5D |  if_ne	jmp	#LR__5211
359b8     04 4E 05 F1 | 	add	fp, #4
359bc     A7 FA 01 FB | 	rdlong	result1, fp
359c0     FD 18 02 F6 | 	mov	arg04, result1
359c4     04 4E 85 F1 | 	sub	fp, #4
359c8     08 FA 05 F1 | 	add	result1, #8
359cc     FD FA 01 FB | 	rdlong	result1, result1
359d0     10 FA 45 F5 | 	or	result1, #16
359d4     08 18 06 F1 | 	add	arg04, #8
359d8     0C FB 61 FC | 	wrlong	result1, arg04
359dc                 | LR__5211
359dc                 | '         fil->state |=  (0x10) ;
359dc                 | '     }
359dc                 | '     return x;
359dc     18 4E 05 F1 | 	add	fp, #24
359e0     A7 FA 01 FB | 	rdlong	result1, fp
359e4     18 4E 85 F1 | 	sub	fp, #24
359e8                 | LR__5212
359e8     A7 F0 03 F6 | 	mov	ptra, fp
359ec     B2 00 A0 FD | 	call	#popregs_
359f0                 | _fatfs_cc_v_read_ret
359f0     2D 00 64 FD | 	ret
359f4                 | 
359f4                 | _fatfs_cc_v_write
359f4     00 4A 05 F6 | 	mov	COUNT_, #0
359f8     A8 00 A0 FD | 	call	#pushregs_
359fc     1C F0 07 F1 | 	add	ptra, #28
35a00     04 4E 05 F1 | 	add	fp, #4
35a04     A7 12 62 FC | 	wrlong	arg01, fp
35a08     04 4E 05 F1 | 	add	fp, #4
35a0c     A7 14 62 FC | 	wrlong	arg02, fp
35a10     04 4E 05 F1 | 	add	fp, #4
35a14     A7 16 62 FC | 	wrlong	arg03, fp
35a18     08 4E 85 F1 | 	sub	fp, #8
35a1c     A7 12 02 FB | 	rdlong	arg01, fp
35a20     09 13 0A FB | 	rdlong	arg01, arg01 wz
35a24     0C 4E 05 F1 | 	add	fp, #12
35a28     A7 12 62 FC | 	wrlong	arg01, fp
35a2c     10 4E 85 F1 | 	sub	fp, #16
35a30                 | '         return _seterror( 5 );
35a30     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35a34     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35a38     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35a3c     01 FA 65 A6 |  if_e	neg	result1, #1
35a40     84 00 90 AD |  if_e	jmp	#LR__5221
35a44     10 4E 05 F1 | 	add	fp, #16
35a48     A7 12 02 FB | 	rdlong	arg01, fp
35a4c     02 00 00 FF 
35a50     14 12 06 F1 | 	add	arg01, ##1044
35a54     08 4E 85 F1 | 	sub	fp, #8
35a58     A7 14 02 FB | 	rdlong	arg02, fp
35a5c     04 4E 05 F1 | 	add	fp, #4
35a60     A7 16 02 FB | 	rdlong	arg03, fp
35a64     0C 4E 05 F1 | 	add	fp, #12
35a68     A7 18 02 F6 | 	mov	arg04, fp
35a6c     18 4E 85 F1 | 	sub	fp, #24
35a70     4C D4 BF FD | 	call	#_fatfs_cc_f_write
35a74     14 4E 05 F1 | 	add	fp, #20
35a78     A7 FA 61 FC | 	wrlong	result1, fp
35a7c     14 4E 85 F1 | 	sub	fp, #20
35a80     00 FA 0D F2 | 	cmp	result1, #0 wz
35a84     34 00 90 AD |  if_e	jmp	#LR__5220
35a88     04 4E 05 F1 | 	add	fp, #4
35a8c     A7 18 02 FB | 	rdlong	arg04, fp
35a90     0C 17 02 F6 | 	mov	arg03, arg04
35a94     08 18 06 F1 | 	add	arg04, #8
35a98     0C 19 02 FB | 	rdlong	arg04, arg04
35a9c     20 18 46 F5 | 	or	arg04, #32
35aa0     08 16 06 F1 | 	add	arg03, #8
35aa4     0B 19 62 FC | 	wrlong	arg04, arg03
35aa8                 | '         fil->state |=  (0x20) ;
35aa8                 | '         return _set_dos_error(r);
35aa8     10 4E 05 F1 | 	add	fp, #16
35aac     A7 12 02 FB | 	rdlong	arg01, fp
35ab0     14 4E 85 F1 | 	sub	fp, #20
35ab4     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1045
35ab8     0C 00 90 FD | 	jmp	#LR__5221
35abc                 | LR__5220
35abc                 | '     }
35abc                 | '     return x;
35abc     18 4E 05 F1 | 	add	fp, #24
35ac0     A7 FA 01 FB | 	rdlong	result1, fp
35ac4     18 4E 85 F1 | 	sub	fp, #24
35ac8                 | LR__5221
35ac8     A7 F0 03 F6 | 	mov	ptra, fp
35acc     B2 00 A0 FD | 	call	#popregs_
35ad0                 | _fatfs_cc_v_write_ret
35ad0     2D 00 64 FD | 	ret
35ad4                 | 
35ad4                 | _fatfs_cc_v_lseek
35ad4     04 4A 05 F6 | 	mov	COUNT_, #4
35ad8     A8 00 A0 FD | 	call	#pushregs_
35adc     0A 27 02 F6 | 	mov	local01, arg02
35ae0     0B 29 02 F6 | 	mov	local02, arg03
35ae4     09 2B 02 FB | 	rdlong	local03, arg01
35ae8     02 00 00 FF 
35aec     14 2A 0E F1 | 	add	local03, ##1044 wz
35af0                 | '         return _seterror( 5 );
35af0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35af4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35af8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35afc     01 FA 65 A6 |  if_e	neg	result1, #1
35b00     4C 00 90 AD |  if_e	jmp	#LR__5232
35b04     00 28 0E F2 | 	cmp	local02, #0 wz
35b08     24 00 90 AD |  if_e	jmp	#LR__5230
35b0c     01 28 0E F2 | 	cmp	local02, #1 wz
35b10     14 2A 06 A1 |  if_e	add	local03, #20
35b14     15 2D 02 AB |  if_e	rdlong	local04, local03
35b18     14 2A 86 A1 |  if_e	sub	local03, #20
35b1c     16 27 02 A1 |  if_e	add	local01, local04
35b20     0C 2A 06 51 |  if_ne	add	local03, #12
35b24     15 2D 02 5B |  if_ne	rdlong	local04, local03
35b28     0C 2A 86 51 |  if_ne	sub	local03, #12
35b2c     16 27 02 51 |  if_ne	add	local01, local04
35b30                 | LR__5230
35b30     13 15 02 F6 | 	mov	arg02, local01
35b34     15 13 02 F6 | 	mov	arg01, local03
35b38     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
35b3c     FD 12 0A F6 | 	mov	arg01, result1 wz
35b40     08 00 90 AD |  if_e	jmp	#LR__5231
35b44                 | '         return _set_dos_error(result);
35b44     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1045
35b48     04 00 90 FD | 	jmp	#LR__5232
35b4c                 | LR__5231
35b4c                 | '     }
35b4c                 | '     return offset;
35b4c     13 FB 01 F6 | 	mov	result1, local01
35b50                 | LR__5232
35b50     A7 F0 03 F6 | 	mov	ptra, fp
35b54     B2 00 A0 FD | 	call	#popregs_
35b58                 | _fatfs_cc_v_lseek_ret
35b58     2D 00 64 FD | 	ret
35b5c                 | 
35b5c                 | _fatfs_cc_v_ioctl
35b5c                 | ' {
35b5c                 | '     return _seterror( 10 );
35b5c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
35b60     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
35b64     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
35b68     01 FA 65 F6 | 	neg	result1, #1
35b6c                 | _fatfs_cc_v_ioctl_ret
35b6c     2D 00 64 FD | 	ret
35b70                 | 
35b70                 | _fatfs_cc_v_mkdir
35b70     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
35b74     FD 12 02 F6 | 	mov	arg01, result1
35b78                 | ' 
35b78                 | '     r = f_mkdir(name);
35b78                 | '     return _set_dos_error(r);
35b78     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1045
35b7c                 | _fatfs_cc_v_mkdir_ret
35b7c     2D 00 64 FD | 	ret
35b80                 | 
35b80                 | _fatfs_cc_v_remove
35b80     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
35b84     FD 12 02 F6 | 	mov	arg01, result1
35b88                 | ' 
35b88                 | '     r = f_unlink(name);
35b88                 | '     return _set_dos_error(r);
35b88     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1045
35b8c                 | _fatfs_cc_v_remove_ret
35b8c     2D 00 64 FD | 	ret
35b90                 | 
35b90                 | _fatfs_cc_v_rmdir
35b90     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
35b94     FD 12 02 F6 | 	mov	arg01, result1
35b98                 | ' 
35b98                 | '     r = f_unlink(name);
35b98                 | '     return _set_dos_error(r);
35b98     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1045
35b9c                 | _fatfs_cc_v_rmdir_ret
35b9c     2D 00 64 FD | 	ret
35ba0                 | 
35ba0                 | _fatfs_cc_v_rename
35ba0     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
35ba4     FD 12 02 F6 | 	mov	arg01, result1
35ba8                 | '     return _set_dos_error(r);
35ba8     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1045
35bac                 | _fatfs_cc_v_rename_ret
35bac     2D 00 64 FD | 	ret
35bb0                 | 
35bb0                 | _fatfs_cc_v_open
35bb0     07 4A 05 F6 | 	mov	COUNT_, #7
35bb4     A8 00 A0 FD | 	call	#pushregs_
35bb8     09 27 02 F6 | 	mov	local01, arg01
35bbc     0A 29 02 F6 | 	mov	local02, arg02
35bc0     0B 2B 02 F6 | 	mov	local03, arg03
35bc4     03 00 00 FF 
35bc8     3C 12 06 F6 | 	mov	arg01, ##1596
35bcc                 | '     return _gc_alloc(size);
35bcc     10 14 06 F6 | 	mov	arg02, #16
35bd0     9C 56 BF FD | 	call	#__system___gc_doalloc
35bd4     FD 2C 0A F6 | 	mov	local04, result1 wz
35bd8                 | '       return _seterror( 7 );
35bd8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35bdc     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
35be0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35be4     01 FA 65 A6 |  if_e	neg	result1, #1
35be8     98 00 90 AD |  if_e	jmp	#LR__5246
35bec     16 13 02 F6 | 	mov	arg01, local04
35bf0     00 14 06 F6 | 	mov	arg02, #0
35bf4     03 00 00 FF 
35bf8     3C 16 06 F6 | 	mov	arg03, ##1596
35bfc     98 00 A0 FD | 	call	#\builtin_bytefill_
35c00                 | '   switch (flags & 3) {
35c00     15 2F 02 F6 | 	mov	local05, local03
35c04     03 2E 0E F5 | 	and	local05, #3 wz
35c08     0C 00 90 AD |  if_e	jmp	#LR__5240
35c0c     01 2E 0E F2 | 	cmp	local05, #1 wz
35c10     0C 00 90 AD |  if_e	jmp	#LR__5241
35c14     10 00 90 FD | 	jmp	#LR__5242
35c18                 | LR__5240
35c18     01 30 06 F6 | 	mov	local06, #1
35c1c                 | '       fs_flags =  0x01 ;
35c1c                 | '       break;
35c1c     0C 00 90 FD | 	jmp	#LR__5243
35c20                 | LR__5241
35c20     02 30 06 F6 | 	mov	local06, #2
35c24                 | '       fs_flags =  0x02 ;
35c24                 | '       break;
35c24     04 00 90 FD | 	jmp	#LR__5243
35c28                 | LR__5242
35c28     03 30 06 F6 | 	mov	local06, #3
35c2c                 | '       fs_flags =  0x01  |  0x02 ;
35c2c                 | '       break;
35c2c                 | LR__5243
35c2c     08 2A CE F7 | 	test	local03, #8 wz
35c30     18 30 46 55 |  if_ne	or	local06, #24
35c34     08 00 90 5D |  if_ne	jmp	#LR__5244
35c38     20 2A CE F7 | 	test	local03, #32 wz
35c3c     30 30 46 55 |  if_ne	or	local06, #48
35c40                 | LR__5244
35c40     02 00 00 FF 
35c44     14 2C 06 F1 | 	add	local04, ##1044
35c48     16 13 02 F6 | 	mov	arg01, local04
35c4c     02 00 00 FF 
35c50     14 2C 86 F1 | 	sub	local04, ##1044
35c54     14 15 02 F6 | 	mov	arg02, local02
35c58     18 17 02 F6 | 	mov	arg03, local06
35c5c     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
35c60     FD 32 0A F6 | 	mov	local07, result1 wz
35c64     14 00 90 AD |  if_e	jmp	#LR__5245
35c68     16 13 02 F6 | 	mov	arg01, local04
35c6c                 | '     return _gc_free(ptr);
35c6c     0C 57 BF FD | 	call	#__system___gc_free
35c70                 | '     free(f);
35c70                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35c70                 | '     return _set_dos_error(r);
35c70     19 13 02 F6 | 	mov	arg01, local07
35c74     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1045
35c78     08 00 90 FD | 	jmp	#LR__5246
35c7c                 | LR__5245
35c7c     13 2D 62 FC | 	wrlong	local04, local01
35c80                 | '   }
35c80                 | '   fil->vfsdata = f;
35c80                 | '   return 0;
35c80     00 FA 05 F6 | 	mov	result1, #0
35c84                 | LR__5246
35c84     A7 F0 03 F6 | 	mov	ptra, fp
35c88     B2 00 A0 FD | 	call	#popregs_
35c8c                 | _fatfs_cc_v_open_ret
35c8c     2D 00 64 FD | 	ret
35c90                 | 
35c90                 | _fatfs_cc_v_flush
35c90     09 13 02 FB | 	rdlong	arg01, arg01
35c94     02 00 00 FF 
35c98     14 12 0E F1 | 	add	arg01, ##1044 wz
35c9c                 | '         return _seterror( 5 );
35c9c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35ca0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35ca4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35ca8     01 FA 65 A6 |  if_e	neg	result1, #1
35cac     0C 00 90 AD |  if_e	jmp	#LR__5250
35cb0     00 DA BF FD | 	call	#_fatfs_cc_f_sync
35cb4     FD 12 02 F6 | 	mov	arg01, result1
35cb8                 | '     }
35cb8                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35cb8                 | '     result = f_sync(f);
35cb8                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35cb8                 | '     return _set_dos_error(result);
35cb8     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1045
35cbc                 | LR__5250
35cbc                 | _fatfs_cc_v_flush_ret
35cbc     2D 00 64 FD | 	ret
35cc0                 | 
35cc0                 | _fatfs_cc_v_init
35cc0                 | ' {
35cc0                 | '     return 0;
35cc0     00 FA 05 F6 | 	mov	result1, #0
35cc4                 | _fatfs_cc_v_init_ret
35cc4     2D 00 64 FD | 	ret
35cc8                 | 
35cc8                 | _fatfs_cc_v_deinit
35cc8     B6 01 00 FF 
35ccc     38 14 06 F6 | 	mov	arg02, ##@LR__5446
35cd0     00 12 06 F6 | 	mov	arg01, #0
35cd4     00 16 06 F6 | 	mov	arg03, #0
35cd8     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
35cdc     01 00 00 FF 
35ce0     08 E4 05 F1 | 	add	objptr, ##520
35ce4     F2 12 02 FB | 	rdlong	arg01, objptr
35ce8     04 E4 05 F1 | 	add	objptr, #4
35cec     F2 14 02 FB | 	rdlong	arg02, objptr
35cf0     01 00 00 FF 
35cf4     0C E4 85 F1 | 	sub	objptr, ##524
35cf8     F0 3D BF FD | 	call	#__system___freepins
35cfc                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35cfc                 | '     _freepins(f_pinmask);
35cfc                 | '     return 0;
35cfc     00 FA 05 F6 | 	mov	result1, #0
35d00                 | _fatfs_cc_v_deinit_ret
35d00     2D 00 64 FD | 	ret
35d04                 | 
35d04                 | _fatfs_cc_get_vfs
35d04     01 4A 05 F6 | 	mov	COUNT_, #1
35d08     A8 00 A0 FD | 	call	#pushregs_
35d0c     09 27 02 F6 | 	mov	local01, arg01
35d10     50 12 06 F6 | 	mov	arg01, #80
35d14     28 55 BF FD | 	call	#__system___gc_alloc_managed
35d18     FD 12 02 F6 | 	mov	arg01, result1
35d1c     F2 FA 01 F6 | 	mov	result1, objptr
35d20     00 A0 05 FF 
35d24     00 FA 45 F5 | 	or	result1, ##188743680
35d28     09 FB 61 FC | 	wrlong	result1, arg01
35d2c     F2 FA 01 F6 | 	mov	result1, objptr
35d30     00 A8 05 FF 
35d34     00 FA 45 F5 | 	or	result1, ##189792256
35d38     04 12 06 F1 | 	add	arg01, #4
35d3c     09 FB 61 FC | 	wrlong	result1, arg01
35d40     F2 FA 01 F6 | 	mov	result1, objptr
35d44     00 B0 05 FF 
35d48     00 FA 45 F5 | 	or	result1, ##190840832
35d4c     04 12 06 F1 | 	add	arg01, #4
35d50     09 FB 61 FC | 	wrlong	result1, arg01
35d54     F2 FA 01 F6 | 	mov	result1, objptr
35d58     00 B8 05 FF 
35d5c     00 FA 45 F5 | 	or	result1, ##191889408
35d60     04 12 06 F1 | 	add	arg01, #4
35d64     09 FB 61 FC | 	wrlong	result1, arg01
35d68     F2 FA 01 F6 | 	mov	result1, objptr
35d6c     00 C0 05 FF 
35d70     00 FA 45 F5 | 	or	result1, ##192937984
35d74     04 12 06 F1 | 	add	arg01, #4
35d78     09 FB 61 FC | 	wrlong	result1, arg01
35d7c     04 12 06 F1 | 	add	arg01, #4
35d80     09 01 68 FC | 	wrlong	#0, arg01
35d84     04 12 06 F1 | 	add	arg01, #4
35d88     09 27 62 FC | 	wrlong	local01, arg01
35d8c     04 12 06 F1 | 	add	arg01, #4
35d90     09 01 68 FC | 	wrlong	#0, arg01
35d94     F2 FA 01 F6 | 	mov	result1, objptr
35d98     00 C8 05 FF 
35d9c     00 FA 45 F5 | 	or	result1, ##193986560
35da0     04 12 06 F1 | 	add	arg01, #4
35da4     09 FB 61 FC | 	wrlong	result1, arg01
35da8     F2 FA 01 F6 | 	mov	result1, objptr
35dac     00 D0 05 FF 
35db0     00 FA 45 F5 | 	or	result1, ##195035136
35db4     04 12 06 F1 | 	add	arg01, #4
35db8     09 FB 61 FC | 	wrlong	result1, arg01
35dbc     F2 FA 01 F6 | 	mov	result1, objptr
35dc0     00 D8 05 FF 
35dc4     00 FA 45 F5 | 	or	result1, ##196083712
35dc8     04 12 06 F1 | 	add	arg01, #4
35dcc     09 FB 61 FC | 	wrlong	result1, arg01
35dd0     F2 FA 01 F6 | 	mov	result1, objptr
35dd4     00 E0 05 FF 
35dd8     00 FA 45 F5 | 	or	result1, ##197132288
35ddc     04 12 06 F1 | 	add	arg01, #4
35de0     09 FB 61 FC | 	wrlong	result1, arg01
35de4     F2 FA 01 F6 | 	mov	result1, objptr
35de8     00 E8 05 FF 
35dec     00 FA 45 F5 | 	or	result1, ##198180864
35df0     04 12 06 F1 | 	add	arg01, #4
35df4     09 FB 61 FC | 	wrlong	result1, arg01
35df8     F2 FA 01 F6 | 	mov	result1, objptr
35dfc     00 F0 05 FF 
35e00     00 FA 45 F5 | 	or	result1, ##199229440
35e04     04 12 06 F1 | 	add	arg01, #4
35e08     09 FB 61 FC | 	wrlong	result1, arg01
35e0c     F2 FA 01 F6 | 	mov	result1, objptr
35e10     00 F8 05 FF 
35e14     00 FA 45 F5 | 	or	result1, ##200278016
35e18     04 12 06 F1 | 	add	arg01, #4
35e1c     09 FB 61 FC | 	wrlong	result1, arg01
35e20     F2 FA 01 F6 | 	mov	result1, objptr
35e24     3A FA 25 F4 | 	bith	result1, #58
35e28     04 12 06 F1 | 	add	arg01, #4
35e2c     09 FB 61 FC | 	wrlong	result1, arg01
35e30     F2 FA 01 F6 | 	mov	result1, objptr
35e34     00 08 06 FF 
35e38     00 FA 45 F5 | 	or	result1, ##202375168
35e3c     04 12 06 F1 | 	add	arg01, #4
35e40     09 FB 61 FC | 	wrlong	result1, arg01
35e44     F2 FA 01 F6 | 	mov	result1, objptr
35e48     00 10 06 FF 
35e4c     00 FA 45 F5 | 	or	result1, ##203423744
35e50     04 12 06 F1 | 	add	arg01, #4
35e54     09 FB 61 FC | 	wrlong	result1, arg01
35e58     F2 FA 01 F6 | 	mov	result1, objptr
35e5c     00 18 06 FF 
35e60     00 FA 45 F5 | 	or	result1, ##204472320
35e64     04 12 06 F1 | 	add	arg01, #4
35e68     09 FB 61 FC | 	wrlong	result1, arg01
35e6c     F2 FA 01 F6 | 	mov	result1, objptr
35e70     00 20 06 FF 
35e74     00 FA 45 F5 | 	or	result1, ##205520896
35e78     04 12 06 F1 | 	add	arg01, #4
35e7c     09 FB 61 FC | 	wrlong	result1, arg01
35e80     4C 12 86 F1 | 	sub	arg01, #76
35e84                 | ' 
35e84                 | '     v->close = &v_close;
35e84                 | '     v->read = &v_read;
35e84                 | '     v->write = &v_write;
35e84                 | '     v->lseek = &v_lseek;
35e84                 | '     v->ioctl = &v_ioctl;
35e84                 | '     v->flush = 0;
35e84                 | '     v->vfs_data = ptr;
35e84                 | '     v->reserved = 0;
35e84                 | ' 
35e84                 | '     v->open = &v_open;
35e84                 | '     v->creat = &v_creat;
35e84                 | '     v->opendir = &v_opendir;
35e84                 | '     v->closedir = &v_closedir;
35e84                 | '     v->readdir = &v_readdir;
35e84                 | '     v->stat = &v_stat;
35e84                 | ' 
35e84                 | '     v->mkdir = &v_mkdir;
35e84                 | '     v->rmdir = &v_rmdir;
35e84                 | ' 
35e84                 | '     v->remove = &v_remove;
35e84                 | '     v->rename = &v_rename;
35e84                 | ' 
35e84                 | '     v->init = &v_init;
35e84                 | '     v->deinit = &v_deinit;
35e84                 | ' 
35e84                 | '     return v;
35e84     09 FB 01 F6 | 	mov	result1, arg01
35e88     A7 F0 03 F6 | 	mov	ptra, fp
35e8c     B2 00 A0 FD | 	call	#popregs_
35e90                 | _fatfs_cc_get_vfs_ret
35e90     2D 00 64 FD | 	ret
35e94                 | 
35e94                 | _fatfs_cc_xmit_mmc_1196
35e94     01 00 00 FF 
35e98     10 E4 05 F1 | 	add	objptr, ##528
35e9c     F2 00 02 FB | 	rdlong	_var01, objptr
35ea0     08 E4 05 F1 | 	add	objptr, #8
35ea4     F2 02 02 FB | 	rdlong	_var02, objptr
35ea8     01 00 00 FF 
35eac     18 E4 85 F1 | 	sub	objptr, ##536
35eb0     40 02 62 FD | 	dirl	_var02
35eb4     28 02 64 FD | 	setq	#1
35eb8     09 05 02 FB | 	rdlong	_var03, arg01
35ebc     69 04 62 FD | 	rev	_var03
35ec0     1B 04 FE F9 | 	movbyts	_var03, #27
35ec4     01 05 22 FC | 	wypin	_var03, _var02
35ec8     0A 05 02 F6 | 	mov	_var03, arg02
35ecc     02 14 4E F0 | 	shr	arg02, #2 wz
35ed0     03 04 66 F0 | 	shl	_var03, #3
35ed4     00 05 22 FC | 	wypin	_var03, _var01
35ed8     41 02 62 FD | 	dirh	_var02
35edc     08 12 06 F1 | 	add	arg01, #8
35ee0     69 06 62 FD | 	rev	_var04
35ee4     1B 06 FE F9 | 	movbyts	_var04, #27
35ee8                 | LR__5260
35ee8     01 07 22 5C |  if_ne	wypin	_var04, _var02
35eec     09 07 02 5B |  if_ne	rdlong	_var04, arg01
35ef0     04 12 06 51 |  if_ne	add	arg01, #4
35ef4     69 06 62 5D |  if_ne	rev	_var04
35ef8     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
35efc                 | LR__5261
35efc     40 02 72 5D |  if_ne	testp	_var02 wc
35f00     F8 FF 9F 1D |  if_a	jmp	#LR__5261
35f04     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5260
35f08                 | LR__5262
35f08     40 00 72 FD | 	testp	_var01 wc
35f0c     F8 FF 9F 3D |  if_ae	jmp	#LR__5262
35f10     40 02 62 FD | 	dirl	_var02
35f14     FF FF FF FF 
35f18     01 FF 2B FC | 	wypin	##-1, _var02
35f1c     41 02 62 FD | 	dirh	_var02
35f20                 | _fatfs_cc_xmit_mmc_1196_ret
35f20     2D 00 64 FD | 	ret
35f24                 | 
35f24                 | _fatfs_cc_rcvr_mmc_1203
35f24     01 00 00 FF 
35f28     10 E4 05 F1 | 	add	objptr, ##528
35f2c     F2 00 02 FB | 	rdlong	_var01, objptr
35f30     0C E4 05 F1 | 	add	objptr, #12
35f34     F2 02 02 FB | 	rdlong	_var02, objptr
35f38     01 00 00 FF 
35f3c     1C E4 85 F1 | 	sub	objptr, ##540
35f40     01 03 08 FC | 	akpin	_var02
35f44     0A 05 0A F6 | 	mov	_var03, arg02 wz
35f48     02 04 4E F0 | 	shr	_var03, #2 wz
35f4c     30 00 90 AD |  if_e	jmp	#LR__5272
35f50     02 07 02 F6 | 	mov	_var04, _var03
35f54     05 06 66 F0 | 	shl	_var04, #5
35f58     00 07 22 FC | 	wypin	_var04, _var01
35f5c     01 7F 18 FC | 	wxpin	#63, _var02
35f60                 | LR__5270
35f60                 | LR__5271
35f60     40 02 72 FD | 	testp	_var02 wc
35f64     F8 FF 9F 3D |  if_ae	jmp	#LR__5271
35f68     01 07 8A FA | 	rdpin	_var04, _var02
35f6c     69 06 62 FD | 	rev	_var04
35f70     1B 06 FE F9 | 	movbyts	_var04, #27
35f74     09 07 62 FC | 	wrlong	_var04, arg01
35f78     04 12 06 F1 | 	add	arg01, #4
35f7c     F8 05 6E FB | 	djnz	_var03, #LR__5270
35f80                 | LR__5272
35f80     03 14 0E F5 | 	and	arg02, #3 wz
35f84     24 00 90 AD |  if_e	jmp	#LR__5275
35f88     01 4F 18 FC | 	wxpin	#39, _var02
35f8c                 | LR__5273
35f8c     00 11 28 FC | 	wypin	#8, _var01
35f90                 | LR__5274
35f90     40 02 72 FD | 	testp	_var02 wc
35f94     F8 FF 9F 3D |  if_ae	jmp	#LR__5274
35f98     01 07 8A FA | 	rdpin	_var04, _var02
35f9c     69 06 62 FD | 	rev	_var04
35fa0     09 07 42 FC | 	wrbyte	_var04, arg01
35fa4     01 12 06 F1 | 	add	arg01, #1
35fa8     F8 15 6E FB | 	djnz	arg02, #LR__5273
35fac                 | LR__5275
35fac                 | _fatfs_cc_rcvr_mmc_1203_ret
35fac     2D 00 64 FD | 	ret
35fb0                 | 
35fb0                 | _fatfs_cc_wait_ready_1207
35fb0     01 4A 05 F6 | 	mov	COUNT_, #1
35fb4     A8 00 A0 FD | 	call	#pushregs_
35fb8     10 F0 07 F1 | 	add	ptra, #16
35fbc     1A FA 61 FD | 	getct	result1
35fc0     08 4E 05 F1 | 	add	fp, #8
35fc4     A7 FA 61 FC | 	wrlong	result1, fp
35fc8     14 26 06 FB | 	rdlong	local01, #20
35fcc     01 26 46 F0 | 	shr	local01, #1
35fd0     04 4E 05 F1 | 	add	fp, #4
35fd4     A7 26 62 FC | 	wrlong	local01, fp
35fd8     0C 4E 85 F1 | 	sub	fp, #12
35fdc                 | ' {
35fdc                 | ' 	BYTE d;
35fdc                 | ' 	UINT tmr, tmout;
35fdc                 | ' 
35fdc                 | ' 	tmr = _cnt();
35fdc                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
35fdc                 | ' 	for(;;) {
35fdc                 | LR__5280
35fdc     04 4E 05 F1 | 	add	fp, #4
35fe0     A7 12 02 F6 | 	mov	arg01, fp
35fe4     04 4E 85 F1 | 	sub	fp, #4
35fe8     01 14 06 F6 | 	mov	arg02, #1
35fec     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1203
35ff0     04 4E 05 F1 | 	add	fp, #4
35ff4     A7 26 C2 FA | 	rdbyte	local01, fp
35ff8     04 4E 85 F1 | 	sub	fp, #4
35ffc     FF 26 0E F2 | 	cmp	local01, #255 wz
36000     01 FA 05 A6 |  if_e	mov	result1, #1
36004     28 00 90 AD |  if_e	jmp	#LR__5281
36008     1A FA 61 FD | 	getct	result1
3600c     08 4E 05 F1 | 	add	fp, #8
36010     A7 26 02 FB | 	rdlong	local01, fp
36014     13 FB 81 F1 | 	sub	result1, local01
36018     04 4E 05 F1 | 	add	fp, #4
3601c     A7 26 02 FB | 	rdlong	local01, fp
36020     0C 4E 85 F1 | 	sub	fp, #12
36024     13 FB 11 F2 | 	cmp	result1, local01 wc
36028     00 FA 05 36 |  if_ae	mov	result1, #0
3602c     AC FF 9F CD |  if_b	jmp	#LR__5280
36030                 | LR__5281
36030     A7 F0 03 F6 | 	mov	ptra, fp
36034     B2 00 A0 FD | 	call	#popregs_
36038                 | _fatfs_cc_wait_ready_1207_ret
36038     2D 00 64 FD | 	ret
3603c                 | 
3603c                 | _fatfs_cc_deselect_1213
3603c     00 4A 05 F6 | 	mov	COUNT_, #0
36040     A8 00 A0 FD | 	call	#pushregs_
36044     14 F0 07 F1 | 	add	ptra, #20
36048     01 00 00 FF 
3604c     14 E4 05 F1 | 	add	objptr, ##532
36050     F2 14 02 FB | 	rdlong	arg02, objptr
36054     04 4E 05 F1 | 	add	fp, #4
36058     A7 14 62 FC | 	wrlong	arg02, fp
3605c     04 E4 85 F1 | 	sub	objptr, #4
36060     F2 14 02 FB | 	rdlong	arg02, objptr
36064     04 4E 05 F1 | 	add	fp, #4
36068     A7 14 62 FC | 	wrlong	arg02, fp
3606c     08 E4 05 F1 | 	add	objptr, #8
36070     F2 14 02 FB | 	rdlong	arg02, objptr
36074     04 4E 05 F1 | 	add	fp, #4
36078     A7 14 62 FC | 	wrlong	arg02, fp
3607c     04 E4 05 F1 | 	add	objptr, #4
36080     F2 14 02 FB | 	rdlong	arg02, objptr
36084     01 00 00 FF 
36088     1C E4 85 F1 | 	sub	objptr, ##540
3608c     04 4E 05 F1 | 	add	fp, #4
36090     A7 14 62 FC | 	wrlong	arg02, fp
36094     0C 4E 85 F1 | 	sub	fp, #12
36098     A7 12 02 FB | 	rdlong	arg01, fp
3609c     04 4E 85 F1 | 	sub	fp, #4
360a0     59 12 62 FD | 	drvh	arg01
360a4     1F 20 64 FD | 	waitx	#16
360a8     A7 12 02 F6 | 	mov	arg01, fp
360ac     01 14 06 F6 | 	mov	arg02, #1
360b0     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1203
360b4     A7 F0 03 F6 | 	mov	ptra, fp
360b8     B2 00 A0 FD | 	call	#popregs_
360bc                 | _fatfs_cc_deselect_1213_ret
360bc     2D 00 64 FD | 	ret
360c0                 | 
360c0                 | _fatfs_cc_select_1217
360c0     00 4A 05 F6 | 	mov	COUNT_, #0
360c4     A8 00 A0 FD | 	call	#pushregs_
360c8     10 F0 07 F1 | 	add	ptra, #16
360cc     01 00 00 FF 
360d0     14 E4 05 F1 | 	add	objptr, ##532
360d4     F2 14 02 FB | 	rdlong	arg02, objptr
360d8     08 4E 05 F1 | 	add	fp, #8
360dc     A7 14 62 FC | 	wrlong	arg02, fp
360e0     08 E4 05 F1 | 	add	objptr, #8
360e4     F2 12 02 FB | 	rdlong	arg01, objptr
360e8     01 00 00 FF 
360ec     1C E4 85 F1 | 	sub	objptr, ##540
360f0     04 4E 05 F1 | 	add	fp, #4
360f4     A7 12 62 FC | 	wrlong	arg01, fp
360f8     50 12 62 FD | 	fltl	arg01
360fc     04 4E 85 F1 | 	sub	fp, #4
36100     A7 12 02 FB | 	rdlong	arg01, fp
36104     58 12 62 FD | 	drvl	arg01
36108     1F 20 64 FD | 	waitx	#16
3610c     04 4E 05 F1 | 	add	fp, #4
36110     A7 12 02 FB | 	rdlong	arg01, fp
36114     41 12 62 FD | 	dirh	arg01
36118     08 4E 85 F1 | 	sub	fp, #8
3611c     A7 12 02 F6 | 	mov	arg01, fp
36120     04 4E 85 F1 | 	sub	fp, #4
36124     01 14 06 F6 | 	mov	arg02, #1
36128     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1203
3612c     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1207
36130     00 FA 0D F2 | 	cmp	result1, #0 wz
36134     01 FA 05 56 |  if_ne	mov	result1, #1
36138     08 00 90 5D |  if_ne	jmp	#LR__5290
3613c     FC FE BF FD | 	call	#_fatfs_cc_deselect_1213
36140                 | ' 
36140                 | ' 	deselect();
36140                 | ' 	return 0;
36140     00 FA 05 F6 | 	mov	result1, #0
36144                 | LR__5290
36144     A7 F0 03 F6 | 	mov	ptra, fp
36148     B2 00 A0 FD | 	call	#popregs_
3614c                 | _fatfs_cc_select_1217_ret
3614c     2D 00 64 FD | 	ret
36150                 | 
36150                 | _fatfs_cc_rcvr_datablock_1221
36150     01 4A 05 F6 | 	mov	COUNT_, #1
36154     A8 00 A0 FD | 	call	#pushregs_
36158     18 F0 07 F1 | 	add	ptra, #24
3615c     04 4E 05 F1 | 	add	fp, #4
36160     A7 12 62 FC | 	wrlong	arg01, fp
36164     04 4E 05 F1 | 	add	fp, #4
36168     A7 14 62 FC | 	wrlong	arg02, fp
3616c     1A FA 61 FD | 	getct	result1
36170     08 4E 05 F1 | 	add	fp, #8
36174     A7 FA 61 FC | 	wrlong	result1, fp
36178     14 26 06 FB | 	rdlong	local01, #20
3617c     03 26 46 F0 | 	shr	local01, #3
36180     04 4E 05 F1 | 	add	fp, #4
36184     A7 26 62 FC | 	wrlong	local01, fp
36188     14 4E 85 F1 | 	sub	fp, #20
3618c                 | ' 	BYTE *buff,
3618c                 | ' 	UINT btr
3618c                 | ' )
3618c                 | ' {
3618c                 | ' 	BYTE d[2];
3618c                 | ' 	UINT tmr, tmout;
3618c                 | ' 
3618c                 | ' 	tmr = _cnt();
3618c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
3618c                 | ' 	for(;;) {
3618c                 | LR__5300
3618c     0C 4E 05 F1 | 	add	fp, #12
36190     A7 12 02 F6 | 	mov	arg01, fp
36194     0C 4E 85 F1 | 	sub	fp, #12
36198     01 14 06 F6 | 	mov	arg02, #1
3619c     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1203
361a0     0C 4E 05 F1 | 	add	fp, #12
361a4     A7 26 C2 FA | 	rdbyte	local01, fp
361a8     0C 4E 85 F1 | 	sub	fp, #12
361ac     FF 26 0E F2 | 	cmp	local01, #255 wz
361b0     28 00 90 5D |  if_ne	jmp	#LR__5301
361b4     1A FA 61 FD | 	getct	result1
361b8     FD 26 02 F6 | 	mov	local01, result1
361bc     10 4E 05 F1 | 	add	fp, #16
361c0     A7 14 02 FB | 	rdlong	arg02, fp
361c4     0A 27 82 F1 | 	sub	local01, arg02
361c8     04 4E 05 F1 | 	add	fp, #4
361cc     A7 14 02 FB | 	rdlong	arg02, fp
361d0     14 4E 85 F1 | 	sub	fp, #20
361d4     0A 27 12 F2 | 	cmp	local01, arg02 wc
361d8     B0 FF 9F CD |  if_b	jmp	#LR__5300
361dc                 | LR__5301
361dc     0C 4E 05 F1 | 	add	fp, #12
361e0     A7 26 C2 FA | 	rdbyte	local01, fp
361e4     0C 4E 85 F1 | 	sub	fp, #12
361e8     FE 26 0E F2 | 	cmp	local01, #254 wz
361ec     00 FA 05 56 |  if_ne	mov	result1, #0
361f0     30 00 90 5D |  if_ne	jmp	#LR__5302
361f4     04 4E 05 F1 | 	add	fp, #4
361f8     A7 12 02 FB | 	rdlong	arg01, fp
361fc     04 4E 05 F1 | 	add	fp, #4
36200     A7 14 02 FB | 	rdlong	arg02, fp
36204     08 4E 85 F1 | 	sub	fp, #8
36208     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1203
3620c     0C 4E 05 F1 | 	add	fp, #12
36210     A7 12 02 F6 | 	mov	arg01, fp
36214     0C 4E 85 F1 | 	sub	fp, #12
36218     02 14 06 F6 | 	mov	arg02, #2
3621c     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1203
36220                 | ' 
36220                 | ' 	rcvr_mmc(buff, btr);
36220                 | ' 	rcvr_mmc(d, 2);
36220                 | ' 
36220                 | ' 	return 1;
36220     01 FA 05 F6 | 	mov	result1, #1
36224                 | LR__5302
36224     A7 F0 03 F6 | 	mov	ptra, fp
36228     B2 00 A0 FD | 	call	#popregs_
3622c                 | _fatfs_cc_rcvr_datablock_1221_ret
3622c     2D 00 64 FD | 	ret
36230                 | 
36230                 | _fatfs_cc_xmit_datablock_1223
36230     00 4A 05 F6 | 	mov	COUNT_, #0
36234     A8 00 A0 FD | 	call	#pushregs_
36238     10 F0 07 F1 | 	add	ptra, #16
3623c     04 4E 05 F1 | 	add	fp, #4
36240     A7 12 62 FC | 	wrlong	arg01, fp
36244     04 4E 05 F1 | 	add	fp, #4
36248     A7 14 42 FC | 	wrbyte	arg02, fp
3624c     08 4E 85 F1 | 	sub	fp, #8
36250     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1207
36254     00 FA 0D F2 | 	cmp	result1, #0 wz
36258     00 FA 05 A6 |  if_e	mov	result1, #0
3625c     90 00 90 AD |  if_e	jmp	#LR__5311
36260     08 4E 05 F1 | 	add	fp, #8
36264     A7 14 C2 FA | 	rdbyte	arg02, fp
36268     04 4E 05 F1 | 	add	fp, #4
3626c     A7 14 42 FC | 	wrbyte	arg02, fp
36270     A7 12 02 F6 | 	mov	arg01, fp
36274     0C 4E 85 F1 | 	sub	fp, #12
36278     01 14 06 F6 | 	mov	arg02, #1
3627c     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1196
36280     08 4E 05 F1 | 	add	fp, #8
36284     A7 14 C2 FA | 	rdbyte	arg02, fp
36288     08 4E 85 F1 | 	sub	fp, #8
3628c     FD 14 0E F2 | 	cmp	arg02, #253 wz
36290     58 00 90 AD |  if_e	jmp	#LR__5310
36294     04 4E 05 F1 | 	add	fp, #4
36298     A7 12 02 FB | 	rdlong	arg01, fp
3629c     04 4E 85 F1 | 	sub	fp, #4
362a0     09 14 C6 F9 | 	decod	arg02, #9
362a4     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1196
362a8     0C 4E 05 F1 | 	add	fp, #12
362ac     A7 12 02 F6 | 	mov	arg01, fp
362b0     0C 4E 85 F1 | 	sub	fp, #12
362b4     02 14 06 F6 | 	mov	arg02, #2
362b8     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1203
362bc     0C 4E 05 F1 | 	add	fp, #12
362c0     A7 12 02 F6 | 	mov	arg01, fp
362c4     0C 4E 85 F1 | 	sub	fp, #12
362c8     01 14 06 F6 | 	mov	arg02, #1
362cc     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1203
362d0     0C 4E 05 F1 | 	add	fp, #12
362d4     A7 14 C2 FA | 	rdbyte	arg02, fp
362d8     0C 4E 85 F1 | 	sub	fp, #12
362dc     1F 14 06 F5 | 	and	arg02, #31
362e0     05 14 0E F2 | 	cmp	arg02, #5 wz
362e4                 | ' 			return 0;
362e4     00 FA 05 56 |  if_ne	mov	result1, #0
362e8     04 00 90 5D |  if_ne	jmp	#LR__5311
362ec                 | LR__5310
362ec                 | ' 	}
362ec                 | ' 
362ec                 | ' 	return 1;
362ec     01 FA 05 F6 | 	mov	result1, #1
362f0                 | LR__5311
362f0     A7 F0 03 F6 | 	mov	ptra, fp
362f4     B2 00 A0 FD | 	call	#popregs_
362f8                 | _fatfs_cc_xmit_datablock_1223_ret
362f8     2D 00 64 FD | 	ret
362fc                 | 
362fc                 | _fatfs_cc_send_cmd_1227
362fc     01 4A 05 F6 | 	mov	COUNT_, #1
36300     A8 00 A0 FD | 	call	#pushregs_
36304     1C F0 07 F1 | 	add	ptra, #28
36308                 | _fatfs_cc_send_cmd_1227_enter
36308     04 4E 05 F1 | 	add	fp, #4
3630c     A7 12 42 FC | 	wrbyte	arg01, fp
36310     04 4E 05 F1 | 	add	fp, #4
36314     A7 14 62 FC | 	wrlong	arg02, fp
36318     04 4E 85 F1 | 	sub	fp, #4
3631c     A7 FA C1 FA | 	rdbyte	result1, fp
36320     04 4E 85 F1 | 	sub	fp, #4
36324     80 FA CD F7 | 	test	result1, #128 wz
36328     44 00 90 AD |  if_e	jmp	#LR__5320
3632c     04 4E 05 F1 | 	add	fp, #4
36330     A7 14 C2 FA | 	rdbyte	arg02, fp
36334     7F 14 06 F5 | 	and	arg02, #127
36338     A7 14 42 FC | 	wrbyte	arg02, fp
3633c     04 4E 85 F1 | 	sub	fp, #4
36340     37 12 06 F6 | 	mov	arg01, #55
36344     00 14 06 F6 | 	mov	arg02, #0
36348     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1227
3634c     0C 4E 05 F1 | 	add	fp, #12
36350     A7 FA 41 FC | 	wrbyte	result1, fp
36354     A7 14 C2 FA | 	rdbyte	arg02, fp
36358     0C 4E 85 F1 | 	sub	fp, #12
3635c     02 14 16 F2 | 	cmp	arg02, #2 wc
36360     0C 4E 05 31 |  if_ae	add	fp, #12
36364     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
36368     0C 4E 85 31 |  if_ae	sub	fp, #12
3636c     6C 01 90 3D |  if_ae	jmp	#LR__5324
36370                 | LR__5320
36370     04 4E 05 F1 | 	add	fp, #4
36374     A7 14 C2 FA | 	rdbyte	arg02, fp
36378     04 4E 85 F1 | 	sub	fp, #4
3637c     0C 14 0E F2 | 	cmp	arg02, #12 wz
36380     14 00 90 AD |  if_e	jmp	#LR__5321
36384     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1213
36388     34 FD BF FD | 	call	#_fatfs_cc_select_1217
3638c     00 FA 0D F2 | 	cmp	result1, #0 wz
36390     FF FA 05 A6 |  if_e	mov	result1, #255
36394     44 01 90 AD |  if_e	jmp	#LR__5324
36398                 | LR__5321
36398     04 4E 05 F1 | 	add	fp, #4
3639c     A7 14 C2 FA | 	rdbyte	arg02, fp
363a0     40 FA 05 F6 | 	mov	result1, #64
363a4     0A FB 41 F5 | 	or	result1, arg02
363a8     10 4E 05 F1 | 	add	fp, #16
363ac     A7 FA 41 FC | 	wrbyte	result1, fp
363b0     0C 4E 85 F1 | 	sub	fp, #12
363b4     A7 FA 01 FB | 	rdlong	result1, fp
363b8     18 FA 45 F0 | 	shr	result1, #24
363bc     0D 4E 05 F1 | 	add	fp, #13
363c0     A7 FA 41 FC | 	wrbyte	result1, fp
363c4     0D 4E 85 F1 | 	sub	fp, #13
363c8     A7 FA 01 FB | 	rdlong	result1, fp
363cc     10 FA 45 F0 | 	shr	result1, #16
363d0     0E 4E 05 F1 | 	add	fp, #14
363d4     A7 FA 41 FC | 	wrbyte	result1, fp
363d8     0E 4E 85 F1 | 	sub	fp, #14
363dc     A7 FA 01 FB | 	rdlong	result1, fp
363e0     08 FA 45 F0 | 	shr	result1, #8
363e4     0F 4E 05 F1 | 	add	fp, #15
363e8     A7 FA 41 FC | 	wrbyte	result1, fp
363ec     0F 4E 85 F1 | 	sub	fp, #15
363f0     A7 FA 01 FB | 	rdlong	result1, fp
363f4     10 4E 05 F1 | 	add	fp, #16
363f8     A7 FA 41 FC | 	wrbyte	result1, fp
363fc     0C 4E 85 F1 | 	sub	fp, #12
36400     A7 02 48 FC | 	wrbyte	#1, fp
36404     08 4E 85 F1 | 	sub	fp, #8
36408     A7 FA C9 FA | 	rdbyte	result1, fp wz
3640c     04 4E 85 F1 | 	sub	fp, #4
36410     0C 4E 05 A1 |  if_e	add	fp, #12
36414     A7 2A 49 AC |  if_e	wrbyte	#149, fp
36418     0C 4E 85 A1 |  if_e	sub	fp, #12
3641c     04 4E 05 F1 | 	add	fp, #4
36420     A7 FA C1 FA | 	rdbyte	result1, fp
36424     04 4E 85 F1 | 	sub	fp, #4
36428     08 FA 0D F2 | 	cmp	result1, #8 wz
3642c     0C 4E 05 A1 |  if_e	add	fp, #12
36430     A7 0E 49 AC |  if_e	wrbyte	#135, fp
36434     0C 4E 85 A1 |  if_e	sub	fp, #12
36438     0C 4E 05 F1 | 	add	fp, #12
3643c     A7 14 C2 FA | 	rdbyte	arg02, fp
36440     0D 4E 05 F1 | 	add	fp, #13
36444     A7 14 42 FC | 	wrbyte	arg02, fp
36448     05 4E 85 F1 | 	sub	fp, #5
3644c     A7 12 02 F6 | 	mov	arg01, fp
36450     14 4E 85 F1 | 	sub	fp, #20
36454     06 14 06 F6 | 	mov	arg02, #6
36458     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1196
3645c     04 4E 05 F1 | 	add	fp, #4
36460     A7 26 C2 FA | 	rdbyte	local01, fp
36464     04 4E 85 F1 | 	sub	fp, #4
36468     0C 26 0E F2 | 	cmp	local01, #12 wz
3646c     10 4E 05 A1 |  if_e	add	fp, #16
36470     A7 12 02 A6 |  if_e	mov	arg01, fp
36474     10 4E 85 A1 |  if_e	sub	fp, #16
36478     01 14 06 A6 |  if_e	mov	arg02, #1
3647c     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1203
36480     0C 4E 05 F1 | 	add	fp, #12
36484     A7 14 48 FC | 	wrbyte	#10, fp
36488     0C 4E 85 F1 | 	sub	fp, #12
3648c                 | ' 	n = 10;
3648c                 | ' 	do
3648c                 | LR__5322
3648c     10 4E 05 F1 | 	add	fp, #16
36490     A7 12 02 F6 | 	mov	arg01, fp
36494     10 4E 85 F1 | 	sub	fp, #16
36498     01 14 06 F6 | 	mov	arg02, #1
3649c     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1203
364a0     10 4E 05 F1 | 	add	fp, #16
364a4     A7 26 C2 FA | 	rdbyte	local01, fp
364a8     10 4E 85 F1 | 	sub	fp, #16
364ac     80 26 CE F7 | 	test	local01, #128 wz
364b0     1C 00 90 AD |  if_e	jmp	#LR__5323
364b4     0C 4E 05 F1 | 	add	fp, #12
364b8     A7 26 C2 FA | 	rdbyte	local01, fp
364bc     01 26 86 F1 | 	sub	local01, #1
364c0     A7 26 42 FC | 	wrbyte	local01, fp
364c4     A7 26 CA FA | 	rdbyte	local01, fp wz
364c8     0C 4E 85 F1 | 	sub	fp, #12
364cc     BC FF 9F 5D |  if_ne	jmp	#LR__5322
364d0                 | LR__5323
364d0                 | ' 
364d0                 | ' 	return d;
364d0     10 4E 05 F1 | 	add	fp, #16
364d4     A7 FA C1 FA | 	rdbyte	result1, fp
364d8     10 4E 85 F1 | 	sub	fp, #16
364dc                 | LR__5324
364dc     A7 F0 03 F6 | 	mov	ptra, fp
364e0     B2 00 A0 FD | 	call	#popregs_
364e4                 | _fatfs_cc_send_cmd_1227_ret
364e4     2D 00 64 FD | 	ret
364e8                 | 
364e8                 | _fatfs_cc_disk_deinitialize
364e8     03 4A 05 F6 | 	mov	COUNT_, #3
364ec     A8 00 A0 FD | 	call	#pushregs_
364f0     00 12 4E F2 | 	cmps	arg01, #0 wz
364f4     01 00 00 FF 
364f8     14 E4 05 F1 | 	add	objptr, ##532
364fc     F2 12 02 FB | 	rdlong	arg01, objptr
36500     04 E4 85 F1 | 	sub	objptr, #4
36504     F2 26 02 FB | 	rdlong	local01, objptr
36508     08 E4 05 F1 | 	add	objptr, #8
3650c     F2 28 02 FB | 	rdlong	local02, objptr
36510     04 E4 05 F1 | 	add	objptr, #4
36514     F2 2A 02 FB | 	rdlong	local03, objptr
36518     01 00 00 FF 
3651c     1C E4 85 F1 | 	sub	objptr, ##540
36520                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
36520                 | '         return RES_NOTRDY;
36520     03 FA 05 56 |  if_ne	mov	result1, #3
36524     2C 00 90 5D |  if_ne	jmp	#LR__5330
36528     50 12 62 FD | 	fltl	arg01
3652c     09 01 08 FC | 	wrpin	#0, arg01
36530     50 26 62 FD | 	fltl	local01
36534     13 01 08 FC | 	wrpin	#0, local01
36538     50 28 62 FD | 	fltl	local02
3653c     14 01 08 FC | 	wrpin	#0, local02
36540     50 2A 62 FD | 	fltl	local03
36544     15 01 08 FC | 	wrpin	#0, local03
36548     0A 12 06 F6 | 	mov	arg01, #10
3654c     40 0E BF FD | 	call	#__system___waitms
36550                 | '     }
36550                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
36550                 | '     _pinclear(PIN_SS);
36550                 | '     _pinclear(PIN_CLK);
36550                 | '     _pinclear(PIN_DI);
36550                 | '     _pinclear(PIN_DO);
36550                 | ' 
36550                 | '     _waitms(10);
36550                 | ' 
36550                 | '     return 0;
36550     00 FA 05 F6 | 	mov	result1, #0
36554                 | LR__5330
36554     A7 F0 03 F6 | 	mov	ptra, fp
36558     B2 00 A0 FD | 	call	#popregs_
3655c                 | _fatfs_cc_disk_deinitialize_ret
3655c     2D 00 64 FD | 	ret
36560                 | 
36560                 | _fatfs_cc_gettimeofday
36560     04 4A 05 F6 | 	mov	COUNT_, #4
36564     A8 00 A0 FD | 	call	#pushregs_
36568     09 27 02 F6 | 	mov	local01, arg01
3656c     8C 09 BF FD | 	call	#__system___getus
36570     FD 12 02 F6 | 	mov	arg01, result1
36574     02 00 00 FF 
36578     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
3657c     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
36580     09 FB 01 F6 | 	mov	result1, arg01
36584     14 FB 81 F1 | 	sub	result1, local02
36588     A1 07 00 FF 
3658c     40 FA 15 FD | 	qdiv	result1, ##1000000
36590     02 00 00 FF 
36594     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
36598     18 28 62 FD | 	getqx	local02
3659c     A1 07 00 FF 
365a0     40 FA 15 FD | 	qdiv	result1, ##1000000
365a4     00 28 0E F2 | 	cmp	local02, #0 wz
365a8     19 2A 62 FD | 	getqy	local03
365ac     28 00 90 AD |  if_e	jmp	#LR__5340
365b0     02 00 00 FF 
365b4     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
365b8     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
365bc     14 2D 02 F1 | 	add	local04, local02
365c0     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
365c4     15 13 82 F1 | 	sub	arg01, local03
365c8     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
365cc     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
365d0     02 00 00 FF 
365d4     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
365d8                 | LR__5340
365d8     02 00 00 FF 
365dc     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
365e0     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
365e4     02 00 00 FF 
365e8     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
365ec     13 2D 62 FC | 	wrlong	local04, local01
365f0     04 26 06 F1 | 	add	local01, #4
365f4     13 2B 62 FC | 	wrlong	local03, local01
365f8                 | '         lastsec += secs;
365f8                 | '         lastus = now - leftover;
365f8                 | '     }
365f8                 | '     tv->tv_sec = lastsec;
365f8                 | '     tv->tv_usec = leftover;
365f8                 | '     return 0;
365f8     00 FA 05 F6 | 	mov	result1, #0
365fc     A7 F0 03 F6 | 	mov	ptra, fp
36600     B2 00 A0 FD | 	call	#popregs_
36604                 | _fatfs_cc_gettimeofday_ret
36604     2D 00 64 FD | 	ret
36608                 | 
36608                 | _fatfs_cc__is_leap_year
36608     09 FB 51 F6 | 	abs	result1, arg01 wc
3660c     03 FA 05 F5 | 	and	result1, #3
36610     FD FA 89 F6 | 	negc	result1, result1 wz
36614     38 00 90 5D |  if_ne	jmp	#LR__5351
36618     09 FB 51 F6 | 	abs	result1, arg01 wc
3661c     64 FA 15 FD | 	qdiv	result1, #100
36620     19 FA 61 FD | 	getqy	result1
36624     FD FA 89 F6 | 	negc	result1, result1 wz
36628     1C 00 90 5D |  if_ne	jmp	#LR__5350
3662c     09 FB 51 F6 | 	abs	result1, arg01 wc
36630     90 FB 15 FD | 	qdiv	result1, #400
36634                 | '       return (0 == y % 400);
36634     00 FA 05 F6 | 	mov	result1, #0
36638     19 00 62 FD | 	getqy	_var01
3663c     00 01 8A F6 | 	negc	_var01, _var01 wz
36640     01 FA 05 A6 |  if_e	mov	result1, #1
36644     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
36648                 | LR__5350
36648                 | '     return 1;
36648     01 FA 05 F6 | 	mov	result1, #1
3664c     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
36650                 | LR__5351
36650                 | '   }
36650                 | '   return 0;
36650     00 FA 05 F6 | 	mov	result1, #0
36654                 | _fatfs_cc__is_leap_year_ret
36654     2D 00 64 FD | 	ret
36658                 | 
36658                 | _fatfs_cc___tzoffset
36658     09 01 0A F6 | 	mov	_var01, arg01 wz
3665c     FF FF FF FF 
36660     0A FF 6B FC | 	wrlong	##-1, arg02
36664     01 02 06 F6 | 	mov	_var02, #1
36668     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
3666c                 | '                 return 0;
3666c     00 FA 05 A6 |  if_e	mov	result1, #0
36670     94 02 90 AD |  if_e	jmp	#LR__5377
36674     0A 01 68 FC | 	wrlong	#0, arg02
36678     02 00 00 FF 
3667c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
36680     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
36684                 | ' 
36684                 | '        *hasdst = 0;
36684                 | ' 
36684                 | ' 	n = stdname;
36684                 | '         while (*s && isalpha(*s)) {
36684     02 00 00 FF 
36688     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
3668c     97 28 48 FB | 	callpa	#(@LR__5361-@LR__5360)>>2,fcache_load_ptr_
36690                 | LR__5360
36690     00 05 CA FA | 	rdbyte	_var03, _var01 wz
36694     48 00 90 AD |  if_e	jmp	#LR__5362
36698     00 13 C2 FA | 	rdbyte	arg01, _var01
3669c                 | ' {
3669c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
3669c     80 12 36 F3 | 	fle	arg01, #128 wc
366a0                 | '     return __ctype[c];
366a0     02 00 00 FF 
366a4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
366a8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
366ac     09 FB C1 FA | 	rdbyte	result1, arg01
366b0     02 00 00 FF 
366b4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
366b8     0C FA CD F7 | 	test	result1, #12 wz
366bc     20 00 90 AD |  if_e	jmp	#LR__5362
366c0     00 09 02 F6 | 	mov	_var05, _var01
366c4     00 0B 02 F6 | 	mov	_var06, _var01
366c8     01 0A 06 F1 | 	add	_var06, #1
366cc     04 0D C2 FA | 	rdbyte	_var07, _var05
366d0     05 01 02 F6 | 	mov	_var01, _var06
366d4     03 0D 42 FC | 	wrbyte	_var07, _var04
366d8     01 06 06 F1 | 	add	_var04, #1
366dc     B0 FF 9F FD | 	jmp	#LR__5360
366e0                 | LR__5361
366e0                 | LR__5362
366e0     03 01 48 FC | 	wrbyte	#0, _var04
366e4     00 0E 06 F6 | 	mov	_var08, #0
366e8     00 05 C2 FA | 	rdbyte	_var03, _var01
366ec     2D 04 0E F2 | 	cmp	_var03, #45 wz
366f0     01 02 66 A6 |  if_e	neg	_var02, #1
366f4     01 00 06 A1 |  if_e	add	_var01, #1
366f8     97 28 48 FB | 	callpa	#(@LR__5364-@LR__5363)>>2,fcache_load_ptr_
366fc                 | '                 sgn = -1;
366fc                 | '                 s++;
366fc                 | '         }
366fc                 | '         while (isdigit(*s)) {
366fc                 | LR__5363
366fc     00 13 C2 FA | 	rdbyte	arg01, _var01
36700                 | ' {
36700                 | '   return  (__ctype_get(c) & 0x02 ) ;
36700     80 12 36 F3 | 	fle	arg01, #128 wc
36704                 | '     return __ctype[c];
36704     02 00 00 FF 
36708     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
3670c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
36710     09 FB C1 FA | 	rdbyte	result1, arg01
36714     02 00 00 FF 
36718     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
3671c     02 FA CD F7 | 	test	result1, #2 wz
36720     28 00 90 AD |  if_e	jmp	#LR__5365
36724     07 05 02 F6 | 	mov	_var03, _var08
36728     02 04 66 F0 | 	shl	_var03, #2
3672c     07 05 02 F1 | 	add	_var03, _var08
36730     01 04 66 F0 | 	shl	_var03, #1
36734     00 09 C2 FA | 	rdbyte	_var05, _var01
36738     30 08 86 F1 | 	sub	_var05, #48
3673c     04 05 02 F1 | 	add	_var03, _var05
36740     02 0F 02 F6 | 	mov	_var08, _var03
36744     01 00 06 F1 | 	add	_var01, #1
36748     B0 FF 9F FD | 	jmp	#LR__5363
3674c                 | LR__5364
3674c                 | LR__5365
3674c     07 00 00 FF 
36750     10 0E 06 FD | 	qmul	_var08, ##3600
36754     00 05 C2 FA | 	rdbyte	_var03, _var01
36758     3A 04 0E F2 | 	cmp	_var03, #58 wz
3675c     18 10 62 FD | 	getqx	_var09
36760     70 00 90 5D |  if_ne	jmp	#LR__5369
36764     00 0E 06 F6 | 	mov	_var08, #0
36768     01 00 06 F1 | 	add	_var01, #1
3676c     97 28 48 FB | 	callpa	#(@LR__5367-@LR__5366)>>2,fcache_load_ptr_
36770                 | '                 x = 0;
36770                 | '                 s++;
36770                 | '                 while (isdigit(*s)) {
36770                 | LR__5366
36770     00 13 C2 FA | 	rdbyte	arg01, _var01
36774                 | ' {
36774                 | '   return  (__ctype_get(c) & 0x02 ) ;
36774     80 12 36 F3 | 	fle	arg01, #128 wc
36778                 | '     return __ctype[c];
36778     02 00 00 FF 
3677c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
36780     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
36784     09 FB C1 FA | 	rdbyte	result1, arg01
36788     02 00 00 FF 
3678c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
36790     02 FA CD F7 | 	test	result1, #2 wz
36794     28 00 90 AD |  if_e	jmp	#LR__5368
36798     07 05 02 F6 | 	mov	_var03, _var08
3679c     02 04 66 F0 | 	shl	_var03, #2
367a0     07 05 02 F1 | 	add	_var03, _var08
367a4     01 04 66 F0 | 	shl	_var03, #1
367a8     00 09 C2 FA | 	rdbyte	_var05, _var01
367ac     30 08 86 F1 | 	sub	_var05, #48
367b0     04 05 02 F1 | 	add	_var03, _var05
367b4     02 0F 02 F6 | 	mov	_var08, _var03
367b8     01 00 06 F1 | 	add	_var01, #1
367bc     B0 FF 9F FD | 	jmp	#LR__5366
367c0                 | LR__5367
367c0                 | LR__5368
367c0     07 0D 02 F6 | 	mov	_var07, _var08
367c4     04 0C 66 F0 | 	shl	_var07, #4
367c8     07 0D 82 F1 | 	sub	_var07, _var08
367cc     02 0C 66 F0 | 	shl	_var07, #2
367d0     06 11 02 F1 | 	add	_var09, _var07
367d4                 | LR__5369
367d4     02 00 00 FF 
367d8     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
367dc     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
367e0     00 13 C2 FA | 	rdbyte	arg01, _var01
367e4                 | ' {
367e4                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
367e4     80 12 36 F3 | 	fle	arg01, #128 wc
367e8                 | '     return __ctype[c];
367e8     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
367ec     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
367f0     09 FB C1 FA | 	rdbyte	result1, arg01
367f4     02 00 00 FF 
367f8     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
367fc     0C FA CD F7 | 	test	result1, #12 wz
36800     50 00 90 AD |  if_e	jmp	#LR__5372
36804     0A 03 68 FC | 	wrlong	#1, arg02
36808                 | '                 *hasdst = 1;
36808                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
36808                 | LR__5370
36808     00 05 CA FA | 	rdbyte	_var03, _var01 wz
3680c     44 00 90 AD |  if_e	jmp	#LR__5371
36810     00 13 C2 FA | 	rdbyte	arg01, _var01
36814                 | ' {
36814                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
36814     80 12 36 F3 | 	fle	arg01, #128 wc
36818                 | '     return __ctype[c];
36818     02 00 00 FF 
3681c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
36820     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
36824     09 FB C1 FA | 	rdbyte	result1, arg01
36828     02 00 00 FF 
3682c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
36830     0C FA CD F7 | 	test	result1, #12 wz
36834     1C 00 90 AD |  if_e	jmp	#LR__5371
36838     00 0B 02 F6 | 	mov	_var06, _var01
3683c     01 0A 06 F1 | 	add	_var06, #1
36840     00 0D C2 FA | 	rdbyte	_var07, _var01
36844     05 01 02 F6 | 	mov	_var01, _var06
36848     03 0D 42 FC | 	wrbyte	_var07, _var04
3684c     01 06 06 F1 | 	add	_var04, #1
36850     B4 FF 9F FD | 	jmp	#LR__5370
36854                 | LR__5371
36854                 | LR__5372
36854     03 01 48 FC | 	wrbyte	#0, _var04
36858     02 00 00 FF 
3685c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
36860     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
36864     02 00 00 FF 
36868     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
3686c     20 00 90 AD |  if_e	jmp	#LR__5373
36870     02 00 00 FF 
36874     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
36878     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3687c     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
36880     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36884     02 00 00 FF 
36888     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
3688c     1C 00 90 FD | 	jmp	#LR__5374
36890                 | LR__5373
36890     02 00 00 FF 
36894     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
36898     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3689c     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
368a0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
368a4     02 00 00 FF 
368a8     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
368ac                 | LR__5374
368ac     02 00 00 FF 
368b0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
368b4     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
368b8     02 00 00 FF 
368bc     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
368c0     20 00 90 AD |  if_e	jmp	#LR__5375
368c4     02 00 00 FF 
368c8     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
368cc     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
368d0     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
368d4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
368d8     02 00 00 FF 
368dc     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
368e0     1C 00 90 FD | 	jmp	#LR__5376
368e4                 | LR__5375
368e4     02 00 00 FF 
368e8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
368ec     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
368f0     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
368f4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
368f8     02 00 00 FF 
368fc     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
36900                 | LR__5376
36900     08 03 02 FD | 	qmul	_var02, _var09
36904                 | ' 		_tzname[1] = stdname;
36904                 | ' 
36904                 | '         return sgn * off;
36904     18 FA 61 FD | 	getqx	result1
36908                 | LR__5377
36908                 | _fatfs_cc___tzoffset_ret
36908     2D 00 64 FD | 	ret
3690c                 | 
3690c                 | _fatfs_cc___indst
3690c     10 12 06 F1 | 	add	arg01, #16
36910     09 01 02 FB | 	rdlong	_var01, arg01
36914     10 12 86 F1 | 	sub	arg01, #16
36918     02 00 0E F2 | 	cmp	_var01, #2 wz
3691c     30 00 90 5D |  if_ne	jmp	#LR__5380
36920     07 00 06 F6 | 	mov	_var01, #7
36924     18 12 06 F1 | 	add	arg01, #24
36928     09 03 02 FB | 	rdlong	_var02, arg01
3692c     01 01 02 F1 | 	add	_var01, _var02
36930     0C 12 86 F1 | 	sub	arg01, #12
36934     09 05 02 FB | 	rdlong	_var03, arg01
36938     02 01 82 F1 | 	sub	_var01, _var03
3693c     00 00 56 F2 | 	cmps	_var01, #0 wc
36940                 | '                         return 1;
36940     01 FA 05 C6 |  if_b	mov	result1, #1
36944     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
36948                 | '                 return 0;
36948     00 FA 05 F6 | 	mov	result1, #0
3694c     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
36950                 | LR__5380
36950     10 12 06 F1 | 	add	arg01, #16
36954     09 01 02 FB | 	rdlong	_var01, arg01
36958     10 12 86 F1 | 	sub	arg01, #16
3695c     0A 00 0E F2 | 	cmp	_var01, #10 wz
36960     28 00 90 5D |  if_ne	jmp	#LR__5381
36964     18 12 06 F1 | 	add	arg01, #24
36968     09 01 02 FB | 	rdlong	_var01, arg01
3696c     0C 12 86 F1 | 	sub	arg01, #12
36970     09 07 02 FB | 	rdlong	_var04, arg01
36974     03 01 82 F1 | 	sub	_var01, _var04
36978     00 00 56 F2 | 	cmps	_var01, #0 wc
3697c                 | '                         return 0;
3697c     00 FA 05 C6 |  if_b	mov	result1, #0
36980     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
36984                 | '                 return 1;
36984     01 FA 05 F6 | 	mov	result1, #1
36988     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
3698c                 | LR__5381
3698c                 | '         }
3698c                 | ' 
3698c                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
3698c     00 00 06 F6 | 	mov	_var01, #0
36990     10 12 06 F1 | 	add	arg01, #16
36994     09 03 02 FB | 	rdlong	_var02, arg01
36998     10 12 86 F1 | 	sub	arg01, #16
3699c     03 02 56 F2 | 	cmps	_var02, #3 wc
369a0     10 00 90 CD |  if_b	jmp	#LR__5382
369a4     10 12 06 F1 | 	add	arg01, #16
369a8     09 05 02 FB | 	rdlong	_var03, arg01
369ac     0A 04 56 F2 | 	cmps	_var03, #10 wc
369b0     01 00 06 C6 |  if_b	mov	_var01, #1
369b4                 | LR__5382
369b4     00 FB 01 F6 | 	mov	result1, _var01
369b8                 | _fatfs_cc___indst_ret
369b8     2D 00 64 FD | 	ret
369bc                 | 
369bc                 | ' 	
369bc                 | ' 	FUNCTION pfunc(c as integer) as integer
369bc                 | ___strs_cl_pfunc
369bc                 | ' 		if (i < 16) then
369bc     04 E4 05 F1 | 	add	objptr, #4
369c0     F2 FA 01 FB | 	rdlong	result1, objptr
369c4     04 E4 85 F1 | 	sub	objptr, #4
369c8     10 FA 55 F2 | 	cmps	result1, #16 wc
369cc     2C 00 90 3D |  if_ae	jmp	#LR__5390
369d0     F2 FA 01 FB | 	rdlong	result1, objptr
369d4     04 E4 05 F1 | 	add	objptr, #4
369d8     F2 00 02 FB | 	rdlong	_var01, objptr
369dc     FD 00 02 F1 | 	add	_var01, result1
369e0     00 13 42 FC | 	wrbyte	arg01, _var01
369e4     F2 FA 01 FB | 	rdlong	result1, objptr
369e8     01 FA 05 F1 | 	add	result1, #1
369ec     F2 FA 61 FC | 	wrlong	result1, objptr
369f0     04 E4 85 F1 | 	sub	objptr, #4
369f4                 | ' 			p(i) = c
369f4                 | ' 			i = i+1
369f4                 | ' 			return 1
369f4     01 FA 05 F6 | 	mov	result1, #1
369f8     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
369fc                 | LR__5390
369fc                 | ' 			return -1
369fc     01 FA 65 F6 | 	neg	result1, #1
36a00                 | ___strs_cl_pfunc_ret
36a00     2D 00 64 FD | 	ret
36a04                 | 
36a04                 | __struct__s_vfs_file_t_putchar
36a04     04 4A 05 F6 | 	mov	COUNT_, #4
36a08     A8 00 A0 FD | 	call	#pushregs_
36a0c     1C E4 05 F1 | 	add	objptr, #28
36a10     F2 26 0A FB | 	rdlong	local01, objptr wz
36a14     1C E4 85 F1 | 	sub	objptr, #28
36a18     00 FA 05 A6 |  if_e	mov	result1, #0
36a1c     48 00 90 AD |  if_e	jmp	#LR__5400
36a20     1C E4 05 F1 | 	add	objptr, #28
36a24     F2 28 02 FB | 	rdlong	local02, objptr
36a28     14 2B 02 F6 | 	mov	local03, local02
36a2c     1C E4 85 F1 | 	sub	objptr, #28
36a30     13 2A 46 F7 | 	zerox	local03, #19
36a34     14 28 46 F0 | 	shr	local02, #20
36a38     02 28 66 F0 | 	shl	local02, #2
36a3c     ED 28 02 F1 | 	add	local02, __methods__
36a40     14 29 02 FB | 	rdlong	local02, local02
36a44     F2 14 02 F6 | 	mov	arg02, objptr
36a48     F2 2C 02 F6 | 	mov	local04, objptr
36a4c     15 E5 01 F6 | 	mov	objptr, local03
36a50     2D 28 62 FD | 	call	local02
36a54     16 E5 01 F6 | 	mov	objptr, local04
36a58                 | '     return (i < 0) ? 0 : 1;
36a58     00 FA 55 F2 | 	cmps	result1, #0 wc
36a5c     00 26 06 C6 |  if_b	mov	local01, #0
36a60     01 26 06 36 |  if_ae	mov	local01, #1
36a64     13 FB 01 F6 | 	mov	result1, local01
36a68                 | LR__5400
36a68     A7 F0 03 F6 | 	mov	ptra, fp
36a6c     B2 00 A0 FD | 	call	#popregs_
36a70                 | __struct__s_vfs_file_t_putchar_ret
36a70     2D 00 64 FD | 	ret
36a74                 | 
36a74                 | __struct__s_vfs_file_t_getchar
36a74     03 4A 05 F6 | 	mov	COUNT_, #3
36a78     A8 00 A0 FD | 	call	#pushregs_
36a7c     20 E4 05 F1 | 	add	objptr, #32
36a80     F2 12 0A FB | 	rdlong	arg01, objptr wz
36a84     20 E4 85 F1 | 	sub	objptr, #32
36a88     01 FA 65 A6 |  if_e	neg	result1, #1
36a8c     38 00 90 AD |  if_e	jmp	#LR__5410
36a90                 | '     return getcf(__this);
36a90     20 E4 05 F1 | 	add	objptr, #32
36a94     F2 26 02 FB | 	rdlong	local01, objptr
36a98     13 29 02 F6 | 	mov	local02, local01
36a9c     20 E4 85 F1 | 	sub	objptr, #32
36aa0     13 28 46 F7 | 	zerox	local02, #19
36aa4     14 26 46 F0 | 	shr	local01, #20
36aa8     02 26 66 F0 | 	shl	local01, #2
36aac     ED 26 02 F1 | 	add	local01, __methods__
36ab0     13 27 02 FB | 	rdlong	local01, local01
36ab4     F2 12 02 F6 | 	mov	arg01, objptr
36ab8     F2 2A 02 F6 | 	mov	local03, objptr
36abc     14 E5 01 F6 | 	mov	objptr, local02
36ac0     2D 26 62 FD | 	call	local01
36ac4     15 E5 01 F6 | 	mov	objptr, local03
36ac8                 | LR__5410
36ac8     A7 F0 03 F6 | 	mov	ptra, fp
36acc     B2 00 A0 FD | 	call	#popregs_
36ad0                 | __struct__s_vfs_file_t_getchar_ret
36ad0     2D 00 64 FD | 	ret
36ad4                 | 
36ad4                 | __struct___bas_wrap_sender_tx
36ad4     03 4A 05 F6 | 	mov	COUNT_, #3
36ad8     A8 00 A0 FD | 	call	#pushregs_
36adc     F2 26 02 FB | 	rdlong	local01, objptr
36ae0     13 29 02 F6 | 	mov	local02, local01
36ae4     13 26 46 F7 | 	zerox	local01, #19
36ae8     14 28 46 F0 | 	shr	local02, #20
36aec     02 28 66 F0 | 	shl	local02, #2
36af0     ED 28 02 F1 | 	add	local02, __methods__
36af4     14 29 02 FB | 	rdlong	local02, local02
36af8     F2 2A 02 F6 | 	mov	local03, objptr
36afc     13 E5 01 F6 | 	mov	objptr, local01
36b00     2D 28 62 FD | 	call	local02
36b04     15 E5 01 F6 | 	mov	objptr, local03
36b08     01 FA 05 F6 | 	mov	result1, #1
36b0c     A7 F0 03 F6 | 	mov	ptra, fp
36b10     B2 00 A0 FD | 	call	#popregs_
36b14                 | __struct___bas_wrap_sender_tx_ret
36b14     2D 00 64 FD | 	ret
36b18                 | 
36b18                 | __struct___bas_wrap_sender_rx
36b18     03 4A 05 F6 | 	mov	COUNT_, #3
36b1c     A8 00 A0 FD | 	call	#pushregs_
36b20     04 E4 05 F1 | 	add	objptr, #4
36b24     F2 26 02 FB | 	rdlong	local01, objptr
36b28     13 29 02 F6 | 	mov	local02, local01
36b2c     04 E4 85 F1 | 	sub	objptr, #4
36b30     13 28 46 F7 | 	zerox	local02, #19
36b34     14 26 46 F0 | 	shr	local01, #20
36b38     02 26 66 F0 | 	shl	local01, #2
36b3c     ED 26 02 F1 | 	add	local01, __methods__
36b40     13 27 02 FB | 	rdlong	local01, local01
36b44     F2 2A 02 F6 | 	mov	local03, objptr
36b48     14 E5 01 F6 | 	mov	objptr, local02
36b4c     2D 26 62 FD | 	call	local01
36b50     15 E5 01 F6 | 	mov	objptr, local03
36b54     A7 F0 03 F6 | 	mov	ptra, fp
36b58     B2 00 A0 FD | 	call	#popregs_
36b5c                 | __struct___bas_wrap_sender_rx_ret
36b5c     2D 00 64 FD | 	ret
36b60                 | 
36b60                 | __struct___bas_wrap_sender_close
36b60     03 4A 05 F6 | 	mov	COUNT_, #3
36b64     A8 00 A0 FD | 	call	#pushregs_
36b68     08 E4 05 F1 | 	add	objptr, #8
36b6c     F2 26 02 FB | 	rdlong	local01, objptr
36b70     13 29 02 F6 | 	mov	local02, local01
36b74     08 E4 85 F1 | 	sub	objptr, #8
36b78     13 28 46 F7 | 	zerox	local02, #19
36b7c     14 26 46 F0 | 	shr	local01, #20
36b80     02 26 66 F0 | 	shl	local01, #2
36b84     ED 26 02 F1 | 	add	local01, __methods__
36b88     13 27 02 FB | 	rdlong	local01, local01
36b8c     F2 2A 02 F6 | 	mov	local03, objptr
36b90     14 E5 01 F6 | 	mov	objptr, local02
36b94     2D 26 62 FD | 	call	local01
36b98     15 E5 01 F6 | 	mov	objptr, local03
36b9c     A7 F0 03 F6 | 	mov	ptra, fp
36ba0     B2 00 A0 FD | 	call	#popregs_
36ba4                 | __struct___bas_wrap_sender_close_ret
36ba4     2D 00 64 FD | 	ret
36ba8                 | 
36ba8                 | LR__5420
36ba8     2F          | 	byte	"/"
36ba9     00          | 	byte	0
36baa                 | LR__5421
36baa     69 6E 66    | 	byte	"inf"
36bad     00          | 	byte	0
36bae                 | LR__5422
36bae     6E 61 6E    | 	byte	"nan"
36bb1     00          | 	byte	0
36bb2                 | LR__5423
36bb2                 | 	byte	
36bb2     00          | 	byte	0
36bb3                 | LR__5424
36bb3                 | 	byte	
36bb3     00          | 	byte	0
36bb4                 | LR__5425
36bb4                 | 	byte	
36bb4     00          | 	byte	0
36bb5                 | LR__5426
36bb5                 | 	byte	
36bb5     00          | 	byte	0
36bb6                 | LR__5427
36bb6                 | 	byte	
36bb6     00          | 	byte	0
36bb7                 | LR__5428
36bb7                 | 	byte	
36bb7     00          | 	byte	0
36bb8                 | LR__5429
36bb8                 | 	byte	
36bb8     00          | 	byte	0
36bb9                 | LR__5430
36bb9                 | 	byte	
36bb9     00          | 	byte	0
36bba                 | LR__5431
36bba     00          | 	byte	0
36bbb     00          | 	byte	0
36bbc                 | LR__5432
36bbc     00          | 	byte	0
36bbd     00          | 	byte	0
36bbe                 | LR__5433
36bbe     00          | 	byte	0
36bbf     00          | 	byte	0
36bc0                 | LR__5434
36bc0     20 21 21 21 
36bc4     20 63 6F 72 
36bc8     72 75 70 74 
36bcc     65 64 20 68 
36bd0     65 61 70 3F 
36bd4     3F 3F 20 21 
36bd8     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
36bdb     00          | 	byte	0
36bdc                 | LR__5435
36bdc     20 21 21 21 
36be0     20 6F 75 74 
36be4     20 6F 66 20 
36be8     68 65 61 70 
36bec     20 6D 65 6D 
36bf0     6F 72 79 20 
36bf4     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
36bf8     00          | 	byte	0
36bf9                 | LR__5436
36bf9     20 21 21 21 
36bfd     20 63 6F 72 
36c01     72 75 70 74 
36c05     65 64 20 68 
36c09     65 61 70 20 
36c0d     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
36c11     00          | 	byte	0
36c12                 | LR__5437
36c12     00          | 	byte	0
36c13     00          | 	byte	0
36c14                 | LR__5438
36c14     2E          | 	byte	"."
36c15     00          | 	byte	0
36c16                 | LR__5439
36c16     00          | 	byte	0
36c17     00          | 	byte	0
36c18                 | LR__5440
36c18     00          | 	byte	0
36c19     00          | 	byte	0
36c1a                 | LR__5441
36c1a     00          | 	byte	0
36c1b     00          | 	byte	0
36c1c                 | LR__5442
36c1c     2A 3A 3C 3E 
36c20     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
36c24     00          | 	byte	0
36c25                 | LR__5443
36c25     2B 2C 3B 3D 
36c29     5B 5D       | 	byte	"+,;=[]"
36c2b     00          | 	byte	0
36c2c                 | LR__5444
36c2c     46 41 54 33 
36c30     32 20 20 20 | 	byte	"FAT32   "
36c34     00          | 	byte	0
36c35                 | LR__5445
36c35     54 5A       | 	byte	"TZ"
36c37     00          | 	byte	0
36c38                 | LR__5446
36c38     00          | 	byte	0
36c39     00          | 	byte	0
36c3a                 | LR__5447
36c3a                 | 	byte	
36c3a     00          | 	byte	0
36c3b                 | LR__5448
36c3b                 | 	byte	
36c3b     00          | 	byte	0
36c3c                 | LR__5449
36c3c                 | 	byte	
36c3c     00          | 	byte	0
36c3d                 | LR__5450
36c3d                 | 	byte	
36c3d     00          | 	byte	0
36c3e                 | LR__5451
36c3e     22          | 	byte	34
36c3f     00          | 	byte	0
36c40                 | LR__5452
36c40     22          | 	byte	34
36c41     00          | 	byte	0
36c42                 | LR__5453
36c42     3A          | 	byte	":"
36c43     00          | 	byte	0
36c44                 | LR__5454
36c44                 | 	byte	
36c44     00          | 	byte	0
36c45                 | LR__5455
36c45                 | 	byte	
36c45     00          | 	byte	0
36c46                 | LR__5456
36c46                 | 	byte	
36c46     00          | 	byte	0
36c47                 | LR__5457
36c47                 | 	byte	
36c47     00          | 	byte	0
36c48                 | LR__5458
36c48                 | 	byte	
36c48     00          | 	byte	0
36c49                 | LR__5459
36c49                 | 	byte	
36c49     00          | 	byte	0
36c4a                 | LR__5460
36c4a                 | 	byte	
36c4a     00          | 	byte	0
36c4b                 | LR__5461
36c4b     30          | 	byte	"0"
36c4c     00          | 	byte	0
36c4d                 | LR__5462
36c4d     22          | 	byte	34
36c4e     00          | 	byte	0
36c4f                 | LR__5463
36c4f     22          | 	byte	34
36c50     00          | 	byte	0
36c51                 | LR__5464
36c51     22          | 	byte	34
36c52     00          | 	byte	0
36c53                 | LR__5465
36c53     22          | 	byte	34
36c54     00          | 	byte	0
36c55                 | LR__5466
36c55     22          | 	byte	34
36c56     00          | 	byte	0
36c57                 | LR__5467
36c57     3E          | 	byte	">"
36c58     00          | 	byte	0
36c59                 | LR__5468
36c59     3C          | 	byte	"<"
36c5a     00          | 	byte	0
36c5b                 | LR__5469
36c5b     2B          | 	byte	"+"
36c5c     00          | 	byte	0
36c5d                 | LR__5470
36c5d     2D          | 	byte	"-"
36c5e     00          | 	byte	0
36c5f                 | LR__5471
36c5f     2A          | 	byte	"*"
36c60     00          | 	byte	0
36c61                 | LR__5472
36c61     2F          | 	byte	"/"
36c62     00          | 	byte	0
36c63                 | LR__5473
36c63     5E          | 	byte	"^"
36c64     00          | 	byte	0
36c65                 | LR__5474
36c65     3D          | 	byte	"="
36c66     00          | 	byte	0
36c67                 | LR__5475
36c67     2B          | 	byte	"+"
36c68     00          | 	byte	0
36c69                 | LR__5476
36c69     2B          | 	byte	"+"
36c6a     00          | 	byte	0
36c6b                 | LR__5477
36c6b     2D          | 	byte	"-"
36c6c     00          | 	byte	0
36c6d                 | LR__5478
36c6d     2D          | 	byte	"-"
36c6e     00          | 	byte	0
36c6f                 | LR__5479
36c6f     3C          | 	byte	"<"
36c70     00          | 	byte	0
36c71                 | LR__5480
36c71     3E          | 	byte	">"
36c72     00          | 	byte	0
36c73                 | LR__5481
36c73     22          | 	byte	34
36c74     00          | 	byte	0
36c75                 | LR__5482
36c75     22          | 	byte	34
36c76     00          | 	byte	0
36c77                 | LR__5483
36c77     65 6C 73 65 | 	byte	"else"
36c7b     00          | 	byte	0
36c7c                 | LR__5484
36c7c     74 68 65 6E | 	byte	"then"
36c80     00          | 	byte	0
36c81                 | LR__5485
36c81     3F          | 	byte	"?"
36c82     00          | 	byte	0
36c83                 | LR__5486
36c83     3F          | 	byte	"?"
36c84     00          | 	byte	0
36c85                 | LR__5487
36c85     2E          | 	byte	"."
36c86     00          | 	byte	0
36c87                 | LR__5488
36c87     6D 6F 75 73 
36c8b     65          | 	byte	"mouse"
36c8c     00          | 	byte	0
36c8d                 | LR__5489
36c8d     63 75 72 73 
36c91     6F 72       | 	byte	"cursor"
36c93     00          | 	byte	0
36c94                 | LR__5490
36c94     63 6C 69 63 
36c98     6B          | 	byte	"click"
36c99     00          | 	byte	0
36c9a                 | LR__5491
36c9a     6F 6E       | 	byte	"on"
36c9c     00          | 	byte	0
36c9d                 | LR__5492
36c9d     31          | 	byte	"1"
36c9e     00          | 	byte	0
36c9f                 | LR__5493
36c9f     6F 66 66    | 	byte	"off"
36ca2     00          | 	byte	0
36ca3                 | LR__5494
36ca3     30          | 	byte	"0"
36ca4     00          | 	byte	0
36ca5                 | LR__5495
36ca5     6D 6F 64 65 | 	byte	"mode"
36ca9     00          | 	byte	0
36caa                 | LR__5496
36caa     6D 2E       | 	byte	"m."
36cac     00          | 	byte	0
36cad                 | LR__5497
36cad     61 74 61 72 
36cb1     69          | 	byte	"atari"
36cb2     00          | 	byte	0
36cb3                 | LR__5498
36cb3     30          | 	byte	"0"
36cb4     00          | 	byte	0
36cb5                 | LR__5499
36cb5     70 63 5F 61 
36cb9     6D 62 65 72 | 	byte	"pc_amber"
36cbd     00          | 	byte	0
36cbe                 | LR__5500
36cbe     31          | 	byte	"1"
36cbf     00          | 	byte	0
36cc0                 | LR__5501
36cc0     70 63 5F 67 
36cc4     72 65 65 6E | 	byte	"pc_green"
36cc8     00          | 	byte	0
36cc9                 | LR__5502
36cc9     32          | 	byte	"2"
36cca     00          | 	byte	0
36ccb                 | LR__5503
36ccb     70 63 5F 77 
36ccf     68 69 74 65 | 	byte	"pc_white"
36cd3     00          | 	byte	0
36cd4                 | LR__5504
36cd4     33          | 	byte	"3"
36cd5     00          | 	byte	0
36cd6                 | LR__5505
36cd6     73 74       | 	byte	"st"
36cd8     00          | 	byte	0
36cd9                 | LR__5506
36cd9     34          | 	byte	"4"
36cda     00          | 	byte	0
36cdb                 | LR__5507
36cdb     61 6D 69 67 
36cdf     61          | 	byte	"amiga"
36ce0     00          | 	byte	0
36ce1                 | LR__5508
36ce1     35          | 	byte	"5"
36ce2     00          | 	byte	0
36ce3                 | LR__5509
36ce3                 | 	byte	
36ce3     00          | 	byte	0
36ce4                 | LR__5510
36ce4     6C 6F 61 64 | 	byte	"load"
36ce8     00          | 	byte	0
36ce9                 | LR__5511
36ce9     73 61 76 65 | 	byte	"save"
36ced     00          | 	byte	0
36cee                 | LR__5512
36cee     62 72 75 6E | 	byte	"brun"
36cf2     00          | 	byte	0
36cf3                 | LR__5513
36cf3     72 75 6E    | 	byte	"run"
36cf6     00          | 	byte	0
36cf7                 | LR__5514
36cf7     6C 6F 2E    | 	byte	"lo."
36cfa     00          | 	byte	0
36cfb                 | LR__5515
36cfb     73 2E       | 	byte	"s."
36cfd     00          | 	byte	0
36cfe                 | LR__5516
36cfe     62 72 2E    | 	byte	"br."
36d01     00          | 	byte	0
36d02                 | LR__5517
36d02     65 6E 74 65 
36d06     72          | 	byte	"enter"
36d07     00          | 	byte	0
36d08                 | LR__5518
36d08     65 2E       | 	byte	"e."
36d0a     00          | 	byte	0
36d0b                 | LR__5519
36d0b     24          | 	byte	"$"
36d0c     00          | 	byte	0
36d0d                 | LR__5520
36d0d     64 65 6C 65 
36d11     74 65       | 	byte	"delete"
36d13     00          | 	byte	0
36d14                 | LR__5521
36d14     6D 6B 64 69 
36d18     72          | 	byte	"mkdir"
36d19     00          | 	byte	0
36d1a                 | LR__5522
36d1a     24          | 	byte	"$"
36d1b     00          | 	byte	0
36d1c                 | LR__5523
36d1c     63 6F 70 79 | 	byte	"copy"
36d20     00          | 	byte	0
36d21                 | LR__5524
36d21     24          | 	byte	"$"
36d22     00          | 	byte	0
36d23                 | LR__5525
36d23     63 6F 70 79 | 	byte	"copy"
36d27     00          | 	byte	0
36d28                 | LR__5526
36d28     24          | 	byte	"$"
36d29     00          | 	byte	0
36d2a                 | LR__5527
36d2a     63 64       | 	byte	"cd"
36d2c     00          | 	byte	0
36d2d                 | LR__5528
36d2d     63 64 2E    | 	byte	"cd."
36d30     00          | 	byte	0
36d31                 | LR__5529
36d31     2E          | 	byte	"."
36d32     00          | 	byte	0
36d33                 | LR__5530
36d33     2E 2E       | 	byte	".."
36d35     00          | 	byte	0
36d36                 | LR__5531
36d36     63 64       | 	byte	"cd"
36d38     00          | 	byte	0
36d39                 | LR__5532
36d39     2F          | 	byte	"/"
36d3a     00          | 	byte	0
36d3b                 | LR__5533
36d3b                 | 	byte	
36d3b     00          | 	byte	0
36d3c                 | LR__5534
36d3c                 | 	byte	
36d3c     00          | 	byte	0
36d3d                 | LR__5535
36d3d                 | 	byte	
36d3d     00          | 	byte	0
36d3e                 | LR__5536
36d3e                 | 	byte	
36d3e     00          | 	byte	0
36d3f                 | LR__5537
36d3f                 | 	byte	
36d3f     00          | 	byte	0
36d40                 | LR__5538
36d40     52 65 61 64 
36d44     79          | 	byte	"Ready"
36d45     00          | 	byte	0
36d46                 | LR__5539
36d46     2B          | 	byte	"+"
36d47     00          | 	byte	0
36d48                 | LR__5540
36d48     2D          | 	byte	"-"
36d49     00          | 	byte	0
36d4a                 | LR__5541
36d4a     6F 72       | 	byte	"or"
36d4c     00          | 	byte	0
36d4d                 | LR__5542
36d4d     78 6F 72    | 	byte	"xor"
36d50     00          | 	byte	0
36d51                 | LR__5543
36d51     2A          | 	byte	"*"
36d52     00          | 	byte	0
36d53                 | LR__5544
36d53     2F          | 	byte	"/"
36d54     00          | 	byte	0
36d55                 | LR__5545
36d55     61 6E 64    | 	byte	"and"
36d58     00          | 	byte	0
36d59                 | LR__5546
36d59     64 69 76    | 	byte	"div"
36d5c     00          | 	byte	0
36d5d                 | LR__5547
36d5d     6D 6F 64    | 	byte	"mod"
36d60     00          | 	byte	0
36d61                 | LR__5548
36d61     73 68 6C    | 	byte	"shl"
36d64     00          | 	byte	0
36d65                 | LR__5549
36d65     73 68 72    | 	byte	"shr"
36d68     00          | 	byte	0
36d69                 | LR__5550
36d69     5E          | 	byte	"^"
36d6a     00          | 	byte	0
36d6b                 | LR__5551
36d6b     6E 6F 74    | 	byte	"not"
36d6e     00          | 	byte	0
36d6f                 | LR__5552
36d6f     40          | 	byte	"@"
36d70     00          | 	byte	0
36d71                 | LR__5553
36d71     3D          | 	byte	"="
36d72     00          | 	byte	0
36d73                 | LR__5554
36d73     3E 3D       | 	byte	">="
36d75     00          | 	byte	0
36d76                 | LR__5555
36d76     3C 3D       | 	byte	"<="
36d78     00          | 	byte	0
36d79                 | LR__5556
36d79     3C          | 	byte	"<"
36d7a     00          | 	byte	0
36d7b                 | LR__5557
36d7b     3E          | 	byte	">"
36d7c     00          | 	byte	0
36d7d                 | LR__5558
36d7d     3C 3E       | 	byte	"<>"
36d7f     00          | 	byte	0
36d80                 | LR__5559
36d80     2B 2B       | 	byte	"++"
36d82     00          | 	byte	0
36d83                 | LR__5560
36d83     2D 2D       | 	byte	"--"
36d85     00          | 	byte	0
36d86                 | LR__5561
36d86     23          | 	byte	"#"
36d87     00          | 	byte	0
36d88                 | LR__5562
36d88     30          | 	byte	"0"
36d89     00          | 	byte	0
36d8a                 | LR__5563
36d8a     39          | 	byte	"9"
36d8b     00          | 	byte	0
36d8c                 | LR__5564
36d8c     23 72 65 61 
36d90     64          | 	byte	"#read"
36d91     00          | 	byte	0
36d92                 | LR__5565
36d92     23 77 72 69 
36d96     74 65       | 	byte	"#write"
36d98     00          | 	byte	0
36d99                 | LR__5566
36d99     23 61 70 70 
36d9d     65 6E 64    | 	byte	"#append"
36da0     00          | 	byte	0
36da1                 | LR__5567
36da1     23          | 	byte	"#"
36da2     00          | 	byte	0
36da3                 | LR__5568
36da3     23          | 	byte	"#"
36da4     00          | 	byte	0
36da5                 | LR__5569
36da5     2D          | 	byte	"-"
36da6     00          | 	byte	0
36da7                 | LR__5570
36da7     30          | 	byte	"0"
36da8     00          | 	byte	0
36da9                 | LR__5571
36da9     63          | 	byte	"c"
36daa     00          | 	byte	0
36dab                 | LR__5572
36dab     63 23       | 	byte	"c#"
36dad     00          | 	byte	0
36dae                 | LR__5573
36dae     64          | 	byte	"d"
36daf     00          | 	byte	0
36db0                 | LR__5574
36db0     64 23       | 	byte	"d#"
36db2     00          | 	byte	0
36db3                 | LR__5575
36db3     65          | 	byte	"e"
36db4     00          | 	byte	0
36db5                 | LR__5576
36db5     66          | 	byte	"f"
36db6     00          | 	byte	0
36db7                 | LR__5577
36db7     66 23       | 	byte	"f#"
36db9     00          | 	byte	0
36dba                 | LR__5578
36dba     67          | 	byte	"g"
36dbb     00          | 	byte	0
36dbc                 | LR__5579
36dbc     67 23       | 	byte	"g#"
36dbe     00          | 	byte	0
36dbf                 | LR__5580
36dbf     61          | 	byte	"a"
36dc0     00          | 	byte	0
36dc1                 | LR__5581
36dc1     61 23       | 	byte	"a#"
36dc3     00          | 	byte	0
36dc4                 | LR__5582
36dc4     68          | 	byte	"h"
36dc5     00          | 	byte	0
36dc6                 | LR__5583
36dc6     62          | 	byte	"b"
36dc7     00          | 	byte	0
36dc8                 | LR__5584
36dc8     2B          | 	byte	"+"
36dc9     00          | 	byte	0
36dca                 | LR__5585
36dca     2D          | 	byte	"-"
36dcb     00          | 	byte	0
36dcc                 | LR__5586
36dcc     3D          | 	byte	"="
36dcd     00          | 	byte	0
36dce                 | LR__5587
36dce     2C          | 	byte	","
36dcf     00          | 	byte	0
36dd0                 | LR__5588
36dd0     2A          | 	byte	"*"
36dd1     00          | 	byte	0
36dd2                 | LR__5589
36dd2     2F          | 	byte	"/"
36dd3     00          | 	byte	0
36dd4                 | LR__5590
36dd4     3B          | 	byte	";"
36dd5     00          | 	byte	0
36dd6                 | LR__5591
36dd6     22          | 	byte	34
36dd7     00          | 	byte	0
36dd8                 | LR__5592
36dd8     5E          | 	byte	"^"
36dd9     00          | 	byte	0
36dda                 | LR__5593
36dda     29          | 	byte	")"
36ddb     00          | 	byte	0
36ddc                 | LR__5594
36ddc     28          | 	byte	"("
36ddd     00          | 	byte	0
36dde                 | LR__5595
36dde     3A          | 	byte	":"
36ddf     00          | 	byte	0
36de0                 | LR__5596
36de0     20          | 	byte	" "
36de1     00          | 	byte	0
36de2                 | LR__5597
36de2     3E          | 	byte	">"
36de3     00          | 	byte	0
36de4                 | LR__5598
36de4     3C          | 	byte	"<"
36de5     00          | 	byte	0
36de6                 | LR__5599
36de6     3D          | 	byte	"="
36de7     00          | 	byte	0
36de8                 | LR__5600
36de8     62 65 65 70 | 	byte	"beep"
36dec     00          | 	byte	0
36ded                 | LR__5601
36ded     62 2E       | 	byte	"b."
36def     00          | 	byte	0
36df0                 | LR__5602
36df0     62 6C 69 74 | 	byte	"blit"
36df4     00          | 	byte	0
36df5                 | LR__5603
36df5     62 6F 78    | 	byte	"box"
36df8     00          | 	byte	0
36df9                 | LR__5604
36df9     62 72 75 6E | 	byte	"brun"
36dfd     00          | 	byte	0
36dfe                 | LR__5605
36dfe     62 72 2E    | 	byte	"br."
36e01     00          | 	byte	0
36e02                 | LR__5606
36e02     63 64       | 	byte	"cd"
36e04     00          | 	byte	0
36e05                 | LR__5607
36e05     63 68 61 6E 
36e09     67 65 66 72 
36e0d     65 71       | 	byte	"changefreq"
36e0f     00          | 	byte	0
36e10                 | LR__5608
36e10     63 66 2E    | 	byte	"cf."
36e13     00          | 	byte	0
36e14                 | LR__5609
36e14     63 68 61 6E 
36e18     67 65 70 61 
36e1c     6E          | 	byte	"changepan"
36e1d     00          | 	byte	0
36e1e                 | LR__5610
36e1e     63 70 2E    | 	byte	"cp."
36e21     00          | 	byte	0
36e22                 | LR__5611
36e22     63 68 61 6E 
36e26     67 65 76 6F 
36e2a     6C          | 	byte	"changevol"
36e2b     00          | 	byte	0
36e2c                 | LR__5612
36e2c     63 76 2E    | 	byte	"cv."
36e2f     00          | 	byte	0
36e30                 | LR__5613
36e30     63 68 61 6E 
36e34     67 65 77 61 
36e38     76 65       | 	byte	"changewave"
36e3a     00          | 	byte	0
36e3b                 | LR__5614
36e3b     63 77 2E    | 	byte	"cw."
36e3e     00          | 	byte	0
36e3f                 | LR__5615
36e3f     63 69 72 63 
36e43     6C 65       | 	byte	"circle"
36e45     00          | 	byte	0
36e46                 | LR__5616
36e46     63 69 2E    | 	byte	"ci."
36e49     00          | 	byte	0
36e4a                 | LR__5617
36e4a     63 6C 69 63 
36e4e     6B          | 	byte	"click"
36e4f     00          | 	byte	0
36e50                 | LR__5618
36e50     63 6C 6F 73 
36e54     65          | 	byte	"close"
36e55     00          | 	byte	0
36e56                 | LR__5619
36e56     63 6C 73    | 	byte	"cls"
36e59     00          | 	byte	0
36e5a                 | LR__5620
36e5a     63 6F 67 73 
36e5e     74 6F 70    | 	byte	"cogstop"
36e61     00          | 	byte	0
36e62                 | LR__5621
36e62     63 6F 6C 6F 
36e66     72          | 	byte	"color"
36e67     00          | 	byte	0
36e68                 | LR__5622
36e68     63 2E       | 	byte	"c."
36e6a     00          | 	byte	0
36e6b                 | LR__5623
36e6b     63 6F 70 79 | 	byte	"copy"
36e6f     00          | 	byte	0
36e70                 | LR__5624
36e70     63 75 72 73 
36e74     6F 72       | 	byte	"cursor"
36e76     00          | 	byte	0
36e77                 | LR__5625
36e77     64 61 74 61 | 	byte	"data"
36e7b     00          | 	byte	0
36e7c                 | LR__5626
36e7c     64 65 66 73 
36e80     6E 64       | 	byte	"defsnd"
36e82     00          | 	byte	0
36e83                 | LR__5627
36e83     64 65 66 65 
36e87     6E 76       | 	byte	"defenv"
36e89     00          | 	byte	0
36e8a                 | LR__5628
36e8a     64 65 66 73 
36e8e     70 72 69 74 
36e92     65          | 	byte	"defsprite"
36e93     00          | 	byte	0
36e94                 | LR__5629
36e94     64 73 2E    | 	byte	"ds."
36e97     00          | 	byte	0
36e98                 | LR__5630
36e98     64 65 67    | 	byte	"deg"
36e9b     00          | 	byte	0
36e9c                 | LR__5631
36e9c     64 65 6C 65 
36ea0     74 65       | 	byte	"delete"
36ea2     00          | 	byte	0
36ea3                 | LR__5632
36ea3     64 69 6D    | 	byte	"dim"
36ea6     00          | 	byte	0
36ea7                 | LR__5633
36ea7     64 69 72    | 	byte	"dir"
36eaa     00          | 	byte	0
36eab                 | LR__5634
36eab     64 70 6F 6B 
36eaf     65          | 	byte	"dpoke"
36eb0     00          | 	byte	0
36eb1                 | LR__5635
36eb1     64 72 61 77 | 	byte	"draw"
36eb5     00          | 	byte	0
36eb6                 | LR__5636
36eb6     64 72 61 77 
36eba     74 6F       | 	byte	"drawto"
36ebc     00          | 	byte	0
36ebd                 | LR__5637
36ebd     64 72 2E    | 	byte	"dr."
36ec0     00          | 	byte	0
36ec1                 | LR__5638
36ec1     65 6C 73 65 | 	byte	"else"
36ec5     00          | 	byte	0
36ec6                 | LR__5639
36ec6     65 6E 64    | 	byte	"end"
36ec9     00          | 	byte	0
36eca                 | LR__5640
36eca     65 6E 74 65 
36ece     72          | 	byte	"enter"
36ecf     00          | 	byte	0
36ed0                 | LR__5641
36ed0     65 2E       | 	byte	"e."
36ed2     00          | 	byte	0
36ed3                 | LR__5642
36ed3     66 63 69 72 
36ed7     63 6C 65    | 	byte	"fcircle"
36eda     00          | 	byte	0
36edb                 | LR__5643
36edb     66 63 2E    | 	byte	"fc."
36ede     00          | 	byte	0
36edf                 | LR__5644
36edf     66 69 6C 6C | 	byte	"fill"
36ee3     00          | 	byte	0
36ee4                 | LR__5645
36ee4     66 69 2E    | 	byte	"fi."
36ee7     00          | 	byte	0
36ee8                 | LR__5646
36ee8     66 6F 6E 74 | 	byte	"font"
36eec     00          | 	byte	0
36eed                 | LR__5647
36eed     66 6F 72    | 	byte	"for"
36ef0     00          | 	byte	0
36ef1                 | LR__5648
36ef1     66 2E       | 	byte	"f."
36ef3     00          | 	byte	0
36ef4                 | LR__5649
36ef4     66 72 61 6D 
36ef8     65          | 	byte	"frame"
36ef9     00          | 	byte	0
36efa                 | LR__5650
36efa     66 72 2E    | 	byte	"fr."
36efd     00          | 	byte	0
36efe                 | LR__5651
36efe     67 65 74    | 	byte	"get"
36f01     00          | 	byte	0
36f02                 | LR__5652
36f02     67 6F 73 75 
36f06     62          | 	byte	"gosub"
36f07     00          | 	byte	0
36f08                 | LR__5653
36f08     67 6F 74 6F | 	byte	"goto"
36f0c     00          | 	byte	0
36f0d                 | LR__5654
36f0d     67 2E       | 	byte	"g."
36f0f     00          | 	byte	0
36f10                 | LR__5655
36f10     69 66       | 	byte	"if"
36f12     00          | 	byte	0
36f13                 | LR__5656
36f13     69 6E 6B    | 	byte	"ink"
36f16     00          | 	byte	0
36f17                 | LR__5657
36f17     69 2E       | 	byte	"i."
36f19     00          | 	byte	0
36f1a                 | LR__5658
36f1a     69 6E 70 75 
36f1e     74          | 	byte	"input"
36f1f     00          | 	byte	0
36f20                 | LR__5659
36f20     6C 69 73 74 | 	byte	"list"
36f24     00          | 	byte	0
36f25                 | LR__5660
36f25     6C 2E       | 	byte	"l."
36f27     00          | 	byte	0
36f28                 | LR__5661
36f28     6C 6F 61 64 | 	byte	"load"
36f2c     00          | 	byte	0
36f2d                 | LR__5662
36f2d     6C 6F 2E    | 	byte	"lo."
36f30     00          | 	byte	0
36f31                 | LR__5663
36f31     6C 70 6F 6B 
36f35     65          | 	byte	"lpoke"
36f36     00          | 	byte	0
36f37                 | LR__5664
36f37     6D 6B 64 69 
36f3b     72          | 	byte	"mkdir"
36f3c     00          | 	byte	0
36f3d                 | LR__5665
36f3d     6D 6F 64 65 | 	byte	"mode"
36f41     00          | 	byte	0
36f42                 | LR__5666
36f42     6D 2E       | 	byte	"m."
36f44     00          | 	byte	0
36f45                 | LR__5667
36f45     6D 6F 75 73 
36f49     65          | 	byte	"mouse"
36f4a     00          | 	byte	0
36f4b                 | LR__5668
36f4b     6E 65 77    | 	byte	"new"
36f4e     00          | 	byte	0
36f4f                 | LR__5669
36f4f     6E 65 78 74 | 	byte	"next"
36f53     00          | 	byte	0
36f54                 | LR__5670
36f54     6E 2E       | 	byte	"n."
36f56     00          | 	byte	0
36f57                 | LR__5671
36f57     6F 6E       | 	byte	"on"
36f59     00          | 	byte	0
36f5a                 | LR__5672
36f5a     6F 70 65 6E | 	byte	"open"
36f5e     00          | 	byte	0
36f5f                 | LR__5673
36f5f     70 61 70 65 
36f63     72          | 	byte	"paper"
36f64     00          | 	byte	0
36f65                 | LR__5674
36f65     70 61 2E    | 	byte	"pa."
36f68     00          | 	byte	0
36f69                 | LR__5675
36f69     70 69 6E 66 
36f6d     6C 6F 61 74 | 	byte	"pinfloat"
36f71     00          | 	byte	0
36f72                 | LR__5676
36f72     70 69 6E 68 
36f76     69          | 	byte	"pinhi"
36f77     00          | 	byte	0
36f78                 | LR__5677
36f78     70 69 6E 6C 
36f7c     6F          | 	byte	"pinlo"
36f7d     00          | 	byte	0
36f7e                 | LR__5678
36f7e     70 69 6E 73 
36f82     74 61 72 74 | 	byte	"pinstart"
36f86     00          | 	byte	0
36f87                 | LR__5679
36f87     70 69 6E 74 
36f8b     6F 67 67 6C 
36f8f     65          | 	byte	"pintoggle"
36f90     00          | 	byte	0
36f91                 | LR__5680
36f91     70 69 6E 77 
36f95     72 69 74 65 | 	byte	"pinwrite"
36f99     00          | 	byte	0
36f9a                 | LR__5681
36f9a     70 6C 61 79 | 	byte	"play"
36f9e     00          | 	byte	0
36f9f                 | LR__5682
36f9f     70 2E       | 	byte	"p."
36fa1     00          | 	byte	0
36fa2                 | LR__5683
36fa2     70 6C 6F 74 | 	byte	"plot"
36fa6     00          | 	byte	0
36fa7                 | LR__5684
36fa7     70 6C 2E    | 	byte	"pl."
36faa     00          | 	byte	0
36fab                 | LR__5685
36fab     70 6F 6B 65 | 	byte	"poke"
36faf     00          | 	byte	0
36fb0                 | LR__5686
36fb0     70 6F 70    | 	byte	"pop"
36fb3     00          | 	byte	0
36fb4                 | LR__5687
36fb4     70 6F 73 69 
36fb8     74 69 6F 6E | 	byte	"position"
36fbc     00          | 	byte	0
36fbd                 | LR__5688
36fbd     70 6F 73 2E | 	byte	"pos."
36fc1     00          | 	byte	0
36fc2                 | LR__5689
36fc2     70 72 69 6E 
36fc6     74          | 	byte	"print"
36fc7     00          | 	byte	0
36fc8                 | LR__5690
36fc8     3F          | 	byte	"?"
36fc9     00          | 	byte	0
36fca                 | LR__5691
36fca     70 75 74    | 	byte	"put"
36fcd     00          | 	byte	0
36fce                 | LR__5692
36fce     72 61 64    | 	byte	"rad"
36fd1     00          | 	byte	0
36fd2                 | LR__5693
36fd2     72 65 61 64 | 	byte	"read"
36fd6     00          | 	byte	0
36fd7                 | LR__5694
36fd7     72 65 6C 65 
36fdb     61 73 65    | 	byte	"release"
36fde     00          | 	byte	0
36fdf                 | LR__5695
36fdf     72 65 6D    | 	byte	"rem"
36fe2     00          | 	byte	0
36fe3                 | LR__5696
36fe3     27          | 	byte	"'"
36fe4     00          | 	byte	0
36fe5                 | LR__5697
36fe5     72 65 73 74 
36fe9     6F 72 65    | 	byte	"restore"
36fec     00          | 	byte	0
36fed                 | LR__5698
36fed     72 65 73 74 
36ff1     6F 72 65 70 
36ff5     61 6C 65 74 
36ff9     74 65       | 	byte	"restorepalette"
36ffb     00          | 	byte	0
36ffc                 | LR__5699
36ffc     72 70 2E    | 	byte	"rp."
36fff     00          | 	byte	0
37000                 | LR__5700
37000     72 65 74 75 
37004     72 6E       | 	byte	"return"
37006     00          | 	byte	0
37007                 | LR__5701
37007     72 75 6E    | 	byte	"run"
3700a     00          | 	byte	0
3700b                 | LR__5702
3700b     73 61 76 65 | 	byte	"save"
3700f     00          | 	byte	0
37010                 | LR__5703
37010     73 2E       | 	byte	"s."
37012     00          | 	byte	0
37013                 | LR__5704
37013     73 65 74 63 
37017     6F 6C 6F 72 | 	byte	"setcolor"
3701b     00          | 	byte	0
3701c                 | LR__5705
3701c     73 63 2E    | 	byte	"sc."
3701f     00          | 	byte	0
37020                 | LR__5706
37020     73 65 74 64 
37024     65 6C 61 79 | 	byte	"setdelay"
37028     00          | 	byte	0
37029                 | LR__5707
37029     73 64 2E    | 	byte	"sd."
3702c     00          | 	byte	0
3702d                 | LR__5708
3702d     73 65 74 65 
37031     6E 76       | 	byte	"setenv"
37033     00          | 	byte	0
37034                 | LR__5709
37034     73 65 2E    | 	byte	"se."
37037     00          | 	byte	0
37038                 | LR__5710
37038     73 65 74 6C 
3703c     65 6E       | 	byte	"setlen"
3703e     00          | 	byte	0
3703f                 | LR__5711
3703f     73 6C 2E    | 	byte	"sl."
37042     00          | 	byte	0
37043                 | LR__5712
37043     73 65 74 70 
37047     61 6E       | 	byte	"setpan"
37049     00          | 	byte	0
3704a                 | LR__5713
3704a     73 70 2E    | 	byte	"sp."
3704d     00          | 	byte	0
3704e                 | LR__5714
3704e     73 65 74 73 
37052     75 73 74 61 
37056     69 6E       | 	byte	"setsustain"
37058     00          | 	byte	0
37059                 | LR__5715
37059     73 73 2E    | 	byte	"ss."
3705c     00          | 	byte	0
3705d                 | LR__5716
3705d     73 65 74 76 
37061     6F 6C       | 	byte	"setvol"
37063     00          | 	byte	0
37064                 | LR__5717
37064     73 76 2E    | 	byte	"sv."
37067     00          | 	byte	0
37068                 | LR__5718
37068     73 65 74 77 
3706c     61 76 65    | 	byte	"setwave"
3706f     00          | 	byte	0
37070                 | LR__5719
37070     73 77 2E    | 	byte	"sw."
37073     00          | 	byte	0
37074                 | LR__5720
37074     73 65 74 77 
37078     61 76       | 	byte	"setwav"
3707a     00          | 	byte	0
3707b                 | LR__5721
3707b     73 68 75 74 
3707f     75 70       | 	byte	"shutup"
37081     00          | 	byte	0
37082                 | LR__5722
37082     73 68 2E    | 	byte	"sh."
37085     00          | 	byte	0
37086                 | LR__5723
37086     73 6F 75 6E 
3708a     64          | 	byte	"sound"
3708b     00          | 	byte	0
3708c                 | LR__5724
3708c     73 6F 2E    | 	byte	"so."
3708f     00          | 	byte	0
37090                 | LR__5725
37090     73 70 72 69 
37094     74 65       | 	byte	"sprite"
37096     00          | 	byte	0
37097                 | LR__5726
37097     73 70 72 2E | 	byte	"spr."
3709b     00          | 	byte	0
3709c                 | LR__5727
3709c     74 68 65 6E | 	byte	"then"
370a0     00          | 	byte	0
370a1                 | LR__5728
370a1     77 61 69 74 
370a5     6D 73       | 	byte	"waitms"
370a7     00          | 	byte	0
370a8                 | LR__5729
370a8     77 2E       | 	byte	"w."
370aa     00          | 	byte	0
370ab                 | LR__5730
370ab     77 61 69 74 
370af     63 6C 6F 63 
370b3     6B          | 	byte	"waitclock"
370b4     00          | 	byte	0
370b5                 | LR__5731
370b5     77 63 2E    | 	byte	"wc."
370b8     00          | 	byte	0
370b9                 | LR__5732
370b9     77 61 69 74 
370bd     76 62 6C    | 	byte	"waitvbl"
370c0     00          | 	byte	0
370c1                 | LR__5733
370c1     77 76 2E    | 	byte	"wv."
370c4     00          | 	byte	0
370c5                 | LR__5734
370c5     77 72 70 69 
370c9     6E          | 	byte	"wrpin"
370ca     00          | 	byte	0
370cb                 | LR__5735
370cb     77 78 70 69 
370cf     6E          | 	byte	"wxpin"
370d0     00          | 	byte	0
370d1                 | LR__5736
370d1     77 79 70 69 
370d5     6E          | 	byte	"wypin"
370d6     00          | 	byte	0
370d7                 | LR__5737
370d7     61 62 73    | 	byte	"abs"
370da     00          | 	byte	0
370db                 | LR__5738
370db     61 63 6F 73 | 	byte	"acos"
370df     00          | 	byte	0
370e0                 | LR__5739
370e0     61 64 72    | 	byte	"adr"
370e3     00          | 	byte	0
370e4                 | LR__5740
370e4     61 64 64 72 | 	byte	"addr"
370e8     00          | 	byte	0
370e9                 | LR__5741
370e9     61 73 63    | 	byte	"asc"
370ec     00          | 	byte	0
370ed                 | LR__5742
370ed     61 73 69 6E | 	byte	"asin"
370f1     00          | 	byte	0
370f2                 | LR__5743
370f2     61 74 6E    | 	byte	"atn"
370f5     00          | 	byte	0
370f6                 | LR__5744
370f6     62 69 6E 24 | 	byte	"bin$"
370fa     00          | 	byte	0
370fb                 | LR__5745
370fb     63 68 72 24 | 	byte	"chr$"
370ff     00          | 	byte	0
37100                 | LR__5746
37100     63 6F 67 69 
37104     6E 69 74    | 	byte	"coginit"
37107     00          | 	byte	0
37108                 | LR__5747
37108     63 6F 73    | 	byte	"cos"
3710b     00          | 	byte	0
3710c                 | LR__5748
3710c     64 70 65 65 
37110     6B          | 	byte	"dpeek"
37111     00          | 	byte	0
37112                 | LR__5749
37112     66 72 61 6D 
37116     65 62 75 66 | 	byte	"framebuf"
3711a     00          | 	byte	0
3711b                 | LR__5750
3711b     66 62 2E    | 	byte	"fb."
3711e     00          | 	byte	0
3711f                 | LR__5751
3711f     66 72 65    | 	byte	"fre"
37122     00          | 	byte	0
37123                 | LR__5752
37123     67 63 2E    | 	byte	"gc."
37126     00          | 	byte	0
37127                 | LR__5753
37127     67 65 74 63 
3712b     6F 6C 6F 72 | 	byte	"getcolor"
3712f     00          | 	byte	0
37130                 | LR__5754
37130     67 65 74 70 
37134     69 78 65 6C | 	byte	"getpixel"
37138     00          | 	byte	0
37139                 | LR__5755
37139     67 65 2E    | 	byte	"ge."
3713c     00          | 	byte	0
3713d                 | LR__5756
3713d     67 65 74 65 
37141     6E 76 73 75 
37145     73 74 61 69 
37149     6E          | 	byte	"getenvsustain"
3714a     00          | 	byte	0
3714b                 | LR__5757
3714b     67 65 74 6E 
3714f     6F 74 65 76 
37153     61 6C 75 65 | 	byte	"getnotevalue"
37157     00          | 	byte	0
37158                 | LR__5758
37158     67 65 74 74 
3715c     69 6D 65    | 	byte	"gettime"
3715f     00          | 	byte	0
37160                 | LR__5759
37160     67 74 2E    | 	byte	"gt."
37163     00          | 	byte	0
37164                 | LR__5760
37164     68 65 78 24 | 	byte	"hex$"
37168     00          | 	byte	0
37169                 | LR__5761
37169     69 6E 6B 65 
3716d     79 24       | 	byte	"inkey$"
3716f     00          | 	byte	0
37170                 | LR__5762
37170     69 6E 74    | 	byte	"int"
37173     00          | 	byte	0
37174                 | LR__5763
37174     6C 65 66 74 
37178     24          | 	byte	"left$"
37179     00          | 	byte	0
3717a                 | LR__5764
3717a     6C 65 6E    | 	byte	"len"
3717d     00          | 	byte	0
3717e                 | LR__5765
3717e     6C 6F 67    | 	byte	"log"
37181     00          | 	byte	0
37182                 | LR__5766
37182     6C 70 65 65 
37186     6B          | 	byte	"lpeek"
37187     00          | 	byte	0
37188                 | LR__5767
37188     6D 65 6D 74 
3718c     6F 70       | 	byte	"memtop"
3718e     00          | 	byte	0
3718f                 | LR__5768
3718f     6D 65 6D 6C 
37193     6F          | 	byte	"memlo"
37194     00          | 	byte	0
37195                 | LR__5769
37195     6D 69 64 24 | 	byte	"mid$"
37199     00          | 	byte	0
3719a                 | LR__5770
3719a     6D 6F 75 73 
3719e     65 6B       | 	byte	"mousek"
371a0     00          | 	byte	0
371a1                 | LR__5771
371a1     6D 6F 75 73 
371a5     65 77       | 	byte	"mousew"
371a7     00          | 	byte	0
371a8                 | LR__5772
371a8     6D 6F 75 73 
371ac     65 78       | 	byte	"mousex"
371ae     00          | 	byte	0
371af                 | LR__5773
371af     6D 6F 75 73 
371b3     65 79       | 	byte	"mousey"
371b5     00          | 	byte	0
371b6                 | LR__5774
371b6     70 61 64 78 | 	byte	"padx"
371ba     00          | 	byte	0
371bb                 | LR__5775
371bb     70 61 64 79 | 	byte	"pady"
371bf     00          | 	byte	0
371c0                 | LR__5776
371c0     70 61 64 7A | 	byte	"padz"
371c4     00          | 	byte	0
371c5                 | LR__5777
371c5     70 61 64 72 
371c9     78          | 	byte	"padrx"
371ca     00          | 	byte	0
371cb                 | LR__5778
371cb     70 61 64 72 
371cf     79          | 	byte	"padry"
371d0     00          | 	byte	0
371d1                 | LR__5779
371d1     70 61 64 72 
371d5     7A          | 	byte	"padrz"
371d6     00          | 	byte	0
371d7                 | LR__5780
371d7     70 61 64 68 | 	byte	"padh"
371db     00          | 	byte	0
371dc                 | LR__5781
371dc     70 65 65 6B | 	byte	"peek"
371e0     00          | 	byte	0
371e1                 | LR__5782
371e1     70 69 6E 72 
371e5     65 61 64    | 	byte	"pinread"
371e8     00          | 	byte	0
371e9                 | LR__5783
371e9     72 64 70 69 
371ed     6E          | 	byte	"rdpin"
371ee     00          | 	byte	0
371ef                 | LR__5784
371ef     72 69 67 68 
371f3     74 24       | 	byte	"right$"
371f5     00          | 	byte	0
371f6                 | LR__5785
371f6     72 71 70 69 
371fa     6E          | 	byte	"rqpin"
371fb     00          | 	byte	0
371fc                 | LR__5786
371fc     72 6F 75 6E 
37200     64          | 	byte	"round"
37201     00          | 	byte	0
37202                 | LR__5787
37202     72 6E 64    | 	byte	"rnd"
37205     00          | 	byte	0
37206                 | LR__5788
37206     73 69 6E    | 	byte	"sin"
37209     00          | 	byte	0
3720a                 | LR__5789
3720a     73 71 72    | 	byte	"sqr"
3720d     00          | 	byte	0
3720e                 | LR__5790
3720e     73 74 69 63 
37212     6B          | 	byte	"stick"
37213     00          | 	byte	0
37214                 | LR__5791
37214     73 74 72 69 
37218     67          | 	byte	"strig"
37219     00          | 	byte	0
3721a                 | LR__5792
3721a     73 74 72 24 | 	byte	"str$"
3721e     00          | 	byte	0
3721f                 | LR__5793
3721f     74 61 6E    | 	byte	"tan"
37222     00          | 	byte	0
37223                 | LR__5794
37223     76 61 6C    | 	byte	"val"
37226     00          | 	byte	0
37227                 | LR__5795
37227     76 61 72 70 
3722b     74 72       | 	byte	"varptr"
3722d     00          | 	byte	0
3722e                 | LR__5796
3722e     61          | 	byte	"a"
3722f     00          | 	byte	0
37230                 | LR__5797
37230     7A          | 	byte	"z"
37231     00          | 	byte	0
37232                 | LR__5798
37232     5F          | 	byte	"_"
37233     00          | 	byte	0
37234                 | LR__5799
37234     61          | 	byte	"a"
37235     00          | 	byte	0
37236                 | LR__5800
37236     7A          | 	byte	"z"
37237     00          | 	byte	0
37238                 | LR__5801
37238     30          | 	byte	"0"
37239     00          | 	byte	0
3723a                 | LR__5802
3723a     39          | 	byte	"9"
3723b     00          | 	byte	0
3723c                 | LR__5803
3723c     5F          | 	byte	"_"
3723d     00          | 	byte	0
3723e                 | LR__5804
3723e     2E          | 	byte	"."
3723f     00          | 	byte	0
37240                 | LR__5805
37240     61          | 	byte	"a"
37241     00          | 	byte	0
37242                 | LR__5806
37242     7A          | 	byte	"z"
37243     00          | 	byte	0
37244                 | LR__5807
37244     30          | 	byte	"0"
37245     00          | 	byte	0
37246                 | LR__5808
37246     39          | 	byte	"9"
37247     00          | 	byte	0
37248                 | LR__5809
37248     5F          | 	byte	"_"
37249     00          | 	byte	0
3724a                 | LR__5810
3724a     24          | 	byte	"$"
3724b     00          | 	byte	0
3724c                 | LR__5811
3724c     25          | 	byte	"%"
3724d     00          | 	byte	0
3724e                 | LR__5812
3724e     21          | 	byte	"!"
3724f     00          | 	byte	0
37250                 | LR__5813
37250     30          | 	byte	"0"
37251     00          | 	byte	0
37252                 | LR__5814
37252     39          | 	byte	"9"
37253     00          | 	byte	0
37254                 | LR__5815
37254     2E          | 	byte	"."
37255     00          | 	byte	0
37256                 | LR__5816
37256     24          | 	byte	"$"
37257     00          | 	byte	0
37258                 | LR__5817
37258     25          | 	byte	"%"
37259     00          | 	byte	0
3725a                 | LR__5818
3725a     2D          | 	byte	"-"
3725b     00          | 	byte	0
3725c                 | LR__5819
3725c     2E          | 	byte	"."
3725d     00          | 	byte	0
3725e                 | LR__5820
3725e     24          | 	byte	"$"
3725f     00          | 	byte	0
37260                 | LR__5821
37260     25          | 	byte	"%"
37261     00          | 	byte	0
37262                 | LR__5822
37262     30          | 	byte	"0"
37263     00          | 	byte	0
37264                 | LR__5823
37264     39          | 	byte	"9"
37265     00          | 	byte	0
37266                 | LR__5824
37266     5F          | 	byte	"_"
37267     00          | 	byte	0
37268                 | LR__5825
37268     2E          | 	byte	"."
37269     00          | 	byte	0
3726a                 | LR__5826
3726a     45          | 	byte	"E"
3726b     00          | 	byte	0
3726c                 | LR__5827
3726c     65          | 	byte	"e"
3726d     00          | 	byte	0
3726e                 | LR__5828
3726e     2D          | 	byte	"-"
3726f     00          | 	byte	0
37270                 | LR__5829
37270     61          | 	byte	"a"
37271     00          | 	byte	0
37272                 | LR__5830
37272     66          | 	byte	"f"
37273     00          | 	byte	0
37274                 | LR__5831
37274     30          | 	byte	"0"
37275     00          | 	byte	0
37276                 | LR__5832
37276     31          | 	byte	"1"
37277     00          | 	byte	0
37278                 | LR__5833
37278     5F          | 	byte	"_"
37279     00          | 	byte	0
3727a                 | LR__5834
3727a     2D          | 	byte	"-"
3727b     00          | 	byte	0
3727c                 | LR__5835
3727c     65          | 	byte	"e"
3727d     00          | 	byte	0
3727e                 | LR__5836
3727e     2E          | 	byte	"."
3727f     00          | 	byte	0
37280                 | LR__5837
37280     45          | 	byte	"E"
37281     00          | 	byte	0
37282                 | LR__5838
37282     65          | 	byte	"e"
37283     00          | 	byte	0
37284                 | LR__5839
37284     30          | 	byte	"0"
37285     00          | 	byte	0
37286                 | LR__5840
37286     39          | 	byte	"9"
37287     00          | 	byte	0
37288                 | LR__5841
37288     24          | 	byte	"$"
37289     00          | 	byte	0
3728a                 | LR__5842
3728a     25          | 	byte	"%"
3728b     00          | 	byte	0
3728c                 | LR__5843
3728c     2D          | 	byte	"-"
3728d     00          | 	byte	0
3728e                 | LR__5844
3728e     24          | 	byte	"$"
3728f     00          | 	byte	0
37290                 | LR__5845
37290     25          | 	byte	"%"
37291     00          | 	byte	0
37292                 | LR__5846
37292     30          | 	byte	"0"
37293     00          | 	byte	0
37294                 | LR__5847
37294     39          | 	byte	"9"
37295     00          | 	byte	0
37296                 | LR__5848
37296     5F          | 	byte	"_"
37297     00          | 	byte	0
37298                 | LR__5849
37298     30          | 	byte	"0"
37299     00          | 	byte	0
3729a                 | LR__5850
3729a     39          | 	byte	"9"
3729b     00          | 	byte	0
3729c                 | LR__5851
3729c     61          | 	byte	"a"
3729d     00          | 	byte	0
3729e                 | LR__5852
3729e     66          | 	byte	"f"
3729f     00          | 	byte	0
372a0                 | LR__5853
372a0     5F          | 	byte	"_"
372a1     00          | 	byte	0
372a2                 | LR__5854
372a2     30          | 	byte	"0"
372a3     00          | 	byte	0
372a4                 | LR__5855
372a4     31          | 	byte	"1"
372a5     00          | 	byte	0
372a6                 | LR__5856
372a6     5F          | 	byte	"_"
372a7     00          | 	byte	0
372a8                 | LR__5857
372a8     30          | 	byte	"0"
372a9     00          | 	byte	0
372aa                 | LR__5858
372aa     39          | 	byte	"9"
372ab     00          | 	byte	0
372ac                 | LR__5859
372ac     5F          | 	byte	"_"
372ad     00          | 	byte	0
372ae                 | LR__5860
372ae     22          | 	byte	34
372af     00          | 	byte	0
372b0                 | LR__5861
372b0     22          | 	byte	34
372b1     00          | 	byte	0
372b2                 | LR__5862
372b2     44 69 6D 3A 
372b6     20 61 74 20 
372ba     6C 69 6E 65 
372be     20          | 	byte	"Dim: at line "
372bf     00          | 	byte	0
372c0                 | LR__5863
372c0     3A 20 77 61 
372c4     72 6E 69 6E 
372c8     67 3A 20 74 
372cc     68 65 20 76 
372d0     61 72 69 61 
372d4     62 6C 65 20 
372d8     65 78 69 73 
372dc     74 65 64 2E | 	byte	": warning: the variable existed."
372e0     00          | 	byte	0
372e1                 | LR__5864
372e1     28          | 	byte	"("
372e2     00          | 	byte	0
372e3                 | LR__5865
372e3     61 73       | 	byte	"as"
372e5     00          | 	byte	0
372e6                 | LR__5866
372e6     61 73       | 	byte	"as"
372e8     00          | 	byte	0
372e9                 | LR__5867
372e9     2C          | 	byte	","
372ea     00          | 	byte	0
372eb                 | LR__5868
372eb     29          | 	byte	")"
372ec     00          | 	byte	0
372ed                 | LR__5869
372ed     29          | 	byte	")"
372ee     00          | 	byte	0
372ef                 | LR__5870
372ef     61 73       | 	byte	"as"
372f1     00          | 	byte	0
372f2                 | LR__5871
372f2     62 79 74 65 | 	byte	"byte"
372f6     00          | 	byte	0
372f7                 | LR__5872
372f7     75 62 79 74 
372fb     65          | 	byte	"ubyte"
372fc     00          | 	byte	0
372fd                 | LR__5873
372fd     73 68 6F 72 
37301     74          | 	byte	"short"
37302     00          | 	byte	0
37303                 | LR__5874
37303     75 73 68 6F 
37307     72 74       | 	byte	"ushort"
37309     00          | 	byte	0
3730a                 | LR__5875
3730a     6C 6F 6E 67 | 	byte	"long"
3730e     00          | 	byte	0
3730f                 | LR__5876
3730f     69 6E 74 65 
37313     67 65 72    | 	byte	"integer"
37316     00          | 	byte	0
37317                 | LR__5877
37317     75 6C 6F 6E 
3731b     67          | 	byte	"ulong"
3731c     00          | 	byte	0
3731d                 | LR__5878
3731d     69 6E 74 36 
37321     34          | 	byte	"int64"
37322     00          | 	byte	0
37323                 | LR__5879
37323     75 69 6E 74 
37327     36 34       | 	byte	"uint64"
37329     00          | 	byte	0
3732a                 | LR__5880
3732a     73 69 6E 67 
3732e     6C 65       | 	byte	"single"
37330     00          | 	byte	0
37331                 | LR__5881
37331     64 6F 75 62 
37335     6C 65       | 	byte	"double"
37337     00          | 	byte	0
37338                 | LR__5882
37338     73 74 72 69 
3733c     6E 67       | 	byte	"string"
3733e     00          | 	byte	0
3733f                 | LR__5883
3733f     74 6F       | 	byte	"to"
37341     00          | 	byte	0
37342                 | LR__5884
37342     73 74 65 70 | 	byte	"step"
37346     00          | 	byte	0
37347                 | LR__5885
37347     73 2E       | 	byte	"s."
37349     00          | 	byte	0
3734a                 | LR__5886
3734a     73 2E       | 	byte	"s."
3734c     00          | 	byte	0
3734d                 | LR__5887
3734d     67 6F 74 6F | 	byte	"goto"
37351     00          | 	byte	0
37352                 | LR__5888
37352     67 6F 73 75 
37356     62          | 	byte	"gosub"
37357     00          | 	byte	0
37358                 | LR__5889
37358     24          | 	byte	"$"
37359     00          | 	byte	0
3735a                 | LR__5890
3735a     26 68       | 	byte	"&h"
3735c     00          | 	byte	0
3735d                 | LR__5891
3735d     25          | 	byte	"%"
3735e     00          | 	byte	0
3735f                 | LR__5892
3735f     26 62       | 	byte	"&b"
37361     00          | 	byte	0
37362                 | LR__5893
37362                 | 	byte	
37362     00          | 	byte	0
37363                 | LR__5894
37363     61 63 6F 73 
37367     3A 20       | 	byte	"acos: "
37369     00          | 	byte	0
3736a                 | LR__5895
3736a     61 73 63 3A 
3736e     20          | 	byte	"asc: "
3736f     00          | 	byte	0
37370                 | LR__5896
37370     61 73 63 3A 
37374     20          | 	byte	"asc: "
37375     00          | 	byte	0
37376                 | LR__5897
37376     61 73 69 6E 
3737a     3A 20       | 	byte	"asin: "
3737c     00          | 	byte	0
3737d                 | LR__5898
3737d     61 74 6E 3A 
37381     20          | 	byte	"atn: "
37382     00          | 	byte	0
37383                 | LR__5899
37383     62 6C 69 74 
37387     3A 20       | 	byte	"blit: "
37389     00          | 	byte	0
3738a                 | LR__5900
3738a     62 69 6E 24 
3738e     3A 20       | 	byte	"bin$: "
37390     00          | 	byte	0
37391                 | LR__5901
37391     2F          | 	byte	"/"
37392     00          | 	byte	0
37393                 | LR__5902
37393     2F 73 64 2F 
37397     62 69 6E 2F | 	byte	"/sd/bin/"
3739b     00          | 	byte	0
3739c                 | LR__5903
3739c     53 79 73 74 
373a0     65 6D 20 65 
373a4     72 72 6F 72 
373a8     20          | 	byte	"System error "
373a9     00          | 	byte	0
373aa                 | LR__5904
373aa     3A 20       | 	byte	": "
373ac     00          | 	byte	0
373ad                 | LR__5905
373ad     2A          | 	byte	"*"
373ae     00          | 	byte	0
373af                 | LR__5906
373af     2E 2E       | 	byte	".."
373b1     00          | 	byte	0
373b2                 | LR__5907
373b2     2F          | 	byte	"/"
373b3     00          | 	byte	0
373b4                 | LR__5908
373b4     2F          | 	byte	"/"
373b5     00          | 	byte	0
373b6                 | LR__5909
373b6     53 79 73 74 
373ba     65 6D 20 65 
373be     72 72 6F 72 
373c2     20          | 	byte	"System error "
373c3     00          | 	byte	0
373c4                 | LR__5910
373c4     3A 20       | 	byte	": "
373c6     00          | 	byte	0
373c7                 | LR__5911
373c7     43 75 72 72 
373cb     65 6E 74 20 
373cf     64 69 72 65 
373d3     63 74 6F 72 
373d7     79 3A 20    | 	byte	"Current directory: "
373da     00          | 	byte	0
373db                 | LR__5912
373db     2F          | 	byte	"/"
373dc     00          | 	byte	0
373dd                 | LR__5913
373dd     53 79 73 74 
373e1     65 6D 20 65 
373e5     72 72 6F 72 
373e9     20          | 	byte	"System error "
373ea     00          | 	byte	0
373eb                 | LR__5914
373eb     3A 20       | 	byte	": "
373ed     00          | 	byte	0
373ee                 | LR__5915
373ee     43 75 72 72 
373f2     65 6E 74 20 
373f6     64 69 72 65 
373fa     63 74 6F 72 
373fe     79 3A 20    | 	byte	"Current directory: "
37401     00          | 	byte	0
37402                 | LR__5916
37402     2F          | 	byte	"/"
37403     00          | 	byte	0
37404                 | LR__5917
37404     2F          | 	byte	"/"
37405     00          | 	byte	0
37406                 | LR__5918
37406     2F          | 	byte	"/"
37407     00          | 	byte	0
37408                 | LR__5919
37408     53 79 73 74 
3740c     65 6D 20 65 
37410     72 72 6F 72 
37414     20          | 	byte	"System error "
37415     00          | 	byte	0
37416                 | LR__5920
37416     3A 20       | 	byte	": "
37418     00          | 	byte	0
37419                 | LR__5921
37419     43 75 72 72 
3741d     65 6E 74 20 
37421     64 69 72 65 
37425     63 74 6F 72 
37429     79 3A 20    | 	byte	"Current directory: "
3742c     00          | 	byte	0
3742d                 | LR__5922
3742d     63 68 72 24 
37431     3A 20       | 	byte	"chr$: "
37433     00          | 	byte	0
37434                 | LR__5923
37434     63 68 61 6E 
37438     6E 65 6C 23 
3743c     20 65 78 70 
37440     65 63 74 65 
37444     64          | 	byte	"channel# expected"
37445     00          | 	byte	0
37446                 | LR__5924
37446     63 6F 67 69 
3744a     6E 69 74 3A 
3744e     20          | 	byte	"coginit: "
3744f     00          | 	byte	0
37450                 | LR__5925
37450     53 79 73 74 
37454     65 6D 20 65 
37458     72 72 6F 72 
3745c     20 2D 20    | 	byte	"System error - "
3745f     00          | 	byte	0
37460                 | LR__5926
37460     20 69 6E 20 
37464     6C 69 6E 65 
37468     20          | 	byte	" in line "
37469     00          | 	byte	0
3746a                 | LR__5927
3746a     3A 20       | 	byte	": "
3746c     00          | 	byte	0
3746d                 | LR__5928
3746d     2C 20 66 69 
37471     6C 65 20 6E 
37475     61 6D 65 3A 
37479     20          | 	byte	", file name: "
3747a     00          | 	byte	0
3747b                 | LR__5929
3747b     53 79 73 74 
3747f     65 6D 20 65 
37483     72 72 6F 72 
37487     20 2D 20    | 	byte	"System error - "
3748a     00          | 	byte	0
3748b                 | LR__5930
3748b     20 69 6E 20 
3748f     6C 69 6E 65 
37493     20          | 	byte	" in line "
37494     00          | 	byte	0
37495                 | LR__5931
37495     3A 20       | 	byte	": "
37497     00          | 	byte	0
37498                 | LR__5932
37498     2C 20 66 69 
3749c     6C 65 20 6E 
374a0     61 6D 65 3A 
374a4     20          | 	byte	", file name: "
374a5     00          | 	byte	0
374a6                 | LR__5933
374a6     63 6F 73 3A 
374aa     20          | 	byte	"cos: "
374ab     00          | 	byte	0
374ac                 | LR__5934
374ac                 | 	byte	
374ac     00          | 	byte	0
374ad                 | LR__5935
374ad                 | 	byte	
374ad     00          | 	byte	0
374ae                 | LR__5936
374ae     2F 73 64 2F 
374b2     6D 65 64 69 
374b6     61 2F 68 2F | 	byte	"/sd/media/h/"
374ba     00          | 	byte	0
374bb                 | LR__5937
374bb     53 79 73 74 
374bf     65 6D 20 65 
374c3     72 72 6F 72 
374c7     20          | 	byte	"System error "
374c8     00          | 	byte	0
374c9                 | LR__5938
374c9     3A 20       | 	byte	": "
374cb     00          | 	byte	0
374cc                 | LR__5939
374cc                 | 	byte	
374cc     00          | 	byte	0
374cd                 | LR__5940
374cd                 | 	byte	
374cd     00          | 	byte	0
374ce                 | LR__5941
374ce     2F 73 64 2F 
374d2     6D 65 64 69 
374d6     61 2F 73 2F | 	byte	"/sd/media/s/"
374da     00          | 	byte	0
374db                 | LR__5942
374db     53 79 73 74 
374df     65 6D 20 65 
374e3     72 72 6F 72 
374e7     20          | 	byte	"System error "
374e8     00          | 	byte	0
374e9                 | LR__5943
374e9     3A 20       | 	byte	": "
374eb     00          | 	byte	0
374ec                 | LR__5944
374ec     2F          | 	byte	"/"
374ed     00          | 	byte	0
374ee                 | LR__5945
374ee     2F          | 	byte	"/"
374ef     00          | 	byte	0
374f0                 | LR__5946
374f0     2F          | 	byte	"/"
374f1     00          | 	byte	0
374f2                 | LR__5947
374f2     43 61 6E 6E 
374f6     6F 74 20 64 
374fa     65 6C 65 74 
374fe     65 20 66 69 
37502     6C 65 20 6F 
37506     72 20 66 69 
3750a     6C 65 20 64 
3750e     6F 65 73 6E 
37512     27 74 20 65 
37516     78 69 73 74 
3751a     3A 20 73 79 
3751e     73 74 65 6D 
37522     20 65 72 72 
37526     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
37529     00          | 	byte	0
3752a                 | LR__5948
3752a     43 75 72 72 
3752e     65 6E 74 20 
37532     64 69 72 65 
37536     63 74 6F 72 
3753a     79 3A 20    | 	byte	"Current directory: "
3753d     00          | 	byte	0
3753e                 | LR__5949
3753e                 | 	byte	
3753e     00          | 	byte	0
3753f                 | LR__5950
3753f     2A          | 	byte	"*"
37540     00          | 	byte	0
37541                 | LR__5951
37541                 | 	byte	
37541     00          | 	byte	0
37542                 | LR__5952
37542     5B 64 69 72 
37546     5D 20       | 	byte	"[dir] "
37548     00          | 	byte	0
37549                 | LR__5953
37549     4D 6F 72 65 
3754d     20 74 68 61 
37551     6E 20 31 32 
37555     38 20 65 6E 
37559     74 72 69 65 
3755d     73 20 66 6F 
37561     75 6E 64 3A 
37565     20 63 6C 65 
37569     61 6E 20 79 
3756d     6F 75 72 20 
37571     64 69 72 65 
37575     63 74 6F 72 
37579     79          | 	byte	"More than 128 entries found: clean your directory"
3757a     00          | 	byte	0
3757b                 | LR__5954
3757b     2A          | 	byte	"*"
3757c     00          | 	byte	0
3757d                 | LR__5955
3757d                 | 	byte	
3757d     00          | 	byte	0
3757e                 | LR__5956
3757e     4D 6F 72 65 
37582     20 74 68 61 
37586     6E 20 31 32 
3758a     38 20 65 6E 
3758e     74 72 69 65 
37592     73 20 66 6F 
37596     75 6E 64 3A 
3759a     20 63 6C 65 
3759e     61 6E 20 79 
375a2     6F 75 72 20 
375a6     64 69 72 65 
375aa     63 74 6F 72 
375ae     79          | 	byte	"More than 128 entries found: clean your directory"
375af     00          | 	byte	0
375b0                 | LR__5957
375b0     45 72 72 6F 
375b4     72 20       | 	byte	"Error "
375b6     00          | 	byte	0
375b7                 | LR__5958
375b7     3A 20       | 	byte	": "
375b9     00          | 	byte	0
375ba                 | LR__5959
375ba     67 65 74 63 
375be     6F 6C 6F 72 
375c2     20          | 	byte	"getcolor "
375c3     00          | 	byte	0
375c4                 | LR__5960
375c4     67 65 74 65 
375c8     6E 76 73 75 
375cc     73 74 61 69 
375d0     6E 3A 20    | 	byte	"getenvsustain: "
375d3     00          | 	byte	0
375d4                 | LR__5961
375d4     67 65 74 70 
375d8     69 78 65 6C 
375dc     3A 20       | 	byte	"getpixel: "
375de     00          | 	byte	0
375df                 | LR__5962
375df     68 65 78 24 
375e3     3A 20       | 	byte	"hex$: "
375e5     00          | 	byte	0
375e6                 | LR__5963
375e6                 | 	byte	
375e6     00          | 	byte	0
375e7                 | LR__5964
375e7     49 6E 20 69 
375eb     6E 70 75 74 
375ef     3A 20       | 	byte	"In input: "
375f1     00          | 	byte	0
375f2                 | LR__5965
375f2     2C          | 	byte	","
375f3     00          | 	byte	0
375f4                 | LR__5966
375f4                 | 	byte	
375f4     00          | 	byte	0
375f5                 | LR__5967
375f5                 | 	byte	
375f5     00          | 	byte	0
375f6                 | LR__5968
375f6     6C 65 66 74 
375fa     24 3A 20    | 	byte	"left$: "
375fd     00          | 	byte	0
375fe                 | LR__5969
375fe     6C 65 66 74 
37602     24 3A 20    | 	byte	"left$: "
37605     00          | 	byte	0
37606                 | LR__5970
37606     6C 65 6E 3A 
3760a     20          | 	byte	"len: "
3760b     00          | 	byte	0
3760c                 | LR__5971
3760c     6C 65 6E 3A 
37610     20          | 	byte	"len: "
37611     00          | 	byte	0
37612                 | LR__5972
37612                 | 	byte	
37612     00          | 	byte	0
37613                 | LR__5973
37613     2F          | 	byte	"/"
37614     00          | 	byte	0
37615                 | LR__5974
37615     2F          | 	byte	"/"
37616     00          | 	byte	0
37617                 | LR__5975
37617     2E 62 61 73 | 	byte	".bas"
3761b     00          | 	byte	0
3761c                 | LR__5976
3761c     53 79 73 74 
37620     65 6D 20 65 
37624     72 72 6F 72 
37628     20          | 	byte	"System error "
37629     00          | 	byte	0
3762a                 | LR__5977
3762a     3A 20       | 	byte	": "
3762c     00          | 	byte	0
3762d                 | LR__5978
3762d     2E 62 61 73 | 	byte	".bas"
37631     00          | 	byte	0
37632                 | LR__5979
37632     2F          | 	byte	"/"
37633     00          | 	byte	0
37634                 | LR__5980
37634                 | 	byte	
37634     00          | 	byte	0
37635                 | LR__5981
37635     4C 6F 61 64 
37639     65 64 20    | 	byte	"Loaded "
3763c     00          | 	byte	0
3763d                 | LR__5982
3763d     2F          | 	byte	"/"
3763e     00          | 	byte	0
3763f                 | LR__5983
3763f     6C 6F 67 3A 
37643     20          | 	byte	"log: "
37644     00          | 	byte	0
37645                 | LR__5984
37645     6D 69 64 24 
37649     3A 20       | 	byte	"mid$: "
3764b     00          | 	byte	0
3764c                 | LR__5985
3764c     6D 69 64 24 
37650     3A 20       | 	byte	"mid$: "
37652     00          | 	byte	0
37653                 | LR__5986
37653     43 61 6E 6E 
37657     6F 74 20 63 
3765b     72 65 61 74 
3765f     65 20 61 20 
37663     64 69 72 65 
37667     63 74 6F 72 
3766b     79 3A 20 73 
3766f     79 73 74 65 
37673     6D 20 65 72 
37677     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
3767b     00          | 	byte	0
3767c                 | LR__5987
3767c     20 42 41 53 
37680     49 43 20 62 
37684     79 74 65 73 
37688     20 66 72 65 
3768c     65          | 	byte	" BASIC bytes free"
3768d     00          | 	byte	0
3768e                 | LR__5988
3768e                 | 	byte	
3768e     00          | 	byte	0
3768f                 | LR__5989
3768f                 | 	byte	
3768f     00          | 	byte	0
37690                 | LR__5990
37690                 | 	byte	
37690     00          | 	byte	0
37691                 | LR__5991
37691     6E 6F 6E 61 
37695     6D 65 2E 62 
37699     61 73       | 	byte	"noname.bas"
3769b     00          | 	byte	0
3769c                 | LR__5992
3769c     66 69 6C 65 
376a0     6E 61 6D 65 
376a4     20 65 78 70 
376a8     65 63 74 65 
376ac     64          | 	byte	"filename expected"
376ad     00          | 	byte	0
376ae                 | LR__5993
376ae     72 65 61 64 | 	byte	"read"
376b2     00          | 	byte	0
376b3                 | LR__5994
376b3     77 72 69 74 
376b7     65          | 	byte	"write"
376b8     00          | 	byte	0
376b9                 | LR__5995
376b9     61 70 70 65 
376bd     6E 64       | 	byte	"append"
376bf     00          | 	byte	0
376c0                 | LR__5996
376c0     63 68 61 6E 
376c4     6E 65 6C 23 
376c8     20 65 78 70 
376cc     65 63 74 65 
376d0     64          | 	byte	"channel# expected"
376d1     00          | 	byte	0
376d2                 | LR__5997
376d2     4F 70 65 6E 
376d6     3A 20 69 6E 
376da     76 61 6C 69 
376de     64 20 6D 6F 
376e2     64 65       | 	byte	"Open: invalid mode"
376e4     00          | 	byte	0
376e5                 | LR__5998
376e5     70 61 64 68 
376e9     3A 20       | 	byte	"padh: "
376eb     00          | 	byte	0
376ec                 | LR__5999
376ec     70 61 64 72 
376f0     78 3A 20    | 	byte	"padrx: "
376f3     00          | 	byte	0
376f4                 | LR__6000
376f4     70 61 64 72 
376f8     79 3A 20    | 	byte	"padry: "
376fb     00          | 	byte	0
376fc                 | LR__6001
376fc     70 61 64 72 
37700     7A 3A 20    | 	byte	"padrz: "
37703     00          | 	byte	0
37704                 | LR__6002
37704     70 61 64 78 
37708     3A 20       | 	byte	"padx: "
3770a     00          | 	byte	0
3770b                 | LR__6003
3770b     70 61 64 79 
3770f     3A 20       | 	byte	"pady: "
37711     00          | 	byte	0
37712                 | LR__6004
37712     70 61 64 7A 
37716     3A 20       | 	byte	"padz: "
37718     00          | 	byte	0
37719                 | LR__6005
37719     50 72 69 6E 
3771d     74 20 74 6F 
37721     20 63 68 61 
37725     6E 6E 65 6C 
37729     20 28 6E 6F 
3772d     74 20 79 65 
37731     74 20 69 6D 
37735     70 6C 65 6D 
37739     65 6E 74 65 
3773d     64 29       | 	byte	"Print to channel (not yet implemented)"
3773f     00          | 	byte	0
37740                 | LR__6006
37740                 | 	byte	
37740     00          | 	byte	0
37741                 | LR__6007
37741     64 61 74 61 | 	byte	"data"
37745     00          | 	byte	0
37746                 | LR__6008
37746                 | 	byte	
37746     00          | 	byte	0
37747                 | LR__6009
37747     49 6E 20 72 
3774b     65 61 64 3A 
3774f     20          | 	byte	"In read: "
37750     00          | 	byte	0
37751                 | LR__6010
37751                 | 	byte	
37751     00          | 	byte	0
37752                 | LR__6011
37752                 | 	byte	
37752     00          | 	byte	0
37753                 | LR__6012
37753     27          | 	byte	"'"
37754     00          | 	byte	0
37755                 | LR__6013
37755     2C          | 	byte	","
37756     00          | 	byte	0
37757                 | LR__6014
37757                 | 	byte	
37757     00          | 	byte	0
37758                 | LR__6015
37758                 | 	byte	
37758     00          | 	byte	0
37759                 | LR__6016
37759                 | 	byte	
37759     00          | 	byte	0
3775a                 | LR__6017
3775a                 | 	byte	
3775a     00          | 	byte	0
3775b                 | LR__6018
3775b                 | 	byte	
3775b     00          | 	byte	0
3775c                 | LR__6019
3775c     72 69 67 68 
37760     74 24 3A 20 | 	byte	"right$: "
37764     00          | 	byte	0
37765                 | LR__6020
37765     72 69 67 68 
37769     74 24 3A 20 | 	byte	"right$: "
3776d     00          | 	byte	0
3776e                 | LR__6021
3776e     72 6E 64 3A 
37772     20          | 	byte	"rnd: "
37773     00          | 	byte	0
37774                 | LR__6022
37774     72 6E 64 3A 
37778     20          | 	byte	"rnd: "
37779     00          | 	byte	0
3777a                 | LR__6023
3777a                 | 	byte	
3777a     00          | 	byte	0
3777b                 | LR__6024
3777b     53 74 6F 70 
3777f     70 65 64 20 
37783     61 74 20 6C 
37787     69 6E 65 20 | 	byte	"Stopped at line "
3778b     00          | 	byte	0
3778c                 | LR__6025
3778c                 | 	byte	
3778c     00          | 	byte	0
3778d                 | LR__6026
3778d     2F          | 	byte	"/"
3778e     00          | 	byte	0
3778f                 | LR__6027
3778f                 | 	byte	
3778f     00          | 	byte	0
37790                 | LR__6028
37790     53 61 76 65 
37794     64 20 61 73 
37798     20          | 	byte	"Saved as "
37799     00          | 	byte	0
3779a                 | LR__6029
3779a     2F          | 	byte	"/"
3779b     00          | 	byte	0
3779c                 | LR__6030
3779c     73 65 74 63 
377a0     6F 6C 6F 72 
377a4     3A 20       | 	byte	"setcolor: "
377a6     00          | 	byte	0
377a7                 | LR__6031
377a7     73 69 6E 3A 
377ab     20          | 	byte	"sin: "
377ac     00          | 	byte	0
377ad                 | LR__6032
377ad     73 71 72 3A 
377b1     20          | 	byte	"sqr: "
377b2     00          | 	byte	0
377b3                 | LR__6033
377b3     73 74 69 63 
377b7     6B 3A 20    | 	byte	"stick: "
377ba     00          | 	byte	0
377bb                 | LR__6034
377bb     73 74 72 69 
377bf     67 3A 20    | 	byte	"strig: "
377c2     00          | 	byte	0
377c3                 | LR__6035
377c3     74 61 6E 3A 
377c7     20          | 	byte	"tan: "
377c8     00          | 	byte	0
377c9                 | LR__6036
377c9     76 61 6C 3A 
377cd     20          | 	byte	"val: "
377ce     00          | 	byte	0
377cf                 | LR__6037
377cf     76 61 6C 3A 
377d3     20          | 	byte	"val: "
377d4     00          | 	byte	0
377d5                 | LR__6038
377d5     24          | 	byte	"$"
377d6     00          | 	byte	0
377d7                 | LR__6039
377d7     26 68       | 	byte	"&h"
377d9     00          | 	byte	0
377da                 | LR__6040
377da     25          | 	byte	"%"
377db     00          | 	byte	0
377dc                 | LR__6041
377dc     26 62       | 	byte	"&b"
377de     00          | 	byte	0
377df                 | LR__6042
377df                 | 	byte	
377df     00          | 	byte	0
377e0                 | LR__6043
377e0     45 78 70 65 
377e4     63 74 65 64 
377e8     20 6E 75 6D 
377ec     62 65 72 2C 
377f0     20 67 6F 74 
377f4     20 73 6F 6D 
377f8     65 74 68 69 
377fc     6E 67 20 65 
37800     6C 73 65    | 	byte	"Expected number, got something else"
37803     00          | 	byte	0
37804                 | LR__6044
37804     43 61 6E 6E 
37808     6F 74 20 61 
3780c     64 64 20 61 
37810     20 6E 75 6D 
37814     62 65 72 20 
37818     74 6F 20 61 
3781c     20 73 74 72 
37820     69 6E 67    | 	byte	"Cannot add a number to a string"
37823     00          | 	byte	0
37824                 | LR__6045
37824     43 61 6E 6E 
37828     6F 74 20 73 
3782c     75 62 73 74 
37830     72 61 63 74 
37834     20 73 74 72 
37838     69 6E 67 73 | 	byte	"Cannot substract strings"
3783c     00          | 	byte	0
3783d                 | LR__6046
3783d     55 6E 6B 6E 
37841     6F 77 6E 20 
37845     65 72 72 6F 
37849     72 20 77 68 
3784d     69 6C 65 20 
37851     61 64 64 69 
37855     6E 67       | 	byte	"Unknown error while adding"
37857     00          | 	byte	0
37858                 | LR__6047
37858     55 6E 6B 6E 
3785c     6F 77 6E 20 
37860     65 72 72 6F 
37864     72 20 77 68 
37868     69 6C 65 20 
3786c     73 75 62 73 
37870     74 72 61 63 
37874     74 69 6E 67 | 	byte	"Unknown error while substracting"
37878     00          | 	byte	0
37879                 | LR__6048
37879     43 61 6E 6E 
3787d     6F 74 20 64 
37881     6F 20 6C 6F 
37885     67 69 63 20 
37889     6F 70 65 72 
3788d     61 74 69 6F 
37891     6E 20 6F 6E 
37895     20 73 74 72 
37899     69 6E 67 20 
3789d     6F 72 20 66 
378a1     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
378a5     00          | 	byte	0
378a6                 | LR__6049
378a6     55 6E 6B 6E 
378aa     6F 77 6E 20 
378ae     65 72 72 6F 
378b2     72 20 77 68 
378b6     69 6C 65 20 
378ba     64 6F 69 6E 
378be     67 20 6C 6F 
378c2     67 69 63 20 
378c6     6F 70 65 72 
378ca     61 74 69 6F 
378ce     6E          | 	byte	"Unknown error while doing logic operation"
378cf     00          | 	byte	0
378d0                 | LR__6050
378d0     43 61 6E 6E 
378d4     6F 74 20 6D 
378d8     75 6C 74 69 
378dc     70 6C 79 20 
378e0     73 74 72 69 
378e4     6E 67 73    | 	byte	"Cannot multiply strings"
378e7     00          | 	byte	0
378e8                 | LR__6051
378e8     55 6E 6B 6E 
378ec     6F 77 6E 20 
378f0     65 72 72 6F 
378f4     72 20 77 68 
378f8     69 6C 65 20 
378fc     6D 75 6C 74 
37900     69 70 6C 79 
37904     69 6E 67    | 	byte	"Unknown error while multiplying"
37907     00          | 	byte	0
37908                 | LR__6052
37908     43 61 6E 6E 
3790c     6F 74 20 64 
37910     69 76 69 64 
37914     65 20 73 74 
37918     72 69 6E 67 
3791c     73          | 	byte	"Cannot divide strings"
3791d     00          | 	byte	0
3791e                 | LR__6053
3791e     55 6E 6B 6E 
37922     6F 77 6E 20 
37926     65 72 72 6F 
3792a     72 20 77 68 
3792e     69 6C 65 20 
37932     64 69 76 69 
37936     64 69 6E 67 | 	byte	"Unknown error while dividing"
3793a     00          | 	byte	0
3793b                 | LR__6054
3793b     43 61 6E 6E 
3793f     6F 74 20 63 
37943     6F 6D 70 75 
37947     74 65 20 61 
3794b     20 70 6F 77 
3794f     65 72 20 6F 
37953     66 20 61 20 
37957     73 74 72 69 
3795b     6E 67       | 	byte	"Cannot compute a power of a string"
3795d     00          | 	byte	0
3795e                 | LR__6055
3795e     55 6E 6B 6E 
37962     6F 77 6E 20 
37966     65 72 72 6F 
3796a     72 20 77 68 
3796e     69 6C 65 20 
37972     63 6F 6D 70 
37976     75 74 69 6E 
3797a     67 20 61 20 
3797e     70 6F 77 65 
37982     72          | 	byte	"Unknown error while computing a power"
37983     00          | 	byte	0
37984                 | LR__6056
37984     52 69 67 68 
37988     74 20 70 61 
3798c     72 65 6E 74 
37990     68 65 73 69 
37994     73 20 65 78 
37998     70 65 63 74 
3799c     65 64       | 	byte	"Right parenthesis expected"
3799e     00          | 	byte	0
3799f                 | LR__6057
3799f     45 78 70 65 
379a3     63 74 65 64 
379a7     20 73 74 72 
379ab     69 6E 67    | 	byte	"Expected string"
379ae     00          | 	byte	0
379af                 | LR__6058
379af     45 78 70 65 
379b3     63 74 65 64 
379b7     20 66 6C 6F 
379bb     61 74       | 	byte	"Expected float"
379bd     00          | 	byte	0
379be                 | LR__6059
379be     45 78 70 65 
379c2     63 74 65 64 
379c6     20 75 6E 73 
379ca     69 67 6E 65 
379ce     64 20 69 6E 
379d2     74 65 67 65 
379d6     72          | 	byte	"Expected unsigned integer"
379d7     00          | 	byte	0
379d8                 | LR__6060
379d8     45 78 70 65 
379dc     63 74 65 64 
379e0     20 69 6E 74 
379e4     65 67 65 72 | 	byte	"Expected integer"
379e8     00          | 	byte	0
379e9                 | LR__6061
379e9     4E 6F 20 6D 
379ed     6F 72 65 20 
379f1     76 61 72 69 
379f5     61 62 6C 65 
379f9     20 73 6C 6F 
379fd     74 73       | 	byte	"No more variable slots"
379ff     00          | 	byte	0
37a00                 | LR__6062
37a00     56 61 72 69 
37a04     61 62 6C 65 
37a08     20 6E 6F 74 
37a0c     20 66 6F 75 
37a10     6E 64       | 	byte	"Variable not found"
37a12     00          | 	byte	0
37a13                 | LR__6063
37a13     43 6F 6D 6D 
37a17     61 20 65 78 
37a1b     70 65 63 74 
37a1f     65 64       | 	byte	"Comma expected"
37a21     00          | 	byte	0
37a22                 | LR__6064
37a22     43 6F 6D 6D 
37a26     61 20 6F 72 
37a2a     20 73 65 6D 
37a2e     69 63 6F 6C 
37a32     6F 6E 20 65 
37a36     78 70 65 63 
37a3a     74 65 64    | 	byte	"Comma or semicolon expected"
37a3d     00          | 	byte	0
37a3e                 | LR__6065
37a3e     55 6E 6B 6E 
37a42     6F 77 6E 20 
37a46     63 6F 6D 6D 
37a4a     61 6E 64    | 	byte	"Unknown command"
37a4d     00          | 	byte	0
37a4e                 | LR__6066
37a4e     53 74 61 63 
37a52     6B 20 75 6E 
37a56     64 65 72 66 
37a5a     6C 6F 77    | 	byte	"Stack underflow"
37a5d     00          | 	byte	0
37a5e                 | LR__6067
37a5e     43 61 6E 6E 
37a62     6F 74 20 65 
37a66     78 65 63 75 
37a6a     74 65 20 67 
37a6e     6F 74 6F 20 
37a72     6F 72 20 67 
37a76     6F 73 75 62 
37a7a     20 69 6E 20 
37a7e     74 68 65 20 
37a82     69 6D 6D 65 
37a86     64 69 61 74 
37a8a     65 20 6D 6F 
37a8e     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
37a90     00          | 	byte	0
37a91                 | LR__6068
37a91     43 61 6E 6E 
37a95     6F 74 20 6C 
37a99     6F 61 64 20 
37a9d     66 72 6F 6D 
37aa1     20 74 68 69 
37aa5     73 20 66 69 
37aa9     6C 65       | 	byte	"Cannot load from this file"
37aab     00          | 	byte	0
37aac                 | LR__6069
37aac     54 68 65 20 
37ab0     70 72 6F 67 
37ab4     72 61 6D 20 
37ab8     69 73 20 65 
37abc     6D 70 74 79 | 	byte	"The program is empty"
37ac0     00          | 	byte	0
37ac1                 | LR__6070
37ac1     49 66 20 61 
37ac5     66 74 65 72 
37ac9     20 69 66    | 	byte	"If after if"
37acc     00          | 	byte	0
37acd                 | LR__6071
37acd     45 6D 70 74 
37ad1     79 20 65 78 
37ad5     70 72 65 73 
37ad9     73 69 6F 6E | 	byte	"Empty expression"
37add     00          | 	byte	0
37ade                 | LR__6072
37ade     53 74 72 69 
37ae2     6E 67 20 65 
37ae6     78 70 65 63 
37aea     74 65 64    | 	byte	"String expected"
37aed     00          | 	byte	0
37aee                 | LR__6073
37aee     49 6E 74 65 
37af2     72 70 72 65 
37af6     74 65 72 20 
37afa     69 6E 74 65 
37afe     72 6E 61 6C 
37b02     20 65 72 72 
37b06     6F 72       | 	byte	"Interpreter internal error"
37b08     00          | 	byte	0
37b09                 | LR__6074
37b09     45 78 70 65 
37b0d     63 74 65 64 
37b11     20 61 73 73 
37b15     69 67 6E    | 	byte	"Expected assign"
37b18     00          | 	byte	0
37b19                 | LR__6075
37b19     45 78 70 65 
37b1d     63 74 65 64 
37b21     20 27 74 6F 
37b25     27          | 	byte	"Expected 'to'"
37b26     00          | 	byte	0
37b27                 | LR__6076
37b27     45 78 70 65 
37b2b     63 74 65 64 
37b2f     20 69 6E 74 
37b33     65 67 65 72 
37b37     20 76 61 72 
37b3b     69 61 62 6C 
37b3f     65          | 	byte	"Expected integer variable"
37b40     00          | 	byte	0
37b41                 | LR__6077
37b41     55 6E 69 6E 
37b45     69 74 69 61 
37b49     6C 69 7A 65 
37b4d     64 20 76 61 
37b51     72 69 61 62 
37b55     6C 65 20 69 
37b59     6E 20 27 6E 
37b5d     65 78 74 27 
37b61     2C 20 75 73 
37b65     65 20 27 66 
37b69     6F 72 27 20 
37b6d     62 65 66 6F 
37b71     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
37b73     00          | 	byte	0
37b74                 | LR__6078
37b74     4E 6F 20 6D 
37b78     6F 72 65 20 
37b7c     73 6C 6F 74 
37b80     73 20 66 6F 
37b84     72 20 27 66 
37b88     6F 72 27    | 	byte	"No more slots for 'for'"
37b8b     00          | 	byte	0
37b8c                 | LR__6079
37b8c     27 4E 65 78 
37b90     74 27 20 64 
37b94     6F 65 73 6E 
37b98     27 74 20 6D 
37b9c     61 74 63 68 
37ba0     20 27 66 6F 
37ba4     72 27       | 	byte	"'Next' doesn't match 'for'"
37ba6     00          | 	byte	0
37ba7                 | LR__6080
37ba7     27 47 6F 74 
37bab     6F 27 20 74 
37baf     61 72 67 65 
37bb3     74 20 6C 69 
37bb7     6E 65 20 6E 
37bbb     6F 74 20 66 
37bbf     6F 75 6E 64 | 	byte	"'Goto' target line not found"
37bc3     00          | 	byte	0
37bc4                 | LR__6081
37bc4     42 61 64 20 
37bc8     6E 75 6D 62 
37bcc     65 72 20 6F 
37bd0     66 20 70 61 
37bd4     72 61 6D 65 
37bd8     74 65 72 73 | 	byte	"Bad number of parameters"
37bdc     00          | 	byte	0
37bdd                 | LR__6082
37bdd     46 75 6E 63 
37be1     74 69 6F 6E 
37be5     20 75 6E 64 
37be9     65 66 69 6E 
37bed     65 64 20 66 
37bf1     6F 72 20 73 
37bf5     74 72 69 6E 
37bf9     67 73       | 	byte	"Function undefined for strings"
37bfb     00          | 	byte	0
37bfc                 | LR__6083
37bfc     42 61 64 20 
37c00     70 61 72 61 
37c04     6D 65 74 65 
37c08     72          | 	byte	"Bad parameter"
37c09     00          | 	byte	0
37c0a                 | LR__6084
37c0a     43 61 6E 6E 
37c0e     6F 74 20 64 
37c12     65 63 6C 61 
37c16     72 65 20 61 
37c1a     6E 20 61 72 
37c1e     72 61 79 3A 
37c22     20 74 68 65 
37c26     20 76 61 72 
37c2a     69 61 62 6C 
37c2e     65 20 65 78 
37c32     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
37c36     00          | 	byte	0
37c37                 | LR__6085
37c37     45 78 70 65 
37c3b     63 74 65 64 
37c3f     20 27 28 27 | 	byte	"Expected '('"
37c43     00          | 	byte	0
37c44                 | LR__6086
37c44     45 78 70 65 
37c48     63 74 65 64 
37c4c     20 27 29 27 
37c50     20 6F 72 20 
37c54     27 2C 27    | 	byte	"Expected ')' or ','"
37c57     00          | 	byte	0
37c58                 | LR__6087
37c58     4E 6F 20 6D 
37c5c     6F 72 65 20 
37c60     74 68 61 6E 
37c64     20 33 20 64 
37c68     69 6D 65 6E 
37c6c     73 69 6F 6E 
37c70     73 20 73 75 
37c74     70 70 6F 72 
37c78     74 65 64    | 	byte	"No more than 3 dimensions supported"
37c7b     00          | 	byte	0
37c7c                 | LR__6088
37c7c     56 61 72 69 
37c80     61 62 6C 65 
37c84     20 6E 61 6D 
37c88     65 20 65 78 
37c8c     70 65 63 74 
37c90     65 64       | 	byte	"Variable name expected"
37c92     00          | 	byte	0
37c93                 | LR__6089
37c93     54 79 70 65 
37c97     20 6E 61 6D 
37c9b     65 20 65 78 
37c9f     70 65 63 74 
37ca3     65 64       | 	byte	"Type name expected"
37ca5     00          | 	byte	0
37ca6                 | LR__6090
37ca6     54 79 70 65 
37caa     20 6E 6F 74 
37cae     20 73 75 70 
37cb2     70 6F 72 74 
37cb6     65 64 20 79 
37cba     65 74       | 	byte	"Type not supported yet"
37cbc     00          | 	byte	0
37cbd                 | LR__6091
37cbd     41 72 72 61 
37cc1     79 20 69 6E 
37cc5     64 65 78 20 
37cc9     6F 75 74 20 
37ccd     6F 66 20 72 
37cd1     61 6E 67 65 | 	byte	"Array index out of range"
37cd5     00          | 	byte	0
37cd6                 | LR__6092
37cd6     42 61 64 20 
37cda     74 79 70 65 
37cde     20 77 68 69 
37ce2     6C 65 20 61 
37ce6     73 73 69 67 
37cea     6E 69 6E 67 
37cee     20 74 6F 20 
37cf2     61 72 72 61 
37cf6     79          | 	byte	"Bad type while assigning to array"
37cf7     00          | 	byte	0
37cf8                 | LR__6093
37cf8     54 6F 6F 20 
37cfc     6D 61 6E 79 
37d00     20 76 61 72 
37d04     69 61 62 6C 
37d08     65 73       | 	byte	"Too many variables"
37d0a     00          | 	byte	0
37d0b                 | LR__6094
37d0b     27 54 68 65 
37d0f     6E 27 20 65 
37d13     78 70 65 63 
37d17     74 65 64    | 	byte	"'Then' expected"
37d1a     00          | 	byte	0
37d1b                 | LR__6095
37d1b     44 69 72 65 
37d1f     63 74 6F 72 
37d23     79 20 64 6F 
37d27     65 73 6E 27 
37d2b     74 20 65 78 
37d2f     69 73 74    | 	byte	"Directory doesn't exist"
37d32     00          | 	byte	0
37d33                 | LR__6096
37d33     55 6E 65 78 
37d37     70 65 63 74 
37d3b     65 64 20 65 
37d3f     6E 64 20 6F 
37d43     66 20 6C 69 
37d47     6E 65       | 	byte	"Unexpected end of line"
37d49     00          | 	byte	0
37d4a                 | LR__6097
37d4a     4E 6F 20 6D 
37d4e     6F 72 65 20 
37d52     64 61 74 61 | 	byte	"No more data"
37d56     00          | 	byte	0
37d57                 | LR__6098
37d57     45 72 72 6F 
37d5b     72 20       | 	byte	"Error "
37d5d     00          | 	byte	0
37d5e                 | LR__6099
37d5e     20 2D 20    | 	byte	" - "
37d61     00          | 	byte	0
37d62                 | LR__6100
37d62     20 69 6E 20 
37d66     6C 69 6E 65 
37d6a     20          | 	byte	" in line "
37d6b     00          | 	byte	0
37d6c                 | LR__6101
37d6c                 | 	byte	
37d6c     00          | 	byte	0
37d6d                 | LR__6102
37d6d     2F 73 64    | 	byte	"/sd"
37d70     00          | 	byte	0
37d71                 | LR__6103
37d71     2F 73 64 2F 
37d75     62 61 73    | 	byte	"/sd/bas"
37d78     00          | 	byte	0
37d79                 | LR__6104
37d79     2F 73 64 2F 
37d7d     62 61 73    | 	byte	"/sd/bas"
37d80     00          | 	byte	0
37d81                 | LR__6105
37d81     20 42 41 53 
37d85     49 43 20 62 
37d89     79 74 65 73 
37d8d     20 66 72 65 
37d91     65          | 	byte	" BASIC bytes free"
37d92     00          | 	byte	0
37d93                 | LR__6106
37d93     52 65 61 64 
37d97     79          | 	byte	"Ready"
37d98     00          | 	byte	0
37d99                 | LR__6107
37d99     6E 6F 6E 61 
37d9d     6D 65 2E 62 
37da1     61 73       | 	byte	"noname.bas"
37da3     00          | 	byte	0
37da4                 | LR__6108
37da4     2F 73 64 2F 
37da8     62 61 73 2F 
37dac     61 75 74 6F 
37db0     72 75 6E 2E 
37db4     62 61 73    | 	byte	"/sd/bas/autorun.bas"
37db7     00          | 	byte	0
37db8                 | LR__6109
37db8     72 75 6E 20 
37dbc     61 75 74 6F 
37dc0     72 75 6E 2E 
37dc4     62 61 73    | 	byte	"run autorun.bas"
37dc7     00          | 	byte	0
37dc8                 | LR__6110
37dc8                 | 	byte	
37dc8     00          | 	byte	0
37dc9     00 00 00    | 	alignl
37dcc                 | _dat_
37dcc     00 00 00 00 
37dd0     00 00 00 00 
37dd4     00 00 00 00 
37dd8     00 00 00 00 | 	byte	$00[16]
37ddc     61 41 17 0E 
37de0     62 42 00 00 
37de4     63 43 19 10 
37de8     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
37dec     65 45 18 0F 
37df0     66 46 00 00 
37df4     67 47 00 00 
37df8     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
37dfc     69 49 00 00 
37e00     6A 4A 00 00 
37e04     6B 4B 00 00 
37e08     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
37e0c     6D 4D 00 00 
37e10     6E 4E 1A 11 
37e14     6F 4F 1E 15 
37e18     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
37e1c     71 51 00 00 
37e20     72 52 00 00 
37e24     73 53 1B 12 
37e28     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
37e2c     75 55 00 00 
37e30     76 56 00 00 
37e34     77 57 00 00 
37e38     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
37e3c     79 59 00 00 
37e40     7A 5A 1D 14 
37e44     31 21 04 00 
37e48     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
37e4c     33 23 06 00 
37e50     34 24 07 00 
37e54     35 25 08 00 
37e58     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
37e5c     37 26 0A 00 
37e60     38 2A 0B 00 
37e64     39 28 0C 00 
37e68     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
37e6c     8D 8D 00 00 
37e70     9B 9B 00 00 
37e74     88 88 00 00 
37e78     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
37e7c     20 20 00 00 
37e80     2D 5F 00 00 
37e84     3D 2B 00 00 
37e88     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
37e8c     5D 7D 00 00 
37e90     5C 7C 00 00 
37e94     23 7E 00 00 
37e98     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
37e9c     27 22 00 00 
37ea0     60 7E 03 00 
37ea4     2C 3C 00 00 
37ea8     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
37eac     2F 3F 00 00 
37eb0     B9 B9 00 00 
37eb4     BA 00 00 00 
37eb8     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
37ebc     BC 00 00 00 
37ec0     BD 00 00 00 
37ec4     BE 00 00 00 
37ec8     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
37ecc     C0 00 00 00 
37ed0     C1 00 00 00 
37ed4     C2 00 00 00 
37ed8     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
37edc     C4 00 00 00 
37ee0     C5 00 00 00 
37ee4     C6 00 00 00 
37ee8     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
37eec     C8 00 00 00 
37ef0     C9 00 00 00 
37ef4     CA 00 00 00 
37ef8     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
37efc     7F 7F 00 00 
37f00     CC 00 00 00 
37f04     CD 00 00 00 
37f08     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
37f0c     CF 00 00 00 
37f10     D0 00 00 00 
37f14     D1 00 00 00 
37f18     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
37f1c     2F 2F 00 00 
37f20     2A 2A 00 00 
37f24     2D 2D 00 00 
37f28     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
37f2c     8D 8D 00 00 
37f30     31 31 00 00 
37f34     32 32 00 00 
37f38     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
37f3c     34 34 00 00 
37f40     35 35 00 00 
37f44     36 36 00 00 
37f48     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
37f4c     38 38 00 00 
37f50     39 39 00 00 
37f54     30 30 00 00 
37f58     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
37f5c     5C 7C 00 00 
37f60     00 00 00 00 
37f64     00 00 00 00 
37f68     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
37f6c     00 00 00 00 
      ...             
37fc4     00 00 00 00 
37fc8     00 00 00 00 | 	byte	$00[96]
37fcc     2B 00 A6 F2 
37fd0     24 A7 09 80 
37fd4     5B 88 4D 89 
37fd8     80 88 A5 88 | atari_spl file "atari.spl"
37fdc     6D 88 B8 88 
37fe0     80 88 CB 88 
37fe4     92 88 A5 88 
37fe8     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
37fec     A5 88 CA 88 
37ff0     A6 88 DD 88 
37ff4     B8 88 AB 89 
37ff8     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
37ffc     C8 AD C6 F1 
38000     91 06 B6 FF 
38004     13 00 4A 00 
38008     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
3800c     5D 00 5E 00 
38010     5D 00 5E 00 
38014     5E 00 5D 00 
38018     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
3801c     38 00 83 00 
38020     25 00 83 00 
38024     C3 FE D1 04 
38028     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
3802c     48 88 38 85 
38030     41 8A CB 88 
38034     28 89 B8 88 
38038     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
3803c     15 89 03 89 
38040     02 89 15 89 
38044     16 89 15 89 
38048     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
3804c     15 89 3A 89 
38050     72 89 E3 89 
38054     52 83 AD 97 
38058     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
3805c     0C 02 B6 FF 
38060     E1 00 A8 00 
38064     F3 00 A8 00 
38068     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
3806c     CE 00 CD 00 
38070     CD 00 BA 00 
38074     E1 00 BB 00 
38078     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
3807c     DF 00 C9 FF 
38080     E6 01 B6 06 
38084     EE DD 8D 98 
38088     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
3808c     97 89 73 89 
38090     3B 89 60 89 
38094     60 89 60 89 
38098     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
3809c     73 89 72 89 
380a0     85 89 73 89 
380a4     AA 89 60 89 
380a8     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
380ac     E8 8A 18 86 
380b0     92 88 A5 C2 
380b4     E0 00 C3 05 
380b8     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
380bc     F2 00 64 01 
380c0     06 01 3E 01 
380c4     2B 01 2B 01 
380c8     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
380cc     2B 01 2A 01 
380d0     2B 01 2B 01 
380d4     2B 01 18 01 
380d8     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
380dc     39 07 61 F3 
380e0     C0 AF 37 85 
380e4     0F 88 8B 8A 
380e8     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
380ec     AB 89 D0 89 
380f0     AB 89 D0 89 
380f4     D0 89 CF 89 
380f8     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
380fc     D0 89 F5 89 
38100     BD 89 08 8A 
38104     CF 89 E8 8A 
38108     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
3810c     53 B3 0D F8 
38110     F4 07 38 00 
38114     63 01 63 01 
38118     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
3811c     88 01 88 01 
38120     76 01 88 01 
38124     88 01 89 01 
38128     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
3812c     75 01 AE 01 
38130     76 01 88 01 
38134     4A 00 46 06 
38138     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
3813c     08 8A 9A 86 
38140     33 8B 08 8A 
38144     2D 8A F5 89 
38148     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
3814c     2D 8A 2D 8A 
38150     2E 8A 1B 8A 
38154     40 8A 2D 8A 
38158     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
3815c     2E 8A 79 8A 
38160     66 8A C8 8B 
38164     72 82 2B 97 
38168     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
3816c     1D 02 05 01 
38170     F8 01 C0 01 
38174     0B 02 C0 01 
38178     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
3817c     F9 01 D3 01 
38180     F8 01 D3 01 
38184     F8 01 D2 01 
38188     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
3818c     E6 01 2B 01 
38190     8E 02 5F 07 
38194     F7 E2 ED 9C 
38198     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
3819c     E8 8A 78 8A 
381a0     78 8A 65 8A 
381a4     8B 8A 78 8A 
381a8     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
381ac     8B 8A 9D 8A 
381b0     9D 8A 8B 8A 
381b4     C2 8A 78 8A 
381b8     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
381bc     70 8C 18 86 
381c0     8B 8A 23 C9 
381c4     CB 03 C4 05 
381c8     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
381cc     0B 02 7B 02 
381d0     1E 02 55 02 
381d4     30 02 43 02 
381d8     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
381dc     43 02 44 02 
381e0     43 02 30 02 
381e4     68 02 31 02 
381e8     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
381ec     07 08 3F F7 
381f0     73 B2 13 85 
381f4     15 89 ED 8B 
381f8     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
381fc     B0 8A FB 8A 
38200     D5 8A FA 8A 
38204     E8 8A FB 8A 
38208     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
3820c     E8 8A 21 8B 
38210     E7 8A 33 8B 
38214     E8 8A 26 8C 
38218     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
3821c     8D B0 27 F6 
38220     9C 08 AD 01 
38224     7B 02 8D 02 
38228     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
3822c     A1 02 A0 02 
38230     A1 02 A0 02 
38234     A0 02 A0 02 
38238     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
3823c     7B 02 D8 02 
38240     7B 02 C6 02 
38244     3E 01 C3 05 
38248     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
3824c     00 8C 2A 86 
38250     E0 8C FA 8A 
38254     6A 8B FB 8A 
38258     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
3825c     45 8B 45 8B 
38260     45 8B 6B 8B 
38264     46 8B 59 8B 
38268     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
3826c     6B 8B 6B 8B 
38270     6B 8B 6B 8B 
38274     7D 8B 7D 8B 
38278     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
3827c     90 8B 91 8B 
38280     90 8B 90 8B 
38284     A3 8B A3 8B 
38288     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
3828c     B5 8B B6 8B 
38290     B5 8B B5 8B 
38294     B6 8B C8 8B 
38298     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
3829c     C8 8B DA 8B 
382a0     DB 8B DB 8B 
382a4     DB 8B DC 8B 
382a8     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
382ac     EE 8B EE 8B 
382b0     00 8C 01 8C 
382b4     00 8C 01 8C 
382b8     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
382bc     12 8C 13 8C 
382c0     13 8C 26 8C 
382c4     26 8C 26 8C 
382c8     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
382cc     38 8C 38 8C 
382d0     38 8C 38 8C 
382d4     4B 8C 4B 8C 
382d8     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
382dc     5E 8C 5E 8C 
382e0     5E 8C 5E 8C 
382e4     70 8C 70 8C 
382e8     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
382ec     70 8C 83 8C 
382f0     83 8C 83 8C 
382f4     83 8C 96 8C 
382f8     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
382fc     95 8C A9 8C 
38300     A9 8C A8 8C 
38304     A8 8C A8 8C 
38308     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
3830c     BB 8C BB 8C 
38310     BB 8C CE 8C 
38314     CE 8C CE 8C 
38318     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
3831c     E0 8C E1 8C 
38320     E1 8C E0 8C 
38324     F4 8C F2 8C 
38328     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
3832c     05 8D 05 8D 
38330     06 8D 06 8D 
38334     19 8D 19 8D 
38338     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
3833c     18 8D 2B 8D 
38340     2B 8D 2B 8D 
38344     2A 8D 3E 8D 
38348     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
3834c     3E 8D 51 8D 
38350     50 8D 50 8D 
38354     50 8D 51 8D 
38358     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
3835c     63 8D 64 8D 
38360     76 8D 75 8D 
38364     75 8D 76 8D 
38368     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
3836c     88 8D 88 8D 
38370     89 8D 9B 8D 
38374     9A 8D 9B 8D 
38378     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
3837c     AD 8D AE 8D 
38380     AD 8D AE 8D 
38384     C1 8D C1 8D 
38388     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
3838c     D3 8D D3 8D 
38390     D3 8D D3 8D 
38394     D3 8D E6 8D 
38398     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
3839c     E6 8D E6 8D 
383a0     F9 8D F9 8D 
383a4     F9 8D F8 8D 
383a8     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
383ac     0B 8E 0B 8E 
383b0     1D 8E 1D 8E 
383b4     1E 8E 1E 8E 
383b8     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
383bc     31 8E 31 8E 
383c0     31 8E 42 8E 
383c4     43 8E 43 8E 
383c8     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
383cc     56 8E 56 8E 
383d0     55 8E 56 8E 
383d4     68 8E 69 8E 
383d8     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
383dc     69 8E 7B 8E 
383e0     7C 8E 7B 8E 
383e4     7B 8E 8D 8E 
383e8     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
383ec     8D 8E A1 8E 
383f0     A0 8E A1 8E 
383f4     A1 8E A0 8E 
383f8     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
383fc     B3 8E B3 8E 
38400     C6 8E C5 8E 
38404     C6 8E C6 8E 
38408     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
3840c     D8 8E D9 8E 
38410     D8 8E EC 8E 
38414     EB 8E EC 8E 
38418     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
3841c     FE 8E FE 8E 
38420     FE 8E FE 8E 
38424     10 8F 10 8F 
38428     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
3842c     11 8F 23 8F 
38430     24 8F 23 8F 
38434     24 8F 37 8F 
38438     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
3843c     36 8F 36 8F 
38440     48 8F 49 8F 
38444     49 8F 49 8F 
38448     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
3844c     5B 8F 5C 8F 
38450     5B 8F 6E 8F 
38454     6E 8F 6E 8F 
38458     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
3845c     81 8F 81 8F 
38460     81 8F 81 8F 
38464     93 8F 93 8F 
38468     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
3846c     93 8F A6 8F 
38470     A6 8F A6 8F 
38474     A6 8F B9 8F 
38478     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
3847c     B9 8F B9 8F 
38480     CC 8F CB 8F 
38484     CB 8F CC 8F 
38488     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
3848c     DF 8F DE 8F 
38490     DE 8F F1 8F 
38494     F1 8F F1 8F 
38498     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
3849c     03 90 04 90 
384a0     04 90 04 90 
384a4     16 90 17 90 
384a8     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
384ac     29 90 28 90 
384b0     29 90 28 90 
384b4     29 90 3C 90 
384b8     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
384bc     3C 90 4F 90 
384c0     4E 90 4E 90 
384c4     4E 90 4E 90 
384c8     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
384cc     61 90 61 90 
384d0     73 90 74 90 
384d4     74 90 74 90 
384d8     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
384dc     87 90 86 90 
384e0     87 90 86 90 
384e4     99 90 99 90 
384e8     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
384ec     AB 90 AB 90 
384f0     AC 90 AB 90 
384f4     AB 90 BF 90 
384f8     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
384fc     BE 90 D1 90 
38500     D0 90 D1 90 
38504     D1 90 D1 90 
38508     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
3850c     E3 90 E4 90 
38510     F6 90 F6 90 
38514     F6 90 F6 90 
38518     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
3851c     09 91 0A 91 
38520     0A 91 1C 91 
38524     1C 91 1C 91 
38528     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
3852c     2F 91 2E 91 
38530     2F 91 2F 91 
38534     2E 91 41 91 
38538     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
3853c     41 91 53 91 
38540     54 91 54 91 
38544     53 91 54 91 
38548     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
3854c     67 91 67 91 
38550     79 91 7A 91 
38554     79 91 78 91 
38558     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
3855c     8C 91 8B 91 
38560     8C 91 8C 91 
38564     9E 91 9E 91 
38568     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
3856c     B1 91 B1 91 
38570     B2 91 B1 91 
38574     B1 91 C4 91 
38578     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
3857c     C4 91 D6 91 
38580     D7 91 D7 91 
38584     D7 91 D6 91 
38588     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
3858c     EA 91 EA 91 
38590     EA 91 FC 91 
38594     FC 91 FB 91 
38598     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
3859c     0E 92 0F 92 
385a0     0F 92 0E 92 
385a4     21 92 21 92 
385a8     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
385ac     21 92 34 92 
385b0     33 92 34 92 
385b4     34 92 47 92 
385b8     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
385bc     46 92 47 92 
385c0     59 92 59 92 
385c4     59 92 59 92 
385c8     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
385cc     6C 92 6C 92 
385d0     6B 92 7E 92 
385d4     7E 92 7E 92 
385d8     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
385dc     92 92 91 92 
385e0     91 92 90 92 
385e4     91 92 A4 92 
385e8     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
385ec     A3 92 B6 92 
385f0     B6 92 B7 92 
385f4     B7 92 B6 92 
385f8     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
385fc     CA 92 C9 92 
38600     CA 92 DC 92 
38604     DC 92 DC 92 
38608     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
3860c     EF 92 EF 92 
38610     EF 92 EF 92 
38614     01 93 01 93 
38618     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
3861c     15 93 14 93 
38620     14 93 14 93 
38624     14 93 27 93 
38628     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
3862c     27 93 39 93 
38630     3A 93 39 93 
38634     39 93 39 93 
38638     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
3863c     4B 93 4C 93 
38640     5F 93 5F 93 
38644     5F 93 5E 93 
38648     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
3864c     5F 93 84 93 
38650     4C 93 96 93 
38654     5F 93 AE 94 
38658     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
3865c     7B C1 00 00 
38660     00 00 00 00 
38664     00 00 00 00 
38668     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3866c     00 00 00 00 | 	byte	$00, $00, $00, $00
38670     7A D7 00 80 
38674     87 8A 48 8F 
38678     EC 8C 76 8D 
3867c     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
38680     3C 8D 82 8D 
38684     42 8D 88 8D 
38688     8C 8D 8E 8D 
3868c     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
38690     97 8D DE 8D 
38694     E1 8D F1 8E 
38698     D8 8C A3 83 
3869c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
386a0     65 71 C9 65 
386a4     FC 64 C4 65 
386a8     C1 65 BF 65 
386ac     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
386b0     B6 65 B4 65 
386b4     B2 65 AE 65 
386b8     AC 65 ED 65 
386bc     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
386c0     5E 65 25 66 
386c4     FA 62 23 6B 
386c8     B5 6C 61 0A 
386cc     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
386d0     5D 90 BE 8D 
386d4     47 8E C3 8D 
386d8     09 8E C9 8D 
386dc     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
386e0     15 8E 19 8E 
386e4     1B 8E 62 8E 
386e8     64 8E 68 8E 
386ec     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
386f0     B5 8E 4C 90 
386f4     FA 84 3C 9D 
386f8     98 13 79 6D 
386fc     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
38700     D9 66 50 66 
38704     D4 66 4B 66 
38708     8C 66 46 66 
3870c     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
38710     81 66 3A 66 
38714     7C 66 36 66 
38718     76 66 30 66 
3871c     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
38720     6B 66 88 72 
38724     BF 37 E7 B7 
38728     75 83 8B 8E 
3872c     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
38730     94 8E 96 8E 
38734     DD 8E 9C 8E 
38738     E2 8E A2 8E 
3873c     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
38740     EE 8E AE 8E 
38744     38 8F B5 8E 
38748     3F 8F FD 8E 
3874c     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
38750     A5 87 1E E3 
38754     6D 5D FA 71 
38758     41 64 25 67 
3875c     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
38760     D9 66 1A 67 
38764     18 67 15 67 
38768     12 67 0F 67 
3876c     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
38770     07 67 C0 66 
38774     01 67 BC 66 
38778     B8 66 DE 64 
3877c     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
38780     43 E5 1F 8B 
38784     14 8A F1 90 
38788     1C 8F 63 8F 
3878c     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
38790     29 8F 6E 8F 
38794     72 8F 75 8F 
38798     34 8F BE 8F 
3879c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
387a0     84 8F 87 8F 
387a4     CC 8F 56 90 
387a8     67 91 49 80 
387ac     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
387b0     46 77 A6 66 
387b4     E8 66 B0 67 
387b8     AD 67 ED 67 
387bc     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
387c0     A2 67 E3 67 
387c4     9D 67 9A 67 
387c8     98 67 94 67 
387cc     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
387d0     49 67 CD 67 
387d4     28 65 5F 6E 
387d8     82 67 3A 01 
387dc     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
387e0     C2 91 A9 8F 
387e4     EF 8F AE 8F 
387e8     F4 8F B5 8F 
387ec     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
387f0     01 90 03 90 
387f4     07 90 09 90 
387f8     0C 90 53 90 
387fc     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
38800     18 90 44 93 
38804     85 84 D6 9D 
38808     87 1F 2F 75 
3880c     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
38810     C4 68 F6 67 
38814     BE 68 F1 67 
38818     76 68 2E 68 
3881c     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
38820     27 68 24 68 
38824     64 68 1E 68 
38828     5F 68 19 68 
3882c     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
38830     DC 68 56 72 
38834     7E 36 C2 B8 
38838     D7 84 73 90 
3883c     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
38840     7B 90 7F 90 
38844     82 90 84 90 
38848     CB 90 8B 90 
3884c     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
38850     D7 90 96 90 
38854     20 91 59 90 
38858     25 91 A2 90 
3885c     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
38860     D0 89 40 EE 
38864     12 64 C4 71 
38868     29 66 0C 69 
3886c     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
38870     C0 68 02 69 
38874     FE 68 FB 68 
38878     F9 68 F6 68 
3887c     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
38880     EE 68 A8 68 
38884     2C 69 5F 68 
38888     E2 68 81 66 
3888c     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
38890     1E EB A6 8A 
38894     73 8B 5E 93 
38898     7B 90 48 91 
3889c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
388a0     0D 91 11 91 
388a4     14 91 16 91 
388a8     5C 91 1C 91 
388ac     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
388b0     68 91 AF 91 
388b4     2A 91 B5 91 
388b8     75 91 1A 94 
388bc     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
388c0     70 0E CB 6C 
388c4     5D 6E C4 67 
388c8     99 69 54 69 
388cc     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
388d0     D2 69 49 69 
388d4     89 69 86 69 
388d8     40 69 C4 69 
388dc     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
388e0     35 69 76 69 
388e4     58 67 EB 6D 
388e8     E9 6D 89 0F 
388ec     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
388f0     33 94 94 91 
388f4     D9 91 56 91 
388f8     E0 91 9F 91 
388fc     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
38900     EC 91 EE 91 
38904     F1 91 F4 91 
38908     F7 91 3D 92 
3890c     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
38910     46 92 21 94 
38914     11 89 A4 9D 
38918     FD 0E 8F 6C 
3891c     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
38920     28 6A E1 69 
38924     65 6A 1F 6A 
38928     5F 6A 1A 6A 
3892c     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
38930     54 6A 0F 6A 
38934     4F 6A 09 6A 
38938     06 6A 03 6A 
3893c     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
38940     23 68 69 77 
38944     3A 4D 38 CA 
38948     38 86 4E 91 
3894c     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
38950     64 92 24 92 
38954     6A 92 2A 92 
38958     70 92 30 92 
3895c     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
38960     7B 92 7E 92 
38964     C5 92 84 92 
38968     CB 92 8A 92 
3896c     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
38970     4D 8D F9 E2 
38974     97 59 FE 74 
38978     DB 68 6D 6A 
3897c     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
38980     A8 6A A5 6A 
38984     A3 6A 9F 6A 
38988     9D 6A 9B 6A 
3898c     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
38990     D6 6A 8F 6A 
38994     CF 6A 46 6A 
38998     CA 6A E1 67 
3899c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
389a0     D3 F7 15 92 
389a4     90 8C BF 94 
389a8     A6 92 EB 92 
389ac     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
389b0     B1 92 F7 92 
389b4     FA 92 FD 92 
389b8     00 93 02 93 
389bc     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
389c0     4F 93 52 93 
389c4     54 93 22 94 
389c8     5A 93 8F 88 
389cc     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
389d0     1C 77 07 6C 
389d4     E8 69 7A 6B 
389d8     34 6B 75 6B 
389dc     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
389e0     29 6B 26 6B 
389e4     24 6B 21 6B 
389e8     1D 6B 5E 6B 
389ec     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
389f0     12 6B 52 6B 
389f4     34 69 34 6E 
389f8     BA 73 A4 24 
389fc     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
38a00     7A 94 B3 93 
38a04     72 93 31 93 
38a08     78 93 7A 93 
38a0c     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
38a10     83 93 86 93 
38a14     89 93 D0 93 
38a18     D2 93 D5 93 
38a1c     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
38a20     DD 93 40 96 
38a24     30 8B 99 9C 
38a28     52 10 94 71 
38a2c     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
38a30     46 6C 79 6B 
38a34     40 6C B7 6B 
38a38     F7 6B B1 6B 
38a3c     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
38a40     EC 6B A5 6B 
38a44     A2 6B 9F 6B 
38a48     9D 6B 9A 6B 
38a4c     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
38a50     C8 6A E4 76 
38a54     20 4B F9 CE 
38a58     2E 8A 1A 92 
38a5c     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
38a60     FB 93 BA 93 
38a64     01 94 03 94 
38a68     4A 94 09 94 
38a6c     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
38a70     55 94 14 94 
38a74     9E 94 1A 94 
38a78     61 94 20 94 
38a7c     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
38a80     3E 87 E5 CD 
38a84     5F 50 6C 78 
38a88     B5 6A 04 6C 
38a8c     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
38a90     83 6C 7F 6C 
38a94     7C 6C 36 6C 
38a98     76 6C 74 6C 
38a9c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
38aa0     6B 6C 25 6C 
38aa4     66 6C 1F 6C 
38aa8     1D 6C 41 6A 
38aac     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
38ab0     BA FA FC 94 
38ab4     5B 8D 97 96 
38ab8     3B 94 C5 94 
38abc     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
38ac0     89 94 8C 94 
38ac4     8F 94 92 94 
38ac8     94 94 DB 94 
38acc     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
38ad0     E4 94 E7 94 
38ad4     2D 95 74 95 
38ad8     C8 96 15 89 
38adc     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
38ae0     CB 75 31 6F 
38ae4     7E 6B 10 6D 
38ae8     C9 6C 0A 6D 
38aec     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
38af0     BD 6C FF 6C 
38af4     FB 6C F9 6C 
38af8     B2 6C F3 6C 
38afc     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
38b00     A7 6C E8 6C 
38b04     0D 6B 85 6F 
38b08     C7 74 10 28 
38b0c     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
38b10     96 96 47 95 
38b14     06 95 0A 95 
38b18     0C 95 0F 95 
38b1c     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
38b20     17 95 5E 95 
38b24     61 95 63 95 
38b28     22 95 AC 95 
38b2c     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
38b30     72 95 17 98 
38b34     59 8E 01 96 
38b38     CF FC 5A 68 
38b3c     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
38b40     96 6D 50 6D 
38b44     D5 6D 4A 6D 
38b48     8C 6D 89 6D 
38b4c     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
38b50     80 6D 3A 6D 
38b54     7A 6D 77 6D 
38b58     75 6D 71 6D 
38b5c     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
38b60     18 6C BC 78 
38b64     9A 4F 7E CF 
38b68     1F 89 F1 93 
38b6c     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
38b70     D2 95 4E 95 
38b74     D7 95 53 95 
38b78     DD 95 E0 95 
38b7c     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
38b80     A5 95 EB 95 
38b84     EE 95 F0 95 
38b88     37 96 B3 95 
38b8c     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
38b90     1A 98 D5 8D 
38b94     C5 9F CD 0F 
38b98     0F 71 F3 73 
38b9c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
38ba0     D9 6D 5E 6E 
38ba4     D3 6D 58 6E 
38ba8     12 6E 0F 6E 
38bac     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
38bb0     49 6E BF 6D 
38bb4     87 6E 76 6D 
38bb8     81 6E 11 6B 
38bbc     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
38bc0     3F 09 44 95 
38bc4     E5 8D 3F 99 
38bc8     D4 95 A2 96 
38bcc     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
38bd0     23 96 69 96 
38bd4     6B 96 6E 96 
38bd8     71 96 74 96 
38bdc     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
38be0     BF 96 3C 96 
38be4     C6 96 C8 96 
38be8     A3 98 51 8D 
38bec     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
38bf0     CF 75 29 73 
38bf4     90 6C EC 6E 
38bf8     62 6E E7 6E 
38bfc     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
38c00     9A 6E 98 6E 
38c04     95 6E 91 6E 
38c08     8E 6E CF 6E 
38c0c     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
38c10     40 6E C3 6E 
38c14     E8 6C 45 6F 
38c18     A5 7B C9 35 
38c1c     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
38c20     2D 98 23 97 
38c24     E1 96 A0 96 
38c28     A4 96 EA 96 
38c2c     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
38c30     AF 96 F4 96 
38c34     F8 96 3E 97 
38c38     FD 96 43 97 
38c3c     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
38c40     08 97 6B 99 
38c44     D6 92 88 91 
38c48     D8 EE 84 66 
38c4c     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
38c50     2E 6F E7 6E 
38c54     6C 6F 24 6F 
38c58     21 6F 1F 6F 
38c5c     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
38c60     17 6F 13 6F 
38c64     54 6F 0E 6F 
38c68     0B 6F 4B 6F 
38c6c     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
38c70     27 6D 1C 7B 
38c74     19 59 9F DB 
38c78     66 8E BC 94 
38c7c     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
38c80     67 97 26 97 
38c84     6D 97 2B 97 
38c88     72 97 32 97 
38c8c     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
38c90     C1 97 7F 97 
38c94     C6 97 85 97 
38c98     CB 97 CE 97 
38c9c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
38ca0     EC 8A C4 C6 
38ca4     68 4C F4 7D 
38ca8     63 6E E8 6E 
38cac     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
38cb0     ED 6F A7 6F 
38cb4     E7 6F A0 6F 
38cb8     E1 6F 9B 6F 
38cbc     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
38cc0     D5 6F 8F 6F 
38cc4     CE 6F 45 6F 
38cc8     86 6F 68 6D 
38ccc     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
38cd0     C0 13 AD A2 
38cd4     A7 8E 79 99 
38cd8     E6 97 E8 97 
38cdc     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
38ce0     F1 97 F3 97 
38ce4     F6 97 F9 97 
38ce8     FB 97 FE 97 
38cec     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
38cf0     4A 98 0A 98 
38cf4     93 98 0F 98 
38cf8     7F 9B BF 8C 
38cfc     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
38d00     91 7B 62 73 
38d04     1A 6E B9 70 
38d08     EB 6F B3 70 
38d0c     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
38d10     25 70 20 70 
38d14     1E 70 1B 70 
38d18     18 70 15 70 
38d1c     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
38d20     0D 70 09 70 
38d24     07 70 03 70 
38d28     01 70 FD 6F 
38d2c     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
38d30     F6 6F F2 6F 
38d34     EF 6F EC 6F 
38d38     2C 70 E6 6F 
38d3c     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
38d40     DD 6F 97 6F 
38d44     D7 6F 84 6E 
38d48     8F 6F 3F 7D 
38d4c     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
38d4e     FF FF FF FF 
38d52     FF FF       | atarist_spl file "atarist.spl" '512
38d54     00 00 00 00 
38d58     00 00 00 00 
38d5c     00 00       | 	byte	$00[10]
38d5e     17 7F F2 7F 
38d62     B2 7F 72 7F 
38d66     33 7F F4 7E 
38d6a     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
38d6e     36 7E F5 7D 
38d72     E9 51 F2 0D 
38d76     8E 00 F3 FD 
38d7a     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
38d7e     57 FD 58 FD 
38d82     5B FD 5C FD 
38d86     5C FD 60 7D 
38d8a     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
38d8e     D6 7C 98 7C 
38d92     59 7C 1A 7C 
38d96     DC 7B 9E 7B 
38d9a     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
38d9e     F3 05 00 FD 
38da2     41 FB EA FA 
38da6     D9 FA DB FA 
38daa     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
38dae     E4 FA 9B 36 
38db2     F8 7A C0 7A 
38db6     84 7A 45 7A 
38dba     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
38dbe     8E 79 51 79 
38dc2     15 79 D7 78 
38dc6     3C 1F EB FF 
38dca     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
38dce     6D F8 65 F8 
38dd2     68 F8 6D F8 
38dd6     70 F8 74 F8 
38dda     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
38dde     AB 60 79 60 
38de2     4B 60 1A 60 
38de6     E9 5F B9 5F 
38dea     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
38dee     FB 59 B2 0B 
38df2     92 FA 3A F7 
38df6     96 F6 79 F6 
38dfa     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
38dfe     82 F6 86 F6 
38e02     8C F6 DB 5D 
38e06     F1 5E C1 5E 
38e0a     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
38e0e     34 5E 04 5E 
38e12     D6 5D A6 5D 
38e16     78 5D D4 3E 
38e1a     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
38e1e     27 F5 BA F4 
38e22     AB F4 AD F4 
38e26     B2 F4 B8 F4 
38e2a     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
38e2e     26 5D 2B 5D 
38e32     FC 5C CD 5C 
38e36     9F 5C 70 5C 
38e3a     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
38e3e     E5 5B B8 5B 
38e42     DB 24 A7 FC 
38e46     D1 F4 4D F3 
38e4a     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
38e4e     04 F3 0B F3 
38e52     11 F3 16 F3 
38e56     DE 18 98 5B 
38e5a     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
38e5e     4E 4A 29 48 
38e62     A0 47 6A 47 
38e66     43 47 20 47 
38e6a     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
38e6e     E2 F6 98 F2 
38e72     C5 F1 A3 F1 
38e76     A3 F1 A8 F1 
38e7a     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
38e7e     BF F1 00 3D 
38e82     EF 46 CD 46 
38e86     AA 46 86 46 
38e8a     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
38e8e     1C 46 F9 45 
38e92     D7 45 EE 43 
38e96     DE 02 E8 F3 
38e9a     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
38e9e     61 F0 65 F0 
38ea2     6D F0 74 F0 
38ea6     7C F0 84 F0 
38eaa     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
38eae     8E 45 6D 45 
38eb2     49 45 27 45 
38eb6     05 45 E1 44 
38eba     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
38ebe     F1 2F A9 FB 
38ec2     8B F1 9B EF 
38ec6     40 EF 36 EF 
38eca     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
38ece     4D EF 56 EF 
38ed2     5E EF 7B 44 
38ed6     8C 44 69 44 
38eda     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
38ede     03 44 E1 43 
38ee2     C0 43 F5 37 
38ee6     69 33 0F 11 
38eea     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
38eee     66 EE 37 EE 
38ef2     38 EE 40 EE 
38ef6     48 EE 51 EE 
38efa     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
38efe     7D 32 6A 32 
38f02     51 32 37 32 
38f06     1F 32 05 32 
38f0a     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
38f0e     B9 31 A1 31 
38f12     F1 04 F4 F1 
38f16     50 EE A0 ED 
38f1a     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
38f1e     93 ED 9A ED 
38f22     A4 ED AD ED 
38f26     F4 27 C1 31 
38f2a     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
38f2e     78 31 5F 31 
38f32     46 31 2E 31 
38f36     15 31 FC 30 
38f3a     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
38f3e     C4 EF 4A ED 
38f42     DC EC CB EC 
38f46     D2 EC DA EC 
38f4a     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
38f4e     F9 EC 64 2F 
38f52     0A 31 F1 30 
38f56     D9 30 C0 30 
38f5a     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
38f5e     78 30 5F 30 
38f62     46 30 38 23 
38f66     A6 F6 19 EE 
38f6a     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
38f6e     20 EC 28 EC 
38f72     32 EC 3C EC 
38f76     47 EC 51 EC 
38f7a     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
38f7e     A3 22 93 22 
38f82     7F 22 6E 22 
38f86     5D 22 4C 22 
38f8a     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
38f8e     77 09 76 F1 
38f92     CC EC F0 EB 
38f96     CD EB CE EB 
38f9a     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
38f9e     ED EB F5 EB 
38fa2     3E F6 6B 22 
38fa6     5F 22 4E 22 
38faa     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
38fae     1B 22 0B 22 
38fb2     FA 21 E9 21 
38fb6     D8 21 4D FF 
38fba     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
38fbe     92 EB 7B EB 
38fc2     82 EB 8C EB 
38fc6     97 EB A1 EB 
38fca     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
38fce     15 22 04 22 
38fd2     F3 21 E3 21 
38fd6     D2 21 C0 21 
38fda     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
38fde     8E 21 7D 21 
38fe2     9A F8 A4 ED 
38fe6     8E EB 2F EB 
38fea     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
38fee     37 EB 42 EB 
38ff2     4C EB 57 EB 
38ff6     B2 17 22 19 
38ffa     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
38ffe     FD 18 EF 18 
39002     E3 18 D6 18 
39006     CA 18 BD 18 
3900a     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
3900e     60 EC 35 EB 
39012     01 EB 01 EB 
39016     0C EB 16 EB 
3901a     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
3901e     34 EB D0 18 
39022     00 19 F4 18 
39026     E8 18 DA 18 
3902a     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
3902e     B6 18 A9 18 
39032     9D 18 91 05 
39036     F0 EF CA EB 
3903a     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
3903e     E8 EA F2 EA 
39042     FE EA 07 EB 
39046     12 EB C2 EF 
3904a     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
3904e     D9 18 CD 18 
39052     C0 18 B3 18 
39056     A7 18 9B 18 
3905a     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
3905e     B8 FC 30 EE 
39062     61 EB DC EA 
39066     CD EA D2 EA 
3906a     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
3906e     F3 EA FE EA 
39072     D2 09 D1 18 
39076     C3 18 17 18 
3907a     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
3907e     66 11 52 11 
39082     49 11 41 11 
39086     38 11 E0 F4 
3908a     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
3908e     C9 EA C5 EA 
39092     CF EA DB EA 
39096     E6 EA EF EA 
3909a     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
3909e     89 11 80 11 
390a2     78 11 6E 11 
390a6     67 11 5D 11 
390aa     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
390ae     43 11 32 0D 
390b2     9C F1 07 EC 
390b6     F8 EA CD EA 
390ba     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
390be     E4 EA ED EA 
390c2     F8 EA 02 EB 
390c6     55 11 91 11 
390ca     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
390ce     75 11 6E 11 
390d2     64 11 5E 11 
390d6     54 11 4A 11 
390da     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
390de     A8 EB F1 EA 
390e2     D9 EA DC EA 
390e6     E8 EA F1 EA 
390ea     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
390ee     A6 EB 9E 11 
390f2     A0 11 96 11 
390f6     8D 11 85 11 
390fa     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
390fe     6A 11 CA 0D 
39102     36 0B 57 F8 
39106     6C ED 57 EB 
3910a     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
3910e     F4 EA FF EA 
39112     09 EB 15 EB 
39116     1E EB 1A FD 
3911a     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
3911e     ED 0A E8 0A 
39122     E2 0A DC 0A 
39126     D6 0A D1 0A 
3912a     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
3912e     F8 F3 BC EC 
39132     57 EB 1E EB 
39136     18 EB 24 EB 
3913a     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
3913e     42 EB 4D EB 
39142     08 09 20 0B 
39146     1A 0B 14 0B 
3914a     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
3914e     04 0B FE 0A 
39152     F9 0A F2 0A 
39156     84 08 3A F1 
3915a     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
3915e     42 EB 42 EB 
39162     4E EB 57 EB 
39166     62 EB 6B EB 
3916a     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
3916e     48 0B 43 0B 
39172     3C 0B 36 0B 
39176     31 0B 2C 0B 
3917a     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
3917e     1B 0B 5C 00 
39182     6A EF 1B EC 
39186     81 EB 6A EB 
3918a     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
3918e     85 EB 8E EB 
39192     99 EB A3 EB 
39196     DD 05 E5 05 
3919a     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
3919e     DB 05 D8 05 
391a2     D5 05 D1 05 
391a6     D0 05 CB 05 
391aa     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
391ae     0C EC BB EB 
391b2     B3 EB BB EB 
391b6     C5 EB D0 EB 
391ba     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
391be     E4 F7 2C 06 
391c2     28 06 24 06 
391c6     22 06 1F 06 
391ca     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
391ce     16 06 14 06 
391d2     0F 06 D0 F3 
391d6     65 ED 2D EC 
391da     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
391de     01 EC 0A EC 
391e2     14 EC 1E EC 
391e6     29 EC FB 03 
391ea     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
391ee     63 06 60 06 
391f2     5E 06 59 06 
391f6     58 06 54 06 
391fa     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
391fe     69 F1 21 ED 
39202     55 EC 33 EC 
39206     36 EC 40 EC 
3920a     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
3920e     5C EC 68 EC 
39212     92 02 D9 02 
39216     D7 02 D7 02 
3921a     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
3921e     D1 02 D1 02 
39222     CE 02 CD 02 
39226     5D FC 80 EF 
3922a     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
3922e     83 EC 8A EC 
39232     93 EC 9C EC 
39236     A5 EC B1 EC 
3923a     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3923e     2B 03 2A 03 
39242     29 03 26 03 
39246     25 03 24 03 
3924a     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
3924e     1F 03 70 F7 
39252     D0 EE 27 ED 
39256     DB EC D4 EC 
3925a     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3925e     F0 EC FA EC 
39262     02 ED F9 F4 
39266     7B 03 7C 03 
3926a     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
3926e     75 03 73 03 
39272     72 03 70 03 
39276     6D 03 6C 03 
3927a     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
3927e     54 ED 22 ED 
39282     22 ED 2C ED 
39286     35 ED 3F ED 
3928a     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
3928e     14 01 C3 03 
39292     C1 03 C0 03 
39296     5F 01 A5 00 
3929a     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
3929e     7B 00 7C 00 
392a2     20 00 85 F1 
392a6     2A EE 89 ED 
392aa     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
392ae     80 ED 87 ED 
392b2     90 ED 9A ED 
392b6     A3 ED 73 00 
392ba     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
392be     D0 00 D0 00 
392c2     D0 00 D0 00 
392c6     D0 00 CF 00 
392ca     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
392ce     80 F0 3D EE 
392d2     D5 ED C7 ED 
392d6     CD ED D6 ED 
392da     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
392de     F2 ED FA ED 
392e2     1D 01 29 01 
392e6     27 01 27 01 
392ea     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
392ee     25 01 26 01 
392f2     26 01 23 01 
392f6     D0 F7 EC EF 
392fa     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
392fe     1C EE 24 EE 
39302     2D EE 37 EE 
39306     40 EE 47 EE 
3930a     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
3930e     7D 01 7B 01 
39312     7A 01 7A 01 
39316     79 01 78 01 
3931a     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
3931e     84 FE DE F3 
39322     6C EF 93 EE 
39326     72 EE 72 EE 
3932a     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
3932e     8B EE 95 EE 
39332     9E EE 15 FC 
39336     67 FE 67 FE 
3933a     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3933e     6B FE 6B FE 
39342     6D FE 6D FE 
39346     6D FE 6F FE 
3934a     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
3934e     DF EE CC EE 
39352     CF EE D9 EE 
39356     E1 EE EA EE 
3935a     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3935e     5A FE C4 FE 
39362     C3 FE C5 FE 
39366     C6 FE C6 FE 
3936a     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
3936e     C8 FE C7 FE 
39372     DA FB 85 F1 
39376     8D EF 31 EF 
3937a     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
3937e     34 EF 3E EF 
39382     46 EF 4F EF 
39386     57 EF 0D FF 
3938a     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
3938e     1F FF 1F FF 
39392     21 FF 21 FF 
39396     21 FF 21 FF 
3939a     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
3939e     15 F1 BE EF 
393a2     84 EF 7E EF 
393a6     88 EF 8F EF 
393aa     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
393ae     A9 EF 06 F2 
393b2     A6 FC AB FC 
393b6     AD FC AE FC 
393ba     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
393be     B2 FC B4 FC 
393c2     B6 FC B7 FC 
393c6     8B F4 BD F0 
393ca     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
393ce     E4 EF EE EF 
393d2     F6 EF FD EF 
393d6     04 F0 0E F0 
393da     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
393de     0B FD 0D FD 
393e2     0F FD 11 FD 
393e6     11 FD 13 FD 
393ea     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
393ee     17 FD 64 F3 
393f2     CD F0 52 F0 
393f6     41 F0 45 F0 
393fa     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
393fe     5B F0 64 F0 
39402     6D F0 FB FC 
39406     65 FD 68 FD 
3940a     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
3940e     6C FD 6D FD 
39412     6F FD 70 FD 
39416     72 FD B3 FB 
3941a     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
3941e     A4 F0 99 F0 
39422     A0 F0 A8 F0 
39426     AE F0 B9 F0 
3942a     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
3942e     CB FB DD FB 
39432     DE FB E0 FB 
39436     E3 FB E3 FB 
3943a     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
3943e     E9 FB EC FB 
39442     62 F7 27 F2 
39446     2A F1 FF F0 
3944a     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
3944e     0C F1 13 F1 
39452     1B F1 23 F1 
39456     33 F2 3C FC 
3945a     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
3945e     42 FC 45 FC 
39462     47 FC 48 FC 
39466     4A FC 4C FC 
3946a     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
3946e     20 F2 77 F1 
39472     5C F1 5F F1 
39476     64 F1 6C F1 
3947a     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
3947e     83 F1 DC F8 
39482     9A FC 9A FC 
39486     9B FC 9E FC 
3948a     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
3948e     A3 FC A4 FC 
39492     A6 FC A9 FC 
39496     90 F4 33 F2 
3949a     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
3949e     BA F1 BF F1 
394a2     C7 F1 CE F1 
394a6     D6 F1 DC F1 
394aa     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
394ae     F3 FC F5 FC 
394b2     FE FB 79 FB 
394b6     62 FB 5F FB 
394ba     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
394be     6F FA AF F3 
394c2     53 F2 12 F2 
394c6     0F F2 15 F2 
394ca     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
394ce     2A F2 32 F2 
394d2     38 F2 9A FB 
394d6     AF FB B1 FB 
394da     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
394de     B7 FB B8 FB 
394e2     BA FB BC FB 
394e6     C1 FB 3B F8 
394ea     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
394ee     6E F2 6C F2 
394f2     74 F2 7A F2 
394f6     81 F2 87 F2 
394fa     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
394fe     06 FC 09 FC 
39502     0C FC 0E FC 
39506     0F FC 12 FC 
3950a     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
3950e     17 FC 1A FC 
39512     B2 F6 7B F3 
39516     DD F2 C5 F2 
3951a     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
3951e     D4 F2 DB F2 
39522     E0 F2 E8 F2 
39526     28 F8 60 FC 
3952a     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
3952e     64 FC 66 FC 
39532     68 FC 6A FC 
39536     6D FC 52 FC 
3953a     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
3953e     78 F3 24 F3 
39542     1A F3 1E F3 
39546     24 F3 2A F3 
3954a     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
3954e     3D F3 80 FA 
39552     0C FB 0F FB 
39556     10 FB 14 FB 
3955a     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
3955e     1B FB 1D FB 
39562     1F FB 92 FA 
39566     DE F4 AE F3 
3956a     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3956e     79 F3 7E F3 
39572     84 F3 8C F3 
39576     92 F3 97 F3 
3957a     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3957e     67 FB 69 FB 
39582     6B FB 6F FB 
39586     71 FB 72 FB 
3958a     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3958e     E3 F8 BA F4 
39592     EE F3 CC F3 
39596     CA F3 CF F3 
3959a     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3959e     E2 F3 E8 F3 
395a2     ED F3 B7 FB 
395a6     BC FB BE FB 
395aa     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
395ae     C4 FB C6 FB 
395b2     C8 FB C9 FB 
395b6     CC FB 8F F7 
395ba     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
395be     1E F4 1E F4 
395c2     24 F4 2A F4 
395c6     30 F4 38 F4 
395ca     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
395ce     AD FA B1 FA 
395d2     B4 FA B6 FA 
395d6     BA FA BB FA 
395da     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
395de     C2 FA C6 FA 
395e2     55 F6 C6 F4 
395e6     7D F4 72 F4 
395ea     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
395ee     83 F4 89 F4 
395f2     8F F4 94 F4 
395f6     66 FA 03 FB 
395fa     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
395fe     0A FB 0E FB 
39602     10 FB 11 FB 
39606     16 FB 18 FB 
3960a     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
3960e     F9 F4 CA F4 
39612     C5 F4 CB F4 
39616     D1 F4 D7 F4 
3961a     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
3961e     E8 F4 3F FB 
39622     56 FB 58 FB 
39626     5A FB 5E FB 
3962a     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
3962e     64 FB 64 FB 
39632     69 FB 99 F9 
39636     E9 F5 33 F5 
3963a     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
3963e     1D F5 22 F5 
39642     27 F5 2E F5 
39646     32 F5 37 F5 
3964a     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
3964e     BC FA BC FA 
39652     C1 FA C2 FA 
39656     C4 FA C8 FA 
3965a     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
3965e     F9 F7 DB F5 
39662     78 F5 69 F5 
39666     6A F5 70 F5 
3966a     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
3966e     7F F5 85 F5 
39672     6E F7 06 FB 
39676     0A FB 0B FB 
3967a     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
3967e     14 FB 15 FB 
39682     18 FB 1B FB 
39686     1D FB 70 F7 
3968a     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
3968e     B6 F5 BB F5 
39692     C0 F5 C6 F5 
39696     CA F5 CF F5 
3969a     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
3969e     54 FB 56 FB 
396a2     5A FB 5B FB 
396a6     5E FB 5F FB 
396aa     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
396ae     67 FB 52 FB 
396b2     29 F7 33 F6 
396b6     06 F6 02 F6 
396ba     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
396be     10 F6 16 F6 
396c2     1A F6 1F F6 
396c6     81 FB 9F FB 
396ca     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
396ce     51 FB F2 FA 
396d2     E3 FA E3 FA 
396d6     E5 FA E9 FA 
396da     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
396de     64 F6 4D F6 
396e2     4D F6 53 F6 
396e6     57 F6 5C F6 
396ea     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
396ee     6A F6 19 FB 
396f2     1E FB 22 FB 
396f6     23 FB 24 FB 
396fa     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
396fe     2C FB 2E FB 
39702     32 FB F0 F8 
39706     01 F7 A5 F6 
3970a     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
3970e     9F F6 A3 F6 
39712     A6 F6 AC F6 
39716     B0 F6 EB F7 
3971a     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
3971e     68 FB 6C FB 
39722     6E FB 71 FB 
39726     72 FB 74 FB 
3972a     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
3972e     71 F8 21 F7 
39732     E5 F6 DD F6 
39736     E1 F6 E6 F6 
3973a     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
3973e     F5 F6 F7 F6 
39742     F7 FA AB FB 
39746     AD FB AF FB 
3974a     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
3974e     B6 FB B9 FB 
39752     BB FB BC FB 
39756     21 FB 07 F8 
3975a     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
3975e     22 F7 26 F7 
39762     2B F7 2E F7 
39766     34 F7 38 F7 
3976a     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
3976e     13 FB 16 FB 
39772     17 FB 1B FB 
39776     1E FB 20 FB 
3977a     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
3977e     26 FB 77 FA 
39782     F3 F7 7C F7 
39786     67 F7 6A F7 
3978a     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
3978e     74 F7 7A F7 
39792     7E F7 82 F7 
39796     53 FB 5A FB 
3979a     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
3979e     5F FB 63 FB 
397a2     65 FB 67 FB 
397a6     69 FB 6A FB 
397aa     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
397ae     B5 F7 A9 F7 
397b2     AD F7 B0 F7 
397b6     B5 F7 B8 F7 
397ba     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
397be     6E F8 99 FB 
397c2     9C FB 9D FB 
397c6     9F FB A4 FB 
397ca     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
397ce     A9 FB AB FB 
397d2     AD FB 46 F9 
397d6     26 F8 F0 F7 
397da     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
397de     F4 F7 F8 F7 
397e2     FB F7 FF F7 
397e6     03 F8 65 FA 
397ea     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
397ee     2B FB 2F FB 
397f2     30 FB 32 FB 
397f6     34 FB 38 FB 
397fa     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
397fe     E9 F8 4A F8 
39802     2E F8 2C F8 
39806     2F F8 36 F8 
3980a     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
3980e     41 F8 44 F8 
39812     4A FB 67 FB 
39816     68 FB 6B FB 
3981a     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
3981e     73 FB 74 FB 
39822     78 FB 7A FB 
39826     14 FB E7 F8 
3982a     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
3982e     6D F8 70 F8 
39832     73 F8 78 F8 
39836     7C F8 80 F8 
3983a     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
3983e     A6 FB A7 FB 
39842     A9 FB AC FB 
39846     AF FB B1 FB 
3984a     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3984e     B7 FB 73 FA 
39852     F8 F8 B4 F8 
39856     A9 F8 AB F8 
3985a     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
3985e     B4 F8 B8 F8 
39862     BB F8 FA F8 
39866     64 FB 65 FB 
3986a     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
3986e     6D FB 6F FB 
39872     70 FB 74 FB 
39876     77 FB 77 FB 
3987a     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
3987e     E9 F8 E4 F8 
39882     E8 F8 EB F8 
39886     EE F8 F2 F8 
3988a     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
3988e     B5 FA 9F FB 
39892     A1 FB A4 FB 
39896     A5 FB A9 FB 
3989a     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
3989e     AE FB B1 FB 
398a2     B2 FB C7 F9 
398a6     39 F9 22 F9 
398aa     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
398ae     26 F9 2A F9 
398b2     2E F9 32 F9 
398b6     33 F9 BA FB 
398ba     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
398be     DE FB E1 FB 
398c2     E2 FB E4 FB 
398c6     E5 FB E7 FB 
398ca     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
398ce     C5 F9 67 F9 
398d2     57 F9 56 F9 
398d6     5B F9 5F F9 
398da     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
398de     68 F9 6C F9 
398e2     0B FC 11 FC 
398e6     14 FC 15 FC 
398ea     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
398ee     B5 FB B5 FB 
398f2     B6 FB B8 FB 
398f6     E9 FA C8 F9 
398fa     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
398fe     90 F9 94 F9 
39902     95 F9 99 F9 
39906     9D F9 9F F9 
3990a     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
3990e     DE FB DF FB 
39912     E2 FB E4 FB 
39916     E6 FB E8 FB 
3991a     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
3991e     EF FB AC FA 
39922     E9 F9 C7 F9 
39926     C3 F9 C8 F9 
3992a     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
3992e     D0 F9 D4 F9 
39932     D6 F9 0E FB 
39936     11 FC 13 FC 
3993a     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
3993e     19 FC 1B FC 
39942     1D FC 1E FC 
39946     21 FC 22 FC 
3994a     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
3994e     F7 F9 F7 F9 
39952     FB F9 FE F9 
39956     00 FA 03 FA 
3995a     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
3995e     1B FC 45 FC 
39962     46 FC 48 FC 
39966     4A FC 4B FC 
3996a     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
3996e     52 FC 54 FC 
39972     F3 FB 82 FA 
39976     35 FA 28 FA 
3997a     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
3997e     31 FA 32 FA 
39982     37 FA 37 FA 
39986     3C FA 00 FC 
3998a     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
3998e     09 FC 0B FC 
39992     0F FC 12 FC 
39996     12 FC 15 FC 
3999a     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
3999e     8D FA 60 FA 
399a2     5B FA 5C FA 
399a6     60 FA 61 FA 
399aa     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
399ae     6C FA 6D FA 
399b2     37 FC 3A FC 
399b6     3B FC 3D FC 
399ba     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
399be     43 FC 44 FC 
399c2     45 FC 47 FC 
399c6     51 FB AB FA 
399ca     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
399ce     8E FA 91 FA 
399d2     93 FA 95 FA 
399d6     98 FA 9B FA 
399da     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
399de     68 FC 6A FC 
399e2     6C FC 6E FC 
399e6     70 FC 72 FC 
399ea     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
399ee     76 FC 3B FB 
399f2     D0 FA BB FA 
399f6     B9 FA BD FA 
399fa     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
399fe     C4 FA C6 FA 
39a02     CA FA 13 FC 
39a06     3A FC 3A FC 
39a0a     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
39a0e     41 FC 43 FC 
39a12     44 FC 47 FC 
39a16     48 FC 3C FC 
39a1a     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
39a1e     E6 FA E8 FA 
39a22     EB FA EE FA 
39a26     F0 FA F2 FA 
39a2a     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
39a2e     61 FC 66 FC 
39a32     68 FC 6B FC 
39a36     6C FC 6E FC 
39a3a     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
39a3e     73 FC 75 FC 
39a42     13 FC 3F FB 
39a46     17 FB 12 FB 
39a4a     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
39a4e     1A FB 1D FB 
39a52     1F FB 20 FB 
39a56     23 FB 92 FC 
39a5a     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
39a5e     96 FC 97 FC 
39a62     9A FC 9C FC 
39a66     9E FC 9F FC 
39a6a     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
39a6e     5A FB 41 FB 
39a72     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
39a76     73 32 00 04 
39a7a     00 00 10 00 
39a7e     00 00 00 00 
39a82     00 00 00 00 | atari2 file "atari2.s2"
39a86     43 87 43 87 
39a8a     43 87 44 87 
39a8e     43 87 44 87 
39a92     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
39a96     43 87 43 87 
39a9a     43 87 44 87 
39a9e     43 87 43 87 
39aa2     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39aa6     44 87 43 87 
39aaa     44 87 43 87 
39aae     43 87 43 87 
39ab2     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39ab6     43 87 43 87 
39aba     44 87 43 87 
39abe     44 87 44 87 
39ac2     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
39ac6     43 87 43 87 
39aca     44 87 43 87 
39ace     43 87 42 87 
39ad2     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
39ad6     43 87 43 87 
39ada     43 87 43 87 
39ade     44 87 43 87 
39ae2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
39ae6     44 87 44 87 
39aea     43 87 44 87 
39aee     43 87 44 87 
39af2     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
39af6     44 87 43 87 
39afa     44 87 44 87 
39afe     43 87 43 87 
39b02     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39b06     43 87 44 87 
39b0a     44 87 43 87 
39b0e     43 87 44 87 
39b12     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
39b16     43 87 43 87 
39b1a     43 87 43 87 
39b1e     43 87 43 87 
39b22     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
39b26     42 87 43 87 
39b2a     44 87 42 87 
39b2e     43 87 43 87 
39b32     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
39b36     43 87 44 87 
39b3a     44 87 43 87 
39b3e     43 87 43 87 
39b42     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39b46     43 87 5C 87 
39b4a     EE 86 AC 87 
39b4e     4C 7C A3 78 
39b52     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
39b56     BC 78 BB 78 
39b5a     BD 78 BC 78 
39b5e     BB 78 BD 78 
39b62     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
39b66     BB 78 BB 78 
39b6a     BC 78 BC 78 
39b6e     BC 78 BB 78 
39b72     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39b76     BC 78 BC 78 
39b7a     BC 78 BC 78 
39b7e     BC 78 BC 78 
39b82     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39b86     BB 78 BC 78 
39b8a     A0 78 4C 7C 
39b8e     11 7A 29 89 
39b92     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
39b96     44 87 43 87 
39b9a     44 87 43 87 
39b9e     43 87 42 87 
39ba2     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
39ba6     43 87 43 87 
39baa     44 87 ED 85 
39bae     71 85 52 79 
39bb2     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
39bb6     BC 78 BC 78 
39bba     BC 78 BC 78 
39bbe     BC 78 BC 78 
39bc2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39bc6     BC 78 BC 78 
39bca     BC 78 A0 78 
39bce     CF 7A B9 81 
39bd2     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
39bd6     44 87 43 87 
39bda     43 87 44 87 
39bde     43 87 44 87 
39be2     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
39be6     43 87 43 87 
39bea     43 87 43 87 
39bee     44 87 43 87 
39bf2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
39bf6     43 87 43 87 
39bfa     44 87 43 87 
39bfe     44 87 43 87 
39c02     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
39c06     44 87 43 87 
39c0a     43 87 43 87 
39c0e     5A 87 39 81 
39c12     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
39c16     A5 78 BC 78 
39c1a     BB 78 BC 78 
39c1e     BB 78 BC 78 
39c22     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
39c26     BC 78 BC 78 
39c2a     BC 78 BC 78 
39c2e     BC 78 8F 79 
39c32     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
39c36     09 85 47 87 
39c3a     43 87 43 87 
39c3e     42 87 42 87 
39c42     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
39c46     43 87 43 87 
39c4a     43 87 43 87 
39c4e     43 87 44 87 
39c52     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39c56     43 87 43 87 
39c5a     44 87 43 87 
39c5e     42 87 43 87 
39c62     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
39c66     44 87 43 87 
39c6a     43 87 43 87 
39c6e     44 87 44 87 
39c72     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
39c76     94 78 55 7A 
39c7a     B9 78 BC 78 
39c7e     BC 78 BC 78 
39c82     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39c86     BC 78 BB 78 
39c8a     BC 78 BC 78 
39c8e     BC 78 BC 78 
39c92     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39c96     BB 78 BC 78 
39c9a     BC 78 BC 78 
39c9e     BB 78 BC 78 
39ca2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39ca6     BC 78 BC 78 
39caa     BD 78 BC 78 
39cae     BC 78 BB 78 
39cb2     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
39cb6     94 78 B3 84 
39cba     36 84 4A 87 
39cbe     43 87 43 87 
39cc2     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
39cc6     43 87 44 87 
39cca     43 87 43 87 
39cce     43 87 43 87 
39cd2     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39cd6     43 87 44 87 
39cda     43 87 44 87 
39cde     43 87 43 87 
39ce2     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
39ce6     43 87 43 87 
39cea     43 87 45 87 
39cee     43 87 43 87 
39cf2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
39cf6     43 87 44 87 
39cfa     44 87 44 87 
39cfe     43 87 43 87 
39d02     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
39d06     43 87 42 87 
39d0a     43 87 43 87 
39d0e     44 87 43 87 
39d12     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
39d16     54 87 3C 82 
39d1a     36 83 52 79 
39d1e     C6 78 BC 78 
39d22     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
39d26     BB 78 BB 78 
39d2a     BC 78 BC 78 
39d2e     BC 78 BC 78 
39d32     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
39d36     BD 78 ED 78 
39d3a     1B 79 F4 83 
39d3e     4D 83 4E 87 
39d42     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
39d46     44 87 43 87 
39d4a     42 87 44 87 
39d4e     43 87 42 87 
39d52     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
39d56     43 87 54 87 
39d5a     26 82 B3 84 
39d5e     D6 77 BB 78 
39d62     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
39d66     BC 78 BB 78 
39d6a     BB 78 BB 78 
39d6e     BB 78 BB 78 
39d72     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
39d76     BC 78 BC 78 
39d7a     26 79 18 75 
39d7e     36 83 1F 84 
39d82     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
39d86     43 87 43 87 
39d8a     43 87 43 87 
39d8e     43 87 44 87 
39d92     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39d96     43 87 44 87 
39d9a     44 87 43 87 
39d9e     43 87 43 87 
39da2     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
39da6     43 87 43 87 
39daa     43 87 43 87 
39dae     44 87 44 87 
39db2     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
39db6     44 87 43 87 
39dba     43 87 43 87 
39dbe     43 87 44 87 
39dc2     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
39dc6     44 87 44 87 
39dca     44 87 43 87 
39dce     44 87 43 87 
39dd2     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
39dd6     43 87 43 87 
39dda     43 87 44 87 
39dde     44 87 43 87 
39de2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
39de6     43 87 43 87 
39dea     43 87 43 87 
39dee     43 87 44 87 
39df2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39df6     43 87 44 87 
39dfa     43 87 44 87 
39dfe     19 87 7D 86 
39e02     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
39e06     B1 78 BC 78 
39e0a     BC 78 BC 78 
39e0e     BC 78 BC 78 
39e12     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39e16     BC 78 BC 78 
39e1a     BD 78 BC 78 
39e1e     B7 78 3B 7B 
39e22     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
39e26     96 86 44 87 
39e2a     43 87 43 87 
39e2e     43 87 43 87 
39e32     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
39e36     44 87 44 87 
39e3a     43 87 44 87 
39e3e     43 87 44 87 
39e42     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
39e46     43 87 44 87 
39e4a     43 87 44 87 
39e4e     43 87 44 87 
39e52     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
39e56     43 87 44 87 
39e5a     43 87 43 87 
39e5e     44 87 43 87 
39e62     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
39e66     44 87 44 87 
39e6a     43 87 43 87 
39e6e     43 87 44 87 
39e72     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39e76     43 87 43 87 
39e7a     43 87 43 87 
39e7e     44 87 44 87 
39e82     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
39e86     36 83 CF 7A 
39e8a     AB 78 BB 78 
39e8e     BC 78 BC 78 
39e92     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
39e96     BB 78 BC 78 
39e9a     BC 78 BC 78 
39e9e     BC 78 BC 78 
39ea2     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39ea6     BC 78 BC 78 
39eaa     BC 78 BB 78 
39eae     BC 78 BC 78 
39eb2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39eb6     BB 78 BC 78 
39eba     BB 78 BC 78 
39ebe     BC 78 BD 78 
39ec2     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
39ec6     BC 78 BC 78 
39eca     BC 78 BC 78 
39ece     BC 78 BD 78 
39ed2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
39ed6     BC 78 BB 78 
39eda     BC 78 BB 78 
39ede     BB 78 BC 78 
39ee2     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
39ee6     BC 78 BC 78 
39eea     BC 78 BC 78 
39eee     BC 78 BB 78 
39ef2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
39ef6     BC 78 BC 78 
39efa     BC 78 BD 78 
39efe     BB 78 BC 78 
39f02     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
39f06     BC 78 BC 78 
39f0a     BC 78 BB 78 
39f0e     BC 78 BB 78 
39f12     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
39f16     BB 78 BC 78 
39f1a     BC 78 BC 78 
39f1e     BC 78 BB 78 
39f22     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39f26     BC 78 BC 78 
39f2a     BC 78 BB 78 
39f2e     BC 78 BB 78 
39f32     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39f36     BC 78 BC 78 
39f3a     BC 78 BC 78 
39f3e     BB 78 BC 78 
39f42     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
39f46     BC 78 9F 78 
39f4a     52 79 B3 84 
39f4e     2F 86 60 87 
39f52     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
39f56     44 87 43 87 
39f5a     43 87 43 87 
39f5e     43 87 43 87 
39f62     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39f66     43 87 43 87 
39f6a     43 87 44 87 
39f6e     43 87 43 87 
39f72     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39f76     43 87 43 87 
39f7a     43 87 43 87 
39f7e     43 87 44 87 
39f82     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
39f86     44 87 44 87 
39f8a     5E 87 BC 80 
39f8e     FB 80 94 78 
39f92     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
39f96     BD 78 BC 78 
39f9a     BB 78 BC 78 
39f9e     BB 78 BB 78 
39fa2     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
39fa6     BC 78 BB 78 
39faa     BB 78 6B 79 
39fae     D6 77 AC 87 
39fb2     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
39fb6     43 87 44 87 
39fba     43 87 43 87 
39fbe     44 87 43 87 
39fc2     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
39fc6     43 87 44 87 
39fca     43 87 5C 87 
39fce     E7 80 00 80 
39fd2     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
39fd6     BC 78 BD 78 
39fda     BC 78 BC 78 
39fde     BC 78 BB 78 
39fe2     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39fe6     BC 78 BC 78 
39fea     BB 78 BC 78 
39fee     BB 78 BC 78 
39ff2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39ff6     BB 78 BC 78 
39ffa     BC 78 BC 78 
39ffe     BC 78 BC 78 
3a002     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3a006     BC 78 BC 78 
3a00a     BC 78 BC 78 
3a00e     A0 78 8D 7B 
3a012     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
3a016     60 87 43 87 
3a01a     44 87 44 87 
3a01e     43 87 43 87 
3a022     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
3a026     44 87 43 87 
3a02a     43 87 43 87 
3a02e     44 87 73 86 
3a032     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
3a036     51 7B B6 78 
3a03a     BC 78 BD 78 
3a03e     BC 78 BC 78 
3a042     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3a046     BB 78 BC 78 
3a04a     BD 78 BB 78 
3a04e     BC 78 BB 78 
3a052     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3a056     BC 78 BC 78 
3a05a     BC 78 BC 78 
3a05e     BB 78 BC 78 
3a062     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3a066     BC 78 BB 78 
3a06a     BB 78 BC 78 
3a06e     BC 78 BB 78 
3a072     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
3a076     22 8C AF 84 
3a07a     48 87 43 87 
3a07e     44 87 43 87 
3a082     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
3a086     43 87 42 87 
3a08a     43 87 43 87 
3a08e     44 87 43 87 
3a092     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3a096     43 87 43 87 
3a09a     44 87 44 87 
3a09e     43 87 43 87 
3a0a2     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3a0a6     43 87 43 87 
3a0aa     43 87 43 87 
3a0ae     44 87 43 87 
3a0b2     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
3a0b6     9F 8B D6 77 
3a0ba     16 7C B3 78 
3a0be     BC 78 BB 78 
3a0c2     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3a0c6     BB 78 BC 78 
3a0ca     BB 78 BC 78 
3a0ce     BC 78 BC 78 
3a0d2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3a0d6     BC 78 BB 78 
3a0da     BB 78 BC 78 
3a0de     BB 78 BC 78 
3a0e2     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
3a0e6     BB 78 BB 78 
3a0ea     BC 78 BC 78 
3a0ee     BC 78 BB 78 
3a0f2     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
3a0f6     BC 78 BC 78 
3a0fa     BC 78 BD 78 
3a0fe     BB 78 BC 78 
3a102     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
3a106     BC 78 BC 78 
3a10a     BC 78 BB 78 
3a10e     BC 78 BC 78 
3a112     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3a116     A8 78 54 7E 
3a11a     F4 83 17 82 
3a11e     50 87 43 87 
3a122     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
3a126     44 87 43 87 
3a12a     44 87 43 87 
3a12e     43 87 44 87 
3a132     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3a136     43 87 28 87 
3a13a     20 85 CF 7A 
3a13e     70 7D AD 78 
3a142     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
3a146     BB 78 BC 78 
3a14a     BC 78 BC 78 
3a14e     BB 78 BB 78 
3a152     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
3a156     BB 78 B2 78 
3a15a     9A 7C CF 7A 
3a15e     4A 87 0D 87 
3a162     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
3a166     43 87 44 87 
3a16a     43 87 44 87 
3a16e     43 87 43 87 
3a172     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
3a176     44 87 43 87 
3a17a     28 87 51 85 
3a17e     11 7A 1E 7D 
3a182     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
3a186     BC 78 BB 78 
3a18a     BC 78 BC 78 
3a18e     BC 78 BC 78 
3a192     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3a196     BB 78 BC 78 
3a19a     BB 78 BC 78 
3a19e     BC 78 BC 78 
3a1a2     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3a1a6     BB 78 BC 78 
3a1aa     BC 78 BC 78 
3a1ae     BD 78 BB 78 
3a1b2     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
3a1b6     BC 78 BB 78 
3a1ba     BC 78 BC 78 
3a1be     BC 78 BB 78 
3a1c2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a1c6     BC 78 BC 78 
3a1ca     BC 78 BC 78 
3a1ce     BB 78 BC 78 
3a1d2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3a1d6     BC 78 BD 78 
3a1da     BC 78 BC 78 
3a1de     BC 78 BB 78 
3a1e2     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a1e6     BC 78 BB 78 
3a1ea     BB 78 BC 78 
3a1ee     BC 78 BB 78 
3a1f2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a1f6     BB 78 BB 78 
3a1fa     BB 78 BC 78 
3a1fe     B6 78 48 7D 
3a202     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
3a206     56 87 43 87 
3a20a     42 87 44 87 
3a20e     44 87 43 87 
3a212     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
3a216     43 87 44 87 
3a21a     43 87 44 87 
3a21e     4C 87 7E 83 
3a222     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
3a226     F7 78 BC 78 
3a22a     BC 78 BB 78 
3a22e     BB 78 BC 78 
3a232     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3a236     BC 78 BB 78 
3a23a     BC 78 BC 78 
3a23e     BB 78 BC 78 
3a242     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3a246     BB 78 BC 78 
3a24a     BC 78 BC 78 
3a24e     BC 78 BB 78 
3a252     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a256     BC 78 BC 78 
3a25a     BC 78 BC 78 
3a25e     BC 78 BB 78 
3a262     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a266     BC 78 BB 78 
3a26a     BB 78 BC 78 
3a26e     BC 78 BB 78 
3a272     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3a276     BC 78 BC 78 
3a27a     BB 78 BC 78 
3a27e     BC 78 BC 78 
3a282     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
3a286     73 32 00 04 
3a28a     00 00 10 00 
3a28e     00 00 00 00 
3a292     00 00 00 00 | atari12 file "atari12.s2"
3a296     00 6D 00 6D 
3a29a     00 6D 00 6D 
3a29e     00 6D 00 6D 
3a2a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a2a6     00 6D 00 6D 
3a2aa     00 6D 00 6D 
3a2ae     00 6D 00 6D 
3a2b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a2b6     00 6D 00 6D 
3a2ba     00 6D 00 6D 
3a2be     00 6D 00 6D 
3a2c2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a2c6     00 6D 00 6D 
3a2ca     00 6D 00 6D 
3a2ce     00 6D 00 6D 
3a2d2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a2d6     00 6D 00 6D 
3a2da     00 6D 00 6D 
3a2de     00 6D 00 6D 
3a2e2     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
3a2e6     00 6C 00 6C 
3a2ea     00 6C 00 6C 
3a2ee     00 6C 00 6C 
3a2f2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a2f6     00 6C 00 6C 
3a2fa     00 6C 00 6C 
3a2fe     00 6C 00 6C 
3a302     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a306     00 6C 00 6C 
3a30a     00 6C 00 6C 
3a30e     00 6C 00 6C 
3a312     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a316     00 6C 00 6C 
3a31a     00 6C 00 6C 
3a31e     00 6C 00 6C 
3a322     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a326     00 6C 00 6C 
3a32a     00 6C 00 6C 
3a32e     00 6C 00 6C 
3a332     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a336     00 6C 00 6C 
3a33a     00 6C 00 6C 
3a33e     00 6C 00 6C 
3a342     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a346     00 6C 00 6C 
3a34a     00 6C 00 6C 
3a34e     00 6C 00 6C 
3a352     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a356     00 6C 00 6C 
3a35a     00 6C 00 6C 
3a35e     00 6C 00 6C 
3a362     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a366     00 6C 00 6C 
3a36a     00 6C 00 6C 
3a36e     00 6C 00 6C 
3a372     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a376     00 6C 00 6C 
3a37a     00 6C 00 6C 
3a37e     00 6C 00 6C 
3a382     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a386     00 6C 00 6C 
3a38a     00 6C 00 6C 
3a38e     00 6C 00 6C 
3a392     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a396     00 6C 00 6B 
3a39a     00 6B 00 6B 
3a39e     00 6B 00 6B 
3a3a2     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a3a6     00 6B 00 6B 
3a3aa     00 6B 00 6B 
3a3ae     00 6B 00 6B 
3a3b2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a3b6     00 6B 00 6B 
3a3ba     00 6B 00 6B 
3a3be     00 6B 00 6B 
3a3c2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a3c6     00 6B 00 6B 
3a3ca     00 6B 00 6B 
3a3ce     00 6B 00 6B 
3a3d2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a3d6     00 6B 00 6B 
3a3da     00 6B 00 6B 
3a3de     00 6B 00 6B 
3a3e2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a3e6     00 6B 00 6B 
3a3ea     00 6B 00 6B 
3a3ee     00 6B 00 6B 
3a3f2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a3f6     00 6B 00 6B 
3a3fa     00 6B 00 6B 
3a3fe     00 6B 00 6B 
3a402     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a406     00 6B 00 6B 
3a40a     00 6B 00 6B 
3a40e     00 6B 00 6B 
3a412     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a416     00 6B 00 6B 
3a41a     00 6B 00 6B 
3a41e     00 6B 00 6B 
3a422     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3a426     00 6B 00 6B 
3a42a     00 6B 00 6B 
3a42e     00 6A 00 9D 
3a432     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
3a436     00 9E 00 9E 
3a43a     00 9E 00 9E 
3a43e     00 9E 00 9E 
3a442     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a446     00 9E 00 9E 
3a44a     00 9E 00 9E 
3a44e     00 9E 00 9E 
3a452     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a456     00 9E 00 9E 
3a45a     00 9E 00 9E 
3a45e     00 9E 00 9E 
3a462     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a466     00 9E 00 9E 
3a46a     00 9E 00 9E 
3a46e     00 9E 00 9E 
3a472     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a476     00 9E 00 9E 
3a47a     00 9E 00 9E 
3a47e     00 9E 00 9E 
3a482     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a486     00 9E 00 9E 
3a48a     00 9E 00 9E 
3a48e     00 9E 00 9E 
3a492     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a496     00 9E 00 9E 
3a49a     00 9E 00 9E 
3a49e     00 9E 00 9E 
3a4a2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a4a6     00 9E 00 9E 
3a4aa     00 9E 00 9E 
3a4ae     00 9E 00 9E 
3a4b2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3a4b6     00 9E 00 9E 
3a4ba     00 9E 00 9E 
3a4be     00 9E 00 9E 
3a4c2     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
3a4c6     00 9F 00 9F 
3a4ca     00 9F 00 9F 
3a4ce     00 9F 00 9F 
3a4d2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a4d6     00 9F 00 9F 
3a4da     00 9F 00 9F 
3a4de     00 9F 00 9F 
3a4e2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a4e6     00 9F 00 9F 
3a4ea     00 9F 00 9F 
3a4ee     00 9F 00 9F 
3a4f2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a4f6     00 9F 00 9F 
3a4fa     00 9F 00 9F 
3a4fe     00 9F 00 9F 
3a502     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a506     00 9F 00 9F 
3a50a     00 9F 00 9F 
3a50e     00 9F 00 9F 
3a512     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a516     00 9F 00 9F 
3a51a     00 9F 00 9F 
3a51e     00 9F 00 9F 
3a522     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a526     00 9F 00 9F 
3a52a     00 9F 00 9F 
3a52e     00 9F 00 9F 
3a532     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a536     00 9F 00 9F 
3a53a     00 9F 00 9F 
3a53e     00 9F 00 9F 
3a542     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a546     00 9F 00 9F 
3a54a     00 9F 00 9F 
3a54e     00 9F 00 9F 
3a552     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a556     00 9F 00 9F 
3a55a     00 9F 00 9F 
3a55e     00 9F 00 9F 
3a562     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a566     00 9F 00 9F 
3a56a     00 9F 00 9F 
3a56e     00 9F 00 9F 
3a572     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a576     00 9F 00 9F 
3a57a     00 9F 00 9F 
3a57e     00 9F 00 9F 
3a582     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3a586     00 9F 00 9F 
3a58a     00 9F 00 A0 
3a58e     00 A0 00 A0 
3a592     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a596     00 A0 00 A0 
3a59a     00 A0 00 A0 
3a59e     00 A0 00 A0 
3a5a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5a6     00 A0 00 A0 
3a5aa     00 A0 00 A0 
3a5ae     00 A0 00 A0 
3a5b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5b6     00 A0 00 A0 
3a5ba     00 A0 00 A0 
3a5be     00 A0 00 A0 
3a5c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5c6     00 A0 00 A0 
3a5ca     00 A0 00 A0 
3a5ce     00 A0 00 A0 
3a5d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5d6     00 A0 00 A0 
3a5da     00 A0 00 A0 
3a5de     00 A0 00 A0 
3a5e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5e6     00 A0 00 A0 
3a5ea     00 A0 00 A0 
3a5ee     00 A0 00 A0 
3a5f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a5f6     00 A0 00 A0 
3a5fa     00 A0 00 A0 
3a5fe     00 A0 00 A0 
3a602     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a606     00 A0 00 A0 
3a60a     00 A0 00 A0 
3a60e     00 A0 00 A0 
3a612     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a616     00 A0 00 A0 
3a61a     00 A0 00 A0 
3a61e     00 A0 00 A0 
3a622     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a626     00 A0 00 A0 
3a62a     00 A0 00 A0 
3a62e     00 A0 00 A0 
3a632     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a636     00 A0 00 A0 
3a63a     00 A0 00 A0 
3a63e     00 A0 00 A0 
3a642     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a646     00 A0 00 A0 
3a64a     00 A0 00 A0 
3a64e     00 A0 00 A0 
3a652     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
3a656     00 6D 00 6D 
3a65a     00 6D 00 6D 
3a65e     00 6D 00 6D 
3a662     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a666     00 6D 00 6D 
3a66a     00 6D 00 6D 
3a66e     00 6D 00 6D 
3a672     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a676     00 6D 00 6D 
3a67a     00 6D 00 6D 
3a67e     00 6D 00 6D 
3a682     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a686     00 6D 00 6D 
3a68a     00 6D 00 6D 
3a68e     00 6D 00 6D 
3a692     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a696     00 6D 00 6D 
3a69a     00 6D 00 6D 
3a69e     00 6D 00 6D 
3a6a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a6a6     00 6D 00 6D 
3a6aa     00 6D 00 6D 
3a6ae     00 6D 00 6D 
3a6b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a6b6     00 6D 00 6D 
3a6ba     00 6D 00 6D 
3a6be     00 6D 00 6D 
3a6c2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a6c6     00 6D 00 6D 
3a6ca     00 6D 00 6D 
3a6ce     00 6D 00 6D 
3a6d2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a6d6     00 6D 00 6D 
3a6da     00 A0 00 A0 
3a6de     00 A0 00 A0 
3a6e2     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a6e6     00 A0 00 A0 
3a6ea     00 A0 00 A0 
3a6ee     00 A0 00 A0 
3a6f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a6f6     00 A0 00 A0 
3a6fa     00 A0 00 A0 
3a6fe     00 A0 00 A0 
3a702     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a706     00 A0 00 A0 
3a70a     00 A0 00 A0 
3a70e     00 A0 00 A0 
3a712     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a716     00 A0 00 A0 
3a71a     00 A0 00 A0 
3a71e     00 A0 00 A0 
3a722     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a726     00 A0 00 A0 
3a72a     00 A0 00 A0 
3a72e     00 A0 00 A0 
3a732     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a736     00 A0 00 A0 
3a73a     00 A0 00 A0 
3a73e     00 A0 00 A0 
3a742     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a746     00 A0 00 A0 
3a74a     00 A0 00 A0 
3a74e     00 A0 00 A0 
3a752     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a756     00 A0 00 A0 
3a75a     00 A0 00 A0 
3a75e     00 A0 00 A0 
3a762     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
3a766     00 6D 00 6D 
3a76a     00 6D 00 6D 
3a76e     00 6D 00 6D 
3a772     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a776     00 6D 00 6D 
3a77a     00 6D 00 6D 
3a77e     00 6D 00 6D 
3a782     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a786     00 6D 00 6D 
3a78a     00 6D 00 6D 
3a78e     00 6D 00 6D 
3a792     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a796     00 6D 00 6D 
3a79a     00 6D 00 6D 
3a79e     00 6D 00 6D 
3a7a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a7a6     00 6D 00 6D 
3a7aa     00 6D 00 6D 
3a7ae     00 6D 00 6D 
3a7b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a7b6     00 6D 00 6D 
3a7ba     00 6D 00 6D 
3a7be     00 6D 00 6D 
3a7c2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a7c6     00 6D 00 6D 
3a7ca     00 6D 00 6D 
3a7ce     00 6D 00 6D 
3a7d2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a7d6     00 6D 00 6D 
3a7da     00 6D 00 6D 
3a7de     00 6D 00 6D 
3a7e2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a7e6     00 6D 00 6D 
3a7ea     00 6C 00 A0 
3a7ee     00 9F 00 A0 
3a7f2     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
3a7f6     00 A0 00 A0 
3a7fa     00 A0 00 A0 
3a7fe     00 A0 00 A0 
3a802     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a806     00 A0 00 A0 
3a80a     00 A0 00 A0 
3a80e     00 A0 00 A0 
3a812     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a816     00 A0 00 A0 
3a81a     00 A0 00 A0 
3a81e     00 A0 00 A0 
3a822     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a826     00 A0 00 A0 
3a82a     00 A0 00 A0 
3a82e     00 A0 00 A0 
3a832     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a836     00 A0 00 A0 
3a83a     00 A0 00 A0 
3a83e     00 A0 00 A0 
3a842     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a846     00 A0 00 A0 
3a84a     00 A0 00 A0 
3a84e     00 A0 00 A0 
3a852     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a856     00 A0 00 A0 
3a85a     00 A0 00 A0 
3a85e     00 A0 00 A0 
3a862     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a866     00 A0 00 A0 
3a86a     00 A0 00 A0 
3a86e     00 A0 00 A0 
3a872     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a876     00 A0 00 A0 
3a87a     00 A0 00 A0 
3a87e     00 A0 00 A0 
3a882     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a886     00 A0 00 A0 
3a88a     00 A0 00 A0 
3a88e     00 A0 00 A0 
3a892     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a896     00 A0 00 A0 
3a89a     00 A0 00 A0 
3a89e     00 A0 00 A0 
3a8a2     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3a8a6     00 A1 00 A1 
3a8aa     00 A1 00 A1 
3a8ae     00 A1 00 A1 
3a8b2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a8b6     00 A1 00 A1 
3a8ba     00 A1 00 A1 
3a8be     00 A1 00 A1 
3a8c2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a8c6     00 A1 00 A1 
3a8ca     00 A1 00 A1 
3a8ce     00 A1 00 A1 
3a8d2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a8d6     00 A1 00 A1 
3a8da     00 A1 00 A1 
3a8de     00 A1 00 A1 
3a8e2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a8e6     00 A1 00 A1 
3a8ea     00 A1 00 A1 
3a8ee     00 A1 00 A1 
3a8f2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a8f6     00 A1 00 A1 
3a8fa     00 A1 00 A1 
3a8fe     00 6E 00 6E 
3a902     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a906     00 6E 00 6E 
3a90a     00 6E 00 6E 
3a90e     00 6E 00 6E 
3a912     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a916     00 6E 00 6E 
3a91a     00 6E 00 6E 
3a91e     00 6E 00 6E 
3a922     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a926     00 6E 00 6E 
3a92a     00 6E 00 6E 
3a92e     00 6E 00 6E 
3a932     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a936     00 6E 00 6D 
3a93a     00 6D 00 6D 
3a93e     00 6D 00 6D 
3a942     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a946     00 6D 00 6D 
3a94a     00 6D 00 6D 
3a94e     00 6D 00 6D 
3a952     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a956     00 6D 00 6D 
3a95a     00 6D 00 6D 
3a95e     00 6D 00 6D 
3a962     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a966     00 6D 00 6D 
3a96a     00 6D 00 6D 
3a96e     00 6D 00 6D 
3a972     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a976     00 6D 00 6D 
3a97a     00 6D 00 6D 
3a97e     00 6D 00 6D 
3a982     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a986     00 6D 00 6D 
3a98a     00 6D 00 6D 
3a98e     00 6D 00 6D 
3a992     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a996     00 6D 00 6D 
3a99a     00 6D 00 6D 
3a99e     00 6D 00 6D 
3a9a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a9a6     00 6D 00 6D 
3a9aa     00 6D 00 6D 
3a9ae     00 6D 00 6D 
3a9b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a9b6     00 6D 00 6D 
3a9ba     00 6D 00 6D 
3a9be     00 6D 00 6D 
3a9c2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a9c6     00 6D 00 6D 
3a9ca     00 6D 00 6D 
3a9ce     00 6D 00 6D 
3a9d2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a9d6     00 6D 00 6D 
3a9da     00 6D 00 6D 
3a9de     00 6D 00 6D 
3a9e2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a9e6     00 6D 00 6D 
3a9ea     00 6C 00 6C 
3a9ee     00 6C 00 6C 
3a9f2     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a9f6     00 6C 00 6C 
3a9fa     00 6C 00 6C 
3a9fe     00 6C 00 6C 
3aa02     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3aa06     00 6C 00 6C 
3aa0a     00 6C 00 6C 
3aa0e     00 9D 00 9F 
3aa12     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
3aa16     00 9F 00 9F 
3aa1a     00 9F 00 9F 
3aa1e     00 A0 00 A0 
3aa22     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa26     00 A0 00 A0 
3aa2a     00 A0 00 A0 
3aa2e     00 A0 00 A0 
3aa32     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa36     00 A0 00 A0 
3aa3a     00 A0 00 A0 
3aa3e     00 A0 00 A0 
3aa42     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa46     00 A0 00 A0 
3aa4a     00 A0 00 A0 
3aa4e     00 A0 00 A0 
3aa52     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa56     00 A0 00 A0 
3aa5a     00 A0 00 A0 
3aa5e     00 A0 00 A0 
3aa62     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa66     00 A0 00 A0 
3aa6a     00 A0 00 A0 
3aa6e     00 A0 00 A0 
3aa72     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa76     00 A0 00 A0 
3aa7a     00 A0 00 A0 
3aa7e     00 A0 00 A0 
3aa82     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa86     00 A0 00 A0 
3aa8a     00 A0 00 A0 
3aa8e     00 A0 00 A0 
3aa92     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3aa96     01 00 00 00 
3aa9a     00 00 00 00 
3aa9e     00 00 00 00 
3aaa2     00 00 00 00 | mouse  file "mouse2.def"
3aaa6     00 00 00 00 
3aaaa     00 00 00 00 
3aaae     00 00 00 00 
3aab2     00 00 00 00 | 	byte	$00[16]
3aab6     01 01 00 00 
3aaba     00 00 00 00 
3aabe     00 00 00 00 
3aac2     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aac6     00 00 00 00 
3aaca     00 00 00 00 
3aace     00 00 00 00 
3aad2     00 00 00 00 | 	byte	$00[16]
3aad6     01 0D 01 00 
3aada     00 00 00 00 
3aade     00 00 00 00 
3aae2     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aae6     00 00 00 00 
3aaea     00 00 00 00 
3aaee     00 00 00 00 
3aaf2     00 00 00 00 | 	byte	$00[16]
3aaf6     01 0D 0D 01 
3aafa     00 00 00 00 
3aafe     00 00 00 00 
3ab02     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ab06     00 00 00 00 
3ab0a     00 00 00 00 
3ab0e     00 00 00 00 
3ab12     00 00 00 00 | 	byte	$00[16]
3ab16     01 0D 0D 0D 
3ab1a     01 00 00 00 
3ab1e     00 00 00 00 
3ab22     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ab26     00 00 00 00 
3ab2a     00 00 00 00 
3ab2e     00 00 00 00 
3ab32     00 00 00 00 | 	byte	$00[16]
3ab36     01 0D 0D 0D 
3ab3a     0D 01 00 00 
3ab3e     00 00 00 00 
3ab42     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ab46     00 00 00 00 
3ab4a     00 00 00 00 
3ab4e     00 00 00 00 
3ab52     00 00 00 00 | 	byte	$00[16]
3ab56     01 0D 0D 0D 
3ab5a     0D 0D 01 00 
3ab5e     00 00 00 00 
3ab62     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ab66     00 00 00 00 
3ab6a     00 00 00 00 
3ab6e     00 00 00 00 
3ab72     00 00 00 00 | 	byte	$00[16]
3ab76     01 0D 0D 0D 
3ab7a     0D 0D 0D 01 
3ab7e     00 00 00 00 
3ab82     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3ab86     00 00 00 00 
3ab8a     00 00 00 00 
3ab8e     00 00 00 00 
3ab92     00 00 00 00 | 	byte	$00[16]
3ab96     01 0D 0D 0D 
3ab9a     0D 0D 0D 0C 
3ab9e     01 00 00 00 
3aba2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3aba6     00 00 00 00 
3abaa     00 00 00 00 
3abae     00 00 00 00 
3abb2     00 00 00 00 | 	byte	$00[16]
3abb6     01 0D 0D 0D 
3abba     0D 0D 0D 0D 
3abbe     0C 01 00 00 
3abc2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3abc6     00 00 00 00 
3abca     00 00 00 00 
3abce     00 00 00 00 
3abd2     00 00 00 00 | 	byte	$00[16]
3abd6     01 0D 0D 0D 
3abda     0D 0D 0D 0D 
3abde     0D 0C 01 00 
3abe2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
3abe6     00 00 00 00 
3abea     00 00 00 00 
3abee     00 00 00 00 
3abf2     00 00 00 00 | 	byte	$00[16]
3abf6     01 0D 0D 0D 
3abfa     0D 0D 0D 0D 
3abfe     0D 0D 0B 01 
3ac02     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
3ac06     00 00 00 00 
3ac0a     00 00 00 00 
3ac0e     00 00 00 00 
3ac12     00 00 00 00 | 	byte	$00[16]
3ac16     01 0D 0D 0D 
3ac1a     0C 0D 0D 03 
3ac1e     01 01 01 01 
3ac22     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
3ac26     00 00 00 00 
3ac2a     00 00 00 00 
3ac2e     00 00 00 00 
3ac32     00 00 00 00 | 	byte	$00[16]
3ac36     01 0D 0D 0C 
3ac3a     01 09 0D 03 
3ac3e     00 00 00 00 
3ac42     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3ac46     00 00 00 00 
3ac4a     00 00 00 00 
3ac4e     00 00 00 00 
3ac52     00 00 00 00 | 	byte	$00[16]
3ac56     01 0D 0C 01 
3ac5a     00 01 0D 0B 
3ac5e     01 00 00 00 
3ac62     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3ac66     00 00 00 00 
3ac6a     00 00 00 00 
3ac6e     00 00 00 00 
3ac72     00 00 00 00 | 	byte	$00[16]
3ac76     01 0C 01 00 
3ac7a     00 01 0A 0D 
3ac7e     01 00 00 00 
3ac82     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3ac86     00 00 00 00 
3ac8a     00 00 00 00 
3ac8e     00 00 00 00 
3ac92     00 00 00 00 | 	byte	$00[16]
3ac96     01 01 00 00 
3ac9a     00 00 01 0D 
3ac9e     0B 01 00 00 
3aca2     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3aca6     00 00 00 00 
3acaa     00 00 00 00 
3acae     00 00 00 00 
3acb2     00 00 00 00 
3acb6     00 00 00 00 
3acba     00 00       | 	byte	$00[22]
3acbc     01 0B 0D 01 
3acc0     00 00 00 00 
3acc4     00 00 00 00 
3acc8     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3accc     00 00 00 00 
3acd0     00 00 00 00 
3acd4     00 00 00 00 
3acd8     00 00 00 00 
3acdc     00          | 	byte	$00[17]
3acdd     01 01 00 00 
3ace1     00 00 00 00 
3ace5     00 00 00 00 
3ace9     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3aced     00 00 00 00 
      ...             
3ae91     00 00 00 00 
3ae95     00          | 	byte	$00[425]
3ae96                 | 
3ae96     00 00       |              	org
3ae98 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
3ae9c 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
3aea0 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
3aea4 003             | 
3aea4 003 00 30 04 F6 |                 mov     psramaddr,#0
3aea8 004             | 
3aea8 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
3aeac 005 20 00 00 FF 
3aeb0 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
3aeb4 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
3aeb8 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
3aebc 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
3aec0 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
3aec4 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
3aec8 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
3aecc 00d             | 
3aecc 00d 20 00 00 FF 
3aed0 00e 00 30 04 F1 |                 add 	psramaddr,##16384
3aed4 00f E0 03 00 FF 
3aed8 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
3aedc 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
3aee0 012             | 
3aee0 012             |                 
3aee0 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
3aee4 013             |     
3aee4 013 01 2C 60 FD |                 cogid 	t11				' get id
3aee8 014 00 00 EC FC |                 coginit #0,#0				' start the new program
3aeec 015 03 2C 60 FD |                 cogstop t11				' stop the loader
3aef0 016             | 
3aef0 016 00 00 00 00 | t11 		long 	0
3aef4 017 00 FF 07 00 | mailbox 	long 	$7FF00
3aef8 018 00 00 00 00 | psramaddr 	long 	0
3aefc 019 00 00 00 00 | pslockval	long 	0
3af00 01a 00 00 00 00 | cmd             long    0
3af04 01b 00 00 00 00 | buf1            long    0
3af08 01c 00 40 00 00 | buf2            long    16384
3af0c 01d 10 AF 03 00 | 	long	@@@_dat_ + 12612
3af10 01e 50 32 20 52 
3af14 01f 65 74 72 6F 
3af18 020 6D 61 63 68 
3af1c 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
3af20 022 42 41 53 49 
3af24 023 43 20 76 65 
3af28 024 72 73 69 6F 
3af2c 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
3af30 026 34 39 20 62 
3af34 027 65 74 61 20 
3af38 028 31 00 00 00 | 	byte	$34, $39, $20, $62, $65, $74, $61, $20, $31, $00, $00, $00
3af3c 029             | 	alignl
3af3c 029             | _hg010b_spin2_dat_
3af3c 029             | 
3af3c 029 00 00 00 00 
3af40 02a 00 00 00 00 
3af44 02b 00 00 00 00 
3af48 02c 00 00 00 00 
3af4c 02d 00 00 00    | vga_font       file "vgafont.def"
3af4f 02d 7E 81 A5 81 
3af53 02e 81 BD 99 81 
3af57 02f 81 7E 00 00 
3af5b 030 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3af5f 031 7E FF DB FF 
3af63 032 FF C3 E7 FF 
3af67 033 FF 7E 00 00 
3af6b 034 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3af6f 035 00 36 7F 7F 
3af73 036 7F 7F 3E 1C 
3af77 037 08 00 00 00 
3af7b 038 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3af7f 039 00 08 1C 3E 
3af83 03a 7F 3E 1C 08 
3af87 03b 00 00 00 00 
3af8b 03c 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3af8f 03d 18 3C 3C E7 
3af93 03e E7 E7 18 18 
3af97 03f 3C 00 00 00 
3af9b 040 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3af9f 041 18 3C 7E FF 
3afa3 042 FF 7E 18 18 
3afa7 043 3C 00 00 00 
3afab 044 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3afaf 045 00 00 00 18 
3afb3 046 3C 3C 18 00 
3afb7 047 00 00 00 00 
3afbb 048 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3afbf 049 FF FF FF E7 
3afc3 04a C3 C3 E7 FF 
3afc7 04b FF FF FF FF 
3afcb 04c FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3afcf 04d 00 00 3C 66 
3afd3 04e 42 42 66 3C 
3afd7 04f 00 00 00 00 
3afdb 050 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3afdf 051 FF FF C3 99 
3afe3 052 BD BD 99 C3 
3afe7 053 FF FF FF FF 
3afeb 054 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3afef 055 78 70 58 4C 
3aff3 056 1E 33 33 33 
3aff7 057 33 1E 00 00 
3affb 058 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3afff 059 3C 66 66 66 
3b003 05a 66 3C 18 7E 
3b007 05b 18 18 00 00 
3b00b 05c 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3b00f 05d FC CC FC 0C 
3b013 05e 0C 0C 0C 0E 
3b017 05f 0F 07 00 00 
3b01b 060 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
3b01f 061 FE C6 FE C6 
3b023 062 C6 C6 C6 E6 
3b027 063 E7 67 03 00 
3b02b 064 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3b02f 065 18 18 DB 3C 
3b033 066 E7 3C DB 18 
3b037 067 18 00 00 00 
3b03b 068 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3b03f 069 03 07 0F 1F 
3b043 06a 7F 1F 0F 07 
3b047 06b 03 01 00 00 
3b04b 06c 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3b04f 06d 60 70 78 7C 
3b053 06e 7F 7C 78 70 
3b057 06f 60 40 00 00 
3b05b 070 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3b05f 071 18 3C 7E 18 
3b063 072 18 18 7E 3C 
3b067 073 18 00 00 00 
3b06b 074 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3b06f 075 66 66 66 66 
3b073 076 66 66 66    | 	byte	$66[7]
3b076 077 00 66 66 00 
3b07a 078 00 00 00 00 
3b07e 079 00 FE DB DB 
3b082 07a DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
3b086 07b D8 D8 D8 00 
3b08a 07c 00 00 00 3E 
3b08e 07d 63 06 1C 36 
3b092 07e 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
3b096 07f 30 63 3E 00 
3b09a 080 00 00 00 00 
3b09e 081 00 00 00 00 
3b0a2 082 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3b0a6 083 7F 7F 7F 00 
3b0aa 084 00 00 00 00 
3b0ae 085 00 18 3C 7E 
3b0b2 086 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3b0b6 087 3C 18 7E 00 
3b0ba 088 00 00 00 00 
3b0be 089 00 18 3C 7E 
3b0c2 08a 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
3b0c6 08b 18 18 18 00 
3b0ca 08c 00 00 00 00 
3b0ce 08d 00 18 18 18 
3b0d2 08e 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b0d6 08f 7E 3C 18 00 
3b0da 090 00 00 00 00 
3b0de 091 00 00 00 18 
3b0e2 092 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
3b0e6 093 00 00 00 00 
3b0ea 094 00 00 00 00 
3b0ee 095 00 00 00    | 	byte	$00[11]
3b0f1 096 0C 06 7F 06 
3b0f5 097 0C 00 00 00 
3b0f9 098 00 00 00 00 
3b0fd 099 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b101 09a 00 03 03 03 
3b105 09b 7F 00 00 00 
3b109 09c 00 00 00 00 
3b10d 09d 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b111 09e 14 36 7F 36 
3b115 09f 14 00 00 00 
3b119 0a0 00 00 00 00 
3b11d 0a1 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
3b121 0a2 1C 1C 3E 3E 
3b125 0a3 7F 7F 00 00 
3b129 0a4 00 00 00 00 
3b12d 0a5 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3b131 0a6 7F 3E 3E 1C 
3b135 0a7 1C 08 00 00 
3b139 0a8 00 00 00 00 
3b13d 0a9 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b141 0aa 00 00 00 00 
3b145 0ab 00 00 00 00 
3b149 0ac 00 00 00 00 
3b14d 0ad 00 00       | 	byte	$00[14]
3b14f 0ad 18 3C 3C 3C 
3b153 0ae 18 18 18 00 
3b157 0af 18 18 00 00 
3b15b 0b0 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3b15f 0b1 66 24 00 00 
3b163 0b2 00 00 00 00 
3b167 0b3 00 00 00 00 
3b16b 0b4 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b16f 0b5 00 36 36 7F 
3b173 0b6 36 36 36 7F 
3b177 0b7 36 36 00 00 
3b17b 0b8 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3b17f 0b9 3E 63 43 03 
3b183 0ba 3E 60 60 61 
3b187 0bb 63 3E 18 18 
3b18b 0bc 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3b18f 0bd 00 00 43 63 
3b193 0be 30 18 0C 06 
3b197 0bf 63 61 00 00 
3b19b 0c0 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3b19f 0c1 1C 36 36 1C 
3b1a3 0c2 6E 3B 33 33 
3b1a7 0c3 33 6E 00 00 
3b1ab 0c4 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3b1af 0c5 0C 0C 0C 06 
3b1b3 0c6 00 00 00 00 
3b1b7 0c7 00 00 00 00 
3b1bb 0c8 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b1bf 0c9 30 18 0C 0C 
3b1c3 0ca 0C 0C 0C 0C 
3b1c7 0cb 18 30 00 00 
3b1cb 0cc 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
3b1cf 0cd 0C 18 30 30 
3b1d3 0ce 30 30 30 30 
3b1d7 0cf 18 0C 00 00 
3b1db 0d0 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
3b1df 0d1 00 00 00 66 
3b1e3 0d2 3C FF 3C 66 
3b1e7 0d3 00 00 00 00 
3b1eb 0d4 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
3b1ef 0d5 00 00 00 18 
3b1f3 0d6 18 7E 18 18 
3b1f7 0d7 00 00 00 00 
3b1fb 0d8 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3b1ff 0d9 00 00 00 00 
3b203 0da 00 00 00 00 | 	byte	$00[8]
3b207 0db 18 18 18 0C 
3b20b 0dc 00 00 00 00 
3b20f 0dd 00 00 00 00 
3b213 0de 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3b217 0df 00 00 00 00 
3b21b 0e0 00 00 00 00 
3b21f 0e1 00 00 00 00 
3b223 0e2 00 00 00 00 | 	byte	$00[16]
3b227 0e3 18 18 00 00 
3b22b 0e4 00 00 00 00 
3b22f 0e5 00 00 40 60 
3b233 0e6 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3b237 0e7 03 01 00 00 
3b23b 0e8 00 00 00 00 
3b23f 0e9 1C 36 63 63 
3b243 0ea 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3b247 0eb 36 1C 00 00 
3b24b 0ec 00 00 00 00 
3b24f 0ed 18 1C 1E 18 
3b253 0ee 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3b257 0ef 18 7E 00 00 
3b25b 0f0 00 00 00 00 
3b25f 0f1 3E 63 60 30 
3b263 0f2 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3b267 0f3 63 7F 00 00 
3b26b 0f4 00 00 00 00 
3b26f 0f5 3E 63 60 60 
3b273 0f6 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3b277 0f7 63 3E 00 00 
3b27b 0f8 00 00 00 00 
3b27f 0f9 30 38 3C 36 
3b283 0fa 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3b287 0fb 30 78 00 00 
3b28b 0fc 00 00 00 00 
3b28f 0fd 7F 03 03 03 
3b293 0fe 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3b297 0ff 63 3E 00 00 
3b29b 100 00 00 00 00 
3b29f 101 1C 06 03 03 
3b2a3 102 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3b2a7 103 63 3E 00 00 
3b2ab 104 00 00 00 00 
3b2af 105 7F 63 60 60 
3b2b3 106 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3b2b7 107 0C 0C 00 00 
3b2bb 108 00 00 00 00 
3b2bf 109 3E 63 63 63 
3b2c3 10a 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3b2c7 10b 63 3E 00 00 
3b2cb 10c 00 00 00 00 
3b2cf 10d 3E 63 63 63 
3b2d3 10e 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3b2d7 10f 30 1E 00 00 
3b2db 110 00 00 00 00 
3b2df 111 00 00 00 18 
3b2e3 112 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3b2e7 113 18 18 00 00 
3b2eb 114 00 00 00 00 
3b2ef 115 00 00 00 18 
3b2f3 116 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3b2f7 117 18 18 0C 00 
3b2fb 118 00 00 00 00 
3b2ff 119 00 60 30 18 
3b303 11a 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3b307 11b 30 60 00 00 
3b30b 11c 00 00 00 00 
3b30f 11d 00 00 00 7E 
3b313 11e 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3b317 11f 00 00 00 00 
3b31b 120 00 00 00 00 
3b31f 121 00          | 	byte	$00[9]
3b320 122 06 0C 18 30 
3b324 123 60 30 18 0C 
3b328 124 06 00 00 00 
3b32c 125 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
3b330 126 63 63 30 18 
3b334 127 18 18 00 18 
3b338 128 18 00 00 00 
3b33c 129 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3b340 12a 3E 63 63 7B 
3b344 12b 7B 7B 3B 03 
3b348 12c 3E 00 00 00 
3b34c 12d 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3b350 12e 1C 36 63 63 
3b354 12f 7F 63 63 63 
3b358 130 63 00 00 00 
3b35c 131 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3b360 132 66 66 66 3E 
3b364 133 66 66 66 66 
3b368 134 3F 00 00 00 
3b36c 135 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3b370 136 66 43 03 03 
3b374 137 03 03 43 66 
3b378 138 3C 00 00 00 
3b37c 139 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
3b380 13a 36 66 66 66 
3b384 13b 66 66 66 36 
3b388 13c 1F 00 00 00 
3b38c 13d 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
3b390 13e 66 46 16 1E 
3b394 13f 16 06 46 66 
3b398 140 7F 00 00 00 
3b39c 141 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
3b3a0 142 66 46 16 1E 
3b3a4 143 16 06 06 06 
3b3a8 144 0F 00 00 00 
3b3ac 145 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
3b3b0 146 66 43 03 03 
3b3b4 147 7B 63 63 66 
3b3b8 148 5C 00 00 00 
3b3bc 149 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
3b3c0 14a 63 63 63 7F 
3b3c4 14b 63 63 63 63 
3b3c8 14c 63 00 00 00 
3b3cc 14d 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
3b3d0 14e 18 18 18 18 
3b3d4 14f 18 18 18 18 | 	byte	$18[8]
3b3d8 150 3C 00 00 00 
3b3dc 151 00 00 00 78 
3b3e0 152 30 30 30 30 
3b3e4 153 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
3b3e8 154 1E 00 00 00 
3b3ec 155 00 00 00 67 
3b3f0 156 66 66 36 1E 
3b3f4 157 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
3b3f8 158 67 00 00 00 
3b3fc 159 00 00 00 0F 
3b400 15a 06 06 06 06 
3b404 15b 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3b408 15c 7F 00 00 00 
3b40c 15d 00 00 00 63 
3b410 15e 77 7F 7F 6B 
3b414 15f 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3b418 160 63 00 00 00 
3b41c 161 00 00 00 63 
3b420 162 67 6F 7F 7B 
3b424 163 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3b428 164 63 00 00 00 
3b42c 165 00 00 00 3E 
3b430 166 63 63 63 63 
3b434 167 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3b438 168 3E 00 00 00 
3b43c 169 00 00 00 3F 
3b440 16a 66 66 66 3E 
3b444 16b 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3b448 16c 0F 00 00 00 
3b44c 16d 00 00 00 3E 
3b450 16e 63 63 63 63 
3b454 16f 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
3b458 170 3E 30 70 00 
3b45c 171 00 00 00 3F 
3b460 172 66 66 66 3E 
3b464 173 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
3b468 174 67 00 00 00 
3b46c 175 00 00 00 3E 
3b470 176 63 63 06 1C 
3b474 177 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3b478 178 3E 00 00 00 
3b47c 179 00 00 00 7E 
3b480 17a 7E 5A 18 18 
3b484 17b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3b488 17c 3C 00 00 00 
3b48c 17d 00 00 00 63 
3b490 17e 63 63 63 63 
3b494 17f 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3b498 180 3E 00 00 00 
3b49c 181 00 00 00 63 
3b4a0 182 63 63 63 63 
3b4a4 183 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
3b4a8 184 08 00 00 00 
3b4ac 185 00 00 00 63 
3b4b0 186 63 63 63 6B 
3b4b4 187 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
3b4b8 188 36 00 00 00 
3b4bc 189 00 00 00 63 
3b4c0 18a 63 36 3E 1C 
3b4c4 18b 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
3b4c8 18c 63 00 00 00 
3b4cc 18d 00 00 00 66 
3b4d0 18e 66 66 66 3C 
3b4d4 18f 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
3b4d8 190 3C 00 00 00 
3b4dc 191 00 00 00 7F 
3b4e0 192 63 61 30 18 
3b4e4 193 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3b4e8 194 7F 00 00 00 
3b4ec 195 00 00 00 3C 
3b4f0 196 0C 0C 0C 0C 
3b4f4 197 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3b4f8 198 3C 00 00 00 
3b4fc 199 00 00 00 00 
3b500 19a 01 03 07 0E 
3b504 19b 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3b508 19c 40 00 00 00 
3b50c 19d 00 00 00 3C 
3b510 19e 30 30 30 30 
3b514 19f 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3b518 1a0 3C 00 00 00 
3b51c 1a1 1C 36 00 00 
3b520 1a2 00 00 00 00 
3b524 1a3 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b528 1a4 00 00 00 00 
3b52c 1a5 00 00 00 00 
3b530 1a6 00 00 00 00 
3b534 1a7 00 00 00 00 
3b538 1a8 00          | 	byte	$00[17]
3b539 1a8 FF 00 00 0C 
3b53d 1a9 18 00 00 00 
3b541 1aa 00 00 00 00 
3b545 1ab 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b549 1ac 00 00 00 00 
3b54d 1ad 00 00 00 00 
3b551 1ae 00          | 	byte	$00[9]
3b552 1ae 1E 30 3E 33 
3b556 1af 33 33 6E 00 
3b55a 1b0 00 00 00 00 
3b55e 1b1 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3b562 1b2 1E 36 66 66 
3b566 1b3 66 66 3E 00 
3b56a 1b4 00 00 00 00 
3b56e 1b5 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b572 1b6 3E 63 03 03 
3b576 1b7 03 63 3E 00 
3b57a 1b8 00 00 00 00 
3b57e 1b9 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3b582 1ba 3C 36 33 33 
3b586 1bb 33 33 6E 00 
3b58a 1bc 00 00 00 00 
3b58e 1bd 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b592 1be 3E 63 7F 03 
3b596 1bf 03 63 3E 00 
3b59a 1c0 00 00 00 00 
3b59e 1c1 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3b5a2 1c2 0C 1E 0C 0C 
3b5a6 1c3 0C 0C 1E 00 
3b5aa 1c4 00 00 00 00 
3b5ae 1c5 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b5b2 1c6 6E 33 33 33 
3b5b6 1c7 33 33 3E 30 
3b5ba 1c8 33 1E 00 00 
3b5be 1c9 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3b5c2 1ca 36 6E 66 66 
3b5c6 1cb 66 66 67 00 
3b5ca 1cc 00 00 00 00 
3b5ce 1cd 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3b5d2 1ce 1C 18 18 18 
3b5d6 1cf 18 18 3C 00 
3b5da 1d0 00 00 00 00 
3b5de 1d1 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3b5e2 1d2 70 60 60 60 
3b5e6 1d3 60 60 60 66 
3b5ea 1d4 66 3C 00 00 
3b5ee 1d5 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3b5f2 1d6 66 36 1E 1E 
3b5f6 1d7 36 66 67 00 
3b5fa 1d8 00 00 00 00 
3b5fe 1d9 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3b602 1da 18 18 18 18 
3b606 1db 18 18       | 	byte	$18[6]
3b608 1dc 3C 00 00 00 
3b60c 1dd 00 00 00 00 
3b610 1de 00 00 37 7F 
3b614 1df 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
3b618 1e0 63 00 00 00 
3b61c 1e1 00 00 00 00 
3b620 1e2 00 00 3B 66 
3b624 1e3 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3b628 1e4 66 00 00 00 
3b62c 1e5 00 00 00 00 
3b630 1e6 00 00 3E 63 
3b634 1e7 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3b638 1e8 3E 00 00 00 
3b63c 1e9 00 00 00 00 
3b640 1ea 00 00 3B 66 
3b644 1eb 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3b648 1ec 3E 06 06 0F 
3b64c 1ed 00 00 00 00 
3b650 1ee 00 00 6E 33 
3b654 1ef 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
3b658 1f0 3E 30 30 78 
3b65c 1f1 00 00 00 00 
3b660 1f2 00 00 3B 6E 
3b664 1f3 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
3b668 1f4 0F 00 00 00 
3b66c 1f5 00 00 00 00 
3b670 1f6 00 00 3E 63 
3b674 1f7 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
3b678 1f8 3E 00 00 00 
3b67c 1f9 00 00 00 08 
3b680 1fa 0C 0C 3F 0C 
3b684 1fb 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3b688 1fc 38 00 00 00 
3b68c 1fd 00 00 00 00 
3b690 1fe 00 00 33 33 
3b694 1ff 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
3b698 200 6E 00 00 00 
3b69c 201 00 00 00 00 
3b6a0 202 00 00 63 63 
3b6a4 203 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
3b6a8 204 1C 00 00 00 
3b6ac 205 00 00 00 00 
3b6b0 206 00 00 63 63 
3b6b4 207 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
3b6b8 208 36 00 00 00 
3b6bc 209 00 00 00 00 
3b6c0 20a 00 00 63 36 
3b6c4 20b 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
3b6c8 20c 63 00 00 00 
3b6cc 20d 00 00 00 00 
3b6d0 20e 00 00 63 63 
3b6d4 20f 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
3b6d8 210 7E 60 30 1F 
3b6dc 211 00 00 00 00 
3b6e0 212 00 00 7F 33 
3b6e4 213 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
3b6e8 214 7F 00 00 00 
3b6ec 215 00 00 00 70 
3b6f0 216 18 18 18 0E 
3b6f4 217 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
3b6f8 218 70 00 00 00 
3b6fc 219 00 00 00 18 
3b700 21a 18 18 18 18 
3b704 21b 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b708 21c 18 00 00 00 
3b70c 21d 00 00 00 0E 
3b710 21e 18 18 18 70 
3b714 21f 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
3b718 220 0E 00 00 00 
3b71c 221 6E 3B 00 00 
3b720 222 00 00 00 00 
3b724 223 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b728 224 00 00 00 00 
3b72c 225 00 00 00 00 
3b730 226 00 00       | 	byte	$00[10]
3b732 226 08 1C 36 63 
3b736 227 63 63 7F 00 
3b73a 228 00 00 00 00 
3b73e 229 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3b742 22a 03 03 03 03 
3b746 22b 43 66 3C 18 
3b74a 22c 30 1E 00 00 
3b74e 22d 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3b752 22e 33 33 33 33 
3b756 22f 33 33       | 	byte	$33[6]
3b758 230 6E 00 00 00 
3b75c 231 00 00 60 30 
3b760 232 18 00 3E 63 
3b764 233 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
3b768 234 3E 00 00 00 
3b76c 235 00 00 08 1C 
3b770 236 36 00 1E 30 
3b774 237 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
3b778 238 6E 00 00 00 
3b77c 239 00 00 00 00 
3b780 23a 33 00 1E 30 
3b784 23b 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
3b788 23c 6E 00 00 00 
3b78c 23d 00 00 1C 36 
3b790 23e 1C 00 33 33 
3b794 23f 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
3b798 240 6E 00 00 00 
3b79c 241 00 00 60 30 
3b7a0 242 18 00 3E 63 
3b7a4 243 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
3b7a8 244 3E 00 00 00 
3b7ac 245 00 00 00 00 
3b7b0 246 00 00 3E 63 
3b7b4 247 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
3b7b8 248 3E 18 30 1E 
3b7bc 249 00 00 00 1C 
3b7c0 24a 58 78 38 18 
3b7c4 24b 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
3b7c8 24c 3C 00 00 00 
3b7cc 24d 00 00 00 00 
3b7d0 24e 63 00 3E 63 
3b7d4 24f 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
3b7d8 250 3E 00 00 00 
3b7dc 251 66 33 00 3E 
3b7e0 252 63 63 63 63 
3b7e4 253 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3b7e8 254 3E 00 00 00 
3b7ec 255 00 00 CC 66 
3b7f0 256 33 00 3E 63 
3b7f4 257 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
3b7f8 258 3E 00 00 00 
3b7fc 259 00 00 18 3C 
3b800 25a 66 00 1C 18 
3b804 25b 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
3b808 25c 3C 00 00 00 
3b80c 25d 30 18 00 7F 
3b810 25e 63 61 30 18 
3b814 25f 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3b818 260 7F 00 00 00 
3b81c 261 00 63 00 08 
3b820 262 1C 36 63 63 
3b824 263 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
3b828 264 63 00 00 00 
3b82c 265 30 18 00 3C 
3b830 266 66 43 03 03 
3b834 267 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
3b838 268 3C 00 00 00 
3b83c 269 30 18 00 7F 
3b840 26a 66 46 16 1E 
3b844 26b 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
3b848 26c 7F 00 00 00 
3b84c 26d 0C 06 00 0F 
3b850 26e 06 06 06 06 
3b854 26f 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3b858 270 7F 00 00 00 
3b85c 271 30 18 00 1C 
3b860 272 18 18 18 18 
3b864 273 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
3b868 274 3C 00 00 00 
3b86c 275 00 00 08 1C 
3b870 276 36 00 3E 63 
3b874 277 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
3b878 278 3E 00 00 00 
3b87c 279 00 00 00 00 
3b880 27a 63 00 3E 63 
3b884 27b 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
3b888 27c 3E 00 00 00 
3b88c 27d 00 00 00 6F 
3b890 27e 46 26 06 06 
3b894 27f 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
3b898 280 7F 00 00 00 
3b89c 281 00 00 00 6E 
3b8a0 282 4C 2C 0C 0C 
3b8a4 283 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
3b8a8 284 1E 00 00 00 
3b8ac 285 30 18 00 3E 
3b8b0 286 63 63 06 1C 
3b8b4 287 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3b8b8 288 3E 00 00 00 
3b8bc 289 00 00 60 30 
3b8c0 28a 18 00 3E 63 
3b8c4 28b 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3b8c8 28c 3E 00 00 00 
3b8cc 28d 00 63 00 3E 
3b8d0 28e 63 63 63 63 
3b8d4 28f 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3b8d8 290 3E 00 00 00 
3b8dc 291 00 63 00 63 
3b8e0 292 63 63 63 63 
3b8e4 293 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3b8e8 294 3E 00 00 00 
3b8ec 295 6C 38 00 7E 
3b8f0 296 7E 5A 18 18 
3b8f4 297 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3b8f8 298 3C 00 00 00 
3b8fc 299 00 00 60 48 
3b900 29a 2C 0C 3F 0C 
3b904 29b 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3b908 29c 38 00 00 00 
3b90c 29d 00 00 00 0F 
3b910 29e 26 36 1E 0E 
3b914 29f 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3b918 2a0 7F 00 00 00 
3b91c 2a1 00 00 00 00 
3b920 2a2 00 63 36 1C 
3b924 2a3 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3b928 2a4 00 00 00 00 
3b92c 2a5 00 00       | 	byte	$00[6]
3b92e 2a5 36 1C 08 00 
3b932 2a6 3E 63 03 03 
3b936 2a7 03 63 3E 00 
3b93a 2a8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3b93e 2a9 30 18 0C 00 
3b942 2aa 1E 30 3E 33 
3b946 2ab 33 33 6E 00 
3b94a 2ac 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3b94e 2ad 60 30 18 00 
3b952 2ae 1C 18 18 18 
3b956 2af 18 18 3C 00 
3b95a 2b0 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3b95e 2b1 60 30 18 00 
3b962 2b2 3E 63 63 63 
3b966 2b3 63 63 3E 00 
3b96a 2b4 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3b96e 2b5 30 18 0C 00 
3b972 2b6 33 33 33 33 
3b976 2b7 33 33 6E 00 
3b97a 2b8 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3b97e 2b9 00 08 1C 36 
3b982 2ba 63 63 7F 63 
3b986 2bb 63 63 63 18 
3b98a 2bc 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3b98e 2bd 00 00 00 00 
3b992 2be 1E 30 3E 33 
3b996 2bf 33 33 6E 18 
3b99a 2c0 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3b99e 2c1 00 7F 63 61 
3b9a2 2c2 30 18 0C 06 
3b9a6 2c3 43 63 7F 00 
3b9aa 2c4 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3b9ae 2c5 36 1C 08 00 
3b9b2 2c6 7F 33 18 0C 
3b9b6 2c7 06 63 7F 00 
3b9ba 2c8 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3b9be 2c9 00 7F 66 46 
3b9c2 2ca 16 1E 16 06 
3b9c6 2cb 46 66 7F 18 
3b9ca 2cc 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3b9ce 2cd 00 00 00 00 
3b9d2 2ce 3E 63 7F 03 
3b9d6 2cf 03 63 3E 18 
3b9da 2d0 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3b9de 2d1 00 3C 66 03 
3b9e2 2d2 1F 03 0F 03 
3b9e6 2d3 03 66 3C 00 
3b9ea 2d4 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3b9ee 2d5 60 30 18 00 
3b9f2 2d6 7F 33 18 0C 
3b9f6 2d7 06 63 7F 00 
3b9fa 2d8 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3b9fe 2d9 00 3C 66 43 
3ba02 2da 03 03 03 03 
3ba06 2db 43 66 3C 00 
3ba0a 2dc 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3ba0e 2dd 00 00 00 00 
3ba12 2de 3E 63 06 1C 
3ba16 2df 30 63 3E 18 
3ba1a 2e0 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3ba1e 2e1 00 00 00 00 
3ba22 2e2 00 00       | 	byte	$00[6]
3ba24 2e3 6C 36 1B 36 
3ba28 2e4 6C 00 00 00 
3ba2c 2e5 00 00 00 00 
3ba30 2e6 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ba34 2e7 1B 36 6C 36 
3ba38 2e8 1B 00 00 00 
3ba3c 2e9 88 22 88 22 
3ba40 2ea 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
3ba44 2eb 88 22 88 22 
3ba48 2ec 88 22 88 22 
3ba4c 2ed AA 55 AA 55 
3ba50 2ee AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
3ba54 2ef AA 55 AA 55 
3ba58 2f0 AA 55 AA 55 
3ba5c 2f1 BB EE BB EE 
3ba60 2f2 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
3ba64 2f3 BB EE BB EE 
3ba68 2f4 BB EE BB EE 
3ba6c 2f5 18 18 18 18 
3ba70 2f6 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
3ba74 2f7 18 18 18 18 
3ba78 2f8 18 18 18 18 
3ba7c 2f9 18 18 18 18 
3ba80 2fa 18 18 18    | 	byte	$18[15]
3ba83 2fa 1F 18 18 18 
3ba87 2fb 18 18 18 18 
3ba8b 2fc 18 30 18 00 
3ba8f 2fd 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3ba93 2fe 63 7F 63 63 
3ba97 2ff 63 63 00 00 
3ba9b 300 00 1C 36 00 
3ba9f 301 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3baa3 302 63 7F 63 63 
3baa7 303 63 63 00 00 
3baab 304 00 36 1C 00 
3baaf 305 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3bab3 306 1E 16 06 46 
3bab7 307 66 7F 00 00 
3babb 308 00 00 00 00 
3babf 309 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3bac3 30a 1C 30 60 63 
3bac7 30b 63 3E 18 30 
3bacb 30c 1E 6C 6C 6C 
3bacf 30d 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3bad3 30e 6F 6C 6C 6C 
3bad7 30f 6C 6C 6C 6C 
3badb 310 6C 6C 6C 6C 
3badf 311 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3bae3 312 6C 6C 6C 6C 
3bae7 313 6C 6C 6C 6C 
3baeb 314 6C          | 	byte	$6c[9]
3baec 315 00 00 00 00 
3baf0 316 00          | 	byte	$00[5]
3baf1 316 7F 60 6F 6C 
3baf5 317 6C 6C 6C 6C 
3baf9 318 6C 6C 6C 6C 
3bafd 319 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3bb01 31a 6F 60 7F 00 
3bb05 31b 00 00 00 00 
3bb09 31c 00 00 00 18 
3bb0d 31d 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3bb11 31e 61 30 18 0C 
3bb15 31f 06 43 63 7F 
3bb19 320 00 00 00 00 
3bb1d 321 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3bb21 322 00 7F 33 18 
3bb25 323 0C 06 63 7F 
3bb29 324 00 00 00 00 
3bb2d 325 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3bb31 326 00 00 1F 18 
3bb35 327 18 18 18 18 
3bb39 328 18 18 18 18 
3bb3d 329 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bb41 32a 18 18 F8 00 
3bb45 32b 00 00 00 00 
3bb49 32c 00 00 00 18 
3bb4d 32d 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3bb51 32e 18 18 FF 00 
3bb55 32f 00 00 00 00 
3bb59 330 00 00 00 00 
3bb5d 331 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bb61 332 00 00 FF 18 
3bb65 333 18 18 18 18 
3bb69 334 18 18 18 18 
3bb6d 335 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bb71 336 18 18 F8 18 
3bb75 337 18 18 18 18 
3bb79 338 18 18 18 00 
3bb7d 339 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3bb81 33a 00 00 FF 00 
3bb85 33b 00 00 00 00 
3bb89 33c 00 00 00 18 
3bb8d 33d 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3bb91 33e 18 18 FF 18 
3bb95 33f 18 18 18 18 
3bb99 340 18 18 18 63 
3bb9d 341 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3bba1 342 36 63 63 7F 
3bba5 343 63 63 63 63 
3bba9 344 00 00 00 00 
3bbad 345 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3bbb1 346 00 1E 30 3E 
3bbb5 347 33 33 33 6E 
3bbb9 348 00 00 00 6C 
3bbbd 349 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3bbc1 34a EC 0C FC 00 
3bbc5 34b 00 00 00 00 
3bbc9 34c 00 00 00 00 
3bbcd 34d 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bbd1 34e FC 0C EC 6C 
3bbd5 34f 6C 6C 6C 6C 
3bbd9 350 6C 6C 6C 6C 
3bbdd 351 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3bbe1 352 EF 00 FF 00 
3bbe5 353 00 00 00 00 
3bbe9 354 00 00 00 00 
3bbed 355 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bbf1 356 FF 00 EF 6C 
3bbf5 357 6C 6C 6C 6C 
3bbf9 358 6C 6C 6C 6C 
3bbfd 359 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3bc01 35a EC 0C EC 6C 
3bc05 35b 6C 6C 6C 6C 
3bc09 35c 6C 6C 6C 00 
3bc0d 35d 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3bc11 35e FF 00 FF 00 
3bc15 35f 00 00 00 00 
3bc19 360 00 00 00 6C 
3bc1d 361 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3bc21 362 EF 00 EF 6C 
3bc25 363 6C 6C 6C 6C 
3bc29 364 6C 6C 6C 00 
3bc2d 365 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3bc31 366 63 3E 63 63 
3bc35 367 63 63 3E 63 
3bc39 368 00 00 00 00 
3bc3d 369 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3bc41 36a 30 3C 36 33 
3bc45 36b 33 33 33 6E 
3bc49 36c 00 00 00 00 
3bc4d 36d 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3bc51 36e 66 66 6F 66 
3bc55 36f 66 66 36 1F 
3bc59 370 00 00 00 36 
3bc5d 371 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3bc61 372 66 66 66 66 
3bc65 373 66 66       | 	byte	$66[6]
3bc67 373 36 1F 00 00 
3bc6b 374 00 00 63 00 
3bc6f 375 7F 66 46 16 
3bc73 376 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3bc77 377 66 7F 00 00 
3bc7b 378 00 6C 38 00 
3bc7f 379 38 30 30 3C 
3bc83 37a 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
3bc87 37b 33 6E 00 00 
3bc8b 37c 00 36 1C 00 
3bc8f 37d 63 67 6F 7F 
3bc93 37e 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
3bc97 37f 63 63 00 00 
3bc9b 380 00 30 18 00 
3bc9f 381 3C 18 18 18 
3bca3 382 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3bca7 383 18 3C 00 00 
3bcab 384 00 3C 66 00 
3bcaf 385 3C 18 18 18 
3bcb3 386 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3bcb7 387 18 3C 00 00 
3bcbb 388 00 00 00 36 
3bcbf 389 1C 08 00 3E 
3bcc3 38a 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3bcc7 38b 63 3E 00 00 
3bccb 38c 00 18 18 18 
3bccf 38d 18 18 18 18 
3bcd3 38e 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3bcd7 38f 00 00 00 00 
3bcdb 390 00 00 00 00 
3bcdf 391 00 00 00 00 | 	byte	$00[12]
3bce3 392 F8 18 18 18 
3bce7 393 18 18 18 18 
3bceb 394 18 FF FF FF 
3bcef 395 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3bcf3 396 FF FF FF FF 
3bcf7 397 FF FF FF FF 
3bcfb 398 FF          | 	byte	$ff[9]
3bcfc 399 00 00 00 00 
3bd00 39a 00 00 00    | 	byte	$00[7]
3bd03 39a FF FF FF FF 
3bd07 39b FF FF FF FF 
3bd0b 39c FF          | 	byte	$ff[9]
3bd0c 39d 00 00 00 7E 
3bd10 39e 7E 5A 18 18 
3bd14 39f 18 18 18 18 
3bd18 3a0 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
3bd1c 3a1 1C 36 1C 63 
3bd20 3a2 63 63 63 63 
3bd24 3a3 63 63 63 63 
3bd28 3a4 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3bd2c 3a5 FF FF FF FF 
3bd30 3a6 FF FF FF    | 	byte	$ff[7]
3bd33 3a6 00 00 00 00 
3bd37 3a7 00 00 00 00 
3bd3b 3a8 00          | 	byte	$00[9]
3bd3c 3a9 30 18 00 3E 
3bd40 3aa 63 63 63 63 
3bd44 3ab 63 63 63 63 
3bd48 3ac 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3bd4c 3ad 00 00 00 1E 
3bd50 3ae 33 33 33 1B 
3bd54 3af 33 63 63 63 
3bd58 3b0 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
3bd5c 3b1 1C 36 00 3E 
3bd60 3b2 63 63 63 63 
3bd64 3b3 63 63 63 63 
3bd68 3b4 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3bd6c 3b5 30 18 00 63 
3bd70 3b6 67 6F 7F 7B 
3bd74 3b7 73 63 63 63 
3bd78 3b8 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3bd7c 3b9 00 00 60 30 
3bd80 3ba 18 00 3B 66 
3bd84 3bb 66 66 66 66 
3bd88 3bc 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3bd8c 3bd 00 00 36 1C 
3bd90 3be 08 00 3B 66 
3bd94 3bf 66 66 66 66 
3bd98 3c0 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3bd9c 3c1 36 1C 00 3E 
3bda0 3c2 63 63 06 1C 
3bda4 3c3 30 60 63 63 
3bda8 3c4 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3bdac 3c5 00 00 36 1C 
3bdb0 3c6 08 00 3E 63 
3bdb4 3c7 06 1C 30 63 
3bdb8 3c8 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3bdbc 3c9 30 18 00 3F 
3bdc0 3ca 66 66 66 3E 
3bdc4 3cb 36 66 66 66 
3bdc8 3cc 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3bdcc 3cd 30 18 00 63 
3bdd0 3ce 63 63 63 63 
3bdd4 3cf 63 63 63 63 
3bdd8 3d0 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3bddc 3d1 00 00 60 30 
3bde0 3d2 18 00 3B 6E 
3bde4 3d3 66 06 06 06 
3bde8 3d4 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3bdec 3d5 66 33 00 63 
3bdf0 3d6 63 63 63 63 
3bdf4 3d7 63 63 63 63 
3bdf8 3d8 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3bdfc 3d9 00 00 60 30 
3be00 3da 18 00 63 63 
3be04 3db 63 63 63 63 
3be08 3dc 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
3be0c 3dd 30 18 00 66 
3be10 3de 66 66 66 3C 
3be14 3df 18 18 18 18 
3be18 3e0 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
3be1c 3e1 00 00 00 08 
3be20 3e2 0C 0C 3F 0C 
3be24 3e3 0C 0C 0C 6C 
3be28 3e4 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
3be2c 3e5 30 18 00 00 
3be30 3e6 00 00 00 00 
3be34 3e7 00 00 00 00 
3be38 3e8 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3be3c 3e9 00 00 00 00 
3be40 3ea 00 00 00 00 | 	byte	$00[8]
3be44 3eb 7F 00 00 00 
3be48 3ec 00 00 00 00 
3be4c 3ed 66 33 00 00 
3be50 3ee 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3be54 3ef 00 00 00 00 
3be58 3f0 00 00 00 00 
3be5c 3f1 00 00 00 00 
3be60 3f2 00 00 00 00 
3be64 3f3 00 00 00 00 
3be68 3f4 00          | 	byte	$00[21]
3be69 3f4 0C 06 3C 36 
3be6d 3f5 1C 00 00 00 
3be71 3f6 00 00 00 00 
3be75 3f7 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3be79 3f8 00 00 00 63 
3be7d 3f9 3E 00 00 00 
3be81 3fa 00 00 00 00 
3be85 3fb 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3be89 3fc 00 00 00 00 
3be8d 3fd 3E 63 06 1C 
3be91 3fe 36 63 63 36 
3be95 3ff 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
3be99 400 00 00 00 00 
3be9d 401 00 00 00 00 | 	byte	$00[8]
3bea1 402 18 00 7E 00 
3bea5 403 18 00 00 00 
3bea9 404 00 00 00 00 
3bead 405 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3beb1 406 00 00 00 00 
3beb5 407 00 00 00 00 | 	byte	$00[8]
3beb9 408 18 30 1E 00 
3bebd 409 00 00 1C 36 
3bec1 40a 36 1C 00 00 
3bec5 40b 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
3bec9 40c 00 00 00 00 
3becd 40d 63 00 00 00 
3bed1 40e 00 00 00 00 
3bed5 40f 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bed9 410 00 00 00 18 
3bedd 411 18 00 00 00 
3bee1 412 00 00 00 00 
3bee5 413 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bee9 414 00 00 00 00 
3beed 415 00          | 	byte	$00[5]
3beee 415 CC 66 33 00 
3bef2 416 33 33 33 33 
3bef6 417 33 33 6E 00 
3befa 418 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3befe 419 00 3F 66 66 
3bf02 41a 66 3E 36 66 
3bf06 41b 66 66 6F 00 
3bf0a 41c 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3bf0e 41d 36 1C 08 00 
3bf12 41e 3B 6E 66 06 
3bf16 41f 06 06 0F 00 
3bf1a 420 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3bf1e 421 00 00 00 7E 
3bf22 422 7E 7E 7E 7E 
3bf26 423 7E 7E 00 00 
3bf2a 424 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3bf2e 425 00 00 00 00 
3bf32 426 00 00 00 00 
3bf36 427 00 00 00 00 
3bf3a 428 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bf3c 429 00 00 00 00 
      ...             
3bf6c 435 00 00 00 00 
3bf70 436 00 00 00    | st_font        file "st4font.def"
3bf73 436 FF FF 00 00 
3bf77 437 00 00 00 00 
3bf7b 438 00 18 18 18 
3bf7f 439 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3bf83 43a 18 18 18 18 
3bf87 43b 18 18 18 18 
3bf8b 43c 18          | 	byte	$18[9]
3bf8c 43d 00 00 00 00 
3bf90 43e 00 00 00    | 	byte	$00[7]
3bf93 43e FF FF 18 18 
3bf97 43f 18 18 18 18 
3bf9b 440 18 18 18 18 
3bf9f 441 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bfa3 442 FF FF 00 00 
3bfa7 443 00 00 00 00 
3bfab 444 00 18 18 18 
3bfaf 445 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3bfb3 446 1F 1F 18 18 
3bfb7 447 18 18 18 18 
3bfbb 448 18 18 18 18 
3bfbf 449 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bfc3 44a F8 F8 18 18 
3bfc7 44b 18 18 18 18 
3bfcb 44c 18 00 00 00 
3bfcf 44d 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3bfd3 44e 1F 1F 18 18 
3bfd7 44f 18 18 18 18 
3bfdb 450 18 00 00 00 
3bfdf 451 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3bfe3 452 F8 F8 18 18 
3bfe7 453 18 18 18 18 
3bfeb 454 18 18 18 18 
3bfef 455 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bff3 456 1F 1F 00 00 
3bff7 457 00 00 00 00 
3bffb 458 00 18 18 18 
3bfff 459 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3c003 45a F8 F8 00 00 
3c007 45b 00 00 00 00 
3c00b 45c 00 18 18 18 
3c00f 45d 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3c013 45e FF FF 18 18 
3c017 45f 18 18 18 18 
3c01b 460 18 00 00 18 
3c01f 461 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3c023 462 66 7E 7E 66 
3c027 463 66 66 66 30 
3c02b 464 18 00 00 7E 
3c02f 465 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3c033 466 3E 06 06 06 
3c037 467 06 7E 7E 18 
3c03b 468 0C 30 18 3C 
3c03f 469 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3c043 46a 06 06 06 66 
3c047 46b 66 7E 3C 00 
3c04b 46c 00 30 18 66 
3c04f 46d 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3c053 46e 7E 7E 76 76 
3c057 46f 66 66 66 00 
3c05b 470 00 30 18 7C 
3c05f 471 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3c063 472 1C 38 70 60 
3c067 473 60 7E 3E 00 
3c06b 474 00 30 18 7E 
3c06f 475 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3c073 476 18 0C 0C 06 
3c077 477 06 7E 7E 00 
3c07b 478 00 18 18 00 
3c07f 479 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3c083 47a 18 18 0C 0C 
3c087 47b 06 7E 7E 00 
3c08b 47c 00 30 18 3C 
3c08f 47d 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3c093 47e 66 66 66 66 
3c097 47f 66          | 	byte	$66[5]
3c098 480 7E 3C 00 00 
3c09c 481 00 00 06 06 
3c0a0 482 06 06 16 1E 
3c0a4 483 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
3c0a8 484 7E 7E 00 00 
3c0ac 485 00 00 00 00 
3c0b0 486 00 3C 7C 60 
3c0b4 487 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3c0b8 488 7E 7C 30 18 
3c0bc 489 00 00 00 00 
3c0c0 48a 00 3C 7E 66 
3c0c4 48b 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
3c0c8 48c 7E 7C 18 0C 
3c0cc 48d 00 00 30 18 
3c0d0 48e 00 3C 3E 06 
3c0d4 48f 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3c0d8 490 7E 7C 00 00 
3c0dc 491 00 00 30 18 
3c0e0 492 00 3E 7E 66 
3c0e4 493 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3c0e8 494 66 66 00 00 
3c0ec 495 00 00 30 18 
3c0f0 496 00 7C 7E 06 
3c0f4 497 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3c0f8 498 7E 3E 00 00 
3c0fc 499 00 00 30 18 
3c100 49a 00 7E 7E 30 
3c104 49b 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3c108 49c 7E 7E 00 00 
3c10c 49d 00 00 18 18 
3c110 49e 00 7E 7E 30 
3c114 49f 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3c118 4a0 7E 7E 00 00 
3c11c 4a1 00 00 30 18 
3c120 4a2 00 3C 7E 66 
3c124 4a3 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3c128 4a4 7E 3C 00 00 
3c12c 4a5 00 00 1C 1C 
3c130 4a6 18 18 38 3C 
3c134 4a7 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3c138 4a8 3C 3C 00 00 
3c13c 4a9 00 00 00 00 
3c140 4aa 00 00 00 00 
3c144 4ab 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c148 4ac 00 00 00 00 
3c14c 4ad 00 00       | 	byte	$00[6]
3c14e 4ad 18 18 18 18 
3c152 4ae 18 18 18 18 | 	byte	$18[8]
3c156 4af 00 00 18 18 
3c15a 4b0 00 00 00 00 
3c15e 4b1 66 66 66 66 
3c162 4b2 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3c166 4b3 00 00 00 00 
3c16a 4b4 00 00 00 00 
3c16e 4b5 00          | 	byte	$00[9]
3c16f 4b5 66 66 FF FF 
3c173 4b6 66 66 FF FF 
3c177 4b7 66 66 00 00 
3c17b 4b8 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3c17f 4b9 7C 7E 06 06 
3c183 4ba 3E 7C 60 60 
3c187 4bb 7E 3E 18 18 
3c18b 4bc 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3c18f 4bd 66 30 30 18 
3c193 4be 18 0C 0C 66 
3c197 4bf 66 00 00 00 
3c19b 4c0 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3c19f 4c1 66 66 3C 1C 
3c1a3 4c2 1C FC FE 66 
3c1a7 4c3 66 FE FC 00 
3c1ab 4c4 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3c1af 4c5 18 18 18 18 
3c1b3 4c6 00 00 00 00 
3c1b7 4c7 00 00 00 00 
3c1bb 4c8 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3c1bf 4c9 18 1C 0C 0C 
3c1c3 4ca 0C 0C 0C 0C 
3c1c7 4cb 1C 18 30 00 
3c1cb 4cc 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3c1cf 4cd 18 38 30 30 
3c1d3 4ce 30 30 30 30 
3c1d7 4cf 38 18 0C 00 
3c1db 4d0 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3c1df 4d1 66 66 3C 3C 
3c1e3 4d2 FF FF 3C 3C 
3c1e7 4d3 66 66 00 00 
3c1eb 4d4 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3c1ef 4d5 00 18 18 18 
3c1f3 4d6 7E 7E 18 18 
3c1f7 4d7 18 00 00 00 
3c1fb 4d8 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3c1ff 4d9 00 00 00 00 
3c203 4da 00 00       | 	byte	$00[6]
3c205 4db 18 18 18 18 
3c209 4dc 18          | 	byte	$18[5]
3c20a 4dc 0C 04 00 00 
3c20e 4dd 00 00 00 00 
3c212 4de 7E 7E 00 00 
3c216 4df 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3c21a 4e0 00 00 00 00 
3c21e 4e1 00 00 00 00 
3c222 4e2 00 00 00 00 
3c226 4e3 00          | 	byte	$00[13]
3c227 4e3 18 18 18 00 
3c22b 4e4 00 00 00 60 
3c22f 4e5 60 60 30 30 
3c233 4e6 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3c237 4e7 06 06 06 00 
3c23b 4e8 00 00 00 3C 
3c23f 4e9 7E 66 66 66 
3c243 4ea 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3c247 4eb 66 7E 3C 00 
3c24b 4ec 00 00 00 18 
3c24f 4ed 18 1C 1C 18 
3c253 4ee 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3c257 4ef 18 7E 7E 00 
3c25b 4f0 00 00 00 3C 
3c25f 4f1 7E 66 66 30 
3c263 4f2 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3c267 4f3 0C 7E 7E 00 
3c26b 4f4 00 00 00 7E 
3c26f 4f5 7E 30 30 18 
3c273 4f6 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3c277 4f7 66 7E 3C 00 
3c27b 4f8 00 00 00 30 
3c27f 4f9 30 38 38 3C 
3c283 4fa 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3c287 4fb 7E 30 30 00 
3c28b 4fc 00 00 00 7E 
3c28f 4fd 7E 06 06 3E 
3c293 4fe 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3c297 4ff 66 7E 3C 00 
3c29b 500 00 00 00 38 
3c29f 501 3C 0E 06 06 
3c2a3 502 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3c2a7 503 66 7E 3C 00 
3c2ab 504 00 00 00 7E 
3c2af 505 7E 60 60 30 
3c2b3 506 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3c2b7 507 0C 0C 0C 00 
3c2bb 508 00 00 00 3C 
3c2bf 509 7E 66 66 3C 
3c2c3 50a 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3c2c7 50b 66 7E 3C 00 
3c2cb 50c 00 00 00 3C 
3c2cf 50d 7E 66 66 7E 
3c2d3 50e 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3c2d7 50f 70 3C 1C 00 
3c2db 510 00 00 00 00 
3c2df 511 00 00 18 18 
3c2e3 512 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3c2e7 513 18 18 18 00 
3c2eb 514 00 00 00 00 
3c2ef 515 00 00 18 18 
3c2f3 516 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3c2f7 517 18 18 18 0C 
3c2fb 518 04 00 00 00 
3c2ff 519 70 38 1C 0E 
3c303 51a 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3c307 51b 70 00 00 00 
3c30b 51c 00 00 00 00 
3c30f 51d 00 00 7E 7E 
3c313 51e 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3c317 51f 00 00 00 00 
3c31b 520 00 00 00 00 | 	byte	$00[8]
3c31f 521 0E 1C 38 70 
3c323 522 E0 70 38 1C 
3c327 523 0E 00 00 00 
3c32b 524 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3c32f 525 7E 66 66 30 
3c333 526 30 18 18 18 
3c337 527 00 18 18 00 
3c33b 528 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3c33f 529 7E 66 66 66 
3c343 52a 66 36 06 66 
3c347 52b 66 7E 3C 00 
3c34b 52c 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3c34f 52d 3C 7E 66 66 
3c353 52e 66 7E 7E 66 
3c357 52f 66 66 66 00 
3c35b 530 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3c35f 531 7E 66 66 7E 
3c363 532 3E 66 66 66 
3c367 533 66 7E 3E 00 
3c36b 534 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3c36f 535 7E 66 66 06 
3c373 536 06 06 06 66 
3c377 537 66 7E 3C 00 
3c37b 538 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3c37f 539 7E 66 66 66 
3c383 53a 66 66 66 66 
3c387 53b 66 7E 3E 00 
3c38b 53c 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3c38f 53d 7E 06 06 3E 
3c393 53e 3E 06 06 06 
3c397 53f 06 7E 7E 00 
3c39b 540 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3c39f 541 7E 06 06 3E 
3c3a3 542 3E 06 06 06 
3c3a7 543 06 06 06 00 
3c3ab 544 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3c3af 545 7E 06 06 76 
3c3b3 546 76 66 66 66 
3c3b7 547 66 7E 3C 00 
3c3bb 548 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3c3bf 549 66 66 66 7E 
3c3c3 54a 7E 66 66 66 
3c3c7 54b 66 66 66 00 
3c3cb 54c 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3c3cf 54d 7E 18 18 18 
3c3d3 54e 18 18 18 18 
3c3d7 54f 18 7E 7E 00 
3c3db 550 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3c3df 551 60 60 60 60 
3c3e3 552 60 60 60    | 	byte	$60[7]
3c3e6 553 66 66 7E 3C 
3c3ea 554 00 00 00 00 
3c3ee 555 66 66 36 36 
3c3f2 556 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3c3f6 557 66 66 C6 C6 
3c3fa 558 00 00 00 00 
3c3fe 559 06 06 06 06 
3c402 55a 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3c406 55b 06 06 7E 7E 
3c40a 55c 00 00 00 00 
3c40e 55d C6 C6 EE EE 
3c412 55e FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3c416 55f C6 C6 C6 C6 
3c41a 560 00 00 00 00 
3c41e 561 66 66 66 6E 
3c422 562 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3c426 563 76 66 66 66 
3c42a 564 00 00 00 00 
3c42e 565 3C 7E 66 66 
3c432 566 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3c436 567 66 66 7E 3C 
3c43a 568 00 00 00 00 
3c43e 569 3E 7E 66 66 
3c442 56a 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3c446 56b 06 06 06 06 
3c44a 56c 00 00 00 00 
3c44e 56d 3C 7E 66 66 
3c452 56e 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3c456 56f 66 56 3E 6C 
3c45a 570 00 00 00 00 
3c45e 571 3E 7E 66 66 
3c462 572 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3c466 573 66 66 C6 C6 
3c46a 574 00 00 00 00 
3c46e 575 7C 7E 06 06 
3c472 576 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3c476 577 60 60 7E 3E 
3c47a 578 00 00 00 00 
3c47e 579 7E 7E 18 18 
3c482 57a 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3c486 57b 18 18 18 18 
3c48a 57c 00 00 00 00 
3c48e 57d 66 66 66 66 
3c492 57e 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3c496 57f 66 66 7E 3C 
3c49a 580 00 00 00 00 
3c49e 581 66 66 66 66 
3c4a2 582 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3c4a6 583 3C 3C 18 18 
3c4aa 584 00 00 00 00 
3c4ae 585 C6 C6 C6 C6 
3c4b2 586 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3c4b6 587 FE EE C6 82 
3c4ba 588 00 00 00 00 
3c4be 589 66 66 66 3C 
3c4c2 58a 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3c4c6 58b 3C 66 66 66 
3c4ca 58c 00 00 00 00 
3c4ce 58d 66 66 66 66 
3c4d2 58e 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3c4d6 58f 18 18 18 18 
3c4da 590 00 00 00 00 
3c4de 591 7E 7E 30 30 
3c4e2 592 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3c4e6 593 06 06 7E 7E 
3c4ea 594 00 00 00 00 
3c4ee 595 3C 3C 0C 0C 
3c4f2 596 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3c4f6 597 0C 0C 3C 3C 
3c4fa 598 00 00 00 00 
3c4fe 599 06 06 0C 0C 
3c502 59a 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3c506 59b 60 60 C0 C0 
3c50a 59c 00 00 00 00 
3c50e 59d 3C 3C 30 30 
3c512 59e 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3c516 59f 30 30 3C 3C 
3c51a 5a0 00 00 00 00 
3c51e 5a1 18 18 3C 3C 
3c522 5a2 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3c526 5a3 00 00 00 00 
3c52a 5a4 00 00 00 00 
3c52e 5a5 00 00 00 00 
3c532 5a6 00 00 00 00 
3c536 5a7 00 00       | 	byte	$00[18]
3c538 5a8 FE FE 00 00 
3c53c 5a9 00 00 0C 0C 
3c540 5aa 18 18 00 00 
3c544 5ab 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3c548 5ac 00 00 00 00 
3c54c 5ad 00 00 00 00 
3c550 5ae 00          | 	byte	$00[9]
3c551 5ae 3C 7C 60 7C 
3c555 5af 7E 66 66 7E 
3c559 5b0 7C 00 00 00 
3c55d 5b1 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3c561 5b2 3E 7E 66 66 
3c565 5b3 66 66 66 7E 
3c569 5b4 3E 00 00 00 
3c56d 5b5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3c571 5b6 3C 3E 06 06 
3c575 5b7 06 06 06 7E 
3c579 5b8 7C 00 00 00 
3c57d 5b9 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3c581 5ba 7C 7E 66 66 
3c585 5bb 66 66 66 7E 
3c589 5bc 7C 00 00 00 
3c58d 5bd 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3c591 5be 3C 7E 66 66 
3c595 5bf 7E 06 06 7E 
3c599 5c0 7C 00 00 00 
3c59d 5c1 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3c5a1 5c2 18 7E 7E 18 
3c5a5 5c3 18 18 18 18 
3c5a9 5c4 18 00 00 00 
3c5ad 5c5 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3c5b1 5c6 7C 7E 66 66 
3c5b5 5c7 66 66 7E 7C 
3c5b9 5c8 60 7E 3E 00 
3c5bd 5c9 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3c5c1 5ca 3E 7E 66 66 
3c5c5 5cb 66 66 66 66 
3c5c9 5cc 66 00 00 00 
3c5cd 5cd 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3c5d1 5ce 1C 1C 18 18 
3c5d5 5cf 18 18 18 3C 
3c5d9 5d0 3C 00 00 00 
3c5dd 5d1 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3c5e1 5d2 30 30 30 30 
3c5e5 5d3 30 30 30 30 
3c5e9 5d4 30          | 	byte	$30[9]
3c5ea 5d4 3E 1E 00 00 
3c5ee 5d5 06 06 06 36 
3c5f2 5d6 36 1E 1E 1E 
3c5f6 5d7 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3c5fa 5d8 00 00 00 00 
3c5fe 5d9 1C 1C 18 18 
3c602 5da 18 18 18 18 
3c606 5db 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3c60a 5dc 00 00 00 00 
3c60e 5dd 00 00 00    | 	byte	$00[7]
3c611 5de 6C FE FE D6 
3c615 5df D6 C6 C6 C6 
3c619 5e0 C6 00 00 00 
3c61d 5e1 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3c621 5e2 3E 7E 66 66 
3c625 5e3 66 66 66 66 
3c629 5e4 66 00 00 00 
3c62d 5e5 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3c631 5e6 3C 7E 66 66 
3c635 5e7 66 66 66 7E 
3c639 5e8 3C 00 00 00 
3c63d 5e9 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3c641 5ea 3E 7E 66 66 
3c645 5eb 66 66 66 7E 
3c649 5ec 3E 06 06 00 
3c64d 5ed 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3c651 5ee 7C 7E 66 66 
3c655 5ef 66 66 66 7E 
3c659 5f0 7C 60 60 00 
3c65d 5f1 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3c661 5f2 3E 7E 66 06 
3c665 5f3 06 06 06 06 
3c669 5f4 06 00 00 00 
3c66d 5f5 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3c671 5f6 7C 7E 06 0E 
3c675 5f7 3C 70 60 7E 
3c679 5f8 3E 00 00 00 
3c67d 5f9 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3c681 5fa 7E 7E 18 18 
3c685 5fb 18 18 18 78 
3c689 5fc 70 00 00 00 
3c68d 5fd 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3c691 5fe 66 66 66 66 
3c695 5ff 66 66 66    | 	byte	$66[7]
3c698 600 7E 7C 00 00 
3c69c 601 00 00 00 00 
3c6a0 602 00 66 66 66 
3c6a4 603 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
3c6a8 604 18 18 00 00 
3c6ac 605 00 00 00 00 
3c6b0 606 00 C6 C6 D6 
3c6b4 607 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3c6b8 608 C6 82 00 00 
3c6bc 609 00 00 00 00 
3c6c0 60a 00 66 66 3C 
3c6c4 60b 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3c6c8 60c 66 66 00 00 
3c6cc 60d 00 00 00 00 
3c6d0 60e 00 66 66 66 
3c6d4 60f 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3c6d8 610 7C 60 7E 3E 
3c6dc 611 00 00 00 00 
3c6e0 612 00 7E 7E 30 
3c6e4 613 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3c6e8 614 7E 7E 00 00 
3c6ec 615 00 00 30 18 
3c6f0 616 18 18 18 0C 
3c6f4 617 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3c6f8 618 18 30 00 00 
3c6fc 619 00 00 18 18 
3c700 61a 18 18 18 18 
3c704 61b 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3c708 61c 18 18 00 00 
3c70c 61d 00 00 0C 18 
3c710 61e 18 18 18 30 
3c714 61f 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3c718 620 18 0C 00 00 
3c71c 621 00 00 6C 7E 
3c720 622 36 00 00 00 
3c724 623 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3c728 624 00 00 00 00 
3c72c 625 00 00 00 00 
3c730 626 00          | 	byte	$00[9]
3c731 626 18 18 18 18 
3c735 627 18 18 00 00 
3c739 628 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3c73c 629 00 6C FE FE 
3c740 62a 7C 38 10 00 
3c744 62b 18 18 18 F8 
3c748 62c F8 18 18 18 | a8_font        file "atari8.fnt"
3c74c 62d C0 C0 C0 C0 
3c750 62e C0 C0 C0 C0 | 	byte	$c0[8]
3c754 62f 18 18 18 1F 
3c758 630 1F 00 00 00 
3c75c 631 18 18 18 1F 
3c760 632 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3c764 633 00 00 00 1F 
3c768 634 1F 18 18 18 
3c76c 635 C0 E0 70 38 
3c770 636 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3c774 637 03 07 0E 1C 
3c778 638 38 70 E0 C0 
3c77c 639 80 C0 E0 F0 
3c780 63a F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3c784 63b 00 00 00 00 
3c788 63c F0 F0 F0 F0 
3c78c 63d 01 03 07 0F 
3c790 63e 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3c794 63f F0 F0 F0 F0 
3c798 640 00 00 00 00 
3c79c 641 0F 0F 0F 0F 
3c7a0 642 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3c7a4 643 FF FF 00 00 
3c7a8 644 00 00 00 00 
3c7ac 645 00 00 00 00 
3c7b0 646 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3c7b4 647 00 00 00 00 
3c7b8 648 0F 0F 0F 0F 
3c7bc 649 00 38 38 EE 
3c7c0 64a EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3c7c4 64b 00 00 00 F8 
3c7c8 64c F8 18 18 18 
3c7cc 64d 00 00 00 FF 
3c7d0 64e FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3c7d4 64f 18 18 18 FF 
3c7d8 650 FF 18 18 18 
3c7dc 651 00 00 3C 7E 
3c7e0 652 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3c7e4 653 00 00 00 00 
3c7e8 654 FF FF FF FF 
3c7ec 655 03 03 03 03 
3c7f0 656 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3c7f4 657 00 00 00 FF 
3c7f8 658 FF 18 18 18 
3c7fc 659 18 18 18 FF 
3c800 65a FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3c804 65b 0F 0F 0F 0F 
3c808 65c 0F 0F 0F 0F | 	byte	$0f[8]
3c80c 65d 18 18 18 F8 
3c810 65e F8 00 00 00 
3c814 65f 1E 06 1E 06 
3c818 660 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3c81c 661 00 18 3C 7E 
3c820 662 18 18 18 00 
3c824 663 00 18 18 18 
3c828 664 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3c82c 665 00 18 0C 7E 
3c830 666 0C 18 00 00 
3c834 667 00 18 30 7E 
3c838 668 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3c83c 669 00 00 00 00 
3c840 66a 00 00 00 00 
3c844 66b 00          | 	byte	$00[9]
3c845 66b 18 18 18 18 
3c849 66c 00 18 00 00 
3c84d 66d 66 66 66 00 
3c851 66e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3c855 66f 66 FF 66 66 
3c859 670 FF 66 00 18 
3c85d 671 7C 06 3C 60 
3c861 672 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3c865 673 66 36 18 0C 
3c869 674 66 62 00 38 
3c86d 675 6C 38 1C F6 
3c871 676 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3c875 677 18 18 18 00 
3c879 678 00 00 00 00 
3c87d 679 70 38 18 18 
3c881 67a 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3c885 67b 0E 1C 18 18 
3c889 67c 1C 0E 00 00 
3c88d 67d 66 3C FF 3C 
3c891 67e 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3c895 67f 18 18 7E 18 
3c899 680 18 00 00 00 
3c89d 681 00 00 00 00 
3c8a1 682 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3c8a5 683 00 00 7E 00 
3c8a9 684 00 00 00 00 
3c8ad 685 00 00 00 00 
3c8b1 686 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3c8b5 687 60 30 18 0C 
3c8b9 688 06 02 00 00 
3c8bd 689 3C 66 76 6E 
3c8c1 68a 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3c8c5 68b 18 1C 18 18 
3c8c9 68c 18 7E 00 00 
3c8cd 68d 3C 66 30 18 
3c8d1 68e 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3c8d5 68f 7E 30 18 30 
3c8d9 690 66 3C 00 00 
3c8dd 691 30 38 3C 36 
3c8e1 692 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3c8e5 693 7E 06 3E 60 
3c8e9 694 66 3C 00 00 
3c8ed 695 3C 06 3E 66 
3c8f1 696 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3c8f5 697 7E 60 30 18 
3c8f9 698 0C 0C 00 00 
3c8fd 699 3C 66 3C 66 
3c901 69a 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3c905 69b 3C 66 7C 60 
3c909 69c 30 1C 00 00 
3c90d 69d 00 18 18 00 
3c911 69e 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3c915 69f 00 18 18 00 
3c919 6a0 18 18 0C 60 
3c91d 6a1 30 18 0C 18 
3c921 6a2 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3c925 6a3 00 7E 00 00 
3c929 6a4 7E 00 00 06 
3c92d 6a5 0C 18 30 18 
3c931 6a6 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3c935 6a7 3C 66 30 18 
3c939 6a8 00 18 00 00 
3c93d 6a9 3C 66 76 76 
3c941 6aa 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3c945 6ab 18 3C 66 66 
3c949 6ac 7E 66 00 00 
3c94d 6ad 3E 66 3E 66 
3c951 6ae 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3c955 6af 3C 66 06 06 
3c959 6b0 66 3C 00 00 
3c95d 6b1 1E 36 66 66 
3c961 6b2 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3c965 6b3 7E 06 3E 06 
3c969 6b4 06 7E 00 00 
3c96d 6b5 7E 06 3E 06 
3c971 6b6 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3c975 6b7 7C 06 06 76 
3c979 6b8 66 7C 00 00 
3c97d 6b9 66 66 7E 66 
3c981 6ba 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3c985 6bb 7E 18 18 18 
3c989 6bc 18 7E 00 00 
3c98d 6bd 60 60 60 60 
3c991 6be 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3c995 6bf 66 36 1E 1E 
3c999 6c0 36 66 00 00 
3c99d 6c1 06 06 06 06 
3c9a1 6c2 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3c9a5 6c3 C6 EE FE D6 
3c9a9 6c4 C6 C6 00 00 
3c9ad 6c5 66 6E 7E 7E 
3c9b1 6c6 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3c9b5 6c7 3C 66 66 66 
3c9b9 6c8 66 3C 00 00 
3c9bd 6c9 3E 66 66 3E 
3c9c1 6ca 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3c9c5 6cb 3C 66 66 66 
3c9c9 6cc 36 6C 00 00 
3c9cd 6cd 3E 66 66 3E 
3c9d1 6ce 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3c9d5 6cf 3C 06 3C 60 
3c9d9 6d0 60 3C 00 00 
3c9dd 6d1 7E 18 18 18 
3c9e1 6d2 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3c9e5 6d3 66 66 66 66 
3c9e9 6d4 66          | 	byte	$66[5]
3c9ea 6d4 7E 00 00 66 
3c9ee 6d5 66 66 66 3C 
3c9f2 6d6 18 00 00 C6 
3c9f6 6d7 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3c9fa 6d8 C6 00 00 66 
3c9fe 6d9 66 3C 3C 66 
3ca02 6da 66 00 00 66 
3ca06 6db 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3ca0a 6dc 18 00 00 7E 
3ca0e 6dd 30 18 0C 06 
3ca12 6de 7E 00 00 78 
3ca16 6df 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3ca1a 6e0 78 00 00 02 
3ca1e 6e1 06 0C 18 30 
3ca22 6e2 60 00 00 1E 
3ca26 6e3 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3ca2a 6e4 1E 00 00 10 
3ca2e 6e5 38 6C C6 00 
3ca32 6e6 00 00 00 00 
3ca36 6e7 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ca3a 6e8 FF 00 00 18 
3ca3e 6e9 3C 7E 7E 3C 
3ca42 6ea 18 00 00 00 
3ca46 6eb 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3ca4a 6ec 7C 00 00 06 
3ca4e 6ed 06 3E 66 66 
3ca52 6ee 3E 00 00 00 
3ca56 6ef 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3ca5a 6f0 3C 00 00 60 
3ca5e 6f1 60 7C 66 66 
3ca62 6f2 7C 00 00 00 
3ca66 6f3 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3ca6a 6f4 3C 00 00 70 
3ca6e 6f5 18 7C 18 18 
3ca72 6f6 18 00 00 00 
3ca76 6f7 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3ca7a 6f8 60 3E 00 06 
3ca7e 6f9 06 3E 66 66 
3ca82 6fa 66 00 00 18 
3ca86 6fb 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3ca8a 6fc 3C 00 00 60 
3ca8e 6fd 00 60 60 60 
3ca92 6fe 60 3C 00 06 
3ca96 6ff 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3ca9a 700 66 00 00 1C 
3ca9e 701 18 18 18 18 
3caa2 702 3C 00 00 00 
3caa6 703 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3caaa 704 C6 00 00 00 
3caae 705 3E 66 66 66 
3cab2 706 66 00 00 00 
3cab6 707 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3caba 708 3C 00 00 00 
3cabe 709 3E 66 66 3E 
3cac2 70a 06 06 00 00 
3cac6 70b 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3caca 70c 60 60 00 00 
3cace 70d 3E 66 06 06 
3cad2 70e 06 00 00 00 
3cad6 70f 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3cada 710 3E 00 00 18 
3cade 711 7E 18 18 18 
3cae2 712 70 00 00 00 
3cae6 713 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3caea 714 7C 00 00 00 
3caee 715 66 66 66 3C 
3caf2 716 18 00 00 00 
3caf6 717 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3cafa 718 6C 00 00 00 
3cafe 719 66 3C 18 3C 
3cb02 71a 66 00 00 00 
3cb06 71b 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3cb0a 71c 30 1E 00 00 
3cb0e 71d 7E 30 18 0C 
3cb12 71e 7E 00 00 18 
3cb16 71f 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3cb1a 720 3C 00 18 18 
3cb1e 721 18 18 18 18 
3cb22 722 18 18 00 7E 
3cb26 723 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3cb2a 724 60 00 10 18 
3cb2e 725 1C 1E 1C 18 
3cb32 726 10 00 08 18 
3cb36 727 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3cb3a 728 08 00       | 	byte	$08, $00
3cb3c 729 00 6C FE FE 
3cb40 72a 7C 38 10 00 
3cb44 72b 18 18 18 F8 
3cb48 72c F8 18 18 18 | a8_font2       file "atari8.fnt"
3cb4c 72d C0 C0 C0 C0 
3cb50 72e C0 C0 C0 C0 | 	byte	$c0[8]
3cb54 72f 18 18 18 1F 
3cb58 730 1F 00 00 00 
3cb5c 731 18 18 18 1F 
3cb60 732 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3cb64 733 00 00 00 1F 
3cb68 734 1F 18 18 18 
3cb6c 735 C0 E0 70 38 
3cb70 736 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3cb74 737 03 07 0E 1C 
3cb78 738 38 70 E0 C0 
3cb7c 739 80 C0 E0 F0 
3cb80 73a F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3cb84 73b 00 00 00 00 
3cb88 73c F0 F0 F0 F0 
3cb8c 73d 01 03 07 0F 
3cb90 73e 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3cb94 73f F0 F0 F0 F0 
3cb98 740 00 00 00 00 
3cb9c 741 0F 0F 0F 0F 
3cba0 742 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3cba4 743 FF FF 00 00 
3cba8 744 00 00 00 00 
3cbac 745 00 00 00 00 
3cbb0 746 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3cbb4 747 00 00 00 00 
3cbb8 748 0F 0F 0F 0F 
3cbbc 749 00 38 38 EE 
3cbc0 74a EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3cbc4 74b 00 00 00 F8 
3cbc8 74c F8 18 18 18 
3cbcc 74d 00 00 00 FF 
3cbd0 74e FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3cbd4 74f 18 18 18 FF 
3cbd8 750 FF 18 18 18 
3cbdc 751 00 00 3C 7E 
3cbe0 752 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3cbe4 753 00 00 00 00 
3cbe8 754 FF FF FF FF 
3cbec 755 03 03 03 03 
3cbf0 756 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3cbf4 757 00 00 00 FF 
3cbf8 758 FF 18 18 18 
3cbfc 759 18 18 18 FF 
3cc00 75a FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3cc04 75b 0F 0F 0F 0F 
3cc08 75c 0F 0F 0F 0F | 	byte	$0f[8]
3cc0c 75d 18 18 18 F8 
3cc10 75e F8 00 00 00 
3cc14 75f 1E 06 1E 06 
3cc18 760 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3cc1c 761 00 18 3C 7E 
3cc20 762 18 18 18 00 
3cc24 763 00 18 18 18 
3cc28 764 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3cc2c 765 00 18 0C 7E 
3cc30 766 0C 18 00 00 
3cc34 767 00 18 30 7E 
3cc38 768 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3cc3c 769 00 00 00 00 
3cc40 76a 00 00 00 00 
3cc44 76b 00          | 	byte	$00[9]
3cc45 76b 18 18 18 18 
3cc49 76c 00 18 00 00 
3cc4d 76d 66 66 66 00 
3cc51 76e 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3cc55 76f 66 FF 66 66 
3cc59 770 FF 66 00 18 
3cc5d 771 7C 06 3C 60 
3cc61 772 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3cc65 773 66 36 18 0C 
3cc69 774 66 62 00 38 
3cc6d 775 6C 38 1C F6 
3cc71 776 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3cc75 777 18 18 18 00 
3cc79 778 00 00 00 00 
3cc7d 779 70 38 18 18 
3cc81 77a 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3cc85 77b 0E 1C 18 18 
3cc89 77c 1C 0E 00 00 
3cc8d 77d 66 3C FF 3C 
3cc91 77e 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3cc95 77f 18 18 7E 18 
3cc99 780 18 00 00 00 
3cc9d 781 00 00 00 00 
3cca1 782 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3cca5 783 00 00 7E 00 
3cca9 784 00 00 00 00 
3ccad 785 00 00 00 00 
3ccb1 786 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3ccb5 787 60 30 18 0C 
3ccb9 788 06 02 00 00 
3ccbd 789 3C 66 76 6E 
3ccc1 78a 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3ccc5 78b 18 1C 18 18 
3ccc9 78c 18 7E 00 00 
3cccd 78d 3C 66 30 18 
3ccd1 78e 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3ccd5 78f 7E 30 18 30 
3ccd9 790 66 3C 00 00 
3ccdd 791 30 38 3C 36 
3cce1 792 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3cce5 793 7E 06 3E 60 
3cce9 794 66 3C 00 00 
3cced 795 3C 06 3E 66 
3ccf1 796 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3ccf5 797 7E 60 30 18 
3ccf9 798 0C 0C 00 00 
3ccfd 799 3C 66 3C 66 
3cd01 79a 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3cd05 79b 3C 66 7C 60 
3cd09 79c 30 1C 00 00 
3cd0d 79d 00 18 18 00 
3cd11 79e 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3cd15 79f 00 18 18 00 
3cd19 7a0 18 18 0C 60 
3cd1d 7a1 30 18 0C 18 
3cd21 7a2 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3cd25 7a3 00 7E 00 00 
3cd29 7a4 7E 00 00 06 
3cd2d 7a5 0C 18 30 18 
3cd31 7a6 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3cd35 7a7 3C 66 30 18 
3cd39 7a8 00 18 00 00 
3cd3d 7a9 3C 66 76 76 
3cd41 7aa 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3cd45 7ab 18 3C 66 66 
3cd49 7ac 7E 66 00 00 
3cd4d 7ad 3E 66 3E 66 
3cd51 7ae 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3cd55 7af 3C 66 06 06 
3cd59 7b0 66 3C 00 00 
3cd5d 7b1 1E 36 66 66 
3cd61 7b2 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3cd65 7b3 7E 06 3E 06 
3cd69 7b4 06 7E 00 00 
3cd6d 7b5 7E 06 3E 06 
3cd71 7b6 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3cd75 7b7 7C 06 06 76 
3cd79 7b8 66 7C 00 00 
3cd7d 7b9 66 66 7E 66 
3cd81 7ba 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3cd85 7bb 7E 18 18 18 
3cd89 7bc 18 7E 00 00 
3cd8d 7bd 60 60 60 60 
3cd91 7be 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3cd95 7bf 66 36 1E 1E 
3cd99 7c0 36 66 00 00 
3cd9d 7c1 06 06 06 06 
3cda1 7c2 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3cda5 7c3 C6 EE FE D6 
3cda9 7c4 C6 C6 00 00 
3cdad 7c5 66 6E 7E 7E 
3cdb1 7c6 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3cdb5 7c7 3C 66 66 66 
3cdb9 7c8 66 3C 00 00 
3cdbd 7c9 3E 66 66 3E 
3cdc1 7ca 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3cdc5 7cb 3C 66 66 66 
3cdc9 7cc 36 6C 00 00 
3cdcd 7cd 3E 66 66 3E 
3cdd1 7ce 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3cdd5 7cf 3C 06 3C 60 
3cdd9 7d0 60 3C 00 00 
3cddd 7d1 7E 18 18 18 
3cde1 7d2 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3cde5 7d3 66 66 66 66 
3cde9 7d4 66          | 	byte	$66[5]
3cdea 7d4 7E 00 00 66 
3cdee 7d5 66 66 66 3C 
3cdf2 7d6 18 00 00 C6 
3cdf6 7d7 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3cdfa 7d8 C6 00 00 66 
3cdfe 7d9 66 3C 3C 66 
3ce02 7da 66 00 00 66 
3ce06 7db 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3ce0a 7dc 18 00 00 7E 
3ce0e 7dd 30 18 0C 06 
3ce12 7de 7E 00 00 78 
3ce16 7df 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3ce1a 7e0 78 00 00 02 
3ce1e 7e1 06 0C 18 30 
3ce22 7e2 60 00 00 1E 
3ce26 7e3 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3ce2a 7e4 1E 00 00 10 
3ce2e 7e5 38 6C C6 00 
3ce32 7e6 00 00 00 00 
3ce36 7e7 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ce3a 7e8 FF 00 00 18 
3ce3e 7e9 3C 7E 7E 3C 
3ce42 7ea 18 00 00 00 
3ce46 7eb 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3ce4a 7ec 7C 00 00 06 
3ce4e 7ed 06 3E 66 66 
3ce52 7ee 3E 00 00 00 
3ce56 7ef 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3ce5a 7f0 3C 00 00 60 
3ce5e 7f1 60 7C 66 66 
3ce62 7f2 7C 00 00 00 
3ce66 7f3 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3ce6a 7f4 3C 00 00 70 
3ce6e 7f5 18 7C 18 18 
3ce72 7f6 18 00 00 00 
3ce76 7f7 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3ce7a 7f8 60 3E 00 06 
3ce7e 7f9 06 3E 66 66 
3ce82 7fa 66 00 00 18 
3ce86 7fb 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3ce8a 7fc 3C 00 00 60 
3ce8e 7fd 00 60 60 60 
3ce92 7fe 60 3C 00 06 
3ce96 7ff 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3ce9a 800 66 00 00 1C 
3ce9e 801 18 18 18 18 
3cea2 802 3C 00 00 00 
3cea6 803 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3ceaa 804 C6 00 00 00 
3ceae 805 3E 66 66 66 
3ceb2 806 66 00 00 00 
3ceb6 807 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3ceba 808 3C 00 00 00 
3cebe 809 3E 66 66 3E 
3cec2 80a 06 06 00 00 
3cec6 80b 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3ceca 80c 60 60 00 00 
3cece 80d 3E 66 06 06 
3ced2 80e 06 00 00 00 
3ced6 80f 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3ceda 810 3E 00 00 18 
3cede 811 7E 18 18 18 
3cee2 812 70 00 00 00 
3cee6 813 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3ceea 814 7C 00 00 00 
3ceee 815 66 66 66 3C 
3cef2 816 18 00 00 00 
3cef6 817 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3cefa 818 6C 00 00 00 
3cefe 819 66 3C 18 3C 
3cf02 81a 66 00 00 00 
3cf06 81b 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3cf0a 81c 30 1E 00 00 
3cf0e 81d 7E 30 18 0C 
3cf12 81e 7E 00 00 18 
3cf16 81f 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3cf1a 820 3C 00 18 18 
3cf1e 821 18 18 18 18 
3cf22 822 18 18 00 7E 
3cf26 823 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3cf2a 824 60 00 10 18 
3cf2e 825 1C 1E 1C 18 
3cf32 826 10 00 08 18 
3cf36 827 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3cf3a 828 08 00       | 	byte	$08, $00
3cf3c 829 00 00 00 00 
      ...             
3d148 8ac 00 00 00 00 
3d14c 8ad 00 00       | amiga_font     file "amigafont.def"
3d14e 8ad 18 18 18 18 
3d152 8ae 18 18       | 	byte	$18[6]
3d154 8af 00 18 18 00 
3d158 8b0 00 00 00 00 
3d15c 8b1 00 00 66 66 
3d160 8b2 66 00 00 00 | 	byte	$00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $00, $00, $00
3d164 8b3 00 00 00 00 
3d168 8b4 00 00 00 00 
3d16c 8b5 00 00       | 	byte	$00[10]
3d16e 8b5 36 36 7F 36 
3d172 8b6 36 36 7F 36 
3d176 8b7 36 00 00 00 
3d17a 8b8 00 00 00 00 | 	byte	$36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $00, $00, $00
3d17e 8b9 18 7C 06 06 
3d182 8ba 3C 60 60 3E 
3d186 8bb 18 00 00 00 
3d18a 8bc 00 00 00 00 | 	byte	$18, $7c, $06, $06, $3c, $60, $60, $3e, $18, $00, $00, $00, $00, $00, $00, $00
3d18e 8bd 00 00 C6 69 
3d192 8be 36 18 6C 96 
3d196 8bf 63 00 00 00 
3d19a 8c0 00 00 00 00 | 	byte	$00, $00, $c6, $69, $36, $18, $6c, $96, $63, $00, $00, $00, $00, $00, $00, $00
3d19e 8c1 1C 36 36 1E 
3d1a2 8c2 6E 3B 33 73 
3d1a6 8c3 DE 00 00 00 
3d1aa 8c4 00 00 00 00 | 	byte	$1c, $36, $36, $1e, $6e, $3b, $33, $73, $de, $00, $00, $00, $00, $00, $00, $00
3d1ae 8c5 18 18 0C 00 
3d1b2 8c6 00 00 00 00 
3d1b6 8c7 00 00 00 00 
3d1ba 8c8 00 00 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d1be 8c9 30 18 0C 0C 
3d1c2 8ca 0C 0C 0C 18 
3d1c6 8cb 30 00 00 00 
3d1ca 8cc 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00, $00
3d1ce 8cd 0C 18 30 30 
3d1d2 8ce 30 30 30 18 
3d1d6 8cf 0C 00 00 00 
3d1da 8d0 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00, $00
3d1de 8d1 00 66 66 3C 
3d1e2 8d2 FF 3C 66 66 
3d1e6 8d3 00 00 00 00 
3d1ea 8d4 00 00 00 00 | 	byte	$00, $66, $66, $3c, $ff, $3c, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00
3d1ee 8d5 00 18 18 18 
3d1f2 8d6 7E 18 18 18 
3d1f6 8d7 00 00 00 00 
3d1fa 8d8 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3d1fe 8d9 00 00 00 00 
3d202 8da 00 00 00    | 	byte	$00[7]
3d205 8db 18 18 0C 00 
3d209 8dc 00 00 00 00 
3d20d 8dd 00 00 00 00 
3d211 8de 00 7E 00 00 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00
3d215 8df 00 00 00 00 
3d219 8e0 00 00 00 00 
3d21d 8e1 00 00 00 00 
3d221 8e2 00 00 00 00 | 	byte	$00[16]
3d225 8e3 18 18 00 00 
3d229 8e4 00 00 00 00 
3d22d 8e5 00 00 C0 60 
3d231 8e6 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $c0, $60, $30, $18, $0c, $06
3d235 8e7 03 00 00 00 
3d239 8e8 00 00 00 00 
3d23d 8e9 00 3C 66 66 
3d241 8ea 76 7E 6E 66 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $76, $7e, $6e, $66
3d245 8eb 66 3C 00 00 
3d249 8ec 00 00 00 00 
3d24d 8ed 00 18 1C 1E 
3d251 8ee 18 18 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18
3d255 8ef 18 18 00 00 
3d259 8f0 00 00 00 00 
3d25d 8f1 00 3C 66 60 
3d261 8f2 60 30 18 0C | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $30, $18, $0c
3d265 8f3 06 7E 00 00 
3d269 8f4 00 00 00 00 
3d26d 8f5 00 3C 66 60 
3d271 8f6 60 38 60 60 | 	byte	$06, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60, $60, $38, $60, $60
3d275 8f7 66 3C 00 00 
3d279 8f8 00 00 00 00 
3d27d 8f9 00 30 38 3C 
3d281 8fa 36 33 7F 30 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30
3d285 8fb 30 30 00 00 
3d289 8fc 00 00 00 00 
3d28d 8fd 00 7E 06 06 
3d291 8fe 3E 60 60 60 | 	byte	$30, $30, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06, $3e, $60, $60, $60
3d295 8ff 66 3C 00 00 
3d299 900 00 00 00 00 
3d29d 901 00 38 0C 06 
3d2a1 902 06 3E 66 66 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $06, $06, $3e, $66, $66
3d2a5 903 66 3C 00 00 
3d2a9 904 00 00 00 00 
3d2ad 905 00 7E 60 60 
3d2b1 906 60 30 18 18 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $7e, $60, $60, $60, $30, $18, $18
3d2b5 907 18 18 00 00 
3d2b9 908 00 00 00 00 
3d2bd 909 00 3C 66 66 
3d2c1 90a 66 3C 66 66 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $3c, $66, $66
3d2c5 90b 66 3C 00 00 
3d2c9 90c 00 00 00 00 
3d2cd 90d 00 3C 66 66 
3d2d1 90e 66 7C 60 60 | 	byte	$66, $3c, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $7c, $60, $60
3d2d5 90f 30 1C 00 00 
3d2d9 910 00 00 00 00 
3d2dd 911 00 00 00 18 
3d2e1 912 18 00 00 18 | 	byte	$30, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $18
3d2e5 913 18 00 00 00 
3d2e9 914 00 00 00 00 
3d2ed 915 00 00 00 18 
3d2f1 916 18 00 00 00 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3d2f5 917 18 18 0C 00 
3d2f9 918 00 00 00 00 
3d2fd 919 00 00 00 60 
3d301 91a 18 06 18 60 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $60, $18, $06, $18, $60
3d305 91b 00 00 00 00 
3d309 91c 00 00 00 00 
3d30d 91d 00 00 00 00 | 	byte	$00[12]
3d311 91e 7E 00 7E 00 
3d315 91f 00 00 00 00 
3d319 920 00 00 00 00 
3d31d 921 00 00 00 06 | 	byte	$7e, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $06
3d321 922 18 60 18 06 
3d325 923 00 00 00 00 
3d329 924 00 00 00 00 
3d32d 925 00 3C 66 60 | 	byte	$18, $60, $18, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $60
3d331 926 60 30 18 00 
3d335 927 18 18 00 00 
3d339 928 00 00 00 00 
3d33d 929 00 3E 63 63 | 	byte	$60, $30, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
3d341 92a 7B 6B 7B 03 
3d345 92b 03 1E 00 00 
3d349 92c 00 00 00 00 
3d34d 92d 00 3E 63 63 | 	byte	$7b, $6b, $7b, $03, $03, $1e, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63
3d351 92e 63 7F 63 63 
3d355 92f 63 63 00 00 
3d359 930 00 00 00 00 
3d35d 931 00 3E 66 66 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66
3d361 932 66 3E 66 66 
3d365 933 66 3E 00 00 
3d369 934 00 00 00 00 
3d36d 935 00 78 0C 06 | 	byte	$66, $3e, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $78, $0c, $06
3d371 936 06 06 06 06 
3d375 937 0C 78 00 00 
3d379 938 00 00 00 00 
3d37d 939 00 1F 33 63 | 	byte	$06, $06, $06, $06, $0c, $78, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $63
3d381 93a 63 63 63 63 
3d385 93b 33 1F 00 00 
3d389 93c 00 00 00 00 
3d38d 93d 00 7E 06 06 | 	byte	$63, $63, $63, $63, $33, $1f, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
3d391 93e 06 1E 06 06 
3d395 93f 06 7E 00 00 
3d399 940 00 00 00 00 
3d39d 941 00 7E 06 06 | 	byte	$06, $1e, $06, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00, $7e, $06, $06
3d3a1 942 06 1E 06 06 
3d3a5 943 06 06 00 00 
3d3a9 944 00 00 00 00 
3d3ad 945 00 3C 66 06 | 	byte	$06, $1e, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06
3d3b1 946 06 76 66 66 
3d3b5 947 66 7C 00 00 
3d3b9 948 00 00 00 00 
3d3bd 949 00 63 63 63 | 	byte	$06, $76, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63
3d3c1 94a 63 7F 63 63 
3d3c5 94b 63 63 00 00 
3d3c9 94c 00 00 00 00 
3d3cd 94d 00 3C 18 18 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00, $3c, $18, $18
3d3d1 94e 18 18 18 18 
3d3d5 94f 18          | 	byte	$18[5]
3d3d6 94f 3C 00 00 00 
3d3da 950 00 00 00 00 
3d3de 951 60 60 60 60 
3d3e2 952 60 60 60 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60, $60, $60, $60, $60, $63
3d3e6 953 3E 00 00 00 
3d3ea 954 00 00 00 00 
3d3ee 955 C3 63 33 1B 
3d3f2 956 0F 1B 33 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $c3, $63, $33, $1b, $0f, $1b, $33, $63
3d3f6 957 C3 00 00 00 
3d3fa 958 00 00 00 00 
3d3fe 959 03 03 03 03 
3d402 95a 03 03 03 03 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $03, $03, $03, $03, $03, $03, $03, $03
3d406 95b 7F 00 00 00 
3d40a 95c 00 00 00 00 
3d40e 95d 63 77 7F 6B 
3d412 95e 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $6b, $63, $63, $63, $63
3d416 95f 63 00 00 00 
3d41a 960 00 00 00 00 
3d41e 961 63 67 6F 7B 
3d422 962 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7b, $73, $63, $63, $63
3d426 963 63 00 00 00 
3d42a 964 00 00 00 00 
3d42e 965 3E 63 63 63 
3d432 966 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63
3d436 967 3E 00 00 00 
3d43a 968 00 00 00 00 
3d43e 969 3E 66 66 66 
3d442 96a 3E 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e, $06, $06, $06
3d446 96b 06 00 00 00 
3d44a 96c 00 00 00 00 
3d44e 96d 3E 63 63 63 
3d452 96e 63 63 63 7B | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $7b
3d456 96f FE 00 00 00 
3d45a 970 00 00 00 00 
3d45e 971 1F 33 33 33 
3d462 972 1F 1B 33 63 | 	byte	$fe, $00, $00, $00, $00, $00, $00, $00, $1f, $33, $33, $33, $1f, $1b, $33, $63
3d466 973 63 00 00 00 
3d46a 974 00 00 00 00 
3d46e 975 3C 66 06 0C 
3d472 976 18 30 60 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $06, $0c, $18, $30, $60, $66
3d476 977 3C 00 00 00 
3d47a 978 00 00 00 00 
3d47e 979 7E 18 18 18 
3d482 97a 18 18 18 18 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $7e, $18, $18, $18, $18, $18, $18, $18
3d486 97b 18 00 00 00 
3d48a 97c 00 00 00 00 
3d48e 97d 63 63 63 63 
3d492 97e 63 63 63 63 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63
3d496 97f 3E 00 00 00 
3d49a 980 00 00 00 00 
3d49e 981 63 63 63 63 
3d4a2 982 63 36 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36, $36, $1c
3d4a6 983 08 00 00 00 
3d4aa 984 00 00 00 00 
3d4ae 985 C3 C3 C3 C3 
3d4b2 986 C3 DB FF E7 | 	byte	$08, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $c3, $c3, $c3, $db, $ff, $e7
3d4b6 987 C3 00 00 00 
3d4ba 988 00 00 00 00 
3d4be 989 C3 C3 66 3C 
3d4c2 98a 18 3C 66 C3 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $3c, $66, $c3
3d4c6 98b C3 00 00 00 
3d4ca 98c 00 00 00 00 
3d4ce 98d C3 C3 66 3C 
3d4d2 98e 18 18 18 18 | 	byte	$c3, $00, $00, $00, $00, $00, $00, $00, $c3, $c3, $66, $3c, $18, $18, $18, $18
3d4d6 98f 18 00 00 00 
3d4da 990 00 00 00 00 
3d4de 991 7F 60 60 30 
3d4e2 992 18 0C 06 03 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $7f, $60, $60, $30, $18, $0c, $06, $03
3d4e6 993 7F 00 00 00 
3d4ea 994 00 00 00 00 
3d4ee 995 3C 0C 0C 0C 
3d4f2 996 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3d4f6 997 3C 00 00 00 
3d4fa 998 00 00 00 00 
3d4fe 999 00 03 06 0C 
3d502 99a 18 30 60 C0 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $03, $06, $0c, $18, $30, $60, $c0
3d506 99b 00 00 00 00 
3d50a 99c 00 00 00 00 | 	byte	$00[8]
3d50e 99d 3C 30 30 30 
3d512 99e 30 30 30 30 
3d516 99f 3C 00 00 00 
3d51a 9a0 00 00 00 00 | 	byte	$3c, $30, $30, $30, $30, $30, $30, $30, $3c, $00, $00, $00, $00, $00, $00, $00
3d51e 9a1 08 1C 36 63 
3d522 9a2 00 00 00 00 
3d526 9a3 00 00 00 00 
3d52a 9a4 00 00 00 00 | 	byte	$08, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d52e 9a5 00 00 00 00 
3d532 9a6 00 00 00 00 
3d536 9a7 00          | 	byte	$00[9]
3d537 9a7 7F 00 00 00 
3d53b 9a8 00 00 00 18 
3d53f 9a9 18 30 00 00 
3d543 9aa 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $18, $18, $30, $00, $00, $00, $00, $00, $00
3d547 9ab 00 00 00 00 
3d54b 9ac 00 00 00 00 
3d54f 9ad 00 00       | 	byte	$00[10]
3d551 9ae 3C 60 7C 66 
3d555 9af 66 7C 00 00 
3d559 9b0 00 00 00 00 
3d55d 9b1 00 06 06 06 | 	byte	$3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $06, $06, $06
3d561 9b2 3E 66 66 66 
3d565 9b3 66 3E 00 00 
3d569 9b4 00 00 00 00 
3d56d 9b5 00 00 00 00 | 	byte	$3e, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d571 9b6 3C 06 06 06 
3d575 9b7 06 3C 00 00 
3d579 9b8 00 00 00 00 
3d57d 9b9 00 60 60 60 | 	byte	$3c, $06, $06, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $60, $60, $60
3d581 9ba 7C 66 66 66 
3d585 9bb 66 7C 00 00 
3d589 9bc 00 00 00 00 
3d58d 9bd 00 00 00 00 | 	byte	$7c, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d591 9be 3C 66 7E 06 
3d595 9bf 06 3C 00 00 
3d599 9c0 00 00 00 00 
3d59d 9c1 00 38 0C 0C | 	byte	$3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00, $38, $0c, $0c
3d5a1 9c2 3E 0C 0C 0C 
3d5a5 9c3 0C 0C 00 00 
3d5a9 9c4 00 00 00 00 
3d5ad 9c5 00 00 00 00 | 	byte	$3e, $0c, $0c, $0c, $0c, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d5b1 9c6 7C 66 66 66 
3d5b5 9c7 7C 60 60 3C 
3d5b9 9c8 00 00 00 00 
3d5bd 9c9 00 06 06 06 | 	byte	$7c, $66, $66, $66, $7c, $60, $60, $3c, $00, $00, $00, $00, $00, $06, $06, $06
3d5c1 9ca 3E 66 66 66 
3d5c5 9cb 66 66 00 00 
3d5c9 9cc 00 00 00 00 
3d5cd 9cd 00 00 18 00 | 	byte	$3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $18, $00
3d5d1 9ce 18 18 18 18 
3d5d5 9cf 18          | 	byte	$18[5]
3d5d6 9cf 30 00 00 00 
3d5da 9d0 00 00 00 00 
3d5de 9d1 00 30 00 30 
3d5e2 9d2 30 30 30 30 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $30, $00, $30, $30, $30, $30, $30
3d5e6 9d3 30 30 1E 00 
3d5ea 9d4 00 00 00 00 
3d5ee 9d5 03 03 03 33 
3d5f2 9d6 1B 0F 1B 33 | 	byte	$30, $30, $1e, $00, $00, $00, $00, $00, $03, $03, $03, $33, $1b, $0f, $1b, $33
3d5f6 9d7 63 00 00 00 
3d5fa 9d8 00 00 00 00 
3d5fe 9d9 18 18 18 18 
3d602 9da 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
3d606 9db 30 00 00 00 
3d60a 9dc 00 00 00 00 
3d60e 9dd 00 00 00 37 
3d612 9de 7F 6B 63 63 | 	byte	$30, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $63, $63
3d616 9df 63 00 00 00 
3d61a 9e0 00 00 00 00 
3d61e 9e1 00 00 00 3E 
3d622 9e2 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $66
3d626 9e3 66 00 00 00 
3d62a 9e4 00 00 00 00 
3d62e 9e5 00 00 00 3C 
3d632 9e6 66 66 66 66 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $66, $66, $66, $66
3d636 9e7 3C 00 00 00 
3d63a 9e8 00 00 00 00 
3d63e 9e9 00 00 00 3E 
3d642 9ea 66 66 66 3E | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $66, $66, $3e
3d646 9eb 06 06 06 00 
3d64a 9ec 00 00 00 00 
3d64e 9ed 00 00 00 7C 
3d652 9ee 66 66 66 7C | 	byte	$06, $06, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7c, $66, $66, $66, $7c
3d656 9ef 60 60 60 00 
3d65a 9f0 00 00 00 00 
3d65e 9f1 00 00 00 3E 
3d662 9f2 66 06 06 06 | 	byte	$60, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $66, $06, $06, $06
3d666 9f3 06 00 00 00 
3d66a 9f4 00 00 00 00 
3d66e 9f5 00 00 00 3C 
3d672 9f6 06 0C 30 60 | 	byte	$06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3c, $06, $0c, $30, $60
3d676 9f7 3E 00 00 00 
3d67a 9f8 00 00 00 00 
3d67e 9f9 00 0C 0C 3E 
3d682 9fa 0C 0C 0C 0C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $0c, $0c, $3e, $0c, $0c, $0c, $0c
3d686 9fb 38 00 00 00 
3d68a 9fc 00 00 00 00 
3d68e 9fd 00 00 00 66 
3d692 9fe 66 66 66 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66
3d696 9ff 7C 00 00 00 
3d69a a00 00 00 00 00 
3d69e a01 00 00 00 66 
3d6a2 a02 66 66 66 3C | 	byte	$7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
3d6a6 a03 18 00 00 00 
3d6aa a04 00 00 00 00 
3d6ae a05 00 00 00 63 
3d6b2 a06 63 63 6B 3E | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $6b, $3e
3d6b6 a07 36 00 00 00 
3d6ba a08 00 00 00 00 
3d6be a09 00 00 00 63 
3d6c2 a0a 36 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36
3d6c6 a0b 63 00 00 00 
3d6ca a0c 00 00 00 00 
3d6ce a0d 00 00 00 66 
3d6d2 a0e 66 66 66 3C | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c
3d6d6 a0f 18 0C 06 00 
3d6da a10 00 00 00 00 
3d6de a11 00 00 00 7E 
3d6e2 a12 30 18 0C 06 | 	byte	$18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $30, $18, $0c, $06
3d6e6 a13 7E 00 00 00 
3d6ea a14 00 00 00 00 
3d6ee a15 70 18 18 18 
3d6f2 a16 0E 18 18 18 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18
3d6f6 a17 70 00 00 00 
3d6fa a18 00 00 00 00 
3d6fe a19 18 18 18 18 
3d702 a1a 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18
3d706 a1b 18 00 00 00 
3d70a a1c 00 00 00 00 
3d70e a1d 0E 18 18 18 
3d712 a1e 70 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18
3d716 a1f 0E 00 00 00 
3d71a a20 00 00 00 00 
3d71e a21 46 5D 31 00 
3d722 a22 00 00 00 00 | 	byte	$0e, $00, $00, $00, $00, $00, $00, $00, $46, $5d, $31, $00, $00, $00, $00, $00
3d726 a23 00 00 00 00 
3d72a a24 00 00 00 00 | 	byte	$00[8]
3d72e a25 C0 F0 3C 0F 
3d732 a26 C3 F0 3C 0F 
3d736 a27 03 00 00 00 
3d73a a28 00 00 00 00 | 	byte	$c0, $f0, $3c, $0f, $c3, $f0, $3c, $0f, $03, $00, $00, $00, $00, $00, $00, $00
3d73e a29 18 18 00 18 
3d742 a2a 18 18 18 18 
3d746 a2b 18 00 00 00 
3d74a a2c 00 00 00 00 | 	byte	$18, $18, $00, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3d74e a2d 18 18 7E 1B 
3d752 a2e 1B 7E 18 18 
3d756 a2f 00 00 00 00 
3d75a a30 00 00 00 00 | 	byte	$18, $18, $7e, $1b, $1b, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3d75e a31 78 CC 0C 0C 
3d762 a32 1E 0C 0C 06 
3d766 a33 7F 00 00 00 
3d76a a34 00 00 00 00 | 	byte	$78, $cc, $0c, $0c, $1e, $0c, $0c, $06, $7f, $00, $00, $00, $00, $00, $00, $00
3d76e a35 66 3C 66 66 
3d772 a36 3C 66 00 00 
3d776 a37 00 00 00 00 
3d77a a38 00 00 00 00 | 	byte	$66, $3c, $66, $66, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d77e a39 C3 C3 66 3C 
3d782 a3a 18 7E 18 18 
3d786 a3b 18 00 00 00 
3d78a a3c 00 00 00 00 | 	byte	$c3, $c3, $66, $3c, $18, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3d78e a3d 18 18 18 18 
3d792 a3e 00 18 18 18 
3d796 a3f 18 00 00 00 
3d79a a40 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3d79e a41 3C 06 06 3C 
3d7a2 a42 66 66 66 3C 
3d7a6 a43 60 60 3C 00 
3d7aa a44 00 00 00 00 | 	byte	$3c, $06, $06, $3c, $66, $66, $66, $3c, $60, $60, $3c, $00, $00, $00, $00, $00
3d7ae a45 66 66 00 00 
3d7b2 a46 00 00 00 00 
3d7b6 a47 00 00 00 00 
3d7ba a48 00 00 00 00 | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d7be a49 7E 81 B9 85 
3d7c2 a4a 85 B9 81 7E 
3d7c6 a4b 00 00 00 00 
3d7ca a4c 00 00 00 00 | 	byte	$7e, $81, $b9, $85, $85, $b9, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3d7ce a4d 3C 33 33 7E 
3d7d2 a4e 00 7F 00 00 
3d7d6 a4f 00 00 00 00 
3d7da a50 00 00 00 00 | 	byte	$3c, $33, $33, $7e, $00, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d7de a51 00 00 CC 66 
3d7e2 a52 33 66 CC 00 
3d7e6 a53 00 00 00 00 
3d7ea a54 00 00 00 00 | 	byte	$00, $00, $cc, $66, $33, $66, $cc, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d7ee a55 7E 60 60 00 
3d7f2 a56 00 00 00 00 
3d7f6 a57 00 00 00 00 
3d7fa a58 00 00 00 00 | 	byte	$7e, $60, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d7fe a59 7E 81 9D A5 
3d802 a5a 9D A5 81 7E 
3d806 a5b 00 00 00 00 
3d80a a5c 00 00 00 00 | 	byte	$7e, $81, $9d, $a5, $9d, $a5, $81, $7e, $00, $00, $00, $00, $00, $00, $00, $00
3d80e a5d 7E 00 00 00 
3d812 a5e 00 00 00 00 
3d816 a5f 00 00 00 00 
3d81a a60 00 00 00 00 | 	byte	$7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d81e a61 3C 66 66 3C 
3d822 a62 00 00 00 00 
3d826 a63 00 00 00 00 
3d82a a64 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d82e a65 18 18 18 7E 
3d832 a66 18 18 18 00 
3d836 a67 7E 00 00 00 
3d83a a68 00 00 00 00 | 	byte	$18, $18, $18, $7e, $18, $18, $18, $00, $7e, $00, $00, $00, $00, $00, $00, $00
3d83e a69 1E 30 30 18 
3d842 a6a 0C 06 3E 00 
3d846 a6b 00 00 00 00 
3d84a a6c 00 00 00 00 | 	byte	$1e, $30, $30, $18, $0c, $06, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d84e a6d 1E 30 30 1C 
3d852 a6e 30 30 1E 00 
3d856 a6f 00 00 00 00 
3d85a a70 00 00 00 00 | 	byte	$1e, $30, $30, $1c, $30, $30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d85e a71 30 18 0C 06 
3d862 a72 00 00 00 00 
3d866 a73 00 00 00 00 
3d86a a74 00 00 00 00 | 	byte	$30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d86e a75 00 00 00 66 
3d872 a76 66 66 66 66 
3d876 a77 FE 06 06 00 
3d87a a78 00 00 00 00 | 	byte	$00, $00, $00, $66, $66, $66, $66, $66, $fe, $06, $06, $00, $00, $00, $00, $00
3d87e a79 7C 5E 5E 5E 
3d882 a7a 5C 50 50 50 
3d886 a7b 50 50 00 00 
3d88a a7c 00 00 00 00 | 	byte	$7c, $5e, $5e, $5e, $5c, $50, $50, $50, $50, $50, $00, $00, $00, $00, $00, $00
3d88e a7d 00 00 00 18 
3d892 a7e 18 00 00 00 
3d896 a7f 00 00 00 00 
3d89a a80 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d89e a81 00 00 00 00 
3d8a2 a82 00 00 00 00 
3d8a6 a83 00          | 	byte	$00[9]
3d8a7 a83 30 18 00 00 
3d8ab a84 00 00 00 18 
3d8af a85 1C 18 18 18 
3d8b3 a86 18 18 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $18, $1c, $18, $18, $18, $18, $18, $00, $00
3d8b7 a87 00 00 00 00 
3d8bb a88 00 00 00    | 	byte	$00[7]
3d8be a89 3C 66 66 3C 
3d8c2 a8a 00 7E 00 00 
3d8c6 a8b 00 00 00 00 
3d8ca a8c 00 00 00 00 | 	byte	$3c, $66, $66, $3c, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d8ce a8d 00 00 33 66 
3d8d2 a8e CC 66 33 00 
3d8d6 a8f 00 00 00 00 
3d8da a90 00 00 00 00 | 	byte	$00, $00, $33, $66, $cc, $66, $33, $00, $00, $00, $00, $00, $00, $00, $00, $00
3d8de a91 02 63 32 1A 
3d8e2 a92 4E 66 F3 40 
3d8e6 a93 40 00 00 00 
3d8ea a94 00 00 00 00 | 	byte	$02, $63, $32, $1a, $4e, $66, $f3, $40, $40, $00, $00, $00, $00, $00, $00, $00
3d8ee a95 04 C6 64 34 
3d8f2 a96 7C 8C 46 23 
3d8f6 a97 F0 00 00 00 
3d8fa a98 00 00 00 00 | 	byte	$04, $c6, $64, $34, $7c, $8c, $46, $23, $f0, $00, $00, $00, $00, $00, $00, $00
3d8fe a99 03 C4 66 34 
3d902 a9a 5B 6C F6 43 
3d906 a9b 40 00 00 00 
3d90a a9c 00 00 00 00 | 	byte	$03, $c4, $66, $34, $5b, $6c, $f6, $43, $40, $00, $00, $00, $00, $00, $00, $00
3d90e a9d 18 18 00 18 
3d912 a9e 0C 06 06 66 
3d916 a9f 3C 00 00 00 
3d91a aa0 00 00 00 00 | 	byte	$18, $18, $00, $18, $0c, $06, $06, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3d91e aa1 06 0C 3E 63 
3d922 aa2 63 7F 63 63 
3d926 aa3 63 00 00 00 
3d92a aa4 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3d92e aa5 30 18 3E 63 
3d932 aa6 63 7F 63 63 
3d936 aa7 63 00 00 00 
3d93a aa8 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3d93e aa9 0C 33 3E 63 
3d942 aaa 63 63 7F 63 
3d946 aab 63 00 00 00 
3d94a aac 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3d94e aad 4E 39 3E 63 
3d952 aae 63 7F 63 63 
3d956 aaf 63 00 00 00 
3d95a ab0 00 00 00 00 | 	byte	$4e, $39, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3d95e ab1 63 00 3E 63 
3d962 ab2 63 7F 63 63 
3d966 ab3 63 00 00 00 
3d96a ab4 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $7f, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3d96e ab5 1C 22 1C 36 
3d972 ab6 63 63 7F 63 
3d976 ab7 63 00 00 00 
3d97a ab8 00 00 00 00 | 	byte	$1c, $22, $1c, $36, $63, $63, $7f, $63, $63, $00, $00, $00, $00, $00, $00, $00
3d97e ab9 F8 3C 3C 36 
3d982 aba F6 3F 33 33 
3d986 abb F3 00 00 00 
3d98a abc 00 00 00 00 | 	byte	$f8, $3c, $3c, $36, $f6, $3f, $33, $33, $f3, $00, $00, $00, $00, $00, $00, $00
3d98e abd 78 0C 06 06 
3d992 abe 06 06 06 0C 
3d996 abf 78 30 18 00 
3d99a ac0 00 00 00 00 | 	byte	$78, $0c, $06, $06, $06, $06, $06, $0c, $78, $30, $18, $00, $00, $00, $00, $00
3d99e ac1 0C 18 7E 06 
3d9a2 ac2 06 3E 06 06 
3d9a6 ac3 7E 00 00 00 
3d9aa ac4 00 00 00 00 | 	byte	$0c, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3d9ae ac5 30 18 7E 06 
3d9b2 ac6 06 3E 06 06 
3d9b6 ac7 7E 00 00 00 
3d9ba ac8 00 00 00 00 | 	byte	$30, $18, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3d9be ac9 18 66 7E 06 
3d9c2 aca 06 3E 06 06 
3d9c6 acb 7E 00 00 00 
3d9ca acc 00 00 00 00 | 	byte	$18, $66, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3d9ce acd 66 00 7E 06 
3d9d2 ace 06 3E 06 06 
3d9d6 acf 7E 00 00 00 
3d9da ad0 00 00 00 00 | 	byte	$66, $00, $7e, $06, $06, $3e, $06, $06, $7e, $00, $00, $00, $00, $00, $00, $00
3d9de ad1 0C 18 3C 18 
3d9e2 ad2 18 18 18 18 
3d9e6 ad3 3C 00 00 00 
3d9ea ad4 00 00 00 00 | 	byte	$0c, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3d9ee ad5 30 18 3C 18 
3d9f2 ad6 18 18 18 18 
3d9f6 ad7 3C 00 00 00 
3d9fa ad8 00 00 00 00 | 	byte	$30, $18, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3d9fe ad9 18 66 3C 18 
3da02 ada 18 18 18 18 
3da06 adb 3C 00 00 00 
3da0a adc 00 00 00 00 | 	byte	$18, $66, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3da0e add 66 00 3C 18 
3da12 ade 18 18 18 18 
3da16 adf 3C 00 00 00 
3da1a ae0 00 00 00 00 | 	byte	$66, $00, $3c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3da1e ae1 1E 36 66 66 
3da22 ae2 6F 66 66 36 
3da26 ae3 1E 00 00 00 
3da2a ae4 00 00 00 00 | 	byte	$1e, $36, $66, $66, $6f, $66, $66, $36, $1e, $00, $00, $00, $00, $00, $00, $00
3da2e ae5 8E 73 67 6F 
3da32 ae6 7B 73 63 63 
3da36 ae7 63 00 00 00 
3da3a ae8 00 00 00 00 | 	byte	$8e, $73, $67, $6f, $7b, $73, $63, $63, $63, $00, $00, $00, $00, $00, $00, $00
3da3e ae9 06 0C 3E 63 
3da42 aea 63 63 63 63 
3da46 aeb 3E 00 00 00 
3da4a aec 00 00 00 00 | 	byte	$06, $0c, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3da4e aed 30 18 3E 63 
3da52 aee 63 63 63 63 
3da56 aef 3E 00 00 00 
3da5a af0 00 00 00 00 | 	byte	$30, $18, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3da5e af1 0C 33 3E 63 
3da62 af2 63 63 63 63 
3da66 af3 3E 00 00 00 
3da6a af4 00 00 00 00 | 	byte	$0c, $33, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3da6e af5 8E 71 3E 63 
3da72 af6 63 63 63 63 
3da76 af7 3E 00 00 00 
3da7a af8 00 00 00 00 | 	byte	$8e, $71, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3da7e af9 63 00 3E 63 
3da82 afa 63 63 63 63 
3da86 afb 3E 00 00 00 
3da8a afc 00 00 00 00 | 	byte	$63, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3da8e afd 00 00 63 36 
3da92 afe 1C 1C 36 63 
3da96 aff 00 00 00 00 
3da9a b00 00 00 00 00 | 	byte	$00, $00, $63, $36, $1c, $1c, $36, $63, $00, $00, $00, $00, $00, $00, $00, $00
3da9e b01 BE 63 73 7B 
3daa2 b02 6B 6F 67 63 
3daa6 b03 3F 00 00 00 
3daaa b04 00 00 00 00 | 	byte	$be, $63, $73, $7b, $6b, $6f, $67, $63, $3f, $00, $00, $00, $00, $00, $00, $00
3daae b05 0C 18 63 63 
3dab2 b06 63 63 63 63 
3dab6 b07 3E 00 00 00 
3daba b08 00 00 00 00 | 	byte	$0c, $18, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3dabe b09 18 0C 63 63 
3dac2 b0a 63 63 63 63 
3dac6 b0b 3E 00 00 00 
3daca b0c 00 00 00 00 | 	byte	$18, $0c, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3dace b0d 08 36 63 63 
3dad2 b0e 63 63 63 63 
3dad6 b0f 3E 00 00 00 
3dada b10 00 00 00 00 | 	byte	$08, $36, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3dade b11 63 00 63 63 
3dae2 b12 63 63 63 63 
3dae6 b13 3E 00 00 00 
3daea b14 00 00 00 00 | 	byte	$63, $00, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00, $00, $00
3daee b15 30 18 C3 66 
3daf2 b16 3C 18 18 18 
3daf6 b17 18 00 00 00 
3dafa b18 00 00 00 00 | 	byte	$30, $18, $c3, $66, $3c, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3dafe b19 03 03 3F 63 
3db02 b1a 63 3F 03 03 
3db06 b1b 03 00 00 00 
3db0a b1c 00 00 00 00 | 	byte	$03, $03, $3f, $63, $63, $3f, $03, $03, $03, $00, $00, $00, $00, $00, $00, $00
3db0e b1d 3C 66 66 66 
3db12 b1e 36 66 66 66 
3db16 b1f 36 06 06 00 
3db1a b20 00 00 00 00 | 	byte	$3c, $66, $66, $66, $36, $66, $66, $66, $36, $06, $06, $00, $00, $00, $00, $00
3db1e b21 06 0C 00 3C 
3db22 b22 60 7C 66 66 
3db26 b23 7C 00 00 00 
3db2a b24 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3db2e b25 60 30 00 3C 
3db32 b26 60 7C 66 66 
3db36 b27 7C 00 00 00 
3db3a b28 00 00 00 00 | 	byte	$60, $30, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3db3e b29 18 66 00 3C 
3db42 b2a 60 7C 66 66 
3db46 b2b 7C 00 00 00 
3db4a b2c 00 00 00 00 | 	byte	$18, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3db4e b2d 8E 71 00 3C 
3db52 b2e 60 7C 66 66 
3db56 b2f 7C 00 00 00 
3db5a b30 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3db5e b31 00 66 00 3C 
3db62 b32 60 7C 66 66 
3db66 b33 7C 00 00 00 
3db6a b34 00 00 00 00 | 	byte	$00, $66, $00, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3db6e b35 18 24 18 3C 
3db72 b36 60 7C 66 66 
3db76 b37 7C 00 00 00 
3db7a b38 00 00 00 00 | 	byte	$18, $24, $18, $3c, $60, $7c, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3db7e b39 00 00 00 7E 
3db82 b3a D8 FE 1B 1B 
3db86 b3b EE 00 00 00 
3db8a b3c 00 00 00 00 | 	byte	$00, $00, $00, $7e, $d8, $fe, $1b, $1b, $ee, $00, $00, $00, $00, $00, $00, $00
3db8e b3d 00 00 00 3C 
3db92 b3e 06 06 06 06 
3db96 b3f 3C 18 0C 00 
3db9a b40 00 00 00 00 | 	byte	$00, $00, $00, $3c, $06, $06, $06, $06, $3c, $18, $0c, $00, $00, $00, $00, $00
3db9e b41 06 0C 00 3C 
3dba2 b42 66 7E 06 06 
3dba6 b43 3C 00 00 00 
3dbaa b44 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3dbae b45 60 30 00 3C 
3dbb2 b46 66 7E 06 06 
3dbb6 b47 3C 00 00 00 
3dbba b48 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3dbbe b49 18 66 00 3C 
3dbc2 b4a 66 7E 06 06 
3dbc6 b4b 3C 00 00 00 
3dbca b4c 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3dbce b4d 00 66 00 3C 
3dbd2 b4e 66 7E 06 06 
3dbd6 b4f 3C 00 00 00 
3dbda b50 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $7e, $06, $06, $3c, $00, $00, $00, $00, $00, $00, $00
3dbde b51 0C 18 00 18 
3dbe2 b52 18 18 18 18 
3dbe6 b53 30 00 00 00 
3dbea b54 00 00 00 00 | 	byte	$0c, $18, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3dbee b55 18 0C 00 0C 
3dbf2 b56 0C 0C 0C 0C 
3dbf6 b57 18 00 00 00 
3dbfa b58 00 00 00 00 | 	byte	$18, $0c, $00, $0c, $0c, $0c, $0c, $0c, $18, $00, $00, $00, $00, $00, $00, $00
3dbfe b59 18 66 00 18 
3dc02 b5a 18 18 18 18 
3dc06 b5b 30 00 00 00 
3dc0a b5c 00 00 00 00 | 	byte	$18, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3dc0e b5d 00 66 00 18 
3dc12 b5e 18 18 18 18 
3dc16 b5f 30 00 00 00 
3dc1a b60 00 00 00 00 | 	byte	$00, $66, $00, $18, $18, $18, $18, $18, $30, $00, $00, $00, $00, $00, $00, $00
3dc1e b61 03 06 3F 18 
3dc22 b62 3C 66 66 66 
3dc26 b63 3C 00 00 00 
3dc2a b64 00 00 00 00 | 	byte	$03, $06, $3f, $18, $3c, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3dc2e b65 8E 71 00 3E 
3dc32 b66 66 66 66 66 
3dc36 b67 66 00 00 00 
3dc3a b68 00 00 00 00 | 	byte	$8e, $71, $00, $3e, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3dc3e b69 06 0C 00 3C 
3dc42 b6a 66 66 66 66 
3dc46 b6b 3C 00 00 00 
3dc4a b6c 00 00 00 00 | 	byte	$06, $0c, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3dc4e b6d 60 30 00 3C 
3dc52 b6e 66 66 66 66 
3dc56 b6f 3C 00 00 00 
3dc5a b70 00 00 00 00 | 	byte	$60, $30, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3dc5e b71 18 66 00 3C 
3dc62 b72 66 66 66 66 
3dc66 b73 3C 00 00 00 
3dc6a b74 00 00 00 00 | 	byte	$18, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3dc6e b75 8E 71 00 3C 
3dc72 b76 66 66 66 66 
3dc76 b77 3C 00 00 00 
3dc7a b78 00 00 00 00 | 	byte	$8e, $71, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3dc7e b79 00 66 00 3C 
3dc82 b7a 66 66 66 66 
3dc86 b7b 3C 00 00 00 
3dc8a b7c 00 00 00 00 | 	byte	$00, $66, $00, $3c, $66, $66, $66, $66, $3c, $00, $00, $00, $00, $00, $00, $00
3dc8e b7d 00 18 18 00 
3dc92 b7e 7E 00 18 18 
3dc96 b7f 00 00 00 00 
3dc9a b80 00 00 00 00 | 	byte	$00, $18, $18, $00, $7e, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3dc9e b81 00 00 00 7E 
3dca2 b82 73 7B 6F 67 
3dca6 b83 3F 00 00 00 
3dcaa b84 00 00 00 00 | 	byte	$00, $00, $00, $7e, $73, $7b, $6f, $67, $3f, $00, $00, $00, $00, $00, $00, $00
3dcae b85 0C 18 00 66 
3dcb2 b86 66 66 66 66 
3dcb6 b87 7C 00 00 00 
3dcba b88 00 00 00 00 | 	byte	$0c, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3dcbe b89 30 18 00 66 
3dcc2 b8a 66 66 66 66 
3dcc6 b8b 7C 00 00 00 
3dcca b8c 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3dcce b8d 18 66 00 66 
3dcd2 b8e 66 66 66 66 
3dcd6 b8f 7C 00 00 00 
3dcda b90 00 00 00 00 | 	byte	$18, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3dcde b91 00 66 00 66 
3dce2 b92 66 66 66 66 
3dce6 b93 7C 00 00 00 
3dcea b94 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $66, $7c, $00, $00, $00, $00, $00, $00, $00
3dcee b95 30 18 00 66 
3dcf2 b96 66 66 66 3C 
3dcf6 b97 18 0C 06 00 
3dcfa b98 00 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
3dcfe b99 06 06 06 3E 
3dd02 b9a 66 66 66 3E 
3dd06 b9b 06 06 06 00 
3dd0a b9c 00 00 00 00 | 	byte	$06, $06, $06, $3e, $66, $66, $66, $3e, $06, $06, $06, $00, $00, $00, $00, $00
3dd0e b9d 00 66 00 66 
3dd12 b9e 66 66 66 3C 
3dd16 b9f 18 0C 06 00 
3dd1a ba0 00 00 00 00 | 	byte	$00, $66, $00, $66, $66, $66, $66, $3c, $18, $0c, $06, $00, $00, $00, $00, $00
3dd1e ba1 00 7E 66 66 
3dd22 ba2 66 66 66 66 
3dd26 ba3 66 7E 00 00 
3dd2a ba4 00 00 00 00 | 	byte	$00, $7e, $66, $66, $66, $66, $66, $66, $66, $7e, $00, $00, $00, $00, $00, $00
3dd2e ba5 00 00 00 00 
      ...             
3df36 c27 00 00 00 00 
3df3a c28 00 00       | 	byte	$00[526]
3df3c c29 00 00 00 00 
3df40 c2a 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3df41 c2a 80 00 00 00 
3df45 c2b 00 80 00 00 
3df49 c2c 80 80 00 00 
3df4d c2d 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3df51 c2e 80 00 80 00 
3df55 c2f 00 40 80 00 
3df59 c30 AA AA AA 00 
3df5d c31 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3df61 c32 FF 00 00 00 
3df65 c33 00 FF 00 00 
3df69 c34 FF FF 00 00 
3df6d c35 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3df71 c36 FF 00 FF 00 
3df75 c37 00 FF FF 00 
3df79 c38 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3df7c c39 00 00 00 00 
3df80 c3a 00          | ataripalette   file "ataripalettep2.def"
3df81 c3a 11 11 11 00 
3df85 c3b 22 22 22 00 
3df89 c3c 33 33 33 00 
3df8d c3d 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3df91 c3e 55 55 55 00 
3df95 c3f 66 66 66 00 
3df99 c40 77 77 77 00 
3df9d c41 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3dfa1 c42 99 99 99 00 
3dfa5 c43 AA AA AA 00 
3dfa9 c44 BB BB BB 00 
3dfad c45 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3dfb1 c46 DD DD DD 00 
3dfb5 c47 EE EE EE 00 
3dfb9 c48 FF FF FF 00 
3dfbd c49 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3dfc1 c4a 00 14 40 00 
3dfc5 c4b 00 1E 60 00 
3dfc9 c4c 00 28 80 00 
3dfcd c4d 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3dfd1 c4e 00 3C BF 00 
3dfd5 c4f 00 46 DF 00 
3dfd9 c50 00 50 FF 00 
3dfdd c51 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3dfe1 c52 39 77 FF 00 
3dfe5 c53 55 8A FF 00 
3dfe9 c54 71 9E FF 00 
3dfed c55 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3dff1 c56 AA C5 FF 00 
3dff5 c57 C6 D8 FF 00 
3dff9 c58 E3 EC FF 00 
3dffd c59 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3e001 c5a 00 00 40 00 
3e005 c5b 00 00 60 00 
3e009 c5c 00 00 80 00 
3e00d c5d 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3e011 c5e 00 00 BF 00 
3e015 c5f 00 00 DF 00 
3e019 c60 00 00 FF 00 
3e01d c61 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3e021 c62 39 39 FF 00 
3e025 c63 55 55 FF 00 
3e029 c64 71 71 FF 00 
3e02d c65 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3e031 c66 AA AA FF 00 
3e035 c67 C6 C6 FF 00 
3e039 c68 E3 E3 FF 00 
3e03d c69 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3e041 c6a 20 00 40 00 
3e045 c6b 30 00 60 00 
3e049 c6c 40 00 80 00 
3e04d c6d 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3e051 c6e 60 00 BF 00 
3e055 c6f 70 00 DF 00 
3e059 c70 80 00 FF 00 
3e05d c71 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3e061 c72 9C 39 FF 00 
3e065 c73 AA 55 FF 00 
3e069 c74 B8 71 FF 00 
3e06d c75 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3e071 c76 D5 AA FF 00 
3e075 c77 E3 C6 FF 00 
3e079 c78 F1 E3 FF 00 
3e07d c79 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3e081 c7a 40 00 40 00 
3e085 c7b 60 00 60 00 
3e089 c7c 80 00 80 00 
3e08d c7d 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3e091 c7e BF 00 BF 00 
3e095 c7f DF 00 DF 00 
3e099 c80 FF 00 FF 00 
3e09d c81 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3e0a1 c82 FF 39 FF 00 
3e0a5 c83 FF 55 FF 00 
3e0a9 c84 FF 71 FF 00 
3e0ad c85 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3e0b1 c86 FF AA FF 00 
3e0b5 c87 FF C6 FF 00 
3e0b9 c88 FF E3 FF 00 
3e0bd c89 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3e0c1 c8a 40 00 20 00 
3e0c5 c8b 60 00 30 00 
3e0c9 c8c 80 00 40 00 
3e0cd c8d 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3e0d1 c8e BF 00 60 00 
3e0d5 c8f DF 00 70 00 
3e0d9 c90 FF 00 80 00 
3e0dd c91 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3e0e1 c92 FF 39 9C 00 
3e0e5 c93 FF 55 AA 00 
3e0e9 c94 FF 71 B8 00 
3e0ed c95 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3e0f1 c96 FF AA D5 00 
3e0f5 c97 FF C6 E3 00 
3e0f9 c98 FF E3 F1 00 
3e0fd c99 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3e101 c9a 40 00 00 00 
3e105 c9b 60 00 00 00 
3e109 c9c 80 00 00 00 
3e10d c9d 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3e111 c9e BF 00 00 00 
3e115 c9f DF 00 00 00 
3e119 ca0 FF 00 00 00 
3e11d ca1 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3e121 ca2 FF 39 39 00 
3e125 ca3 FF 55 55 00 
3e129 ca4 FF 71 71 00 
3e12d ca5 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3e131 ca6 FF AA AA 00 
3e135 ca7 FF C6 C6 00 
3e139 ca8 FF E3 E3 00 
3e13d ca9 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3e141 caa 40 10 00 00 
3e145 cab 60 18 00 00 
3e149 cac 80 20 00 00 
3e14d cad 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3e151 cae BF 30 00 00 
3e155 caf DF 38 00 00 
3e159 cb0 FF 40 00 00 
3e15d cb1 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3e161 cb2 FF 6A 39 00 
3e165 cb3 FF 80 55 00 
3e169 cb4 FF 95 71 00 
3e16d cb5 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3e171 cb6 FF BF AA 00 
3e175 cb7 FF D5 C6 00 
3e179 cb8 FF EA E3 00 
3e17d cb9 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3e181 cba 40 20 00 00 
3e185 cbb 60 30 00 00 
3e189 cbc 80 40 00 00 
3e18d cbd 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3e191 cbe BF 60 00 00 
3e195 cbf DF 70 00 00 
3e199 cc0 FF 80 00 00 
3e19d cc1 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3e1a1 cc2 FF 9C 39 00 
3e1a5 cc3 FF AA 55 00 
3e1a9 cc4 FF B8 71 00 
3e1ad cc5 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3e1b1 cc6 FF D5 AA 00 
3e1b5 cc7 FF E3 C6 00 
3e1b9 cc8 FF F1 E3 00 
3e1bd cc9 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3e1c1 cca 40 30 00 00 
3e1c5 ccb 60 48 00 00 
3e1c9 ccc 80 60 00 00 
3e1cd ccd 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3e1d1 cce BF 90 00 00 
3e1d5 ccf DF A8 00 00 
3e1d9 cd0 FF C0 00 00 
3e1dd cd1 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3e1e1 cd2 FF CE 39 00 
3e1e5 cd3 FF D5 55 00 
3e1e9 cd4 FF DC 71 00 
3e1ed cd5 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3e1f1 cd6 FF EA AA 00 
3e1f5 cd7 FF F1 C6 00 
3e1f9 cd8 FF F8 E3 00 
3e1fd cd9 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3e201 cda 30 40 00 00 
3e205 cdb 48 60 00 00 
3e209 cdc 60 80 00 00 
3e20d cdd 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3e211 cde 90 BF 00 00 
3e215 cdf A8 DF 00 00 
3e219 ce0 C0 FF 00 00 
3e21d ce1 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3e221 ce2 CE FF 39 00 
3e225 ce3 D5 FF 55 00 
3e229 ce4 DC FF 71 00 
3e22d ce5 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3e231 ce6 EA FF AA 00 
3e235 ce7 F1 FF C6 00 
3e239 ce8 F8 FF E3 00 
3e23d ce9 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3e241 cea 00 40 00 00 
3e245 ceb 00 60 00 00 
3e249 cec 00 80 00 00 
3e24d ced 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3e251 cee 00 BF 00 00 
3e255 cef 00 DF 00 00 
3e259 cf0 00 FF 00 00 
3e25d cf1 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3e261 cf2 39 FF 39 00 
3e265 cf3 55 FF 55 00 
3e269 cf4 71 FF 71 00 
3e26d cf5 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3e271 cf6 AA FF AA 00 
3e275 cf7 C6 FF C6 00 
3e279 cf8 E3 FF E3 00 
3e27d cf9 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3e281 cfa 00 40 14 00 
3e285 cfb 00 60 1E 00 
3e289 cfc 00 80 28 00 
3e28d cfd 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3e291 cfe 00 BF 3C 00 
3e295 cff 00 DF 46 00 
3e299 d00 00 FF 50 00 
3e29d d01 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3e2a1 d02 39 FF 77 00 
3e2a5 d03 55 FF 8A 00 
3e2a9 d04 71 FF 9E 00 
3e2ad d05 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3e2b1 d06 AA FF C5 00 
3e2b5 d07 C6 FF D8 00 
3e2b9 d08 E3 FF EC 00 
3e2bd d09 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3e2c1 d0a 00 40 28 00 
3e2c5 d0b 00 60 3C 00 
3e2c9 d0c 00 80 50 00 
3e2cd d0d 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3e2d1 d0e 00 BF 78 00 
3e2d5 d0f 00 DF 8C 00 
3e2d9 d10 00 FF A0 00 
3e2dd d11 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3e2e1 d12 39 FF B5 00 
3e2e5 d13 55 FF C0 00 
3e2e9 d14 71 FF CA 00 
3e2ed d15 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3e2f1 d16 AA FF DF 00 
3e2f5 d17 C6 FF EA 00 
3e2f9 d18 E3 FF F4 00 
3e2fd d19 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3e301 d1a 00 40 40 00 
3e305 d1b 00 60 60 00 
3e309 d1c 00 80 80 00 
3e30d d1d 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3e311 d1e 00 BF BF 00 
3e315 d1f 00 DF DF 00 
3e319 d20 00 FF FF 00 
3e31d d21 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3e321 d22 39 FF FF 00 
3e325 d23 55 FF FF 00 
3e329 d24 71 FF FF 00 
3e32d d25 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3e331 d26 AA FF FF 00 
3e335 d27 C6 FF FF 00 
3e339 d28 E3 FF FF 00 
3e33d d29 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3e341 d2a 00 28 40 00 
3e345 d2b 00 3C 60 00 
3e349 d2c 00 50 80 00 
3e34d d2d 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3e351 d2e 00 78 BF 00 
3e355 d2f 00 8C DF 00 
3e359 d30 00 A0 FF 00 
3e35d d31 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3e361 d32 39 B5 FF 00 
3e365 d33 55 C0 FF 00 
3e369 d34 71 CA FF 00 
3e36d d35 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3e371 d36 AA DF FF 00 
3e375 d37 C6 EA FF 00 
3e379 d38 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3e37c d39 00 00 00 00 
3e380 d3a 00          | ataripalette2  file "ataripalettep2.def"
3e381 d3a 11 11 11 00 
3e385 d3b 22 22 22 00 
3e389 d3c 33 33 33 00 
3e38d d3d 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3e391 d3e 55 55 55 00 
3e395 d3f 66 66 66 00 
3e399 d40 77 77 77 00 
3e39d d41 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3e3a1 d42 99 99 99 00 
3e3a5 d43 AA AA AA 00 
3e3a9 d44 BB BB BB 00 
3e3ad d45 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3e3b1 d46 DD DD DD 00 
3e3b5 d47 EE EE EE 00 
3e3b9 d48 FF FF FF 00 
3e3bd d49 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3e3c1 d4a 00 14 40 00 
3e3c5 d4b 00 1E 60 00 
3e3c9 d4c 00 28 80 00 
3e3cd d4d 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3e3d1 d4e 00 3C BF 00 
3e3d5 d4f 00 46 DF 00 
3e3d9 d50 00 50 FF 00 
3e3dd d51 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3e3e1 d52 39 77 FF 00 
3e3e5 d53 55 8A FF 00 
3e3e9 d54 71 9E FF 00 
3e3ed d55 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3e3f1 d56 AA C5 FF 00 
3e3f5 d57 C6 D8 FF 00 
3e3f9 d58 E3 EC FF 00 
3e3fd d59 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3e401 d5a 00 00 40 00 
3e405 d5b 00 00 60 00 
3e409 d5c 00 00 80 00 
3e40d d5d 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3e411 d5e 00 00 BF 00 
3e415 d5f 00 00 DF 00 
3e419 d60 00 00 FF 00 
3e41d d61 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3e421 d62 39 39 FF 00 
3e425 d63 55 55 FF 00 
3e429 d64 71 71 FF 00 
3e42d d65 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3e431 d66 AA AA FF 00 
3e435 d67 C6 C6 FF 00 
3e439 d68 E3 E3 FF 00 
3e43d d69 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3e441 d6a 20 00 40 00 
3e445 d6b 30 00 60 00 
3e449 d6c 40 00 80 00 
3e44d d6d 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3e451 d6e 60 00 BF 00 
3e455 d6f 70 00 DF 00 
3e459 d70 80 00 FF 00 
3e45d d71 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3e461 d72 9C 39 FF 00 
3e465 d73 AA 55 FF 00 
3e469 d74 B8 71 FF 00 
3e46d d75 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3e471 d76 D5 AA FF 00 
3e475 d77 E3 C6 FF 00 
3e479 d78 F1 E3 FF 00 
3e47d d79 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3e481 d7a 40 00 40 00 
3e485 d7b 60 00 60 00 
3e489 d7c 80 00 80 00 
3e48d d7d 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3e491 d7e BF 00 BF 00 
3e495 d7f DF 00 DF 00 
3e499 d80 FF 00 FF 00 
3e49d d81 FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3e4a1 d82 FF 39 FF 00 
3e4a5 d83 FF 55 FF 00 
3e4a9 d84 FF 71 FF 00 
3e4ad d85 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3e4b1 d86 FF AA FF 00 
3e4b5 d87 FF C6 FF 00 
3e4b9 d88 FF E3 FF 00 
3e4bd d89 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3e4c1 d8a 40 00 20 00 
3e4c5 d8b 60 00 30 00 
3e4c9 d8c 80 00 40 00 
3e4cd d8d 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3e4d1 d8e BF 00 60 00 
3e4d5 d8f DF 00 70 00 
3e4d9 d90 FF 00 80 00 
3e4dd d91 FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3e4e1 d92 FF 39 9C 00 
3e4e5 d93 FF 55 AA 00 
3e4e9 d94 FF 71 B8 00 
3e4ed d95 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3e4f1 d96 FF AA D5 00 
3e4f5 d97 FF C6 E3 00 
3e4f9 d98 FF E3 F1 00 
3e4fd d99 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3e501 d9a 40 00 00 00 
3e505 d9b 60 00 00 00 
3e509 d9c 80 00 00 00 
3e50d d9d 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3e511 d9e BF 00 00 00 
3e515 d9f DF 00 00 00 
3e519 da0 FF 00 00 00 
3e51d da1 FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3e521 da2 FF 39 39 00 
3e525 da3 FF 55 55 00 
3e529 da4 FF 71 71 00 
3e52d da5 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3e531 da6 FF AA AA 00 
3e535 da7 FF C6 C6 00 
3e539 da8 FF E3 E3 00 
3e53d da9 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3e541 daa 40 10 00 00 
3e545 dab 60 18 00 00 
3e549 dac 80 20 00 00 
3e54d dad 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3e551 dae BF 30 00 00 
3e555 daf DF 38 00 00 
3e559 db0 FF 40 00 00 
3e55d db1 FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3e561 db2 FF 6A 39 00 
3e565 db3 FF 80 55 00 
3e569 db4 FF 95 71 00 
3e56d db5 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3e571 db6 FF BF AA 00 
3e575 db7 FF D5 C6 00 
3e579 db8 FF EA E3 00 
3e57d db9 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3e581 dba 40 20 00 00 
3e585 dbb 60 30 00 00 
3e589 dbc 80 40 00 00 
3e58d dbd 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3e591 dbe BF 60 00 00 
3e595 dbf DF 70 00 00 
3e599 dc0 FF 80 00 00 
3e59d dc1 FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3e5a1 dc2 FF 9C 39 00 
3e5a5 dc3 FF AA 55 00 
3e5a9 dc4 FF B8 71 00 
3e5ad dc5 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3e5b1 dc6 FF D5 AA 00 
3e5b5 dc7 FF E3 C6 00 
3e5b9 dc8 FF F1 E3 00 
3e5bd dc9 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3e5c1 dca 40 30 00 00 
3e5c5 dcb 60 48 00 00 
3e5c9 dcc 80 60 00 00 
3e5cd dcd 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3e5d1 dce BF 90 00 00 
3e5d5 dcf DF A8 00 00 
3e5d9 dd0 FF C0 00 00 
3e5dd dd1 FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3e5e1 dd2 FF CE 39 00 
3e5e5 dd3 FF D5 55 00 
3e5e9 dd4 FF DC 71 00 
3e5ed dd5 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3e5f1 dd6 FF EA AA 00 
3e5f5 dd7 FF F1 C6 00 
3e5f9 dd8 FF F8 E3 00 
3e5fd dd9 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3e601 dda 30 40 00 00 
3e605 ddb 48 60 00 00 
3e609 ddc 60 80 00 00 
3e60d ddd 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3e611 dde 90 BF 00 00 
3e615 ddf A8 DF 00 00 
3e619 de0 C0 FF 00 00 
3e61d de1 C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3e621 de2 CE FF 39 00 
3e625 de3 D5 FF 55 00 
3e629 de4 DC FF 71 00 
3e62d de5 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3e631 de6 EA FF AA 00 
3e635 de7 F1 FF C6 00 
3e639 de8 F8 FF E3 00 
3e63d de9 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3e641 dea 00 40 00 00 
3e645 deb 00 60 00 00 
3e649 dec 00 80 00 00 
3e64d ded 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3e651 dee 00 BF 00 00 
3e655 def 00 DF 00 00 
3e659 df0 00 FF 00 00 
3e65d df1 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3e661 df2 39 FF 39 00 
3e665 df3 55 FF 55 00 
3e669 df4 71 FF 71 00 
3e66d df5 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3e671 df6 AA FF AA 00 
3e675 df7 C6 FF C6 00 
3e679 df8 E3 FF E3 00 
3e67d df9 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3e681 dfa 00 40 14 00 
3e685 dfb 00 60 1E 00 
3e689 dfc 00 80 28 00 
3e68d dfd 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3e691 dfe 00 BF 3C 00 
3e695 dff 00 DF 46 00 
3e699 e00 00 FF 50 00 
3e69d e01 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3e6a1 e02 39 FF 77 00 
3e6a5 e03 55 FF 8A 00 
3e6a9 e04 71 FF 9E 00 
3e6ad e05 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3e6b1 e06 AA FF C5 00 
3e6b5 e07 C6 FF D8 00 
3e6b9 e08 E3 FF EC 00 
3e6bd e09 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3e6c1 e0a 00 40 28 00 
3e6c5 e0b 00 60 3C 00 
3e6c9 e0c 00 80 50 00 
3e6cd e0d 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3e6d1 e0e 00 BF 78 00 
3e6d5 e0f 00 DF 8C 00 
3e6d9 e10 00 FF A0 00 
3e6dd e11 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3e6e1 e12 39 FF B5 00 
3e6e5 e13 55 FF C0 00 
3e6e9 e14 71 FF CA 00 
3e6ed e15 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3e6f1 e16 AA FF DF 00 
3e6f5 e17 C6 FF EA 00 
3e6f9 e18 E3 FF F4 00 
3e6fd e19 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3e701 e1a 00 40 40 00 
3e705 e1b 00 60 60 00 
3e709 e1c 00 80 80 00 
3e70d e1d 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3e711 e1e 00 BF BF 00 
3e715 e1f 00 DF DF 00 
3e719 e20 00 FF FF 00 
3e71d e21 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3e721 e22 39 FF FF 00 
3e725 e23 55 FF FF 00 
3e729 e24 71 FF FF 00 
3e72d e25 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3e731 e26 AA FF FF 00 
3e735 e27 C6 FF FF 00 
3e739 e28 E3 FF FF 00 
3e73d e29 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3e741 e2a 00 28 40 00 
3e745 e2b 00 3C 60 00 
3e749 e2c 00 50 80 00 
3e74d e2d 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3e751 e2e 00 78 BF 00 
3e755 e2f 00 8C DF 00 
3e759 e30 00 A0 FF 00 
3e75d e31 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3e761 e32 39 B5 FF 00 
3e765 e33 55 C0 FF 00 
3e769 e34 71 CA FF 00 
3e76d e35 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3e771 e36 AA DF FF 00 
3e775 e37 C6 EA FF 00 
3e779 e38 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3e77c e39             | 
3e77c e39             | '**********************************************************************************
3e77c e39             | '
3e77c e39             | '        Timings and colors definitions
3e77c e39             | '
3e77c e39             | '**********************************************************************************
3e77c e39             | 
3e77c e39             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3e77c e39 08 00 00 00 
3e780 e3a 3C 00 00 00 
3e784 e3b 08 00 00 00 
3e788 e3c 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3e78c e3d 07 00 00 00 
3e790 e3e 04 00 00 00 
3e794 e3f 01 00 00 00 
3e798 e40 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3e79c e41 58 02 00 00 
3e7a0 e42 20 9E 4B 14 
3e7a4 e43 FB A8 9E 01 
3e7a8 e44 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3e7ac e45 00 00 00 00 
3e7b0 e46 C0 00 00 00 
3e7b4 e47 00 00 00 00 
3e7b8 e48 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3e7bc e49             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3e7bc e49 00 75 C7 97 
3e7c0 e4a 27 47 F6 0A 
3e7c4 e4b 05 79 CB 9B 
3e7c8 e4c 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3e7cc e4d             | 
3e7cc e4d             | ''--------  Initialization  ----------------------------------------------------------------
3e7cc e4d             | 
3e7cc e4d 28 0C 64 FD | hdmi            setq    #6
3e7d0 e4e 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3e7d4 e4f 28 10 64 FD |                 setq    #8
3e7d8 e50 D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3e7dc e51             | 
3e7dc e51 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3e7e0 e52 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3e7e4 e53 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3e7e8 e54 D6 C6 01 F1 |                 add     t1,hbase
3e7ec e55 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3e7f0 e56 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3e7f4 e57 7B 0B 80 5F 
3e7f8 e58 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3e7fc e59 66 66 86 FF 
3e800 e5a 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3e804 e5b             | '
3e804 e5b D6 C6 01 F6 |                 mov 	t1,hbase			   '
3e808 e5c 11 C6 65 F0 |                 shl 	t1,#17                             '
3e80c e5d E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3e810 e5e 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3e814 e5f             | 
3e814 e5f 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3e818 e60 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3e81c e61 E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3e820 e62             | 
3e820 e62             | ''--------  frame rendering main loop  ---------------------------------------------------
3e820 e62             | 
3e820 e62 28 06 64 FD | p101            setq 	#3
3e824 e63 00 A5 05 FB | 		rdlong  vblankptr,ptra
3e828 e64 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3e82c e65 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3e830 e66 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3e834 e67 00 A0 05 F6 |                 mov     dlinum, #0
3e838 e68 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3e83c e69 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3e840 e6a             | 
3e840 e6a             | 
3e840 e6a 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3e844 e6b 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3e848 e6c ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3e84c e6d             |                 
3e84c e6d             | 
3e84c e6d             | 
3e84c e6d             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3e84c e6d             |   
3e84c e6d 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3e850 e6e 29 FE 65 3D |          if_nc  setq2   #255
3e854 e6f D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3e858 e70             | 
3e858 e70             | '' -----   up porch (before the picture)
3e858 e70             | 
3e858 e70 C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3e85c e71 C1 C4 01 F6 |                 mov     hsync1,sync_001	
3e860 e72 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3e864 e73 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3e868 e74             |  
3e868 e74             |    
3e868 e74             |  
3e868 e74 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3e86c e75 E2 8C B1 FC |                 xzero   m_sn,hsync1
3e870 e76 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3e874 e77 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3e878 e78 E1 90 C1 FC |                 xcont   m_vi,hsync0
3e87c e79 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3e880 e7a             | 
3e880 e7a E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3e884 e7b E2 8C B1 FC |                 xzero   m_sn,hsync1
3e888 e7c 48 00 B0 FD | 		call    #dli
3e88c e7d E1 8E C1 FC |                 xcont   m_bv,hsync0     
3e890 e7e E1 90 C1 FC |                 xcont   m_vi,hsync0
3e894 e7f 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3e898 e80             |                 	
3e898 e80             |                 
3e898 e80             | 
3e898 e80             |  
3e898 e80             | '' ------- the main screen drawing starts here
3e898 e80             | 
3e898 e80 E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3e89c e81 E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3e8a0 e82 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3e8a4 e83 E1 8E C1 FC |                 xcont   m_bv,hsync0
3e8a8 e84 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3e8ac e85 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3e8b0 e86 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3e8b4 e87             |               
3e8b4 e87             | 
3e8b4 e87 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3e8b8 e88 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3e8bc e89             | 
3e8bc e89             | ' ---------------- All visible lines displayed now, start vblank  
3e8bc e89             | 
3e8bc e89 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3e8c0 e8a 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3e8c4 e8b C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3e8c8 e8c C3 C4 01 F6 |                 mov     hsync1,sync_223
3e8cc e8d 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3e8d0 e8e 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3e8d4 e8f             | 
3e8d4 e8f             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3e8d4 e8f             | 
3e8d4 e8f             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3e8d4 e8f             | 
3e8d4 e8f 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3e8d8 e90             | 
3e8d8 e90 DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3e8dc e91 04 B8 05 A1 |     if_z        add     dlptr2,#4
3e8e0 e92 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3e8e4 e93             | 
3e8e4 e93 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3e8e8 e94 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3e8ec e95 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3e8f0 e96 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3e8f4 e97 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3e8f8 e98             | 
3e8f8 e98 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3e8fc e99 DD C6 41 F8 |                 getnib  t1,dl,#0
3e900 e9a 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3e904 e9b 70 00 90 AD |     if_z        jmp     #preload
3e908 e9c 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3e90c e9d 94 00 90 AD |     if_z        jmp     #preload2
3e910 e9e 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3e914 e9f 0C 00 90 AD |     if_z        jmp     #p390
3e918 ea0 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3e91c ea1 28 00 90 AD |     if_z        jmp     #p391  
3e920 ea2             | 
3e920 ea2 2D 00 64 FD | p308            ret
3e924 ea3             |    
3e924 ea3 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3e928 ea4 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3e92c ea5 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3e930 ea6 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3e934 ea7 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3e938 ea8 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3e93c ea9 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3e940 eaa 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3e944 eab 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3e948 eac             |  
3e948 eac             | '' --------  Reload palette. To do 
3e948 eac             | 
3e948 eac E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3e94c ead 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3e950 eae 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3e954 eaf 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3e958 eb0 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3e95c eb1 E0 00 00 FB |         	rdlong  $000, framebuf2         	
3e960 eb2 70 FF 9F FD |         	jmp     #dli                
3e964 eb3             |       
3e964 eb3             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3e964 eb3             | 
3e964 eb3             | 
3e964 eb3             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3e964 eb3             | 
3e964 eb3 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3e968 eb4 E2 8C B1 FC |                 xzero   m_sn,hsync1
3e96c eb5 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3e970 eb6 E1 90 C1 FC |                 xcont   m_vi,hsync0
3e974 eb7 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3e978 eb8             |         
3e978 eb8             | '' -------------- Preload a line from PSRAM        
3e978 eb8             |         
3e978 eb8 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3e97c eb9 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3e980 eba DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3e984 ebb DE B4 01 F6 |                 mov     buf1,buf1c
3e988 ebc 03 A0 05 F7 |                 incmod  dlinum,#3
3e98c ebd             | 
3e98c ebd 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3e990 ebe 32 B7 01 F6 |                 mov     buf2,a1024
3e994 ebf E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3e998 ec0 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3e99c ec1 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3e9a0 ec2 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3e9a4 ec3             |  
3e9a4 ec3             |  
3e9a4 ec3             | preload2      '  incmod  dlinum,#3
3e9a4 ec3 04 C0 45 F0 |                 shr 	framebuf2,#4
3e9a8 ec4 ED B2 01 F6 |                 mov 	cmd,affffffff
3e9ac ec5 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3e9b0 ec6 28 02 64 FD |                 setq	#1
3e9b4 ec7 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3e9b8 ec8             |                 
3e9b8 ec8             | 
3e9b8 ec8             | '' -------------- Draw sprites
3e9b8 ec8             | 
3e9b8 ec8 CF 5C 02 F6 | sprite          mov t8,frames
3e9bc ec9 10 5C 0E F5 | 		and t8,#16 wz
3e9c0 eca 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
3e9c4 ecb 10 48 06 A6 | 	if_z    mov spritenum, #16	
3e9c8 ecc             | 		
3e9c8 ecc             | 
3e9c8 ecc 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3e9cc ecd 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3e9d0 ece EF 56 96 F9 |                 alts    t5,#sprite1xy
3e9d4 ecf 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3e9d8 ed0 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3e9dc ed1 EF 56 96 F9 |                 alts    t5,#sprite1xy
3e9e0 ed2 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3e9e4 ed3 0F 4C 66 F7 |                 signx	sprite_x,#15
3e9e8 ed4 F0 56 96 F9 |                 alts    t5,#sprite1wh
3e9ec ed5 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3e9f0 ed6 01 52 86 F1 |                 sub     sprite_h,#1
3e9f4 ed7 F0 56 96 F9 |                 alts    t5,#sprite1wh
3e9f8 ed8 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3e9fc ed9             | 
3e9fc ed9             | 
3e9fc ed9 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3ea00 eda BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3ea04 edb 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3ea08 edc B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3ea0c edd 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3ea10 ede AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3ea14 edf 00 5E 06 F6 |                 mov 	t9,#0
3ea18 ee0 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3ea1c ee1 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3ea20 ee2 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3ea24 ee3             |      
3ea24 ee3 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3ea28 ee4 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3ea2c ee5 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3ea30 ee6 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3ea34 ee7 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3ea38 ee8             |                 
3ea38 ee8 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3ea3c ee9 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3ea40 eea DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3ea44 eeb             |   		
3ea44 eeb 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3ea48 eec 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3ea4c eed             | 
3ea4c eed 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3ea50 eee 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3ea54 eef 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3ea58 ef0             |  
3ea58 ef0 EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3ea5c ef1 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3ea60 ef2 10 00 90 CD |      if_c 	jmp     #p899		
3ea64 ef3             | 	
3ea64 ef3             | 	
3ea64 ef3 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3ea68 ef4 28 CD 01 F1 | 		add	t4,sprite_w
3ea6c ef5 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3ea70 ef6             | 
3ea70 ef6 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3ea74 ef7             | 
3ea74 ef7 28 59 02 F6 | p899		mov 	t6,sprite_w
3ea78 ef8 01 58 86 F1 | 	 	sub     t6,#1
3ea7c ef9 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3ea80 efa             | 
3ea80 efa 28 58 62 FD |                 setq   	t6
3ea84 efb E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3ea88 efc 28 5D 02 F6 |                 mov t8,sprite_w
3ea8c efd 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3ea90 efe 24 00 90 AD |         if_z    jmp #p898
3ea94 eff             |          
3ea94 eff             |         
3ea94 eff 70 5F 06 F6 |                 mov  t9,#368
3ea98 f00 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3ea9c f01             | 
3ea9c f01 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3eaa0 f02 08 5C 06 FA |                 mul t8,#8				' bits to shr
3eaa4 f03 FF FF 7F FF 
3eaa8 f04 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3eaac f05 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3eab0 f06 00 5E 8E F9 |                 altd t9,#0				' and mask 
3eab4 f07 2D 01 00 F5 |                 and 0-0, t7
3eab8 f08             |                
3eab8 f08             | 
3eab8 f08 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3eabc f09 E5 E0 7A FA |                 wmlong 368,t3				
3eac0 f0a             |                 
3eac0 f0a C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3eac4 f0b 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3eac8 f0c 2D 00 64 FD |                 ret
3eacc f0d             | 	
3eacc f0d             | 	
3eacc f0d             |                
3eacc f0d             |  
3eacc f0d             | '' -------------- Graphics line ------------------------------------------------------------
3eacc f0d             |  
3eacc f0d             | 
3eacc f0d             | '' consts and vars
3eacc f0d             | 
3eacc f0d 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3ead0 f0e AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3ead4 f0f 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3ead8 f10 AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3eadc f11             | 
3eadc f11 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3eae0 f12             | 
3eae0 f12             | '------ these longs will be set by setmode function
3eae0 f12             | 
3eae0 f12 00 00 00 00 | m_bs            long    0        'blanks before sync
3eae4 f13 00 00 00 00 | m_sn            long    0        'sync
3eae8 f14 00 00 00 00 | m_bv            long    0        'blanks before visible
3eaec f15 00 00 00 00 | m_vi            long    0        'visible pixels #
3eaf0 f16             | 'm_border        long    0        'left/right borders
3eaf0 f16 00 00 00 00 | i_upporch       long    0        'up porch lines
3eaf4 f17 00 00 00 00 | i_vsync         long    0        'vsync lines
3eaf8 f18 00 00 00 00 | i_downporch     long    0        'down porch lines
3eafc f19 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3eb00 f1a 00 00 00 00 | i_totalvis      long    0
3eb04 f1b             | 
3eb04 f1b             | '-------------------------------------
3eb04 f1b             |  
3eb04 f1b 00 00 00 00 | linenum         long    0
3eb08 f1c 00 00 00 00 | frames          long    0
3eb0c f1d 00 00 00 00 | dlinum long 0
3eb10 f1e 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3eb14 f1f             | 
3eb14 f1f 00 00 00 00 | vblankptr       long    0
3eb18 f20 00 00 00 00 | modeptr         long    0
3eb1c f21 00 00 00 00 | paletteptr      long    0
3eb20 f22 00 00 00 00 | dlptr           long    0
3eb24 f23 01 00 00 00 | hbase           long    1
3eb28 f24 00 00 00 00 | mailbox         long    0
3eb2c f25 00 00 00 00 | spriteptr          long 0
3eb30 f26             | 
3eb30 f26 00 00 00 00 | cmd             long    0
3eb34 f27 00 B0 07 00 | buf1            long    $80000-16384-4096
3eb38 f28 00 04 00 00 | buf2            long    1024
3eb3c f29 01 00 00 00 | dlptr2          long    1
3eb40 f2a 01 00 00 00 | dl              long    1
3eb44 f2b             | 
3eb44 f2b 00 00 00 00 | buf1c long 0
3eb48 f2c 00 B0 07 00 | buf1d            long    $80000-16384-4096
3eb4c f2d 01 00 00 00 | framebuf2       long    1
3eb50 f2e 01 00 00 00 | hsync0          long    1
3eb54 f2f 01 00 00 00 | hsync1          long    1
3eb58 f30             | 
3eb58 f30 01 00 00 00 | t1              long    1
3eb5c f31 00 00 00 00 | t2 long 0
3eb60 f32 00 00 00 00 | t3 long 0
3eb64 f33 00 00 00 00 | t4 long 0
3eb68 f34             | 
3eb68 f34 00 00 00 00 | rcnt            long    0  'dl repeat count
3eb6c f35 00 00 00 00 | rcnt2           long    0
3eb70 f36 00 00 00 00 | rcnt2a          long    0
3eb74 f37 00 00 00 00 | roffset         long    0
3eb78 f38 00 00 00 00 | rdl             long    0  'dl repeat line
3eb7c f39 00 00 00 00 | dlc             long    0  'dl command
3eb80 f3a             | 
3eb80 f3a FF FF FF FF | affffffff       long    $ffffffff
3eb84 f3b 00 00 00 00 | sprite1pointer long 0
3eb88 f3c 00 00 00 00 | sprite1xy      long 0
3eb8c f3d 00 00 00 00 | sprite1wh      long 0
3eb90 f3e 00 00 00 00 | sprite2pointer long 0
3eb94 f3f 00 00 00 00 | sprite2xy      long 0
3eb98 f40 00 00 00 00 | sprite2wh      long 0
3eb9c f41 00 00 00 00 | sprite3pointer long 0
3eba0 f42 00 00 00 00 | sprite3xy      long 0
3eba4 f43 00 00 00 00 | sprite3wh      long 0
3eba8 f44 00 00 00 00 | sprite4pointer long 0
3ebac f45 00 00 00 00 | sprite4xy      long 0
3ebb0 f46 00 00 00 00 | sprite4wh      long 0
3ebb4 f47 00 00 00 00 | sprite5pointer long 0
3ebb8 f48 00 00 00 00 | sprite5xy      long 0
3ebbc f49 00 00 00 00 | sprite5wh      long 0
3ebc0 f4a 00 00 00 00 | sprite6pointer long 0
3ebc4 f4b 00 00 00 00 | sprite6xy      long 0
3ebc8 f4c 00 00 00 00 | sprite6wh      long 0
3ebcc f4d 00 00 00 00 | sprite7pointer long 0
3ebd0 f4e 00 00 00 00 | sprite7xy      long 0
3ebd4 f4f 00 00 00 00 | sprite7wh      long 0
3ebd8 f50 00 00 00 00 | sprite8pointer long 0
3ebdc f51 00 00 00 00 | sprite8xy      long 0
3ebe0 f52 00 00 00 00 | sprite8wh      long 0
3ebe4 f53 00 00 00 00 | sprite9pointer long 0
3ebe8 f54 00 00 00 00 | sprite9xy      long 0
3ebec f55 00 00 00 00 | sprite9wh      long 0
3ebf0 f56 00 00 00 00 | sprite10pointer long 0
3ebf4 f57 00 00 00 00 | sprite10xy      long 0
3ebf8 f58 00 00 00 00 | sprite10wh      long 0
3ebfc f59 00 00 00 00 | sprite11pointer long 0
3ec00 f5a 00 00 00 00 | sprite11xy      long 0
3ec04 f5b 00 00 00 00 | sprite11wh      long 0
3ec08 f5c 00 00 00 00 | sprite12pointer long 0
3ec0c f5d 00 00 00 00 | sprite12xy      long 0
3ec10 f5e 00 00 00 00 | sprite12wh      long 0
3ec14 f5f 00 00 00 00 | sprite13pointer long 0
3ec18 f60 00 00 00 00 | sprite13xy      long 0
3ec1c f61 00 00 00 00 | sprite13wh      long 0
3ec20 f62 00 00 00 00 | sprite14pointer long 0
3ec24 f63 00 00 00 00 | sprite14xy      long 0
3ec28 f64 00 00 00 00 | sprite14wh      long 0
3ec2c f65 00 00 00 00 | sprite15pointer long 0
3ec30 f66 00 00 00 00 | sprite15xy      long 0
3ec34 f67 00 00 00 00 | sprite15wh      long 0
3ec38 f68 00 00 00 00 | sprite16pointer long 0
3ec3c f69 00 00 00 00 | sprite16xy      long 0
3ec40 f6a 00 00 00 00 | sprite16wh      long 0
3ec44 f6b 00 00 00 00 | sprite17pointer long 0
3ec48 f6c 00 00 00 00 | sprite17xy      long 0
3ec4c f6d 00 00 00 00 | sprite17wh      long 0
3ec50 f6e 00 00 00 00 | sprite18pointer long 0
3ec54 f6f 00 00 00 00 | sprite18xy      long 0
3ec58 f70 00 00 00 00 | sprite18wh      long 0
3ec5c f71 00 00 00 00 | spritenum long 0
3ec60 f72             | 
3ec60 f72 00 00 00 00 | spriteline long 0
3ec64 f73 84 03 00 00 | sprite_x long 900
3ec68 f74 00 00 00 00 | sprite_y long 0
3ec6c f75 10 00 00 00 | sprite_w long 16
3ec70 f76 40 00 00 00 | sprite_h long 64
3ec74 f77 00 00 00 00 | l2 long 0
3ec78 f78 00 00 00 00 | t5 long 0
3ec7c f79 00 00 00 00 | t6 long 0
3ec80 f7a 00 00 00 00 | t7 long 0
3ec84 f7b 00 00 00 00 | t8 long 0
3ec88 f7c 00 00 00 00 | t9 long 0
3ec8c f7d 00 00 00 00 | preloadaddr long 0
3ec90 f7e 00 00 00 00 | preloadlineaddr long 0
3ec94 f7f 00 04 00 00 | a1024 long 1024
3ec98 f80             | 
3ec98 f80 E0 03 00 00 | aa long 992
3ec9c f81 FF 03 00 00 | a1023 long 1023
3eca0 f82 00 10 00 00 | a4096 long 4096
3eca4 f83             |  fit 368
3eca4 f83             | _psram_spin2_dat_
3eca4 f83 00 00 00 00 
      ...             
3ed9c fc1 00 00 00 00 
3eda0 fc2 00 00 00 00 |     listdata long 0[8*8]
3eda4 fc3             |             orgh
3eda4                 | 
3eda4                 | ' driver state
3eda4     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3eda8     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3edac                 | 
3edac                 | ' delay profile
3edac     07 00 00 00 
3edb0     00 CF 7B 05 
3edb4     80 D1 F0 08 
3edb8     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3edbc     80 C4 60 0F 
3edc0     80 39 7A 12 
3edc4     40 2D D9 13 
3edc8     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3edcc                 | 
3edcc                 | ' data to be passed to driver when starting it
3edcc                 | startupData
3edcc     00 00 00 00 |     long    0           ' current frequency
3edd0     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3edd4     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3edd8     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3eddc     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3ede0     EC ED 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3ede4     6C EE 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3ede8     8C EE 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3edec                 | 
3edec                 | ' data for memory
3edec                 | deviceData
3edec                 |     ' 16 bank parameters follow (16MB per bank)
3edec     00 00 00 00 
      ...             
3ee24     00 00 00 00 
3ee28     00 00 00 00 |     long    0[16]                               ' banks 0-15
3ee2c                 |     ' 16 banks of pin parameters follow
3ee2c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3ee30     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3ee34     FF FF FF FF 
      ...             
3ee64     FF FF FF FF 
3ee68     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3ee6c                 | 
3ee6c                 | ' data for COG polling
3ee6c                 | qosData 
3ee6c     00 00 FF FF 
3ee70     00 00 FF FF 
3ee74     00 00 FF FF 
3ee78     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3ee7c     00 00 FF FF 
3ee80     00 00 FF FF 
3ee84     00 00 FF FF 
3ee88     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3ee8c                 |     
3ee8c                 | ' mailbox storage
3ee8c                 | 
3ee8c                 | mailboxes
3ee8c     00 00 00 00 
      ...             
3eee4     00 00 00 00 
3eee8     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3eeec                 | 	alignl
3eeec                 | _psram16drv_spin2_dat_
3eeec                 |                             orgh
3eeec     00 00 00 00 
      ...             
3ef04     00 00 00 00 
3ef08     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3ef0c                 | 
3ef0c                 | driver_start
3ef0c                 |                             org
3ef0c 000             | '..................................................................................................
3ef0c 000             | ' Memory layout for COG RAM once operational:
3ef0c 000             | '
3ef0c 000             | '  COG RAM address      Usage
3ef0c 000             | '  ---------------      ----
3ef0c 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3ef0c 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3ef0c 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3ef0c 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3ef0c 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3ef0c 000             | '  ~$198-$1F3           State and register variables
3ef0c 000             | '
3ef0c 000             | ' Also during driver COG startup:
3ef0c 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3ef0c 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3ef0c 000             | '..................................................................................................
3ef0c 000             |                             
3ef0c 000             | ' Mailbox storage after vector initialization
3ef0c 000             | 
3ef0c 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3ef10 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3ef14 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3ef18 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3ef1c 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3ef20 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3ef24 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3ef28 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3ef2c 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3ef30 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3ef34 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3ef38 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3ef3c 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3ef40 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3ef44 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3ef48 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3ef4c 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3ef50 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3ef54 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3ef58 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3ef5c 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3ef60 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3ef64 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3ef68 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3ef6c 018             | 
3ef6c 018             | ' Mailbox parameter addresses per COG once patched
3ef6c 018             |                             
3ef6c 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3ef70 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3ef74 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3ef78 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3ef7c 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3ef80 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3ef84 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3ef88 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3ef8c 020             | 
3ef8c 020             | '..................................................................................................
3ef8c 020             | ' Per COG request and state setup and service branching
3ef8c 020             |         
3ef8c 020             | cog0                 
3ef8c 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3ef90 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3ef94 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3ef98 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3ef9c 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3efa0 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3efa4 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3efa8 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3efac 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3efb0 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3efb4 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3efb8 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3efbc 02c             | cog1                        
3efbc 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3efc0 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3efc4 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3efc8 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3efcc 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3efd0 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3efd4 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3efd8 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3efdc 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3efe0 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3efe4 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3efe8 037 33 CA 63 FD |                             execf   request-0               'jump to service
3efec 038             | cog2                         
3efec 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3eff0 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3eff4 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3eff8 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3effc 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3f000 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3f004 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3f008 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3f00c 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3f010 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3f014 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3f018 043 33 CA 63 FD |                             execf   request-0               'jump to service
3f01c 044             | cog3                        
3f01c 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3f020 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3f024 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3f028 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3f02c 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3f030 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3f034 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3f038 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3f03c 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3f040 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3f044 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3f048 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3f04c 050             | cog4                        
3f04c 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3f050 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3f054 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3f058 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3f05c 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3f060 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3f064 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3f068 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3f06c 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3f070 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3f074 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3f078 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3f07c 05c             | cog5                        
3f07c 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3f080 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3f084 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3f088 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3f08c 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3f090 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3f094 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3f098 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3f09c 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3f0a0 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3f0a4 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3f0a8 067 33 CA 63 FD |                             execf   request-0               'jump to service
3f0ac 068             | cog6                        
3f0ac 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3f0b0 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3f0b4 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3f0b8 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3f0bc 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3f0c0 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3f0c4 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3f0c8 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3f0cc 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3f0d0 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3f0d4 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3f0d8 073 33 CA 63 FD |                             execf   request-0               'jump to service
3f0dc 074             | cog7                        
3f0dc 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3f0e0 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3f0e4 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3f0e8 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3f0ec 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3f0f0 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3f0f4 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3f0f8 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3f0fc 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3f100 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3f104 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3f108 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3f10c 080             |                             fit     128
3f10c 080             | 
3f10c 080             |                             fit     128
3f10c 080             | pad                         long    0[128-$]                'align init code to $80
3f10c 080             | 
3f10c 080             | '..................................................................................................
3f10c 080             | 
3f10c 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3f10c 080             | 
3f10c 080             | init                        
3f10c 080             |                             ' get driver scratch long address in hub
3f10c 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3f110 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3f114 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3f118 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3f11c 084             |                     
3f11c 084             |                             ' read in the additional LUT RAM code
3f11c 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3f120 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3f124 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3f128 087             | 
3f128 087             |                             ' read the startup parameters
3f128 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3f12c 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3f130 089             | 
3f130 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3f130 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3f134 08a             | 
3f134 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3f138 08b 01 00 00 5F 
3f13c 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3f140 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3f144 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3f148 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3f14c 090             | 
3f14c 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3f14c 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3f150 091 01 00 00 FF 
3f154 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3f158 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3f15c 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3f160 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3f164 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3f168 097 08 DE 47 F5 |                             or      a, #8
3f16c 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3f170 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3f174 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3f178 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3f17c 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3f180 09d 01 DE 07 F1 |                             add     a, #1
3f184 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3f188 09f             |  
3f188 09f             |                             ' setup device control pin states
3f188 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3f18c 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3f190 0a1 01 00 00 FF 
3f194 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3f198 0a3             | 
3f198 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3f19c 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3f1a0 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3f1a4 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3f1a8 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3f1ac 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3f1b0 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3f1b4 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3f1b8 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3f1bc 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3f1c0 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3f1c4 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3f1c8 0af             | pinloop
3f1c8 0af             |                             ' generate minimum CE high time before access
3f1c8 0af A1 07 00 FF 
3f1cc 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3f1d0 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3f1d4 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3f1d8 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3f1dc 0b4 1F DE 63 FD |                             waitx   a                       'delay
3f1e0 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3f1e4 0b6             | 
3f1e4 0b6             |                             ' setup the COG mailboxes and addresses 
3f1e4 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3f1e8 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3f1ec 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3f1f0 0b9             | 
3f1f0 0b9 28 2E 64 FD |                             setq    #24-1
3f1f4 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3f1f8 0bb             | 
3f1f8 0bb             |                             ' setup the polling loop for active COGs 
3f1f8 0bb 01 C2 63 FD |                             cogid   id
3f1fc 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3f200 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3f204 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3f208 0bf 0A F0 07 F6 |                             mov     ptra, #10
3f20c 0c0 E1 F1 03 FA |                             mul     ptra, id
3f210 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3f214 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3f218 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3f21c 0c4 03 C2 07 FA |                             mul     id, #3
3f220 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3f224 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3f228 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3f22c 0c8 D8 01 B0 FD |                             call    #reloadcogs
3f230 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3f234 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3f238 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3f238 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3f23c 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3f240 0cd 08 04 DC FC |                             rep     #2, #8
3f244 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3f248 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3f24c 0d0             | 
3f24c 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3f24c 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3f24c 0d0 01 C2 63 FD |                             cogid   id
3f250 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3f254 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3f258 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3f25c 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3f260 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3f264 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3f268 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3f26c 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3f270 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3f274 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3f278 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3f27c 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3f280 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3f284 0de A5 E5 03 F1 |                             add     d, const512
3f288 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3f28c 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3f290 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3f294 0e2             |                             
3f294 0e2             |                             ' setup register values for control vector loop setup after we return
3f294 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3f298 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3f29c 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3f2a0 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3f2a4 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3f2a8 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3f2ac 0e8 D0 C3 8F F9 |                             altd    id, #id0
3f2b0 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3f2b4 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3f2b8 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3f2bc 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3f2c0 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3f2c4 0ee             |  
3f2c4 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3f2c8 0ef 07 CA 07 F5 |                             and     request, #7
3f2cc 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3f2d0 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3f2d4 0f2             |                             fit     $100                    'ensure all init code fits this space
3f2d4 0f2             | 
3f2d4 0f2             |                             fit     $100                    'ensure all init code fits this space
3f2d4 0f2             | 
3f2d4 0f2 00 00 00 00 
      ...             
3f304 0fe 00 00 00 00 
3f308 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3f30c 100             | 
3f30c 100             | '..................................................................................................
3f30c 100             | ' Error result handling and COG notification of request completion
3f30c 100             | 
3f30c 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3f310 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3f314 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3f318 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3f31c 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3f320 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3f324 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3f328 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3f32c 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3f330 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3f334 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3f338 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3f33c 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3f340 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3f344 10e             | ' Poller re-starts here after a COG is serviced
3f344 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3f348 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3f34c 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3f350 111             | ' Main dynamic polling loop repeats until a request arrives
3f350 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3f354 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3f358 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3f35c 114             | 
3f35c 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3f360 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3f364 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3f368 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3f36c 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3f370 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3f374 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3f378 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3f37c 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3f380 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3f384 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3f388 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3f38c 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3f390 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3f394 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3f398 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3f39c 124             | 
3f39c 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3f3a0 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3f3a4 126             |  
3f3a4 126             | '..................................................................................................
3f3a4 126             | ' List handler                               
3f3a4 126             | 
3f3a4 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3f3a8 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3f3ac 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3f3b0 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3f3b4 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3f3b8 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3f3bc 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3f3c0 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3f3c4 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3f3c8 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3f3cc 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3f3d0 131 33 00 60 FD |                             execf   0-0                     'process the request 
3f3d4 132             | 
3f3d4 132             | '..................................................................................................
3f3d4 132             | ' Restoring per COG state and resuming where we left off
3f3d4 132             | 
3f3d4 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3f3d8 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3f3dc 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3f3e0 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3f3e4 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3f3e8 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3f3ec 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3f3f0 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3f3f4 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3f3f8 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3f3fc 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3f400 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3f404 13e             |                    
3f404 13e             | '..................................................................................................
3f404 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3f404 13e             | 
3f404 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3f408 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3f40c 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3f410 141 D0 DF B7 F9 |                             setd    a, #id0
3f414 142 D8 DF BF F9 |                             sets    a, #addr1
3f418 143 FE FF FF FF 
3f41c 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3f420 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3f424 146 3F DE A7 F9 |                             alti    a, #%111_111 
3f428 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3f42c 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3f430 149 01 E2 63 FD |                             cogid   c
3f434 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3f438 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3f43c 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3f440 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3f444 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3f448 14f 00 E0 03 F6 |                             mov     b, 0-0
3f44c 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3f450 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3f454 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3f458 153 0C 00 90 AD |             if_z            jmp     #excluded               
3f45c 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3f460 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3f464 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3f468 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3f46c 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3f470 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3f474 15a             | 
3f474 15a             | 'determine priority cogs and build instructions for the polling sequence
3f474 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3f478 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3f47c 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3f480 15d             | 
3f480 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3f484 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3f488 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3f48c 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3f490 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3f494 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3f498 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3f49c 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3f4a0 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3f4a4 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3f4a8 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3f4ac 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3f4b0 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3f4b4 16a             | endprioloop
3f4b4 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3f4b8 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3f4bc 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3f4c0 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3f4c4 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3f4c8 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3f4cc 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3f4d0 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3f4d4 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3f4d8 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3f4dc 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3f4e0 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3f4e4 176             | 
3f4e4 176             | ' populate the round robin COG polling instructions
3f4e4 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3f4e8 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3f4ec 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3f4f0 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3f4f4 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3f4f8 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3f4fc 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3f500 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3f504 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3f508 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3f50c 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3f510 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3f514 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3f518 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3f51c 184             | '..................................................................................................
3f51c 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3f51c 184             | 
3f51c 184             | set_latency                                                 '            (a) set latency
3f51c 184             | get_latency                                                 '            (b) get latency
3f51c 184             | set_burst                                                   '            (c) set burst size of bank
3f51c 184             | get_burst                                                   '            (d) get burst size of bank
3f51c 184             |                                                             '            (e) dump state
3f51c 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3f520 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3f524 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3f528 187             |                                                             ' | | | | e  account for following AUGS
3f528 187 04 00 00 FF 
3f52c 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3f530 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3f534 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3f538 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3f53c 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3f540 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3f544 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3f548 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3f54c 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3f550 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3f554 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3f558 193             | 
3f558 193             | '..................................................................................................
3f558 193             | ' Misc EXECF code
3f558 193             | 
3f558 193 33 72 63 FD | start_read_exec             execf   newburstr
3f55c 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3f560 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3f564 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3f568 197             | 
3f568 197             | '..................................................................................................
3f568 197             | ' Variables
3f568 197             | 
3f568 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3f56c 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3f570 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3f574 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3f578 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3f57c 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3f580 19d             | 
3f580 19d 00 00 00 80 | xfreq1          long    $80000000
3f584 19e 00 00 00 40 | xfreq2          long    $40000000
3f588 19f 03 00 00 00 | delay           long    3
3f58c 1a0             | 
3f58c 1a0             | lutcodeaddr                 
3f58c 1a0             | startupparams
3f58c 1a0             | excludedcogs                                    'careful: shared register use!
3f58c 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3f590 1a1 00 00 00 00 | flags           long    0
3f594 1a2             | mask                                            'careful: shared register use!
3f594 1a2 00 00 00 00 | resetmaskA      long    0
3f598 1a3             | limit                                           'careful: shared register use!
3f598 1a3 00 00 00 00 | resetmaskB      long    0
3f59c 1a4 00 00 00 00 | datapins        long    0
3f5a0 1a5             | const512                                        'careful: shared register use!
3f5a0 1a5 00 00 00 00 | devicelist      long    0
3f5a4 1a6 00 00 00 00 | coglist         long    0
3f5a8 1a7 00 00 00 00 | mbox            long    0 
3f5ac 1a8             | 
3f5ac 1a8             | clkpin                                          'shared with code patched during init
3f5ac 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3f5b0 1a9             | cspin                                           'shared with code patched during init
3f5b0 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3f5b4 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3f5b8 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3f5bc 1ac 01 00 00 00 | clkdelay        long    1
3f5c0 1ad 00 00 00 00 | regdatabus      long    0
3f5c4 1ae             | 
3f5c4 1ae 10 00 00 00 | deviceaddr      long    $10
3f5c8 1af             | rrcounter
3f5c8 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3f5cc 1b0             | 
3f5cc 1b0             | ' jump addresses for the per COG handlers
3f5cc 1b0 20 00 00 00 | cog0_handler    long    cog0
3f5d0 1b1 2C 00 00 00 | cog1_handler    long    cog1
3f5d4 1b2 38 00 00 00 | cog2_handler    long    cog2
3f5d8 1b3 44 00 00 00 | cog3_handler    long    cog3
3f5dc 1b4 50 00 00 00 | cog4_handler    long    cog4
3f5e0 1b5 5C 00 00 00 | cog5_handler    long    cog5
3f5e4 1b6 68 00 00 00 | cog6_handler    long    cog6
3f5e8 1b7 74 00 00 00 | cog7_handler    long    cog7
3f5ec 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3f5f0 1b9             | 
3f5f0 1b9             | ' EXECF sequences
3f5f0 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3f5f4 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3f5f8 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3f5fc 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3f600 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3f604 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3f608 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3f60c 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3f60c 1c0             | 
3f60c 1c0             | 
3f60c 1c0             | ' SKIPF sequences
3f60c 1c0             | skiptable
3f60c 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3f610 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3f614 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3f618 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3f61c 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3f620 1c5 00 00 00 00 | pattern2        long    0
3f624 1c6 00 00 00 00 | pattern3        long    0
3f628 1c7 77 02 00 00 | singlelong      long    %1001110111  
3f62c 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3f630 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3f634 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3f638 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3f63c 1cc             | 
3f63c 1cc             | ' LUT RAM address values
3f63c 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3f640 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3f644 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3f648 1cf F6 02 00 00 | noread          long    noread_lut
3f64c 1d0             | 
3f64c 1d0 00 00 00 00 | id0             long    0
3f650 1d1 01 00 00 00 | id1             long    1
3f654 1d2 02 00 00 00 | id2             long    2
3f658 1d3 03 00 00 00 | id3             long    3
3f65c 1d4 04 00 00 00 | id4             long    4
3f660 1d5 05 00 00 00 | id5             long    5
3f664 1d6 06 00 00 00 | id6             long    6
3f668 1d7 07 00 00 00 | id7             long    7
3f66c 1d8             | 
3f66c 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3f66c 1d8             | 'and COG updates and need to follow immediately after id0-id7
3f66c 1d8 00 00 00 00 | addr1           long    0
3f670 1d9 00 00 00 00 | hubdata         long    0
3f674 1da 00 00 00 00 | count           long    0
3f678 1db 00 00 00 00 | addr2           long    0
3f67c 1dc 00 00 00 00 | total           long    0
3f680 1dd 00 00 00 00 | offset1         long    0
3f684 1de 00 00 00 00 | offset2         long    0
3f688 1df 00 00 00 00 | link            long    0
3f68c 1e0             | 
3f68c 1e0             | burstwrite                                      'note shared register use during init
3f68c 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3f690 1e1 00 00 00 00 | id              long    0
3f694 1e2             | 
3f694 1e2 00 00 00 00 | header          long    0
3f698 1e3 00 00 00 00 | trailer         long    0
3f69c 1e4 00 00 00 00 | cmdaddr         long    0
3f6a0 1e5 00 00 00 00 | request         long    0
3f6a4 1e6 00 00 00 00 | rrlimit         long    0
3f6a8 1e7 00 00 00 00 | pinconfig       long    0
3f6ac 1e8 00 00 00 00 | clks            long    0
3f6b0 1e9 00 00 00 00 | resume          long    0
3f6b4 1ea 00 00 00 00 | orighubsize     long    0
3f6b8 1eb 00 00 00 00 | wrclks          long    0
3f6bc 1ec             | 
3f6bc 1ec 00 00 00 00 | pattern         long    0
3f6c0 1ed 00 00 00 00 | hubscratch      long    0
3f6c4 1ee 00 10 00 00 | val4k           long    4096
3f6c8 1ef             | 
3f6c8 1ef             | ' temporary general purpose regs
3f6c8 1ef 00 00 00 00 | a               long    0
3f6cc 1f0 00 00 00 00 | b               long    0
3f6d0 1f1 00 00 00 00 | c               long    0
3f6d4 1f2 00 00 00 00 | d               long    0
3f6d8 1f3             |                 fit     502
3f6d8 1f3             | 
3f6d8 1f3             |                 fit     502
3f6d8 1f3             | 
3f6d8 1f3             | '..................................................................................................
3f6d8 1f3             | 
3f6d8 1f3             |             orgh
3f6d8                 | 
3f6d8                 | lut_code
3f6d8                 | 'HW init code up to 80 longs
3f6d8                 | 
3f6d8                 | '..................................................................................................
3f6d8                 | ' Memory layout for LUT RAM once operational:
3f6d8                 | '
3f6d8                 | '  LUT RAM address      Usage
3f6d8                 | '  ---------------      ----
3f6d8                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3f6d8                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3f6d8                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3f6d8                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3f6d8                 | '
3f6d8                 | ' Also during driver COG startup:
3f6d8                 | ' $230-$24F is used for HW init setup
3f6d8                 | ' $250-$26F is used as temporary vector storage 
3f6d8                 | '..................................................................................................
3f6d8                 | 
3f6d8                 |                 org $230    
3f6d8 230             | 
3f6d8 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3f6d8 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3f6dc 231 24 16 60 FD |                             pollxfi
3f6e0 232 FF AA 2A FF 
3f6e4 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3f6e8 234 28 00 B0 FD |                             call    #sendqspi
3f6ec 235 07 F8 07 FF 
3f6f0 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3f6f4 237 28 00 B0 FD |                             call    #sendspi
3f6f8 238 F8 07 78 FF 
3f6fc 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3f700 23a 1C 00 B0 FD |                             call    #sendspi
3f704 23b 7F 78 78 FF 
3f708 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3f70c 23d 10 00 B0 FD |                             call    #sendspi 
3f710 23e 2D 00 64 FD |                             ret
3f714 23f             | 
3f714 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3f718 240 32 0C 64 FD |                             skipf   #%110
3f71c 241 9C EF 03 F6 |                             mov     pb, xsendimm
3f720 242             | 
3f720 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3f724 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3f728 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3f72c 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3f730 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3f734 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3f738 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3f73c 249 50 48 63 FD |                             fltl    datapins                'float data bus
3f740 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3f744 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3f748 24c             | 
3f748 24c 00 00 00 00 
3f74c 24d 00 00 00 00 
3f750 24e 00 00 00 00 
3f754 24f 00 00 00 00 |                 long    0[$270-32-$]
3f758 250             |                 fit     $270-32  ' keep room for 32 vector longs
3f758 250             |     
3f758 250             |                 fit     $270-32  ' keep room for 32 vector longs
3f758 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3f758 250             | rw_vect ' PSRAM jump vectors
3f758 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3f75c 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3f760 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3f764 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3f768 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3f76c 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3f770 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3f774 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3f778 258             | ro_vect ' R/O PSRAM jump vectors
3f778 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3f77c 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3f780 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3f784 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3f788 25c 00 01 00 00 |                 long    unsupported
3f78c 25d 00 01 00 00 |                 long    unsupported
3f790 25e 00 01 00 00 |                 long    unsupported
3f794 25f 00 01 00 00 |                 long    unsupported
3f798 260             | ctrl_vect ' Control jump vectors
3f798 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3f79c 261 00 01 00 00 |                 long    unsupported
3f7a0 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3f7a4 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3f7a8 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3f7ac 265 00 01 00 00 |                 long    unsupported
3f7b0 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3f7b4 267 3E 01 00 00 |                 long    reconfig 
3f7b8 268             | no_vect ' Invalid bank jump vectors
3f7b8 268 01 01 00 00 |                 long    invalidbank
3f7bc 269 01 01 00 00 |                 long    invalidbank
3f7c0 26a 01 01 00 00 |                 long    invalidbank
3f7c4 26b 01 01 00 00 |                 long    invalidbank
3f7c8 26c 01 01 00 00 |                 long    invalidbank
3f7cc 26d 01 01 00 00 |                 long    invalidbank
3f7d0 26e 01 01 00 00 |                 long    invalidbank
3f7d4 26f 01 01 00 00 |                 long    invalidbank
3f7d8 270             |                 fit     $270
3f7d8 270             | 
3f7d8 270             |                 fit     $270
3f7d8 270             | '..................................................................................................
3f7d8 270             | ' PSRAM READS
3f7d8 270             |                                                             ' a b c d e f
3f7d8 270             |                                                             ' B W L B R L  (a) byte read
3f7d8 270             |                                                             ' Y O O U E O  (b) word read
3f7d8 270             |                                                             ' T R N R S C  (c) long read
3f7d8 270             |                                                             ' E D G S U K  (d) new burst read
3f7d8 270             |                                                             '       T M E  (e) resumed sub-burst
3f7d8 270             |                                                             '         E D  (f) locked sub-burst
3f7d8 270             | 
3f7d8 270             | 
3f7d8 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3f7dc 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3f7e0 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3f7e4 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3f7e8 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3f7ec 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3f7f0 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3f7f4 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3f7f8 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3f7fc 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3f800 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3f804 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3f808 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3f80c 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3f810 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3f814 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3f818 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3f81c 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3f820 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3f824 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3f828 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3f82c 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3f830 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3f834 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3f838 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3f83c 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3f840 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3f844 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3f848 28c             | 
3f848 28c             |                             ' fall through to read bursts
3f848 28c             |                         
3f848 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3f848 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3f84c 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3f850 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3f854 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3f858 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3f85c 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3f860 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3f864 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3f868 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3f86c 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3f870 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3f874 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3f878 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3f87c 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3f880 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3f884 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3f888 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3f88c 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3f890 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3f894 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3f898 2a0 E8 D1 03 F1 |                             add     clks, clks
3f89c 2a1             | readcommon
3f89c 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3f8a0 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3f8a4 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3f8a8 2a4             | 
3f8a8 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3f8ac 2a5 69 C8 63 FD |                             rev     cmdaddr
3f8b0 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3f8b4 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3f8b8 2a8             | 
3f8b8 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3f8bc 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3f8c0 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3f8c0 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3f8c4 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3f8c8 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3f8cc 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3f8d0 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3f8d0 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3f8d4 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3f8d8 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3f8dc 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3f8e0 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3f8e4 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3f8e8 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3f8e8 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3f8ec 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3f8f0 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3f8f4 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3f8f8 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3f8fc 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3f900 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3f904 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3f908 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3f90c 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3f910 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3f914 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3f918 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3f91c 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3f920 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3f920 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3f924 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3f928 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3f92c 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3f930 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3f934 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3f938 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3f93c 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3f940 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3f944 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3f948 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3f94c 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3f950 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3f954 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3f958 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3f95c 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3f960 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3f964 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3f968 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3f96c 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3f970 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3f974 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3f978 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3f97c 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3f980 2da 10 03 90 FD |                             jmp     #writecommon
3f984 2db             | 
3f984 2db             | '..................................................................................................
3f984 2db             | ' Burst continuation testing
3f984 2db             | 
3f984 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3f988 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3f98c 2dd             | continue_read_lut          
3f98c 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3f990 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3f994 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3f998 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3f99c 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3f9a0 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3f9a4 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3f9a8 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3f9ac 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3f9b0 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3f9b4 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3f9b8 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3f9bc 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3f9c0 2ea             | 
3f9c0 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3f9c4 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3f9c8 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3f9cc 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3f9d0 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3f9d4 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3f9d8 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3f9dc 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3f9e0 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3f9e4 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3f9e8 2f4 2A 1C 66 0D |             _ret_           push    #poller
3f9ec 2f5             | 
3f9ec 2f5             | 
3f9ec 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3f9f0 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3f9f0 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3f9f4 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3f9f8 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3f9fc 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3fa00 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3fa04 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3fa08 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3fa0c 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3fa10 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3fa14 2ff             | '..................................................................................................
3fa14 2ff             | ' Completion of requests
3fa14 2ff             | 
3fa14 2ff             | complete_rw_lut             
3fa14 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3fa18 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3fa1c 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3fa20 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3fa24 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3fa28 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3fa2c 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3fa30 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3fa34 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3fa38 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3fa3c 309 32 62 64 AD |             if_z            skipf   #%110001
3fa40 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3fa44 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3fa48 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3fa4c 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3fa50 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3fa54 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3fa58 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3fa5c 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3fa60 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3fa64 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3fa68 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3fa6c 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3fa70 316             |                                                             ' skipcase (a) gfx copy to/from hub
3fa70 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3fa70 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3fa70 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3fa74 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3fa78 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3fa7c 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3fa80 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3fa84 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3fa88 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3fa8c 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3fa90 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3fa94 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3fa98 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3fa9c 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3faa0 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3faa4 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3faa8 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3faac 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3fab0 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3fab4 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3fab8 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3fabc 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3fac0 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3fac4 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3fac8 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3facc 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3fad0 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3fad4 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3fad8 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3fadc 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3fae0 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3fae4 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3fae8 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3faec 335 DF B7 03 A6 |             if_z            mov     addr2, link
3faf0 336 34 FF 9F AD |             if_z            jmp     #checknext
3faf4 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3faf8 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3fafc 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3fb00 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3fb04 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3fb08 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3fb0c 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3fb10 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3fb14 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3fb18 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3fb1c 341             | 
3fb1c 341             | '..................................................................................................
3fb1c 341             | ' PSRAM WRITES
3fb1c 341             |                                                             '  a b c d e f g h
3fb1c 341             | 
3fb1c 341             |                                                             '  B W L F B R L L (a) byte write(s)
3fb1c 341             |                                                             '  Y O O I U E O O (b) word write(s)
3fb1c 341             |                                                             '  T R N L R S C C (c) long write(s)
3fb1c 341             |                                                             '  E D G L S U K K (d) resumed fill
3fb1c 341             |                                                             '          T M E E (e) new burst write
3fb1c 341             |                                                             '            E D D (f) resumed burst
3fb1c 341             |                                                             '              F B (g) locked fill
3fb1c 341             |                                                             '              I U (h) locked burst write
3fb1c 341             |                                                             '              L R 
3fb1c 341             |                                                             '              L S 
3fb1c 341             |                                                             '                T 
3fb1c 341             | 
3fb1c 341             | w_single                   
3fb1c 341             | w_fill_cont           
3fb1c 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3fb20 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3fb24 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3fb28 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3fb2c 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3fb30 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3fb34 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3fb38 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3fb3c 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3fb40 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3fb44 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3fb48 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3fb4c 34d             |                ' disable call to r_resume_burst for single longs when z=0
3fb4c 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3fb50 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3fb54 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3fb58 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3fb5c 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3fb60 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3fb64 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3fb68 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3fb6c 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3fb70 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3fb74 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3fb78 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3fb7c 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3fb80 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3fb84 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3fb88 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3fb8c 35d             |         
3fb8c 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3fb8c 35d             |             '
3fb8c 35d             |             '  At least one of these 3 optional components will be sent
3fb8c 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3fb8c 35d             |             '     body - N x full longs of data
3fb8c 35d             |             '     trailer - last partial long of data
3fb8c 35d             |             '
3fb8c 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3fb8c 35d             |             '
3fb8c 35d             |             'Case    Type                           Sends
3fb8c 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3fb8c 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3fb8c 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3fb8c 35d             |             ' 4)     Multiple long fill             body only
3fb8c 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3fb8c 35d             | 
3fb8c 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3fb8c 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3fb90 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3fb94 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3fb98 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3fb9c 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3fba0 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3fba4 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3fba8 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3fbac 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3fbb0 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3fbb4 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3fbb8 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3fbbc 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3fbc0 36a             |                             
3fbc0 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3fbc4 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3fbc8 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3fbcc 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3fbd0 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3fbd4 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3fbd8 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3fbdc 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3fbe0 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3fbe4 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3fbe8 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3fbec 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3fbf0 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3fbf4 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3fbf8 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3fbfc 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3fc00 37a             | 
3fc00 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3fc04 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3fc08 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3fc0c 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3fc10 37e             |                  
3fc10 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3fc14 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3fc18 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3fc1c 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3fc20 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3fc24 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3fc28 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3fc2c 385             | 
3fc2c 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3fc30 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3fc34 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3fc38 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3fc3c 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3fc40 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3fc44 38b             | 
3fc44 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3fc44 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3fc48 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3fc4c 38d 2A B0 63 FD |                             push    addr1                   'save address
3fc50 38e             | 
3fc50 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3fc50 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3fc54 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3fc58 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3fc5c 391             |             
3fc5c 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3fc60 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3fc64 393 2B B0 63 FD |                             pop     addr1                   'restore address
3fc68 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3fc6c 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3fc70 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3fc74 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3fc78 398             | 
3fc78 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3fc7c 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3fc80 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3fc84 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3fc88 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3fc8c 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3fc90 39e             | 
3fc90 39e             |                             'trailer is done
3fc90 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3fc94 39f             | 
3fc94 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3fc98 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3fc9c 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3fca0 3a2             | 
3fca0 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3fca4 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3fca8 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3fcac 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3fcb0 3a6             |                             
3fcb0 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3fcb4 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3fcb8 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3fcbc 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3fcc0 3aa             |                                                          
3fcc0 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3fcc4 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3fcc8 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3fccc 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3fcd0 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3fcd4 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3fcd8 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3fcdc 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3fce0 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3fce4 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3fce8 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3fcec 3b5             |  
3fcec 3b5 59 52 63 FD |                             drvh    cspin
3fcf0 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3fcf4 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3fcf8 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3fcfc 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3fd00 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3fd04 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3fd08 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3fd0c 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3fd10 3be EA E5 03 F6 |                             mov     d, orighubsize
3fd14 3bf EF E5 63 F0 |                             shl     d, a
3fd18 3c0 F2 E3 83 F1 |                             sub     c, d
3fd1c 3c1 DD E3 03 F1 |                             add     c, offset1
3fd20 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3fd24 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3fd28 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3fd2c 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3fd30 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3fd34 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3fd38 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3fd3c 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3fd40 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3fd44 3cb BB D3 03 F6 |                             mov     resume, restorefill
3fd48 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3fd4c 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3fd50 3ce 6C FC BF CD |             if_c            call    #yield
3fd54 3cf 2D 00 64 FD |                             ret
3fd58 3d0             |                            
3fd58 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3fd58 3d0             |                       '     rczl    pa                      'rotate left into address offset
3fd58 3d0             |                       '     rczl    c wcz                   'restore count and flags
3fd58 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3fd5c 3d1 02 EC 67 F0 |                             shl     pa, #2
3fd60 3d2 28 06 64 AD |             if_z            setq    #3
3fd64 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3fd68 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3fd6c 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3fd70 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3fd74 3d7             | 
3fd74 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3fd78 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3fd7c 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3fd80 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3fd84 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3fd88 3dc             |                 fit 1024-32
3fd88 3dc             |         
3fd88 3dc             | 
3fd88 3dc             | '..................................................................................................
3fd88 3dc             | 
3fd88 3dc             |                 fit 1024-32
3fd88 3dc 00 00 00 00 
3fd8c 3dd 00 00 00 00 
3fd90 3de 00 00 00 00 
3fd94 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3fd98 3e0             |                 org 1024-32
3fd98 000             | 
3fd98 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3fd98 000 00 00 00 00 |                 long $0000
3fd9c 001 11 11 00 00 |                 long $1111
3fda0 002 22 22 00 00 |                 long $2222
3fda4 003 33 33 00 00 |                 long $3333
3fda8 004 44 44 00 00 |                 long $4444
3fdac 005 55 55 00 00 |                 long $5555
3fdb0 006 66 66 00 00 |                 long $6666
3fdb4 007 77 77 00 00 |                 long $7777
3fdb8 008 88 88 00 00 |                 long $8888
3fdbc 009 99 99 00 00 |                 long $9999
3fdc0 00a AA AA 00 00 |                 long $aaaa
3fdc4 00b BB BB 00 00 |                 long $bbbb
3fdc8 00c CC CC 00 00 |                 long $cccc
3fdcc 00d DD DD 00 00 |                 long $dddd
3fdd0 00e EE EE 00 00 |                 long $eeee
3fdd4 00f FF FF 00 00 |                 long $ffff
3fdd8 010             | 
3fdd8 010             | 'masks
3fdd8 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3fddc 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3fde0 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3fde4 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3fde8 014             | 
3fde8 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3fdec 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3fdf0 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3fdf4 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3fdf8 018             | 
3fdf8 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3fdfc 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3fe00 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3fe04 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3fe08 01c             | 
3fe08 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3fe0c 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3fe10 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3fe14 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3fe18 020             |         fit 1024
3fe18 020             | 
3fe18 020             |         fit 1024
3fe18 020             | 
3fe18 020             | '--------------------------------------------------------------------------------------------------
3fe18 020             |         orgh
3fe18                 | 
3fe18                 | gfxexpansion
3fe18                 |                             'simple line drawing graphics expansion of memory driver
3fe18                 |                             'jmp     #donerepeats                'just return for now
3fe18                 | 
3fe18     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3fe1c     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3fe20     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3fe24     DD E1 03 F6 |                             mov     b, offset1              'get error term
3fe28     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3fe2c     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3fe30     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3fe34     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3fe38     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3fe3c     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3fe40     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3fe44     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3fe48     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3fe4c     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3fe50     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3fe54     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3fe58     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3fe5c     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3fe60     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3fe64     DC E5 33 F9 |                             getword d, total, #0            'get line width
3fe68     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3fe6c     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3fe70     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3fe74     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3fe78     C3 03 80 FD |                             jmp     #readmask               'continue filling
3fe7c                 | 	alignl
3fe7c                 | _usbnew_spin2_dat_
3fe7c                 |                 org     $000
3fe7c 000             | 
3fe7c 000             | usb_host_start
3fe7c 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3fe80 001             | 
3fe80 001 03 00 00 FF 
3fe84 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3fe88 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3fe8c 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3fe90 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3fe94 006 29 70 63 FD |                 setq2   htmp
3fe98 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3fe9c 008             | 
3fe9c 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3fea0 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3fea4 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3fea8 00b             | 
3fea8 00b             | '------------------------------------------------------------------------------
3fea8 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3fea8 00b             | ' special because the receiving function must not respond with either STALL or
3fea8 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3fea8 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3fea8 00b             | ' corrupt packet, it must ignore the transaction
3fea8 00b             | '------------------------------------------------------------------------------
3fea8 00b             | ' On entry:
3fea8 00b             | '   PTRA - start address of the SETUP data struct.
3fea8 00b             | ' On exit:
3fea8 00b             | '   retval - PID_ACK on success, otherwise error code.
3fea8 00b             | '------------------------------------------------------------------------------
3fea8 00b             | txn_setup
3fea8 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3feac 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3feb0 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3feb4 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3feb8 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3febc 010             | .setup
3febc 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3fec0 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fec4 012 2D 00 64 AD |         if_z    ret
3fec8 013 7C 0B B0 FD |                 call    #retry_wait
3fecc 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3fed0 015 2D 00 64 AD |         if_z    ret
3fed4 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3fed8 017 E0 FF 9F FD |                 jmp     #.setup
3fedc 018             | 
3fedc 018             | '------------------------------------------------------------------------------
3fedc 018             | ' IN/INTERRUPT transaction.
3fedc 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3fedc 018             | '------------------------------------------------------------------------------
3fedc 018             | ' On entry:
3fedc 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3fedc 018             | '     CRC(b19..23).
3fedc 018             | ' On exit:
3fedc 018             | '------------------------------------------------------------------------------
3fedc 018             | txn_in
3fedc 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3fee0 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3fee4 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3fee8 01b             | 
3fee8 01b             |                 ' Fall through to urx_packet
3fee8 01b             | 
3fee8 01b             | '------------------------------------------------------------------------------
3fee8 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3fee8 01b             | ' received are handshakes and IN DATAx.
3fee8 01b             | '------------------------------------------------------------------------------
3fee8 01b             | ' On entry:
3fee8 01b             | ' On exit:
3fee8 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3fee8 01b             | '     returned.
3fee8 01b             | '------------------------------------------------------------------------------
3fee8 01b             | urx_packet
3fee8 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3feec 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3fef0 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3fef4 01e 1A 92 63 FD |                 getct   hct2
3fef8 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3fefc 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3ff00 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3ff04 022             | .wait_sop
3ff04 022 22 A7 8A FA |                 rdpin   urx, dm
3ff08 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3ff0c 024 08 00 90 CD |         if_c    jmp     #.get_pid
3ff10 025 FC 25 CC FB |                 jnct2   #.wait_sop
3ff14 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3ff18 027             | .get_pid
3ff18 027 28 02 B0 FD |                 call    #urx_next
3ff1c 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3ff20 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3ff24 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3ff28 02b             | .chk_pid
3ff28 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ff2c 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3ff30 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3ff34 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3ff38 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3ff3c 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3ff40 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3ff44 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3ff48 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3ff4c 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3ff50 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3ff54 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3ff58 037             | .ack_resend
3ff58 037 22 A7 82 FA |                 rqpin   urx, dm
3ff5c 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3ff60 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3ff64 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3ff68 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3ff6c 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3ff70 03d             | .chk_eop
3ff70 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3ff74 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3ff78 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3ff7c 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3ff80 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3ff84 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3ff88 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3ff8c 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3ff90 045 2D 00 64 FD |                 ret
3ff94 046             | .idle
3ff94 046 22 A7 82 FA |                 rqpin   urx, dm
3ff98 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3ff9c 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3ffa0 049 2D 00 64 FD |                 ret
3ffa4 04a             | 
3ffa4 04a             | '------------------------------------------------------------------------------
3ffa4 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3ffa4 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3ffa4 04a             | ' if one is required.
3ffa4 04a             | '------------------------------------------------------------------------------
3ffa4 04a             | ' On entry:
3ffa4 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3ffa4 04a             | ' On exit:
3ffa4 04a             | '------------------------------------------------------------------------------
3ffa4 04a             | utx_token
3ffa4 04a 22 A7 82 FA |                 rqpin   urx, dm
3ffa8 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3ffac 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3ffb0 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3ffb4 04e 34 0D B0 CD |         if_c    call    #utx_pre
3ffb8 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3ffbc 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3ffc0 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3ffc4 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3ffc8 053             | .next_byte
3ffc8 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3ffcc 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3ffd0 055             | .wait
3ffd0 055 40 46 72 FD |                 testp   dp                      wc
3ffd4 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3ffd8 057 23 03 08 FC |                 akpin   dp
3ffdc 058 22 A5 22 FC |                 wypin   utx, dm
3ffe0 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3ffe4 05a             | 
3ffe4 05a             | '------------------------------------------------------------------------------
3ffe4 05a             | ' SETUP/OUT/INTERRUPT transaction.
3ffe4 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3ffe4 05a             | '------------------------------------------------------------------------------
3ffe4 05a             | ' On entry:
3ffe4 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3ffe4 05a             | '     CRC(b19..23).
3ffe4 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3ffe4 05a             | '   pkt_data - count of DATAx payload bytes to send.
3ffe4 05a             | ' On exit:
3ffe4 05a             | '------------------------------------------------------------------------------
3ffe4 05a             | txn_out
3ffe4 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3ffe8 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3ffec 05c 00 00 C0 FF 
3fff0 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3fff4 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3fff8 05f             | 
3fff8 05f             |                 ' Fall through to utx_data
3fff8 05f             | 
3fff8 05f             | '------------------------------------------------------------------------------
3fff8 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3fff8 05f             | ' calculated while the data byte is being shifted out. Since data stage
3fff8 05f             | ' success/fail is not determined until the status stage of the transaction,
3fff8 05f             | ' this routine is only concerned about the current DATAx packet.
3fff8 05f             | '------------------------------------------------------------------------------
3fff8 05f             | ' On entry:
3fff8 05f             | '   PTRA - hub start address of the data to read.
3fff8 05f             | '   pkt_cnt - data payload size.
3fff8 05f             | ' On exit:
3fff8 05f             | '------------------------------------------------------------------------------
3fff8 05f             | utx_data
3fff8 05f 22 A7 82 FA |                 rqpin   urx, dm
3fffc 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
40000 061 F4 FF 9F CD |         if_c    jmp     #utx_data
40004 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
40008 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
4000c 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
40010 065 D8 0C B0 CD |         if_c    call    #utx_pre
40014 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
40018 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
4001c 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
40020 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
40024 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
40028 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
4002c 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
40030 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
40034 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
40038 06f             | .read_byte
40038 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
4003c 070 F0 00 B0 FD |                 call    #utx_byte
40040 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
40044 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
40048 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
4004c 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
40050 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
40054 076             | .send_crc
40054 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
40058 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
4005c 078 D0 00 B0 FD |                 call    #utx_byte
40060 079 5D A5 EA F8 |                 getbyte utx, crc, #1
40064 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
40068 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
4006c 07c             | 
4006c 07c             | '------------------------------------------------------------------------------
4006c 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
4006c 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
4006c 07c             | ' expects that the packet includes at least the CRC word.
4006c 07c             | '
4006c 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
4006c 07c             | ' was requested, which makes it difficult to determine where the data stops
4006c 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
4006c 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
4006c 07c             | ' USB-16 expected residual value of 0xB001.
4006c 07c             | '
4006c 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
4006c 07c             | ' so the caller can verify IN success before writing the data to its final
4006c 07c             | ' destination.
4006c 07c             | '------------------------------------------------------------------------------
4006c 07c             | ' On entry:
4006c 07c             | '   pkt_data - max byte count expected to be in the packet.
4006c 07c             | '   newb_flg - signals new byte ready when toggled.
4006c 07c             | ' On exit:
4006c 07c             | '   pkt_cnt - actual number of bytes read.
4006c 07c             | '------------------------------------------------------------------------------
4006c 07c             | urx_data
4006c 07c F7 75 03 F6 |                 mov     htmp2, pb
40070 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
40074 07e 00 00 C0 FF 
40078 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
4007c 080 BA EF 03 F6 |                 mov     pb, htmp2
40080 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
40084 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
40088 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
4008c 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
40090 085             | .wait_byte
40090 085             | ' In-line rx for max speed
40090 085 22 A7 82 FA |                 rqpin   urx, dm
40094 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
40098 087 53 A5 02 F5 |                 and     utx, urx
4009c 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
400a0 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
400a4 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
400a8 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
400ac 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
400b0 08d DC FF 9F FD |                 jmp     #.wait_byte
400b4 08e             | .get_byte
400b4 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
400b8 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
400bc 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
400c0 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
400c4 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
400c8 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
400cc 094             | .end_crc
400cc 094 01 B8 06 F1 |                 add     pkt_cnt, #1
400d0 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
400d4 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
400d8 097 2D 00 64 1D |         if_a    ret
400dc 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
400dc 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
400dc 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
400dc 098             | ' to miss it, so cheat a bit and look for SOP clear here.
400dc 098 22 A7 82 FA |                 rqpin   urx, dm
400e0 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
400e4 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
400e8 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
400e8 09b             | .chk_crc
400e8 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
400ec 09c 58 00 00 FF 
400f0 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
400f4 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
400f8 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
400fc 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
40100 0a1 34 09 B0 FD |                 call    #poll_waitx
40104 0a2             | 
40104 0a2             |                 ' Fall through to utx_handshake
40104 0a2             | 
40104 0a2             | '------------------------------------------------------------------------------
40104 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
40104 0a2             | ' the appropriate IP delay has been inserted.
40104 0a2             | '------------------------------------------------------------------------------
40104 0a2             | ' On entry:
40104 0a2             | '   retval - handshake PID to send.
40104 0a2             | ' On exit:
40104 0a2             | '   retval unchanged.
40104 0a2             | '------------------------------------------------------------------------------
40104 0a2             | utx_handshake
40104 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
40108 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
4010c 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
40110 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
40114 0a6 5F A5 02 F6 |                 mov     utx, retval
40118 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
4011c 0a8             | .idle
4011c 0a8 22 A7 82 FA |                 rqpin   urx, dm
40120 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
40124 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
40128 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
4012c 0ac 08 09 90 FD |                 jmp     #poll_waitx
40130 0ad             | 
40130 0ad             | '------------------------------------------------------------------------------
40130 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
40130 0ad             | '------------------------------------------------------------------------------
40130 0ad             | ' On entry:
40130 0ad             | '   utx - byte to transmit.
40130 0ad             | ' On exit:
40130 0ad             | '------------------------------------------------------------------------------
40130 0ad             | utx_byte
40130 0ad 40 46 72 FD |                 testp   dp                      wc
40134 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
40138 0af 23 03 08 FC |                 akpin   dp
4013c 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
40140 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
40144 0b2             | 
40144 0b2             | '------------------------------------------------------------------------------
40144 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
40144 0b2             | '------------------------------------------------------------------------------
40144 0b2             | ' On entry:
40144 0b2             | ' On exit:
40144 0b2             | '   retval - the byte read.
40144 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
40144 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
40144 0b2             | '     received.
40144 0b2             | '------------------------------------------------------------------------------
40144 0b2             | urx_next
40144 0b2 22 A7 8A FA |                 rdpin   urx, dm
40148 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
4014c 0b4 53 A5 02 F5 |                 and     utx, urx
40150 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
40154 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
40158 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
4015c 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
40160 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
40164 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
40168 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
4016c 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
40170 0bd 2D 00 64 FD |                 ret
40174 0be             | 
40174 0be             | '------------------------------------------------------------------------------
40174 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
40174 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
40174 0be             | ' length, and the PID is not included in the CRC calculation:
40174 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
40174 0be             | '  CRC5  ENDP ADDRESS PID
40174 0be             | ' %00000_1111_1111111_xxxxxxxx
40174 0be             | '------------------------------------------------------------------------------
40174 0be             | ' On entry:
40174 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
40174 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
40174 0be             | ' On exit:
40174 0be             | '   ep_addr_pid - CRC value appended to the packet.
40174 0be             | '------------------------------------------------------------------------------
40174 0be             | calc_crc5
40174 0be FF 03 00 FF 
40178 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
4017c 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
40180 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
40184 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
40188 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
4018c 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
40190 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
40194 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
40198 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
4019c 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
401a0 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
401a4 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
401a8 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
401ac 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
401b0 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
401b4 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
401b8 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
401bc 0d0             | 
401bc 0d0             | '------------------------------------------------------------------------------
401bc 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
401bc 0d0             | '------------------------------------------------------------------------------
401bc 0d0             | isr1_fsframe
401bc 0d0 1A 92 62 FD |                 getct   iframe_ct_base
401c0 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
401c4 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
401c8 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
401cc 0d4             | .wait
401cc 0d4 40 46 72 FD |                 testp   dp                      wc
401d0 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
401d4 0d6 23 03 08 FC |                 akpin   dp
401d8 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
401dc 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
401e0 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
401e4 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
401e8 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
401ec 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
401f0 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
401f4 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
401f8 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
401fc 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
40200 0e1 2C FF BF FD |                 call    #utx_byte
40204 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
40208 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
4020c 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
40210 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
40214 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
40218 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
4021c 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
40220 0e9 5B A5 42 F5 |                 or      utx, icrc
40224 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
40228 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
4022c 0ec 20 00 90 FD |                 jmp     #isr1_wait
40230 0ed             | isr1_lsframe
40230 0ed 1A 92 62 FD |                 getct   iframe_ct_base
40234 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
40238 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
4023c 0f0             | .wait
4023c 0f0 40 46 72 FD |                 testp   dp                      wc
40240 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
40244 0f2 23 03 08 FC |                 akpin   dp
40248 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
4024c 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
40250 0f5             | isr1_wait
40250 0f5 22 A5 82 FA |                 rqpin   utx, dm
40254 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
40258 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
4025c 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
40260 0f9 03 00 00 FF 
40264 0fa FF B3 06 F5 |                 and     frame, ##$7ff
40268 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
4026c 0fc F5 FF 3B FB |                 reti1
40270 0fd             | 
40270 0fd             | '------------------------------------------------------------------------------
40270 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
40270 0fd             | ' transaction will complete before the next frame is triggered.
40270 0fd             | '------------------------------------------------------------------------------
40270 0fd             | ' On entry:
40270 0fd             | ' On exit:
40270 0fd             | '------------------------------------------------------------------------------
40270 0fd             | wait_txn_ok
40270 0fd 1A 74 63 FD |                 getct   htmp2
40274 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
40278 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
4027c 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
40280 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
40284 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
40288 103 2D 00 64 FD |                 ret
4028c 104             | 
4028c 104             | '------------------------------------------------------------------------------
4028c 104             | ' A device connection was detected, or a bus reset was requested by the USB
4028c 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
4028c 104             | ' and perform a reset sequence prior to device enumeration.
4028c 104             | '------------------------------------------------------------------------------
4028c 104             | dev_reset
4028c 104 22 A7 82 FA |                 rqpin   urx, dm
40290 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
40294 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
40298 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
4029c 108             | reset
4029c 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
402a0 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
402a4 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
402a8 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
402ac 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
402b0 10d 1A 92 62 FD |                 getct   iframe_ct_base
402b4 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
402b8 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
402bc 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
402c0 111 24 70 07 F1 |                 add     htmp, #36
402c4 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
402c8 113             | .framewait
402c8 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
402cc 114 F8 FF 9F CD |         if_b    jmp     #.framewait
402d0 115 2D 00 64 FD |                 ret
402d4 116             | 
402d4 116             | '------------------------------------------------------------------------------
402d4 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
402d4 116             | '------------------------------------------------------------------------------
402d4 116             | ' On entry:
402d4 116             | '   PTRA - source address.
402d4 116             | '   PB - destination address.
402d4 116             | '   hr0 - length of copy, in bytes.
402d4 116             | ' On exit:
402d4 116             | '------------------------------------------------------------------------------
402d4 116             | hmemcpy
402d4 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
402d8 117 F7 71 43 FC |                 wrbyte  htmp, pb
402dc 118 01 EE 07 F1 |                 add     pb, #1
402e0 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
402e4 11a             | 
402e4 11a             | '------------------------------------------------------------------------------
402e4 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
402e4 11a             | ' loop until the errant device is disconnected.
402e4 11a             | '------------------------------------------------------------------------------
402e4 11a             | ' On entry:
402e4 11a             | ' On exit:
402e4 11a             | '------------------------------------------------------------------------------
402e4 11a             | host_error
402e4 11a             |           if ERROR_LED >= 0
402e4 11a             |           end
402e4 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
402e8 11b             | 
402e8 11b             | '------------------------------------------------------------------------------
402e8 11b             | ' Get HID descriptor buffer for current port
402e8 11b             | '------------------------------------------------------------------------------
402e8 11b             | ' On entry:
402e8 11b             | ' On exit:
402e8 11b             | '   PB - HID descriptor buffer pointer
402e8 11b             | '------------------------------------------------------------------------------
402e8 11b             | get_hid_descr_buffer
402e8 11b 2D EF 03 F6 |                 mov     pb, hdev_port
402ec 11c 01 EE E7 F2 |                 cmpsub  pb, #1
402f0 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
402f4 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
402f8 11f             | 
402f8 11f             | 
402f8 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
402fc 120             | 
402fc 120             | ' USB commands and error codes
402fc 120 00 00 00 00 | cmd_data        long    0
40300 121 00 00 00 00 | usb_err_code    long    ERR_NONE
40304 122             | 
40304 122             | ' Parameters block assigned at cog startup
40304 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
40308 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
4030c 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
40310 125             | if ACTIVITY_LED >= 0
40310 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
40310 125             | end
40310 125             | if ERROR_LED >= 0
40310 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
40310 125             | end
40310 125 00 00 00 00 | hid_descr_p     long    0
40314 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
40314 126             | 'hkbd_report_p   long    0
40314 126 00 00 00 00 | hub_descr_p     long    0
40318 127 00 00 00 00 | urx_buff_p      long    0
4031c 128 00 00 00 00 | dev_desc_buff_p long    0
40320 129 00 00 00 00 | con_desc_buff_p long    0
40324 12a 00 00 00 00 | cache_start_p   long    0
40328 12b 00 00 00 00 | cache_end_p     long    0
4032c 12c             | if EMUPAD_MAX_PLAYER > 0
4032c 12c             | emupad_out_ptr  long    0
4032c 12c             | end
4032c 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
40330 12d             | 
40330 12d             | hdev_init_start
40330 12d             | hdev_port       res     1
40330 12d             | hdev_port       res     1
40330 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
40330 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
40330 12d             | kbm_next_datax  res     1
40330 12d             | kbm_next_datax  res     1
40330 12d             | hub_intf_num    res     1
40330 12d             | hub_intf_num    res     1
40330 12d             | hub_next_datax  res     1
40330 12d             | hub_next_datax  res     1
40330 12d             | hub_status_chg  res     1
40330 12d             | hub_status_chg  res     1
40330 12d             | hub_port_status res     1
40330 12d             | hub_port_status res     1
40330 12d             | if HAVE_MOUSE
40330 12d             | ms_intf_num     res     1
40330 12d             | ms_intf_num     res     1
40330 12d             | ms_in_max_pkt   res     1
40330 12d             | ms_in_max_pkt   res     1
40330 12d             | end
40330 12d             | kb_intf_num     res     1
40330 12d             | kb_intf_num     res     1
40330 12d             | kb_interval     res     1
40330 12d             | kb_interval     res     1
40330 12d             | kb_in_max_pkt   res     1
40330 12d             | kb_in_max_pkt   res     1
40330 12d             | kb_max_index    res     1
40330 12d             | kb_max_index    res     1
40330 12d             | kb_led_states   res     1
40330 12d             | kb_led_states   res     1
40330 12d             | gp_intf_num     res     1
40330 12d             | gp_intf_num     res     1
40330 12d             | gp_interval     res     1
40330 12d             | gp_interval     res     1
40330 12d             | gp_max_index    res     1
40330 12d             | gp_max_index    res     1
40330 12d             | gp_descr_len    res     1+MAX_DEVICES
40330 12d             | gp_descr_len    res     1+MAX_DEVICES
40330 12d             | hdev_init_end
40330 12d             | 
40330 12d             | ' Initialized at cog startup:
40330 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
40330 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
40330 12d             | iframe_ct_new   res     1
40330 12d             | iframe_ct_new   res     1
40330 12d             | iframe_ct_base  res     1
40330 12d             | iframe_ct_base  res     1
40330 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
40330 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
40330 12d             | 
40330 12d             | ' This register block is reset to zero when a USB device connects
40330 12d             | hreg_init_start
40330 12d             | hstatus         res     1         ' Host status flags
40330 12d             | hstatus         res     1         ' Host status flags
40330 12d             | hctwait         res     1         ' Poll-based wait clocks
40330 12d             | hctwait         res     1         ' Poll-based wait clocks
40330 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
40330 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
40330 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
40330 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
40330 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
40330 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
40330 12d             | xfer_retry      res     1         ' Control transfer retry count
40330 12d             | xfer_retry      res     1         ' Control transfer retry count
40330 12d             | retry           res     1         ' Transaction retry count
40330 12d             | retry           res     1         ' Transaction retry count
40330 12d             | utx             res     1         ' Byte to transmit on USB
40330 12d             | utx             res     1         ' Byte to transmit on USB
40330 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
40330 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
40330 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
40330 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
40330 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
40330 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
40330 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
40330 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
40330 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
40330 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
40330 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
40330 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
40330 12d             | frame           res     1         ' USB 1ms frame counter value
40330 12d             | frame           res     1         ' USB 1ms frame counter value
40330 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
40330 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
40330 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
40330 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
40330 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
40330 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
40330 12d             | crc             res     1         ' Used for CRC16 calculation
40330 12d             | crc             res     1         ' Used for CRC16 calculation
40330 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
40330 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
40330 12d             | retval          res     1         ' Global success/fail return parameter
40330 12d             | retval          res     1         ' Global success/fail return parameter
40330 12d             | context_retval  res     1         ' Operation contextual return parameter
40330 12d             | context_retval  res     1         ' Operation contextual return parameter
40330 12d             | ' Device stuff
40330 12d             | hdev_id         res     1+MAX_DEVICES
40330 12d             | hdev_id         res     1+MAX_DEVICES
40330 12d             | hdev_bcd        res     1
40330 12d             | hdev_bcd        res     1
40330 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
40330 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
40330 12d             | ' Keyboard/mouse stuff
40330 12d             | hctrl_ep_addr   res     1
40330 12d             | hctrl_ep_addr   res     1
40330 12d             | hctrl_max_pkt   res     1
40330 12d             | hctrl_max_pkt   res     1
40330 12d             | hconfig_base    res     1
40330 12d             | hconfig_base    res     1
40330 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
40330 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
40330 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
40330 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
40330 12d             | hdev_class      res     1
40330 12d             | hdev_class      res     1
40330 12d             | hdev_subclass   res     1
40330 12d             | hdev_subclass   res     1
40330 12d             | hdev_protocol   res     1
40330 12d             | hdev_protocol   res     1
40330 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
40330 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
40330 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
40330 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
40330 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
40330 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
40330 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
40330 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
40330 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
40330 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
40330 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
40330 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
40330 12d             | if HAVE_MOUSE
40330 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
40330 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
40330 12d             | end
40330 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
40330 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
40330 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
40330 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
40330 12d             | hdev_ep_addr    res     1+MAX_DEVICES
40330 12d             | hdev_ep_addr    res     1+MAX_DEVICES
40330 12d             | hdev_out_addr   res     1
40330 12d             | hdev_out_addr   res     1
40330 12d             | 
40330 12d             | if EMUPAD_MAX_PLAYER > 0
40330 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
40330 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
40330 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
40330 12d             | end
40330 12d             | 
40330 12d             | hreg_init_end
40330 12d             | 
40330 12d             | hidr_start
40330 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
40330 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
40330 12d             | hidr_flags      res     1
40330 12d             | hidr_flags      res     1
40330 12d             | hidr_axis       res     3
40330 12d             | hidr_axis       res     3
40330 12d             | hidr_buttons    res     1
40330 12d             | hidr_buttons    res     1
40330 12d             | hidr_hats       res     1
40330 12d             | hidr_hats       res     1
40330 12d             | '' Above are actually useful values, 6 longs
40330 12d             | hidr_id         res     1
40330 12d             | hidr_id         res     1
40330 12d             | hidr_state      res     1
40330 12d             | hidr_state      res     1
40330 12d             | hidr_size       res     1
40330 12d             | hidr_size       res     1
40330 12d             | hidr_count      res     1
40330 12d             | hidr_count      res     1
40330 12d             | hidr_offset     res     1
40330 12d             | hidr_offset     res     1
40330 12d             | hidr_usage_idx  res     1
40330 12d             | hidr_usage_idx  res     1
40330 12d             | hidr_lminmax    res     1
40330 12d             | hidr_lminmax    res     1
40330 12d             | hidr_pminmax    res     1
40330 12d             | hidr_pminmax    res     1
40330 12d             | hidr_type       res     1
40330 12d             | hidr_type       res     1
40330 12d             | hidr_end
40330 12d             | 
40330 12d             | ' Variables dependent on the system freqency
40330 12d             | _var_64_lower_  res     1
40330 12d             | _var_64_lower_  res     1
40330 12d             | _var_64_upper_  res     1
40330 12d             | _var_64_upper_  res     1
40330 12d             | _12Mbps_        res     1
40330 12d             | _12Mbps_        res     1
40330 12d             | _1_5Mbps_       res     1
40330 12d             | _1_5Mbps_       res     1
40330 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
40330 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
40330 12d             | _1us_           res     1         ' 1us
40330 12d             | _1us_           res     1         ' 1us
40330 12d             | _10us_          res     1         ' 10us
40330 12d             | _10us_          res     1         ' 10us
40330 12d             | _33us_          res     1         ' 33us
40330 12d             | _33us_          res     1         ' 33us
40330 12d             | _txn_err_       res     1         ' 250us
40330 12d             | _txn_err_       res     1         ' 250us
40330 12d             | _500us_         res     1         ' 500us
40330 12d             | _500us_         res     1         ' 500us
40330 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
40330 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
40330 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
40330 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
40330 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
40330 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
40330 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
40330 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
40330 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
40330 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
40330 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
40330 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
40330 12d             | _preamble_wait_ res     1
40330 12d             | _preamble_wait_ res     1
40330 12d             | _1ms_           res     1         ' 1ms
40330 12d             | _1ms_           res     1         ' 1ms
40330 12d             | _2ms_           res     1         ' 2ms
40330 12d             | _2ms_           res     1         ' 2ms
40330 12d             | _suspend_wait_  res     1         ' 3ms
40330 12d             | _suspend_wait_  res     1         ' 3ms
40330 12d             | _4ms_           res     1         ' 4ms
40330 12d             | _4ms_           res     1         ' 4ms
40330 12d             | _xfer_wait_     res     1         ' 5ms
40330 12d             | _xfer_wait_     res     1         ' 5ms
40330 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
40330 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
40330 12d             | _reset_hold_    res     1         ' 15ms
40330 12d             | _reset_hold_    res     1         ' 15ms
40330 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
40330 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
40330 12d             | _21ms_          res     1         ' 21ms
40330 12d             | _21ms_          res     1         ' 21ms
40330 12d             | _100ms_         res     1         ' 100ms
40330 12d             | _100ms_         res     1         ' 100ms
40330 12d             | _500ms_         res     1         ' 500ms
40330 12d             | _500ms_         res     1         ' 500ms
40330 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
40330 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
40330 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
40330 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
40330 12d             | '------------------------------------------------------------------------------
40330 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
40330 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
40330 12d             | _usb_d_ls_nco_  res     1
40330 12d             | _usb_d_ls_nco_  res     1
40330 12d             | _usb_h_fs_nco_  res     1
40330 12d             | _usb_h_fs_nco_  res     1
40330 12d             | _usb_d_fs_nco_  res     1
40330 12d             | _usb_d_fs_nco_  res     1
40330 12d             | '------------------------------------------------------------------------------
40330 12d             | ' Scratch registers
40330 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
40330 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
40330 12d             | htmp1           res     1
40330 12d             | htmp1           res     1
40330 12d             | htmp2           res     1
40330 12d             | htmp2           res     1
40330 12d             | htmp3           res     1
40330 12d             | htmp3           res     1
40330 12d             | hrep            res     1         ' Repeat count
40330 12d             | hrep            res     1         ' Repeat count
40330 12d             | hsave0          res     1         ' Subroutine parameter saves
40330 12d             | hsave0          res     1         ' Subroutine parameter saves
40330 12d             | hsave1          res     1
40330 12d             | hsave1          res     1
40330 12d             | hsave2          res     1
40330 12d             | hsave2          res     1
40330 12d             | isrtmp1         res     1
40330 12d             | isrtmp1         res     1
40330 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
40330 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
40330 12d             | hr0             res     1         ' Multi-purpose registers
40330 12d             | hr0             res     1         ' Multi-purpose registers
40330 12d             | hr1             res     1
40330 12d             | hr1             res     1
40330 12d             | hr2             res     1
40330 12d             | hr2             res     1
40330 12d             | hr3             res     1
40330 12d             | hr3             res     1
40330 12d             | hpar1           res     1         ' Routine entry/exit parameters
40330 12d             | hpar1           res     1         ' Routine entry/exit parameters
40330 12d             | hpar2           res     1
40330 12d             | hpar2           res     1
40330 12d             | hpar3           res     1
40330 12d             | hpar3           res     1
40330 12d             | hct2            res     1         ' Function response bus turn-around timer
40330 12d             | hct2            res     1         ' Function response bus turn-around timer
40330 12d             | hct3            res     1         ' Keyboard/mouse poll timer
40330 12d             | hct3            res     1         ' Keyboard/mouse poll timer
40330 12d             | mod_cnt         res     1         ' Used in idle loops
40330 12d             | mod_cnt         res     1         ' Used in idle loops
40330 12d             |                 fit     $1F0
40330 12d             |                 org     $200
40330 200             | hlut_start
40330 200             | 
40330 200             | '------------------------------------------------------------------------------
40330 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
40330 200             | ' settings to startup defaults.
40330 200             | '------------------------------------------------------------------------------
40330 200             | ' On entry:
40330 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
40330 200             | '------------------------------------------------------------------------------
40330 200             | set_speed_full
40330 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
40334 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
40338 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
4033c 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
40340 204             | '                ret                             wcz     ' Restore caller flags on exit
40340 204             | 
40340 204             | '------------------------------------------------------------------------------
40340 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
40340 204             | ' is a downstream hub connected (not yet implemented), the baud generator
40340 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
40340 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
40340 204             | ' putting the smart pins into reset.
40340 204             | '------------------------------------------------------------------------------
40340 204             | ' On entry:
40340 204             | ' On exit: CZ flags restored to caller states
40340 204             | '------------------------------------------------------------------------------
40340 204             | set_speed_low
40340 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
40344 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
40348 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
4034c 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
40350 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
40354 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
40358 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
4035c 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
40360 20c             | 
40360 20c             | '------------------------------------------------------------------------------
40360 20c             | ' Perform configuration stuff required when a device intitially connects.
40360 20c             | '------------------------------------------------------------------------------
40360 20c             | ' On entry:
40360 20c             | ' On exit:
40360 20c             | '------------------------------------------------------------------------------
40360 20c             | on_connect
40360 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
40364 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
40368 20e             | .retry
40368 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
4036c 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
40370 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
40374 211 00 08 00 FF 
40378 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
4037c 213 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
40380 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
40384 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
40388 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
4038c 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
40390 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40394 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
40398 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
4039c 21b 4C 03 B0 FD |                 call    #poll_waitx
403a0 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
403a4 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
403a8 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
403ac 21f B8 FF 9F FD |                 jmp     #.retry
403b0 220             | .get_dev_desc
403b0 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
403b4 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
403b8 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
403bc 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
403c0 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
403c4 225 88 FB BF FD |                 call    #reset
403c8 226 30 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
403cc 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
403d0 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
403d4 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
403d8 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
403dc 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
403e0 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
403e4 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
403e8 22e 04 00 00 FF 
403ec 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
403f0 230 34 FA BF FD |                 call    #calc_crc5
403f4 231 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
403f8 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
403fc 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
40400 234 F7 AD C2 FA |                 rdbyte  total_data, pb
40404 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
40408 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
4040c 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40410 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
40414 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
40418 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
4041c 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
40420 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
40424 23d C4 02 B0 FD |                 call    #poll_waitx
40428 23e 20 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
4042c 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
40430 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
40434 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
40438 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
4043c 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40440 244 2D 00 64 5D |         if_nz   ret
40444 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
40448 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
4044c 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
40450 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
40454 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
40458 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
4045c 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
40460 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
40464 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
40468 24e 2C FB 9F CD |         if_b    jmp     #host_error
4046c 24f 10 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
40470 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
40474 251 2D EC 63 FD |                 call    pa
40478 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
4047c 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
40480 254 2C EC 63 FD |                 jmp     pa
40484 255             | 
40484 255             | '------------------------------------------------------------------------------
40484 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
40484 255             | ' Status reporting is always in the function-to-host direction.
40484 255             | '------------------------------------------------------------------------------
40484 255             | ' On entry:
40484 255             | '   PTRA - start address of the SETUP data in hub.
40484 255             | '   PB - start address of the buffer/struct to be written to during the IN data
40484 255             | '     stage.
40484 255             | '   ep_addr_pid - device address, endpoint and CRC5.
40484 255             | ' On exit:
40484 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
40484 255             | '     contains the count of data stage bytes actually received, which must
40484 255             | '     always be <= the count requested.
40484 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
40484 255             | '     more specific USB operation error code.
40484 255             | '------------------------------------------------------------------------------
40484 255             | control_read
40484 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
40488 256 F8 8F 03 F6 |                 mov     hpar2, ptra
4048c 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
40490 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
40494 259             | .xfer_start
40494 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
40498 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
4049c 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
404a0 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
404a4 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
404a8 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
404ac 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
404b0 260 61 00 00 FF 
404b4 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
404b8 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
404bc 263             | .data
404bc 263 56 B1 02 F6 |                 mov     pkt_data, total_data
404c0 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
404c4 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
404c8 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
404cc 267             | .nak_retry
404cc 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
404d0 268             | .in_retry
404d0 268 BC F6 BF FD |                 call    #txn_in
404d4 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
404d8 26a 28 00 90 AD |         if_z    jmp     #.commit
404dc 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
404e0 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
404e4 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
404e8 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
404ec 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
404f0 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
404f4 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
404f8 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
404fc 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
40500 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
40504 275             | .commit
40504 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
40508 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
4050c 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
40510 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
40514 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
40518 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
4051c 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
40520 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
40524 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
40528 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
4052c 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
40530 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
40534 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
40538 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
4053c 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
40540 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
40544 285             | .pre_status
40544 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
40548 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
4054c 287 00 B0 06 F6 |                 mov     pkt_data, #0
40550 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
40554 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
40558 28a 61 00 00 FF 
4055c 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
40560 28c             | .out_retry
40560 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
40564 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40568 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
4056c 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
40570 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
40574 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
40578 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
4057c 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
40580 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
40584 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
40588 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
4058c 297             | ' I've encountered transfer STALL, even though the data looks correct, and
4058c 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
4058c 297             | ' ControlRead() transfer gets things unstuck most of the time...
4058c 297             | .xfer_retry
4058c 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
40590 298 58 01 B0 FD |                 call    #poll_waitx
40594 299 8C F9 BF FD |                 call    #wait_txn_ok
40598 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
4059c 29b C7 F1 03 F6 |                 mov     ptra, hpar2
405a0 29c C8 EF 03 F6 |                 mov     pb, hpar3
405a4 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
405a8 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
405ac 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
405b0 2a0             | 
405b0 2a0             | '------------------------------------------------------------------------------
405b0 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
405b0 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
405b0 2a0             | ' the SETUP data struct is filled with the required values.
405b0 2a0             | '------------------------------------------------------------------------------
405b0 2a0             | ' On entry:
405b0 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
405b0 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
405b0 2a0             | '     stage.
405b0 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
405b0 2a0             | ' On exit:
405b0 2a0             | '   retval - used to convey the success/failure of each stage.
405b0 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
405b0 2a0             | '     more specific USB operation error code.
405b0 2a0             | '------------------------------------------------------------------------------
405b0 2a0             | control_write
405b0 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
405b4 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
405b8 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
405bc 2a3             | 
405bc 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
405c0 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
405c4 2a5 F7 91 03 F6 |                 mov     hpar3, pb
405c8 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
405cc 2a7             | .xfer_start
405cc 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
405d0 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
405d4 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
405d8 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
405dc 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
405e0 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
405e4 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
405e8 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
405ec 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
405f0 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
405f4 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
405f8 2b2             | .data
405f8 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
405fc 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
40600 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
40604 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
40608 2b6             | .out_retry
40608 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
4060c 2b7 88 F6 BF FD |                 call    #txn_out
40610 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40614 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
40618 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
4061c 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
40620 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
40624 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
40628 2be             | .commit
40628 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
4062c 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
40630 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
40634 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
40638 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
4063c 2c3             | pre_status_in
4063c 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
40640 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
40644 2c5             | .status_retry
40644 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
40648 2c6 44 F5 BF FD |                 call    #txn_in
4064c 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
40650 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
40654 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
40658 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
4065c 2cb 2D 00 64 AD |         if_z    ret
40660 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
40664 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
40668 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
4066c 2cf             | '               ret                                     ' Caller must handle transfer retirement
4066c 2cf             | 
4066c 2cf             | '------------------------------------------------------------------------------
4066c 2cf             | ' Execute an IN interrupt transaction.
4066c 2cf             | '------------------------------------------------------------------------------
4066c 2cf             | ' On entry:
4066c 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
4066c 2cf             | '   hpar2 - Address of the IN data buffer
4066c 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
4066c 2cf             | ' On exit:
4066c 2cf             | '   retval - the result of the operation.
4066c 2cf             | '   hpar3 - the count of IN data bytes actually received.
4066c 2cf             | '------------------------------------------------------------------------------
4066c 2cf             | do_int_in
4066c 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
40670 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
40674 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
40678 2d2             | 
40678 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
4067c 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
40680 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
40684 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
40688 2d6             | .retry
40688 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
4068c 2d7 00 F5 BF FD |                 call    #txn_in
40690 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
40694 2d9 1C 00 90 AD |         if_z    jmp     #.commit
40698 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
4069c 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
406a0 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
406a4 2dd 54 00 B0 FD |                 call    #retry_wait
406a8 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
406ac 2df 18 00 90 AD |         if_z    jmp     #.post_ret
406b0 2e0 D4 FF 9F FD |                 jmp     #.retry
406b4 2e1             | .commit
406b4 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
406b8 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
406bc 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
406c0 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
406c4 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
406c8 2e6             | .post_ret
406c8 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
406cc 2e7             | 
406cc 2e7             | 
406cc 2e7             | '------------------------------------------------------------------------------
406cc 2e7             | ' Resets the downstream hub port to FS
406cc 2e7             | '------------------------------------------------------------------------------
406cc 2e7             | dwnstream_reset
406cc 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
406d0 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
406d4 2e9             | 
406d4 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
406d8 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
406dc 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
406e0 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
406e4 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
406e8 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
406ec 2ef             | 
406ec 2ef             | '------------------------------------------------------------------------------
406ec 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
406ec 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
406ec 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
406ec 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
406ec 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
406ec 2ef             | '------------------------------------------------------------------------------
406ec 2ef             | ' On entry:
406ec 2ef             | '   hctwait - wait interval in sysclocks.
406ec 2ef             | ' On exit:
406ec 2ef             | '------------------------------------------------------------------------------
406ec 2ef             | poll_waitx
406ec 2ef 1A 92 63 FD |                 getct   hct2
406f0 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
406f4 2f1             | .wait
406f4 2f1 FF 25 CC FB |                 jnct2   #.wait
406f8 2f2 2D 00 64 FD |                 ret
406fc 2f3             | 
406fc 2f3             | '------------------------------------------------------------------------------
406fc 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
406fc 2f3             | '------------------------------------------------------------------------------
406fc 2f3             | ' On entry:
406fc 2f3             | '   retval - transaction response PID or error code.
406fc 2f3             | ' On exit:
406fc 2f3             | '------------------------------------------------------------------------------
406fc 2f3             | retry_wait
406fc 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
40700 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
40704 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
40708 2f6 14 00 90 AD |         if_z    jmp     #.nak
4070c 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
40710 2f8 D8 FF BF FD |                 call    #poll_waitx
40714 2f9             | .dec
40714 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
40718 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
4071c 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
40720 2fc             | .nak
40720 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
40724 2fd C4 FF BF FD |                 call    #poll_waitx
40728 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
4072c 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
40730 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
40734 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
40738 302 2D 00 64 FD |                 ret
4073c 303             | 
4073c 303             | host_reset
4073c 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
40740 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
40744 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
40744 305 BD 01 05 FF 
40748 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
4074c 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
40750 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
40754 309             | ' Check to see if the system clock has been changed.
40754 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
40758 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
4075c 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
40760 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
40764 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
40768 30e 40 46 62 FD |                 dirl    dp
4076c 30f             | 
4076c 30f 28 02 64 FD |                 setq    #1
40770 310 80 00 80 FF 
40774 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
40778 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
4077c 313             | .enable
4077c 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
40780 314 41 46 62 FD |                 dirh    dp
40784 315 1F 36 63 FD |                 waitx   _1us_
40788 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
4078c 317             | 
4078c 317             |                 ' Handle Port protection enable and startup delay
4078c 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
40790 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
40794 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
40798 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
4079c 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
407a0 31c             | 
407a0 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
407a4 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
407a8 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
407ac 31f 00 00 04 F6 |                 mov     0-0, #0
407b0 320             | .regloop
407b0 320             | 
407b0 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
407b0 320             | 
407b0 320             | discon_entry
407b0 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
407b4 321             | 
407b4 321             |               
407b4 321             |         if HAVE_HIDPAD
407b4 321 D4 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
407b8 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
407bc 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
407c0 324 F7 01 68 FC |                 wrlong  #0,pb
407c4 325             |         end
407c4 325             |         if EMUPAD_MAX_PLAYER > 0
407c4 325             |         end
407c4 325             | 
407c4 325             |                 ' Fall through to disconnected loop
407c4 325             | 
407c4 325             | '-----------------------------------------------------------------------------------------------------------------
407c4 325             | ' Device connect handling (Section 7.1.7.3).
407c4 325             | '-----------------------------------------------------------------------------------------------------------------
407c4 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
407c4 325             | ' device to connect (Section 7.1.7.3).
407c4 325             | '-----------------------------------------------------------------------------------------------------------------
407c4 325             | disconnected
407c4 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
407c8 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
407cc 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
407d0 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
407d4 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
407d8 32a             |         if ACTIVITY_LED >= 0
407d8 32a             |         end
407d8 32a 22 A7 82 FA |                 rqpin   urx, dm
407dc 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
407e0 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
407e4 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
407e8 32e             | .se1_test
407e8 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
407ec 32f FC FE BF FD |                 call    #poll_waitx
407f0 330 22 A7 82 FA |                 rqpin   urx, dm
407f4 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
407f8 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
407fc 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
40800 334             | .se1            'SE1 is a fatal error condition
40800 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
40804 335 E4 FE BF FD |                 call    #poll_waitx
40808 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
4080c 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
40810 338             | .connect_test                                           ' Test lines until stable J/K state seen
40810 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
40814 339 22 A7 82 FA |                 rqpin   urx, dm
40818 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
4081c 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
40820 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
40824 33d             | connected
40824 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
40828 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
4082c 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
40830 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
40834 341             | .set_pulse
40834 341 1A 64 63 FD |                 getct   _pulse_time_
40838 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
4083c 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
4083c 343             | ' of 1ms and make a correction, if necessary.
4083c 343             | '                mov     htmp, _1ms_
4083c 343             | '                subs    htmp, iframe_delta
4083c 343             | '                adds    _frame1ms_clks_, htmp
4083c 343             | '                debug(udec(_frame1ms_clks_))
4083c 343             | 
4083c 343             |                 ' Fall through to idle/processing loop
4083c 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
40840 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
40844 345             | 
40844 345             | hidle
40844 345 22 A7 82 FA |                 rqpin   urx, dm
40848 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
4084c 347 98 00 90 CD |         if_c    jmp     #.se0_test
40850 348 24 06 70 FD |                 pollct3                         wc
40854 349 68 00 90 3D |         if_nc   jmp     #.nopoll
40858 34a 1A 94 63 FD |                 getct   hct3
4085c 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
40860 34c             | 
40860 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
40864 34d 00 70 E3 F8 |                 getbyte htmp
40868 34e             | 
40868 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
4086c 34f 84 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
40870 350 40 00 90 AD |         if_z    jmp     #.poll
40874 351             | 
40874 351             |         if _HAVE_GAMEPAD
40874 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
40878 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
4087c 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
40880 354 0C 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
40884 355 2C 00 90 AD |         if_z    jmp     #.poll
40888 356             |         end
40888 356             | 
40888 356             |         if HAVE_MOUSE
40888 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
4088c 357 30 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
40890 358 20 00 90 AD |         if_z    jmp     #.poll
40894 359             |         end
40894 359             | 
40894 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
40898 35a 98 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
4089c 35b 14 00 90 AD |         if_z    jmp     #.poll
408a0 35c             | 
408a0 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
408a4 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
408a8 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
408ac 35f 98 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
408b0 360             |         if HAVE_MOUSE
408b0 360 30 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
408b4 361             |         else
408b4 361             |         end
408b4 361             | 
408b4 361             | .poll
408b4 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
408b8 362 2D EC 63 FD |                 call    pa
408bc 363             | .skip_poll
408bc 363             | 
408bc 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
408c0 364             | 
408c0 364             | .nopoll
408c0 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
408c4 365 44 00 90 AD |         if_z    jmp     #hsuspend
408c8 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
408cc 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
408d0 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
408d4 369 1A 84 63 FD |                 getct   hr0
408d8 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
408dc 36b             |         if ACTIVITY_LED >= 0
408dc 36b             |         end
408dc 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
408e0 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
408e4 36d 5C FF 9F FD |                 jmp     #hidle
408e8 36e             | ' Check for extended SE0 state on the bus
408e8 36e             | .se0_test
408e8 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
408ec 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
408f0 370 22 A7 82 FA |                 rqpin   urx, dm
408f4 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
408f8 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
408fc 373 24 F6 BF FD |                 call    #wait_txn_ok
40900 374 00 00 80 FF 
40904 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
40908 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
40908 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
4090c 377             | 
4090c 377             | hsuspend
4090c 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
40910 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
40914 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
40918 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
4091c 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
40920 37c 00 96 07 F6 |                 mov     mod_cnt, #0
40924 37d             | 
40924 37d             |                 ' Fall through to resume wait loop
40924 37d             | 
40924 37d             | hwait_resume
40924 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
40928 37e 02 86 47 F0 |                 shr     hr1, #2
4092c 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
40930 380             |         if ACTIVITY_LED >= 0
40930 380             |         end
40930 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
40934 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
40938 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
4093c 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
40940 384 18 00 90 AD |         if_z    jmp     #.resume
40944 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
40948 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
4094c 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
40950 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
40954 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
40958 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
4095c 38b             | .resume
4095c 38b 22 05 28 FC |                 wypin   #OUT_K, dm
40960 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
40964 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
40968 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
4096c 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
40970 390 1F 70 63 FD |                 waitx   htmp
40974 391 22 07 28 FC |                 wypin   #OUT_J, dm
40978 392 01 70 47 F0 |                 shr     htmp, #1
4097c 393 1F 70 63 FD |                 waitx   htmp
40980 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
40984 395 1A 92 62 FD |                 getct   iframe_ct_base
40988 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
4098c 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
40990 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
40994 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
40998 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
4099c 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
409a0 39c             | 
409a0 39c             | '------------------------------------------------------------------------------
409a0 39c             | ' Send preamble to enable low-speed HUB ports
409a0 39c             | '------------------------------------------------------------------------------
409a0 39c             | ' On entry:
409a0 39c             | ' On exit:
409a0 39c             | '   USB baud rate set to low-speed
409a0 39c             | '------------------------------------------------------------------------------
409a0 39c             | utx_pre
409a0 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
409a4 39d 40 46 62 FD |                 dirl    dp
409a8 39e 28 02 64 FD |                 setq    #1
409ac 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
409b0 3a0 58 44 62 FD |                 drvl    dm
409b4 3a1 59 46 62 FD |                 drvh    dp
409b8 3a2             | 
409b8 3a2 1E 00 00 FF 
409bc 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
409c0 3a4             | 
409c0 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
409c4 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
409c8 3a6 28 02 64 3D |         if_nc   setq    #1
409cc 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
409d0 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
409d4 3a9             | .l1
409d4 3a9             | 
409d4 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
409d8 3aa 40 46 62 FD |                 dirl    dp
409dc 3ab 28 02 64 FD |                 setq    #1
409e0 3ac 80 00 80 FF 
409e4 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
409e8 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
409ec 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
409f0 3b0 41 46 62 FD |                 dirh    dp
409f4 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
409f8 3b2             | 
409f8 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
409fc 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
40a00 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
40a04 3b5             | 
40a04 3b5             | hlut_end
40a04 3b5             |                 fit     $400
40a04 3b5             |                 orgh
40a04                 | if OVERLAP_MEMORY
40a04                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
40a04                 | end
40a04                 | '------------------------------------------------------------------------------
40a04                 | ' Routines called from cog space.
40a04                 | '------------------------------------------------------------------------------
40a04                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
40a04                 | '------------------------------------------------------------------------------
40a04                 | 
40a04                 | '------------------------------------------------------------------------------
40a04                 | ' USB host cog initialization.
40a04                 | '------------------------------------------------------------------------------
40a04                 | usb_host_init
40a04                 |                 ' Initialize buffer pointers
40a04                 |         if OVERLAP_MEMORY
40a04                 |         else
40a04     3C 15 B0 FE |                 loc     pb, #hid_descr
40a08                 |         end
40a08     F7 4B 02 F6 |                 mov     hid_descr_p, pb
40a0c                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
40a0c                 |                 {
40a0c                 |                 }
40a0c                 |         
40a0c                 |                 {
40a0c                 |                 }
40a0c                 |                 'loc     pb,#hkbd_report
40a0c                 |                 'mov     hkbd_report_p,pb
40a0c                 | 
40a0c     04 1D B0 FE |                 loc     pb, #hub_descr
40a10     F7 4D 02 F6 |                 mov     hub_descr_p, pb
40a14     19 1D B0 FE |                 loc     pb, #urx_buff
40a18     F7 4F 02 F6 |                 mov     urx_buff_p, pb
40a1c     91 1D B0 FE |                 loc     pb, #dev_desc_buff
40a20     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
40a24     9B 1D B0 FE |                 loc     pb, #con_desc_buff
40a28     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
40a2c     14 15 B0 FE |                 loc     pb, #usb_cache_start
40a30     F7 55 02 F6 |                 mov     cache_start_p, pb
40a34     E5 1C B0 FE |                 loc     pb, #usb_cache_end
40a38     F7 57 02 F6 |                 mov     cache_end_p, pb
40a3c                 | 
40a3c                 |         if ERROR_LED >= 0
40a3c                 |         end
40a3c                 | 
40a3c                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
40a3c                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
40a3c                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
40a3c                 | ' Configure and enable the Serial Host USB port.
40a3c     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
40a40                 | 
40a40                 | '------------------------------------------------------------------------------
40a40                 | ' Timing calculations happen before any interrupt(s) are enabled.
40a40                 | '------------------------------------------------------------------------------
40a40                 | ' On entry:
40a40                 | '   htmp - current CLKFREQ value.
40a40                 | '------------------------------------------------------------------------------
40a40                 | hinit_usb_timings
40a40                 | '                getct   htmp2
40a40     B8 59 02 F6 |                 mov     save_sysclk, htmp
40a44     8D 5B 80 FF 
40a48     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
40a4c     18 30 63 FD |                 getqx   _12Mbps_
40a50     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
40a54     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
40a58     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
40a5c     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
40a60     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
40a64     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
40a68     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
40a6c     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
40a70     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
40a74     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
40a78     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
40a7c     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
40a80     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
40a84     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
40a88     80 00 00 FF 
40a8c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
40a90     18 2C 63 FD |                 getqx   _var_64_lower_
40a94     19 2E 63 FD |                 getqy   _var_64_upper_
40a98     28 2C 63 FD |                 setq    _var_64_lower_
40a9c     65 CD 1D FF 
40aa0     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
40aa4     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
40aa8     01 00 00 FF 
40aac     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
40ab0     18 2C 63 FD |                 getqx   _var_64_lower_
40ab4     19 2E 63 FD |                 getqy   _var_64_upper_
40ab8     28 2C 63 FD |                 setq    _var_64_lower_
40abc     A1 07 00 FF 
40ac0     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
40ac4     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
40ac8     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
40acc     09 36 57 F0 |                 shr     _1us_, #9               wc
40ad0     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
40ad4     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
40ad8     18 38 63 FD |                 getqx   _10us_
40adc     09 38 57 F0 |                 shr     _10us_, #9              wc
40ae0     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
40ae4     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
40ae8     18 3A 63 FD |                 getqx   _33us_
40aec     09 3A 57 F0 |                 shr     _33us_, #9              wc
40af0     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
40af4     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
40af8     18 3C 63 FD |                 getqx   _txn_err_
40afc     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
40b00     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
40b04     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
40b08     18 3E 63 FD |                 getqx   _500us_
40b0c     09 3E 57 F0 |                 shr     _500us_, #9             wc
40b10     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
40b14     01 00 00 FF 
40b18     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
40b1c     18 40 63 FD |                 getqx   _txn_ok_ls_
40b20     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
40b24     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
40b28     01 00 00 FF 
40b2c     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
40b30     18 42 63 FD |                 getqx   _txn_ok_fs_
40b34     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
40b38     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
40b3c     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
40b40     05 00 00 FF 
40b44     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
40b48     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
40b4c     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
40b50     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
40b54     1C 00 00 FF 
40b58     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
40b5c     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
40b60     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
40b64     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
40b68     00 00 00 FF 
40b6c     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
40b70     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
40b74     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
40b78     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
40b7c     04 00 00 FF 
40b80     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
40b84     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
40b88     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
40b8c     8D 5B 00 FF 
40b90     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
40b94     18 4C 63 FD |                 getqx   _preamble_wait_
40b98     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
40b9c     01 00 00 FF 
40ba0     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
40ba4     18 2C 63 FD |                 getqx   _var_64_lower_
40ba8     19 2E 63 FD |                 getqy   _var_64_upper_
40bac     28 2C 63 FD |                 setq    _var_64_lower_
40bb0     01 00 00 FF 
40bb4     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
40bb8     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
40bbc     09 4E 57 F0 |                 shr     _1ms_, #9               wc
40bc0     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
40bc4     FF FF 7F FF 
40bc8     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
40bcc     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
40bd0     A7 51 03 F6 |                 mov     _2ms_, _1ms_
40bd4     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
40bd8     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
40bdc     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
40be0     A7 55 03 F6 |                 mov     _4ms_, _1ms_
40be4     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
40be8     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
40bec     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
40bf0     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
40bf4     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
40bf8     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
40bfc     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
40c00     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
40c04     A7 59 03 F6 |                 mov     _8ms_, _1ms_
40c08     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
40c0c     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
40c10     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
40c14     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
40c18     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
40c1c     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
40c20     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
40c24     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
40c28     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
40c2c     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
40c30     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
40c34                 | '        _ret_   mov     _1sec_, save_sysclk
40c34                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
40c34                 | '                ret
40c34                 | {
40c34                 | }
40c34                 | 
40c34                 | '------------------------------------------------------------------------------
40c34                 | ' Parse a configuration descriptor chain to see if the device is a recognized
40c34                 | ' one. If it is, start the task progression that will configure the device for
40c34                 | ' use.
40c34                 | '------------------------------------------------------------------------------
40c34                 | ' On entry:
40c34                 | '   hconfig_base - start address of the cached config descriptor chain.
40c34                 | ' On exit:
40c34                 | '------------------------------------------------------------------------------
40c34                 | hparse_con_desc
40c34     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
40c38     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
40c3c     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
40c40     4E 70 FF F9 |                 movbyts htmp,#%%1032
40c44     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
40c48                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
40c48                 | 
40c48     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
40c4c     6E ED 03 F1 |                 add     pa, hconfig_base
40c50     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
40c54                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
40c54                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
40c54                 | ' that defines a keyboard and/or mouse.
40c54     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
40c58                 | .next_intf
40c58     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
40c5c     B8 01 90 3D |         if_ae   jmp     #hset_config
40c60     6E F3 03 F6 |                 mov     ptrb, hconfig_base
40c64     75 F3 03 F1 |                 add     ptrb, hnext_desc
40c68     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
40c6c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
40c70     0C 00 90 AD |         if_z    jmp     #.intf
40c74     80 71 C7 FA |                 rdbyte  htmp, ptrb
40c78     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
40c7c     D8 FF 9F FD |                 jmp     #.next_intf
40c80                 | .intf
40c80     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
40c84     00 90 07 F6 |                 mov     hpar3, #0
40c88     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
40c8c     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
40c90     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
40c94     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
40c98                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
40c98                 | 
40c98                 | .endp
40c98     80 71 C7 FA |                 rdbyte  htmp, ptrb
40c9c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
40ca0     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
40ca4     78 00 90 3D |         if_ae   jmp     #.get_device
40ca8     6E F3 03 F6 |                 mov     ptrb, hconfig_base
40cac     75 F3 03 F1 |                 add     ptrb, hnext_desc
40cb0     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
40cb4     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
40cb8     64 00 90 AD |         if_z    jmp     #.get_device
40cbc     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
40cc0     04 00 90 AD |         if_z    jmp     #.get_ep
40cc4     D0 FF 9F FD |                 jmp     #.endp
40cc8                 | .get_ep
40cc8     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
40ccc     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
40cd0     0F 86 67 F0 |                 shl     hr1, #8 + 7
40cd4     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
40cd8     3F 00 00 FF 
40cdc     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
40ce0     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
40ce4     00 8E 0F F2 |                 cmp     hpar2, #0               wz
40ce8     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
40cec     00 90 0F F2 |                 cmp     hpar3, #0               wz
40cf0     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
40cf4     A0 FF 9F FD |                 jmp     #.endp
40cf8                 | .in_ep
40cf8     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
40cfc     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
40d00                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
40d00     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
40d04     C2 89 DB F8 |                 setbyte hr2, hr0, #3
40d08     8C FF 9F FD |                 jmp     #.endp
40d0c                 | .out_ep
40d0c     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
40d10     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
40d14                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
40d14     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
40d18     C2 8B DB F8 |                 setbyte hr3, hr0, #3
40d1c     78 FF 9F FD |                 jmp     #.endp
40d20                 | 
40d20                 | .get_device
40d20     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
40d24     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
40d28     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
40d2c     64 00 90 AD |         if_z    jmp     #.gamepad
40d30     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
40d34     A8 00 90 AD |         if_z    jmp     #.hub
40d38     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
40d3c     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
40d40                 |  '               cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
40d40     00 E6 0E F2 |            cmp     hdev_protocol, #INTF_PROTO_NONE     wz
40d44     4C 00 90 AD |         if_z    jmp     #.gamepad
40d48     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
40d4c     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
40d50                 | .keyboard
40d50     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
40d54                 |         if HAVE_MOUSE
40d54     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
40d58                 |         else
40d58                 |         end
40d58     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
40d5c     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
40d60     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
40d64     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
40d68     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
40d6c     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
40d70                 |                 'debug(udec(kb_intf_num))
40d70                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
40d70     E4 FE 9F FD |                 jmp     #.next_intf
40d74                 | if HAVE_MOUSE
40d74                 | .mouse
40d74     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
40d78     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
40d7c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
40d80     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
40d84     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
40d88                 |                 'getbyte ms_interval, hr2, #3
40d88     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
40d8c     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
40d90                 |                 'debug(udec(kb_intf_num))
40d90                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
40d90     C4 FE 9F FD |                 jmp     #.next_intf
40d94                 | end
40d94                 | .gamepad
40d94     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
40d98     C7 71 63 F5 |                 xor     htmp, hpar2
40d9c     3F 00 00 FF 
40da0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
40da4     B0 FE 9F AD |         if_z    jmp     #.next_intf
40da8                 |         if HAVE_MOUSE
40da8     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
40dac     C7 71 63 F5 |                 xor     htmp, hpar2
40db0     3F 00 00 FF 
40db4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
40db8     9C FE 9F AD |         if_z    jmp     #.next_intf
40dbc                 |         end
40dbc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
40dc0     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
40dc4     90 FE 9F 5D |         if_nz   jmp     #.next_intf
40dc8                 | 
40dc8     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
40dcc     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
40dd0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
40dd4     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
40dd8     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
40ddc                 |                 'debug(udec(gp_intf_num))
40ddc                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
40ddc     78 FE 9F FD |                 jmp     #.next_intf
40de0                 | .hub
40de0     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
40de4     70 FE 9F 5D |         if_nz   jmp     #.next_intf
40de8     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
40dec     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
40df0     64 FE 9F 5D |         if_nz   jmp     #.next_intf
40df4     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
40df8     5C FE 9F 5D |         if_nz   jmp     #.next_intf
40dfc     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
40e00     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
40e04     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
40e08     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
40e0c     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
40e10     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
40e14                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
40e14     40 FE 9F FD |                 jmp     #.next_intf
40e18                 | 
40e18                 | '------------------------------------------------------------------------------
40e18                 | ' If a newly-connected device is recognized, do whatever is needed to configure
40e18                 | ' it according to its function, or functions. In the case of this boot protocol
40e18                 | ' keyboard/mouse class driver:
40e18                 | ' - SetConfiguration(config_num)
40e18                 | ' - SetProtocol(boot)
40e18                 | ' - SetIdle(indefinite)
40e18                 | ' - Enter the device interrupt IN polling task stage.
40e18                 | '------------------------------------------------------------------------------
40e18                 | ' On entry:
40e18                 | ' On exit:
40e18                 | '------------------------------------------------------------------------------
40e18                 | hset_config
40e18                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
40e18                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
40e18     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
40e1c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
40e20     00 00 0C F2 |                 cmp     0-0, #0                 wz
40e24     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
40e28                 |         if HAVE_MOUSE
40e28     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
40e2c                 |         end
40e2c     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
40e30     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
40e34                 | .set_config
40e34     6C 0E D0 FE |                 loc     ptra, #set_config
40e38     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
40e3c     6E ED 03 F1 |                 add     pa, hconfig_base
40e40     F6 8D C3 FA |                 rdbyte  hpar1, pa
40e44     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
40e48     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
40e4c     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
40e50     A0 02 A0 FD |                 call    #control_write
40e54     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40e58     2D 00 64 5D |         if_nz   ret
40e5c                 | .kbd_config
40e5c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
40e60     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
40e64                 | 
40e64     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
40e68     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
40e6c     3F 00 00 FF 
40e70     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
40e74     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
40e78                 | 
40e78     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
40e7c     34 0E D0 FE |                 loc     ptra, #set_protocol
40e80     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
40e84     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
40e88     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
40e8c     A0 02 A0 FD |                 call    #control_write
40e90     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40e94     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
40e98     E4 02 90 5D |         if_nz   jmp     #.notify_client
40e9c     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
40ea0     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
40ea4     30 03 B0 FD |                 call    #hset_idle
40ea8                 |                 'cmp     retval, #PID_ACK        wz
40ea8                 |         'if_nz   mov     hkbd_ep_addr, #0
40ea8                 |         'if_nz   jmp     #.notify_client
40ea8     A8 99 02 F6 |                 mov     hctwait, _2ms_
40eac     EF 02 A0 FD |                 call    #poll_waitx
40eb0     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
40eb4     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
40eb8     90 17 90 FE |                 loc     pa, #hkbd_led_rep
40ebc     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
40ec0     2C 03 B0 FD |                 call    #hset_kbdled_report
40ec4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40ec8     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
40ecc     B0 02 90 5D |         if_nz   jmp     #.notify_client
40ed0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
40ed4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
40ed8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
40edc     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
40ee0     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
40ee4     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
40ee8     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
40eec     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
40ef0     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
40ef4     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
40ef8     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
40efc                 |         if !!HAVE_MOUSE
40efc                 |         end
40efc                 | 
40efc                 | .mouse_config
40efc                 | if HAVE_MOUSE
40efc     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
40f00     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
40f04     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
40f08     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
40f0c     3F 00 00 FF 
40f10     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
40f14     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
40f18                 | 
40f18                 |                 debug("mouse passed addr check")
40f18                 | 
40f18     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
40f1c     00 00 80 FF 
40f20     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
40f24     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
40f28     1B 01 A0 FD |                 call    #get_hid_descr_buffer
40f2c     55 02 A0 FD |                 call    #control_read
40f30     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40f34     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
40f38     44 02 90 5D |         if_nz   jmp     #.notify_client
40f3c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
40f40     56 01 00 F6 |                 mov     0-0, total_data
40f44     1B 01 A0 FD |                 call    #get_hid_descr_buffer
40f48                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
40f48                 | 
40f48     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
40f4c     64 0D D0 FE |                 loc     ptra, #set_protocol
40f50     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
40f54     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
40f58     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
40f5c     A0 02 A0 FD |                 call    #control_write
40f60     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
40f64     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
40f68     14 02 90 5D |         if_nz   jmp     #.notify_client
40f6c                 |                 debug("mouse passed SetProtocol")
40f6c     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
40f70     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
40f74     60 02 B0 FD |                 call    #hset_idle
40f78                 |                 'cmp     retval, #PID_ACK        wz
40f78                 |         'if_nz   mov     hmouse_ep_addr, #0
40f78                 |         'if_nz   jmp     #.notify_client
40f78                 |                 debug("mouse passed SetIdle")
40f78     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
40f7c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
40f80     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
40f84     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
40f88     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
40f8c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
40f90     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
40f94     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
40f98     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
40f9c     3F 00 00 FF 
40fa0     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
40fa4     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
40fa8     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
40fac     D0 01 90 FD |                 jmp     #.notify_client
40fb0                 | end
40fb0                 | .gamepad_config
40fb0                 | if _HAVE_GAMEPAD
40fb0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
40fb4     00 00 0C F2 |                 cmp     0-0, #0                 wz
40fb8     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
40fbc     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
40fc0     00 70 03 F6 |                 mov     htmp, 0-0
40fc4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
40fc8     3F 00 00 FF 
40fcc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
40fd0     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
40fd4                 | 
40fd4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
40fd8     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
40fdc     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
40fe0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
40fe4     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
40fe8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
40fec     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
40ff0     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
40ff4     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
40ff8     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
40ffc     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
41000     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
41004     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
41008     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
4100c                 | 
4100c                 |                 if EMUPAD_MAX_PLAYER > 0
4100c                 |                 
4100c                 | .rule_loop           
4100c                 |                 end
4100c                 | 
4100c     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
41010     5C 00 90 AD |         if_e    jmp     #.xinput
41014     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
41018     00 70 03 F6 |                 mov     htmp,0-0
4101c     01 A6 02 FF 
41020     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
41024     7C 00 90 AD |         if_e    jmp     #.ps3
41028                 | 
41028     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
4102c     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
41030     00 00 80 5F 
41034     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
41038     03 00 80 AF 
4103c     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
41040     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
41044     1B 01 A0 FD |                 call    #get_hid_descr_buffer
41048     55 02 A0 FD |                 call    #control_read
4104c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41050     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
41054     00 00 04 56 |         if_nz   mov     0-0, #0
41058     24 01 90 5D |         if_nz   jmp     #.notify_client
4105c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
41060     56 01 00 F6 |                 mov     0-0, total_data
41064     1B 01 A0 FD |                 call    #get_hid_descr_buffer
41068                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
41068                 | 
41068     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
4106c     10 01 90 FD |                 jmp     #.notify_client
41070                 | .xinput
41070     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
41074     2D EF 03 F6 |                 mov     pb,hdev_port
41078     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
4107c     03 EE 27 F3 |                 fle     pb,#3
41080     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
41084     02 EF 47 FC |                 wrbyte  pb, ptra[2]
41088                 | 
41088     03 B0 06 F6 |                 mov     pkt_data, #3
4108c     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
41090     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
41094     5A 00 A0 FD |                 call    #txn_out
41098     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
4109c                 | 
4109c     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
410a0     DC 00 90 FD |                 jmp     #.notify_client
410a4                 | .ps3
410a4     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
410a8     2D EF 03 F6 |                 mov     pb,hdev_port
410ac     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
410b0     04 EE 27 F3 |                 fle     pb,#4
410b4     F7 EF C3 F9 |                 decod   pb
410b8     09 EF 47 FC |                 wrbyte  pb, ptra[9]
410bc                 | 
410bc     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
410c0     00 0C D0 FE |                 loc     ptra, #set_report
410c4     01 00 80 FF 
410c8     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
410cc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
410d0     03 61 5C FC |                 wrword  #48, ptra[wLength]
410d4     20 0C B0 FE |                 loc     pb, #ps3_command_buff
410d8     A0 02 A0 FD |                 call    #control_write
410dc                 | 
410dc     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
410e0     E0 0B D0 FE |                 loc     ptra, #set_report
410e4     01 00 80 FF 
410e8     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
410ec     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
410f0     03 09 5C FC |                 wrword  #4, ptra[wLength]
410f4     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
410f8     A0 02 A0 FD |                 call    #control_write
410fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
41100     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
41104     00 00 04 56 |         if_nz   mov     0-0, #0
41108     74 00 90 5D |         if_nz   jmp     #.notify_client
4110c                 | 
4110c     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
41110     6C 00 90 FD |                 jmp     #.notify_client
41114                 | end
41114                 | 
41114                 | .hub_config
41114     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
41118     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
4111c     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
41120     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
41124     3F 00 00 FF 
41128     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
4112c     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
41130                 | 
41130     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
41134     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
41138     26 EF 03 F6 |                 mov     pb, hub_descr_p
4113c     55 02 A0 FD |                 call    #control_read
41140     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41144     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
41148     34 00 90 5D |         if_nz   jmp     #.notify_client
4114c                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
4114c                 | 
4114c     26 F1 03 F6 |                 mov     ptra, hub_descr_p
41150     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
41154     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
41158                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
41158                 | .pwr_loop
41158     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
4115c     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
41160     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
41164     A0 02 A0 FD |                 call    #control_write
41168     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
4116c                 | 
4116c     B1 99 02 F6 |                 mov     hctwait, _500ms_
41170     B0 99 02 F1 |                 add     hctwait, _100ms_
41174     EF 02 A0 FD |                 call    #poll_waitx
41178                 | 
41178     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
4117c     00 00 90 FD |                 jmp     #.notify_client
41180                 | 
41180                 | .notify_client
41180     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
41184     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
41188                 |                 debug(uhex_long(hdev_type,hdev_type+1))
41188                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
41188     2D 00 64 FD |                 ret
4118c                 | 
4118c                 | '------------------------------------------------------------------------------
4118c                 | ' Initialize the keyboard/mouse data area to start-up values.
4118c                 | '------------------------------------------------------------------------------
4118c                 | ' On entry:
4118c                 | ' On exit:
4118c                 | '------------------------------------------------------------------------------
4118c                 | init_kbdm_data
4118c     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
41190     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
41194                 | 
41194     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
41198     2B ED 03 F6 |                 mov     pa, cache_end_p
4119c                 | .loop
4119c     61 01 4C FC |                 wrbyte  #0, ptra++
411a0     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
411a4     F4 FF 9F CD |         if_b    jmp     #.loop
411a8                 |         
411a8                 |         if EMUPAD_MAX_PLAYER > 0
411a8                 |         end
411a8                 | 
411a8                 | 
411a8     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
411ac                 | .regloop
411ac     00 EC 8F F9 |                 altd    pa
411b0     00 00 04 F6 |                 mov     0-0, #0
411b4     01 EC 07 F1 |                 add     pa, #1
411b8     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
411bc     EC FF 9F 5D |         if_nz   jmp     #.regloop
411c0                 | 
411c0     E1 E1 61 FF 
411c4     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
411c8     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
411cc     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
411d0     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
411d4                 | 
411d4     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
411d8                 | 
411d8                 | '------------------------------------------------------------------------------
411d8                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
411d8                 | ' function.
411d8                 | '------------------------------------------------------------------------------
411d8                 | ' On entry:
411d8                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
411d8                 | '   hpar2 - index number of the target interface.
411d8                 | ' On exit:
411d8                 | '------------------------------------------------------------------------------
411d8                 | hset_idle
411d8     A8 99 02 F6 |                 mov     hctwait, _2ms_
411dc     EF 02 A0 FD |                 call    #poll_waitx
411e0     D8 0A D0 FE |                 loc     ptra, #set_idle
411e4     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
411e8     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
411ec     A0 02 80 FD |                 jmp     #control_write
411f0                 | 
411f0                 | '------------------------------------------------------------------------------
411f0                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
411f0                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
411f0                 | '------------------------------------------------------------------------------
411f0                 | ' On entry:
411f0                 | '   ep_addr_pid - device address and enpoint for the request.
411f0                 | ' On exit:
411f0                 | '   retval - transaction result.
411f0                 | '------------------------------------------------------------------------------
411f0                 | hset_kbdled_report
411f0     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
411f4     CC 0A D0 FE |                 loc     ptra, #set_report
411f8     01 00 80 FF 
411fc     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
41200     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
41204     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
41208     27 EF 03 F6 |                 mov     pb, urx_buff_p
4120c     F7 77 42 FC |                 wrbyte  kb_led_states, pb
41210     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
41214                 | 
41214                 | '------------------------------------------------------------------------------
41214                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
41214                 | '------------------------------------------------------------------------------
41214                 | ' On entry:
41214                 | ' On exit:
41214                 | '------------------------------------------------------------------------------
41214                 | hget_kbd_in_report
41214     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
41218     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
4121c     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
41220     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
41224     CF 02 A0 FD |                 call    #do_int_in
41228     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
4122c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
41230                 | 
41230     00 90 0F F2 |                 cmp     hpar3, #0               wz
41234     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
41238                 | 
41238     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
4123c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
41240     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
41244     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
41248                 | 
41248     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
4124c     18 00 B0 FD |                 call    #hkbd_compare
41250                 |         if EMUPAD_MAX_PLAYER > 0
41250                 |         end
41250                 | 
41250                 | .led_check
41250     3B 71 03 F6 |                 mov     htmp, kb_led_states
41254     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
41258     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
4125c     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
41260     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
41264     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
41268                 | 
41268                 | '------------------------------------------------------------------------------
41268                 | ' Compare current and previous keyboard data buffers for keypress changes.
41268                 | '------------------------------------------------------------------------------
41268                 | hkbd_compare
41268     27 F1 03 F6 |                 mov     ptra, urx_buff_p
4126c     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
41270     61 73 07 FB |                 rdlong  htmp1, ptra++
41274     E1 75 07 FB |                 rdlong  htmp2, ptrb++
41278     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
4127c     61 73 07 FB |                 rdlong  htmp1, ptra++
41280     E1 75 07 FB |                 rdlong  htmp2, ptrb++
41284     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
41288     2D 00 64 AD |         if_z    ret
4128c                 | 
4128c     B4 13 D0 FE |                 loc     ptra, #hkbd_report
41290                 | 
41290                 |                 ' Handle modifiers
41290     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
41294     00 87 C7 FA |                 rdbyte  hr1, ptra
41298     C7 87 43 F9 |                 rolword hr1,hpar2,#0
4129c     63 86 63 FD |                 mergew  hr1
412a0     08 EC 07 F6 |                 mov     pa,#8
412a4                 | .modloop
412a4     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
412a8     E8 8C 07 F6 |                 mov     hpar1,#$E8
412ac     F6 8D 83 F1 |                 sub     hpar1,pa
412b0     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
412b4     FB ED 6F FB |                 djnz    pa,#.modloop
412b8                 | 
412b8     6F E0 75 FD | .release        modc    _set    wc
412bc                 |                 'alts    hdev_port, #hid_report_p
412bc                 |                 'mov     ptra, hid_report_p
412bc     02 F0 07 F1 |                 add     ptra, #2
412c0     06 EC 07 F6 |                 mov     pa, #6
412c4     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
412c8     20 00 90 AD |         if_z    jmp     #.rl3
412cc     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
412d0     02 F2 07 F1 |                 add     ptrb, #2
412d4     06 EE 07 F6 |                 mov     pb, #6
412d8     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
412dc     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
412e0     08 00 90 AD |         if_z    jmp     #.rl3
412e4     FC EF 6F FB |                 djnz    pb, #.rl2
412e8     68 00 B0 FD |                 call    #hkbd_translate
412ec     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
412f0                 | 
412f0     00 90 07 F6 |                 mov     hpar3, #0
412f4     1F 90 27 F4 |                 bith    hpar3, #31
412f8                 | 
412f8     6F 00 74 FD | .press          modc    _clr    wc
412fc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
41300     02 F0 07 F1 |                 add     ptra, #2
41304     06 EC 07 F6 |                 mov     pa, #6
41308     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
4130c     20 00 90 AD |         if_z    jmp     #.pl3
41310     30 13 F0 FE |                 loc     ptrb, #hkbd_report
41314     02 F2 07 F1 |                 add     ptrb, #2
41318     06 EE 07 F6 |                 mov     pb, #6
4131c     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
41320     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
41324     08 00 90 AD |         if_z    jmp     #.pl3
41328     FC EF 6F FB |                 djnz    pb, #.pl2
4132c     24 00 B0 FD |                 call    #hkbd_translate
41330     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
41334                 | 
41334     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
41338     08 13 F0 FE |                 loc     ptrb, #hkbd_report
4133c     28 02 64 FD |                 setq #1
41340     61 73 07 FB |                 rdlong  htmp1, ptra++
41344     28 02 64 FD |                 setq #1
41348     E1 73 67 FC |                 wrlong  htmp1, ptrb++
4134c     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
41350                 | 
41350     2D 00 64 FD |                 ret
41354                 | 
41354                 | '------------------------------------------------------------------------------
41354                 | ' Translate keyboard scancode to ASCII
41354                 | '------------------------------------------------------------------------------
41354                 | ' On entry:
41354                 | '   hpar1 - scancode
41354                 | '   hpar2 - key modifiers state
41354                 | '       c - pressed (0) or released (1) flag
41354                 | ' On exit:
41354                 | '   hpar1 - bit     31 = 0 pressed, 1 released
41354                 | '               30..17 = unused
41354                 | '                   18 = scroll-lock state 
41354                 | '                   17 = caps-lock state
41354                 | '                   16 = num-lock state 
41354                 | '                15..8 = key modifiers state
41354                 | '                 7..0 = scancode
41354                 | '------------------------------------------------------------------------------
41354                 | hkbd_translate
41354     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
41358     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
4135c     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
41360     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
41364     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
41368     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
4136c                 | 
4136c                 |         if EMUPAD_MAX_PLAYER > 0
4136c                 | 
4136c                 |         if EMUPAD_BT0_BIT >= 0
4136c                 |         end
4136c                 |         if EMUPAD_BT1_BIT >= 0
4136c                 |         end
4136c                 |         if EMUPAD_BT2_BIT >= 0
4136c                 |         end
4136c                 |         if EMUPAD_BT3_BIT >= 0
4136c                 |         end
4136c                 |         if EMUPAD_BT4_BIT >= 0
4136c                 |         end
4136c                 |         if EMUPAD_BT5_BIT >= 0
4136c                 |         end
4136c                 |         if EMUPAD_BT6_BIT >= 0
4136c                 |         end
4136c                 |         if EMUPAD_BT7_BIT >= 0
4136c                 |         end
4136c                 |         if EMUPAD_BT8_BIT >= 0
4136c                 |         end
4136c                 |         if EMUPAD_BT9_BIT >= 0
4136c                 |         end
4136c                 | 
4136c                 |         end
4136c     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
41370     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
41374     1F 8C 47 F4 |                 bitc    hpar1, #31
41378                 |         if KEYQUEUE_SIZE > 0
41378     C4 09 B0 FE |                 loc pb,#keyq_head
4137c     F7 71 E3 FA |                 rdword htmp,pb
41380     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
41384     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
41388     B8 75 03 F6 |                 mov htmp2,htmp
4138c     04 74 07 FA |                 mul htmp2,#4
41390     F7 75 03 F1 |                 add htmp2,pb
41394     02 74 07 F1 |                 add htmp2,#2
41398     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
4139c     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
413a0     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
413a4     F7 71 43 5C |         if_nz   wrbyte htmp,pb
413a8                 |         end
413a8     2D 00 7C FD |                 ret wcz
413ac                 | 
413ac                 | if HAVE_MOUSE
413ac                 | '------------------------------------------------------------------------------
413ac                 | ' Execute an IN interrupt transaction to poll for mouse activity.
413ac                 | '------------------------------------------------------------------------------
413ac                 | ' On entry:
413ac                 | ' On exit:
413ac                 | '------------------------------------------------------------------------------
413ac                 | hget_mouse_in_report
413ac     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
413b0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
413b4     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
413b8     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
413bc     CF 02 A0 FD |                 call    #do_int_in
413c0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
413c4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
413c8                 | 
413c8     00 90 0F F2 |                 cmp     hpar3, #0               wz
413cc     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
413d0                 | 
413d0     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
413d4     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
413d8     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
413dc     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
413e0                 | 
413e0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
413e4     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
413e8     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
413ec     01 90 87 31 |         if_ae   sub     hpar3, #1
413f0                 | 
413f0     40 09 90 FE |                 loc     pa, #mouse_limits
413f4     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
413f8                 | 
413f8                 |                 ' load xacc,yacc,zacc
413f8     28 04 64 FD |                 setq    #3-1
413fc     80 87 07 FB |                 rdlong  hr1,ptrb
41400                 |                 ' load limits and outptr
41400     28 04 64 FD |                 setq    #3-1
41404     F6 73 03 FB |                 rdlong  htmp1,pa
41408                 | 
41408     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
4140c     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
41410     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
41414     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
41418     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
4141c     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
41420     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
41424     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
41428                 |               
41428                 | 
41428     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
4142c     07 70 67 F7 |                 signx   htmp, #7
41430     B8 87 03 F1 |                 add     hr1,htmp
41434     00 72 0F F2 |                 cmp     htmp1,#0 wz
41438     B9 87 63 53 |         if_ne   fles    hr1,htmp1
4143c     00 86 47 53 |         if_ne   fges    hr1,#0
41440                 | 
41440     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
41444     07 70 67 F7 |                 signx   htmp, #7
41448     B8 89 03 F1 |                 add     hr2,htmp
4144c     00 74 0F F2 |                 cmp     htmp2,#0 wz
41450     BA 89 63 53 |         if_ne   fles    hr2,htmp2
41454     00 88 47 53 |         if_ne   fges    hr2,#0
41458                 |                 
41458                 | 
41458     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
4145c     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
41460     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
41464     B8 8B 03 A1 |         if_z    add     hr3,htmp
41468                 | 
41468     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
4146c     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
41470                 | 
41470                 |                 ' write back accumulators
41470     28 04 64 FD |                 setq    #3-1
41474     80 87 67 FC |                 wrlong  hr1,ptrb
41478                 |                 ' if outptr set, write X/Y words
41478     00 76 0F F2 |                 cmp htmp3,#0                    wz
4147c     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
41480     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
41484     2D 00 64 FD |                 ret
41488                 | end
41488                 | 
41488                 | '------------------------------------------------------------------------------
41488                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
41488                 | '------------------------------------------------------------------------------
41488                 | ' On entry:
41488                 | ' On exit:
41488                 | '------------------------------------------------------------------------------
41488                 | if _HAVE_GAMEPAD
41488                 | hget_gp_in_report
41488     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
4148c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
41490                 | 
41490     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
41494     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
41498     00 90 E3 F8 |                 getbyte hpar3
4149c     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
414a0     CF 02 A0 FD |                 call    #do_int_in
414a4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
414a8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
414ac                 | 
414ac     00 90 0F F2 |                 cmp     hpar3, #0               wz
414b0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
414b4                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
414b4                 | 
414b4     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
414b8     00 70 E3 F8 |                 getbyte htmp                            ' |
414bc     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
414c0     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
414c4     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
414c8     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
414cc     B8 01 C0 F8 |                 setbyte htmp                            ' |
414d0                 | 
414d0                 | ' Note: the following code compares the current and previous reports
414d0                 | ' and process the data if there are changes to ease the debug output.
414d0                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
414d0                 | ' gpPreReport buffer.
414d0                 | 
414d0                 |                 ' ----- start of block to remove
414d0                 |                 {
414d0                 |                 }
414d0                 |                 ' ----- end of block to remove
414d0     F4 04 90 FE |                 loc pa,#hpad_translate
414d4     2A EC 63 FD |                 push pa
414d8                 | 
414d8                 |                 ' FALL THROUGH !!!!
414d8                 | 
414d8                 | '------------------------------------------------------------------------------
414d8                 | ' Decode controller report
414d8                 | '------------------------------------------------------------------------------
414d8                 | hid_decode
414d8                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
414d8     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
414dc     00 04 00 FF 
414e0     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
414e4                 | 
414e4     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
414e8                 | 
414e8     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
414ec     00 2A E3 F8 |                 getbyte hidr_type
414f0     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
414f4     34 02 90 AD |         if_z    jmp     #hpad_xinput
414f8     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
414fc     1C 03 90 AD |         if_z    jmp     #hpad_ps3
41500     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
41504     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
41508     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
4150c                 |                 
4150c                 | 
4150c                 | '------------------------------------------------------------------------------
4150c                 | ' Handle HID controller (or mouse now
4150c                 | ' On entry:
4150c                 | '   ptrb - controller report
4150c                 | '------------------------------------------------------------------------------
4150c                 | hpad_hid
4150c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
41510     F7 F1 03 F6 |                 mov     ptra, pb
41514     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
41518     00 EC 03 F6 |                 mov     pa, 0-0
4151c                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
4151c     19 2A 3B FF 
41520     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
41524                 | 
41524                 | .next
41524     00 EC 5F F2 |                 cmps    pa, #0      wcz
41528     2D 00 7C ED |         if_be   ret     wcz
4152c                 | 
4152c     61 8D C7 FA |                 rdbyte  hpar1, ptra++
41530     01 EC 87 F1 |                 sub     pa, #1
41534     00 8E 07 F6 |                 mov     hpar2, #0
41538                 | 
41538     C6 71 03 F6 |                 mov     htmp, hpar1
4153c     03 70 07 F5 |                 and     htmp, #$03
41540     01 70 0F F2 |                 cmp     htmp, #1    wz
41544     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
41548     07 8E 67 A7 |         if_z    signx   hpar2,#7
4154c     01 EC 87 A1 |         if_z    sub     pa, #1
41550     02 70 0F F2 |                 cmp     htmp, #2    wz
41554     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
41558     0F 8E 67 A7 |         if_z    signx   hpar2,#15
4155c     02 EC 87 A1 |         if_z    sub     pa, #2
41560     03 70 0F F2 |                 cmp     htmp, #3    wz
41564     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
41568     04 EC 87 A1 |         if_z    sub     pa, #4
4156c                 | 
4156c     FC 8C 07 F5 |                 and     hpar1, #$FC
41570                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
41570                 | 
41570     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
41574     0C 01 90 AD |         if_z    jmp     #.report_id
41578     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
4157c     24 01 90 AD |         if_z    jmp     #.usage_page
41580     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
41584     2C 01 90 AD |         if_z    jmp     #.usage
41588     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
4158c     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
41590     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
41594     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
41598     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
4159c     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
415a0     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
415a4     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
415a8     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
415ac     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
415b0     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
415b4     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
415b8     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
415bc     64 FF 9F 5D |         if_nz   jmp     #.next
415c0                 | 
415c0     D8 1D A7 FB |                 tjf     hidr_state,#.next
415c4                 | 
415c4     03 8E 07 F5 |                 and     hpar2, #$03
415c8     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
415cc     18 00 90 5D |         if_nz   jmp     #.skip
415d0                 | 
415d0     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
415d4     20 00 90 AD |         if_z    jmp     #.axes
415d8     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
415dc     5C 00 90 AD |         if_z    jmp     #.hats
415e0     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
415e4     70 00 90 AD |         if_z    jmp     #.buttons
415e8                 | .skip
415e8     8F 71 03 F6 |                 mov     htmp, hidr_size
415ec     90 71 03 FA |                 mul     htmp, hidr_count
415f0     B8 23 03 F1 |                 add     hidr_offset, htmp
415f4     2C FF 9F FD |                 jmp     #.next
415f8                 | .axes
415f8                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
415f8     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
415fc     90 87 03 F6 |                 mov     hr1, hidr_count
41600                 | .l1
41600     91 8D 03 F6 |                 mov     hpar1, hidr_offset
41604     8F 8F 03 F6 |                 mov     hpar2, hidr_size
41608     04 03 B0 FD |                 call    #hpad_getbits
4160c     64 03 B0 FD |                 call    #hpad_normalize
41610     06 84 1F F2 |                 cmp     hr0, #6         wcz
41614     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
41618     00 88 43 C8 |         if_b    getnib  hr2
4161c     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
41620     5F 01 20 C9 |         if_b    setword retval
41624     01 84 07 C1 |         if_b    add     hr0, #1
41628     8F 23 03 F1 |                 add     hidr_offset, hidr_size
4162c     F4 87 6F FB |                 djnz    hr1, #.l1
41630                 | 
41630     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
41634     01 1C 07 F6 |                 mov     hidr_state, #1
41638     E8 FE 9F FD |                 jmp     #.next
4163c                 | .hats
4163c                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
4163c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
41640     8F 8F 03 F6 |                 mov     hpar2, hidr_size
41644     C8 02 B0 FD |                 call    #hpad_getbits
41648     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
4164c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
41650     01 1C 07 F6 |                 mov     hidr_state, #1
41654     90 FF 9F FD |                 jmp     #.skip
41658                 | .buttons
41658                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
41658     91 8D 03 F6 |                 mov     hpar1, hidr_offset
4165c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
41660     90 8F 03 FA |                 mul     hpar2, hidr_count
41664     A8 02 B0 FD |                 call    #hpad_getbits
41668     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
4166c     B8 BF 62 F0 |                 shl     retval, htmp
41670     5F 17 43 F5 |                 or      hidr_buttons, retval
41674     90 71 03 F1 |                 add     htmp, hidr_count
41678     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
4167c     01 1C 07 F6 |                 mov     hidr_state, #1
41680     64 FF 9F FD |                 jmp     #.skip
41684                 | .report_id
41684     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
41688     2D 00 7C 5D |         if_nz   ret     wcz
4168c     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
41690     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
41694     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
41698     01 1C 67 56 |         if_nz   neg     hidr_state,#1
4169c     01 F2 87 51 |         if_nz   sub     ptrb,#1
416a0     80 FE 9F FD |                 jmp     #.next
416a4                 | .usage_page
416a4     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
416a8     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
416ac     04 1C 07 A6 |         if_z    mov     hidr_state, #4
416b0     70 FE 9F FD |                 jmp     #.next
416b4                 | .usage
416b4     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
416b8     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
416bc     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
416c0     01 1C 07 A6 |         if_z    mov     hidr_state, #1
416c4     5C FE 9F AD |         if_z    jmp     #.next
416c8     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
416cc     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
416d0     01 1C 07 A6 |         if_z    mov     hidr_state, #1
416d4     4C FE 9F AD |         if_z    jmp     #.next
416d8     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
416dc     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
416e0     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
416e4     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
416e8     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
416ec     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
416f0     10 00 90 AD |         if_z    jmp     #.usage_axis
416f4     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
416f8     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
416fc     03 1C 07 A6 |         if_z    mov     hidr_state, #3
41700     20 FE 9F FD |                 jmp     #.next
41704                 | .usage_axis
41704     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
41708     18 FE 9F CD |         if_b    jmp     #.next
4170c     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
41710     C7 01 00 F8 |                 setnib  hpar2
41714                 | 
41714     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
41718     C7 8F C3 F9 |                 decod   hpar2
4171c     C7 0F 43 F5 |                 or      hidr_flags, hpar2
41720                 | 
41720     01 24 07 F1 |                 add     hidr_usage_idx, #1
41724     02 1C 07 F6 |                 mov     hidr_state, #2
41728     F8 FD 9F FD |                 jmp     #.next
4172c                 | 
4172c                 | '------------------------------------------------------------------------------
4172c                 | ' Handle XInput controller
4172c                 | ' On entry:
4172c                 | '   ptrb - controller report
4172c                 | '------------------------------------------------------------------------------
4172c                 | '   Default implementation translates the report to a pseudo-defacto hid
4172c                 | '   standard and jumps to hpad_translate for actions.
4172c                 | '   Implementors may take specific actions for this kind of controller.
4172c                 | '------------------------------------------------------------------------------
4172c                 | hpad_xinput
4172c     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
41730     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
41734     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
41738     14 70 0F F2 |                 cmp     htmp, #$14      wz
4173c     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
41740                 | 
41740                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
41740                 | 
41740     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
41744     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
41748                 | 
41748     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
4174c     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
41750     5F BF 22 F6 |                 not     retval
41754     5F 11 2B F9 |                 setword hidr_axis, retval, #1
41758     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
4175c     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
41760     5F BF 22 F6 |                 not     retval
41764     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
41768                 | 
41768     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
4176c     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
41770     C0 BE 1E F2 |                 cmp     retval, #192    wcz
41774     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
41778     F8 01 B0 FD |                 call    #hpad_normalize
4177c     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
41780     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
41784     C0 BE 1E F2 |                 cmp     retval, #192    wcz
41788     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
4178c     E4 01 B0 FD |                 call    #hpad_normalize
41790     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
41794                 | 
41794     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
41798     81 BF E6 FA |                 rdword  retval, ptrb[1]
4179c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
417a0     00 16 47 F4 |                 bitc    hidr_buttons, #0
417a4     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
417a8     01 16 47 F4 |                 bitc    hidr_buttons, #1
417ac     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
417b0     02 16 47 F4 |                 bitc    hidr_buttons, #2
417b4     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
417b8     03 16 47 F4 |                 bitc    hidr_buttons, #3
417bc     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
417c0     04 16 47 F4 |                 bitc    hidr_buttons, #4
417c4     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
417c8     05 16 47 F4 |                 bitc    hidr_buttons, #5
417cc     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
417d0     08 16 47 F4 |                 bitc    hidr_buttons, #8
417d4     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
417d8     09 16 47 F4 |                 bitc    hidr_buttons, #9
417dc     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
417e0     0A 16 47 F4 |                 bitc    hidr_buttons, #10
417e4     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
417e8     0B 16 47 F4 |                 bitc    hidr_buttons, #11
417ec     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
417f0     0C 16 47 F4 |                 bitc    hidr_buttons, #12
417f4                 | 
417f4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
417f8     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
417fc     7A BB 7A FF 
41800     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
41804     F9 FF 7F FF 
41808     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
4180c     B9 71 5F F9 |                 altgn   htmp, #htmp1
41810     00 70 43 F8 |                 getnib  htmp
41814     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
41818                 | 
41818     AC 01 90 FD |                 jmp     #hpad_translate
4181c                 | 
4181c                 | '------------------------------------------------------------------------------
4181c                 | ' Handle PS3 controller
4181c                 | ' On entry:
4181c                 | '   ptrb - controller report
4181c                 | '------------------------------------------------------------------------------
4181c                 | '   Default implementation translates the report to a pseudo-defacto hid
4181c                 | '   standard and jumps to hpad_translate for actions.
4181c                 | '   Implementors may take specific actions for this kind of controller.
4181c                 | '------------------------------------------------------------------------------
4181c                 | hpad_ps3
4181c     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
41820     01 70 0F F2 |                 cmp     htmp, #$01      wz
41824     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
41828                 | 
41828                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
41828                 | 
41828     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
4182c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
41830     40 01 B0 FD |                 call    #hpad_normalize
41834     5F 11 23 F9 |                 setword hidr_axis, retval, #0
41838     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
4183c     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
41840     30 01 B0 FD |                 call    #hpad_normalize
41844     5F 11 2B F9 |                 setword hidr_axis, retval, #1
41848     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
4184c     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
41850     20 01 B0 FD |                 call    #hpad_normalize
41854     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
41858     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
4185c     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
41860     10 01 B0 FD |                 call    #hpad_normalize
41864     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
41868     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
4186c     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
41870                 | 
41870     08 8C 07 F6 |                 mov     hpar1, #8
41874     13 8E 07 F6 |                 mov     hpar2, #19
41878     94 00 B0 FD |                 call    #hpad_getbits
4187c                 | 
4187c     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
41880     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
41884     00 16 47 F4 |                 bitc    hidr_buttons, #0
41888     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
4188c     01 16 47 F4 |                 bitc    hidr_buttons, #1
41890     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
41894     02 16 47 F4 |                 bitc    hidr_buttons, #2
41898     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
4189c     03 16 47 F4 |                 bitc    hidr_buttons, #3
418a0     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
418a4     04 16 47 F4 |                 bitc    hidr_buttons, #4
418a8     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
418ac     05 16 47 F4 |                 bitc    hidr_buttons, #5
418b0     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
418b4     06 16 47 F4 |                 bitc    hidr_buttons, #6
418b8     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
418bc     07 16 47 F4 |                 bitc    hidr_buttons, #7
418c0     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
418c4     08 16 47 F4 |                 bitc    hidr_buttons, #8
418c8     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
418cc     09 16 47 F4 |                 bitc    hidr_buttons, #9
418d0     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
418d4     0A 16 47 F4 |                 bitc    hidr_buttons, #10
418d8     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
418dc     0B 16 47 F4 |                 bitc    hidr_buttons, #11
418e0     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
418e4     0C 16 47 F4 |                 bitc    hidr_buttons, #12
418e8                 | 
418e8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
418ec     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
418f0     09 FA 79 FF 
418f4     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
418f8     FF FA 7F FF 
418fc     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
41900     B9 71 5F F9 |                 altgn   htmp, #htmp1
41904     00 70 43 F8 |                 getnib  htmp
41908     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
4190c                 | 
4190c     B8 00 90 FD |                 jmp     #hpad_translate
41910                 | 
41910                 | '------------------------------------------------------------------------------
41910                 | ' Read bits from report data buffer
41910                 | '------------------------------------------------------------------------------
41910                 | ' On entry:
41910                 | '   PTRB - report buffer
41910                 | '   hpar1 - start bit
41910                 | '   hpar2 - number of bits
41910                 | ' On exit:
41910                 | '   retval - bits
41910                 | '------------------------------------------------------------------------------
41910                 | hpad_getbits
41910     C6 71 03 F6 |                 mov     htmp, hpar1
41914     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
41918     F9 71 03 F1 |                 add     htmp, ptrb
4191c     B8 BF 02 FB |                 rdlong  retval, htmp
41920                 | 
41920     C6 73 03 F6 |                 mov     htmp1, hpar1
41924     07 72 07 F5 |                 and     htmp1, #$07     ' shift
41928     B9 BF 42 F0 |                 shr     retval, htmp1
4192c                 | 
4192c     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
41930     10 00 90 1D |         if_a    jmp     #.l1
41934                 | 
41934     C7 8F C3 F9 |                 decod   hpar2
41938     01 8E 87 F1 |                 sub     hpar2, #1
4193c     C7 BF 02 F5 |                 and     retval, hpar2
41940     2D 00 64 FD |                 ret
41944                 | .l1
41944     FF 7F 00 FF 
41948     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
4194c     03 70 07 F1 |                 add     htmp, #3
41950     B8 75 03 FB |                 rdlong  htmp2, htmp
41954     18 8E 87 F1 |                 sub     hpar2, #24
41958     C7 8F C3 F9 |                 decod   hpar2
4195c     01 8E 87 F1 |                 sub     hpar2, #1
41960     B9 75 43 F0 |                 shr     htmp2, htmp1
41964     C7 75 03 F5 |                 and     htmp2, hpar2
41968     18 74 67 F0 |                 shl     htmp2, #24
4196c     BA BF 42 F5 |                 or      retval, htmp2
41970     2D 00 64 FD |                 ret
41974                 | 
41974                 | '------------------------------------------------------------------------------
41974                 | ' Normalize value to signed word (-32768 / 32767)
41974                 | '------------------------------------------------------------------------------
41974                 | ' On entry:
41974                 | '   retval - value to normalize
41974                 | '   hidr_lminmax - min (word 1) max (word 0) value range
41974                 | '   - or -
41974                 | '   hidr_pminmax - min (word 1) max (word 0) value range
41974                 | '   hidr_size - value bits length
41974                 | ' On exit:
41974                 | '   retval - normalized value
41974                 | '------------------------------------------------------------------------------
41974                 | hpad_normalize
41974     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
41978     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
4197c     2D 00 64 AD |         if_z    ret
41980     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
41984     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
41988     0F 72 77 F7 |                 signx   htmp1, #15      wc
4198c     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
41990     00 BE 66 C7 |         if_c    signx   retval, #0-0
41994     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
41998     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
4199c     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
419a0     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
419a4     B8 71 53 F6 |                 abs     htmp            wc
419a8     1F BE 0E F4 |                 testb   retval, #31     wz
419ac     5F BF 42 F6 |                 abs     retval
419b0     B8 BF 12 FD |                 qdiv    retval, htmp
419b4     18 BE 62 FD |                 getqx   retval
419b8     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
419bc     C0 FF 7F FF 
419c0     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
419c4     2D 00 64 FD |                 ret
419c8                 | 
419c8                 | '------------------------------------------------------------------------------
419c8                 | ' Perform controller actions
419c8                 | ' On entry:
419c8                 | '    hidr_id        report id
419c8                 | '    hidr_axis      axis value (signed word, 2 axes per long)
419c8                 | '                      X = hidr_axis+0, #0
419c8                 | '                      Y = hidr_axis+0, #1
419c8                 | '                      Z = hidr_axis+1, #0
419c8                 | '                     RX = hidr_axis+1, #1
419c8                 | '                     RY = hidr_axis+2, #0
419c8                 | '                     RZ = hidr_axis+2, #1
419c8                 | '    hidr_buttons   buttons state (bits 0 to 31)
419c8                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
419c8                 | '
419c8                 | '                     -------3 -------2 -------1 -------0 byte
419c8                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
419c8                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
419c8                 | '                                zyx||| |||||||| ++++++++ n. buttons
419c8                 | '                                |||||| ||||++++--------- n. axes
419c8                 | '                                |||||| ++++------------- n. hats
419c8                 | '                                ++++++------------------ valid axes
419c8                 | '------------------------------------------------------------------------------
419c8                 | hpad_translate
419c8                 | 
419c8                 | 
419c8                 |         if HAVE_HIDPAD
419c8     84 0C F0 FE |                 loc     ptrb,#hidpad_report
419cc     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
419d0     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
419d4     01 70 E7 F2 |                 cmpsub  htmp,#1
419d8     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
419dc     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
419e0     2D 00 7C 3D |         if_ae   ret     wcz
419e4     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
419e8     B8 F3 03 F1 |                 add     ptrb,htmp
419ec     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
419f0     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
419f4     28 0C 64 FD |                 setq    #7-1
419f8     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
419fc                 |         end
419fc                 | 
419fc                 | 
419fc                 |         if EMUPAD_MAX_PLAYER > 0
419fc                 | .emupad_no_hat
419fc                 |         if EMUPAD_BT0_BIT >= 0
419fc                 |         end
419fc                 |         if EMUPAD_BT1_BIT >= 0
419fc                 |         end
419fc                 |         if EMUPAD_BT2_BIT >= 0
419fc                 |         end
419fc                 |         if EMUPAD_BT3_BIT >= 0
419fc                 |         end
419fc                 |         if EMUPAD_BT4_BIT >= 0
419fc                 |         end
419fc                 |         if EMUPAD_BT5_BIT >= 0
419fc                 |         end
419fc                 |         if EMUPAD_BT6_BIT >= 0
419fc                 |         end
419fc                 |         if EMUPAD_BT7_BIT >= 0
419fc                 |         end
419fc                 |         if EMUPAD_BT8_BIT >= 0
419fc                 |         end
419fc                 |         if EMUPAD_BT9_BIT >= 0
419fc                 |         end
419fc                 | .emupad_slot_over
419fc                 |         end
419fc                 | 
419fc                 |         if 0
419fc                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
419fc                 | 
419fc                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
419fc                 | 
419fc                 |         end
419fc     2D 00 64 FD |                 ret
41a00                 | end
41a00                 | 
41a00                 | if EMUPAD_MAX_PLAYER > 0
41a00                 | '------------------------------------------------------------------------------
41a00                 | ' Clear EmuPad state
41a00                 | '------------------------------------------------------------------------------
41a00                 | emupad_reset
41a00                 | 
41a00                 | '------------------------------------------------------------------------------
41a00                 | ' Get EmuPad Player number for current device (into retval)
41a00                 | ' Z flag is also set if current device is valid
41a00                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
41a00                 | '------------------------------------------------------------------------------
41a00                 | emupad_getnum
41a00                 | .loop
41a00                 | '------------------------------------------------------------------------------
41a00                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
41a00                 | '------------------------------------------------------------------------------
41a00                 | emupad_discon
41a00                 | .loop         
41a00                 |         
41a00                 |         ' FALL THROUGH!!!
41a00                 | 
41a00                 | '------------------------------------------------------------------------------
41a00                 | ' Update EmuPad reports (all of them...)
41a00                 | '------------------------------------------------------------------------------
41a00                 | emupad_write_reports
41a00                 | .devloop
41a00                 | 
41a00                 | end
41a00                 | 
41a00                 | 
41a00                 | '------------------------------------------------------------------------------
41a00                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
41a00                 | '------------------------------------------------------------------------------
41a00                 | ' On entry:
41a00                 | ' On exit:
41a00                 | '------------------------------------------------------------------------------
41a00                 | hget_hub_status
41a00     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
41a04     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
41a08     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
41a0c     01 90 2F F9 |                 setword hpar3, #1, #1
41a10     CF 02 A0 FD |                 call    #do_int_in
41a14     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41a18     0C 00 90 AD |         if_z    jmp     #.data
41a1c     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
41a20     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
41a24     2D 00 64 FD |                 ret
41a28                 | .data
41a28     00 90 0F F2 |                 cmp     hpar3, #0               wz
41a2c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
41a30                 | 
41a30     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
41a34     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
41a38     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
41a3c     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
41a40                 |                 debug(ubin_long(hub_status_chg))
41a40                 | 
41a40     01 5A 06 F6 |                 mov     hdev_port, #1
41a44                 | .loop
41a44     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
41a48     0C 00 B0 AD |         if_x1   call    #hub_port_handler
41a4c     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
41a50     F0 FF 9F 3D |         if_nc   jmp     #.loop
41a54     2D 00 64 FD |                 ret
41a58                 | 
41a58                 | hub_port_handler
41a58     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
41a5c     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
41a60     27 EF 03 F6 |                 mov     pb, urx_buff_p
41a64     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41a68     55 02 A0 FD |                 call    #control_read
41a6c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
41a70                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
41a70                 | 
41a70     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
41a74     50 01 90 5D |         if_x0   jmp     #.other
41a78     68 02 D0 FE |                 loc     ptra, #clr_port_feat
41a7c     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
41a80     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41a84     A0 02 A0 FD |                 call    #control_write
41a88     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
41a8c     7C 01 90 5D |         if_x0   jmp     #.disconnect
41a90     B0 99 02 F6 |                 mov     hctwait, _100ms_
41a94     EF 02 A0 FD |                 call    #poll_waitx
41a98                 | 
41a98     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
41a9c     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
41aa0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41aa4     A0 02 A0 FD |                 call    #control_write
41aa8                 | 
41aa8     02 76 07 F6 |                 mov     htmp3, #2
41aac                 | .wait_reset
41aac     AC 99 02 F6 |                 mov     hctwait, _8ms_
41ab0     EF 02 A0 FD |                 call    #poll_waitx
41ab4     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
41ab8     27 EF 03 F6 |                 mov     pb, urx_buff_p
41abc     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41ac0     55 02 A0 FD |                 call    #control_read
41ac4     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
41ac8     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
41acc     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
41ad0                 | 
41ad0     10 02 D0 FE |                 loc     ptra, #clr_port_feat
41ad4     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
41ad8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41adc     A0 02 A0 FD |                 call    #control_write
41ae0                 | 
41ae0     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
41ae4                 | .wait_recover
41ae4     A7 99 02 F6 |                 mov     hctwait, _1ms_
41ae8     EF 02 A0 FD |                 call    #poll_waitx
41aec     FD 71 6F FB |                 djnz    htmp,#.wait_recover
41af0                 | 
41af0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
41af4     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
41af8     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
41afc                 | 
41afc     00 08 00 FF 
41b00     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
41b04     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
41b08     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
41b0c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
41b10     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
41b14     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41b18     48 01 90 5D |         if_nz   jmp     #.done
41b1c                 | .get_dev_desc
41b1c     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
41b20     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
41b24     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
41b28     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
41b2c     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
41b30     01 71 57 FC |                 wrword  htmp, ptra[wValue]
41b34     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
41b38     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41b3c     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
41b40     AC 99 02 F6 |                 mov     hctwait, _8ms_
41b44     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
41b48     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
41b4c     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
41b50     BE 00 A0 FD |                 call    #calc_crc5
41b54     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
41b58     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
41b5c     F7 AD C2 FA |                 rdbyte  total_data, pb
41b60     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
41b64     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
41b68     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41b6c     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
41b70     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
41b74     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
41b78                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
41b78     9F 99 02 F6 |                 mov     hctwait, _500us_
41b7c     EF 02 A0 FD |                 call    #poll_waitx
41b80     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
41b84     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
41b88     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
41b8c     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
41b90     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
41b94     CC 00 90 5D |         if_nz   jmp     #.done
41b98     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
41b9c     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
41ba0     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
41ba4     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
41ba8     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
41bac     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
41bb0     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
41bb4     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
41bb8     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
41bbc     A4 00 90 CD |         if_b    jmp     #.done
41bc0     70 F0 BF FD |                 call    #hparse_con_desc
41bc4     9C 00 90 FD |                 jmp     #.done
41bc8                 | 
41bc8                 | .other
41bc8     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
41bcc     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
41bd0     28 00 90 AD |         if_x1   jmp     #.reset_feature
41bd4     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
41bd8     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
41bdc     1C 00 90 AD |         if_x1   jmp     #.reset_feature
41be0     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
41be4     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
41be8     10 00 90 AD |         if_x1   jmp     #.reset_feature
41bec     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
41bf0     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
41bf4     04 00 90 AD |         if_x1   jmp     #.reset_feature
41bf8     68 00 90 FD |                 jmp     #.done
41bfc                 | .reset_feature
41bfc     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
41c00     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41c04     A0 02 A0 FD |                 call    #control_write
41c08     58 00 90 FD |                 jmp     #.done
41c0c                 | .disconnect
41c0c                 | 
41c0c     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
41c10     00 70 E3 F8 |                 getbyte htmp
41c14     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
41c18     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
41c1c     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
41c20     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
41c24     00 76 06 A6 |         if_z    mov     kb_led_states, #0
41c28     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
41c2c                 |         if EMUPAD_MAX_PLAYER > 0
41c2c                 |         end
41c2c                 |         if HAVE_MOUSE
41c2c     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
41c30     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
41c34     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
41c38                 |         end
41c38                 |         if HAVE_HIDPAD
41c38     14 0A F0 FE |                 loc ptrb,#hidpad_report
41c3c     2D 71 03 F6 |                 mov htmp,hdev_port
41c40     01 70 E7 F2 |                 cmpsub htmp,#1
41c44     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
41c48     B8 F3 03 F1 |                 add ptrb,htmp
41c4c     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
41c50     80 01 6C FC |                 wrlong #0,ptrb
41c54                 |         end
41c54                 | 
41c54     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
41c58     00 00 C4 F8 |                 setbyte #0
41c5c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
41c60     00 00 04 F6 |                 mov     0-0, #0
41c64                 | 
41c64                 | .done
41c64     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
41c68     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
41c6c     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
41c70     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
41c74     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
41c78     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
41c7c                 | 
41c7c     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
41c80     27 EF 03 F6 |                 mov     pb, urx_buff_p
41c84     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
41c88     55 02 A0 FD |                 call    #control_read
41c8c     00 69 06 FB |                 rdlong  hub_port_status, ptra
41c90                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
41c90     2D 00 64 FD |                 ret
41c94                 | 
41c94                 | '------------------------------------------------------------------------------
41c94                 | ' Partially populated SETUP packets
41c94                 | '------------------------------------------------------------------------------
41c94     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
41c95     06          |                 byte    REQ_GET_DESC
41c96     00 01       |                 word    TYPE_DEVICE << 8
41c98     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
41c9a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41c9c     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
41c9d     06          |                 byte    REQ_GET_DESC
41c9e     00 02       |                 word    TYPE_CONFIG << 8
41ca0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
41ca2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41ca4     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
41ca5     09          |                 byte    REQ_SET_CONFIG
41ca6     00 00       |                 word    0       ' Configuration value
41ca8     00 00       |                 word    0       ' Zero
41caa     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
41cac     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
41cad     05          |                 byte    REQ_SET_ADDR
41cae     00 00       |                 word    0       ' Zero
41cb0     00 00       |                 word    0       ' Zero
41cb2     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
41cb4                 | '------------------------------------------------------------------------------
41cb4                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
41cb4                 | ' wValue field dictates which protocol should be used.
41cb4                 | '
41cb4                 | ' When initialized, all devices default to report protocol. However the host
41cb4                 | ' should not make any assumptions about the device state and should set the
41cb4                 | ' desired protocol whenever initializing a device.
41cb4                 | '------------------------------------------------------------------------------
41cb4     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
41cb5     0B          |                 byte    HID_SET_PROTO
41cb6     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
41cb8                 |                                                 ' (HID 1.11 Section 7.2.6).
41cb8     00 00       |                 word    0               ' Interface index number.
41cba     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
41cbc                 | '------------------------------------------------------------------------------
41cbc     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
41cbd     0A          |                 byte    HID_SET_IDLE
41cbe     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
41cc0                 |                                         ' reporting until a change is detected in the report data
41cc0                 | 
41cc0                 |                                         ' (HID 1.11 Section 7.2.4).
41cc0     00 00       |                 word    0       ' Interface index number.
41cc2     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
41cc4     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
41cc5     09          |                 byte    HID_SET_REPORT
41cc6     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
41cc8                 |                                         ' (HID 1.11 Section 7.2.2).
41cc8     00 00       |                 word    0       ' Interface index number.
41cca     00 00       |                 word    0       ' Size of the report, in bytes.
41ccc     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
41ccd     06          |                 byte    REQ_GET_DESC
41cce     00 22       |                 word    TYPE_REPORT << 8
41cd0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
41cd2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41cd4                 | '------------------------------------------------------------------------------
41cd4     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
41cd5     06          |                 byte    REQ_GET_DESC
41cd6     00 29       |                 word    TYPE_HUB << 8
41cd8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
41cda     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41cdc     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
41cdd     03          |                 byte    REQ_SET_FEATURE
41cde     00 00       |                 word    0       ' port power
41ce0     01 00       |                 word    1       ' Port index number (1+)
41ce2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41ce4     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
41ce5     01          |                 byte    REQ_CLEAR_FEATURE
41ce6     00 00       |                 word    0       ' port power
41ce8     01 00       |                 word    1       ' Port index number (1+)
41cea     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
41cec     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
41ced     00          |                 byte    REQ_GET_STATUS
41cee     00 00       |                 word    0
41cf0     01 00       |                 word    1       ' Port index number (1+)
41cf2     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
41cf4                 | '------------------------------------------------------------------------------
41cf4                 | if _HAVE_GAMEPAD
41cf4     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
41cf8                 | ps3_command_buff
41cf8     00 00 00 00 
41cfc     00          |                 byte    $00, $00, $00, $00, $00
41cfd     00 00 00 00 
41d01     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
41d02     FF 27 10 00 
41d06     32          |                 byte    $FF, $27, $10, $00, $32
41d07     FF 27 10 00 
41d0b     32          |                 byte    $FF, $27, $10, $00, $32
41d0c     FF 27 10 00 
41d10     32          |                 byte    $FF, $27, $10, $00, $32
41d11     FF 27 10 00 
41d15     32          |                 byte    $FF, $27, $10, $00, $32
41d16     00 00 00 00 
41d1a     00          |                 byte    $00, $00, $00, $00, $00
41d1b     00 00 00 00 
41d1f     00          |                 byte    $00, $00, $00, $00, $00
41d20     00 00 00 00 
41d24     00          |                 byte    $00, $00, $00, $00, $00
41d25     00 00 00    |                 byte    $00, $00, $00
41d28                 | '------------------------------------------------------------------------------
41d28     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
41d2b                 |                                         ' 0x01 All blinking
41d2b                 |                                         ' 0x02 1 flashes, then on
41d2b                 |                                         ' 0x03 2 flashes, then on
41d2b                 |                                         ' 0x04 3 flashes, then on
41d2b                 |                                         ' 0x05 4 flashes, then on
41d2b                 |                                         ' 0x06 1 on
41d2b                 |                                         ' 0x07 2 on
41d2b                 |                                         ' 0x08 3 on
41d2b                 |                                         ' 0x09 4 on
41d2b                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
41d2b                 |                                         ' 0x0B Blinking*
41d2b                 |                                         ' 0x0C Slow blinking*
41d2b                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
41d2b     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
41d2e     00          |                 byte    $00             ' Left rumble
41d2f     00          |                 byte    $00             ' Right rumble
41d30     00 00 00    |                 byte    $00, $00, $00
41d33     00          | end
41d34                 | alignl
41d34                 | 
41d34                 | if HAVE_MOUSE
41d34     00 00 00 00 
41d38     00 00 00 00 | mouse_limits long 0[2]
41d3c     00 00 00 00 | mouse_outptr long 0
41d40                 | end
41d40                 | 
41d40                 | if KEYQUEUE_SIZE > 0
41d40     00          | keyq_head byte 0
41d41     00          | keyq_tail byte 0
41d42     00 00 00 00 
      ...             
41f3e     00 00 00 00 
41f42     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
41f44                 | alignl
41f44                 | end
41f44                 | 
41f44                 | if EMUPAD_MAX_PLAYER > 0
41f44                 | emupad_rule_buffer
41f44                 | if EMUPAD_BUILTIN_RULES
41f44                 | file "padmap_builtin.dat"
41f44                 | end
41f44                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
41f44                 | '' Default rule directly follows!
41f44                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
41f44                 | end
41f44                 | 
41f44                 | '------------------------------------------------------------------------------
41f44                 | ' The USB data cache area gets zero-filled at every device disconnect
41f44                 | '------------------------------------------------------------------------------
41f44                 | usb_cache_start
41f44                 | 
41f44                 | ' HID descriptor and report buffers
41f44                 | if !!OVERLAP_MEMORY
41f44     00 00 00 00 
      ...             
4263c     00 00 00 00 
42640     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
42644                 | end
42644     00 00 00 00 
42648     00 00 00 00 | hkbd_report     byte    0[8]
4264c     00 00 00 00 | hkbd_led_rep    byte    0
42650                 | alignl
42650                 | 
42650                 | if HAVE_HIDPAD
42650     00 00 00 00 
      ...             
4270c     00 00 00 00 
42710     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
42714                 | end
42714                 | 
42714                 | ' HUB descriptor
42714     00          | hub_descr       byte    0   ' bDescLength
42715     00          |                 byte    0   ' bDescriptorType
42716     00          |                 byte    0   ' bNbrPorts
42717     00 00       |                 word    0   ' wHubCharacteristics
42719     00          |                 byte    0   ' bPwrOn2PwrGood
4271a     00          |                 byte    0   ' bHubContrCurrent
4271b     00          |                 byte    0   ' DeviceRemoveable
4271c     00          |                 byte    0   ' PortPwrCtrlMask
4271d                 | 
4271d                 | usb_cache_end
4271d                 | 
4271d                 | if HAVE_MOUSE
4271d     00 00 00 00 | mouse_xacc      long 0
42721     00 00 00 00 | mouse_yacc      long 0
42725     00 00 00 00 | mouse_zacc      long 0
42729     00          | mouse_bstate    byte 0
4272a     00          | mouse_lpending  byte 0
4272b     00          | mouse_rpending  byte 0
4272c     00          | mouse_mpending  byte 0
4272d     00          | mouse_lock      byte 0
4272e     00 00 00    |                 byte 0[3] ' padding
42731                 | end
42731                 | 
42731     00 00 00 00 
      ...             
427a9     00 00 00 00 
427ad     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
427b1     00 00 00 00 
427b5     00 00 00 00 
427b9     00 00 00 00 
427bd     00 00 00 00 
427c1     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
427c3     00 00 00 00 
      ...             
428bb     00 00 00 00 
428bf     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
428c3                 | 
428c3     00          | driver_cog      byte    0                       ' Current driver cog + 1
428c4                 | 	alignl
428c4                 | _audio096_spin2_dat_
428c4                 | 
428c4                 | audio       org     0
428c4                 | 
428c4     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
428c8     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
428cc     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
428d0                 |  
428d0     01 EC 63 FD |             cogid   pa                   ' compute cogid
428d4     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
428d8     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
428dc     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
428e0                 | 
428e0     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
428e4     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
428e8     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
428ec     0F 24 06 FC |             wrpin   dac2,#right
428f0     0F 00 1E FC |             wxpin   #256,#right    
428f4     41 9C 64 FD |             dirh    #left addpins 1
428f8     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
428fc     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
42900     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
42904                 |             
42904                 | '---------------------------------------------------------------------------------        
42904                 | '----------------- The main loop -------------------------------------------------
42904                 | '---------------------------------------------------------------------------------
42904                 | 
42904     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
42908     10 00 90 CD |       if_c  jmp     #loop1
4290c                 |   
4290c     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
42910     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
42914     D5 00 80 F1 |             sub     0-0,a40000000
42918     FD 01 6E FB |             djnz    cn,#p402
4291c                 |     
4291c     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
42920     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
42924     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
42928     01 00 06 C6 |     if_c    mov     cn,#1
4292c     DA 02 3A F3 |             fle     ct,time3 wcz
42930     02 00 06 C6 |     if_c    mov     cn,#2     
42934     DB 02 3A F3 |             fle     ct,time4 wcz
42938     03 00 06 C6 |     if_c    mov     cn,#3
4293c     DC 02 3A F3 |             fle     ct,time5 wcz
42940     04 00 06 C6 |     if_c    mov     cn,#4
42944     DD 02 3A F3 |             fle     ct,time6 wcz
42948     05 00 06 C6 |     if_c    mov     cn,#5
4294c     DE 02 3A F3 |             fle     ct,time7 wcz
42950     06 00 06 C6 |     if_c    mov     cn,#6
42954     DF 02 3A F3 |             fle     ct,time8 wcz
42958     07 00 06 C6 |     if_c    mov     cn,#7
4295c                 | 
4295c                 | 
4295c                 | '----------------------------------------------------------------------------------
4295c                 | '------------- Compute channel samples --------------------------------------------
4295c                 | '----------------------------------------------------------------------------------
4295c                 | 
4295c                 | 
4295c     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
42960     06 C0 65 F0 |             shl     channeladd,#6
42964     E0 F0 03 F1 |             add     ptra,channeladd
42968                 | 
42968     28 16 64 FD |             setq    #11                        	' read parameters
4296c     00 D7 05 FB |             rdlong  pointer0,ptra
42970                 |     	    
42970     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
42974     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
42978     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
4297c     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
42980     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
42984     00 C4 0D F2 |             cmp     qq,#0 wz                         
42988     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
4298c     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
42990                 |             
42990     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
42994     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
42998     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
4299c                 | 
4299c     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
429a0     EC 08 3A F9 |             getword oldrs,sample0,#1
429a4     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
429a8     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
429ac     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
429b0     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
429b4                 | 
429b4     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
429b8     00 04 02 F6 |             mov     dt0,0-0    
429bc     D7 04 82 F1 |             sub     dt0,time0
429c0                 |             
429c0     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
429c4     FB 00 00 F1 |             add     0-0,afreq0  	
429c8                 |             
429c8                 | '---- envelopes
429c8                 |             
429c8     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
429cc     20 00 00 AF 
429d0     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
429d4     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
429d8                 | 
429d8     FB 48 02 F6 |             mov     envs1,afreq0
429dc     F5 48 02 FA |             mul     envs1,envspd0
429e0     24 E7 01 F1 |             add     envph0,envs1 
429e4                 | 
429e4     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
429e8     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
429ec     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
429f0     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
429f4     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
429f8     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
429fc     00 46 06 36 |     if_ge   mov     envlo,#0
42a00     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
42a04     16 E6 65 30 |     if_ge   shl     envph0,#22
42a08                 | 
42a08     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
42a0c     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
42a10     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
42a14     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
42a18     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
42a1c     24 49 32 F9 |             getword envs1,envs1,#0		' current value
42a20     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
42a24     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
42a28     23 49 02 FA |             mul     envs1,envlo
42a2c     25 49 02 F1 |             add     envs1,envs2
42a30     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
42a34                 |             
42a34     1B DA 0D F4 | p410        testb   sstart0, #27 wz
42a38     1B C6 61 AD |     if_z    getrnd  spl
42a3c     58 00 90 AD |     if_z    jmp     #p406
42a40                 |  
42a40     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
42a44     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
42a48     08 D6 45 F0 |             shr     pointer0,#8
42a4c                 |          
42a4c     1F DA 0D F4 |             testb   sstart0,#31 wz            
42a50     01 D6 65 A0 |     if_z    shl     pointer0,#1        
42a54     1C DA 0D F4 |             testb   sstart0,#28 wz            
42a58     01 D6 65 A0 |     if_z    shl     pointer0,#1        
42a5c                 |         
42a5c     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
42a60     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
42a64     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
42a68                 |             
42a68     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
42a6c     ED C4 01 F1 |             add     qq,sstart0            
42a70                 | 
42a70     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
42a74     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
42a78     1C 01 B0 1D |     if_gt   call    #cache_read
42a7c                 |          
42a7c     1F DA 0D F4 |             testb   sstart0,#31 wz 
42a80     08 C6 65 50 |     if_nz   shl     spl,#8
42a84     08 D6 65 50 |     if_nz   shl     pointer0,#8
42a88     07 D6 65 A0 |     if_z    shl     pointer0,#7
42a8c     1C DA 0D F4 |             testb   sstart0,#28 wz            
42a90     01 D6 45 A0 |     if_z    shr     pointer0,#1    
42a94     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
42a98                 | 
42a98                 | 
42a98     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
42a9c     00 C6 01 F6 |             mov     spl,0-0
42aa0     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
42aa4     00 C6 01 F6 |             mov     spl,0-0
42aa8                 | 
42aa8     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
42aac     00 0A 02 F6 |             mov     ls0,0-0
42ab0     20 00 00 FF 
42ab4     00 C4 05 F6 |             mov     qq,##16384
42ab8     FE C4 81 F1 |             sub     qq,apan0
42abc     E2 C6 31 FA |             scas    spl,qq
42ac0     00 0C 02 F6 |             mov     rs0, 0-0
42ac4                 | 
42ac4     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
42ac8     06 11 02 F1 |             add     rs,rs0
42acc     03 0F 82 F1 |             sub     ls,oldls
42ad0     05 0F 02 F1 |             add     ls,ls0
42ad4                 |    
42ad4     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
42ad8     05 D9 21 F9 |             setword sample0,ls0,#0
42adc                 |             
42adc     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
42ae0     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
42ae4     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
42ae8                 |   '  if_z    mov     sample0,#0
42ae8     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
42aec     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
42af0     04 00 00 AF 
42af4     00 B0 05 A1 |     if_z    add     time1,##2048
42af8     D8 B2 01 A6 |     if_z    mov     time2,time1
42afc     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
42b00                 | 
42b00     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
42b04     00 D7 65 FC |             wrlong  pointer0,ptra
42b08     08 E7 65 FC |             wrlong  envph0,ptra[8]
42b0c     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
42b10                 |                       
42b10     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
42b14     FF C3 25 A7 |     if_z    decmod  front, #511          
42b18                 |          
42b18     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
42b1c     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
42b20     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
42b24     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
42b28                 | 	    
42b28                 | 		    
42b28     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
42b2c     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
42b30     04 15 02 F6 |             mov     newsample, oldrs       
42b34                 | 
42b34     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
42b38     02 AF 01 F1 |             add     time0,dt0    
42b3c                 |                                      
42b3c     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
42b40     D8 FD 9F AD |     if_z    jmp     #loop1
42b44     02 C5 01 F6 |             mov     qq,dt0
42b48                 | 
42b48                 |     
42b48                 |             
42b48     01 4E 36 F0 | p301        rol     dropper,#1 wc
42b4c     40 00 90 3D |     if_nc   jmp     #p399
42b50     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
42b54     00 C2 9D F2 |             cmpr    front, #0-0 wcz
42b58     F4 FF 9F AD |     if_e    jmp     #p398   
42b5c                 | 		
42b5c     00 1A 0E F2 | 	    cmp     scbase,#0 wz
42b60     20 00 90 AD |     if_z    jmp     #p302	   
42b64                 |   
42b64     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
42b68     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
42b6c     02 1E 66 C0 |     if_c    shl     scptr2,#2
42b70     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
42b74     60 1E 66 FC |             wrlong  scptr2,#$60
42b78     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
42b7c     01 00 00 CF 
42b80     7F 1C 06 C7 |     if_c    incmod  scptr,##639
42b84                 | 			    
42b84     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
42b88     00 00 00 FF 
42b8c     FF C3 05 F7 |             incmod  front, ##511
42b90     ED C5 6D FB | p399        djnz    qq,#p301
42b94                 |             
42b94     6C FD 9F FD |             jmp     #loop            'loop
42b98                 | 
42b98                 | '----------------------------------------------------------------------------------
42b98                 | '------------- This is the end of the main loop -----------------------------------
42b98                 | '----------------------------------------------------------------------------------
42b98                 | 
42b98                 | '----------------------------------------------------------------------------------
42b98                 | '------------- PSRAM cache ----------- --------------------------------------------
42b98                 | '----------------------------------------------------------------------------------
42b98                 | 
42b98                 | ' There are 8 cache pointers for 8 channels
42b98                 | ' if 24 higher bits of address=cache, then get a word from the cache
42b98                 | ' else load the cache from PSRAM, update the pointer, then read a sample
42b98                 | 
42b98                 | 
42b98     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
42b9c                 |             
42b9c     E2 40 02 F6 | 	    mov     addrhi,qq		
42ba0     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
42ba4     14 01 96 F9 | 	    alts    cn,#cache1            
42ba8     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
42bac     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
42bb0                 | 	
42bb0     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
42bb4     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
42bb8     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
42bbc     08 38 66 F0 | 	    shl     cmd,#8
42bc0     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
42bc4     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
42bc8     08 3A 66 F0 |             shl     hubaddr,#8                  '
42bcc     13 3B 02 F1 |             add     hubaddr,hubptr 
42bd0     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
42bd4     28 04 64 FD |             setq    #2                          ' write 3 longs
42bd8     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
42bdc     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
42be0     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
42be4                 |             
42be4                 | 	
42be4     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
42be8     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
42bec     13 C5 01 F1 | 	    add     qq,hubptr
42bf0     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
42bf4     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
42bf8                 |           
42bf8                 | 
42bf8                 | '--------------------------------------------------------------------------
42bf8                 | '------ Interrupt service -------------------------------------------------
42bf8                 | '------ Output the sample, get the next one if exists ---------------------
42bf8                 | '--------------------------------------------------------------------------
42bf8                 | 
42bf8     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
42bfc     0F D0 25 FC |             wypin   rsample,#right       '4
42c00     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
42c04     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
42c08     FF F3 07 57 |     if_ne   incmod  ptrb,#511
42c0c     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
42c10     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
42c14                 |     
42c14     F5 FF 3B FB |             reti1                        '17/19 
42c18                 |           
42c18                 | '---------------------------------------------------------------------------
42c18                 | '-------- End of interrupt -------------------------------------------------
42c18                 | '---------------------------------------------------------------------------    
42c18                 | 
42c18                 | 
42c18                 | '---------------------------------------------------------------------------
42c18                 | '------- Variables ---------------------------------------------------------
42c18                 | '---------------------------------------------------------------------------
42c18                 | 
42c18                 | ' constants
42c18                 | 
42c18     00 00 00 40 | a40000000   long $40000000
42c1c     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
42c20                 | 
42c20                 | ' Time variables
42c20                 | 
42c20     00 00 00 00 | time0       long 0    ' Global sample computing time
42c24     01 00 00 00 | time1       long 1    ' Local channels time
42c28     02 00 00 00 | time2       long 2
42c2c     03 00 00 00 | time3       long 3
42c30     04 00 00 00 | time4       long 4
42c34     05 00 00 00 | time5       long 5
42c38     06 00 00 00 | time6       long 6
42c3c     07 00 00 00 | time7       long 7
42c40     08 00 00 00 | time8       long 8
42c44                 | 
42c44     00 00 00 00 | channeladd long 0
42c48                 | 
42c48     00 00 00 00 | front       long 0
42c4c                 | 
42c4c                 | ' temporary variables 
42c4c     00 00 00 00 | qq          long 0
42c50     00 00 00 00 | spl         long 0
42c54     00 00 00 00 | zero        long 0
42c58     00 00 00 00 | mailbox     long 0
42c5c     00 00 00 00 | mailbox2 long 0
42c60                 | 
42c60                 | ' Interrupt ISR variables
42c60                 | 
42c60     00 00 00 00 | lsample     long 0
42c64     00 00 00 00 | rsample     long 0
42c68     00 00 00 00 | lsnext      long 0
42c6c     00 00 00 00 | rsnext      long 0 
42c70                 | 
42c70                 | ' channel parameter block
42c70                 | 
42c70     00 00 00 00 | pointer0    long 0     
42c74     00 00 00 00 | sample0     long 0
42c78     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
42c7c     00 00 00 00 | lstart0     long 0
42c80     00 00 00 00 | lend0       long 0
42c84     00 00 00 00 | volpan0     long 0
42c88     00 00 00 00 | freqskip0   long 0
42c8c     00 00 00 00 | command0    long 0
42c90     00 00 00 00 | envph0	    long 0
42c94     00 00 00 00 | envptr0	    long 0
42c98     00 00 00 00 | envspd0	    long 0
42c9c     00 00 00 00 | envlen0	    long 0
42ca0     00 00 00 00 | res5	    long 0
42ca4     00 00 00 00 | res6	    long 0
42ca8     00 00 00 00 | res7	    long 0
42cac     00 00 00 00 | res8	    long 0
42cb0                 | 
42cb0     00 00 00 00 | afreq0      long 0
42cb4     00 00 00 00 | askip0      long 0
42cb8     00 00 00 00 | avol0       long 0
42cbc     00 00 00 00 | apan0       long 0
42cc0                 | 
42cc0     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
42cc4     00 00 00 00 | cn          long 0
42cc8     00 00 00 00 | ct          long 0
42ccc     00 00 00 00 | dt0         long 0
42cd0                 | 
42cd0                 | ' Samples
42cd0     00 00 00 00 | oldls       long 0
42cd4     00 00 00 00 | oldrs       long 0
42cd8                 | 
42cd8     00 00 00 00 | ls0         long 0
42cdc     00 00 00 00 | rs0         long 0
42ce0                 | 
42ce0     00 00 00 00 | ls          long 0    
42ce4     00 00 00 00 | rs          long 0
42ce8                 | 
42ce8     00 00 00 00 | oldsample   long 0
42cec     00 00 00 00 | newsample   long 0
42cf0                 | 
42cf0     00 00 00 00 | nrsample    long 0
42cf4     00 00 00 00 | nlsample    long 0
42cf8                 | 
42cf8     00 00 00 00 | scbase long 0
42cfc     00 00 00 00 | scptr long 0
42d00     00 00 00 00 | scptr2 long 0
42d04     00 00 00 00 | scope long 0
42d08                 | 
42d08     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
42d0c     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
42d10                 | 
42d10     00 18 07 00 | hubptr      long $71800
42d14     00 00 00 00 | cache1      long 0
42d18     00 00 00 00 | cache2      long 0
42d1c     00 00 00 00 | cache3      long 0
42d20     00 00 00 00 | cache4      long 0
42d24     00 00 00 00 | cache5      long 0
42d28     00 00 00 00 | cache6      long 0
42d2c     00 00 00 00 | cache7      long 0
42d30     00 00 00 00 | cache8      long 0
42d34                 | 
42d34                 | 
42d34     00 00 00 00 | cmd         long 0
42d38     00 00 00 00 | hubaddr     long 0
42d3c     00 01 00 00 | count       long 256
42d40     00 00 00 00 | addrlo long 0
42d44     00 00 00 00 | addrhi long 0
42d48     00 00 00 00 | pointer00 long 0
42d4c     00 00 00 00 | envhi long 0
42d50     00 00 00 00 | envlo long 0
42d54     00 00 00 00 | envs1 long 0
42d58     00 00 00 00 | envs2 long 0
42d5c     00 00 00 00 | noise0 long 0
42d60     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
42d64     00 00 00 00 
42d68     00 00 00 00 | null  			long 	0,0           ' for channel reset
42d6c                 | 	alignl
42d6c                 | __system__dat_
42d6c     00 00 00 00 
42d70     00 00 00 00 | 	byte	$00[8]
42d74     03 00 00 00 
42d78     00 00 00 00 
42d7c     00 00 00 00 
42d80     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
42d84     00 00 00 00 
      ...             
43010     00 00 00 00 
43014     00 00 00 00 | 	byte	$00[660]
43018     00 00 D0 0A | 	long	(173 {__system____root_opendir})<<20
4301c     00 00 E0 0A | 	long	(174 {__system____root_closedir})<<20
43020     00 00 F0 0A | 	long	(175 {__system____root_readdir})<<20
43024     00 00 00 0B | 	long	(176 {__system____root_stat})<<20
43028     00 00 00 00 
4302c     00 00 00 00 
43030     00 00 00 00 
43034     00 00 00 00 
43038     00 00 00 00 
4303c     00 00 00 00 
43040     00 00 00 00 | 	byte	$00[28]
43044     AC 30 04 00 | 	long	@@@__system__dat_ + 832
43048     AF 30 04 00 | 	long	@@@__system__dat_ + 835
4304c     D0 30 04 00 | 	long	@@@__system__dat_ + 868
43050     E9 30 04 00 | 	long	@@@__system__dat_ + 893
43054     04 31 04 00 | 	long	@@@__system__dat_ + 920
43058     1E 31 04 00 | 	long	@@@__system__dat_ + 946
4305c     2E 31 04 00 | 	long	@@@__system__dat_ + 962
43060     40 31 04 00 | 	long	@@@__system__dat_ + 980
43064     52 31 04 00 | 	long	@@@__system__dat_ + 998
43068     64 31 04 00 | 	long	@@@__system__dat_ + 1016
4306c     70 31 04 00 | 	long	@@@__system__dat_ + 1028
43070     81 31 04 00 | 	long	@@@__system__dat_ + 1045
43074     95 31 04 00 | 	long	@@@__system__dat_ + 1065
43078     9F 31 04 00 | 	long	@@@__system__dat_ + 1075
4307c     AF 31 04 00 | 	long	@@@__system__dat_ + 1091
43080     BE 31 04 00 | 	long	@@@__system__dat_ + 1106
43084     D4 31 04 00 | 	long	@@@__system__dat_ + 1128
43088     ED 31 04 00 | 	long	@@@__system__dat_ + 1153
4308c     01 32 04 00 | 	long	@@@__system__dat_ + 1173
43090     0F 32 04 00 | 	long	@@@__system__dat_ + 1187
43094     23 32 04 00 | 	long	@@@__system__dat_ + 1207
43098     2F 32 04 00 | 	long	@@@__system__dat_ + 1219
4309c     41 32 04 00 | 	long	@@@__system__dat_ + 1237
430a0     59 32 04 00 | 	long	@@@__system__dat_ + 1261
430a4     6B 32 04 00 | 	long	@@@__system__dat_ + 1279
430a8     7E 32 04 00 | 	long	@@@__system__dat_ + 1298
430ac     4F 4B 00 4E 
430b0     75 6D 65 72 
430b4     69 63 61 6C 
430b8     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
430bc     75 6D 65 6E 
430c0     74 20 6F 75 
430c4     74 20 6F 66 
430c8     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
430cc     61 69 6E 00 
430d0     52 65 73 75 
430d4     6C 74 20 6E 
430d8     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
430dc     65 70 72 65 
430e0     73 65 6E 74 
430e4     61 62 6C 65 
430e8     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
430ec     65 67 61 6C 
430f0     20 6D 75 6C 
430f4     74 69 62 79 
430f8     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
430fc     65 71 75 65 
43100     6E 63 65 00 
43104     4E 6F 20 73 
43108     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
4310c     66 69 6C 65 
43110     20 6F 72 20 
43114     64 69 72 65 
43118     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
4311c     79 00 42 61 
43120     64 20 66 69 
43124     6C 65 20 6E 
43128     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
4312c     72 00 50 65 
43130     72 6D 69 73 
43134     73 69 6F 6E 
43138     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
4313c     69 65 64 00 
43140     4E 6F 74 20 
43144     65 6E 6F 75 
43148     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
4314c     65 6D 6F 72 
43150     79 00 54 65 
43154     6D 70 6F 72 
43158     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
4315c     66 61 69 6C 
43160     75 72 65 00 
43164     46 69 6C 65 
43168     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
4316c     73 74 73 00 
43170     49 6E 76 61 
43174     6C 69 64 20 
43178     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
4317c     6D 65 6E 74 
43180     00 54 6F 6F 
43184     20 6D 61 6E 
43188     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
4318c     65 6E 20 66 
43190     69 6C 65 73 
43194     00 49 2F 4F 
43198     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
4319c     6F 72 00 4E 
431a0     6F 74 20 61 
431a4     20 64 69 72 
431a8     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
431ac     72 79 00 49 
431b0     73 20 61 20 
431b4     64 69 72 65 
431b8     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
431bc     79 00 52 65 
431c0     61 64 20 6F 
431c4     6E 6C 79 20 
431c8     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
431cc     20 73 79 73 
431d0     74 65 6D 00 
431d4     46 75 6E 63 
431d8     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
431dc     20 6E 6F 74 
431e0     20 69 6D 70 
431e4     6C 65 6D 65 
431e8     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
431ec     00 44 69 72 
431f0     65 63 74 6F 
431f4     72 79 20 6E 
431f8     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
431fc     6D 70 74 79 
43200     00 4E 61 6D 
43204     65 20 74 6F 
43208     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
4320c     6E 67 00 44 
43210     65 76 69 63 
43214     65 20 6E 6F 
43218     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
4321c     65 6B 61 62 
43220     6C 65 00 42 
43224     61 64 20 61 
43228     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
4322c     73 73 00 42 
43230     72 6F 6B 65 
43234     6E 20 63 6F 
43238     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
4323c     74 69 6F 6E 
43240     00 44 65 76 
43244     69 63 65 20 
43248     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
4324c     65 73 6F 75 
43250     72 63 65 20 
43254     62 75 73 79 
43258     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
4325c     73 73 20 64 
43260     65 76 69 63 
43264     65 20 6C 69 
43268     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
4326c     6F 20 73 70 
43270     61 63 65 20 
43274     6F 6E 20 64 
43278     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
4327c     65 00 55 6E 
43280     6B 6E 6F 77 
43284     6E 20 65 72 
43288     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
4328c     00 00 00 00 
43290     00 00 00 00 
43294     00 00 00 00 | 	byte	$00[12]
43298     05 00 00 00 
4329c     00 00 00 00 
432a0     00 00 00 00 
432a4     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
432a8     00 00 00 00 | 	byte	$00, $00, $00, $00
432ac     00 00 50 0C | 	long	(197 {__system___tx})<<20
432b0     00 00 60 0C | 	long	(198 {__system___rx})<<20
432b4     00 00 00 00 | 	byte	$00, $00, $00, $00
432b8     00 00 70 0C | 	long	(199 {__system___rxtxioctl_0779})<<20
432bc     00 00 80 0C | 	long	(200 {__system____dummy_flush_0780})<<20
432c0     00 00 00 00 
432c4     00 00 00 00 | 	byte	$00[8]
432c8     01 00 00 00 
432cc     06 00 00 00 
432d0     00 00 00 00 
432d4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
432d8     00 00 00 00 
432dc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
432e0     00 00 50 0C | 	long	(197 {__system___tx})<<20
432e4     00 00 60 0C | 	long	(198 {__system___rx})<<20
432e8     00 00 00 00 | 	byte	$00, $00, $00, $00
432ec     00 00 70 0C | 	long	(199 {__system___rxtxioctl_0779})<<20
432f0     00 00 80 0C | 	long	(200 {__system____dummy_flush_0780})<<20
432f4     00 00 00 00 
432f8     00 00 00 00 | 	byte	$00[8]
432fc     01 00 00 00 
43300     06 00 00 00 
43304     00 00 00 00 
43308     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
4330c     00 00 00 00 
43310     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
43314     00 00 50 0C | 	long	(197 {__system___tx})<<20
43318     00 00 60 0C | 	long	(198 {__system___rx})<<20
4331c     00 00 00 00 | 	byte	$00, $00, $00, $00
43320     00 00 70 0C | 	long	(199 {__system___rxtxioctl_0779})<<20
43324     00 00 80 0C | 	long	(200 {__system____dummy_flush_0780})<<20
43328     00 00 00 00 
      ...             
43498     00 00 00 00 
4349c     00 00 00 00 | 	byte	$00[376]
434a0     A4 34 04 00 | 	long	@@@__system__dat_ + 1848
434a4     00 00 00 00 
434a8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
434ac                 | 	alignl
434ac                 | _fatfs_cc_dat_
434ac     C7 00 FC 00 
434b0     E9 00 E2 00 
434b4     E4 00 E0 00 
434b8     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
434bc     EA 00 EB 00 
434c0     E8 00 EF 00 
434c4     EE 00 EC 00 
434c8     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
434cc     C9 00 E6 00 
434d0     C6 00 F4 00 
434d4     F6 00 F2 00 
434d8     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
434dc     FF 00 D6 00 
434e0     DC 00 F8 00 
434e4     A3 00 D8 00 
434e8     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
434ec     E1 00 ED 00 
434f0     F3 00 FA 00 
434f4     F1 00 D1 00 
434f8     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
434fc     BF 00 AE 00 
43500     AC 00 BD 00 
43504     BC 00 A1 00 
43508     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
4350c     91 25 92 25 
43510     93 25 02 25 
43514     24 25 C1 00 
43518     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
4351c     A9 00 63 25 
43520     51 25 57 25 
43524     5D 25 A2 00 
43528     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
4352c     14 25 34 25 
43530     2C 25 1C 25 
43534     00 25 3C 25 
43538     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
4353c     5A 25 54 25 
43540     69 25 66 25 
43544     60 25 50 25 
43548     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
4354c     F0 00 D0 00 
43550     CA 00 CB 00 
43554     C8 00 31 01 
43558     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
4355c     CF 00 18 25 
43560     0C 25 88 25 
43564     84 25 A6 00 
43568     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
4356c     D3 00 DF 00 
43570     D4 00 D2 00 
43574     F5 00 D5 00 
43578     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
4357c     DE 00 DA 00 
43580     DB 00 D9 00 
43584     FD 00 DD 00 
43588     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
4358c     AD 00 B1 00 
43590     17 20 BE 00 
43594     B6 00 A7 00 
43598     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
4359c     B0 00 A8 00 
435a0     B7 00 B9 00 
435a4     B3 00 B2 00 
435a8     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
435ac     61 00 1A 03 
435b0     E0 00 17 03 
435b4     F8 00 07 03 
435b8     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
435bc     78 01 00 01 
435c0     30 01 32 01 
435c4     06 01 39 01 
435c8     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
435cc     2E 01 79 01 
435d0     06 01 80 01 
435d4     4D 00 43 02 
435d8     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
435dc     82 01 84 01 
435e0     84 01 86 01 
435e4     87 01 87 01 
435e8     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
435ec     8B 01 8B 01 
435f0     8D 01 8E 01 
435f4     8F 01 90 01 
435f8     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
435fc     93 01 94 01 
43600     F6 01 96 01 
43604     97 01 98 01 
43608     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
4360c     9B 01 9C 01 
43610     9D 01 20 02 
43614     9F 01 A0 01 
43618     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
4361c     A2 01 A4 01 
43620     A4 01 A6 01 
43624     A7 01 A7 01 
43628     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
4362c     AB 01 AC 01 
43630     AC 01 AE 01 
43634     AF 01 AF 01 
43638     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
4363c     B3 01 B3 01 
43640     B5 01 B5 01 
43644     B7 01 B8 01 
43648     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
4364c     BB 01 BC 01 
43650     BC 01 BE 01 
43654     F7 01 C0 01 
43658     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
4365c     C3 01 C4 01 
43660     C5 01 C4 01 
43664     C7 01 C8 01 
43668     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
4366c     CB 01 CA 01 
43670     CD 01 10 01 
43674     DD 01 01 00 
43678     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
4367c     12 01 F3 01 
43680     03 00 F1 01 
43684     F4 01 F4 01 
43688     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
4368c     22 02 12 01 
43690     3A 02 09 00 
43694     65 2C 3B 02 
43698     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
4369c     66 2C 3F 02 
436a0     40 02 41 02 
436a4     41 02 46 02 
436a8     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
436ac     40 00 81 01 
436b0     86 01 55 02 
436b4     89 01 8A 01 
436b8     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
436bc     5A 02 90 01 
436c0     5C 02 5D 02 
436c4     5E 02 5F 02 
436c8     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
436cc     62 02 94 01 
436d0     64 02 65 02 
436d4     66 02 67 02 
436d8     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
436dc     6A 02 62 2C 
436e0     6C 02 6D 02 
436e4     6E 02 9C 01 
436e8     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
436ec     9D 01 73 02 
436f0     74 02 9F 01 
436f4     76 02 77 02 
436f8     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
436fc     7A 02 7B 02 
43700     7C 02 64 2C 
43704     7E 02 7F 02 
43708     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
4370c     82 02 A9 01 
43710     84 02 85 02 
43714     86 02 87 02 
43718     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
4371c     B1 01 B2 01 
43720     45 02 8D 02 
43724     8E 02 8F 02 
43728     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
4372c     B7 01 7B 03 
43730     03 00 FD 03 
43734     FE 03 FF 03 
43738     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
4373c     86 03 88 03 
43740     89 03 8A 03 
43744     B1 03 11 03 
43748     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
4374c     A3 03 A3 03 
43750     C4 03 08 03 
43754     CC 03 03 00 
43758     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
4375c     8F 03 D8 03 
43760     18 01 F2 03 
43764     0A 00 F9 03 
43768     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
4376c     F5 03 F6 03 
43770     F7 03 F7 03 
43774     F9 03 FA 03 
43778     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
4377c     20 03 50 04 
43780     10 07 60 04 
43784     22 01 8A 04 
43788     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
4378c     0E 01 CF 04 
43790     01 00 C0 04 
43794     D0 04 44 01 
43798     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
4379c     00 00 7D 1D 
437a0     01 00 63 2C 
437a4     00 1E 96 01 
437a8     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
437ac     00 1F 08 06 
437b0     10 1F 06 06 
437b4     20 1F 08 06 
437b8     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
437bc     40 1F 06 06 
437c0     51 1F 07 00 
437c4     59 1F 52 1F 
437c8     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
437cc     5D 1F 56 1F 
437d0     5F 1F 60 1F 
437d4     08 06 70 1F 
437d8     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
437dc     BB 1F C8 1F 
437e0     C9 1F CA 1F 
437e4     CB 1F DA 1F 
437e8     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
437ec     F9 1F EA 1F 
437f0     EB 1F FA 1F 
437f4     FB 1F 80 1F 
437f8     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
437fc     08 06 A0 1F 
43800     08 06 B0 1F 
43804     04 00 B8 1F 
43808     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
4380c     BC 1F CC 1F 
43810     01 00 C3 1F 
43814     D0 1F 02 06 
43818     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
4381c     E5 1F 01 00 
43820     EC 1F F3 1F 
43824     01 00 FC 1F 
43828     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
4382c     32 21 70 21 
43830     10 02 84 21 
43834     01 00 83 21 
43838     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
4383c     30 2C 2F 04 
43840     60 2C 02 01 
43844     67 2C 06 01 
43848     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
4384c     80 2C 64 01 
43850     00 2D 26 08 
43854     41 FF 1A 03 
43858     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
4385c     05 07 09 0E 
43860     10 12 14 16 
43864     18 1C 1E 43 
43868     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
4386c     41 41 43 45 
43870     45 45 49 49 
43874     49 41 41 45 
43878     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
4387c     4F 55 55 59 
43880     4F 55 4F 9C 
43884     4F 9E 9F 41 
43888     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
4388c     A5 A6 A7 A8 
43890     A9 AA AB AC 
43894     AD AE AF B0 
43898     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
4389c     41 41 41 B8 
438a0     B9 BA BB BC 
438a4     BD BE BF C0 
438a8     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
438ac     C5 41 41 C8 
438b0     C9 CA CB CC 
438b4     CD CE CF D1 
438b8     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
438bc     49 49 49 49 
438c0     D9 DA DB DC 
438c4     DD 49 DF 4F 
438c8     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
438cc     4F E6 E8 E8 
438d0     55 55 55 59 
438d4     59 EE EF F0 
438d8     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
438dc     F5 F6 F7 F8 
438e0     F9 FA FB FC 
438e4     FD FE FF 00 
438e8     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
438ec     00 00 00 00 | 	byte	$00, $00, $00, $00
438f0     00 00 40 0B | 	long	(180 {_fatfs_cc_v_close})<<20
438f4     00 00 50 0B | 	long	(181 {_fatfs_cc_v_read})<<20
438f8     00 00 60 0B | 	long	(182 {_fatfs_cc_v_write})<<20
438fc     00 00 70 0B | 	long	(183 {_fatfs_cc_v_lseek})<<20
43900     00 00 80 0B | 	long	(184 {_fatfs_cc_v_ioctl})<<20
43904     00 00 90 0C | 	long	(201 {_fatfs_cc_v_flush})<<20
43908     00 00 00 00 
4390c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
43910     00 00 90 0B | 	long	(185 {_fatfs_cc_v_open})<<20
43914     00 00 A0 0B | 	long	(186 {_fatfs_cc_v_creat})<<20
43918     00 00 B0 0B | 	long	(187 {_fatfs_cc_v_opendir})<<20
4391c     00 00 C0 0B | 	long	(188 {_fatfs_cc_v_closedir})<<20
43920     00 00 D0 0B | 	long	(189 {_fatfs_cc_v_readdir})<<20
43924     00 00 E0 0B | 	long	(190 {_fatfs_cc_v_stat})<<20
43928     00 00 F0 0B | 	long	(191 {_fatfs_cc_v_mkdir})<<20
4392c     00 00 00 0C | 	long	(192 {_fatfs_cc_v_rmdir})<<20
43930     00 00 10 0C | 	long	(193 {_fatfs_cc_v_remove})<<20
43934     00 00 20 0C | 	long	(194 {_fatfs_cc_v_rename})<<20
43938     00 00 30 0C | 	long	(195 {_fatfs_cc_v_init})<<20
4393c     00 00 40 0C | 	long	(196 {_fatfs_cc_v_deinit})<<20
43940     FF FF FF FF 
43944     1F 00 00 00 
43948     1C 00 00 00 
4394c     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
43950     1E 00 00 00 
43954     1F 00 00 00 
43958     1E 00 00 00 
4395c     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
43960     1F 00 00 00 
43964     1E 00 00 00 
43968     1F 00 00 00 
4396c     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
43970     1F 00 00 00 
43974     00 00 00 00 
43978     1F 00 00 00 
4397c     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
43980     5A 00 00 00 
43984     78 00 00 00 
43988     97 00 00 00 
4398c     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
43990     D4 00 00 00 
43994     F3 00 00 00 
43998     11 01 00 00 
4399c     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
439a0     4E 01 00 00 
439a4     6D 01 00 00 
439a8     FF FF FF FF 
439ac     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
439b0     00 00 00 00 
      ...             
439c8     00 00 00 00 
439cc     00 00 00 00 | 	byte	$00[32]
439d0     EE 39 04 00 | 	long	@@@_fatfs_cc_dat_ + 1346
439d4     F2 39 04 00 | 	long	@@@_fatfs_cc_dat_ + 1350
439d8     00 00 00 00 
439dc     00 00 00 00 
439e0     00 00 00 00 
439e4     00 00 00 00 
439e8     00 00       | 	byte	$00[18]
439ea     3F 3F 3F 00 
439ee     55 43 54 00 
439f2     55 43 54 00 
439f6     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
439fa     00 00 00 00 
439fe     00 00 00    | 	byte	$00[7]
43a01     CA 9A 3B 00 
43a05     00 00 00 01 
43a09     01 01 01 01 
43a0d     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
43a11     91 11 11 11 
43a15     11 01 01 01 
43a19     01 01 01 01 
43a1d     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
43a21     01 01 01 01 
43a25     01 01 01    | 	byte	$01[7]
43a28     90 20 20 20 
43a2c     20 20 20 20 
43a30     20 20 20 20 
43a34     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
43a38     42 42 42 42 
43a3c     42 42 42 42 
43a40     42 42       | 	byte	$42[10]
43a42     20 20 20 20 
43a46     20 20 20    | 	byte	$20[7]
43a49     44 44 44 44 
43a4d     44 44       | 	byte	$44[6]
43a4f     04 04 04 04 
43a53     04 04 04 04 
43a57     04 04 04 04 
43a5b     04 04 04 04 
43a5f     04 04 04 04 | 	byte	$04[20]
43a63     20 20 20 20 
43a67     20 20       | 	byte	$20[6]
43a69     48 48 48 48 
43a6d     48 48       | 	byte	$48[6]
43a6f     08 08 08 08 
43a73     08 08 08 08 
43a77     08 08 08 08 
43a7b     08 08 08 08 
43a7f     08 08 08 08 | 	byte	$08[20]
43a83     20 20 20 20 
43a87     01 00 00 00 
43a8b     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
43a8c                 | __methodtable__
43a8c     14 67 01 00 | 	long	@_do_no_command
43a90     20 0B 02 00 | 	long	@_do_plus
43a94     40 FB 01 00 | 	long	@_do_minus
43a98     08 0A 02 00 | 	long	@_do_or
43a9c     C0 01 02 00 | 	long	@_do_mul
43aa0     04 E6 01 00 | 	long	@_do_fdiv
43aa4     F0 DD 01 00 | 	long	@_do_and
43aa8     08 DF 01 00 | 	long	@_do_div
43aac     A0 FF 01 00 | 	long	@_do_mod
43ab0     D4 11 02 00 | 	long	@_do_shl
43ab4     EC 12 02 00 | 	long	@_do_shr
43ab8     0C 10 02 00 | 	long	@_do_power
43abc     A8 D3 01 00 | 	long	@_do_getvar
43ac0     50 94 01 00 | 	long	@_do_push
43ac4     A0 CD 01 00 | 	long	@_do_assign
43ac8     1C F7 00 00 | 	long	@_do_cls
43acc     E0 60 01 00 | 	long	@_do_new
43ad0     94 8C 01 00 | 	long	@_do_plot
43ad4     84 1F 01 00 | 	long	@_do_draw
43ad8     FC 8E 01 00 | 	long	@_do_print
43adc     FC F4 00 00 | 	long	@_do_circle
43ae0     B8 21 01 00 | 	long	@_do_fcircle
43ae4     E0 E3 00 00 | 	long	@_do_box
43ae8     9C 26 01 00 | 	long	@_do_frame
43aec     D8 F9 00 00 | 	long	@_do_color
43af0     2C 24 01 00 | 	long	@_do_for
43af4     4C 63 01 00 | 	long	@_do_next
43af8     EC 4D 01 00 | 	long	@_do_list
43afc     74 B0 01 00 | 	long	@_do_run
43b00     E0 20 01 00 | 	long	@_do_error
43b04     F4 33 01 00 | 	long	@_do_fast_goto
43b08     E4 34 01 00 | 	long	@_do_find_goto
43b0c     F8 36 01 00 | 	long	@_do_slow_goto
43b10     34 67 01 00 | 	long	@_do_nothing
43b14     90 B4 01 00 | 	long	@_do_save
43b18     88 50 01 00 | 	long	@_do_load
43b1c     D0 7F 01 00 | 	long	@_do_pinwrite
43b20     E0 CA 01 00 | 	long	@_do_waitms
43b24     14 CC 01 00 | 	long	@_do_waitvbl
43b28     EC 39 01 00 | 	long	@_do_if
43b2c     78 20 01 00 | 	long	@_do_else
43b30     28 E1 01 00 | 	long	@_do_eq
43b34     CC E7 01 00 | 	long	@_do_ge
43b38     98 F1 01 00 | 	long	@_do_le
43b3c     B4 EC 01 00 | 	long	@_do_gt
43b40     74 F6 01 00 | 	long	@_do_lt
43b44     2C 05 02 00 | 	long	@_do_ne
43b48     DC AD 01 00 | 	long	@_do_rnd
43b4c     C8 E5 00 00 | 	long	@_do_brun
43b50     64 DF 00 00 | 	long	@_do_beep
43b54     14 18 01 00 | 	long	@_do_dir
43b58     04 7C 01 00 | 	long	@_do_paper
43b5c     A8 3D 01 00 | 	long	@_do_ink
43b60     B0 23 01 00 | 	long	@_do_font
43b64     54 5B 01 00 | 	long	@_do_mode
43b68     9C 5F 01 00 | 	long	@_do_mouse
43b6c     74 32 01 00 | 	long	@_do_gettime
43b70     14 FF 00 00 | 	long	@_do_cursor
43b74     74 F6 00 00 | 	long	@_do_click
43b78     58 60 01 00 | 	long	@_do_mousex
43b7c     9C 60 01 00 | 	long	@_do_mousey
43b80     D0 5F 01 00 | 	long	@_do_mousek
43b84     14 60 01 00 | 	long	@_do_mousew
43b88     48 C0 01 00 | 	long	@_do_sin
43b8c     80 C3 01 00 | 	long	@_do_stick
43b90     10 C5 01 00 | 	long	@_do_strig
43b94     A0 C1 01 00 | 	long	@_do_sprite
43b98     38 13 01 00 | 	long	@_do_defsprite
43b9c     20 31 01 00 | 	long	@_do_getpixel
43ba0     BC CA 01 00 | 	long	@_do_waitclock
43ba4     F0 FE 01 00 | 	long	@_do_negative
43ba8     D4 9A 01 00 | 	long	@_do_rdpin
43bac     00 B0 01 00 | 	long	@_do_rqpin
43bb0     FC 7D 01 00 | 	long	@_do_pinread
43bb4     20 CC 01 00 | 	long	@_do_wrpin
43bb8     A0 CC 01 00 | 	long	@_do_wxpin
43bbc     20 CD 01 00 | 	long	@_do_wypin
43bc0     3C 7D 01 00 | 	long	@_do_pinfloat
43bc4     BC 7D 01 00 | 	long	@_do_pinlo
43bc8     7C 7D 01 00 | 	long	@_do_pinhi
43bcc     80 7E 01 00 | 	long	@_do_pinstart
43bd0     90 7F 01 00 | 	long	@_do_pintoggle
43bd4     74 8E 01 00 | 	long	@_do_position
43bd8     F0 FD 00 00 | 	long	@_do_cos
43bdc     A0 C6 01 00 | 	long	@_do_tan
43be0     4C DE 00 00 | 	long	@_do_atn
43be4     3C DD 00 00 | 	long	@_do_asin
43be8     CC DA 00 00 | 	long	@_do_acos
43bec     8C C2 01 00 | 	long	@_do_sqr
43bf0     9C 22 01 00 | 	long	@_do_fill
43bf4     48 0A 01 00 | 	long	@_do_defsnd
43bf8     48 FF 00 00 | 	long	@_do_defenv
43bfc     AC 9A 01 00 | 	long	@_do_rad
43c00     AC 16 01 00 | 	long	@_do_deg
43c04     28 3E 01 00 | 	long	@_do_int
43c08     58 80 01 00 | 	long	@_do_play
43c0c     A0 BA 01 00 | 	long	@_do_setdelay
43c10     48 BB 01 00 | 	long	@_do_setenv
43c14     F0 BB 01 00 | 	long	@_do_setlen
43c18     98 BC 01 00 | 	long	@_do_setpan
43c1c     E8 BD 01 00 | 	long	@_do_setvol
43c20     90 BE 01 00 | 	long	@_do_setwave
43c24     40 BD 01 00 | 	long	@_do_setsustain
43c28     CC AA 01 00 | 	long	@_do_release
43c2c     0C 2F 01 00 | 	long	@_do_getenvsustain
43c30     64 8D 01 00 | 	long	@_do_poke
43c34     AC 1E 01 00 | 	long	@_do_dpoke
43c38     68 57 01 00 | 	long	@_do_lpoke
43c3c     8C 7C 01 00 | 	long	@_do_peek
43c40     00 1E 01 00 | 	long	@_do_dpeek
43c44     BC 56 01 00 | 	long	@_do_lpeek
43c48     F8 27 01 00 | 	long	@_do_fre
43c4c     1C 30 01 00 | 	long	@_do_getnotevalue
43c50     60 D9 01 00 | 	long	@_do_getaddr
43c54     D0 3A 01 00 | 	long	@_do_inkey
43c58     4C DA 00 00 | 	long	@_do_abs
43c5c     88 38 01 00 | 	long	@_do_hex
43c60     7C E2 00 00 | 	long	@_do_bin
43c64     B0 C7 01 00 | 	long	@_do_val
43c68     FC F3 00 00 | 	long	@_do_chr
43c6c     DC DB 00 00 | 	long	@_do_asc
43c70     EC 4A 01 00 | 	long	@_do_left
43c74     50 AC 01 00 | 	long	@_do_right
43c78     C8 58 01 00 | 	long	@_do_mid
43c7c     78 4C 01 00 | 	long	@_do_len
43c80     DC 32 01 00 | 	long	@_do_gosub
43c84     A4 AB 01 00 | 	long	@_do_return
43c88     9C 20 01 00 | 	long	@_do_end
43c8c     3C 8E 01 00 | 	long	@_do_pop
43c90     40 55 01 00 | 	long	@_do_log
43c94     F0 F1 00 00 | 	long	@_do_changevol
43c98     D0 F2 00 00 | 	long	@_do_changewav
43c9c     E0 F0 00 00 | 	long	@_do_changepan
43ca0     C4 ED 00 00 | 	long	@_do_changefreq
43ca4     38 BF 01 00 | 	long	@_do_shutup
43ca8     AC AF 01 00 | 	long	@_do_round
43cac     D0 20 01 00 | 	long	@_do_enter
43cb0     5C 68 01 00 | 	long	@_do_open
43cb4     A0 F6 00 00 | 	long	@_do_close
43cb8     5C 28 01 00 | 	long	@_do_get
43cbc     6C 95 01 00 | 	long	@_do_put
43cc0     04 E8 00 00 | 	long	@_do_cd
43cc4     D4 16 01 00 | 	long	@_do_delete
43cc8     94 5A 01 00 | 	long	@_do_mkdir
43ccc     78 E0 00 00 | 	long	@_do_blit
43cd0     C4 27 01 00 | 	long	@_do_framebuf
43cd4     38 67 01 00 | 	long	@_do_on
43cd8     58 C1 01 00 | 	long	@_do_skip
43cdc     E4 3E 01 00 | 	long	@_do_input
43ce0     38 9D 01 00 | 	long	@_do_read
43ce4     64 AB 01 00 | 	long	@_do_restore
43ce8     84 74 01 00 | 	long	@_do_padx
43cec     04 77 01 00 | 	long	@_do_pady
43cf0     84 79 01 00 | 	long	@_do_padz
43cf4     04 6D 01 00 | 	long	@_do_padrx
43cf8     84 6F 01 00 | 	long	@_do_padry
43cfc     04 72 01 00 | 	long	@_do_padrz
43d00     74 6B 01 00 | 	long	@_do_padh
43d04     10 FA 00 00 | 	long	@_do_copy
43d08     5C F7 00 00 | 	long	@_do_coginit
43d0c     98 F9 00 00 | 	long	@_do_cogstop
43d10     40 58 01 00 | 	long	@_do_memlo
43d14     84 58 01 00 | 	long	@_do_memtop
43d18     34 B8 01 00 | 	long	@_do_setcolor
43d1c     00 2E 01 00 | 	long	@_do_getcolor
43d20     9C AB 01 00 | 	long	@_do_restorepalette
43d24     7C 54 02 00 | 	long	@_hg010b_spin2_putchar
43d28     D4 6A 03 00 | 	long	@__struct___bas_wrap_sender_tx
43d2c     18 6B 03 00 | 	long	@__struct___bas_wrap_sender_rx
43d30     60 6B 03 00 | 	long	@__struct___bas_wrap_sender_close
43d34     04 6A 03 00 | 	long	@__struct__s_vfs_file_t_putchar
43d38     74 6A 03 00 | 	long	@__struct__s_vfs_file_t_getchar
43d3c     BC 69 03 00 | 	long	@___strs_cl_pfunc
43d40     54 C7 02 00 | 	long	@__system____root_opendir
43d44     F0 C7 02 00 | 	long	@__system____root_closedir
43d48     6C C7 02 00 | 	long	@__system____root_readdir
43d4c     F8 C7 02 00 | 	long	@__system____root_stat
43d50     44 C0 02 00 | 	long	@__system____default_putc
43d54     C8 BF 02 00 | 	long	@__system____default_getc
43d58     EC C0 02 00 | 	long	@__system____default_flush
43d5c     C4 54 03 00 | 	long	@_fatfs_cc_v_close
43d60     E0 58 03 00 | 	long	@_fatfs_cc_v_read
43d64     F4 59 03 00 | 	long	@_fatfs_cc_v_write
43d68     D4 5A 03 00 | 	long	@_fatfs_cc_v_lseek
43d6c     5C 5B 03 00 | 	long	@_fatfs_cc_v_ioctl
43d70     B0 5B 03 00 | 	long	@_fatfs_cc_v_open
43d74     28 54 03 00 | 	long	@_fatfs_cc_v_creat
43d78     08 55 03 00 | 	long	@_fatfs_cc_v_opendir
43d7c     7C 55 03 00 | 	long	@_fatfs_cc_v_closedir
43d80     BC 55 03 00 | 	long	@_fatfs_cc_v_readdir
43d84     F0 56 03 00 | 	long	@_fatfs_cc_v_stat
43d88     70 5B 03 00 | 	long	@_fatfs_cc_v_mkdir
43d8c     90 5B 03 00 | 	long	@_fatfs_cc_v_rmdir
43d90     80 5B 03 00 | 	long	@_fatfs_cc_v_remove
43d94     A0 5B 03 00 | 	long	@_fatfs_cc_v_rename
43d98     C0 5C 03 00 | 	long	@_fatfs_cc_v_init
43d9c     C8 5C 03 00 | 	long	@_fatfs_cc_v_deinit
43da0     94 71 02 00 | 	long	@__system___tx
43da4     D4 71 02 00 | 	long	@__system___rx
43da8     64 D3 02 00 | 	long	@__system___rxtxioctl_0779
43dac     BC D3 02 00 | 	long	@__system____dummy_flush_0780
43db0     90 5C 03 00 | 	long	@_fatfs_cc_v_flush
43db4                 | __heap_base
43db4     00 00 00 00 
      ...             
5b4b4     00 00 00 00 
5b4b8     00 00 00 00 | 	long	0[24002]
5b4bc                 | objmem
5b4bc     00 00 00 00 
      ...             
659d4     00 00 00 00 
659d8     00 00 00 00 | 	long	0[10568]
659dc                 | stackspace
659dc     00 00 00 00 | 	long	0[1]
659e0 100             | 	org	COG_BSS_START
659e0 100             | _var01
659e0 100             | 	res	1
659e0 101             | _var02
659e0 101             | 	res	1
659e0 102             | _var03
659e0 102             | 	res	1
659e0 103             | _var04
659e0 103             | 	res	1
659e0 104             | _var05
659e0 104             | 	res	1
659e0 105             | _var06
659e0 105             | 	res	1
659e0 106             | _var07
659e0 106             | 	res	1
659e0 107             | _var08
659e0 107             | 	res	1
659e0 108             | _var09
659e0 108             | 	res	1
659e0 109             | arg01
659e0 109             | 	res	1
659e0 10a             | arg02
659e0 10a             | 	res	1
659e0 10b             | arg03
659e0 10b             | 	res	1
659e0 10c             | arg04
659e0 10c             | 	res	1
659e0 10d             | arg05
659e0 10d             | 	res	1
659e0 10e             | arg06
659e0 10e             | 	res	1
659e0 10f             | arg07
659e0 10f             | 	res	1
659e0 110             | arg08
659e0 110             | 	res	1
659e0 111             | arg09
659e0 111             | 	res	1
659e0 112             | arg10
659e0 112             | 	res	1
659e0 113             | local01
659e0 113             | 	res	1
659e0 114             | local02
659e0 114             | 	res	1
659e0 115             | local03
659e0 115             | 	res	1
659e0 116             | local04
659e0 116             | 	res	1
659e0 117             | local05
659e0 117             | 	res	1
659e0 118             | local06
659e0 118             | 	res	1
659e0 119             | local07
659e0 119             | 	res	1
659e0 11a             | local08
659e0 11a             | 	res	1
659e0 11b             | local09
659e0 11b             | 	res	1
659e0 11c             | local10
659e0 11c             | 	res	1
659e0 11d             | local11
659e0 11d             | 	res	1
659e0 11e             | local12
659e0 11e             | 	res	1
659e0 11f             | local13
659e0 11f             | 	res	1
659e0 120             | local14
659e0 120             | 	res	1
659e0 121             | local15
659e0 121             | 	res	1
659e0 122             | local16
659e0 122             | 	res	1
659e0 123             | local17
659e0 123             | 	res	1
659e0 124             | local18
659e0 124             | 	res	1
659e0 125             | local19
659e0 125             | 	res	1
659e0 126             | local20
659e0 126             | 	res	1
659e0 127             | local21
659e0 127             | 	res	1
659e0 128             | local22
659e0 128             | 	res	1
659e0 129             | local23
659e0 129             | 	res	1
659e0 12a             | local24
659e0 12a             | 	res	1
659e0 12b             | local25
659e0 12b             | 	res	1
659e0 12c             | local26
659e0 12c             | 	res	1
659e0 12d             | local27
659e0 12d             | 	res	1
659e0 12e             | local28
659e0 12e             | 	res	1
659e0 12f             | local29
659e0 12f             | 	res	1
659e0 130             | local30
659e0 130             | 	res	1
659e0 131             | local31
659e0 131             | 	res	1
659e0 132             | local32
659e0 132             | 	res	1
659e0 133             | local33
659e0 133             | 	res	1
659e0 134             | local34
659e0 134             | 	res	1
659e0 135             | local35
659e0 135             | 	res	1
659e0 136             | local36
659e0 136             | 	res	1
659e0 137             | local37
659e0 137             | 	res	1
659e0 138             | local38
659e0 138             | 	res	1
659e0 139             | local39
659e0 139             | 	res	1
659e0 13a             | local40
659e0 13a             | 	res	1
659e0 13b             | local41
659e0 13b             | 	res	1
659e0 13c             | local42
659e0 13c             | 	res	1
659e0 13d             | local43
659e0 13d             | 	res	1
659e0 13e             | local44
659e0 13e             | 	res	1
659e0 13f             | local45
659e0 13f             | 	res	1
659e0 140             | local46
659e0 140             | 	res	1
659e0 141             | local47
659e0 141             | 	res	1
659e0 142             | local48
659e0 142             | 	res	1
659e0 143             | local49
659e0 143             | 	res	1
659e0 144             | local50
659e0 144             | 	res	1
659e0 145             | local51
659e0 145             | 	res	1
659e0 146             | local52
659e0 146             | 	res	1
659e0 147             | local53
659e0 147             | 	res	1
659e0 148             | muldiva_
659e0 148             | 	res	1
659e0 149             | muldivb_
659e0 149             | 	res	1
659e0 14a             | 	fit	480
659e0 14a             | 
